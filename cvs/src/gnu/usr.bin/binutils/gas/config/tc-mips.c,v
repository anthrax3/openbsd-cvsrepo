head	1.13;
access;
symbols
	OPENBSD_6_0:1.13.0.16
	OPENBSD_6_0_BASE:1.13
	OPENBSD_5_9:1.13.0.12
	OPENBSD_5_9_BASE:1.13
	OPENBSD_5_8:1.13.0.14
	OPENBSD_5_8_BASE:1.13
	OPENBSD_5_7:1.13.0.6
	OPENBSD_5_7_BASE:1.13
	OPENBSD_5_6:1.13.0.10
	OPENBSD_5_6_BASE:1.13
	OPENBSD_5_5:1.13.0.8
	OPENBSD_5_5_BASE:1.13
	OPENBSD_5_4:1.13.0.4
	OPENBSD_5_4_BASE:1.13
	OPENBSD_5_3:1.13.0.2
	OPENBSD_5_3_BASE:1.13
	OPENBSD_5_2:1.11.0.12
	OPENBSD_5_2_BASE:1.11
	OPENBSD_5_1_BASE:1.11
	OPENBSD_5_1:1.11.0.10
	OPENBSD_5_0:1.11.0.8
	OPENBSD_5_0_BASE:1.11
	OPENBSD_4_9:1.11.0.6
	OPENBSD_4_9_BASE:1.11
	OPENBSD_4_8:1.11.0.4
	OPENBSD_4_8_BASE:1.11
	OPENBSD_4_7:1.11.0.2
	OPENBSD_4_7_BASE:1.11
	OPENBSD_4_6:1.10.0.22
	OPENBSD_4_6_BASE:1.10
	OPENBSD_4_5:1.10.0.18
	OPENBSD_4_5_BASE:1.10
	OPENBSD_4_4:1.10.0.16
	OPENBSD_4_4_BASE:1.10
	OPENBSD_4_3:1.10.0.14
	OPENBSD_4_3_BASE:1.10
	OPENBSD_4_2:1.10.0.12
	OPENBSD_4_2_BASE:1.10
	OPENBSD_4_1:1.10.0.10
	OPENBSD_4_1_BASE:1.10
	OPENBSD_4_0:1.10.0.8
	OPENBSD_4_0_BASE:1.10
	OPENBSD_3_9:1.10.0.6
	OPENBSD_3_9_BASE:1.10
	OPENBSD_3_8:1.10.0.4
	OPENBSD_3_8_BASE:1.10
	OPENBSD_3_7:1.10.0.2
	OPENBSD_3_7_BASE:1.10
	BINUTILS_2_15:1.1.1.9
	OPENBSD_3_6:1.9.0.2
	OPENBSD_3_6_BASE:1.9
	BINUTILS-2_14:1.1.1.8
	OPENBSD_3_5:1.8.0.8
	OPENBSD_3_5_BASE:1.8
	OPENBSD_3_4:1.8.0.6
	OPENBSD_3_4_BASE:1.8
	OPENBSD_3_3:1.8.0.4
	OPENBSD_3_3_BASE:1.8
	OPENBSD_3_2:1.8.0.2
	OPENBSD_3_2_BASE:1.8
	binutils-2_11_2:1.1.1.7
	OPENBSD_3_1:1.7.0.8
	OPENBSD_3_1_BASE:1.7
	OPENBSD_3_0:1.7.0.6
	OPENBSD_3_0_BASE:1.7
	BINUTILS-2_10_1:1.1.1.6
	OPENBSD_2_9:1.7.0.4
	OPENBSD_2_9_BASE:1.7
	OPENBSD_2_8:1.7.0.2
	OPENBSD_2_8_BASE:1.7
	BINUTILS-2_10:1.1.1.6
	OPENBSD_2_7:1.5.0.8
	OPENBSD_2_7_BASE:1.5
	new-binutils:1.5.0.6
	OPENBSD_2_6:1.5.0.4
	OPENBSD_2_6_BASE:1.5
	OPENBSD_2_5:1.5.0.2
	OPENBSD_2_5_BASE:1.5
	OPENBSD_2_4:1.4.0.8
	OPENBSD_2_4_BASE:1.4
	OPENBSD_2_3:1.4.0.6
	OPENBSD_2_3_BASE:1.4
	OPENBSD_2_2:1.4.0.4
	OPENBSD_2_2_BASE:1.4
	BINUTILS-2_8_1:1.1.1.5
	OPENBSD_2_1:1.4.0.2
	OPENBSD_2_1_BASE:1.4
	CYGNUS-961112:1.1.1.4
	OPENBSD_2_0:1.3.0.2
	OPENBSD_2_0_BASE:1.3
	CYGNUS-960904:1.1.1.3
	CYGNUS-960609:1.1.1.2
	CYGNUS:1.1.1
	FSF_2_6:1.1.1.1
	FSF:1.1.1;
locks; strict;
comment	@ * @;


1.13
date	2013.02.09.21.59.59;	author brad;	state Exp;
branches;
next	1.12;

1.12
date	2013.01.07.22.23.05;	author bcallah;	state Exp;
branches;
next	1.11;

1.11
date	2010.02.03.21.44.17;	author miod;	state Exp;
branches;
next	1.10;

1.10
date	2004.11.02.20.45.28;	author miod;	state Exp;
branches;
next	1.9;

1.9
date	2004.05.17.21.54.30;	author drahn;	state Exp;
branches;
next	1.8;

1.8
date	2002.05.13.17.07.36;	author fgsch;	state Exp;
branches;
next	1.7;

1.7
date	2000.10.29.22.55.11;	author miod;	state Exp;
branches;
next	1.6;

1.6
date	2000.09.12.19.11.51;	author espie;	state Exp;
branches;
next	1.5;

1.5
date	98.12.06.10.01.28;	author pefo;	state Exp;
branches;
next	1.4;

1.4
date	96.11.23.03.34.46;	author niklas;	state Exp;
branches;
next	1.3;

1.3
date	96.09.04.19.06.02;	author niklas;	state Exp;
branches;
next	1.2;

1.2
date	96.06.10.10.51.30;	author niklas;	state Exp;
branches;
next	1.1;

1.1
date	96.01.08.11.06.10;	author niklas;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	96.01.08.11.06.10;	author niklas;	state Exp;
branches;
next	1.1.1.2;

1.1.1.2
date	96.06.09.19.40.44;	author niklas;	state Exp;
branches;
next	1.1.1.3;

1.1.1.3
date	96.09.04.17.45.00;	author niklas;	state Exp;
branches;
next	1.1.1.4;

1.1.1.4
date	96.11.19.14.14.27;	author niklas;	state Exp;
branches;
next	1.1.1.5;

1.1.1.5
date	97.05.29.09.23.12;	author niklas;	state Exp;
branches;
next	1.1.1.6;

1.1.1.6
date	2000.09.12.14.46.28;	author espie;	state Exp;
branches;
next	1.1.1.7;

1.1.1.7
date	2002.05.13.13.36.28;	author fgsch;	state Exp;
branches;
next	1.1.1.8;

1.1.1.8
date	2004.05.17.20.42.32;	author drahn;	state Exp;
branches;
next	1.1.1.9;

1.1.1.9
date	2004.11.02.20.22.46;	author miod;	state Exp;
branches;
next	;


desc
@@


1.13
log
@Add CFI support for MIPS.

Backported from binutils 2.17.

ok miod@@
@
text
@/* tc-mips.c -- assemble code for a MIPS chip.
   Copyright 1993, 1994, 1995, 1996, 1997, 1998, 1999, 2000, 2001, 2002,
   2003, 2004 Free Software Foundation, Inc.
   Contributed by the OSF and Ralph Campbell.
   Written by Keith Knowles and Ralph Campbell, working independently.
   Modified for ECOFF and R4000 support by Ian Lance Taylor of Cygnus
   Support.

   This file is part of GAS.

   GAS is free software; you can redistribute it and/or modify
   it under the terms of the GNU General Public License as published by
   the Free Software Foundation; either version 2, or (at your option)
   any later version.

   GAS is distributed in the hope that it will be useful,
   but WITHOUT ANY WARRANTY; without even the implied warranty of
   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
   GNU General Public License for more details.

   You should have received a copy of the GNU General Public License
   along with GAS; see the file COPYING.  If not, write to the Free
   Software Foundation, 59 Temple Place - Suite 330, Boston, MA
   02111-1307, USA.  */

#include "as.h"
#include "config.h"
#include "subsegs.h"
#include "safe-ctype.h"

#include <stdarg.h>

#include "opcode/mips.h"
#include "itbl-ops.h"
#include "dwarf2dbg.h"
#include "dw2gencfi.h"

#ifdef DEBUG
#define DBG(x) printf x
#else
#define DBG(x)
#endif

#ifdef OBJ_MAYBE_ELF
/* Clean up namespace so we can include obj-elf.h too.  */
static int mips_output_flavor (void);
static int mips_output_flavor (void) { return OUTPUT_FLAVOR; }
#undef OBJ_PROCESS_STAB
#undef OUTPUT_FLAVOR
#undef S_GET_ALIGN
#undef S_GET_SIZE
#undef S_SET_ALIGN
#undef S_SET_SIZE
#undef obj_frob_file
#undef obj_frob_file_after_relocs
#undef obj_frob_symbol
#undef obj_pop_insert
#undef obj_sec_sym_ok_for_reloc
#undef OBJ_COPY_SYMBOL_ATTRIBUTES

#include "obj-elf.h"
/* Fix any of them that we actually care about.  */
#undef OUTPUT_FLAVOR
#define OUTPUT_FLAVOR mips_output_flavor()
#endif

#if defined (OBJ_ELF)
#include "elf/mips.h"
#endif

#ifndef ECOFF_DEBUGGING
#define NO_ECOFF_DEBUGGING
#define ECOFF_DEBUGGING 0
#endif

int mips_flag_mdebug = -1;

/* Control generation of .pdr sections.  Off by default on IRIX: the native
   linker doesn't know about and discards them, but relocations against them
   remain, leading to rld crashes.  */
#ifdef TE_IRIX
int mips_flag_pdr = FALSE;
#else
int mips_flag_pdr = TRUE;
#endif

#include "ecoff.h"

#if defined (OBJ_ELF) || defined (OBJ_MAYBE_ELF)
static char *mips_regmask_frag;
#endif

#define ZERO 0
#define AT  1
#define TREG 24
#define PIC_CALL_REG 25
#define KT0 26
#define KT1 27
#define GP  28
#define SP  29
#define FP  30
#define RA  31

#define ILLEGAL_REG (32)

/* Allow override of standard little-endian ECOFF format.  */

#ifndef ECOFF_LITTLE_FORMAT
#define ECOFF_LITTLE_FORMAT "ecoff-littlemips"
#endif

extern int target_big_endian;

/* The name of the readonly data section.  */
#define RDATA_SECTION_NAME (OUTPUT_FLAVOR == bfd_target_aout_flavour \
			    ? ".data" \
			    : OUTPUT_FLAVOR == bfd_target_ecoff_flavour \
			    ? ".rdata" \
			    : OUTPUT_FLAVOR == bfd_target_coff_flavour \
			    ? ".rdata" \
			    : OUTPUT_FLAVOR == bfd_target_elf_flavour \
			    ? ".rodata" \
			    : (abort (), ""))

/* The ABI to use.  */
enum mips_abi_level
{
  NO_ABI = 0,
  O32_ABI,
  O64_ABI,
  N32_ABI,
  N64_ABI,
  EABI_ABI
};

/* MIPS ABI we are using for this output file.  */
static enum mips_abi_level mips_abi = NO_ABI;

/* Whether or not we have code that can call pic code.  */
int mips_abicalls = FALSE;

/* This is the set of options which may be modified by the .set
   pseudo-op.  We use a struct so that .set push and .set pop are more
   reliable.  */

struct mips_set_options
{
  /* MIPS ISA (Instruction Set Architecture) level.  This is set to -1
     if it has not been initialized.  Changed by `.set mipsN', and the
     -mipsN command line option, and the default CPU.  */
  int isa;
  /* Enabled Application Specific Extensions (ASEs).  These are set to -1
     if they have not been initialized.  Changed by `.set <asename>', by
     command line options, and based on the default architecture.  */
  int ase_mips3d;
  int ase_mdmx;
  /* Whether we are assembling for the mips16 processor.  0 if we are
     not, 1 if we are, and -1 if the value has not been initialized.
     Changed by `.set mips16' and `.set nomips16', and the -mips16 and
     -nomips16 command line options, and the default CPU.  */
  int mips16;
  /* Non-zero if we should not reorder instructions.  Changed by `.set
     reorder' and `.set noreorder'.  */
  int noreorder;
  /* Non-zero if we should not permit the $at ($1) register to be used
     in instructions.  Changed by `.set at' and `.set noat'.  */
  int noat;
  /* Non-zero if we should warn when a macro instruction expands into
     more than one machine instruction.  Changed by `.set nomacro' and
     `.set macro'.  */
  int warn_about_macros;
  /* Non-zero if we should not move instructions.  Changed by `.set
     move', `.set volatile', `.set nomove', and `.set novolatile'.  */
  int nomove;
  /* Non-zero if we should not optimize branches by moving the target
     of the branch into the delay slot.  Actually, we don't perform
     this optimization anyhow.  Changed by `.set bopt' and `.set
     nobopt'.  */
  int nobopt;
  /* Non-zero if we should not autoextend mips16 instructions.
     Changed by `.set autoextend' and `.set noautoextend'.  */
  int noautoextend;
  /* Restrict general purpose registers and floating point registers
     to 32 bit.  This is initially determined when -mgp32 or -mfp32
     is passed but can changed if the assembler code uses .set mipsN.  */
  int gp32;
  int fp32;
  /* MIPS architecture (CPU) type.  Changed by .set arch=FOO, the -march
     command line option, and the default CPU.  */
  int arch;
};

/* True if -mgp32 was passed.  */
static int file_mips_gp32 = -1;

/* True if -mfp32 was passed.  */
static int file_mips_fp32 = -1;

/* This is the struct we use to hold the current set of options.  Note
   that we must set the isa field to ISA_UNKNOWN and the ASE fields to
   -1 to indicate that they have not been initialized.  */

static struct mips_set_options mips_opts =
{
  ISA_UNKNOWN, -1, -1, -1, 0, 0, 0, 0, 0, 0, 0, 0, CPU_UNKNOWN
};

/* These variables are filled in with the masks of registers used.
   The object format code reads them and puts them in the appropriate
   place.  */
unsigned long mips_gprmask;
unsigned long mips_cprmask[4];

/* MIPS ISA we are using for this output file.  */
static int file_mips_isa = ISA_UNKNOWN;

/* True if -mips16 was passed or implied by arguments passed on the
   command line (e.g., by -march).  */
static int file_ase_mips16;

/* True if -mips3d was passed or implied by arguments passed on the
   command line (e.g., by -march).  */
static int file_ase_mips3d;

/* True if -mdmx was passed or implied by arguments passed on the
   command line (e.g., by -march).  */
static int file_ase_mdmx;

/* The argument of the -march= flag.  The architecture we are assembling.  */
static int file_mips_arch = CPU_UNKNOWN;
static const char *mips_arch_string;

/* The argument of the -mtune= flag.  The architecture for which we
   are optimizing.  */
static int mips_tune = CPU_UNKNOWN;
static const char *mips_tune_string;

/* True when generating 32-bit code for a 64-bit processor.  */
static int mips_32bitmode = 0;

/* True if the given ABI requires 32-bit registers.  */
#define ABI_NEEDS_32BIT_REGS(ABI) ((ABI) == O32_ABI)

/* Likewise 64-bit registers.  */
#define ABI_NEEDS_64BIT_REGS(ABI) \
  ((ABI) == N32_ABI 		  \
   || (ABI) == N64_ABI		  \
   || (ABI) == O64_ABI)

/*  Return true if ISA supports 64 bit gp register instructions.  */
#define ISA_HAS_64BIT_REGS(ISA) (    \
   (ISA) == ISA_MIPS3                \
   || (ISA) == ISA_MIPS4             \
   || (ISA) == ISA_MIPS5             \
   || (ISA) == ISA_MIPS64            \
   || (ISA) == ISA_MIPS64R2          \
   )

/* Return true if ISA supports 64 bit wide float registers.  */
#define ISA_HAS_64BIT_FPRS(ISA) (    \
   (ISA) == ISA_MIPS3                \
   || (ISA) == ISA_MIPS4             \
   || (ISA) == ISA_MIPS5             \
   || (ISA) == ISA_MIPS32R2          \
   || (ISA) == ISA_MIPS64            \
   || (ISA) == ISA_MIPS64R2)

/* Return true if ISA supports 64-bit right rotate (dror et al.)
   instructions.  */
#define ISA_HAS_DROR(ISA) (	\
   (ISA) == ISA_MIPS64R2	\
   )

/* Return true if ISA supports 32-bit right rotate (ror et al.)
   instructions.  */
#define ISA_HAS_ROR(ISA) (	\
   (ISA) == ISA_MIPS32R2	\
   || (ISA) == ISA_MIPS64R2	\
   )

/* Return true if ISA supports single-precision floats in odd registers.  */
#define ISA_HAS_ODD_SINGLE_FPR(ISA) (   \
   (ISA) == ISA_MIPS32                  \
   || (ISA) == ISA_MIPS32R2             \
   || (ISA) == ISA_MIPS64               \
   || (ISA) == ISA_MIPS64R2)

/* Return true if ISA supports move to/from high part of a 64-bit
   floating register.  */
#define ISA_HAS_MXHC1(ISA) (     \
   (ISA) == ISA_MIPS32R2         \
   || (ISA) == ISA_MIPS64R2)

#define HAVE_32BIT_GPRS		                   \
    (mips_opts.gp32 || ! ISA_HAS_64BIT_REGS (mips_opts.isa))

#define HAVE_32BIT_FPRS                            \
    (mips_opts.fp32 || ! ISA_HAS_64BIT_FPRS (mips_opts.isa))

#define HAVE_64BIT_GPRS (! HAVE_32BIT_GPRS)
#define HAVE_64BIT_FPRS (! HAVE_32BIT_FPRS)

#define HAVE_NEWABI (mips_abi == N32_ABI || mips_abi == N64_ABI)

#define HAVE_64BIT_OBJECTS (mips_abi == N64_ABI)

/* True if relocations are stored in-place.  */
#define HAVE_IN_PLACE_ADDENDS (!HAVE_NEWABI)

/* We can only have 64bit addresses if the object file format
   supports it.  */
#define HAVE_32BIT_ADDRESSES                           \
   (HAVE_32BIT_GPRS                                    \
    || ((bfd_arch_bits_per_address (stdoutput) == 32   \
         || ! HAVE_64BIT_OBJECTS)                      \
        && mips_pic != EMBEDDED_PIC))

#define HAVE_64BIT_ADDRESSES (! HAVE_32BIT_ADDRESSES)

/* The size of symbolic constants (i.e., expressions of the form
   "SYMBOL" or "SYMBOL + OFFSET").  */
#define HAVE_32BIT_SYMBOLS \
   (HAVE_32BIT_ADDRESSES || !HAVE_64BIT_OBJECTS || mips_opts.sym32)
#define HAVE_64BIT_SYMBOLS (!HAVE_32BIT_SYMBOLS)

/* Addresses are loaded in different ways, depending on the address size
   in use.  The n32 ABI Documentation also mandates the use of additions
   with overflow checking, but existing implementations don't follow it.  */
#define ADDRESS_ADD_INSN						\
   (HAVE_32BIT_ADDRESSES ? "addu" : "daddu")

#define ADDRESS_ADDI_INSN						\
   (HAVE_32BIT_ADDRESSES ? "addiu" : "daddiu")

#define ADDRESS_LOAD_INSN						\
   (HAVE_32BIT_ADDRESSES ? "lw" : "ld")

#define ADDRESS_STORE_INSN						\
   (HAVE_32BIT_ADDRESSES ? "sw" : "sd")

/* Return true if the given CPU supports the MIPS16 ASE.  */
#define CPU_HAS_MIPS16(cpu)						\
   (strncmp (TARGET_CPU, "mips16", sizeof ("mips16") - 1) == 0		\
    || strncmp (TARGET_CANONICAL, "mips-lsi-elf", sizeof ("mips-lsi-elf") - 1) == 0)

/* Return true if the given CPU supports the MIPS3D ASE.  */
#define CPU_HAS_MIPS3D(cpu)	((cpu) == CPU_SB1      \
				 )

/* Return true if the given CPU supports the MDMX ASE.  */
#define CPU_HAS_MDMX(cpu)	(FALSE                 \
				 )

/* True if CPU has a dror instruction.  */
#define CPU_HAS_DROR(CPU)	((CPU) == CPU_VR5400 || (CPU) == CPU_VR5500)

/* True if CPU has a ror instruction.  */
#define CPU_HAS_ROR(CPU)	CPU_HAS_DROR (CPU)

/* True if mflo and mfhi can be immediately followed by instructions
   which write to the HI and LO registers.

   According to MIPS specifications, MIPS ISAs I, II, and III need
   (at least) two instructions between the reads of HI/LO and
   instructions which write them, and later ISAs do not.  Contradicting
   the MIPS specifications, some MIPS IV processor user manuals (e.g.
   the UM for the NEC Vr5000) document needing the instructions between
   HI/LO reads and writes, as well.  Therefore, we declare only MIPS32,
   MIPS64 and later ISAs to have the interlocks, plus any specific
   earlier-ISA CPUs for which CPU documentation declares that the
   instructions are really interlocked.  */
#define hilo_interlocks \
  (mips_opts.isa == ISA_MIPS32                        \
   || mips_opts.isa == ISA_MIPS32R2                   \
   || mips_opts.isa == ISA_MIPS64                     \
   || mips_opts.isa == ISA_MIPS64R2                   \
   || mips_opts.arch == CPU_R4010                     \
   || mips_opts.arch == CPU_R10000                    \
   || mips_opts.arch == CPU_R12000                    \
   || mips_opts.arch == CPU_RM7000                    \
   || mips_opts.arch == CPU_SB1                       \
   || mips_opts.arch == CPU_VR5500                    \
   )

/* Whether the processor uses hardware interlocks to protect reads
   from the GPRs after they are loaded from memory, and thus does not
   require nops to be inserted.  This applies to instructions marked
   INSN_LOAD_MEMORY_DELAY.  These nops are only required at MIPS ISA
   level I.  */
#define gpr_interlocks \
  (mips_opts.isa != ISA_MIPS1  \
   || mips_opts.arch == CPU_VR5400  \
   || mips_opts.arch == CPU_VR5500  \
   || mips_opts.arch == CPU_R3900)

/* Whether the processor uses hardware interlocks to avoid delays
   required by coprocessor instructions, and thus does not require
   nops to be inserted.  This applies to instructions marked
   INSN_LOAD_COPROC_DELAY, INSN_COPROC_MOVE_DELAY, and to delays
   between instructions marked INSN_WRITE_COND_CODE and ones marked
   INSN_READ_COND_CODE.  These nops are only required at MIPS ISA
   levels I, II, and III.  */
/* Itbl support may require additional care here.  */
#define cop_interlocks                                \
  ((mips_opts.isa != ISA_MIPS1                        \
    && mips_opts.isa != ISA_MIPS2                     \
    && mips_opts.isa != ISA_MIPS3)                    \
   || mips_opts.arch == CPU_R4300                     \
   || mips_opts.arch == CPU_VR5400                    \
   || mips_opts.arch == CPU_VR5500                    \
   || mips_opts.arch == CPU_SB1                       \
   )

/* Whether the processor uses hardware interlocks to protect reads
   from coprocessor registers after they are loaded from memory, and
   thus does not require nops to be inserted.  This applies to
   instructions marked INSN_COPROC_MEMORY_DELAY.  These nops are only
   requires at MIPS ISA level I.  */
#define cop_mem_interlocks (mips_opts.isa != ISA_MIPS1)

/* Is this a mfhi or mflo instruction?  */
#define MF_HILO_INSN(PINFO) \
          ((PINFO & INSN_READ_HI) || (PINFO & INSN_READ_LO))

/* MIPS PIC level.  */

enum mips_pic_level mips_pic;

/* 1 if we should generate 32 bit offsets from the $gp register in
   SVR4_PIC mode.  Currently has no meaning in other modes.  */
static int mips_big_got = 0;

/* 1 if trap instructions should used for overflow rather than break
   instructions.  */
static int mips_trap = 0;

/* 1 if double width floating point constants should not be constructed
   by assembling two single width halves into two single width floating
   point registers which just happen to alias the double width destination
   register.  On some architectures this aliasing can be disabled by a bit
   in the status register, and the setting of this bit cannot be determined
   automatically at assemble time.  */
static int mips_disable_float_construction;

/* Non-zero if any .set noreorder directives were used.  */

static int mips_any_noreorder;

/* Non-zero if nops should be inserted when the register referenced in
   an mfhi/mflo instruction is read in the next two instructions.  */
static int mips_7000_hilo_fix;

/* The size of the small data section.  */
static unsigned int g_switch_value = 8;
/* Whether the -G option was used.  */
static int g_switch_seen = 0;

#define N_RMASK 0xc4
#define N_VFP   0xd4

/* If we can determine in advance that GP optimization won't be
   possible, we can skip the relaxation stuff that tries to produce
   GP-relative references.  This makes delay slot optimization work
   better.

   This function can only provide a guess, but it seems to work for
   gcc output.  It needs to guess right for gcc, otherwise gcc
   will put what it thinks is a GP-relative instruction in a branch
   delay slot.

   I don't know if a fix is needed for the SVR4_PIC mode.  I've only
   fixed it for the non-PIC mode.  KR 95/04/07  */
static int nopic_need_relax (symbolS *, int);

/* handle of the OPCODE hash table */
static struct hash_control *op_hash = NULL;

/* The opcode hash table we use for the mips16.  */
static struct hash_control *mips16_op_hash = NULL;

/* This array holds the chars that always start a comment.  If the
    pre-processor is disabled, these aren't very useful */
const char comment_chars[] = "#";

/* This array holds the chars that only start a comment at the beginning of
   a line.  If the line seems to have the form '# 123 filename'
   .line and .file directives will appear in the pre-processed output */
/* Note that input_file.c hand checks for '#' at the beginning of the
   first line of the input file.  This is because the compiler outputs
   #NO_APP at the beginning of its output.  */
/* Also note that C style comments are always supported.  */
const char line_comment_chars[] = "#";

/* This array holds machine specific line separator characters.  */
const char line_separator_chars[] = ";";

/* Chars that can be used to separate mant from exp in floating point nums */
const char EXP_CHARS[] = "eE";

/* Chars that mean this number is a floating point constant */
/* As in 0f12.456 */
/* or    0d1.2345e12 */
const char FLT_CHARS[] = "rRsSfFdDxXpP";

/* Also be aware that MAXIMUM_NUMBER_OF_CHARS_FOR_FLOAT may have to be
   changed in read.c .  Ideally it shouldn't have to know about it at all,
   but nothing is ideal around here.
 */

static char *insn_error;

static int auto_align = 1;

/* When outputting SVR4 PIC code, the assembler needs to know the
   offset in the stack frame from which to restore the $gp register.
   This is set by the .cprestore pseudo-op, and saved in this
   variable.  */
static offsetT mips_cprestore_offset = -1;

/* Similar for NewABI PIC code, where $gp is callee-saved.  NewABI has some
   more optimizations, it can use a register value instead of a memory-saved
   offset and even an other register than $gp as global pointer.  */
static offsetT mips_cpreturn_offset = -1;
static int mips_cpreturn_register = -1;
static int mips_gp_register = GP;
static int mips_gprel_offset = 0;

/* Whether mips_cprestore_offset has been set in the current function
   (or whether it has already been warned about, if not).  */
static int mips_cprestore_valid = 0;

/* This is the register which holds the stack frame, as set by the
   .frame pseudo-op.  This is needed to implement .cprestore.  */
static int mips_frame_reg = SP;

/* Whether mips_frame_reg has been set in the current function
   (or whether it has already been warned about, if not).  */
static int mips_frame_reg_valid = 0;

/* To output NOP instructions correctly, we need to keep information
   about the previous two instructions.  */

/* Whether we are optimizing.  The default value of 2 means to remove
   unneeded NOPs and swap branch instructions when possible.  A value
   of 1 means to not swap branches.  A value of 0 means to always
   insert NOPs.  */
static int mips_optimize = 2;

/* Debugging level.  -g sets this to 2.  -gN sets this to N.  -g0 is
   equivalent to seeing no -g option at all.  */
static int mips_debug = 0;

/* The previous instruction.  */
static struct mips_cl_insn prev_insn;

/* The instruction before prev_insn.  */
static struct mips_cl_insn prev_prev_insn;

/* If we don't want information for prev_insn or prev_prev_insn, we
   point the insn_mo field at this dummy integer.  */
static const struct mips_opcode dummy_opcode = { NULL, NULL, 0, 0, 0, 0 };

/* Non-zero if prev_insn is valid.  */
static int prev_insn_valid;

/* The frag for the previous instruction.  */
static struct frag *prev_insn_frag;

/* The offset into prev_insn_frag for the previous instruction.  */
static long prev_insn_where;

/* The reloc type for the previous instruction, if any.  */
static bfd_reloc_code_real_type prev_insn_reloc_type[3];

/* The reloc for the previous instruction, if any.  */
static fixS *prev_insn_fixp[3];

/* Non-zero if the previous instruction was in a delay slot.  */
static int prev_insn_is_delay_slot;

/* Non-zero if the previous instruction was in a .set noreorder.  */
static int prev_insn_unreordered;

/* Non-zero if the previous instruction uses an extend opcode (if
   mips16).  */
static int prev_insn_extended;

/* Non-zero if the previous previous instruction was in a .set
   noreorder.  */
static int prev_prev_insn_unreordered;

/* If this is set, it points to a frag holding nop instructions which
   were inserted before the start of a noreorder section.  If those
   nops turn out to be unnecessary, the size of the frag can be
   decreased.  */
static fragS *prev_nop_frag;

/* The number of nop instructions we created in prev_nop_frag.  */
static int prev_nop_frag_holds;

/* The number of nop instructions that we know we need in
   prev_nop_frag.  */
static int prev_nop_frag_required;

/* The number of instructions we've seen since prev_nop_frag.  */
static int prev_nop_frag_since;

/* For ECOFF and ELF, relocations against symbols are done in two
   parts, with a HI relocation and a LO relocation.  Each relocation
   has only 16 bits of space to store an addend.  This means that in
   order for the linker to handle carries correctly, it must be able
   to locate both the HI and the LO relocation.  This means that the
   relocations must appear in order in the relocation table.

   In order to implement this, we keep track of each unmatched HI
   relocation.  We then sort them so that they immediately precede the
   corresponding LO relocation.  */

struct mips_hi_fixup
{
  /* Next HI fixup.  */
  struct mips_hi_fixup *next;
  /* This fixup.  */
  fixS *fixp;
  /* The section this fixup is in.  */
  segT seg;
};

/* The list of unmatched HI relocs.  */

static struct mips_hi_fixup *mips_hi_fixup_list;

/* The frag containing the last explicit relocation operator.
   Null if explicit relocations have not been used.  */

static fragS *prev_reloc_op_frag;

/* Map normal MIPS register numbers to mips16 register numbers.  */

#define X ILLEGAL_REG
static const int mips32_to_16_reg_map[] =
{
  X, X, 2, 3, 4, 5, 6, 7,
  X, X, X, X, X, X, X, X,
  0, 1, X, X, X, X, X, X,
  X, X, X, X, X, X, X, X
};
#undef X

/* Map mips16 register numbers to normal MIPS register numbers.  */

static const unsigned int mips16_to_32_reg_map[] =
{
  16, 17, 2, 3, 4, 5, 6, 7
};

static int mips_fix_vr4120;

/* We don't relax branches by default, since this causes us to expand
   `la .l2 - .l1' if there's a branch between .l1 and .l2, because we
   fail to compute the offset before expanding the macro to the most
   efficient expansion.  */

static int mips_relax_branch;

static int mips_fix_loongson2f_btb;

/* The expansion of many macros depends on the type of symbol that
   they refer to.  For example, when generating position-dependent code,
   a macro that refers to a symbol may have two different expansions,
   one which uses GP-relative addresses and one which uses absolute
   addresses.  When generating SVR4-style PIC, a macro may have
   different expansions for local and global symbols.

   We handle these situations by generating both sequences and putting
   them in variant frags.  In position-dependent code, the first sequence
   will be the GP-relative one and the second sequence will be the
   absolute one.  In SVR4 PIC, the first sequence will be for global
   symbols and the second will be for local symbols.

   The frag's "subtype" is RELAX_ENCODE (FIRST, SECOND), where FIRST and
   SECOND are the lengths of the two sequences in bytes.  These fields
   can be extracted using RELAX_FIRST() and RELAX_SECOND().  In addition,
   the subtype has the following flags:

   RELAX_USE_SECOND
	Set if it has been decided that we should use the second
	sequence instead of the first.

   RELAX_SECOND_LONGER
	Set in the first variant frag if the macro's second implementation
	is longer than its first.  This refers to the macro as a whole,
	not an individual relaxation.

   RELAX_NOMACRO
	Set in the first variant frag if the macro appeared in a .set nomacro
	block and if one alternative requires a warning but the other does not.

   RELAX_DELAY_SLOT
	Like RELAX_NOMACRO, but indicates that the macro appears in a branch
	delay slot.

   The frag's "opcode" points to the first fixup for relaxable code.

   Relaxable macros are generated using a sequence such as:

      relax_start (SYMBOL);
      ... generate first expansion ...
      relax_switch ();
      ... generate second expansion ...
      relax_end ();

   The code and fixups for the unwanted alternative are discarded
   by md_convert_frag.  */
#define RELAX_ENCODE(FIRST, SECOND) (((FIRST) << 8) | (SECOND))

#define RELAX_FIRST(X) (((X) >> 8) & 0xff)
#define RELAX_SECOND(X) ((X) & 0xff)
#define RELAX_USE_SECOND 0x10000
#define RELAX_SECOND_LONGER 0x20000
#define RELAX_NOMACRO 0x40000
#define RELAX_DELAY_SLOT 0x80000

/* Branch without likely bit.  If label is out of range, we turn:

 	beq reg1, reg2, label
	delay slot

   into

        bne reg1, reg2, 0f
        nop
        j label
     0: delay slot

   with the following opcode replacements:

	beq <-> bne
	blez <-> bgtz
	bltz <-> bgez
	bc1f <-> bc1t

	bltzal <-> bgezal  (with jal label instead of j label)

   Even though keeping the delay slot instruction in the delay slot of
   the branch would be more efficient, it would be very tricky to do
   correctly, because we'd have to introduce a variable frag *after*
   the delay slot instruction, and expand that instead.  Let's do it
   the easy way for now, even if the branch-not-taken case now costs
   one additional instruction.  Out-of-range branches are not supposed
   to be common, anyway.

   Branch likely.  If label is out of range, we turn:

	beql reg1, reg2, label
	delay slot (annulled if branch not taken)

   into

        beql reg1, reg2, 1f
        nop
        beql $0, $0, 2f
        nop
     1: j[al] label
        delay slot (executed only if branch taken)
     2:

   It would be possible to generate a shorter sequence by losing the
   likely bit, generating something like:

	bne reg1, reg2, 0f
	nop
	j[al] label
	delay slot (executed only if branch taken)
     0:

	beql -> bne
	bnel -> beq
	blezl -> bgtz
	bgtzl -> blez
	bltzl -> bgez
	bgezl -> bltz
	bc1fl -> bc1t
	bc1tl -> bc1f

	bltzall -> bgezal  (with jal label instead of j label)
	bgezall -> bltzal  (ditto)


   but it's not clear that it would actually improve performance.  */
#define RELAX_BRANCH_ENCODE(uncond, likely, link, toofar) \
  ((relax_substateT) \
   (0xc0000000 \
    | ((toofar) ? 1 : 0) \
    | ((link) ? 2 : 0) \
    | ((likely) ? 4 : 0) \
    | ((uncond) ? 8 : 0)))
#define RELAX_BRANCH_P(i) (((i) & 0xf0000000) == 0xc0000000)
#define RELAX_BRANCH_UNCOND(i) (((i) & 8) != 0)
#define RELAX_BRANCH_LIKELY(i) (((i) & 4) != 0)
#define RELAX_BRANCH_LINK(i) (((i) & 2) != 0)
#define RELAX_BRANCH_TOOFAR(i) (((i) & 1) != 0)

/* For mips16 code, we use an entirely different form of relaxation.
   mips16 supports two versions of most instructions which take
   immediate values: a small one which takes some small value, and a
   larger one which takes a 16 bit value.  Since branches also follow
   this pattern, relaxing these values is required.

   We can assemble both mips16 and normal MIPS code in a single
   object.  Therefore, we need to support this type of relaxation at
   the same time that we support the relaxation described above.  We
   use the high bit of the subtype field to distinguish these cases.

   The information we store for this type of relaxation is the
   argument code found in the opcode file for this relocation, whether
   the user explicitly requested a small or extended form, and whether
   the relocation is in a jump or jal delay slot.  That tells us the
   size of the value, and how it should be stored.  We also store
   whether the fragment is considered to be extended or not.  We also
   store whether this is known to be a branch to a different section,
   whether we have tried to relax this frag yet, and whether we have
   ever extended a PC relative fragment because of a shift count.  */
#define RELAX_MIPS16_ENCODE(type, small, ext, dslot, jal_dslot)	\
  (0x80000000							\
   | ((type) & 0xff)						\
   | ((small) ? 0x100 : 0)					\
   | ((ext) ? 0x200 : 0)					\
   | ((dslot) ? 0x400 : 0)					\
   | ((jal_dslot) ? 0x800 : 0))
#define RELAX_MIPS16_P(i) (((i) & 0xc0000000) == 0x80000000)
#define RELAX_MIPS16_TYPE(i) ((i) & 0xff)
#define RELAX_MIPS16_USER_SMALL(i) (((i) & 0x100) != 0)
#define RELAX_MIPS16_USER_EXT(i) (((i) & 0x200) != 0)
#define RELAX_MIPS16_DSLOT(i) (((i) & 0x400) != 0)
#define RELAX_MIPS16_JAL_DSLOT(i) (((i) & 0x800) != 0)
#define RELAX_MIPS16_EXTENDED(i) (((i) & 0x1000) != 0)
#define RELAX_MIPS16_MARK_EXTENDED(i) ((i) | 0x1000)
#define RELAX_MIPS16_CLEAR_EXTENDED(i) ((i) &~ 0x1000)
#define RELAX_MIPS16_LONG_BRANCH(i) (((i) & 0x2000) != 0)
#define RELAX_MIPS16_MARK_LONG_BRANCH(i) ((i) | 0x2000)
#define RELAX_MIPS16_CLEAR_LONG_BRANCH(i) ((i) &~ 0x2000)

/* Is the given value a sign-extended 32-bit value?  */
#define IS_SEXT_32BIT_NUM(x)						\
  (((x) &~ (offsetT) 0x7fffffff) == 0					\
   || (((x) &~ (offsetT) 0x7fffffff) == ~ (offsetT) 0x7fffffff))

/* Is the given value a sign-extended 16-bit value?  */
#define IS_SEXT_16BIT_NUM(x)						\
  (((x) &~ (offsetT) 0x7fff) == 0					\
   || (((x) &~ (offsetT) 0x7fff) == ~ (offsetT) 0x7fff))


/* Global variables used when generating relaxable macros.  See the
   comment above RELAX_ENCODE for more details about how relaxation
   is used.  */
static struct {
  /* 0 if we're not emitting a relaxable macro.
     1 if we're emitting the first of the two relaxation alternatives.
     2 if we're emitting the second alternative.  */
  int sequence;

  /* The first relaxable fixup in the current frag.  (In other words,
     the first fixup that refers to relaxable code.)  */
  fixS *first_fixup;

  /* sizes[0] says how many bytes of the first alternative are stored in
     the current frag.  Likewise sizes[1] for the second alternative.  */
  unsigned int sizes[2];

  /* The symbol on which the choice of sequence depends.  */
  symbolS *symbol;
} mips_relax;

/* Global variables used to decide whether a macro needs a warning.  */
static struct {
  /* True if the macro is in a branch delay slot.  */
  bfd_boolean delay_slot_p;

  /* For relaxable macros, sizes[0] is the length of the first alternative
     in bytes and sizes[1] is the length of the second alternative.
     For non-relaxable macros, both elements give the length of the
     macro in bytes.  */
  unsigned int sizes[2];

  /* The first variant frag for this macro.  */
  fragS *first_frag;
} mips_macro_warning;

/* Prototypes for static functions.  */

#define internalError()							\
    as_fatal (_("internal Error, line %d, %s"), __LINE__, __FILE__)

enum mips_regclass { MIPS_GR_REG, MIPS_FP_REG, MIPS16_REG };

static void append_insn
  (struct mips_cl_insn *ip, expressionS *p, bfd_reloc_code_real_type *r);
static void mips_no_prev_insn (int);
static void mips16_macro_build
  (expressionS *, const char *, const char *, va_list);
static void load_register (int, expressionS *, int);
static void macro_build (expressionS *, const char *, const char *, ...);
static void macro_start (void);
static void macro_end (void);
static void macro (struct mips_cl_insn * ip);
static void mips16_macro (struct mips_cl_insn * ip);
#ifdef LOSING_COMPILER
static void macro2 (struct mips_cl_insn * ip);
#endif
static void mips_ip (char *str, struct mips_cl_insn * ip);
static void mips16_ip (char *str, struct mips_cl_insn * ip);
static void mips16_immed
  (char *, unsigned int, int, offsetT, bfd_boolean, bfd_boolean, bfd_boolean,
   unsigned long *, bfd_boolean *, unsigned short *);
static size_t my_getSmallExpression
  (expressionS *, bfd_reloc_code_real_type *, char *);
static void my_getExpression (expressionS *, char *);
static void s_align (int);
static void s_change_sec (int);
static void s_change_section (int);
static void s_cons (int);
static void s_float_cons (int);
static void s_mips_globl (int);
static void s_option (int);
static void s_mipsset (int);
static void s_abicalls (int);
static void s_cpload (int);
static void s_cpsetup (int);
static void s_cplocal (int);
static void s_cprestore (int);
static void s_cpreturn (int);
static void s_gpvalue (int);
static void s_gpword (int);
static void s_gpdword (int);
static void s_cpadd (int);
static void s_insn (int);
static void md_obj_begin (void);
static void md_obj_end (void);
static void s_mips_ent (int);
static void s_mips_end (int);
static void s_mips_frame (int);
static void s_mips_mask (int reg_type);
static void s_mips_stab (int);
static void s_mips_weakext (int);
static void s_mips_file (int);
static void s_mips_loc (int);
static bfd_boolean pic_need_relax (symbolS *, asection *);
static int relaxed_branch_length (fragS *, asection *, int);
static int validate_mips_insn (const struct mips_opcode *);

/* Table and functions used to map between CPU/ISA names, and
   ISA levels, and CPU numbers.  */

struct mips_cpu_info
{
  const char *name;           /* CPU or ISA name.  */
  int flags;                  /* ASEs available, or ISA flag.  */
  int isa;                    /* ISA level.  */
  int cpu;                    /* CPU number (default CPU if ISA).  */
};

#define MIPS_CPU_IS_ISA		0x0001	/* Is this an ISA?  (If 0, a CPU.) */
#define MIPS_CPU_ASE_SMARTMIPS	0x0002	/* CPU implements SmartMIPS ASE */
#define MIPS_CPU_ASE_DSP	0x0004	/* CPU implements DSP ASE */
#define MIPS_CPU_ASE_MT		0x0008	/* CPU implements MT ASE */
#define MIPS_CPU_ASE_MIPS3D	0x0010	/* CPU implements MIPS-3D ASE */
#define MIPS_CPU_ASE_MDMX	0x0020	/* CPU implements MDMX ASE */

static const struct mips_cpu_info *mips_parse_cpu (const char *, const char *);
static const struct mips_cpu_info *mips_cpu_info_from_isa (int);
static const struct mips_cpu_info *mips_cpu_info_from_arch (int);

/* Pseudo-op table.

   The following pseudo-ops from the Kane and Heinrich MIPS book
   should be defined here, but are currently unsupported: .alias,
   .galive, .gjaldef, .gjrlive, .livereg, .noalias.

   The following pseudo-ops from the Kane and Heinrich MIPS book are
   specific to the type of debugging information being generated, and
   should be defined by the object format: .aent, .begin, .bend,
   .bgnb, .end, .endb, .ent, .fmask, .frame, .loc, .mask, .verstamp,
   .vreg.

   The following pseudo-ops from the Kane and Heinrich MIPS book are
   not MIPS CPU specific, but are also not specific to the object file
   format.  This file is probably the best place to define them, but
   they are not currently supported: .asm0, .endr, .lab, .repeat,
   .struct.  */

static const pseudo_typeS mips_pseudo_table[] =
{
  /* MIPS specific pseudo-ops.  */
  {"option", s_option, 0},
  {"set", s_mipsset, 0},
  {"rdata", s_change_sec, 'r'},
  {"sdata", s_change_sec, 's'},
  {"livereg", s_ignore, 0},
  {"abicalls", s_abicalls, 0},
  {"cpload", s_cpload, 0},
  {"cpsetup", s_cpsetup, 0},
  {"cplocal", s_cplocal, 0},
  {"cprestore", s_cprestore, 0},
  {"cpreturn", s_cpreturn, 0},
  {"gpvalue", s_gpvalue, 0},
  {"gpword", s_gpword, 0},
  {"gpdword", s_gpdword, 0},
  {"cpadd", s_cpadd, 0},
  {"insn", s_insn, 0},

  /* Relatively generic pseudo-ops that happen to be used on MIPS
     chips.  */
  {"asciiz", stringer, 1},
  {"bss", s_change_sec, 'b'},
  {"err", s_err, 0},
  {"half", s_cons, 1},
  {"dword", s_cons, 3},
  {"weakext", s_mips_weakext, 0},

  /* These pseudo-ops are defined in read.c, but must be overridden
     here for one reason or another.  */
  {"align", s_align, 0},
  {"byte", s_cons, 0},
  {"data", s_change_sec, 'd'},
  {"double", s_float_cons, 'd'},
  {"float", s_float_cons, 'f'},
  {"globl", s_mips_globl, 0},
  {"global", s_mips_globl, 0},
  {"hword", s_cons, 1},
  {"int", s_cons, 2},
  {"long", s_cons, 2},
  {"octa", s_cons, 4},
  {"quad", s_cons, 3},
  {"section", s_change_section, 0},
  {"short", s_cons, 1},
  {"single", s_float_cons, 'f'},
  {"stabn", s_mips_stab, 'n'},
  {"text", s_change_sec, 't'},
  {"word", s_cons, 2},

  { "extern", ecoff_directive_extern, 0},

  { NULL, NULL, 0 },
};

static const pseudo_typeS mips_nonecoff_pseudo_table[] =
{
  /* These pseudo-ops should be defined by the object file format.
     However, a.out doesn't support them, so we have versions here.  */
  {"aent", s_mips_ent, 1},
  {"bgnb", s_ignore, 0},
  {"end", s_mips_end, 0},
  {"endb", s_ignore, 0},
  {"ent", s_mips_ent, 0},
  {"file", s_mips_file, 0},
  {"fmask", s_mips_mask, 'F'},
  {"frame", s_mips_frame, 0},
  {"loc", s_mips_loc, 0},
  {"mask", s_mips_mask, 'R'},
  {"verstamp", s_ignore, 0},
  { NULL, NULL, 0 },
};

extern void pop_insert (const pseudo_typeS *);

void
mips_pop_insert (void)
{
  pop_insert (mips_pseudo_table);
  if (! ECOFF_DEBUGGING)
    pop_insert (mips_nonecoff_pseudo_table);
}

/* Symbols labelling the current insn.  */

struct insn_label_list
{
  struct insn_label_list *next;
  symbolS *label;
};

static struct insn_label_list *insn_labels;
static struct insn_label_list *free_insn_labels;

static void mips_clear_insn_labels (void);

static inline void
mips_clear_insn_labels (void)
{
  register struct insn_label_list **pl;

  for (pl = &free_insn_labels; *pl != NULL; pl = &(*pl)->next)
    ;
  *pl = insn_labels;
  insn_labels = NULL;
}

static char *expr_end;

/* Expressions which appear in instructions.  These are set by
   mips_ip.  */

static expressionS imm_expr;
static expressionS imm2_expr;
static expressionS offset_expr;

/* Relocs associated with imm_expr and offset_expr.  */

static bfd_reloc_code_real_type imm_reloc[3]
  = {BFD_RELOC_UNUSED, BFD_RELOC_UNUSED, BFD_RELOC_UNUSED};
static bfd_reloc_code_real_type offset_reloc[3]
  = {BFD_RELOC_UNUSED, BFD_RELOC_UNUSED, BFD_RELOC_UNUSED};

/* These are set by mips16_ip if an explicit extension is used.  */

static bfd_boolean mips16_small, mips16_ext;

#ifdef OBJ_ELF
/* The pdr segment for per procedure frame/regmask info.  Not used for
   ECOFF debugging.  */

static segT pdr_seg;
#endif

/* The default target format to use.  */

const char *
mips_target_format (void)
{
  switch (OUTPUT_FLAVOR)
    {
    case bfd_target_aout_flavour:
      return target_big_endian ? "a.out-mips-big" : "a.out-mips-little";
    case bfd_target_ecoff_flavour:
      return target_big_endian ? "ecoff-bigmips" : ECOFF_LITTLE_FORMAT;
    case bfd_target_coff_flavour:
      return "pe-mips";
    case bfd_target_elf_flavour:
#ifdef TE_TMIPS
      /* This is traditional mips.  */
      return (target_big_endian
	      ? (HAVE_64BIT_OBJECTS
		 ? "elf64-tradbigmips"
		 : (HAVE_NEWABI
		    ? "elf32-ntradbigmips" : "elf32-tradbigmips"))
	      : (HAVE_64BIT_OBJECTS
		 ? "elf64-tradlittlemips"
		 : (HAVE_NEWABI
		    ? "elf32-ntradlittlemips" : "elf32-tradlittlemips")));
#else
      return (target_big_endian
	      ? (HAVE_64BIT_OBJECTS
		 ? "elf64-bigmips"
		 : (HAVE_NEWABI
		    ? "elf32-nbigmips" : "elf32-bigmips"))
	      : (HAVE_64BIT_OBJECTS
		 ? "elf64-littlemips"
		 : (HAVE_NEWABI
		    ? "elf32-nlittlemips" : "elf32-littlemips")));
#endif
    default:
      abort ();
      return NULL;
    }
}

/* Defining all the symbolic register names.  */
struct regname {
  const char *name;
  unsigned int num;
};

#define RTYPE_MASK	0x1ff00
#define RTYPE_NUM	0x00100
#define RTYPE_FPU	0x00200
#define RTYPE_FCC	0x00400
#define RTYPE_VEC	0x00800
#define RTYPE_GP	0x01000
#define RTYPE_CP0	0x02000
#define RTYPE_PC	0x04000
#define RTYPE_ACC	0x08000
#define RTYPE_CCC	0x10000
#define RNUM_MASK	0x000ff
#define RWARN		0x80000

#define GENERIC_REGISTER_NUMBERS \
    {"$0",     RTYPE_NUM | 0},  \
    {"$1",     RTYPE_NUM | 1},  \
    {"$2",     RTYPE_NUM | 2},  \
    {"$3",     RTYPE_NUM | 3},  \
    {"$4",     RTYPE_NUM | 4},  \
    {"$5",     RTYPE_NUM | 5},  \
    {"$6",     RTYPE_NUM | 6},  \
    {"$7",     RTYPE_NUM | 7},  \
    {"$8",     RTYPE_NUM | 8},  \
    {"$9",     RTYPE_NUM | 9},  \
    {"$10",    RTYPE_NUM | 10}, \
    {"$11",    RTYPE_NUM | 11}, \
    {"$12",    RTYPE_NUM | 12}, \
    {"$13",    RTYPE_NUM | 13}, \
    {"$14",    RTYPE_NUM | 14}, \
    {"$15",    RTYPE_NUM | 15}, \
    {"$16",    RTYPE_NUM | 16}, \
    {"$17",    RTYPE_NUM | 17}, \
    {"$18",    RTYPE_NUM | 18}, \
    {"$19",    RTYPE_NUM | 19}, \
    {"$20",    RTYPE_NUM | 20}, \
    {"$21",    RTYPE_NUM | 21}, \
    {"$22",    RTYPE_NUM | 22}, \
    {"$23",    RTYPE_NUM | 23}, \
    {"$24",    RTYPE_NUM | 24}, \
    {"$25",    RTYPE_NUM | 25}, \
    {"$26",    RTYPE_NUM | 26}, \
    {"$27",    RTYPE_NUM | 27}, \
    {"$28",    RTYPE_NUM | 28}, \
    {"$29",    RTYPE_NUM | 29}, \
    {"$30",    RTYPE_NUM | 30}, \
    {"$31",    RTYPE_NUM | 31} 

#define FPU_REGISTER_NAMES      \
    {"$f0",    RTYPE_FPU | 0},  \
    {"$f1",    RTYPE_FPU | 1},  \
    {"$f2",    RTYPE_FPU | 2},  \
    {"$f3",    RTYPE_FPU | 3},  \
    {"$f4",    RTYPE_FPU | 4},  \
    {"$f5",    RTYPE_FPU | 5},  \
    {"$f6",    RTYPE_FPU | 6},  \
    {"$f7",    RTYPE_FPU | 7},  \
    {"$f8",    RTYPE_FPU | 8},  \
    {"$f9",    RTYPE_FPU | 9},  \
    {"$f10",   RTYPE_FPU | 10}, \
    {"$f11",   RTYPE_FPU | 11}, \
    {"$f12",   RTYPE_FPU | 12}, \
    {"$f13",   RTYPE_FPU | 13}, \
    {"$f14",   RTYPE_FPU | 14}, \
    {"$f15",   RTYPE_FPU | 15}, \
    {"$f16",   RTYPE_FPU | 16}, \
    {"$f17",   RTYPE_FPU | 17}, \
    {"$f18",   RTYPE_FPU | 18}, \
    {"$f19",   RTYPE_FPU | 19}, \
    {"$f20",   RTYPE_FPU | 20}, \
    {"$f21",   RTYPE_FPU | 21}, \
    {"$f22",   RTYPE_FPU | 22}, \
    {"$f23",   RTYPE_FPU | 23}, \
    {"$f24",   RTYPE_FPU | 24}, \
    {"$f25",   RTYPE_FPU | 25}, \
    {"$f26",   RTYPE_FPU | 26}, \
    {"$f27",   RTYPE_FPU | 27}, \
    {"$f28",   RTYPE_FPU | 28}, \
    {"$f29",   RTYPE_FPU | 29}, \
    {"$f30",   RTYPE_FPU | 30}, \
    {"$f31",   RTYPE_FPU | 31}

#define FPU_CONDITION_CODE_NAMES \
    {"$fcc0",  RTYPE_FCC | 0},  \
    {"$fcc1",  RTYPE_FCC | 1},  \
    {"$fcc2",  RTYPE_FCC | 2},  \
    {"$fcc3",  RTYPE_FCC | 3},  \
    {"$fcc4",  RTYPE_FCC | 4},  \
    {"$fcc5",  RTYPE_FCC | 5},  \
    {"$fcc6",  RTYPE_FCC | 6},  \
    {"$fcc7",  RTYPE_FCC | 7}

#define COPROC_CONDITION_CODE_NAMES        \
    {"$cc0",   RTYPE_FCC | RTYPE_CCC | 0}, \
    {"$cc1",   RTYPE_FCC | RTYPE_CCC | 1}, \
    {"$cc2",   RTYPE_FCC | RTYPE_CCC | 2}, \
    {"$cc3",   RTYPE_FCC | RTYPE_CCC | 3}, \
    {"$cc4",   RTYPE_FCC | RTYPE_CCC | 4}, \
    {"$cc5",   RTYPE_FCC | RTYPE_CCC | 5}, \
    {"$cc6",   RTYPE_FCC | RTYPE_CCC | 6}, \
    {"$cc7",   RTYPE_FCC | RTYPE_CCC | 7}

#define N32N64_SYMBOLIC_REGISTER_NAMES \
    {"$a4",    RTYPE_GP | 8},  \
    {"$a5",    RTYPE_GP | 9},  \
    {"$a6",    RTYPE_GP | 10}, \
    {"$a7",    RTYPE_GP | 11}, \
    {"$ta0",   RTYPE_GP | 8},  /* alias for $a4 */ \
    {"$ta1",   RTYPE_GP | 9},  /* alias for $a5 */ \
    {"$ta2",   RTYPE_GP | 10}, /* alias for $a6 */ \
    {"$ta3",   RTYPE_GP | 11}, /* alias for $a7 */ \
    {"$t0",    RTYPE_GP | 12}, \
    {"$t1",    RTYPE_GP | 13}, \
    {"$t2",    RTYPE_GP | 14}, \
    {"$t3",    RTYPE_GP | 15}

#define O32_SYMBOLIC_REGISTER_NAMES \
    {"$t0",    RTYPE_GP | 8},  \
    {"$t1",    RTYPE_GP | 9},  \
    {"$t2",    RTYPE_GP | 10}, \
    {"$t3",    RTYPE_GP | 11}, \
    {"$t4",    RTYPE_GP | 12}, \
    {"$t5",    RTYPE_GP | 13}, \
    {"$t6",    RTYPE_GP | 14}, \
    {"$t7",    RTYPE_GP | 15}, \
    {"$ta0",   RTYPE_GP | 12}, /* alias for $t4 */ \
    {"$ta1",   RTYPE_GP | 13}, /* alias for $t5 */ \
    {"$ta2",   RTYPE_GP | 14}, /* alias for $t6 */ \
    {"$ta3",   RTYPE_GP | 15}  /* alias for $t7 */ 

/* Remaining symbolic register names */
#define SYMBOLIC_REGISTER_NAMES \
    {"$zero",  RTYPE_GP | 0},  \
    {"$at",    RTYPE_GP | 1},  \
    {"$AT",    RTYPE_GP | 1},  \
    {"$v0",    RTYPE_GP | 2},  \
    {"$v1",    RTYPE_GP | 3},  \
    {"$a0",    RTYPE_GP | 4},  \
    {"$a1",    RTYPE_GP | 5},  \
    {"$a2",    RTYPE_GP | 6},  \
    {"$a3",    RTYPE_GP | 7},  \
    {"$s0",    RTYPE_GP | 16}, \
    {"$s1",    RTYPE_GP | 17}, \
    {"$s2",    RTYPE_GP | 18}, \
    {"$s3",    RTYPE_GP | 19}, \
    {"$s4",    RTYPE_GP | 20}, \
    {"$s5",    RTYPE_GP | 21}, \
    {"$s6",    RTYPE_GP | 22}, \
    {"$s7",    RTYPE_GP | 23}, \
    {"$t8",    RTYPE_GP | 24}, \
    {"$t9",    RTYPE_GP | 25}, \
    {"$k0",    RTYPE_GP | 26}, \
    {"$kt0",   RTYPE_GP | 26}, \
    {"$k1",    RTYPE_GP | 27}, \
    {"$kt1",   RTYPE_GP | 27}, \
    {"$gp",    RTYPE_GP | 28}, \
    {"$sp",    RTYPE_GP | 29}, \
    {"$s8",    RTYPE_GP | 30}, \
    {"$fp",    RTYPE_GP | 30}, \
    {"$ra",    RTYPE_GP | 31}

#define MIPS16_SPECIAL_REGISTER_NAMES \
    {"$pc",    RTYPE_PC | 0}

#define MDMX_VECTOR_REGISTER_NAMES \
    /* {"$v0", RTYPE_VEC | 0},  clash with REG 2 above */ \
    /* {"$v1", RTYPE_VEC | 1},  clash with REG 3 above */ \
    {"$v2",    RTYPE_VEC | 2},  \
    {"$v3",    RTYPE_VEC | 3},  \
    {"$v4",    RTYPE_VEC | 4},  \
    {"$v5",    RTYPE_VEC | 5},  \
    {"$v6",    RTYPE_VEC | 6},  \
    {"$v7",    RTYPE_VEC | 7},  \
    {"$v8",    RTYPE_VEC | 8},  \
    {"$v9",    RTYPE_VEC | 9},  \
    {"$v10",   RTYPE_VEC | 10}, \
    {"$v11",   RTYPE_VEC | 11}, \
    {"$v12",   RTYPE_VEC | 12}, \
    {"$v13",   RTYPE_VEC | 13}, \
    {"$v14",   RTYPE_VEC | 14}, \
    {"$v15",   RTYPE_VEC | 15}, \
    {"$v16",   RTYPE_VEC | 16}, \
    {"$v17",   RTYPE_VEC | 17}, \
    {"$v18",   RTYPE_VEC | 18}, \
    {"$v19",   RTYPE_VEC | 19}, \
    {"$v20",   RTYPE_VEC | 20}, \
    {"$v21",   RTYPE_VEC | 21}, \
    {"$v22",   RTYPE_VEC | 22}, \
    {"$v23",   RTYPE_VEC | 23}, \
    {"$v24",   RTYPE_VEC | 24}, \
    {"$v25",   RTYPE_VEC | 25}, \
    {"$v26",   RTYPE_VEC | 26}, \
    {"$v27",   RTYPE_VEC | 27}, \
    {"$v28",   RTYPE_VEC | 28}, \
    {"$v29",   RTYPE_VEC | 29}, \
    {"$v30",   RTYPE_VEC | 30}, \
    {"$v31",   RTYPE_VEC | 31}

#define MIPS_DSP_ACCUMULATOR_NAMES \
    {"$ac0",   RTYPE_ACC | 0}, \
    {"$ac1",   RTYPE_ACC | 1}, \
    {"$ac2",   RTYPE_ACC | 2}, \
    {"$ac3",   RTYPE_ACC | 3}

static const struct regname reg_names[] = {
  GENERIC_REGISTER_NUMBERS,
  FPU_REGISTER_NAMES,
  FPU_CONDITION_CODE_NAMES,
  COPROC_CONDITION_CODE_NAMES,

  /* The $txx registers depends on the abi,
     these will be added later into the symbol table from
     one of the tables below once mips_abi is set after 
     parsing of arguments from the command line. */
  SYMBOLIC_REGISTER_NAMES,

  MIPS16_SPECIAL_REGISTER_NAMES,
  MDMX_VECTOR_REGISTER_NAMES,
  MIPS_DSP_ACCUMULATOR_NAMES,
  {0, 0}
};

static const struct regname reg_names_o32[] = {
  O32_SYMBOLIC_REGISTER_NAMES,
  {0, 0}
};

static const struct regname reg_names_n32n64[] = {
  N32N64_SYMBOLIC_REGISTER_NAMES,
  {0, 0}
};

static int
reg_lookup (char **s, unsigned int types, unsigned int *regnop)
{
  symbolS *symbolP;
  char *e;
  char save_c;
  int reg = -1;

  /* Find end of name.  */
  e = *s;
  if (is_name_beginner (*e))
    ++e;
  while (is_part_of_name (*e))
    ++e;

  /* Terminate name.  */
  save_c = *e;
  *e = '\0';

  /* Look for a register symbol.  */
  if ((symbolP = symbol_find (*s)) && S_GET_SEGMENT (symbolP) == reg_section)
    {
      int r = S_GET_VALUE (symbolP);
      if (r & types)
       reg = r & RNUM_MASK;
      else if ((types & RTYPE_VEC) && (r & ~1) == (RTYPE_GP | 2))
       /* Convert GP reg $v0/1 to MDMX reg $v0/1!  */
       reg = (r & RNUM_MASK) - 2;
    }
  /* Else see if this is a register defined in an itbl entry.  */
  else if ((types & RTYPE_GP) && itbl_have_entries)
    {
      char *n = *s;
      unsigned long r;

      if (*n == '$')
       ++n;
      if (itbl_get_reg_val (n, &r))
       reg = r & RNUM_MASK;
    }

  /* Advance to next token if a register was recognised.  */
  if (reg >= 0)
    *s = e;
  else if (types & RWARN)
    as_warn ("Unrecognized register name `%s'", *s);

  *e = save_c;
  if (regnop)
    *regnop = reg;
  return reg >= 0;
}

/* This function is called once, at assembler startup time.  It should
   set up all the tables, etc. that the MD part of the assembler will need.  */

void
md_begin (void)
{
  register const char *retval = NULL;
  int i = 0;
  int broken = 0;

  if (! bfd_set_arch_mach (stdoutput, bfd_arch_mips, file_mips_arch))
    as_warn (_("Could not set architecture and machine"));

  op_hash = hash_new ();

  for (i = 0; i < NUMOPCODES;)
    {
      const char *name = mips_opcodes[i].name;

      retval = hash_insert (op_hash, name, (void *) &mips_opcodes[i]);
      if (retval != NULL)
	{
	  fprintf (stderr, _("internal error: can't hash `%s': %s\n"),
		   mips_opcodes[i].name, retval);
	  /* Probably a memory allocation problem?  Give up now.  */
	  as_fatal (_("Broken assembler.  No assembly attempted."));
	}
      do
	{
	  if (mips_opcodes[i].pinfo != INSN_MACRO)
	    {
	      if (!validate_mips_insn (&mips_opcodes[i]))
		broken = 1;
	    }
	  ++i;
	}
      while ((i < NUMOPCODES) && !strcmp (mips_opcodes[i].name, name));
    }

  mips16_op_hash = hash_new ();

  i = 0;
  while (i < bfd_mips16_num_opcodes)
    {
      const char *name = mips16_opcodes[i].name;

      retval = hash_insert (mips16_op_hash, name, (void *) &mips16_opcodes[i]);
      if (retval != NULL)
	as_fatal (_("internal: can't hash `%s': %s"),
		  mips16_opcodes[i].name, retval);
      do
	{
	  if (mips16_opcodes[i].pinfo != INSN_MACRO
	      && ((mips16_opcodes[i].match & mips16_opcodes[i].mask)
		  != mips16_opcodes[i].match))
	    {
	      fprintf (stderr, _("internal error: bad mips16 opcode: %s %s\n"),
		       mips16_opcodes[i].name, mips16_opcodes[i].args);
	      broken = 1;
	    }
	  ++i;
	}
      while (i < bfd_mips16_num_opcodes
	     && strcmp (mips16_opcodes[i].name, name) == 0);
    }

  if (broken)
    as_fatal (_("Broken assembler.  No assembly attempted."));

  /* We add all the general register names to the symbol table.  This
     helps us detect invalid uses of them.  */
  for (i = 0; reg_names[i].name; i++) 
    symbol_table_insert (symbol_new (reg_names[i].name, reg_section,
                                    reg_names[i].num, // & RNUM_MASK,
				    &zero_address_frag));
  if (HAVE_NEWABI)
    for (i = 0; reg_names_n32n64[i].name; i++) 
      symbol_table_insert (symbol_new (reg_names_n32n64[i].name, reg_section,
                                      reg_names_n32n64[i].num, // & RNUM_MASK,
				      &zero_address_frag));
  else
    for (i = 0; reg_names_o32[i].name; i++) 
      symbol_table_insert (symbol_new (reg_names_o32[i].name, reg_section,
                                      reg_names_o32[i].num, // & RNUM_MASK,
                                      &zero_address_frag));

  mips_no_prev_insn (FALSE);

  mips_gprmask = 0;
  mips_cprmask[0] = 0;
  mips_cprmask[1] = 0;
  mips_cprmask[2] = 0;
  mips_cprmask[3] = 0;

  /* set the default alignment for the text section (2**2) */
  record_alignment (text_section, 2);

  if (USE_GLOBAL_POINTER_OPT)
    bfd_set_gp_size (stdoutput, g_switch_value);

#ifdef OBJ_ELF
  if (OUTPUT_FLAVOR == bfd_target_elf_flavour)
    {
      /* On a native system, sections must be aligned to 16 byte
	 boundaries.  When configured for an embedded ELF target, we
	 don't bother.  */
      if (strcmp (TARGET_OS, "elf") != 0)
	{
	  (void) bfd_set_section_alignment (stdoutput, text_section, 4);
	  (void) bfd_set_section_alignment (stdoutput, data_section, 4);
	  (void) bfd_set_section_alignment (stdoutput, bss_section, 4);
	}

      /* Create a .reginfo section for register masks and a .mdebug
	 section for debugging information.  */
      {
	segT seg;
	subsegT subseg;
	flagword flags;
	segT sec;

	seg = now_seg;
	subseg = now_subseg;

	/* The ABI says this section should be loaded so that the
	   running program can access it.  However, we don't load it
	   if we are configured for an embedded target */
	flags = SEC_READONLY | SEC_DATA;
	if (strcmp (TARGET_OS, "elf") != 0)
	  flags |= SEC_ALLOC | SEC_LOAD;

	if (mips_abi != N64_ABI)
	  {
	    sec = subseg_new (".reginfo", (subsegT) 0);

	    bfd_set_section_flags (stdoutput, sec, flags);
	    bfd_set_section_alignment (stdoutput, sec, HAVE_NEWABI ? 3 : 2);

	    mips_regmask_frag = frag_more (sizeof (Elf32_External_RegInfo));
	  }
	else
	  {
	    /* The 64-bit ABI uses a .MIPS.options section rather than
               .reginfo section.  */
	    sec = subseg_new (".MIPS.options", (subsegT) 0);
	    bfd_set_section_flags (stdoutput, sec, flags);
	    bfd_set_section_alignment (stdoutput, sec, 3);

	    /* Set up the option header.  */
	    {
	      Elf_Internal_Options opthdr;
	      char *f;

	      opthdr.kind = ODK_REGINFO;
	      opthdr.size = (sizeof (Elf_External_Options)
			     + sizeof (Elf64_External_RegInfo));
	      opthdr.section = 0;
	      opthdr.info = 0;
	      f = frag_more (sizeof (Elf_External_Options));
	      bfd_mips_elf_swap_options_out (stdoutput, &opthdr,
					     (Elf_External_Options *) f);

	      mips_regmask_frag = frag_more (sizeof (Elf64_External_RegInfo));
	    }
	  }

	if (ECOFF_DEBUGGING)
	  {
	    sec = subseg_new (".mdebug", (subsegT) 0);
	    (void) bfd_set_section_flags (stdoutput, sec,
					  SEC_HAS_CONTENTS | SEC_READONLY);
	    (void) bfd_set_section_alignment (stdoutput, sec, 2);
	  }
	else if (OUTPUT_FLAVOR == bfd_target_elf_flavour && mips_flag_pdr)
	  {
	    pdr_seg = subseg_new (".pdr", (subsegT) 0);
	    (void) bfd_set_section_flags (stdoutput, pdr_seg,
					  SEC_READONLY | SEC_RELOC
					  | SEC_DEBUGGING);
	    (void) bfd_set_section_alignment (stdoutput, pdr_seg, 2);
	  }

	subseg_set (seg, subseg);
      }
    }
#endif /* OBJ_ELF */

  if (! ECOFF_DEBUGGING)
    md_obj_begin ();
}

void
md_mips_end (void)
{
  if (! ECOFF_DEBUGGING)
    md_obj_end ();
}

void
md_assemble (char *str)
{
  struct mips_cl_insn insn;
  bfd_reloc_code_real_type unused_reloc[3]
    = {BFD_RELOC_UNUSED, BFD_RELOC_UNUSED, BFD_RELOC_UNUSED};

  imm_expr.X_op = O_absent;
  imm2_expr.X_op = O_absent;
  offset_expr.X_op = O_absent;
  imm_reloc[0] = BFD_RELOC_UNUSED;
  imm_reloc[1] = BFD_RELOC_UNUSED;
  imm_reloc[2] = BFD_RELOC_UNUSED;
  offset_reloc[0] = BFD_RELOC_UNUSED;
  offset_reloc[1] = BFD_RELOC_UNUSED;
  offset_reloc[2] = BFD_RELOC_UNUSED;

  if (mips_opts.mips16)
    mips16_ip (str, &insn);
  else
    {
      mips_ip (str, &insn);
      DBG ((_("returned from mips_ip(%s) insn_opcode = 0x%x\n"),
	    str, insn.insn_opcode));
    }

  if (insn_error)
    {
      as_bad ("%s `%s'", insn_error, str);
      return;
    }

  if (insn.insn_mo->pinfo == INSN_MACRO)
    {
      macro_start ();
      if (mips_opts.mips16)
	mips16_macro (&insn);
      else
	macro (&insn);
      macro_end ();
    }
  else
    {
      if (imm_expr.X_op != O_absent)
	append_insn (&insn, &imm_expr, imm_reloc);
      else if (offset_expr.X_op != O_absent)
	append_insn (&insn, &offset_expr, offset_reloc);
      else
	append_insn (&insn, NULL, unused_reloc);
    }
}

/* Return true if the given relocation might need a matching %lo().
   Note that R_MIPS_GOT16 relocations only need a matching %lo() when
   applied to local symbols.  */

static inline bfd_boolean
reloc_needs_lo_p (bfd_reloc_code_real_type reloc)
{
  return (reloc == BFD_RELOC_HI16_S
	  || reloc == BFD_RELOC_MIPS_GOT16);
}

/* Return true if the given fixup is followed by a matching R_MIPS_LO16
   relocation.  */

static inline bfd_boolean
fixup_has_matching_lo_p (fixS *fixp)
{
  return (fixp->fx_next != NULL
	  && fixp->fx_next->fx_r_type == BFD_RELOC_LO16
	  && fixp->fx_addsy == fixp->fx_next->fx_addsy
	  && fixp->fx_offset == fixp->fx_next->fx_offset);
}

/* See whether instruction IP reads register REG.  CLASS is the type
   of register.  */

static int
insn_uses_reg (struct mips_cl_insn *ip, unsigned int reg,
	       enum mips_regclass class)
{
  if (class == MIPS16_REG)
    {
      assert (mips_opts.mips16);
      reg = mips16_to_32_reg_map[reg];
      class = MIPS_GR_REG;
    }

  /* Don't report on general register ZERO, since it never changes.  */
  if (class == MIPS_GR_REG && reg == ZERO)
    return 0;

  if (class == MIPS_FP_REG)
    {
      assert (! mips_opts.mips16);
      /* If we are called with either $f0 or $f1, we must check $f0.
	 This is not optimal, because it will introduce an unnecessary
	 NOP between "lwc1 $f0" and "swc1 $f1".  To fix this we would
	 need to distinguish reading both $f0 and $f1 or just one of
	 them.  Note that we don't have to check the other way,
	 because there is no instruction that sets both $f0 and $f1
	 and requires a delay.  */
      if ((ip->insn_mo->pinfo & INSN_READ_FPR_S)
	  && ((((ip->insn_opcode >> OP_SH_FS) & OP_MASK_FS) &~(unsigned)1)
	      == (reg &~ (unsigned) 1)))
	return 1;
      if ((ip->insn_mo->pinfo & INSN_READ_FPR_T)
	  && ((((ip->insn_opcode >> OP_SH_FT) & OP_MASK_FT) &~(unsigned)1)
	      == (reg &~ (unsigned) 1)))
	return 1;
    }
  else if (! mips_opts.mips16)
    {
      if ((ip->insn_mo->pinfo & INSN_READ_GPR_S)
	  && ((ip->insn_opcode >> OP_SH_RS) & OP_MASK_RS) == reg)
	return 1;
      if ((ip->insn_mo->pinfo & INSN_READ_GPR_T)
	  && ((ip->insn_opcode >> OP_SH_RT) & OP_MASK_RT) == reg)
	return 1;
    }
  else
    {
      if ((ip->insn_mo->pinfo & MIPS16_INSN_READ_X)
	  && (mips16_to_32_reg_map[((ip->insn_opcode >> MIPS16OP_SH_RX)
				    & MIPS16OP_MASK_RX)]
	      == reg))
	return 1;
      if ((ip->insn_mo->pinfo & MIPS16_INSN_READ_Y)
	  && (mips16_to_32_reg_map[((ip->insn_opcode >> MIPS16OP_SH_RY)
				    & MIPS16OP_MASK_RY)]
	      == reg))
	return 1;
      if ((ip->insn_mo->pinfo & MIPS16_INSN_READ_Z)
	  && (mips16_to_32_reg_map[((ip->insn_opcode >> MIPS16OP_SH_MOVE32Z)
				    & MIPS16OP_MASK_MOVE32Z)]
	      == reg))
	return 1;
      if ((ip->insn_mo->pinfo & MIPS16_INSN_READ_T) && reg == TREG)
	return 1;
      if ((ip->insn_mo->pinfo & MIPS16_INSN_READ_SP) && reg == SP)
	return 1;
      if ((ip->insn_mo->pinfo & MIPS16_INSN_READ_31) && reg == RA)
	return 1;
      if ((ip->insn_mo->pinfo & MIPS16_INSN_READ_GPR_X)
	  && ((ip->insn_opcode >> MIPS16OP_SH_REGR32)
	      & MIPS16OP_MASK_REGR32) == reg)
	return 1;
    }

  return 0;
}

/* This function returns true if modifying a register requires a
   delay.  */

static int
reg_needs_delay (unsigned int reg)
{
  unsigned long prev_pinfo;

  prev_pinfo = prev_insn.insn_mo->pinfo;
  if (! mips_opts.noreorder
      && (((prev_pinfo & INSN_LOAD_MEMORY_DELAY)
	   && ! gpr_interlocks)
	  || ((prev_pinfo & INSN_LOAD_COPROC_DELAY)
	      && ! cop_interlocks)))
    {
      /* A load from a coprocessor or from memory.  All load delays
	 delay the use of general register rt for one instruction.  */
      /* Itbl support may require additional care here.  */
      know (prev_pinfo & INSN_WRITE_GPR_T);
      if (reg == ((prev_insn.insn_opcode >> OP_SH_RT) & OP_MASK_RT))
	return 1;
    }

  return 0;
}

/* Mark instruction labels in mips16 mode.  This permits the linker to
   handle them specially, such as generating jalx instructions when
   needed.  We also make them odd for the duration of the assembly, in
   order to generate the right sort of code.  We will make them even
   in the adjust_symtab routine, while leaving them marked.  This is
   convenient for the debugger and the disassembler.  The linker knows
   to make them odd again.  */

static void
mips16_mark_labels (void)
{
  if (mips_opts.mips16)
    {
      struct insn_label_list *l;
      valueT val;

      for (l = insn_labels; l != NULL; l = l->next)
	{
#ifdef OBJ_ELF
	  if (OUTPUT_FLAVOR == bfd_target_elf_flavour)
	    S_SET_OTHER (l->label, STO_MIPS16);
#endif
	  val = S_GET_VALUE (l->label);
	  if ((val & 1) == 0)
	    S_SET_VALUE (l->label, val + 1);
	}
    }
}

/* End the current frag.  Make it a variant frag and record the
   relaxation info.  */

static void
relax_close_frag (void)
{
  mips_macro_warning.first_frag = frag_now;
  frag_var (rs_machine_dependent, 0, 0,
	    RELAX_ENCODE (mips_relax.sizes[0], mips_relax.sizes[1]),
	    mips_relax.symbol, 0, (char *) mips_relax.first_fixup);

  memset (&mips_relax.sizes, 0, sizeof (mips_relax.sizes));
  mips_relax.first_fixup = 0;
}

/* Start a new relaxation sequence whose expansion depends on SYMBOL.
   See the comment above RELAX_ENCODE for more details.  */

static void
relax_start (symbolS *symbol)
{
  assert (mips_relax.sequence == 0);
  mips_relax.sequence = 1;
  mips_relax.symbol = symbol;
}

/* Start generating the second version of a relaxable sequence.
   See the comment above RELAX_ENCODE for more details.  */

static void
relax_switch (void)
{
  assert (mips_relax.sequence == 1);
  mips_relax.sequence = 2;
}

/* End the current relaxable sequence.  */

static void
relax_end (void)
{
  assert (mips_relax.sequence == 2);
  relax_close_frag ();
  mips_relax.sequence = 0;
}

/* Output an instruction.  IP is the instruction information.
   ADDRESS_EXPR is an operand of the instruction to be used with
   RELOC_TYPE.  */

static void
append_insn (struct mips_cl_insn *ip, expressionS *address_expr,
	     bfd_reloc_code_real_type *reloc_type)
{
  register unsigned long prev_pinfo, pinfo;
  char *f;
  fixS *fixp[3];
  int nops = 0;
  relax_stateT prev_insn_frag_type = 0;
  bfd_boolean relaxed_branch = FALSE;
  bfd_boolean force_new_frag = FALSE;

  /* Mark instruction labels in mips16 mode.  */
  mips16_mark_labels ();

  prev_pinfo = prev_insn.insn_mo->pinfo;
  pinfo = ip->insn_mo->pinfo;

  if (mips_relax.sequence != 2
      && (!mips_opts.noreorder || prev_nop_frag != NULL))
    {
      int prev_prev_nop;

      /* If the previous insn required any delay slots, see if we need
	 to insert a NOP or two.  There are eight kinds of possible
	 hazards, of which an instruction can have at most one type.
	 (1) a load from memory delay
	 (2) a load from a coprocessor delay
	 (3) an unconditional branch delay
	 (4) a conditional branch delay
	 (5) a move to coprocessor register delay
	 (6) a load coprocessor register from memory delay
	 (7) a coprocessor condition code delay
	 (8) a HI/LO special register delay

	 There are a lot of optimizations we could do that we don't.
	 In particular, we do not, in general, reorder instructions.
	 If you use gcc with optimization, it will reorder
	 instructions and generally do much more optimization then we
	 do here; repeating all that work in the assembler would only
	 benefit hand written assembly code, and does not seem worth
	 it.  */

      /* This is how a NOP is emitted.  */
#define emit_nop()					\
  (mips_opts.mips16					\
   ? md_number_to_chars (frag_more (2), 0x6500, 2)	\
   : md_number_to_chars (frag_more (4), 0, 4))

      /* The previous insn might require a delay slot, depending upon
	 the contents of the current insn.  */
      if (! mips_opts.mips16
	  && (((prev_pinfo & INSN_LOAD_MEMORY_DELAY)
	       && ! gpr_interlocks)
	      || ((prev_pinfo & INSN_LOAD_COPROC_DELAY)
		  && ! cop_interlocks)))
	{
	  /* A load from a coprocessor or from memory.  All load
	     delays delay the use of general register rt for one
	     instruction.  */
	  /* Itbl support may require additional care here.  */
	  know (prev_pinfo & INSN_WRITE_GPR_T);
	  if (mips_optimize == 0
	      || insn_uses_reg (ip,
				((prev_insn.insn_opcode >> OP_SH_RT)
				 & OP_MASK_RT),
				MIPS_GR_REG))
	    ++nops;
	}
      else if (! mips_opts.mips16
	       && (((prev_pinfo & INSN_COPROC_MOVE_DELAY)
		    && ! cop_interlocks)
		   || ((prev_pinfo & INSN_COPROC_MEMORY_DELAY)
		       && ! cop_mem_interlocks)))
	{
	  /* A generic coprocessor delay.  The previous instruction
	     modified a coprocessor general or control register.  If
	     it modified a control register, we need to avoid any
	     coprocessor instruction (this is probably not always
	     required, but it sometimes is).  If it modified a general
	     register, we avoid using that register.

	     This case is not handled very well.  There is no special
	     knowledge of CP0 handling, and the coprocessors other
	     than the floating point unit are not distinguished at
	     all.  */
          /* Itbl support may require additional care here. FIXME!
             Need to modify this to include knowledge about
             user specified delays!  */
	  if (prev_pinfo & INSN_WRITE_FPR_T)
	    {
	      if (mips_optimize == 0
		  || insn_uses_reg (ip,
				    ((prev_insn.insn_opcode >> OP_SH_FT)
				     & OP_MASK_FT),
				    MIPS_FP_REG))
		++nops;
	    }
	  else if (prev_pinfo & INSN_WRITE_FPR_S)
	    {
	      if (mips_optimize == 0
		  || insn_uses_reg (ip,
				    ((prev_insn.insn_opcode >> OP_SH_FS)
				     & OP_MASK_FS),
				    MIPS_FP_REG))
		++nops;
	    }
	  else
	    {
	      /* We don't know exactly what the previous instruction
		 does.  If the current instruction uses a coprocessor
		 register, we must insert a NOP.  If previous
		 instruction may set the condition codes, and the
		 current instruction uses them, we must insert two
		 NOPS.  */
              /* Itbl support may require additional care here.  */
	      if (mips_optimize == 0
		  || ((prev_pinfo & INSN_WRITE_COND_CODE)
		      && (pinfo & INSN_READ_COND_CODE)))
		nops += 2;
	      else if (pinfo & INSN_COP)
		++nops;
	    }
	}
      else if (! mips_opts.mips16
	       && (prev_pinfo & INSN_WRITE_COND_CODE)
               && ! cop_interlocks)
	{
	  /* The previous instruction sets the coprocessor condition
	     codes, but does not require a general coprocessor delay
	     (this means it is a floating point comparison
	     instruction).  If this instruction uses the condition
	     codes, we need to insert a single NOP.  */
	  /* Itbl support may require additional care here.  */
	  if (mips_optimize == 0
	      || (pinfo & INSN_READ_COND_CODE))
	    ++nops;
	}

      /* If we're fixing up mfhi/mflo for the r7000 and the
	 previous insn was an mfhi/mflo and the current insn
	 reads the register that the mfhi/mflo wrote to, then
	 insert two nops.  */

      else if (mips_7000_hilo_fix
	       && MF_HILO_INSN (prev_pinfo)
	       && insn_uses_reg (ip, ((prev_insn.insn_opcode >> OP_SH_RD)
				      & OP_MASK_RD),
				 MIPS_GR_REG))
	{
	  nops += 2;
	}

      /* If we're fixing up mfhi/mflo for the r7000 and the
	 2nd previous insn was an mfhi/mflo and the current insn
	 reads the register that the mfhi/mflo wrote to, then
	 insert one nop.  */

      else if (mips_7000_hilo_fix
	       && MF_HILO_INSN (prev_prev_insn.insn_opcode)
	       && insn_uses_reg (ip, ((prev_prev_insn.insn_opcode >> OP_SH_RD)
                                       & OP_MASK_RD),
                                    MIPS_GR_REG))

	{
	  ++nops;
	}

      else if (prev_pinfo & INSN_READ_LO)
	{
	  /* The previous instruction reads the LO register; if the
	     current instruction writes to the LO register, we must
	     insert two NOPS.  Some newer processors have interlocks.
	     Also the tx39's multiply instructions can be executed
             immediately after a read from HI/LO (without the delay),
             though the tx39's divide insns still do require the
	     delay.  */
	  if (! (hilo_interlocks
		 || (mips_opts.arch == CPU_R3900 && (pinfo & INSN_MULT)))
	      && (mips_optimize == 0
		  || (pinfo & INSN_WRITE_LO)))
	    nops += 2;
	  /* Most mips16 branch insns don't have a delay slot.
	     If a read from LO is immediately followed by a branch
	     to a write to LO we have a read followed by a write
	     less than 2 insns away.  We assume the target of
	     a branch might be a write to LO, and insert a nop
	     between a read and an immediately following branch.  */
	  else if (mips_opts.mips16
		   && (mips_optimize == 0
		       || (pinfo & MIPS16_INSN_BRANCH)))
	    ++nops;
	}
      else if (prev_insn.insn_mo->pinfo & INSN_READ_HI)
	{
	  /* The previous instruction reads the HI register; if the
	     current instruction writes to the HI register, we must
	     insert a NOP.  Some newer processors have interlocks.
	     Also the note tx39's multiply above.  */
	  if (! (hilo_interlocks
		 || (mips_opts.arch == CPU_R3900 && (pinfo & INSN_MULT)))
	      && (mips_optimize == 0
		  || (pinfo & INSN_WRITE_HI)))
	    nops += 2;
	  /* Most mips16 branch insns don't have a delay slot.
	     If a read from HI is immediately followed by a branch
	     to a write to HI we have a read followed by a write
	     less than 2 insns away.  We assume the target of
	     a branch might be a write to HI, and insert a nop
	     between a read and an immediately following branch.  */
	  else if (mips_opts.mips16
		   && (mips_optimize == 0
		       || (pinfo & MIPS16_INSN_BRANCH)))
	    ++nops;
	}

      /* If the previous instruction was in a noreorder section, then
         we don't want to insert the nop after all.  */
      /* Itbl support may require additional care here.  */
      if (prev_insn_unreordered)
	nops = 0;

      /* There are two cases which require two intervening
	 instructions: 1) setting the condition codes using a move to
	 coprocessor instruction which requires a general coprocessor
	 delay and then reading the condition codes 2) reading the HI
	 or LO register and then writing to it (except on processors
	 which have interlocks).  If we are not already emitting a NOP
	 instruction, we must check for these cases compared to the
	 instruction previous to the previous instruction.  */
      if ((! mips_opts.mips16
	   && (prev_prev_insn.insn_mo->pinfo & INSN_COPROC_MOVE_DELAY)
	   && (prev_prev_insn.insn_mo->pinfo & INSN_WRITE_COND_CODE)
	   && (pinfo & INSN_READ_COND_CODE)
	   && ! cop_interlocks)
	  || ((prev_prev_insn.insn_mo->pinfo & INSN_READ_LO)
	      && (pinfo & INSN_WRITE_LO)
	      && ! (hilo_interlocks
		    || (mips_opts.arch == CPU_R3900 && (pinfo & INSN_MULT))))
	  || ((prev_prev_insn.insn_mo->pinfo & INSN_READ_HI)
	      && (pinfo & INSN_WRITE_HI)
	      && ! (hilo_interlocks
		    || (mips_opts.arch == CPU_R3900 && (pinfo & INSN_MULT)))))
	prev_prev_nop = 1;
      else
	prev_prev_nop = 0;

      if (prev_prev_insn_unreordered)
	prev_prev_nop = 0;

      if (prev_prev_nop && nops == 0)
	++nops;

      if (mips_fix_vr4120 && prev_insn.insn_mo->name)
	{
	  /* We're out of bits in pinfo, so we must resort to string
	     ops here.  Shortcuts are selected based on opcodes being
	     limited to the VR4120 instruction set.  */
	  int min_nops = 0;
	  const char *pn = prev_insn.insn_mo->name;
	  const char *tn = ip->insn_mo->name;
	  if (strncmp(pn, "macc", 4) == 0
	      || strncmp(pn, "dmacc", 5) == 0)
	    {
	      /* Errata 21 - [D]DIV[U] after [D]MACC */
	      if (strstr (tn, "div"))
		{
		  min_nops = 1;
		}

	      /* Errata 23 - Continuous DMULT[U]/DMACC instructions */
	      if (pn[0] == 'd' /* dmacc */
		  && (strncmp(tn, "dmult", 5) == 0
		      || strncmp(tn, "dmacc", 5) == 0))
		{
		  min_nops = 1;
		}

	      /* Errata 24 - MT{LO,HI} after [D]MACC */
	      if (strcmp (tn, "mtlo") == 0
		  || strcmp (tn, "mthi") == 0)
		{
		  min_nops = 1;
		}

	    }
	  else if (strncmp(pn, "dmult", 5) == 0
		   && (strncmp(tn, "dmult", 5) == 0
		       || strncmp(tn, "dmacc", 5) == 0))
	    {
	      /* Here is the rest of errata 23.  */
	      min_nops = 1;
	    }
	  if (nops < min_nops)
	    nops = min_nops;
	}

      /* If we are being given a nop instruction, don't bother with
	 one of the nops we would otherwise output.  This will only
	 happen when a nop instruction is used with mips_optimize set
	 to 0.  */
      if (nops > 0
	  && ! mips_opts.noreorder
	  && ip->insn_opcode == (unsigned) (mips_opts.mips16 ? 0x6500 : 0))
	--nops;

      /* Now emit the right number of NOP instructions.  */
      if (nops > 0 && ! mips_opts.noreorder)
	{
	  fragS *old_frag;
	  unsigned long old_frag_offset;
	  int i;
	  struct insn_label_list *l;

	  old_frag = frag_now;
	  old_frag_offset = frag_now_fix ();

	  for (i = 0; i < nops; i++)
	    emit_nop ();

	  if (listing)
	    {
	      listing_prev_line ();
	      /* We may be at the start of a variant frag.  In case we
                 are, make sure there is enough space for the frag
                 after the frags created by listing_prev_line.  The
                 argument to frag_grow here must be at least as large
                 as the argument to all other calls to frag_grow in
                 this file.  We don't have to worry about being in the
                 middle of a variant frag, because the variants insert
                 all needed nop instructions themselves.  */
	      frag_grow (40);
	    }

	  for (l = insn_labels; l != NULL; l = l->next)
	    {
	      valueT val;

	      assert (S_GET_SEGMENT (l->label) == now_seg);
	      symbol_set_frag (l->label, frag_now);
	      val = (valueT) frag_now_fix ();
	      /* mips16 text labels are stored as odd.  */
	      if (mips_opts.mips16)
		++val;
	      S_SET_VALUE (l->label, val);
	    }

#ifndef NO_ECOFF_DEBUGGING
	  if (ECOFF_DEBUGGING)
	    ecoff_fix_loc (old_frag, old_frag_offset);
#endif
	}
      else if (prev_nop_frag != NULL)
	{
	  /* We have a frag holding nops we may be able to remove.  If
             we don't need any nops, we can decrease the size of
             prev_nop_frag by the size of one instruction.  If we do
             need some nops, we count them in prev_nops_required.  */
	  if (prev_nop_frag_since == 0)
	    {
	      if (nops == 0)
		{
		  prev_nop_frag->fr_fix -= mips_opts.mips16 ? 2 : 4;
		  --prev_nop_frag_holds;
		}
	      else
		prev_nop_frag_required += nops;
	    }
	  else
	    {
	      if (prev_prev_nop == 0)
		{
		  prev_nop_frag->fr_fix -= mips_opts.mips16 ? 2 : 4;
		  --prev_nop_frag_holds;
		}
	      else
		++prev_nop_frag_required;
	    }

	  if (prev_nop_frag_holds <= prev_nop_frag_required)
	    prev_nop_frag = NULL;

	  ++prev_nop_frag_since;

	  /* Sanity check: by the time we reach the second instruction
             after prev_nop_frag, we should have used up all the nops
             one way or another.  */
	  assert (prev_nop_frag_since <= 1 || prev_nop_frag == NULL);
	}
    }

  /* Record the frag type before frag_var.  */
  if (prev_insn_frag)
    prev_insn_frag_type = prev_insn_frag->fr_type;

  if (address_expr
      && *reloc_type == BFD_RELOC_16_PCREL_S2
      && (pinfo & INSN_UNCOND_BRANCH_DELAY || pinfo & INSN_COND_BRANCH_DELAY
	  || pinfo & INSN_COND_BRANCH_LIKELY)
      && mips_relax_branch
      /* Don't try branch relaxation within .set nomacro, or within
	 .set noat if we use $at for PIC computations.  If it turns
	 out that the branch was out-of-range, we'll get an error.  */
      && !mips_opts.warn_about_macros
      && !(mips_opts.noat && mips_pic != NO_PIC)
      && !mips_opts.mips16)
    {
      relaxed_branch = TRUE;
      f = frag_var (rs_machine_dependent,
		    relaxed_branch_length
		    (NULL, NULL,
		     (pinfo & INSN_UNCOND_BRANCH_DELAY) ? -1
		     : (pinfo & INSN_COND_BRANCH_LIKELY) ? 1 : 0), 4,
		    RELAX_BRANCH_ENCODE
		    (pinfo & INSN_UNCOND_BRANCH_DELAY,
		     pinfo & INSN_COND_BRANCH_LIKELY,
		     pinfo & INSN_WRITE_GPR_31,
		     0),
		    address_expr->X_add_symbol,
		    address_expr->X_add_number,
		    0);
      *reloc_type = BFD_RELOC_UNUSED;
    }
  else if (*reloc_type > BFD_RELOC_UNUSED)
    {
      /* We need to set up a variant frag.  */
      assert (mips_opts.mips16 && address_expr != NULL);
      f = frag_var (rs_machine_dependent, 4, 0,
		    RELAX_MIPS16_ENCODE (*reloc_type - BFD_RELOC_UNUSED,
					 mips16_small, mips16_ext,
					 (prev_pinfo
					  & INSN_UNCOND_BRANCH_DELAY),
					 (*prev_insn_reloc_type
					  == BFD_RELOC_MIPS16_JMP)),
		    make_expr_symbol (address_expr), 0, NULL);
    }
  else if (mips_opts.mips16
	   && ! ip->use_extend
	   && *reloc_type != BFD_RELOC_MIPS16_JMP)
    {
      /* Make sure there is enough room to swap this instruction with
         a following jump instruction.  */
      frag_grow (6);
      f = frag_more (2);
    }
  else
    {
      if (mips_opts.mips16
	  && mips_opts.noreorder
	  && (prev_pinfo & INSN_UNCOND_BRANCH_DELAY) != 0)
	as_warn (_("extended instruction in delay slot"));

      if (mips_relax.sequence)
	{
	  /* If we've reached the end of this frag, turn it into a variant
	     frag and record the information for the instructions we've
	     written so far.  */
	  if (frag_room () < 4)
	    relax_close_frag ();
	  mips_relax.sizes[mips_relax.sequence - 1] += 4;
	}

      if (mips_relax.sequence != 2)
	mips_macro_warning.sizes[0] += 4;
      if (mips_relax.sequence != 1)
	mips_macro_warning.sizes[1] += 4;

      f = frag_more (4);
    }

  fixp[0] = fixp[1] = fixp[2] = NULL;
  if (address_expr != NULL && *reloc_type < BFD_RELOC_UNUSED)
    {
      if (address_expr->X_op == O_constant)
	{
	  valueT tmp;

	  switch (*reloc_type)
	    {
	    case BFD_RELOC_32:
	      ip->insn_opcode |= address_expr->X_add_number;
	      break;

	    case BFD_RELOC_MIPS_HIGHEST:
	      tmp = (address_expr->X_add_number
		     + ((valueT) 0x8000 << 32) + 0x80008000) >> 16;
	      tmp >>= 16;
	      ip->insn_opcode |= (tmp >> 16) & 0xffff;
	      break;

	    case BFD_RELOC_MIPS_HIGHER:
	      tmp = (address_expr->X_add_number + 0x80008000) >> 16;
	      ip->insn_opcode |= (tmp >> 16) & 0xffff;
	      break;

	    case BFD_RELOC_HI16_S:
	      ip->insn_opcode |= ((address_expr->X_add_number + 0x8000)
				  >> 16) & 0xffff;
	      break;

	    case BFD_RELOC_HI16:
	      ip->insn_opcode |= (address_expr->X_add_number >> 16) & 0xffff;
	      break;

	    case BFD_RELOC_LO16:
	    case BFD_RELOC_MIPS_GOT_DISP:
	      ip->insn_opcode |= address_expr->X_add_number & 0xffff;
	      break;

	    case BFD_RELOC_MIPS_JMP:
	      if ((address_expr->X_add_number & 3) != 0)
		as_bad (_("jump to misaligned address (0x%lx)"),
			(unsigned long) address_expr->X_add_number);
	      if (address_expr->X_add_number & ~0xfffffff)
		as_bad (_("jump address range overflow (0x%lx)"),
			(unsigned long) address_expr->X_add_number);
	      ip->insn_opcode |= (address_expr->X_add_number >> 2) & 0x3ffffff;
	      break;

	    case BFD_RELOC_MIPS16_JMP:
	      if ((address_expr->X_add_number & 3) != 0)
		as_bad (_("jump to misaligned address (0x%lx)"),
			(unsigned long) address_expr->X_add_number);
	      if (address_expr->X_add_number & ~0xfffffff)
		as_bad (_("jump address range overflow (0x%lx)"),
			(unsigned long) address_expr->X_add_number);
	      ip->insn_opcode |=
		(((address_expr->X_add_number & 0x7c0000) << 3)
		 | ((address_expr->X_add_number & 0xf800000) >> 7)
		 | ((address_expr->X_add_number & 0x3fffc) >> 2));
	      break;

	    case BFD_RELOC_16_PCREL_S2:
	      goto need_reloc;

	    default:
	      internalError ();
	    }
	}
      else
	need_reloc:
	{
	  reloc_howto_type *howto;
	  int i;

	  /* In a compound relocation, it is the final (outermost)
	     operator that determines the relocated field.  */
	  for (i = 1; i < 3; i++)
	    if (reloc_type[i] == BFD_RELOC_UNUSED)
	      break;

	  howto = bfd_reloc_type_lookup (stdoutput, reloc_type[i - 1]);
	  fixp[0] = fix_new_exp (frag_now, f - frag_now->fr_literal,
				 bfd_get_reloc_size(howto),
				 address_expr,
				 reloc_type[0] == BFD_RELOC_16_PCREL_S2,
				 reloc_type[0]);

	  /* These relocations can have an addend that won't fit in
	     4 octets for 64bit assembly.  */
	  if (HAVE_64BIT_GPRS
	      && ! howto->partial_inplace
	      && (reloc_type[0] == BFD_RELOC_16
		  || reloc_type[0] == BFD_RELOC_32
		  || reloc_type[0] == BFD_RELOC_MIPS_JMP
		  || reloc_type[0] == BFD_RELOC_HI16_S
		  || reloc_type[0] == BFD_RELOC_LO16
		  || reloc_type[0] == BFD_RELOC_GPREL16
		  || reloc_type[0] == BFD_RELOC_MIPS_LITERAL
		  || reloc_type[0] == BFD_RELOC_GPREL32
		  || reloc_type[0] == BFD_RELOC_64
		  || reloc_type[0] == BFD_RELOC_CTOR
		  || reloc_type[0] == BFD_RELOC_MIPS_SUB
		  || reloc_type[0] == BFD_RELOC_MIPS_HIGHEST
		  || reloc_type[0] == BFD_RELOC_MIPS_HIGHER
		  || reloc_type[0] == BFD_RELOC_MIPS_SCN_DISP
		  || reloc_type[0] == BFD_RELOC_MIPS_REL16
		  || reloc_type[0] == BFD_RELOC_MIPS_RELGOT))
	    fixp[0]->fx_no_overflow = 1;

	  if (mips_relax.sequence)
	    {
	      if (mips_relax.first_fixup == 0)
		mips_relax.first_fixup = fixp[0];
	    }
	  else if (reloc_needs_lo_p (*reloc_type))
	    {
	      struct mips_hi_fixup *hi_fixup;

	      /* Reuse the last entry if it already has a matching %lo.  */
	      hi_fixup = mips_hi_fixup_list;
	      if (hi_fixup == 0
		  || !fixup_has_matching_lo_p (hi_fixup->fixp))
		{
		  hi_fixup = ((struct mips_hi_fixup *)
			      xmalloc (sizeof (struct mips_hi_fixup)));
		  hi_fixup->next = mips_hi_fixup_list;
		  mips_hi_fixup_list = hi_fixup;
		}
	      hi_fixup->fixp = fixp[0];
	      hi_fixup->seg = now_seg;
	    }

	  /* Add fixups for the second and third relocations, if given.
	     Note that the ABI allows the second relocation to be
	     against RSS_UNDEF, RSS_GP, RSS_GP0 or RSS_LOC.  At the
	     moment we only use RSS_UNDEF, but we could add support
	     for the others if it ever becomes necessary.  */
	  for (i = 1; i < 3; i++)
	    if (reloc_type[i] != BFD_RELOC_UNUSED)
	      {
		address_expr->X_op = O_absent;
		address_expr->X_add_symbol = 0;
		address_expr->X_add_number = 0;

		fixp[i] = fix_new_exp (frag_now, fixp[0]->fx_where,
				       fixp[0]->fx_size, address_expr,
				       FALSE, reloc_type[i]);
	      }
	}
    }

  if (! mips_opts.mips16)
    {
      md_number_to_chars (f, ip->insn_opcode, 4);
#ifdef OBJ_ELF
      dwarf2_emit_insn (4);
#endif
    }
  else if (*reloc_type == BFD_RELOC_MIPS16_JMP)
    {
      md_number_to_chars (f, ip->insn_opcode >> 16, 2);
      md_number_to_chars (f + 2, ip->insn_opcode & 0xffff, 2);
#ifdef OBJ_ELF
      dwarf2_emit_insn (4);
#endif
    }
  else
    {
      if (ip->use_extend)
	{
	  md_number_to_chars (f, 0xf000 | ip->extend, 2);
	  f += 2;
	}
      md_number_to_chars (f, ip->insn_opcode, 2);
#ifdef OBJ_ELF
      dwarf2_emit_insn (ip->use_extend ? 4 : 2);
#endif
    }

  /* Update the register mask information.  */
  if (! mips_opts.mips16)
    {
      if (pinfo & INSN_WRITE_GPR_D)
	mips_gprmask |= 1 << ((ip->insn_opcode >> OP_SH_RD) & OP_MASK_RD);
      if ((pinfo & (INSN_WRITE_GPR_T | INSN_READ_GPR_T)) != 0)
	mips_gprmask |= 1 << ((ip->insn_opcode >> OP_SH_RT) & OP_MASK_RT);
      if (pinfo & INSN_READ_GPR_S)
	mips_gprmask |= 1 << ((ip->insn_opcode >> OP_SH_RS) & OP_MASK_RS);
      if (pinfo & INSN_WRITE_GPR_31)
	mips_gprmask |= 1 << RA;
      if (pinfo & INSN_WRITE_FPR_D)
	mips_cprmask[1] |= 1 << ((ip->insn_opcode >> OP_SH_FD) & OP_MASK_FD);
      if ((pinfo & (INSN_WRITE_FPR_S | INSN_READ_FPR_S)) != 0)
	mips_cprmask[1] |= 1 << ((ip->insn_opcode >> OP_SH_FS) & OP_MASK_FS);
      if ((pinfo & (INSN_WRITE_FPR_T | INSN_READ_FPR_T)) != 0)
	mips_cprmask[1] |= 1 << ((ip->insn_opcode >> OP_SH_FT) & OP_MASK_FT);
      if ((pinfo & INSN_READ_FPR_R) != 0)
	mips_cprmask[1] |= 1 << ((ip->insn_opcode >> OP_SH_FR) & OP_MASK_FR);
      if (pinfo & INSN_COP)
	{
	  /* We don't keep enough information to sort these cases out.
	     The itbl support does keep this information however, although
	     we currently don't support itbl fprmats as part of the cop
	     instruction.  May want to add this support in the future.  */
	}
      /* Never set the bit for $0, which is always zero.  */
      mips_gprmask &= ~1 << 0;
    }
  else
    {
      if (pinfo & (MIPS16_INSN_WRITE_X | MIPS16_INSN_READ_X))
	mips_gprmask |= 1 << ((ip->insn_opcode >> MIPS16OP_SH_RX)
			      & MIPS16OP_MASK_RX);
      if (pinfo & (MIPS16_INSN_WRITE_Y | MIPS16_INSN_READ_Y))
	mips_gprmask |= 1 << ((ip->insn_opcode >> MIPS16OP_SH_RY)
			      & MIPS16OP_MASK_RY);
      if (pinfo & MIPS16_INSN_WRITE_Z)
	mips_gprmask |= 1 << ((ip->insn_opcode >> MIPS16OP_SH_RZ)
			      & MIPS16OP_MASK_RZ);
      if (pinfo & (MIPS16_INSN_WRITE_T | MIPS16_INSN_READ_T))
	mips_gprmask |= 1 << TREG;
      if (pinfo & (MIPS16_INSN_WRITE_SP | MIPS16_INSN_READ_SP))
	mips_gprmask |= 1 << SP;
      if (pinfo & (MIPS16_INSN_WRITE_31 | MIPS16_INSN_READ_31))
	mips_gprmask |= 1 << RA;
      if (pinfo & MIPS16_INSN_WRITE_GPR_Y)
	mips_gprmask |= 1 << MIPS16OP_EXTRACT_REG32R (ip->insn_opcode);
      if (pinfo & MIPS16_INSN_READ_Z)
	mips_gprmask |= 1 << ((ip->insn_opcode >> MIPS16OP_SH_MOVE32Z)
			      & MIPS16OP_MASK_MOVE32Z);
      if (pinfo & MIPS16_INSN_READ_GPR_X)
	mips_gprmask |= 1 << ((ip->insn_opcode >> MIPS16OP_SH_REGR32)
			      & MIPS16OP_MASK_REGR32);
    }

  if (mips_relax.sequence != 2 && !mips_opts.noreorder)
    {
      /* Filling the branch delay slot is more complex.  We try to
	 switch the branch with the previous instruction, which we can
	 do if the previous instruction does not set up a condition
	 that the branch tests and if the branch is not itself the
	 target of any branch.  */
      if ((pinfo & INSN_UNCOND_BRANCH_DELAY)
	  || (pinfo & INSN_COND_BRANCH_DELAY))
	{
	  if (mips_optimize < 2
	      /* If we have seen .set volatile or .set nomove, don't
		 optimize.  */
	      || mips_opts.nomove != 0
	      /* If we had to emit any NOP instructions, then we
		 already know we can not swap.  */
	      || nops != 0
	      /* If we don't even know the previous insn, we can not
		 swap.  */
	      || ! prev_insn_valid
	      /* If the previous insn is already in a branch delay
		 slot, then we can not swap.  */
	      || prev_insn_is_delay_slot
	      /* If the previous previous insn was in a .set
		 noreorder, we can't swap.  Actually, the MIPS
		 assembler will swap in this situation.  However, gcc
		 configured -with-gnu-as will generate code like
		   .set noreorder
		   lw	$4,XXX
		   .set	reorder
		   INSN
		   bne	$4,$0,foo
		 in which we can not swap the bne and INSN.  If gcc is
		 not configured -with-gnu-as, it does not output the
		 .set pseudo-ops.  We don't have to check
		 prev_insn_unreordered, because prev_insn_valid will
		 be 0 in that case.  We don't want to use
		 prev_prev_insn_valid, because we do want to be able
		 to swap at the start of a function.  */
	      || prev_prev_insn_unreordered
	      /* If the branch is itself the target of a branch, we
		 can not swap.  We cheat on this; all we check for is
		 whether there is a label on this instruction.  If
		 there are any branches to anything other than a
		 label, users must use .set noreorder.  */
	      || insn_labels != NULL
	      /* If the previous instruction is in a variant frag
		 other than this branch's one, we cannot do the swap.
		 This does not apply to the mips16, which uses variant
		 frags for different purposes.  */
	      || (! mips_opts.mips16
		  && prev_insn_frag_type == rs_machine_dependent)
	      /* If the branch reads the condition codes, we don't
		 even try to swap, because in the sequence
		   ctc1 $X,$31
		   INSN
		   INSN
		   bc1t LABEL
		 we can not swap, and I don't feel like handling that
		 case.  */
	      || (! mips_opts.mips16
		  && (pinfo & INSN_READ_COND_CODE)
		  && ! cop_interlocks)
	      /* We can not swap with an instruction that requires a
		 delay slot, because the target of the branch might
		 interfere with that instruction.  */
	      || (! mips_opts.mips16
		  && (prev_pinfo
              /* Itbl support may require additional care here.  */
		      & (INSN_LOAD_COPROC_DELAY
			 | INSN_COPROC_MOVE_DELAY
			 | INSN_WRITE_COND_CODE))
		  && ! cop_interlocks)
	      || (! (hilo_interlocks
		     || (mips_opts.arch == CPU_R3900 && (pinfo & INSN_MULT)))
		  && (prev_pinfo
		      & (INSN_READ_LO
			 | INSN_READ_HI)))
	      || (! mips_opts.mips16
		  && (prev_pinfo & INSN_LOAD_MEMORY_DELAY)
		  && ! gpr_interlocks)
	      || (! mips_opts.mips16
                  /* Itbl support may require additional care here.  */
		  && (prev_pinfo & INSN_COPROC_MEMORY_DELAY)
		  && ! cop_mem_interlocks)
	      /* We can not swap with a branch instruction.  */
	      || (prev_pinfo
		  & (INSN_UNCOND_BRANCH_DELAY
		     | INSN_COND_BRANCH_DELAY
		     | INSN_COND_BRANCH_LIKELY))
	      /* We do not swap with a trap instruction, since it
		 complicates trap handlers to have the trap
		 instruction be in a delay slot.  */
	      || (prev_pinfo & INSN_TRAP)
	      /* If the branch reads a register that the previous
		 instruction sets, we can not swap.  */
	      || (! mips_opts.mips16
		  && (prev_pinfo & INSN_WRITE_GPR_T)
		  && insn_uses_reg (ip,
				    ((prev_insn.insn_opcode >> OP_SH_RT)
				     & OP_MASK_RT),
				    MIPS_GR_REG))
	      || (! mips_opts.mips16
		  && (prev_pinfo & INSN_WRITE_GPR_D)
		  && insn_uses_reg (ip,
				    ((prev_insn.insn_opcode >> OP_SH_RD)
				     & OP_MASK_RD),
				    MIPS_GR_REG))
	      || (mips_opts.mips16
		  && (((prev_pinfo & MIPS16_INSN_WRITE_X)
		       && insn_uses_reg (ip,
					 ((prev_insn.insn_opcode
					   >> MIPS16OP_SH_RX)
					  & MIPS16OP_MASK_RX),
					 MIPS16_REG))
		      || ((prev_pinfo & MIPS16_INSN_WRITE_Y)
			  && insn_uses_reg (ip,
					    ((prev_insn.insn_opcode
					      >> MIPS16OP_SH_RY)
					     & MIPS16OP_MASK_RY),
					    MIPS16_REG))
		      || ((prev_pinfo & MIPS16_INSN_WRITE_Z)
			  && insn_uses_reg (ip,
					    ((prev_insn.insn_opcode
					      >> MIPS16OP_SH_RZ)
					     & MIPS16OP_MASK_RZ),
					    MIPS16_REG))
		      || ((prev_pinfo & MIPS16_INSN_WRITE_T)
			  && insn_uses_reg (ip, TREG, MIPS_GR_REG))
		      || ((prev_pinfo & MIPS16_INSN_WRITE_31)
			  && insn_uses_reg (ip, RA, MIPS_GR_REG))
		      || ((prev_pinfo & MIPS16_INSN_WRITE_GPR_Y)
			  && insn_uses_reg (ip,
					    MIPS16OP_EXTRACT_REG32R (prev_insn.
								     insn_opcode),
					    MIPS_GR_REG))))
	      /* If the branch writes a register that the previous
		 instruction sets, we can not swap (we know that
		 branches write only to RD or to $31).  */
	      || (! mips_opts.mips16
		  && (prev_pinfo & INSN_WRITE_GPR_T)
		  && (((pinfo & INSN_WRITE_GPR_D)
		       && (((prev_insn.insn_opcode >> OP_SH_RT) & OP_MASK_RT)
			   == ((ip->insn_opcode >> OP_SH_RD) & OP_MASK_RD)))
		      || ((pinfo & INSN_WRITE_GPR_31)
			  && (((prev_insn.insn_opcode >> OP_SH_RT)
			       & OP_MASK_RT)
			      == RA))))
	      || (! mips_opts.mips16
		  && (prev_pinfo & INSN_WRITE_GPR_D)
		  && (((pinfo & INSN_WRITE_GPR_D)
		       && (((prev_insn.insn_opcode >> OP_SH_RD) & OP_MASK_RD)
			   == ((ip->insn_opcode >> OP_SH_RD) & OP_MASK_RD)))
		      || ((pinfo & INSN_WRITE_GPR_31)
			  && (((prev_insn.insn_opcode >> OP_SH_RD)
			       & OP_MASK_RD)
			      == RA))))
	      || (mips_opts.mips16
		  && (pinfo & MIPS16_INSN_WRITE_31)
		  && ((prev_pinfo & MIPS16_INSN_WRITE_31)
		      || ((prev_pinfo & MIPS16_INSN_WRITE_GPR_Y)
			  && (MIPS16OP_EXTRACT_REG32R (prev_insn.insn_opcode)
			      == RA))))
	      /* If the branch writes a register that the previous
		 instruction reads, we can not swap (we know that
		 branches only write to RD or to $31).  */
	      || (! mips_opts.mips16
		  && (pinfo & INSN_WRITE_GPR_D)
		  && insn_uses_reg (&prev_insn,
				    ((ip->insn_opcode >> OP_SH_RD)
				     & OP_MASK_RD),
				    MIPS_GR_REG))
	      || (! mips_opts.mips16
		  && (pinfo & INSN_WRITE_GPR_31)
		  && insn_uses_reg (&prev_insn, RA, MIPS_GR_REG))
	      || (mips_opts.mips16
		  && (pinfo & MIPS16_INSN_WRITE_31)
		  && insn_uses_reg (&prev_insn, RA, MIPS_GR_REG))
	      /* If we are generating embedded PIC code, the branch
		 might be expanded into a sequence which uses $at, so
		 we can't swap with an instruction which reads it.  */
	      || (mips_pic == EMBEDDED_PIC
		  && insn_uses_reg (&prev_insn, AT, MIPS_GR_REG))
	      /* If the previous previous instruction has a load
		 delay, and sets a register that the branch reads, we
		 can not swap.  */
	      || (! mips_opts.mips16
              /* Itbl support may require additional care here.  */
		  && (((prev_prev_insn.insn_mo->pinfo & INSN_LOAD_COPROC_DELAY)
		       && ! cop_interlocks)
		      || ((prev_prev_insn.insn_mo->pinfo
			   & INSN_LOAD_MEMORY_DELAY)
			  && ! gpr_interlocks))
		  && insn_uses_reg (ip,
				    ((prev_prev_insn.insn_opcode >> OP_SH_RT)
				     & OP_MASK_RT),
				    MIPS_GR_REG))
	      /* If one instruction sets a condition code and the
                 other one uses a condition code, we can not swap.  */
	      || ((pinfo & INSN_READ_COND_CODE)
		  && (prev_pinfo & INSN_WRITE_COND_CODE))
	      || ((pinfo & INSN_WRITE_COND_CODE)
		  && (prev_pinfo & INSN_READ_COND_CODE))
	      /* If the previous instruction uses the PC, we can not
                 swap.  */
	      || (mips_opts.mips16
		  && (prev_pinfo & MIPS16_INSN_READ_PC))
	      /* If the previous instruction was extended, we can not
                 swap.  */
	      || (mips_opts.mips16 && prev_insn_extended)
	      /* If the previous instruction had a fixup in mips16
                 mode, we can not swap.  This normally means that the
                 previous instruction was a 4 byte branch anyhow.  */
	      || (mips_opts.mips16 && prev_insn_fixp[0])
	      /* If the previous instruction is a sync, sync.l, or
		 sync.p, we can not swap.  */
	      || (prev_pinfo & INSN_SYNC))
	    {
	      /* We could do even better for unconditional branches to
		 portions of this object file; we could pick up the
		 instruction at the destination, put it in the delay
		 slot, and bump the destination address.  */
	      emit_nop ();
	      /* Update the previous insn information.  */
	      prev_prev_insn = *ip;
	      prev_insn.insn_mo = &dummy_opcode;
	    }
	  else
	    {
	      /* It looks like we can actually do the swap.  */
	      if (! mips_opts.mips16)
		{
		  char *prev_f;
		  char temp[4];

		  prev_f = prev_insn_frag->fr_literal + prev_insn_where;
		  if (!relaxed_branch)
		    {
		      /* If this is not a relaxed branch, then just
			 swap the instructions.  */
		      memcpy (temp, prev_f, 4);
		      memcpy (prev_f, f, 4);
		      memcpy (f, temp, 4);
		    }
		  else
		    {
		      /* If this is a relaxed branch, then we move the
			 instruction to be placed in the delay slot to
			 the current frag, shrinking the fixed part of
			 the originating frag.  If the branch occupies
			 the tail of the latter, we move it backwards,
			 into the space freed by the moved instruction.  */
		      f = frag_more (4);
		      memcpy (f, prev_f, 4);
		      prev_insn_frag->fr_fix -= 4;
		      if (prev_insn_frag->fr_type == rs_machine_dependent)
			memmove (prev_f, prev_f + 4, prev_insn_frag->fr_var);
		    }

		  if (prev_insn_fixp[0])
		    {
		      prev_insn_fixp[0]->fx_frag = frag_now;
		      prev_insn_fixp[0]->fx_where = f - frag_now->fr_literal;
		    }
		  if (prev_insn_fixp[1])
		    {
		      prev_insn_fixp[1]->fx_frag = frag_now;
		      prev_insn_fixp[1]->fx_where = f - frag_now->fr_literal;
		    }
		  if (prev_insn_fixp[2])
		    {
		      prev_insn_fixp[2]->fx_frag = frag_now;
		      prev_insn_fixp[2]->fx_where = f - frag_now->fr_literal;
		    }
		  if (prev_insn_fixp[0] && HAVE_NEWABI
		      && prev_insn_frag != frag_now
		      && (prev_insn_fixp[0]->fx_r_type
			  == BFD_RELOC_MIPS_GOT_DISP
			  || (prev_insn_fixp[0]->fx_r_type
			      == BFD_RELOC_MIPS_CALL16)))
		    {
		      /* To avoid confusion in tc_gen_reloc, we must
			 ensure that this does not become a variant
			 frag.  */
		      force_new_frag = TRUE;
		    }

		  if (!relaxed_branch)
		    {
		      if (fixp[0])
			{
			  fixp[0]->fx_frag = prev_insn_frag;
			  fixp[0]->fx_where = prev_insn_where;
			}
		      if (fixp[1])
			{
			  fixp[1]->fx_frag = prev_insn_frag;
			  fixp[1]->fx_where = prev_insn_where;
			}
		      if (fixp[2])
			{
			  fixp[2]->fx_frag = prev_insn_frag;
			  fixp[2]->fx_where = prev_insn_where;
			}
		    }
		  else if (prev_insn_frag->fr_type == rs_machine_dependent)
		    {
		      if (fixp[0])
			fixp[0]->fx_where -= 4;
		      if (fixp[1])
			fixp[1]->fx_where -= 4;
		      if (fixp[2])
			fixp[2]->fx_where -= 4;
		    }
		}
	      else
		{
		  char *prev_f;
		  char temp[2];

		  assert (prev_insn_fixp[0] == NULL);
		  assert (prev_insn_fixp[1] == NULL);
		  assert (prev_insn_fixp[2] == NULL);
		  prev_f = prev_insn_frag->fr_literal + prev_insn_where;
		  memcpy (temp, prev_f, 2);
		  memcpy (prev_f, f, 2);
		  if (*reloc_type != BFD_RELOC_MIPS16_JMP)
		    {
		      assert (*reloc_type == BFD_RELOC_UNUSED);
		      memcpy (f, temp, 2);
		    }
		  else
		    {
		      memcpy (f, f + 2, 2);
		      memcpy (f + 2, temp, 2);
		    }
		  if (fixp[0])
		    {
		      fixp[0]->fx_frag = prev_insn_frag;
		      fixp[0]->fx_where = prev_insn_where;
		    }
		  if (fixp[1])
		    {
		      fixp[1]->fx_frag = prev_insn_frag;
		      fixp[1]->fx_where = prev_insn_where;
		    }
		  if (fixp[2])
		    {
		      fixp[2]->fx_frag = prev_insn_frag;
		      fixp[2]->fx_where = prev_insn_where;
		    }
		}

	      /* Update the previous insn information; leave prev_insn
		 unchanged.  */
	      prev_prev_insn = *ip;
	    }
	  prev_insn_is_delay_slot = 1;

	  /* If that was an unconditional branch, forget the previous
	     insn information.  */
	  if (pinfo & INSN_UNCOND_BRANCH_DELAY)
	    {
	      prev_prev_insn.insn_mo = &dummy_opcode;
	      prev_insn.insn_mo = &dummy_opcode;
	    }

	  prev_insn_fixp[0] = NULL;
	  prev_insn_fixp[1] = NULL;
	  prev_insn_fixp[2] = NULL;
	  prev_insn_reloc_type[0] = BFD_RELOC_UNUSED;
	  prev_insn_reloc_type[1] = BFD_RELOC_UNUSED;
	  prev_insn_reloc_type[2] = BFD_RELOC_UNUSED;
	  prev_insn_extended = 0;
	}
      else if (pinfo & INSN_COND_BRANCH_LIKELY)
	{
	  /* We don't yet optimize a branch likely.  What we should do
	     is look at the target, copy the instruction found there
	     into the delay slot, and increment the branch to jump to
	     the next instruction.  */
	  emit_nop ();
	  /* Update the previous insn information.  */
	  prev_prev_insn = *ip;
	  prev_insn.insn_mo = &dummy_opcode;
	  prev_insn_fixp[0] = NULL;
	  prev_insn_fixp[1] = NULL;
	  prev_insn_fixp[2] = NULL;
	  prev_insn_reloc_type[0] = BFD_RELOC_UNUSED;
	  prev_insn_reloc_type[1] = BFD_RELOC_UNUSED;
	  prev_insn_reloc_type[2] = BFD_RELOC_UNUSED;
	  prev_insn_extended = 0;
	}
      else
	{
	  /* Update the previous insn information.  */
	  if (nops > 0)
	    prev_prev_insn.insn_mo = &dummy_opcode;
	  else
	    prev_prev_insn = prev_insn;
	  prev_insn = *ip;

	  /* Any time we see a branch, we always fill the delay slot
	     immediately; since this insn is not a branch, we know it
	     is not in a delay slot.  */
	  prev_insn_is_delay_slot = 0;

	  prev_insn_fixp[0] = fixp[0];
	  prev_insn_fixp[1] = fixp[1];
	  prev_insn_fixp[2] = fixp[2];
	  prev_insn_reloc_type[0] = reloc_type[0];
	  prev_insn_reloc_type[1] = reloc_type[1];
	  prev_insn_reloc_type[2] = reloc_type[2];
	  if (mips_opts.mips16)
	    prev_insn_extended = (ip->use_extend
				  || *reloc_type > BFD_RELOC_UNUSED);
	}

      prev_prev_insn_unreordered = prev_insn_unreordered;
      prev_insn_unreordered = 0;
      prev_insn_frag = frag_now;
      prev_insn_where = f - frag_now->fr_literal;
      prev_insn_valid = 1;
    }
  else if (mips_relax.sequence != 2)
    {
      /* We need to record a bit of information even when we are not
         reordering, in order to determine the base address for mips16
         PC relative relocs.  */
      prev_prev_insn = prev_insn;
      prev_insn = *ip;
      prev_insn_reloc_type[0] = reloc_type[0];
      prev_insn_reloc_type[1] = reloc_type[1];
      prev_insn_reloc_type[2] = reloc_type[2];
      prev_prev_insn_unreordered = prev_insn_unreordered;
      prev_insn_unreordered = 1;
    }

  /* We just output an insn, so the next one doesn't have a label.  */
  mips_clear_insn_labels ();
}

/* This function forgets that there was any previous instruction or
   label.  If PRESERVE is non-zero, it remembers enough information to
   know whether nops are needed before a noreorder section.  */

static void
mips_no_prev_insn (int preserve)
{
  if (! preserve)
    {
      prev_insn.insn_mo = &dummy_opcode;
      prev_prev_insn.insn_mo = &dummy_opcode;
      prev_nop_frag = NULL;
      prev_nop_frag_holds = 0;
      prev_nop_frag_required = 0;
      prev_nop_frag_since = 0;
    }
  prev_insn_valid = 0;
  prev_insn_is_delay_slot = 0;
  prev_insn_unreordered = 0;
  prev_insn_extended = 0;
  prev_insn_reloc_type[0] = BFD_RELOC_UNUSED;
  prev_insn_reloc_type[1] = BFD_RELOC_UNUSED;
  prev_insn_reloc_type[2] = BFD_RELOC_UNUSED;
  prev_prev_insn_unreordered = 0;
  mips_clear_insn_labels ();
}

/* This function must be called whenever we turn on noreorder or emit
   something other than instructions.  It inserts any NOPS which might
   be needed by the previous instruction, and clears the information
   kept for the previous instructions.  The INSNS parameter is true if
   instructions are to follow.  */

static void
mips_emit_delays (bfd_boolean insns)
{
  if (! mips_opts.noreorder)
    {
      int nops;

      nops = 0;
      if ((! mips_opts.mips16
	   && ((prev_insn.insn_mo->pinfo
		& (INSN_LOAD_COPROC_DELAY
		   | INSN_COPROC_MOVE_DELAY
		   | INSN_WRITE_COND_CODE))
	       && ! cop_interlocks))
	  || (! hilo_interlocks
	      && (prev_insn.insn_mo->pinfo
		  & (INSN_READ_LO
		     | INSN_READ_HI)))
	  || (! mips_opts.mips16
	      && (prev_insn.insn_mo->pinfo & INSN_LOAD_MEMORY_DELAY)
	      && ! gpr_interlocks)
	  || (! mips_opts.mips16
	      && (prev_insn.insn_mo->pinfo & INSN_COPROC_MEMORY_DELAY)
	      && ! cop_mem_interlocks))
	{
	  /* Itbl support may require additional care here.  */
	  ++nops;
	  if ((! mips_opts.mips16
	       && ((prev_insn.insn_mo->pinfo & INSN_WRITE_COND_CODE)
		   && ! cop_interlocks))
	      || (! hilo_interlocks
		  && ((prev_insn.insn_mo->pinfo & INSN_READ_HI)
		      || (prev_insn.insn_mo->pinfo & INSN_READ_LO))))
	    ++nops;

	  if (prev_insn_unreordered)
	    nops = 0;
	}
      else if ((! mips_opts.mips16
		&& ((prev_prev_insn.insn_mo->pinfo & INSN_WRITE_COND_CODE)
		    && ! cop_interlocks))
	       || (! hilo_interlocks
		   && ((prev_prev_insn.insn_mo->pinfo & INSN_READ_HI)
		       || (prev_prev_insn.insn_mo->pinfo & INSN_READ_LO))))
	{
	  /* Itbl support may require additional care here.  */
	  if (! prev_prev_insn_unreordered)
	    ++nops;
	}

      if (mips_fix_vr4120 && prev_insn.insn_mo->name)
	{
	  int min_nops = 0;
	  const char *pn = prev_insn.insn_mo->name;
	  if (strncmp(pn, "macc", 4) == 0
	      || strncmp(pn, "dmacc", 5) == 0
	      || strncmp(pn, "dmult", 5) == 0)
	    {
	      min_nops = 1;
	    }
	  if (nops < min_nops)
	    nops = min_nops;
	}

      if (nops > 0)
	{
	  struct insn_label_list *l;

	  if (insns)
	    {
	      /* Record the frag which holds the nop instructions, so
                 that we can remove them if we don't need them.  */
	      frag_grow (mips_opts.mips16 ? nops * 2 : nops * 4);
	      prev_nop_frag = frag_now;
	      prev_nop_frag_holds = nops;
	      prev_nop_frag_required = 0;
	      prev_nop_frag_since = 0;
	    }

	  for (; nops > 0; --nops)
	    emit_nop ();

	  if (insns)
	    {
	      /* Move on to a new frag, so that it is safe to simply
                 decrease the size of prev_nop_frag.  */
	      frag_wane (frag_now);
	      frag_new (0);
	    }

	  for (l = insn_labels; l != NULL; l = l->next)
	    {
	      valueT val;

	      assert (S_GET_SEGMENT (l->label) == now_seg);
	      symbol_set_frag (l->label, frag_now);
	      val = (valueT) frag_now_fix ();
	      /* mips16 text labels are stored as odd.  */
	      if (mips_opts.mips16)
		++val;
	      S_SET_VALUE (l->label, val);
	    }
	}
    }

  /* Mark instruction labels in mips16 mode.  */
  if (insns)
    mips16_mark_labels ();

  mips_no_prev_insn (insns);
}

/* Set up global variables for the start of a new macro.  */

static void
macro_start (void)
{
  memset (&mips_macro_warning.sizes, 0, sizeof (mips_macro_warning.sizes));
  mips_macro_warning.delay_slot_p = (mips_opts.noreorder
				     && (prev_insn.insn_mo->pinfo
					 & (INSN_UNCOND_BRANCH_DELAY
					    | INSN_COND_BRANCH_DELAY
					    | INSN_COND_BRANCH_LIKELY)) != 0);
}

/* Given that a macro is longer than 4 bytes, return the appropriate warning
   for it.  Return null if no warning is needed.  SUBTYPE is a bitmask of
   RELAX_DELAY_SLOT and RELAX_NOMACRO.  */

static const char *
macro_warning (relax_substateT subtype)
{
  if (subtype & RELAX_DELAY_SLOT)
    return _("Macro instruction expanded into multiple instructions"
	     " in a branch delay slot");
  else if (subtype & RELAX_NOMACRO)
    return _("Macro instruction expanded into multiple instructions");
  else
    return 0;
}

/* Finish up a macro.  Emit warnings as appropriate.  */

static void
macro_end (void)
{
  if (mips_macro_warning.sizes[0] > 4 || mips_macro_warning.sizes[1] > 4)
    {
      relax_substateT subtype;

      /* Set up the relaxation warning flags.  */
      subtype = 0;
      if (mips_macro_warning.sizes[1] > mips_macro_warning.sizes[0])
	subtype |= RELAX_SECOND_LONGER;
      if (mips_opts.warn_about_macros)
	subtype |= RELAX_NOMACRO;
      if (mips_macro_warning.delay_slot_p)
	subtype |= RELAX_DELAY_SLOT;

      if (mips_macro_warning.sizes[0] > 4 && mips_macro_warning.sizes[1] > 4)
	{
	  /* Either the macro has a single implementation or both
	     implementations are longer than 4 bytes.  Emit the
	     warning now.  */
	  const char *msg = macro_warning (subtype);
	  if (msg != 0)
	    as_warn (msg);
	}
      else
	{
	  /* One implementation might need a warning but the other
	     definitely doesn't.  */
	  mips_macro_warning.first_frag->fr_subtype |= subtype;
	}
    }
}

/* Fix jump through register issue on loongson2f processor for kernel code:
   force a BTB clear before the jump to prevent it from being incorrectly
   prefetched by the branch prediction engine. */

static void
macro_build_jrpatch (expressionS *ep, unsigned int sreg)
{
  if (!mips_fix_loongson2f_btb)
    return;

  if (sreg == ZERO || sreg == KT0 || sreg == KT1 || sreg == AT)
    return;

  if (mips_opts.noat)
    {
      as_warn (_("unable to apply loongson2f BTB workaround when .set noat"));
      return;
    }

  /* li $at, COP_0_BTB_CLEAR | COP_0_RAS_DISABLE */
  ep->X_op = O_constant;
  ep->X_add_number = 3;
  macro_build (ep, "ori", "t,r,i", AT, ZERO, BFD_RELOC_LO16);

  /* dmtc0 $at, COP_0_DIAG */
  macro_build (NULL, "dmtc0", "t,G", AT, 22);

  /* Hide these two instructions to avoid getting a ``macro expanded into
     multiple instructions'' warning. */
  if (mips_relax.sequence != 2)
    mips_macro_warning.sizes[0] -= 2 * 4;
  if (mips_relax.sequence != 1)
    mips_macro_warning.sizes[1] -= 2 * 4;
}

/* Build an instruction created by a macro expansion.  This is passed
   a pointer to the count of instructions created so far, an
   expression, the name of the instruction to build, an operand format
   string, and corresponding arguments.  */

static void
macro_build (expressionS *ep, const char *name, const char *fmt, ...)
{
  struct mips_cl_insn insn;
  bfd_reloc_code_real_type r[3];
  va_list args;

  va_start (args, fmt);

  if (mips_opts.mips16)
    {
      mips16_macro_build (ep, name, fmt, args);
      va_end (args);
      return;
    }

  r[0] = BFD_RELOC_UNUSED;
  r[1] = BFD_RELOC_UNUSED;
  r[2] = BFD_RELOC_UNUSED;
  insn.insn_mo = (struct mips_opcode *) hash_find (op_hash, name);
  assert (insn.insn_mo);
  assert (strcmp (name, insn.insn_mo->name) == 0);

  /* Search until we get a match for NAME.  */
  while (1)
    {
      /* It is assumed here that macros will never generate
         MDMX or MIPS-3D instructions.  */
      if (strcmp (fmt, insn.insn_mo->args) == 0
	  && insn.insn_mo->pinfo != INSN_MACRO
  	  && OPCODE_IS_MEMBER (insn.insn_mo,
  			       (mips_opts.isa
	      		        | (file_ase_mips16 ? INSN_MIPS16 : 0)),
			       mips_opts.arch)
	  && (mips_opts.arch != CPU_R4650 || (insn.insn_mo->pinfo & FP_D) == 0))
	break;

      ++insn.insn_mo;
      assert (insn.insn_mo->name);
      assert (strcmp (name, insn.insn_mo->name) == 0);
    }

  insn.insn_opcode = insn.insn_mo->match;
  for (;;)
    {
      switch (*fmt++)
	{
	case '\0':
	  break;

	case ',':
	case '(':
	case ')':
	  continue;

	case '+':
	  switch (*fmt++)
	    {
	    case 'A':
	    case 'E':
	      insn.insn_opcode |= (va_arg (args, int)
				   & OP_MASK_SHAMT) << OP_SH_SHAMT;
	      continue;

	    case 'B':
	    case 'F':
	      /* Note that in the macro case, these arguments are already
		 in MSB form.  (When handling the instruction in the
		 non-macro case, these arguments are sizes from which
		 MSB values must be calculated.)  */
	      insn.insn_opcode |= (va_arg (args, int)
				   & OP_MASK_INSMSB) << OP_SH_INSMSB;
	      continue;

	    case 'C':
	    case 'G':
	    case 'H':
	      /* Note that in the macro case, these arguments are already
		 in MSBD form.  (When handling the instruction in the
		 non-macro case, these arguments are sizes from which
		 MSBD values must be calculated.)  */
	      insn.insn_opcode |= (va_arg (args, int)
				   & OP_MASK_EXTMSBD) << OP_SH_EXTMSBD;
	      continue;

	    default:
	      internalError ();
	    }
	  continue;

	case 't':
	case 'w':
	case 'E':
	  insn.insn_opcode |= va_arg (args, int) << OP_SH_RT;
	  continue;

	case 'c':
	  insn.insn_opcode |= va_arg (args, int) << OP_SH_CODE;
	  continue;

	case 'T':
	case 'W':
	  insn.insn_opcode |= va_arg (args, int) << OP_SH_FT;
	  continue;

	case 'd':
	case 'G':
	case 'K':
	  insn.insn_opcode |= va_arg (args, int) << OP_SH_RD;
	  continue;

	case 'U':
	  {
	    int tmp = va_arg (args, int);

	    insn.insn_opcode |= tmp << OP_SH_RT;
	    insn.insn_opcode |= tmp << OP_SH_RD;
	    continue;
	  }

	case 'V':
	case 'S':
	  insn.insn_opcode |= va_arg (args, int) << OP_SH_FS;
	  continue;

	case 'z':
	  continue;

	case '<':
	  insn.insn_opcode |= va_arg (args, int) << OP_SH_SHAMT;
	  continue;

	case 'D':
	  insn.insn_opcode |= va_arg (args, int) << OP_SH_FD;
	  continue;

	case 'B':
	  insn.insn_opcode |= va_arg (args, int) << OP_SH_CODE20;
	  continue;

	case 'J':
	  insn.insn_opcode |= va_arg (args, int) << OP_SH_CODE19;
	  continue;

	case 'q':
	  insn.insn_opcode |= va_arg (args, int) << OP_SH_CODE2;
	  continue;

	case 'b':
	case 's':
	case 'r':
	case 'v':
	  insn.insn_opcode |= va_arg (args, int) << OP_SH_RS;
	  continue;

	case 'i':
	case 'j':
	case 'o':
	  *r = (bfd_reloc_code_real_type) va_arg (args, int);
	  assert (*r == BFD_RELOC_GPREL16
		  || *r == BFD_RELOC_MIPS_LITERAL
		  || *r == BFD_RELOC_MIPS_HIGHER
		  || *r == BFD_RELOC_HI16_S
		  || *r == BFD_RELOC_LO16
		  || *r == BFD_RELOC_MIPS_GOT16
		  || *r == BFD_RELOC_MIPS_CALL16
		  || *r == BFD_RELOC_MIPS_GOT_DISP
		  || *r == BFD_RELOC_MIPS_GOT_PAGE
		  || *r == BFD_RELOC_MIPS_GOT_OFST
		  || *r == BFD_RELOC_MIPS_GOT_LO16
		  || *r == BFD_RELOC_MIPS_CALL_LO16
		  || (ep->X_op == O_subtract
		      && *r == BFD_RELOC_PCREL_LO16));
	  continue;

	case 'u':
	  *r = (bfd_reloc_code_real_type) va_arg (args, int);
	  assert (ep != NULL
		  && (ep->X_op == O_constant
		      || (ep->X_op == O_symbol
			  && (*r == BFD_RELOC_MIPS_HIGHEST
			      || *r == BFD_RELOC_HI16_S
			      || *r == BFD_RELOC_HI16
			      || *r == BFD_RELOC_GPREL16
			      || *r == BFD_RELOC_MIPS_GOT_HI16
			      || *r == BFD_RELOC_MIPS_CALL_HI16))
		      || (ep->X_op == O_subtract
			  && *r == BFD_RELOC_PCREL_HI16_S)));
	  continue;

	case 'p':
	  assert (ep != NULL);
	  /*
	   * This allows macro() to pass an immediate expression for
	   * creating short branches without creating a symbol.
	   * Note that the expression still might come from the assembly
	   * input, in which case the value is not checked for range nor
	   * is a relocation entry generated (yuck).
	   */
	  if (ep->X_op == O_constant)
	    {
	      insn.insn_opcode |= (ep->X_add_number >> 2) & 0xffff;
	      ep = NULL;
	    }
	  else
	    *r = BFD_RELOC_16_PCREL_S2;
	  continue;

	case 'a':
	  assert (ep != NULL);
	  *r = BFD_RELOC_MIPS_JMP;
	  continue;

	case 'C':
	  insn.insn_opcode |= va_arg (args, unsigned long);
	  continue;

	default:
	  internalError ();
	}
      break;
    }
  va_end (args);
  assert (*r == BFD_RELOC_UNUSED ? ep == NULL : ep != NULL);

  append_insn (&insn, ep, r);
}

static void
mips16_macro_build (expressionS *ep, const char *name, const char *fmt,
		    va_list args)
{
  struct mips_cl_insn insn;
  bfd_reloc_code_real_type r[3]
    = {BFD_RELOC_UNUSED, BFD_RELOC_UNUSED, BFD_RELOC_UNUSED};

  insn.insn_mo = (struct mips_opcode *) hash_find (mips16_op_hash, name);
  assert (insn.insn_mo);
  assert (strcmp (name, insn.insn_mo->name) == 0);

  while (strcmp (fmt, insn.insn_mo->args) != 0
	 || insn.insn_mo->pinfo == INSN_MACRO)
    {
      ++insn.insn_mo;
      assert (insn.insn_mo->name);
      assert (strcmp (name, insn.insn_mo->name) == 0);
    }

  insn.insn_opcode = insn.insn_mo->match;
  insn.use_extend = FALSE;

  for (;;)
    {
      int c;

      c = *fmt++;
      switch (c)
	{
	case '\0':
	  break;

	case ',':
	case '(':
	case ')':
	  continue;

	case 'y':
	case 'w':
	  insn.insn_opcode |= va_arg (args, int) << MIPS16OP_SH_RY;
	  continue;

	case 'x':
	case 'v':
	  insn.insn_opcode |= va_arg (args, int) << MIPS16OP_SH_RX;
	  continue;

	case 'z':
	  insn.insn_opcode |= va_arg (args, int) << MIPS16OP_SH_RZ;
	  continue;

	case 'Z':
	  insn.insn_opcode |= va_arg (args, int) << MIPS16OP_SH_MOVE32Z;
	  continue;

	case '0':
	case 'S':
	case 'P':
	case 'R':
	  continue;

	case 'X':
	  insn.insn_opcode |= va_arg (args, int) << MIPS16OP_SH_REGR32;
	  continue;

	case 'Y':
	  {
	    int regno;

	    regno = va_arg (args, int);
	    regno = ((regno & 7) << 2) | ((regno & 0x18) >> 3);
	    insn.insn_opcode |= regno << MIPS16OP_SH_REG32R;
	  }
	  continue;

	case '<':
	case '>':
	case '4':
	case '5':
	case 'H':
	case 'W':
	case 'D':
	case 'j':
	case '8':
	case 'V':
	case 'C':
	case 'U':
	case 'k':
	case 'K':
	case 'p':
	case 'q':
	  {
	    assert (ep != NULL);

	    if (ep->X_op != O_constant)
	      *r = (int) BFD_RELOC_UNUSED + c;
	    else
	      {
		mips16_immed (NULL, 0, c, ep->X_add_number, FALSE, FALSE,
			      FALSE, &insn.insn_opcode, &insn.use_extend,
			      &insn.extend);
		ep = NULL;
		*r = BFD_RELOC_UNUSED;
	      }
	  }
	  continue;

	case '6':
	  insn.insn_opcode |= va_arg (args, int) << MIPS16OP_SH_IMM6;
	  continue;
	}

      break;
    }

  assert (*r == BFD_RELOC_UNUSED ? ep == NULL : ep != NULL);

  append_insn (&insn, ep, r);
}

/*
 * Generate a "jalr" instruction with a relocation hint to the called
 * function.  This occurs in NewABI PIC code.
 */
static void
macro_build_jalr (expressionS *ep)
{
  char *f = NULL;

  if (HAVE_NEWABI)
    {
      frag_grow (8);
      f = frag_more (0);
    }
  macro_build_jrpatch (ep, PIC_CALL_REG);
  macro_build (NULL, "jalr", "d,s", RA, PIC_CALL_REG);
  if (HAVE_NEWABI)
    fix_new_exp (frag_now, f - frag_now->fr_literal,
		 4, ep, FALSE, BFD_RELOC_MIPS_JALR);
}

/*
 * Generate a "lui" instruction.
 */
static void
macro_build_lui (expressionS *ep, int regnum)
{
  expressionS high_expr;
  struct mips_cl_insn insn;
  bfd_reloc_code_real_type r[3]
    = {BFD_RELOC_UNUSED, BFD_RELOC_UNUSED, BFD_RELOC_UNUSED};
  const char *name = "lui";
  const char *fmt = "t,u";

  assert (! mips_opts.mips16);

  high_expr = *ep;

  if (high_expr.X_op == O_constant)
    {
      /* we can compute the instruction now without a relocation entry */
      high_expr.X_add_number = ((high_expr.X_add_number + 0x8000)
				>> 16) & 0xffff;
      *r = BFD_RELOC_UNUSED;
    }
  else
    {
      assert (ep->X_op == O_symbol);
      /* _gp_disp is a special case, used from s_cpload.  */
      assert (mips_pic == NO_PIC
	      || (! HAVE_NEWABI
		  && strcmp (S_GET_NAME (ep->X_add_symbol), "_gp_disp") == 0));
      *r = BFD_RELOC_HI16_S;
    }

  insn.insn_mo = (struct mips_opcode *) hash_find (op_hash, name);
  assert (insn.insn_mo);
  assert (strcmp (name, insn.insn_mo->name) == 0);
  assert (strcmp (fmt, insn.insn_mo->args) == 0);

  insn.insn_opcode = insn.insn_mo->match | (regnum << OP_SH_RT);
  if (*r == BFD_RELOC_UNUSED)
    {
      insn.insn_opcode |= high_expr.X_add_number;
      append_insn (&insn, NULL, r);
    }
  else
    append_insn (&insn, &high_expr, r);
}

/* Generate a sequence of instructions to do a load or store from a constant
   offset off of a base register (breg) into/from a target register (treg),
   using AT if necessary.  */
static void
macro_build_ldst_constoffset (expressionS *ep, const char *op,
			      int treg, int breg, int dbl)
{
  assert (ep->X_op == O_constant);

  /* Sign-extending 32-bit constants makes their handling easier.  */
  if (! dbl && ! ((ep->X_add_number & ~((bfd_vma) 0x7fffffff))
		  == ~((bfd_vma) 0x7fffffff)))
    {
      if (ep->X_add_number & ~((bfd_vma) 0xffffffff))
	as_bad (_("constant too large"));

      ep->X_add_number = (((ep->X_add_number & 0xffffffff) ^ 0x80000000)
			  - 0x80000000);
    }

  /* Right now, this routine can only handle signed 32-bit constants.  */
  if (! IS_SEXT_32BIT_NUM(ep->X_add_number + 0x8000))
    as_warn (_("operand overflow"));

  if (IS_SEXT_16BIT_NUM(ep->X_add_number))
    {
      /* Signed 16-bit offset will fit in the op.  Easy!  */
      macro_build (ep, op, "t,o(b)", treg, BFD_RELOC_LO16, breg);
    }
  else
    {
      /* 32-bit offset, need multiple instructions and AT, like:
	   lui      $tempreg,const_hi       (BFD_RELOC_HI16_S)
	   addu     $tempreg,$tempreg,$breg
           <op>     $treg,const_lo($tempreg)   (BFD_RELOC_LO16)
         to handle the complete offset.  */
      macro_build_lui (ep, AT);
      macro_build (NULL, ADDRESS_ADD_INSN, "d,v,t", AT, AT, breg);
      macro_build (ep, op, "t,o(b)", treg, BFD_RELOC_LO16, AT);

      if (mips_opts.noat)
	as_warn (_("Macro used $at after \".set noat\""));
    }
}

/*			set_at()
 * Generates code to set the $at register to true (one)
 * if reg is less than the immediate expression.
 */
static void
set_at (int reg, int unsignedp)
{
  if (imm_expr.X_op == O_constant
      && imm_expr.X_add_number >= -0x8000
      && imm_expr.X_add_number < 0x8000)
    macro_build (&imm_expr, unsignedp ? "sltiu" : "slti", "t,r,j",
		 AT, reg, BFD_RELOC_LO16);
  else
    {
      load_register (AT, &imm_expr, HAVE_64BIT_GPRS);
      macro_build (NULL, unsignedp ? "sltu" : "slt", "d,v,t", AT, reg, AT);
    }
}

static void
normalize_constant_expr (expressionS *ex)
{
  if (ex->X_op == O_constant && HAVE_32BIT_GPRS)
    ex->X_add_number = (((ex->X_add_number & 0xffffffff) ^ 0x80000000)
			- 0x80000000);
}

/* Warn if an expression is not a constant.  */

static void
check_absolute_expr (struct mips_cl_insn *ip, expressionS *ex)
{
  if (ex->X_op == O_big)
    as_bad (_("unsupported large constant"));
  else if (ex->X_op != O_constant)
    as_bad (_("Instruction %s requires absolute expression"), ip->insn_mo->name);

  normalize_constant_expr (ex);
}

/* Count the leading zeroes by performing a binary chop. This is a
   bulky bit of source, but performance is a LOT better for the
   majority of values than a simple loop to count the bits:
       for (lcnt = 0; (lcnt < 32); lcnt++)
         if ((v) & (1 << (31 - lcnt)))
           break;
  However it is not code size friendly, and the gain will drop a bit
  on certain cached systems.
*/
#define COUNT_TOP_ZEROES(v)             \
  (((v) & ~0xffff) == 0                 \
   ? ((v) & ~0xff) == 0                 \
     ? ((v) & ~0xf) == 0                \
       ? ((v) & ~0x3) == 0              \
         ? ((v) & ~0x1) == 0            \
           ? !(v)                       \
             ? 32                       \
             : 31                       \
           : 30                         \
         : ((v) & ~0x7) == 0            \
           ? 29                         \
           : 28                         \
       : ((v) & ~0x3f) == 0             \
         ? ((v) & ~0x1f) == 0           \
           ? 27                         \
           : 26                         \
         : ((v) & ~0x7f) == 0           \
           ? 25                         \
           : 24                         \
     : ((v) & ~0xfff) == 0              \
       ? ((v) & ~0x3ff) == 0            \
         ? ((v) & ~0x1ff) == 0          \
           ? 23                         \
           : 22                         \
         : ((v) & ~0x7ff) == 0          \
           ? 21                         \
           : 20                         \
       : ((v) & ~0x3fff) == 0           \
         ? ((v) & ~0x1fff) == 0         \
           ? 19                         \
           : 18                         \
         : ((v) & ~0x7fff) == 0         \
           ? 17                         \
           : 16                         \
   : ((v) & ~0xffffff) == 0             \
     ? ((v) & ~0xfffff) == 0            \
       ? ((v) & ~0x3ffff) == 0          \
         ? ((v) & ~0x1ffff) == 0        \
           ? 15                         \
           : 14                         \
         : ((v) & ~0x7ffff) == 0        \
           ? 13                         \
           : 12                         \
       : ((v) & ~0x3fffff) == 0         \
         ? ((v) & ~0x1fffff) == 0       \
           ? 11                         \
           : 10                         \
         : ((v) & ~0x7fffff) == 0       \
           ? 9                          \
           : 8                          \
     : ((v) & ~0xfffffff) == 0          \
       ? ((v) & ~0x3ffffff) == 0        \
         ? ((v) & ~0x1ffffff) == 0      \
           ? 7                          \
           : 6                          \
         : ((v) & ~0x7ffffff) == 0      \
           ? 5                          \
           : 4                          \
       : ((v) & ~0x3fffffff) == 0       \
         ? ((v) & ~0x1fffffff) == 0     \
           ? 3                          \
           : 2                          \
         : ((v) & ~0x7fffffff) == 0     \
           ? 1                          \
           : 0)

/*			load_register()
 *  This routine generates the least number of instructions necessary to load
 *  an absolute expression value into a register.
 */
static void
load_register (int reg, expressionS *ep, int dbl)
{
  int freg;
  expressionS hi32, lo32;

  if (ep->X_op != O_big)
    {
      assert (ep->X_op == O_constant);

      /* Sign-extending 32-bit constants makes their handling easier.  */
      if (! dbl && ! ((ep->X_add_number & ~((bfd_vma) 0x7fffffff))
		      == ~((bfd_vma) 0x7fffffff)))
	{
	  if (ep->X_add_number & ~((bfd_vma) 0xffffffff))
	    as_bad (_("constant too large"));

	  ep->X_add_number = (((ep->X_add_number & 0xffffffff) ^ 0x80000000)
			      - 0x80000000);
	}

      if (IS_SEXT_16BIT_NUM (ep->X_add_number))
	{
	  /* We can handle 16 bit signed values with an addiu to
	     $zero.  No need to ever use daddiu here, since $zero and
	     the result are always correct in 32 bit mode.  */
	  macro_build (ep, "addiu", "t,r,j", reg, 0, BFD_RELOC_LO16);
	  return;
	}
      else if (ep->X_add_number >= 0 && ep->X_add_number < 0x10000)
	{
	  /* We can handle 16 bit unsigned values with an ori to
             $zero.  */
	  macro_build (ep, "ori", "t,r,i", reg, 0, BFD_RELOC_LO16);
	  return;
	}
      else if ((IS_SEXT_32BIT_NUM (ep->X_add_number)))
	{
	  /* 32 bit values require an lui.  */
	  macro_build (ep, "lui", "t,u", reg, BFD_RELOC_HI16);
	  if ((ep->X_add_number & 0xffff) != 0)
	    macro_build (ep, "ori", "t,r,i", reg, reg, BFD_RELOC_LO16);
	  return;
	}
    }

  /* The value is larger than 32 bits.  */

  if (HAVE_32BIT_GPRS)
    {
      as_bad (_("Number (0x%lx) larger than 32 bits"),
	      (unsigned long) ep->X_add_number);
      macro_build (ep, "addiu", "t,r,j", reg, 0, BFD_RELOC_LO16);
      return;
    }

  if (ep->X_op != O_big)
    {
      hi32 = *ep;
      hi32.X_add_number = (valueT) hi32.X_add_number >> 16;
      hi32.X_add_number = (valueT) hi32.X_add_number >> 16;
      hi32.X_add_number &= 0xffffffff;
      lo32 = *ep;
      lo32.X_add_number &= 0xffffffff;
    }
  else
    {
      assert (ep->X_add_number > 2);
      if (ep->X_add_number == 3)
	generic_bignum[3] = 0;
      else if (ep->X_add_number > 4)
	as_bad (_("Number larger than 64 bits"));
      lo32.X_op = O_constant;
      lo32.X_add_number = generic_bignum[0] + (generic_bignum[1] << 16);
      hi32.X_op = O_constant;
      hi32.X_add_number = generic_bignum[2] + (generic_bignum[3] << 16);
    }

  if (hi32.X_add_number == 0)
    freg = 0;
  else
    {
      int shift, bit;
      unsigned long hi, lo;

      if (hi32.X_add_number == (offsetT) 0xffffffff)
	{
	  if ((lo32.X_add_number & 0xffff8000) == 0xffff8000)
	    {
	      macro_build (&lo32, "addiu", "t,r,j", reg, 0, BFD_RELOC_LO16);
	      return;
	    }
	  if (lo32.X_add_number & 0x80000000)
	    {
	      macro_build (&lo32, "lui", "t,u", reg, BFD_RELOC_HI16);
	      if (lo32.X_add_number & 0xffff)
		macro_build (&lo32, "ori", "t,r,i", reg, reg, BFD_RELOC_LO16);
	      return;
	    }
	}

      /* Check for 16bit shifted constant.  We know that hi32 is
         non-zero, so start the mask on the first bit of the hi32
         value.  */
      shift = 17;
      do
	{
	  unsigned long himask, lomask;

	  if (shift < 32)
	    {
	      himask = 0xffff >> (32 - shift);
	      lomask = (0xffff << shift) & 0xffffffff;
	    }
	  else
	    {
	      himask = 0xffff << (shift - 32);
	      lomask = 0;
	    }
	  if ((hi32.X_add_number & ~(offsetT) himask) == 0
	      && (lo32.X_add_number & ~(offsetT) lomask) == 0)
	    {
	      expressionS tmp;

	      tmp.X_op = O_constant;
	      if (shift < 32)
		tmp.X_add_number = ((hi32.X_add_number << (32 - shift))
				    | (lo32.X_add_number >> shift));
	      else
		tmp.X_add_number = hi32.X_add_number >> (shift - 32);
	      macro_build (&tmp, "ori", "t,r,i", reg, 0, BFD_RELOC_LO16);
	      macro_build (NULL, (shift >= 32) ? "dsll32" : "dsll", "d,w,<",
			   reg, reg, (shift >= 32) ? shift - 32 : shift);
	      return;
	    }
	  ++shift;
	}
      while (shift <= (64 - 16));

      /* Find the bit number of the lowest one bit, and store the
         shifted value in hi/lo.  */
      hi = (unsigned long) (hi32.X_add_number & 0xffffffff);
      lo = (unsigned long) (lo32.X_add_number & 0xffffffff);
      if (lo != 0)
	{
	  bit = 0;
	  while ((lo & 1) == 0)
	    {
	      lo >>= 1;
	      ++bit;
	    }
	  lo |= (hi & (((unsigned long) 1 << bit) - 1)) << (32 - bit);
	  hi >>= bit;
	}
      else
	{
	  bit = 32;
	  while ((hi & 1) == 0)
	    {
	      hi >>= 1;
	      ++bit;
	    }
	  lo = hi;
	  hi = 0;
	}

      /* Optimize if the shifted value is a (power of 2) - 1.  */
      if ((hi == 0 && ((lo + 1) & lo) == 0)
	  || (lo == 0xffffffff && ((hi + 1) & hi) == 0))
	{
	  shift = COUNT_TOP_ZEROES ((unsigned int) hi32.X_add_number);
	  if (shift != 0)
	    {
	      expressionS tmp;

	      /* This instruction will set the register to be all
                 ones.  */
	      tmp.X_op = O_constant;
	      tmp.X_add_number = (offsetT) -1;
	      macro_build (&tmp, "addiu", "t,r,j", reg, 0, BFD_RELOC_LO16);
	      if (bit != 0)
		{
		  bit += shift;
		  macro_build (NULL, (bit >= 32) ? "dsll32" : "dsll", "d,w,<",
			       reg, reg, (bit >= 32) ? bit - 32 : bit);
		}
	      macro_build (NULL, (shift >= 32) ? "dsrl32" : "dsrl", "d,w,<",
			   reg, reg, (shift >= 32) ? shift - 32 : shift);
	      return;
	    }
	}

      /* Sign extend hi32 before calling load_register, because we can
         generally get better code when we load a sign extended value.  */
      if ((hi32.X_add_number & 0x80000000) != 0)
	hi32.X_add_number |= ~(offsetT) 0xffffffff;
      load_register (reg, &hi32, 0);
      freg = reg;
    }
  if ((lo32.X_add_number & 0xffff0000) == 0)
    {
      if (freg != 0)
	{
	  macro_build (NULL, "dsll32", "d,w,<", reg, freg, 0);
	  freg = reg;
	}
    }
  else
    {
      expressionS mid16;

      if ((freg == 0) && (lo32.X_add_number == (offsetT) 0xffffffff))
	{
	  macro_build (&lo32, "lui", "t,u", reg, BFD_RELOC_HI16);
	  macro_build (NULL, "dsrl32", "d,w,<", reg, reg, 0);
	  return;
	}

      if (freg != 0)
	{
	  macro_build (NULL, "dsll", "d,w,<", reg, freg, 16);
	  freg = reg;
	}
      mid16 = lo32;
      mid16.X_add_number >>= 16;
      macro_build (&mid16, "ori", "t,r,i", reg, freg, BFD_RELOC_LO16);
      macro_build (NULL, "dsll", "d,w,<", reg, reg, 16);
      freg = reg;
    }
  if ((lo32.X_add_number & 0xffff) != 0)
    macro_build (&lo32, "ori", "t,r,i", reg, freg, BFD_RELOC_LO16);
}

/* Load an address into a register.  */

static void
load_address (int reg, expressionS *ep, int *used_at)
{
  if (ep->X_op != O_constant
      && ep->X_op != O_symbol)
    {
      as_bad (_("expression too complex"));
      ep->X_op = O_constant;
    }

  if (ep->X_op == O_constant)
    {
      load_register (reg, ep, HAVE_64BIT_ADDRESSES);
      return;
    }

  if (mips_pic == NO_PIC)
    {
      /* If this is a reference to a GP relative symbol, we want
	   addiu	$reg,$gp,<sym>		(BFD_RELOC_GPREL16)
	 Otherwise we want
	   lui		$reg,<sym>		(BFD_RELOC_HI16_S)
	   addiu	$reg,$reg,<sym>		(BFD_RELOC_LO16)
	 If we have an addend, we always use the latter form.

	 With 64bit address space and a usable $at we want
	   lui		$reg,<sym>		(BFD_RELOC_MIPS_HIGHEST)
	   lui		$at,<sym>		(BFD_RELOC_HI16_S)
	   daddiu	$reg,<sym>		(BFD_RELOC_MIPS_HIGHER)
	   daddiu	$at,<sym>		(BFD_RELOC_LO16)
	   dsll32	$reg,0
	   daddu	$reg,$reg,$at

	 If $at is already in use, we use a path which is suboptimal
	 on superscalar processors.
	   lui		$reg,<sym>		(BFD_RELOC_MIPS_HIGHEST)
	   daddiu	$reg,<sym>		(BFD_RELOC_MIPS_HIGHER)
	   dsll		$reg,16
	   daddiu	$reg,<sym>		(BFD_RELOC_HI16_S)
	   dsll		$reg,16
	   daddiu	$reg,<sym>		(BFD_RELOC_LO16)
       */
      if (HAVE_64BIT_ADDRESSES)
	{
	  /* ??? We don't provide a GP-relative alternative for these macros.
	     It used not to be possible with the original relaxation code,
	     but it could be done now.  */

	  if (*used_at == 0 && ! mips_opts.noat)
	    {
	      macro_build (ep, "lui", "t,u", reg, BFD_RELOC_MIPS_HIGHEST);
	      macro_build (ep, "lui", "t,u", AT, BFD_RELOC_HI16_S);
	      macro_build (ep, "daddiu", "t,r,j", reg, reg,
			   BFD_RELOC_MIPS_HIGHER);
	      macro_build (ep, "daddiu", "t,r,j", AT, AT, BFD_RELOC_LO16);
	      macro_build (NULL, "dsll32", "d,w,<", reg, reg, 0);
	      macro_build (NULL, "daddu", "d,v,t", reg, reg, AT);
	      *used_at = 1;
	    }
	  else
	    {
	      macro_build (ep, "lui", "t,u", reg, BFD_RELOC_MIPS_HIGHEST);
	      macro_build (ep, "daddiu", "t,r,j", reg, reg,
			   BFD_RELOC_MIPS_HIGHER);
	      macro_build (NULL, "dsll", "d,w,<", reg, reg, 16);
	      macro_build (ep, "daddiu", "t,r,j", reg, reg, BFD_RELOC_HI16_S);
	      macro_build (NULL, "dsll", "d,w,<", reg, reg, 16);
	      macro_build (ep, "daddiu", "t,r,j", reg, reg, BFD_RELOC_LO16);
	    }
	}
      else
	{
	  if ((valueT) ep->X_add_number <= MAX_GPREL_OFFSET
	      && ! nopic_need_relax (ep->X_add_symbol, 1))
	    {
	      relax_start (ep->X_add_symbol);
	      macro_build (ep, ADDRESS_ADDI_INSN, "t,r,j", reg,
			   mips_gp_register, BFD_RELOC_GPREL16);
	      relax_switch ();
	    }
	  macro_build_lui (ep, reg);
	  macro_build (ep, ADDRESS_ADDI_INSN, "t,r,j",
		       reg, reg, BFD_RELOC_LO16);
	  if (mips_relax.sequence)
	    relax_end ();
	}
    }
  else if (mips_pic == SVR4_PIC && ! mips_big_got)
    {
      expressionS ex;

      /* If this is a reference to an external symbol, we want
	   lw		$reg,<sym>($gp)		(BFD_RELOC_MIPS_GOT16)
	 Otherwise we want
	   lw		$reg,<sym>($gp)		(BFD_RELOC_MIPS_GOT16)
	   nop
	   addiu	$reg,$reg,<sym>		(BFD_RELOC_LO16)
	 If there is a constant, it must be added in after.

	 If we have NewABI, we want
	   lw		$reg,<sym+cst>($gp)	(BFD_RELOC_MIPS_GOT_DISP)
         unless we're referencing a global symbol with a non-zero
         offset, in which case cst must be added separately.  */
      if (HAVE_NEWABI)
	{
	  if (ep->X_add_number)
	    {
	      ex.X_add_number = ep->X_add_number;
	      ep->X_add_number = 0;
	      relax_start (ep->X_add_symbol);
	      macro_build (ep, ADDRESS_LOAD_INSN, "t,o(b)", reg,
			   BFD_RELOC_MIPS_GOT_DISP, mips_gp_register);
	      if (ex.X_add_number < -0x8000 || ex.X_add_number >= 0x8000)
		as_bad (_("PIC code offset overflow (max 16 signed bits)"));
	      ex.X_op = O_constant;
	      macro_build (&ex, ADDRESS_ADDI_INSN, "t,r,j",
			   reg, reg, BFD_RELOC_LO16);
	      ep->X_add_number = ex.X_add_number;
	      relax_switch ();
	    }
	  macro_build (ep, ADDRESS_LOAD_INSN, "t,o(b)", reg,
		       BFD_RELOC_MIPS_GOT_DISP, mips_gp_register);
	  if (mips_relax.sequence)
	    relax_end ();
	}
      else
	{
	  ex.X_add_number = ep->X_add_number;
	  ep->X_add_number = 0;
	  macro_build (ep, ADDRESS_LOAD_INSN, "t,o(b)", reg,
		       BFD_RELOC_MIPS_GOT16, mips_gp_register);
	  macro_build (NULL, "nop", "");
	  relax_start (ep->X_add_symbol);
	  relax_switch ();
	  macro_build (ep, ADDRESS_ADDI_INSN, "t,r,j", reg, reg,
		       BFD_RELOC_LO16);
	  relax_end ();

	  if (ex.X_add_number != 0)
	    {
	      if (ex.X_add_number < -0x8000 || ex.X_add_number >= 0x8000)
		as_bad (_("PIC code offset overflow (max 16 signed bits)"));
	      ex.X_op = O_constant;
	      macro_build (&ex, ADDRESS_ADDI_INSN, "t,r,j",
			   reg, reg, BFD_RELOC_LO16);
	    }
	}
    }
  else if (mips_pic == SVR4_PIC)
    {
      expressionS ex;

      /* This is the large GOT case.  If this is a reference to an
	 external symbol, we want
	   lui		$reg,<sym>		(BFD_RELOC_MIPS_GOT_HI16)
	   addu		$reg,$reg,$gp
	   lw		$reg,<sym>($reg)	(BFD_RELOC_MIPS_GOT_LO16)

	 Otherwise, for a reference to a local symbol in old ABI, we want
	   lw		$reg,<sym>($gp)		(BFD_RELOC_MIPS_GOT16)
	   nop
	   addiu	$reg,$reg,<sym>		(BFD_RELOC_LO16)
	 If there is a constant, it must be added in after.

	 In the NewABI, for local symbols, with or without offsets, we want:
	   lw		$reg,<sym>($gp)		(BFD_RELOC_MIPS_GOT_PAGE)
	   addiu	$reg,$reg,<sym>		(BFD_RELOC_MIPS_GOT_OFST)
      */
      if (HAVE_NEWABI)
	{
	  ex.X_add_number = ep->X_add_number;
	  ep->X_add_number = 0;
	  relax_start (ep->X_add_symbol);
	  macro_build (ep, "lui", "t,u", reg, BFD_RELOC_MIPS_GOT_HI16);
	  macro_build (NULL, ADDRESS_ADD_INSN, "d,v,t",
		       reg, reg, mips_gp_register);
	  macro_build (ep, ADDRESS_LOAD_INSN, "t,o(b)",
		       reg, BFD_RELOC_MIPS_GOT_LO16, reg);
	  if (ex.X_add_number < -0x8000 || ex.X_add_number >= 0x8000)
	    as_bad (_("PIC code offset overflow (max 16 signed bits)"));
	  else if (ex.X_add_number)
	    {
	      ex.X_op = O_constant;
	      macro_build (&ex, ADDRESS_ADDI_INSN, "t,r,j", reg, reg,
			   BFD_RELOC_LO16);
	    }

	  ep->X_add_number = ex.X_add_number;
	  relax_switch ();
	  macro_build (ep, ADDRESS_LOAD_INSN, "t,o(b)", reg,
		       BFD_RELOC_MIPS_GOT_PAGE, mips_gp_register);
	  macro_build (ep, ADDRESS_ADDI_INSN, "t,r,j", reg, reg,
		       BFD_RELOC_MIPS_GOT_OFST);
	  relax_end ();
	}
      else
	{
	  ex.X_add_number = ep->X_add_number;
	  ep->X_add_number = 0;
	  relax_start (ep->X_add_symbol);
	  macro_build (ep, "lui", "t,u", reg, BFD_RELOC_MIPS_GOT_HI16);
	  macro_build (NULL, ADDRESS_ADD_INSN, "d,v,t",
		       reg, reg, mips_gp_register);
	  macro_build (ep, ADDRESS_LOAD_INSN, "t,o(b)",
		       reg, BFD_RELOC_MIPS_GOT_LO16, reg);
	  relax_switch ();
	  if (reg_needs_delay (mips_gp_register))
	    {
	      /* We need a nop before loading from $gp.  This special
		 check is required because the lui which starts the main
		 instruction stream does not refer to $gp, and so will not
		 insert the nop which may be required.  */
	      macro_build (NULL, "nop", "");
	    }
	  macro_build (ep, ADDRESS_LOAD_INSN, "t,o(b)", reg,
		       BFD_RELOC_MIPS_GOT16, mips_gp_register);
	  macro_build (NULL, "nop", "");
	  macro_build (ep, ADDRESS_ADDI_INSN, "t,r,j", reg, reg,
		       BFD_RELOC_LO16);
	  relax_end ();

	  if (ex.X_add_number != 0)
	    {
	      if (ex.X_add_number < -0x8000 || ex.X_add_number >= 0x8000)
		as_bad (_("PIC code offset overflow (max 16 signed bits)"));
	      ex.X_op = O_constant;
	      macro_build (&ex, ADDRESS_ADDI_INSN, "t,r,j", reg, reg,
			   BFD_RELOC_LO16);
	    }
	}
    }
  else if (mips_pic == EMBEDDED_PIC)
    {
      /* We always do
	   addiu	$reg,$gp,<sym>		(BFD_RELOC_GPREL16)
       */
      macro_build (ep, ADDRESS_ADDI_INSN, "t,r,j",
		   reg, mips_gp_register, BFD_RELOC_GPREL16);
    }
  else
    abort ();
}

/* Move the contents of register SOURCE into register DEST.  */

static void
move_register (int dest, int source)
{
  macro_build (NULL, HAVE_32BIT_GPRS ? "addu" : "daddu", "d,v,t",
	       dest, source, 0);
}

/* Emit an SVR4 PIC sequence to load address LOCAL into DEST, where
   LOCAL is the sum of a symbol and a 16-bit or 32-bit displacement.
   The two alternatives are:

   Global symbol		Local sybmol
   -------------		------------
   lw DEST,%got(SYMBOL)		lw DEST,%got(SYMBOL + OFFSET)
   ...				...
   addiu DEST,DEST,OFFSET	addiu DEST,DEST,%lo(SYMBOL + OFFSET)

   load_got_offset emits the first instruction and add_got_offset
   emits the second for a 16-bit offset or add_got_offset_hilo emits
   a sequence to add a 32-bit offset using a scratch register.  */

static void
load_got_offset (int dest, expressionS *local)
{
  expressionS global;

  global = *local;
  global.X_add_number = 0;

  relax_start (local->X_add_symbol);
  macro_build (&global, ADDRESS_LOAD_INSN, "t,o(b)", dest,
	       BFD_RELOC_MIPS_GOT16, mips_gp_register);
  relax_switch ();
  macro_build (local, ADDRESS_LOAD_INSN, "t,o(b)", dest,
	       BFD_RELOC_MIPS_GOT16, mips_gp_register);
  relax_end ();
}

static void
add_got_offset (int dest, expressionS *local)
{
  expressionS global;

  global.X_op = O_constant;
  global.X_op_symbol = NULL;
  global.X_add_symbol = NULL;
  global.X_add_number = local->X_add_number;

  relax_start (local->X_add_symbol);
  macro_build (&global, ADDRESS_ADDI_INSN, "t,r,j",
	       dest, dest, BFD_RELOC_LO16);
  relax_switch ();
  macro_build (local, ADDRESS_ADDI_INSN, "t,r,j", dest, dest, BFD_RELOC_LO16);
  relax_end ();
}

static void
add_got_offset_hilo (int dest, expressionS *local, int tmp)
{
  expressionS global;
  int hold_mips_optimize;

  global.X_op = O_constant;
  global.X_op_symbol = NULL;
  global.X_add_symbol = NULL;
  global.X_add_number = local->X_add_number;

  relax_start (local->X_add_symbol);
  load_register (tmp, &global, HAVE_64BIT_ADDRESSES);
  relax_switch ();
  /* Set mips_optimize around the lui instruction to avoid
     inserting an unnecessary nop after the lw.  */
  hold_mips_optimize = mips_optimize;
  mips_optimize = 2;
  macro_build_lui (&global, tmp);
  mips_optimize = hold_mips_optimize;
  macro_build (local, ADDRESS_ADDI_INSN, "t,r,j", tmp, tmp, BFD_RELOC_LO16);
  relax_end ();

  macro_build (NULL, ADDRESS_ADD_INSN, "d,v,t", dest, dest, tmp);
}

/*
 *			Build macros
 *   This routine implements the seemingly endless macro or synthesized
 * instructions and addressing modes in the mips assembly language. Many
 * of these macros are simple and are similar to each other. These could
 * probably be handled by some kind of table or grammar approach instead of
 * this verbose method. Others are not simple macros but are more like
 * optimizing code generation.
 *   One interesting optimization is when several store macros appear
 * consecutively that would load AT with the upper half of the same address.
 * The ensuing load upper instructions are ommited. This implies some kind
 * of global optimization. We currently only optimize within a single macro.
 *   For many of the load and store macros if the address is specified as a
 * constant expression in the first 64k of memory (ie ld $2,0x4000c) we
 * first load register 'at' with zero and use it as the base register. The
 * mips assembler simply uses register $zero. Just one tiny optimization
 * we're missing.
 */
static void
macro (struct mips_cl_insn *ip)
{
  register int treg, sreg, dreg, breg;
  int tempreg;
  int mask;
  int used_at = 0;
  expressionS expr1;
  const char *s;
  const char *s2;
  const char *fmt;
  int likely = 0;
  int dbl = 0;
  int coproc = 0;
  int lr = 0;
  int imm = 0;
  int call = 0;
  int off;
  offsetT maxnum;
  bfd_reloc_code_real_type r;
  int hold_mips_optimize;

  assert (! mips_opts.mips16);

  treg = (ip->insn_opcode >> 16) & 0x1f;
  dreg = (ip->insn_opcode >> 11) & 0x1f;
  sreg = breg = (ip->insn_opcode >> 21) & 0x1f;
  mask = ip->insn_mo->mask;

  expr1.X_op = O_constant;
  expr1.X_op_symbol = NULL;
  expr1.X_add_symbol = NULL;
  expr1.X_add_number = 1;

  switch (mask)
    {
    case M_DABS:
      dbl = 1;
    case M_ABS:
      /* bgez $a0,.+12
	 move v0,$a0
	 sub v0,$zero,$a0
	 */

      mips_emit_delays (TRUE);
      ++mips_opts.noreorder;
      mips_any_noreorder = 1;

      expr1.X_add_number = 8;
      macro_build (&expr1, "bgez", "s,p", sreg);
      if (dreg == sreg)
	macro_build (NULL, "nop", "", 0);
      else
	move_register (dreg, sreg);
      macro_build (NULL, dbl ? "dsub" : "sub", "d,v,t", dreg, 0, sreg);

      --mips_opts.noreorder;
      return;

    case M_ADD_I:
      s = "addi";
      s2 = "add";
      goto do_addi;
    case M_ADDU_I:
      s = "addiu";
      s2 = "addu";
      goto do_addi;
    case M_DADD_I:
      dbl = 1;
      s = "daddi";
      s2 = "dadd";
      goto do_addi;
    case M_DADDU_I:
      dbl = 1;
      s = "daddiu";
      s2 = "daddu";
    do_addi:
      if (imm_expr.X_op == O_constant
	  && imm_expr.X_add_number >= -0x8000
	  && imm_expr.X_add_number < 0x8000)
	{
	  macro_build (&imm_expr, s, "t,r,j", treg, sreg, BFD_RELOC_LO16);
	  return;
	}
      load_register (AT, &imm_expr, dbl);
      macro_build (NULL, s2, "d,v,t", treg, sreg, AT);
      break;

    case M_AND_I:
      s = "andi";
      s2 = "and";
      goto do_bit;
    case M_OR_I:
      s = "ori";
      s2 = "or";
      goto do_bit;
    case M_NOR_I:
      s = "";
      s2 = "nor";
      goto do_bit;
    case M_XOR_I:
      s = "xori";
      s2 = "xor";
    do_bit:
      if (imm_expr.X_op == O_constant
	  && imm_expr.X_add_number >= 0
	  && imm_expr.X_add_number < 0x10000)
	{
	  if (mask != M_NOR_I)
	    macro_build (&imm_expr, s, "t,r,i", treg, sreg, BFD_RELOC_LO16);
	  else
	    {
	      macro_build (&imm_expr, "ori", "t,r,i",
			   treg, sreg, BFD_RELOC_LO16);
	      macro_build (NULL, "nor", "d,v,t", treg, treg, 0);
	    }
	  return;
	}

      load_register (AT, &imm_expr, HAVE_64BIT_GPRS);
      macro_build (NULL, s2, "d,v,t", treg, sreg, AT);
      break;

    case M_BEQ_I:
      s = "beq";
      goto beq_i;
    case M_BEQL_I:
      s = "beql";
      likely = 1;
      goto beq_i;
    case M_BNE_I:
      s = "bne";
      goto beq_i;
    case M_BNEL_I:
      s = "bnel";
      likely = 1;
    beq_i:
      if (imm_expr.X_op == O_constant && imm_expr.X_add_number == 0)
	{
	  macro_build (&offset_expr, s, "s,t,p", sreg, 0);
	  return;
	}
      load_register (AT, &imm_expr, HAVE_64BIT_GPRS);
      macro_build (&offset_expr, s, "s,t,p", sreg, AT);
      break;

    case M_BGEL:
      likely = 1;
    case M_BGE:
      if (treg == 0)
	{
	  macro_build (&offset_expr, likely ? "bgezl" : "bgez", "s,p", sreg);
	  return;
	}
      if (sreg == 0)
	{
	  macro_build (&offset_expr, likely ? "blezl" : "blez", "s,p", treg);
	  return;
	}
      macro_build (NULL, "slt", "d,v,t", AT, sreg, treg);
      macro_build (&offset_expr, likely ? "beql" : "beq", "s,t,p", AT, 0);
      break;

    case M_BGTL_I:
      likely = 1;
    case M_BGT_I:
      /* check for > max integer */
      maxnum = 0x7fffffff;
      if (HAVE_64BIT_GPRS && sizeof (maxnum) > 4)
	{
	  maxnum <<= 16;
	  maxnum |= 0xffff;
	  maxnum <<= 16;
	  maxnum |= 0xffff;
	}
      if (imm_expr.X_op == O_constant
	  && imm_expr.X_add_number >= maxnum
	  && (HAVE_32BIT_GPRS || sizeof (maxnum) > 4))
	{
	do_false:
	  /* result is always false */
	  if (! likely)
	    macro_build (NULL, "nop", "", 0);
	  else
	    macro_build (&offset_expr, "bnel", "s,t,p", 0, 0);
	  return;
	}
      if (imm_expr.X_op != O_constant)
	as_bad (_("Unsupported large constant"));
      ++imm_expr.X_add_number;
      /* FALLTHROUGH */
    case M_BGE_I:
    case M_BGEL_I:
      if (mask == M_BGEL_I)
	likely = 1;
      if (imm_expr.X_op == O_constant && imm_expr.X_add_number == 0)
	{
	  macro_build (&offset_expr, likely ? "bgezl" : "bgez", "s,p", sreg);
	  return;
	}
      if (imm_expr.X_op == O_constant && imm_expr.X_add_number == 1)
	{
	  macro_build (&offset_expr, likely ? "bgtzl" : "bgtz", "s,p", sreg);
	  return;
	}
      maxnum = 0x7fffffff;
      if (HAVE_64BIT_GPRS && sizeof (maxnum) > 4)
	{
	  maxnum <<= 16;
	  maxnum |= 0xffff;
	  maxnum <<= 16;
	  maxnum |= 0xffff;
	}
      maxnum = - maxnum - 1;
      if (imm_expr.X_op == O_constant
	  && imm_expr.X_add_number <= maxnum
	  && (HAVE_32BIT_GPRS || sizeof (maxnum) > 4))
	{
	do_true:
	  /* result is always true */
	  as_warn (_("Branch %s is always true"), ip->insn_mo->name);
	  macro_build (&offset_expr, "b", "p");
	  return;
	}
      set_at (sreg, 0);
      macro_build (&offset_expr, likely ? "beql" : "beq", "s,t,p", AT, 0);
      break;

    case M_BGEUL:
      likely = 1;
    case M_BGEU:
      if (treg == 0)
	goto do_true;
      if (sreg == 0)
	{
	  macro_build (&offset_expr, likely ? "beql" : "beq",
		       "s,t,p", 0, treg);
	  return;
	}
      macro_build (NULL, "sltu", "d,v,t", AT, sreg, treg);
      macro_build (&offset_expr, likely ? "beql" : "beq", "s,t,p", AT, 0);
      break;

    case M_BGTUL_I:
      likely = 1;
    case M_BGTU_I:
      if (sreg == 0
	  || (HAVE_32BIT_GPRS
	      && imm_expr.X_op == O_constant
	      && imm_expr.X_add_number == (offsetT) 0xffffffff))
	goto do_false;
      if (imm_expr.X_op != O_constant)
	as_bad (_("Unsupported large constant"));
      ++imm_expr.X_add_number;
      /* FALLTHROUGH */
    case M_BGEU_I:
    case M_BGEUL_I:
      if (mask == M_BGEUL_I)
	likely = 1;
      if (imm_expr.X_op == O_constant && imm_expr.X_add_number == 0)
	goto do_true;
      if (imm_expr.X_op == O_constant && imm_expr.X_add_number == 1)
	{
	  macro_build (&offset_expr, likely ? "bnel" : "bne",
		       "s,t,p", sreg, 0);
	  return;
	}
      set_at (sreg, 1);
      macro_build (&offset_expr, likely ? "beql" : "beq", "s,t,p", AT, 0);
      break;

    case M_BGTL:
      likely = 1;
    case M_BGT:
      if (treg == 0)
	{
	  macro_build (&offset_expr, likely ? "bgtzl" : "bgtz", "s,p", sreg);
	  return;
	}
      if (sreg == 0)
	{
	  macro_build (&offset_expr, likely ? "bltzl" : "bltz", "s,p", treg);
	  return;
	}
      macro_build (NULL, "slt", "d,v,t", AT, treg, sreg);
      macro_build (&offset_expr, likely ? "bnel" : "bne", "s,t,p", AT, 0);
      break;

    case M_BGTUL:
      likely = 1;
    case M_BGTU:
      if (treg == 0)
	{
	  macro_build (&offset_expr, likely ? "bnel" : "bne",
		       "s,t,p", sreg, 0);
	  return;
	}
      if (sreg == 0)
	goto do_false;
      macro_build (NULL, "sltu", "d,v,t", AT, treg, sreg);
      macro_build (&offset_expr, likely ? "bnel" : "bne", "s,t,p", AT, 0);
      break;

    case M_BLEL:
      likely = 1;
    case M_BLE:
      if (treg == 0)
	{
	  macro_build (&offset_expr, likely ? "blezl" : "blez", "s,p", sreg);
	  return;
	}
      if (sreg == 0)
	{
	  macro_build (&offset_expr, likely ? "bgezl" : "bgez", "s,p", treg);
	  return;
	}
      macro_build (NULL, "slt", "d,v,t", AT, treg, sreg);
      macro_build (&offset_expr, likely ? "beql" : "beq", "s,t,p", AT, 0);
      break;

    case M_BLEL_I:
      likely = 1;
    case M_BLE_I:
      maxnum = 0x7fffffff;
      if (HAVE_64BIT_GPRS && sizeof (maxnum) > 4)
	{
	  maxnum <<= 16;
	  maxnum |= 0xffff;
	  maxnum <<= 16;
	  maxnum |= 0xffff;
	}
      if (imm_expr.X_op == O_constant
	  && imm_expr.X_add_number >= maxnum
	  && (HAVE_32BIT_GPRS || sizeof (maxnum) > 4))
	goto do_true;
      if (imm_expr.X_op != O_constant)
	as_bad (_("Unsupported large constant"));
      ++imm_expr.X_add_number;
      /* FALLTHROUGH */
    case M_BLT_I:
    case M_BLTL_I:
      if (mask == M_BLTL_I)
	likely = 1;
      if (imm_expr.X_op == O_constant && imm_expr.X_add_number == 0)
	{
	  macro_build (&offset_expr, likely ? "bltzl" : "bltz", "s,p", sreg);
	  return;
	}
      if (imm_expr.X_op == O_constant && imm_expr.X_add_number == 1)
	{
	  macro_build (&offset_expr, likely ? "blezl" : "blez", "s,p", sreg);
	  return;
	}
      set_at (sreg, 0);
      macro_build (&offset_expr, likely ? "bnel" : "bne", "s,t,p", AT, 0);
      break;

    case M_BLEUL:
      likely = 1;
    case M_BLEU:
      if (treg == 0)
	{
	  macro_build (&offset_expr, likely ? "beql" : "beq",
		       "s,t,p", sreg, 0);
	  return;
	}
      if (sreg == 0)
	goto do_true;
      macro_build (NULL, "sltu", "d,v,t", AT, treg, sreg);
      macro_build (&offset_expr, likely ? "beql" : "beq", "s,t,p", AT, 0);
      break;

    case M_BLEUL_I:
      likely = 1;
    case M_BLEU_I:
      if (sreg == 0
	  || (HAVE_32BIT_GPRS
	      && imm_expr.X_op == O_constant
	      && imm_expr.X_add_number == (offsetT) 0xffffffff))
	goto do_true;
      if (imm_expr.X_op != O_constant)
	as_bad (_("Unsupported large constant"));
      ++imm_expr.X_add_number;
      /* FALLTHROUGH */
    case M_BLTU_I:
    case M_BLTUL_I:
      if (mask == M_BLTUL_I)
	likely = 1;
      if (imm_expr.X_op == O_constant && imm_expr.X_add_number == 0)
	goto do_false;
      if (imm_expr.X_op == O_constant && imm_expr.X_add_number == 1)
	{
	  macro_build (&offset_expr, likely ? "beql" : "beq",
		       "s,t,p", sreg, 0);
	  return;
	}
      set_at (sreg, 1);
      macro_build (&offset_expr, likely ? "bnel" : "bne", "s,t,p", AT, 0);
      break;

    case M_BLTL:
      likely = 1;
    case M_BLT:
      if (treg == 0)
	{
	  macro_build (&offset_expr, likely ? "bltzl" : "bltz", "s,p", sreg);
	  return;
	}
      if (sreg == 0)
	{
	  macro_build (&offset_expr, likely ? "bgtzl" : "bgtz", "s,p", treg);
	  return;
	}
      macro_build (NULL, "slt", "d,v,t", AT, sreg, treg);
      macro_build (&offset_expr, likely ? "bnel" : "bne", "s,t,p", AT, 0);
      break;

    case M_BLTUL:
      likely = 1;
    case M_BLTU:
      if (treg == 0)
	goto do_false;
      if (sreg == 0)
	{
	  macro_build (&offset_expr, likely ? "bnel" : "bne",
		       "s,t,p", 0, treg);
	  return;
	}
      macro_build (NULL, "sltu", "d,v,t", AT, sreg, treg);
      macro_build (&offset_expr, likely ? "bnel" : "bne", "s,t,p", AT, 0);
      break;

    case M_DEXT:
      {
	unsigned long pos;
	unsigned long size;

        if (imm_expr.X_op != O_constant || imm2_expr.X_op != O_constant)
	  {
	    as_bad (_("Unsupported large constant"));
	    pos = size = 1;
	  }
	else
	  {
	    pos = (unsigned long) imm_expr.X_add_number;
	    size = (unsigned long) imm2_expr.X_add_number;
	  }

	if (pos > 63)
	  {
	    as_bad (_("Improper position (%lu)"), pos);
	    pos = 1;
	  }
        if (size == 0 || size > 64
	    || (pos + size - 1) > 63)
	  {
	    as_bad (_("Improper extract size (%lu, position %lu)"),
		    size, pos);
	    size = 1;
	  }

	if (size <= 32 && pos < 32)
	  {
	    s = "dext";
	    fmt = "t,r,+A,+C";
	  }
	else if (size <= 32)
	  {
	    s = "dextu";
	    fmt = "t,r,+E,+H";
	  }
	else
	  {
	    s = "dextm";
	    fmt = "t,r,+A,+G";
	  }
	macro_build ((expressionS *) NULL, s, fmt, treg, sreg, pos, size - 1);
      }
      return;

    case M_DINS:
      {
	unsigned long pos;
	unsigned long size;

        if (imm_expr.X_op != O_constant || imm2_expr.X_op != O_constant)
	  {
	    as_bad (_("Unsupported large constant"));
	    pos = size = 1;
	  }
	else
	  {
	    pos = (unsigned long) imm_expr.X_add_number;
	    size = (unsigned long) imm2_expr.X_add_number;
	  }

	if (pos > 63)
	  {
	    as_bad (_("Improper position (%lu)"), pos);
	    pos = 1;
	  }
        if (size == 0 || size > 64
	    || (pos + size - 1) > 63)
	  {
	    as_bad (_("Improper insert size (%lu, position %lu)"),
		    size, pos);
	    size = 1;
	  }

	if (pos < 32 && (pos + size - 1) < 32)
	  {
	    s = "dins";
	    fmt = "t,r,+A,+B";
	  }
	else if (pos >= 32)
	  {
	    s = "dinsu";
	    fmt = "t,r,+E,+F";
	  }
	else
	  {
	    s = "dinsm";
	    fmt = "t,r,+A,+F";
	  }
	macro_build ((expressionS *) NULL, s, fmt, treg, sreg, pos,
		     pos + size - 1);
      }
      return;

    case M_DDIV_3:
      dbl = 1;
    case M_DIV_3:
      s = "mflo";
      goto do_div3;
    case M_DREM_3:
      dbl = 1;
    case M_REM_3:
      s = "mfhi";
    do_div3:
      if (treg == 0)
	{
	  as_warn (_("Divide by zero."));
	  if (mips_trap)
	    macro_build (NULL, "teq", "s,t,q", 0, 0, 7);
	  else
	    macro_build (NULL, "break", "c", 7);
	  return;
	}

      mips_emit_delays (TRUE);
      ++mips_opts.noreorder;
      mips_any_noreorder = 1;
      if (mips_trap)
	{
	  macro_build (NULL, "teq", "s,t,q", treg, 0, 7);
	  macro_build (NULL, dbl ? "ddiv" : "div", "z,s,t", sreg, treg);
	}
      else
	{
	  expr1.X_add_number = 8;
	  macro_build (&expr1, "bne", "s,t,p", treg, 0);
	  macro_build (NULL, dbl ? "ddiv" : "div", "z,s,t", sreg, treg);
	  macro_build (NULL, "break", "c", 7);
	}
      expr1.X_add_number = -1;
      load_register (AT, &expr1, dbl);
      expr1.X_add_number = mips_trap ? (dbl ? 12 : 8) : (dbl ? 20 : 16);
      macro_build (&expr1, "bne", "s,t,p", treg, AT);
      if (dbl)
	{
	  expr1.X_add_number = 1;
	  load_register (AT, &expr1, dbl);
	  macro_build (NULL, "dsll32", "d,w,<", AT, AT, 31);
	}
      else
	{
	  expr1.X_add_number = 0x80000000;
	  macro_build (&expr1, "lui", "t,u", AT, BFD_RELOC_HI16);
	}
      if (mips_trap)
	{
	  macro_build (NULL, "teq", "s,t,q", sreg, AT, 6);
	  /* We want to close the noreorder block as soon as possible, so
	     that later insns are available for delay slot filling.  */
	  --mips_opts.noreorder;
	}
      else
	{
	  expr1.X_add_number = 8;
	  macro_build (&expr1, "bne", "s,t,p", sreg, AT);
	  macro_build (NULL, "nop", "", 0);

	  /* We want to close the noreorder block as soon as possible, so
	     that later insns are available for delay slot filling.  */
	  --mips_opts.noreorder;

	  macro_build (NULL, "break", "c", 6);
	}
      macro_build (NULL, s, "d", dreg);
      break;

    case M_DIV_3I:
      s = "div";
      s2 = "mflo";
      goto do_divi;
    case M_DIVU_3I:
      s = "divu";
      s2 = "mflo";
      goto do_divi;
    case M_REM_3I:
      s = "div";
      s2 = "mfhi";
      goto do_divi;
    case M_REMU_3I:
      s = "divu";
      s2 = "mfhi";
      goto do_divi;
    case M_DDIV_3I:
      dbl = 1;
      s = "ddiv";
      s2 = "mflo";
      goto do_divi;
    case M_DDIVU_3I:
      dbl = 1;
      s = "ddivu";
      s2 = "mflo";
      goto do_divi;
    case M_DREM_3I:
      dbl = 1;
      s = "ddiv";
      s2 = "mfhi";
      goto do_divi;
    case M_DREMU_3I:
      dbl = 1;
      s = "ddivu";
      s2 = "mfhi";
    do_divi:
      if (imm_expr.X_op == O_constant && imm_expr.X_add_number == 0)
	{
	  as_warn (_("Divide by zero."));
	  if (mips_trap)
	    macro_build (NULL, "teq", "s,t,q", 0, 0, 7);
	  else
	    macro_build (NULL, "break", "c", 7);
	  return;
	}
      if (imm_expr.X_op == O_constant && imm_expr.X_add_number == 1)
	{
	  if (strcmp (s2, "mflo") == 0)
	    move_register (dreg, sreg);
	  else
	    move_register (dreg, 0);
	  return;
	}
      if (imm_expr.X_op == O_constant
	  && imm_expr.X_add_number == -1
	  && s[strlen (s) - 1] != 'u')
	{
	  if (strcmp (s2, "mflo") == 0)
	    {
	      macro_build (NULL, dbl ? "dneg" : "neg", "d,w", dreg, sreg);
	    }
	  else
	    move_register (dreg, 0);
	  return;
	}

      load_register (AT, &imm_expr, dbl);
      macro_build (NULL, s, "z,s,t", sreg, AT);
      macro_build (NULL, s2, "d", dreg);
      break;

    case M_DIVU_3:
      s = "divu";
      s2 = "mflo";
      goto do_divu3;
    case M_REMU_3:
      s = "divu";
      s2 = "mfhi";
      goto do_divu3;
    case M_DDIVU_3:
      s = "ddivu";
      s2 = "mflo";
      goto do_divu3;
    case M_DREMU_3:
      s = "ddivu";
      s2 = "mfhi";
    do_divu3:
      mips_emit_delays (TRUE);
      ++mips_opts.noreorder;
      mips_any_noreorder = 1;
      if (mips_trap)
	{
	  macro_build (NULL, "teq", "s,t,q", treg, 0, 7);
	  macro_build (NULL, s, "z,s,t", sreg, treg);
	  /* We want to close the noreorder block as soon as possible, so
	     that later insns are available for delay slot filling.  */
	  --mips_opts.noreorder;
	}
      else
	{
	  expr1.X_add_number = 8;
	  macro_build (&expr1, "bne", "s,t,p", treg, 0);
	  macro_build (NULL, s, "z,s,t", sreg, treg);

	  /* We want to close the noreorder block as soon as possible, so
	     that later insns are available for delay slot filling.  */
	  --mips_opts.noreorder;
	  macro_build (NULL, "break", "c", 7);
	}
      macro_build (NULL, s2, "d", dreg);
      return;

    case M_DLCA_AB:
      dbl = 1;
    case M_LCA_AB:
      call = 1;
      goto do_la;
    case M_DLA_AB:
      dbl = 1;
    case M_LA_AB:
    do_la:
      /* Load the address of a symbol into a register.  If breg is not
	 zero, we then add a base register to it.  */

      if (dbl && HAVE_32BIT_GPRS)
	as_warn (_("dla used to load 32-bit register"));

      if (! dbl && HAVE_64BIT_OBJECTS)
	as_warn (_("la used to load 64-bit address"));

      if (offset_expr.X_op == O_constant
	  && offset_expr.X_add_number >= -0x8000
	  && offset_expr.X_add_number < 0x8000)
	{
	  macro_build (&offset_expr,
		       (dbl || HAVE_64BIT_ADDRESSES) ? "daddiu" : "addiu",
		       "t,r,j", treg, sreg, BFD_RELOC_LO16);
	  return;
	}

      if (treg == breg)
	{
	  tempreg = AT;
	  used_at = 1;
	}
      else
	{
	  tempreg = treg;
	  used_at = 0;
	}

      /* When generating embedded PIC code, we permit expressions of
	 the form
	   la	$treg,foo-bar
	   la	$treg,foo-bar($breg)
	 where bar is an address in the current section.  These are used
	 when getting the addresses of functions.  We don't permit
	 X_add_number to be non-zero, because if the symbol is
	 external the relaxing code needs to know that any addend is
	 purely the offset to X_op_symbol.  */
      if (mips_pic == EMBEDDED_PIC
	  && offset_expr.X_op == O_subtract
	  && (symbol_constant_p (offset_expr.X_op_symbol)
	      ? S_GET_SEGMENT (offset_expr.X_op_symbol) == now_seg
	      : (symbol_equated_p (offset_expr.X_op_symbol)
		 && (S_GET_SEGMENT
		     (symbol_get_value_expression (offset_expr.X_op_symbol)
		      ->X_add_symbol)
		     == now_seg)))
	  && (offset_expr.X_add_number == 0
	      || OUTPUT_FLAVOR == bfd_target_elf_flavour))
	{
	  if (breg == 0)
	    {
	      tempreg = treg;
	      used_at = 0;
	      macro_build (&offset_expr, "lui", "t,u",
			   tempreg, BFD_RELOC_PCREL_HI16_S);
	    }
	  else
	    {
	      macro_build (&offset_expr, "lui", "t,u",
			   tempreg, BFD_RELOC_PCREL_HI16_S);
	      macro_build (NULL,
			   (dbl || HAVE_64BIT_ADDRESSES) ? "daddu" : "addu",
			   "d,v,t", tempreg, tempreg, breg);
	    }
	  macro_build (&offset_expr,
		       (dbl || HAVE_64BIT_ADDRESSES) ? "daddiu" : "addiu",
		       "t,r,j", treg, tempreg, BFD_RELOC_PCREL_LO16);
	  if (! used_at)
	    return;
	  break;
	}

      if (offset_expr.X_op != O_symbol
	  && offset_expr.X_op != O_constant)
	{
	  as_bad (_("expression too complex"));
	  offset_expr.X_op = O_constant;
	}

      if (offset_expr.X_op == O_constant)
	load_register (tempreg, &offset_expr,
		       ((mips_pic == EMBEDDED_PIC || mips_pic == NO_PIC)
			? (dbl || HAVE_64BIT_ADDRESSES)
			: HAVE_64BIT_ADDRESSES));
      else if (mips_pic == NO_PIC)
	{
	  /* If this is a reference to a GP relative symbol, we want
	       addiu	$tempreg,$gp,<sym>	(BFD_RELOC_GPREL16)
	     Otherwise we want
	       lui	$tempreg,<sym>		(BFD_RELOC_HI16_S)
	       addiu	$tempreg,$tempreg,<sym>	(BFD_RELOC_LO16)
	     If we have a constant, we need two instructions anyhow,
	     so we may as well always use the latter form.

	    With 64bit address space and a usable $at we want
	      lui	$tempreg,<sym>		(BFD_RELOC_MIPS_HIGHEST)
	      lui	$at,<sym>		(BFD_RELOC_HI16_S)
	      daddiu	$tempreg,<sym>		(BFD_RELOC_MIPS_HIGHER)
	      daddiu	$at,<sym>		(BFD_RELOC_LO16)
	      dsll32	$tempreg,0
	      daddu	$tempreg,$tempreg,$at

	    If $at is already in use, we use a path which is suboptimal
	    on superscalar processors.
	      lui	$tempreg,<sym>		(BFD_RELOC_MIPS_HIGHEST)
	      daddiu	$tempreg,<sym>		(BFD_RELOC_MIPS_HIGHER)
	      dsll	$tempreg,16
	      daddiu	$tempreg,<sym>		(BFD_RELOC_HI16_S)
	      dsll	$tempreg,16
	      daddiu	$tempreg,<sym>		(BFD_RELOC_LO16)
	  */
	  if (HAVE_64BIT_ADDRESSES)
	    {
	      /* ??? We don't provide a GP-relative alternative for
		 these macros.  It used not to be possible with the
		 original relaxation code, but it could be done now.  */

	      if (used_at == 0 && ! mips_opts.noat)
		{
		  macro_build (&offset_expr, "lui", "t,u",
			       tempreg, BFD_RELOC_MIPS_HIGHEST);
		  macro_build (&offset_expr, "lui", "t,u",
			       AT, BFD_RELOC_HI16_S);
		  macro_build (&offset_expr, "daddiu", "t,r,j",
			       tempreg, tempreg, BFD_RELOC_MIPS_HIGHER);
		  macro_build (&offset_expr, "daddiu", "t,r,j",
			       AT, AT, BFD_RELOC_LO16);
		  macro_build (NULL, "dsll32", "d,w,<", tempreg, tempreg, 0);
		  macro_build (NULL, "daddu", "d,v,t", tempreg, tempreg, AT);
		  used_at = 1;
		}
	      else
		{
		  macro_build (&offset_expr, "lui", "t,u",
			       tempreg, BFD_RELOC_MIPS_HIGHEST);
		  macro_build (&offset_expr, "daddiu", "t,r,j",
			       tempreg, tempreg, BFD_RELOC_MIPS_HIGHER);
		  macro_build (NULL, "dsll", "d,w,<", tempreg, tempreg, 16);
		  macro_build (&offset_expr, "daddiu", "t,r,j",
			       tempreg, tempreg, BFD_RELOC_HI16_S);
		  macro_build (NULL, "dsll", "d,w,<", tempreg, tempreg, 16);
		  macro_build (&offset_expr, "daddiu", "t,r,j",
			       tempreg, tempreg, BFD_RELOC_LO16);
		}
	    }
	  else
	    {
	      if ((valueT) offset_expr.X_add_number <= MAX_GPREL_OFFSET
		  && ! nopic_need_relax (offset_expr.X_add_symbol, 1))
		{
		  relax_start (offset_expr.X_add_symbol);
		  macro_build (&offset_expr, ADDRESS_ADDI_INSN, "t,r,j",
			       tempreg, mips_gp_register, BFD_RELOC_GPREL16);
		  relax_switch ();
		}
	      macro_build_lui (&offset_expr, tempreg);
	      macro_build (&offset_expr, ADDRESS_ADDI_INSN, "t,r,j",
			   tempreg, tempreg, BFD_RELOC_LO16);
	      if (mips_relax.sequence)
		relax_end ();
	    }
	}
      else if (mips_pic == SVR4_PIC && ! mips_big_got && ! HAVE_NEWABI)
	{
	  int lw_reloc_type = (int) BFD_RELOC_MIPS_GOT16;

	  /* If this is a reference to an external symbol, and there
	     is no constant, we want
	       lw	$tempreg,<sym>($gp)	(BFD_RELOC_MIPS_GOT16)
	     or for lca or if tempreg is PIC_CALL_REG
	       lw	$tempreg,<sym>($gp)	(BFD_RELOC_MIPS_CALL16)
	     For a local symbol, we want
	       lw	$tempreg,<sym>($gp)	(BFD_RELOC_MIPS_GOT16)
	       nop
	       addiu	$tempreg,$tempreg,<sym>	(BFD_RELOC_LO16)

	     If we have a small constant, and this is a reference to
	     an external symbol, we want
	       lw	$tempreg,<sym>($gp)	(BFD_RELOC_MIPS_GOT16)
	       nop
	       addiu	$tempreg,$tempreg,<constant>
	     For a local symbol, we want the same instruction
	     sequence, but we output a BFD_RELOC_LO16 reloc on the
	     addiu instruction.

	     If we have a large constant, and this is a reference to
	     an external symbol, we want
	       lw	$tempreg,<sym>($gp)	(BFD_RELOC_MIPS_GOT16)
	       lui	$at,<hiconstant>
	       addiu	$at,$at,<loconstant>
	       addu	$tempreg,$tempreg,$at
	     For a local symbol, we want the same instruction
	     sequence, but we output a BFD_RELOC_LO16 reloc on the
	     addiu instruction.
	   */

	  if (offset_expr.X_add_number == 0)
	    {
	      if (breg == 0 && (call || tempreg == PIC_CALL_REG))
		lw_reloc_type = (int) BFD_RELOC_MIPS_CALL16;

	      relax_start (offset_expr.X_add_symbol);
	      macro_build (&offset_expr, ADDRESS_LOAD_INSN, "t,o(b)", tempreg,
			   lw_reloc_type, mips_gp_register);
	      if (breg != 0)
		{
		  /* We're going to put in an addu instruction using
		     tempreg, so we may as well insert the nop right
		     now.  */
		  macro_build (NULL, "nop", "");
		}
	      relax_switch ();
	      macro_build (&offset_expr, ADDRESS_LOAD_INSN, "t,o(b)",
			   tempreg, BFD_RELOC_MIPS_GOT16, mips_gp_register);
	      macro_build (NULL, "nop", "");
	      macro_build (&offset_expr, ADDRESS_ADDI_INSN, "t,r,j",
			   tempreg, tempreg, BFD_RELOC_LO16);
	      relax_end ();
	      /* FIXME: If breg == 0, and the next instruction uses
		 $tempreg, then if this variant case is used an extra
		 nop will be generated.  */
	    }
	  else if (offset_expr.X_add_number >= -0x8000
		   && offset_expr.X_add_number < 0x8000)
	    {
	      load_got_offset (tempreg, &offset_expr);
	      macro_build (NULL, "nop", "");
	      add_got_offset (tempreg, &offset_expr);
	    }
	  else
	    {
	      expr1.X_add_number = offset_expr.X_add_number;
	      offset_expr.X_add_number =
		((offset_expr.X_add_number + 0x8000) & 0xffff) - 0x8000;
	      load_got_offset (tempreg, &offset_expr);
	      offset_expr.X_add_number = expr1.X_add_number;
	      /* If we are going to add in a base register, and the
		 target register and the base register are the same,
		 then we are using AT as a temporary register.  Since
		 we want to load the constant into AT, we add our
		 current AT (from the global offset table) and the
		 register into the register now, and pretend we were
		 not using a base register.  */
	      if (breg == treg)
		{
		  macro_build (NULL, "nop", "");
		  macro_build (NULL, ADDRESS_ADD_INSN, "d,v,t",
			       treg, AT, breg);
		  breg = 0;
		  tempreg = treg;
		}
	      add_got_offset_hilo (tempreg, &offset_expr, AT);
	      used_at = 1;
	    }
	}
      else if (mips_pic == SVR4_PIC && ! mips_big_got && HAVE_NEWABI)
	{
	  int add_breg_early = 0;

	  /* If this is a reference to an external, and there is no
	     constant, or local symbol (*), with or without a
	     constant, we want
	       lw	$tempreg,<sym>($gp)	(BFD_RELOC_MIPS_GOT_DISP)
	     or for lca or if tempreg is PIC_CALL_REG
	       lw	$tempreg,<sym>($gp)	(BFD_RELOC_MIPS_CALL16)

	     If we have a small constant, and this is a reference to
	     an external symbol, we want
	       lw	$tempreg,<sym>($gp)	(BFD_RELOC_MIPS_GOT_DISP)
	       addiu	$tempreg,$tempreg,<constant>

	     If we have a large constant, and this is a reference to
	     an external symbol, we want
	       lw	$tempreg,<sym>($gp)	(BFD_RELOC_MIPS_GOT_DISP)
	       lui	$at,<hiconstant>
	       addiu	$at,$at,<loconstant>
	       addu	$tempreg,$tempreg,$at

	     (*) Other assemblers seem to prefer GOT_PAGE/GOT_OFST for
	     local symbols, even though it introduces an additional
	     instruction.  */

	  if (offset_expr.X_add_number)
	    {
	      expr1.X_add_number = offset_expr.X_add_number;
	      offset_expr.X_add_number = 0;

	      relax_start (offset_expr.X_add_symbol);
	      macro_build (&offset_expr, ADDRESS_LOAD_INSN, "t,o(b)", tempreg,
			   BFD_RELOC_MIPS_GOT_DISP, mips_gp_register);

	      if (expr1.X_add_number >= -0x8000
		  && expr1.X_add_number < 0x8000)
		{
		  macro_build (&expr1, ADDRESS_ADDI_INSN, "t,r,j",
			       tempreg, tempreg, BFD_RELOC_LO16);
		}
	      else if (IS_SEXT_32BIT_NUM (expr1.X_add_number + 0x8000))
		{
		  int dreg;

		  /* If we are going to add in a base register, and the
		     target register and the base register are the same,
		     then we are using AT as a temporary register.  Since
		     we want to load the constant into AT, we add our
		     current AT (from the global offset table) and the
		     register into the register now, and pretend we were
		     not using a base register.  */
		  if (breg != treg)
		    dreg = tempreg;
		  else
		    {
		      assert (tempreg == AT);
		      macro_build (NULL, ADDRESS_ADD_INSN, "d,v,t",
				   treg, AT, breg);
		      dreg = treg;
		      add_breg_early = 1;
		    }

		  load_register (AT, &expr1, HAVE_64BIT_ADDRESSES);
		  macro_build (NULL, ADDRESS_ADD_INSN, "d,v,t",
			       dreg, dreg, AT);

		  used_at = 1;
		}
	      else
		as_bad (_("PIC code offset overflow (max 32 signed bits)"));

	      relax_switch ();
	      offset_expr.X_add_number = expr1.X_add_number;

	      macro_build (&offset_expr, ADDRESS_LOAD_INSN, "t,o(b)", tempreg,
			   BFD_RELOC_MIPS_GOT_DISP, mips_gp_register);
	      if (add_breg_early)
		{
		  macro_build (NULL, ADDRESS_ADD_INSN, "d,v,t",
			       treg, tempreg, breg);
		  breg = 0;
		  tempreg = treg;
		}
	      relax_end ();
	    }
	  else if (breg == 0 && (call || tempreg == PIC_CALL_REG))
	    {
	      relax_start (offset_expr.X_add_symbol);
	      macro_build (&offset_expr, ADDRESS_LOAD_INSN, "t,o(b)", tempreg,
			   BFD_RELOC_MIPS_CALL16, mips_gp_register);
	      relax_switch ();
	      macro_build (&offset_expr, ADDRESS_LOAD_INSN, "t,o(b)", tempreg,
			   BFD_RELOC_MIPS_GOT_DISP, mips_gp_register);
	      relax_end ();
	    }
	  else
	    {
	      macro_build (&offset_expr, ADDRESS_LOAD_INSN, "t,o(b)", tempreg,
			   BFD_RELOC_MIPS_GOT_DISP, mips_gp_register);
	    }
	}
      else if (mips_pic == SVR4_PIC && ! HAVE_NEWABI)
	{
	  int gpdelay;
	  int lui_reloc_type = (int) BFD_RELOC_MIPS_GOT_HI16;
	  int lw_reloc_type = (int) BFD_RELOC_MIPS_GOT_LO16;
	  int local_reloc_type = (int) BFD_RELOC_MIPS_GOT16;

	  /* This is the large GOT case.  If this is a reference to an
	     external symbol, and there is no constant, we want
	       lui	$tempreg,<sym>		(BFD_RELOC_MIPS_GOT_HI16)
	       addu	$tempreg,$tempreg,$gp
	       lw	$tempreg,<sym>($tempreg) (BFD_RELOC_MIPS_GOT_LO16)
	     or for lca or if tempreg is PIC_CALL_REG
	       lui	$tempreg,<sym>		(BFD_RELOC_MIPS_CALL_HI16)
	       addu	$tempreg,$tempreg,$gp
	       lw	$tempreg,<sym>($tempreg) (BFD_RELOC_MIPS_CALL_LO16)
	     For a local symbol, we want
	       lw	$tempreg,<sym>($gp)	(BFD_RELOC_MIPS_GOT16)
	       nop
	       addiu	$tempreg,$tempreg,<sym>	(BFD_RELOC_LO16)

	     If we have a small constant, and this is a reference to
	     an external symbol, we want
	       lui	$tempreg,<sym>		(BFD_RELOC_MIPS_GOT_HI16)
	       addu	$tempreg,$tempreg,$gp
	       lw	$tempreg,<sym>($tempreg) (BFD_RELOC_MIPS_GOT_LO16)
	       nop
	       addiu	$tempreg,$tempreg,<constant>
	     For a local symbol, we want
	       lw	$tempreg,<sym>($gp)	(BFD_RELOC_MIPS_GOT16)
	       nop
	       addiu	$tempreg,$tempreg,<constant> (BFD_RELOC_LO16)

	     If we have a large constant, and this is a reference to
	     an external symbol, we want
	       lui	$tempreg,<sym>		(BFD_RELOC_MIPS_GOT_HI16)
	       addu	$tempreg,$tempreg,$gp
	       lw	$tempreg,<sym>($tempreg) (BFD_RELOC_MIPS_GOT_LO16)
	       lui	$at,<hiconstant>
	       addiu	$at,$at,<loconstant>
	       addu	$tempreg,$tempreg,$at
	     For a local symbol, we want
	       lw	$tempreg,<sym>($gp)	(BFD_RELOC_MIPS_GOT16)
	       lui	$at,<hiconstant>
	       addiu	$at,$at,<loconstant>	(BFD_RELOC_LO16)
	       addu	$tempreg,$tempreg,$at
	  */

	  expr1.X_add_number = offset_expr.X_add_number;
	  offset_expr.X_add_number = 0;
	  relax_start (offset_expr.X_add_symbol);
	  gpdelay = reg_needs_delay (mips_gp_register);
	  if (expr1.X_add_number == 0 && breg == 0
	      && (call || tempreg == PIC_CALL_REG))
	    {
	      lui_reloc_type = (int) BFD_RELOC_MIPS_CALL_HI16;
	      lw_reloc_type = (int) BFD_RELOC_MIPS_CALL_LO16;
	    }
	  macro_build (&offset_expr, "lui", "t,u", tempreg, lui_reloc_type);
	  macro_build (NULL, ADDRESS_ADD_INSN, "d,v,t",
		       tempreg, tempreg, mips_gp_register);
	  macro_build (&offset_expr, ADDRESS_LOAD_INSN, "t,o(b)",
		       tempreg, lw_reloc_type, tempreg);
	  if (expr1.X_add_number == 0)
	    {
	      if (breg != 0)
		{
		  /* We're going to put in an addu instruction using
		     tempreg, so we may as well insert the nop right
		     now.  */
		  macro_build (NULL, "nop", "");
		}
	    }
	  else if (expr1.X_add_number >= -0x8000
		   && expr1.X_add_number < 0x8000)
	    {
	      macro_build (NULL, "nop", "");
	      macro_build (&expr1, ADDRESS_ADDI_INSN, "t,r,j",
			   tempreg, tempreg, BFD_RELOC_LO16);
	    }
	  else
	    {
	      int dreg;

	      /* If we are going to add in a base register, and the
		 target register and the base register are the same,
		 then we are using AT as a temporary register.  Since
		 we want to load the constant into AT, we add our
		 current AT (from the global offset table) and the
		 register into the register now, and pretend we were
		 not using a base register.  */
	      if (breg != treg)
		dreg = tempreg;
	      else
		{
		  assert (tempreg == AT);
		  macro_build (NULL, "nop", "");
		  macro_build (NULL, ADDRESS_ADD_INSN, "d,v,t",
			       treg, AT, breg);
		  dreg = treg;
		}

	      load_register (AT, &expr1, HAVE_64BIT_ADDRESSES);
	      macro_build (NULL, ADDRESS_ADD_INSN, "d,v,t", dreg, dreg, AT);

	      used_at = 1;
	    }
	  offset_expr.X_add_number =
	    ((expr1.X_add_number + 0x8000) & 0xffff) - 0x8000;
	  relax_switch ();

	  if (gpdelay)
	    {
	      /* This is needed because this instruction uses $gp, but
		 the first instruction on the main stream does not.  */
	      macro_build (NULL, "nop", "");
	    }

	  macro_build (&offset_expr, ADDRESS_LOAD_INSN, "t,o(b)", tempreg,
		       local_reloc_type, mips_gp_register);
	  if (expr1.X_add_number >= -0x8000
	      && expr1.X_add_number < 0x8000)
	    {
	      macro_build (NULL, "nop", "");
	      macro_build (&offset_expr, ADDRESS_ADDI_INSN, "t,r,j",
			   tempreg, tempreg, BFD_RELOC_LO16);
	      /* FIXME: If add_number is 0, and there was no base
		 register, the external symbol case ended with a load,
		 so if the symbol turns out to not be external, and
		 the next instruction uses tempreg, an unnecessary nop
		 will be inserted.  */
	    }
	  else
	    {
	      if (breg == treg)
		{
		  /* We must add in the base register now, as in the
		     external symbol case.  */
		  assert (tempreg == AT);
		  macro_build (NULL, "nop", "");
		  macro_build (NULL, ADDRESS_ADD_INSN, "d,v,t",
			       treg, AT, breg);
		  tempreg = treg;
		  /* We set breg to 0 because we have arranged to add
		     it in in both cases.  */
		  breg = 0;
		}

	      macro_build_lui (&expr1, AT);
	      macro_build (&offset_expr, ADDRESS_ADDI_INSN, "t,r,j",
			   AT, AT, BFD_RELOC_LO16);
	      macro_build (NULL, ADDRESS_ADD_INSN, "d,v,t",
			   tempreg, tempreg, AT);
	    }
	  relax_end ();
	}
      else if (mips_pic == SVR4_PIC && HAVE_NEWABI)
	{
	  int lui_reloc_type = (int) BFD_RELOC_MIPS_GOT_HI16;
	  int lw_reloc_type = (int) BFD_RELOC_MIPS_GOT_LO16;
	  int add_breg_early = 0;

	  /* This is the large GOT case.  If this is a reference to an
	     external symbol, and there is no constant, we want
	       lui	$tempreg,<sym>		(BFD_RELOC_MIPS_GOT_HI16)
	       add	$tempreg,$tempreg,$gp
	       lw	$tempreg,<sym>($tempreg) (BFD_RELOC_MIPS_GOT_LO16)
	     or for lca or if tempreg is PIC_CALL_REG
	       lui	$tempreg,<sym>		(BFD_RELOC_MIPS_CALL_HI16)
	       add	$tempreg,$tempreg,$gp
	       lw	$tempreg,<sym>($tempreg) (BFD_RELOC_MIPS_CALL_LO16)

	     If we have a small constant, and this is a reference to
	     an external symbol, we want
	       lui	$tempreg,<sym>		(BFD_RELOC_MIPS_GOT_HI16)
	       add	$tempreg,$tempreg,$gp
	       lw	$tempreg,<sym>($tempreg) (BFD_RELOC_MIPS_GOT_LO16)
	       addi	$tempreg,$tempreg,<constant>

	     If we have a large constant, and this is a reference to
	     an external symbol, we want
	       lui	$tempreg,<sym>		(BFD_RELOC_MIPS_GOT_HI16)
	       addu	$tempreg,$tempreg,$gp
	       lw	$tempreg,<sym>($tempreg) (BFD_RELOC_MIPS_GOT_LO16)
	       lui	$at,<hiconstant>
	       addi	$at,$at,<loconstant>
	       add	$tempreg,$tempreg,$at

	     If we have NewABI, and we know it's a local symbol, we want
	       lw	$reg,<sym>($gp)		(BFD_RELOC_MIPS_GOT_PAGE)
	       addiu	$reg,$reg,<sym>		(BFD_RELOC_MIPS_GOT_OFST)
	     otherwise we have to resort to GOT_HI16/GOT_LO16.  */

	  relax_start (offset_expr.X_add_symbol);

	  expr1.X_add_number = offset_expr.X_add_number;
	  offset_expr.X_add_number = 0;

	  if (expr1.X_add_number == 0 && breg == 0
	      && (call || tempreg == PIC_CALL_REG))
	    {
	      lui_reloc_type = (int) BFD_RELOC_MIPS_CALL_HI16;
	      lw_reloc_type = (int) BFD_RELOC_MIPS_CALL_LO16;
	    }
	  macro_build (&offset_expr, "lui", "t,u", tempreg, lui_reloc_type);
	  macro_build (NULL, ADDRESS_ADD_INSN, "d,v,t",
		       tempreg, tempreg, mips_gp_register);
	  macro_build (&offset_expr, ADDRESS_LOAD_INSN, "t,o(b)",
		       tempreg, lw_reloc_type, tempreg);

	  if (expr1.X_add_number == 0)
	    ;
	  else if (expr1.X_add_number >= -0x8000
		   && expr1.X_add_number < 0x8000)
	    {
	      macro_build (&expr1, ADDRESS_ADDI_INSN, "t,r,j",
			   tempreg, tempreg, BFD_RELOC_LO16);
	    }
	  else if (IS_SEXT_32BIT_NUM (expr1.X_add_number + 0x8000))
	    {
	      int dreg;

	      /* If we are going to add in a base register, and the
		 target register and the base register are the same,
		 then we are using AT as a temporary register.  Since
		 we want to load the constant into AT, we add our
		 current AT (from the global offset table) and the
		 register into the register now, and pretend we were
		 not using a base register.  */
	      if (breg != treg)
		dreg = tempreg;
	      else
		{
		  assert (tempreg == AT);
		  macro_build (NULL, ADDRESS_ADD_INSN, "d,v,t",
			       treg, AT, breg);
		  dreg = treg;
		  add_breg_early = 1;
		}

	      load_register (AT, &expr1, HAVE_64BIT_ADDRESSES);
	      macro_build (NULL, ADDRESS_ADD_INSN, "d,v,t", dreg, dreg, AT);

	      used_at = 1;
	    }
	  else
	    as_bad (_("PIC code offset overflow (max 32 signed bits)"));

	  relax_switch ();
	  offset_expr.X_add_number = expr1.X_add_number;
	  macro_build (&offset_expr, ADDRESS_LOAD_INSN, "t,o(b)", tempreg,
		       BFD_RELOC_MIPS_GOT_PAGE, mips_gp_register);
	  macro_build (&offset_expr, ADDRESS_ADDI_INSN, "t,r,j", tempreg,
		       tempreg, BFD_RELOC_MIPS_GOT_OFST);
	  if (add_breg_early)
	    {
	      macro_build (NULL, ADDRESS_ADD_INSN, "d,v,t",
			   treg, tempreg, breg);
	      breg = 0;
	      tempreg = treg;
	    }
	  relax_end ();
	}
      else if (mips_pic == EMBEDDED_PIC)
	{
	  /* We use
	       addiu	$tempreg,$gp,<sym>	(BFD_RELOC_GPREL16)
	     */
	  macro_build (&offset_expr, ADDRESS_ADDI_INSN, "t,r,j", tempreg,
		       mips_gp_register, BFD_RELOC_GPREL16);
	}
      else
	abort ();

      if (breg != 0)
	{
	  char *s;

	  if (mips_pic == EMBEDDED_PIC || mips_pic == NO_PIC)
	    s = (dbl || HAVE_64BIT_ADDRESSES) ? "daddu" : "addu";
	  else
	    s = ADDRESS_ADD_INSN;

	  macro_build (NULL, s, "d,v,t", treg, tempreg, breg);
	}

      if (! used_at)
	return;

      break;

    case M_JR_S:
      macro_build_jrpatch (&expr1, sreg);
      macro_build (NULL, "jr", "s", sreg);
      return;	/* didn't modify $at */

    case M_J_S:
      macro_build_jrpatch (&expr1, sreg);
      macro_build (NULL, "j", "s", sreg);
      return;	/* didn't modify $at */

    case M_JALR_S:
      macro_build_jrpatch (&expr1, sreg);
      macro_build (NULL, "jalr", "s", sreg);
      return;	/* didn't modify $at */

    case M_JALR_DS:
      macro_build_jrpatch (&expr1, sreg);
      macro_build (NULL, "jalr", "d,s", dreg, sreg);
      return;	/* didn't modify $at */

    case M_J_A:
      /* The j instruction may not be used in PIC code, since it
	 requires an absolute address.  We convert it to a b
	 instruction.  */
      if (mips_pic == NO_PIC)
	macro_build (&offset_expr, "j", "a");
      else
	macro_build (&offset_expr, "b", "p");
      return;

      /* The jal instructions must be handled as macros because when
	 generating PIC code they expand to multi-instruction
	 sequences.  Normally they are simple instructions.  */
    case M_JAL_1:
      dreg = RA;
      /* Fall through.  */
    case M_JAL_2:
      if (mips_pic == NO_PIC
	  || mips_pic == EMBEDDED_PIC)
	{
	  macro_build_jrpatch (&expr1, sreg);
	  macro_build (NULL, "jalr", "d,s", dreg, sreg);
	}
      else if (mips_pic == SVR4_PIC)
	{
	  if (sreg != PIC_CALL_REG)
	    as_warn (_("MIPS PIC call to register other than $25"));

	  macro_build_jrpatch (&expr1, sreg);
	  macro_build (NULL, "jalr", "d,s", dreg, sreg);
	  if (! HAVE_NEWABI)
	    {
	      if (mips_cprestore_offset < 0)
		as_warn (_("No .cprestore pseudo-op used in PIC code"));
	      else
		{
		  if (! mips_frame_reg_valid)
		    {
		      as_warn (_("No .frame pseudo-op used in PIC code"));
		      /* Quiet this warning.  */
		      mips_frame_reg_valid = 1;
		    }
		  if (! mips_cprestore_valid)
		    {
		      as_warn (_("No .cprestore pseudo-op used in PIC code"));
		      /* Quiet this warning.  */
		      mips_cprestore_valid = 1;
		    }
		  expr1.X_add_number = mips_cprestore_offset;
  		  macro_build_ldst_constoffset (&expr1, ADDRESS_LOAD_INSN,
						mips_gp_register,
						mips_frame_reg,
						HAVE_64BIT_ADDRESSES);
		}
	    }
	}
      else
	abort ();

      return;

    case M_JAL_A:
      if (mips_pic == NO_PIC)
	macro_build (&offset_expr, "jal", "a");
      else if (mips_pic == SVR4_PIC)
	{
	  /* If this is a reference to an external symbol, and we are
	     using a small GOT, we want
	       lw	$25,<sym>($gp)		(BFD_RELOC_MIPS_CALL16)
	       nop
	       jalr	$ra,$25
	       nop
	       lw	$gp,cprestore($sp)
	     The cprestore value is set using the .cprestore
	     pseudo-op.  If we are using a big GOT, we want
	       lui	$25,<sym>		(BFD_RELOC_MIPS_CALL_HI16)
	       addu	$25,$25,$gp
	       lw	$25,<sym>($25)		(BFD_RELOC_MIPS_CALL_LO16)
	       nop
	       jalr	$ra,$25
	       nop
	       lw	$gp,cprestore($sp)
	     If the symbol is not external, we want
	       lw	$25,<sym>($gp)		(BFD_RELOC_MIPS_GOT16)
	       nop
	       addiu	$25,$25,<sym>		(BFD_RELOC_LO16)
	       jalr	$ra,$25
	       nop
	       lw $gp,cprestore($sp)

	     For NewABI, we use the same CALL16 or CALL_HI16/CALL_LO16
	     sequences above, minus nops, unless the symbol is local,
	     which enables us to use GOT_PAGE/GOT_OFST (big got) or
	     GOT_DISP.  */
	  if (HAVE_NEWABI)
	    {
	      if (! mips_big_got)
		{
		  relax_start (offset_expr.X_add_symbol);
		  macro_build (&offset_expr, ADDRESS_LOAD_INSN, "t,o(b)",
			       PIC_CALL_REG, BFD_RELOC_MIPS_CALL16,
			       mips_gp_register);
		  relax_switch ();
		  macro_build (&offset_expr, ADDRESS_LOAD_INSN, "t,o(b)",
			       PIC_CALL_REG, BFD_RELOC_MIPS_GOT_DISP,
			       mips_gp_register);
		  relax_end ();
		}
	      else
		{
		  relax_start (offset_expr.X_add_symbol);
		  macro_build (&offset_expr, "lui", "t,u", PIC_CALL_REG,
			       BFD_RELOC_MIPS_CALL_HI16);
		  macro_build (NULL, ADDRESS_ADD_INSN, "d,v,t", PIC_CALL_REG,
			       PIC_CALL_REG, mips_gp_register);
		  macro_build (&offset_expr, ADDRESS_LOAD_INSN, "t,o(b)",
			       PIC_CALL_REG, BFD_RELOC_MIPS_CALL_LO16,
			       PIC_CALL_REG);
		  relax_switch ();
		  macro_build (&offset_expr, ADDRESS_LOAD_INSN, "t,o(b)",
			       PIC_CALL_REG, BFD_RELOC_MIPS_GOT_PAGE,
			       mips_gp_register);
		  macro_build (&offset_expr, ADDRESS_ADDI_INSN, "t,r,j",
			       PIC_CALL_REG, PIC_CALL_REG,
			       BFD_RELOC_MIPS_GOT_OFST);
		  relax_end ();
		}

	      macro_build_jalr (&offset_expr);
	    }
	  else
	    {
	      relax_start (offset_expr.X_add_symbol);
	      if (! mips_big_got)
		{
		  macro_build (&offset_expr, ADDRESS_LOAD_INSN, "t,o(b)",
			       PIC_CALL_REG, BFD_RELOC_MIPS_CALL16,
			       mips_gp_register);
		  macro_build (NULL, "nop", "");
		  relax_switch ();
		}
	      else
		{
		  int gpdelay;

		  gpdelay = reg_needs_delay (mips_gp_register);
		  macro_build (&offset_expr, "lui", "t,u", PIC_CALL_REG,
			       BFD_RELOC_MIPS_CALL_HI16);
		  macro_build (NULL, ADDRESS_ADD_INSN, "d,v,t", PIC_CALL_REG,
			       PIC_CALL_REG, mips_gp_register);
		  macro_build (&offset_expr, ADDRESS_LOAD_INSN, "t,o(b)",
			       PIC_CALL_REG, BFD_RELOC_MIPS_CALL_LO16,
			       PIC_CALL_REG);
		  macro_build (NULL, "nop", "");
		  relax_switch ();
		  if (gpdelay)
		    macro_build (NULL, "nop", "");
		}
	      macro_build (&offset_expr, ADDRESS_LOAD_INSN, "t,o(b)",
			   PIC_CALL_REG, BFD_RELOC_MIPS_GOT16,
			   mips_gp_register);
	      macro_build (NULL, "nop", "");
	      macro_build (&offset_expr, ADDRESS_ADDI_INSN, "t,r,j",
			   PIC_CALL_REG, PIC_CALL_REG, BFD_RELOC_LO16);
	      relax_end ();
	      macro_build_jalr (&offset_expr);

	      if (mips_cprestore_offset < 0)
		as_warn (_("No .cprestore pseudo-op used in PIC code"));
	      else
		{
		  if (! mips_frame_reg_valid)
		    {
		      as_warn (_("No .frame pseudo-op used in PIC code"));
		      /* Quiet this warning.  */
		      mips_frame_reg_valid = 1;
		    }
		  if (! mips_cprestore_valid)
		    {
		      as_warn (_("No .cprestore pseudo-op used in PIC code"));
		      /* Quiet this warning.  */
		      mips_cprestore_valid = 1;
		    }
		  if (mips_opts.noreorder)
		    macro_build (NULL, "nop", "");
		  expr1.X_add_number = mips_cprestore_offset;
  		  macro_build_ldst_constoffset (&expr1, ADDRESS_LOAD_INSN,
						mips_gp_register,
						mips_frame_reg,
						HAVE_64BIT_ADDRESSES);
		}
	    }
	}
      else if (mips_pic == EMBEDDED_PIC)
	{
	  macro_build (&offset_expr, "bal", "p");
	  /* The linker may expand the call to a longer sequence which
	     uses $at, so we must break rather than return.  */
	  break;
	}
      else
	abort ();

      return;

    case M_LB_AB:
      s = "lb";
      goto ld;
    case M_LBU_AB:
      s = "lbu";
      goto ld;
    case M_LH_AB:
      s = "lh";
      goto ld;
    case M_LHU_AB:
      s = "lhu";
      goto ld;
    case M_LW_AB:
      s = "lw";
      goto ld;
    case M_LWC0_AB:
      s = "lwc0";
      /* Itbl support may require additional care here.  */
      coproc = 1;
      goto ld;
    case M_LWC1_AB:
      s = "lwc1";
      /* Itbl support may require additional care here.  */
      coproc = 1;
      goto ld;
    case M_LWC2_AB:
      s = "lwc2";
      /* Itbl support may require additional care here.  */
      coproc = 1;
      goto ld;
    case M_LWC3_AB:
      s = "lwc3";
      /* Itbl support may require additional care here.  */
      coproc = 1;
      goto ld;
    case M_LWL_AB:
      s = "lwl";
      lr = 1;
      goto ld;
    case M_LWR_AB:
      s = "lwr";
      lr = 1;
      goto ld;
    case M_LDC1_AB:
      if (mips_opts.arch == CPU_R4650)
	{
	  as_bad (_("opcode not supported on this processor"));
	  return;
	}
      s = "ldc1";
      /* Itbl support may require additional care here.  */
      coproc = 1;
      goto ld;
    case M_LDC2_AB:
      s = "ldc2";
      /* Itbl support may require additional care here.  */
      coproc = 1;
      goto ld;
    case M_LDC3_AB:
      s = "ldc3";
      /* Itbl support may require additional care here.  */
      coproc = 1;
      goto ld;
    case M_LDL_AB:
      s = "ldl";
      lr = 1;
      goto ld;
    case M_LDR_AB:
      s = "ldr";
      lr = 1;
      goto ld;
    case M_LL_AB:
      s = "ll";
      goto ld;
    case M_LLD_AB:
      s = "lld";
      goto ld;
    case M_LWU_AB:
      s = "lwu";
    ld:
      if (breg == treg || coproc || lr)
	{
	  tempreg = AT;
	  used_at = 1;
	}
      else
	{
	  tempreg = treg;
	  used_at = 0;
	}
      goto ld_st;
    case M_SB_AB:
      s = "sb";
      goto st;
    case M_SH_AB:
      s = "sh";
      goto st;
    case M_SW_AB:
      s = "sw";
      goto st;
    case M_SWC0_AB:
      s = "swc0";
      /* Itbl support may require additional care here.  */
      coproc = 1;
      goto st;
    case M_SWC1_AB:
      s = "swc1";
      /* Itbl support may require additional care here.  */
      coproc = 1;
      goto st;
    case M_SWC2_AB:
      s = "swc2";
      /* Itbl support may require additional care here.  */
      coproc = 1;
      goto st;
    case M_SWC3_AB:
      s = "swc3";
      /* Itbl support may require additional care here.  */
      coproc = 1;
      goto st;
    case M_SWL_AB:
      s = "swl";
      goto st;
    case M_SWR_AB:
      s = "swr";
      goto st;
    case M_SC_AB:
      s = "sc";
      goto st;
    case M_SCD_AB:
      s = "scd";
      goto st;
    case M_SDC1_AB:
      if (mips_opts.arch == CPU_R4650)
	{
	  as_bad (_("opcode not supported on this processor"));
	  return;
	}
      s = "sdc1";
      coproc = 1;
      /* Itbl support may require additional care here.  */
      goto st;
    case M_SDC2_AB:
      s = "sdc2";
      /* Itbl support may require additional care here.  */
      coproc = 1;
      goto st;
    case M_SDC3_AB:
      s = "sdc3";
      /* Itbl support may require additional care here.  */
      coproc = 1;
      goto st;
    case M_SDL_AB:
      s = "sdl";
      goto st;
    case M_SDR_AB:
      s = "sdr";
    st:
      tempreg = AT;
      used_at = 1;
    ld_st:
      /* Itbl support may require additional care here.  */
      if (mask == M_LWC1_AB
	  || mask == M_SWC1_AB
	  || mask == M_LDC1_AB
	  || mask == M_SDC1_AB
	  || mask == M_L_DAB
	  || mask == M_S_DAB)
	fmt = "T,o(b)";
      else if (coproc)
	fmt = "E,o(b)";
      else
	fmt = "t,o(b)";

      /* Sign-extending 32-bit constants makes their handling easier.
         The HAVE_64BIT_GPRS... part is due to the linux kernel hack
         described below.  */
      if ((! HAVE_64BIT_ADDRESSES
	   && (! HAVE_64BIT_GPRS && offset_expr.X_op == O_constant))
          && (offset_expr.X_op == O_constant)
	  && ! ((offset_expr.X_add_number & ~((bfd_vma) 0x7fffffff))
		== ~((bfd_vma) 0x7fffffff)))
	{
	  if (offset_expr.X_add_number & ~((bfd_vma) 0xffffffff))
	    as_bad (_("constant too large"));

	  offset_expr.X_add_number = (((offset_expr.X_add_number & 0xffffffff)
				       ^ 0x80000000) - 0x80000000);
	}

      /* For embedded PIC, we allow loads where the offset is calculated
         by subtracting a symbol in the current segment from an unknown
         symbol, relative to a base register, e.g.:
		<op>	$treg, <sym>-<localsym>($breg)
	 This is used by the compiler for switch statements.  */
      if (mips_pic == EMBEDDED_PIC
          && offset_expr.X_op == O_subtract
          && (symbol_constant_p (offset_expr.X_op_symbol)
              ? S_GET_SEGMENT (offset_expr.X_op_symbol) == now_seg
              : (symbol_equated_p (offset_expr.X_op_symbol)
                 && (S_GET_SEGMENT
                     (symbol_get_value_expression (offset_expr.X_op_symbol)
                      ->X_add_symbol)
                     == now_seg)))
          && breg != 0
          && (offset_expr.X_add_number == 0
              || OUTPUT_FLAVOR == bfd_target_elf_flavour))
        {
          /* For this case, we output the instructions:
                lui     $tempreg,<sym>          (BFD_RELOC_PCREL_HI16_S)
                addiu   $tempreg,$tempreg,$breg
                <op>    $treg,<sym>($tempreg)   (BFD_RELOC_PCREL_LO16)
             If the relocation would fit entirely in 16 bits, it would be
             nice to emit:
                <op>    $treg,<sym>($breg)      (BFD_RELOC_PCREL_LO16)
             instead, but that seems quite difficult.  */
          macro_build (&offset_expr, "lui", "t,u", tempreg,
		       BFD_RELOC_PCREL_HI16_S);
          macro_build (NULL,
		       ((bfd_arch_bits_per_address (stdoutput) == 32
			 || ! ISA_HAS_64BIT_REGS (mips_opts.isa))
			? "addu" : "daddu"),
		       "d,v,t", tempreg, tempreg, breg);
          macro_build (&offset_expr, s, fmt, treg,
		       BFD_RELOC_PCREL_LO16, tempreg);
          if (! used_at)
            return;
          break;
        }

      if (offset_expr.X_op != O_constant
	  && offset_expr.X_op != O_symbol)
	{
	  as_bad (_("expression too complex"));
	  offset_expr.X_op = O_constant;
	}

      /* A constant expression in PIC code can be handled just as it
	 is in non PIC code.  */
      if (mips_pic == NO_PIC
	  || offset_expr.X_op == O_constant)
	{
	  /* If this is a reference to a GP relative symbol, and there
	     is no base register, we want
	       <op>	$treg,<sym>($gp)	(BFD_RELOC_GPREL16)
	     Otherwise, if there is no base register, we want
	       lui	$tempreg,<sym>		(BFD_RELOC_HI16_S)
	       <op>	$treg,<sym>($tempreg)	(BFD_RELOC_LO16)
	     If we have a constant, we need two instructions anyhow,
	     so we always use the latter form.

	     If we have a base register, and this is a reference to a
	     GP relative symbol, we want
	       addu	$tempreg,$breg,$gp
	       <op>	$treg,<sym>($tempreg)	(BFD_RELOC_GPREL16)
	     Otherwise we want
	       lui	$tempreg,<sym>		(BFD_RELOC_HI16_S)
	       addu	$tempreg,$tempreg,$breg
	       <op>	$treg,<sym>($tempreg)	(BFD_RELOC_LO16)
	     With a constant we always use the latter case.

	     With 64bit address space and no base register and $at usable,
	     we want
	       lui	$tempreg,<sym>		(BFD_RELOC_MIPS_HIGHEST)
	       lui	$at,<sym>		(BFD_RELOC_HI16_S)
	       daddiu	$tempreg,<sym>		(BFD_RELOC_MIPS_HIGHER)
	       dsll32	$tempreg,0
	       daddu	$tempreg,$at
	       <op>	$treg,<sym>($tempreg)	(BFD_RELOC_LO16)
	     If we have a base register, we want
	       lui	$tempreg,<sym>		(BFD_RELOC_MIPS_HIGHEST)
	       lui	$at,<sym>		(BFD_RELOC_HI16_S)
	       daddiu	$tempreg,<sym>		(BFD_RELOC_MIPS_HIGHER)
	       daddu	$at,$breg
	       dsll32	$tempreg,0
	       daddu	$tempreg,$at
	       <op>	$treg,<sym>($tempreg)	(BFD_RELOC_LO16)

	     Without $at we can't generate the optimal path for superscalar
	     processors here since this would require two temporary registers.
	       lui	$tempreg,<sym>		(BFD_RELOC_MIPS_HIGHEST)
	       daddiu	$tempreg,<sym>		(BFD_RELOC_MIPS_HIGHER)
	       dsll	$tempreg,16
	       daddiu	$tempreg,<sym>		(BFD_RELOC_HI16_S)
	       dsll	$tempreg,16
	       <op>	$treg,<sym>($tempreg)	(BFD_RELOC_LO16)
	     If we have a base register, we want
	       lui	$tempreg,<sym>		(BFD_RELOC_MIPS_HIGHEST)
	       daddiu	$tempreg,<sym>		(BFD_RELOC_MIPS_HIGHER)
	       dsll	$tempreg,16
	       daddiu	$tempreg,<sym>		(BFD_RELOC_HI16_S)
	       dsll	$tempreg,16
	       daddu	$tempreg,$tempreg,$breg
	       <op>	$treg,<sym>($tempreg)	(BFD_RELOC_LO16)

	     If we have 64-bit addresses, as an optimization, for
	     addresses which are 32-bit constants (e.g. kseg0/kseg1
	     addresses) we fall back to the 32-bit address generation
	     mechanism since it is more efficient.  Note that due to
	     the signed offset used by memory operations, the 32-bit
	     range is shifted down by 32768 here.  This code should
	     probably attempt to generate 64-bit constants more
	     efficiently in general.

	     As an extension for architectures with 64-bit registers,
	     we don't truncate 64-bit addresses given as literal
	     constants down to 32 bits, to support existing practice
	     in the mips64 Linux (the kernel), that compiles source
	     files with -mabi=64, assembling them as o32 or n32 (with
	     -Wa,-32 or -Wa,-n32).  This is not beautiful, but since
	     the whole kernel is loaded into a memory region that is
	     addressable with sign-extended 32-bit addresses, it is
	     wasteful to compute the upper 32 bits of every
	     non-literal address, that takes more space and time.
	     Some day this should probably be implemented as an
	     assembler option, such that the kernel doesn't have to
	     use such ugly hacks, even though it will still have to
	     end up converting the binary to ELF32 for a number of
	     platforms whose boot loaders don't support ELF64
	     binaries.  */
	  if ((HAVE_64BIT_ADDRESSES
	       && ! (offset_expr.X_op == O_constant
		     && IS_SEXT_32BIT_NUM (offset_expr.X_add_number + 0x8000)))
	      || (HAVE_64BIT_GPRS
		  && offset_expr.X_op == O_constant
		  && ! IS_SEXT_32BIT_NUM (offset_expr.X_add_number + 0x8000)))
	    {
	      /* ??? We don't provide a GP-relative alternative for
		 these macros.  It used not to be possible with the
		 original relaxation code, but it could be done now.  */

	      if (used_at == 0 && ! mips_opts.noat)
		{
		  macro_build (&offset_expr, "lui", "t,u", tempreg,
			       BFD_RELOC_MIPS_HIGHEST);
		  macro_build (&offset_expr, "lui", "t,u", AT,
			       BFD_RELOC_HI16_S);
		  macro_build (&offset_expr, "daddiu", "t,r,j", tempreg,
			       tempreg, BFD_RELOC_MIPS_HIGHER);
		  if (breg != 0)
		    macro_build (NULL, "daddu", "d,v,t", AT, AT, breg);
		  macro_build (NULL, "dsll32", "d,w,<", tempreg, tempreg, 0);
		  macro_build (NULL, "daddu", "d,v,t", tempreg, tempreg, AT);
		  macro_build (&offset_expr, s, fmt, treg, BFD_RELOC_LO16,
			       tempreg);
		  used_at = 1;
		}
	      else
		{
		  macro_build (&offset_expr, "lui", "t,u", tempreg,
			       BFD_RELOC_MIPS_HIGHEST);
		  macro_build (&offset_expr, "daddiu", "t,r,j", tempreg,
			       tempreg, BFD_RELOC_MIPS_HIGHER);
		  macro_build (NULL, "dsll", "d,w,<", tempreg, tempreg, 16);
		  macro_build (&offset_expr, "daddiu", "t,r,j", tempreg,
			       tempreg, BFD_RELOC_HI16_S);
		  macro_build (NULL, "dsll", "d,w,<", tempreg, tempreg, 16);
		  if (breg != 0)
		    macro_build (NULL, "daddu", "d,v,t",
				 tempreg, tempreg, breg);
		  macro_build (&offset_expr, s, fmt, treg,
			       BFD_RELOC_LO16, tempreg);
		}

	      return;
	    }

	  if (offset_expr.X_op == O_constant
	      && ! IS_SEXT_32BIT_NUM (offset_expr.X_add_number + 0x8000))
	    as_bad (_("load/store address overflow (max 32 bits)"));

	  if (breg == 0)
	    {
	      if ((valueT) offset_expr.X_add_number <= MAX_GPREL_OFFSET
		  && ! nopic_need_relax (offset_expr.X_add_symbol, 1))
		{
		  relax_start (offset_expr.X_add_symbol);
		  macro_build (&offset_expr, s, fmt, treg, BFD_RELOC_GPREL16,
			       mips_gp_register);
		  relax_switch ();
		  used_at = 0;
		}
	      macro_build_lui (&offset_expr, tempreg);
	      macro_build (&offset_expr, s, fmt, treg,
			   BFD_RELOC_LO16, tempreg);
	      if (mips_relax.sequence)
		relax_end ();
	    }
	  else
	    {
	      if ((valueT) offset_expr.X_add_number <= MAX_GPREL_OFFSET
		  && ! nopic_need_relax (offset_expr.X_add_symbol, 1))
		{
		  relax_start (offset_expr.X_add_symbol);
		  macro_build (NULL, ADDRESS_ADD_INSN, "d,v,t",
			       tempreg, breg, mips_gp_register);
		  macro_build (&offset_expr, s, fmt, treg,
			       BFD_RELOC_GPREL16, tempreg);
		  relax_switch ();
		}
	      macro_build_lui (&offset_expr, tempreg);
	      macro_build (NULL, ADDRESS_ADD_INSN, "d,v,t",
			   tempreg, tempreg, breg);
	      macro_build (&offset_expr, s, fmt, treg,
			   BFD_RELOC_LO16, tempreg);
	      if (mips_relax.sequence)
		relax_end ();
	    }
	}
      else if (mips_pic == SVR4_PIC && ! mips_big_got)
	{
	  int lw_reloc_type = (int) BFD_RELOC_MIPS_GOT16;

	  /* If this is a reference to an external symbol, we want
	       lw	$tempreg,<sym>($gp)	(BFD_RELOC_MIPS_GOT16)
	       nop
	       <op>	$treg,0($tempreg)
	     Otherwise we want
	       lw	$tempreg,<sym>($gp)	(BFD_RELOC_MIPS_GOT16)
	       nop
	       addiu	$tempreg,$tempreg,<sym>	(BFD_RELOC_LO16)
	       <op>	$treg,0($tempreg)

	     For NewABI, we want
	       lw	$tempreg,<sym>($gp)	(BFD_RELOC_MIPS_GOT_PAGE)
	       <op>	$treg,<sym>($tempreg)   (BFD_RELOC_MIPS_GOT_OFST)

	     If there is a base register, we add it to $tempreg before
	     the <op>.  If there is a constant, we stick it in the
	     <op> instruction.  We don't handle constants larger than
	     16 bits, because we have no way to load the upper 16 bits
	     (actually, we could handle them for the subset of cases
	     in which we are not using $at).  */
	  assert (offset_expr.X_op == O_symbol);
	  if (HAVE_NEWABI)
	    {
	      macro_build (&offset_expr, ADDRESS_LOAD_INSN, "t,o(b)", tempreg,
			   BFD_RELOC_MIPS_GOT_PAGE, mips_gp_register);
	      if (breg != 0)
		macro_build (NULL, ADDRESS_ADD_INSN, "d,v,t",
			     tempreg, tempreg, breg);
	      macro_build (&offset_expr, s, fmt, treg,
			   BFD_RELOC_MIPS_GOT_OFST, tempreg);

	      if (! used_at)
		return;

	      break;
	    }
	  expr1.X_add_number = offset_expr.X_add_number;
	  offset_expr.X_add_number = 0;
	  if (expr1.X_add_number < -0x8000
	      || expr1.X_add_number >= 0x8000)
	    as_bad (_("PIC code offset overflow (max 16 signed bits)"));
	  macro_build (&offset_expr, ADDRESS_LOAD_INSN, "t,o(b)", tempreg,
		       lw_reloc_type, mips_gp_register);
	  macro_build (NULL, "nop", "");
	  relax_start (offset_expr.X_add_symbol);
	  relax_switch ();
	  macro_build (&offset_expr, ADDRESS_ADDI_INSN, "t,r,j", tempreg,
		       tempreg, BFD_RELOC_LO16);
	  relax_end ();
	  if (breg != 0)
	    macro_build (NULL, ADDRESS_ADD_INSN, "d,v,t",
			 tempreg, tempreg, breg);
	  macro_build (&expr1, s, fmt, treg, BFD_RELOC_LO16, tempreg);
	}
      else if (mips_pic == SVR4_PIC && ! HAVE_NEWABI)
	{
	  int gpdelay;

	  /* If this is a reference to an external symbol, we want
	       lui	$tempreg,<sym>		(BFD_RELOC_MIPS_GOT_HI16)
	       addu	$tempreg,$tempreg,$gp
	       lw	$tempreg,<sym>($tempreg) (BFD_RELOC_MIPS_GOT_LO16)
	       <op>	$treg,0($tempreg)
	     Otherwise we want
	       lw	$tempreg,<sym>($gp)	(BFD_RELOC_MIPS_GOT16)
	       nop
	       addiu	$tempreg,$tempreg,<sym>	(BFD_RELOC_LO16)
	       <op>	$treg,0($tempreg)
	     If there is a base register, we add it to $tempreg before
	     the <op>.  If there is a constant, we stick it in the
	     <op> instruction.  We don't handle constants larger than
	     16 bits, because we have no way to load the upper 16 bits
	     (actually, we could handle them for the subset of cases
	     in which we are not using $at).  */
	  assert (offset_expr.X_op == O_symbol);
	  expr1.X_add_number = offset_expr.X_add_number;
	  offset_expr.X_add_number = 0;
	  if (expr1.X_add_number < -0x8000
	      || expr1.X_add_number >= 0x8000)
	    as_bad (_("PIC code offset overflow (max 16 signed bits)"));
	  gpdelay = reg_needs_delay (mips_gp_register);
	  relax_start (offset_expr.X_add_symbol);
	  macro_build (&offset_expr, "lui", "t,u", tempreg,
		       BFD_RELOC_MIPS_GOT_HI16);
	  macro_build (NULL, ADDRESS_ADD_INSN, "d,v,t", tempreg, tempreg,
		       mips_gp_register);
	  macro_build (&offset_expr, ADDRESS_LOAD_INSN, "t,o(b)", tempreg,
		       BFD_RELOC_MIPS_GOT_LO16, tempreg);
	  relax_switch ();
	  if (gpdelay)
	    macro_build (NULL, "nop", "");
	  macro_build (&offset_expr, ADDRESS_LOAD_INSN, "t,o(b)", tempreg,
		       BFD_RELOC_MIPS_GOT16, mips_gp_register);
	  macro_build (NULL, "nop", "");
	  macro_build (&offset_expr, ADDRESS_ADDI_INSN, "t,r,j", tempreg,
		       tempreg, BFD_RELOC_LO16);
	  relax_end ();

	  if (breg != 0)
	    macro_build (NULL, ADDRESS_ADD_INSN, "d,v,t",
			 tempreg, tempreg, breg);
	  macro_build (&expr1, s, fmt, treg, BFD_RELOC_LO16, tempreg);
	}
      else if (mips_pic == SVR4_PIC && HAVE_NEWABI)
	{
	  /* If this is a reference to an external symbol, we want
	       lui	$tempreg,<sym>		(BFD_RELOC_MIPS_GOT_HI16)
	       add	$tempreg,$tempreg,$gp
	       lw	$tempreg,<sym>($tempreg) (BFD_RELOC_MIPS_GOT_LO16)
	       <op>	$treg,<ofst>($tempreg)
	     Otherwise, for local symbols, we want:
	       lw	$tempreg,<sym>($gp)	(BFD_RELOC_MIPS_GOT_PAGE)
	       <op>	$treg,<sym>($tempreg)   (BFD_RELOC_MIPS_GOT_OFST)  */
	  assert (offset_expr.X_op == O_symbol);
	  expr1.X_add_number = offset_expr.X_add_number;
	  offset_expr.X_add_number = 0;
	  if (expr1.X_add_number < -0x8000
	      || expr1.X_add_number >= 0x8000)
	    as_bad (_("PIC code offset overflow (max 16 signed bits)"));
	  relax_start (offset_expr.X_add_symbol);
	  macro_build (&offset_expr, "lui", "t,u", tempreg,
		       BFD_RELOC_MIPS_GOT_HI16);
	  macro_build (NULL, ADDRESS_ADD_INSN, "d,v,t", tempreg, tempreg,
		       mips_gp_register);
	  macro_build (&offset_expr, ADDRESS_LOAD_INSN, "t,o(b)", tempreg,
		       BFD_RELOC_MIPS_GOT_LO16, tempreg);
	  if (breg != 0)
	    macro_build (NULL, ADDRESS_ADD_INSN, "d,v,t",
			 tempreg, tempreg, breg);
	  macro_build (&expr1, s, fmt, treg, BFD_RELOC_LO16, tempreg);

	  relax_switch ();
	  offset_expr.X_add_number = expr1.X_add_number;
	  macro_build (&offset_expr, ADDRESS_LOAD_INSN, "t,o(b)", tempreg,
		       BFD_RELOC_MIPS_GOT_PAGE, mips_gp_register);
	  if (breg != 0)
	    macro_build (NULL, ADDRESS_ADD_INSN, "d,v,t",
			 tempreg, tempreg, breg);
	  macro_build (&offset_expr, s, fmt, treg,
		       BFD_RELOC_MIPS_GOT_OFST, tempreg);
	  relax_end ();
	}
      else if (mips_pic == EMBEDDED_PIC)
	{
	  /* If there is no base register, we want
	       <op>	$treg,<sym>($gp)	(BFD_RELOC_GPREL16)
	     If there is a base register, we want
	       addu	$tempreg,$breg,$gp
	       <op>	$treg,<sym>($tempreg)	(BFD_RELOC_GPREL16)
	     */
	  assert (offset_expr.X_op == O_symbol);
	  if (breg == 0)
	    {
	      macro_build (&offset_expr, s, fmt, treg, BFD_RELOC_GPREL16,
			   mips_gp_register);
	      used_at = 0;
	    }
	  else
	    {
	      macro_build (NULL, ADDRESS_ADD_INSN, "d,v,t",
			   tempreg, breg, mips_gp_register);
	      macro_build (&offset_expr, s, fmt, treg,
			   BFD_RELOC_GPREL16, tempreg);
	    }
	}
      else
	abort ();

      if (! used_at)
	return;

      break;

    case M_LI:
    case M_LI_S:
      load_register (treg, &imm_expr, 0);
      return;

    case M_DLI:
      load_register (treg, &imm_expr, 1);
      return;

    case M_LI_SS:
      if (imm_expr.X_op == O_constant)
	{
	  load_register (AT, &imm_expr, 0);
	  macro_build (NULL, "mtc1", "t,G", AT, treg);
	  break;
	}
      else
	{
	  assert (offset_expr.X_op == O_symbol
		  && strcmp (segment_name (S_GET_SEGMENT
					   (offset_expr.X_add_symbol)),
			     ".lit4") == 0
		  && offset_expr.X_add_number == 0);
	  macro_build (&offset_expr, "lwc1", "T,o(b)", treg,
		       BFD_RELOC_MIPS_LITERAL, mips_gp_register);
	  return;
	}

    case M_LI_D:
      /* Check if we have a constant in IMM_EXPR.  If the GPRs are 64 bits
         wide, IMM_EXPR is the entire value.  Otherwise IMM_EXPR is the high
         order 32 bits of the value and the low order 32 bits are either
         zero or in OFFSET_EXPR.  */
      if (imm_expr.X_op == O_constant || imm_expr.X_op == O_big)
	{
	  if (HAVE_64BIT_GPRS)
	    load_register (treg, &imm_expr, 1);
	  else
	    {
	      int hreg, lreg;

	      if (target_big_endian)
		{
		  hreg = treg;
		  lreg = treg + 1;
		}
	      else
		{
		  hreg = treg + 1;
		  lreg = treg;
		}

	      if (hreg <= 31)
		load_register (hreg, &imm_expr, 0);
	      if (lreg <= 31)
		{
		  if (offset_expr.X_op == O_absent)
		    move_register (lreg, 0);
		  else
		    {
		      assert (offset_expr.X_op == O_constant);
		      load_register (lreg, &offset_expr, 0);
		    }
		}
	    }
	  return;
	}

      /* We know that sym is in the .rdata section.  First we get the
	 upper 16 bits of the address.  */
      if (mips_pic == NO_PIC)
	{
	  macro_build_lui (&offset_expr, AT);
	}
      else if (mips_pic == SVR4_PIC)
	{
	  macro_build (&offset_expr, ADDRESS_LOAD_INSN, "t,o(b)", AT,
		       BFD_RELOC_MIPS_GOT16, mips_gp_register);
	}
      else if (mips_pic == EMBEDDED_PIC)
	{
	  /* For embedded PIC we pick up the entire address off $gp in
	     a single instruction.  */
	  macro_build (&offset_expr, ADDRESS_ADDI_INSN, "t,r,j", AT,
		       mips_gp_register, BFD_RELOC_GPREL16);
	  offset_expr.X_op = O_constant;
	  offset_expr.X_add_number = 0;
	}
      else
	abort ();

      /* Now we load the register(s).  */
      if (HAVE_64BIT_GPRS)
	macro_build (&offset_expr, "ld", "t,o(b)", treg, BFD_RELOC_LO16, AT);
      else
	{
	  macro_build (&offset_expr, "lw", "t,o(b)", treg, BFD_RELOC_LO16, AT);
	  if (treg != RA)
	    {
	      /* FIXME: How in the world do we deal with the possible
		 overflow here?  */
	      offset_expr.X_add_number += 4;
	      macro_build (&offset_expr, "lw", "t,o(b)",
			   treg + 1, BFD_RELOC_LO16, AT);
	    }
	}
      break;

    case M_LI_DD:
      /* Check if we have a constant in IMM_EXPR.  If the FPRs are 64 bits
         wide, IMM_EXPR is the entire value and the GPRs are known to be 64
         bits wide as well.  Otherwise IMM_EXPR is the high order 32 bits of
         the value and the low order 32 bits are either zero or in
         OFFSET_EXPR.  */
      if (imm_expr.X_op == O_constant || imm_expr.X_op == O_big)
	{
	  load_register (AT, &imm_expr, HAVE_64BIT_FPRS);
	  if (HAVE_64BIT_FPRS)
	    {
	      assert (HAVE_64BIT_GPRS);
	      macro_build (NULL, "dmtc1", "t,S", AT, treg);
	    }
	  else
	    {
	      macro_build (NULL, "mtc1", "t,G", AT, treg + 1);
	      if (offset_expr.X_op == O_absent)
		macro_build (NULL, "mtc1", "t,G", 0, treg);
	      else
		{
		  assert (offset_expr.X_op == O_constant);
		  load_register (AT, &offset_expr, 0);
		  macro_build (NULL, "mtc1", "t,G", AT, treg);
		}
	    }
	  break;
	}

      assert (offset_expr.X_op == O_symbol
	      && offset_expr.X_add_number == 0);
      s = segment_name (S_GET_SEGMENT (offset_expr.X_add_symbol));
      if (strcmp (s, ".lit8") == 0)
	{
	  if (mips_opts.isa != ISA_MIPS1)
	    {
	      macro_build (&offset_expr, "ldc1", "T,o(b)", treg,
			   BFD_RELOC_MIPS_LITERAL, mips_gp_register);
	      return;
	    }
	  breg = mips_gp_register;
	  r = BFD_RELOC_MIPS_LITERAL;
	  goto dob;
	}
      else
	{
	  assert (strcmp (s, RDATA_SECTION_NAME) == 0);
	  if (mips_pic == SVR4_PIC)
	    macro_build (&offset_expr, ADDRESS_LOAD_INSN, "t,o(b)", AT,
			 BFD_RELOC_MIPS_GOT16, mips_gp_register);
	  else
	    {
	      /* FIXME: This won't work for a 64 bit address.  */
	      macro_build_lui (&offset_expr, AT);
	    }

	  if (mips_opts.isa != ISA_MIPS1)
	    {
	      macro_build (&offset_expr, "ldc1", "T,o(b)",
			   treg, BFD_RELOC_LO16, AT);
	      break;
	    }
	  breg = AT;
	  r = BFD_RELOC_LO16;
	  goto dob;
	}

    case M_L_DOB:
      if (mips_opts.arch == CPU_R4650)
	{
	  as_bad (_("opcode not supported on this processor"));
	  return;
	}
      /* Even on a big endian machine $fn comes before $fn+1.  We have
	 to adjust when loading from memory.  */
      r = BFD_RELOC_LO16;
    dob:
      assert (mips_opts.isa == ISA_MIPS1);
      macro_build (&offset_expr, "lwc1", "T,o(b)",
		   target_big_endian ? treg + 1 : treg, r, breg);
      /* FIXME: A possible overflow which I don't know how to deal
	 with.  */
      offset_expr.X_add_number += 4;
      macro_build (&offset_expr, "lwc1", "T,o(b)",
		   target_big_endian ? treg : treg + 1, r, breg);

      if (breg != AT)
	return;
      break;

    case M_L_DAB:
      /*
       * The MIPS assembler seems to check for X_add_number not
       * being double aligned and generating:
       *	lui	at,%hi(foo+1)
       *	addu	at,at,v1
       *	addiu	at,at,%lo(foo+1)
       *	lwc1	f2,0(at)
       *	lwc1	f3,4(at)
       * But, the resulting address is the same after relocation so why
       * generate the extra instruction?
       */
      if (mips_opts.arch == CPU_R4650)
	{
	  as_bad (_("opcode not supported on this processor"));
	  return;
	}
      /* Itbl support may require additional care here.  */
      coproc = 1;
      if (mips_opts.isa != ISA_MIPS1)
	{
	  s = "ldc1";
	  goto ld;
	}

      s = "lwc1";
      fmt = "T,o(b)";
      goto ldd_std;

    case M_S_DAB:
      if (mips_opts.arch == CPU_R4650)
	{
	  as_bad (_("opcode not supported on this processor"));
	  return;
	}

      if (mips_opts.isa != ISA_MIPS1)
	{
	  s = "sdc1";
	  goto st;
	}

      s = "swc1";
      fmt = "T,o(b)";
      /* Itbl support may require additional care here.  */
      coproc = 1;
      goto ldd_std;

    case M_LD_AB:
      if (HAVE_64BIT_GPRS)
	{
	  s = "ld";
	  goto ld;
	}

      s = "lw";
      fmt = "t,o(b)";
      goto ldd_std;

    case M_SD_AB:
      if (HAVE_64BIT_GPRS)
	{
	  s = "sd";
	  goto st;
	}

      s = "sw";
      fmt = "t,o(b)";

    ldd_std:
      /* We do _not_ bother to allow embedded PIC (symbol-local_symbol)
	 loads for the case of doing a pair of loads to simulate an 'ld'.
	 This is not currently done by the compiler, and assembly coders
	 writing embedded-pic code can cope.  */

      if (offset_expr.X_op != O_symbol
	  && offset_expr.X_op != O_constant)
	{
	  as_bad (_("expression too complex"));
	  offset_expr.X_op = O_constant;
	}

      /* Even on a big endian machine $fn comes before $fn+1.  We have
	 to adjust when loading from memory.  We set coproc if we must
	 load $fn+1 first.  */
      /* Itbl support may require additional care here.  */
      if (! target_big_endian)
	coproc = 0;

      if (mips_pic == NO_PIC
	  || offset_expr.X_op == O_constant)
	{
	  /* If this is a reference to a GP relative symbol, we want
	       <op>	$treg,<sym>($gp)	(BFD_RELOC_GPREL16)
	       <op>	$treg+1,<sym>+4($gp)	(BFD_RELOC_GPREL16)
	     If we have a base register, we use this
	       addu	$at,$breg,$gp
	       <op>	$treg,<sym>($at)	(BFD_RELOC_GPREL16)
	       <op>	$treg+1,<sym>+4($at)	(BFD_RELOC_GPREL16)
	     If this is not a GP relative symbol, we want
	       lui	$at,<sym>		(BFD_RELOC_HI16_S)
	       <op>	$treg,<sym>($at)	(BFD_RELOC_LO16)
	       <op>	$treg+1,<sym>+4($at)	(BFD_RELOC_LO16)
	     If there is a base register, we add it to $at after the
	     lui instruction.  If there is a constant, we always use
	     the last case.  */
	  if ((valueT) offset_expr.X_add_number > MAX_GPREL_OFFSET
	      || nopic_need_relax (offset_expr.X_add_symbol, 1))
	    used_at = 1;
	  else
	    {
	      relax_start (offset_expr.X_add_symbol);
	      if (breg == 0)
		{
		  tempreg = mips_gp_register;
		  used_at = 0;
		}
	      else
		{
		  macro_build (NULL, ADDRESS_ADD_INSN, "d,v,t",
			       AT, breg, mips_gp_register);
		  tempreg = AT;
		  used_at = 1;
		}

	      /* Itbl support may require additional care here.  */
	      macro_build (&offset_expr, s, fmt, coproc ? treg + 1 : treg,
			   BFD_RELOC_GPREL16, tempreg);
	      offset_expr.X_add_number += 4;

	      /* Set mips_optimize to 2 to avoid inserting an
                 undesired nop.  */
	      hold_mips_optimize = mips_optimize;
	      mips_optimize = 2;
	      /* Itbl support may require additional care here.  */
	      macro_build (&offset_expr, s, fmt, coproc ? treg : treg + 1,
			   BFD_RELOC_GPREL16, tempreg);
	      mips_optimize = hold_mips_optimize;

	      relax_switch ();

	      /* We just generated two relocs.  When tc_gen_reloc
		 handles this case, it will skip the first reloc and
		 handle the second.  The second reloc already has an
		 extra addend of 4, which we added above.  We must
		 subtract it out, and then subtract another 4 to make
		 the first reloc come out right.  The second reloc
		 will come out right because we are going to add 4 to
		 offset_expr when we build its instruction below.

		 If we have a symbol, then we don't want to include
		 the offset, because it will wind up being included
		 when we generate the reloc.  */

	      if (offset_expr.X_op == O_constant)
		offset_expr.X_add_number -= 8;
	      else
		{
		  offset_expr.X_add_number = -4;
		  offset_expr.X_op = O_constant;
		}
	    }
	  macro_build_lui (&offset_expr, AT);
	  if (breg != 0)
	    macro_build (NULL, ADDRESS_ADD_INSN, "d,v,t", AT, breg, AT);
	  /* Itbl support may require additional care here.  */
	  macro_build (&offset_expr, s, fmt, coproc ? treg + 1 : treg,
		       BFD_RELOC_LO16, AT);
	  /* FIXME: How do we handle overflow here?  */
	  offset_expr.X_add_number += 4;
	  /* Itbl support may require additional care here.  */
	  macro_build (&offset_expr, s, fmt, coproc ? treg : treg + 1,
		       BFD_RELOC_LO16, AT);
	  if (mips_relax.sequence)
	    relax_end ();
	}
      else if (mips_pic == SVR4_PIC && ! mips_big_got)
	{
	  /* If this is a reference to an external symbol, we want
	       lw	$at,<sym>($gp)		(BFD_RELOC_MIPS_GOT16)
	       nop
	       <op>	$treg,0($at)
	       <op>	$treg+1,4($at)
	     Otherwise we want
	       lw	$at,<sym>($gp)		(BFD_RELOC_MIPS_GOT16)
	       nop
	       <op>	$treg,<sym>($at)	(BFD_RELOC_LO16)
	       <op>	$treg+1,<sym>+4($at)	(BFD_RELOC_LO16)
	     If there is a base register we add it to $at before the
	     lwc1 instructions.  If there is a constant we include it
	     in the lwc1 instructions.  */
	  used_at = 1;
	  expr1.X_add_number = offset_expr.X_add_number;
	  if (expr1.X_add_number < -0x8000
	      || expr1.X_add_number >= 0x8000 - 4)
	    as_bad (_("PIC code offset overflow (max 16 signed bits)"));
	  load_got_offset (AT, &offset_expr);
	  macro_build (NULL, "nop", "");
	  if (breg != 0)
	    macro_build (NULL, ADDRESS_ADD_INSN, "d,v,t", AT, breg, AT);

	  /* Set mips_optimize to 2 to avoid inserting an undesired
             nop.  */
	  hold_mips_optimize = mips_optimize;
	  mips_optimize = 2;

	  /* Itbl support may require additional care here.  */
	  relax_start (offset_expr.X_add_symbol);
	  macro_build (&expr1, s, fmt, coproc ? treg + 1 : treg,
		       BFD_RELOC_LO16, AT);
	  expr1.X_add_number += 4;
	  macro_build (&expr1, s, fmt, coproc ? treg : treg + 1,
		       BFD_RELOC_LO16, AT);
	  relax_switch ();
	  macro_build (&offset_expr, s, fmt, coproc ? treg + 1 : treg,
		       BFD_RELOC_LO16, AT);
	  offset_expr.X_add_number += 4;
	  macro_build (&offset_expr, s, fmt, coproc ? treg : treg + 1,
		       BFD_RELOC_LO16, AT);
	  relax_end ();

	  mips_optimize = hold_mips_optimize;
	}
      else if (mips_pic == SVR4_PIC)
	{
	  int gpdelay;

	  /* If this is a reference to an external symbol, we want
	       lui	$at,<sym>		(BFD_RELOC_MIPS_GOT_HI16)
	       addu	$at,$at,$gp
	       lw	$at,<sym>($at)		(BFD_RELOC_MIPS_GOT_LO16)
	       nop
	       <op>	$treg,0($at)
	       <op>	$treg+1,4($at)
	     Otherwise we want
	       lw	$at,<sym>($gp)		(BFD_RELOC_MIPS_GOT16)
	       nop
	       <op>	$treg,<sym>($at)	(BFD_RELOC_LO16)
	       <op>	$treg+1,<sym>+4($at)	(BFD_RELOC_LO16)
	     If there is a base register we add it to $at before the
	     lwc1 instructions.  If there is a constant we include it
	     in the lwc1 instructions.  */
	  used_at = 1;
	  expr1.X_add_number = offset_expr.X_add_number;
	  offset_expr.X_add_number = 0;
	  if (expr1.X_add_number < -0x8000
	      || expr1.X_add_number >= 0x8000 - 4)
	    as_bad (_("PIC code offset overflow (max 16 signed bits)"));
	  gpdelay = reg_needs_delay (mips_gp_register);
	  relax_start (offset_expr.X_add_symbol);
	  macro_build (&offset_expr, "lui", "t,u",
		       AT, BFD_RELOC_MIPS_GOT_HI16);
	  macro_build (NULL, ADDRESS_ADD_INSN, "d,v,t",
		       AT, AT, mips_gp_register);
	  macro_build (&offset_expr, ADDRESS_LOAD_INSN, "t,o(b)",
		       AT, BFD_RELOC_MIPS_GOT_LO16, AT);
	  macro_build (NULL, "nop", "");
	  if (breg != 0)
	    macro_build (NULL, ADDRESS_ADD_INSN, "d,v,t", AT, breg, AT);
	  /* Itbl support may require additional care here.  */
	  macro_build (&expr1, s, fmt, coproc ? treg + 1 : treg,
		       BFD_RELOC_LO16, AT);
	  expr1.X_add_number += 4;

	  /* Set mips_optimize to 2 to avoid inserting an undesired
             nop.  */
	  hold_mips_optimize = mips_optimize;
	  mips_optimize = 2;
	  /* Itbl support may require additional care here.  */
	  macro_build (&expr1, s, fmt, coproc ? treg : treg + 1,
		       BFD_RELOC_LO16, AT);
	  mips_optimize = hold_mips_optimize;
	  expr1.X_add_number -= 4;

	  relax_switch ();
	  offset_expr.X_add_number = expr1.X_add_number;
	  if (gpdelay)
	    macro_build (NULL, "nop", "");
	  macro_build (&offset_expr, ADDRESS_LOAD_INSN, "t,o(b)", AT,
		       BFD_RELOC_MIPS_GOT16, mips_gp_register);
	  macro_build (NULL, "nop", "");
	  if (breg != 0)
	    macro_build (NULL, ADDRESS_ADD_INSN, "d,v,t", AT, breg, AT);
	  /* Itbl support may require additional care here.  */
	  macro_build (&offset_expr, s, fmt, coproc ? treg + 1 : treg,
		       BFD_RELOC_LO16, AT);
	  offset_expr.X_add_number += 4;

	  /* Set mips_optimize to 2 to avoid inserting an undesired
             nop.  */
	  hold_mips_optimize = mips_optimize;
	  mips_optimize = 2;
	  /* Itbl support may require additional care here.  */
	  macro_build (&offset_expr, s, fmt, coproc ? treg : treg + 1,
		       BFD_RELOC_LO16, AT);
	  mips_optimize = hold_mips_optimize;
	  relax_end ();
	}
      else if (mips_pic == EMBEDDED_PIC)
	{
	  /* If there is no base register, we use
	       <op>	$treg,<sym>($gp)	(BFD_RELOC_GPREL16)
	       <op>	$treg+1,<sym>+4($gp)	(BFD_RELOC_GPREL16)
	     If we have a base register, we use
	       addu	$at,$breg,$gp
	       <op>	$treg,<sym>($at)	(BFD_RELOC_GPREL16)
	       <op>	$treg+1,<sym>+4($at)	(BFD_RELOC_GPREL16)
	     */
	  if (breg == 0)
	    {
	      tempreg = mips_gp_register;
	      used_at = 0;
	    }
	  else
	    {
	      macro_build (NULL, ADDRESS_ADD_INSN, "d,v,t",
			   AT, breg, mips_gp_register);
	      tempreg = AT;
	      used_at = 1;
	    }

	  /* Itbl support may require additional care here.  */
	  macro_build (&offset_expr, s, fmt, coproc ? treg + 1 : treg,
		       BFD_RELOC_GPREL16, tempreg);
	  offset_expr.X_add_number += 4;
	  /* Itbl support may require additional care here.  */
	  macro_build (&offset_expr, s, fmt, coproc ? treg : treg + 1,
		       BFD_RELOC_GPREL16, tempreg);
	}
      else
	abort ();

      if (! used_at)
	return;

      break;

    case M_LD_OB:
      s = "lw";
      goto sd_ob;
    case M_SD_OB:
      s = "sw";
    sd_ob:
      assert (HAVE_32BIT_ADDRESSES);
      macro_build (&offset_expr, s, "t,o(b)", treg, BFD_RELOC_LO16, breg);
      offset_expr.X_add_number += 4;
      macro_build (&offset_expr, s, "t,o(b)", treg + 1, BFD_RELOC_LO16, breg);
      return;

   /* New code added to support COPZ instructions.
      This code builds table entries out of the macros in mip_opcodes.
      R4000 uses interlocks to handle coproc delays.
      Other chips (like the R3000) require nops to be inserted for delays.

      FIXME: Currently, we require that the user handle delays.
      In order to fill delay slots for non-interlocked chips,
      we must have a way to specify delays based on the coprocessor.
      Eg. 4 cycles if load coproc reg from memory, 1 if in cache, etc.
      What are the side-effects of the cop instruction?
      What cache support might we have and what are its effects?
      Both coprocessor & memory require delays. how long???
      What registers are read/set/modified?

      If an itbl is provided to interpret cop instructions,
      this knowledge can be encoded in the itbl spec.  */

    case M_COP0:
      s = "c0";
      goto copz;
    case M_COP1:
      s = "c1";
      goto copz;
    case M_COP2:
      s = "c2";
      goto copz;
    case M_COP3:
      s = "c3";
    copz:
      /* For now we just do C (same as Cz).  The parameter will be
         stored in insn_opcode by mips_ip.  */
      macro_build (NULL, s, "C", ip->insn_opcode);
      return;

    case M_MOVE:
      move_register (dreg, sreg);
      return;

#ifdef LOSING_COMPILER
    default:
      /* Try and see if this is a new itbl instruction.
         This code builds table entries out of the macros in mip_opcodes.
         FIXME: For now we just assemble the expression and pass it's
         value along as a 32-bit immediate.
         We may want to have the assembler assemble this value,
         so that we gain the assembler's knowledge of delay slots,
         symbols, etc.
         Would it be more efficient to use mask (id) here? */
      if (itbl_have_entries
	  && (immed_expr = itbl_assemble (ip->insn_mo->name, "")))
	{
	  s = ip->insn_mo->name;
	  s2 = "cop3";
	  coproc = ITBL_DECODE_PNUM (immed_expr);;
	  macro_build (&immed_expr, s, "C");
	  return;
	}
      macro2 (ip);
      return;
    }
  if (mips_opts.noat)
    as_warn (_("Macro used $at after \".set noat\""));
}

static void
macro2 (struct mips_cl_insn *ip)
{
  register int treg, sreg, dreg, breg;
  int tempreg;
  int mask;
  int used_at;
  expressionS expr1;
  const char *s;
  const char *s2;
  const char *fmt;
  int likely = 0;
  int dbl = 0;
  int coproc = 0;
  int lr = 0;
  int imm = 0;
  int off;
  offsetT maxnum;
  bfd_reloc_code_real_type r;

  treg = (ip->insn_opcode >> 16) & 0x1f;
  dreg = (ip->insn_opcode >> 11) & 0x1f;
  sreg = breg = (ip->insn_opcode >> 21) & 0x1f;
  mask = ip->insn_mo->mask;

  expr1.X_op = O_constant;
  expr1.X_op_symbol = NULL;
  expr1.X_add_symbol = NULL;
  expr1.X_add_number = 1;

  switch (mask)
    {
#endif /* LOSING_COMPILER */

    case M_DMUL:
      dbl = 1;
    case M_MUL:
      macro_build (NULL, dbl ? "dmultu" : "multu", "s,t", sreg, treg);
      macro_build (NULL, "mflo", "d", dreg);
      return;

    case M_DMUL_I:
      dbl = 1;
    case M_MUL_I:
      /* The MIPS assembler some times generates shifts and adds.  I'm
	 not trying to be that fancy. GCC should do this for us
	 anyway.  */
      load_register (AT, &imm_expr, dbl);
      macro_build (NULL, dbl ? "dmult" : "mult", "s,t", sreg, AT);
      macro_build (NULL, "mflo", "d", dreg);
      break;

    case M_DMULO_I:
      dbl = 1;
    case M_MULO_I:
      imm = 1;
      goto do_mulo;

    case M_DMULO:
      dbl = 1;
    case M_MULO:
    do_mulo:
      mips_emit_delays (TRUE);
      ++mips_opts.noreorder;
      mips_any_noreorder = 1;
      if (imm)
	load_register (AT, &imm_expr, dbl);
      macro_build (NULL, dbl ? "dmult" : "mult", "s,t", sreg, imm ? AT : treg);
      macro_build (NULL, "mflo", "d", dreg);
      macro_build (NULL, dbl ? "dsra32" : "sra", "d,w,<", dreg, dreg, RA);
      macro_build (NULL, "mfhi", "d", AT);
      if (mips_trap)
	macro_build (NULL, "tne", "s,t,q", dreg, AT, 6);
      else
	{
	  expr1.X_add_number = 8;
	  macro_build (&expr1, "beq", "s,t,p", dreg, AT);
	  macro_build (NULL, "nop", "", 0);
	  macro_build (NULL, "break", "c", 6);
	}
      --mips_opts.noreorder;
      macro_build (NULL, "mflo", "d", dreg);
      break;

    case M_DMULOU_I:
      dbl = 1;
    case M_MULOU_I:
      imm = 1;
      goto do_mulou;

    case M_DMULOU:
      dbl = 1;
    case M_MULOU:
    do_mulou:
      mips_emit_delays (TRUE);
      ++mips_opts.noreorder;
      mips_any_noreorder = 1;
      if (imm)
	load_register (AT, &imm_expr, dbl);
      macro_build (NULL, dbl ? "dmultu" : "multu", "s,t",
		   sreg, imm ? AT : treg);
      macro_build (NULL, "mfhi", "d", AT);
      macro_build (NULL, "mflo", "d", dreg);
      if (mips_trap)
	macro_build (NULL, "tne", "s,t,q", AT, 0, 6);
      else
	{
	  expr1.X_add_number = 8;
	  macro_build (&expr1, "beq", "s,t,p", AT, 0);
	  macro_build (NULL, "nop", "", 0);
	  macro_build (NULL, "break", "c", 6);
	}
      --mips_opts.noreorder;
      break;

    case M_DROL:
      if (ISA_HAS_DROR (mips_opts.isa) || CPU_HAS_DROR (mips_opts.arch))
	{
	  if (dreg == sreg)
	    {
	      tempreg = AT;
	      used_at = 1;
	    }
	  else
	    {
	      tempreg = dreg;
	      used_at = 0;
	    }
	  macro_build (NULL, "dnegu", "d,w", tempreg, treg);
	  macro_build (NULL, "drorv", "d,t,s", dreg, sreg, tempreg);
	  if (used_at)
	    break;
	  return;
	}
      macro_build (NULL, "dsubu", "d,v,t", AT, 0, treg);
      macro_build (NULL, "dsrlv", "d,t,s", AT, sreg, AT);
      macro_build (NULL, "dsllv", "d,t,s", dreg, sreg, treg);
      macro_build (NULL, "or", "d,v,t", dreg, dreg, AT);
      break;

    case M_ROL:
      if (ISA_HAS_ROR (mips_opts.isa) || CPU_HAS_ROR (mips_opts.arch))
	{
	  if (dreg == sreg)
	    {
	      tempreg = AT;
	      used_at = 1;
	    }
	  else
	    {
	      tempreg = dreg;
	      used_at = 0;
	    }
	  macro_build (NULL, "negu", "d,w", tempreg, treg);
	  macro_build (NULL, "rorv", "d,t,s", dreg, sreg, tempreg);
	  if (used_at)
	    break;
	  return;
	}
      macro_build (NULL, "subu", "d,v,t", AT, 0, treg);
      macro_build (NULL, "srlv", "d,t,s", AT, sreg, AT);
      macro_build (NULL, "sllv", "d,t,s", dreg, sreg, treg);
      macro_build (NULL, "or", "d,v,t", dreg, dreg, AT);
      break;

    case M_DROL_I:
      {
	unsigned int rot;
	char *l, *r;

	if (imm_expr.X_op != O_constant)
	  as_bad (_("Improper rotate count"));
	rot = imm_expr.X_add_number & 0x3f;
	if (ISA_HAS_DROR (mips_opts.isa) || CPU_HAS_DROR (mips_opts.arch))
	  {
	    rot = (64 - rot) & 0x3f;
	    if (rot >= 32)
	      macro_build (NULL, "dror32", "d,w,<", dreg, sreg, rot - 32);
	    else
	      macro_build (NULL, "dror", "d,w,<", dreg, sreg, rot);
	    return;
	  }
	if (rot == 0)
	  {
	    macro_build (NULL, "dsrl", "d,w,<", dreg, sreg, 0);
	    return;
	  }
	l = (rot < 0x20) ? "dsll" : "dsll32";
	r = ((0x40 - rot) < 0x20) ? "dsrl" : "dsrl32";
	rot &= 0x1f;
	macro_build (NULL, l, "d,w,<", AT, sreg, rot);
	macro_build (NULL, r, "d,w,<", dreg, sreg, (0x20 - rot) & 0x1f);
	macro_build (NULL, "or", "d,v,t", dreg, dreg, AT);
      }
      break;

    case M_ROL_I:
      {
	unsigned int rot;

	if (imm_expr.X_op != O_constant)
	  as_bad (_("Improper rotate count"));
	rot = imm_expr.X_add_number & 0x1f;
	if (ISA_HAS_ROR (mips_opts.isa) || CPU_HAS_ROR (mips_opts.arch))
	  {
	    macro_build (NULL, "ror", "d,w,<", dreg, sreg, (32 - rot) & 0x1f);
	    return;
	  }
	if (rot == 0)
	  {
	    macro_build (NULL, "srl", "d,w,<", dreg, sreg, 0);
	    return;
	  }
	macro_build (NULL, "sll", "d,w,<", AT, sreg, rot);
	macro_build (NULL, "srl", "d,w,<", dreg, sreg, (0x20 - rot) & 0x1f);
	macro_build (NULL, "or", "d,v,t", dreg, dreg, AT);
      }
      break;

    case M_DROR:
      if (ISA_HAS_DROR (mips_opts.isa) || CPU_HAS_DROR (mips_opts.arch))
	{
	  macro_build (NULL, "drorv", "d,t,s", dreg, sreg, treg);
	  return;
	}
      macro_build (NULL, "dsubu", "d,v,t", AT, 0, treg);
      macro_build (NULL, "dsllv", "d,t,s", AT, sreg, AT);
      macro_build (NULL, "dsrlv", "d,t,s", dreg, sreg, treg);
      macro_build (NULL, "or", "d,v,t", dreg, dreg, AT);
      break;

    case M_ROR:
      if (ISA_HAS_ROR (mips_opts.isa) || CPU_HAS_ROR (mips_opts.arch))
	{
	  macro_build (NULL, "rorv", "d,t,s", dreg, sreg, treg);
	  return;
	}
      macro_build (NULL, "subu", "d,v,t", AT, 0, treg);
      macro_build (NULL, "sllv", "d,t,s", AT, sreg, AT);
      macro_build (NULL, "srlv", "d,t,s", dreg, sreg, treg);
      macro_build (NULL, "or", "d,v,t", dreg, dreg, AT);
      break;

    case M_DROR_I:
      {
	unsigned int rot;
	char *l, *r;

	if (imm_expr.X_op != O_constant)
	  as_bad (_("Improper rotate count"));
	rot = imm_expr.X_add_number & 0x3f;
	if (ISA_HAS_DROR (mips_opts.isa) || CPU_HAS_DROR (mips_opts.arch))
	  {
	    if (rot >= 32)
	      macro_build (NULL, "dror32", "d,w,<", dreg, sreg, rot - 32);
	    else
	      macro_build (NULL, "dror", "d,w,<", dreg, sreg, rot);
	    return;
	  }
	if (rot == 0)
	  {
	    macro_build (NULL, "dsrl", "d,w,<", dreg, sreg, 0);
	    return;
	  }
	r = (rot < 0x20) ? "dsrl" : "dsrl32";
	l = ((0x40 - rot) < 0x20) ? "dsll" : "dsll32";
	rot &= 0x1f;
	macro_build (NULL, r, "d,w,<", AT, sreg, rot);
	macro_build (NULL, l, "d,w,<", dreg, sreg, (0x20 - rot) & 0x1f);
	macro_build (NULL, "or", "d,v,t", dreg, dreg, AT);
      }
      break;

    case M_ROR_I:
      {
	unsigned int rot;

	if (imm_expr.X_op != O_constant)
	  as_bad (_("Improper rotate count"));
	rot = imm_expr.X_add_number & 0x1f;
	if (ISA_HAS_ROR (mips_opts.isa) || CPU_HAS_ROR (mips_opts.arch))
	  {
	    macro_build (NULL, "ror", "d,w,<", dreg, sreg, rot);
	    return;
	  }
	if (rot == 0)
	  {
	    macro_build (NULL, "srl", "d,w,<", dreg, sreg, 0);
	    return;
	  }
	macro_build (NULL, "srl", "d,w,<", AT, sreg, rot);
	macro_build (NULL, "sll", "d,w,<", dreg, sreg, (0x20 - rot) & 0x1f);
	macro_build (NULL, "or", "d,v,t", dreg, dreg, AT);
      }
      break;

    case M_S_DOB:
      if (mips_opts.arch == CPU_R4650)
	{
	  as_bad (_("opcode not supported on this processor"));
	  return;
	}
      assert (mips_opts.isa == ISA_MIPS1);
      /* Even on a big endian machine $fn comes before $fn+1.  We have
	 to adjust when storing to memory.  */
      macro_build (&offset_expr, "swc1", "T,o(b)",
		   target_big_endian ? treg + 1 : treg, BFD_RELOC_LO16, breg);
      offset_expr.X_add_number += 4;
      macro_build (&offset_expr, "swc1", "T,o(b)",
		   target_big_endian ? treg : treg + 1, BFD_RELOC_LO16, breg);
      return;

    case M_SEQ:
      if (sreg == 0)
	macro_build (&expr1, "sltiu", "t,r,j", dreg, treg, BFD_RELOC_LO16);
      else if (treg == 0)
	macro_build (&expr1, "sltiu", "t,r,j", dreg, sreg, BFD_RELOC_LO16);
      else
	{
	  macro_build (NULL, "xor", "d,v,t", dreg, sreg, treg);
	  macro_build (&expr1, "sltiu", "t,r,j", dreg, dreg, BFD_RELOC_LO16);
	}
      return;

    case M_SEQ_I:
      if (imm_expr.X_op == O_constant && imm_expr.X_add_number == 0)
	{
	  macro_build (&expr1, "sltiu", "t,r,j", dreg, sreg, BFD_RELOC_LO16);
	  return;
	}
      if (sreg == 0)
	{
	  as_warn (_("Instruction %s: result is always false"),
		   ip->insn_mo->name);
	  move_register (dreg, 0);
	  return;
	}
      if (imm_expr.X_op == O_constant
	  && imm_expr.X_add_number >= 0
	  && imm_expr.X_add_number < 0x10000)
	{
	  macro_build (&imm_expr, "xori", "t,r,i", dreg, sreg, BFD_RELOC_LO16);
	  used_at = 0;
	}
      else if (imm_expr.X_op == O_constant
	       && imm_expr.X_add_number > -0x8000
	       && imm_expr.X_add_number < 0)
	{
	  imm_expr.X_add_number = -imm_expr.X_add_number;
	  macro_build (&imm_expr, HAVE_32BIT_GPRS ? "addiu" : "daddiu",
		       "t,r,j", dreg, sreg, BFD_RELOC_LO16);
	  used_at = 0;
	}
      else
	{
	  load_register (AT, &imm_expr, HAVE_64BIT_GPRS);
	  macro_build (NULL, "xor", "d,v,t", dreg, sreg, AT);
	  used_at = 1;
	}
      macro_build (&expr1, "sltiu", "t,r,j", dreg, dreg, BFD_RELOC_LO16);
      if (used_at)
	break;
      return;

    case M_SGE:		/* sreg >= treg <==> not (sreg < treg) */
      s = "slt";
      goto sge;
    case M_SGEU:
      s = "sltu";
    sge:
      macro_build (NULL, s, "d,v,t", dreg, sreg, treg);
      macro_build (&expr1, "xori", "t,r,i", dreg, dreg, BFD_RELOC_LO16);
      return;

    case M_SGE_I:		/* sreg >= I <==> not (sreg < I) */
    case M_SGEU_I:
      if (imm_expr.X_op == O_constant
	  && imm_expr.X_add_number >= -0x8000
	  && imm_expr.X_add_number < 0x8000)
	{
	  macro_build (&imm_expr, mask == M_SGE_I ? "slti" : "sltiu", "t,r,j",
		       dreg, sreg, BFD_RELOC_LO16);
	  used_at = 0;
	}
      else
	{
	  load_register (AT, &imm_expr, HAVE_64BIT_GPRS);
	  macro_build (NULL, mask == M_SGE_I ? "slt" : "sltu", "d,v,t",
		       dreg, sreg, AT);
	  used_at = 1;
	}
      macro_build (&expr1, "xori", "t,r,i", dreg, dreg, BFD_RELOC_LO16);
      if (used_at)
	break;
      return;

    case M_SGT:		/* sreg > treg  <==>  treg < sreg */
      s = "slt";
      goto sgt;
    case M_SGTU:
      s = "sltu";
    sgt:
      macro_build (NULL, s, "d,v,t", dreg, treg, sreg);
      return;

    case M_SGT_I:		/* sreg > I  <==>  I < sreg */
      s = "slt";
      goto sgti;
    case M_SGTU_I:
      s = "sltu";
    sgti:
      load_register (AT, &imm_expr, HAVE_64BIT_GPRS);
      macro_build (NULL, s, "d,v,t", dreg, AT, sreg);
      break;

    case M_SLE:	/* sreg <= treg  <==>  treg >= sreg  <==>  not (treg < sreg) */
      s = "slt";
      goto sle;
    case M_SLEU:
      s = "sltu";
    sle:
      macro_build (NULL, s, "d,v,t", dreg, treg, sreg);
      macro_build (&expr1, "xori", "t,r,i", dreg, dreg, BFD_RELOC_LO16);
      return;

    case M_SLE_I:	/* sreg <= I <==> I >= sreg <==> not (I < sreg) */
      s = "slt";
      goto slei;
    case M_SLEU_I:
      s = "sltu";
    slei:
      load_register (AT, &imm_expr, HAVE_64BIT_GPRS);
      macro_build (NULL, s, "d,v,t", dreg, AT, sreg);
      macro_build (&expr1, "xori", "t,r,i", dreg, dreg, BFD_RELOC_LO16);
      break;

    case M_SLT_I:
      if (imm_expr.X_op == O_constant
	  && imm_expr.X_add_number >= -0x8000
	  && imm_expr.X_add_number < 0x8000)
	{
	  macro_build (&imm_expr, "slti", "t,r,j", dreg, sreg, BFD_RELOC_LO16);
	  return;
	}
      load_register (AT, &imm_expr, HAVE_64BIT_GPRS);
      macro_build (NULL, "slt", "d,v,t", dreg, sreg, AT);
      break;

    case M_SLTU_I:
      if (imm_expr.X_op == O_constant
	  && imm_expr.X_add_number >= -0x8000
	  && imm_expr.X_add_number < 0x8000)
	{
	  macro_build (&imm_expr, "sltiu", "t,r,j", dreg, sreg,
		       BFD_RELOC_LO16);
	  return;
	}
      load_register (AT, &imm_expr, HAVE_64BIT_GPRS);
      macro_build (NULL, "sltu", "d,v,t", dreg, sreg, AT);
      break;

    case M_SNE:
      if (sreg == 0)
	macro_build (NULL, "sltu", "d,v,t", dreg, 0, treg);
      else if (treg == 0)
	macro_build (NULL, "sltu", "d,v,t", dreg, 0, sreg);
      else
	{
	  macro_build (NULL, "xor", "d,v,t", dreg, sreg, treg);
	  macro_build (NULL, "sltu", "d,v,t", dreg, 0, dreg);
	}
      return;

    case M_SNE_I:
      if (imm_expr.X_op == O_constant && imm_expr.X_add_number == 0)
	{
	  macro_build (NULL, "sltu", "d,v,t", dreg, 0, sreg);
	  return;
	}
      if (sreg == 0)
	{
	  as_warn (_("Instruction %s: result is always true"),
		   ip->insn_mo->name);
	  macro_build (&expr1, HAVE_32BIT_GPRS ? "addiu" : "daddiu", "t,r,j",
		       dreg, 0, BFD_RELOC_LO16);
	  return;
	}
      if (imm_expr.X_op == O_constant
	  && imm_expr.X_add_number >= 0
	  && imm_expr.X_add_number < 0x10000)
	{
	  macro_build (&imm_expr, "xori", "t,r,i", dreg, sreg, BFD_RELOC_LO16);
	  used_at = 0;
	}
      else if (imm_expr.X_op == O_constant
	       && imm_expr.X_add_number > -0x8000
	       && imm_expr.X_add_number < 0)
	{
	  imm_expr.X_add_number = -imm_expr.X_add_number;
	  macro_build (&imm_expr, HAVE_32BIT_GPRS ? "addiu" : "daddiu",
		       "t,r,j", dreg, sreg, BFD_RELOC_LO16);
	  used_at = 0;
	}
      else
	{
	  load_register (AT, &imm_expr, HAVE_64BIT_GPRS);
	  macro_build (NULL, "xor", "d,v,t", dreg, sreg, AT);
	  used_at = 1;
	}
      macro_build (NULL, "sltu", "d,v,t", dreg, 0, dreg);
      if (used_at)
	break;
      return;

    case M_DSUB_I:
      dbl = 1;
    case M_SUB_I:
      if (imm_expr.X_op == O_constant
	  && imm_expr.X_add_number > -0x8000
	  && imm_expr.X_add_number <= 0x8000)
	{
	  imm_expr.X_add_number = -imm_expr.X_add_number;
	  macro_build (&imm_expr, dbl ? "daddi" : "addi", "t,r,j",
		       dreg, sreg, BFD_RELOC_LO16);
	  return;
	}
      load_register (AT, &imm_expr, dbl);
      macro_build (NULL, dbl ? "dsub" : "sub", "d,v,t", dreg, sreg, AT);
      break;

    case M_DSUBU_I:
      dbl = 1;
    case M_SUBU_I:
      if (imm_expr.X_op == O_constant
	  && imm_expr.X_add_number > -0x8000
	  && imm_expr.X_add_number <= 0x8000)
	{
	  imm_expr.X_add_number = -imm_expr.X_add_number;
	  macro_build (&imm_expr, dbl ? "daddiu" : "addiu", "t,r,j",
		       dreg, sreg, BFD_RELOC_LO16);
	  return;
	}
      load_register (AT, &imm_expr, dbl);
      macro_build (NULL, dbl ? "dsubu" : "subu", "d,v,t", dreg, sreg, AT);
      break;

    case M_TEQ_I:
      s = "teq";
      goto trap;
    case M_TGE_I:
      s = "tge";
      goto trap;
    case M_TGEU_I:
      s = "tgeu";
      goto trap;
    case M_TLT_I:
      s = "tlt";
      goto trap;
    case M_TLTU_I:
      s = "tltu";
      goto trap;
    case M_TNE_I:
      s = "tne";
    trap:
      load_register (AT, &imm_expr, HAVE_64BIT_GPRS);
      macro_build (NULL, s, "s,t", sreg, AT);
      break;

    case M_TRUNCWS:
    case M_TRUNCWD:
      assert (mips_opts.isa == ISA_MIPS1);
      sreg = (ip->insn_opcode >> 11) & 0x1f;	/* floating reg */
      dreg = (ip->insn_opcode >> 06) & 0x1f;	/* floating reg */

      /*
       * Is the double cfc1 instruction a bug in the mips assembler;
       * or is there a reason for it?
       */
      mips_emit_delays (TRUE);
      ++mips_opts.noreorder;
      mips_any_noreorder = 1;
      macro_build (NULL, "cfc1", "t,G", treg, RA);
      macro_build (NULL, "cfc1", "t,G", treg, RA);
      macro_build (NULL, "nop", "");
      expr1.X_add_number = 3;
      macro_build (&expr1, "ori", "t,r,i", AT, treg, BFD_RELOC_LO16);
      expr1.X_add_number = 2;
      macro_build (&expr1, "xori", "t,r,i", AT, AT, BFD_RELOC_LO16);
      macro_build (NULL, "ctc1", "t,G", AT, RA);
      macro_build (NULL, "nop", "");
      macro_build (NULL, mask == M_TRUNCWD ? "cvt.w.d" : "cvt.w.s", "D,S",
		   dreg, sreg);
      macro_build (NULL, "ctc1", "t,G", treg, RA);
      macro_build (NULL, "nop", "");
      --mips_opts.noreorder;
      break;

    case M_ULH:
      s = "lb";
      goto ulh;
    case M_ULHU:
      s = "lbu";
    ulh:
      if (offset_expr.X_add_number >= 0x7fff)
	as_bad (_("operand overflow"));
      if (! target_big_endian)
	++offset_expr.X_add_number;
      macro_build (&offset_expr, s, "t,o(b)", AT, BFD_RELOC_LO16, breg);
      if (! target_big_endian)
	--offset_expr.X_add_number;
      else
	++offset_expr.X_add_number;
      macro_build (&offset_expr, "lbu", "t,o(b)", treg, BFD_RELOC_LO16, breg);
      macro_build (NULL, "sll", "d,w,<", AT, AT, 8);
      macro_build (NULL, "or", "d,v,t", treg, treg, AT);
      break;

    case M_ULD:
      s = "ldl";
      s2 = "ldr";
      off = 7;
      goto ulw;
    case M_ULW:
      s = "lwl";
      s2 = "lwr";
      off = 3;
    ulw:
      if (offset_expr.X_add_number >= 0x8000 - off)
	as_bad (_("operand overflow"));
      if (treg != breg)
	tempreg = treg;
      else
	tempreg = AT;
      if (! target_big_endian)
	offset_expr.X_add_number += off;
      macro_build (&offset_expr, s, "t,o(b)", tempreg, BFD_RELOC_LO16, breg);
      if (! target_big_endian)
	offset_expr.X_add_number -= off;
      else
	offset_expr.X_add_number += off;
      macro_build (&offset_expr, s2, "t,o(b)", tempreg, BFD_RELOC_LO16, breg);

      /* If necessary, move the result in tempreg the final destination.  */
      if (treg == tempreg)
        return;
      /* Protect second load's delay slot.  */
      if (!gpr_interlocks)
	macro_build (NULL, "nop", "");
      move_register (treg, tempreg);
      break;

    case M_ULD_A:
      s = "ldl";
      s2 = "ldr";
      off = 7;
      goto ulwa;
    case M_ULW_A:
      s = "lwl";
      s2 = "lwr";
      off = 3;
    ulwa:
      used_at = 1;
      load_address (AT, &offset_expr, &used_at);
      if (breg != 0)
	macro_build (NULL, ADDRESS_ADD_INSN, "d,v,t", AT, AT, breg);
      if (! target_big_endian)
	expr1.X_add_number = off;
      else
	expr1.X_add_number = 0;
      macro_build (&expr1, s, "t,o(b)", treg, BFD_RELOC_LO16, AT);
      if (! target_big_endian)
	expr1.X_add_number = 0;
      else
	expr1.X_add_number = off;
      macro_build (&expr1, s2, "t,o(b)", treg, BFD_RELOC_LO16, AT);
      break;

    case M_ULH_A:
    case M_ULHU_A:
      used_at = 1;
      load_address (AT, &offset_expr, &used_at);
      if (breg != 0)
	macro_build (NULL, ADDRESS_ADD_INSN, "d,v,t", AT, AT, breg);
      if (target_big_endian)
	expr1.X_add_number = 0;
      macro_build (&expr1, mask == M_ULH_A ? "lb" : "lbu", "t,o(b)",
		   treg, BFD_RELOC_LO16, AT);
      if (target_big_endian)
	expr1.X_add_number = 1;
      else
	expr1.X_add_number = 0;
      macro_build (&expr1, "lbu", "t,o(b)", AT, BFD_RELOC_LO16, AT);
      macro_build (NULL, "sll", "d,w,<", treg, treg, 8);
      macro_build (NULL, "or", "d,v,t", treg, treg, AT);
      break;

    case M_USH:
      if (offset_expr.X_add_number >= 0x7fff)
	as_bad (_("operand overflow"));
      if (target_big_endian)
	++offset_expr.X_add_number;
      macro_build (&offset_expr, "sb", "t,o(b)", treg, BFD_RELOC_LO16, breg);
      macro_build (NULL, "srl", "d,w,<", AT, treg, 8);
      if (target_big_endian)
	--offset_expr.X_add_number;
      else
	++offset_expr.X_add_number;
      macro_build (&offset_expr, "sb", "t,o(b)", AT, BFD_RELOC_LO16, breg);
      break;

    case M_USD:
      s = "sdl";
      s2 = "sdr";
      off = 7;
      goto usw;
    case M_USW:
      s = "swl";
      s2 = "swr";
      off = 3;
    usw:
      if (offset_expr.X_add_number >= 0x8000 - off)
	as_bad (_("operand overflow"));
      if (! target_big_endian)
	offset_expr.X_add_number += off;
      macro_build (&offset_expr, s, "t,o(b)", treg, BFD_RELOC_LO16, breg);
      if (! target_big_endian)
	offset_expr.X_add_number -= off;
      else
	offset_expr.X_add_number += off;
      macro_build (&offset_expr, s2, "t,o(b)", treg, BFD_RELOC_LO16, breg);
      return;

    case M_USD_A:
      s = "sdl";
      s2 = "sdr";
      off = 7;
      goto uswa;
    case M_USW_A:
      s = "swl";
      s2 = "swr";
      off = 3;
    uswa:
      used_at = 1;
      load_address (AT, &offset_expr, &used_at);
      if (breg != 0)
	macro_build (NULL, ADDRESS_ADD_INSN, "d,v,t", AT, AT, breg);
      if (! target_big_endian)
	expr1.X_add_number = off;
      else
	expr1.X_add_number = 0;
      macro_build (&expr1, s, "t,o(b)", treg, BFD_RELOC_LO16, AT);
      if (! target_big_endian)
	expr1.X_add_number = 0;
      else
	expr1.X_add_number = off;
      macro_build (&expr1, s2, "t,o(b)", treg, BFD_RELOC_LO16, AT);
      break;

    case M_USH_A:
      used_at = 1;
      load_address (AT, &offset_expr, &used_at);
      if (breg != 0)
	macro_build (NULL, ADDRESS_ADD_INSN, "d,v,t", AT, AT, breg);
      if (! target_big_endian)
	expr1.X_add_number = 0;
      macro_build (&expr1, "sb", "t,o(b)", treg, BFD_RELOC_LO16, AT);
      macro_build (NULL, "srl", "d,w,<", treg, treg, 8);
      if (! target_big_endian)
	expr1.X_add_number = 1;
      else
	expr1.X_add_number = 0;
      macro_build (&expr1, "sb", "t,o(b)", treg, BFD_RELOC_LO16, AT);
      if (! target_big_endian)
	expr1.X_add_number = 0;
      else
	expr1.X_add_number = 1;
      macro_build (&expr1, "lbu", "t,o(b)", AT, BFD_RELOC_LO16, AT);
      macro_build (NULL, "sll", "d,w,<", treg, treg, 8);
      macro_build (NULL, "or", "d,v,t", treg, treg, AT);
      break;

    default:
      /* FIXME: Check if this is one of the itbl macros, since they
	 are added dynamically.  */
      as_bad (_("Macro %s not implemented yet"), ip->insn_mo->name);
      break;
    }
  if (mips_opts.noat)
    as_warn (_("Macro used $at after \".set noat\""));
}

/* Implement macros in mips16 mode.  */

static void
mips16_macro (struct mips_cl_insn *ip)
{
  int mask;
  int xreg, yreg, zreg, tmp;
  expressionS expr1;
  int dbl;
  const char *s, *s2, *s3;

  mask = ip->insn_mo->mask;

  xreg = (ip->insn_opcode >> MIPS16OP_SH_RX) & MIPS16OP_MASK_RX;
  yreg = (ip->insn_opcode >> MIPS16OP_SH_RY) & MIPS16OP_MASK_RY;
  zreg = (ip->insn_opcode >> MIPS16OP_SH_RZ) & MIPS16OP_MASK_RZ;

  expr1.X_op = O_constant;
  expr1.X_op_symbol = NULL;
  expr1.X_add_symbol = NULL;
  expr1.X_add_number = 1;

  dbl = 0;

  switch (mask)
    {
    default:
      internalError ();

    case M_DDIV_3:
      dbl = 1;
    case M_DIV_3:
      s = "mflo";
      goto do_div3;
    case M_DREM_3:
      dbl = 1;
    case M_REM_3:
      s = "mfhi";
    do_div3:
      mips_emit_delays (TRUE);
      ++mips_opts.noreorder;
      mips_any_noreorder = 1;
      macro_build (NULL, dbl ? "ddiv" : "div", "0,x,y", xreg, yreg);
      expr1.X_add_number = 2;
      macro_build (&expr1, "bnez", "x,p", yreg);
      macro_build (NULL, "break", "6", 7);

      /* FIXME: The normal code checks for of -1 / -0x80000000 here,
         since that causes an overflow.  We should do that as well,
         but I don't see how to do the comparisons without a temporary
         register.  */
      --mips_opts.noreorder;
      macro_build (NULL, s, "x", zreg);
      break;

    case M_DIVU_3:
      s = "divu";
      s2 = "mflo";
      goto do_divu3;
    case M_REMU_3:
      s = "divu";
      s2 = "mfhi";
      goto do_divu3;
    case M_DDIVU_3:
      s = "ddivu";
      s2 = "mflo";
      goto do_divu3;
    case M_DREMU_3:
      s = "ddivu";
      s2 = "mfhi";
    do_divu3:
      mips_emit_delays (TRUE);
      ++mips_opts.noreorder;
      mips_any_noreorder = 1;
      macro_build (NULL, s, "0,x,y", xreg, yreg);
      expr1.X_add_number = 2;
      macro_build (&expr1, "bnez", "x,p", yreg);
      macro_build (NULL, "break", "6", 7);
      --mips_opts.noreorder;
      macro_build (NULL, s2, "x", zreg);
      break;

    case M_DMUL:
      dbl = 1;
    case M_MUL:
      macro_build (NULL, dbl ? "dmultu" : "multu", "x,y", xreg, yreg);
      macro_build (NULL, "mflo", "x", zreg);
      return;

    case M_DSUBU_I:
      dbl = 1;
      goto do_subu;
    case M_SUBU_I:
    do_subu:
      if (imm_expr.X_op != O_constant)
	as_bad (_("Unsupported large constant"));
      imm_expr.X_add_number = -imm_expr.X_add_number;
      macro_build (&imm_expr, dbl ? "daddiu" : "addiu", "y,x,4", yreg, xreg);
      break;

    case M_SUBU_I_2:
      if (imm_expr.X_op != O_constant)
	as_bad (_("Unsupported large constant"));
      imm_expr.X_add_number = -imm_expr.X_add_number;
      macro_build (&imm_expr, "addiu", "x,k", xreg);
      break;

    case M_DSUBU_I_2:
      if (imm_expr.X_op != O_constant)
	as_bad (_("Unsupported large constant"));
      imm_expr.X_add_number = -imm_expr.X_add_number;
      macro_build (&imm_expr, "daddiu", "y,j", yreg);
      break;

    case M_BEQ:
      s = "cmp";
      s2 = "bteqz";
      goto do_branch;
    case M_BNE:
      s = "cmp";
      s2 = "btnez";
      goto do_branch;
    case M_BLT:
      s = "slt";
      s2 = "btnez";
      goto do_branch;
    case M_BLTU:
      s = "sltu";
      s2 = "btnez";
      goto do_branch;
    case M_BLE:
      s = "slt";
      s2 = "bteqz";
      goto do_reverse_branch;
    case M_BLEU:
      s = "sltu";
      s2 = "bteqz";
      goto do_reverse_branch;
    case M_BGE:
      s = "slt";
      s2 = "bteqz";
      goto do_branch;
    case M_BGEU:
      s = "sltu";
      s2 = "bteqz";
      goto do_branch;
    case M_BGT:
      s = "slt";
      s2 = "btnez";
      goto do_reverse_branch;
    case M_BGTU:
      s = "sltu";
      s2 = "btnez";

    do_reverse_branch:
      tmp = xreg;
      xreg = yreg;
      yreg = tmp;

    do_branch:
      macro_build (NULL, s, "x,y", xreg, yreg);
      macro_build (&offset_expr, s2, "p");
      break;

    case M_BEQ_I:
      s = "cmpi";
      s2 = "bteqz";
      s3 = "x,U";
      goto do_branch_i;
    case M_BNE_I:
      s = "cmpi";
      s2 = "btnez";
      s3 = "x,U";
      goto do_branch_i;
    case M_BLT_I:
      s = "slti";
      s2 = "btnez";
      s3 = "x,8";
      goto do_branch_i;
    case M_BLTU_I:
      s = "sltiu";
      s2 = "btnez";
      s3 = "x,8";
      goto do_branch_i;
    case M_BLE_I:
      s = "slti";
      s2 = "btnez";
      s3 = "x,8";
      goto do_addone_branch_i;
    case M_BLEU_I:
      s = "sltiu";
      s2 = "btnez";
      s3 = "x,8";
      goto do_addone_branch_i;
    case M_BGE_I:
      s = "slti";
      s2 = "bteqz";
      s3 = "x,8";
      goto do_branch_i;
    case M_BGEU_I:
      s = "sltiu";
      s2 = "bteqz";
      s3 = "x,8";
      goto do_branch_i;
    case M_BGT_I:
      s = "slti";
      s2 = "bteqz";
      s3 = "x,8";
      goto do_addone_branch_i;
    case M_BGTU_I:
      s = "sltiu";
      s2 = "bteqz";
      s3 = "x,8";

    do_addone_branch_i:
      if (imm_expr.X_op != O_constant)
	as_bad (_("Unsupported large constant"));
      ++imm_expr.X_add_number;

    do_branch_i:
      macro_build (&imm_expr, s, s3, xreg);
      macro_build (&offset_expr, s2, "p");
      break;

    case M_ABS:
      expr1.X_add_number = 0;
      macro_build (&expr1, "slti", "x,8", yreg);
      if (xreg != yreg)
	move_register (xreg, yreg);
      expr1.X_add_number = 2;
      macro_build (&expr1, "bteqz", "p");
      macro_build (NULL, "neg", "x,w", xreg, xreg);
    }
}

/* For consistency checking, verify that all bits are specified either
   by the match/mask part of the instruction definition, or by the
   operand list.  */
static int
validate_mips_insn (const struct mips_opcode *opc)
{
  const char *p = opc->args;
  char c;
  unsigned long used_bits = opc->mask;

  if ((used_bits & opc->match) != opc->match)
    {
      as_bad (_("internal: bad mips opcode (mask error): %s %s"),
	      opc->name, opc->args);
      return 0;
    }
#define USE_BITS(mask,shift)	(used_bits |= ((mask) << (shift)))
  while (*p)
    switch (c = *p++)
      {
      case ',': break;
      case '(': break;
      case ')': break;
      case '+':
    	switch (c = *p++)
	  {
	  case 'A': USE_BITS (OP_MASK_SHAMT,	OP_SH_SHAMT);	break;
	  case 'B': USE_BITS (OP_MASK_INSMSB,	OP_SH_INSMSB);	break;
	  case 'C': USE_BITS (OP_MASK_EXTMSBD,	OP_SH_EXTMSBD);	break;
	  case 'D': USE_BITS (OP_MASK_RD,	OP_SH_RD);
		    USE_BITS (OP_MASK_SEL,	OP_SH_SEL);	break;
	  case 'E': USE_BITS (OP_MASK_SHAMT,	OP_SH_SHAMT);	break;
	  case 'F': USE_BITS (OP_MASK_INSMSB,	OP_SH_INSMSB);	break;
	  case 'G': USE_BITS (OP_MASK_EXTMSBD,	OP_SH_EXTMSBD);	break;
	  case 'H': USE_BITS (OP_MASK_EXTMSBD,	OP_SH_EXTMSBD);	break;
	  case 'I': break;
	  default:
	    as_bad (_("internal: bad mips opcode (unknown extension operand type `+%c'): %s %s"),
		    c, opc->name, opc->args);
	    return 0;
	  }
	break;
      case '<': USE_BITS (OP_MASK_SHAMT,	OP_SH_SHAMT);	break;
      case '>':	USE_BITS (OP_MASK_SHAMT,	OP_SH_SHAMT);	break;
      case 'A': break;
      case 'B': USE_BITS (OP_MASK_CODE20,       OP_SH_CODE20);  break;
      case 'C':	USE_BITS (OP_MASK_COPZ,		OP_SH_COPZ);	break;
      case 'D':	USE_BITS (OP_MASK_FD,		OP_SH_FD);	break;
      case 'E':	USE_BITS (OP_MASK_RT,		OP_SH_RT);	break;
      case 'F': break;
      case 'G':	USE_BITS (OP_MASK_RD,		OP_SH_RD);	break;
      case 'H': USE_BITS (OP_MASK_SEL,		OP_SH_SEL);	break;
      case 'I': break;
      case 'J': USE_BITS (OP_MASK_CODE19,       OP_SH_CODE19);  break;
      case 'K':	USE_BITS (OP_MASK_RD,		OP_SH_RD);	break;
      case 'L': break;
      case 'M':	USE_BITS (OP_MASK_CCC,		OP_SH_CCC);	break;
      case 'N':	USE_BITS (OP_MASK_BCC,		OP_SH_BCC);	break;
      case 'O':	USE_BITS (OP_MASK_ALN,		OP_SH_ALN);	break;
      case 'Q':	USE_BITS (OP_MASK_VSEL,		OP_SH_VSEL);
		USE_BITS (OP_MASK_FT,		OP_SH_FT);	break;
      case 'R':	USE_BITS (OP_MASK_FR,		OP_SH_FR);	break;
      case 'S':	USE_BITS (OP_MASK_FS,		OP_SH_FS);	break;
      case 'T':	USE_BITS (OP_MASK_FT,		OP_SH_FT);	break;
      case 'V':	USE_BITS (OP_MASK_FS,		OP_SH_FS);	break;
      case 'W':	USE_BITS (OP_MASK_FT,		OP_SH_FT);	break;
      case 'X':	USE_BITS (OP_MASK_FD,		OP_SH_FD);	break;
      case 'Y':	USE_BITS (OP_MASK_FS,		OP_SH_FS);	break;
      case 'Z':	USE_BITS (OP_MASK_FT,		OP_SH_FT);	break;
      case 'a':	USE_BITS (OP_MASK_TARGET,	OP_SH_TARGET);	break;
      case 'b':	USE_BITS (OP_MASK_RS,		OP_SH_RS);	break;
      case 'c':	USE_BITS (OP_MASK_CODE,		OP_SH_CODE);	break;
      case 'd':	USE_BITS (OP_MASK_RD,		OP_SH_RD);	break;
      case 'f': break;
      case 'h':	USE_BITS (OP_MASK_PREFX,	OP_SH_PREFX);	break;
      case 'i':	USE_BITS (OP_MASK_IMMEDIATE,	OP_SH_IMMEDIATE); break;
      case 'j':	USE_BITS (OP_MASK_DELTA,	OP_SH_DELTA);	break;
      case 'k':	USE_BITS (OP_MASK_CACHE,	OP_SH_CACHE);	break;
      case 'l': break;
      case 'o': USE_BITS (OP_MASK_DELTA,	OP_SH_DELTA);	break;
      case 'p':	USE_BITS (OP_MASK_DELTA,	OP_SH_DELTA);	break;
      case 'q':	USE_BITS (OP_MASK_CODE2,	OP_SH_CODE2);	break;
      case 'r': USE_BITS (OP_MASK_RS,		OP_SH_RS);	break;
      case 's':	USE_BITS (OP_MASK_RS,		OP_SH_RS);	break;
      case 't':	USE_BITS (OP_MASK_RT,		OP_SH_RT);	break;
      case 'u':	USE_BITS (OP_MASK_IMMEDIATE,	OP_SH_IMMEDIATE); break;
      case 'v':	USE_BITS (OP_MASK_RS,		OP_SH_RS);	break;
      case 'w':	USE_BITS (OP_MASK_RT,		OP_SH_RT);	break;
      case 'x': break;
      case 'z': break;
      case 'P': USE_BITS (OP_MASK_PERFREG,	OP_SH_PERFREG);	break;
      case 'U': USE_BITS (OP_MASK_RD,           OP_SH_RD);
	        USE_BITS (OP_MASK_RT,           OP_SH_RT);	break;
      case 'e': USE_BITS (OP_MASK_VECBYTE,	OP_SH_VECBYTE);	break;
      case '%': USE_BITS (OP_MASK_VECALIGN,	OP_SH_VECALIGN); break;
      case '[': break;
      case ']': break;
      default:
	as_bad (_("internal: bad mips opcode (unknown operand type `%c'): %s %s"),
		c, opc->name, opc->args);
	return 0;
      }
#undef USE_BITS
  if (used_bits != 0xffffffff)
    {
      as_bad (_("internal: bad mips opcode (bits 0x%lx undefined): %s %s"),
	      ~used_bits & 0xffffffff, opc->name, opc->args);
      return 0;
    }
  return 1;
}

/* This routine assembles an instruction into its binary format.  As a
   side effect, it sets one of the global variables imm_reloc or
   offset_reloc to the type of relocation to do if one of the operands
   is an address expression.  */

static void
mips_ip (char *str, struct mips_cl_insn *ip)
{
  char *s;
  const char *args;
  char c = 0;
  struct mips_opcode *insn;
  char *argsStart;
  unsigned int regno;
  unsigned int lastregno = 0;
  unsigned int lastpos = 0;
  unsigned int limlo, limhi;
  char *s_reset;
  char save_c = 0;
  offsetT min_range, max_range;
  int argnum;
  unsigned int rtype;

  insn_error = NULL;

  /* If the instruction contains a '.', we first try to match an instruction
     including the '.'.  Then we try again without the '.'.  */
  insn = NULL;
  for (s = str; *s != '\0' && !ISSPACE (*s); ++s)
    continue;

  /* If we stopped on whitespace, then replace the whitespace with null for
     the call to hash_find.  Save the character we replaced just in case we
     have to re-parse the instruction.  */
  if (ISSPACE (*s))
    {
      save_c = *s;
      *s++ = '\0';
    }

  insn = (struct mips_opcode *) hash_find (op_hash, str);

  /* If we didn't find the instruction in the opcode table, try again, but
     this time with just the instruction up to, but not including the
     first '.'.  */
  if (insn == NULL)
    {
      /* Restore the character we overwrite above (if any).  */
      if (save_c)
	*(--s) = save_c;

      /* Scan up to the first '.' or whitespace.  */
      for (s = str;
	   *s != '\0' && *s != '.' && !ISSPACE (*s);
	   ++s)
	continue;

      /* If we did not find a '.', then we can quit now.  */
      if (*s != '.')
	{
	  insn_error = "unrecognized opcode";
	  return;
	}

      /* Lookup the instruction in the hash table.  */
      *s++ = '\0';
      if ((insn = (struct mips_opcode *) hash_find (op_hash, str)) == NULL)
	{
	  insn_error = "unrecognized opcode";
	  return;
	}
    }

  argsStart = s;
  for (;;)
    {
      bfd_boolean ok;

      assert (strcmp (insn->name, str) == 0);

      if (OPCODE_IS_MEMBER (insn,
			    (mips_opts.isa
			     | (file_ase_mips16 ? INSN_MIPS16 : 0)
	      		     | (mips_opts.ase_mdmx ? INSN_MDMX : 0)
			     | (mips_opts.ase_mips3d ? INSN_MIPS3D : 0)),
			    mips_opts.arch))
	ok = TRUE;
      else
	ok = FALSE;

      if (insn->pinfo != INSN_MACRO)
	{
	  if (mips_opts.arch == CPU_R4650 && (insn->pinfo & FP_D) != 0)
	    ok = FALSE;
	}

      if (! ok)
	{
	  if (insn + 1 < &mips_opcodes[NUMOPCODES]
	      && strcmp (insn->name, insn[1].name) == 0)
	    {
	      ++insn;
	      continue;
	    }
	  else
	    {
	      if (!insn_error)
		{
		  static char buf[100];
		  sprintf (buf,
			   _("opcode not supported on this processor: %s (%s)"),
			   mips_cpu_info_from_arch (mips_opts.arch)->name,
			   mips_cpu_info_from_isa (mips_opts.isa)->name);
		  insn_error = buf;
		}
	      if (save_c)
		*(--s) = save_c;
	      return;
	    }
	}

      ip->insn_mo = insn;
      ip->insn_opcode = insn->match;
      insn_error = NULL;
      argnum = 1;
      for (args = insn->args;; ++args)
	{
	  int is_mdmx;

	  s += strspn (s, " \t");
	  is_mdmx = 0;
	  switch (*args)
	    {
	    case '\0':		/* end of args */
	      if (*s == '\0')
		return;
	      break;

	    case ',':
	      if (*s++ == *args)
		continue;
	      s--;
	      switch (*++args)
		{
		case 'r':
		case 'v':
		  ip->insn_opcode |= lastregno << OP_SH_RS;
		  continue;

		case 'w':
		  ip->insn_opcode |= lastregno << OP_SH_RT;
		  continue;

		case 'W':
		  ip->insn_opcode |= lastregno << OP_SH_FT;
		  continue;

		case 'V':
		  ip->insn_opcode |= lastregno << OP_SH_FS;
		  continue;
		}
	      break;

	    case '(':
	      /* Handle optional base register.
		 Either the base register is omitted or
		 we must have a left paren.  */
	      /* This is dependent on the next operand specifier
		 is a base register specification.  */
	      assert (args[1] == 'b' || args[1] == '5'
		      || args[1] == '-' || args[1] == '4');
	      if (*s == '\0')
		return;

	    case ')':		/* these must match exactly */
	    case '[':
	    case ']':
	      if (*s++ == *args)
		continue;
	      break;

	    case '+':		/* Opcode extension character.  */
	      switch (*++args)
		{
		case 'A':		/* ins/ext position, becomes LSB.  */
		  limlo = 0;
		  limhi = 31;
		  goto do_lsb;
		case 'E':
		  limlo = 32;
		  limhi = 63;
		  goto do_lsb;
do_lsb:
		  my_getExpression (&imm_expr, s);
		  check_absolute_expr (ip, &imm_expr);
		  if ((unsigned long) imm_expr.X_add_number < limlo
		      || (unsigned long) imm_expr.X_add_number > limhi)
		    {
		      as_bad (_("Improper position (%lu)"),
			      (unsigned long) imm_expr.X_add_number);
		      imm_expr.X_add_number = limlo;
		    }
		  lastpos = imm_expr.X_add_number;
		  ip->insn_opcode |= (imm_expr.X_add_number
				      & OP_MASK_SHAMT) << OP_SH_SHAMT;
		  imm_expr.X_op = O_absent;
		  s = expr_end;
		  continue;

		case 'B':		/* ins size, becomes MSB.  */
		  limlo = 1;
		  limhi = 32;
		  goto do_msb;
		case 'F':
		  limlo = 33;
		  limhi = 64;
		  goto do_msb;
do_msb:
		  my_getExpression (&imm_expr, s);
		  check_absolute_expr (ip, &imm_expr);
		  /* Check for negative input so that small negative numbers
		     will not succeed incorrectly.  The checks against
		     (pos+size) transitively check "size" itself,
		     assuming that "pos" is reasonable.  */
		  if ((long) imm_expr.X_add_number < 0
		      || ((unsigned long) imm_expr.X_add_number
			  + lastpos) < limlo
		      || ((unsigned long) imm_expr.X_add_number
			  + lastpos) > limhi)
		    {
		      as_bad (_("Improper insert size (%lu, position %lu)"),
			      (unsigned long) imm_expr.X_add_number,
			      (unsigned long) lastpos);
		      imm_expr.X_add_number = limlo - lastpos;
		    }
		  ip->insn_opcode |= ((lastpos + imm_expr.X_add_number - 1)
				      & OP_MASK_INSMSB) << OP_SH_INSMSB;
		  imm_expr.X_op = O_absent;
		  s = expr_end;
		  continue;

		case 'C':		/* ext size, becomes MSBD.  */
		  limlo = 1;
		  limhi = 32;
		  goto do_msbd;
		case 'G':
		  limlo = 33;
		  limhi = 64;
		  goto do_msbd;
		case 'H':
		  limlo = 33;
		  limhi = 64;
		  goto do_msbd;
do_msbd:
		  my_getExpression (&imm_expr, s);
		  check_absolute_expr (ip, &imm_expr);
		  /* Check for negative input so that small negative numbers
		     will not succeed incorrectly.  The checks against
		     (pos+size) transitively check "size" itself,
		     assuming that "pos" is reasonable.  */
		  if ((long) imm_expr.X_add_number < 0
		      || ((unsigned long) imm_expr.X_add_number
			  + lastpos) < limlo
		      || ((unsigned long) imm_expr.X_add_number
			  + lastpos) > limhi)
		    {
		      as_bad (_("Improper extract size (%lu, position %lu)"),
			      (unsigned long) imm_expr.X_add_number,
			      (unsigned long) lastpos);
		      imm_expr.X_add_number = limlo - lastpos;
		    }
		  ip->insn_opcode |= ((imm_expr.X_add_number - 1)
				      & OP_MASK_EXTMSBD) << OP_SH_EXTMSBD;
		  imm_expr.X_op = O_absent;
		  s = expr_end;
		  continue;

		case 'D':
		  /* +D is for disassembly only; never match.  */
		  break;

		case 'I':
		  /* "+I" is like "I", except that imm2_expr is used.  */
		  my_getExpression (&imm2_expr, s);
		  if (imm2_expr.X_op != O_big
		      && imm2_expr.X_op != O_constant)
		  insn_error = _("absolute expression required");
		  normalize_constant_expr (&imm2_expr);
		  s = expr_end;
		  continue;

		default:
		  as_bad (_("internal: bad mips opcode (unknown extension operand type `+%c'): %s %s"),
		    *args, insn->name, insn->args);
		  /* Further processing is fruitless.  */
		  return;
		}
	      break;

	    case '<':		/* must be at least one digit */
	      /*
	       * According to the manual, if the shift amount is greater
	       * than 31 or less than 0, then the shift amount should be
	       * mod 32.  In reality the mips assembler issues an error.
	       * We issue a warning and mask out all but the low 5 bits.
	       */
	      my_getExpression (&imm_expr, s);
	      check_absolute_expr (ip, &imm_expr);
	      if ((unsigned long) imm_expr.X_add_number > 31)
		{
		  as_warn (_("Improper shift amount (%lu)"),
			   (unsigned long) imm_expr.X_add_number);
		  imm_expr.X_add_number &= OP_MASK_SHAMT;
		}
	      ip->insn_opcode |= imm_expr.X_add_number << OP_SH_SHAMT;
	      imm_expr.X_op = O_absent;
	      s = expr_end;
	      continue;

	    case '>':		/* shift amount minus 32 */
	      my_getExpression (&imm_expr, s);
	      check_absolute_expr (ip, &imm_expr);
	      if ((unsigned long) imm_expr.X_add_number < 32
		  || (unsigned long) imm_expr.X_add_number > 63)
		break;
	      ip->insn_opcode |= (imm_expr.X_add_number - 32) << OP_SH_SHAMT;
	      imm_expr.X_op = O_absent;
	      s = expr_end;
	      continue;

	    case 'k':		/* cache code */
	    case 'h':		/* prefx code */
	      my_getExpression (&imm_expr, s);
	      check_absolute_expr (ip, &imm_expr);
	      if ((unsigned long) imm_expr.X_add_number > 31)
		{
		  as_warn (_("Invalid value for `%s' (%lu)"),
			   ip->insn_mo->name,
			   (unsigned long) imm_expr.X_add_number);
		  imm_expr.X_add_number &= 0x1f;
		}
	      if (*args == 'k')
		ip->insn_opcode |= imm_expr.X_add_number << OP_SH_CACHE;
	      else
		ip->insn_opcode |= imm_expr.X_add_number << OP_SH_PREFX;
	      imm_expr.X_op = O_absent;
	      s = expr_end;
	      continue;

	    case 'c':		/* break code */
	      my_getExpression (&imm_expr, s);
	      check_absolute_expr (ip, &imm_expr);
	      if ((unsigned long) imm_expr.X_add_number > 1023)
		{
		  as_warn (_("Illegal break code (%lu)"),
			   (unsigned long) imm_expr.X_add_number);
		  imm_expr.X_add_number &= OP_MASK_CODE;
		}
	      ip->insn_opcode |= imm_expr.X_add_number << OP_SH_CODE;
	      imm_expr.X_op = O_absent;
	      s = expr_end;
	      continue;

	    case 'q':		/* lower break code */
	      my_getExpression (&imm_expr, s);
	      check_absolute_expr (ip, &imm_expr);
	      if ((unsigned long) imm_expr.X_add_number > 1023)
		{
		  as_warn (_("Illegal lower break code (%lu)"),
			   (unsigned long) imm_expr.X_add_number);
		  imm_expr.X_add_number &= OP_MASK_CODE2;
		}
	      ip->insn_opcode |= imm_expr.X_add_number << OP_SH_CODE2;
	      imm_expr.X_op = O_absent;
	      s = expr_end;
	      continue;

	    case 'B':           /* 20-bit syscall/break code.  */
	      my_getExpression (&imm_expr, s);
	      check_absolute_expr (ip, &imm_expr);
	      if ((unsigned long) imm_expr.X_add_number > OP_MASK_CODE20)
		as_warn (_("Illegal 20-bit code (%lu)"),
			 (unsigned long) imm_expr.X_add_number);
	      ip->insn_opcode |= imm_expr.X_add_number << OP_SH_CODE20;
	      imm_expr.X_op = O_absent;
	      s = expr_end;
	      continue;

	    case 'C':           /* Coprocessor code */
	      my_getExpression (&imm_expr, s);
	      check_absolute_expr (ip, &imm_expr);
	      if ((unsigned long) imm_expr.X_add_number >= (1 << 25))
		{
		  as_warn (_("Coproccesor code > 25 bits (%lu)"),
			   (unsigned long) imm_expr.X_add_number);
		  imm_expr.X_add_number &= ((1 << 25) - 1);
		}
	      ip->insn_opcode |= imm_expr.X_add_number;
	      imm_expr.X_op = O_absent;
	      s = expr_end;
	      continue;

	    case 'J':           /* 19-bit wait code.  */
	      my_getExpression (&imm_expr, s);
	      check_absolute_expr (ip, &imm_expr);
	      if ((unsigned long) imm_expr.X_add_number > OP_MASK_CODE19)
		as_warn (_("Illegal 19-bit code (%lu)"),
			 (unsigned long) imm_expr.X_add_number);
	      ip->insn_opcode |= imm_expr.X_add_number << OP_SH_CODE19;
	      imm_expr.X_op = O_absent;
	      s = expr_end;
	      continue;

	    case 'P':		/* Performance register */
	      my_getExpression (&imm_expr, s);
	      check_absolute_expr (ip, &imm_expr);
	      if (imm_expr.X_add_number != 0 && imm_expr.X_add_number != 1)
		{
		  as_warn (_("Invalid performance register (%lu)"),
			   (unsigned long) imm_expr.X_add_number);
		  imm_expr.X_add_number &= OP_MASK_PERFREG;
		}
	      ip->insn_opcode |= (imm_expr.X_add_number << OP_SH_PERFREG);
	      imm_expr.X_op = O_absent;
	      s = expr_end;
	      continue;

            case 'G':                /* Coprocessor destination register.  */
              if (((ip->insn_opcode >> OP_SH_OP) & OP_MASK_OP) == OP_OP_COP0)
                ok = reg_lookup (&s, RTYPE_NUM | RTYPE_CP0, &regno);
              else
                ok = reg_lookup (&s, RTYPE_NUM | RTYPE_GP, &regno);
              ip->insn_opcode |= regno << OP_SH_RD;
              if (ok) 
                {
                  lastregno = regno;
                  continue;
                }
              else
                break;

	    case 'b':		/* base register */
	    case 'd':		/* destination register */
	    case 's':		/* source register */
	    case 't':		/* target register */
	    case 'r':		/* both target and source */
	    case 'v':		/* both dest and source */
	    case 'w':		/* both dest and target */
	    case 'E':		/* coprocessor target register */
	    case 'K':		/* 'rdhwr' destination register */
	    case 'x':		/* ignore register name */
	    case 'z':		/* must be zero register */
	    case 'U':           /* destination register (clo/clz).  */
	      s_reset = s;
              if (*args == 'E' || *args == 'K')
                ok = reg_lookup (&s, RTYPE_NUM, &regno);
		  else
		    {
                  ok = reg_lookup (&s, RTYPE_NUM | RTYPE_GP, &regno);
                  if (regno == AT && ! mips_opts.noat)
                    as_warn ("Used $at without \".set noat\"");
			}
              if (ok)
			{
		  c = *args;
		  if (*s == ' ')
		    ++s;
		  if (args[1] != *s)
		    {
		      if (c == 'r' || c == 'v' || c == 'w')
			{
			  regno = lastregno;
			  s = s_reset;
			  ++args;
			}
		    }
		  /* 'z' only matches $0.  */
		  if (c == 'z' && regno != 0)
		    break;

	/* Now that we have assembled one operand, we use the args string
	 * to figure out where it goes in the instruction.  */
		  switch (c)
		    {
		    case 'r':
		    case 's':
		    case 'v':
		    case 'b':
		      ip->insn_opcode |= regno << OP_SH_RS;
		      break;
		    case 'd':
		    case 'G':
		    case 'K':
		      ip->insn_opcode |= regno << OP_SH_RD;
		      break;
		    case 'U':
		      ip->insn_opcode |= regno << OP_SH_RD;
		      ip->insn_opcode |= regno << OP_SH_RT;
		      break;
		    case 'w':
		    case 't':
		    case 'E':
		      ip->insn_opcode |= regno << OP_SH_RT;
		      break;
		    case 'x':
		      /* This case exists because on the r3000 trunc
			 expands into a macro which requires a gp
			 register.  On the r6000 or r4000 it is
			 assembled into a single instruction which
			 ignores the register.  Thus the insn version
			 is MIPS_ISA2 and uses 'x', and the macro
			 version is MIPS_ISA1 and uses 't'.  */
		      break;
		    case 'z':
		      /* This case is for the div instruction, which
			 acts differently if the destination argument
			 is $0.  This only matches $0, and is checked
			 outside the switch.  */
		      break;
		    case 'D':
		      /* Itbl operand; not yet implemented. FIXME ?? */
		      break;
		      /* What about all other operands like 'i', which
			 can be specified in the opcode table? */
		    }
		  lastregno = regno;
		  continue;
		}
	      switch (*args++)
		{
		case 'r':
		case 'v':
		  ip->insn_opcode |= lastregno << OP_SH_RS;
		  continue;
		case 'w':
		  ip->insn_opcode |= lastregno << OP_SH_RT;
		  continue;
		}
	      break;

	    case 'O':		/* MDMX alignment immediate constant.  */
	      my_getExpression (&imm_expr, s);
	      check_absolute_expr (ip, &imm_expr);
	      if ((unsigned long) imm_expr.X_add_number > OP_MASK_ALN)
		{
		  as_warn ("Improper align amount (%ld), using low bits",
			   (long) imm_expr.X_add_number);
		  imm_expr.X_add_number &= OP_MASK_ALN;
		}
	      ip->insn_opcode |= imm_expr.X_add_number << OP_SH_ALN;
	      imm_expr.X_op = O_absent;
	      s = expr_end;
	      continue;

	    case 'Q':		/* MDMX vector, element sel, or const.  */
	      if (s[0] != '$')
		{
		  /* MDMX Immediate.  */
		  my_getExpression (&imm_expr, s);
		  check_absolute_expr (ip, &imm_expr);
		  if ((unsigned long) imm_expr.X_add_number > OP_MASK_FT)
		    {
		      as_warn (_("Invalid MDMX Immediate (%ld)"),
			       (long) imm_expr.X_add_number);
		      imm_expr.X_add_number &= OP_MASK_FT;
		    }
		  imm_expr.X_add_number &= OP_MASK_FT;
		  if (ip->insn_opcode & (OP_MASK_VSEL << OP_SH_VSEL))
		    ip->insn_opcode |= MDMX_FMTSEL_IMM_QH << OP_SH_VSEL;
		  else
		    ip->insn_opcode |= MDMX_FMTSEL_IMM_OB << OP_SH_VSEL;
		  ip->insn_opcode |= imm_expr.X_add_number << OP_SH_FT;
		  imm_expr.X_op = O_absent;
		  s = expr_end;
		  continue;
		}
	      /* Not MDMX Immediate.  Fall through.  */
	    case 'X':           /* MDMX destination register.  */
	    case 'Y':           /* MDMX source register.  */
	    case 'Z':           /* MDMX target register.  */
	      is_mdmx = 1;
	    case 'D':		/* floating point destination register */
	    case 'S':		/* floating point source register */
	    case 'T':		/* floating point target register */
	    case 'R':		/* floating point source register */
	    case 'V':
	    case 'W':
              rtype = RTYPE_FPU;
              if (is_mdmx
                  || (mips_opts.ase_mdmx
                      && (ip->insn_mo->pinfo & FP_D)
                      && (ip->insn_mo->pinfo & (INSN_COPROC_MOVE_DELAY
                                                | INSN_COPROC_MEMORY_DELAY
                                                | INSN_LOAD_COPROC_DELAY
                                                | INSN_LOAD_MEMORY_DELAY
                                                | INSN_STORE_MEMORY))))
                rtype |= RTYPE_VEC;
	      s_reset = s;
              if (reg_lookup (&s, rtype, &regno))
		    {
		  if ((regno & 1) != 0
		      && HAVE_32BIT_FPRS
		      && ! (strcmp (str, "mtc1") == 0
			    || strcmp (str, "mfc1") == 0
			    || strcmp (str, "lwc1") == 0
			    || strcmp (str, "swc1") == 0
			    || strcmp (str, "l.s") == 0
			    || strcmp (str, "s.s") == 0))
		    as_warn (_("Float register should be even, was %d"),
			     regno);

		  c = *args;
		  if (*s == ' ')
		    ++s;
		  if (args[1] != *s)
		    {
		      if (c == 'V' || c == 'W')
			{
			  regno = lastregno;
			  s = s_reset;
			  ++args;
			}
		    }
		  switch (c)
		    {
		    case 'D':
		    case 'X':
		      ip->insn_opcode |= regno << OP_SH_FD;
		      break;
		    case 'V':
		    case 'S':
		    case 'Y':
		      ip->insn_opcode |= regno << OP_SH_FS;
		      break;
		    case 'Q':
		      /* This is like 'Z', but also needs to fix the MDMX
			 vector/scalar select bits.  Note that the
			 scalar immediate case is handled above.  */
		      if (*s == '[')
			{
			  int is_qh = (ip->insn_opcode & (1 << OP_SH_VSEL));
			  int max_el = (is_qh ? 3 : 7);
			  s++;
			  my_getExpression(&imm_expr, s);
			  check_absolute_expr (ip, &imm_expr);
			  s = expr_end;
			  if (imm_expr.X_add_number > max_el)
			    as_bad(_("Bad element selector %ld"),
				   (long) imm_expr.X_add_number);
			  imm_expr.X_add_number &= max_el;
			  ip->insn_opcode |= (imm_expr.X_add_number
					      << (OP_SH_VSEL +
						  (is_qh ? 2 : 1)));
			  if (*s != ']')
			    as_warn(_("Expecting ']' found '%s'"), s);
			  else
			    s++;
			}
		      else
                        {
                          if (ip->insn_opcode & (OP_MASK_VSEL << OP_SH_VSEL))
                            ip->insn_opcode |= (MDMX_FMTSEL_VEC_QH
						<< OP_SH_VSEL);
			  else
			    ip->insn_opcode |= (MDMX_FMTSEL_VEC_OB <<
						OP_SH_VSEL);
			}
                      /* Fall through */
		    case 'W':
		    case 'T':
		    case 'Z':
		      ip->insn_opcode |= regno << OP_SH_FT;
		      break;
		    case 'R':
		      ip->insn_opcode |= regno << OP_SH_FR;
		      break;
		    }
		  lastregno = regno;
		  continue;
		}

	      switch (*args++)
		{
		case 'V':
		  ip->insn_opcode |= lastregno << OP_SH_FS;
		  continue;
		case 'W':
		  ip->insn_opcode |= lastregno << OP_SH_FT;
		  continue;
		}
	      break;

	    case 'I':
	      my_getExpression (&imm_expr, s);
	      if (imm_expr.X_op != O_big
		  && imm_expr.X_op != O_constant)
		insn_error = _("absolute expression required");
	      normalize_constant_expr (&imm_expr);
	      s = expr_end;
	      continue;

	    case 'A':
	      my_getExpression (&offset_expr, s);
	      *imm_reloc = BFD_RELOC_32;
	      s = expr_end;
	      continue;

	    case 'F':
	    case 'L':
	    case 'f':
	    case 'l':
	      {
		int f64;
		int using_gprs;
		char *save_in;
		char *err;
		unsigned char temp[8];
		int len;
		unsigned int length;
		segT seg;
		subsegT subseg;
		char *p;

		/* These only appear as the last operand in an
		   instruction, and every instruction that accepts
		   them in any variant accepts them in all variants.
		   This means we don't have to worry about backing out
		   any changes if the instruction does not match.

		   The difference between them is the size of the
		   floating point constant and where it goes.  For 'F'
		   and 'L' the constant is 64 bits; for 'f' and 'l' it
		   is 32 bits.  Where the constant is placed is based
		   on how the MIPS assembler does things:
		    F -- .rdata
		    L -- .lit8
		    f -- immediate value
		    l -- .lit4

		    The .lit4 and .lit8 sections are only used if
		    permitted by the -G argument.

		    When generating embedded PIC code, we use the
		    .lit8 section but not the .lit4 section (we can do
		    .lit4 inline easily; we need to put .lit8
		    somewhere in the data segment, and using .lit8
		    permits the linker to eventually combine identical
		    .lit8 entries).

		    The code below needs to know whether the target register
		    is 32 or 64 bits wide.  It relies on the fact 'f' and
		    'F' are used with GPR-based instructions and 'l' and
		    'L' are used with FPR-based instructions.  */

		f64 = *args == 'F' || *args == 'L';
		using_gprs = *args == 'F' || *args == 'f';

		save_in = input_line_pointer;
		input_line_pointer = s;
		err = md_atof (f64 ? 'd' : 'f', (char *) temp, &len);
		length = len;
		s = input_line_pointer;
		input_line_pointer = save_in;
		if (err != NULL && *err != '\0')
		  {
		    as_bad (_("Bad floating point constant: %s"), err);
		    memset (temp, '\0', sizeof temp);
		    length = f64 ? 8 : 4;
		  }

		assert (length == (unsigned) (f64 ? 8 : 4));

		if (*args == 'f'
		    || (*args == 'l'
			&& (! USE_GLOBAL_POINTER_OPT
			    || mips_pic == EMBEDDED_PIC
			    || g_switch_value < 4
			    || (temp[0] == 0 && temp[1] == 0)
			    || (temp[2] == 0 && temp[3] == 0))))
		  {
		    imm_expr.X_op = O_constant;
		    if (! target_big_endian)
		      imm_expr.X_add_number = bfd_getl32 (temp);
		    else
		      imm_expr.X_add_number = bfd_getb32 (temp);
		  }
		else if (length > 4
			 && ! mips_disable_float_construction
			 /* Constants can only be constructed in GPRs and
			    copied to FPRs if the GPRs are at least as wide
			    as the FPRs.  Force the constant into memory if
			    we are using 64-bit FPRs but the GPRs are only
			    32 bits wide.  */
			 && (using_gprs
			     || ! (HAVE_64BIT_FPRS && HAVE_32BIT_GPRS))
			 && ((temp[0] == 0 && temp[1] == 0)
			     || (temp[2] == 0 && temp[3] == 0))
			 && ((temp[4] == 0 && temp[5] == 0)
			     || (temp[6] == 0 && temp[7] == 0)))
		  {
		    /* The value is simple enough to load with a couple of
                       instructions.  If using 32-bit registers, set
                       imm_expr to the high order 32 bits and offset_expr to
                       the low order 32 bits.  Otherwise, set imm_expr to
                       the entire 64 bit constant.  */
		    if (using_gprs ? HAVE_32BIT_GPRS : HAVE_32BIT_FPRS)
		      {
			imm_expr.X_op = O_constant;
			offset_expr.X_op = O_constant;
			if (! target_big_endian)
			  {
			    imm_expr.X_add_number = bfd_getl32 (temp + 4);
			    offset_expr.X_add_number = bfd_getl32 (temp);
			  }
			else
			  {
			    imm_expr.X_add_number = bfd_getb32 (temp);
			    offset_expr.X_add_number = bfd_getb32 (temp + 4);
			  }
			if (offset_expr.X_add_number == 0)
			  offset_expr.X_op = O_absent;
		      }
		    else if (sizeof (imm_expr.X_add_number) > 4)
		      {
			imm_expr.X_op = O_constant;
			if (! target_big_endian)
			  imm_expr.X_add_number = bfd_getl64 (temp);
			else
			  imm_expr.X_add_number = bfd_getb64 (temp);
		      }
		    else
		      {
			imm_expr.X_op = O_big;
			imm_expr.X_add_number = 4;
			if (! target_big_endian)
			  {
			    generic_bignum[0] = bfd_getl16 (temp);
			    generic_bignum[1] = bfd_getl16 (temp + 2);
			    generic_bignum[2] = bfd_getl16 (temp + 4);
			    generic_bignum[3] = bfd_getl16 (temp + 6);
			  }
			else
			  {
			    generic_bignum[0] = bfd_getb16 (temp + 6);
			    generic_bignum[1] = bfd_getb16 (temp + 4);
			    generic_bignum[2] = bfd_getb16 (temp + 2);
			    generic_bignum[3] = bfd_getb16 (temp);
			  }
		      }
		  }
		else
		  {
		    const char *newname;
		    segT new_seg;

		    /* Switch to the right section.  */
		    seg = now_seg;
		    subseg = now_subseg;
		    switch (*args)
		      {
		      default: /* unused default case avoids warnings.  */
		      case 'L':
			newname = RDATA_SECTION_NAME;
			if ((USE_GLOBAL_POINTER_OPT && g_switch_value >= 8)
			    || mips_pic == EMBEDDED_PIC)
			  newname = ".lit8";
			break;
		      case 'F':
			if (mips_pic == EMBEDDED_PIC)
			  newname = ".lit8";
			else
			  newname = RDATA_SECTION_NAME;
			break;
		      case 'l':
			assert (!USE_GLOBAL_POINTER_OPT
				|| g_switch_value >= 4);
			newname = ".lit4";
			break;
		      }
		    new_seg = subseg_new (newname, (subsegT) 0);
		    if (OUTPUT_FLAVOR == bfd_target_elf_flavour)
		      bfd_set_section_flags (stdoutput, new_seg,
					     (SEC_ALLOC
					      | SEC_LOAD
					      | SEC_READONLY
					      | SEC_DATA));
		    frag_align (*args == 'l' ? 2 : 3, 0, 0);
		    if (OUTPUT_FLAVOR == bfd_target_elf_flavour
			&& strcmp (TARGET_OS, "elf") != 0)
		      record_alignment (new_seg, 4);
		    else
		      record_alignment (new_seg, *args == 'l' ? 2 : 3);
		    if (seg == now_seg)
		      as_bad (_("Can't use floating point insn in this section"));

		    /* Set the argument to the current address in the
		       section.  */
		    offset_expr.X_op = O_symbol;
		    offset_expr.X_add_symbol =
		      symbol_new ("L0\001", now_seg,
				  (valueT) frag_now_fix (), frag_now);
		    offset_expr.X_add_number = 0;

		    /* Put the floating point number into the section.  */
		    p = frag_more ((int) length);
		    memcpy (p, temp, length);

		    /* Switch back to the original section.  */
		    subseg_set (seg, subseg);
		  }
	      }
	      continue;

	    case 'i':		/* 16 bit unsigned immediate */
	    case 'j':		/* 16 bit signed immediate */
	      *imm_reloc = BFD_RELOC_LO16;
	      if (my_getSmallExpression (&imm_expr, imm_reloc, s) == 0)
		{
		  int more;
		  offsetT minval, maxval;

		  more = (insn + 1 < &mips_opcodes[NUMOPCODES]
			  && strcmp (insn->name, insn[1].name) == 0);

		  /* If the expression was written as an unsigned number,
		     only treat it as signed if there are no more
		     alternatives.  */
		  if (more
		      && *args == 'j'
		      && sizeof (imm_expr.X_add_number) <= 4
		      && imm_expr.X_op == O_constant
		      && imm_expr.X_add_number < 0
		      && imm_expr.X_unsigned
		      && HAVE_64BIT_GPRS)
		    break;

		  /* For compatibility with older assemblers, we accept
		     0x8000-0xffff as signed 16-bit numbers when only
		     signed numbers are allowed.  */
		  if (*args == 'i')
		    minval = 0, maxval = 0xffff;
		  else if (more)
		    minval = -0x8000, maxval = 0x7fff;
		  else
		    minval = -0x8000, maxval = 0xffff;

		  if (imm_expr.X_op != O_constant
		      || imm_expr.X_add_number < minval
		      || imm_expr.X_add_number > maxval)
		    {
		      if (more)
			break;
		      if (imm_expr.X_op == O_constant
			  || imm_expr.X_op == O_big)
			as_bad (_("expression out of range"));
		    }
		}
	      s = expr_end;
	      continue;

	    case 'o':		/* 16 bit offset */
	      /* Check whether there is only a single bracketed expression
		 left.  If so, it must be the base register and the
		 constant must be zero.  */
	      if (*s == '(' && strchr (s + 1, '(') == 0)
		{
		  offset_expr.X_op = O_constant;
		  offset_expr.X_add_number = 0;
		  continue;
		}

	      /* If this value won't fit into a 16 bit offset, then go
		 find a macro that will generate the 32 bit offset
		 code pattern.  */
	      if (my_getSmallExpression (&offset_expr, offset_reloc, s) == 0
		  && (offset_expr.X_op != O_constant
		      || offset_expr.X_add_number >= 0x8000
		      || offset_expr.X_add_number < -0x8000))
		break;

	      s = expr_end;
	      continue;

	    case 'p':		/* pc relative offset */
	      *offset_reloc = BFD_RELOC_16_PCREL_S2;
	      my_getExpression (&offset_expr, s);
	      s = expr_end;
	      continue;

	    case 'u':		/* upper 16 bits */
	      if (my_getSmallExpression (&imm_expr, imm_reloc, s) == 0
		  && imm_expr.X_op == O_constant
		  && (imm_expr.X_add_number < 0
		      || imm_expr.X_add_number >= 0x10000))
		as_bad (_("lui expression not in range 0..65535"));
	      s = expr_end;
	      continue;

	    case 'a':		/* 26 bit address */
	      my_getExpression (&offset_expr, s);
	      s = expr_end;
	      *offset_reloc = BFD_RELOC_MIPS_JMP;
	      continue;

	    case 'N':		/* 3 bit branch condition code */
	    case 'M':		/* 3 bit compare condition code */
              rtype = RTYPE_CCC;
              if (ip->insn_mo->pinfo & (FP_D| FP_S))
                rtype |= RTYPE_FCC;
              if (!reg_lookup (&s, rtype, &regno))
		break;
	      if ((strcmp(str + strlen(str) - 3, ".ps") == 0
		   || strcmp(str + strlen(str) - 5, "any2f") == 0
		   || strcmp(str + strlen(str) - 5, "any2t") == 0)
		  && (regno & 1) != 0)
		as_warn(_("Condition code register should be even for %s, was %d"),
			str, regno);
	      if ((strcmp(str + strlen(str) - 5, "any4f") == 0
		   || strcmp(str + strlen(str) - 5, "any4t") == 0)
		  && (regno & 3) != 0)
		as_warn(_("Condition code register should be 0 or 4 for %s, was %d"),
			str, regno);
	      if (*args == 'N')
		ip->insn_opcode |= regno << OP_SH_BCC;
	      else
		ip->insn_opcode |= regno << OP_SH_CCC;
	      continue;

	    case 'H':
	      if (s[0] == '0' && (s[1] == 'x' || s[1] == 'X'))
		s += 2;
	      if (ISDIGIT (*s))
		{
		  c = 0;
		  do
		    {
		      c *= 10;
		      c += *s - '0';
		      ++s;
		    }
		  while (ISDIGIT (*s));
		}
	      else
		c = 8; /* Invalid sel value.  */

	      if (c > 7)
		as_bad (_("invalid coprocessor sub-selection value (0-7)"));
	      ip->insn_opcode |= c;
	      continue;

	    case 'e':
	      /* Must be at least one digit.  */
	      my_getExpression (&imm_expr, s);
	      check_absolute_expr (ip, &imm_expr);

	      if ((unsigned long) imm_expr.X_add_number
		  > (unsigned long) OP_MASK_VECBYTE)
		{
		  as_bad (_("bad byte vector index (%ld)"),
			   (long) imm_expr.X_add_number);
		  imm_expr.X_add_number = 0;
		}

	      ip->insn_opcode |= imm_expr.X_add_number << OP_SH_VECBYTE;
	      imm_expr.X_op = O_absent;
	      s = expr_end;
	      continue;

	    case '%':
	      my_getExpression (&imm_expr, s);
	      check_absolute_expr (ip, &imm_expr);

	      if ((unsigned long) imm_expr.X_add_number
		  > (unsigned long) OP_MASK_VECALIGN)
		{
		  as_bad (_("bad byte vector index (%ld)"),
			   (long) imm_expr.X_add_number);
		  imm_expr.X_add_number = 0;
		}

	      ip->insn_opcode |= imm_expr.X_add_number << OP_SH_VECALIGN;
	      imm_expr.X_op = O_absent;
	      s = expr_end;
	      continue;

	    default:
	      as_bad (_("bad char = '%c'\n"), *args);
	      internalError ();
	    }
	  break;
	}
      /* Args don't match.  */
      if (insn + 1 < &mips_opcodes[NUMOPCODES] &&
	  !strcmp (insn->name, insn[1].name))
	{
	  ++insn;
	  s = argsStart;
	  insn_error = _("illegal operands");
	  continue;
	}
      if (save_c)
	*(--s) = save_c;
      insn_error = _("illegal operands");
      return;
    }
}

/* This routine assembles an instruction into its binary format when
   assembling for the mips16.  As a side effect, it sets one of the
   global variables imm_reloc or offset_reloc to the type of
   relocation to do if one of the operands is an address expression.
   It also sets mips16_small and mips16_ext if the user explicitly
   requested a small or extended instruction.  */

static void
mips16_ip (char *str, struct mips_cl_insn *ip)
{
  char *s;
  const char *args;
  struct mips_opcode *insn;
  char *argsstart;
  unsigned int regno;
  unsigned int lastregno = 0;
  char *s_reset;

  insn_error = NULL;

  mips16_small = FALSE;
  mips16_ext = FALSE;

  for (s = str; ISLOWER (*s); ++s)
    ;
  switch (*s)
    {
    case '\0':
      break;

    case ' ':
      *s++ = '\0';
      break;

    case '.':
      if (s[1] == 't' && s[2] == ' ')
	{
	  *s = '\0';
	  mips16_small = TRUE;
	  s += 3;
	  break;
	}
      else if (s[1] == 'e' && s[2] == ' ')
	{
	  *s = '\0';
	  mips16_ext = TRUE;
	  s += 3;
	  break;
	}
      /* Fall through.  */
    default:
      insn_error = _("unknown opcode");
      return;
    }

  if (mips_opts.noautoextend && ! mips16_ext)
    mips16_small = TRUE;

  if ((insn = (struct mips_opcode *) hash_find (mips16_op_hash, str)) == NULL)
    {
      insn_error = _("unrecognized opcode");
      return;
    }

  argsstart = s;
  for (;;)
    {
      assert (strcmp (insn->name, str) == 0);

      ip->insn_mo = insn;
      ip->insn_opcode = insn->match;
      ip->use_extend = FALSE;
      imm_expr.X_op = O_absent;
      imm_reloc[0] = BFD_RELOC_UNUSED;
      imm_reloc[1] = BFD_RELOC_UNUSED;
      imm_reloc[2] = BFD_RELOC_UNUSED;
      imm2_expr.X_op = O_absent;
      offset_expr.X_op = O_absent;
      offset_reloc[0] = BFD_RELOC_UNUSED;
      offset_reloc[1] = BFD_RELOC_UNUSED;
      offset_reloc[2] = BFD_RELOC_UNUSED;
      for (args = insn->args; 1; ++args)
	{
	  int c;

	  if (*s == ' ')
	    ++s;

	  /* In this switch statement we call break if we did not find
             a match, continue if we did find a match, or return if we
             are done.  */

	  c = *args;
	  switch (c)
	    {
	    case '\0':
	      if (*s == '\0')
		{
		  /* Stuff the immediate value in now, if we can.  */
		  if (imm_expr.X_op == O_constant
		      && *imm_reloc > BFD_RELOC_UNUSED
		      && insn->pinfo != INSN_MACRO)
		    {
		      mips16_immed (NULL, 0, *imm_reloc - BFD_RELOC_UNUSED,
				    imm_expr.X_add_number, TRUE, mips16_small,
				    mips16_ext, &ip->insn_opcode,
				    &ip->use_extend, &ip->extend);
		      imm_expr.X_op = O_absent;
		      *imm_reloc = BFD_RELOC_UNUSED;
		    }

		  return;
		}
	      break;

	    case ',':
	      if (*s++ == c)
		continue;
	      s--;
	      switch (*++args)
		{
		case 'v':
		  ip->insn_opcode |= lastregno << MIPS16OP_SH_RX;
		  continue;
		case 'w':
		  ip->insn_opcode |= lastregno << MIPS16OP_SH_RY;
		  continue;
		}
	      break;

	    case '(':
	    case ')':
	      if (*s++ == c)
		continue;
	      break;

	    case 'v':
	    case 'w':
	      if (s[0] != '$')
		{
		  if (c == 'v')
		    ip->insn_opcode |= lastregno << MIPS16OP_SH_RX;
		  else
		    ip->insn_opcode |= lastregno << MIPS16OP_SH_RY;
		  ++args;
		  continue;
		}
	      /* Fall through.  */
	    case 'x':
	    case 'y':
	    case 'z':
	    case 'Z':
	    case '0':
	    case 'S':
	    case 'R':
	    case 'X':
	    case 'Y':
	      s_reset = s;
              if (!reg_lookup (&s, RTYPE_NUM | RTYPE_GP, &regno))
		{
                  if (c == 'v' || c == 'w')
		    {
                      if (c == 'v')
                        ip->insn_opcode |= lastregno << MIPS16OP_SH_RX;
	      else
                        ip->insn_opcode |= lastregno << MIPS16OP_SH_RY;
                      ++args;
                      continue;
		    }
		    break;
		}

	      if (*s == ' ')
		++s;
	      if (args[1] != *s)
		{
		  if (c == 'v' || c == 'w')
		    {
		      regno = mips16_to_32_reg_map[lastregno];
		      s = s_reset;
		      ++args;
		    }
		}

	      switch (c)
		{
		case 'x':
		case 'y':
		case 'z':
		case 'v':
		case 'w':
		case 'Z':
		  regno = mips32_to_16_reg_map[regno];
		  break;

		case '0':
		  if (regno != 0)
		    regno = ILLEGAL_REG;
		  break;

		case 'S':
		  if (regno != SP)
		    regno = ILLEGAL_REG;
		  break;

		case 'R':
		  if (regno != RA)
		    regno = ILLEGAL_REG;
		  break;

		case 'X':
		case 'Y':
		  if (regno == AT && ! mips_opts.noat)
		    as_warn (_("used $at without \".set noat\""));
		  break;

		default:
		  internalError ();
		}

	      if (regno == ILLEGAL_REG)
		break;

	      switch (c)
		{
		case 'x':
		case 'v':
		  ip->insn_opcode |= regno << MIPS16OP_SH_RX;
		  break;
		case 'y':
		case 'w':
		  ip->insn_opcode |= regno << MIPS16OP_SH_RY;
		  break;
		case 'z':
		  ip->insn_opcode |= regno << MIPS16OP_SH_RZ;
		  break;
		case 'Z':
		  ip->insn_opcode |= regno << MIPS16OP_SH_MOVE32Z;
		case '0':
		case 'S':
		case 'R':
		  break;
		case 'X':
		  ip->insn_opcode |= regno << MIPS16OP_SH_REGR32;
		  break;
		case 'Y':
		  regno = ((regno & 7) << 2) | ((regno & 0x18) >> 3);
		  ip->insn_opcode |= regno << MIPS16OP_SH_REG32R;
		  break;
		default:
		  internalError ();
		}

	      lastregno = regno;
	      continue;

	    case 'P':
	      if (strncmp (s, "$pc", 3) == 0)
		{
		  s += 3;
		  continue;
		}
	      break;

	    case '<':
	    case '>':
	    case '[':
	    case ']':
	    case '4':
	    case '5':
	    case 'H':
	    case 'W':
	    case 'D':
	    case 'j':
	    case '8':
	    case 'V':
	    case 'C':
	    case 'U':
	    case 'k':
	    case 'K':
	      if (s[0] == '%'
		  && strncmp (s + 1, "gprel(", sizeof "gprel(" - 1) == 0)
		{
		  /* This is %gprel(SYMBOL).  We need to read SYMBOL,
                     and generate the appropriate reloc.  If the text
                     inside %gprel is not a symbol name with an
                     optional offset, then we generate a normal reloc
                     and will probably fail later.  */
		  my_getExpression (&imm_expr, s + sizeof "%gprel" - 1);
		  if (imm_expr.X_op == O_symbol)
		    {
		      mips16_ext = TRUE;
		      *imm_reloc = BFD_RELOC_MIPS16_GPREL;
		      s = expr_end;
		      ip->use_extend = TRUE;
		      ip->extend = 0;
		      continue;
		    }
		}
	      else
		{
		  /* Just pick up a normal expression.  */
		  my_getExpression (&imm_expr, s);
		}

	      if (imm_expr.X_op == O_register)
		{
		  /* What we thought was an expression turned out to
                     be a register.  */

		  if (s[0] == '(' && args[1] == '(')
		    {
		      /* It looks like the expression was omitted
			 before a register indirection, which means
			 that the expression is implicitly zero.  We
			 still set up imm_expr, so that we handle
			 explicit extensions correctly.  */
		      imm_expr.X_op = O_constant;
		      imm_expr.X_add_number = 0;
		      *imm_reloc = (int) BFD_RELOC_UNUSED + c;
		      continue;
		    }

		  break;
		}

	      /* We need to relax this instruction.  */
	      *imm_reloc = (int) BFD_RELOC_UNUSED + c;
	      s = expr_end;
	      continue;

	    case 'p':
	    case 'q':
	    case 'A':
	    case 'B':
	    case 'E':
	      /* We use offset_reloc rather than imm_reloc for the PC
                 relative operands.  This lets macros with both
                 immediate and address operands work correctly.  */
	      my_getExpression (&offset_expr, s);

	      if (offset_expr.X_op == O_register)
		break;

	      /* We need to relax this instruction.  */
	      *offset_reloc = (int) BFD_RELOC_UNUSED + c;
	      s = expr_end;
	      continue;

	    case '6':		/* break code */
	      my_getExpression (&imm_expr, s);
	      check_absolute_expr (ip, &imm_expr);
	      if ((unsigned long) imm_expr.X_add_number > 63)
		{
		  as_warn (_("Invalid value for `%s' (%lu)"),
			   ip->insn_mo->name,
			   (unsigned long) imm_expr.X_add_number);
		  imm_expr.X_add_number &= 0x3f;
		}
	      ip->insn_opcode |= imm_expr.X_add_number << MIPS16OP_SH_IMM6;
	      imm_expr.X_op = O_absent;
	      s = expr_end;
	      continue;

	    case 'a':		/* 26 bit address */
	      my_getExpression (&offset_expr, s);
	      s = expr_end;
	      *offset_reloc = BFD_RELOC_MIPS16_JMP;
	      ip->insn_opcode <<= 16;
	      continue;

	    case 'l':		/* register list for entry macro */
	    case 'L':		/* register list for exit macro */
	      {
		int mask;

		if (c == 'l')
		  mask = 0;
		else
		  mask = 7 << 3;
		while (*s != '\0')
		  {
		    unsigned int freg, reg1, reg2;

		    while (*s == ' ' || *s == ',')
		      ++s;
                    if (reg_lookup (&s, RTYPE_GP | RTYPE_NUM, &reg1))
		      freg = 0;
                    else if (reg_lookup (&s, RTYPE_FPU, &reg1))
			freg = 1;
                    else
		      {
                        as_bad (_("can't parse register list"));
                        break;
		      }
		    if (*s == ' ')
		      ++s;
		    if (*s != '-')
		      reg2 = reg1;
		    else
		      {
			++s;
                        if (!reg_lookup (&s, freg ? RTYPE_FPU 
                                         : (RTYPE_GP | RTYPE_NUM), &reg2))
                          {
                            as_bad (_("invalid register list"));
                            break;
                          }
		      }
		    if (freg && reg1 == 0 && reg2 == 0 && c == 'L')
		      {
			mask &= ~ (7 << 3);
			mask |= 5 << 3;
		      }
		    else if (freg && reg1 == 0 && reg2 == 1 && c == 'L')
		      {
			mask &= ~ (7 << 3);
			mask |= 6 << 3;
		      }
		    else if (reg1 == 4 && reg2 >= 4 && reg2 <= 7 && c != 'L')
		      mask |= (reg2 - 3) << 3;
		    else if (reg1 == 16 && reg2 >= 16 && reg2 <= 17)
		      mask |= (reg2 - 15) << 1;
		    else if (reg1 == RA && reg2 == RA)
		      mask |= 1;
		    else
		      {
			as_bad (_("invalid register list"));
			break;
		      }
		  }
		/* The mask is filled in in the opcode table for the
                   benefit of the disassembler.  We remove it before
                   applying the actual mask.  */
		ip->insn_opcode &= ~ ((7 << 3) << MIPS16OP_SH_IMM6);
		ip->insn_opcode |= mask << MIPS16OP_SH_IMM6;
	      }
	    continue;

	    case 'e':		/* extend code */
	      my_getExpression (&imm_expr, s);
	      check_absolute_expr (ip, &imm_expr);
	      if ((unsigned long) imm_expr.X_add_number > 0x7ff)
		{
		  as_warn (_("Invalid value for `%s' (%lu)"),
			   ip->insn_mo->name,
			   (unsigned long) imm_expr.X_add_number);
		  imm_expr.X_add_number &= 0x7ff;
		}
	      ip->insn_opcode |= imm_expr.X_add_number;
	      imm_expr.X_op = O_absent;
	      s = expr_end;
	      continue;

	    default:
	      internalError ();
	    }
	  break;
	}

      /* Args don't match.  */
      if (insn + 1 < &mips16_opcodes[bfd_mips16_num_opcodes] &&
	  strcmp (insn->name, insn[1].name) == 0)
	{
	  ++insn;
	  s = argsstart;
	  continue;
	}

      insn_error = _("illegal operands");

      return;
    }
}

/* This structure holds information we know about a mips16 immediate
   argument type.  */

struct mips16_immed_operand
{
  /* The type code used in the argument string in the opcode table.  */
  int type;
  /* The number of bits in the short form of the opcode.  */
  int nbits;
  /* The number of bits in the extended form of the opcode.  */
  int extbits;
  /* The amount by which the short form is shifted when it is used;
     for example, the sw instruction has a shift count of 2.  */
  int shift;
  /* The amount by which the short form is shifted when it is stored
     into the instruction code.  */
  int op_shift;
  /* Non-zero if the short form is unsigned.  */
  int unsp;
  /* Non-zero if the extended form is unsigned.  */
  int extu;
  /* Non-zero if the value is PC relative.  */
  int pcrel;
};

/* The mips16 immediate operand types.  */

static const struct mips16_immed_operand mips16_immed_operands[] =
{
  { '<',  3,  5, 0, MIPS16OP_SH_RZ,   1, 1, 0 },
  { '>',  3,  5, 0, MIPS16OP_SH_RX,   1, 1, 0 },
  { '[',  3,  6, 0, MIPS16OP_SH_RZ,   1, 1, 0 },
  { ']',  3,  6, 0, MIPS16OP_SH_RX,   1, 1, 0 },
  { '4',  4, 15, 0, MIPS16OP_SH_IMM4, 0, 0, 0 },
  { '5',  5, 16, 0, MIPS16OP_SH_IMM5, 1, 0, 0 },
  { 'H',  5, 16, 1, MIPS16OP_SH_IMM5, 1, 0, 0 },
  { 'W',  5, 16, 2, MIPS16OP_SH_IMM5, 1, 0, 0 },
  { 'D',  5, 16, 3, MIPS16OP_SH_IMM5, 1, 0, 0 },
  { 'j',  5, 16, 0, MIPS16OP_SH_IMM5, 0, 0, 0 },
  { '8',  8, 16, 0, MIPS16OP_SH_IMM8, 1, 0, 0 },
  { 'V',  8, 16, 2, MIPS16OP_SH_IMM8, 1, 0, 0 },
  { 'C',  8, 16, 3, MIPS16OP_SH_IMM8, 1, 0, 0 },
  { 'U',  8, 16, 0, MIPS16OP_SH_IMM8, 1, 1, 0 },
  { 'k',  8, 16, 0, MIPS16OP_SH_IMM8, 0, 0, 0 },
  { 'K',  8, 16, 3, MIPS16OP_SH_IMM8, 0, 0, 0 },
  { 'p',  8, 16, 0, MIPS16OP_SH_IMM8, 0, 0, 1 },
  { 'q', 11, 16, 0, MIPS16OP_SH_IMM8, 0, 0, 1 },
  { 'A',  8, 16, 2, MIPS16OP_SH_IMM8, 1, 0, 1 },
  { 'B',  5, 16, 3, MIPS16OP_SH_IMM5, 1, 0, 1 },
  { 'E',  5, 16, 2, MIPS16OP_SH_IMM5, 1, 0, 1 }
};

#define MIPS16_NUM_IMMED \
  (sizeof mips16_immed_operands / sizeof mips16_immed_operands[0])

/* Handle a mips16 instruction with an immediate value.  This or's the
   small immediate value into *INSN.  It sets *USE_EXTEND to indicate
   whether an extended value is needed; if one is needed, it sets
   *EXTEND to the value.  The argument type is TYPE.  The value is VAL.
   If SMALL is true, an unextended opcode was explicitly requested.
   If EXT is true, an extended opcode was explicitly requested.  If
   WARN is true, warn if EXT does not match reality.  */

static void
mips16_immed (char *file, unsigned int line, int type, offsetT val,
	      bfd_boolean warn, bfd_boolean small, bfd_boolean ext,
	      unsigned long *insn, bfd_boolean *use_extend,
	      unsigned short *extend)
{
  register const struct mips16_immed_operand *op;
  int mintiny, maxtiny;
  bfd_boolean needext;

  op = mips16_immed_operands;
  while (op->type != type)
    {
      ++op;
      assert (op < mips16_immed_operands + MIPS16_NUM_IMMED);
    }

  if (op->unsp)
    {
      if (type == '<' || type == '>' || type == '[' || type == ']')
	{
	  mintiny = 1;
	  maxtiny = 1 << op->nbits;
	}
      else
	{
	  mintiny = 0;
	  maxtiny = (1 << op->nbits) - 1;
	}
    }
  else
    {
      mintiny = - (1 << (op->nbits - 1));
      maxtiny = (1 << (op->nbits - 1)) - 1;
    }

  /* Branch offsets have an implicit 0 in the lowest bit.  */
  if (type == 'p' || type == 'q')
    val /= 2;

  if ((val & ((1 << op->shift) - 1)) != 0
      || val < (mintiny << op->shift)
      || val > (maxtiny << op->shift))
    needext = TRUE;
  else
    needext = FALSE;

  if (warn && ext && ! needext)
    as_warn_where (file, line,
		   _("extended operand requested but not required"));
  if (small && needext)
    as_bad_where (file, line, _("invalid unextended operand value"));

  if (small || (! ext && ! needext))
    {
      int insnval;

      *use_extend = FALSE;
      insnval = ((val >> op->shift) & ((1 << op->nbits) - 1));
      insnval <<= op->op_shift;
      *insn |= insnval;
    }
  else
    {
      long minext, maxext;
      int extval;

      if (op->extu)
	{
	  minext = 0;
	  maxext = (1 << op->extbits) - 1;
	}
      else
	{
	  minext = - (1 << (op->extbits - 1));
	  maxext = (1 << (op->extbits - 1)) - 1;
	}
      if (val < minext || val > maxext)
	as_bad_where (file, line,
		      _("operand value out of range for instruction"));

      *use_extend = TRUE;
      if (op->extbits == 16)
	{
	  extval = ((val >> 11) & 0x1f) | (val & 0x7e0);
	  val &= 0x1f;
	}
      else if (op->extbits == 15)
	{
	  extval = ((val >> 11) & 0xf) | (val & 0x7f0);
	  val &= 0xf;
	}
      else
	{
	  extval = ((val & 0x1f) << 6) | (val & 0x20);
	  val = 0;
	}

      *extend = (unsigned short) extval;
      *insn |= val;
    }
}

static const struct percent_op_match
{
  const char *str;
  bfd_reloc_code_real_type reloc;
} percent_op[] =
{
  {"%lo", BFD_RELOC_LO16},
#ifdef OBJ_ELF
  {"%call_hi", BFD_RELOC_MIPS_CALL_HI16},
  {"%call_lo", BFD_RELOC_MIPS_CALL_LO16},
  {"%call16", BFD_RELOC_MIPS_CALL16},
  {"%got_disp", BFD_RELOC_MIPS_GOT_DISP},
  {"%got_page", BFD_RELOC_MIPS_GOT_PAGE},
  {"%got_ofst", BFD_RELOC_MIPS_GOT_OFST},
  {"%got_hi", BFD_RELOC_MIPS_GOT_HI16},
  {"%got_lo", BFD_RELOC_MIPS_GOT_LO16},
  {"%got", BFD_RELOC_MIPS_GOT16},
  {"%gp_rel", BFD_RELOC_GPREL16},
  {"%half", BFD_RELOC_16},
  {"%highest", BFD_RELOC_MIPS_HIGHEST},
  {"%higher", BFD_RELOC_MIPS_HIGHER},
  {"%neg", BFD_RELOC_MIPS_SUB},
#endif
  {"%hi", BFD_RELOC_HI16_S}
};


/* Return true if *STR points to a relocation operator.  When returning true,
   move *STR over the operator and store its relocation code in *RELOC.
   Leave both *STR and *RELOC alone when returning false.  */

static bfd_boolean
parse_relocation (char **str, bfd_reloc_code_real_type *reloc)
{
  size_t i;

  for (i = 0; i < ARRAY_SIZE (percent_op); i++)
    if (strncasecmp (*str, percent_op[i].str, strlen (percent_op[i].str)) == 0)
      {
	*str += strlen (percent_op[i].str);
	*reloc = percent_op[i].reloc;

	/* Check whether the output BFD supports this relocation.
	   If not, issue an error and fall back on something safe.  */
	if (!bfd_reloc_type_lookup (stdoutput, percent_op[i].reloc))
	  {
	    as_bad ("relocation %s isn't supported by the current ABI",
		    percent_op[i].str);
	    *reloc = BFD_RELOC_LO16;
	  }
	return TRUE;
      }
  return FALSE;
}


/* Parse string STR as a 16-bit relocatable operand.  Store the
   expression in *EP and the relocations in the array starting
   at RELOC.  Return the number of relocation operators used.

   On exit, EXPR_END points to the first character after the expression.
   If no relocation operators are used, RELOC[0] is set to BFD_RELOC_LO16.  */

static size_t
my_getSmallExpression (expressionS *ep, bfd_reloc_code_real_type *reloc,
		       char *str)
{
  bfd_reloc_code_real_type reversed_reloc[3];
  size_t reloc_index, i;
  int crux_depth, str_depth;
  char *crux;

  /* Search for the start of the main expression, recoding relocations
     in REVERSED_RELOC.  End the loop with CRUX pointing to the start
     of the main expression and with CRUX_DEPTH containing the number
     of open brackets at that point.  */
  reloc_index = -1;
  str_depth = 0;
  do
    {
      reloc_index++;
      crux = str;
      crux_depth = str_depth;

      /* Skip over whitespace and brackets, keeping count of the number
	 of brackets.  */
      while (*str == ' ' || *str == '\t' || *str == '(')
	if (*str++ == '(')
	  str_depth++;
    }
  while (*str == '%'
	 && reloc_index < (HAVE_NEWABI ? 3 : 1)
	 && parse_relocation (&str, &reversed_reloc[reloc_index]));

  my_getExpression (ep, crux);
  str = expr_end;

  /* Match every open bracket.  */
  while (crux_depth > 0 && (*str == ')' || *str == ' ' || *str == '\t'))
    if (*str++ == ')')
      crux_depth--;

  if (crux_depth > 0)
    as_bad ("unclosed '('");

  expr_end = str;

  if (reloc_index == 0)
    reloc[0] = BFD_RELOC_LO16;
  else
    {
      prev_reloc_op_frag = frag_now;
      for (i = 0; i < reloc_index; i++)
	reloc[i] = reversed_reloc[reloc_index - 1 - i];
    }

  return reloc_index;
}

static void
my_getExpression (expressionS *ep, char *str)
{
  char *save_in;
  valueT val;

  save_in = input_line_pointer;
  input_line_pointer = str;
  expression (ep);
  expr_end = input_line_pointer;
  input_line_pointer = save_in;

  /* If we are in mips16 mode, and this is an expression based on `.',
     then we bump the value of the symbol by 1 since that is how other
     text symbols are handled.  We don't bother to handle complex
     expressions, just `.' plus or minus a constant.  */
  if (mips_opts.mips16
      && ep->X_op == O_symbol
      && strcmp (S_GET_NAME (ep->X_add_symbol), FAKE_LABEL_NAME) == 0
      && S_GET_SEGMENT (ep->X_add_symbol) == now_seg
      && symbol_get_frag (ep->X_add_symbol) == frag_now
      && symbol_constant_p (ep->X_add_symbol)
      && (val = S_GET_VALUE (ep->X_add_symbol)) == frag_now_fix ())
    S_SET_VALUE (ep->X_add_symbol, val + 1);
}

/* Turn a string in input_line_pointer into a floating point constant
   of type TYPE, and store the appropriate bytes in *LITP.  The number
   of LITTLENUMS emitted is stored in *SIZEP.  An error message is
   returned, or NULL on OK.  */

char *
md_atof (int type, char *litP, int *sizeP)
{
  int prec;
  LITTLENUM_TYPE words[4];
  char *t;
  int i;

  switch (type)
    {
    case 'f':
      prec = 2;
      break;

    case 'd':
      prec = 4;
      break;

    default:
      *sizeP = 0;
      return _("bad call to md_atof");
    }

  t = atof_ieee (input_line_pointer, type, words);
  if (t)
    input_line_pointer = t;

  *sizeP = prec * 2;

  if (! target_big_endian)
    {
      for (i = prec - 1; i >= 0; i--)
	{
	  md_number_to_chars (litP, words[i], 2);
	  litP += 2;
	}
    }
  else
    {
      for (i = 0; i < prec; i++)
	{
	  md_number_to_chars (litP, words[i], 2);
	  litP += 2;
	}
    }

  return NULL;
}

void
md_number_to_chars (char *buf, valueT val, int n)
{
  if (target_big_endian)
    number_to_chars_bigendian (buf, val, n);
  else
    number_to_chars_littleendian (buf, val, n);
}

#ifdef OBJ_ELF
static int support_64bit_objects(void)
{
  const char **list, **l;
  int yes;

  list = bfd_target_list ();
  for (l = list; *l != NULL; l++)
#ifdef TE_TMIPS
    /* This is traditional mips */
    if (strcmp (*l, "elf64-tradbigmips") == 0
	|| strcmp (*l, "elf64-tradlittlemips") == 0)
#else
    if (strcmp (*l, "elf64-bigmips") == 0
	|| strcmp (*l, "elf64-littlemips") == 0)
#endif
      break;
  yes = (*l != NULL);
  free (list);
  return yes;
}
#endif /* OBJ_ELF */

const char *md_shortopts = "O::g::G:";

struct option md_longopts[] =
{
  /* Options which specify architecture.  */
#define OPTION_ARCH_BASE    (OPTION_MD_BASE)
#define OPTION_MARCH (OPTION_ARCH_BASE + 0)
  {"march", required_argument, NULL, OPTION_MARCH},
#define OPTION_MTUNE (OPTION_ARCH_BASE + 1)
  {"mtune", required_argument, NULL, OPTION_MTUNE},
#define OPTION_MIPS1 (OPTION_ARCH_BASE + 2)
  {"mips0", no_argument, NULL, OPTION_MIPS1},
  {"mips1", no_argument, NULL, OPTION_MIPS1},
#define OPTION_MIPS2 (OPTION_ARCH_BASE + 3)
  {"mips2", no_argument, NULL, OPTION_MIPS2},
#define OPTION_MIPS3 (OPTION_ARCH_BASE + 4)
  {"mips3", no_argument, NULL, OPTION_MIPS3},
#define OPTION_MIPS4 (OPTION_ARCH_BASE + 5)
  {"mips4", no_argument, NULL, OPTION_MIPS4},
#define OPTION_MIPS5 (OPTION_ARCH_BASE + 6)
  {"mips5", no_argument, NULL, OPTION_MIPS5},
#define OPTION_MIPS32 (OPTION_ARCH_BASE + 7)
  {"mips32", no_argument, NULL, OPTION_MIPS32},
#define OPTION_MIPS64 (OPTION_ARCH_BASE + 8)
  {"mips64", no_argument, NULL, OPTION_MIPS64},
#define OPTION_MIPS32R2 (OPTION_ARCH_BASE + 9)
  {"mips32r2", no_argument, NULL, OPTION_MIPS32R2},
#define OPTION_MIPS64R2 (OPTION_ARCH_BASE + 10)
  {"mips64r2", no_argument, NULL, OPTION_MIPS64R2},

  /* Options which specify Application Specific Extensions (ASEs).  */
#define OPTION_ASE_BASE (OPTION_ARCH_BASE + 11)
#define OPTION_MIPS16 (OPTION_ASE_BASE + 0)
  {"mips16", no_argument, NULL, OPTION_MIPS16},
#define OPTION_NO_MIPS16 (OPTION_ASE_BASE + 1)
  {"no-mips16", no_argument, NULL, OPTION_NO_MIPS16},
#define OPTION_MIPS3D (OPTION_ASE_BASE + 2)
  {"mips3d", no_argument, NULL, OPTION_MIPS3D},
#define OPTION_NO_MIPS3D (OPTION_ASE_BASE + 3)
  {"no-mips3d", no_argument, NULL, OPTION_NO_MIPS3D},
#define OPTION_MDMX (OPTION_ASE_BASE + 4)
  {"mdmx", no_argument, NULL, OPTION_MDMX},
#define OPTION_NO_MDMX (OPTION_ASE_BASE + 5)
  {"no-mdmx", no_argument, NULL, OPTION_NO_MDMX},

  /* Old-style architecture options.  Don't add more of these.  */
#define OPTION_COMPAT_ARCH_BASE (OPTION_ASE_BASE + 6)
#define OPTION_M4650 (OPTION_COMPAT_ARCH_BASE + 0)
  {"m4650", no_argument, NULL, OPTION_M4650},
#define OPTION_NO_M4650 (OPTION_COMPAT_ARCH_BASE + 1)
  {"no-m4650", no_argument, NULL, OPTION_NO_M4650},
#define OPTION_M4010 (OPTION_COMPAT_ARCH_BASE + 2)
  {"m4010", no_argument, NULL, OPTION_M4010},
#define OPTION_NO_M4010 (OPTION_COMPAT_ARCH_BASE + 3)
  {"no-m4010", no_argument, NULL, OPTION_NO_M4010},
#define OPTION_M4100 (OPTION_COMPAT_ARCH_BASE + 4)
  {"m4100", no_argument, NULL, OPTION_M4100},
#define OPTION_NO_M4100 (OPTION_COMPAT_ARCH_BASE + 5)
  {"no-m4100", no_argument, NULL, OPTION_NO_M4100},
#define OPTION_M3900 (OPTION_COMPAT_ARCH_BASE + 6)
  {"m3900", no_argument, NULL, OPTION_M3900},
#define OPTION_NO_M3900 (OPTION_COMPAT_ARCH_BASE + 7)
  {"no-m3900", no_argument, NULL, OPTION_NO_M3900},

  /* Options which enable bug fixes.  */
#define OPTION_FIX_BASE    (OPTION_COMPAT_ARCH_BASE + 8)
#define OPTION_M7000_HILO_FIX (OPTION_FIX_BASE + 0)
  {"mfix7000", no_argument, NULL, OPTION_M7000_HILO_FIX},
#define OPTION_MNO_7000_HILO_FIX (OPTION_FIX_BASE + 1)
  {"no-fix-7000", no_argument, NULL, OPTION_MNO_7000_HILO_FIX},
  {"mno-fix7000", no_argument, NULL, OPTION_MNO_7000_HILO_FIX},
#define OPTION_FIX_VR4120 (OPTION_FIX_BASE + 2)
#define OPTION_NO_FIX_VR4120 (OPTION_FIX_BASE + 3)
  {"mfix-vr4120",    no_argument, NULL, OPTION_FIX_VR4120},
  {"mno-fix-vr4120", no_argument, NULL, OPTION_NO_FIX_VR4120},
#define	OPTION_FIX_LOONGSON2F_BTB (OPTION_FIX_BASE + 4)
#define	OPTION_NO_FIX_LOONGSON2F_BTB (OPTION_FIX_BASE + 5)
  {"mfix-loongson2f-btb", no_argument, NULL, OPTION_FIX_LOONGSON2F_BTB},
  {"mno-fix-loongson2f-btb", no_argument, NULL, OPTION_NO_FIX_LOONGSON2F_BTB},

  /* Miscellaneous options.  */
#define OPTION_MISC_BASE (OPTION_FIX_BASE + 6)
#define OPTION_MEMBEDDED_PIC (OPTION_MISC_BASE + 0)
  {"membedded-pic", no_argument, NULL, OPTION_MEMBEDDED_PIC},
#define OPTION_TRAP (OPTION_MISC_BASE + 1)
  {"trap", no_argument, NULL, OPTION_TRAP},
  {"no-break", no_argument, NULL, OPTION_TRAP},
#define OPTION_BREAK (OPTION_MISC_BASE + 2)
  {"break", no_argument, NULL, OPTION_BREAK},
  {"no-trap", no_argument, NULL, OPTION_BREAK},
#define OPTION_EB (OPTION_MISC_BASE + 3)
  {"EB", no_argument, NULL, OPTION_EB},
#define OPTION_EL (OPTION_MISC_BASE + 4)
  {"EL", no_argument, NULL, OPTION_EL},
#define OPTION_FP32 (OPTION_MISC_BASE + 5)
  {"mfp32", no_argument, NULL, OPTION_FP32},
#define OPTION_GP32 (OPTION_MISC_BASE + 6)
  {"mgp32", no_argument, NULL, OPTION_GP32},
#define OPTION_CONSTRUCT_FLOATS (OPTION_MISC_BASE + 7)
  {"construct-floats", no_argument, NULL, OPTION_CONSTRUCT_FLOATS},
#define OPTION_NO_CONSTRUCT_FLOATS (OPTION_MISC_BASE + 8)
  {"no-construct-floats", no_argument, NULL, OPTION_NO_CONSTRUCT_FLOATS},
#define OPTION_FP64 (OPTION_MISC_BASE + 9)
  {"mfp64", no_argument, NULL, OPTION_FP64},
#define OPTION_GP64 (OPTION_MISC_BASE + 10)
  {"mgp64", no_argument, NULL, OPTION_GP64},
#define OPTION_RELAX_BRANCH (OPTION_MISC_BASE + 11)
#define OPTION_NO_RELAX_BRANCH (OPTION_MISC_BASE + 12)
  {"relax-branch", no_argument, NULL, OPTION_RELAX_BRANCH},
  {"no-relax-branch", no_argument, NULL, OPTION_NO_RELAX_BRANCH},

  /* ELF-specific options.  */
#ifdef OBJ_ELF
#define OPTION_ELF_BASE    (OPTION_MISC_BASE + 13)
#define OPTION_CALL_SHARED (OPTION_ELF_BASE + 0)
  {"KPIC",        no_argument, NULL, OPTION_CALL_SHARED},
  {"call_shared", no_argument, NULL, OPTION_CALL_SHARED},
#define OPTION_NON_SHARED  (OPTION_ELF_BASE + 1)
  {"non_shared",  no_argument, NULL, OPTION_NON_SHARED},
#define OPTION_XGOT        (OPTION_ELF_BASE + 2)
  {"xgot",        no_argument, NULL, OPTION_XGOT},
#define OPTION_MABI        (OPTION_ELF_BASE + 3)
  {"mabi", required_argument, NULL, OPTION_MABI},
#define OPTION_32 	   (OPTION_ELF_BASE + 4)
  {"32",          no_argument, NULL, OPTION_32},
#define OPTION_N32 	   (OPTION_ELF_BASE + 5)
  {"n32",         no_argument, NULL, OPTION_N32},
#define OPTION_64          (OPTION_ELF_BASE + 6)
  {"64",          no_argument, NULL, OPTION_64},
#define OPTION_MDEBUG      (OPTION_ELF_BASE + 7)
  {"mdebug", no_argument, NULL, OPTION_MDEBUG},
#define OPTION_NO_MDEBUG   (OPTION_ELF_BASE + 8)
  {"no-mdebug", no_argument, NULL, OPTION_NO_MDEBUG},
#define OPTION_PDR	   (OPTION_ELF_BASE + 9)
  {"mpdr", no_argument, NULL, OPTION_PDR},
#define OPTION_NO_PDR	   (OPTION_ELF_BASE + 10)
  {"mno-pdr", no_argument, NULL, OPTION_NO_PDR},
#endif /* OBJ_ELF */

  {NULL, no_argument, NULL, 0}
};
size_t md_longopts_size = sizeof (md_longopts);

/* Set STRING_PTR (either &mips_arch_string or &mips_tune_string) to
   NEW_VALUE.  Warn if another value was already specified.  Note:
   we have to defer parsing the -march and -mtune arguments in order
   to handle 'from-abi' correctly, since the ABI might be specified
   in a later argument.  */

static void
mips_set_option_string (const char **string_ptr, const char *new_value)
{
  if (*string_ptr != 0 && strcasecmp (*string_ptr, new_value) != 0)
    as_warn (_("A different %s was already specified, is now %s"),
	     string_ptr == &mips_arch_string ? "-march" : "-mtune",
	     new_value);

  *string_ptr = new_value;
}

int
md_parse_option (int c, char *arg)
{
  switch (c)
    {
    case OPTION_CONSTRUCT_FLOATS:
      mips_disable_float_construction = 0;
      break;

    case OPTION_NO_CONSTRUCT_FLOATS:
      mips_disable_float_construction = 1;
      break;

    case OPTION_TRAP:
      mips_trap = 1;
      break;

    case OPTION_BREAK:
      mips_trap = 0;
      break;

    case OPTION_EB:
      target_big_endian = 1;
      break;

    case OPTION_EL:
      target_big_endian = 0;
      break;

    case 'O':
      if (arg && arg[1] == '0')
	mips_optimize = 1;
      else
	mips_optimize = 2;
      break;

    case 'g':
      if (arg == NULL)
	mips_debug = 2;
      else
	mips_debug = atoi (arg);
      /* When the MIPS assembler sees -g or -g2, it does not do
         optimizations which limit full symbolic debugging.  We take
         that to be equivalent to -O0.  */
      if (mips_debug == 2)
	mips_optimize = 1;
      break;

    case OPTION_MIPS1:
      file_mips_isa = ISA_MIPS1;
      break;

    case OPTION_MIPS2:
      file_mips_isa = ISA_MIPS2;
      break;

    case OPTION_MIPS3:
      file_mips_isa = ISA_MIPS3;
      break;

    case OPTION_MIPS4:
      file_mips_isa = ISA_MIPS4;
      break;

    case OPTION_MIPS5:
      file_mips_isa = ISA_MIPS5;
      break;

    case OPTION_MIPS32:
      file_mips_isa = ISA_MIPS32;
      break;

    case OPTION_MIPS32R2:
      file_mips_isa = ISA_MIPS32R2;
      break;

    case OPTION_MIPS64R2:
      file_mips_isa = ISA_MIPS64R2;
      break;

    case OPTION_MIPS64:
      file_mips_isa = ISA_MIPS64;
      break;

    case OPTION_MTUNE:
      mips_set_option_string (&mips_tune_string, arg);
      break;

    case OPTION_MARCH:
      mips_set_option_string (&mips_arch_string, arg);
      break;

    case OPTION_M4650:
      mips_set_option_string (&mips_arch_string, "4650");
      mips_set_option_string (&mips_tune_string, "4650");
      break;

    case OPTION_NO_M4650:
      break;

    case OPTION_M4010:
      mips_set_option_string (&mips_arch_string, "4010");
      mips_set_option_string (&mips_tune_string, "4010");
      break;

    case OPTION_NO_M4010:
      break;

    case OPTION_M4100:
      mips_set_option_string (&mips_arch_string, "4100");
      mips_set_option_string (&mips_tune_string, "4100");
      break;

    case OPTION_NO_M4100:
      break;

    case OPTION_M3900:
      mips_set_option_string (&mips_arch_string, "3900");
      mips_set_option_string (&mips_tune_string, "3900");
      break;

    case OPTION_NO_M3900:
      break;

    case OPTION_MDMX:
      mips_opts.ase_mdmx = 1;
      break;

    case OPTION_NO_MDMX:
      mips_opts.ase_mdmx = 0;
      break;

    case OPTION_MIPS16:
      mips_opts.mips16 = 1;
      mips_no_prev_insn (FALSE);
      break;

    case OPTION_NO_MIPS16:
      mips_opts.mips16 = 0;
      mips_no_prev_insn (FALSE);
      break;

    case OPTION_MIPS3D:
      mips_opts.ase_mips3d = 1;
      break;

    case OPTION_NO_MIPS3D:
      mips_opts.ase_mips3d = 0;
      break;

    case OPTION_MEMBEDDED_PIC:
      mips_pic = EMBEDDED_PIC;
      if (USE_GLOBAL_POINTER_OPT && g_switch_seen)
	{
	  as_bad (_("-G may not be used with embedded PIC code"));
	  return 0;
	}
      g_switch_value = 0x7fffffff;
      break;

    case OPTION_FIX_VR4120:
      mips_fix_vr4120 = 1;
      break;

    case OPTION_NO_FIX_VR4120:
      mips_fix_vr4120 = 0;
      break;

    case OPTION_FIX_LOONGSON2F_BTB:
      mips_fix_loongson2f_btb = 1;
      break;

    case OPTION_NO_FIX_LOONGSON2F_BTB:
      mips_fix_loongson2f_btb = 0;
      break;

    case OPTION_RELAX_BRANCH:
      mips_relax_branch = 1;
      break;

    case OPTION_NO_RELAX_BRANCH:
      mips_relax_branch = 0;
      break;

#ifdef OBJ_ELF
      /* When generating ELF code, we permit -KPIC and -call_shared to
	 select SVR4_PIC, and -non_shared to select no PIC.  This is
	 intended to be compatible with Irix 5.  */
    case OPTION_CALL_SHARED:
      if (OUTPUT_FLAVOR != bfd_target_elf_flavour)
	{
	  as_bad (_("-call_shared is supported only for ELF format"));
	  return 0;
	}
      mips_pic = SVR4_PIC;
      mips_abicalls = TRUE;
      if (g_switch_seen && g_switch_value != 0)
	{
	  as_bad (_("-G may not be used with SVR4 PIC code"));
	  return 0;
	}
      g_switch_value = 0;
      break;

    case OPTION_NON_SHARED:
      if (OUTPUT_FLAVOR != bfd_target_elf_flavour)
	{
	  as_bad (_("-non_shared is supported only for ELF format"));
	  return 0;
	}
      mips_pic = NO_PIC;
      mips_abicalls = FALSE;
      break;

      /* The -xgot option tells the assembler to use 32 offsets when
         accessing the got in SVR4_PIC mode.  It is for Irix
         compatibility.  */
    case OPTION_XGOT:
      mips_big_got = 1;
      break;
#endif /* OBJ_ELF */

    case 'G':
      if (! USE_GLOBAL_POINTER_OPT)
	{
	  as_bad (_("-G is not supported for this configuration"));
	  return 0;
	}
      else if (mips_pic == SVR4_PIC || mips_pic == EMBEDDED_PIC)
	{
	  as_bad (_("-G may not be used with SVR4 or embedded PIC code"));
	  return 0;
	}
      else
	g_switch_value = atoi (arg);
      g_switch_seen = 1;
      break;

#ifdef OBJ_ELF
      /* The -32, -n32 and -64 options are shortcuts for -mabi=32, -mabi=n32
	 and -mabi=64.  */
    case OPTION_32:
      if (OUTPUT_FLAVOR != bfd_target_elf_flavour)
	{
	  as_bad (_("-32 is supported for ELF format only"));
	  return 0;
	}
      mips_abi = O32_ABI;
      break;

    case OPTION_N32:
      if (OUTPUT_FLAVOR != bfd_target_elf_flavour)
	{
	  as_bad (_("-n32 is supported for ELF format only"));
	  return 0;
	}
      mips_abi = N32_ABI;
      break;

    case OPTION_64:
      if (OUTPUT_FLAVOR != bfd_target_elf_flavour)
	{
	  as_bad (_("-64 is supported for ELF format only"));
	  return 0;
	}
      mips_abi = N64_ABI;
      if (! support_64bit_objects())
	as_fatal (_("No compiled in support for 64 bit object file format"));
      break;
#endif /* OBJ_ELF */

    case OPTION_GP32:
      file_mips_gp32 = 1;
      break;

    case OPTION_GP64:
      file_mips_gp32 = 0;
      break;

    case OPTION_FP32:
      file_mips_fp32 = 1;
      break;

    case OPTION_FP64:
      file_mips_fp32 = 0;
      break;

#ifdef OBJ_ELF
    case OPTION_MABI:
      if (OUTPUT_FLAVOR != bfd_target_elf_flavour)
	{
	  as_bad (_("-mabi is supported for ELF format only"));
	  return 0;
	}
      if (strcmp (arg, "32") == 0)
	mips_abi = O32_ABI;
      else if (strcmp (arg, "o64") == 0)
	mips_abi = O64_ABI;
      else if (strcmp (arg, "n32") == 0)
	mips_abi = N32_ABI;
      else if (strcmp (arg, "64") == 0)
	{
	  mips_abi = N64_ABI;
	  if (! support_64bit_objects())
	    as_fatal (_("No compiled in support for 64 bit object file "
			"format"));
	}
      else if (strcmp (arg, "eabi") == 0)
	mips_abi = EABI_ABI;
      else
	{
	  as_fatal (_("invalid abi -mabi=%s"), arg);
	  return 0;
	}
      break;
#endif /* OBJ_ELF */

    case OPTION_M7000_HILO_FIX:
      mips_7000_hilo_fix = TRUE;
      break;

    case OPTION_MNO_7000_HILO_FIX:
      mips_7000_hilo_fix = FALSE;
      break;

#ifdef OBJ_ELF
    case OPTION_MDEBUG:
      mips_flag_mdebug = TRUE;
      break;

    case OPTION_NO_MDEBUG:
      mips_flag_mdebug = FALSE;
      break;

    case OPTION_PDR:
      mips_flag_pdr = TRUE;
      break;

    case OPTION_NO_PDR:
      mips_flag_pdr = FALSE;
      break;
#endif /* OBJ_ELF */

    default:
      return 0;
    }

  return 1;
}

/* Set up globals to generate code for the ISA or processor
   described by INFO.  */

static void
mips_set_architecture (const struct mips_cpu_info *info)
{
  if (info != 0)
    {
      file_mips_arch = info->cpu;
      mips_opts.arch = info->cpu;
      mips_opts.isa = info->isa;
    }
}


/* Likewise for tuning.  */

static void
mips_set_tune (const struct mips_cpu_info *info)
{
  if (info != 0)
    mips_tune = info->cpu;
}


void
mips_after_parse_args (void)
{
  const struct mips_cpu_info *arch_info = 0;
  const struct mips_cpu_info *tune_info = 0;

  /* GP relative stuff not working for PE */
  if (strncmp (TARGET_OS, "pe", 2) == 0
      && g_switch_value != 0)
    {
      if (g_switch_seen)
	as_bad (_("-G not supported in this configuration."));
      g_switch_value = 0;
    }

  if (mips_abi == NO_ABI)
    mips_abi = MIPS_DEFAULT_ABI;

  /* The following code determines the architecture and register size.
     Similar code was added to GCC 3.3 (see override_options() in
     config/mips/mips.c).  The GAS and GCC code should be kept in sync
     as much as possible.  */

  if (mips_arch_string != 0)
    arch_info = mips_parse_cpu ("-march", mips_arch_string);

  if (file_mips_isa != ISA_UNKNOWN)
    {
      /* Handle -mipsN.  At this point, file_mips_isa contains the
	 ISA level specified by -mipsN, while arch_info->isa contains
	 the -march selection (if any).  */
      if (arch_info != 0)
	{
	  /* -march takes precedence over -mipsN, since it is more descriptive.
	     There's no harm in specifying both as long as the ISA levels
	     are the same.  */
	  if (file_mips_isa != arch_info->isa)
	    as_bad (_("-%s conflicts with the other architecture options, which imply -%s"),
		    mips_cpu_info_from_isa (file_mips_isa)->name,
		    mips_cpu_info_from_isa (arch_info->isa)->name);
	}
      else
	arch_info = mips_cpu_info_from_isa (file_mips_isa);
    }

  if (arch_info == 0)
    arch_info = mips_parse_cpu ("default CPU", MIPS_CPU_STRING_DEFAULT);

  if (ABI_NEEDS_64BIT_REGS (mips_abi) && !ISA_HAS_64BIT_REGS (arch_info->isa))
    as_bad ("-march=%s is not compatible with the selected ABI",
	    arch_info->name);

  mips_set_architecture (arch_info);

  /* Optimize for file_mips_arch, unless -mtune selects a different processor.  */
  if (mips_tune_string != 0)
    tune_info = mips_parse_cpu ("-mtune", mips_tune_string);

  if (tune_info == 0)
    mips_set_tune (arch_info);
  else
    mips_set_tune (tune_info);

  if (file_mips_gp32 >= 0)
    {
      /* The user specified the size of the integer registers.  Make sure
	 it agrees with the ABI and ISA.  */
      if (file_mips_gp32 == 0 && !ISA_HAS_64BIT_REGS (mips_opts.isa))
	as_bad (_("-mgp64 used with a 32-bit processor"));
      else if (file_mips_gp32 == 1 && ABI_NEEDS_64BIT_REGS (mips_abi))
	as_bad (_("-mgp32 used with a 64-bit ABI"));
      else if (file_mips_gp32 == 0 && ABI_NEEDS_32BIT_REGS (mips_abi))
	as_bad (_("-mgp64 used with a 32-bit ABI"));
    }
  else
    {
      /* Infer the integer register size from the ABI and processor.
	 Restrict ourselves to 32-bit registers if that's all the
	 processor has, or if the ABI cannot handle 64-bit registers.  */
      file_mips_gp32 = (ABI_NEEDS_32BIT_REGS (mips_abi)
			|| !ISA_HAS_64BIT_REGS (mips_opts.isa));
    }

  /* ??? GAS treats single-float processors as though they had 64-bit
     float registers (although it complains when double-precision
     instructions are used).  As things stand, saying they have 32-bit
     registers would lead to spurious "register must be even" messages.
     So here we assume float registers are always the same size as
     integer ones, unless the user says otherwise.  */
  if (file_mips_fp32 < 0)
    file_mips_fp32 = file_mips_gp32;

  /* End of GCC-shared inference code.  */

  /* This flag is set when we have a 64-bit capable CPU but use only
     32-bit wide registers.  Note that EABI does not use it.  */
  if (ISA_HAS_64BIT_REGS (mips_opts.isa)
      && ((mips_abi == NO_ABI && file_mips_gp32 == 1)
	  || mips_abi == O32_ABI))
    mips_32bitmode = 1;

  if (mips_opts.isa == ISA_MIPS1 && mips_trap)
    as_bad (_("trap exception not supported at ISA 1"));

  /* If the selected architecture includes support for ASEs, enable
     generation of code for them.  */
  if (mips_opts.mips16 == -1)
    mips_opts.mips16 = (CPU_HAS_MIPS16 (file_mips_arch)) ? 1 : 0;
  if (mips_opts.ase_mips3d == -1)
    mips_opts.ase_mips3d = (CPU_HAS_MIPS3D (file_mips_arch)) ? 1 : 0;
  if (mips_opts.ase_mdmx == -1)
    mips_opts.ase_mdmx = (CPU_HAS_MDMX (file_mips_arch)) ? 1 : 0;

  file_mips_isa = mips_opts.isa;
  file_ase_mips16 = mips_opts.mips16;
  file_ase_mips3d = mips_opts.ase_mips3d;
  file_ase_mdmx = mips_opts.ase_mdmx;
  mips_opts.gp32 = file_mips_gp32;
  mips_opts.fp32 = file_mips_fp32;

  if (mips_flag_mdebug < 0)
    {
#ifdef OBJ_MAYBE_ECOFF
      if (OUTPUT_FLAVOR == bfd_target_ecoff_flavour)
	mips_flag_mdebug = 1;
      else
#endif /* OBJ_MAYBE_ECOFF */
	mips_flag_mdebug = 0;
    }
}

void
mips_init_after_args (void)
{
  /* initialize opcodes */
  bfd_mips_num_opcodes = bfd_mips_num_builtin_opcodes;
  mips_opcodes = (struct mips_opcode *) mips_builtin_opcodes;
}

long
md_pcrel_from (fixS *fixP)
{
  valueT addr = fixP->fx_where + fixP->fx_frag->fr_address;
  switch (fixP->fx_r_type)
    {
    case BFD_RELOC_16_PCREL_S2:
    case BFD_RELOC_MIPS_JMP:
      /* Return the address of the delay slot.  */
      return addr + 4;
    default:
      return addr;
    }
}

/* This is called before the symbol table is processed.  In order to
   work with gcc when using mips-tfile, we must keep all local labels.
   However, in other cases, we want to discard them.  If we were
   called with -g, but we didn't see any debugging information, it may
   mean that gcc is smuggling debugging information through to
   mips-tfile, in which case we must generate all local labels.  */

void
mips_frob_file_before_adjust (void)
{
#ifndef NO_ECOFF_DEBUGGING
  if (ECOFF_DEBUGGING
      && mips_debug != 0
      && ! ecoff_debugging_seen)
    flag_keep_locals = 1;
#endif
}

/* Sort any unmatched HI16_S relocs so that they immediately precede
   the corresponding LO reloc.  This is called before md_apply_fix3 and
   tc_gen_reloc.  Unmatched HI16_S relocs can only be generated by
   explicit use of the %hi modifier.  */

void
mips_frob_file (void)
{
  struct mips_hi_fixup *l;

  for (l = mips_hi_fixup_list; l != NULL; l = l->next)
    {
      segment_info_type *seginfo;
      int pass;

      assert (reloc_needs_lo_p (l->fixp->fx_r_type));

      /* If a GOT16 relocation turns out to be against a global symbol,
	 there isn't supposed to be a matching LO.  */
      if (l->fixp->fx_r_type == BFD_RELOC_MIPS_GOT16
	  && !pic_need_relax (l->fixp->fx_addsy, l->seg))
	continue;

      /* Check quickly whether the next fixup happens to be a matching %lo.  */
      if (fixup_has_matching_lo_p (l->fixp))
	continue;

      /* Look through the fixups for this segment for a matching %lo.
         When we find one, move the %hi just in front of it.  We do
         this in two passes.  In the first pass, we try to find a
         unique %lo.  In the second pass, we permit multiple %hi
         relocs for a single %lo (this is a GNU extension).  */
      seginfo = seg_info (l->seg);
      for (pass = 0; pass < 2; pass++)
	{
	  fixS *f, *prev;

	  prev = NULL;
	  for (f = seginfo->fix_root; f != NULL; f = f->fx_next)
	    {
	      /* Check whether this is a %lo fixup which matches l->fixp.  */
	      if (f->fx_r_type == BFD_RELOC_LO16
		  && f->fx_addsy == l->fixp->fx_addsy
		  && f->fx_offset == l->fixp->fx_offset
		  && (pass == 1
		      || prev == NULL
		      || !reloc_needs_lo_p (prev->fx_r_type)
		      || !fixup_has_matching_lo_p (prev)))
		{
		  fixS **pf;

		  /* Move l->fixp before f.  */
		  for (pf = &seginfo->fix_root;
		       *pf != l->fixp;
		       pf = &(*pf)->fx_next)
		    assert (*pf != NULL);

		  *pf = l->fixp->fx_next;

		  l->fixp->fx_next = f;
		  if (prev == NULL)
		    seginfo->fix_root = l->fixp;
		  else
		    prev->fx_next = l->fixp;

		  break;
		}

	      prev = f;
	    }

	  if (f != NULL)
	    break;

#if 0 /* GCC code motion plus incomplete dead code elimination
	 can leave a %hi without a %lo.  */
	  if (pass == 1)
	    as_warn_where (l->fixp->fx_file, l->fixp->fx_line,
			   _("Unmatched %%hi reloc"));
#endif
	}
    }
}

/* When generating embedded PIC code we need to use a special
   relocation to represent the difference of two symbols in the .text
   section (switch tables use a difference of this sort).  See
   include/coff/mips.h for details.  This macro checks whether this
   fixup requires the special reloc.  */
#define SWITCH_TABLE(fixp) \
  ((fixp)->fx_r_type == BFD_RELOC_32 \
   && OUTPUT_FLAVOR != bfd_target_elf_flavour \
   && (fixp)->fx_addsy != NULL \
   && (fixp)->fx_subsy != NULL \
   && S_GET_SEGMENT ((fixp)->fx_addsy) == text_section \
   && S_GET_SEGMENT ((fixp)->fx_subsy) == text_section)

/* When generating embedded PIC code we must keep all PC relative
   relocations, in case the linker has to relax a call.  We also need
   to keep relocations for switch table entries.

   We may have combined relocations without symbols in the N32/N64 ABI.
   We have to prevent gas from dropping them.  */

int
mips_force_relocation (fixS *fixp)
{
  if (generic_force_reloc (fixp))
    return 1;

  if (HAVE_NEWABI
      && S_GET_SEGMENT (fixp->fx_addsy) == bfd_abs_section_ptr
      && (fixp->fx_r_type == BFD_RELOC_MIPS_SUB
	  || fixp->fx_r_type == BFD_RELOC_HI16_S
	  || fixp->fx_r_type == BFD_RELOC_LO16))
    return 1;

  return (mips_pic == EMBEDDED_PIC
	  && (fixp->fx_pcrel
	      || SWITCH_TABLE (fixp)
	      || fixp->fx_r_type == BFD_RELOC_PCREL_HI16_S
	      || fixp->fx_r_type == BFD_RELOC_PCREL_LO16));
}

/* This hook is called before a fix is simplified.  We don't really
   decide whether to skip a fix here.  Rather, we turn global symbols
   used as branch targets into local symbols, such that they undergo
   simplification.  We can only do this if the symbol is defined and
   it is in the same section as the branch.  If this doesn't hold, we
   emit a better error message than just saying the relocation is not
   valid for the selected object format.

   FIXP is the fix-up we're going to try to simplify, SEG is the
   segment in which the fix up occurs.  The return value should be
   non-zero to indicate the fix-up is valid for further
   simplifications.  */

int
mips_validate_fix (struct fix *fixP, asection *seg)
{
  /* There's a lot of discussion on whether it should be possible to
     use R_MIPS_PC16 to represent branch relocations.  The outcome
     seems to be that it can, but gas/bfd are very broken in creating
     RELA relocations for this, so for now we only accept branches to
     symbols in the same section.  Anything else is of dubious value,
     since there's no guarantee that at link time the symbol would be
     in range.  Even for branches to local symbols this is arguably
     wrong, since it we assume the symbol is not going to be
     overridden, which should be possible per ELF library semantics,
     but then, there isn't a dynamic relocation that could be used to
     this effect, and the target would likely be out of range as well.

     Unfortunately, it seems that there is too much code out there
     that relies on branches to symbols that are global to be resolved
     as if they were local, like the IRIX tools do, so we do it as
     well, but with a warning so that people are reminded to fix their
     code.  If we ever get back to using R_MIPS_PC16 for branch
     targets, this entire block should go away (and probably the
     whole function).  */

  if (fixP->fx_r_type == BFD_RELOC_16_PCREL_S2
      && (((OUTPUT_FLAVOR == bfd_target_ecoff_flavour
	    || OUTPUT_FLAVOR == bfd_target_elf_flavour)
	   && mips_pic != EMBEDDED_PIC)
	  || bfd_reloc_type_lookup (stdoutput, BFD_RELOC_16_PCREL_S2) == NULL)
      && fixP->fx_addsy)
    {
      if (! S_IS_DEFINED (fixP->fx_addsy))
	{
	  as_bad_where (fixP->fx_file, fixP->fx_line,
			_("Cannot branch to undefined symbol."));
	  /* Avoid any further errors about this fixup.  */
	  fixP->fx_done = 1;
	}
      else if (S_GET_SEGMENT (fixP->fx_addsy) != seg)
	{
	  as_bad_where (fixP->fx_file, fixP->fx_line,
			_("Cannot branch to symbol in another section."));
	  fixP->fx_done = 1;
	}
      else if (S_IS_EXTERNAL (fixP->fx_addsy))
	{
	  symbolS *sym = fixP->fx_addsy;

	  if (mips_pic == SVR4_PIC)
	    as_warn_where (fixP->fx_file, fixP->fx_line,
			   _("Pretending global symbol used as branch target is local."));

	  fixP->fx_addsy = symbol_create (S_GET_NAME (sym),
					  S_GET_SEGMENT (sym),
					  S_GET_VALUE (sym),
					  symbol_get_frag (sym));
	  copy_symbol_attributes (fixP->fx_addsy, sym);
	  S_CLEAR_EXTERNAL (fixP->fx_addsy);
	  assert (symbol_resolved_p (sym));
	  symbol_mark_resolved (fixP->fx_addsy);
	}
    }

  return 1;
}

/* Apply a fixup to the object file.  */

void
md_apply_fix3 (fixS *fixP, valueT *valP, segT seg ATTRIBUTE_UNUSED)
{
  bfd_byte *buf;
  long insn;
  static int previous_fx_r_type = 0;
  reloc_howto_type *howto;

  /* We ignore generic BFD relocations we don't know about.  */
  howto = bfd_reloc_type_lookup (stdoutput, fixP->fx_r_type);
  if (! howto)
    return;

  assert (fixP->fx_size == 4
	  || fixP->fx_r_type == BFD_RELOC_16
	  || fixP->fx_r_type == BFD_RELOC_64
	  || fixP->fx_r_type == BFD_RELOC_CTOR
	  || fixP->fx_r_type == BFD_RELOC_MIPS_SUB
	  || fixP->fx_r_type == BFD_RELOC_VTABLE_INHERIT
	  || fixP->fx_r_type == BFD_RELOC_VTABLE_ENTRY);

  buf = (bfd_byte *) (fixP->fx_frag->fr_literal + fixP->fx_where);

  /* We are not done if this is a composite relocation to set up gp.  */
  if (fixP->fx_addsy == NULL && ! fixP->fx_pcrel
      && !(fixP->fx_r_type == BFD_RELOC_MIPS_SUB
	   || (fixP->fx_r_type == BFD_RELOC_64
	       && (previous_fx_r_type == BFD_RELOC_GPREL32
		   || previous_fx_r_type == BFD_RELOC_GPREL16))
	   || (previous_fx_r_type == BFD_RELOC_MIPS_SUB
	       && (fixP->fx_r_type == BFD_RELOC_HI16_S
		   || fixP->fx_r_type == BFD_RELOC_LO16))))
    fixP->fx_done = 1;
  previous_fx_r_type = fixP->fx_r_type;

  switch (fixP->fx_r_type)
    {
    case BFD_RELOC_MIPS_JMP:
    case BFD_RELOC_MIPS_SHIFT5:
    case BFD_RELOC_MIPS_SHIFT6:
    case BFD_RELOC_MIPS_GOT_DISP:
    case BFD_RELOC_MIPS_GOT_PAGE:
    case BFD_RELOC_MIPS_GOT_OFST:
    case BFD_RELOC_MIPS_SUB:
    case BFD_RELOC_MIPS_INSERT_A:
    case BFD_RELOC_MIPS_INSERT_B:
    case BFD_RELOC_MIPS_DELETE:
    case BFD_RELOC_MIPS_HIGHEST:
    case BFD_RELOC_MIPS_HIGHER:
    case BFD_RELOC_MIPS_SCN_DISP:
    case BFD_RELOC_MIPS_REL16:
    case BFD_RELOC_MIPS_RELGOT:
    case BFD_RELOC_MIPS_JALR:
    case BFD_RELOC_HI16:
    case BFD_RELOC_HI16_S:
    case BFD_RELOC_GPREL16:
    case BFD_RELOC_MIPS_LITERAL:
    case BFD_RELOC_MIPS_CALL16:
    case BFD_RELOC_MIPS_GOT16:
    case BFD_RELOC_GPREL32:
    case BFD_RELOC_MIPS_GOT_HI16:
    case BFD_RELOC_MIPS_GOT_LO16:
    case BFD_RELOC_MIPS_CALL_HI16:
    case BFD_RELOC_MIPS_CALL_LO16:
    case BFD_RELOC_MIPS16_GPREL:
      if (fixP->fx_pcrel)
	as_bad_where (fixP->fx_file, fixP->fx_line,
		      _("Invalid PC relative reloc"));
      /* Nothing needed to do. The value comes from the reloc entry */
      break;

    case BFD_RELOC_MIPS16_JMP:
      /* We currently always generate a reloc against a symbol, which
         means that we don't want an addend even if the symbol is
         defined.  */
      *valP = 0;
      break;

    case BFD_RELOC_PCREL_HI16_S:
      /* The addend for this is tricky if it is internal, so we just
	 do everything here rather than in bfd_install_relocation.  */
      if (OUTPUT_FLAVOR == bfd_target_elf_flavour && !fixP->fx_done)
	break;
      if (fixP->fx_addsy
	  && (symbol_get_bfdsym (fixP->fx_addsy)->flags & BSF_SECTION_SYM) == 0)
	{
	  /* For an external symbol adjust by the address to make it
	     pcrel_offset.  We use the address of the RELLO reloc
	     which follows this one.  */
	  *valP += (fixP->fx_next->fx_frag->fr_address
		    + fixP->fx_next->fx_where);
	}
      *valP = ((*valP + 0x8000) >> 16) & 0xffff;
      if (target_big_endian)
	buf += 2;
      md_number_to_chars (buf, *valP, 2);
      break;

    case BFD_RELOC_PCREL_LO16:
      /* The addend for this is tricky if it is internal, so we just
	 do everything here rather than in bfd_install_relocation.  */
      if (OUTPUT_FLAVOR == bfd_target_elf_flavour && !fixP->fx_done)
	break;
      if (fixP->fx_addsy
	  && (symbol_get_bfdsym (fixP->fx_addsy)->flags & BSF_SECTION_SYM) == 0)
	*valP += fixP->fx_frag->fr_address + fixP->fx_where;
      if (target_big_endian)
	buf += 2;
      md_number_to_chars (buf, *valP, 2);
      break;

    case BFD_RELOC_64:
      /* This is handled like BFD_RELOC_32, but we output a sign
         extended value if we are only 32 bits.  */
      if (fixP->fx_done
	  || (mips_pic == EMBEDDED_PIC && SWITCH_TABLE (fixP)))
	{
	  if (8 <= sizeof (valueT))
	    md_number_to_chars (buf, *valP, 8);
	  else
	    {
	      valueT hiv;

	      if ((*valP & 0x80000000) != 0)
		hiv = 0xffffffff;
	      else
		hiv = 0;
	      md_number_to_chars ((char *)(buf + target_big_endian ? 4 : 0),
				  *valP, 4);
	      md_number_to_chars ((char *)(buf + target_big_endian ? 0 : 4),
				  hiv, 4);
	    }
	}
      break;

    case BFD_RELOC_RVA:
    case BFD_RELOC_32:
      /* If we are deleting this reloc entry, we must fill in the
	 value now.  This can happen if we have a .word which is not
	 resolved when it appears but is later defined.  We also need
	 to fill in the value if this is an embedded PIC switch table
	 entry.  */
      if (fixP->fx_done
	  || (mips_pic == EMBEDDED_PIC && SWITCH_TABLE (fixP)))
	md_number_to_chars (buf, *valP, 4);
      break;

    case BFD_RELOC_16:
      /* If we are deleting this reloc entry, we must fill in the
         value now.  */
      assert (fixP->fx_size == 2);
      if (fixP->fx_done)
	md_number_to_chars (buf, *valP, 2);
      break;

    case BFD_RELOC_LO16:
      /* When handling an embedded PIC switch statement, we can wind
	 up deleting a LO16 reloc.  See the 'o' case in mips_ip.  */
      if (fixP->fx_done)
	{
	  if (*valP + 0x8000 > 0xffff)
	    as_bad_where (fixP->fx_file, fixP->fx_line,
			  _("relocation overflow"));
	  if (target_big_endian)
	    buf += 2;
	  md_number_to_chars (buf, *valP, 2);
	}
      break;

    case BFD_RELOC_16_PCREL_S2:
      if ((*valP & 0x3) != 0)
	as_bad_where (fixP->fx_file, fixP->fx_line,
		      _("Branch to odd address (%lx)"), (long) *valP);

      /*
       * We need to save the bits in the instruction since fixup_segment()
       * might be deleting the relocation entry (i.e., a branch within
       * the current segment).
       */
      if (! fixP->fx_done)
	break;

      /* update old instruction data */
      if (target_big_endian)
	insn = (buf[0] << 24) | (buf[1] << 16) | (buf[2] << 8) | buf[3];
      else
	insn = (buf[3] << 24) | (buf[2] << 16) | (buf[1] << 8) | buf[0];

      if (*valP + 0x20000 <= 0x3ffff)
	{
	  insn |= (*valP >> 2) & 0xffff;
	  md_number_to_chars (buf, insn, 4);
	}
      else if (mips_pic == NO_PIC
	       && fixP->fx_done
	       && fixP->fx_frag->fr_address >= text_section->vma
	       && (fixP->fx_frag->fr_address
		   < text_section->vma + text_section->_raw_size)
	       && ((insn & 0xffff0000) == 0x10000000	 /* beq $0,$0 */
		   || (insn & 0xffff0000) == 0x04010000	 /* bgez $0 */
		   || (insn & 0xffff0000) == 0x04110000)) /* bgezal $0 */
	{
	  /* The branch offset is too large.  If this is an
             unconditional branch, and we are not generating PIC code,
             we can convert it to an absolute jump instruction.  */
	  if ((insn & 0xffff0000) == 0x04110000)	 /* bgezal $0 */
	    insn = 0x0c000000;	/* jal */
	  else
	    insn = 0x08000000;	/* j */
	  fixP->fx_r_type = BFD_RELOC_MIPS_JMP;
	  fixP->fx_done = 0;
	  fixP->fx_addsy = section_symbol (text_section);
	  *valP += md_pcrel_from (fixP);
	  md_number_to_chars (buf, insn, 4);
	}
      else
	{
	  /* If we got here, we have branch-relaxation disabled,
	     and there's nothing we can do to fix this instruction
	     without turning it into a longer sequence.  */
	  as_bad_where (fixP->fx_file, fixP->fx_line,
			_("Branch out of range"));
	}
      break;

    case BFD_RELOC_VTABLE_INHERIT:
      fixP->fx_done = 0;
      if (fixP->fx_addsy
          && !S_IS_DEFINED (fixP->fx_addsy)
          && !S_IS_WEAK (fixP->fx_addsy))
        S_SET_WEAK (fixP->fx_addsy);
      break;

    case BFD_RELOC_VTABLE_ENTRY:
      fixP->fx_done = 0;
      break;

    default:
      internalError ();
    }

  /* Remember value for tc_gen_reloc.  */
  fixP->fx_addnumber = *valP;
}

#if 0
void
printInsn (unsigned long oc)
{
  const struct mips_opcode *p;
  int treg, sreg, dreg, shamt;
  short imm;
  const char *args;
  int i;

  for (i = 0; i < NUMOPCODES; ++i)
    {
      p = &mips_opcodes[i];
      if (((oc & p->mask) == p->match) && (p->pinfo != INSN_MACRO))
	{
	  printf ("%08lx %s\t", oc, p->name);
	  treg = (oc >> 16) & 0x1f;
	  sreg = (oc >> 21) & 0x1f;
	  dreg = (oc >> 11) & 0x1f;
	  shamt = (oc >> 6) & 0x1f;
	  imm = oc;
	  for (args = p->args;; ++args)
	    {
	      switch (*args)
		{
		case '\0':
		  printf ("\n");
		  break;

		case ',':
		case '(':
		case ')':
		  printf ("%c", *args);
		  continue;

		case 'r':
		  assert (treg == sreg);
		  printf ("$%d,$%d", treg, sreg);
		  continue;

		case 'd':
		case 'G':
		  printf ("$%d", dreg);
		  continue;

		case 't':
		case 'E':
		  printf ("$%d", treg);
		  continue;

		case 'k':
		  printf ("0x%x", treg);
		  continue;

		case 'b':
		case 's':
		  printf ("$%d", sreg);
		  continue;

		case 'a':
		  printf ("0x%08lx", oc & 0x1ffffff);
		  continue;

		case 'i':
		case 'j':
		case 'o':
		case 'u':
		  printf ("%d", imm);
		  continue;

		case '<':
		case '>':
		  printf ("$%d", shamt);
		  continue;

		default:
		  internalError ();
		}
	      break;
	    }
	  return;
	}
    }
  printf (_("%08lx  UNDEFINED\n"), oc);
}
#endif

static symbolS *
get_symbol (void)
{
  int c;
  char *name;
  symbolS *p;

  name = input_line_pointer;
  c = get_symbol_end ();
  p = (symbolS *) symbol_find_or_make (name);
  *input_line_pointer = c;
  return p;
}

/* Align the current frag to a given power of two.  The MIPS assembler
   also automatically adjusts any preceding label.  */

static void
mips_align (int to, int fill, symbolS *label)
{
  mips_emit_delays (FALSE);
  frag_align (to, fill, 0);
  record_alignment (now_seg, to);
  if (label != NULL)
    {
      assert (S_GET_SEGMENT (label) == now_seg);
      symbol_set_frag (label, frag_now);
      S_SET_VALUE (label, (valueT) frag_now_fix ());
    }
}

/* Align to a given power of two.  .align 0 turns off the automatic
   alignment used by the data creating pseudo-ops.  */

static void
s_align (int x ATTRIBUTE_UNUSED)
{
  register int temp;
  register long temp_fill;
  long max_alignment = 15;

  /*

    o  Note that the assembler pulls down any immediately preceding label
       to the aligned address.
    o  It's not documented but auto alignment is reinstated by
       a .align pseudo instruction.
    o  Note also that after auto alignment is turned off the mips assembler
       issues an error on attempt to assemble an improperly aligned data item.
       We don't.

    */

  temp = get_absolute_expression ();
  if (temp > max_alignment)
    as_bad (_("Alignment too large: %d. assumed."), temp = max_alignment);
  else if (temp < 0)
    {
      as_warn (_("Alignment negative: 0 assumed."));
      temp = 0;
    }
  if (*input_line_pointer == ',')
    {
      ++input_line_pointer;
      temp_fill = get_absolute_expression ();
    }
  else
    temp_fill = 0;
  if (temp)
    {
      auto_align = 1;
      mips_align (temp, (int) temp_fill,
		  insn_labels != NULL ? insn_labels->label : NULL);
    }
  else
    {
      auto_align = 0;
    }

  demand_empty_rest_of_line ();
}

void
mips_flush_pending_output (void)
{
  mips_emit_delays (FALSE);
  mips_clear_insn_labels ();
}

static void
s_change_sec (int sec)
{
  segT seg;

  /* When generating embedded PIC code, we only use the .text, .lit8,
     .sdata and .sbss sections.  We change the .data and .rdata
     pseudo-ops to use .sdata.  */
  if (mips_pic == EMBEDDED_PIC
      && (sec == 'd' || sec == 'r'))
    sec = 's';

#ifdef OBJ_ELF
  /* The ELF backend needs to know that we are changing sections, so
     that .previous works correctly.  We could do something like check
     for an obj_section_change_hook macro, but that might be confusing
     as it would not be appropriate to use it in the section changing
     functions in read.c, since obj-elf.c intercepts those.  FIXME:
     This should be cleaner, somehow.  */
  obj_elf_section_change_hook ();
#endif

  mips_emit_delays (FALSE);
  switch (sec)
    {
    case 't':
      s_text (0);
      break;
    case 'd':
      s_data (0);
      break;
    case 'b':
      subseg_set (bss_section, (subsegT) get_absolute_expression ());
      demand_empty_rest_of_line ();
      break;

    case 'r':
      if (USE_GLOBAL_POINTER_OPT)
	{
	  seg = subseg_new (RDATA_SECTION_NAME,
			    (subsegT) get_absolute_expression ());
	  if (OUTPUT_FLAVOR == bfd_target_elf_flavour)
	    {
	      bfd_set_section_flags (stdoutput, seg,
				     (SEC_ALLOC
				      | SEC_LOAD
				      | SEC_READONLY
				      | SEC_RELOC
				      | SEC_DATA));
	      if (strcmp (TARGET_OS, "elf") != 0)
		record_alignment (seg, 4);
	    }
	  demand_empty_rest_of_line ();
	}
      else
	{
	  as_bad (_("No read only data section in this object file format"));
	  demand_empty_rest_of_line ();
	  return;
	}
      break;

    case 's':
      if (USE_GLOBAL_POINTER_OPT)
	{
	  seg = subseg_new (".sdata", (subsegT) get_absolute_expression ());
	  if (OUTPUT_FLAVOR == bfd_target_elf_flavour)
	    {
	      bfd_set_section_flags (stdoutput, seg,
				     SEC_ALLOC | SEC_LOAD | SEC_RELOC
				     | SEC_DATA);
	      if (strcmp (TARGET_OS, "elf") != 0)
		record_alignment (seg, 4);
	    }
	  demand_empty_rest_of_line ();
	  break;
	}
      else
	{
	  as_bad (_("Global pointers not supported; recompile -G 0"));
	  demand_empty_rest_of_line ();
	  return;
	}
    }

  auto_align = 1;
}

void
s_change_section (int ignore ATTRIBUTE_UNUSED)
{
#ifdef OBJ_ELF
  char *section_name;
  char c;
  char next_c = 0;
  int section_type;
  int section_flag;
  int section_entry_size;
  int section_alignment;

  if (OUTPUT_FLAVOR != bfd_target_elf_flavour)
    return;

  section_name = input_line_pointer;
  c = get_symbol_end ();
  if (c)
    next_c = *(input_line_pointer + 1);

  /* Do we have .section Name<,"flags">?  */
  if (c != ',' || (c == ',' && next_c == '"'))
    {
      /* just after name is now '\0'.  */
      *input_line_pointer = c;
      input_line_pointer = section_name;
      obj_elf_section (ignore);
      return;
    }
  input_line_pointer++;

  /* Do we have .section Name<,type><,flag><,entry_size><,alignment>  */
  if (c == ',')
    section_type = get_absolute_expression ();
  else
    section_type = 0;
  if (*input_line_pointer++ == ',')
    section_flag = get_absolute_expression ();
  else
    section_flag = 0;
  if (*input_line_pointer++ == ',')
    section_entry_size = get_absolute_expression ();
  else
    section_entry_size = 0;
  if (*input_line_pointer++ == ',')
    section_alignment = get_absolute_expression ();
  else
    section_alignment = 0;

  section_name = xstrdup (section_name);

  /* When using the generic form of .section (as implemented by obj-elf.c),
     there's no way to set the section type to SHT_MIPS_DWARF.  Users have
     traditionally had to fall back on the more common @@progbits instead.

     There's nothing really harmful in this, since bfd will correct
     SHT_PROGBITS to SHT_MIPS_DWARF before writing out the file.  But it
     means that, for backwards compatibiltiy, the special_section entries
     for dwarf sections must use SHT_PROGBITS rather than SHT_MIPS_DWARF.

     Even so, we shouldn't force users of the MIPS .section syntax to
     incorrectly label the sections as SHT_PROGBITS.  The best compromise
     seems to be to map SHT_MIPS_DWARF to SHT_PROGBITS before calling the
     generic type-checking code.  */
  if (section_type == SHT_MIPS_DWARF)
    section_type = SHT_PROGBITS;

  obj_elf_change_section (section_name, section_type, section_flag,
			  section_entry_size, 0, 0, 0);

  if (now_seg->name != section_name)
    free (section_name);
#endif /* OBJ_ELF */
}

void
mips_enable_auto_align (void)
{
  auto_align = 1;
}

static void
s_cons (int log_size)
{
  symbolS *label;

  label = insn_labels != NULL ? insn_labels->label : NULL;
  mips_emit_delays (FALSE);
  if (log_size > 0 && auto_align)
    mips_align (log_size, 0, label);
  mips_clear_insn_labels ();
  cons (1 << log_size);
}

static void
s_float_cons (int type)
{
  symbolS *label;

  label = insn_labels != NULL ? insn_labels->label : NULL;

  mips_emit_delays (FALSE);

  if (auto_align)
    {
      if (type == 'd')
	mips_align (3, 0, label);
      else
	mips_align (2, 0, label);
    }

  mips_clear_insn_labels ();

  float_cons (type);
}

/* Handle .globl.  We need to override it because on Irix 5 you are
   permitted to say
       .globl foo .text
   where foo is an undefined symbol, to mean that foo should be
   considered to be the address of a function.  */

static void
s_mips_globl (int x ATTRIBUTE_UNUSED)
{
  char *name;
  int c;
  symbolS *symbolP;
  flagword flag;

  name = input_line_pointer;
  c = get_symbol_end ();
  symbolP = symbol_find_or_make (name);
  *input_line_pointer = c;
  SKIP_WHITESPACE ();

  /* On Irix 5, every global symbol that is not explicitly labelled as
     being a function is apparently labelled as being an object.  */
  flag = BSF_OBJECT;

  if (! is_end_of_line[(unsigned char) *input_line_pointer])
    {
      char *secname;
      asection *sec;

      secname = input_line_pointer;
      c = get_symbol_end ();
      sec = bfd_get_section_by_name (stdoutput, secname);
      if (sec == NULL)
	as_bad (_("%s: no such section"), secname);
      *input_line_pointer = c;

      if (sec != NULL && (sec->flags & SEC_CODE) != 0)
	flag = BSF_FUNCTION;
    }

  symbol_get_bfdsym (symbolP)->flags |= flag;

  S_SET_EXTERNAL (symbolP);
  demand_empty_rest_of_line ();
}

static void
s_option (int x ATTRIBUTE_UNUSED)
{
  char *opt;
  char c;

  opt = input_line_pointer;
  c = get_symbol_end ();

  if (*opt == 'O')
    {
      /* FIXME: What does this mean?  */
    }
  else if (strncmp (opt, "pic", 3) == 0)
    {
      int i;

      i = atoi (opt + 3);
      if (i == 0)
	mips_pic = NO_PIC;
      else if (i == 2)
	{
	mips_pic = SVR4_PIC;
	  mips_abicalls = TRUE;
	}
      else
	as_bad (_(".option pic%d not supported"), i);

      if (USE_GLOBAL_POINTER_OPT && mips_pic == SVR4_PIC)
	{
	  if (g_switch_seen && g_switch_value != 0)
	    as_warn (_("-G may not be used with SVR4 PIC code"));
	  g_switch_value = 0;
	  bfd_set_gp_size (stdoutput, 0);
	}
    }
  else
    as_warn (_("Unrecognized option \"%s\""), opt);

  *input_line_pointer = c;
  demand_empty_rest_of_line ();
}

/* This structure is used to hold a stack of .set values.  */

struct mips_option_stack
{
  struct mips_option_stack *next;
  struct mips_set_options options;
};

static struct mips_option_stack *mips_opts_stack;

/* Handle the .set pseudo-op.  */

static void
s_mipsset (int x ATTRIBUTE_UNUSED)
{
  char *name = input_line_pointer, ch;

  while (!is_end_of_line[(unsigned char) *input_line_pointer])
    ++input_line_pointer;
  ch = *input_line_pointer;
  *input_line_pointer = '\0';

  if (strcmp (name, "reorder") == 0)
    {
      if (mips_opts.noreorder && prev_nop_frag != NULL)
	{
	  /* If we still have pending nops, we can discard them.  The
	     usual nop handling will insert any that are still
	     needed.  */
	  prev_nop_frag->fr_fix -= (prev_nop_frag_holds
				    * (mips_opts.mips16 ? 2 : 4));
	  prev_nop_frag = NULL;
	}
      mips_opts.noreorder = 0;
    }
  else if (strcmp (name, "noreorder") == 0)
    {
      mips_emit_delays (TRUE);
      mips_opts.noreorder = 1;
      mips_any_noreorder = 1;
    }
  else if (strcmp (name, "at") == 0)
    {
      mips_opts.noat = 0;
    }
  else if (strcmp (name, "noat") == 0)
    {
      mips_opts.noat = 1;
    }
  else if (strcmp (name, "macro") == 0)
    {
      mips_opts.warn_about_macros = 0;
    }
  else if (strcmp (name, "nomacro") == 0)
    {
      if (mips_opts.noreorder == 0)
	as_bad (_("`noreorder' must be set before `nomacro'"));
      mips_opts.warn_about_macros = 1;
    }
  else if (strcmp (name, "move") == 0 || strcmp (name, "novolatile") == 0)
    {
      mips_opts.nomove = 0;
    }
  else if (strcmp (name, "nomove") == 0 || strcmp (name, "volatile") == 0)
    {
      mips_opts.nomove = 1;
    }
  else if (strcmp (name, "bopt") == 0)
    {
      mips_opts.nobopt = 0;
    }
  else if (strcmp (name, "nobopt") == 0)
    {
      mips_opts.nobopt = 1;
    }
  else if (strcmp (name, "mips16") == 0
	   || strcmp (name, "MIPS-16") == 0)
    mips_opts.mips16 = 1;
  else if (strcmp (name, "nomips16") == 0
	   || strcmp (name, "noMIPS-16") == 0)
    mips_opts.mips16 = 0;
  else if (strcmp (name, "mips3d") == 0)
    mips_opts.ase_mips3d = 1;
  else if (strcmp (name, "nomips3d") == 0)
    mips_opts.ase_mips3d = 0;
  else if (strcmp (name, "mdmx") == 0)
    mips_opts.ase_mdmx = 1;
  else if (strcmp (name, "nomdmx") == 0)
    mips_opts.ase_mdmx = 0;
  else if (strncmp (name, "mips", 4) == 0 || strncmp (name, "arch=", 5) == 0)
    {
      int reset = 0;

      /* Permit the user to change the ISA and architecture on the fly.
	 Needless to say, misuse can cause serious problems.  */
      if (strcmp (name, "mips0") == 0)
	{
	  reset = 1;
	  mips_opts.isa = file_mips_isa;
	}
      else if (strcmp (name, "mips1") == 0)
	mips_opts.isa = ISA_MIPS1;
      else if (strcmp (name, "mips2") == 0)
	mips_opts.isa = ISA_MIPS2;
      else if (strcmp (name, "mips3") == 0)
	mips_opts.isa = ISA_MIPS3;
      else if (strcmp (name, "mips4") == 0)
	mips_opts.isa = ISA_MIPS4;
      else if (strcmp (name, "mips5") == 0)
	mips_opts.isa = ISA_MIPS5;
      else if (strcmp (name, "mips32") == 0)
	mips_opts.isa = ISA_MIPS32;
      else if (strcmp (name, "mips32r2") == 0)
	mips_opts.isa = ISA_MIPS32R2;
      else if (strcmp (name, "mips64") == 0)
	mips_opts.isa = ISA_MIPS64;
      else if (strcmp (name, "mips64r2") == 0)
	mips_opts.isa = ISA_MIPS64R2;
      else if (strcmp (name, "arch=default") == 0)
	{
	  reset = 1;
	  mips_opts.arch = file_mips_arch;
	  mips_opts.isa = file_mips_isa;
	}
      else if (strncmp (name, "arch=", 5) == 0)
	{
	  const struct mips_cpu_info *p;

	  p = mips_parse_cpu("internal use", name + 5);
	  if (!p)
	    as_bad (_("unknown architecture %s"), name + 5);
	  else
	    {
	      mips_opts.arch = p->cpu;
	      mips_opts.isa = p->isa;
	    }
	}
      else
	as_bad (_("unknown ISA level %s"), name + 4);

      switch (mips_opts.isa)
	{
	case  0:
	  break;
	case ISA_MIPS1:
	case ISA_MIPS2:
	case ISA_MIPS32:
	case ISA_MIPS32R2:
	  mips_opts.gp32 = 1;
	  mips_opts.fp32 = 1;
	  break;
	case ISA_MIPS3:
	case ISA_MIPS4:
	case ISA_MIPS5:
	case ISA_MIPS64:
	case ISA_MIPS64R2:
	  mips_opts.gp32 = 0;
	  mips_opts.fp32 = 0;
	  break;
	default:
	  as_bad (_("unknown ISA level %s"), name + 4);
	  break;
	}
      if (reset)
	{
	  mips_opts.gp32 = file_mips_gp32;
	  mips_opts.fp32 = file_mips_fp32;
	}
    }
  else if (strcmp (name, "autoextend") == 0)
    mips_opts.noautoextend = 0;
  else if (strcmp (name, "noautoextend") == 0)
    mips_opts.noautoextend = 1;
  else if (strcmp (name, "push") == 0)
    {
      struct mips_option_stack *s;

      s = (struct mips_option_stack *) xmalloc (sizeof *s);
      s->next = mips_opts_stack;
      s->options = mips_opts;
      mips_opts_stack = s;
    }
  else if (strcmp (name, "pop") == 0)
    {
      struct mips_option_stack *s;

      s = mips_opts_stack;
      if (s == NULL)
	as_bad (_(".set pop with no .set push"));
      else
	{
	  /* If we're changing the reorder mode we need to handle
             delay slots correctly.  */
	  if (s->options.noreorder && ! mips_opts.noreorder)
	    mips_emit_delays (TRUE);
	  else if (! s->options.noreorder && mips_opts.noreorder)
	    {
	      if (prev_nop_frag != NULL)
		{
		  prev_nop_frag->fr_fix -= (prev_nop_frag_holds
					    * (mips_opts.mips16 ? 2 : 4));
		  prev_nop_frag = NULL;
		}
	    }

	  mips_opts = s->options;
	  mips_opts_stack = s->next;
	  free (s);
	}
    }
  else
    {
      as_warn (_("Tried to set unrecognized symbol: %s\n"), name);
    }
  *input_line_pointer = ch;
  demand_empty_rest_of_line ();
}

/* Handle the .abicalls pseudo-op.  I believe this is equivalent to
   .option pic2.  It means to generate SVR4 PIC calls.  */

static void
s_abicalls (int ignore ATTRIBUTE_UNUSED)
{
  mips_pic = SVR4_PIC;
  mips_abicalls = TRUE;
  if (USE_GLOBAL_POINTER_OPT)
    {
      if (g_switch_seen && g_switch_value != 0)
	as_warn (_("-G may not be used with SVR4 PIC code"));
      g_switch_value = 0;
    }
  bfd_set_gp_size (stdoutput, 0);
  demand_empty_rest_of_line ();
}

/* Handle the .cpload pseudo-op.  This is used when generating SVR4
   PIC code.  It sets the $gp register for the function based on the
   function address, which is in the register named in the argument.
   This uses a relocation against _gp_disp, which is handled specially
   by the linker.  The result is:
	lui	$gp,%hi(_gp_disp)
	addiu	$gp,$gp,%lo(_gp_disp)
	addu	$gp,$gp,.cpload argument
   The .cpload argument is normally $25 == $t9.  */

static void
s_cpload (int ignore ATTRIBUTE_UNUSED)
{
  expressionS ex;

  /* If we are not generating SVR4 PIC code, or if this is NewABI code,
     .cpload is ignored.  */
  if (mips_pic != SVR4_PIC || HAVE_NEWABI)
    {
      s_ignore (0);
      return;
    }

  /* .cpload should be in a .set noreorder section.  */
  if (mips_opts.noreorder == 0)
    as_warn (_(".cpload not in noreorder section"));

  ex.X_op = O_symbol;
  ex.X_add_symbol = symbol_find_or_make ("_gp_disp");
  ex.X_op_symbol = NULL;
  ex.X_add_number = 0;

  /* In ELF, this symbol is implicitly an STT_OBJECT symbol.  */
  symbol_get_bfdsym (ex.X_add_symbol)->flags |= BSF_OBJECT;

  macro_start ();
  macro_build_lui (&ex, mips_gp_register);
  macro_build (&ex, "addiu", "t,r,j", mips_gp_register,
	       mips_gp_register, BFD_RELOC_LO16);
  macro_build (NULL, "addu", "d,v,t", mips_gp_register,
	       mips_gp_register, tc_get_register (0));
  macro_end ();

  demand_empty_rest_of_line ();
}

/* Handle the .cpsetup pseudo-op defined for NewABI PIC code.  The syntax is:
     .cpsetup $reg1, offset|$reg2, label

   If offset is given, this results in:
     sd		$gp, offset($sp)
     lui	$gp, %hi(%neg(%gp_rel(label)))
     addiu	$gp, $gp, %lo(%neg(%gp_rel(label)))
     daddu	$gp, $gp, $reg1

   If $reg2 is given, this results in:
     daddu	$reg2, $gp, $0
     lui	$gp, %hi(%neg(%gp_rel(label)))
     addiu	$gp, $gp, %lo(%neg(%gp_rel(label)))
     daddu	$gp, $gp, $reg1
   $reg1 is normally $25 == $t9.  */
static void
s_cpsetup (int ignore ATTRIBUTE_UNUSED)
{
  expressionS ex_off;
  expressionS ex_sym;
  int reg1;
  char *f;

  /* If we are not generating SVR4 PIC code, .cpsetup is ignored.
     We also need NewABI support.  */
  if (mips_pic != SVR4_PIC || ! HAVE_NEWABI)
    {
      s_ignore (0);
      return;
    }

  reg1 = tc_get_register (0);
  SKIP_WHITESPACE ();
  if (*input_line_pointer != ',')
    {
      as_bad (_("missing argument separator ',' for .cpsetup"));
      return;
    }
  else
    ++input_line_pointer;
  SKIP_WHITESPACE ();
  if (*input_line_pointer == '$')
    {
      mips_cpreturn_register = tc_get_register (0);
      mips_cpreturn_offset = -1;
    }
  else
    {
      mips_cpreturn_offset = get_absolute_expression ();
      mips_cpreturn_register = -1;
    }
  SKIP_WHITESPACE ();
  if (*input_line_pointer != ',')
    {
      as_bad (_("missing argument separator ',' for .cpsetup"));
      return;
    }
  else
    ++input_line_pointer;
  SKIP_WHITESPACE ();
  expression (&ex_sym);

  macro_start ();
  if (mips_cpreturn_register == -1)
    {
      ex_off.X_op = O_constant;
      ex_off.X_add_symbol = NULL;
      ex_off.X_op_symbol = NULL;
      ex_off.X_add_number = mips_cpreturn_offset;

      macro_build (&ex_off, "sd", "t,o(b)", mips_gp_register,
		   BFD_RELOC_LO16, SP);
    }
  else
    macro_build (NULL, "daddu", "d,v,t", mips_cpreturn_register,
		 mips_gp_register, 0);

  /* Ensure there's room for the next two instructions, so that `f'
     doesn't end up with an address in the wrong frag.  */
  frag_grow (8);
  f = frag_more (0);
  macro_build (&ex_sym, "lui", "t,u", mips_gp_register, BFD_RELOC_GPREL16);
  fix_new (frag_now, f - frag_now->fr_literal,
	   8, NULL, 0, 0, BFD_RELOC_MIPS_SUB);
  fix_new (frag_now, f - frag_now->fr_literal,
	   4, NULL, 0, 0, BFD_RELOC_HI16_S);

  f = frag_more (0);
  macro_build (&ex_sym, "addiu", "t,r,j", mips_gp_register,
	       mips_gp_register, BFD_RELOC_GPREL16);
  fix_new (frag_now, f - frag_now->fr_literal,
	   8, NULL, 0, 0, BFD_RELOC_MIPS_SUB);
  fix_new (frag_now, f - frag_now->fr_literal,
	   4, NULL, 0, 0, BFD_RELOC_LO16);

  macro_build (NULL, ADDRESS_ADD_INSN, "d,v,t", mips_gp_register,
	       mips_gp_register, reg1);
  macro_end ();

  demand_empty_rest_of_line ();
}

static void
s_cplocal (int ignore ATTRIBUTE_UNUSED)
{
  /* If we are not generating SVR4 PIC code, or if this is not NewABI code,
   .cplocal is ignored.  */
  if (mips_pic != SVR4_PIC || ! HAVE_NEWABI)
    {
      s_ignore (0);
      return;
    }

  mips_gp_register = tc_get_register (0);
  demand_empty_rest_of_line ();
}

/* Handle the .cprestore pseudo-op.  This stores $gp into a given
   offset from $sp.  The offset is remembered, and after making a PIC
   call $gp is restored from that location.  */

static void
s_cprestore (int ignore ATTRIBUTE_UNUSED)
{
  expressionS ex;

  /* If we are not generating SVR4 PIC code, or if this is NewABI code,
     .cprestore is ignored.  */
  if (mips_pic != SVR4_PIC || HAVE_NEWABI)
    {
      s_ignore (0);
      return;
    }

  mips_cprestore_offset = get_absolute_expression ();
  mips_cprestore_valid = 1;

  ex.X_op = O_constant;
  ex.X_add_symbol = NULL;
  ex.X_op_symbol = NULL;
  ex.X_add_number = mips_cprestore_offset;

  macro_start ();
  macro_build_ldst_constoffset (&ex, ADDRESS_STORE_INSN, mips_gp_register,
				SP, HAVE_64BIT_ADDRESSES);
  macro_end ();

  demand_empty_rest_of_line ();
}

/* Handle the .cpreturn pseudo-op defined for NewABI PIC code. If an offset
   was given in the preceding .cpsetup, it results in:
     ld		$gp, offset($sp)

   If a register $reg2 was given there, it results in:
     daddu	$gp, $reg2, $0
 */
static void
s_cpreturn (int ignore ATTRIBUTE_UNUSED)
{
  expressionS ex;

  /* If we are not generating SVR4 PIC code, .cpreturn is ignored.
     We also need NewABI support.  */
  if (mips_pic != SVR4_PIC || ! HAVE_NEWABI)
    {
      s_ignore (0);
      return;
    }

  macro_start ();
  if (mips_cpreturn_register == -1)
    {
      ex.X_op = O_constant;
      ex.X_add_symbol = NULL;
      ex.X_op_symbol = NULL;
      ex.X_add_number = mips_cpreturn_offset;

      macro_build (&ex, "ld", "t,o(b)", mips_gp_register, BFD_RELOC_LO16, SP);
    }
  else
    macro_build (NULL, "daddu", "d,v,t", mips_gp_register,
		 mips_cpreturn_register, 0);
  macro_end ();

  demand_empty_rest_of_line ();
}

/* Handle the .gpvalue pseudo-op.  This is used when generating NewABI PIC
   code.  It sets the offset to use in gp_rel relocations.  */

static void
s_gpvalue (int ignore ATTRIBUTE_UNUSED)
{
  /* If we are not generating SVR4 PIC code, .gpvalue is ignored.
     We also need NewABI support.  */
  if (mips_pic != SVR4_PIC || ! HAVE_NEWABI)
    {
      s_ignore (0);
      return;
    }

  mips_gprel_offset = get_absolute_expression ();

  demand_empty_rest_of_line ();
}

/* Handle the .gpword pseudo-op.  This is used when generating PIC
   code.  It generates a 32 bit GP relative reloc.  */

static void
s_gpword (int ignore ATTRIBUTE_UNUSED)
{
  symbolS *label;
  expressionS ex;
  char *p;

  /* When not generating PIC code, this is treated as .word.  */
  if (mips_pic != SVR4_PIC)
    {
      s_cons (2);
      return;
    }

  label = insn_labels != NULL ? insn_labels->label : NULL;
  mips_emit_delays (TRUE);
  if (auto_align)
    mips_align (2, 0, label);
  mips_clear_insn_labels ();

  expression (&ex);

  if (ex.X_op != O_symbol || ex.X_add_number != 0)
    {
      as_bad (_("Unsupported use of .gpword"));
      ignore_rest_of_line ();
    }

  p = frag_more (4);
  md_number_to_chars (p, 0, 4);
  fix_new_exp (frag_now, p - frag_now->fr_literal, 4, &ex, FALSE,
	       BFD_RELOC_GPREL32);

  demand_empty_rest_of_line ();
}

static void
s_gpdword (int ignore ATTRIBUTE_UNUSED)
{
  symbolS *label;
  expressionS ex;
  char *p;

  /* When not generating PIC code, this is treated as .dword.  */
  if (mips_pic != SVR4_PIC)
    {
      s_cons (3);
      return;
    }

  label = insn_labels != NULL ? insn_labels->label : NULL;
  mips_emit_delays (TRUE);
  if (auto_align)
    mips_align (3, 0, label);
  mips_clear_insn_labels ();

  expression (&ex);

  if (ex.X_op != O_symbol || ex.X_add_number != 0)
    {
      as_bad (_("Unsupported use of .gpdword"));
      ignore_rest_of_line ();
    }

  p = frag_more (8);
  md_number_to_chars (p, 0, 8);
  fix_new_exp (frag_now, p - frag_now->fr_literal, 4, &ex, FALSE,
	       BFD_RELOC_GPREL32);

  /* GPREL32 composed with 64 gives a 64-bit GP offset.  */
  ex.X_op = O_absent;
  ex.X_add_symbol = 0;
  ex.X_add_number = 0;
  fix_new_exp (frag_now, p - frag_now->fr_literal, 8, &ex, FALSE,
	       BFD_RELOC_64);

  demand_empty_rest_of_line ();
}

/* Handle the .cpadd pseudo-op.  This is used when dealing with switch
   tables in SVR4 PIC code.  */

static void
s_cpadd (int ignore ATTRIBUTE_UNUSED)
{
  int reg;

  /* This is ignored when not generating SVR4 PIC code.  */
  if (mips_pic != SVR4_PIC)
    {
      s_ignore (0);
      return;
    }

  /* Add $gp to the register named as an argument.  */
  macro_start ();
  reg = tc_get_register (0);
  macro_build (NULL, ADDRESS_ADD_INSN, "d,v,t", reg, reg, mips_gp_register);
  macro_end ();

  demand_empty_rest_of_line ();
}

/* Handle the .insn pseudo-op.  This marks instruction labels in
   mips16 mode.  This permits the linker to handle them specially,
   such as generating jalx instructions when needed.  We also make
   them odd for the duration of the assembly, in order to generate the
   right sort of code.  We will make them even in the adjust_symtab
   routine, while leaving them marked.  This is convenient for the
   debugger and the disassembler.  The linker knows to make them odd
   again.  */

static void
s_insn (int ignore ATTRIBUTE_UNUSED)
{
  mips16_mark_labels ();

  demand_empty_rest_of_line ();
}

/* Handle a .stabn directive.  We need these in order to mark a label
   as being a mips16 text label correctly.  Sometimes the compiler
   will emit a label, followed by a .stabn, and then switch sections.
   If the label and .stabn are in mips16 mode, then the label is
   really a mips16 text label.  */

static void
s_mips_stab (int type)
{
  if (type == 'n')
    mips16_mark_labels ();

  s_stab (type);
}

/* Handle the .weakext pseudo-op as defined in Kane and Heinrich.
 */

static void
s_mips_weakext (int ignore ATTRIBUTE_UNUSED)
{
  char *name;
  int c;
  symbolS *symbolP;
  expressionS exp;

  name = input_line_pointer;
  c = get_symbol_end ();
  symbolP = symbol_find_or_make (name);
  S_SET_WEAK (symbolP);
  *input_line_pointer = c;

  SKIP_WHITESPACE ();

  if (! is_end_of_line[(unsigned char) *input_line_pointer])
    {
      if (S_IS_DEFINED (symbolP))
	{
	  as_bad ("ignoring attempt to redefine symbol %s",
		  S_GET_NAME (symbolP));
	  ignore_rest_of_line ();
	  return;
	}

      if (*input_line_pointer == ',')
	{
	  ++input_line_pointer;
	  SKIP_WHITESPACE ();
	}

      expression (&exp);
      if (exp.X_op != O_symbol)
	{
	  as_bad ("bad .weakext directive");
	  ignore_rest_of_line ();
	  return;
	}
      symbol_set_value_expression (symbolP, &exp);
    }

  demand_empty_rest_of_line ();
}

/* Parse a register string into a number.  Called from the ECOFF code
   to parse .frame.  The argument is non-zero if this is the frame
   register, so that we can record it in mips_frame_reg.  */

int
tc_get_register (int frame)
{
  unsigned int reg;

  SKIP_WHITESPACE ();
  if (! reg_lookup (&input_line_pointer, RWARN | RTYPE_NUM | RTYPE_GP, &reg))
    reg = 0;
  if (frame)
    {
      mips_frame_reg = reg != 0 ? reg : SP;
      mips_frame_reg_valid = 1;
      mips_cprestore_valid = 0;
    }
  return reg;
}

valueT
md_section_align (asection *seg, valueT addr)
{
  int align = bfd_get_section_alignment (stdoutput, seg);

#ifdef OBJ_ELF
  /* We don't need to align ELF sections to the full alignment.
     However, Irix 5 may prefer that we align them at least to a 16
     byte boundary.  We don't bother to align the sections if we are
     targeted for an embedded system.  */
  if (strcmp (TARGET_OS, "elf") == 0)
    return addr;
  if (align > 4)
    align = 4;
#endif

  return ((addr + (1 << align) - 1) & (-1 << align));
}

/* Utility routine, called from above as well.  If called while the
   input file is still being read, it's only an approximation.  (For
   example, a symbol may later become defined which appeared to be
   undefined earlier.)  */

static int
nopic_need_relax (symbolS *sym, int before_relaxing)
{
  if (sym == 0)
    return 0;

  if (USE_GLOBAL_POINTER_OPT && g_switch_value > 0)
    {
      const char *symname;
      int change;

      /* Find out whether this symbol can be referenced off the $gp
	 register.  It can be if it is smaller than the -G size or if
	 it is in the .sdata or .sbss section.  Certain symbols can
	 not be referenced off the $gp, although it appears as though
	 they can.  */
      symname = S_GET_NAME (sym);
      if (symname != (const char *) NULL
	  && (strcmp (symname, "eprol") == 0
	      || strcmp (symname, "etext") == 0
	      || strcmp (symname, "_gp") == 0
	      || strcmp (symname, "edata") == 0
	      || strcmp (symname, "_fbss") == 0
	      || strcmp (symname, "_fdata") == 0
	      || strcmp (symname, "_ftext") == 0
	      || strcmp (symname, "end") == 0
	      || strcmp (symname, "_gp_disp") == 0))
	change = 1;
      else if ((! S_IS_DEFINED (sym) || S_IS_COMMON (sym))
	       && (0
#ifndef NO_ECOFF_DEBUGGING
		   || (symbol_get_obj (sym)->ecoff_extern_size != 0
		       && (symbol_get_obj (sym)->ecoff_extern_size
			   <= g_switch_value))
#endif
		   /* We must defer this decision until after the whole
		      file has been read, since there might be a .extern
		      after the first use of this symbol.  */
		   || (before_relaxing
#ifndef NO_ECOFF_DEBUGGING
		       && symbol_get_obj (sym)->ecoff_extern_size == 0
#endif
		       && S_GET_VALUE (sym) == 0)
		   || (S_GET_VALUE (sym) != 0
		       && S_GET_VALUE (sym) <= g_switch_value)))
	change = 0;
      else
	{
	  const char *segname;

	  segname = segment_name (S_GET_SEGMENT (sym));
	  assert (strcmp (segname, ".lit8") != 0
		  && strcmp (segname, ".lit4") != 0);
	  change = (strcmp (segname, ".sdata") != 0
		    && strcmp (segname, ".sbss") != 0
		    && strncmp (segname, ".sdata.", 7) != 0
		    && strncmp (segname, ".gnu.linkonce.s.", 16) != 0);
	}
      return change;
    }
  else
    /* We are not optimizing for the $gp register.  */
    return 1;
}


/* Return true if the given symbol should be considered local for SVR4 PIC.  */

static bfd_boolean
pic_need_relax (symbolS *sym, asection *segtype)
{
  asection *symsec;
  bfd_boolean linkonce;

  /* Handle the case of a symbol equated to another symbol.  */
  while (symbol_equated_reloc_p (sym))
    {
      symbolS *n;

      /* It's possible to get a loop here in a badly written
	 program.  */
      n = symbol_get_value_expression (sym)->X_add_symbol;
      if (n == sym)
	break;
      sym = n;
    }

  symsec = S_GET_SEGMENT (sym);

  /* duplicate the test for LINK_ONCE sections as in adjust_reloc_syms */
  linkonce = FALSE;
  if (symsec != segtype && ! S_IS_LOCAL (sym))
    {
      if ((bfd_get_section_flags (stdoutput, symsec) & SEC_LINK_ONCE)
	  != 0)
	linkonce = TRUE;

      /* The GNU toolchain uses an extension for ELF: a section
	 beginning with the magic string .gnu.linkonce is a linkonce
	 section.  */
      if (strncmp (segment_name (symsec), ".gnu.linkonce",
		   sizeof ".gnu.linkonce" - 1) == 0)
	linkonce = TRUE;
    }

  /* This must duplicate the test in adjust_reloc_syms.  */
  return (symsec != &bfd_und_section
	  && symsec != &bfd_abs_section
	  && ! bfd_is_com_section (symsec)
	  && !linkonce
#ifdef OBJ_ELF
	  /* A global or weak symbol is treated as external.  */
	  && (OUTPUT_FLAVOR != bfd_target_elf_flavour
	      || (! S_IS_WEAK (sym)
		  && (! S_IS_EXTERNAL (sym)
		      || mips_pic == EMBEDDED_PIC)))
#endif
	  );
}


/* Given a mips16 variant frag FRAGP, return non-zero if it needs an
   extended opcode.  SEC is the section the frag is in.  */

static int
mips16_extended_frag (fragS *fragp, asection *sec, long stretch)
{
  int type;
  register const struct mips16_immed_operand *op;
  offsetT val;
  int mintiny, maxtiny;
  segT symsec;
  fragS *sym_frag;

  if (RELAX_MIPS16_USER_SMALL (fragp->fr_subtype))
    return 0;
  if (RELAX_MIPS16_USER_EXT (fragp->fr_subtype))
    return 1;

  type = RELAX_MIPS16_TYPE (fragp->fr_subtype);
  op = mips16_immed_operands;
  while (op->type != type)
    {
      ++op;
      assert (op < mips16_immed_operands + MIPS16_NUM_IMMED);
    }

  if (op->unsp)
    {
      if (type == '<' || type == '>' || type == '[' || type == ']')
	{
	  mintiny = 1;
	  maxtiny = 1 << op->nbits;
	}
      else
	{
	  mintiny = 0;
	  maxtiny = (1 << op->nbits) - 1;
	}
    }
  else
    {
      mintiny = - (1 << (op->nbits - 1));
      maxtiny = (1 << (op->nbits - 1)) - 1;
    }

  sym_frag = symbol_get_frag (fragp->fr_symbol);
  val = S_GET_VALUE (fragp->fr_symbol);
  symsec = S_GET_SEGMENT (fragp->fr_symbol);

  if (op->pcrel)
    {
      addressT addr;

      /* We won't have the section when we are called from
         mips_relax_frag.  However, we will always have been called
         from md_estimate_size_before_relax first.  If this is a
         branch to a different section, we mark it as such.  If SEC is
         NULL, and the frag is not marked, then it must be a branch to
         the same section.  */
      if (sec == NULL)
	{
	  if (RELAX_MIPS16_LONG_BRANCH (fragp->fr_subtype))
	    return 1;
	}
      else
	{
	  /* Must have been called from md_estimate_size_before_relax.  */
	  if (symsec != sec)
	    {
	      fragp->fr_subtype =
		RELAX_MIPS16_MARK_LONG_BRANCH (fragp->fr_subtype);

	      /* FIXME: We should support this, and let the linker
                 catch branches and loads that are out of range.  */
	      as_bad_where (fragp->fr_file, fragp->fr_line,
			    _("unsupported PC relative reference to different section"));

	      return 1;
	    }
	  if (fragp != sym_frag && sym_frag->fr_address == 0)
	    /* Assume non-extended on the first relaxation pass.
	       The address we have calculated will be bogus if this is
	       a forward branch to another frag, as the forward frag
	       will have fr_address == 0.  */
	    return 0;
	}

      /* In this case, we know for sure that the symbol fragment is in
	 the same section.  If the relax_marker of the symbol fragment
	 differs from the relax_marker of this fragment, we have not
	 yet adjusted the symbol fragment fr_address.  We want to add
	 in STRETCH in order to get a better estimate of the address.
	 This particularly matters because of the shift bits.  */
      if (stretch != 0
	  && sym_frag->relax_marker != fragp->relax_marker)
	{
	  fragS *f;

	  /* Adjust stretch for any alignment frag.  Note that if have
             been expanding the earlier code, the symbol may be
             defined in what appears to be an earlier frag.  FIXME:
             This doesn't handle the fr_subtype field, which specifies
             a maximum number of bytes to skip when doing an
             alignment.  */
	  for (f = fragp; f != NULL && f != sym_frag; f = f->fr_next)
	    {
	      if (f->fr_type == rs_align || f->fr_type == rs_align_code)
		{
		  if (stretch < 0)
		    stretch = - ((- stretch)
				 & ~ ((1 << (int) f->fr_offset) - 1));
		  else
		    stretch &= ~ ((1 << (int) f->fr_offset) - 1);
		  if (stretch == 0)
		    break;
		}
	    }
	  if (f != NULL)
	    val += stretch;
	}

      addr = fragp->fr_address + fragp->fr_fix;

      /* The base address rules are complicated.  The base address of
         a branch is the following instruction.  The base address of a
         PC relative load or add is the instruction itself, but if it
         is in a delay slot (in which case it can not be extended) use
         the address of the instruction whose delay slot it is in.  */
      if (type == 'p' || type == 'q')
	{
	  addr += 2;

	  /* If we are currently assuming that this frag should be
	     extended, then, the current address is two bytes
	     higher.  */
	  if (RELAX_MIPS16_EXTENDED (fragp->fr_subtype))
	    addr += 2;

	  /* Ignore the low bit in the target, since it will be set
             for a text label.  */
	  if ((val & 1) != 0)
	    --val;
	}
      else if (RELAX_MIPS16_JAL_DSLOT (fragp->fr_subtype))
	addr -= 4;
      else if (RELAX_MIPS16_DSLOT (fragp->fr_subtype))
	addr -= 2;

      val -= addr & ~ ((1 << op->shift) - 1);

      /* Branch offsets have an implicit 0 in the lowest bit.  */
      if (type == 'p' || type == 'q')
	val /= 2;

      /* If any of the shifted bits are set, we must use an extended
         opcode.  If the address depends on the size of this
         instruction, this can lead to a loop, so we arrange to always
         use an extended opcode.  We only check this when we are in
         the main relaxation loop, when SEC is NULL.  */
      if ((val & ((1 << op->shift) - 1)) != 0 && sec == NULL)
	{
	  fragp->fr_subtype =
	    RELAX_MIPS16_MARK_LONG_BRANCH (fragp->fr_subtype);
	  return 1;
	}

      /* If we are about to mark a frag as extended because the value
         is precisely maxtiny + 1, then there is a chance of an
         infinite loop as in the following code:
	     la	$4,foo
	     .skip	1020
	     .align	2
	   foo:
	 In this case when the la is extended, foo is 0x3fc bytes
	 away, so the la can be shrunk, but then foo is 0x400 away, so
	 the la must be extended.  To avoid this loop, we mark the
	 frag as extended if it was small, and is about to become
	 extended with a value of maxtiny + 1.  */
      if (val == ((maxtiny + 1) << op->shift)
	  && ! RELAX_MIPS16_EXTENDED (fragp->fr_subtype)
	  && sec == NULL)
	{
	  fragp->fr_subtype =
	    RELAX_MIPS16_MARK_LONG_BRANCH (fragp->fr_subtype);
	  return 1;
	}
    }
  else if (symsec != absolute_section && sec != NULL)
    as_bad_where (fragp->fr_file, fragp->fr_line, _("unsupported relocation"));

  if ((val & ((1 << op->shift) - 1)) != 0
      || val < (mintiny << op->shift)
      || val > (maxtiny << op->shift))
    return 1;
  else
    return 0;
}

/* Compute the length of a branch sequence, and adjust the
   RELAX_BRANCH_TOOFAR bit accordingly.  If FRAGP is NULL, the
   worst-case length is computed, with UPDATE being used to indicate
   whether an unconditional (-1), branch-likely (+1) or regular (0)
   branch is to be computed.  */
static int
relaxed_branch_length (fragS *fragp, asection *sec, int update)
{
  bfd_boolean toofar;
  int length;

  if (fragp
      && S_IS_DEFINED (fragp->fr_symbol)
      && sec == S_GET_SEGMENT (fragp->fr_symbol))
    {
      addressT addr;
      offsetT val;

      val = S_GET_VALUE (fragp->fr_symbol) + fragp->fr_offset;

      addr = fragp->fr_address + fragp->fr_fix + 4;

      val -= addr;

      toofar = val < - (0x8000 << 2) || val >= (0x8000 << 2);
    }
  else if (fragp)
    /* If the symbol is not defined or it's in a different segment,
       assume the user knows what's going on and emit a short
       branch.  */
    toofar = FALSE;
  else
    toofar = TRUE;

  if (fragp && update && toofar != RELAX_BRANCH_TOOFAR (fragp->fr_subtype))
    fragp->fr_subtype
      = RELAX_BRANCH_ENCODE (RELAX_BRANCH_UNCOND (fragp->fr_subtype),
			     RELAX_BRANCH_LIKELY (fragp->fr_subtype),
			     RELAX_BRANCH_LINK (fragp->fr_subtype),
			     toofar);

  length = 4;
  if (toofar)
    {
      if (fragp ? RELAX_BRANCH_LIKELY (fragp->fr_subtype) : (update > 0))
	length += 8;

      if (mips_pic != NO_PIC)
	{
	  /* Additional space for PIC loading of target address.  */
	  length += 8;
	  if (mips_opts.isa == ISA_MIPS1)
	    /* Additional space for $at-stabilizing nop.  */
	    length += 4;
	}

      /* If branch is conditional.  */
      if (fragp ? !RELAX_BRANCH_UNCOND (fragp->fr_subtype) : (update >= 0))
	length += 8;
    }

  return length;
}

/* Estimate the size of a frag before relaxing.  Unless this is the
   mips16, we are not really relaxing here, and the final size is
   encoded in the subtype information.  For the mips16, we have to
   decide whether we are using an extended opcode or not.  */

int
md_estimate_size_before_relax (fragS *fragp, asection *segtype)
{
  int change;

  if (RELAX_BRANCH_P (fragp->fr_subtype))
    {

      fragp->fr_var = relaxed_branch_length (fragp, segtype, FALSE);

      return fragp->fr_var;
    }

  if (RELAX_MIPS16_P (fragp->fr_subtype))
    /* We don't want to modify the EXTENDED bit here; it might get us
       into infinite loops.  We change it only in mips_relax_frag().  */
    return (RELAX_MIPS16_EXTENDED (fragp->fr_subtype) ? 4 : 2);

  if (mips_pic == NO_PIC)
    change = nopic_need_relax (fragp->fr_symbol, 0);
  else if (mips_pic == SVR4_PIC)
    change = pic_need_relax (fragp->fr_symbol, segtype);
  else
    abort ();

  if (change)
    {
      fragp->fr_subtype |= RELAX_USE_SECOND;
      return -RELAX_FIRST (fragp->fr_subtype);
    }
  else
    return -RELAX_SECOND (fragp->fr_subtype);
}

/* This is called to see whether a reloc against a defined symbol
   should be converted into a reloc against a section.  Don't adjust
   MIPS16 jump relocations, so we don't have to worry about the format
   of the offset in the .o file.  Don't adjust relocations against
   mips16 symbols, so that the linker can find them if it needs to set
   up a stub.  */

int
mips_fix_adjustable (fixS *fixp)
{
  if (fixp->fx_r_type == BFD_RELOC_MIPS16_JMP)
    return 0;

  if (fixp->fx_r_type == BFD_RELOC_VTABLE_INHERIT
      || fixp->fx_r_type == BFD_RELOC_VTABLE_ENTRY)
    return 0;

  if (fixp->fx_addsy == NULL)
    return 1;

#ifdef OBJ_ELF
  if (OUTPUT_FLAVOR == bfd_target_elf_flavour
      && S_GET_OTHER (fixp->fx_addsy) == STO_MIPS16
      && fixp->fx_subsy == NULL)
    return 0;
#endif

  return 1;
}

/* Translate internal representation of relocation info to BFD target
   format.  */

arelent **
tc_gen_reloc (asection *section ATTRIBUTE_UNUSED, fixS *fixp)
{
  static arelent *retval[4];
  arelent *reloc;
  bfd_reloc_code_real_type code;

  memset (retval, 0, sizeof(retval));
  reloc = retval[0] = (arelent *) xcalloc (1, sizeof (arelent));
  reloc->sym_ptr_ptr = (asymbol **) xmalloc (sizeof (asymbol *));
  *reloc->sym_ptr_ptr = symbol_get_bfdsym (fixp->fx_addsy);
  reloc->address = fixp->fx_frag->fr_address + fixp->fx_where;

  if (mips_pic == EMBEDDED_PIC
      && SWITCH_TABLE (fixp))
    {
      /* For a switch table entry we use a special reloc.  The addend
	 is actually the difference between the reloc address and the
	 subtrahend.  */
      reloc->addend = reloc->address - S_GET_VALUE (fixp->fx_subsy);
      if (OUTPUT_FLAVOR != bfd_target_ecoff_flavour)
	as_fatal (_("Double check fx_r_type in tc-mips.c:tc_gen_reloc"));
      fixp->fx_r_type = BFD_RELOC_GPREL32;
    }
  else if (fixp->fx_pcrel)
    {
      bfd_vma pcrel_address;

      /* Set PCREL_ADDRESS to this relocation's "PC".  The PC for high
	 high-part relocs is the address of the low-part reloc.  */
      if (fixp->fx_r_type == BFD_RELOC_PCREL_HI16_S)
	{
	  assert (fixp->fx_next != NULL
		  && fixp->fx_next->fx_r_type == BFD_RELOC_PCREL_LO16);
	  pcrel_address = (fixp->fx_next->fx_where
			   + fixp->fx_next->fx_frag->fr_address);
	}
      else
	pcrel_address = reloc->address;

      if (OUTPUT_FLAVOR == bfd_target_elf_flavour)
	{
	  /* At this point, fx_addnumber is "symbol offset - pcrel_address".
	     Relocations want only the symbol offset.  */
	  reloc->addend = fixp->fx_addnumber + pcrel_address;
	}
      else if (fixp->fx_r_type == BFD_RELOC_PCREL_LO16
	       || fixp->fx_r_type == BFD_RELOC_PCREL_HI16_S)
	{
	  /* We use a special addend for an internal RELLO or RELHI reloc.  */
	  if (symbol_section_p (fixp->fx_addsy))
	    reloc->addend = pcrel_address - S_GET_VALUE (fixp->fx_subsy);
	  else
	    reloc->addend = fixp->fx_addnumber + pcrel_address;
	}
      else
	{
	  if (OUTPUT_FLAVOR != bfd_target_aout_flavour)
	    /* A gruesome hack which is a result of the gruesome gas reloc
	       handling.  */
	    reloc->addend = pcrel_address;
	  else
	    reloc->addend = -pcrel_address;
	}
    }
  else
    reloc->addend = fixp->fx_addnumber;

  /* Since the old MIPS ELF ABI uses Rel instead of Rela, encode the vtable
     entry to be used in the relocation's section offset.  */
  if (! HAVE_NEWABI && fixp->fx_r_type == BFD_RELOC_VTABLE_ENTRY)
    {
      reloc->address = reloc->addend;
      reloc->addend = 0;
    }

  /* Since DIFF_EXPR_OK is defined in tc-mips.h, it is possible that
     fixup_segment converted a non-PC relative reloc into a PC
     relative reloc.  In such a case, we need to convert the reloc
     code.  */
  code = fixp->fx_r_type;
  if (fixp->fx_pcrel)
    {
      switch (code)
	{
	case BFD_RELOC_8:
	  code = BFD_RELOC_8_PCREL;
	  break;
	case BFD_RELOC_16:
	  code = BFD_RELOC_16_PCREL;
	  break;
	case BFD_RELOC_32:
	  code = BFD_RELOC_32_PCREL;
	  break;
	case BFD_RELOC_64:
	  code = BFD_RELOC_64_PCREL;
	  break;
	case BFD_RELOC_8_PCREL:
	case BFD_RELOC_16_PCREL:
	case BFD_RELOC_32_PCREL:
	case BFD_RELOC_64_PCREL:
	case BFD_RELOC_16_PCREL_S2:
	case BFD_RELOC_PCREL_HI16_S:
	case BFD_RELOC_PCREL_LO16:
	  break;
	default:
	  as_bad_where (fixp->fx_file, fixp->fx_line,
			_("Cannot make %s relocation PC relative"),
			bfd_get_reloc_code_name (code));
	}
    }

  /* To support a PC relative reloc when generating embedded PIC code
     for ECOFF, we use a Cygnus extension.  We check for that here to
     make sure that we don't let such a reloc escape normally.  */
  if ((OUTPUT_FLAVOR == bfd_target_ecoff_flavour
       || OUTPUT_FLAVOR == bfd_target_elf_flavour)
      && code == BFD_RELOC_16_PCREL_S2
      && mips_pic != EMBEDDED_PIC)
    reloc->howto = NULL;
  else
    reloc->howto = bfd_reloc_type_lookup (stdoutput, code);

  if (reloc->howto == NULL)
    {
      as_bad_where (fixp->fx_file, fixp->fx_line,
		    _("Can not represent %s relocation in this object file format"),
		    bfd_get_reloc_code_name (code));
      retval[0] = NULL;
    }

  return retval;
}

/* Relax a machine dependent frag.  This returns the amount by which
   the current size of the frag should change.  */

int
mips_relax_frag (asection *sec, fragS *fragp, long stretch)
{
  if (RELAX_BRANCH_P (fragp->fr_subtype))
    {
      offsetT old_var = fragp->fr_var;

      fragp->fr_var = relaxed_branch_length (fragp, sec, TRUE);

      return fragp->fr_var - old_var;
    }

  if (! RELAX_MIPS16_P (fragp->fr_subtype))
    return 0;

  if (mips16_extended_frag (fragp, NULL, stretch))
    {
      if (RELAX_MIPS16_EXTENDED (fragp->fr_subtype))
	return 0;
      fragp->fr_subtype = RELAX_MIPS16_MARK_EXTENDED (fragp->fr_subtype);
      return 2;
    }
  else
    {
      if (! RELAX_MIPS16_EXTENDED (fragp->fr_subtype))
	return 0;
      fragp->fr_subtype = RELAX_MIPS16_CLEAR_EXTENDED (fragp->fr_subtype);
      return -2;
    }

  return 0;
}

/* Convert a machine dependent frag.  */

void
md_convert_frag (bfd *abfd ATTRIBUTE_UNUSED, segT asec, fragS *fragp)
{
  if (RELAX_BRANCH_P (fragp->fr_subtype))
    {
      bfd_byte *buf;
      unsigned long insn;
      expressionS exp;
      fixS *fixp;

      buf = (bfd_byte *)fragp->fr_literal + fragp->fr_fix;

      if (target_big_endian)
	insn = bfd_getb32 (buf);
      else
	insn = bfd_getl32 (buf);

      if (!RELAX_BRANCH_TOOFAR (fragp->fr_subtype))
	{
	  /* We generate a fixup instead of applying it right now
	     because, if there are linker relaxations, we're going to
	     need the relocations.  */
	  exp.X_op = O_symbol;
	  exp.X_add_symbol = fragp->fr_symbol;
	  exp.X_add_number = fragp->fr_offset;

	  fixp = fix_new_exp (fragp, buf - (bfd_byte *)fragp->fr_literal,
			      4, &exp, 1,
			      BFD_RELOC_16_PCREL_S2);
	  fixp->fx_file = fragp->fr_file;
	  fixp->fx_line = fragp->fr_line;

	  md_number_to_chars (buf, insn, 4);
	  buf += 4;
	}
      else
	{
	  int i;

	  as_warn_where (fragp->fr_file, fragp->fr_line,
			 _("relaxed out-of-range branch into a jump"));

	  if (RELAX_BRANCH_UNCOND (fragp->fr_subtype))
	    goto uncond;

	  if (!RELAX_BRANCH_LIKELY (fragp->fr_subtype))
	    {
	      /* Reverse the branch.  */
	      switch ((insn >> 28) & 0xf)
		{
		case 4:
		  /* bc[0-3][tf]l? and bc1any[24][ft] instructions can
		     have the condition reversed by tweaking a single
		     bit, and their opcodes all have 0x4???????.  */
		  assert ((insn & 0xf1000000) == 0x41000000);
		  insn ^= 0x00010000;
		  break;

		case 0:
		  /* bltz	0x04000000	bgez	0x04010000
		     bltzal	0x04100000	bgezal	0x04110000 */
		  assert ((insn & 0xfc0e0000) == 0x04000000);
		  insn ^= 0x00010000;
		  break;

		case 1:
		  /* beq	0x10000000	bne	0x14000000
		     blez	0x18000000	bgtz	0x1c000000 */
		  insn ^= 0x04000000;
		  break;

		default:
		  abort ();
		}
	    }

	  if (RELAX_BRANCH_LINK (fragp->fr_subtype))
	    {
	      /* Clear the and-link bit.  */
	      assert ((insn & 0xfc1c0000) == 0x04100000);

	      /* bltzal	0x04100000	bgezal	0x04110000
		bltzall	0x04120000     bgezall	0x04130000 */
	      insn &= ~0x00100000;
	    }

	  /* Branch over the branch (if the branch was likely) or the
	     full jump (not likely case).  Compute the offset from the
	     current instruction to branch to.  */
	  if (RELAX_BRANCH_LIKELY (fragp->fr_subtype))
	    i = 16;
	  else
	    {
	      /* How many bytes in instructions we've already emitted?  */
	      i = buf - (bfd_byte *)fragp->fr_literal - fragp->fr_fix;
	      /* How many bytes in instructions from here to the end?  */
	      i = fragp->fr_var - i;
	    }
	  /* Convert to instruction count.  */
	  i >>= 2;
	  /* Branch counts from the next instruction.  */
	  i--;
	  insn |= i;
	  /* Branch over the jump.  */
	  md_number_to_chars (buf, insn, 4);
	  buf += 4;

	  /* Nop */
	  md_number_to_chars (buf, 0, 4);
	  buf += 4;

	  if (RELAX_BRANCH_LIKELY (fragp->fr_subtype))
	    {
	      /* beql $0, $0, 2f */
	      insn = 0x50000000;
	      /* Compute the PC offset from the current instruction to
		 the end of the variable frag.  */
	      /* How many bytes in instructions we've already emitted?  */
	      i = buf - (bfd_byte *)fragp->fr_literal - fragp->fr_fix;
	      /* How many bytes in instructions from here to the end?  */
	      i = fragp->fr_var - i;
	      /* Convert to instruction count.  */
	      i >>= 2;
	      /* Don't decrement i, because we want to branch over the
		 delay slot.  */

	      insn |= i;
	      md_number_to_chars (buf, insn, 4);
	      buf += 4;

	      md_number_to_chars (buf, 0, 4);
	      buf += 4;
	    }

	uncond:
	  if (mips_pic == NO_PIC)
	    {
	      /* j or jal.  */
	      insn = (RELAX_BRANCH_LINK (fragp->fr_subtype)
		      ? 0x0c000000 : 0x08000000);
	      exp.X_op = O_symbol;
	      exp.X_add_symbol = fragp->fr_symbol;
	      exp.X_add_number = fragp->fr_offset;

	      fixp = fix_new_exp (fragp, buf - (bfd_byte *)fragp->fr_literal,
				  4, &exp, 0, BFD_RELOC_MIPS_JMP);
	      fixp->fx_file = fragp->fr_file;
	      fixp->fx_line = fragp->fr_line;

	      md_number_to_chars (buf, insn, 4);
	      buf += 4;
	    }
	  else
	    {
	      /* lw/ld $at, <sym>($gp)  R_MIPS_GOT16 */
	      insn = HAVE_64BIT_ADDRESSES ? 0xdf810000 : 0x8f810000;
	      exp.X_op = O_symbol;
	      exp.X_add_symbol = fragp->fr_symbol;
	      exp.X_add_number = fragp->fr_offset;

	      if (fragp->fr_offset)
		{
		  exp.X_add_symbol = make_expr_symbol (&exp);
		  exp.X_add_number = 0;
		}

	      fixp = fix_new_exp (fragp, buf - (bfd_byte *)fragp->fr_literal,
				  4, &exp, 0, BFD_RELOC_MIPS_GOT16);
	      fixp->fx_file = fragp->fr_file;
	      fixp->fx_line = fragp->fr_line;

	      md_number_to_chars (buf, insn, 4);
	      buf += 4;

	      if (mips_opts.isa == ISA_MIPS1)
		{
		  /* nop */
		  md_number_to_chars (buf, 0, 4);
		  buf += 4;
		}

	      /* d/addiu $at, $at, <sym>  R_MIPS_LO16 */
	      insn = HAVE_64BIT_ADDRESSES ? 0x64210000 : 0x24210000;

	      fixp = fix_new_exp (fragp, buf - (bfd_byte *)fragp->fr_literal,
				  4, &exp, 0, BFD_RELOC_LO16);
	      fixp->fx_file = fragp->fr_file;
	      fixp->fx_line = fragp->fr_line;

	      md_number_to_chars (buf, insn, 4);
	      buf += 4;

	      /* j(al)r $at.  */
	      if (RELAX_BRANCH_LINK (fragp->fr_subtype))
		insn = 0x0020f809;
	      else
		insn = 0x00200008;

	      md_number_to_chars (buf, insn, 4);
	      buf += 4;
	    }
	}

      assert (buf == (bfd_byte *)fragp->fr_literal
	      + fragp->fr_fix + fragp->fr_var);

      fragp->fr_fix += fragp->fr_var;

      return;
    }

  if (RELAX_MIPS16_P (fragp->fr_subtype))
    {
      int type;
      register const struct mips16_immed_operand *op;
      bfd_boolean small, ext;
      offsetT val;
      bfd_byte *buf;
      unsigned long insn;
      bfd_boolean use_extend;
      unsigned short extend;

      type = RELAX_MIPS16_TYPE (fragp->fr_subtype);
      op = mips16_immed_operands;
      while (op->type != type)
	++op;

      if (RELAX_MIPS16_EXTENDED (fragp->fr_subtype))
	{
	  small = FALSE;
	  ext = TRUE;
	}
      else
	{
	  small = TRUE;
	  ext = FALSE;
	}

      resolve_symbol_value (fragp->fr_symbol);
      val = S_GET_VALUE (fragp->fr_symbol);
      if (op->pcrel)
	{
	  addressT addr;

	  addr = fragp->fr_address + fragp->fr_fix;

	  /* The rules for the base address of a PC relative reloc are
             complicated; see mips16_extended_frag.  */
	  if (type == 'p' || type == 'q')
	    {
	      addr += 2;
	      if (ext)
		addr += 2;
	      /* Ignore the low bit in the target, since it will be
                 set for a text label.  */
	      if ((val & 1) != 0)
		--val;
	    }
	  else if (RELAX_MIPS16_JAL_DSLOT (fragp->fr_subtype))
	    addr -= 4;
	  else if (RELAX_MIPS16_DSLOT (fragp->fr_subtype))
	    addr -= 2;

	  addr &= ~ (addressT) ((1 << op->shift) - 1);
	  val -= addr;

	  /* Make sure the section winds up with the alignment we have
             assumed.  */
	  if (op->shift > 0)
	    record_alignment (asec, op->shift);
	}

      if (ext
	  && (RELAX_MIPS16_JAL_DSLOT (fragp->fr_subtype)
	      || RELAX_MIPS16_DSLOT (fragp->fr_subtype)))
	as_warn_where (fragp->fr_file, fragp->fr_line,
		       _("extended instruction in delay slot"));

      buf = (bfd_byte *) (fragp->fr_literal + fragp->fr_fix);

      if (target_big_endian)
	insn = bfd_getb16 (buf);
      else
	insn = bfd_getl16 (buf);

      mips16_immed (fragp->fr_file, fragp->fr_line, type, val,
		    RELAX_MIPS16_USER_EXT (fragp->fr_subtype),
		    small, ext, &insn, &use_extend, &extend);

      if (use_extend)
	{
	  md_number_to_chars (buf, 0xf000 | extend, 2);
	  fragp->fr_fix += 2;
	  buf += 2;
	}

      md_number_to_chars (buf, insn, 2);
      fragp->fr_fix += 2;
      buf += 2;
    }
  else
    {
      int first, second;
      fixS *fixp;

      first = RELAX_FIRST (fragp->fr_subtype);
      second = RELAX_SECOND (fragp->fr_subtype);
      fixp = (fixS *) fragp->fr_opcode;

      /* Possibly emit a warning if we've chosen the longer option.  */
      if (((fragp->fr_subtype & RELAX_USE_SECOND) != 0)
	  == ((fragp->fr_subtype & RELAX_SECOND_LONGER) != 0))
	{
	  const char *msg = macro_warning (fragp->fr_subtype);
	  if (msg != 0)
	    as_warn_where (fragp->fr_file, fragp->fr_line, msg);
	}

      /* Go through all the fixups for the first sequence.  Disable them
	 (by marking them as done) if we're going to use the second
	 sequence instead.  */
      while (fixp
	     && fixp->fx_frag == fragp
	     && fixp->fx_where < fragp->fr_fix - second)
	{
	  if (fragp->fr_subtype & RELAX_USE_SECOND)
	    fixp->fx_done = 1;
	  fixp = fixp->fx_next;
	}

      /* Go through the fixups for the second sequence.  Disable them if
	 we're going to use the first sequence, otherwise adjust their
	 addresses to account for the relaxation.  */
      while (fixp && fixp->fx_frag == fragp)
	{
	  if (fragp->fr_subtype & RELAX_USE_SECOND)
	    fixp->fx_where -= first;
	  else
	    fixp->fx_done = 1;
	  fixp = fixp->fx_next;
	}

      /* Now modify the frag contents.  */
      if (fragp->fr_subtype & RELAX_USE_SECOND)
	{
	  char *start;

	  start = fragp->fr_literal + fragp->fr_fix - first - second;
	  memmove (start, start + first, second);
	  fragp->fr_fix -= first;
	}
      else
	fragp->fr_fix -= second;
    }
}

#ifdef OBJ_ELF

/* This function is called after the relocs have been generated.
   We've been storing mips16 text labels as odd.  Here we convert them
   back to even for the convenience of the debugger.  */

void
mips_frob_file_after_relocs (void)
{
  asymbol **syms;
  unsigned int count, i;

  if (OUTPUT_FLAVOR != bfd_target_elf_flavour)
    return;

  syms = bfd_get_outsymbols (stdoutput);
  count = bfd_get_symcount (stdoutput);
  for (i = 0; i < count; i++, syms++)
    {
      if (elf_symbol (*syms)->internal_elf_sym.st_other == STO_MIPS16
	  && ((*syms)->value & 1) != 0)
	{
	  (*syms)->value &= ~1;
	  /* If the symbol has an odd size, it was probably computed
	     incorrectly, so adjust that as well.  */
	  if ((elf_symbol (*syms)->internal_elf_sym.st_size & 1) != 0)
	    ++elf_symbol (*syms)->internal_elf_sym.st_size;
	}
    }
}

#endif

/* This function is called whenever a label is defined.  It is used
   when handling branch delays; if a branch has a label, we assume we
   can not move it.  */

void
mips_define_label (symbolS *sym)
{
  struct insn_label_list *l;

  if (free_insn_labels == NULL)
    l = (struct insn_label_list *) xmalloc (sizeof *l);
  else
    {
      l = free_insn_labels;
      free_insn_labels = l->next;
    }

  l->label = sym;
  l->next = insn_labels;
  insn_labels = l;
}

#if defined (OBJ_ELF) || defined (OBJ_MAYBE_ELF)

/* Some special processing for a MIPS ELF file.  */

void
mips_elf_final_processing (void)
{
  /* Write out the register information.  */
  if (mips_abi != N64_ABI)
    {
      Elf32_RegInfo s;

      s.ri_gprmask = mips_gprmask;
      s.ri_cprmask[0] = mips_cprmask[0];
      s.ri_cprmask[1] = mips_cprmask[1];
      s.ri_cprmask[2] = mips_cprmask[2];
      s.ri_cprmask[3] = mips_cprmask[3];
      /* The gp_value field is set by the MIPS ELF backend.  */

      bfd_mips_elf32_swap_reginfo_out (stdoutput, &s,
				       ((Elf32_External_RegInfo *)
					mips_regmask_frag));
    }
  else
    {
      Elf64_Internal_RegInfo s;

      s.ri_gprmask = mips_gprmask;
      s.ri_pad = 0;
      s.ri_cprmask[0] = mips_cprmask[0];
      s.ri_cprmask[1] = mips_cprmask[1];
      s.ri_cprmask[2] = mips_cprmask[2];
      s.ri_cprmask[3] = mips_cprmask[3];
      /* The gp_value field is set by the MIPS ELF backend.  */

      bfd_mips_elf64_swap_reginfo_out (stdoutput, &s,
				       ((Elf64_External_RegInfo *)
					mips_regmask_frag));
    }

  /* Set the MIPS ELF flag bits.  FIXME: There should probably be some
     sort of BFD interface for this.  */
  if (mips_any_noreorder)
    elf_elfheader (stdoutput)->e_flags |= EF_MIPS_NOREORDER;
  if (mips_pic != NO_PIC)
    {
    elf_elfheader (stdoutput)->e_flags |= EF_MIPS_PIC;
      elf_elfheader (stdoutput)->e_flags |= EF_MIPS_CPIC;
    }
  if (mips_abicalls)
    elf_elfheader (stdoutput)->e_flags |= EF_MIPS_CPIC;

  /* Set MIPS ELF flags for ASEs.  */
  if (file_ase_mips16)
    elf_elfheader (stdoutput)->e_flags |= EF_MIPS_ARCH_ASE_M16;
#if 0 /* XXX FIXME */
  if (file_ase_mips3d)
    elf_elfheader (stdoutput)->e_flags |= ???;
#endif
  if (file_ase_mdmx)
    elf_elfheader (stdoutput)->e_flags |= EF_MIPS_ARCH_ASE_MDMX;

  /* Set the MIPS ELF ABI flags.  */
  if (mips_abi == O32_ABI && USE_E_MIPS_ABI_O32)
    elf_elfheader (stdoutput)->e_flags |= E_MIPS_ABI_O32;
  else if (mips_abi == O64_ABI)
    elf_elfheader (stdoutput)->e_flags |= E_MIPS_ABI_O64;
  else if (mips_abi == EABI_ABI)
    {
      if (!file_mips_gp32)
	elf_elfheader (stdoutput)->e_flags |= E_MIPS_ABI_EABI64;
      else
	elf_elfheader (stdoutput)->e_flags |= E_MIPS_ABI_EABI32;
    }
  else if (mips_abi == N32_ABI)
    elf_elfheader (stdoutput)->e_flags |= EF_MIPS_ABI2;

  /* Nothing to do for N64_ABI.  */

  if (mips_32bitmode)
    elf_elfheader (stdoutput)->e_flags |= EF_MIPS_32BITMODE;
}

#endif /* OBJ_ELF || OBJ_MAYBE_ELF */

typedef struct proc {
  symbolS *isym;
  unsigned long reg_mask;
  unsigned long reg_offset;
  unsigned long fpreg_mask;
  unsigned long fpreg_offset;
  unsigned long frame_offset;
  unsigned long frame_reg;
  unsigned long pc_reg;
} procS;

static procS cur_proc;
static procS *cur_proc_ptr;
static int numprocs;

/* Fill in an rs_align_code fragment.  */

void
mips_handle_align (fragS *fragp)
{
  if (fragp->fr_type != rs_align_code)
    return;

  if (mips_opts.mips16)
    {
      static const unsigned char be_nop[] = { 0x65, 0x00 };
      static const unsigned char le_nop[] = { 0x00, 0x65 };

      int bytes;
      char *p;

      bytes = fragp->fr_next->fr_address - fragp->fr_address - fragp->fr_fix;
      p = fragp->fr_literal + fragp->fr_fix;

      if (bytes & 1)
	{
	  *p++ = 0;
	  fragp->fr_fix++;
	}

      memcpy (p, (target_big_endian ? be_nop : le_nop), 2);
      fragp->fr_var = 2;
    }

  /* For mips32, a nop is a zero, which we trivially get by doing nothing.  */
}

static void
md_obj_begin (void)
{
}

static void
md_obj_end (void)
{
  /* check for premature end, nesting errors, etc */
  if (cur_proc_ptr)
    as_warn (_("missing .end at end of assembly"));
}

static long
get_number (void)
{
  int negative = 0;
  long val = 0;

  if (*input_line_pointer == '-')
    {
      ++input_line_pointer;
      negative = 1;
    }
  if (!ISDIGIT (*input_line_pointer))
    as_bad (_("expected simple number"));
  if (input_line_pointer[0] == '0')
    {
      if (input_line_pointer[1] == 'x')
	{
	  input_line_pointer += 2;
	  while (ISXDIGIT (*input_line_pointer))
	    {
	      val <<= 4;
	      val |= hex_value (*input_line_pointer++);
	    }
	  return negative ? -val : val;
	}
      else
	{
	  ++input_line_pointer;
	  while (ISDIGIT (*input_line_pointer))
	    {
	      val <<= 3;
	      val |= *input_line_pointer++ - '0';
	    }
	  return negative ? -val : val;
	}
    }
  if (!ISDIGIT (*input_line_pointer))
    {
      printf (_(" *input_line_pointer == '%c' 0x%02x\n"),
	      *input_line_pointer, *input_line_pointer);
      as_warn (_("invalid number"));
      return -1;
    }
  while (ISDIGIT (*input_line_pointer))
    {
      val *= 10;
      val += *input_line_pointer++ - '0';
    }
  return negative ? -val : val;
}

/* The .file directive; just like the usual .file directive, but there
   is an initial number which is the ECOFF file index.  In the non-ECOFF
   case .file implies DWARF-2.  */

static void
s_mips_file (int x ATTRIBUTE_UNUSED)
{
  static int first_file_directive = 0;

  if (ECOFF_DEBUGGING)
    {
      get_number ();
      s_app_file (0);
    }
  else
    {
      char *filename;

      filename = dwarf2_directive_file (0);

      /* Versions of GCC up to 3.1 start files with a ".file"
	 directive even for stabs output.  Make sure that this
	 ".file" is handled.  Note that you need a version of GCC
         after 3.1 in order to support DWARF-2 on MIPS.  */
      if (filename != NULL && ! first_file_directive)
	{
	  (void) new_logical_line (filename, -1);
	  s_app_file_string (filename);
	}
      first_file_directive = 1;
    }
}

/* The .loc directive, implying DWARF-2.  */

static void
s_mips_loc (int x ATTRIBUTE_UNUSED)
{
  if (!ECOFF_DEBUGGING)
    dwarf2_directive_loc (0);
}

/* The .end directive.  */

static void
s_mips_end (int x ATTRIBUTE_UNUSED)
{
  symbolS *p;

  /* Following functions need their own .frame and .cprestore directives.  */
  mips_frame_reg_valid = 0;
  mips_cprestore_valid = 0;

  if (!is_end_of_line[(unsigned char) *input_line_pointer])
    {
      p = get_symbol ();
      demand_empty_rest_of_line ();
    }
  else
    p = NULL;

  if ((bfd_get_section_flags (stdoutput, now_seg) & SEC_CODE) == 0)
    as_warn (_(".end not in text section"));

  if (!cur_proc_ptr)
    {
      as_warn (_(".end directive without a preceding .ent directive."));
      demand_empty_rest_of_line ();
      return;
    }

  if (p != NULL)
    {
      assert (S_GET_NAME (p));
      if (strcmp (S_GET_NAME (p), S_GET_NAME (cur_proc_ptr->isym)))
	as_warn (_(".end symbol does not match .ent symbol."));

      if (debug_type == DEBUG_STABS)
	stabs_generate_asm_endfunc (S_GET_NAME (p),
				    S_GET_NAME (p));
    }
  else
    as_warn (_(".end directive missing or unknown symbol"));

#ifdef OBJ_ELF
  /* Generate a .pdr section.  */
  if (OUTPUT_FLAVOR == bfd_target_elf_flavour && ! ECOFF_DEBUGGING
      && mips_flag_pdr)
    {
      segT saved_seg = now_seg;
      subsegT saved_subseg = now_subseg;
      valueT dot;
      expressionS exp;
      char *fragp;

      dot = frag_now_fix ();

#ifdef md_flush_pending_output
      md_flush_pending_output ();
#endif

      assert (pdr_seg);
      subseg_set (pdr_seg, 0);

      /* Write the symbol.  */
      exp.X_op = O_symbol;
      exp.X_add_symbol = p;
      exp.X_add_number = 0;
      emit_expr (&exp, 4);

      fragp = frag_more (7 * 4);

      md_number_to_chars (fragp, cur_proc_ptr->reg_mask, 4);
      md_number_to_chars (fragp + 4, cur_proc_ptr->reg_offset, 4);
      md_number_to_chars (fragp + 8, cur_proc_ptr->fpreg_mask, 4);
      md_number_to_chars (fragp + 12, cur_proc_ptr->fpreg_offset, 4);
      md_number_to_chars (fragp + 16, cur_proc_ptr->frame_offset, 4);
      md_number_to_chars (fragp + 20, cur_proc_ptr->frame_reg, 4);
      md_number_to_chars (fragp + 24, cur_proc_ptr->pc_reg, 4);

      subseg_set (saved_seg, saved_subseg);
    }
#endif /* OBJ_ELF */

  cur_proc_ptr = NULL;
}

/* The .aent and .ent directives.  */

static void
s_mips_ent (int aent)
{
  symbolS *symbolP;

  symbolP = get_symbol ();
  if (*input_line_pointer == ',')
    ++input_line_pointer;
  SKIP_WHITESPACE ();
  if (ISDIGIT (*input_line_pointer)
      || *input_line_pointer == '-')
    get_number ();

  if ((bfd_get_section_flags (stdoutput, now_seg) & SEC_CODE) == 0)
    as_warn (_(".ent or .aent not in text section."));

  if (!aent && cur_proc_ptr)
    as_warn (_("missing .end"));

  if (!aent)
    {
      /* This function needs its own .frame and .cprestore directives.  */
      mips_frame_reg_valid = 0;
      mips_cprestore_valid = 0;

      cur_proc_ptr = &cur_proc;
      memset (cur_proc_ptr, '\0', sizeof (procS));

      cur_proc_ptr->isym = symbolP;

      symbol_get_bfdsym (symbolP)->flags |= BSF_FUNCTION;

      ++numprocs;

      if (debug_type == DEBUG_STABS)
        stabs_generate_asm_func (S_GET_NAME (symbolP),
				 S_GET_NAME (symbolP));
    }

  demand_empty_rest_of_line ();
}

/* The .frame directive. If the mdebug section is present (IRIX 5 native)
   then ecoff.c (ecoff_directive_frame) is used. For embedded targets,
   s_mips_frame is used so that we can set the PDR information correctly.
   We can't use the ecoff routines because they make reference to the ecoff
   symbol table (in the mdebug section).  */

static void
s_mips_frame (int ignore ATTRIBUTE_UNUSED)
{
#ifdef OBJ_ELF
  if (OUTPUT_FLAVOR == bfd_target_elf_flavour && ! ECOFF_DEBUGGING)
    {
      long val;

      if (cur_proc_ptr == (procS *) NULL)
	{
	  as_warn (_(".frame outside of .ent"));
	  demand_empty_rest_of_line ();
	  return;
	}

      cur_proc_ptr->frame_reg = tc_get_register (1);

      SKIP_WHITESPACE ();
      if (*input_line_pointer++ != ','
	  || get_absolute_expression_and_terminator (&val) != ',')
	{
	  as_warn (_("Bad .frame directive"));
	  --input_line_pointer;
	  demand_empty_rest_of_line ();
	  return;
	}

      cur_proc_ptr->frame_offset = val;
      cur_proc_ptr->pc_reg = tc_get_register (0);

      demand_empty_rest_of_line ();
    }
  else
#endif /* OBJ_ELF */
    s_ignore (ignore);
}

/* The .fmask and .mask directives. If the mdebug section is present
   (IRIX 5 native) then ecoff.c (ecoff_directive_mask) is used. For
   embedded targets, s_mips_mask is used so that we can set the PDR
   information correctly. We can't use the ecoff routines because they
   make reference to the ecoff symbol table (in the mdebug section).  */

static void
s_mips_mask (int reg_type)
{
#ifdef OBJ_ELF
  if (OUTPUT_FLAVOR == bfd_target_elf_flavour && ! ECOFF_DEBUGGING)
    {
      long mask, off;

      if (cur_proc_ptr == (procS *) NULL)
	{
	  as_warn (_(".mask/.fmask outside of .ent"));
	  demand_empty_rest_of_line ();
	  return;
	}

      if (get_absolute_expression_and_terminator (&mask) != ',')
	{
	  as_warn (_("Bad .mask/.fmask directive"));
	  --input_line_pointer;
	  demand_empty_rest_of_line ();
	  return;
	}

      off = get_absolute_expression ();

      if (reg_type == 'F')
	{
	  cur_proc_ptr->fpreg_mask = mask;
	  cur_proc_ptr->fpreg_offset = off;
	}
      else
	{
	  cur_proc_ptr->reg_mask = mask;
	  cur_proc_ptr->reg_offset = off;
	}

      demand_empty_rest_of_line ();
    }
  else
#endif /* OBJ_ELF */
    s_ignore (reg_type);
}

/* The .loc directive.  */

#if 0
static void
s_loc (int x)
{
  symbolS *symbolP;
  int lineno;
  int addroff;

  assert (now_seg == text_section);

  lineno = get_number ();
  addroff = frag_now_fix ();

  symbolP = symbol_new ("", N_SLINE, addroff, frag_now);
  S_SET_TYPE (symbolP, N_SLINE);
  S_SET_OTHER (symbolP, 0);
  S_SET_DESC (symbolP, lineno);
  symbolP->sy_segment = now_seg;
}
#endif

/* A table describing all the processors gas knows about.  Names are
   matched in the order listed.

   To ease comparison, please keep this table in the same order as
   gcc's mips_cpu_info_table[].  */
static const struct mips_cpu_info mips_cpu_info_table[] =
{
  /* Entries for generic ISAs */
  { "mips1",          MIPS_CPU_IS_ISA,      ISA_MIPS1,      CPU_R3000 },
  { "mips2",          MIPS_CPU_IS_ISA,      ISA_MIPS2,      CPU_R6000 },
  { "mips3",          MIPS_CPU_IS_ISA,      ISA_MIPS3,      CPU_R4000 },
  { "mips4",          MIPS_CPU_IS_ISA,      ISA_MIPS4,      CPU_R8000 },
  { "mips5",          MIPS_CPU_IS_ISA,      ISA_MIPS5,      CPU_MIPS5 },
  { "mips32",         MIPS_CPU_IS_ISA,      ISA_MIPS32,     CPU_MIPS32 },
  { "mips32r2",       MIPS_CPU_IS_ISA,      ISA_MIPS32R2,   CPU_MIPS32R2 },
  { "mips64",         MIPS_CPU_IS_ISA,      ISA_MIPS64,     CPU_MIPS64 },
  { "mips64r2",       MIPS_CPU_IS_ISA,      ISA_MIPS64R2,   CPU_MIPS64R2 },

  /* MIPS I */
  { "r3000",          0,      ISA_MIPS1,      CPU_R3000 },
  { "r2000",          0,      ISA_MIPS1,      CPU_R3000 },
  { "r3900",          0,      ISA_MIPS1,      CPU_R3900 },

  /* MIPS II */
  { "r6000",          0,      ISA_MIPS2,      CPU_R6000 },

  /* MIPS III */
  { "r4000",          0,      ISA_MIPS3,      CPU_R4000 },
  { "r4010",          0,      ISA_MIPS2,      CPU_R4010 },
  { "vr4100",         0,      ISA_MIPS3,      CPU_VR4100 },
  { "vr4111",         0,      ISA_MIPS3,      CPU_R4111 },
  { "vr4120",         0,      ISA_MIPS3,      CPU_VR4120 },
  { "vr4130",         0,      ISA_MIPS3,      CPU_VR4120 },
  { "vr4181",         0,      ISA_MIPS3,      CPU_R4111 },
  { "vr4300",         0,      ISA_MIPS3,      CPU_R4300 },
  { "r4400",          0,      ISA_MIPS3,      CPU_R4400 },
  { "r4600",          0,      ISA_MIPS3,      CPU_R4600 },
  { "orion",          0,      ISA_MIPS3,      CPU_R4600 },
  { "r4650",          0,      ISA_MIPS3,      CPU_R4650 },

  /* Loongson 2F */
  /* First step to getting full Loongson opcode support.
     Not just a MIPS III, not quite anything else. */
  /* XXX: Not yet, keep commented out for now
  { "loongson2f",     0,      ISA_L2F,        CPU_L2F },
  */

  /* MIPS IV */
  { "r8000",          0,      ISA_MIPS4,      CPU_R8000 },
  { "r10000",         0,      ISA_MIPS4,      CPU_R10000 },
  { "r12000",         0,      ISA_MIPS4,      CPU_R12000 },
  { "vr5000",         0,      ISA_MIPS4,      CPU_R5000 },
  { "vr5400",         0,      ISA_MIPS4,      CPU_VR5400 },
  { "vr5500",         0,      ISA_MIPS4,      CPU_VR5500 },
  { "rm5200",         0,      ISA_MIPS4,      CPU_R5000 },
  { "rm5230",         0,      ISA_MIPS4,      CPU_R5000 },
  { "rm5231",         0,      ISA_MIPS4,      CPU_R5000 },
  { "rm5261",         0,      ISA_MIPS4,      CPU_R5000 },
  { "rm5721",         0,      ISA_MIPS4,      CPU_R5000 },
  { "rm7000",         0,      ISA_MIPS4,      CPU_RM7000 },
  { "rm9000",         0,      ISA_MIPS4,      CPU_RM7000 },

  /* MIPS 32 */
  { "4kc",            0,      ISA_MIPS32,     CPU_MIPS32 },
  { "4km",            0,      ISA_MIPS32,     CPU_MIPS32 },
  { "4kp",            0,      ISA_MIPS32,     CPU_MIPS32 },

  /* MIPS 64 */
  { "5kc",            0,      ISA_MIPS64,     CPU_MIPS64 },
  { "20kc",           0,      ISA_MIPS64,     CPU_MIPS64 },

  /* Broadcom SB-1 CPU core */
  { "sb1",            0,      ISA_MIPS64,     CPU_SB1 },

  /* End marker */
  { NULL, 0, 0, 0 }
};


/* Return true if GIVEN is the same as CANONICAL, or if it is CANONICAL
   with a final "000" replaced by "k".  Ignore case.

   Note: this function is shared between GCC and GAS.  */

static bfd_boolean
mips_strict_matching_cpu_name_p (const char *canonical, const char *given)
{
  while (*given != 0 && TOLOWER (*given) == TOLOWER (*canonical))
    given++, canonical++;

  return ((*given == 0 && *canonical == 0)
	  || (strcmp (canonical, "000") == 0 && strcasecmp (given, "k") == 0));
}


/* Return true if GIVEN matches CANONICAL, where GIVEN is a user-supplied
   CPU name.  We've traditionally allowed a lot of variation here.

   Note: this function is shared between GCC and GAS.  */

static bfd_boolean
mips_matching_cpu_name_p (const char *canonical, const char *given)
{
  /* First see if the name matches exactly, or with a final "000"
     turned into "k".  */
  if (mips_strict_matching_cpu_name_p (canonical, given))
    return TRUE;

  /* If not, try comparing based on numerical designation alone.
     See if GIVEN is an unadorned number, or 'r' followed by a number.  */
  if (TOLOWER (*given) == 'r')
    given++;
  if (!ISDIGIT (*given))
    return FALSE;

  /* Skip over some well-known prefixes in the canonical name,
     hoping to find a number there too.  */
  if (TOLOWER (canonical[0]) == 'v' && TOLOWER (canonical[1]) == 'r')
    canonical += 2;
  else if (TOLOWER (canonical[0]) == 'r' && TOLOWER (canonical[1]) == 'm')
    canonical += 2;
  else if (TOLOWER (canonical[0]) == 'r')
    canonical += 1;

  return mips_strict_matching_cpu_name_p (canonical, given);
}


/* Parse an option that takes the name of a processor as its argument.
   OPTION is the name of the option and CPU_STRING is the argument.
   Return the corresponding processor enumeration if the CPU_STRING is
   recognized, otherwise report an error and return null.

   A similar function exists in GCC.  */

static const struct mips_cpu_info *
mips_parse_cpu (const char *option, const char *cpu_string)
{
  const struct mips_cpu_info *p;

  /* 'from-abi' selects the most compatible architecture for the given
     ABI: MIPS I for 32-bit ABIs and MIPS III for 64-bit ABIs.  For the
     EABIs, we have to decide whether we're using the 32-bit or 64-bit
     version.  Look first at the -mgp options, if given, otherwise base
     the choice on MIPS_DEFAULT_64BIT.

     Treat NO_ABI like the EABIs.  One reason to do this is that the
     plain 'mips' and 'mips64' configs have 'from-abi' as their default
     architecture.  This code picks MIPS I for 'mips' and MIPS III for
     'mips64', just as we did in the days before 'from-abi'.  */
  if (strcasecmp (cpu_string, "from-abi") == 0)
    {
      if (ABI_NEEDS_32BIT_REGS (mips_abi))
	return mips_cpu_info_from_isa (ISA_MIPS1);

      if (ABI_NEEDS_64BIT_REGS (mips_abi))
	return mips_cpu_info_from_isa (ISA_MIPS3);

      if (file_mips_gp32 >= 0)
	return mips_cpu_info_from_isa (file_mips_gp32 ? ISA_MIPS1 : ISA_MIPS3);

      return mips_cpu_info_from_isa (MIPS_DEFAULT_64BIT
				     ? ISA_MIPS3
				     : ISA_MIPS1);
    }

  /* 'default' has traditionally been a no-op.  Probably not very useful.  */
  if (strcasecmp (cpu_string, "default") == 0)
    return 0;

  for (p = mips_cpu_info_table; p->name != 0; p++)
    if (mips_matching_cpu_name_p (p->name, cpu_string))
      return p;

  as_bad ("Bad value (%s) for %s", cpu_string, option);
  return 0;
}

/* Return the canonical processor information for ISA (a member of the
   ISA_MIPS* enumeration).  */

static const struct mips_cpu_info *
mips_cpu_info_from_isa (int isa)
{
  int i;

  for (i = 0; mips_cpu_info_table[i].name != NULL; i++)
    if ((mips_cpu_info_table[i].flags & MIPS_CPU_IS_ISA)
	&& isa == mips_cpu_info_table[i].isa)
      return (&mips_cpu_info_table[i]);

  return NULL;
}

static const struct mips_cpu_info *
mips_cpu_info_from_arch (int arch)
{
  int i;

  for (i = 0; mips_cpu_info_table[i].name != NULL; i++)
    if (arch == mips_cpu_info_table[i].cpu)
      return (&mips_cpu_info_table[i]);

  return NULL;
}

static void
show (FILE *stream, const char *string, int *col_p, int *first_p)
{
  if (*first_p)
    {
      fprintf (stream, "%24s", "");
      *col_p = 24;
    }
  else
    {
      fprintf (stream, ", ");
      *col_p += 2;
    }

  if (*col_p + strlen (string) > 72)
    {
      fprintf (stream, "\n%24s", "");
      *col_p = 24;
    }

  fprintf (stream, "%s", string);
  *col_p += strlen (string);

  *first_p = 0;
}

void
md_show_usage (FILE *stream)
{
  int column, first;
  size_t i;

  fprintf (stream, _("\
MIPS options:\n\
-membedded-pic		generate embedded position independent code\n\
-EB			generate big endian output\n\
-EL			generate little endian output\n\
-g, -g2			do not remove unneeded NOPs or swap branches\n\
-G NUM			allow referencing objects up to NUM bytes\n\
			implicitly with the gp register [default 8]\n"));
  fprintf (stream, _("\
-mips1			generate MIPS ISA I instructions\n\
-mips2			generate MIPS ISA II instructions\n\
-mips3			generate MIPS ISA III instructions\n\
-mips4			generate MIPS ISA IV instructions\n\
-mips5                  generate MIPS ISA V instructions\n\
-mips32                 generate MIPS32 ISA instructions\n\
-mips32r2               generate MIPS32 release 2 ISA instructions\n\
-mips64                 generate MIPS64 ISA instructions\n\
-mips64r2               generate MIPS64 release 2 ISA instructions\n\
-march=CPU/-mtune=CPU	generate code/schedule for CPU, where CPU is one of:\n"));

  first = 1;

  for (i = 0; mips_cpu_info_table[i].name != NULL; i++)
    show (stream, mips_cpu_info_table[i].name, &column, &first);
  show (stream, "from-abi", &column, &first);
  fputc ('\n', stream);

  fprintf (stream, _("\
-mCPU			equivalent to -march=CPU -mtune=CPU. Deprecated.\n\
-no-mCPU		don't generate code specific to CPU.\n\
			For -mCPU and -no-mCPU, CPU must be one of:\n"));

  first = 1;

  show (stream, "3900", &column, &first);
  show (stream, "4010", &column, &first);
  show (stream, "4100", &column, &first);
  show (stream, "4650", &column, &first);
  fputc ('\n', stream);

  fprintf (stream, _("\
-mips16			generate mips16 instructions\n\
-no-mips16		do not generate mips16 instructions\n"));
  fprintf (stream, _("\
-mfix-vr4120		work around certain VR4120 errata\n\
-mfix-loongson2f-btb	work around Loongson2F BTB errata\n\
-mgp32			use 32-bit GPRs, regardless of the chosen ISA\n\
-mfp32			use 32-bit FPRs, regardless of the chosen ISA\n\
-O0			remove unneeded NOPs, do not swap branches\n\
-O			remove unneeded NOPs and swap branches\n\
--[no-]construct-floats [dis]allow floating point values to be constructed\n\
--trap, --no-break	trap exception on div by 0 and mult overflow\n\
--break, --no-trap	break exception on div by 0 and mult overflow\n"));
#ifdef OBJ_ELF
  fprintf (stream, _("\
-KPIC, -call_shared	generate SVR4 position independent code\n\
-non_shared		do not generate position independent code\n\
-xgot			assume a 32 bit GOT\n\
-mpdr, -mno-pdr		enable/disable creation of .pdr sections\n\
-mabi=ABI		create ABI conformant object file for:\n"));

  first = 1;

  show (stream, "32", &column, &first);
  show (stream, "o64", &column, &first);
  show (stream, "n32", &column, &first);
  show (stream, "64", &column, &first);
  show (stream, "eabi", &column, &first);

  fputc ('\n', stream);

  fprintf (stream, _("\
-32			create o32 ABI object file (default)\n\
-n32			create n32 ABI object file\n\
-64			create 64 ABI object file\n"));
#endif
}

enum dwarf2_format
mips_dwarf2_format (void)
{
  if (mips_abi == N64_ABI)
    {
#ifdef TE_IRIX
      return dwarf2_format_64bit_irix;
#else
      return dwarf2_format_64bit;
#endif
    }
  else
    return dwarf2_format_32bit;
}

int
mips_dwarf2_addr_size (void)
{
  if (mips_abi == N64_ABI)
    return 8;
  else
    return 4;
}

/* Standard calling conventions leave the CFA at SP on entry.  */
void
mips_cfi_frame_initial_instructions (void)
{
  cfi_add_CFA_def_cfa_register (SP);
}

int
tc_mips_regname_to_dw2regnum (char *regname)
{
  unsigned int regnum = -1;
  unsigned int reg;

  if (reg_lookup (&regname, RTYPE_GP | RTYPE_NUM, &reg))
    regnum = reg;

  return regnum;
}
@


1.12
log
@Teach as(1) how to handle mips symbolic register names.
Backported from a commit made after binutils 2.17 but before the GPLv3 switch.
ok miod@@
@
text
@d36 1
d14592 7
@


1.11
log
@Add a new option to the mips64 gas, -mfix-loongson2f-btb. This option
is intended to be used when compiling kernel code which will run on a
Loongson 2E or 2F processor, and inserts an explicit BTB clear operation
before every jump through a register (jr or jalr instructions), unless
that register is k0 or k1, or we are in .set noat.

This is a reliable, although aggressive, workaround for the misbehaviour
of the branch prediction engine of many Loongson 2F processors with regard
to the Branch Translation Buffer, for which an official errata has yet
to be published, and for which the Loongson suggested workaround apparently
only works due to pipeline side effects, but requires all the executable
kernel code to be located in CKSEG0/CKSEG1.

These changes are inspired by a backport of the Loongson binutils 2.19 patch
to binutils 2.18; the idea of doing an aggressive BTB clear is mine.

This causes no functional change to code compiled without the
-mfix-loongson2f-btb option.

``looks reasonable'' kettenis@@
@
text
@d258 9
d280 13
d297 1
a297 1
    (mips_opts.fp32 || ! ISA_HAS_64BIT_REGS (mips_opts.isa))
d306 3
d319 6
d889 1
a889 1

d958 1
a958 1
  int is_isa;                 /* Is this an ISA?  (If 0, a CPU.) */
d963 7
d1168 290
d1529 14
a1542 40
  for (i = 0; i < 32; i++)
    {
      char buf[5];

      sprintf (buf, "$%d", i);
      symbol_table_insert (symbol_new (buf, reg_section, i,
				       &zero_address_frag));
    }
  symbol_table_insert (symbol_new ("$ra", reg_section, RA,
				   &zero_address_frag));
  symbol_table_insert (symbol_new ("$fp", reg_section, FP,
				   &zero_address_frag));
  symbol_table_insert (symbol_new ("$sp", reg_section, SP,
				   &zero_address_frag));
  symbol_table_insert (symbol_new ("$gp", reg_section, GP,
				   &zero_address_frag));
  symbol_table_insert (symbol_new ("$at", reg_section, AT,
				   &zero_address_frag));
  symbol_table_insert (symbol_new ("$kt0", reg_section, KT0,
				   &zero_address_frag));
  symbol_table_insert (symbol_new ("$kt1", reg_section, KT1,
				   &zero_address_frag));
  symbol_table_insert (symbol_new ("$zero", reg_section, ZERO,
				   &zero_address_frag));
  symbol_table_insert (symbol_new ("$pc", reg_section, -1,
				   &zero_address_frag));

  /* If we don't add these register names to the symbol table, they
     may end up being added as regular symbols by operand(), and then
     make it to the object file as undefined in case they're not
     regarded as local symbols.  They're local in o32, since `$' is a
     local symbol prefix, but not in n32 or n64.  */
  for (i = 0; i < 8; i++)
    {
      char buf[6];

      sprintf (buf, "$fcc%i", i);
      symbol_table_insert (symbol_new (buf, reg_section, -1,
				       &zero_address_frag));
    }
d1558 1
a1595 1
#ifdef OBJ_ELF
a1596 1
#endif
a1605 1
#ifdef OBJ_ELF
a1621 1
#endif
a1630 1
#ifdef OBJ_ELF
a1638 1
#endif
d1643 1
d8428 3
d8533 1
d8836 14
a8857 1
	    case 'G':		/* coprocessor destination register */
d8863 2
a8864 19
	      if (s[0] == '$')
		{

		  if (ISDIGIT (s[1]))
		    {
		      ++s;
		      regno = 0;
		      do
			{
			  regno *= 10;
			  regno += *s - '0';
			  ++s;
			}
		      while (ISDIGIT (*s));
		      if (regno > 31)
			as_bad (_("Invalid register number (%d)"), regno);
		    }
		  else if (*args == 'E' || *args == 'G' || *args == 'K')
		    goto notreg;
d8867 3
a8869 9
		      if (s[1] == 'r' && s[2] == 'a')
			{
			  s += 3;
			  regno = RA;
			}
		      else if (s[1] == 'f' && s[2] == 'p')
			{
			  s += 3;
			  regno = FP;
d8871 1
a8871 1
		      else if (s[1] == 's' && s[2] == 'p')
a8872 61
			  s += 3;
			  regno = SP;
			}
		      else if (s[1] == 'g' && s[2] == 'p')
			{
			  s += 3;
			  regno = GP;
			}
		      else if (s[1] == 'a' && s[2] == 't')
			{
			  s += 3;
			  regno = AT;
			}
		      else if (s[1] == 'k' && s[2] == 't' && s[3] == '0')
			{
			  s += 4;
			  regno = KT0;
			}
		      else if (s[1] == 'k' && s[2] == 't' && s[3] == '1')
			{
			  s += 4;
			  regno = KT1;
			}
		      else if (s[1] == 'z' && s[2] == 'e' && s[3] == 'r' && s[4] == 'o')
			{
			  s += 5;
			  regno = ZERO;
			}
		      else if (itbl_have_entries)
			{
			  char *p, *n;
			  unsigned long r;

			  p = s + 1; 	/* advance past '$' */
			  n = itbl_get_field (&p);  /* n is name */

			  /* See if this is a register defined in an
			     itbl entry.  */
			  if (itbl_get_reg_val (n, &r))
			    {
			      /* Get_field advances to the start of
				 the next field, so we need to back
				 rack to the end of the last field.  */
			      if (p)
				s = p - 1;
			      else
				s = strchr (s, '\0');
			      regno = r;
			    }
			  else
			    goto notreg;
			}
		      else
			goto notreg;
		    }
		  if (regno == AT
		      && ! mips_opts.noat
		      && *args != 'E'
		      && *args != 'G'
		      && *args != 'K')
		    as_warn (_("Used $at without \".set noat\""));
a8936 1
	    notreg:
d8996 10
d9007 1
a9007 9
	      /* Accept $fN for FP and MDMX register numbers, and in
                 addition accept $vN for MDMX register numbers.  */
	      if ((s[0] == '$' && s[1] == 'f' && ISDIGIT (s[2]))
		  || (is_mdmx != 0 && s[0] == '$' && s[1] == 'v'
		      && ISDIGIT (s[2])))
		{
		  s += 2;
		  regno = 0;
		  do
a9008 9
		      regno *= 10;
		      regno += *s - '0';
		      ++s;
		    }
		  while (ISDIGIT (*s));

		  if (regno > 31)
		    as_bad (_("Invalid float register number (%d)"), regno);

d9415 4
a9418 1
	      if (strncmp (s, "$fcc", 4) != 0)
a9419 11
	      s += 4;
	      regno = 0;
	      do
		{
		  regno *= 10;
		  regno += *s - '0';
		  ++s;
		}
	      while (ISDIGIT (*s));
	      if (regno > 7)
		as_bad (_("Invalid condition code register $fcc%d"), regno);
a9672 2
	      if (s[0] != '$')
		break;
d9674 1
a9674 1
	      if (ISDIGIT (s[1]))
d9676 1
a9676 10
		  ++s;
		  regno = 0;
		  do
		    {
		      regno *= 10;
		      regno += *s - '0';
		      ++s;
		    }
		  while (ISDIGIT (*s));
		  if (regno > 31)
d9678 2
a9679 4
		      as_bad (_("invalid register number (%d)"), regno);
		      regno = 2;
		    }
		}
d9681 3
a9683 20
		{
		  if (s[1] == 'r' && s[2] == 'a')
		    {
		      s += 3;
		      regno = RA;
		    }
		  else if (s[1] == 'f' && s[2] == 'p')
		    {
		      s += 3;
		      regno = FP;
		    }
		  else if (s[1] == 's' && s[2] == 'p')
		    {
		      s += 3;
		      regno = SP;
		    }
		  else if (s[1] == 'g' && s[2] == 'p')
		    {
		      s += 3;
		      regno = GP;
a9684 21
		  else if (s[1] == 'a' && s[2] == 't')
		    {
		      s += 3;
		      regno = AT;
		    }
		  else if (s[1] == 'k' && s[2] == 't' && s[3] == '0')
		    {
		      s += 4;
		      regno = KT0;
		    }
		  else if (s[1] == 'k' && s[2] == 't' && s[3] == '1')
		    {
		      s += 4;
		      regno = KT1;
		    }
		  else if (s[1] == 'z' && s[2] == 'e' && s[3] == 'r' && s[4] == 'o')
		    {
		      s += 5;
		      regno = ZERO;
		    }
		  else
d9898 1
a9898 1
		    int freg, reg1, reg2;
d9902 1
a9902 7
		    if (*s != '$')
		      {
			as_bad (_("can't parse register list"));
			break;
		      }
		    ++s;
		    if (*s != 'f')
d9904 1
a9904 2
		    else
		      {
d9906 1
a9906 4
			++s;
		      }
		    reg1 = 0;
		    while (ISDIGIT (*s))
d9908 2
a9909 3
			reg1 *= 10;
			reg1 += *s - '0';
			++s;
d9918 6
a9923 20
			if (*s != '$')
			  break;
			++s;
			if (freg)
			  {
			    if (*s == 'f')
			      ++s;
			    else
			      {
				as_bad (_("invalid register list"));
				break;
			      }
			  }
			reg2 = 0;
			while (ISDIGIT (*s))
			  {
			    reg2 *= 10;
			    reg2 += *s - '0';
			    ++s;
			  }
d12695 1
a12695 1
  int reg;
d12698 2
a12699 64
  if (*input_line_pointer++ != '$')
    {
      as_warn (_("expected `$'"));
      reg = ZERO;
    }
  else if (ISDIGIT (*input_line_pointer))
    {
      reg = get_absolute_expression ();
      if (reg < 0 || reg >= 32)
	{
	  as_warn (_("Bad register number"));
	  reg = ZERO;
	}
    }
  else
    {
      if (strncmp (input_line_pointer, "ra", 2) == 0)
	{
	  reg = RA;
	  input_line_pointer += 2;
	}
      else if (strncmp (input_line_pointer, "fp", 2) == 0)
	{
	  reg = FP;
	  input_line_pointer += 2;
	}
      else if (strncmp (input_line_pointer, "sp", 2) == 0)
	{
	  reg = SP;
	  input_line_pointer += 2;
	}
      else if (strncmp (input_line_pointer, "gp", 2) == 0)
	{
	  reg = GP;
	  input_line_pointer += 2;
	}
      else if (strncmp (input_line_pointer, "at", 2) == 0)
	{
	  reg = AT;
	  input_line_pointer += 2;
	}
      else if (strncmp (input_line_pointer, "kt0", 3) == 0)
	{
	  reg = KT0;
	  input_line_pointer += 3;
	}
      else if (strncmp (input_line_pointer, "kt1", 3) == 0)
	{
	  reg = KT1;
	  input_line_pointer += 3;
	}
      else if (strncmp (input_line_pointer, "zero", 4) == 0)
	{
	  reg = ZERO;
	  input_line_pointer += 4;
	}
      else
	{
	  as_warn (_("Unrecognized register name"));
	  reg = ZERO;
	  while (ISALNUM(*input_line_pointer))
	   input_line_pointer++;
	}
    }
d14261 9
a14269 9
  { "mips1",          1,      ISA_MIPS1,      CPU_R3000 },
  { "mips2",          1,      ISA_MIPS2,      CPU_R6000 },
  { "mips3",          1,      ISA_MIPS3,      CPU_R4000 },
  { "mips4",          1,      ISA_MIPS4,      CPU_R8000 },
  { "mips5",          1,      ISA_MIPS5,      CPU_MIPS5 },
  { "mips32",         1,      ISA_MIPS32,     CPU_MIPS32 },
  { "mips32r2",       1,      ISA_MIPS32R2,   CPU_MIPS32R2 },
  { "mips64",         1,      ISA_MIPS64,     CPU_MIPS64 },
  { "mips64r2",       1,      ISA_MIPS64R2,   CPU_MIPS64R2 },
d14293 7
d14440 1
a14440 1
    if (mips_cpu_info_table[i].is_isa
d14591 12
@


1.10
log
@Merge conflicts, bringing our changes back in:
- extra $(SHELL) and sugar for make (so that files not mode +x still work)
- safer temp file handling
- our W^X binary layout changes in ld
- OpenBSD policy for library file selection in ld
- arm and m88k changes which were not merged in time for official 2.15
- bfd core file handling
- a couple typos

New for 2.15:
- ld(1) and as(1) manpages now generated at build time
- binutils/stabs.c reverted to use our in-tree libiberty for now
- we still use our VIA C3 crypto code over stock binutils, as it recognizes
  more instructions
- new emulations for OpenBSD on mips64 machines, to help OpenBSD/sgi
- relaxed %f# handling in gas on OpenBSD/sparc64 (same as was in 2.14)

Tested on all platforms by various people; special thanks to sturm@@ and
otto@@.
@
text
@d633 2
d872 1
d2974 35
d3377 1
d5551 20
d5590 4
a5593 1
	macro_build (NULL, "jalr", "d,s", dreg, sreg);
d5599 1
d10324 4
d10330 1
a10330 1
#define OPTION_MISC_BASE (OPTION_FIX_BASE + 4)
d10577 8
d14452 1
@


1.9
log
@Resolve merge conflicts, adjust method of W^X handing (.sh files)
remove testsuites (not useable) remove mmalloc (not part of new binutils).
@
text
@d2 2
a3 2
   Copyright 1993, 1994, 1995, 1996, 1997, 1998, 1999, 2000, 2001, 2002, 2003
   Free Software Foundation, Inc.
a30 1
#ifdef USE_STDARG
a31 4
#endif
#ifdef USE_VARARGS
#include <varargs.h>
#endif
d45 2
a46 2
static int mips_output_flavor PARAMS ((void));
static int mips_output_flavor () { return OUTPUT_FLAVOR; }
d77 9
d138 3
d187 3
d204 1
a204 1
  ISA_UNKNOWN, -1, -1, -1, 0, 0, 0, 0, 0, 0, 0, 0
d229 1
a229 1
static int mips_arch = CPU_UNKNOWN;
a230 1
static const struct mips_cpu_info *mips_arch_info;
a235 1
static const struct mips_cpu_info *mips_tune_info;
a239 14
/* Some ISA's have delay slots for instructions which read or write
   from a coprocessor (eg. mips1-mips3); some don't (eg mips4).
   Return true if instructions marked INSN_LOAD_COPROC_DELAY,
   INSN_COPROC_MOVE_DELAY, or INSN_WRITE_COND_CODE actually have a
   delay slot in this ISA.  The uses of this macro assume that any
   ISA that has delay slots for one of these, has them for all.  They
   also assume that ISAs which don't have delays for these insns, don't
   have delays for the INSN_LOAD_MEMORY_DELAY instructions either.  */
#define ISA_HAS_COPROC_DELAYS(ISA) (        \
   (ISA) == ISA_MIPS1                       \
   || (ISA) == ISA_MIPS2                    \
   || (ISA) == ISA_MIPS3                    \
   )

d255 1
d261 1
a261 1
   0				\
d268 1
d293 15
a307 2
#define HAVE_64BIT_ADDRESS_CONSTANTS (HAVE_64BIT_ADDRESSES \
				      || HAVE_64BIT_GPRS)
d328 24
a351 8
/* Whether the processor uses hardware interlocks to protect
   reads from the HI and LO registers, and thus does not
   require nops to be inserted.  */

#define hilo_interlocks (mips_arch == CPU_R4010                       \
                         || mips_arch == CPU_VR5500                   \
                         || mips_arch == CPU_SB1                      \
                         )
d354 4
a357 1
   from the GPRs, and thus does not require nops to be inserted.  */
d360 21
a380 3
   || mips_arch == CPU_VR5400  \
   || mips_arch == CPU_VR5500  \
   || mips_arch == CPU_R3900)
d382 6
a387 8
/* As with other "interlocks" this is used by hardware that has FP
   (co-processor) interlocks.  */
/* Itbl support may require additional care here.  */
#define cop_interlocks (mips_arch == CPU_R4300                        \
                        || mips_arch == CPU_VR5400                    \
                        || mips_arch == CPU_VR5500                    \
                        || mips_arch == CPU_SB1                       \
			)
a396 3
/* Warn about all NOPS that the assembler generates.  */
static int warn_nops = 0;

d441 1
a441 1
static int nopic_need_relax PARAMS ((symbolS *, int));
d488 1
a488 1
/* Similiar for NewABI PIC code, where $gp is callee-saved.  NewABI has some
d625 1
a625 1
static int mips_fix_4122_bugs;
d634 55
a688 75
/* Since the MIPS does not have multiple forms of PC relative
   instructions, we do not have to do relaxing as is done on other
   platforms.  However, we do have to handle GP relative addressing
   correctly, which turns out to be a similar problem.

   Every macro that refers to a symbol can occur in (at least) two
   forms, one with GP relative addressing and one without.  For
   example, loading a global variable into a register generally uses
   a macro instruction like this:
     lw $4,i
   If i can be addressed off the GP register (this is true if it is in
   the .sbss or .sdata section, or if it is known to be smaller than
   the -G argument) this will generate the following instruction:
     lw $4,i($gp)
   This instruction will use a GPREL reloc.  If i can not be addressed
   off the GP register, the following instruction sequence will be used:
     lui $at,i
     lw $4,i($at)
   In this case the first instruction will have a HI16 reloc, and the
   second reloc will have a LO16 reloc.  Both relocs will be against
   the symbol i.

   The issue here is that we may not know whether i is GP addressable
   until after we see the instruction that uses it.  Therefore, we
   want to be able to choose the final instruction sequence only at
   the end of the assembly.  This is similar to the way other
   platforms choose the size of a PC relative instruction only at the
   end of assembly.

   When generating position independent code we do not use GP
   addressing in quite the same way, but the issue still arises as
   external symbols and local symbols must be handled differently.

   We handle these issues by actually generating both possible
   instruction sequences.  The longer one is put in a frag_var with
   type rs_machine_dependent.  We encode what to do with the frag in
   the subtype field.  We encode (1) the number of existing bytes to
   replace, (2) the number of new bytes to use, (3) the offset from
   the start of the existing bytes to the first reloc we must generate
   (that is, the offset is applied from the start of the existing
   bytes after they are replaced by the new bytes, if any), (4) the
   offset from the start of the existing bytes to the second reloc,
   (5) whether a third reloc is needed (the third reloc is always four
   bytes after the second reloc), and (6) whether to warn if this
   variant is used (this is sometimes needed if .set nomacro or .set
   noat is in effect).  All these numbers are reasonably small.

   Generating two instruction sequences must be handled carefully to
   ensure that delay slots are handled correctly.  Fortunately, there
   are a limited number of cases.  When the second instruction
   sequence is generated, append_insn is directed to maintain the
   existing delay slot information, so it continues to apply to any
   code after the second instruction sequence.  This means that the
   second instruction sequence must not impose any requirements not
   required by the first instruction sequence.

   These variant frags are then handled in functions called by the
   machine independent code.  md_estimate_size_before_relax returns
   the final size of the frag.  md_convert_frag sets up the final form
   of the frag.  tc_gen_reloc adjust the first reloc and adds a second
   one if needed.  */
#define RELAX_ENCODE(old, new, reloc1, reloc2, reloc3, warn) \
  ((relax_substateT) \
   (((old) << 23) \
    | ((new) << 16) \
    | (((reloc1) + 64) << 9) \
    | (((reloc2) + 64) << 2) \
    | ((reloc3) ? (1 << 1) : 0) \
    | ((warn) ? 1 : 0)))
#define RELAX_OLD(i) (((i) >> 23) & 0x7f)
#define RELAX_NEW(i) (((i) >> 16) & 0x7f)
#define RELAX_RELOC1(i) ((valueT) (((i) >> 9) & 0x7f) - 64)
#define RELAX_RELOC2(i) ((valueT) (((i) >> 2) & 0x7f) - 64)
#define RELAX_RELOC3(i) (((i) >> 1) & 1)
#define RELAX_WARN(i) ((i) & 1)
d821 36
d859 1
a859 2
#ifdef __STDC__
#define internalError() \
a860 3
#else
#define internalError() as_fatal (_("MIPS internal Error"));
#endif
a863 11
static inline bfd_boolean reloc_needs_lo_p
  PARAMS ((bfd_reloc_code_real_type));
static inline bfd_boolean fixup_has_matching_lo_p
  PARAMS ((fixS *));
static int insn_uses_reg
  PARAMS ((struct mips_cl_insn *ip, unsigned int reg,
	   enum mips_regclass class));
static int reg_needs_delay
  PARAMS ((unsigned int));
static void mips16_mark_labels
  PARAMS ((void));
d865 2
a866 13
  PARAMS ((char *place, struct mips_cl_insn * ip, expressionS * p,
	   bfd_reloc_code_real_type *r));
static void mips_no_prev_insn
  PARAMS ((int));
static void mips_emit_delays
  PARAMS ((bfd_boolean));
#ifdef USE_STDARG
static void macro_build
  PARAMS ((char *place, int *counter, expressionS * ep, const char *name,
	   const char *fmt, ...));
#else
static void macro_build ();
#endif
d868 6
a873 22
  PARAMS ((char *, int *, expressionS *, const char *, const char *, va_list));
static void macro_build_jalr
  PARAMS ((int, expressionS *));
static void macro_build_lui
  PARAMS ((char *place, int *counter, expressionS * ep, int regnum));
static void macro_build_ldst_constoffset
  PARAMS ((char *place, int *counter, expressionS * ep, const char *op,
	   int valreg, int breg));
static void set_at
  PARAMS ((int *counter, int reg, int unsignedp));
static void check_absolute_expr
  PARAMS ((struct mips_cl_insn * ip, expressionS *));
static void load_register
  PARAMS ((int *, int, expressionS *, int));
static void load_address
  PARAMS ((int *, int, expressionS *, int *));
static void move_register
  PARAMS ((int *, int, int));
static void macro
  PARAMS ((struct mips_cl_insn * ip));
static void mips16_macro
  PARAMS ((struct mips_cl_insn * ip));
d875 1
a875 2
static void macro2
  PARAMS ((struct mips_cl_insn * ip));
d877 2
a878 4
static void mips_ip
  PARAMS ((char *str, struct mips_cl_insn * ip));
static void mips16_ip
  PARAMS ((char *str, struct mips_cl_insn * ip));
d880 2
a881 4
  PARAMS ((char *, unsigned int, int, offsetT, bfd_boolean, bfd_boolean,
	   bfd_boolean, unsigned long *, bfd_boolean *, unsigned short *));
static bfd_boolean parse_relocation
  PARAMS ((char **, bfd_reloc_code_real_type *));
d883 32
a914 77
  PARAMS ((expressionS *, bfd_reloc_code_real_type *, char *));
static void my_getExpression
  PARAMS ((expressionS *, char *));
#ifdef OBJ_ELF
static int support_64bit_objects
  PARAMS((void));
#endif
static void mips_set_option_string
  PARAMS ((const char **, const char *));
static symbolS *get_symbol
  PARAMS ((void));
static void mips_align
  PARAMS ((int to, int fill, symbolS *label));
static void s_align
  PARAMS ((int));
static void s_change_sec
  PARAMS ((int));
static void s_change_section
  PARAMS ((int));
static void s_cons
  PARAMS ((int));
static void s_float_cons
  PARAMS ((int));
static void s_mips_globl
  PARAMS ((int));
static void s_option
  PARAMS ((int));
static void s_mipsset
  PARAMS ((int));
static void s_abicalls
  PARAMS ((int));
static void s_cpload
  PARAMS ((int));
static void s_cpsetup
  PARAMS ((int));
static void s_cplocal
  PARAMS ((int));
static void s_cprestore
  PARAMS ((int));
static void s_cpreturn
  PARAMS ((int));
static void s_gpvalue
  PARAMS ((int));
static void s_gpword
  PARAMS ((int));
static void s_gpdword
  PARAMS ((int));
static void s_cpadd
  PARAMS ((int));
static void s_insn
  PARAMS ((int));
static void md_obj_begin
  PARAMS ((void));
static void md_obj_end
  PARAMS ((void));
static long get_number
  PARAMS ((void));
static void s_mips_ent
  PARAMS ((int));
static void s_mips_end
  PARAMS ((int));
static void s_mips_frame
  PARAMS ((int));
static void s_mips_mask
  PARAMS ((int));
static void s_mips_stab
  PARAMS ((int));
static void s_mips_weakext
  PARAMS ((int));
static void s_mips_file
  PARAMS ((int));
static void s_mips_loc
  PARAMS ((int));
static bfd_boolean pic_need_relax
  PARAMS ((symbolS *, asection *));
static int mips16_extended_frag
  PARAMS ((fragS *, asection *, long));
d916 1
a916 8
static int validate_mips_insn
  PARAMS ((const struct mips_opcode *));
static void show
  PARAMS ((FILE *, const char *, int *, int *));
#ifdef OBJ_ELF
static int mips_need_elf_addend_fixup
  PARAMS ((fixS *));
#endif
d929 3
a931 12
static void mips_set_architecture
  PARAMS ((const struct mips_cpu_info *));
static void mips_set_tune
  PARAMS ((const struct mips_cpu_info *));
static bfd_boolean mips_strict_matching_cpu_name_p
  PARAMS ((const char *, const char *));
static bfd_boolean mips_matching_cpu_name_p
  PARAMS ((const char *, const char *));
static const struct mips_cpu_info *mips_parse_cpu
  PARAMS ((const char *, const char *));
static const struct mips_cpu_info *mips_cpu_info_from_isa
  PARAMS ((int));
d1024 1
a1024 1
extern void pop_insert PARAMS ((const pseudo_typeS *));
d1027 1
a1027 1
mips_pop_insert ()
d1045 1
a1045 1
static void mips_clear_insn_labels PARAMS ((void));
d1048 1
a1048 1
mips_clear_insn_labels ()
d1064 1
d1088 1
a1088 1
mips_target_format ()
d1131 1
a1131 1
md_begin ()
d1137 1
a1137 1
  if (! bfd_set_arch_mach (stdoutput, bfd_arch_mips, mips_arch))
d1146 1
a1146 1
      retval = hash_insert (op_hash, name, (PTR) &mips_opcodes[i]);
d1173 1
a1173 1
      retval = hash_insert (mips16_op_hash, name, (PTR) &mips16_opcodes[i]);
d1330 1
a1330 1
	else if (OUTPUT_FLAVOR == bfd_target_elf_flavour)
d1349 1
a1349 1
md_mips_end ()
d1356 1
a1356 2
md_assemble (str)
     char *str;
d1363 1
d1389 1
d1394 1
d1399 1
a1399 1
	append_insn (NULL, &insn, &imm_expr, imm_reloc);
d1401 1
a1401 1
	append_insn (NULL, &insn, &offset_expr, offset_reloc);
d1403 1
a1403 1
	append_insn (NULL, &insn, NULL, unused_reloc);
d1412 1
a1412 2
reloc_needs_lo_p (reloc)
     bfd_reloc_code_real_type reloc;
d1422 1
a1422 2
fixup_has_matching_lo_p (fixp)
     fixS *fixp;
d1434 2
a1435 4
insn_uses_reg (ip, reg, class)
     struct mips_cl_insn *ip;
     unsigned int reg;
     enum mips_regclass class;
d1512 1
a1512 2
reg_needs_delay (reg)
     unsigned int reg;
d1518 7
a1524 9
      && ISA_HAS_COPROC_DELAYS (mips_opts.isa)
      && ((prev_pinfo & INSN_LOAD_COPROC_DELAY)
	  || (! gpr_interlocks
	      && (prev_pinfo & INSN_LOAD_MEMORY_DELAY))))
    {
      /* A load from a coprocessor or from memory.  All load
	 delays delay the use of general register rt for one
	 instruction on the r3000.  The r6000 and r4000 use
	 interlocks.  */
d1543 1
a1543 1
mips16_mark_labels ()
d1563 2
a1564 4
/* Output an instruction.  PLACE is where to put the instruction; if
   it is NULL, this uses frag_more to get room.  IP is the instruction
   information.  ADDRESS_EXPR is an operand of the instruction to be
   used with RELOC_TYPE.  */
d1567 49
a1615 5
append_insn (place, ip, address_expr, reloc_type)
     char *place;
     struct mips_cl_insn *ip;
     expressionS *address_expr;
     bfd_reloc_code_real_type *reloc_type;
d1621 2
d1631 2
a1632 1
  if (place == NULL && (! mips_opts.noreorder || prev_nop_frag != NULL))
d1665 4
a1668 5
	  && ISA_HAS_COPROC_DELAYS (mips_opts.isa)
	  && (((prev_pinfo & INSN_LOAD_COPROC_DELAY)
               && ! cop_interlocks)
	      || (! gpr_interlocks
		  && (prev_pinfo & INSN_LOAD_MEMORY_DELAY))))
d1672 1
a1672 2
	     instruction on the r3000.  The r6000 and r4000 use
	     interlocks.  */
a1682 1
	       && ISA_HAS_COPROC_DELAYS (mips_opts.isa)
d1685 2
a1686 2
		   || (mips_opts.isa == ISA_MIPS1
		       && (prev_pinfo & INSN_COPROC_MEMORY_DELAY))))
a1694 3
	     On the r6000 and r4000 loading a coprocessor register
	     from memory is interlocked, and does not require a delay.

a1737 1
	       && ISA_HAS_COPROC_DELAYS (mips_opts.isa)
d1786 2
a1787 2
	     Also the tx39's multiply instructions can be exectuted
             immediatly after a read from HI/LO (without the delay),
d1791 1
a1791 1
		 || (mips_tune == CPU_R3900 && (pinfo & INSN_MULT)))
d1813 1
a1813 1
		 || (mips_tune == CPU_R3900 && (pinfo & INSN_MULT)))
a1843 1
	   && ISA_HAS_COPROC_DELAYS (mips_opts.isa)
d1851 1
a1851 1
		    || (mips_tune == CPU_R3900 && (pinfo & INSN_MULT))))
d1855 1
a1855 1
		    || (mips_tune == CPU_R3900 && (pinfo & INSN_MULT)))))
d1866 1
a1866 1
      if (mips_fix_4122_bugs && prev_insn.insn_mo->name)
d1870 1
a1870 1
	     limited to the VR4122 instruction set.  */
d2004 5
a2008 2
  if (place == NULL
      && address_expr
d2020 1
a2048 2
  else if (place != NULL)
    f = place;
d2065 15
d2097 2
a2098 1
	      tmp = (address_expr->X_add_number + 0x800080008000) >> 16;
d2153 1
d2155 77
a2231 115
	need_reloc:
	  /* Don't generate a reloc if we are writing into a variant frag.  */
	  if (place == NULL)
	    {
	      fixp[0] = fix_new_exp (frag_now, f - frag_now->fr_literal, 4,
				     address_expr,
				     *reloc_type == BFD_RELOC_16_PCREL_S2,
				     reloc_type[0]);

	      /* These relocations can have an addend that won't fit in
	         4 octets for 64bit assembly.  */
	      if (HAVE_64BIT_GPRS &&
		  (*reloc_type == BFD_RELOC_16
		   || *reloc_type == BFD_RELOC_32
		   || *reloc_type == BFD_RELOC_MIPS_JMP
		   || *reloc_type == BFD_RELOC_HI16_S
		   || *reloc_type == BFD_RELOC_LO16
		   || *reloc_type == BFD_RELOC_GPREL16
		   || *reloc_type == BFD_RELOC_MIPS_LITERAL
		   || *reloc_type == BFD_RELOC_GPREL32
		   || *reloc_type == BFD_RELOC_64
		   || *reloc_type == BFD_RELOC_CTOR
		   || *reloc_type == BFD_RELOC_MIPS_SUB
		   || *reloc_type == BFD_RELOC_MIPS_HIGHEST
		   || *reloc_type == BFD_RELOC_MIPS_HIGHER
		   || *reloc_type == BFD_RELOC_MIPS_SCN_DISP
		   || *reloc_type == BFD_RELOC_MIPS_REL16
		   || *reloc_type == BFD_RELOC_MIPS_RELGOT))
		fixp[0]->fx_no_overflow = 1;

	      if (reloc_needs_lo_p (*reloc_type))
		{
		  struct mips_hi_fixup *hi_fixup;

		  /* Reuse the last entry if it already has a matching %lo.  */
		  hi_fixup = mips_hi_fixup_list;
		  if (hi_fixup == 0
		      || !fixup_has_matching_lo_p (hi_fixup->fixp))
		    {
		      hi_fixup = ((struct mips_hi_fixup *)
				  xmalloc (sizeof (struct mips_hi_fixup)));
		      hi_fixup->next = mips_hi_fixup_list;
		      mips_hi_fixup_list = hi_fixup;
		    }
		  hi_fixup->fixp = fixp[0];
		  hi_fixup->seg = now_seg;
		}

	      if (reloc_type[1] != BFD_RELOC_UNUSED)
		{
		  /* FIXME: This symbol can be one of
		     RSS_UNDEF, RSS_GP, RSS_GP0, RSS_LOC.  */
		  address_expr->X_op = O_absent;
		  address_expr->X_add_symbol = 0;
		  address_expr->X_add_number = 0;

		  fixp[1] = fix_new_exp (frag_now, f - frag_now->fr_literal,
					 4, address_expr, FALSE,
					 reloc_type[1]);

		  /* These relocations can have an addend that won't fit in
		     4 octets for 64bit assembly.  */
		  if (HAVE_64BIT_GPRS &&
		      (*reloc_type == BFD_RELOC_16
		       || *reloc_type == BFD_RELOC_32
		       || *reloc_type == BFD_RELOC_MIPS_JMP
		       || *reloc_type == BFD_RELOC_HI16_S
		       || *reloc_type == BFD_RELOC_LO16
		       || *reloc_type == BFD_RELOC_GPREL16
		       || *reloc_type == BFD_RELOC_MIPS_LITERAL
		       || *reloc_type == BFD_RELOC_GPREL32
		       || *reloc_type == BFD_RELOC_64
		       || *reloc_type == BFD_RELOC_CTOR
		       || *reloc_type == BFD_RELOC_MIPS_SUB
		       || *reloc_type == BFD_RELOC_MIPS_HIGHEST
		       || *reloc_type == BFD_RELOC_MIPS_HIGHER
		       || *reloc_type == BFD_RELOC_MIPS_SCN_DISP
		       || *reloc_type == BFD_RELOC_MIPS_REL16
		       || *reloc_type == BFD_RELOC_MIPS_RELGOT))
		    fixp[1]->fx_no_overflow = 1;

		  if (reloc_type[2] != BFD_RELOC_UNUSED)
		    {
		      address_expr->X_op = O_absent;
		      address_expr->X_add_symbol = 0;
		      address_expr->X_add_number = 0;

		      fixp[2] = fix_new_exp (frag_now,
					     f - frag_now->fr_literal, 4,
					     address_expr, FALSE,
					     reloc_type[2]);

		      /* These relocations can have an addend that won't fit in
			 4 octets for 64bit assembly.  */
		      if (HAVE_64BIT_GPRS &&
			  (*reloc_type == BFD_RELOC_16
			   || *reloc_type == BFD_RELOC_32
			   || *reloc_type == BFD_RELOC_MIPS_JMP
			   || *reloc_type == BFD_RELOC_HI16_S
			   || *reloc_type == BFD_RELOC_LO16
			   || *reloc_type == BFD_RELOC_GPREL16
			   || *reloc_type == BFD_RELOC_MIPS_LITERAL
			   || *reloc_type == BFD_RELOC_GPREL32
			   || *reloc_type == BFD_RELOC_64
			   || *reloc_type == BFD_RELOC_CTOR
			   || *reloc_type == BFD_RELOC_MIPS_SUB
			   || *reloc_type == BFD_RELOC_MIPS_HIGHEST
			   || *reloc_type == BFD_RELOC_MIPS_HIGHER
			   || *reloc_type == BFD_RELOC_MIPS_SCN_DISP
			   || *reloc_type == BFD_RELOC_MIPS_REL16
			   || *reloc_type == BFD_RELOC_MIPS_RELGOT))
			fixp[2]->fx_no_overflow = 1;
		    }
		}
	    }
d2319 1
a2319 1
  if (place == NULL && ! mips_opts.noreorder)
d2365 4
a2368 4
	      /* If the previous instruction is in a variant frag, we
		 can not do the swap.  This does not apply to the
		 mips16, which uses variant frags for different
		 purposes.  */
d2370 1
a2370 1
		  && prev_insn_frag->fr_type == rs_machine_dependent)
d2380 2
a2381 2
		  && ISA_HAS_COPROC_DELAYS (mips_opts.isa)
		  && (pinfo & INSN_READ_COND_CODE))
d2383 1
a2383 1
		 delay slot, becase the target of the branch might
a2385 1
		  && ISA_HAS_COPROC_DELAYS (mips_opts.isa)
d2390 2
a2391 1
			 | INSN_WRITE_COND_CODE)))
d2393 1
a2393 1
		     || (mips_tune == CPU_R3900 && (pinfo & INSN_MULT)))
d2398 2
a2399 2
		  && ! gpr_interlocks
		  && (prev_pinfo & INSN_LOAD_MEMORY_DELAY))
a2400 1
		  && mips_opts.isa == ISA_MIPS1
d2402 2
a2403 1
		  && (prev_pinfo & INSN_COPROC_MEMORY_DELAY))
a2505 1
		  && ISA_HAS_COPROC_DELAYS (mips_opts.isa)
d2507 5
a2511 4
		  && ((prev_prev_insn.insn_mo->pinfo & INSN_LOAD_COPROC_DELAY)
		      || (! gpr_interlocks
			  && (prev_prev_insn.insn_mo->pinfo
			      & INSN_LOAD_MEMORY_DELAY)))
d2555 23
a2577 3
		  memcpy (temp, prev_f, 4);
		  memcpy (prev_f, f, 4);
		  memcpy (f, temp, 4);
d2605 2
a2606 1
		  if (fixp[0])
d2608 15
a2622 2
		      fixp[0]->fx_frag = prev_insn_frag;
		      fixp[0]->fx_where = prev_insn_where;
d2624 1
a2624 1
		  if (fixp[1])
d2626 6
a2631 7
		      fixp[1]->fx_frag = prev_insn_frag;
		      fixp[1]->fx_where = prev_insn_where;
		    }
		  if (fixp[2])
		    {
		      fixp[2]->fx_frag = prev_insn_frag;
		      fixp[2]->fx_where = prev_insn_where;
d2743 1
a2743 1
  else if (place == NULL)
a2758 9

  /* We must ensure that the frag to which an instruction that was
     moved from a non-variant frag doesn't become a variant frag,
     otherwise tc_gen_reloc may get confused.  */
  if (force_new_frag)
    {
      frag_wane (frag_now);
      frag_new (0);
    }
d2766 1
a2766 2
mips_no_prev_insn (preserve)
     int preserve;
d2795 1
a2795 2
mips_emit_delays (insns)
     bfd_boolean insns;
d2803 5
a2807 6
	   && ISA_HAS_COPROC_DELAYS (mips_opts.isa)
	   && (! cop_interlocks
               && (prev_insn.insn_mo->pinfo
                   & (INSN_LOAD_COPROC_DELAY
                      | INSN_COPROC_MOVE_DELAY
                      | INSN_WRITE_COND_CODE))))
d2813 2
a2814 3
	      && ! gpr_interlocks
	      && (prev_insn.insn_mo->pinfo
                  & INSN_LOAD_MEMORY_DELAY))
d2816 2
a2817 3
	      && mips_opts.isa == ISA_MIPS1
	      && (prev_insn.insn_mo->pinfo
		  & INSN_COPROC_MEMORY_DELAY)))
d2822 2
a2823 3
	       && ISA_HAS_COPROC_DELAYS (mips_opts.isa)
	       && (! cop_interlocks
                   && prev_insn.insn_mo->pinfo & INSN_WRITE_COND_CODE))
d2833 2
a2834 3
		&& ISA_HAS_COPROC_DELAYS (mips_opts.isa)
		&& (! cop_interlocks
                    && prev_prev_insn.insn_mo->pinfo & INSN_WRITE_COND_CODE))
d2844 1
a2844 1
      if (mips_fix_4122_bugs && prev_insn.insn_mo->name)
d2906 65
a2975 1
#ifdef USE_STDARG
d2977 1
a2977 16
macro_build (char *place,
	     int *counter,
	     expressionS * ep,
	     const char *name,
	     const char *fmt,
	     ...)
#else
static void
macro_build (place, counter, ep, name, fmt, va_alist)
     char *place;
     int *counter;
     expressionS *ep;
     const char *name;
     const char *fmt;
     va_dcl
#endif
a2982 1
#ifdef USE_STDARG
a2983 26
#else
  va_start (args);
#endif

  /*
   * If the macro is about to expand into a second instruction,
   * print a warning if needed. We need to pass ip as a parameter
   * to generate a better warning message here...
   */
  if (mips_opts.warn_about_macros && place == NULL && *counter == 1)
    as_warn (_("Macro instruction expanded into multiple instructions"));

  /*
   * If the macro is about to expand into a second instruction,
   * and it is in a delay slot, print a warning.
   */
  if (place == NULL
      && *counter == 1
      && mips_opts.noreorder
      && (prev_prev_insn.insn_mo->pinfo
	  & (INSN_UNCOND_BRANCH_DELAY | INSN_COND_BRANCH_DELAY
	     | INSN_COND_BRANCH_LIKELY)) != 0)
    as_warn (_("Macro instruction expanded into multiple instructions in a branch delay slot"));

  if (place == NULL)
    ++*counter;		/* bump instruction counter */
d2987 1
a2987 1
      mips16_macro_build (place, counter, ep, name, fmt, args);
d3009 2
a3010 2
			       mips_arch)
	  && (mips_arch != CPU_R4650 || (insn.insn_mo->pinfo & FP_D) == 0))
d3031 35
d3201 1
a3201 1
  append_insn (place, &insn, ep, r);
d3205 2
a3206 7
mips16_macro_build (place, counter, ep, name, fmt, args)
     char *place;
     int *counter ATTRIBUTE_UNUSED;
     expressionS *ep;
     const char *name;
     const char *fmt;
     va_list args;
d3322 1
a3322 1
  append_insn (place, &insn, ep, r);
d3330 1
a3330 3
macro_build_jalr (icnt, ep)
     int icnt;
     expressionS *ep;
d3332 1
a3332 1
  char *f;
d3336 1
a3336 1
      frag_grow (4);
d3339 1
a3339 2
  macro_build ((char *) NULL, &icnt, (expressionS *) NULL, "jalr", "d,s",
	       RA, PIC_CALL_REG);
d3342 1
a3342 1
		 0, ep, FALSE, BFD_RELOC_MIPS_JALR);
d3349 1
a3349 5
macro_build_lui (place, counter, ep, regnum)
     char *place;
     int *counter;
     expressionS *ep;
     int regnum;
d3360 1
a3360 7
  if (place == NULL)
    high_expr = *ep;
  else
    {
      high_expr.X_op = O_constant;
      high_expr.X_add_number = ep->X_add_number;
    }
a3378 11
  /*
   * If the macro is about to expand into a second instruction,
   * print a warning if needed. We need to pass ip as a parameter
   * to generate a better warning message here...
   */
  if (mips_opts.warn_about_macros && place == NULL && *counter == 1)
    as_warn (_("Macro instruction expanded into multiple instructions"));

  if (place == NULL)
    ++*counter;		/* bump instruction counter */

d3388 1
a3388 1
      append_insn (place, &insn, NULL, r);
d3391 1
a3391 1
    append_insn (place, &insn, &high_expr, r);
d3398 2
a3399 6
macro_build_ldst_constoffset (place, counter, ep, op, treg, breg)
     char *place;
     int *counter;
     expressionS *ep;
     const char *op;
     int treg, breg;
d3403 13
a3415 2
  /* Right now, this routine can only handle signed 32-bit contants.  */
  if (! IS_SEXT_32BIT_NUM(ep->X_add_number))
d3421 1
a3421 2
      macro_build (place, counter, ep, op, "t,o(b)", treg,
		   (int) BFD_RELOC_LO16, breg);
d3430 3
a3432 11
      macro_build_lui (place, counter, ep, AT);
      if (place != NULL)
	place += 4;
      macro_build (place, counter, (expressionS *) NULL,
		   HAVE_32BIT_ADDRESSES ? HAVE_NEWABI
		   ? "add" : "addu" : "daddu",
		   "d,v,t", AT, AT, breg);
      if (place != NULL)
	place += 4;
      macro_build (place, counter, ep, op, "t,o(b)", treg,
		   (int) BFD_RELOC_LO16, AT);
d3444 1
a3444 4
set_at (counter, reg, unsignedp)
     int *counter;
     int reg;
     int unsignedp;
d3449 2
a3450 3
    macro_build ((char *) NULL, counter, &imm_expr,
		 unsignedp ? "sltiu" : "slti",
		 "t,r,j", AT, reg, (int) BFD_RELOC_LO16);
d3453 2
a3454 4
      load_register (counter, AT, &imm_expr, HAVE_64BIT_GPRS);
      macro_build ((char *) NULL, counter, (expressionS *) NULL,
		   unsignedp ? "sltu" : "slt",
		   "d,v,t", AT, reg, AT);
d3458 8
d3469 1
a3469 3
check_absolute_expr (ip, ex)
     struct mips_cl_insn *ip;
     expressionS *ex;
d3475 2
d3556 1
a3556 1
 *  This routine generates the least number of instructions neccessary to load
d3560 1
a3560 5
load_register (counter, reg, ep, dbl)
     int *counter;
     int reg;
     expressionS *ep;
     int dbl;
d3568 13
a3580 6
      if (ep->X_add_number < 0x8000
	  && (ep->X_add_number >= 0
	      || (ep->X_add_number >= -0x8000
		  && (! dbl
		      || ! ep->X_unsigned
		      || sizeof (ep->X_add_number) > 4))))
d3585 1
a3585 2
	  macro_build ((char *) NULL, counter, ep, "addiu", "t,r,j", reg, 0,
		       (int) BFD_RELOC_LO16);
d3592 1
a3592 2
	  macro_build ((char *) NULL, counter, ep, "ori", "t,r,i", reg, 0,
		       (int) BFD_RELOC_LO16);
d3595 1
a3595 11
      else if ((IS_SEXT_32BIT_NUM (ep->X_add_number)
		&& (! dbl
		    || ! ep->X_unsigned
		    || sizeof (ep->X_add_number) > 4
		    || (ep->X_add_number & 0x80000000) == 0))
	       || ((HAVE_32BIT_GPRS || ! dbl)
		   && (ep->X_add_number &~ (offsetT) 0xffffffff) == 0)
	       || (HAVE_32BIT_GPRS
		   && ! dbl
		   && ((ep->X_add_number &~ (offsetT) 0xffffffff)
		       == ~ (offsetT) 0xffffffff)))
d3598 1
a3598 2
	  macro_build ((char *) NULL, counter, ep, "lui", "t,u", reg,
		       (int) BFD_RELOC_HI16);
d3600 1
a3600 2
	    macro_build ((char *) NULL, counter, ep, "ori", "t,r,i", reg, reg,
			 (int) BFD_RELOC_LO16);
d3611 1
a3611 2
      macro_build ((char *) NULL, counter, ep, "addiu", "t,r,j", reg, 0,
		   (int) BFD_RELOC_LO16);
d3648 1
a3648 2
	      macro_build ((char *) NULL, counter, &lo32, "addiu", "t,r,j",
			   reg, 0, (int) BFD_RELOC_LO16);
d3653 1
a3653 2
	      macro_build ((char *) NULL, counter, &lo32, "lui", "t,u", reg,
			   (int) BFD_RELOC_HI16);
d3655 1
a3655 2
		macro_build ((char *) NULL, counter, &lo32, "ori", "t,r,i",
			     reg, reg, (int) BFD_RELOC_LO16);
d3689 3
a3691 7
	      macro_build ((char *) NULL, counter, &tmp,
			   "ori", "t,r,i", reg, 0,
			   (int) BFD_RELOC_LO16);
	      macro_build ((char *) NULL, counter, (expressionS *) NULL,
			   (shift >= 32) ? "dsll32" : "dsll",
			   "d,w,<", reg, reg,
			   (shift >= 32) ? shift - 32 : shift);
d3738 1
a3738 2
	      macro_build ((char *) NULL, counter, &tmp, "addiu", "t,r,j",
			   reg, 0, (int) BFD_RELOC_LO16);
d3742 5
a3746 9
		  macro_build ((char *) NULL, counter, (expressionS *) NULL,
			       (bit >= 32) ? "dsll32" : "dsll",
			       "d,w,<", reg, reg,
			       (bit >= 32) ? bit - 32 : bit);
		}
	      macro_build ((char *) NULL, counter, (expressionS *) NULL,
			   (shift >= 32) ? "dsrl32" : "dsrl",
			   "d,w,<", reg, reg,
			   (shift >= 32) ? shift - 32 : shift);
d3755 1
a3755 1
      load_register (counter, reg, &hi32, 0);
d3762 1
a3762 2
	  macro_build ((char *) NULL, counter, (expressionS *) NULL,
		       "dsll32", "d,w,<", reg, freg, 0);
d3772 2
a3773 4
	  macro_build ((char *) NULL, counter, &lo32, "lui", "t,u", reg,
		       (int) BFD_RELOC_HI16);
	  macro_build ((char *) NULL, counter, (expressionS *) NULL,
		       "dsrl32", "d,w,<", reg, reg, 0);
d3779 1
a3779 2
	  macro_build ((char *) NULL, counter, (expressionS *) NULL, "dsll",
		       "d,w,<", reg, freg, 16);
d3784 2
a3785 4
      macro_build ((char *) NULL, counter, &mid16, "ori", "t,r,i", reg,
		   freg, (int) BFD_RELOC_LO16);
      macro_build ((char *) NULL, counter, (expressionS *) NULL, "dsll",
		   "d,w,<", reg, reg, 16);
d3789 1
a3789 2
    macro_build ((char *) NULL, counter, &lo32, "ori", "t,r,i", reg, freg,
		 (int) BFD_RELOC_LO16);
d3795 1
a3795 5
load_address (counter, reg, ep, used_at)
     int *counter;
     int reg;
     expressionS *ep;
     int *used_at;
a3796 2
  char *p = NULL;

d3806 1
a3806 1
      load_register (counter, reg, ep, HAVE_64BIT_ADDRESSES);
d3838 3
a3840 2
	  /* We don't do GP optimization for now because RELAX_ENCODE can't
	     hold the data for such large chunks.  */
d3844 7
a3850 12
	      macro_build (p, counter, ep, "lui", "t,u",
			   reg, (int) BFD_RELOC_MIPS_HIGHEST);
	      macro_build (p, counter, ep, "lui", "t,u",
			   AT, (int) BFD_RELOC_HI16_S);
	      macro_build (p, counter, ep, "daddiu", "t,r,j",
			   reg, reg, (int) BFD_RELOC_MIPS_HIGHER);
	      macro_build (p, counter, ep, "daddiu", "t,r,j",
			   AT, AT, (int) BFD_RELOC_LO16);
	      macro_build (p, counter, (expressionS *) NULL, "dsll32",
			   "d,w,<", reg, reg, 0);
	      macro_build (p, counter, (expressionS *) NULL, "daddu",
			   "d,v,t", reg, reg, AT);
d3855 7
a3861 12
	      macro_build (p, counter, ep, "lui", "t,u",
			   reg, (int) BFD_RELOC_MIPS_HIGHEST);
	      macro_build (p, counter, ep, "daddiu", "t,r,j",
			   reg, reg, (int) BFD_RELOC_MIPS_HIGHER);
	      macro_build (p, counter, (expressionS *) NULL, "dsll",
			   "d,w,<", reg, reg, 16);
	      macro_build (p, counter, ep, "daddiu", "t,r,j",
			   reg, reg, (int) BFD_RELOC_HI16_S);
	      macro_build (p, counter, (expressionS *) NULL, "dsll",
			   "d,w,<", reg, reg, 16);
	      macro_build (p, counter, ep, "daddiu", "t,r,j",
			   reg, reg, (int) BFD_RELOC_LO16);
d3869 10
a3878 17
	      frag_grow (20);
	      macro_build ((char *) NULL, counter, ep,
			   HAVE_32BIT_ADDRESSES ? HAVE_NEWABI
			   ? "addi" : "addiu" : "daddiu", "t,r,j",
			   reg, mips_gp_register, (int) BFD_RELOC_GPREL16);
	      p = frag_var (rs_machine_dependent, 8, 0,
			    RELAX_ENCODE (4, 8, 0, 4, 0,
					  mips_opts.warn_about_macros),
			    ep->X_add_symbol, 0, NULL);
	    }
	  macro_build_lui (p, counter, ep, reg);
	  if (p != NULL)
	    p += 4;
	  macro_build (p, counter, ep,
		       HAVE_32BIT_ADDRESSES ? HAVE_NEWABI
		       ? "addi" : "addiu" : "daddiu",
		       "t,r,j", reg, reg, (int) BFD_RELOC_LO16);
a3898 2
	  frag_grow (12);

d3901 1
a3901 2
	      frag_now->tc_frag_data.tc_fr_offset =
		ex.X_add_number = ep->X_add_number;
d3903 3
a3905 3
	      macro_build ((char *) NULL, counter, ep,
			   HAVE_32BIT_ADDRESSES ? "lw" : "ld", "t,o(b)", reg,
			   (int) BFD_RELOC_MIPS_GOT_DISP, mips_gp_register);
d3909 2
a3910 7
	      macro_build ((char *) NULL, counter, &ex,
			   HAVE_32BIT_ADDRESSES ? "addi" : "daddiu",
			   "t,r,j", reg, reg, (int) BFD_RELOC_LO16);
	      p = frag_var (rs_machine_dependent, 8, 0,
			    RELAX_ENCODE (8, 4, 0, 0, 0,
					  mips_opts.warn_about_macros),
			    ep->X_add_symbol, 0, (char *) NULL);
d3912 1
d3914 4
a3917 12

	  macro_build (p, counter, ep,
		       HAVE_32BIT_ADDRESSES ? "lw" : "ld", "t,o(b)", reg,
		       (int) BFD_RELOC_MIPS_GOT_DISP, mips_gp_register);

	  if (! p)
	    {
	      /* To avoid confusion in tc_gen_reloc, we must ensure
		 that this does not become a variant frag.  */
	      frag_wane (frag_now);
	      frag_new (0);
	    }
d3923 8
a3930 11
	  frag_grow (20);
	  macro_build ((char *) NULL, counter, ep,
		       HAVE_32BIT_ADDRESSES ? "lw" : "ld", "t,o(b)",
		       reg, (int) BFD_RELOC_MIPS_GOT16, mips_gp_register);
	  macro_build ((char *) NULL, counter, (expressionS *) NULL, "nop", "");
	  p = frag_var (rs_machine_dependent, 4, 0,
			RELAX_ENCODE (0, 4, -8, 0, 0, mips_opts.warn_about_macros),
			ep->X_add_symbol, (offsetT) 0, (char *) NULL);
	  macro_build (p, counter, ep,
		       HAVE_32BIT_ADDRESSES ? "addiu" : "daddiu",
		       "t,r,j", reg, reg, (int) BFD_RELOC_LO16);
d3937 2
a3938 3
	      macro_build ((char *) NULL, counter, &ex,
			   HAVE_32BIT_ADDRESSES ? "addiu" : "daddiu",
			   "t,r,j", reg, reg, (int) BFD_RELOC_LO16);
a3944 1
      int off;
d3964 1
a3964 4
	  frag_grow (24);

	  frag_now->tc_frag_data.tc_fr_offset =
	    ex.X_add_number = ep->X_add_number;
d3966 6
a3971 8
	  macro_build ((char *) NULL, counter, ep, "lui", "t,u", reg,
		       (int) BFD_RELOC_MIPS_GOT_HI16);
	  macro_build ((char *) NULL, counter, (expressionS *) NULL,
		       HAVE_32BIT_ADDRESSES ? "add" : "daddu", "d,v,t", reg,
		       reg, mips_gp_register);
	  macro_build ((char *) NULL, counter, ep,
		       HAVE_32BIT_ADDRESSES ? "lw" : "ld",
		       "t,o(b)", reg, (int) BFD_RELOC_MIPS_GOT_LO16, reg);
d3977 2
a3978 3
	      macro_build ((char *) NULL, counter, &ex,
			   HAVE_32BIT_ADDRESSES ? "addi" : "daddiu",
			   "t,r,j", reg, reg, (int) BFD_RELOC_LO16);
d3982 6
a3987 10
	  p = frag_var (rs_machine_dependent, 8, 0,
			RELAX_ENCODE (ex.X_add_number ? 16 : 12, 8, 0, 4, 0,
				      mips_opts.warn_about_macros),
			ep->X_add_symbol, 0, (char *) NULL);
	  macro_build (p, counter, ep,
		       HAVE_32BIT_ADDRESSES ? "lw" : "ld", "t,o(b)", reg,
		       (int) BFD_RELOC_MIPS_GOT_PAGE, mips_gp_register);
	  macro_build (p + 4, counter, ep,
		       HAVE_32BIT_ADDRESSES ? "addi" : "daddiu", "t,r,j",
		       reg, reg, (int) BFD_RELOC_MIPS_GOT_OFST);
d3993 7
a4000 17
	    off = 4;
	  else
	    off = 0;
	  frag_grow (32);
	  macro_build ((char *) NULL, counter, ep, "lui", "t,u", reg,
		       (int) BFD_RELOC_MIPS_GOT_HI16);
	  macro_build ((char *) NULL, counter, (expressionS *) NULL,
		       HAVE_32BIT_ADDRESSES ? "addu" : "daddu", "d,v,t", reg,
		       reg, mips_gp_register);
	  macro_build ((char *) NULL, counter, ep,
		       HAVE_32BIT_ADDRESSES ? "lw" : "ld",
		       "t,o(b)", reg, (int) BFD_RELOC_MIPS_GOT_LO16, reg);
	  p = frag_var (rs_machine_dependent, 12 + off, 0,
			RELAX_ENCODE (12, 12 + off, off, 8 + off, 0,
				      mips_opts.warn_about_macros),
			ep->X_add_symbol, 0, NULL);
	  if (off > 0)
d4006 1
a4006 2
	      macro_build (p, counter, (expressionS *) NULL, "nop", "");
		p += 4;
d4008 6
a4013 9
	  macro_build (p, counter, ep,
		       HAVE_32BIT_ADDRESSES ? "lw" : "ld", "t,o(b)", reg,
		       (int) BFD_RELOC_MIPS_GOT16, mips_gp_register);
	  p += 4;
	  macro_build (p, counter, (expressionS *) NULL, "nop", "");
	  p += 4;
	  macro_build (p, counter, ep,
		       HAVE_32BIT_ADDRESSES ? "addiu" : "daddiu",
		       "t,r,j", reg, reg, (int) BFD_RELOC_LO16);
d4020 2
a4021 3
	      macro_build ((char *) NULL, counter, &ex,
			   HAVE_32BIT_ADDRESSES ? "addiu" : "daddiu",
			   "t,r,j", reg, reg, (int) BFD_RELOC_LO16);
d4030 2
a4031 3
      macro_build ((char *) NULL, counter, ep,
		   HAVE_32BIT_ADDRESSES ? "addiu" : "daddiu",
		   "t,r,j", reg, mips_gp_register, (int) BFD_RELOC_GPREL16);
d4040 79
a4118 8
move_register (counter, dest, source)
     int *counter;
     int dest;
     int source;
{
  macro_build ((char *) NULL, counter, (expressionS *) NULL,
	       HAVE_32BIT_GPRS ? "addu" : "daddu",
	       "d,v,t", dest, source, 0);
d4126 1
a4126 1
 * probably be handled by some kind of table or grammer aproach instead of
d4130 1
a4130 1
 * consecutivly that would load AT with the upper half of the same address.
d4140 1
a4140 2
macro (ip)
     struct mips_cl_insn *ip;
a4144 1
  int icnt = 0;
d4155 2
a4157 1
  int off;
a4172 24
  /* Umatched fixups should not be put in the same frag as a relaxable
     macro.  For example, suppose we have:

	lui $4,%hi(l1)		# 1
	la $5,l2		# 2
	addiu $4,$4,%lo(l1)	# 3

     If instructions 1 and 2 were put in the same frag, md_frob_file would
     move the fixup for #1 after the fixups for the "unrelaxed" version of
     #2.  This would confuse tc_gen_reloc, which expects the relocations
     for #2 to be the last for that frag.

     Also, if tc_gen_reloc sees certain relocations in a variant frag,
     it assumes that they belong to a relaxable macro.  We mustn't put
     other uses of such relocations into a variant frag.

     To avoid both problems, finish the current frag it contains a
     %reloc() operator.  The macro then goes into a new frag.  */
  if (prev_reloc_op_frag == frag_now)
    {
      frag_wane (frag_now);
      frag_new (0);
    }

d4188 1
a4188 1
      macro_build ((char *) NULL, &icnt, &expr1, "bgez", "s,p", sreg);
d4190 1
a4190 2
	macro_build ((char *) NULL, &icnt, (expressionS *) NULL, "nop", "",
		     0);
d4192 2
a4193 3
	move_register (&icnt, dreg, sreg);
      macro_build ((char *) NULL, &icnt, (expressionS *) NULL,
		   dbl ? "dsub" : "sub", "d,v,t", dreg, 0, sreg);
d4220 1
a4220 2
	  macro_build ((char *) NULL, &icnt, &imm_expr, s, "t,r,j", treg, sreg,
		       (int) BFD_RELOC_LO16);
d4223 2
a4224 3
      load_register (&icnt, AT, &imm_expr, dbl);
      macro_build ((char *) NULL, &icnt, (expressionS *) NULL, s2, "d,v,t",
		   treg, sreg, AT);
d4248 1
a4248 2
	    macro_build ((char *) NULL, &icnt, &imm_expr, s, "t,r,i", treg,
			 sreg, (int) BFD_RELOC_LO16);
d4251 3
a4253 4
	      macro_build ((char *) NULL, &icnt, &imm_expr, "ori", "t,r,i",
			   treg, sreg, (int) BFD_RELOC_LO16);
	      macro_build ((char *) NULL, &icnt, (expressionS *) NULL, "nor",
			   "d,v,t", treg, treg, 0);
d4258 2
a4259 3
      load_register (&icnt, AT, &imm_expr, HAVE_64BIT_GPRS);
      macro_build ((char *) NULL, &icnt, (expressionS *) NULL, s2, "d,v,t",
		   treg, sreg, AT);
d4278 1
a4278 2
	  macro_build ((char *) NULL, &icnt, &offset_expr, s, "s,t,p", sreg,
		       0);
d4281 2
a4282 2
      load_register (&icnt, AT, &imm_expr, HAVE_64BIT_GPRS);
      macro_build ((char *) NULL, &icnt, &offset_expr, s, "s,t,p", sreg, AT);
d4290 1
a4290 2
	  macro_build ((char *) NULL, &icnt, &offset_expr,
		       likely ? "bgezl" : "bgez", "s,p", sreg);
d4295 1
a4295 2
	  macro_build ((char *) NULL, &icnt, &offset_expr,
		       likely ? "blezl" : "blez", "s,p", treg);
d4298 2
a4299 4
      macro_build ((char *) NULL, &icnt, (expressionS *) NULL, "slt", "d,v,t",
		   AT, sreg, treg);
      macro_build ((char *) NULL, &icnt, &offset_expr,
		   likely ? "beql" : "beq", "s,t,p", AT, 0);
d4321 1
a4321 7
	    {
	      if (warn_nops)
		as_warn (_("Branch %s is always false (nop)"),
			 ip->insn_mo->name);
	      macro_build ((char *) NULL, &icnt, (expressionS *) NULL, "nop",
			   "", 0);
	    }
d4323 1
a4323 7
	    {
	      if (warn_nops)
		as_warn (_("Branch likely %s is always false"),
			 ip->insn_mo->name);
	      macro_build ((char *) NULL, &icnt, &offset_expr, "bnel",
			   "s,t,p", 0, 0);
	    }
d4336 1
a4336 2
	  macro_build ((char *) NULL, &icnt, &offset_expr,
		       likely ? "bgezl" : "bgez", "s,p", sreg);
d4341 1
a4341 2
	  macro_build ((char *) NULL, &icnt, &offset_expr,
		       likely ? "bgtzl" : "bgtz", "s,p", sreg);
d4360 1
a4360 1
	  macro_build ((char *) NULL, &icnt, &offset_expr, "b", "p");
d4363 2
a4364 3
      set_at (&icnt, sreg, 0);
      macro_build ((char *) NULL, &icnt, &offset_expr,
		   likely ? "beql" : "beq", "s,t,p", AT, 0);
d4374 2
a4375 2
	  macro_build ((char *) NULL, &icnt, &offset_expr,
		       likely ? "beql" : "beq", "s,t,p", 0, treg);
d4378 2
a4379 4
      macro_build ((char *) NULL, &icnt, (expressionS *) NULL, "sltu",
		   "d,v,t", AT, sreg, treg);
      macro_build ((char *) NULL, &icnt, &offset_expr,
		   likely ? "beql" : "beq", "s,t,p", AT, 0);
d4402 2
a4403 2
	  macro_build ((char *) NULL, &icnt, &offset_expr,
		       likely ? "bnel" : "bne", "s,t,p", sreg, 0);
d4406 2
a4407 3
      set_at (&icnt, sreg, 1);
      macro_build ((char *) NULL, &icnt, &offset_expr,
		   likely ? "beql" : "beq", "s,t,p", AT, 0);
d4415 1
a4415 2
	  macro_build ((char *) NULL, &icnt, &offset_expr,
		       likely ? "bgtzl" : "bgtz", "s,p", sreg);
d4420 1
a4420 2
	  macro_build ((char *) NULL, &icnt, &offset_expr,
		       likely ? "bltzl" : "bltz", "s,p", treg);
d4423 2
a4424 4
      macro_build ((char *) NULL, &icnt, (expressionS *) NULL, "slt", "d,v,t",
		   AT, treg, sreg);
      macro_build ((char *) NULL, &icnt, &offset_expr,
		   likely ? "bnel" : "bne", "s,t,p", AT, 0);
d4432 2
a4433 2
	  macro_build ((char *) NULL, &icnt, &offset_expr,
		       likely ? "bnel" : "bne", "s,t,p", sreg, 0);
d4438 2
a4439 4
      macro_build ((char *) NULL, &icnt, (expressionS *) NULL, "sltu",
		   "d,v,t", AT, treg, sreg);
      macro_build ((char *) NULL, &icnt, &offset_expr,
		   likely ? "bnel" : "bne", "s,t,p", AT, 0);
d4447 1
a4447 2
	  macro_build ((char *) NULL, &icnt, &offset_expr,
		       likely ? "blezl" : "blez", "s,p", sreg);
d4452 1
a4452 2
	  macro_build ((char *) NULL, &icnt, &offset_expr,
		       likely ? "bgezl" : "bgez", "s,p", treg);
d4455 2
a4456 4
      macro_build ((char *) NULL, &icnt, (expressionS *) NULL, "slt", "d,v,t",
		   AT, treg, sreg);
      macro_build ((char *) NULL, &icnt, &offset_expr,
		   likely ? "beql" : "beq", "s,t,p", AT, 0);
d4484 1
a4484 2
	  macro_build ((char *) NULL, &icnt, &offset_expr,
		       likely ? "bltzl" : "bltz", "s,p", sreg);
d4489 1
a4489 2
	  macro_build ((char *) NULL, &icnt, &offset_expr,
		       likely ? "blezl" : "blez", "s,p", sreg);
d4492 2
a4493 3
      set_at (&icnt, sreg, 0);
      macro_build ((char *) NULL, &icnt, &offset_expr,
		   likely ? "bnel" : "bne", "s,t,p", AT, 0);
d4501 2
a4502 2
	  macro_build ((char *) NULL, &icnt, &offset_expr,
		       likely ? "beql" : "beq", "s,t,p", sreg, 0);
d4507 2
a4508 4
      macro_build ((char *) NULL, &icnt, (expressionS *) NULL, "sltu",
		   "d,v,t", AT, treg, sreg);
      macro_build ((char *) NULL, &icnt, &offset_expr,
		   likely ? "beql" : "beq", "s,t,p", AT, 0);
d4531 1
a4531 2
	  macro_build ((char *) NULL, &icnt, &offset_expr,
		       likely ? "beql" : "beq",
d4535 2
a4536 3
      set_at (&icnt, sreg, 1);
      macro_build ((char *) NULL, &icnt, &offset_expr,
		   likely ? "bnel" : "bne", "s,t,p", AT, 0);
d4544 1
a4544 2
	  macro_build ((char *) NULL, &icnt, &offset_expr,
		       likely ? "bltzl" : "bltz", "s,p", sreg);
d4549 1
a4549 2
	  macro_build ((char *) NULL, &icnt, &offset_expr,
		       likely ? "bgtzl" : "bgtz", "s,p", treg);
d4552 2
a4553 4
      macro_build ((char *) NULL, &icnt, (expressionS *) NULL, "slt", "d,v,t",
		   AT, sreg, treg);
      macro_build ((char *) NULL, &icnt, &offset_expr,
		   likely ? "bnel" : "bne", "s,t,p", AT, 0);
d4563 2
a4564 2
	  macro_build ((char *) NULL, &icnt, &offset_expr,
		       likely ? "bnel" : "bne", "s,t,p", 0, treg);
d4567 2
a4568 5
      macro_build ((char *) NULL, &icnt, (expressionS *) NULL, "sltu",
		   "d,v,t", AT, sreg,
		   treg);
      macro_build ((char *) NULL, &icnt, &offset_expr,
		   likely ? "bnel" : "bne", "s,t,p", AT, 0);
d4571 97
d4682 1
a4682 2
	    macro_build ((char *) NULL, &icnt, (expressionS *) NULL, "teq",
			 "s,t,q", 0, 0, 7);
d4684 1
a4684 2
	    macro_build ((char *) NULL, &icnt, (expressionS *) NULL, "break",
			 "c", 7);
d4693 2
a4694 4
	  macro_build ((char *) NULL, &icnt, (expressionS *) NULL, "teq",
		       "s,t,q", treg, 0, 7);
	  macro_build ((char *) NULL, &icnt, (expressionS *) NULL,
		       dbl ? "ddiv" : "div", "z,s,t", sreg, treg);
d4699 3
a4701 5
	  macro_build ((char *) NULL, &icnt, &expr1, "bne", "s,t,p", treg, 0);
	  macro_build ((char *) NULL, &icnt, (expressionS *) NULL,
		       dbl ? "ddiv" : "div", "z,s,t", sreg, treg);
	  macro_build ((char *) NULL, &icnt, (expressionS *) NULL, "break",
		       "c", 7);
d4704 1
a4704 3
      macro_build ((char *) NULL, &icnt, &expr1,
		   dbl ? "daddiu" : "addiu",
		   "t,r,j", AT, 0, (int) BFD_RELOC_LO16);
d4706 1
a4706 1
      macro_build ((char *) NULL, &icnt, &expr1, "bne", "s,t,p", treg, AT);
d4710 2
a4711 4
	  macro_build ((char *) NULL, &icnt, &expr1, "daddiu", "t,r,j", AT, 0,
		       (int) BFD_RELOC_LO16);
	  macro_build ((char *) NULL, &icnt, (expressionS *) NULL, "dsll32",
		       "d,w,<", AT, AT, 31);
d4716 1
a4716 2
	  macro_build ((char *) NULL, &icnt, &expr1, "lui", "t,u", AT,
		       (int) BFD_RELOC_HI16);
d4720 1
a4720 2
	  macro_build ((char *) NULL, &icnt, (expressionS *) NULL, "teq",
		       "s,t,q", sreg, AT, 6);
d4728 2
a4729 3
	  macro_build ((char *) NULL, &icnt, &expr1, "bne", "s,t,p", sreg, AT);
	  macro_build ((char *) NULL, &icnt, (expressionS *) NULL, "nop", "",
		       0);
d4735 1
a4735 2
	  macro_build ((char *) NULL, &icnt, (expressionS *) NULL, "break",
		       "c", 6);
d4737 1
a4737 1
      macro_build ((char *) NULL, &icnt, (expressionS *) NULL, s, "d", dreg);
d4780 1
a4780 2
	    macro_build ((char *) NULL, &icnt, (expressionS *) NULL, "teq",
			 "s,t,q", 0, 0, 7);
d4782 1
a4782 2
	    macro_build ((char *) NULL, &icnt, (expressionS *) NULL, "break",
			 "c", 7);
d4788 1
a4788 1
	    move_register (&icnt, dreg, sreg);
d4790 1
a4790 1
	    move_register (&icnt, dreg, 0);
d4799 1
a4799 2
	      macro_build ((char *) NULL, &icnt, (expressionS *) NULL,
			   dbl ? "dneg" : "neg", "d,w", dreg, sreg);
d4802 1
a4802 1
	    move_register (&icnt, dreg, 0);
d4806 3
a4808 4
      load_register (&icnt, AT, &imm_expr, dbl);
      macro_build ((char *) NULL, &icnt, (expressionS *) NULL, s, "z,s,t",
		   sreg, AT);
      macro_build ((char *) NULL, &icnt, (expressionS *) NULL, s2, "d", dreg);
d4832 2
a4833 4
	  macro_build ((char *) NULL, &icnt, (expressionS *) NULL, "teq",
		       "s,t,q", treg, 0, 7);
	  macro_build ((char *) NULL, &icnt, (expressionS *) NULL, s, "z,s,t",
		       sreg, treg);
d4841 2
a4842 3
	  macro_build ((char *) NULL, &icnt, &expr1, "bne", "s,t,p", treg, 0);
	  macro_build ((char *) NULL, &icnt, (expressionS *) NULL, s, "z,s,t",
		       sreg, treg);
d4847 1
a4847 2
	  macro_build ((char *) NULL, &icnt, (expressionS *) NULL, "break",
		       "c", 7);
d4849 1
a4849 1
      macro_build ((char *) NULL, &icnt, (expressionS *) NULL, s2, "d", dreg);
d4852 5
d4860 1
d4874 3
a4876 4
	  macro_build ((char *) NULL, &icnt, &offset_expr,
		       (dbl || HAVE_64BIT_ADDRESSES) ? "daddiu" :
		       HAVE_NEWABI ? "addi" : "addiu",
		       "t,r,j", treg, sreg, (int) BFD_RELOC_LO16);
d4916 2
a4917 2
	      macro_build ((char *) NULL, &icnt, &offset_expr, "lui", "t,u",
			   tempreg, (int) BFD_RELOC_PCREL_HI16_S);
d4921 3
a4923 3
	      macro_build ((char *) NULL, &icnt, &offset_expr, "lui", "t,u",
			   tempreg, (int) BFD_RELOC_PCREL_HI16_S);
	      macro_build ((char *) NULL, &icnt, (expressionS *) NULL,
d4927 1
a4927 1
	  macro_build ((char *) NULL, &icnt, &offset_expr,
d4929 1
a4929 1
		       "t,r,j", treg, tempreg, (int) BFD_RELOC_PCREL_LO16);
d4943 1
a4943 1
	load_register (&icnt, tempreg, &offset_expr,
a4973 1
	  char *p = NULL;
d4976 3
a4978 2
	      /* We don't do GP optimization for now because RELAX_ENCODE can't
		 hold the data for such large chunks.  */
d4982 10
a4991 12
		  macro_build (p, &icnt, &offset_expr, "lui", "t,u",
			       tempreg, (int) BFD_RELOC_MIPS_HIGHEST);
		  macro_build (p, &icnt, &offset_expr, "lui", "t,u",
			       AT, (int) BFD_RELOC_HI16_S);
		  macro_build (p, &icnt, &offset_expr, "daddiu", "t,r,j",
			       tempreg, tempreg, (int) BFD_RELOC_MIPS_HIGHER);
		  macro_build (p, &icnt, &offset_expr, "daddiu", "t,r,j",
			       AT, AT, (int) BFD_RELOC_LO16);
		  macro_build (p, &icnt, (expressionS *) NULL, "dsll32",
			       "d,w,<", tempreg, tempreg, 0);
		  macro_build (p, &icnt, (expressionS *) NULL, "daddu",
			       "d,v,t", tempreg, tempreg, AT);
d4996 10
a5005 12
		  macro_build (p, &icnt, &offset_expr, "lui", "t,u",
			       tempreg, (int) BFD_RELOC_MIPS_HIGHEST);
		  macro_build (p, &icnt, &offset_expr, "daddiu", "t,r,j",
			       tempreg, tempreg, (int) BFD_RELOC_MIPS_HIGHER);
		  macro_build (p, &icnt, (expressionS *) NULL, "dsll", "d,w,<",
			       tempreg, tempreg, 16);
		  macro_build (p, &icnt, &offset_expr, "daddiu", "t,r,j",
			       tempreg, tempreg, (int) BFD_RELOC_HI16_S);
		  macro_build (p, &icnt, (expressionS *) NULL, "dsll", "d,w,<",
			       tempreg, tempreg, 16);
		  macro_build (p, &icnt, &offset_expr, "daddiu", "t,r,j",
			       tempreg, tempreg, (int) BFD_RELOC_LO16);
d5013 10
a5022 16
		  frag_grow (20);
		  macro_build ((char *) NULL, &icnt, &offset_expr,
			       HAVE_NEWABI ? "addi" : "addiu",
			       "t,r,j", tempreg, mips_gp_register,
			       (int) BFD_RELOC_GPREL16);
		  p = frag_var (rs_machine_dependent, 8, 0,
				RELAX_ENCODE (4, 8, 0, 4, 0,
					      mips_opts.warn_about_macros),
				offset_expr.X_add_symbol, 0, NULL);
		}
	      macro_build_lui (p, &icnt, &offset_expr, tempreg);
	      if (p != NULL)
		p += 4;
	      macro_build (p, &icnt, &offset_expr,
			   HAVE_NEWABI ? "addi" : "addiu",
			   "t,r,j", tempreg, tempreg, (int) BFD_RELOC_LO16);
d5032 1
a5032 1
	     or if tempreg is PIC_CALL_REG
d5059 1
a5059 9
	  expr1.X_add_number = offset_expr.X_add_number;
	  offset_expr.X_add_number = 0;
	  frag_grow (32);
	  if (expr1.X_add_number == 0 && tempreg == PIC_CALL_REG)
	    lw_reloc_type = (int) BFD_RELOC_MIPS_CALL16;
	  macro_build ((char *) NULL, &icnt, &offset_expr,
		       HAVE_32BIT_ADDRESSES ? "lw" : "ld",
		       "t,o(b)", tempreg, lw_reloc_type, mips_gp_register);
	  if (expr1.X_add_number == 0)
d5061 2
a5062 2
	      int off;
	      char *p;
d5064 4
a5067 3
	      if (breg == 0)
		off = 0;
	      else
d5072 1
a5072 14
		  macro_build ((char *) NULL, &icnt, (expressionS *) NULL,
			       "nop", "");
		  off = 4;
		}
	      p = frag_var (rs_machine_dependent, 8 - off, 0,
			    RELAX_ENCODE (0, 8 - off, -4 - off, 4 - off, 0,
					  (breg == 0
					   ? mips_opts.warn_about_macros
					   : 0)),
			    offset_expr.X_add_symbol, 0, NULL);
	      if (breg == 0)
		{
		  macro_build (p, &icnt, (expressionS *) NULL, "nop", "");
		  p += 4;
d5074 7
a5080 3
	      macro_build (p, &icnt, &expr1,
			   HAVE_32BIT_ADDRESSES ? "addiu" : "daddiu",
			   "t,r,j", tempreg, tempreg, (int) BFD_RELOC_LO16);
d5085 2
a5086 2
	  else if (expr1.X_add_number >= -0x8000
		   && expr1.X_add_number < 0x8000)
d5088 3
a5090 8
	      macro_build ((char *) NULL, &icnt, (expressionS *) NULL,
			   "nop", "");
	      macro_build ((char *) NULL, &icnt, &expr1,
			   HAVE_32BIT_ADDRESSES ? "addiu" : "daddiu",
			   "t,r,j", tempreg, tempreg, (int) BFD_RELOC_LO16);
	      frag_var (rs_machine_dependent, 0, 0,
			RELAX_ENCODE (0, 0, -12, -4, 0, 0),
			offset_expr.X_add_symbol, 0, NULL);
d5094 5
a5098 2
	      int off1;

d5106 1
a5106 3
	      if (breg != treg)
		off1 = 0;
	      else
d5108 3
a5110 5
		  macro_build ((char *) NULL, &icnt, (expressionS *) NULL,
			       "nop", "");
		  macro_build ((char *) NULL, &icnt, (expressionS *) NULL,
			       HAVE_32BIT_ADDRESSES ? "addu" : "daddu",
			       "d,v,t", treg, AT, breg);
a5112 1
		  off1 = -8;
d5114 1
a5114 17

	      /* Set mips_optimize around the lui instruction to avoid
		 inserting an unnecessary nop after the lw.  */
	      hold_mips_optimize = mips_optimize;
	      mips_optimize = 2;
	      macro_build_lui (NULL, &icnt, &expr1, AT);
	      mips_optimize = hold_mips_optimize;

	      macro_build ((char *) NULL, &icnt, &expr1,
			   HAVE_32BIT_ADDRESSES ? "addiu" : "daddiu",
			   "t,r,j", AT, AT, (int) BFD_RELOC_LO16);
	      macro_build ((char *) NULL, &icnt, (expressionS *) NULL,
			   HAVE_32BIT_ADDRESSES ? "addu" : "daddu",
			   "d,v,t", tempreg, tempreg, AT);
	      frag_var (rs_machine_dependent, 0, 0,
			RELAX_ENCODE (0, 0, -16 + off1, -8, 0, 0),
			offset_expr.X_add_symbol, 0, NULL);
d5120 1
a5120 3
	  char *p = NULL;
	  int lw_reloc_type = (int) BFD_RELOC_MIPS_GOT_DISP;
	  int adj = 0;
d5126 1
a5126 1
	     or if tempreg is PIC_CALL_REG
a5144 3
	  frag_grow (28);
	  if (offset_expr.X_add_number == 0 && tempreg == PIC_CALL_REG)
	    lw_reloc_type = (int) BFD_RELOC_MIPS_CALL16;
d5147 1
a5147 2
	      frag_now->tc_frag_data.tc_fr_offset =
		expr1.X_add_number = offset_expr.X_add_number;
d5150 3
a5152 4
	      macro_build ((char *) NULL, &icnt, &offset_expr,
			   HAVE_32BIT_ADDRESSES ? "lw" : "ld",
			   "t,o(b)", tempreg, lw_reloc_type,
			   mips_gp_register);
d5157 2
a5158 7
		  macro_build ((char *) NULL, &icnt, &expr1,
			       HAVE_32BIT_ADDRESSES ? "addi" : "daddiu",
			       "t,r,j", tempreg, tempreg,
			       (int) BFD_RELOC_LO16);
		  p = frag_var (rs_machine_dependent, 4, 0,
				RELAX_ENCODE (8, 4, 0, 0, 0, 0),
				offset_expr.X_add_symbol, 0, NULL);
d5160 1
a5160 1
	      else if (IS_SEXT_32BIT_NUM (expr1.X_add_number))
d5176 2
a5177 3
		      macro_build ((char *) NULL, &icnt, (expressionS *) NULL,
				   HAVE_32BIT_ADDRESSES ? "add" : "daddu",
				   "d,v,t", treg, AT, breg);
d5179 1
a5179 1
		      adj = 4;
d5182 3
a5184 12
		  macro_build_lui ((char *) NULL, &icnt, &expr1, AT);
		  macro_build ((char *) NULL, &icnt, &expr1,
			       HAVE_32BIT_ADDRESSES ? "addi" : "daddiu",
			       "t,r,j", AT, AT, (int) BFD_RELOC_LO16);
		  macro_build ((char *) NULL, &icnt, (expressionS *) NULL,
			       HAVE_32BIT_ADDRESSES ? "add" : "daddu",
			       "d,v,t", dreg, dreg, AT);

		  p = frag_var (rs_machine_dependent, 4 + adj, 0,
				RELAX_ENCODE (16 + adj, 4 + adj,
					      0, 0, 0, 0),
				offset_expr.X_add_symbol, 0, NULL);
d5191 1
d5194 3
a5196 5
	      macro_build (p, &icnt, &offset_expr,
			   HAVE_32BIT_ADDRESSES ? "lw" : "ld",
			   "t,o(b)", tempreg, (int) BFD_RELOC_MIPS_GOT_DISP,
			   mips_gp_register);
	      if (adj)
d5198 2
a5199 3
		  macro_build (p + 4, &icnt, (expressionS *) NULL,
			       HAVE_32BIT_ADDRESSES ? "add" : "daddu",
			       "d,v,t", treg, tempreg, breg);
d5203 1
d5205 1
a5205 1
	  else
d5207 7
a5213 8
	      macro_build ((char *) NULL, &icnt, &offset_expr,
			   HAVE_32BIT_ADDRESSES ? "lw" : "ld",
			   "t,o(b)", tempreg, lw_reloc_type,
			   mips_gp_register);
	      if (lw_reloc_type != BFD_RELOC_MIPS_GOT_DISP)
		p = frag_var (rs_machine_dependent, 0, 0,
			      RELAX_ENCODE (0, 0, -4, 0, 0, 0),
			      offset_expr.X_add_symbol, 0, NULL);
d5215 1
a5215 2

	  if (! p)
d5217 2
a5218 4
	      /* To avoid confusion in tc_gen_reloc, we must ensure
		 that this does not become a variant frag.  */
	      frag_wane (frag_now);
	      frag_new (0);
d5223 1
a5223 2
	  int gpdel;
	  char *p;
d5233 1
a5233 1
	     or if tempreg is PIC_CALL_REG
d5271 4
a5274 6
	  frag_grow (52);
	  if (reg_needs_delay (mips_gp_register))
	    gpdel = 4;
	  else
	    gpdel = 0;
	  if (expr1.X_add_number == 0 && tempreg == PIC_CALL_REG)
d5279 5
a5283 8
	  macro_build ((char *) NULL, &icnt, &offset_expr, "lui", "t,u",
		       tempreg, lui_reloc_type);
	  macro_build ((char *) NULL, &icnt, (expressionS *) NULL,
		       HAVE_32BIT_ADDRESSES ? "addu" : "daddu",
		       "d,v,t", tempreg, tempreg, mips_gp_register);
	  macro_build ((char *) NULL, &icnt, &offset_expr,
		       HAVE_32BIT_ADDRESSES ? "lw" : "ld",
		       "t,o(b)", tempreg, lw_reloc_type, tempreg);
d5286 1
a5286 5
	      int off;

	      if (breg == 0)
		off = 0;
	      else
d5291 1
a5291 3
		  macro_build ((char *) NULL, &icnt, (expressionS *) NULL,
			       "nop", "");
		  off = 4;
a5292 8

	      p = frag_var (rs_machine_dependent, 12 + gpdel, 0,
			    RELAX_ENCODE (12 + off, 12 + gpdel, gpdel,
					  8 + gpdel, 0,
					  (breg == 0
					   ? mips_opts.warn_about_macros
					   : 0)),
			    offset_expr.X_add_symbol, 0, NULL);
d5297 3
a5299 12
	      macro_build ((char *) NULL, &icnt, (expressionS *) NULL,
			   "nop", "");
	      macro_build ((char *) NULL, &icnt, &expr1,
			   HAVE_32BIT_ADDRESSES ? "addiu" : "daddiu",
			   "t,r,j", tempreg, tempreg, (int) BFD_RELOC_LO16);

	      p = frag_var (rs_machine_dependent, 12 + gpdel, 0,
			    RELAX_ENCODE (20, 12 + gpdel, gpdel, 8 + gpdel, 0,
					  (breg == 0
					   ? mips_opts.warn_about_macros
					   : 0)),
			    offset_expr.X_add_symbol, 0, NULL);
d5303 1
a5303 1
	      int adj, dreg;
d5313 1
a5313 4
		{
		  adj = 0;
		  dreg = tempreg;
		}
d5317 3
a5319 5
		  macro_build ((char *) NULL, &icnt, (expressionS *) NULL,
			       "nop", "");
		  macro_build ((char *) NULL, &icnt, (expressionS *) NULL,
			       HAVE_32BIT_ADDRESSES ? "addu" : "daddu",
			       "d,v,t", treg, AT, breg);
a5320 1
		  adj = 8;
d5323 2
a5324 21
	      /* Set mips_optimize around the lui instruction to avoid
		 inserting an unnecessary nop after the lw.  */
	      hold_mips_optimize = mips_optimize;
	      mips_optimize = 2;
	      macro_build_lui (NULL, &icnt, &expr1, AT);
	      mips_optimize = hold_mips_optimize;

	      macro_build ((char *) NULL, &icnt, &expr1,
			   HAVE_32BIT_ADDRESSES ? "addiu" : "daddiu",
			   "t,r,j", AT, AT, (int) BFD_RELOC_LO16);
	      macro_build ((char *) NULL, &icnt, (expressionS *) NULL,
			   HAVE_32BIT_ADDRESSES ? "addu" : "daddu",
			   "d,v,t", dreg, dreg, AT);

	      p = frag_var (rs_machine_dependent, 16 + gpdel + adj, 0,
			    RELAX_ENCODE (24 + adj, 16 + gpdel + adj, gpdel,
					  8 + gpdel, 0,
					  (breg == 0
					   ? mips_opts.warn_about_macros
					   : 0)),
			    offset_expr.X_add_symbol, 0, NULL);
d5328 3
d5332 1
a5332 1
	  if (gpdel > 0)
d5336 1
a5336 2
	      macro_build (p, &icnt, (expressionS *) NULL, "nop", "");
	      p += 4;
d5339 2
a5340 6
	  macro_build (p, &icnt, &offset_expr,
		       HAVE_32BIT_ADDRESSES ? "lw" : "ld",
		       "t,o(b)", tempreg,
		       local_reloc_type,
		       mips_gp_register);
	  p += 4;
d5344 3
a5346 5
	      macro_build (p, &icnt, (expressionS *) NULL, "nop", "");
	      p += 4;
	      macro_build (p, &icnt, &expr1,
			   HAVE_32BIT_ADDRESSES ? "addiu" : "daddiu",
			   "t,r,j", tempreg, tempreg, (int) BFD_RELOC_LO16);
d5360 3
a5362 6
		  macro_build (p, &icnt, (expressionS *) NULL, "nop", "");
		  p += 4;
		  macro_build (p, &icnt, (expressionS *) NULL,
			       HAVE_32BIT_ADDRESSES ? "addu" : "daddu",
			       "d,v,t", treg, AT, breg);
		  p += 4;
d5369 5
a5373 10
	      macro_build_lui (p, &icnt, &expr1, AT);
	      p += 4;
	      macro_build (p, &icnt, &expr1,
			   HAVE_32BIT_ADDRESSES ? "addiu" : "daddiu",
			   "t,r,j", AT, AT, (int) BFD_RELOC_LO16);
	      p += 4;
	      macro_build (p, &icnt, (expressionS *) NULL,
			   HAVE_32BIT_ADDRESSES ? "addu" : "daddu",
			   "d,v,t", tempreg, tempreg, AT);
	      p += 4;
d5375 1
a5378 1
	  char *p = NULL;
d5381 1
a5381 1
	  int adj = 0;
d5388 1
a5388 1
	     or if tempreg is PIC_CALL_REG
d5414 1
a5414 1
	  frag_grow (40);
d5416 1
a5416 2
	  frag_now->tc_frag_data.tc_fr_offset =
	    expr1.X_add_number = offset_expr.X_add_number;
d5419 2
a5420 1
	  if (expr1.X_add_number == 0 && tempreg == PIC_CALL_REG)
d5425 5
a5429 8
	  macro_build ((char *) NULL, &icnt, &offset_expr, "lui", "t,u",
		       tempreg, lui_reloc_type);
	  macro_build ((char *) NULL, &icnt, (expressionS *) NULL,
		       HAVE_32BIT_ADDRESSES ? "add" : "daddu",
		       "d,v,t", tempreg, tempreg, mips_gp_register);
	  macro_build ((char *) NULL, &icnt, &offset_expr,
		       HAVE_32BIT_ADDRESSES ? "lw" : "ld",
		       "t,o(b)", tempreg, lw_reloc_type, tempreg);
d5432 1
a5432 6
	    {
	      p = frag_var (rs_machine_dependent, 8, 0,
			    RELAX_ENCODE (12, 8, 0, 4, 0,
					  mips_opts.warn_about_macros),
			    offset_expr.X_add_symbol, 0, NULL);
	    }
d5436 2
a5437 8
	      macro_build ((char *) NULL, &icnt, &expr1,
			   HAVE_32BIT_ADDRESSES ? "addi" : "daddiu",
			   "t,r,j", tempreg, tempreg,
			   (int) BFD_RELOC_LO16);
	      p = frag_var (rs_machine_dependent, 8, 0,
			    RELAX_ENCODE (16, 8, 0, 4, 0,
					  mips_opts.warn_about_macros),
			    offset_expr.X_add_symbol, 0, NULL);
d5439 1
a5439 1
	  else if (IS_SEXT_32BIT_NUM (expr1.X_add_number))
d5455 2
a5456 3
		  macro_build ((char *) NULL, &icnt, (expressionS *) NULL,
			       HAVE_32BIT_ADDRESSES ? "add" : "daddu",
			       "d,v,t", treg, AT, breg);
d5458 1
a5458 1
		  adj = 4;
d5461 2
a5462 17
	      /* Set mips_optimize around the lui instruction to avoid
		 inserting an unnecessary nop after the lw.  */
	      macro_build_lui ((char *) NULL, &icnt, &expr1, AT);
	      macro_build ((char *) NULL, &icnt, &expr1,
			   HAVE_32BIT_ADDRESSES ? "addi" : "daddiu",
			   "t,r,j", AT, AT, (int) BFD_RELOC_LO16);
	      macro_build ((char *) NULL, &icnt, (expressionS *) NULL,
			   HAVE_32BIT_ADDRESSES ? "add" : "daddu",
			   "d,v,t", dreg, dreg, AT);

	      p = frag_var (rs_machine_dependent, 8 + adj, 0,
			    RELAX_ENCODE (24 + adj, 8 + adj,
					  0, 4, 0,
					  (breg == 0
					   ? mips_opts.warn_about_macros
					   : 0)),
			    offset_expr.X_add_symbol, 0, NULL);
d5469 1
d5471 8
a5478 12
	  macro_build (p, &icnt, &offset_expr,
		       HAVE_32BIT_ADDRESSES ? "lw" : "ld", "t,o(b)",
		       tempreg,
		       (int) BFD_RELOC_MIPS_GOT_PAGE, mips_gp_register);
	  macro_build (p + 4, &icnt, &offset_expr,
		       HAVE_32BIT_ADDRESSES ? "addi" : "daddiu", "t,r,j",
		       tempreg, tempreg, (int) BFD_RELOC_MIPS_GOT_OFST);
	  if (adj)
	    {
	      macro_build (p + 8, &icnt, (expressionS *) NULL,
			   HAVE_32BIT_ADDRESSES ? "add" : "daddu",
			   "d,v,t", treg, tempreg, breg);
d5482 1
d5489 2
a5490 3
	  macro_build ((char *) NULL, &icnt, &offset_expr,
		       HAVE_32BIT_ADDRESSES ? "addiu" : "daddiu", "t,r,j",
		       tempreg, mips_gp_register, (int) BFD_RELOC_GPREL16);
d5500 1
a5500 2
	    s = (dbl || HAVE_64BIT_ADDRESSES) ? "daddu" :
	      HAVE_NEWABI ? "add" : "addu";
d5502 1
a5502 1
	    s = HAVE_64BIT_ADDRESSES ? "daddu" : HAVE_NEWABI ? "add" : "addu";
d5504 1
a5504 2
	  macro_build ((char *) NULL, &icnt, (expressionS *) NULL, s,
		       "d,v,t", treg, tempreg, breg);
d5517 1
a5517 1
	macro_build ((char *) NULL, &icnt, &offset_expr, "j", "a");
d5519 1
a5519 1
	macro_build ((char *) NULL, &icnt, &offset_expr, "b", "p");
d5531 1
a5531 2
	macro_build ((char *) NULL, &icnt, (expressionS *) NULL, "jalr",
		     "d,s", dreg, sreg);
d5537 1
a5537 2
	  macro_build ((char *) NULL, &icnt, (expressionS *) NULL, "jalr",
		       "d,s", dreg, sreg);
d5557 4
a5560 3
  		  macro_build_ldst_constoffset ((char *) NULL, &icnt, &expr1,
					        HAVE_32BIT_ADDRESSES ? "lw" : "ld",
					        mips_gp_register, mips_frame_reg);
d5571 1
a5571 1
	macro_build ((char *) NULL, &icnt, &offset_expr, "jal", "a");
a5573 2
	  char *p;

d5606 3
a5608 5
		  frag_grow (4);
		  macro_build ((char *) NULL, &icnt, &offset_expr,
			       HAVE_32BIT_ADDRESSES ? "lw" : "ld",
			       "t,o(b)", PIC_CALL_REG,
			       (int) BFD_RELOC_MIPS_CALL16,
d5610 5
a5614 3
		  frag_var (rs_machine_dependent, 0, 0,
			    RELAX_ENCODE (0, 0, -4, 0, 0, 0),
			    offset_expr.X_add_symbol, 0, NULL);
d5618 11
a5628 18
		  frag_grow (20);
		  macro_build ((char *) NULL, &icnt, &offset_expr, "lui",
			       "t,u", PIC_CALL_REG,
			       (int) BFD_RELOC_MIPS_CALL_HI16);
		  macro_build ((char *) NULL, &icnt, (expressionS *) NULL,
			       HAVE_32BIT_ADDRESSES ? "add" : "daddu",
			       "d,v,t", PIC_CALL_REG, PIC_CALL_REG,
			       mips_gp_register);
		  macro_build ((char *) NULL, &icnt, &offset_expr,
			       HAVE_32BIT_ADDRESSES ? "lw" : "ld",
			       "t,o(b)", PIC_CALL_REG,
			       (int) BFD_RELOC_MIPS_CALL_LO16, PIC_CALL_REG);
		  p = frag_var (rs_machine_dependent, 8, 0,
				RELAX_ENCODE (12, 8, 0, 4, 0, 0),
				offset_expr.X_add_symbol, 0, NULL);
		  macro_build (p, &icnt, &offset_expr,
			       HAVE_32BIT_ADDRESSES ? "lw" : "ld", "t,o(b)",
			       PIC_CALL_REG, (int) BFD_RELOC_MIPS_GOT_PAGE,
d5630 4
a5633 4
		  macro_build (p + 4, &icnt, &offset_expr,
			       HAVE_32BIT_ADDRESSES ? "addi" : "daddiu",
			       "t,r,j", PIC_CALL_REG, PIC_CALL_REG,
			       (int) BFD_RELOC_MIPS_GOT_OFST);
d5636 1
a5636 1
	      macro_build_jalr (icnt, &offset_expr);
d5640 1
a5640 1
	      frag_grow (40);
d5643 5
a5647 9
		  macro_build ((char *) NULL, &icnt, &offset_expr,
			       HAVE_32BIT_ADDRESSES ? "lw" : "ld",
			       "t,o(b)", PIC_CALL_REG,
			       (int) BFD_RELOC_MIPS_CALL16, mips_gp_register);
		  macro_build ((char *) NULL, &icnt, (expressionS *) NULL,
			       "nop", "");
		  p = frag_var (rs_machine_dependent, 4, 0,
				RELAX_ENCODE (0, 4, -8, 0, 0, 0),
				offset_expr.X_add_symbol, 0, NULL);
d5651 1
a5651 1
		  int gpdel;
d5653 21
a5673 39
		  if (reg_needs_delay (mips_gp_register))
		    gpdel = 4;
		  else
		    gpdel = 0;
		  macro_build ((char *) NULL, &icnt, &offset_expr, "lui",
			       "t,u", PIC_CALL_REG,
			       (int) BFD_RELOC_MIPS_CALL_HI16);
		  macro_build ((char *) NULL, &icnt, (expressionS *) NULL,
			       HAVE_32BIT_ADDRESSES ? "addu" : "daddu",
			       "d,v,t", PIC_CALL_REG, PIC_CALL_REG,
			       mips_gp_register);
		  macro_build ((char *) NULL, &icnt, &offset_expr,
			       HAVE_32BIT_ADDRESSES ? "lw" : "ld",
			       "t,o(b)", PIC_CALL_REG,
			       (int) BFD_RELOC_MIPS_CALL_LO16, PIC_CALL_REG);
		  macro_build ((char *) NULL, &icnt, (expressionS *) NULL,
			       "nop", "");
		  p = frag_var (rs_machine_dependent, 12 + gpdel, 0,
				RELAX_ENCODE (16, 12 + gpdel, gpdel,
					      8 + gpdel, 0, 0),
				offset_expr.X_add_symbol, 0, NULL);
		  if (gpdel > 0)
		    {
		      macro_build (p, &icnt, (expressionS *) NULL, "nop", "");
		      p += 4;
		    }
		  macro_build (p, &icnt, &offset_expr,
			       HAVE_32BIT_ADDRESSES ? "lw" : "ld",
			       "t,o(b)", PIC_CALL_REG,
			       (int) BFD_RELOC_MIPS_GOT16, mips_gp_register);
		  p += 4;
		  macro_build (p, &icnt, (expressionS *) NULL, "nop", "");
		  p += 4;
		}
	      macro_build (p, &icnt, &offset_expr,
			   HAVE_32BIT_ADDRESSES ? "addiu" : "daddiu",
			   "t,r,j", PIC_CALL_REG, PIC_CALL_REG,
			   (int) BFD_RELOC_LO16);
	      macro_build_jalr (icnt, &offset_expr);
d5692 1
a5692 2
		    macro_build ((char *) NULL, &icnt, (expressionS *) NULL,
				 "nop", "");
d5694 4
a5697 3
  		  macro_build_ldst_constoffset ((char *) NULL, &icnt, &expr1,
					        HAVE_32BIT_ADDRESSES ? "lw" : "ld",
					        mips_gp_register, mips_frame_reg);
d5703 1
a5703 1
	  macro_build ((char *) NULL, &icnt, &offset_expr, "bal", "p");
d5757 1
a5757 1
      if (mips_arch == CPU_R4650)
d5846 1
a5846 1
      if (mips_arch == CPU_R4650)
d5887 16
d5929 9
a5937 9
          macro_build ((char *) NULL, &icnt, &offset_expr, "lui", "t,u",
                       tempreg, (int) BFD_RELOC_PCREL_HI16_S);
          macro_build ((char *) NULL, &icnt, (expressionS *) NULL,
                       ((bfd_arch_bits_per_address (stdoutput) == 32
                         || ! ISA_HAS_64BIT_REGS (mips_opts.isa))
                        ? HAVE_NEWABI ? "add" : "addu" : "daddu"),
                       "d,v,t", tempreg, tempreg, breg);
          macro_build ((char *) NULL, &icnt, &offset_expr, s, fmt, treg,
                       (int) BFD_RELOC_PCREL_LO16, tempreg);
a5954 2
	  char *p;

d6024 1
a6024 1
	     addressible with sign-extended 32-bit addresses, it is
d6033 10
a6042 9
	  if ((offset_expr.X_op != O_constant && HAVE_64BIT_ADDRESSES)
	      || (offset_expr.X_op == O_constant
		  && !IS_SEXT_32BIT_NUM (offset_expr.X_add_number + 0x8000)
		  && HAVE_64BIT_ADDRESS_CONSTANTS))
	    {
	      p = NULL;

	      /* We don't do GP optimization for now because RELAX_ENCODE can't
		 hold the data for such large chunks.  */
d6046 6
a6051 6
		  macro_build (p, &icnt, &offset_expr, "lui", "t,u",
			       tempreg, (int) BFD_RELOC_MIPS_HIGHEST);
		  macro_build (p, &icnt, &offset_expr, "lui", "t,u",
			       AT, (int) BFD_RELOC_HI16_S);
		  macro_build (p, &icnt, &offset_expr, "daddiu", "t,r,j",
			       tempreg, tempreg, (int) BFD_RELOC_MIPS_HIGHER);
d6053 5
a6057 8
		    macro_build (p, &icnt, (expressionS *) NULL, "daddu",
				 "d,v,t", AT, AT, breg);
		  macro_build (p, &icnt, (expressionS *) NULL, "dsll32",
			       "d,w,<", tempreg, tempreg, 0);
		  macro_build (p, &icnt, (expressionS *) NULL, "daddu",
			       "d,v,t", tempreg, tempreg, AT);
		  macro_build (p, &icnt, &offset_expr, s,
			       fmt, treg, (int) BFD_RELOC_LO16, tempreg);
d6062 8
a6069 10
		  macro_build (p, &icnt, &offset_expr, "lui", "t,u",
			       tempreg, (int) BFD_RELOC_MIPS_HIGHEST);
		  macro_build (p, &icnt, &offset_expr, "daddiu", "t,r,j",
			       tempreg, tempreg, (int) BFD_RELOC_MIPS_HIGHER);
		  macro_build (p, &icnt, (expressionS *) NULL, "dsll",
			       "d,w,<", tempreg, tempreg, 16);
		  macro_build (p, &icnt, &offset_expr, "daddiu", "t,r,j",
			       tempreg, tempreg, (int) BFD_RELOC_HI16_S);
		  macro_build (p, &icnt, (expressionS *) NULL, "dsll",
			       "d,w,<", tempreg, tempreg, 16);
d6071 4
a6074 4
		    macro_build (p, &icnt, (expressionS *) NULL, "daddu",
				 "d,v,t", tempreg, tempreg, breg);
		  macro_build (p, &icnt, &offset_expr, s,
			       fmt, treg, (int) BFD_RELOC_LO16, tempreg);
d6079 3
a6081 3
	  else if (offset_expr.X_op == O_constant
		   && !HAVE_64BIT_ADDRESS_CONSTANTS
		   && !IS_SEXT_32BIT_NUM (offset_expr.X_add_number))
d6086 2
a6087 4
	      if ((valueT) offset_expr.X_add_number > MAX_GPREL_OFFSET
		  || nopic_need_relax (offset_expr.X_add_symbol, 1))
		p = NULL;
	      else
d6089 2
a6090 3
		  frag_grow (20);
		  macro_build ((char *) NULL, &icnt, &offset_expr, s, fmt,
			       treg, (int) BFD_RELOC_GPREL16,
d6092 1
a6092 6
		  p = frag_var (rs_machine_dependent, 8, 0,
				RELAX_ENCODE (4, 8, 0, 4, 0,
					      (mips_opts.warn_about_macros
					       || (used_at
						   && mips_opts.noat))),
				offset_expr.X_add_symbol, 0, NULL);
d6095 5
a6099 5
	      macro_build_lui (p, &icnt, &offset_expr, tempreg);
	      if (p != NULL)
		p += 4;
	      macro_build (p, &icnt, &offset_expr, s, fmt, treg,
			   (int) BFD_RELOC_LO16, tempreg);
d6103 2
a6104 4
	      if ((valueT) offset_expr.X_add_number > MAX_GPREL_OFFSET
		  || nopic_need_relax (offset_expr.X_add_symbol, 1))
		p = NULL;
	      else
d6106 14
a6119 22
		  frag_grow (28);
		  macro_build ((char *) NULL, &icnt, (expressionS *) NULL,
			       HAVE_32BIT_ADDRESSES ? HAVE_NEWABI
			       ? "add" : "addu" : "daddu",
			       "d,v,t", tempreg, breg, mips_gp_register);
		  macro_build ((char *) NULL, &icnt, &offset_expr, s, fmt,
			       treg, (int) BFD_RELOC_GPREL16, tempreg);
		  p = frag_var (rs_machine_dependent, 12, 0,
				RELAX_ENCODE (8, 12, 0, 8, 0, 0),
				offset_expr.X_add_symbol, 0, NULL);
		}
	      macro_build_lui (p, &icnt, &offset_expr, tempreg);
	      if (p != NULL)
		p += 4;
	      macro_build (p, &icnt, (expressionS *) NULL,
			   HAVE_32BIT_ADDRESSES ? HAVE_NEWABI
			   ? "add" : "addu" : "daddu",
			   "d,v,t", tempreg, tempreg, breg);
	      if (p != NULL)
		p += 4;
	      macro_build (p, &icnt, &offset_expr, s, fmt, treg,
			   (int) BFD_RELOC_LO16, tempreg);
a6123 1
	  char *p;
d6149 2
a6150 4
	      macro_build ((char *) NULL, &icnt, &offset_expr,
			   HAVE_32BIT_ADDRESSES ? "lw" : "ld",
			   "t,o(b)", tempreg, BFD_RELOC_MIPS_GOT_PAGE,
			   mips_gp_register);
d6152 4
a6155 5
		macro_build ((char *) NULL, &icnt, (expressionS *) NULL,
			     HAVE_32BIT_ADDRESSES ? "add" : "daddu",
			     "d,v,t", tempreg, tempreg, breg);
	      macro_build ((char *) NULL, &icnt, &offset_expr, s, fmt, treg,
			   (int) BFD_RELOC_MIPS_GOT_OFST, tempreg);
d6167 8
a6174 11
	  frag_grow (20);
	  macro_build ((char *) NULL, &icnt, &offset_expr,
		       HAVE_32BIT_ADDRESSES ? "lw" : "ld", "t,o(b)", tempreg,
		       (int) lw_reloc_type, mips_gp_register);
	  macro_build ((char *) NULL, &icnt, (expressionS *) NULL, "nop", "");
	  p = frag_var (rs_machine_dependent, 4, 0,
			RELAX_ENCODE (0, 4, -8, 0, 0, 0),
			offset_expr.X_add_symbol, 0, NULL);
	  macro_build (p, &icnt, &offset_expr,
		       HAVE_32BIT_ADDRESSES ? "addiu" : "daddiu",
		       "t,r,j", tempreg, tempreg, (int) BFD_RELOC_LO16);
d6176 3
a6178 5
	    macro_build ((char *) NULL, &icnt, (expressionS *) NULL,
			 HAVE_32BIT_ADDRESSES ? "addu" : "daddu",
			 "d,v,t", tempreg, tempreg, breg);
	  macro_build ((char *) NULL, &icnt, &expr1, s, fmt, treg,
		       (int) BFD_RELOC_LO16, tempreg);
d6182 1
a6182 2
	  int gpdel;
	  char *p;
d6206 5
a6210 25
	  if (reg_needs_delay (mips_gp_register))
	    gpdel = 4;
	  else
	    gpdel = 0;
	  frag_grow (36);
	  macro_build ((char *) NULL, &icnt, &offset_expr, "lui", "t,u",
		       tempreg, (int) BFD_RELOC_MIPS_GOT_HI16);
	  macro_build ((char *) NULL, &icnt, (expressionS *) NULL,
		       HAVE_32BIT_ADDRESSES ? "addu" : "daddu",
		       "d,v,t", tempreg, tempreg, mips_gp_register);
	  macro_build ((char *) NULL, &icnt, &offset_expr,
		       HAVE_32BIT_ADDRESSES ? "lw" : "ld",
		       "t,o(b)", tempreg, (int) BFD_RELOC_MIPS_GOT_LO16,
		       tempreg);
	  p = frag_var (rs_machine_dependent, 12 + gpdel, 0,
			RELAX_ENCODE (12, 12 + gpdel, gpdel, 8 + gpdel, 0, 0),
			offset_expr.X_add_symbol, 0, NULL);
	  if (gpdel > 0)
	    {
	      macro_build (p, &icnt, (expressionS *) NULL, "nop", "");
	      p += 4;
	    }
	  macro_build (p, &icnt, &offset_expr,
		       HAVE_32BIT_ADDRESSES ? "lw" : "ld",
		       "t,o(b)", tempreg, (int) BFD_RELOC_MIPS_GOT16,
d6212 12
a6223 6
	  p += 4;
	  macro_build (p, &icnt, (expressionS *) NULL, "nop", "");
	  p += 4;
	  macro_build (p, &icnt, &offset_expr,
		       HAVE_32BIT_ADDRESSES ? "addiu" : "daddiu",
		       "t,r,j", tempreg, tempreg, (int) BFD_RELOC_LO16);
d6225 3
a6227 5
	    macro_build ((char *) NULL, &icnt, (expressionS *) NULL,
			 HAVE_32BIT_ADDRESSES ? "addu" : "daddu",
			 "d,v,t", tempreg, tempreg, breg);
	  macro_build ((char *) NULL, &icnt, &expr1, s, fmt, treg,
		       (int) BFD_RELOC_LO16, tempreg);
a6230 3
	  char *p;
	  int bregsz = breg != 0 ? 4 : 0;

d6240 1
a6240 2
	  frag_now->tc_frag_data.tc_fr_offset =
	    expr1.X_add_number = offset_expr.X_add_number;
d6245 7
a6251 10
	  frag_grow (36);
	  macro_build ((char *) NULL, &icnt, &offset_expr, "lui", "t,u",
		       tempreg, (int) BFD_RELOC_MIPS_GOT_HI16);
	  macro_build ((char *) NULL, &icnt, (expressionS *) NULL,
		       HAVE_32BIT_ADDRESSES ? "add" : "daddu",
		       "d,v,t", tempreg, tempreg, mips_gp_register);
	  macro_build ((char *) NULL, &icnt, &offset_expr,
		       HAVE_32BIT_ADDRESSES ? "lw" : "ld",
		       "t,o(b)", tempreg, (int) BFD_RELOC_MIPS_GOT_LO16,
		       tempreg);
d6253 3
a6255 5
	    macro_build ((char *) NULL, &icnt, (expressionS *) NULL,
			 HAVE_32BIT_ADDRESSES ? "add" : "daddu",
			 "d,v,t", tempreg, tempreg, breg);
	  macro_build ((char *) NULL, &icnt, &expr1, s, fmt, treg,
		       (int) BFD_RELOC_LO16, tempreg);
d6257 1
d6259 2
a6260 9
	  p = frag_var (rs_machine_dependent, 12 + bregsz, 0,
			RELAX_ENCODE (16 + bregsz, 8 + bregsz,
				      0, 4 + bregsz, 0, 0),
			offset_expr.X_add_symbol, 0, NULL);
	  macro_build (p, &icnt, &offset_expr,
		       HAVE_32BIT_ADDRESSES ? "lw" : "ld",
		       "t,o(b)", tempreg,
		       (int) BFD_RELOC_MIPS_GOT_PAGE,
		       mips_gp_register);
d6262 5
a6266 5
	    macro_build (p + 4, &icnt, (expressionS *) NULL,
			 HAVE_32BIT_ADDRESSES ? "add" : "daddu",
			 "d,v,t", tempreg, tempreg, breg);
	  macro_build (p + 4 + bregsz, &icnt, &offset_expr, s, fmt, treg,
		       (int) BFD_RELOC_MIPS_GOT_OFST, tempreg);
d6279 2
a6280 2
	      macro_build ((char *) NULL, &icnt, &offset_expr, s, fmt,
			   treg, (int) BFD_RELOC_GPREL16, mips_gp_register);
d6285 4
a6288 5
	      macro_build ((char *) NULL, &icnt, (expressionS *) NULL,
			   HAVE_32BIT_ADDRESSES ? "addu" : "daddu",
			   "d,v,t", tempreg, breg, mips_gp_register);
	      macro_build ((char *) NULL, &icnt, &offset_expr, s, fmt,
			   treg, (int) BFD_RELOC_GPREL16, tempreg);
d6301 1
a6301 1
      load_register (&icnt, treg, &imm_expr, 0);
d6305 1
a6305 1
      load_register (&icnt, treg, &imm_expr, 1);
d6311 2
a6312 3
	  load_register (&icnt, AT, &imm_expr, 0);
	  macro_build ((char *) NULL, &icnt, (expressionS *) NULL,
		       "mtc1", "t,G", AT, treg);
d6322 2
a6323 2
	  macro_build ((char *) NULL, &icnt, &offset_expr, "lwc1", "T,o(b)",
		       treg, (int) BFD_RELOC_MIPS_LITERAL, mips_gp_register);
d6335 1
a6335 1
	    load_register (&icnt, treg, &imm_expr, 1);
d6352 1
a6352 1
		load_register (&icnt, hreg, &imm_expr, 0);
d6356 1
a6356 1
		    move_register (&icnt, lreg, 0);
d6360 1
a6360 1
		      load_register (&icnt, lreg, &offset_expr, 0);
d6371 1
a6371 1
	  macro_build_lui (NULL, &icnt, &offset_expr, AT);
d6375 2
a6376 4
	  macro_build ((char *) NULL, &icnt, &offset_expr,
		       HAVE_32BIT_ADDRESSES ? "lw" : "ld",
		       "t,o(b)", AT, (int) BFD_RELOC_MIPS_GOT16,
		       mips_gp_register);
d6382 2
a6383 3
	  macro_build ((char *) NULL, &icnt, &offset_expr,
		       HAVE_32BIT_ADDRESSES ? "addiu" : "daddiu", "t,r,j", AT,
		       mips_gp_register, (int) BFD_RELOC_GPREL16);
d6392 1
a6392 2
	macro_build ((char *) NULL, &icnt, &offset_expr, "ld", "t,o(b)",
		     treg, (int) BFD_RELOC_LO16, AT);
d6395 1
a6395 2
	  macro_build ((char *) NULL, &icnt, &offset_expr, "lw", "t,o(b)",
		       treg, (int) BFD_RELOC_LO16, AT);
d6401 2
a6402 2
	      macro_build ((char *) NULL, &icnt, &offset_expr, "lw", "t,o(b)",
			   treg + 1, (int) BFD_RELOC_LO16, AT);
a6404 6

      /* To avoid confusion in tc_gen_reloc, we must ensure that this
	 does not become a variant frag.  */
      frag_wane (frag_now);
      frag_new (0);

d6415 1
a6415 1
	  load_register (&icnt, AT, &imm_expr, HAVE_64BIT_FPRS);
d6419 1
a6419 2
	      macro_build ((char *) NULL, &icnt, (expressionS *) NULL,
			   "dmtc1", "t,S", AT, treg);
d6423 1
a6423 2
	      macro_build ((char *) NULL, &icnt, (expressionS *) NULL,
			   "mtc1", "t,G", AT, treg + 1);
d6425 1
a6425 2
		macro_build ((char *) NULL, &icnt, (expressionS *) NULL,
			     "mtc1", "t,G", 0, treg);
d6429 2
a6430 3
		  load_register (&icnt, AT, &offset_expr, 0);
		  macro_build ((char *) NULL, &icnt, (expressionS *) NULL,
			       "mtc1", "t,G", AT, treg);
d6443 2
a6444 3
	      macro_build ((char *) NULL, &icnt, &offset_expr, "ldc1",
			   "T,o(b)", treg, (int) BFD_RELOC_MIPS_LITERAL,
			   mips_gp_register);
d6455 2
a6456 4
	    macro_build ((char *) NULL, &icnt, &offset_expr,
			 HAVE_32BIT_ADDRESSES ? "lw" : "ld",
			 "t,o(b)", AT, (int) BFD_RELOC_MIPS_GOT16,
			 mips_gp_register);
d6460 1
a6460 1
	      macro_build_lui (NULL, &icnt, &offset_expr, AT);
d6465 2
a6466 8
	      macro_build ((char *) NULL, &icnt, &offset_expr, "ldc1",
			   "T,o(b)", treg, (int) BFD_RELOC_LO16, AT);

	      /* To avoid confusion in tc_gen_reloc, we must ensure
		 that this does not become a variant frag.  */
	      frag_wane (frag_now);
	      frag_new (0);

d6475 1
a6475 1
      if (mips_arch == CPU_R4650)
d6485 2
a6486 3
      macro_build ((char *) NULL, &icnt, &offset_expr, "lwc1", "T,o(b)",
		   target_big_endian ? treg + 1 : treg,
		   (int) r, breg);
d6490 2
a6491 8
      macro_build ((char *) NULL, &icnt, &offset_expr, "lwc1", "T,o(b)",
		   target_big_endian ? treg : treg + 1,
		   (int) r, breg);

      /* To avoid confusion in tc_gen_reloc, we must ensure that this
	 does not become a variant frag.  */
      frag_wane (frag_now);
      frag_new (0);
d6509 1
a6509 1
      if (mips_arch == CPU_R4650)
d6527 1
a6527 1
      if (mips_arch == CPU_R4650)
a6588 2
	  char *p;

d6605 1
a6605 4
	    {
	      p = NULL;
	      used_at = 1;
	    }
d6608 1
a6608 2
	      int off;

a6610 1
		  frag_grow (28);
a6611 1
		  off = 0;
d6616 2
a6617 5
		  frag_grow (36);
		  macro_build ((char *) NULL, &icnt, (expressionS *) NULL,
			       HAVE_32BIT_ADDRESSES ? HAVE_NEWABI
			       ? "add" : "addu" : "daddu",
			       "d,v,t", AT, breg, mips_gp_register);
a6618 1
		  off = 4;
d6623 2
a6624 3
	      macro_build ((char *) NULL, &icnt, &offset_expr, s, fmt,
			   coproc ? treg + 1 : treg,
			   (int) BFD_RELOC_GPREL16, tempreg);
d6632 2
a6633 3
	      macro_build ((char *) NULL, &icnt, &offset_expr, s, fmt,
			   coproc ? treg : treg + 1,
			   (int) BFD_RELOC_GPREL16, tempreg);
d6636 1
a6636 4
	      p = frag_var (rs_machine_dependent, 12 + off, 0,
			    RELAX_ENCODE (8 + off, 12 + off, 0, 4 + off, 1,
					  used_at && mips_opts.noat),
			    offset_expr.X_add_symbol, 0, NULL);
d6659 1
a6659 3
	  macro_build_lui (p, &icnt, &offset_expr, AT);
	  if (p != NULL)
	    p += 4;
d6661 1
a6661 8
	    {
	      macro_build (p, &icnt, (expressionS *) NULL,
			   HAVE_32BIT_ADDRESSES ? HAVE_NEWABI
			   ? "add" : "addu" : "daddu",
			   "d,v,t", AT, breg, AT);
	      if (p != NULL)
		p += 4;
	    }
d6663 2
a6664 5
	  macro_build (p, &icnt, &offset_expr, s, fmt,
		       coproc ? treg + 1 : treg,
		       (int) BFD_RELOC_LO16, AT);
	  if (p != NULL)
	    p += 4;
d6668 4
a6671 3
	  macro_build (p, &icnt, &offset_expr, s, fmt,
		       coproc ? treg : treg + 1,
		       (int) BFD_RELOC_LO16, AT);
a6674 2
	  int off;

a6689 1
	  offset_expr.X_add_number = 0;
d6693 2
a6694 9
	  if (breg == 0)
	    off = 0;
	  else
	    off = 4;
	  frag_grow (24 + off);
	  macro_build ((char *) NULL, &icnt, &offset_expr,
		       HAVE_32BIT_ADDRESSES ? "lw" : "ld", "t,o(b)", AT,
		       (int) BFD_RELOC_MIPS_GOT16, mips_gp_register);
	  macro_build ((char *) NULL, &icnt, (expressionS *) NULL, "nop", "");
d6696 1
a6696 9
	    macro_build ((char *) NULL, &icnt, (expressionS *) NULL,
			 HAVE_32BIT_ADDRESSES ? HAVE_NEWABI
			 ? "add" : "addu" : "daddu",
			 "d,v,t", AT, breg, AT);
	  /* Itbl support may require additional care here.  */
	  macro_build ((char *) NULL, &icnt, &expr1, s, fmt,
		       coproc ? treg + 1 : treg,
		       (int) BFD_RELOC_LO16, AT);
	  expr1.X_add_number += 4;
d6702 1
d6704 14
a6717 3
	  macro_build ((char *) NULL, &icnt, &expr1, s, fmt,
		       coproc ? treg : treg + 1,
		       (int) BFD_RELOC_LO16, AT);
a6718 4

	  (void) frag_var (rs_machine_dependent, 0, 0,
			   RELAX_ENCODE (0, 0, -16 - off, -8, 1, 0),
			   offset_expr.X_add_symbol, 0, NULL);
d6722 1
a6722 2
	  int gpdel, off;
	  char *p;
d6745 9
a6753 19
	  if (reg_needs_delay (mips_gp_register))
	    gpdel = 4;
	  else
	    gpdel = 0;
	  if (breg == 0)
	    off = 0;
	  else
	    off = 4;
	  frag_grow (56);
	  macro_build ((char *) NULL, &icnt, &offset_expr, "lui", "t,u",
		       AT, (int) BFD_RELOC_MIPS_GOT_HI16);
	  macro_build ((char *) NULL, &icnt, (expressionS *) NULL,
		       HAVE_32BIT_ADDRESSES ? HAVE_NEWABI
		       ? "add" : "addu" : "daddu",
		       "d,v,t", AT, AT, mips_gp_register);
	  macro_build ((char *) NULL, &icnt, &offset_expr,
		       HAVE_32BIT_ADDRESSES ? "lw" : "ld",
		       "t,o(b)", AT, (int) BFD_RELOC_MIPS_GOT_LO16, AT);
	  macro_build ((char *) NULL, &icnt, (expressionS *) NULL, "nop", "");
d6755 1
a6755 4
	    macro_build ((char *) NULL, &icnt, (expressionS *) NULL,
			 HAVE_32BIT_ADDRESSES ? HAVE_NEWABI
			 ? "add" : "addu" : "daddu",
			 "d,v,t", AT, breg, AT);
d6757 2
a6758 3
	  macro_build ((char *) NULL, &icnt, &expr1, s, fmt,
		       coproc ? treg + 1 : treg,
		       (int) BFD_RELOC_LO16, AT);
d6766 2
a6767 3
	  macro_build ((char *) NULL, &icnt, &expr1, s, fmt,
		       coproc ? treg : treg + 1,
		       (int) BFD_RELOC_LO16, AT);
d6771 7
a6777 16
	  p = frag_var (rs_machine_dependent, 16 + gpdel + off, 0,
			RELAX_ENCODE (24 + off, 16 + gpdel + off, gpdel,
				      8 + gpdel + off, 1, 0),
			offset_expr.X_add_symbol, 0, NULL);
	  if (gpdel > 0)
	    {
	      macro_build (p, &icnt, (expressionS *) NULL, "nop", "");
	      p += 4;
	    }
	  macro_build (p, &icnt, &offset_expr,
		       HAVE_32BIT_ADDRESSES ? "lw" : "ld",
		       "t,o(b)", AT, (int) BFD_RELOC_MIPS_GOT16,
		       mips_gp_register);
	  p += 4;
	  macro_build (p, &icnt, (expressionS *) NULL, "nop", "");
	  p += 4;
d6779 1
a6779 7
	    {
	      macro_build (p, &icnt, (expressionS *) NULL,
			   HAVE_32BIT_ADDRESSES ? HAVE_NEWABI
			   ? "add" : "addu" : "daddu",
			   "d,v,t", AT, breg, AT);
	      p += 4;
	    }
d6781 3
a6783 5
	  macro_build (p, &icnt, &expr1, s, fmt,
		       coproc ? treg + 1 : treg,
		       (int) BFD_RELOC_LO16, AT);
	  p += 4;
	  expr1.X_add_number += 4;
d6790 2
a6791 3
	  macro_build (p, &icnt, &expr1, s, fmt,
		       coproc ? treg : treg + 1,
		       (int) BFD_RELOC_LO16, AT);
d6793 1
d6812 2
a6813 3
	      macro_build ((char *) NULL, &icnt, (expressionS *) NULL,
			   HAVE_32BIT_ADDRESSES ? "addu" : "daddu",
			   "d,v,t", AT, breg, mips_gp_register);
d6819 2
a6820 3
	  macro_build ((char *) NULL, &icnt, &offset_expr, s, fmt,
		       coproc ? treg + 1 : treg,
		       (int) BFD_RELOC_GPREL16, tempreg);
d6823 2
a6824 3
	  macro_build ((char *) NULL, &icnt, &offset_expr, s, fmt,
		       coproc ? treg : treg + 1,
		       (int) BFD_RELOC_GPREL16, tempreg);
d6841 1
a6841 2
      macro_build ((char *) NULL, &icnt, &offset_expr, s, "t,o(b)", treg,
		   (int) BFD_RELOC_LO16, breg);
d6843 1
a6843 2
      macro_build ((char *) NULL, &icnt, &offset_expr, s, "t,o(b)", treg + 1,
		   (int) BFD_RELOC_LO16, breg);
d6877 1
a6877 2
      macro_build ((char *) NULL, &icnt, (expressionS *) NULL, s, "C",
		   ip->insn_opcode);
d6881 1
a6881 1
      move_register (&icnt, dreg, sreg);
d6900 1
a6900 1
	  macro_build ((char *) NULL, &icnt, &immed_expr, s, "C");
d6911 1
a6911 2
macro2 (ip)
     struct mips_cl_insn *ip;
a6915 1
  int icnt = 0;
a6928 1
  char *p;
d6947 2
a6948 4
      macro_build ((char *) NULL, &icnt, (expressionS *) NULL,
		   dbl ? "dmultu" : "multu", "s,t", sreg, treg);
      macro_build ((char *) NULL, &icnt, (expressionS *) NULL, "mflo", "d",
		   dreg);
d6957 3
a6959 5
      load_register (&icnt, AT, &imm_expr, dbl);
      macro_build ((char *) NULL, &icnt, (expressionS *) NULL,
		   dbl ? "dmult" : "mult", "s,t", sreg, AT);
      macro_build ((char *) NULL, &icnt, (expressionS *) NULL, "mflo", "d",
		   dreg);
d6976 5
a6980 9
	load_register (&icnt, AT, &imm_expr, dbl);
      macro_build ((char *) NULL, &icnt, (expressionS *) NULL,
		   dbl ? "dmult" : "mult", "s,t", sreg, imm ? AT : treg);
      macro_build ((char *) NULL, &icnt, (expressionS *) NULL, "mflo", "d",
		   dreg);
      macro_build ((char *) NULL, &icnt, (expressionS *) NULL,
		   dbl ? "dsra32" : "sra", "d,w,<", dreg, dreg, RA);
      macro_build ((char *) NULL, &icnt, (expressionS *) NULL, "mfhi", "d",
		   AT);
d6982 1
a6982 2
	macro_build ((char *) NULL, &icnt, (expressionS *) NULL, "tne",
		     "s,t,q", dreg, AT, 6);
d6986 3
a6988 6
	  macro_build ((char *) NULL, &icnt, &expr1, "beq", "s,t,p", dreg,
		       AT);
	  macro_build ((char *) NULL, &icnt, (expressionS *) NULL, "nop", "",
		       0);
	  macro_build ((char *) NULL, &icnt, (expressionS *) NULL, "break",
		       "c", 6);
d6991 1
a6991 1
      macro_build ((char *) NULL, &icnt, (expressionS *) NULL, "mflo", "d", dreg);
d7008 5
a7012 8
	load_register (&icnt, AT, &imm_expr, dbl);
      macro_build ((char *) NULL, &icnt, (expressionS *) NULL,
		   dbl ? "dmultu" : "multu",
		   "s,t", sreg, imm ? AT : treg);
      macro_build ((char *) NULL, &icnt, (expressionS *) NULL, "mfhi", "d",
		   AT);
      macro_build ((char *) NULL, &icnt, (expressionS *) NULL, "mflo", "d",
		   dreg);
d7014 1
a7014 2
	macro_build ((char *) NULL, &icnt, (expressionS *) NULL, "tne",
		     "s,t,q", AT, 0, 6);
d7018 3
a7020 5
	  macro_build ((char *) NULL, &icnt, &expr1, "beq", "s,t,p", AT, 0);
	  macro_build ((char *) NULL, &icnt, (expressionS *) NULL, "nop", "",
		       0);
	  macro_build ((char *) NULL, &icnt, (expressionS *) NULL, "break",
		       "c", 6);
d7026 1
a7026 1
      if (ISA_HAS_DROR (mips_opts.isa) || CPU_HAS_DROR (mips_arch))
d7038 2
a7039 4
	  macro_build ((char *) NULL, &icnt, NULL, "dnegu",
		       "d,w", tempreg, treg);
	  macro_build ((char *) NULL, &icnt, NULL, "drorv",
		       "d,t,s", dreg, sreg, tempreg);
d7044 4
a7047 8
      macro_build ((char *) NULL, &icnt, (expressionS *) NULL, "dsubu",
		   "d,v,t", AT, 0, treg);
      macro_build ((char *) NULL, &icnt, (expressionS *) NULL, "dsrlv",
		   "d,t,s", AT, sreg, AT);
      macro_build ((char *) NULL, &icnt, (expressionS *) NULL, "dsllv",
		   "d,t,s", dreg, sreg, treg);
      macro_build ((char *) NULL, &icnt, (expressionS *) NULL, "or",
		   "d,v,t", dreg, dreg, AT);
d7051 1
a7051 1
      if (ISA_HAS_ROR (mips_opts.isa) || CPU_HAS_ROR (mips_arch))
d7063 2
a7064 4
	  macro_build ((char *) NULL, &icnt, NULL, "negu",
		       "d,w", tempreg, treg);
	  macro_build ((char *) NULL, &icnt, NULL, "rorv",
		       "d,t,s", dreg, sreg, tempreg);
d7069 4
a7072 8
      macro_build ((char *) NULL, &icnt, (expressionS *) NULL, "subu",
		   "d,v,t", AT, 0, treg);
      macro_build ((char *) NULL, &icnt, (expressionS *) NULL, "srlv",
		   "d,t,s", AT, sreg, AT);
      macro_build ((char *) NULL, &icnt, (expressionS *) NULL, "sllv",
		   "d,t,s", dreg, sreg, treg);
      macro_build ((char *) NULL, &icnt, (expressionS *) NULL, "or",
		   "d,v,t", dreg, dreg, AT);
d7083 1
a7083 1
	if (ISA_HAS_DROR (mips_opts.isa) || CPU_HAS_DROR (mips_arch))
d7087 1
a7087 2
	      macro_build ((char *) NULL, &icnt, NULL, "dror32",
			   "d,w,<", dreg, sreg, rot - 32);
d7089 1
a7089 2
	      macro_build ((char *) NULL, &icnt, NULL, "dror",
			   "d,w,<", dreg, sreg, rot);
d7094 1
a7094 2
	    macro_build ((char *) NULL, &icnt, (expressionS *) NULL, "dsrl",
			 "d,w,<", dreg, sreg, 0);
d7100 3
a7102 6
	macro_build ((char *) NULL, &icnt, (expressionS *) NULL, l,
		     "d,w,<", AT, sreg, rot);
	macro_build ((char *) NULL, &icnt, (expressionS *) NULL, r,
		     "d,w,<", dreg, sreg, (0x20 - rot) & 0x1f);
	macro_build ((char *) NULL, &icnt, (expressionS *) NULL, "or",
		     "d,v,t", dreg, dreg, AT);
d7113 1
a7113 1
	if (ISA_HAS_ROR (mips_opts.isa) || CPU_HAS_ROR (mips_arch))
d7115 1
a7115 2
	    macro_build ((char *) NULL, &icnt, NULL, "ror",
			 "d,w,<", dreg, sreg, (32 - rot) & 0x1f);
d7120 1
a7120 2
	    macro_build ((char *) NULL, &icnt, (expressionS *) NULL, "srl",
			 "d,w,<", dreg, sreg, 0);
d7123 3
a7125 6
	macro_build ((char *) NULL, &icnt, (expressionS *) NULL, "sll",
		     "d,w,<", AT, sreg, rot);
	macro_build ((char *) NULL, &icnt, (expressionS *) NULL, "srl",
		     "d,w,<", dreg, sreg, (0x20 - rot) & 0x1f);
	macro_build ((char *) NULL, &icnt, (expressionS *) NULL, "or",
		     "d,v,t", dreg, dreg, AT);
d7130 1
a7130 1
      if (ISA_HAS_DROR (mips_opts.isa) || CPU_HAS_DROR (mips_arch))
d7132 1
a7132 2
	  macro_build ((char *) NULL, &icnt, NULL, "drorv",
		       "d,t,s", dreg, sreg, treg);
d7135 4
a7138 8
      macro_build ((char *) NULL, &icnt, (expressionS *) NULL, "dsubu",
		   "d,v,t", AT, 0, treg);
      macro_build ((char *) NULL, &icnt, (expressionS *) NULL, "dsllv",
		   "d,t,s", AT, sreg, AT);
      macro_build ((char *) NULL, &icnt, (expressionS *) NULL, "dsrlv",
		   "d,t,s", dreg, sreg, treg);
      macro_build ((char *) NULL, &icnt, (expressionS *) NULL, "or",
		   "d,v,t", dreg, dreg, AT);
d7142 1
a7142 1
      if (ISA_HAS_ROR (mips_opts.isa) || CPU_HAS_ROR (mips_arch))
d7144 1
a7144 2
	  macro_build ((char *) NULL, &icnt, NULL, "rorv",
		       "d,t,s", dreg, sreg, treg);
d7147 4
a7150 8
      macro_build ((char *) NULL, &icnt, (expressionS *) NULL, "subu",
		   "d,v,t", AT, 0, treg);
      macro_build ((char *) NULL, &icnt, (expressionS *) NULL, "sllv",
		   "d,t,s", AT, sreg, AT);
      macro_build ((char *) NULL, &icnt, (expressionS *) NULL, "srlv",
		   "d,t,s", dreg, sreg, treg);
      macro_build ((char *) NULL, &icnt, (expressionS *) NULL, "or",
		   "d,v,t", dreg, dreg, AT);
d7161 1
a7161 1
	if (ISA_HAS_DROR (mips_opts.isa) || CPU_HAS_DROR (mips_arch))
d7164 1
a7164 2
	      macro_build ((char *) NULL, &icnt, NULL, "dror32",
			   "d,w,<", dreg, sreg, rot - 32);
d7166 1
a7166 2
	      macro_build ((char *) NULL, &icnt, NULL, "dror",
			   "d,w,<", dreg, sreg, rot);
d7171 1
a7171 2
	    macro_build ((char *) NULL, &icnt, (expressionS *) NULL, "dsrl",
			 "d,w,<", dreg, sreg, 0);
d7177 3
a7179 6
	macro_build ((char *) NULL, &icnt, (expressionS *) NULL, r,
		     "d,w,<", AT, sreg, rot);
	macro_build ((char *) NULL, &icnt, (expressionS *) NULL, l,
		     "d,w,<", dreg, sreg, (0x20 - rot) & 0x1f);
	macro_build ((char *) NULL, &icnt, (expressionS *) NULL, "or",
		     "d,v,t", dreg, dreg, AT);
d7190 1
a7190 1
	if (ISA_HAS_ROR (mips_opts.isa) || CPU_HAS_ROR (mips_arch))
d7192 1
a7192 2
	    macro_build ((char *) NULL, &icnt, NULL, "ror",
			 "d,w,<", dreg, sreg, rot);
d7197 1
a7197 2
	    macro_build ((char *) NULL, &icnt, (expressionS *) NULL, "srl",
			 "d,w,<", dreg, sreg, 0);
d7200 3
a7202 6
	macro_build ((char *) NULL, &icnt, (expressionS *) NULL, "srl",
		     "d,w,<", AT, sreg, rot);
	macro_build ((char *) NULL, &icnt, (expressionS *) NULL, "sll",
		     "d,w,<", dreg, sreg, (0x20 - rot) & 0x1f);
	macro_build ((char *) NULL, &icnt, (expressionS *) NULL, "or",
		     "d,v,t", dreg, dreg, AT);
d7207 1
a7207 1
      if (mips_arch == CPU_R4650)
d7215 2
a7216 3
      macro_build ((char *) NULL, &icnt, &offset_expr, "swc1", "T,o(b)",
		   target_big_endian ? treg + 1 : treg,
		   (int) BFD_RELOC_LO16, breg);
d7218 2
a7219 3
      macro_build ((char *) NULL, &icnt, &offset_expr, "swc1", "T,o(b)",
		   target_big_endian ? treg : treg + 1,
		   (int) BFD_RELOC_LO16, breg);
d7224 1
a7224 2
	macro_build ((char *) NULL, &icnt, &expr1, "sltiu", "t,r,j", dreg,
		     treg, (int) BFD_RELOC_LO16);
d7226 1
a7226 2
	macro_build ((char *) NULL, &icnt, &expr1, "sltiu", "t,r,j", dreg,
		     sreg, (int) BFD_RELOC_LO16);
d7229 2
a7230 4
	  macro_build ((char *) NULL, &icnt, (expressionS *) NULL, "xor",
		       "d,v,t", dreg, sreg, treg);
	  macro_build ((char *) NULL, &icnt, &expr1, "sltiu", "t,r,j", dreg,
		       dreg, (int) BFD_RELOC_LO16);
d7237 1
a7237 2
	  macro_build ((char *) NULL, &icnt, &expr1, "sltiu", "t,r,j", dreg,
		       sreg, (int) BFD_RELOC_LO16);
d7244 1
a7244 1
	  move_register (&icnt, dreg, 0);
d7251 1
a7251 2
	  macro_build ((char *) NULL, &icnt, &imm_expr, "xori", "t,r,i", dreg,
		       sreg, (int) BFD_RELOC_LO16);
d7259 2
a7260 4
	  macro_build ((char *) NULL, &icnt, &imm_expr,
		       HAVE_32BIT_GPRS ? "addiu" : "daddiu",
		       "t,r,j", dreg, sreg,
		       (int) BFD_RELOC_LO16);
d7265 2
a7266 3
	  load_register (&icnt, AT, &imm_expr, HAVE_64BIT_GPRS);
	  macro_build ((char *) NULL, &icnt, (expressionS *) NULL, "xor",
		       "d,v,t", dreg, sreg, AT);
d7269 1
a7269 2
      macro_build ((char *) NULL, &icnt, &expr1, "sltiu", "t,r,j", dreg, dreg,
		   (int) BFD_RELOC_LO16);
d7280 2
a7281 4
      macro_build ((char *) NULL, &icnt, (expressionS *) NULL, s, "d,v,t",
		   dreg, sreg, treg);
      macro_build ((char *) NULL, &icnt, &expr1, "xori", "t,r,i", dreg, dreg,
		   (int) BFD_RELOC_LO16);
d7290 2
a7291 3
	  macro_build ((char *) NULL, &icnt, &imm_expr,
		       mask == M_SGE_I ? "slti" : "sltiu",
		       "t,r,j", dreg, sreg, (int) BFD_RELOC_LO16);
d7296 3
a7298 4
	  load_register (&icnt, AT, &imm_expr, HAVE_64BIT_GPRS);
	  macro_build ((char *) NULL, &icnt, (expressionS *) NULL,
		       mask == M_SGE_I ? "slt" : "sltu", "d,v,t", dreg, sreg,
		       AT);
d7301 1
a7301 2
      macro_build ((char *) NULL, &icnt, &expr1, "xori", "t,r,i", dreg, dreg,
		   (int) BFD_RELOC_LO16);
d7312 1
a7312 2
      macro_build ((char *) NULL, &icnt, (expressionS *) NULL, s, "d,v,t",
		   dreg, treg, sreg);
d7321 2
a7322 3
      load_register (&icnt, AT, &imm_expr, HAVE_64BIT_GPRS);
      macro_build ((char *) NULL, &icnt, (expressionS *) NULL, s, "d,v,t",
		   dreg, AT, sreg);
d7331 2
a7332 4
      macro_build ((char *) NULL, &icnt, (expressionS *) NULL, s, "d,v,t",
		   dreg, treg, sreg);
      macro_build ((char *) NULL, &icnt, &expr1, "xori", "t,r,i", dreg, dreg,
		   (int) BFD_RELOC_LO16);
d7341 3
a7343 5
      load_register (&icnt, AT, &imm_expr, HAVE_64BIT_GPRS);
      macro_build ((char *) NULL, &icnt, (expressionS *) NULL, s, "d,v,t",
		   dreg, AT, sreg);
      macro_build ((char *) NULL, &icnt, &expr1, "xori", "t,r,i", dreg, dreg,
		   (int) BFD_RELOC_LO16);
d7351 1
a7351 2
	  macro_build ((char *) NULL, &icnt, &imm_expr, "slti", "t,r,j",
		       dreg, sreg, (int) BFD_RELOC_LO16);
d7354 2
a7355 3
      load_register (&icnt, AT, &imm_expr, HAVE_64BIT_GPRS);
      macro_build ((char *) NULL, &icnt, (expressionS *) NULL, "slt", "d,v,t",
		   dreg, sreg, AT);
d7363 2
a7364 2
	  macro_build ((char *) NULL, &icnt, &imm_expr, "sltiu", "t,r,j",
		       dreg, sreg, (int) BFD_RELOC_LO16);
d7367 2
a7368 3
      load_register (&icnt, AT, &imm_expr, HAVE_64BIT_GPRS);
      macro_build ((char *) NULL, &icnt, (expressionS *) NULL, "sltu",
		   "d,v,t", dreg, sreg, AT);
d7373 1
a7373 2
	macro_build ((char *) NULL, &icnt, (expressionS *) NULL, "sltu",
		     "d,v,t", dreg, 0, treg);
d7375 1
a7375 2
	macro_build ((char *) NULL, &icnt, (expressionS *) NULL, "sltu",
		     "d,v,t", dreg, 0, sreg);
d7378 2
a7379 4
	  macro_build ((char *) NULL, &icnt, (expressionS *) NULL, "xor",
		       "d,v,t", dreg, sreg, treg);
	  macro_build ((char *) NULL, &icnt, (expressionS *) NULL, "sltu",
		       "d,v,t", dreg, 0, dreg);
d7386 1
a7386 2
	  macro_build ((char *) NULL, &icnt, (expressionS *) NULL, "sltu",
		       "d,v,t", dreg, 0, sreg);
d7393 2
a7394 3
	  macro_build ((char *) NULL, &icnt, &expr1,
		       HAVE_32BIT_GPRS ? "addiu" : "daddiu",
		       "t,r,j", dreg, 0, (int) BFD_RELOC_LO16);
d7401 1
a7401 2
	  macro_build ((char *) NULL, &icnt, &imm_expr, "xori", "t,r,i",
		       dreg, sreg, (int) BFD_RELOC_LO16);
d7409 2
a7410 3
	  macro_build ((char *) NULL, &icnt, &imm_expr,
		       HAVE_32BIT_GPRS ? "addiu" : "daddiu",
		       "t,r,j", dreg, sreg, (int) BFD_RELOC_LO16);
d7415 2
a7416 3
	  load_register (&icnt, AT, &imm_expr, HAVE_64BIT_GPRS);
	  macro_build ((char *) NULL, &icnt, (expressionS *) NULL, "xor",
		       "d,v,t", dreg, sreg, AT);
d7419 1
a7419 2
      macro_build ((char *) NULL, &icnt, (expressionS *) NULL, "sltu",
		   "d,v,t", dreg, 0, dreg);
d7432 2
a7433 3
	  macro_build ((char *) NULL, &icnt, &imm_expr,
		       dbl ? "daddi" : "addi",
		       "t,r,j", dreg, sreg, (int) BFD_RELOC_LO16);
d7436 2
a7437 3
      load_register (&icnt, AT, &imm_expr, dbl);
      macro_build ((char *) NULL, &icnt, (expressionS *) NULL,
		   dbl ? "dsub" : "sub", "d,v,t", dreg, sreg, AT);
d7448 2
a7449 3
	  macro_build ((char *) NULL, &icnt, &imm_expr,
		       dbl ? "daddiu" : "addiu",
		       "t,r,j", dreg, sreg, (int) BFD_RELOC_LO16);
d7452 2
a7453 3
      load_register (&icnt, AT, &imm_expr, dbl);
      macro_build ((char *) NULL, &icnt, (expressionS *) NULL,
		   dbl ? "dsubu" : "subu", "d,v,t", dreg, sreg, AT);
d7474 2
a7475 3
      load_register (&icnt, AT, &imm_expr, HAVE_64BIT_GPRS);
      macro_build ((char *) NULL, &icnt, (expressionS *) NULL, s, "s,t", sreg,
		   AT);
d7491 3
a7493 5
      macro_build ((char *) NULL, &icnt, (expressionS *) NULL, "cfc1", "t,G",
		   treg, RA);
      macro_build ((char *) NULL, &icnt, (expressionS *) NULL, "cfc1", "t,G",
		   treg, RA);
      macro_build ((char *) NULL, &icnt, (expressionS *) NULL, "nop", "");
d7495 1
a7495 2
      macro_build ((char *) NULL, &icnt, &expr1, "ori", "t,r,i", AT, treg,
		   (int) BFD_RELOC_LO16);
d7497 7
a7503 10
      macro_build ((char *) NULL, &icnt, &expr1, "xori", "t,r,i", AT, AT,
		     (int) BFD_RELOC_LO16);
      macro_build ((char *) NULL, &icnt, (expressionS *) NULL, "ctc1", "t,G",
		   AT, RA);
      macro_build ((char *) NULL, &icnt, (expressionS *) NULL, "nop", "");
      macro_build ((char *) NULL, &icnt, (expressionS *) NULL,
	      mask == M_TRUNCWD ? "cvt.w.d" : "cvt.w.s", "D,S", dreg, sreg);
      macro_build ((char *) NULL, &icnt, (expressionS *) NULL, "ctc1", "t,G",
		   treg, RA);
      macro_build ((char *) NULL, &icnt, (expressionS *) NULL, "nop", "");
d7517 1
a7517 2
      macro_build ((char *) NULL, &icnt, &offset_expr, s, "t,o(b)", AT,
		   (int) BFD_RELOC_LO16, breg);
d7522 3
a7524 6
      macro_build ((char *) NULL, &icnt, &offset_expr, "lbu", "t,o(b)", treg,
		   (int) BFD_RELOC_LO16, breg);
      macro_build ((char *) NULL, &icnt, (expressionS *) NULL, "sll", "d,w,<",
		   AT, AT, 8);
      macro_build ((char *) NULL, &icnt, (expressionS *) NULL, "or", "d,v,t",
		   treg, treg, AT);
d7545 1
a7545 2
      macro_build ((char *) NULL, &icnt, &offset_expr, s, "t,o(b)", tempreg,
		   (int) BFD_RELOC_LO16, breg);
d7550 1
a7550 2
      macro_build ((char *) NULL, &icnt, &offset_expr, s2, "t,o(b)", tempreg,
		   (int) BFD_RELOC_LO16, breg);
d7557 2
a7558 2
	macro_build ((char *) NULL, &icnt, (expressionS *) NULL, "nop", "");
      move_register (&icnt, treg, tempreg);
d7572 1
a7572 1
      load_address (&icnt, AT, &offset_expr, &used_at);
d7574 1
a7574 4
	macro_build ((char *) NULL, &icnt, (expressionS *) NULL,
		     HAVE_32BIT_ADDRESSES ? HAVE_NEWABI
		     ? "add" : "addu" : "daddu",
		     "d,v,t", AT, AT, breg);
d7579 1
a7579 2
      macro_build ((char *) NULL, &icnt, &expr1, s, "t,o(b)", treg,
		   (int) BFD_RELOC_LO16, AT);
d7584 1
a7584 2
      macro_build ((char *) NULL, &icnt, &expr1, s2, "t,o(b)", treg,
		   (int) BFD_RELOC_LO16, AT);
d7590 1
a7590 1
      load_address (&icnt, AT, &offset_expr, &used_at);
d7592 1
a7592 4
	macro_build ((char *) NULL, &icnt, (expressionS *) NULL,
		     HAVE_32BIT_ADDRESSES ? HAVE_NEWABI
		     ? "add" : "addu" : "daddu",
		     "d,v,t", AT, AT, breg);
d7595 2
a7596 3
      macro_build ((char *) NULL, &icnt, &expr1,
		   mask == M_ULH_A ? "lb" : "lbu", "t,o(b)", treg,
		   (int) BFD_RELOC_LO16, AT);
d7601 3
a7603 6
      macro_build ((char *) NULL, &icnt, &expr1, "lbu", "t,o(b)", AT,
		   (int) BFD_RELOC_LO16, AT);
      macro_build ((char *) NULL, &icnt, (expressionS *) NULL, "sll", "d,w,<",
		   treg, treg, 8);
      macro_build ((char *) NULL, &icnt, (expressionS *) NULL, "or", "d,v,t",
		   treg, treg, AT);
d7611 2
a7612 4
      macro_build ((char *) NULL, &icnt, &offset_expr, "sb", "t,o(b)", treg,
		   (int) BFD_RELOC_LO16, breg);
      macro_build ((char *) NULL, &icnt, (expressionS *) NULL, "srl", "d,w,<",
		   AT, treg, 8);
d7617 1
a7617 2
      macro_build ((char *) NULL, &icnt, &offset_expr, "sb", "t,o(b)", AT,
		   (int) BFD_RELOC_LO16, breg);
d7634 1
a7634 2
      macro_build ((char *) NULL, &icnt, &offset_expr, s, "t,o(b)", treg,
		   (int) BFD_RELOC_LO16, breg);
d7639 1
a7639 2
      macro_build ((char *) NULL, &icnt, &offset_expr, s2, "t,o(b)", treg,
		   (int) BFD_RELOC_LO16, breg);
d7653 1
a7653 1
      load_address (&icnt, AT, &offset_expr, &used_at);
d7655 1
a7655 4
	macro_build ((char *) NULL, &icnt, (expressionS *) NULL,
		     HAVE_32BIT_ADDRESSES ? HAVE_NEWABI
		     ? "add" : "addu" : "daddu",
		     "d,v,t", AT, AT, breg);
d7660 1
a7660 2
      macro_build ((char *) NULL, &icnt, &expr1, s, "t,o(b)", treg,
		   (int) BFD_RELOC_LO16, AT);
d7665 1
a7665 2
      macro_build ((char *) NULL, &icnt, &expr1, s2, "t,o(b)", treg,
		   (int) BFD_RELOC_LO16, AT);
d7670 1
a7670 1
      load_address (&icnt, AT, &offset_expr, &used_at);
d7672 1
a7672 4
	macro_build ((char *) NULL, &icnt, (expressionS *) NULL,
		     HAVE_32BIT_ADDRESSES ? HAVE_NEWABI
		     ? "add" : "addu" : "daddu",
		     "d,v,t", AT, AT, breg);
d7675 2
a7676 4
      macro_build ((char *) NULL, &icnt, &expr1, "sb", "t,o(b)", treg,
		   (int) BFD_RELOC_LO16, AT);
      macro_build ((char *) NULL, &icnt, (expressionS *) NULL, "srl", "d,w,<",
		   treg, treg, 8);
d7681 1
a7681 2
      macro_build ((char *) NULL, &icnt, &expr1, "sb", "t,o(b)", treg,
		   (int) BFD_RELOC_LO16, AT);
d7686 3
a7688 6
      macro_build ((char *) NULL, &icnt, &expr1, "lbu", "t,o(b)", AT,
		   (int) BFD_RELOC_LO16, AT);
      macro_build ((char *) NULL, &icnt, (expressionS *) NULL, "sll", "d,w,<",
		   treg, treg, 8);
      macro_build ((char *) NULL, &icnt, (expressionS *) NULL, "or", "d,v,t",
		   treg, treg, AT);
d7704 1
a7704 2
mips16_macro (ip)
     struct mips_cl_insn *ip;
a7707 1
  int icnt;
a7717 2
  icnt = 0;

d7743 1
a7743 3
      macro_build ((char *) NULL, &icnt, (expressionS *) NULL,
		   dbl ? "ddiv" : "div",
		   "0,x,y", xreg, yreg);
d7745 2
a7746 3
      macro_build ((char *) NULL, &icnt, &expr1, "bnez", "x,p", yreg);
      macro_build ((char *) NULL, &icnt, (expressionS *) NULL, "break", "6",
		   7);
d7753 1
a7753 1
      macro_build ((char *) NULL, &icnt, (expressionS *) NULL, s, "x", zreg);
d7775 1
a7775 2
      macro_build ((char *) NULL, &icnt, (expressionS *) NULL, s, "0,x,y",
		   xreg, yreg);
d7777 2
a7778 3
      macro_build ((char *) NULL, &icnt, &expr1, "bnez", "x,p", yreg);
      macro_build ((char *) NULL, &icnt, (expressionS *) NULL, "break",
		   "6", 7);
d7780 1
a7780 1
      macro_build ((char *) NULL, &icnt, (expressionS *) NULL, s2, "x", zreg);
d7786 2
a7787 4
      macro_build ((char *) NULL, &icnt, (expressionS *) NULL,
		   dbl ? "dmultu" : "multu", "x,y", xreg, yreg);
      macro_build ((char *) NULL, &icnt, (expressionS *) NULL, "mflo", "x",
		   zreg);
d7798 1
a7798 2
      macro_build ((char *) NULL, &icnt, &imm_expr,
		   dbl ? "daddiu" : "addiu", "y,x,4", yreg, xreg);
d7805 1
a7805 2
      macro_build ((char *) NULL, &icnt, &imm_expr, "addiu",
		   "x,k", xreg);
d7812 1
a7812 2
      macro_build ((char *) NULL, &icnt, &imm_expr, "daddiu",
		   "y,j", yreg);
d7861 2
a7862 3
      macro_build ((char *) NULL, &icnt, (expressionS *) NULL, s, "x,y",
		   xreg, yreg);
      macro_build ((char *) NULL, &icnt, &offset_expr, s2, "p");
d7921 2
a7922 2
      macro_build ((char *) NULL, &icnt, &imm_expr, s, s3, xreg);
      macro_build ((char *) NULL, &icnt, &offset_expr, s2, "p");
d7927 1
a7927 1
      macro_build ((char *) NULL, &icnt, &expr1, "slti", "x,8", yreg);
d7929 1
a7929 1
	move_register (&icnt, xreg, yreg);
d7931 2
a7932 3
      macro_build ((char *) NULL, &icnt, &expr1, "bteqz", "p");
      macro_build ((char *) NULL, &icnt, (expressionS *) NULL,
		   "neg", "x,w", xreg, xreg);
d7940 1
a7940 2
validate_mips_insn (opc)
     const struct mips_opcode *opc;
d7967 5
d8054 1
a8054 3
mips_ip (str, ip)
     char *str;
     struct mips_cl_insn *ip;
d8130 1
a8130 1
			    mips_arch))
d8137 1
a8137 1
	  if (mips_arch == CPU_R4650 && (insn->pinfo & FP_D) != 0)
d8154 4
a8157 9
		  if (mips_arch_info->is_isa)
		    sprintf (buf,
			     _("opcode not supported at this ISA level (%s)"),
			     mips_cpu_info_from_isa (mips_opts.isa)->name);
		  else
		    sprintf (buf,
			     _("opcode not supported on this processor: %s (%s)"),
			     mips_arch_info->name,
			     mips_cpu_info_from_isa (mips_opts.isa)->name);
d8231 6
d8256 6
d8288 10
d8325 10
d8820 1
d9141 12
a9152 1
		as_bad (_("invalid condition code register $fcc%d"), regno);
d9246 1
a9246 3
mips16_ip (str, ip)
     char *str;
     struct mips_cl_insn *ip;
d9314 1
d9853 4
a9856 12
mips16_immed (file, line, type, val, warn, small, ext, insn, use_extend,
	      extend)
     char *file;
     unsigned int line;
     int type;
     offsetT val;
     bfd_boolean warn;
     bfd_boolean small;
     bfd_boolean ext;
     unsigned long *insn;
     bfd_boolean *use_extend;
     unsigned short *extend;
d9987 1
a9987 3
parse_relocation (str, reloc)
     char **str;
     bfd_reloc_code_real_type *reloc;
d10019 2
a10020 4
my_getSmallExpression (ep, reloc, str)
     expressionS *ep;
     bfd_reloc_code_real_type *reloc;
     char *str;
d10075 1
a10075 3
my_getExpression (ep, str)
     expressionS *ep;
     char *str;
d10106 1
a10106 4
md_atof (type, litP, sizeP)
     int type;
     char *litP;
     int *sizeP;
d10138 1
a10138 1
	  md_number_to_chars (litP, (valueT) words[i], 2);
d10146 1
a10146 1
	  md_number_to_chars (litP, (valueT) words[i], 2);
d10155 1
a10155 4
md_number_to_chars (buf, val, n)
     char *buf;
     valueT val;
     int n;
d10186 1
a10186 1
const char *md_shortopts = "nO::g::G:";
d10190 7
a10196 1
#define OPTION_MIPS1 (OPTION_MD_BASE + 1)
d10199 1
a10199 1
#define OPTION_MIPS2 (OPTION_MD_BASE + 2)
d10201 1
a10201 1
#define OPTION_MIPS3 (OPTION_MD_BASE + 3)
d10203 1
a10203 1
#define OPTION_MIPS4 (OPTION_MD_BASE + 4)
d10205 1
a10205 1
#define OPTION_MIPS5 (OPTION_MD_BASE + 5)
d10207 1
a10207 1
#define OPTION_MIPS32 (OPTION_MD_BASE + 6)
d10209 1
a10209 1
#define OPTION_MIPS64 (OPTION_MD_BASE + 7)
d10211 54
a10264 1
#define OPTION_MEMBEDDED_PIC (OPTION_MD_BASE + 8)
d10266 1
a10266 1
#define OPTION_TRAP (OPTION_MD_BASE + 9)
d10269 1
a10269 1
#define OPTION_BREAK (OPTION_MD_BASE + 10)
d10272 1
a10272 1
#define OPTION_EB (OPTION_MD_BASE + 11)
d10274 1
a10274 1
#define OPTION_EL (OPTION_MD_BASE + 12)
d10276 1
a10276 10
#define OPTION_MIPS16 (OPTION_MD_BASE + 13)
  {"mips16", no_argument, NULL, OPTION_MIPS16},
#define OPTION_NO_MIPS16 (OPTION_MD_BASE + 14)
  {"no-mips16", no_argument, NULL, OPTION_NO_MIPS16},
#define OPTION_M7000_HILO_FIX (OPTION_MD_BASE + 15)
  {"mfix7000", no_argument, NULL, OPTION_M7000_HILO_FIX},
#define OPTION_MNO_7000_HILO_FIX (OPTION_MD_BASE + 16)
  {"no-fix-7000", no_argument, NULL, OPTION_MNO_7000_HILO_FIX},
  {"mno-fix7000", no_argument, NULL, OPTION_MNO_7000_HILO_FIX},
#define OPTION_FP32 (OPTION_MD_BASE + 17)
d10278 1
a10278 1
#define OPTION_GP32 (OPTION_MD_BASE + 18)
d10280 1
a10280 1
#define OPTION_CONSTRUCT_FLOATS (OPTION_MD_BASE + 19)
d10282 1
a10282 1
#define OPTION_NO_CONSTRUCT_FLOATS (OPTION_MD_BASE + 20)
d10284 1
a10284 5
#define OPTION_MARCH (OPTION_MD_BASE + 21)
  {"march", required_argument, NULL, OPTION_MARCH},
#define OPTION_MTUNE (OPTION_MD_BASE + 22)
  {"mtune", required_argument, NULL, OPTION_MTUNE},
#define OPTION_FP64 (OPTION_MD_BASE + 23)
d10286 1
a10286 17
#define OPTION_M4650 (OPTION_MD_BASE + 24)
  {"m4650", no_argument, NULL, OPTION_M4650},
#define OPTION_NO_M4650 (OPTION_MD_BASE + 25)
  {"no-m4650", no_argument, NULL, OPTION_NO_M4650},
#define OPTION_M4010 (OPTION_MD_BASE + 26)
  {"m4010", no_argument, NULL, OPTION_M4010},
#define OPTION_NO_M4010 (OPTION_MD_BASE + 27)
  {"no-m4010", no_argument, NULL, OPTION_NO_M4010},
#define OPTION_M4100 (OPTION_MD_BASE + 28)
  {"m4100", no_argument, NULL, OPTION_M4100},
#define OPTION_NO_M4100 (OPTION_MD_BASE + 29)
  {"no-m4100", no_argument, NULL, OPTION_NO_M4100},
#define OPTION_M3900 (OPTION_MD_BASE + 30)
  {"m3900", no_argument, NULL, OPTION_M3900},
#define OPTION_NO_M3900 (OPTION_MD_BASE + 31)
  {"no-m3900", no_argument, NULL, OPTION_NO_M3900},
#define OPTION_GP64 (OPTION_MD_BASE + 32)
d10288 2
a10289 14
#define OPTION_MIPS3D (OPTION_MD_BASE + 33)
  {"mips3d", no_argument, NULL, OPTION_MIPS3D},
#define OPTION_NO_MIPS3D (OPTION_MD_BASE + 34)
  {"no-mips3d", no_argument, NULL, OPTION_NO_MIPS3D},
#define OPTION_MDMX (OPTION_MD_BASE + 35)
  {"mdmx", no_argument, NULL, OPTION_MDMX},
#define OPTION_NO_MDMX (OPTION_MD_BASE + 36)
  {"no-mdmx", no_argument, NULL, OPTION_NO_MDMX},
#define OPTION_FIX_VR4122 (OPTION_MD_BASE + 37)
#define OPTION_NO_FIX_VR4122 (OPTION_MD_BASE + 38)
  {"mfix-vr4122-bugs",    no_argument, NULL, OPTION_FIX_VR4122},
  {"no-mfix-vr4122-bugs", no_argument, NULL, OPTION_NO_FIX_VR4122},
#define OPTION_RELAX_BRANCH (OPTION_MD_BASE + 39)
#define OPTION_NO_RELAX_BRANCH (OPTION_MD_BASE + 40)
d10292 2
a10293 2
#define OPTION_MIPS32R2 (OPTION_MD_BASE + 41)
  {"mips32r2", no_argument, NULL, OPTION_MIPS32R2},
d10295 1
a10295 1
#define OPTION_ELF_BASE    (OPTION_MD_BASE + 42)
d10315 4
d10320 1
d10332 1
a10332 2
mips_set_option_string (string_ptr, new_value)
     const char **string_ptr, *new_value;
d10343 1
a10343 3
md_parse_option (c, arg)
     int c;
     char *arg;
a10370 4
    case 'n':
      warn_nops = 1;
      break;

d10418 4
d10502 2
a10503 2
    case OPTION_FIX_VR4122:
      mips_fix_4122_bugs = 1;
d10506 2
a10507 2
    case OPTION_NO_FIX_VR4122:
      mips_fix_4122_bugs = 0;
d10529 1
d10545 1
d10667 8
d10688 1
a10688 2
mips_set_architecture (info)
     const struct mips_cpu_info *info;
d10692 2
a10693 2
      mips_arch_info = info;
      mips_arch = info->cpu;
d10702 1
a10702 2
mips_set_tune (info)
     const struct mips_cpu_info *info;
d10705 1
a10705 4
    {
      mips_tune_info = info;
      mips_tune = info->cpu;
    }
d10710 1
a10710 1
mips_after_parse_args ()
d10712 3
d10733 1
a10733 4
    mips_set_architecture (mips_parse_cpu ("-march", mips_arch_string));

  if (mips_tune_string != 0)
    mips_set_tune (mips_parse_cpu ("-mtune", mips_tune_string));
d10738 1
a10738 1
	 ISA level specified by -mipsN, while mips_opts.isa contains
d10740 1
a10740 1
      if (mips_arch_info != 0)
d10745 1
a10745 1
	  if (file_mips_isa != mips_opts.isa)
d10748 1
a10748 1
		    mips_cpu_info_from_isa (mips_opts.isa)->name);
d10751 1
a10751 1
	mips_set_architecture (mips_cpu_info_from_isa (file_mips_isa));
d10754 2
a10755 3
  if (mips_arch_info == 0)
    mips_set_architecture (mips_parse_cpu ("default CPU",
					   MIPS_CPU_STRING_DEFAULT));
d10757 1
a10757 1
  if (ABI_NEEDS_64BIT_REGS (mips_abi) && !ISA_HAS_64BIT_REGS (mips_opts.isa))
d10759 7
a10765 1
	    mips_arch_info->name);
d10767 4
a10770 3
  /* Optimize for mips_arch, unless -mtune selects a different processor.  */
  if (mips_tune_info == 0)
    mips_set_tune (mips_arch_info);
d10803 5
a10807 4
  /* ??? When do we want this flag to be set?   Who uses it?  */
  if (file_mips_gp32 == 1
      && mips_abi == NO_ABI
      && ISA_HAS_64BIT_REGS (mips_opts.isa))
d10816 1
a10816 1
    mips_opts.mips16 = (CPU_HAS_MIPS16 (mips_arch)) ? 1 : 0;
d10818 1
a10818 1
    mips_opts.ase_mips3d = (CPU_HAS_MIPS3D (mips_arch)) ? 1 : 0;
d10820 1
a10820 1
    mips_opts.ase_mdmx = (CPU_HAS_MDMX (mips_arch)) ? 1 : 0;
d10841 1
a10841 1
mips_init_after_args ()
d10849 1
a10849 2
md_pcrel_from (fixP)
     fixS *fixP;
d10851 10
a10860 7
  if (OUTPUT_FLAVOR != bfd_target_aout_flavour
      && fixP->fx_addsy != (symbolS *) NULL
      && ! S_IS_DEFINED (fixP->fx_addsy))
    return 4;

  /* Return the address of the delay slot.  */
  return fixP->fx_size + fixP->fx_where + fixP->fx_frag->fr_address;
d10871 1
a10871 1
mips_frob_file_before_adjust ()
d10887 1
a10887 1
mips_frob_file ()
d10986 1
a10986 2
mips_force_relocation (fixp)
     fixS *fixp;
d11019 1
a11019 3
mips_validate_fix (fixP, seg)
     struct fix *fixP;
     asection *seg;
d11065 3
a11067 2
	  as_warn_where (fixP->fx_file, fixP->fx_line,
			 _("Pretending global symbol used as branch target is local."));
a11082 26
#ifdef OBJ_ELF
static int
mips_need_elf_addend_fixup (fixP)
     fixS *fixP;
{
  if (S_GET_OTHER (fixP->fx_addsy) == STO_MIPS16)
    return 1;
  if (mips_pic == EMBEDDED_PIC
      && S_IS_WEAK (fixP->fx_addsy))
    return 1;
  if (mips_pic != EMBEDDED_PIC
      && (S_IS_WEAK (fixP->fx_addsy)
	  || S_IS_EXTERNAL (fixP->fx_addsy))
      && !S_IS_COMMON (fixP->fx_addsy))
    return 1;
  if (((bfd_get_section_flags (stdoutput,
			       S_GET_SEGMENT (fixP->fx_addsy))
	& (SEC_LINK_ONCE | SEC_MERGE)) != 0)
      || !strncmp (segment_name (S_GET_SEGMENT (fixP->fx_addsy)),
		   ".gnu.linkonce",
		   sizeof (".gnu.linkonce") - 1))
    return 1;
  return 0;
}
#endif

d11086 1
a11086 4
md_apply_fix3 (fixP, valP, seg)
     fixS *fixP;
     valueT *valP;
     segT seg ATTRIBUTE_UNUSED;
a11089 1
  valueT value;
d11091 1
d11093 4
a11096 4
  /* FIXME: Maybe just return for all reloc types not listed below?
     Eric Christopher says: "This is stupid, please rewrite md_apply_fix3. */
  if (fixP->fx_r_type == BFD_RELOC_8)
      return;
a11099 7
	  || fixP->fx_r_type == BFD_RELOC_32
	  || fixP->fx_r_type == BFD_RELOC_MIPS_JMP
	  || fixP->fx_r_type == BFD_RELOC_HI16_S
	  || fixP->fx_r_type == BFD_RELOC_LO16
	  || fixP->fx_r_type == BFD_RELOC_GPREL16
	  || fixP->fx_r_type == BFD_RELOC_MIPS_LITERAL
	  || fixP->fx_r_type == BFD_RELOC_GPREL32
a11102 5
	  || fixP->fx_r_type == BFD_RELOC_MIPS_HIGHEST
	  || fixP->fx_r_type == BFD_RELOC_MIPS_HIGHER
	  || fixP->fx_r_type == BFD_RELOC_MIPS_SCN_DISP
	  || fixP->fx_r_type == BFD_RELOC_MIPS_REL16
	  || fixP->fx_r_type == BFD_RELOC_MIPS_RELGOT
d11104 1
a11104 64
	  || fixP->fx_r_type == BFD_RELOC_VTABLE_ENTRY
	  || fixP->fx_r_type == BFD_RELOC_MIPS_JALR);

  value = *valP;

  /* If we aren't adjusting this fixup to be against the section
     symbol, we need to adjust the value.  */
#ifdef OBJ_ELF
  if (fixP->fx_addsy != NULL && OUTPUT_FLAVOR == bfd_target_elf_flavour)
    {
      if (mips_need_elf_addend_fixup (fixP))
	{
	  reloc_howto_type *howto;
	  valueT symval = S_GET_VALUE (fixP->fx_addsy);

	  value -= symval;

	  howto = bfd_reloc_type_lookup (stdoutput, fixP->fx_r_type);
	  if (value != 0 && howto && howto->partial_inplace)
	    {
	      /* In this case, the bfd_install_relocation routine will
		 incorrectly add the symbol value back in.  We just want
		 the addend to appear in the object file.

		 The condition above used to include
		 "&& (! fixP->fx_pcrel || howto->pcrel_offset)".

		 However, howto can't be trusted here, because we
		 might change the reloc type in tc_gen_reloc.  We can
		 check howto->partial_inplace because that conversion
		 happens to preserve howto->partial_inplace; but it
		 does not preserve howto->pcrel_offset.  I've just
		 eliminated the check, because all MIPS PC-relative
		 relocations are marked howto->pcrel_offset.

		 howto->pcrel_offset was originally added for
		 R_MIPS_PC16, which is generated for code like

		 	globl g1 .text
			.text
			.space 20
		 g1:
		 x:
		 	bal g1
	       */
	      value -= symval;

	      /* Make sure the addend is still non-zero.  If it became zero
		 after the last operation, set it to a spurious value and
		 subtract the same value from the object file's contents.  */
	      if (value == 0)
		{
		  value = 8;

		  /* The in-place addends for LO16 relocations are signed;
		     leave the matching HI16 in-place addends as zero.  */
		  if (fixP->fx_r_type != BFD_RELOC_HI16_S)
		    {
		      bfd_vma contents, mask, field;

		      contents = bfd_get_bits (fixP->fx_frag->fr_literal
					       + fixP->fx_where,
					       fixP->fx_size * 8,
					       target_big_endian);
d11106 1
a11106 35
		      /* MASK has bits set where the relocation should go.
			 FIELD is -value, shifted into the appropriate place
			 for this relocation.  */
		      mask = 1 << (howto->bitsize - 1);
		      mask = (((mask - 1) << 1) | 1) << howto->bitpos;
		      field = (-value >> howto->rightshift) << howto->bitpos;

		      bfd_put_bits ((field & mask) | (contents & ~mask),
				    fixP->fx_frag->fr_literal + fixP->fx_where,
				    fixP->fx_size * 8,
				    target_big_endian);
		    }
		}
	    }
	}

      /* This code was generated using trial and error and so is
	 fragile and not trustworthy.  If you change it, you should
	 rerun the elf-rel, elf-rel2, and empic testcases and ensure
	 they still pass.  */
      if (fixP->fx_pcrel || fixP->fx_subsy != NULL)
	{
	  value += fixP->fx_frag->fr_address + fixP->fx_where;

	  /* BFD's REL handling, for MIPS, is _very_ weird.
	     This gives the right results, but it can't possibly
	     be the way things are supposed to work.  */
	  if (fixP->fx_r_type != BFD_RELOC_16_PCREL_S2
	      || S_GET_SEGMENT (fixP->fx_addsy) != undefined_section)
	    value += fixP->fx_frag->fr_address + fixP->fx_where;
	}
    }
#endif

  fixP->fx_addnumber = value;	/* Remember value for tc_gen_reloc.  */
d11160 1
a11160 1
      fixP->fx_addnumber = 0;
d11166 1
a11166 3
      if (OUTPUT_FLAVOR == bfd_target_elf_flavour
	  && !fixP->fx_done
	  && value != 0)
d11174 1
a11174 1
	  value += (fixP->fx_next->fx_frag->fr_address
d11177 1
a11177 2
      value = ((value + 0x8000) >> 16) & 0xffff;
      buf = (bfd_byte *) fixP->fx_frag->fr_literal + fixP->fx_where;
d11180 1
a11180 1
      md_number_to_chars ((char *) buf, value, 2);
d11186 1
a11186 3
      if (OUTPUT_FLAVOR == bfd_target_elf_flavour
	  && !fixP->fx_done
	  && value != 0)
d11190 1
a11190 2
	value += fixP->fx_frag->fr_address + fixP->fx_where;
      buf = (bfd_byte *) fixP->fx_frag->fr_literal + fixP->fx_where;
d11193 1
a11193 1
      md_number_to_chars ((char *) buf, value, 2);
d11203 1
a11203 2
	    md_number_to_chars (fixP->fx_frag->fr_literal + fixP->fx_where,
				value, 8);
d11206 1
a11206 2
	      long w1, w2;
	      long hiv;
d11208 1
a11208 7
	      w1 = w2 = fixP->fx_where;
	      if (target_big_endian)
		w1 += 4;
	      else
		w2 += 4;
	      md_number_to_chars (fixP->fx_frag->fr_literal + w1, value, 4);
	      if ((value & 0x80000000) != 0)
d11212 4
a11215 1
	      md_number_to_chars (fixP->fx_frag->fr_literal + w2, hiv, 4);
d11229 1
a11229 2
	md_number_to_chars (fixP->fx_frag->fr_literal + fixP->fx_where,
			    value, 4);
d11237 1
a11237 2
	md_number_to_chars (fixP->fx_frag->fr_literal + fixP->fx_where,
			    value, 2);
d11245 1
a11245 1
	  if (value + 0x8000 > 0xffff)
a11247 1
	  buf = (bfd_byte *) fixP->fx_frag->fr_literal + fixP->fx_where;
d11250 1
a11250 1
	  md_number_to_chars ((char *) buf, value, 2);
d11255 1
a11255 1
      if ((value & 0x3) != 0)
d11257 1
a11257 1
		      _("Branch to odd address (%lx)"), (long) value);
d11264 1
a11264 1
      if (!fixP->fx_done && (value != 0 || HAVE_NEWABI))
a11265 10
      /* If 'value' is zero, the remaining reloc code won't actually
	 do the store, so it must be done here.  This is probably
	 a bug somewhere.  */
      if (!fixP->fx_done
	  && (fixP->fx_r_type != BFD_RELOC_16_PCREL_S2
	      || fixP->fx_addsy == NULL			/* ??? */
	      || ! S_IS_DEFINED (fixP->fx_addsy)))
	value -= fixP->fx_frag->fr_address + fixP->fx_where;

      value = (offsetT) value >> 2;
a11267 1
      buf = (bfd_byte *) (fixP->fx_where + fixP->fx_frag->fr_literal);
d11273 13
a11285 3
      if (value + 0x8000 <= 0xffff)
	insn |= value & 0xffff;
      else
d11290 2
a11291 18
	  if (mips_pic == NO_PIC
	      && fixP->fx_done
	      && fixP->fx_frag->fr_address >= text_section->vma
	      && (fixP->fx_frag->fr_address
		  < text_section->vma + text_section->_raw_size)
	      && ((insn & 0xffff0000) == 0x10000000	 /* beq $0,$0 */
		  || (insn & 0xffff0000) == 0x04010000	 /* bgez $0 */
		  || (insn & 0xffff0000) == 0x04110000)) /* bgezal $0 */
	    {
	      if ((insn & 0xffff0000) == 0x04110000)	 /* bgezal $0 */
		insn = 0x0c000000;	/* jal */
	      else
		insn = 0x08000000;	/* j */
	      fixP->fx_r_type = BFD_RELOC_MIPS_JMP;
	      fixP->fx_done = 0;
	      fixP->fx_addsy = section_symbol (text_section);
	      fixP->fx_addnumber = (value << 2) + md_pcrel_from (fixP);
	    }
d11293 14
a11306 7
	    {
	      /* If we got here, we have branch-relaxation disabled,
		 and there's nothing we can do to fix this instruction
		 without turning it into a longer sequence.  */
	      as_bad_where (fixP->fx_file, fixP->fx_line,
			    _("Branch out of range"));
	    }
a11307 2

      md_number_to_chars ((char *) buf, (valueT) insn, 4);
d11325 3
d11332 1
a11332 2
printInsn (oc)
     unsigned long oc;
d11418 1
a11418 1
get_symbol ()
d11435 1
a11435 4
mips_align (to, fill, label)
     int to;
     int fill;
     symbolS *label;
d11452 1
a11452 2
s_align (x)
     int x ATTRIBUTE_UNUSED;
d11460 1
a11460 1
    o  Note that the assembler pulls down any immediately preceeding label
d11500 1
a11500 1
mips_flush_pending_output ()
d11507 1
a11507 2
s_change_sec (sec)
     int sec;
d11595 1
a11595 2
s_change_section (ignore)
     int ignore ATTRIBUTE_UNUSED;
d11645 16
d11670 1
a11670 1
mips_enable_auto_align ()
d11676 1
a11676 2
s_cons (log_size)
     int log_size;
d11689 1
a11689 2
s_float_cons (type)
     int type;
d11717 1
a11717 2
s_mips_globl (x)
     int x ATTRIBUTE_UNUSED;
d11757 1
a11757 2
s_option (x)
     int x ATTRIBUTE_UNUSED;
d11777 1
d11779 2
d11812 1
a11812 2
s_mipsset (x)
     int x ATTRIBUTE_UNUSED;
d11888 1
a11888 1
  else if (strncmp (name, "mips", 4) == 0)
d11892 2
a11893 2
      /* Permit the user to change the ISA on the fly.  Needless to
	 say, misuse can cause serious problems.  */
d11915 21
d11954 1
d12021 1
a12021 2
s_abicalls (ignore)
     int ignore ATTRIBUTE_UNUSED;
d12024 1
d12046 1
a12046 2
s_cpload (ignore)
     int ignore ATTRIBUTE_UNUSED;
a12048 1
  int icnt = 0;
d12070 7
a12076 6
  macro_build_lui (NULL, &icnt, &ex, mips_gp_register);
  macro_build ((char *) NULL, &icnt, &ex, "addiu", "t,r,j",
	       mips_gp_register, mips_gp_register, (int) BFD_RELOC_LO16);

  macro_build ((char *) NULL, &icnt, (expressionS *) NULL, "addu", "d,v,t",
	       mips_gp_register, mips_gp_register, tc_get_register (0));
d12097 1
a12097 2
s_cpsetup (ignore)
     int ignore ATTRIBUTE_UNUSED;
a12101 1
  int icnt = 0;
d12143 1
d12151 2
a12152 2
      macro_build ((char *) NULL, &icnt, &ex_off, "sd", "t,o(b)",
		   mips_gp_register, (int) BFD_RELOC_LO16, SP);
d12155 2
a12156 2
    macro_build ((char *) NULL, &icnt, (expressionS *) NULL, "daddu",
		 "d,v,t", mips_cpreturn_register, mips_gp_register, 0);
d12162 1
a12162 2
  macro_build ((char *) NULL, &icnt, &ex_sym, "lui", "t,u", mips_gp_register,
	       (int) BFD_RELOC_GPREL16);
d12164 1
a12164 1
	   0, NULL, 0, 0, BFD_RELOC_MIPS_SUB);
d12166 1
a12166 1
	   0, NULL, 0, 0, BFD_RELOC_HI16_S);
d12169 2
a12170 2
  macro_build ((char *) NULL, &icnt, &ex_sym, "addiu", "t,r,j",
	       mips_gp_register, mips_gp_register, (int) BFD_RELOC_GPREL16);
d12172 1
a12172 1
	   0, NULL, 0, 0, BFD_RELOC_MIPS_SUB);
d12174 1
a12174 1
	   0, NULL, 0, 0, BFD_RELOC_LO16);
d12176 3
a12178 3
  macro_build ((char *) NULL, &icnt, (expressionS *) NULL,
	       HAVE_64BIT_ADDRESSES ? "daddu" : "add", "d,v,t",
	       mips_gp_register, mips_gp_register, reg1);
d12184 1
a12184 2
s_cplocal (ignore)
     int ignore ATTRIBUTE_UNUSED;
d12203 1
a12203 2
s_cprestore (ignore)
     int ignore ATTRIBUTE_UNUSED;
a12205 1
  int icnt = 0;
d12223 4
a12226 3
  macro_build_ldst_constoffset ((char *) NULL, &icnt, &ex,
				HAVE_32BIT_ADDRESSES ? "sw" : "sd",
				mips_gp_register, SP);
d12232 1
a12232 1
   was given in the preceeding .gpsetup, it results in:
d12236 1
a12236 1
     daddiu	$gp, $gp, $reg2
d12239 1
a12239 2
s_cpreturn (ignore)
     int ignore ATTRIBUTE_UNUSED;
a12241 1
  int icnt = 0;
d12251 1
d12259 1
a12259 2
      macro_build ((char *) NULL, &icnt, &ex, "ld", "t,o(b)",
		   mips_gp_register, (int) BFD_RELOC_LO16, SP);
d12262 3
a12264 2
    macro_build ((char *) NULL, &icnt, (expressionS *) NULL, "daddu",
		 "d,v,t", mips_gp_register, mips_cpreturn_register, 0);
d12273 1
a12273 2
s_gpvalue (ignore)
     int ignore ATTRIBUTE_UNUSED;
d12292 1
a12292 2
s_gpword (ignore)
     int ignore ATTRIBUTE_UNUSED;
d12320 1
a12320 1
  md_number_to_chars (p, (valueT) 0, 4);
d12328 1
a12328 2
s_gpdword (ignore)
     int ignore ATTRIBUTE_UNUSED;
d12356 2
a12357 2
  md_number_to_chars (p, (valueT) 0, 8);
  fix_new_exp (frag_now, p - frag_now->fr_literal, 8, &ex, FALSE,
d12374 1
a12374 2
s_cpadd (ignore)
     int ignore ATTRIBUTE_UNUSED;
a12375 1
  int icnt = 0;
d12386 1
d12388 2
a12389 3
  macro_build ((char *) NULL, &icnt, (expressionS *) NULL,
	       HAVE_32BIT_ADDRESSES ? HAVE_NEWABI ? "add" : "addu" : "daddu",
	       "d,v,t", reg, reg, mips_gp_register);
d12404 1
a12404 2
s_insn (ignore)
     int ignore ATTRIBUTE_UNUSED;
d12418 1
a12418 2
s_mips_stab (type)
     int type;
d12430 1
a12430 2
s_mips_weakext (ignore)
     int ignore ATTRIBUTE_UNUSED;
d12479 1
a12479 2
tc_get_register (frame)
     int frame;
d12558 1
a12558 3
md_section_align (seg, addr)
     asection *seg;
     valueT addr;
d12582 1
a12582 3
nopic_need_relax (sym, before_relaxing)
     symbolS *sym;
     int before_relaxing;
d12650 1
a12650 3
pic_need_relax (sym, segtype)
     symbolS *sym;
     asection *segtype;
d12706 1
a12706 4
mips16_extended_frag (fragp, sec, stretch)
     fragS *fragp;
     asection *sec;
     long stretch;
d12906 1
a12906 4
relaxed_branch_length (fragp, sec, update)
     fragS *fragp;
     asection *sec;
     int update;
d12970 1
a12970 3
md_estimate_size_before_relax (fragp, segtype)
     fragS *fragp;
     asection *segtype;
d12996 2
a12997 13
      /* Record the offset to the first reloc in the fr_opcode field.
	 This lets md_convert_frag and tc_gen_reloc know that the code
	 must be expanded.  */
      fragp->fr_opcode = (fragp->fr_literal
			  + fragp->fr_fix
			  - RELAX_OLD (fragp->fr_subtype)
			  + RELAX_RELOC1 (fragp->fr_subtype));
      /* FIXME: This really needs as_warn_where.  */
      if (RELAX_WARN (fragp->fr_subtype))
	as_warn (_("AT used after \".set noat\" or macro used after "
		   "\".set nomacro\""));

      return RELAX_NEW (fragp->fr_subtype) - RELAX_OLD (fragp->fr_subtype);
d12999 2
a13000 2

  return 0;
d13011 1
a13011 2
mips_fix_adjustable (fixp)
     fixS *fixp;
d13037 1
a13037 3
tc_gen_reloc (section, fixp)
     asection *section ATTRIBUTE_UNUSED;
     fixS *fixp;
d13043 2
a13044 3
  reloc = retval[0] = (arelent *) xmalloc (sizeof (arelent));
  retval[1] = NULL;

d13060 1
a13060 1
  else if (fixp->fx_r_type == BFD_RELOC_PCREL_LO16)
d13062 14
a13076 2
	reloc->addend = fixp->fx_addnumber;
      else
d13078 8
a13085 1
	  /* We use a special addend for an internal RELLO reloc.  */
d13087 1
a13087 1
	    reloc->addend = reloc->address - S_GET_VALUE (fixp->fx_subsy);
d13089 1
a13089 1
	    reloc->addend = fixp->fx_addnumber + reloc->address;
a13090 10
    }
  else if (fixp->fx_r_type == BFD_RELOC_PCREL_HI16_S)
    {
      assert (fixp->fx_next != NULL
	      && fixp->fx_next->fx_r_type == BFD_RELOC_PCREL_LO16);

      /* The reloc is relative to the RELLO; adjust the addend
	 accordingly.  */
      if (OUTPUT_FLAVOR == bfd_target_elf_flavour)
	reloc->addend = fixp->fx_next->fx_addnumber;
d13093 4
a13096 5
	  /* We use a special addend for an internal RELHI reloc.  */
	  if (symbol_section_p (fixp->fx_addsy))
	    reloc->addend = (fixp->fx_next->fx_frag->fr_address
			     + fixp->fx_next->fx_where
			     - S_GET_VALUE (fixp->fx_subsy));
d13098 1
a13098 3
	    reloc->addend = (fixp->fx_addnumber
			     + fixp->fx_next->fx_frag->fr_address
			     + fixp->fx_next->fx_where);
d13101 1
a13101 1
  else if (fixp->fx_pcrel == 0 || OUTPUT_FLAVOR == bfd_target_elf_flavour)
a13102 118
  else
    {
      if (OUTPUT_FLAVOR != bfd_target_aout_flavour)
	/* A gruesome hack which is a result of the gruesome gas reloc
	   handling.  */
	reloc->addend = reloc->address;
      else
	reloc->addend = -reloc->address;
    }

  /* If this is a variant frag, we may need to adjust the existing
     reloc and generate a new one.  */
  if (fixp->fx_frag->fr_opcode != NULL
      && ((fixp->fx_r_type == BFD_RELOC_GPREL16
	   && ! HAVE_NEWABI)
	  || (fixp->fx_r_type == BFD_RELOC_MIPS_GOT_DISP
	      && HAVE_NEWABI)
	  || fixp->fx_r_type == BFD_RELOC_MIPS_GOT16
	  || fixp->fx_r_type == BFD_RELOC_MIPS_CALL16
	  || fixp->fx_r_type == BFD_RELOC_MIPS_GOT_HI16
	  || fixp->fx_r_type == BFD_RELOC_MIPS_GOT_LO16
	  || fixp->fx_r_type == BFD_RELOC_MIPS_CALL_HI16
	  || fixp->fx_r_type == BFD_RELOC_MIPS_CALL_LO16)
    )
    {
      arelent *reloc2;

      assert (! RELAX_MIPS16_P (fixp->fx_frag->fr_subtype));

      /* If this is not the last reloc in this frag, then we have two
	 GPREL relocs, or a GOT_HI16/GOT_LO16 pair, or a
	 CALL_HI16/CALL_LO16, both of which are being replaced.  Let
	 the second one handle all of them.  */
      if (fixp->fx_next != NULL
	  && fixp->fx_frag == fixp->fx_next->fx_frag)
	{
	  assert ((fixp->fx_r_type == BFD_RELOC_GPREL16
		   && fixp->fx_next->fx_r_type == BFD_RELOC_GPREL16)
		  || (fixp->fx_r_type == BFD_RELOC_MIPS_GOT_HI16
		      && (fixp->fx_next->fx_r_type
			  == BFD_RELOC_MIPS_GOT_LO16))
		  || (fixp->fx_r_type == BFD_RELOC_MIPS_CALL_HI16
		      && (fixp->fx_next->fx_r_type
			  == BFD_RELOC_MIPS_CALL_LO16)));
	  retval[0] = NULL;
	  return retval;
	}

      fixp->fx_where = fixp->fx_frag->fr_opcode - fixp->fx_frag->fr_literal;
      reloc->address = fixp->fx_frag->fr_address + fixp->fx_where;
      reloc->addend += fixp->fx_frag->tc_frag_data.tc_fr_offset;
      reloc2 = retval[1] = (arelent *) xmalloc (sizeof (arelent));
      retval[2] = NULL;
      reloc2->sym_ptr_ptr = (asymbol **) xmalloc (sizeof (asymbol *));
      *reloc2->sym_ptr_ptr = symbol_get_bfdsym (fixp->fx_addsy);
      reloc2->address = (reloc->address
			 + (RELAX_RELOC2 (fixp->fx_frag->fr_subtype)
			    - RELAX_RELOC1 (fixp->fx_frag->fr_subtype)));
      reloc2->addend = fixp->fx_addnumber
	+ fixp->fx_frag->tc_frag_data.tc_fr_offset;
      reloc2->howto = bfd_reloc_type_lookup (stdoutput, BFD_RELOC_LO16);
      assert (reloc2->howto != NULL);

      if (RELAX_RELOC3 (fixp->fx_frag->fr_subtype))
	{
	  arelent *reloc3;

	  reloc3 = retval[2] = (arelent *) xmalloc (sizeof (arelent));
	  retval[3] = NULL;
	  *reloc3 = *reloc2;
	  reloc3->address += 4;
	}

      if (mips_pic == NO_PIC)
	{
	  assert (fixp->fx_r_type == BFD_RELOC_GPREL16);
	  fixp->fx_r_type = BFD_RELOC_HI16_S;
	}
      else if (mips_pic == SVR4_PIC)
	{
	  switch (fixp->fx_r_type)
	    {
	    default:
	      abort ();
	    case BFD_RELOC_MIPS_GOT16:
	      break;
	    case BFD_RELOC_MIPS_GOT_LO16:
	    case BFD_RELOC_MIPS_CALL_LO16:
	      if (HAVE_NEWABI)
		{
		  fixp->fx_r_type = BFD_RELOC_MIPS_GOT_PAGE;
		  reloc2->howto = bfd_reloc_type_lookup
		    (stdoutput, BFD_RELOC_MIPS_GOT_OFST);
		}
	      else
		fixp->fx_r_type = BFD_RELOC_MIPS_GOT16;
	      break;
	    case BFD_RELOC_MIPS_CALL16:
	    case BFD_RELOC_MIPS_GOT_OFST:
	    case BFD_RELOC_MIPS_GOT_DISP:
	      if (HAVE_NEWABI)
		{
		  /* It may seem nonsensical to relax GOT_DISP to
		     GOT_DISP, but we're actually turning a GOT_DISP
		     without offset into a GOT_DISP with an offset,
		     getting rid of the separate addition, which we can
		     do when the symbol is found to be local.  */
		  fixp->fx_r_type = BFD_RELOC_MIPS_GOT_DISP;
		  retval[1] = NULL;
		}
	      else
		fixp->fx_r_type = BFD_RELOC_MIPS_GOT16;
	      break;
	    }
	}
      else
	abort ();
    }
a13147 13
#ifdef OBJ_ELF
  /* md_apply_fix3 has a double-subtraction hack to get
     bfd_install_relocation to behave nicely.  GPREL relocations are
     handled correctly without this hack, so undo it here.  We can't
     stop md_apply_fix3 from subtracting twice in the first place since
     the fake addend is required for variant frags above.  */
  if (fixp->fx_addsy != NULL && OUTPUT_FLAVOR == bfd_target_elf_flavour
      && (code == BFD_RELOC_GPREL16 || code == BFD_RELOC_MIPS16_GPREL)
      && reloc->addend != 0
      && mips_need_elf_addend_fixup (fixp))
    reloc->addend += S_GET_VALUE (fixp->fx_addsy);
#endif

d13174 1
a13174 4
mips_relax_frag (sec, fragp, stretch)
     asection *sec;
     fragS *fragp;
     long stretch;
d13209 1
a13209 4
md_convert_frag (abfd, asec, fragp)
     bfd *abfd ATTRIBUTE_UNUSED;
     segT asec;
     fragS *fragp;
a13210 3
  int old, new;
  char *fixptr;

d13240 1
a13240 1
	  md_number_to_chars ((char *)buf, insn, 4);
d13312 1
a13312 1
	  md_number_to_chars ((char *)buf, insn, 4);
d13316 1
a13316 1
	  md_number_to_chars ((char*)buf, 0, 4);
d13335 1
a13335 1
	      md_number_to_chars ((char *)buf, insn, 4);
d13338 1
a13338 1
	      md_number_to_chars ((char *)buf, 0, 4);
d13357 1
a13357 1
	      md_number_to_chars ((char*)buf, insn, 4);
d13379 1
a13379 1
	      md_number_to_chars ((char*)buf, insn, 4);
d13385 1
a13385 1
		  md_number_to_chars ((char*)buf, 0, 4);
d13397 1
a13397 1
	      md_number_to_chars ((char*)buf, insn, 4);
d13406 1
a13406 1
	      md_number_to_chars ((char*)buf, insn, 4);
d13499 1
a13499 1
	  md_number_to_chars ((char *) buf, 0xf000 | extend, 2);
d13504 1
a13504 1
      md_number_to_chars ((char *) buf, insn, 2);
d13510 27
a13536 2
      if (fragp->fr_opcode == NULL)
	return;
d13538 11
a13548 3
      old = RELAX_OLD (fragp->fr_subtype);
      new = RELAX_NEW (fragp->fr_subtype);
      fixptr = fragp->fr_literal + fragp->fr_fix;
d13550 4
a13553 2
      if (new > 0)
	memmove (fixptr - old, fixptr, new);
d13555 6
a13560 1
      fragp->fr_fix += new - old;
d13571 1
a13571 1
mips_frob_file_after_relocs ()
d13602 1
a13602 2
mips_define_label (sym)
     symbolS *sym;
d13624 1
a13624 1
mips_elf_final_processing ()
d13664 1
d13666 4
d13722 1
a13722 2
mips_handle_align (fragp)
     fragS *fragp;
d13752 1
a13752 1
md_obj_begin ()
d13757 1
a13757 1
md_obj_end ()
d13765 1
a13765 1
get_number ()
d13820 1
a13820 2
s_mips_file (x)
     int x ATTRIBUTE_UNUSED;
d13851 1
a13851 2
s_mips_loc (x)
     int x ATTRIBUTE_UNUSED;
d13860 1
a13860 2
s_mips_end (x)
     int x ATTRIBUTE_UNUSED;
d13901 2
a13902 1
  if (OUTPUT_FLAVOR == bfd_target_elf_flavour && ! ECOFF_DEBUGGING)
d13927 7
a13933 7
      md_number_to_chars (fragp,      (valueT) cur_proc_ptr->reg_mask, 4);
      md_number_to_chars (fragp +  4, (valueT) cur_proc_ptr->reg_offset, 4);
      md_number_to_chars (fragp +  8, (valueT) cur_proc_ptr->fpreg_mask, 4);
      md_number_to_chars (fragp + 12, (valueT) cur_proc_ptr->fpreg_offset, 4);
      md_number_to_chars (fragp + 16, (valueT) cur_proc_ptr->frame_offset, 4);
      md_number_to_chars (fragp + 20, (valueT) cur_proc_ptr->frame_reg, 4);
      md_number_to_chars (fragp + 24, (valueT) cur_proc_ptr->pc_reg, 4);
d13945 1
a13945 2
s_mips_ent (aent)
     int aent;
d13993 1
a13993 2
s_mips_frame (ignore)
     int ignore ATTRIBUTE_UNUSED;
d14036 1
a14036 2
s_mips_mask (reg_type)
     char reg_type;
d14082 1
a14082 2
s_loc (x)
     int x;
d14117 1
d14153 2
a14154 1
  { "r7000",          0,      ISA_MIPS4,      CPU_R5000 },
d14157 1
a14157 1
  { "4kc",            0,      ISA_MIPS32,     CPU_MIPS32, },
d14179 1
a14179 2
mips_strict_matching_cpu_name_p (canonical, given)
     const char *canonical, *given;
d14195 1
a14195 2
mips_matching_cpu_name_p (canonical, given)
     const char *canonical, *given;
d14230 1
a14230 2
mips_parse_cpu (option, cpu_string)
     const char *option, *cpu_string;
d14276 1
a14276 2
mips_cpu_info_from_isa (isa)
     int isa;
d14287 12
d14301 1
a14301 5
show (stream, string, col_p, first_p)
     FILE *stream;
     const char *string;
     int *col_p;
     int *first_p;
d14327 1
a14327 2
md_show_usage (stream)
     FILE *stream;
d14349 1
d14376 1
a14380 1
-n			warn about NOPs generated from macros\n\
d14389 1
d14410 1
a14410 1
mips_dwarf2_format ()
d14422 9
@


1.8
log
@resolve conflicts.
@
text
@d2 1
a2 1
   Copyright 1993, 1994, 1995, 1996, 1997, 1998, 1999, 2000, 2001
d29 1
a29 2

#include <ctype.h>
d40 1
d80 2
d88 1
a108 36
/* 1 is we should use the 64 bit MIPS ELF ABI, 0 if we should use the
   32 bit ABI.  This has no meaning for ECOFF.
   Note that the default is always 32 bit, even if "configured" for
   64 bit [e.g. --target=mips64-elf].  */
static int mips_64;

/* The default target format to use.  */

const char *
mips_target_format ()
{
  switch (OUTPUT_FLAVOR)
    {
    case bfd_target_aout_flavour:
      return target_big_endian ? "a.out-mips-big" : "a.out-mips-little";
    case bfd_target_ecoff_flavour:
      return target_big_endian ? "ecoff-bigmips" : ECOFF_LITTLE_FORMAT;
    case bfd_target_coff_flavour:
      return "pe-mips";
    case bfd_target_elf_flavour:
#ifdef TE_TMIPS
      /* This is traditional mips */
      return (target_big_endian
	      ? (mips_64 ? "elf64-tradbigmips" : "elf32-tradbigmips")
	      : (mips_64 ? "elf64-tradlittlemips" : "elf32-tradlittlemips"));
#else
      return (target_big_endian
	      ? (mips_64 ? "elf64-bigmips" : "elf32-bigmips")
	      : (mips_64 ? "elf64-littlemips" : "elf32-littlemips"));
#endif
    default:
      abort ();
      return NULL;
    }
}

d120 14
d144 5
d175 5
d182 6
d189 1
a189 1
   that we must set the isa field to ISA_UNKNOWN and the mips16 field to
d194 1
a194 1
  ISA_UNKNOWN, -1, 0, 0, 0, 0, 0, 0
d206 22
a227 5
/* The CPU type we are using for this output file.  */
static int mips_cpu = CPU_UNKNOWN;

/* The argument of the -mabi= flag.  */
static char * mips_abi_string = 0;
d229 1
a229 5
/* Wether we should mark the file EABI64 or EABI32.  */
static int mips_eabi64 = 0;

/* If they asked for mips1 or mips2 and a cpu that is
   mips3 or greater, then mark the object file 32BITMODE.  */
a231 3
/* True if -mgp32 was passed.  */
static int mips_gp32 = 0;

d246 9
d263 49
a311 3
/* Whether the processor uses hardware interlocks to protect
   reads from the HI and LO registers, and thus does not
   require nops to be inserted.
d313 2
a314 18
   FIXME: GCC makes a distinction between -mcpu=FOO and -mFOO:
   -mcpu=FOO schedules for FOO, but still produces code that meets the
   requirements of MIPS ISA I.  For example, it won't generate any
   FOO-specific instructions, and it will still assume that any
   scheduling hazards described in MIPS ISA I are there, even if FOO
   has interlocks.  -mFOO gives GCC permission to generate code that
   will only run on a FOO; it will generate FOO-specific instructions,
   and assume interlocks provided by a FOO.

   However, GAS currently doesn't make this distinction; before Jan 28
   1999, GAS's -mcpu=FOO implied -mFOO, which violates GCC's
   assumptions.  The GCC driver passes these flags through to GAS, so
   if GAS actually does anything that doesn't meet MIPS ISA I with
   -mFOO, then GCC's -mcpu=FOO flag isn't going to work.

   And furthermore, it did not assume that -mFOO implied -mcpu=FOO,
   which seems senseless --- why generate code which will only run on
   a FOO, but schedule for something else?
d316 2
a317 1
   So now, at least, -mcpu=FOO and -mFOO are exactly equivalent.
d319 3
a321 1
   -- Jim Blandy <jimb@@cygnus.com> */
d323 3
a325 1
#define hilo_interlocks (mips_cpu == CPU_R4010                       \
d332 3
a334 1
   || mips_cpu == CPU_R3900)
d339 4
a342 1
#define cop_interlocks (mips_cpu == CPU_R4300                        \
d351 1
a351 18
enum mips_pic_level
{
  /* Do not generate PIC code.  */
  NO_PIC,

  /* Generate PIC code as in Irix 4.  This is not implemented, and I'm
     not sure what it is supposed to do.  */
  IRIX4_PIC,

  /* Generate PIC code as in the SVR4 MIPS ABI.  */
  SVR4_PIC,

  /* Generate PIC code without using a global offset table: the data
     segment has a maximum size of 64K, all data references are off
     the $gp register, and all text references are PC relative.  This
     is used on some embedded systems.  */
  EMBEDDED_PIC
};
d353 2
a354 1
static enum mips_pic_level mips_pic;
d356 1
a356 1
/* 1 if we should generate 32 bit offsets from the GP register in
d358 1
a358 1
static int mips_big_got;
d362 1
a362 1
static int mips_trap;
d365 1
a365 1
   by a assembling two single width halves into two single width floating
d447 12
d463 4
d500 1
a500 1
static bfd_reloc_code_real_type prev_insn_reloc_type;
d503 1
a503 1
static fixS *prev_insn_fixp;
d560 5
d583 9
d664 2
a665 2
#define RELAX_RELOC1(i) ((bfd_vma) (((i) >> 9) & 0x7f) - 64)
#define RELAX_RELOC2(i) ((bfd_vma) (((i) >> 2) & 0x7f) - 64)
d669 80
d776 1
a776 1
#define RELAX_MIPS16_P(i) (((i) & 0x80000000) != 0)
d788 11
d811 18
a828 11
static int insn_uses_reg PARAMS ((struct mips_cl_insn *ip,
				  unsigned int reg, enum mips_regclass class));
static int reg_needs_delay PARAMS ((unsigned int));
static void mips16_mark_labels PARAMS ((void));
static void append_insn PARAMS ((char *place,
				 struct mips_cl_insn * ip,
				 expressionS * p,
				 bfd_reloc_code_real_type r,
				 boolean));
static void mips_no_prev_insn PARAMS ((int));
static void mips_emit_delays PARAMS ((boolean));
d830 3
a832 3
static void macro_build PARAMS ((char *place, int *counter, expressionS * ep,
				 const char *name, const char *fmt,
				 ...));
d836 23
a858 12
static void mips16_macro_build PARAMS ((char *, int *, expressionS *,
					const char *, const char *,
					va_list));
static void macro_build_lui PARAMS ((char *place, int *counter,
				     expressionS * ep, int regnum));
static void set_at PARAMS ((int *counter, int reg, int unsignedp));
static void check_absolute_expr PARAMS ((struct mips_cl_insn * ip,
					 expressionS *));
static void load_register PARAMS ((int *, int, expressionS *, int));
static void load_address PARAMS ((int *counter, int reg, expressionS *ep));
static void macro PARAMS ((struct mips_cl_insn * ip));
static void mips16_macro PARAMS ((struct mips_cl_insn * ip));
d860 98
a957 1
static void macro2 PARAMS ((struct mips_cl_insn * ip));
a958 36
static void mips_ip PARAMS ((char *str, struct mips_cl_insn * ip));
static void mips16_ip PARAMS ((char *str, struct mips_cl_insn * ip));
static void mips16_immed PARAMS ((char *, unsigned int, int, offsetT, boolean,
				  boolean, boolean, unsigned long *,
				  boolean *, unsigned short *));
static int my_getSmallExpression PARAMS ((expressionS * ep, char *str));
static void my_getExpression PARAMS ((expressionS * ep, char *str));
static symbolS *get_symbol PARAMS ((void));
static void mips_align PARAMS ((int to, int fill, symbolS *label));
static void s_align PARAMS ((int));
static void s_change_sec PARAMS ((int));
static void s_cons PARAMS ((int));
static void s_float_cons PARAMS ((int));
static void s_mips_globl PARAMS ((int));
static void s_option PARAMS ((int));
static void s_mipsset PARAMS ((int));
static void s_abicalls PARAMS ((int));
static void s_cpload PARAMS ((int));
static void s_cprestore PARAMS ((int));
static void s_gpword PARAMS ((int));
static void s_cpadd PARAMS ((int));
static void s_insn PARAMS ((int));
static void md_obj_begin PARAMS ((void));
static void md_obj_end PARAMS ((void));
static long get_number PARAMS ((void));
static void s_mips_ent PARAMS ((int));
static void s_mips_end PARAMS ((int));
static void s_mips_frame PARAMS ((int));
static void s_mips_mask PARAMS ((int));
static void s_mips_stab PARAMS ((int));
static void s_mips_weakext PARAMS ((int));
static void s_file PARAMS ((int));
static int mips16_extended_frag PARAMS ((fragS *, asection *, long));
static const char *mips_isa_to_str PARAMS ((int));
static const char *mips_cpu_to_str PARAMS ((int));
static int validate_mips_insn PARAMS ((const struct mips_opcode *));
d971 12
a982 3
static const struct mips_cpu_info *mips_cpu_info_from_name PARAMS ((const char *));
static const struct mips_cpu_info *mips_cpu_info_from_isa PARAMS ((int));
static const struct mips_cpu_info *mips_cpu_info_from_cpu PARAMS ((int));
d1012 2
d1015 2
d1018 1
d1045 1
a1051 1
#ifdef MIPS_STABS_ELF
a1052 1
#endif
d1066 1
a1066 1
  {"file", s_file, 0},
d1069 1
a1069 1
  {"loc", s_ignore, 0},
d1119 4
a1122 6
static bfd_reloc_code_real_type imm_reloc;
static bfd_reloc_code_real_type offset_reloc;

/* This is set by mips_ip if imm_reloc is an unmatched HI16_S reloc.  */

static boolean imm_unmatched_hi;
d1126 1
a1126 1
static boolean mips16_small, mips16_ext;
d1128 3
a1130 2
#ifdef MIPS_STABS_ELF
/* The pdr segment for per procedure frame/regmask info */
d1135 1
a1135 6
static const char *
mips_isa_to_str (isa)
     int isa;
{
  const struct mips_cpu_info *ci;
  static char s[20];
d1137 2
a1138 11
  ci = mips_cpu_info_from_isa (isa);
  if (ci != NULL)
    return (ci->name);

  sprintf (s, "ISA#%d", isa);
  return s;
}

static const char *
mips_cpu_to_str (cpu)
     int cpu;
d1140 35
a1174 9
  const struct mips_cpu_info *ci;
  static char s[16];

  ci = mips_cpu_info_from_cpu (cpu);
  if (ci != NULL)
    return (ci->name);

  sprintf (s, "CPU#%d", cpu);
  return s;
a1184 2
  const char *cpu;
  char *a = NULL;
a1185 21
  int mips_isa_from_cpu;
  int target_cpu_had_mips16 = 0;
  const struct mips_cpu_info *ci;

  /* GP relative stuff not working for PE */
  if (strncmp (TARGET_OS, "pe", 2) == 0
      && g_switch_value != 0)
    {
      if (g_switch_seen)
	as_bad (_("-G not supported in this configuration."));
      g_switch_value = 0;
    }

  cpu = TARGET_CPU;
  if (strcmp (cpu + (sizeof TARGET_CPU) - 3, "el") == 0)
    {
      a = xmalloc (sizeof TARGET_CPU);
      strcpy (a, TARGET_CPU);
      a[(sizeof TARGET_CPU) - 3] = '\0';
      cpu = a;
    }
d1187 1
a1187 74
  if (strncmp (cpu, "mips16", sizeof "mips16" - 1) == 0)
    {
      target_cpu_had_mips16 = 1;
      cpu += sizeof "mips16" - 1;
    }

  if (mips_opts.mips16 < 0)
    mips_opts.mips16 = target_cpu_had_mips16;

  /* At this point, mips_cpu will either be CPU_UNKNOWN if no CPU was
     specified on the command line, or some other value if one was.
     Similarly, mips_opts.isa will be ISA_UNKNOWN if not specified on
     the command line, or will be set otherwise if one was.  */
  if (mips_cpu != CPU_UNKNOWN && mips_opts.isa != ISA_UNKNOWN)
    {
      /* We have it all.  There's nothing to do.  */
    }
  else if (mips_cpu != CPU_UNKNOWN && mips_opts.isa == ISA_UNKNOWN)
    {
      /* We have CPU, we need ISA.  */
      ci = mips_cpu_info_from_cpu (mips_cpu);
      assert (ci != NULL);
      mips_opts.isa = ci->isa;
    }
  else if (mips_cpu == CPU_UNKNOWN && mips_opts.isa != ISA_UNKNOWN)
    {
      /* We have ISA, we need default CPU.  */
      ci = mips_cpu_info_from_isa (mips_opts.isa);
      assert (ci != NULL);
      mips_cpu = ci->cpu;
    }
  else
    {
      /* We need to set both ISA and CPU from target cpu.  */
      ci = mips_cpu_info_from_name (cpu);
      if (ci == NULL)
	ci = mips_cpu_info_from_cpu (CPU_R3000);
      assert (ci != NULL);
      mips_opts.isa = ci->isa;
      mips_cpu = ci->cpu;
    }

  ci = mips_cpu_info_from_cpu (mips_cpu);
  assert (ci != NULL);
  mips_isa_from_cpu = ci->isa;

  /* End of TARGET_CPU processing, get rid of malloced memory
     if necessary.  */
  cpu = NULL;
  if (a != NULL)
    {
      free (a);
      a = NULL;
    }

  if (mips_opts.isa == ISA_MIPS1 && mips_trap)
    as_bad (_("trap exception not supported at ISA 1"));

  /* Set the EABI kind based on the ISA before the user gets
     to change the ISA with directives.  This isn't really
     the best, but then neither is basing the abi on the isa.  */
  if (ISA_HAS_64BIT_REGS (mips_opts.isa)
      && mips_abi_string
      && 0 == strcmp (mips_abi_string, "eabi"))
    mips_eabi64 = 1;

  /* If they asked for mips1 or mips2 and a cpu that is
     mips3 or greater, then mark the object file 32BITMODE.  */
  if (mips_isa_from_cpu != ISA_UNKNOWN
      && ! ISA_HAS_64BIT_REGS (mips_opts.isa)
      && ISA_HAS_64BIT_REGS (mips_isa_from_cpu))
    mips_32bitmode = 1;

  if (! bfd_set_arch_mach (stdoutput, bfd_arch_mips, mips_cpu))
a1189 2
  file_mips_isa = mips_opts.isa;

d1256 2
d1270 2
d1275 15
a1289 1
  mips_no_prev_insn (false);
d1333 1
a1333 1
	if (! mips_64)
d1337 2
a1338 2
	    (void) bfd_set_section_flags (stdoutput, sec, flags);
	    (void) bfd_set_section_alignment (stdoutput, sec, 2);
d1349 2
a1350 2
	    (void) bfd_set_section_flags (stdoutput, sec, flags);
	    (void) bfd_set_section_alignment (stdoutput, sec, 3);
d1379 9
a1387 6

#ifdef MIPS_STABS_ELF
	pdr_seg = subseg_new (".pdr", (subsegT) 0);
	(void) bfd_set_section_flags (stdoutput, pdr_seg,
			     SEC_READONLY | SEC_RELOC | SEC_DEBUGGING);
	(void) bfd_set_section_alignment (stdoutput, pdr_seg, 2);
d1410 2
a1413 2
  imm_reloc = BFD_RELOC_UNUSED;
  imm_unmatched_hi = false;
d1415 6
a1420 1
  offset_reloc = BFD_RELOC_UNUSED;
d1447 1
a1447 2
	append_insn ((char *) NULL, &insn, &imm_expr, imm_reloc,
		     imm_unmatched_hi);
d1449 1
a1449 1
	append_insn ((char *) NULL, &insn, &offset_expr, offset_reloc, false);
d1451 1
a1451 1
	append_insn ((char *) NULL, &insn, NULL, BFD_RELOC_UNUSED, false);
d1455 25
d1496 2
a1497 2
  /* Don't report on general register 0, since it never changes.  */
  if (class == MIPS_GR_REG && reg == 0)
d1624 1
a1624 1
append_insn (place, ip, address_expr, reloc_type, unmatched_hi)
d1628 1
a1628 2
     bfd_reloc_code_real_type reloc_type;
     boolean unmatched_hi;
d1632 1
a1632 1
  fixS *fixp;
d1634 1
d1637 1
a1637 2
  if (mips_opts.mips16)
    mips16_mark_labels ();
d1795 1
a1795 1
	  nops += 1;
d1808 1
a1808 1
		 || (mips_cpu == CPU_R3900 && (pinfo & INSN_MULT)))
d1821 1
a1821 1
	    nops += 1;
d1830 1
a1830 1
		 || (mips_cpu == CPU_R3900 && (pinfo & INSN_MULT)))
d1843 1
a1843 1
	    nops += 1;
d1869 1
a1869 1
		    || (mips_cpu == CPU_R3900 && (pinfo & INSN_MULT))))
d1873 1
a1873 1
		    || (mips_cpu == CPU_R3900 && (pinfo & INSN_MULT)))))
d1884 44
d1974 1
a1974 1
		val += 1;
d2022 29
a2050 1
  if (reloc_type > BFD_RELOC_UNUSED)
d2055 1
a2055 1
		    RELAX_MIPS16_ENCODE (reloc_type - BFD_RELOC_UNUSED,
d2059 1
a2059 1
					 (prev_insn_reloc_type
d2061 1
a2061 2
		    make_expr_symbol (address_expr), (offsetT) 0,
		    (char *) NULL);
d2067 1
a2067 1
	   && reloc_type != BFD_RELOC_MIPS16_JMP)
d2084 2
a2085 2
  fixp = NULL;
  if (address_expr != NULL && reloc_type < BFD_RELOC_UNUSED)
d2089 3
a2091 1
	  switch (reloc_type)
d2097 20
d2118 1
d2126 3
d2136 3
d2155 1
a2155 2
	  /* Don't generate a reloc if we are writing into a variant
	     frag.  */
d2158 27
a2184 5
	      fixp = fix_new_exp (frag_now, f - frag_now->fr_literal, 4,
				  address_expr,
				  reloc_type == BFD_RELOC_16_PCREL_S2,
				  reloc_type);
	      if (unmatched_hi)
d2188 11
a2198 4
		  assert (reloc_type == BFD_RELOC_HI16_S);
		  hi_fixup = ((struct mips_hi_fixup *)
			      xmalloc (sizeof (struct mips_hi_fixup)));
		  hi_fixup->fixp = fixp;
d2200 67
a2266 2
		  hi_fixup->next = mips_hi_fixup_list;
		  mips_hi_fixup_list = hi_fixup;
d2273 7
a2279 2
    md_number_to_chars (f, ip->insn_opcode, 4);
  else if (reloc_type == BFD_RELOC_MIPS16_JMP)
d2283 3
d2295 3
d2310 1
a2310 1
	mips_gprmask |= 1 << 31;
d2430 1
a2430 1
		     || (mips_cpu == CPU_R3900 && (pinfo & INSN_MULT)))
d2503 1
a2503 1
			      == 31))))
d2512 1
a2512 1
			      == 31))))
d2530 1
a2530 1
		  && insn_uses_reg (&prev_insn, 31, MIPS_GR_REG))
d2569 1
a2569 1
	      || (mips_opts.mips16 && prev_insn_fixp)
d2595 33
a2627 1
		  if (prev_insn_fixp)
d2629 2
a2630 2
		      prev_insn_fixp->fx_frag = frag_now;
		      prev_insn_fixp->fx_where = f - frag_now->fr_literal;
d2632 1
a2632 1
		  if (fixp)
d2634 2
a2635 2
		      fixp->fx_frag = prev_insn_frag;
		      fixp->fx_where = prev_insn_where;
d2643 3
a2645 1
		  assert (prev_insn_fixp == NULL);
d2649 1
a2649 1
		  if (reloc_type != BFD_RELOC_MIPS16_JMP)
d2651 1
a2651 1
		      assert (reloc_type == BFD_RELOC_UNUSED);
d2659 11
a2669 1
		  if (fixp)
d2671 2
a2672 2
		      fixp->fx_frag = prev_insn_frag;
		      fixp->fx_where = prev_insn_where;
d2690 6
a2695 2
	  prev_insn_fixp = NULL;
	  prev_insn_reloc_type = BFD_RELOC_UNUSED;
d2708 6
a2713 2
	  prev_insn_fixp = NULL;
	  prev_insn_reloc_type = BFD_RELOC_UNUSED;
d2730 6
a2735 2
	  prev_insn_fixp = fixp;
	  prev_insn_reloc_type = reloc_type;
d2738 1
a2738 1
				  || reloc_type > BFD_RELOC_UNUSED);
d2754 3
a2756 1
      prev_insn_reloc_type = reloc_type;
d2764 4
a2767 5
  /* We must ensure that a fixup associated with an unmatched %hi
     reloc does not become a variant frag.  Otherwise, the
     rearrangement of %hi relocs in frob_file may confuse
     tc_gen_reloc.  */
  if (unmatched_hi)
d2795 3
a2797 1
  prev_insn_reloc_type = BFD_RELOC_UNUSED;
d2810 1
a2810 1
     boolean insns;
d2864 14
d2913 1
a2913 1
		val += 1;
d2920 1
a2920 1
  if (mips_opts.mips16 && insns)
d2951 1
a2951 1
  bfd_reloc_code_real_type r;
d2968 12
d2981 1
a2981 1
    *counter += 1;		/* bump instruction counter */
d2990 3
a2992 1
  r = BFD_RELOC_UNUSED;
d3000 2
d3004 5
a3008 3
	  && OPCODE_IS_MEMBER (insn.insn_mo, mips_opts.isa, mips_cpu,
			       mips_gp32)
	  && (mips_cpu != CPU_R4650 || (insn.insn_mo->pinfo & FP_D) == 0))
d3032 1
a3032 1
	  insn.insn_opcode |= va_arg (args, int) << 16;
d3036 3
d3041 1
a3041 1
	  insn.insn_opcode |= va_arg (args, int) << 16;
d3046 2
a3047 1
	  insn.insn_opcode |= va_arg (args, int) << 11;
d3054 2
a3055 2
	    insn.insn_opcode |= tmp << 16;
	    insn.insn_opcode |= tmp << 11;
d3061 1
a3061 1
	  insn.insn_opcode |= va_arg (args, int) << 11;
d3068 1
a3068 1
	  insn.insn_opcode |= va_arg (args, int) << 6;
d3072 1
a3072 1
	  insn.insn_opcode |= va_arg (args, int) << 6;
d3076 1
a3076 1
	  insn.insn_opcode |= va_arg (args, int) << 6;
d3080 1
a3080 1
	  insn.insn_opcode |= va_arg (args, int) << 6;
d3084 1
a3084 1
	  insn.insn_opcode |= va_arg (args, int) << 6;
d3091 1
a3091 1
	  insn.insn_opcode |= va_arg (args, int) << 21;
d3097 13
a3109 8
	  r = (bfd_reloc_code_real_type) va_arg (args, int);
	  assert (r == BFD_RELOC_MIPS_GPREL
		  || r == BFD_RELOC_MIPS_LITERAL
		  || r == BFD_RELOC_LO16
		  || r == BFD_RELOC_MIPS_GOT16
		  || r == BFD_RELOC_MIPS_CALL16
		  || r == BFD_RELOC_MIPS_GOT_LO16
		  || r == BFD_RELOC_MIPS_CALL_LO16
d3111 1
a3111 1
		      && r == BFD_RELOC_PCREL_LO16));
d3115 1
a3115 1
	  r = (bfd_reloc_code_real_type) va_arg (args, int);
d3119 6
a3124 4
			  && (r == BFD_RELOC_HI16_S
			      || r == BFD_RELOC_HI16
			      || r == BFD_RELOC_MIPS_GOT_HI16
			      || r == BFD_RELOC_MIPS_CALL_HI16))
d3126 1
a3126 7
			  && r == BFD_RELOC_PCREL_HI16_S)));
	  if (ep->X_op == O_constant)
	    {
	      insn.insn_opcode |= (ep->X_add_number >> 16) & 0xffff;
	      ep = NULL;
	      r = BFD_RELOC_UNUSED;
	    }
d3144 1
a3144 1
	    r = BFD_RELOC_16_PCREL_S2;
d3149 1
a3149 1
	  r = BFD_RELOC_MIPS_JMP;
d3162 1
a3162 1
  assert (r == BFD_RELOC_UNUSED ? ep == NULL : ep != NULL);
d3164 1
a3164 1
  append_insn (place, &insn, ep, r, false);
d3177 2
a3178 1
  bfd_reloc_code_real_type r;
a3179 1
  r = BFD_RELOC_UNUSED;
d3193 1
a3193 1
  insn.use_extend = false;
d3268 1
a3268 1
	      r = BFD_RELOC_UNUSED + c;
d3271 3
a3273 3
		mips16_immed ((char *) NULL, 0, c, ep->X_add_number, false,
			      false, false, &insn.insn_opcode,
			      &insn.use_extend, &insn.extend);
d3275 1
a3275 1
		r = BFD_RELOC_UNUSED;
d3288 15
a3302 1
  assert (r == BFD_RELOC_UNUSED ? ep == NULL : ep != NULL);
d3304 10
a3313 1
  append_insn (place, &insn, ep, r, false);
d3328 4
a3331 3
  bfd_reloc_code_real_type r;
  CONST char *name = "lui";
  CONST char *fmt = "t,u";
d3346 3
a3348 5
      if (high_expr.X_add_number & 0x8000)
	high_expr.X_add_number += 0x10000;
      high_expr.X_add_number =
	((unsigned long) high_expr.X_add_number >> 16) & 0xffff;
      r = BFD_RELOC_UNUSED;
d3355 3
a3357 2
	      || strcmp (S_GET_NAME (ep->X_add_symbol), "_gp_disp") == 0);
      r = BFD_RELOC_HI16_S;
d3369 1
a3369 1
    *counter += 1;		/* bump instruction counter */
d3377 1
a3377 1
  if (r == BFD_RELOC_UNUSED)
d3380 28
a3407 1
      append_insn (place, &insn, NULL, r, false);
d3410 21
a3430 1
    append_insn (place, &insn, &high_expr, r, false);
d3451 2
a3452 2
      load_register (counter, AT, &imm_expr, 0);
      macro_build ((char *) NULL, counter, NULL,
d3586 1
a3586 3
      else if ((((ep->X_add_number &~ (offsetT) 0x7fffffff) == 0
		 || ((ep->X_add_number &~ (offsetT) 0x7fffffff)
		     == ~ (offsetT) 0x7fffffff))
d3591 1
a3591 1
	       || ((! ISA_HAS_64BIT_REGS (mips_opts.isa) || ! dbl)
d3593 1
a3593 1
	       || (! ISA_HAS_64BIT_REGS (mips_opts.isa)
d3610 1
a3610 1
  if (! ISA_HAS_64BIT_REGS (mips_opts.isa))
d3612 2
a3613 1
      as_bad (_("Number larger than 32 bits"));
d3648 1
a3648 1
      if (hi32.X_add_number == 0xffffffff)
d3699 1
a3699 1
	      macro_build ((char *) NULL, counter, NULL,
d3705 1
a3705 1
	  shift++;
d3754 1
a3754 1
		  macro_build ((char *) NULL, counter, NULL,
d3759 1
a3759 1
	      macro_build ((char *) NULL, counter, NULL,
d3778 2
a3779 2
	  macro_build ((char *) NULL, counter, NULL, "dsll32", "d,w,<", reg,
		       freg, 0);
d3787 1
a3787 1
      if ((freg == 0) && (lo32.X_add_number == 0xffffffff))
d3791 2
a3792 2
	  macro_build ((char *) NULL, counter, NULL, "dsrl32", "d,w,<", reg,
		       reg, 0);
d3798 2
a3799 2
	  macro_build ((char *) NULL, counter, NULL, "dsll", "d,w,<", reg,
		       freg, 16);
d3806 2
a3807 2
      macro_build ((char *) NULL, counter, NULL, "dsll", "d,w,<", reg,
		   reg, 16);
d3818 1
a3818 1
load_address (counter, reg, ep)
d3822 1
d3824 1
a3824 1
  char *p;
d3835 1
a3835 1
      load_register (counter, reg, ep, 0);
d3842 1
a3842 1
	   addiu	$reg,$gp,<sym>		(BFD_RELOC_MIPS_GPREL)
d3846 56
a3901 4
	 If we have an addend, we always use the latter form.  */
      if ((valueT) ep->X_add_number >= MAX_GPREL_OFFSET
	  || nopic_need_relax (ep->X_add_symbol, 1))
	p = NULL;
d3904 20
a3923 10
	  frag_grow (20);
	  macro_build ((char *) NULL, counter, ep,
		       ((bfd_arch_bits_per_address (stdoutput) == 32
			 || ! ISA_HAS_64BIT_REGS (mips_opts.isa))
		        ? "addiu" : "daddiu"),
		       "t,r,j", reg, GP, (int) BFD_RELOC_MIPS_GPREL);
	  p = frag_var (rs_machine_dependent, 8, 0,
			RELAX_ENCODE (4, 8, 0, 4, 0,
				      mips_opts.warn_about_macros),
			ep->X_add_symbol, (offsetT) 0, (char *) NULL);
a3924 8
      macro_build_lui (p, counter, ep, reg);
      if (p != NULL)
	p += 4;
      macro_build (p, counter, ep,
		   ((bfd_arch_bits_per_address (stdoutput) == 32
		     || ! ISA_HAS_64BIT_REGS (mips_opts.isa))
		    ? "addiu" : "daddiu"),
		   "t,r,j", reg, reg, (int) BFD_RELOC_LO16);
d3936 44
a3979 19
	 If there is a constant, it must be added in after.  */
      ex.X_add_number = ep->X_add_number;
      ep->X_add_number = 0;
      frag_grow (20);
      macro_build ((char *) NULL, counter, ep,
		   ((bfd_arch_bits_per_address (stdoutput) == 32
		     || ! ISA_HAS_64BIT_REGS (mips_opts.isa))
		    ? "lw" : "ld"),
		   "t,o(b)", reg, (int) BFD_RELOC_MIPS_GOT16, GP);
      macro_build ((char *) NULL, counter, (expressionS *) NULL, "nop", "");
      p = frag_var (rs_machine_dependent, 4, 0,
		    RELAX_ENCODE (0, 4, -8, 0, 0, mips_opts.warn_about_macros),
		    ep->X_add_symbol, (offsetT) 0, (char *) NULL);
      macro_build (p, counter, ep,
		   ((bfd_arch_bits_per_address (stdoutput) == 32
		     || ! ISA_HAS_64BIT_REGS (mips_opts.isa))
		    ? "addiu" : "daddiu"),
		   "t,r,j", reg, reg, (int) BFD_RELOC_LO16);
      if (ex.X_add_number != 0)
d3981 12
a3992 7
	  if (ex.X_add_number < -0x8000 || ex.X_add_number >= 0x8000)
	    as_bad (_("PIC code offset overflow (max 16 signed bits)"));
	  ex.X_op = O_constant;
	  macro_build ((char *) NULL, counter, &ex,
		       ((bfd_arch_bits_per_address (stdoutput) == 32
			 || ! ISA_HAS_64BIT_REGS (mips_opts.isa))
			? "addiu" : "daddiu"),
d3994 10
d4016 2
a4017 1
	 Otherwise, for a reference to a local symbol, we want
d4021 77
a4097 30
	 If there is a constant, it must be added in after.  */
      ex.X_add_number = ep->X_add_number;
      ep->X_add_number = 0;
      if (reg_needs_delay (GP))
	off = 4;
      else
	off = 0;
      frag_grow (32);
      macro_build ((char *) NULL, counter, ep, "lui", "t,u", reg,
		   (int) BFD_RELOC_MIPS_GOT_HI16);
      macro_build ((char *) NULL, counter, (expressionS *) NULL,
		   ((bfd_arch_bits_per_address (stdoutput) == 32
		     || ! ISA_HAS_64BIT_REGS (mips_opts.isa))
		    ? "addu" : "daddu"),
		   "d,v,t", reg, reg, GP);
      macro_build ((char *) NULL, counter, ep,
		   ((bfd_arch_bits_per_address (stdoutput) == 32
		     || ! ISA_HAS_64BIT_REGS (mips_opts.isa))
		    ? "lw" : "ld"),
		   "t,o(b)", reg, (int) BFD_RELOC_MIPS_GOT_LO16, reg);
      p = frag_var (rs_machine_dependent, 12 + off, 0,
		    RELAX_ENCODE (12, 12 + off, off, 8 + off, 0,
				  mips_opts.warn_about_macros),
		    ep->X_add_symbol, (offsetT) 0, (char *) NULL);
      if (off > 0)
	{
	  /* We need a nop before loading from $gp.  This special
             check is required because the lui which starts the main
             instruction stream does not refer to $gp, and so will not
             insert the nop which may be required.  */
d4100 2
a4101 23
	}
      macro_build (p, counter, ep,
		   ((bfd_arch_bits_per_address (stdoutput) == 32
		     || ! ISA_HAS_64BIT_REGS (mips_opts.isa))
		    ? "lw" : "ld"),
		   "t,o(b)", reg, (int) BFD_RELOC_MIPS_GOT16, GP);
      p += 4;
      macro_build (p, counter, (expressionS *) NULL, "nop", "");
      p += 4;
      macro_build (p, counter, ep,
		   ((bfd_arch_bits_per_address (stdoutput) == 32
		     || ! ISA_HAS_64BIT_REGS (mips_opts.isa))
		    ? "addiu" : "daddiu"),
		   "t,r,j", reg, reg, (int) BFD_RELOC_LO16);
      if (ex.X_add_number != 0)
	{
	  if (ex.X_add_number < -0x8000 || ex.X_add_number >= 0x8000)
	    as_bad (_("PIC code offset overflow (max 16 signed bits)"));
	  ex.X_op = O_constant;
	  macro_build ((char *) NULL, counter, &ex,
		       ((bfd_arch_bits_per_address (stdoutput) == 32
		         || ! ISA_HAS_64BIT_REGS (mips_opts.isa))
			? "addiu" : "daddiu"),
d4103 10
d4118 2
a4119 2
	   addiu	$reg,$gp,<sym>		(BFD_RELOC_MIPS_GPREL)
	 */
d4121 2
a4122 4
		   ((bfd_arch_bits_per_address (stdoutput) == 32
		     || ! ISA_HAS_64BIT_REGS (mips_opts.isa))
		    ? "addiu" : "daddiu"),
		   "t,r,j", reg, GP, (int) BFD_RELOC_MIPS_GPREL);
d4128 13
a4179 1
  char *p;
d4194 24
d4228 1
a4228 1
      mips_emit_delays (true);
d4235 2
a4236 1
	macro_build ((char *) NULL, &icnt, NULL, "nop", "", 0);
d4238 3
a4240 4
	macro_build ((char *) NULL, &icnt, NULL, "move", "d,s", dreg, sreg, 0);
      macro_build ((char *) NULL, &icnt, NULL,
		   dbl ? "dsub" : "sub",
		   "d,v,t", dreg, 0, sreg);
d4272 2
a4273 1
      macro_build ((char *) NULL, &icnt, NULL, s2, "d,v,t", treg, sreg, AT);
d4303 2
a4304 2
	      macro_build ((char *) NULL, &icnt, NULL, "nor", "d,v,t",
			   treg, treg, 0);
d4309 3
a4311 2
      load_register (&icnt, AT, &imm_expr, 0);
      macro_build ((char *) NULL, &icnt, NULL, s2, "d,v,t", treg, sreg, AT);
d4334 1
a4334 1
      load_register (&icnt, AT, &imm_expr, 0);
d4344 1
a4344 2
		       likely ? "bgezl" : "bgez",
		       "s,p", sreg);
d4350 1
a4350 2
		       likely ? "blezl" : "blez",
		       "s,p", treg);
d4353 2
a4354 1
      macro_build ((char *) NULL, &icnt, NULL, "slt", "d,v,t", AT, sreg, treg);
d4356 1
a4356 2
		   likely ? "beql" : "beq",
		   "s,t,p", AT, 0);
d4364 1
a4364 1
      if (ISA_HAS_64BIT_REGS (mips_opts.isa) && sizeof (maxnum) > 4)
d4373 1
a4373 1
	  && (! ISA_HAS_64BIT_REGS (mips_opts.isa) || sizeof (maxnum) > 4))
d4379 5
a4383 2
	      as_warn (_("Branch %s is always false (nop)"), ip->insn_mo->name);
	      macro_build ((char *) NULL, &icnt, NULL, "nop", "", 0);
d4387 3
a4389 1
	      as_warn (_("Branch likely %s is always false"), ip->insn_mo->name);
d4397 1
a4397 1
      imm_expr.X_add_number++;
d4406 1
a4406 2
		       likely ? "bgezl" : "bgez",
		       "s,p", sreg);
d4412 1
a4412 2
		       likely ? "bgtzl" : "bgtz",
		       "s,p", sreg);
d4416 1
a4416 1
      if (ISA_HAS_64BIT_REGS (mips_opts.isa) && sizeof (maxnum) > 4)
d4426 1
a4426 1
	  && (! ISA_HAS_64BIT_REGS (mips_opts.isa) || sizeof (maxnum) > 4))
d4436 1
a4436 2
		   likely ? "beql" : "beq",
		   "s,t,p", AT, 0);
d4447 1
a4447 2
		       likely ? "beql" : "beq",
		       "s,t,p", 0, treg);
d4450 2
a4451 2
      macro_build ((char *) NULL, &icnt, NULL, "sltu", "d,v,t", AT, sreg,
		   treg);
d4453 1
a4453 2
		   likely ? "beql" : "beq",
		   "s,t,p", AT, 0);
d4460 1
a4460 1
	  || (! ISA_HAS_64BIT_REGS (mips_opts.isa)
d4462 1
a4462 1
	      && imm_expr.X_add_number == 0xffffffff))
d4466 1
a4466 1
      imm_expr.X_add_number++;
d4477 1
a4477 2
		       likely ? "bnel" : "bne",
		       "s,t,p", sreg, 0);
d4482 1
a4482 2
		   likely ? "beql" : "beq",
		   "s,t,p", AT, 0);
d4491 1
a4491 2
		       likely ? "bgtzl" : "bgtz",
		       "s,p", sreg);
d4497 1
a4497 2
		       likely ? "bltzl" : "bltz",
		       "s,p", treg);
d4500 2
a4501 1
      macro_build ((char *) NULL, &icnt, NULL, "slt", "d,v,t", AT, treg, sreg);
d4503 1
a4503 2
		   likely ? "bnel" : "bne",
		   "s,t,p", AT, 0);
d4512 1
a4512 2
		       likely ? "bnel" : "bne",
		       "s,t,p", sreg, 0);
d4517 2
a4518 2
      macro_build ((char *) NULL, &icnt, NULL, "sltu", "d,v,t", AT, treg,
		   sreg);
d4520 1
a4520 2
		   likely ? "bnel" : "bne",
		   "s,t,p", AT, 0);
d4529 1
a4529 2
		       likely ? "blezl" : "blez",
		       "s,p", sreg);
d4535 1
a4535 2
		       likely ? "bgezl" : "bgez",
		       "s,p", treg);
d4538 2
a4539 1
      macro_build ((char *) NULL, &icnt, NULL, "slt", "d,v,t", AT, treg, sreg);
d4541 1
a4541 2
		   likely ? "beql" : "beq",
		   "s,t,p", AT, 0);
d4548 1
a4548 1
      if (ISA_HAS_64BIT_REGS (mips_opts.isa) && sizeof (maxnum) > 4)
d4557 1
a4557 1
	  && (! ISA_HAS_64BIT_REGS (mips_opts.isa) || sizeof (maxnum) > 4))
d4561 1
a4561 1
      imm_expr.X_add_number++;
d4570 1
a4570 2
		       likely ? "bltzl" : "bltz",
		       "s,p", sreg);
d4576 1
a4576 2
		       likely ? "blezl" : "blez",
		       "s,p", sreg);
d4581 1
a4581 2
		   likely ? "bnel" : "bne",
		   "s,t,p", AT, 0);
d4590 1
a4590 2
		       likely ? "beql" : "beq",
		       "s,t,p", sreg, 0);
d4595 2
a4596 2
      macro_build ((char *) NULL, &icnt, NULL, "sltu", "d,v,t", AT, treg,
		   sreg);
d4598 1
a4598 2
		   likely ? "beql" : "beq",
		   "s,t,p", AT, 0);
d4605 1
a4605 1
	  || (! ISA_HAS_64BIT_REGS (mips_opts.isa)
d4607 1
a4607 1
	      && imm_expr.X_add_number == 0xffffffff))
d4611 1
a4611 1
      imm_expr.X_add_number++;
d4628 1
a4628 2
		   likely ? "bnel" : "bne",
		   "s,t,p", AT, 0);
d4637 1
a4637 2
		       likely ? "bltzl" : "bltz",
		       "s,p", sreg);
d4643 1
a4643 2
		       likely ? "bgtzl" : "bgtz",
		       "s,p", treg);
d4646 2
a4647 1
      macro_build ((char *) NULL, &icnt, NULL, "slt", "d,v,t", AT, sreg, treg);
d4649 1
a4649 2
		   likely ? "bnel" : "bne",
		   "s,t,p", AT, 0);
d4660 1
a4660 2
		       likely ? "bnel" : "bne",
		       "s,t,p", 0, treg);
d4663 2
a4664 1
      macro_build ((char *) NULL, &icnt, NULL, "sltu", "d,v,t", AT, sreg,
d4667 1
a4667 2
		   likely ? "bnel" : "bne",
		   "s,t,p", AT, 0);
d4684 2
a4685 1
	    macro_build ((char *) NULL, &icnt, NULL, "teq", "s,t", 0, 0);
d4687 2
a4688 1
	    macro_build ((char *) NULL, &icnt, NULL, "break", "c", 7);
d4692 1
a4692 1
      mips_emit_delays (true);
d4697 4
a4700 4
	  macro_build ((char *) NULL, &icnt, NULL, "teq", "s,t", treg, 0);
	  macro_build ((char *) NULL, &icnt, NULL,
		       dbl ? "ddiv" : "div",
		       "z,s,t", sreg, treg);
d4706 4
a4709 4
	  macro_build ((char *) NULL, &icnt, NULL,
		       dbl ? "ddiv" : "div",
		       "z,s,t", sreg, treg);
	  macro_build ((char *) NULL, &icnt, NULL, "break", "c", 7);
d4722 2
a4723 2
	  macro_build ((char *) NULL, &icnt, NULL, "dsll32", "d,w,<", AT, AT,
		       31);
d4733 2
a4734 1
	  macro_build ((char *) NULL, &icnt, NULL, "teq", "s,t", sreg, AT);
d4743 2
a4744 1
	  macro_build ((char *) NULL, &icnt, NULL, "nop", "", 0);
d4750 2
a4751 1
	  macro_build ((char *) NULL, &icnt, NULL, "break", "c", 6);
d4753 1
a4753 1
      macro_build ((char *) NULL, &icnt, NULL, s, "d", dreg);
d4796 2
a4797 1
	    macro_build ((char *) NULL, &icnt, NULL, "teq", "s,t", 0, 0);
d4799 2
a4800 1
	    macro_build ((char *) NULL, &icnt, NULL, "break", "c", 7);
d4806 1
a4806 2
	    macro_build ((char *) NULL, &icnt, NULL, "move", "d,s", dreg,
			 sreg);
d4808 1
a4808 1
	    macro_build ((char *) NULL, &icnt, NULL, "move", "d,s", dreg, 0);
d4817 2
a4818 6
	      if (dbl)
		macro_build ((char *) NULL, &icnt, NULL, "dneg", "d,w", dreg,
			     sreg);
	      else
		macro_build ((char *) NULL, &icnt, NULL, "neg", "d,w", dreg,
			     sreg);
d4821 1
a4821 1
	    macro_build ((char *) NULL, &icnt, NULL, "move", "d,s", dreg, 0);
d4826 3
a4828 2
      macro_build ((char *) NULL, &icnt, NULL, s, "z,s,t", sreg, AT);
      macro_build ((char *) NULL, &icnt, NULL, s2, "d", dreg);
d4847 1
a4847 1
      mips_emit_delays (true);
d4852 4
a4855 2
	  macro_build ((char *) NULL, &icnt, NULL, "teq", "s,t", treg, 0);
	  macro_build ((char *) NULL, &icnt, NULL, s, "z,s,t", sreg, treg);
d4864 2
a4865 1
	  macro_build ((char *) NULL, &icnt, NULL, s, "z,s,t", sreg, treg);
d4870 2
a4871 1
	  macro_build ((char *) NULL, &icnt, NULL, "break", "c", 7);
d4873 1
a4873 1
      macro_build ((char *) NULL, &icnt, NULL, s2, "d", dreg);
d4882 28
d4912 2
a4913 1
	   la	$4,foo-bar
a4927 1
	  && breg == 0
d4931 15
a4945 2
	  macro_build ((char *) NULL, &icnt, &offset_expr, "lui", "t,u",
		       treg, (int) BFD_RELOC_PCREL_HI16_S);
d4947 5
a4951 5
		       ((bfd_arch_bits_per_address (stdoutput) == 32
		         || ! ISA_HAS_64BIT_REGS (mips_opts.isa))
			? "addiu" : "daddiu"),
		       "t,r,j", treg, treg, (int) BFD_RELOC_PCREL_LO16);
	  return;
a4960 11
      if (treg == breg)
	{
	  tempreg = AT;
	  used_at = 1;
	}
      else
	{
	  tempreg = treg;
	  used_at = 0;
	}

d4962 4
a4965 1
	load_register (&icnt, tempreg, &offset_expr, dbl);
d4968 2
a4969 2
	  /* If this is a reference to an GP relative symbol, we want
	       addiu	$tempreg,$gp,<sym>	(BFD_RELOC_MIPS_GPREL)
d4974 57
a5030 4
	     so we may as well always use the latter form.  */
	  if ((valueT) offset_expr.X_add_number >= MAX_GPREL_OFFSET
	      || nopic_need_relax (offset_expr.X_add_symbol, 1))
	    p = NULL;
d5033 19
a5051 11
	      frag_grow (20);
	      macro_build ((char *) NULL, &icnt, &offset_expr,
			   ((bfd_arch_bits_per_address (stdoutput) == 32
		     	     || ! ISA_HAS_64BIT_REGS (mips_opts.isa))
			    ? "addiu" : "daddiu"),
			   "t,r,j", tempreg, GP, (int) BFD_RELOC_MIPS_GPREL);
	      p = frag_var (rs_machine_dependent, 8, 0,
			    RELAX_ENCODE (4, 8, 0, 4, 0,
					  mips_opts.warn_about_macros),
			    offset_expr.X_add_symbol, (offsetT) 0,
			    (char *) NULL);
a5052 8
	  macro_build_lui (p, &icnt, &offset_expr, tempreg);
	  if (p != NULL)
	    p += 4;
	  macro_build (p, &icnt, &offset_expr,
		       ((bfd_arch_bits_per_address (stdoutput) == 32
			 || ! ISA_HAS_64BIT_REGS (mips_opts.isa))
			? "addiu" : "daddiu"),
		       "t,r,j", tempreg, tempreg, (int) BFD_RELOC_LO16);
d5054 1
a5054 1
      else if (mips_pic == SVR4_PIC && ! mips_big_got)
d5085 3
a5087 1
	     addiu instruction.  */
d5094 2
a5095 2
		       dbl ? "ld" : "lw",
		       "t,o(b)", tempreg, lw_reloc_type, GP);
d5099 1
d5117 1
a5117 2
			    offset_expr.X_add_symbol, (offsetT) 0,
			    (char *) NULL);
d5124 1
a5124 3
			   ((bfd_arch_bits_per_address (stdoutput) == 32
			     || ! ISA_HAS_64BIT_REGS (mips_opts.isa))
			    ? "addiu" : "daddiu"),
d5136 1
a5136 3
			   ((bfd_arch_bits_per_address (stdoutput) == 32
			     || ! ISA_HAS_64BIT_REGS (mips_opts.isa))
			    ? "addiu" : "daddiu"),
d5138 3
a5140 4
	      (void) frag_var (rs_machine_dependent, 0, 0,
			       RELAX_ENCODE (0, 0, -12, -4, 0, 0),
			       offset_expr.X_add_symbol, (offsetT) 0,
			       (char *) NULL);
d5160 1
a5160 3
			       ((bfd_arch_bits_per_address (stdoutput) == 32
				 || ! ISA_HAS_64BIT_REGS (mips_opts.isa))
				? "addu" : "daddu"),
d5171 1
a5171 1
	      macro_build_lui ((char *) NULL, &icnt, &expr1, AT);
d5175 1
a5175 3
			   ((bfd_arch_bits_per_address (stdoutput) == 32
			     || ! ISA_HAS_64BIT_REGS (mips_opts.isa))
			    ? "addiu" : "daddiu"),
d5178 1
a5178 3
			   ((bfd_arch_bits_per_address (stdoutput) == 32
			     || ! ISA_HAS_64BIT_REGS (mips_opts.isa))
			    ? "addu" : "daddu"),
d5180 3
a5182 4
	      (void) frag_var (rs_machine_dependent, 0, 0,
			       RELAX_ENCODE (0, 0, -16 + off1, -8, 0, 0),
			       offset_expr.X_add_symbol, (offsetT) 0,
			       (char *) NULL);
d5186 1
a5186 1
      else if (mips_pic == SVR4_PIC)
d5188 8
a5195 9
	  int gpdel;
	  int lui_reloc_type = (int) BFD_RELOC_MIPS_GOT_HI16;
	  int lw_reloc_type = (int) BFD_RELOC_MIPS_GOT_LO16;

	  /* This is the large GOT case.  If this is a reference to an
	     external symbol, and there is no constant, we want
	       lui	$tempreg,<sym>		(BFD_RELOC_MIPS_GOT_HI16)
	       addu	$tempreg,$tempreg,$gp
	       lw	$tempreg,<sym>($tempreg) (BFD_RELOC_MIPS_GOT_LO16)
d5197 1
a5197 7
	       lui	$tempreg,<sym>		(BFD_RELOC_MIPS_CALL_HI16)
	       addu	$tempreg,$tempreg,$gp
	       lw	$tempreg,<sym>($tempreg) (BFD_RELOC_MIPS_CALL_LO16)
	     For a local symbol, we want
	       lw	$tempreg,<sym>($gp)	(BFD_RELOC_MIPS_GOT16)
	       nop
	       addiu	$tempreg,$tempreg,<sym>	(BFD_RELOC_LO16)
d5201 1
a5201 4
	       lui	$tempreg,<sym>		(BFD_RELOC_MIPS_GOT_HI16)
	       addu	$tempreg,$tempreg,$gp
	       lw	$tempreg,<sym>($tempreg) (BFD_RELOC_MIPS_GOT_LO16)
	       nop
a5202 4
	     For a local symbol, we want
	       lw	$tempreg,<sym>($gp)	(BFD_RELOC_MIPS_GOT16)
	       nop
	       addiu	$tempreg,$tempreg,<constant> (BFD_RELOC_LO16)
d5206 149
a5354 3
	       lui	$tempreg,<sym>		(BFD_RELOC_MIPS_GOT_HI16)
	       addu	$tempreg,$tempreg,$gp
	       lw	$tempreg,<sym>($tempreg) (BFD_RELOC_MIPS_GOT_LO16)
d5363 2
a5364 1
	     */
d5368 1
a5368 1
	  if (reg_needs_delay (GP))
d5380 2
a5381 4
		       ((bfd_arch_bits_per_address (stdoutput) == 32
			 || ! ISA_HAS_64BIT_REGS (mips_opts.isa))
			? "addu" : "daddu"),
		       "d,v,t", tempreg, tempreg, GP);
d5383 1
a5383 1
		       dbl ? "ld" : "lw",
d5407 1
a5407 2
			    offset_expr.X_add_symbol, (offsetT) 0,
			    (char *) NULL);
d5415 1
a5415 3
			   ((bfd_arch_bits_per_address (stdoutput) == 32
			     || ! ISA_HAS_64BIT_REGS (mips_opts.isa))
			    ? "addiu" : "daddiu"),
d5423 1
a5423 2
			    offset_expr.X_add_symbol, (offsetT) 0,
			    (char *) NULL);
d5447 1
a5447 3
			       ((bfd_arch_bits_per_address (stdoutput) == 32
				 || ! ISA_HAS_64BIT_REGS (mips_opts.isa))
				? "addu" : "daddu"),
d5457 1
a5457 1
	      macro_build_lui ((char *) NULL, &icnt, &expr1, AT);
d5461 1
a5461 3
			   ((bfd_arch_bits_per_address (stdoutput) == 32
			     || ! ISA_HAS_64BIT_REGS (mips_opts.isa))
			    ? "addiu" : "daddiu"),
d5464 1
a5464 3
			   ((bfd_arch_bits_per_address (stdoutput) == 32
			     || ! ISA_HAS_64BIT_REGS (mips_opts.isa))
			    ? "addu" : "daddu"),
d5473 1
a5473 2
			    offset_expr.X_add_symbol, (offsetT) 0,
			    (char *) NULL);
d5481 1
a5481 1
                 the first instruction on the main stream does not.  */
d5485 1
d5487 4
a5490 2
		       dbl ? "ld" : "lw",
		       "t,o(b)", tempreg, (int) BFD_RELOC_MIPS_GOT16, GP);
d5498 1
a5498 3
			   ((bfd_arch_bits_per_address (stdoutput) == 32
			     || ! ISA_HAS_64BIT_REGS (mips_opts.isa))
			    ? "addiu" : "daddiu"),
d5501 4
a5504 4
                 register, the external symbol case ended with a load,
                 so if the symbol turns out to not be external, and
                 the next instruction uses tempreg, an unnecessary nop
                 will be inserted.  */
d5511 1
a5511 1
                     external symbol case.  */
d5516 1
a5516 3
			       ((bfd_arch_bits_per_address (stdoutput) == 32
				 || ! ISA_HAS_64BIT_REGS (mips_opts.isa))
				? "addu" : "daddu"),
d5521 1
a5521 1
                     it in in both cases.  */
d5528 1
a5528 3
			   ((bfd_arch_bits_per_address (stdoutput) == 32
			     || ! ISA_HAS_64BIT_REGS (mips_opts.isa))
			    ? "addiu" : "daddiu"),
d5532 1
a5532 3
			   ((bfd_arch_bits_per_address (stdoutput) == 32
			     || ! ISA_HAS_64BIT_REGS (mips_opts.isa))
			    ? "addu" : "daddu"),
d5537 140
d5680 1
a5680 1
	       addiu	$tempreg,$gp,<sym>	(BFD_RELOC_MIPS_GPREL)
d5683 2
a5684 4
		       ((bfd_arch_bits_per_address (stdoutput) == 32
			 || ! ISA_HAS_64BIT_REGS (mips_opts.isa))
			? "addiu" : "daddiu"),
		       "t,r,j", tempreg, GP, (int) BFD_RELOC_MIPS_GPREL);
d5690 12
a5701 5
	macro_build ((char *) NULL, &icnt, (expressionS *) NULL,
		     ((bfd_arch_bits_per_address (stdoutput) == 32
		       || ! ISA_HAS_64BIT_REGS (mips_opts.isa))
		      ? "addu" : "daddu"),
		     "d,v,t", treg, tempreg, breg);
d5736 1
a5736 3
	  if (mips_cprestore_offset < 0)
	    as_warn (_("No .cprestore pseudo-op used in PIC code"));
	  else
d5738 21
a5758 6
	      expr1.X_add_number = mips_cprestore_offset;
	      macro_build ((char *) NULL, &icnt, &expr1,
			   ((bfd_arch_bits_per_address (stdoutput) == 32
			     || ! ISA_HAS_64BIT_REGS (mips_opts.isa))
			    ? "lw" : "ld"),
			   "t,o(b)", GP, (int) BFD_RELOC_LO16, mips_frame_reg);
d5771 2
d5777 1
a5777 1
	       jalr	$25
d5786 1
a5786 1
	       jalr	$25
d5793 1
a5793 1
	       jalr	$25
d5795 48
a5842 16
	       lw $gp,cprestore($sp) */
	  frag_grow (40);
	  if (! mips_big_got)
	    {
	      macro_build ((char *) NULL, &icnt, &offset_expr,
			   ((bfd_arch_bits_per_address (stdoutput) == 32
			     || ! ISA_HAS_64BIT_REGS (mips_opts.isa))
			    ? "lw" : "ld"),
			   "t,o(b)", PIC_CALL_REG,
			   (int) BFD_RELOC_MIPS_CALL16, GP);
	      macro_build ((char *) NULL, &icnt, (expressionS *) NULL,
			   "nop", "");
	      p = frag_var (rs_machine_dependent, 4, 0,
			    RELAX_ENCODE (0, 4, -8, 0, 0, 0),
			    offset_expr.X_add_symbol, (offsetT) 0,
			    (char *) NULL);
d5846 13
a5858 4
	      int gpdel;

	      if (reg_needs_delay (GP))
		gpdel = 4;
a5859 22
		gpdel = 0;
	      macro_build ((char *) NULL, &icnt, &offset_expr, "lui", "t,u",
			   PIC_CALL_REG, (int) BFD_RELOC_MIPS_CALL_HI16);
	      macro_build ((char *) NULL, &icnt, (expressionS *) NULL,
			   ((bfd_arch_bits_per_address (stdoutput) == 32
			     || ! ISA_HAS_64BIT_REGS (mips_opts.isa))
			    ? "addu" : "daddu"),
			   "d,v,t", PIC_CALL_REG, PIC_CALL_REG, GP);
	      macro_build ((char *) NULL, &icnt, &offset_expr,
			   ((bfd_arch_bits_per_address (stdoutput) == 32
			     || ! ISA_HAS_64BIT_REGS (mips_opts.isa))
			    ? "lw" : "ld"),
			   "t,o(b)", PIC_CALL_REG,
			   (int) BFD_RELOC_MIPS_CALL_LO16, PIC_CALL_REG);
	      macro_build ((char *) NULL, &icnt, (expressionS *) NULL,
			   "nop", "");
	      p = frag_var (rs_machine_dependent, 12 + gpdel, 0,
			    RELAX_ENCODE (16, 12 + gpdel, gpdel, 8 + gpdel,
					  0, 0),
			    offset_expr.X_add_symbol, (offsetT) 0,
			    (char *) NULL);
	      if (gpdel > 0)
d5861 33
d5898 29
a5926 31
			   ((bfd_arch_bits_per_address (stdoutput) == 32
			     || ! ISA_HAS_64BIT_REGS (mips_opts.isa))
			    ? "lw" : "ld"),
			   "t,o(b)", PIC_CALL_REG,
			   (int) BFD_RELOC_MIPS_GOT16, GP);
	      p += 4;
	      macro_build (p, &icnt, (expressionS *) NULL, "nop", "");
	      p += 4;
	    }
	  macro_build (p, &icnt, &offset_expr,
		       ((bfd_arch_bits_per_address (stdoutput) == 32
			 || ! ISA_HAS_64BIT_REGS (mips_opts.isa))
			? "addiu" : "daddiu"),
		       "t,r,j", PIC_CALL_REG, PIC_CALL_REG,
		       (int) BFD_RELOC_LO16);
	  macro_build ((char *) NULL, &icnt, (expressionS *) NULL,
		       "jalr", "s", PIC_CALL_REG);
	  if (mips_cprestore_offset < 0)
	    as_warn (_("No .cprestore pseudo-op used in PIC code"));
	  else
	    {
	      if (mips_opts.noreorder)
		macro_build ((char *) NULL, &icnt, (expressionS *) NULL,
			     "nop", "");
	      expr1.X_add_number = mips_cprestore_offset;
	      macro_build ((char *) NULL, &icnt, &expr1,
			   ((bfd_arch_bits_per_address (stdoutput) == 32
			     || ! ISA_HAS_64BIT_REGS (mips_opts.isa))
			    ? "lw" : "ld"),
			   "t,o(b)", GP, (int) BFD_RELOC_LO16,
			   mips_frame_reg);
d5985 1
a5985 1
      if (mips_cpu == CPU_R4650)
d6074 1
a6074 1
      if (mips_cpu == CPU_R4650)
d6115 40
d6167 2
d6171 1
a6171 1
	       <op>	$treg,<sym>($gp)	(BFD_RELOC_MIPS_GPREL)
d6179 123
a6301 8
	     GP relative symbol, we want
	       addu	$tempreg,$breg,$gp
	       <op>	$treg,<sym>($tempreg)	(BFD_RELOC_MIPS_GPREL)
	     Otherwise we want
	       lui	$tempreg,<sym>		(BFD_RELOC_HI16_S)
	       addu	$tempreg,$tempreg,$breg
	       <op>	$treg,<sym>($tempreg)	(BFD_RELOC_LO16)
	     With a constant we always use the latter case.  */
d6304 1
a6304 1
	      if ((valueT) offset_expr.X_add_number >= MAX_GPREL_OFFSET
d6311 2
a6312 1
			       treg, (int) BFD_RELOC_MIPS_GPREL, GP);
d6318 1
a6318 2
				offset_expr.X_add_symbol, (offsetT) 0,
				(char *) NULL);
d6329 1
a6329 1
	      if ((valueT) offset_expr.X_add_number >= MAX_GPREL_OFFSET
d6336 3
a6338 4
			       ((bfd_arch_bits_per_address (stdoutput) == 32
				 || ! ISA_HAS_64BIT_REGS (mips_opts.isa))
				? "addu" : "daddu"),
			       "d,v,t", tempreg, breg, GP);
d6340 1
a6340 1
			       treg, (int) BFD_RELOC_MIPS_GPREL, tempreg);
d6343 1
a6343 2
				offset_expr.X_add_symbol, (offsetT) 0,
				(char *) NULL);
d6349 2
a6350 3
			   ((bfd_arch_bits_per_address (stdoutput) == 32
			     || ! ISA_HAS_64BIT_REGS (mips_opts.isa))
			    ? "addu" : "daddu"),
d6360 3
d6372 5
d6384 18
d6409 2
a6410 4
		       ((bfd_arch_bits_per_address (stdoutput) == 32
			 || ! ISA_HAS_64BIT_REGS (mips_opts.isa))
		        ? "lw" : "ld"),
		       "t,o(b)", tempreg, (int) BFD_RELOC_MIPS_GOT16, GP);
d6414 1
a6414 2
			offset_expr.X_add_symbol, (offsetT) 0,
			(char *) NULL);
d6416 1
a6416 3
		       ((bfd_arch_bits_per_address (stdoutput) == 32
			 || ! ISA_HAS_64BIT_REGS (mips_opts.isa))
		        ? "addiu" : "daddiu"),
d6420 1
a6420 3
			 ((bfd_arch_bits_per_address (stdoutput) == 32
			   || ! ISA_HAS_64BIT_REGS (mips_opts.isa))
			  ? "addu" : "daddu"),
d6425 1
a6425 1
      else if (mips_pic == SVR4_PIC)
d6428 1
d6452 1
a6452 1
	  if (reg_needs_delay (GP))
d6460 2
a6461 4
		       ((bfd_arch_bits_per_address (stdoutput) == 32
			 || ! ISA_HAS_64BIT_REGS (mips_opts.isa))
		        ? "addu" : "daddu"),
		       "d,v,t", tempreg, tempreg, GP);
d6463 1
a6463 3
		       ((bfd_arch_bits_per_address (stdoutput) == 32
			 || ! ISA_HAS_64BIT_REGS (mips_opts.isa))
		        ? "lw" : "ld"),
d6468 1
a6468 1
			offset_expr.X_add_symbol, (offsetT) 0, (char *) NULL);
d6475 3
a6477 4
		       ((bfd_arch_bits_per_address (stdoutput) == 32
			 || ! ISA_HAS_64BIT_REGS (mips_opts.isa))
		        ? "lw" : "ld"),
		       "t,o(b)", tempreg, (int) BFD_RELOC_MIPS_GOT16, GP);
d6482 1
a6482 3
		       ((bfd_arch_bits_per_address (stdoutput) == 32
			 || ! ISA_HAS_64BIT_REGS (mips_opts.isa))
		        ? "addiu" : "daddiu"),
d6486 38
a6523 3
			 ((bfd_arch_bits_per_address (stdoutput) == 32
			   || ! ISA_HAS_64BIT_REGS (mips_opts.isa))
			  ? "addu" : "daddu"),
d6527 17
d6548 1
a6548 1
	       <op>	$treg,<sym>($gp)	(BFD_RELOC_MIPS_GPREL)
d6551 1
a6551 1
	       <op>	$treg,<sym>($tempreg)	(BFD_RELOC_MIPS_GPREL)
d6557 1
a6557 1
			   treg, (int) BFD_RELOC_MIPS_GPREL, GP);
d6563 2
a6564 4
			   ((bfd_arch_bits_per_address (stdoutput) == 32
			     || ! ISA_HAS_64BIT_REGS (mips_opts.isa))
			    ? "addu" : "daddu"),
			   "d,v,t", tempreg, breg, GP);
d6566 1
a6566 1
			   treg, (int) BFD_RELOC_MIPS_GPREL, tempreg);
d6602 1
a6602 1
		       treg, (int) BFD_RELOC_MIPS_LITERAL, GP);
d6607 4
a6610 4
      /* If we have a constant in IMM_EXPR, then in mips3 mode it is
         the entire value, and in mips1 mode it is the high order 32
         bits of the value and the low order 32 bits are either zero
         or in offset_expr.  */
d6613 1
a6613 1
	  if (ISA_HAS_64BIT_REGS (mips_opts.isa))
d6635 1
a6635 2
		    macro_build ((char *) NULL, &icnt, NULL, "move", "d,s",
				 lreg, 0);
d6650 1
a6650 2
	  /* FIXME: This won't work for a 64 bit address.  */
	  macro_build_lui ((char *) NULL, &icnt, &offset_expr, AT);
d6655 3
a6657 4
		       ((bfd_arch_bits_per_address (stdoutput) == 32
			 || ! ISA_HAS_64BIT_REGS (mips_opts.isa))
		        ? "lw" : "ld"),
		       "t,o(b)", AT, (int) BFD_RELOC_MIPS_GOT16, GP);
d6664 2
a6665 4
		       ((bfd_arch_bits_per_address (stdoutput) == 32
			 || ! ISA_HAS_64BIT_REGS (mips_opts.isa))
		        ? "addiu" : "daddiu"),
		       "t,r,j", AT, GP, (int) BFD_RELOC_MIPS_GPREL);
d6673 1
a6673 1
      if (ISA_HAS_64BIT_REGS (mips_opts.isa))
d6680 1
a6680 1
	  if (treg != 31)
d6698 5
a6702 4
      /* If we have a constant in IMM_EXPR, then in mips3 mode it is
         the entire value, and in mips1 mode it is the high order 32
         bits of the value and the low order 32 bits are either zero
         or in offset_expr.  */
d6705 7
a6711 4
	  load_register (&icnt, AT, &imm_expr, ISA_HAS_64BIT_REGS (mips_opts.isa));
	  if (ISA_HAS_64BIT_REGS (mips_opts.isa))
	    macro_build ((char *) NULL, &icnt, (expressionS *) NULL,
			 "dmtc1", "t,S", AT, treg);
d6738 2
a6739 1
			   "T,o(b)", treg, (int) BFD_RELOC_MIPS_LITERAL, GP);
d6742 1
a6742 1
	  breg = GP;
d6751 3
a6753 4
			 ((bfd_arch_bits_per_address (stdoutput) == 32
			   || ! ISA_HAS_64BIT_REGS (mips_opts.isa))
			  ? "lw" : "ld"),
			 "t,o(b)", AT, (int) BFD_RELOC_MIPS_GOT16, GP);
d6757 1
a6757 1
	      macro_build_lui ((char *) NULL, &icnt, &offset_expr, AT);
d6778 1
a6778 1
      if (mips_cpu == CPU_R4650)
d6819 1
a6819 1
      if (mips_cpu == CPU_R4650)
d6837 1
a6837 1
      if (mips_cpu == CPU_R4650)
d6856 1
a6856 1
      if (ISA_HAS_64BIT_REGS (mips_opts.isa))
d6867 1
a6867 1
      if (ISA_HAS_64BIT_REGS (mips_opts.isa))
d6877 5
d6899 2
d6902 2
a6903 2
	       <op>	$treg,<sym>($gp)	(BFD_RELOC_MIPS_GPREL)
	       <op>	$treg+1,<sym>+4($gp)	(BFD_RELOC_MIPS_GPREL)
d6906 2
a6907 2
	       <op>	$treg,<sym>($at)	(BFD_RELOC_MIPS_GPREL)
	       <op>	$treg+1,<sym>+4($at)	(BFD_RELOC_MIPS_GPREL)
d6915 1
a6915 1
	  if ((valueT) offset_expr.X_add_number >= MAX_GPREL_OFFSET
d6928 1
a6928 1
		  tempreg = GP;
d6936 3
a6938 4
			       ((bfd_arch_bits_per_address (stdoutput) == 32
				 || ! ISA_HAS_64BIT_REGS (mips_opts.isa))
				? "addu" : "daddu"),
			       "d,v,t", AT, breg, GP);
d6947 1
a6947 1
			   (int) BFD_RELOC_MIPS_GPREL, tempreg);
d6957 1
a6957 1
			   (int) BFD_RELOC_MIPS_GPREL, tempreg);
d6963 1
a6963 2
			    offset_expr.X_add_symbol, (offsetT) 0,
			    (char *) NULL);
d6992 2
a6993 3
			   ((bfd_arch_bits_per_address (stdoutput) == 32
			     || ! ISA_HAS_64BIT_REGS (mips_opts.isa))
			    ? "addu" : "daddu"),
d7040 2
a7041 4
		       ((bfd_arch_bits_per_address (stdoutput) == 32
			 || ! ISA_HAS_64BIT_REGS (mips_opts.isa))
		        ? "lw" : "ld"),
		       "t,o(b)", AT, (int) BFD_RELOC_MIPS_GOT16, GP);
d7045 2
a7046 3
			 ((bfd_arch_bits_per_address (stdoutput) == 32
			   || ! ISA_HAS_64BIT_REGS (mips_opts.isa))
			  ? "addu" : "daddu"),
d7066 1
a7066 2
			   offset_expr.X_add_symbol, (offsetT) 0,
			   (char *) NULL);
d7071 1
d7094 1
a7094 1
	  if (reg_needs_delay (GP))
d7106 3
a7108 4
		       ((bfd_arch_bits_per_address (stdoutput) == 32
			 || ! ISA_HAS_64BIT_REGS (mips_opts.isa))
		        ? "addu" : "daddu"),
		       "d,v,t", AT, AT, GP);
d7110 1
a7110 3
		       ((bfd_arch_bits_per_address (stdoutput) == 32
			 || ! ISA_HAS_64BIT_REGS (mips_opts.isa))
		        ? "lw" : "ld"),
d7115 2
a7116 3
			 ((bfd_arch_bits_per_address (stdoutput) == 32
			   || ! ISA_HAS_64BIT_REGS (mips_opts.isa))
			  ? "addu" : "daddu"),
d7138 1
a7138 2
			offset_expr.X_add_symbol, (offsetT) 0,
			(char *) NULL);
d7145 3
a7147 4
		       ((bfd_arch_bits_per_address (stdoutput) == 32
			 || ! ISA_HAS_64BIT_REGS (mips_opts.isa))
		        ? "lw" : "ld"),
		       "t,o(b)", AT, (int) BFD_RELOC_MIPS_GOT16, GP);
d7154 2
a7155 3
			   ((bfd_arch_bits_per_address (stdoutput) == 32
			     || ! ISA_HAS_64BIT_REGS (mips_opts.isa))
			    ? "addu" : "daddu"),
d7179 2
a7180 2
	       <op>	$treg,<sym>($gp)	(BFD_RELOC_MIPS_GPREL)
	       <op>	$treg+1,<sym>+4($gp)	(BFD_RELOC_MIPS_GPREL)
d7183 2
a7184 2
	       <op>	$treg,<sym>($at)	(BFD_RELOC_MIPS_GPREL)
	       <op>	$treg+1,<sym>+4($at)	(BFD_RELOC_MIPS_GPREL)
d7188 1
a7188 1
	      tempreg = GP;
d7194 2
a7195 4
			   ((bfd_arch_bits_per_address (stdoutput) == 32
			     || ! ISA_HAS_64BIT_REGS (mips_opts.isa))
			    ? "addu" : "daddu"),
			   "d,v,t", AT, breg, GP);
d7203 1
a7203 1
		       (int) BFD_RELOC_MIPS_GPREL, tempreg);
d7208 1
a7208 1
		       (int) BFD_RELOC_MIPS_GPREL, tempreg);
d7224 1
a7224 2
      assert (bfd_arch_bits_per_address (stdoutput) == 32
	      || ! ISA_HAS_64BIT_REGS (mips_opts.isa));
d7267 4
d7337 4
a7340 4
      macro_build ((char *) NULL, &icnt, NULL,
		   dbl ? "dmultu" : "multu",
		   "s,t", sreg, treg);
      macro_build ((char *) NULL, &icnt, NULL, "mflo", "d", dreg);
d7350 4
a7353 4
      macro_build ((char *) NULL, &icnt, NULL,
		   dbl ? "dmult" : "mult",
		   "s,t", sreg, AT);
      macro_build ((char *) NULL, &icnt, NULL, "mflo", "d", dreg);
d7366 1
a7366 1
      mips_emit_delays (true);
d7371 8
a7378 8
      macro_build ((char *) NULL, &icnt, NULL,
		   dbl ? "dmult" : "mult",
		   "s,t", sreg, imm ? AT : treg);
      macro_build ((char *) NULL, &icnt, NULL, "mflo", "d", dreg);
      macro_build ((char *) NULL, &icnt, NULL,
		   dbl ? "dsra32" : "sra",
		   "d,w,<", dreg, dreg, 31);
      macro_build ((char *) NULL, &icnt, NULL, "mfhi", "d", AT);
d7380 2
a7381 1
	macro_build ((char *) NULL, &icnt, NULL, "tne", "s,t", dreg, AT);
d7385 6
a7390 3
	  macro_build ((char *) NULL, &icnt, &expr1, "beq", "s,t,p", dreg, AT);
	  macro_build ((char *) NULL, &icnt, NULL, "nop", "", 0);
	  macro_build ((char *) NULL, &icnt, NULL, "break", "c", 6);
d7393 1
a7393 1
      macro_build ((char *) NULL, &icnt, NULL, "mflo", "d", dreg);
d7406 1
a7406 1
      mips_emit_delays (true);
d7411 1
a7411 1
      macro_build ((char *) NULL, &icnt, NULL,
d7414 4
a7417 2
      macro_build ((char *) NULL, &icnt, NULL, "mfhi", "d", AT);
      macro_build ((char *) NULL, &icnt, NULL, "mflo", "d", dreg);
d7419 2
a7420 1
	macro_build ((char *) NULL, &icnt, NULL, "tne", "s,t", AT, 0);
d7425 4
a7428 2
	  macro_build ((char *) NULL, &icnt, NULL, "nop", "", 0);
	  macro_build ((char *) NULL, &icnt, NULL, "break", "c", 6);
d7433 31
d7465 65
a7529 5
      macro_build ((char *) NULL, &icnt, NULL, "subu", "d,v,t", AT, 0, treg);
      macro_build ((char *) NULL, &icnt, NULL, "srlv", "d,t,s", AT, sreg, AT);
      macro_build ((char *) NULL, &icnt, NULL, "sllv", "d,t,s", dreg, sreg,
		   treg);
      macro_build ((char *) NULL, &icnt, NULL, "or", "d,v,t", dreg, dreg, AT);
d7533 42
a7574 7
      if (imm_expr.X_op != O_constant)
	as_bad (_("rotate count too large"));
      macro_build ((char *) NULL, &icnt, NULL, "sll", "d,w,<", AT, sreg,
		   (int) (imm_expr.X_add_number & 0x1f));
      macro_build ((char *) NULL, &icnt, NULL, "srl", "d,w,<", dreg, sreg,
		   (int) ((0 - imm_expr.X_add_number) & 0x1f));
      macro_build ((char *) NULL, &icnt, NULL, "or", "d,v,t", dreg, dreg, AT);
d7578 50
a7627 5
      macro_build ((char *) NULL, &icnt, NULL, "subu", "d,v,t", AT, 0, treg);
      macro_build ((char *) NULL, &icnt, NULL, "sllv", "d,t,s", AT, sreg, AT);
      macro_build ((char *) NULL, &icnt, NULL, "srlv", "d,t,s", dreg, sreg,
		   treg);
      macro_build ((char *) NULL, &icnt, NULL, "or", "d,v,t", dreg, dreg, AT);
d7631 25
a7655 7
      if (imm_expr.X_op != O_constant)
	as_bad (_("rotate count too large"));
      macro_build ((char *) NULL, &icnt, NULL, "srl", "d,w,<", AT, sreg,
		   (int) (imm_expr.X_add_number & 0x1f));
      macro_build ((char *) NULL, &icnt, NULL, "sll", "d,w,<", dreg, sreg,
		   (int) ((0 - imm_expr.X_add_number) & 0x1f));
      macro_build ((char *) NULL, &icnt, NULL, "or", "d,v,t", dreg, dreg, AT);
d7659 1
a7659 1
      if (mips_cpu == CPU_R4650)
d7685 2
a7686 2
	  macro_build ((char *) NULL, &icnt, NULL, "xor", "d,v,t", dreg,
		       sreg, treg);
d7703 1
a7703 1
	  macro_build ((char *) NULL, &icnt, NULL, "move", "d,s", dreg, 0);
d7720 1
a7720 3
		       ((bfd_arch_bits_per_address (stdoutput) == 32
			 || ! ISA_HAS_64BIT_REGS (mips_opts.isa))
		        ? "addiu" : "daddiu"),
d7727 3
a7729 3
	  load_register (&icnt, AT, &imm_expr, 0);
	  macro_build ((char *) NULL, &icnt, NULL, "xor", "d,v,t", dreg,
		       sreg, AT);
d7744 2
a7745 1
      macro_build ((char *) NULL, &icnt, NULL, s, "d,v,t", dreg, sreg, treg);
d7763 4
a7766 4
	  load_register (&icnt, AT, &imm_expr, 0);
	  macro_build ((char *) NULL, &icnt, NULL,
		       mask == M_SGE_I ? "slt" : "sltu",
		       "d,v,t", dreg, sreg, AT);
d7781 2
a7782 1
      macro_build ((char *) NULL, &icnt, NULL, s, "d,v,t", dreg, treg, sreg);
d7791 3
a7793 2
      load_register (&icnt, AT, &imm_expr, 0);
      macro_build ((char *) NULL, &icnt, NULL, s, "d,v,t", dreg, AT, sreg);
d7796 1
a7796 1
    case M_SLE:		/* sreg <= treg  <==>  treg >= sreg  <==>  not (treg < sreg) */
d7802 2
a7803 1
      macro_build ((char *) NULL, &icnt, NULL, s, "d,v,t", dreg, treg, sreg);
d7808 1
a7808 1
    case M_SLE_I:		/* sreg <= I <==> I >= sreg <==> not (I < sreg) */
d7814 3
a7816 2
      load_register (&icnt, AT, &imm_expr, 0);
      macro_build ((char *) NULL, &icnt, NULL, s, "d,v,t", dreg, AT, sreg);
d7830 3
a7832 2
      load_register (&icnt, AT, &imm_expr, 0);
      macro_build ((char *) NULL, &icnt, NULL, "slt", "d,v,t", dreg, sreg, AT);
d7844 3
a7846 3
      load_register (&icnt, AT, &imm_expr, 0);
      macro_build ((char *) NULL, &icnt, NULL, "sltu", "d,v,t", dreg, sreg,
		   AT);
d7851 2
a7852 2
	macro_build ((char *) NULL, &icnt, NULL, "sltu", "d,v,t", dreg, 0,
		     treg);
d7854 2
a7855 2
	macro_build ((char *) NULL, &icnt, NULL, "sltu", "d,v,t", dreg, 0,
		     sreg);
d7858 4
a7861 4
	  macro_build ((char *) NULL, &icnt, NULL, "xor", "d,v,t", dreg,
		       sreg, treg);
	  macro_build ((char *) NULL, &icnt, NULL, "sltu", "d,v,t", dreg, 0,
		       dreg);
d7868 2
a7869 2
	  macro_build ((char *) NULL, &icnt, NULL, "sltu", "d,v,t", dreg, 0,
		       sreg);
d7877 1
a7877 3
		       ((bfd_arch_bits_per_address (stdoutput) == 32
			 || ! ISA_HAS_64BIT_REGS (mips_opts.isa))
		        ? "addiu" : "daddiu"),
d7895 1
a7895 3
		       ((bfd_arch_bits_per_address (stdoutput) == 32
			 || ! ISA_HAS_64BIT_REGS (mips_opts.isa))
		        ? "addiu" : "daddiu"),
d7901 3
a7903 3
	  load_register (&icnt, AT, &imm_expr, 0);
	  macro_build ((char *) NULL, &icnt, NULL, "xor", "d,v,t", dreg,
		       sreg, AT);
d7906 2
a7907 1
      macro_build ((char *) NULL, &icnt, NULL, "sltu", "d,v,t", dreg, 0, dreg);
d7926 2
a7927 3
      macro_build ((char *) NULL, &icnt, NULL,
		   dbl ? "dsub" : "sub",
		   "d,v,t", dreg, sreg, AT);
d7944 2
a7945 3
      macro_build ((char *) NULL, &icnt, NULL,
		   dbl ? "dsubu" : "subu",
		   "d,v,t", dreg, sreg, AT);
d7966 3
a7968 2
      load_register (&icnt, AT, &imm_expr, 0);
      macro_build ((char *) NULL, &icnt, NULL, s, "s,t", sreg, AT);
d7981 1
a7981 1
      mips_emit_delays (true);
d7984 5
a7988 3
      macro_build ((char *) NULL, &icnt, NULL, "cfc1", "t,G", treg, 31);
      macro_build ((char *) NULL, &icnt, NULL, "cfc1", "t,G", treg, 31);
      macro_build ((char *) NULL, &icnt, NULL, "nop", "");
d7995 4
a7998 3
      macro_build ((char *) NULL, &icnt, NULL, "ctc1", "t,G", AT, 31);
      macro_build ((char *) NULL, &icnt, NULL, "nop", "");
      macro_build ((char *) NULL, &icnt, NULL,
d8000 3
a8002 2
      macro_build ((char *) NULL, &icnt, NULL, "ctc1", "t,G", treg, 31);
      macro_build ((char *) NULL, &icnt, NULL, "nop", "");
a8013 1
      /* avoid load delay */
d8015 2
a8016 2
	offset_expr.X_add_number += 1;
      macro_build ((char *) NULL, &icnt, &offset_expr, s, "t,o(b)", treg,
d8019 1
a8019 1
	offset_expr.X_add_number -= 1;
d8021 2
a8022 2
	offset_expr.X_add_number += 1;
      macro_build ((char *) NULL, &icnt, &offset_expr, "lbu", "t,o(b)", AT,
d8024 4
a8027 2
      macro_build ((char *) NULL, &icnt, NULL, "sll", "d,w,<", treg, treg, 8);
      macro_build ((char *) NULL, &icnt, NULL, "or", "d,v,t", treg, treg, AT);
d8042 4
d8048 1
a8048 1
      macro_build ((char *) NULL, &icnt, &offset_expr, s, "t,o(b)", treg,
d8054 1
a8054 1
      macro_build ((char *) NULL, &icnt, &offset_expr, s2, "t,o(b)", treg,
d8056 9
a8064 1
      return;
d8076 2
a8077 1
      load_address (&icnt, AT, &offset_expr);
d8080 2
a8081 3
		     ((bfd_arch_bits_per_address (stdoutput) == 32
		       || ! ISA_HAS_64BIT_REGS (mips_opts.isa))
		      ? "addu" : "daddu"),
d8099 2
a8100 1
      load_address (&icnt, AT, &offset_expr);
d8103 2
a8104 3
		     ((bfd_arch_bits_per_address (stdoutput) == 32
		       || ! ISA_HAS_64BIT_REGS (mips_opts.isa))
		      ? "addu" : "daddu"),
d8117 4
a8120 4
      macro_build ((char *) NULL, &icnt, NULL, "sll", "d,w,<", treg,
		   treg, 8);
      macro_build ((char *) NULL, &icnt, NULL, "or", "d,v,t", treg,
		   treg, AT);
d8127 1
a8127 1
	offset_expr.X_add_number += 1;
d8130 2
a8131 1
      macro_build ((char *) NULL, &icnt, NULL, "srl", "d,w,<", AT, treg, 8);
d8133 1
a8133 1
	offset_expr.X_add_number -= 1;
d8135 1
a8135 1
	offset_expr.X_add_number += 1;
d8174 2
a8175 1
      load_address (&icnt, AT, &offset_expr);
d8178 2
a8179 3
		     ((bfd_arch_bits_per_address (stdoutput) == 32
		       || ! ISA_HAS_64BIT_REGS (mips_opts.isa))
		      ? "addu" : "daddu"),
d8196 2
a8197 1
      load_address (&icnt, AT, &offset_expr);
d8200 2
a8201 3
		     ((bfd_arch_bits_per_address (stdoutput) == 32
		       || ! ISA_HAS_64BIT_REGS (mips_opts.isa))
		      ? "addu" : "daddu"),
d8207 2
a8208 2
      macro_build ((char *) NULL, &icnt, NULL, "srl", "d,w,<", treg,
		   treg, 8);
d8221 4
a8224 4
      macro_build ((char *) NULL, &icnt, NULL, "sll", "d,w,<", treg,
		   treg, 8);
      macro_build ((char *) NULL, &icnt, NULL, "or", "d,v,t", treg,
		   treg, AT);
d8280 1
a8280 1
      mips_emit_delays (true);
d8283 1
a8283 1
      macro_build ((char *) NULL, &icnt, NULL,
d8288 2
a8289 1
      macro_build ((char *) NULL, &icnt, NULL, "break", "6", 7);
d8296 1
a8296 1
      macro_build ((char *) NULL, &icnt, NULL, s, "x", zreg);
d8315 1
a8315 1
      mips_emit_delays (true);
d8318 2
a8319 1
      macro_build ((char *) NULL, &icnt, NULL, s, "0,x,y", xreg, yreg);
d8322 2
a8323 1
	macro_build ((char *) NULL, &icnt, NULL, "break", "6", 7);
d8325 1
a8325 1
      macro_build ((char *) NULL, &icnt, NULL, s2, "x", zreg);
d8331 4
a8334 4
      macro_build ((char *) NULL, &icnt, NULL,
		   dbl ? "dmultu" : "multu",
		   "x,y", xreg, yreg);
      macro_build ((char *) NULL, &icnt, NULL, "mflo", "x", zreg);
d8346 1
a8346 2
		   dbl ? "daddiu" : "addiu",
		   "y,x,4", yreg, xreg);
d8478 1
a8478 1
      macro_build ((char *) NULL, &icnt, &expr1, "slti", "x,8",  yreg);
d8480 1
a8480 2
	macro_build ((char *) NULL, &icnt, (expressionS *) NULL,
		     "move", "y,X", xreg, yreg);
d8512 14
d8538 1
d8542 3
d8550 3
d8577 4
d8613 2
a8616 1
  int full_opcode_match = 1;
d8623 1
a8623 1
  for (s = str; *s != '\0' && !isspace ((unsigned char) *s); ++s)
d8629 1
a8629 1
  if (isspace ((unsigned char) *s))
d8647 3
a8649 1
      for (s = str; *s != '\0' && *s != '.' && !isspace ((unsigned char) *s); ++s)
a8665 2

      full_opcode_match = 0;
d8671 1
a8671 1
      boolean ok;
d8675 7
a8681 2
      if (OPCODE_IS_MEMBER (insn, mips_opts.isa, mips_cpu, mips_gp32))
	ok = true;
d8683 1
a8683 1
	ok = false;
d8687 2
a8688 2
	  if (mips_cpu == CPU_R4650 && (insn->pinfo & FP_D) != 0)
	    ok = false;
d8701 16
a8716 7
	      static char buf[100];
	      sprintf (buf,
		       _("opcode not supported on this processor: %s (%s)"),
		       mips_cpu_to_str (mips_cpu),
		       mips_isa_to_str (mips_opts.isa));

	      insn_error = buf;
d8723 1
d8726 4
a8729 2
	  if (*s == ' ')
	    ++s;
d8745 1
a8745 1
		  ip->insn_opcode |= lastregno << 21;
d8749 3
d8753 1
a8753 1
		  ip->insn_opcode |= lastregno << 16;
d8757 1
a8757 1
		  ip->insn_opcode |= lastregno << 11;
d8774 2
d8780 86
d8869 2
a8870 2
	       * than 31 or less than 0 the the shift amount should be
	       * mod 32. In reality the mips assembler issues an error.
d8877 3
a8879 3
		  as_warn (_("Improper shift amount (%ld)"),
			   (long) imm_expr.X_add_number);
		  imm_expr.X_add_number = imm_expr.X_add_number & 0x1f;
d8881 1
a8881 1
	      ip->insn_opcode |= imm_expr.X_add_number << 6;
d8892 1
a8892 1
	      ip->insn_opcode |= (imm_expr.X_add_number - 32) << 6;
d8919 1
a8919 1
	      if ((unsigned) imm_expr.X_add_number > 1023)
d8921 3
a8923 3
		  as_warn (_("Illegal break code (%ld)"),
			   (long) imm_expr.X_add_number);
		  imm_expr.X_add_number &= 0x3ff;
d8925 1
a8925 1
	      ip->insn_opcode |= imm_expr.X_add_number << 16;
d8933 1
a8933 1
	      if ((unsigned) imm_expr.X_add_number > 1023)
d8935 3
a8937 3
		  as_warn (_("Illegal lower break code (%ld)"),
			   (long) imm_expr.X_add_number);
		  imm_expr.X_add_number &= 0x3ff;
d8939 1
a8939 1
	      ip->insn_opcode |= imm_expr.X_add_number << 6;
d8947 4
a8950 4
	      if ((unsigned) imm_expr.X_add_number > 0xfffff)
		as_warn (_("Illegal 20-bit code (%ld)"),
			 (long) imm_expr.X_add_number);
	      ip->insn_opcode |= imm_expr.X_add_number << 6;
d8955 1
a8955 1
            case 'C':           /* Coprocessor code */
d8958 1
a8958 1
	      if ((unsigned long) imm_expr.X_add_number >= (1<<25))
d8960 3
a8962 3
		  as_warn (_("Coproccesor code > 25 bits (%ld)"),
			   (long) imm_expr.X_add_number);
		  imm_expr.X_add_number &= ((1<<25) - 1);
d8972 4
a8975 4
	      if ((unsigned) imm_expr.X_add_number > 0x7ffff)
		as_warn (_("Illegal 19-bit code (%ld)"),
			 (long) imm_expr.X_add_number);
	      ip->insn_opcode |= imm_expr.X_add_number << 6;
d8985 3
a8987 3
		  as_warn (_("Invalidate performance regster (%ld)"),
			   (long) imm_expr.X_add_number);
		  imm_expr.X_add_number &= 1;
d8989 1
a8989 1
	      ip->insn_opcode |= (imm_expr.X_add_number << 1);
d9003 1
d9011 1
a9011 1
		  if (isdigit ((unsigned char) s[1]))
d9021 1
a9021 1
		      while (isdigit ((unsigned char) *s));
d9025 1
a9025 1
		  else if (*args == 'E' || *args == 'G')
d9029 6
a9034 1
		      if (s[1] == 'f' && s[2] == 'p')
d9064 5
d9099 2
a9100 1
		      && *args != 'G')
d9104 1
a9104 1
		    s++;
d9111 1
a9111 1
			  args++;
d9126 1
a9126 1
		      ip->insn_opcode |= regno << 21;
d9130 2
a9131 1
		      ip->insn_opcode |= regno << 11;
d9134 2
a9135 2
		      ip->insn_opcode |= regno << 11;
		      ip->insn_opcode |= regno << 16;
d9140 1
a9140 1
		      ip->insn_opcode |= regno << 16;
d9171 1
a9171 1
		  ip->insn_opcode |= lastregno << 21;
d9174 1
a9174 1
		  ip->insn_opcode |= lastregno << 16;
d9179 41
d9227 5
a9231 1
	      if (s[0] == '$' && s[1] == 'f' && isdigit ((unsigned char) s[2]))
d9241 1
a9241 1
		  while (isdigit ((unsigned char) *s));
d9247 1
a9247 1
		      && ! ISA_HAS_64BIT_REGS (mips_opts.isa)
d9259 1
a9259 1
		    s++;
d9266 1
a9266 1
			  args++;
d9272 2
a9273 1
		      ip->insn_opcode |= regno << 6;
d9277 2
a9278 1
		      ip->insn_opcode |= regno << 11;
d9280 34
d9316 2
a9317 1
		      ip->insn_opcode |= regno << 16;
d9320 1
a9320 1
		      ip->insn_opcode |= regno << 21;
d9330 1
a9330 1
		  ip->insn_opcode |= lastregno << 11;
d9333 1
a9333 1
		  ip->insn_opcode |= lastregno << 16;
d9348 1
a9348 1
	      imm_reloc = BFD_RELOC_32;
d9358 1
d9392 6
a9397 1
		    .lit8 entries).  */
d9400 1
d9433 7
d9445 6
a9450 7
		    /* The value is simple enough to load with a
                       couple of instructions.  In mips1 mode, set
                       imm_expr to the high order 32 bits and
                       offset_expr to the low order 32 bits.
                       Otherwise, set imm_expr to the entire 64 bit
                       constant.  */
		    if (! ISA_HAS_64BIT_REGS (mips_opts.isa))
d9560 2
a9561 36
	      imm_reloc = BFD_RELOC_LO16;
	      c = my_getSmallExpression (&imm_expr, s);
	      if (c != '\0')
		{
		  if (c != 'l')
		    {
		      if (imm_expr.X_op == O_constant)
			imm_expr.X_add_number =
			  (imm_expr.X_add_number >> 16) & 0xffff;
		      else if (c == 'h')
			{
			  imm_reloc = BFD_RELOC_HI16_S;
			  imm_unmatched_hi = true;
			}
		      else
			imm_reloc = BFD_RELOC_HI16;
		    }
		  else if (imm_expr.X_op == O_constant)
		    imm_expr.X_add_number &= 0xffff;
		}
	      if (*args == 'i')
		{
		  if ((c == '\0' && imm_expr.X_op != O_constant)
		      || ((imm_expr.X_add_number < 0
			   || imm_expr.X_add_number >= 0x10000)
			  && imm_expr.X_op == O_constant))
		    {
		      if (insn + 1 < &mips_opcodes[NUMOPCODES] &&
			  !strcmp (insn->name, insn[1].name))
			break;
		      if (imm_expr.X_op == O_constant
			  || imm_expr.X_op == O_big)
			as_bad (_("16 bit expression not in range 0..65535"));
		    }
		}
	      else
d9564 16
a9579 1
		  offsetT max;
d9581 7
a9587 13
		  /* The upper bound should be 0x8000, but
		     unfortunately the MIPS assembler accepts numbers
		     from 0x8000 to 0xffff and sign extends them, and
		     we want to be compatible.  We only permit this
		     extended range for an instruction which does not
		     provide any further alternates, since those
		     alternates may handle other cases.  People should
		     use the numbers they mean, rather than relying on
		     a mysterious sign extension.  */
		  more = (insn + 1 < &mips_opcodes[NUMOPCODES] &&
			  strcmp (insn->name, insn[1].name) == 0);
		  if (more)
		    max = 0x8000;
d9589 5
a9593 10
		    max = 0x10000;
		  if ((c == '\0' && imm_expr.X_op != O_constant)
		      || ((imm_expr.X_add_number < -0x8000
			   || imm_expr.X_add_number >= max)
			  && imm_expr.X_op == O_constant)
		      || (more
			  && imm_expr.X_add_number < 0
			  && ISA_HAS_64BIT_REGS (mips_opts.isa)
			  && imm_expr.X_unsigned
			  && sizeof (imm_expr.X_add_number) <= 4))
d9599 1
a9599 1
			as_bad (_("16 bit expression not in range -32768..32767"));
d9606 9
a9614 1
	      c = my_getSmallExpression (&offset_expr, s);
d9618 2
a9619 10
		 code pattern.  As a special hack, we accept the
		 difference of two local symbols as a constant.  This
		 is required to suppose embedded PIC switches, which
		 use an instruction which looks like
		     lw $4,$L12-$LS12($4)
		 The problem with handling this in a more general
		 fashion is that the macro function doesn't expect to
		 see anything which can be handled in a single
		 constant instruction.  */
	      if (c == 0
d9622 1
a9622 5
		      || offset_expr.X_add_number < -0x8000)
		  && (mips_pic != EMBEDDED_PIC
		      || offset_expr.X_op != O_subtract
		      || (S_GET_SEGMENT (offset_expr.X_add_symbol)
			  != S_GET_SEGMENT (offset_expr.X_op_symbol))))
a9624 8
	      if (c == 'h' || c == 'H')
		{
		  if (offset_expr.X_op != O_constant)
		    break;
		  offset_expr.X_add_number =
		    (offset_expr.X_add_number >> 16) & 0xffff;
		}
	      offset_reloc = BFD_RELOC_LO16;
d9629 1
a9629 1
	      offset_reloc = BFD_RELOC_16_PCREL_S2;
d9635 2
a9636 21
	      c = my_getSmallExpression (&imm_expr, s);
	      imm_reloc = BFD_RELOC_LO16;
	      if (c)
		{
		  if (c != 'l')
		    {
		      if (imm_expr.X_op == O_constant)
			imm_expr.X_add_number =
			  (imm_expr.X_add_number >> 16) & 0xffff;
		      else if (c == 'h')
			{
			  imm_reloc = BFD_RELOC_HI16_S;
			  imm_unmatched_hi = true;
			}
		      else
			imm_reloc = BFD_RELOC_HI16;
		    }
		  else if (imm_expr.X_op == O_constant)
		    imm_expr.X_add_number &= 0xffff;
		}
	      if (imm_expr.X_op == O_constant
d9646 1
a9646 1
	      offset_reloc = BFD_RELOC_MIPS_JMP;
d9661 1
a9661 1
	      while (isdigit ((unsigned char) *s));
d9673 1
a9673 1
	      if (isdigit ((unsigned char) *s))
d9682 1
a9682 1
		  while (isdigit ((unsigned char) *s));
d9692 35
d9739 1
d9742 2
d9771 2
a9772 2
  mips16_small = false;
  mips16_ext = false;
d9774 1
a9774 1
  for (s = str; islower ((unsigned char) *s); ++s)
d9789 1
a9789 1
	  mips16_small = true;
d9796 1
a9796 1
	  mips16_ext = true;
d9807 1
a9807 1
    mips16_small = true;
d9822 1
a9822 1
      ip->use_extend = false;
d9824 3
a9826 1
      imm_reloc = BFD_RELOC_UNUSED;
d9828 3
a9830 1
      offset_reloc = BFD_RELOC_UNUSED;
d9850 1
a9850 1
		      && imm_reloc > BFD_RELOC_UNUSED
d9853 2
a9854 3
		      mips16_immed ((char *) NULL, 0,
				    imm_reloc - BFD_RELOC_UNUSED,
				    imm_expr.X_add_number, true, mips16_small,
d9858 1
a9858 1
		      imm_reloc = BFD_RELOC_UNUSED;
d9910 1
a9910 1
	      if (isdigit ((unsigned char) s[1]))
d9920 1
a9920 1
		  while (isdigit ((unsigned char) *s));
d9929 6
a9934 1
		  if (s[1] == 'f' && s[2] == 'p')
d9964 5
d9981 1
a9981 1
		      args++;
d10092 2
a10093 2
		      mips16_ext = true;
		      imm_reloc = BFD_RELOC_MIPS16_GPREL;
d10095 1
a10095 1
		      ip->use_extend = true;
d10120 1
a10120 1
		      imm_reloc = (int) BFD_RELOC_UNUSED + c;
d10128 1
a10128 1
	      imm_reloc = (int) BFD_RELOC_UNUSED + c;
d10146 1
a10146 1
	      offset_reloc = (int) BFD_RELOC_UNUSED + c;
d10168 1
a10168 1
	      offset_reloc = BFD_RELOC_MIPS16_JMP;
d10201 1
a10201 1
		    while (isdigit ((unsigned char) *s))
d10228 1
a10228 1
			while (isdigit ((unsigned char) *s))
d10249 1
a10249 1
		    else if (reg1 == 31 && reg2 == 31)
d10371 3
a10373 3
     boolean warn;
     boolean small;
     boolean ext;
d10375 1
a10375 1
     boolean *use_extend;
d10380 1
a10380 1
  boolean needext;
d10415 1
a10415 1
    needext = true;
d10417 1
a10417 1
    needext = false;
d10429 1
a10429 1
      *use_extend = false;
d10453 1
a10453 1
      *use_extend = true;
d10475 43
a10517 2
#define LP '('
#define RP ')'
d10519 23
a10541 2
static int
my_getSmallExpression (ep, str)
d10543 1
d10546 4
a10549 2
  char *sp;
  int c = 0;
d10551 7
a10557 8
  if (*str == ' ')
    str++;
  if (*str == LP
      || (*str == '%' &&
	  ((str[1] == 'h' && str[2] == 'i')
	   || (str[1] == 'H' && str[2] == 'I')
	   || (str[1] == 'l' && str[2] == 'o'))
	  && str[3] == LP))
d10559 26
a10584 7
      if (*str == LP)
	c = 0;
      else
	{
	  c = str[1];
	  str += 3;
	}
d10586 7
a10592 57
      /*
       * A small expression may be followed by a base register.
       * Scan to the end of this operand, and then back over a possible
       * base register.  Then scan the small expression up to that
       * point.  (Based on code in sparc.c...)
       */
      for (sp = str; *sp && *sp != ','; sp++)
	;
      if (sp - 4 >= str && sp[-1] == RP)
	{
	  if (isdigit ((unsigned char) sp[-2]))
	    {
	      for (sp -= 3; sp >= str && isdigit ((unsigned char) *sp); sp--)
		;
	      if (*sp == '$' && sp > str && sp[-1] == LP)
		{
		  sp--;
		  goto do_it;
		}
	    }
	  else if (sp - 5 >= str
		   && sp[-5] == LP
		   && sp[-4] == '$'
		   && ((sp[-3] == 'f' && sp[-2] == 'p')
		       || (sp[-3] == 's' && sp[-2] == 'p')
		       || (sp[-3] == 'g' && sp[-2] == 'p')
		       || (sp[-3] == 'a' && sp[-2] == 't')))
	    {
	      sp -= 5;
	    do_it:
	      if (sp == str)
		{
		  /* no expression means zero offset */
		  if (c)
		    {
		      /* %xx(reg) is an error */
		      ep->X_op = O_absent;
		      expr_end = str - 3;
		    }
		  else
		    {
		      ep->X_op = O_constant;
		      expr_end = sp;
		    }
		  ep->X_add_symbol = NULL;
		  ep->X_op_symbol = NULL;
		  ep->X_add_number = 0;
		}
	      else
		{
		  *sp = '\0';
		  my_getExpression (ep, str);
		  *sp = LP;
		}
	      return c;
	    }
	}
d10594 2
a10595 2
  my_getExpression (ep, str);
  return c;			/* => %hi or %lo encountered */
d10695 24
a10718 1
CONST char *md_shortopts = "O::g::G:";
d10731 7
a10737 3
#define OPTION_MCPU (OPTION_MD_BASE + 5)
  {"mcpu", required_argument, NULL, OPTION_MCPU},
#define OPTION_MEMBEDDED_PIC (OPTION_MD_BASE + 6)
d10739 1
a10739 1
#define OPTION_TRAP (OPTION_MD_BASE + 7)
d10742 1
a10742 1
#define OPTION_BREAK (OPTION_MD_BASE + 8)
d10745 1
a10745 1
#define OPTION_EB (OPTION_MD_BASE + 9)
d10747 1
a10747 1
#define OPTION_EL (OPTION_MD_BASE + 10)
d10749 24
a10772 1
#define OPTION_M4650 (OPTION_MD_BASE + 11)
d10774 1
a10774 1
#define OPTION_NO_M4650 (OPTION_MD_BASE + 12)
d10776 1
a10776 1
#define OPTION_M4010 (OPTION_MD_BASE + 13)
d10778 1
a10778 1
#define OPTION_NO_M4010 (OPTION_MD_BASE + 14)
d10780 1
a10780 1
#define OPTION_M4100 (OPTION_MD_BASE + 15)
d10782 1
a10782 1
#define OPTION_NO_M4100 (OPTION_MD_BASE + 16)
d10784 1
a10784 5
#define OPTION_MIPS16 (OPTION_MD_BASE + 17)
  {"mips16", no_argument, NULL, OPTION_MIPS16},
#define OPTION_NO_MIPS16 (OPTION_MD_BASE + 18)
  {"no-mips16", no_argument, NULL, OPTION_NO_MIPS16},
#define OPTION_M3900 (OPTION_MD_BASE + 19)
d10786 1
a10786 1
#define OPTION_NO_M3900 (OPTION_MD_BASE + 20)
d10788 1
a10788 9
#define OPTION_MABI (OPTION_MD_BASE + 21)
  {"mabi", required_argument, NULL, OPTION_MABI},
#define OPTION_M7000_HILO_FIX (OPTION_MD_BASE + 22)
  {"mfix7000", no_argument, NULL, OPTION_M7000_HILO_FIX},
#define OPTION_NO_M7000_HILO_FIX (OPTION_MD_BASE + 23)
  {"no-fix-7000", no_argument, NULL, OPTION_NO_M7000_HILO_FIX},
#define OPTION_GP32 (OPTION_MD_BASE + 24)
  {"mgp32", no_argument, NULL, OPTION_GP32},
#define OPTION_GP64 (OPTION_MD_BASE + 25)
d10790 18
a10807 10
#define OPTION_CONSTRUCT_FLOATS (OPTION_MD_BASE + 26)
  {"construct-floats", no_argument, NULL, OPTION_CONSTRUCT_FLOATS},
#define OPTION_NO_CONSTRUCT_FLOATS (OPTION_MD_BASE + 27)
  {"no-construct-floats", no_argument, NULL, OPTION_NO_CONSTRUCT_FLOATS},
#define OPTION_MIPS32 (OPTION_MD_BASE + 28)
  {"mips32", no_argument, NULL, OPTION_MIPS32},
#define OPTION_MIPS5 (OPTION_MD_BASE + 29)
  {"mips5", no_argument, NULL, OPTION_MIPS5},
#define OPTION_MIPS64 (OPTION_MD_BASE + 30)
  {"mips64", no_argument, NULL, OPTION_MIPS64},
d10809 1
a10809 1
#define OPTION_ELF_BASE    (OPTION_MD_BASE + 35)
a10810 4
#define OPTION_NON_SHARED  (OPTION_ELF_BASE + 1)
#define OPTION_XGOT        (OPTION_ELF_BASE + 2)
#define OPTION_32 	   (OPTION_ELF_BASE + 3)
#define OPTION_64          (OPTION_ELF_BASE + 4)
d10813 1
d10815 1
d10817 3
d10821 3
d10825 5
a10829 2
#endif

d10834 18
d10883 4
d10907 1
a10907 1
      mips_opts.isa = ISA_MIPS1;
d10911 1
a10911 1
      mips_opts.isa = ISA_MIPS2;
d10915 1
a10915 1
      mips_opts.isa = ISA_MIPS3;
d10919 1
a10919 1
      mips_opts.isa = ISA_MIPS4;
d10923 1
a10923 1
      mips_opts.isa = ISA_MIPS5;
d10927 5
a10931 1
      mips_opts.isa = ISA_MIPS32;
d10935 1
a10935 1
      mips_opts.isa = ISA_MIPS64;
d10938 3
a10940 8
    case OPTION_MCPU:
      {
	/* Identify the processor type.  */
	if (strcasecmp (arg, "default") == 0)
	  mips_cpu = CPU_UNKNOWN;
	else
	  {
	    const struct mips_cpu_info *ci;
d10942 2
a10943 7
	    ci = mips_cpu_info_from_name (arg);
	    if (ci == NULL || ci->is_isa)
	      as_bad (_("invalid architecture -mcpu=%s"), arg);
	    else
	      mips_cpu = ci->cpu;
	  }
      }
d10947 2
a10948 1
      mips_cpu = CPU_R4650;
d10955 2
a10956 1
      mips_cpu = CPU_R4010;
d10963 2
a10964 1
      mips_cpu = CPU_VR4100;
d10971 2
a10972 1
      mips_cpu = CPU_R3900;
d10978 8
d10988 1
a10988 1
      mips_no_prev_insn (false);
d10993 9
a11001 1
      mips_no_prev_insn (false);
d11014 16
d11083 2
a11084 2
      /* The -32 and -64 options tell the assembler to output the 32
         bit or the 64 bit MIPS ELF format.  */
d11086 15
a11100 1
      mips_64 = 0;
d11104 8
a11111 15
      {
	const char **list, **l;

	list = bfd_target_list ();
	for (l = list; *l != NULL; l++)
	  if (strcmp (*l, "elf64-bigmips") == 0
	      || strcmp (*l, "elf64-littlemips") == 0
	      || strcmp (*l, "elf64-tradbigmips") == 0
	      || strcmp (*l, "elf64-tradlittlemips") == 0)
	    break;
	if (*l == NULL)
	  as_fatal (_("No compiled in support for 64 bit object file format"));
	free (list);
	mips_64 = 1;
      }
d11116 2
a11117 2
      mips_gp32 = 1;
      mips_64 = 0;
d11119 3
a11121 8
      /* We deliberately don't allow "-gp32" to set the MIPS_32BITMODE
	 flag in object files because to do so would make it
	 impossible to link with libraries compiled without "-gp32".
	 This is unnecessarily restrictive.

	 We could solve this problem by adding "-gp32" multilibs to
	 gcc, but to set this flag before gcc is built with such
	 multilibs will break too many systems.  */
d11123 2
a11124 3
#if 0
      mips_32bitmode = 1;
#endif
d11127 2
a11128 6
    case OPTION_GP64:
      mips_gp32 = 0;
      mips_64 = 1;
#if 0
      mips_32bitmode = 0;
#endif
d11131 1
d11133 25
a11157 6
      if (strcmp (arg, "32") == 0
	  || strcmp (arg, "n32") == 0
	  || strcmp (arg, "64") == 0
	  || strcmp (arg, "o64") == 0
	  || strcmp (arg, "eabi") == 0)
	mips_abi_string = arg;
d11159 1
d11162 10
a11171 1
      mips_7000_hilo_fix = true;
d11174 2
a11175 2
    case OPTION_NO_M7000_HILO_FIX:
      mips_7000_hilo_fix = false;
d11177 1
d11185 18
d11205 2
a11206 5
show (stream, string, col_p, first_p)
     FILE *stream;
     char *string;
     int *col_p;
     int *first_p;
d11208 1
a11208 1
  if (*first_p)
d11210 2
a11211 2
      fprintf (stream, "%24s", "");
      *col_p = 24;
d11213 9
a11221 1
  else
d11223 3
a11225 2
      fprintf (stream, ", ");
      *col_p += 2;
d11228 15
a11242 1
  if (*col_p + strlen (string) > 72)
d11244 15
a11258 2
      fprintf (stream, "\n%24s", "");
      *col_p = 24;
d11261 3
a11263 2
  fprintf (stream, "%s", string);
  *col_p += strlen (string);
d11265 3
a11267 2
  *first_p = 0;
}
d11269 3
a11271 5
void
md_show_usage (stream)
     FILE *stream;
{
  int column, first;
d11273 19
a11291 17
  fprintf (stream, _("\
MIPS options:\n\
-membedded-pic		generate embedded position independent code\n\
-EB			generate big endian output\n\
-EL			generate little endian output\n\
-g, -g2			do not remove uneeded NOPs or swap branches\n\
-G NUM			allow referencing objects up to NUM bytes\n\
			implicitly with the gp register [default 8]\n"));
  fprintf (stream, _("\
-mips1			generate MIPS ISA I instructions\n\
-mips2			generate MIPS ISA II instructions\n\
-mips3			generate MIPS ISA III instructions\n\
-mips4			generate MIPS ISA IV instructions\n\
-mips5                  generate MIPS ISA V instructions\n\
-mips32                 generate MIPS32 ISA instructions\n\
-mips64                 generate MIPS64 ISA instructions\n\
-mcpu=CPU		generate code for CPU, where CPU is one of:\n"));
d11293 8
a11300 1
  first = 1;
d11302 1
a11302 19
  show (stream, "2000", &column, &first);
  show (stream, "3000", &column, &first);
  show (stream, "3900", &column, &first);
  show (stream, "4000", &column, &first);
  show (stream, "4010", &column, &first);
  show (stream, "4100", &column, &first);
  show (stream, "4111", &column, &first);
  show (stream, "4300", &column, &first);
  show (stream, "4400", &column, &first);
  show (stream, "4600", &column, &first);
  show (stream, "4650", &column, &first);
  show (stream, "5000", &column, &first);
  show (stream, "6000", &column, &first);
  show (stream, "8000", &column, &first);
  show (stream, "10000", &column, &first);
  show (stream, "12000", &column, &first);
  show (stream, "mips32-4k", &column, &first);
  show (stream, "sb-1", &column, &first);
  fputc ('\n', stream);
d11304 5
a11308 4
  fprintf (stream, _("\
-mCPU			equivalent to -mcpu=CPU.\n\
-no-mCPU		don't generate code specific to CPU.\n\
			For -mCPU and -no-mCPU, CPU must be one of:\n"));
d11310 2
a11311 1
  first = 1;
d11313 8
a11320 5
  show (stream, "3900", &column, &first);
  show (stream, "4010", &column, &first);
  show (stream, "4100", &column, &first);
  show (stream, "4650", &column, &first);
  fputc ('\n', stream);
d11322 16
a11337 17
  fprintf (stream, _("\
-mips16			generate mips16 instructions\n\
-no-mips16		do not generate mips16 instructions\n"));
  fprintf (stream, _("\
-O0			remove unneeded NOPs, do not swap branches\n\
-O			remove unneeded NOPs and swap branches\n\
--[no-]construct-floats [dis]allow floating point values to be constructed\n\
--trap, --no-break	trap exception on div by 0 and mult overflow\n\
--break, --no-trap	break exception on div by 0 and mult overflow\n"));
#ifdef OBJ_ELF
  fprintf (stream, _("\
-KPIC, -call_shared	generate SVR4 position independent code\n\
-non_shared		do not generate position independent code\n\
-xgot			assume a 32 bit GOT\n\
-32			create 32 bit object file (default)\n\
-64			create 64 bit object file\n"));
#endif
d11355 1
a11355 5
    {
      /* This makes a branch to an undefined symbol be a branch to the
	 current location.  */
      return 4;
    }
d11357 1
a11357 1
  /* return the address of the delay slot */
a11360 31
/* This is called by emit_expr via TC_CONS_FIX_NEW when creating a
   reloc for a cons.  We could use the definition there, except that
   we want to handle 64 bit relocs specially.  */

void
cons_fix_new_mips (frag, where, nbytes, exp)
     fragS *frag ATTRIBUTE_UNUSED;
     int where;
     unsigned int nbytes;
     expressionS *exp;
{
#ifndef OBJ_ELF
  /* If we are assembling in 32 bit mode, turn an 8 byte reloc into a
     4 byte reloc.  */
  if (nbytes == 8 && ! mips_64)
    {
      if (target_big_endian)
	where += 4;
      nbytes = 4;
    }
#endif

  if (nbytes != 2 && nbytes != 4 && nbytes != 8)
    as_bad (_("Unsupported reloc size %d"), nbytes);

  fix_new_exp (frag_now, where, (int) nbytes, exp, 0,
	       (nbytes == 2
		? BFD_RELOC_16
		: (nbytes == 4 ? BFD_RELOC_32 : BFD_RELOC_64)));
}

d11380 1
a11380 1
   the corresponding LO reloc.  This is called before md_apply_fix and
d11394 1
a11394 1
      assert (l->fixp->fx_r_type == BFD_RELOC_HI16_S);
d11396 8
a11403 6
      /* Check quickly whether the next fixup happens to be a matching
         %lo.  */
      if (l->fixp->fx_next != NULL
	  && l->fixp->fx_next->fx_r_type == BFD_RELOC_LO16
	  && l->fixp->fx_addsy == l->fixp->fx_next->fx_addsy
	  && l->fixp->fx_offset == l->fixp->fx_next->fx_offset)
d11425 2
a11426 3
		      || prev->fx_r_type != BFD_RELOC_HI16_S
		      || prev->fx_addsy != f->fx_addsy
		      || prev->fx_offset !=  f->fx_offset))
d11478 4
a11481 1
   to keep relocations for switch table entries.  */
d11487 8
a11494 2
  if (fixp->fx_r_type == BFD_RELOC_VTABLE_INHERIT
      || fixp->fx_r_type == BFD_RELOC_VTABLE_ENTRY)
d11504 105
d11611 2
a11612 2
int
md_apply_fix (fixP, valueP)
d11614 2
a11615 1
     valueT *valueP;
d11617 1
a11617 1
  unsigned char *buf;
d11620 6
d11629 7
d11637 7
d11645 2
a11646 1
	  || fixP->fx_r_type == BFD_RELOC_VTABLE_ENTRY);
d11648 1
a11648 1
  value = *valueP;
d11655 1
a11655 10
      if (S_GET_OTHER (fixP->fx_addsy) == STO_MIPS16
	  || S_IS_WEAK (fixP->fx_addsy)
	  || (symbol_used_in_reloc_p (fixP->fx_addsy)
	      && (((bfd_get_section_flags (stdoutput,
					   S_GET_SEGMENT (fixP->fx_addsy))
		    & SEC_LINK_ONCE) != 0)
		  || !strncmp (segment_name (S_GET_SEGMENT (fixP->fx_addsy)),
			       ".gnu.linkonce",
			       sizeof (".gnu.linkonce") - 1))))

d11657 1
d11659 1
d11661 3
a11663 1
	  if (value != 0 && ! fixP->fx_pcrel)
d11668 22
a11689 1
		 FIXME: If this makes VALUE zero, we're toast.  */
d11691 32
d11744 1
a11744 1
  fixP->fx_addnumber = value;	/* Remember value for tc_gen_reloc */
d11746 9
a11754 1
  if (fixP->fx_addsy == NULL && ! fixP->fx_pcrel)
d11756 1
d11761 15
d11778 1
a11778 1
    case BFD_RELOC_MIPS_GPREL:
d11782 1
a11782 1
    case BFD_RELOC_MIPS_GPREL32:
d11817 2
a11818 4
      if (value & 0x8000)
	value += 0x10000;
      value >>= 16;
      buf = (unsigned char *) fixP->fx_frag->fr_literal + fixP->fx_where;
d11821 1
a11821 1
      md_number_to_chars (buf, value, 2);
d11834 1
a11834 1
      buf = (unsigned char *) fixP->fx_frag->fr_literal + fixP->fx_where;
d11837 1
a11837 1
      md_number_to_chars (buf, value, 2);
d11899 1
a11899 1
	  buf = (unsigned char *) fixP->fx_frag->fr_literal + fixP->fx_where;
d11902 1
a11902 1
	  md_number_to_chars (buf, value, 2);
d11907 4
d11916 1
a11916 5
      if ((value & 0x3) != 0)
	as_bad_where (fixP->fx_file, fixP->fx_line,
		      _("Branch to odd address (%lx)"), (long) value);

      if (!fixP->fx_done && value != 0)
d11921 4
a11924 1
      if (!fixP->fx_done)
d11930 1
a11930 1
      buf = (unsigned char *) (fixP->fx_where + fixP->fx_frag->fr_literal);
d11963 3
a11965 7
	      /* FIXME.  It would be possible in principle to handle
                 conditional branches which overflow.  They could be
                 transformed into a branch around a jump.  This would
                 require setting up variant frags for each different
                 branch type.  The native MIPS assembler attempts to
                 handle these cases, but it appears to do it
                 incorrectly.  */
a11988 2

  return 1;
d12102 1
a12102 1
  mips_emit_delays (false);
d12146 1
a12146 1
      input_line_pointer++;
d12168 1
a12168 1
  mips_emit_delays (false);
d12188 1
a12188 1
     for a obj_section_change_hook macro, but that might be confusing
d12195 1
a12195 1
  mips_emit_delays (false);
d12262 60
d12334 1
a12334 1
  mips_emit_delays (false);
d12349 1
a12349 1
  mips_emit_delays (false);
d12471 1
a12471 1
    input_line_pointer++;
d12490 1
a12490 1
      mips_emit_delays (true);
d12534 8
d12544 1
a12544 1
      int isa;
d12548 51
a12598 13
      isa = atoi (name + 4);
      switch (isa)
      {
      case  0: mips_opts.isa = file_mips_isa;   break;
      case  1: mips_opts.isa = ISA_MIPS1;       break;
      case  2: mips_opts.isa = ISA_MIPS2;       break;
      case  3: mips_opts.isa = ISA_MIPS3;       break;
      case  5: mips_opts.isa = ISA_MIPS5;       break;
      case  4: mips_opts.isa = ISA_MIPS4;       break;
      case 32: mips_opts.isa = ISA_MIPS32;      break;
      case 64: mips_opts.isa = ISA_MIPS64;      break;
      default: as_bad (_("unknown ISA level")); break;
      }
d12625 1
a12625 1
	    mips_emit_delays (true);
d12684 3
a12686 2
  /* If we are not generating SVR4 PIC code, .cpload is ignored.  */
  if (mips_pic != SVR4_PIC)
d12692 1
a12692 1
  /* .cpload should be a in .set noreorder section.  */
d12704 3
a12706 3
  macro_build_lui ((char *) NULL, &icnt, &ex, GP);
  macro_build ((char *) NULL, &icnt, &ex, "addiu", "t,r,j", GP, GP,
	       (int) BFD_RELOC_LO16);
d12709 120
a12828 1
	       GP, GP, tc_get_register (0));
d12830 1
d12845 72
a12916 2
  /* If we are not generating SVR4 PIC code, .cprestore is ignored.  */
  if (mips_pic != SVR4_PIC)
d12922 1
a12922 12
  mips_cprestore_offset = get_absolute_expression ();

  ex.X_op = O_constant;
  ex.X_add_symbol = NULL;
  ex.X_op_symbol = NULL;
  ex.X_add_number = mips_cprestore_offset;

  macro_build ((char *) NULL, &icnt, &ex,
	       ((bfd_arch_bits_per_address (stdoutput) == 32
		 || ! ISA_HAS_64BIT_REGS (mips_opts.isa))
		? "sw" : "sd"),
	       "t,o(b)", GP, (int) BFD_RELOC_LO16, SP);
d12946 1
a12946 1
  mips_emit_delays (true);
d12961 46
a13006 2
  fix_new_exp (frag_now, p - frag_now->fr_literal, 4, &ex, 0,
	       BFD_RELOC_MIPS_GPREL32);
d13031 2
a13032 4
	       ((bfd_arch_bits_per_address (stdoutput) == 32
		 || ! ISA_HAS_64BIT_REGS (mips_opts.isa))
		? "addu" : "daddu"),
	       "d,v,t", reg, reg, GP);
d13050 1
a13050 2
  if (mips_opts.mips16)
    mips16_mark_labels ();
d13065 1
a13065 1
  if (type == 'n' && mips_opts.mips16)
d13095 1
a13095 1
	  as_bad ("Ignoring attempt to redefine symbol `%s'.",
d13111 1
a13111 1
	  ignore_rest_of_line();
d13134 1
a13134 1
      reg = 0;
d13136 1
a13136 1
  else if (isdigit ((unsigned char) *input_line_pointer))
d13142 1
a13142 1
	  reg = 0;
d13147 10
a13156 2
      if (strncmp (input_line_pointer, "fp", 2) == 0)
	reg = FP;
d13158 4
a13161 1
	reg = SP;
d13163 4
a13166 1
	reg = GP;
d13168 19
a13186 1
	reg = AT;
d13190 3
a13192 1
	  reg = 0;
a13193 1
      input_line_pointer += 2;
d13196 5
a13200 1
    mips_frame_reg = reg != 0 ? reg : SP;
d13238 1
a13238 1
  if (USE_GLOBAL_POINTER_OPT)
d13243 1
a13243 1
      /* Find out whether this symbol can be referenced off the GP
d13246 1
a13246 1
	 not be referenced off the GP, although it appears as though
d13293 1
a13293 1
    /* We are not optimizing for the GP register.  */
d13297 58
d13404 2
a13405 23

  /* We can't always call S_GET_VALUE here, because we don't want to
     lock in a particular frag address.  */
  if (symbol_constant_p (fragp->fr_symbol))
    {
      val = S_GET_VALUE (fragp->fr_symbol) + sym_frag->fr_address;
      symsec = S_GET_SEGMENT (fragp->fr_symbol);
    }
  else if (symbol_equated_p (fragp->fr_symbol)
	   && (symbol_constant_p
	       (symbol_get_value_expression (fragp->fr_symbol)->X_add_symbol)))
    {
      symbolS *eqsym;

      eqsym = symbol_get_value_expression (fragp->fr_symbol)->X_add_symbol;
      val = (S_GET_VALUE (eqsym)
	     + symbol_get_frag (eqsym)->fr_address
	     + symbol_get_value_expression (fragp->fr_symbol)->X_add_number
	     + sym_frag->fr_address);
      symsec = S_GET_SEGMENT (eqsym);
    }
  else
    return 1;
d13556 67
d13633 1
a13633 2
  int change = 0;
  boolean linkonce = false;
d13635 1
a13635 1
  if (RELAX_MIPS16_P (fragp->fr_subtype))
d13637 4
a13640 10
      if (mips16_extended_frag (fragp, segtype, 0))
	{
	  fragp->fr_subtype = RELAX_MIPS16_MARK_EXTENDED (fragp->fr_subtype);
	  return 4;
	}
      else
	{
	  fragp->fr_subtype = RELAX_MIPS16_CLEAR_EXTENDED (fragp->fr_subtype);
	  return 2;
	}
d13643 5
d13649 1
a13649 3
    {
      change = nopic_need_relax (fragp->fr_symbol, 0);
    }
d13651 1
a13651 48
    {
      symbolS *sym;
      asection *symsec;

      sym = fragp->fr_symbol;

      /* Handle the case of a symbol equated to another symbol.  */
      while (symbol_equated_p (sym)
	     && (! S_IS_DEFINED (sym) || S_IS_COMMON (sym)))
	{
	  symbolS *n;

	  /* It's possible to get a loop here in a badly written
             program.  */
	  n = symbol_get_value_expression (sym)->X_add_symbol;
	  if (n == sym)
	    break;
	  sym = n;
	}

      symsec = S_GET_SEGMENT (sym);

      /* duplicate the test for LINK_ONCE sections as in adjust_reloc_syms */
      if (symsec != segtype && ! S_IS_LOCAL (sym))
	{
	  if ((bfd_get_section_flags (stdoutput, symsec) & SEC_LINK_ONCE)
	      != 0)
	    linkonce = true;

	  /* The GNU toolchain uses an extension for ELF: a section
	     beginning with the magic string .gnu.linkonce is a linkonce
	     section.  */
	  if (strncmp (segment_name (symsec), ".gnu.linkonce",
		       sizeof ".gnu.linkonce" - 1) == 0)
	    linkonce = true;
	}

      /* This must duplicate the test in adjust_reloc_syms.  */
      change = (symsec != &bfd_und_section
		&& symsec != &bfd_abs_section
		&& ! bfd_is_com_section (symsec)
		&& !linkonce
#ifdef OBJ_ELF
		/* A weak symbol is treated as external.  */
		&& ! S_IS_WEAK (sym)
#endif
		);
    }
d13666 4
a13669 1
	as_warn (_("AT used after \".set noat\" or macro used after \".set nomacro\""));
d13672 1
a13672 4
  if (! change)
    return 0;
  else
    return RELAX_NEW (fragp->fr_subtype) - RELAX_OLD (fragp->fr_subtype);
d13688 1
d13692 1
d13695 1
d13702 1
a13735 2
  else if (fixp->fx_pcrel == 0 || OUTPUT_FLAVOR == bfd_target_elf_flavour)
    reloc->addend = fixp->fx_addnumber;
d13738 2
a13739 3
      /* We use a special addend for an internal RELLO reloc.  */
      if (symbol_section_p (fixp->fx_addsy))
	reloc->addend = reloc->address - S_GET_VALUE (fixp->fx_subsy);
d13741 7
a13747 1
	reloc->addend = fixp->fx_addnumber + reloc->address;
d13753 2
a13754 2
      /* We use a special addend for an internal RELHI reloc.  The
	 reloc is relative to the RELLO; adjust the addend
d13756 14
a13769 8
      if (symbol_section_p (fixp->fx_addsy))
	reloc->addend = (fixp->fx_next->fx_frag->fr_address
			 + fixp->fx_next->fx_where
			 - S_GET_VALUE (fixp->fx_subsy));
      else
	reloc->addend = (fixp->fx_addnumber
			 + fixp->fx_next->fx_frag->fr_address
			 + fixp->fx_next->fx_where);
d13771 2
d13786 4
a13789 1
      && (fixp->fx_r_type == BFD_RELOC_MIPS_GPREL
d13795 2
a13796 1
	  || fixp->fx_r_type == BFD_RELOC_MIPS_CALL_LO16))
d13809 2
a13810 2
	  assert ((fixp->fx_r_type == BFD_RELOC_MIPS_GPREL
		   && fixp->fx_next->fx_r_type == BFD_RELOC_MIPS_GPREL)
d13823 1
d13831 2
a13832 1
      reloc2->addend = fixp->fx_addnumber;
d13848 1
a13848 1
	  assert (fixp->fx_r_type == BFD_RELOC_MIPS_GPREL);
a13858 1
	    case BFD_RELOC_MIPS_CALL16:
d13861 24
a13884 1
	      fixp->fx_r_type = BFD_RELOC_MIPS_GOT16;
d13892 3
a13894 3
  /* Since MIPS ELF uses Rel instead of Rela, encode the vtable entry
     to be used in the relocation's section offset.  */
  if (fixp->fx_r_type == BFD_RELOC_VTABLE_ENTRY)
d13936 13
d13975 2
a13976 1
mips_relax_frag (fragp, stretch)
d13980 9
d13992 1
a13992 1
  if (mips16_extended_frag (fragp, (asection *) NULL, stretch))
d13996 224
a14219 10
      fragp->fr_subtype = RELAX_MIPS16_MARK_EXTENDED (fragp->fr_subtype);
      return 2;
    }
  else
    {
      if (! RELAX_MIPS16_EXTENDED (fragp->fr_subtype))
	return 0;
      fragp->fr_subtype = RELAX_MIPS16_CLEAR_EXTENDED (fragp->fr_subtype);
      return -2;
    }
d14221 2
a14222 2
  return 0;
}
d14224 1
a14224 1
/* Convert a machine dependent frag.  */
d14226 2
a14227 8
void
md_convert_frag (abfd, asec, fragp)
     bfd *abfd ATTRIBUTE_UNUSED;
     segT asec;
     fragS *fragp;
{
  int old, new;
  char *fixptr;
d14233 1
a14233 1
      boolean small, ext;
d14237 1
a14237 1
      boolean use_extend;
d14247 2
a14248 2
	  small = false;
	  ext = true;
d14252 2
a14253 2
	  small = true;
	  ext = false;
d14256 1
a14256 1
      resolve_symbol_value (fragp->fr_symbol, 1);
d14309 1
a14309 1
	  md_number_to_chars (buf, 0xf000 | extend, 2);
d14314 1
a14314 1
      md_number_to_chars (buf, insn, 2);
d14328 1
a14328 1
	memcpy (fixptr - old, fixptr, new);
d14398 1
a14398 1
  if (! mips_64)
d14437 10
d14448 1
a14448 3
  if (mips_abi_string == 0)
    ;
  else if (strcmp (mips_abi_string, "32") == 0)
d14450 1
a14450 1
  else if (strcmp (mips_abi_string, "o64") == 0)
d14452 1
a14452 1
  else if (strcmp (mips_abi_string, "eabi") == 0)
d14454 1
a14454 1
      if (mips_eabi64)
d14459 4
d14508 1
a14508 1
	  fragp->fr_fix += 1;
d14528 1
a14528 1
    as_warn (_("missing `.end' at end of assembly"));
d14542 2
a14543 2
  if (!isdigit ((unsigned char) *input_line_pointer))
    as_bad (_("Expected simple number."));
d14549 1
a14549 1
	  while (isxdigit ((unsigned char) *input_line_pointer))
d14559 1
a14559 1
	  while (isdigit ((unsigned char) *input_line_pointer))
d14567 1
a14567 1
  if (!isdigit ((unsigned char) *input_line_pointer))
d14571 1
a14571 1
      as_warn (_("Invalid number"));
d14574 1
a14574 1
  while (isdigit ((unsigned char) *input_line_pointer))
d14583 2
a14584 1
   is an initial number which is the ECOFF file index.  */
d14587 1
a14587 1
s_file (x)
d14590 10
a14599 1
  int line;
d14601 23
a14623 2
  line = get_number ();
  s_app_file (0);
d14633 4
a14636 1
  int maybe_text;
d14646 1
a14646 13
#ifdef BFD_ASSEMBLER
  if ((bfd_get_section_flags (stdoutput, now_seg) & SEC_CODE) != 0)
    maybe_text = 1;
  else
    maybe_text = 0;
#else
  if (now_seg != data_section && now_seg != bss_section)
    maybe_text = 1;
  else
    maybe_text = 0;
#endif

  if (!maybe_text)
d14661 4
d14669 9
a14677 9
#ifdef MIPS_STABS_ELF
  {
    segT saved_seg = now_seg;
    subsegT saved_subseg = now_subseg;
    fragS *saved_frag = frag_now;
    valueT dot;
    segT seg;
    expressionS exp;
    char *fragp;
d14679 1
a14679 1
    dot = frag_now_fix ();
d14682 1
a14682 1
    md_flush_pending_output ();
d14685 8
a14692 2
    assert (pdr_seg);
    subseg_set (pdr_seg, 0);
d14694 1
a14694 15
    /* Write the symbol.  */
    exp.X_op = O_symbol;
    exp.X_add_symbol = p;
    exp.X_add_number = 0;
    emit_expr (&exp, 4);

    fragp = frag_more (7 * 4);

    md_number_to_chars (fragp,      (valueT) cur_proc_ptr->reg_mask, 4);
    md_number_to_chars (fragp +  4, (valueT) cur_proc_ptr->reg_offset, 4);
    md_number_to_chars (fragp +  8, (valueT) cur_proc_ptr->fpreg_mask, 4);
    md_number_to_chars (fragp + 12, (valueT) cur_proc_ptr->fpreg_offset, 4);
    md_number_to_chars (fragp + 16, (valueT) cur_proc_ptr->frame_offset, 4);
    md_number_to_chars (fragp + 20, (valueT) cur_proc_ptr->frame_reg, 4);
    md_number_to_chars (fragp + 24, (valueT) cur_proc_ptr->pc_reg, 4);
d14696 11
a14706 3
    subseg_set (saved_seg, saved_subseg);
  }
#endif
a14716 1
  int number = 0;
a14717 1
  int maybe_text;
d14721 1
a14721 1
    input_line_pointer++;
d14723 1
a14723 1
  if (isdigit ((unsigned char) *input_line_pointer)
d14725 1
a14725 1
    number = get_number ();
d14727 1
a14727 13
#ifdef BFD_ASSEMBLER
  if ((bfd_get_section_flags (stdoutput, now_seg) & SEC_CODE) != 0)
    maybe_text = 1;
  else
    maybe_text = 0;
#else
  if (now_seg != data_section && now_seg != bss_section)
    maybe_text = 1;
  else
    maybe_text = 0;
#endif

  if (!maybe_text)
d14731 1
a14731 1
    as_warn (_("missing `.end'"));
d14735 4
d14746 5
a14750 1
      numprocs++;
d14764 1
a14764 1
     int ignore;
d14766 11
a14776 1
#ifdef MIPS_STABS_ELF
d14778 1
a14778 1
  long val;
d14780 9
a14788 6
  if (cur_proc_ptr == (procS *) NULL)
    {
      as_warn (_(".frame outside of .ent"));
      demand_empty_rest_of_line ();
      return;
    }
d14790 2
a14791 1
  cur_proc_ptr->frame_reg = tc_get_register (1);
a14792 6
  SKIP_WHITESPACE ();
  if (*input_line_pointer++ != ','
      || get_absolute_expression_and_terminator (&val) != ',')
    {
      as_warn (_("Bad .frame directive"));
      --input_line_pointer;
a14793 1
      return;
d14795 3
a14797 8

  cur_proc_ptr->frame_offset = val;
  cur_proc_ptr->pc_reg = tc_get_register (0);

  demand_empty_rest_of_line ();
#else
  s_ignore (ignore);
#endif /* MIPS_STABS_ELF */
d14810 11
a14820 2
#ifdef MIPS_STABS_ELF
  long mask, off;
d14822 7
a14828 6
  if (cur_proc_ptr == (procS *) NULL)
    {
      as_warn (_(".mask/.fmask outside of .ent"));
      demand_empty_rest_of_line ();
      return;
    }
d14830 1
a14830 7
  if (get_absolute_expression_and_terminator (&mask) != ',')
    {
      as_warn (_("Bad .mask/.fmask directive"));
      --input_line_pointer;
      demand_empty_rest_of_line ();
      return;
    }
d14832 10
a14841 1
  off = get_absolute_expression ();
d14843 1
a14843 4
  if (reg_type == 'F')
    {
      cur_proc_ptr->fpreg_mask = mask;
      cur_proc_ptr->fpreg_offset = off;
d14846 2
a14847 9
    {
      cur_proc_ptr->reg_mask = mask;
      cur_proc_ptr->reg_offset = off;
    }

  demand_empty_rest_of_line ();
#else
  s_ignore (reg_type);
#endif /* MIPS_STABS_ELF */
d14874 2
a14875 1
/* CPU name/ISA/number mapping table.
d14877 2
a14878 7
   Entries are grouped by type.  The first matching CPU or ISA entry
   gets chosen by CPU or ISA, so it should be the 'canonical' name
   for that type.  Entries after that within the type are sorted
   alphabetically.

   Case is ignored in comparison, so put the canonical entry in the
   appropriate case but everything else in lower case to ease eye pain.  */
d14881 54
a14934 30
  /* MIPS1 ISA */
  { "MIPS1",          1,      ISA_MIPS1,      CPU_R3000, },
  { "mips",           1,      ISA_MIPS1,      CPU_R3000, },

  /* MIPS2 ISA */
  { "MIPS2",          1,      ISA_MIPS2,      CPU_R6000, },

  /* MIPS3 ISA */
  { "MIPS3",          1,      ISA_MIPS3,      CPU_R4000, },

  /* MIPS4 ISA */
  { "MIPS4",          1,      ISA_MIPS4,      CPU_R8000, },

  /* MIPS5 ISA */
  { "MIPS5",          1,      ISA_MIPS5,      CPU_MIPS5, },
  { "Generic-MIPS5",  0,      ISA_MIPS5,      CPU_MIPS5, },

  /* MIPS32 ISA */
  { "MIPS32",         1,      ISA_MIPS32,     CPU_MIPS32, },
  { "Generic-MIPS32", 0,      ISA_MIPS32,     CPU_MIPS32, },

#if 1
  /* XXX for now, MIPS64 -> MIPS3 because of history */
  { "MIPS64",         1,      ISA_MIPS3,      CPU_R4000 }, /* XXX! */
#else
  /* MIPS64 ISA */
  { "MIPS64",         1,      ISA_MIPS64,     CPU_MIPS64 },
#endif
  { "mips64isa",      1,      ISA_MIPS64,     CPU_MIPS64 },
  { "Generic-MIPS64", 0,      ISA_MIPS64,     CPU_MIPS64, },
d14936 2
a14937 111
  /* R2000 CPU */
  { "R2000",          0,      ISA_MIPS1,      CPU_R2000, },
  { "2000",           0,      ISA_MIPS1,      CPU_R2000, },
  { "2k",             0,      ISA_MIPS1,      CPU_R2000, },
  { "r2k",            0,      ISA_MIPS1,      CPU_R2000, },

  /* R3000 CPU */
  { "R3000",          0,      ISA_MIPS1,      CPU_R3000, },
  { "3000",           0,      ISA_MIPS1,      CPU_R3000, },
  { "3k",             0,      ISA_MIPS1,      CPU_R3000, },
  { "r3k",            0,      ISA_MIPS1,      CPU_R3000, },

  /* TX3900 CPU */
  { "R3900",          0,      ISA_MIPS1,      CPU_R3900, },
  { "3900",           0,      ISA_MIPS1,      CPU_R3900, },
  { "mipstx39",       0,      ISA_MIPS1,      CPU_R3900, },

  /* R4000 CPU */
  { "R4000",          0,      ISA_MIPS3,      CPU_R4000, },
  { "4000",           0,      ISA_MIPS3,      CPU_R4000, },
  { "4k",             0,      ISA_MIPS3,      CPU_R4000, },   /* beware */
  { "r4k",            0,      ISA_MIPS3,      CPU_R4000, },

  /* R4010 CPU */
  { "R4010",          0,      ISA_MIPS2,      CPU_R4010, },
  { "4010",           0,      ISA_MIPS2,      CPU_R4010, },

  /* R4400 CPU */
  { "R4400",          0,      ISA_MIPS3,      CPU_R4400, },
  { "4400",           0,      ISA_MIPS3,      CPU_R4400, },

  /* R4600 CPU */
  { "R4600",          0,      ISA_MIPS3,      CPU_R4600, },
  { "4600",           0,      ISA_MIPS3,      CPU_R4600, },
  { "mips64orion",    0,      ISA_MIPS3,      CPU_R4600, },
  { "orion",          0,      ISA_MIPS3,      CPU_R4600, },

  /* R4650 CPU */
  { "R4650",          0,      ISA_MIPS3,      CPU_R4650, },
  { "4650",           0,      ISA_MIPS3,      CPU_R4650, },

  /* R6000 CPU */
  { "R6000",          0,      ISA_MIPS2,      CPU_R6000, },
  { "6000",           0,      ISA_MIPS2,      CPU_R6000, },
  { "6k",             0,      ISA_MIPS2,      CPU_R6000, },
  { "r6k",            0,      ISA_MIPS2,      CPU_R6000, },

  /* R8000 CPU */
  { "R8000",          0,      ISA_MIPS4,      CPU_R8000, },
  { "8000",           0,      ISA_MIPS4,      CPU_R8000, },
  { "8k",             0,      ISA_MIPS4,      CPU_R8000, },
  { "r8k",            0,      ISA_MIPS4,      CPU_R8000, },

  /* R10000 CPU */
  { "R10000",         0,      ISA_MIPS4,      CPU_R10000, },
  { "10000",          0,      ISA_MIPS4,      CPU_R10000, },
  { "10k",            0,      ISA_MIPS4,      CPU_R10000, },
  { "r10k",           0,      ISA_MIPS4,      CPU_R10000, },

  /* R12000 CPU */
  { "R12000",         0,      ISA_MIPS4,      CPU_R12000, },
  { "12000",          0,      ISA_MIPS4,      CPU_R12000, },
  { "12k",            0,      ISA_MIPS4,      CPU_R12000, },
  { "r12k",           0,      ISA_MIPS4,      CPU_R12000, },

  /* VR4100 CPU */
  { "VR4100",         0,      ISA_MIPS3,      CPU_VR4100, },
  { "4100",           0,      ISA_MIPS3,      CPU_VR4100, },
  { "mips64vr4100",   0,      ISA_MIPS3,      CPU_VR4100, },
  { "r4100",          0,      ISA_MIPS3,      CPU_VR4100, },

  /* VR4111 CPU */
  { "VR4111",         0,      ISA_MIPS3,      CPU_R4111, },
  { "4111",           0,      ISA_MIPS3,      CPU_R4111, },
  { "mips64vr4111",   0,      ISA_MIPS3,      CPU_R4111, },
  { "r4111",          0,      ISA_MIPS3,      CPU_R4111, },

  /* VR4300 CPU */
  { "VR4300",         0,      ISA_MIPS3,      CPU_R4300, },
  { "4300",           0,      ISA_MIPS3,      CPU_R4300, },
  { "mips64vr4300",   0,      ISA_MIPS3,      CPU_R4300, },
  { "r4300",          0,      ISA_MIPS3,      CPU_R4300, },

  /* VR5000 CPU */
  { "VR5000",         0,      ISA_MIPS4,      CPU_R5000, },
  { "5000",           0,      ISA_MIPS4,      CPU_R5000, },
  { "5k",             0,      ISA_MIPS4,      CPU_R5000, },
  { "mips64vr5000",   0,      ISA_MIPS4,      CPU_R5000, },
  { "r5000",          0,      ISA_MIPS4,      CPU_R5000, },
  { "r5200",          0,      ISA_MIPS4,      CPU_R5000, },
  { "r5230",          0,      ISA_MIPS4,      CPU_R5000, },
  { "r5231",          0,      ISA_MIPS4,      CPU_R5000, },
  { "r5261",          0,      ISA_MIPS4,      CPU_R5000, },
  { "r5721",          0,      ISA_MIPS4,      CPU_R5000, },
  { "r5k",            0,      ISA_MIPS4,      CPU_R5000, },
  { "r7000",          0,      ISA_MIPS4,      CPU_R5000, },

  /* MIPS32 4K CPU */
  { "MIPS32-4K",      0,      ISA_MIPS32,     CPU_MIPS32_4K, },
  { "4kc",            0,      ISA_MIPS32,     CPU_MIPS32_4K, },
  { "4km",            0,      ISA_MIPS32,     CPU_MIPS32_4K, },
  { "4kp",            0,      ISA_MIPS32,     CPU_MIPS32_4K, },
  { "mips32-4kc",     0,      ISA_MIPS32,     CPU_MIPS32_4K, },
  { "mips32-4km",     0,      ISA_MIPS32,     CPU_MIPS32_4K, },
  { "mips32-4kp",     0,      ISA_MIPS32,     CPU_MIPS32_4K, },

  /* SiByte SB-1 CPU */
  { "SB-1",           0,      ISA_MIPS64,     CPU_SB1, },
  { "sb-1250",        0,      ISA_MIPS64,     CPU_SB1, },
  { "sb1",            0,      ISA_MIPS64,     CPU_SB1, },
  { "sb1250",         0,      ISA_MIPS64,     CPU_SB1, },
d14939 2
a14940 2
  /* End marker.  */
  { NULL, 0, 0, 0, },
d14943 59
d15003 2
a15004 2
mips_cpu_info_from_name (name)
     const char *name;
d15006 31
a15036 1
  int i;
d15038 3
a15040 3
  for (i = 0; mips_cpu_info_table[i].name != NULL; i++)
    if (strcasecmp (name, mips_cpu_info_table[i].name) == 0)
      return (&mips_cpu_info_table[i]);
d15042 2
a15043 1
  return NULL;
d15046 3
d15057 1
a15057 1
      && isa == mips_cpu_info_table[i].isa)
d15062 30
d15093 3
a15095 3
static const struct mips_cpu_info *
mips_cpu_info_from_cpu (cpu)
     int cpu;
d15097 23
a15119 1
  int i;
d15122 52
a15173 3
    if (!mips_cpu_info_table[i].is_isa
      && cpu == mips_cpu_info_table[i].cpu)
      return (&mips_cpu_info_table[i]);
d15175 13
a15187 1
  return NULL;
@


1.7
log
@Pull updated file from binutils CVS : fixes tons of warnings, espie@@ ok
@
text
@d2 2
a3 1
   Copyright (C) 1993, 94, 95, 96, 97, 98, 1999, 2000 Free Software Foundation, Inc.
d113 1
d126 6
d135 1
d192 2
a193 2
   that we must set the isa and mips16 fields to -1 to indicate that
   they have not been initialized.  */
d195 4
a198 1
static struct mips_set_options mips_opts = { -1, -1, 0, 0, 0, 0, 0, 0 };
d207 1
a207 1
static int file_mips_isa;
d209 2
a210 2
/* The CPU type as a number: 2000, 3000, 4000, 4400, etc.  */
static int mips_cpu = -1;
d212 2
a213 2
/* The argument of the -mabi= flag. */
static char* mips_abi_string = 0;
d215 1
a215 1
/* Wether we should mark the file EABI64 or EABI32. */
d219 1
a219 1
   mips3 or greater, then mark the object file 32BITMODE. */
d222 1
a222 1
/* True if -mgp32 was passed. */
d227 1
a227 1
   Return true if instructions marked INSN_LOAD_COPROC_DELAY, 
d232 1
a232 1
   have delays for the INSN_LOAD_MEMORY_DELAY instructions either. */
d234 3
a236 3
   (ISA) == 1                               \
   || (ISA) == 2                            \
   || (ISA) == 3                            \
d239 1
a239 1
/*  Return true if ISA supports 64 bit gp register instructions. */
d241 4
a244 2
   (ISA) == 3                        \
   || (ISA) == 4                     \
d247 1
a247 1
/* Whether the processor uses hardware interlocks to protect 
d274 1
a274 1
#define hilo_interlocks (mips_cpu == 4010                           \
d280 2
a281 2
  (mips_opts.isa != 1  \
   || mips_cpu == 3900)
d285 2
a286 2
/* Itbl support may require additional care here. */
#define cop_interlocks (mips_cpu == 4300                            \
d324 8
d341 1
a341 1
static int g_switch_value = 8;
d377 1
a377 1
   #NO_APP at the beginning of its output. */
d381 2
a382 2
/* This array holds machine specific line separator characters. */
const char line_separator_chars[] = "";
d473 1
a473 1
   prev_nop_frag. */
d488 1
a488 1
   corresponding LO relocation. */
d518 1
a518 1
static const int mips16_to_32_reg_map[] =
d594 2
a595 2
#define RELAX_RELOC1(i) ((bfd_vma)(((i) >> 9) & 0x7f) - 64)
#define RELAX_RELOC2(i) ((bfd_vma)(((i) >> 2) & 0x7f) - 64)
d652 1
a652 1
static int reg_needs_delay PARAMS ((int));
d716 6
d723 7
d731 3
a733 1
static int validate_mips_insn PARAMS ((const struct mips_opcode *));
d755 1
a755 1
 /* MIPS specific pseudo-ops.  */
d768 1
a768 1
 /* Relatively generic pseudo-ops that happen to be used on MIPS
d777 1
a777 1
 /* These pseudo-ops are defined in read.c, but must be overridden
d796 5
d804 4
a807 3
static const pseudo_typeS mips_nonecoff_pseudo_table[] = {
 /* These pseudo-ops should be defined by the object file format.
    However, a.out doesn't support them, so we have versions here.  */
d883 33
a915 4
/*
 * This function is called once, at assembler startup time.  It should
 * set up all the tables, etc. that the MD part of the assembler will need.
 */
a918 1
  boolean ok = false;
d920 1
a920 1
  register unsigned int i = 0;
d925 2
d946 1
a946 1
  if (mips_cpu < 0)
d948 3
a950 3
      /* Set mips_cpu based on TARGET_CPU, unless TARGET_CPU is
         just the generic 'mips', in which case set mips_cpu based
         on the given ISA, if any. */
d952 2
a953 4
      if (strcmp (cpu, "mips") == 0)
        {
	  if (mips_opts.isa < 0)
	    mips_cpu = 3000;   
d955 21
a975 68
	  else if (mips_opts.isa == 2)
            mips_cpu = 6000;

          else if (mips_opts.isa == 3)
            mips_cpu = 4000;

          else if (mips_opts.isa == 4)
            mips_cpu = 8000;

          else 
            mips_cpu = 3000;
        }
      
      else if (strcmp (cpu, "r3900") == 0
               || strcmp (cpu, "mipstx39") == 0
               )
        mips_cpu = 3900;

      else if (strcmp (cpu, "r6000") == 0
	       || strcmp (cpu, "mips2") == 0)
        mips_cpu = 6000;

      else if (strcmp (cpu, "mips64") == 0
	       || strcmp (cpu, "r4000") == 0
	       || strcmp (cpu, "mips3") == 0)
        mips_cpu = 4000;

      else if (strcmp (cpu, "r4400") == 0)
        mips_cpu = 4400;

      else if (strcmp (cpu, "mips64orion") == 0
	       || strcmp (cpu, "r4600") == 0)
        mips_cpu = 4600;

      else if (strcmp (cpu, "r4650") == 0)
        mips_cpu = 4650;

      else if (strcmp (cpu, "mips64vr4300") == 0)
        mips_cpu = 4300;

      else if (strcmp (cpu, "mips64vr4111") == 0)
        mips_cpu = 4111;

      else if (strcmp (cpu, "mips64vr4100") == 0)
        mips_cpu = 4100;

      else if (strcmp (cpu, "r4010") == 0)
        mips_cpu = 4010;


      else if (strcmp (cpu, "r5000") == 0
	       || strcmp (cpu, "mips64vr5000") == 0)
        mips_cpu = 5000;



      else if (strcmp (cpu, "r8000") == 0
	       || strcmp (cpu, "mips4") == 0)
        mips_cpu = 8000;
      
      else if (strcmp (cpu, "r10000") == 0)
        mips_cpu = 10000;

      else if (strcmp (cpu, "mips16") == 0)
        mips_cpu = 0; /* FIXME */

      else
        mips_cpu = 3000;
a976 23

  if (mips_cpu == 3000
      || mips_cpu == 3900)
    mips_isa_from_cpu = 1;

  else if (mips_cpu == 6000
	   || mips_cpu == 4010)
    mips_isa_from_cpu = 2;

  else if (mips_cpu == 4000
	   || mips_cpu == 4100
	   || mips_cpu == 4111
	   || mips_cpu == 4400
	   || mips_cpu == 4300
	   || mips_cpu == 4600
	   || mips_cpu == 4650)
    mips_isa_from_cpu = 3;

  else if (mips_cpu == 5000
	   || mips_cpu == 8000
               || mips_cpu == 10000)
    mips_isa_from_cpu = 4;

a977 3
    mips_isa_from_cpu = -1;

  if (mips_opts.isa == -1)
d979 7
a985 4
      if (mips_isa_from_cpu != -1)
	mips_opts.isa = mips_isa_from_cpu;
      else
	mips_opts.isa = 1;
d988 3
a990 7
  if (mips_opts.mips16 < 0)
    {
      if (strncmp (TARGET_CPU, "mips16", sizeof "mips16" - 1) == 0)
	mips_opts.mips16 = 1;
      else
	mips_opts.mips16 = 0;
    }
d993 1
a993 1
     if necessary. */
d997 2
a998 2
    free (a);
    a = NULL;
d1001 1
a1001 1
  if (mips_opts.isa == 1 && mips_trap)
d1006 1
a1006 1
     the best, but then neither is basing the abi on the isa. */     
d1009 1
a1009 1
      && 0 == strcmp (mips_abi_string,"eabi"))
d1012 6
a1017 29
  if (mips_cpu != 0 && mips_cpu != -1)
    {
      ok = bfd_set_arch_mach (stdoutput, bfd_arch_mips, mips_cpu);
      
      /* If they asked for mips1 or mips2 and a cpu that is
	 mips3 or greater, then mark the object file 32BITMODE. */
      if (mips_isa_from_cpu != -1
	  && ! ISA_HAS_64BIT_REGS (mips_opts.isa) 
	  && ISA_HAS_64BIT_REGS (mips_isa_from_cpu))
	mips_32bitmode = 1;
    }
  else
    {
      switch (mips_opts.isa)
	{
	case 1:
	  ok = bfd_set_arch_mach (stdoutput, bfd_arch_mips, 3000);
	  break;
	case 2:
	  ok = bfd_set_arch_mach (stdoutput, bfd_arch_mips, 6000);
	  break;
	case 3:
	  ok = bfd_set_arch_mach (stdoutput, bfd_arch_mips, 4000);
	  break;
	case 4:
	  ok = bfd_set_arch_mach (stdoutput, bfd_arch_mips, 8000);
	  break;
	}
    }
d1019 1
a1019 1
  if (! ok)
a1152 1

d1155 1
a1155 1
	
d1235 2
a1236 2
      DBG((_("returned from mips_ip(%s) insn_opcode = 0x%x\n"), 
		str, insn.insn_opcode));
d1349 1
a1349 1
     int reg;
d1364 1
a1364 1
      /* Itbl support may require additional care here. */
d1387 1
d1395 3
a1397 2
	  if ((S_GET_VALUE (l->label) & 1) == 0)
	    S_SET_VALUE (l->label, S_GET_VALUE (l->label) + 1);
d1470 1
a1470 1
          /* Itbl support may require additional care here. */
d1482 2
a1483 2
                    && ! cop_interlocks)
		   || (mips_opts.isa == 1
d1501 1
a1501 1
             Need to modify this to include knowledge about 
d1529 1
a1529 1
              /* Itbl support may require additional care here. */
d1548 1
a1548 1
          /* Itbl support may require additional care here. */
d1562 2
a1563 3
                                       & OP_MASK_RD),
                                    MIPS_GR_REG))

d1578 1
a1578 1
     
d1582 1
a1582 1
 
d1587 2
a1588 2
	     insert two NOPS.  Some newer processors have interlocks. 
	     Also the tx39's multiply instructions can be exectuted 
d1590 2
a1591 2
             though the tx39's divide insns still do require the 
	     delay. */
d1593 1
a1593 1
		 || (mips_cpu == 3900 && (pinfo & INSN_MULT)))
d1602 1
a1602 1
	     between a read and an immediately following branch. */
d1613 1
a1613 1
	     Also the note tx39's multiply above. */
d1615 1
a1615 1
		 || (mips_cpu == 3900 && (pinfo & INSN_MULT)))
d1624 1
a1624 1
	     between a read and an immediately following branch. */
d1633 1
a1633 1
      /* Itbl support may require additional care here. */
d1654 1
a1654 1
		    || (mips_cpu == 3900 && (pinfo & INSN_MULT))))
d1658 1
a1658 1
		    || (mips_cpu == 3900 && (pinfo & INSN_MULT)))))
d1675 1
a1675 1
	  && ip->insn_opcode == (mips_opts.mips16 ? 0x6500 : 0))
d1708 2
d1712 1
a1712 1
	      S_SET_VALUE (l->label, (valueT) frag_now_fix ());
d1715 2
a1716 1
		S_SET_VALUE (l->label, S_GET_VALUE (l->label) + 1);
d1729 1
a1729 1
             need some nops, we count them in prev_nops_required. */
a1829 1

d1902 4
a1905 4
	  /* We don't keep enough information to sort these cases out. 
	     The itbl support does keep this information however, although 
	     we currently don't support itbl fprmats as part of the cop 
	     instruction.  May want to add this support in the future. */
d1908 1
a1908 1
      mips_gprmask &=~ 1 << 0;
d1955 1
a1955 1
		 swap. */
d2006 1
a2006 1
              /* Itbl support may require additional care here. */
d2011 1
a2011 1
		     || (mips_cpu == 3900 && (pinfo & INSN_MULT)))
d2019 2
a2020 2
		  && mips_opts.isa == 1
                  /* Itbl support may require additional care here. */
d2125 1
a2125 1
              /* Itbl support may require additional care here. */
d2151 2
a2152 2
	      /* If the previous instruction is a sync, sync.l, or 
		 sync.p, we can not swap. */
d2300 1
a2300 1
   know whether nops are needed before a noreorder section. */
d2328 1
a2328 1
   instructions are to follow. */
d2352 1
a2352 1
	      && (prev_insn.insn_mo->pinfo 
d2355 1
a2355 1
	      && mips_opts.isa == 1
d2359 1
a2359 1
          /* Itbl support may require additional care here. */
d2381 1
a2381 1
          /* Itbl support may require additional care here. */
d2407 1
a2407 1
                 decrease the size of prev_nop_frag. */
d2414 2
d2418 1
a2418 1
	      S_SET_VALUE (l->label, (valueT) frag_now_fix ());
d2421 2
a2422 1
		S_SET_VALUE (l->label, S_GET_VALUE (l->label) + 1);
d2496 1
a2496 1
	  && OPCODE_IS_MEMBER (insn.insn_mo, mips_opts.isa, mips_cpu, 
d2498 1
a2498 1
	  && (mips_cpu != 4650 || (insn.insn_mo->pinfo & FP_D) == 0))
d2536 9
d2565 4
d3065 4
a3068 4
        {
          if ((lo32.X_add_number & 0xffff8000) == 0xffff8000)
            {
              macro_build ((char *) NULL, counter, &lo32, "addiu", "t,r,j",
d3070 6
a3075 6
              return;
            }
          if (lo32.X_add_number & 0x80000000)
            {
              macro_build ((char *) NULL, counter, &lo32, "lui", "t,u", reg,
                           (int) BFD_RELOC_HI16);
d3079 3
a3081 3
              return;
            }
        }
d3088 2
a3089 2
       {
	 unsigned long himask, lomask;
d3091 33
a3123 31
	 if (shift < 32)
	   {
	     himask = 0xffff >> (32 - shift);
	     lomask = (0xffff << shift) & 0xffffffff;
	   }
	 else
	   {
	     himask = 0xffff << (shift - 32);
	     lomask = 0;
	   }
	 if ((hi32.X_add_number & ~ (offsetT) himask) == 0
	     && (lo32.X_add_number & ~ (offsetT) lomask) == 0)
	   {
	     expressionS tmp;

	     tmp.X_op = O_constant;
	     if (shift < 32)
	       tmp.X_add_number = ((hi32.X_add_number << (32 - shift))
				   | (lo32.X_add_number >> shift));
	     else
	       tmp.X_add_number = hi32.X_add_number >> (shift - 32);
	     macro_build ((char *) NULL, counter, &tmp, "ori", "t,r,i", reg, 0,
			  (int) BFD_RELOC_LO16);
	     macro_build ((char *) NULL, counter, NULL,
			  (shift >= 32) ? "dsll32" : "dsll",
			  "d,w,<", reg, reg,
			  (shift >= 32) ? shift - 32 : shift);
	     return;
	   }
         shift++;
       } while (shift <= (64 - 16));
d3155 2
a3156 2
        {
          shift = COUNT_TOP_ZEROES ((unsigned int) hi32.X_add_number);
d3158 1
a3158 1
            {
d3163 3
a3165 3
              tmp.X_op = O_constant;
              tmp.X_add_number = (offsetT) -1;
              macro_build ((char *) NULL, counter, &tmp, "addiu", "t,r,j",
d3167 9
a3175 9
              if (bit != 0)
                {
                  bit += shift;
                  macro_build ((char *) NULL, counter, NULL,
                               (bit >= 32) ? "dsll32" : "dsll",
                               "d,w,<", reg, reg,
                               (bit >= 32) ? bit - 32 : bit);
                }
              macro_build ((char *) NULL, counter, NULL,
d3177 1
a3177 1
                           "d,w,<", reg, reg,
d3179 3
a3181 3
              return;
            }
        }
d3186 1
a3186 1
	hi32.X_add_number |= ~ (offsetT) 0xffffffff;
d3204 1
a3204 1
        {
d3207 4
a3210 4
          macro_build ((char *) NULL, counter, NULL, "dsrl32", "d,w,<", reg,
                       reg, 0);
          return;
        }
d3263 1
a3263 1
          || nopic_need_relax (ep->X_add_symbol, 1))
d3440 1
a3440 1
  int used_at;
d3953 1
a3953 1
	      macro_build ((char *) NULL, &icnt, NULL, "break", "c", 7);
d3974 1
a3974 1
	    macro_build ((char *) NULL, &icnt, NULL, "break", "c", 7);
d4013 1
a4013 1
	    macro_build ((char *) NULL, &icnt, NULL, "break", "c", 6);
d4060 1
a4060 1
	      macro_build ((char *) NULL, &icnt, NULL, "break", "c", 7);
d4131 1
a4131 1
	    macro_build ((char *) NULL, &icnt, NULL, "break", "c", 7);
d4230 2
d4235 2
d4263 2
d4267 1
a4267 1
		       "t,o(b)", tempreg, (int) BFD_RELOC_MIPS_GOT16, GP);
d4373 2
d4381 4
d4423 5
d4429 1
a4429 1
		       tempreg, (int) BFD_RELOC_MIPS_GOT_HI16);
d4437 1
a4437 2
		       "t,o(b)", tempreg, (int) BFD_RELOC_MIPS_GOT_LO16,
		       tempreg);
d4657 1
a4657 1
      
d4763 1
a4763 1
	    }			   
d4817 1
a4817 1
      /* Itbl support may require additional care here. */
d4822 1
a4822 1
      /* Itbl support may require additional care here. */
d4827 1
a4827 1
      /* Itbl support may require additional care here. */
d4832 1
a4832 1
      /* Itbl support may require additional care here. */
d4844 1
a4844 1
      if (mips_cpu == 4650)
d4850 1
a4850 1
      /* Itbl support may require additional care here. */
d4855 1
a4855 1
      /* Itbl support may require additional care here. */
d4860 1
a4860 1
      /* Itbl support may require additional care here. */
d4902 1
a4902 1
      /* Itbl support may require additional care here. */
d4907 1
a4907 1
      /* Itbl support may require additional care here. */
d4912 1
a4912 1
      /* Itbl support may require additional care here. */
d4917 1
a4917 1
      /* Itbl support may require additional care here. */
d4933 1
a4933 1
      if (mips_cpu == 4650)
d4940 1
a4940 1
      /* Itbl support may require additional care here. */
d4944 1
a4944 1
      /* Itbl support may require additional care here. */
d4949 1
a4949 1
      /* Itbl support may require additional care here. */
d4961 1
a4961 1
      /* Itbl support may require additional care here. */
d5093 1
a5093 1
	  p = frag_var (rs_machine_dependent, 4, 0, 
d5318 1
a5318 1
	
d5378 1
a5378 1
	  if (mips_opts.isa != 1)
d5402 2
a5403 2
	      
	  if (mips_opts.isa != 1)
d5421 1
a5421 1
      if (mips_cpu == 4650)
d5430 1
a5430 1
      assert (mips_opts.isa == 1);
d5462 1
a5462 1
      if (mips_cpu == 4650)
d5467 1
a5467 1
      /* Itbl support may require additional care here. */
d5469 1
a5469 1
      if (mips_opts.isa != 1)
d5480 1
a5480 1
      if (mips_cpu == 4650)
d5486 1
a5486 1
      if (mips_opts.isa != 1)
d5494 1
a5494 1
      /* Itbl support may require additional care here. */
d5530 1
a5530 1
      /* Itbl support may require additional care here. */
d5581 1
a5581 1
              /* Itbl support may require additional care here. */
d5591 1
a5591 1
              /* Itbl support may require additional care here. */
d5637 1
a5637 1
          /* Itbl support may require additional care here. */
d5645 1
a5645 1
          /* Itbl support may require additional care here. */
d5649 1
a5649 1
	}	  
d5690 1
a5690 1
          /* Itbl support may require additional care here. */
d5700 1
a5700 1
          /* Itbl support may require additional care here. */
d5764 1
a5764 1
          /* Itbl support may require additional care here. */
d5774 1
a5774 1
          /* Itbl support may require additional care here. */
d5808 1
a5808 1
          /* Itbl support may require additional care here. */
d5819 1
a5819 1
          /* Itbl support may require additional care here. */
d5851 1
a5851 1
          /* Itbl support may require additional care here. */
d5856 1
a5856 1
          /* Itbl support may require additional care here. */
d5875 1
a5875 1
      assert (bfd_arch_bits_per_address (stdoutput) == 32 
d5896 1
a5896 1
      What registers are read/set/modified? 
d5899 1
a5899 1
      this knowledge can be encoded in the itbl spec. */
d5925 1
a5925 1
         We may want to have the assembler assemble this value, 
d5929 1
a5929 1
      if (itbl_have_entries 
d5931 1
a5931 1
        {
d5937 1
a5937 1
        }
d5944 1
a5944 1
          
d5967 1
a5967 1
          
d5972 1
a5972 1
          
d5977 1
a5977 1
          
d6034 1
a6034 1
	    macro_build ((char *) NULL, &icnt, NULL, "break", "c", 6);
d6067 1
a6067 1
	    macro_build ((char *) NULL, &icnt, NULL, "break", "c", 6);
d6109 1
a6109 1
      if (mips_cpu == 4650)
d6114 1
a6114 1
      assert (mips_opts.isa == 1);
d6421 1
d6423 1
a6423 2
    case M_TRUNCWS:
      assert (mips_opts.isa == 1);
d6661 1
a6661 1
	 are added dynamically. */
d6720 2
a6721 2
	macro_build ((char *) NULL, &icnt, NULL, "break", "6", 7);
      
d6946 1
a6946 1
      case 'B':	USE_BITS (OP_MASK_SYSCALL,	OP_SH_SYSCALL);	break;
d6952 1
d6954 1
d6985 2
d7014 1
a7014 1
  char c;
d7039 1
a7039 1
	
d7047 1
a7047 1
      /* Restore the character we overwrite above (if any).  */ 
d7082 1
a7082 1
      else 
d7084 1
a7084 1
      
d7087 1
a7087 1
	  if (mips_cpu == 4650 && (insn->pinfo & FP_D) != 0)
d7102 5
a7106 4
	      sprintf (buf, 
		       _("opcode not supported on this processor: %d (MIPS%d)"),
		       mips_cpu, mips_opts.isa);
		       
d7150 1
a7150 1
		 we must have a left paren. */
a7193 1

d7241 1
a7241 1
	    case 'B':		/* syscall code */
d7245 1
a7245 1
		as_warn (_("Illegal syscall code (%ld)"),
d7253 1
a7253 1
              my_getExpression (&imm_expr, s);
d7255 1
a7255 1
              if ((unsigned long) imm_expr.X_add_number >= (1<<25))
d7257 1
a7257 1
                  as_warn (_("Coproccesor code > 25 bits (%ld)"),
d7259 1
a7259 1
                  imm_expr.X_add_number &= ((1<<25) - 1);
d7261 15
a7275 4
              ip->insn_opcode |= imm_expr.X_add_number;
              imm_expr.X_op = O_absent;
              s = expr_end;
              continue;
d7278 1
a7278 1
              my_getExpression (&imm_expr, s);
d7280 1
a7280 1
              if (imm_expr.X_add_number != 0 && imm_expr.X_add_number != 1)
d7282 1
a7282 1
                  as_warn (_("Invalidate performance regster (%ld)"),
d7284 1
a7284 1
                  imm_expr.X_add_number &= 1;
d7286 4
a7289 4
              ip->insn_opcode |= (imm_expr.X_add_number << 1);
              imm_expr.X_op = O_absent;
              s = expr_end;
              continue;
d7302 1
d7370 1
a7370 1
			      if (p) 
d7372 1
a7372 1
			      else 
d7378 1
a7378 1
			  }
d7403 2
a7404 2
	/* Now that we have assembled one operand, we use the args string 
	 * to figure out where it goes in the instruction. */
d7417 4
a7528 1

d7610 1
a7610 1
		assert (length == (f64 ? 8 : 4));
d7627 1
d7773 2
a7774 2
                           || imm_expr.X_add_number >= 0x10000)
                          && imm_expr.X_op == O_constant))
d7779 2
a7780 4
		      if (imm_expr.X_op != O_constant
			  && imm_expr.X_op != O_big)
			insn_error = _("absolute expression required");
		      else
d7806 2
a7807 2
                           || imm_expr.X_add_number >= max)
                          && imm_expr.X_op == O_constant)
d7816 2
a7817 4
		      if (imm_expr.X_op != O_constant
			  && imm_expr.X_op != O_big)
			insn_error = _("absolute expression required");
		      else
d7844 2
a7845 2
		      || (S_GET_SEGMENT (offset_expr.X_op_symbol)
			  != now_seg)))
d7918 23
a7940 1
              continue;
d8619 2
a8620 1
    as_warn_where (file, line, _("extended operand requested but not required"));
d8770 1
d8788 2
a8789 2
      && S_GET_VALUE (ep->X_add_symbol) == frag_now_fix ())
    S_SET_VALUE (ep->X_add_symbol, S_GET_VALUE (ep->X_add_symbol) + 1);
d8793 2
a8794 2
   of type type, and store the appropriate bytes in *litP.  The number
   of LITTLENUMS emitted is stored in *sizeP .  An error message is
d8845 1
a8845 1
     
d8863 2
a8864 1
struct option md_longopts[] = {
d8878 1
a8878 1
#define OPTION_TRAP (OPTION_MD_BASE + 9)
d8881 1
a8881 1
#define OPTION_BREAK (OPTION_MD_BASE + 10)
d8884 1
a8884 1
#define OPTION_EB (OPTION_MD_BASE + 11)
d8886 1
a8886 1
#define OPTION_EL (OPTION_MD_BASE + 12)
d8888 1
a8888 1
#define OPTION_M4650 (OPTION_MD_BASE + 13)
d8890 1
a8890 1
#define OPTION_NO_M4650 (OPTION_MD_BASE + 14)
d8892 1
a8892 1
#define OPTION_M4010 (OPTION_MD_BASE + 15)
d8894 1
a8894 1
#define OPTION_NO_M4010 (OPTION_MD_BASE + 16)
d8896 1
a8896 1
#define OPTION_M4100 (OPTION_MD_BASE + 17)
d8898 1
a8898 1
#define OPTION_NO_M4100 (OPTION_MD_BASE + 18)
d8900 1
a8900 1
#define OPTION_MIPS16 (OPTION_MD_BASE + 22)
d8902 1
a8902 1
#define OPTION_NO_MIPS16 (OPTION_MD_BASE + 23)
d8904 1
a8904 1
#define OPTION_M3900 (OPTION_MD_BASE + 26)
d8906 1
a8906 1
#define OPTION_NO_M3900 (OPTION_MD_BASE + 27)
d8908 1
a8908 3


#define OPTION_MABI (OPTION_MD_BASE + 38)
d8910 1
a8910 2

#define OPTION_M7000_HILO_FIX (OPTION_MD_BASE + 39)
d8912 1
a8912 1
#define OPTION_NO_M7000_HILO_FIX (OPTION_MD_BASE + 40)
d8914 14
a8927 6

#define OPTION_CALL_SHARED (OPTION_MD_BASE + 7)
#define OPTION_NON_SHARED (OPTION_MD_BASE + 8)
#define OPTION_XGOT (OPTION_MD_BASE + 19)
#define OPTION_32 (OPTION_MD_BASE + 20)
#define OPTION_64 (OPTION_MD_BASE + 21)
d8929 7
a8935 2
  {"KPIC", no_argument, NULL, OPTION_CALL_SHARED},
  {"xgot", no_argument, NULL, OPTION_XGOT},
d8937 4
a8940 3
  {"non_shared", no_argument, NULL, OPTION_NON_SHARED},
  {"32", no_argument, NULL, OPTION_32},
  {"64", no_argument, NULL, OPTION_64},
a8942 5
#define OPTION_GP32 (OPTION_MD_BASE + 41)
#define OPTION_GP64 (OPTION_MD_BASE + 42)
  {"mgp32", no_argument, NULL, OPTION_GP32},
  {"mgp64", no_argument, NULL, OPTION_GP64},

d8945 1
a8945 1
size_t md_longopts_size = sizeof(md_longopts);
d8954 8
d8998 1
a8998 1
      mips_opts.isa = 1;
d9002 1
a9002 1
      mips_opts.isa = 2;
d9006 1
a9006 1
      mips_opts.isa = 3;
d9010 13
a9022 1
      mips_opts.isa = 4;
d9027 3
a9029 7
	char *p;

	/* Identify the processor type */
	p = arg;
	if (strcmp (p, "default") == 0
	    || strcmp (p, "DEFAULT") == 0)
	  mips_cpu = -1;
d9032 1
a9032 1
	    int sv = 0;
d9034 5
a9038 100
	    /* We need to cope with the various "vr" prefixes for the 4300
	       processor.  */
	    if (*p == 'v' || *p == 'V')
	      {
		sv = 1;
		p++;
	      }

	    if (*p == 'r' || *p == 'R')
	      p++;

	    mips_cpu = -1;
	    switch (*p)
	      {
	      case '1':
		if (strcmp (p, "10000") == 0
		    || strcmp (p, "10k") == 0
		    || strcmp (p, "10K") == 0)
		  mips_cpu = 10000;
		break;

	      case '2':
		if (strcmp (p, "2000") == 0
		    || strcmp (p, "2k") == 0
		    || strcmp (p, "2K") == 0)
		  mips_cpu = 2000;
		break;

	      case '3':
		if (strcmp (p, "3000") == 0
		    || strcmp (p, "3k") == 0
		    || strcmp (p, "3K") == 0)
		  mips_cpu = 3000;
                else if (strcmp (p, "3900") == 0)
                  mips_cpu = 3900;
		break;

	      case '4':
		if (strcmp (p, "4000") == 0
		    || strcmp (p, "4k") == 0
		    || strcmp (p, "4K") == 0)
		  mips_cpu = 4000;
		else if (strcmp (p, "4100") == 0)
                    mips_cpu = 4100;
		else if (strcmp (p, "4111") == 0)
                    mips_cpu = 4111;
		else if (strcmp (p, "4300") == 0)
		  mips_cpu = 4300;
		else if (strcmp (p, "4400") == 0)
		  mips_cpu = 4400;
		else if (strcmp (p, "4600") == 0)
		  mips_cpu = 4600;
		else if (strcmp (p, "4650") == 0)
		    mips_cpu = 4650;
		else if (strcmp (p, "4010") == 0)
                  mips_cpu = 4010;
		break;

	      case '5':
		if (strcmp (p, "5000") == 0
		    || strcmp (p, "5k") == 0
		    || strcmp (p, "5K") == 0)
		  mips_cpu = 5000;
		break;

	      case '6':
		if (strcmp (p, "6000") == 0
		    || strcmp (p, "6k") == 0
		    || strcmp (p, "6K") == 0)
		  mips_cpu = 6000;
		break;

	      case '8':
		if (strcmp (p, "8000") == 0
		    || strcmp (p, "8k") == 0
		    || strcmp (p, "8K") == 0)
		  mips_cpu = 8000;
		break;

	      case 'o':
		if (strcmp (p, "orion") == 0)
		  mips_cpu = 4600;
		break;
	      }

	    if (sv
		&& (mips_cpu != 4300
		    && mips_cpu != 4100
		    && mips_cpu != 4111
		    && mips_cpu != 5000))
	      {
		as_bad (_("ignoring invalid leading 'v' in -mcpu=%s switch"), arg);
		return 0;
	      }

	    if (mips_cpu == -1)
	      {
		as_bad (_("invalid architecture -mcpu=%s"), arg);
		return 0;
	      }
d9044 1
a9044 1
      mips_cpu = 4650;
d9051 1
a9051 1
      mips_cpu = 4010;
d9058 1
a9058 1
      mips_cpu = 4100;
a9063 1

d9065 1
a9065 1
      mips_cpu = 3900;
d9067 1
a9067 1
      
d9091 1
d9125 1
d9143 1
d9157 3
a9159 1
	      || strcmp (*l, "elf64-littlemips") == 0)
d9167 1
d9176 1
a9176 1
	 This is unnecessarily restrictive.  
d9180 1
a9180 1
	 multilibs will break too many systems. */
d9182 3
a9184 1
/*    mips_32bitmode = 1; */
d9190 3
a9192 1
/*    mips_32bitmode = 0; */
d9196 5
a9200 5
      if (strcmp (arg,"32") == 0
	  || strcmp (arg,"n32") == 0
	  || strcmp (arg,"64") == 0
	  || strcmp (arg,"o64") == 0
	  || strcmp (arg,"eabi") == 0)
a9218 1

a9248 1

d9255 1
a9255 1
  fprintf(stream, _("\
d9263 1
a9263 1
  fprintf(stream, _("\
d9268 3
d9290 3
d9308 1
a9308 1
  fprintf(stream, _("\
d9311 1
a9311 1
  fprintf(stream, _("\
d9314 1
d9318 1
a9318 1
  fprintf(stream, _("\
d9332 1
a9332 1
  mips_opcodes = (struct mips_opcode*) mips_builtin_opcodes;
a9500 1
/*ARGSUSED*/
d9524 2
a9525 1
  long insn, value;
d9540 22
a9561 21
    if (S_GET_OTHER (fixP->fx_addsy) == STO_MIPS16 
        || S_IS_WEAK (fixP->fx_addsy)
        || (symbol_used_in_reloc_p (fixP->fx_addsy)
            && (((bfd_get_section_flags (stdoutput,
                                         S_GET_SEGMENT (fixP->fx_addsy))
                  & SEC_LINK_ONCE) != 0)
                || !strncmp (segment_name (S_GET_SEGMENT (fixP->fx_addsy)),
                             ".gnu.linkonce",
                             sizeof (".gnu.linkonce") - 1))))

      {
        value -= S_GET_VALUE (fixP->fx_addsy);
        if (value != 0 && ! fixP->fx_pcrel)
          {
            /* In this case, the bfd_install_relocation routine will
               incorrectly add the symbol value back in.  We just want
               the addend to appear in the object file.  
	       FIXME: If this makes VALUE zero, we're toast.  */
            value -= S_GET_VALUE (fixP->fx_addsy);
          }
      }
d9617 1
a9617 1
      if (OUTPUT_FLAVOR == bfd_target_elf_flavour 
d9642 1
a9642 1
      if (OUTPUT_FLAVOR == bfd_target_elf_flavour 
d9711 1
a9711 1
	  if (value < -0x8000 || value > 0x7fff)
d9729 1
a9729 1
		      _("Branch to odd address (%lx)"), value);
d9738 2
a9739 2
      
      value >>= 2;
d9748 1
a9748 1
      if (value >= -0x8000 && value < 0x8000)
d10041 1
a10041 1
		bfd_set_section_alignment (stdoutput, seg, 4);
d10063 1
a10063 1
		bfd_set_section_alignment (stdoutput, seg, 4);
d10239 1
a10239 1
	     needed. */
d10299 12
a10310 6
      if (isa == 0)
	mips_opts.isa = file_mips_isa;
      else if (isa < 1 || isa > 4)
	as_bad (_("unknown ISA level"));
      else
	mips_opts.isa = isa;
d10524 1
a10524 1
  demand_empty_rest_of_line ();  
d10591 1
a10591 1
      
d10597 1
a10597 1
      
d10765 1
d10799 2
d10805 1
a10805 2
      val = (S_GET_VALUE (fragp->fr_symbol)
	     + symbol_get_frag (fragp->fr_symbol)->fr_address);
d10818 1
a10818 1
	     + symbol_get_frag (fragp->fr_symbol)->fr_address);
d10841 1
d10854 6
d10863 3
a10865 2
	 the same section.  If the fr_address of the symbol fragment
	 is greater then the address of this fragment we want to add
d10869 1
a10869 2
	  && (symbol_get_frag (fragp->fr_symbol)->fr_address
	      >= fragp->fr_address))
d10879 1
a10879 3
	  for (f = fragp;
	       f != NULL && f != symbol_get_frag (fragp->fr_symbol);
	       f = f->fr_next)
d10909 1
a10909 1
	     higher. */
a10977 1
/*ARGSUSED*/
d10983 2
a10984 1
  int change;
d11027 15
d11045 7
a11051 1
		&& ! bfd_is_com_section (symsec));
d11564 1
a11564 1
  /* Set the MIPS ELF ABI flags. */
d11567 1
a11567 1
  else if (strcmp (mips_abi_string,"32") == 0)
d11569 1
a11569 1
  else if (strcmp (mips_abi_string,"o64") == 0)
d11571 1
a11571 1
  else if (strcmp (mips_abi_string,"eabi") == 0)
d11585 10
a11594 12
typedef struct proc
  {
    symbolS *isym;
    unsigned long reg_mask;
    unsigned long reg_offset;
    unsigned long fpreg_mask;
    unsigned long fpreg_offset;
    unsigned long frame_offset;
    unsigned long frame_reg;
    unsigned long pc_reg;
  }
procS;
d11600 1
a11600 2
/* When we align code in the .text section of mips16, use the correct two
   byte nop pattern of 0x6500 (move $0,$0) */
d11602 8
a11609 11
int
mips_do_align (n, fill, len, max)
     int n;
     const char *fill;
     int len ATTRIBUTE_UNUSED;
     int max;
{
  if (fill == NULL
      && subseg_text_p (now_seg)
      && n > 1
      && mips_opts.mips16)
d11614 11
a11624 1
      frag_align (1, 0, 0);
d11626 2
a11627 5
      if (target_big_endian)
      	frag_align_pattern (n, be_nop, 2, max);      
      else
      	frag_align_pattern (n, le_nop, 2, max);      
      return 1;
d11630 1
a11630 1
  return 0;
a11709 1

d11777 1
a11777 1
    /* Write the symbol */
d11783 1
a11783 1
    fragp = frag_more (7*4);
d11785 7
a11791 7
    md_number_to_chars (fragp,     (valueT) cur_proc_ptr->reg_mask, 4);
    md_number_to_chars (fragp + 4, (valueT) cur_proc_ptr->reg_offset, 4);
    md_number_to_chars (fragp + 8, (valueT) cur_proc_ptr->fpreg_mask, 4);
    md_number_to_chars (fragp +12, (valueT) cur_proc_ptr->fpreg_offset, 4);
    md_number_to_chars (fragp +16, (valueT) cur_proc_ptr->frame_offset, 4);
    md_number_to_chars (fragp +20, (valueT) cur_proc_ptr->frame_reg, 4);
    md_number_to_chars (fragp +24, (valueT) cur_proc_ptr->pc_reg, 4);
d11852 1
a11852 1
   then ecoff.c (ecoff_directive_frame) is used. For embedded targets, 
d11854 1
a11854 1
   We can't use the ecoff routines because they make reference to the ecoff 
d11865 1
a11865 1
  if (cur_proc_ptr ==  (procS *) NULL)
d11893 2
a11894 2
/* The .fmask and .mask directives. If the mdebug section is present 
   (IRIX 5 native) then ecoff.c (ecoff_directive_mask) is used. For 
d11896 1
a11896 1
   information correctly. We can't use the ecoff routines because they 
d11905 1
a11905 1
  
d11963 199
@


1.6
log
@Help stupid cvs fixing basic conflicts.
@
text
@d186 1
a186 1
static struct mips_set_options mips_opts = { -1, -1 };
d410 1
a410 1
static const struct mips_opcode dummy_opcode = { 0 };
d759 1
a759 1
  { 0 },
d776 1
a776 1
  { 0 },
d2663 1
a2663 1
     int *counter;
d9366 1
a9366 1
     fragS *frag;
d9943 1
a9943 1
     int x;
d10137 1
a10137 1
     int x;
d10178 1
a10178 1
     int x;
d10231 1
a10231 1
     int x;
d10367 1
a10367 1
     int ignore;
d10392 1
a10392 1
     int ignore;
d10432 1
a10432 1
     int ignore;
d10465 1
a10465 1
     int ignore;
d10505 1
a10505 1
     int ignore;
d10539 1
a10539 1
     int ignore;
d10568 1
a10568 1
     int ignore;
d11081 1
a11081 1
     asection *section;
d11322 1
a11322 1
     bfd *abfd;
d11582 1
a11582 1
     int len;
d11674 1
a11674 1
     int x;
d11687 1
a11687 1
     int x;
@


1.5
log
@Fix a minor 64 bit constant synth. bug
@
text
@d2 1
a2 1
   Copyright (C) 1993, 1995, 1996 Free Software Foundation, Inc.
d39 7
d49 1
a56 1
#undef TARGET_SYMBOL_FIELDS
d62 1
d86 1
d95 8
d106 3
a108 1
   32 bit ABI.  This has no meaning for ECOFF.  */
d120 3
a122 1
      return target_big_endian ? "ecoff-bigmips" : "ecoff-littlemips";
d129 1
d138 2
d144 44
a193 4
/* MIPS ISA (Instruction Set Architecture) level (may be changed
   temporarily using .set mipsN).  */
static int mips_isa = -1;

d200 2
a201 5
/* Whether the 4650 instructions (mad/madu) are permitted.  */
static int mips_4650 = -1;

/* Whether the 4010 instructions are permitted.  */
static int mips_4010 = -1;
d203 2
a204 2
/* Whether the 4100 MADD16 and DMADD16 are permitted. */
static int mips_4100 = -1;
d206 62
a267 3
/* Whether the processor uses hardware interlocks, and thus does not
   require nops to be inserted.  */
static int interlocks = -1;
d269 1
a269 1
/* As with "interlocks" this is used by hardware that has FP
d271 7
a277 1
static int cop_interlocks = -1;
d310 2
a311 2
static int mips_warn_about_macros;
static int mips_noreorder;
d313 4
a316 3
static int mips_nomove;
static int mips_noat;
static int mips_nobopt;
d332 3
a334 2
   gcc output.  If it guesses wrong, the only loss should be in
   efficiency; it shouldn't introduce any bugs.
d338 1
a338 1
static int nopic_need_relax PARAMS ((symbolS *));
d343 3
a376 2
static int byte_order;

a378 3
/* Symbol labelling the current insn.  */
static symbolS *insn_label;

d421 3
d433 4
d441 16
d481 19
d564 1
a564 1
   (((old) << 24) \
d570 2
a571 2
#define RELAX_OLD(i) (((i) >> 24) & 0xff)
#define RELAX_NEW(i) (((i) >> 16) & 0xff)
d576 40
d621 1
a621 1
    as_fatal ("internal Error, line %d, %s", __LINE__, __FILE__)
d623 1
a623 1
#define internalError() as_fatal ("MIPS internal Error");
d626 2
d629 1
a629 1
				  unsigned int reg, int fpr));
d631 1
d637 2
a638 2
static void mips_no_prev_insn PARAMS ((void));
static void mips_emit_delays PARAMS ((void));
d646 3
d657 1
d662 4
d682 1
d686 6
a691 2
static void s_ent PARAMS ((int));
static void s_mipsend PARAMS ((int));
d693 4
d714 1
a714 1
   .struct, .weakext.  */
d729 1
d738 1
d756 1
d765 1
a765 1
  {"aent", s_ent, 1},
d767 1
a767 1
  {"end", s_mipsend, 0},
d769 1
a769 1
  {"ent", s_ent, 0},
d771 2
a772 2
  {"fmask", s_ignore, 'F'},
  {"frame", s_ignore, 0},
d774 1
a774 1
  {"mask", s_ignore, 'R'},
d789 24
d830 10
d850 13
d864 2
a865 1
  if (mips_isa == -1)
d867 5
a871 2
      const char *cpu;
      char *a = NULL;
d873 5
a877 8
      cpu = TARGET_CPU;
      if (strcmp (cpu + (sizeof TARGET_CPU) - 3, "el") == 0)
	{
	  a = xmalloc (sizeof TARGET_CPU);
	  strcpy (a, TARGET_CPU);
	  a[(sizeof TARGET_CPU) - 3] = '\0';
	  cpu = a;
	}
d880 22
a901 5
	{
	  mips_isa = 1;
	  if (mips_cpu == -1)
	    mips_cpu = 3000;
	}
d904 2
a905 5
	{
	  mips_isa = 2;
	  if (mips_cpu == -1)
	    mips_cpu = 6000;
	}
d909 2
a910 5
	{
	  mips_isa = 3;
	  if (mips_cpu == -1)
	    mips_cpu = 4000;
	}
d912 2
a913 5
	{
	  mips_isa = 3;
	  if (mips_cpu == -1)
	    mips_cpu = 4400;
	}
d916 2
a917 5
	{
	  mips_isa = 3;
	  if (mips_cpu == -1)
	    mips_cpu = 4600;
	}
d919 2
a920 7
	{
	  mips_isa = 3;
	  if (mips_cpu == -1)
	    mips_cpu = 4650;
	  if (mips_4650 == -1)
	    mips_4650 = 1;
	}
d922 5
a926 5
	{
	  mips_isa = 3;
	  if (mips_cpu == -1)
	    mips_cpu = 4300;
	}
d928 2
a929 7
        {
          mips_isa = 3;
          if (mips_cpu == -1)
            mips_cpu = 4100;
          if (mips_4100 == -1)
            mips_4100 = 1;
        }
d931 3
a933 7
	{
	  mips_isa = 2;
	  if (mips_cpu == -1)
	    mips_cpu = 4010;
	  if (mips_4010 == -1)
	    mips_4010 = 1;
	}
d936 4
a939 5
	{
	  mips_isa = 4;
	  if (mips_cpu == -1)
	    mips_cpu = 5000;
	}
d942 2
a943 5
	{
	  mips_isa = 4;
	  if (mips_cpu == -1)
	    mips_cpu = 8000;
	}
d945 5
a949 5
	{
	  mips_isa = 4;
	  if (mips_cpu == -1)
	    mips_cpu = 10000;
	}
d951 2
a952 5
	{
	  mips_isa = 1;
	  if (mips_cpu == -1)
	    mips_cpu = 3000;
	}
d954 3
a956 3
      if (a != NULL)
	free (a);
    }
d958 3
a960 2
  if (mips_4650 < 0)
    mips_4650 = 0;
d962 8
a969 2
  if (mips_4010 < 0)
    mips_4010 = 0;
d971 4
a974 2
  if (mips_4100 < 0)
    mips_4100 = 0;
a975 2
  if (mips_4650 || mips_4010 || mips_4100 || mips_cpu == 4300)
    interlocks = 1;
d977 26
a1002 1
    interlocks = 0;
d1004 2
a1005 4
  if (mips_cpu == 4300)
    cop_interlocks = 1;
  else
    cop_interlocks = 0;
d1007 7
a1013 2
  if (mips_isa < 2 && mips_trap)
    as_bad ("trap exception not supported at ISA 1");
d1015 12
a1026 1
  switch (mips_isa)
d1028 15
a1042 12
    case 1:
      ok = bfd_set_arch_mach (stdoutput, bfd_arch_mips, 3000);
      break;
    case 2:
      ok = bfd_set_arch_mach (stdoutput, bfd_arch_mips, 6000);
      break;
    case 3:
      ok = bfd_set_arch_mach (stdoutput, bfd_arch_mips, 4000);
      break;
    case 4:
      ok = bfd_set_arch_mach (stdoutput, bfd_arch_mips, 8000);
      break;
d1044 1
d1046 1
a1046 1
    as_warn ("Could not set architecture and machine");
d1048 1
a1048 1
  file_mips_isa = mips_isa;
d1059 1
a1059 1
	  fprintf (stderr, "internal error: can't hash `%s': %s\n",
d1061 2
a1062 1
	  as_fatal ("Broken assembler.  No assembly attempted.");
d1066 4
a1069 7
	  if (mips_opcodes[i].pinfo != INSN_MACRO
	      && ((mips_opcodes[i].match & mips_opcodes[i].mask)
		  != mips_opcodes[i].match))
	    {
	      fprintf (stderr, "internal error: bad opcode: `%s' \"%s\"\n",
		       mips_opcodes[i].name, mips_opcodes[i].args);
	      as_fatal ("Broken assembler.  No assembly attempted.");
d1076 56
a1131 1
  mips_no_prev_insn ();
d1147 9
a1155 4
      /* Sections must be aligned to 16 byte boundaries.  */
      (void) bfd_set_section_alignment (stdoutput, text_section, 4);
      (void) bfd_set_section_alignment (stdoutput, data_section, 4);
      (void) bfd_set_section_alignment (stdoutput, bss_section, 4);
d1162 1
d1168 7
d1179 2
a1180 5
	    /* The ABI says this section should be loaded so that the
	       running program can access it.  */
	    (void) bfd_set_section_flags (stdoutput, sec,
					  (SEC_ALLOC | SEC_LOAD
					   | SEC_READONLY | SEC_DATA));
d1192 1
a1192 3
	    (void) bfd_set_section_flags (stdoutput, sec,
					  (SEC_ALLOC | SEC_LOAD
					   | SEC_READONLY | SEC_DATA));
d1223 7
d1257 9
a1265 1
  mips_ip (str, &insn);
d1271 1
d1274 4
a1277 1
      macro (&insn);
d1291 2
a1292 2
/* See whether instruction IP reads register REG.  If FPR is non-zero,
   REG is a floating point register.  */
d1295 1
a1295 1
insn_uses_reg (ip, reg, fpr)
d1298 1
a1298 1
     int fpr;
d1300 7
d1308 1
a1308 1
  if (! fpr && reg == 0)
d1311 1
a1311 1
  if (fpr)
d1313 1
d1322 1
a1322 1
	  && (((ip->insn_opcode >> OP_SH_FS) & OP_MASK_FS)
d1326 1
a1326 1
	  && (((ip->insn_opcode >> OP_SH_FT) & OP_MASK_FT)
d1330 1
a1330 1
  else
d1339 28
d1381 2
a1382 2
  if (! mips_noreorder
      && mips_isa < 4
d1384 1
a1384 1
	  || (mips_isa < 2
d1391 1
d1400 27
d1445 4
d1452 1
a1452 1
  if (place == NULL && ! mips_noreorder)
d1454 2
d1477 4
a1480 1
#define emit_nop() md_number_to_chars (frag_more (4), 0, 4)
d1484 2
a1485 1
      if (mips_isa < 4
d1488 1
a1488 1
	      || (mips_isa < 2
d1495 1
d1501 1
a1501 1
				0))
d1504 2
a1505 1
      else if (mips_isa < 4
d1508 1
a1508 1
		   || (mips_isa < 2
d1525 3
d1534 1
a1534 1
				    1))
d1543 1
a1543 1
				    1))
d1554 1
d1563 2
a1564 1
      else if (mips_isa < 4
d1573 1
d1578 31
d1613 7
a1619 2
	     insert two NOPS.  Some newer processors have interlocks.  */
	  if (! interlocks
d1623 10
d1638 4
a1641 2
	     insert a NOP.  Some newer processors have interlocks.  */
	  if (! interlocks
d1645 17
a1661 1
	}
d1671 22
a1692 12
      if (nops == 0
	  && ((mips_isa < 4
	       && (prev_prev_insn.insn_mo->pinfo & INSN_COPROC_MOVE_DELAY)
	       && (prev_prev_insn.insn_mo->pinfo & INSN_WRITE_COND_CODE)
	       && (pinfo & INSN_READ_COND_CODE)
               && ! cop_interlocks)
	      || ((prev_prev_insn.insn_mo->pinfo & INSN_READ_LO)
		  && (pinfo & INSN_WRITE_LO)
		  && ! interlocks)
	      || ((prev_prev_insn.insn_mo->pinfo & INSN_READ_HI)
		  && (pinfo & INSN_WRITE_HI)
		  && ! interlocks)))
d1699 3
a1701 1
      if (nops > 0 && ip->insn_opcode == 0)
d1705 1
a1705 1
      if (nops > 0)
d1710 1
d1732 1
a1732 1
	  if (insn_label != NULL)
d1734 6
a1739 3
	      assert (S_GET_SEGMENT (insn_label) == now_seg);
	      insn_label->sy_frag = frag_now;
	      S_SET_VALUE (insn_label, (valueT) frag_now_fix ());
d1747 63
a1810 3
  
  if (place == NULL)
    f = frag_more (4);
d1812 9
a1820 1
    f = place;
d1822 1
a1822 1
  if (address_expr != NULL)
d1837 3
d1843 11
a1862 1
	  assert (reloc_type != BFD_RELOC_UNUSED);
d1888 16
a1903 1
  md_number_to_chars (f, ip->insn_opcode, 4);
d1906 29
a1934 17
  if (pinfo & INSN_WRITE_GPR_D)
    mips_gprmask |= 1 << ((ip->insn_opcode >> OP_SH_RD) & OP_MASK_RD);
  if ((pinfo & (INSN_WRITE_GPR_T | INSN_READ_GPR_T)) != 0)
    mips_gprmask |= 1 << ((ip->insn_opcode >> OP_SH_RT) & OP_MASK_RT);
  if (pinfo & INSN_READ_GPR_S)
    mips_gprmask |= 1 << ((ip->insn_opcode >> OP_SH_RS) & OP_MASK_RS);
  if (pinfo & INSN_WRITE_GPR_31)
    mips_gprmask |= 1 << 31;
  if (pinfo & INSN_WRITE_FPR_D)
    mips_cprmask[1] |= 1 << ((ip->insn_opcode >> OP_SH_FD) & OP_MASK_FD);
  if ((pinfo & (INSN_WRITE_FPR_S | INSN_READ_FPR_S)) != 0)
    mips_cprmask[1] |= 1 << ((ip->insn_opcode >> OP_SH_FS) & OP_MASK_FS);
  if ((pinfo & (INSN_WRITE_FPR_T | INSN_READ_FPR_T)) != 0)
    mips_cprmask[1] |= 1 << ((ip->insn_opcode >> OP_SH_FT) & OP_MASK_FT);
  if ((pinfo & INSN_READ_FPR_R) != 0)
    mips_cprmask[1] |= 1 << ((ip->insn_opcode >> OP_SH_FR) & OP_MASK_FR);
  if (pinfo & INSN_COP)
d1936 23
a1958 1
      /* We don't keep enough information to sort these cases out.  */
a1959 2
  /* Never set the bit for $0, which is always zero.  */
  mips_gprmask &=~ 1 << 0;
d1961 1
a1961 1
  if (place == NULL && ! mips_noreorder)
d1974 1
a1974 1
	      || mips_nomove != 0
d2006 1
a2006 1
	      || insn_label != NULL
d2008 5
a2012 2
		 can not do the swap.  */
	      || prev_insn_frag->fr_type == rs_machine_dependent
d2021 2
a2022 1
	      || (mips_isa < 4
d2027 2
a2028 1
	      || (mips_isa < 4
d2030 1
d2034 2
a2035 1
	      || (! interlocks
d2039 7
a2045 4
	      || (mips_isa < 2
		  && (prev_pinfo
		      & (INSN_LOAD_MEMORY_DELAY
			 | INSN_COPROC_MEMORY_DELAY)))
d2057 2
a2058 1
	      || ((prev_pinfo & INSN_WRITE_GPR_T)
d2062 3
a2064 2
				    0))
	      || ((prev_pinfo & INSN_WRITE_GPR_D)
d2068 29
a2096 1
				    0))
d2100 2
a2101 1
	      || ((prev_pinfo & INSN_WRITE_GPR_T)
d2109 2
a2110 1
	      || ((prev_pinfo & INSN_WRITE_GPR_D)
d2118 6
d2127 2
a2128 1
	      || ((pinfo & INSN_WRITE_GPR_D)
d2132 7
a2138 3
				    0))
	      || ((pinfo & INSN_WRITE_GPR_31)
		  && insn_uses_reg (&prev_insn, 31, 0))
d2143 1
a2143 1
		  && insn_uses_reg (&prev_insn, AT, 0))
d2147 3
a2149 1
	      || (mips_isa < 4
d2151 1
a2151 1
		      || (mips_isa < 2
d2157 1
a2157 1
				    0))
d2163 15
a2177 1
		  && (prev_pinfo & INSN_READ_COND_CODE)))
a2189 3
	      char *prev_f;
	      char temp[4];

d2191 1
a2191 5
	      prev_f = prev_insn_frag->fr_literal + prev_insn_where;
	      memcpy (temp, prev_f, 4);
	      memcpy (prev_f, f, 4);
	      memcpy (f, temp, 4);
	      if (prev_insn_fixp)
d2193 17
a2209 2
		  prev_insn_fixp->fx_frag = frag_now;
		  prev_insn_fixp->fx_where = f - frag_now->fr_literal;
d2211 1
a2211 1
	      if (fixp)
d2213 22
a2234 2
		  fixp->fx_frag = prev_insn_frag;
		  fixp->fx_where = prev_insn_where;
d2236 1
d2250 4
d2265 3
d2282 6
a2293 1
      prev_insn_fixp = fixp;
d2296 11
d2309 11
a2319 1
  insn_label = NULL;
d2323 2
a2324 1
   label.  */
d2327 2
a2328 1
mips_no_prev_insn ()
d2330 9
a2338 2
  prev_insn.insn_mo = &dummy_opcode;
  prev_prev_insn.insn_mo = &dummy_opcode;
d2342 2
d2345 1
a2345 1
  insn_label = NULL;
d2351 2
a2352 1
   kept for the previous instructions.  */
d2355 2
a2356 1
mips_emit_delays ()
d2358 1
a2358 1
  if (! mips_noreorder)
d2360 1
a2360 1
      int nop;
d2362 3
a2364 2
      nop = 0;
      if ((mips_isa < 4
d2370 1
a2370 1
	  || (! interlocks
d2374 6
a2379 1
	  || (mips_isa < 2
d2381 1
a2381 2
		  & (INSN_LOAD_MEMORY_DELAY
		     | INSN_COPROC_MEMORY_DELAY))))
d2383 4
a2386 2
	  nop = 1;
	  if ((mips_isa < 4
d2389 1
a2389 1
	      || (! interlocks
d2392 4
a2395 1
	    emit_nop ();
d2397 2
a2398 1
      else if ((mips_isa < 4
d2401 1
a2401 1
	       || (! interlocks
a2403 2
	nop = 1;
      if (nop)
d2405 32
a2436 2
	  emit_nop ();
	  if (insn_label != NULL)
d2438 6
a2443 3
	      assert (S_GET_SEGMENT (insn_label) == now_seg);
	      insn_label->sy_frag = frag_now;
	      S_SET_VALUE (insn_label, (valueT) frag_now_fix ());
d2448 5
a2452 1
  mips_no_prev_insn ();
d2494 2
a2495 2
  if (mips_warn_about_macros && place == NULL && *counter == 1)
    as_warn ("Macro instruction expanded into multiple instructions");
d2500 7
d2512 2
a2513 14
  while (strcmp (fmt, insn.insn_mo->args) != 0
	 || insn.insn_mo->pinfo == INSN_MACRO
	 || ((insn.insn_mo->pinfo & INSN_ISA) == INSN_ISA2
	     && mips_isa < 2)
	 || ((insn.insn_mo->pinfo & INSN_ISA) == INSN_ISA3
	     && mips_isa < 3)
	 || ((insn.insn_mo->pinfo & INSN_ISA) == INSN_ISA4
	     && mips_isa < 4)
	 || ((insn.insn_mo->pinfo & INSN_ISA) == INSN_4650
	     && ! mips_4650)
	 || ((insn.insn_mo->pinfo & INSN_ISA) == INSN_4010
	     && ! mips_4010)
	 || ((insn.insn_mo->pinfo & INSN_ISA) == INSN_4100
	     && ! mips_4100))
d2515 7
d2526 1
d2577 4
a2599 1
		      && now_seg == text_section
a2612 1
			  && now_seg == text_section
d2645 4
d2660 126
d2802 2
d2835 2
a2836 2
  if (mips_warn_about_macros && place == NULL && *counter == 1)
    as_warn ("Macro instruction expanded into multiple instructions");
d2866 3
a2868 1
  if (imm_expr.X_add_number >= -0x8000 && imm_expr.X_add_number < 0x8000)
d2888 4
a2891 2
  if (ex->X_op != O_constant)
    as_warn ("Instruction %s requires absolute expression", ip->insn_mo->name);
d2981 2
a2982 2
  int shift, freg;
  expressionS hi32, lo32, tmp;
d3016 6
a3021 2
	       || ((mips_isa < 3 || !dbl)
		   && (ep->X_add_number &~ (offsetT) 0xffffffff) == 0))
d3035 1
a3035 1
  if (mips_isa < 3)
d3037 1
a3037 1
      as_bad ("Number larger than 32 bits");
d3058 1
a3058 1
	as_bad ("Number larger than 64 bits");
d3069 3
d3076 2
a3077 2
              macro_build ((char *) NULL, counter, &lo32, "addiu", "t,r,j", reg, 0,
                           (int) BFD_RELOC_LO16);
d3084 3
a3086 2
              macro_build ((char *) NULL, counter, &lo32, "ori", "t,r,i", reg, reg,
                           (int) BFD_RELOC_LO16);
d3091 3
a3093 5
      /* Check for 16bit shifted constant: */
      shift = 32;
      tmp.X_add_number = hi32.X_add_number << shift | lo32.X_add_number;
      /* We know that hi32 is non-zero, so start the mask on the first
         bit of the hi32 value: */
d3097 31
a3127 11
         if ((tmp.X_add_number & ~((offsetT)0xffff << shift)) == 0)
          {
            tmp.X_op = O_constant;
            tmp.X_add_number >>= shift;
            macro_build ((char *) NULL, counter, &tmp, "ori", "t,r,i", reg, 0,
                         (int) BFD_RELOC_LO16);
            macro_build ((char *) NULL, counter, NULL,
                         (shift >= 32) ? "dsll32" : "dsll",
                         "d,w,<", reg, reg, (shift >= 32) ? shift - 32 : shift);
            return;
          }
d3131 30
a3160 9
      freg = 0;
      shift = 32;
      tmp.X_add_number = hi32.X_add_number << shift | lo32.X_add_number;
      while ((tmp.X_add_number & 1) == 0)
        {
          tmp.X_add_number >>= 1;
          freg++;
        }
      if (((tmp.X_add_number + 1) & tmp.X_add_number) == 0) /* (power-of-2 - 1) */
d3162 1
a3162 1
          shift = COUNT_TOP_ZEROES((unsigned int)hi32.X_add_number);
d3165 4
d3170 4
a3173 4
              tmp.X_add_number = (offsetT)-1;
              macro_build ((char *) NULL, counter, &tmp, "addiu", "t,r,j", reg, 0,
                           (int) BFD_RELOC_LO16); /* set all ones */
              if (freg != 0)
d3175 1
a3175 1
                  freg += shift;
d3177 1
a3177 1
                               (freg >= 32) ? "dsll32" : "dsll",
d3179 1
a3179 1
                               (freg >= 32) ? freg - 32 : freg);
d3181 4
a3184 2
              macro_build ((char *) NULL, counter, NULL, (shift >= 32) ? "dsrl32" : "dsrl",
                           "d,w,<", reg, reg, (shift >= 32) ? shift - 32 : shift);
d3188 5
d3250 1
a3250 1
      as_bad ("expression too complex");
d3269 1
a3269 1
          || nopic_need_relax (ep->X_add_symbol))
d3275 3
a3277 1
		       mips_isa < 3 ? "addiu" : "daddiu",
d3280 3
a3282 2
			RELAX_ENCODE (4, 8, 0, 4, 0, mips_warn_about_macros),
			ep->X_add_symbol, (long) 0, (char *) NULL);
d3288 3
a3290 1
		   mips_isa < 3 ? "addiu" : "daddiu",
d3308 3
a3310 1
		   mips_isa < 3 ? "lw" : "ld",
d3314 2
a3315 2
		    RELAX_ENCODE (0, 4, -8, 0, 0, mips_warn_about_macros),
		    ep->X_add_symbol, (long) 0, (char *) NULL);
d3317 3
a3319 1
		   mips_isa < 3 ? "addiu" : "daddiu",
d3324 1
a3324 1
	    as_bad ("PIC code offset overflow (max 16 signed bits)");
d3327 3
a3329 1
		       mips_isa < 3 ? "addiu" : "daddiu",
d3358 3
a3360 1
		   mips_isa < 3 ? "addu" : "daddu",
d3363 3
a3365 1
		   mips_isa < 3 ? "lw" : "ld",
d3369 2
a3370 2
				  mips_warn_about_macros),
		    ep->X_add_symbol, (long) 0, (char *) NULL);
d3381 3
a3383 1
		   mips_isa < 3 ? "lw" : "ld",
d3389 3
a3391 1
		   mips_isa < 3 ? "addiu" : "daddiu",
d3396 1
a3396 1
	    as_bad ("PIC code offset overflow (max 16 signed bits)");
d3399 3
a3401 1
		       mips_isa < 3 ? "addiu" : "daddiu",
d3411 3
a3413 1
		   mips_isa < 3 ? "addiu" : "daddiu",
d3455 1
d3462 2
d3484 2
a3485 2
      mips_emit_delays ();
      ++mips_noreorder;
d3498 1
a3498 1
      --mips_noreorder;
d3519 3
a3521 1
      if (imm_expr.X_add_number >= -0x8000 && imm_expr.X_add_number < 0x8000)
d3547 3
a3549 1
      if (imm_expr.X_add_number >= 0 && imm_expr.X_add_number < 0x10000)
d3582 1
a3582 1
      if (imm_expr.X_add_number == 0)
d3620 1
a3620 1
      if (mips_isa >= 3)
d3627 3
a3629 2
      if (imm_expr.X_add_number >= maxnum
	  && (mips_isa < 3 || sizeof (maxnum) > 4))
d3635 1
a3635 1
	      as_warn ("Branch %s is always false (nop)", ip->insn_mo->name);
d3640 1
a3640 1
	      as_warn ("Branch likely %s is always false", ip->insn_mo->name);
d3646 2
d3654 1
a3654 1
      if (imm_expr.X_add_number == 0)
d3661 1
a3661 1
      if (imm_expr.X_add_number == 1)
d3669 1
a3669 1
      if (mips_isa >= 3)
d3677 3
a3679 2
      if (imm_expr.X_add_number <= maxnum
	  && (mips_isa < 3 || sizeof (maxnum) > 4))
d3683 1
a3683 1
	  as_warn ("Branch %s is always true", ip->insn_mo->name);
d3715 4
a3718 1
      if (sreg == 0 || imm_expr.X_add_number == -1)
d3720 2
d3728 1
a3728 1
      if (imm_expr.X_add_number == 0)
d3730 1
a3730 1
      if (imm_expr.X_add_number == 1)
d3812 1
a3812 1
      if (mips_isa >= 3)
d3819 3
a3821 2
      if (imm_expr.X_add_number >= maxnum
	  && (mips_isa < 3 || sizeof (maxnum) > 4))
d3823 2
d3831 1
a3831 1
      if (imm_expr.X_add_number == 0)
d3838 1
a3838 1
      if (imm_expr.X_add_number == 1)
d3873 4
a3876 1
      if (sreg == 0 || imm_expr.X_add_number == -1)
d3878 2
d3886 1
a3886 1
      if (imm_expr.X_add_number == 0)
d3888 1
a3888 1
      if (imm_expr.X_add_number == 1)
d3955 1
a3955 1
	  as_warn ("Divide by zero.");
d3959 1
a3959 1
	    macro_build ((char *) NULL, &icnt, NULL, "break", "c", 7);
d3963 2
a3964 2
      mips_emit_delays ();
      ++mips_noreorder;
a3965 3
      macro_build ((char *) NULL, &icnt, NULL,
		   dbl ? "ddiv" : "div",
		   "z,s,t", sreg, treg);
d3967 6
a3972 1
	macro_build ((char *) NULL, &icnt, NULL, "teq", "s,t", treg, 0);
d3977 4
a3980 2
	  macro_build ((char *) NULL, &icnt, NULL, "nop", "", 0);
	  macro_build ((char *) NULL, &icnt, NULL, "break", "c", 7);
d4003 6
a4008 1
	macro_build ((char *) NULL, &icnt, NULL, "teq", "s,t", sreg, AT);
d4014 6
a4019 1
	  macro_build ((char *) NULL, &icnt, NULL, "break", "c", 6);
a4020 1
      --mips_noreorder;
d4060 1
a4060 1
      if (imm_expr.X_add_number == 0)
d4062 1
a4062 1
	  as_warn ("Divide by zero.");
d4066 1
a4066 1
	    macro_build ((char *) NULL, &icnt, NULL, "break", "c", 7);
d4069 1
a4069 1
      if (imm_expr.X_add_number == 1)
d4078 2
a4079 1
      if (imm_expr.X_add_number == -1
d4117 2
a4118 2
      mips_emit_delays ();
      ++mips_noreorder;
a4119 1
      macro_build ((char *) NULL, &icnt, NULL, s, "z,s,t", sreg, treg);
d4121 7
a4127 1
	macro_build ((char *) NULL, &icnt, NULL, "teq", "s,t", treg, 0);
d4132 6
a4137 2
	  macro_build ((char *) NULL, &icnt, NULL, "nop", "", 0);
	  macro_build ((char *) NULL, &icnt, NULL, "break", "c", 7);
a4138 1
      --mips_noreorder;
d4151 1
a4151 1
	 where bar is an address in the .text section.  These are used
d4158 7
a4164 7
	  && now_seg == text_section
	  && (offset_expr.X_op_symbol->sy_value.X_op == O_constant
	      ? S_GET_SEGMENT (offset_expr.X_op_symbol) == text_section
	      : (offset_expr.X_op_symbol->sy_value.X_op == O_symbol
		 && (S_GET_SEGMENT (offset_expr.X_op_symbol
				    ->sy_value.X_add_symbol)
		     == text_section)))
d4166 2
a4167 1
	  && offset_expr.X_add_number == 0)
d4172 3
a4174 1
		       mips_isa < 3 ? "addiu" : "daddiu",
d4182 1
a4182 1
	  as_bad ("expression too complex");
d4209 1
a4209 1
	      || nopic_need_relax (offset_expr.X_add_symbol))
d4215 3
a4217 1
			   mips_isa < 3 ? "addiu" : "daddiu",
d4221 2
a4222 2
					  mips_warn_about_macros),
			    offset_expr.X_add_symbol, (long) 0,
d4229 3
a4231 1
		       mips_isa < 3 ? "addiu" : "daddiu",
d4286 1
a4286 1
					   ? mips_warn_about_macros
d4288 1
a4288 1
			    offset_expr.X_add_symbol, (long) 0,
d4296 3
a4298 1
			   mips_isa < 3 ? "addiu" : "daddiu",
d4310 3
a4312 1
			   mips_isa < 3 ? "addiu" : "daddiu",
d4316 1
a4316 1
			       offset_expr.X_add_symbol, (long) 0,
d4337 3
a4339 1
			       mips_isa < 3 ? "addu" : "daddu",
d4354 3
a4356 1
			   mips_isa < 3 ? "addiu" : "daddiu",
d4359 3
a4361 1
			   mips_isa < 3 ? "addu" : "daddu",
d4365 1
a4365 1
			       offset_expr.X_add_symbol, (long) 0,
d4420 3
a4422 1
		       mips_isa < 3 ? "addu" : "daddu",
d4448 1
a4448 1
					   ? mips_warn_about_macros
d4450 1
a4450 1
			    offset_expr.X_add_symbol, (long) 0,
d4459 3
a4461 1
			   mips_isa < 3 ? "addiu" : "daddiu",
d4467 1
a4467 1
					   ? mips_warn_about_macros
d4469 1
a4469 1
			    offset_expr.X_add_symbol, (long) 0,
d4494 3
a4496 1
			       mips_isa < 3 ? "addu" : "daddu",
d4510 3
a4512 1
			   mips_isa < 3 ? "addiu" : "daddiu",
d4515 3
a4517 1
			   mips_isa < 3 ? "addu" : "daddu",
d4524 1
a4524 1
					   ? mips_warn_about_macros
d4526 1
a4526 1
			    offset_expr.X_add_symbol, (long) 0,
d4549 3
a4551 1
			   mips_isa < 3 ? "addiu" : "daddiu",
d4569 3
a4571 1
			       mips_isa < 3 ? "addu" : "daddu",
d4583 3
a4585 1
			   mips_isa < 3 ? "addiu" : "daddiu",
d4589 3
a4591 1
			   mips_isa < 3 ? "addu" : "daddu",
d4602 3
a4604 1
		       mips_isa < 3 ? "addiu" : "daddiu",
d4612 3
a4614 1
		     mips_isa < 3 ? "addu" : "daddu",
d4646 1
a4646 1
	    as_warn ("MIPS PIC call to register other than $25");
d4651 1
a4651 1
	    as_warn ("No .cprestore pseudo-op used in PIC code");
d4656 3
a4658 1
			   mips_isa < 3 ? "lw" : "ld",
d4699 3
a4701 1
			   mips_isa < 3 ? "lw" : "ld",
d4708 2
a4709 1
			    offset_expr.X_add_symbol, (long) 0, (char *) NULL);
d4722 3
a4724 1
			   mips_isa < 3 ? "addu" : "daddu",
d4727 3
a4729 1
			   mips_isa < 3 ? "lw" : "ld",
d4737 2
a4738 1
			    offset_expr.X_add_symbol, (long) 0, (char *) NULL);
d4745 3
a4747 1
			   mips_isa < 3 ? "lw" : "ld",
d4755 3
a4757 1
		       mips_isa < 3 ? "addiu" : "daddiu",
d4763 1
a4763 1
	    as_warn ("No .cprestore pseudo-op used in PIC code");
d4766 1
a4766 1
	      if (mips_noreorder)
d4771 3
a4773 1
			   mips_isa < 3 ? "lw" : "ld",
d4807 1
d4812 1
d4817 1
d4822 1
d4834 5
d4840 1
d4845 1
d4850 1
d4892 1
d4897 1
d4902 1
d4907 1
d4923 5
d4930 1
d4934 1
d4939 1
d4951 1
d4967 1
a4967 1
	  as_bad ("expression too complex");
d4997 1
a4997 1
		  || nopic_need_relax (offset_expr.X_add_symbol))
d5006 4
a5009 3
					      (mips_warn_about_macros
					       || (used_at && mips_noat))),
				offset_expr.X_add_symbol, (long) 0,
d5022 1
a5022 1
		  || nopic_need_relax (offset_expr.X_add_symbol))
d5028 3
a5030 1
			       mips_isa < 3 ? "addu" : "daddu",
d5036 1
a5036 1
				offset_expr.X_add_symbol, (long) 0,
d5043 3
a5045 1
			   mips_isa < 3 ? "addu" : "daddu",
d5075 1
a5075 1
	    as_bad ("PIC code offset overflow (max 16 signed bits)");
d5078 3
a5080 1
		       mips_isa < 3 ? "lw" : "ld",
d5085 1
a5085 1
			offset_expr.X_add_symbol, (long) 0,
d5088 3
a5090 1
		       mips_isa < 3 ? "addiu" : "daddiu",
d5094 3
a5096 1
			 mips_isa < 3 ? "addu" : "daddu",
d5126 1
a5126 1
	    as_bad ("PIC code offset overflow (max 16 signed bits)");
d5135 3
a5137 1
		       mips_isa < 3 ? "addu" : "daddu",
d5140 3
a5142 1
		       mips_isa < 3 ? "lw" : "ld",
d5147 1
a5147 1
			offset_expr.X_add_symbol, (long) 0, (char *) NULL);
d5154 3
a5156 1
		       mips_isa < 3 ? "lw" : "ld",
d5162 3
a5164 1
		       mips_isa < 3 ? "addiu" : "daddiu",
d5168 3
a5170 1
			 mips_isa < 3 ? "addu" : "daddu",
d5193 3
a5195 1
			   mips_isa < 3 ? "addu" : "daddu",
d5239 40
d5289 3
a5291 1
		       mips_isa < 3 ? "lw" : "ld",
d5299 3
a5301 1
		       mips_isa < 3 ? "addiu" : "daddiu",
d5310 1
a5310 1
      if (mips_isa >= 3)
d5335 28
d5368 1
a5368 1
	  if (mips_isa >= 2)
d5383 3
a5385 1
			 mips_isa < 3 ? "lw" : "ld",
d5393 1
a5393 1
	  if (mips_isa >= 2)
d5411 5
d5420 1
a5420 1
      assert (mips_isa < 2);
d5422 1
a5422 1
		   byte_order == LITTLE_ENDIAN ? treg : treg + 1,
d5428 1
a5428 1
		   byte_order == LITTLE_ENDIAN ? treg + 1 : treg,
d5452 6
d5459 1
a5459 1
      if (mips_isa >= 2)
d5470 7
a5476 1
      if (mips_isa >= 2)
d5484 1
d5489 1
a5489 1
      if (mips_isa >= 3)
d5500 1
a5500 1
      if (mips_isa >= 3)
d5513 1
a5513 1
	  as_bad ("expression too complex");
d5520 2
a5521 1
      if (byte_order == LITTLE_ENDIAN)
d5542 1
a5542 1
	      || nopic_need_relax (offset_expr.X_add_symbol))
d5562 3
a5564 1
			       mips_isa < 3 ? "addu" : "daddu",
d5571 1
d5581 1
d5589 2
a5590 2
					  used_at && mips_noat),
			    offset_expr.X_add_symbol, (long) 0,
d5600 13
a5612 3
		 offset_expr when we build its instruction below.  */
	      offset_expr.X_add_number -= 8;
	      offset_expr.X_op = O_constant;
d5620 3
a5622 1
			   mips_isa < 3 ? "addu" : "daddu",
d5627 1
d5635 1
d5662 1
a5662 1
	    as_bad ("PIC code offset overflow (max 16 signed bits)");
d5669 3
a5671 1
		       mips_isa < 3 ? "lw" : "ld",
d5676 3
a5678 1
			 mips_isa < 3 ? "addu" : "daddu",
d5680 1
d5690 1
d5698 1
a5698 1
			   offset_expr.X_add_symbol, (long) 0,
d5725 1
a5725 1
	    as_bad ("PIC code offset overflow (max 16 signed bits)");
d5738 3
a5740 1
		       mips_isa < 3 ? "addu" : "daddu",
d5743 3
a5745 1
		       mips_isa < 3 ? "lw" : "ld",
d5750 3
a5752 1
			 mips_isa < 3 ? "addu" : "daddu",
d5754 1
d5764 1
d5774 1
a5774 1
			offset_expr.X_add_symbol, (long) 0,
d5782 3
a5784 1
		       mips_isa < 3 ? "lw" : "ld",
d5792 3
a5794 1
			   mips_isa < 3 ? "addu" : "daddu",
d5798 1
d5809 1
d5833 3
a5835 1
			   mips_isa < 3 ? "addu" : "daddu",
d5841 1
d5846 1
d5865 2
a5866 1
      assert (mips_isa < 3);
d5873 36
d5911 17
d5931 2
a5932 2
  if (mips_noat)
    as_warn ("Macro used $at after \".set noat\"");
d5952 1
d5994 6
d6003 3
a6005 2
      mips_emit_delays ();
      ++mips_noreorder;
d6007 2
d6011 1
a6011 1
		   "s,t", sreg, treg);
d6024 1
a6024 1
	  macro_build ((char *) NULL, &icnt, NULL, "break", "c", 6);
d6026 1
a6026 1
      --mips_noreorder;
d6030 6
d6039 3
a6041 2
      mips_emit_delays ();
      ++mips_noreorder;
d6043 2
d6047 1
a6047 1
		   "s,t", sreg, treg);
d6057 1
a6057 1
	  macro_build ((char *) NULL, &icnt, NULL, "break", "c", 6);
d6059 1
a6059 1
      --mips_noreorder;
d6071 2
d6089 2
d6099 6
a6104 1
      assert (mips_isa < 2);
d6108 1
a6108 1
		   byte_order == LITTLE_ENDIAN ? treg : treg + 1,
d6112 1
a6112 1
		   byte_order == LITTLE_ENDIAN ? treg + 1 : treg,
d6133 1
a6133 1
      if (imm_expr.X_add_number == 0)
d6141 1
a6141 1
	  as_warn ("Instruction %s: result is always false",
d6146 3
a6148 1
      if (imm_expr.X_add_number >= 0 && imm_expr.X_add_number < 0x10000)
d6154 3
a6156 1
      else if (imm_expr.X_add_number > -0x8000 && imm_expr.X_add_number < 0)
d6160 3
a6162 1
		       mips_isa < 3 ? "addiu" : "daddiu",
d6193 3
a6195 1
      if (imm_expr.X_add_number >= -0x8000 && imm_expr.X_add_number < 0x8000)
d6197 1
a6197 1
	  macro_build ((char *) NULL, &icnt, &expr1,
d6259 3
a6261 1
      if (imm_expr.X_add_number >= -0x8000 && imm_expr.X_add_number < 0x8000)
d6272 3
a6274 1
      if (imm_expr.X_add_number >= -0x8000 && imm_expr.X_add_number < 0x8000)
d6302 1
a6302 1
      if (imm_expr.X_add_number == 0)
d6310 1
a6310 1
	  as_warn ("Instruction %s: result is always true",
d6313 3
a6315 1
		       mips_isa < 3 ? "addiu" : "daddiu",
d6319 3
a6321 1
      if (imm_expr.X_add_number >= 0 && imm_expr.X_add_number < 0x10000)
d6327 3
a6329 1
      else if (imm_expr.X_add_number > -0x8000 && imm_expr.X_add_number < 0)
d6333 3
a6335 1
		       mips_isa < 3 ? "addiu" : "daddiu",
d6354 3
a6356 1
      if (imm_expr.X_add_number > -0x8000 && imm_expr.X_add_number <= 0x8000)
d6373 3
a6375 1
      if (imm_expr.X_add_number > -0x8000 && imm_expr.X_add_number <= 0x8000)
d6413 1
a6413 1
      assert (mips_isa < 2);
d6421 2
a6422 2
      mips_emit_delays ();
      ++mips_noreorder;
d6439 1
a6439 1
      --mips_noreorder;
d6449 1
a6449 1
	as_bad ("operand overflow");
d6451 1
a6451 1
      if (byte_order == LITTLE_ENDIAN)
d6455 1
a6455 1
      if (byte_order == LITTLE_ENDIAN)
d6476 2
a6477 2
	as_bad ("operand overflow");
      if (byte_order == LITTLE_ENDIAN)
d6481 1
a6481 1
      if (byte_order == LITTLE_ENDIAN)
d6502 3
a6504 1
		     mips_isa < 3 ? "addu" : "daddu",
d6506 1
a6506 1
      if (byte_order == LITTLE_ENDIAN)
d6512 1
a6512 1
      if (byte_order == LITTLE_ENDIAN)
d6525 3
a6527 1
		     mips_isa < 3 ? "addu" : "daddu",
d6529 1
a6529 1
      if (byte_order == BIG_ENDIAN)
d6534 1
a6534 1
      if (byte_order == BIG_ENDIAN)
d6548 2
a6549 2
	as_bad ("operand overflow");
      if (byte_order == BIG_ENDIAN)
d6554 1
a6554 1
      if (byte_order == BIG_ENDIAN)
d6573 2
a6574 2
	as_bad ("operand overflow");
      if (byte_order == LITTLE_ENDIAN)
d6578 1
a6578 1
      if (byte_order == LITTLE_ENDIAN)
d6599 3
a6601 1
		     mips_isa < 3 ? "addu" : "daddu",
d6603 1
a6603 1
      if (byte_order == LITTLE_ENDIAN)
d6609 1
a6609 1
      if (byte_order == LITTLE_ENDIAN)
d6621 3
a6623 1
		     mips_isa < 3 ? "addu" : "daddu",
d6625 1
a6625 1
      if (byte_order == LITTLE_ENDIAN)
d6631 1
a6631 1
      if (byte_order == LITTLE_ENDIAN)
d6637 1
a6637 1
      if (byte_order == LITTLE_ENDIAN)
d6650 3
a6652 1
      as_bad ("Macro %s not implemented yet", ip->insn_mo->name);
d6655 2
a6656 2
  if (mips_noat)
    as_warn ("Macro used $at after \".set noat\"");
d6659 1
a6659 4
/* This routine assembles an instruction into its binary format.  As a
   side effect, it sets one of the global variables imm_reloc or
   offset_reloc to the type of relocation to do if one of the operands
   is an address expression.  */
d6662 334
a6995 2
mips_ip (str, ip)
     char *str;
d7006 2
d7011 4
a7014 1
  for (s = str; islower (*s) || (*s >= '0' && *s <= '3') || *s == '6' || *s == '.'; ++s)
d7016 5
a7020 1
  switch (*s)
d7022 25
a7046 2
    case '\0':
      break;
d7048 1
a7048 1
    case ' ':
d7050 5
a7054 1
      break;
d7056 1
a7056 7
    default:
      as_fatal ("Unknown opcode: `%s'", str);
    }
  if ((insn = (struct mips_opcode *) hash_find (op_hash, str)) == NULL)
    {
      insn_error = "unrecognized opcode";
      return;
d7058 1
d7062 1
a7062 1
      int insn_isa;
d7066 12
a7077 18
      if (insn->pinfo == INSN_MACRO)
	insn_isa = insn->match;
      else if ((insn->pinfo & INSN_ISA) == INSN_ISA2)
	insn_isa = 2;
      else if ((insn->pinfo & INSN_ISA) == INSN_ISA3)
	insn_isa = 3;
      else if ((insn->pinfo & INSN_ISA) == INSN_ISA4)
	insn_isa = 4;
      else
	insn_isa = 1;

      if (insn_isa > mips_isa
	  || ((insn->pinfo & INSN_ISA) == INSN_4650
	      && ! mips_4650)
	  || ((insn->pinfo & INSN_ISA) == INSN_4010
	      && ! mips_4010)
	  || ((insn->pinfo & INSN_ISA) == INSN_4100
	      && ! mips_4100))
a7084 2
	  if (insn_isa <= mips_isa)
	    insn_error = "opcode not supported on this processor";
d7088 4
a7091 2

	      sprintf (buf, "opcode requires -mips%d or greater", insn_isa);
d7093 1
a7094 1
	  return;
d7133 1
a7133 1
	      /* handle optional base register.
d7136 4
a7139 3
	      /* this is dependent on the next operand specifier
		 is a 'b' for base register */
	      assert (args[1] == 'b');
d7159 1
a7159 1
		  as_warn ("Improper shift amount (%ld)",
d7179 1
d7186 1
a7186 1
		  as_warn ("Invalid value for `%s' (%lu)",
d7203 5
a7207 2
		as_warn ("Illegal break code (%ld)",
			 (long) imm_expr.X_add_number);
d7213 14
d7231 1
a7231 1
		as_warn ("Illegal syscall code (%ld)",
d7243 1
a7243 1
                  as_warn ("Coproccesor code > 25 bits (%ld)",
d7252 14
d7280 2
a7281 1
		  if (isdigit (s[1]))
d7291 1
a7291 1
		      while (isdigit (*s));
d7293 1
a7293 1
			as_bad ("Invalid register number (%d)", regno);
d7329 24
d7357 1
a7357 1
		      && ! mips_noat
d7360 1
a7360 1
		    as_warn ("Used $at without \".set noat\"");
d7376 3
d7411 5
d7440 1
a7440 1
	      if (s[0] == '$' && s[1] == 'f' && isdigit (s[2]))
d7450 1
a7450 1
		  while (isdigit (*s));
d7453 1
a7453 1
		    as_bad ("Invalid float register number (%d)", regno);
d7456 1
a7456 1
		      && mips_isa < 3
d7463 1
a7463 1
		    as_warn ("Float register should be even, was %d",
d7498 2
d7515 1
a7515 1
		insn_error = "absolute expression required";
d7576 1
a7576 1
		    as_bad ("Bad floating point constant: %s", err);
d7587 3
a7589 2
			    || g_switch_value < 4)
			))
d7592 42
a7633 6
		    if (byte_order == LITTLE_ENDIAN)
		      imm_expr.X_add_number =
			(((((((int) temp[3] << 8)
			     | temp[2]) << 8)
			   | temp[1]) << 8)
			 | temp[0]);
d7635 18
a7652 5
		      imm_expr.X_add_number =
			(((((((int) temp[0] << 8)
			     | temp[1]) << 8)
			   | temp[2]) << 8)
			 | temp[3]);
d7667 2
a7668 1
			if (USE_GLOBAL_POINTER_OPT && g_switch_value >= 8)
d7672 4
a7675 1
			newname = RDATA_SECTION_NAME;
d7690 3
a7692 2
		    frag_align (*args == 'l' ? 2 : 3, 0);
		    if (OUTPUT_FLAVOR == bfd_target_elf_flavour)
d7697 1
a7697 1
		      as_bad ("Can't use floating point insn in this section");
d7736 2
d7751 1
a7751 1
			insn_error = "absolute expression required";
d7753 1
a7753 1
			as_bad ("16 bit expression not in range 0..65535");
d7782 1
a7782 1
			  && mips_isa >= 3
d7790 1
a7790 1
			insn_error = "absolute expression required";
d7792 1
a7792 1
			as_bad ("16 bit expression not in range -32768..32767");
a7817 1
		      || now_seg != text_section
d7819 1
a7819 1
			  != text_section)))
a7821 1
	      offset_reloc = BFD_RELOC_LO16;
d7824 2
a7825 1
		  assert (offset_expr.X_op == O_constant);
d7829 1
a7840 4
	      if (imm_expr.X_op == O_constant
		  && (imm_expr.X_add_number < 0
		      || imm_expr.X_add_number >= 0x10000))
		as_bad ("lui expression not in range 0..65535");
d7857 2
d7860 4
d7885 1
a7885 1
	      while (isdigit (*s));
d7887 1
a7887 1
		as_bad ("invalid condition code register $fcc%d", regno);
d7895 1
a7895 1
	      fprintf (stderr, "bad char = '%c'\n", *args);
d7908 1
a7908 1
      insn_error = "illegal operands";
d7913 6
a7918 2
#define LP '('
#define RP ')'
d7920 2
a7921 3
static int
my_getSmallExpression (ep, str)
     expressionS *ep;
d7923 1
d7925 12
a7936 2
  char *sp;
  int c = 0;
d7938 3
a7940 8
  if (*str == ' ')
    str++;
  if (*str == LP
      || (*str == '%' &&
	  ((str[1] == 'h' && str[2] == 'i')
	   || (str[1] == 'H' && str[2] == 'I')
	   || (str[1] == 'l' && str[2] == 'o'))
	  && str[3] == LP))
d7942 16
a7957 3
      if (*str == LP)
	c = 0;
      else
d7959 692
a8650 2
	  c = str[1];
	  str += 3;
d8663 1
a8663 1
	  if (isdigit (sp[-2]))
d8665 1
a8665 1
	      for (sp -= 3; sp >= str && isdigit (*sp); sp--)
d8727 13
d8770 1
a8770 1
      return "bad call to md_atof";
d8779 1
a8779 1
  if (byte_order == LITTLE_ENDIAN)
d8805 4
a8808 13
  switch (byte_order)
    {
    case LITTLE_ENDIAN:
      number_to_chars_littleendian (buf, val, n);
      break;

    case BIG_ENDIAN:
      number_to_chars_bigendian (buf, val, n);
      break;

    default:
      internalError ();
    }
d8849 17
d8881 5
d8929 1
a8929 1
	mips_optimize = 0;
d8933 1
a8933 3
      mips_isa = 1;
      if (mips_cpu == -1)
	mips_cpu = 3000;
d8937 1
a8937 3
      mips_isa = 2;
      if (mips_cpu == -1)
	mips_cpu = 6000;
d8941 1
a8941 3
      mips_isa = 3;
      if (mips_cpu == -1)
	mips_cpu = 4000;
d8945 1
a8945 3
      mips_isa = 4;
      if (mips_cpu == -1)
	mips_cpu = 8000;
d8994 2
a9003 1
                  {
d9005 2
a9006 3
                    if (mips_4100 < 0)
                      mips_4100 = 1;
                  }
a9013 1
		  {
a9014 3
		    if (mips_4650 < 0)
		      mips_4650 = 1;
		  }
d9016 1
a9016 5
		  {
		    mips_cpu = 4010;
		    if (mips_4010 < 0)
		      mips_4010 = 1;
		  }
d9046 5
a9050 1
	    if (sv && mips_cpu != 4300 && mips_cpu != 4100 && mips_cpu != 5000)
d9052 1
a9052 1
		as_bad ("ignoring invalid leading 'v' in -mcpu=%s switch", arg);
d9058 1
a9058 1
		as_bad ("invalid architecture -mcpu=%s", arg);
d9066 1
a9066 1
      mips_4650 = 1;
a9069 1
      mips_4650 = 0;
d9073 1
a9073 1
      mips_4010 = 1;
a9076 1
      mips_4010 = 0;
d9080 1
a9080 1
      mips_4100 = 1;
d9084 18
a9101 1
      mips_4100 = 0;
d9108 1
a9108 1
	  as_bad ("-G may not be used with embedded PIC code");
d9120 1
a9120 1
	  as_bad ("-call_shared is supported only for ELF format");
d9126 1
a9126 1
	  as_bad ("-G may not be used with SVR4 PIC code");
d9135 1
a9135 1
	  as_bad ("-non_shared is supported only for ELF format");
d9151 1
a9151 1
	  as_bad ("-G is not supported for this configuration");
d9156 1
a9156 1
	  as_bad ("-G may not be used with SVR4 or embedded PIC code");
d9180 1
a9180 1
	  as_fatal ("No compiled in support for 64 bit object file format");
d9186 39
d9232 32
d9268 3
a9270 1
  fprintf(stream, "\
d9277 44
a9320 15
			implicitly with the gp register [default 8]\n");
  fprintf(stream, "\
-mips1, -mcpu=r{2,3}000	generate code for r2000 and r3000\n\
-mips2, -mcpu=r6000	generate code for r6000\n\
-mips3, -mcpu=r4000	generate code for r4000\n\
-mips4, -mcpu=r8000	generate code for r8000\n\
-mcpu=vr4300		generate code for vr4300\n\
-mcpu=vr4100		generate code for vr4100\n\
-m4650			permit R4650 instructions\n\
-no-m4650		do not permit R4650 instructions\n\
-m4010			permit R4010 instructions\n\
-no-m4010		do not permit R4010 instructions\n\
-m4100                  permit VR4100 instructions\n\
-no-m4100		do not permit VR4100 instructions\n");
  fprintf(stream, "\
d9324 1
a9324 1
--break, --no-trap	break exception on div by 0 and mult overflow\n");
d9326 1
a9326 1
  fprintf(stream, "\
d9331 1
a9331 1
-64			create 64 bit object file\n");
d9334 1
a9334 1

d9338 3
a9340 4
  if (target_big_endian)
    byte_order = BIG_ENDIAN;
  else
    byte_order = LITTLE_ENDIAN;
d9342 1
a9342 1

d9376 1
a9376 1
      if (byte_order == BIG_ENDIAN)
d9383 1
a9383 1
    as_bad ("Unsupported reloc size %d", nbytes);
d9391 18
d9482 2
d9486 2
a9487 1
			   "Unmatched %%hi reloc");
d9499 1
d9514 4
d9537 3
a9539 1
	  || fixP->fx_r_type == BFD_RELOC_64);
d9542 46
d9607 1
d9610 1
a9610 1
		      "Invalid PC relative reloc");
d9614 7
d9623 7
a9629 2
	 do everything here rather than in bfd_perform_relocation.  */
      if ((fixP->fx_addsy->bsym->flags & BSF_SECTION_SYM) == 0)
d9641 1
a9641 1
      if (byte_order == BIG_ENDIAN)
d9648 7
a9654 2
	 do everything here rather than in bfd_perform_relocation.  */
      if ((fixP->fx_addsy->bsym->flags & BSF_SECTION_SYM) == 0)
d9657 1
a9657 1
      if (byte_order == BIG_ENDIAN)
d9677 1
a9677 1
	      if (byte_order == BIG_ENDIAN)
d9691 1
d9720 1
a9720 1
			  "relocation overflow");
d9722 1
a9722 1
	  if (byte_order == BIG_ENDIAN)
d9734 12
a9745 3
      if (value & 0x3)
	as_warn_where (fixP->fx_file, fixP->fx_line,
		       "Branch to odd address (%lx)", value);
d9750 4
a9753 14
      switch (byte_order)
	{
	case LITTLE_ENDIAN:
	  insn = (buf[3] << 24) | (buf[2] << 16) | (buf[1] << 8) | buf[0];
	  break;

	case BIG_ENDIAN:
	  insn = (buf[0] << 24) | (buf[1] << 16) | (buf[2] << 8) | buf[3];
	  break;

	default:
	  internalError ();
	  return 0;
	}
d9790 1
a9790 1
			    "Relocation overflow");
d9797 12
d9900 1
a9900 1
  printf ("%08lx  UNDEFINED\n", oc);
d9927 2
a9928 2
  mips_emit_delays ();
  frag_align (to, fill);
d9933 1
a9933 1
      label->sy_frag = frag_now;
d9963 1
a9963 1
    as_bad ("Alignment too large: %d. assumed.", temp = max_alignment);
d9966 1
a9966 1
      as_warn ("Alignment negative: 0 assumed.");
d9979 2
a9980 1
      mips_align (temp, (int) temp_fill, insn_label);
d9993 2
a9994 2
  mips_emit_delays ();
  insn_label = NULL;
d10010 11
a10020 1
  mips_emit_delays ();
d10047 2
a10048 1
	      bfd_set_section_alignment (stdoutput, seg, 4);
d10054 1
a10054 1
	  as_bad ("No read only data section in this object file format");
d10069 2
a10070 1
	      bfd_set_section_alignment (stdoutput, seg, 4);
d10077 1
a10077 1
	  as_bad ("Global pointers not supported; recompile -G 0");
d10098 2
a10099 2
  label = insn_label;
  mips_emit_delays ();
d10102 1
a10102 1
  insn_label = NULL;
d10112 1
a10112 1
  label = insn_label;
d10114 1
a10114 1
  mips_emit_delays ();
d10117 6
a10122 4
    if (type == 'd')
      mips_align (3, 0, label);
    else
      mips_align (2, 0, label);
d10124 1
a10124 1
  insn_label = NULL;
d10163 1
a10163 1
	as_bad ("%s: no such section", secname);
d10170 1
a10170 1
  symbolP->bsym->flags |= flag;
d10200 1
a10200 1
	as_bad (".option pic%d not supported", i);
d10205 1
a10205 1
	    as_warn ("-G may not be used with SVR4 PIC code");
d10211 1
a10211 1
    as_warn ("Unrecognized option \"%s\"", opt);
d10217 12
d10242 1
a10242 1
      if (mips_noreorder)
d10244 6
a10249 2
	  prev_insn_unreordered = 1;
	  prev_prev_insn_unreordered = 1;
d10251 1
a10251 1
      mips_noreorder = 0;
d10255 2
a10256 2
      mips_emit_delays ();
      mips_noreorder = 1;
d10261 1
a10261 1
      mips_noat = 0;
d10265 1
a10265 1
      mips_noat = 1;
d10269 1
a10269 1
      mips_warn_about_macros = 0;
d10273 3
a10275 3
      if (mips_noreorder == 0)
	as_bad ("`noreorder' must be set before `nomacro'");
      mips_warn_about_macros = 1;
d10279 1
a10279 1
      mips_nomove = 0;
d10283 1
a10283 1
      mips_nomove = 1;
d10287 1
a10287 1
      mips_nobopt = 0;
d10291 1
a10291 1
      mips_nobopt = 1;
d10293 6
d10307 1
a10307 1
	mips_isa = file_mips_isa;
d10309 24
a10332 1
	as_bad ("unknown ISA level");
d10334 19
a10352 1
	mips_isa = isa;
d10356 1
a10356 1
      as_warn ("Tried to set unrecognized symbol: %s\n", name);
d10373 1
a10373 1
	as_warn ("-G may not be used with SVR4 PIC code");
d10405 2
a10406 2
  if (mips_noreorder == 0)
    as_warn (".cpload not in noreorder section");
d10414 1
a10414 1
  ex.X_add_symbol->bsym->flags |= BSF_OBJECT;
d10452 3
a10454 1
	       mips_isa < 3 ? "sw" : "sd",
d10478 2
a10479 2
  label = insn_label;
  mips_emit_delays ();
d10482 1
a10482 1
  insn_label = NULL;
d10488 1
a10488 1
      as_bad ("Unsupported use of .gpword");
d10520 3
a10522 1
	       mips_isa < 3 ? "addu" : "daddu",
d10528 84
d10625 1
a10625 1
      as_warn ("expected `$'");
d10633 1
a10633 1
	  as_warn ("Bad register number");
d10649 1
a10649 1
	  as_warn ("Unrecognized register name");
d10669 6
a10674 3
     byte boundary.  */
  if (align > 16)
    align = 16;
d10686 1
a10686 1
nopic_need_relax (sym)
d10688 1
d10715 1
a10715 1
      else if (! S_IS_DEFINED (sym)
d10717 70
a10786 7
#ifndef NO_ECOFF_DEBUGGING
		   || (sym->ecoff_extern_size != 0
		       && sym->ecoff_extern_size <= g_switch_value)
#endif
		   || (S_GET_VALUE (sym) != 0
		       && S_GET_VALUE (sym) <= g_switch_value)))
	change = 0;
d10789 9
a10797 1
	  const char *segname;
d10799 20
a10818 7
	  segname = segment_name (S_GET_SEGMENT (sym));
	  assert (strcmp (segname, ".lit8") != 0
		  && strcmp (segname, ".lit4") != 0);
	  change = (strcmp (segname, ".sdata") != 0
		    && strcmp (segname, ".sbss") != 0);
	}
      return change;
a10820 1
    /* We are not optimizing for the GP register.  */
d10822 143
d10967 4
a10970 3
/* Estimate the size of a frag before relaxing.  We are not really
   relaxing here, and the final size is encoded in the subtype
   information.  */
d10980 14
d10996 1
a10996 1
      change = nopic_need_relax (fragp->fr_symbol);
d11000 20
a11019 1
      asection *symsec = fragp->fr_symbol->bsym->section;
d11040 1
a11040 1
	as_warn ("AT used after \".set noat\" or macro used after \".set nomacro\"");
d11049 27
d11091 2
a11092 1
  reloc->sym_ptr_ptr = &fixp->fx_addsy->bsym;
d11103 1
a11103 1
	as_fatal ("Double check fx_r_type in tc-mips.c:tc_gen_reloc");
d11106 2
d11111 1
a11111 1
      if (fixp->fx_addsy->bsym->flags & BSF_SECTION_SYM)
d11123 1
a11123 1
      if (fixp->fx_addsy->bsym->flags & BSF_SECTION_SYM)
a11131 2
  else if (fixp->fx_pcrel == 0)
    reloc->addend = fixp->fx_addnumber;
d11155 2
d11180 2
a11181 1
      reloc2->sym_ptr_ptr = &fixp->fx_addsy->bsym;
d11223 8
d11262 1
a11262 1
			"Cannot make %s relocation PC relative",
d11270 2
a11271 1
  if (OUTPUT_FLAVOR == bfd_target_ecoff_flavour
d11281 1
a11281 1
		    "Can not represent %s relocation in this object file format",
d11289 29
d11329 110
a11438 2
  if (fragp->fr_opcode == NULL)
    return;
d11440 5
a11444 3
  old = RELAX_OLD (fragp->fr_subtype);
  new = RELAX_NEW (fragp->fr_subtype);
  fixptr = fragp->fr_literal + fragp->fr_fix;
d11446 2
a11447 2
  if (new > 0)
    memcpy (fixptr - old, fixptr, new);
d11449 14
a11462 1
  fragp->fr_fix += new - old;
d11465 2
d11475 1
a11475 2
  insn_label = sym;
}
d11477 3
a11479 13
/* Decide whether a label is local.  This is called by LOCAL_LABEL.
   In order to work with gcc when using mips-tfile, we must keep all
   local labels.  However, in other cases, we want to discard them,
   since they are useless.  */

int
mips_local_label (name)
     const char *name;
{
#ifndef NO_ECOFF_DEBUGGING
  if (ECOFF_DEBUGGING
      && mips_debug != 0
      && ! ecoff_debugging_seen)
d11481 2
a11482 5
      /* We were called with -g, but we didn't see any debugging
         information.  That may mean that gcc is smuggling debugging
         information through to mips-tfile, in which case we must
         generate all local labels.  */
      return 0;
a11483 1
#endif
d11485 3
a11487 3
  /* Here it's OK to discard local labels.  */

  return name[0] == '$';
d11536 18
a11557 21
/* These functions should really be defined by the object file format,
   since they are related to debugging information.  However, this
   code has to work for the a.out format, which does not define them,
   so we provide simple versions here.  These don't actually generate
   any debugging information, but they do simple checking and someday
   somebody may make them useful.  */

typedef struct loc
{
  struct loc *loc_next;
  unsigned long loc_fileno;
  unsigned long loc_lineno;
  unsigned long loc_offset;
  unsigned short loc_delta;
  unsigned short loc_count;
#if 0
  fragS *loc_frag;
#endif
}
locS;

d11560 8
a11567 13
    struct proc *proc_next;
    struct symbol *proc_isym;
    struct symbol *proc_end;
    unsigned long proc_reg_mask;
    unsigned long proc_reg_offset;
    unsigned long proc_fpreg_mask;
    unsigned long proc_fpreg_offset;
    unsigned long proc_frameoffset;
    unsigned long proc_framereg;
    unsigned long proc_pcreg;
    locS *proc_iline;
    struct file *proc_file;
    int proc_index;
d11571 30
a11600 10
typedef struct file
  {
    struct file *file_next;
    unsigned long file_fileno;
    struct symbol *file_symbol;
    struct symbol *file_end;
    struct proc *file_proc;
    int file_numprocs;
  }
fileS;
d11602 2
a11603 4
static struct obstack proc_frags;
static procS *proc_lastP;
static procS *proc_rootP;
static int numprocs;
a11607 1
  obstack_begin (&proc_frags, 0x2000);
d11614 2
a11615 2
  if (proc_lastP && proc_lastP->proc_end == NULL)
    as_warn ("missing `.end' at end of assembly");
d11629 2
a11630 2
  if (!isdigit (*input_line_pointer))
    as_bad ("Expected simple number.");
d11636 1
a11636 1
	  while (isxdigit (*input_line_pointer))
d11646 1
a11646 1
	  while (isdigit (*input_line_pointer))
d11654 1
a11654 1
  if (!isdigit (*input_line_pointer))
d11656 1
a11656 1
      printf (" *input_line_pointer == '%c' 0x%02x\n",
d11658 1
a11658 1
      as_warn ("Invalid number");
d11661 1
a11661 1
  while (isdigit (*input_line_pointer))
d11686 1
a11686 1
s_mipsend (x)
d11690 1
d11699 17
a11715 3
  if (now_seg != text_section)
    as_warn (".end not in text section");
  if (!proc_lastP)
d11717 2
a11718 1
      as_warn (".end and no .ent seen yet.");
d11725 2
a11726 2
      if (strcmp (S_GET_NAME (p), S_GET_NAME (proc_lastP->proc_isym)))
	as_warn (".end symbol does not match .ent symbol.");
d11728 14
d11743 28
a11770 1
  proc_lastP->proc_end = (symbolS *) 1;
d11776 1
a11776 1
s_ent (aent)
a11779 1
  procS *procP;
d11781 1
d11787 2
a11788 1
  if (isdigit (*input_line_pointer) || *input_line_pointer == '-')
a11789 2
  if (now_seg != text_section)
    as_warn (".ent or .aent not in text section.");
d11791 17
a11807 2
  if (!aent && proc_lastP && proc_lastP->proc_end == NULL)
    as_warn ("missing `.end'");
d11811 7
a11817 16
      procP = (procS *) obstack_alloc (&proc_frags, sizeof (*procP));
      procP->proc_isym = symbolP;
      procP->proc_reg_mask = 0;
      procP->proc_reg_offset = 0;
      procP->proc_fpreg_mask = 0;
      procP->proc_fpreg_offset = 0;
      procP->proc_frameoffset = 0;
      procP->proc_framereg = 0;
      procP->proc_pcreg = 0;
      procP->proc_end = NULL;
      procP->proc_next = NULL;
      if (proc_lastP)
	proc_lastP->proc_next = procP;
      else
	proc_rootP = procP;
      proc_lastP = procP;
d11820 1
d11824 5
a11828 1
/* The .frame directive.  */
a11829 1
#if 0
d11831 2
a11832 2
s_frame (x)
     int x;
d11834 10
a11843 5
  char str[100];
  symbolS *symP;
  int frame_reg;
  int frame_off;
  int pcreg;
d11845 1
a11845 7
  frame_reg = tc_get_register (1);
  if (*input_line_pointer == ',')
    input_line_pointer++;
  frame_off = get_absolute_expression ();
  if (*input_line_pointer == ',')
    input_line_pointer++;
  pcreg = tc_get_register (0);
d11847 8
a11854 19
  /* bob third eye */
  assert (proc_rootP);
  proc_rootP->proc_framereg = frame_reg;
  proc_rootP->proc_frameoffset = frame_off;
  proc_rootP->proc_pcreg = pcreg;
  /* bob macho .frame */

  /* We don't have to write out a frame stab for unoptimized code. */
  if (!(frame_reg == FP && frame_off == 0))
    {
      if (!proc_lastP)
	as_warn ("No .ent for .frame to use.");
      (void) sprintf (str, "R%d;%d", frame_reg, frame_off);
      symP = symbol_new (str, N_VFP, 0, frag_now);
      S_SET_TYPE (symP, N_RMASK);
      S_SET_OTHER (symP, 0);
      S_SET_DESC (symP, 0);
      symP->sy_forward = proc_lastP->proc_isym;
      /* bob perhaps I should have used pseudo set */
d11856 4
d11861 3
a11864 1
#endif
d11866 5
a11870 1
/* The .fmask and .mask directives.  */
a11871 1
#if 0
d11873 1
a11873 1
s_mask (reg_type)
d11876 17
a11892 5
  char str[100], *strP;
  symbolS *symP;
  int i;
  unsigned int mask;
  int off;
a11893 3
  mask = get_number ();
  if (*input_line_pointer == ',')
    input_line_pointer++;
a11895 2
  /* bob only for coff */
  assert (proc_rootP);
d11898 2
a11899 2
      proc_rootP->proc_fpreg_mask = mask;
      proc_rootP->proc_fpreg_offset = off;
d11903 2
a11904 2
      proc_rootP->proc_reg_mask = mask;
      proc_rootP->proc_reg_offset = off;
d11907 4
a11910 25
  /* bob macho .mask + .fmask */

  /* We don't have to write out a mask stab if no saved regs. */
  if (!(mask == 0))
    {
      if (!proc_lastP)
	as_warn ("No .ent for .mask to use.");
      strP = str;
      for (i = 0; i < 32; i++)
	{
	  if (mask % 2)
	    {
	      sprintf (strP, "%c%d,", reg_type, i);
	      strP += strlen (strP);
	    }
	  mask /= 2;
	}
      sprintf (strP, ";%d,", off);
      symP = symbol_new (str, N_RMASK, 0, frag_now);
      S_SET_TYPE (symP, N_RMASK);
      S_SET_OTHER (symP, 0);
      S_SET_DESC (symP, 0);
      symP->sy_forward = proc_lastP->proc_isym;
      /* bob perhaps I should have used pseudo set */
    }
a11911 1
#endif
@


1.4
log
@Merge to Cygnus 961112 + add some support (not ready) for shared libs
@
text
@d2028 2
a2029 2
      shift = 32;
      hi32.X_add_number >>= shift;
a2030 2
      if ((hi32.X_add_number & 0x80000000) != 0)
	hi32.X_add_number |= ~ (offsetT) 0xffffffff;
@


1.3
log
@Merge the Cygnus 960904 sources
@
text
@a27 1
#include "libiberty.h"
d51 1
d664 7
d1107 1
a1107 2
	     insert two NOPS.  The R4650, VR4100 and VR4300 have
	     interlocks.  */
d1117 1
a1117 2
	     insert a NOP.  The R4650, VR4100 and VR4300 have
	     interlocks.  */
d1128 4
a1131 5
	 or LO register and then writing to it (except on the R4650,
	 VR4100, and VR4300 which have interlocks).  If we are not
	 already emitting a NOP instruction, we must check for these
	 cases compared to the instruction previous to the previous
	 instruction.  */
d1214 3
d1419 7
a1425 1
				    0)))
d1880 76
d2002 2
a2003 2
	       || (mips_isa < 3
		   && (ep->X_add_number &~ 0xffffffff) == 0))
a2012 13
      else
	{
	  /* 32 bit value with high bit set being loaded into a 64 bit
             register.  We can't use lui, because that would
             incorrectly set the 32 high bits.  */
	  generic_bignum[3] = 0;
	  generic_bignum[2] = 0;
	  generic_bignum[1] = (ep->X_add_number >> 16) & 0xffff;
	  generic_bignum[0] = ep->X_add_number & 0xffff;
	  tmp.X_op = O_big;
	  tmp.X_add_number = 4;
	  ep = &tmp;
	}
d2070 53
d2144 1
a2144 1
                       reg, 32);
d5238 9
a5246 1
	  insn_error = "opcode not supported on this processor";
d5544 6
a5549 4
		      && ! (strcmp (str, "mtc1") == 0 ||
			    strcmp (str, "mfc1") == 0 ||
			    strcmp (str, "lwc1") == 0 ||
			    strcmp (str, "swc1") == 0))
d5901 5
a5905 3
	      my_getExpression (&imm_expr, s);
	      check_absolute_expr (ip, &imm_expr);
              if ((unsigned long) imm_expr.X_add_number > 7)
d5907 3
a5909 3
                  as_warn ("Condition code > 7 (%ld)",
			   (long) imm_expr.X_add_number);
                  imm_expr.X_add_number &= 7;
d5911 3
d5915 1
a5915 1
		ip->insn_opcode |= imm_expr.X_add_number << OP_SH_BCC;
d5917 1
a5917 3
		ip->insn_opcode |= imm_expr.X_add_number << OP_SH_CCC;
              imm_expr.X_op = O_absent;
              s = expr_end;
d6323 7
d6350 1
a6350 1
	    if (sv && mips_cpu != 4300 && mips_cpu != 4100)
d6555 1
d6564 1
d6693 3
a6695 1
  assert (fixP->fx_size == 4 || fixP->fx_r_type == BFD_RELOC_16);
d6754 29
d7860 3
d7866 1
@


1.2
log
@Bring Cygnus versions into the trunk, keeping our local patches
@
text
@d73 1
d75 1
d149 4
d697 1
a697 1
  if (mips_4650 || mips_4010 || mips_4100)
d702 5
d1012 2
a1013 1
	  && ((prev_pinfo & INSN_LOAD_COPROC_DELAY)
d1030 2
a1031 1
	       && ((prev_pinfo & INSN_COPROC_MOVE_DELAY)
d1084 2
a1085 1
	       && (prev_pinfo & INSN_WRITE_COND_CODE))
d1100 2
a1101 1
	     insert two NOPS.  The R4650 and VR4100 have interlocks.  */
d1111 2
a1112 1
	     insert a NOP.  The R4650 and VR4100 have interlocks.  */
d1124 3
a1126 3
	 and VR4100 which have interlocks).  If we are not already
	 emitting a NOP instruction, we must check for these cases
	 compared to the instruction previous to the previous
d1132 2
a1133 1
	       && (pinfo & INSN_READ_COND_CODE))
d1152 2
d1156 3
d1161 1
d1175 1
d1182 5
d1524 5
a1528 4
	   && (prev_insn.insn_mo->pinfo
	       & (INSN_LOAD_COPROC_DELAY
		  | INSN_COPROC_MOVE_DELAY
		  | INSN_WRITE_COND_CODE)))
d1540 2
a1541 1
	       && (prev_insn.insn_mo->pinfo & INSN_WRITE_COND_CODE))
d1548 2
a1549 1
		&& (prev_prev_insn.insn_mo->pinfo & INSN_WRITE_COND_CODE))
d5314 4
a5317 1
		  if (regno == AT && ! mips_noat)
d5459 3
a5461 2
	      if (imm_expr.X_op != O_big)
		check_absolute_expr (ip, &imm_expr);
d5612 1
a5612 1
	      if (c)
a5627 2
	      else if (imm_expr.X_op != O_big)
		check_absolute_expr (ip, &imm_expr);
d5630 4
a5633 3
		  if (imm_expr.X_op == O_big
		      || imm_expr.X_add_number < 0
		      || imm_expr.X_add_number >= 0x10000)
d5638 5
a5642 1
		      as_bad ("16 bit expression not in range 0..65535");
d5665 4
a5668 3
		  if (imm_expr.X_op == O_big
		      || imm_expr.X_add_number < -0x8000
		      || imm_expr.X_add_number >= max
d5677 5
a5681 1
		      as_bad ("16 bit expression not in range -32768..32767");
d7398 8
d7527 1
d7660 32
d7696 1
a7696 1
      && fixp->fx_r_type == BFD_RELOC_16_PCREL_S2
d7700 1
a7700 1
    reloc->howto = bfd_reloc_type_lookup (stdoutput, fixp->fx_r_type);
d7705 2
a7706 1
		    "Can not represent relocation in this object file format");
@


1.1
log
@Initial revision
@
text
@d2 1
a2 1
   Copyright (C) 1993, 1995 Free Software Foundation, Inc.
d21 3
a23 2
   along with GAS; see the file COPYING.  If not, write to
   the Free Software Foundation, 59 Temple Place - Suite 330, Boston, MA 02111-1307, USA.  */
d86 4
d101 3
a103 1
      return target_big_endian ? "elf32-bigmips" : "elf32-littlemips";
d170 4
d301 25
d414 1
d418 2
a419 1
				 bfd_reloc_code_real_type r));
a447 2
static void s_mipserr PARAMS ((int));
static void s_extern PARAMS ((int));
d500 1
a500 1
  {"err", s_mipserr, 0},
d554 3
d559 3
d565 4
a776 1
	sec = subseg_new (".reginfo", (subsegT) 0);
d778 3
a780 6
	/* The ABI says this section should be loaded so that the
	   running program can access it.  */
	(void) bfd_set_section_flags (stdoutput, sec,
				      (SEC_ALLOC | SEC_LOAD
				       | SEC_READONLY | SEC_DATA));
	(void) bfd_set_section_alignment (stdoutput, sec, 2);
d782 7
d790 1
a790 1
	mips_regmask_frag = frag_more (sizeof (Elf32_External_RegInfo));
d792 30
d853 2
d856 1
d871 2
a872 1
	append_insn ((char *) NULL, &insn, &imm_expr, imm_reloc);
d874 1
a874 1
	append_insn ((char *) NULL, &insn, &offset_expr, offset_reloc);
d876 1
a876 1
	append_insn ((char *) NULL, &insn, NULL, BFD_RELOC_UNUSED);
d924 28
d958 1
a958 1
append_insn (place, ip, address_expr, reloc_type)
d963 1
d1195 18
a1212 4
	    fixp = fix_new_exp (frag_now, f - frag_now->fr_literal, 4,
				address_expr,
				reloc_type == BFD_RELOC_16_PCREL_S2,
				reloc_type);
d1672 2
d1685 3
a1687 1
			      || r == BFD_RELOC_HI16))
d1730 1
a1730 1
  append_insn (place, &insn, ep, r);
d1754 1
a1754 1
      high_expr.X_add_number = 0;
d1795 1
a1795 1
      append_insn (place, &insn, NULL, r);
d1798 1
a1798 1
    append_insn (place, &insn, &high_expr, r);
d1874 9
a1882 7
      else if (((ep->X_add_number &~ (offsetT) 0x7fffffff) == 0
		|| ((ep->X_add_number &~ (offsetT) 0x7fffffff)
		    == ~ (offsetT) 0x7fffffff))
	       && (! dbl
		   || ! ep->X_unsigned
		   || sizeof (ep->X_add_number) > 4
		   || (ep->X_add_number & 0x80000000) == 0))
d1945 17
d1978 9
d2037 2
a2038 1
      if (ep->X_add_number != 0 || nopic_need_relax (ep->X_add_symbol))
d2057 1
a2057 1
  else if (mips_pic == SVR4_PIC)
d2086 63
a2148 1
	  macro_build (p, counter, &ex,
d2905 1
a2905 1
	  if (offset_expr.X_add_number != 0
d2927 1
a2927 1
      else if (mips_pic == SVR4_PIC)
d3053 208
d3331 2
a3332 1
	  /* If this is a reference to an external symbol, we want
d3339 9
a3347 1
	     pseudo-op.  If the symbol is not external, we want
d3353 50
a3402 11
	       lw	$gp,cprestore($sp)
	     */
	  frag_grow (20);
	  macro_build ((char *) NULL, &icnt, &offset_expr,
		       mips_isa < 3 ? "lw" : "ld",
		       "t,o(b)", PIC_CALL_REG,
		       (int) BFD_RELOC_MIPS_CALL16, GP);
	  macro_build ((char *) NULL, &icnt, (expressionS *) NULL, "nop", "");
	  p = frag_var (rs_machine_dependent, 4, 0,
			RELAX_ENCODE (0, 4, -8, 0, 0, 0),
			offset_expr.X_add_symbol, (long) 0, (char *) NULL);
d3616 1
a3616 1
	      if (offset_expr.X_add_number != 0
d3640 1
a3640 1
	      if (offset_expr.X_add_number != 0
d3668 1
a3668 1
      else if (mips_pic == SVR4_PIC)
d3710 64
d4045 1
a4045 1
	  if (offset_expr.X_add_number != 0
d4126 1
a4126 1
      else if (mips_pic == SVR4_PIC)
d4181 100
d4461 1
a4461 1
		   imm_expr.X_add_number & 0x1f);
d4463 1
a4463 1
		   (0 - imm_expr.X_add_number) & 0x1f);
d4477 1
a4477 1
		   imm_expr.X_add_number & 0x1f);
d4479 1
a4479 1
		   (0 - imm_expr.X_add_number) & 0x1f);
d5005 4
a5009 5
/*
This routine assembles an instruction into its binary format.  As a side
effect it sets one of the global variables imm_reloc or offset_reloc to the
type of relocation to do if one of the operands is an address expression.
*/
d5042 1
a5042 2
      as_warn ("`%s' not in hash table.", str);
      insn_error = "ERROR: Unrecognized opcode";
d5077 2
a5078 1
	  as_warn ("Instruction not supported on this processor");
d5540 6
d5584 4
a5587 1
			imm_reloc = BFD_RELOC_HI16_S;
d5699 4
a5702 1
			imm_reloc = BFD_RELOC_HI16_S;
d5748 1
a5748 1
      insn_error = "ERROR: Illegal operands";
d5976 3
d5981 1
d5984 2
d6206 3
a6208 3
  /* When generating ELF code, we permit -KPIC and -call_shared to
     select SVR4_PIC, and -non_shared to select no PIC.  This is
     intended to be compatible with Irix 5.  */
d6233 7
d6256 22
d6303 1
d6318 4
a6321 1
-non_shared		do not generate position independent code\n");
d6363 2
a6364 4
     4 byte reloc.  
     FIXME: There is no way to select anything but 32 bit mode right
     now.  */
  if (nbytes == 8)
d6371 1
a6371 1
  if (nbytes != 2 && nbytes != 4)
d6375 83
a6457 1
	       nbytes == 2 ? BFD_RELOC_16 : BFD_RELOC_32);
d6516 4
a6947 7
s_mipserr (x)
     int x;
{
  as_fatal ("Encountered `.err', aborting assembly");
}

static void
d6981 1
d6988 5
d7006 1
a7006 1
	symbolP->bsym->flags |= BSF_FUNCTION;
d7009 2
d7189 3
d7534 5
a7538 1
	  || fixp->fx_r_type == BFD_RELOC_MIPS_CALL16))
d7543 3
a7545 2
	 GPREL relocs, both of which are being replaced.  Let the
	 second one handle all of them.  */
d7549 8
a7556 2
	  assert (fixp->fx_r_type == BFD_RELOC_MIPS_GPREL
		  && fixp->fx_next->fx_r_type == BFD_RELOC_MIPS_GPREL);
d7590 1
a7590 1
	  if (fixp->fx_r_type != BFD_RELOC_MIPS_GOT16)
d7592 7
a7598 1
	      assert (fixp->fx_r_type == BFD_RELOC_MIPS_CALL16);
d7600 1
d7696 19
a7714 1
  Elf32_RegInfo s;
d7716 12
a7727 11
  /* Write out the .reginfo section.  */
  s.ri_gprmask = mips_gprmask;
  s.ri_cprmask[0] = mips_cprmask[0];
  s.ri_cprmask[1] = mips_cprmask[1];
  s.ri_cprmask[2] = mips_cprmask[2];
  s.ri_cprmask[3] = mips_cprmask[3];
  /* The gp_value field is set by the MIPS ELF backend.  */

  bfd_mips_elf32_swap_reginfo_out (stdoutput, &s,
				   ((Elf32_External_RegInfo *)
				    mips_regmask_frag));
@


1.1.1.1
log
@Initial GNU binutils 2.6 import
@
text
@@


1.1.1.2
log
@Import of binutils, gas, ld & gprof from Cygnus 960609 tree
@
text
@d2 1
a2 1
   Copyright (C) 1993, 1995, 1996 Free Software Foundation, Inc.
d21 2
a22 3
   along with GAS; see the file COPYING.  If not, write to the Free
   Software Foundation, 59 Temple Place - Suite 330, Boston, MA
   02111-1307, USA.  */
a84 4
/* 1 is we should use the 64 bit MIPS ELF ABI, 0 if we should use the
   32 bit ABI.  This has no meaning for ECOFF.  */
static int mips_64;

d96 1
a96 3
      return (target_big_endian
	      ? (mips_64 ? "elf64-bigmips" : "elf32-bigmips")
	      : (mips_64 ? "elf64-littlemips" : "elf32-littlemips"));
a162 4
/* 1 if we should generate 32 bit offsets from the GP register in
   SVR4_PIC mode.  Currently has no meaning in other modes.  */
static int mips_big_got;

a289 25

/* For ECOFF and ELF, relocations against symbols are done in two
   parts, with a HI relocation and a LO relocation.  Each relocation
   has only 16 bits of space to store an addend.  This means that in
   order for the linker to handle carries correctly, it must be able
   to locate both the HI and the LO relocation.  This means that the
   relocations must appear in order in the relocation table.

   In order to implement this, we keep track of each unmatched HI
   relocation.  We then sort them so that they immediately precede the
   corresponding LO relocation. */

struct mips_hi_fixup
{
  /* Next HI fixup.  */
  struct mips_hi_fixup *next;
  /* This fixup.  */
  fixS *fixp;
  /* The section this fixup is in.  */
  segT seg;
};

/* The list of unmatched HI relocs.  */

static struct mips_hi_fixup *mips_hi_fixup_list;
a377 1
static int reg_needs_delay PARAMS ((int));
d381 1
a381 2
				 bfd_reloc_code_real_type r,
				 boolean));
d410 2
d464 1
a464 1
  {"err", s_err, 0},
a517 3
/* Expressions which appear in instructions.  These are set by
   mips_ip.  */

a519 3

/* Relocs associated with imm_expr and offset_expr.  */

a522 4
/* This is set by mips_ip if imm_reloc is an unmatched HI16_S reloc.  */

static boolean imm_unmatched_hi;

d731 1
d733 6
a738 3
	if (! mips_64)
	  {
	    sec = subseg_new (".reginfo", (subsegT) 0);
a739 7
	    /* The ABI says this section should be loaded so that the
	       running program can access it.  */
	    (void) bfd_set_section_flags (stdoutput, sec,
					  (SEC_ALLOC | SEC_LOAD
					   | SEC_READONLY | SEC_DATA));
	    (void) bfd_set_section_alignment (stdoutput, sec, 2);
	
d741 1
a741 1
	    mips_regmask_frag = frag_more (sizeof (Elf32_External_RegInfo));
a742 30
	  }
	else
	  {
	    /* The 64-bit ABI uses a .MIPS.options section rather than
               .reginfo section.  */
	    sec = subseg_new (".MIPS.options", (subsegT) 0);
	    (void) bfd_set_section_flags (stdoutput, sec,
					  (SEC_ALLOC | SEC_LOAD
					   | SEC_READONLY | SEC_DATA));
	    (void) bfd_set_section_alignment (stdoutput, sec, 3);

#ifdef OBJ_ELF
	    /* Set up the option header.  */
	    {
	      Elf_Internal_Options opthdr;
	      char *f;

	      opthdr.kind = ODK_REGINFO;
	      opthdr.size = (sizeof (Elf_External_Options)
			     + sizeof (Elf64_External_RegInfo));
	      opthdr.section = 0;
	      opthdr.info = 0;
	      f = frag_more (sizeof (Elf_External_Options));
	      bfd_mips_elf_swap_options_out (stdoutput, &opthdr,
					     (Elf_External_Options *) f);

	      mips_regmask_frag = frag_more (sizeof (Elf64_External_RegInfo));
	    }
#endif
	  }
a773 2
  imm_reloc = BFD_RELOC_UNUSED;
  imm_unmatched_hi = false;
a774 1
  offset_reloc = BFD_RELOC_UNUSED;
d789 1
a789 2
	append_insn ((char *) NULL, &insn, &imm_expr, imm_reloc,
		     imm_unmatched_hi);
d791 1
a791 1
	append_insn ((char *) NULL, &insn, &offset_expr, offset_reloc, false);
d793 1
a793 1
	append_insn ((char *) NULL, &insn, NULL, BFD_RELOC_UNUSED, false);
a840 28
/* This function returns true if modifying a register requires a
   delay.  */

static int
reg_needs_delay (reg)
     int reg;
{
  unsigned long prev_pinfo;

  prev_pinfo = prev_insn.insn_mo->pinfo;
  if (! mips_noreorder
      && mips_isa < 4
      && ((prev_pinfo & INSN_LOAD_COPROC_DELAY)
	  || (mips_isa < 2
	      && (prev_pinfo & INSN_LOAD_MEMORY_DELAY))))
    {
      /* A load from a coprocessor or from memory.  All load
	 delays delay the use of general register rt for one
	 instruction on the r3000.  The r6000 and r4000 use
	 interlocks.  */
      know (prev_pinfo & INSN_WRITE_GPR_T);
      if (reg == ((prev_insn.insn_opcode >> OP_SH_RT) & OP_MASK_RT))
	return 1;
    }

  return 0;
}

d847 1
a847 1
append_insn (place, ip, address_expr, reloc_type, unmatched_hi)
a851 1
     boolean unmatched_hi;
d1083 4
a1086 18
	    {
	      fixp = fix_new_exp (frag_now, f - frag_now->fr_literal, 4,
				  address_expr,
				  reloc_type == BFD_RELOC_16_PCREL_S2,
				  reloc_type);
	      if (unmatched_hi)
		{
		  struct mips_hi_fixup *hi_fixup;

		  assert (reloc_type == BFD_RELOC_HI16_S);
		  hi_fixup = ((struct mips_hi_fixup *)
			      xmalloc (sizeof (struct mips_hi_fixup)));
		  hi_fixup->fixp = fixp;
		  hi_fixup->seg = now_seg;
		  hi_fixup->next = mips_hi_fixup_list;
		  mips_hi_fixup_list = hi_fixup;
		}
	    }
a1545 2
		  || r == BFD_RELOC_MIPS_GOT_LO16
		  || r == BFD_RELOC_MIPS_CALL_LO16
d1557 1
a1557 3
			      || r == BFD_RELOC_HI16
			      || r == BFD_RELOC_MIPS_GOT_HI16
			      || r == BFD_RELOC_MIPS_CALL_HI16))
d1600 1
a1600 1
  append_insn (place, &insn, ep, r, false);
d1624 1
a1624 1
      high_expr.X_add_number = ep->X_add_number;
d1665 1
a1665 1
      append_insn (place, &insn, NULL, r, false);
d1668 1
a1668 1
    append_insn (place, &insn, &high_expr, r, false);
d1744 7
a1750 9
      else if ((((ep->X_add_number &~ (offsetT) 0x7fffffff) == 0
		 || ((ep->X_add_number &~ (offsetT) 0x7fffffff)
		     == ~ (offsetT) 0x7fffffff))
		&& (! dbl
		    || ! ep->X_unsigned
		    || sizeof (ep->X_add_number) > 4
		    || (ep->X_add_number & 0x80000000) == 0))
	       || (mips_isa < 3
		   && (ep->X_add_number &~ 0xffffffff) == 0))
a1812 17
      if (hi32.X_add_number == 0xffffffff)
        {
          if ((lo32.X_add_number & 0xffff8000) == 0xffff8000)
            {
              macro_build ((char *) NULL, counter, &lo32, "addiu", "t,r,j", reg, 0,
                           (int) BFD_RELOC_LO16);
              return;
            }
          if (lo32.X_add_number & 0x80000000)
            {
              macro_build ((char *) NULL, counter, &lo32, "lui", "t,u", reg,
                           (int) BFD_RELOC_HI16);
              macro_build ((char *) NULL, counter, &lo32, "ori", "t,r,i", reg, reg,
                           (int) BFD_RELOC_LO16);
              return;
            }
        }
a1828 9
      if ((freg == 0) && (lo32.X_add_number == 0xffffffff))
        {
	  macro_build ((char *) NULL, counter, &lo32, "lui", "t,u", reg,
		       (int) BFD_RELOC_HI16);
          macro_build ((char *) NULL, counter, NULL, "dsrl32", "d,w,<", reg,
                       reg, 32);
          return;
        }

d1879 1
a1879 2
      if ((valueT) ep->X_add_number >= MAX_GPREL_OFFSET
          || nopic_need_relax (ep->X_add_symbol))
d1898 1
a1898 1
  else if (mips_pic == SVR4_PIC && ! mips_big_got)
d1927 1
a1927 63
	  macro_build ((char *) NULL, counter, &ex,
		       mips_isa < 3 ? "addiu" : "daddiu",
		       "t,r,j", reg, reg, (int) BFD_RELOC_LO16);
	}
    }
  else if (mips_pic == SVR4_PIC)
    {
      expressionS ex;
      int off;

      /* This is the large GOT case.  If this is a reference to an
	 external symbol, we want
	   lui		$reg,<sym>		(BFD_RELOC_MIPS_GOT_HI16)
	   addu		$reg,$reg,$gp
	   lw		$reg,<sym>($reg)	(BFD_RELOC_MIPS_GOT_LO16)
	 Otherwise, for a reference to a local symbol, we want
	   lw		$reg,<sym>($gp)		(BFD_RELOC_MIPS_GOT16)
	   nop
	   addiu	$reg,$reg,<sym>		(BFD_RELOC_LO16)
	 If there is a constant, it must be added in after.  */
      ex.X_add_number = ep->X_add_number;
      ep->X_add_number = 0;
      if (reg_needs_delay (GP))
	off = 4;
      else
	off = 0;
      frag_grow (32);
      macro_build ((char *) NULL, counter, ep, "lui", "t,u", reg,
		   (int) BFD_RELOC_MIPS_GOT_HI16);
      macro_build ((char *) NULL, counter, (expressionS *) NULL,
		   mips_isa < 3 ? "addu" : "daddu",
		   "d,v,t", reg, reg, GP);
      macro_build ((char *) NULL, counter, ep,
		   mips_isa < 3 ? "lw" : "ld",
		   "t,o(b)", reg, (int) BFD_RELOC_MIPS_GOT_LO16, reg);
      p = frag_var (rs_machine_dependent, 12 + off, 0,
		    RELAX_ENCODE (12, 12 + off, off, 8 + off, 0,
				  mips_warn_about_macros),
		    ep->X_add_symbol, (long) 0, (char *) NULL);
      if (off > 0)
	{
	  /* We need a nop before loading from $gp.  This special
             check is required because the lui which starts the main
             instruction stream does not refer to $gp, and so will not
             insert the nop which may be required.  */
	  macro_build (p, counter, (expressionS *) NULL, "nop", "");
	  p += 4;
	}
      macro_build (p, counter, ep,
		   mips_isa < 3 ? "lw" : "ld",
		   "t,o(b)", reg, (int) BFD_RELOC_MIPS_GOT16, GP);
      p += 4;
      macro_build (p, counter, (expressionS *) NULL, "nop", "");
      p += 4;
      macro_build (p, counter, ep,
		   mips_isa < 3 ? "addiu" : "daddiu",
		   "t,r,j", reg, reg, (int) BFD_RELOC_LO16);
      if (ex.X_add_number != 0)
	{
	  if (ex.X_add_number < -0x8000 || ex.X_add_number >= 0x8000)
	    as_bad ("PIC code offset overflow (max 16 signed bits)");
	  ex.X_op = O_constant;
	  macro_build ((char *) NULL, counter, &ex,
d2684 1
a2684 1
	  if ((valueT) offset_expr.X_add_number >= MAX_GPREL_OFFSET
d2706 1
a2706 1
      else if (mips_pic == SVR4_PIC && ! mips_big_got)
a2831 208
      else if (mips_pic == SVR4_PIC)
	{
	  int gpdel;

	  /* This is the large GOT case.  If this is a reference to an
	     external symbol, and there is no constant, we want
	       lui	$tempreg,<sym>		(BFD_RELOC_MIPS_GOT_HI16)
	       addu	$tempreg,$tempreg,$gp
	       lw	$tempreg,<sym>($tempreg) (BFD_RELOC_MIPS_GOT_LO16)
	     For a local symbol, we want
	       lw	$tempreg,<sym>($gp)	(BFD_RELOC_MIPS_GOT16)
	       nop
	       addiu	$tempreg,$tempreg,<sym>	(BFD_RELOC_LO16)

	     If we have a small constant, and this is a reference to
	     an external symbol, we want
	       lui	$tempreg,<sym>		(BFD_RELOC_MIPS_GOT_HI16)
	       addu	$tempreg,$tempreg,$gp
	       lw	$tempreg,<sym>($tempreg) (BFD_RELOC_MIPS_GOT_LO16)
	       nop
	       addiu	$tempreg,$tempreg,<constant>
	     For a local symbol, we want
	       lw	$tempreg,<sym>($gp)	(BFD_RELOC_MIPS_GOT16)
	       nop
	       addiu	$tempreg,$tempreg,<constant> (BFD_RELOC_LO16)

	     If we have a large constant, and this is a reference to
	     an external symbol, we want
	       lui	$tempreg,<sym>		(BFD_RELOC_MIPS_GOT_HI16)
	       addu	$tempreg,$tempreg,$gp
	       lw	$tempreg,<sym>($tempreg) (BFD_RELOC_MIPS_GOT_LO16)
	       lui	$at,<hiconstant>
	       addiu	$at,$at,<loconstant>
	       addu	$tempreg,$tempreg,$at
	     For a local symbol, we want
	       lw	$tempreg,<sym>($gp)	(BFD_RELOC_MIPS_GOT16)
	       lui	$at,<hiconstant>
	       addiu	$at,$at,<loconstant>	(BFD_RELOC_LO16)
	       addu	$tempreg,$tempreg,$at
	     */
	  expr1.X_add_number = offset_expr.X_add_number;
	  offset_expr.X_add_number = 0;
	  frag_grow (52);
	  if (reg_needs_delay (GP))
	    gpdel = 4;
	  else
	    gpdel = 0;
	  macro_build ((char *) NULL, &icnt, &offset_expr, "lui", "t,u",
		       tempreg, (int) BFD_RELOC_MIPS_GOT_HI16);
	  macro_build ((char *) NULL, &icnt, (expressionS *) NULL,
		       mips_isa < 3 ? "addu" : "daddu",
		       "d,v,t", tempreg, tempreg, GP);
	  macro_build ((char *) NULL, &icnt, &offset_expr,
		       dbl ? "ld" : "lw",
		       "t,o(b)", tempreg, (int) BFD_RELOC_MIPS_GOT_LO16,
		       tempreg);
	  if (expr1.X_add_number == 0)
	    {
	      int off;

	      if (breg == 0)
		off = 0;
	      else
		{
		  /* We're going to put in an addu instruction using
		     tempreg, so we may as well insert the nop right
		     now.  */
		  macro_build ((char *) NULL, &icnt, (expressionS *) NULL,
			       "nop", "");
		  off = 4;
		}

	      p = frag_var (rs_machine_dependent, 12 + gpdel, 0,
			    RELAX_ENCODE (12 + off, 12 + gpdel, gpdel,
					  8 + gpdel, 0,
					  (breg == 0
					   ? mips_warn_about_macros
					   : 0)),
			    offset_expr.X_add_symbol, (long) 0,
			    (char *) NULL);
	    }
	  else if (expr1.X_add_number >= -0x8000
		   && expr1.X_add_number < 0x8000)
	    {
	      macro_build ((char *) NULL, &icnt, (expressionS *) NULL,
			   "nop", "");
	      macro_build ((char *) NULL, &icnt, &expr1,
			   mips_isa < 3 ? "addiu" : "daddiu",
			   "t,r,j", tempreg, tempreg, (int) BFD_RELOC_LO16);

	      p = frag_var (rs_machine_dependent, 12 + gpdel, 0,
			    RELAX_ENCODE (20, 12 + gpdel, gpdel, 8 + gpdel, 0,
					  (breg == 0
					   ? mips_warn_about_macros
					   : 0)),
			    offset_expr.X_add_symbol, (long) 0,
			    (char *) NULL);
	    }
	  else
	    {
	      int adj, dreg;

	      /* If we are going to add in a base register, and the
		 target register and the base register are the same,
		 then we are using AT as a temporary register.  Since
		 we want to load the constant into AT, we add our
		 current AT (from the global offset table) and the
		 register into the register now, and pretend we were
		 not using a base register.  */
	      if (breg != treg)
		{
		  adj = 0;
		  dreg = tempreg;
		}
	      else
		{
		  assert (tempreg == AT);
		  macro_build ((char *) NULL, &icnt, (expressionS *) NULL,
			       "nop", "");
		  macro_build ((char *) NULL, &icnt, (expressionS *) NULL,
			       mips_isa < 3 ? "addu" : "daddu",
			       "d,v,t", treg, AT, breg);
		  dreg = treg;
		  adj = 8;
		}

	      /* Set mips_optimize around the lui instruction to avoid
		 inserting an unnecessary nop after the lw.  */
	      hold_mips_optimize = mips_optimize;
	      mips_optimize = 2;
	      macro_build_lui ((char *) NULL, &icnt, &expr1, AT);
	      mips_optimize = hold_mips_optimize;

	      macro_build ((char *) NULL, &icnt, &expr1,
			   mips_isa < 3 ? "addiu" : "daddiu",
			   "t,r,j", AT, AT, (int) BFD_RELOC_LO16);
	      macro_build ((char *) NULL, &icnt, (expressionS *) NULL,
			   mips_isa < 3 ? "addu" : "daddu",
			   "d,v,t", dreg, dreg, AT);

	      p = frag_var (rs_machine_dependent, 16 + gpdel + adj, 0,
			    RELAX_ENCODE (24 + adj, 16 + gpdel + adj, gpdel,
					  8 + gpdel, 0,
					  (breg == 0
					   ? mips_warn_about_macros
					   : 0)),
			    offset_expr.X_add_symbol, (long) 0,
			    (char *) NULL);

	      used_at = 1;
	    }

	  if (gpdel > 0)
	    {
	      /* This is needed because this instruction uses $gp, but
                 the first instruction on the main stream does not.  */
	      macro_build (p, &icnt, (expressionS *) NULL, "nop", "");
	      p += 4;
	    }
	  macro_build (p, &icnt, &offset_expr,
		       dbl ? "ld" : "lw",
		       "t,o(b)", tempreg, (int) BFD_RELOC_MIPS_GOT16, GP);
	  p += 4;
	  if (expr1.X_add_number >= -0x8000
	      && expr1.X_add_number < 0x8000)
	    {
	      macro_build (p, &icnt, (expressionS *) NULL, "nop", "");
	      p += 4;
	      macro_build (p, &icnt, &expr1,
			   mips_isa < 3 ? "addiu" : "daddiu",
			   "t,r,j", tempreg, tempreg, (int) BFD_RELOC_LO16);
	      /* FIXME: If add_number is 0, and there was no base
                 register, the external symbol case ended with a load,
                 so if the symbol turns out to not be external, and
                 the next instruction uses tempreg, an unnecessary nop
                 will be inserted.  */
	    }
	  else
	    {
	      if (breg == treg)
		{
		  /* We must add in the base register now, as in the
                     external symbol case.  */
		  assert (tempreg == AT);
		  macro_build (p, &icnt, (expressionS *) NULL, "nop", "");
		  p += 4;
		  macro_build (p, &icnt, (expressionS *) NULL,
			       mips_isa < 3 ? "addu" : "daddu",
			       "d,v,t", treg, AT, breg);
		  p += 4;
		  tempreg = treg;
		  /* We set breg to 0 because we have arranged to add
                     it in in both cases.  */
		  breg = 0;
		}

	      macro_build_lui (p, &icnt, &expr1, AT);
	      p += 4;
	      macro_build (p, &icnt, &expr1,
			   mips_isa < 3 ? "addiu" : "daddiu",
			   "t,r,j", AT, AT, (int) BFD_RELOC_LO16);
	      p += 4;
	      macro_build (p, &icnt, (expressionS *) NULL,
			   mips_isa < 3 ? "addu" : "daddu",
			   "d,v,t", tempreg, tempreg, AT);
	      p += 4;
	    }
	}
d2902 1
a2902 2
	  /* If this is a reference to an external symbol, and we are
	     using a small GOT, we want
d2909 1
a2909 9
	     pseudo-op.  If we are using a big GOT, we want
	       lui	$25,<sym>		(BFD_RELOC_MIPS_CALL_HI16)
	       addu	$25,$25,$gp
	       lw	$25,<sym>($25)		(BFD_RELOC_MIPS_CALL_LO16)
	       nop
	       jalr	$25
	       nop
	       lw	$gp,cprestore($sp)
	     If the symbol is not external, we want
d2915 11
a2925 50
	       lw $gp,cprestore($sp) */
	  frag_grow (40);
	  if (! mips_big_got)
	    {
	      macro_build ((char *) NULL, &icnt, &offset_expr,
			   mips_isa < 3 ? "lw" : "ld",
			   "t,o(b)", PIC_CALL_REG,
			   (int) BFD_RELOC_MIPS_CALL16, GP);
	      macro_build ((char *) NULL, &icnt, (expressionS *) NULL,
			   "nop", "");
	      p = frag_var (rs_machine_dependent, 4, 0,
			    RELAX_ENCODE (0, 4, -8, 0, 0, 0),
			    offset_expr.X_add_symbol, (long) 0, (char *) NULL);
	    }
	  else
	    {
	      int gpdel;

	      if (reg_needs_delay (GP))
		gpdel = 4;
	      else
		gpdel = 0;
	      macro_build ((char *) NULL, &icnt, &offset_expr, "lui", "t,u",
			   PIC_CALL_REG, (int) BFD_RELOC_MIPS_CALL_HI16);
	      macro_build ((char *) NULL, &icnt, (expressionS *) NULL,
			   mips_isa < 3 ? "addu" : "daddu",
			   "d,v,t", PIC_CALL_REG, PIC_CALL_REG, GP);
	      macro_build ((char *) NULL, &icnt, &offset_expr,
			   mips_isa < 3 ? "lw" : "ld",
			   "t,o(b)", PIC_CALL_REG,
			   (int) BFD_RELOC_MIPS_CALL_LO16, PIC_CALL_REG);
	      macro_build ((char *) NULL, &icnt, (expressionS *) NULL,
			   "nop", "");
	      p = frag_var (rs_machine_dependent, 12 + gpdel, 0,
			    RELAX_ENCODE (16, 12 + gpdel, gpdel, 8 + gpdel,
					  0, 0),
			    offset_expr.X_add_symbol, (long) 0, (char *) NULL);
	      if (gpdel > 0)
		{
		  macro_build (p, &icnt, (expressionS *) NULL, "nop", "");
		  p += 4;
		}
	      macro_build (p, &icnt, &offset_expr,
			   mips_isa < 3 ? "lw" : "ld",
			   "t,o(b)", PIC_CALL_REG,
			   (int) BFD_RELOC_MIPS_GOT16, GP);
	      p += 4;
	      macro_build (p, &icnt, (expressionS *) NULL, "nop", "");
	      p += 4;
	    }			   
d3139 1
a3139 1
	      if ((valueT) offset_expr.X_add_number >= MAX_GPREL_OFFSET
d3163 1
a3163 1
	      if ((valueT) offset_expr.X_add_number >= MAX_GPREL_OFFSET
d3191 1
a3191 1
      else if (mips_pic == SVR4_PIC && ! mips_big_got)
a3232 64
      else if (mips_pic == SVR4_PIC)
	{
	  int gpdel;

	  /* If this is a reference to an external symbol, we want
	       lui	$tempreg,<sym>		(BFD_RELOC_MIPS_GOT_HI16)
	       addu	$tempreg,$tempreg,$gp
	       lw	$tempreg,<sym>($tempreg) (BFD_RELOC_MIPS_GOT_LO16)
	       <op>	$treg,0($tempreg)
	     Otherwise we want
	       lw	$tempreg,<sym>($gp)	(BFD_RELOC_MIPS_GOT16)
	       nop
	       addiu	$tempreg,$tempreg,<sym>	(BFD_RELOC_LO16)
	       <op>	$treg,0($tempreg)
	     If there is a base register, we add it to $tempreg before
	     the <op>.  If there is a constant, we stick it in the
	     <op> instruction.  We don't handle constants larger than
	     16 bits, because we have no way to load the upper 16 bits
	     (actually, we could handle them for the subset of cases
	     in which we are not using $at).  */
	  assert (offset_expr.X_op == O_symbol);
	  expr1.X_add_number = offset_expr.X_add_number;
	  offset_expr.X_add_number = 0;
	  if (expr1.X_add_number < -0x8000
	      || expr1.X_add_number >= 0x8000)
	    as_bad ("PIC code offset overflow (max 16 signed bits)");
	  if (reg_needs_delay (GP))
	    gpdel = 4;
	  else
	    gpdel = 0;
	  frag_grow (36);
	  macro_build ((char *) NULL, &icnt, &offset_expr, "lui", "t,u",
		       tempreg, (int) BFD_RELOC_MIPS_GOT_HI16);
	  macro_build ((char *) NULL, &icnt, (expressionS *) NULL,
		       mips_isa < 3 ? "addu" : "daddu",
		       "d,v,t", tempreg, tempreg, GP);
	  macro_build ((char *) NULL, &icnt, &offset_expr,
		       mips_isa < 3 ? "lw" : "ld",
		       "t,o(b)", tempreg, (int) BFD_RELOC_MIPS_GOT_LO16,
		       tempreg);
	  p = frag_var (rs_machine_dependent, 12 + gpdel, 0,
			RELAX_ENCODE (12, 12 + gpdel, gpdel, 8 + gpdel, 0, 0),
			offset_expr.X_add_symbol, (long) 0, (char *) NULL);
	  if (gpdel > 0)
	    {
	      macro_build (p, &icnt, (expressionS *) NULL, "nop", "");
	      p += 4;
	    }
	  macro_build (p, &icnt, &offset_expr,
		       mips_isa < 3 ? "lw" : "ld",
		       "t,o(b)", tempreg, (int) BFD_RELOC_MIPS_GOT16, GP);
	  p += 4;
	  macro_build (p, &icnt, (expressionS *) NULL, "nop", "");
	  p += 4;
	  macro_build (p, &icnt, &offset_expr,
		       mips_isa < 3 ? "addiu" : "daddiu",
		       "t,r,j", tempreg, tempreg, (int) BFD_RELOC_LO16);
	  if (breg != 0)
	    macro_build ((char *) NULL, &icnt, (expressionS *) NULL,
			 mips_isa < 3 ? "addu" : "daddu",
			 "d,v,t", tempreg, tempreg, breg);
	  macro_build ((char *) NULL, &icnt, &expr1, s, fmt, treg,
		       (int) BFD_RELOC_LO16, tempreg);
	}
d3504 1
a3504 1
	  if ((valueT) offset_expr.X_add_number >= MAX_GPREL_OFFSET
d3585 1
a3585 1
      else if (mips_pic == SVR4_PIC && ! mips_big_got)
a3639 100
      else if (mips_pic == SVR4_PIC)
	{
	  int gpdel, off;

	  /* If this is a reference to an external symbol, we want
	       lui	$at,<sym>		(BFD_RELOC_MIPS_GOT_HI16)
	       addu	$at,$at,$gp
	       lw	$at,<sym>($at)		(BFD_RELOC_MIPS_GOT_LO16)
	       nop
	       <op>	$treg,0($at)
	       <op>	$treg+1,4($at)
	     Otherwise we want
	       lw	$at,<sym>($gp)		(BFD_RELOC_MIPS_GOT16)
	       nop
	       <op>	$treg,<sym>($at)	(BFD_RELOC_LO16)
	       <op>	$treg+1,<sym>+4($at)	(BFD_RELOC_LO16)
	     If there is a base register we add it to $at before the
	     lwc1 instructions.  If there is a constant we include it
	     in the lwc1 instructions.  */
	  used_at = 1;
	  expr1.X_add_number = offset_expr.X_add_number;
	  offset_expr.X_add_number = 0;
	  if (expr1.X_add_number < -0x8000
	      || expr1.X_add_number >= 0x8000 - 4)
	    as_bad ("PIC code offset overflow (max 16 signed bits)");
	  if (reg_needs_delay (GP))
	    gpdel = 4;
	  else
	    gpdel = 0;
	  if (breg == 0)
	    off = 0;
	  else
	    off = 4;
	  frag_grow (56);
	  macro_build ((char *) NULL, &icnt, &offset_expr, "lui", "t,u",
		       AT, (int) BFD_RELOC_MIPS_GOT_HI16);
	  macro_build ((char *) NULL, &icnt, (expressionS *) NULL,
		       mips_isa < 3 ? "addu" : "daddu",
		       "d,v,t", AT, AT, GP);
	  macro_build ((char *) NULL, &icnt, &offset_expr,
		       mips_isa < 3 ? "lw" : "ld",
		       "t,o(b)", AT, (int) BFD_RELOC_MIPS_GOT_LO16, AT);
	  macro_build ((char *) NULL, &icnt, (expressionS *) NULL, "nop", "");
	  if (breg != 0)
	    macro_build ((char *) NULL, &icnt, (expressionS *) NULL,
			 mips_isa < 3 ? "addu" : "daddu",
			 "d,v,t", AT, breg, AT);
	  macro_build ((char *) NULL, &icnt, &expr1, s, fmt,
		       coproc ? treg + 1 : treg,
		       (int) BFD_RELOC_LO16, AT);
	  expr1.X_add_number += 4;

	  /* Set mips_optimize to 2 to avoid inserting an undesired
             nop.  */
	  hold_mips_optimize = mips_optimize;
	  mips_optimize = 2;
	  macro_build ((char *) NULL, &icnt, &expr1, s, fmt,
		       coproc ? treg : treg + 1,
		       (int) BFD_RELOC_LO16, AT);
	  mips_optimize = hold_mips_optimize;
	  expr1.X_add_number -= 4;

	  p = frag_var (rs_machine_dependent, 16 + gpdel + off, 0,
			RELAX_ENCODE (24 + off, 16 + gpdel + off, gpdel,
				      8 + gpdel + off, 1, 0),
			offset_expr.X_add_symbol, (long) 0,
			(char *) NULL);
	  if (gpdel > 0)
	    {
	      macro_build (p, &icnt, (expressionS *) NULL, "nop", "");
	      p += 4;
	    }
	  macro_build (p, &icnt, &offset_expr,
		       mips_isa < 3 ? "lw" : "ld",
		       "t,o(b)", AT, (int) BFD_RELOC_MIPS_GOT16, GP);
	  p += 4;
	  macro_build (p, &icnt, (expressionS *) NULL, "nop", "");
	  p += 4;
	  if (breg != 0)
	    {
	      macro_build (p, &icnt, (expressionS *) NULL,
			   mips_isa < 3 ? "addu" : "daddu",
			   "d,v,t", AT, breg, AT);
	      p += 4;
	    }
	  macro_build (p, &icnt, &expr1, s, fmt,
		       coproc ? treg + 1 : treg,
		       (int) BFD_RELOC_LO16, AT);
	  p += 4;
	  expr1.X_add_number += 4;

	  /* Set mips_optimize to 2 to avoid inserting an undesired
             nop.  */
	  hold_mips_optimize = mips_optimize;
	  mips_optimize = 2;
	  macro_build (p, &icnt, &expr1, s, fmt,
		       coproc ? treg : treg + 1,
		       (int) BFD_RELOC_LO16, AT);
	  mips_optimize = hold_mips_optimize;
	}
d3820 1
a3820 1
		   (int) (imm_expr.X_add_number & 0x1f));
d3822 1
a3822 1
		   (int) ((0 - imm_expr.X_add_number) & 0x1f));
d3836 1
a3836 1
		   (int) (imm_expr.X_add_number & 0x1f));
d3838 1
a3838 1
		   (int) ((0 - imm_expr.X_add_number) & 0x1f));
a4363 4
/* This routine assembles an instruction into its binary format.  As a
   side effect, it sets one of the global variables imm_reloc or
   offset_reloc to the type of relocation to do if one of the operands
   is an address expression.  */
d4365 5
d4402 2
a4403 1
      insn_error = "unrecognized opcode";
d4438 1
a4438 2
	  insn_error = "opcode not supported on this processor";
	  return;
a4899 6
		    if (OUTPUT_FLAVOR == bfd_target_elf_flavour)
		      bfd_set_section_flags (stdoutput, new_seg,
					     (SEC_ALLOC
					      | SEC_LOAD
					      | SEC_READONLY
					      | SEC_DATA));
d4938 1
a4938 4
			{
			  imm_reloc = BFD_RELOC_HI16_S;
			  imm_unmatched_hi = true;
			}
d5050 1
a5050 4
			{
			  imm_reloc = BFD_RELOC_HI16_S;
			  imm_unmatched_hi = true;
			}
d5096 1
a5096 1
      insn_error = "illegal operands";
a5323 3
#define OPTION_XGOT (OPTION_MD_BASE + 19)
#define OPTION_32 (OPTION_MD_BASE + 20)
#define OPTION_64 (OPTION_MD_BASE + 21)
a5325 1
  {"xgot", no_argument, NULL, OPTION_XGOT},
a5327 2
  {"32", no_argument, NULL, OPTION_32},
  {"64", no_argument, NULL, OPTION_64},
d5548 3
a5550 3
      /* When generating ELF code, we permit -KPIC and -call_shared to
	 select SVR4_PIC, and -non_shared to select no PIC.  This is
	 intended to be compatible with Irix 5.  */
a5574 7
      /* The -xgot option tells the assembler to use 32 offsets when
         accessing the got in SVR4_PIC mode.  It is for Irix
         compatibility.  */
    case OPTION_XGOT:
      mips_big_got = 1;
      break;

a5590 22
      /* The -32 and -64 options tell the assembler to output the 32
         bit or the 64 bit MIPS ELF format.  */
    case OPTION_32:
      mips_64 = 0;
      break;

    case OPTION_64:
      {
	const char **list, **l;

	list = bfd_target_list ();
	for (l = list; *l != NULL; l++)
	  if (strcmp (*l, "elf64-bigmips") == 0
	      || strcmp (*l, "elf64-littlemips") == 0)
	    break;
	if (*l == NULL)
	  as_fatal ("No compiled in support for 64 bit object file format");
	free (list);
	mips_64 = 1;
      }
      break;

a5615 1
-mcpu=vr4100		generate code for vr4100\n\
d5630 1
a5630 4
-non_shared		do not generate position independent code\n\
-xgot			assume a 32 bit GOT\n\
-32			create 32 bit object file (default)\n\
-64			create 64 bit object file\n");
d5672 4
a5675 2
     4 byte reloc.  */
  if (nbytes == 8 && ! mips_64)
d5682 1
a5682 1
  if (nbytes != 2 && nbytes != 4 && nbytes != 8)
d5686 1
a5686 83
	       (nbytes == 2
		? BFD_RELOC_16
		: (nbytes == 4 ? BFD_RELOC_32 : BFD_RELOC_64)));
}

/* Sort any unmatched HI16_S relocs so that they immediately precede
   the corresponding LO reloc.  This is called before md_apply_fix and
   tc_gen_reloc.  Unmatched HI16_S relocs can only be generated by
   explicit use of the %hi modifier.  */

void
mips_frob_file ()
{
  struct mips_hi_fixup *l;

  for (l = mips_hi_fixup_list; l != NULL; l = l->next)
    {
      segment_info_type *seginfo;
      int pass;

      assert (l->fixp->fx_r_type == BFD_RELOC_HI16_S);

      /* Check quickly whether the next fixup happens to be a matching
         %lo.  */
      if (l->fixp->fx_next != NULL
	  && l->fixp->fx_next->fx_r_type == BFD_RELOC_LO16
	  && l->fixp->fx_addsy == l->fixp->fx_next->fx_addsy
	  && l->fixp->fx_offset == l->fixp->fx_next->fx_offset)
	continue;

      /* Look through the fixups for this segment for a matching %lo.
         When we find one, move the %hi just in front of it.  We do
         this in two passes.  In the first pass, we try to find a
         unique %lo.  In the second pass, we permit multiple %hi
         relocs for a single %lo (this is a GNU extension).  */
      seginfo = seg_info (l->seg);
      for (pass = 0; pass < 2; pass++)
	{
	  fixS *f, *prev;

	  prev = NULL;
	  for (f = seginfo->fix_root; f != NULL; f = f->fx_next)
	    {
	      /* Check whether this is a %lo fixup which matches l->fixp.  */
	      if (f->fx_r_type == BFD_RELOC_LO16
		  && f->fx_addsy == l->fixp->fx_addsy
		  && f->fx_offset == l->fixp->fx_offset
		  && (pass == 1
		      || prev == NULL
		      || prev->fx_r_type != BFD_RELOC_HI16_S
		      || prev->fx_addsy != f->fx_addsy
		      || prev->fx_offset !=  f->fx_offset))
		{
		  fixS **pf;

		  /* Move l->fixp before f.  */
		  for (pf = &seginfo->fix_root;
		       *pf != l->fixp;
		       pf = &(*pf)->fx_next)
		    assert (*pf != NULL);

		  *pf = l->fixp->fx_next;

		  l->fixp->fx_next = f;
		  if (prev == NULL)
		    seginfo->fix_root = l->fixp;
		  else
		    prev->fx_next = l->fixp;

		  break;
		}

	      prev = f;
	    }

	  if (f != NULL)
	    break;

	  if (pass == 1)
	    as_warn_where (l->fixp->fx_file, l->fixp->fx_line,
			   "Unmatched %%hi reloc");
	}
    }
a5744 4
    case BFD_RELOC_MIPS_GOT_HI16:
    case BFD_RELOC_MIPS_GOT_LO16:
    case BFD_RELOC_MIPS_CALL_HI16:
    case BFD_RELOC_MIPS_CALL_LO16:
d6173 7
a6212 1
  flagword flag;
a6218 5

  /* On Irix 5, every global symbol that is not explicitly labelled as
     being a function is apparently labelled as being an object.  */
  flag = BSF_OBJECT;

d6232 1
a6232 1
	flag = BSF_FUNCTION;
a6234 2
  symbolP->bsym->flags |= flag;

a6412 3
  /* In ELF, this symbol is implicitly an STT_OBJECT symbol.  */
  ex.X_add_symbol->bsym->flags |= BSF_OBJECT;

d6755 1
a6755 5
	  || fixp->fx_r_type == BFD_RELOC_MIPS_CALL16
	  || fixp->fx_r_type == BFD_RELOC_MIPS_GOT_HI16
	  || fixp->fx_r_type == BFD_RELOC_MIPS_GOT_LO16
	  || fixp->fx_r_type == BFD_RELOC_MIPS_CALL_HI16
	  || fixp->fx_r_type == BFD_RELOC_MIPS_CALL_LO16))
d6760 2
a6761 3
	 GPREL relocs, or a GOT_HI16/GOT_LO16 pair, or a
	 CALL_HI16/CALL_LO16, both of which are being replaced.  Let
	 the second one handle all of them.  */
d6765 2
a6766 8
	  assert ((fixp->fx_r_type == BFD_RELOC_MIPS_GPREL
		   && fixp->fx_next->fx_r_type == BFD_RELOC_MIPS_GPREL)
		  || (fixp->fx_r_type == BFD_RELOC_MIPS_GOT_HI16
		      && (fixp->fx_next->fx_r_type
			  == BFD_RELOC_MIPS_GOT_LO16))
		  || (fixp->fx_r_type == BFD_RELOC_MIPS_CALL_HI16
		      && (fixp->fx_next->fx_r_type
			  == BFD_RELOC_MIPS_CALL_LO16)));
d6800 1
a6800 1
	  switch (fixp->fx_r_type)
d6802 1
a6802 7
	    default:
	      abort ();
	    case BFD_RELOC_MIPS_GOT16:
	      break;
	    case BFD_RELOC_MIPS_CALL16:
	    case BFD_RELOC_MIPS_GOT_LO16:
	    case BFD_RELOC_MIPS_CALL_LO16:
a6803 1
	      break;
d6899 1
a6899 19
  /* Write out the register information.  */
  if (! mips_64)
    {
      Elf32_RegInfo s;

      s.ri_gprmask = mips_gprmask;
      s.ri_cprmask[0] = mips_cprmask[0];
      s.ri_cprmask[1] = mips_cprmask[1];
      s.ri_cprmask[2] = mips_cprmask[2];
      s.ri_cprmask[3] = mips_cprmask[3];
      /* The gp_value field is set by the MIPS ELF backend.  */

      bfd_mips_elf32_swap_reginfo_out (stdoutput, &s,
				       ((Elf32_External_RegInfo *)
					mips_regmask_frag));
    }
  else
    {
      Elf64_Internal_RegInfo s;
d6901 11
a6911 12
      s.ri_gprmask = mips_gprmask;
      s.ri_pad = 0;
      s.ri_cprmask[0] = mips_cprmask[0];
      s.ri_cprmask[1] = mips_cprmask[1];
      s.ri_cprmask[2] = mips_cprmask[2];
      s.ri_cprmask[3] = mips_cprmask[3];
      /* The gp_value field is set by the MIPS ELF backend.  */

      bfd_mips_elf64_swap_reginfo_out (stdoutput, &s,
				       ((Elf64_External_RegInfo *)
					mips_regmask_frag));
    }
@


1.1.1.3
log
@Import of binutils, gas, ld & gprof from Cygnus 960904 tree
@
text
@a72 1
#if defined (OBJ_ELF) || defined (OBJ_MAYBE_ELF)
a73 1
#endif
a146 4
/* As with "interlocks" this is used by hardware that has FP
   (co-processor) interlocks.  */
static int cop_interlocks = -1;

d691 1
a691 1
  if (mips_4650 || mips_4010 || mips_4100 || mips_cpu == 4300)
a695 5
  if (mips_cpu == 4300)
    cop_interlocks = 1;
  else
    cop_interlocks = 0;

d1001 1
a1001 2
	  && (((prev_pinfo & INSN_LOAD_COPROC_DELAY)
               && ! cop_interlocks)
d1018 1
a1018 2
	       && (((prev_pinfo & INSN_COPROC_MOVE_DELAY)
                    && ! cop_interlocks)
d1071 1
a1071 2
	       && (prev_pinfo & INSN_WRITE_COND_CODE)
               && ! cop_interlocks)
d1086 1
a1086 2
	     insert two NOPS.  The R4650, VR4100 and VR4300 have
	     interlocks.  */
d1096 1
a1096 2
	     insert a NOP.  The R4650, VR4100 and VR4300 have
	     interlocks.  */
d1108 3
a1110 3
	 VR4100, and VR4300 which have interlocks).  If we are not
	 already emitting a NOP instruction, we must check for these
	 cases compared to the instruction previous to the previous
d1116 1
a1116 2
	       && (pinfo & INSN_READ_COND_CODE)
               && ! cop_interlocks)
a1134 2
	  fragS *old_frag;
	  unsigned long old_frag_offset;
a1136 3
	  old_frag = frag_now;
	  old_frag_offset = frag_now_fix ();

a1138 1

a1151 1

a1157 5

#ifndef NO_ECOFF_DEBUGGING
	  if (ECOFF_DEBUGGING)
	    ecoff_fix_loc (old_frag, old_frag_offset);
#endif
d1495 4
a1498 5
	   && (! cop_interlocks
               && (prev_insn.insn_mo->pinfo
                   & (INSN_LOAD_COPROC_DELAY
                      | INSN_COPROC_MOVE_DELAY
                      | INSN_WRITE_COND_CODE))))
d1510 1
a1510 2
	       && (! cop_interlocks
                   && prev_insn.insn_mo->pinfo & INSN_WRITE_COND_CODE))
d1517 1
a1517 2
		&& (! cop_interlocks
                    && prev_prev_insn.insn_mo->pinfo & INSN_WRITE_COND_CODE))
d5282 1
a5282 4
		  if (regno == AT
		      && ! mips_noat
		      && *args != 'E'
		      && *args != 'G')
d5424 2
a5425 3
	      if (imm_expr.X_op != O_big
		  && imm_expr.X_op != O_constant)
		insn_error = "absolute expression required";
d5576 1
a5576 1
	      if (c != '\0')
d5592 2
d5596 3
a5598 4
		  if ((c == '\0' && imm_expr.X_op != O_constant)
		      || ((imm_expr.X_add_number < 0
                           || imm_expr.X_add_number >= 0x10000)
                          && imm_expr.X_op == O_constant))
d5603 1
a5603 5
		      if (imm_expr.X_op != O_constant
			  && imm_expr.X_op != O_big)
			insn_error = "absolute expression required";
		      else
			as_bad ("16 bit expression not in range 0..65535");
d5626 3
a5628 4
		  if ((c == '\0' && imm_expr.X_op != O_constant)
		      || ((imm_expr.X_add_number < -0x8000
                           || imm_expr.X_add_number >= max)
                          && imm_expr.X_op == O_constant)
d5637 1
a5637 5
		      if (imm_expr.X_op != O_constant
			  && imm_expr.X_op != O_big)
			insn_error = "absolute expression required";
		      else
			as_bad ("16 bit expression not in range -32768..32767");
a7353 8
#ifdef OBJ_ELF
  /* We don't need to align ELF sections to the full alignment.
     However, Irix 5 may prefer that we align them at least to a 16
     byte boundary.  */
  if (align > 16)
    align = 16;
#endif

a7474 1
  bfd_reloc_code_real_type code;
a7606 32
  /* Since DIFF_EXPR_OK is defined in tc-mips.h, it is possible that
     fixup_segment converted a non-PC relative reloc into a PC
     relative reloc.  In such a case, we need to convert the reloc
     code.  */
  code = fixp->fx_r_type;
  if (fixp->fx_pcrel)
    {
      switch (code)
	{
	case BFD_RELOC_8:
	  code = BFD_RELOC_8_PCREL;
	  break;
	case BFD_RELOC_16:
	  code = BFD_RELOC_16_PCREL;
	  break;
	case BFD_RELOC_32:
	  code = BFD_RELOC_32_PCREL;
	  break;
	case BFD_RELOC_8_PCREL:
	case BFD_RELOC_16_PCREL:
	case BFD_RELOC_32_PCREL:
	case BFD_RELOC_16_PCREL_S2:
	case BFD_RELOC_PCREL_HI16_S:
	case BFD_RELOC_PCREL_LO16:
	  break;
	default:
	  as_bad_where (fixp->fx_file, fixp->fx_line,
			"Cannot make %s relocation PC relative",
			bfd_get_reloc_code_name (code));
	}
    }

d7611 1
a7611 1
      && code == BFD_RELOC_16_PCREL_S2
d7615 1
a7615 1
    reloc->howto = bfd_reloc_type_lookup (stdoutput, code);
d7620 1
a7620 2
		    "Can not represent %s relocation in this object file format",
		    bfd_get_reloc_code_name (code));
@


1.1.1.4
log
@Import of 961112 Cygnus binutils+gas+ld+gdb+gprof
@
text
@d28 1
a51 1
#undef obj_frob_file_after_relocs
a663 7
      else if (strcmp (cpu, "r5000") == 0
	       || strcmp (cpu, "mips64vr5000") == 0)
	{
	  mips_isa = 4;
	  if (mips_cpu == -1)
	    mips_cpu = 5000;
	}
d1100 2
a1101 1
	     insert two NOPS.  Some newer processors have interlocks.  */
d1111 2
a1112 1
	     insert a NOP.  Some newer processors have interlocks.  */
d1123 5
a1127 4
	 or LO register and then writing to it (except on processors
	 which have interlocks).  If we are not already emitting a NOP
	 instruction, we must check for these cases compared to the
	 instruction previous to the previous instruction.  */
a1209 3
	      ip->insn_opcode |= (address_expr->X_add_number >> 2) & 0x3ffffff;
	      break;

d1412 1
a1412 7
				    0))
	      /* If one instruction sets a condition code and the
                 other one uses a condition code, we can not swap.  */
	      || ((pinfo & INSN_READ_COND_CODE)
		  && (prev_pinfo & INSN_WRITE_COND_CODE))
	      || ((pinfo & INSN_WRITE_COND_CODE)
		  && (prev_pinfo & INSN_READ_COND_CODE)))
a1866 76
/* Count the leading zeroes by performing a binary chop. This is a
   bulky bit of source, but performance is a LOT better for the
   majority of values than a simple loop to count the bits:
       for (lcnt = 0; (lcnt < 32); lcnt++)
         if ((v) & (1 << (31 - lcnt)))
           break;
  However it is not code size friendly, and the gain will drop a bit
  on certain cached systems.
*/
#define COUNT_TOP_ZEROES(v)             \
  (((v) & ~0xffff) == 0                 \
   ? ((v) & ~0xff) == 0                 \
     ? ((v) & ~0xf) == 0                \
       ? ((v) & ~0x3) == 0              \
         ? ((v) & ~0x1) == 0            \
           ? !(v)                       \
             ? 32                       \
             : 31                       \
           : 30                         \
         : ((v) & ~0x7) == 0            \
           ? 29                         \
           : 28                         \
       : ((v) & ~0x3f) == 0             \
         ? ((v) & ~0x1f) == 0           \
           ? 27                         \
           : 26                         \
         : ((v) & ~0x7f) == 0           \
           ? 25                         \
           : 24                         \
     : ((v) & ~0xfff) == 0              \
       ? ((v) & ~0x3ff) == 0            \
         ? ((v) & ~0x1ff) == 0          \
           ? 23                         \
           : 22                         \
         : ((v) & ~0x7ff) == 0          \
           ? 21                         \
           : 20                         \
       : ((v) & ~0x3fff) == 0           \
         ? ((v) & ~0x1fff) == 0         \
           ? 19                         \
           : 18                         \
         : ((v) & ~0x7fff) == 0         \
           ? 17                         \
           : 16                         \
   : ((v) & ~0xffffff) == 0             \
     ? ((v) & ~0xfffff) == 0            \
       ? ((v) & ~0x3ffff) == 0          \
         ? ((v) & ~0x1ffff) == 0        \
           ? 15                         \
           : 14                         \
         : ((v) & ~0x7ffff) == 0        \
           ? 13                         \
           : 12                         \
       : ((v) & ~0x3fffff) == 0         \
         ? ((v) & ~0x1fffff) == 0       \
           ? 11                         \
           : 10                         \
         : ((v) & ~0x7fffff) == 0       \
           ? 9                          \
           : 8                          \
     : ((v) & ~0xfffffff) == 0          \
       ? ((v) & ~0x3ffffff) == 0        \
         ? ((v) & ~0x1ffffff) == 0      \
           ? 7                          \
           : 6                          \
         : ((v) & ~0x7ffffff) == 0      \
           ? 5                          \
           : 4                          \
       : ((v) & ~0x3fffffff) == 0       \
         ? ((v) & ~0x1fffffff) == 0     \
           ? 3                          \
           : 2                          \
         : ((v) & ~0x7fffffff) == 0     \
           ? 1                          \
           : 0)

d1913 2
a1914 2
	       || ((mips_isa < 3 || !dbl)
		   && (ep->X_add_number &~ (offsetT) 0xffffffff) == 0))
d1924 13
a1993 53

      /* Check for 16bit shifted constant: */
      shift = 32;
      tmp.X_add_number = hi32.X_add_number << shift | lo32.X_add_number;
      /* We know that hi32 is non-zero, so start the mask on the first
         bit of the hi32 value: */
      shift = 17;
      do
       {
         if ((tmp.X_add_number & ~((offsetT)0xffff << shift)) == 0)
          {
            tmp.X_op = O_constant;
            tmp.X_add_number >>= shift;
            macro_build ((char *) NULL, counter, &tmp, "ori", "t,r,i", reg, 0,
                         (int) BFD_RELOC_LO16);
            macro_build ((char *) NULL, counter, NULL,
                         (shift >= 32) ? "dsll32" : "dsll",
                         "d,w,<", reg, reg, (shift >= 32) ? shift - 32 : shift);
            return;
          }
         shift++;
       } while (shift <= (64 - 16));

      freg = 0;
      shift = 32;
      tmp.X_add_number = hi32.X_add_number << shift | lo32.X_add_number;
      while ((tmp.X_add_number & 1) == 0)
        {
          tmp.X_add_number >>= 1;
          freg++;
        }
      if (((tmp.X_add_number + 1) & tmp.X_add_number) == 0) /* (power-of-2 - 1) */
        {
          shift = COUNT_TOP_ZEROES((unsigned int)hi32.X_add_number);
	  if (shift != 0)
            {
              tmp.X_op = O_constant;
              tmp.X_add_number = (offsetT)-1;
              macro_build ((char *) NULL, counter, &tmp, "addiu", "t,r,j", reg, 0,
                           (int) BFD_RELOC_LO16); /* set all ones */
              if (freg != 0)
                {
                  freg += shift;
                  macro_build ((char *) NULL, counter, NULL,
                               (freg >= 32) ? "dsll32" : "dsll",
                               "d,w,<", reg, reg,
                               (freg >= 32) ? freg - 32 : freg);
                }
              macro_build ((char *) NULL, counter, NULL, (shift >= 32) ? "dsrl32" : "dsrl",
                           "d,w,<", reg, reg, (shift >= 32) ? shift - 32 : shift);
              return;
            }
        }
d2015 1
a2015 1
                       reg, 0);
d5109 1
a5109 9
	  if (insn_isa <= mips_isa)
	    insn_error = "opcode not supported on this processor";
	  else
	    {
	      static char buf[100];

	      sprintf (buf, "opcode requires -mips%d or greater", insn_isa);
	      insn_error = buf;
	    }
d5407 4
a5410 6
		      && ! (strcmp (str, "mtc1") == 0
			    || strcmp (str, "mfc1") == 0
			    || strcmp (str, "lwc1") == 0
			    || strcmp (str, "swc1") == 0
			    || strcmp (str, "l.s") == 0
			    || strcmp (str, "s.s") == 0))
d5762 3
a5764 5
	      if (strncmp (s, "$fcc", 4) != 0)
		break;
	      s += 4;
	      regno = 0;
	      do
d5766 3
a5768 3
		  regno *= 10;
		  regno += *s - '0';
		  ++s;
a5769 3
	      while (isdigit (*s));
	      if (regno > 7)
		as_bad ("invalid condition code register $fcc%d", regno);
d5771 1
a5771 1
		ip->insn_opcode |= regno << OP_SH_BCC;
d5773 3
a5775 1
		ip->insn_opcode |= regno << OP_SH_CCC;
a6180 7
	      case '5':
		if (strcmp (p, "5000") == 0
		    || strcmp (p, "5k") == 0
		    || strcmp (p, "5K") == 0)
		  mips_cpu = 5000;
		break;

d6201 1
a6201 1
	    if (sv && mips_cpu != 4300 && mips_cpu != 4100 && mips_cpu != 5000)
a6405 1
#ifndef OBJ_ELF
a6413 1
#endif
d6542 1
a6542 3
  assert (fixP->fx_size == 4
	  || fixP->fx_r_type == BFD_RELOC_16
	  || fixP->fx_r_type == BFD_RELOC_64);
a6600 29
    case BFD_RELOC_64:
      /* This is handled like BFD_RELOC_32, but we output a sign
         extended value if we are only 32 bits.  */
      if (fixP->fx_done
	  || (mips_pic == EMBEDDED_PIC && SWITCH_TABLE (fixP)))
	{
	  if (8 <= sizeof (valueT))
	    md_number_to_chars (fixP->fx_frag->fr_literal + fixP->fx_where,
				value, 8);
	  else
	    {
	      long w1, w2;
	      long hiv;

	      w1 = w2 = fixP->fx_where;
	      if (byte_order == BIG_ENDIAN)
		w1 += 4;
	      else
		w2 += 4;
	      md_number_to_chars (fixP->fx_frag->fr_literal + w1, value, 4);
	      if ((value & 0x80000000) != 0)
		hiv = 0xffffffff;
	      else
		hiv = 0;
	      md_number_to_chars (fixP->fx_frag->fr_literal + w2, hiv, 4);
	    }
	}
      break;

a7677 3
	case BFD_RELOC_64:
	  code = BFD_RELOC_64_PCREL;
	  break;
a7680 1
	case BFD_RELOC_64_PCREL:
@


1.1.1.5
log
@Import of binutils-2.8.1 from Cygnus/FSF
@
text
@d2 1
a2 1
   Copyright (C) 1993, 1994, 1995, 1996, 1997 Free Software Foundation, Inc.
a38 7
#include "itbl-ops.h"

#ifdef DEBUG
#define DBG(x) printf x
#else
#define DBG(x)
#endif
a41 1
static int mips_output_flavor PARAMS ((void));
a77 1
#define TREG 24
a85 8
#define ILLEGAL_REG (32)

/* Allow override of standard little-endian ECOFF format.  */

#ifndef ECOFF_LITTLE_FORMAT
#define ECOFF_LITTLE_FORMAT "ecoff-littlemips"
#endif

d101 1
a101 1
      return target_big_endian ? "ecoff-bigmips" : ECOFF_LITTLE_FORMAT;
a119 44
/* This is the set of options which may be modified by the .set
   pseudo-op.  We use a struct so that .set push and .set pop are more
   reliable.  */

struct mips_set_options
{
  /* MIPS ISA (Instruction Set Architecture) level.  This is set to -1
     if it has not been initialized.  Changed by `.set mipsN', and the
     -mipsN command line option, and the default CPU.  */
  int isa;
  /* Whether we are assembling for the mips16 processor.  0 if we are
     not, 1 if we are, and -1 if the value has not been initialized.
     Changed by `.set mips16' and `.set nomips16', and the -mips16 and
     -nomips16 command line options, and the default CPU.  */
  int mips16;
  /* Non-zero if we should not reorder instructions.  Changed by `.set
     reorder' and `.set noreorder'.  */
  int noreorder;
  /* Non-zero if we should not permit the $at ($1) register to be used
     in instructions.  Changed by `.set at' and `.set noat'.  */
  int noat;
  /* Non-zero if we should warn when a macro instruction expands into
     more than one machine instruction.  Changed by `.set nomacro' and
     `.set macro'.  */
  int warn_about_macros;
  /* Non-zero if we should not move instructions.  Changed by `.set
     move', `.set volatile', `.set nomove', and `.set novolatile'.  */
  int nomove;
  /* Non-zero if we should not optimize branches by moving the target
     of the branch into the delay slot.  Actually, we don't perform
     this optimization anyhow.  Changed by `.set bopt' and `.set
     nobopt'.  */
  int nobopt;
  /* Non-zero if we should not autoextend mips16 instructions.
     Changed by `.set autoextend' and `.set noautoextend'.  */
  int noautoextend;
};

/* This is the struct we use to hold the current set of options.  Note
   that we must set the isa and mips16 fields to -1 to indicate that
   they have not been initialized.  */

static struct mips_set_options mips_opts = { -1, -1 };

d126 4
a144 1

a150 1
/* Itbl support may require additional care here. */
d184 2
a185 2
/* Non-zero if any .set noreorder directives were used.  */

d187 3
d210 1
a210 1
static int nopic_need_relax PARAMS ((symbolS *, int));
a214 3
/* The opcode hash table we use for the mips16.  */
static struct hash_control *mips16_op_hash = NULL;

d246 2
d250 3
a294 3
/* The reloc type for the previous instruction, if any.  */
static bfd_reloc_code_real_type prev_insn_reloc_type;

a303 4
/* Non-zero if the previous instruction uses an extend opcode (if
   mips16).  */
static int prev_insn_extended;

a307 16
/* If this is set, it points to a frag holding nop instructions which
   were inserted before the start of a noreorder section.  If those
   nops turn out to be unnecessary, the size of the frag can be
   decreased.  */
static fragS *prev_nop_frag;

/* The number of nop instructions we created in prev_nop_frag.  */
static int prev_nop_frag_holds;

/* The number of nop instructions that we know we need in
   prev_nop_frag. */
static int prev_nop_frag_required;

/* The number of instructions we've seen since prev_nop_frag.  */
static int prev_nop_frag_since;

a331 19

/* Map normal MIPS register numbers to mips16 register numbers.  */

#define X ILLEGAL_REG
static const int mips32_to_16_reg_map[] =
{
  X, X, 2, 3, 4, 5, 6, 7,
  X, X, X, X, X, X, X, X,
  0, 1, X, X, X, X, X, X,
  X, X, X, X, X, X, X, X
};
#undef X

/* Map mips16 register numbers to normal MIPS register numbers.  */

static const int mips16_to_32_reg_map[] =
{
  16, 17, 2, 3, 4, 5, 6, 7
};
d396 1
a396 1
   (((old) << 23) \
d402 2
a403 2
#define RELAX_OLD(i) (((i) >> 23) & 0x7f)
#define RELAX_NEW(i) (((i) >> 16) & 0x7f)
a407 40

/* For mips16 code, we use an entirely different form of relaxation.
   mips16 supports two versions of most instructions which take
   immediate values: a small one which takes some small value, and a
   larger one which takes a 16 bit value.  Since branches also follow
   this pattern, relaxing these values is required.

   We can assemble both mips16 and normal MIPS code in a single
   object.  Therefore, we need to support this type of relaxation at
   the same time that we support the relaxation described above.  We
   use the high bit of the subtype field to distinguish these cases.

   The information we store for this type of relaxation is the
   argument code found in the opcode file for this relocation, whether
   the user explicitly requested a small or extended form, and whether
   the relocation is in a jump or jal delay slot.  That tells us the
   size of the value, and how it should be stored.  We also store
   whether the fragment is considered to be extended or not.  We also
   store whether this is known to be a branch to a different section,
   whether we have tried to relax this frag yet, and whether we have
   ever extended a PC relative fragment because of a shift count.  */
#define RELAX_MIPS16_ENCODE(type, small, ext, dslot, jal_dslot)	\
  (0x80000000							\
   | ((type) & 0xff)						\
   | ((small) ? 0x100 : 0)					\
   | ((ext) ? 0x200 : 0)					\
   | ((dslot) ? 0x400 : 0)					\
   | ((jal_dslot) ? 0x800 : 0))
#define RELAX_MIPS16_P(i) (((i) & 0x80000000) != 0)
#define RELAX_MIPS16_TYPE(i) ((i) & 0xff)
#define RELAX_MIPS16_USER_SMALL(i) (((i) & 0x100) != 0)
#define RELAX_MIPS16_USER_EXT(i) (((i) & 0x200) != 0)
#define RELAX_MIPS16_DSLOT(i) (((i) & 0x400) != 0)
#define RELAX_MIPS16_JAL_DSLOT(i) (((i) & 0x800) != 0)
#define RELAX_MIPS16_EXTENDED(i) (((i) & 0x1000) != 0)
#define RELAX_MIPS16_MARK_EXTENDED(i) ((i) | 0x1000)
#define RELAX_MIPS16_CLEAR_EXTENDED(i) ((i) &~ 0x1000)
#define RELAX_MIPS16_LONG_BRANCH(i) (((i) & 0x2000) != 0)
#define RELAX_MIPS16_MARK_LONG_BRANCH(i) ((i) | 0x2000)
#define RELAX_MIPS16_CLEAR_LONG_BRANCH(i) ((i) &~ 0x2000)
a417 2
enum mips_regclass { MIPS_GR_REG, MIPS_FP_REG, MIPS16_REG };

d419 1
a419 1
				  unsigned int reg, enum mips_regclass class));
a420 1
static void mips16_mark_labels PARAMS ((void));
d426 2
a427 2
static void mips_no_prev_insn PARAMS ((int));
static void mips_emit_delays PARAMS ((boolean));
a434 3
static void mips16_macro_build PARAMS ((char *, int *, expressionS *,
					const char *, const char *,
					va_list));
a442 1
static void mips16_macro PARAMS ((struct mips_cl_insn * ip));
a446 4
static void mips16_ip PARAMS ((char *str, struct mips_cl_insn * ip));
static void mips16_immed PARAMS ((char *, unsigned int, int, offsetT, boolean,
				  boolean, boolean, unsigned long *,
				  boolean *, unsigned short *));
a462 1
static void s_insn PARAMS ((int));
a468 2
static void s_mips_stab PARAMS ((int));
static int mips16_extended_frag PARAMS ((fragS *, asection *, long));
a500 1
  {"insn", s_insn, 0},
a525 1
  {"stabn", s_mips_stab, 'n'},
a557 24
/* Symbols labelling the current insn.  */

struct insn_label_list
{
  struct insn_label_list *next;
  symbolS *label;
};

static struct insn_label_list *insn_labels;
static struct insn_label_list *free_insn_labels;

static void mips_clear_insn_labels PARAMS ((void));

static inline void
mips_clear_insn_labels ()
{
  register struct insn_label_list **pl;

  for (pl = &free_insn_labels; *pl != NULL; pl = &(*pl)->next)
    ;
  *pl = insn_labels;
  insn_labels = NULL;
}

a574 4
/* These are set by mips16_ip if an explicit extension is used.  */

static boolean mips16_small, mips16_ext;

d586 1
a586 1
  if (mips_opts.isa == -1)
d602 1
a602 1
	  mips_opts.isa = 1;
d609 1
a609 1
	  mips_opts.isa = 2;
d617 1
a617 1
	  mips_opts.isa = 3;
d623 1
a623 1
	  mips_opts.isa = 3;
d630 1
a630 1
	  mips_opts.isa = 3;
d636 1
a636 1
	  mips_opts.isa = 3;
d644 1
a644 1
	  mips_opts.isa = 3;
d650 1
a650 1
          mips_opts.isa = 3;
d658 1
a658 1
	  mips_opts.isa = 2;
d667 1
a667 1
	  mips_opts.isa = 4;
d674 1
a674 1
	  mips_opts.isa = 4;
d680 1
a680 1
	  mips_opts.isa = 4;
a683 6
      else if (strcmp (cpu, "mips16") == 0)
	{
	  mips_opts.isa = 3;
	  if (mips_cpu == -1)
	    mips_cpu = 0; /* FIXME */
	}
d686 1
a686 1
	  mips_opts.isa = 1;
a694 8
  if (mips_opts.mips16 < 0)
    {
      if (strncmp (TARGET_CPU, "mips16", sizeof "mips16" - 1) == 0)
	mips_opts.mips16 = 1;
      else
	mips_opts.mips16 = 0;
    }

d704 1
a704 2

  if (mips_4010 || mips_cpu == 4300)
a708 1
  /* Itbl support may require additional care here. */
d714 1
a714 1
  if (mips_opts.isa < 2 && mips_trap)
d717 1
a717 1
  switch (mips_opts.isa)
d735 1
a735 1
  file_mips_isa = mips_opts.isa;
d765 1
a765 50
  mips16_op_hash = hash_new ();

  i = 0;
  while (i < bfd_mips16_num_opcodes)
    {
      const char *name = mips16_opcodes[i].name;

      retval = hash_insert (mips16_op_hash, name, (PTR) &mips16_opcodes[i]);
      if (retval != NULL)
	as_fatal ("internal error: can't hash `%s': %s\n",
		  mips16_opcodes[i].name, retval);
      do
	{
	  if (mips16_opcodes[i].pinfo != INSN_MACRO
	      && ((mips16_opcodes[i].match & mips16_opcodes[i].mask)
		  != mips16_opcodes[i].match))
	    as_fatal ("internal error: bad opcode: `%s' \"%s\"\n",
		      mips16_opcodes[i].name, mips16_opcodes[i].args);
	  ++i;
	}
      while (i < bfd_mips16_num_opcodes
	     && strcmp (mips16_opcodes[i].name, name) == 0);
    }

  /* We add all the general register names to the symbol table.  This
     helps us detect invalid uses of them.  */
  for (i = 0; i < 32; i++)
    {
      char buf[5];

      sprintf (buf, "$%d", i);
      symbol_table_insert (symbol_new (buf, reg_section, i,
				       &zero_address_frag));
    }
  symbol_table_insert (symbol_new ("$fp", reg_section, FP,
				   &zero_address_frag));
  symbol_table_insert (symbol_new ("$sp", reg_section, SP,
				   &zero_address_frag));
  symbol_table_insert (symbol_new ("$gp", reg_section, GP,
				   &zero_address_frag));
  symbol_table_insert (symbol_new ("$at", reg_section, AT,
				   &zero_address_frag));
  symbol_table_insert (symbol_new ("$kt0", reg_section, KT0,
				   &zero_address_frag));
  symbol_table_insert (symbol_new ("$kt1", reg_section, KT1,
				   &zero_address_frag));
  symbol_table_insert (symbol_new ("$pc", reg_section, -1,
				   &zero_address_frag));

  mips_no_prev_insn (false);
d781 4
a784 9
      /* On a native system, sections must be aligned to 16 byte
	 boundaries.  When configured for an embedded ELF target, we
	 don't bother.  */
      if (strcmp (TARGET_OS, "elf") != 0)
	{
	  (void) bfd_set_section_alignment (stdoutput, text_section, 4);
	  (void) bfd_set_section_alignment (stdoutput, data_section, 4);
	  (void) bfd_set_section_alignment (stdoutput, bss_section, 4);
	}
a790 1
	flagword flags;
a795 7
	/* The ABI says this section should be loaded so that the
	   running program can access it.  However, we don't load it
	   if we are configured for an embedded target */
	flags = SEC_READONLY | SEC_DATA;
	if (strcmp (TARGET_OS, "elf") != 0)
	  flags |= SEC_ALLOC | SEC_LOAD;

d800 5
a804 2

	    (void) bfd_set_section_flags (stdoutput, sec, flags);
d816 3
a818 1
	    (void) bfd_set_section_flags (stdoutput, sec, flags);
d876 1
a876 9
  if (mips_opts.mips16)
    mips16_ip (str, &insn);
  else
    {
      mips_ip (str, &insn);
      DBG(("returned from mips_ip(%s) insn_opcode = 0x%x\n", 
		str, insn.insn_opcode));
    }

a881 1

d884 1
a884 4
      if (mips_opts.mips16)
	mips16_macro (&insn);
      else
	macro (&insn);
d898 2
a899 2
/* See whether instruction IP reads register REG.  CLASS is the type
   of register.  */
d902 1
a902 1
insn_uses_reg (ip, reg, class)
d905 1
a905 1
     enum mips_regclass class;
a906 7
  if (class == MIPS16_REG)
    {
      assert (mips_opts.mips16);
      reg = mips16_to_32_reg_map[reg];
      class = MIPS_GR_REG;
    }

d908 1
a908 1
  if (class == MIPS_GR_REG && reg == 0)
d911 1
a911 1
  if (class == MIPS_FP_REG)
a912 1
      assert (! mips_opts.mips16);
d921 1
a921 1
	  && ((((ip->insn_opcode >> OP_SH_FS) & OP_MASK_FS) &~(unsigned)1)
d925 1
a925 1
	  && ((((ip->insn_opcode >> OP_SH_FT) & OP_MASK_FT) &~(unsigned)1)
d929 1
a929 1
  else if (! mips_opts.mips16)
a937 28
  else
    {
      if ((ip->insn_mo->pinfo & MIPS16_INSN_READ_X)
	  && (mips16_to_32_reg_map[((ip->insn_opcode >> MIPS16OP_SH_RX)
				    & MIPS16OP_MASK_RX)]
	      == reg))
	return 1;
      if ((ip->insn_mo->pinfo & MIPS16_INSN_READ_Y)
	  && (mips16_to_32_reg_map[((ip->insn_opcode >> MIPS16OP_SH_RY)
				    & MIPS16OP_MASK_RY)]
	      == reg))
	return 1;
      if ((ip->insn_mo->pinfo & MIPS16_INSN_READ_Z)
	  && (mips16_to_32_reg_map[((ip->insn_opcode >> MIPS16OP_SH_MOVE32Z)
				    & MIPS16OP_MASK_MOVE32Z)]
	      == reg))
	return 1;
      if ((ip->insn_mo->pinfo & MIPS16_INSN_READ_T) && reg == TREG)
	return 1;
      if ((ip->insn_mo->pinfo & MIPS16_INSN_READ_SP) && reg == SP)
	return 1;
      if ((ip->insn_mo->pinfo & MIPS16_INSN_READ_31) && reg == RA)
	return 1;
      if ((ip->insn_mo->pinfo & MIPS16_INSN_READ_GPR_X)
	  && ((ip->insn_opcode >> MIPS16OP_SH_REGR32)
	      & MIPS16OP_MASK_REGR32) == reg)
	return 1;
    }
d952 2
a953 2
  if (! mips_opts.noreorder
      && mips_opts.isa < 4
d955 1
a955 1
	  || (mips_opts.isa < 2
a961 1
      /* Itbl support may require additional care here. */
a969 27
/* Mark instruction labels in mips16 mode.  This permits the linker to
   handle them specially, such as generating jalx instructions when
   needed.  We also make them odd for the duration of the assembly, in
   order to generate the right sort of code.  We will make them even
   in the adjust_symtab routine, while leaving them marked.  This is
   convenient for the debugger and the disassembler.  The linker knows
   to make them odd again.  */

static void
mips16_mark_labels ()
{
  if (mips_opts.mips16)
    {
      struct insn_label_list *l;

      for (l = insn_labels; l != NULL; l = l->next)
	{
#ifdef OBJ_ELF
	  if (OUTPUT_FLAVOR == bfd_target_elf_flavour)
	    S_SET_OTHER (l->label, STO_MIPS16);
#endif
	  if ((l->label->sy_value.X_add_number & 1) == 0)
	    ++l->label->sy_value.X_add_number;
	}
    }
}

a987 4
  /* Mark instruction labels in mips16 mode.  */
  if (mips_opts.mips16)
    mips16_mark_labels ();

d991 1
a991 1
  if (place == NULL && (! mips_opts.noreorder || prev_nop_frag != NULL))
a992 2
      int prev_prev_nop;

d1014 1
a1014 4
#define emit_nop()					\
  (mips_opts.mips16					\
   ? md_number_to_chars (frag_more (2), 0x6500, 2)	\
   : md_number_to_chars (frag_more (4), 0, 4))
d1018 1
a1018 2
      if (! mips_opts.mips16
	  && mips_opts.isa < 4
d1021 1
a1021 1
	      || (mips_opts.isa < 2
a1027 1
          /* Itbl support may require additional care here. */
d1033 1
a1033 1
				MIPS_GR_REG))
d1036 1
a1036 2
      else if (! mips_opts.mips16
	       && mips_opts.isa < 4
d1039 1
a1039 1
		   || (mips_opts.isa < 2
a1055 3
          /* Itbl support may require additional care here. FIXME!
             Need to modify this to include knowledge about 
             user specified delays!  */
d1062 1
a1062 1
				    MIPS_FP_REG))
d1071 1
a1071 1
				    MIPS_FP_REG))
a1081 1
              /* Itbl support may require additional care here. */
d1090 1
a1090 2
      else if (! mips_opts.mips16
	       && mips_opts.isa < 4
a1098 1
          /* Itbl support may require additional care here. */
a1123 6
      /* If the previous instruction was in a noreorder section, then
         we don't want to insert the nop after all.  */
      /* Itbl support may require additional care here. */
      if (prev_insn_unreordered)
	nops = 0;

d1132 12
a1143 20
      if ((! mips_opts.mips16
	   && mips_opts.isa < 4
	   && (prev_prev_insn.insn_mo->pinfo & INSN_COPROC_MOVE_DELAY)
	   && (prev_prev_insn.insn_mo->pinfo & INSN_WRITE_COND_CODE)
	   && (pinfo & INSN_READ_COND_CODE)
	   && ! cop_interlocks)
	  || ((prev_prev_insn.insn_mo->pinfo & INSN_READ_LO)
	      && (pinfo & INSN_WRITE_LO)
	      && ! interlocks)
	  || ((prev_prev_insn.insn_mo->pinfo & INSN_READ_HI)
	      && (pinfo & INSN_WRITE_HI)
	      && ! interlocks))
	prev_prev_nop = 1;
      else
	prev_prev_nop = 0;

      if (prev_prev_insn_unreordered)
	prev_prev_nop = 0;

      if (prev_prev_nop && nops == 0)
d1150 1
a1150 3
      if (nops > 0
	  && ! mips_opts.noreorder
	  && ip->insn_opcode == (mips_opts.mips16 ? 0x6500 : 0))
d1154 1
a1154 1
      if (nops > 0 && ! mips_opts.noreorder)
a1158 1
	  struct insn_label_list *l;
d1180 1
a1180 1
	  for (l = insn_labels; l != NULL; l = l->next)
d1182 3
a1184 6
	      assert (S_GET_SEGMENT (l->label) == now_seg);
	      l->label->sy_frag = frag_now;
	      S_SET_VALUE (l->label, (valueT) frag_now_fix ());
	      /* mips16 text labels are stored as odd.  */
	      if (mips_opts.mips16)
		++l->label->sy_value.X_add_number;
a1191 37
      else if (prev_nop_frag != NULL)
	{
	  /* We have a frag holding nops we may be able to remove.  If
             we don't need any nops, we can decrease the size of
             prev_nop_frag by the size of one instruction.  If we do
             need some nops, we count them in prev_nops_required. */
	  if (prev_nop_frag_since == 0)
	    {
	      if (nops == 0)
		{
		  prev_nop_frag->fr_fix -= mips_opts.mips16 ? 2 : 4;
		  --prev_nop_frag_holds;
		}
	      else
		prev_nop_frag_required += nops;
	    }
	  else
	    {
	      if (prev_prev_nop == 0)
		{
		  prev_nop_frag->fr_fix -= mips_opts.mips16 ? 2 : 4;
		  --prev_nop_frag_holds;
		}
	      else
		++prev_nop_frag_required;
	    }

	  if (prev_nop_frag_holds <= prev_nop_frag_required)
	    prev_nop_frag = NULL;

	  ++prev_nop_frag_since;

	  /* Sanity check: by the time we reach the second instruction
             after prev_nop_frag, we should have used up all the nops
             one way or another.  */
	  assert (prev_nop_frag_since <= 1 || prev_nop_frag == NULL);
	}
d1193 4
a1196 16

  if (reloc_type > BFD_RELOC_UNUSED)
    {
      /* We need to set up a variant frag.  */
      assert (mips_opts.mips16 && address_expr != NULL);
      f = frag_var (rs_machine_dependent, 4, 0,
		    RELAX_MIPS16_ENCODE (reloc_type - BFD_RELOC_UNUSED,
					 mips16_small, mips16_ext,
					 (prev_pinfo
					  & INSN_UNCOND_BRANCH_DELAY),
					 (prev_insn_reloc_type
					  == BFD_RELOC_MIPS16_JMP)),
		    make_expr_symbol (address_expr), (offsetT) 0,
		    (char *) NULL);
    }
  else if (place != NULL)
a1197 19
  else if (mips_opts.mips16
	   && ! ip->use_extend
	   && reloc_type != BFD_RELOC_MIPS16_JMP)
    {
      /* Make sure there is enough room to swap this instruction with
         a following jump instruction.  */
      frag_grow (6);
      f = frag_more (2);
    }
  else
    {
      if (mips_opts.mips16
	  && mips_opts.noreorder
	  && (prev_pinfo & INSN_UNCOND_BRANCH_DELAY) != 0)
	as_warn ("extended instruction in delay slot");

      f = frag_more (4);
    }

d1199 1
a1199 1
  if (address_expr != NULL && reloc_type < BFD_RELOC_UNUSED)
a1213 3
	      if ((address_expr->X_add_number & 3) != 0)
		as_bad ("jump to misaligned address (0x%lx)",
			(unsigned long) address_expr->X_add_number);
a1216 10
	    case BFD_RELOC_MIPS16_JMP:
	      if ((address_expr->X_add_number & 3) != 0)
		as_bad ("jump to misaligned address (0x%lx)",
			(unsigned long) address_expr->X_add_number);
	      ip->insn_opcode |=
		(((address_expr->X_add_number & 0x7c0000) << 3)
		 | ((address_expr->X_add_number & 0xf800000) >> 7)
		 | ((address_expr->X_add_number & 0x3fffc) >> 2));
	      break;

d1226 1
d1252 1
a1252 16
  if (! mips_opts.mips16)
    md_number_to_chars (f, ip->insn_opcode, 4);
  else if (reloc_type == BFD_RELOC_MIPS16_JMP)
    {
      md_number_to_chars (f, ip->insn_opcode >> 16, 2);
      md_number_to_chars (f + 2, ip->insn_opcode & 0xffff, 2);
    }
  else
    {
      if (ip->use_extend)
	{
	  md_number_to_chars (f, 0xf000 | ip->extend, 2);
	  f += 2;
	}
      md_number_to_chars (f, ip->insn_opcode, 2);
    }
d1255 17
a1271 29
  if (! mips_opts.mips16)
    {
      if (pinfo & INSN_WRITE_GPR_D)
	mips_gprmask |= 1 << ((ip->insn_opcode >> OP_SH_RD) & OP_MASK_RD);
      if ((pinfo & (INSN_WRITE_GPR_T | INSN_READ_GPR_T)) != 0)
	mips_gprmask |= 1 << ((ip->insn_opcode >> OP_SH_RT) & OP_MASK_RT);
      if (pinfo & INSN_READ_GPR_S)
	mips_gprmask |= 1 << ((ip->insn_opcode >> OP_SH_RS) & OP_MASK_RS);
      if (pinfo & INSN_WRITE_GPR_31)
	mips_gprmask |= 1 << 31;
      if (pinfo & INSN_WRITE_FPR_D)
	mips_cprmask[1] |= 1 << ((ip->insn_opcode >> OP_SH_FD) & OP_MASK_FD);
      if ((pinfo & (INSN_WRITE_FPR_S | INSN_READ_FPR_S)) != 0)
	mips_cprmask[1] |= 1 << ((ip->insn_opcode >> OP_SH_FS) & OP_MASK_FS);
      if ((pinfo & (INSN_WRITE_FPR_T | INSN_READ_FPR_T)) != 0)
	mips_cprmask[1] |= 1 << ((ip->insn_opcode >> OP_SH_FT) & OP_MASK_FT);
      if ((pinfo & INSN_READ_FPR_R) != 0)
	mips_cprmask[1] |= 1 << ((ip->insn_opcode >> OP_SH_FR) & OP_MASK_FR);
      if (pinfo & INSN_COP)
	{
	  /* We don't keep enough information to sort these cases out. 
	     The itbl support does keep this information however, although 
	     we currently don't support itbl fprmats as part of the cop 
	     instruction.  May want to add this support in the future. */
	}
      /* Never set the bit for $0, which is always zero.  */
      mips_gprmask &=~ 1 << 0;
    }
  else
d1273 1
a1273 23
      if (pinfo & (MIPS16_INSN_WRITE_X | MIPS16_INSN_READ_X))
	mips_gprmask |= 1 << ((ip->insn_opcode >> MIPS16OP_SH_RX)
			      & MIPS16OP_MASK_RX);
      if (pinfo & (MIPS16_INSN_WRITE_Y | MIPS16_INSN_READ_Y))
	mips_gprmask |= 1 << ((ip->insn_opcode >> MIPS16OP_SH_RY)
			      & MIPS16OP_MASK_RY);
      if (pinfo & MIPS16_INSN_WRITE_Z)
	mips_gprmask |= 1 << ((ip->insn_opcode >> MIPS16OP_SH_RZ)
			      & MIPS16OP_MASK_RZ);
      if (pinfo & (MIPS16_INSN_WRITE_T | MIPS16_INSN_READ_T))
	mips_gprmask |= 1 << TREG;
      if (pinfo & (MIPS16_INSN_WRITE_SP | MIPS16_INSN_READ_SP))
	mips_gprmask |= 1 << SP;
      if (pinfo & (MIPS16_INSN_WRITE_31 | MIPS16_INSN_READ_31))
	mips_gprmask |= 1 << RA;
      if (pinfo & MIPS16_INSN_WRITE_GPR_Y)
	mips_gprmask |= 1 << MIPS16OP_EXTRACT_REG32R (ip->insn_opcode);
      if (pinfo & MIPS16_INSN_READ_Z)
	mips_gprmask |= 1 << ((ip->insn_opcode >> MIPS16OP_SH_MOVE32Z)
			      & MIPS16OP_MASK_MOVE32Z);
      if (pinfo & MIPS16_INSN_READ_GPR_X)
	mips_gprmask |= 1 << ((ip->insn_opcode >> MIPS16OP_SH_REGR32)
			      & MIPS16OP_MASK_REGR32);
d1275 2
d1278 1
a1278 1
  if (place == NULL && ! mips_opts.noreorder)
d1291 1
a1291 1
	      || mips_opts.nomove != 0
d1323 1
a1323 1
	      || insn_labels != NULL
d1325 2
a1326 5
		 can not do the swap.  This does not apply to the
		 mips16, which uses variant frags for different
		 purposes.  */
	      || (! mips_opts.mips16
		  && prev_insn_frag->fr_type == rs_machine_dependent)
d1335 1
a1335 2
	      || (! mips_opts.mips16
		  && mips_opts.isa < 4
d1340 1
a1340 2
	      || (! mips_opts.mips16
		  && mips_opts.isa < 4
a1341 1
              /* Itbl support may require additional care here. */
d1349 1
a1349 2
	      || (! mips_opts.mips16
		  && mips_opts.isa < 2
a1351 1
              /* Itbl support may require additional care here. */
d1364 1
a1364 2
	      || (! mips_opts.mips16
		  && (prev_pinfo & INSN_WRITE_GPR_T)
d1368 2
a1369 3
				    MIPS_GR_REG))
	      || (! mips_opts.mips16
		  && (prev_pinfo & INSN_WRITE_GPR_D)
d1373 1
a1373 29
				    MIPS_GR_REG))
	      || (mips_opts.mips16
		  && (((prev_pinfo & MIPS16_INSN_WRITE_X)
		       && insn_uses_reg (ip,
					 ((prev_insn.insn_opcode
					   >> MIPS16OP_SH_RX)
					  & MIPS16OP_MASK_RX),
					 MIPS16_REG))
		      || ((prev_pinfo & MIPS16_INSN_WRITE_Y)
			  && insn_uses_reg (ip,
					    ((prev_insn.insn_opcode
					      >> MIPS16OP_SH_RY)
					     & MIPS16OP_MASK_RY),
					    MIPS16_REG))
		      || ((prev_pinfo & MIPS16_INSN_WRITE_Z)
			  && insn_uses_reg (ip,
					    ((prev_insn.insn_opcode
					      >> MIPS16OP_SH_RZ)
					     & MIPS16OP_MASK_RZ),
					    MIPS16_REG))
		      || ((prev_pinfo & MIPS16_INSN_WRITE_T)
			  && insn_uses_reg (ip, TREG, MIPS_GR_REG))
		      || ((prev_pinfo & MIPS16_INSN_WRITE_31)
			  && insn_uses_reg (ip, RA, MIPS_GR_REG))
		      || ((prev_pinfo & MIPS16_INSN_WRITE_GPR_Y)
			  && insn_uses_reg (ip,
					    MIPS16OP_EXTRACT_REG32R (prev_insn.
								     insn_opcode),
					    MIPS_GR_REG))))
d1377 1
a1377 2
	      || (! mips_opts.mips16
		  && (prev_pinfo & INSN_WRITE_GPR_T)
d1385 1
a1385 2
	      || (! mips_opts.mips16
		  && (prev_pinfo & INSN_WRITE_GPR_D)
a1392 6
	      || (mips_opts.mips16
		  && (pinfo & MIPS16_INSN_WRITE_31)
		  && ((prev_pinfo & MIPS16_INSN_WRITE_31)
		      || ((prev_pinfo & MIPS16_INSN_WRITE_GPR_Y)
			  && (MIPS16OP_EXTRACT_REG32R (prev_insn.insn_opcode)
			      == RA))))
d1396 1
a1396 2
	      || (! mips_opts.mips16
		  && (pinfo & INSN_WRITE_GPR_D)
d1400 3
a1402 7
				    MIPS_GR_REG))
	      || (! mips_opts.mips16
		  && (pinfo & INSN_WRITE_GPR_31)
		  && insn_uses_reg (&prev_insn, 31, MIPS_GR_REG))
	      || (mips_opts.mips16
		  && (pinfo & MIPS16_INSN_WRITE_31)
		  && insn_uses_reg (&prev_insn, RA, MIPS_GR_REG))
d1407 1
a1407 1
		  && insn_uses_reg (&prev_insn, AT, MIPS_GR_REG))
d1411 1
a1411 3
	      || (! mips_opts.mips16
		  && mips_opts.isa < 4
              /* Itbl support may require additional care here. */
d1413 1
a1413 1
		      || (mips_opts.isa < 2
d1419 1
a1419 1
				    MIPS_GR_REG))
d1425 1
a1425 12
		  && (prev_pinfo & INSN_READ_COND_CODE))
	      /* If the previous instruction uses the PC, we can not
                 swap.  */
	      || (mips_opts.mips16
		  && (prev_pinfo & MIPS16_INSN_READ_PC))
	      /* If the previous instruction was extended, we can not
                 swap.  */
	      || (mips_opts.mips16 && prev_insn_extended)
	      /* If the previous instruction had a fixup in mips16
                 mode, we can not swap.  This normally means that the
                 previous instruction was a 4 byte branch anyhow.  */
	      || (mips_opts.mips16 && prev_insn_fixp))
d1438 3
d1442 5
a1446 1
	      if (! mips_opts.mips16)
d1448 2
a1449 17
		  char *prev_f;
		  char temp[4];

		  prev_f = prev_insn_frag->fr_literal + prev_insn_where;
		  memcpy (temp, prev_f, 4);
		  memcpy (prev_f, f, 4);
		  memcpy (f, temp, 4);
		  if (prev_insn_fixp)
		    {
		      prev_insn_fixp->fx_frag = frag_now;
		      prev_insn_fixp->fx_where = f - frag_now->fr_literal;
		    }
		  if (fixp)
		    {
		      fixp->fx_frag = prev_insn_frag;
		      fixp->fx_where = prev_insn_where;
		    }
d1451 1
a1451 1
	      else
d1453 2
a1454 22
		  char *prev_f;
		  char temp[2];

		  assert (prev_insn_fixp == NULL);
		  prev_f = prev_insn_frag->fr_literal + prev_insn_where;
		  memcpy (temp, prev_f, 2);
		  memcpy (prev_f, f, 2);
		  if (reloc_type != BFD_RELOC_MIPS16_JMP)
		    {
		      assert (reloc_type == BFD_RELOC_UNUSED);
		      memcpy (f, temp, 2);
		    }
		  else
		    {
		      memcpy (f, f + 2, 2);
		      memcpy (f + 2, temp, 2);
		    }
		  if (fixp)
		    {
		      fixp->fx_frag = prev_insn_frag;
		      fixp->fx_where = prev_insn_where;
		    }
a1455 1

a1468 4

	  prev_insn_fixp = NULL;
	  prev_insn_reloc_type = BFD_RELOC_UNUSED;
	  prev_insn_extended = 0;
a1479 3
	  prev_insn_fixp = NULL;
	  prev_insn_reloc_type = BFD_RELOC_UNUSED;
	  prev_insn_extended = 0;
a1493 6

	  prev_insn_fixp = fixp;
	  prev_insn_reloc_type = reloc_type;
	  if (mips_opts.mips16)
	    prev_insn_extended = (ip->use_extend
				  || reloc_type > BFD_RELOC_UNUSED);
d1500 1
a1502 11
  else if (place == NULL)
    {
      /* We need to record a bit of information even when we are not
         reordering, in order to determine the base address for mips16
         PC relative relocs.  */
      prev_prev_insn = prev_insn;
      prev_insn = *ip;
      prev_insn_reloc_type = reloc_type;
      prev_prev_insn_unreordered = prev_insn_unreordered;
      prev_insn_unreordered = 1;
    }
d1505 1
a1505 1
  mips_clear_insn_labels ();
d1509 1
a1509 2
   label.  If PRESERVE is non-zero, it remembers enough information to
   know whether nops are needed before a noreorder section. */
d1512 1
a1512 2
mips_no_prev_insn (preserve)
     int preserve;
d1514 2
a1515 9
  if (! preserve)
    {
      prev_insn.insn_mo = &dummy_opcode;
      prev_prev_insn.insn_mo = &dummy_opcode;
      prev_nop_frag = NULL;
      prev_nop_frag_holds = 0;
      prev_nop_frag_required = 0;
      prev_nop_frag_since = 0;
    }
a1518 2
  prev_insn_extended = 0;
  prev_insn_reloc_type = BFD_RELOC_UNUSED;
d1520 1
a1520 1
  mips_clear_insn_labels ();
d1526 1
a1526 2
   kept for the previous instructions.  The INSNS parameter is true if
   instructions are to follow. */
d1529 1
a1529 2
mips_emit_delays (insns)
     boolean insns;
d1531 1
a1531 1
  if (! mips_opts.noreorder)
d1533 1
a1533 1
      int nops;
d1535 2
a1536 3
      nops = 0;
      if ((! mips_opts.mips16
	   && mips_opts.isa < 4
d1546 1
a1546 2
	  || (! mips_opts.mips16
	      && mips_opts.isa < 2
d1551 2
a1552 4
          /* Itbl support may require additional care here. */
	  ++nops;
	  if ((! mips_opts.mips16
	       && mips_opts.isa < 4
d1558 1
a1558 4
	    ++nops;

	  if (prev_insn_unreordered)
	    nops = 0;
d1560 1
a1560 2
      else if ((! mips_opts.mips16
		&& mips_opts.isa < 4
d1566 2
d1569 2
a1570 32
          /* Itbl support may require additional care here. */
	  if (! prev_prev_insn_unreordered)
	    ++nops;
	}

      if (nops > 0)
	{
	  struct insn_label_list *l;

	  if (insns)
	    {
	      /* Record the frag which holds the nop instructions, so
                 that we can remove them if we don't need them.  */
	      frag_grow (mips_opts.mips16 ? nops * 2 : nops * 4);
	      prev_nop_frag = frag_now;
	      prev_nop_frag_holds = nops;
	      prev_nop_frag_required = 0;
	      prev_nop_frag_since = 0;
	    }

	  for (; nops > 0; --nops)
	    emit_nop ();

	  if (insns)
	    {
	      /* Move on to a new frag, so that it is safe to simply
                 decrease the size of prev_nop_frag. */
	      frag_wane (frag_now);
	      frag_new (0);
	    }

	  for (l = insn_labels; l != NULL; l = l->next)
d1572 3
a1574 6
	      assert (S_GET_SEGMENT (l->label) == now_seg);
	      l->label->sy_frag = frag_now;
	      S_SET_VALUE (l->label, (valueT) frag_now_fix ());
	      /* mips16 text labels are stored as odd.  */
	      if (mips_opts.mips16)
		++l->label->sy_value.X_add_number;
d1579 1
a1579 5
  /* Mark instruction labels in mips16 mode.  */
  if (mips_opts.mips16 && insns)
    mips16_mark_labels ();

  mips_no_prev_insn (insns);
d1621 1
a1621 1
  if (mips_opts.warn_about_macros && place == NULL && *counter == 1)
a1626 7
  if (mips_opts.mips16)
    {
      mips16_macro_build (place, counter, ep, name, fmt, args);
      va_end (args);
      return;
    }

d1635 1
a1635 1
	     && mips_opts.isa < 2)
d1637 1
a1637 1
	     && mips_opts.isa < 3)
d1639 1
a1639 1
	     && mips_opts.isa < 4)
d1645 1
a1645 2
	     && ! mips_4100)
         )
d1778 3
d1782 1
a1782 1
mips16_macro_build (place, counter, ep, name, fmt, args)
d1786 1
a1786 3
     const char *name;
     const char *fmt;
     va_list args;
d1788 1
d1791 2
d1794 7
a1800 4
  r = BFD_RELOC_UNUSED;
  insn.insn_mo = (struct mips_opcode *) hash_find (mips16_op_hash, name);
  assert (insn.insn_mo);
  assert (strcmp (name, insn.insn_mo->name) == 0);
d1802 10
a1811 2
  while (strcmp (fmt, insn.insn_mo->args) != 0
	 || insn.insn_mo->pinfo == INSN_MACRO)
d1813 5
a1817 3
      ++insn.insn_mo;
      assert (insn.insn_mo->name);
      assert (strcmp (name, insn.insn_mo->name) == 0);
d1820 7
a1826 2
  insn.insn_opcode = insn.insn_mo->match;
  insn.use_extend = false;
d1828 2
a1829 3
  for (;;)
    {
      int c;
d1831 4
a1834 5
      c = *fmt++;
      switch (c)
	{
	case '\0':
	  break;
d1836 2
a1837 150
	case ',':
	case '(':
	case ')':
	  continue;

	case 'y':
	case 'w':
	  insn.insn_opcode |= va_arg (args, int) << MIPS16OP_SH_RY;
	  continue;

	case 'x':
	case 'v':
	  insn.insn_opcode |= va_arg (args, int) << MIPS16OP_SH_RX;
	  continue;

	case 'z':
	  insn.insn_opcode |= va_arg (args, int) << MIPS16OP_SH_RZ;
	  continue;

	case 'Z':
	  insn.insn_opcode |= va_arg (args, int) << MIPS16OP_SH_MOVE32Z;
	  continue;

	case '0':
	case 'S':
	case 'P':
	case 'R':
	  continue;

	case 'X':
	  insn.insn_opcode |= va_arg (args, int) << MIPS16OP_SH_REGR32;
	  continue;

	case 'Y':
	  {
	    int regno;

	    regno = va_arg (args, int);
	    regno = ((regno & 7) << 2) | ((regno & 0x18) >> 3);
	    insn.insn_opcode |= regno << MIPS16OP_SH_REG32R;
	  }
	  continue;

	case '<':
	case '>':
	case '4':
	case '5':
	case 'H':
	case 'W':
	case 'D':
	case 'j':
	case '8':
	case 'V':
	case 'C':
	case 'U':
	case 'k':
	case 'K':
	case 'p':
	case 'q':
	  {
	    assert (ep != NULL);

	    if (ep->X_op != O_constant)
	      r = BFD_RELOC_UNUSED + c;
	    else
	      {
		mips16_immed ((char *) NULL, 0, c, ep->X_add_number, false,
			      false, false, &insn.insn_opcode,
			      &insn.use_extend, &insn.extend);
		ep = NULL;
		r = BFD_RELOC_UNUSED;
	      }
	  }
	  continue;

	case '6':
	  insn.insn_opcode |= va_arg (args, int) << MIPS16OP_SH_IMM6;
	  continue;
	}

      break;
    }

  assert (r == BFD_RELOC_UNUSED ? ep == NULL : ep != NULL);

  append_insn (place, &insn, ep, r, false);
}

/*
 * Generate a "lui" instruction.
 */
static void
macro_build_lui (place, counter, ep, regnum)
     char *place;
     int *counter;
     expressionS *ep;
     int regnum;
{
  expressionS high_expr;
  struct mips_cl_insn insn;
  bfd_reloc_code_real_type r;
  CONST char *name = "lui";
  CONST char *fmt = "t,u";

  assert (! mips_opts.mips16);

  if (place == NULL)
    high_expr = *ep;
  else
    {
      high_expr.X_op = O_constant;
      high_expr.X_add_number = ep->X_add_number;
    }

  if (high_expr.X_op == O_constant)
    {
      /* we can compute the instruction now without a relocation entry */
      if (high_expr.X_add_number & 0x8000)
	high_expr.X_add_number += 0x10000;
      high_expr.X_add_number =
	((unsigned long) high_expr.X_add_number >> 16) & 0xffff;
      r = BFD_RELOC_UNUSED;
    }
  else
    {
      assert (ep->X_op == O_symbol);
      /* _gp_disp is a special case, used from s_cpload.  */
      assert (mips_pic == NO_PIC
	      || strcmp (S_GET_NAME (ep->X_add_symbol), "_gp_disp") == 0);
      r = BFD_RELOC_HI16_S;
    }

  /*
   * If the macro is about to expand into a second instruction,
   * print a warning if needed. We need to pass ip as a parameter
   * to generate a better warning message here...
   */
  if (mips_opts.warn_about_macros && place == NULL && *counter == 1)
    as_warn ("Macro instruction expanded into multiple instructions");

  if (place == NULL)
    *counter += 1;		/* bump instruction counter */

  insn.insn_mo = (struct mips_opcode *) hash_find (op_hash, name);
  assert (insn.insn_mo);
  assert (strcmp (name, insn.insn_mo->name) == 0);
  assert (strcmp (fmt, insn.insn_mo->args) == 0);

  insn.insn_opcode = insn.insn_mo->match | (regnum << OP_SH_RT);
  if (r == BFD_RELOC_UNUSED)
d1967 2
a1968 2
  int freg;
  expressionS hi32, lo32;
d2002 2
a2003 6
	       || ((mips_opts.isa < 3 || ! dbl)
		   && (ep->X_add_number &~ (offsetT) 0xffffffff) == 0)
	       || (mips_opts.isa < 3
		   && ! dbl
		   && ((ep->X_add_number &~ (offsetT) 0xffffffff)
		       == ~ (offsetT) 0xffffffff)))
d2017 1
a2017 1
  if (mips_opts.isa < 3)
d2028 2
a2029 2
      hi32.X_add_number = (valueT) hi32.X_add_number >> 16;
      hi32.X_add_number = (valueT) hi32.X_add_number >> 16;
d2031 2
a2052 3
      int shift, bit;
      unsigned long hi, lo;

d2057 2
a2058 2
              macro_build ((char *) NULL, counter, &lo32, "addiu", "t,r,j",
			   reg, 0, (int) BFD_RELOC_LO16);
d2065 2
a2066 3
	      if (lo32.X_add_number & 0xffff)
		macro_build ((char *) NULL, counter, &lo32, "ori", "t,r,i",
			     reg, reg, (int) BFD_RELOC_LO16);
d2071 5
a2075 3
      /* Check for 16bit shifted constant.  We know that hi32 is
         non-zero, so start the mask on the first bit of the hi32
         value.  */
d2079 11
a2089 31
	 unsigned long himask, lomask;

	 if (shift < 32)
	   {
	     himask = 0xffff >> (32 - shift);
	     lomask = (0xffff << shift) & 0xffffffff;
	   }
	 else
	   {
	     himask = 0xffff << (shift - 32);
	     lomask = 0;
	   }
	 if ((hi32.X_add_number & ~ (offsetT) himask) == 0
	     && (lo32.X_add_number & ~ (offsetT) lomask) == 0)
	   {
	     expressionS tmp;

	     tmp.X_op = O_constant;
	     if (shift < 32)
	       tmp.X_add_number = ((hi32.X_add_number << (32 - shift))
				   | (lo32.X_add_number >> shift));
	     else
	       tmp.X_add_number = hi32.X_add_number >> (shift - 32);
	     macro_build ((char *) NULL, counter, &tmp, "ori", "t,r,i", reg, 0,
			  (int) BFD_RELOC_LO16);
	     macro_build ((char *) NULL, counter, NULL,
			  (shift >= 32) ? "dsll32" : "dsll",
			  "d,w,<", reg, reg,
			  (shift >= 32) ? shift - 32 : shift);
	     return;
	   }
d2093 9
a2101 30
      /* Find the bit number of the lowest one bit, and store the
         shifted value in hi/lo.  */
      hi = (unsigned long) (hi32.X_add_number & 0xffffffff);
      lo = (unsigned long) (lo32.X_add_number & 0xffffffff);
      if (lo != 0)
	{
	  bit = 0;
	  while ((lo & 1) == 0)
	    {
	      lo >>= 1;
	      ++bit;
	    }
	  lo |= (hi & (((unsigned long) 1 << bit) - 1)) << (32 - bit);
	  hi >>= bit;
	}
      else
	{
	  bit = 32;
	  while ((hi & 1) == 0)
	    {
	      hi >>= 1;
	      ++bit;
	    }
	  lo = hi;
	  hi = 0;
	}

      /* Optimize if the shifted value is a (power of 2) - 1.  */
      if ((hi == 0 && ((lo + 1) & lo) == 0)
	  || (lo == 0xffffffff && ((hi + 1) & hi) == 0))
d2103 1
a2103 1
          shift = COUNT_TOP_ZEROES ((unsigned int) hi32.X_add_number);
a2105 4
	      expressionS tmp;

	      /* This instruction will set the register to be all
                 ones.  */
d2107 4
a2110 4
              tmp.X_add_number = (offsetT) -1;
              macro_build ((char *) NULL, counter, &tmp, "addiu", "t,r,j",
			   reg, 0, (int) BFD_RELOC_LO16);
              if (bit != 0)
d2112 1
a2112 1
                  bit += shift;
d2114 1
a2114 1
                               (bit >= 32) ? "dsll32" : "dsll",
d2116 1
a2116 1
                               (bit >= 32) ? bit - 32 : bit);
d2118 2
a2119 4
              macro_build ((char *) NULL, counter, NULL,
			   (shift >= 32) ? "dsrl32" : "dsrl",
                           "d,w,<", reg, reg,
			   (shift >= 32) ? shift - 32 : shift);
a2122 5

      /* Sign extend hi32 before calling load_register, because we can
         generally get better code when we load a sign extended value.  */
      if ((hi32.X_add_number & 0x80000000) != 0)
	hi32.X_add_number |= ~ (offsetT) 0xffffffff;
d2199 1
a2199 1
          || nopic_need_relax (ep->X_add_symbol, 1))
d2205 1
a2205 1
		       mips_opts.isa < 3 ? "addiu" : "daddiu",
d2208 2
a2209 3
			RELAX_ENCODE (4, 8, 0, 4, 0,
				      mips_opts.warn_about_macros),
			ep->X_add_symbol, (offsetT) 0, (char *) NULL);
d2215 1
a2215 1
		   mips_opts.isa < 3 ? "addiu" : "daddiu",
d2233 1
a2233 1
		   mips_opts.isa < 3 ? "lw" : "ld",
d2237 2
a2238 2
		    RELAX_ENCODE (0, 4, -8, 0, 0, mips_opts.warn_about_macros),
		    ep->X_add_symbol, (offsetT) 0, (char *) NULL);
d2240 1
a2240 1
		   mips_opts.isa < 3 ? "addiu" : "daddiu",
d2248 1
a2248 1
		       mips_opts.isa < 3 ? "addiu" : "daddiu",
d2277 1
a2277 1
		   mips_opts.isa < 3 ? "addu" : "daddu",
d2280 1
a2280 1
		   mips_opts.isa < 3 ? "lw" : "ld",
d2284 2
a2285 2
				  mips_opts.warn_about_macros),
		    ep->X_add_symbol, (offsetT) 0, (char *) NULL);
d2296 1
a2296 1
		   mips_opts.isa < 3 ? "lw" : "ld",
d2302 1
a2302 1
		   mips_opts.isa < 3 ? "addiu" : "daddiu",
d2310 1
a2310 1
		       mips_opts.isa < 3 ? "addiu" : "daddiu",
d2320 1
a2320 1
		   mips_opts.isa < 3 ? "addiu" : "daddiu",
a2367 2
  assert (! mips_opts.mips16);

d2388 2
a2389 2
      mips_emit_delays (true);
      ++mips_opts.noreorder;
d2402 1
a2402 1
      --mips_opts.noreorder;
d2520 1
a2520 1
      if (mips_opts.isa >= 3)
d2528 1
a2528 1
	  && (mips_opts.isa < 3 || sizeof (maxnum) > 4))
d2566 1
a2566 1
      if (mips_opts.isa >= 3)
d2575 1
a2575 1
	  && (mips_opts.isa < 3 || sizeof (maxnum) > 4))
d2703 1
a2703 1
      if (mips_opts.isa >= 3)
d2711 1
a2711 1
	  && (mips_opts.isa < 3 || sizeof (maxnum) > 4))
d2846 2
a2847 2
      mips_emit_delays (true);
      ++mips_opts.noreorder;
d2890 1
a2890 1
      --mips_opts.noreorder;
d2986 2
a2987 2
      mips_emit_delays (true);
      ++mips_opts.noreorder;
d2999 1
a2999 1
      --mips_opts.noreorder;
d3032 1
a3032 1
		       mips_opts.isa < 3 ? "addiu" : "daddiu",
d3067 1
a3067 1
	      || nopic_need_relax (offset_expr.X_add_symbol, 1))
d3073 1
a3073 1
			   mips_opts.isa < 3 ? "addiu" : "daddiu",
d3077 2
a3078 2
					  mips_opts.warn_about_macros),
			    offset_expr.X_add_symbol, (offsetT) 0,
d3085 1
a3085 1
		       mips_opts.isa < 3 ? "addiu" : "daddiu",
d3140 1
a3140 1
					   ? mips_opts.warn_about_macros
d3142 1
a3142 1
			    offset_expr.X_add_symbol, (offsetT) 0,
d3150 1
a3150 1
			   mips_opts.isa < 3 ? "addiu" : "daddiu",
d3162 1
a3162 1
			   mips_opts.isa < 3 ? "addiu" : "daddiu",
d3166 1
a3166 1
			       offset_expr.X_add_symbol, (offsetT) 0,
d3187 1
a3187 1
			       mips_opts.isa < 3 ? "addu" : "daddu",
d3202 1
a3202 1
			   mips_opts.isa < 3 ? "addiu" : "daddiu",
d3205 1
a3205 1
			   mips_opts.isa < 3 ? "addu" : "daddu",
d3209 1
a3209 1
			       offset_expr.X_add_symbol, (offsetT) 0,
d3264 1
a3264 1
		       mips_opts.isa < 3 ? "addu" : "daddu",
d3290 1
a3290 1
					   ? mips_opts.warn_about_macros
d3292 1
a3292 1
			    offset_expr.X_add_symbol, (offsetT) 0,
d3301 1
a3301 1
			   mips_opts.isa < 3 ? "addiu" : "daddiu",
d3307 1
a3307 1
					   ? mips_opts.warn_about_macros
d3309 1
a3309 1
			    offset_expr.X_add_symbol, (offsetT) 0,
d3334 1
a3334 1
			       mips_opts.isa < 3 ? "addu" : "daddu",
d3348 1
a3348 1
			   mips_opts.isa < 3 ? "addiu" : "daddiu",
d3351 1
a3351 1
			   mips_opts.isa < 3 ? "addu" : "daddu",
d3358 1
a3358 1
					   ? mips_opts.warn_about_macros
d3360 1
a3360 1
			    offset_expr.X_add_symbol, (offsetT) 0,
d3383 1
a3383 1
			   mips_opts.isa < 3 ? "addiu" : "daddiu",
d3401 1
a3401 1
			       mips_opts.isa < 3 ? "addu" : "daddu",
d3413 1
a3413 1
			   mips_opts.isa < 3 ? "addiu" : "daddiu",
d3417 1
a3417 1
			   mips_opts.isa < 3 ? "addu" : "daddu",
d3428 1
a3428 1
		       mips_opts.isa < 3 ? "addiu" : "daddiu",
d3436 1
a3436 1
		     mips_opts.isa < 3 ? "addu" : "daddu",
d3478 1
a3478 1
			   mips_opts.isa < 3 ? "lw" : "ld",
d3519 1
a3519 1
			   mips_opts.isa < 3 ? "lw" : "ld",
d3526 1
a3526 2
			    offset_expr.X_add_symbol, (offsetT) 0,
			    (char *) NULL);
d3539 1
a3539 1
			   mips_opts.isa < 3 ? "addu" : "daddu",
d3542 1
a3542 1
			   mips_opts.isa < 3 ? "lw" : "ld",
d3550 1
a3550 2
			    offset_expr.X_add_symbol, (offsetT) 0,
			    (char *) NULL);
d3557 1
a3557 1
			   mips_opts.isa < 3 ? "lw" : "ld",
d3565 1
a3565 1
		       mips_opts.isa < 3 ? "addiu" : "daddiu",
d3574 1
a3574 1
	      if (mips_opts.noreorder)
d3579 1
a3579 1
			   mips_opts.isa < 3 ? "lw" : "ld",
a3612 1
      /* Itbl support may require additional care here. */
a3616 1
      /* Itbl support may require additional care here. */
a3620 1
      /* Itbl support may require additional care here. */
a3624 1
      /* Itbl support may require additional care here. */
a3636 1
      /* Itbl support may require additional care here. */
a3640 1
      /* Itbl support may require additional care here. */
a3644 1
      /* Itbl support may require additional care here. */
a3685 1
      /* Itbl support may require additional care here. */
a3689 1
      /* Itbl support may require additional care here. */
a3693 1
      /* Itbl support may require additional care here. */
a3697 1
      /* Itbl support may require additional care here. */
a3714 1
      /* Itbl support may require additional care here. */
a3717 1
      /* Itbl support may require additional care here. */
a3721 1
      /* Itbl support may require additional care here. */
a3732 1
      /* Itbl support may require additional care here. */
d3778 1
a3778 1
		  || nopic_need_relax (offset_expr.X_add_symbol, 1))
d3787 3
a3789 4
					      (mips_opts.warn_about_macros
					       || (used_at
						   && mips_opts.noat))),
				offset_expr.X_add_symbol, (offsetT) 0,
d3802 1
a3802 1
		  || nopic_need_relax (offset_expr.X_add_symbol, 1))
d3808 1
a3808 1
			       mips_opts.isa < 3 ? "addu" : "daddu",
d3814 1
a3814 1
				offset_expr.X_add_symbol, (offsetT) 0,
d3821 1
a3821 1
			   mips_opts.isa < 3 ? "addu" : "daddu",
d3854 1
a3854 1
		       mips_opts.isa < 3 ? "lw" : "ld",
d3859 1
a3859 1
			offset_expr.X_add_symbol, (offsetT) 0,
d3862 1
a3862 1
		       mips_opts.isa < 3 ? "addiu" : "daddiu",
d3866 1
a3866 1
			 mips_opts.isa < 3 ? "addu" : "daddu",
d3905 1
a3905 1
		       mips_opts.isa < 3 ? "addu" : "daddu",
d3908 1
a3908 1
		       mips_opts.isa < 3 ? "lw" : "ld",
d3913 1
a3913 1
			offset_expr.X_add_symbol, (offsetT) 0, (char *) NULL);
d3920 1
a3920 1
		       mips_opts.isa < 3 ? "lw" : "ld",
d3926 1
a3926 1
		       mips_opts.isa < 3 ? "addiu" : "daddiu",
d3930 1
a3930 1
			 mips_opts.isa < 3 ? "addu" : "daddu",
d3953 1
a3953 1
			   mips_opts.isa < 3 ? "addu" : "daddu",
d4007 1
a4007 1
		       mips_opts.isa < 3 ? "lw" : "ld",
d4015 1
a4015 1
		       mips_opts.isa < 3 ? "addiu" : "daddiu",
d4024 1
a4024 1
      if (mips_opts.isa >= 3)
d4054 1
a4054 1
	  if (mips_opts.isa >= 2)
d4069 1
a4069 1
			 mips_opts.isa < 3 ? "lw" : "ld",
d4077 1
a4077 1
	  if (mips_opts.isa >= 2)
d4099 1
a4099 1
      assert (mips_opts.isa < 2);
d4101 1
a4101 1
		   target_big_endian ? treg + 1 : treg,
d4107 1
a4107 1
		   target_big_endian ? treg : treg + 1,
a4130 1
      /* Itbl support may require additional care here. */
d4132 1
a4132 1
      if (mips_opts.isa >= 2)
d4143 1
a4143 1
      if (mips_opts.isa >= 2)
a4150 1
      /* Itbl support may require additional care here. */
d4155 1
a4155 1
      if (mips_opts.isa >= 3)
d4166 1
a4166 1
      if (mips_opts.isa >= 3)
d4186 1
a4186 2
      /* Itbl support may require additional care here. */
      if (! target_big_endian)
d4207 1
a4207 1
	      || nopic_need_relax (offset_expr.X_add_symbol, 1))
d4227 1
a4227 1
			       mips_opts.isa < 3 ? "addu" : "daddu",
a4233 1
              /* Itbl support may require additional care here. */
a4242 1
              /* Itbl support may require additional care here. */
d4250 2
a4251 2
					  used_at && mips_opts.noat),
			    offset_expr.X_add_symbol, (offsetT) 0,
d4271 1
a4271 1
			   mips_opts.isa < 3 ? "addu" : "daddu",
a4275 1
          /* Itbl support may require additional care here. */
a4282 1
          /* Itbl support may require additional care here. */
d4316 1
a4316 1
		       mips_opts.isa < 3 ? "lw" : "ld",
d4321 1
a4321 1
			 mips_opts.isa < 3 ? "addu" : "daddu",
a4322 1
          /* Itbl support may require additional care here. */
a4331 1
          /* Itbl support may require additional care here. */
d4339 1
a4339 1
			   offset_expr.X_add_symbol, (offsetT) 0,
d4379 1
a4379 1
		       mips_opts.isa < 3 ? "addu" : "daddu",
d4382 1
a4382 1
		       mips_opts.isa < 3 ? "lw" : "ld",
d4387 1
a4387 1
			 mips_opts.isa < 3 ? "addu" : "daddu",
a4388 1
          /* Itbl support may require additional care here. */
a4397 1
          /* Itbl support may require additional care here. */
d4407 1
a4407 1
			offset_expr.X_add_symbol, (offsetT) 0,
d4415 1
a4415 1
		       mips_opts.isa < 3 ? "lw" : "ld",
d4423 1
a4423 1
			   mips_opts.isa < 3 ? "addu" : "daddu",
a4426 1
          /* Itbl support may require additional care here. */
a4436 1
          /* Itbl support may require additional care here. */
d4460 1
a4460 1
			   mips_opts.isa < 3 ? "addu" : "daddu",
a4465 1
          /* Itbl support may require additional care here. */
a4469 1
          /* Itbl support may require additional care here. */
d4488 1
a4488 1
      assert (mips_opts.isa < 3);
a4494 34

   /* New code added to support COPZ instructions.
      This code builds table entries out of the macros in mip_opcodes.
      R4000 uses interlocks to handle coproc delays.
      Other chips (like the R3000) require nops to be inserted for delays.

      FIXME: Currently, we require that the user handle delays.
      In order to fill delay slots for non-interlocked chips,
      we must have a way to specify delays based on the coprocessor.
      Eg. 4 cycles if load coproc reg from memory, 1 if in cache, etc.
      What are the side-effects of the cop instruction?
      What cache support might we have and what are its effects?
      Both coprocessor & memory require delays. how long???
      What registers are read/set/modified? 

      If an itbl is provided to interpret cop instructions,
      this knowledge can be encoded in the itbl spec. */

    case M_COP0:
      s = "cop0";
      goto copz;
    case M_COP1:
      s = "cop1";
      goto copz;
    case M_COP2:
      s = "cop2";
      goto copz;
    case M_COP3:
      s = "cop3";
    copz:
      /* For now we just do C (same as Cz). */
      macro_build ((char *) NULL, &icnt, &offset_expr, s, "C");
      return;

a4496 17
      /* Try and see if this is a new itbl instruction.
         This code builds table entries out of the macros in mip_opcodes.
         FIXME: For now we just assemble the expression and pass it's
         value along as a 32-bit immediate.
         We may want to have the assembler assemble this value, 
         so that we gain the assembler's knowledge of delay slots,
         symbols, etc.
         Would it be more efficient to use mask (id) here? */
      if (itbl_have_entries 
	  && (immed_expr = itbl_assemble (ip->insn_mo->name, "")))
        {
	  s = ip->insn_mo->name;
	  s2 = "cop3";
	  coproc = ITBL_DECODE_PNUM (immed_expr);;
	  macro_build ((char *) NULL, &icnt, &immed_expr, s, "C");
	  return;
        }
d4500 1
a4500 1
  if (mips_opts.noat)
d4565 2
a4566 2
      mips_emit_delays (true);
      ++mips_opts.noreorder;
d4585 1
a4585 1
      --mips_opts.noreorder;
d4592 2
a4593 2
      mips_emit_delays (true);
      ++mips_opts.noreorder;
d4609 1
a4609 1
      --mips_opts.noreorder;
d4645 1
a4645 1
      assert (mips_opts.isa < 2);
d4649 1
a4649 1
		   target_big_endian ? treg + 1 : treg,
d4653 1
a4653 1
		   target_big_endian ? treg : treg + 1,
d4697 1
a4697 1
		       mips_opts.isa < 3 ? "addiu" : "daddiu",
d4842 1
a4842 1
		       mips_opts.isa < 3 ? "addiu" : "daddiu",
d4856 1
a4856 1
		       mips_opts.isa < 3 ? "addiu" : "daddiu",
d4930 1
a4930 1
      assert (mips_opts.isa < 2);
d4938 2
a4939 2
      mips_emit_delays (true);
      ++mips_opts.noreorder;
d4956 1
a4956 1
      --mips_opts.noreorder;
d4968 1
a4968 1
      if (! target_big_endian)
d4972 1
a4972 1
      if (! target_big_endian)
d4994 1
a4994 1
      if (! target_big_endian)
d4998 1
a4998 1
      if (! target_big_endian)
d5019 1
a5019 1
		     mips_opts.isa < 3 ? "addu" : "daddu",
d5021 1
a5021 1
      if (! target_big_endian)
d5027 1
a5027 1
      if (! target_big_endian)
d5040 1
a5040 1
		     mips_opts.isa < 3 ? "addu" : "daddu",
d5042 1
a5042 1
      if (target_big_endian)
d5047 1
a5047 1
      if (target_big_endian)
d5062 1
a5062 1
      if (target_big_endian)
d5067 1
a5067 1
      if (target_big_endian)
d5087 1
a5087 1
      if (! target_big_endian)
d5091 1
a5091 1
      if (! target_big_endian)
d5112 1
a5112 1
		     mips_opts.isa < 3 ? "addu" : "daddu",
d5114 1
a5114 1
      if (! target_big_endian)
d5120 1
a5120 1
      if (! target_big_endian)
d5132 1
a5132 1
		     mips_opts.isa < 3 ? "addu" : "daddu",
d5134 1
a5134 1
      if (! target_big_endian)
d5140 1
a5140 1
      if (! target_big_endian)
d5146 1
a5146 1
      if (! target_big_endian)
a5158 2
      /* FIXME: Check if this is one of the itbl macros, since they
	 are added dynamically. */
d5162 1
a5162 1
  if (mips_opts.noat)
a5165 241
/* Implement macros in mips16 mode.  */

static void
mips16_macro (ip)
     struct mips_cl_insn *ip;
{
  int mask;
  int xreg, yreg, zreg, tmp;
  int icnt;
  expressionS expr1;
  int dbl;
  const char *s, *s2, *s3;

  mask = ip->insn_mo->mask;

  xreg = (ip->insn_opcode >> MIPS16OP_SH_RX) & MIPS16OP_MASK_RX;
  yreg = (ip->insn_opcode >> MIPS16OP_SH_RY) & MIPS16OP_MASK_RY;
  zreg = (ip->insn_opcode >> MIPS16OP_SH_RZ) & MIPS16OP_MASK_RZ;

  icnt = 0;

  expr1.X_op = O_constant;
  expr1.X_op_symbol = NULL;
  expr1.X_add_symbol = NULL;
  expr1.X_add_number = 1;

  dbl = 0;

  switch (mask)
    {
    default:
      internalError ();

    case M_DDIV_3:
      dbl = 1;
    case M_DIV_3:
      s = "mflo";
      goto do_div3;
    case M_DREM_3:
      dbl = 1;
    case M_REM_3:
      s = "mfhi";
    do_div3:
      mips_emit_delays (true);
      ++mips_opts.noreorder;
      mips_any_noreorder = 1;
      macro_build ((char *) NULL, &icnt, NULL,
		   dbl ? "ddiv" : "div",
		   "0,x,y", xreg, yreg);
      expr1.X_add_number = 2;
      macro_build ((char *) NULL, &icnt, &expr1, "bnez", "x,p", yreg);
      macro_build ((char *) NULL, &icnt, NULL, "break", "6", 7);
      /* FIXME: The normal code checks for of -1 / -0x80000000 here,
         since that causes an overflow.  We should do that as well,
         but I don't see how to do the comparisons without a temporary
         register.  */
      --mips_opts.noreorder;
      macro_build ((char *) NULL, &icnt, NULL, s, "x", zreg);
      break;

    case M_DIVU_3:
      s = "divu";
      s2 = "mflo";
      goto do_divu3;
    case M_REMU_3:
      s = "divu";
      s2 = "mfhi";
      goto do_divu3;
    case M_DDIVU_3:
      s = "ddivu";
      s2 = "mflo";
      goto do_divu3;
    case M_DREMU_3:
      s = "ddivu";
      s2 = "mfhi";
    do_divu3:
      mips_emit_delays (true);
      ++mips_opts.noreorder;
      mips_any_noreorder = 1;
      macro_build ((char *) NULL, &icnt, NULL, s, "0,x,y", xreg, yreg);
      expr1.X_add_number = 2;
      macro_build ((char *) NULL, &icnt, &expr1, "bnez", "x,p", yreg);
      macro_build ((char *) NULL, &icnt, NULL, "break", "6", 7);
      --mips_opts.noreorder;
      macro_build ((char *) NULL, &icnt, NULL, s2, "x", zreg);
      break;

    case M_DMUL:
      dbl = 1;
    case M_MUL:
      macro_build ((char *) NULL, &icnt, NULL,
		   dbl ? "dmultu" : "multu",
		   "x,y", xreg, yreg);
      macro_build ((char *) NULL, &icnt, NULL, "mflo", "x", zreg);
      return;

    case M_DSUBU_I:
      dbl = 1;
      goto do_subu;
    case M_SUBU_I:
    do_subu:
      imm_expr.X_add_number = -imm_expr.X_add_number;
      macro_build ((char *) NULL, &icnt, &imm_expr,
		   dbl ? "daddiu" : "addiu",
		   "y,x,4", yreg, xreg);
      break;

    case M_SUBU_I_2:
      imm_expr.X_add_number = -imm_expr.X_add_number;
      macro_build ((char *) NULL, &icnt, &imm_expr, "addiu",
		   "x,k", xreg);
      break;

    case M_DSUBU_I_2:
      imm_expr.X_add_number = -imm_expr.X_add_number;
      macro_build ((char *) NULL, &icnt, &imm_expr, "daddiu",
		   "y,j", yreg);
      break;

    case M_BEQ:
      s = "cmp";
      s2 = "bteqz";
      goto do_branch;
    case M_BNE:
      s = "cmp";
      s2 = "btnez";
      goto do_branch;
    case M_BLT:
      s = "slt";
      s2 = "btnez";
      goto do_branch;
    case M_BLTU:
      s = "sltu";
      s2 = "btnez";
      goto do_branch;
    case M_BLE:
      s = "slt";
      s2 = "bteqz";
      goto do_reverse_branch;
    case M_BLEU:
      s = "sltu";
      s2 = "bteqz";
      goto do_reverse_branch;
    case M_BGE:
      s = "slt";
      s2 = "bteqz";
      goto do_branch;
    case M_BGEU:
      s = "sltu";
      s2 = "bteqz";
      goto do_branch;
    case M_BGT:
      s = "slt";
      s2 = "btnez";
      goto do_reverse_branch;
    case M_BGTU:
      s = "sltu";
      s2 = "btnez";

    do_reverse_branch:
      tmp = xreg;
      xreg = yreg;
      yreg = tmp;

    do_branch:
      macro_build ((char *) NULL, &icnt, (expressionS *) NULL, s, "x,y",
		   xreg, yreg);
      macro_build ((char *) NULL, &icnt, &offset_expr, s2, "p");
      break;

    case M_BEQ_I:
      s = "cmpi";
      s2 = "bteqz";
      s3 = "x,U";
      goto do_branch_i;
    case M_BNE_I:
      s = "cmpi";
      s2 = "btnez";
      s3 = "x,U";
      goto do_branch_i;
    case M_BLT_I:
      s = "slti";
      s2 = "btnez";
      s3 = "x,8";
      goto do_branch_i;
    case M_BLTU_I:
      s = "sltiu";
      s2 = "btnez";
      s3 = "x,8";
      goto do_branch_i;
    case M_BLE_I:
      s = "slti";
      s2 = "btnez";
      s3 = "x,8";
      goto do_addone_branch_i;
    case M_BLEU_I:
      s = "sltiu";
      s2 = "btnez";
      s3 = "x,8";
      goto do_addone_branch_i;
    case M_BGE_I:
      s = "slti";
      s2 = "bteqz";
      s3 = "x,8";
      goto do_branch_i;
    case M_BGEU_I:
      s = "sltiu";
      s2 = "bteqz";
      s3 = "x,8";
      goto do_branch_i;
    case M_BGT_I:
      s = "slti";
      s2 = "bteqz";
      s3 = "x,8";
      goto do_addone_branch_i;
    case M_BGTU_I:
      s = "sltiu";
      s2 = "bteqz";
      s3 = "x,8";

    do_addone_branch_i:
      ++imm_expr.X_add_number;

    do_branch_i:
      macro_build ((char *) NULL, &icnt, &imm_expr, s, s3, xreg);
      macro_build ((char *) NULL, &icnt, &offset_expr, s2, "p");
      break;

    case M_ABS:
      expr1.X_add_number = 0;
      macro_build ((char *) NULL, &icnt, &expr1, "slti", "x,8",  yreg);
      if (xreg != yreg)
	macro_build ((char *) NULL, &icnt, (expressionS *) NULL,
		     "move", "y,X", xreg, yreg);
      expr1.X_add_number = 2;
      macro_build ((char *) NULL, &icnt, &expr1, "bteqz", "p");
      macro_build ((char *) NULL, &icnt, (expressionS *) NULL,
		   "neg", "x,w", xreg, xreg);
    }
}

d5187 1
a5187 1
  for (s = str; *s != '\0' && !isspace(*s); ++s)
d5189 4
a5192 2
  if (isspace (*s))
    *s++ = '\0';
d5194 7
d5224 7
a5230 9
      if (insn_isa > mips_opts.isa
	  || (insn->pinfo != INSN_MACRO
	      && (((insn->pinfo & INSN_ISA) == INSN_4650
		   && ! mips_4650)
		  || ((insn->pinfo & INSN_ISA) == INSN_4010
		      && ! mips_4010)
		  || ((insn->pinfo & INSN_ISA) == INSN_4100
		      && ! mips_4100)
		  )))
d5238 1
a5238 1
	  if (insn_isa <= mips_opts.isa)
a5447 25
		      else if (itbl_have_entries)
			{
			  char *p, *n;
			  int r;

			  p = s+1; 	/* advance past '$' */
			  n = itbl_get_field (&p);  /* n is name */

			  /* See if this is a register defined in an 
			     itbl entry */
			  r = itbl_get_reg_val (n);
			  if (r)
			    {
			      /* Get_field advances to the start of
				 the next field, so we need to back
				 rack to the end of the last field. */
			      if (p) 
				s = p - 1;
			      else 
				s = strchr (s,'\0');
			      regno = r;
			    }
			  else
			    goto notreg;
			  }
d5452 1
a5452 1
		      && ! mips_opts.noat
a5470 3

	/* Now that we have assembled one operand, we use the args string 
	 * to figure out where it goes in the instruction. */
a5502 5
		    case 'D':
		      /* Itbl operand; not yet implemented. FIXME ?? */
		      break;
		      /* What about all other operands like 'i', which
			 can be specified in the opcode table? */
d5543 1
a5543 1
		      && mips_opts.isa < 3
d5676 1
a5676 1
		    if (! target_big_endian)
d5721 2
a5722 3
		    frag_align (*args == 'l' ? 2 : 3, 0, 0);
		    if (OUTPUT_FLAVOR == bfd_target_elf_flavour
			&& strcmp (TARGET_OS, "elf") != 0)
d5810 1
a5810 1
			  && mips_opts.isa >= 3
d5934 2
a5935 714
      insn_error = "illegal operands";
      return;
    }
}

/* This routine assembles an instruction into its binary format when
   assembling for the mips16.  As a side effect, it sets one of the
   global variables imm_reloc or offset_reloc to the type of
   relocation to do if one of the operands is an address expression.
   It also sets mips16_small and mips16_ext if the user explicitly
   requested a small or extended instruction.  */

static void
mips16_ip (str, ip)
     char *str;
     struct mips_cl_insn *ip;
{
  char *s;
  const char *args;
  struct mips_opcode *insn;
  char *argsstart;
  unsigned int regno;
  unsigned int lastregno = 0;
  char *s_reset;

  insn_error = NULL;

  mips16_small = false;
  mips16_ext = false;

  for (s = str; islower (*s); ++s)
    ;
  switch (*s)
    {
    case '\0':
      break;

    case ' ':
      *s++ = '\0';
      break;

    case '.':
      if (s[1] == 't' && s[2] == ' ')
	{
	  *s = '\0';
	  mips16_small = true;
	  s += 3;
	  break;
	}
      else if (s[1] == 'e' && s[2] == ' ')
	{
	  *s = '\0';
	  mips16_ext = true;
	  s += 3;
	  break;
	}
      /* Fall through.  */
    default:
      insn_error = "unknown opcode";
      return;
    }

  if (mips_opts.noautoextend && ! mips16_ext)
    mips16_small = true;

  if ((insn = (struct mips_opcode *) hash_find (mips16_op_hash, str)) == NULL)
    {
      insn_error = "unrecognized opcode";
      return;
    }

  argsstart = s;
  for (;;)
    {
      assert (strcmp (insn->name, str) == 0);

      ip->insn_mo = insn;
      ip->insn_opcode = insn->match;
      ip->use_extend = false;
      imm_expr.X_op = O_absent;
      imm_reloc = BFD_RELOC_UNUSED;
      offset_expr.X_op = O_absent;
      offset_reloc = BFD_RELOC_UNUSED;
      for (args = insn->args; 1; ++args)
	{
	  int c;

	  if (*s == ' ')
	    ++s;

	  /* In this switch statement we call break if we did not find
             a match, continue if we did find a match, or return if we
             are done.  */

	  c = *args;
	  switch (c)
	    {
	    case '\0':
	      if (*s == '\0')
		{
		  /* Stuff the immediate value in now, if we can.  */
		  if (imm_expr.X_op == O_constant
		      && imm_reloc > BFD_RELOC_UNUSED
		      && insn->pinfo != INSN_MACRO)
		    {
		      mips16_immed ((char *) NULL, 0,
				    imm_reloc - BFD_RELOC_UNUSED,
				    imm_expr.X_add_number, true, mips16_small,
				    mips16_ext, &ip->insn_opcode,
				    &ip->use_extend, &ip->extend);
		      imm_expr.X_op = O_absent;
		      imm_reloc = BFD_RELOC_UNUSED;
		    }

		  return;
		}
	      break;

	    case ',':
	      if (*s++ == c)
		continue;
	      s--;
	      switch (*++args)
		{
		case 'v':
		  ip->insn_opcode |= lastregno << MIPS16OP_SH_RX;
		  continue;
		case 'w':
		  ip->insn_opcode |= lastregno << MIPS16OP_SH_RY;
		  continue;
		}
	      break;

	    case '(':
	    case ')':
	      if (*s++ == c)
		continue;
	      break;

	    case 'v':
	    case 'w':
	      if (s[0] != '$')
		{
		  if (c == 'v')
		    ip->insn_opcode |= lastregno << MIPS16OP_SH_RX;
		  else
		    ip->insn_opcode |= lastregno << MIPS16OP_SH_RY;
		  ++args;
		  continue;
		}
	      /* Fall through.  */
	    case 'x':
	    case 'y':
	    case 'z':
	    case 'Z':
	    case '0':
	    case 'S':
	    case 'R':
	    case 'X':
	    case 'Y':
	      if (s[0] != '$')
		break;
	      s_reset = s;
	      if (isdigit (s[1]))
		{
		  ++s;
		  regno = 0;
		  do
		    {
		      regno *= 10;
		      regno += *s - '0';
		      ++s;
		    }
		  while (isdigit (*s));
		  if (regno > 31)
		    {
		      as_bad ("invalid register number (%d)", regno);
		      regno = 2;
		    }
		}
	      else
		{
		  if (s[1] == 'f' && s[2] == 'p')
		    {
		      s += 3;
		      regno = FP;
		    }
		  else if (s[1] == 's' && s[2] == 'p')
		    {
		      s += 3;
		      regno = SP;
		    }
		  else if (s[1] == 'g' && s[2] == 'p')
		    {
		      s += 3;
		      regno = GP;
		    }
		  else if (s[1] == 'a' && s[2] == 't')
		    {
		      s += 3;
		      regno = AT;
		    }
		  else if (s[1] == 'k' && s[2] == 't' && s[3] == '0')
		    {
		      s += 4;
		      regno = KT0;
		    }
		  else if (s[1] == 'k' && s[2] == 't' && s[3] == '1')
		    {
		      s += 4;
		      regno = KT1;
		    }
		  else
		    break;
		}

	      if (*s == ' ')
		++s;
	      if (args[1] != *s)
		{
		  if (c == 'v' || c == 'w')
		    {
		      regno = mips16_to_32_reg_map[lastregno];
		      s = s_reset;
		      args++;
		    }
		}

	      switch (c)
		{
		case 'x':
		case 'y':
		case 'z':
		case 'v':
		case 'w':
		case 'Z':
		  regno = mips32_to_16_reg_map[regno];
		  break;

		case '0':
		  if (regno != 0)
		    regno = ILLEGAL_REG;
		  break;

		case 'S':
		  if (regno != SP)
		    regno = ILLEGAL_REG;
		  break;

		case 'R':
		  if (regno != RA)
		    regno = ILLEGAL_REG;
		  break;

		case 'X':
		case 'Y':
		  if (regno == AT && ! mips_opts.noat)
		    as_warn ("used $at without \".set noat\"");
		  break;

		default:
		  internalError ();
		}

	      if (regno == ILLEGAL_REG)
		break;

	      switch (c)
		{
		case 'x':
		case 'v':
		  ip->insn_opcode |= regno << MIPS16OP_SH_RX;
		  break;
		case 'y':
		case 'w':
		  ip->insn_opcode |= regno << MIPS16OP_SH_RY;
		  break;
		case 'z':
		  ip->insn_opcode |= regno << MIPS16OP_SH_RZ;
		  break;
		case 'Z':
		  ip->insn_opcode |= regno << MIPS16OP_SH_MOVE32Z;
		case '0':
		case 'S':
		case 'R':
		  break;
		case 'X':
		  ip->insn_opcode |= regno << MIPS16OP_SH_REGR32;
		  break;
		case 'Y':
		  regno = ((regno & 7) << 2) | ((regno & 0x18) >> 3);
		  ip->insn_opcode |= regno << MIPS16OP_SH_REG32R;
		  break;
		default:
		  internalError ();
		}

	      lastregno = regno;
	      continue;

	    case 'P':
	      if (strncmp (s, "$pc", 3) == 0)
		{
		  s += 3;
		  continue;
		}
	      break;

	    case '<':
	    case '>':
	    case '[':
	    case ']':
	    case '4':
	    case '5':
	    case 'H':
	    case 'W':
	    case 'D':
	    case 'j':
	    case '8':
	    case 'V':
	    case 'C':
	    case 'U':
	    case 'k':
	    case 'K':
	      if (s[0] == '%'
		  && strncmp (s + 1, "gprel(", sizeof "gprel(" - 1) == 0)
		{
		  /* This is %gprel(SYMBOL).  We need to read SYMBOL,
                     and generate the appropriate reloc.  If the text
                     inside %gprel is not a symbol name with an
                     optional offset, then we generate a normal reloc
                     and will probably fail later.  */
		  my_getExpression (&imm_expr, s + sizeof "%gprel" - 1);
		  if (imm_expr.X_op == O_symbol)
		    {
		      mips16_ext = true;
		      imm_reloc = BFD_RELOC_MIPS16_GPREL;
		      s = expr_end;
		      ip->use_extend = true;
		      ip->extend = 0;
		      continue;
		    }
		}
	      else
		{
		  /* Just pick up a normal expression.  */
		  my_getExpression (&imm_expr, s);
		}

	      if (imm_expr.X_op == O_register)
		{
		  /* What we thought was an expression turned out to
                     be a register.  */

		  if (s[0] == '(' && args[1] == '(')
		    {
		      /* It looks like the expression was omitted
			 before a register indirection, which means
			 that the expression is implicitly zero.  We
			 still set up imm_expr, so that we handle
			 explicit extensions correctly.  */
		      imm_expr.X_op = O_constant;
		      imm_expr.X_add_number = 0;
		      imm_reloc = (int) BFD_RELOC_UNUSED + c;
		      continue;
		    }

		  break;
		}

	      /* We need to relax this instruction.  */
	      imm_reloc = (int) BFD_RELOC_UNUSED + c;
	      s = expr_end;
	      continue;

	    case 'p':
	    case 'q':
	    case 'A':
	    case 'B':
	    case 'E':
	      /* We use offset_reloc rather than imm_reloc for the PC
                 relative operands.  This lets macros with both
                 immediate and address operands work correctly.  */
	      my_getExpression (&offset_expr, s);

	      if (offset_expr.X_op == O_register)
		break;

	      /* We need to relax this instruction.  */
	      offset_reloc = (int) BFD_RELOC_UNUSED + c;
	      s = expr_end;
	      continue;

	    case '6':		/* break code */
	      my_getExpression (&imm_expr, s);
	      check_absolute_expr (ip, &imm_expr);
	      if ((unsigned long) imm_expr.X_add_number > 63)
		{
		  as_warn ("Invalid value for `%s' (%lu)",
			   ip->insn_mo->name,
			   (unsigned long) imm_expr.X_add_number);
		  imm_expr.X_add_number &= 0x3f;
		}
	      ip->insn_opcode |= imm_expr.X_add_number << MIPS16OP_SH_IMM6;
	      imm_expr.X_op = O_absent;
	      s = expr_end;
	      continue;

	    case 'a':		/* 26 bit address */
	      my_getExpression (&offset_expr, s);
	      s = expr_end;
	      offset_reloc = BFD_RELOC_MIPS16_JMP;
	      ip->insn_opcode <<= 16;
	      continue;

	    case 'l':		/* register list for entry macro */
	    case 'L':		/* register list for exit macro */
	      {
		int mask;

		if (c == 'l')
		  mask = 0;
		else
		  mask = 7 << 3;
		while (*s != '\0')
		  {
		    int freg, reg1, reg2;

		    while (*s == ' ' || *s == ',')
		      ++s;
		    if (*s != '$')
		      {
			as_bad ("can't parse register list");
			break;
		      }
		    ++s;
		    if (*s != 'f')
		      freg = 0;
		    else
		      {
			freg = 1;
			++s;
		      }
		    reg1 = 0;
		    while (isdigit (*s))
		      {
			reg1 *= 10;
			reg1 += *s - '0';
			++s;
		      }
		    if (*s == ' ')
		      ++s;
		    if (*s != '-')
		      reg2 = reg1;
		    else
		      {
			++s;
			if (*s != '$')
			  break;
			++s;
			if (freg)
			  {
			    if (*s == 'f')
			      ++s;
			    else
			      {
				as_bad ("invalid register list");
				break;
			      }
			  }
			reg2 = 0;
			while (isdigit (*s))
			  {
			    reg2 *= 10;
			    reg2 += *s - '0';
			    ++s;
			  }
		      }
		    if (freg && reg1 == 0 && reg2 == 0 && c == 'L')
		      {
			mask &= ~ (7 << 3);
			mask |= 5 << 3;
		      }
		    else if (freg && reg1 == 0 && reg2 == 1 && c == 'L')
		      {
			mask &= ~ (7 << 3);
			mask |= 6 << 3;
		      }
		    else if (reg1 == 4 && reg2 >= 4 && reg2 <= 7 && c != 'L')
		      mask |= (reg2 - 3) << 3;
		    else if (reg1 == 16 && reg2 >= 16 && reg2 <= 17)
		      mask |= (reg2 - 15) << 1;
		    else if (reg1 == 31 && reg2 == 31)
		      mask |= 1;
		    else
		      {
			as_bad ("invalid register list");
			break;
		      }
		  }
		/* The mask is filled in in the opcode table for the
                   benefit of the disassembler.  We remove it before
                   applying the actual mask.  */
		ip->insn_opcode &= ~ ((7 << 3) << MIPS16OP_SH_IMM6);
		ip->insn_opcode |= mask << MIPS16OP_SH_IMM6;
	      }
	    continue;

	    case 'e':		/* extend code */
	      my_getExpression (&imm_expr, s);
	      check_absolute_expr (ip, &imm_expr);
	      if ((unsigned long) imm_expr.X_add_number > 0x7ff)
		{
		  as_warn ("Invalid value for `%s' (%lu)",
			   ip->insn_mo->name,
			   (unsigned long) imm_expr.X_add_number);
		  imm_expr.X_add_number &= 0x7ff;
		}
	      ip->insn_opcode |= imm_expr.X_add_number;
	      imm_expr.X_op = O_absent;
	      s = expr_end;
	      continue;

	    default:
	      internalError ();
	    }
	  break;
	}

      /* Args don't match.  */
      if (insn + 1 < &mips16_opcodes[bfd_mips16_num_opcodes] &&
	  strcmp (insn->name, insn[1].name) == 0)
	{
	  ++insn;
	  s = argsstart;
	  continue;
	}

      insn_error = "illegal operands";

      return;
    }
}

/* This structure holds information we know about a mips16 immediate
   argument type.  */

struct mips16_immed_operand
{
  /* The type code used in the argument string in the opcode table.  */
  int type;
  /* The number of bits in the short form of the opcode.  */
  int nbits;
  /* The number of bits in the extended form of the opcode.  */
  int extbits;
  /* The amount by which the short form is shifted when it is used;
     for example, the sw instruction has a shift count of 2.  */
  int shift;
  /* The amount by which the short form is shifted when it is stored
     into the instruction code.  */
  int op_shift;
  /* Non-zero if the short form is unsigned.  */
  int unsp;
  /* Non-zero if the extended form is unsigned.  */
  int extu;
  /* Non-zero if the value is PC relative.  */
  int pcrel;
};

/* The mips16 immediate operand types.  */

static const struct mips16_immed_operand mips16_immed_operands[] =
{
  { '<',  3,  5, 0, MIPS16OP_SH_RZ,   1, 1, 0 },
  { '>',  3,  5, 0, MIPS16OP_SH_RX,   1, 1, 0 },
  { '[',  3,  6, 0, MIPS16OP_SH_RZ,   1, 1, 0 },
  { ']',  3,  6, 0, MIPS16OP_SH_RX,   1, 1, 0 },
  { '4',  4, 15, 0, MIPS16OP_SH_IMM4, 0, 0, 0 },
  { '5',  5, 16, 0, MIPS16OP_SH_IMM5, 1, 0, 0 },
  { 'H',  5, 16, 1, MIPS16OP_SH_IMM5, 1, 0, 0 },
  { 'W',  5, 16, 2, MIPS16OP_SH_IMM5, 1, 0, 0 },
  { 'D',  5, 16, 3, MIPS16OP_SH_IMM5, 1, 0, 0 },
  { 'j',  5, 16, 0, MIPS16OP_SH_IMM5, 0, 0, 0 },
  { '8',  8, 16, 0, MIPS16OP_SH_IMM8, 1, 0, 0 },
  { 'V',  8, 16, 2, MIPS16OP_SH_IMM8, 1, 0, 0 },
  { 'C',  8, 16, 3, MIPS16OP_SH_IMM8, 1, 0, 0 },
  { 'U',  8, 16, 0, MIPS16OP_SH_IMM8, 1, 1, 0 },
  { 'k',  8, 16, 0, MIPS16OP_SH_IMM8, 0, 0, 0 },
  { 'K',  8, 16, 3, MIPS16OP_SH_IMM8, 0, 0, 0 },
  { 'p',  8, 16, 0, MIPS16OP_SH_IMM8, 0, 0, 1 },
  { 'q', 11, 16, 0, MIPS16OP_SH_IMM8, 0, 0, 1 },
  { 'A',  8, 16, 2, MIPS16OP_SH_IMM8, 1, 0, 1 },
  { 'B',  5, 16, 3, MIPS16OP_SH_IMM5, 1, 0, 1 },
  { 'E',  5, 16, 2, MIPS16OP_SH_IMM5, 1, 0, 1 }
};

#define MIPS16_NUM_IMMED \
  (sizeof mips16_immed_operands / sizeof mips16_immed_operands[0])

/* Handle a mips16 instruction with an immediate value.  This or's the
   small immediate value into *INSN.  It sets *USE_EXTEND to indicate
   whether an extended value is needed; if one is needed, it sets
   *EXTEND to the value.  The argument type is TYPE.  The value is VAL.
   If SMALL is true, an unextended opcode was explicitly requested.
   If EXT is true, an extended opcode was explicitly requested.  If
   WARN is true, warn if EXT does not match reality.  */

static void
mips16_immed (file, line, type, val, warn, small, ext, insn, use_extend,
	      extend)
     char *file;
     unsigned int line;
     int type;
     offsetT val;
     boolean warn;
     boolean small;
     boolean ext;
     unsigned long *insn;
     boolean *use_extend;
     unsigned short *extend;
{
  register const struct mips16_immed_operand *op;
  int mintiny, maxtiny;
  boolean needext;

  op = mips16_immed_operands;
  while (op->type != type)
    {
      ++op;
      assert (op < mips16_immed_operands + MIPS16_NUM_IMMED);
    }

  if (op->unsp)
    {
      if (type == '<' || type == '>' || type == '[' || type == ']')
	{
	  mintiny = 1;
	  maxtiny = 1 << op->nbits;
	}
      else
	{
	  mintiny = 0;
	  maxtiny = (1 << op->nbits) - 1;
	}
    }
  else
    {
      mintiny = - (1 << (op->nbits - 1));
      maxtiny = (1 << (op->nbits - 1)) - 1;
    }

  /* Branch offsets have an implicit 0 in the lowest bit.  */
  if (type == 'p' || type == 'q')
    val /= 2;

  if ((val & ((1 << op->shift) - 1)) != 0
      || val < (mintiny << op->shift)
      || val > (maxtiny << op->shift))
    needext = true;
  else
    needext = false;

  if (warn && ext && ! needext)
    as_warn_where (file, line, "extended operand requested but not required");
  if (small && needext)
    as_bad_where (file, line, "invalid unextended operand value");

  if (small || (! ext && ! needext))
    {
      int insnval;

      *use_extend = false;
      insnval = ((val >> op->shift) & ((1 << op->nbits) - 1));
      insnval <<= op->op_shift;
      *insn |= insnval;
    }
  else
    {
      long minext, maxext;
      int extval;

      if (op->extu)
	{
	  minext = 0;
	  maxext = (1 << op->extbits) - 1;
	}
      else
	{
	  minext = - (1 << (op->extbits - 1));
	  maxext = (1 << (op->extbits - 1)) - 1;
	}
      if (val < minext || val > maxext)
	as_bad_where (file, line,
		      "operand value out of range for instruction");

      *use_extend = true;
      if (op->extbits == 16)
	{
	  extval = ((val >> 11) & 0x1f) | (val & 0x7e0);
	  val &= 0x1f;
	}
      else if (op->extbits == 15)
	{
	  extval = ((val >> 11) & 0xf) | (val & 0x7f0);
	  val &= 0xf;
	}
      else
	{
	  extval = ((val & 0x1f) << 6) | (val & 0x20);
	  val = 0;
	}

      *extend = (unsigned short) extval;
      *insn |= val;
d5938 1
a5938 1

a6040 13

  /* If we are in mips16 mode, and this is an expression based on `.',
     then we bump the value of the symbol by 1 since that is how other
     text symbols are handled.  We don't bother to handle complex
     expressions, just `.' plus or minus a constant.  */
  if (mips_opts.mips16
      && ep->X_op == O_symbol
      && strcmp (S_GET_NAME (ep->X_add_symbol), FAKE_LABEL_NAME) == 0
      && S_GET_SEGMENT (ep->X_add_symbol) == now_seg
      && ep->X_add_symbol->sy_frag == frag_now
      && ep->X_add_symbol->sy_value.X_op == O_constant
      && ep->X_add_symbol->sy_value.X_add_number == frag_now_fix ())
    ++ep->X_add_symbol->sy_value.X_add_number;
d6080 1
a6080 1
  if (! target_big_endian)
d6106 13
a6118 4
  if (target_big_endian)
    number_to_chars_bigendian (buf, val, n);
  else
    number_to_chars_littleendian (buf, val, n);
a6158 4
#define OPTION_MIPS16 (OPTION_MD_BASE + 22)
  {"mips16", no_argument, NULL, OPTION_MIPS16},
#define OPTION_NO_MIPS16 (OPTION_MD_BASE + 23)
  {"no-mips16", no_argument, NULL, OPTION_NO_MIPS16},
d6217 1
a6217 1
	mips_optimize = 1;
d6221 1
a6221 1
      mips_opts.isa = 1;
d6227 1
a6227 1
      mips_opts.isa = 2;
d6233 1
a6233 1
      mips_opts.isa = 3;
d6239 1
a6239 1
      mips_opts.isa = 4;
a6388 11

    case OPTION_MIPS16:
      mips_opts.mips16 = 1;
      mips_no_prev_insn (false);
      break;

    case OPTION_NO_MIPS16:
      mips_opts.mips16 = 0;
      mips_no_prev_insn (false);
      break;

a6503 3
-mips16			generate mips16 instructions\n\
-no-mips16		do not generate mips16 instructions\n");
  fprintf(stream, "\
d6517 1
a6517 1

d6521 4
a6524 3
  /* initialize opcodes */
  bfd_mips_num_opcodes = bfd_mips_num_builtin_opcodes;
  mips_opcodes = (struct mips_opcode*) mips_builtin_opcodes;
d6526 1
a6526 1

d6560 1
a6560 1
      if (target_big_endian)
a6574 18
/* This is called before the symbol table is processed.  In order to
   work with gcc when using mips-tfile, we must keep all local labels.
   However, in other cases, we want to discard them.  If we were
   called with -g, but we didn't see any debugging information, it may
   mean that gcc is smuggling debugging information through to
   mips-tfile, in which case we must generate all local labels.  */

void
mips_frob_file_before_adjust ()
{
#ifndef NO_ECOFF_DEBUGGING
  if (ECOFF_DEBUGGING
      && mips_debug != 0
      && ! ecoff_debugging_seen)
    flag_keep_locals = 1;
#endif
}

a6697 19

  /* If we aren't adjusting this fixup to be against the section
     symbol, we need to adjust the value.  */
#ifdef OBJ_ELF
  if (fixP->fx_addsy != NULL
      && OUTPUT_FLAVOR == bfd_target_elf_flavour
      && S_GET_OTHER (fixP->fx_addsy) == STO_MIPS16)
    {
      value -= S_GET_VALUE (fixP->fx_addsy);
      if (value != 0 && ! fixP->fx_pcrel)
	{
	  /* In this case, the bfd_install_relocation routine will
             incorrectly add the symbol value back in.  We just want
             the addend to appear in the object file.  */
	  value -= S_GET_VALUE (fixP->fx_addsy);
	}
    }
#endif

a6716 1
    case BFD_RELOC_MIPS16_GPREL:
a6722 7
    case BFD_RELOC_MIPS16_JMP:
      /* We currently always generate a reloc against a symbol, which
         means that we don't want an addend even if the symbol is
         defined.  */
      fixP->fx_addnumber = 0;
      break;

d6725 1
a6725 1
	 do everything here rather than in bfd_install_relocation.  */
d6738 1
a6738 1
      if (target_big_endian)
d6745 1
a6745 1
	 do everything here rather than in bfd_install_relocation.  */
d6749 1
a6749 1
      if (target_big_endian)
d6769 1
a6769 1
	      if (target_big_endian)
d6813 1
a6813 1
	  if (target_big_endian)
d6825 3
a6827 3
      if ((value & 0x3) != 0)
	as_bad_where (fixP->fx_file, fixP->fx_line,
		      "Branch to odd address (%lx)", value);
d6832 14
a6845 4
      if (target_big_endian)
	insn = (buf[0] << 24) | (buf[1] << 16) | (buf[2] << 8) | buf[3];
      else
	insn = (buf[3] << 24) | (buf[2] << 16) | (buf[1] << 8) | buf[0];
d6882 1
a6882 1
			    "Branch out of range");
d7007 2
a7008 2
  mips_emit_delays (false);
  frag_align (to, fill, 0);
d7059 1
a7059 2
      mips_align (temp, (int) temp_fill,
		  insn_labels != NULL ? insn_labels->label : NULL);
d7072 2
a7073 2
  mips_emit_delays (false);
  mips_clear_insn_labels ();
d7089 1
a7089 11
#ifdef OBJ_ELF
  /* The ELF backend needs to know that we are changing sections, so
     that .previous works correctly.  We could do something like check
     for a obj_section_change_hook macro, but that might be confusing
     as it would not be appropriate to use it in the section changing
     functions in read.c, since obj-elf.c intercepts those.  FIXME:
     This should be cleaner, somehow.  */
  obj_elf_section_change_hook ();
#endif

  mips_emit_delays (false);
d7116 1
a7116 2
	      if (strcmp (TARGET_OS, "elf") != 0)
		bfd_set_section_alignment (stdoutput, seg, 4);
d7137 1
a7137 2
	      if (strcmp (TARGET_OS, "elf") != 0)
		bfd_set_section_alignment (stdoutput, seg, 4);
d7165 2
a7166 2
  label = insn_labels != NULL ? insn_labels->label : NULL;
  mips_emit_delays (false);
d7169 1
a7169 1
  mips_clear_insn_labels ();
d7179 1
a7179 1
  label = insn_labels != NULL ? insn_labels->label : NULL;
d7181 1
a7181 1
  mips_emit_delays (false);
d7189 1
a7189 1
  mips_clear_insn_labels ();
a7281 12
/* This structure is used to hold a stack of .set values.  */

struct mips_option_stack
{
  struct mips_option_stack *next;
  struct mips_set_options options;
};

static struct mips_option_stack *mips_opts_stack;

/* Handle the .set pseudo-op.  */

d7295 1
a7295 1
      if (mips_opts.noreorder && prev_nop_frag != NULL)
d7297 2
a7298 6
	  /* If we still have pending nops, we can discard them.  The
	     usual nop handling will insert any that are still
	     needed. */
	  prev_nop_frag->fr_fix -= (prev_nop_frag_holds
				    * (mips_opts.mips16 ? 2 : 4));
	  prev_nop_frag = NULL;
d7300 1
a7300 1
      mips_opts.noreorder = 0;
d7304 2
a7305 2
      mips_emit_delays (true);
      mips_opts.noreorder = 1;
d7310 1
a7310 1
      mips_opts.noat = 0;
d7314 1
a7314 1
      mips_opts.noat = 1;
d7318 1
a7318 1
      mips_opts.warn_about_macros = 0;
d7322 1
a7322 1
      if (mips_opts.noreorder == 0)
d7324 1
a7324 1
      mips_opts.warn_about_macros = 1;
d7328 1
a7328 1
      mips_opts.nomove = 0;
d7332 1
a7332 1
      mips_opts.nomove = 1;
d7336 1
a7336 1
      mips_opts.nobopt = 0;
d7340 1
a7340 1
      mips_opts.nobopt = 1;
a7341 6
  else if (strcmp (name, "mips16") == 0
	   || strcmp (name, "MIPS-16") == 0)
    mips_opts.mips16 = 1;
  else if (strcmp (name, "nomips16") == 0
	   || strcmp (name, "noMIPS-16") == 0)
    mips_opts.mips16 = 0;
d7350 1
a7350 1
	mips_opts.isa = file_mips_isa;
d7354 1
a7354 42
	mips_opts.isa = isa;
    }
  else if (strcmp (name, "autoextend") == 0)
    mips_opts.noautoextend = 0;
  else if (strcmp (name, "noautoextend") == 0)
    mips_opts.noautoextend = 1;
  else if (strcmp (name, "push") == 0)
    {
      struct mips_option_stack *s;

      s = (struct mips_option_stack *) xmalloc (sizeof *s);
      s->next = mips_opts_stack;
      s->options = mips_opts;
      mips_opts_stack = s;
    }
  else if (strcmp (name, "pop") == 0)
    {
      struct mips_option_stack *s;

      s = mips_opts_stack;
      if (s == NULL)
	as_bad (".set pop with no .set push");
      else
	{
	  /* If we're changing the reorder mode we need to handle
             delay slots correctly.  */
	  if (s->options.noreorder && ! mips_opts.noreorder)
	    mips_emit_delays (true);
	  else if (! s->options.noreorder && mips_opts.noreorder)
	    {
	      if (prev_nop_frag != NULL)
		{
		  prev_nop_frag->fr_fix -= (prev_nop_frag_holds
					    * (mips_opts.mips16 ? 2 : 4));
		  prev_nop_frag = NULL;
		}
	    }

	  mips_opts = s->options;
	  mips_opts_stack = s->next;
	  free (s);
	}
d7407 1
a7407 1
  if (mips_opts.noreorder == 0)
d7454 1
a7454 1
	       mips_opts.isa < 3 ? "sw" : "sd",
d7478 2
a7479 2
  label = insn_labels != NULL ? insn_labels->label : NULL;
  mips_emit_delays (true);
d7482 1
a7482 1
  mips_clear_insn_labels ();
d7520 1
a7520 1
	       mips_opts.isa < 3 ? "addu" : "daddu",
a7525 35
/* Handle the .insn pseudo-op.  This marks instruction labels in
   mips16 mode.  This permits the linker to handle them specially,
   such as generating jalx instructions when needed.  We also make
   them odd for the duration of the assembly, in order to generate the
   right sort of code.  We will make them even in the adjust_symtab
   routine, while leaving them marked.  This is convenient for the
   debugger and the disassembler.  The linker knows to make them odd
   again.  */

static void
s_insn (ignore)
     int ignore;
{
  if (mips_opts.mips16)
    mips16_mark_labels ();

  demand_empty_rest_of_line ();
}

/* Handle a .stabn directive.  We need these in order to mark a label
   as being a mips16 text label correctly.  Sometimes the compiler
   will emit a label, followed by a .stabn, and then switch sections.
   If the label and .stabn are in mips16 mode, then the label is
   really a mips16 text label.  */

static void
s_mips_stab (type)
     int type;
{
  if (type == 'n' && mips_opts.mips16)
    mips16_mark_labels ();

  s_stab (type);
}

d7583 3
a7585 6
     byte boundary.  We don't bother to align the sections if we are
     targeted for an embedded system.  */
  if (strcmp (TARGET_OS, "elf") == 0)
    return addr;
  if (align > 4)
    align = 4;
d7597 1
a7597 1
nopic_need_relax (sym, before_relaxing)
a7598 1
     int before_relaxing;
d7625 1
a7625 1
      else if ((! S_IS_DEFINED (sym) || S_IS_COMMON (sym))
a7630 8
		   /* We must defer this decision until after the whole
		      file has been read, since there might be a .extern
		      after the first use of this symbol.  */
		   || (before_relaxing
#ifndef NO_ECOFF_DEBUGGING
		       && sym->ecoff_extern_size == 0
#endif
		       && S_GET_VALUE (sym) == 0)
d7651 3
a7653 215
/* Given a mips16 variant frag FRAGP, return non-zero if it needs an
   extended opcode.  SEC is the section the frag is in.  */

static int
mips16_extended_frag (fragp, sec, stretch)
     fragS *fragp;
     asection *sec;
     long stretch;
{
  int type;
  register const struct mips16_immed_operand *op;
  offsetT val;
  int mintiny, maxtiny;
  segT symsec;

  if (RELAX_MIPS16_USER_SMALL (fragp->fr_subtype))
    return 0;
  if (RELAX_MIPS16_USER_EXT (fragp->fr_subtype))
    return 1;

  type = RELAX_MIPS16_TYPE (fragp->fr_subtype);
  op = mips16_immed_operands;
  while (op->type != type)
    {
      ++op;
      assert (op < mips16_immed_operands + MIPS16_NUM_IMMED);
    }

  if (op->unsp)
    {
      if (type == '<' || type == '>' || type == '[' || type == ']')
	{
	  mintiny = 1;
	  maxtiny = 1 << op->nbits;
	}
      else
	{
	  mintiny = 0;
	  maxtiny = (1 << op->nbits) - 1;
	}
    }
  else
    {
      mintiny = - (1 << (op->nbits - 1));
      maxtiny = (1 << (op->nbits - 1)) - 1;
    }

  /* We can't call S_GET_VALUE here, because we don't want to lock in
     a particular frag address.  */
  if (fragp->fr_symbol->sy_value.X_op == O_constant)
    {
      val = (fragp->fr_symbol->sy_value.X_add_number
	     + fragp->fr_symbol->sy_frag->fr_address);
      symsec = S_GET_SEGMENT (fragp->fr_symbol);
    }
  else if (fragp->fr_symbol->sy_value.X_op == O_symbol
	   && (fragp->fr_symbol->sy_value.X_add_symbol->sy_value.X_op
	       == O_constant))
    {
      val = (fragp->fr_symbol->sy_value.X_add_symbol->sy_value.X_add_number
	     + fragp->fr_symbol->sy_value.X_add_symbol->sy_frag->fr_address
	     + fragp->fr_symbol->sy_value.X_add_number
	     + fragp->fr_symbol->sy_frag->fr_address);
      symsec = S_GET_SEGMENT (fragp->fr_symbol->sy_value.X_add_symbol);
    }
  else
    return 1;

  if (op->pcrel)
    {
      addressT addr;

      /* We won't have the section when we are called from
         mips_relax_frag.  However, we will always have been called
         from md_estimate_size_before_relax first.  If this is a
         branch to a different section, we mark it as such.  If SEC is
         NULL, and the frag is not marked, then it must be a branch to
         the same section.  */
      if (sec == NULL)
	{
	  if (RELAX_MIPS16_LONG_BRANCH (fragp->fr_subtype))
	    return 1;
	}
      else
	{
	  if (symsec != sec)
	    {
	      fragp->fr_subtype =
		RELAX_MIPS16_MARK_LONG_BRANCH (fragp->fr_subtype);

	      /* FIXME: We should support this, and let the linker
                 catch branches and loads that are out of range.  */
	      as_bad_where (fragp->fr_file, fragp->fr_line,
			    "unsupported PC relative reference to different section");

	      return 1;
	    }
	}

      /* In this case, we know for sure that the symbol fragment is in
	 the same section.  If the fr_address of the symbol fragment
	 is greater then the address of this fragment we want to add
	 in STRETCH in order to get a better estimate of the address.
	 This particularly matters because of the shift bits.  */
      if (stretch != 0
	  && fragp->fr_symbol->sy_frag->fr_address >= fragp->fr_address)
	{
	  fragS *f;

	  /* Adjust stretch for any alignment frag.  Note that if have
             been expanding the earlier code, the symbol may be
             defined in what appears to be an earlier frag.  FIXME:
             This doesn't handle the fr_subtype field, which specifies
             a maximum number of bytes to skip when doing an
             alignment.  */
	  for (f = fragp;
	       f != NULL && f != fragp->fr_symbol->sy_frag;
	       f = f->fr_next)
	    {
	      if (f->fr_type == rs_align || f->fr_type == rs_align_code)
		{
		  if (stretch < 0)
		    stretch = - ((- stretch)
				 & ~ ((1 << (int) f->fr_offset) - 1));
		  else
		    stretch &= ~ ((1 << (int) f->fr_offset) - 1);
		  if (stretch == 0)
		    break;
		}
	    }
	  if (f != NULL)
	    val += stretch;
	}

      addr = fragp->fr_address + fragp->fr_fix;

      /* The base address rules are complicated.  The base address of
         a branch is the following instruction.  The base address of a
         PC relative load or add is the instruction itself, but if it
         is in a delay slot (in which case it can not be extended) use
         the address of the instruction whose delay slot it is in.  */
      if (type == 'p' || type == 'q')
	{
	  addr += 2;

	  /* If we are currently assuming that this frag should be
	     extended, then, the current address is two bytes
	     higher. */
	  if (RELAX_MIPS16_EXTENDED (fragp->fr_subtype))
	    addr += 2;

	  /* Ignore the low bit in the target, since it will be set
             for a text label.  */
	  if ((val & 1) != 0)
	    --val;
	}
      else if (RELAX_MIPS16_JAL_DSLOT (fragp->fr_subtype))
	addr -= 4;
      else if (RELAX_MIPS16_DSLOT (fragp->fr_subtype))
	addr -= 2;

      val -= addr & ~ ((1 << op->shift) - 1);

      /* Branch offsets have an implicit 0 in the lowest bit.  */
      if (type == 'p' || type == 'q')
	val /= 2;

      /* If any of the shifted bits are set, we must use an extended
         opcode.  If the address depends on the size of this
         instruction, this can lead to a loop, so we arrange to always
         use an extended opcode.  We only check this when we are in
         the main relaxation loop, when SEC is NULL.  */
      if ((val & ((1 << op->shift) - 1)) != 0 && sec == NULL)
	{
	  fragp->fr_subtype =
	    RELAX_MIPS16_MARK_LONG_BRANCH (fragp->fr_subtype);
	  return 1;
	}

      /* If we are about to mark a frag as extended because the value
         is precisely maxtiny + 1, then there is a chance of an
         infinite loop as in the following code:
	     la	$4,foo
	     .skip	1020
	     .align	2
	   foo:
	 In this case when the la is extended, foo is 0x3fc bytes
	 away, so the la can be shrunk, but then foo is 0x400 away, so
	 the la must be extended.  To avoid this loop, we mark the
	 frag as extended if it was small, and is about to become
	 extended with a value of maxtiny + 1.  */
      if (val == ((maxtiny + 1) << op->shift)
	  && ! RELAX_MIPS16_EXTENDED (fragp->fr_subtype)
	  && sec == NULL)
	{
	  fragp->fr_subtype =
	    RELAX_MIPS16_MARK_LONG_BRANCH (fragp->fr_subtype);
	  return 1;
	}
    }
  else if (symsec != absolute_section && sec != NULL)
    as_bad_where (fragp->fr_file, fragp->fr_line, "unsupported relocation");

  if ((val & ((1 << op->shift) - 1)) != 0
      || val < (mintiny << op->shift)
      || val > (maxtiny << op->shift))
    return 1;
  else
    return 0;
}

/* Estimate the size of a frag before relaxing.  Unless this is the
   mips16, we are not really relaxing here, and the final size is
   encoded in the subtype information.  For the mips16, we have to
   decide whether we are using an extended opcode or not.  */
a7662 14
  if (RELAX_MIPS16_P (fragp->fr_subtype))
    {
      if (mips16_extended_frag (fragp, segtype, 0))
	{
	  fragp->fr_subtype = RELAX_MIPS16_MARK_EXTENDED (fragp->fr_subtype);
	  return 4;
	}
      else
	{
	  fragp->fr_subtype = RELAX_MIPS16_CLEAR_EXTENDED (fragp->fr_subtype);
	  return 2;
	}
    }

d7665 1
a7665 1
      change = nopic_need_relax (fragp->fr_symbol, 0);
d7669 1
a7669 20
      symbolS *sym;
      asection *symsec;

      sym = fragp->fr_symbol;

      /* Handle the case of a symbol equated to another symbol.  */
      while (sym->sy_value.X_op == O_symbol
	     && (! S_IS_DEFINED (sym) || S_IS_COMMON (sym)))
	{
	  symbolS *n;

	  /* It's possible to get a loop here in a badly written
             program.  */
	  n = sym->sy_value.X_add_symbol;
	  if (n == sym)
	    break;
	  sym = n;
	}

      symsec = S_GET_SEGMENT (sym);
a7698 24
/* This is called to see whether a reloc against a defined symbol
   should be converted into a reloc against a section.  Don't adjust
   MIPS16 jump relocations, so we don't have to worry about the format
   of the offset in the .o file.  Don't adjust relocations against
   mips16 symbols, so that the linker can find them if it needs to set
   up a stub.  */

int
mips_fix_adjustable (fixp)
     fixS *fixp;
{
  if (fixp->fx_r_type == BFD_RELOC_MIPS16_JMP)
    return 0;
  if (fixp->fx_addsy == NULL)
    return 1;
#ifdef OBJ_ELF
  if (OUTPUT_FLAVOR == bfd_target_elf_flavour
      && S_GET_OTHER (fixp->fx_addsy) == STO_MIPS16
      && fixp->fx_subsy == NULL)
    return 0;
#endif
  return 1;
}

a7776 2
      assert (! RELAX_MIPS16_P (fixp->fx_frag->fr_subtype));

a7898 29
/* Relax a machine dependent frag.  This returns the amount by which
   the current size of the frag should change.  */

int
mips_relax_frag (fragp, stretch)
     fragS *fragp;
     long stretch;
{
  if (! RELAX_MIPS16_P (fragp->fr_subtype))
    return 0;

  if (mips16_extended_frag (fragp, (asection *) NULL, stretch))
    {
      if (RELAX_MIPS16_EXTENDED (fragp->fr_subtype))
	return 0;
      fragp->fr_subtype = RELAX_MIPS16_MARK_EXTENDED (fragp->fr_subtype);
      return 2;
    }
  else
    {
      if (! RELAX_MIPS16_EXTENDED (fragp->fr_subtype))
	return 0;
      fragp->fr_subtype = RELAX_MIPS16_CLEAR_EXTENDED (fragp->fr_subtype);
      return -2;
    }

  return 0;
}

d7910 2
a7911 110
  if (RELAX_MIPS16_P (fragp->fr_subtype))
    {
      int type;
      register const struct mips16_immed_operand *op;
      boolean small, ext;
      offsetT val;
      bfd_byte *buf;
      unsigned long insn;
      boolean use_extend;
      unsigned short extend;

      type = RELAX_MIPS16_TYPE (fragp->fr_subtype);
      op = mips16_immed_operands;
      while (op->type != type)
	++op;

      if (RELAX_MIPS16_EXTENDED (fragp->fr_subtype))
	{
	  small = false;
	  ext = true;
	}
      else
	{
	  small = true;
	  ext = false;
	}

      resolve_symbol_value (fragp->fr_symbol);
      val = S_GET_VALUE (fragp->fr_symbol);
      if (op->pcrel)
	{
	  addressT addr;

	  addr = fragp->fr_address + fragp->fr_fix;

	  /* The rules for the base address of a PC relative reloc are
             complicated; see mips16_extended_frag.  */
	  if (type == 'p' || type == 'q')
	    {
	      addr += 2;
	      if (ext)
		addr += 2;
	      /* Ignore the low bit in the target, since it will be
                 set for a text label.  */
	      if ((val & 1) != 0)
		--val;
	    }
	  else if (RELAX_MIPS16_JAL_DSLOT (fragp->fr_subtype))
	    addr -= 4;
	  else if (RELAX_MIPS16_DSLOT (fragp->fr_subtype))
	    addr -= 2;

	  addr &= ~ (addressT) ((1 << op->shift) - 1);
	  val -= addr;

	  /* Make sure the section winds up with the alignment we have
             assumed.  */
	  if (op->shift > 0)
	    record_alignment (asec, op->shift);
	}

      if (ext
	  && (RELAX_MIPS16_JAL_DSLOT (fragp->fr_subtype)
	      || RELAX_MIPS16_DSLOT (fragp->fr_subtype)))
	as_warn_where (fragp->fr_file, fragp->fr_line,
		       "extended instruction in delay slot");

      buf = (bfd_byte *) (fragp->fr_literal + fragp->fr_fix);

      if (target_big_endian)
	insn = bfd_getb16 (buf);
      else
	insn = bfd_getl16 (buf);

      mips16_immed (fragp->fr_file, fragp->fr_line, type, val,
		    RELAX_MIPS16_USER_EXT (fragp->fr_subtype),
		    small, ext, &insn, &use_extend, &extend);

      if (use_extend)
	{
	  md_number_to_chars (buf, 0xf000 | extend, 2);
	  fragp->fr_fix += 2;
	  buf += 2;
	}

      md_number_to_chars (buf, insn, 2);
      fragp->fr_fix += 2;
      buf += 2;
    }
  else
    {
      if (fragp->fr_opcode == NULL)
	return;

      old = RELAX_OLD (fragp->fr_subtype);
      new = RELAX_NEW (fragp->fr_subtype);
      fixptr = fragp->fr_literal + fragp->fr_fix;

      if (new > 0)
	memcpy (fixptr - old, fixptr, new);

      fragp->fr_fix += new - old;
    }
}

#ifdef OBJ_ELF

/* This function is called after the relocs have been generated.
   We've been storing mips16 text labels as odd.  Here we convert them
   back to even for the convenience of the debugger.  */
d7913 3
a7915 5
void
mips_frob_file_after_relocs ()
{
  asymbol **syms;
  unsigned int count, i;
d7917 2
a7918 2
  if (OUTPUT_FLAVOR != bfd_target_elf_flavour)
    return;
d7920 1
a7920 14
  syms = bfd_get_outsymbols (stdoutput);
  count = bfd_get_symcount (stdoutput);
  for (i = 0; i < count; i++, syms++)
    {
      if (elf_symbol (*syms)->internal_elf_sym.st_other == STO_MIPS16
	  && ((*syms)->value & 1) != 0)
	{
	  (*syms)->value &= ~1;
	  /* If the symbol has an odd size, it was probably computed
	     incorrectly, so adjust that as well.  */
	  if ((elf_symbol (*syms)->internal_elf_sym.st_size & 1) != 0)
	    ++elf_symbol (*syms)->internal_elf_sym.st_size;
	}
    }
a7922 2
#endif

d7931 2
a7932 1
  struct insn_label_list *l;
d7934 13
a7946 3
  if (free_insn_labels == NULL)
    l = (struct insn_label_list *) xmalloc (sizeof *l);
  else
d7948 5
a7952 2
      l = free_insn_labels;
      free_insn_labels = l->next;
d7954 3
d7958 1
a7958 3
  l->label = sym;
  l->next = insn_labels;
  insn_labels = l;
@


1.1.1.6
log
@Import binutils-2.10
- only the binutils package (no gdb here)
- don't import libiberty and texinfo, they are elsewhere
- remove all .info* generated files
@
text
@d2 1
a2 1
   Copyright (C) 1993, 94, 95, 96, 97, 98, 1999, 2000 Free Software Foundation, Inc.
d57 1
a62 1
#undef OBJ_COPY_SYMBOL_ATTRIBUTES
d106 1
a106 3
   32 bit ABI.  This has no meaning for ECOFF.
   Note that the default is always 32 bit, even if "configured" for
   64 bit [e.g. --target=mips64-elf].  */
a118 2
    case bfd_target_coff_flavour:
      return "pe-mips";
a124 1
      return NULL;
a132 2
			    : OUTPUT_FLAVOR == bfd_target_coff_flavour \
			    ? ".rdata" \
d193 5
a197 2
/* The argument of the -mabi= flag. */
static char* mips_abi_string = 0;
d199 2
a200 2
/* Wether we should mark the file EABI64 or EABI32. */
static int mips_eabi64 = 0;
a201 62
/* If they asked for mips1 or mips2 and a cpu that is
   mips3 or greater, then mark the object file 32BITMODE. */
static int mips_32bitmode = 0;

/* True if -mgp32 was passed. */
static int mips_gp32 = 0;

/* Some ISA's have delay slots for instructions which read or write
   from a coprocessor (eg. mips1-mips3); some don't (eg mips4).
   Return true if instructions marked INSN_LOAD_COPROC_DELAY, 
   INSN_COPROC_MOVE_DELAY, or INSN_WRITE_COND_CODE actually have a
   delay slot in this ISA.  The uses of this macro assume that any
   ISA that has delay slots for one of these, has them for all.  They
   also assume that ISAs which don't have delays for these insns, don't
   have delays for the INSN_LOAD_MEMORY_DELAY instructions either. */
#define ISA_HAS_COPROC_DELAYS(ISA) (        \
   (ISA) == 1                               \
   || (ISA) == 2                            \
   || (ISA) == 3                            \
   )

/*  Return true if ISA supports 64 bit gp register instructions. */
#define ISA_HAS_64BIT_REGS(ISA) (    \
   (ISA) == 3                        \
   || (ISA) == 4                     \
   )

/* Whether the processor uses hardware interlocks to protect 
   reads from the HI and LO registers, and thus does not
   require nops to be inserted.

   FIXME: GCC makes a distinction between -mcpu=FOO and -mFOO:
   -mcpu=FOO schedules for FOO, but still produces code that meets the
   requirements of MIPS ISA I.  For example, it won't generate any
   FOO-specific instructions, and it will still assume that any
   scheduling hazards described in MIPS ISA I are there, even if FOO
   has interlocks.  -mFOO gives GCC permission to generate code that
   will only run on a FOO; it will generate FOO-specific instructions,
   and assume interlocks provided by a FOO.

   However, GAS currently doesn't make this distinction; before Jan 28
   1999, GAS's -mcpu=FOO implied -mFOO, which violates GCC's
   assumptions.  The GCC driver passes these flags through to GAS, so
   if GAS actually does anything that doesn't meet MIPS ISA I with
   -mFOO, then GCC's -mcpu=FOO flag isn't going to work.

   And furthermore, it did not assume that -mFOO implied -mcpu=FOO,
   which seems senseless --- why generate code which will only run on
   a FOO, but schedule for something else?

   So now, at least, -mcpu=FOO and -mFOO are exactly equivalent.

   -- Jim Blandy <jimb@@cygnus.com> */

#define hilo_interlocks (mips_cpu == 4010                           \
                         )

/* Whether the processor uses hardware interlocks to protect reads
   from the GPRs, and thus does not require nops to be inserted.  */
#define gpr_interlocks \
  (mips_opts.isa != 1  \
   || mips_cpu == 3900)
d203 5
a207 1
/* As with other "interlocks" this is used by hardware that has FP
d210 1
a210 6
#define cop_interlocks (mips_cpu == 4300                            \
			)

/* Is this a mfhi or mflo instruction?  */
#define MF_HILO_INSN(PINFO) \
          ((PINFO & INSN_READ_HI) || (PINFO & INSN_READ_LO))
a246 4
/* Non-zero if nops should be inserted when the register referenced in
   an mfhi/mflo instruction is read in the next two instructions.  */
static int mips_7000_hilo_fix;

d261 2
a262 3
   gcc output.  It needs to guess right for gcc, otherwise gcc
   will put what it thinks is a GP-relative instruction in a branch
   delay slot.
d549 1
a549 1
    as_fatal (_("internal Error, line %d, %s"), __LINE__, __FILE__)
d551 1
a551 1
#define internalError() as_fatal (_("MIPS internal Error"));
d614 3
a616 4
static void s_mips_ent PARAMS ((int));
static void s_mips_end PARAMS ((int));
static void s_mips_frame PARAMS ((int));
static void s_mips_mask PARAMS ((int));
a617 2
static void s_mips_weakext PARAMS ((int));
static void s_file PARAMS ((int));
a618 3


static int validate_mips_insn PARAMS ((const struct mips_opcode *));
d636 1
a636 1
   .struct.  */
a659 1
  {"weakext", s_mips_weakext, 0},
d686 1
a686 1
  {"aent", s_mips_ent, 1},
d688 1
a688 1
  {"end", s_mips_end, 0},
d690 1
a690 1
  {"ent", s_mips_ent, 0},
d692 2
a693 2
  {"fmask", s_mips_mask, 'F'},
  {"frame", s_mips_frame, 0},
d695 1
a695 1
  {"mask", s_mips_mask, 'R'},
a754 6
#ifdef MIPS_STABS_ELF
/* The pdr segment for per procedure frame/regmask info */

static segT pdr_seg;
#endif

a764 13
  const char *cpu;
  char *a = NULL;
  int broken = 0;
  int mips_isa_from_cpu;

  /* GP relative stuff not working for PE */
  if (strncmp (TARGET_OS, "pe", 2) == 0
      && g_switch_value != 0)
    {
      if (g_switch_seen)
	as_bad (_("-G not supported in this configuration."));
      g_switch_value = 0;
    }
d766 1
a766 2
  cpu = TARGET_CPU;
  if (strcmp (cpu + (sizeof TARGET_CPU) - 3, "el") == 0)
d768 2
a769 5
      a = xmalloc (sizeof TARGET_CPU);
      strcpy (a, TARGET_CPU);
      a[(sizeof TARGET_CPU) - 3] = '\0';
      cpu = a;
    }
d771 8
a778 5
  if (mips_cpu < 0)
    {
      /* Set mips_cpu based on TARGET_CPU, unless TARGET_CPU is
         just the generic 'mips', in which case set mips_cpu based
         on the given ISA, if any. */
d781 5
a785 22
        {
	  if (mips_opts.isa < 0)
	    mips_cpu = 3000;   

	  else if (mips_opts.isa == 2)
            mips_cpu = 6000;

          else if (mips_opts.isa == 3)
            mips_cpu = 4000;

          else if (mips_opts.isa == 4)
            mips_cpu = 8000;

          else 
            mips_cpu = 3000;
        }
      
      else if (strcmp (cpu, "r3900") == 0
               || strcmp (cpu, "mipstx39") == 0
               )
        mips_cpu = 3900;

d788 5
a792 2
        mips_cpu = 6000;

d796 5
a800 2
        mips_cpu = 4000;

d802 5
a806 2
        mips_cpu = 4400;

d809 5
a813 2
        mips_cpu = 4600;

d815 7
a821 2
        mips_cpu = 4650;

d823 5
a827 5
        mips_cpu = 4300;

      else if (strcmp (cpu, "mips64vr4111") == 0)
        mips_cpu = 4111;

d829 7
a835 2
        mips_cpu = 4100;

d837 7
a843 3
        mips_cpu = 4010;


d846 5
a850 4
        mips_cpu = 5000;



d853 5
a857 2
        mips_cpu = 8000;
      
d859 5
a863 2
        mips_cpu = 10000;

d865 5
a869 2
        mips_cpu = 0; /* FIXME */

d871 5
a875 19
        mips_cpu = 3000;
    }

  if (mips_cpu == 3000
      || mips_cpu == 3900)
    mips_isa_from_cpu = 1;

  else if (mips_cpu == 6000
	   || mips_cpu == 4010)
    mips_isa_from_cpu = 2;

  else if (mips_cpu == 4000
	   || mips_cpu == 4100
	   || mips_cpu == 4111
	   || mips_cpu == 4400
	   || mips_cpu == 4300
	   || mips_cpu == 4600
	   || mips_cpu == 4650)
    mips_isa_from_cpu = 3;
d877 2
a878 14
  else if (mips_cpu == 5000
	   || mips_cpu == 8000
               || mips_cpu == 10000)
    mips_isa_from_cpu = 4;

  else
    mips_isa_from_cpu = -1;

  if (mips_opts.isa == -1)
    {
      if (mips_isa_from_cpu != -1)
	mips_opts.isa = mips_isa_from_cpu;
      else
	mips_opts.isa = 1;
d889 8
a896 8
  /* End of TARGET_CPU processing, get rid of malloced memory
     if necessary. */
  cpu = NULL;
  if (a != NULL)
    {
    free (a);
    a = NULL;
    }
a897 2
  if (mips_opts.isa == 1 && mips_trap)
    as_bad (_("trap exception not supported at ISA 1"));
d899 4
a902 7
  /* Set the EABI kind based on the ISA before the user gets
     to change the ISA with directives.  This isn't really
     the best, but then neither is basing the abi on the isa. */     
  if (ISA_HAS_64BIT_REGS (mips_opts.isa)
      && mips_abi_string
      && 0 == strcmp (mips_abi_string,"eabi"))
    mips_eabi64 = 1;
d904 3
a906 11
  if (mips_cpu != 0 && mips_cpu != -1)
    {
      ok = bfd_set_arch_mach (stdoutput, bfd_arch_mips, mips_cpu);
      
      /* If they asked for mips1 or mips2 and a cpu that is
	 mips3 or greater, then mark the object file 32BITMODE. */
      if (mips_isa_from_cpu != -1
	  && ! ISA_HAS_64BIT_REGS (mips_opts.isa) 
	  && ISA_HAS_64BIT_REGS (mips_isa_from_cpu))
	mips_32bitmode = 1;
    }
d908 6
d915 12
a926 15
      switch (mips_opts.isa)
	{
	case 1:
	  ok = bfd_set_arch_mach (stdoutput, bfd_arch_mips, 3000);
	  break;
	case 2:
	  ok = bfd_set_arch_mach (stdoutput, bfd_arch_mips, 6000);
	  break;
	case 3:
	  ok = bfd_set_arch_mach (stdoutput, bfd_arch_mips, 4000);
	  break;
	case 4:
	  ok = bfd_set_arch_mach (stdoutput, bfd_arch_mips, 8000);
	  break;
	}
a927 1

d929 1
a929 1
    as_warn (_("Could not set architecture and machine"));
d942 1
a942 1
	  fprintf (stderr, _("internal error: can't hash `%s': %s\n"),
d944 1
a944 2
	  /* Probably a memory allocation problem?  Give up now.  */
	  as_fatal (_("Broken assembler.  No assembly attempted."));
d948 7
a954 4
	  if (mips_opcodes[i].pinfo != INSN_MACRO)
	    {
	      if (!validate_mips_insn (&mips_opcodes[i]))
		broken = 1;
d970 1
a970 1
	as_fatal (_("internal: can't hash `%s': %s"),
d977 2
a978 5
	    {
	      fprintf (stderr, _("internal error: bad mips16 opcode: %s %s\n"),
		       mips16_opcodes[i].name, mips16_opcodes[i].args);
	      broken = 1;
	    }
a984 3
  if (broken)
    as_fatal (_("Broken assembler.  No assembly attempted."));

a1101 7
#ifdef MIPS_STABS_ELF
	pdr_seg = subseg_new (".pdr", (subsegT) 0);
	(void) bfd_set_section_flags (stdoutput, pdr_seg,
			     SEC_READONLY | SEC_RELOC | SEC_DEBUGGING);
	(void) bfd_set_section_alignment (stdoutput, pdr_seg, 2);
#endif

d1134 1
a1134 1
      DBG((_("returned from mips_ip(%s) insn_opcode = 0x%x\n"), 
d1254 1
a1254 1
      && ISA_HAS_COPROC_DELAYS (mips_opts.isa)
d1256 1
a1256 1
	  || (! gpr_interlocks
d1293 2
a1294 2
	  if ((S_GET_VALUE (l->label) & 1) == 0)
	    S_SET_VALUE (l->label, S_GET_VALUE (l->label) + 1);
d1357 1
a1357 1
	  && ISA_HAS_COPROC_DELAYS (mips_opts.isa)
d1360 1
a1360 1
	      || (! gpr_interlocks
d1377 1
a1377 1
	       && ISA_HAS_COPROC_DELAYS (mips_opts.isa)
d1380 1
a1380 1
		   || (mips_opts.isa == 1
d1436 1
a1436 1
	       && ISA_HAS_COPROC_DELAYS (mips_opts.isa)
a1449 31

      /* If we're fixing up mfhi/mflo for the r7000 and the
	 previous insn was an mfhi/mflo and the current insn
	 reads the register that the mfhi/mflo wrote to, then
	 insert two nops.  */

      else if (mips_7000_hilo_fix
	       && MF_HILO_INSN (prev_pinfo)
	       && insn_uses_reg (ip, ((prev_insn.insn_opcode >> OP_SH_RD)
                                       & OP_MASK_RD),
                                    MIPS_GR_REG))

	{
	  nops += 2;
	}

      /* If we're fixing up mfhi/mflo for the r7000 and the
	 2nd previous insn was an mfhi/mflo and the current insn
	 reads the register that the mfhi/mflo wrote to, then
	 insert one nop.  */

      else if (mips_7000_hilo_fix
	       && MF_HILO_INSN (prev_prev_insn.insn_opcode)
	       && insn_uses_reg (ip, ((prev_prev_insn.insn_opcode >> OP_SH_RD)
                                       & OP_MASK_RD),
                                    MIPS_GR_REG))
     
	{
	  nops += 1;
	}
 
d1454 2
a1455 7
	     insert two NOPS.  Some newer processors have interlocks. 
	     Also the tx39's multiply instructions can be exectuted 
             immediatly after a read from HI/LO (without the delay),
             though the tx39's divide insns still do require the 
	     delay. */
	  if (! (hilo_interlocks
		 || (mips_cpu == 3900 && (pinfo & INSN_MULT)))
a1458 10
	  /* Most mips16 branch insns don't have a delay slot.
	     If a read from LO is immediately followed by a branch
	     to a write to LO we have a read followed by a write
	     less than 2 insns away.  We assume the target of
	     a branch might be a write to LO, and insert a nop
	     between a read and an immediately following branch. */
	  else if (mips_opts.mips16
		   && (mips_optimize == 0
		       || (pinfo & MIPS16_INSN_BRANCH)))
	    nops += 1;
d1464 2
a1465 4
	     insert a NOP.  Some newer processors have interlocks.
	     Also the note tx39's multiply above. */
	  if (! (hilo_interlocks
		 || (mips_cpu == 3900 && (pinfo & INSN_MULT)))
a1468 10
	  /* Most mips16 branch insns don't have a delay slot.
	     If a read from HI is immediately followed by a branch
	     to a write to HI we have a read followed by a write
	     less than 2 insns away.  We assume the target of
	     a branch might be a write to HI, and insert a nop
	     between a read and an immediately following branch. */
	  else if (mips_opts.mips16
		   && (mips_optimize == 0
		       || (pinfo & MIPS16_INSN_BRANCH)))
	    nops += 1;
d1486 1
a1486 1
	   && ISA_HAS_COPROC_DELAYS (mips_opts.isa)
d1493 1
a1493 2
	      && ! (hilo_interlocks
		    || (mips_cpu == 3900 && (pinfo & INSN_MULT))))
d1496 1
a1496 2
	      && ! (hilo_interlocks
		    || (mips_cpu == 3900 && (pinfo & INSN_MULT)))))
d1547 1
a1547 1
	      symbol_set_frag (l->label, frag_now);
d1551 1
a1551 1
		S_SET_VALUE (l->label, S_GET_VALUE (l->label) + 1);
d1628 1
a1628 1
	as_warn (_("extended instruction in delay slot"));
d1650 1
a1650 1
		as_bad (_("jump to misaligned address (0x%lx)"),
d1657 1
a1657 1
		as_bad (_("jump to misaligned address (0x%lx)"),
a1664 1

d1833 1
a1833 1
		  && ISA_HAS_COPROC_DELAYS (mips_opts.isa)
d1839 1
a1839 1
		  && ISA_HAS_COPROC_DELAYS (mips_opts.isa)
d1845 1
a1845 2
	      || (! (hilo_interlocks
		     || (mips_cpu == 3900 && (pinfo & INSN_MULT)))
d1850 5
a1854 6
		  && ! gpr_interlocks
		  && (prev_pinfo & INSN_LOAD_MEMORY_DELAY))
	      || (! mips_opts.mips16
		  && mips_opts.isa == 1
                  /* Itbl support may require additional care here. */
		  && (prev_pinfo & INSN_COPROC_MEMORY_DELAY))
d1957 1
a1957 1
		  && ISA_HAS_COPROC_DELAYS (mips_opts.isa)
d1960 1
a1960 1
		      || (! gpr_interlocks
d1983 1
a1983 4
	      || (mips_opts.mips16 && prev_insn_fixp)
	      /* If the previous instruction is a sync, sync.l, or 
		 sync.p, we can not swap. */
	      || (prev_pinfo & INSN_SYNC))
a2115 10

  /* We must ensure that a fixup associated with an unmatched %hi
     reloc does not become a variant frag.  Otherwise, the
     rearrangement of %hi relocs in frob_file may confuse
     tc_gen_reloc.  */
  if (unmatched_hi)
    {
      frag_wane (frag_now);
      frag_new (0);
    }
d2160 1
a2160 1
	   && ISA_HAS_COPROC_DELAYS (mips_opts.isa)
d2166 1
a2166 1
	  || (! hilo_interlocks
d2171 1
a2171 5
	      && ! gpr_interlocks
	      && (prev_insn.insn_mo->pinfo 
                  & INSN_LOAD_MEMORY_DELAY))
	  || (! mips_opts.mips16
	      && mips_opts.isa == 1
d2173 2
a2174 1
		  & INSN_COPROC_MEMORY_DELAY)))
d2179 1
a2179 1
	       && ISA_HAS_COPROC_DELAYS (mips_opts.isa)
d2182 1
a2182 1
	      || (! hilo_interlocks
d2191 1
a2191 1
		&& ISA_HAS_COPROC_DELAYS (mips_opts.isa)
d2194 1
a2194 1
	       || (! hilo_interlocks
d2232 1
a2232 1
	      symbol_set_frag (l->label, frag_now);
d2236 1
a2236 1
		S_SET_VALUE (l->label, S_GET_VALUE (l->label) + 1);
d2288 1
a2288 1
    as_warn (_("Macro instruction expanded into multiple instructions"));
d2305 15
a2319 2
  /* Search until we get a match for NAME.  */
  while (1)
a2320 7
      if (strcmp (fmt, insn.insn_mo->args) == 0
	  && insn.insn_mo->pinfo != INSN_MACRO
	  && OPCODE_IS_MEMBER (insn.insn_mo, mips_opts.isa, mips_cpu, 
			       mips_gp32)
	  && (mips_cpu != 4650 || (insn.insn_mo->pinfo & FP_D) == 0))
	break;

a2324 1

a2374 4
	case 'q':
	  insn.insn_opcode |= va_arg (args, int) << 6;
	  continue;

d2394 1
d2408 1
a2440 4
	case 'C':
	  insn.insn_opcode |= va_arg (args, unsigned long);
	  continue;

d2628 1
a2628 1
    as_warn (_("Macro instruction expanded into multiple instructions"));
d2658 1
a2658 3
  if (imm_expr.X_op == O_constant
      && imm_expr.X_add_number >= -0x8000
      && imm_expr.X_add_number < 0x8000)
d2678 2
a2679 4
  if (ex->X_op == O_big)
    as_bad (_("unsupported large constant"));
  else if (ex->X_op != O_constant)
    as_bad (_("Instruction %s requires absolute expression"), ip->insn_mo->name);
d2804 1
a2804 1
	       || ((! ISA_HAS_64BIT_REGS (mips_opts.isa) || ! dbl)
d2806 1
a2806 1
	       || (! ISA_HAS_64BIT_REGS (mips_opts.isa)
d2823 1
a2823 1
  if (! ISA_HAS_64BIT_REGS (mips_opts.isa))
d2825 1
a2825 1
      as_bad (_("Number larger than 32 bits"));
d2846 1
a2846 1
	as_bad (_("Number larger than 64 bits"));
d3038 1
a3038 1
      as_bad (_("expression too complex"));
d3063 1
a3063 3
		       ((bfd_arch_bits_per_address (stdoutput) == 32
			 || ! ISA_HAS_64BIT_REGS (mips_opts.isa))
		        ? "addiu" : "daddiu"),
d3074 1
a3074 3
		   ((bfd_arch_bits_per_address (stdoutput) == 32
		     || ! ISA_HAS_64BIT_REGS (mips_opts.isa))
		    ? "addiu" : "daddiu"),
d3092 1
a3092 3
		   ((bfd_arch_bits_per_address (stdoutput) == 32
		     || ! ISA_HAS_64BIT_REGS (mips_opts.isa))
		    ? "lw" : "ld"),
d3099 1
a3099 3
		   ((bfd_arch_bits_per_address (stdoutput) == 32
		     || ! ISA_HAS_64BIT_REGS (mips_opts.isa))
		    ? "addiu" : "daddiu"),
d3104 1
a3104 1
	    as_bad (_("PIC code offset overflow (max 16 signed bits)"));
d3107 1
a3107 3
		       ((bfd_arch_bits_per_address (stdoutput) == 32
			 || ! ISA_HAS_64BIT_REGS (mips_opts.isa))
			? "addiu" : "daddiu"),
d3136 1
a3136 3
		   ((bfd_arch_bits_per_address (stdoutput) == 32
		     || ! ISA_HAS_64BIT_REGS (mips_opts.isa))
		    ? "addu" : "daddu"),
d3139 1
a3139 3
		   ((bfd_arch_bits_per_address (stdoutput) == 32
		     || ! ISA_HAS_64BIT_REGS (mips_opts.isa))
		    ? "lw" : "ld"),
d3155 1
a3155 3
		   ((bfd_arch_bits_per_address (stdoutput) == 32
		     || ! ISA_HAS_64BIT_REGS (mips_opts.isa))
		    ? "lw" : "ld"),
d3161 1
a3161 3
		   ((bfd_arch_bits_per_address (stdoutput) == 32
		     || ! ISA_HAS_64BIT_REGS (mips_opts.isa))
		    ? "addiu" : "daddiu"),
d3166 1
a3166 1
	    as_bad (_("PIC code offset overflow (max 16 signed bits)"));
d3169 1
a3169 3
		       ((bfd_arch_bits_per_address (stdoutput) == 32
		         || ! ISA_HAS_64BIT_REGS (mips_opts.isa))
			? "addiu" : "daddiu"),
d3179 1
a3179 3
		   ((bfd_arch_bits_per_address (stdoutput) == 32
		     || ! ISA_HAS_64BIT_REGS (mips_opts.isa))
		    ? "addiu" : "daddiu"),
a3220 1
  int imm = 0;
d3284 1
a3284 3
      if (imm_expr.X_op == O_constant
	  && imm_expr.X_add_number >= -0x8000
	  && imm_expr.X_add_number < 0x8000)
d3310 1
a3310 3
      if (imm_expr.X_op == O_constant
	  && imm_expr.X_add_number >= 0
	  && imm_expr.X_add_number < 0x10000)
d3343 1
a3343 1
      if (imm_expr.X_op == O_constant && imm_expr.X_add_number == 0)
d3381 1
a3381 1
      if (ISA_HAS_64BIT_REGS (mips_opts.isa) && sizeof (maxnum) > 4)
d3388 2
a3389 3
      if (imm_expr.X_op == O_constant
	  && imm_expr.X_add_number >= maxnum
	  && (! ISA_HAS_64BIT_REGS (mips_opts.isa) || sizeof (maxnum) > 4))
d3395 1
a3395 1
	      as_warn (_("Branch %s is always false (nop)"), ip->insn_mo->name);
d3400 1
a3400 1
	      as_warn (_("Branch likely %s is always false"), ip->insn_mo->name);
a3405 2
      if (imm_expr.X_op != O_constant)
	as_bad (_("Unsupported large constant"));
d3412 1
a3412 1
      if (imm_expr.X_op == O_constant && imm_expr.X_add_number == 0)
d3419 1
a3419 1
      if (imm_expr.X_op == O_constant && imm_expr.X_add_number == 1)
d3427 1
a3427 1
      if (ISA_HAS_64BIT_REGS (mips_opts.isa) && sizeof (maxnum) > 4)
d3435 2
a3436 3
      if (imm_expr.X_op == O_constant
	  && imm_expr.X_add_number <= maxnum
	  && (! ISA_HAS_64BIT_REGS (mips_opts.isa) || sizeof (maxnum) > 4))
d3440 1
a3440 1
	  as_warn (_("Branch %s is always true"), ip->insn_mo->name);
d3472 1
a3472 4
      if (sreg == 0
	  || (! ISA_HAS_64BIT_REGS (mips_opts.isa)
	      && imm_expr.X_op == O_constant
	      && imm_expr.X_add_number == 0xffffffff))
a3473 2
      if (imm_expr.X_op != O_constant)
	as_bad (_("Unsupported large constant"));
d3480 1
a3480 1
      if (imm_expr.X_op == O_constant && imm_expr.X_add_number == 0)
d3482 1
a3482 1
      if (imm_expr.X_op == O_constant && imm_expr.X_add_number == 1)
d3564 1
a3564 1
      if (ISA_HAS_64BIT_REGS (mips_opts.isa) && sizeof (maxnum) > 4)
d3571 2
a3572 3
      if (imm_expr.X_op == O_constant
	  && imm_expr.X_add_number >= maxnum
	  && (! ISA_HAS_64BIT_REGS (mips_opts.isa) || sizeof (maxnum) > 4))
a3573 2
      if (imm_expr.X_op != O_constant)
	as_bad (_("Unsupported large constant"));
d3580 1
a3580 1
      if (imm_expr.X_op == O_constant && imm_expr.X_add_number == 0)
d3587 1
a3587 1
      if (imm_expr.X_op == O_constant && imm_expr.X_add_number == 1)
d3622 1
a3622 4
      if (sreg == 0
	  || (! ISA_HAS_64BIT_REGS (mips_opts.isa)
	      && imm_expr.X_op == O_constant
	      && imm_expr.X_add_number == 0xffffffff))
a3623 2
      if (imm_expr.X_op != O_constant)
	as_bad (_("Unsupported large constant"));
d3630 1
a3630 1
      if (imm_expr.X_op == O_constant && imm_expr.X_add_number == 0)
d3632 1
a3632 1
      if (imm_expr.X_op == O_constant && imm_expr.X_add_number == 1)
d3699 1
a3699 1
	  as_warn (_("Divide by zero."));
d3703 1
a3703 1
	      macro_build ((char *) NULL, &icnt, NULL, "break", "c", 7);
d3710 3
d3714 1
a3714 6
	{
	  macro_build ((char *) NULL, &icnt, NULL, "teq", "s,t", treg, 0);
	  macro_build ((char *) NULL, &icnt, NULL,
		       dbl ? "ddiv" : "div",
		       "z,s,t", sreg, treg);
	}
d3719 2
a3720 4
	  macro_build ((char *) NULL, &icnt, NULL,
		       dbl ? "ddiv" : "div",
		       "z,s,t", sreg, treg);
	    macro_build ((char *) NULL, &icnt, NULL, "break", "c", 7);
d3743 1
a3743 6
	{
	  macro_build ((char *) NULL, &icnt, NULL, "teq", "s,t", sreg, AT);
	  /* We want to close the noreorder block as soon as possible, so
	     that later insns are available for delay slot filling.  */
	  --mips_opts.noreorder;
	}
d3749 1
a3749 6

	  /* We want to close the noreorder block as soon as possible, so
	     that later insns are available for delay slot filling.  */
	  --mips_opts.noreorder;

	    macro_build ((char *) NULL, &icnt, NULL, "break", "c", 6);
d3751 1
d3791 1
a3791 1
      if (imm_expr.X_op == O_constant && imm_expr.X_add_number == 0)
d3793 1
a3793 1
	  as_warn (_("Divide by zero."));
d3797 1
a3797 1
	      macro_build ((char *) NULL, &icnt, NULL, "break", "c", 7);
d3800 1
a3800 1
      if (imm_expr.X_op == O_constant && imm_expr.X_add_number == 1)
d3809 1
a3809 2
      if (imm_expr.X_op == O_constant
	  && imm_expr.X_add_number == -1
d3850 1
d3852 1
a3852 7
	{
	  macro_build ((char *) NULL, &icnt, NULL, "teq", "s,t", treg, 0);
	  macro_build ((char *) NULL, &icnt, NULL, s, "z,s,t", sreg, treg);
	  /* We want to close the noreorder block as soon as possible, so
	     that later insns are available for delay slot filling.  */
	  --mips_opts.noreorder;
	}
d3857 2
a3858 6
	  macro_build ((char *) NULL, &icnt, NULL, s, "z,s,t", sreg, treg);

	  /* We want to close the noreorder block as soon as possible, so
	     that later insns are available for delay slot filling.  */
	  --mips_opts.noreorder;
	    macro_build ((char *) NULL, &icnt, NULL, "break", "c", 7);
d3860 1
d3873 1
a3873 1
	 where bar is an address in the current section.  These are used
d3880 7
a3886 7
	  && (symbol_constant_p (offset_expr.X_op_symbol)
	      ? S_GET_SEGMENT (offset_expr.X_op_symbol) == now_seg
	      : (symbol_equated_p (offset_expr.X_op_symbol)
		 && (S_GET_SEGMENT
		     (symbol_get_value_expression (offset_expr.X_op_symbol)
		      ->X_add_symbol)
		     == now_seg)))
d3888 1
a3888 2
	  && (offset_expr.X_add_number == 0
	      || OUTPUT_FLAVOR == bfd_target_elf_flavour))
d3893 1
a3893 3
		       ((bfd_arch_bits_per_address (stdoutput) == 32
		         || ! ISA_HAS_64BIT_REGS (mips_opts.isa))
			? "addiu" : "daddiu"),
d3901 1
a3901 1
	  as_bad (_("expression too complex"));
d3934 1
a3934 3
			   ((bfd_arch_bits_per_address (stdoutput) == 32
		     	     || ! ISA_HAS_64BIT_REGS (mips_opts.isa))
			    ? "addiu" : "daddiu"),
d3946 1
a3946 3
		       ((bfd_arch_bits_per_address (stdoutput) == 32
			 || ! ISA_HAS_64BIT_REGS (mips_opts.isa))
			? "addiu" : "daddiu"),
d4011 1
a4011 3
			   ((bfd_arch_bits_per_address (stdoutput) == 32
			     || ! ISA_HAS_64BIT_REGS (mips_opts.isa))
			    ? "addiu" : "daddiu"),
d4023 1
a4023 3
			   ((bfd_arch_bits_per_address (stdoutput) == 32
			     || ! ISA_HAS_64BIT_REGS (mips_opts.isa))
			    ? "addiu" : "daddiu"),
d4048 1
a4048 3
			       ((bfd_arch_bits_per_address (stdoutput) == 32
				 || ! ISA_HAS_64BIT_REGS (mips_opts.isa))
				? "addu" : "daddu"),
d4063 1
a4063 3
			   ((bfd_arch_bits_per_address (stdoutput) == 32
			     || ! ISA_HAS_64BIT_REGS (mips_opts.isa))
			    ? "addiu" : "daddiu"),
d4066 1
a4066 3
			   ((bfd_arch_bits_per_address (stdoutput) == 32
			     || ! ISA_HAS_64BIT_REGS (mips_opts.isa))
			    ? "addu" : "daddu"),
d4125 1
a4125 3
		       ((bfd_arch_bits_per_address (stdoutput) == 32
			 || ! ISA_HAS_64BIT_REGS (mips_opts.isa))
			? "addu" : "daddu"),
d4162 1
a4162 3
			   ((bfd_arch_bits_per_address (stdoutput) == 32
			     || ! ISA_HAS_64BIT_REGS (mips_opts.isa))
			    ? "addiu" : "daddiu"),
d4195 1
a4195 3
			       ((bfd_arch_bits_per_address (stdoutput) == 32
				 || ! ISA_HAS_64BIT_REGS (mips_opts.isa))
				? "addu" : "daddu"),
d4209 1
a4209 3
			   ((bfd_arch_bits_per_address (stdoutput) == 32
			     || ! ISA_HAS_64BIT_REGS (mips_opts.isa))
			    ? "addiu" : "daddiu"),
d4212 1
a4212 3
			   ((bfd_arch_bits_per_address (stdoutput) == 32
			     || ! ISA_HAS_64BIT_REGS (mips_opts.isa))
			    ? "addu" : "daddu"),
d4244 1
a4244 3
			   ((bfd_arch_bits_per_address (stdoutput) == 32
			     || ! ISA_HAS_64BIT_REGS (mips_opts.isa))
			    ? "addiu" : "daddiu"),
d4262 1
a4262 3
			       ((bfd_arch_bits_per_address (stdoutput) == 32
				 || ! ISA_HAS_64BIT_REGS (mips_opts.isa))
				? "addu" : "daddu"),
d4274 1
a4274 3
			   ((bfd_arch_bits_per_address (stdoutput) == 32
			     || ! ISA_HAS_64BIT_REGS (mips_opts.isa))
			    ? "addiu" : "daddiu"),
d4278 1
a4278 3
			   ((bfd_arch_bits_per_address (stdoutput) == 32
			     || ! ISA_HAS_64BIT_REGS (mips_opts.isa))
			    ? "addu" : "daddu"),
d4289 1
a4289 3
		       ((bfd_arch_bits_per_address (stdoutput) == 32
			 || ! ISA_HAS_64BIT_REGS (mips_opts.isa))
			? "addiu" : "daddiu"),
d4297 1
a4297 3
		     ((bfd_arch_bits_per_address (stdoutput) == 32
		       || ! ISA_HAS_64BIT_REGS (mips_opts.isa))
		      ? "addu" : "daddu"),
d4329 1
a4329 1
	    as_warn (_("MIPS PIC call to register other than $25"));
d4334 1
a4334 1
	    as_warn (_("No .cprestore pseudo-op used in PIC code"));
d4339 1
a4339 3
			   ((bfd_arch_bits_per_address (stdoutput) == 32
			     || ! ISA_HAS_64BIT_REGS (mips_opts.isa))
			    ? "lw" : "ld"),
d4380 1
a4380 3
			   ((bfd_arch_bits_per_address (stdoutput) == 32
			     || ! ISA_HAS_64BIT_REGS (mips_opts.isa))
			    ? "lw" : "ld"),
d4401 1
a4401 3
			   ((bfd_arch_bits_per_address (stdoutput) == 32
			     || ! ISA_HAS_64BIT_REGS (mips_opts.isa))
			    ? "addu" : "daddu"),
d4404 1
a4404 3
			   ((bfd_arch_bits_per_address (stdoutput) == 32
			     || ! ISA_HAS_64BIT_REGS (mips_opts.isa))
			    ? "lw" : "ld"),
d4420 1
a4420 3
			   ((bfd_arch_bits_per_address (stdoutput) == 32
			     || ! ISA_HAS_64BIT_REGS (mips_opts.isa))
			    ? "lw" : "ld"),
d4428 1
a4428 3
		       ((bfd_arch_bits_per_address (stdoutput) == 32
			 || ! ISA_HAS_64BIT_REGS (mips_opts.isa))
			? "addiu" : "daddiu"),
d4434 1
a4434 1
	    as_warn (_("No .cprestore pseudo-op used in PIC code"));
d4442 1
a4442 3
			   ((bfd_arch_bits_per_address (stdoutput) == 32
			     || ! ISA_HAS_64BIT_REGS (mips_opts.isa))
			    ? "lw" : "ld"),
a4502 5
      if (mips_cpu == 4650)
	{
	  as_bad (_("opcode not supported on this processor"));
	  return;
	}
a4586 5
      if (mips_cpu == 4650)
	{
	  as_bad (_("opcode not supported on this processor"));
	  return;
	}
d4626 1
a4626 1
	  as_bad (_("expression too complex"));
d4687 1
a4687 3
			       ((bfd_arch_bits_per_address (stdoutput) == 32
				 || ! ISA_HAS_64BIT_REGS (mips_opts.isa))
				? "addu" : "daddu"),
d4700 1
a4700 3
			   ((bfd_arch_bits_per_address (stdoutput) == 32
			     || ! ISA_HAS_64BIT_REGS (mips_opts.isa))
			    ? "addu" : "daddu"),
d4730 1
a4730 1
	    as_bad (_("PIC code offset overflow (max 16 signed bits)"));
d4733 1
a4733 3
		       ((bfd_arch_bits_per_address (stdoutput) == 32
			 || ! ISA_HAS_64BIT_REGS (mips_opts.isa))
		        ? "lw" : "ld"),
d4741 1
a4741 3
		       ((bfd_arch_bits_per_address (stdoutput) == 32
			 || ! ISA_HAS_64BIT_REGS (mips_opts.isa))
		        ? "addiu" : "daddiu"),
d4745 1
a4745 3
			 ((bfd_arch_bits_per_address (stdoutput) == 32
			   || ! ISA_HAS_64BIT_REGS (mips_opts.isa))
			  ? "addu" : "daddu"),
d4775 1
a4775 1
	    as_bad (_("PIC code offset overflow (max 16 signed bits)"));
d4784 1
a4784 3
		       ((bfd_arch_bits_per_address (stdoutput) == 32
			 || ! ISA_HAS_64BIT_REGS (mips_opts.isa))
		        ? "addu" : "daddu"),
d4787 1
a4787 3
		       ((bfd_arch_bits_per_address (stdoutput) == 32
			 || ! ISA_HAS_64BIT_REGS (mips_opts.isa))
		        ? "lw" : "ld"),
d4799 1
a4799 3
		       ((bfd_arch_bits_per_address (stdoutput) == 32
			 || ! ISA_HAS_64BIT_REGS (mips_opts.isa))
		        ? "lw" : "ld"),
d4805 1
a4805 3
		       ((bfd_arch_bits_per_address (stdoutput) == 32
			 || ! ISA_HAS_64BIT_REGS (mips_opts.isa))
		        ? "addiu" : "daddiu"),
d4809 1
a4809 3
			 ((bfd_arch_bits_per_address (stdoutput) == 32
			   || ! ISA_HAS_64BIT_REGS (mips_opts.isa))
			  ? "addu" : "daddu"),
d4832 1
a4832 3
			   ((bfd_arch_bits_per_address (stdoutput) == 32
			     || ! ISA_HAS_64BIT_REGS (mips_opts.isa))
			    ? "addu" : "daddu"),
a4875 40
      /* If we have a constant in IMM_EXPR, then in mips3 mode it is
         the entire value, and in mips1 mode it is the high order 32
         bits of the value and the low order 32 bits are either zero
         or in offset_expr.  */
      if (imm_expr.X_op == O_constant || imm_expr.X_op == O_big)
	{
	  if (ISA_HAS_64BIT_REGS (mips_opts.isa))
	    load_register (&icnt, treg, &imm_expr, 1);
	  else
	    {
	      int hreg, lreg;

	      if (target_big_endian)
		{
		  hreg = treg;
		  lreg = treg + 1;
		}
	      else
		{
		  hreg = treg + 1;
		  lreg = treg;
		}

	      if (hreg <= 31)
		load_register (&icnt, hreg, &imm_expr, 0);
	      if (lreg <= 31)
		{
		  if (offset_expr.X_op == O_absent)
		    macro_build ((char *) NULL, &icnt, NULL, "move", "d,s",
				 lreg, 0);
		  else
		    {
		      assert (offset_expr.X_op == O_constant);
		      load_register (&icnt, lreg, &offset_expr, 0);
		    }
		}
	    }
	  return;
	}

d4886 1
a4886 3
		       ((bfd_arch_bits_per_address (stdoutput) == 32
			 || ! ISA_HAS_64BIT_REGS (mips_opts.isa))
		        ? "lw" : "ld"),
d4894 1
a4894 3
		       ((bfd_arch_bits_per_address (stdoutput) == 32
			 || ! ISA_HAS_64BIT_REGS (mips_opts.isa))
		        ? "addiu" : "daddiu"),
d4903 1
a4903 1
      if (ISA_HAS_64BIT_REGS (mips_opts.isa))
a4927 28
      /* If we have a constant in IMM_EXPR, then in mips3 mode it is
         the entire value, and in mips1 mode it is the high order 32
         bits of the value and the low order 32 bits are either zero
         or in offset_expr.  */
      if (imm_expr.X_op == O_constant || imm_expr.X_op == O_big)
	{
	  load_register (&icnt, AT, &imm_expr, ISA_HAS_64BIT_REGS (mips_opts.isa));
	  if (ISA_HAS_64BIT_REGS (mips_opts.isa))
	    macro_build ((char *) NULL, &icnt, (expressionS *) NULL,
			 "dmtc1", "t,S", AT, treg);
	  else
	    {
	      macro_build ((char *) NULL, &icnt, (expressionS *) NULL,
			   "mtc1", "t,G", AT, treg + 1);
	      if (offset_expr.X_op == O_absent)
		macro_build ((char *) NULL, &icnt, (expressionS *) NULL,
			     "mtc1", "t,G", 0, treg);
	      else
		{
		  assert (offset_expr.X_op == O_constant);
		  load_register (&icnt, AT, &offset_expr, 0);
		  macro_build ((char *) NULL, &icnt, (expressionS *) NULL,
			       "mtc1", "t,G", AT, treg);
		}
	    }
	  break;
	}

d4933 1
a4933 1
	  if (mips_opts.isa != 1)
d4948 1
a4948 3
			 ((bfd_arch_bits_per_address (stdoutput) == 32
			   || ! ISA_HAS_64BIT_REGS (mips_opts.isa))
			  ? "lw" : "ld"),
d4956 1
a4956 1
	  if (mips_opts.isa != 1)
a4973 5
      if (mips_cpu == 4650)
	{
	  as_bad (_("opcode not supported on this processor"));
	  return;
	}
d4978 1
a4978 1
      assert (mips_opts.isa == 1);
a5009 5
      if (mips_cpu == 4650)
	{
	  as_bad (_("opcode not supported on this processor"));
	  return;
	}
d5012 1
a5012 1
      if (mips_opts.isa != 1)
d5023 1
a5023 7
      if (mips_cpu == 4650)
	{
	  as_bad (_("opcode not supported on this processor"));
	  return;
	}

      if (mips_opts.isa != 1)
d5036 1
a5036 1
      if (ISA_HAS_64BIT_REGS (mips_opts.isa))
d5047 1
a5047 1
      if (ISA_HAS_64BIT_REGS (mips_opts.isa))
d5060 1
a5060 1
	  as_bad (_("expression too complex"));
d5109 1
a5109 3
			       ((bfd_arch_bits_per_address (stdoutput) == 32
				 || ! ISA_HAS_64BIT_REGS (mips_opts.isa))
				? "addu" : "daddu"),
d5145 3
a5147 13
		 offset_expr when we build its instruction below.

		 If we have a symbol, then we don't want to include
		 the offset, because it will wind up being included
		 when we generate the reloc.  */

	      if (offset_expr.X_op == O_constant)
		offset_expr.X_add_number -= 8;
	      else
		{
		  offset_expr.X_add_number = -4;
		  offset_expr.X_op = O_constant;
		}
d5155 1
a5155 3
			   ((bfd_arch_bits_per_address (stdoutput) == 32
			     || ! ISA_HAS_64BIT_REGS (mips_opts.isa))
			    ? "addu" : "daddu"),
d5195 1
a5195 1
	    as_bad (_("PIC code offset overflow (max 16 signed bits)"));
d5202 1
a5202 3
		       ((bfd_arch_bits_per_address (stdoutput) == 32
			 || ! ISA_HAS_64BIT_REGS (mips_opts.isa))
		        ? "lw" : "ld"),
d5207 1
a5207 3
			 ((bfd_arch_bits_per_address (stdoutput) == 32
			   || ! ISA_HAS_64BIT_REGS (mips_opts.isa))
			  ? "addu" : "daddu"),
d5254 1
a5254 1
	    as_bad (_("PIC code offset overflow (max 16 signed bits)"));
d5267 1
a5267 3
		       ((bfd_arch_bits_per_address (stdoutput) == 32
			 || ! ISA_HAS_64BIT_REGS (mips_opts.isa))
		        ? "addu" : "daddu"),
d5270 1
a5270 3
		       ((bfd_arch_bits_per_address (stdoutput) == 32
			 || ! ISA_HAS_64BIT_REGS (mips_opts.isa))
		        ? "lw" : "ld"),
d5275 1
a5275 3
			 ((bfd_arch_bits_per_address (stdoutput) == 32
			   || ! ISA_HAS_64BIT_REGS (mips_opts.isa))
			  ? "addu" : "daddu"),
d5305 1
a5305 3
		       ((bfd_arch_bits_per_address (stdoutput) == 32
			 || ! ISA_HAS_64BIT_REGS (mips_opts.isa))
		        ? "lw" : "ld"),
d5313 1
a5313 3
			   ((bfd_arch_bits_per_address (stdoutput) == 32
			     || ! ISA_HAS_64BIT_REGS (mips_opts.isa))
			    ? "addu" : "daddu"),
d5352 1
a5352 3
			   ((bfd_arch_bits_per_address (stdoutput) == 32
			     || ! ISA_HAS_64BIT_REGS (mips_opts.isa))
			    ? "addu" : "daddu"),
d5382 1
a5382 2
      assert (bfd_arch_bits_per_address (stdoutput) == 32 
	      || ! ISA_HAS_64BIT_REGS (mips_opts.isa));
d5408 1
a5408 1
      s = "c0";
d5411 1
a5411 1
      s = "c1";
d5414 1
a5414 1
      s = "c2";
d5417 1
a5417 1
      s = "c3";
d5419 2
a5420 4
      /* For now we just do C (same as Cz).  The parameter will be
         stored in insn_opcode by mips_ip.  */
      macro_build ((char *) NULL, &icnt, (expressionS *) NULL, s, "C",
		   ip->insn_opcode);
d5446 1
a5446 1
    as_warn (_("Macro used $at after \".set noat\""));
a5465 1
  int imm = 0;
a5506 6
    case M_DMULO_I:
      dbl = 1;
    case M_MULO_I:
      imm = 1;
      goto do_mulo;

a5509 1
    do_mulo:
a5512 2
      if (imm)
	load_register (&icnt, AT, &imm_expr, dbl);
d5515 1
a5515 1
		   "s,t", sreg, imm ? AT : treg);
d5528 1
a5528 1
	    macro_build ((char *) NULL, &icnt, NULL, "break", "c", 6);
a5533 6
    case M_DMULOU_I:
      dbl = 1;
    case M_MULOU_I:
      imm = 1;
      goto do_mulou;

a5536 1
    do_mulou:
a5539 2
      if (imm)
	load_register (&icnt, AT, &imm_expr, dbl);
d5542 1
a5542 1
		   "s,t", sreg, imm ? AT : treg);
d5552 1
a5552 1
	    macro_build ((char *) NULL, &icnt, NULL, "break", "c", 6);
a5565 2
      if (imm_expr.X_op != O_constant)
	as_bad (_("rotate count too large"));
a5581 2
      if (imm_expr.X_op != O_constant)
	as_bad (_("rotate count too large"));
d5590 1
a5590 6
      if (mips_cpu == 4650)
	{
	  as_bad (_("opcode not supported on this processor"));
	  return;
	}
      assert (mips_opts.isa == 1);
d5619 1
a5619 1
      if (imm_expr.X_op == O_constant && imm_expr.X_add_number == 0)
d5627 1
a5627 1
	  as_warn (_("Instruction %s: result is always false"),
d5632 1
a5632 3
      if (imm_expr.X_op == O_constant
	  && imm_expr.X_add_number >= 0
	  && imm_expr.X_add_number < 0x10000)
d5638 1
a5638 3
      else if (imm_expr.X_op == O_constant
	       && imm_expr.X_add_number > -0x8000
	       && imm_expr.X_add_number < 0)
d5642 1
a5642 3
		       ((bfd_arch_bits_per_address (stdoutput) == 32
			 || ! ISA_HAS_64BIT_REGS (mips_opts.isa))
		        ? "addiu" : "daddiu"),
d5673 1
a5673 3
      if (imm_expr.X_op == O_constant
	  && imm_expr.X_add_number >= -0x8000
	  && imm_expr.X_add_number < 0x8000)
d5675 1
a5675 1
	  macro_build ((char *) NULL, &icnt, &imm_expr,
d5737 1
a5737 3
      if (imm_expr.X_op == O_constant
	  && imm_expr.X_add_number >= -0x8000
	  && imm_expr.X_add_number < 0x8000)
d5748 1
a5748 3
      if (imm_expr.X_op == O_constant
	  && imm_expr.X_add_number >= -0x8000
	  && imm_expr.X_add_number < 0x8000)
d5776 1
a5776 1
      if (imm_expr.X_op == O_constant && imm_expr.X_add_number == 0)
d5784 1
a5784 1
	  as_warn (_("Instruction %s: result is always true"),
d5787 1
a5787 3
		       ((bfd_arch_bits_per_address (stdoutput) == 32
			 || ! ISA_HAS_64BIT_REGS (mips_opts.isa))
		        ? "addiu" : "daddiu"),
d5791 1
a5791 3
      if (imm_expr.X_op == O_constant
	  && imm_expr.X_add_number >= 0
	  && imm_expr.X_add_number < 0x10000)
d5797 1
a5797 3
      else if (imm_expr.X_op == O_constant
	       && imm_expr.X_add_number > -0x8000
	       && imm_expr.X_add_number < 0)
d5801 1
a5801 3
		       ((bfd_arch_bits_per_address (stdoutput) == 32
			 || ! ISA_HAS_64BIT_REGS (mips_opts.isa))
		        ? "addiu" : "daddiu"),
d5820 1
a5820 3
      if (imm_expr.X_op == O_constant
	  && imm_expr.X_add_number > -0x8000
	  && imm_expr.X_add_number <= 0x8000)
d5837 1
a5837 3
      if (imm_expr.X_op == O_constant
	  && imm_expr.X_add_number > -0x8000
	  && imm_expr.X_add_number <= 0x8000)
d5875 1
a5875 1
      assert (mips_opts.isa == 1);
d5911 1
a5911 1
	as_bad (_("operand overflow"));
d5938 1
a5938 1
	as_bad (_("operand overflow"));
d5964 1
a5964 3
		     ((bfd_arch_bits_per_address (stdoutput) == 32
		       || ! ISA_HAS_64BIT_REGS (mips_opts.isa))
		      ? "addu" : "daddu"),
d5985 1
a5985 3
		     ((bfd_arch_bits_per_address (stdoutput) == 32
		       || ! ISA_HAS_64BIT_REGS (mips_opts.isa))
		      ? "addu" : "daddu"),
d6006 1
a6006 1
	as_bad (_("operand overflow"));
d6031 1
a6031 1
	as_bad (_("operand overflow"));
d6057 1
a6057 3
		     ((bfd_arch_bits_per_address (stdoutput) == 32
		       || ! ISA_HAS_64BIT_REGS (mips_opts.isa))
		      ? "addu" : "daddu"),
d6077 1
a6077 3
		     ((bfd_arch_bits_per_address (stdoutput) == 32
		       || ! ISA_HAS_64BIT_REGS (mips_opts.isa))
		      ? "addu" : "daddu"),
d6106 1
a6106 1
      as_bad (_("Macro %s not implemented yet"), ip->insn_mo->name);
d6110 1
a6110 1
    as_warn (_("Macro used $at after \".set noat\""));
d6164 1
a6164 2
	macro_build ((char *) NULL, &icnt, NULL, "break", "6", 7);
      
d6195 1
a6195 1
	macro_build ((char *) NULL, &icnt, NULL, "break", "6", 7);
a6213 2
      if (imm_expr.X_op != O_constant)
	as_bad (_("Unsupported large constant"));
a6220 2
      if (imm_expr.X_op != O_constant)
	as_bad (_("Unsupported large constant"));
a6226 2
      if (imm_expr.X_op != O_constant)
	as_bad (_("Unsupported large constant"));
a6333 2
      if (imm_expr.X_op != O_constant)
	as_bad (_("Unsupported large constant"));
a6353 79
/* For consistency checking, verify that all bits are specified either
   by the match/mask part of the instruction definition, or by the
   operand list.  */
static int
validate_mips_insn (opc)
     const struct mips_opcode *opc;
{
  const char *p = opc->args;
  char c;
  unsigned long used_bits = opc->mask;

  if ((used_bits & opc->match) != opc->match)
    {
      as_bad (_("internal: bad mips opcode (mask error): %s %s"),
	      opc->name, opc->args);
      return 0;
    }
#define USE_BITS(mask,shift)	(used_bits |= ((mask) << (shift)))
  while (*p)
    switch (c = *p++)
      {
      case ',': break;
      case '(': break;
      case ')': break;
      case '<': USE_BITS (OP_MASK_SHAMT,	OP_SH_SHAMT);	break;
      case '>':	USE_BITS (OP_MASK_SHAMT,	OP_SH_SHAMT);	break;
      case 'A': break;
      case 'B':	USE_BITS (OP_MASK_SYSCALL,	OP_SH_SYSCALL);	break;
      case 'C':	USE_BITS (OP_MASK_COPZ,		OP_SH_COPZ);	break;
      case 'D':	USE_BITS (OP_MASK_FD,		OP_SH_FD);	break;
      case 'E':	USE_BITS (OP_MASK_RT,		OP_SH_RT);	break;
      case 'F': break;
      case 'G':	USE_BITS (OP_MASK_RD,		OP_SH_RD);	break;
      case 'I': break;
      case 'L': break;
      case 'M':	USE_BITS (OP_MASK_CCC,		OP_SH_CCC);	break;
      case 'N':	USE_BITS (OP_MASK_BCC,		OP_SH_BCC);	break;
      case 'R':	USE_BITS (OP_MASK_FR,		OP_SH_FR);	break;
      case 'S':	USE_BITS (OP_MASK_FS,		OP_SH_FS);	break;
      case 'T':	USE_BITS (OP_MASK_FT,		OP_SH_FT);	break;
      case 'V':	USE_BITS (OP_MASK_FS,		OP_SH_FS);	break;
      case 'W':	USE_BITS (OP_MASK_FT,		OP_SH_FT);	break;
      case 'a':	USE_BITS (OP_MASK_TARGET,	OP_SH_TARGET);	break;
      case 'b':	USE_BITS (OP_MASK_RS,		OP_SH_RS);	break;
      case 'c':	USE_BITS (OP_MASK_CODE,		OP_SH_CODE);	break;
      case 'd':	USE_BITS (OP_MASK_RD,		OP_SH_RD);	break;
      case 'f': break;
      case 'h':	USE_BITS (OP_MASK_PREFX,	OP_SH_PREFX);	break;
      case 'i':	USE_BITS (OP_MASK_IMMEDIATE,	OP_SH_IMMEDIATE); break;
      case 'j':	USE_BITS (OP_MASK_DELTA,	OP_SH_DELTA);	break;
      case 'k':	USE_BITS (OP_MASK_CACHE,	OP_SH_CACHE);	break;
      case 'l': break;
      case 'o': USE_BITS (OP_MASK_DELTA,	OP_SH_DELTA);	break;
      case 'p':	USE_BITS (OP_MASK_DELTA,	OP_SH_DELTA);	break;
      case 'q':	USE_BITS (OP_MASK_CODE2,	OP_SH_CODE2);	break;
      case 'r': USE_BITS (OP_MASK_RS,		OP_SH_RS);	break;
      case 's':	USE_BITS (OP_MASK_RS,		OP_SH_RS);	break;
      case 't':	USE_BITS (OP_MASK_RT,		OP_SH_RT);	break;
      case 'u':	USE_BITS (OP_MASK_IMMEDIATE,	OP_SH_IMMEDIATE); break;
      case 'v':	USE_BITS (OP_MASK_RS,		OP_SH_RS);	break;
      case 'w':	USE_BITS (OP_MASK_RT,		OP_SH_RT);	break;
      case 'x': break;
      case 'z': break;
      case 'P': USE_BITS (OP_MASK_PERFREG,	OP_SH_PERFREG);	break;
      default:
	as_bad (_("internal: bad mips opcode (unknown operand type `%c'): %s %s"),
		c, opc->name, opc->args);
	return 0;
      }
#undef USE_BITS
  if (used_bits != 0xffffffff)
    {
      as_bad (_("internal: bad mips opcode (bits 0x%lx undefined): %s %s"),
	      ~used_bits & 0xffffffff, opc->name, opc->args);
      return 0;
    }
  return 1;
}

a6371 2
  char save_c = 0;
  int full_opcode_match = 1;
d6375 1
a6375 4
  /* If the instruction contains a '.', we first try to match an instruction
     including the '.'.  Then we try again without the '.'.  */
  insn = NULL;
  for (s = str; *s != '\0' && !isspace ((unsigned char) *s); ++s)
d6377 2
d6380 1
a6380 4
  /* If we stopped on whitespace, then replace the whitespace with null for
     the call to hash_find.  Save the character we replaced just in case we
     have to re-parse the instruction.  */
  if (isspace ((unsigned char) *s))
d6382 2
a6383 2
      save_c = *s;
      *s++ = '\0';
d6385 4
a6388 2
	
  insn = (struct mips_opcode *) hash_find (op_hash, str);
d6390 1
a6390 12
  /* If we didn't find the instruction in the opcode table, try again, but
     this time with just the instruction up to, but not including the
     first '.'.  */
  if (insn == NULL)
    {
      /* Restore the character we overwrite above (if any).  */ 
      if (save_c)
	*(--s) = save_c;

      /* Scan up to the first '.' or whitespace.  */
      for (s = str; *s != '\0' && *s != '.' && !isspace ((unsigned char) *s); ++s)
	continue;
d6392 20
a6411 2
      /* If we did not find a '.', then we can quit now.  */
      if (*s != '.')
d6413 11
a6423 14
	  insn_error = "unrecognized opcode";
	  return;
	}

      /* Lookup the instruction in the hash table.  */
      *s++ = '\0';
      if ((insn = (struct mips_opcode *) hash_find (op_hash, str)) == NULL)
	{
	  insn_error = "unrecognized opcode";
	  return;
	}

      full_opcode_match = 0;
    }
d6425 1
a6425 33
  argsStart = s;
  for (;;)
    {
      boolean ok;

      assert (strcmp (insn->name, str) == 0);

      if (OPCODE_IS_MEMBER (insn, mips_opts.isa, mips_cpu, mips_gp32))
	ok = true;
      else 
	ok = false;
      
      if (insn->pinfo != INSN_MACRO)
	{
	  if (mips_cpu == 4650 && (insn->pinfo & FP_D) != 0)
	    ok = false;
	}

      if (! ok)
	{
	  if (insn + 1 < &mips_opcodes[NUMOPCODES]
	      && strcmp (insn->name, insn[1].name) == 0)
	    {
	      ++insn;
	      continue;
	    }
	  else
	    {
	      static char buf[100];
	      sprintf (buf, 
		       _("opcode not supported on this processor: %d (MIPS%d)"),
		       mips_cpu, mips_opts.isa);
		       
a6426 1
	      return;
d6428 1
d6467 1
a6467 1
	      /* Handle optional base register.
d6470 3
a6472 4
	      /* This is dependent on the next operand specifier
		 is a base register specification.  */
	      assert (args[1] == 'b' || args[1] == '5'
		      || args[1] == '-' || args[1] == '4');
d6492 1
a6492 1
		  as_warn (_("Improper shift amount (%ld)"),
a6511 1

d6518 1
a6518 1
		  as_warn (_("Invalid value for `%s' (%lu)"),
d6535 2
a6536 5
		{
		  as_warn (_("Illegal break code (%ld)"),
			   (long) imm_expr.X_add_number);
		  imm_expr.X_add_number &= 0x3ff;
		}
a6541 14
	    case 'q':		/* lower break code */
	      my_getExpression (&imm_expr, s);
	      check_absolute_expr (ip, &imm_expr);
	      if ((unsigned) imm_expr.X_add_number > 1023)
		{
		  as_warn (_("Illegal lower break code (%ld)"),
			   (long) imm_expr.X_add_number);
		  imm_expr.X_add_number &= 0x3ff;
		}
	      ip->insn_opcode |= imm_expr.X_add_number << 6;
	      imm_expr.X_op = O_absent;
	      s = expr_end;
	      continue;

d6546 1
a6546 1
		as_warn (_("Illegal syscall code (%ld)"),
d6558 1
a6558 1
                  as_warn (_("Coproccesor code > 25 bits (%ld)"),
a6566 14
	    case 'P':		/* Performance register */
              my_getExpression (&imm_expr, s);
	      check_absolute_expr (ip, &imm_expr);
              if (imm_expr.X_add_number != 0 && imm_expr.X_add_number != 1)
		{
                  as_warn (_("Invalidate performance regster (%ld)"),
			   (long) imm_expr.X_add_number);
                  imm_expr.X_add_number &= 1;
		}
              ip->insn_opcode |= (imm_expr.X_add_number << 1);
              imm_expr.X_op = O_absent;
              s = expr_end;
              continue;

d6581 1
a6581 2

		  if (isdigit ((unsigned char) s[1]))
d6591 1
a6591 1
		      while (isdigit ((unsigned char) *s));
d6593 1
a6593 1
			as_bad (_("Invalid register number (%d)"), regno);
d6632 1
a6632 1
			  unsigned long r;
d6634 1
a6634 1
			  p = s + 1; 	/* advance past '$' */
d6637 4
a6640 3
			  /* See if this is a register defined in an
			     itbl entry.  */
			  if (itbl_get_reg_val (n, &r))
d6644 1
a6644 1
				 rack to the end of the last field.  */
d6648 1
a6648 1
				s = strchr (s, '\0');
d6661 1
a6661 1
		    as_warn (_("Used $at without \".set noat\""));
d6741 1
a6741 1
	      if (s[0] == '$' && s[1] == 'f' && isdigit ((unsigned char) s[2]))
d6751 1
a6751 1
		  while (isdigit ((unsigned char) *s));
d6754 1
a6754 1
		    as_bad (_("Invalid float register number (%d)"), regno);
d6757 1
a6757 1
		      && ! ISA_HAS_64BIT_REGS (mips_opts.isa)
d6764 1
a6764 1
		    as_warn (_("Float register should be even, was %d"),
a6798 2


d6814 1
a6814 1
		insn_error = _("absolute expression required");
d6875 1
a6875 1
		    as_bad (_("Bad floating point constant: %s"), err);
d6886 2
a6887 3
			    || g_switch_value < 4
			    || (temp[0] == 0 && temp[1] == 0)
			    || (temp[2] == 0 && temp[3] == 0))))
d6891 5
a6895 1
		      imm_expr.X_add_number = bfd_getl32 (temp);
d6897 5
a6901 58
		      imm_expr.X_add_number = bfd_getb32 (temp);
		  }
		else if (length > 4
			 && ((temp[0] == 0 && temp[1] == 0)
			     || (temp[2] == 0 && temp[3] == 0))
			 && ((temp[4] == 0 && temp[5] == 0)
			     || (temp[6] == 0 && temp[7] == 0)))
		  {
		    /* The value is simple enough to load with a
                       couple of instructions.  In mips1 mode, set
                       imm_expr to the high order 32 bits and
                       offset_expr to the low order 32 bits.
                       Otherwise, set imm_expr to the entire 64 bit
                       constant.  */
		    if (! ISA_HAS_64BIT_REGS (mips_opts.isa))
		      {
			imm_expr.X_op = O_constant;
			offset_expr.X_op = O_constant;
			if (! target_big_endian)
			  {
			    imm_expr.X_add_number = bfd_getl32 (temp + 4);
			    offset_expr.X_add_number = bfd_getl32 (temp);
			  }
			else
			  {
			    imm_expr.X_add_number = bfd_getb32 (temp);
			    offset_expr.X_add_number = bfd_getb32 (temp + 4);
			  }
			if (offset_expr.X_add_number == 0)
			  offset_expr.X_op = O_absent;
		      }
		    else if (sizeof (imm_expr.X_add_number) > 4)
		      {
			imm_expr.X_op = O_constant;
			if (! target_big_endian)
			  imm_expr.X_add_number = bfd_getl64 (temp);
			else
			  imm_expr.X_add_number = bfd_getb64 (temp);
		      }
		    else
		      {
			imm_expr.X_op = O_big;
			imm_expr.X_add_number = 4;
			if (! target_big_endian)
			  {
			    generic_bignum[0] = bfd_getl16 (temp);
			    generic_bignum[1] = bfd_getl16 (temp + 2);
			    generic_bignum[2] = bfd_getl16 (temp + 4);
			    generic_bignum[3] = bfd_getl16 (temp + 6);
			  }
			else
			  {
			    generic_bignum[0] = bfd_getb16 (temp + 6);
			    generic_bignum[1] = bfd_getb16 (temp + 4);
			    generic_bignum[2] = bfd_getb16 (temp + 2);
			    generic_bignum[3] = bfd_getb16 (temp);
			  }
		      }
d6916 1
a6916 2
			if ((USE_GLOBAL_POINTER_OPT && g_switch_value >= 8)
			    || mips_pic == EMBEDDED_PIC)
d6920 1
a6920 4
			if (mips_pic == EMBEDDED_PIC)
			  newname = ".lit8";
			else
			  newname = RDATA_SECTION_NAME;
d6942 1
a6942 1
		      as_bad (_("Can't use floating point insn in this section"));
a6980 2
		  else if (imm_expr.X_op == O_constant)
		    imm_expr.X_add_number &= 0xffff;
d6994 1
a6994 1
			insn_error = _("absolute expression required");
d6996 1
a6996 1
			as_bad (_("16 bit expression not in range 0..65535"));
d7025 1
a7025 1
			  && ISA_HAS_64BIT_REGS (mips_opts.isa)
d7033 1
a7033 1
			insn_error = _("absolute expression required");
d7035 1
a7035 1
			as_bad (_("16 bit expression not in range -32768..32767"));
d7061 1
d7063 1
a7063 1
			  != now_seg)))
d7066 1
d7069 1
a7069 2
		  if (offset_expr.X_op != O_constant)
		    break;
a7072 1
	      offset_reloc = BFD_RELOC_LO16;
d7084 4
a7103 2
		  else if (imm_expr.X_op == O_constant)
		    imm_expr.X_add_number &= 0xffff;
a7104 4
	      if (imm_expr.X_op == O_constant
		  && (imm_expr.X_add_number < 0
		      || imm_expr.X_add_number >= 0x10000))
		as_bad (_("lui expression not in range 0..65535"));
d7126 1
a7126 1
	      while (isdigit ((unsigned char) *s));
d7128 1
a7128 1
		as_bad (_("invalid condition code register $fcc%d"), regno);
d7136 1
a7136 1
	      as_bad (_("bad char = '%c'\n"), *args);
d7149 1
a7149 1
      insn_error = _("illegal operands");
d7179 1
a7179 1
  for (s = str; islower ((unsigned char) *s); ++s)
d7207 1
a7207 1
      insn_error = _("unknown opcode");
d7216 1
a7216 1
      insn_error = _("unrecognized opcode");
d7312 1
a7312 1
	      if (isdigit ((unsigned char) s[1]))
d7322 1
a7322 1
		  while (isdigit ((unsigned char) *s));
d7325 1
a7325 1
		      as_bad (_("invalid register number (%d)"), regno);
d7406 1
a7406 1
		    as_warn (_("used $at without \".set noat\""));
d7547 1
a7547 1
		  as_warn (_("Invalid value for `%s' (%lu)"),
d7581 1
a7581 1
			as_bad (_("can't parse register list"));
d7593 1
a7593 1
		    while (isdigit ((unsigned char) *s))
d7615 1
a7615 1
				as_bad (_("invalid register list"));
d7620 1
a7620 1
			while (isdigit ((unsigned char) *s))
d7645 1
a7645 1
			as_bad (_("invalid register list"));
d7662 1
a7662 1
		  as_warn (_("Invalid value for `%s' (%lu)"),
d7687 1
a7687 1
      insn_error = _("illegal operands");
d7812 1
a7812 1
    as_warn_where (file, line, _("extended operand requested but not required"));
d7814 1
a7814 1
    as_bad_where (file, line, _("invalid unextended operand value"));
d7842 1
a7842 1
		      _("operand value out of range for instruction"));
d7904 1
a7904 1
	  if (isdigit ((unsigned char) sp[-2]))
d7906 1
a7906 1
	      for (sp -= 3; sp >= str && isdigit ((unsigned char) *sp); sp--)
d7977 4
a7980 4
      && symbol_get_frag (ep->X_add_symbol) == frag_now
      && symbol_constant_p (ep->X_add_symbol)
      && S_GET_VALUE (ep->X_add_symbol) == frag_now_fix ())
    S_SET_VALUE (ep->X_add_symbol, S_GET_VALUE (ep->X_add_symbol) + 1);
d8011 1
a8011 1
      return _("bad call to md_atof");
a8093 13
#define OPTION_M3900 (OPTION_MD_BASE + 26)
  {"m3900", no_argument, NULL, OPTION_M3900},
#define OPTION_NO_M3900 (OPTION_MD_BASE + 27)
  {"no-m3900", no_argument, NULL, OPTION_NO_M3900},


#define OPTION_MABI (OPTION_MD_BASE + 38)
  {"mabi", required_argument, NULL, OPTION_MABI},

#define OPTION_M7000_HILO_FIX (OPTION_MD_BASE + 39)
  {"mfix7000", no_argument, NULL, OPTION_M7000_HILO_FIX},
#define OPTION_NO_M7000_HILO_FIX (OPTION_MD_BASE + 40)
  {"no-fix-7000", no_argument, NULL, OPTION_NO_M7000_HILO_FIX},
a8108 5
#define OPTION_GP32 (OPTION_MD_BASE + 41)
#define OPTION_GP64 (OPTION_MD_BASE + 42)
  {"mgp32", no_argument, NULL, OPTION_GP32},
  {"mgp64", no_argument, NULL, OPTION_GP64},

d8157 2
d8163 2
d8169 2
d8175 2
a8224 2
                else if (strcmp (p, "3900") == 0)
                  mips_cpu = 3900;
d8233 1
d8235 3
a8237 2
		else if (strcmp (p, "4111") == 0)
                    mips_cpu = 4111;
d8245 1
d8247 3
d8251 5
a8255 1
                  mips_cpu = 4010;
d8285 1
a8285 5
	    if (sv
		&& (mips_cpu != 4300
		    && mips_cpu != 4100
		    && mips_cpu != 4111
		    && mips_cpu != 5000))
d8287 1
a8287 1
		as_bad (_("ignoring invalid leading 'v' in -mcpu=%s switch"), arg);
d8293 1
a8293 1
		as_bad (_("invalid architecture -mcpu=%s"), arg);
d8301 1
a8301 1
      mips_cpu = 4650;
d8305 1
d8309 1
a8309 1
      mips_cpu = 4010;
d8313 1
d8317 1
a8317 1
      mips_cpu = 4100;
d8321 1
a8324 7
    case OPTION_M3900:
      mips_cpu = 3900;
      break;
      
    case OPTION_NO_M3900:
      break;

d8339 1
a8339 1
	  as_bad (_("-G may not be used with embedded PIC code"));
d8351 1
a8351 1
	  as_bad (_("-call_shared is supported only for ELF format"));
d8357 1
a8357 1
	  as_bad (_("-G may not be used with SVR4 PIC code"));
d8366 1
a8366 1
	  as_bad (_("-non_shared is supported only for ELF format"));
d8382 1
a8382 1
	  as_bad (_("-G is not supported for this configuration"));
d8387 1
a8387 1
	  as_bad (_("-G may not be used with SVR4 or embedded PIC code"));
d8411 1
a8411 1
	  as_fatal (_("No compiled in support for 64 bit object file format"));
a8416 39
    case OPTION_GP32:
      mips_gp32 = 1;
      mips_64 = 0;

      /* We deliberately don't allow "-gp32" to set the MIPS_32BITMODE
	 flag in object files because to do so would make it
	 impossible to link with libraries compiled without "-gp32".
	 This is unnecessarily restrictive.  

	 We could solve this problem by adding "-gp32" multilibs to
	 gcc, but to set this flag before gcc is built with such
	 multilibs will break too many systems. */

/*    mips_32bitmode = 1; */
      break;

    case OPTION_GP64:
      mips_gp32 = 0;
      mips_64 = 1;
/*    mips_32bitmode = 0; */
      break;

    case OPTION_MABI:
      if (strcmp (arg,"32") == 0
	  || strcmp (arg,"n32") == 0
	  || strcmp (arg,"64") == 0
	  || strcmp (arg,"o64") == 0
	  || strcmp (arg,"eabi") == 0)
	mips_abi_string = arg;
      break;

    case OPTION_M7000_HILO_FIX:
      mips_7000_hilo_fix = true;
      break;

    case OPTION_NO_M7000_HILO_FIX:
      mips_7000_hilo_fix = false;
      break;

a8423 32

static void
show (stream, string, col_p, first_p)
     FILE *stream;
     char *string;
     int *col_p;
     int *first_p;
{
  if (*first_p)
    {
      fprintf (stream, "%24s", "");
      *col_p = 24;
    }
  else
    {
      fprintf (stream, ", ");
      *col_p += 2;
    }

  if (*col_p + strlen (string) > 72)
    {
      fprintf (stream, "\n%24s", "");
      *col_p = 24;
    }

  fprintf (stream, "%s", string);
  *col_p += strlen (string);

  *first_p = 0;
}


d8428 1
a8428 3
  int column, first;

  fprintf(stream, _("\
d8435 15
a8449 41
			implicitly with the gp register [default 8]\n"));
  fprintf(stream, _("\
-mips1			generate MIPS ISA I instructions\n\
-mips2			generate MIPS ISA II instructions\n\
-mips3			generate MIPS ISA III instructions\n\
-mips4			generate MIPS ISA IV instructions\n\
-mcpu=CPU		generate code for CPU, where CPU is one of:\n"));

  first = 1;

  show (stream, "2000", &column, &first);
  show (stream, "3000", &column, &first);
  show (stream, "3900", &column, &first);
  show (stream, "4000", &column, &first);
  show (stream, "4010", &column, &first);
  show (stream, "4100", &column, &first);
  show (stream, "4111", &column, &first);
  show (stream, "4300", &column, &first);
  show (stream, "4400", &column, &first);
  show (stream, "4600", &column, &first);
  show (stream, "4650", &column, &first);
  show (stream, "5000", &column, &first);
  show (stream, "6000", &column, &first);
  show (stream, "8000", &column, &first);
  show (stream, "10000", &column, &first);
  fputc ('\n', stream);

  fprintf (stream, _("\
-mCPU			equivalent to -mcpu=CPU.\n\
-no-mCPU		don't generate code specific to CPU.\n\
			For -mCPU and -no-mCPU, CPU must be one of:\n"));

  first = 1;

  show (stream, "3900", &column, &first);
  show (stream, "4010", &column, &first);
  show (stream, "4100", &column, &first);
  show (stream, "4650", &column, &first);
  fputc ('\n', stream);

  fprintf(stream, _("\
d8451 2
a8452 2
-no-mips16		do not generate mips16 instructions\n"));
  fprintf(stream, _("\
d8456 1
a8456 1
--break, --no-trap	break exception on div by 0 and mult overflow\n"));
d8458 1
a8458 1
  fprintf(stream, _("\
d8463 1
a8463 1
-64			create 64 bit object file\n"));
d8515 1
a8515 1
    as_bad (_("Unsupported reloc size %d"), nbytes);
a8613 2
#if 0 /* GCC code motion plus incomplete dead code elimination
	 can leave a %hi without a %lo.  */
d8616 1
a8616 2
			   _("Unmatched %%hi reloc"));
#endif
a8627 1
   && OUTPUT_FLAVOR != bfd_target_elf_flavour \
a8641 4
  if (fixp->fx_r_type == BFD_RELOC_VTABLE_INHERIT
      || fixp->fx_r_type == BFD_RELOC_VTABLE_ENTRY)
    return 1;

d8661 1
a8661 3
	  || fixP->fx_r_type == BFD_RELOC_64
	  || fixP->fx_r_type == BFD_RELOC_VTABLE_INHERIT
	  || fixP->fx_r_type == BFD_RELOC_VTABLE_ENTRY);
d8668 11
a8678 38
  if (fixP->fx_addsy != NULL && OUTPUT_FLAVOR == bfd_target_elf_flavour)
    {
    if (S_GET_OTHER (fixP->fx_addsy) == STO_MIPS16 
        || S_IS_WEAK (fixP->fx_addsy)
        || (symbol_used_in_reloc_p (fixP->fx_addsy)
            && (((bfd_get_section_flags (stdoutput,
                                         S_GET_SEGMENT (fixP->fx_addsy))
                  & SEC_LINK_ONCE) != 0)
                || !strncmp (segment_name (S_GET_SEGMENT (fixP->fx_addsy)),
                             ".gnu.linkonce",
                             sizeof (".gnu.linkonce") - 1))))

      {
        value -= S_GET_VALUE (fixP->fx_addsy);
        if (value != 0 && ! fixP->fx_pcrel)
          {
            /* In this case, the bfd_install_relocation routine will
               incorrectly add the symbol value back in.  We just want
               the addend to appear in the object file.  
	       FIXME: If this makes VALUE zero, we're toast.  */
            value -= S_GET_VALUE (fixP->fx_addsy);
          }
      }

      /* This code was generated using trial and error and so is
	 fragile and not trustworthy.  If you change it, you should
	 rerun the elf-rel, elf-rel2, and empic testcases and ensure
	 they still pass.  */
      if (fixP->fx_pcrel || fixP->fx_subsy != NULL)
	{
	  value += fixP->fx_frag->fr_address + fixP->fx_where;

	  /* BFD's REL handling, for MIPS, is _very_ weird.
	     This gives the right results, but it can't possibly
	     be the way things are supposed to work.  */
	  if (fixP->fx_r_type != BFD_RELOC_16_PCREL_S2
	      || S_GET_SEGMENT (fixP->fx_addsy) != undefined_section)
	    value += fixP->fx_frag->fr_address + fixP->fx_where;
d8705 1
a8705 1
		      _("Invalid PC relative reloc"));
d8719 1
a8719 6
      if (OUTPUT_FLAVOR == bfd_target_elf_flavour 
	  && !fixP->fx_done
	  && value != 0)
	break;
      if (fixP->fx_addsy
	  && (symbol_get_bfdsym (fixP->fx_addsy)->flags & BSF_SECTION_SYM) == 0)
d8739 1
a8739 6
      if (OUTPUT_FLAVOR == bfd_target_elf_flavour 
	  && !fixP->fx_done
	  && value != 0)
	break;
      if (fixP->fx_addsy
	  && (symbol_get_bfdsym (fixP->fx_addsy)->flags & BSF_SECTION_SYM) == 0)
a8775 1
    case BFD_RELOC_RVA:
d8804 1
a8804 1
			  _("relocation overflow"));
d8820 1
a8820 10
		      _("Branch to odd address (%lx)"), value);

      if (!fixP->fx_done && value != 0)
	break;
      /* If 'value' is zero, the remaining reloc code won't actually
	 do the store, so it must be done here.  This is probably
	 a bug somewhere.  */
      if (!fixP->fx_done)
	value -= fixP->fx_frag->fr_address + fixP->fx_where;
      
d8865 1
a8865 1
			    _("Branch out of range"));
a8871 12
    case BFD_RELOC_VTABLE_INHERIT:
      fixP->fx_done = 0;
      if (fixP->fx_addsy
          && !S_IS_DEFINED (fixP->fx_addsy)
          && !S_IS_WEAK (fixP->fx_addsy))
        S_SET_WEAK (fixP->fx_addsy);
      break;

    case BFD_RELOC_VTABLE_ENTRY:
      fixP->fx_done = 0;
      break;

d8963 1
a8963 1
  printf (_("%08lx  UNDEFINED\n"), oc);
d8996 1
a8996 1
      symbol_set_frag (label, frag_now);
d9026 1
a9026 1
    as_bad (_("Alignment too large: %d. assumed."), temp = max_alignment);
d9029 1
a9029 1
      as_warn (_("Alignment negative: 0 assumed."));
d9117 1
a9117 1
	  as_bad (_("No read only data section in this object file format"));
d9140 1
a9140 1
	  as_bad (_("Global pointers not supported; recompile -G 0"));
d9180 4
a9183 6
    {
      if (type == 'd')
	mips_align (3, 0, label);
      else
	mips_align (2, 0, label);
    }
d9224 1
a9224 1
	as_bad (_("%s: no such section"), secname);
d9231 1
a9231 1
  symbol_get_bfdsym (symbolP)->flags |= flag;
d9261 1
a9261 1
	as_bad (_(".option pic%d not supported"), i);
d9266 1
a9266 1
	    as_warn (_("-G may not be used with SVR4 PIC code"));
d9272 1
a9272 1
    as_warn (_("Unrecognized option \"%s\""), opt);
d9335 1
a9335 1
	as_bad (_("`noreorder' must be set before `nomacro'"));
d9370 1
a9370 1
	as_bad (_("unknown ISA level"));
d9393 1
a9393 1
	as_bad (_(".set pop with no .set push"));
d9417 1
a9417 1
      as_warn (_("Tried to set unrecognized symbol: %s\n"), name);
d9434 1
a9434 1
	as_warn (_("-G may not be used with SVR4 PIC code"));
d9467 1
a9467 1
    as_warn (_(".cpload not in noreorder section"));
d9475 1
a9475 1
  symbol_get_bfdsym (ex.X_add_symbol)->flags |= BSF_OBJECT;
d9513 1
a9513 3
	       ((bfd_arch_bits_per_address (stdoutput) == 32
		 || ! ISA_HAS_64BIT_REGS (mips_opts.isa))
		? "sw" : "sd"),
d9547 1
a9547 1
      as_bad (_("Unsupported use of .gpword"));
d9579 1
a9579 3
	       ((bfd_arch_bits_per_address (stdoutput) == 32
		 || ! ISA_HAS_64BIT_REGS (mips_opts.isa))
		? "addu" : "daddu"),
a9619 49
/* Handle the .weakext pseudo-op as defined in Kane and Heinrich.
 */

static void
s_mips_weakext (ignore)
     int ignore;
{
  char *name;
  int c;
  symbolS *symbolP;
  expressionS exp;

  name = input_line_pointer;
  c = get_symbol_end ();
  symbolP = symbol_find_or_make (name);
  S_SET_WEAK (symbolP);
  *input_line_pointer = c;

  SKIP_WHITESPACE ();

  if (! is_end_of_line[(unsigned char) *input_line_pointer])
    {
      if (S_IS_DEFINED (symbolP))
	{
	  as_bad ("Ignoring attempt to redefine symbol `%s'.",
		  S_GET_NAME (symbolP));
	  ignore_rest_of_line ();
	  return;
	}
      
      if (*input_line_pointer == ',')
	{
	  ++input_line_pointer;
	  SKIP_WHITESPACE ();
	}
      
      expression (&exp);
      if (exp.X_op != O_symbol)
	{
	  as_bad ("bad .weakext directive");
	  ignore_rest_of_line();
	  return;
	}
      symbol_set_value_expression (symbolP, &exp);
    }

  demand_empty_rest_of_line ();
}

d9633 1
a9633 1
      as_warn (_("expected `$'"));
d9641 1
a9641 1
	  as_warn (_("Bad register number"));
d9657 1
a9657 1
	  as_warn (_("Unrecognized register name"));
d9726 2
a9727 3
		   || (symbol_get_obj (sym)->ecoff_extern_size != 0
		       && (symbol_get_obj (sym)->ecoff_extern_size
			   <= g_switch_value))
d9734 1
a9734 1
		       && symbol_get_obj (sym)->ecoff_extern_size == 0
d9748 1
a9748 3
		    && strcmp (segname, ".sbss") != 0
		    && strncmp (segname, ".sdata.", 7) != 0
		    && strncmp (segname, ".gnu.linkonce.s.", 16) != 0);
d9804 3
a9806 3
  /* We can't always call S_GET_VALUE here, because we don't want to
     lock in a particular frag address.  */
  if (symbol_constant_p (fragp->fr_symbol))
d9808 2
a9809 2
      val = (S_GET_VALUE (fragp->fr_symbol)
	     + symbol_get_frag (fragp->fr_symbol)->fr_address);
d9812 9
a9820 12
  else if (symbol_equated_p (fragp->fr_symbol)
	   && (symbol_constant_p
	       (symbol_get_value_expression (fragp->fr_symbol)->X_add_symbol)))
    {
      symbolS *eqsym;

      eqsym = symbol_get_value_expression (fragp->fr_symbol)->X_add_symbol;
      val = (S_GET_VALUE (eqsym)
	     + symbol_get_frag (eqsym)->fr_address
	     + symbol_get_value_expression (fragp->fr_symbol)->X_add_number
	     + symbol_get_frag (fragp->fr_symbol)->fr_address);
      symsec = S_GET_SEGMENT (eqsym);
d9850 1
a9850 1
			    _("unsupported PC relative reference to different section"));
d9862 1
a9862 2
	  && (symbol_get_frag (fragp->fr_symbol)->fr_address
	      >= fragp->fr_address))
d9873 1
a9873 1
	       f != NULL && f != symbol_get_frag (fragp->fr_symbol);
d9958 1
a9958 1
    as_bad_where (fragp->fr_file, fragp->fr_line, _("unsupported relocation"));
d10007 1
a10007 1
      while (symbol_equated_p (sym)
d10014 1
a10014 1
	  n = symbol_get_value_expression (sym)->X_add_symbol;
d10041 1
a10041 1
	as_warn (_("AT used after \".set noat\" or macro used after \".set nomacro\""));
a10062 3
  if (fixp->fx_r_type == BFD_RELOC_VTABLE_INHERIT
      || fixp->fx_r_type == BFD_RELOC_VTABLE_ENTRY)
    return 0;
d10089 1
a10089 2
  reloc->sym_ptr_ptr = (asymbol **) xmalloc (sizeof (asymbol *));
  *reloc->sym_ptr_ptr = symbol_get_bfdsym (fixp->fx_addsy);
d10100 1
a10100 1
	as_fatal (_("Double check fx_r_type in tc-mips.c:tc_gen_reloc"));
a10102 2
  else if (fixp->fx_pcrel == 0 || OUTPUT_FLAVOR == bfd_target_elf_flavour)
    reloc->addend = fixp->fx_addnumber;
d10106 1
a10106 1
      if (symbol_section_p (fixp->fx_addsy))
d10118 1
a10118 1
      if (symbol_section_p (fixp->fx_addsy))
d10127 2
d10177 1
a10177 2
      reloc2->sym_ptr_ptr = (asymbol **) xmalloc (sizeof (asymbol *));
      *reloc2->sym_ptr_ptr = symbol_get_bfdsym (fixp->fx_addsy);
a10218 8
  /* Since MIPS ELF uses Rel instead of Rela, encode the vtable entry
     to be used in the relocation's section offset.  */
  if (fixp->fx_r_type == BFD_RELOC_VTABLE_ENTRY)
    {
      reloc->address = reloc->addend;
      reloc->addend = 0;
    }

d10250 1
a10250 1
			_("Cannot make %s relocation PC relative"),
d10258 1
a10258 2
  if ((OUTPUT_FLAVOR == bfd_target_ecoff_flavour
       || OUTPUT_FLAVOR == bfd_target_elf_flavour)
d10268 1
a10268 1
		    _("Can not represent %s relocation in this object file format"),
d10343 1
a10343 1
      resolve_symbol_value (fragp->fr_symbol, 1);
d10381 1
a10381 1
		       _("extended instruction in delay slot"));
a10522 18

  /* Set the MIPS ELF ABI flags. */
  if (mips_abi_string == 0)
    ;
  else if (strcmp (mips_abi_string,"32") == 0)
    elf_elfheader (stdoutput)->e_flags |= E_MIPS_ABI_O32;
  else if (strcmp (mips_abi_string,"o64") == 0)
    elf_elfheader (stdoutput)->e_flags |= E_MIPS_ABI_O64;
  else if (strcmp (mips_abi_string,"eabi") == 0)
    {
      if (mips_eabi64)
	elf_elfheader (stdoutput)->e_flags |= E_MIPS_ABI_EABI64;
      else
	elf_elfheader (stdoutput)->e_flags |= E_MIPS_ABI_EABI32;
    }

  if (mips_32bitmode)
    elf_elfheader (stdoutput)->e_flags |= EF_MIPS_32BITMODE;
d10527 21
d10550 13
a10562 8
    symbolS *isym;
    unsigned long reg_mask;
    unsigned long reg_offset;
    unsigned long fpreg_mask;
    unsigned long fpreg_offset;
    unsigned long frame_offset;
    unsigned long frame_reg;
    unsigned long pc_reg;
d10566 14
a10579 2
static procS cur_proc;
static procS *cur_proc_ptr;
a10581 30
/* When we align code in the .text section of mips16, use the correct two
   byte nop pattern of 0x6500 (move $0,$0) */

int
mips_do_align (n, fill, len, max)
     int n;
     const char *fill;
     int len;
     int max;
{
  if (fill == NULL
      && subseg_text_p (now_seg)
      && n > 1
      && mips_opts.mips16)
    {
      static const unsigned char be_nop[] = { 0x65, 0x00 };
      static const unsigned char le_nop[] = { 0x00, 0x65 };

      frag_align (1, 0, 0);

      if (target_big_endian)
      	frag_align_pattern (n, be_nop, 2, max);      
      else
      	frag_align_pattern (n, le_nop, 2, max);      
      return 1;
    }

  return 0;
}

d10585 1
d10592 2
a10593 2
  if (cur_proc_ptr)
    as_warn (_("missing `.end' at end of assembly"));
d10607 2
a10608 2
  if (!isdigit ((unsigned char) *input_line_pointer))
    as_bad (_("Expected simple number."));
d10614 1
a10614 1
	  while (isxdigit ((unsigned char) *input_line_pointer))
d10624 1
a10624 1
	  while (isdigit ((unsigned char) *input_line_pointer))
d10632 1
a10632 1
  if (!isdigit ((unsigned char) *input_line_pointer))
d10634 1
a10634 1
      printf (_(" *input_line_pointer == '%c' 0x%02x\n"),
d10636 1
a10636 1
      as_warn (_("Invalid number"));
d10639 1
a10639 1
  while (isdigit ((unsigned char) *input_line_pointer))
d10664 1
a10664 1
s_mips_end (x)
a10667 1
  int maybe_text;
d10676 3
a10678 17

#ifdef BFD_ASSEMBLER
  if ((bfd_get_section_flags (stdoutput, now_seg) & SEC_CODE) != 0)
    maybe_text = 1;
  else
    maybe_text = 0;
#else
  if (now_seg != data_section && now_seg != bss_section)
    maybe_text = 1;
  else
    maybe_text = 0;
#endif

  if (!maybe_text)
    as_warn (_(".end not in text section"));

  if (!cur_proc_ptr)
d10680 1
a10680 2
      as_warn (_(".end directive without a preceding .ent directive."));
      demand_empty_rest_of_line ();
d10687 2
a10688 2
      if (strcmp (S_GET_NAME (p), S_GET_NAME (cur_proc_ptr->isym)))
	as_warn (_(".end symbol does not match .ent symbol."));
a10689 14
  else
    as_warn (_(".end directive missing or unknown symbol"));

#ifdef MIPS_STABS_ELF
  {
    segT saved_seg = now_seg;
    subsegT saved_subseg = now_subseg;
    fragS *saved_frag = frag_now;
    valueT dot;
    segT seg;
    expressionS exp;
    char *fragp;

    dot = frag_now_fix ();
d10691 1
a10691 28
#ifdef md_flush_pending_output
    md_flush_pending_output ();
#endif

    assert (pdr_seg);
    subseg_set (pdr_seg, 0);

    /* Write the symbol */
    exp.X_op = O_symbol;
    exp.X_add_symbol = p;
    exp.X_add_number = 0;
    emit_expr (&exp, 4);

    fragp = frag_more (7*4);

    md_number_to_chars (fragp,     (valueT) cur_proc_ptr->reg_mask, 4);
    md_number_to_chars (fragp + 4, (valueT) cur_proc_ptr->reg_offset, 4);
    md_number_to_chars (fragp + 8, (valueT) cur_proc_ptr->fpreg_mask, 4);
    md_number_to_chars (fragp +12, (valueT) cur_proc_ptr->fpreg_offset, 4);
    md_number_to_chars (fragp +16, (valueT) cur_proc_ptr->frame_offset, 4);
    md_number_to_chars (fragp +20, (valueT) cur_proc_ptr->frame_reg, 4);
    md_number_to_chars (fragp +24, (valueT) cur_proc_ptr->pc_reg, 4);

    subseg_set (saved_seg, saved_subseg);
  }
#endif

  cur_proc_ptr = NULL;
d10697 1
a10697 1
s_mips_ent (aent)
d10701 1
a10702 1
  int maybe_text;
d10708 1
a10708 2
  if (isdigit ((unsigned char) *input_line_pointer)
      || *input_line_pointer == '-')
d10710 2
d10713 2
a10714 17
#ifdef BFD_ASSEMBLER
  if ((bfd_get_section_flags (stdoutput, now_seg) & SEC_CODE) != 0)
    maybe_text = 1;
  else
    maybe_text = 0;
#else
  if (now_seg != data_section && now_seg != bss_section)
    maybe_text = 1;
  else
    maybe_text = 0;
#endif

  if (!maybe_text)
    as_warn (_(".ent or .aent not in text section."));

  if (!aent && cur_proc_ptr)
    as_warn (_("missing `.end'"));
d10718 16
a10733 7
      cur_proc_ptr = &cur_proc;
      memset (cur_proc_ptr, '\0', sizeof (procS));

      cur_proc_ptr->isym = symbolP;

      symbol_get_bfdsym (symbolP)->flags |= BSF_FUNCTION;

a10735 1

d10739 1
a10739 5
/* The .frame directive. If the mdebug section is present (IRIX 5 native)
   then ecoff.c (ecoff_directive_frame) is used. For embedded targets, 
   s_mips_frame is used so that we can set the PDR information correctly.
   We can't use the ecoff routines because they make reference to the ecoff 
   symbol table (in the mdebug section).  */
d10741 1
d10743 2
a10744 2
s_mips_frame (ignore)
     int ignore;
d10746 5
a10750 1
#ifdef MIPS_STABS_ELF
d10752 7
a10758 1
  long val;
d10760 19
a10778 5
  if (cur_proc_ptr ==  (procS *) NULL)
    {
      as_warn (_(".frame outside of .ent"));
      demand_empty_rest_of_line ();
      return;
a10779 16

  cur_proc_ptr->frame_reg = tc_get_register (1);

  SKIP_WHITESPACE ();
  if (*input_line_pointer++ != ','
      || get_absolute_expression_and_terminator (&val) != ',')
    {
      as_warn (_("Bad .frame directive"));
      --input_line_pointer;
      demand_empty_rest_of_line ();
      return;
    }

  cur_proc_ptr->frame_offset = val;
  cur_proc_ptr->pc_reg = tc_get_register (0);

a10780 3
#else
  s_ignore (ignore);
#endif /* MIPS_STABS_ELF */
d10782 1
d10784 1
a10784 5
/* The .fmask and .mask directives. If the mdebug section is present 
   (IRIX 5 native) then ecoff.c (ecoff_directive_mask) is used. For 
   embedded targets, s_mips_mask is used so that we can set the PDR
   information correctly. We can't use the ecoff routines because they 
   make reference to the ecoff symbol table (in the mdebug section).  */
d10786 1
d10788 1
a10788 1
s_mips_mask (reg_type)
d10791 5
a10795 17
#ifdef MIPS_STABS_ELF
  long mask, off;
  
  if (cur_proc_ptr == (procS *) NULL)
    {
      as_warn (_(".mask/.fmask outside of .ent"));
      demand_empty_rest_of_line ();
      return;
    }

  if (get_absolute_expression_and_terminator (&mask) != ',')
    {
      as_warn (_("Bad .mask/.fmask directive"));
      --input_line_pointer;
      demand_empty_rest_of_line ();
      return;
    }
d10797 3
d10802 2
d10806 2
a10807 2
      cur_proc_ptr->fpreg_mask = mask;
      cur_proc_ptr->fpreg_offset = off;
d10811 2
a10812 2
      cur_proc_ptr->reg_mask = mask;
      cur_proc_ptr->reg_offset = off;
d10815 25
a10839 4
  demand_empty_rest_of_line ();
#else
  s_ignore (reg_type);
#endif /* MIPS_STABS_ELF */
d10841 1
@


1.1.1.7
log
@Import binutils-2.11.2
- only the binutils package (no gdb here)
- don't import libiberty and texinfo, they are elsewhere
- remove all .info* generated files
@
text
@d2 1
a2 2
   Copyright 1993, 1994, 1995, 1996, 1997, 1998, 1999, 2000, 2001
   Free Software Foundation, Inc.
a111 1

a123 6
#ifdef TE_TMIPS
      /* This is traditional mips */
      return (target_big_endian
	      ? (mips_64 ? "elf64-tradbigmips" : "elf32-tradbigmips")
	      : (mips_64 ? "elf64-tradlittlemips" : "elf32-tradlittlemips"));
#else
a126 1
#endif
d183 2
a184 2
   that we must set the isa field to ISA_UNKNOWN and the mips16 field to
   -1 to indicate that they have not been initialized.  */
d186 1
a186 4
static struct mips_set_options mips_opts =
{
  ISA_UNKNOWN, -1, 0, 0, 0, 0, 0, 0
};
d195 1
a195 1
static int file_mips_isa = ISA_UNKNOWN;
d197 2
a198 2
/* The CPU type we are using for this output file.  */
static int mips_cpu = CPU_UNKNOWN;
d200 2
a201 2
/* The argument of the -mabi= flag.  */
static char * mips_abi_string = 0;
d203 1
a203 1
/* Wether we should mark the file EABI64 or EABI32.  */
d207 1
a207 1
   mips3 or greater, then mark the object file 32BITMODE.  */
d210 1
a210 1
/* True if -mgp32 was passed.  */
d215 1
a215 1
   Return true if instructions marked INSN_LOAD_COPROC_DELAY,
d220 1
a220 1
   have delays for the INSN_LOAD_MEMORY_DELAY instructions either.  */
d222 3
a224 3
   (ISA) == ISA_MIPS1                       \
   || (ISA) == ISA_MIPS2                    \
   || (ISA) == ISA_MIPS3                    \
d227 1
a227 1
/*  Return true if ISA supports 64 bit gp register instructions.  */
d229 2
a230 4
   (ISA) == ISA_MIPS3                \
   || (ISA) == ISA_MIPS4             \
   || (ISA) == ISA_MIPS5             \
   || (ISA) == ISA_MIPS64            \
d233 1
a233 1
/* Whether the processor uses hardware interlocks to protect
d260 1
a260 1
#define hilo_interlocks (mips_cpu == CPU_R4010                       \
d266 2
a267 2
  (mips_opts.isa != ISA_MIPS1  \
   || mips_cpu == CPU_R3900)
d271 2
a272 2
/* Itbl support may require additional care here.  */
#define cop_interlocks (mips_cpu == CPU_R4300                        \
a309 8
/* 1 if double width floating point constants should not be constructed
   by a assembling two single width halves into two single width floating
   point registers which just happen to alias the double width destination
   register.  On some architectures this aliasing can be disabled by a bit
   in the status register, and the setting of this bit cannot be determined
   automatically at assemble time.  */
static int mips_disable_float_construction;

d319 1
a319 1
static unsigned int g_switch_value = 8;
d355 1
a355 1
   #NO_APP at the beginning of its output.  */
d359 2
a360 2
/* This array holds machine specific line separator characters.  */
const char line_separator_chars[] = ";";
d410 1
a410 1
static const struct mips_opcode dummy_opcode = { NULL, NULL, 0, 0, 0, 0 };
d451 1
a451 1
   prev_nop_frag.  */
d466 1
a466 1
   corresponding LO relocation.  */
d496 1
a496 1
static const unsigned int mips16_to_32_reg_map[] =
d572 2
a573 2
#define RELAX_RELOC1(i) ((bfd_vma) (((i) >> 9) & 0x7f) - 64)
#define RELAX_RELOC2(i) ((bfd_vma) (((i) >> 2) & 0x7f) - 64)
d630 1
a630 1
static int reg_needs_delay PARAMS ((unsigned int));
a693 3
static const char *mips_isa_to_str PARAMS ((int));
static const char *mips_cpu_to_str PARAMS ((int));
static int validate_mips_insn PARAMS ((const struct mips_opcode *));
a694 2
/* Table and functions used to map between CPU/ISA names, and
   ISA levels, and CPU numbers.  */
d696 1
a696 11
struct mips_cpu_info
{
  const char *name;           /* CPU or ISA name.  */
  int is_isa;                 /* Is this an ISA?  (If 0, a CPU.) */
  int isa;                    /* ISA level.  */
  int cpu;                    /* CPU number (default CPU if ISA).  */
};

static const struct mips_cpu_info *mips_cpu_info_from_name PARAMS ((const char *));
static const struct mips_cpu_info *mips_cpu_info_from_isa PARAMS ((int));
static const struct mips_cpu_info *mips_cpu_info_from_cpu PARAMS ((int));
d718 1
a718 1
  /* MIPS specific pseudo-ops.  */
d731 1
a731 1
  /* Relatively generic pseudo-ops that happen to be used on MIPS
d740 1
a740 1
  /* These pseudo-ops are defined in read.c, but must be overridden
d759 1
a759 6

#ifdef MIPS_STABS_ELF
  { "extern", ecoff_directive_extern, 0},
#endif

  { NULL, NULL, 0 },
d762 3
a764 4
static const pseudo_typeS mips_nonecoff_pseudo_table[] =
{
  /* These pseudo-ops should be defined by the object file format.
     However, a.out doesn't support them, so we have versions here.  */
d776 1
a776 1
  { NULL, NULL, 0 },
d840 4
a843 33
static const char *
mips_isa_to_str (isa)
     int isa;
{
  const struct mips_cpu_info *ci;
  static char s[20];

  ci = mips_cpu_info_from_isa (isa);
  if (ci != NULL)
    return (ci->name);

  sprintf (s, "ISA#%d", isa);
  return s;
}

static const char *
mips_cpu_to_str (cpu)
     int cpu;
{
  const struct mips_cpu_info *ci;
  static char s[16];

  ci = mips_cpu_info_from_cpu (cpu);
  if (ci != NULL)
    return (ci->name);

  sprintf (s, "CPU#%d", cpu);
  return s;
}

/* This function is called once, at assembler startup time.  It should
   set up all the tables, etc. that the MD part of the assembler will need.  */

d847 1
d849 1
a849 1
  int i = 0;
a853 2
  int target_cpu_had_mips16 = 0;
  const struct mips_cpu_info *ci;
d873 1
a873 1
  if (strncmp (cpu, "mips16", sizeof "mips16" - 1) == 0)
d875 77
a951 2
      target_cpu_had_mips16 = 1;
      cpu += sizeof "mips16" - 1;
d954 24
a977 2
  if (mips_opts.mips16 < 0)
    mips_opts.mips16 = target_cpu_had_mips16;
d979 1
a979 5
  /* At this point, mips_cpu will either be CPU_UNKNOWN if no CPU was
     specified on the command line, or some other value if one was.
     Similarly, mips_opts.isa will be ISA_UNKNOWN if not specified on
     the command line, or will be set otherwise if one was.  */
  if (mips_cpu != CPU_UNKNOWN && mips_opts.isa != ISA_UNKNOWN)
d981 4
a984 1
      /* We have it all.  There's nothing to do.  */
d986 2
a987 1
  else if (mips_cpu != CPU_UNKNOWN && mips_opts.isa == ISA_UNKNOWN)
d989 4
a992 4
      /* We have CPU, we need ISA.  */
      ci = mips_cpu_info_from_cpu (mips_cpu);
      assert (ci != NULL);
      mips_opts.isa = ci->isa;
a993 21
  else if (mips_cpu == CPU_UNKNOWN && mips_opts.isa != ISA_UNKNOWN)
    {
      /* We have ISA, we need default CPU.  */
      ci = mips_cpu_info_from_isa (mips_opts.isa);
      assert (ci != NULL);
      mips_cpu = ci->cpu;
    }
  else
    {
      /* We need to set both ISA and CPU from target cpu.  */
      ci = mips_cpu_info_from_name (cpu);
      if (ci == NULL)
	ci = mips_cpu_info_from_cpu (CPU_R3000);
      assert (ci != NULL);
      mips_opts.isa = ci->isa;
      mips_cpu = ci->cpu;
    }

  ci = mips_cpu_info_from_cpu (mips_cpu);
  assert (ci != NULL);
  mips_isa_from_cpu = ci->isa;
d996 1
a996 1
     if necessary.  */
d1000 2
a1001 2
      free (a);
      a = NULL;
d1004 1
a1004 1
  if (mips_opts.isa == ISA_MIPS1 && mips_trap)
d1009 1
a1009 1
     the best, but then neither is basing the abi on the isa.  */
d1012 1
a1012 1
      && 0 == strcmp (mips_abi_string, "eabi"))
d1015 29
a1043 6
  /* If they asked for mips1 or mips2 and a cpu that is
     mips3 or greater, then mark the object file 32BITMODE.  */
  if (mips_isa_from_cpu != ISA_UNKNOWN
      && ! ISA_HAS_64BIT_REGS (mips_opts.isa)
      && ISA_HAS_64BIT_REGS (mips_isa_from_cpu))
    mips_32bitmode = 1;
d1045 1
a1045 1
  if (! bfd_set_arch_mach (stdoutput, bfd_arch_mips, mips_cpu))
d1179 1
d1182 1
a1182 1

d1262 2
a1263 2
      DBG ((_("returned from mips_ip(%s) insn_opcode = 0x%x\n"),
	    str, insn.insn_opcode));
d1376 1
a1376 1
     unsigned int reg;
d1391 1
a1391 1
      /* Itbl support may require additional care here.  */
a1413 1
      valueT val;
d1421 2
a1422 3
	  val = S_GET_VALUE (l->label);
	  if ((val & 1) == 0)
	    S_SET_VALUE (l->label, val + 1);
d1495 1
a1495 1
	  /* Itbl support may require additional care here.  */
d1507 2
a1508 2
		    && ! cop_interlocks)
		   || (mips_opts.isa == ISA_MIPS1
d1526 1
a1526 1
             Need to modify this to include knowledge about
d1554 1
a1554 1
              /* Itbl support may require additional care here.  */
d1573 1
a1573 1
	  /* Itbl support may require additional care here.  */
d1587 3
a1589 2
				      & OP_MASK_RD),
				 MIPS_GR_REG))
d1604 1
a1604 1

d1608 1
a1608 1

d1613 2
a1614 2
	     insert two NOPS.  Some newer processors have interlocks.
	     Also the tx39's multiply instructions can be exectuted
d1616 2
a1617 2
             though the tx39's divide insns still do require the
	     delay.  */
d1619 1
a1619 1
		 || (mips_cpu == CPU_R3900 && (pinfo & INSN_MULT)))
d1628 1
a1628 1
	     between a read and an immediately following branch.  */
d1639 1
a1639 1
	     Also the note tx39's multiply above.  */
d1641 1
a1641 1
		 || (mips_cpu == CPU_R3900 && (pinfo & INSN_MULT)))
d1650 1
a1650 1
	     between a read and an immediately following branch.  */
d1659 1
a1659 1
      /* Itbl support may require additional care here.  */
d1680 1
a1680 1
		    || (mips_cpu == CPU_R3900 && (pinfo & INSN_MULT))))
d1684 1
a1684 1
		    || (mips_cpu == CPU_R3900 && (pinfo & INSN_MULT)))))
d1701 1
a1701 1
	  && ip->insn_opcode == (unsigned) (mips_opts.mips16 ? 0x6500 : 0))
a1733 2
	      valueT val;

d1736 1
a1736 1
	      val = (valueT) frag_now_fix ();
d1739 1
a1739 2
		val += 1;
	      S_SET_VALUE (l->label, val);
d1752 1
a1752 1
             need some nops, we count them in prev_nops_required.  */
d1853 1
d1926 4
a1929 4
	  /* We don't keep enough information to sort these cases out.
	     The itbl support does keep this information however, although
	     we currently don't support itbl fprmats as part of the cop
	     instruction.  May want to add this support in the future.  */
d1932 1
a1932 1
      mips_gprmask &= ~1 << 0;
d1979 1
a1979 1
		 swap.  */
d2030 1
a2030 1
              /* Itbl support may require additional care here.  */
d2035 1
a2035 1
		     || (mips_cpu == CPU_R3900 && (pinfo & INSN_MULT)))
d2043 2
a2044 2
		  && mips_opts.isa == ISA_MIPS1
                  /* Itbl support may require additional care here.  */
d2149 1
a2149 1
              /* Itbl support may require additional care here.  */
d2175 2
a2176 2
	      /* If the previous instruction is a sync, sync.l, or
		 sync.p, we can not swap.  */
d2324 1
a2324 1
   know whether nops are needed before a noreorder section.  */
d2352 1
a2352 1
   instructions are to follow.  */
d2376 1
a2376 1
	      && (prev_insn.insn_mo->pinfo
d2379 1
a2379 1
	      && mips_opts.isa == ISA_MIPS1
d2383 1
a2383 1
	  /* Itbl support may require additional care here.  */
d2405 1
a2405 1
	  /* Itbl support may require additional care here.  */
d2431 1
a2431 1
                 decrease the size of prev_nop_frag.  */
a2437 2
	      valueT val;

d2440 1
a2440 1
	      val = (valueT) frag_now_fix ();
d2443 1
a2443 2
		val += 1;
	      S_SET_VALUE (l->label, val);
d2517 1
a2517 1
	  && OPCODE_IS_MEMBER (insn.insn_mo, mips_opts.isa, mips_cpu,
d2519 1
a2519 1
	  && (mips_cpu != CPU_R4650 || (insn.insn_mo->pinfo & FP_D) == 0))
a2556 9
	case 'U':
	  {
	    int tmp = va_arg (args, int);

	    insn.insn_opcode |= tmp << 16;
	    insn.insn_opcode |= tmp << 11;
	    continue;
	  }

a2576 4
	case 'J':
	  insn.insn_opcode |= va_arg (args, int) << 6;
	  continue;

d2663 1
a2663 1
     int *counter ATTRIBUTE_UNUSED;
d3073 4
a3076 4
	{
	  if ((lo32.X_add_number & 0xffff8000) == 0xffff8000)
	    {
	      macro_build ((char *) NULL, counter, &lo32, "addiu", "t,r,j",
d3078 6
a3083 6
	      return;
	    }
	  if (lo32.X_add_number & 0x80000000)
	    {
	      macro_build ((char *) NULL, counter, &lo32, "lui", "t,u", reg,
			   (int) BFD_RELOC_HI16);
d3087 3
a3089 3
	      return;
	    }
	}
d3096 2
a3097 2
	{
	  unsigned long himask, lomask;
d3099 31
a3129 33
	  if (shift < 32)
	    {
	      himask = 0xffff >> (32 - shift);
	      lomask = (0xffff << shift) & 0xffffffff;
	    }
	  else
	    {
	      himask = 0xffff << (shift - 32);
	      lomask = 0;
	    }
	  if ((hi32.X_add_number & ~(offsetT) himask) == 0
	      && (lo32.X_add_number & ~(offsetT) lomask) == 0)
	    {
	      expressionS tmp;

	      tmp.X_op = O_constant;
	      if (shift < 32)
		tmp.X_add_number = ((hi32.X_add_number << (32 - shift))
				    | (lo32.X_add_number >> shift));
	      else
		tmp.X_add_number = hi32.X_add_number >> (shift - 32);
	      macro_build ((char *) NULL, counter, &tmp,
			   "ori", "t,r,i", reg, 0,
			   (int) BFD_RELOC_LO16);
	      macro_build ((char *) NULL, counter, NULL,
			   (shift >= 32) ? "dsll32" : "dsll",
			   "d,w,<", reg, reg,
			   (shift >= 32) ? shift - 32 : shift);
	      return;
	    }
	  shift++;
	}
      while (shift <= (64 - 16));
d3161 2
a3162 2
	{
	  shift = COUNT_TOP_ZEROES ((unsigned int) hi32.X_add_number);
d3164 1
a3164 1
	    {
d3169 3
a3171 3
	      tmp.X_op = O_constant;
	      tmp.X_add_number = (offsetT) -1;
	      macro_build ((char *) NULL, counter, &tmp, "addiu", "t,r,j",
d3173 9
a3181 9
	      if (bit != 0)
		{
		  bit += shift;
		  macro_build ((char *) NULL, counter, NULL,
			       (bit >= 32) ? "dsll32" : "dsll",
			       "d,w,<", reg, reg,
			       (bit >= 32) ? bit - 32 : bit);
		}
	      macro_build ((char *) NULL, counter, NULL,
d3183 1
a3183 1
			   "d,w,<", reg, reg,
d3185 3
a3187 3
	      return;
	    }
	}
d3192 1
a3192 1
	hi32.X_add_number |= ~(offsetT) 0xffffffff;
d3210 1
a3210 1
	{
d3213 4
a3216 4
	  macro_build ((char *) NULL, counter, NULL, "dsrl32", "d,w,<", reg,
		       reg, 0);
	  return;
	}
d3269 1
a3269 1
	  || nopic_need_relax (ep->X_add_symbol, 1))
d3446 1
a3446 1
  int used_at = 0;
d3959 1
a3959 1
	    macro_build ((char *) NULL, &icnt, NULL, "break", "c", 7);
d3980 1
a3980 1
	  macro_build ((char *) NULL, &icnt, NULL, "break", "c", 7);
d4019 1
a4019 1
	  macro_build ((char *) NULL, &icnt, NULL, "break", "c", 6);
d4066 1
a4066 1
	    macro_build ((char *) NULL, &icnt, NULL, "break", "c", 7);
d4137 1
a4137 1
	  macro_build ((char *) NULL, &icnt, NULL, "break", "c", 7);
a4235 2
	  int lw_reloc_type = (int) BFD_RELOC_MIPS_GOT16;

a4238 2
	     or if tempreg is PIC_CALL_REG
	       lw	$tempreg,<sym>($gp)	(BFD_RELOC_MIPS_CALL16)
a4264 2
	  if (expr1.X_add_number == 0 && tempreg == PIC_CALL_REG)
	    lw_reloc_type = (int) BFD_RELOC_MIPS_CALL16;
d4267 1
a4267 1
		       "t,o(b)", tempreg, lw_reloc_type, GP);
a4372 2
	  int lui_reloc_type = (int) BFD_RELOC_MIPS_GOT_HI16;
	  int lw_reloc_type = (int) BFD_RELOC_MIPS_GOT_LO16;
a4378 4
	     or if tempreg is PIC_CALL_REG
	       lui	$tempreg,<sym>		(BFD_RELOC_MIPS_CALL_HI16)
	       addu	$tempreg,$tempreg,$gp
	       lw	$tempreg,<sym>($tempreg) (BFD_RELOC_MIPS_CALL_LO16)
a4416 5
	  if (expr1.X_add_number == 0 && tempreg == PIC_CALL_REG)
	    {
	      lui_reloc_type = (int) BFD_RELOC_MIPS_CALL_HI16;
	      lw_reloc_type = (int) BFD_RELOC_MIPS_CALL_LO16;
	    }
d4418 1
a4418 1
		       tempreg, lui_reloc_type);
d4426 2
a4427 1
		       "t,o(b)", tempreg, lw_reloc_type, tempreg);
d4647 1
a4647 1

d4753 1
a4753 1
	    }
d4807 1
a4807 1
      /* Itbl support may require additional care here.  */
d4812 1
a4812 1
      /* Itbl support may require additional care here.  */
d4817 1
a4817 1
      /* Itbl support may require additional care here.  */
d4822 1
a4822 1
      /* Itbl support may require additional care here.  */
d4834 1
a4834 1
      if (mips_cpu == CPU_R4650)
d4840 1
a4840 1
      /* Itbl support may require additional care here.  */
d4845 1
a4845 1
      /* Itbl support may require additional care here.  */
d4850 1
a4850 1
      /* Itbl support may require additional care here.  */
d4892 1
a4892 1
      /* Itbl support may require additional care here.  */
d4897 1
a4897 1
      /* Itbl support may require additional care here.  */
d4902 1
a4902 1
      /* Itbl support may require additional care here.  */
d4907 1
a4907 1
      /* Itbl support may require additional care here.  */
d4923 1
a4923 1
      if (mips_cpu == CPU_R4650)
d4930 1
a4930 1
      /* Itbl support may require additional care here.  */
d4934 1
a4934 1
      /* Itbl support may require additional care here.  */
d4939 1
a4939 1
      /* Itbl support may require additional care here.  */
d4951 1
a4951 1
      /* Itbl support may require additional care here.  */
d5083 1
a5083 1
	  p = frag_var (rs_machine_dependent, 4, 0,
d5308 1
a5308 1

d5368 1
a5368 1
	  if (mips_opts.isa != ISA_MIPS1)
d5392 2
a5393 2

	  if (mips_opts.isa != ISA_MIPS1)
d5411 1
a5411 1
      if (mips_cpu == CPU_R4650)
d5420 1
a5420 1
      assert (mips_opts.isa == ISA_MIPS1);
d5452 1
a5452 1
      if (mips_cpu == CPU_R4650)
d5457 1
a5457 1
      /* Itbl support may require additional care here.  */
d5459 1
a5459 1
      if (mips_opts.isa != ISA_MIPS1)
d5470 1
a5470 1
      if (mips_cpu == CPU_R4650)
d5476 1
a5476 1
      if (mips_opts.isa != ISA_MIPS1)
d5484 1
a5484 1
      /* Itbl support may require additional care here.  */
d5520 1
a5520 1
      /* Itbl support may require additional care here.  */
d5571 1
a5571 1
	      /* Itbl support may require additional care here.  */
d5581 1
a5581 1
	      /* Itbl support may require additional care here.  */
d5627 1
a5627 1
	  /* Itbl support may require additional care here.  */
d5635 1
a5635 1
	  /* Itbl support may require additional care here.  */
d5639 1
a5639 1
	}
d5680 1
a5680 1
	  /* Itbl support may require additional care here.  */
d5690 1
a5690 1
	  /* Itbl support may require additional care here.  */
d5754 1
a5754 1
	  /* Itbl support may require additional care here.  */
d5764 1
a5764 1
	  /* Itbl support may require additional care here.  */
d5798 1
a5798 1
	  /* Itbl support may require additional care here.  */
d5809 1
a5809 1
	  /* Itbl support may require additional care here.  */
d5841 1
a5841 1
	  /* Itbl support may require additional care here.  */
d5846 1
a5846 1
	  /* Itbl support may require additional care here.  */
d5865 1
a5865 1
      assert (bfd_arch_bits_per_address (stdoutput) == 32
d5886 1
a5886 1
      What registers are read/set/modified?
d5889 1
a5889 1
      this knowledge can be encoded in the itbl spec.  */
d5915 1
a5915 1
         We may want to have the assembler assemble this value,
d5919 1
a5919 1
      if (itbl_have_entries
d5921 1
a5921 1
	{
d5927 1
a5927 1
	}
d5934 1
a5934 1

d5957 1
a5957 1

d5962 1
a5962 1

d5967 1
a5967 1

d6024 1
a6024 1
	  macro_build ((char *) NULL, &icnt, NULL, "break", "c", 6);
d6057 1
a6057 1
	  macro_build ((char *) NULL, &icnt, NULL, "break", "c", 6);
d6099 1
a6099 1
      if (mips_cpu == CPU_R4650)
d6104 1
a6104 1
      assert (mips_opts.isa == ISA_MIPS1);
d6411 1
d6413 1
a6413 2
    case M_TRUNCWD:
      assert (mips_opts.isa == ISA_MIPS1);
d6651 1
a6651 1
	 are added dynamically.  */
d6710 2
a6711 2
      macro_build ((char *) NULL, &icnt, NULL, "break", "6", 7);

d6936 1
a6936 1
      case 'B': USE_BITS (OP_MASK_CODE20,       OP_SH_CODE20);  break;
a6941 1
      case 'H': USE_BITS (OP_MASK_SEL,		OP_SH_SEL);	break;
a6942 1
      case 'J': USE_BITS (OP_MASK_CODE19,       OP_SH_CODE19);  break;
a6972 2
      case 'U': USE_BITS (OP_MASK_RD,           OP_SH_RD);
	        USE_BITS (OP_MASK_RT,           OP_SH_RT);	break;
d7000 1
a7000 1
  char c = 0;
d7025 1
a7025 1

d7033 1
a7033 1
      /* Restore the character we overwrite above (if any).  */
d7068 1
a7068 1
      else
d7070 1
a7070 1

d7073 1
a7073 1
	  if (mips_cpu == CPU_R4650 && (insn->pinfo & FP_D) != 0)
d7088 4
a7091 5
	      sprintf (buf,
		       _("opcode not supported on this processor: %s (%s)"),
		       mips_cpu_to_str (mips_cpu),
		       mips_isa_to_str (mips_opts.isa));

d7135 1
a7135 1
		 we must have a left paren.  */
d7179 1
d7227 1
a7227 1
	    case 'B':           /* 20-bit syscall/break code.  */
d7231 1
a7231 1
		as_warn (_("Illegal 20-bit code (%ld)"),
d7239 1
a7239 1
	      my_getExpression (&imm_expr, s);
d7241 1
a7241 1
	      if ((unsigned long) imm_expr.X_add_number >= (1<<25))
d7243 1
a7243 1
		  as_warn (_("Coproccesor code > 25 bits (%ld)"),
d7245 1
a7245 1
		  imm_expr.X_add_number &= ((1<<25) - 1);
d7247 4
a7250 15
	      ip->insn_opcode |= imm_expr.X_add_number;
	      imm_expr.X_op = O_absent;
	      s = expr_end;
	      continue;

	    case 'J':           /* 19-bit wait code.  */
	      my_getExpression (&imm_expr, s);
	      check_absolute_expr (ip, &imm_expr);
	      if ((unsigned) imm_expr.X_add_number > 0x7ffff)
		as_warn (_("Illegal 19-bit code (%ld)"),
			 (long) imm_expr.X_add_number);
	      ip->insn_opcode |= imm_expr.X_add_number << 6;
	      imm_expr.X_op = O_absent;
	      s = expr_end;
	      continue;
d7253 1
a7253 1
	      my_getExpression (&imm_expr, s);
d7255 1
a7255 1
	      if (imm_expr.X_add_number != 0 && imm_expr.X_add_number != 1)
d7257 1
a7257 1
		  as_warn (_("Invalidate performance regster (%ld)"),
d7259 1
a7259 1
		  imm_expr.X_add_number &= 1;
d7261 4
a7264 4
	      ip->insn_opcode |= (imm_expr.X_add_number << 1);
	      imm_expr.X_op = O_absent;
	      s = expr_end;
	      continue;
a7276 1
	    case 'U':           /* destination register (clo/clz).  */
d7344 1
a7344 1
			      if (p)
d7346 1
a7346 1
			      else
d7352 1
a7352 1
			}
d7377 2
a7378 2
	/* Now that we have assembled one operand, we use the args string
	 * to figure out where it goes in the instruction.  */
a7390 4
		    case 'U':
		      ip->insn_opcode |= regno << 11;
		      ip->insn_opcode |= regno << 16;
		      break;
d7499 1
d7581 1
a7581 1
		assert (length == (unsigned) (f64 ? 8 : 4));
a7597 1
			 && ! mips_disable_float_construction
d7743 2
a7744 2
			   || imm_expr.X_add_number >= 0x10000)
			  && imm_expr.X_op == O_constant))
d7749 4
a7752 2
		      if (imm_expr.X_op == O_constant
			  || imm_expr.X_op == O_big)
d7778 2
a7779 2
			   || imm_expr.X_add_number >= max)
			  && imm_expr.X_op == O_constant)
d7788 4
a7791 2
		      if (imm_expr.X_op == O_constant
			  || imm_expr.X_op == O_big)
d7818 2
a7819 2
		      || (S_GET_SEGMENT (offset_expr.X_add_symbol)
			  != S_GET_SEGMENT (offset_expr.X_op_symbol))))
d7892 1
a7892 23
	      continue;

	    case 'H':
	      if (s[0] == '0' && (s[1] == 'x' || s[1] == 'X'))
		s += 2;
	      if (isdigit ((unsigned char) *s))
		{
		  c = 0;
		  do
		    {
		      c *= 10;
		      c += *s - '0';
		      ++s;
		    }
		  while (isdigit ((unsigned char) *s));
		}
	      else
		c = 8; /* Invalid sel value.  */

	      if (c > 7)
		as_bad (_("invalid coprocessor sub-selection value (0-7)"));
	      ip->insn_opcode |= c;
	      continue;
d8571 1
a8571 2
    as_warn_where (file, line,
		   _("extended operand requested but not required"));
a8720 1
  valueT val;
d8738 2
a8739 2
      && (val = S_GET_VALUE (ep->X_add_symbol)) == frag_now_fix ())
    S_SET_VALUE (ep->X_add_symbol, val + 1);
d8743 2
a8744 2
   of type TYPE, and store the appropriate bytes in *LITP.  The number
   of LITTLENUMS emitted is stored in *SIZEP.  An error message is
d8795 1
a8795 1

d8813 1
a8813 2
struct option md_longopts[] =
{
d8827 1
a8827 1
#define OPTION_TRAP (OPTION_MD_BASE + 7)
d8830 1
a8830 1
#define OPTION_BREAK (OPTION_MD_BASE + 8)
d8833 1
a8833 1
#define OPTION_EB (OPTION_MD_BASE + 9)
d8835 1
a8835 1
#define OPTION_EL (OPTION_MD_BASE + 10)
d8837 1
a8837 1
#define OPTION_M4650 (OPTION_MD_BASE + 11)
d8839 1
a8839 1
#define OPTION_NO_M4650 (OPTION_MD_BASE + 12)
d8841 1
a8841 1
#define OPTION_M4010 (OPTION_MD_BASE + 13)
d8843 1
a8843 1
#define OPTION_NO_M4010 (OPTION_MD_BASE + 14)
d8845 1
a8845 1
#define OPTION_M4100 (OPTION_MD_BASE + 15)
d8847 1
a8847 1
#define OPTION_NO_M4100 (OPTION_MD_BASE + 16)
d8849 1
a8849 1
#define OPTION_MIPS16 (OPTION_MD_BASE + 17)
d8851 1
a8851 1
#define OPTION_NO_MIPS16 (OPTION_MD_BASE + 18)
d8853 1
a8853 1
#define OPTION_M3900 (OPTION_MD_BASE + 19)
d8855 1
a8855 1
#define OPTION_NO_M3900 (OPTION_MD_BASE + 20)
d8857 3
a8859 1
#define OPTION_MABI (OPTION_MD_BASE + 21)
d8861 2
a8862 1
#define OPTION_M7000_HILO_FIX (OPTION_MD_BASE + 22)
d8864 1
a8864 1
#define OPTION_NO_M7000_HILO_FIX (OPTION_MD_BASE + 23)
d8866 6
a8871 14
#define OPTION_GP32 (OPTION_MD_BASE + 24)
  {"mgp32", no_argument, NULL, OPTION_GP32},
#define OPTION_GP64 (OPTION_MD_BASE + 25)
  {"mgp64", no_argument, NULL, OPTION_GP64},
#define OPTION_CONSTRUCT_FLOATS (OPTION_MD_BASE + 26)
  {"construct-floats", no_argument, NULL, OPTION_CONSTRUCT_FLOATS},
#define OPTION_NO_CONSTRUCT_FLOATS (OPTION_MD_BASE + 27)
  {"no-construct-floats", no_argument, NULL, OPTION_NO_CONSTRUCT_FLOATS},
#define OPTION_MIPS32 (OPTION_MD_BASE + 28)
  {"mips32", no_argument, NULL, OPTION_MIPS32},
#define OPTION_MIPS5 (OPTION_MD_BASE + 29)
  {"mips5", no_argument, NULL, OPTION_MIPS5},
#define OPTION_MIPS64 (OPTION_MD_BASE + 30)
  {"mips64", no_argument, NULL, OPTION_MIPS64},
d8873 2
a8874 7
#define OPTION_ELF_BASE    (OPTION_MD_BASE + 35)
#define OPTION_CALL_SHARED (OPTION_ELF_BASE + 0)
#define OPTION_NON_SHARED  (OPTION_ELF_BASE + 1)
#define OPTION_XGOT        (OPTION_ELF_BASE + 2)
#define OPTION_32 	   (OPTION_ELF_BASE + 3)
#define OPTION_64          (OPTION_ELF_BASE + 4)
  {"KPIC",        no_argument, NULL, OPTION_CALL_SHARED},
d8876 3
a8878 4
  {"non_shared",  no_argument, NULL, OPTION_NON_SHARED},
  {"xgot",        no_argument, NULL, OPTION_XGOT},
  {"32",          no_argument, NULL, OPTION_32},
  {"64",          no_argument, NULL, OPTION_64},
d8881 5
d8888 1
a8888 1
size_t md_longopts_size = sizeof (md_longopts);
a8896 8
    case OPTION_CONSTRUCT_FLOATS:
      mips_disable_float_construction = 0;
      break;

    case OPTION_NO_CONSTRUCT_FLOATS:
      mips_disable_float_construction = 1;
      break;

d8933 1
a8933 1
      mips_opts.isa = ISA_MIPS1;
d8937 1
a8937 1
      mips_opts.isa = ISA_MIPS2;
d8941 1
a8941 1
      mips_opts.isa = ISA_MIPS3;
d8945 1
a8945 13
      mips_opts.isa = ISA_MIPS4;
      break;

    case OPTION_MIPS5:
      mips_opts.isa = ISA_MIPS5;
      break;

    case OPTION_MIPS32:
      mips_opts.isa = ISA_MIPS32;
      break;

    case OPTION_MIPS64:
      mips_opts.isa = ISA_MIPS64;
d8950 7
a8956 3
	/* Identify the processor type.  */
	if (strcasecmp (arg, "default") == 0)
	  mips_cpu = CPU_UNKNOWN;
d8959 29
a8987 1
	    const struct mips_cpu_info *ci;
d8989 72
a9060 5
	    ci = mips_cpu_info_from_name (arg);
	    if (ci == NULL || ci->is_isa)
	      as_bad (_("invalid architecture -mcpu=%s"), arg);
	    else
	      mips_cpu = ci->cpu;
d9066 1
a9066 1
      mips_cpu = CPU_R4650;
d9073 1
a9073 1
      mips_cpu = CPU_R4010;
d9080 1
a9080 1
      mips_cpu = CPU_VR4100;
d9086 1
d9088 1
a9088 1
      mips_cpu = CPU_R3900;
d9090 1
a9090 1

a9113 1
#ifdef OBJ_ELF
a9146 1
#endif /* OBJ_ELF */
a9163 1
#ifdef OBJ_ELF
d9177 1
a9177 3
	      || strcmp (*l, "elf64-littlemips") == 0
	      || strcmp (*l, "elf64-tradbigmips") == 0
	      || strcmp (*l, "elf64-tradlittlemips") == 0)
a9184 1
#endif /* OBJ_ELF */
d9193 1
a9193 1
	 This is unnecessarily restrictive.
d9197 1
a9197 1
	 multilibs will break too many systems.  */
d9199 1
a9199 3
#if 0
      mips_32bitmode = 1;
#endif
d9205 1
a9205 3
#if 0
      mips_32bitmode = 0;
#endif
d9209 5
a9213 5
      if (strcmp (arg, "32") == 0
	  || strcmp (arg, "n32") == 0
	  || strcmp (arg, "64") == 0
	  || strcmp (arg, "o64") == 0
	  || strcmp (arg, "eabi") == 0)
d9232 1
d9263 1
d9270 1
a9270 1
  fprintf (stream, _("\
d9278 1
a9278 1
  fprintf (stream, _("\
a9282 3
-mips5                  generate MIPS ISA V instructions\n\
-mips32                 generate MIPS32 ISA instructions\n\
-mips64                 generate MIPS64 ISA instructions\n\
a9301 3
  show (stream, "12000", &column, &first);
  show (stream, "mips32-4k", &column, &first);
  show (stream, "sb-1", &column, &first);
d9317 1
a9317 1
  fprintf (stream, _("\
d9320 1
a9320 1
  fprintf (stream, _("\
a9322 1
--[no-]construct-floats [dis]allow floating point values to be constructed\n\
d9326 1
a9326 1
  fprintf (stream, _("\
d9340 1
a9340 1
  mips_opcodes = (struct mips_opcode *) mips_builtin_opcodes;
d9366 1
a9366 1
     fragS *frag ATTRIBUTE_UNUSED;
d9509 1
d9533 1
a9533 2
  long insn;
  valueT value;
d9548 21
a9568 22
      if (S_GET_OTHER (fixP->fx_addsy) == STO_MIPS16
	  || S_IS_WEAK (fixP->fx_addsy)
	  || (symbol_used_in_reloc_p (fixP->fx_addsy)
	      && (((bfd_get_section_flags (stdoutput,
					   S_GET_SEGMENT (fixP->fx_addsy))
		    & SEC_LINK_ONCE) != 0)
		  || !strncmp (segment_name (S_GET_SEGMENT (fixP->fx_addsy)),
			       ".gnu.linkonce",
			       sizeof (".gnu.linkonce") - 1))))

	{
	  valueT symval = S_GET_VALUE (fixP->fx_addsy);
	  value -= symval;
	  if (value != 0 && ! fixP->fx_pcrel)
	    {
	      /* In this case, the bfd_install_relocation routine will
		 incorrectly add the symbol value back in.  We just want
		 the addend to appear in the object file.
		 FIXME: If this makes VALUE zero, we're toast.  */
	      value -= symval;
	    }
	}
d9624 1
a9624 1
      if (OUTPUT_FLAVOR == bfd_target_elf_flavour
d9649 1
a9649 1
      if (OUTPUT_FLAVOR == bfd_target_elf_flavour
d9718 1
a9718 1
	  if (value + 0x8000 > 0xffff)
d9736 1
a9736 1
		      _("Branch to odd address (%lx)"), (long) value);
d9745 2
a9746 2

      value = (offsetT) value >> 2;
d9755 1
a9755 1
      if (value + 0x8000 <= 0xffff)
d9943 1
a9943 1
     int x ATTRIBUTE_UNUSED;
d10048 1
a10048 1
		record_alignment (seg, 4);
d10070 1
a10070 1
		record_alignment (seg, 4);
d10137 1
a10137 1
     int x ATTRIBUTE_UNUSED;
d10178 1
a10178 1
     int x ATTRIBUTE_UNUSED;
d10231 1
a10231 1
     int x ATTRIBUTE_UNUSED;
d10246 1
a10246 1
	     needed.  */
d10306 6
a10311 12
      switch (isa)
      {
      case  0: mips_opts.isa = file_mips_isa;   break;
      case  1: mips_opts.isa = ISA_MIPS1;       break;
      case  2: mips_opts.isa = ISA_MIPS2;       break;
      case  3: mips_opts.isa = ISA_MIPS3;       break;
      case  5: mips_opts.isa = ISA_MIPS5;       break;
      case  4: mips_opts.isa = ISA_MIPS4;       break;
      case 32: mips_opts.isa = ISA_MIPS32;      break;
      case 64: mips_opts.isa = ISA_MIPS64;      break;
      default: as_bad (_("unknown ISA level")); break;
      }
d10367 1
a10367 1
     int ignore ATTRIBUTE_UNUSED;
d10392 1
a10392 1
     int ignore ATTRIBUTE_UNUSED;
d10432 1
a10432 1
     int ignore ATTRIBUTE_UNUSED;
d10465 1
a10465 1
     int ignore ATTRIBUTE_UNUSED;
d10505 1
a10505 1
     int ignore ATTRIBUTE_UNUSED;
d10525 1
a10525 1
  demand_empty_rest_of_line ();
d10539 1
a10539 1
     int ignore ATTRIBUTE_UNUSED;
d10568 1
a10568 1
     int ignore ATTRIBUTE_UNUSED;
d10592 1
a10592 1

d10598 1
a10598 1

a10765 1
  fragS *sym_frag;
a10798 2
  sym_frag = symbol_get_frag (fragp->fr_symbol);

d10803 2
a10804 1
      val = S_GET_VALUE (fragp->fr_symbol) + sym_frag->fr_address;
d10817 1
a10817 1
	     + sym_frag->fr_address);
a10839 1
	  /* Must have been called from md_estimate_size_before_relax.  */
a10851 6
	  if (fragp != sym_frag && sym_frag->fr_address == 0)
	    /* Assume non-extended on the first relaxation pass.
	       The address we have calculated will be bogus if this is
	       a forward branch to another frag, as the forward frag
	       will have fr_address == 0.  */
	    return 0;
d10855 2
a10856 3
	 the same section.  If the relax_marker of the symbol fragment
	 differs from the relax_marker of this fragment, we have not
	 yet adjusted the symbol fragment fr_address.  We want to add
d10860 2
a10861 1
	  && sym_frag->relax_marker != fragp->relax_marker)
d10871 3
a10873 1
	  for (f = fragp; f != NULL && f != sym_frag; f = f->fr_next)
d10903 1
a10903 1
	     higher.  */
d10972 1
d10978 1
a10978 2
  int change = 0;
  boolean linkonce = false;
a11020 15
      /* duplicate the test for LINK_ONCE sections as in adjust_reloc_syms */
      if (symsec != segtype && ! S_IS_LOCAL (sym))
	{
	  if ((bfd_get_section_flags (stdoutput, symsec) & SEC_LINK_ONCE)
	      != 0)
	    linkonce = true;

	  /* The GNU toolchain uses an extension for ELF: a section
	     beginning with the magic string .gnu.linkonce is a linkonce
	     section.  */
	  if (strncmp (segment_name (symsec), ".gnu.linkonce",
		       sizeof ".gnu.linkonce" - 1) == 0)
	    linkonce = true;
	}

d11024 1
a11024 7
		&& ! bfd_is_com_section (symsec)
		&& !linkonce
#ifdef OBJ_ELF
		/* A weak symbol is treated as external.  */
		&& ! S_IS_WEAK (sym)
#endif
		);
d11081 1
a11081 1
     asection *section ATTRIBUTE_UNUSED;
d11322 1
a11322 1
     bfd *abfd ATTRIBUTE_UNUSED;
d11537 1
a11537 1
  /* Set the MIPS ELF ABI flags.  */
d11540 1
a11540 1
  else if (strcmp (mips_abi_string, "32") == 0)
d11542 1
a11542 1
  else if (strcmp (mips_abi_string, "o64") == 0)
d11544 1
a11544 1
  else if (strcmp (mips_abi_string, "eabi") == 0)
d11558 12
a11569 10
typedef struct proc {
  symbolS *isym;
  unsigned long reg_mask;
  unsigned long reg_offset;
  unsigned long fpreg_mask;
  unsigned long fpreg_offset;
  unsigned long frame_offset;
  unsigned long frame_reg;
  unsigned long pc_reg;
} procS;
d11575 2
a11576 1
/* Fill in an rs_align_code fragment.  */
d11578 11
a11588 8
void
mips_handle_align (fragp)
     fragS *fragp;
{
  if (fragp->fr_type != rs_align_code)
    return;

  if (mips_opts.mips16)
d11593 1
a11593 2
      int bytes;
      char *p;
d11595 5
a11599 11
      bytes = fragp->fr_next->fr_address - fragp->fr_address - fragp->fr_fix;
      p = fragp->fr_literal + fragp->fr_fix;

      if (bytes & 1)
	{
	  *p++ = 0;
	  fragp->fr_fix += 1;
	}

      memcpy (p, (target_big_endian ? be_nop : le_nop), 2);
      fragp->fr_var = 2;
d11602 1
a11602 1
  /* For mips32, a nop is a zero, which we trivially get by doing nothing.  */
d11674 1
a11674 1
     int x ATTRIBUTE_UNUSED;
d11682 1
d11687 1
a11687 1
     int x ATTRIBUTE_UNUSED;
d11750 1
a11750 1
    /* Write the symbol.  */
d11756 1
a11756 1
    fragp = frag_more (7 * 4);
d11758 7
a11764 7
    md_number_to_chars (fragp,      (valueT) cur_proc_ptr->reg_mask, 4);
    md_number_to_chars (fragp +  4, (valueT) cur_proc_ptr->reg_offset, 4);
    md_number_to_chars (fragp +  8, (valueT) cur_proc_ptr->fpreg_mask, 4);
    md_number_to_chars (fragp + 12, (valueT) cur_proc_ptr->fpreg_offset, 4);
    md_number_to_chars (fragp + 16, (valueT) cur_proc_ptr->frame_offset, 4);
    md_number_to_chars (fragp + 20, (valueT) cur_proc_ptr->frame_reg, 4);
    md_number_to_chars (fragp + 24, (valueT) cur_proc_ptr->pc_reg, 4);
d11825 1
a11825 1
   then ecoff.c (ecoff_directive_frame) is used. For embedded targets,
d11827 1
a11827 1
   We can't use the ecoff routines because they make reference to the ecoff
d11838 1
a11838 1
  if (cur_proc_ptr == (procS *) NULL)
d11866 2
a11867 2
/* The .fmask and .mask directives. If the mdebug section is present
   (IRIX 5 native) then ecoff.c (ecoff_directive_mask) is used. For
d11869 1
a11869 1
   information correctly. We can't use the ecoff routines because they
d11878 1
a11878 1

a11935 199

/* CPU name/ISA/number mapping table.

   Entries are grouped by type.  The first matching CPU or ISA entry
   gets chosen by CPU or ISA, so it should be the 'canonical' name
   for that type.  Entries after that within the type are sorted
   alphabetically.

   Case is ignored in comparison, so put the canonical entry in the
   appropriate case but everything else in lower case to ease eye pain.  */
static const struct mips_cpu_info mips_cpu_info_table[] =
{
  /* MIPS1 ISA */
  { "MIPS1",          1,      ISA_MIPS1,      CPU_R3000, },
  { "mips",           1,      ISA_MIPS1,      CPU_R3000, },

  /* MIPS2 ISA */
  { "MIPS2",          1,      ISA_MIPS2,      CPU_R6000, },

  /* MIPS3 ISA */
  { "MIPS3",          1,      ISA_MIPS3,      CPU_R4000, },

  /* MIPS4 ISA */
  { "MIPS4",          1,      ISA_MIPS4,      CPU_R8000, },

  /* MIPS5 ISA */
  { "MIPS5",          1,      ISA_MIPS5,      CPU_MIPS5, },
  { "Generic-MIPS5",  0,      ISA_MIPS5,      CPU_MIPS5, },

  /* MIPS32 ISA */
  { "MIPS32",         1,      ISA_MIPS32,     CPU_MIPS32, },
  { "Generic-MIPS32", 0,      ISA_MIPS32,     CPU_MIPS32, },

#if 1
  /* XXX for now, MIPS64 -> MIPS3 because of history */
  { "MIPS64",         1,      ISA_MIPS3,      CPU_R4000 }, /* XXX! */
#else
  /* MIPS64 ISA */
  { "MIPS64",         1,      ISA_MIPS64,     CPU_MIPS64 },
#endif
  { "mips64isa",      1,      ISA_MIPS64,     CPU_MIPS64 },
  { "Generic-MIPS64", 0,      ISA_MIPS64,     CPU_MIPS64, },

  /* R2000 CPU */
  { "R2000",          0,      ISA_MIPS1,      CPU_R2000, },
  { "2000",           0,      ISA_MIPS1,      CPU_R2000, },
  { "2k",             0,      ISA_MIPS1,      CPU_R2000, },
  { "r2k",            0,      ISA_MIPS1,      CPU_R2000, },

  /* R3000 CPU */
  { "R3000",          0,      ISA_MIPS1,      CPU_R3000, },
  { "3000",           0,      ISA_MIPS1,      CPU_R3000, },
  { "3k",             0,      ISA_MIPS1,      CPU_R3000, },
  { "r3k",            0,      ISA_MIPS1,      CPU_R3000, },

  /* TX3900 CPU */
  { "R3900",          0,      ISA_MIPS1,      CPU_R3900, },
  { "3900",           0,      ISA_MIPS1,      CPU_R3900, },
  { "mipstx39",       0,      ISA_MIPS1,      CPU_R3900, },

  /* R4000 CPU */
  { "R4000",          0,      ISA_MIPS3,      CPU_R4000, },
  { "4000",           0,      ISA_MIPS3,      CPU_R4000, },
  { "4k",             0,      ISA_MIPS3,      CPU_R4000, },   /* beware */
  { "r4k",            0,      ISA_MIPS3,      CPU_R4000, },

  /* R4010 CPU */
  { "R4010",          0,      ISA_MIPS2,      CPU_R4010, },
  { "4010",           0,      ISA_MIPS2,      CPU_R4010, },

  /* R4400 CPU */
  { "R4400",          0,      ISA_MIPS3,      CPU_R4400, },
  { "4400",           0,      ISA_MIPS3,      CPU_R4400, },

  /* R4600 CPU */
  { "R4600",          0,      ISA_MIPS3,      CPU_R4600, },
  { "4600",           0,      ISA_MIPS3,      CPU_R4600, },
  { "mips64orion",    0,      ISA_MIPS3,      CPU_R4600, },
  { "orion",          0,      ISA_MIPS3,      CPU_R4600, },

  /* R4650 CPU */
  { "R4650",          0,      ISA_MIPS3,      CPU_R4650, },
  { "4650",           0,      ISA_MIPS3,      CPU_R4650, },

  /* R6000 CPU */
  { "R6000",          0,      ISA_MIPS2,      CPU_R6000, },
  { "6000",           0,      ISA_MIPS2,      CPU_R6000, },
  { "6k",             0,      ISA_MIPS2,      CPU_R6000, },
  { "r6k",            0,      ISA_MIPS2,      CPU_R6000, },

  /* R8000 CPU */
  { "R8000",          0,      ISA_MIPS4,      CPU_R8000, },
  { "8000",           0,      ISA_MIPS4,      CPU_R8000, },
  { "8k",             0,      ISA_MIPS4,      CPU_R8000, },
  { "r8k",            0,      ISA_MIPS4,      CPU_R8000, },

  /* R10000 CPU */
  { "R10000",         0,      ISA_MIPS4,      CPU_R10000, },
  { "10000",          0,      ISA_MIPS4,      CPU_R10000, },
  { "10k",            0,      ISA_MIPS4,      CPU_R10000, },
  { "r10k",           0,      ISA_MIPS4,      CPU_R10000, },

  /* R12000 CPU */
  { "R12000",         0,      ISA_MIPS4,      CPU_R12000, },
  { "12000",          0,      ISA_MIPS4,      CPU_R12000, },
  { "12k",            0,      ISA_MIPS4,      CPU_R12000, },
  { "r12k",           0,      ISA_MIPS4,      CPU_R12000, },

  /* VR4100 CPU */
  { "VR4100",         0,      ISA_MIPS3,      CPU_VR4100, },
  { "4100",           0,      ISA_MIPS3,      CPU_VR4100, },
  { "mips64vr4100",   0,      ISA_MIPS3,      CPU_VR4100, },
  { "r4100",          0,      ISA_MIPS3,      CPU_VR4100, },

  /* VR4111 CPU */
  { "VR4111",         0,      ISA_MIPS3,      CPU_R4111, },
  { "4111",           0,      ISA_MIPS3,      CPU_R4111, },
  { "mips64vr4111",   0,      ISA_MIPS3,      CPU_R4111, },
  { "r4111",          0,      ISA_MIPS3,      CPU_R4111, },

  /* VR4300 CPU */
  { "VR4300",         0,      ISA_MIPS3,      CPU_R4300, },
  { "4300",           0,      ISA_MIPS3,      CPU_R4300, },
  { "mips64vr4300",   0,      ISA_MIPS3,      CPU_R4300, },
  { "r4300",          0,      ISA_MIPS3,      CPU_R4300, },

  /* VR5000 CPU */
  { "VR5000",         0,      ISA_MIPS4,      CPU_R5000, },
  { "5000",           0,      ISA_MIPS4,      CPU_R5000, },
  { "5k",             0,      ISA_MIPS4,      CPU_R5000, },
  { "mips64vr5000",   0,      ISA_MIPS4,      CPU_R5000, },
  { "r5000",          0,      ISA_MIPS4,      CPU_R5000, },
  { "r5200",          0,      ISA_MIPS4,      CPU_R5000, },
  { "r5230",          0,      ISA_MIPS4,      CPU_R5000, },
  { "r5231",          0,      ISA_MIPS4,      CPU_R5000, },
  { "r5261",          0,      ISA_MIPS4,      CPU_R5000, },
  { "r5721",          0,      ISA_MIPS4,      CPU_R5000, },
  { "r5k",            0,      ISA_MIPS4,      CPU_R5000, },
  { "r7000",          0,      ISA_MIPS4,      CPU_R5000, },

  /* MIPS32 4K CPU */
  { "MIPS32-4K",      0,      ISA_MIPS32,     CPU_MIPS32_4K, },
  { "4kc",            0,      ISA_MIPS32,     CPU_MIPS32_4K, },
  { "4km",            0,      ISA_MIPS32,     CPU_MIPS32_4K, },
  { "4kp",            0,      ISA_MIPS32,     CPU_MIPS32_4K, },
  { "mips32-4kc",     0,      ISA_MIPS32,     CPU_MIPS32_4K, },
  { "mips32-4km",     0,      ISA_MIPS32,     CPU_MIPS32_4K, },
  { "mips32-4kp",     0,      ISA_MIPS32,     CPU_MIPS32_4K, },

  /* SiByte SB-1 CPU */
  { "SB-1",           0,      ISA_MIPS64,     CPU_SB1, },
  { "sb-1250",        0,      ISA_MIPS64,     CPU_SB1, },
  { "sb1",            0,      ISA_MIPS64,     CPU_SB1, },
  { "sb1250",         0,      ISA_MIPS64,     CPU_SB1, },

  /* End marker.  */
  { NULL, 0, 0, 0, },
};

static const struct mips_cpu_info *
mips_cpu_info_from_name (name)
     const char *name;
{
  int i;

  for (i = 0; mips_cpu_info_table[i].name != NULL; i++)
    if (strcasecmp (name, mips_cpu_info_table[i].name) == 0)
      return (&mips_cpu_info_table[i]);

  return NULL;
}

static const struct mips_cpu_info *
mips_cpu_info_from_isa (isa)
     int isa;
{
  int i;

  for (i = 0; mips_cpu_info_table[i].name != NULL; i++)
    if (mips_cpu_info_table[i].is_isa
      && isa == mips_cpu_info_table[i].isa)
      return (&mips_cpu_info_table[i]);

  return NULL;
}

static const struct mips_cpu_info *
mips_cpu_info_from_cpu (cpu)
     int cpu;
{
  int i;

  for (i = 0; mips_cpu_info_table[i].name != NULL; i++)
    if (!mips_cpu_info_table[i].is_isa
      && cpu == mips_cpu_info_table[i].cpu)
      return (&mips_cpu_info_table[i]);

  return NULL;
}
@


1.1.1.8
log
@import binutils 2.14 (excluding testsuites, .info files, and .po files)
@
text
@d2 1
a2 1
   Copyright 1993, 1994, 1995, 1996, 1997, 1998, 1999, 2000, 2001, 2002, 2003
d29 2
a30 1
#include "safe-ctype.h"
a40 1
#include "dwarf2dbg.h"
a79 2
int mips_flag_mdebug = -1;

a85 1
#define ZERO 0
d106 36
a152 14
/* The ABI to use.  */
enum mips_abi_level
{
  NO_ABI = 0,
  O32_ABI,
  O64_ABI,
  N32_ABI,
  N64_ABI,
  EABI_ABI
};

/* MIPS ABI we are using for this output file.  */
static enum mips_abi_level mips_abi = NO_ABI;

a162 5
  /* Enabled Application Specific Extensions (ASEs).  These are set to -1
     if they have not been initialized.  Changed by `.set <asename>', by
     command line options, and based on the default architecture.  */
  int ase_mips3d;
  int ase_mdmx;
a188 5
  /* Restrict general purpose registers and floating point registers
     to 32 bit.  This is initially determined when -mgp32 or -mfp32
     is passed but can changed if the assembler code uses .set mipsN.  */
  int gp32;
  int fp32;
a190 6
/* True if -mgp32 was passed.  */
static int file_mips_gp32 = -1;

/* True if -mfp32 was passed.  */
static int file_mips_fp32 = -1;

d192 1
a192 1
   that we must set the isa field to ISA_UNKNOWN and the ASE fields to
d197 1
a197 1
  ISA_UNKNOWN, -1, -1, -1, 0, 0, 0, 0, 0, 0, 0, 0
d209 5
a213 22
/* True if -mips16 was passed or implied by arguments passed on the
   command line (e.g., by -march).  */
static int file_ase_mips16;

/* True if -mips3d was passed or implied by arguments passed on the
   command line (e.g., by -march).  */
static int file_ase_mips3d;

/* True if -mdmx was passed or implied by arguments passed on the
   command line (e.g., by -march).  */
static int file_ase_mdmx;

/* The argument of the -march= flag.  The architecture we are assembling.  */
static int mips_arch = CPU_UNKNOWN;
static const char *mips_arch_string;
static const struct mips_cpu_info *mips_arch_info;

/* The argument of the -mtune= flag.  The architecture for which we
   are optimizing.  */
static int mips_tune = CPU_UNKNOWN;
static const char *mips_tune_string;
static const struct mips_cpu_info *mips_tune_info;
d215 5
a219 1
/* True when generating 32-bit code for a 64-bit processor.  */
d222 3
a238 9
/* True if the given ABI requires 32-bit registers.  */
#define ABI_NEEDS_32BIT_REGS(ABI) ((ABI) == O32_ABI)

/* Likewise 64-bit registers.  */
#define ABI_NEEDS_64BIT_REGS(ABI) \
  ((ABI) == N32_ABI 		  \
   || (ABI) == N64_ABI		  \
   || (ABI) == O64_ABI)

d247 3
a249 11
/* Return true if ISA supports 64-bit right rotate (dror et al.)
   instructions.  */
#define ISA_HAS_DROR(ISA) (	\
   0				\
   )

/* Return true if ISA supports 32-bit right rotate (ror et al.)
   instructions.  */
#define ISA_HAS_ROR(ISA) (	\
   (ISA) == ISA_MIPS32R2	\
   )
d251 18
a268 2
#define HAVE_32BIT_GPRS		                   \
    (mips_opts.gp32 || ! ISA_HAS_64BIT_REGS (mips_opts.isa))
d270 1
a270 2
#define HAVE_32BIT_FPRS                            \
    (mips_opts.fp32 || ! ISA_HAS_64BIT_REGS (mips_opts.isa))
d272 1
a272 2
#define HAVE_64BIT_GPRS (! HAVE_32BIT_GPRS)
#define HAVE_64BIT_FPRS (! HAVE_32BIT_FPRS)
d274 1
a274 42
#define HAVE_NEWABI (mips_abi == N32_ABI || mips_abi == N64_ABI)

#define HAVE_64BIT_OBJECTS (mips_abi == N64_ABI)

/* We can only have 64bit addresses if the object file format
   supports it.  */
#define HAVE_32BIT_ADDRESSES                           \
   (HAVE_32BIT_GPRS                                    \
    || ((bfd_arch_bits_per_address (stdoutput) == 32   \
         || ! HAVE_64BIT_OBJECTS)                      \
        && mips_pic != EMBEDDED_PIC))

#define HAVE_64BIT_ADDRESSES (! HAVE_32BIT_ADDRESSES)
#define HAVE_64BIT_ADDRESS_CONSTANTS (HAVE_64BIT_ADDRESSES \
				      || HAVE_64BIT_GPRS)

/* Return true if the given CPU supports the MIPS16 ASE.  */
#define CPU_HAS_MIPS16(cpu)						\
   (strncmp (TARGET_CPU, "mips16", sizeof ("mips16") - 1) == 0		\
    || strncmp (TARGET_CANONICAL, "mips-lsi-elf", sizeof ("mips-lsi-elf") - 1) == 0)

/* Return true if the given CPU supports the MIPS3D ASE.  */
#define CPU_HAS_MIPS3D(cpu)	((cpu) == CPU_SB1      \
				 )

/* Return true if the given CPU supports the MDMX ASE.  */
#define CPU_HAS_MDMX(cpu)	(FALSE                 \
				 )

/* True if CPU has a dror instruction.  */
#define CPU_HAS_DROR(CPU)	((CPU) == CPU_VR5400 || (CPU) == CPU_VR5500)

/* True if CPU has a ror instruction.  */
#define CPU_HAS_ROR(CPU)	CPU_HAS_DROR (CPU)

/* Whether the processor uses hardware interlocks to protect
   reads from the HI and LO registers, and thus does not
   require nops to be inserted.  */

#define hilo_interlocks (mips_arch == CPU_R4010                       \
                         || mips_arch == CPU_VR5500                   \
                         || mips_arch == CPU_SB1                      \
d281 1
a281 3
   || mips_arch == CPU_VR5400  \
   || mips_arch == CPU_VR5500  \
   || mips_arch == CPU_R3900)
d286 1
a286 4
#define cop_interlocks (mips_arch == CPU_R4300                        \
                        || mips_arch == CPU_VR5400                    \
                        || mips_arch == CPU_VR5500                    \
                        || mips_arch == CPU_SB1                       \
d295 18
a312 1
enum mips_pic_level mips_pic;
d314 1
a314 2
/* Warn about all NOPS that the assembler generates.  */
static int warn_nops = 0;
d316 1
a316 1
/* 1 if we should generate 32 bit offsets from the $gp register in
d318 1
a318 1
static int mips_big_got = 0;
d322 1
a322 1
static int mips_trap = 0;
d325 1
a325 1
   by assembling two single width halves into two single width floating
a406 12
/* Similiar for NewABI PIC code, where $gp is callee-saved.  NewABI has some
   more optimizations, it can use a register value instead of a memory-saved
   offset and even an other register than $gp as global pointer.  */
static offsetT mips_cpreturn_offset = -1;
static int mips_cpreturn_register = -1;
static int mips_gp_register = GP;
static int mips_gprel_offset = 0;

/* Whether mips_cprestore_offset has been set in the current function
   (or whether it has already been warned about, if not).  */
static int mips_cprestore_valid = 0;

a410 4
/* Whether mips_frame_reg has been set in the current function
   (or whether it has already been warned about, if not).  */
static int mips_frame_reg_valid = 0;

d444 1
a444 1
static bfd_reloc_code_real_type prev_insn_reloc_type[3];
d447 1
a447 1
static fixS *prev_insn_fixp[3];
a503 5
/* The frag containing the last explicit relocation operator.
   Null if explicit relocations have not been used.  */

static fragS *prev_reloc_op_frag;

a521 9

static int mips_fix_4122_bugs;

/* We don't relax branches by default, since this causes us to expand
   `la .l2 - .l1' if there's a branch between .l1 and .l2, because we
   fail to compute the offset before expanding the macro to the most
   efficient expansion.  */

static int mips_relax_branch;
d594 2
a595 2
#define RELAX_RELOC1(i) ((valueT) (((i) >> 9) & 0x7f) - 64)
#define RELAX_RELOC2(i) ((valueT) (((i) >> 2) & 0x7f) - 64)
a598 80
/* Branch without likely bit.  If label is out of range, we turn:

 	beq reg1, reg2, label
	delay slot

   into

        bne reg1, reg2, 0f
        nop
        j label
     0: delay slot

   with the following opcode replacements:

	beq <-> bne
	blez <-> bgtz
	bltz <-> bgez
	bc1f <-> bc1t

	bltzal <-> bgezal  (with jal label instead of j label)

   Even though keeping the delay slot instruction in the delay slot of
   the branch would be more efficient, it would be very tricky to do
   correctly, because we'd have to introduce a variable frag *after*
   the delay slot instruction, and expand that instead.  Let's do it
   the easy way for now, even if the branch-not-taken case now costs
   one additional instruction.  Out-of-range branches are not supposed
   to be common, anyway.

   Branch likely.  If label is out of range, we turn:

	beql reg1, reg2, label
	delay slot (annulled if branch not taken)

   into

        beql reg1, reg2, 1f
        nop
        beql $0, $0, 2f
        nop
     1: j[al] label
        delay slot (executed only if branch taken)
     2:

   It would be possible to generate a shorter sequence by losing the
   likely bit, generating something like:

	bne reg1, reg2, 0f
	nop
	j[al] label
	delay slot (executed only if branch taken)
     0:

	beql -> bne
	bnel -> beq
	blezl -> bgtz
	bgtzl -> blez
	bltzl -> bgez
	bgezl -> bltz
	bc1fl -> bc1t
	bc1tl -> bc1f

	bltzall -> bgezal  (with jal label instead of j label)
	bgezall -> bltzal  (ditto)


   but it's not clear that it would actually improve performance.  */
#define RELAX_BRANCH_ENCODE(uncond, likely, link, toofar) \
  ((relax_substateT) \
   (0xc0000000 \
    | ((toofar) ? 1 : 0) \
    | ((link) ? 2 : 0) \
    | ((likely) ? 4 : 0) \
    | ((uncond) ? 8 : 0)))
#define RELAX_BRANCH_P(i) (((i) & 0xf0000000) == 0xc0000000)
#define RELAX_BRANCH_UNCOND(i) (((i) & 8) != 0)
#define RELAX_BRANCH_LIKELY(i) (((i) & 4) != 0)
#define RELAX_BRANCH_LINK(i) (((i) & 2) != 0)
#define RELAX_BRANCH_TOOFAR(i) (((i) & 1) != 0)

d626 1
a626 1
#define RELAX_MIPS16_P(i) (((i) & 0xc0000000) == 0x80000000)
a637 11

/* Is the given value a sign-extended 32-bit value?  */
#define IS_SEXT_32BIT_NUM(x)						\
  (((x) &~ (offsetT) 0x7fffffff) == 0					\
   || (((x) &~ (offsetT) 0x7fffffff) == ~ (offsetT) 0x7fffffff))

/* Is the given value a sign-extended 16-bit value?  */
#define IS_SEXT_16BIT_NUM(x)						\
  (((x) &~ (offsetT) 0x7fff) == 0					\
   || (((x) &~ (offsetT) 0x7fff) == ~ (offsetT) 0x7fff))

d650 11
a660 18
static inline bfd_boolean reloc_needs_lo_p
  PARAMS ((bfd_reloc_code_real_type));
static inline bfd_boolean fixup_has_matching_lo_p
  PARAMS ((fixS *));
static int insn_uses_reg
  PARAMS ((struct mips_cl_insn *ip, unsigned int reg,
	   enum mips_regclass class));
static int reg_needs_delay
  PARAMS ((unsigned int));
static void mips16_mark_labels
  PARAMS ((void));
static void append_insn
  PARAMS ((char *place, struct mips_cl_insn * ip, expressionS * p,
	   bfd_reloc_code_real_type *r));
static void mips_no_prev_insn
  PARAMS ((int));
static void mips_emit_delays
  PARAMS ((bfd_boolean));
d662 3
a664 3
static void macro_build
  PARAMS ((char *place, int *counter, expressionS * ep, const char *name,
	   const char *fmt, ...));
d668 12
a679 23
static void mips16_macro_build
  PARAMS ((char *, int *, expressionS *, const char *, const char *, va_list));
static void macro_build_jalr
  PARAMS ((int, expressionS *));
static void macro_build_lui
  PARAMS ((char *place, int *counter, expressionS * ep, int regnum));
static void macro_build_ldst_constoffset
  PARAMS ((char *place, int *counter, expressionS * ep, const char *op,
	   int valreg, int breg));
static void set_at
  PARAMS ((int *counter, int reg, int unsignedp));
static void check_absolute_expr
  PARAMS ((struct mips_cl_insn * ip, expressionS *));
static void load_register
  PARAMS ((int *, int, expressionS *, int));
static void load_address
  PARAMS ((int *, int, expressionS *, int *));
static void move_register
  PARAMS ((int *, int, int));
static void macro
  PARAMS ((struct mips_cl_insn * ip));
static void mips16_macro
  PARAMS ((struct mips_cl_insn * ip));
d681 1
a681 98
static void macro2
  PARAMS ((struct mips_cl_insn * ip));
#endif
static void mips_ip
  PARAMS ((char *str, struct mips_cl_insn * ip));
static void mips16_ip
  PARAMS ((char *str, struct mips_cl_insn * ip));
static void mips16_immed
  PARAMS ((char *, unsigned int, int, offsetT, bfd_boolean, bfd_boolean,
	   bfd_boolean, unsigned long *, bfd_boolean *, unsigned short *));
static bfd_boolean parse_relocation
  PARAMS ((char **, bfd_reloc_code_real_type *));
static size_t my_getSmallExpression
  PARAMS ((expressionS *, bfd_reloc_code_real_type *, char *));
static void my_getExpression
  PARAMS ((expressionS *, char *));
#ifdef OBJ_ELF
static int support_64bit_objects
  PARAMS((void));
#endif
static void mips_set_option_string
  PARAMS ((const char **, const char *));
static symbolS *get_symbol
  PARAMS ((void));
static void mips_align
  PARAMS ((int to, int fill, symbolS *label));
static void s_align
  PARAMS ((int));
static void s_change_sec
  PARAMS ((int));
static void s_change_section
  PARAMS ((int));
static void s_cons
  PARAMS ((int));
static void s_float_cons
  PARAMS ((int));
static void s_mips_globl
  PARAMS ((int));
static void s_option
  PARAMS ((int));
static void s_mipsset
  PARAMS ((int));
static void s_abicalls
  PARAMS ((int));
static void s_cpload
  PARAMS ((int));
static void s_cpsetup
  PARAMS ((int));
static void s_cplocal
  PARAMS ((int));
static void s_cprestore
  PARAMS ((int));
static void s_cpreturn
  PARAMS ((int));
static void s_gpvalue
  PARAMS ((int));
static void s_gpword
  PARAMS ((int));
static void s_gpdword
  PARAMS ((int));
static void s_cpadd
  PARAMS ((int));
static void s_insn
  PARAMS ((int));
static void md_obj_begin
  PARAMS ((void));
static void md_obj_end
  PARAMS ((void));
static long get_number
  PARAMS ((void));
static void s_mips_ent
  PARAMS ((int));
static void s_mips_end
  PARAMS ((int));
static void s_mips_frame
  PARAMS ((int));
static void s_mips_mask
  PARAMS ((int));
static void s_mips_stab
  PARAMS ((int));
static void s_mips_weakext
  PARAMS ((int));
static void s_mips_file
  PARAMS ((int));
static void s_mips_loc
  PARAMS ((int));
static bfd_boolean pic_need_relax
  PARAMS ((symbolS *, asection *));
static int mips16_extended_frag
  PARAMS ((fragS *, asection *, long));
static int relaxed_branch_length (fragS *, asection *, int);
static int validate_mips_insn
  PARAMS ((const struct mips_opcode *));
static void show
  PARAMS ((FILE *, const char *, int *, int *));
#ifdef OBJ_ELF
static int mips_need_elf_addend_fixup
  PARAMS ((fixS *));
d683 36
d731 3
a733 12
static void mips_set_architecture
  PARAMS ((const struct mips_cpu_info *));
static void mips_set_tune
  PARAMS ((const struct mips_cpu_info *));
static bfd_boolean mips_strict_matching_cpu_name_p
  PARAMS ((const char *, const char *));
static bfd_boolean mips_matching_cpu_name_p
  PARAMS ((const char *, const char *));
static const struct mips_cpu_info *mips_parse_cpu
  PARAMS ((const char *, const char *));
static const struct mips_cpu_info *mips_cpu_info_from_isa
  PARAMS ((int));
a762 2
  {"cpsetup", s_cpsetup, 0},
  {"cplocal", s_cplocal, 0},
a763 2
  {"cpreturn", s_cpreturn, 0},
  {"gpvalue", s_gpvalue, 0},
a764 1
  {"gpdword", s_gpdword, 0},
a790 1
  {"section", s_change_section, 0},
d797 1
d799 1
d813 1
a813 1
  {"file", s_mips_file, 0},
d816 1
a816 1
  {"loc", s_mips_loc, 0},
d866 6
a871 4
static bfd_reloc_code_real_type imm_reloc[3]
  = {BFD_RELOC_UNUSED, BFD_RELOC_UNUSED, BFD_RELOC_UNUSED};
static bfd_reloc_code_real_type offset_reloc[3]
  = {BFD_RELOC_UNUSED, BFD_RELOC_UNUSED, BFD_RELOC_UNUSED};
d875 1
a875 1
static bfd_boolean mips16_small, mips16_ext;
d877 2
a878 3
#ifdef OBJ_ELF
/* The pdr segment for per procedure frame/regmask info.  Not used for
   ECOFF debugging.  */
d883 14
a896 1
/* The default target format to use.  */
d898 3
a900 2
const char *
mips_target_format ()
d902 9
a910 35
  switch (OUTPUT_FLAVOR)
    {
    case bfd_target_aout_flavour:
      return target_big_endian ? "a.out-mips-big" : "a.out-mips-little";
    case bfd_target_ecoff_flavour:
      return target_big_endian ? "ecoff-bigmips" : ECOFF_LITTLE_FORMAT;
    case bfd_target_coff_flavour:
      return "pe-mips";
    case bfd_target_elf_flavour:
#ifdef TE_TMIPS
      /* This is traditional mips.  */
      return (target_big_endian
	      ? (HAVE_64BIT_OBJECTS
		 ? "elf64-tradbigmips"
		 : (HAVE_NEWABI
		    ? "elf32-ntradbigmips" : "elf32-tradbigmips"))
	      : (HAVE_64BIT_OBJECTS
		 ? "elf64-tradlittlemips"
		 : (HAVE_NEWABI
		    ? "elf32-ntradlittlemips" : "elf32-tradlittlemips")));
#else
      return (target_big_endian
	      ? (HAVE_64BIT_OBJECTS
		 ? "elf64-bigmips"
		 : (HAVE_NEWABI
		    ? "elf32-nbigmips" : "elf32-bigmips"))
	      : (HAVE_64BIT_OBJECTS
		 ? "elf64-littlemips"
		 : (HAVE_NEWABI
		    ? "elf32-nlittlemips" : "elf32-littlemips")));
#endif
    default:
      abort ();
      return NULL;
    }
d921 2
d924 21
d946 74
a1019 1
  if (! bfd_set_arch_mach (stdoutput, bfd_arch_mips, mips_arch))
d1022 2
a1089 2
  symbol_table_insert (symbol_new ("$ra", reg_section, RA,
				   &zero_address_frag));
a1101 2
  symbol_table_insert (symbol_new ("$zero", reg_section, ZERO,
				   &zero_address_frag));
d1105 1
a1105 15
  /* If we don't add these register names to the symbol table, they
     may end up being added as regular symbols by operand(), and then
     make it to the object file as undefined in case they're not
     regarded as local symbols.  They're local in o32, since `$' is a
     local symbol prefix, but not in n32 or n64.  */
  for (i = 0; i < 8; i++)
    {
      char buf[6];

      sprintf (buf, "$fcc%i", i);
      symbol_table_insert (symbol_new (buf, reg_section, -1,
				       &zero_address_frag));
    }

  mips_no_prev_insn (FALSE);
d1149 1
a1149 1
	if (mips_abi != N64_ABI)
d1153 2
a1154 2
	    bfd_set_section_flags (stdoutput, sec, flags);
	    bfd_set_section_alignment (stdoutput, sec, HAVE_NEWABI ? 3 : 2);
d1165 2
a1166 2
	    bfd_set_section_flags (stdoutput, sec, flags);
	    bfd_set_section_alignment (stdoutput, sec, 3);
d1195 6
a1200 9
#ifdef OBJ_ELF
	else if (OUTPUT_FLAVOR == bfd_target_elf_flavour)
	  {
	    pdr_seg = subseg_new (".pdr", (subsegT) 0);
	    (void) bfd_set_section_flags (stdoutput, pdr_seg,
					  SEC_READONLY | SEC_RELOC
					  | SEC_DEBUGGING);
	    (void) bfd_set_section_alignment (stdoutput, pdr_seg, 2);
	  }
a1222 2
  bfd_reloc_code_real_type unused_reloc[3]
    = {BFD_RELOC_UNUSED, BFD_RELOC_UNUSED, BFD_RELOC_UNUSED};
d1225 2
d1228 1
a1228 6
  imm_reloc[0] = BFD_RELOC_UNUSED;
  imm_reloc[1] = BFD_RELOC_UNUSED;
  imm_reloc[2] = BFD_RELOC_UNUSED;
  offset_reloc[0] = BFD_RELOC_UNUSED;
  offset_reloc[1] = BFD_RELOC_UNUSED;
  offset_reloc[2] = BFD_RELOC_UNUSED;
d1255 2
a1256 1
	append_insn (NULL, &insn, &imm_expr, imm_reloc);
d1258 1
a1258 1
	append_insn (NULL, &insn, &offset_expr, offset_reloc);
d1260 1
a1260 1
	append_insn (NULL, &insn, NULL, unused_reloc);
a1263 25
/* Return true if the given relocation might need a matching %lo().
   Note that R_MIPS_GOT16 relocations only need a matching %lo() when
   applied to local symbols.  */

static inline bfd_boolean
reloc_needs_lo_p (reloc)
     bfd_reloc_code_real_type reloc;
{
  return (reloc == BFD_RELOC_HI16_S
	  || reloc == BFD_RELOC_MIPS_GOT16);
}

/* Return true if the given fixup is followed by a matching R_MIPS_LO16
   relocation.  */

static inline bfd_boolean
fixup_has_matching_lo_p (fixp)
     fixS *fixp;
{
  return (fixp->fx_next != NULL
	  && fixp->fx_next->fx_r_type == BFD_RELOC_LO16
	  && fixp->fx_addsy == fixp->fx_next->fx_addsy
	  && fixp->fx_offset == fixp->fx_next->fx_offset);
}

d1280 2
a1281 2
  /* Don't report on general register ZERO, since it never changes.  */
  if (class == MIPS_GR_REG && reg == ZERO)
d1408 1
a1408 1
append_insn (place, ip, address_expr, reloc_type)
d1412 2
a1413 1
     bfd_reloc_code_real_type *reloc_type;
d1417 1
a1417 1
  fixS *fixp[3];
a1418 1
  bfd_boolean force_new_frag = FALSE;
d1421 2
a1422 1
  mips16_mark_labels ();
d1580 1
a1580 1
	  ++nops;
d1593 1
a1593 1
		 || (mips_tune == CPU_R3900 && (pinfo & INSN_MULT)))
d1606 1
a1606 1
	    ++nops;
d1615 1
a1615 1
		 || (mips_tune == CPU_R3900 && (pinfo & INSN_MULT)))
d1628 1
a1628 1
	    ++nops;
d1654 1
a1654 1
		    || (mips_tune == CPU_R3900 && (pinfo & INSN_MULT))))
d1658 1
a1658 1
		    || (mips_tune == CPU_R3900 && (pinfo & INSN_MULT)))))
a1668 44
      if (mips_fix_4122_bugs && prev_insn.insn_mo->name)
	{
	  /* We're out of bits in pinfo, so we must resort to string
	     ops here.  Shortcuts are selected based on opcodes being
	     limited to the VR4122 instruction set.  */
	  int min_nops = 0;
	  const char *pn = prev_insn.insn_mo->name;
	  const char *tn = ip->insn_mo->name;
	  if (strncmp(pn, "macc", 4) == 0
	      || strncmp(pn, "dmacc", 5) == 0)
	    {
	      /* Errata 21 - [D]DIV[U] after [D]MACC */
	      if (strstr (tn, "div"))
		{
		  min_nops = 1;
		}

	      /* Errata 23 - Continuous DMULT[U]/DMACC instructions */
	      if (pn[0] == 'd' /* dmacc */
		  && (strncmp(tn, "dmult", 5) == 0
		      || strncmp(tn, "dmacc", 5) == 0))
		{
		  min_nops = 1;
		}

	      /* Errata 24 - MT{LO,HI} after [D]MACC */
	      if (strcmp (tn, "mtlo") == 0
		  || strcmp (tn, "mthi") == 0)
		{
		  min_nops = 1;
		}

	    }
	  else if (strncmp(pn, "dmult", 5) == 0
		   && (strncmp(tn, "dmult", 5) == 0
		       || strncmp(tn, "dmacc", 5) == 0))
	    {
	      /* Here is the rest of errata 23.  */
	      min_nops = 1;
	    }
	  if (nops < min_nops)
	    nops = min_nops;
	}

d1715 1
a1715 1
		++val;
d1763 1
a1763 29
  if (place == NULL
      && address_expr
      && *reloc_type == BFD_RELOC_16_PCREL_S2
      && (pinfo & INSN_UNCOND_BRANCH_DELAY || pinfo & INSN_COND_BRANCH_DELAY
	  || pinfo & INSN_COND_BRANCH_LIKELY)
      && mips_relax_branch
      /* Don't try branch relaxation within .set nomacro, or within
	 .set noat if we use $at for PIC computations.  If it turns
	 out that the branch was out-of-range, we'll get an error.  */
      && !mips_opts.warn_about_macros
      && !(mips_opts.noat && mips_pic != NO_PIC)
      && !mips_opts.mips16)
    {
      f = frag_var (rs_machine_dependent,
		    relaxed_branch_length
		    (NULL, NULL,
		     (pinfo & INSN_UNCOND_BRANCH_DELAY) ? -1
		     : (pinfo & INSN_COND_BRANCH_LIKELY) ? 1 : 0), 4,
		    RELAX_BRANCH_ENCODE
		    (pinfo & INSN_UNCOND_BRANCH_DELAY,
		     pinfo & INSN_COND_BRANCH_LIKELY,
		     pinfo & INSN_WRITE_GPR_31,
		     0),
		    address_expr->X_add_symbol,
		    address_expr->X_add_number,
		    0);
      *reloc_type = BFD_RELOC_UNUSED;
    }
  else if (*reloc_type > BFD_RELOC_UNUSED)
d1768 1
a1768 1
		    RELAX_MIPS16_ENCODE (*reloc_type - BFD_RELOC_UNUSED,
d1772 1
a1772 1
					 (*prev_insn_reloc_type
d1774 2
a1775 1
		    make_expr_symbol (address_expr), 0, NULL);
d1781 1
a1781 1
	   && *reloc_type != BFD_RELOC_MIPS16_JMP)
d1798 2
a1799 2
  fixp[0] = fixp[1] = fixp[2] = NULL;
  if (address_expr != NULL && *reloc_type < BFD_RELOC_UNUSED)
d1803 1
a1803 3
	  valueT tmp;

	  switch (*reloc_type)
a1808 20
	    case BFD_RELOC_MIPS_HIGHEST:
	      tmp = (address_expr->X_add_number + 0x800080008000) >> 16;
	      tmp >>= 16;
	      ip->insn_opcode |= (tmp >> 16) & 0xffff;
	      break;

	    case BFD_RELOC_MIPS_HIGHER:
	      tmp = (address_expr->X_add_number + 0x80008000) >> 16;
	      ip->insn_opcode |= (tmp >> 16) & 0xffff;
	      break;

	    case BFD_RELOC_HI16_S:
	      ip->insn_opcode |= ((address_expr->X_add_number + 0x8000)
				  >> 16) & 0xffff;
	      break;

	    case BFD_RELOC_HI16:
	      ip->insn_opcode |= (address_expr->X_add_number >> 16) & 0xffff;
	      break;

a1809 1
	    case BFD_RELOC_MIPS_GOT_DISP:
a1816 3
	      if (address_expr->X_add_number & ~0xfffffff)
		as_bad (_("jump address range overflow (0x%lx)"),
			(unsigned long) address_expr->X_add_number);
a1823 3
	      if (address_expr->X_add_number & ~0xfffffff)
		as_bad (_("jump address range overflow (0x%lx)"),
			(unsigned long) address_expr->X_add_number);
d1840 2
a1841 1
	  /* Don't generate a reloc if we are writing into a variant frag.  */
d1844 5
a1848 27
	      fixp[0] = fix_new_exp (frag_now, f - frag_now->fr_literal, 4,
				     address_expr,
				     *reloc_type == BFD_RELOC_16_PCREL_S2,
				     reloc_type[0]);

	      /* These relocations can have an addend that won't fit in
	         4 octets for 64bit assembly.  */
	      if (HAVE_64BIT_GPRS &&
		  (*reloc_type == BFD_RELOC_16
		   || *reloc_type == BFD_RELOC_32
		   || *reloc_type == BFD_RELOC_MIPS_JMP
		   || *reloc_type == BFD_RELOC_HI16_S
		   || *reloc_type == BFD_RELOC_LO16
		   || *reloc_type == BFD_RELOC_GPREL16
		   || *reloc_type == BFD_RELOC_MIPS_LITERAL
		   || *reloc_type == BFD_RELOC_GPREL32
		   || *reloc_type == BFD_RELOC_64
		   || *reloc_type == BFD_RELOC_CTOR
		   || *reloc_type == BFD_RELOC_MIPS_SUB
		   || *reloc_type == BFD_RELOC_MIPS_HIGHEST
		   || *reloc_type == BFD_RELOC_MIPS_HIGHER
		   || *reloc_type == BFD_RELOC_MIPS_SCN_DISP
		   || *reloc_type == BFD_RELOC_MIPS_REL16
		   || *reloc_type == BFD_RELOC_MIPS_RELGOT))
		fixp[0]->fx_no_overflow = 1;

	      if (reloc_needs_lo_p (*reloc_type))
d1852 4
a1855 11
		  /* Reuse the last entry if it already has a matching %lo.  */
		  hi_fixup = mips_hi_fixup_list;
		  if (hi_fixup == 0
		      || !fixup_has_matching_lo_p (hi_fixup->fixp))
		    {
		      hi_fixup = ((struct mips_hi_fixup *)
				  xmalloc (sizeof (struct mips_hi_fixup)));
		      hi_fixup->next = mips_hi_fixup_list;
		      mips_hi_fixup_list = hi_fixup;
		    }
		  hi_fixup->fixp = fixp[0];
d1857 2
a1858 67
		}

	      if (reloc_type[1] != BFD_RELOC_UNUSED)
		{
		  /* FIXME: This symbol can be one of
		     RSS_UNDEF, RSS_GP, RSS_GP0, RSS_LOC.  */
		  address_expr->X_op = O_absent;
		  address_expr->X_add_symbol = 0;
		  address_expr->X_add_number = 0;

		  fixp[1] = fix_new_exp (frag_now, f - frag_now->fr_literal,
					 4, address_expr, FALSE,
					 reloc_type[1]);

		  /* These relocations can have an addend that won't fit in
		     4 octets for 64bit assembly.  */
		  if (HAVE_64BIT_GPRS &&
		      (*reloc_type == BFD_RELOC_16
		       || *reloc_type == BFD_RELOC_32
		       || *reloc_type == BFD_RELOC_MIPS_JMP
		       || *reloc_type == BFD_RELOC_HI16_S
		       || *reloc_type == BFD_RELOC_LO16
		       || *reloc_type == BFD_RELOC_GPREL16
		       || *reloc_type == BFD_RELOC_MIPS_LITERAL
		       || *reloc_type == BFD_RELOC_GPREL32
		       || *reloc_type == BFD_RELOC_64
		       || *reloc_type == BFD_RELOC_CTOR
		       || *reloc_type == BFD_RELOC_MIPS_SUB
		       || *reloc_type == BFD_RELOC_MIPS_HIGHEST
		       || *reloc_type == BFD_RELOC_MIPS_HIGHER
		       || *reloc_type == BFD_RELOC_MIPS_SCN_DISP
		       || *reloc_type == BFD_RELOC_MIPS_REL16
		       || *reloc_type == BFD_RELOC_MIPS_RELGOT))
		    fixp[1]->fx_no_overflow = 1;

		  if (reloc_type[2] != BFD_RELOC_UNUSED)
		    {
		      address_expr->X_op = O_absent;
		      address_expr->X_add_symbol = 0;
		      address_expr->X_add_number = 0;

		      fixp[2] = fix_new_exp (frag_now,
					     f - frag_now->fr_literal, 4,
					     address_expr, FALSE,
					     reloc_type[2]);

		      /* These relocations can have an addend that won't fit in
			 4 octets for 64bit assembly.  */
		      if (HAVE_64BIT_GPRS &&
			  (*reloc_type == BFD_RELOC_16
			   || *reloc_type == BFD_RELOC_32
			   || *reloc_type == BFD_RELOC_MIPS_JMP
			   || *reloc_type == BFD_RELOC_HI16_S
			   || *reloc_type == BFD_RELOC_LO16
			   || *reloc_type == BFD_RELOC_GPREL16
			   || *reloc_type == BFD_RELOC_MIPS_LITERAL
			   || *reloc_type == BFD_RELOC_GPREL32
			   || *reloc_type == BFD_RELOC_64
			   || *reloc_type == BFD_RELOC_CTOR
			   || *reloc_type == BFD_RELOC_MIPS_SUB
			   || *reloc_type == BFD_RELOC_MIPS_HIGHEST
			   || *reloc_type == BFD_RELOC_MIPS_HIGHER
			   || *reloc_type == BFD_RELOC_MIPS_SCN_DISP
			   || *reloc_type == BFD_RELOC_MIPS_REL16
			   || *reloc_type == BFD_RELOC_MIPS_RELGOT))
			fixp[2]->fx_no_overflow = 1;
		    }
d1865 2
a1866 7
    {
      md_number_to_chars (f, ip->insn_opcode, 4);
#ifdef OBJ_ELF
      dwarf2_emit_insn (4);
#endif
    }
  else if (*reloc_type == BFD_RELOC_MIPS16_JMP)
a1869 3
#ifdef OBJ_ELF
      dwarf2_emit_insn (4);
#endif
a1878 3
#ifdef OBJ_ELF
      dwarf2_emit_insn (ip->use_extend ? 4 : 2);
#endif
d1891 1
a1891 1
	mips_gprmask |= 1 << RA;
d2011 1
a2011 1
		     || (mips_tune == CPU_R3900 && (pinfo & INSN_MULT)))
d2084 1
a2084 1
			      == RA))))
d2093 1
a2093 1
			      == RA))))
d2111 1
a2111 1
		  && insn_uses_reg (&prev_insn, RA, MIPS_GR_REG))
d2150 1
a2150 1
	      || (mips_opts.mips16 && prev_insn_fixp[0])
d2176 1
a2176 33
		  if (prev_insn_fixp[0])
		    {
		      prev_insn_fixp[0]->fx_frag = frag_now;
		      prev_insn_fixp[0]->fx_where = f - frag_now->fr_literal;
		    }
		  if (prev_insn_fixp[1])
		    {
		      prev_insn_fixp[1]->fx_frag = frag_now;
		      prev_insn_fixp[1]->fx_where = f - frag_now->fr_literal;
		    }
		  if (prev_insn_fixp[2])
		    {
		      prev_insn_fixp[2]->fx_frag = frag_now;
		      prev_insn_fixp[2]->fx_where = f - frag_now->fr_literal;
		    }
		  if (prev_insn_fixp[0] && HAVE_NEWABI
		      && prev_insn_frag != frag_now
		      && (prev_insn_fixp[0]->fx_r_type
			  == BFD_RELOC_MIPS_GOT_DISP
			  || (prev_insn_fixp[0]->fx_r_type
			      == BFD_RELOC_MIPS_CALL16)))
		    {
		      /* To avoid confusion in tc_gen_reloc, we must
			 ensure that this does not become a variant
			 frag.  */
		      force_new_frag = TRUE;
		    }
		  if (fixp[0])
		    {
		      fixp[0]->fx_frag = prev_insn_frag;
		      fixp[0]->fx_where = prev_insn_where;
		    }
		  if (fixp[1])
d2178 2
a2179 2
		      fixp[1]->fx_frag = prev_insn_frag;
		      fixp[1]->fx_where = prev_insn_where;
d2181 1
a2181 1
		  if (fixp[2])
d2183 2
a2184 2
		      fixp[2]->fx_frag = prev_insn_frag;
		      fixp[2]->fx_where = prev_insn_where;
d2192 1
a2192 3
		  assert (prev_insn_fixp[0] == NULL);
		  assert (prev_insn_fixp[1] == NULL);
		  assert (prev_insn_fixp[2] == NULL);
d2196 1
a2196 1
		  if (*reloc_type != BFD_RELOC_MIPS16_JMP)
d2198 1
a2198 1
		      assert (*reloc_type == BFD_RELOC_UNUSED);
d2206 1
a2206 11
		  if (fixp[0])
		    {
		      fixp[0]->fx_frag = prev_insn_frag;
		      fixp[0]->fx_where = prev_insn_where;
		    }
		  if (fixp[1])
		    {
		      fixp[1]->fx_frag = prev_insn_frag;
		      fixp[1]->fx_where = prev_insn_where;
		    }
		  if (fixp[2])
d2208 2
a2209 2
		      fixp[2]->fx_frag = prev_insn_frag;
		      fixp[2]->fx_where = prev_insn_where;
d2227 2
a2228 6
	  prev_insn_fixp[0] = NULL;
	  prev_insn_fixp[1] = NULL;
	  prev_insn_fixp[2] = NULL;
	  prev_insn_reloc_type[0] = BFD_RELOC_UNUSED;
	  prev_insn_reloc_type[1] = BFD_RELOC_UNUSED;
	  prev_insn_reloc_type[2] = BFD_RELOC_UNUSED;
d2241 2
a2242 6
	  prev_insn_fixp[0] = NULL;
	  prev_insn_fixp[1] = NULL;
	  prev_insn_fixp[2] = NULL;
	  prev_insn_reloc_type[0] = BFD_RELOC_UNUSED;
	  prev_insn_reloc_type[1] = BFD_RELOC_UNUSED;
	  prev_insn_reloc_type[2] = BFD_RELOC_UNUSED;
d2259 2
a2260 6
	  prev_insn_fixp[0] = fixp[0];
	  prev_insn_fixp[1] = fixp[1];
	  prev_insn_fixp[2] = fixp[2];
	  prev_insn_reloc_type[0] = reloc_type[0];
	  prev_insn_reloc_type[1] = reloc_type[1];
	  prev_insn_reloc_type[2] = reloc_type[2];
d2263 1
a2263 1
				  || *reloc_type > BFD_RELOC_UNUSED);
d2279 1
a2279 3
      prev_insn_reloc_type[0] = reloc_type[0];
      prev_insn_reloc_type[1] = reloc_type[1];
      prev_insn_reloc_type[2] = reloc_type[2];
d2287 5
a2291 4
  /* We must ensure that the frag to which an instruction that was
     moved from a non-variant frag doesn't become a variant frag,
     otherwise tc_gen_reloc may get confused.  */
  if (force_new_frag)
d2319 1
a2319 3
  prev_insn_reloc_type[0] = BFD_RELOC_UNUSED;
  prev_insn_reloc_type[1] = BFD_RELOC_UNUSED;
  prev_insn_reloc_type[2] = BFD_RELOC_UNUSED;
d2332 1
a2332 1
     bfd_boolean insns;
a2385 14
      if (mips_fix_4122_bugs && prev_insn.insn_mo->name)
	{
	  int min_nops = 0;
	  const char *pn = prev_insn.insn_mo->name;
	  if (strncmp(pn, "macc", 4) == 0
	      || strncmp(pn, "dmacc", 5) == 0
	      || strncmp(pn, "dmult", 5) == 0)
	    {
	      min_nops = 1;
	    }
	  if (nops < min_nops)
	    nops = min_nops;
	}

d2421 1
a2421 1
		++val;
d2428 1
a2428 1
  if (insns)
d2459 1
a2459 1
  bfd_reloc_code_real_type r[3];
a2475 12
  /*
   * If the macro is about to expand into a second instruction,
   * and it is in a delay slot, print a warning.
   */
  if (place == NULL
      && *counter == 1
      && mips_opts.noreorder
      && (prev_prev_insn.insn_mo->pinfo
	  & (INSN_UNCOND_BRANCH_DELAY | INSN_COND_BRANCH_DELAY
	     | INSN_COND_BRANCH_LIKELY)) != 0)
    as_warn (_("Macro instruction expanded into multiple instructions in a branch delay slot"));

d2477 1
a2477 1
    ++*counter;		/* bump instruction counter */
d2486 1
a2486 3
  r[0] = BFD_RELOC_UNUSED;
  r[1] = BFD_RELOC_UNUSED;
  r[2] = BFD_RELOC_UNUSED;
a2493 2
      /* It is assumed here that macros will never generate
         MDMX or MIPS-3D instructions.  */
d2496 3
a2498 5
  	  && OPCODE_IS_MEMBER (insn.insn_mo,
  			       (mips_opts.isa
	      		        | (file_ase_mips16 ? INSN_MIPS16 : 0)),
			       mips_arch)
	  && (mips_arch != CPU_R4650 || (insn.insn_mo->pinfo & FP_D) == 0))
d2522 1
a2522 1
	  insn.insn_opcode |= va_arg (args, int) << OP_SH_RT;
a2525 3
	  insn.insn_opcode |= va_arg (args, int) << OP_SH_CODE;
	  continue;

d2528 1
a2528 1
	  insn.insn_opcode |= va_arg (args, int) << OP_SH_FT;
d2533 1
a2533 2
	case 'K':
	  insn.insn_opcode |= va_arg (args, int) << OP_SH_RD;
d2540 2
a2541 2
	    insn.insn_opcode |= tmp << OP_SH_RT;
	    insn.insn_opcode |= tmp << OP_SH_RD;
d2547 1
a2547 1
	  insn.insn_opcode |= va_arg (args, int) << OP_SH_FS;
d2554 1
a2554 1
	  insn.insn_opcode |= va_arg (args, int) << OP_SH_SHAMT;
d2558 1
a2558 1
	  insn.insn_opcode |= va_arg (args, int) << OP_SH_FD;
d2562 1
a2562 1
	  insn.insn_opcode |= va_arg (args, int) << OP_SH_CODE20;
d2566 1
a2566 1
	  insn.insn_opcode |= va_arg (args, int) << OP_SH_CODE19;
d2570 1
a2570 1
	  insn.insn_opcode |= va_arg (args, int) << OP_SH_CODE2;
d2577 1
a2577 1
	  insn.insn_opcode |= va_arg (args, int) << OP_SH_RS;
d2583 8
a2590 13
	  *r = (bfd_reloc_code_real_type) va_arg (args, int);
	  assert (*r == BFD_RELOC_GPREL16
		  || *r == BFD_RELOC_MIPS_LITERAL
		  || *r == BFD_RELOC_MIPS_HIGHER
		  || *r == BFD_RELOC_HI16_S
		  || *r == BFD_RELOC_LO16
		  || *r == BFD_RELOC_MIPS_GOT16
		  || *r == BFD_RELOC_MIPS_CALL16
		  || *r == BFD_RELOC_MIPS_GOT_DISP
		  || *r == BFD_RELOC_MIPS_GOT_PAGE
		  || *r == BFD_RELOC_MIPS_GOT_OFST
		  || *r == BFD_RELOC_MIPS_GOT_LO16
		  || *r == BFD_RELOC_MIPS_CALL_LO16
d2592 1
a2592 1
		      && *r == BFD_RELOC_PCREL_LO16));
d2596 1
a2596 1
	  *r = (bfd_reloc_code_real_type) va_arg (args, int);
d2600 4
a2603 6
			  && (*r == BFD_RELOC_MIPS_HIGHEST
			      || *r == BFD_RELOC_HI16_S
			      || *r == BFD_RELOC_HI16
			      || *r == BFD_RELOC_GPREL16
			      || *r == BFD_RELOC_MIPS_GOT_HI16
			      || *r == BFD_RELOC_MIPS_CALL_HI16))
d2605 7
a2611 1
			  && *r == BFD_RELOC_PCREL_HI16_S)));
d2629 1
a2629 1
	    *r = BFD_RELOC_16_PCREL_S2;
d2634 1
a2634 1
	  *r = BFD_RELOC_MIPS_JMP;
d2647 1
a2647 1
  assert (*r == BFD_RELOC_UNUSED ? ep == NULL : ep != NULL);
d2649 1
a2649 1
  append_insn (place, &insn, ep, r);
d2662 1
a2662 2
  bfd_reloc_code_real_type r[3]
    = {BFD_RELOC_UNUSED, BFD_RELOC_UNUSED, BFD_RELOC_UNUSED};
d2664 1
d2678 1
a2678 1
  insn.use_extend = FALSE;
d2753 1
a2753 1
	      *r = (int) BFD_RELOC_UNUSED + c;
d2756 3
a2758 3
		mips16_immed (NULL, 0, c, ep->X_add_number, FALSE, FALSE,
			      FALSE, &insn.insn_opcode, &insn.use_extend,
			      &insn.extend);
d2760 1
a2760 1
		*r = BFD_RELOC_UNUSED;
d2773 1
a2773 15
  assert (*r == BFD_RELOC_UNUSED ? ep == NULL : ep != NULL);

  append_insn (place, &insn, ep, r);
}

/*
 * Generate a "jalr" instruction with a relocation hint to the called
 * function.  This occurs in NewABI PIC code.
 */
static void
macro_build_jalr (icnt, ep)
     int icnt;
     expressionS *ep;
{
  char *f;
d2775 1
a2775 10
  if (HAVE_NEWABI)
    {
      frag_grow (4);
      f = frag_more (0);
    }
  macro_build ((char *) NULL, &icnt, (expressionS *) NULL, "jalr", "d,s",
	       RA, PIC_CALL_REG);
  if (HAVE_NEWABI)
    fix_new_exp (frag_now, f - frag_now->fr_literal,
		 0, ep, FALSE, BFD_RELOC_MIPS_JALR);
d2790 3
a2792 4
  bfd_reloc_code_real_type r[3]
    = {BFD_RELOC_UNUSED, BFD_RELOC_UNUSED, BFD_RELOC_UNUSED};
  const char *name = "lui";
  const char *fmt = "t,u";
d2807 5
a2811 3
      high_expr.X_add_number = ((high_expr.X_add_number + 0x8000)
				>> 16) & 0xffff;
      *r = BFD_RELOC_UNUSED;
d2818 2
a2819 3
	      || (! HAVE_NEWABI
		  && strcmp (S_GET_NAME (ep->X_add_symbol), "_gp_disp") == 0));
      *r = BFD_RELOC_HI16_S;
d2831 1
a2831 1
    ++*counter;		/* bump instruction counter */
d2839 1
a2839 1
  if (*r == BFD_RELOC_UNUSED)
d2842 1
a2842 28
      append_insn (place, &insn, NULL, r);
    }
  else
    append_insn (place, &insn, &high_expr, r);
}

/* Generate a sequence of instructions to do a load or store from a constant
   offset off of a base register (breg) into/from a target register (treg),
   using AT if necessary.  */
static void
macro_build_ldst_constoffset (place, counter, ep, op, treg, breg)
     char *place;
     int *counter;
     expressionS *ep;
     const char *op;
     int treg, breg;
{
  assert (ep->X_op == O_constant);

  /* Right now, this routine can only handle signed 32-bit contants.  */
  if (! IS_SEXT_32BIT_NUM(ep->X_add_number))
    as_warn (_("operand overflow"));

  if (IS_SEXT_16BIT_NUM(ep->X_add_number))
    {
      /* Signed 16-bit offset will fit in the op.  Easy!  */
      macro_build (place, counter, ep, op, "t,o(b)", treg,
		   (int) BFD_RELOC_LO16, breg);
d2845 1
a2845 21
    {
      /* 32-bit offset, need multiple instructions and AT, like:
	   lui      $tempreg,const_hi       (BFD_RELOC_HI16_S)
	   addu     $tempreg,$tempreg,$breg
           <op>     $treg,const_lo($tempreg)   (BFD_RELOC_LO16)
         to handle the complete offset.  */
      macro_build_lui (place, counter, ep, AT);
      if (place != NULL)
	place += 4;
      macro_build (place, counter, (expressionS *) NULL,
		   HAVE_32BIT_ADDRESSES ? HAVE_NEWABI
		   ? "add" : "addu" : "daddu",
		   "d,v,t", AT, AT, breg);
      if (place != NULL)
	place += 4;
      macro_build (place, counter, ep, op, "t,o(b)", treg,
		   (int) BFD_RELOC_LO16, AT);

      if (mips_opts.noat)
	as_warn (_("Macro used $at after \".set noat\""));
    }
d2866 2
a2867 2
      load_register (counter, AT, &imm_expr, HAVE_64BIT_GPRS);
      macro_build ((char *) NULL, counter, (expressionS *) NULL,
d3001 3
a3003 1
      else if ((IS_SEXT_32BIT_NUM (ep->X_add_number)
d3008 1
a3008 1
	       || ((HAVE_32BIT_GPRS || ! dbl)
d3010 1
a3010 1
	       || (HAVE_32BIT_GPRS
d3027 1
a3027 1
  if (HAVE_32BIT_GPRS)
d3029 1
a3029 2
      as_bad (_("Number (0x%lx) larger than 32 bits"),
	      (unsigned long) ep->X_add_number);
d3064 1
a3064 1
      if (hi32.X_add_number == (offsetT) 0xffffffff)
d3115 1
a3115 1
	      macro_build ((char *) NULL, counter, (expressionS *) NULL,
d3121 1
a3121 1
	  ++shift;
d3170 1
a3170 1
		  macro_build ((char *) NULL, counter, (expressionS *) NULL,
d3175 1
a3175 1
	      macro_build ((char *) NULL, counter, (expressionS *) NULL,
d3194 2
a3195 2
	  macro_build ((char *) NULL, counter, (expressionS *) NULL,
		       "dsll32", "d,w,<", reg, freg, 0);
d3203 1
a3203 1
      if ((freg == 0) && (lo32.X_add_number == (offsetT) 0xffffffff))
d3207 2
a3208 2
	  macro_build ((char *) NULL, counter, (expressionS *) NULL,
		       "dsrl32", "d,w,<", reg, reg, 0);
d3214 2
a3215 2
	  macro_build ((char *) NULL, counter, (expressionS *) NULL, "dsll",
		       "d,w,<", reg, freg, 16);
d3222 2
a3223 2
      macro_build ((char *) NULL, counter, (expressionS *) NULL, "dsll",
		   "d,w,<", reg, reg, 16);
d3234 1
a3234 1
load_address (counter, reg, ep, used_at)
a3237 1
     int *used_at;
d3239 1
a3239 1
  char *p = NULL;
d3250 1
a3250 1
      load_register (counter, reg, ep, HAVE_64BIT_ADDRESSES);
d3257 1
a3257 1
	   addiu	$reg,$gp,<sym>		(BFD_RELOC_GPREL16)
d3261 4
a3264 56
	 If we have an addend, we always use the latter form.

	 With 64bit address space and a usable $at we want
	   lui		$reg,<sym>		(BFD_RELOC_MIPS_HIGHEST)
	   lui		$at,<sym>		(BFD_RELOC_HI16_S)
	   daddiu	$reg,<sym>		(BFD_RELOC_MIPS_HIGHER)
	   daddiu	$at,<sym>		(BFD_RELOC_LO16)
	   dsll32	$reg,0
	   daddu	$reg,$reg,$at

	 If $at is already in use, we use a path which is suboptimal
	 on superscalar processors.
	   lui		$reg,<sym>		(BFD_RELOC_MIPS_HIGHEST)
	   daddiu	$reg,<sym>		(BFD_RELOC_MIPS_HIGHER)
	   dsll		$reg,16
	   daddiu	$reg,<sym>		(BFD_RELOC_HI16_S)
	   dsll		$reg,16
	   daddiu	$reg,<sym>		(BFD_RELOC_LO16)
       */
      if (HAVE_64BIT_ADDRESSES)
	{
	  /* We don't do GP optimization for now because RELAX_ENCODE can't
	     hold the data for such large chunks.  */

	  if (*used_at == 0 && ! mips_opts.noat)
	    {
	      macro_build (p, counter, ep, "lui", "t,u",
			   reg, (int) BFD_RELOC_MIPS_HIGHEST);
	      macro_build (p, counter, ep, "lui", "t,u",
			   AT, (int) BFD_RELOC_HI16_S);
	      macro_build (p, counter, ep, "daddiu", "t,r,j",
			   reg, reg, (int) BFD_RELOC_MIPS_HIGHER);
	      macro_build (p, counter, ep, "daddiu", "t,r,j",
			   AT, AT, (int) BFD_RELOC_LO16);
	      macro_build (p, counter, (expressionS *) NULL, "dsll32",
			   "d,w,<", reg, reg, 0);
	      macro_build (p, counter, (expressionS *) NULL, "daddu",
			   "d,v,t", reg, reg, AT);
	      *used_at = 1;
	    }
	  else
	    {
	      macro_build (p, counter, ep, "lui", "t,u",
			   reg, (int) BFD_RELOC_MIPS_HIGHEST);
	      macro_build (p, counter, ep, "daddiu", "t,r,j",
			   reg, reg, (int) BFD_RELOC_MIPS_HIGHER);
	      macro_build (p, counter, (expressionS *) NULL, "dsll",
			   "d,w,<", reg, reg, 16);
	      macro_build (p, counter, ep, "daddiu", "t,r,j",
			   reg, reg, (int) BFD_RELOC_HI16_S);
	      macro_build (p, counter, (expressionS *) NULL, "dsll",
			   "d,w,<", reg, reg, 16);
	      macro_build (p, counter, ep, "daddiu", "t,r,j",
			   reg, reg, (int) BFD_RELOC_LO16);
	    }
	}
d3267 10
a3276 20
	  if ((valueT) ep->X_add_number <= MAX_GPREL_OFFSET
	      && ! nopic_need_relax (ep->X_add_symbol, 1))
	    {
	      frag_grow (20);
	      macro_build ((char *) NULL, counter, ep,
			   HAVE_32BIT_ADDRESSES ? HAVE_NEWABI
			   ? "addi" : "addiu" : "daddiu", "t,r,j",
			   reg, mips_gp_register, (int) BFD_RELOC_GPREL16);
	      p = frag_var (rs_machine_dependent, 8, 0,
			    RELAX_ENCODE (4, 8, 0, 4, 0,
					  mips_opts.warn_about_macros),
			    ep->X_add_symbol, 0, NULL);
	    }
	  macro_build_lui (p, counter, ep, reg);
	  if (p != NULL)
	    p += 4;
	  macro_build (p, counter, ep,
		       HAVE_32BIT_ADDRESSES ? HAVE_NEWABI
		       ? "addi" : "addiu" : "daddiu",
		       "t,r,j", reg, reg, (int) BFD_RELOC_LO16);
d3278 8
d3297 19
a3315 44
	 If there is a constant, it must be added in after.

	 If we have NewABI, we want
	   lw		$reg,<sym+cst>($gp)	(BFD_RELOC_MIPS_GOT_DISP)
         unless we're referencing a global symbol with a non-zero
         offset, in which case cst must be added separately.  */
      if (HAVE_NEWABI)
	{
	  frag_grow (12);

	  if (ep->X_add_number)
	    {
	      frag_now->tc_frag_data.tc_fr_offset =
		ex.X_add_number = ep->X_add_number;
	      ep->X_add_number = 0;
	      macro_build ((char *) NULL, counter, ep,
			   HAVE_32BIT_ADDRESSES ? "lw" : "ld", "t,o(b)", reg,
			   (int) BFD_RELOC_MIPS_GOT_DISP, mips_gp_register);
	      if (ex.X_add_number < -0x8000 || ex.X_add_number >= 0x8000)
		as_bad (_("PIC code offset overflow (max 16 signed bits)"));
	      ex.X_op = O_constant;
	      macro_build ((char *) NULL, counter, &ex,
			   HAVE_32BIT_ADDRESSES ? "addi" : "daddiu",
			   "t,r,j", reg, reg, (int) BFD_RELOC_LO16);
	      p = frag_var (rs_machine_dependent, 8, 0,
			    RELAX_ENCODE (8, 4, 0, 0, 0,
					  mips_opts.warn_about_macros),
			    ep->X_add_symbol, 0, (char *) NULL);
	      ep->X_add_number = ex.X_add_number;
	    }

	  macro_build (p, counter, ep,
		       HAVE_32BIT_ADDRESSES ? "lw" : "ld", "t,o(b)", reg,
		       (int) BFD_RELOC_MIPS_GOT_DISP, mips_gp_register);

	  if (! p)
	    {
	      /* To avoid confusion in tc_gen_reloc, we must ensure
		 that this does not become a variant frag.  */
	      frag_wane (frag_now);
	      frag_new (0);
	    }
	}
      else
d3317 7
a3323 12
	  ex.X_add_number = ep->X_add_number;
	  ep->X_add_number = 0;
	  frag_grow (20);
	  macro_build ((char *) NULL, counter, ep,
		       HAVE_32BIT_ADDRESSES ? "lw" : "ld", "t,o(b)",
		       reg, (int) BFD_RELOC_MIPS_GOT16, mips_gp_register);
	  macro_build ((char *) NULL, counter, (expressionS *) NULL, "nop", "");
	  p = frag_var (rs_machine_dependent, 4, 0,
			RELAX_ENCODE (0, 4, -8, 0, 0, mips_opts.warn_about_macros),
			ep->X_add_symbol, (offsetT) 0, (char *) NULL);
	  macro_build (p, counter, ep,
		       HAVE_32BIT_ADDRESSES ? "addiu" : "daddiu",
a3324 10

	  if (ex.X_add_number != 0)
	    {
	      if (ex.X_add_number < -0x8000 || ex.X_add_number >= 0x8000)
		as_bad (_("PIC code offset overflow (max 16 signed bits)"));
	      ex.X_op = O_constant;
	      macro_build ((char *) NULL, counter, &ex,
			   HAVE_32BIT_ADDRESSES ? "addiu" : "daddiu",
			   "t,r,j", reg, reg, (int) BFD_RELOC_LO16);
	    }
d3337 1
a3337 2

	 Otherwise, for a reference to a local symbol in old ABI, we want
d3341 48
a3388 21
	 If there is a constant, it must be added in after.

	 In the NewABI, for local symbols, with or without offsets, we want:
	   lw		$reg,<sym>($gp)		(BFD_RELOC_MIPS_GOT_PAGE)
	   addiu	$reg,$reg,<sym>		(BFD_RELOC_MIPS_GOT_OFST)
      */
      if (HAVE_NEWABI)
	{
	  frag_grow (24);

	  frag_now->tc_frag_data.tc_fr_offset =
	    ex.X_add_number = ep->X_add_number;
	  ep->X_add_number = 0;
	  macro_build ((char *) NULL, counter, ep, "lui", "t,u", reg,
		       (int) BFD_RELOC_MIPS_GOT_HI16);
	  macro_build ((char *) NULL, counter, (expressionS *) NULL,
		       HAVE_32BIT_ADDRESSES ? "add" : "daddu", "d,v,t", reg,
		       reg, mips_gp_register);
	  macro_build ((char *) NULL, counter, ep,
		       HAVE_32BIT_ADDRESSES ? "lw" : "ld",
		       "t,o(b)", reg, (int) BFD_RELOC_MIPS_GOT_LO16, reg);
d3391 5
a3395 58
	  else if (ex.X_add_number)
	    {
	      ex.X_op = O_constant;
	      macro_build ((char *) NULL, counter, &ex,
			   HAVE_32BIT_ADDRESSES ? "addi" : "daddiu",
			   "t,r,j", reg, reg, (int) BFD_RELOC_LO16);
	    }

	  ep->X_add_number = ex.X_add_number;
	  p = frag_var (rs_machine_dependent, 8, 0,
			RELAX_ENCODE (ex.X_add_number ? 16 : 12, 8, 0, 4, 0,
				      mips_opts.warn_about_macros),
			ep->X_add_symbol, 0, (char *) NULL);
	  macro_build (p, counter, ep,
		       HAVE_32BIT_ADDRESSES ? "lw" : "ld", "t,o(b)", reg,
		       (int) BFD_RELOC_MIPS_GOT_PAGE, mips_gp_register);
	  macro_build (p + 4, counter, ep,
		       HAVE_32BIT_ADDRESSES ? "addi" : "daddiu", "t,r,j",
		       reg, reg, (int) BFD_RELOC_MIPS_GOT_OFST);
	}
      else
	{
	  ex.X_add_number = ep->X_add_number;
	  ep->X_add_number = 0;
	  if (reg_needs_delay (mips_gp_register))
	    off = 4;
	  else
	    off = 0;
	  frag_grow (32);
	  macro_build ((char *) NULL, counter, ep, "lui", "t,u", reg,
		       (int) BFD_RELOC_MIPS_GOT_HI16);
	  macro_build ((char *) NULL, counter, (expressionS *) NULL,
		       HAVE_32BIT_ADDRESSES ? "addu" : "daddu", "d,v,t", reg,
		       reg, mips_gp_register);
	  macro_build ((char *) NULL, counter, ep,
		       HAVE_32BIT_ADDRESSES ? "lw" : "ld",
		       "t,o(b)", reg, (int) BFD_RELOC_MIPS_GOT_LO16, reg);
	  p = frag_var (rs_machine_dependent, 12 + off, 0,
			RELAX_ENCODE (12, 12 + off, off, 8 + off, 0,
				      mips_opts.warn_about_macros),
			ep->X_add_symbol, 0, NULL);
	  if (off > 0)
	    {
	      /* We need a nop before loading from $gp.  This special
		 check is required because the lui which starts the main
		 instruction stream does not refer to $gp, and so will not
		 insert the nop which may be required.  */
	      macro_build (p, counter, (expressionS *) NULL, "nop", "");
		p += 4;
	    }
	  macro_build (p, counter, ep,
		       HAVE_32BIT_ADDRESSES ? "lw" : "ld", "t,o(b)", reg,
		       (int) BFD_RELOC_MIPS_GOT16, mips_gp_register);
	  p += 4;
	  macro_build (p, counter, (expressionS *) NULL, "nop", "");
	  p += 4;
	  macro_build (p, counter, ep,
		       HAVE_32BIT_ADDRESSES ? "addiu" : "daddiu",
a3396 10

	  if (ex.X_add_number != 0)
	    {
	      if (ex.X_add_number < -0x8000 || ex.X_add_number >= 0x8000)
		as_bad (_("PIC code offset overflow (max 16 signed bits)"));
	      ex.X_op = O_constant;
	      macro_build ((char *) NULL, counter, &ex,
			   HAVE_32BIT_ADDRESSES ? "addiu" : "daddiu",
			   "t,r,j", reg, reg, (int) BFD_RELOC_LO16);
	    }
d3402 2
a3403 2
	   addiu	$reg,$gp,<sym>		(BFD_RELOC_GPREL16)
       */
d3405 4
a3408 2
		   HAVE_32BIT_ADDRESSES ? "addiu" : "daddiu",
		   "t,r,j", reg, mips_gp_register, (int) BFD_RELOC_GPREL16);
a3413 13
/* Move the contents of register SOURCE into register DEST.  */

static void
move_register (counter, dest, source)
     int *counter;
     int dest;
     int source;
{
  macro_build ((char *) NULL, counter, (expressionS *) NULL,
	       HAVE_32BIT_GPRS ? "addu" : "daddu",
	       "d,v,t", dest, source, 0);
}

d3453 1
a3467 24
  /* Umatched fixups should not be put in the same frag as a relaxable
     macro.  For example, suppose we have:

	lui $4,%hi(l1)		# 1
	la $5,l2		# 2
	addiu $4,$4,%lo(l1)	# 3

     If instructions 1 and 2 were put in the same frag, md_frob_file would
     move the fixup for #1 after the fixups for the "unrelaxed" version of
     #2.  This would confuse tc_gen_reloc, which expects the relocations
     for #2 to be the last for that frag.

     Also, if tc_gen_reloc sees certain relocations in a variant frag,
     it assumes that they belong to a relaxable macro.  We mustn't put
     other uses of such relocations into a variant frag.

     To avoid both problems, finish the current frag it contains a
     %reloc() operator.  The macro then goes into a new frag.  */
  if (prev_reloc_op_frag == frag_now)
    {
      frag_wane (frag_now);
      frag_new (0);
    }

d3478 1
a3478 1
      mips_emit_delays (TRUE);
d3485 1
a3485 2
	macro_build ((char *) NULL, &icnt, (expressionS *) NULL, "nop", "",
		     0);
d3487 4
a3490 3
	move_register (&icnt, dreg, sreg);
      macro_build ((char *) NULL, &icnt, (expressionS *) NULL,
		   dbl ? "dsub" : "sub", "d,v,t", dreg, 0, sreg);
d3522 1
a3522 2
      macro_build ((char *) NULL, &icnt, (expressionS *) NULL, s2, "d,v,t",
		   treg, sreg, AT);
d3552 2
a3553 2
	      macro_build ((char *) NULL, &icnt, (expressionS *) NULL, "nor",
			   "d,v,t", treg, treg, 0);
d3558 2
a3559 3
      load_register (&icnt, AT, &imm_expr, HAVE_64BIT_GPRS);
      macro_build ((char *) NULL, &icnt, (expressionS *) NULL, s2, "d,v,t",
		   treg, sreg, AT);
d3582 1
a3582 1
      load_register (&icnt, AT, &imm_expr, HAVE_64BIT_GPRS);
d3592 2
a3593 1
		       likely ? "bgezl" : "bgez", "s,p", sreg);
d3599 2
a3600 1
		       likely ? "blezl" : "blez", "s,p", treg);
d3603 1
a3603 2
      macro_build ((char *) NULL, &icnt, (expressionS *) NULL, "slt", "d,v,t",
		   AT, sreg, treg);
d3605 2
a3606 1
		   likely ? "beql" : "beq", "s,t,p", AT, 0);
d3614 1
a3614 1
      if (HAVE_64BIT_GPRS && sizeof (maxnum) > 4)
d3623 1
a3623 1
	  && (HAVE_32BIT_GPRS || sizeof (maxnum) > 4))
d3629 2
a3630 5
	      if (warn_nops)
		as_warn (_("Branch %s is always false (nop)"),
			 ip->insn_mo->name);
	      macro_build ((char *) NULL, &icnt, (expressionS *) NULL, "nop",
			   "", 0);
d3634 1
a3634 3
	      if (warn_nops)
		as_warn (_("Branch likely %s is always false"),
			 ip->insn_mo->name);
d3642 1
a3642 1
      ++imm_expr.X_add_number;
d3651 2
a3652 1
		       likely ? "bgezl" : "bgez", "s,p", sreg);
d3658 2
a3659 1
		       likely ? "bgtzl" : "bgtz", "s,p", sreg);
d3663 1
a3663 1
      if (HAVE_64BIT_GPRS && sizeof (maxnum) > 4)
d3673 1
a3673 1
	  && (HAVE_32BIT_GPRS || sizeof (maxnum) > 4))
d3683 2
a3684 1
		   likely ? "beql" : "beq", "s,t,p", AT, 0);
d3695 2
a3696 1
		       likely ? "beql" : "beq", "s,t,p", 0, treg);
d3699 2
a3700 2
      macro_build ((char *) NULL, &icnt, (expressionS *) NULL, "sltu",
		   "d,v,t", AT, sreg, treg);
d3702 2
a3703 1
		   likely ? "beql" : "beq", "s,t,p", AT, 0);
d3710 1
a3710 1
	  || (HAVE_32BIT_GPRS
d3712 1
a3712 1
	      && imm_expr.X_add_number == (offsetT) 0xffffffff))
d3716 1
a3716 1
      ++imm_expr.X_add_number;
d3727 2
a3728 1
		       likely ? "bnel" : "bne", "s,t,p", sreg, 0);
d3733 2
a3734 1
		   likely ? "beql" : "beq", "s,t,p", AT, 0);
d3743 2
a3744 1
		       likely ? "bgtzl" : "bgtz", "s,p", sreg);
d3750 2
a3751 1
		       likely ? "bltzl" : "bltz", "s,p", treg);
d3754 1
a3754 2
      macro_build ((char *) NULL, &icnt, (expressionS *) NULL, "slt", "d,v,t",
		   AT, treg, sreg);
d3756 2
a3757 1
		   likely ? "bnel" : "bne", "s,t,p", AT, 0);
d3766 2
a3767 1
		       likely ? "bnel" : "bne", "s,t,p", sreg, 0);
d3772 2
a3773 2
      macro_build ((char *) NULL, &icnt, (expressionS *) NULL, "sltu",
		   "d,v,t", AT, treg, sreg);
d3775 2
a3776 1
		   likely ? "bnel" : "bne", "s,t,p", AT, 0);
d3785 2
a3786 1
		       likely ? "blezl" : "blez", "s,p", sreg);
d3792 2
a3793 1
		       likely ? "bgezl" : "bgez", "s,p", treg);
d3796 1
a3796 2
      macro_build ((char *) NULL, &icnt, (expressionS *) NULL, "slt", "d,v,t",
		   AT, treg, sreg);
d3798 2
a3799 1
		   likely ? "beql" : "beq", "s,t,p", AT, 0);
d3806 1
a3806 1
      if (HAVE_64BIT_GPRS && sizeof (maxnum) > 4)
d3815 1
a3815 1
	  && (HAVE_32BIT_GPRS || sizeof (maxnum) > 4))
d3819 1
a3819 1
      ++imm_expr.X_add_number;
d3828 2
a3829 1
		       likely ? "bltzl" : "bltz", "s,p", sreg);
d3835 2
a3836 1
		       likely ? "blezl" : "blez", "s,p", sreg);
d3841 2
a3842 1
		   likely ? "bnel" : "bne", "s,t,p", AT, 0);
d3851 2
a3852 1
		       likely ? "beql" : "beq", "s,t,p", sreg, 0);
d3857 2
a3858 2
      macro_build ((char *) NULL, &icnt, (expressionS *) NULL, "sltu",
		   "d,v,t", AT, treg, sreg);
d3860 2
a3861 1
		   likely ? "beql" : "beq", "s,t,p", AT, 0);
d3868 1
a3868 1
	  || (HAVE_32BIT_GPRS
d3870 1
a3870 1
	      && imm_expr.X_add_number == (offsetT) 0xffffffff))
d3874 1
a3874 1
      ++imm_expr.X_add_number;
d3891 2
a3892 1
		   likely ? "bnel" : "bne", "s,t,p", AT, 0);
d3901 2
a3902 1
		       likely ? "bltzl" : "bltz", "s,p", sreg);
d3908 2
a3909 1
		       likely ? "bgtzl" : "bgtz", "s,p", treg);
d3912 1
a3912 2
      macro_build ((char *) NULL, &icnt, (expressionS *) NULL, "slt", "d,v,t",
		   AT, sreg, treg);
d3914 2
a3915 1
		   likely ? "bnel" : "bne", "s,t,p", AT, 0);
d3926 2
a3927 1
		       likely ? "bnel" : "bne", "s,t,p", 0, treg);
d3930 1
a3930 2
      macro_build ((char *) NULL, &icnt, (expressionS *) NULL, "sltu",
		   "d,v,t", AT, sreg,
d3933 2
a3934 1
		   likely ? "bnel" : "bne", "s,t,p", AT, 0);
d3951 1
a3951 2
	    macro_build ((char *) NULL, &icnt, (expressionS *) NULL, "teq",
			 "s,t,q", 0, 0, 7);
d3953 1
a3953 2
	    macro_build ((char *) NULL, &icnt, (expressionS *) NULL, "break",
			 "c", 7);
d3957 1
a3957 1
      mips_emit_delays (TRUE);
d3962 4
a3965 4
	  macro_build ((char *) NULL, &icnt, (expressionS *) NULL, "teq",
		       "s,t,q", treg, 0, 7);
	  macro_build ((char *) NULL, &icnt, (expressionS *) NULL,
		       dbl ? "ddiv" : "div", "z,s,t", sreg, treg);
d3971 4
a3974 4
	  macro_build ((char *) NULL, &icnt, (expressionS *) NULL,
		       dbl ? "ddiv" : "div", "z,s,t", sreg, treg);
	  macro_build ((char *) NULL, &icnt, (expressionS *) NULL, "break",
		       "c", 7);
d3987 2
a3988 2
	  macro_build ((char *) NULL, &icnt, (expressionS *) NULL, "dsll32",
		       "d,w,<", AT, AT, 31);
d3998 1
a3998 2
	  macro_build ((char *) NULL, &icnt, (expressionS *) NULL, "teq",
		       "s,t,q", sreg, AT, 6);
d4007 1
a4007 2
	  macro_build ((char *) NULL, &icnt, (expressionS *) NULL, "nop", "",
		       0);
d4013 1
a4013 2
	  macro_build ((char *) NULL, &icnt, (expressionS *) NULL, "break",
		       "c", 6);
d4015 1
a4015 1
      macro_build ((char *) NULL, &icnt, (expressionS *) NULL, s, "d", dreg);
d4058 1
a4058 2
	    macro_build ((char *) NULL, &icnt, (expressionS *) NULL, "teq",
			 "s,t,q", 0, 0, 7);
d4060 1
a4060 2
	    macro_build ((char *) NULL, &icnt, (expressionS *) NULL, "break",
			 "c", 7);
d4066 2
a4067 1
	    move_register (&icnt, dreg, sreg);
d4069 1
a4069 1
	    move_register (&icnt, dreg, 0);
d4078 6
a4083 2
	      macro_build ((char *) NULL, &icnt, (expressionS *) NULL,
			   dbl ? "dneg" : "neg", "d,w", dreg, sreg);
d4086 1
a4086 1
	    move_register (&icnt, dreg, 0);
d4091 2
a4092 3
      macro_build ((char *) NULL, &icnt, (expressionS *) NULL, s, "z,s,t",
		   sreg, AT);
      macro_build ((char *) NULL, &icnt, (expressionS *) NULL, s2, "d", dreg);
d4111 1
a4111 1
      mips_emit_delays (TRUE);
d4116 2
a4117 4
	  macro_build ((char *) NULL, &icnt, (expressionS *) NULL, "teq",
		       "s,t,q", treg, 0, 7);
	  macro_build ((char *) NULL, &icnt, (expressionS *) NULL, s, "z,s,t",
		       sreg, treg);
d4126 1
a4126 2
	  macro_build ((char *) NULL, &icnt, (expressionS *) NULL, s, "z,s,t",
		       sreg, treg);
d4131 1
a4131 2
	  macro_build ((char *) NULL, &icnt, (expressionS *) NULL, "break",
		       "c", 7);
d4133 1
a4133 1
      macro_build ((char *) NULL, &icnt, (expressionS *) NULL, s2, "d", dreg);
a4141 28
      if (dbl && HAVE_32BIT_GPRS)
	as_warn (_("dla used to load 32-bit register"));

      if (! dbl && HAVE_64BIT_OBJECTS)
	as_warn (_("la used to load 64-bit address"));

      if (offset_expr.X_op == O_constant
	  && offset_expr.X_add_number >= -0x8000
	  && offset_expr.X_add_number < 0x8000)
	{
	  macro_build ((char *) NULL, &icnt, &offset_expr,
		       (dbl || HAVE_64BIT_ADDRESSES) ? "daddiu" :
		       HAVE_NEWABI ? "addi" : "addiu",
		       "t,r,j", treg, sreg, (int) BFD_RELOC_LO16);
	  return;
	}

      if (treg == breg)
	{
	  tempreg = AT;
	  used_at = 1;
	}
      else
	{
	  tempreg = treg;
	  used_at = 0;
	}

d4144 1
a4144 2
	   la	$treg,foo-bar
	   la	$treg,foo-bar($breg)
d4159 1
d4163 2
a4164 15
	  if (breg == 0)
	    {
	      tempreg = treg;
	      used_at = 0;
	      macro_build ((char *) NULL, &icnt, &offset_expr, "lui", "t,u",
			   tempreg, (int) BFD_RELOC_PCREL_HI16_S);
	    }
	  else
	    {
	      macro_build ((char *) NULL, &icnt, &offset_expr, "lui", "t,u",
			   tempreg, (int) BFD_RELOC_PCREL_HI16_S);
	      macro_build ((char *) NULL, &icnt, (expressionS *) NULL,
			   (dbl || HAVE_64BIT_ADDRESSES) ? "daddu" : "addu",
			   "d,v,t", tempreg, tempreg, breg);
	    }
d4166 5
a4170 5
		       (dbl || HAVE_64BIT_ADDRESSES) ? "daddiu" : "addiu",
		       "t,r,j", treg, tempreg, (int) BFD_RELOC_PCREL_LO16);
	  if (! used_at)
	    return;
	  break;
d4180 11
d4192 1
a4192 4
	load_register (&icnt, tempreg, &offset_expr,
		       ((mips_pic == EMBEDDED_PIC || mips_pic == NO_PIC)
			? (dbl || HAVE_64BIT_ADDRESSES)
			: HAVE_64BIT_ADDRESSES));
d4195 2
a4196 2
	  /* If this is a reference to a GP relative symbol, we want
	       addiu	$tempreg,$gp,<sym>	(BFD_RELOC_GPREL16)
d4201 4
a4204 57
	     so we may as well always use the latter form.

	    With 64bit address space and a usable $at we want
	      lui	$tempreg,<sym>		(BFD_RELOC_MIPS_HIGHEST)
	      lui	$at,<sym>		(BFD_RELOC_HI16_S)
	      daddiu	$tempreg,<sym>		(BFD_RELOC_MIPS_HIGHER)
	      daddiu	$at,<sym>		(BFD_RELOC_LO16)
	      dsll32	$tempreg,0
	      daddu	$tempreg,$tempreg,$at

	    If $at is already in use, we use a path which is suboptimal
	    on superscalar processors.
	      lui	$tempreg,<sym>		(BFD_RELOC_MIPS_HIGHEST)
	      daddiu	$tempreg,<sym>		(BFD_RELOC_MIPS_HIGHER)
	      dsll	$tempreg,16
	      daddiu	$tempreg,<sym>		(BFD_RELOC_HI16_S)
	      dsll	$tempreg,16
	      daddiu	$tempreg,<sym>		(BFD_RELOC_LO16)
	  */
	  char *p = NULL;
	  if (HAVE_64BIT_ADDRESSES)
	    {
	      /* We don't do GP optimization for now because RELAX_ENCODE can't
		 hold the data for such large chunks.  */

	      if (used_at == 0 && ! mips_opts.noat)
		{
		  macro_build (p, &icnt, &offset_expr, "lui", "t,u",
			       tempreg, (int) BFD_RELOC_MIPS_HIGHEST);
		  macro_build (p, &icnt, &offset_expr, "lui", "t,u",
			       AT, (int) BFD_RELOC_HI16_S);
		  macro_build (p, &icnt, &offset_expr, "daddiu", "t,r,j",
			       tempreg, tempreg, (int) BFD_RELOC_MIPS_HIGHER);
		  macro_build (p, &icnt, &offset_expr, "daddiu", "t,r,j",
			       AT, AT, (int) BFD_RELOC_LO16);
		  macro_build (p, &icnt, (expressionS *) NULL, "dsll32",
			       "d,w,<", tempreg, tempreg, 0);
		  macro_build (p, &icnt, (expressionS *) NULL, "daddu",
			       "d,v,t", tempreg, tempreg, AT);
		  used_at = 1;
		}
	      else
		{
		  macro_build (p, &icnt, &offset_expr, "lui", "t,u",
			       tempreg, (int) BFD_RELOC_MIPS_HIGHEST);
		  macro_build (p, &icnt, &offset_expr, "daddiu", "t,r,j",
			       tempreg, tempreg, (int) BFD_RELOC_MIPS_HIGHER);
		  macro_build (p, &icnt, (expressionS *) NULL, "dsll", "d,w,<",
			       tempreg, tempreg, 16);
		  macro_build (p, &icnt, &offset_expr, "daddiu", "t,r,j",
			       tempreg, tempreg, (int) BFD_RELOC_HI16_S);
		  macro_build (p, &icnt, (expressionS *) NULL, "dsll", "d,w,<",
			       tempreg, tempreg, 16);
		  macro_build (p, &icnt, &offset_expr, "daddiu", "t,r,j",
			       tempreg, tempreg, (int) BFD_RELOC_LO16);
		}
	    }
d4207 11
a4217 19
	      if ((valueT) offset_expr.X_add_number <= MAX_GPREL_OFFSET
		  && ! nopic_need_relax (offset_expr.X_add_symbol, 1))
		{
		  frag_grow (20);
		  macro_build ((char *) NULL, &icnt, &offset_expr,
			       HAVE_NEWABI ? "addi" : "addiu",
			       "t,r,j", tempreg, mips_gp_register,
			       (int) BFD_RELOC_GPREL16);
		  p = frag_var (rs_machine_dependent, 8, 0,
				RELAX_ENCODE (4, 8, 0, 4, 0,
					      mips_opts.warn_about_macros),
				offset_expr.X_add_symbol, 0, NULL);
		}
	      macro_build_lui (p, &icnt, &offset_expr, tempreg);
	      if (p != NULL)
		p += 4;
	      macro_build (p, &icnt, &offset_expr,
			   HAVE_NEWABI ? "addi" : "addiu",
			   "t,r,j", tempreg, tempreg, (int) BFD_RELOC_LO16);
d4219 8
d4228 1
a4228 1
      else if (mips_pic == SVR4_PIC && ! mips_big_got && ! HAVE_NEWABI)
d4259 1
a4259 3
	     addiu instruction.
	   */

d4266 2
a4267 2
		       HAVE_32BIT_ADDRESSES ? "lw" : "ld",
		       "t,o(b)", tempreg, lw_reloc_type, mips_gp_register);
a4270 1
	      char *p;
d4288 2
a4289 1
			    offset_expr.X_add_symbol, 0, NULL);
d4296 3
a4298 1
			   HAVE_32BIT_ADDRESSES ? "addiu" : "daddiu",
d4310 3
a4312 1
			   HAVE_32BIT_ADDRESSES ? "addiu" : "daddiu",
d4314 4
a4317 3
	      frag_var (rs_machine_dependent, 0, 0,
			RELAX_ENCODE (0, 0, -12, -4, 0, 0),
			offset_expr.X_add_symbol, 0, NULL);
d4337 3
a4339 1
			       HAVE_32BIT_ADDRESSES ? "addu" : "daddu",
d4350 1
a4350 1
	      macro_build_lui (NULL, &icnt, &expr1, AT);
d4354 3
a4356 1
			   HAVE_32BIT_ADDRESSES ? "addiu" : "daddiu",
d4359 3
a4361 1
			   HAVE_32BIT_ADDRESSES ? "addu" : "daddu",
d4363 4
a4366 3
	      frag_var (rs_machine_dependent, 0, 0,
			RELAX_ENCODE (0, 0, -16 + off1, -8, 0, 0),
			offset_expr.X_add_symbol, 0, NULL);
d4370 1
a4370 1
      else if (mips_pic == SVR4_PIC && ! mips_big_got && HAVE_NEWABI)
d4372 9
a4380 8
	  char *p = NULL;
	  int lw_reloc_type = (int) BFD_RELOC_MIPS_GOT_DISP;
	  int adj = 0;

	  /* If this is a reference to an external, and there is no
	     constant, or local symbol (*), with or without a
	     constant, we want
	       lw	$tempreg,<sym>($gp)	(BFD_RELOC_MIPS_GOT_DISP)
d4382 7
a4388 1
	       lw	$tempreg,<sym>($gp)	(BFD_RELOC_MIPS_CALL16)
d4392 4
a4395 1
	       lw	$tempreg,<sym>($gp)	(BFD_RELOC_MIPS_GOT_DISP)
d4397 4
d4404 3
a4406 149
	       lw	$tempreg,<sym>($gp)	(BFD_RELOC_MIPS_GOT_DISP)
	       lui	$at,<hiconstant>
	       addiu	$at,$at,<loconstant>
	       addu	$tempreg,$tempreg,$at

	     (*) Other assemblers seem to prefer GOT_PAGE/GOT_OFST for
	     local symbols, even though it introduces an additional
	     instruction.  */

	  frag_grow (28);
	  if (offset_expr.X_add_number == 0 && tempreg == PIC_CALL_REG)
	    lw_reloc_type = (int) BFD_RELOC_MIPS_CALL16;
	  if (offset_expr.X_add_number)
	    {
	      frag_now->tc_frag_data.tc_fr_offset =
		expr1.X_add_number = offset_expr.X_add_number;
	      offset_expr.X_add_number = 0;

	      macro_build ((char *) NULL, &icnt, &offset_expr,
			   HAVE_32BIT_ADDRESSES ? "lw" : "ld",
			   "t,o(b)", tempreg, lw_reloc_type,
			   mips_gp_register);

	      if (expr1.X_add_number >= -0x8000
		  && expr1.X_add_number < 0x8000)
		{
		  macro_build ((char *) NULL, &icnt, &expr1,
			       HAVE_32BIT_ADDRESSES ? "addi" : "daddiu",
			       "t,r,j", tempreg, tempreg,
			       (int) BFD_RELOC_LO16);
		  p = frag_var (rs_machine_dependent, 4, 0,
				RELAX_ENCODE (8, 4, 0, 0, 0, 0),
				offset_expr.X_add_symbol, 0, NULL);
		}
	      else if (IS_SEXT_32BIT_NUM (expr1.X_add_number))
		{
		  int dreg;

		  /* If we are going to add in a base register, and the
		     target register and the base register are the same,
		     then we are using AT as a temporary register.  Since
		     we want to load the constant into AT, we add our
		     current AT (from the global offset table) and the
		     register into the register now, and pretend we were
		     not using a base register.  */
		  if (breg != treg)
		    dreg = tempreg;
		  else
		    {
		      assert (tempreg == AT);
		      macro_build ((char *) NULL, &icnt, (expressionS *) NULL,
				   HAVE_32BIT_ADDRESSES ? "add" : "daddu",
				   "d,v,t", treg, AT, breg);
		      dreg = treg;
		      adj = 4;
		    }

		  macro_build_lui ((char *) NULL, &icnt, &expr1, AT);
		  macro_build ((char *) NULL, &icnt, &expr1,
			       HAVE_32BIT_ADDRESSES ? "addi" : "daddiu",
			       "t,r,j", AT, AT, (int) BFD_RELOC_LO16);
		  macro_build ((char *) NULL, &icnt, (expressionS *) NULL,
			       HAVE_32BIT_ADDRESSES ? "add" : "daddu",
			       "d,v,t", dreg, dreg, AT);

		  p = frag_var (rs_machine_dependent, 4 + adj, 0,
				RELAX_ENCODE (16 + adj, 4 + adj,
					      0, 0, 0, 0),
				offset_expr.X_add_symbol, 0, NULL);

		  used_at = 1;
		}
	      else
		as_bad (_("PIC code offset overflow (max 32 signed bits)"));

	      offset_expr.X_add_number = expr1.X_add_number;

	      macro_build (p, &icnt, &offset_expr,
			   HAVE_32BIT_ADDRESSES ? "lw" : "ld",
			   "t,o(b)", tempreg, (int) BFD_RELOC_MIPS_GOT_DISP,
			   mips_gp_register);
	      if (adj)
		{
		  macro_build (p + 4, &icnt, (expressionS *) NULL,
			       HAVE_32BIT_ADDRESSES ? "add" : "daddu",
			       "d,v,t", treg, tempreg, breg);
		  breg = 0;
		  tempreg = treg;
		}
	    }
	  else
	    {
	      macro_build ((char *) NULL, &icnt, &offset_expr,
			   HAVE_32BIT_ADDRESSES ? "lw" : "ld",
			   "t,o(b)", tempreg, lw_reloc_type,
			   mips_gp_register);
	      if (lw_reloc_type != BFD_RELOC_MIPS_GOT_DISP)
		p = frag_var (rs_machine_dependent, 0, 0,
			      RELAX_ENCODE (0, 0, -4, 0, 0, 0),
			      offset_expr.X_add_symbol, 0, NULL);
	    }

	  if (! p)
	    {
	      /* To avoid confusion in tc_gen_reloc, we must ensure
		 that this does not become a variant frag.  */
	      frag_wane (frag_now);
	      frag_new (0);
	    }
	}
      else if (mips_pic == SVR4_PIC && ! HAVE_NEWABI)
	{
	  int gpdel;
	  char *p;
	  int lui_reloc_type = (int) BFD_RELOC_MIPS_GOT_HI16;
	  int lw_reloc_type = (int) BFD_RELOC_MIPS_GOT_LO16;
	  int local_reloc_type = (int) BFD_RELOC_MIPS_GOT16;

	  /* This is the large GOT case.  If this is a reference to an
	     external symbol, and there is no constant, we want
	       lui	$tempreg,<sym>		(BFD_RELOC_MIPS_GOT_HI16)
	       addu	$tempreg,$tempreg,$gp
	       lw	$tempreg,<sym>($tempreg) (BFD_RELOC_MIPS_GOT_LO16)
	     or if tempreg is PIC_CALL_REG
	       lui	$tempreg,<sym>		(BFD_RELOC_MIPS_CALL_HI16)
	       addu	$tempreg,$tempreg,$gp
	       lw	$tempreg,<sym>($tempreg) (BFD_RELOC_MIPS_CALL_LO16)
	     For a local symbol, we want
	       lw	$tempreg,<sym>($gp)	(BFD_RELOC_MIPS_GOT16)
	       nop
	       addiu	$tempreg,$tempreg,<sym>	(BFD_RELOC_LO16)

	     If we have a small constant, and this is a reference to
	     an external symbol, we want
	       lui	$tempreg,<sym>		(BFD_RELOC_MIPS_GOT_HI16)
	       addu	$tempreg,$tempreg,$gp
	       lw	$tempreg,<sym>($tempreg) (BFD_RELOC_MIPS_GOT_LO16)
	       nop
	       addiu	$tempreg,$tempreg,<constant>
	     For a local symbol, we want
	       lw	$tempreg,<sym>($gp)	(BFD_RELOC_MIPS_GOT16)
	       nop
	       addiu	$tempreg,$tempreg,<constant> (BFD_RELOC_LO16)

	     If we have a large constant, and this is a reference to
	     an external symbol, we want
	       lui	$tempreg,<sym>		(BFD_RELOC_MIPS_GOT_HI16)
	       addu	$tempreg,$tempreg,$gp
	       lw	$tempreg,<sym>($tempreg) (BFD_RELOC_MIPS_GOT_LO16)
d4415 1
a4415 2
	  */

d4419 1
a4419 1
	  if (reg_needs_delay (mips_gp_register))
d4431 4
a4434 2
		       HAVE_32BIT_ADDRESSES ? "addu" : "daddu",
		       "d,v,t", tempreg, tempreg, mips_gp_register);
d4436 1
a4436 1
		       HAVE_32BIT_ADDRESSES ? "lw" : "ld",
d4460 2
a4461 1
			    offset_expr.X_add_symbol, 0, NULL);
d4469 3
a4471 1
			   HAVE_32BIT_ADDRESSES ? "addiu" : "daddiu",
d4479 2
a4480 1
			    offset_expr.X_add_symbol, 0, NULL);
d4504 3
a4506 1
			       HAVE_32BIT_ADDRESSES ? "addu" : "daddu",
d4516 1
a4516 1
	      macro_build_lui (NULL, &icnt, &expr1, AT);
d4520 3
a4522 1
			   HAVE_32BIT_ADDRESSES ? "addiu" : "daddiu",
d4525 3
a4527 1
			   HAVE_32BIT_ADDRESSES ? "addu" : "daddu",
d4536 2
a4537 1
			    offset_expr.X_add_symbol, 0, NULL);
d4545 1
a4545 1
		 the first instruction on the main stream does not.  */
a4548 1

d4550 2
a4551 4
		       HAVE_32BIT_ADDRESSES ? "lw" : "ld",
		       "t,o(b)", tempreg,
		       local_reloc_type,
		       mips_gp_register);
d4559 3
a4561 1
			   HAVE_32BIT_ADDRESSES ? "addiu" : "daddiu",
d4564 4
a4567 4
		 register, the external symbol case ended with a load,
		 so if the symbol turns out to not be external, and
		 the next instruction uses tempreg, an unnecessary nop
		 will be inserted.  */
d4574 1
a4574 1
		     external symbol case.  */
d4579 3
a4581 1
			       HAVE_32BIT_ADDRESSES ? "addu" : "daddu",
d4586 1
a4586 1
		     it in in both cases.  */
d4593 3
a4595 1
			   HAVE_32BIT_ADDRESSES ? "addiu" : "daddiu",
d4599 3
a4601 1
			   HAVE_32BIT_ADDRESSES ? "addu" : "daddu",
a4605 140
      else if (mips_pic == SVR4_PIC && HAVE_NEWABI)
	{
	  char *p = NULL;
	  int lui_reloc_type = (int) BFD_RELOC_MIPS_GOT_HI16;
	  int lw_reloc_type = (int) BFD_RELOC_MIPS_GOT_LO16;
	  int adj = 0;

	  /* This is the large GOT case.  If this is a reference to an
	     external symbol, and there is no constant, we want
	       lui	$tempreg,<sym>		(BFD_RELOC_MIPS_GOT_HI16)
	       add	$tempreg,$tempreg,$gp
	       lw	$tempreg,<sym>($tempreg) (BFD_RELOC_MIPS_GOT_LO16)
	     or if tempreg is PIC_CALL_REG
	       lui	$tempreg,<sym>		(BFD_RELOC_MIPS_CALL_HI16)
	       add	$tempreg,$tempreg,$gp
	       lw	$tempreg,<sym>($tempreg) (BFD_RELOC_MIPS_CALL_LO16)

	     If we have a small constant, and this is a reference to
	     an external symbol, we want
	       lui	$tempreg,<sym>		(BFD_RELOC_MIPS_GOT_HI16)
	       add	$tempreg,$tempreg,$gp
	       lw	$tempreg,<sym>($tempreg) (BFD_RELOC_MIPS_GOT_LO16)
	       addi	$tempreg,$tempreg,<constant>

	     If we have a large constant, and this is a reference to
	     an external symbol, we want
	       lui	$tempreg,<sym>		(BFD_RELOC_MIPS_GOT_HI16)
	       addu	$tempreg,$tempreg,$gp
	       lw	$tempreg,<sym>($tempreg) (BFD_RELOC_MIPS_GOT_LO16)
	       lui	$at,<hiconstant>
	       addi	$at,$at,<loconstant>
	       add	$tempreg,$tempreg,$at

	     If we have NewABI, and we know it's a local symbol, we want
	       lw	$reg,<sym>($gp)		(BFD_RELOC_MIPS_GOT_PAGE)
	       addiu	$reg,$reg,<sym>		(BFD_RELOC_MIPS_GOT_OFST)
	     otherwise we have to resort to GOT_HI16/GOT_LO16.  */

	  frag_grow (40);

	  frag_now->tc_frag_data.tc_fr_offset =
	    expr1.X_add_number = offset_expr.X_add_number;
	  offset_expr.X_add_number = 0;

	  if (expr1.X_add_number == 0 && tempreg == PIC_CALL_REG)
	    {
	      lui_reloc_type = (int) BFD_RELOC_MIPS_CALL_HI16;
	      lw_reloc_type = (int) BFD_RELOC_MIPS_CALL_LO16;
	    }
	  macro_build ((char *) NULL, &icnt, &offset_expr, "lui", "t,u",
		       tempreg, lui_reloc_type);
	  macro_build ((char *) NULL, &icnt, (expressionS *) NULL,
		       HAVE_32BIT_ADDRESSES ? "add" : "daddu",
		       "d,v,t", tempreg, tempreg, mips_gp_register);
	  macro_build ((char *) NULL, &icnt, &offset_expr,
		       HAVE_32BIT_ADDRESSES ? "lw" : "ld",
		       "t,o(b)", tempreg, lw_reloc_type, tempreg);

	  if (expr1.X_add_number == 0)
	    {
	      p = frag_var (rs_machine_dependent, 8, 0,
			    RELAX_ENCODE (12, 8, 0, 4, 0,
					  mips_opts.warn_about_macros),
			    offset_expr.X_add_symbol, 0, NULL);
	    }
	  else if (expr1.X_add_number >= -0x8000
		   && expr1.X_add_number < 0x8000)
	    {
	      macro_build ((char *) NULL, &icnt, &expr1,
			   HAVE_32BIT_ADDRESSES ? "addi" : "daddiu",
			   "t,r,j", tempreg, tempreg,
			   (int) BFD_RELOC_LO16);
	      p = frag_var (rs_machine_dependent, 8, 0,
			    RELAX_ENCODE (16, 8, 0, 4, 0,
					  mips_opts.warn_about_macros),
			    offset_expr.X_add_symbol, 0, NULL);
	    }
	  else if (IS_SEXT_32BIT_NUM (expr1.X_add_number))
	    {
	      int dreg;

	      /* If we are going to add in a base register, and the
		 target register and the base register are the same,
		 then we are using AT as a temporary register.  Since
		 we want to load the constant into AT, we add our
		 current AT (from the global offset table) and the
		 register into the register now, and pretend we were
		 not using a base register.  */
	      if (breg != treg)
		dreg = tempreg;
	      else
		{
		  assert (tempreg == AT);
		  macro_build ((char *) NULL, &icnt, (expressionS *) NULL,
			       HAVE_32BIT_ADDRESSES ? "add" : "daddu",
			       "d,v,t", treg, AT, breg);
		  dreg = treg;
		  adj = 4;
		}

	      /* Set mips_optimize around the lui instruction to avoid
		 inserting an unnecessary nop after the lw.  */
	      macro_build_lui ((char *) NULL, &icnt, &expr1, AT);
	      macro_build ((char *) NULL, &icnt, &expr1,
			   HAVE_32BIT_ADDRESSES ? "addi" : "daddiu",
			   "t,r,j", AT, AT, (int) BFD_RELOC_LO16);
	      macro_build ((char *) NULL, &icnt, (expressionS *) NULL,
			   HAVE_32BIT_ADDRESSES ? "add" : "daddu",
			   "d,v,t", dreg, dreg, AT);

	      p = frag_var (rs_machine_dependent, 8 + adj, 0,
			    RELAX_ENCODE (24 + adj, 8 + adj,
					  0, 4, 0,
					  (breg == 0
					   ? mips_opts.warn_about_macros
					   : 0)),
			    offset_expr.X_add_symbol, 0, NULL);

	      used_at = 1;
	    }
	  else
	    as_bad (_("PIC code offset overflow (max 32 signed bits)"));

	  offset_expr.X_add_number = expr1.X_add_number;
	  macro_build (p, &icnt, &offset_expr,
		       HAVE_32BIT_ADDRESSES ? "lw" : "ld", "t,o(b)",
		       tempreg,
		       (int) BFD_RELOC_MIPS_GOT_PAGE, mips_gp_register);
	  macro_build (p + 4, &icnt, &offset_expr,
		       HAVE_32BIT_ADDRESSES ? "addi" : "daddiu", "t,r,j",
		       tempreg, tempreg, (int) BFD_RELOC_MIPS_GOT_OFST);
	  if (adj)
	    {
	      macro_build (p + 8, &icnt, (expressionS *) NULL,
			   HAVE_32BIT_ADDRESSES ? "add" : "daddu",
			   "d,v,t", treg, tempreg, breg);
	      breg = 0;
	      tempreg = treg;
	    }
	}
d4609 1
a4609 1
	       addiu	$tempreg,$gp,<sym>	(BFD_RELOC_GPREL16)
d4612 4
a4615 2
		       HAVE_32BIT_ADDRESSES ? "addiu" : "daddiu", "t,r,j",
		       tempreg, mips_gp_register, (int) BFD_RELOC_GPREL16);
d4621 5
a4625 12
	{
	  char *s;

	  if (mips_pic == EMBEDDED_PIC || mips_pic == NO_PIC)
	    s = (dbl || HAVE_64BIT_ADDRESSES) ? "daddu" :
	      HAVE_NEWABI ? "add" : "addu";
	  else
	    s = HAVE_64BIT_ADDRESSES ? "daddu" : HAVE_NEWABI ? "add" : "addu";

	  macro_build ((char *) NULL, &icnt, (expressionS *) NULL, s,
		       "d,v,t", treg, tempreg, breg);
	}
d4660 3
a4662 1
	  if (! HAVE_NEWABI)
d4664 6
a4669 21
	      if (mips_cprestore_offset < 0)
		as_warn (_("No .cprestore pseudo-op used in PIC code"));
	      else
		{
		  if (! mips_frame_reg_valid)
		    {
		      as_warn (_("No .frame pseudo-op used in PIC code"));
		      /* Quiet this warning.  */
		      mips_frame_reg_valid = 1;
		    }
		  if (! mips_cprestore_valid)
		    {
		      as_warn (_("No .cprestore pseudo-op used in PIC code"));
		      /* Quiet this warning.  */
		      mips_cprestore_valid = 1;
		    }
		  expr1.X_add_number = mips_cprestore_offset;
  		  macro_build_ldst_constoffset ((char *) NULL, &icnt, &expr1,
					        HAVE_32BIT_ADDRESSES ? "lw" : "ld",
					        mips_gp_register, mips_frame_reg);
		}
a4681 2
	  char *p;

d4686 1
a4686 1
	       jalr	$ra,$25
d4695 1
a4695 1
	       jalr	$ra,$25
d4702 1
a4702 1
	       jalr	$ra,$25
d4704 16
a4719 48
	       lw $gp,cprestore($sp)

	     For NewABI, we use the same CALL16 or CALL_HI16/CALL_LO16
	     sequences above, minus nops, unless the symbol is local,
	     which enables us to use GOT_PAGE/GOT_OFST (big got) or
	     GOT_DISP.  */
	  if (HAVE_NEWABI)
	    {
	      if (! mips_big_got)
		{
		  frag_grow (4);
		  macro_build ((char *) NULL, &icnt, &offset_expr,
			       HAVE_32BIT_ADDRESSES ? "lw" : "ld",
			       "t,o(b)", PIC_CALL_REG,
			       (int) BFD_RELOC_MIPS_CALL16,
			       mips_gp_register);
		  frag_var (rs_machine_dependent, 0, 0,
			    RELAX_ENCODE (0, 0, -4, 0, 0, 0),
			    offset_expr.X_add_symbol, 0, NULL);
		}
	      else
		{
		  frag_grow (20);
		  macro_build ((char *) NULL, &icnt, &offset_expr, "lui",
			       "t,u", PIC_CALL_REG,
			       (int) BFD_RELOC_MIPS_CALL_HI16);
		  macro_build ((char *) NULL, &icnt, (expressionS *) NULL,
			       HAVE_32BIT_ADDRESSES ? "add" : "daddu",
			       "d,v,t", PIC_CALL_REG, PIC_CALL_REG,
			       mips_gp_register);
		  macro_build ((char *) NULL, &icnt, &offset_expr,
			       HAVE_32BIT_ADDRESSES ? "lw" : "ld",
			       "t,o(b)", PIC_CALL_REG,
			       (int) BFD_RELOC_MIPS_CALL_LO16, PIC_CALL_REG);
		  p = frag_var (rs_machine_dependent, 8, 0,
				RELAX_ENCODE (12, 8, 0, 4, 0, 0),
				offset_expr.X_add_symbol, 0, NULL);
		  macro_build (p, &icnt, &offset_expr,
			       HAVE_32BIT_ADDRESSES ? "lw" : "ld", "t,o(b)",
			       PIC_CALL_REG, (int) BFD_RELOC_MIPS_GOT_PAGE,
			       mips_gp_register);
		  macro_build (p + 4, &icnt, &offset_expr,
			       HAVE_32BIT_ADDRESSES ? "addi" : "daddiu",
			       "t,r,j", PIC_CALL_REG, PIC_CALL_REG,
			       (int) BFD_RELOC_MIPS_GOT_OFST);
		}

	      macro_build_jalr (icnt, &offset_expr);
d4723 4
a4726 13
	      frag_grow (40);
	      if (! mips_big_got)
		{
		  macro_build ((char *) NULL, &icnt, &offset_expr,
			       HAVE_32BIT_ADDRESSES ? "lw" : "ld",
			       "t,o(b)", PIC_CALL_REG,
			       (int) BFD_RELOC_MIPS_CALL16, mips_gp_register);
		  macro_build ((char *) NULL, &icnt, (expressionS *) NULL,
			       "nop", "");
		  p = frag_var (rs_machine_dependent, 4, 0,
				RELAX_ENCODE (0, 4, -8, 0, 0, 0),
				offset_expr.X_add_symbol, 0, NULL);
		}
d4728 22
a4750 33
		  int gpdel;

		  if (reg_needs_delay (mips_gp_register))
		    gpdel = 4;
		  else
		    gpdel = 0;
		  macro_build ((char *) NULL, &icnt, &offset_expr, "lui",
			       "t,u", PIC_CALL_REG,
			       (int) BFD_RELOC_MIPS_CALL_HI16);
		  macro_build ((char *) NULL, &icnt, (expressionS *) NULL,
			       HAVE_32BIT_ADDRESSES ? "addu" : "daddu",
			       "d,v,t", PIC_CALL_REG, PIC_CALL_REG,
			       mips_gp_register);
		  macro_build ((char *) NULL, &icnt, &offset_expr,
			       HAVE_32BIT_ADDRESSES ? "lw" : "ld",
			       "t,o(b)", PIC_CALL_REG,
			       (int) BFD_RELOC_MIPS_CALL_LO16, PIC_CALL_REG);
		  macro_build ((char *) NULL, &icnt, (expressionS *) NULL,
			       "nop", "");
		  p = frag_var (rs_machine_dependent, 12 + gpdel, 0,
				RELAX_ENCODE (16, 12 + gpdel, gpdel,
					      8 + gpdel, 0, 0),
				offset_expr.X_add_symbol, 0, NULL);
		  if (gpdel > 0)
		    {
		      macro_build (p, &icnt, (expressionS *) NULL, "nop", "");
		      p += 4;
		    }
		  macro_build (p, &icnt, &offset_expr,
			       HAVE_32BIT_ADDRESSES ? "lw" : "ld",
			       "t,o(b)", PIC_CALL_REG,
			       (int) BFD_RELOC_MIPS_GOT16, mips_gp_register);
		  p += 4;
d4755 31
a4785 29
			   HAVE_32BIT_ADDRESSES ? "addiu" : "daddiu",
			   "t,r,j", PIC_CALL_REG, PIC_CALL_REG,
			   (int) BFD_RELOC_LO16);
	      macro_build_jalr (icnt, &offset_expr);

	      if (mips_cprestore_offset < 0)
		as_warn (_("No .cprestore pseudo-op used in PIC code"));
	      else
		{
		  if (! mips_frame_reg_valid)
		    {
		      as_warn (_("No .frame pseudo-op used in PIC code"));
		      /* Quiet this warning.  */
		      mips_frame_reg_valid = 1;
		    }
		  if (! mips_cprestore_valid)
		    {
		      as_warn (_("No .cprestore pseudo-op used in PIC code"));
		      /* Quiet this warning.  */
		      mips_cprestore_valid = 1;
		    }
		  if (mips_opts.noreorder)
		    macro_build ((char *) NULL, &icnt, (expressionS *) NULL,
				 "nop", "");
		  expr1.X_add_number = mips_cprestore_offset;
  		  macro_build_ldst_constoffset ((char *) NULL, &icnt, &expr1,
					        HAVE_32BIT_ADDRESSES ? "lw" : "ld",
					        mips_gp_register, mips_frame_reg);
		}
d4844 1
a4844 1
      if (mips_arch == CPU_R4650)
d4933 1
a4933 1
      if (mips_arch == CPU_R4650)
a4973 40
      /* For embedded PIC, we allow loads where the offset is calculated
         by subtracting a symbol in the current segment from an unknown
         symbol, relative to a base register, e.g.:
		<op>	$treg, <sym>-<localsym>($breg)
	 This is used by the compiler for switch statements.  */
      if (mips_pic == EMBEDDED_PIC
          && offset_expr.X_op == O_subtract
          && (symbol_constant_p (offset_expr.X_op_symbol)
              ? S_GET_SEGMENT (offset_expr.X_op_symbol) == now_seg
              : (symbol_equated_p (offset_expr.X_op_symbol)
                 && (S_GET_SEGMENT
                     (symbol_get_value_expression (offset_expr.X_op_symbol)
                      ->X_add_symbol)
                     == now_seg)))
          && breg != 0
          && (offset_expr.X_add_number == 0
              || OUTPUT_FLAVOR == bfd_target_elf_flavour))
        {
          /* For this case, we output the instructions:
                lui     $tempreg,<sym>          (BFD_RELOC_PCREL_HI16_S)
                addiu   $tempreg,$tempreg,$breg
                <op>    $treg,<sym>($tempreg)   (BFD_RELOC_PCREL_LO16)
             If the relocation would fit entirely in 16 bits, it would be
             nice to emit:
                <op>    $treg,<sym>($breg)      (BFD_RELOC_PCREL_LO16)
             instead, but that seems quite difficult.  */
          macro_build ((char *) NULL, &icnt, &offset_expr, "lui", "t,u",
                       tempreg, (int) BFD_RELOC_PCREL_HI16_S);
          macro_build ((char *) NULL, &icnt, (expressionS *) NULL,
                       ((bfd_arch_bits_per_address (stdoutput) == 32
                         || ! ISA_HAS_64BIT_REGS (mips_opts.isa))
                        ? HAVE_NEWABI ? "add" : "addu" : "daddu"),
                       "d,v,t", tempreg, tempreg, breg);
          macro_build ((char *) NULL, &icnt, &offset_expr, s, fmt, treg,
                       (int) BFD_RELOC_PCREL_LO16, tempreg);
          if (! used_at)
            return;
          break;
        }

a4985 2
	  char *p;

d4988 1
a4988 1
	       <op>	$treg,<sym>($gp)	(BFD_RELOC_GPREL16)
d4998 1
a4998 1
	       <op>	$treg,<sym>($tempreg)	(BFD_RELOC_GPREL16)
d5003 1
a5003 116
	     With a constant we always use the latter case.

	     With 64bit address space and no base register and $at usable,
	     we want
	       lui	$tempreg,<sym>		(BFD_RELOC_MIPS_HIGHEST)
	       lui	$at,<sym>		(BFD_RELOC_HI16_S)
	       daddiu	$tempreg,<sym>		(BFD_RELOC_MIPS_HIGHER)
	       dsll32	$tempreg,0
	       daddu	$tempreg,$at
	       <op>	$treg,<sym>($tempreg)	(BFD_RELOC_LO16)
	     If we have a base register, we want
	       lui	$tempreg,<sym>		(BFD_RELOC_MIPS_HIGHEST)
	       lui	$at,<sym>		(BFD_RELOC_HI16_S)
	       daddiu	$tempreg,<sym>		(BFD_RELOC_MIPS_HIGHER)
	       daddu	$at,$breg
	       dsll32	$tempreg,0
	       daddu	$tempreg,$at
	       <op>	$treg,<sym>($tempreg)	(BFD_RELOC_LO16)

	     Without $at we can't generate the optimal path for superscalar
	     processors here since this would require two temporary registers.
	       lui	$tempreg,<sym>		(BFD_RELOC_MIPS_HIGHEST)
	       daddiu	$tempreg,<sym>		(BFD_RELOC_MIPS_HIGHER)
	       dsll	$tempreg,16
	       daddiu	$tempreg,<sym>		(BFD_RELOC_HI16_S)
	       dsll	$tempreg,16
	       <op>	$treg,<sym>($tempreg)	(BFD_RELOC_LO16)
	     If we have a base register, we want
	       lui	$tempreg,<sym>		(BFD_RELOC_MIPS_HIGHEST)
	       daddiu	$tempreg,<sym>		(BFD_RELOC_MIPS_HIGHER)
	       dsll	$tempreg,16
	       daddiu	$tempreg,<sym>		(BFD_RELOC_HI16_S)
	       dsll	$tempreg,16
	       daddu	$tempreg,$tempreg,$breg
	       <op>	$treg,<sym>($tempreg)	(BFD_RELOC_LO16)

	     If we have 64-bit addresses, as an optimization, for
	     addresses which are 32-bit constants (e.g. kseg0/kseg1
	     addresses) we fall back to the 32-bit address generation
	     mechanism since it is more efficient.  Note that due to
	     the signed offset used by memory operations, the 32-bit
	     range is shifted down by 32768 here.  This code should
	     probably attempt to generate 64-bit constants more
	     efficiently in general.

	     As an extension for architectures with 64-bit registers,
	     we don't truncate 64-bit addresses given as literal
	     constants down to 32 bits, to support existing practice
	     in the mips64 Linux (the kernel), that compiles source
	     files with -mabi=64, assembling them as o32 or n32 (with
	     -Wa,-32 or -Wa,-n32).  This is not beautiful, but since
	     the whole kernel is loaded into a memory region that is
	     addressible with sign-extended 32-bit addresses, it is
	     wasteful to compute the upper 32 bits of every
	     non-literal address, that takes more space and time.
	     Some day this should probably be implemented as an
	     assembler option, such that the kernel doesn't have to
	     use such ugly hacks, even though it will still have to
	     end up converting the binary to ELF32 for a number of
	     platforms whose boot loaders don't support ELF64
	     binaries.  */
	  if ((offset_expr.X_op != O_constant && HAVE_64BIT_ADDRESSES)
	      || (offset_expr.X_op == O_constant
		  && !IS_SEXT_32BIT_NUM (offset_expr.X_add_number + 0x8000)
		  && HAVE_64BIT_ADDRESS_CONSTANTS))
	    {
	      p = NULL;

	      /* We don't do GP optimization for now because RELAX_ENCODE can't
		 hold the data for such large chunks.  */

	      if (used_at == 0 && ! mips_opts.noat)
		{
		  macro_build (p, &icnt, &offset_expr, "lui", "t,u",
			       tempreg, (int) BFD_RELOC_MIPS_HIGHEST);
		  macro_build (p, &icnt, &offset_expr, "lui", "t,u",
			       AT, (int) BFD_RELOC_HI16_S);
		  macro_build (p, &icnt, &offset_expr, "daddiu", "t,r,j",
			       tempreg, tempreg, (int) BFD_RELOC_MIPS_HIGHER);
		  if (breg != 0)
		    macro_build (p, &icnt, (expressionS *) NULL, "daddu",
				 "d,v,t", AT, AT, breg);
		  macro_build (p, &icnt, (expressionS *) NULL, "dsll32",
			       "d,w,<", tempreg, tempreg, 0);
		  macro_build (p, &icnt, (expressionS *) NULL, "daddu",
			       "d,v,t", tempreg, tempreg, AT);
		  macro_build (p, &icnt, &offset_expr, s,
			       fmt, treg, (int) BFD_RELOC_LO16, tempreg);
		  used_at = 1;
		}
	      else
		{
		  macro_build (p, &icnt, &offset_expr, "lui", "t,u",
			       tempreg, (int) BFD_RELOC_MIPS_HIGHEST);
		  macro_build (p, &icnt, &offset_expr, "daddiu", "t,r,j",
			       tempreg, tempreg, (int) BFD_RELOC_MIPS_HIGHER);
		  macro_build (p, &icnt, (expressionS *) NULL, "dsll",
			       "d,w,<", tempreg, tempreg, 16);
		  macro_build (p, &icnt, &offset_expr, "daddiu", "t,r,j",
			       tempreg, tempreg, (int) BFD_RELOC_HI16_S);
		  macro_build (p, &icnt, (expressionS *) NULL, "dsll",
			       "d,w,<", tempreg, tempreg, 16);
		  if (breg != 0)
		    macro_build (p, &icnt, (expressionS *) NULL, "daddu",
				 "d,v,t", tempreg, tempreg, breg);
		  macro_build (p, &icnt, &offset_expr, s,
			       fmt, treg, (int) BFD_RELOC_LO16, tempreg);
		}

	      return;
	    }
	  else if (offset_expr.X_op == O_constant
		   && !HAVE_64BIT_ADDRESS_CONSTANTS
		   && !IS_SEXT_32BIT_NUM (offset_expr.X_add_number))
	    as_bad (_("load/store address overflow (max 32 bits)"));

d5006 1
a5006 1
	      if ((valueT) offset_expr.X_add_number > MAX_GPREL_OFFSET
d5013 1
a5013 2
			       treg, (int) BFD_RELOC_GPREL16,
			       mips_gp_register);
d5019 2
a5020 1
				offset_expr.X_add_symbol, 0, NULL);
d5031 1
a5031 1
	      if ((valueT) offset_expr.X_add_number > MAX_GPREL_OFFSET
d5038 4
a5041 3
			       HAVE_32BIT_ADDRESSES ? HAVE_NEWABI
			       ? "add" : "addu" : "daddu",
			       "d,v,t", tempreg, breg, mips_gp_register);
d5043 1
a5043 1
			       treg, (int) BFD_RELOC_GPREL16, tempreg);
d5046 2
a5047 1
				offset_expr.X_add_symbol, 0, NULL);
d5053 3
a5055 2
			   HAVE_32BIT_ADDRESSES ? HAVE_NEWABI
			   ? "add" : "addu" : "daddu",
a5064 3
	  char *p;
	  int lw_reloc_type = (int) BFD_RELOC_MIPS_GOT16;

a5073 5

	     For NewABI, we want
	       lw	$tempreg,<sym>($gp)	(BFD_RELOC_MIPS_GOT_PAGE)
	       <op>	$treg,<sym>($tempreg)   (BFD_RELOC_MIPS_GOT_OFST)

a5080 18
	  if (HAVE_NEWABI)
	    {
	      macro_build ((char *) NULL, &icnt, &offset_expr,
			   HAVE_32BIT_ADDRESSES ? "lw" : "ld",
			   "t,o(b)", tempreg, BFD_RELOC_MIPS_GOT_PAGE,
			   mips_gp_register);
	      if (breg != 0)
		macro_build ((char *) NULL, &icnt, (expressionS *) NULL,
			     HAVE_32BIT_ADDRESSES ? "add" : "daddu",
			     "d,v,t", tempreg, tempreg, breg);
	      macro_build ((char *) NULL, &icnt, &offset_expr, s, fmt, treg,
			   (int) BFD_RELOC_MIPS_GOT_OFST, tempreg);

	      if (! used_at)
		return;

	      break;
	    }
d5088 4
a5091 2
		       HAVE_32BIT_ADDRESSES ? "lw" : "ld", "t,o(b)", tempreg,
		       (int) lw_reloc_type, mips_gp_register);
d5095 2
a5096 1
			offset_expr.X_add_symbol, 0, NULL);
d5098 3
a5100 1
		       HAVE_32BIT_ADDRESSES ? "addiu" : "daddiu",
d5104 3
a5106 1
			 HAVE_32BIT_ADDRESSES ? "addu" : "daddu",
d5111 1
a5111 1
      else if (mips_pic == SVR4_PIC && ! HAVE_NEWABI)
a5113 1
	  char *p;
d5137 1
a5137 1
	  if (reg_needs_delay (mips_gp_register))
d5145 4
a5148 2
		       HAVE_32BIT_ADDRESSES ? "addu" : "daddu",
		       "d,v,t", tempreg, tempreg, mips_gp_register);
d5150 3
a5152 1
		       HAVE_32BIT_ADDRESSES ? "lw" : "ld",
d5157 1
a5157 1
			offset_expr.X_add_symbol, 0, NULL);
d5164 4
a5167 3
		       HAVE_32BIT_ADDRESSES ? "lw" : "ld",
		       "t,o(b)", tempreg, (int) BFD_RELOC_MIPS_GOT16,
		       mips_gp_register);
d5172 3
a5174 1
		       HAVE_32BIT_ADDRESSES ? "addiu" : "daddiu",
d5178 3
a5180 1
			 HAVE_32BIT_ADDRESSES ? "addu" : "daddu",
a5184 54
      else if (mips_pic == SVR4_PIC && HAVE_NEWABI)
	{
	  char *p;
	  int bregsz = breg != 0 ? 4 : 0;

	  /* If this is a reference to an external symbol, we want
	       lui	$tempreg,<sym>		(BFD_RELOC_MIPS_GOT_HI16)
	       add	$tempreg,$tempreg,$gp
	       lw	$tempreg,<sym>($tempreg) (BFD_RELOC_MIPS_GOT_LO16)
	       <op>	$treg,<ofst>($tempreg)
	     Otherwise, for local symbols, we want:
	       lw	$tempreg,<sym>($gp)	(BFD_RELOC_MIPS_GOT_PAGE)
	       <op>	$treg,<sym>($tempreg)   (BFD_RELOC_MIPS_GOT_OFST)  */
	  assert (offset_expr.X_op == O_symbol);
	  frag_now->tc_frag_data.tc_fr_offset =
	    expr1.X_add_number = offset_expr.X_add_number;
	  offset_expr.X_add_number = 0;
	  if (expr1.X_add_number < -0x8000
	      || expr1.X_add_number >= 0x8000)
	    as_bad (_("PIC code offset overflow (max 16 signed bits)"));
	  frag_grow (36);
	  macro_build ((char *) NULL, &icnt, &offset_expr, "lui", "t,u",
		       tempreg, (int) BFD_RELOC_MIPS_GOT_HI16);
	  macro_build ((char *) NULL, &icnt, (expressionS *) NULL,
		       HAVE_32BIT_ADDRESSES ? "add" : "daddu",
		       "d,v,t", tempreg, tempreg, mips_gp_register);
	  macro_build ((char *) NULL, &icnt, &offset_expr,
		       HAVE_32BIT_ADDRESSES ? "lw" : "ld",
		       "t,o(b)", tempreg, (int) BFD_RELOC_MIPS_GOT_LO16,
		       tempreg);
	  if (breg != 0)
	    macro_build ((char *) NULL, &icnt, (expressionS *) NULL,
			 HAVE_32BIT_ADDRESSES ? "add" : "daddu",
			 "d,v,t", tempreg, tempreg, breg);
	  macro_build ((char *) NULL, &icnt, &expr1, s, fmt, treg,
		       (int) BFD_RELOC_LO16, tempreg);

	  offset_expr.X_add_number = expr1.X_add_number;
	  p = frag_var (rs_machine_dependent, 12 + bregsz, 0,
			RELAX_ENCODE (16 + bregsz, 8 + bregsz,
				      0, 4 + bregsz, 0, 0),
			offset_expr.X_add_symbol, 0, NULL);
	  macro_build (p, &icnt, &offset_expr,
		       HAVE_32BIT_ADDRESSES ? "lw" : "ld",
		       "t,o(b)", tempreg,
		       (int) BFD_RELOC_MIPS_GOT_PAGE,
		       mips_gp_register);
	  if (breg != 0)
	    macro_build (p + 4, &icnt, (expressionS *) NULL,
			 HAVE_32BIT_ADDRESSES ? "add" : "daddu",
			 "d,v,t", tempreg, tempreg, breg);
	  macro_build (p + 4 + bregsz, &icnt, &offset_expr, s, fmt, treg,
		       (int) BFD_RELOC_MIPS_GOT_OFST, tempreg);
	}
d5188 1
a5188 1
	       <op>	$treg,<sym>($gp)	(BFD_RELOC_GPREL16)
d5191 1
a5191 1
	       <op>	$treg,<sym>($tempreg)	(BFD_RELOC_GPREL16)
d5197 1
a5197 1
			   treg, (int) BFD_RELOC_GPREL16, mips_gp_register);
d5203 4
a5206 2
			   HAVE_32BIT_ADDRESSES ? "addu" : "daddu",
			   "d,v,t", tempreg, breg, mips_gp_register);
d5208 1
a5208 1
			   treg, (int) BFD_RELOC_GPREL16, tempreg);
d5244 1
a5244 1
		       treg, (int) BFD_RELOC_MIPS_LITERAL, mips_gp_register);
d5249 4
a5252 4
      /* Check if we have a constant in IMM_EXPR.  If the GPRs are 64 bits
         wide, IMM_EXPR is the entire value.  Otherwise IMM_EXPR is the high
         order 32 bits of the value and the low order 32 bits are either
         zero or in OFFSET_EXPR.  */
d5255 1
a5255 1
	  if (HAVE_64BIT_GPRS)
d5277 2
a5278 1
		    move_register (&icnt, lreg, 0);
d5293 2
a5294 1
	  macro_build_lui (NULL, &icnt, &offset_expr, AT);
d5299 4
a5302 3
		       HAVE_32BIT_ADDRESSES ? "lw" : "ld",
		       "t,o(b)", AT, (int) BFD_RELOC_MIPS_GOT16,
		       mips_gp_register);
d5309 4
a5312 2
		       HAVE_32BIT_ADDRESSES ? "addiu" : "daddiu", "t,r,j", AT,
		       mips_gp_register, (int) BFD_RELOC_GPREL16);
d5320 1
a5320 1
      if (HAVE_64BIT_GPRS)
d5327 1
a5327 1
	  if (treg != RA)
d5345 4
a5348 5
      /* Check if we have a constant in IMM_EXPR.  If the FPRs are 64 bits
         wide, IMM_EXPR is the entire value and the GPRs are known to be 64
         bits wide as well.  Otherwise IMM_EXPR is the high order 32 bits of
         the value and the low order 32 bits are either zero or in
         OFFSET_EXPR.  */
d5351 4
a5354 7
	  load_register (&icnt, AT, &imm_expr, HAVE_64BIT_FPRS);
	  if (HAVE_64BIT_FPRS)
	    {
	      assert (HAVE_64BIT_GPRS);
	      macro_build ((char *) NULL, &icnt, (expressionS *) NULL,
			   "dmtc1", "t,S", AT, treg);
	    }
d5381 1
a5381 2
			   "T,o(b)", treg, (int) BFD_RELOC_MIPS_LITERAL,
			   mips_gp_register);
d5384 1
a5384 1
	  breg = mips_gp_register;
d5393 4
a5396 3
			 HAVE_32BIT_ADDRESSES ? "lw" : "ld",
			 "t,o(b)", AT, (int) BFD_RELOC_MIPS_GOT16,
			 mips_gp_register);
d5400 1
a5400 1
	      macro_build_lui (NULL, &icnt, &offset_expr, AT);
d5421 1
a5421 1
      if (mips_arch == CPU_R4650)
d5462 1
a5462 1
      if (mips_arch == CPU_R4650)
d5480 1
a5480 1
      if (mips_arch == CPU_R4650)
d5499 1
a5499 1
      if (HAVE_64BIT_GPRS)
d5510 1
a5510 1
      if (HAVE_64BIT_GPRS)
a5519 5
      /* We do _not_ bother to allow embedded PIC (symbol-local_symbol)
	 loads for the case of doing a pair of loads to simulate an 'ld'.
	 This is not currently done by the compiler, and assembly coders
	 writing embedded-pic code can cope.  */

a5536 2
	  char *p;

d5538 2
a5539 2
	       <op>	$treg,<sym>($gp)	(BFD_RELOC_GPREL16)
	       <op>	$treg+1,<sym>+4($gp)	(BFD_RELOC_GPREL16)
d5542 2
a5543 2
	       <op>	$treg,<sym>($at)	(BFD_RELOC_GPREL16)
	       <op>	$treg+1,<sym>+4($at)	(BFD_RELOC_GPREL16)
d5551 1
a5551 1
	  if ((valueT) offset_expr.X_add_number > MAX_GPREL_OFFSET
d5564 1
a5564 1
		  tempreg = mips_gp_register;
d5572 4
a5575 3
			       HAVE_32BIT_ADDRESSES ? HAVE_NEWABI
			       ? "add" : "addu" : "daddu",
			       "d,v,t", AT, breg, mips_gp_register);
d5584 1
a5584 1
			   (int) BFD_RELOC_GPREL16, tempreg);
d5594 1
a5594 1
			   (int) BFD_RELOC_GPREL16, tempreg);
d5600 2
a5601 1
			    offset_expr.X_add_symbol, 0, NULL);
d5630 3
a5632 2
			   HAVE_32BIT_ADDRESSES ? HAVE_NEWABI
			   ? "add" : "addu" : "daddu",
d5679 4
a5682 2
		       HAVE_32BIT_ADDRESSES ? "lw" : "ld", "t,o(b)", AT,
		       (int) BFD_RELOC_MIPS_GOT16, mips_gp_register);
d5686 3
a5688 2
			 HAVE_32BIT_ADDRESSES ? HAVE_NEWABI
			 ? "add" : "addu" : "daddu",
d5708 2
a5709 1
			   offset_expr.X_add_symbol, 0, NULL);
a5713 1
	  char *p;
d5736 1
a5736 1
	  if (reg_needs_delay (mips_gp_register))
d5748 4
a5751 3
		       HAVE_32BIT_ADDRESSES ? HAVE_NEWABI
		       ? "add" : "addu" : "daddu",
		       "d,v,t", AT, AT, mips_gp_register);
d5753 3
a5755 1
		       HAVE_32BIT_ADDRESSES ? "lw" : "ld",
d5760 3
a5762 2
			 HAVE_32BIT_ADDRESSES ? HAVE_NEWABI
			 ? "add" : "addu" : "daddu",
d5784 2
a5785 1
			offset_expr.X_add_symbol, 0, NULL);
d5792 4
a5795 3
		       HAVE_32BIT_ADDRESSES ? "lw" : "ld",
		       "t,o(b)", AT, (int) BFD_RELOC_MIPS_GOT16,
		       mips_gp_register);
d5802 3
a5804 2
			   HAVE_32BIT_ADDRESSES ? HAVE_NEWABI
			   ? "add" : "addu" : "daddu",
d5828 2
a5829 2
	       <op>	$treg,<sym>($gp)	(BFD_RELOC_GPREL16)
	       <op>	$treg+1,<sym>+4($gp)	(BFD_RELOC_GPREL16)
d5832 2
a5833 2
	       <op>	$treg,<sym>($at)	(BFD_RELOC_GPREL16)
	       <op>	$treg+1,<sym>+4($at)	(BFD_RELOC_GPREL16)
d5837 1
a5837 1
	      tempreg = mips_gp_register;
d5843 4
a5846 2
			   HAVE_32BIT_ADDRESSES ? "addu" : "daddu",
			   "d,v,t", AT, breg, mips_gp_register);
d5854 1
a5854 1
		       (int) BFD_RELOC_GPREL16, tempreg);
d5859 1
a5859 1
		       (int) BFD_RELOC_GPREL16, tempreg);
d5875 2
a5876 1
      assert (HAVE_32BIT_ADDRESSES);
a5918 4
    case M_MOVE:
      move_register (&icnt, dreg, sreg);
      return;

d5985 4
a5988 4
      macro_build ((char *) NULL, &icnt, (expressionS *) NULL,
		   dbl ? "dmultu" : "multu", "s,t", sreg, treg);
      macro_build ((char *) NULL, &icnt, (expressionS *) NULL, "mflo", "d",
		   dreg);
d5998 4
a6001 4
      macro_build ((char *) NULL, &icnt, (expressionS *) NULL,
		   dbl ? "dmult" : "mult", "s,t", sreg, AT);
      macro_build ((char *) NULL, &icnt, (expressionS *) NULL, "mflo", "d",
		   dreg);
d6014 1
a6014 1
      mips_emit_delays (TRUE);
d6019 8
a6026 8
      macro_build ((char *) NULL, &icnt, (expressionS *) NULL,
		   dbl ? "dmult" : "mult", "s,t", sreg, imm ? AT : treg);
      macro_build ((char *) NULL, &icnt, (expressionS *) NULL, "mflo", "d",
		   dreg);
      macro_build ((char *) NULL, &icnt, (expressionS *) NULL,
		   dbl ? "dsra32" : "sra", "d,w,<", dreg, dreg, RA);
      macro_build ((char *) NULL, &icnt, (expressionS *) NULL, "mfhi", "d",
		   AT);
d6028 1
a6028 2
	macro_build ((char *) NULL, &icnt, (expressionS *) NULL, "tne",
		     "s,t,q", dreg, AT, 6);
d6032 3
a6034 6
	  macro_build ((char *) NULL, &icnt, &expr1, "beq", "s,t,p", dreg,
		       AT);
	  macro_build ((char *) NULL, &icnt, (expressionS *) NULL, "nop", "",
		       0);
	  macro_build ((char *) NULL, &icnt, (expressionS *) NULL, "break",
		       "c", 6);
d6037 1
a6037 1
      macro_build ((char *) NULL, &icnt, (expressionS *) NULL, "mflo", "d", dreg);
d6050 1
a6050 1
      mips_emit_delays (TRUE);
d6055 1
a6055 1
      macro_build ((char *) NULL, &icnt, (expressionS *) NULL,
d6058 2
a6059 4
      macro_build ((char *) NULL, &icnt, (expressionS *) NULL, "mfhi", "d",
		   AT);
      macro_build ((char *) NULL, &icnt, (expressionS *) NULL, "mflo", "d",
		   dreg);
d6061 1
a6061 2
	macro_build ((char *) NULL, &icnt, (expressionS *) NULL, "tne",
		     "s,t,q", AT, 0, 6);
d6066 2
a6067 4
	  macro_build ((char *) NULL, &icnt, (expressionS *) NULL, "nop", "",
		       0);
	  macro_build ((char *) NULL, &icnt, (expressionS *) NULL, "break",
		       "c", 6);
a6071 31
    case M_DROL:
      if (ISA_HAS_DROR (mips_opts.isa) || CPU_HAS_DROR (mips_arch))
	{
	  if (dreg == sreg)
	    {
	      tempreg = AT;
	      used_at = 1;
	    }
	  else
	    {
	      tempreg = dreg;
	      used_at = 0;
	    }
	  macro_build ((char *) NULL, &icnt, NULL, "dnegu",
		       "d,w", tempreg, treg);
	  macro_build ((char *) NULL, &icnt, NULL, "drorv",
		       "d,t,s", dreg, sreg, tempreg);
	  if (used_at)
	    break;
	  return;
	}
      macro_build ((char *) NULL, &icnt, (expressionS *) NULL, "dsubu",
		   "d,v,t", AT, 0, treg);
      macro_build ((char *) NULL, &icnt, (expressionS *) NULL, "dsrlv",
		   "d,t,s", AT, sreg, AT);
      macro_build ((char *) NULL, &icnt, (expressionS *) NULL, "dsllv",
		   "d,t,s", dreg, sreg, treg);
      macro_build ((char *) NULL, &icnt, (expressionS *) NULL, "or",
		   "d,v,t", dreg, dreg, AT);
      break;

d6073 5
a6077 65
      if (ISA_HAS_ROR (mips_opts.isa) || CPU_HAS_ROR (mips_arch))
	{
	  if (dreg == sreg)
	    {
	      tempreg = AT;
	      used_at = 1;
	    }
	  else
	    {
	      tempreg = dreg;
	      used_at = 0;
	    }
	  macro_build ((char *) NULL, &icnt, NULL, "negu",
		       "d,w", tempreg, treg);
	  macro_build ((char *) NULL, &icnt, NULL, "rorv",
		       "d,t,s", dreg, sreg, tempreg);
	  if (used_at)
	    break;
	  return;
	}
      macro_build ((char *) NULL, &icnt, (expressionS *) NULL, "subu",
		   "d,v,t", AT, 0, treg);
      macro_build ((char *) NULL, &icnt, (expressionS *) NULL, "srlv",
		   "d,t,s", AT, sreg, AT);
      macro_build ((char *) NULL, &icnt, (expressionS *) NULL, "sllv",
		   "d,t,s", dreg, sreg, treg);
      macro_build ((char *) NULL, &icnt, (expressionS *) NULL, "or",
		   "d,v,t", dreg, dreg, AT);
      break;

    case M_DROL_I:
      {
	unsigned int rot;
	char *l, *r;

	if (imm_expr.X_op != O_constant)
	  as_bad (_("Improper rotate count"));
	rot = imm_expr.X_add_number & 0x3f;
	if (ISA_HAS_DROR (mips_opts.isa) || CPU_HAS_DROR (mips_arch))
	  {
	    rot = (64 - rot) & 0x3f;
	    if (rot >= 32)
	      macro_build ((char *) NULL, &icnt, NULL, "dror32",
			   "d,w,<", dreg, sreg, rot - 32);
	    else
	      macro_build ((char *) NULL, &icnt, NULL, "dror",
			   "d,w,<", dreg, sreg, rot);
	    return;
	  }
	if (rot == 0)
	  {
	    macro_build ((char *) NULL, &icnt, (expressionS *) NULL, "dsrl",
			 "d,w,<", dreg, sreg, 0);
	    return;
	  }
	l = (rot < 0x20) ? "dsll" : "dsll32";
	r = ((0x40 - rot) < 0x20) ? "dsrl" : "dsrl32";
	rot &= 0x1f;
	macro_build ((char *) NULL, &icnt, (expressionS *) NULL, l,
		     "d,w,<", AT, sreg, rot);
	macro_build ((char *) NULL, &icnt, (expressionS *) NULL, r,
		     "d,w,<", dreg, sreg, (0x20 - rot) & 0x1f);
	macro_build ((char *) NULL, &icnt, (expressionS *) NULL, "or",
		     "d,v,t", dreg, dreg, AT);
      }
d6081 7
a6087 42
      {
	unsigned int rot;

	if (imm_expr.X_op != O_constant)
	  as_bad (_("Improper rotate count"));
	rot = imm_expr.X_add_number & 0x1f;
	if (ISA_HAS_ROR (mips_opts.isa) || CPU_HAS_ROR (mips_arch))
	  {
	    macro_build ((char *) NULL, &icnt, NULL, "ror",
			 "d,w,<", dreg, sreg, (32 - rot) & 0x1f);
	    return;
	  }
	if (rot == 0)
	  {
	    macro_build ((char *) NULL, &icnt, (expressionS *) NULL, "srl",
			 "d,w,<", dreg, sreg, 0);
	    return;
	  }
	macro_build ((char *) NULL, &icnt, (expressionS *) NULL, "sll",
		     "d,w,<", AT, sreg, rot);
	macro_build ((char *) NULL, &icnt, (expressionS *) NULL, "srl",
		     "d,w,<", dreg, sreg, (0x20 - rot) & 0x1f);
	macro_build ((char *) NULL, &icnt, (expressionS *) NULL, "or",
		     "d,v,t", dreg, dreg, AT);
      }
      break;

    case M_DROR:
      if (ISA_HAS_DROR (mips_opts.isa) || CPU_HAS_DROR (mips_arch))
	{
	  macro_build ((char *) NULL, &icnt, NULL, "drorv",
		       "d,t,s", dreg, sreg, treg);
	  return;
	}
      macro_build ((char *) NULL, &icnt, (expressionS *) NULL, "dsubu",
		   "d,v,t", AT, 0, treg);
      macro_build ((char *) NULL, &icnt, (expressionS *) NULL, "dsllv",
		   "d,t,s", AT, sreg, AT);
      macro_build ((char *) NULL, &icnt, (expressionS *) NULL, "dsrlv",
		   "d,t,s", dreg, sreg, treg);
      macro_build ((char *) NULL, &icnt, (expressionS *) NULL, "or",
		   "d,v,t", dreg, dreg, AT);
d6091 5
a6095 50
      if (ISA_HAS_ROR (mips_opts.isa) || CPU_HAS_ROR (mips_arch))
	{
	  macro_build ((char *) NULL, &icnt, NULL, "rorv",
		       "d,t,s", dreg, sreg, treg);
	  return;
	}
      macro_build ((char *) NULL, &icnt, (expressionS *) NULL, "subu",
		   "d,v,t", AT, 0, treg);
      macro_build ((char *) NULL, &icnt, (expressionS *) NULL, "sllv",
		   "d,t,s", AT, sreg, AT);
      macro_build ((char *) NULL, &icnt, (expressionS *) NULL, "srlv",
		   "d,t,s", dreg, sreg, treg);
      macro_build ((char *) NULL, &icnt, (expressionS *) NULL, "or",
		   "d,v,t", dreg, dreg, AT);
      break;

    case M_DROR_I:
      {
	unsigned int rot;
	char *l, *r;

	if (imm_expr.X_op != O_constant)
	  as_bad (_("Improper rotate count"));
	rot = imm_expr.X_add_number & 0x3f;
	if (ISA_HAS_DROR (mips_opts.isa) || CPU_HAS_DROR (mips_arch))
	  {
	    if (rot >= 32)
	      macro_build ((char *) NULL, &icnt, NULL, "dror32",
			   "d,w,<", dreg, sreg, rot - 32);
	    else
	      macro_build ((char *) NULL, &icnt, NULL, "dror",
			   "d,w,<", dreg, sreg, rot);
	    return;
	  }
	if (rot == 0)
	  {
	    macro_build ((char *) NULL, &icnt, (expressionS *) NULL, "dsrl",
			 "d,w,<", dreg, sreg, 0);
	    return;
	  }
	r = (rot < 0x20) ? "dsrl" : "dsrl32";
	l = ((0x40 - rot) < 0x20) ? "dsll" : "dsll32";
	rot &= 0x1f;
	macro_build ((char *) NULL, &icnt, (expressionS *) NULL, r,
		     "d,w,<", AT, sreg, rot);
	macro_build ((char *) NULL, &icnt, (expressionS *) NULL, l,
		     "d,w,<", dreg, sreg, (0x20 - rot) & 0x1f);
	macro_build ((char *) NULL, &icnt, (expressionS *) NULL, "or",
		     "d,v,t", dreg, dreg, AT);
      }
d6099 7
a6105 25
      {
	unsigned int rot;

	if (imm_expr.X_op != O_constant)
	  as_bad (_("Improper rotate count"));
	rot = imm_expr.X_add_number & 0x1f;
	if (ISA_HAS_ROR (mips_opts.isa) || CPU_HAS_ROR (mips_arch))
	  {
	    macro_build ((char *) NULL, &icnt, NULL, "ror",
			 "d,w,<", dreg, sreg, rot);
	    return;
	  }
	if (rot == 0)
	  {
	    macro_build ((char *) NULL, &icnt, (expressionS *) NULL, "srl",
			 "d,w,<", dreg, sreg, 0);
	    return;
	  }
	macro_build ((char *) NULL, &icnt, (expressionS *) NULL, "srl",
		     "d,w,<", AT, sreg, rot);
	macro_build ((char *) NULL, &icnt, (expressionS *) NULL, "sll",
		     "d,w,<", dreg, sreg, (0x20 - rot) & 0x1f);
	macro_build ((char *) NULL, &icnt, (expressionS *) NULL, "or",
		     "d,v,t", dreg, dreg, AT);
      }
d6109 1
a6109 1
      if (mips_arch == CPU_R4650)
d6135 2
a6136 2
	  macro_build ((char *) NULL, &icnt, (expressionS *) NULL, "xor",
		       "d,v,t", dreg, sreg, treg);
d6153 1
a6153 1
	  move_register (&icnt, dreg, 0);
d6170 3
a6172 1
		       HAVE_32BIT_GPRS ? "addiu" : "daddiu",
d6179 3
a6181 3
	  load_register (&icnt, AT, &imm_expr, HAVE_64BIT_GPRS);
	  macro_build ((char *) NULL, &icnt, (expressionS *) NULL, "xor",
		       "d,v,t", dreg, sreg, AT);
d6196 1
a6196 2
      macro_build ((char *) NULL, &icnt, (expressionS *) NULL, s, "d,v,t",
		   dreg, sreg, treg);
d6214 4
a6217 4
	  load_register (&icnt, AT, &imm_expr, HAVE_64BIT_GPRS);
	  macro_build ((char *) NULL, &icnt, (expressionS *) NULL,
		       mask == M_SGE_I ? "slt" : "sltu", "d,v,t", dreg, sreg,
		       AT);
d6232 1
a6232 2
      macro_build ((char *) NULL, &icnt, (expressionS *) NULL, s, "d,v,t",
		   dreg, treg, sreg);
d6241 2
a6242 3
      load_register (&icnt, AT, &imm_expr, HAVE_64BIT_GPRS);
      macro_build ((char *) NULL, &icnt, (expressionS *) NULL, s, "d,v,t",
		   dreg, AT, sreg);
d6245 1
a6245 1
    case M_SLE:	/* sreg <= treg  <==>  treg >= sreg  <==>  not (treg < sreg) */
d6251 1
a6251 2
      macro_build ((char *) NULL, &icnt, (expressionS *) NULL, s, "d,v,t",
		   dreg, treg, sreg);
d6256 1
a6256 1
    case M_SLE_I:	/* sreg <= I <==> I >= sreg <==> not (I < sreg) */
d6262 2
a6263 3
      load_register (&icnt, AT, &imm_expr, HAVE_64BIT_GPRS);
      macro_build ((char *) NULL, &icnt, (expressionS *) NULL, s, "d,v,t",
		   dreg, AT, sreg);
d6277 2
a6278 3
      load_register (&icnt, AT, &imm_expr, HAVE_64BIT_GPRS);
      macro_build ((char *) NULL, &icnt, (expressionS *) NULL, "slt", "d,v,t",
		   dreg, sreg, AT);
d6290 3
a6292 3
      load_register (&icnt, AT, &imm_expr, HAVE_64BIT_GPRS);
      macro_build ((char *) NULL, &icnt, (expressionS *) NULL, "sltu",
		   "d,v,t", dreg, sreg, AT);
d6297 2
a6298 2
	macro_build ((char *) NULL, &icnt, (expressionS *) NULL, "sltu",
		     "d,v,t", dreg, 0, treg);
d6300 2
a6301 2
	macro_build ((char *) NULL, &icnt, (expressionS *) NULL, "sltu",
		     "d,v,t", dreg, 0, sreg);
d6304 4
a6307 4
	  macro_build ((char *) NULL, &icnt, (expressionS *) NULL, "xor",
		       "d,v,t", dreg, sreg, treg);
	  macro_build ((char *) NULL, &icnt, (expressionS *) NULL, "sltu",
		       "d,v,t", dreg, 0, dreg);
d6314 2
a6315 2
	  macro_build ((char *) NULL, &icnt, (expressionS *) NULL, "sltu",
		       "d,v,t", dreg, 0, sreg);
d6323 3
a6325 1
		       HAVE_32BIT_GPRS ? "addiu" : "daddiu",
d6343 3
a6345 1
		       HAVE_32BIT_GPRS ? "addiu" : "daddiu",
d6351 3
a6353 3
	  load_register (&icnt, AT, &imm_expr, HAVE_64BIT_GPRS);
	  macro_build ((char *) NULL, &icnt, (expressionS *) NULL, "xor",
		       "d,v,t", dreg, sreg, AT);
d6356 1
a6356 2
      macro_build ((char *) NULL, &icnt, (expressionS *) NULL, "sltu",
		   "d,v,t", dreg, 0, dreg);
d6375 3
a6377 2
      macro_build ((char *) NULL, &icnt, (expressionS *) NULL,
		   dbl ? "dsub" : "sub", "d,v,t", dreg, sreg, AT);
d6394 3
a6396 2
      macro_build ((char *) NULL, &icnt, (expressionS *) NULL,
		   dbl ? "dsubu" : "subu", "d,v,t", dreg, sreg, AT);
d6417 2
a6418 3
      load_register (&icnt, AT, &imm_expr, HAVE_64BIT_GPRS);
      macro_build ((char *) NULL, &icnt, (expressionS *) NULL, s, "s,t", sreg,
		   AT);
d6431 1
a6431 1
      mips_emit_delays (TRUE);
d6434 3
a6436 5
      macro_build ((char *) NULL, &icnt, (expressionS *) NULL, "cfc1", "t,G",
		   treg, RA);
      macro_build ((char *) NULL, &icnt, (expressionS *) NULL, "cfc1", "t,G",
		   treg, RA);
      macro_build ((char *) NULL, &icnt, (expressionS *) NULL, "nop", "");
d6443 3
a6445 4
      macro_build ((char *) NULL, &icnt, (expressionS *) NULL, "ctc1", "t,G",
		   AT, RA);
      macro_build ((char *) NULL, &icnt, (expressionS *) NULL, "nop", "");
      macro_build ((char *) NULL, &icnt, (expressionS *) NULL,
d6447 2
a6448 3
      macro_build ((char *) NULL, &icnt, (expressionS *) NULL, "ctc1", "t,G",
		   treg, RA);
      macro_build ((char *) NULL, &icnt, (expressionS *) NULL, "nop", "");
d6460 1
d6462 2
a6463 2
	++offset_expr.X_add_number;
      macro_build ((char *) NULL, &icnt, &offset_expr, s, "t,o(b)", AT,
d6466 1
a6466 1
	--offset_expr.X_add_number;
d6468 2
a6469 2
	++offset_expr.X_add_number;
      macro_build ((char *) NULL, &icnt, &offset_expr, "lbu", "t,o(b)", treg,
d6471 2
a6472 4
      macro_build ((char *) NULL, &icnt, (expressionS *) NULL, "sll", "d,w,<",
		   AT, AT, 8);
      macro_build ((char *) NULL, &icnt, (expressionS *) NULL, "or", "d,v,t",
		   treg, treg, AT);
a6486 4
      if (treg != breg)
	tempreg = treg;
      else
	tempreg = AT;
d6489 1
a6489 1
      macro_build ((char *) NULL, &icnt, &offset_expr, s, "t,o(b)", tempreg,
d6495 1
a6495 1
      macro_build ((char *) NULL, &icnt, &offset_expr, s2, "t,o(b)", tempreg,
d6497 1
a6497 9

      /* If necessary, move the result in tempreg the final destination.  */
      if (treg == tempreg)
        return;
      /* Protect second load's delay slot.  */
      if (!gpr_interlocks)
	macro_build ((char *) NULL, &icnt, (expressionS *) NULL, "nop", "");
      move_register (&icnt, treg, tempreg);
      break;
d6509 1
a6509 2
      used_at = 1;
      load_address (&icnt, AT, &offset_expr, &used_at);
d6512 3
a6514 2
		     HAVE_32BIT_ADDRESSES ? HAVE_NEWABI
		     ? "add" : "addu" : "daddu",
d6532 1
a6532 2
      used_at = 1;
      load_address (&icnt, AT, &offset_expr, &used_at);
d6535 3
a6537 2
		     HAVE_32BIT_ADDRESSES ? HAVE_NEWABI
		     ? "add" : "addu" : "daddu",
d6550 4
a6553 4
      macro_build ((char *) NULL, &icnt, (expressionS *) NULL, "sll", "d,w,<",
		   treg, treg, 8);
      macro_build ((char *) NULL, &icnt, (expressionS *) NULL, "or", "d,v,t",
		   treg, treg, AT);
d6560 1
a6560 1
	++offset_expr.X_add_number;
d6563 1
a6563 2
      macro_build ((char *) NULL, &icnt, (expressionS *) NULL, "srl", "d,w,<",
		   AT, treg, 8);
d6565 1
a6565 1
	--offset_expr.X_add_number;
d6567 1
a6567 1
	++offset_expr.X_add_number;
d6606 1
a6606 2
      used_at = 1;
      load_address (&icnt, AT, &offset_expr, &used_at);
d6609 3
a6611 2
		     HAVE_32BIT_ADDRESSES ? HAVE_NEWABI
		     ? "add" : "addu" : "daddu",
d6628 1
a6628 2
      used_at = 1;
      load_address (&icnt, AT, &offset_expr, &used_at);
d6631 3
a6633 2
		     HAVE_32BIT_ADDRESSES ? HAVE_NEWABI
		     ? "add" : "addu" : "daddu",
d6639 2
a6640 2
      macro_build ((char *) NULL, &icnt, (expressionS *) NULL, "srl", "d,w,<",
		   treg, treg, 8);
d6653 4
a6656 4
      macro_build ((char *) NULL, &icnt, (expressionS *) NULL, "sll", "d,w,<",
		   treg, treg, 8);
      macro_build ((char *) NULL, &icnt, (expressionS *) NULL, "or", "d,v,t",
		   treg, treg, AT);
d6712 1
a6712 1
      mips_emit_delays (TRUE);
d6715 1
a6715 1
      macro_build ((char *) NULL, &icnt, (expressionS *) NULL,
d6720 1
a6720 2
      macro_build ((char *) NULL, &icnt, (expressionS *) NULL, "break", "6",
		   7);
d6727 1
a6727 1
      macro_build ((char *) NULL, &icnt, (expressionS *) NULL, s, "x", zreg);
d6746 1
a6746 1
      mips_emit_delays (TRUE);
d6749 1
a6749 2
      macro_build ((char *) NULL, &icnt, (expressionS *) NULL, s, "0,x,y",
		   xreg, yreg);
d6752 1
a6752 2
      macro_build ((char *) NULL, &icnt, (expressionS *) NULL, "break",
		   "6", 7);
d6754 1
a6754 1
      macro_build ((char *) NULL, &icnt, (expressionS *) NULL, s2, "x", zreg);
d6760 4
a6763 4
      macro_build ((char *) NULL, &icnt, (expressionS *) NULL,
		   dbl ? "dmultu" : "multu", "x,y", xreg, yreg);
      macro_build ((char *) NULL, &icnt, (expressionS *) NULL, "mflo", "x",
		   zreg);
d6775 2
a6776 1
		   dbl ? "daddiu" : "addiu", "y,x,4", yreg, xreg);
d6908 1
a6908 1
      macro_build ((char *) NULL, &icnt, &expr1, "slti", "x,8", yreg);
d6910 2
a6911 1
	move_register (&icnt, xreg, yreg);
a6942 14
      case '+':
    	switch (c = *p++)
	  {
	  case 'A': USE_BITS (OP_MASK_SHAMT,	OP_SH_SHAMT);	break;
	  case 'B': USE_BITS (OP_MASK_INSMSB,	OP_SH_INSMSB);	break;
	  case 'C': USE_BITS (OP_MASK_EXTMSBD,	OP_SH_EXTMSBD);	break;
	  case 'D': USE_BITS (OP_MASK_RD,	OP_SH_RD);
		    USE_BITS (OP_MASK_SEL,	OP_SH_SEL);	break;
	  default:
	    as_bad (_("internal: bad mips opcode (unknown extension operand type `+%c'): %s %s"),
		    c, opc->name, opc->args);
	    return 0;
	  }
	break;
a6954 1
      case 'K':	USE_BITS (OP_MASK_RD,		OP_SH_RD);	break;
a6957 3
      case 'O':	USE_BITS (OP_MASK_ALN,		OP_SH_ALN);	break;
      case 'Q':	USE_BITS (OP_MASK_VSEL,		OP_SH_VSEL);
		USE_BITS (OP_MASK_FT,		OP_SH_FT);	break;
a6962 3
      case 'X':	USE_BITS (OP_MASK_FD,		OP_SH_FD);	break;
      case 'Y':	USE_BITS (OP_MASK_FS,		OP_SH_FS);	break;
      case 'Z':	USE_BITS (OP_MASK_FT,		OP_SH_FT);	break;
a6986 4
      case 'e': USE_BITS (OP_MASK_VECBYTE,	OP_SH_VECBYTE);	break;
      case '%': USE_BITS (OP_MASK_VECALIGN,	OP_SH_VECALIGN); break;
      case '[': break;
      case ']': break;
a7018 2
  unsigned int lastpos = 0;
  unsigned int limlo, limhi;
d7021 1
d7028 1
a7028 1
  for (s = str; *s != '\0' && !ISSPACE (*s); ++s)
d7034 1
a7034 1
  if (ISSPACE (*s))
d7052 1
a7052 3
      for (s = str;
	   *s != '\0' && *s != '.' && !ISSPACE (*s);
	   ++s)
d7069 2
d7076 1
a7076 1
      bfd_boolean ok;
d7080 2
a7081 7
      if (OPCODE_IS_MEMBER (insn,
			    (mips_opts.isa
			     | (file_ase_mips16 ? INSN_MIPS16 : 0)
	      		     | (mips_opts.ase_mdmx ? INSN_MDMX : 0)
			     | (mips_opts.ase_mips3d ? INSN_MIPS3D : 0)),
			    mips_arch))
	ok = TRUE;
d7083 1
a7083 1
	ok = FALSE;
d7087 2
a7088 2
	  if (mips_arch == CPU_R4650 && (insn->pinfo & FP_D) != 0)
	    ok = FALSE;
d7101 7
a7107 16
	      if (!insn_error)
		{
		  static char buf[100];
		  if (mips_arch_info->is_isa)
		    sprintf (buf,
			     _("opcode not supported at this ISA level (%s)"),
			     mips_cpu_info_from_isa (mips_opts.isa)->name);
		  else
		    sprintf (buf,
			     _("opcode not supported on this processor: %s (%s)"),
			     mips_arch_info->name,
			     mips_cpu_info_from_isa (mips_opts.isa)->name);
		  insn_error = buf;
		}
	      if (save_c)
		*(--s) = save_c;
a7113 1
      insn_error = NULL;
d7116 2
a7117 4
	  int is_mdmx;

	  s += strspn (s, " \t");
	  is_mdmx = 0;
d7133 1
a7133 1
		  ip->insn_opcode |= lastregno << OP_SH_RS;
a7136 3
		  ip->insn_opcode |= lastregno << OP_SH_RT;
		  continue;

d7138 1
a7138 1
		  ip->insn_opcode |= lastregno << OP_SH_FT;
d7142 1
a7142 1
		  ip->insn_opcode |= lastregno << OP_SH_FS;
a7158 2
	    case '[':
	    case ']':
a7162 86
	    case '+':		/* Opcode extension character.  */
	      switch (*++args)
		{
		case 'A':		/* ins/ext position, becomes LSB.  */
		  limlo = 0;
		  limhi = 31;
		  my_getExpression (&imm_expr, s);
		  check_absolute_expr (ip, &imm_expr);
		  if ((unsigned long) imm_expr.X_add_number < limlo
		      || (unsigned long) imm_expr.X_add_number > limhi)
		    {
		      as_bad (_("Improper position (%lu)"),
			      (unsigned long) imm_expr.X_add_number);
		      imm_expr.X_add_number = limlo;
		    }
		  lastpos = imm_expr.X_add_number;
		  ip->insn_opcode |= (imm_expr.X_add_number
				      & OP_MASK_SHAMT) << OP_SH_SHAMT;
		  imm_expr.X_op = O_absent;
		  s = expr_end;
		  continue;

		case 'B':		/* ins size, becomes MSB.  */
		  limlo = 1;
		  limhi = 32;
		  my_getExpression (&imm_expr, s);
		  check_absolute_expr (ip, &imm_expr);
		  /* Check for negative input so that small negative numbers
		     will not succeed incorrectly.  The checks against
		     (pos+size) transitively check "size" itself,
		     assuming that "pos" is reasonable.  */
		  if ((long) imm_expr.X_add_number < 0
		      || ((unsigned long) imm_expr.X_add_number
			  + lastpos) < limlo
		      || ((unsigned long) imm_expr.X_add_number
			  + lastpos) > limhi)
		    {
		      as_bad (_("Improper insert size (%lu, position %lu)"),
			      (unsigned long) imm_expr.X_add_number,
			      (unsigned long) lastpos);
		      imm_expr.X_add_number = limlo - lastpos;
		    }
		  ip->insn_opcode |= ((lastpos + imm_expr.X_add_number - 1)
				      & OP_MASK_INSMSB) << OP_SH_INSMSB;
		  imm_expr.X_op = O_absent;
		  s = expr_end;
		  continue;

		case 'C':		/* ext size, becomes MSBD.  */
		  limlo = 1;
		  limhi = 32;
		  my_getExpression (&imm_expr, s);
		  check_absolute_expr (ip, &imm_expr);
		  /* Check for negative input so that small negative numbers
		     will not succeed incorrectly.  The checks against
		     (pos+size) transitively check "size" itself,
		     assuming that "pos" is reasonable.  */
		  if ((long) imm_expr.X_add_number < 0
		      || ((unsigned long) imm_expr.X_add_number
			  + lastpos) < limlo
		      || ((unsigned long) imm_expr.X_add_number
			  + lastpos) > limhi)
		    {
		      as_bad (_("Improper extract size (%lu, position %lu)"),
			      (unsigned long) imm_expr.X_add_number,
			      (unsigned long) lastpos);
		      imm_expr.X_add_number = limlo - lastpos;
		    }
		  ip->insn_opcode |= ((imm_expr.X_add_number - 1)
				      & OP_MASK_EXTMSBD) << OP_SH_EXTMSBD;
		  imm_expr.X_op = O_absent;
		  s = expr_end;
		  continue;

		case 'D':
		  /* +D is for disassembly only; never match.  */
		  break;

		default:
		  as_bad (_("internal: bad mips opcode (unknown extension operand type `+%c'): %s %s"),
		    *args, insn->name, insn->args);
		  /* Further processing is fruitless.  */
		  return;
		}
	      break;

d7166 2
a7167 2
	       * than 31 or less than 0, then the shift amount should be
	       * mod 32.  In reality the mips assembler issues an error.
d7174 3
a7176 3
		  as_warn (_("Improper shift amount (%lu)"),
			   (unsigned long) imm_expr.X_add_number);
		  imm_expr.X_add_number &= OP_MASK_SHAMT;
d7178 1
a7178 1
	      ip->insn_opcode |= imm_expr.X_add_number << OP_SH_SHAMT;
d7189 1
a7189 1
	      ip->insn_opcode |= (imm_expr.X_add_number - 32) << OP_SH_SHAMT;
d7216 1
a7216 1
	      if ((unsigned long) imm_expr.X_add_number > 1023)
d7218 3
a7220 3
		  as_warn (_("Illegal break code (%lu)"),
			   (unsigned long) imm_expr.X_add_number);
		  imm_expr.X_add_number &= OP_MASK_CODE;
d7222 1
a7222 1
	      ip->insn_opcode |= imm_expr.X_add_number << OP_SH_CODE;
d7230 1
a7230 1
	      if ((unsigned long) imm_expr.X_add_number > 1023)
d7232 3
a7234 3
		  as_warn (_("Illegal lower break code (%lu)"),
			   (unsigned long) imm_expr.X_add_number);
		  imm_expr.X_add_number &= OP_MASK_CODE2;
d7236 1
a7236 1
	      ip->insn_opcode |= imm_expr.X_add_number << OP_SH_CODE2;
d7244 4
a7247 4
	      if ((unsigned long) imm_expr.X_add_number > OP_MASK_CODE20)
		as_warn (_("Illegal 20-bit code (%lu)"),
			 (unsigned long) imm_expr.X_add_number);
	      ip->insn_opcode |= imm_expr.X_add_number << OP_SH_CODE20;
d7252 1
a7252 1
	    case 'C':           /* Coprocessor code */
d7255 1
a7255 1
	      if ((unsigned long) imm_expr.X_add_number >= (1 << 25))
d7257 3
a7259 3
		  as_warn (_("Coproccesor code > 25 bits (%lu)"),
			   (unsigned long) imm_expr.X_add_number);
		  imm_expr.X_add_number &= ((1 << 25) - 1);
d7269 4
a7272 4
	      if ((unsigned long) imm_expr.X_add_number > OP_MASK_CODE19)
		as_warn (_("Illegal 19-bit code (%lu)"),
			 (unsigned long) imm_expr.X_add_number);
	      ip->insn_opcode |= imm_expr.X_add_number << OP_SH_CODE19;
d7282 3
a7284 3
		  as_warn (_("Invalid performance register (%lu)"),
			   (unsigned long) imm_expr.X_add_number);
		  imm_expr.X_add_number &= OP_MASK_PERFREG;
d7286 1
a7286 1
	      ip->insn_opcode |= (imm_expr.X_add_number << OP_SH_PERFREG);
a7299 1
	    case 'K':		/* 'rdhwr' destination register */
d7307 1
a7307 1
		  if (ISDIGIT (s[1]))
d7317 1
a7317 1
		      while (ISDIGIT (*s));
d7321 1
a7321 1
		  else if (*args == 'E' || *args == 'G' || *args == 'K')
d7325 1
a7325 6
		      if (s[1] == 'r' && s[2] == 'a')
			{
			  s += 3;
			  regno = RA;
			}
		      else if (s[1] == 'f' && s[2] == 'p')
a7354 5
		      else if (s[1] == 'z' && s[2] == 'e' && s[3] == 'r' && s[4] == 'o')
			{
			  s += 5;
			  regno = ZERO;
			}
d7385 1
a7385 2
		      && *args != 'G'
		      && *args != 'K')
d7389 1
a7389 1
		    ++s;
d7396 1
a7396 1
			  ++args;
d7411 1
a7411 1
		      ip->insn_opcode |= regno << OP_SH_RS;
d7415 1
a7415 2
		    case 'K':
		      ip->insn_opcode |= regno << OP_SH_RD;
d7418 2
a7419 2
		      ip->insn_opcode |= regno << OP_SH_RD;
		      ip->insn_opcode |= regno << OP_SH_RT;
d7424 1
a7424 1
		      ip->insn_opcode |= regno << OP_SH_RT;
d7455 1
a7455 1
		  ip->insn_opcode |= lastregno << OP_SH_RS;
d7458 1
a7458 39
		  ip->insn_opcode |= lastregno << OP_SH_RT;
		  continue;
		}
	      break;

	    case 'O':		/* MDMX alignment immediate constant.  */
	      my_getExpression (&imm_expr, s);
	      check_absolute_expr (ip, &imm_expr);
	      if ((unsigned long) imm_expr.X_add_number > OP_MASK_ALN)
		{
		  as_warn ("Improper align amount (%ld), using low bits",
			   (long) imm_expr.X_add_number);
		  imm_expr.X_add_number &= OP_MASK_ALN;
		}
	      ip->insn_opcode |= imm_expr.X_add_number << OP_SH_ALN;
	      imm_expr.X_op = O_absent;
	      s = expr_end;
	      continue;

	    case 'Q':		/* MDMX vector, element sel, or const.  */
	      if (s[0] != '$')
		{
		  /* MDMX Immediate.  */
		  my_getExpression (&imm_expr, s);
		  check_absolute_expr (ip, &imm_expr);
		  if ((unsigned long) imm_expr.X_add_number > OP_MASK_FT)
		    {
		      as_warn (_("Invalid MDMX Immediate (%ld)"),
			       (long) imm_expr.X_add_number);
		      imm_expr.X_add_number &= OP_MASK_FT;
		    }
		  imm_expr.X_add_number &= OP_MASK_FT;
		  if (ip->insn_opcode & (OP_MASK_VSEL << OP_SH_VSEL))
		    ip->insn_opcode |= MDMX_FMTSEL_IMM_QH << OP_SH_VSEL;
		  else
		    ip->insn_opcode |= MDMX_FMTSEL_IMM_OB << OP_SH_VSEL;
		  ip->insn_opcode |= imm_expr.X_add_number << OP_SH_FT;
		  imm_expr.X_op = O_absent;
		  s = expr_end;
d7461 2
a7462 5
	      /* Not MDMX Immediate.  Fall through.  */
	    case 'X':           /* MDMX destination register.  */
	    case 'Y':           /* MDMX source register.  */
	    case 'Z':           /* MDMX target register.  */
	      is_mdmx = 1;
d7470 1
a7470 5
	      /* Accept $fN for FP and MDMX register numbers, and in
                 addition accept $vN for MDMX register numbers.  */
	      if ((s[0] == '$' && s[1] == 'f' && ISDIGIT (s[2]))
		  || (is_mdmx != 0 && s[0] == '$' && s[1] == 'v'
		      && ISDIGIT (s[2])))
d7480 1
a7480 1
		  while (ISDIGIT (*s));
d7486 1
a7486 1
		      && HAVE_32BIT_FPRS
d7498 1
a7498 1
		    ++s;
d7505 1
a7505 1
			  ++args;
d7511 1
a7511 2
		    case 'X':
		      ip->insn_opcode |= regno << OP_SH_FD;
d7515 1
a7515 2
		    case 'Y':
		      ip->insn_opcode |= regno << OP_SH_FS;
a7516 34
		    case 'Q':
		      /* This is like 'Z', but also needs to fix the MDMX
			 vector/scalar select bits.  Note that the
			 scalar immediate case is handled above.  */
		      if (*s == '[')
			{
			  int is_qh = (ip->insn_opcode & (1 << OP_SH_VSEL));
			  int max_el = (is_qh ? 3 : 7);
			  s++;
			  my_getExpression(&imm_expr, s);
			  check_absolute_expr (ip, &imm_expr);
			  s = expr_end;
			  if (imm_expr.X_add_number > max_el)
			    as_bad(_("Bad element selector %ld"),
				   (long) imm_expr.X_add_number);
			  imm_expr.X_add_number &= max_el;
			  ip->insn_opcode |= (imm_expr.X_add_number
					      << (OP_SH_VSEL +
						  (is_qh ? 2 : 1)));
			  if (*s != ']')
			    as_warn(_("Expecting ']' found '%s'"), s);
			  else
			    s++;
			}
		      else
                        {
                          if (ip->insn_opcode & (OP_MASK_VSEL << OP_SH_VSEL))
                            ip->insn_opcode |= (MDMX_FMTSEL_VEC_QH
						<< OP_SH_VSEL);
			  else
			    ip->insn_opcode |= (MDMX_FMTSEL_VEC_OB <<
						OP_SH_VSEL);
			}
                      /* Fall through */
d7519 1
a7519 2
		    case 'Z':
		      ip->insn_opcode |= regno << OP_SH_FT;
d7522 1
a7522 1
		      ip->insn_opcode |= regno << OP_SH_FR;
d7532 1
a7532 1
		  ip->insn_opcode |= lastregno << OP_SH_FS;
d7535 1
a7535 1
		  ip->insn_opcode |= lastregno << OP_SH_FT;
d7550 1
a7550 1
	      *imm_reloc = BFD_RELOC_32;
a7559 1
		int using_gprs;
d7593 1
a7593 6
		    .lit8 entries).

		    The code below needs to know whether the target register
		    is 32 or 64 bits wide.  It relies on the fact 'f' and
		    'F' are used with GPR-based instructions and 'l' and
		    'L' are used with FPR-based instructions.  */
a7595 1
		using_gprs = *args == 'F' || *args == 'f';
a7627 7
			 /* Constants can only be constructed in GPRs and
			    copied to FPRs if the GPRs are at least as wide
			    as the FPRs.  Force the constant into memory if
			    we are using 64-bit FPRs but the GPRs are only
			    32 bits wide.  */
			 && (using_gprs
			     || ! (HAVE_64BIT_FPRS && HAVE_32BIT_GPRS))
d7633 7
a7639 6
		    /* The value is simple enough to load with a couple of
                       instructions.  If using 32-bit registers, set
                       imm_expr to the high order 32 bits and offset_expr to
                       the low order 32 bits.  Otherwise, set imm_expr to
                       the entire 64 bit constant.  */
		    if (using_gprs ? HAVE_32BIT_GPRS : HAVE_32BIT_FPRS)
d7749 36
a7784 2
	      *imm_reloc = BFD_RELOC_LO16;
	      if (my_getSmallExpression (&imm_expr, imm_reloc, s) == 0)
d7787 1
a7787 4
		  offsetT minval, maxval;

		  more = (insn + 1 < &mips_opcodes[NUMOPCODES]
			  && strcmp (insn->name, insn[1].name) == 0);
d7789 13
a7801 19
		  /* If the expression was written as an unsigned number,
		     only treat it as signed if there are no more
		     alternatives.  */
		  if (more
		      && *args == 'j'
		      && sizeof (imm_expr.X_add_number) <= 4
		      && imm_expr.X_op == O_constant
		      && imm_expr.X_add_number < 0
		      && imm_expr.X_unsigned
		      && HAVE_64BIT_GPRS)
		    break;

		  /* For compatibility with older assemblers, we accept
		     0x8000-0xffff as signed 16-bit numbers when only
		     signed numbers are allowed.  */
		  if (*args == 'i')
		    minval = 0, maxval = 0xffff;
		  else if (more)
		    minval = -0x8000, maxval = 0x7fff;
d7803 10
a7812 5
		    minval = -0x8000, maxval = 0xffff;

		  if (imm_expr.X_op != O_constant
		      || imm_expr.X_add_number < minval
		      || imm_expr.X_add_number > maxval)
d7818 1
a7818 1
			as_bad (_("expression out of range"));
d7825 1
a7825 9
	      /* Check whether there is only a single bracketed expression
		 left.  If so, it must be the base register and the
		 constant must be zero.  */
	      if (*s == '(' && strchr (s + 1, '(') == 0)
		{
		  offset_expr.X_op = O_constant;
		  offset_expr.X_add_number = 0;
		  continue;
		}
d7829 10
a7838 2
		 code pattern.  */
	      if (my_getSmallExpression (&offset_expr, offset_reloc, s) == 0
d7841 5
a7845 1
		      || offset_expr.X_add_number < -0x8000))
d7848 8
d7860 1
a7860 1
	      *offset_reloc = BFD_RELOC_16_PCREL_S2;
d7866 21
a7886 2
	      if (my_getSmallExpression (&imm_expr, imm_reloc, s) == 0
		  && imm_expr.X_op == O_constant
d7896 1
a7896 1
	      *offset_reloc = BFD_RELOC_MIPS_JMP;
d7911 1
a7911 1
	      while (ISDIGIT (*s));
d7923 1
a7923 1
	      if (ISDIGIT (*s))
d7932 1
a7932 1
		  while (ISDIGIT (*s));
a7941 35
	    case 'e':
	      /* Must be at least one digit.  */
	      my_getExpression (&imm_expr, s);
	      check_absolute_expr (ip, &imm_expr);

	      if ((unsigned long) imm_expr.X_add_number
		  > (unsigned long) OP_MASK_VECBYTE)
		{
		  as_bad (_("bad byte vector index (%ld)"),
			   (long) imm_expr.X_add_number);
		  imm_expr.X_add_number = 0;
		}

	      ip->insn_opcode |= imm_expr.X_add_number << OP_SH_VECBYTE;
	      imm_expr.X_op = O_absent;
	      s = expr_end;
	      continue;

	    case '%':
	      my_getExpression (&imm_expr, s);
	      check_absolute_expr (ip, &imm_expr);

	      if ((unsigned long) imm_expr.X_add_number
		  > (unsigned long) OP_MASK_VECALIGN)
		{
		  as_bad (_("bad byte vector index (%ld)"),
			   (long) imm_expr.X_add_number);
		  imm_expr.X_add_number = 0;
		}

	      ip->insn_opcode |= imm_expr.X_add_number << OP_SH_VECALIGN;
	      imm_expr.X_op = O_absent;
	      s = expr_end;
	      continue;

a7953 1
	  insn_error = _("illegal operands");
a7955 2
      if (save_c)
	*(--s) = save_c;
d7983 2
a7984 2
  mips16_small = FALSE;
  mips16_ext = FALSE;
d7986 1
a7986 1
  for (s = str; ISLOWER (*s); ++s)
d8001 1
a8001 1
	  mips16_small = TRUE;
d8008 1
a8008 1
	  mips16_ext = TRUE;
d8019 1
a8019 1
    mips16_small = TRUE;
d8034 1
a8034 1
      ip->use_extend = FALSE;
d8036 1
a8036 3
      imm_reloc[0] = BFD_RELOC_UNUSED;
      imm_reloc[1] = BFD_RELOC_UNUSED;
      imm_reloc[2] = BFD_RELOC_UNUSED;
d8038 1
a8038 3
      offset_reloc[0] = BFD_RELOC_UNUSED;
      offset_reloc[1] = BFD_RELOC_UNUSED;
      offset_reloc[2] = BFD_RELOC_UNUSED;
d8058 1
a8058 1
		      && *imm_reloc > BFD_RELOC_UNUSED
d8061 3
a8063 2
		      mips16_immed (NULL, 0, *imm_reloc - BFD_RELOC_UNUSED,
				    imm_expr.X_add_number, TRUE, mips16_small,
d8067 1
a8067 1
		      *imm_reloc = BFD_RELOC_UNUSED;
d8119 1
a8119 1
	      if (ISDIGIT (s[1]))
d8129 1
a8129 1
		  while (ISDIGIT (*s));
d8138 1
a8138 6
		  if (s[1] == 'r' && s[2] == 'a')
		    {
		      s += 3;
		      regno = RA;
		    }
		  else if (s[1] == 'f' && s[2] == 'p')
a8167 5
		  else if (s[1] == 'z' && s[2] == 'e' && s[3] == 'r' && s[4] == 'o')
		    {
		      s += 5;
		      regno = ZERO;
		    }
d8180 1
a8180 1
		      ++args;
d8291 2
a8292 2
		      mips16_ext = TRUE;
		      *imm_reloc = BFD_RELOC_MIPS16_GPREL;
d8294 1
a8294 1
		      ip->use_extend = TRUE;
d8319 1
a8319 1
		      *imm_reloc = (int) BFD_RELOC_UNUSED + c;
d8327 1
a8327 1
	      *imm_reloc = (int) BFD_RELOC_UNUSED + c;
d8345 1
a8345 1
	      *offset_reloc = (int) BFD_RELOC_UNUSED + c;
d8367 1
a8367 1
	      *offset_reloc = BFD_RELOC_MIPS16_JMP;
d8400 1
a8400 1
		    while (ISDIGIT (*s))
d8427 1
a8427 1
			while (ISDIGIT (*s))
d8448 1
a8448 1
		    else if (reg1 == RA && reg2 == RA)
d8570 3
a8572 3
     bfd_boolean warn;
     bfd_boolean small;
     bfd_boolean ext;
d8574 1
a8574 1
     bfd_boolean *use_extend;
d8579 1
a8579 1
  bfd_boolean needext;
d8614 1
a8614 1
    needext = TRUE;
d8616 1
a8616 1
    needext = FALSE;
d8628 1
a8628 1
      *use_extend = FALSE;
d8652 1
a8652 1
      *use_extend = TRUE;
d8674 2
a8675 25
static const struct percent_op_match
{
  const char *str;
  bfd_reloc_code_real_type reloc;
} percent_op[] =
{
  {"%lo", BFD_RELOC_LO16},
#ifdef OBJ_ELF
  {"%call_hi", BFD_RELOC_MIPS_CALL_HI16},
  {"%call_lo", BFD_RELOC_MIPS_CALL_LO16},
  {"%call16", BFD_RELOC_MIPS_CALL16},
  {"%got_disp", BFD_RELOC_MIPS_GOT_DISP},
  {"%got_page", BFD_RELOC_MIPS_GOT_PAGE},
  {"%got_ofst", BFD_RELOC_MIPS_GOT_OFST},
  {"%got_hi", BFD_RELOC_MIPS_GOT_HI16},
  {"%got_lo", BFD_RELOC_MIPS_GOT_LO16},
  {"%got", BFD_RELOC_MIPS_GOT16},
  {"%gp_rel", BFD_RELOC_GPREL16},
  {"%half", BFD_RELOC_16},
  {"%highest", BFD_RELOC_MIPS_HIGHEST},
  {"%higher", BFD_RELOC_MIPS_HIGHER},
  {"%neg", BFD_RELOC_MIPS_SUB},
#endif
  {"%hi", BFD_RELOC_HI16_S}
};
d8677 2
a8678 41

/* Return true if *STR points to a relocation operator.  When returning true,
   move *STR over the operator and store its relocation code in *RELOC.
   Leave both *STR and *RELOC alone when returning false.  */

static bfd_boolean
parse_relocation (str, reloc)
     char **str;
     bfd_reloc_code_real_type *reloc;
{
  size_t i;

  for (i = 0; i < ARRAY_SIZE (percent_op); i++)
    if (strncasecmp (*str, percent_op[i].str, strlen (percent_op[i].str)) == 0)
      {
	*str += strlen (percent_op[i].str);
	*reloc = percent_op[i].reloc;

	/* Check whether the output BFD supports this relocation.
	   If not, issue an error and fall back on something safe.  */
	if (!bfd_reloc_type_lookup (stdoutput, percent_op[i].reloc))
	  {
	    as_bad ("relocation %s isn't supported by the current ABI",
		    percent_op[i].str);
	    *reloc = BFD_RELOC_LO16;
	  }
	return TRUE;
      }
  return FALSE;
}


/* Parse string STR as a 16-bit relocatable operand.  Store the
   expression in *EP and the relocations in the array starting
   at RELOC.  Return the number of relocation operators used.

   On exit, EXPR_END points to the first character after the expression.
   If no relocation operators are used, RELOC[0] is set to BFD_RELOC_LO16.  */

static size_t
my_getSmallExpression (ep, reloc, str)
a8679 1
     bfd_reloc_code_real_type *reloc;
d8682 2
a8683 4
  bfd_reloc_code_real_type reversed_reloc[3];
  size_t reloc_index, i;
  int crux_depth, str_depth;
  char *crux;
d8685 8
a8692 7
  /* Search for the start of the main expression, recoding relocations
     in REVERSED_RELOC.  End the loop with CRUX pointing to the start
     of the main expression and with CRUX_DEPTH containing the number
     of open brackets at that point.  */
  reloc_index = -1;
  str_depth = 0;
  do
d8694 7
a8700 3
      reloc_index++;
      crux = str;
      crux_depth = str_depth;
d8702 57
a8758 30
      /* Skip over whitespace and brackets, keeping count of the number
	 of brackets.  */
      while (*str == ' ' || *str == '\t' || *str == '(')
	if (*str++ == '(')
	  str_depth++;
    }
  while (*str == '%'
	 && reloc_index < (HAVE_NEWABI ? 3 : 1)
	 && parse_relocation (&str, &reversed_reloc[reloc_index]));

  my_getExpression (ep, crux);
  str = expr_end;

  /* Match every open bracket.  */
  while (crux_depth > 0 && (*str == ')' || *str == ' ' || *str == '\t'))
    if (*str++ == ')')
      crux_depth--;

  if (crux_depth > 0)
    as_bad ("unclosed '('");

  expr_end = str;

  if (reloc_index == 0)
    reloc[0] = BFD_RELOC_LO16;
  else
    {
      prev_reloc_op_frag = frag_now;
      for (i = 0; i < reloc_index; i++)
	reloc[i] = reversed_reloc[reloc_index - 1 - i];
d8760 2
a8761 2

  return reloc_index;
d8861 1
a8861 24
#ifdef OBJ_ELF
static int support_64bit_objects(void)
{
  const char **list, **l;
  int yes;

  list = bfd_target_list ();
  for (l = list; *l != NULL; l++)
#ifdef TE_TMIPS
    /* This is traditional mips */
    if (strcmp (*l, "elf64-tradbigmips") == 0
	|| strcmp (*l, "elf64-tradlittlemips") == 0)
#else
    if (strcmp (*l, "elf64-bigmips") == 0
	|| strcmp (*l, "elf64-littlemips") == 0)
#endif
      break;
  yes = (*l != NULL);
  free (list);
  return yes;
}
#endif /* OBJ_ELF */

const char *md_shortopts = "nO::g::G:";
d8874 3
a8876 7
#define OPTION_MIPS5 (OPTION_MD_BASE + 5)
  {"mips5", no_argument, NULL, OPTION_MIPS5},
#define OPTION_MIPS32 (OPTION_MD_BASE + 6)
  {"mips32", no_argument, NULL, OPTION_MIPS32},
#define OPTION_MIPS64 (OPTION_MD_BASE + 7)
  {"mips64", no_argument, NULL, OPTION_MIPS64},
#define OPTION_MEMBEDDED_PIC (OPTION_MD_BASE + 8)
d8878 1
a8878 1
#define OPTION_TRAP (OPTION_MD_BASE + 9)
d8881 1
a8881 1
#define OPTION_BREAK (OPTION_MD_BASE + 10)
d8884 1
a8884 1
#define OPTION_EB (OPTION_MD_BASE + 11)
d8886 1
a8886 1
#define OPTION_EL (OPTION_MD_BASE + 12)
d8888 1
a8888 24
#define OPTION_MIPS16 (OPTION_MD_BASE + 13)
  {"mips16", no_argument, NULL, OPTION_MIPS16},
#define OPTION_NO_MIPS16 (OPTION_MD_BASE + 14)
  {"no-mips16", no_argument, NULL, OPTION_NO_MIPS16},
#define OPTION_M7000_HILO_FIX (OPTION_MD_BASE + 15)
  {"mfix7000", no_argument, NULL, OPTION_M7000_HILO_FIX},
#define OPTION_MNO_7000_HILO_FIX (OPTION_MD_BASE + 16)
  {"no-fix-7000", no_argument, NULL, OPTION_MNO_7000_HILO_FIX},
  {"mno-fix7000", no_argument, NULL, OPTION_MNO_7000_HILO_FIX},
#define OPTION_FP32 (OPTION_MD_BASE + 17)
  {"mfp32", no_argument, NULL, OPTION_FP32},
#define OPTION_GP32 (OPTION_MD_BASE + 18)
  {"mgp32", no_argument, NULL, OPTION_GP32},
#define OPTION_CONSTRUCT_FLOATS (OPTION_MD_BASE + 19)
  {"construct-floats", no_argument, NULL, OPTION_CONSTRUCT_FLOATS},
#define OPTION_NO_CONSTRUCT_FLOATS (OPTION_MD_BASE + 20)
  {"no-construct-floats", no_argument, NULL, OPTION_NO_CONSTRUCT_FLOATS},
#define OPTION_MARCH (OPTION_MD_BASE + 21)
  {"march", required_argument, NULL, OPTION_MARCH},
#define OPTION_MTUNE (OPTION_MD_BASE + 22)
  {"mtune", required_argument, NULL, OPTION_MTUNE},
#define OPTION_FP64 (OPTION_MD_BASE + 23)
  {"mfp64", no_argument, NULL, OPTION_FP64},
#define OPTION_M4650 (OPTION_MD_BASE + 24)
d8890 1
a8890 1
#define OPTION_NO_M4650 (OPTION_MD_BASE + 25)
d8892 1
a8892 1
#define OPTION_M4010 (OPTION_MD_BASE + 26)
d8894 1
a8894 1
#define OPTION_NO_M4010 (OPTION_MD_BASE + 27)
d8896 1
a8896 1
#define OPTION_M4100 (OPTION_MD_BASE + 28)
d8898 1
a8898 1
#define OPTION_NO_M4100 (OPTION_MD_BASE + 29)
d8900 5
a8904 1
#define OPTION_M3900 (OPTION_MD_BASE + 30)
d8906 1
a8906 1
#define OPTION_NO_M3900 (OPTION_MD_BASE + 31)
d8908 9
a8916 1
#define OPTION_GP64 (OPTION_MD_BASE + 32)
d8918 10
a8927 18
#define OPTION_MIPS3D (OPTION_MD_BASE + 33)
  {"mips3d", no_argument, NULL, OPTION_MIPS3D},
#define OPTION_NO_MIPS3D (OPTION_MD_BASE + 34)
  {"no-mips3d", no_argument, NULL, OPTION_NO_MIPS3D},
#define OPTION_MDMX (OPTION_MD_BASE + 35)
  {"mdmx", no_argument, NULL, OPTION_MDMX},
#define OPTION_NO_MDMX (OPTION_MD_BASE + 36)
  {"no-mdmx", no_argument, NULL, OPTION_NO_MDMX},
#define OPTION_FIX_VR4122 (OPTION_MD_BASE + 37)
#define OPTION_NO_FIX_VR4122 (OPTION_MD_BASE + 38)
  {"mfix-vr4122-bugs",    no_argument, NULL, OPTION_FIX_VR4122},
  {"no-mfix-vr4122-bugs", no_argument, NULL, OPTION_NO_FIX_VR4122},
#define OPTION_RELAX_BRANCH (OPTION_MD_BASE + 39)
#define OPTION_NO_RELAX_BRANCH (OPTION_MD_BASE + 40)
  {"relax-branch", no_argument, NULL, OPTION_RELAX_BRANCH},
  {"no-relax-branch", no_argument, NULL, OPTION_NO_RELAX_BRANCH},
#define OPTION_MIPS32R2 (OPTION_MD_BASE + 41)
  {"mips32r2", no_argument, NULL, OPTION_MIPS32R2},
d8929 1
a8929 1
#define OPTION_ELF_BASE    (OPTION_MD_BASE + 42)
d8931 4
a8936 1
#define OPTION_NON_SHARED  (OPTION_ELF_BASE + 1)
a8937 1
#define OPTION_XGOT        (OPTION_ELF_BASE + 2)
a8938 3
#define OPTION_MABI        (OPTION_ELF_BASE + 3)
  {"mabi", required_argument, NULL, OPTION_MABI},
#define OPTION_32 	   (OPTION_ELF_BASE + 4)
a8939 3
#define OPTION_N32 	   (OPTION_ELF_BASE + 5)
  {"n32",         no_argument, NULL, OPTION_N32},
#define OPTION_64          (OPTION_ELF_BASE + 6)
d8941 2
a8942 5
#define OPTION_MDEBUG      (OPTION_ELF_BASE + 7)
  {"mdebug", no_argument, NULL, OPTION_MDEBUG},
#define OPTION_NO_MDEBUG   (OPTION_ELF_BASE + 8)
  {"no-mdebug", no_argument, NULL, OPTION_NO_MDEBUG},
#endif /* OBJ_ELF */
a8946 18
/* Set STRING_PTR (either &mips_arch_string or &mips_tune_string) to
   NEW_VALUE.  Warn if another value was already specified.  Note:
   we have to defer parsing the -march and -mtune arguments in order
   to handle 'from-abi' correctly, since the ABI might be specified
   in a later argument.  */

static void
mips_set_option_string (string_ptr, new_value)
     const char **string_ptr, *new_value;
{
  if (*string_ptr != 0 && strcasecmp (*string_ptr, new_value) != 0)
    as_warn (_("A different %s was already specified, is now %s"),
	     string_ptr == &mips_arch_string ? "-march" : "-mtune",
	     new_value);

  *string_ptr = new_value;
}

a8977 4
    case 'n':
      warn_nops = 1;
      break;

d8998 1
a8998 1
      file_mips_isa = ISA_MIPS1;
d9002 1
a9002 1
      file_mips_isa = ISA_MIPS2;
d9006 1
a9006 1
      file_mips_isa = ISA_MIPS3;
d9010 1
a9010 1
      file_mips_isa = ISA_MIPS4;
d9014 1
a9014 1
      file_mips_isa = ISA_MIPS5;
d9018 1
a9018 5
      file_mips_isa = ISA_MIPS32;
      break;

    case OPTION_MIPS32R2:
      file_mips_isa = ISA_MIPS32R2;
d9022 1
a9022 1
      file_mips_isa = ISA_MIPS64;
d9025 8
a9032 3
    case OPTION_MTUNE:
      mips_set_option_string (&mips_tune_string, arg);
      break;
d9034 7
a9040 2
    case OPTION_MARCH:
      mips_set_option_string (&mips_arch_string, arg);
d9044 1
a9044 2
      mips_set_option_string (&mips_arch_string, "4650");
      mips_set_option_string (&mips_tune_string, "4650");
d9051 1
a9051 2
      mips_set_option_string (&mips_arch_string, "4010");
      mips_set_option_string (&mips_tune_string, "4010");
d9058 1
a9058 2
      mips_set_option_string (&mips_arch_string, "4100");
      mips_set_option_string (&mips_tune_string, "4100");
d9065 1
a9065 2
      mips_set_option_string (&mips_arch_string, "3900");
      mips_set_option_string (&mips_tune_string, "3900");
a9070 8
    case OPTION_MDMX:
      mips_opts.ase_mdmx = 1;
      break;

    case OPTION_NO_MDMX:
      mips_opts.ase_mdmx = 0;
      break;

d9073 1
a9073 1
      mips_no_prev_insn (FALSE);
d9078 1
a9078 9
      mips_no_prev_insn (FALSE);
      break;

    case OPTION_MIPS3D:
      mips_opts.ase_mips3d = 1;
      break;

    case OPTION_NO_MIPS3D:
      mips_opts.ase_mips3d = 0;
a9090 16
    case OPTION_FIX_VR4122:
      mips_fix_4122_bugs = 1;
      break;

    case OPTION_NO_FIX_VR4122:
      mips_fix_4122_bugs = 0;
      break;

    case OPTION_RELAX_BRANCH:
      mips_relax_branch = 1;
      break;

    case OPTION_NO_RELAX_BRANCH:
      mips_relax_branch = 0;
      break;

d9144 2
a9145 2
      /* The -32, -n32 and -64 options are shortcuts for -mabi=32, -mabi=n32
	 and -mabi=64.  */
d9147 1
a9147 6
      if (OUTPUT_FLAVOR != bfd_target_elf_flavour)
	{
	  as_bad (_("-32 is supported for ELF format only"));
	  return 0;
	}
      mips_abi = O32_ABI;
d9150 3
a9152 8
    case OPTION_N32:
      if (OUTPUT_FLAVOR != bfd_target_elf_flavour)
	{
	  as_bad (_("-n32 is supported for ELF format only"));
	  return 0;
	}
      mips_abi = N32_ABI;
      break;
d9154 12
a9165 9
    case OPTION_64:
      if (OUTPUT_FLAVOR != bfd_target_elf_flavour)
	{
	  as_bad (_("-64 is supported for ELF format only"));
	  return 0;
	}
      mips_abi = N64_ABI;
      if (! support_64bit_objects())
	as_fatal (_("No compiled in support for 64 bit object file format"));
d9170 2
a9171 2
      file_mips_gp32 = 1;
      break;
d9173 8
a9180 3
    case OPTION_GP64:
      file_mips_gp32 = 0;
      break;
d9182 3
a9184 2
    case OPTION_FP32:
      file_mips_fp32 = 1;
d9187 6
a9192 2
    case OPTION_FP64:
      file_mips_fp32 = 0;
a9194 1
#ifdef OBJ_ELF
d9196 6
a9201 25
      if (OUTPUT_FLAVOR != bfd_target_elf_flavour)
	{
	  as_bad (_("-mabi is supported for ELF format only"));
	  return 0;
	}
      if (strcmp (arg, "32") == 0)
	mips_abi = O32_ABI;
      else if (strcmp (arg, "o64") == 0)
	mips_abi = O64_ABI;
      else if (strcmp (arg, "n32") == 0)
	mips_abi = N32_ABI;
      else if (strcmp (arg, "64") == 0)
	{
	  mips_abi = N64_ABI;
	  if (! support_64bit_objects())
	    as_fatal (_("No compiled in support for 64 bit object file "
			"format"));
	}
      else if (strcmp (arg, "eabi") == 0)
	mips_abi = EABI_ABI;
      else
	{
	  as_fatal (_("invalid abi -mabi=%s"), arg);
	  return 0;
	}
a9202 1
#endif /* OBJ_ELF */
d9205 1
a9205 10
      mips_7000_hilo_fix = TRUE;
      break;

    case OPTION_MNO_7000_HILO_FIX:
      mips_7000_hilo_fix = FALSE;
      break;

#ifdef OBJ_ELF
    case OPTION_MDEBUG:
      mips_flag_mdebug = TRUE;
d9208 2
a9209 2
    case OPTION_NO_MDEBUG:
      mips_flag_mdebug = FALSE;
a9210 1
#endif /* OBJ_ELF */
a9217 3

/* Set up globals to generate code for the ISA or processor
   described by INFO.  */
d9220 5
a9224 2
mips_set_architecture (info)
     const struct mips_cpu_info *info;
d9226 1
a9226 1
  if (info != 0)
d9228 2
a9229 3
      mips_arch_info = info;
      mips_arch = info->cpu;
      mips_opts.isa = info->isa;
d9231 1
a9231 10
}


/* Likewise for tuning.  */

static void
mips_set_tune (info)
     const struct mips_cpu_info *info;
{
  if (info != 0)
d9233 2
a9234 2
      mips_tune_info = info;
      mips_tune = info->cpu;
a9235 1
}
d9237 1
a9237 28

void
mips_after_parse_args ()
{
  /* GP relative stuff not working for PE */
  if (strncmp (TARGET_OS, "pe", 2) == 0
      && g_switch_value != 0)
    {
      if (g_switch_seen)
	as_bad (_("-G not supported in this configuration."));
      g_switch_value = 0;
    }

  if (mips_abi == NO_ABI)
    mips_abi = MIPS_DEFAULT_ABI;

  /* The following code determines the architecture and register size.
     Similar code was added to GCC 3.3 (see override_options() in
     config/mips/mips.c).  The GAS and GCC code should be kept in sync
     as much as possible.  */

  if (mips_arch_string != 0)
    mips_set_architecture (mips_parse_cpu ("-march", mips_arch_string));

  if (mips_tune_string != 0)
    mips_set_tune (mips_parse_cpu ("-mtune", mips_tune_string));

  if (file_mips_isa != ISA_UNKNOWN)
d9239 2
a9240 15
      /* Handle -mipsN.  At this point, file_mips_isa contains the
	 ISA level specified by -mipsN, while mips_opts.isa contains
	 the -march selection (if any).  */
      if (mips_arch_info != 0)
	{
	  /* -march takes precedence over -mipsN, since it is more descriptive.
	     There's no harm in specifying both as long as the ISA levels
	     are the same.  */
	  if (file_mips_isa != mips_opts.isa)
	    as_bad (_("-%s conflicts with the other architecture options, which imply -%s"),
		    mips_cpu_info_from_isa (file_mips_isa)->name,
		    mips_cpu_info_from_isa (mips_opts.isa)->name);
	}
      else
	mips_set_architecture (mips_cpu_info_from_isa (file_mips_isa));
d9243 2
a9244 3
  if (mips_arch_info == 0)
    mips_set_architecture (mips_parse_cpu ("default CPU",
					   MIPS_CPU_STRING_DEFAULT));
d9246 2
a9247 3
  if (ABI_NEEDS_64BIT_REGS (mips_abi) && !ISA_HAS_64BIT_REGS (mips_opts.isa))
    as_bad ("-march=%s is not compatible with the selected ABI",
	    mips_arch_info->name);
d9249 5
a9253 3
  /* Optimize for mips_arch, unless -mtune selects a different processor.  */
  if (mips_tune_info == 0)
    mips_set_tune (mips_arch_info);
d9255 17
a9271 19
  if (file_mips_gp32 >= 0)
    {
      /* The user specified the size of the integer registers.  Make sure
	 it agrees with the ABI and ISA.  */
      if (file_mips_gp32 == 0 && !ISA_HAS_64BIT_REGS (mips_opts.isa))
	as_bad (_("-mgp64 used with a 32-bit processor"));
      else if (file_mips_gp32 == 1 && ABI_NEEDS_64BIT_REGS (mips_abi))
	as_bad (_("-mgp32 used with a 64-bit ABI"));
      else if (file_mips_gp32 == 0 && ABI_NEEDS_32BIT_REGS (mips_abi))
	as_bad (_("-mgp64 used with a 32-bit ABI"));
    }
  else
    {
      /* Infer the integer register size from the ABI and processor.
	 Restrict ourselves to 32-bit registers if that's all the
	 processor has, or if the ABI cannot handle 64-bit registers.  */
      file_mips_gp32 = (ABI_NEEDS_32BIT_REGS (mips_abi)
			|| !ISA_HAS_64BIT_REGS (mips_opts.isa));
    }
d9273 1
a9273 8
  /* ??? GAS treats single-float processors as though they had 64-bit
     float registers (although it complains when double-precision
     instructions are used).  As things stand, saying they have 32-bit
     registers would lead to spurious "register must be even" messages.
     So here we assume float registers are always the same size as
     integer ones, unless the user says otherwise.  */
  if (file_mips_fp32 < 0)
    file_mips_fp32 = file_mips_gp32;
d9275 19
a9293 1
  /* End of GCC-shared inference code.  */
d9295 4
a9298 5
  /* ??? When do we want this flag to be set?   Who uses it?  */
  if (file_mips_gp32 == 1
      && mips_abi == NO_ABI
      && ISA_HAS_64BIT_REGS (mips_opts.isa))
    mips_32bitmode = 1;
d9300 1
a9300 2
  if (mips_opts.isa == ISA_MIPS1 && mips_trap)
    as_bad (_("trap exception not supported at ISA 1"));
d9302 5
a9306 8
  /* If the selected architecture includes support for ASEs, enable
     generation of code for them.  */
  if (mips_opts.mips16 == -1)
    mips_opts.mips16 = (CPU_HAS_MIPS16 (mips_arch)) ? 1 : 0;
  if (mips_opts.ase_mips3d == -1)
    mips_opts.ase_mips3d = (CPU_HAS_MIPS3D (mips_arch)) ? 1 : 0;
  if (mips_opts.ase_mdmx == -1)
    mips_opts.ase_mdmx = (CPU_HAS_MDMX (mips_arch)) ? 1 : 0;
d9308 17
a9324 16
  file_mips_isa = mips_opts.isa;
  file_ase_mips16 = mips_opts.mips16;
  file_ase_mips3d = mips_opts.ase_mips3d;
  file_ase_mdmx = mips_opts.ase_mdmx;
  mips_opts.gp32 = file_mips_gp32;
  mips_opts.fp32 = file_mips_fp32;

  if (mips_flag_mdebug < 0)
    {
#ifdef OBJ_MAYBE_ECOFF
      if (OUTPUT_FLAVOR == bfd_target_ecoff_flavour)
	mips_flag_mdebug = 1;
      else
#endif /* OBJ_MAYBE_ECOFF */
	mips_flag_mdebug = 0;
    }
d9342 5
a9346 1
    return 4;
d9348 1
a9348 1
  /* Return the address of the delay slot.  */
d9352 31
d9402 1
a9402 1
   the corresponding LO reloc.  This is called before md_apply_fix3 and
d9416 1
a9416 7
      assert (reloc_needs_lo_p (l->fixp->fx_r_type));

      /* If a GOT16 relocation turns out to be against a global symbol,
	 there isn't supposed to be a matching LO.  */
      if (l->fixp->fx_r_type == BFD_RELOC_MIPS_GOT16
	  && !pic_need_relax (l->fixp->fx_addsy, l->seg))
	continue;
d9418 6
a9423 2
      /* Check quickly whether the next fixup happens to be a matching %lo.  */
      if (fixup_has_matching_lo_p (l->fixp))
d9445 3
a9447 2
		      || !reloc_needs_lo_p (prev->fx_r_type)
		      || !fixup_has_matching_lo_p (prev)))
d9499 1
a9499 4
   to keep relocations for switch table entries.

   We may have combined relocations without symbols in the N32/N64 ABI.
   We have to prevent gas from dropping them.  */
d9505 2
a9506 8
  if (generic_force_reloc (fixp))
    return 1;

  if (HAVE_NEWABI
      && S_GET_SEGMENT (fixp->fx_addsy) == bfd_abs_section_ptr
      && (fixp->fx_r_type == BFD_RELOC_MIPS_SUB
	  || fixp->fx_r_type == BFD_RELOC_HI16_S
	  || fixp->fx_r_type == BFD_RELOC_LO16))
d9516 1
a9516 12
/* This hook is called before a fix is simplified.  We don't really
   decide whether to skip a fix here.  Rather, we turn global symbols
   used as branch targets into local symbols, such that they undergo
   simplification.  We can only do this if the symbol is defined and
   it is in the same section as the branch.  If this doesn't hold, we
   emit a better error message than just saying the relocation is not
   valid for the selected object format.

   FIXP is the fix-up we're going to try to simplify, SEG is the
   segment in which the fix up occurs.  The return value should be
   non-zero to indicate the fix-up is valid for further
   simplifications.  */
d9519 1
a9519 95
mips_validate_fix (fixP, seg)
     struct fix *fixP;
     asection *seg;
{
  /* There's a lot of discussion on whether it should be possible to
     use R_MIPS_PC16 to represent branch relocations.  The outcome
     seems to be that it can, but gas/bfd are very broken in creating
     RELA relocations for this, so for now we only accept branches to
     symbols in the same section.  Anything else is of dubious value,
     since there's no guarantee that at link time the symbol would be
     in range.  Even for branches to local symbols this is arguably
     wrong, since it we assume the symbol is not going to be
     overridden, which should be possible per ELF library semantics,
     but then, there isn't a dynamic relocation that could be used to
     this effect, and the target would likely be out of range as well.

     Unfortunately, it seems that there is too much code out there
     that relies on branches to symbols that are global to be resolved
     as if they were local, like the IRIX tools do, so we do it as
     well, but with a warning so that people are reminded to fix their
     code.  If we ever get back to using R_MIPS_PC16 for branch
     targets, this entire block should go away (and probably the
     whole function).  */

  if (fixP->fx_r_type == BFD_RELOC_16_PCREL_S2
      && (((OUTPUT_FLAVOR == bfd_target_ecoff_flavour
	    || OUTPUT_FLAVOR == bfd_target_elf_flavour)
	   && mips_pic != EMBEDDED_PIC)
	  || bfd_reloc_type_lookup (stdoutput, BFD_RELOC_16_PCREL_S2) == NULL)
      && fixP->fx_addsy)
    {
      if (! S_IS_DEFINED (fixP->fx_addsy))
	{
	  as_bad_where (fixP->fx_file, fixP->fx_line,
			_("Cannot branch to undefined symbol."));
	  /* Avoid any further errors about this fixup.  */
	  fixP->fx_done = 1;
	}
      else if (S_GET_SEGMENT (fixP->fx_addsy) != seg)
	{
	  as_bad_where (fixP->fx_file, fixP->fx_line,
			_("Cannot branch to symbol in another section."));
	  fixP->fx_done = 1;
	}
      else if (S_IS_EXTERNAL (fixP->fx_addsy))
	{
	  symbolS *sym = fixP->fx_addsy;

	  as_warn_where (fixP->fx_file, fixP->fx_line,
			 _("Pretending global symbol used as branch target is local."));

	  fixP->fx_addsy = symbol_create (S_GET_NAME (sym),
					  S_GET_SEGMENT (sym),
					  S_GET_VALUE (sym),
					  symbol_get_frag (sym));
	  copy_symbol_attributes (fixP->fx_addsy, sym);
	  S_CLEAR_EXTERNAL (fixP->fx_addsy);
	  assert (symbol_resolved_p (sym));
	  symbol_mark_resolved (fixP->fx_addsy);
	}
    }

  return 1;
}

#ifdef OBJ_ELF
static int
mips_need_elf_addend_fixup (fixP)
     fixS *fixP;
{
  if (S_GET_OTHER (fixP->fx_addsy) == STO_MIPS16)
    return 1;
  if (mips_pic == EMBEDDED_PIC
      && S_IS_WEAK (fixP->fx_addsy))
    return 1;
  if (mips_pic != EMBEDDED_PIC
      && (S_IS_WEAK (fixP->fx_addsy)
	  || S_IS_EXTERNAL (fixP->fx_addsy))
      && !S_IS_COMMON (fixP->fx_addsy))
    return 1;
  if (((bfd_get_section_flags (stdoutput,
			       S_GET_SEGMENT (fixP->fx_addsy))
	& (SEC_LINK_ONCE | SEC_MERGE)) != 0)
      || !strncmp (segment_name (S_GET_SEGMENT (fixP->fx_addsy)),
		   ".gnu.linkonce",
		   sizeof (".gnu.linkonce") - 1))
    return 1;
  return 0;
}
#endif

/* Apply a fixup to the object file.  */

void
md_apply_fix3 (fixP, valP, seg)
d9521 1
a9521 2
     valueT *valP;
     segT seg ATTRIBUTE_UNUSED;
d9523 1
a9523 1
  bfd_byte *buf;
a9525 6
  static int previous_fx_r_type = 0;

  /* FIXME: Maybe just return for all reloc types not listed below?
     Eric Christopher says: "This is stupid, please rewrite md_apply_fix3. */
  if (fixP->fx_r_type == BFD_RELOC_8)
      return;
a9528 7
	  || fixP->fx_r_type == BFD_RELOC_32
	  || fixP->fx_r_type == BFD_RELOC_MIPS_JMP
	  || fixP->fx_r_type == BFD_RELOC_HI16_S
	  || fixP->fx_r_type == BFD_RELOC_LO16
	  || fixP->fx_r_type == BFD_RELOC_GPREL16
	  || fixP->fx_r_type == BFD_RELOC_MIPS_LITERAL
	  || fixP->fx_r_type == BFD_RELOC_GPREL32
a9529 7
	  || fixP->fx_r_type == BFD_RELOC_CTOR
	  || fixP->fx_r_type == BFD_RELOC_MIPS_SUB
	  || fixP->fx_r_type == BFD_RELOC_MIPS_HIGHEST
	  || fixP->fx_r_type == BFD_RELOC_MIPS_HIGHER
	  || fixP->fx_r_type == BFD_RELOC_MIPS_SCN_DISP
	  || fixP->fx_r_type == BFD_RELOC_MIPS_REL16
	  || fixP->fx_r_type == BFD_RELOC_MIPS_RELGOT
d9531 1
a9531 2
	  || fixP->fx_r_type == BFD_RELOC_VTABLE_ENTRY
	  || fixP->fx_r_type == BFD_RELOC_MIPS_JALR);
d9533 1
a9533 1
  value = *valP;
d9540 10
a9549 1
      if (mips_need_elf_addend_fixup (fixP))
a9550 1
	  reloc_howto_type *howto;
a9551 1

d9553 1
a9553 3

	  howto = bfd_reloc_type_lookup (stdoutput, fixP->fx_r_type);
	  if (value != 0 && howto && howto->partial_inplace)
d9558 1
a9558 22

		 The condition above used to include
		 "&& (! fixP->fx_pcrel || howto->pcrel_offset)".

		 However, howto can't be trusted here, because we
		 might change the reloc type in tc_gen_reloc.  We can
		 check howto->partial_inplace because that conversion
		 happens to preserve howto->partial_inplace; but it
		 does not preserve howto->pcrel_offset.  I've just
		 eliminated the check, because all MIPS PC-relative
		 relocations are marked howto->pcrel_offset.

		 howto->pcrel_offset was originally added for
		 R_MIPS_PC16, which is generated for code like

		 	globl g1 .text
			.text
			.space 20
		 g1:
		 x:
		 	bal g1
	       */
a9559 32

	      /* Make sure the addend is still non-zero.  If it became zero
		 after the last operation, set it to a spurious value and
		 subtract the same value from the object file's contents.  */
	      if (value == 0)
		{
		  value = 8;

		  /* The in-place addends for LO16 relocations are signed;
		     leave the matching HI16 in-place addends as zero.  */
		  if (fixP->fx_r_type != BFD_RELOC_HI16_S)
		    {
		      bfd_vma contents, mask, field;

		      contents = bfd_get_bits (fixP->fx_frag->fr_literal
					       + fixP->fx_where,
					       fixP->fx_size * 8,
					       target_big_endian);

		      /* MASK has bits set where the relocation should go.
			 FIELD is -value, shifted into the appropriate place
			 for this relocation.  */
		      mask = 1 << (howto->bitsize - 1);
		      mask = (((mask - 1) << 1) | 1) << howto->bitpos;
		      field = (-value >> howto->rightshift) << howto->bitpos;

		      bfd_put_bits ((field & mask) | (contents & ~mask),
				    fixP->fx_frag->fr_literal + fixP->fx_where,
				    fixP->fx_size * 8,
				    target_big_endian);
		    }
		}
d9581 1
a9581 1
  fixP->fx_addnumber = value;	/* Remember value for tc_gen_reloc.  */
d9583 1
a9583 9
  /* We are not done if this is a composite relocation to set up gp.  */
  if (fixP->fx_addsy == NULL && ! fixP->fx_pcrel
      && !(fixP->fx_r_type == BFD_RELOC_MIPS_SUB
	   || (fixP->fx_r_type == BFD_RELOC_64
	       && (previous_fx_r_type == BFD_RELOC_GPREL32
		   || previous_fx_r_type == BFD_RELOC_GPREL16))
	   || (previous_fx_r_type == BFD_RELOC_MIPS_SUB
	       && (fixP->fx_r_type == BFD_RELOC_HI16_S
		   || fixP->fx_r_type == BFD_RELOC_LO16))))
a9584 1
  previous_fx_r_type = fixP->fx_r_type;
a9588 15
    case BFD_RELOC_MIPS_SHIFT5:
    case BFD_RELOC_MIPS_SHIFT6:
    case BFD_RELOC_MIPS_GOT_DISP:
    case BFD_RELOC_MIPS_GOT_PAGE:
    case BFD_RELOC_MIPS_GOT_OFST:
    case BFD_RELOC_MIPS_SUB:
    case BFD_RELOC_MIPS_INSERT_A:
    case BFD_RELOC_MIPS_INSERT_B:
    case BFD_RELOC_MIPS_DELETE:
    case BFD_RELOC_MIPS_HIGHEST:
    case BFD_RELOC_MIPS_HIGHER:
    case BFD_RELOC_MIPS_SCN_DISP:
    case BFD_RELOC_MIPS_REL16:
    case BFD_RELOC_MIPS_RELGOT:
    case BFD_RELOC_MIPS_JALR:
d9591 1
a9591 1
    case BFD_RELOC_GPREL16:
d9595 1
a9595 1
    case BFD_RELOC_GPREL32:
d9630 4
a9633 2
      value = ((value + 0x8000) >> 16) & 0xffff;
      buf = (bfd_byte *) fixP->fx_frag->fr_literal + fixP->fx_where;
d9636 1
a9636 1
      md_number_to_chars ((char *) buf, value, 2);
d9649 1
a9649 1
      buf = (bfd_byte *) fixP->fx_frag->fr_literal + fixP->fx_where;
d9652 1
a9652 1
      md_number_to_chars ((char *) buf, value, 2);
d9714 1
a9714 1
	  buf = (bfd_byte *) fixP->fx_frag->fr_literal + fixP->fx_where;
d9717 1
a9717 1
	  md_number_to_chars ((char *) buf, value, 2);
a9721 4
      if ((value & 0x3) != 0)
	as_bad_where (fixP->fx_file, fixP->fx_line,
		      _("Branch to odd address (%lx)"), (long) value);

d9727 5
a9731 1
      if (!fixP->fx_done && (value != 0 || HAVE_NEWABI))
d9736 1
a9736 4
      if (!fixP->fx_done
	  && (fixP->fx_r_type != BFD_RELOC_16_PCREL_S2
	      || fixP->fx_addsy == NULL			/* ??? */
	      || ! S_IS_DEFINED (fixP->fx_addsy)))
d9742 1
a9742 1
      buf = (bfd_byte *) (fixP->fx_where + fixP->fx_frag->fr_literal);
d9775 7
a9781 3
	      /* If we got here, we have branch-relaxation disabled,
		 and there's nothing we can do to fix this instruction
		 without turning it into a longer sequence.  */
d9805 2
d9920 1
a9920 1
  mips_emit_delays (FALSE);
d9964 1
a9964 1
      ++input_line_pointer;
d9986 1
a9986 1
  mips_emit_delays (FALSE);
d10006 1
a10006 1
     for an obj_section_change_hook macro, but that might be confusing
d10013 1
a10013 1
  mips_emit_delays (FALSE);
a10079 60
s_change_section (ignore)
     int ignore ATTRIBUTE_UNUSED;
{
#ifdef OBJ_ELF
  char *section_name;
  char c;
  char next_c = 0;
  int section_type;
  int section_flag;
  int section_entry_size;
  int section_alignment;

  if (OUTPUT_FLAVOR != bfd_target_elf_flavour)
    return;

  section_name = input_line_pointer;
  c = get_symbol_end ();
  if (c)
    next_c = *(input_line_pointer + 1);

  /* Do we have .section Name<,"flags">?  */
  if (c != ',' || (c == ',' && next_c == '"'))
    {
      /* just after name is now '\0'.  */
      *input_line_pointer = c;
      input_line_pointer = section_name;
      obj_elf_section (ignore);
      return;
    }
  input_line_pointer++;

  /* Do we have .section Name<,type><,flag><,entry_size><,alignment>  */
  if (c == ',')
    section_type = get_absolute_expression ();
  else
    section_type = 0;
  if (*input_line_pointer++ == ',')
    section_flag = get_absolute_expression ();
  else
    section_flag = 0;
  if (*input_line_pointer++ == ',')
    section_entry_size = get_absolute_expression ();
  else
    section_entry_size = 0;
  if (*input_line_pointer++ == ',')
    section_alignment = get_absolute_expression ();
  else
    section_alignment = 0;

  section_name = xstrdup (section_name);

  obj_elf_change_section (section_name, section_type, section_flag,
			  section_entry_size, 0, 0, 0);

  if (now_seg->name != section_name)
    free (section_name);
#endif /* OBJ_ELF */
}

void
d10092 1
a10092 1
  mips_emit_delays (FALSE);
d10107 1
a10107 1
  mips_emit_delays (FALSE);
d10229 1
a10229 1
    ++input_line_pointer;
d10248 1
a10248 1
      mips_emit_delays (TRUE);
a10291 8
  else if (strcmp (name, "mips3d") == 0)
    mips_opts.ase_mips3d = 1;
  else if (strcmp (name, "nomips3d") == 0)
    mips_opts.ase_mips3d = 0;
  else if (strcmp (name, "mdmx") == 0)
    mips_opts.ase_mdmx = 1;
  else if (strcmp (name, "nomdmx") == 0)
    mips_opts.ase_mdmx = 0;
d10294 1
a10294 1
      int reset = 0;
d10298 13
a10310 51
      if (strcmp (name, "mips0") == 0)
	{
	  reset = 1;
	  mips_opts.isa = file_mips_isa;
	}
      else if (strcmp (name, "mips1") == 0)
	mips_opts.isa = ISA_MIPS1;
      else if (strcmp (name, "mips2") == 0)
	mips_opts.isa = ISA_MIPS2;
      else if (strcmp (name, "mips3") == 0)
	mips_opts.isa = ISA_MIPS3;
      else if (strcmp (name, "mips4") == 0)
	mips_opts.isa = ISA_MIPS4;
      else if (strcmp (name, "mips5") == 0)
	mips_opts.isa = ISA_MIPS5;
      else if (strcmp (name, "mips32") == 0)
	mips_opts.isa = ISA_MIPS32;
      else if (strcmp (name, "mips32r2") == 0)
	mips_opts.isa = ISA_MIPS32R2;
      else if (strcmp (name, "mips64") == 0)
	mips_opts.isa = ISA_MIPS64;
      else
	as_bad (_("unknown ISA level %s"), name + 4);

      switch (mips_opts.isa)
	{
	case  0:
	  break;
	case ISA_MIPS1:
	case ISA_MIPS2:
	case ISA_MIPS32:
	case ISA_MIPS32R2:
	  mips_opts.gp32 = 1;
	  mips_opts.fp32 = 1;
	  break;
	case ISA_MIPS3:
	case ISA_MIPS4:
	case ISA_MIPS5:
	case ISA_MIPS64:
	  mips_opts.gp32 = 0;
	  mips_opts.fp32 = 0;
	  break;
	default:
	  as_bad (_("unknown ISA level %s"), name + 4);
	  break;
	}
      if (reset)
	{
	  mips_opts.gp32 = file_mips_gp32;
	  mips_opts.fp32 = file_mips_fp32;
	}
d10337 1
a10337 1
	    mips_emit_delays (TRUE);
d10396 2
a10397 3
  /* If we are not generating SVR4 PIC code, or if this is NewABI code,
     .cpload is ignored.  */
  if (mips_pic != SVR4_PIC || HAVE_NEWABI)
d10403 1
a10403 1
  /* .cpload should be in a .set noreorder section.  */
d10415 3
a10417 156
  macro_build_lui (NULL, &icnt, &ex, mips_gp_register);
  macro_build ((char *) NULL, &icnt, &ex, "addiu", "t,r,j",
	       mips_gp_register, mips_gp_register, (int) BFD_RELOC_LO16);

  macro_build ((char *) NULL, &icnt, (expressionS *) NULL, "addu", "d,v,t",
	       mips_gp_register, mips_gp_register, tc_get_register (0));

  demand_empty_rest_of_line ();
}

/* Handle the .cpsetup pseudo-op defined for NewABI PIC code.  The syntax is:
     .cpsetup $reg1, offset|$reg2, label

   If offset is given, this results in:
     sd		$gp, offset($sp)
     lui	$gp, %hi(%neg(%gp_rel(label)))
     addiu	$gp, $gp, %lo(%neg(%gp_rel(label)))
     daddu	$gp, $gp, $reg1

   If $reg2 is given, this results in:
     daddu	$reg2, $gp, $0
     lui	$gp, %hi(%neg(%gp_rel(label)))
     addiu	$gp, $gp, %lo(%neg(%gp_rel(label)))
     daddu	$gp, $gp, $reg1
   $reg1 is normally $25 == $t9.  */
static void
s_cpsetup (ignore)
     int ignore ATTRIBUTE_UNUSED;
{
  expressionS ex_off;
  expressionS ex_sym;
  int reg1;
  int icnt = 0;
  char *f;

  /* If we are not generating SVR4 PIC code, .cpsetup is ignored.
     We also need NewABI support.  */
  if (mips_pic != SVR4_PIC || ! HAVE_NEWABI)
    {
      s_ignore (0);
      return;
    }

  reg1 = tc_get_register (0);
  SKIP_WHITESPACE ();
  if (*input_line_pointer != ',')
    {
      as_bad (_("missing argument separator ',' for .cpsetup"));
      return;
    }
  else
    ++input_line_pointer;
  SKIP_WHITESPACE ();
  if (*input_line_pointer == '$')
    {
      mips_cpreturn_register = tc_get_register (0);
      mips_cpreturn_offset = -1;
    }
  else
    {
      mips_cpreturn_offset = get_absolute_expression ();
      mips_cpreturn_register = -1;
    }
  SKIP_WHITESPACE ();
  if (*input_line_pointer != ',')
    {
      as_bad (_("missing argument separator ',' for .cpsetup"));
      return;
    }
  else
    ++input_line_pointer;
  SKIP_WHITESPACE ();
  expression (&ex_sym);

  if (mips_cpreturn_register == -1)
    {
      ex_off.X_op = O_constant;
      ex_off.X_add_symbol = NULL;
      ex_off.X_op_symbol = NULL;
      ex_off.X_add_number = mips_cpreturn_offset;

      macro_build ((char *) NULL, &icnt, &ex_off, "sd", "t,o(b)",
		   mips_gp_register, (int) BFD_RELOC_LO16, SP);
    }
  else
    macro_build ((char *) NULL, &icnt, (expressionS *) NULL, "daddu",
		 "d,v,t", mips_cpreturn_register, mips_gp_register, 0);

  /* Ensure there's room for the next two instructions, so that `f'
     doesn't end up with an address in the wrong frag.  */
  frag_grow (8);
  f = frag_more (0);
  macro_build ((char *) NULL, &icnt, &ex_sym, "lui", "t,u", mips_gp_register,
	       (int) BFD_RELOC_GPREL16);
  fix_new (frag_now, f - frag_now->fr_literal,
	   0, NULL, 0, 0, BFD_RELOC_MIPS_SUB);
  fix_new (frag_now, f - frag_now->fr_literal,
	   0, NULL, 0, 0, BFD_RELOC_HI16_S);

  f = frag_more (0);
  macro_build ((char *) NULL, &icnt, &ex_sym, "addiu", "t,r,j",
	       mips_gp_register, mips_gp_register, (int) BFD_RELOC_GPREL16);
  fix_new (frag_now, f - frag_now->fr_literal,
	   0, NULL, 0, 0, BFD_RELOC_MIPS_SUB);
  fix_new (frag_now, f - frag_now->fr_literal,
	   0, NULL, 0, 0, BFD_RELOC_LO16);

  macro_build ((char *) NULL, &icnt, (expressionS *) NULL,
	       HAVE_64BIT_ADDRESSES ? "daddu" : "add", "d,v,t",
	       mips_gp_register, mips_gp_register, reg1);

  demand_empty_rest_of_line ();
}

static void
s_cplocal (ignore)
     int ignore ATTRIBUTE_UNUSED;
{
  /* If we are not generating SVR4 PIC code, or if this is not NewABI code,
   .cplocal is ignored.  */
  if (mips_pic != SVR4_PIC || ! HAVE_NEWABI)
    {
      s_ignore (0);
      return;
    }

  mips_gp_register = tc_get_register (0);
  demand_empty_rest_of_line ();
}

/* Handle the .cprestore pseudo-op.  This stores $gp into a given
   offset from $sp.  The offset is remembered, and after making a PIC
   call $gp is restored from that location.  */

static void
s_cprestore (ignore)
     int ignore ATTRIBUTE_UNUSED;
{
  expressionS ex;
  int icnt = 0;

  /* If we are not generating SVR4 PIC code, or if this is NewABI code,
     .cprestore is ignored.  */
  if (mips_pic != SVR4_PIC || HAVE_NEWABI)
    {
      s_ignore (0);
      return;
    }

  mips_cprestore_offset = get_absolute_expression ();
  mips_cprestore_valid = 1;

  ex.X_op = O_constant;
  ex.X_add_symbol = NULL;
  ex.X_op_symbol = NULL;
  ex.X_add_number = mips_cprestore_offset;
d10419 2
a10420 3
  macro_build_ldst_constoffset ((char *) NULL, &icnt, &ex,
				HAVE_32BIT_ADDRESSES ? "sw" : "sd",
				mips_gp_register, SP);
d10425 3
a10427 3
/* Handle the .cpreturn pseudo-op defined for NewABI PIC code. If an offset
   was given in the preceeding .gpsetup, it results in:
     ld		$gp, offset($sp)
a10428 3
   If a register $reg2 was given there, it results in:
     daddiu	$gp, $gp, $reg2
 */
d10430 1
a10430 1
s_cpreturn (ignore)
d10436 2
a10437 3
  /* If we are not generating SVR4 PIC code, .cpreturn is ignored.
     We also need NewABI support.  */
  if (mips_pic != SVR4_PIC || ! HAVE_NEWABI)
d10443 1
a10443 6
  if (mips_cpreturn_register == -1)
    {
      ex.X_op = O_constant;
      ex.X_add_symbol = NULL;
      ex.X_op_symbol = NULL;
      ex.X_add_number = mips_cpreturn_offset;
d10445 4
a10448 24
      macro_build ((char *) NULL, &icnt, &ex, "ld", "t,o(b)",
		   mips_gp_register, (int) BFD_RELOC_LO16, SP);
    }
  else
    macro_build ((char *) NULL, &icnt, (expressionS *) NULL, "daddu",
		 "d,v,t", mips_gp_register, mips_cpreturn_register, 0);

  demand_empty_rest_of_line ();
}

/* Handle the .gpvalue pseudo-op.  This is used when generating NewABI PIC
   code.  It sets the offset to use in gp_rel relocations.  */

static void
s_gpvalue (ignore)
     int ignore ATTRIBUTE_UNUSED;
{
  /* If we are not generating SVR4 PIC code, .gpvalue is ignored.
     We also need NewABI support.  */
  if (mips_pic != SVR4_PIC || ! HAVE_NEWABI)
    {
      s_ignore (0);
      return;
    }
d10450 5
a10454 1
  mips_gprel_offset = get_absolute_expression ();
d10478 1
a10478 1
  mips_emit_delays (TRUE);
d10493 2
a10494 46
  fix_new_exp (frag_now, p - frag_now->fr_literal, 4, &ex, FALSE,
	       BFD_RELOC_GPREL32);

  demand_empty_rest_of_line ();
}

static void
s_gpdword (ignore)
     int ignore ATTRIBUTE_UNUSED;
{
  symbolS *label;
  expressionS ex;
  char *p;

  /* When not generating PIC code, this is treated as .dword.  */
  if (mips_pic != SVR4_PIC)
    {
      s_cons (3);
      return;
    }

  label = insn_labels != NULL ? insn_labels->label : NULL;
  mips_emit_delays (TRUE);
  if (auto_align)
    mips_align (3, 0, label);
  mips_clear_insn_labels ();

  expression (&ex);

  if (ex.X_op != O_symbol || ex.X_add_number != 0)
    {
      as_bad (_("Unsupported use of .gpdword"));
      ignore_rest_of_line ();
    }

  p = frag_more (8);
  md_number_to_chars (p, (valueT) 0, 8);
  fix_new_exp (frag_now, p - frag_now->fr_literal, 8, &ex, FALSE,
	       BFD_RELOC_GPREL32);

  /* GPREL32 composed with 64 gives a 64-bit GP offset.  */
  ex.X_op = O_absent;
  ex.X_add_symbol = 0;
  ex.X_add_number = 0;
  fix_new_exp (frag_now, p - frag_now->fr_literal, 8, &ex, FALSE,
	       BFD_RELOC_64);
d10519 4
a10522 2
	       HAVE_32BIT_ADDRESSES ? HAVE_NEWABI ? "add" : "addu" : "daddu",
	       "d,v,t", reg, reg, mips_gp_register);
d10540 2
a10541 1
  mips16_mark_labels ();
d10556 1
a10556 1
  if (type == 'n')
d10586 1
a10586 1
	  as_bad ("ignoring attempt to redefine symbol %s",
d10602 1
a10602 1
	  ignore_rest_of_line ();
d10625 1
a10625 1
      reg = ZERO;
d10627 1
a10627 1
  else if (ISDIGIT (*input_line_pointer))
d10633 1
a10633 1
	  reg = ZERO;
d10638 2
a10639 10
      if (strncmp (input_line_pointer, "ra", 2) == 0)
	{
	  reg = RA;
	  input_line_pointer += 2;
	}
      else if (strncmp (input_line_pointer, "fp", 2) == 0)
	{
	  reg = FP;
	  input_line_pointer += 2;
	}
d10641 1
a10641 4
	{
	  reg = SP;
	  input_line_pointer += 2;
	}
d10643 1
a10643 4
	{
	  reg = GP;
	  input_line_pointer += 2;
	}
d10645 1
a10645 19
	{
	  reg = AT;
	  input_line_pointer += 2;
	}
      else if (strncmp (input_line_pointer, "kt0", 3) == 0)
	{
	  reg = KT0;
	  input_line_pointer += 3;
	}
      else if (strncmp (input_line_pointer, "kt1", 3) == 0)
	{
	  reg = KT1;
	  input_line_pointer += 3;
	}
      else if (strncmp (input_line_pointer, "zero", 4) == 0)
	{
	  reg = ZERO;
	  input_line_pointer += 4;
	}
d10649 1
a10649 3
	  reg = ZERO;
	  while (ISALNUM(*input_line_pointer))
	   input_line_pointer++;
d10651 1
d10654 1
a10654 5
    {
      mips_frame_reg = reg != 0 ? reg : SP;
      mips_frame_reg_valid = 1;
      mips_cprestore_valid = 0;
    }
d10692 1
a10692 1
  if (USE_GLOBAL_POINTER_OPT && g_switch_value > 0)
d10697 1
a10697 1
      /* Find out whether this symbol can be referenced off the $gp
d10700 1
a10700 1
	 not be referenced off the $gp, although it appears as though
d10747 1
a10747 1
    /* We are not optimizing for the $gp register.  */
a10750 58

/* Return true if the given symbol should be considered local for SVR4 PIC.  */

static bfd_boolean
pic_need_relax (sym, segtype)
     symbolS *sym;
     asection *segtype;
{
  asection *symsec;
  bfd_boolean linkonce;

  /* Handle the case of a symbol equated to another symbol.  */
  while (symbol_equated_reloc_p (sym))
    {
      symbolS *n;

      /* It's possible to get a loop here in a badly written
	 program.  */
      n = symbol_get_value_expression (sym)->X_add_symbol;
      if (n == sym)
	break;
      sym = n;
    }

  symsec = S_GET_SEGMENT (sym);

  /* duplicate the test for LINK_ONCE sections as in adjust_reloc_syms */
  linkonce = FALSE;
  if (symsec != segtype && ! S_IS_LOCAL (sym))
    {
      if ((bfd_get_section_flags (stdoutput, symsec) & SEC_LINK_ONCE)
	  != 0)
	linkonce = TRUE;

      /* The GNU toolchain uses an extension for ELF: a section
	 beginning with the magic string .gnu.linkonce is a linkonce
	 section.  */
      if (strncmp (segment_name (symsec), ".gnu.linkonce",
		   sizeof ".gnu.linkonce" - 1) == 0)
	linkonce = TRUE;
    }

  /* This must duplicate the test in adjust_reloc_syms.  */
  return (symsec != &bfd_und_section
	  && symsec != &bfd_abs_section
	  && ! bfd_is_com_section (symsec)
	  && !linkonce
#ifdef OBJ_ELF
	  /* A global or weak symbol is treated as external.  */
	  && (OUTPUT_FLAVOR != bfd_target_elf_flavour
	      || (! S_IS_WEAK (sym)
		  && (! S_IS_EXTERNAL (sym)
		      || mips_pic == EMBEDDED_PIC)))
#endif
	  );
}


d10800 23
a10822 2
  val = S_GET_VALUE (fragp->fr_symbol);
  symsec = S_GET_SEGMENT (fragp->fr_symbol);
a10972 67
/* Compute the length of a branch sequence, and adjust the
   RELAX_BRANCH_TOOFAR bit accordingly.  If FRAGP is NULL, the
   worst-case length is computed, with UPDATE being used to indicate
   whether an unconditional (-1), branch-likely (+1) or regular (0)
   branch is to be computed.  */
static int
relaxed_branch_length (fragp, sec, update)
     fragS *fragp;
     asection *sec;
     int update;
{
  bfd_boolean toofar;
  int length;

  if (fragp
      && S_IS_DEFINED (fragp->fr_symbol)
      && sec == S_GET_SEGMENT (fragp->fr_symbol))
    {
      addressT addr;
      offsetT val;

      val = S_GET_VALUE (fragp->fr_symbol) + fragp->fr_offset;

      addr = fragp->fr_address + fragp->fr_fix + 4;

      val -= addr;

      toofar = val < - (0x8000 << 2) || val >= (0x8000 << 2);
    }
  else if (fragp)
    /* If the symbol is not defined or it's in a different segment,
       assume the user knows what's going on and emit a short
       branch.  */
    toofar = FALSE;
  else
    toofar = TRUE;

  if (fragp && update && toofar != RELAX_BRANCH_TOOFAR (fragp->fr_subtype))
    fragp->fr_subtype
      = RELAX_BRANCH_ENCODE (RELAX_BRANCH_UNCOND (fragp->fr_subtype),
			     RELAX_BRANCH_LIKELY (fragp->fr_subtype),
			     RELAX_BRANCH_LINK (fragp->fr_subtype),
			     toofar);

  length = 4;
  if (toofar)
    {
      if (fragp ? RELAX_BRANCH_LIKELY (fragp->fr_subtype) : (update > 0))
	length += 8;

      if (mips_pic != NO_PIC)
	{
	  /* Additional space for PIC loading of target address.  */
	  length += 8;
	  if (mips_opts.isa == ISA_MIPS1)
	    /* Additional space for $at-stabilizing nop.  */
	    length += 4;
	}

      /* If branch is conditional.  */
      if (fragp ? !RELAX_BRANCH_UNCOND (fragp->fr_subtype) : (update >= 0))
	length += 8;
    }

  return length;
}

d10983 16
a10998 1
  int change;
d11000 5
a11004 1
  if (RELAX_BRANCH_P (fragp->fr_subtype))
d11006 10
d11017 7
a11023 1
      fragp->fr_var = relaxed_branch_length (fragp, segtype, FALSE);
d11025 8
a11032 2
      return fragp->fr_var;
    }
d11034 7
a11040 4
  if (RELAX_MIPS16_P (fragp->fr_subtype))
    /* We don't want to modify the EXTENDED bit here; it might get us
       into infinite loops.  We change it only in mips_relax_frag().  */
    return (RELAX_MIPS16_EXTENDED (fragp->fr_subtype) ? 4 : 2);
d11042 11
a11052 4
  if (mips_pic == NO_PIC)
    change = nopic_need_relax (fragp->fr_symbol, 0);
  else if (mips_pic == SVR4_PIC)
    change = pic_need_relax (fragp->fr_symbol, segtype);
d11067 1
a11067 4
	as_warn (_("AT used after \".set noat\" or macro used after "
		   "\".set nomacro\""));

      return RELAX_NEW (fragp->fr_subtype) - RELAX_OLD (fragp->fr_subtype);
d11070 4
a11073 1
  return 0;
a11088 1

a11091 1

a11093 1

a11099 1

d11133 2
d11137 3
a11139 2
      if (OUTPUT_FLAVOR == bfd_target_elf_flavour)
	reloc->addend = fixp->fx_addnumber;
d11141 1
a11141 7
	{
	  /* We use a special addend for an internal RELLO reloc.  */
	  if (symbol_section_p (fixp->fx_addsy))
	    reloc->addend = reloc->address - S_GET_VALUE (fixp->fx_subsy);
	  else
	    reloc->addend = fixp->fx_addnumber + reloc->address;
	}
d11147 2
a11148 2

      /* The reloc is relative to the RELLO; adjust the addend
d11150 8
a11157 14
      if (OUTPUT_FLAVOR == bfd_target_elf_flavour)
	reloc->addend = fixp->fx_next->fx_addnumber;
      else
	{
	  /* We use a special addend for an internal RELHI reloc.  */
	  if (symbol_section_p (fixp->fx_addsy))
	    reloc->addend = (fixp->fx_next->fx_frag->fr_address
			     + fixp->fx_next->fx_where
			     - S_GET_VALUE (fixp->fx_subsy));
	  else
	    reloc->addend = (fixp->fx_addnumber
			     + fixp->fx_next->fx_frag->fr_address
			     + fixp->fx_next->fx_where);
	}
a11158 2
  else if (fixp->fx_pcrel == 0 || OUTPUT_FLAVOR == bfd_target_elf_flavour)
    reloc->addend = fixp->fx_addnumber;
d11172 1
a11172 4
      && ((fixp->fx_r_type == BFD_RELOC_GPREL16
	   && ! HAVE_NEWABI)
	  || (fixp->fx_r_type == BFD_RELOC_MIPS_GOT_DISP
	      && HAVE_NEWABI)
d11178 1
a11178 2
	  || fixp->fx_r_type == BFD_RELOC_MIPS_CALL_LO16)
    )
d11191 2
a11192 2
	  assert ((fixp->fx_r_type == BFD_RELOC_GPREL16
		   && fixp->fx_next->fx_r_type == BFD_RELOC_GPREL16)
a11204 1
      reloc->addend += fixp->fx_frag->tc_frag_data.tc_fr_offset;
d11212 1
a11212 2
      reloc2->addend = fixp->fx_addnumber
	+ fixp->fx_frag->tc_frag_data.tc_fr_offset;
d11228 1
a11228 1
	  assert (fixp->fx_r_type == BFD_RELOC_GPREL16);
d11239 1
d11242 1
a11242 24
	      if (HAVE_NEWABI)
		{
		  fixp->fx_r_type = BFD_RELOC_MIPS_GOT_PAGE;
		  reloc2->howto = bfd_reloc_type_lookup
		    (stdoutput, BFD_RELOC_MIPS_GOT_OFST);
		}
	      else
		fixp->fx_r_type = BFD_RELOC_MIPS_GOT16;
	      break;
	    case BFD_RELOC_MIPS_CALL16:
	    case BFD_RELOC_MIPS_GOT_OFST:
	    case BFD_RELOC_MIPS_GOT_DISP:
	      if (HAVE_NEWABI)
		{
		  /* It may seem nonsensical to relax GOT_DISP to
		     GOT_DISP, but we're actually turning a GOT_DISP
		     without offset into a GOT_DISP with an offset,
		     getting rid of the separate addition, which we can
		     do when the symbol is found to be local.  */
		  fixp->fx_r_type = BFD_RELOC_MIPS_GOT_DISP;
		  retval[1] = NULL;
		}
	      else
		fixp->fx_r_type = BFD_RELOC_MIPS_GOT16;
d11250 3
a11252 3
  /* Since the old MIPS ELF ABI uses Rel instead of Rela, encode the vtable
     entry to be used in the relocation's section offset.  */
  if (! HAVE_NEWABI && fixp->fx_r_type == BFD_RELOC_VTABLE_ENTRY)
a11293 13
#ifdef OBJ_ELF
  /* md_apply_fix3 has a double-subtraction hack to get
     bfd_install_relocation to behave nicely.  GPREL relocations are
     handled correctly without this hack, so undo it here.  We can't
     stop md_apply_fix3 from subtracting twice in the first place since
     the fake addend is required for variant frags above.  */
  if (fixp->fx_addsy != NULL && OUTPUT_FLAVOR == bfd_target_elf_flavour
      && (code == BFD_RELOC_GPREL16 || code == BFD_RELOC_MIPS16_GPREL)
      && reloc->addend != 0
      && mips_need_elf_addend_fixup (fixp))
    reloc->addend += S_GET_VALUE (fixp->fx_addsy);
#endif

d11320 1
a11320 2
mips_relax_frag (sec, fragp, stretch)
     asection *sec;
a11323 9
  if (RELAX_BRANCH_P (fragp->fr_subtype))
    {
      offsetT old_var = fragp->fr_var;

      fragp->fr_var = relaxed_branch_length (fragp, sec, TRUE);

      return fragp->fr_var - old_var;
    }

d11327 1
a11327 1
  if (mips16_extended_frag (fragp, NULL, stretch))
d11342 2
a11343 194
  return 0;
}

/* Convert a machine dependent frag.  */

void
md_convert_frag (abfd, asec, fragp)
     bfd *abfd ATTRIBUTE_UNUSED;
     segT asec;
     fragS *fragp;
{
  int old, new;
  char *fixptr;

  if (RELAX_BRANCH_P (fragp->fr_subtype))
    {
      bfd_byte *buf;
      unsigned long insn;
      expressionS exp;
      fixS *fixp;

      buf = (bfd_byte *)fragp->fr_literal + fragp->fr_fix;

      if (target_big_endian)
	insn = bfd_getb32 (buf);
      else
	insn = bfd_getl32 (buf);

      if (!RELAX_BRANCH_TOOFAR (fragp->fr_subtype))
	{
	  /* We generate a fixup instead of applying it right now
	     because, if there are linker relaxations, we're going to
	     need the relocations.  */
	  exp.X_op = O_symbol;
	  exp.X_add_symbol = fragp->fr_symbol;
	  exp.X_add_number = fragp->fr_offset;

	  fixp = fix_new_exp (fragp, buf - (bfd_byte *)fragp->fr_literal,
			      4, &exp, 1,
			      BFD_RELOC_16_PCREL_S2);
	  fixp->fx_file = fragp->fr_file;
	  fixp->fx_line = fragp->fr_line;

	  md_number_to_chars ((char *)buf, insn, 4);
	  buf += 4;
	}
      else
	{
	  int i;

	  as_warn_where (fragp->fr_file, fragp->fr_line,
			 _("relaxed out-of-range branch into a jump"));

	  if (RELAX_BRANCH_UNCOND (fragp->fr_subtype))
	    goto uncond;

	  if (!RELAX_BRANCH_LIKELY (fragp->fr_subtype))
	    {
	      /* Reverse the branch.  */
	      switch ((insn >> 28) & 0xf)
		{
		case 4:
		  /* bc[0-3][tf]l? and bc1any[24][ft] instructions can
		     have the condition reversed by tweaking a single
		     bit, and their opcodes all have 0x4???????.  */
		  assert ((insn & 0xf1000000) == 0x41000000);
		  insn ^= 0x00010000;
		  break;

		case 0:
		  /* bltz	0x04000000	bgez	0x04010000
		     bltzal	0x04100000	bgezal	0x04110000 */
		  assert ((insn & 0xfc0e0000) == 0x04000000);
		  insn ^= 0x00010000;
		  break;

		case 1:
		  /* beq	0x10000000	bne	0x14000000
		     blez	0x18000000	bgtz	0x1c000000 */
		  insn ^= 0x04000000;
		  break;

		default:
		  abort ();
		}
	    }

	  if (RELAX_BRANCH_LINK (fragp->fr_subtype))
	    {
	      /* Clear the and-link bit.  */
	      assert ((insn & 0xfc1c0000) == 0x04100000);

	      /* bltzal	0x04100000	bgezal	0x04110000
		bltzall	0x04120000     bgezall	0x04130000 */
	      insn &= ~0x00100000;
	    }

	  /* Branch over the branch (if the branch was likely) or the
	     full jump (not likely case).  Compute the offset from the
	     current instruction to branch to.  */
	  if (RELAX_BRANCH_LIKELY (fragp->fr_subtype))
	    i = 16;
	  else
	    {
	      /* How many bytes in instructions we've already emitted?  */
	      i = buf - (bfd_byte *)fragp->fr_literal - fragp->fr_fix;
	      /* How many bytes in instructions from here to the end?  */
	      i = fragp->fr_var - i;
	    }
	  /* Convert to instruction count.  */
	  i >>= 2;
	  /* Branch counts from the next instruction.  */
	  i--;
	  insn |= i;
	  /* Branch over the jump.  */
	  md_number_to_chars ((char *)buf, insn, 4);
	  buf += 4;

	  /* Nop */
	  md_number_to_chars ((char*)buf, 0, 4);
	  buf += 4;

	  if (RELAX_BRANCH_LIKELY (fragp->fr_subtype))
	    {
	      /* beql $0, $0, 2f */
	      insn = 0x50000000;
	      /* Compute the PC offset from the current instruction to
		 the end of the variable frag.  */
	      /* How many bytes in instructions we've already emitted?  */
	      i = buf - (bfd_byte *)fragp->fr_literal - fragp->fr_fix;
	      /* How many bytes in instructions from here to the end?  */
	      i = fragp->fr_var - i;
	      /* Convert to instruction count.  */
	      i >>= 2;
	      /* Don't decrement i, because we want to branch over the
		 delay slot.  */

	      insn |= i;
	      md_number_to_chars ((char *)buf, insn, 4);
	      buf += 4;

	      md_number_to_chars ((char *)buf, 0, 4);
	      buf += 4;
	    }

	uncond:
	  if (mips_pic == NO_PIC)
	    {
	      /* j or jal.  */
	      insn = (RELAX_BRANCH_LINK (fragp->fr_subtype)
		      ? 0x0c000000 : 0x08000000);
	      exp.X_op = O_symbol;
	      exp.X_add_symbol = fragp->fr_symbol;
	      exp.X_add_number = fragp->fr_offset;

	      fixp = fix_new_exp (fragp, buf - (bfd_byte *)fragp->fr_literal,
				  4, &exp, 0, BFD_RELOC_MIPS_JMP);
	      fixp->fx_file = fragp->fr_file;
	      fixp->fx_line = fragp->fr_line;

	      md_number_to_chars ((char*)buf, insn, 4);
	      buf += 4;
	    }
	  else
	    {
	      /* lw/ld $at, <sym>($gp)  R_MIPS_GOT16 */
	      insn = HAVE_64BIT_ADDRESSES ? 0xdf810000 : 0x8f810000;
	      exp.X_op = O_symbol;
	      exp.X_add_symbol = fragp->fr_symbol;
	      exp.X_add_number = fragp->fr_offset;

	      if (fragp->fr_offset)
		{
		  exp.X_add_symbol = make_expr_symbol (&exp);
		  exp.X_add_number = 0;
		}

	      fixp = fix_new_exp (fragp, buf - (bfd_byte *)fragp->fr_literal,
				  4, &exp, 0, BFD_RELOC_MIPS_GOT16);
	      fixp->fx_file = fragp->fr_file;
	      fixp->fx_line = fragp->fr_line;

	      md_number_to_chars ((char*)buf, insn, 4);
	      buf += 4;

	      if (mips_opts.isa == ISA_MIPS1)
		{
		  /* nop */
		  md_number_to_chars ((char*)buf, 0, 4);
		  buf += 4;
		}

	      /* d/addiu $at, $at, <sym>  R_MIPS_LO16 */
	      insn = HAVE_64BIT_ADDRESSES ? 0x64210000 : 0x24210000;
d11345 1
a11345 4
	      fixp = fix_new_exp (fragp, buf - (bfd_byte *)fragp->fr_literal,
				  4, &exp, 0, BFD_RELOC_LO16);
	      fixp->fx_file = fragp->fr_file;
	      fixp->fx_line = fragp->fr_line;
d11347 8
a11354 21
	      md_number_to_chars ((char*)buf, insn, 4);
	      buf += 4;

	      /* j(al)r $at.  */
	      if (RELAX_BRANCH_LINK (fragp->fr_subtype))
		insn = 0x0020f809;
	      else
		insn = 0x00200008;

	      md_number_to_chars ((char*)buf, insn, 4);
	      buf += 4;
	    }
	}

      assert (buf == (bfd_byte *)fragp->fr_literal
	      + fragp->fr_fix + fragp->fr_var);

      fragp->fr_fix += fragp->fr_var;

      return;
    }
d11360 1
a11360 1
      bfd_boolean small, ext;
d11364 1
a11364 1
      bfd_boolean use_extend;
d11374 2
a11375 2
	  small = FALSE;
	  ext = TRUE;
d11379 2
a11380 2
	  small = TRUE;
	  ext = FALSE;
d11383 1
a11383 1
      resolve_symbol_value (fragp->fr_symbol);
d11436 1
a11436 1
	  md_number_to_chars ((char *) buf, 0xf000 | extend, 2);
d11441 1
a11441 1
      md_number_to_chars ((char *) buf, insn, 2);
d11455 1
a11455 1
	memmove (fixptr - old, fixptr, new);
d11525 1
a11525 1
  if (mips_abi != N64_ABI)
a11563 10
  /* Set MIPS ELF flags for ASEs.  */
  if (file_ase_mips16)
    elf_elfheader (stdoutput)->e_flags |= EF_MIPS_ARCH_ASE_M16;
#if 0 /* XXX FIXME */
  if (file_ase_mips3d)
    elf_elfheader (stdoutput)->e_flags |= ???;
#endif
  if (file_ase_mdmx)
    elf_elfheader (stdoutput)->e_flags |= EF_MIPS_ARCH_ASE_MDMX;

d11565 3
a11567 1
  if (mips_abi == O32_ABI && USE_E_MIPS_ABI_O32)
d11569 1
a11569 1
  else if (mips_abi == O64_ABI)
d11571 1
a11571 1
  else if (mips_abi == EABI_ABI)
d11573 1
a11573 1
      if (!file_mips_gp32)
a11577 4
  else if (mips_abi == N32_ABI)
    elf_elfheader (stdoutput)->e_flags |= EF_MIPS_ABI2;

  /* Nothing to do for N64_ABI.  */
d11623 1
a11623 1
	  fragp->fr_fix++;
d11643 1
a11643 1
    as_warn (_("missing .end at end of assembly"));
d11657 2
a11658 2
  if (!ISDIGIT (*input_line_pointer))
    as_bad (_("expected simple number"));
d11664 1
a11664 1
	  while (ISXDIGIT (*input_line_pointer))
d11674 1
a11674 1
	  while (ISDIGIT (*input_line_pointer))
d11682 1
a11682 1
  if (!ISDIGIT (*input_line_pointer))
d11686 1
a11686 1
      as_warn (_("invalid number"));
d11689 1
a11689 1
  while (ISDIGIT (*input_line_pointer))
d11698 1
a11698 2
   is an initial number which is the ECOFF file index.  In the non-ECOFF
   case .file implies DWARF-2.  */
d11701 1
a11701 1
s_mips_file (x)
d11704 1
a11704 10
  static int first_file_directive = 0;

  if (ECOFF_DEBUGGING)
    {
      get_number ();
      s_app_file (0);
    }
  else
    {
      char *filename;
d11706 2
a11707 23
      filename = dwarf2_directive_file (0);

      /* Versions of GCC up to 3.1 start files with a ".file"
	 directive even for stabs output.  Make sure that this
	 ".file" is handled.  Note that you need a version of GCC
         after 3.1 in order to support DWARF-2 on MIPS.  */
      if (filename != NULL && ! first_file_directive)
	{
	  (void) new_logical_line (filename, -1);
	  s_app_file_string (filename);
	}
      first_file_directive = 1;
    }
}

/* The .loc directive, implying DWARF-2.  */

static void
s_mips_loc (x)
     int x ATTRIBUTE_UNUSED;
{
  if (!ECOFF_DEBUGGING)
    dwarf2_directive_loc (0);
d11717 1
a11717 4

  /* Following functions need their own .frame and .cprestore directives.  */
  mips_frame_reg_valid = 0;
  mips_cprestore_valid = 0;
d11727 13
a11739 1
  if ((bfd_get_section_flags (stdoutput, now_seg) & SEC_CODE) == 0)
a11753 4

      if (debug_type == DEBUG_STABS)
	stabs_generate_asm_endfunc (S_GET_NAME (p),
				    S_GET_NAME (p));
d11758 9
a11766 9
#ifdef OBJ_ELF
  /* Generate a .pdr section.  */
  if (OUTPUT_FLAVOR == bfd_target_elf_flavour && ! ECOFF_DEBUGGING)
    {
      segT saved_seg = now_seg;
      subsegT saved_subseg = now_subseg;
      valueT dot;
      expressionS exp;
      char *fragp;
d11768 1
a11768 1
      dot = frag_now_fix ();
d11771 1
a11771 1
      md_flush_pending_output ();
d11774 2
a11775 2
      assert (pdr_seg);
      subseg_set (pdr_seg, 0);
d11777 15
a11791 5
      /* Write the symbol.  */
      exp.X_op = O_symbol;
      exp.X_add_symbol = p;
      exp.X_add_number = 0;
      emit_expr (&exp, 4);
d11793 3
a11795 13
      fragp = frag_more (7 * 4);

      md_number_to_chars (fragp,      (valueT) cur_proc_ptr->reg_mask, 4);
      md_number_to_chars (fragp +  4, (valueT) cur_proc_ptr->reg_offset, 4);
      md_number_to_chars (fragp +  8, (valueT) cur_proc_ptr->fpreg_mask, 4);
      md_number_to_chars (fragp + 12, (valueT) cur_proc_ptr->fpreg_offset, 4);
      md_number_to_chars (fragp + 16, (valueT) cur_proc_ptr->frame_offset, 4);
      md_number_to_chars (fragp + 20, (valueT) cur_proc_ptr->frame_reg, 4);
      md_number_to_chars (fragp + 24, (valueT) cur_proc_ptr->pc_reg, 4);

      subseg_set (saved_seg, saved_subseg);
    }
#endif /* OBJ_ELF */
d11806 1
d11808 1
d11812 1
a11812 1
    ++input_line_pointer;
d11814 1
a11814 1
  if (ISDIGIT (*input_line_pointer)
d11816 1
a11816 1
    get_number ();
d11818 13
a11830 1
  if ((bfd_get_section_flags (stdoutput, now_seg) & SEC_CODE) == 0)
d11834 1
a11834 1
    as_warn (_("missing .end"));
a11837 4
      /* This function needs its own .frame and .cprestore directives.  */
      mips_frame_reg_valid = 0;
      mips_cprestore_valid = 0;

d11845 1
a11845 5
      ++numprocs;

      if (debug_type == DEBUG_STABS)
        stabs_generate_asm_func (S_GET_NAME (symbolP),
				 S_GET_NAME (symbolP));
d11859 1
a11859 1
     int ignore ATTRIBUTE_UNUSED;
d11861 1
a11861 4
#ifdef OBJ_ELF
  if (OUTPUT_FLAVOR == bfd_target_elf_flavour && ! ECOFF_DEBUGGING)
    {
      long val;
d11863 1
a11863 6
      if (cur_proc_ptr == (procS *) NULL)
	{
	  as_warn (_(".frame outside of .ent"));
	  demand_empty_rest_of_line ();
	  return;
	}
d11865 6
a11870 1
      cur_proc_ptr->frame_reg = tc_get_register (1);
d11872 1
a11872 12
      SKIP_WHITESPACE ();
      if (*input_line_pointer++ != ','
	  || get_absolute_expression_and_terminator (&val) != ',')
	{
	  as_warn (_("Bad .frame directive"));
	  --input_line_pointer;
	  demand_empty_rest_of_line ();
	  return;
	}

      cur_proc_ptr->frame_offset = val;
      cur_proc_ptr->pc_reg = tc_get_register (0);
d11874 6
d11881 1
d11883 8
a11890 3
  else
#endif /* OBJ_ELF */
    s_ignore (ignore);
d11903 4
a11906 2
#ifdef OBJ_ELF
  if (OUTPUT_FLAVOR == bfd_target_elf_flavour && ! ECOFF_DEBUGGING)
d11908 4
a11911 1
      long mask, off;
d11913 7
a11919 14
      if (cur_proc_ptr == (procS *) NULL)
	{
	  as_warn (_(".mask/.fmask outside of .ent"));
	  demand_empty_rest_of_line ();
	  return;
	}

      if (get_absolute_expression_and_terminator (&mask) != ',')
	{
	  as_warn (_("Bad .mask/.fmask directive"));
	  --input_line_pointer;
	  demand_empty_rest_of_line ();
	  return;
	}
d11921 1
a11921 1
      off = get_absolute_expression ();
d11923 4
a11926 12
      if (reg_type == 'F')
	{
	  cur_proc_ptr->fpreg_mask = mask;
	  cur_proc_ptr->fpreg_offset = off;
	}
      else
	{
	  cur_proc_ptr->reg_mask = mask;
	  cur_proc_ptr->reg_offset = off;
	}

      demand_empty_rest_of_line ();
d11929 9
a11937 2
#endif /* OBJ_ELF */
    s_ignore (reg_type);
d11964 1
a11964 2
/* A table describing all the processors gas knows about.  Names are
   matched in the order listed.
d11966 7
a11972 2
   To ease comparison, please keep this table in the same order as
   gcc's mips_cpu_info_table[].  */
d11975 30
a12004 54
  /* Entries for generic ISAs */
  { "mips1",          1,      ISA_MIPS1,      CPU_R3000 },
  { "mips2",          1,      ISA_MIPS2,      CPU_R6000 },
  { "mips3",          1,      ISA_MIPS3,      CPU_R4000 },
  { "mips4",          1,      ISA_MIPS4,      CPU_R8000 },
  { "mips5",          1,      ISA_MIPS5,      CPU_MIPS5 },
  { "mips32",         1,      ISA_MIPS32,     CPU_MIPS32 },
  { "mips32r2",       1,      ISA_MIPS32R2,   CPU_MIPS32R2 },
  { "mips64",         1,      ISA_MIPS64,     CPU_MIPS64 },

  /* MIPS I */
  { "r3000",          0,      ISA_MIPS1,      CPU_R3000 },
  { "r2000",          0,      ISA_MIPS1,      CPU_R3000 },
  { "r3900",          0,      ISA_MIPS1,      CPU_R3900 },

  /* MIPS II */
  { "r6000",          0,      ISA_MIPS2,      CPU_R6000 },

  /* MIPS III */
  { "r4000",          0,      ISA_MIPS3,      CPU_R4000 },
  { "r4010",          0,      ISA_MIPS2,      CPU_R4010 },
  { "vr4100",         0,      ISA_MIPS3,      CPU_VR4100 },
  { "vr4111",         0,      ISA_MIPS3,      CPU_R4111 },
  { "vr4120",         0,      ISA_MIPS3,      CPU_VR4120 },
  { "vr4130",         0,      ISA_MIPS3,      CPU_VR4120 },
  { "vr4181",         0,      ISA_MIPS3,      CPU_R4111 },
  { "vr4300",         0,      ISA_MIPS3,      CPU_R4300 },
  { "r4400",          0,      ISA_MIPS3,      CPU_R4400 },
  { "r4600",          0,      ISA_MIPS3,      CPU_R4600 },
  { "orion",          0,      ISA_MIPS3,      CPU_R4600 },
  { "r4650",          0,      ISA_MIPS3,      CPU_R4650 },

  /* MIPS IV */
  { "r8000",          0,      ISA_MIPS4,      CPU_R8000 },
  { "r10000",         0,      ISA_MIPS4,      CPU_R10000 },
  { "r12000",         0,      ISA_MIPS4,      CPU_R12000 },
  { "vr5000",         0,      ISA_MIPS4,      CPU_R5000 },
  { "vr5400",         0,      ISA_MIPS4,      CPU_VR5400 },
  { "vr5500",         0,      ISA_MIPS4,      CPU_VR5500 },
  { "rm5200",         0,      ISA_MIPS4,      CPU_R5000 },
  { "rm5230",         0,      ISA_MIPS4,      CPU_R5000 },
  { "rm5231",         0,      ISA_MIPS4,      CPU_R5000 },
  { "rm5261",         0,      ISA_MIPS4,      CPU_R5000 },
  { "rm5721",         0,      ISA_MIPS4,      CPU_R5000 },
  { "r7000",          0,      ISA_MIPS4,      CPU_R5000 },

  /* MIPS 32 */
  { "4kc",            0,      ISA_MIPS32,     CPU_MIPS32, },
  { "4km",            0,      ISA_MIPS32,     CPU_MIPS32 },
  { "4kp",            0,      ISA_MIPS32,     CPU_MIPS32 },

  /* MIPS 64 */
  { "5kc",            0,      ISA_MIPS64,     CPU_MIPS64 },
  { "20kc",           0,      ISA_MIPS64,     CPU_MIPS64 },
d12006 111
a12116 2
  /* Broadcom SB-1 CPU core */
  { "sb1",            0,      ISA_MIPS64,     CPU_SB1 },
d12118 2
a12119 2
  /* End marker */
  { NULL, 0, 0, 0 }
a12121 59

/* Return true if GIVEN is the same as CANONICAL, or if it is CANONICAL
   with a final "000" replaced by "k".  Ignore case.

   Note: this function is shared between GCC and GAS.  */

static bfd_boolean
mips_strict_matching_cpu_name_p (canonical, given)
     const char *canonical, *given;
{
  while (*given != 0 && TOLOWER (*given) == TOLOWER (*canonical))
    given++, canonical++;

  return ((*given == 0 && *canonical == 0)
	  || (strcmp (canonical, "000") == 0 && strcasecmp (given, "k") == 0));
}


/* Return true if GIVEN matches CANONICAL, where GIVEN is a user-supplied
   CPU name.  We've traditionally allowed a lot of variation here.

   Note: this function is shared between GCC and GAS.  */

static bfd_boolean
mips_matching_cpu_name_p (canonical, given)
     const char *canonical, *given;
{
  /* First see if the name matches exactly, or with a final "000"
     turned into "k".  */
  if (mips_strict_matching_cpu_name_p (canonical, given))
    return TRUE;

  /* If not, try comparing based on numerical designation alone.
     See if GIVEN is an unadorned number, or 'r' followed by a number.  */
  if (TOLOWER (*given) == 'r')
    given++;
  if (!ISDIGIT (*given))
    return FALSE;

  /* Skip over some well-known prefixes in the canonical name,
     hoping to find a number there too.  */
  if (TOLOWER (canonical[0]) == 'v' && TOLOWER (canonical[1]) == 'r')
    canonical += 2;
  else if (TOLOWER (canonical[0]) == 'r' && TOLOWER (canonical[1]) == 'm')
    canonical += 2;
  else if (TOLOWER (canonical[0]) == 'r')
    canonical += 1;

  return mips_strict_matching_cpu_name_p (canonical, given);
}


/* Parse an option that takes the name of a processor as its argument.
   OPTION is the name of the option and CPU_STRING is the argument.
   Return the corresponding processor enumeration if the CPU_STRING is
   recognized, otherwise report an error and return null.

   A similar function exists in GCC.  */

d12123 2
a12124 2
mips_parse_cpu (option, cpu_string)
     const char *option, *cpu_string;
d12126 1
a12126 1
  const struct mips_cpu_info *p;
d12128 3
a12130 5
  /* 'from-abi' selects the most compatible architecture for the given
     ABI: MIPS I for 32-bit ABIs and MIPS III for 64-bit ABIs.  For the
     EABIs, we have to decide whether we're using the 32-bit or 64-bit
     version.  Look first at the -mgp options, if given, otherwise base
     the choice on MIPS_DEFAULT_64BIT.
d12132 1
a12132 30
     Treat NO_ABI like the EABIs.  One reason to do this is that the
     plain 'mips' and 'mips64' configs have 'from-abi' as their default
     architecture.  This code picks MIPS I for 'mips' and MIPS III for
     'mips64', just as we did in the days before 'from-abi'.  */
  if (strcasecmp (cpu_string, "from-abi") == 0)
    {
      if (ABI_NEEDS_32BIT_REGS (mips_abi))
	return mips_cpu_info_from_isa (ISA_MIPS1);

      if (ABI_NEEDS_64BIT_REGS (mips_abi))
	return mips_cpu_info_from_isa (ISA_MIPS3);

      if (file_mips_gp32 >= 0)
	return mips_cpu_info_from_isa (file_mips_gp32 ? ISA_MIPS1 : ISA_MIPS3);

      return mips_cpu_info_from_isa (MIPS_DEFAULT_64BIT
				     ? ISA_MIPS3
				     : ISA_MIPS1);
    }

  /* 'default' has traditionally been a no-op.  Probably not very useful.  */
  if (strcasecmp (cpu_string, "default") == 0)
    return 0;

  for (p = mips_cpu_info_table; p->name != 0; p++)
    if (mips_matching_cpu_name_p (p->name, cpu_string))
      return p;

  as_bad ("Bad value (%s) for %s", cpu_string, option);
  return 0;
a12134 3
/* Return the canonical processor information for ISA (a member of the
   ISA_MIPS* enumeration).  */

d12143 1
a12143 1
	&& isa == mips_cpu_info_table[i].isa)
a12147 30

static void
show (stream, string, col_p, first_p)
     FILE *stream;
     const char *string;
     int *col_p;
     int *first_p;
{
  if (*first_p)
    {
      fprintf (stream, "%24s", "");
      *col_p = 24;
    }
  else
    {
      fprintf (stream, ", ");
      *col_p += 2;
    }

  if (*col_p + strlen (string) > 72)
    {
      fprintf (stream, "\n%24s", "");
      *col_p = 24;
    }

  fprintf (stream, "%s", string);
  *col_p += strlen (string);

  *first_p = 0;
}
d12149 3
a12151 3
void
md_show_usage (stream)
     FILE *stream;
d12153 1
a12153 23
  int column, first;
  size_t i;

  fprintf (stream, _("\
MIPS options:\n\
-membedded-pic		generate embedded position independent code\n\
-EB			generate big endian output\n\
-EL			generate little endian output\n\
-g, -g2			do not remove unneeded NOPs or swap branches\n\
-G NUM			allow referencing objects up to NUM bytes\n\
			implicitly with the gp register [default 8]\n"));
  fprintf (stream, _("\
-mips1			generate MIPS ISA I instructions\n\
-mips2			generate MIPS ISA II instructions\n\
-mips3			generate MIPS ISA III instructions\n\
-mips4			generate MIPS ISA IV instructions\n\
-mips5                  generate MIPS ISA V instructions\n\
-mips32                 generate MIPS32 ISA instructions\n\
-mips32r2               generate MIPS32 release 2 ISA instructions\n\
-mips64                 generate MIPS64 ISA instructions\n\
-march=CPU/-mtune=CPU	generate code/schedule for CPU, where CPU is one of:\n"));

  first = 1;
d12156 3
a12158 3
    show (stream, mips_cpu_info_table[i].name, &column, &first);
  show (stream, "from-abi", &column, &first);
  fputc ('\n', stream);
d12160 1
a12160 62
  fprintf (stream, _("\
-mCPU			equivalent to -march=CPU -mtune=CPU. Deprecated.\n\
-no-mCPU		don't generate code specific to CPU.\n\
			For -mCPU and -no-mCPU, CPU must be one of:\n"));

  first = 1;

  show (stream, "3900", &column, &first);
  show (stream, "4010", &column, &first);
  show (stream, "4100", &column, &first);
  show (stream, "4650", &column, &first);
  fputc ('\n', stream);

  fprintf (stream, _("\
-mips16			generate mips16 instructions\n\
-no-mips16		do not generate mips16 instructions\n"));
  fprintf (stream, _("\
-mgp32			use 32-bit GPRs, regardless of the chosen ISA\n\
-mfp32			use 32-bit FPRs, regardless of the chosen ISA\n\
-O0			remove unneeded NOPs, do not swap branches\n\
-O			remove unneeded NOPs and swap branches\n\
-n			warn about NOPs generated from macros\n\
--[no-]construct-floats [dis]allow floating point values to be constructed\n\
--trap, --no-break	trap exception on div by 0 and mult overflow\n\
--break, --no-trap	break exception on div by 0 and mult overflow\n"));
#ifdef OBJ_ELF
  fprintf (stream, _("\
-KPIC, -call_shared	generate SVR4 position independent code\n\
-non_shared		do not generate position independent code\n\
-xgot			assume a 32 bit GOT\n\
-mabi=ABI		create ABI conformant object file for:\n"));

  first = 1;

  show (stream, "32", &column, &first);
  show (stream, "o64", &column, &first);
  show (stream, "n32", &column, &first);
  show (stream, "64", &column, &first);
  show (stream, "eabi", &column, &first);

  fputc ('\n', stream);

  fprintf (stream, _("\
-32			create o32 ABI object file (default)\n\
-n32			create n32 ABI object file\n\
-64			create 64 ABI object file\n"));
#endif
}

enum dwarf2_format
mips_dwarf2_format ()
{
  if (mips_abi == N64_ABI)
    {
#ifdef TE_IRIX
      return dwarf2_format_64bit_irix;
#else
      return dwarf2_format_64bit;
#endif
    }
  else
    return dwarf2_format_32bit;
@


1.1.1.9
log
@Binutils 2.15, with testsuites removed, and without gdb and libiberty.
@
text
@d2 2
a3 2
   Copyright 1993, 1994, 1995, 1996, 1997, 1998, 1999, 2000, 2001, 2002,
   2003, 2004 Free Software Foundation, Inc.
d31 1
d33 4
d50 2
a51 2
static int mips_output_flavor (void);
static int mips_output_flavor (void) { return OUTPUT_FLAVOR; }
a81 9
/* Control generation of .pdr sections.  Off by default on IRIX: the native
   linker doesn't know about and discards them, but relocations against them
   remain, leading to rld crashes.  */
#ifdef TE_IRIX
int mips_flag_pdr = FALSE;
#else
int mips_flag_pdr = TRUE;
#endif

a133 3
/* Whether or not we have code that can call pic code.  */
int mips_abicalls = FALSE;

a179 3
  /* MIPS architecture (CPU) type.  Changed by .set arch=FOO, the -march
     command line option, and the default CPU.  */
  int arch;
d194 1
a194 1
  ISA_UNKNOWN, -1, -1, -1, 0, 0, 0, 0, 0, 0, 0, 0, CPU_UNKNOWN
d219 1
a219 1
static int file_mips_arch = CPU_UNKNOWN;
d221 1
d227 1
d232 14
a260 1
   || (ISA) == ISA_MIPS64R2          \
d266 1
a266 1
   (ISA) == ISA_MIPS64R2	\
a272 1
   || (ISA) == ISA_MIPS64R2	\
d297 2
a298 15

/* Addresses are loaded in different ways, depending on the address size
   in use.  The n32 ABI Documentation also mandates the use of additions
   with overflow checking, but existing implementations don't follow it.  */
#define ADDRESS_ADD_INSN						\
   (HAVE_32BIT_ADDRESSES ? "addu" : "daddu")

#define ADDRESS_ADDI_INSN						\
   (HAVE_32BIT_ADDRESSES ? "addiu" : "daddiu")

#define ADDRESS_LOAD_INSN						\
   (HAVE_32BIT_ADDRESSES ? "lw" : "ld")

#define ADDRESS_STORE_INSN						\
   (HAVE_32BIT_ADDRESSES ? "sw" : "sd")
d319 8
a326 24
/* True if mflo and mfhi can be immediately followed by instructions
   which write to the HI and LO registers.

   According to MIPS specifications, MIPS ISAs I, II, and III need
   (at least) two instructions between the reads of HI/LO and
   instructions which write them, and later ISAs do not.  Contradicting
   the MIPS specifications, some MIPS IV processor user manuals (e.g.
   the UM for the NEC Vr5000) document needing the instructions between
   HI/LO reads and writes, as well.  Therefore, we declare only MIPS32,
   MIPS64 and later ISAs to have the interlocks, plus any specific
   earlier-ISA CPUs for which CPU documentation declares that the
   instructions are really interlocked.  */
#define hilo_interlocks \
  (mips_opts.isa == ISA_MIPS32                        \
   || mips_opts.isa == ISA_MIPS32R2                   \
   || mips_opts.isa == ISA_MIPS64                     \
   || mips_opts.isa == ISA_MIPS64R2                   \
   || mips_opts.arch == CPU_R4010                     \
   || mips_opts.arch == CPU_R10000                    \
   || mips_opts.arch == CPU_R12000                    \
   || mips_opts.arch == CPU_RM7000                    \
   || mips_opts.arch == CPU_SB1                       \
   || mips_opts.arch == CPU_VR5500                    \
   )
d329 1
a329 4
   from the GPRs after they are loaded from memory, and thus does not
   require nops to be inserted.  This applies to instructions marked
   INSN_LOAD_MEMORY_DELAY.  These nops are only required at MIPS ISA
   level I.  */
d332 6
a337 11
   || mips_opts.arch == CPU_VR5400  \
   || mips_opts.arch == CPU_VR5500  \
   || mips_opts.arch == CPU_R3900)

/* Whether the processor uses hardware interlocks to avoid delays
   required by coprocessor instructions, and thus does not require
   nops to be inserted.  This applies to instructions marked
   INSN_LOAD_COPROC_DELAY, INSN_COPROC_MOVE_DELAY, and to delays
   between instructions marked INSN_WRITE_COND_CODE and ones marked
   INSN_READ_COND_CODE.  These nops are only required at MIPS ISA
   levels I, II, and III.  */
d339 5
a343 16
#define cop_interlocks                                \
  ((mips_opts.isa != ISA_MIPS1                        \
    && mips_opts.isa != ISA_MIPS2                     \
    && mips_opts.isa != ISA_MIPS3)                    \
   || mips_opts.arch == CPU_R4300                     \
   || mips_opts.arch == CPU_VR5400                    \
   || mips_opts.arch == CPU_VR5500                    \
   || mips_opts.arch == CPU_SB1                       \
   )

/* Whether the processor uses hardware interlocks to protect reads
   from coprocessor registers after they are loaded from memory, and
   thus does not require nops to be inserted.  This applies to
   instructions marked INSN_COPROC_MEMORY_DELAY.  These nops are only
   requires at MIPS ISA level I.  */
#define cop_mem_interlocks (mips_opts.isa != ISA_MIPS1)
d353 3
d400 1
a400 1
static int nopic_need_relax (symbolS *, int);
d447 1
a447 1
/* Similar for NewABI PIC code, where $gp is callee-saved.  NewABI has some
d584 1
a584 1
static int mips_fix_vr4120;
d593 75
a667 55
/* The expansion of many macros depends on the type of symbol that
   they refer to.  For example, when generating position-dependent code,
   a macro that refers to a symbol may have two different expansions,
   one which uses GP-relative addresses and one which uses absolute
   addresses.  When generating SVR4-style PIC, a macro may have
   different expansions for local and global symbols.

   We handle these situations by generating both sequences and putting
   them in variant frags.  In position-dependent code, the first sequence
   will be the GP-relative one and the second sequence will be the
   absolute one.  In SVR4 PIC, the first sequence will be for global
   symbols and the second will be for local symbols.

   The frag's "subtype" is RELAX_ENCODE (FIRST, SECOND), where FIRST and
   SECOND are the lengths of the two sequences in bytes.  These fields
   can be extracted using RELAX_FIRST() and RELAX_SECOND().  In addition,
   the subtype has the following flags:

   RELAX_USE_SECOND
	Set if it has been decided that we should use the second
	sequence instead of the first.

   RELAX_SECOND_LONGER
	Set in the first variant frag if the macro's second implementation
	is longer than its first.  This refers to the macro as a whole,
	not an individual relaxation.

   RELAX_NOMACRO
	Set in the first variant frag if the macro appeared in a .set nomacro
	block and if one alternative requires a warning but the other does not.

   RELAX_DELAY_SLOT
	Like RELAX_NOMACRO, but indicates that the macro appears in a branch
	delay slot.

   The frag's "opcode" points to the first fixup for relaxable code.

   Relaxable macros are generated using a sequence such as:

      relax_start (SYMBOL);
      ... generate first expansion ...
      relax_switch ();
      ... generate second expansion ...
      relax_end ();

   The code and fixups for the unwanted alternative are discarded
   by md_convert_frag.  */
#define RELAX_ENCODE(FIRST, SECOND) (((FIRST) << 8) | (SECOND))

#define RELAX_FIRST(X) (((X) >> 8) & 0xff)
#define RELAX_SECOND(X) ((X) & 0xff)
#define RELAX_USE_SECOND 0x10000
#define RELAX_SECOND_LONGER 0x20000
#define RELAX_NOMACRO 0x40000
#define RELAX_DELAY_SLOT 0x80000
a799 36
/* Global variables used when generating relaxable macros.  See the
   comment above RELAX_ENCODE for more details about how relaxation
   is used.  */
static struct {
  /* 0 if we're not emitting a relaxable macro.
     1 if we're emitting the first of the two relaxation alternatives.
     2 if we're emitting the second alternative.  */
  int sequence;

  /* The first relaxable fixup in the current frag.  (In other words,
     the first fixup that refers to relaxable code.)  */
  fixS *first_fixup;

  /* sizes[0] says how many bytes of the first alternative are stored in
     the current frag.  Likewise sizes[1] for the second alternative.  */
  unsigned int sizes[2];

  /* The symbol on which the choice of sequence depends.  */
  symbolS *symbol;
} mips_relax;

/* Global variables used to decide whether a macro needs a warning.  */
static struct {
  /* True if the macro is in a branch delay slot.  */
  bfd_boolean delay_slot_p;

  /* For relaxable macros, sizes[0] is the length of the first alternative
     in bytes and sizes[1] is the length of the second alternative.
     For non-relaxable macros, both elements give the length of the
     macro in bytes.  */
  unsigned int sizes[2];

  /* The first variant frag for this macro.  */
  fragS *first_frag;
} mips_macro_warning;

d802 2
a803 1
#define internalError()							\
d805 3
d811 11
d823 13
a835 2
  (struct mips_cl_insn *ip, expressionS *p, bfd_reloc_code_real_type *r);
static void mips_no_prev_insn (int);
d837 22
a858 6
  (expressionS *, const char *, const char *, va_list);
static void load_register (int, expressionS *, int);
static void macro_start (void);
static void macro_end (void);
static void macro (struct mips_cl_insn * ip);
static void mips16_macro (struct mips_cl_insn * ip);
d860 2
a861 1
static void macro2 (struct mips_cl_insn * ip);
d863 4
a866 2
static void mips_ip (char *str, struct mips_cl_insn * ip);
static void mips16_ip (char *str, struct mips_cl_insn * ip);
d868 4
a871 2
  (char *, unsigned int, int, offsetT, bfd_boolean, bfd_boolean, bfd_boolean,
   unsigned long *, bfd_boolean *, unsigned short *);
d873 77
a949 32
  (expressionS *, bfd_reloc_code_real_type *, char *);
static void my_getExpression (expressionS *, char *);
static void s_align (int);
static void s_change_sec (int);
static void s_change_section (int);
static void s_cons (int);
static void s_float_cons (int);
static void s_mips_globl (int);
static void s_option (int);
static void s_mipsset (int);
static void s_abicalls (int);
static void s_cpload (int);
static void s_cpsetup (int);
static void s_cplocal (int);
static void s_cprestore (int);
static void s_cpreturn (int);
static void s_gpvalue (int);
static void s_gpword (int);
static void s_gpdword (int);
static void s_cpadd (int);
static void s_insn (int);
static void md_obj_begin (void);
static void md_obj_end (void);
static void s_mips_ent (int);
static void s_mips_end (int);
static void s_mips_frame (int);
static void s_mips_mask (int reg_type);
static void s_mips_stab (int);
static void s_mips_weakext (int);
static void s_mips_file (int);
static void s_mips_loc (int);
static bfd_boolean pic_need_relax (symbolS *, asection *);
d951 8
a958 1
static int validate_mips_insn (const struct mips_opcode *);
d971 12
a982 3
static const struct mips_cpu_info *mips_parse_cpu (const char *, const char *);
static const struct mips_cpu_info *mips_cpu_info_from_isa (int);
static const struct mips_cpu_info *mips_cpu_info_from_arch (int);
d1075 1
a1075 1
extern void pop_insert (const pseudo_typeS *);
d1078 1
a1078 1
mips_pop_insert (void)
d1096 1
a1096 1
static void mips_clear_insn_labels (void);
d1099 1
a1099 1
mips_clear_insn_labels (void)
a1114 1
static expressionS imm2_expr;
d1138 1
a1138 1
mips_target_format (void)
d1181 1
a1181 1
md_begin (void)
d1187 1
a1187 1
  if (! bfd_set_arch_mach (stdoutput, bfd_arch_mips, file_mips_arch))
d1196 1
a1196 1
      retval = hash_insert (op_hash, name, (void *) &mips_opcodes[i]);
d1223 1
a1223 1
      retval = hash_insert (mips16_op_hash, name, (void *) &mips16_opcodes[i]);
d1380 1
a1380 1
	else if (OUTPUT_FLAVOR == bfd_target_elf_flavour && mips_flag_pdr)
d1399 1
a1399 1
md_mips_end (void)
d1406 2
a1407 1
md_assemble (char *str)
a1413 1
  imm2_expr.X_op = O_absent;
a1438 1
      macro_start ();
a1442 1
      macro_end ();
d1447 1
a1447 1
	append_insn (&insn, &imm_expr, imm_reloc);
d1449 1
a1449 1
	append_insn (&insn, &offset_expr, offset_reloc);
d1451 1
a1451 1
	append_insn (&insn, NULL, unused_reloc);
d1460 2
a1461 1
reloc_needs_lo_p (bfd_reloc_code_real_type reloc)
d1471 2
a1472 1
fixup_has_matching_lo_p (fixS *fixp)
d1484 4
a1487 2
insn_uses_reg (struct mips_cl_insn *ip, unsigned int reg,
	       enum mips_regclass class)
d1564 2
a1565 1
reg_needs_delay (unsigned int reg)
d1571 9
a1579 7
      && (((prev_pinfo & INSN_LOAD_MEMORY_DELAY)
	   && ! gpr_interlocks)
	  || ((prev_pinfo & INSN_LOAD_COPROC_DELAY)
	      && ! cop_interlocks)))
    {
      /* A load from a coprocessor or from memory.  All load delays
	 delay the use of general register rt for one instruction.  */
d1598 1
a1598 1
mips16_mark_labels (void)
d1618 4
a1621 2
/* End the current frag.  Make it a variant frag and record the
   relaxation info.  */
d1624 5
a1628 49
relax_close_frag (void)
{
  mips_macro_warning.first_frag = frag_now;
  frag_var (rs_machine_dependent, 0, 0,
	    RELAX_ENCODE (mips_relax.sizes[0], mips_relax.sizes[1]),
	    mips_relax.symbol, 0, (char *) mips_relax.first_fixup);

  memset (&mips_relax.sizes, 0, sizeof (mips_relax.sizes));
  mips_relax.first_fixup = 0;
}

/* Start a new relaxation sequence whose expansion depends on SYMBOL.
   See the comment above RELAX_ENCODE for more details.  */

static void
relax_start (symbolS *symbol)
{
  assert (mips_relax.sequence == 0);
  mips_relax.sequence = 1;
  mips_relax.symbol = symbol;
}

/* Start generating the second version of a relaxable sequence.
   See the comment above RELAX_ENCODE for more details.  */

static void
relax_switch (void)
{
  assert (mips_relax.sequence == 1);
  mips_relax.sequence = 2;
}

/* End the current relaxable sequence.  */

static void
relax_end (void)
{
  assert (mips_relax.sequence == 2);
  relax_close_frag ();
  mips_relax.sequence = 0;
}

/* Output an instruction.  IP is the instruction information.
   ADDRESS_EXPR is an operand of the instruction to be used with
   RELOC_TYPE.  */

static void
append_insn (struct mips_cl_insn *ip, expressionS *address_expr,
	     bfd_reloc_code_real_type *reloc_type)
a1633 2
  relax_stateT prev_insn_frag_type = 0;
  bfd_boolean relaxed_branch = FALSE;
d1642 1
a1642 2
  if (mips_relax.sequence != 2
      && (!mips_opts.noreorder || prev_nop_frag != NULL))
d1675 5
a1679 4
	  && (((prev_pinfo & INSN_LOAD_MEMORY_DELAY)
	       && ! gpr_interlocks)
	      || ((prev_pinfo & INSN_LOAD_COPROC_DELAY)
		  && ! cop_interlocks)))
d1683 2
a1684 1
	     instruction.  */
d1695 1
d1698 2
a1699 2
		   || ((prev_pinfo & INSN_COPROC_MEMORY_DELAY)
		       && ! cop_mem_interlocks)))
d1708 3
d1754 1
d1803 2
a1804 2
	     Also the tx39's multiply instructions can be executed
             immediately after a read from HI/LO (without the delay),
d1808 1
a1808 1
		 || (mips_opts.arch == CPU_R3900 && (pinfo & INSN_MULT)))
d1830 1
a1830 1
		 || (mips_opts.arch == CPU_R3900 && (pinfo & INSN_MULT)))
d1861 1
d1869 1
a1869 1
		    || (mips_opts.arch == CPU_R3900 && (pinfo & INSN_MULT))))
d1873 1
a1873 1
		    || (mips_opts.arch == CPU_R3900 && (pinfo & INSN_MULT)))))
d1884 1
a1884 1
      if (mips_fix_vr4120 && prev_insn.insn_mo->name)
d1888 1
a1888 1
	     limited to the VR4120 instruction set.  */
d2022 2
a2023 5
  /* Record the frag type before frag_var.  */
  if (prev_insn_frag)
    prev_insn_frag_type = prev_insn_frag->fr_type;

  if (address_expr
a2034 1
      relaxed_branch = TRUE;
d2063 2
a2080 15
      if (mips_relax.sequence)
	{
	  /* If we've reached the end of this frag, turn it into a variant
	     frag and record the information for the instructions we've
	     written so far.  */
	  if (frag_room () < 4)
	    relax_close_frag ();
	  mips_relax.sizes[mips_relax.sequence - 1] += 4;
	}

      if (mips_relax.sequence != 2)
	mips_macro_warning.sizes[0] += 4;
      if (mips_relax.sequence != 1)
	mips_macro_warning.sizes[1] += 4;

d2098 1
a2098 2
	      tmp = (address_expr->X_add_number
		     + ((valueT) 0x8000 << 32) + 0x80008000) >> 16;
d2153 1
d2155 114
a2268 78
	{
	  reloc_howto_type *howto;
	  int i;

	  /* In a compound relocation, it is the final (outermost)
	     operator that determines the relocated field.  */
	  for (i = 1; i < 3; i++)
	    if (reloc_type[i] == BFD_RELOC_UNUSED)
	      break;

	  howto = bfd_reloc_type_lookup (stdoutput, reloc_type[i - 1]);
	  fixp[0] = fix_new_exp (frag_now, f - frag_now->fr_literal,
				 bfd_get_reloc_size(howto),
				 address_expr,
				 reloc_type[0] == BFD_RELOC_16_PCREL_S2,
				 reloc_type[0]);

	  /* These relocations can have an addend that won't fit in
	     4 octets for 64bit assembly.  */
	  if (HAVE_64BIT_GPRS
	      && ! howto->partial_inplace
	      && (reloc_type[0] == BFD_RELOC_16
		  || reloc_type[0] == BFD_RELOC_32
		  || reloc_type[0] == BFD_RELOC_MIPS_JMP
		  || reloc_type[0] == BFD_RELOC_HI16_S
		  || reloc_type[0] == BFD_RELOC_LO16
		  || reloc_type[0] == BFD_RELOC_GPREL16
		  || reloc_type[0] == BFD_RELOC_MIPS_LITERAL
		  || reloc_type[0] == BFD_RELOC_GPREL32
		  || reloc_type[0] == BFD_RELOC_64
		  || reloc_type[0] == BFD_RELOC_CTOR
		  || reloc_type[0] == BFD_RELOC_MIPS_SUB
		  || reloc_type[0] == BFD_RELOC_MIPS_HIGHEST
		  || reloc_type[0] == BFD_RELOC_MIPS_HIGHER
		  || reloc_type[0] == BFD_RELOC_MIPS_SCN_DISP
		  || reloc_type[0] == BFD_RELOC_MIPS_REL16
		  || reloc_type[0] == BFD_RELOC_MIPS_RELGOT))
	    fixp[0]->fx_no_overflow = 1;

	  if (mips_relax.sequence)
	    {
	      if (mips_relax.first_fixup == 0)
		mips_relax.first_fixup = fixp[0];
	    }
	  else if (reloc_needs_lo_p (*reloc_type))
	    {
	      struct mips_hi_fixup *hi_fixup;

	      /* Reuse the last entry if it already has a matching %lo.  */
	      hi_fixup = mips_hi_fixup_list;
	      if (hi_fixup == 0
		  || !fixup_has_matching_lo_p (hi_fixup->fixp))
		{
		  hi_fixup = ((struct mips_hi_fixup *)
			      xmalloc (sizeof (struct mips_hi_fixup)));
		  hi_fixup->next = mips_hi_fixup_list;
		  mips_hi_fixup_list = hi_fixup;
		}
	      hi_fixup->fixp = fixp[0];
	      hi_fixup->seg = now_seg;
	    }

	  /* Add fixups for the second and third relocations, if given.
	     Note that the ABI allows the second relocation to be
	     against RSS_UNDEF, RSS_GP, RSS_GP0 or RSS_LOC.  At the
	     moment we only use RSS_UNDEF, but we could add support
	     for the others if it ever becomes necessary.  */
	  for (i = 1; i < 3; i++)
	    if (reloc_type[i] != BFD_RELOC_UNUSED)
	      {
		address_expr->X_op = O_absent;
		address_expr->X_add_symbol = 0;
		address_expr->X_add_number = 0;

		fixp[i] = fix_new_exp (frag_now, fixp[0]->fx_where,
				       fixp[0]->fx_size, address_expr,
				       FALSE, reloc_type[i]);
	      }
d2356 1
a2356 1
  if (mips_relax.sequence != 2 && !mips_opts.noreorder)
d2402 4
a2405 4
	      /* If the previous instruction is in a variant frag
		 other than this branch's one, we cannot do the swap.
		 This does not apply to the mips16, which uses variant
		 frags for different purposes.  */
d2407 1
a2407 1
		  && prev_insn_frag_type == rs_machine_dependent)
d2417 2
a2418 2
		  && (pinfo & INSN_READ_COND_CODE)
		  && ! cop_interlocks)
d2420 1
a2420 1
		 delay slot, because the target of the branch might
d2423 1
d2428 1
a2428 2
			 | INSN_WRITE_COND_CODE))
		  && ! cop_interlocks)
d2430 1
a2430 1
		     || (mips_opts.arch == CPU_R3900 && (pinfo & INSN_MULT)))
d2435 2
a2436 2
		  && (prev_pinfo & INSN_LOAD_MEMORY_DELAY)
		  && ! gpr_interlocks)
d2438 1
d2440 1
a2440 2
		  && (prev_pinfo & INSN_COPROC_MEMORY_DELAY)
		  && ! cop_mem_interlocks)
d2543 1
d2545 4
a2548 5
		  && (((prev_prev_insn.insn_mo->pinfo & INSN_LOAD_COPROC_DELAY)
		       && ! cop_interlocks)
		      || ((prev_prev_insn.insn_mo->pinfo
			   & INSN_LOAD_MEMORY_DELAY)
			  && ! gpr_interlocks))
d2592 3
a2594 23
		  if (!relaxed_branch)
		    {
		      /* If this is not a relaxed branch, then just
			 swap the instructions.  */
		      memcpy (temp, prev_f, 4);
		      memcpy (prev_f, f, 4);
		      memcpy (f, temp, 4);
		    }
		  else
		    {
		      /* If this is a relaxed branch, then we move the
			 instruction to be placed in the delay slot to
			 the current frag, shrinking the fixed part of
			 the originating frag.  If the branch occupies
			 the tail of the latter, we move it backwards,
			 into the space freed by the moved instruction.  */
		      f = frag_more (4);
		      memcpy (f, prev_f, 4);
		      prev_insn_frag->fr_fix -= 4;
		      if (prev_insn_frag->fr_type == rs_machine_dependent)
			memmove (prev_f, prev_f + 4, prev_insn_frag->fr_var);
		    }

d2622 6
a2627 2

		  if (!relaxed_branch)
d2629 2
a2630 15
		      if (fixp[0])
			{
			  fixp[0]->fx_frag = prev_insn_frag;
			  fixp[0]->fx_where = prev_insn_where;
			}
		      if (fixp[1])
			{
			  fixp[1]->fx_frag = prev_insn_frag;
			  fixp[1]->fx_where = prev_insn_where;
			}
		      if (fixp[2])
			{
			  fixp[2]->fx_frag = prev_insn_frag;
			  fixp[2]->fx_where = prev_insn_where;
			}
d2632 1
a2632 1
		  else if (prev_insn_frag->fr_type == rs_machine_dependent)
d2634 2
a2635 6
		      if (fixp[0])
			fixp[0]->fx_where -= 4;
		      if (fixp[1])
			fixp[1]->fx_where -= 4;
		      if (fixp[2])
			fixp[2]->fx_where -= 4;
d2747 1
a2747 1
  else if (mips_relax.sequence != 2)
d2763 9
d2779 2
a2780 1
mips_no_prev_insn (int preserve)
d2809 2
a2810 1
mips_emit_delays (bfd_boolean insns)
d2818 6
a2823 5
	   && ((prev_insn.insn_mo->pinfo
		& (INSN_LOAD_COPROC_DELAY
		   | INSN_COPROC_MOVE_DELAY
		   | INSN_WRITE_COND_CODE))
	       && ! cop_interlocks))
d2829 3
a2831 2
	      && (prev_insn.insn_mo->pinfo & INSN_LOAD_MEMORY_DELAY)
	      && ! gpr_interlocks)
d2833 3
a2835 2
	      && (prev_insn.insn_mo->pinfo & INSN_COPROC_MEMORY_DELAY)
	      && ! cop_mem_interlocks))
d2840 3
a2842 2
	       && ((prev_insn.insn_mo->pinfo & INSN_WRITE_COND_CODE)
		   && ! cop_interlocks))
d2852 3
a2854 2
		&& ((prev_prev_insn.insn_mo->pinfo & INSN_WRITE_COND_CODE)
		    && ! cop_interlocks))
d2864 1
a2864 1
      if (mips_fix_vr4120 && prev_insn.insn_mo->name)
a2925 65
/* Set up global variables for the start of a new macro.  */

static void
macro_start (void)
{
  memset (&mips_macro_warning.sizes, 0, sizeof (mips_macro_warning.sizes));
  mips_macro_warning.delay_slot_p = (mips_opts.noreorder
				     && (prev_insn.insn_mo->pinfo
					 & (INSN_UNCOND_BRANCH_DELAY
					    | INSN_COND_BRANCH_DELAY
					    | INSN_COND_BRANCH_LIKELY)) != 0);
}

/* Given that a macro is longer than 4 bytes, return the appropriate warning
   for it.  Return null if no warning is needed.  SUBTYPE is a bitmask of
   RELAX_DELAY_SLOT and RELAX_NOMACRO.  */

static const char *
macro_warning (relax_substateT subtype)
{
  if (subtype & RELAX_DELAY_SLOT)
    return _("Macro instruction expanded into multiple instructions"
	     " in a branch delay slot");
  else if (subtype & RELAX_NOMACRO)
    return _("Macro instruction expanded into multiple instructions");
  else
    return 0;
}

/* Finish up a macro.  Emit warnings as appropriate.  */

static void
macro_end (void)
{
  if (mips_macro_warning.sizes[0] > 4 || mips_macro_warning.sizes[1] > 4)
    {
      relax_substateT subtype;

      /* Set up the relaxation warning flags.  */
      subtype = 0;
      if (mips_macro_warning.sizes[1] > mips_macro_warning.sizes[0])
	subtype |= RELAX_SECOND_LONGER;
      if (mips_opts.warn_about_macros)
	subtype |= RELAX_NOMACRO;
      if (mips_macro_warning.delay_slot_p)
	subtype |= RELAX_DELAY_SLOT;

      if (mips_macro_warning.sizes[0] > 4 && mips_macro_warning.sizes[1] > 4)
	{
	  /* Either the macro has a single implementation or both
	     implementations are longer than 4 bytes.  Emit the
	     warning now.  */
	  const char *msg = macro_warning (subtype);
	  if (msg != 0)
	    as_warn (msg);
	}
      else
	{
	  /* One implementation might need a warning but the other
	     definitely doesn't.  */
	  mips_macro_warning.first_frag->fr_subtype |= subtype;
	}
    }
}

d2931 1
d2933 16
a2948 1
macro_build (expressionS *ep, const char *name, const char *fmt, ...)
d2954 1
d2956 26
d2985 1
a2985 1
      mips16_macro_build (ep, name, fmt, args);
d3007 2
a3008 2
			       mips_opts.arch)
	  && (mips_opts.arch != CPU_R4650 || (insn.insn_mo->pinfo & FP_D) == 0))
a3028 35
	case '+':
	  switch (*fmt++)
	    {
	    case 'A':
	    case 'E':
	      insn.insn_opcode |= (va_arg (args, int)
				   & OP_MASK_SHAMT) << OP_SH_SHAMT;
	      continue;

	    case 'B':
	    case 'F':
	      /* Note that in the macro case, these arguments are already
		 in MSB form.  (When handling the instruction in the
		 non-macro case, these arguments are sizes from which
		 MSB values must be calculated.)  */
	      insn.insn_opcode |= (va_arg (args, int)
				   & OP_MASK_INSMSB) << OP_SH_INSMSB;
	      continue;

	    case 'C':
	    case 'G':
	    case 'H':
	      /* Note that in the macro case, these arguments are already
		 in MSBD form.  (When handling the instruction in the
		 non-macro case, these arguments are sizes from which
		 MSBD values must be calculated.)  */
	      insn.insn_opcode |= (va_arg (args, int)
				   & OP_MASK_EXTMSBD) << OP_SH_EXTMSBD;
	      continue;

	    default:
	      internalError ();
	    }
	  continue;

d3164 1
a3164 1
  append_insn (&insn, ep, r);
d3168 7
a3174 2
mips16_macro_build (expressionS *ep, const char *name, const char *fmt,
		    va_list args)
d3290 1
a3290 1
  append_insn (&insn, ep, r);
d3298 3
a3300 1
macro_build_jalr (expressionS *ep)
d3302 1
a3302 1
  char *f = NULL;
d3306 1
a3306 1
      frag_grow (8);
d3309 2
a3310 1
  macro_build (NULL, "jalr", "d,s", RA, PIC_CALL_REG);
d3313 1
a3313 1
		 4, ep, FALSE, BFD_RELOC_MIPS_JALR);
d3320 5
a3324 1
macro_build_lui (expressionS *ep, int regnum)
d3335 7
a3341 1
  high_expr = *ep;
d3360 11
d3380 1
a3380 1
      append_insn (&insn, NULL, r);
d3383 1
a3383 1
    append_insn (&insn, &high_expr, r);
d3390 6
a3395 2
macro_build_ldst_constoffset (expressionS *ep, const char *op,
			      int treg, int breg, int dbl)
d3399 2
a3400 13
  /* Sign-extending 32-bit constants makes their handling easier.  */
  if (! dbl && ! ((ep->X_add_number & ~((bfd_vma) 0x7fffffff))
		  == ~((bfd_vma) 0x7fffffff)))
    {
      if (ep->X_add_number & ~((bfd_vma) 0xffffffff))
	as_bad (_("constant too large"));

      ep->X_add_number = (((ep->X_add_number & 0xffffffff) ^ 0x80000000)
			  - 0x80000000);
    }

  /* Right now, this routine can only handle signed 32-bit constants.  */
  if (! IS_SEXT_32BIT_NUM(ep->X_add_number + 0x8000))
d3406 2
a3407 1
      macro_build (ep, op, "t,o(b)", treg, BFD_RELOC_LO16, breg);
d3416 11
a3426 3
      macro_build_lui (ep, AT);
      macro_build (NULL, ADDRESS_ADD_INSN, "d,v,t", AT, AT, breg);
      macro_build (ep, op, "t,o(b)", treg, BFD_RELOC_LO16, AT);
d3438 4
a3441 1
set_at (int reg, int unsignedp)
d3446 3
a3448 2
    macro_build (&imm_expr, unsignedp ? "sltiu" : "slti", "t,r,j",
		 AT, reg, BFD_RELOC_LO16);
d3451 4
a3454 2
      load_register (AT, &imm_expr, HAVE_64BIT_GPRS);
      macro_build (NULL, unsignedp ? "sltu" : "slt", "d,v,t", AT, reg, AT);
a3457 8
static void
normalize_constant_expr (expressionS *ex)
{
  if (ex->X_op == O_constant && HAVE_32BIT_GPRS)
    ex->X_add_number = (((ex->X_add_number & 0xffffffff) ^ 0x80000000)
			- 0x80000000);
}

d3461 3
a3463 1
check_absolute_expr (struct mips_cl_insn *ip, expressionS *ex)
a3468 2

  normalize_constant_expr (ex);
d3548 1
a3548 1
 *  This routine generates the least number of instructions necessary to load
d3552 5
a3556 1
load_register (int reg, expressionS *ep, int dbl)
d3564 6
a3569 13

      /* Sign-extending 32-bit constants makes their handling easier.  */
      if (! dbl && ! ((ep->X_add_number & ~((bfd_vma) 0x7fffffff))
		      == ~((bfd_vma) 0x7fffffff)))
	{
	  if (ep->X_add_number & ~((bfd_vma) 0xffffffff))
	    as_bad (_("constant too large"));

	  ep->X_add_number = (((ep->X_add_number & 0xffffffff) ^ 0x80000000)
			      - 0x80000000);
	}

      if (IS_SEXT_16BIT_NUM (ep->X_add_number))
d3574 2
a3575 1
	  macro_build (ep, "addiu", "t,r,j", reg, 0, BFD_RELOC_LO16);
d3582 2
a3583 1
	  macro_build (ep, "ori", "t,r,i", reg, 0, BFD_RELOC_LO16);
d3586 11
a3596 1
      else if ((IS_SEXT_32BIT_NUM (ep->X_add_number)))
d3599 2
a3600 1
	  macro_build (ep, "lui", "t,u", reg, BFD_RELOC_HI16);
d3602 2
a3603 1
	    macro_build (ep, "ori", "t,r,i", reg, reg, BFD_RELOC_LO16);
d3614 2
a3615 1
      macro_build (ep, "addiu", "t,r,j", reg, 0, BFD_RELOC_LO16);
d3652 2
a3653 1
	      macro_build (&lo32, "addiu", "t,r,j", reg, 0, BFD_RELOC_LO16);
d3658 2
a3659 1
	      macro_build (&lo32, "lui", "t,u", reg, BFD_RELOC_HI16);
d3661 2
a3662 1
		macro_build (&lo32, "ori", "t,r,i", reg, reg, BFD_RELOC_LO16);
d3696 7
a3702 3
	      macro_build (&tmp, "ori", "t,r,i", reg, 0, BFD_RELOC_LO16);
	      macro_build (NULL, (shift >= 32) ? "dsll32" : "dsll", "d,w,<",
			   reg, reg, (shift >= 32) ? shift - 32 : shift);
d3749 2
a3750 1
	      macro_build (&tmp, "addiu", "t,r,j", reg, 0, BFD_RELOC_LO16);
d3754 9
a3762 5
		  macro_build (NULL, (bit >= 32) ? "dsll32" : "dsll", "d,w,<",
			       reg, reg, (bit >= 32) ? bit - 32 : bit);
		}
	      macro_build (NULL, (shift >= 32) ? "dsrl32" : "dsrl", "d,w,<",
			   reg, reg, (shift >= 32) ? shift - 32 : shift);
d3771 1
a3771 1
      load_register (reg, &hi32, 0);
d3778 2
a3779 1
	  macro_build (NULL, "dsll32", "d,w,<", reg, freg, 0);
d3789 4
a3792 2
	  macro_build (&lo32, "lui", "t,u", reg, BFD_RELOC_HI16);
	  macro_build (NULL, "dsrl32", "d,w,<", reg, reg, 0);
d3798 2
a3799 1
	  macro_build (NULL, "dsll", "d,w,<", reg, freg, 16);
d3804 4
a3807 2
      macro_build (&mid16, "ori", "t,r,i", reg, freg, BFD_RELOC_LO16);
      macro_build (NULL, "dsll", "d,w,<", reg, reg, 16);
d3811 2
a3812 1
    macro_build (&lo32, "ori", "t,r,i", reg, freg, BFD_RELOC_LO16);
d3818 5
a3822 1
load_address (int reg, expressionS *ep, int *used_at)
d3824 2
d3835 1
a3835 1
      load_register (reg, ep, HAVE_64BIT_ADDRESSES);
d3867 2
a3868 3
	  /* ??? We don't provide a GP-relative alternative for these macros.
	     It used not to be possible with the original relaxation code,
	     but it could be done now.  */
d3872 12
a3883 7
	      macro_build (ep, "lui", "t,u", reg, BFD_RELOC_MIPS_HIGHEST);
	      macro_build (ep, "lui", "t,u", AT, BFD_RELOC_HI16_S);
	      macro_build (ep, "daddiu", "t,r,j", reg, reg,
			   BFD_RELOC_MIPS_HIGHER);
	      macro_build (ep, "daddiu", "t,r,j", AT, AT, BFD_RELOC_LO16);
	      macro_build (NULL, "dsll32", "d,w,<", reg, reg, 0);
	      macro_build (NULL, "daddu", "d,v,t", reg, reg, AT);
d3888 12
a3899 7
	      macro_build (ep, "lui", "t,u", reg, BFD_RELOC_MIPS_HIGHEST);
	      macro_build (ep, "daddiu", "t,r,j", reg, reg,
			   BFD_RELOC_MIPS_HIGHER);
	      macro_build (NULL, "dsll", "d,w,<", reg, reg, 16);
	      macro_build (ep, "daddiu", "t,r,j", reg, reg, BFD_RELOC_HI16_S);
	      macro_build (NULL, "dsll", "d,w,<", reg, reg, 16);
	      macro_build (ep, "daddiu", "t,r,j", reg, reg, BFD_RELOC_LO16);
d3907 17
a3923 10
	      relax_start (ep->X_add_symbol);
	      macro_build (ep, ADDRESS_ADDI_INSN, "t,r,j", reg,
			   mips_gp_register, BFD_RELOC_GPREL16);
	      relax_switch ();
	    }
	  macro_build_lui (ep, reg);
	  macro_build (ep, ADDRESS_ADDI_INSN, "t,r,j",
		       reg, reg, BFD_RELOC_LO16);
	  if (mips_relax.sequence)
	    relax_end ();
d3944 2
d3948 2
a3949 1
	      ex.X_add_number = ep->X_add_number;
d3951 3
a3953 3
	      relax_start (ep->X_add_symbol);
	      macro_build (ep, ADDRESS_LOAD_INSN, "t,o(b)", reg,
			   BFD_RELOC_MIPS_GOT_DISP, mips_gp_register);
d3957 7
a3963 2
	      macro_build (&ex, ADDRESS_ADDI_INSN, "t,r,j",
			   reg, reg, BFD_RELOC_LO16);
a3964 1
	      relax_switch ();
d3966 12
a3977 4
	  macro_build (ep, ADDRESS_LOAD_INSN, "t,o(b)", reg,
		       BFD_RELOC_MIPS_GOT_DISP, mips_gp_register);
	  if (mips_relax.sequence)
	    relax_end ();
d3983 11
a3993 8
	  macro_build (ep, ADDRESS_LOAD_INSN, "t,o(b)", reg,
		       BFD_RELOC_MIPS_GOT16, mips_gp_register);
	  macro_build (NULL, "nop", "");
	  relax_start (ep->X_add_symbol);
	  relax_switch ();
	  macro_build (ep, ADDRESS_ADDI_INSN, "t,r,j", reg, reg,
		       BFD_RELOC_LO16);
	  relax_end ();
d4000 3
a4002 2
	      macro_build (&ex, ADDRESS_ADDI_INSN, "t,r,j",
			   reg, reg, BFD_RELOC_LO16);
d4009 1
d4029 4
a4032 1
	  ex.X_add_number = ep->X_add_number;
d4034 8
a4041 6
	  relax_start (ep->X_add_symbol);
	  macro_build (ep, "lui", "t,u", reg, BFD_RELOC_MIPS_GOT_HI16);
	  macro_build (NULL, ADDRESS_ADD_INSN, "d,v,t",
		       reg, reg, mips_gp_register);
	  macro_build (ep, ADDRESS_LOAD_INSN, "t,o(b)",
		       reg, BFD_RELOC_MIPS_GOT_LO16, reg);
d4047 3
a4049 2
	      macro_build (&ex, ADDRESS_ADDI_INSN, "t,r,j", reg, reg,
			   BFD_RELOC_LO16);
d4053 10
a4062 6
	  relax_switch ();
	  macro_build (ep, ADDRESS_LOAD_INSN, "t,o(b)", reg,
		       BFD_RELOC_MIPS_GOT_PAGE, mips_gp_register);
	  macro_build (ep, ADDRESS_ADDI_INSN, "t,r,j", reg, reg,
		       BFD_RELOC_MIPS_GOT_OFST);
	  relax_end ();
a4067 7
	  relax_start (ep->X_add_symbol);
	  macro_build (ep, "lui", "t,u", reg, BFD_RELOC_MIPS_GOT_HI16);
	  macro_build (NULL, ADDRESS_ADD_INSN, "d,v,t",
		       reg, reg, mips_gp_register);
	  macro_build (ep, ADDRESS_LOAD_INSN, "t,o(b)",
		       reg, BFD_RELOC_MIPS_GOT_LO16, reg);
	  relax_switch ();
d4069 17
d4091 2
a4092 1
	      macro_build (NULL, "nop", "");
d4094 9
a4102 6
	  macro_build (ep, ADDRESS_LOAD_INSN, "t,o(b)", reg,
		       BFD_RELOC_MIPS_GOT16, mips_gp_register);
	  macro_build (NULL, "nop", "");
	  macro_build (ep, ADDRESS_ADDI_INSN, "t,r,j", reg, reg,
		       BFD_RELOC_LO16);
	  relax_end ();
d4109 3
a4111 2
	      macro_build (&ex, ADDRESS_ADDI_INSN, "t,r,j", reg, reg,
			   BFD_RELOC_LO16);
d4120 3
a4122 2
      macro_build (ep, ADDRESS_ADDI_INSN, "t,r,j",
		   reg, mips_gp_register, BFD_RELOC_GPREL16);
d4131 8
a4138 79
move_register (int dest, int source)
{
  macro_build (NULL, HAVE_32BIT_GPRS ? "addu" : "daddu", "d,v,t",
	       dest, source, 0);
}

/* Emit an SVR4 PIC sequence to load address LOCAL into DEST, where
   LOCAL is the sum of a symbol and a 16-bit or 32-bit displacement.
   The two alternatives are:

   Global symbol		Local sybmol
   -------------		------------
   lw DEST,%got(SYMBOL)		lw DEST,%got(SYMBOL + OFFSET)
   ...				...
   addiu DEST,DEST,OFFSET	addiu DEST,DEST,%lo(SYMBOL + OFFSET)

   load_got_offset emits the first instruction and add_got_offset
   emits the second for a 16-bit offset or add_got_offset_hilo emits
   a sequence to add a 32-bit offset using a scratch register.  */

static void
load_got_offset (int dest, expressionS *local)
{
  expressionS global;

  global = *local;
  global.X_add_number = 0;

  relax_start (local->X_add_symbol);
  macro_build (&global, ADDRESS_LOAD_INSN, "t,o(b)", dest,
	       BFD_RELOC_MIPS_GOT16, mips_gp_register);
  relax_switch ();
  macro_build (local, ADDRESS_LOAD_INSN, "t,o(b)", dest,
	       BFD_RELOC_MIPS_GOT16, mips_gp_register);
  relax_end ();
}

static void
add_got_offset (int dest, expressionS *local)
{
  expressionS global;

  global.X_op = O_constant;
  global.X_op_symbol = NULL;
  global.X_add_symbol = NULL;
  global.X_add_number = local->X_add_number;

  relax_start (local->X_add_symbol);
  macro_build (&global, ADDRESS_ADDI_INSN, "t,r,j",
	       dest, dest, BFD_RELOC_LO16);
  relax_switch ();
  macro_build (local, ADDRESS_ADDI_INSN, "t,r,j", dest, dest, BFD_RELOC_LO16);
  relax_end ();
}

static void
add_got_offset_hilo (int dest, expressionS *local, int tmp)
{
  expressionS global;
  int hold_mips_optimize;

  global.X_op = O_constant;
  global.X_op_symbol = NULL;
  global.X_add_symbol = NULL;
  global.X_add_number = local->X_add_number;

  relax_start (local->X_add_symbol);
  load_register (tmp, &global, HAVE_64BIT_ADDRESSES);
  relax_switch ();
  /* Set mips_optimize around the lui instruction to avoid
     inserting an unnecessary nop after the lw.  */
  hold_mips_optimize = mips_optimize;
  mips_optimize = 2;
  macro_build_lui (&global, tmp);
  mips_optimize = hold_mips_optimize;
  macro_build (local, ADDRESS_ADDI_INSN, "t,r,j", tmp, tmp, BFD_RELOC_LO16);
  relax_end ();

  macro_build (NULL, ADDRESS_ADD_INSN, "d,v,t", dest, dest, tmp);
d4146 1
a4146 1
 * probably be handled by some kind of table or grammar approach instead of
d4150 1
a4150 1
 * consecutively that would load AT with the upper half of the same address.
d4160 2
a4161 1
macro (struct mips_cl_insn *ip)
d4166 1
d4177 1
a4177 1
  int call = 0;
a4178 1
  offsetT maxnum;
d4194 24
d4233 1
a4233 1
      macro_build (&expr1, "bgez", "s,p", sreg);
d4235 2
a4236 1
	macro_build (NULL, "nop", "", 0);
d4238 3
a4240 2
	move_register (dreg, sreg);
      macro_build (NULL, dbl ? "dsub" : "sub", "d,v,t", dreg, 0, sreg);
d4267 2
a4268 1
	  macro_build (&imm_expr, s, "t,r,j", treg, sreg, BFD_RELOC_LO16);
d4271 3
a4273 2
      load_register (AT, &imm_expr, dbl);
      macro_build (NULL, s2, "d,v,t", treg, sreg, AT);
d4297 2
a4298 1
	    macro_build (&imm_expr, s, "t,r,i", treg, sreg, BFD_RELOC_LO16);
d4301 4
a4304 3
	      macro_build (&imm_expr, "ori", "t,r,i",
			   treg, sreg, BFD_RELOC_LO16);
	      macro_build (NULL, "nor", "d,v,t", treg, treg, 0);
d4309 3
a4311 2
      load_register (AT, &imm_expr, HAVE_64BIT_GPRS);
      macro_build (NULL, s2, "d,v,t", treg, sreg, AT);
d4330 2
a4331 1
	  macro_build (&offset_expr, s, "s,t,p", sreg, 0);
d4334 2
a4335 2
      load_register (AT, &imm_expr, HAVE_64BIT_GPRS);
      macro_build (&offset_expr, s, "s,t,p", sreg, AT);
d4343 2
a4344 1
	  macro_build (&offset_expr, likely ? "bgezl" : "bgez", "s,p", sreg);
d4349 2
a4350 1
	  macro_build (&offset_expr, likely ? "blezl" : "blez", "s,p", treg);
d4353 4
a4356 2
      macro_build (NULL, "slt", "d,v,t", AT, sreg, treg);
      macro_build (&offset_expr, likely ? "beql" : "beq", "s,t,p", AT, 0);
d4378 7
a4384 1
	    macro_build (NULL, "nop", "", 0);
d4386 7
a4392 1
	    macro_build (&offset_expr, "bnel", "s,t,p", 0, 0);
d4405 2
a4406 1
	  macro_build (&offset_expr, likely ? "bgezl" : "bgez", "s,p", sreg);
d4411 2
a4412 1
	  macro_build (&offset_expr, likely ? "bgtzl" : "bgtz", "s,p", sreg);
d4431 1
a4431 1
	  macro_build (&offset_expr, "b", "p");
d4434 3
a4436 2
      set_at (sreg, 0);
      macro_build (&offset_expr, likely ? "beql" : "beq", "s,t,p", AT, 0);
d4446 2
a4447 2
	  macro_build (&offset_expr, likely ? "beql" : "beq",
		       "s,t,p", 0, treg);
d4450 4
a4453 2
      macro_build (NULL, "sltu", "d,v,t", AT, sreg, treg);
      macro_build (&offset_expr, likely ? "beql" : "beq", "s,t,p", AT, 0);
d4476 2
a4477 2
	  macro_build (&offset_expr, likely ? "bnel" : "bne",
		       "s,t,p", sreg, 0);
d4480 3
a4482 2
      set_at (sreg, 1);
      macro_build (&offset_expr, likely ? "beql" : "beq", "s,t,p", AT, 0);
d4490 2
a4491 1
	  macro_build (&offset_expr, likely ? "bgtzl" : "bgtz", "s,p", sreg);
d4496 2
a4497 1
	  macro_build (&offset_expr, likely ? "bltzl" : "bltz", "s,p", treg);
d4500 4
a4503 2
      macro_build (NULL, "slt", "d,v,t", AT, treg, sreg);
      macro_build (&offset_expr, likely ? "bnel" : "bne", "s,t,p", AT, 0);
d4511 2
a4512 2
	  macro_build (&offset_expr, likely ? "bnel" : "bne",
		       "s,t,p", sreg, 0);
d4517 4
a4520 2
      macro_build (NULL, "sltu", "d,v,t", AT, treg, sreg);
      macro_build (&offset_expr, likely ? "bnel" : "bne", "s,t,p", AT, 0);
d4528 2
a4529 1
	  macro_build (&offset_expr, likely ? "blezl" : "blez", "s,p", sreg);
d4534 2
a4535 1
	  macro_build (&offset_expr, likely ? "bgezl" : "bgez", "s,p", treg);
d4538 4
a4541 2
      macro_build (NULL, "slt", "d,v,t", AT, treg, sreg);
      macro_build (&offset_expr, likely ? "beql" : "beq", "s,t,p", AT, 0);
d4569 2
a4570 1
	  macro_build (&offset_expr, likely ? "bltzl" : "bltz", "s,p", sreg);
d4575 2
a4576 1
	  macro_build (&offset_expr, likely ? "blezl" : "blez", "s,p", sreg);
d4579 3
a4581 2
      set_at (sreg, 0);
      macro_build (&offset_expr, likely ? "bnel" : "bne", "s,t,p", AT, 0);
d4589 2
a4590 2
	  macro_build (&offset_expr, likely ? "beql" : "beq",
		       "s,t,p", sreg, 0);
d4595 4
a4598 2
      macro_build (NULL, "sltu", "d,v,t", AT, treg, sreg);
      macro_build (&offset_expr, likely ? "beql" : "beq", "s,t,p", AT, 0);
d4621 2
a4622 1
	  macro_build (&offset_expr, likely ? "beql" : "beq",
d4626 3
a4628 2
      set_at (sreg, 1);
      macro_build (&offset_expr, likely ? "bnel" : "bne", "s,t,p", AT, 0);
d4636 2
a4637 1
	  macro_build (&offset_expr, likely ? "bltzl" : "bltz", "s,p", sreg);
d4642 2
a4643 1
	  macro_build (&offset_expr, likely ? "bgtzl" : "bgtz", "s,p", treg);
d4646 4
a4649 2
      macro_build (NULL, "slt", "d,v,t", AT, sreg, treg);
      macro_build (&offset_expr, likely ? "bnel" : "bne", "s,t,p", AT, 0);
d4659 2
a4660 2
	  macro_build (&offset_expr, likely ? "bnel" : "bne",
		       "s,t,p", 0, treg);
d4663 5
a4667 2
      macro_build (NULL, "sltu", "d,v,t", AT, sreg, treg);
      macro_build (&offset_expr, likely ? "bnel" : "bne", "s,t,p", AT, 0);
a4669 97
    case M_DEXT:
      {
	unsigned long pos;
	unsigned long size;

        if (imm_expr.X_op != O_constant || imm2_expr.X_op != O_constant)
	  {
	    as_bad (_("Unsupported large constant"));
	    pos = size = 1;
	  }
	else
	  {
	    pos = (unsigned long) imm_expr.X_add_number;
	    size = (unsigned long) imm2_expr.X_add_number;
	  }

	if (pos > 63)
	  {
	    as_bad (_("Improper position (%lu)"), pos);
	    pos = 1;
	  }
        if (size == 0 || size > 64
	    || (pos + size - 1) > 63)
	  {
	    as_bad (_("Improper extract size (%lu, position %lu)"),
		    size, pos);
	    size = 1;
	  }

	if (size <= 32 && pos < 32)
	  {
	    s = "dext";
	    fmt = "t,r,+A,+C";
	  }
	else if (size <= 32)
	  {
	    s = "dextu";
	    fmt = "t,r,+E,+H";
	  }
	else
	  {
	    s = "dextm";
	    fmt = "t,r,+A,+G";
	  }
	macro_build ((expressionS *) NULL, s, fmt, treg, sreg, pos, size - 1);
      }
      return;

    case M_DINS:
      {
	unsigned long pos;
	unsigned long size;

        if (imm_expr.X_op != O_constant || imm2_expr.X_op != O_constant)
	  {
	    as_bad (_("Unsupported large constant"));
	    pos = size = 1;
	  }
	else
	  {
	    pos = (unsigned long) imm_expr.X_add_number;
	    size = (unsigned long) imm2_expr.X_add_number;
	  }

	if (pos > 63)
	  {
	    as_bad (_("Improper position (%lu)"), pos);
	    pos = 1;
	  }
        if (size == 0 || size > 64
	    || (pos + size - 1) > 63)
	  {
	    as_bad (_("Improper insert size (%lu, position %lu)"),
		    size, pos);
	    size = 1;
	  }

	if (pos < 32 && (pos + size - 1) < 32)
	  {
	    s = "dins";
	    fmt = "t,r,+A,+B";
	  }
	else if (pos >= 32)
	  {
	    s = "dinsu";
	    fmt = "t,r,+E,+F";
	  }
	else
	  {
	    s = "dinsm";
	    fmt = "t,r,+A,+F";
	  }
	macro_build ((expressionS *) NULL, s, fmt, treg, sreg, pos,
		     pos + size - 1);
      }
      return;

d4684 2
a4685 1
	    macro_build (NULL, "teq", "s,t,q", 0, 0, 7);
d4687 2
a4688 1
	    macro_build (NULL, "break", "c", 7);
d4697 4
a4700 2
	  macro_build (NULL, "teq", "s,t,q", treg, 0, 7);
	  macro_build (NULL, dbl ? "ddiv" : "div", "z,s,t", sreg, treg);
d4705 5
a4709 3
	  macro_build (&expr1, "bne", "s,t,p", treg, 0);
	  macro_build (NULL, dbl ? "ddiv" : "div", "z,s,t", sreg, treg);
	  macro_build (NULL, "break", "c", 7);
d4712 3
a4714 1
      load_register (AT, &expr1, dbl);
d4716 1
a4716 1
      macro_build (&expr1, "bne", "s,t,p", treg, AT);
d4720 4
a4723 2
	  load_register (AT, &expr1, dbl);
	  macro_build (NULL, "dsll32", "d,w,<", AT, AT, 31);
d4728 2
a4729 1
	  macro_build (&expr1, "lui", "t,u", AT, BFD_RELOC_HI16);
d4733 2
a4734 1
	  macro_build (NULL, "teq", "s,t,q", sreg, AT, 6);
d4742 3
a4744 2
	  macro_build (&expr1, "bne", "s,t,p", sreg, AT);
	  macro_build (NULL, "nop", "", 0);
d4750 2
a4751 1
	  macro_build (NULL, "break", "c", 6);
d4753 1
a4753 1
      macro_build (NULL, s, "d", dreg);
d4796 2
a4797 1
	    macro_build (NULL, "teq", "s,t,q", 0, 0, 7);
d4799 2
a4800 1
	    macro_build (NULL, "break", "c", 7);
d4806 1
a4806 1
	    move_register (dreg, sreg);
d4808 1
a4808 1
	    move_register (dreg, 0);
d4817 2
a4818 1
	      macro_build (NULL, dbl ? "dneg" : "neg", "d,w", dreg, sreg);
d4821 1
a4821 1
	    move_register (dreg, 0);
d4825 4
a4828 3
      load_register (AT, &imm_expr, dbl);
      macro_build (NULL, s, "z,s,t", sreg, AT);
      macro_build (NULL, s2, "d", dreg);
d4852 4
a4855 2
	  macro_build (NULL, "teq", "s,t,q", treg, 0, 7);
	  macro_build (NULL, s, "z,s,t", sreg, treg);
d4863 3
a4865 2
	  macro_build (&expr1, "bne", "s,t,p", treg, 0);
	  macro_build (NULL, s, "z,s,t", sreg, treg);
d4870 2
a4871 1
	  macro_build (NULL, "break", "c", 7);
d4873 1
a4873 1
      macro_build (NULL, s2, "d", dreg);
a4875 5
    case M_DLCA_AB:
      dbl = 1;
    case M_LCA_AB:
      call = 1;
      goto do_la;
a4878 1
    do_la:
d4892 4
a4895 3
	  macro_build (&offset_expr,
		       (dbl || HAVE_64BIT_ADDRESSES) ? "daddiu" : "addiu",
		       "t,r,j", treg, sreg, BFD_RELOC_LO16);
d4935 2
a4936 2
	      macro_build (&offset_expr, "lui", "t,u",
			   tempreg, BFD_RELOC_PCREL_HI16_S);
d4940 3
a4942 3
	      macro_build (&offset_expr, "lui", "t,u",
			   tempreg, BFD_RELOC_PCREL_HI16_S);
	      macro_build (NULL,
d4946 1
a4946 1
	  macro_build (&offset_expr,
d4948 1
a4948 1
		       "t,r,j", treg, tempreg, BFD_RELOC_PCREL_LO16);
d4962 1
a4962 1
	load_register (tempreg, &offset_expr,
d4993 1
d4996 2
a4997 3
	      /* ??? We don't provide a GP-relative alternative for
		 these macros.  It used not to be possible with the
		 original relaxation code, but it could be done now.  */
d5001 12
a5012 10
		  macro_build (&offset_expr, "lui", "t,u",
			       tempreg, BFD_RELOC_MIPS_HIGHEST);
		  macro_build (&offset_expr, "lui", "t,u",
			       AT, BFD_RELOC_HI16_S);
		  macro_build (&offset_expr, "daddiu", "t,r,j",
			       tempreg, tempreg, BFD_RELOC_MIPS_HIGHER);
		  macro_build (&offset_expr, "daddiu", "t,r,j",
			       AT, AT, BFD_RELOC_LO16);
		  macro_build (NULL, "dsll32", "d,w,<", tempreg, tempreg, 0);
		  macro_build (NULL, "daddu", "d,v,t", tempreg, tempreg, AT);
d5017 12
a5028 10
		  macro_build (&offset_expr, "lui", "t,u",
			       tempreg, BFD_RELOC_MIPS_HIGHEST);
		  macro_build (&offset_expr, "daddiu", "t,r,j",
			       tempreg, tempreg, BFD_RELOC_MIPS_HIGHER);
		  macro_build (NULL, "dsll", "d,w,<", tempreg, tempreg, 16);
		  macro_build (&offset_expr, "daddiu", "t,r,j",
			       tempreg, tempreg, BFD_RELOC_HI16_S);
		  macro_build (NULL, "dsll", "d,w,<", tempreg, tempreg, 16);
		  macro_build (&offset_expr, "daddiu", "t,r,j",
			       tempreg, tempreg, BFD_RELOC_LO16);
d5036 16
a5051 10
		  relax_start (offset_expr.X_add_symbol);
		  macro_build (&offset_expr, ADDRESS_ADDI_INSN, "t,r,j",
			       tempreg, mips_gp_register, BFD_RELOC_GPREL16);
		  relax_switch ();
		}
	      macro_build_lui (&offset_expr, tempreg);
	      macro_build (&offset_expr, ADDRESS_ADDI_INSN, "t,r,j",
			   tempreg, tempreg, BFD_RELOC_LO16);
	      if (mips_relax.sequence)
		relax_end ();
d5061 1
a5061 1
	     or for lca or if tempreg is PIC_CALL_REG
d5088 9
a5096 1
	  if (offset_expr.X_add_number == 0)
d5098 2
a5099 2
	      if (breg == 0 && (call || tempreg == PIC_CALL_REG))
		lw_reloc_type = (int) BFD_RELOC_MIPS_CALL16;
d5101 3
a5103 4
	      relax_start (offset_expr.X_add_symbol);
	      macro_build (&offset_expr, ADDRESS_LOAD_INSN, "t,o(b)", tempreg,
			   lw_reloc_type, mips_gp_register);
	      if (breg != 0)
d5108 14
a5121 1
		  macro_build (NULL, "nop", "");
d5123 3
a5125 7
	      relax_switch ();
	      macro_build (&offset_expr, ADDRESS_LOAD_INSN, "t,o(b)",
			   tempreg, BFD_RELOC_MIPS_GOT16, mips_gp_register);
	      macro_build (NULL, "nop", "");
	      macro_build (&offset_expr, ADDRESS_ADDI_INSN, "t,r,j",
			   tempreg, tempreg, BFD_RELOC_LO16);
	      relax_end ();
d5130 2
a5131 2
	  else if (offset_expr.X_add_number >= -0x8000
		   && offset_expr.X_add_number < 0x8000)
d5133 8
a5140 3
	      load_got_offset (tempreg, &offset_expr);
	      macro_build (NULL, "nop", "");
	      add_got_offset (tempreg, &offset_expr);
d5144 2
a5145 5
	      expr1.X_add_number = offset_expr.X_add_number;
	      offset_expr.X_add_number =
		((offset_expr.X_add_number + 0x8000) & 0xffff) - 0x8000;
	      load_got_offset (tempreg, &offset_expr);
	      offset_expr.X_add_number = expr1.X_add_number;
d5153 3
a5155 1
	      if (breg == treg)
d5157 5
a5161 3
		  macro_build (NULL, "nop", "");
		  macro_build (NULL, ADDRESS_ADD_INSN, "d,v,t",
			       treg, AT, breg);
d5164 1
d5166 17
a5182 1
	      add_got_offset_hilo (tempreg, &offset_expr, AT);
d5188 3
a5190 1
	  int add_breg_early = 0;
d5196 1
a5196 1
	     or for lca or if tempreg is PIC_CALL_REG
d5215 3
d5220 2
a5221 1
	      expr1.X_add_number = offset_expr.X_add_number;
d5224 4
a5227 3
	      relax_start (offset_expr.X_add_symbol);
	      macro_build (&offset_expr, ADDRESS_LOAD_INSN, "t,o(b)", tempreg,
			   BFD_RELOC_MIPS_GOT_DISP, mips_gp_register);
d5232 7
a5238 2
		  macro_build (&expr1, ADDRESS_ADDI_INSN, "t,r,j",
			       tempreg, tempreg, BFD_RELOC_LO16);
d5240 1
a5240 1
	      else if (IS_SEXT_32BIT_NUM (expr1.X_add_number + 0x8000))
d5256 3
a5258 2
		      macro_build (NULL, ADDRESS_ADD_INSN, "d,v,t",
				   treg, AT, breg);
d5260 1
a5260 1
		      add_breg_early = 1;
d5263 12
a5274 3
		  load_register (AT, &expr1, HAVE_64BIT_ADDRESSES);
		  macro_build (NULL, ADDRESS_ADD_INSN, "d,v,t",
			       dreg, dreg, AT);
a5280 1
	      relax_switch ();
d5283 5
a5287 3
	      macro_build (&offset_expr, ADDRESS_LOAD_INSN, "t,o(b)", tempreg,
			   BFD_RELOC_MIPS_GOT_DISP, mips_gp_register);
	      if (add_breg_early)
d5289 3
a5291 2
		  macro_build (NULL, ADDRESS_ADD_INSN, "d,v,t",
			       treg, tempreg, breg);
a5294 1
	      relax_end ();
d5296 1
a5296 1
	  else if (breg == 0 && (call || tempreg == PIC_CALL_REG))
d5298 8
a5305 7
	      relax_start (offset_expr.X_add_symbol);
	      macro_build (&offset_expr, ADDRESS_LOAD_INSN, "t,o(b)", tempreg,
			   BFD_RELOC_MIPS_CALL16, mips_gp_register);
	      relax_switch ();
	      macro_build (&offset_expr, ADDRESS_LOAD_INSN, "t,o(b)", tempreg,
			   BFD_RELOC_MIPS_GOT_DISP, mips_gp_register);
	      relax_end ();
d5307 2
a5308 1
	  else
d5310 4
a5313 2
	      macro_build (&offset_expr, ADDRESS_LOAD_INSN, "t,o(b)", tempreg,
			   BFD_RELOC_MIPS_GOT_DISP, mips_gp_register);
d5318 2
a5319 1
	  int gpdelay;
d5329 1
a5329 1
	     or for lca or if tempreg is PIC_CALL_REG
d5367 6
a5372 4
	  relax_start (offset_expr.X_add_symbol);
	  gpdelay = reg_needs_delay (mips_gp_register);
	  if (expr1.X_add_number == 0 && breg == 0
	      && (call || tempreg == PIC_CALL_REG))
d5377 8
a5384 5
	  macro_build (&offset_expr, "lui", "t,u", tempreg, lui_reloc_type);
	  macro_build (NULL, ADDRESS_ADD_INSN, "d,v,t",
		       tempreg, tempreg, mips_gp_register);
	  macro_build (&offset_expr, ADDRESS_LOAD_INSN, "t,o(b)",
		       tempreg, lw_reloc_type, tempreg);
d5387 5
a5391 1
	      if (breg != 0)
d5396 3
a5398 1
		  macro_build (NULL, "nop", "");
d5400 8
d5412 12
a5423 3
	      macro_build (NULL, "nop", "");
	      macro_build (&expr1, ADDRESS_ADDI_INSN, "t,r,j",
			   tempreg, tempreg, BFD_RELOC_LO16);
d5427 1
a5427 1
	      int dreg;
d5437 4
a5440 1
		dreg = tempreg;
d5444 5
a5448 3
		  macro_build (NULL, "nop", "");
		  macro_build (NULL, ADDRESS_ADD_INSN, "d,v,t",
			       treg, AT, breg);
d5450 1
d5453 21
a5473 2
	      load_register (AT, &expr1, HAVE_64BIT_ADDRESSES);
	      macro_build (NULL, ADDRESS_ADD_INSN, "d,v,t", dreg, dreg, AT);
a5476 3
	  offset_expr.X_add_number =
	    ((expr1.X_add_number + 0x8000) & 0xffff) - 0x8000;
	  relax_switch ();
d5478 1
a5478 1
	  if (gpdelay)
d5482 2
a5483 1
	      macro_build (NULL, "nop", "");
d5486 6
a5491 2
	  macro_build (&offset_expr, ADDRESS_LOAD_INSN, "t,o(b)", tempreg,
		       local_reloc_type, mips_gp_register);
d5495 5
a5499 3
	      macro_build (NULL, "nop", "");
	      macro_build (&offset_expr, ADDRESS_ADDI_INSN, "t,r,j",
			   tempreg, tempreg, BFD_RELOC_LO16);
d5513 6
a5518 3
		  macro_build (NULL, "nop", "");
		  macro_build (NULL, ADDRESS_ADD_INSN, "d,v,t",
			       treg, AT, breg);
d5525 10
a5534 5
	      macro_build_lui (&expr1, AT);
	      macro_build (&offset_expr, ADDRESS_ADDI_INSN, "t,r,j",
			   AT, AT, BFD_RELOC_LO16);
	      macro_build (NULL, ADDRESS_ADD_INSN, "d,v,t",
			   tempreg, tempreg, AT);
a5535 1
	  relax_end ();
d5539 1
d5542 1
a5542 1
	  int add_breg_early = 0;
d5549 1
a5549 1
	     or for lca or if tempreg is PIC_CALL_REG
d5575 1
a5575 1
	  relax_start (offset_expr.X_add_symbol);
d5577 2
a5578 1
	  expr1.X_add_number = offset_expr.X_add_number;
d5581 1
a5581 2
	  if (expr1.X_add_number == 0 && breg == 0
	      && (call || tempreg == PIC_CALL_REG))
d5586 8
a5593 5
	  macro_build (&offset_expr, "lui", "t,u", tempreg, lui_reloc_type);
	  macro_build (NULL, ADDRESS_ADD_INSN, "d,v,t",
		       tempreg, tempreg, mips_gp_register);
	  macro_build (&offset_expr, ADDRESS_LOAD_INSN, "t,o(b)",
		       tempreg, lw_reloc_type, tempreg);
d5596 6
a5601 1
	    ;
d5605 8
a5612 2
	      macro_build (&expr1, ADDRESS_ADDI_INSN, "t,r,j",
			   tempreg, tempreg, BFD_RELOC_LO16);
d5614 1
a5614 1
	  else if (IS_SEXT_32BIT_NUM (expr1.X_add_number + 0x8000))
d5630 3
a5632 2
		  macro_build (NULL, ADDRESS_ADD_INSN, "d,v,t",
			       treg, AT, breg);
d5634 1
a5634 1
		  add_breg_early = 1;
d5637 17
a5653 2
	      load_register (AT, &expr1, HAVE_64BIT_ADDRESSES);
	      macro_build (NULL, ADDRESS_ADD_INSN, "d,v,t", dreg, dreg, AT);
a5659 1
	  relax_switch ();
d5661 12
a5672 8
	  macro_build (&offset_expr, ADDRESS_LOAD_INSN, "t,o(b)", tempreg,
		       BFD_RELOC_MIPS_GOT_PAGE, mips_gp_register);
	  macro_build (&offset_expr, ADDRESS_ADDI_INSN, "t,r,j", tempreg,
		       tempreg, BFD_RELOC_MIPS_GOT_OFST);
	  if (add_breg_early)
	    {
	      macro_build (NULL, ADDRESS_ADD_INSN, "d,v,t",
			   treg, tempreg, breg);
a5675 1
	  relax_end ();
d5682 3
a5684 2
	  macro_build (&offset_expr, ADDRESS_ADDI_INSN, "t,r,j", tempreg,
		       mips_gp_register, BFD_RELOC_GPREL16);
d5694 2
a5695 1
	    s = (dbl || HAVE_64BIT_ADDRESSES) ? "daddu" : "addu";
d5697 1
a5697 1
	    s = ADDRESS_ADD_INSN;
d5699 2
a5700 1
	  macro_build (NULL, s, "d,v,t", treg, tempreg, breg);
d5713 1
a5713 1
	macro_build (&offset_expr, "j", "a");
d5715 1
a5715 1
	macro_build (&offset_expr, "b", "p");
d5727 2
a5728 1
	macro_build (NULL, "jalr", "d,s", dreg, sreg);
d5734 2
a5735 1
	  macro_build (NULL, "jalr", "d,s", dreg, sreg);
d5755 3
a5757 4
  		  macro_build_ldst_constoffset (&expr1, ADDRESS_LOAD_INSN,
						mips_gp_register,
						mips_frame_reg,
						HAVE_64BIT_ADDRESSES);
d5768 1
a5768 1
	macro_build (&offset_expr, "jal", "a");
d5771 2
d5805 5
a5809 3
		  relax_start (offset_expr.X_add_symbol);
		  macro_build (&offset_expr, ADDRESS_LOAD_INSN, "t,o(b)",
			       PIC_CALL_REG, BFD_RELOC_MIPS_CALL16,
d5811 3
a5813 5
		  relax_switch ();
		  macro_build (&offset_expr, ADDRESS_LOAD_INSN, "t,o(b)",
			       PIC_CALL_REG, BFD_RELOC_MIPS_GOT_DISP,
			       mips_gp_register);
		  relax_end ();
d5817 18
a5834 11
		  relax_start (offset_expr.X_add_symbol);
		  macro_build (&offset_expr, "lui", "t,u", PIC_CALL_REG,
			       BFD_RELOC_MIPS_CALL_HI16);
		  macro_build (NULL, ADDRESS_ADD_INSN, "d,v,t", PIC_CALL_REG,
			       PIC_CALL_REG, mips_gp_register);
		  macro_build (&offset_expr, ADDRESS_LOAD_INSN, "t,o(b)",
			       PIC_CALL_REG, BFD_RELOC_MIPS_CALL_LO16,
			       PIC_CALL_REG);
		  relax_switch ();
		  macro_build (&offset_expr, ADDRESS_LOAD_INSN, "t,o(b)",
			       PIC_CALL_REG, BFD_RELOC_MIPS_GOT_PAGE,
d5836 4
a5839 4
		  macro_build (&offset_expr, ADDRESS_ADDI_INSN, "t,r,j",
			       PIC_CALL_REG, PIC_CALL_REG,
			       BFD_RELOC_MIPS_GOT_OFST);
		  relax_end ();
d5842 1
a5842 1
	      macro_build_jalr (&offset_expr);
d5846 1
a5846 1
	      relax_start (offset_expr.X_add_symbol);
d5849 9
a5857 5
		  macro_build (&offset_expr, ADDRESS_LOAD_INSN, "t,o(b)",
			       PIC_CALL_REG, BFD_RELOC_MIPS_CALL16,
			       mips_gp_register);
		  macro_build (NULL, "nop", "");
		  relax_switch ();
d5861 1
a5861 1
		  int gpdelay;
d5863 39
a5901 21
		  gpdelay = reg_needs_delay (mips_gp_register);
		  macro_build (&offset_expr, "lui", "t,u", PIC_CALL_REG,
			       BFD_RELOC_MIPS_CALL_HI16);
		  macro_build (NULL, ADDRESS_ADD_INSN, "d,v,t", PIC_CALL_REG,
			       PIC_CALL_REG, mips_gp_register);
		  macro_build (&offset_expr, ADDRESS_LOAD_INSN, "t,o(b)",
			       PIC_CALL_REG, BFD_RELOC_MIPS_CALL_LO16,
			       PIC_CALL_REG);
		  macro_build (NULL, "nop", "");
		  relax_switch ();
		  if (gpdelay)
		    macro_build (NULL, "nop", "");
		}
	      macro_build (&offset_expr, ADDRESS_LOAD_INSN, "t,o(b)",
			   PIC_CALL_REG, BFD_RELOC_MIPS_GOT16,
			   mips_gp_register);
	      macro_build (NULL, "nop", "");
	      macro_build (&offset_expr, ADDRESS_ADDI_INSN, "t,r,j",
			   PIC_CALL_REG, PIC_CALL_REG, BFD_RELOC_LO16);
	      relax_end ();
	      macro_build_jalr (&offset_expr);
d5920 2
a5921 1
		    macro_build (NULL, "nop", "");
d5923 3
a5925 4
  		  macro_build_ldst_constoffset (&expr1, ADDRESS_LOAD_INSN,
						mips_gp_register,
						mips_frame_reg,
						HAVE_64BIT_ADDRESSES);
d5931 1
a5931 1
	  macro_build (&offset_expr, "bal", "p");
d5985 1
a5985 1
      if (mips_opts.arch == CPU_R4650)
d6074 1
a6074 1
      if (mips_opts.arch == CPU_R4650)
a6114 16
      /* Sign-extending 32-bit constants makes their handling easier.
         The HAVE_64BIT_GPRS... part is due to the linux kernel hack
         described below.  */
      if ((! HAVE_64BIT_ADDRESSES
	   && (! HAVE_64BIT_GPRS && offset_expr.X_op == O_constant))
          && (offset_expr.X_op == O_constant)
	  && ! ((offset_expr.X_add_number & ~((bfd_vma) 0x7fffffff))
		== ~((bfd_vma) 0x7fffffff)))
	{
	  if (offset_expr.X_add_number & ~((bfd_vma) 0xffffffff))
	    as_bad (_("constant too large"));

	  offset_expr.X_add_number = (((offset_expr.X_add_number & 0xffffffff)
				       ^ 0x80000000) - 0x80000000);
	}

d6141 9
a6149 9
          macro_build (&offset_expr, "lui", "t,u", tempreg,
		       BFD_RELOC_PCREL_HI16_S);
          macro_build (NULL,
		       ((bfd_arch_bits_per_address (stdoutput) == 32
			 || ! ISA_HAS_64BIT_REGS (mips_opts.isa))
			? "addu" : "daddu"),
		       "d,v,t", tempreg, tempreg, breg);
          macro_build (&offset_expr, s, fmt, treg,
		       BFD_RELOC_PCREL_LO16, tempreg);
d6167 2
d6238 1
a6238 1
	     addressable with sign-extended 32-bit addresses, it is
d6247 9
a6255 10
	  if ((HAVE_64BIT_ADDRESSES
	       && ! (offset_expr.X_op == O_constant
		     && IS_SEXT_32BIT_NUM (offset_expr.X_add_number + 0x8000)))
	      || (HAVE_64BIT_GPRS
		  && offset_expr.X_op == O_constant
		  && ! IS_SEXT_32BIT_NUM (offset_expr.X_add_number + 0x8000)))
	    {
	      /* ??? We don't provide a GP-relative alternative for
		 these macros.  It used not to be possible with the
		 original relaxation code, but it could be done now.  */
d6259 6
a6264 6
		  macro_build (&offset_expr, "lui", "t,u", tempreg,
			       BFD_RELOC_MIPS_HIGHEST);
		  macro_build (&offset_expr, "lui", "t,u", AT,
			       BFD_RELOC_HI16_S);
		  macro_build (&offset_expr, "daddiu", "t,r,j", tempreg,
			       tempreg, BFD_RELOC_MIPS_HIGHER);
d6266 8
a6273 5
		    macro_build (NULL, "daddu", "d,v,t", AT, AT, breg);
		  macro_build (NULL, "dsll32", "d,w,<", tempreg, tempreg, 0);
		  macro_build (NULL, "daddu", "d,v,t", tempreg, tempreg, AT);
		  macro_build (&offset_expr, s, fmt, treg, BFD_RELOC_LO16,
			       tempreg);
d6278 10
a6287 8
		  macro_build (&offset_expr, "lui", "t,u", tempreg,
			       BFD_RELOC_MIPS_HIGHEST);
		  macro_build (&offset_expr, "daddiu", "t,r,j", tempreg,
			       tempreg, BFD_RELOC_MIPS_HIGHER);
		  macro_build (NULL, "dsll", "d,w,<", tempreg, tempreg, 16);
		  macro_build (&offset_expr, "daddiu", "t,r,j", tempreg,
			       tempreg, BFD_RELOC_HI16_S);
		  macro_build (NULL, "dsll", "d,w,<", tempreg, tempreg, 16);
d6289 4
a6292 4
		    macro_build (NULL, "daddu", "d,v,t",
				 tempreg, tempreg, breg);
		  macro_build (&offset_expr, s, fmt, treg,
			       BFD_RELOC_LO16, tempreg);
d6297 3
a6299 3

	  if (offset_expr.X_op == O_constant
	      && ! IS_SEXT_32BIT_NUM (offset_expr.X_add_number + 0x8000))
d6304 4
a6307 2
	      if ((valueT) offset_expr.X_add_number <= MAX_GPREL_OFFSET
		  && ! nopic_need_relax (offset_expr.X_add_symbol, 1))
d6309 3
a6311 2
		  relax_start (offset_expr.X_add_symbol);
		  macro_build (&offset_expr, s, fmt, treg, BFD_RELOC_GPREL16,
d6313 6
a6318 1
		  relax_switch ();
d6321 5
a6325 5
	      macro_build_lui (&offset_expr, tempreg);
	      macro_build (&offset_expr, s, fmt, treg,
			   BFD_RELOC_LO16, tempreg);
	      if (mips_relax.sequence)
		relax_end ();
d6329 4
a6332 2
	      if ((valueT) offset_expr.X_add_number <= MAX_GPREL_OFFSET
		  && ! nopic_need_relax (offset_expr.X_add_symbol, 1))
d6334 22
a6355 14
		  relax_start (offset_expr.X_add_symbol);
		  macro_build (NULL, ADDRESS_ADD_INSN, "d,v,t",
			       tempreg, breg, mips_gp_register);
		  macro_build (&offset_expr, s, fmt, treg,
			       BFD_RELOC_GPREL16, tempreg);
		  relax_switch ();
		}
	      macro_build_lui (&offset_expr, tempreg);
	      macro_build (NULL, ADDRESS_ADD_INSN, "d,v,t",
			   tempreg, tempreg, breg);
	      macro_build (&offset_expr, s, fmt, treg,
			   BFD_RELOC_LO16, tempreg);
	      if (mips_relax.sequence)
		relax_end ();
d6360 1
d6386 4
a6389 2
	      macro_build (&offset_expr, ADDRESS_LOAD_INSN, "t,o(b)", tempreg,
			   BFD_RELOC_MIPS_GOT_PAGE, mips_gp_register);
d6391 5
a6395 4
		macro_build (NULL, ADDRESS_ADD_INSN, "d,v,t",
			     tempreg, tempreg, breg);
	      macro_build (&offset_expr, s, fmt, treg,
			   BFD_RELOC_MIPS_GOT_OFST, tempreg);
d6407 11
a6417 8
	  macro_build (&offset_expr, ADDRESS_LOAD_INSN, "t,o(b)", tempreg,
		       lw_reloc_type, mips_gp_register);
	  macro_build (NULL, "nop", "");
	  relax_start (offset_expr.X_add_symbol);
	  relax_switch ();
	  macro_build (&offset_expr, ADDRESS_ADDI_INSN, "t,r,j", tempreg,
		       tempreg, BFD_RELOC_LO16);
	  relax_end ();
d6419 5
a6423 3
	    macro_build (NULL, ADDRESS_ADD_INSN, "d,v,t",
			 tempreg, tempreg, breg);
	  macro_build (&expr1, s, fmt, treg, BFD_RELOC_LO16, tempreg);
d6427 2
a6428 1
	  int gpdelay;
d6452 25
a6476 5
	  gpdelay = reg_needs_delay (mips_gp_register);
	  relax_start (offset_expr.X_add_symbol);
	  macro_build (&offset_expr, "lui", "t,u", tempreg,
		       BFD_RELOC_MIPS_GOT_HI16);
	  macro_build (NULL, ADDRESS_ADD_INSN, "d,v,t", tempreg, tempreg,
d6478 6
a6483 12
	  macro_build (&offset_expr, ADDRESS_LOAD_INSN, "t,o(b)", tempreg,
		       BFD_RELOC_MIPS_GOT_LO16, tempreg);
	  relax_switch ();
	  if (gpdelay)
	    macro_build (NULL, "nop", "");
	  macro_build (&offset_expr, ADDRESS_LOAD_INSN, "t,o(b)", tempreg,
		       BFD_RELOC_MIPS_GOT16, mips_gp_register);
	  macro_build (NULL, "nop", "");
	  macro_build (&offset_expr, ADDRESS_ADDI_INSN, "t,r,j", tempreg,
		       tempreg, BFD_RELOC_LO16);
	  relax_end ();

d6485 5
a6489 3
	    macro_build (NULL, ADDRESS_ADD_INSN, "d,v,t",
			 tempreg, tempreg, breg);
	  macro_build (&expr1, s, fmt, treg, BFD_RELOC_LO16, tempreg);
d6493 3
d6505 2
a6506 1
	  expr1.X_add_number = offset_expr.X_add_number;
d6511 10
a6520 7
	  relax_start (offset_expr.X_add_symbol);
	  macro_build (&offset_expr, "lui", "t,u", tempreg,
		       BFD_RELOC_MIPS_GOT_HI16);
	  macro_build (NULL, ADDRESS_ADD_INSN, "d,v,t", tempreg, tempreg,
		       mips_gp_register);
	  macro_build (&offset_expr, ADDRESS_LOAD_INSN, "t,o(b)", tempreg,
		       BFD_RELOC_MIPS_GOT_LO16, tempreg);
d6522 5
a6526 3
	    macro_build (NULL, ADDRESS_ADD_INSN, "d,v,t",
			 tempreg, tempreg, breg);
	  macro_build (&expr1, s, fmt, treg, BFD_RELOC_LO16, tempreg);
a6527 1
	  relax_switch ();
d6529 9
a6537 2
	  macro_build (&offset_expr, ADDRESS_LOAD_INSN, "t,o(b)", tempreg,
		       BFD_RELOC_MIPS_GOT_PAGE, mips_gp_register);
d6539 5
a6543 5
	    macro_build (NULL, ADDRESS_ADD_INSN, "d,v,t",
			 tempreg, tempreg, breg);
	  macro_build (&offset_expr, s, fmt, treg,
		       BFD_RELOC_MIPS_GOT_OFST, tempreg);
	  relax_end ();
d6556 2
a6557 2
	      macro_build (&offset_expr, s, fmt, treg, BFD_RELOC_GPREL16,
			   mips_gp_register);
d6562 5
a6566 4
	      macro_build (NULL, ADDRESS_ADD_INSN, "d,v,t",
			   tempreg, breg, mips_gp_register);
	      macro_build (&offset_expr, s, fmt, treg,
			   BFD_RELOC_GPREL16, tempreg);
d6579 1
a6579 1
      load_register (treg, &imm_expr, 0);
d6583 1
a6583 1
      load_register (treg, &imm_expr, 1);
d6589 3
a6591 2
	  load_register (AT, &imm_expr, 0);
	  macro_build (NULL, "mtc1", "t,G", AT, treg);
d6601 2
a6602 2
	  macro_build (&offset_expr, "lwc1", "T,o(b)", treg,
		       BFD_RELOC_MIPS_LITERAL, mips_gp_register);
d6614 1
a6614 1
	    load_register (treg, &imm_expr, 1);
d6631 1
a6631 1
		load_register (hreg, &imm_expr, 0);
d6635 1
a6635 1
		    move_register (lreg, 0);
d6639 1
a6639 1
		      load_register (lreg, &offset_expr, 0);
d6650 1
a6650 1
	  macro_build_lui (&offset_expr, AT);
d6654 4
a6657 2
	  macro_build (&offset_expr, ADDRESS_LOAD_INSN, "t,o(b)", AT,
		       BFD_RELOC_MIPS_GOT16, mips_gp_register);
d6663 3
a6665 2
	  macro_build (&offset_expr, ADDRESS_ADDI_INSN, "t,r,j", AT,
		       mips_gp_register, BFD_RELOC_GPREL16);
d6674 2
a6675 1
	macro_build (&offset_expr, "ld", "t,o(b)", treg, BFD_RELOC_LO16, AT);
d6678 2
a6679 1
	  macro_build (&offset_expr, "lw", "t,o(b)", treg, BFD_RELOC_LO16, AT);
d6685 2
a6686 2
	      macro_build (&offset_expr, "lw", "t,o(b)",
			   treg + 1, BFD_RELOC_LO16, AT);
d6689 6
d6705 1
a6705 1
	  load_register (AT, &imm_expr, HAVE_64BIT_FPRS);
d6709 2
a6710 1
	      macro_build (NULL, "dmtc1", "t,S", AT, treg);
d6714 2
a6715 1
	      macro_build (NULL, "mtc1", "t,G", AT, treg + 1);
d6717 2
a6718 1
		macro_build (NULL, "mtc1", "t,G", 0, treg);
d6722 3
a6724 2
		  load_register (AT, &offset_expr, 0);
		  macro_build (NULL, "mtc1", "t,G", AT, treg);
d6737 3
a6739 2
	      macro_build (&offset_expr, "ldc1", "T,o(b)", treg,
			   BFD_RELOC_MIPS_LITERAL, mips_gp_register);
d6750 4
a6753 2
	    macro_build (&offset_expr, ADDRESS_LOAD_INSN, "t,o(b)", AT,
			 BFD_RELOC_MIPS_GOT16, mips_gp_register);
d6757 1
a6757 1
	      macro_build_lui (&offset_expr, AT);
d6762 8
a6769 2
	      macro_build (&offset_expr, "ldc1", "T,o(b)",
			   treg, BFD_RELOC_LO16, AT);
d6778 1
a6778 1
      if (mips_opts.arch == CPU_R4650)
d6788 3
a6790 2
      macro_build (&offset_expr, "lwc1", "T,o(b)",
		   target_big_endian ? treg + 1 : treg, r, breg);
d6794 8
a6801 2
      macro_build (&offset_expr, "lwc1", "T,o(b)",
		   target_big_endian ? treg : treg + 1, r, breg);
d6819 1
a6819 1
      if (mips_opts.arch == CPU_R4650)
d6837 1
a6837 1
      if (mips_opts.arch == CPU_R4650)
d6899 2
d6917 4
a6920 1
	    used_at = 1;
d6923 2
a6924 1
	      relax_start (offset_expr.X_add_symbol);
d6927 1
d6929 1
d6934 5
a6938 2
		  macro_build (NULL, ADDRESS_ADD_INSN, "d,v,t",
			       AT, breg, mips_gp_register);
d6940 1
d6945 3
a6947 2
	      macro_build (&offset_expr, s, fmt, coproc ? treg + 1 : treg,
			   BFD_RELOC_GPREL16, tempreg);
d6955 3
a6957 2
	      macro_build (&offset_expr, s, fmt, coproc ? treg : treg + 1,
			   BFD_RELOC_GPREL16, tempreg);
d6960 4
a6963 1
	      relax_switch ();
d6986 3
a6988 1
	  macro_build_lui (&offset_expr, AT);
d6990 8
a6997 1
	    macro_build (NULL, ADDRESS_ADD_INSN, "d,v,t", AT, breg, AT);
d6999 5
a7003 2
	  macro_build (&offset_expr, s, fmt, coproc ? treg + 1 : treg,
		       BFD_RELOC_LO16, AT);
d7007 3
a7009 4
	  macro_build (&offset_expr, s, fmt, coproc ? treg : treg + 1,
		       BFD_RELOC_LO16, AT);
	  if (mips_relax.sequence)
	    relax_end ();
d7013 2
d7030 1
d7034 9
a7042 2
	  load_got_offset (AT, &offset_expr);
	  macro_build (NULL, "nop", "");
d7044 9
a7052 1
	    macro_build (NULL, ADDRESS_ADD_INSN, "d,v,t", AT, breg, AT);
a7057 1

d7059 4
a7062 13
	  relax_start (offset_expr.X_add_symbol);
	  macro_build (&expr1, s, fmt, coproc ? treg + 1 : treg,
		       BFD_RELOC_LO16, AT);
	  expr1.X_add_number += 4;
	  macro_build (&expr1, s, fmt, coproc ? treg : treg + 1,
		       BFD_RELOC_LO16, AT);
	  relax_switch ();
	  macro_build (&offset_expr, s, fmt, coproc ? treg + 1 : treg,
		       BFD_RELOC_LO16, AT);
	  offset_expr.X_add_number += 4;
	  macro_build (&offset_expr, s, fmt, coproc ? treg : treg + 1,
		       BFD_RELOC_LO16, AT);
	  relax_end ();
d7064 3
a7066 1
	  mips_optimize = hold_mips_optimize;
d7070 2
a7071 1
	  int gpdelay;
d7094 19
a7112 9
	  gpdelay = reg_needs_delay (mips_gp_register);
	  relax_start (offset_expr.X_add_symbol);
	  macro_build (&offset_expr, "lui", "t,u",
		       AT, BFD_RELOC_MIPS_GOT_HI16);
	  macro_build (NULL, ADDRESS_ADD_INSN, "d,v,t",
		       AT, AT, mips_gp_register);
	  macro_build (&offset_expr, ADDRESS_LOAD_INSN, "t,o(b)",
		       AT, BFD_RELOC_MIPS_GOT_LO16, AT);
	  macro_build (NULL, "nop", "");
d7114 4
a7117 1
	    macro_build (NULL, ADDRESS_ADD_INSN, "d,v,t", AT, breg, AT);
d7119 3
a7121 2
	  macro_build (&expr1, s, fmt, coproc ? treg + 1 : treg,
		       BFD_RELOC_LO16, AT);
d7129 3
a7131 2
	  macro_build (&expr1, s, fmt, coproc ? treg : treg + 1,
		       BFD_RELOC_LO16, AT);
d7135 16
a7150 7
	  relax_switch ();
	  offset_expr.X_add_number = expr1.X_add_number;
	  if (gpdelay)
	    macro_build (NULL, "nop", "");
	  macro_build (&offset_expr, ADDRESS_LOAD_INSN, "t,o(b)", AT,
		       BFD_RELOC_MIPS_GOT16, mips_gp_register);
	  macro_build (NULL, "nop", "");
d7152 7
a7158 1
	    macro_build (NULL, ADDRESS_ADD_INSN, "d,v,t", AT, breg, AT);
d7160 5
a7164 3
	  macro_build (&offset_expr, s, fmt, coproc ? treg + 1 : treg,
		       BFD_RELOC_LO16, AT);
	  offset_expr.X_add_number += 4;
d7171 3
a7173 2
	  macro_build (&offset_expr, s, fmt, coproc ? treg : treg + 1,
		       BFD_RELOC_LO16, AT);
a7174 1
	  relax_end ();
d7193 3
a7195 2
	      macro_build (NULL, ADDRESS_ADD_INSN, "d,v,t",
			   AT, breg, mips_gp_register);
d7201 3
a7203 2
	  macro_build (&offset_expr, s, fmt, coproc ? treg + 1 : treg,
		       BFD_RELOC_GPREL16, tempreg);
d7206 3
a7208 2
	  macro_build (&offset_expr, s, fmt, coproc ? treg : treg + 1,
		       BFD_RELOC_GPREL16, tempreg);
d7225 2
a7226 1
      macro_build (&offset_expr, s, "t,o(b)", treg, BFD_RELOC_LO16, breg);
d7228 2
a7229 1
      macro_build (&offset_expr, s, "t,o(b)", treg + 1, BFD_RELOC_LO16, breg);
d7263 2
a7264 1
      macro_build (NULL, s, "C", ip->insn_opcode);
d7268 1
a7268 1
      move_register (dreg, sreg);
d7287 1
a7287 1
	  macro_build (&immed_expr, s, "C");
d7298 2
a7299 1
macro2 (struct mips_cl_insn *ip)
d7304 1
d7318 1
d7337 4
a7340 2
      macro_build (NULL, dbl ? "dmultu" : "multu", "s,t", sreg, treg);
      macro_build (NULL, "mflo", "d", dreg);
d7349 5
a7353 3
      load_register (AT, &imm_expr, dbl);
      macro_build (NULL, dbl ? "dmult" : "mult", "s,t", sreg, AT);
      macro_build (NULL, "mflo", "d", dreg);
d7370 9
a7378 5
	load_register (AT, &imm_expr, dbl);
      macro_build (NULL, dbl ? "dmult" : "mult", "s,t", sreg, imm ? AT : treg);
      macro_build (NULL, "mflo", "d", dreg);
      macro_build (NULL, dbl ? "dsra32" : "sra", "d,w,<", dreg, dreg, RA);
      macro_build (NULL, "mfhi", "d", AT);
d7380 2
a7381 1
	macro_build (NULL, "tne", "s,t,q", dreg, AT, 6);
d7385 6
a7390 3
	  macro_build (&expr1, "beq", "s,t,p", dreg, AT);
	  macro_build (NULL, "nop", "", 0);
	  macro_build (NULL, "break", "c", 6);
d7393 1
a7393 1
      macro_build (NULL, "mflo", "d", dreg);
d7410 8
a7417 5
	load_register (AT, &imm_expr, dbl);
      macro_build (NULL, dbl ? "dmultu" : "multu", "s,t",
		   sreg, imm ? AT : treg);
      macro_build (NULL, "mfhi", "d", AT);
      macro_build (NULL, "mflo", "d", dreg);
d7419 2
a7420 1
	macro_build (NULL, "tne", "s,t,q", AT, 0, 6);
d7424 5
a7428 3
	  macro_build (&expr1, "beq", "s,t,p", AT, 0);
	  macro_build (NULL, "nop", "", 0);
	  macro_build (NULL, "break", "c", 6);
d7434 1
a7434 1
      if (ISA_HAS_DROR (mips_opts.isa) || CPU_HAS_DROR (mips_opts.arch))
d7446 4
a7449 2
	  macro_build (NULL, "dnegu", "d,w", tempreg, treg);
	  macro_build (NULL, "drorv", "d,t,s", dreg, sreg, tempreg);
d7454 8
a7461 4
      macro_build (NULL, "dsubu", "d,v,t", AT, 0, treg);
      macro_build (NULL, "dsrlv", "d,t,s", AT, sreg, AT);
      macro_build (NULL, "dsllv", "d,t,s", dreg, sreg, treg);
      macro_build (NULL, "or", "d,v,t", dreg, dreg, AT);
d7465 1
a7465 1
      if (ISA_HAS_ROR (mips_opts.isa) || CPU_HAS_ROR (mips_opts.arch))
d7477 4
a7480 2
	  macro_build (NULL, "negu", "d,w", tempreg, treg);
	  macro_build (NULL, "rorv", "d,t,s", dreg, sreg, tempreg);
d7485 8
a7492 4
      macro_build (NULL, "subu", "d,v,t", AT, 0, treg);
      macro_build (NULL, "srlv", "d,t,s", AT, sreg, AT);
      macro_build (NULL, "sllv", "d,t,s", dreg, sreg, treg);
      macro_build (NULL, "or", "d,v,t", dreg, dreg, AT);
d7503 1
a7503 1
	if (ISA_HAS_DROR (mips_opts.isa) || CPU_HAS_DROR (mips_opts.arch))
d7507 2
a7508 1
	      macro_build (NULL, "dror32", "d,w,<", dreg, sreg, rot - 32);
d7510 2
a7511 1
	      macro_build (NULL, "dror", "d,w,<", dreg, sreg, rot);
d7516 2
a7517 1
	    macro_build (NULL, "dsrl", "d,w,<", dreg, sreg, 0);
d7523 6
a7528 3
	macro_build (NULL, l, "d,w,<", AT, sreg, rot);
	macro_build (NULL, r, "d,w,<", dreg, sreg, (0x20 - rot) & 0x1f);
	macro_build (NULL, "or", "d,v,t", dreg, dreg, AT);
d7539 1
a7539 1
	if (ISA_HAS_ROR (mips_opts.isa) || CPU_HAS_ROR (mips_opts.arch))
d7541 2
a7542 1
	    macro_build (NULL, "ror", "d,w,<", dreg, sreg, (32 - rot) & 0x1f);
d7547 2
a7548 1
	    macro_build (NULL, "srl", "d,w,<", dreg, sreg, 0);
d7551 6
a7556 3
	macro_build (NULL, "sll", "d,w,<", AT, sreg, rot);
	macro_build (NULL, "srl", "d,w,<", dreg, sreg, (0x20 - rot) & 0x1f);
	macro_build (NULL, "or", "d,v,t", dreg, dreg, AT);
d7561 1
a7561 1
      if (ISA_HAS_DROR (mips_opts.isa) || CPU_HAS_DROR (mips_opts.arch))
d7563 2
a7564 1
	  macro_build (NULL, "drorv", "d,t,s", dreg, sreg, treg);
d7567 8
a7574 4
      macro_build (NULL, "dsubu", "d,v,t", AT, 0, treg);
      macro_build (NULL, "dsllv", "d,t,s", AT, sreg, AT);
      macro_build (NULL, "dsrlv", "d,t,s", dreg, sreg, treg);
      macro_build (NULL, "or", "d,v,t", dreg, dreg, AT);
d7578 1
a7578 1
      if (ISA_HAS_ROR (mips_opts.isa) || CPU_HAS_ROR (mips_opts.arch))
d7580 2
a7581 1
	  macro_build (NULL, "rorv", "d,t,s", dreg, sreg, treg);
d7584 8
a7591 4
      macro_build (NULL, "subu", "d,v,t", AT, 0, treg);
      macro_build (NULL, "sllv", "d,t,s", AT, sreg, AT);
      macro_build (NULL, "srlv", "d,t,s", dreg, sreg, treg);
      macro_build (NULL, "or", "d,v,t", dreg, dreg, AT);
d7602 1
a7602 1
	if (ISA_HAS_DROR (mips_opts.isa) || CPU_HAS_DROR (mips_opts.arch))
d7605 2
a7606 1
	      macro_build (NULL, "dror32", "d,w,<", dreg, sreg, rot - 32);
d7608 2
a7609 1
	      macro_build (NULL, "dror", "d,w,<", dreg, sreg, rot);
d7614 2
a7615 1
	    macro_build (NULL, "dsrl", "d,w,<", dreg, sreg, 0);
d7621 6
a7626 3
	macro_build (NULL, r, "d,w,<", AT, sreg, rot);
	macro_build (NULL, l, "d,w,<", dreg, sreg, (0x20 - rot) & 0x1f);
	macro_build (NULL, "or", "d,v,t", dreg, dreg, AT);
d7637 1
a7637 1
	if (ISA_HAS_ROR (mips_opts.isa) || CPU_HAS_ROR (mips_opts.arch))
d7639 2
a7640 1
	    macro_build (NULL, "ror", "d,w,<", dreg, sreg, rot);
d7645 2
a7646 1
	    macro_build (NULL, "srl", "d,w,<", dreg, sreg, 0);
d7649 6
a7654 3
	macro_build (NULL, "srl", "d,w,<", AT, sreg, rot);
	macro_build (NULL, "sll", "d,w,<", dreg, sreg, (0x20 - rot) & 0x1f);
	macro_build (NULL, "or", "d,v,t", dreg, dreg, AT);
d7659 1
a7659 1
      if (mips_opts.arch == CPU_R4650)
d7667 3
a7669 2
      macro_build (&offset_expr, "swc1", "T,o(b)",
		   target_big_endian ? treg + 1 : treg, BFD_RELOC_LO16, breg);
d7671 3
a7673 2
      macro_build (&offset_expr, "swc1", "T,o(b)",
		   target_big_endian ? treg : treg + 1, BFD_RELOC_LO16, breg);
d7678 2
a7679 1
	macro_build (&expr1, "sltiu", "t,r,j", dreg, treg, BFD_RELOC_LO16);
d7681 2
a7682 1
	macro_build (&expr1, "sltiu", "t,r,j", dreg, sreg, BFD_RELOC_LO16);
d7685 4
a7688 2
	  macro_build (NULL, "xor", "d,v,t", dreg, sreg, treg);
	  macro_build (&expr1, "sltiu", "t,r,j", dreg, dreg, BFD_RELOC_LO16);
d7695 2
a7696 1
	  macro_build (&expr1, "sltiu", "t,r,j", dreg, sreg, BFD_RELOC_LO16);
d7703 1
a7703 1
	  move_register (dreg, 0);
d7710 2
a7711 1
	  macro_build (&imm_expr, "xori", "t,r,i", dreg, sreg, BFD_RELOC_LO16);
d7719 4
a7722 2
	  macro_build (&imm_expr, HAVE_32BIT_GPRS ? "addiu" : "daddiu",
		       "t,r,j", dreg, sreg, BFD_RELOC_LO16);
d7727 3
a7729 2
	  load_register (AT, &imm_expr, HAVE_64BIT_GPRS);
	  macro_build (NULL, "xor", "d,v,t", dreg, sreg, AT);
d7732 2
a7733 1
      macro_build (&expr1, "sltiu", "t,r,j", dreg, dreg, BFD_RELOC_LO16);
d7744 4
a7747 2
      macro_build (NULL, s, "d,v,t", dreg, sreg, treg);
      macro_build (&expr1, "xori", "t,r,i", dreg, dreg, BFD_RELOC_LO16);
d7756 3
a7758 2
	  macro_build (&imm_expr, mask == M_SGE_I ? "slti" : "sltiu", "t,r,j",
		       dreg, sreg, BFD_RELOC_LO16);
d7763 4
a7766 3
	  load_register (AT, &imm_expr, HAVE_64BIT_GPRS);
	  macro_build (NULL, mask == M_SGE_I ? "slt" : "sltu", "d,v,t",
		       dreg, sreg, AT);
d7769 2
a7770 1
      macro_build (&expr1, "xori", "t,r,i", dreg, dreg, BFD_RELOC_LO16);
d7781 2
a7782 1
      macro_build (NULL, s, "d,v,t", dreg, treg, sreg);
d7791 3
a7793 2
      load_register (AT, &imm_expr, HAVE_64BIT_GPRS);
      macro_build (NULL, s, "d,v,t", dreg, AT, sreg);
d7802 4
a7805 2
      macro_build (NULL, s, "d,v,t", dreg, treg, sreg);
      macro_build (&expr1, "xori", "t,r,i", dreg, dreg, BFD_RELOC_LO16);
d7814 5
a7818 3
      load_register (AT, &imm_expr, HAVE_64BIT_GPRS);
      macro_build (NULL, s, "d,v,t", dreg, AT, sreg);
      macro_build (&expr1, "xori", "t,r,i", dreg, dreg, BFD_RELOC_LO16);
d7826 2
a7827 1
	  macro_build (&imm_expr, "slti", "t,r,j", dreg, sreg, BFD_RELOC_LO16);
d7830 3
a7832 2
      load_register (AT, &imm_expr, HAVE_64BIT_GPRS);
      macro_build (NULL, "slt", "d,v,t", dreg, sreg, AT);
d7840 2
a7841 2
	  macro_build (&imm_expr, "sltiu", "t,r,j", dreg, sreg,
		       BFD_RELOC_LO16);
d7844 3
a7846 2
      load_register (AT, &imm_expr, HAVE_64BIT_GPRS);
      macro_build (NULL, "sltu", "d,v,t", dreg, sreg, AT);
d7851 2
a7852 1
	macro_build (NULL, "sltu", "d,v,t", dreg, 0, treg);
d7854 2
a7855 1
	macro_build (NULL, "sltu", "d,v,t", dreg, 0, sreg);
d7858 4
a7861 2
	  macro_build (NULL, "xor", "d,v,t", dreg, sreg, treg);
	  macro_build (NULL, "sltu", "d,v,t", dreg, 0, dreg);
d7868 2
a7869 1
	  macro_build (NULL, "sltu", "d,v,t", dreg, 0, sreg);
d7876 3
a7878 2
	  macro_build (&expr1, HAVE_32BIT_GPRS ? "addiu" : "daddiu", "t,r,j",
		       dreg, 0, BFD_RELOC_LO16);
d7885 2
a7886 1
	  macro_build (&imm_expr, "xori", "t,r,i", dreg, sreg, BFD_RELOC_LO16);
d7894 3
a7896 2
	  macro_build (&imm_expr, HAVE_32BIT_GPRS ? "addiu" : "daddiu",
		       "t,r,j", dreg, sreg, BFD_RELOC_LO16);
d7901 3
a7903 2
	  load_register (AT, &imm_expr, HAVE_64BIT_GPRS);
	  macro_build (NULL, "xor", "d,v,t", dreg, sreg, AT);
d7906 2
a7907 1
      macro_build (NULL, "sltu", "d,v,t", dreg, 0, dreg);
d7920 3
a7922 2
	  macro_build (&imm_expr, dbl ? "daddi" : "addi", "t,r,j",
		       dreg, sreg, BFD_RELOC_LO16);
d7925 3
a7927 2
      load_register (AT, &imm_expr, dbl);
      macro_build (NULL, dbl ? "dsub" : "sub", "d,v,t", dreg, sreg, AT);
d7938 3
a7940 2
	  macro_build (&imm_expr, dbl ? "daddiu" : "addiu", "t,r,j",
		       dreg, sreg, BFD_RELOC_LO16);
d7943 3
a7945 2
      load_register (AT, &imm_expr, dbl);
      macro_build (NULL, dbl ? "dsubu" : "subu", "d,v,t", dreg, sreg, AT);
d7966 3
a7968 2
      load_register (AT, &imm_expr, HAVE_64BIT_GPRS);
      macro_build (NULL, s, "s,t", sreg, AT);
d7984 5
a7988 3
      macro_build (NULL, "cfc1", "t,G", treg, RA);
      macro_build (NULL, "cfc1", "t,G", treg, RA);
      macro_build (NULL, "nop", "");
d7990 2
a7991 1
      macro_build (&expr1, "ori", "t,r,i", AT, treg, BFD_RELOC_LO16);
d7993 10
a8002 7
      macro_build (&expr1, "xori", "t,r,i", AT, AT, BFD_RELOC_LO16);
      macro_build (NULL, "ctc1", "t,G", AT, RA);
      macro_build (NULL, "nop", "");
      macro_build (NULL, mask == M_TRUNCWD ? "cvt.w.d" : "cvt.w.s", "D,S",
		   dreg, sreg);
      macro_build (NULL, "ctc1", "t,G", treg, RA);
      macro_build (NULL, "nop", "");
d8016 2
a8017 1
      macro_build (&offset_expr, s, "t,o(b)", AT, BFD_RELOC_LO16, breg);
d8022 6
a8027 3
      macro_build (&offset_expr, "lbu", "t,o(b)", treg, BFD_RELOC_LO16, breg);
      macro_build (NULL, "sll", "d,w,<", AT, AT, 8);
      macro_build (NULL, "or", "d,v,t", treg, treg, AT);
d8048 2
a8049 1
      macro_build (&offset_expr, s, "t,o(b)", tempreg, BFD_RELOC_LO16, breg);
d8054 2
a8055 1
      macro_build (&offset_expr, s2, "t,o(b)", tempreg, BFD_RELOC_LO16, breg);
d8062 2
a8063 2
	macro_build (NULL, "nop", "");
      move_register (treg, tempreg);
d8077 1
a8077 1
      load_address (AT, &offset_expr, &used_at);
d8079 4
a8082 1
	macro_build (NULL, ADDRESS_ADD_INSN, "d,v,t", AT, AT, breg);
d8087 2
a8088 1
      macro_build (&expr1, s, "t,o(b)", treg, BFD_RELOC_LO16, AT);
d8093 2
a8094 1
      macro_build (&expr1, s2, "t,o(b)", treg, BFD_RELOC_LO16, AT);
d8100 1
a8100 1
      load_address (AT, &offset_expr, &used_at);
d8102 4
a8105 1
	macro_build (NULL, ADDRESS_ADD_INSN, "d,v,t", AT, AT, breg);
d8108 3
a8110 2
      macro_build (&expr1, mask == M_ULH_A ? "lb" : "lbu", "t,o(b)",
		   treg, BFD_RELOC_LO16, AT);
d8115 6
a8120 3
      macro_build (&expr1, "lbu", "t,o(b)", AT, BFD_RELOC_LO16, AT);
      macro_build (NULL, "sll", "d,w,<", treg, treg, 8);
      macro_build (NULL, "or", "d,v,t", treg, treg, AT);
d8128 4
a8131 2
      macro_build (&offset_expr, "sb", "t,o(b)", treg, BFD_RELOC_LO16, breg);
      macro_build (NULL, "srl", "d,w,<", AT, treg, 8);
d8136 2
a8137 1
      macro_build (&offset_expr, "sb", "t,o(b)", AT, BFD_RELOC_LO16, breg);
d8154 2
a8155 1
      macro_build (&offset_expr, s, "t,o(b)", treg, BFD_RELOC_LO16, breg);
d8160 2
a8161 1
      macro_build (&offset_expr, s2, "t,o(b)", treg, BFD_RELOC_LO16, breg);
d8175 1
a8175 1
      load_address (AT, &offset_expr, &used_at);
d8177 4
a8180 1
	macro_build (NULL, ADDRESS_ADD_INSN, "d,v,t", AT, AT, breg);
d8185 2
a8186 1
      macro_build (&expr1, s, "t,o(b)", treg, BFD_RELOC_LO16, AT);
d8191 2
a8192 1
      macro_build (&expr1, s2, "t,o(b)", treg, BFD_RELOC_LO16, AT);
d8197 1
a8197 1
      load_address (AT, &offset_expr, &used_at);
d8199 4
a8202 1
	macro_build (NULL, ADDRESS_ADD_INSN, "d,v,t", AT, AT, breg);
d8205 4
a8208 2
      macro_build (&expr1, "sb", "t,o(b)", treg, BFD_RELOC_LO16, AT);
      macro_build (NULL, "srl", "d,w,<", treg, treg, 8);
d8213 2
a8214 1
      macro_build (&expr1, "sb", "t,o(b)", treg, BFD_RELOC_LO16, AT);
d8219 6
a8224 3
      macro_build (&expr1, "lbu", "t,o(b)", AT, BFD_RELOC_LO16, AT);
      macro_build (NULL, "sll", "d,w,<", treg, treg, 8);
      macro_build (NULL, "or", "d,v,t", treg, treg, AT);
d8240 2
a8241 1
mips16_macro (struct mips_cl_insn *ip)
d8245 1
d8256 2
d8283 3
a8285 1
      macro_build (NULL, dbl ? "ddiv" : "div", "0,x,y", xreg, yreg);
d8287 3
a8289 2
      macro_build (&expr1, "bnez", "x,p", yreg);
      macro_build (NULL, "break", "6", 7);
d8296 1
a8296 1
      macro_build (NULL, s, "x", zreg);
d8318 2
a8319 1
      macro_build (NULL, s, "0,x,y", xreg, yreg);
d8321 3
a8323 2
      macro_build (&expr1, "bnez", "x,p", yreg);
      macro_build (NULL, "break", "6", 7);
d8325 1
a8325 1
      macro_build (NULL, s2, "x", zreg);
d8331 4
a8334 2
      macro_build (NULL, dbl ? "dmultu" : "multu", "x,y", xreg, yreg);
      macro_build (NULL, "mflo", "x", zreg);
d8345 2
a8346 1
      macro_build (&imm_expr, dbl ? "daddiu" : "addiu", "y,x,4", yreg, xreg);
d8353 2
a8354 1
      macro_build (&imm_expr, "addiu", "x,k", xreg);
d8361 2
a8362 1
      macro_build (&imm_expr, "daddiu", "y,j", yreg);
d8411 3
a8413 2
      macro_build (NULL, s, "x,y", xreg, yreg);
      macro_build (&offset_expr, s2, "p");
d8472 2
a8473 2
      macro_build (&imm_expr, s, s3, xreg);
      macro_build (&offset_expr, s2, "p");
d8478 1
a8478 1
      macro_build (&expr1, "slti", "x,8", yreg);
d8480 1
a8480 1
	move_register (xreg, yreg);
d8482 3
a8484 2
      macro_build (&expr1, "bteqz", "p");
      macro_build (NULL, "neg", "x,w", xreg, xreg);
d8492 2
a8493 1
validate_mips_insn (const struct mips_opcode *opc)
a8519 5
	  case 'E': USE_BITS (OP_MASK_SHAMT,	OP_SH_SHAMT);	break;
	  case 'F': USE_BITS (OP_MASK_INSMSB,	OP_SH_INSMSB);	break;
	  case 'G': USE_BITS (OP_MASK_EXTMSBD,	OP_SH_EXTMSBD);	break;
	  case 'H': USE_BITS (OP_MASK_EXTMSBD,	OP_SH_EXTMSBD);	break;
	  case 'I': break;
d8602 3
a8604 1
mips_ip (char *str, struct mips_cl_insn *ip)
d8680 1
a8680 1
			    mips_opts.arch))
d8687 1
a8687 1
	  if (mips_opts.arch == CPU_R4650 && (insn->pinfo & FP_D) != 0)
d8704 9
a8712 4
		  sprintf (buf,
			   _("opcode not supported on this processor: %s (%s)"),
			   mips_cpu_info_from_arch (mips_opts.arch)->name,
			   mips_cpu_info_from_isa (mips_opts.isa)->name);
a8785 6
		  goto do_lsb;
		case 'E':
		  limlo = 32;
		  limhi = 63;
		  goto do_lsb;
do_lsb:
a8804 6
		  goto do_msb;
		case 'F':
		  limlo = 33;
		  limhi = 64;
		  goto do_msb;
do_msb:
a8830 10
		  goto do_msbd;
		case 'G':
		  limlo = 33;
		  limhi = 64;
		  goto do_msbd;
		case 'H':
		  limlo = 33;
		  limhi = 64;
		  goto do_msbd;
do_msbd:
a8857 10
		case 'I':
		  /* "+I" is like "I", except that imm2_expr is used.  */
		  my_getExpression (&imm2_expr, s);
		  if (imm2_expr.X_op != O_big
		      && imm2_expr.X_op != O_constant)
		  insn_error = _("absolute expression required");
		  normalize_constant_expr (&imm2_expr);
		  s = expr_end;
		  continue;

a9342 1
	      normalize_constant_expr (&imm_expr);
d9663 1
a9663 12
		as_bad (_("Invalid condition code register $fcc%d"), regno);
	      if ((strcmp(str + strlen(str) - 3, ".ps") == 0
		   || strcmp(str + strlen(str) - 5, "any2f") == 0
		   || strcmp(str + strlen(str) - 5, "any2t") == 0)
		  && (regno & 1) != 0)
		as_warn(_("Condition code register should be even for %s, was %d"),
			str, regno);
	      if ((strcmp(str + strlen(str) - 5, "any4f") == 0
		   || strcmp(str + strlen(str) - 5, "any4t") == 0)
		  && (regno & 3) != 0)
		as_warn(_("Condition code register should be 0 or 4 for %s, was %d"),
			str, regno);
d9757 3
a9759 1
mips16_ip (char *str, struct mips_cl_insn *ip)
a9826 1
      imm2_expr.X_op = O_absent;
d10365 12
a10376 4
mips16_immed (char *file, unsigned int line, int type, offsetT val,
	      bfd_boolean warn, bfd_boolean small, bfd_boolean ext,
	      unsigned long *insn, bfd_boolean *use_extend,
	      unsigned short *extend)
d10507 3
a10509 1
parse_relocation (char **str, bfd_reloc_code_real_type *reloc)
d10541 4
a10544 2
my_getSmallExpression (expressionS *ep, bfd_reloc_code_real_type *reloc,
		       char *str)
d10599 3
a10601 1
my_getExpression (expressionS *ep, char *str)
d10632 4
a10635 1
md_atof (int type, char *litP, int *sizeP)
d10667 1
a10667 1
	  md_number_to_chars (litP, words[i], 2);
d10675 1
a10675 1
	  md_number_to_chars (litP, words[i], 2);
d10684 4
a10687 1
md_number_to_chars (char *buf, valueT val, int n)
d10718 1
a10718 1
const char *md_shortopts = "O::g::G:";
d10722 1
a10722 7
  /* Options which specify architecture.  */
#define OPTION_ARCH_BASE    (OPTION_MD_BASE)
#define OPTION_MARCH (OPTION_ARCH_BASE + 0)
  {"march", required_argument, NULL, OPTION_MARCH},
#define OPTION_MTUNE (OPTION_ARCH_BASE + 1)
  {"mtune", required_argument, NULL, OPTION_MTUNE},
#define OPTION_MIPS1 (OPTION_ARCH_BASE + 2)
d10725 1
a10725 1
#define OPTION_MIPS2 (OPTION_ARCH_BASE + 3)
d10727 1
a10727 1
#define OPTION_MIPS3 (OPTION_ARCH_BASE + 4)
d10729 1
a10729 1
#define OPTION_MIPS4 (OPTION_ARCH_BASE + 5)
d10731 1
a10731 1
#define OPTION_MIPS5 (OPTION_ARCH_BASE + 6)
d10733 1
a10733 1
#define OPTION_MIPS32 (OPTION_ARCH_BASE + 7)
d10735 1
a10735 1
#define OPTION_MIPS64 (OPTION_ARCH_BASE + 8)
d10737 1
a10737 54
#define OPTION_MIPS32R2 (OPTION_ARCH_BASE + 9)
  {"mips32r2", no_argument, NULL, OPTION_MIPS32R2},
#define OPTION_MIPS64R2 (OPTION_ARCH_BASE + 10)
  {"mips64r2", no_argument, NULL, OPTION_MIPS64R2},

  /* Options which specify Application Specific Extensions (ASEs).  */
#define OPTION_ASE_BASE (OPTION_ARCH_BASE + 11)
#define OPTION_MIPS16 (OPTION_ASE_BASE + 0)
  {"mips16", no_argument, NULL, OPTION_MIPS16},
#define OPTION_NO_MIPS16 (OPTION_ASE_BASE + 1)
  {"no-mips16", no_argument, NULL, OPTION_NO_MIPS16},
#define OPTION_MIPS3D (OPTION_ASE_BASE + 2)
  {"mips3d", no_argument, NULL, OPTION_MIPS3D},
#define OPTION_NO_MIPS3D (OPTION_ASE_BASE + 3)
  {"no-mips3d", no_argument, NULL, OPTION_NO_MIPS3D},
#define OPTION_MDMX (OPTION_ASE_BASE + 4)
  {"mdmx", no_argument, NULL, OPTION_MDMX},
#define OPTION_NO_MDMX (OPTION_ASE_BASE + 5)
  {"no-mdmx", no_argument, NULL, OPTION_NO_MDMX},

  /* Old-style architecture options.  Don't add more of these.  */
#define OPTION_COMPAT_ARCH_BASE (OPTION_ASE_BASE + 6)
#define OPTION_M4650 (OPTION_COMPAT_ARCH_BASE + 0)
  {"m4650", no_argument, NULL, OPTION_M4650},
#define OPTION_NO_M4650 (OPTION_COMPAT_ARCH_BASE + 1)
  {"no-m4650", no_argument, NULL, OPTION_NO_M4650},
#define OPTION_M4010 (OPTION_COMPAT_ARCH_BASE + 2)
  {"m4010", no_argument, NULL, OPTION_M4010},
#define OPTION_NO_M4010 (OPTION_COMPAT_ARCH_BASE + 3)
  {"no-m4010", no_argument, NULL, OPTION_NO_M4010},
#define OPTION_M4100 (OPTION_COMPAT_ARCH_BASE + 4)
  {"m4100", no_argument, NULL, OPTION_M4100},
#define OPTION_NO_M4100 (OPTION_COMPAT_ARCH_BASE + 5)
  {"no-m4100", no_argument, NULL, OPTION_NO_M4100},
#define OPTION_M3900 (OPTION_COMPAT_ARCH_BASE + 6)
  {"m3900", no_argument, NULL, OPTION_M3900},
#define OPTION_NO_M3900 (OPTION_COMPAT_ARCH_BASE + 7)
  {"no-m3900", no_argument, NULL, OPTION_NO_M3900},

  /* Options which enable bug fixes.  */
#define OPTION_FIX_BASE    (OPTION_COMPAT_ARCH_BASE + 8)
#define OPTION_M7000_HILO_FIX (OPTION_FIX_BASE + 0)
  {"mfix7000", no_argument, NULL, OPTION_M7000_HILO_FIX},
#define OPTION_MNO_7000_HILO_FIX (OPTION_FIX_BASE + 1)
  {"no-fix-7000", no_argument, NULL, OPTION_MNO_7000_HILO_FIX},
  {"mno-fix7000", no_argument, NULL, OPTION_MNO_7000_HILO_FIX},
#define OPTION_FIX_VR4120 (OPTION_FIX_BASE + 2)
#define OPTION_NO_FIX_VR4120 (OPTION_FIX_BASE + 3)
  {"mfix-vr4120",    no_argument, NULL, OPTION_FIX_VR4120},
  {"mno-fix-vr4120", no_argument, NULL, OPTION_NO_FIX_VR4120},

  /* Miscellaneous options.  */
#define OPTION_MISC_BASE (OPTION_FIX_BASE + 4)
#define OPTION_MEMBEDDED_PIC (OPTION_MISC_BASE + 0)
d10739 1
a10739 1
#define OPTION_TRAP (OPTION_MISC_BASE + 1)
d10742 1
a10742 1
#define OPTION_BREAK (OPTION_MISC_BASE + 2)
d10745 1
a10745 1
#define OPTION_EB (OPTION_MISC_BASE + 3)
d10747 1
a10747 1
#define OPTION_EL (OPTION_MISC_BASE + 4)
d10749 10
a10758 1
#define OPTION_FP32 (OPTION_MISC_BASE + 5)
d10760 1
a10760 1
#define OPTION_GP32 (OPTION_MISC_BASE + 6)
d10762 1
a10762 1
#define OPTION_CONSTRUCT_FLOATS (OPTION_MISC_BASE + 7)
d10764 1
a10764 1
#define OPTION_NO_CONSTRUCT_FLOATS (OPTION_MISC_BASE + 8)
d10766 5
a10770 1
#define OPTION_FP64 (OPTION_MISC_BASE + 9)
d10772 17
a10788 1
#define OPTION_GP64 (OPTION_MISC_BASE + 10)
d10790 14
a10803 2
#define OPTION_RELAX_BRANCH (OPTION_MISC_BASE + 11)
#define OPTION_NO_RELAX_BRANCH (OPTION_MISC_BASE + 12)
d10806 2
a10807 2

  /* ELF-specific options.  */
d10809 1
a10809 1
#define OPTION_ELF_BASE    (OPTION_MISC_BASE + 13)
a10828 4
#define OPTION_PDR	   (OPTION_ELF_BASE + 9)
  {"mpdr", no_argument, NULL, OPTION_PDR},
#define OPTION_NO_PDR	   (OPTION_ELF_BASE + 10)
  {"mno-pdr", no_argument, NULL, OPTION_NO_PDR},
a10829 1

d10841 2
a10842 1
mips_set_option_string (const char **string_ptr, const char *new_value)
d10853 3
a10855 1
md_parse_option (int c, char *arg)
d10883 4
a10933 4
    case OPTION_MIPS64R2:
      file_mips_isa = ISA_MIPS64R2;
      break;

d11014 2
a11015 2
    case OPTION_FIX_VR4120:
      mips_fix_vr4120 = 1;
d11018 2
a11019 2
    case OPTION_NO_FIX_VR4120:
      mips_fix_vr4120 = 0;
a11040 1
      mips_abicalls = TRUE;
a11055 1
      mips_abicalls = FALSE;
a11176 8

    case OPTION_PDR:
      mips_flag_pdr = TRUE;
      break;

    case OPTION_NO_PDR:
      mips_flag_pdr = FALSE;
      break;
d11190 2
a11191 1
mips_set_architecture (const struct mips_cpu_info *info)
d11195 2
a11196 2
      file_mips_arch = info->cpu;
      mips_opts.arch = info->cpu;
d11205 2
a11206 1
mips_set_tune (const struct mips_cpu_info *info)
d11209 4
a11212 1
    mips_tune = info->cpu;
d11217 1
a11217 1
mips_after_parse_args (void)
a11218 3
  const struct mips_cpu_info *arch_info = 0;
  const struct mips_cpu_info *tune_info = 0;

d11237 4
a11240 1
    arch_info = mips_parse_cpu ("-march", mips_arch_string);
d11245 1
a11245 1
	 ISA level specified by -mipsN, while arch_info->isa contains
d11247 1
a11247 1
      if (arch_info != 0)
d11252 1
a11252 1
	  if (file_mips_isa != arch_info->isa)
d11255 1
a11255 1
		    mips_cpu_info_from_isa (arch_info->isa)->name);
d11258 1
a11258 1
	arch_info = mips_cpu_info_from_isa (file_mips_isa);
d11261 3
a11263 2
  if (arch_info == 0)
    arch_info = mips_parse_cpu ("default CPU", MIPS_CPU_STRING_DEFAULT);
d11265 1
a11265 1
  if (ABI_NEEDS_64BIT_REGS (mips_abi) && !ISA_HAS_64BIT_REGS (arch_info->isa))
d11267 1
a11267 7
	    arch_info->name);

  mips_set_architecture (arch_info);

  /* Optimize for file_mips_arch, unless -mtune selects a different processor.  */
  if (mips_tune_string != 0)
    tune_info = mips_parse_cpu ("-mtune", mips_tune_string);
d11269 3
a11271 4
  if (tune_info == 0)
    mips_set_tune (arch_info);
  else
    mips_set_tune (tune_info);
d11304 4
a11307 5
  /* This flag is set when we have a 64-bit capable CPU but use only
     32-bit wide registers.  Note that EABI does not use it.  */
  if (ISA_HAS_64BIT_REGS (mips_opts.isa)
      && ((mips_abi == NO_ABI && file_mips_gp32 == 1)
	  || mips_abi == O32_ABI))
d11316 1
a11316 1
    mips_opts.mips16 = (CPU_HAS_MIPS16 (file_mips_arch)) ? 1 : 0;
d11318 1
a11318 1
    mips_opts.ase_mips3d = (CPU_HAS_MIPS3D (file_mips_arch)) ? 1 : 0;
d11320 1
a11320 1
    mips_opts.ase_mdmx = (CPU_HAS_MDMX (file_mips_arch)) ? 1 : 0;
d11341 1
a11341 1
mips_init_after_args (void)
d11349 2
a11350 1
md_pcrel_from (fixS *fixP)
d11352 7
a11358 10
  valueT addr = fixP->fx_where + fixP->fx_frag->fr_address;
  switch (fixP->fx_r_type)
    {
    case BFD_RELOC_16_PCREL_S2:
    case BFD_RELOC_MIPS_JMP:
      /* Return the address of the delay slot.  */
      return addr + 4;
    default:
      return addr;
    }
d11369 1
a11369 1
mips_frob_file_before_adjust (void)
d11385 1
a11385 1
mips_frob_file (void)
d11484 2
a11485 1
mips_force_relocation (fixS *fixp)
d11518 3
a11520 1
mips_validate_fix (struct fix *fixP, asection *seg)
d11566 2
a11567 3
	  if (mips_pic == SVR4_PIC)
	    as_warn_where (fixP->fx_file, fixP->fx_line,
			   _("Pretending global symbol used as branch target is local."));
d11583 26
d11612 4
a11615 1
md_apply_fix3 (fixS *fixP, valueT *valP, segT seg ATTRIBUTE_UNUSED)
d11619 1
a11620 1
  reloc_howto_type *howto;
d11622 4
a11625 4
  /* We ignore generic BFD relocations we don't know about.  */
  howto = bfd_reloc_type_lookup (stdoutput, fixP->fx_r_type);
  if (! howto)
    return;
d11629 7
d11639 5
d11645 64
a11708 1
	  || fixP->fx_r_type == BFD_RELOC_VTABLE_ENTRY);
d11710 35
a11744 1
  buf = (bfd_byte *) (fixP->fx_frag->fr_literal + fixP->fx_where);
d11798 1
a11798 1
      *valP = 0;
d11804 3
a11806 1
      if (OUTPUT_FLAVOR == bfd_target_elf_flavour && !fixP->fx_done)
d11814 1
a11814 1
	  *valP += (fixP->fx_next->fx_frag->fr_address
d11817 2
a11818 1
      *valP = ((*valP + 0x8000) >> 16) & 0xffff;
d11821 1
a11821 1
      md_number_to_chars (buf, *valP, 2);
d11827 3
a11829 1
      if (OUTPUT_FLAVOR == bfd_target_elf_flavour && !fixP->fx_done)
d11833 2
a11834 1
	*valP += fixP->fx_frag->fr_address + fixP->fx_where;
d11837 1
a11837 1
      md_number_to_chars (buf, *valP, 2);
d11847 2
a11848 1
	    md_number_to_chars (buf, *valP, 8);
d11851 2
a11852 1
	      valueT hiv;
d11854 7
a11860 1
	      if ((*valP & 0x80000000) != 0)
d11864 1
a11864 4
	      md_number_to_chars ((char *)(buf + target_big_endian ? 4 : 0),
				  *valP, 4);
	      md_number_to_chars ((char *)(buf + target_big_endian ? 0 : 4),
				  hiv, 4);
d11878 2
a11879 1
	md_number_to_chars (buf, *valP, 4);
d11887 2
a11888 1
	md_number_to_chars (buf, *valP, 2);
d11896 1
a11896 1
	  if (*valP + 0x8000 > 0xffff)
d11899 1
d11902 1
a11902 1
	  md_number_to_chars (buf, *valP, 2);
d11907 1
a11907 1
      if ((*valP & 0x3) != 0)
d11909 1
a11909 1
		      _("Branch to odd address (%lx)"), (long) *valP);
d11916 1
a11916 1
      if (! fixP->fx_done)
d11918 10
d11930 1
d11936 3
a11938 13
      if (*valP + 0x20000 <= 0x3ffff)
	{
	  insn |= (*valP >> 2) & 0xffff;
	  md_number_to_chars (buf, insn, 4);
	}
      else if (mips_pic == NO_PIC
	       && fixP->fx_done
	       && fixP->fx_frag->fr_address >= text_section->vma
	       && (fixP->fx_frag->fr_address
		   < text_section->vma + text_section->_raw_size)
	       && ((insn & 0xffff0000) == 0x10000000	 /* beq $0,$0 */
		   || (insn & 0xffff0000) == 0x04010000	 /* bgez $0 */
		   || (insn & 0xffff0000) == 0x04110000)) /* bgezal $0 */
d11943 18
a11960 2
	  if ((insn & 0xffff0000) == 0x04110000)	 /* bgezal $0 */
	    insn = 0x0c000000;	/* jal */
d11962 7
a11968 14
	    insn = 0x08000000;	/* j */
	  fixP->fx_r_type = BFD_RELOC_MIPS_JMP;
	  fixP->fx_done = 0;
	  fixP->fx_addsy = section_symbol (text_section);
	  *valP += md_pcrel_from (fixP);
	  md_number_to_chars (buf, insn, 4);
	}
      else
	{
	  /* If we got here, we have branch-relaxation disabled,
	     and there's nothing we can do to fix this instruction
	     without turning it into a longer sequence.  */
	  as_bad_where (fixP->fx_file, fixP->fx_line,
			_("Branch out of range"));
d11970 2
a11988 3

  /* Remember value for tc_gen_reloc.  */
  fixP->fx_addnumber = *valP;
d11993 2
a11994 1
printInsn (unsigned long oc)
d12080 1
a12080 1
get_symbol (void)
d12097 4
a12100 1
mips_align (int to, int fill, symbolS *label)
d12117 2
a12118 1
s_align (int x ATTRIBUTE_UNUSED)
d12126 1
a12126 1
    o  Note that the assembler pulls down any immediately preceding label
d12166 1
a12166 1
mips_flush_pending_output (void)
d12173 2
a12174 1
s_change_sec (int sec)
d12262 2
a12263 1
s_change_section (int ignore ATTRIBUTE_UNUSED)
a12312 16
  /* When using the generic form of .section (as implemented by obj-elf.c),
     there's no way to set the section type to SHT_MIPS_DWARF.  Users have
     traditionally had to fall back on the more common @@progbits instead.

     There's nothing really harmful in this, since bfd will correct
     SHT_PROGBITS to SHT_MIPS_DWARF before writing out the file.  But it
     means that, for backwards compatibiltiy, the special_section entries
     for dwarf sections must use SHT_PROGBITS rather than SHT_MIPS_DWARF.

     Even so, we shouldn't force users of the MIPS .section syntax to
     incorrectly label the sections as SHT_PROGBITS.  The best compromise
     seems to be to map SHT_MIPS_DWARF to SHT_PROGBITS before calling the
     generic type-checking code.  */
  if (section_type == SHT_MIPS_DWARF)
    section_type = SHT_PROGBITS;

d12322 1
a12322 1
mips_enable_auto_align (void)
d12328 2
a12329 1
s_cons (int log_size)
d12342 2
a12343 1
s_float_cons (int type)
d12371 2
a12372 1
s_mips_globl (int x ATTRIBUTE_UNUSED)
d12412 2
a12413 1
s_option (int x ATTRIBUTE_UNUSED)
a12432 1
	{
a12433 2
	  mips_abicalls = TRUE;
	}
d12465 2
a12466 1
s_mipsset (int x ATTRIBUTE_UNUSED)
d12542 1
a12542 1
  else if (strncmp (name, "mips", 4) == 0 || strncmp (name, "arch=", 5) == 0)
d12546 2
a12547 2
      /* Permit the user to change the ISA and architecture on the fly.
	 Needless to say, misuse can cause serious problems.  */
a12568 21
      else if (strcmp (name, "mips64r2") == 0)
	mips_opts.isa = ISA_MIPS64R2;
      else if (strcmp (name, "arch=default") == 0)
	{
	  reset = 1;
	  mips_opts.arch = file_mips_arch;
	  mips_opts.isa = file_mips_isa;
	}
      else if (strncmp (name, "arch=", 5) == 0)
	{
	  const struct mips_cpu_info *p;

	  p = mips_parse_cpu("internal use", name + 5);
	  if (!p)
	    as_bad (_("unknown architecture %s"), name + 5);
	  else
	    {
	      mips_opts.arch = p->cpu;
	      mips_opts.isa = p->isa;
	    }
	}
a12586 1
	case ISA_MIPS64R2:
d12653 2
a12654 1
s_abicalls (int ignore ATTRIBUTE_UNUSED)
a12656 1
  mips_abicalls = TRUE;
d12678 2
a12679 1
s_cpload (int ignore ATTRIBUTE_UNUSED)
d12682 1
d12704 6
a12709 7
  macro_start ();
  macro_build_lui (&ex, mips_gp_register);
  macro_build (&ex, "addiu", "t,r,j", mips_gp_register,
	       mips_gp_register, BFD_RELOC_LO16);
  macro_build (NULL, "addu", "d,v,t", mips_gp_register,
	       mips_gp_register, tc_get_register (0));
  macro_end ();
d12730 2
a12731 1
s_cpsetup (int ignore ATTRIBUTE_UNUSED)
d12736 1
a12777 1
  macro_start ();
d12785 2
a12786 2
      macro_build (&ex_off, "sd", "t,o(b)", mips_gp_register,
		   BFD_RELOC_LO16, SP);
d12789 2
a12790 2
    macro_build (NULL, "daddu", "d,v,t", mips_cpreturn_register,
		 mips_gp_register, 0);
d12796 2
a12797 1
  macro_build (&ex_sym, "lui", "t,u", mips_gp_register, BFD_RELOC_GPREL16);
d12799 1
a12799 1
	   8, NULL, 0, 0, BFD_RELOC_MIPS_SUB);
d12801 1
a12801 1
	   4, NULL, 0, 0, BFD_RELOC_HI16_S);
d12804 2
a12805 2
  macro_build (&ex_sym, "addiu", "t,r,j", mips_gp_register,
	       mips_gp_register, BFD_RELOC_GPREL16);
d12807 1
a12807 1
	   8, NULL, 0, 0, BFD_RELOC_MIPS_SUB);
d12809 1
a12809 1
	   4, NULL, 0, 0, BFD_RELOC_LO16);
d12811 3
a12813 3
  macro_build (NULL, ADDRESS_ADD_INSN, "d,v,t", mips_gp_register,
	       mips_gp_register, reg1);
  macro_end ();
d12819 2
a12820 1
s_cplocal (int ignore ATTRIBUTE_UNUSED)
d12839 2
a12840 1
s_cprestore (int ignore ATTRIBUTE_UNUSED)
d12843 1
d12861 3
a12863 4
  macro_start ();
  macro_build_ldst_constoffset (&ex, ADDRESS_STORE_INSN, mips_gp_register,
				SP, HAVE_64BIT_ADDRESSES);
  macro_end ();
d12869 1
a12869 1
   was given in the preceding .cpsetup, it results in:
d12873 1
a12873 1
     daddu	$gp, $reg2, $0
d12876 2
a12877 1
s_cpreturn (int ignore ATTRIBUTE_UNUSED)
d12880 1
a12889 1
  macro_start ();
d12897 2
a12898 1
      macro_build (&ex, "ld", "t,o(b)", mips_gp_register, BFD_RELOC_LO16, SP);
d12901 2
a12902 3
    macro_build (NULL, "daddu", "d,v,t", mips_gp_register,
		 mips_cpreturn_register, 0);
  macro_end ();
d12911 2
a12912 1
s_gpvalue (int ignore ATTRIBUTE_UNUSED)
d12931 2
a12932 1
s_gpword (int ignore ATTRIBUTE_UNUSED)
d12960 1
a12960 1
  md_number_to_chars (p, 0, 4);
d12968 2
a12969 1
s_gpdword (int ignore ATTRIBUTE_UNUSED)
d12997 2
a12998 2
  md_number_to_chars (p, 0, 8);
  fix_new_exp (frag_now, p - frag_now->fr_literal, 4, &ex, FALSE,
d13015 2
a13016 1
s_cpadd (int ignore ATTRIBUTE_UNUSED)
d13018 1
a13028 1
  macro_start ();
d13030 3
a13032 2
  macro_build (NULL, ADDRESS_ADD_INSN, "d,v,t", reg, reg, mips_gp_register);
  macro_end ();
d13047 2
a13048 1
s_insn (int ignore ATTRIBUTE_UNUSED)
d13062 2
a13063 1
s_mips_stab (int type)
d13075 2
a13076 1
s_mips_weakext (int ignore ATTRIBUTE_UNUSED)
d13125 2
a13126 1
tc_get_register (int frame)
d13205 3
a13207 1
md_section_align (asection *seg, valueT addr)
d13231 3
a13233 1
nopic_need_relax (symbolS *sym, int before_relaxing)
d13301 3
a13303 1
pic_need_relax (symbolS *sym, asection *segtype)
d13359 4
a13362 1
mips16_extended_frag (fragS *fragp, asection *sec, long stretch)
d13562 4
a13565 1
relaxed_branch_length (fragS *fragp, asection *sec, int update)
d13629 3
a13631 1
md_estimate_size_before_relax (fragS *fragp, asection *segtype)
d13657 13
a13669 2
      fragp->fr_subtype |= RELAX_USE_SECOND;
      return -RELAX_FIRST (fragp->fr_subtype);
d13671 2
a13672 2
  else
    return -RELAX_SECOND (fragp->fr_subtype);
d13683 2
a13684 1
mips_fix_adjustable (fixS *fixp)
d13710 3
a13712 1
tc_gen_reloc (asection *section ATTRIBUTE_UNUSED, fixS *fixp)
d13718 3
a13720 2
  memset (retval, 0, sizeof(retval));
  reloc = retval[0] = (arelent *) xcalloc (1, sizeof (arelent));
d13736 1
a13736 1
  else if (fixp->fx_pcrel)
d13738 3
a13740 5
      bfd_vma pcrel_address;

      /* Set PCREL_ADDRESS to this relocation's "PC".  The PC for high
	 high-part relocs is the address of the low-part reloc.  */
      if (fixp->fx_r_type == BFD_RELOC_PCREL_HI16_S)
d13742 5
a13746 4
	  assert (fixp->fx_next != NULL
		  && fixp->fx_next->fx_r_type == BFD_RELOC_PCREL_LO16);
	  pcrel_address = (fixp->fx_next->fx_where
			   + fixp->fx_next->fx_frag->fr_address);
d13748 5
a13752 2
      else
	pcrel_address = reloc->address;
d13754 2
d13757 2
d13760 84
a13843 3
	  /* At this point, fx_addnumber is "symbol offset - pcrel_address".
	     Relocations want only the symbol offset.  */
	  reloc->addend = fixp->fx_addnumber + pcrel_address;
d13845 2
a13846 2
      else if (fixp->fx_r_type == BFD_RELOC_PCREL_LO16
	       || fixp->fx_r_type == BFD_RELOC_PCREL_HI16_S)
d13848 2
a13849 5
	  /* We use a special addend for an internal RELLO or RELHI reloc.  */
	  if (symbol_section_p (fixp->fx_addsy))
	    reloc->addend = pcrel_address - S_GET_VALUE (fixp->fx_subsy);
	  else
	    reloc->addend = fixp->fx_addnumber + pcrel_address;
d13851 1
a13851 1
      else
d13853 34
a13886 6
	  if (OUTPUT_FLAVOR != bfd_target_aout_flavour)
	    /* A gruesome hack which is a result of the gruesome gas reloc
	       handling.  */
	    reloc->addend = pcrel_address;
	  else
	    reloc->addend = -pcrel_address;
d13888 2
a13890 2
  else
    reloc->addend = fixp->fx_addnumber;
d13936 13
d13975 4
a13978 1
mips_relax_frag (asection *sec, fragS *fragp, long stretch)
d14013 4
a14016 1
md_convert_frag (bfd *abfd ATTRIBUTE_UNUSED, segT asec, fragS *fragp)
d14018 3
d14050 1
a14050 1
	  md_number_to_chars (buf, insn, 4);
d14122 1
a14122 1
	  md_number_to_chars (buf, insn, 4);
d14126 1
a14126 1
	  md_number_to_chars (buf, 0, 4);
d14145 1
a14145 1
	      md_number_to_chars (buf, insn, 4);
d14148 1
a14148 1
	      md_number_to_chars (buf, 0, 4);
d14167 1
a14167 1
	      md_number_to_chars (buf, insn, 4);
d14189 1
a14189 1
	      md_number_to_chars (buf, insn, 4);
d14195 1
a14195 1
		  md_number_to_chars (buf, 0, 4);
d14207 1
a14207 1
	      md_number_to_chars (buf, insn, 4);
d14216 1
a14216 1
	      md_number_to_chars (buf, insn, 4);
d14309 1
a14309 1
	  md_number_to_chars (buf, 0xf000 | extend, 2);
d14314 1
a14314 1
      md_number_to_chars (buf, insn, 2);
d14320 2
a14321 6
      int first, second;
      fixS *fixp;

      first = RELAX_FIRST (fragp->fr_subtype);
      second = RELAX_SECOND (fragp->fr_subtype);
      fixp = (fixS *) fragp->fr_opcode;
d14323 3
a14325 32
      /* Possibly emit a warning if we've chosen the longer option.  */
      if (((fragp->fr_subtype & RELAX_USE_SECOND) != 0)
	  == ((fragp->fr_subtype & RELAX_SECOND_LONGER) != 0))
	{
	  const char *msg = macro_warning (fragp->fr_subtype);
	  if (msg != 0)
	    as_warn_where (fragp->fr_file, fragp->fr_line, msg);
	}

      /* Go through all the fixups for the first sequence.  Disable them
	 (by marking them as done) if we're going to use the second
	 sequence instead.  */
      while (fixp
	     && fixp->fx_frag == fragp
	     && fixp->fx_where < fragp->fr_fix - second)
	{
	  if (fragp->fr_subtype & RELAX_USE_SECOND)
	    fixp->fx_done = 1;
	  fixp = fixp->fx_next;
	}

      /* Go through the fixups for the second sequence.  Disable them if
	 we're going to use the first sequence, otherwise adjust their
	 addresses to account for the relaxation.  */
      while (fixp && fixp->fx_frag == fragp)
	{
	  if (fragp->fr_subtype & RELAX_USE_SECOND)
	    fixp->fx_where -= first;
	  else
	    fixp->fx_done = 1;
	  fixp = fixp->fx_next;
	}
d14327 2
a14328 4
      /* Now modify the frag contents.  */
      if (fragp->fr_subtype & RELAX_USE_SECOND)
	{
	  char *start;
d14330 1
a14330 6
	  start = fragp->fr_literal + fragp->fr_fix - first - second;
	  memmove (start, start + first, second);
	  fragp->fr_fix -= first;
	}
      else
	fragp->fr_fix -= second;
d14341 1
a14341 1
mips_frob_file_after_relocs (void)
d14372 2
a14373 1
mips_define_label (symbolS *sym)
d14395 1
a14395 1
mips_elf_final_processing (void)
a14434 1
    {
a14435 4
      elf_elfheader (stdoutput)->e_flags |= EF_MIPS_CPIC;
    }
  if (mips_abicalls)
    elf_elfheader (stdoutput)->e_flags |= EF_MIPS_CPIC;
d14488 2
a14489 1
mips_handle_align (fragS *fragp)
d14519 1
a14519 1
md_obj_begin (void)
d14524 1
a14524 1
md_obj_end (void)
d14532 1
a14532 1
get_number (void)
d14587 2
a14588 1
s_mips_file (int x ATTRIBUTE_UNUSED)
d14619 2
a14620 1
s_mips_loc (int x ATTRIBUTE_UNUSED)
d14629 2
a14630 1
s_mips_end (int x ATTRIBUTE_UNUSED)
d14671 1
a14671 2
  if (OUTPUT_FLAVOR == bfd_target_elf_flavour && ! ECOFF_DEBUGGING
      && mips_flag_pdr)
d14696 7
a14702 7
      md_number_to_chars (fragp, cur_proc_ptr->reg_mask, 4);
      md_number_to_chars (fragp + 4, cur_proc_ptr->reg_offset, 4);
      md_number_to_chars (fragp + 8, cur_proc_ptr->fpreg_mask, 4);
      md_number_to_chars (fragp + 12, cur_proc_ptr->fpreg_offset, 4);
      md_number_to_chars (fragp + 16, cur_proc_ptr->frame_offset, 4);
      md_number_to_chars (fragp + 20, cur_proc_ptr->frame_reg, 4);
      md_number_to_chars (fragp + 24, cur_proc_ptr->pc_reg, 4);
d14714 2
a14715 1
s_mips_ent (int aent)
d14763 2
a14764 1
s_mips_frame (int ignore ATTRIBUTE_UNUSED)
d14807 2
a14808 1
s_mips_mask (int reg_type)
d14854 2
a14855 1
s_loc (int x)
a14889 1
  { "mips64r2",       1,      ISA_MIPS64R2,   CPU_MIPS64R2 },
d14925 1
a14925 2
  { "rm7000",         0,      ISA_MIPS4,      CPU_RM7000 },
  { "rm9000",         0,      ISA_MIPS4,      CPU_RM7000 },
d14928 1
a14928 1
  { "4kc",            0,      ISA_MIPS32,     CPU_MIPS32 },
d14950 2
a14951 1
mips_strict_matching_cpu_name_p (const char *canonical, const char *given)
d14967 2
a14968 1
mips_matching_cpu_name_p (const char *canonical, const char *given)
d15003 2
a15004 1
mips_parse_cpu (const char *option, const char *cpu_string)
d15050 2
a15051 1
mips_cpu_info_from_isa (int isa)
a15061 12

static const struct mips_cpu_info *
mips_cpu_info_from_arch (int arch)
{
  int i;

  for (i = 0; mips_cpu_info_table[i].name != NULL; i++)
    if (arch == mips_cpu_info_table[i].cpu)
      return (&mips_cpu_info_table[i]);

  return NULL;
}
d15064 5
a15068 1
show (FILE *stream, const char *string, int *col_p, int *first_p)
d15094 2
a15095 1
md_show_usage (FILE *stream)
a15116 1
-mips64r2               generate MIPS64 release 2 ISA instructions\n\
a15142 1
-mfix-vr4120		work around certain VR4120 errata\n\
d15147 1
a15155 1
-mpdr, -mno-pdr		enable/disable creation of .pdr sections\n\
d15176 1
a15176 1
mips_dwarf2_format (void)
a15187 9
}

int
mips_dwarf2_addr_size (void)
{
  if (mips_abi == N64_ABI)
    return 8;
  else
    return 4;
@


