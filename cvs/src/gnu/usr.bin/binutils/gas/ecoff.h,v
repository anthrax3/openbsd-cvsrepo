head	1.6;
access;
symbols
	OPENBSD_6_2:1.6.0.50
	OPENBSD_6_2_BASE:1.6
	OPENBSD_6_1:1.6.0.52
	OPENBSD_6_1_BASE:1.6
	OPENBSD_6_0:1.6.0.48
	OPENBSD_6_0_BASE:1.6
	OPENBSD_5_9:1.6.0.44
	OPENBSD_5_9_BASE:1.6
	OPENBSD_5_8:1.6.0.46
	OPENBSD_5_8_BASE:1.6
	OPENBSD_5_7:1.6.0.38
	OPENBSD_5_7_BASE:1.6
	OPENBSD_5_6:1.6.0.42
	OPENBSD_5_6_BASE:1.6
	OPENBSD_5_5:1.6.0.40
	OPENBSD_5_5_BASE:1.6
	OPENBSD_5_4:1.6.0.36
	OPENBSD_5_4_BASE:1.6
	OPENBSD_5_3:1.6.0.34
	OPENBSD_5_3_BASE:1.6
	OPENBSD_5_2:1.6.0.32
	OPENBSD_5_2_BASE:1.6
	OPENBSD_5_1_BASE:1.6
	OPENBSD_5_1:1.6.0.30
	OPENBSD_5_0:1.6.0.28
	OPENBSD_5_0_BASE:1.6
	OPENBSD_4_9:1.6.0.26
	OPENBSD_4_9_BASE:1.6
	OPENBSD_4_8:1.6.0.24
	OPENBSD_4_8_BASE:1.6
	OPENBSD_4_7:1.6.0.20
	OPENBSD_4_7_BASE:1.6
	OPENBSD_4_6:1.6.0.22
	OPENBSD_4_6_BASE:1.6
	OPENBSD_4_5:1.6.0.18
	OPENBSD_4_5_BASE:1.6
	OPENBSD_4_4:1.6.0.16
	OPENBSD_4_4_BASE:1.6
	OPENBSD_4_3:1.6.0.14
	OPENBSD_4_3_BASE:1.6
	OPENBSD_4_2:1.6.0.12
	OPENBSD_4_2_BASE:1.6
	OPENBSD_4_1:1.6.0.10
	OPENBSD_4_1_BASE:1.6
	OPENBSD_4_0:1.6.0.8
	OPENBSD_4_0_BASE:1.6
	OPENBSD_3_9:1.6.0.6
	OPENBSD_3_9_BASE:1.6
	OPENBSD_3_8:1.6.0.4
	OPENBSD_3_8_BASE:1.6
	OPENBSD_3_7:1.6.0.2
	OPENBSD_3_7_BASE:1.6
	BINUTILS_2_15:1.1.1.6
	OPENBSD_3_6:1.5.0.10
	OPENBSD_3_6_BASE:1.5
	BINUTILS-2_14:1.1.1.5
	OPENBSD_3_5:1.5.0.8
	OPENBSD_3_5_BASE:1.5
	OPENBSD_3_4:1.5.0.6
	OPENBSD_3_4_BASE:1.5
	OPENBSD_3_3:1.5.0.4
	OPENBSD_3_3_BASE:1.5
	OPENBSD_3_2:1.5.0.2
	OPENBSD_3_2_BASE:1.5
	binutils-2_11_2:1.1.1.5
	OPENBSD_3_1:1.4.0.8
	OPENBSD_3_1_BASE:1.4
	OPENBSD_3_0:1.4.0.6
	OPENBSD_3_0_BASE:1.4
	BINUTILS-2_10_1:1.1.1.4
	OPENBSD_2_9:1.4.0.4
	OPENBSD_2_9_BASE:1.4
	OPENBSD_2_8:1.4.0.2
	OPENBSD_2_8_BASE:1.4
	BINUTILS-2_10:1.1.1.4
	OPENBSD_2_7:1.3.0.16
	OPENBSD_2_7_BASE:1.3
	new-binutils:1.3.0.14
	OPENBSD_2_6:1.3.0.12
	OPENBSD_2_6_BASE:1.3
	OPENBSD_2_5:1.3.0.10
	OPENBSD_2_5_BASE:1.3
	OPENBSD_2_4:1.3.0.8
	OPENBSD_2_4_BASE:1.3
	OPENBSD_2_3:1.3.0.6
	OPENBSD_2_3_BASE:1.3
	OPENBSD_2_2:1.3.0.4
	OPENBSD_2_2_BASE:1.3
	BINUTILS-2_8_1:1.1.1.3
	OPENBSD_2_1:1.3.0.2
	OPENBSD_2_1_BASE:1.3
	CYGNUS-961112:1.1.1.3
	OPENBSD_2_0:1.2.0.2
	OPENBSD_2_0_BASE:1.2
	CYGNUS-960904:1.1.1.2
	CYGNUS-960609:1.1.1.1
	CYGNUS:1.1.1
	FSF_2_6:1.1.1.1
	FSF:1.1.1;
locks; strict;
comment	@ * @;


1.6
date	2004.11.02.20.45.24;	author miod;	state Exp;
branches;
next	1.5;

1.5
date	2002.05.13.17.07.34;	author fgsch;	state Exp;
branches;
next	1.4;

1.4
date	2000.09.12.19.11.41;	author espie;	state Exp;
branches;
next	1.3;

1.3
date	96.11.23.03.34.19;	author niklas;	state Exp;
branches;
next	1.2;

1.2
date	96.09.04.19.04.30;	author niklas;	state Exp;
branches;
next	1.1;

1.1
date	96.01.08.11.05.34;	author niklas;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	96.01.08.11.05.34;	author niklas;	state Exp;
branches;
next	1.1.1.2;

1.1.1.2
date	96.09.04.17.43.25;	author niklas;	state Exp;
branches;
next	1.1.1.3;

1.1.1.3
date	96.11.19.14.14.00;	author niklas;	state Exp;
branches;
next	1.1.1.4;

1.1.1.4
date	2000.09.12.14.46.09;	author espie;	state Exp;
branches;
next	1.1.1.5;

1.1.1.5
date	2002.05.13.13.31.40;	author fgsch;	state Exp;
branches;
next	1.1.1.6;

1.1.1.6
date	2004.11.02.20.22.43;	author miod;	state Exp;
branches;
next	;


desc
@@


1.6
log
@Merge conflicts, bringing our changes back in:
- extra $(SHELL) and sugar for make (so that files not mode +x still work)
- safer temp file handling
- our W^X binary layout changes in ld
- OpenBSD policy for library file selection in ld
- arm and m88k changes which were not merged in time for official 2.15
- bfd core file handling
- a couple typos

New for 2.15:
- ld(1) and as(1) manpages now generated at build time
- binutils/stabs.c reverted to use our in-tree libiberty for now
- we still use our VIA C3 crypto code over stock binutils, as it recognizes
  more instructions
- new emulations for OpenBSD on mips64 machines, to help OpenBSD/sgi
- relaxed %f# handling in gas on OpenBSD/sparc64 (same as was in 2.14)

Tested on all platforms by various people; special thanks to sturm@@ and
otto@@.
@
text
@/* ecoff.h -- header file for ECOFF debugging support
   Copyright 1993, 1994, 1995, 1996, 1997, 1998
   Free Software Foundation, Inc.
   Contributed by Cygnus Support.
   Put together by Ian Lance Taylor <ian@@cygnus.com>.

   This file is part of GAS, the GNU Assembler.

   GAS is free software; you can redistribute it and/or modify
   it under the terms of the GNU General Public License as published by
   the Free Software Foundation; either version 2, or (at your option)
   any later version.

   GAS is distributed in the hope that it will be useful,
   but WITHOUT ANY WARRANTY; without even the implied warranty of
   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
   GNU General Public License for more details.

   You should have received a copy of the GNU General Public License
   along with GAS; see the file COPYING.  If not, write to the Free
   Software Foundation, 59 Temple Place - Suite 330, Boston, MA
   02111-1307, USA.  */

#ifndef GAS_ECOFF_H
#define GAS_ECOFF_H

#ifdef ECOFF_DEBUGGING

#include "coff/sym.h"
#include "coff/ecoff.h"

/* Whether we have seen any ECOFF debugging information.  */
extern int ecoff_debugging_seen;

/* This function should be called at the start of assembly, by
   obj_read_begin_hook.  */
extern void ecoff_read_begin_hook (void);

/* This function should be called when the assembler switches to a new
   file.  */
extern void ecoff_new_file (const char *);

/* This function should be called when a new symbol is created, by
   obj_symbol_new_hook.  */
extern void ecoff_symbol_new_hook (symbolS *);

/* This function should be called by the obj_frob_symbol hook.  */
extern void ecoff_frob_symbol (symbolS *);

/* Build the ECOFF debugging information.  This should be called by
   obj_frob_file.  This fills in the counts in *HDR; the offsets are
   filled in relative to the start of the *BUFP.  It sets *BUFP to a
   block of memory holding the debugging information.  It returns the
   length of *BUFP.  */
extern unsigned long ecoff_build_debug
  (HDRR *hdr, char **bufp, const struct ecoff_debug_swap *);

/* Functions to handle the ECOFF debugging directives.  */
extern void ecoff_directive_begin (int);
extern void ecoff_directive_bend (int);
extern void ecoff_directive_end (int);
extern void ecoff_directive_ent (int);
extern void ecoff_directive_fmask (int);
extern void ecoff_directive_frame (int);
extern void ecoff_directive_loc (int);
extern void ecoff_directive_mask (int);

/* Other ECOFF directives.  */
extern void ecoff_directive_extern (int);
extern void ecoff_directive_weakext (int);

/* Functions to handle the COFF debugging directives.  */
extern void ecoff_directive_def (int);
extern void ecoff_directive_dim (int);
extern void ecoff_directive_endef (int);
extern void ecoff_directive_file (int);
extern void ecoff_directive_scl (int);
extern void ecoff_directive_size (int);
extern void ecoff_directive_tag (int);
extern void ecoff_directive_type (int);
extern void ecoff_directive_val (int);

/* Handle stabs.  */
extern void ecoff_stab (segT sec, int what, const char *string,
			int type, int other, int desc);

/* Set the GP prologue size.  */
extern void ecoff_set_gp_prolog_size (int sz);

/* This routine is called from the ECOFF code to set the external
   information for a symbol.  */
#ifndef obj_ecoff_set_ext
extern void obj_ecoff_set_ext (symbolS *, EXTR *);
#endif

/* This routine is used to patch up a line number directive when
   instructions are moved around.  */
extern void ecoff_fix_loc (fragS *, unsigned long);

/* This function is called from read.c to peek at cur_file_ptr.  */
extern int ecoff_no_current_file (void);

/* This function returns the symbol associated with the current proc.  */
extern symbolS *ecoff_get_cur_proc_sym (void);

#endif /* ECOFF_DEBUGGING */

/* This routine is called from read.c to generate line number for .s file.  */
extern void ecoff_generate_asm_lineno (void);

#endif /* ! GAS_ECOFF_H */
@


1.5
log
@resolve conflicts.
@
text
@d37 1
a37 1
extern void ecoff_read_begin_hook PARAMS ((void));
d41 1
a41 1
extern void ecoff_new_file PARAMS ((const char *));
d45 1
a45 1
extern void ecoff_symbol_new_hook PARAMS ((symbolS *));
d48 1
a48 1
extern void ecoff_frob_symbol PARAMS ((symbolS *));
d56 1
a56 1
  PARAMS ((HDRR *hdr, char **bufp, const struct ecoff_debug_swap *));
d59 8
a66 8
extern void ecoff_directive_begin PARAMS ((int));
extern void ecoff_directive_bend PARAMS ((int));
extern void ecoff_directive_end PARAMS ((int));
extern void ecoff_directive_ent PARAMS ((int));
extern void ecoff_directive_fmask PARAMS ((int));
extern void ecoff_directive_frame PARAMS ((int));
extern void ecoff_directive_loc PARAMS ((int));
extern void ecoff_directive_mask PARAMS ((int));
d69 2
a70 2
extern void ecoff_directive_extern PARAMS ((int));
extern void ecoff_directive_weakext PARAMS ((int));
d73 9
a81 9
extern void ecoff_directive_def PARAMS ((int));
extern void ecoff_directive_dim PARAMS ((int));
extern void ecoff_directive_endef PARAMS ((int));
extern void ecoff_directive_file PARAMS ((int));
extern void ecoff_directive_scl PARAMS ((int));
extern void ecoff_directive_size PARAMS ((int));
extern void ecoff_directive_tag PARAMS ((int));
extern void ecoff_directive_type PARAMS ((int));
extern void ecoff_directive_val PARAMS ((int));
d84 2
a85 2
extern void ecoff_stab PARAMS ((segT sec, int what, const char *string,
				int type, int other, int desc));
d88 1
a88 1
extern void ecoff_set_gp_prolog_size PARAMS ((int sz));
d93 1
a93 1
extern void obj_ecoff_set_ext PARAMS ((symbolS *, EXTR *));
d98 1
a98 1
extern void ecoff_fix_loc PARAMS ((fragS *, unsigned long));
d101 1
a101 1
extern int ecoff_no_current_file PARAMS ((void));
d104 1
a104 1
extern symbolS *ecoff_get_cur_proc_sym PARAMS ((void));
d109 1
a109 1
extern void ecoff_generate_asm_lineno PARAMS ((void));
@


1.4
log
@Help stupid cvs fixing basic conflicts.
@
text
@d2 2
a3 1
   Copyright (C) 1993, 94, 95, 96, 97, 98, 1999 Free Software Foundation, Inc.
@


1.3
log
@Merge to Cygnus 961112 + add some support (not ready) for shared libs
@
text
@d2 1
a2 1
   Copyright (C) 1993, 94, 95, 1996 Free Software Foundation, Inc.
a22 2
#ifdef ECOFF_DEBUGGING

d26 2
d44 1
a44 1
extern void ecoff_symbol_new_hook PARAMS ((struct symbol *));
d47 1
a47 1
extern void ecoff_frob_symbol PARAMS ((struct symbol *));
d92 1
a92 1
extern void obj_ecoff_set_ext PARAMS ((struct symbol *, EXTR *));
d102 4
a105 3
/* This routine is called from read.c to generate line number for .s
   file.  */
extern void ecoff_generate_asm_lineno PARAMS ((const char *, int));
d107 2
a108 3
/* This routine is called from read.c to generate line number stabs
   for .s file.  */
extern void ecoff_generate_asm_line_stab PARAMS ((char *, int));
a110 1
#endif /* ECOFF_DEBUGGING */
@


1.2
log
@Merge the Cygnus 960904 sources
@
text
@d38 4
@


1.1
log
@Initial revision
@
text
@d2 1
a2 1
   Copyright (C) 1993 Free Software Foundation, Inc.
d19 3
a21 2
   along with GAS; see the file COPYING.  If not, write to
   the Free Software Foundation, 59 Temple Place - Suite 330, Boston, MA 02111-1307, USA.  */
d91 5
a95 1
/* This function is called from read.c to peek at cur_file_ptr */
d98 2
a99 2
/* This routine is called from read.c to generate line number for .s file
*/
d102 2
a103 2
/* This routine is called from read.c to generate line number stabs for .s file
*/
@


1.1.1.1
log
@Initial GNU binutils 2.6 import
@
text
@@


1.1.1.2
log
@Import of binutils, gas, ld & gprof from Cygnus 960904 tree
@
text
@d2 1
a2 1
   Copyright (C) 1993, 94, 95, 1996 Free Software Foundation, Inc.
d19 2
a20 3
   along with GAS; see the file COPYING.  If not, write to the Free
   Software Foundation, 59 Temple Place - Suite 330, Boston, MA
   02111-1307, USA.  */
d90 1
a90 5
/* This routine is used to patch up a line number directive when
   instructions are moved around.  */
extern void ecoff_fix_loc PARAMS ((fragS *, unsigned long));

/* This function is called from read.c to peek at cur_file_ptr.  */
d93 2
a94 2
/* This routine is called from read.c to generate line number for .s
   file.  */
d97 2
a98 2
/* This routine is called from read.c to generate line number stabs
   for .s file.  */
@


1.1.1.3
log
@Import of 961112 Cygnus binutils+gas+ld+gdb+gprof
@
text
@a37 4
/* This function should be called when the assembler switches to a new
   file.  */
extern void ecoff_new_file PARAMS ((const char *));

@


1.1.1.4
log
@Import binutils-2.10
- only the binutils package (no gdb here)
- don't import libiberty and texinfo, they are elsewhere
- remove all .info* generated files
@
text
@d2 1
a2 1
   Copyright (C) 1993, 94, 95, 96, 97, 98, 1999 Free Software Foundation, Inc.
d23 2
a27 2
#ifdef ECOFF_DEBUGGING

d44 1
a44 1
extern void ecoff_symbol_new_hook PARAMS ((symbolS *));
d47 1
a47 1
extern void ecoff_frob_symbol PARAMS ((symbolS *));
d92 1
a92 1
extern void obj_ecoff_set_ext PARAMS ((symbolS *, EXTR *));
d102 3
a104 4
/* This function returns the symbol associated with the current proc.  */
extern symbolS *ecoff_get_cur_proc_sym PARAMS ((void));

#endif /* ECOFF_DEBUGGING */
d106 3
a108 2
/* This routine is called from read.c to generate line number for .s file.  */
extern void ecoff_generate_asm_lineno PARAMS ((void));
d111 1
@


1.1.1.5
log
@Import binutils-2.11.2
- only the binutils package (no gdb here)
- don't import libiberty and texinfo, they are elsewhere
- remove all .info* generated files
@
text
@d2 1
a2 2
   Copyright 1993, 1994, 1995, 1996, 1997, 1998
   Free Software Foundation, Inc.
@


1.1.1.6
log
@Binutils 2.15, with testsuites removed, and without gdb and libiberty.
@
text
@d37 1
a37 1
extern void ecoff_read_begin_hook (void);
d41 1
a41 1
extern void ecoff_new_file (const char *);
d45 1
a45 1
extern void ecoff_symbol_new_hook (symbolS *);
d48 1
a48 1
extern void ecoff_frob_symbol (symbolS *);
d56 1
a56 1
  (HDRR *hdr, char **bufp, const struct ecoff_debug_swap *);
d59 8
a66 8
extern void ecoff_directive_begin (int);
extern void ecoff_directive_bend (int);
extern void ecoff_directive_end (int);
extern void ecoff_directive_ent (int);
extern void ecoff_directive_fmask (int);
extern void ecoff_directive_frame (int);
extern void ecoff_directive_loc (int);
extern void ecoff_directive_mask (int);
d69 2
a70 2
extern void ecoff_directive_extern (int);
extern void ecoff_directive_weakext (int);
d73 9
a81 9
extern void ecoff_directive_def (int);
extern void ecoff_directive_dim (int);
extern void ecoff_directive_endef (int);
extern void ecoff_directive_file (int);
extern void ecoff_directive_scl (int);
extern void ecoff_directive_size (int);
extern void ecoff_directive_tag (int);
extern void ecoff_directive_type (int);
extern void ecoff_directive_val (int);
d84 2
a85 2
extern void ecoff_stab (segT sec, int what, const char *string,
			int type, int other, int desc);
d88 1
a88 1
extern void ecoff_set_gp_prolog_size (int sz);
d93 1
a93 1
extern void obj_ecoff_set_ext (symbolS *, EXTR *);
d98 1
a98 1
extern void ecoff_fix_loc (fragS *, unsigned long);
d101 1
a101 1
extern int ecoff_no_current_file (void);
d104 1
a104 1
extern symbolS *ecoff_get_cur_proc_sym (void);
d109 1
a109 1
extern void ecoff_generate_asm_lineno (void);
@


