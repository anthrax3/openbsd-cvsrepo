head	1.3;
access;
symbols
	OPENBSD_6_2:1.3.0.14
	OPENBSD_6_2_BASE:1.3
	OPENBSD_6_1:1.3.0.12
	OPENBSD_6_1_BASE:1.3
	OPENBSD_6_0:1.3.0.8
	OPENBSD_6_0_BASE:1.3
	OPENBSD_5_9:1.3.0.4
	OPENBSD_5_9_BASE:1.3
	OPENBSD_5_8:1.3.0.6
	OPENBSD_5_8_BASE:1.3
	OPENBSD_5_7:1.3.0.2
	OPENBSD_5_7_BASE:1.3
	OPENBSD_5_6:1.2.0.42
	OPENBSD_5_6_BASE:1.2
	OPENBSD_5_5:1.2.0.40
	OPENBSD_5_5_BASE:1.2
	OPENBSD_5_4:1.2.0.36
	OPENBSD_5_4_BASE:1.2
	OPENBSD_5_3:1.2.0.34
	OPENBSD_5_3_BASE:1.2
	OPENBSD_5_2:1.2.0.32
	OPENBSD_5_2_BASE:1.2
	OPENBSD_5_1_BASE:1.2
	OPENBSD_5_1:1.2.0.30
	OPENBSD_5_0:1.2.0.28
	OPENBSD_5_0_BASE:1.2
	OPENBSD_4_9:1.2.0.26
	OPENBSD_4_9_BASE:1.2
	OPENBSD_4_8:1.2.0.24
	OPENBSD_4_8_BASE:1.2
	OPENBSD_4_7:1.2.0.20
	OPENBSD_4_7_BASE:1.2
	OPENBSD_4_6:1.2.0.22
	OPENBSD_4_6_BASE:1.2
	OPENBSD_4_5:1.2.0.18
	OPENBSD_4_5_BASE:1.2
	OPENBSD_4_4:1.2.0.16
	OPENBSD_4_4_BASE:1.2
	OPENBSD_4_3:1.2.0.14
	OPENBSD_4_3_BASE:1.2
	OPENBSD_4_2:1.2.0.12
	OPENBSD_4_2_BASE:1.2
	OPENBSD_4_1:1.2.0.10
	OPENBSD_4_1_BASE:1.2
	OPENBSD_4_0:1.2.0.8
	OPENBSD_4_0_BASE:1.2
	OPENBSD_3_9:1.2.0.6
	OPENBSD_3_9_BASE:1.2
	OPENBSD_3_8:1.2.0.4
	OPENBSD_3_8_BASE:1.2
	OPENBSD_3_7:1.2.0.2
	OPENBSD_3_7_BASE:1.2
	BINUTILS_2_15:1.1.1.5
	OPENBSD_3_6:1.1.1.4.0.2
	OPENBSD_3_6_BASE:1.1.1.4
	BINUTILS-2_14:1.1.1.4
	OPENBSD_3_5:1.1.1.3.0.8
	OPENBSD_3_5_BASE:1.1.1.3
	OPENBSD_3_4:1.1.1.3.0.6
	OPENBSD_3_4_BASE:1.1.1.3
	OPENBSD_3_3:1.1.1.3.0.4
	OPENBSD_3_3_BASE:1.1.1.3
	OPENBSD_3_2:1.1.1.3.0.2
	OPENBSD_3_2_BASE:1.1.1.3
	binutils-2_11_2:1.1.1.3
	OPENBSD_3_1:1.1.1.2.0.8
	OPENBSD_3_1_BASE:1.1.1.2
	OPENBSD_3_0:1.1.1.2.0.6
	OPENBSD_3_0_BASE:1.1.1.2
	BINUTILS-2_10_1:1.1.1.2
	OPENBSD_2_9:1.1.1.2.0.4
	OPENBSD_2_9_BASE:1.1.1.2
	OPENBSD_2_8:1.1.1.2.0.2
	OPENBSD_2_8_BASE:1.1.1.2
	BINUTILS-2_10:1.1.1.2
	FSF:1.1.1
	OPENBSD_2_7:1.1.1.1.0.14
	OPENBSD_2_7_BASE:1.1.1.1
	new-binutils:1.1.1.1.0.12
	OPENBSD_2_6:1.1.1.1.0.10
	OPENBSD_2_6_BASE:1.1.1.1
	OPENBSD_2_5:1.1.1.1.0.8
	OPENBSD_2_5_BASE:1.1.1.1
	OPENBSD_2_4:1.1.1.1.0.6
	OPENBSD_2_4_BASE:1.1.1.1
	OPENBSD_2_3:1.1.1.1.0.4
	OPENBSD_2_3_BASE:1.1.1.1
	OPENBSD_2_2:1.1.1.1.0.2
	OPENBSD_2_2_BASE:1.1.1.1
	BINUTILS-2_8_1:1.1.1.1
	CYGNUS:1.1.1;
locks; strict;
comment	@ * @;


1.3
date	2014.08.31.13.40.02;	author tobiasu;	state Exp;
branches;
next	1.2;
commitid	dbwlUkpK0xDlII16;

1.2
date	2004.11.02.20.45.24;	author miod;	state Exp;
branches;
next	1.1;

1.1
date	97.05.29.09.21.57;	author niklas;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	97.05.29.09.21.57;	author niklas;	state Exp;
branches;
next	1.1.1.2;

1.1.1.2
date	2000.09.12.14.46.11;	author espie;	state Exp;
branches;
next	1.1.1.3;

1.1.1.3
date	2002.05.13.13.32.00;	author fgsch;	state Exp;
branches;
next	1.1.1.4;

1.1.1.4
date	2004.05.17.20.42.27;	author drahn;	state Exp;
branches;
next	1.1.1.5;

1.1.1.5
date	2004.11.02.20.22.43;	author miod;	state Exp;
branches;
next	;


desc
@@


1.3
log
@Backport @@file support from binutils-2.17

@@file allows reading command line arguments from a file. Gcc now uses this to
pass very long arguments lists to ld.

ok guenther@@ miod@@
@
text
@/* A lexical scanner generated by flex */

/* Scanner skeleton version:
 * $Header: /home/vcs/cvs/openbsd/src/gnu/usr.bin/binutils/gas/itbl-lex.c,v 1.2 2004/11/02 20:45:24 miod Exp $
 */

#define FLEX_SCANNER
#define YY_FLEX_MAJOR_VERSION 2
#define YY_FLEX_MINOR_VERSION 5

#include <stdio.h>
#include <errno.h>

/* cfront 1.2 defines "c_plusplus" instead of "__cplusplus" */
#ifdef c_plusplus
#ifndef __cplusplus
#define __cplusplus
#endif
#endif


#ifdef __cplusplus

#include <stdlib.h>
#ifndef _WIN32
#include <unistd.h>
#endif

/* Use prototypes in function declarations. */
#define YY_USE_PROTOS

/* The "const" storage-class-modifier is valid. */
#define YY_USE_CONST

#else	/* ! __cplusplus */

#if __STDC__

#define YY_USE_PROTOS
#define YY_USE_CONST

#endif	/* __STDC__ */
#endif	/* ! __cplusplus */

#ifdef __TURBOC__
 #pragma warn -rch
 #pragma warn -use
#include <io.h>
#include <stdlib.h>
#define YY_USE_CONST
#define YY_USE_PROTOS
#endif

#ifdef YY_USE_CONST
#define yyconst const
#else
#define yyconst
#endif


#ifdef YY_USE_PROTOS
#define YY_PROTO(proto) proto
#else
#define YY_PROTO(proto) ()
#endif


/* Returned upon end-of-file. */
#define YY_NULL 0

/* Promotes a possibly negative, possibly signed char to an unsigned
 * integer for use as an array index.  If the signed char is negative,
 * we want to instead treat it as an 8-bit unsigned char, hence the
 * double cast.
 */
#define YY_SC_TO_UI(c) ((unsigned int) (unsigned char) c)

/* Enter a start condition.  This macro really ought to take a parameter,
 * but we do it the disgusting crufty way forced on us by the ()-less
 * definition of BEGIN.
 */
#define BEGIN yy_start = 1 + 2 *

/* Translate the current start state into a value that can be later handed
 * to BEGIN to return to the state.  The YYSTATE alias is for lex
 * compatibility.
 */
#define YY_START ((yy_start - 1) / 2)
#define YYSTATE YY_START

/* Action number for EOF rule of a given start state. */
#define YY_STATE_EOF(state) (YY_END_OF_BUFFER + state + 1)

/* Special action meaning "start processing a new file". */
#define YY_NEW_FILE yyrestart( yyin )

#define YY_END_OF_BUFFER_CHAR 0

/* Size of default input buffer. */
#define YY_BUF_SIZE 16384

typedef struct yy_buffer_state *YY_BUFFER_STATE;

extern int yyleng;
extern FILE *yyin, *yyout;

#define EOB_ACT_CONTINUE_SCAN 0
#define EOB_ACT_END_OF_FILE 1
#define EOB_ACT_LAST_MATCH 2

/* The funky do-while in the following #define is used to turn the definition
 * int a single C statement (which needs a semi-colon terminator).  This
 * avoids problems with code like:
 *
 * 	if ( condition_holds )
 *		yyless( 5 );
 *	else
 *		do_something_else();
 *
 * Prior to using the do-while the compiler would get upset at the
 * "else" because it interpreted the "if" statement as being all
 * done when it reached the ';' after the yyless() call.
 */

/* Return all but the first 'n' matched characters back to the input stream. */

#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up yytext. */ \
		*yy_cp = yy_hold_char; \
		YY_RESTORE_YY_MORE_OFFSET \
		yy_c_buf_p = yy_cp = yy_bp + n - YY_MORE_ADJ; \
		YY_DO_BEFORE_ACTION; /* set up yytext again */ \
		} \
	while ( 0 )

#define unput(c) yyunput( c, yytext_ptr )

/* The following is because we cannot portably get our hands on size_t
 * (without autoconf's help, which isn't available because we want
 * flex-generated scanners to compile on their own).
 */
typedef unsigned int yy_size_t;


struct yy_buffer_state
	{
	FILE *yy_input_file;

	char *yy_ch_buf;		/* input buffer */
	char *yy_buf_pos;		/* current position in input buffer */

	/* Size of input buffer in bytes, not including room for EOB
	 * characters.
	 */
	yy_size_t yy_buf_size;

	/* Number of characters read into yy_ch_buf, not including EOB
	 * characters.
	 */
	int yy_n_chars;

	/* Whether we "own" the buffer - i.e., we know we created it,
	 * and can realloc() it to grow it, and should free() it to
	 * delete it.
	 */
	int yy_is_our_buffer;

	/* Whether this is an "interactive" input source; if so, and
	 * if we're using stdio for input, then we want to use getc()
	 * instead of fread(), to make sure we stop fetching input after
	 * each newline.
	 */
	int yy_is_interactive;

	/* Whether we're considered to be at the beginning of a line.
	 * If so, '^' rules will be active on the next match, otherwise
	 * not.
	 */
	int yy_at_bol;

	/* Whether to try to fill the input buffer when we reach the
	 * end of it.
	 */
	int yy_fill_buffer;

	int yy_buffer_status;
#define YY_BUFFER_NEW 0
#define YY_BUFFER_NORMAL 1
	/* When an EOF's been seen but there's still some text to process
	 * then we mark the buffer as YY_EOF_PENDING, to indicate that we
	 * shouldn't try reading from the input source any more.  We might
	 * still have a bunch of tokens to match, though, because of
	 * possible backing-up.
	 *
	 * When we actually see the EOF, we change the status to "new"
	 * (via yyrestart()), so that the user can continue scanning by
	 * just pointing yyin at a new input file.
	 */
#define YY_BUFFER_EOF_PENDING 2
	};

static YY_BUFFER_STATE yy_current_buffer = 0;

/* We provide macros for accessing buffer states in case in the
 * future we want to put the buffer states in a more general
 * "scanner state".
 */
#define YY_CURRENT_BUFFER yy_current_buffer


/* yy_hold_char holds the character lost when yytext is formed. */
static char yy_hold_char;

static int yy_n_chars;		/* number of characters read into yy_ch_buf */


int yyleng;

/* Points to current character in buffer. */
static char *yy_c_buf_p = (char *) 0;
static int yy_init = 1;		/* whether we need to initialize */
static int yy_start = 0;	/* start state number */

/* Flag which is used to allow yywrap()'s to do buffer switches
 * instead of setting up a fresh yyin.  A bit of a hack ...
 */
static int yy_did_buffer_switch_on_eof;

void yyrestart YY_PROTO(( FILE *input_file ));

void yy_switch_to_buffer YY_PROTO(( YY_BUFFER_STATE new_buffer ));
void yy_load_buffer_state YY_PROTO(( void ));
YY_BUFFER_STATE yy_create_buffer YY_PROTO(( FILE *file, int size ));
void yy_delete_buffer YY_PROTO(( YY_BUFFER_STATE b ));
void yy_init_buffer YY_PROTO(( YY_BUFFER_STATE b, FILE *file ));
void yy_flush_buffer YY_PROTO(( YY_BUFFER_STATE b ));
#define YY_FLUSH_BUFFER yy_flush_buffer( yy_current_buffer )

YY_BUFFER_STATE yy_scan_buffer YY_PROTO(( char *base, yy_size_t size ));
YY_BUFFER_STATE yy_scan_string YY_PROTO(( yyconst char *yy_str ));
YY_BUFFER_STATE yy_scan_bytes YY_PROTO(( yyconst char *bytes, int len ));

static void *yy_flex_alloc YY_PROTO(( yy_size_t ));
static void *yy_flex_realloc YY_PROTO(( void *, yy_size_t ));
static void yy_flex_free YY_PROTO(( void * ));

#define yy_new_buffer yy_create_buffer

#define yy_set_interactive(is_interactive) \
	{ \
	if ( ! yy_current_buffer ) \
		yy_current_buffer = yy_create_buffer( yyin, YY_BUF_SIZE ); \
	yy_current_buffer->yy_is_interactive = is_interactive; \
	}

#define yy_set_bol(at_bol) \
	{ \
	if ( ! yy_current_buffer ) \
		yy_current_buffer = yy_create_buffer( yyin, YY_BUF_SIZE ); \
	yy_current_buffer->yy_at_bol = at_bol; \
	}

#define YY_AT_BOL() (yy_current_buffer->yy_at_bol)

typedef unsigned char YY_CHAR;
FILE *yyin = (FILE *) 0, *yyout = (FILE *) 0;
typedef int yy_state_type;
extern char *yytext;
#define yytext_ptr yytext

static yy_state_type yy_get_previous_state YY_PROTO(( void ));
static yy_state_type yy_try_NUL_trans YY_PROTO(( yy_state_type current_state ));
static int yy_get_next_buffer YY_PROTO(( void ));
static void yy_fatal_error YY_PROTO(( yyconst char msg[] ));

/* Done after the current pattern has been matched and before the
 * corresponding action - sets up yytext.
 */
#define YY_DO_BEFORE_ACTION \
	yytext_ptr = yy_bp; \
	yyleng = (int) (yy_cp - yy_bp); \
	yy_hold_char = *yy_cp; \
	*yy_cp = '\0'; \
	yy_c_buf_p = yy_cp;

#define YY_NUM_RULES 15
#define YY_END_OF_BUFFER 16
static yyconst short int yy_accept[60] =
    {   0,
        0,    0,   16,   14,   13,   12,   11,    8,    8,   10,
       10,   10,   10,   10,   10,   10,   10,   10,   10,   10,
       10,    8,    0,   10,   10,   10,   10,   10,   10,   10,
       10,   10,   10,   10,   10,   10,    7,    9,   10,   10,
       10,   10,   10,   10,   10,   10,   10,   10,   10,   10,
        5,    1,    2,    3,   10,    6,   10,    4,    0
    } ;

static yyconst int yy_ec[256] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    1,    2,    3,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    4,    1,    1,    5,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    6,    7,    7,
        7,    7,    7,    7,    7,    7,    7,    1,    8,    1,
        1,    1,    1,    1,    9,   10,   11,   12,   13,   10,
       14,   15,   16,   15,   15,   15,   17,   18,   15,   15,
       15,   19,   20,   15,   15,   15,   15,   15,   15,   15,
        1,    1,    1,    1,   15,    1,   21,   10,   22,   23,

       24,   10,   25,   15,   26,   15,   15,   15,   27,   28,
       15,   29,   15,   30,   31,   15,   15,   15,   15,   32,
       15,   15,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,

        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1
    } ;

static yyconst int yy_meta[33] =
    {   0,
        1,    1,    1,    1,    1,    2,    2,    1,    2,    2,
        2,    2,    2,    3,    3,    3,    3,    3,    3,    3,
        2,    2,    2,    2,    3,    3,    3,    3,    3,    3,
        3,    3
    } ;

static yyconst short int yy_base[62] =
    {   0,
        0,    0,   83,   84,   84,   84,   84,   27,   29,   70,
        0,   62,   61,   60,   20,   55,   47,   46,   45,   12,
       35,   37,    0,    0,   62,   60,   59,   58,   53,   49,
       45,   43,   42,   41,   37,   32,    0,    0,   43,   44,
       43,   42,   42,   36,   23,   27,   26,   25,   25,   20,
        0,    0,    0,    0,   35,    0,   23,    0,   84,   58,
       43
    } ;

static yyconst short int yy_def[62] =
    {   0,
       59,    1,   59,   59,   59,   59,   59,   59,   59,   60,
       60,   60,   60,   60,   60,   60,   60,   60,   60,   60,
       60,   59,   61,   60,   60,   60,   60,   60,   60,   60,
       60,   60,   60,   60,   60,   60,   60,   61,   60,   60,
       60,   60,   60,   60,   60,   60,   60,   60,   60,   60,
       60,   60,   60,   60,   60,   60,   60,   60,    0,   59,
       59
    } ;

static yyconst short int yy_nxt[117] =
    {   0,
        4,    5,    6,    5,    7,    8,    9,    7,   10,   11,
       12,   13,   11,   14,   11,   15,   11,   11,   11,   11,
       16,   17,   18,   11,   19,   20,   11,   11,   21,   11,
       11,   11,   22,   22,   22,   22,   29,   30,   35,   36,
       37,   37,   22,   22,   38,   58,   58,   56,   57,   54,
       53,   52,   51,   56,   55,   54,   53,   52,   23,   24,
       24,   51,   50,   49,   48,   47,   46,   45,   44,   43,
       42,   41,   40,   39,   34,   33,   32,   31,   28,   27,
       26,   25,   59,    3,   59,   59,   59,   59,   59,   59,
       59,   59,   59,   59,   59,   59,   59,   59,   59,   59,

       59,   59,   59,   59,   59,   59,   59,   59,   59,   59,
       59,   59,   59,   59,   59,   59
    } ;

static yyconst short int yy_chk[117] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    8,    8,    9,    9,   15,   15,   20,   20,
       21,   21,   22,   22,   61,   57,   55,   50,   49,   48,
       47,   46,   45,   44,   43,   42,   41,   40,    8,   60,
       60,   39,   36,   35,   34,   33,   32,   31,   30,   29,
       28,   27,   26,   25,   19,   18,   17,   16,   14,   13,
       12,   10,    3,   59,   59,   59,   59,   59,   59,   59,
       59,   59,   59,   59,   59,   59,   59,   59,   59,   59,

       59,   59,   59,   59,   59,   59,   59,   59,   59,   59,
       59,   59,   59,   59,   59,   59
    } ;

static yy_state_type yy_last_accepting_state;
static char *yy_last_accepting_cpos;

/* The intent behind this definition is that it'll catch
 * any uses of REJECT which flex missed.
 */
#define REJECT reject_used_but_not_detected
#define yymore() yymore_used_but_not_detected
#define YY_MORE_ADJ 0
#define YY_RESTORE_YY_MORE_OFFSET
char *yytext;
#line 1 "itbl-lex.l"
#define INITIAL 0
/* itbl-lex.l
   Copyright 1997, 1998, 2001 Free Software Foundation, Inc.

   This file is part of GAS, the GNU Assembler.

   GAS is free software; you can redistribute it and/or modify
   it under the terms of the GNU General Public License as published by
   the Free Software Foundation; either version 2, or (at your option)
   any later version.

   GAS is distributed in the hope that it will be useful, 
   but WITHOUT ANY WARRANTY; without even the implied warranty of
   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
   GNU General Public License for more details.

   You should have received a copy of the GNU General Public License
   along with GAS; see the file COPYING.  If not, write to the Free
   Software Foundation, 59 Temple Place - Suite 330, Boston, MA
   02111-1307, USA.  */
#line 22 "itbl-lex.l"
#include <stdio.h>
#include <string.h>
#include <stdlib.h>

#include <itbl-parse.h>

#ifdef DEBUG
#define DBG(x) printf x
#define MDBG(x) printf x
#else
#define DBG(x)
#define MDBG(x)
#endif

int insntbl_line = 1;
#line 445 "itbl-lex.c"

/* Macros after this point can all be overridden by user definitions in
 * section 1.
 */

#ifndef YY_SKIP_YYWRAP
#ifdef __cplusplus
extern "C" int yywrap YY_PROTO(( void ));
#else
extern int yywrap YY_PROTO(( void ));
#endif
#endif

#ifndef YY_NO_UNPUT
static void yyunput YY_PROTO(( int c, char *buf_ptr ));
#endif

#ifndef yytext_ptr
static void yy_flex_strncpy YY_PROTO(( char *, yyconst char *, int ));
#endif

#ifdef YY_NEED_STRLEN
static int yy_flex_strlen YY_PROTO(( yyconst char * ));
#endif

#ifndef YY_NO_INPUT
#ifdef __cplusplus
static int yyinput YY_PROTO(( void ));
#else
static int input YY_PROTO(( void ));
#endif
#endif

#if YY_STACK_USED
static int yy_start_stack_ptr = 0;
static int yy_start_stack_depth = 0;
static int *yy_start_stack = 0;
#ifndef YY_NO_PUSH_STATE
static void yy_push_state YY_PROTO(( int new_state ));
#endif
#ifndef YY_NO_POP_STATE
static void yy_pop_state YY_PROTO(( void ));
#endif
#ifndef YY_NO_TOP_STATE
static int yy_top_state YY_PROTO(( void ));
#endif

#else
#define YY_NO_PUSH_STATE 1
#define YY_NO_POP_STATE 1
#define YY_NO_TOP_STATE 1
#endif

#ifdef YY_MALLOC_DECL
YY_MALLOC_DECL
#else
#if __STDC__
#ifndef __cplusplus
#include <stdlib.h>
#endif
#else
/* Just try to get by without declaring the routines.  This will fail
 * miserably on non-ANSI systems for which sizeof(size_t) != sizeof(int)
 * or sizeof(void*) != sizeof(int).
 */
#endif
#endif

/* Amount of stuff to slurp up with each read. */
#ifndef YY_READ_BUF_SIZE
#define YY_READ_BUF_SIZE 8192
#endif

/* Copy whatever the last rule matched to the standard output. */

#ifndef ECHO
/* This used to be an fputs(), but since the string might contain NUL's,
 * we now use fwrite().
 */
#define ECHO (void) fwrite( yytext, yyleng, 1, yyout )
#endif

/* Gets input and stuffs it into "buf".  number of characters read, or YY_NULL,
 * is returned in "result".
 */
#ifndef YY_INPUT
#define YY_INPUT(buf,result,max_size) \
	if ( yy_current_buffer->yy_is_interactive ) \
		{ \
		int c = '*', n; \
		for ( n = 0; n < max_size && \
			     (c = getc( yyin )) != EOF && c != '\n'; ++n ) \
			buf[n] = (char) c; \
		if ( c == '\n' ) \
			buf[n++] = (char) c; \
		if ( c == EOF && ferror( yyin ) ) \
			YY_FATAL_ERROR( "input in flex scanner failed" ); \
		result = n; \
		} \
	else \
		{ \
		errno=0; \
		while ( (result = fread(buf, 1, max_size, yyin))==0 && ferror(yyin)) \
			{ \
			if( errno != EINTR) \
				{ \
				YY_FATAL_ERROR( "input in flex scanner failed" ); \
				break; \
				} \
			errno=0; \
			clearerr(yyin); \
			} \
		}
#endif

/* No semi-colon after return; correct usage is to write "yyterminate();" -
 * we don't want an extra ';' after the "return" because that will cause
 * some compilers to complain about unreachable statements.
 */
#ifndef yyterminate
#define yyterminate() return YY_NULL
#endif

/* Number of entries by which start-condition stack grows. */
#ifndef YY_START_STACK_INCR
#define YY_START_STACK_INCR 25
#endif

/* Report a fatal error. */
#ifndef YY_FATAL_ERROR
#define YY_FATAL_ERROR(msg) yy_fatal_error( msg )
#endif

/* Default declaration of generated scanner - a define so the user can
 * easily add parameters.
 */
#ifndef YY_DECL
#define YY_DECL int yylex YY_PROTO(( void ))
#endif

/* Code executed at the beginning of each rule, after yytext and yyleng
 * have been set up.
 */
#ifndef YY_USER_ACTION
#define YY_USER_ACTION
#endif

/* Code executed at the end of each rule. */
#ifndef YY_BREAK
#define YY_BREAK break;
#endif

#define YY_RULE_SETUP \
	YY_USER_ACTION

YY_DECL
	{
	register yy_state_type yy_current_state;
	register char *yy_cp, *yy_bp;
	register int yy_act;

#line 44 "itbl-lex.l"


#line 610 "itbl-lex.c"

	if ( yy_init )
		{
		yy_init = 0;

#ifdef YY_USER_INIT
		YY_USER_INIT;
#endif

		if ( ! yy_start )
			yy_start = 1;	/* first start state */

		if ( ! yyin )
			yyin = stdin;

		if ( ! yyout )
			yyout = stdout;

		if ( ! yy_current_buffer )
			yy_current_buffer =
				yy_create_buffer( yyin, YY_BUF_SIZE );

		yy_load_buffer_state();
		}

	while ( 1 )		/* loops until end-of-file is reached */
		{
		yy_cp = yy_c_buf_p;

		/* Support of yytext. */
		*yy_cp = yy_hold_char;

		/* yy_bp points to the position in yy_ch_buf of the start of
		 * the current run.
		 */
		yy_bp = yy_cp;

		yy_current_state = yy_start;
yy_match:
		do
			{
			register YY_CHAR yy_c = yy_ec[YY_SC_TO_UI(*yy_cp)];
			if ( yy_accept[yy_current_state] )
				{
				yy_last_accepting_state = yy_current_state;
				yy_last_accepting_cpos = yy_cp;
				}
			while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
				{
				yy_current_state = (int) yy_def[yy_current_state];
				if ( yy_current_state >= 60 )
					yy_c = yy_meta[(unsigned int) yy_c];
				}
			yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
			++yy_cp;
			}
		while ( yy_base[yy_current_state] != 84 );

yy_find_action:
		yy_act = yy_accept[yy_current_state];
		if ( yy_act == 0 )
			{ /* have to back up */
			yy_cp = yy_last_accepting_cpos;
			yy_current_state = yy_last_accepting_state;
			yy_act = yy_accept[yy_current_state];
			}

		YY_DO_BEFORE_ACTION;


do_action:	/* This label is used only to access EOF actions. */


		switch ( yy_act )
	{ /* beginning of action switch */
			case 0: /* must back up */
			/* undo the effects of YY_DO_BEFORE_ACTION */
			*yy_cp = yy_hold_char;
			yy_cp = yy_last_accepting_cpos;
			yy_current_state = yy_last_accepting_state;
			goto yy_find_action;

case 1:
YY_RULE_SETUP
#line 46 "itbl-lex.l"
{
    return CREG;
  }
	YY_BREAK
case 2:
YY_RULE_SETUP
#line 49 "itbl-lex.l"
{
    return DREG;
  }
	YY_BREAK
case 3:
YY_RULE_SETUP
#line 52 "itbl-lex.l"
{
    return GREG;
  }
	YY_BREAK
case 4:
YY_RULE_SETUP
#line 55 "itbl-lex.l"
{
    return IMMED;
  }
	YY_BREAK
case 5:
YY_RULE_SETUP
#line 58 "itbl-lex.l"
{
    return ADDR;
  }
	YY_BREAK
case 6:
YY_RULE_SETUP
#line 61 "itbl-lex.l"
{
    return INSN;
  }
	YY_BREAK
case 7:
YY_RULE_SETUP
#line 64 "itbl-lex.l"
{
    yytext[yyleng] = 0;
    yylval.processor = strtoul (yytext+1, 0, 0);
    return PNUM;
  }
	YY_BREAK
case 8:
YY_RULE_SETUP
#line 69 "itbl-lex.l"
{
    yytext[yyleng] = 0;
    yylval.num = strtoul (yytext, 0, 0);
    return NUM;
  }
	YY_BREAK
case 9:
YY_RULE_SETUP
#line 74 "itbl-lex.l"
{
    yytext[yyleng] = 0;
    yylval.num = strtoul (yytext, 0, 0);
    return NUM;
  }
	YY_BREAK
case 10:
YY_RULE_SETUP
#line 79 "itbl-lex.l"
{
    yytext[yyleng] = 0;
    yylval.str = strdup (yytext);
    return ID;
  }
	YY_BREAK
case 11:
YY_RULE_SETUP
#line 84 "itbl-lex.l"
{
    int c;
    while ((c = input ()) !=  EOF) 
      {
        if (c ==  '\n') 
    	{
    		unput (c);
    		break;
    	}
      }
  }
	YY_BREAK
case 12:
YY_RULE_SETUP
#line 95 "itbl-lex.l"
{ 
    insntbl_line++; 
    MDBG (("in lex, NL = %d (x%x)\n", NL, NL));
    return NL; 
  }
	YY_BREAK
case 13:
YY_RULE_SETUP
#line 100 "itbl-lex.l"
{ 
  }
	YY_BREAK
case 14:
YY_RULE_SETUP
#line 102 "itbl-lex.l"
{
    MDBG (("char = %x, %d\n", yytext[0], yytext[0]));
    return yytext[0];
  }
	YY_BREAK
case 15:
YY_RULE_SETUP
#line 106 "itbl-lex.l"
ECHO;
	YY_BREAK
#line 814 "itbl-lex.c"
case YY_STATE_EOF(INITIAL):
	yyterminate();

	case YY_END_OF_BUFFER:
		{
		/* Amount of text matched not including the EOB char. */
		int yy_amount_of_matched_text = (int) (yy_cp - yytext_ptr) - 1;

		/* Undo the effects of YY_DO_BEFORE_ACTION. */
		*yy_cp = yy_hold_char;
		YY_RESTORE_YY_MORE_OFFSET

		if ( yy_current_buffer->yy_buffer_status == YY_BUFFER_NEW )
			{
			/* We're scanning a new file or input source.  It's
			 * possible that this happened because the user
			 * just pointed yyin at a new source and called
			 * yylex().  If so, then we have to assure
			 * consistency between yy_current_buffer and our
			 * globals.  Here is the right place to do so, because
			 * this is the first action (other than possibly a
			 * back-up) that will match for the new input source.
			 */
			yy_n_chars = yy_current_buffer->yy_n_chars;
			yy_current_buffer->yy_input_file = yyin;
			yy_current_buffer->yy_buffer_status = YY_BUFFER_NORMAL;
			}

		/* Note that here we test for yy_c_buf_p "<=" to the position
		 * of the first EOB in the buffer, since yy_c_buf_p will
		 * already have been incremented past the NUL character
		 * (since all states make transitions on EOB to the
		 * end-of-buffer state).  Contrast this with the test
		 * in input().
		 */
		if ( yy_c_buf_p <= &yy_current_buffer->yy_ch_buf[yy_n_chars] )
			{ /* This was really a NUL. */
			yy_state_type yy_next_state;

			yy_c_buf_p = yytext_ptr + yy_amount_of_matched_text;

			yy_current_state = yy_get_previous_state();

			/* Okay, we're now positioned to make the NUL
			 * transition.  We couldn't have
			 * yy_get_previous_state() go ahead and do it
			 * for us because it doesn't know how to deal
			 * with the possibility of jamming (and we don't
			 * want to build jamming into it because then it
			 * will run more slowly).
			 */

			yy_next_state = yy_try_NUL_trans( yy_current_state );

			yy_bp = yytext_ptr + YY_MORE_ADJ;

			if ( yy_next_state )
				{
				/* Consume the NUL. */
				yy_cp = ++yy_c_buf_p;
				yy_current_state = yy_next_state;
				goto yy_match;
				}

			else
				{
				yy_cp = yy_c_buf_p;
				goto yy_find_action;
				}
			}

		else switch ( yy_get_next_buffer() )
			{
			case EOB_ACT_END_OF_FILE:
				{
				yy_did_buffer_switch_on_eof = 0;

				if ( yywrap() )
					{
					/* Note: because we've taken care in
					 * yy_get_next_buffer() to have set up
					 * yytext, we can now set up
					 * yy_c_buf_p so that if some total
					 * hoser (like flex itself) wants to
					 * call the scanner after we return the
					 * YY_NULL, it'll still work - another
					 * YY_NULL will get returned.
					 */
					yy_c_buf_p = yytext_ptr + YY_MORE_ADJ;

					yy_act = YY_STATE_EOF(YY_START);
					goto do_action;
					}

				else
					{
					if ( ! yy_did_buffer_switch_on_eof )
						YY_NEW_FILE;
					}
				break;
				}

			case EOB_ACT_CONTINUE_SCAN:
				yy_c_buf_p =
					yytext_ptr + yy_amount_of_matched_text;

				yy_current_state = yy_get_previous_state();

				yy_cp = yy_c_buf_p;
				yy_bp = yytext_ptr + YY_MORE_ADJ;
				goto yy_match;

			case EOB_ACT_LAST_MATCH:
				yy_c_buf_p =
				&yy_current_buffer->yy_ch_buf[yy_n_chars];

				yy_current_state = yy_get_previous_state();

				yy_cp = yy_c_buf_p;
				yy_bp = yytext_ptr + YY_MORE_ADJ;
				goto yy_find_action;
			}
		break;
		}

	default:
		YY_FATAL_ERROR(
			"fatal flex scanner internal error--no action found" );
	} /* end of action switch */
		} /* end of scanning one token */
	} /* end of yylex */


/* yy_get_next_buffer - try to read in a new buffer
 *
 * Returns a code representing an action:
 *	EOB_ACT_LAST_MATCH -
 *	EOB_ACT_CONTINUE_SCAN - continue scanning from current position
 *	EOB_ACT_END_OF_FILE - end of file
 */

static int yy_get_next_buffer()
	{
	register char *dest = yy_current_buffer->yy_ch_buf;
	register char *source = yytext_ptr;
	register int number_to_move, i;
	int ret_val;

	if ( yy_c_buf_p > &yy_current_buffer->yy_ch_buf[yy_n_chars + 1] )
		YY_FATAL_ERROR(
		"fatal flex scanner internal error--end of buffer missed" );

	if ( yy_current_buffer->yy_fill_buffer == 0 )
		{ /* Don't try to fill the buffer, so this is an EOF. */
		if ( yy_c_buf_p - yytext_ptr - YY_MORE_ADJ == 1 )
			{
			/* We matched a single character, the EOB, so
			 * treat this as a final EOF.
			 */
			return EOB_ACT_END_OF_FILE;
			}

		else
			{
			/* We matched some text prior to the EOB, first
			 * process it.
			 */
			return EOB_ACT_LAST_MATCH;
			}
		}

	/* Try to read more data. */

	/* First move last chars to start of buffer. */
	number_to_move = (int) (yy_c_buf_p - yytext_ptr) - 1;

	for ( i = 0; i < number_to_move; ++i )
		*(dest++) = *(source++);

	if ( yy_current_buffer->yy_buffer_status == YY_BUFFER_EOF_PENDING )
		/* don't do the read, it's not guaranteed to return an EOF,
		 * just force an EOF
		 */
		yy_current_buffer->yy_n_chars = yy_n_chars = 0;

	else
		{
		int num_to_read =
			yy_current_buffer->yy_buf_size - number_to_move - 1;

		while ( num_to_read <= 0 )
			{ /* Not enough room in the buffer - grow it. */
#ifdef YY_USES_REJECT
			YY_FATAL_ERROR(
"input buffer overflow, can't enlarge buffer because scanner uses REJECT" );
#else

			/* just a shorter name for the current buffer */
			YY_BUFFER_STATE b = yy_current_buffer;

			int yy_c_buf_p_offset =
				(int) (yy_c_buf_p - b->yy_ch_buf);

			if ( b->yy_is_our_buffer )
				{
				int new_size = b->yy_buf_size * 2;

				if ( new_size <= 0 )
					b->yy_buf_size += b->yy_buf_size / 8;
				else
					b->yy_buf_size *= 2;

				b->yy_ch_buf = (char *)
					/* Include room in for 2 EOB chars. */
					yy_flex_realloc( (void *) b->yy_ch_buf,
							 b->yy_buf_size + 2 );
				}
			else
				/* Can't grow it, we don't own it. */
				b->yy_ch_buf = 0;

			if ( ! b->yy_ch_buf )
				YY_FATAL_ERROR(
				"fatal error - scanner input buffer overflow" );

			yy_c_buf_p = &b->yy_ch_buf[yy_c_buf_p_offset];

			num_to_read = yy_current_buffer->yy_buf_size -
						number_to_move - 1;
#endif
			}

		if ( num_to_read > YY_READ_BUF_SIZE )
			num_to_read = YY_READ_BUF_SIZE;

		/* Read in more data. */
		YY_INPUT( (&yy_current_buffer->yy_ch_buf[number_to_move]),
			yy_n_chars, num_to_read );

		yy_current_buffer->yy_n_chars = yy_n_chars;
		}

	if ( yy_n_chars == 0 )
		{
		if ( number_to_move == YY_MORE_ADJ )
			{
			ret_val = EOB_ACT_END_OF_FILE;
			yyrestart( yyin );
			}

		else
			{
			ret_val = EOB_ACT_LAST_MATCH;
			yy_current_buffer->yy_buffer_status =
				YY_BUFFER_EOF_PENDING;
			}
		}

	else
		ret_val = EOB_ACT_CONTINUE_SCAN;

	yy_n_chars += number_to_move;
	yy_current_buffer->yy_ch_buf[yy_n_chars] = YY_END_OF_BUFFER_CHAR;
	yy_current_buffer->yy_ch_buf[yy_n_chars + 1] = YY_END_OF_BUFFER_CHAR;

	yytext_ptr = &yy_current_buffer->yy_ch_buf[0];

	return ret_val;
	}


/* yy_get_previous_state - get the state just before the EOB char was reached */

static yy_state_type yy_get_previous_state()
	{
	register yy_state_type yy_current_state;
	register char *yy_cp;

	yy_current_state = yy_start;

	for ( yy_cp = yytext_ptr + YY_MORE_ADJ; yy_cp < yy_c_buf_p; ++yy_cp )
		{
		register YY_CHAR yy_c = (*yy_cp ? yy_ec[YY_SC_TO_UI(*yy_cp)] : 1);
		if ( yy_accept[yy_current_state] )
			{
			yy_last_accepting_state = yy_current_state;
			yy_last_accepting_cpos = yy_cp;
			}
		while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
			{
			yy_current_state = (int) yy_def[yy_current_state];
			if ( yy_current_state >= 60 )
				yy_c = yy_meta[(unsigned int) yy_c];
			}
		yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
		}

	return yy_current_state;
	}


/* yy_try_NUL_trans - try to make a transition on the NUL character
 *
 * synopsis
 *	next_state = yy_try_NUL_trans( current_state );
 */

#ifdef YY_USE_PROTOS
static yy_state_type yy_try_NUL_trans( yy_state_type yy_current_state )
#else
static yy_state_type yy_try_NUL_trans( yy_current_state )
yy_state_type yy_current_state;
#endif
	{
	register int yy_is_jam;
	register char *yy_cp = yy_c_buf_p;

	register YY_CHAR yy_c = 1;
	if ( yy_accept[yy_current_state] )
		{
		yy_last_accepting_state = yy_current_state;
		yy_last_accepting_cpos = yy_cp;
		}
	while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
		{
		yy_current_state = (int) yy_def[yy_current_state];
		if ( yy_current_state >= 60 )
			yy_c = yy_meta[(unsigned int) yy_c];
		}
	yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
	yy_is_jam = (yy_current_state == 59);

	return yy_is_jam ? 0 : yy_current_state;
	}


#ifndef YY_NO_UNPUT
#ifdef YY_USE_PROTOS
static void yyunput( int c, register char *yy_bp )
#else
static void yyunput( c, yy_bp )
int c;
register char *yy_bp;
#endif
	{
	register char *yy_cp = yy_c_buf_p;

	/* undo effects of setting up yytext */
	*yy_cp = yy_hold_char;

	if ( yy_cp < yy_current_buffer->yy_ch_buf + 2 )
		{ /* need to shift things up to make room */
		/* +2 for EOB chars. */
		register int number_to_move = yy_n_chars + 2;
		register char *dest = &yy_current_buffer->yy_ch_buf[
					yy_current_buffer->yy_buf_size + 2];
		register char *source =
				&yy_current_buffer->yy_ch_buf[number_to_move];

		while ( source > yy_current_buffer->yy_ch_buf )
			*--dest = *--source;

		yy_cp += (int) (dest - source);
		yy_bp += (int) (dest - source);
		yy_current_buffer->yy_n_chars =
			yy_n_chars = yy_current_buffer->yy_buf_size;

		if ( yy_cp < yy_current_buffer->yy_ch_buf + 2 )
			YY_FATAL_ERROR( "flex scanner push-back overflow" );
		}

	*--yy_cp = (char) c;


	yytext_ptr = yy_bp;
	yy_hold_char = *yy_cp;
	yy_c_buf_p = yy_cp;
	}
#endif	/* ifndef YY_NO_UNPUT */


#ifdef __cplusplus
static int yyinput()
#else
static int input()
#endif
	{
	int c;

	*yy_c_buf_p = yy_hold_char;

	if ( *yy_c_buf_p == YY_END_OF_BUFFER_CHAR )
		{
		/* yy_c_buf_p now points to the character we want to return.
		 * If this occurs *before* the EOB characters, then it's a
		 * valid NUL; if not, then we've hit the end of the buffer.
		 */
		if ( yy_c_buf_p < &yy_current_buffer->yy_ch_buf[yy_n_chars] )
			/* This was really a NUL. */
			*yy_c_buf_p = '\0';

		else
			{ /* need more input */
			int offset = yy_c_buf_p - yytext_ptr;
			++yy_c_buf_p;

			switch ( yy_get_next_buffer() )
				{
				case EOB_ACT_LAST_MATCH:
					/* This happens because yy_g_n_b()
					 * sees that we've accumulated a
					 * token and flags that we need to
					 * try matching the token before
					 * proceeding.  But for input(),
					 * there's no matching to consider.
					 * So convert the EOB_ACT_LAST_MATCH
					 * to EOB_ACT_END_OF_FILE.
					 */

					/* Reset buffer status. */
					yyrestart( yyin );

					/* fall through */

				case EOB_ACT_END_OF_FILE:
					{
					if ( yywrap() )
						return EOF;

					if ( ! yy_did_buffer_switch_on_eof )
						YY_NEW_FILE;
#ifdef __cplusplus
					return yyinput();
#else
					return input();
#endif
					}

				case EOB_ACT_CONTINUE_SCAN:
					yy_c_buf_p = yytext_ptr + offset;
					break;
				}
			}
		}

	c = *(unsigned char *) yy_c_buf_p;	/* cast for 8-bit char's */
	*yy_c_buf_p = '\0';	/* preserve yytext */
	yy_hold_char = *++yy_c_buf_p;


	return c;
	}


#ifdef YY_USE_PROTOS
void yyrestart( FILE *input_file )
#else
void yyrestart( input_file )
FILE *input_file;
#endif
	{
	if ( ! yy_current_buffer )
		yy_current_buffer = yy_create_buffer( yyin, YY_BUF_SIZE );

	yy_init_buffer( yy_current_buffer, input_file );
	yy_load_buffer_state();
	}


#ifdef YY_USE_PROTOS
void yy_switch_to_buffer( YY_BUFFER_STATE new_buffer )
#else
void yy_switch_to_buffer( new_buffer )
YY_BUFFER_STATE new_buffer;
#endif
	{
	if ( yy_current_buffer == new_buffer )
		return;

	if ( yy_current_buffer )
		{
		/* Flush out information for old buffer. */
		*yy_c_buf_p = yy_hold_char;
		yy_current_buffer->yy_buf_pos = yy_c_buf_p;
		yy_current_buffer->yy_n_chars = yy_n_chars;
		}

	yy_current_buffer = new_buffer;
	yy_load_buffer_state();

	/* We don't actually know whether we did this switch during
	 * EOF (yywrap()) processing, but the only time this flag
	 * is looked at is after yywrap() is called, so it's safe
	 * to go ahead and always set it.
	 */
	yy_did_buffer_switch_on_eof = 1;
	}


#ifdef YY_USE_PROTOS
void yy_load_buffer_state( void )
#else
void yy_load_buffer_state()
#endif
	{
	yy_n_chars = yy_current_buffer->yy_n_chars;
	yytext_ptr = yy_c_buf_p = yy_current_buffer->yy_buf_pos;
	yyin = yy_current_buffer->yy_input_file;
	yy_hold_char = *yy_c_buf_p;
	}


#ifdef YY_USE_PROTOS
YY_BUFFER_STATE yy_create_buffer( FILE *file, int size )
#else
YY_BUFFER_STATE yy_create_buffer( file, size )
FILE *file;
int size;
#endif
	{
	YY_BUFFER_STATE b;

	b = (YY_BUFFER_STATE) yy_flex_alloc( sizeof( struct yy_buffer_state ) );
	if ( ! b )
		YY_FATAL_ERROR( "out of dynamic memory in yy_create_buffer()" );

	b->yy_buf_size = size;

	/* yy_ch_buf has to be 2 characters longer than the size given because
	 * we need to put in 2 end-of-buffer characters.
	 */
	b->yy_ch_buf = (char *) yy_flex_alloc( b->yy_buf_size + 2 );
	if ( ! b->yy_ch_buf )
		YY_FATAL_ERROR( "out of dynamic memory in yy_create_buffer()" );

	b->yy_is_our_buffer = 1;

	yy_init_buffer( b, file );

	return b;
	}


#ifdef YY_USE_PROTOS
void yy_delete_buffer( YY_BUFFER_STATE b )
#else
void yy_delete_buffer( b )
YY_BUFFER_STATE b;
#endif
	{
	if ( ! b )
		return;

	if ( b == yy_current_buffer )
		yy_current_buffer = (YY_BUFFER_STATE) 0;

	if ( b->yy_is_our_buffer )
		yy_flex_free( (void *) b->yy_ch_buf );

	yy_flex_free( (void *) b );
	}


#ifndef _WIN32
#include <unistd.h>
#else
#ifndef YY_ALWAYS_INTERACTIVE
#ifndef YY_NEVER_INTERACTIVE
extern int isatty YY_PROTO(( int ));
#endif
#endif
#endif

#ifdef YY_USE_PROTOS
void yy_init_buffer( YY_BUFFER_STATE b, FILE *file )
#else
void yy_init_buffer( b, file )
YY_BUFFER_STATE b;
FILE *file;
#endif


	{
	yy_flush_buffer( b );

	b->yy_input_file = file;
	b->yy_fill_buffer = 1;

#if YY_ALWAYS_INTERACTIVE
	b->yy_is_interactive = 1;
#else
#if YY_NEVER_INTERACTIVE
	b->yy_is_interactive = 0;
#else
	b->yy_is_interactive = file ? (isatty( fileno(file) ) > 0) : 0;
#endif
#endif
	}


#ifdef YY_USE_PROTOS
void yy_flush_buffer( YY_BUFFER_STATE b )
#else
void yy_flush_buffer( b )
YY_BUFFER_STATE b;
#endif

	{
	if ( ! b )
		return;

	b->yy_n_chars = 0;

	/* We always need two end-of-buffer characters.  The first causes
	 * a transition to the end-of-buffer state.  The second causes
	 * a jam in that state.
	 */
	b->yy_ch_buf[0] = YY_END_OF_BUFFER_CHAR;
	b->yy_ch_buf[1] = YY_END_OF_BUFFER_CHAR;

	b->yy_buf_pos = &b->yy_ch_buf[0];

	b->yy_at_bol = 1;
	b->yy_buffer_status = YY_BUFFER_NEW;

	if ( b == yy_current_buffer )
		yy_load_buffer_state();
	}


#ifndef YY_NO_SCAN_BUFFER
#ifdef YY_USE_PROTOS
YY_BUFFER_STATE yy_scan_buffer( char *base, yy_size_t size )
#else
YY_BUFFER_STATE yy_scan_buffer( base, size )
char *base;
yy_size_t size;
#endif
	{
	YY_BUFFER_STATE b;

	if ( size < 2 ||
	     base[size-2] != YY_END_OF_BUFFER_CHAR ||
	     base[size-1] != YY_END_OF_BUFFER_CHAR )
		/* They forgot to leave room for the EOB's. */
		return 0;

	b = (YY_BUFFER_STATE) yy_flex_alloc( sizeof( struct yy_buffer_state ) );
	if ( ! b )
		YY_FATAL_ERROR( "out of dynamic memory in yy_scan_buffer()" );

	b->yy_buf_size = size - 2;	/* "- 2" to take care of EOB's */
	b->yy_buf_pos = b->yy_ch_buf = base;
	b->yy_is_our_buffer = 0;
	b->yy_input_file = 0;
	b->yy_n_chars = b->yy_buf_size;
	b->yy_is_interactive = 0;
	b->yy_at_bol = 1;
	b->yy_fill_buffer = 0;
	b->yy_buffer_status = YY_BUFFER_NEW;

	yy_switch_to_buffer( b );

	return b;
	}
#endif


#ifndef YY_NO_SCAN_STRING
#ifdef YY_USE_PROTOS
YY_BUFFER_STATE yy_scan_string( yyconst char *yy_str )
#else
YY_BUFFER_STATE yy_scan_string( yy_str )
yyconst char *yy_str;
#endif
	{
	int len;
	for ( len = 0; yy_str[len]; ++len )
		;

	return yy_scan_bytes( yy_str, len );
	}
#endif


#ifndef YY_NO_SCAN_BYTES
#ifdef YY_USE_PROTOS
YY_BUFFER_STATE yy_scan_bytes( yyconst char *bytes, int len )
#else
YY_BUFFER_STATE yy_scan_bytes( bytes, len )
yyconst char *bytes;
int len;
#endif
	{
	YY_BUFFER_STATE b;
	char *buf;
	yy_size_t n;
	int i;

	/* Get memory for full buffer, including space for trailing EOB's. */
	n = len + 2;
	buf = (char *) yy_flex_alloc( n );
	if ( ! buf )
		YY_FATAL_ERROR( "out of dynamic memory in yy_scan_bytes()" );

	for ( i = 0; i < len; ++i )
		buf[i] = bytes[i];

	buf[len] = buf[len+1] = YY_END_OF_BUFFER_CHAR;

	b = yy_scan_buffer( buf, n );
	if ( ! b )
		YY_FATAL_ERROR( "bad buffer in yy_scan_bytes()" );

	/* It's okay to grow etc. this buffer, and we should throw it
	 * away when we're done.
	 */
	b->yy_is_our_buffer = 1;

	return b;
	}
#endif


#ifndef YY_NO_PUSH_STATE
#ifdef YY_USE_PROTOS
static void yy_push_state( int new_state )
#else
static void yy_push_state( new_state )
int new_state;
#endif
	{
	if ( yy_start_stack_ptr >= yy_start_stack_depth )
		{
		yy_size_t new_size;

		yy_start_stack_depth += YY_START_STACK_INCR;
		new_size = yy_start_stack_depth * sizeof( int );

		if ( ! yy_start_stack )
			yy_start_stack = (int *) yy_flex_alloc( new_size );

		else
			yy_start_stack = (int *) yy_flex_realloc(
					(void *) yy_start_stack, new_size );

		if ( ! yy_start_stack )
			YY_FATAL_ERROR(
			"out of memory expanding start-condition stack" );
		}

	yy_start_stack[yy_start_stack_ptr++] = YY_START;

	BEGIN(new_state);
	}
#endif


#ifndef YY_NO_POP_STATE
static void yy_pop_state()
	{
	if ( --yy_start_stack_ptr < 0 )
		YY_FATAL_ERROR( "start-condition stack underflow" );

	BEGIN(yy_start_stack[yy_start_stack_ptr]);
	}
#endif


#ifndef YY_NO_TOP_STATE
static int yy_top_state()
	{
	return yy_start_stack[yy_start_stack_ptr - 1];
	}
#endif

#ifndef YY_EXIT_FAILURE
#define YY_EXIT_FAILURE 2
#endif

#ifdef YY_USE_PROTOS
static void yy_fatal_error( yyconst char msg[] )
#else
static void yy_fatal_error( msg )
char msg[];
#endif
	{
	(void) fprintf( stderr, "%s\n", msg );
	exit( YY_EXIT_FAILURE );
	}



/* Redefine yyless() so it works in section 3 code. */

#undef yyless
#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up yytext. */ \
		yytext[yyleng] = yy_hold_char; \
		yy_c_buf_p = yytext + n; \
		yy_hold_char = *yy_c_buf_p; \
		*yy_c_buf_p = '\0'; \
		yyleng = n; \
		} \
	while ( 0 )


/* Internal utility routines. */

#ifndef yytext_ptr
#ifdef YY_USE_PROTOS
static void yy_flex_strncpy( char *s1, yyconst char *s2, int n )
#else
static void yy_flex_strncpy( s1, s2, n )
char *s1;
yyconst char *s2;
int n;
#endif
	{
	register int i;
	for ( i = 0; i < n; ++i )
		s1[i] = s2[i];
	}
#endif

#ifdef YY_NEED_STRLEN
#ifdef YY_USE_PROTOS
static int yy_flex_strlen( yyconst char *s )
#else
static int yy_flex_strlen( s )
yyconst char *s;
#endif
	{
	register int n;
	for ( n = 0; s[n]; ++n )
		;

	return n;
	}
#endif


#ifdef YY_USE_PROTOS
static void *yy_flex_alloc( yy_size_t size )
#else
static void *yy_flex_alloc( size )
yy_size_t size;
#endif
	{
	return (void *) malloc( size );
	}

#ifdef YY_USE_PROTOS
static void *yy_flex_realloc( void *ptr, yy_size_t size )
#else
static void *yy_flex_realloc( ptr, size )
void *ptr;
yy_size_t size;
#endif
	{
	/* The cast to (char *) in the following accommodates both
	 * implementations that use char* generic pointers, and those
	 * that use void* generic pointers.  It works with the latter
	 * because both ANSI C and C++ allow castless assignment from
	 * any pointer type to void*, and deal with argument conversions
	 * as though doing an assignment.
	 */
	return (void *) realloc( (char *) ptr, size );
	}

#ifdef YY_USE_PROTOS
static void yy_flex_free( void *ptr )
#else
static void yy_flex_free( ptr )
void *ptr;
#endif
	{
	free( ptr );
	}

#if YY_MAIN
int main()
	{
	yylex();
	return 0;
	}
#endif
#line 106 "itbl-lex.l"


#ifndef yywrap
int 
yywrap () 
  { 
    return 1; 
  }
#endif
@


1.2
log
@Merge conflicts, bringing our changes back in:
- extra $(SHELL) and sugar for make (so that files not mode +x still work)
- safer temp file handling
- our W^X binary layout changes in ld
- OpenBSD policy for library file selection in ld
- arm and m88k changes which were not merged in time for official 2.15
- bfd core file handling
- a couple typos

New for 2.15:
- ld(1) and as(1) manpages now generated at build time
- binutils/stabs.c reverted to use our in-tree libiberty for now
- we still use our VIA C3 crypto code over stock binutils, as it recognizes
  more instructions
- new emulations for OpenBSD on mips64 machines, to help OpenBSD/sgi
- relaxed %f# handling in gas on OpenBSD/sparc64 (same as was in 2.14)

Tested on all platforms by various people; special thanks to sturm@@ and
otto@@.
@
text
@d4 1
a4 1
 * $Header: /cvs/src/src/gas/Attic/itbl-lex.c,v 1.1.12.1 2004/04/09 19:32:17 drow Exp $
@


1.1
log
@Initial revision
@
text
@d4 1
a4 1
 * $Header: /home/daffy/u0/vern/flex/RCS/flex.skl,v 2.85 95/04/24 10:48:47 vern Exp $
d12 1
a12 1

d25 1
d27 1
d67 1
d132 1
d242 1
a242 1
YY_BUFFER_STATE yy_scan_string YY_PROTO(( yyconst char *str ));
d405 1
d407 1
a407 1
#line 1 "./itbl-lex.l"
d410 1
a410 1
   Copyright (C) 1997  Free Software Foundation, Inc.
d428 1
a428 1
#line 22 "./itbl-lex.l"
d432 2
a433 2
#include <ctype.h>
#include "itbl-parse.h"
d444 1
a444 1
#line 440 "lex.yy.c"
d466 4
d544 14
a557 3
	else if ( ((result = fread( buf, 1, max_size, yyin )) == 0) \
		  && ferror( yyin ) ) \
		YY_FATAL_ERROR( "input in flex scanner failed" );
d606 1
a606 1
#line 44 "./itbl-lex.l"
d609 1
a609 1
#line 590 "lex.yy.c"
d694 1
a694 1
#line 46 "./itbl-lex.l"
d701 1
a701 1
#line 49 "./itbl-lex.l"
d708 1
a708 1
#line 52 "./itbl-lex.l"
d715 1
a715 1
#line 55 "./itbl-lex.l"
d722 1
a722 1
#line 58 "./itbl-lex.l"
d729 1
a729 1
#line 61 "./itbl-lex.l"
d736 1
a736 1
#line 64 "./itbl-lex.l"
d745 1
a745 1
#line 69 "./itbl-lex.l"
d754 1
a754 1
#line 74 "./itbl-lex.l"
d763 1
a763 1
#line 79 "./itbl-lex.l"
d772 1
a772 1
#line 84 "./itbl-lex.l"
d787 1
a787 1
#line 95 "./itbl-lex.l"
d796 1
a796 1
#line 100 "./itbl-lex.l"
d802 1
a802 1
#line 102 "./itbl-lex.l"
d810 1
a810 1
#line 106 "./itbl-lex.l"
d813 1
a813 1
#line 794 "lex.yy.c"
d824 1
d970 1
a970 1
			/* We matched a singled characater, the EOB, so
d997 1
a997 1
		yy_n_chars = 0;
d1052 2
d1178 2
a1179 1
		yy_n_chars = yy_current_buffer->yy_buf_size;
d1217 1
a1217 1
			yytext_ptr = yy_c_buf_p;
d1222 16
a1240 3
						{
						yy_c_buf_p =
						yytext_ptr + YY_MORE_ADJ;
a1241 1
						}
d1253 1
a1253 1
					yy_c_buf_p = yytext_ptr + YY_MORE_ADJ;
a1254 9

				case EOB_ACT_LAST_MATCH:
#ifdef __cplusplus
					YY_FATAL_ERROR(
					"unexpected last match in yyinput()" );
#else
					YY_FATAL_ERROR(
					"unexpected last match in input()" );
#endif
d1377 3
d1385 1
d1422 3
d1484 1
a1484 1
YY_BUFFER_STATE yy_scan_string( yyconst char *str )
d1486 2
a1487 2
YY_BUFFER_STATE yy_scan_string( str )
yyconst char *str;
d1491 1
a1491 1
	for ( len = 0; str[len]; ++len )
d1494 1
a1494 1
	return yy_scan_bytes( str, len );
d1615 1
a1615 1
		yy_c_buf_p = yytext + n - YY_MORE_ADJ; \
d1641 16
d1703 1
a1703 1
#line 106 "./itbl-lex.l"
d1706 1
d1712 1
@


1.1.1.1
log
@Import of binutils-2.8.1 from Cygnus/FSF
@
text
@@


1.1.1.2
log
@Import binutils-2.10
- only the binutils package (no gdb here)
- don't import libiberty and texinfo, they are elsewhere
- remove all .info* generated files
@
text
@d4 1
a4 1
 * $Header: /cvs/src/src/gas/Attic/itbl-lex.c,v 1.1.2.1 2000/05/31 12:27:13 pb Exp $
a128 1
		YY_RESTORE_YY_MORE_OFFSET \
d238 1
a238 1
YY_BUFFER_STATE yy_scan_string YY_PROTO(( yyconst char *yy_str ));
a400 1
#define YY_RESTORE_YY_MORE_OFFSET
d402 1
a402 1
#line 1 "itbl-lex.l"
d423 1
a423 1
#line 22 "itbl-lex.l"
d439 1
a439 1
#line 442 "lex.yy.c"
a460 4
#ifdef YY_NEED_STRLEN
static int yy_flex_strlen YY_PROTO(( yyconst char * ));
#endif

d586 1
a586 1
#line 44 "itbl-lex.l"
d589 1
a589 1
#line 596 "lex.yy.c"
d674 1
a674 1
#line 46 "itbl-lex.l"
d681 1
a681 1
#line 49 "itbl-lex.l"
d688 1
a688 1
#line 52 "itbl-lex.l"
d695 1
a695 1
#line 55 "itbl-lex.l"
d702 1
a702 1
#line 58 "itbl-lex.l"
d709 1
a709 1
#line 61 "itbl-lex.l"
d716 1
a716 1
#line 64 "itbl-lex.l"
d725 1
a725 1
#line 69 "itbl-lex.l"
d734 1
a734 1
#line 74 "itbl-lex.l"
d743 1
a743 1
#line 79 "itbl-lex.l"
d752 1
a752 1
#line 84 "itbl-lex.l"
d767 1
a767 1
#line 95 "itbl-lex.l"
d776 1
a776 1
#line 100 "itbl-lex.l"
d782 1
a782 1
#line 102 "itbl-lex.l"
d790 1
a790 1
#line 106 "itbl-lex.l"
d793 1
a793 1
#line 800 "lex.yy.c"
a803 1
		YY_RESTORE_YY_MORE_OFFSET
d949 1
a949 1
			/* We matched a single character, the EOB, so
d976 1
a976 1
		yy_current_buffer->yy_n_chars = yy_n_chars = 0;
a1030 2

		yy_current_buffer->yy_n_chars = yy_n_chars;
d1155 1
a1155 2
		yy_current_buffer->yy_n_chars =
			yy_n_chars = yy_current_buffer->yy_buf_size;
d1193 1
a1193 1
			int offset = yy_c_buf_p - yytext_ptr;
a1197 16
				case EOB_ACT_LAST_MATCH:
					/* This happens because yy_g_n_b()
					 * sees that we've accumulated a
					 * token and flags that we need to
					 * try matching the token before
					 * proceeding.  But for input(),
					 * there's no matching to consider.
					 * So convert the EOB_ACT_LAST_MATCH
					 * to EOB_ACT_END_OF_FILE.
					 */

					/* Reset buffer status. */
					yyrestart( yyin );

					/* fall through */

d1201 3
d1205 1
d1217 1
a1217 1
					yy_c_buf_p = yytext_ptr + offset;
d1219 9
a1390 3
	if ( ! b )
		return;

d1450 1
a1450 1
YY_BUFFER_STATE yy_scan_string( yyconst char *yy_str )
d1452 2
a1453 2
YY_BUFFER_STATE yy_scan_string( yy_str )
yyconst char *yy_str;
d1457 1
a1457 1
	for ( len = 0; yy_str[len]; ++len )
d1460 1
a1460 1
	return yy_scan_bytes( yy_str, len );
d1581 1
a1581 1
		yy_c_buf_p = yytext + n; \
a1606 16
#ifdef YY_NEED_STRLEN
#ifdef YY_USE_PROTOS
static int yy_flex_strlen( yyconst char *s )
#else
static int yy_flex_strlen( s )
yyconst char *s;
#endif
	{
	register int n;
	for ( n = 0; s[n]; ++n )
		;

	return n;
	}
#endif

d1653 1
a1653 1
#line 106 "itbl-lex.l"
a1655 1
#ifndef yywrap
a1660 1
#endif
@


1.1.1.3
log
@Import binutils-2.11.2
- only the binutils package (no gdb here)
- don't import libiberty and texinfo, they are elsewhere
- remove all .info* generated files
@
text
@d4 1
a4 1
 * $Header: /cvs/src/src/gas/Attic/itbl-lex.c,v 1.1.4.2 2001/06/10 15:37:28 pb Exp $
d407 1
a407 1
   Copyright 1997, 1998 Free Software Foundation, Inc.
@


1.1.1.4
log
@import binutils 2.14 (excluding testsuites, .info files, and .po files)
@
text
@d1 1
d3 3
a5 5
#line 3 "lex.yy.c"

#define  YY_INT_ALIGNED short int

/* A lexical scanner generated by flex */
a9 4
#define YY_FLEX_SUBMINOR_VERSION 31
#if YY_FLEX_SUBMINOR_VERSION > 0
#define FLEX_BETA
#endif
a10 3
/* First, we deal with  platform-specific or compiler-specific issues. */

/* begin standard C headers. */
a11 3
#include <string.h>
#include <errno.h>
#include <stdlib.h>
a12 1
/* end standard C headers. */
d14 4
a17 48
/* flex integer type definitions */

#ifndef FLEXINT_H
#define FLEXINT_H

/* C99 systems have <inttypes.h>. Non-C99 systems may or may not. */

#if defined __STDC_VERSION__ && __STDC_VERSION__ >= 199901L
#include <inttypes.h>
typedef int8_t flex_int8_t;
typedef uint8_t flex_uint8_t;
typedef int16_t flex_int16_t;
typedef uint16_t flex_uint16_t;
typedef int32_t flex_int32_t;
typedef uint32_t flex_uint32_t;
#else
typedef signed char flex_int8_t;
typedef short int flex_int16_t;
typedef int flex_int32_t;
typedef unsigned char flex_uint8_t; 
typedef unsigned short int flex_uint16_t;
typedef unsigned int flex_uint32_t;
#endif /* ! C99 */

/* Limits of integral types. */
#ifndef INT8_MIN
#define INT8_MIN               (-128)
#endif
#ifndef INT16_MIN
#define INT16_MIN              (-32767-1)
#endif
#ifndef INT32_MIN
#define INT32_MIN              (-2147483647-1)
#endif
#ifndef INT8_MAX
#define INT8_MAX               (127)
#endif
#ifndef INT16_MAX
#define INT16_MAX              (32767)
#endif
#ifndef INT32_MAX
#define INT32_MAX              (2147483647)
#endif
#ifndef UINT8_MAX
#define UINT8_MAX              (255U)
#endif
#ifndef UINT16_MAX
#define UINT16_MAX             (65535U)
a18 2
#ifndef UINT32_MAX
#define UINT32_MAX             (4294967295U)
a20 1
#endif /* ! FLEXINT_H */
d24 6
d37 1
d43 9
d58 7
d79 1
a79 1
#define BEGIN (yy_start) = 1 + 2 *
d85 1
a85 1
#define YY_START (((yy_start) - 1) / 2)
d92 1
a92 1
#define YY_NEW_FILE yyrestart(yyin  )
a96 1
#ifndef YY_BUF_SIZE
a97 1
#endif
a98 2
#ifndef YY_TYPEDEF_YY_BUFFER_STATE
#define YY_TYPEDEF_YY_BUFFER_STATE
a99 1
#endif
a101 1

d108 16
a123 3
    #define YY_LESS_LINENO(n)
    
/* Return all but the first "n" matched characters back to the input stream. */
d128 1
a128 3
        int yyless_macro_arg = (n); \
        YY_LESS_LINENO(yyless_macro_arg);\
		*yy_cp = (yy_hold_char); \
d130 1
a130 1
		(yy_c_buf_p) = yy_cp = yy_bp + yyless_macro_arg - YY_MORE_ADJ; \
d135 1
a135 1
#define unput(c) yyunput( c, (yytext_ptr)  )
d141 1
a142 4
#ifndef YY_TYPEDEF_YY_SIZE_T
#define YY_TYPEDEF_YY_SIZE_T
typedef unsigned int yy_size_t;
#endif
a143 2
#ifndef YY_STRUCT_YY_BUFFER_STATE
#define YY_STRUCT_YY_BUFFER_STATE
a179 3
    int yy_bs_lineno; /**< The line count. */
    int yy_bs_column; /**< The column count. */
    
a185 1

a198 1

a199 1
#endif /* !YY_STRUCT_YY_BUFFER_STATE */
d201 1
a201 4
/* Stack of input buffers. */
static size_t yy_buffer_stack_top = 0; /**< index of top of stack. */
static size_t yy_buffer_stack_max = 0; /**< capacity of stack. */
static YY_BUFFER_STATE * yy_buffer_stack = 0; /**< Stack as an array. */
a205 2
 *
 * Returns the top of the stack, or NULL.
d207 1
a207 3
#define YY_CURRENT_BUFFER ( (yy_buffer_stack) \
                          ? (yy_buffer_stack)[(yy_buffer_stack_top)] \
                          : NULL)
a208 4
/* Same as previous macro, but useful when we know that the buffer stack is not
 * NULL or when we need an lvalue. For internal use only.
 */
#define YY_CURRENT_BUFFER_LVALUE (yy_buffer_stack)[(yy_buffer_stack_top)]
d212 1
d214 2
d228 17
a244 21
void yyrestart (FILE *input_file  );
void yy_switch_to_buffer (YY_BUFFER_STATE new_buffer  );
YY_BUFFER_STATE yy_create_buffer (FILE *file,int size  );
void yy_delete_buffer (YY_BUFFER_STATE b  );
void yy_flush_buffer (YY_BUFFER_STATE b  );
void yypush_buffer_state (YY_BUFFER_STATE new_buffer  );
void yypop_buffer_state (void );

static void yyensure_buffer_stack (void );
static void yy_load_buffer_state (void );
static void yy_init_buffer (YY_BUFFER_STATE b,FILE *file  );

#define YY_FLUSH_BUFFER yy_flush_buffer(YY_CURRENT_BUFFER )

YY_BUFFER_STATE yy_scan_buffer (char *base,yy_size_t size  );
YY_BUFFER_STATE yy_scan_string (yyconst char *yy_str  );
YY_BUFFER_STATE yy_scan_bytes (yyconst char *bytes,int len  );

void *yyalloc (yy_size_t  );
void *yyrealloc (void *,yy_size_t  );
void yyfree (void *  );
d250 3
a252 6
	if ( ! YY_CURRENT_BUFFER ){ \
        yyensure_buffer_stack (); \
		YY_CURRENT_BUFFER_LVALUE =    \
            yy_create_buffer(yyin,YY_BUF_SIZE ); \
	} \
	YY_CURRENT_BUFFER_LVALUE->yy_is_interactive = is_interactive; \
d257 3
a259 6
	if ( ! YY_CURRENT_BUFFER ){\
        yyensure_buffer_stack (); \
		YY_CURRENT_BUFFER_LVALUE =    \
            yy_create_buffer(yyin,YY_BUF_SIZE ); \
	} \
	YY_CURRENT_BUFFER_LVALUE->yy_at_bol = at_bol; \
d262 1
a262 3
#define YY_AT_BOL() (YY_CURRENT_BUFFER_LVALUE->yy_at_bol)

/* Begin user sect3 */
a264 1

a265 1

a266 5

extern int yylineno;

int yylineno = 1;

d270 4
a273 4
static yy_state_type yy_get_previous_state (void );
static yy_state_type yy_try_NUL_trans (yy_state_type current_state  );
static int yy_get_next_buffer (void );
static void yy_fatal_error (yyconst char msg[]  );
d279 3
a281 3
	(yytext_ptr) = yy_bp; \
	yyleng = (size_t) (yy_cp - yy_bp); \
	(yy_hold_char) = *yy_cp; \
d283 1
a283 1
	(yy_c_buf_p) = yy_cp;
d287 1
a287 8
/* This struct is not used in this scanner,
   but its presence is necessary. */
struct yy_trans_info
	{
	flex_int32_t yy_verify;
	flex_int32_t yy_nxt;
	};
static yyconst flex_int16_t yy_accept[60] =
d297 1
a297 1
static yyconst flex_int32_t yy_ec[256] =
d329 1
a329 1
static yyconst flex_int32_t yy_meta[33] =
d337 1
a337 1
static yyconst flex_int16_t yy_base[62] =
d348 1
a348 1
static yyconst flex_int16_t yy_def[62] =
d359 1
a359 1
static yyconst flex_int16_t yy_nxt[117] =
d376 1
a376 1
static yyconst flex_int16_t yy_chk[117] =
a395 3
extern int yy_flex_debug;
int yy_flex_debug = 0;

d405 1
d407 1
a407 1
   Copyright 1997, 1998, 2001 Free Software Foundation, Inc.
d429 2
a430 2

#include <itbl-parse.h>
d441 1
a441 13
#line 520 "lex.yy.c"

#define INITIAL 0

/* Special case for "unistd.h", since it is non-ANSI. We include it way
 * down here because we want the user's section 1 to have been scanned first.
 * The user has a chance to override it with an option.
 */
#include <unistd.h>

#ifndef YY_EXTRA_TYPE
#define YY_EXTRA_TYPE void *
#endif
d449 1
a449 1
extern "C" int yywrap (void );
d451 1
a451 1
extern int yywrap (void );
d455 4
a458 2
    static void yyunput (int c,char *buf_ptr  );
    
d460 1
a460 1
static void yy_flex_strncpy (char *,yyconst char *,int );
d464 1
a464 1
static int yy_flex_strlen (yyconst char * );
d468 20
a488 2
#ifdef __cplusplus
static int yyinput (void );
d490 3
a492 1
static int input (void );
d495 13
d516 1
d529 1
a529 1
	if ( YY_CURRENT_BUFFER_LVALUE->yy_is_interactive ) \
d531 1
a531 2
		int c = '*'; \
		size_t n; \
d541 3
a543 16
	else \
		{ \
		errno=0; \
		while ( (result = fread(buf, 1, max_size, yyin))==0 && ferror(yyin)) \
			{ \
			if( errno != EINTR) \
				{ \
				YY_FATAL_ERROR( "input in flex scanner failed" ); \
				break; \
				} \
			errno=0; \
			clearerr(yyin); \
			} \
		}\
\

a563 2
/* end tables serialization structures and prototypes */

d568 2
a569 6
#define YY_DECL_IS_OURS 1

extern int yylex (void);

#define YY_DECL int yylex (void)
#endif /* !YY_DECL */
a585 2
/** The main scanner function which does all the work.
 */
d587 1
a587 1
{
d591 1
a591 1
    
d595 1
a595 1
#line 672 "lex.yy.c"
d597 1
a597 1
	if ( (yy_init) )
d599 1
a599 1
		(yy_init) = 0;
d605 2
a606 2
		if ( ! (yy_start) )
			(yy_start) = 1;	/* first start state */
d614 3
a616 5
		if ( ! YY_CURRENT_BUFFER ) {
			yyensure_buffer_stack ();
			YY_CURRENT_BUFFER_LVALUE =
				yy_create_buffer(yyin,YY_BUF_SIZE );
		}
d618 1
a618 1
		yy_load_buffer_state( );
d623 1
a623 1
		yy_cp = (yy_c_buf_p);
d626 1
a626 1
		*yy_cp = (yy_hold_char);
d633 1
a633 1
		yy_current_state = (yy_start);
d640 2
a641 2
				(yy_last_accepting_state) = yy_current_state;
				(yy_last_accepting_cpos) = yy_cp;
d658 2
a659 2
			yy_cp = (yy_last_accepting_cpos);
			yy_current_state = (yy_last_accepting_state);
d665 1
d668 1
d673 3
a675 3
			*yy_cp = (yy_hold_char);
			yy_cp = (yy_last_accepting_cpos);
			yy_current_state = (yy_last_accepting_state);
a771 1
/* rule 12 can match eol */
d799 1
a799 1
#line 877 "lex.yy.c"
d806 1
a806 1
		int yy_amount_of_matched_text = (int) (yy_cp - (yytext_ptr)) - 1;
d809 1
a809 1
		*yy_cp = (yy_hold_char);
d812 1
a812 1
		if ( YY_CURRENT_BUFFER_LVALUE->yy_buffer_status == YY_BUFFER_NEW )
d818 1
a818 1
			 * consistency between YY_CURRENT_BUFFER and our
d823 3
a825 3
			(yy_n_chars) = YY_CURRENT_BUFFER_LVALUE->yy_n_chars;
			YY_CURRENT_BUFFER_LVALUE->yy_input_file = yyin;
			YY_CURRENT_BUFFER_LVALUE->yy_buffer_status = YY_BUFFER_NORMAL;
d835 1
a835 1
		if ( (yy_c_buf_p) <= &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)] )
d839 1
a839 1
			(yy_c_buf_p) = (yytext_ptr) + yy_amount_of_matched_text;
d841 1
a841 1
			yy_current_state = yy_get_previous_state(  );
d854 1
a854 1
			yy_bp = (yytext_ptr) + YY_MORE_ADJ;
d859 1
a859 1
				yy_cp = ++(yy_c_buf_p);
d866 1
a866 1
				yy_cp = (yy_c_buf_p);
d871 1
a871 1
		else switch ( yy_get_next_buffer(  ) )
d875 1
a875 1
				(yy_did_buffer_switch_on_eof) = 0;
d877 1
a877 1
				if ( yywrap( ) )
d888 1
a888 1
					(yy_c_buf_p) = (yytext_ptr) + YY_MORE_ADJ;
d896 1
a896 1
					if ( ! (yy_did_buffer_switch_on_eof) )
d903 2
a904 2
				(yy_c_buf_p) =
					(yytext_ptr) + yy_amount_of_matched_text;
d906 1
a906 1
				yy_current_state = yy_get_previous_state(  );
d908 2
a909 2
				yy_cp = (yy_c_buf_p);
				yy_bp = (yytext_ptr) + YY_MORE_ADJ;
d913 2
a914 2
				(yy_c_buf_p) =
				&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)];
d916 1
a916 1
				yy_current_state = yy_get_previous_state(  );
d918 2
a919 2
				yy_cp = (yy_c_buf_p);
				yy_bp = (yytext_ptr) + YY_MORE_ADJ;
d930 2
a931 1
} /* end of yylex */
d940 5
a944 4
static int yy_get_next_buffer (void)
{
    	register char *dest = YY_CURRENT_BUFFER_LVALUE->yy_ch_buf;
	register char *source = (yytext_ptr);
d948 1
a948 1
	if ( (yy_c_buf_p) > &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars) + 1] )
d952 1
a952 1
	if ( YY_CURRENT_BUFFER_LVALUE->yy_fill_buffer == 0 )
d954 1
a954 1
		if ( (yy_c_buf_p) - (yytext_ptr) - YY_MORE_ADJ == 1 )
d974 1
a974 1
	number_to_move = (int) ((yy_c_buf_p) - (yytext_ptr)) - 1;
d979 1
a979 1
	if ( YY_CURRENT_BUFFER_LVALUE->yy_buffer_status == YY_BUFFER_EOF_PENDING )
d983 1
a983 1
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars) = 0;
d987 2
a988 2
			size_t num_to_read =
			YY_CURRENT_BUFFER_LVALUE->yy_buf_size - number_to_move - 1;
d992 4
d998 1
a998 1
			YY_BUFFER_STATE b = YY_CURRENT_BUFFER;
d1001 1
a1001 1
				(int) ((yy_c_buf_p) - b->yy_ch_buf);
d1014 2
a1015 1
					yyrealloc((void *) b->yy_ch_buf,b->yy_buf_size + 2  );
d1025 1
a1025 1
			(yy_c_buf_p) = &b->yy_ch_buf[yy_c_buf_p_offset];
d1027 1
a1027 1
			num_to_read = YY_CURRENT_BUFFER_LVALUE->yy_buf_size -
d1029 1
a1029 1

d1036 2
a1037 2
		YY_INPUT( (&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[number_to_move]),
			(yy_n_chars), num_to_read );
d1039 1
a1039 1
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars);
d1042 1
a1042 1
	if ( (yy_n_chars) == 0 )
d1047 1
a1047 1
			yyrestart(yyin  );
d1053 1
a1053 1
			YY_CURRENT_BUFFER_LVALUE->yy_buffer_status =
d1061 3
a1063 3
	(yy_n_chars) += number_to_move;
	YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)] = YY_END_OF_BUFFER_CHAR;
	YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars) + 1] = YY_END_OF_BUFFER_CHAR;
d1065 1
a1065 1
	(yytext_ptr) = &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[0];
d1068 2
a1069 1
}
d1073 2
a1074 2
    static yy_state_type yy_get_previous_state (void)
{
a1076 2
    
	yy_current_state = (yy_start);
d1078 3
a1080 1
	for ( yy_cp = (yytext_ptr) + YY_MORE_ADJ; yy_cp < (yy_c_buf_p); ++yy_cp )
d1085 2
a1086 2
			(yy_last_accepting_state) = yy_current_state;
			(yy_last_accepting_cpos) = yy_cp;
d1098 2
a1099 1
}
d1106 8
a1113 2
    static yy_state_type yy_try_NUL_trans  (yy_state_type yy_current_state )
{
d1115 1
a1115 1
    	register char *yy_cp = (yy_c_buf_p);
d1120 2
a1121 2
		(yy_last_accepting_state) = yy_current_state;
		(yy_last_accepting_cpos) = yy_cp;
d1133 1
a1133 1
}
d1135 11
a1145 5
    static void yyunput (int c, register char * yy_bp )
{
	register char *yy_cp;
    
    yy_cp = (yy_c_buf_p);
d1148 1
a1148 1
	*yy_cp = (yy_hold_char);
d1150 1
a1150 1
	if ( yy_cp < YY_CURRENT_BUFFER_LVALUE->yy_ch_buf + 2 )
d1153 3
a1155 3
		register int number_to_move = (yy_n_chars) + 2;
		register char *dest = &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[
					YY_CURRENT_BUFFER_LVALUE->yy_buf_size + 2];
d1157 1
a1157 1
				&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[number_to_move];
d1159 1
a1159 1
		while ( source > YY_CURRENT_BUFFER_LVALUE->yy_ch_buf )
d1164 2
a1165 2
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars =
			(yy_n_chars) = YY_CURRENT_BUFFER_LVALUE->yy_buf_size;
d1167 1
a1167 1
		if ( yy_cp < YY_CURRENT_BUFFER_LVALUE->yy_ch_buf + 2 )
a1172 4
	(yytext_ptr) = yy_bp;
	(yy_hold_char) = *yy_cp;
	(yy_c_buf_p) = yy_cp;
}
d1174 7
a1180 1
#ifndef YY_NO_INPUT
d1182 1
a1182 1
    static int yyinput (void)
d1184 1
a1184 1
    static int input  (void)
d1186 2
d1189 1
a1189 4
{
	int c;
    
	*(yy_c_buf_p) = (yy_hold_char);
d1191 1
a1191 1
	if ( *(yy_c_buf_p) == YY_END_OF_BUFFER_CHAR )
d1197 1
a1197 1
		if ( (yy_c_buf_p) < &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)] )
d1199 1
a1199 1
			*(yy_c_buf_p) = '\0';
d1203 2
a1204 2
			int offset = (yy_c_buf_p) - (yytext_ptr);
			++(yy_c_buf_p);
d1206 1
a1206 1
			switch ( yy_get_next_buffer(  ) )
d1220 1
a1220 1
					yyrestart(yyin );
d1222 1
a1222 1
					/*FALLTHROUGH*/
d1226 1
a1226 1
					if ( yywrap( ) )
d1229 1
a1229 1
					if ( ! (yy_did_buffer_switch_on_eof) )
d1239 1
a1239 1
					(yy_c_buf_p) = (yytext_ptr) + offset;
d1245 4
a1248 3
	c = *(unsigned char *) (yy_c_buf_p);	/* cast for 8-bit char's */
	*(yy_c_buf_p) = '\0';	/* preserve yytext */
	(yy_hold_char) = *++(yy_c_buf_p);
d1251 1
a1251 2
}
#endif	/* ifndef YY_NO_INPUT */
d1253 13
a1265 12
/** Immediately switch to a different input stream.
 * @@param input_file A readable stream.
 * 
 * @@note This function does not reset the start condition to @@c INITIAL .
 */
    void yyrestart  (FILE * input_file )
{
    
	if ( ! YY_CURRENT_BUFFER ){
        yyensure_buffer_stack ();
		YY_CURRENT_BUFFER_LVALUE =
            yy_create_buffer(yyin,YY_BUF_SIZE );
d1268 9
a1276 18
	yy_init_buffer(YY_CURRENT_BUFFER,input_file );
	yy_load_buffer_state( );
}

/** Switch to a different input buffer.
 * @@param new_buffer The new input buffer.
 * 
 */
    void yy_switch_to_buffer  (YY_BUFFER_STATE  new_buffer )
{
    
	/* TODO. We should be able to replace this entire function body
	 * with
	 *		yypop_buffer_state();
	 *		yypush_buffer_state(new_buffer);
     */
	yyensure_buffer_stack ();
	if ( YY_CURRENT_BUFFER == new_buffer )
d1279 1
a1279 1
	if ( YY_CURRENT_BUFFER )
d1282 3
a1284 3
		*(yy_c_buf_p) = (yy_hold_char);
		YY_CURRENT_BUFFER_LVALUE->yy_buf_pos = (yy_c_buf_p);
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars);
d1287 2
a1288 2
	YY_CURRENT_BUFFER_LVALUE = new_buffer;
	yy_load_buffer_state( );
d1295 2
a1296 2
	(yy_did_buffer_switch_on_eof) = 1;
}
d1298 22
a1319 16
static void yy_load_buffer_state  (void)
{
    	(yy_n_chars) = YY_CURRENT_BUFFER_LVALUE->yy_n_chars;
	(yytext_ptr) = (yy_c_buf_p) = YY_CURRENT_BUFFER_LVALUE->yy_buf_pos;
	yyin = YY_CURRENT_BUFFER_LVALUE->yy_input_file;
	(yy_hold_char) = *(yy_c_buf_p);
}

/** Allocate and initialize an input buffer state.
 * @@param file A readable stream.
 * @@param size The character buffer size in bytes. When in doubt, use @@c YY_BUF_SIZE.
 * 
 * @@return the allocated buffer state.
 */
    YY_BUFFER_STATE yy_create_buffer  (FILE * file, int  size )
{
d1321 2
a1322 2
    
	b = (YY_BUFFER_STATE) yyalloc(sizeof( struct yy_buffer_state )  );
d1331 1
a1331 1
	b->yy_ch_buf = (char *) yyalloc(b->yy_buf_size + 2  );
d1337 1
a1337 1
	yy_init_buffer(b,file );
d1340 2
a1341 1
}
d1343 7
a1349 7
/** Destroy the buffer.
 * @@param b a buffer created with yy_create_buffer()
 * 
 */
    void yy_delete_buffer (YY_BUFFER_STATE  b )
{
    
d1353 2
a1354 2
	if ( b == YY_CURRENT_BUFFER ) /* Not sure if we should pop here. */
		YY_CURRENT_BUFFER_LVALUE = (YY_BUFFER_STATE) 0;
d1357 5
a1361 1
		yyfree((void *) b->yy_ch_buf  );
d1363 13
a1375 2
	yyfree((void *) b  );
}
a1376 9
#ifndef __cplusplus
extern int isatty (int );
#endif /* __cplusplus */
    
/* Initializes or reinitializes a buffer.
 * This function is sometimes called more than once on the same buffer,
 * such as during a yyrestart() or at EOF.
 */
    static void yy_init_buffer  (YY_BUFFER_STATE  b, FILE * file )
d1378 2
a1379 4
{
	int oerrno = errno;
    
	yy_flush_buffer(b );
d1384 21
a1404 21
    /* If b is the current buffer, then yy_init_buffer was _probably_
     * called from yyrestart() or through yy_get_next_buffer.
     * In that case, we don't want to reset the lineno or column.
     */
    if (b != YY_CURRENT_BUFFER){
        b->yy_bs_lineno = 1;
        b->yy_bs_column = 0;
    }

        b->yy_is_interactive = file ? (isatty( fileno(file) ) > 0) : 0;
    
	errno = oerrno;
}

/** Discard all buffered characters. On the next scan, YY_INPUT will be called.
 * @@param b the buffer state to be flushed, usually @@c YY_CURRENT_BUFFER.
 * 
 */
    void yy_flush_buffer (YY_BUFFER_STATE  b )
{
    	if ( ! b )
d1421 2
a1422 53
	if ( b == YY_CURRENT_BUFFER )
		yy_load_buffer_state( );
}

/** Pushes the new state onto the stack. The new state becomes
 *  the current state. This function will allocate the stack
 *  if necessary.
 *  @@param new_buffer The new state.
 *  
 */
void yypush_buffer_state (YY_BUFFER_STATE new_buffer )
{
    	if (new_buffer == NULL)
		return;

	yyensure_buffer_stack();

	/* This block is copied from yy_switch_to_buffer. */
	if ( YY_CURRENT_BUFFER )
		{
		/* Flush out information for old buffer. */
		*(yy_c_buf_p) = (yy_hold_char);
		YY_CURRENT_BUFFER_LVALUE->yy_buf_pos = (yy_c_buf_p);
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars);
		}

	/* Only push if top exists. Otherwise, replace top. */
	if (YY_CURRENT_BUFFER)
		(yy_buffer_stack_top)++;
	YY_CURRENT_BUFFER_LVALUE = new_buffer;

	/* copied from yy_switch_to_buffer. */
	yy_load_buffer_state( );
	(yy_did_buffer_switch_on_eof) = 1;
}

/** Removes and deletes the top of the stack, if present.
 *  The next element becomes the new top.
 *  
 */
void yypop_buffer_state (void)
{
    	if (!YY_CURRENT_BUFFER)
		return;

	yy_delete_buffer(YY_CURRENT_BUFFER );
	YY_CURRENT_BUFFER_LVALUE = NULL;
	if ((yy_buffer_stack_top) > 0)
		--(yy_buffer_stack_top);

	if (YY_CURRENT_BUFFER) {
		yy_load_buffer_state( );
		(yy_did_buffer_switch_on_eof) = 1;
a1423 1
}
a1424 24
/* Allocates the stack if it does not exist.
 *  Guarantees space for at least one push.
 */
static void yyensure_buffer_stack (void)
{
	int num_to_alloc;
    
	if (!(yy_buffer_stack)) {

		/* First allocation is just for 2 elements, since we don't know if this
		 * scanner will even need a stack. We use 2 instead of 1 to avoid an
		 * immediate realloc on the next call.
         */
		num_to_alloc = 1;
		(yy_buffer_stack) = (struct yy_buffer_state**)yyalloc
								(num_to_alloc * sizeof(struct yy_buffer_state*)
								);
		
		memset((yy_buffer_stack), 0, num_to_alloc * sizeof(struct yy_buffer_state*));
				
		(yy_buffer_stack_max) = num_to_alloc;
		(yy_buffer_stack_top) = 0;
		return;
	}
d1426 10
a1435 4
	if ((yy_buffer_stack_top) >= ((yy_buffer_stack_max)) - 1){

		/* Increase the buffer to prepare for a possible push. */
		int grow_size = 8 /* arbitrary grow size */;
a1436 22
		num_to_alloc = (yy_buffer_stack_max) + grow_size;
		(yy_buffer_stack) = (struct yy_buffer_state**)yyrealloc
								((yy_buffer_stack),
								num_to_alloc * sizeof(struct yy_buffer_state*)
								);

		/* zero only the new slots.*/
		memset((yy_buffer_stack) + (yy_buffer_stack_max), 0, grow_size * sizeof(struct yy_buffer_state*));
		(yy_buffer_stack_max) = num_to_alloc;
	}
}

/** Setup the input buffer state to scan directly from a user-specified character buffer.
 * @@param base the character buffer
 * @@param size the size in bytes of the character buffer
 * 
 * @@return the newly allocated buffer state object. 
 */
YY_BUFFER_STATE yy_scan_buffer  (char * base, yy_size_t  size )
{
	YY_BUFFER_STATE b;
    
d1443 1
a1443 1
	b = (YY_BUFFER_STATE) yyalloc(sizeof( struct yy_buffer_state )  );
d1457 1
a1457 1
	yy_switch_to_buffer(b  );
d1460 2
a1461 1
}
d1463 27
a1489 23
/** Setup the input buffer state to scan a string. The next call to yylex() will
 * scan from a @@e copy of @@a str.
 * @@param str a NUL-terminated string to scan
 * 
 * @@return the newly allocated buffer state object.
 * @@note If you want to scan bytes that may contain NUL values, then use
 *       yy_scan_bytes() instead.
 */
YY_BUFFER_STATE yy_scan_string (yyconst char * str )
{
    
	return yy_scan_bytes(str,strlen(str) );
}

/** Setup the input buffer state to scan the given bytes. The next call to yylex() will
 * scan from a @@e copy of @@a bytes.
 * @@param bytes the byte buffer to scan
 * @@param len the number of bytes in the buffer pointed to by @@a bytes.
 * 
 * @@return the newly allocated buffer state object.
 */
YY_BUFFER_STATE yy_scan_bytes  (yyconst char * bytes, int  len )
{
d1494 1
a1494 1
    
d1497 1
a1497 1
	buf = (char *) yyalloc(n  );
d1506 1
a1506 1
	b = yy_scan_buffer(buf,n );
d1516 3
a1518 1
}
d1520 6
a1525 2
#ifndef YY_EXIT_FAILURE
#define YY_EXIT_FAILURE 2
d1527 7
d1535 6
a1540 5
static void yy_fatal_error (yyconst char* msg )
{
    	(void) fprintf( stderr, "%s\n", msg );
	exit( YY_EXIT_FAILURE );
}
d1542 4
a1545 1
/* Redefine yyless() so it works in section 3 code. */
d1547 1
a1547 14
#undef yyless
#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up yytext. */ \
        int yyless_macro_arg = (n); \
        YY_LESS_LINENO(yyless_macro_arg);\
		yytext[yyleng] = (yy_hold_char); \
		(yy_c_buf_p) = yytext + yyless_macro_arg; \
		(yy_hold_char) = *(yy_c_buf_p); \
		*(yy_c_buf_p) = '\0'; \
		yyleng = yyless_macro_arg; \
		} \
	while ( 0 )
d1549 3
a1551 1
/* Accessor  methods (get/set functions) to struct members. */
a1552 8
/** Get the current line number.
 * 
 */
int yyget_lineno  (void)
{
        
    return yylineno;
}
d1554 5
a1558 7
/** Get the input stream.
 * 
 */
FILE *yyget_in  (void)
{
        return yyin;
}
d1560 3
a1562 7
/** Get the output stream.
 * 
 */
FILE *yyget_out  (void)
{
        return yyout;
}
a1563 7
/** Get the length of the current token.
 * 
 */
int yyget_leng  (void)
{
        return yyleng;
}
d1565 6
a1570 3
/** Get the current token.
 * 
 */
d1572 3
a1574 4
char *yyget_text  (void)
{
        return yytext;
}
d1576 10
a1585 20
/** Set the current line number.
 * @@param line_number
 * 
 */
void yyset_lineno (int  line_number )
{
    
    yylineno = line_number;
}

/** Set the input stream. This does not discard the current
 * input buffer.
 * @@param in_str A readable stream.
 * 
 * @@see yy_switch_to_buffer
 */
void yyset_in (FILE *  in_str )
{
        yyin = in_str ;
}
a1586 4
void yyset_out (FILE *  out_str )
{
        yyout = out_str ;
}
a1587 4
int yyget_debug  (void)
{
        return yy_flex_debug;
}
d1589 1
a1589 4
void yyset_debug (int  bdebug )
{
        yy_flex_debug = bdebug ;
}
d1591 12
a1602 14
/* yylex_destroy is for both reentrant and non-reentrant scanners. */
int yylex_destroy  (void)
{
    
    /* Pop the buffer stack, destroying each element. */
	while(YY_CURRENT_BUFFER){
		yy_delete_buffer(YY_CURRENT_BUFFER  );
		YY_CURRENT_BUFFER_LVALUE = NULL;
		yypop_buffer_state();
	}

	/* Destroy the stack itself. */
	yyfree((yy_buffer_stack) );
	(yy_buffer_stack) = NULL;
a1603 2
    return 0;
}
d1605 1
a1605 3
/*
 * Internal utility routines.
 */
d1608 9
a1616 2
static void yy_flex_strncpy (char* s1, yyconst char * s2, int n )
{
d1618 1
a1618 1
    	for ( i = 0; i < n; ++i )
d1620 1
a1620 1
}
d1624 7
a1630 2
static int yy_flex_strlen (yyconst char * s )
{
d1632 1
a1632 1
    	for ( n = 0; s[n]; ++n )
d1636 1
a1636 1
}
d1639 8
a1646 2
void *yyalloc (yy_size_t  size )
{
d1648 1
a1648 1
}
d1650 8
a1657 2
void *yyrealloc  (void * ptr, yy_size_t  size )
{
d1666 1
a1666 1
}
d1668 9
a1676 4
void yyfree (void * ptr )
{
	free( (char *) ptr );	/* see yyrealloc() for (char *) cast */
}
d1678 6
a1683 13
#define YYTABLES_NAME "yytables"

#undef YY_NEW_FILE
#undef YY_FLUSH_BUFFER
#undef yy_set_bol
#undef yy_new_buffer
#undef yy_set_interactive
#undef yytext_ptr
#undef YY_DO_BEFORE_ACTION

#ifdef YY_DECL_IS_OURS
#undef YY_DECL_IS_OURS
#undef YY_DECL
a1687 1

a1694 1

@


1.1.1.5
log
@Binutils 2.15, with testsuites removed, and without gdb and libiberty.
@
text
@d1 5
a7 4
/* Scanner skeleton version:
 * $Header: /cvs/src/src/gas/Attic/itbl-lex.c,v 1.1.12.1 2004/04/09 19:32:17 drow Exp $
 */

d11 4
d16 3
d20 1
d22 5
d28 46
a73 4
/* cfront 1.2 defines "c_plusplus" instead of "__cplusplus" */
#ifdef c_plusplus
#ifndef __cplusplus
#define __cplusplus
d75 2
d79 1
a82 8
#include <stdlib.h>
#ifndef _WIN32
#include <unistd.h>
#endif

/* Use prototypes in function declarations. */
#define YY_USE_PROTOS

a89 1
#define YY_USE_PROTOS
a94 9
#ifdef __TURBOC__
 #pragma warn -rch
 #pragma warn -use
#include <io.h>
#include <stdlib.h>
#define YY_USE_CONST
#define YY_USE_PROTOS
#endif

a100 8

#ifdef YY_USE_PROTOS
#define YY_PROTO(proto) proto
#else
#define YY_PROTO(proto) ()
#endif


d115 1
a115 1
#define BEGIN yy_start = 1 + 2 *
d121 1
a121 1
#define YY_START ((yy_start - 1) / 2)
d128 1
a128 1
#define YY_NEW_FILE yyrestart( yyin )
d133 1
d135 1
d137 2
d140 1
d143 1
d150 3
a152 16
/* The funky do-while in the following #define is used to turn the definition
 * int a single C statement (which needs a semi-colon terminator).  This
 * avoids problems with code like:
 *
 * 	if ( condition_holds )
 *		yyless( 5 );
 *	else
 *		do_something_else();
 *
 * Prior to using the do-while the compiler would get upset at the
 * "else" because it interpreted the "if" statement as being all
 * done when it reached the ';' after the yyless() call.
 */

/* Return all but the first 'n' matched characters back to the input stream. */

d157 3
a159 1
		*yy_cp = yy_hold_char; \
d161 1
a161 1
		yy_c_buf_p = yy_cp = yy_bp + n - YY_MORE_ADJ; \
d166 1
a166 1
#define unput(c) yyunput( c, yytext_ptr )
d172 3
d176 1
d178 2
a179 1

d216 3
d225 1
d239 1
d241 1
d243 4
a246 1
static YY_BUFFER_STATE yy_current_buffer = 0;
d251 2
d254 3
a256 1
#define YY_CURRENT_BUFFER yy_current_buffer
d258 4
a264 1

a265 2


d278 21
a298 17
void yyrestart YY_PROTO(( FILE *input_file ));

void yy_switch_to_buffer YY_PROTO(( YY_BUFFER_STATE new_buffer ));
void yy_load_buffer_state YY_PROTO(( void ));
YY_BUFFER_STATE yy_create_buffer YY_PROTO(( FILE *file, int size ));
void yy_delete_buffer YY_PROTO(( YY_BUFFER_STATE b ));
void yy_init_buffer YY_PROTO(( YY_BUFFER_STATE b, FILE *file ));
void yy_flush_buffer YY_PROTO(( YY_BUFFER_STATE b ));
#define YY_FLUSH_BUFFER yy_flush_buffer( yy_current_buffer )

YY_BUFFER_STATE yy_scan_buffer YY_PROTO(( char *base, yy_size_t size ));
YY_BUFFER_STATE yy_scan_string YY_PROTO(( yyconst char *yy_str ));
YY_BUFFER_STATE yy_scan_bytes YY_PROTO(( yyconst char *bytes, int len ));

static void *yy_flex_alloc YY_PROTO(( yy_size_t ));
static void *yy_flex_realloc YY_PROTO(( void *, yy_size_t ));
static void yy_flex_free YY_PROTO(( void * ));
d304 6
a309 3
	if ( ! yy_current_buffer ) \
		yy_current_buffer = yy_create_buffer( yyin, YY_BUF_SIZE ); \
	yy_current_buffer->yy_is_interactive = is_interactive; \
d314 6
a319 3
	if ( ! yy_current_buffer ) \
		yy_current_buffer = yy_create_buffer( yyin, YY_BUF_SIZE ); \
	yy_current_buffer->yy_at_bol = at_bol; \
d322 3
a324 1
#define YY_AT_BOL() (yy_current_buffer->yy_at_bol)
d327 1
d329 1
d331 5
d339 4
a342 4
static yy_state_type yy_get_previous_state YY_PROTO(( void ));
static yy_state_type yy_try_NUL_trans YY_PROTO(( yy_state_type current_state ));
static int yy_get_next_buffer YY_PROTO(( void ));
static void yy_fatal_error YY_PROTO(( yyconst char msg[] ));
d348 3
a350 3
	yytext_ptr = yy_bp; \
	yyleng = (int) (yy_cp - yy_bp); \
	yy_hold_char = *yy_cp; \
d352 1
a352 1
	yy_c_buf_p = yy_cp;
d356 8
a363 1
static yyconst short int yy_accept[60] =
d373 1
a373 1
static yyconst int yy_ec[256] =
d405 1
a405 1
static yyconst int yy_meta[33] =
d413 1
a413 1
static yyconst short int yy_base[62] =
d424 1
a424 1
static yyconst short int yy_def[62] =
d435 1
a435 1
static yyconst short int yy_nxt[117] =
d452 1
a452 1
static yyconst short int yy_chk[117] =
d472 3
a483 1
#define INITIAL 0
d519 13
a531 1
#line 445 "itbl-lex.c"
d539 1
a539 1
extern "C" int yywrap YY_PROTO(( void ));
d541 1
a541 2
extern int yywrap YY_PROTO(( void ));
#endif
a542 3

#ifndef YY_NO_UNPUT
static void yyunput YY_PROTO(( int c, char *buf_ptr ));
d545 2
d548 1
a548 1
static void yy_flex_strncpy YY_PROTO(( char *, yyconst char *, int ));
d552 1
a552 1
static int yy_flex_strlen YY_PROTO(( yyconst char * ));
d556 1
d558 1
a558 1
static int yyinput YY_PROTO(( void ));
d560 1
a560 2
static int input YY_PROTO(( void ));
#endif
a562 33
#if YY_STACK_USED
static int yy_start_stack_ptr = 0;
static int yy_start_stack_depth = 0;
static int *yy_start_stack = 0;
#ifndef YY_NO_PUSH_STATE
static void yy_push_state YY_PROTO(( int new_state ));
#endif
#ifndef YY_NO_POP_STATE
static void yy_pop_state YY_PROTO(( void ));
#endif
#ifndef YY_NO_TOP_STATE
static int yy_top_state YY_PROTO(( void ));
#endif

#else
#define YY_NO_PUSH_STATE 1
#define YY_NO_POP_STATE 1
#define YY_NO_TOP_STATE 1
#endif

#ifdef YY_MALLOC_DECL
YY_MALLOC_DECL
#else
#if __STDC__
#ifndef __cplusplus
#include <stdlib.h>
#endif
#else
/* Just try to get by without declaring the routines.  This will fail
 * miserably on non-ANSI systems for which sizeof(size_t) != sizeof(int)
 * or sizeof(void*) != sizeof(int).
 */
#endif
a570 1

d583 1
a583 1
	if ( yy_current_buffer->yy_is_interactive ) \
d585 2
a586 1
		int c = '*', n; \
d609 3
a611 1
		}
d632 2
d638 6
a643 2
#define YY_DECL int yylex YY_PROTO(( void ))
#endif
d660 2
d663 1
a663 1
	{
d667 1
a667 1

d671 1
a671 1
#line 610 "itbl-lex.c"
d673 1
a673 1
	if ( yy_init )
d675 1
a675 1
		yy_init = 0;
d681 2
a682 2
		if ( ! yy_start )
			yy_start = 1;	/* first start state */
d690 5
a694 3
		if ( ! yy_current_buffer )
			yy_current_buffer =
				yy_create_buffer( yyin, YY_BUF_SIZE );
d696 1
a696 1
		yy_load_buffer_state();
d701 1
a701 1
		yy_cp = yy_c_buf_p;
d704 1
a704 1
		*yy_cp = yy_hold_char;
d711 1
a711 1
		yy_current_state = yy_start;
d718 2
a719 2
				yy_last_accepting_state = yy_current_state;
				yy_last_accepting_cpos = yy_cp;
d736 2
a737 2
			yy_cp = yy_last_accepting_cpos;
			yy_current_state = yy_last_accepting_state;
a742 1

a744 1

d749 3
a751 3
			*yy_cp = yy_hold_char;
			yy_cp = yy_last_accepting_cpos;
			yy_current_state = yy_last_accepting_state;
d848 1
d876 1
a876 1
#line 814 "itbl-lex.c"
d883 1
a883 1
		int yy_amount_of_matched_text = (int) (yy_cp - yytext_ptr) - 1;
d886 1
a886 1
		*yy_cp = yy_hold_char;
d889 1
a889 1
		if ( yy_current_buffer->yy_buffer_status == YY_BUFFER_NEW )
d895 1
a895 1
			 * consistency between yy_current_buffer and our
d900 3
a902 3
			yy_n_chars = yy_current_buffer->yy_n_chars;
			yy_current_buffer->yy_input_file = yyin;
			yy_current_buffer->yy_buffer_status = YY_BUFFER_NORMAL;
d912 1
a912 1
		if ( yy_c_buf_p <= &yy_current_buffer->yy_ch_buf[yy_n_chars] )
d916 1
a916 1
			yy_c_buf_p = yytext_ptr + yy_amount_of_matched_text;
d918 1
a918 1
			yy_current_state = yy_get_previous_state();
d931 1
a931 1
			yy_bp = yytext_ptr + YY_MORE_ADJ;
d936 1
a936 1
				yy_cp = ++yy_c_buf_p;
d943 1
a943 1
				yy_cp = yy_c_buf_p;
d948 1
a948 1
		else switch ( yy_get_next_buffer() )
d952 1
a952 1
				yy_did_buffer_switch_on_eof = 0;
d954 1
a954 1
				if ( yywrap() )
d965 1
a965 1
					yy_c_buf_p = yytext_ptr + YY_MORE_ADJ;
d973 1
a973 1
					if ( ! yy_did_buffer_switch_on_eof )
d980 2
a981 2
				yy_c_buf_p =
					yytext_ptr + yy_amount_of_matched_text;
d983 1
a983 1
				yy_current_state = yy_get_previous_state();
d985 2
a986 2
				yy_cp = yy_c_buf_p;
				yy_bp = yytext_ptr + YY_MORE_ADJ;
d990 2
a991 2
				yy_c_buf_p =
				&yy_current_buffer->yy_ch_buf[yy_n_chars];
d993 1
a993 1
				yy_current_state = yy_get_previous_state();
d995 2
a996 2
				yy_cp = yy_c_buf_p;
				yy_bp = yytext_ptr + YY_MORE_ADJ;
d1007 1
a1007 2
	} /* end of yylex */

d1016 4
a1019 5

static int yy_get_next_buffer()
	{
	register char *dest = yy_current_buffer->yy_ch_buf;
	register char *source = yytext_ptr;
d1023 1
a1023 1
	if ( yy_c_buf_p > &yy_current_buffer->yy_ch_buf[yy_n_chars + 1] )
d1027 1
a1027 1
	if ( yy_current_buffer->yy_fill_buffer == 0 )
d1029 1
a1029 1
		if ( yy_c_buf_p - yytext_ptr - YY_MORE_ADJ == 1 )
d1049 1
a1049 1
	number_to_move = (int) (yy_c_buf_p - yytext_ptr) - 1;
d1054 1
a1054 1
	if ( yy_current_buffer->yy_buffer_status == YY_BUFFER_EOF_PENDING )
d1058 1
a1058 1
		yy_current_buffer->yy_n_chars = yy_n_chars = 0;
d1062 2
a1063 2
		int num_to_read =
			yy_current_buffer->yy_buf_size - number_to_move - 1;
a1066 4
#ifdef YY_USES_REJECT
			YY_FATAL_ERROR(
"input buffer overflow, can't enlarge buffer because scanner uses REJECT" );
#else
d1069 1
a1069 1
			YY_BUFFER_STATE b = yy_current_buffer;
d1072 1
a1072 1
				(int) (yy_c_buf_p - b->yy_ch_buf);
d1085 1
a1085 2
					yy_flex_realloc( (void *) b->yy_ch_buf,
							 b->yy_buf_size + 2 );
d1095 1
a1095 1
			yy_c_buf_p = &b->yy_ch_buf[yy_c_buf_p_offset];
d1097 1
a1097 1
			num_to_read = yy_current_buffer->yy_buf_size -
d1099 1
a1099 1
#endif
d1106 2
a1107 2
		YY_INPUT( (&yy_current_buffer->yy_ch_buf[number_to_move]),
			yy_n_chars, num_to_read );
d1109 1
a1109 1
		yy_current_buffer->yy_n_chars = yy_n_chars;
d1112 1
a1112 1
	if ( yy_n_chars == 0 )
d1117 1
a1117 1
			yyrestart( yyin );
d1123 1
a1123 1
			yy_current_buffer->yy_buffer_status =
d1131 3
a1133 3
	yy_n_chars += number_to_move;
	yy_current_buffer->yy_ch_buf[yy_n_chars] = YY_END_OF_BUFFER_CHAR;
	yy_current_buffer->yy_ch_buf[yy_n_chars + 1] = YY_END_OF_BUFFER_CHAR;
d1135 1
a1135 1
	yytext_ptr = &yy_current_buffer->yy_ch_buf[0];
d1138 1
a1138 2
	}

d1142 2
a1143 2
static yy_state_type yy_get_previous_state()
	{
d1146 2
d1149 1
a1149 3
	yy_current_state = yy_start;

	for ( yy_cp = yytext_ptr + YY_MORE_ADJ; yy_cp < yy_c_buf_p; ++yy_cp )
d1154 2
a1155 2
			yy_last_accepting_state = yy_current_state;
			yy_last_accepting_cpos = yy_cp;
d1167 1
a1167 2
	}

d1174 2
a1175 8

#ifdef YY_USE_PROTOS
static yy_state_type yy_try_NUL_trans( yy_state_type yy_current_state )
#else
static yy_state_type yy_try_NUL_trans( yy_current_state )
yy_state_type yy_current_state;
#endif
	{
d1177 1
a1177 1
	register char *yy_cp = yy_c_buf_p;
d1182 2
a1183 2
		yy_last_accepting_state = yy_current_state;
		yy_last_accepting_cpos = yy_cp;
d1195 1
a1195 1
	}
d1197 5
a1201 11

#ifndef YY_NO_UNPUT
#ifdef YY_USE_PROTOS
static void yyunput( int c, register char *yy_bp )
#else
static void yyunput( c, yy_bp )
int c;
register char *yy_bp;
#endif
	{
	register char *yy_cp = yy_c_buf_p;
d1204 1
a1204 1
	*yy_cp = yy_hold_char;
d1206 1
a1206 1
	if ( yy_cp < yy_current_buffer->yy_ch_buf + 2 )
d1209 3
a1211 3
		register int number_to_move = yy_n_chars + 2;
		register char *dest = &yy_current_buffer->yy_ch_buf[
					yy_current_buffer->yy_buf_size + 2];
d1213 1
a1213 1
				&yy_current_buffer->yy_ch_buf[number_to_move];
d1215 1
a1215 1
		while ( source > yy_current_buffer->yy_ch_buf )
d1220 2
a1221 2
		yy_current_buffer->yy_n_chars =
			yy_n_chars = yy_current_buffer->yy_buf_size;
d1223 1
a1223 1
		if ( yy_cp < yy_current_buffer->yy_ch_buf + 2 )
d1229 4
d1234 1
a1234 7
	yytext_ptr = yy_bp;
	yy_hold_char = *yy_cp;
	yy_c_buf_p = yy_cp;
	}
#endif	/* ifndef YY_NO_UNPUT */


d1236 1
a1236 1
static int yyinput()
d1238 1
a1238 1
static int input()
d1240 2
a1241 1
	{
d1243 2
d1246 1
a1246 3
	*yy_c_buf_p = yy_hold_char;

	if ( *yy_c_buf_p == YY_END_OF_BUFFER_CHAR )
d1252 1
a1252 1
		if ( yy_c_buf_p < &yy_current_buffer->yy_ch_buf[yy_n_chars] )
d1254 1
a1254 1
			*yy_c_buf_p = '\0';
d1258 2
a1259 2
			int offset = yy_c_buf_p - yytext_ptr;
			++yy_c_buf_p;
d1261 1
a1261 1
			switch ( yy_get_next_buffer() )
d1275 1
a1275 1
					yyrestart( yyin );
d1277 1
a1277 1
					/* fall through */
d1281 1
a1281 1
					if ( yywrap() )
d1284 1
a1284 1
					if ( ! yy_did_buffer_switch_on_eof )
d1294 1
a1294 1
					yy_c_buf_p = yytext_ptr + offset;
d1300 3
a1302 4
	c = *(unsigned char *) yy_c_buf_p;	/* cast for 8-bit char's */
	*yy_c_buf_p = '\0';	/* preserve yytext */
	yy_hold_char = *++yy_c_buf_p;

d1305 2
a1306 1
	}
d1308 12
a1319 13

#ifdef YY_USE_PROTOS
void yyrestart( FILE *input_file )
#else
void yyrestart( input_file )
FILE *input_file;
#endif
	{
	if ( ! yy_current_buffer )
		yy_current_buffer = yy_create_buffer( yyin, YY_BUF_SIZE );

	yy_init_buffer( yy_current_buffer, input_file );
	yy_load_buffer_state();
d1322 18
a1339 9

#ifdef YY_USE_PROTOS
void yy_switch_to_buffer( YY_BUFFER_STATE new_buffer )
#else
void yy_switch_to_buffer( new_buffer )
YY_BUFFER_STATE new_buffer;
#endif
	{
	if ( yy_current_buffer == new_buffer )
d1342 1
a1342 1
	if ( yy_current_buffer )
d1345 3
a1347 3
		*yy_c_buf_p = yy_hold_char;
		yy_current_buffer->yy_buf_pos = yy_c_buf_p;
		yy_current_buffer->yy_n_chars = yy_n_chars;
d1350 2
a1351 2
	yy_current_buffer = new_buffer;
	yy_load_buffer_state();
d1358 2
a1359 2
	yy_did_buffer_switch_on_eof = 1;
	}
d1361 16
a1376 22

#ifdef YY_USE_PROTOS
void yy_load_buffer_state( void )
#else
void yy_load_buffer_state()
#endif
	{
	yy_n_chars = yy_current_buffer->yy_n_chars;
	yytext_ptr = yy_c_buf_p = yy_current_buffer->yy_buf_pos;
	yyin = yy_current_buffer->yy_input_file;
	yy_hold_char = *yy_c_buf_p;
	}


#ifdef YY_USE_PROTOS
YY_BUFFER_STATE yy_create_buffer( FILE *file, int size )
#else
YY_BUFFER_STATE yy_create_buffer( file, size )
FILE *file;
int size;
#endif
	{
d1378 2
a1379 2

	b = (YY_BUFFER_STATE) yy_flex_alloc( sizeof( struct yy_buffer_state ) );
d1388 1
a1388 1
	b->yy_ch_buf = (char *) yy_flex_alloc( b->yy_buf_size + 2 );
d1394 1
a1394 1
	yy_init_buffer( b, file );
d1397 1
a1397 1
	}
d1399 7
a1405 8

#ifdef YY_USE_PROTOS
void yy_delete_buffer( YY_BUFFER_STATE b )
#else
void yy_delete_buffer( b )
YY_BUFFER_STATE b;
#endif
	{
d1409 2
a1410 2
	if ( b == yy_current_buffer )
		yy_current_buffer = (YY_BUFFER_STATE) 0;
d1413 1
a1413 1
		yy_flex_free( (void *) b->yy_ch_buf );
d1415 2
a1416 2
	yy_flex_free( (void *) b );
	}
d1418 9
d1428 4
a1431 21
#ifndef _WIN32
#include <unistd.h>
#else
#ifndef YY_ALWAYS_INTERACTIVE
#ifndef YY_NEVER_INTERACTIVE
extern int isatty YY_PROTO(( int ));
#endif
#endif
#endif

#ifdef YY_USE_PROTOS
void yy_init_buffer( YY_BUFFER_STATE b, FILE *file )
#else
void yy_init_buffer( b, file )
YY_BUFFER_STATE b;
FILE *file;
#endif


	{
	yy_flush_buffer( b );
d1436 21
a1456 21
#if YY_ALWAYS_INTERACTIVE
	b->yy_is_interactive = 1;
#else
#if YY_NEVER_INTERACTIVE
	b->yy_is_interactive = 0;
#else
	b->yy_is_interactive = file ? (isatty( fileno(file) ) > 0) : 0;
#endif
#endif
	}


#ifdef YY_USE_PROTOS
void yy_flush_buffer( YY_BUFFER_STATE b )
#else
void yy_flush_buffer( b )
YY_BUFFER_STATE b;
#endif

	{
	if ( ! b )
d1473 53
a1525 2
	if ( b == yy_current_buffer )
		yy_load_buffer_state();
d1527 1
d1529 24
d1554 25
a1578 9
#ifndef YY_NO_SCAN_BUFFER
#ifdef YY_USE_PROTOS
YY_BUFFER_STATE yy_scan_buffer( char *base, yy_size_t size )
#else
YY_BUFFER_STATE yy_scan_buffer( base, size )
char *base;
yy_size_t size;
#endif
	{
d1580 1
a1580 1

d1587 1
a1587 1
	b = (YY_BUFFER_STATE) yy_flex_alloc( sizeof( struct yy_buffer_state ) );
d1601 1
a1601 1
	yy_switch_to_buffer( b );
d1604 1
a1604 2
	}
#endif
d1606 23
a1628 27

#ifndef YY_NO_SCAN_STRING
#ifdef YY_USE_PROTOS
YY_BUFFER_STATE yy_scan_string( yyconst char *yy_str )
#else
YY_BUFFER_STATE yy_scan_string( yy_str )
yyconst char *yy_str;
#endif
	{
	int len;
	for ( len = 0; yy_str[len]; ++len )
		;

	return yy_scan_bytes( yy_str, len );
	}
#endif


#ifndef YY_NO_SCAN_BYTES
#ifdef YY_USE_PROTOS
YY_BUFFER_STATE yy_scan_bytes( yyconst char *bytes, int len )
#else
YY_BUFFER_STATE yy_scan_bytes( bytes, len )
yyconst char *bytes;
int len;
#endif
	{
d1633 1
a1633 1

d1636 1
a1636 1
	buf = (char *) yy_flex_alloc( n );
d1645 1
a1645 1
	b = yy_scan_buffer( buf, n );
d1655 1
a1655 2
	}
#endif
d1657 2
a1658 7

#ifndef YY_NO_PUSH_STATE
#ifdef YY_USE_PROTOS
static void yy_push_state( int new_state )
#else
static void yy_push_state( new_state )
int new_state;
a1659 4
	{
	if ( yy_start_stack_ptr >= yy_start_stack_depth )
		{
		yy_size_t new_size;
d1661 5
a1665 2
		yy_start_stack_depth += YY_START_STACK_INCR;
		new_size = yy_start_stack_depth * sizeof( int );
d1667 1
a1667 2
		if ( ! yy_start_stack )
			yy_start_stack = (int *) yy_flex_alloc( new_size );
d1669 14
a1682 3
		else
			yy_start_stack = (int *) yy_flex_realloc(
					(void *) yy_start_stack, new_size );
d1684 1
a1684 4
		if ( ! yy_start_stack )
			YY_FATAL_ERROR(
			"out of memory expanding start-condition stack" );
		}
d1686 8
a1693 1
	yy_start_stack[yy_start_stack_ptr++] = YY_START;
d1695 7
a1701 3
	BEGIN(new_state);
	}
#endif
d1703 7
d1711 7
a1717 5
#ifndef YY_NO_POP_STATE
static void yy_pop_state()
	{
	if ( --yy_start_stack_ptr < 0 )
		YY_FATAL_ERROR( "start-condition stack underflow" );
d1719 3
a1721 3
	BEGIN(yy_start_stack[yy_start_stack_ptr]);
	}
#endif
d1723 4
d1728 20
a1747 6
#ifndef YY_NO_TOP_STATE
static int yy_top_state()
	{
	return yy_start_stack[yy_start_stack_ptr - 1];
	}
#endif
d1749 4
a1752 3
#ifndef YY_EXIT_FAILURE
#define YY_EXIT_FAILURE 2
#endif
d1754 4
a1757 10
#ifdef YY_USE_PROTOS
static void yy_fatal_error( yyconst char msg[] )
#else
static void yy_fatal_error( msg )
char msg[];
#endif
	{
	(void) fprintf( stderr, "%s\n", msg );
	exit( YY_EXIT_FAILURE );
	}
d1759 4
d1764 14
d1779 2
a1780 14
/* Redefine yyless() so it works in section 3 code. */

#undef yyless
#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up yytext. */ \
		yytext[yyleng] = yy_hold_char; \
		yy_c_buf_p = yytext + n; \
		yy_hold_char = *yy_c_buf_p; \
		*yy_c_buf_p = '\0'; \
		yyleng = n; \
		} \
	while ( 0 )
d1782 3
a1784 2

/* Internal utility routines. */
d1787 2
a1788 9
#ifdef YY_USE_PROTOS
static void yy_flex_strncpy( char *s1, yyconst char *s2, int n )
#else
static void yy_flex_strncpy( s1, s2, n )
char *s1;
yyconst char *s2;
int n;
#endif
	{
d1790 1
a1790 1
	for ( i = 0; i < n; ++i )
d1792 1
a1792 1
	}
d1796 2
a1797 7
#ifdef YY_USE_PROTOS
static int yy_flex_strlen( yyconst char *s )
#else
static int yy_flex_strlen( s )
yyconst char *s;
#endif
	{
d1799 1
a1799 1
	for ( n = 0; s[n]; ++n )
d1803 1
a1803 1
	}
d1806 2
a1807 8

#ifdef YY_USE_PROTOS
static void *yy_flex_alloc( yy_size_t size )
#else
static void *yy_flex_alloc( size )
yy_size_t size;
#endif
	{
d1809 1
a1809 1
	}
d1811 2
a1812 8
#ifdef YY_USE_PROTOS
static void *yy_flex_realloc( void *ptr, yy_size_t size )
#else
static void *yy_flex_realloc( ptr, size )
void *ptr;
yy_size_t size;
#endif
	{
d1821 6
a1826 1
	}
d1828 1
a1828 9
#ifdef YY_USE_PROTOS
static void yy_flex_free( void *ptr )
#else
static void yy_flex_free( ptr )
void *ptr;
#endif
	{
	free( ptr );
	}
d1830 11
a1840 6
#if YY_MAIN
int main()
	{
	yylex();
	return 0;
	}
d1845 1
d1853 1
@


