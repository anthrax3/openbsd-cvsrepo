head	1.2;
access;
symbols
	OPENBSD_3_5:1.1.1.2.0.8
	OPENBSD_3_5_BASE:1.1.1.2
	OPENBSD_3_4:1.1.1.2.0.6
	OPENBSD_3_4_BASE:1.1.1.2
	OPENBSD_3_3:1.1.1.2.0.4
	OPENBSD_3_3_BASE:1.1.1.2
	OPENBSD_3_2:1.1.1.2.0.2
	OPENBSD_3_2_BASE:1.1.1.2
	binutils-2_11_2:1.1.1.2
	OPENBSD_3_1:1.1.1.1.0.8
	OPENBSD_3_1_BASE:1.1.1.1
	OPENBSD_3_0:1.1.1.1.0.6
	OPENBSD_3_0_BASE:1.1.1.1
	BINUTILS-2_10_1:1.1.1.1
	OPENBSD_2_9:1.1.1.1.0.4
	OPENBSD_2_9_BASE:1.1.1.1
	OPENBSD_2_8:1.1.1.1.0.2
	OPENBSD_2_8_BASE:1.1.1.1
	BINUTILS-2_10:1.1.1.1
	FSF:1.1.1;
locks; strict;
comment	@# @;


1.2
date	2004.05.17.21.54.33;	author drahn;	state dead;
branches;
next	1.1;

1.1
date	2000.09.12.14.46.39;	author espie;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	2000.09.12.14.46.39;	author espie;	state Exp;
branches;
next	1.1.1.2;

1.1.1.2
date	2002.05.13.13.39.00;	author fgsch;	state Exp;
branches;
next	;


desc
@@


1.2
log
@Resolve merge conflicts, adjust method of W^X handing (.sh files)
remove testsuites (not useable) remove mmalloc (not part of new binutils).
@
text
@# ARC gas testsuite

# Test an insn from a template .s/.d.
# The best way to create the .d file is to run the tests without it, let
# dejagnu crash, run as.new on the just built .s file, run objdump -dr on
# the result of that, copy the result into the .d file, and edit in the
# necessary patterns (@@OC@@, etc.).  Sounds complicated but it's easy.  The
# catch is that we assume a working assembler is used to build it.  That's
# obviously not entirely kosher, but once the .d file is created one can
# verify it's contents over time.
#
# Template patterns:
# @@OC@@ - placeholder for the opcode
# @@IC+?@@ - place holder for the insn code
# @@I3+??@@ - place holder for the operation code of code 3 insns.

proc test_template_insn { cpu tmpl opcode icode } {
    global srcdir subdir objdir

    # Change @@OC@@ in the template file to $opcode

    set in_fd [open $srcdir/$subdir/$tmpl.s r]
    set out_fd [open $objdir/$opcode.s w]
    # FIXME: check return codes

    puts $out_fd "\t.cpu $cpu\n"
    while { [gets $in_fd line] >= 0 } {
	regsub "@@OC@@" $line $opcode line
	puts $out_fd $line
    }

    close $in_fd
    close $out_fd

    # Create output template.

    set in_fd [open $srcdir/$subdir/$tmpl.d r]
    set out_fd [open $objdir/$opcode.d w]
    # FIXME: check return codes

    while { [gets $in_fd line] >= 0 } {
	regsub "@@OC@@" $line $opcode line
	#send_user "$line\n"
	if [string match "*@@IC+?@@*" $line] {
	    # Insert the opcode.  It occupies the top 5 bits.
	    regexp "^(.*)@@IC\\+(.)@@(.*)$" $line junk leftpart n rightpart
	    set n [expr ($icode << 3) + $n]
	    set n [format "%02x" $n]
	    puts $out_fd "$leftpart$n$rightpart"
	} elseif [string match "*@@I3+??@@*" $line] {
	    # Insert insn 3 code (register C field)
	    # b15=8/0, b8=1/0 (their respective hex values in the objdump)
	    regexp "^(.*)@@I3\\+(.)(.)@@(.*)$" $line junk leftpart b15 b8 rightpart
	    set n [expr ($icode << 1) + ($b15 << 4) + ($b8 << 0)]
	    set n [format "%02x" $n]
	    puts $out_fd "$leftpart$n$rightpart"
	} else {
	    puts $out_fd $line
	}
    }

    close $in_fd
    close $out_fd

    # Finally, run the test.

    run_dump_test $objdir/$opcode

    # "make clean" won't delete these, so for now we must.
    catch "exec rm -f $objdir/$opcode.s $objdir/$opcode.d"
}

# Run the tests.

if [istarget arc*-*-*] then {

    test_template_insn base math adc 9
    test_template_insn base math add 8
    test_template_insn base math and 12
    test_template_insn base math bic 14
    test_template_insn base math or 13
    test_template_insn base math sbc 11
    test_template_insn base math sub 10
    test_template_insn base math xor 15

    test_template_insn base alias mov 12
    test_template_insn base alias rlc 9
    test_template_insn base alias asl 8
# `lsl' gets dumped as `asl' so this must be tested elsewhere.
#   test_template_insn base alias lsl 8

    test_template_insn base sshift asr 1
    test_template_insn base sshift lsr 2
    test_template_insn base sshift ror 3
    test_template_insn base sshift rrc 4

    test_template_insn base branch b 4
    test_template_insn base branch bl 5
    test_template_insn base branch lp 6

    run_dump_test "j"

    test_template_insn base insn3 sexb 5
    test_template_insn base insn3 sexw 6
    test_template_insn base insn3 extb 7
    test_template_insn base insn3 extw 8

    run_dump_test "flag"
#    run_dump_test "nop"

    run_dump_test "ld"
    run_dump_test "st"

}
@


1.1
log
@Initial revision
@
text
@@


1.1.1.1
log
@Import binutils-2.10
- only the binutils package (no gdb here)
- don't import libiberty and texinfo, they are elsewhere
- remove all .info* generated files
@
text
@@


1.1.1.2
log
@Import binutils-2.11.2
- only the binutils package (no gdb here)
- don't import libiberty and texinfo, they are elsewhere
- remove all .info* generated files
@
text
@d1 70
a70 39
# ARC base instruction set (to arc8)
if [istarget arc*-*-*] then {
    run_dump_test ld
    run_dump_test ld2
    run_dump_test st

    # Specially encoded/single operand instructions
    run_dump_test flag
    run_dump_test brk
    run_dump_test sleep
    run_dump_test swi
    run_dump_test asr
    run_dump_test lsr
    run_dump_test ror
    run_dump_test rrc
    run_dump_test sexb
    run_dump_test sexw
    run_dump_test extb
    run_dump_test extw

    run_dump_test b
    run_dump_test bl
    run_dump_test lp
    run_dump_test j
    run_dump_test jl
    run_dump_test add
    run_dump_test asl
    # FIXME: ??? `lsl' gets dumped as `asl'
    # run_dump_test lsl
    run_dump_test adc
    run_dump_test rlc
    run_dump_test sub
    run_dump_test sbc
    run_dump_test and
    run_dump_test mov
    run_dump_test or
    run_dump_test bic
    run_dump_test xor
    run_dump_test nop
d73 2
a74 1
# ARC library extensions
d76 38
a113 1
    # *TODO*
@

