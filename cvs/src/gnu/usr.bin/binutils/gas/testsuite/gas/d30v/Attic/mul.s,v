head	1.2;
access;
symbols
	OPENBSD_3_5:1.1.1.1.0.16
	OPENBSD_3_5_BASE:1.1.1.1
	OPENBSD_3_4:1.1.1.1.0.14
	OPENBSD_3_4_BASE:1.1.1.1
	OPENBSD_3_3:1.1.1.1.0.12
	OPENBSD_3_3_BASE:1.1.1.1
	OPENBSD_3_2:1.1.1.1.0.10
	OPENBSD_3_2_BASE:1.1.1.1
	binutils-2_11_2:1.1.1.1
	OPENBSD_3_1:1.1.1.1.0.8
	OPENBSD_3_1_BASE:1.1.1.1
	OPENBSD_3_0:1.1.1.1.0.6
	OPENBSD_3_0_BASE:1.1.1.1
	BINUTILS-2_10_1:1.1.1.1
	OPENBSD_2_9:1.1.1.1.0.4
	OPENBSD_2_9_BASE:1.1.1.1
	OPENBSD_2_8:1.1.1.1.0.2
	OPENBSD_2_8_BASE:1.1.1.1
	BINUTILS-2_10:1.1.1.1
	FSF:1.1.1;
locks; strict;
comment	@# @;


1.2
date	2004.05.17.21.54.35;	author drahn;	state dead;
branches;
next	1.1;

1.1
date	2000.09.12.14.46.42;	author espie;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	2000.09.12.14.46.42;	author espie;	state Exp;
branches;
next	;


desc
@@


1.2
log
@Resolve merge conflicts, adjust method of W^X handing (.sh files)
remove testsuites (not useable) remove mmalloc (not part of new binutils).
@
text
@#  One of the rule on restricted sequence is consecutive IU instruction 
#       IU: MUL, MAC, MACS, MSUB, MSUBS  (a)    
#       IU: MULHXpp, MULX2H, MUL2H      (b)
# This means that instructions in group (a) and in (b) should not be executed
# in IU in consecutive cycles in the order (a)->(b). It does neither prohibit
# executions in the reverse order (b)-> (a) nor consecutive execution of
# group (a)->(a) or (b)->(b)

	mulx2h r5,r6,r7		<-	mulx2h r2,r3,r4
	nop	||	mulx2h r8,r9,r10
	nop	||	mulx2h r11,r12,r13       
	mulx2h r14,r15,r16
	mulx2h r17,r18,r19      
	mulx2h r23,r24,r25     <-	mulx2h r20,r21,r22
	mul    r29,r30,r31     <-	mulx2h r26,r27,r28
	mul    r5, r6, r7      <-	mul r2, r3, r4
	mulx2h r11, r12, r13   <-	mulx2h r8, r9, r10
	mulx2h r17, r18, r19   <-	mul r14, r15, r16
	mul    r23, r24, r25   <-	mulx2h r20, r21, r22
@


1.1
log
@Initial revision
@
text
@@


1.1.1.1
log
@Import binutils-2.10
- only the binutils package (no gdb here)
- don't import libiberty and texinfo, they are elsewhere
- remove all .info* generated files
@
text
@@
