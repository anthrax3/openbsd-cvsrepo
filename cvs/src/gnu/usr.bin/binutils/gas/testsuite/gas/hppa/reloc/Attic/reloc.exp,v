head	1.6;
access;
symbols
	OPENBSD_3_5:1.5.0.8
	OPENBSD_3_5_BASE:1.5
	OPENBSD_3_4:1.5.0.6
	OPENBSD_3_4_BASE:1.5
	OPENBSD_3_3:1.5.0.4
	OPENBSD_3_3_BASE:1.5
	OPENBSD_3_2:1.5.0.2
	OPENBSD_3_2_BASE:1.5
	binutils-2_11_2:1.1.1.5
	OPENBSD_3_1:1.4.0.8
	OPENBSD_3_1_BASE:1.4
	OPENBSD_3_0:1.4.0.6
	OPENBSD_3_0_BASE:1.4
	BINUTILS-2_10_1:1.1.1.4
	OPENBSD_2_9:1.4.0.4
	OPENBSD_2_9_BASE:1.4
	OPENBSD_2_8:1.4.0.2
	OPENBSD_2_8_BASE:1.4
	BINUTILS-2_10:1.1.1.4
	OPENBSD_2_7:1.2.0.16
	OPENBSD_2_7_BASE:1.2
	new-binutils:1.2.0.14
	OPENBSD_2_6:1.2.0.12
	OPENBSD_2_6_BASE:1.2
	OPENBSD_2_5:1.2.0.10
	OPENBSD_2_5_BASE:1.2
	OPENBSD_2_4:1.2.0.8
	OPENBSD_2_4_BASE:1.2
	OPENBSD_2_3:1.2.0.6
	OPENBSD_2_3_BASE:1.2
	OPENBSD_2_2:1.2.0.4
	OPENBSD_2_2_BASE:1.2
	BINUTILS-2_8_1:1.1.1.3
	OPENBSD_2_1:1.2.0.2
	OPENBSD_2_1_BASE:1.2
	CYGNUS-961112:1.1.1.2
	OPENBSD_2_0:1.1.0.2
	OPENBSD_2_0_BASE:1.1
	CYGNUS-960904:1.1.1.1
	CYGNUS-960609:1.1.1.1
	CYGNUS:1.1.1
	FSF_2_6:1.1.1.1
	FSF:1.1.1;
locks; strict;
comment	@# @;


1.6
date	2004.05.17.21.54.37;	author drahn;	state dead;
branches;
next	1.5;

1.5
date	2002.05.13.17.07.38;	author fgsch;	state Exp;
branches;
next	1.4;

1.4
date	2000.09.12.22.25.17;	author espie;	state Exp;
branches;
next	1.3;

1.3
date	2000.09.12.19.12.07;	author espie;	state Exp;
branches;
next	1.2;

1.2
date	96.11.23.03.35.03;	author niklas;	state Exp;
branches;
next	1.1;

1.1
date	96.01.08.11.06.59;	author niklas;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	96.01.08.11.06.59;	author niklas;	state Exp;
branches;
next	1.1.1.2;

1.1.1.2
date	96.11.19.14.14.51;	author niklas;	state Exp;
branches;
next	1.1.1.3;

1.1.1.3
date	97.05.29.09.24.42;	author niklas;	state Exp;
branches;
next	1.1.1.4;

1.1.1.4
date	2000.09.12.14.46.55;	author espie;	state Exp;
branches;
next	1.1.1.5;

1.1.1.5
date	2002.05.13.13.40.28;	author fgsch;	state Exp;
branches;
next	;


desc
@@


1.6
log
@Resolve merge conflicts, adjust method of W^X handing (.sh files)
remove testsuites (not useable) remove mmalloc (not part of new binutils).
@
text
@# Copyright (C) 1993, 1996, 1997 Free Software Foundation, Inc.

# This program is free software; you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation; either version 2 of the License, or
# (at your option) any later version.
# 
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
# 
# You should have received a copy of the GNU General Public License
# along with this program; if not, write to the Free Software
# Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA 02111-1307, USA.  

# Please email any bugs, comments, and/or additions to this file to:
# DejaGnu@@cygnus.com

# Written by the Center for Software Science at the University of Utah
# and by Cygnus Support.

proc do_ble_relocation_test {} {
    set testname "blebug.s: Test for proper relocation for BLE (part 2)"
    set x 0

    if [gas_test_old "blebug.s" "" "Proper relocation for BLE (part 1)"] then {
	objdump_start_no_subdir "a.out" "-r"

        if {[istarget hppa*64*-*-*]
	    || [istarget hppa*-*-*elf*] || [istarget hppa*-*-linux*]} then {
	    # At one time both versions of the assembler would incorrectly use 
	    # a PC-relative relocation for a BLE instruction.
	    while 1 {
		expect {
		    -re "^0+\[^\n\]*DIR21L\[^\n\]*\n"	{ set x 1 }
		    -re "^0+4\[^\n\]*DIR17R\[^\n\]*\n"	{ set x 1 }
		    -re "\[^\n\]*\n"				{ }
		    timeout			{ perror "timeout\n"; break }
		    eof				{ break }
		}
	    }
	} else {
	    # At one time both versions of the assembler would incorrectly use 
	    # a PC-relative relocation for a BLE instruction.
	    while 1 {
		expect {
		    -re "^0+4\[^\n\]*ABS_CALL\[^\n\]*\n"	{ set x 1 }
		    -re "\[^\n\]*\n"				{ }
		    timeout			{ perror "timeout\n"; break }
		    eof				{ break }
		}
	    }
	}
    }

    # This was intended to do any cleanup necessary.  It kinda looks like it
    # isn't needed, but just in case, please keep it in for now.
    objdump_finish

    # Did we find what we were looking for?  If not, flunk it.
    if [expr $x==1] then { pass $testname } else { fail $testname }
}

proc do_relocation_reduction_tests {} {
    set testname "reduce.s: Test relocation reductions (part 2)"
    set x 0

    if {[istarget hppa*64*-*-*]
        || [istarget hppa*-*-*elf*] || [istarget hppa*-*-linux*]} then {
      return;
    }

    if [gas_test_old "reduce.s" "" "Relocation reductions (part1)"] then {
	objdump_start_no_subdir "a.out" "-r"

	# Check to make sure relocations involving procedure labels 
	# are not reduced to a relocation involving some other symbol.
	# Doing so makes generating parameter relocation stubs impossible.
	while 1 {
	    expect {
		-re "^0+4\[^\n\]*PLABEL\[^\n\]*foo\[^\n\]*\n"
		    { set x [expr $x+1] }
		-re "^0+14\[^\n\]*PCREL\[^\n\]*foo\[^\n\]*\n"
		    { set x [expr $x+1] }
		-re "\[^\n\]*\n"		{ }
		timeout				{ perror "timeout\n"; break }
		eof				{ break }
            }
	}
    }

    # This was intended to do any cleanup necessary.  It kinda looks like it
    # isn't needed, but just in case, please keep it in for now.
    objdump_finish

    # Did we find what we were looking for?  If not, flunk it.
    if [expr $x==2] then { pass $testname } else { fail $testname }

    set testname "reduce2.s: More relocation reduction tests (part 2)"
    set x 0

    if [gas_test_old "reduce2.s" "" "More relocation  reductions (part1)"] then {
	objdump_start_no_subdir "a.out" "-r"

	# Check to make sure DLT relative relocs are not reduced to sym+addend
	# Doing so doesn't work as one might expect
	while 1 {
	    expect {
		-re "^0+4\[^\n\]*DLT\[^\n\]*L.C0000\[^\n\]*\n"
		    { set x [expr $x+1] }
		-re "^0+1c\[^\n\]*DLT\[^\n\]*L.C0000\[^\n\]*\n"
		    { set x [expr $x+1] }
		-re "^0+30\[^\n\]*DLT\[^\n\]*L.C0001\[^\n\]*\n"
		    { set x [expr $x+1] }
		-re "^0+48\[^\n\]*DLT\[^\n\]*L.C0001\[^\n\]*\n"
		    { set x [expr $x+1] }
		-re "\[^\n\]*\n"		{ }
		timeout				{ perror "timeout\n"; break }
		eof				{ break }
            }
	}
    }

    # This was intended to do any cleanup necessary.  It kinda looks like it
    # isn't needed, but just in case, please keep it in for now.
    objdump_finish

    # Did we find what we were looking for?  If not, flunk it.
    if [expr $x==2] then { pass $testname } else { fail $testname }

    set testname "reduce3.s: Test even more relocation reductions (part 2)"
    set x 0

    if [gas_test_old "reduce3.s" "" "Even more relocation reductions (part1)"] then {
	objdump_start_no_subdir "a.out" "-r"

	# Check to make sure relocations involving procedure labels 
	# are not reduced to a relocation involving some other symbol.
	# Doing so makes generating parameter relocation stubs impossible.
	while 1 {
	    expect {
		-re "^0+c\[^\n\]*yabba\[^\n\+\]*\n"
		    { set x [expr $x+1] }
		-re "^0+c\[^\n\]*yabba\+\[^\n\]*\n"
		    { set x 0; break }
		-re "^0+10\[^\n\]*yabba\[^\n\+\]*\n"
		    { set x [expr $x+1] }
		-re "^0+10\[^\n\]*yabba\+\[^\n\]*\n"
		    { set x 0; break }
		-re "\[^\n\]*\n"		{ }
		timeout				{ perror "timeout\n"; break }
		eof				{ break }
            }
	}
    }

    # This was intended to do any cleanup necessary.  It kinda looks like it
    # isn't needed, but just in case, please keep it in for now.
    objdump_finish

    # Did we find what we were looking for?  If not, flunk it.
    if [expr $x==2] then { pass $testname } else { fail $testname }
}

proc do_ble_mode_selector_test {} {
    set testname "blebug2.s: blebug2"
    set x 0

    gas_start "blebug2.s" "-al"

    # GAS uses too many bits on the BLE instruction.
    while 1 {
	expect {
	    -re "^ +\[0-9\]+ 0000 20202801\[^\n\]*\n"	{ set x [expr $x+1] }
	    -re "^ +\[0-9\]+ 0004 E420E008\[^\n\]*\n"	{ set x [expr $x+1] }
	    -re "\[^\n\]*\n"				{ }
	    timeout				{ perror "timeout\n"; break }
	    eof					{ break }
	}
    }

    # This was intended to do any cleanup necessary.  It kinda looks like it
    # isn't needed, but just in case, please keep it in for now.
    gas_finish

    # Did we find what we were looking for?  If not, flunk it.
    if [expr $x==2] then { pass $testname } else { fail $testname }
}

proc do_ble_relocation_test {} {
    set testname "blebug3.s: blebug3"
    set x 0

    gas_start "blebug3.s" "-al"

    while 1 {
	expect {
	    -re "^ +\[0-9\]+ 0000 E4002000\[^\n\]*\n"	{ set x [expr $x+1] }
	    -re "\[^\n\]*\n"				{ }
	    timeout				{ perror "timeout\n"; break }
	    eof					{ break }
	}
    }

    # This was intended to do any cleanup necessary.  It kinda looks like it
    # isn't needed, but just in case, please keep it in for now.
    gas_finish

    # Did we find what we were looking for?  If not, flunk it.
    if [expr $x==1] then { pass $testname } else { fail $testname }
}

proc do_plabel_relocation_test {} {
    set testname "plabelbug.s: Old gas-1.36 plabel bug (part 2)"
    set x 0

    if [gas_test_old "plabelbug.s" "" "Old gas-1.36 plabel bug (part 1)"] {
	objdump_start_no_subdir "a.out" "-r"

	# Check that we make PLABEL relocation entries when they're needed.
	while 1 {
	    expect {
		-re "^0+\[^\n\]*PLABEL\[^\n\]*\n"
		    { set x [expr $x+1] }
		-re "^0+4\[^\n\]*PLABEL\[^\n\]*\n"
		    { set x [expr $x+1] }
		-re "\[^\n\]*\n"			{ }
		timeout				{ perror "timeout\n"; break }
		eof				{ break }
    	    }
	}

	# This was intended to do any cleanup necessary.  It kinda looks like it
	# isn't needed, but just in case, please keep it in for now.
	objdump_finish

	# Did we find what we were looking for?  If not, flunk it.
	if [expr $x==2] then { pass $testname } else { fail $testname }
    }
}

proc do_selector_scope_test {} {
    set testname "selectorbug.s: Test scope of field selector" 
    set x 0

    if [istarget hppa*64*-*-*] then {
      return;
    }

    if [gas_test_old "selectorbug.s" "" "Test scope of field selector (part 1)"] {
	objdump_start_no_subdir "a.out" "-r"

	# Check to make sure the relocation entry after the plabel is correct.
	# If an old field selector was incorrectly "carried" over, then 
	# this test will fail.
        if {[istarget hppa*-*-*elf*] || [istarget hppa*-*-linux*]} then {
	    while 1 {
		expect {
	            -re "^0+14\[^\n\]*DIR32\[^\n\]*\n"
			{ set x 1 }
		    -re "^0+14\[^\n\]*PLABEL\[^\n\]*foo\[^\n\]*\n"
			{ set x 0 }
	            -re "\[^\n\]*\n"		{ }
	            timeout			{ perror "timeout\n"; break }
	            eof				{ break }
		}
            }
	} else {
	    while 1 {
		expect {
	            -re "^0+14\[^\n\]*DATA_ONE\[^\n\]*\n"
			{ set x 1 }
		    -re "^0+14\[^\n\]*PLABEL\[^\n\]*foo\[^\n\]*\n"
			{ set x 0 }
	            -re "\[^\n\]*\n"		{ }
	            timeout			{ perror "timeout\n"; break }
	            eof				{ break }
		}
            }
	}

	# This was intended to do any cleanup necessary.  It kinda looks like it
	# isn't needed, but just in case, please keep it in for now.
	objdump_finish

	# Did we find what we were looking for?  If not, flunk it.
	if [expr $x==1] then { pass $testname } else { fail $testname }
    }
}

proc do_local_label_as_operand_test {} {
    set testname "labelopbug.s: Test local label as operand (non-branching)"
    set x 0

    if [gas_test_old "labelopbug.s" "" "Local label as operand (part 1)"] {
	objdump_start_no_subdir "a.out" "-r"

	# Check to make sure we handle difference of local lables as an operand
	# to a non-branching instruction correctly.
	while 1 {
	    expect {
	        -re "^0+2c\[^\n\]*0x0+24\[^\n\]*\n" 
		    { set x [expr $x+1] }
	        -re "^0+30\[^\n\]*0x0+24\[^\n\]*\n" 
		    { set x [expr $x+1] }
	        -re "\[^\n\]*\n"		{ }
	        timeout				{ perror "timeout\n"; break }
	        eof				{ break }
            }
	}

	# This was intended to do any cleanup necessary.  It kinda looks like it
	# isn't needed, but just in case, please keep it in for now.
	objdump_finish

	# Did we find what we were looking for?  If not, flunk it.
	if [expr $x==2] then { pass $testname } else { fail $testname }
    }
}

proc do_exit_relocation_test {} {
    set testname "exitbug.s: Test for bogus R_EXIT relocation (part 2)"
    set x 0

    # Elf (osf) does not use ENTRY/EXIT relocations.
    # I guess we could look at the unwind subspaces it builds...
    # Until then, make sure it still assembles.
    if {[istarget hppa*64*-*-*]
	|| [istarget hppa*-*-*elf*] || [istarget hppa*-*-linux*]} then {
	gas_test_old "exitbug.s" "" "Test for bogus R_EXIT relocation (part 1)"
	return;
    }

    if [gas_test_old "exitbug.s" "" "Test for bogus R_EXIT relocation (part 1)"] {
	objdump_start_no_subdir "a.out" "-r"

	# Note that a match here is really a FAILURE!
	while 1 {
	    expect {
	        -re "^0+\[^\n\]*R_EXIT\[^\n\]*\n" 
		    { set x [expr $x+1] }
	        -re "\[^\n\]*\n"		{ }
	        timeout				{ perror "timeout\n"; break }
	        eof				{ break }
            }
	}

	# This was intended to do any cleanup necessary.  It kinda looks like it
	# isn't needed, but just in case, please keep it in for now.
	objdump_finish

	# Did we find what we were looking for?  If not, flunk it.
	if [expr $x==0] then { pass $testname } else { fail $testname }
    }
}

proc do_cross_space_fixup_test_1 {} {
    set testname "fixupbug.s: Test cross space jump/call fixup bug (part 2)"
    set x 0

    # ELF doesn't really handle extra sections too well...
    if {[istarget hppa*64*-*-*]
	|| [istarget hppa*-*-*elf*] || [istarget hppa*-*-linux*]} then {
	return;
    }

    if [gas_test_old "fixupbug.s" "" "Test cross space jump/call fixup bug (part 1)"] {
	objdump_start_no_subdir "a.out" "-r"

	# Make sure GAS generated a fixup/relocation for the cross-space
	# branch/call
	while 1 {
	    expect {
	        -re "^0+\[^\n\]*PCREL_CALL\[^\n\]*\n" 
		    { set x [expr $x+1] }
	        -re "\[^\n\]*\n"		{ }
	        timeout				{ perror "timeout\n"; break }
	        eof				{ break }
            }
	}

	# This was intended to do any cleanup necessary.  It kinda looks like it
	# isn't needed, but just in case, please keep it in for now.
	objdump_finish

	# Did we find what we were looking for?  If not, flunk it.
	if [expr $x==1] then { pass $testname } else { fail $testname }
    }
}

proc do_cross_space_fixup_test_2 {} {
    set testname "fixupbug.s: Test cross space jump/call fixup bug (part 3)"
    set x 0

    # ELF doesn't really handle extra sections too well...
    if {[istarget hppa*64*-*-*]
	|| [istarget hppa*-*-*elf*] || [istarget hppa*-*-linux*]} then {
	return;
    }

    gas_start "fixupbug.s" "-al"

    while 1 {
	expect {
	    -re "^ +\[0-9\]+ 0000 E8000002\[^\n\]*\n"	{ set x [expr $x+1] }
	    -re "\[^\n\]*\n"				{ }
	    timeout				{ perror "timeout\n"; break }
	    eof					{ break }
	}
    }

    # This was intended to do any cleanup necessary.  It kinda looks like it
    # isn't needed, but just in case, please keep it in for now.
    gas_finish

    # Did we find what we were looking for?  If not, flunk it.
    if [expr $x==1] then { pass $testname } else { fail $testname }
}

proc do_round_mode_test {} {
    set testname "roundmode.s: Test switching of rounding modes (part 2)"
    set x 0

    if [gas_test_old "roundmode.s" "" "Test switch of rounding modes(part 1)"] {
	objdump_start_no_subdir "a.out" "-r"

	# Make sure GAS generated correct relocations to switch rounding modes.
	# Also make sure (for SOM) that redundant rounding mode relocations
	# were eliminated.
	if {[istarget hppa*64*-*-*]
	    || [istarget hppa*-*-*elf*] || [istarget hppa*-*-linux*]} then {
	    while 1 {
		expect {
	            -re "^0+\[^\n\]*DIR21L\[^\n\]*\n"
			{ set x [expr $x+1] }
	            -re "^0+4\[^\n\]*DIR14R\[^\n\]*\n" 
			{ set x [expr $x+1] }
	            -re "^0+8\[^\n\]*DIR21L\[^\n\]*\n"
			{ set x [expr $x+1] }
	            -re "^0+c\[^\n\]*DIR14R\[^\n\]*\n" 
			{ set x [expr $x+1] }
	            -re "^0+10\[^\n\]*DIR21L\[^\n\]*\n"
			{ set x [expr $x+1] }
	            -re "^0+14\[^\n\]*DIR14R\[^\n\]*\n" 
			{ set x [expr $x+1] }
	            -re "^0+18\[^\n\]*DIR21L\[^\n\]*\n"
			{ set x [expr $x+1] }
	            -re "^0+1c\[^\n\]*DIR14R\[^\n\]*\n" 
			{ set x [expr $x+1] }
	            -re "\[^\n\]*\n"		{ }
	        timeout				{ perror "timeout\n"; break }
	        eof				{ break }
		}
            }
	} else {
	    while 1 {
		expect {
	            -re "^0+\[^\n\]*R_R_MODE\[^\n\]*\n"
			{ set x [expr $x+1] }
	            -re "^0+4\[^\n\]*R_R_MODE\[^\n\]*\n" 
			{ fail $testname }
	            -re "^0+8\[^\n\]*R_N_MODE\[^\n\]*\n"
			{ set x [expr $x+1] }
	            -re "^0+c\[^\n\]*R_N_MODE\[^\n\]*\n" 
			{ fail $testname }
	            -re "^0+10\[^\n\]*R_R_MODE\[^\n\]*\n"
			{ set x [expr $x+1] }
	            -re "^0+14\[^\n\]*R_R_MODE\[^\n\]*\n" 
			{ fail $testname }
	            -re "^0+1c\[^\n\]*R_R_MODE\[^\n\]*\n" 
			{ fail $testname }
	            -re "\[^\n\]*\n"		{ }
	        timeout				{ perror "timeout\n"; break }
	        eof				{ break }
		}
	    }
	}

	# This was intended to do any cleanup necessary.  It kinda looks like it
	# isn't needed, but just in case, please keep it in for now.
	objdump_finish

	# Did we find what we were looking for?  If not, flunk it.
	if {[istarget hppa*64*-*-*]
	    || [istarget hppa*-*-*elf*] || [istarget hppa*-*-linux*]} then {
	    if [expr $x==8] then { pass $testname } else { fail $testname }
	} else {
	    if [expr $x==3] then { pass $testname } else { fail $testname }
	}
    }
}

proc do_function_reloc_bug {} {
    set testname "funcrelocbug.s: Test for reloc bug in non-plabel function reference (part 2)"
    set x 0

    if [gas_test_old "funcrelocbug.s" "" "Test for reloc bug in non-plabel function reference (part 1)"] {
	objdump_start_no_subdir "a.out" "-r"

	# Make sure GAS generated a correct relocation for the reference.
	# branch/call
	while 1 {
	    expect {
	        -re "^0+cc\[^\n\]*f2___4\[^\n+\]*\n" 
		    { set x [expr $x+1] }
	        -re "^0+d0\[^\n\]*f2___4\[^\n+\]*\n"  
		    { set x [expr $x+1] }
	        -re "\[^\n\]*\n"		{ }
	        timeout				{ perror "timeout\n"; break }
	        eof				{ break }
            }
	}

	# This was intended to do any cleanup necessary.  It kinda looks like it
	# isn't needed, but just in case, please keep it in for now.
	objdump_finish

	# Did we find what we were looking for?  If not, flunk it.
	if [expr $x==2] then { pass $testname } else { fail $testname }

	set testname "funcrelocbug.s: Test for reloc bug in non-plabel function reference (part3)"
	set x 0

	objdump_start_no_subdir "a.out" "--prefix-addresses -d"
	# Make sure we didn't put anything in the instruction itself!
	while 1 {
	    expect {
	        -re "^0+cc\[^\n\]*ldil 0,r20\[^\n\]*\n" 
		    { set x [expr $x+1] }
	        -re "^0+d0\[^\n\]*ldo 0\[\(\]+r20\[\)\]+,r19\[^\n\]*\n" 
		    { set x [expr $x+1] }
	        -re "\[^\n\]*\n"		{ }
	        timeout				{ perror "timeout\n"; break }
	        eof				{ break }
	    }
	}

	# This was intended to do any cleanup necessary.  It kinda looks like it
	# isn't needed, but just in case, please keep it in for now.
	objdump_finish

	# Did we find what we were looking for?  If not, flunk it.
	if [expr $x==2] then { pass $testname } else { fail $testname }
    }

}

proc do_r_no_reloc {} {
    set testname "r_no_reloc.s: Test for reloc bug in 4-byte R_NO_RELCOATION fixups (part 2)"
    set x 0

    if [gas_test_old "r_no_reloc.s" "" "Test for reloc bug in 4-byte R_NO_RELOCATION fixups (part 1)"] {
	objdump_start_no_subdir "a.out" "-r"

	# Make sure GAS generated a correct relocation for the reference.
	while 1 {
	    expect {
	        -re "^0+c0004\[^\n\]*PLABEL\[^\n]*g\[^\n\]*\n" 
		    { set x [expr $x+1] }
	        -re "\[^\n\]*\n"		{ }
	        timeout				{ perror "timeout\n"; break }
	        eof				{ break }
            }
	}

	# This was intended to do any cleanup necessary.  It kinda looks like it
	# isn't needed, but just in case, please keep it in for now.
	objdump_finish

	# Did we find what we were looking for?  If not, flunk it.
	if [expr $x==1] then { pass $testname } else { fail $testname }

    }
}

proc do_pic_relocation_test {} {
    set testname "picreloc.s: Test for proper PIC relocation (part 2)"
    set x 0

    # ELF doesn't really handle extra sections too well...
    if {[istarget hppa*64*-*-*]
	|| [istarget hppa*-*-*elf*] || [istarget hppa*-*-linux*]} then {
	return;
    }

    gas_start "picreloc.s" "-al"

    while 1 {
	expect {
	    -re "^ +\[0-9\]+ 0000 00000004\[^\n\]*\n"	{ set x [expr $x+1] }
	    -re "\[^\n\]*\n"				{ }
	    timeout				{ perror "timeout\n"; break }
	    eof					{ break }
	}
    }

    # This was intended to do any cleanup necessary.  It kinda looks like it
    # isn't needed, but just in case, please keep it in for now.
    gas_finish

    # Did we find what we were looking for?  If not, flunk it.
    if [expr $x==1] then { pass $testname } else { fail $testname }
}

proc do_apply_test {} {
    set testname "applybug.s: Test for proper fixup application (part 2)"
    set x 0

    # ELF doesn't really handle extra sections too well...
    if {[istarget hppa*64*-*-*]
	|| [istarget hppa*-*-*elf*] || [istarget hppa*-*-linux*]} then {
	return;
    }

    gas_start "applybug.s" "-al"

    while 1 {
	expect {
	    -re "^ +\[0-9\]+ 0000 00000000\[^\n\]*\n"	{ set x [expr $x+1] }
	    -re "^ +\[0-9\]+ 0004 00000000\[^\n\]*\n"	{ set x [expr $x+1] }
	    -re "^ +\[0-9\]+ 0008 00000000\[^\n\]*\n"	{ set x [expr $x+1] }
	    -re "\[^\n\]*\n"				{ }
	    timeout				{ perror "timeout\n"; break }
	    eof					{ break }
	}
    }

    # This was intended to do any cleanup necessary.  It kinda looks like it
    # isn't needed, but just in case, please keep it in for now.
    gas_finish

    # Did we find what we were looking for?  If not, flunk it.
    if [expr $x==3] then { pass $testname } else { fail $testname }
}

if [istarget hppa*-*-*] then {
    # Make sure we put the right relocation entry on a BLE instruction.
    do_ble_relocation_test

    # Make sure relocation reductions are not too agressive about
    # adjusting relocations against some symbols.
    do_relocation_reduction_tests

    # Check that mode selectors on a ble instruction actually work.
    do_ble_mode_selector_test

    # Check that we take the -8 adjustment into account when zeroing
    # out the displacement field in a ble instruction with a reloc
    do_ble_relocation_test

    # 1.36 simply didn't generate all the plabels it should have.  Make
    # sure gas-2 does.
    do_plabel_relocation_test

    # Make sure a field selector only effects the current instruction
    # or assembler directive.
    do_selector_scope_test

    # This should really generate a relocation.  It would make life much
    # easier on the optimizing linker.  Until then just make sure the 
    # difference is computed correctly.
    do_local_label_as_operand_test

    # GAS2 incorrectly generated R_EXIT relocations when .exit directives
    # were not in the source code.
    do_exit_relocation_test

    # GAS2 incorrectly thought it could apply a fixup for a pc-relative
    # branch/call which crossed different subspaces.
    # Also check that the assembled instruction is correct
    do_cross_space_fixup_test_1
    do_cross_space_fixup_test_2

    # Make sure we switch rounding modes correctly
    do_round_mode_test

    # Test for a bug found when a function was used in a non-branching
    # instruction *without* a plabel (for portable runtime model)
    do_function_reloc_bug

    # Test for an off-by-one bug in the handling of 4-byte R_NO_RELOCATION
    # fixups.
    do_r_no_reloc

    # Test a relocation problem which shows up when building shared
    # libraries in SOM
    do_pic_relocation_test

    # Test a problem with md_apply_fix that was introduced when fixing
    # the pic relocation test.
    do_apply_test

    # Make sure gas doesn't resolve long-calls which are to be fixed
    # by the linker
    gas_test "longcall.s" "" "" "Avoid resolving long-calls"
}
@


1.5
log
@resolve conflicts.
@
text
@@


1.4
log
@Resolve other problems that dumb cvs can't find out by itself.

(trivial part done, `interesting' patches remain)
@
text
@d30 2
a31 1
        if ![istarget hppa*-*-*elf*] then {
d36 2
a37 1
		    -re "^0+4\[^\n\]*ABS_CALL\[^\n\]*\n"	{ set x 1 }
d48 1
a48 2
		    -re "^0+\[^\n\]*DIR21L\[^\n\]*\n"	{ set x 1 }
		    -re "^0+4\[^\n\]*DIR17R\[^\n\]*\n"	{ set x 1 }
d69 2
a70 1
    if [istarget hppa*w-*-*] then {
d247 1
a247 1
    if [istarget hppa*w-*-*] then {
d257 1
a257 1
        if [istarget hppa*-*-*elf*] then {
d329 2
a330 1
    if [istarget hppa*-*-*elf*] then {
d362 3
a364 6
    if [istarget hppa*w-*-*] then {
      return;
    }

    # ELF (osf) doesn't really handle extra sections too well...
    if [istarget hppa*-*-*elf*] then {
d396 3
a398 6
    if [istarget hppa*w-*-*] then {
      return;
    }

    # ELF (osf) doesn't really handle extra sections too well...
    if [istarget hppa*-*-*elf*] then {
d431 2
a432 1
	if { [istarget hppa*-*-*elf*] || [istarget hppa*w-*-*] } then {
d485 2
a486 1
	if {[istarget hppa*-*-*elf*] || [istarget hppa*w-*-*] } then {
d581 3
a583 6
    if [istarget hppa*w-*-*] then {
      return;
    }

    # ELF (osf) doesn't really handle extra sections too well...
    if [istarget hppa*-*-*elf*] then {
d607 1
a607 1
    set testname "applybug.s: Test for proper fixup appliation (part 2)"
d610 3
a612 2
    # ELF (osf) doesn't really handle extra sections too well...
    if [istarget hppa*-*-*elf*] then {
d636 1
@


1.3
log
@Help stupid cvs fixing basic conflicts.
@
text
@d1 1
a1 1
# Copyright (C) 1993 Free Software Foundation, Inc.
d15 1
a15 1
# Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA 02111-1307, USA.  */
@


1.2
log
@Merge to Cygnus 961112 + add some support (not ready) for shared libs
@
text
@d35 1
a35 1
		    -re "^00000004\[^\n\]*ABS_CALL\[^\n\]*\n"	{ set x 1 }
d46 2
a47 2
		    -re "^00000000\[^\n\]*DIR21L\[^\n\]*\n"	{ set x 1 }
		    -re "^00000004\[^\n\]*DIR17R\[^\n\]*\n"	{ set x 1 }
d68 4
d80 1
a80 1
		-re "^00000004\[^\n\]*PLABEL\[^\n\]*foo\[^\n\]*\n"
d82 1
a82 1
		-re "^00000014\[^\n\]*PCREL\[^\n\]*foo\[^\n\]*\n"
d101 1
a101 1
    if [gas_test_old "reduce2.s" "" "More relocatoin  reductions (part1)"] then {
d108 1
a108 1
		-re "^00000004\[^\n\]*DLT\[^\n\]*L.C0000\[^\n\]*\n"
d110 1
a110 1
		-re "^0000001c\[^\n\]*DLT\[^\n\]*L.C0000\[^\n\]*\n"
d112 1
a112 1
		-re "^00000030\[^\n\]*DLT\[^\n\]*L.C0001\[^\n\]*\n"
d114 1
a114 1
		-re "^00000048\[^\n\]*DLT\[^\n\]*L.C0001\[^\n\]*\n"
d141 1
a141 1
		-re "^0000000c\[^\n\]*yabba\[^\n\+\]*\n"
d143 1
a143 1
		-re "^0000000c\[^\n\]*yabba\+\[^\n\]*\n"
d145 1
a145 1
		-re "^00000010\[^\n\]*yabba\[^\n\+\]*\n"
d147 1
a147 1
		-re "^00000010\[^\n\]*yabba\+\[^\n\]*\n"
d222 1
a222 1
		-re "^00000000\[^\n\]*PLABEL\[^\n\]*\n"
d224 1
a224 1
		-re "^00000004\[^\n\]*PLABEL\[^\n\]*\n"
d245 4
d258 1
a258 1
	            -re "^00000014\[^\n\]*DIR32\[^\n\]*\n"
d260 1
a260 1
		    -re "^00000014\[^\n\]*PLABEL\[^\n\]*foo\[^\n\]*\n"
d270 1
a270 1
	            -re "^00000014\[^\n\]*DATA_ONE\[^\n\]*\n"
d272 1
a272 1
		    -re "^00000014\[^\n\]*PLABEL\[^\n\]*foo\[^\n\]*\n"
d301 1
a301 1
	        -re "^0000002c\[^\n\]*0x00000024\[^\n\]*\n" 
d303 1
a303 1
	        -re "^00000030\[^\n\]*0x00000024\[^\n\]*\n" 
d338 1
a338 1
	        -re "^00000000\[^\n\]*R_EXIT\[^\n\]*\n" 
d359 4
d375 1
a375 1
	        -re "^00000000\[^\n\]*PCREL_CALL\[^\n\]*\n" 
d396 4
d434 1
a434 1
	if [istarget hppa*-*-*elf*] then {
d437 1
a437 1
	            -re "^00000000\[^\n\]*DIR21L\[^\n\]*\n"
d439 1
a439 1
	            -re "^00000004\[^\n\]*DIR14R\[^\n\]*\n" 
d441 1
a441 1
	            -re "^00000008\[^\n\]*DIR21L\[^\n\]*\n"
d443 1
a443 1
	            -re "^0000000c\[^\n\]*DIR14R\[^\n\]*\n" 
d445 1
a445 1
	            -re "^00000010\[^\n\]*DIR21L\[^\n\]*\n"
d447 1
a447 1
	            -re "^00000014\[^\n\]*DIR14R\[^\n\]*\n" 
d449 1
a449 1
	            -re "^00000018\[^\n\]*DIR21L\[^\n\]*\n"
d451 1
a451 1
	            -re "^0000001c\[^\n\]*DIR14R\[^\n\]*\n" 
d461 1
a461 1
	            -re "^00000000\[^\n\]*R_R_MODE\[^\n\]*\n"
d463 1
a463 1
	            -re "^00000004\[^\n\]*R_R_MODE\[^\n\]*\n" 
d465 1
a465 1
	            -re "^00000008\[^\n\]*R_N_MODE\[^\n\]*\n"
d467 1
a467 1
	            -re "^0000000c\[^\n\]*R_N_MODE\[^\n\]*\n" 
d469 1
a469 1
	            -re "^00000010\[^\n\]*R_R_MODE\[^\n\]*\n"
d471 1
a471 1
	            -re "^00000014\[^\n\]*R_R_MODE\[^\n\]*\n" 
d473 1
a473 1
	            -re "^0000001c\[^\n\]*R_R_MODE\[^\n\]*\n" 
d487 1
a487 1
	if [istarget hppa*-*-*elf*] then {
d506 1
a506 1
	        -re "^000000cc\[^\n\]*f2___4\[^\n+\]*\n" 
d508 1
a508 1
	        -re "^000000d0\[^\n\]*f2___4\[^\n+\]*\n"  
d530 1
a530 1
	        -re "^000000cc\[^\n\]*ldil 0,r20\[^\n\]*\n" 
d532 1
a532 1
	        -re "^000000d0\[^\n\]*ldo 0\[\(\]+r20\[\)\]+,r19\[^\n\]*\n" 
d560 1
a560 1
	        -re "^000c0004\[^\n\]*PLABEL\[^\n]*g\[^\n\]*\n" 
d581 4
@


1.1
log
@Initial revision
@
text
@d510 1
a510 1
	objdump_start_no_subdir "a.out" "-d"
@


1.1.1.1
log
@Initial GNU binutils 2.6 import
@
text
@@


1.1.1.2
log
@Import of 961112 Cygnus binutils+gas+ld+gdb+gprof
@
text
@d510 1
a510 1
	objdump_start_no_subdir "a.out" "--prefix-addresses -d"
@


1.1.1.3
log
@Import of binutils-2.8.1 from Cygnus/FSF
@
text
@d1 1
a1 1
# Copyright (C) 1993, 1996, 1997 Free Software Foundation, Inc.
d15 1
a15 1
# Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA 02111-1307, USA.  
@


1.1.1.4
log
@Import binutils-2.10
- only the binutils package (no gdb here)
- don't import libiberty and texinfo, they are elsewhere
- remove all .info* generated files
@
text
@d35 1
a35 1
		    -re "^0+4\[^\n\]*ABS_CALL\[^\n\]*\n"	{ set x 1 }
d46 2
a47 2
		    -re "^0+\[^\n\]*DIR21L\[^\n\]*\n"	{ set x 1 }
		    -re "^0+4\[^\n\]*DIR17R\[^\n\]*\n"	{ set x 1 }
a67 4
    if [istarget hppa*w-*-*] then {
      return;
    }

d76 1
a76 1
		-re "^0+4\[^\n\]*PLABEL\[^\n\]*foo\[^\n\]*\n"
d78 1
a78 1
		-re "^0+14\[^\n\]*PCREL\[^\n\]*foo\[^\n\]*\n"
d97 1
a97 1
    if [gas_test_old "reduce2.s" "" "More relocation  reductions (part1)"] then {
d104 1
a104 1
		-re "^0+4\[^\n\]*DLT\[^\n\]*L.C0000\[^\n\]*\n"
d106 1
a106 1
		-re "^0+1c\[^\n\]*DLT\[^\n\]*L.C0000\[^\n\]*\n"
d108 1
a108 1
		-re "^0+30\[^\n\]*DLT\[^\n\]*L.C0001\[^\n\]*\n"
d110 1
a110 1
		-re "^0+48\[^\n\]*DLT\[^\n\]*L.C0001\[^\n\]*\n"
d137 1
a137 1
		-re "^0+c\[^\n\]*yabba\[^\n\+\]*\n"
d139 1
a139 1
		-re "^0+c\[^\n\]*yabba\+\[^\n\]*\n"
d141 1
a141 1
		-re "^0+10\[^\n\]*yabba\[^\n\+\]*\n"
d143 1
a143 1
		-re "^0+10\[^\n\]*yabba\+\[^\n\]*\n"
d218 1
a218 1
		-re "^0+\[^\n\]*PLABEL\[^\n\]*\n"
d220 1
a220 1
		-re "^0+4\[^\n\]*PLABEL\[^\n\]*\n"
a240 4
    if [istarget hppa*w-*-*] then {
      return;
    }

d250 1
a250 1
	            -re "^0+14\[^\n\]*DIR32\[^\n\]*\n"
d252 1
a252 1
		    -re "^0+14\[^\n\]*PLABEL\[^\n\]*foo\[^\n\]*\n"
d262 1
a262 1
	            -re "^0+14\[^\n\]*DATA_ONE\[^\n\]*\n"
d264 1
a264 1
		    -re "^0+14\[^\n\]*PLABEL\[^\n\]*foo\[^\n\]*\n"
d293 1
a293 1
	        -re "^0+2c\[^\n\]*0x0+24\[^\n\]*\n" 
d295 1
a295 1
	        -re "^0+30\[^\n\]*0x0+24\[^\n\]*\n" 
d330 1
a330 1
	        -re "^0+\[^\n\]*R_EXIT\[^\n\]*\n" 
a350 4
    if [istarget hppa*w-*-*] then {
      return;
    }

d363 1
a363 1
	        -re "^0+\[^\n\]*PCREL_CALL\[^\n\]*\n" 
a383 4
    if [istarget hppa*w-*-*] then {
      return;
    }

d418 1
a418 1
	if { [istarget hppa*-*-*elf*] || [istarget hppa*w-*-*] } then {
d421 1
a421 1
	            -re "^0+\[^\n\]*DIR21L\[^\n\]*\n"
d423 1
a423 1
	            -re "^0+4\[^\n\]*DIR14R\[^\n\]*\n" 
d425 1
a425 1
	            -re "^0+8\[^\n\]*DIR21L\[^\n\]*\n"
d427 1
a427 1
	            -re "^0+c\[^\n\]*DIR14R\[^\n\]*\n" 
d429 1
a429 1
	            -re "^0+10\[^\n\]*DIR21L\[^\n\]*\n"
d431 1
a431 1
	            -re "^0+14\[^\n\]*DIR14R\[^\n\]*\n" 
d433 1
a433 1
	            -re "^0+18\[^\n\]*DIR21L\[^\n\]*\n"
d435 1
a435 1
	            -re "^0+1c\[^\n\]*DIR14R\[^\n\]*\n" 
d445 1
a445 1
	            -re "^0+\[^\n\]*R_R_MODE\[^\n\]*\n"
d447 1
a447 1
	            -re "^0+4\[^\n\]*R_R_MODE\[^\n\]*\n" 
d449 1
a449 1
	            -re "^0+8\[^\n\]*R_N_MODE\[^\n\]*\n"
d451 1
a451 1
	            -re "^0+c\[^\n\]*R_N_MODE\[^\n\]*\n" 
d453 1
a453 1
	            -re "^0+10\[^\n\]*R_R_MODE\[^\n\]*\n"
d455 1
a455 1
	            -re "^0+14\[^\n\]*R_R_MODE\[^\n\]*\n" 
d457 1
a457 1
	            -re "^0+1c\[^\n\]*R_R_MODE\[^\n\]*\n" 
d471 1
a471 1
	if {[istarget hppa*-*-*elf*] || [istarget hppa*w-*-*] } then {
d490 1
a490 1
	        -re "^0+cc\[^\n\]*f2___4\[^\n+\]*\n" 
d492 1
a492 1
	        -re "^0+d0\[^\n\]*f2___4\[^\n+\]*\n"  
d514 1
a514 1
	        -re "^0+cc\[^\n\]*ldil 0,r20\[^\n\]*\n" 
d516 1
a516 1
	        -re "^0+d0\[^\n\]*ldo 0\[\(\]+r20\[\)\]+,r19\[^\n\]*\n" 
d544 1
a544 1
	        -re "^0+c0004\[^\n\]*PLABEL\[^\n]*g\[^\n\]*\n" 
a564 4

    if [istarget hppa*w-*-*] then {
      return;
    }
@


1.1.1.5
log
@Import binutils-2.11.2
- only the binutils package (no gdb here)
- don't import libiberty and texinfo, they are elsewhere
- remove all .info* generated files
@
text
@d30 1
a30 2
        if {[istarget hppa*64*-*-*]
	    || [istarget hppa*-*-*elf*] || [istarget hppa*-*-linux*]} then {
d35 1
a35 2
		    -re "^0+\[^\n\]*DIR21L\[^\n\]*\n"	{ set x 1 }
		    -re "^0+4\[^\n\]*DIR17R\[^\n\]*\n"	{ set x 1 }
d46 2
a47 1
		    -re "^0+4\[^\n\]*ABS_CALL\[^\n\]*\n"	{ set x 1 }
d68 1
a68 2
    if {[istarget hppa*64*-*-*]
        || [istarget hppa*-*-*elf*] || [istarget hppa*-*-linux*]} then {
d245 1
a245 1
    if [istarget hppa*64*-*-*] then {
d255 1
a255 1
        if {[istarget hppa*-*-*elf*] || [istarget hppa*-*-linux*]} then {
d327 1
a327 2
    if {[istarget hppa*64*-*-*]
	|| [istarget hppa*-*-*elf*] || [istarget hppa*-*-linux*]} then {
d359 6
a364 3
    # ELF doesn't really handle extra sections too well...
    if {[istarget hppa*64*-*-*]
	|| [istarget hppa*-*-*elf*] || [istarget hppa*-*-linux*]} then {
d396 6
a401 3
    # ELF doesn't really handle extra sections too well...
    if {[istarget hppa*64*-*-*]
	|| [istarget hppa*-*-*elf*] || [istarget hppa*-*-linux*]} then {
d434 1
a434 2
	if {[istarget hppa*64*-*-*]
	    || [istarget hppa*-*-*elf*] || [istarget hppa*-*-linux*]} then {
d487 1
a487 2
	if {[istarget hppa*64*-*-*]
	    || [istarget hppa*-*-*elf*] || [istarget hppa*-*-linux*]} then {
d582 6
a587 3
    # ELF doesn't really handle extra sections too well...
    if {[istarget hppa*64*-*-*]
	|| [istarget hppa*-*-*elf*] || [istarget hppa*-*-linux*]} then {
d611 1
a611 1
    set testname "applybug.s: Test for proper fixup application (part 2)"
d614 2
a615 3
    # ELF doesn't really handle extra sections too well...
    if {[istarget hppa*64*-*-*]
	|| [istarget hppa*-*-*elf*] || [istarget hppa*-*-linux*]} then {
a638 1

@


