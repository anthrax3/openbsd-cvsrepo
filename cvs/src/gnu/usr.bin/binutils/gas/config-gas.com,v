head	1.2;
access;
symbols
	OPENBSD_6_2:1.2.0.72
	OPENBSD_6_2_BASE:1.2
	OPENBSD_6_1:1.2.0.70
	OPENBSD_6_1_BASE:1.2
	OPENBSD_6_0:1.2.0.66
	OPENBSD_6_0_BASE:1.2
	OPENBSD_5_9:1.2.0.62
	OPENBSD_5_9_BASE:1.2
	OPENBSD_5_8:1.2.0.64
	OPENBSD_5_8_BASE:1.2
	OPENBSD_5_7:1.2.0.56
	OPENBSD_5_7_BASE:1.2
	OPENBSD_5_6:1.2.0.60
	OPENBSD_5_6_BASE:1.2
	OPENBSD_5_5:1.2.0.58
	OPENBSD_5_5_BASE:1.2
	OPENBSD_5_4:1.2.0.54
	OPENBSD_5_4_BASE:1.2
	OPENBSD_5_3:1.2.0.52
	OPENBSD_5_3_BASE:1.2
	OPENBSD_5_2:1.2.0.50
	OPENBSD_5_2_BASE:1.2
	OPENBSD_5_1_BASE:1.2
	OPENBSD_5_1:1.2.0.48
	OPENBSD_5_0:1.2.0.46
	OPENBSD_5_0_BASE:1.2
	OPENBSD_4_9:1.2.0.44
	OPENBSD_4_9_BASE:1.2
	OPENBSD_4_8:1.2.0.42
	OPENBSD_4_8_BASE:1.2
	OPENBSD_4_7:1.2.0.38
	OPENBSD_4_7_BASE:1.2
	OPENBSD_4_6:1.2.0.40
	OPENBSD_4_6_BASE:1.2
	OPENBSD_4_5:1.2.0.36
	OPENBSD_4_5_BASE:1.2
	OPENBSD_4_4:1.2.0.34
	OPENBSD_4_4_BASE:1.2
	OPENBSD_4_3:1.2.0.32
	OPENBSD_4_3_BASE:1.2
	OPENBSD_4_2:1.2.0.30
	OPENBSD_4_2_BASE:1.2
	OPENBSD_4_1:1.2.0.28
	OPENBSD_4_1_BASE:1.2
	OPENBSD_4_0:1.2.0.26
	OPENBSD_4_0_BASE:1.2
	OPENBSD_3_9:1.2.0.24
	OPENBSD_3_9_BASE:1.2
	OPENBSD_3_8:1.2.0.22
	OPENBSD_3_8_BASE:1.2
	OPENBSD_3_7:1.2.0.20
	OPENBSD_3_7_BASE:1.2
	BINUTILS_2_15:1.1.1.3
	OPENBSD_3_6:1.2.0.18
	OPENBSD_3_6_BASE:1.2
	BINUTILS-2_14:1.1.1.3
	OPENBSD_3_5:1.2.0.16
	OPENBSD_3_5_BASE:1.2
	OPENBSD_3_4:1.2.0.14
	OPENBSD_3_4_BASE:1.2
	OPENBSD_3_3:1.2.0.12
	OPENBSD_3_3_BASE:1.2
	OPENBSD_3_2:1.2.0.10
	OPENBSD_3_2_BASE:1.2
	binutils-2_11_2:1.1.1.3
	OPENBSD_3_1:1.2.0.8
	OPENBSD_3_1_BASE:1.2
	OPENBSD_3_0:1.2.0.6
	OPENBSD_3_0_BASE:1.2
	BINUTILS-2_10_1:1.1.1.3
	OPENBSD_2_9:1.2.0.4
	OPENBSD_2_9_BASE:1.2
	OPENBSD_2_8:1.2.0.2
	OPENBSD_2_8_BASE:1.2
	BINUTILS-2_10:1.1.1.3
	OPENBSD_2_7:1.1.0.18
	OPENBSD_2_7_BASE:1.1
	new-binutils:1.1.0.16
	OPENBSD_2_6:1.1.0.14
	OPENBSD_2_6_BASE:1.1
	OPENBSD_2_5:1.1.0.12
	OPENBSD_2_5_BASE:1.1
	OPENBSD_2_4:1.1.0.10
	OPENBSD_2_4_BASE:1.1
	OPENBSD_2_3:1.1.0.8
	OPENBSD_2_3_BASE:1.1
	OPENBSD_2_2:1.1.0.6
	OPENBSD_2_2_BASE:1.1
	BINUTILS-2_8_1:1.1.1.2
	OPENBSD_2_1:1.1.0.4
	OPENBSD_2_1_BASE:1.1
	CYGNUS-961112:1.1.1.1
	OPENBSD_2_0:1.1.0.2
	OPENBSD_2_0_BASE:1.1
	CYGNUS-960904:1.1.1.1
	CYGNUS-960609:1.1.1.1
	CYGNUS:1.1.1
	FSF_2_6:1.1.1.1
	FSF:1.1.1;
locks; strict;
comment	@# @;


1.2
date	2000.09.12.19.11.40;	author espie;	state Exp;
branches;
next	1.1;

1.1
date	96.01.08.11.05.32;	author niklas;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	96.01.08.11.05.32;	author niklas;	state Exp;
branches;
next	1.1.1.2;

1.1.1.2
date	97.05.29.09.21.37;	author niklas;	state Exp;
branches;
next	1.1.1.3;

1.1.1.3
date	2000.09.12.14.46.08;	author espie;	state Exp;
branches;
next	;


desc
@@


1.2
log
@Help stupid cvs fixing basic conflicts.
@
text
@$!config-gas.com
$! This file sets things up to build gas on a VMS system to generate object
$! files for a VMS system.  We do not use the configure script, since we
$! do not have /bin/sh to execute it.
$!
$!
$ gas_host="vms"
$ arch_indx = 1 + ((f$getsyi("CPU").ge.128).and.1)	! vax==1, alpha==2
$ arch = f$element(arch_indx,"|","|VAX|Alpha|")
$ if arch.eqs."VAX"
$ then
$  cpu_type="vax"
$  obj_format="vms"
$  atof="vax"
$ else
$  cpu_type="alpha"
$  obj_format="evax"
$  atof="ieee"
$ endif
$ emulation="generic"
$!
$	DELETE	= "delete/noConfirm"
$	ECHO	= "write sys$output"
$!
$! Target specific information
$ call make "targ-cpu.h" "[.config]tc-''cpu_type'.h"
$ call make "targ-env.h" "[.config]te-''emulation'.h"
$!
$! Code to handle the object file format.
$ call make "obj-format.h" "[.config]obj-''obj_format'.h"
$!
$! (not currently used for vax or alpha)
$ call make "itbl-cpu.h" "[.config]itbl-''cpu_type'.h"
$!
$!
$! Create the file version.opt, which helps identify the executable.
$!
$if f$trnlnm("IFILE$").nes."" then  close/noLog ifile$
$search CONFIGURE.IN "AM_INIT_AUTOMAKE"/Exact/Output=config-gas-tmp.tmp
$open ifile$ config-gas-tmp.tmp
$read ifile$ line
$close ifile$
$DELETE config-gas-tmp.tmp;*
$! Discard "AM_INIT_AUTOMAKE(gas, " and ")" parts.
$ijk=f$locate(",",line)+2
$line=f$extract(ijk,f$length(line)-ijk,line)
$ijk=f$locate(")",line)
$line=f$extract(0,ijk,line)
$!
$ if f$search("version.opt").nes."" then DELETE version.opt;*
$copy _NL: version.opt
$open/Append ifile$ version.opt
$write ifile$ "identification="+""""+line+""""
$close ifile$
$!
$! Now write config.h.
$!
$ if f$search("config.h").nes."" then DELETE config.h;*
$copy _NL: config.h
$open/Append ifile$ config.h
$write ifile$ "/* config.h.  Generated by config-gas.com. */
$write ifile$ "#ifndef VERSION"
$write ifile$ "#define VERSION      """,line,""""
$write ifile$ "#endif"
$write ifile$ "/*--*/"
$if arch .eqs. "VAX"
$then
$append [.config]vms-conf.h ifile$:
$else
$ append [.config]vms-a-conf.h ifile$:
$endif
$close ifile$
$ECHO "Created config.h."
$!
$! Check for, and possibly make, header file <unistd.h>.
$!
$ if f$search("tmp-chk-h.*").nes."" then  DELETE tmp-chk-h.*;*
$!can't use simple `#include HDR' with `gcc /Define="HDR=<foo.h>"'
$!because the 2.6.[0-3] preprocessor handles it wrong (VMS-specific gcc bug)
$ create tmp-chk-h.c
int tmp_chk_h;	/* guarantee non-empty output */
#ifdef HAVE_STDIO_H
#include <stdio.h>
#endif
#ifdef HAVE_UNISTD_H
#include <unistd.h>
#endif
#ifdef HAVE_UNIXIO_H
#include <unixio.h>
#endif
#ifdef HAVE_UNIXLIB_H
#include <unixlib.h>
#endif
$ on warning then  continue
$ CHECK = "call tmp_chk_h"
$ CHECK "HAVE_STDIO_H"
$ if .not.$status
$ then	type sys$input:

? could not compile <stdio.h>.

  If you're compiling with DEC C or VAX C, create config.status as an
  empty file and start gnu make again.

  If you're compiling with GNU C, there is some setup problem and
  gas configuration cannot proceed.

$	DELETE tmp-chk-h.c;*
$	exit %x002C
$ endif
$!
$ CHECK "HAVE_UNISTD_H"
$ if .not.$status
$ then
$  if f$trnlnm("HFILE$").nes."" then  close/noLog hfile$
$  CHECK "HAVE_UNIXIO_H"
$  got_unixio = ($status .and. 1)
$  CHECK "HAVE_UNIXLIB_H"
$  got_unixlib = ($status .and. 1)
$  create []unistd.h	!with rudimentary contents
/* <unistd.h> substitute for building gas */
#ifndef UNISTD_H
#define UNISTD_H

$  open/Append hfile$ []unistd.h
$  if got_unixio
$  then  write hfile$ "#include <unixio.h>"
$  else  append sys$input: hfile$:
/* some of the routines normally prototyped in <unixio.h> */
extern int creat(), open(), close(), read(), write();
extern int access(), dup(), dup2(), fstat(), stat();
extern long lseek();
$  endif
$  write hfile$ ""
$  if got_unixlib
$  then  write hfile$ "#include <unixlib.h>"
$  else  append sys$input: hfile$:
/* some of the routines normally prototyped in <unixlib.h> */
extern char *sbrk(), *getcwd(), *cuserid();
extern int brk(), chdir(), chmod(), chown(), mkdir();
extern unsigned getuid(), umask();
$  endif
$  append sys$input: hfile$:

#endif /*UNISTD_H*/
$  close hfile$
$  ECHO "Created ""[]unistd.h""."
$ endif !gcc '#include <unistd.h>' failed
$ DELETE tmp-chk-h.c;*
$
$tmp_chk_h: subroutine
$  set noOn
$  hname = f$edit("<" + (p1 - "HAVE_" - "_H") + ".h>","LOWERCASE")
$  write sys$output "Checking for ''hname'."
$  if f$search("tmp-chk-h.obj").nes."" then  DELETE tmp-chk-h.obj;*
$  define/noLog sys$error _NL:	!can't use /User_Mode here due to gcc
$  define/noLog sys$output _NL:	! driver's use of multiple image activation
$  gcc /Include=([],[-.include]) /Define=("''p1'") tmp-chk-h.c
$!can't just check $status; gcc 2.6.[0-3] preprocessor doesn't set it correctly
$  ok = (($status.and.1).and.(f$search("tmp-chk-h.obj").nes."")) .or. %x10000000
$  deassign sys$error	!restore, more or less
$  deassign sys$output
$  if ok then  DELETE tmp-chk-h.obj;*
$  exit ok
$ endsubroutine !tmp_chk_h
$
$!
$! Done
$!
$ if f$search("config.status") .nes. "" then DELETE config.status;*
$ open/write cfile []config.status
$ write cfile "Links are now set up for use with a "+arch+" running VMS."
$ close cfile
$ type []config.status
$exit
$!
$!
$make: subroutine
$  if f$search(p1).nes."" then DELETE 'p1';*
$  create 'p1'
$  if f$trnlnm("IFILE$").nes."" then  close/noLog ifile$
$  open/Append ifile$ 'p1'
$  write ifile$ "#include ""''f$string(p2 - "[.config]")'"""
$  close ifile$
$  ECHO "Created ''p1' for ''p2'."
$endsubroutine !make
@


1.1
log
@Initial revision
@
text
@d1 1
a1 1
$!
a5 2
$! If you are running this file, then obviously the host is vax-dec-vms.
$! [That's no longer obvious, but there's not much we can do about alpha yet.]
d7 14
a20 6
$gas_host="vms"
$!
$cpu_type="vax"
$emulation="generic"
$obj_format="vms"
$atof="vax"
d26 2
a27 3
$call link targ-cpu.c	[.config]tc-'cpu_type'.c
$call link targ-cpu.h	[.config]tc-'cpu_type'.h
$call link targ-env.h	[.config]te-'emulation'.h
d30 1
a30 2
$call link obj-format.h	[.config]obj-'obj_format'.h
$call link obj-format.c	[.config]obj-'obj_format'.c
d32 2
a33 2
$! Code to handle floating point.
$call link atof-targ.c	[.config]atof-'atof'.c
d39 1
a39 1
$search Makefile.in "VERSION="/Exact/Output=config-gas-tmp.tmp
d44 2
a45 2
$! Discard "VERSION=" and "\n" parts.
$ijk=f$locate("=",line)+1
d47 1
a47 2
$! [what "\n" part??  this seems to be useless, but is benign]
$ijk=f$locate("\n",line)
d62 2
a63 2
$write ifile$ "#ifndef GAS_VERSION"
$write ifile$ "#define GAS_VERSION      """,line,""""
d66 2
d69 3
d101 6
a106 1
  Since gcc is not set up correctly, gas configuration cannot proceed.
d171 4
a174 3
$ create config.status
Links are now set up for use with a vax running VMS.
$ type config.status
d178 1
a178 2
$link:
$subroutine
d180 7
a186 3
$  copy 'p2' 'p1'
$  ECHO "Copied ''f$edit(p2,"LOWERCASE")' to ''f$edit(p1,"LOWERCASE")'."
$endsubroutine
@


1.1.1.1
log
@Initial GNU binutils 2.6 import
@
text
@@


1.1.1.2
log
@Import of binutils-2.8.1 from Cygnus/FSF
@
text
@d6 2
a10 4
$arch_indx = 1 + ((f$getsyi("CPU").ge.128).and.1)      ! vax==1, alpha==2
$arch = f$element(arch_indx,"|","|VAX|Alpha|")
$if arch .eqs. "VAX"
$then
d12 1
a14 7
$else
$ cpu_type="alpha"
$ obj_format="evax"
$ atof="ieee"
$endif
$
$emulation="generic"
a62 2
$if arch .eqs. "VAX"
$then
a63 3
$else
$ append [.config]vms-a-conf.h ifile$:
$endif
d158 3
a160 4
$ open/write cfile []config.status
$ write cfile "Links are now set up for use with a "+arch+" running VMS."
$ close cfile
$ type []config.status
@


1.1.1.3
log
@Import binutils-2.10
- only the binutils package (no gdb here)
- don't import libiberty and texinfo, they are elsewhere
- remove all .info* generated files
@
text
@d1 1
a1 1
$!config-gas.com
d7 16
a22 14
$ gas_host="vms"
$ arch_indx = 1 + ((f$getsyi("CPU").ge.128).and.1)	! vax==1, alpha==2
$ arch = f$element(arch_indx,"|","|VAX|Alpha|")
$ if arch.eqs."VAX"
$ then
$  cpu_type="vax"
$  obj_format="vms"
$  atof="vax"
$ else
$  cpu_type="alpha"
$  obj_format="evax"
$  atof="ieee"
$ endif
$ emulation="generic"
d28 3
a30 2
$ call make "targ-cpu.h" "[.config]tc-''cpu_type'.h"
$ call make "targ-env.h" "[.config]te-''emulation'.h"
d33 2
a34 1
$ call make "obj-format.h" "[.config]obj-''obj_format'.h"
d36 2
a37 2
$! (not currently used for vax or alpha)
$ call make "itbl-cpu.h" "[.config]itbl-''cpu_type'.h"
d43 1
a43 1
$search CONFIGURE.IN "AM_INIT_AUTOMAKE"/Exact/Output=config-gas-tmp.tmp
d48 2
a49 2
$! Discard "AM_INIT_AUTOMAKE(gas, " and ")" parts.
$ijk=f$locate(",",line)+2
d51 2
a52 1
$ijk=f$locate(")",line)
d67 2
a68 2
$write ifile$ "#ifndef VERSION"
$write ifile$ "#define VERSION      """,line,""""
d106 1
a106 6

  If you're compiling with DEC C or VAX C, create config.status as an
  empty file and start gnu make again.

  If you're compiling with GNU C, there is some setup problem and
  gas configuration cannot proceed.
d178 2
a179 1
$make: subroutine
d181 3
a183 7
$  create 'p1'
$  if f$trnlnm("IFILE$").nes."" then  close/noLog ifile$
$  open/Append ifile$ 'p1'
$  write ifile$ "#include ""''f$string(p2 - "[.config]")'"""
$  close ifile$
$  ECHO "Created ''p1' for ''p2'."
$endsubroutine !make
@

