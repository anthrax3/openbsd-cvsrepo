head	1.21;
access;
symbols
	OPENBSD_6_2:1.21.0.16
	OPENBSD_6_2_BASE:1.21
	OPENBSD_6_1:1.21.0.18
	OPENBSD_6_1_BASE:1.21
	OPENBSD_6_0:1.21.0.14
	OPENBSD_6_0_BASE:1.21
	OPENBSD_5_9:1.21.0.10
	OPENBSD_5_9_BASE:1.21
	OPENBSD_5_8:1.21.0.12
	OPENBSD_5_8_BASE:1.21
	OPENBSD_5_7:1.21.0.4
	OPENBSD_5_7_BASE:1.21
	OPENBSD_5_6:1.21.0.8
	OPENBSD_5_6_BASE:1.21
	OPENBSD_5_5:1.21.0.6
	OPENBSD_5_5_BASE:1.21
	OPENBSD_5_4:1.21.0.2
	OPENBSD_5_4_BASE:1.21
	OPENBSD_5_3:1.20.0.34
	OPENBSD_5_3_BASE:1.20
	OPENBSD_5_2:1.20.0.32
	OPENBSD_5_2_BASE:1.20
	OPENBSD_5_1_BASE:1.20
	OPENBSD_5_1:1.20.0.30
	OPENBSD_5_0:1.20.0.28
	OPENBSD_5_0_BASE:1.20
	OPENBSD_4_9:1.20.0.26
	OPENBSD_4_9_BASE:1.20
	OPENBSD_4_8:1.20.0.24
	OPENBSD_4_8_BASE:1.20
	OPENBSD_4_7:1.20.0.20
	OPENBSD_4_7_BASE:1.20
	OPENBSD_4_6:1.20.0.22
	OPENBSD_4_6_BASE:1.20
	OPENBSD_4_5:1.20.0.18
	OPENBSD_4_5_BASE:1.20
	OPENBSD_4_4:1.20.0.16
	OPENBSD_4_4_BASE:1.20
	OPENBSD_4_3:1.20.0.14
	OPENBSD_4_3_BASE:1.20
	OPENBSD_4_2:1.20.0.12
	OPENBSD_4_2_BASE:1.20
	OPENBSD_4_1:1.20.0.10
	OPENBSD_4_1_BASE:1.20
	OPENBSD_4_0:1.20.0.8
	OPENBSD_4_0_BASE:1.20
	OPENBSD_3_9:1.20.0.6
	OPENBSD_3_9_BASE:1.20
	OPENBSD_3_8:1.20.0.4
	OPENBSD_3_8_BASE:1.20
	OPENBSD_3_7:1.20.0.2
	OPENBSD_3_7_BASE:1.20
	BINUTILS_2_15:1.1.1.10
	OPENBSD_3_6:1.19.0.2
	OPENBSD_3_6_BASE:1.19
	BINUTILS-2_14:1.1.1.9
	OPENBSD_3_5:1.18.0.2
	OPENBSD_3_5_BASE:1.18
	OPENBSD_3_4:1.17.0.6
	OPENBSD_3_4_BASE:1.17
	OPENBSD_3_3:1.17.0.4
	OPENBSD_3_3_BASE:1.17
	OPENBSD_3_2:1.17.0.2
	OPENBSD_3_2_BASE:1.17
	binutils-2_11_2:1.1.1.8
	OPENBSD_3_1:1.15.0.2
	OPENBSD_3_1_BASE:1.15
	OPENBSD_3_0:1.14.0.6
	OPENBSD_3_0_BASE:1.14
	BINUTILS-2_10_1:1.1.1.7
	OPENBSD_2_9:1.14.0.4
	OPENBSD_2_9_BASE:1.14
	OPENBSD_2_8:1.14.0.2
	OPENBSD_2_8_BASE:1.14
	BINUTILS-2_10:1.1.1.7
	OPENBSD_2_7:1.12.0.10
	OPENBSD_2_7_BASE:1.12
	new-binutils:1.12.0.8
	OPENBSD_2_6:1.12.0.6
	OPENBSD_2_6_BASE:1.12
	OPENBSD_2_5:1.12.0.4
	OPENBSD_2_5_BASE:1.12
	OPENBSD_2_4:1.12.0.2
	OPENBSD_2_4_BASE:1.12
	OPENBSD_2_3:1.10.0.6
	OPENBSD_2_3_BASE:1.10
	OPENBSD_2_2:1.10.0.4
	OPENBSD_2_2_BASE:1.10
	BINUTILS-2_8_1:1.1.1.6
	OPENBSD_2_1:1.10.0.2
	OPENBSD_2_1_BASE:1.10
	CYGNUS-961112:1.1.1.5
	OPENBSD_2_0:1.5.0.2
	OPENBSD_2_0_BASE:1.5
	CYGNUS-960904:1.1.1.4
	CYGNUS-960609:1.1.1.3
	CYGNUS-960607:1.1.1.2
	CYGNUS:1.1.1
	FSF_2_6:1.1.1.1
	FSF:1.1.1;
locks; strict;
comment	@# @;


1.21
date	2013.07.05.21.09.21;	author miod;	state Exp;
branches;
next	1.20;

1.20
date	2004.11.02.20.44.58;	author miod;	state Exp;
branches;
next	1.19;

1.19
date	2004.05.17.21.54.18;	author drahn;	state Exp;
branches;
next	1.18;

1.18
date	2004.02.10.22.28.04;	author mickey;	state Exp;
branches;
next	1.17;

1.17
date	2002.05.13.18.33.12;	author fgsch;	state Exp;
branches;
next	1.16;

1.16
date	2002.05.13.17.07.28;	author fgsch;	state Exp;
branches;
next	1.15;

1.15
date	2002.02.13.10.00.47;	author hugh;	state Exp;
branches;
next	1.14;

1.14
date	2000.10.29.22.53.36;	author miod;	state Exp;
branches;
next	1.13;

1.13
date	2000.09.12.19.10.56;	author espie;	state Exp;
branches;
next	1.12;

1.12
date	98.08.07.02.07.48;	author rahnds;	state Exp;
branches;
next	1.11;

1.11
date	98.05.04.21.22.39;	author mickey;	state Exp;
branches;
next	1.10;

1.10
date	97.04.01.10.49.36;	author graichen;	state Exp;
branches;
next	1.9;

1.9
date	97.02.18.15.48.17;	author rahnds;	state Exp;
branches;
next	1.8;

1.8
date	96.12.12.05.16.29;	author imp;	state Exp;
branches;
next	1.7;

1.7
date	96.11.24.03.22.22;	author niklas;	state Exp;
branches;
next	1.6;

1.6
date	96.11.23.03.32.25;	author niklas;	state Exp;
branches;
next	1.5;

1.5
date	96.09.04.18.58.44;	author niklas;	state Exp;
branches;
next	1.4;

1.4
date	96.06.09.20.12.39;	author niklas;	state Exp;
branches;
next	1.3;

1.3
date	96.06.07.21.09.04;	author niklas;	state Exp;
branches;
next	1.2;

1.2
date	96.01.08.15.54.15;	author niklas;	state Exp;
branches;
next	1.1;

1.1
date	96.01.08.11.03.34;	author niklas;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	96.01.08.11.03.34;	author niklas;	state Exp;
branches;
next	1.1.1.2;

1.1.1.2
date	96.06.07.11.03.26;	author niklas;	state Exp;
branches;
next	1.1.1.3;

1.1.1.3
date	96.06.09.19.35.12;	author niklas;	state Exp;
branches;
next	1.1.1.4;

1.1.1.4
date	96.09.04.17.34.32;	author niklas;	state Exp;
branches;
next	1.1.1.5;

1.1.1.5
date	96.11.19.14.11.42;	author niklas;	state Exp;
branches;
next	1.1.1.6;

1.1.1.6
date	97.05.29.09.15.10;	author niklas;	state Exp;
branches;
next	1.1.1.7;

1.1.1.7
date	2000.09.12.14.44.56;	author espie;	state Exp;
branches;
next	1.1.1.8;

1.1.1.8
date	2002.05.13.13.12.35;	author fgsch;	state Exp;
branches;
next	1.1.1.9;

1.1.1.9
date	2004.05.17.20.42.01;	author drahn;	state Exp;
branches;
next	1.1.1.10;

1.1.1.10
date	2004.11.02.20.21.57;	author miod;	state Exp;
branches;
next	;


desc
@@


1.21
log
@VAX ELF toolchain, using `%' as the register prefix. Heavily based upon
NetBSD.
@
text
@#   Copyright (C) 1992, 1993, 1994, 1995, 1996, 1997, 1998,
#   1999, 2000, 2001, 2002, 2003, 2004 Free Software Foundation, Inc.
#
# This file is free software; you can redistribute it and/or modify it
# under the terms of the GNU General Public License as published by
# the Free Software Foundation; either version 2 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful, but
# WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
# General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program; if not, write to the Free Software
# Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA 02111-1307, USA.

##############################################################################
### WARNING: this file contains embedded tabs.  Do not run untabify on this file.

AC_INIT(move-if-change)
AC_PREREQ(2.13)
AC_CANONICAL_SYSTEM
AC_ARG_PROGRAM

# Get 'install' or 'install-sh' and its variants.
AC_PROG_INSTALL

sinclude(config/acx.m4)

### we might need to use some other shell than /bin/sh for running subshells
### If we are on Windows, search for the shell.  This will permit people
### to not have /bin/sh, but to be able to see /SOME/PATH/sh configure
### without also having to set CONFIG_SHELL.  This code will work when
### using bash, which sets OSTYPE.
case "${OSTYPE}" in
*win32*)
  if test x${CONFIG_SHELL} = x ; then
    if test ! -f /bin/sh ; then
      if test x${SHELL} != x && test -f ${SHELL} ; then
	CONFIG_SHELL=${SHELL}
	export CONFIG_SHELL
      else
	for prog in sh sh.exe bash bash.exe; do
	  IFS="${IFS=	}"; save_ifs="$IFS"; IFS="${IFS}:"
	  for dir in $PATH; do
	    test -z "$dir" && dir=.
	    if test -f $dir/$prog; then
	      CONFIG_SHELL=$dir/$prog
	      export CONFIG_SHELL
	      break
	    fi
	  done
	  IFS="$save_ifs"
	  test -n "${CONFIG_SHELL}" && break
	done
      fi
    fi
  fi
  ;;
esac

config_shell=${CONFIG_SHELL-/bin/sh}

progname=$0
# if PWD already has a value, it is probably wrong.
if test -n "$PWD" ; then PWD=`${PWDCMD-pwd}`; fi

# Export original configure arguments for use by sub-configures.  These
# will be expanded by make, so quote '$'.
tmp="$progname $@@"
sed -e 's,\$,$$,g' <<EOF_SED > conftestsed.out
$tmp
EOF_SED
TOPLEVEL_CONFIGURE_ARGUMENTS=`cat conftestsed.out`
rm -f conftestsed.out
AC_SUBST(TOPLEVEL_CONFIGURE_ARGUMENTS)

moveifchange=${srcdir}/move-if-change

# Set srcdir to "." if that's what it is.
# This is important for multilib support.
pwd=`${PWDCMD-pwd}`
srcpwd=`cd ${srcdir} ; ${PWDCMD-pwd}`
if test "${pwd}" = "${srcpwd}" ; then
  srcdir=.
fi

topsrcdir=$srcpwd

extra_host_args=
# Define the trigger file to make sure configure will re-run whenever
# the gcc version number changes.
if test "${with_gcc_version_trigger+set}" = set ; then
  gcc_version_trigger="$with_gcc_version_trigger"
  gcc_version=`grep version_string ${with_gcc_version_trigger} | sed -e 's/.*\"\([[^ \"]]*\)[[ \"]].*/\1/'`
else
  # If gcc's sources are available, define the trigger file.
  if test -f ${topsrcdir}/gcc/version.c ; then
    gcc_version_trigger=${topsrcdir}/gcc/version.c
    gcc_version=`grep version_string ${gcc_version_trigger} | sed -e 's/.*\"\([[^ \"]]*\)[[ \"]].*/\1/'`
    case "$ac_configure_args" in
      *--with-gcc-version-trigger=$gcc_version_trigger* )
        ;;
      * )
        # Add to all subconfigure arguments: build, host, and target.
        ac_configure_args="$ac_configure_args --with-gcc-version-trigger=$gcc_version_trigger"
        ;;
    esac
  fi
fi

### To add a new directory to the tree, first choose whether it is a target
### or a host dependent tool.  Then put it into the appropriate list
### (library or tools, host or target), doing a dependency sort.

# Subdirs will be configured in the order listed in build_configdirs, 
# configdirs, or target_configdirs; see the serialization section below.

# Dependency sorting is only needed when *configuration* must be done in 
# a particular order.  In all cases a dependency should be specified in 
# the Makefile, whether or not it's implicitly specified here.

# Double entries in build_configdirs, configdirs, or target_configdirs may
# cause circular dependencies and break everything horribly.

# these libraries are used by various programs built for the host environment
#
host_libs="intl mmalloc libiberty opcodes bfd readline tcl tk itcl tix libgui zlib"

# these tools are built for the host environment
# Note, the powerpc-eabi build depends on sim occurring before gdb in order to
# know that we are building the simulator.
# binutils, gas and ld appear in that order because it makes sense to run
# "make check" in that particular order.
host_tools="byacc flex bison binutils gas ld gcc sid sim gdb make patch prms send-pr gprof etc expect dejagnu ash bash bzip2 m4 autoconf automake libtool diff rcs fileutils shellutils time textutils wdiff find uudecode hello tar gzip indent recode release sed utils guile perl gawk findutils gettext zip fastjar"

# libgcj represents the runtime libraries only used by gcj.
libgcj="target-libffi \
	target-boehm-gc \
	target-zlib \
	target-qthreads \
	target-libjava"

# these libraries are built for the target environment, and are built after
# the host libraries and the host tools (which may be a cross compiler)
#
target_libraries="target-libgloss \
		target-newlib \
		target-libstdc++-v3 \
		target-libf2c \
		${libgcj} \
		target-libobjc \
		target-libada"

# these tools are built using the target libraries, and are intended to
# run only in the target environment
#
# note: any program that *uses* libraries that are in the "target_libraries"
# list belongs in this list.  those programs are also very likely
# candidates for the "native_only" list which follows
#
target_tools="target-examples target-groff target-gperf target-rda"

################################################################################

## All tools belong in one of the four categories, and are assigned above
## We assign ${configdirs} this way to remove all embedded newlines.  This
## is important because configure will choke if they ever get through.
## ${configdirs} is directories we build using the host tools.
## ${target_configdirs} is directories we build using the target tools.
#
configdirs=`echo ${host_libs} ${host_tools}`
target_configdirs=`echo ${target_libraries} ${target_tools}`

# Only make build modules if build != host.
# This should be done more generally, but at the moment it doesn't matter.
if test ${host_alias} != ${build_alias} ; then
  # This is the only build module.
  build_modules=libiberty
else
  build_modules=
fi


################################################################################

srcname="gnu development package"

# This gets set non-empty for some net releases of packages.
appdirs=""

# Define is_cross_compiler to save on calls to 'test'.
is_cross_compiler=
if test x"${host}" = x"${target}" ; then
  is_cross_compiler=no
else
  is_cross_compiler=yes
fi	

# Find the build and target subdir names.
GCC_TOPLEV_SUBDIRS

# Skipdirs are removed silently.
skipdirs=
# Noconfigdirs are removed loudly.
noconfigdirs=""

use_gnu_ld=
# Make sure we don't let GNU ld be added if we didn't want it.
if test x$with_gnu_ld = xno ; then
  use_gnu_ld=no
  noconfigdirs="$noconfigdirs ld"
fi

use_gnu_as=
# Make sure we don't let GNU as be added if we didn't want it.
if test x$with_gnu_as = xno ; then
  use_gnu_as=no
  noconfigdirs="$noconfigdirs gas"
fi

# some tools are so dependent upon X11 that if we're not building with X, 
# it's not even worth trying to configure, much less build, that tool.

case ${with_x} in
  yes | "") ;; # the default value for this tree is that X11 is available
  no)
    skipdirs="${skipdirs} tk tix itcl libgui"
    # We won't be able to build gdbtk without X.
    enable_gdbtk=no 
    ;;
  *)  echo "*** bad value \"${with_x}\" for -with-x flag; ignored" 1>&2 ;;
esac

# Some tools are only suitable for building in a "native" situation.
# Remove these if host!=target.  
native_only="autoconf automake libtool fileutils find gawk gettext gzip hello indent m4 rcs recode sed shellutils tar textutils uudecode wdiff gprof target-groff guile perl time ash bash bzip2 prms gnuserv target-gperf"

# Similarly, some are only suitable for cross toolchains.
# Remove these if host=target.
cross_only="target-libgloss target-newlib target-opcodes"

case $is_cross_compiler in
  no) skipdirs="${skipdirs} ${cross_only}" ;;
  yes) skipdirs="${skipdirs} ${native_only}" ;;
esac

# If both --with-headers and --with-libs are specified, default to
# --without-newlib.
if test x"${with_headers}" != x && test x"${with_headers} != xno \
   && test x"${with_libs}" != x && test x"${with_libs} != xno ; then
  if test x"${with_newlib}" = x ; then
    with_newlib=no
  fi
fi

# Recognize --with-newlib/--without-newlib.
case ${with_newlib} in
  no) skipdirs="${skipdirs} target-newlib" ;;
  yes) skipdirs=`echo " ${skipdirs} " | sed -e 's/ target-newlib / /'` ;;
esac

# Configure extra directories which are host specific

case "${host}" in
  *-cygwin*)
    configdirs="$configdirs libtermcap" ;;
esac

# Remove more programs from consideration, based on the host or 
# target this usually means that a port of the program doesn't
# exist yet.

case "${host}" in
  hppa*64*-*-*)
    noconfigdirs="$noconfigdirs byacc"
    ;;
  i[[3456789]]86-*-vsta)
    noconfigdirs="$noconfigdirs tcl expect dejagnu make texinfo bison patch flex byacc send-pr gprof uudecode dejagnu diff guile perl itcl tix gnuserv gettext"
    ;;
  i[[3456789]]86-*-go32* | i[[3456789]]86-*-msdosdjgpp*)
    noconfigdirs="$noconfigdirs tcl tk expect dejagnu send-pr uudecode guile itcl tix gnuserv libffi"
    ;;
  i[[3456789]]86-*-mingw32*)
    # noconfigdirs="tcl tk expect dejagnu make texinfo bison patch flex byacc send-pr uudecode dejagnu diff guile perl itcl tix gnuserv"
    noconfigdirs="$noconfigdirs expect dejagnu autoconf automake send-pr rcs guile perl texinfo libtool"
    ;;
  i[[3456789]]86-*-beos*)
    noconfigdirs="$noconfigdirs tk itcl tix libgui gdb"
    ;;
  *-*-cygwin*)
    noconfigdirs="$noconfigdirs autoconf automake send-pr rcs guile perl"
    ;;
  *-*-netbsd*)
    noconfigdirs="$noconfigdirs rcs"
    ;;
  ppc*-*-pe)
    noconfigdirs="$noconfigdirs patch diff make tk tcl expect dejagnu autoconf automake texinfo bison send-pr gprof rcs guile perl itcl tix gnuserv"
    ;;
  powerpc-*-beos*)
    noconfigdirs="$noconfigdirs tk itcl tix libgui gdb dejagnu readline"
    ;;
  *-*-darwin*)
    noconfigdirs="$noconfigdirs tk itcl tix libgui"
    ;;
esac

AC_ARG_ENABLE(libada,
[  --enable-libada        Builds libada directory],
ENABLE_LIBADA=$enableval,
ENABLE_LIBADA=yes)
if test "${ENABLE_LIBADA}" != "yes" ; then
  noconfigdirs="$noconfigdirs target-libada"
fi

# Save it here so that, even in case of --enable-libgcj, if the Java
# front-end isn't enabled, we still get libgcj disabled.
libgcj_saved=$libgcj
case $enable_libgcj in
yes)
  # If we reset it here, it won't get added to noconfigdirs in the
  # target-specific build rules, so it will be forcibly enabled
  # (unless the Java language itself isn't enabled).
  libgcj=
  ;;
no)
  # Make sure we get it printed in the list of not supported target libs.
  noconfigdirs="$noconfigdirs ${libgcj}"
  ;;
esac

case "${target}" in
  *-*-openbsd.*)
    noconfigdirs="$noconfigdirs target-libiberty"
    noconfigdirs="$noconfigdirs gdb"
   ;;
esac

case "${target}" in
  *-*-chorusos)
    noconfigdirs="$noconfigdirs target-newlib target-libgloss ${libgcj}"
    ;;
  powerpc-*-darwin*)
    noconfigdirs="$noconfigdirs bfd binutils ld gas opcodes gdb gprof"
    noconfigdirs="$noconfigdirs target-libobjc"
    ;;
  *-*-darwin*)
    noconfigdirs="$noconfigdirs bfd binutils ld gas opcodes gdb gprof"
    noconfigdirs="$noconfigdirs target-libobjc ${libgcj}"
    ;;
  *-*-freebsd[[12]] | *-*-freebsd[[12]].* | *-*-freebsd*aout*)
    noconfigdirs="$noconfigdirs target-newlib target-libgloss ${libgcj}"
    ;;
  *-*-kaos*)
    # Remove unsupported stuff on all kaOS configurations.
    skipdirs="target-libiberty ${libgcj} target-libstdc++-v3 target-libf2c target-librx"
    skipdirs="$skipdirs target-libobjc target-examples target-groff target-gperf"
    skipdirs="$skipdirs zlib fastjar target-libjava target-boehm-gc target-zlib"
    noconfigdirs="$noconfigdirs target-libgloss"
    ;;
  *-*-netbsd*)
    # Skip some stuff on all NetBSD configurations.
    noconfigdirs="$noconfigdirs target-newlib target-libiberty target-libgloss"

    # Skip some stuff that's unsupported on some NetBSD configurations.
    case "${target}" in
      i*86-*-netbsdelf*) ;;
      arm*-*-netbsdelf*) ;;
      *)
	noconfigdirs="$noconfigdirs ${libgcj}"
	;;
    esac
    ;;
  *-*-netware)
    noconfigdirs="$noconfigdirs target-libstdc++-v3 target-newlib target-libiberty target-libgloss ${libgcj}"
    ;;
  *-*-rtems*)
    noconfigdirs="$noconfigdirs target-libgloss ${libgcj}"
    case ${target} in
	h8300*-*-* | h8500-*-*)
	  noconfigdirs="$noconfigdirs target-libf2c"
          ;;
        *) ;;
    esac
    ;;
  *-*-uclinux*)
    noconfigdirs="$noconfigdirs target-newlib target-libgloss target-rda ${libgcj}"
    ;;
  *-*-vxworks*)
    noconfigdirs="$noconfigdirs target-newlib target-libgloss target-libiberty ${libgcj}"
    ;;
  alpha*-dec-osf*)
    # ld works, but does not support shared libraries.
    # newlib is not 64 bit ready.  I'm not sure about fileutils.
    # gas doesn't generate exception information.
    noconfigdirs="$noconfigdirs gas ld fileutils target-newlib target-libgloss"
    ;;
  alpha*-*-*vms*)
    noconfigdirs="$noconfigdirs gdb ld target-newlib target-libgloss ${libgcj}"
    ;;
  alpha*-*-linux*)
    # newlib is not 64 bit ready
    noconfigdirs="$noconfigdirs target-newlib target-libgloss"
    ;;
  alpha*-*-freebsd* | alpha*-*-kfreebsd*-gnu)
    noconfigdirs="$noconfigdirs target-newlib target-libgloss"
    ;;
  alpha*-*-*)
    # newlib is not 64 bit ready
    noconfigdirs="$noconfigdirs target-newlib target-libgloss ${libgcj}"
    ;;
  am33_2.0-*-linux*)
    noconfigdirs="$noconfigdirs ${libgcj} target-newlib target-libgloss"
    ;;
  sh-*-linux*)
    noconfigdirs="$noconfigdirs ${libgcj} target-newlib target-libgloss"
    ;;    
  sh*-*-pe|mips*-*-pe|*arm-wince-pe)
    noconfigdirs="$noconfigdirs ${libgcj}"
    noconfigdirs="$noconfigdirs target-examples"
    noconfigdirs="$noconfigdirs target-libiberty texinfo send-pr"
    noconfigdirs="$noconfigdirs tcl tix tk itcl libgui sim"
    noconfigdirs="$noconfigdirs expect dejagnu"
    # the C++ libraries don't build on top of CE's C libraries
    noconfigdirs="$noconfigdirs target-libstdc++-v3"
    noconfigdirs="$noconfigdirs target-newlib"
    case "${host}" in
      *-*-cygwin*) ;; # keep gdb and readline
      *) noconfigdirs="$noconfigdirs gdb readline"
	 ;;
    esac
    ;;
  arc-*-*)
    noconfigdirs="$noconfigdirs target-libgloss ${libgcj}"
    ;;
  arm-*-coff | strongarm-*-coff | xscale-*-coff)
    noconfigdirs="$noconfigdirs ${libgcj}"
    ;;
  arm-*-elf* | strongarm-*-elf* | xscale-*-elf*)
    noconfigdirs="$noconfigdirs target-libffi target-qthreads"
    ;;
  arm-*-pe*)
    noconfigdirs="$noconfigdirs target-libgloss ${libgcj}"
    ;;
  arm-*-oabi*)
    noconfigdirs="$noconfigdirs target-libgloss ${libgcj}"
    ;;
  thumb-*-coff)
    noconfigdirs="$noconfigdirs target-libgloss ${libgcj}"
    ;;
  thumb-*-elf)
    noconfigdirs="$noconfigdirs target-libgloss ${libgcj}"
    ;;
  thumb-*-oabi)
    noconfigdirs="$noconfigdirs target-libgloss ${libgcj}"
    ;;
  thumb-*-pe)
    noconfigdirs="$noconfigdirs target-libgloss ${libgcj}"
    ;;
  arm-*-riscix*)
    noconfigdirs="$noconfigdirs ld target-libgloss ${libgcj}"
    ;;
  avr-*-*)
    noconfigdirs="$noconfigdirs target-libiberty target-libstdc++-v3 ${libgcj}"
    ;;
  c4x-*-* | tic4x-*-*)
    noconfigdirs="$noconfigdirs target-libstdc++-v3 target-libgloss ${libgcj}"
    ;;
  c54x*-*-* | tic54x-*-*)
    noconfigdirs="$noconfigdirs target-libstdc++-v3 target-libgloss ${libgcj} gcc gdb newlib"
    ;;
  cris-*-*)
    noconfigdirs="$noconfigdirs ${libgcj} target-newlib target-libgloss"
    ;;
  d10v-*-*)
    noconfigdirs="$noconfigdirs target-libstdc++-v3 target-libgloss ${libgcj}"
    ;;
  d30v-*-*)
    noconfigdirs="$noconfigdirs ${libgcj} gdb"
    ;;
  fr30-*-elf*)
    noconfigdirs="$noconfigdirs ${libgcj} gdb"
    ;;
  frv-*-*)
    noconfigdirs="$noconfigdirs ${libgcj}"
    ;;
  h8300*-*-*)
    noconfigdirs="$noconfigdirs target-libgloss ${libgcj} target-libf2c"
    ;;
  h8500-*-*)
    noconfigdirs="$noconfigdirs target-libstdc++-v3 target-libgloss ${libgcj} target-libf2c"
    ;;
  hppa*64*-*-linux* | parisc*64*-*-linux*)
    # In this case, it's because the hppa64-linux target is for
    # the kernel only at this point and has no libc, and thus no
    # headers, crt*.o, etc., all of which are needed by these.
    noconfigdirs="$noconfigdirs target-zlib"
    ;;
  hppa*-*-*elf* | \
  parisc*-*-linux* | hppa*-*-linux* | \
  hppa*-*-lites* | \
  hppa*-*-openbsd* | \
  hppa*64*-*-*)
    noconfigdirs="$noconfigdirs ${libgcj}"
    # Do configure ld/binutils/gas for this case.
    ;;
  hppa*-*-*)
    # According to Alexandre Oliva <aoliva@@redhat.com>, libjava won't
    # build on HP-UX 10.20.
    noconfigdirs="$noconfigdirs ld shellutils ${libgcj}"
    ;;
  i960-*-*)
    noconfigdirs="$noconfigdirs ${libgcj} gdb"
    ;;
  ia64*-*-elf*)
    # No gdb support yet.
    noconfigdirs="$noconfigdirs tix readline mmalloc libgui itcl gdb"
    ;;
  ia64*-**-hpux*)
    # No gdb or ld support yet.
    noconfigdirs="$noconfigdirs ${libgcj} tix readline mmalloc libgui itcl gdb ld"
    ;;
  i[[3456789]]86-*-coff | i[[3456789]]86-*-elf)
    noconfigdirs="$noconfigdirs ${libgcj}"
    ;;
  i[[3456789]]86-*-freebsd* | i[[3456789]]86-*-kfreebsd*-gnu)
    noconfigdirs="$noconfigdirs target-newlib target-libgloss"
    ;;
  i[[3456789]]86-*-linux*)
    # The GCC port for glibc1 has no MD_FALLBACK_FRAME_STATE_FOR, so let's
    # not build java stuff by default.
    case "${target}" in
      *-*-*libc1*)
	noconfigdirs="$noconfigdirs ${libgcj}";;
    esac

    # This section makes it possible to build newlib natively on linux.
    # If we are using a cross compiler then don't configure newlib.
    if test x${is_cross_compiler} != xno ; then
      noconfigdirs="$noconfigdirs target-newlib"
    fi
    noconfigdirs="$noconfigdirs target-libgloss"
    # If we are not using a cross compiler, do configure newlib.
    # Note however, that newlib will only be configured in this situation
    # if the --with-newlib option has been given, because otherwise
    # 'target-newlib' will appear in skipdirs.
    ;;
  i[[3456789]]86-*-mingw32*)
    target_configdirs="$target_configdirs target-mingw"
    noconfigdirs="$noconfigdirs expect target-libgloss ${libgcj}"

    # Can't build gdb for mingw32 if not native.
    case "${host}" in
      i[[3456789]]86-*-mingw32) ;; # keep gdb tcl tk expect etc.
      *) noconfigdirs="$noconfigdirs gdb tcl tk expect itcl tix gnuserv"
         ;;
    esac
    ;;    
  *-*-cygwin*)
    target_configdirs="$target_configdirs target-libtermcap target-winsup"
    noconfigdirs="$noconfigdirs target-gperf target-libgloss ${libgcj}"
    # always build newlib.
    skipdirs=`echo " ${skipdirs} " | sed -e 's/ target-newlib / /'`

    # Can't build gdb for Cygwin if not native.
    case "${host}" in
      *-*-cygwin*) ;; # keep gdb tcl tk expect etc.
      *) noconfigdirs="$noconfigdirs gdb tcl tk expect itcl tix libgui gnuserv"
         ;;
    esac
    ;;    
  i[[3456789]]86-*-pe)
    noconfigdirs="$noconfigdirs target-libstdc++-v3 target-libgloss ${libgcj}"
    ;;
  i[[3456789]]86-*-sco3.2v5*)
    # The linker does not yet know about weak symbols in COFF,
    # and is not configured to handle mixed ELF and COFF.
    noconfigdirs="$noconfigdirs ld target-libgloss ${libgcj}"
    ;;
  i[[3456789]]86-*-sco*)
    noconfigdirs="$noconfigdirs gprof target-libgloss ${libgcj}"
    ;;
  i[[3456789]]86-*-solaris2*)
    noconfigdirs="$noconfigdirs target-libgloss"
    ;;
  i[[3456789]]86-*-sysv4*)
    noconfigdirs="$noconfigdirs target-libgloss ${libgcj}"
    ;;
  i[[3456789]]86-*-beos*)
    noconfigdirs="$noconfigdirs gdb target-newlib target-libgloss ${libgcj}"
    ;;
  m32r-*-*)
    noconfigdirs="$noconfigdirs ${libgcj}"
    ;;
  m68hc11-*-*|m6811-*-*|m68hc12-*-*|m6812-*-*)
    noconfigdirs="$noconfigdirs target-libiberty target-libstdc++-v3 ${libgcj}"
    ;;
  m68k-*-elf*)
    noconfigdirs="$noconfigdirs ${libgcj}"
    ;;
  m68k-*-coff*)
    noconfigdirs="$noconfigdirs ${libgcj}"
    ;;
  mcore-*-pe*)
  # The EPOC C++ environment does not support exceptions or rtti,
  # and so building libstdc++-v3 tends not to always work.
    noconfigdirs="$noconfigdirs target-libstdc++-v3"
    ;;
  mmix-*-*)
    noconfigdirs="$noconfigdirs ${libgcj} gdb libgloss"
    ;;
  mn10200-*-*)
    noconfigdirs="$noconfigdirs ${libgcj}"
    ;;
  mn10300-*-*)
    noconfigdirs="$noconfigdirs ${libgcj}"
    ;;
  powerpc-*-aix*)
    # copied from rs6000-*-* entry
    noconfigdirs="$noconfigdirs gprof target-libada target-libgloss ${libgcj}"
    ;;
  powerpc*-*-winnt* | powerpc*-*-pe* | ppc*-*-pe)
    target_configdirs="$target_configdirs target-winsup"
    noconfigdirs="$noconfigdirs gdb tcl tk make expect target-libgloss itcl tix gnuserv ${libgcj}"
    # always build newlib.
    skipdirs=`echo " ${skipdirs} " | sed -e 's/ target-newlib / /'`
    ;;
    # This is temporary until we can link against shared libraries
  powerpcle-*-solaris*)
    noconfigdirs="$noconfigdirs gdb sim make tcl tk expect itcl tix gnuserv ${libgcj}"
    ;;
  powerpc-*-beos*)
    noconfigdirs="$noconfigdirs gdb target-newlib target-libgloss ${libgcj}"
    ;;
  powerpc-*-eabi)
    noconfigdirs="$noconfigdirs ${libgcj}"
    ;;
  rs6000-*-lynxos*)
    noconfigdirs="$noconfigdirs target-newlib gprof ${libgcj}"
    ;;
  rs6000-*-aix*)
    noconfigdirs="$noconfigdirs gprof target-libada target-libgloss ${libgcj}"
    ;;
  rs6000-*-*)
    noconfigdirs="$noconfigdirs gprof ${libgcj}"
    ;;
  m68k-apollo-*)
    noconfigdirs="$noconfigdirs ld binutils gprof target-libgloss ${libgcj}"
    ;;
  mips*-*-irix5*)
    noconfigdirs="$noconfigdirs gprof target-libgloss ${libgcj}"
    ;;
  mips*-*-irix6*)
    # Linking libjava exceeds command-line length limits on at least
    # IRIX 6.2, but not on IRIX 6.5.
    # Also, boehm-gc won't build on IRIX 6.5, according to Jeffrey Oldham
    # <oldham@@codesourcery.com>
    noconfigdirs="$noconfigdirs gprof target-libgloss ${libgcj}"
    ;;
  mips*-dec-bsd*)
    noconfigdirs="$noconfigdirs gprof target-libgloss ${libgcj}"
    ;;
  mips*-*-openbsd*)
    noconfigdirs="$noconfigdirs target-libgloss ${libgcj}"
    ;;
  mips*-*-bsd*)
    noconfigdirs="$noconfigdirs gprof target-libgloss ${libgcj}"
    ;;
  mipstx39-*-*)
    noconfigdirs="$noconfigdirs gprof ${libgcj}"   # same as generic mips
    ;;
  mips*-*-linux*)
    noconfigdirs="$noconfigdirs target-newlib target-libgloss"
    ;;
  mips*-*-*)
    noconfigdirs="$noconfigdirs gprof ${libgcj}"
    ;;
  romp-*-*)
    noconfigdirs="$noconfigdirs bfd binutils ld gas opcodes target-libgloss ${libgcj}"
    ;;
  sh-*-*)
    case "${host}" in
      i[[3456789]]86-*-vsta) ;; # don't add gprof back in
      i[[3456789]]86-*-go32*) ;; # don't add gprof back in
      i[[3456789]]86-*-msdosdjgpp*) ;; # don't add gprof back in
      *) skipdirs=`echo " ${skipdirs} " | sed -e 's/ gprof / /'` ;;
    esac
    noconfigdirs="$noconfigdirs target-libgloss ${libgcj}"
    ;;
  sh64-*-*)
    noconfigdirs="$noconfigdirs target-libgloss ${libgcj}"
    ;;
  sparc-*-elf*)
    noconfigdirs="$noconfigdirs ${libgcj}"
    ;;
  sparc64-*-elf*)
    noconfigdirs="$noconfigdirs ${libgcj}"
    ;;
  sparclite-*-*)
    noconfigdirs="$noconfigdirs ${libgcj}"
    ;;
  sparc-*-sunos4*)
    noconfigdirs="$noconfigdirs ${libgcj}"
    if test x${is_cross_compiler} != xno ; then
           noconfigdirs="$noconfigdirs gdb target-newlib target-libgloss"
    else
           use_gnu_ld=no
    fi
    ;;
  sparc-*-solaris* | sparc64-*-solaris* | sparcv9-*-solaris*)
    ;;
  v810-*-*)
    noconfigdirs="$noconfigdirs bfd binutils gas gcc gdb ld target-libstdc++-v3 opcodes target-libgloss ${libgcj}"
    ;;
  v850-*-*)
    noconfigdirs="$noconfigdirs target-libgloss ${libgcj}"
    ;;
  v850e-*-*)
    noconfigdirs="$noconfigdirs target-libgloss ${libgcj}"
    ;;
  v850ea-*-*)
    noconfigdirs="$noconfigdirs target-libgloss ${libgcj}"
    ;;
  vax-*-openbsd*)
    noconfigdirs="$noconfigdirs ${libgcj}"
    ;;
  vax-*-vms)
    noconfigdirs="$noconfigdirs bfd binutils gdb ld target-newlib opcodes target-libgloss ${libgcj}"
    ;;
  vax-*-*)
    noconfigdirs="$noconfigdirs target-newlib target-libgloss ${libgcj}"
    ;;
  xtensa-*-*)
    noconfigdirs="$noconfigdirs ${libgcj}"
    ;;
  ip2k-*-*)
    noconfigdirs="$noconfigdirs target-libiberty target-libstdc++-v3 ${libgcj}"
    ;;
  *-*-linux*)
    noconfigdirs="$noconfigdirs target-newlib target-libgloss"
    ;;
  *-*-lynxos*)
    noconfigdirs="$noconfigdirs target-newlib target-libgloss ${libgcj}"
    ;; 
  *-*-*)
    noconfigdirs="$noconfigdirs ${libgcj}"
    ;;
esac

# If we aren't building newlib, then don't build libgloss, since libgloss
# depends upon some newlib header files.
case "${noconfigdirs}" in
  *target-libgloss*) ;;
  *target-newlib*) noconfigdirs="$noconfigdirs target-libgloss" ;;
esac

# Figure out what language subdirectories are present.
# Look if the user specified --enable-languages="..."; if not, use
# the environment variable $LANGUAGES if defined. $LANGUAGES might
# go away some day.
# NB:  embedded tabs in this IF block -- do not untabify
if test x"${enable_languages+set}" != xset; then
  if test x"${LANGUAGES+set}" = xset; then
    enable_languages="${LANGUAGES}"
      echo configure.in: warning: setting LANGUAGES is deprecated, use --enable-languages instead 1>&2
  else
    enable_languages=all
  fi
else
  if test x"${enable_languages}" = x ||
     test x"${enable_languages}" = xyes;
     then
    echo configure.in: --enable-languages needs at least one language argument 1>&2
    exit 1
  fi
fi
enable_languages=`echo "${enable_languages}" | sed -e 's/[[ 	,]][[ 	,]]*/,/g' -e 's/,$//'`

# First scan to see if an enabled language requires some other language.
# We assume that a given config-lang.in will list all the language
# front ends it requires, even if some are required indirectly.
for lang_frag in ${srcdir}/gcc/*/config-lang.in .. ; do
  case ${lang_frag} in
    ..) ;;
    # The odd quoting in the next line works around
    # an apparent bug in bash 1.12 on linux.
    ${srcdir}/gcc/[[*]]/config-lang.in) ;;
    *)
      # From the config-lang.in, get $language, $lang_requires
      language=
      lang_requires=
      . ${lang_frag}
      for other in ${lang_requires} ; do
        case ,${enable_languages}, in
	  *,$other,*) ;;
	  *,all,*) ;;
	  *,$language,*)
	    echo " \`$other' language required by \`$language'; enabling" 1>&2
	    enable_languages="${enable_languages},${other}"
	    ;;
	esac
      done
      ;;
  esac
done

for lang_frag in ${srcdir}/gcc/*/config-lang.in .. ; do
  case ${lang_frag} in
    ..) ;;
    # The odd quoting in the next line works around
    # an apparent bug in bash 1.12 on linux.
    ${srcdir}/gcc/[[*]]/config-lang.in) ;;
    *)
      # From the config-lang.in, get $language, $target_libs, 
      # $lang_dirs, and $build_by_default
      language=
      target_libs=
      lang_dirs=
      build_by_default=
      . ${lang_frag}
      if test "x$language" = x ; then
        echo "${lang_frag} doesn't set \$language." 1>&2
        exit 1
      fi
      case ,${enable_languages}, in
        *,${language},*)
          # Language was explicitly selected; include it.
          add_this_lang=yes
          ;;
        *,all,*)
          # 'all' was selected; include 'default' languages.
          case ${build_by_default} in
            no) add_this_lang=no ;;
            *) add_this_lang=yes ;;
          esac 
          ;;
        *) add_this_lang=no ;;
      esac
      case ${add_this_lang} in
        no)
          # Remove language-dependent dirs.
          eval noconfigdirs='"$noconfigdirs "'\"$target_libs $lang_dirs\"
          ;;
      esac
      ;;
  esac
done

# Remove the entries in $skipdirs and $noconfigdirs from $configdirs and
# $target_configdirs.
# If we have the source for $noconfigdirs entries, add them to $notsupp.

notsupp=""
for dir in . $skipdirs $noconfigdirs ; do
  dirname=`echo $dir | sed -e s/target-//g`
  if test $dir != .  && echo " ${configdirs} " | grep " ${dir} " >/dev/null 2>&1; then
    configdirs=`echo " ${configdirs} " | sed -e "s/ ${dir} / /"`
    if test -r $srcdir/$dirname/configure ; then
      if echo " ${skipdirs} " | grep " ${dir} " >/dev/null 2>&1; then
	true
      else
	notsupp="$notsupp $dir"
      fi
    fi
  fi
  if test $dir != . && echo " ${target_configdirs} " | grep " ${dir} " >/dev/null 2>&1; then
    target_configdirs=`echo " ${target_configdirs} " | sed -e "s/ ${dir} / /"`
    if test -r $srcdir/$dirname/configure ; then
      if echo " ${skipdirs} " | grep " ${dir} " >/dev/null 2>&1; then
	true
      else
	notsupp="$notsupp $dir"
      fi
    fi
  fi
done

# Sometimes the tools are distributed with libiberty but with no other
# libraries.  In that case, we don't want to build target-libiberty.
if test -n "${target_configdirs}" ; then
  others=
  for i in `echo ${target_configdirs} | sed -e s/target-//g` ; do
    if test "$i" != "libiberty" ; then
      if test -r $srcdir/$i/configure ; then
	others=yes;
	break;
      fi
    fi
  done
  if test -z "${others}" ; then
    target_configdirs=
  fi
fi

# Quietly strip out all directories which aren't configurable in this tree.
# This relies on all configurable subdirectories being autoconfiscated, which
# is now the case.
configdirs_all="$configdirs"
configdirs=
for i in ${configdirs_all} ; do
  if test -f ${srcdir}/$i/configure ; then
    configdirs="${configdirs} $i"
  fi
done
target_configdirs_all="$target_configdirs"
target_configdirs=
for i in ${target_configdirs_all} ; do
  j=`echo $i | sed -e s/target-//g` 
  if test -f ${srcdir}/$j/configure ; then
    target_configdirs="${target_configdirs} $i"
  fi
done

# Produce a warning message for the subdirs we can't configure.
# This isn't especially interesting in the Cygnus tree, but in the individual
# FSF releases, it's important to let people know when their machine isn't
# supported by the one or two programs in a package.

if test -n "${notsupp}" && test -z "${norecursion}" ; then
  # If $appdirs is non-empty, at least one of those directories must still
  # be configured, or we error out.  (E.g., if the gas release supports a
  # specified target in some subdirs but not the gas subdir, we shouldn't
  # pretend that all is well.)
  if test -n "$appdirs" ; then
    for dir in $appdirs ; do
      if test -r $dir/Makefile.in ; then
	if echo " ${configdirs} " | grep " ${dir} " >/dev/null 2>&1; then
	  appdirs=""
	  break
	fi
	if echo " ${target_configdirs} " | grep " ${dir} " >/dev/null 2>&1; then
	  appdirs=""
	  break
	fi
      fi
    done
    if test -n "$appdirs" ; then
      echo "*** This configuration is not supported by this package." 1>&2
      exit 1
    fi
  fi
  # Okay, some application will build, or we don't care to check.  Still
  # notify of subdirs not getting built.
  echo "*** This configuration is not supported in the following subdirectories:" 1>&2
  echo "    ${notsupp}" 1>&2
  echo "    (Any other directories should still work fine.)" 1>&2
fi

case "$host" in
  *msdosdjgpp*)
    enable_gdbtk=no ;;
esac

copy_dirs=

# Handle --with-headers=XXX.  If the value is not "yes", the contents of
# the named directory are copied to $(tooldir)/sys-include.
if test x"${with_headers}" != x && test x"${with_headers}" != xno ; then
  if test x${is_cross_compiler} = xno ; then
    echo 1>&2 '***' --with-headers is only supported when cross compiling
    exit 1
  fi
  if test x"${with_headers}" != xyes ; then
    case "${exec_prefixoption}" in
    "") x=${prefix} ;;
    *) x=${exec_prefix} ;;
    esac
    copy_dirs="${copy_dirs} ${with_headers} $x/${target_alias}/sys-include"
  fi
fi

# Handle --with-libs=XXX.  If the value is not "yes", the contents of
# the name directories are copied to $(tooldir)/lib.  Multiple directories
# are permitted.
if test x"${with_libs}" != x && test x"${with_libs}" != xno ; then
  if test x${is_cross_compiler} = xno ; then
    echo 1>&2 '***' --with-libs is only supported when cross compiling
    exit 1
  fi
  if test x"${with_libs}" != xyes ; then
    # Copy the libraries in reverse order, so that files in the first named
    # library override files in subsequent libraries.
    case "${exec_prefixoption}" in
    "") x=${prefix} ;;
    *) x=${exec_prefix} ;;
    esac
    for l in ${with_libs}; do
      copy_dirs="$l $x/${target_alias}/lib ${copy_dirs}"
    done
  fi
fi

# Handle ${copy_dirs}
set fnord ${copy_dirs}
shift
while test $# != 0 ; do
  if test -f $2/COPIED && test x"`cat $2/COPIED`" = x"$1" ; then
    :
  else
    echo Copying $1 to $2

    # Use the install script to create the directory and all required
    # parent directories.
    if test -d $2 ; then
      :
    else
      echo >config.temp
      ${srcdir}/install-sh -c -m 644 config.temp $2/COPIED
    fi

    # Copy the directory, assuming we have tar.
    # FIXME: Should we use B in the second tar?  Not all systems support it.
    (cd $1; tar -cf - .) | (cd $2; tar -xpf -)

    # It is the responsibility of the user to correctly adjust all
    # symlinks.  If somebody can figure out how to handle them correctly
    # here, feel free to add the code.

    echo $1 > $2/COPIED
  fi
  shift; shift
done

# Work in distributions that contain no compiler tools, like Autoconf.
tentative_cc=""
host_makefile_frag=/dev/null
if test -d ${srcdir}/config ; then
case "${host}" in
  m68k-hp-hpux*)
    # Avoid "too much defining" errors from HPUX compiler.
    tentative_cc="cc -Wp,-H256000"
    # If "ar" in $PATH is GNU ar, the symbol table may need rebuilding.
    # If it's HP/UX ar, this should be harmless.
    RANLIB="ar ts"
    ;;
  m68k-apollo-sysv*)
    tentative_cc="cc -A ansi -A runtype,any -A systype,any -U__STDC__ -DUSG"
    ;;
  m68k-apollo-bsd*)
    #None of the Apollo compilers can compile gas or binutils.  The preprocessor
    # chokes on bfd, the compiler won't let you assign integers to enums, and
    # other problems.  Defining CC to gcc is a questionable way to say "don't use
    # the apollo compiler" (the preferred version of GCC could be called cc,
    # or whatever), but I'm not sure leaving CC as cc is any better...
    #CC=cc -A ansi -A runtype,any -A systype,any -U__STDC__ -DNO_STDARG
    # Used to have BISON=yacc.
    tentative_cc=gcc
    ;;
  m88k-dg-dgux*)
    tentative_cc="gcc -Wall -ansi -D__using_DGUX"
    ;;
  m88k-harris-cxux*)
    # Under CX/UX, we want to tell the compiler to use ANSI mode.
    tentative_cc="cc -Xa"
    host_makefile_frag="config/mh-cxux"
    ;;
  m88k-motorola-sysv*)
    ;;
  mips*-dec-ultrix*)
    tentative_cc="cc -Wf,-XNg1000"
    host_makefile_frag="config/mh-decstation"
    ;;
  mips*-nec-sysv4*)
    # The C compiler on NEC MIPS SVR4 needs bigger tables.
    tentative_cc="cc -ZXNd=5000 -ZXNg=1000"
    host_makefile_frag="config/mh-necv4"
    ;;
  mips*-sgi-irix4*)
    # Tell compiler to use K&R C.  We can't compile under the SGI Ansi
    # environment.  Also bump switch table size so that cp-parse will
    # compile.  Bump string length limit so linker builds.
    tentative_cc="cc -cckr -Wf,-XNg1500 -Wf,-XNk1000 -Wf,-XNh2000 -Wf,-XNl8192"
    ;;
  mips*-*-sysv4*)
    host_makefile_frag="config/mh-sysv4"
    ;;
  mips*-*-sysv*)
    # This is for a MIPS running RISC/os 4.52C.

    # This is needed for GDB, but needs to be in the top-level make because
    # if a library is compiled with the bsd headers and gets linked with the
    # sysv system libraries all hell can break loose (e.g. a jmp_buf might be
    # a different size).
    # ptrace(2) apparently has problems in the BSD environment.  No workaround is
    # known except to select the sysv environment.  Could we use /proc instead?
    # These "sysv environments" and "bsd environments" often end up being a pain.
    #
    # This is not part of CFLAGS because perhaps not all C compilers have this
    # option.
    tentative_cc="cc -systype sysv"
    ;;
  i370-ibm-opened*)
    tentative_cc="c89"
    ;;
  i[[3456789]]86-*-sysv5*)
    host_makefile_frag="config/mh-sysv5"
    ;;
  i[[3456789]]86-*-dgux*)
    tentative_cc="gcc -Wall -ansi -D__using_DGUX"
    host_makefile_frag="config/mh-dgux386"
    ;;
  i[[3456789]]86-ncr-sysv4.3*)
    # The MetaWare compiler will generate a copyright message unless you
    # turn it off by adding the -Hnocopyr flag.
    tentative_cc="cc -Hnocopyr"
    ;;
  i[[3456789]]86-ncr-sysv4*)
    # for an NCR 3000 (i486/SVR4) system.
    # The NCR 3000 ships with a MetaWare compiler installed as /bin/cc.
    # This compiler not only emits obnoxious copyright messages every time
    # you run it, but it chokes and dies on a whole bunch of GNU source
    # files.  Default to using the AT&T compiler installed in /usr/ccs/ATT/cc.
    tentative_cc="/usr/ccs/ATT/cc"
    host_makefile_frag="config/mh-ncr3000"
    ;;
  i[[3456789]]86-*-sco3.2v5*)
    ;;
  i[[3456789]]86-*-sco*)
    # The native C compiler botches some simple uses of const.  Unfortunately,
    # it doesn't defined anything like "__sco__" for us to test for in ansidecl.h.
    tentative_cc="cc -Dconst="
    host_makefile_frag="config/mh-sco"
    ;;
  i[[3456789]]86-*-udk*)
    host_makefile_frag="config/mh-sysv5"
    ;;
  i[[3456789]]86-*-solaris2*)
    host_makefile_frag="config/mh-sysv4"
    ;;
  i[[3456789]]86-*-msdosdjgpp*)
    host_makefile_frag="config/mh-djgpp"
    ;;
  *-cygwin*)
    host_makefile_frag="config/mh-cygwin"
    ;;
  *-mingw32*)
    host_makefile_frag="config/mh-mingw32"
    ;;
  *-interix*)
    host_makefile_frag="config/mh-interix"
    ;;
  vax-*-ultrix2*)
    # The old BSD pcc isn't up to compiling parts of gdb so use gcc
    tentative_cc=gcc
    ;;
  *-*-solaris2*)
    host_makefile_frag="config/mh-solaris"
    ;;
  m68k-sun-sunos*)
    # Sun's C compiler needs the -J flag to be able to compile cp-parse.c
    # without overflowing the jump tables (-J says to use a 32 bit table)
    tentative_cc="cc -J"
    ;;
  *-hp-hpux*)
    tentative_cc="cc -Wp,-H256000"
    ;;
  *-*-hiux*)
    tentative_cc="cc -Wp,-H256000"
    ;;
  rs6000-*-lynxos*)
    # /bin/cc is less than useful for our purposes.  Always use GCC
    tentative_cc="/usr/cygnus/progressive/bin/gcc"
    host_makefile_frag="config/mh-lynxrs6k"
    ;;
  *-*-lynxos*)
    # /bin/cc is less than useful for our purposes.  Always use GCC
    tentative_cc="/bin/gcc"
    ;;
  *-*-sysv4*)
    host_makefile_frag="config/mh-sysv4"
    ;;
esac
fi

extra_arflags_for_target=
extra_nmflags_for_target=
extra_ranlibflags_for_target=
target_makefile_frag=/dev/null
case "${target}" in
  i[[3456789]]86-*-netware*)
    target_makefile_frag="config/mt-netware"
    ;;
  powerpc-*-netware*)
    target_makefile_frag="config/mt-netware"
    ;;
  *-*-linux*)
    target_makefile_frag="config/mt-linux"
    ;;
  *-*-aix4.[[3456789]]* | *-*-aix[[56789]].*)
    # nm and ar from AIX 4.3 and above require -X32_64 flag to all ar and nm 
    # commands to handle both 32-bit and 64-bit objects.  These flags are
    # harmless if we're using GNU nm or ar.
    extra_arflags_for_target=" -X32_64"
    extra_nmflags_for_target=" -B -X32_64"
    ;;
  *-*-darwin*)
    # ranlib from Darwin requires the -c flag to look at common symbols.
    extra_ranlibflags_for_target=" -c"
    ;;
  mips*-*-pe | sh*-*-pe | *arm-wince-pe)
    target_makefile_frag="config/mt-wince"
    ;;
esac

alphaieee_frag=/dev/null
case $target in
  alpha*-*-*)
    # This just makes sure to use the -mieee option to build target libs.
    # This should probably be set individually by each library.
    alphaieee_frag="config/mt-alphaieee"
    ;;
esac

# If --enable-target-optspace always use -Os instead of -O2 to build
# the target libraries, similarly if it is not specified, use -Os
# on selected platforms.
ospace_frag=/dev/null
case "${enable_target_optspace}:${target}" in
  yes:*)
    ospace_frag="config/mt-ospace"
    ;;
  :d30v-*)
    ospace_frag="config/mt-d30v"
    ;;
  :m32r-* | :d10v-* | :fr30-*)
    ospace_frag="config/mt-ospace"
    ;;
  no:* | :*)
    ;;
  *)
    echo "*** bad value \"${enable_target_optspace}\" for --enable-target-optspace flag; ignored" 1>&2
    ;;
esac

# Set with_gnu_as and with_gnu_ld as appropriate.
#
# This is done by determining whether or not the appropriate directory
# is available, and by checking whether or not specific configurations
# have requested that this magic not happen.
# 
# The command line options always override the explicit settings in 
# configure.in, and the settings in configure.in override this magic.
#
# If the default for a toolchain is to use GNU as and ld, and you don't 
# want to do that, then you should use the --without-gnu-as and
# --without-gnu-ld options for the configure script.

if test x${use_gnu_as} = x &&
   echo " ${configdirs} " | grep " gas " > /dev/null 2>&1 ; then
  with_gnu_as=yes
  extra_host_args="$extra_host_args --with-gnu-as"
fi

if test x${use_gnu_ld} = x &&
   echo " ${configdirs} " | grep " ld " > /dev/null 2>&1 ; then
  with_gnu_ld=yes
  extra_host_args="$extra_host_args --with-gnu-ld"
fi

# If using newlib, add --with-newlib to the extra_host_args so that gcc/configure
# can detect this case.

if test x${with_newlib} != xno && echo " ${target_configdirs} " | grep " target-newlib " > /dev/null 2>&1 ; then
  with_newlib=yes
  extra_host_args="$extra_host_args --with-newlib"
fi


# Default to using --with-stabs for certain targets.
if test x${with_stabs} = x ; then
  case "${target}" in
  mips*-*-irix[[56]]*)
    ;;
  mips*-*-* | alpha*-*-osf*)
    with_stabs=yes;
    extra_host_args="${extra_host_args} --with-stabs"
    ;;
  esac
fi

# hpux11 in 64bit mode has libraries in a weird place.  Arrange to find
# them automatically.
case "${host}" in
  hppa*64*-*-hpux11*)	
    extra_host_args="$extra_host_args -x-libraries=/usr/lib/pa20_64 -x-includes=/usr/X11R6/include"
    ;;
esac

# If we aren't going to be using gcc, see if we can extract a definition
# of CC from the fragment.
# Actually, use the 'pre-extracted' version above.
if test -z "${CC}" && test "${build}" = "${host}" ; then
  IFS="${IFS= 	}"; save_ifs="$IFS"; IFS="${IFS}:"
  found=
  for dir in $PATH; do
    test -z "$dir" && dir=.
    if test -f $dir/gcc; then
      found=yes
      break
    fi
  done
  IFS="$save_ifs"
  if test -z "${found}" && test -n "${tentative_cc}" ; then
    CC=$tentative_cc
  fi
fi

# Some systems (e.g., one of the i386-aix systems the gas testers are
# using) don't handle "\$" correctly, so don't use it here.
tooldir='${exec_prefix}'/${target_alias}
build_tooldir=${tooldir}

# Generate a default definition for YACC.  This is used if the makefile can't
# locate bison or byacc in objdir.

for prog in 'bison -y' byacc yacc
do
  set dummy $prog; tmp=$2
  IFS="${IFS= 	}"; save_ifs="$IFS"; IFS="${IFS}:"
  for dir in $PATH; do
    test -z "$dir" && dir=.
    if test -f $dir/$tmp; then
      DEFAULT_YACC="$prog"
      break
    fi
  done
  IFS="$save_ifs"

  test -n "$DEFAULT_YACC" && break
done

# Generate a default definition for M4.  This is used if the makefile can't
# locate m4 in objdir.

for prog in gm4 gnum4 m4
do
  set dummy $prog; tmp=$2
  IFS="${IFS=   }"; save_ifs="$IFS"; IFS="${IFS}:"
  for dir in $PATH; do
    test -z "$dir" && dir=.
    if test -f $dir/$tmp; then
      DEFAULT_M4="$prog"
      break
    fi
  done
  IFS="$save_ifs"

  test -n "$DEFAULT_M4" && break
done

# Generate a default definition for LEX.  This is used if the makefile can't
# locate flex in objdir.

for prog in flex lex
do
  set dummy $prog; tmp=$2
  IFS="${IFS= 	}"; save_ifs="$IFS"; IFS="${IFS}:"
  for dir in $PATH; do
    test -z "$dir" && dir=.
    if test -f $dir/$tmp; then
      DEFAULT_LEX="$prog"
      break
    fi
  done
  IFS="$save_ifs"

  test -n "$DEFAULT_LEX" && break
done

if test "${build}" != "${host}" ; then
  # If we are doing a Canadian Cross, in which the host and build systems
  # are not the same, we set reasonable default values for the tools.

  BISON=${BISON-bison}
  CC=${CC-${host_alias}-gcc}
  CFLAGS=${CFLAGS-"-g -O2"}
  CXX=${CXX-${host_alias}-c++}
  CXXFLAGS=${CXXFLAGS-"-g -O2"}
  CC_FOR_BUILD=${CC_FOR_BUILD-gcc}
  CC_FOR_TARGET=${CC_FOR_TARGET-${target_alias}-gcc}
  CXX_FOR_TARGET=${CXX_FOR_TARGET-${target_alias}-c++}
  GCJ_FOR_TARGET=${GCJ_FOR_TARGET-${target_alias}-gcj}
  GCC_FOR_TARGET=${GCC_FOR_TARGET-${CC_FOR_TARGET-${target_alias}-gcc}}
  BUILD_PREFIX=${build_alias}-
  BUILD_PREFIX_1=${build_alias}-
  MAKEINFO=${MAKEINFO-makeinfo}

  if test -z "${YACC}" ; then
    IFS="${IFS= 	}"; save_ifs="$IFS"; IFS="${IFS}:"
    for dir in $PATH; do
      test -z "$dir" && dir=.
      if test -f $dir/bison; then
	YACC="bison -y"
	break
      fi
      if test -f $dir/byacc; then
	YACC=byacc
	break
      fi
      if test -f $dir/yacc; then
	YACC=yacc
	break
      fi
    done
    IFS="$save_ifs"
    if test -z "${YACC}" ; then
      YACC="bison -y"
    fi
  fi

  if test -z "${LEX}" ; then
    IFS="${IFS= 	}"; save_ifs="$IFS"; IFS="${IFS}:"
    for dir in $PATH; do
      test -z "$dir" && dir=.
      if test -f $dir/flex; then
	LEX=flex
	break
      fi
      if test -f $dir/lex; then
	LEX=lex
	break
      fi
    done
    IFS="$save_ifs"
    LEX=${LEX-flex}
  fi

else
  # Set reasonable default values for some tools even if not Canadian.
  # Of course, these are different reasonable default values, originally
  # specified directly in the Makefile.
  # We don't export, so that autoconf can do its job.
  # Note that all these settings are above the fragment inclusion point
  # in Makefile.in, so can still be overridden by fragments.
  # This is all going to change when we autoconfiscate...

  BISON="\$(USUAL_BISON)"
  CC_FOR_BUILD="\$(CC)"
  GCC_FOR_TARGET="\$(USUAL_GCC_FOR_TARGET)"
  BUILD_PREFIX=
  BUILD_PREFIX_1=loser-
  MAKEINFO="\$(USUAL_MAKEINFO)"
  LEX="\$(USUAL_LEX)"
  YACC="\$(USUAL_YACC)"

  # If CC is still not set, try to get gcc.
  cc_prog_is_gcc=
  if test -z "${CC}" ; then
    IFS="${IFS= 	}"; save_ifs="$IFS"; IFS="${IFS}:"
    for dir in $PATH; do
      test -z "$dir" && dir=.
      if test -f $dir/gcc; then
	CC="gcc"
	cc_prog_is_gcc=yes
	echo 'void f(){}' > conftest.c
	if test -z "`${CC} -g -c conftest.c 2>&1`"; then
	  CFLAGS=${CFLAGS-"-g -O2"}
	  CXXFLAGS=${CXXFLAGS-"-g -O2"}
	else
	  CFLAGS=${CFLAGS-"-O2"}
	  CXXFLAGS=${CXXFLAGS-"-O2"}
	fi
	rm -f conftest*
	break
      fi
    done
    IFS="$save_ifs"
    CC=${CC-cc}
  else
    # Determine if we are using gcc.
    cat > conftest.c <<EOF
#ifdef __GNUC__
  yes;
#endif
EOF
    if ${CC} -E conftest.c | grep yes >/dev/null 2>&1; then
      cc_prog_is_gcc=yes
    fi
    rm -f conftest.c
    if test -z "${CFLAGS}"; then
      # Here CC is set but CFLAGS is not.  Use a quick hack to use -O2 if CC
      # is set to a version of gcc.
      if test "$cc_prog_is_gcc" = yes; then
	echo 'void f(){}' > conftest.c
	if test -z "`${CC} -g -c conftest.c 2>&1`"; then
	  CFLAGS=${CFLAGS-"-g -O2"}
	  CXXFLAGS=${CXXFLAGS-"-g -O2"}
	else
	  CFLAGS=${CFLAGS-"-O2"}
	  CXXFLAGS=${CXXFLAGS-"-O2"}
	fi
	rm -f conftest*
      fi
    fi
  fi

  # We must set the default linker to the linker used by gcc for the correct
  # operation of libtool.  If LD is not defined and we are using gcc, try to
  # set the LD default to the ld used by gcc.
  if test -z "$LD"; then
    if test "$cc_prog_is_gcc" = yes; then
      case $build in
      *-*-mingw*)
	gcc_prog_ld=`$CC -print-prog-name=ld 2>&1 | tr -d '\015'` ;;
      *)
	gcc_prog_ld=`$CC -print-prog-name=ld 2>&1` ;;
      esac
      case $gcc_prog_ld in
      # Accept absolute paths.
      [[\\/]* | [A-Za-z]:[\\/]*)]
        LD="$gcc_prog_ld" ;;
      esac
    fi
  fi

  CXX=${CXX-"c++"}
  CFLAGS=${CFLAGS-"-g"}
  CXXFLAGS=${CXXFLAGS-"-g -O2"}
fi

# FIXME Should this be done recursively ??? (Useful for e.g. gdbtest)
# Set up the list of links to be made.
# ${links} is the list of link names, and ${files} is the list of names to link to.

# Make the links.
configlinks="${links}"
if test -r ./config.status  ; then
  mv -f ./config.status ./config.back
fi
while test -n "${files}" ; do
  # set file to car of files, files to cdr of files
  set ${files}; file=$1; shift; files=$*
  set ${links}; link=$1; shift; links=$*

  if test ! -r ${srcdir}/${file} ; then
    if test ! -r ${file} ; then
      echo '***' "${progname}: cannot create a link \"${link}\"," 1>&2
      echo '***' "since the file \"${srcdir}/${file}\" does not exist." 1>&2
      exit 1
    else
      srcfile=${file}
    fi
  else
    srcfile=${srcdir}/${file}
  fi

  ${remove} -f ${link}
  # Make a symlink if possible, otherwise try a hard link
  if ${symbolic_link} ${srcfile} ${link} >/dev/null 2>&1 ; then
    true
  else
    # We need to re-remove the file because Lynx leaves a 
    # very strange directory there when it fails an NFS symlink.
    ${remove} -r -f ${link}
    ${hard_link} ${srcfile} ${link}
  fi
  if test ! -r ${link} ; then
    echo '***' "${progname}: unable to link \"${link}\" to \"${srcfile}\"." 1>&2
    exit 1
  fi

  echo "Linked \"${link}\" to \"${srcfile}\"."
done

# Create a .gdbinit file which runs the one in srcdir
# and tells GDB to look there for source files.

if test -r ${srcdir}/.gdbinit ; then
  case ${srcdir} in
    .) ;;
    *) cat > ./.gdbinit <<EOF
# ${NO_EDIT}
dir ${srcdir}
dir .
source ${srcdir}/.gdbinit
EOF
    ;;
  esac
fi

# Make sure that the compiler is able to generate an executable.  If it
# can't, we are probably in trouble.  We don't care whether we can run the
# executable--we might be using a cross compiler--we only care whether it
# can be created.  At this point the main configure script has set CC.
we_are_ok=no
echo "int main () { return 0; }" > conftest.c
${CC} -o conftest ${CFLAGS} ${CPPFLAGS} ${LDFLAGS} conftest.c
if test $? = 0 ; then
  if test -s conftest || test -s conftest.exe ; then
    we_are_ok=yes
  fi
fi 
case $we_are_ok in
  no)
    echo 1>&2 "*** The command '${CC} -o conftest ${CFLAGS} ${CPPFLAGS} ${LDFLAGS} conftest.c' failed."
    echo 1>&2 "*** You must set the environment variable CC to a working compiler."
    rm -f conftest*
    exit 1
    ;;
esac
rm -f conftest*

# The Solaris /usr/ucb/cc compiler does not appear to work.
case "${host}" in
  sparc-sun-solaris2*)
      CCBASE="`echo ${CC-cc} | sed 's/ .*$//'`"
      if test "`type $CCBASE | sed 's/^[[^/]]*//'`" = "/usr/ucb/cc" ; then
          could_use=
          test -d /opt/SUNWspro/bin && could_use="/opt/SUNWspro/bin"
          if test -d /opt/cygnus/bin ; then
              if test "$could_use" = "" ; then
                  could_use="/opt/cygnus/bin"
              else
                  could_use="$could_use or /opt/cygnus/bin"
              fi
          fi
        if test "$could_use" = "" ; then
            echo "Warning: compilation may fail because you're using"
            echo "/usr/ucb/cc.  You should change your PATH or CC "
            echo "variable and rerun configure."
        else
            echo "Warning: compilation may fail because you're using"
            echo "/usr/ucb/cc, when you should use the C compiler from"
            echo "$could_use.  You should change your"
            echo "PATH or CC variable and rerun configure."
        fi
      fi
  ;;
esac

# If --enable-shared was set, we must set LD_LIBRARY_PATH so that the
# binutils tools will find libbfd.so.
case "${enable_shared}" in
  no | "") SET_LIB_PATH= ;;
  *) SET_LIB_PATH="\$(REALLY_SET_LIB_PATH)" ;;
esac

case "${host}" in
  *-*-hpux*) RPATH_ENVVAR=SHLIB_PATH ;;
  *) RPATH_ENVVAR=LD_LIBRARY_PATH ;;
esac

# Record target_configdirs and the configure arguments for target and
# build configuration in Makefile.
target_configdirs=`echo "${target_configdirs}" | sed -e 's/target-//g'`

# This is the final value for target_configdirs.  configdirs already
# has its final value, as does build_modules.  It's time to create some 
# lists of valid targets.

all_build_modules=
configure_build_modules=
for module in ${build_modules} ; do
  all_build_modules=all-build-${module}
  configure_build_modules=configure-build-${module}
done

# Determine whether gdb needs tk/tcl or not.
# Use 'maybe' since enable_gdbtk might be true even if tk isn't available
# and in that case we want gdb to be built without tk.  Ugh!
# In fact I believe gdb is the *only* package directly dependent on tk,
# so we should be able to put the 'maybe's in unconditionally and
# leave out the maybe dependencies when enable_gdbtk is false.  I'm not
# 100% sure that that's safe though.

gdb_tk="maybe-all-tcl maybe-all-tk maybe-all-itcl maybe-all-tix maybe-all-libgui"
case "$enable_gdbtk" in
  no)
    GDB_TK="" ;;
  yes)
    GDB_TK="${gdb_tk}" ;;
  *)
    # Only add the dependency on gdbtk when GDBtk is part of the gdb
    # distro.  Eventually someone will fix this and move Insight, nee
    # gdbtk to a separate directory.
    if test -d ${srcdir}/gdb/gdbtk ; then
      GDB_TK="${gdb_tk}"
    else
      GDB_TK=""
    fi
    ;;
esac

# Create the 'maybe dependencies'.  This uses a temporary file.

# While at that, we remove Makefiles if we were started for recursive
# configuration, so that the top-level Makefile reconfigures them,
# like we used to do when configure itself was recursive.
rm -f maybedep.tmp
echo '# maybedep.tmp' > maybedep.tmp

# Make-targets which may need maybe dependencies.
mts="configure all install check clean distclean dvi info install-info"
mts="${mts} installcheck mostlyclean maintainer-clean TAGS"

# Loop over modules and make-targets.
for module in ${build_modules} ; do
  if test -z "${no_recursion}" \
     && test -f ${build_subdir}/${module}/Makefile; then
    echo 1>&2 "*** removing ${build_subdir}/${module}/Makefile to force reconfigure"
    rm -f ${build_subdir}/${module}/Makefile
  fi
  for mt in ${mts} ; do
    case ${mt} in
      install) ;; # No installing build modules.
      *) echo "maybe-${mt}-build-${module}: ${mt}-build-${module}" >> maybedep.tmp ;;
    esac
  done
done
for module in ${configdirs} ; do
  if test -z "${no_recursion}" \
     && test -f ${module}/Makefile; then
    echo 1>&2 "*** removing ${module}/Makefile to force reconfigure"
    rm -f ${module}/Makefile
  fi
  for mt in ${mts} ; do
    echo "maybe-${mt}-${module}: ${mt}-${module}" >> maybedep.tmp
  done
done
for module in ${target_configdirs} ; do
  if test -z "${no_recursion}" \
     && test -f ${target_subdir}/${module}/Makefile; then
    echo 1>&2 "*** removing ${target_subdir}/${module}/Makefile to force reconfigure"
    rm -f ${target_subdir}/${module}/Makefile
  fi
  for mt in ${mts} ; do
    echo "maybe-${mt}-target-${module}: ${mt}-target-${module}" >> maybedep.tmp
  done
done
maybe_dependencies=maybedep.tmp
AC_SUBST_FILE(maybe_dependencies)

# Create the serialization dependencies.  This uses a temporary file.

AC_ARG_ENABLE([serial-configure],
[  --enable-serial-[{host,target,build}-]configure
                          Force sequential configuration of
                          sub-packages for the host, target or build
			  machine, or all sub-packages])

case ${enable_serial_configure} in
  yes)
    enable_serial_build_configure=yes
    enable_serial_host_configure=yes
    enable_serial_target_configure=yes
    ;;
esac

# These force 'configure's to be done one at a time, to avoid problems
# with contention over a shared config.cache.
rm -f serdep.tmp
echo '# serdep.tmp' > serdep.tmp
olditem=
test "x${enable_serial_build_configure}" = xyes &&
for item in ${build_configdirs} ; do
  case ${olditem} in
    "") ;;
    *) echo "configure-build-${item}: configure-build-${olditem}" >> serdep.tmp ;;
  esac
  olditem=${item}
done
olditem=
test "x${enable_serial_host_configure}" = xyes &&
for item in ${configdirs} ; do
  case ${olditem} in
    "") ;;
    *) echo "configure-${item}: configure-${olditem}" >> serdep.tmp ;;
  esac
  olditem=${item}
done
olditem=
test "x${enable_serial_target_configure}" = xyes &&
for item in ${target_configdirs} ; do
  case ${olditem} in
    "") ;;
    *) echo "configure-target-${item}: configure-target-${olditem}" >> serdep.tmp ;;
  esac
  olditem=${item}
done
serialization_dependencies=serdep.tmp
# override on OpenBSD
serialization_dependencies=/dev/null
AC_SUBST_FILE(serialization_dependencies)

# Base args.  Strip norecursion, cache-file, srcdir, host, build,
# target and nonopt.  These are the ones we might not want to pass
# down to subconfigures.  Also strip program-prefix, program-suffix,
# and program-transform-name, so that we can pass down a consistent
# program-transform-name.  If autoconf has put single quotes around
# any of these arguments (because they contain shell metacharacters)
# then this will fail; in practice this only happens for
# --program-transform-name, so be sure to override --program-transform-name
# at the end of the argument list.
# These will be expanded by make, so quote '$'.
cat <<\EOF_SED > conftestsed
s/ --no[[^ ]]* / /
s/ --c[[a-z-]]*[[= ]][[^ ]]* / /
s/ --sr[[a-z-]]*[[= ]][[^ ]]* / /
s/ --ho[[a-z-]]*[[= ]][[^ ]]* / /
s/ --bu[[a-z-]]*[[= ]][[^ ]]* / /
s/ --t[[a-z-]]*[[= ]][[^ ]]* / /
s/ --program-[[pst]][[a-z-]]*[[= ]][[^ ]]* / /
s/ -cache-file[[= ]][[^ ]]* / /
s/ -srcdir[[= ]][[^ ]]* / /
s/ -host[[= ]][[^ ]]* / /
s/ -build[[= ]][[^ ]]* / /
s/ -target[[= ]][[^ ]]* / /
s/ -program-prefix[[= ]][[^ ]]* / /
s/ -program-suffix[[= ]][[^ ]]* / /
s/ -program-transform-name[[= ]][[^ ]]* / /
s/ [[^' -][^ ]*] / /
s/^ *//;s/ *$//
s,\$,$$,g
EOF_SED
sed -f conftestsed <<EOF_SED > conftestsed.out
 ${ac_configure_args} 
EOF_SED
baseargs=`cat conftestsed.out`
rm -f conftestsed conftestsed.out

# Add in --program-transform-name, after --program-prefix and
# --program-suffix have been applied to it.  Autoconf has already
# doubled dollar signs and backslashes in program_transform_name; we want
# the backslashes un-doubled, and then the entire thing wrapped in single
# quotes, because this will be expanded first by make and then by the shell. 
# Also, because we want to override the logic in subdir configure scripts to
# choose program_transform_name, replace any s,x,x, with s,y,y,.
sed -e "s,\\\\\\\\,\\\\,g; s,','\\\\'',g; s/s,x,x,/s,y,y,/" <<EOF_SED > conftestsed.out
${program_transform_name}
EOF_SED
gcc_transform_name=`cat conftestsed.out`
rm -f conftestsed.out
baseargs="$baseargs --program-transform-name='${gcc_transform_name}'"

# For the build-side libraries, we just need to pretend we're native,
# and not use the same cache file.  Multilibs are neither needed nor
# desired.
build_configargs="--cache-file=../config.cache --build=${build_alias} --host=${build_alias} ${baseargs}"

# For host modules, accept cache file option, or specification as blank.
case "${cache_file}" in
"") # empty
  cache_file_option="" ;;
/* | [[A-Za-z]]:[[\\/]]* ) # absolute path
  cache_file_option="--cache-file=${cache_file}" ;;
*) # relative path
  cache_file_option="--cache-file=../${cache_file}" ;;
esac

# Host dirs don't like to share a cache file either, horribly enough.
# This seems to be due to autoconf 2.5x stupidity.
host_configargs="--cache-file=./config.cache --build=${build_alias} --host=${host_alias} --target=${target_alias} ${extra_host_args} ${baseargs}"

target_configargs=${baseargs}

# Passing a --with-cross-host argument lets the target libraries know
# whether they are being built with a cross-compiler or being built
# native.  However, it would be better to use other mechanisms to make the
# sorts of decisions they want to make on this basis.  Please consider
# this option to be deprecated.  FIXME.
if test x${is_cross_compiler} = xyes ; then
  target_configargs="--with-cross-host=${host_alias} ${target_configargs}"
fi

# Default to --enable-multilib.
if test x${enable_multilib} = x ; then
  target_configargs="--enable-multilib ${target_configargs}"
fi

# Pass --with-newlib if appropriate.  Note that target_configdirs has
# changed from the earlier setting of with_newlib.
if test x${with_newlib} != xno && echo " ${target_configdirs} " | grep " newlib " > /dev/null 2>&1 && test -d ${srcdir}/newlib ; then
  target_configargs="--with-newlib ${target_configargs}"
fi

# Different target subdirs use different values of certain variables
# (notably CXX).  Worse, multilibs use *lots* of different values.
# Worse yet, autoconf 2.5x makes some of these 'precious', meaning that
# it doesn't automatically accept command-line overrides of them.
# This means it's not safe for target subdirs to share a cache file,
# which is disgusting, but there you have it.  Hopefully this can be
# fixed in future.  It's still worthwhile to use a cache file for each
# directory.  I think.

# Pass the appropriate --host, --build, and --cache-file arguments.
target_configargs="--cache-file=./config.cache --host=${target_alias} --build=${build_alias} ${target_configargs}"

# provide a proper gxx_include_dir.
# Note, if you change the default, make sure to fix both here and in
# the gcc and libstdc++-v3 subdirectories.
# Check whether --with-gxx-include-dir or --without-gxx-include-dir was given.
case "${with_gxx_include_dir}" in
  yes)
    AC_MSG_ERROR([--with-gxx-include-dir=[[dir]] requires a directory])
    ;;
  no | "")
    case "${enable_version_specific_runtime_libs}" in
      yes) gxx_include_dir='${libsubdir}/include/c++' ;;
      *)
        . ${srcdir}/config.if
        gxx_include_dir='${prefix}/include/'${libstdcxx_incdir} ;;
    esac ;;
  *) gxx_include_dir=${with_gxx_include_dir} ;;
esac

FLAGS_FOR_TARGET=
case " $target_configdirs " in
 *" newlib "*)
  case " $target_configargs " in
  *" --with-newlib "*)
   case "$target" in
   *-cygwin*)
     FLAGS_FOR_TARGET=$FLAGS_FOR_TARGET' -L$$r/$(TARGET_SUBDIR)/winsup -L$$r/$(TARGET_SUBDIR)/winsup/cygwin -L$$r/$(TARGET_SUBDIR)/winsup/w32api/lib -isystem $$s/winsup/include -isystem $$s/winsup/cygwin/include -isystem $$s/winsup/w32api/include' ;;
   esac

   # If we're not building GCC, don't discard standard headers.
   if test -d ${srcdir}/gcc; then
     FLAGS_FOR_TARGET=$FLAGS_FOR_TARGET' -nostdinc'

     if test "${build}" != "${host}"; then
       # On Canadian crosses, CC_FOR_TARGET will have already been set
       # by `configure', so we won't have an opportunity to add -Bgcc/
       # to it.  This is right: we don't want to search that directory
       # for binaries, but we want the header files in there, so add
       # them explicitly.
       FLAGS_FOR_TARGET=$FLAGS_FOR_TARGET' -isystem $$r/gcc/include'

       # Someone might think of using the pre-installed headers on
       # Canadian crosses, in case the installed compiler is not fully
       # compatible with the compiler being built.  In this case, it
       # would be better to flag an error than risking having
       # incompatible object files being constructed.  We can't
       # guarantee that an error will be flagged, but let's hope the
       # compiler will do it, when presented with incompatible header
       # files.
     fi
   fi

   case "${target}-${is_cross_compiler}" in
   i[[3456789]]86-*-linux*-no)
      # Here host == target, so we don't need to build gcc,
      # so we don't want to discard standard headers.
      FLAGS_FOR_TARGET=`echo " $FLAGS_FOR_TARGET " | sed -e 's/ -nostdinc / /'`
      ;;
   *)
      # If we're building newlib, use its generic headers last, but search
      # for any libc-related directories first (so make it the last -B
      # switch).
      FLAGS_FOR_TARGET=$FLAGS_FOR_TARGET' -B$$r/$(TARGET_SUBDIR)/newlib/ -isystem $$r/$(TARGET_SUBDIR)/newlib/targ-include -isystem $$s/newlib/libc/include'
      ;;
   esac
   ;;
  esac
  ;;
esac

# Allow the user to override the flags for
# our build compiler if desired.
CFLAGS_FOR_BUILD=${CFLAGS_FOR_BUILD-${CFLAGS}}

# On Canadian crosses, we'll be searching the right directories for
# the previously-installed cross compiler, so don't bother to add
# flags for directories within the install tree of the compiler
# being built; programs in there won't even run.
if test "${build}" = "${host}" && test -d ${srcdir}/gcc; then
  # Search for pre-installed headers if nothing else fits.
  FLAGS_FOR_TARGET=$FLAGS_FOR_TARGET' -B$(build_tooldir)/bin/ -B$(build_tooldir)/lib/ -isystem $(build_tooldir)/include -isystem $(build_tooldir)/sys-include'
fi

if test "x${use_gnu_ld}" = x &&
   echo " ${configdirs} " | grep " ld " > /dev/null ; then
  # Arrange for us to find uninstalled linker scripts.
  FLAGS_FOR_TARGET=$FLAGS_FOR_TARGET' -L$$r/ld'
fi

if test "x${CC_FOR_TARGET+set}" = xset; then
  :
elif test -d ${srcdir}/gcc; then
  CC_FOR_TARGET='$$r/gcc/xgcc -B$$r/gcc/'
elif test "$host" = "$target"; then
  CC_FOR_TARGET='$(CC)'
else
  CC_FOR_TARGET=`echo gcc | sed "${program_transform_name}"`
fi
CC_FOR_TARGET=$CC_FOR_TARGET' $(FLAGS_FOR_TARGET)'

if test "x${GCJ_FOR_TARGET+set}" = xset; then
  :
elif test -d ${srcdir}/gcc; then
  GCJ_FOR_TARGET='$$r/gcc/gcj -B$$r/gcc/'
elif test "$host" = "$target"; then
  GCJ_FOR_TARGET='gcj'
else
  GCJ_FOR_TARGET=`echo gcj | sed "${program_transform_name}"`
fi
GCJ_FOR_TARGET=$GCJ_FOR_TARGET' $(FLAGS_FOR_TARGET)'

# Don't use libstdc++-v3's flags to configure/build itself.
libstdcxx_flags='`test ! -f $$r/$(TARGET_SUBDIR)/libstdc++-v3/scripts/testsuite_flags || $(SHELL) $$r/$(TARGET_SUBDIR)/libstdc++-v3/scripts/testsuite_flags --build-includes` -L$$r/$(TARGET_SUBDIR)/libstdc++-v3/src -L$$r/$(TARGET_SUBDIR)/libstdc++-v3/src/.libs'
raw_libstdcxx_flags='-L$$r/$(TARGET_SUBDIR)/libstdc++-v3/src -L$$r/$(TARGET_SUBDIR)/libstdc++-v3/src/.libs'

if test "x${CXX_FOR_TARGET+set}" = xset; then
  if test "x${RAW_CXX_FOR_TARGET+set}" != xset; then
    RAW_CXX_FOR_TARGET=${CXX_FOR_TARGET}
  fi
elif test -d ${srcdir}/gcc; then
  # We add -shared-libgcc to CXX_FOR_TARGET whenever we use xgcc instead
  # of g++ for linking C++ or Java, because g++ has -shared-libgcc by
  # default whereas gcc does not.
  # RAW_CXX_FOR_TARGET is for linking C++ or java; CXX_FOR_TARGET is for
  # all other cases.
  CXX_FOR_TARGET='$$r/gcc/g++ -B$$r/gcc/ -nostdinc++ '$libstdcxx_flags
  RAW_CXX_FOR_TARGET='$$r/gcc/xgcc -shared-libgcc -B$$r/gcc/ -nostdinc++ '$raw_libstdcxx_flags
elif test "$host" = "$target"; then
  CXX_FOR_TARGET='$(CXX)'
  RAW_CXX_FOR_TARGET=${CXX_FOR_TARGET}
else
  CXX_FOR_TARGET=`echo c++ | sed "${program_transform_name}"`
  RAW_CXX_FOR_TARGET=${CXX_FOR_TARGET}
fi
CXX_FOR_TARGET=$CXX_FOR_TARGET' $(FLAGS_FOR_TARGET)'
RAW_CXX_FOR_TARGET=$RAW_CXX_FOR_TARGET' $(FLAGS_FOR_TARGET)'

qCXX_FOR_TARGET=`echo "$CXX_FOR_TARGET" | sed 's,[[&%]],\\\&,g'`
qRAW_CXX_FOR_TARGET=`echo "$RAW_CXX_FOR_TARGET" | sed 's,[[&%]],\\\&,g'`

# We want to defer the evaluation of `cmd`s and shell variables in
# CXX_FOR_TARGET when recursing in the top-level Makefile, such as for
# bootstrap.  We'll enclose CXX_FOR_TARGET_FOR_RECURSIVE_MAKE in single
# quotes, but we still have to duplicate `$'s so that shell variables
# can be expanded by the nested make as shell variables, not as make
# macros.
qqCXX_FOR_TARGET=`echo "$qCXX_FOR_TARGET" | sed -e 's,[[$]][[$]],$$$$,g'`
qqRAW_CXX_FOR_TARGET=`echo "$qRAW_CXX_FOR_TARGET" | sed -e 's,[[$]][[$]],$$$$,g'`

# Wrap CC_FOR_TARGET and friends, for certain types of builds.
CC_FOR_TARGET="\$(STAGE_CC_WRAPPER) ${CC_FOR_TARGET}"
GCJ_FOR_TARGET="\$(STAGE_CC_WRAPPER) ${GCJ_FOR_TARGET}"
CXX_FOR_TARGET="\$(STAGE_CC_WRAPPER) ${qCXX_FOR_TARGET}"
RAW_CXX_FOR_TARGET="\$(STAGE_CC_WRAPPER) ${qRAW_CXX_FOR_TARGET}"
CXX_FOR_TARGET_FOR_RECURSIVE_MAKE="\$(STAGE_CC_WRAPPER) ${qqCXX_FOR_TARGET}"
RAW_CXX_FOR_TARGET_FOR_RECURSIVE_MAKE="\$(STAGE_CC_WRAPPER) ${qqRAW_CXX_FOR_TARGET}"

# Makefile fragments.
host_makefile_frag=${srcdir}/${host_makefile_frag}
target_makefile_frag=${srcdir}/${target_makefile_frag}
alphaieee_frag=${srcdir}/${alphaieee_frag}
ospace_frag=${srcdir}/${ospace_frag}
AC_SUBST_FILE(host_makefile_frag)
AC_SUBST_FILE(target_makefile_frag)
AC_SUBST_FILE(alphaieee_frag)
AC_SUBST_FILE(ospace_frag)

# Miscellanea: directories, flags, etc.
AC_SUBST(SET_LIB_PATH)
AC_SUBST(RPATH_ENVVAR)
AC_SUBST(BUILD_PREFIX)
AC_SUBST(BUILD_PREFIX_1)
AC_SUBST(configlinks)
AC_SUBST(gcc_version_trigger)
AC_SUBST(gcc_version)
AC_SUBST(tooldir)
AC_SUBST(build_tooldir)
AC_SUBST(GDB_TK)
AC_SUBST(gxx_include_dir)
AC_SUBST(libstdcxx_incdir)

# Build module lists & subconfigure args.
AC_SUBST(build_configargs)
AC_SUBST(configure_build_modules)
AC_SUBST(all_build_modules)

# Host module lists & subconfigure args.
AC_SUBST(host_configargs)
AC_SUBST(configdirs)

# Target module lists & subconfigure args.
AC_SUBST(target_configargs)
AC_SUBST(target_configdirs)

# Build tools.
AC_SUBST(BISON)
AC_SUBST(CC_FOR_BUILD)
AC_SUBST(LEX)
AC_SUBST(MAKEINFO)
AC_SUBST(YACC)
AC_SUBST(config_shell)

# Host tools.
NCN_STRICT_CHECK_TOOL(AR, ar)
NCN_STRICT_CHECK_TOOL(AS, as)
NCN_STRICT_CHECK_TOOL(DLLTOOL, dlltool)
NCN_STRICT_CHECK_TOOL(LD, ld)
NCN_STRICT_CHECK_TOOL(NM, nm)
NCN_STRICT_CHECK_TOOL(RANLIB, ranlib, :)
NCN_STRICT_CHECK_TOOL(WINDRES, windres)
NCN_STRICT_CHECK_TOOL(OBJCOPY, objcopy)
NCN_STRICT_CHECK_TOOL(OBJDUMP, objdump)
AC_SUBST(CC)
AC_SUBST(CXX)
AC_SUBST(CFLAGS)
AC_SUBST(CFLAGS_FOR_BUILD)
AC_SUBST(CXXFLAGS)
AC_SUBST(DEFAULT_YACC)
AC_SUBST(DEFAULT_LEX)
AC_SUBST(DEFAULT_M4)

# Target tools.
NCN_STRICT_CHECK_TARGET_TOOL(AR_FOR_TARGET, ar)
NCN_STRICT_CHECK_TARGET_TOOL(AS_FOR_TARGET, as)
NCN_STRICT_CHECK_TARGET_TOOL(DLLTOOL_FOR_TARGET, dlltool)
NCN_STRICT_CHECK_TARGET_TOOL(LD_FOR_TARGET, ld)
NCN_STRICT_CHECK_TARGET_TOOL(NM_FOR_TARGET, nm)
NCN_STRICT_CHECK_TARGET_TOOL(RANLIB_FOR_TARGET, ranlib, :)
NCN_STRICT_CHECK_TARGET_TOOL(WINDRES_FOR_TARGET, windres)

AC_SUBST(GCC_FOR_TARGET)
AC_SUBST(FLAGS_FOR_TARGET)
AC_SUBST(CC_FOR_TARGET)
AC_SUBST(GCJ_FOR_TARGET)
AC_SUBST(CXX_FOR_TARGET)
AC_SUBST(RAW_CXX_FOR_TARGET)
AC_SUBST(CXX_FOR_TARGET_FOR_RECURSIVE_MAKE)
AC_SUBST(RAW_CXX_FOR_TARGET_FOR_RECURSIVE_MAKE)

# Fix up target tools.
if test "x${build}" = "x${host}" ; then
  # In this case, the newly built tools can and should be used,
  # so we override the results of the autoconf tests.
  # This should really only happen when the tools are actually being built,
  # but that's a further refinement.  The new build scheme, where
  # tools are built into a structure paralleling where they're installed,
  # should also eliminate all of this cleanly.
  AR_FOR_TARGET="\$(USUAL_AR_FOR_TARGET)"
  AS_FOR_TARGET="\$(USUAL_AS_FOR_TARGET)"
  DLLTOOL_FOR_TARGET="\$(USUAL_DLLTOOL_FOR_TARGET)"
  LD_FOR_TARGET="\$(USUAL_LD_FOR_TARGET)"
  NM_FOR_TARGET="\$(USUAL_NM_FOR_TARGET)"
  RANLIB_FOR_TARGET="\$(USUAL_RANLIB_FOR_TARGET)"
  WINDRES_FOR_TARGET="\$(USUAL_WINDRES_FOR_TARGET)"
fi
# Certain tools may need extra flags.
AR_FOR_TARGET=${AR_FOR_TARGET}${extra_arflags_for_target}
RANLIB_FOR_TARGET=${RANLIB_FOR_TARGET}${extra_ranlibflags_for_target}
NM_FOR_TARGET=${NM_FOR_TARGET}${extra_nmflags_for_target}

AC_MSG_CHECKING([whether to enable maintainer-specific portions of Makefiles])
AC_ARG_ENABLE(maintainer-mode,
[  --enable-maintainer-mode enable make rules and dependencies not useful
                          (and sometimes confusing) to the casual installer],
      USE_MAINTAINER_MODE=$enableval,
      USE_MAINTAINER_MODE=no)
AC_MSG_RESULT($USE_MAINTAINER_MODE)
AC_SUBST(MAINTAINER_MODE_TRUE)
AC_SUBST(MAINTAINER_MODE_FALSE)
if test "$USE_MAINTAINER_MODE" = yes; then
  MAINTAINER_MODE_TRUE=
  MAINTAINER_MODE_FALSE='#'
else
  MAINTAINER_MODE_TRUE='#'
  MAINTAINER_MODE_FALSE=
fi	
MAINT=$MAINTAINER_MODE_TRUE
AC_SUBST(MAINT)dnl

AC_OUTPUT(Makefile)
@


1.20
log
@Merge conflicts, bringing our changes back in:
- extra $(SHELL) and sugar for make (so that files not mode +x still work)
- safer temp file handling
- our W^X binary layout changes in ld
- OpenBSD policy for library file selection in ld
- arm and m88k changes which were not merged in time for official 2.15
- bfd core file handling
- a couple typos

New for 2.15:
- ld(1) and as(1) manpages now generated at build time
- binutils/stabs.c reverted to use our in-tree libiberty for now
- we still use our VIA C3 crypto code over stock binutils, as it recognizes
  more instructions
- new emulations for OpenBSD on mips64 machines, to help OpenBSD/sgi
- relaxed %f# handling in gas on OpenBSD/sparc64 (same as was in 2.14)

Tested on all platforms by various people; special thanks to sturm@@ and
otto@@.
@
text
@d726 1
a726 1
    noconfigdirs="$noconfigdirs ld gas gprof ${libgcj}"
@


1.19
log
@Resolve merge conflicts, adjust method of W^X handing (.sh files)
remove testsuites (not useable) remove mmalloc (not part of new binutils).
@
text
@d2 1
a2 1
#   1999, 2000, 2001, 2002, 2003 Free Software Foundation, Inc.
d26 3
d69 8
a76 2
# Export original configure arguments for use by sub-configures.
TOPLEVEL_CONFIGURE_ARGUMENTS="$progname $@@"
d148 1
a148 2
target_libs="target-libiberty \
		target-libgloss \
d153 2
a154 1
		target-libobjc"
d156 2
a157 2
# these tools are built using the target libs, and are intended to run only
# in the target environment
d159 1
a159 1
# note: any program that *uses* libraries that are in the "target_libs"
d174 11
a184 1
target_configdirs=`echo ${target_libs} ${target_tools}`
d201 2
a202 24
# We always want to use the same name for this directory, so that dejagnu
# can reliably find it.
target_subdir=${target_alias}

if test ! -d ${target_subdir} ; then
  if mkdir ${target_subdir} ; then true
  else
    echo "'*** could not make ${PWD=`${PWDCMD-pwd}`}/${target_subdir}" 1>&2
    exit 1
  fi
fi

build_prefix=build-
build_subdir=${build_prefix}${build_alias}

if test x"${build_alias}" != x"${host}" ; then
  if test ! -d ${build_subdir} ; then
    if mkdir ${build_subdir} ; then true
    else
      echo "'*** could not make ${PWD=`${PWDCMD-pwd}`}/${build_subdir}" 1>&2
      exit 1
    fi
  fi
fi
d251 2
a252 1
if test x"${with_headers}" != x && test x"${with_libs}" != x ; then
d279 2
a280 2
  i[[3456]]86-*-vsta)
    noconfigdirs="tcl expect dejagnu make texinfo bison patch flex byacc send-pr gprof uudecode dejagnu diff guile perl itcl tix gnuserv gettext"
d282 2
a283 2
  i[[3456]]86-*-go32* | i[[3456]]86-*-msdosdjgpp*)
    noconfigdirs="tcl tk expect dejagnu send-pr uudecode guile itcl tix gnuserv libffi"
d285 1
a285 1
  i[[3456]]86-*-mingw32*)
d287 1
a287 1
    noconfigdirs="expect dejagnu autoconf automake send-pr rcs guile perl texinfo libtool"
d289 1
a289 1
  i[[3456]]86-*-beos*)
d293 1
a293 1
    noconfigdirs="autoconf automake send-pr rcs guile perl"
d296 1
a296 1
    noconfigdirs="rcs"
d299 1
a299 1
    noconfigdirs="patch diff make tk tcl expect dejagnu autoconf automake texinfo bison send-pr gprof rcs guile perl itcl tix gnuserv"
d309 8
d334 7
d344 4
d387 3
d391 1
a391 1
    noconfigdirs="$noconfigdirs target-newlib target-libgloss ${libgcj}"
d406 1
a406 1
  alpha*-*-freebsd*)
d413 3
d474 1
a474 1
    noconfigdirs="$noconfigdirs ${libgcj}"
d480 1
a480 1
    noconfigdirs="$noconfigdirs ${libgcj}"
d483 1
a483 1
    noconfigdirs="$noconfigdirs ${libgcj}"
d489 1
a489 1
    noconfigdirs="$noconfigdirs target-libgloss"
d513 3
d522 1
a522 1
    noconfigdirs="$noconfigdirs tix readline mmalloc libgui itcl gdb ld"
d524 1
a524 1
  i[[3456]]86-*-coff | i[[3456]]86-*-elf)
d527 1
a527 1
  i[[34567]]86-*-freebsd*)
d530 1
a530 1
  i[[3456]]86-*-linux*)
d549 1
a549 1
  i[[3456]]86-*-mingw32*)
d555 1
a555 1
      i[[3456]]86-*-mingw32) ;; # keep gdb tcl tk expect etc.
d573 1
a573 1
  i[[3456]]86-*-pe)
d576 1
a576 1
  i[[3456]]86-*-sco3.2v5*)
d581 1
a581 1
  i[[3456]]86-*-sco*)
d584 1
a584 1
  i[[3456]]86-*-solaris2*)
d587 1
a587 1
  i[[3456]]86-*-sysv4*)
d590 1
a590 1
  i[[3456]]86-*-beos*)
d593 3
d621 1
a621 1
    noconfigdirs="$noconfigdirs gprof target-libgloss ${libgcj}"
d643 1
a643 1
    noconfigdirs="$noconfigdirs gprof ${libgcj}"
d652 1
a652 2
    # The GNU linker does not support shared libraries.
    noconfigdirs="$noconfigdirs ld gprof target-libgloss ${libgcj}"
d665 1
a665 1
    noconfigdirs="$noconfigdirs target-libgloss target-libffi ${libgcj}"
d684 3
a686 3
      i[[3456]]86-*-vsta) ;; # don't add gprof back in
      i[[3456]]86-*-go32*) ;; # don't add gprof back in
      i[[3456]]86-*-msdosdjgpp*) ;; # don't add gprof back in
d734 3
d783 2
a784 3
for lang in ${srcdir}/gcc/*/config-lang.in ..
do
  case $lang in
d790 5
a794 4
      lang_alias=`sed -n -e 's,^language=[['"'"'"'"]]\(.*\)[["'"'"'"']].*$,\1,p' -e 's,^language=\([[^ 	]]*\).*$,\1,p' $lang`
      this_lang_requires=`sed -n -e 's,^lang_requires=[['"'"'"'"]]\(.*\)[["'"'"'"']].*$,\1,p' -e 's,^lang_requires=\([[^ 	]]*\).*$,\1,p' $lang`
      for other in $this_lang_requires
      do
d798 3
a800 3
	  *,$lang_alias,*)
	    echo " \`$other' language required by \`$lang_alias'; enabling" 1>&2
	    enable_languages="$enable_languages,$other"
d808 2
a809 4
subdirs=
for lang in ${srcdir}/gcc/*/config-lang.in ..
do
  case $lang in
d815 9
a823 7
      lang_alias=`sed -n -e 's,^language=[['"'"'"'"]]\(.*\)[["'"'"'"']].*$,\1,p' -e 's,^language=\([[^ 	]]*\).*$,\1,p' $lang`
      this_lang_libs=`sed -n -e 's,^target_libs=[['"'"'"'"]]\(.*\)[["'"'"'"']].*$,\1,p' -e 's,^target_libs=\([[^ 	]]*\).*$,\1,p' $lang`
      this_lang_dirs=`sed -n -e 's,^lang_dirs=[['"'"'"'"]]\(.*\)[["'"'"'"']].*$,\1,p' -e 's,^lang_dirs=\([[^ 	]]*\).*$,\1,p' $lang`
      build_by_default=`sed -n -e 's,^build_by_default=[['"'"'"'"]]\(.*\)[["'"'"'"']].*$,\1,p' -e 's,^build_by_default=\([[^ 	]]*\).*$,\1,p' $lang`
      if test "x$lang_alias" = x
         then
        echo "$lang doesn't set \$language." 1>&2
d826 12
a837 4
      case ${build_by_default},${enable_languages}, in
        *,$lang_alias,*) add_this_lang=yes ;;
        no,*) add_this_lang=no ;;
        *,all,*) add_this_lang=yes ;;
d840 6
a845 5
      if test x"${add_this_lang}" = xyes; then
        eval target_libs='"$target_libs "'\"$this_lang_libs\"
      else
        eval noconfigdirs='"$noconfigdirs "'\"$this_lang_libs $this_lang_dirs\"
      fi
d959 1
a959 1
if test x"${with_headers}" != x ; then
d976 1
a976 1
if test x"${with_libs}" != x ; then
d1096 1
a1096 1
  i[[3456]]86-*-sysv5*)
d1099 1
a1099 1
  i[[3456]]86-*-dgux*)
d1103 1
a1103 1
  i[[3456]]86-ncr-sysv4.3*)
d1108 1
a1108 1
  i[[3456]]86-ncr-sysv4*)
d1117 1
a1117 1
  i[[3456]]86-*-sco3.2v5*)
d1119 1
a1119 1
  i[[3456]]86-*-sco*)
d1125 1
a1125 1
  i[[3456]]86-*-udk*)
d1128 1
a1128 1
  i[[3456]]86-*-solaris2*)
d1131 1
a1131 1
  i[[3456]]86-*-msdosdjgpp*)
d1181 1
a1181 1
  i[[3456]]86-*-netware*)
d1273 1
a1273 5
  mips*-*-irix6*o32)
    with_stabs=yes;
    extra_host_args="${extra_host_args} --with-stabs"
    ;;
  mips*-*-irix6*)
d1311 1
a1311 1
tooldir='$(exec_prefix)'/${target_alias}
d1649 2
a1650 5
# has its final value.  It's time to create some lists of valid targets.

# While at that, we remove Makefiles if we were started for recursive
# configuration, such that the top-level Makefile reconfigures them,
# like we used to do when configure itself was recursive.
d1654 3
a1656 45
# Only make build modules if build != host.
# This should be done more generally, but at the moment it doesn't matter.
if test ${host_alias} != ${build_alias} ; then
  for module in libiberty ; do
    all_build_modules=all-build-${module}
    configure_build_modules=configure-build-${module}
    if test -z "${no_recursion}" \
       && test -f ${build_subdir}/${module}/Makefile; then
      echo 1>&2 "*** removing ${build_subdir}/${module}/Makefile to force reconfigure"
      rm -f ${build_subdir}/${module}/Makefile
    fi
  done
fi

all_host_modules=
check_host_modules=
install_host_modules=
configure_host_modules=
for module in ${configdirs} ; do
  all_host_modules="${all_host_modules} all-${module}"
  check_host_modules="${check_host_modules} check-${module}"
  install_host_modules="${install_host_modules} install-${module}"
  configure_host_modules="${configure_host_modules} configure-${module}"
  if test -z "${no_recursion}" \
     && test -f ${module}/Makefile; then
    echo 1>&2 "*** removing ${module}/Makefile to force reconfigure"
    rm -f ${module}/Makefile
  fi
done
install_host_modules_nogcc=`echo "${install_host_modules}" | sed -e 's/install-gcc//g'`

all_target_modules=
check_target_modules=
install_target_modules=
configure_target_modules=
for module in ${target_configdirs} ; do
  all_target_modules="${all_target_modules} all-target-${module}"
  check_target_modules="${check_target_modules} check-target-${module}"
  install_target_modules="${install_target_modules} install-target-${module}"
  configure_target_modules="${configure_target_modules} configure-target-${module}"
  if test -z "${no_recursion}" \
     && test -f ${target_subdir}/${module}/Makefile; then
    echo 1>&2 "*** removing ${target_subdir}/${module}/Makefile to force reconfigure"
    rm -f ${target_subdir}/${module}/Makefile
  fi
d1686 4
d1692 38
a1729 5
for item in ${all_build_modules} ${all_host_modules} ${all_target_modules} \
	${install_host_modules} ${install_target_modules} \
	${configure_build_modules} ${configure_host_modules} ${configure_target_modules} \
	; do
  echo "maybe-${item}: ${item}" >> maybedep.tmp
d1737 2
a1738 2
[  --disable-serial-[{host,target,build}-]configure
                          Don't force sequential configuration of
d1740 9
a1748 1
			  machine, or of any sub-packages at all])
d1755 1
a1755 2
test "x${enable_serial_configure}" = xno ||
test "x${enable_serial_build_configure}" = xno ||
d1764 1
a1764 2
test "x${enable_serial_configure}" = xno ||
test "x${enable_serial_host_configure}" = xno ||
d1773 1
a1773 2
test "x${enable_serial_configure}" = xno ||
test "x${enable_serial_target_configure}" = xno ||
d1788 47
a1834 15
# down to subconfigures.
baseargs=`echo " ${ac_configure_args} " | \
	sed -e 's/ --no[[^ ]]* / /' \
	    -e 's/ --c[[a-z-]]*[[= ]][[^ ]]* / /' \
	    -e 's/ --sr[[a-z-]]*[[= ]][[^ ]]* / /' \
	    -e 's/ --ho[[a-z-]]*[[= ]][[^ ]]* / /' \
	    -e 's/ --bu[[a-z-]]*[[= ]][[^ ]]* / /' \
	    -e 's/ --t[[a-z-]]*[[= ]][[^ ]]* / /' \
	    -e 's/ -cache-file[[= ]][[^ ]]* / /' \
	    -e 's/ -srcdir[[= ]][[^ ]]* / /' \
	    -e 's/ -host[[= ]][[^ ]]* / /' \
	    -e 's/ -build[[= ]][[^ ]]* / /' \
	    -e 's/ -target[[= ]][[^ ]]* / /' \
	    -e "s/ [[^' -][^ ]*] / /" \
	    -e 's/^ *//;s/ *$//'`
d1851 3
a1853 1
host_configargs="${cache_file_option} --build=${build_alias} --host=${host_alias} --target=${target_alias} ${extra_host_args} ${baseargs}"
d1877 9
d1887 1
a1887 1
target_configargs="--cache-file=../config.cache --host=${target_alias} --build=${build_alias} ${target_configargs}"
d1914 1
a1914 1
     FLAGS_FOR_TARGET=$FLAGS_FOR_TARGET' -L$$r/$(TARGET_SUBDIR)/winsup -L$$r/$(TARGET_SUBDIR)/winsup/cygwin -L$$r/$(TARGET_SUBDIR)/winsup/w32api/lib -isystem $$s/winsup/include -isystem $$s/winsup/cygwin/include -isystem $$s/winsup/w32api/include -isystem $$s/newlib/libc/sys/cygwin -isystem $$s/newlib/libc/sys/cygwin32' ;;
d1941 1
a1941 1
   i[[3456]]86-*-linux*-no)
d1958 4
d2000 2
a2001 2
libstdcxx_flags='`test ! -f $$r/$(TARGET_SUBDIR)/libstdc++-v3/testsuite_flags || $(SHELL) $$r/$(TARGET_SUBDIR)/libstdc++-v3/testsuite_flags --build-includes` -L$$r/$(TARGET_SUBDIR)/libstdc++-v3/src -L$$r/$(TARGET_SUBDIR)/libstdc++-v3/src/.libs'
raw_libstdcxx_flags=' -L$$r/$(TARGET_SUBDIR)/libstdc++-v3/src -L$$r/$(TARGET_SUBDIR)/libstdc++-v3/src/.libs'
d2004 3
a2006 1
  :
a2069 1
AC_SUBST(build_subdir)
a2076 5
AC_SUBST(configure_host_modules)
AC_SUBST(all_host_modules)
AC_SUBST(check_host_modules)
AC_SUBST(install_host_modules)
AC_SUBST(install_host_modules_nogcc)
a2078 1
AC_SUBST(target_subdir)
a2080 4
AC_SUBST(configure_target_modules)
AC_SUBST(all_target_modules)
AC_SUBST(check_target_modules)
AC_SUBST(install_target_modules)
d2103 1
@


1.18
log
@configs for amd64; brad@@ ok
@
text
@d1 2
a2 17
#! /bin/bash
##############################################################################

## This file is a shell script fragment that supplies the information
## necessary to tailor a template configure script into the configure
## script appropriate for this directory.  For more information, check
## any existing configure script.  

## Be warned, there are two types of configure.in files.  There are those
## used by Autoconf, which are macros which are expanded into a configure
## script by autoconf.  The other sort, of which this is one, is executed
## by Cygnus configure.  

## For more information on these two systems, check out the documentation
## for 'Autoconf' (autoconf.texi) and 'Configure' (configure.texi).  

#   Copyright (C) 1992-99, 2000 Free Software Foundation, Inc.
d19 84
d106 4
a109 3
### (library or tools, host or target), doing a dependency sort.  For
### example, gdb requires that byacc (or bison) be built first, so it is in
### the ${host_tools} list after byacc and bison.  
d111 6
d120 1
a120 15
host_libs="intl mmalloc libiberty opcodes bfd readline gash db tcl tk tcl8.1 tk8.1 tclX itcl tix libgui"

if [ "${enable_gdbgui}" = "yes" ] ; then
	host_libs="${host_libs} libgui"
fi

# Set up configure/Makefile variables if libstdc++-v3 is to be built.
if [ "${enable_libstdcxx_v3}" = "yes" ] && test -d $srcdir/libstdc++-v3; then
        libstdcxx_version="target-libstdc++-v3"
	# Don't use libstdc++-v3's flags to configure/build itself.
	libstdcxx_flags='`case $$dir in libstdc++-v3) ;; *) cat $$r/$(TARGET_SUBDIR)/libstdc++-v3/src/libstdc++.INC 2>/dev/null || : ;; esac` -L$$r/$(TARGET_SUBDIR)/libstd++-v3/src -L$$r/$(TARGET_SUBDIR)/libstd++-v3/src/.libs'
else
        libstdcxx_version="target-libio target-libstdc++"
        libstdcxx_flags='-isystem $$s/libstdc++ -isystem $$s/libstdc++/std -isystem $$s/libstdc++/stl -isystem $$s/libio/ -isystem $$s/libio/stdio -L$$r/$(TARGET_SUBDIR)/libstdc++'
fi
d125 10
a134 1
host_tools="byacc flex bison binutils ld gas gcc cgen sid sim gdb make patch prms send-pr gprof gdbtest tgas etc expect dejagnu ash bash bzip2 m4 autoconf automake libtool ispell grep diff rcs cvssrc fileutils shellutils time textutils wdiff find emacs emacs19 uudecode hello tar gzip indent recode release sed utils guile perl apache inet gawk findutils snavigator libtool gettext zip"
d142 1
a142 1
		${libstdcxx_version} \
d144 1
a144 6
		target-libchill \
		target-libffi \
		target-libjava \
		target-zlib \
		target-boehm-gc \
		target-qthreads \
d154 1
a154 1
target_tools="target-examples target-groff target-gperf"
a157 16
## These two lists are of directories that are to be removed from the
## ${configdirs} list for either cross-compilations or for native-
## compilations.  For example, it doesn't make that much sense to
## cross-compile Emacs, nor is it terribly useful to compile target-libiberty in
## a native environment.  

# directories to be built in the native environment only
#
# This must be a single line because of the way it is searched by grep in
# the code below.
native_only="autoconf automake libtool cvssrc emacs emacs19 fileutils find gawk gettext grep gzip hello indent ispell m4 rcs recode sed shellutils tar textutils gash uudecode wdiff gprof target-groff guile perl apache inet time ash bash bzip2 prms snavigator gnuserv target-gperf"

# directories to be built in a cross environment only
#
cross_only="target-libgloss target-newlib target-cygmon target-opcodes target-libstub"

a168 1
srctrigger=move-if-change
d174 102
a275 1
# per-host:
a276 2
# Work in distributions that contain no compiler tools, like Autoconf.
if [ -d ${srcdir}/config ]; then
d278 2
a279 2
  m68k-hp-hpux*)
    host_makefile_frag="${host_makefile_frag} config/mh-hp300"
d281 2
a282 2
  m68k-apollo-sysv*)
    host_makefile_frag="${host_makefile_frag} config/mh-apollo68"
d284 2
a285 2
  m68k-apollo-bsd*)
    host_makefile_frag="${host_makefile_frag} config/mh-a68bsd"
d287 3
a289 2
  m88k-dg-dgux*)
    host_makefile_frag="${host_makefile_frag} config/mh-dgux"
d291 2
a292 2
  m88k-harris-cxux*)
    host_makefile_frag="${host_makefile_frag} config/mh-cxux"
d294 2
a295 2
  m88k-motorola-sysv*)
    host_makefile_frag="${host_makefile_frag} config/mh-delta88"
d297 2
a298 2
  mips*-dec-ultrix*)
    host_makefile_frag="${host_makefile_frag} config/mh-decstation"
d300 2
a301 2
  mips*-nec-sysv4*)
    host_makefile_frag="${host_makefile_frag} config/mh-necv4"
d303 2
a304 2
  mips*-sgi-irix6*)
    host_makefile_frag="${host_makefile_frag} config/mh-irix6"
d306 2
a307 2
  mips*-sgi-irix5*)
    host_makefile_frag="${host_makefile_frag} config/mh-irix5"
d309 21
a329 2
  mips*-sgi-irix4*)
    host_makefile_frag="${host_makefile_frag} config/mh-irix4"
d331 13
a343 2
  mips*-sgi-irix3*)
    host_makefile_frag="${host_makefile_frag} config/mh-sysv"
d345 12
a356 2
  mips*-*-sysv4*)
    host_makefile_frag="${host_makefile_frag} config/mh-sysv4"
d358 2
a359 2
  mips*-*-sysv*)
    host_makefile_frag="${host_makefile_frag} config/mh-riscos"
d361 8
a368 2
  i370-ibm-opened*)
    host_makefile_frag="${host_makefile_frag} config/mh-openedition"
d370 2
a371 2
  i[3456]86-*-sysv5*)
    host_makefile_frag="${host_makefile_frag} config/mh-sysv5"
d373 5
a377 2
  i[3456]86-*-dgux*)
    host_makefile_frag="${host_makefile_frag} config/mh-dgux386"
d379 2
a380 2
  i[3456]86-ncr-sysv4.3*)
    host_makefile_frag="${host_makefile_frag} config/mh-ncrsvr43"
d382 3
a384 2
  i[3456]86-ncr-sysv4*)
    host_makefile_frag="${host_makefile_frag} config/mh-ncr3000"
d386 2
a387 2
  i[3456]86-*-sco3.2v5*)
    host_makefile_frag="${host_makefile_frag} config/mh-sysv"
d389 3
a391 2
  i[3456]86-*-sco*)
    host_makefile_frag="${host_makefile_frag} config/mh-sco"
d393 17
a409 2
  i[3456]86-*-udk*)
    host_makefile_frag="${host_makefile_frag} config/mh-sysv5"
d411 2
a412 2
  i[3456]86-*-isc*)
    host_makefile_frag="${host_makefile_frag} config/mh-sysv"
d414 2
a415 2
  i[3456]86-*-solaris2*)
    host_makefile_frag="${host_makefile_frag} config/mh-sysv4"
d417 2
a418 2
  i[3456]86-*-aix*)
    host_makefile_frag="${host_makefile_frag} config/mh-aix386"
d420 2
a421 2
  i[3456]86-*-msdosdjgpp*)
    host_makefile_frag="${host_makefile_frag} config/mh-djgpp"
d423 2
a424 2
  *-cygwin*)
    host_makefile_frag="${host_makefile_frag} config/mh-cygwin"
d426 2
a427 2
  *-mingw32*)
    host_makefile_frag="${host_makefile_frag} config/mh-mingw32"
d429 2
a430 2
  *-interix*)
    host_makefile_frag="${host_makefile_frag} config/mh-interix"
d432 2
a433 2
  *-windows*)
    host_makefile_frag="${host_makefile_frag} config/mh-windows"
d435 2
a436 2
  vax-*-ultrix2*)
    host_makefile_frag="${host_makefile_frag} config/mh-vaxult2"
d438 2
a439 2
  *-*-solaris2*)
    host_makefile_frag="${host_makefile_frag} config/mh-solaris"
d441 2
a442 2
  m68k-sun-sunos*)
    host_makefile_frag="${host_makefile_frag} config/mh-sun3"
d444 2
a445 2
  *-hp-hpux[78]*)
    host_makefile_frag="${host_makefile_frag} config/mh-hpux8"
d447 2
a448 2
  *-hp-hpux*)
    host_makefile_frag="${host_makefile_frag} config/mh-hpux"
d450 2
a451 2
  *-*-hiux*)
    host_makefile_frag="${host_makefile_frag} config/mh-hpux"
d453 2
a454 2
  rs6000-*-lynxos*)
    host_makefile_frag="${host_makefile_frag} config/mh-lynxrs6k"
d456 2
a457 2
  *-*-lynxos*)
    host_makefile_frag="${host_makefile_frag} config/mh-lynxos"
d459 2
a460 2
  *-*-sysv4*)
    host_makefile_frag="${host_makefile_frag} config/mh-sysv4"
d462 2
a463 2
  *-*-sysv*)
    host_makefile_frag="${host_makefile_frag} config/mh-sysv"
d465 2
a466 96
esac
fi

# If we aren't going to be using gcc, see if we can extract a definition
# of CC from the fragment.
if [ -z "${CC}" ] && [ "${build}" = "${host}" ]; then
  IFS="${IFS= 	}"; save_ifs="$IFS"; IFS="${IFS}:"
  found=
  for dir in $PATH; do
    test -z "$dir" && dir=.
    if test -f $dir/gcc; then
      found=yes
      break
    fi
  done
  IFS="$save_ifs"
  if [ -z "${found}" ] && [ -n "${host_makefile_frag}" ] && [ -f "${srcdir}/${host_makefile_frag}" ]; then
    xx=`sed -n -e 's/^[ 	]*CC[ 	]*=[ 	]*\(.*\)$/\1/p' < ${srcdir}/${host_makefile_frag}`
    if [ -n "${xx}" ] ; then
      CC=$xx
    fi
  fi
fi

# We default to --with-shared on platforms where -fpic is meaningless.
# Well, we don't yet, but we will.
if false && [ "${host}" = "${target}" ] && [ x${enable_shared} = x ]; then
  case "${target}" in
    alpha*-dec-osf*)	enable_shared=yes ;;
    alpha*-*-linux*)	enable_shared=yes ;;
    mips-sgi-irix5*)	enable_shared=yes ;;
    *)			enable_shared=no ;;
  esac
fi

case "${enable_shared}" in
  yes) shared=yes ;;
  no) shared=no ;;
  "") shared=no ;;
  *) shared=yes ;;
esac

if [ x${shared} = xyes ]; then
  case "${host}" in
    alpha*-*-linux*)
      host_makefile_frag="${host_makefile_frag} config/mh-elfalphapic"
      ;;
    arm*-*-*)
      host_makefile_frag="${host_makefile_frag} config/mh-armpic"
      ;;
    hppa*-*-*)
      host_makefile_frag="${host_makefile_frag} config/mh-papic"
      ;;
    i[3456]86-*-cygwin*)
      # We don't want -fPIC on Cygwin.
      ;;
    i[3456]86-*-*)
      host_makefile_frag="${host_makefile_frag} config/mh-x86pic"
      ;;
    i370-*-*)
      host_makefile_frag="${host_makefile_frag} config/mh-i370pic"
      ;;
    ia64-*-*)
      host_makefile_frag="${host_makefile_frag} config/mh-ia64pic"
      ;;
    sparc64-*-*)
      host_makefile_frag="${host_makefile_frag} config/mh-sparcpic"
      ;;
    powerpc*-*-aix*)
      # We don't want -fPIC on AIX.
      ;;
    powerpc*-*-*)
      host_makefile_frag="${host_makefile_frag} config/mh-ppcpic"
      ;;
    *-*-*)
      if test -f ${srcdir}/config/mh-${host_cpu}pic; then
        host_makefile_frag="${host_makefile_frag} config/mh-${host_cpu}pic"
      fi
      ;;
  esac
fi

rm -f mh-frag
if [ -n "${host_makefile_frag}" ] ; then
  for f in ${host_makefile_frag}
  do
    cat ${srcdir}/$f >> mh-frag
  done
  host_makefile_frag=mh-frag
fi

# per-target:

case "${target}" in
  v810*)
    target_makefile_frag="${target_makefile_frag} config/mt-v810"
d468 2
a469 2
  i[3456]86-*-netware*)
    target_makefile_frag="${target_makefile_frag} config/mt-netware"
d471 5
a475 2
  powerpc-*-netware*)
    target_makefile_frag="${target_makefile_frag} config/mt-netware"
d477 7
a483 2
  *-*-linux-gnu*)
    target_makefile_frag="${target_makefile_frag} config/mt-linux"
d485 4
a488 2
  *-*-aix4.[3456789]* | *-*-aix[56789].*)
    target_makefile_frag="${target_makefile_frag} config/mt-aix43"
d490 3
a492 11
  mips*-*-pe | sh*-*-pe | *arm-wince-pe)
    target_makefile_frag="${target_makefile_frag} config/mt-wince"
    ;;
esac

# If --enable-target-optspace always use -Os instead of -O2 to build
# the target libraries, similarly if it is not specified, use -Os
# on selected platforms.
case "${enable_target_optspace}:${target}" in
  yes:*)
    target_makefile_frag="${target_makefile_frag} config/mt-ospace"
d494 3
a496 2
  :d30v-*)
    target_makefile_frag="${target_makefile_frag} config/mt-d30v"
d498 2
a499 2
  :m32r-* | :d10v-* | :fr30-*)
    target_makefile_frag="${target_makefile_frag} config/mt-ospace"
d501 2
a502 1
  no:* | :*)
d504 18
a521 2
  *)
    echo "*** bad value \"${enable_target_optspace}\" for --enable-target-optspace flag; ignored" 1>&2
d523 3
a525 1
esac
d527 6
a532 346
skipdirs=
gasdir=gas
use_gnu_ld=
use_gnu_as=

# some tools are so dependent upon X11 that if we're not building with X, 
# it's not even worth trying to configure, much less build, that tool.

case ${with_x} in
  yes | "")  # the default value for this tree is that X11 is available
	;;
  no)
	skipdirs="${skipdirs} tk libgui gash"
	;;
  *)
    	echo "*** bad value \"${with_x}\" for -with-x flag; ignored" 1>&2
    	;;
esac

# Some tools are only suitable for building in a "native" situation.
# Those are added when we have a host==target configuration.  For cross
# toolchains, we add some directories that should only be useful in a
# cross-compiler.

is_cross_compiler=

if [ x"${host}" = x"${target}" ] ; then
	# when doing a native toolchain, don't build the targets
	# that are in the 'cross only' list
	skipdirs="${skipdirs} ${cross_only}"
	is_cross_compiler=no
else
	# similarly, don't build the targets in the 'native only' 
	# list when building a cross compiler
	skipdirs="${skipdirs} ${native_only}"
	is_cross_compiler=yes
fi	

# We always want to use the same name for this directory, so that dejagnu
# can reliably find it.
target_subdir=${target_alias}

if [ ! -d ${target_subdir} ] ; then
  if mkdir ${target_subdir} ; then true
  else
    echo "'*** could not make ${PWD=`pwd`}/${target_subdir}" 1>&2
    exit 1
  fi
fi

copy_dirs=

# Handle --with-headers=XXX.  The contents of the named directory are
# copied to $(tooldir)/sys-include.
if [ x"${with_headers}" != x ]; then
  if [ x${is_cross_compiler} = xno ]; then
    echo 1>&2 '***' --with-headers is only supported when cross compiling
    exit 1
  fi
  case "${exec_prefixoption}" in
  "") x=${prefix} ;;
  *) x=${exec_prefix} ;;
  esac
  copy_dirs="${copy_dirs} ${with_headers} $x/${target_alias}/sys-include"
fi

# Handle --with-libs=XXX.  Multiple directories are permitted.  The
# contents are copied to $(tooldir)/lib.
if [ x"${with_libs}" != x ]; then
  if [ x${is_cross_compiler} = xno ]; then
    echo 1>&2 '***' --with-libs is only supported when cross compiling
    exit 1
  fi
  # Copy the libraries in reverse order, so that files in the first named
  # library override files in subsequent libraries.
  case "${exec_prefixoption}" in
  "") x=${prefix} ;;
  *) x=${exec_prefix} ;;
  esac
  for l in ${with_libs}; do
    copy_dirs="$l $x/${target_alias}/lib ${copy_dirs}"
  done
fi

# If both --with-headers and --with-libs are specified, default to
# --without-newlib.
if [ x"${with_headers}" != x ] && [ x"${with_libs}" != x ]; then
  if [ x"${with_newlib}" = x ]; then
    with_newlib=no
  fi
fi

# Recognize --with-newlib/--without-newlib.
if [ x${with_newlib} = xno ]; then
  skipdirs="${skipdirs} target-newlib"
elif [ x${with_newlib} = xyes ]; then
  skipdirs=`echo " ${skipdirs} " | sed -e 's/ target-newlib / /'`
fi

# Default to using --with-stabs for certain targets.
if [ x${with_stabs} = x ]; then
  case "${target}" in
  mips*-*-irix6*)
    ;;
  mips*-*-* | alpha*-*-osf*)
    with_stabs=yes;
    withoptions="${withoptions} --with-stabs"
    ;;
  esac
fi

# Handle ${copy_dirs}
set fnord ${copy_dirs}
shift
while [ $# != 0 ]; do
  if [ -f $2/COPIED ] && [ x"`cat $2/COPIED`" = x"$1" ]; then
    :
  else
    echo Copying $1 to $2

    # Use the install script to create the directory and all required
    # parent directories.
    if [ -d $2 ]; then
      :
    else
      echo >config.temp
      ${srcdir}/install-sh -c -m 644 config.temp $2/COPIED
    fi

    # Copy the directory, assuming we have tar.
    # FIXME: Should we use B in the second tar?  Not all systems support it.
    (cd $1; tar -cf - .) | (cd $2; tar -xpf -)

    # It is the responsibility of the user to correctly adjust all
    # symlinks.  If somebody can figure out how to handle them correctly
    # here, feel free to add the code.

    echo $1 > $2/COPIED
  fi
  shift; shift
done

# Configure extra directories which are host specific

case "${host}" in
	i[3456]86-*-go32*)
	  configdirs="$configdirs dosrel" ;;
	i[3456]86-*-mingw32*)
	  configdirs="$configdirs dosrel" ;;
	*-cygwin*)
	  configdirs="$configdirs libtermcap dosrel" ;;
esac

# Remove more programs from consideration, based on the host or 
# target this usually means that a port of the program doesn't
# exist yet.

noconfigdirs=""

case "${host}" in
  i[3456]86-*-vsta)
    noconfigdirs="tcl expect dejagnu make texinfo bison patch flex byacc send-pr gprof uudecode dejagnu diff guile perl apache inet itcl tix db snavigator gnuserv gettext"
    ;;
  i[3456]86-*-go32* | i[3456]86-*-msdosdjgpp*)
    noconfigdirs="tcl tk expect dejagnu make texinfo bison patch flex byacc send-pr uudecode dejagnu diff guile perl apache inet itcl tix db snavigator gnuserv gettext libffi"
	;;
  i[3456]86-*-mingw32*)
    # noconfigdirs="tcl tk expect dejagnu make texinfo bison patch flex byacc send-pr uudecode dejagnu diff guile perl apache inet itcl tix db snavigator gnuserv"
     noconfigdirs="expect dejagnu cvs autoconf automake send-pr rcs guile perl texinfo apache inet libtool"
	;;
  i[3456]86-*-beos*)
     noconfigdirs="$noconfigdirs tk itcl tix libgui gdb"
     ;;
  *-*-cygwin*)
     noconfigdirs="autoconf automake send-pr rcs guile perl texinfo apache inet"
    ;;
  *-*-netbsd*)
    noconfigdirs="rcs"
    ;;
  ppc*-*-pe)
     noconfigdirs="patch diff make tk tcl expect dejagnu cvssrc autoconf automake texinfo bison send-pr gprof rcs guile perl apache inet itcl tix db snavigator gnuserv"
    ;;
  powerpc-*-beos*)
    noconfigdirs="$noconfigdirs tk itcl tix libgui gdb dejagnu readline"
    ;;
esac


case "${target}" in
  *-*-netware)
    noconfigdirs="$noconfigdirs ${libstdcxx_version} target-newlib target-libiberty target-libgloss target-libffi"
    ;;
  *-*-rtems*)
    noconfigdirs="$noconfigdirs target-libgloss target-libffi"
    ;;
  *-*-vxworks*)
    noconfigdirs="$noconfigdirs target-newlib target-libgloss target-libffi"
    ;;
  alpha*-dec-osf*)
    # ld works, but does not support shared libraries.  emacs doesn't
    # work.  newlib is not 64 bit ready.  I'm not sure about fileutils.
    # gas doesn't generate exception information.
    noconfigdirs="$noconfigdirs gas ld emacs fileutils target-newlib target-libgloss"
    ;;
  alpha*-*-*vms*)
    noconfigdirs="$noconfigdirs gdb ld target-newlib target-libgloss target-libffi"
    ;;
  alpha*-*-*)
    # newlib is not 64 bit ready
    noconfigdirs="$noconfigdirs target-newlib target-libgloss"
    ;;
  sh*-*-pe|mips*-*-pe|*arm-wince-pe)
    noconfigdirs="$noconfigdirs target-libjava target-libffi target-zlib"
    noconfigdirs="$noconfigdirs target-boehm-gc target-qthreads target-examples"
    noconfigdirs="$noconfigdirs target-libiberty texinfo send-pr"
    noconfigdirs="$noconfigdirs tcl tix tk itcl libgui sim"
    noconfigdirs="$noconfigdirs expect dejagnu"
    # the C++ libraries don't build on top of CE's C libraries
    noconfigdirs="$noconfigdirs ${libstdcxx_version}"
    skipdirs="$skipdirs target-newlib"
    case "${host}" in
      *-*-cygwin*) ;; # keep gdb and readline
      *) noconfigdirs="$noconfigdirs gdb readline ${libstdcxx_version}"
	 ;;
    esac
    ;;
  arc-*-*)
    noconfigdirs="$noconfigdirs target-libgloss target-libffi"
    ;;
  arm-*-pe*)
    noconfigdirs="$noconfigdirs target-libgloss"
    ;;
  arm-*-coff*)
    noconfigdirs="$noconfigdirs target-libgloss"
    if [ x${is_cross_compiler} != xno ] ; then
	   target_configdirs="${target_configdirs} target-bsp target-cygmon"
    fi
    ;;
  arm-*-elf*)
    noconfigdirs="$noconfigdirs target-libgloss"
    if [ x${is_cross_compiler} != xno ] ; then
	   target_configdirs="${target_configdirs} target-bsp target-cygmon"
    fi
    ;;
  arm-*-oabi*)
    noconfigdirs="$noconfigdirs target-libgloss target-libffi"
    ;;
  thumb-*-coff)
    noconfigdirs="$noconfigdirs target-libgloss target-libffi"
    ;;
  thumb-*-elf)
    noconfigdirs="$noconfigdirs target-libgloss target-libffi"
    ;;
  thumb-*-oabi)
    noconfigdirs="$noconfigdirs target-libgloss target-libffi"
    ;;
  strongarm-*-elf)
    noconfigdirs="$noconfigdirs target-libgloss target-libffi"
    if [ x${is_cross_compiler} != xno ] ; then
	   target_configdirs="${target_configdirs} target-bsp target-cygmon"
    fi
    ;;
  strongarm-*-coff)
    noconfigdirs="$noconfigdirs target-libgloss target-libffi"
    if [ x${is_cross_compiler} != xno ] ; then
	   target_configdirs="${target_configdirs} target-bsp target-cygmon"
    fi
    ;;
  xscale-*-elf)
    noconfigdirs="$noconfigdirs target-libgloss target-libffi"
    if [ x${is_cross_compiler} != xno ] ; then
	   target_configdirs="${target_configdirs} target-bsp target-cygmon"
    fi
    ;;
  xscale-*-coff)
    noconfigdirs="$noconfigdirs target-libgloss target-libffi"
    if [ x${is_cross_compiler} != xno ] ; then
	   target_configdirs="${target_configdirs} target-bsp target-cygmon"
    fi
    ;;
  thumb-*-pe)
    noconfigdirs="$noconfigdirs target-libgloss target-libffi"
    ;;
  arm-*-riscix*)
    noconfigdirs="$noconfigdirs ld target-libgloss target-libffi"
    ;;
  c4x-*-*)
    noconfigdirs="$noconfigdirs ${libstdcxx_version} target-libgloss target-libffi"
    ;;
  c54x*-*-* | tic54x-*-*)
    noconfigdirs="$noconfigdirs ${libstdcxx_version} target-libgloss target-libffi gcc gdb newlib"
    ;;
  d10v-*-*)
    noconfigdirs="$noconfigdirs ${libstdcxx_version} target-libgloss target-libffi"
    ;;
  d30v-*-*)
    ;;
  fr30-*-elf*)
    if [ x${is_cross_compiler} != xno ] ; then
	   target_configdirs="${target_configdirs} target-bsp target-libstub target-cygmon"
    fi
    ;;
  h8300*-*-* | \
  h8500-*-*)
    noconfigdirs="$noconfigdirs ${libstdcxx_version} target-libgloss target-libffi"
    ;;
  hppa*-*-*elf* | \
  hppa*-*-linux-gnu* | \
  hppa*-*-lites* | \
  hppa*-*-openbsd* | \
  hppa*64*-*-*)
    # Do configure ld/binutils/gas for this case.
    ;;
  hppa*-*-*)
    # HP's C compiler doesn't handle Emacs correctly (but on BSD and Mach
    # cc is gcc, and on any system a user should be able to link cc to
    # whatever they want.  FIXME, emacs emacs19).
    case "${CC}" in
	"" | cc*) noconfigdirs="$noconfigdirs emacs emacs19" ;;
        *) ;;
    esac
    noconfigdirs="$noconfigdirs ld shellutils"
    ;;
  ia64*-*-elf*)
    # No gdb support yet.
    noconfigdirs="$noconfigdirs tix readline mmalloc libgui itcl gdb"
    ;;
  i[3456]86-*-coff | i[3456]86-*-elf)
    if [ x${is_cross_compiler} != xno ] ; then
         target_configdirs="${target_configdirs} target-libstub target-cygmon"
    fi
    ;;
  i[3456]86-*-go32* | i[3456]-*-msdosdjgpp*)
    # but don't build gdb
    noconfigdirs="$noconfigdirs gdb ${libstdcxx_version} target-libffi"
    ;;
  i[3456]86-*-mingw32*)
    target_configdirs="$target_configdirs target-mingw"
    noconfigdirs="$noconfigdirs expect target-libgloss target-libffi"

    # Can't build gdb for mingw32 if not native.
    case "${host}" in
      i[3456]86-*-mingw32) ;; # keep gdb tcl tk expect etc.
      *) noconfigdirs="$noconfigdirs gdb tcl tk expect itcl tix db snavigator gnuserv"
         ;;
    esac
d536 1
a536 1
    noconfigdirs="$noconfigdirs target-gperf target-libgloss target-libffi"
d543 1
a543 1
      *) noconfigdirs="$noconfigdirs gdb tcl tk expect itcl tix libgui db snavigator gnuserv"
d547 2
a548 2
  i[3456]86-*-pe)
    noconfigdirs="$noconfigdirs ${libstdcxx_version} target-libgloss target-libffi"
d550 1
a550 1
  i[3456]86-*-sco3.2v5*)
d553 1
a553 1
    noconfigdirs="$noconfigdirs ld target-libgloss target-libffi"
d555 2
a556 2
  i[3456]86-*-sco*)
    noconfigdirs="$noconfigdirs gprof target-libgloss target-libffi"
d558 1
a558 1
  i[3456]86-*-solaris2*)
d561 8
a568 8
  i[3456]86-*-sysv4*)
    # The SYSV4 C compiler doesn't handle Emacs correctly
    case "${CC}" in
	"" | cc*) noconfigdirs="$noconfigdirs emacs emacs19" ;;
        *) ;;
    esac
    # but that's okay since emacs doesn't work anyway
    noconfigdirs="$noconfigdirs emacs emacs19 target-libgloss target-libffi"
d570 2
a571 10
  i[3456]86-*-beos*)
     noconfigdirs="$noconfigdirs gdb target-newlib target-libgloss"
     ;;
 m68hc11-*-*|m6811-*-*|m68hc12-*-*|m6812-*-*)
    noconfigdirs="$noconfigdirs target-libiberty target-librx target-libg++ target-libstdc++ target-libio target-libf2c target-libchill target-zlib target-libobjc"
    ;;
 m68k-*-elf*)
    if [ x${is_cross_compiler} != xno ] ; then
	   target_configdirs="${target_configdirs} target-bsp target-cygmon"
    fi
d574 9
a582 3
    if [ x${is_cross_compiler} != xno ] ; then
	   target_configdirs="${target_configdirs} target-bsp target-cygmon"
    fi
d585 1
a585 4
    noconfigdirs="$noconfigdirs target-libffi"
    if [ x${is_cross_compiler} != xno ] ; then
	   target_configdirs="${target_configdirs} target-libstub target-cygmon"
    fi
d588 1
a588 4
    noconfigdirs="$noconfigdirs target-libffi"
    if [ x${is_cross_compiler} != xno ] ; then
	   target_configdirs="${target_configdirs} target-bsp target-libstub target-cygmon"
    fi
d592 1
a592 6
    # The configure and build of ld are currently disabled because
    # GNU ld is known to be broken for AIX 4.2 and 4.3 (at least)
    # The symptom is that GDBtk 4.18 fails at startup with a segfault
    # if linked by GNU ld, but not if linked by the native ld.
    noconfigdirs="$noconfigdirs gprof cvssrc target-libgloss target-libffi ld"
    use_gnu_ld=no
d596 1
a596 1
    noconfigdirs="$noconfigdirs gdb tcl tk make expect target-libgloss itcl tix db snavigator gnuserv target-libffi"
d602 1
a602 1
    noconfigdirs="$noconfigdirs gdb sim make tcl tk expect itcl tix db snavigator gnuserv target-libffi"
d605 1
a605 1
    noconfigdirs="$noconfigdirs gdb target-newlib target-libgloss"
d608 1
a608 3
    if [ x${is_cross_compiler} != xno ] ; then
	   target_configdirs="${target_configdirs} target-bsp target-libstub target-cygmon"
    fi
d611 1
a611 2
    # The CVS server code doesn't work on the RS/6000
    noconfigdirs="$noconfigdirs target-newlib gprof cvssrc target-libffi"
d614 1
a614 6
    # The configure and build of ld are currently disabled because
    # GNU ld is known to be broken for AIX 4.2 and 4.3 (at least)
    # The symptom is that GDBtk 4.18 fails at startup with a segfault
    # if linked by GNU ld, but not if linked by the native ld.
    noconfigdirs="$noconfigdirs gprof target-libffi ld"
    use_gnu_ld=no
d617 1
a617 1
    noconfigdirs="$noconfigdirs gprof target-libffi"
d620 1
a620 1
    noconfigdirs="$noconfigdirs ld binutils gprof target-libgloss target-libffi"
d624 1
a624 2
    # emacs is emacs 18, which does not work on Irix 5 (emacs19 does work)
    noconfigdirs="$noconfigdirs ld gprof emacs target-libgloss"
d627 5
a631 3
    # The GNU assembler does not support IRIX 6.
    # emacs is emacs 18, which does not work on Irix 5 (emacs19 does work)
    noconfigdirs="$noconfigdirs gas gprof emacs target-libgloss"
d634 4
a637 1
    noconfigdirs="$noconfigdirs gprof target-libgloss target-libffi"
d640 1
a640 1
    noconfigdirs="$noconfigdirs gprof target-libgloss target-libffi"
d643 4
a646 4
    noconfigdirs="$noconfigdirs gprof target-libffi"   # same as generic mips
    target_configdirs="${target_configdirs} target-bsp target-libstub target-cygmon"
   ;;
  mips*-*-openbsd*)
d649 1
a649 1
    noconfigdirs="$noconfigdirs gprof target-libffi"
d652 1
a652 1
    noconfigdirs="$noconfigdirs bfd binutils ld gas opcodes target-libgloss target-libffi"
d656 3
a658 3
      i[3456]86-*-vsta) ;; # don't add gprof back in
      i[3456]86-*-go32*) ;; # don't add gprof back in
      i[3456]86-*-msdosdjgpp*) ;; # don't add gprof back in
d661 4
a664 1
    noconfigdirs="$noconfigdirs target-libgloss target-libffi"
d667 1
a667 3
    if [ x${is_cross_compiler} != xno ] ; then
	   target_configdirs="${target_configdirs} target-libstub target-cygmon"
    fi
d670 1
a670 4
    if [ x${is_cross_compiler} != xno ] ; then
	   target_configdirs="${target_configdirs} target-libstub target-cygmon"
    fi
    noconfigdirs="target-libffi"
d673 1
a673 4
    if [ x${is_cross_compiler} != xno ] ; then
	   target_configdirs="${target_configdirs} target-bsp target-libstub target-cygmon"
    fi
    noconfigdirs="target-libffi"
d676 3
a678 2
    if [ x${is_cross_compiler} != xno ] ; then
           noconfigdirs="$noconfigdirs gdb gdbtest target-newlib target-libgloss"
d683 2
d686 1
a686 1
    noconfigdirs="$noconfigdirs bfd binutils gas gcc gdb ld ${libstdcxx_version} opcodes target-libgloss target-libffi"
d689 1
a689 1
    noconfigdirs="$noconfigdirs target-libgloss target-libffi"
d692 1
a692 1
    noconfigdirs="$noconfigdirs target-libgloss target-libffi"
d695 4
a698 1
    noconfigdirs="$noconfigdirs target-libgloss target-libffi"
d701 7
a707 1
    noconfigdirs="$noconfigdirs bfd binutils gdb ld target-newlib opcodes target-libgloss target-libffi"
d709 2
a710 2
  vax-*-openbsd*)
    noconfigdirs="$noconfigdirs ld gas gprof"
d712 5
a716 2
  vax-*-*)
    noconfigdirs="$noconfigdirs target-newlib target-libgloss target-libffi"
d718 533
a1250 2
  x86_64-*-openbsd*)
    noconfigdirs="$noconfigdirs gdb"
a1251 9
  *-*-lynxos*)
    noconfigdirs="$noconfigdirs target-newlib target-libgloss target-libffi"
    ;; 
  *-*-macos* | \
  *-*-mpw*)
    # Macs want a resource compiler.
    configdirs="$configdirs grez"
    noconfigdirs="target-libffi"
    ;;    
d1254 39
a1292 6
# If we aren't building newlib, then don't build libgloss, since libgloss
# depends upon some newlib header files.
case "${noconfigdirs}" in
  *target-libgloss*) ;;
  *target-newlib*) noconfigdirs="$noconfigdirs target-libgloss" ;;
esac
d1294 2
a1295 5
# Make sure we don't let GNU ld be added if we didn't want it.
if [ x$with_gnu_ld = xno ]; then
  use_gnu_ld=no
  noconfigdirs="$noconfigdirs ld"
fi
d1297 2
a1298 5
# Make sure we don't let GNU as be added if we didn't want it.
if [ x$with_gnu_as = xno ]; then
  use_gnu_as=no
  noconfigdirs="$noconfigdirs gas"
fi
d1300 1
a1300 18
# Figure out what language subdirectories are present.
# Look if the user specified --enable-languages="..."; if not, use
# the environment variable $LANGUAGES if defined. $LANGUAGES might
# go away some day.
if test x"${enable_languages+set}" != xset; then
	if test x"${LANGUAGES+set}" = xset; then
		enable_languages="`echo ${LANGUAGES} | tr ' ' ','`"
	else
		enable_languages=all
	fi
else
	if test x"${enable_languages}" = x; then
		echo configure.in: --enable-languages needs at least one argument 1>&2
		exit 1
	fi
fi
subdirs=
for lang in ${srcdir}/gcc/*/config-lang.in ..
d1302 12
a1313 27
	case $lang in
	..) ;;
	# The odd quoting in the next line works around
	# an apparent bug in bash 1.12 on linux.
	${srcdir}/gcc/[*]/config-lang.in) ;;
	*)
	  lang_alias=`sed -n -e 's,^language=['"'"'"'"]\(.*\)["'"'"'"'].*$,\1,p' -e 's,^language=\([^ 	]*\).*$,\1,p' $lang`
	  this_lang_libs=`sed -n -e 's,^target_libs=['"'"'"'"]\(.*\)["'"'"'"'].*$,\1,p' -e 's,^target_libs=\([^ 	]*\).*$,\1,p' $lang`
	  build_by_default=`sed -n -e 's,^build_by_default=['"'"'"'"]\(.*\)["'"'"'"'].*$,\1,p' -e 's,^build_by_default=\([^ 	]*\).*$,\1,p' $lang`
	  if test "x$lang_alias" = x
	  then
		echo "$lang doesn't set \$language." 1>&2
		exit 1
	  fi
	  case ${build_by_default},${enable_languages}, in
	  *,$lang_alias,*) add_this_lang=yes ;;
	  no,*) add_this_lang=no ;;
	  *,all,*) add_this_lang=yes ;;
	  *) add_this_lang=no ;;
	  esac
	  if test x"${add_this_lang}" = xyes; then
	      eval target_libs='"$target_libs "'\"$this_lang_libs\"
	  else
	      eval noconfigdirs='"$noconfigdirs "'\"$this_lang_libs\"
	  fi
	  ;;
	esac
d1316 15
d1332 2
a1333 3
# Remove the entries in $skipdirs and $noconfigdirs from $configdirs and
# $target_configdirs.
# If we have the source for $noconfigdirs entries, add them to $notsupp.
d1335 29
a1363 11
notsupp=""
for dir in . $skipdirs $noconfigdirs ; do
  dirname=`echo $dir | sed -e s/target-//g`
  if [ $dir != . ]  && echo " ${configdirs} " | grep " ${dir} " >/dev/null 2>&1; then
    configdirs=`echo " ${configdirs} " | sed -e "s/ ${dir} / /"`
    if [ -r $srcdir/$dirname/configure ] \
	|| [ -r $srcdir/$dirname/configure.in ]; then
      if echo " ${skipdirs} " | grep " ${dir} " >/dev/null 2>&1; then
	true
      else
	notsupp="$notsupp $dir"
d1365 3
a1367 10
    fi
  fi
  if [ $dir != . ]  && echo " ${target_configdirs} " | grep " ${dir} " >/dev/null 2>&1; then
    target_configdirs=`echo " ${target_configdirs} " | sed -e "s/ ${dir} / /"`
    if [ -r $srcdir/$dirname/configure ] \
	|| [ -r $srcdir/$dirname/configure.in ]; then
      if echo " ${skipdirs} " | grep " ${dir} " >/dev/null 2>&1; then
	true
      else
	notsupp="$notsupp $dir"
d1369 4
a1374 1
done
d1376 11
a1386 9
# Sometimes the tools are distributed with libiberty but with no other
# libraries.  In that case, we don't want to build target-libiberty.
if [ -n "${target_configdirs}" ]; then
  others=
  for i in `echo ${target_configdirs} | sed -e s/target-//g` ; do
    if [ "$i" != "libiberty" ]; then
      if [ -r $srcdir/$i/configure ] || [ -r $srcdir/$i/configure.in ]; then
	others=yes;
	break;
d1388 3
a1390 4
    fi
  done
  if [ -z "${others}" ]; then
    target_configdirs=
a1391 1
fi
d1393 34
a1426 30
# Deconfigure all subdirectories, in case we are changing the
# configuration from one where a subdirectory is supported to one where it
# is not.
if [ -z "${norecursion}" ] && [ -n "${configdirs}" ]; then
  for i in `echo ${configdirs} | sed -e s/target-//g` ; do
    rm -f $i/Makefile
  done
fi
if [ -z "${norecursion}" ] && [ -n "${target_configdirs}" ]; then
  for i in `echo ${target_configdirs} | sed -e s/target-//g` ; do
    rm -f ${target_subdir}/$i/Makefile
  done
fi

# Produce a warning message for the subdirs we can't configure.
# This isn't especially interesting in the Cygnus tree, but in the individual
# FSF releases, it's important to let people know when their machine isn't
# supported by the one or two programs in a package.

if [ -n "${notsupp}" ] && [ -z "${norecursion}" ]; then
  # If $appdirs is non-empty, at least one of those directories must still
  # be configured, or we error out.  (E.g., if the gas release supports a
  # specified target in some subdirs but not the gas subdir, we shouldn't
  # pretend that all is well.)
  if [ -n "$appdirs" ]; then
    for dir in $appdirs ; do
      if [ -r $dir/Makefile.in ]; then
	if echo " ${configdirs} " | grep " ${dir} " >/dev/null 2>&1; then
	  appdirs=""
	  break
d1428 28
a1455 3
	if echo " ${target_configdirs} " | grep " ${dir} " >/dev/null 2>&1; then
	  appdirs=""
	  break
d1457 1
a1458 4
    done
    if [ -n "$appdirs" ]; then
      echo "*** This configuration is not supported by this package." 1>&2
      exit 1
a1460 6
  # Okay, some application will build, or we don't care to check.  Still
  # notify of subdirs not getting built.
  echo "*** This configuration is not supported in the following subdirectories:" 1>&2
  echo "    ${notsupp}" 1>&2
  echo "    (Any other directories should still work fine.)" 1>&2
fi
d1462 18
a1479 12
# Set with_gnu_as and with_gnu_ld as appropriate.
#
# This is done by determining whether or not the appropriate directory
# is available, and by checking whether or not specific configurations
# have requested that this magic not happen.
# 
# The command line options always override the explicit settings in 
# configure.in, and the settings in configure.in override this magic.
#
# If the default for a toolchain is to use GNU as and ld, and you don't 
# want to do that, then you should use the --without-gnu-as and
# --without-gnu-ld options for the configure script.
d1481 29
a1509 4
if [ x${use_gnu_as} = x ] ; then
  if [ x${with_gnu_as} != xno ] && echo " ${configdirs} " | grep " ${gasdir} " > /dev/null 2>&1 && [ -d ${srcdir}/${gasdir} ] ; then
    with_gnu_as=yes
    withoptions="$withoptions --with-gnu-as"
a1510 1
fi
d1512 13
a1524 4
if [ x${use_gnu_ld} = x ] ; then
  if [ x${with_gnu_ld} != xno ] && echo " ${configdirs} " | grep " ld " > /dev/null 2>&1 && [ -d ${srcdir}/ld ] ; then
    with_gnu_ld=yes
    withoptions="$withoptions --with-gnu-ld"
a1525 1
fi
d1527 2
a1528 2
# If using newlib, add --with-newlib to the withoptions so that gcc/configure
# can detect this case.
d1530 2
a1531 4
if [ x${with_newlib} != xno ] && echo " ${target_configdirs} " | grep " target-newlib " > /dev/null 2>&1 && [ -d ${srcdir}/newlib ] ; then
  with_newlib=yes
  withoptions="$withoptions --with-newlib"
fi
d1533 10
a1542 25
if [ x${shared} = xyes ]; then
  case "${target}" in
    hppa*)
      target_makefile_frag="${target_makefile_frag} config/mt-papic"
      ;;
    i[3456]86-*)
      target_makefile_frag="${target_makefile_frag} config/mt-x86pic"
      ;;
    ia64-*)
      target_makefile_frag="${target_makefile_frag} config/mt-ia64pic"
      ;;
    powerpc*-*-aix*)
      # We don't want -fPIC on AIX.
      ;;
    powerpc*-*)
      target_makefile_frag="${target_makefile_frag} config/mt-ppcpic"
      ;;
    alpha*-*-linux*)
      target_makefile_frag="${target_makefile_frag} config/mt-elfalphapic"
      ;;
    *)
      if test -f ${srcdir}/config/mt-${target_cpu}pic; then
        target_makefile_frag="${target_makefile_frag} config/mt-${target_cpu}pic"
      fi
      ;;
a1545 11
rm -f mt-frag
if [ -n "${target_makefile_frag}" ] ; then
  for f in ${target_makefile_frag}
  do
    cat ${srcdir}/$f >> mt-frag
  done
  target_makefile_frag=mt-frag
fi

# post-target:

d1550 1
d1553 13
a1565 8
if [ $? = 0 ] && [ -s conftest -o -s conftest.exe ]; then
  :
else
  echo 1>&2 "*** The command '${CC} -o conftest ${CFLAGS} ${CPPFLAGS} ${LDFLAGS} conftest.c' failed."
  echo 1>&2 "*** You must set the environment variable CC to a working compiler."
  rm -f conftest*
  exit 1
fi
d1572 1
a1572 1
      if [ "`/usr/bin/which $CCBASE`" = "/usr/ucb/cc" ] ; then
d1574 3
a1576 3
          [ -d /opt/SUNWspro/bin ] && could_use="/opt/SUNWspro/bin"
          if [ -d /opt/cygnus/bin ] ; then
              if [ "$could_use" = "" ] ; then
d1582 1
a1582 1
        if [ "$could_use" = "" ] ; then
d1598 93
a1690 12
if [ "${shared}" = "yes" ]; then
  sed -e 's/^SET_LIB_PATH[ 	]*=.*$/SET_LIB_PATH = $(REALLY_SET_LIB_PATH)/' \
      Makefile > Makefile.tem
  rm -f Makefile
  mv -f Makefile.tem Makefile

  case "${host}" in
  *-*-hpux*)
    sed -e 's/^RPATH_ENVVAR[ 	]*=.*$/RPATH_ENVVAR = SHLIB_PATH/' \
	Makefile > Makefile.tem
    rm -f Makefile
    mv -f Makefile.tem Makefile
d1692 43
d1736 51
a1786 1
fi
d1788 1
a1788 8
# Record target_configdirs and the configure arguments in Makefile.
target_configdirs=`echo "${target_configdirs}" | sed -e 's/target-//g'`
targargs=`echo "${arguments}" | \
	sed -e 's/--no[^ 	]*//' \
	    -e 's/--cache[a-z-]*=[^ 	]*//' \
	    -e 's/--ho[a-z-]*=[^ 	]*//' \
	    -e 's/--bu[a-z-]*=[^ 	]*//' \
	    -e 's/--ta[a-z-]*=[^ 	]*//'`
d1795 2
a1796 2
if [ x${is_cross_compiler} = xyes ]; then
  targargs="--with-cross-host=${host_alias} ${targargs}"
d1800 2
a1801 2
if [ x${enable_multilib} = x ]; then
  targargs="--enable-multilib ${targargs}"
d1806 2
a1807 2
if [ x${with_newlib} != xno ] && echo " ${target_configdirs} " | grep " newlib " > /dev/null 2>&1 && [ -d ${srcdir}/newlib ] ; then
  targargs="--with-newlib ${targargs}"
d1810 3
d1815 1
a1815 1
# the gcc, libio, and libstdc++ subdirectories.
d1817 13
a1829 24
gxx_include_dir=
if test -n "${with_gxx_include_dir}"; then
  case "${with_gxx_include_dir}" in
    yes )
      echo "configure.in: error: bad value ${withval} given for g++ include directory" 1>&2
      exit 1
      ;;
    no )
      ;;
    * )
      gxx_include_dir=${with_gxx_include_dir}
      ;;
  esac
fi
if test x${gxx_include_dir} = x; then
  if test x${enable_version_specific_runtime_libs} = xyes; then
    gxx_include_dir='${libsubdir}/include/g++'
  else
    . ${topsrcdir}/config.if
    gxx_include_dir='${prefix}/include/g++'-${libstdcxx_interface}
  fi
else
  gxx_include_dir=${gxx_include_dir}
fi
d1832 4
a1835 3
case " $skipdirs " in
*" target-newlib "*) ;;
*)
d1842 1
a1842 1
   if test -d ${topsrcdir}/gcc; then
d1864 13
a1876 4
   # If we're building newlib, use its generic headers last, but search
   # for any libc-related directories first (so make it the last -B
   # switch).
   FLAGS_FOR_TARGET=$FLAGS_FOR_TARGET' -B$$r/$(TARGET_SUBDIR)/newlib/ -isystem $$r/$(TARGET_SUBDIR)/newlib/targ-include -isystem $$s/newlib/libc/include'
d1878 2
d1886 1
a1886 1
if test "${build}" = "${host}" && test -d ${topsrcdir}/gcc; then
d1888 1
a1888 1
  FLAGS_FOR_TARGET=$FLAGS_FOR_TARGET' -B$(build_tooldir)/bin/ -B$(build_tooldir)/lib/ -isystem $(build_tooldir)/include'
d1891 2
a1892 3
if test "x${use_gnu_ld}" = x && test "x${with_gnu_ld}" != xno &&
   echo " ${configdirs} " | grep " ld " > /dev/null &&
   test -d ${srcdir}/ld; then
d1899 1
a1899 1
elif test -d ${topsrcdir}/gcc; then
d1904 1
a1904 1
  CC_FOR_TARGET=`echo gcc | sed -e 's/x/x/' ${program_transform_name}`
d1906 1
a1906 6
# On Canadian crosses, configure reads CC_FOR_TARGET from Makefile,
# if Makefile exists.  Prevent $(FLAGS_FOR_TARGET) from being duplicated.
case $CC_FOR_TARGET in
*' $(FLAGS_FOR_TARGET)') ;;
*) CC_FOR_TARGET=$CC_FOR_TARGET' $(FLAGS_FOR_TARGET)' ;;
esac
d1908 1
a1908 1
if test "x${CHILL_FOR_TARGET+set}" = xset; then
d1910 2
a1911 2
elif test -d ${topsrcdir}/gcc; then
  CHILL_FOR_TARGET='$$r/gcc/xgcc -B$$r/gcc/ -L$$r/gcc/ch/runtime/'
d1913 1
a1913 1
  CHILL_FOR_TARGET='$(CC)'
d1915 1
a1915 1
  CHILL_FOR_TARGET=`echo gcc | sed -e 's/x/x/' ${program_transform_name}`
d1917 5
a1921 4
case $CHILL_FOR_TARGET in
*' $(FLAGS_FOR_TARGET)') ;;
*) CHILL_FOR_TARGET=$CHILL_FOR_TARGET' $(FLAGS_FOR_TARGET)' ;;
esac
d1925 6
a1930 1
elif test -d ${topsrcdir}/gcc; then
d1932 1
d1935 1
d1937 2
a1938 1
  CXX_FOR_TARGET=`echo c++ | sed -e 's/x/x/' ${program_transform_name}`
d1940 154
a2093 18
case $CXX_FOR_TARGET in
*' $(FLAGS_FOR_TARGET)') ;;
*) CXX_FOR_TARGET=$CXX_FOR_TARGET' $(FLAGS_FOR_TARGET)' ;;
esac
qCXX_FOR_TARGET=`echo "$CXX_FOR_TARGET" | sed 's,&,\\\&,g'`

targargs="--cache-file=../config.cache --host=${target_alias} --build=${build_alias} ${targargs}"
sed -e "s:^TARGET_CONFIGDIRS[ 	]*=.*$:TARGET_CONFIGDIRS = ${target_configdirs}:" \
    -e "s%^CONFIG_ARGUMENTS[ 	]*=.*$%CONFIG_ARGUMENTS = ${targargs}%" \
    -e "s%^FLAGS_FOR_TARGET[ 	]*=.*$%FLAGS_FOR_TARGET = ${FLAGS_FOR_TARGET}%" \
    -e "s%^CC_FOR_TARGET[ 	]*=.*$%CC_FOR_TARGET = ${CC_FOR_TARGET}%" \
    -e "s%^CHILL_FOR_TARGET[ 	]*=.*$%CHILL_FOR_TARGET = ${CHILL_FOR_TARGET}%" \
    -e "s%^CXX_FOR_TARGET[ 	]*=.*$%CXX_FOR_TARGET = ${qCXX_FOR_TARGET}%" \
    -e "s%^TARGET_SUBDIR[ 	]*=.*$%TARGET_SUBDIR = ${target_subdir}%" \
    -e "s%^gxx_include_dir[ 	]*=.*$%gxx_include_dir=${gxx_include_dir}%" \
       Makefile > Makefile.tem
rm -f Makefile
mv -f Makefile.tem Makefile
d2095 1
a2095 5
#
# Local Variables:
# fill-column: 131
# End:
#
@


1.17
log
@hppa pieces; don't regenerate yet.
@
text
@d922 3
@


1.16
log
@resolve conflicts.
@
text
@d693 1
@


1.15
log
@Changes necessary to configure vax. Confirmed by miod + theo.
@
text
@d50 10
d63 1
a63 1
host_tools="byacc flex bison binutils ld gas gcc sim gdb make patch prms send-pr gprof gdbtest tgas etc expect dejagnu ash bash bzip2 m4 autoconf automake libtool ispell grep diff rcs cvssrc fileutils shellutils time textutils wdiff find emacs emacs19 uudecode hello tar gzip indent recode release sed utils guile perl apache inet gawk findutils snavigator libtool gettext zip"
d71 9
a79 4
		target-libio \
		target-librx \
		target-libstdc++ \
		target-libg++"
d172 3
d312 3
d548 1
a548 1
    noconfigdirs="tcl tk expect dejagnu make texinfo bison patch flex byacc send-pr uudecode dejagnu diff guile perl apache inet itcl tix db snavigator gnuserv gettext"
d566 3
d574 1
a574 1
    noconfigdirs="$noconfigdirs target-libg++ target-libstdc++ target-librx target-newlib target-libiberty target-libgloss"
d577 1
a577 1
    noconfigdirs="$noconfigdirs target-libgloss"
d580 1
a580 1
    noconfigdirs="$noconfigdirs target-newlib target-libgloss"
d589 1
a589 7
    noconfigdirs="$noconfigdirs gdb ld target-newlib target-libgloss"
    ;;
  alpha*-*-linux*)
    # newlib is not 64 bit ready
    noconfigdirs="$noconfigdirs target-newlib target-libgloss"
    # linux has rx in libc
    skipdirs="$skipdirs target-librx"
d598 1
a598 1
    noconfigdirs="$noconfigdirs target-librx target-libiberty texinfo send-pr"
d602 1
a602 1
    noconfigdirs="$noconfigdirs target-libg++ target-libstdc++ target-libio"
d606 1
a606 1
      *) noconfigdirs="$noconfigdirs gdb readline target-libio target-libstdc++ target-libg++"
d611 1
a611 1
    noconfigdirs="$noconfigdirs target-libgloss"
d629 1
a629 4
    noconfigdirs="$noconfigdirs target-libgloss"
    ;;
  c4x-*-*)
    noconfigdirs="$noconfigdirs target-libg++ target-libstdc++ target-libio target-librx target-libgloss"
d632 1
a632 1
    noconfigdirs="$noconfigdirs target-libgloss"
d635 1
a635 1
    noconfigdirs="$noconfigdirs target-libgloss"
d638 1
a638 1
    noconfigdirs="$noconfigdirs target-libgloss"
d641 1
a641 1
    noconfigdirs="$noconfigdirs target-libgloss"
d647 13
a659 1
    noconfigdirs="$noconfigdirs target-libgloss"
d665 1
a665 1
    noconfigdirs="$noconfigdirs target-libgloss"
d668 7
a674 1
    noconfigdirs="$noconfigdirs ld target-libgloss"
d677 1
a677 1
    noconfigdirs="$noconfigdirs target-librx target-libg++ target-libstdc++ target-libio"
d688 1
a688 1
    noconfigdirs="$noconfigdirs target-libg++ target-libstdc++ target-libio target-librx target-libgloss"
d692 3
a694 2
  hppa*-*-lites*)
    # Do configure ld/binutils/gas for the above cases.
d706 4
d717 1
a717 1
    noconfigdirs="$noconfigdirs gdb target-libg++ target-libstdc++ target-libio target-librx"
d721 1
a721 1
    noconfigdirs="$noconfigdirs expect target-libgloss"
d732 1
a732 1
    noconfigdirs="$noconfigdirs target-libgloss"
d744 1
a744 1
    noconfigdirs="$noconfigdirs target-libg++ target-libstdc++ target-libio target-librx target-libgloss"
d749 1
a749 1
    noconfigdirs="$noconfigdirs ld target-libgloss"
d752 1
a752 1
    noconfigdirs="$noconfigdirs gprof target-libgloss"
d764 1
a764 1
    noconfigdirs="$noconfigdirs emacs emacs19 target-libgloss"
d769 4
a772 1
  m68k-*-elf*)
d783 1
a783 1
    noconfigdirs="$noconfigdirs"
d789 1
a789 1
    noconfigdirs="$noconfigdirs"
d800 1
a800 1
    noconfigdirs="$noconfigdirs gprof cvssrc target-libgloss ld"
d805 1
a805 1
    noconfigdirs="$noconfigdirs gdb tcl tk make expect target-libgloss itcl tix db snavigator gnuserv"
d811 4
a814 1
    noconfigdirs="$noconfigdirs gdb sim make tcl tk expect itcl tix db snavigator gnuserv"
d823 1
a823 2
    # Newlib makes problems for libg++ in crosses.
    noconfigdirs="$noconfigdirs target-newlib gprof cvssrc"
d830 1
a830 1
    noconfigdirs="$noconfigdirs gprof ld"
d834 1
a834 1
    noconfigdirs="$noconfigdirs gprof"
d837 1
a837 1
    noconfigdirs="$noconfigdirs ld binutils gprof target-libgloss"
a848 5
  mips*-*-linux*)
    noconfigdirs="$noconfigdirs gprof"
    # linux has rx in libc
    skipdirs="$skipdirs target-librx"
    ;;
d850 1
a850 1
    noconfigdirs="$noconfigdirs gprof target-libgloss"
d853 1
a853 1
    noconfigdirs="$noconfigdirs gprof target-libgloss"
d856 1
a856 1
    noconfigdirs="$noconfigdirs gprof"   # same as generic mips
d862 1
a862 1
    noconfigdirs="$noconfigdirs gprof"
d865 1
a865 1
    noconfigdirs="$noconfigdirs bfd binutils ld gas opcodes target-libgloss"
d874 1
a874 1
    noconfigdirs="$noconfigdirs target-libgloss"
d885 1
d891 1
d901 1
a901 1
    noconfigdirs="$noconfigdirs bfd binutils gas gcc gdb ld target-libio target-libg++ target-libstdc++ opcodes target-libgloss"
d904 1
a904 1
    noconfigdirs="$noconfigdirs target-libgloss"
d907 1
a907 1
    noconfigdirs="$noconfigdirs target-libgloss"
d910 1
a910 1
    noconfigdirs="$noconfigdirs target-libgloss"
d913 1
a913 1
    noconfigdirs="$noconfigdirs bfd binutils gdb ld target-newlib opcodes target-libgloss"
d919 1
a919 5
    noconfigdirs="$noconfigdirs target-newlib target-libgloss"
    ;;
  *-*-linux*)
    # linux has rx in libc
    skipdirs="$skipdirs target-librx"
d922 1
a922 2
    # Newlib makes problems for libg++ in crosses.
    noconfigdirs="$noconfigdirs target-newlib target-libgloss"
d928 1
d951 49
d1140 6
d1264 1
a1264 1
# the gcc, libio, libstdc++ and libg++ subdirectories.
d1291 101
a1391 1
targargs="--host=${target_alias} --build=${build_alias} ${targargs}"
d1394 4
@


1.14
log
@Repair mips-based targets, espie@@ ok
@
text
@d875 3
@


1.13
log
@Help stupid cvs fixing basic conflicts.
@
text
@d821 2
@


1.12
log
@Build gdb for power now. yea.
@
text
@d17 1
a17 1
#   Copyright (C) 1992, 93, 94, 95, 1996 Free Software Foundation, Inc.
d44 1
a44 1
host_libs="mmalloc libiberty opcodes bfd readline gash tcl tk tclX"
d51 3
a53 3
#
host_tools="texinfo byacc flex bison binutils ld gas gcc gdb make patch prms send-pr gprof gdbtest tgas etc expect dejagnu sim bash m4 autoconf ispell grep diff rcs cvs fileutils shellutils time textutils wdiff find emacs emacs19 uudecode hello tar gzip indent recode release sed utils guile perl apache inet gawk"

d58 7
a64 2
target_libs="target-libiberty target-libgloss target-newlib target-libio target-librx target-libstdc++ target-libg++"

d73 1
a73 1
target_tools="target-examples target-groff"
d87 1
a87 1
native_only="autoconf cvs emacs emacs19 fileutils find gawk grep gzip hello indent ispell m4 rcs recode sed shellutils tar textutils gash uudecode wdiff gprof target-groff guile perl apache inet time bash prms"
d91 1
a91 1
cross_only="target-libiberty target-libgloss target-newlib"
d115 117
a231 37
  m68k-hp-hpux*)	  host_makefile_frag=config/mh-hp300 ;;
  m68k-apollo-sysv*)      host_makefile_frag=config/mh-apollo68 ;;
  m68k-apollo-bsd*)       host_makefile_frag=config/mh-a68bsd ;;
  m68k-*-linux*)	  host_makefile_frag=config/mh-linux ;;
  m88k-dg-dgux*)	  host_makefile_frag=config/mh-dgux ;;
  m88k-harris-cxux*)	  host_makefile_frag=config/mh-cxux ;;
  m88k-motorola-sysv*)    host_makefile_frag=config/mh-delta88;;
  mips*-dec-ultrix*)      host_makefile_frag=config/mh-decstation ;;
  mips*-nec-sysv4*)	  host_makefile_frag=config/mh-necv4 ;;
  mips*-sgi-irix6*)	  host_makefile_frag=config/mh-irix6 ;;
  mips*-sgi-irix5*)	  host_makefile_frag=config/mh-irix5 ;;
  mips*-sgi-irix4*)       host_makefile_frag=config/mh-irix4 ;;
  mips*-sgi-irix3*)       host_makefile_frag=config/mh-sysv ;;
  mips*-*-sysv4*)	  host_makefile_frag=config/mh-sysv4 ;;
  mips*-*-sysv*)	  host_makefile_frag=config/mh-riscos ;;
  i[3456]86-*-dgux*)	  host_makefile_frag=config/mh-dgux386 ;;
  i[3456]86-ncr-sysv4.3)  host_makefile_frag=config/mh-ncrsvr43 ;;
  i[3456]86-ncr-sysv4*)   host_makefile_frag=config/mh-ncr3000 ;;
  i[3456]86-*-sco3.2v5*)  host_makefile_frag=config/mh-sysv ;;
  i[3456]86-*-sco*)       host_makefile_frag=config/mh-sco ;;
  i[3456]86-*-isc*)	  host_makefile_frag=config/mh-sysv ;;
  i[3456]86-*-linux*)     host_makefile_frag=config/mh-linux ;;
  i[3456]86-*-solaris2*)  host_makefile_frag=config/mh-sysv4 ;;
  i[3456]86-*-aix*)	  host_makefile_frag=config/mh-aix386 ;;
  i[3456]86-*-go32*)	  host_makefile_frag=config/mh-go32 ;;
  *-cygwin32*)	  	  host_makefile_frag=config/mh-cygwin32 ;;
  *-windows*)	  	  host_makefile_frag=config/mh-windows ;;
  vax-*-ultrix2*)         host_makefile_frag=config/mh-vaxult2 ;;
  *-*-solaris2*)          host_makefile_frag=config/mh-solaris ;;
  m68k-sun-sunos*)	  host_makefile_frag=config/mh-sun3 ;;
  *-hp-hpux[78]*)         host_makefile_frag=config/mh-hpux8 ;;
  *-hp-hpux*)             host_makefile_frag=config/mh-hpux ;;
  *-*-hiux*)              host_makefile_frag=config/mh-hpux ;;
  rs6000-*-lynxos*)	  host_makefile_frag=config/mh-lynxrs6k ;;
  *-*-lynxos*)	  	  host_makefile_frag=config/mh-lynxos ;;
  *-*-sysv4*)             host_makefile_frag=config/mh-sysv4 ;;
  *-*-sysv*)              host_makefile_frag=config/mh-sysv ;;
d237 1
a237 1
if [ -z "${CC}" -a "${build}" = "${host}" ]; then
d248 1
a248 1
  if [ -z "${found}" -a -n "${host_makefile_frag}" -a -f "${srcdir}/${host_makefile_frag}" ]; then
d260 2
a261 2
    alpha-dec-osf*)	enable_shared=yes ;;
    alpha-*-linux*)	enable_shared=yes ;;
a274 1
  waugh=
d276 32
a307 4
    hppa*)		waugh=config/mh-papic ;;
    i[3456]86-*)	waugh=config/mh-x86pic ;;
    sparc64-*)		waugh=config/mh-sparcpic ;;
    *)			waugh=config/mh-${host_cpu}pic ;;
d309 9
a317 9
  if [ -f ${srcdir}/${waugh} ]; then
    if [ -n "${host_makefile_frag}" ] ; then
      cat ${srcdir}/${host_makefile_frag} > mh-frag
      cat ${srcdir}/${waugh} >> mh-frag
      host_makefile_frag=mh-frag
    else
      host_makefile_frag=${waugh}
    fi
  fi
d323 38
a360 3
  v810*)		target_makefile_frag=config/mt-v810 ;;
  i[3456]86-*-netware*) target_makefile_frag=config/mt-netware ;;
  powerpc-*-netware*)   target_makefile_frag=config/mt-netware ;;
d375 1
a375 1
	skipdirs="${skipdirs} tk gash"
a393 1
	target_subdir=.
a398 8
	target_subdir=${target_alias}
	if [ ! -d ${target_subdir} ] ; then
	    if mkdir ${target_subdir} ; then true
	    else
		echo "'*** could not make ${PWD=`pwd`}/${target_subdir}" 1>&2
                exit 1
	    fi
	fi
d401 12
d465 3
a467 1
  mips*-*-* | alpha*-*-osf* | i[3456]86*-*-sysv4* | i[3456]86*-*-unixware*)
d489 1
a489 1
      ${srcdir}/install.sh -c -m 644 config.temp $2/COPIED
d510 1
a510 1
	*-cygwin32*)
d512 2
d524 1
a524 1
    noconfigdirs="tcl expect dejagnu make texinfo bison patch flex byacc send-pr gprof uudecode dejagnu diff guile perl apache inet"
d526 6
a531 2
  i[3456]86-*-go32)
    noconfigdirs="tcl tk expect dejagnu make texinfo bison patch flex byacc send-pr gprof uudecode dejagnu diff guile perl apache inet"
d533 5
a537 2
  *-*-cygwin32)
     noconfigdirs="tk tcl expect dejagnu cvs autoconf bison send-pr gprof rcs guile perl texinfo apache inet"
d539 2
a540 4
  *-*-windows*)
# This is only used to build WinGDB...
     configdirs="bfd gdb libiberty opcodes readline sim"
     target_configdirs=
d543 1
a543 1
     noconfigdirs="patch diff make tk tcl expect dejagnu cvs autoconf texinfo bison send-pr gprof rcs guile perl apache inet"
d552 3
d558 1
a558 1
  alpha-dec-osf*)
d560 1
a560 1
    # work.  newlib is not 64 bit ready.  I'm not sure about fileutils or grep.
d562 1
a562 1
    noconfigdirs="$noconfigdirs gas ld emacs fileutils grep target-newlib target-libgloss"
d567 5
a571 1
  alpha*-*-openbsd*)
d577 18
d600 39
d643 10
d658 3
a660 3
  hppa*-*-lites* | \
  hppa*-*-openbsd*)
    # Do configure ld/binutils/gas for this case.
d672 6
a677 1
  i[3456]86-*-go32)
d681 14
a694 3
  *-*-cygwin32)
    target_configdirs="$target_configdirs target-winsup"
    noconfigdirs="$noconfigdirs tcl tk expect target-libgloss"
d698 1
a698 1
    # Can't build gdb for cygwin32 if not native.
d700 3
a702 2
      *-*-cygwin32) ;; # keep gdb
      *) noconfigdirs="$noconfigdirs gdb"
d711 1
a711 1
    noconfigdirs="$noconfigdirs gprof ld target-libgloss"
d717 1
a717 4
    # The linker does static linking correctly, but the Solaris C library
    # has bugs such that some important functions won't work when statically
    # linked.  (See man pages for getpwuid, for example.)
    noconfigdirs="$noconfigdirs ld target-libgloss"
d728 13
d742 4
a745 1
    noconfigdirs="$noconfigdirs ld gcc gdb target-libiberty target-libgloss target-newlib target-libio target-librx target-libstdc++ target-libg++"
d748 4
a751 1
    noconfigdirs="$noconfigdirs ld gcc gdb target-libiberty target-libgloss target-newlib target-libio target-librx target-libstdc++ target-libg++"
d755 5
a759 2
    noconfigdirs="$noconfigdirs gprof cvs target-libgloss"
    # This is needed until gcc and ld are fixed to work together.
d764 1
a764 1
    noconfigdirs="$noconfigdirs gdb tcl tk make expect target-libgloss"
d770 1
a770 1
    noconfigdirs="$noconfigdirs gdb sim make tcl tk expect"
d772 4
a775 1
  powerpc*-*-openbsd*)
d780 1
a780 1
    noconfigdirs="$noconfigdirs target-newlib gprof cvs"
d783 5
a787 2
    noconfigdirs="$noconfigdirs gprof"
    # This is needed until gcc and ld are fixed to work together.
d802 1
a802 1
    # The GNU linker does not support shared libraries.
d804 6
a809 2
    # BFD does not have Irix 6 support yet.
    noconfigdirs="$noconfigdirs bfd binutils ld gas opcodes gdb readline mmalloc sim gprof emacs target-libgloss"
d817 4
a820 2
  mips*-*-openbsd*)
    ;;
d830 2
a831 1
      i[3456]86-*-go32) ;; # don't add gprof back in
d836 15
d861 9
d876 4
a890 7
# targets that need a second pass
case "${target}" in
  *-gm-magic*)
    noconfigdirs="$noconfigdirs target-libgloss"
    ;;
esac

a897 6
# If we are building a Canadian Cross, discard tools that can not be built
# using a cross compiler.  FIXME: These tools should be fixed.
if [ "${build}" != "${host}" ]; then
  noconfigdirs="$noconfigdirs tcl tk expect dejagnu"
fi

a923 1
echo notsupp1
a934 1
echo notsupp2
d961 1
a961 1
if [ -z "${norecursion}" -a -n "${configdirs}" ]; then
d966 1
a966 1
if [ -z "${norecursion}" -a -n "${target_configdirs}" ]; then
d1044 17
a1060 3
    hppa*)		target_makefile_frag=config/mt-papic ;;
    i[3456]86-*)		target_makefile_frag=config/mt-x86pic ;;
    *)			target_makefile_frag=config/mt-${target_cpu}pic ;;
d1064 9
d1081 1
a1081 1
if [ $? = 0 ] && [ -s conftest ]; then
d1129 1
a1129 1
    sed -e 's/RPATH_ENVVAR[ 	]*=.*$/RPATH_ENVVAR = SHLIB_PATH/' \
d1140 1
a1140 1
	sed -e 's/--norecursion//' \
d1143 1
d1155 41
a1195 1
targargs="--host=${target_alias} ${targargs}"
d1199 1
@


1.11
log
@first cut on binutils/gcc support for hppa-*-openbsd*; tested on i386 host
@
text
@a503 1
    noconfigdirs="$noconfigdirs gdb"
@


1.10
log
@don't disable the build of gdb for the alpha - it should work now
@
text
@d425 2
a426 1
  hppa*-*-lites*)
@


1.9
log
@Gdb does not work on powerpc yet, do not configure or build it.
@
text
@a405 1
    noconfigdirs="$noconfigdirs gdb"
@


1.8
log
@Add OpenBSD/arc support to gdb, from pefo
@
text
@d503 3
@


1.7
log
@Do not yet try to configure gdb on mips & alpha
@
text
@a536 1
    noconfigdirs="$noconfigdirs gdb"
d625 1
d637 1
@


1.6
log
@Merge to Cygnus 961112 + add some support (not ready) for shared libs
@
text
@d405 3
d535 3
@


1.5
log
@Merge the Cygnus 960904 sources
@
text
@d52 1
a52 5
host_tools="texinfo byacc flex bison binutils ld gas gcc gdb make patch
	    prms send-pr gprof gdbtest tgas etc expect dejagnu sim bash
            m4 autoconf ispell grep diff rcs cvs fileutils shellutils time
	    textutils wdiff find emacs emacs19 uudecode hello tar gzip indent
	    recode release sed utils guile perl apache inet gawk"
d80 3
a82 4
native_only="autoconf cvs emacs emacs19 fileutils find gawk grep gzip hello
	     indent ispell m4 rcs recode sed shellutils tar textutils gash
	     uudecode wdiff gprof target-groff guile perl apache inet time
	     bash prms"
d125 1
a125 1
  i[3456]86-*-dgux*)	  host_makefile_frag=config/mh-sysv4 ;;
d136 1
a213 6
  powerpc*-*-eabi* | \
  powerpc*-*-elf* | \
  powerpc*-*-linux* | \
  powerpc*-*-rtem* | \
  powerpc*-*-sysv* | \
  powerpc*-*-solaris*)	target_makefile_frag=config/mt-ppc ;;
d378 5
d412 3
d478 6
d728 8
@


1.4
log
@Resolve conflicts with 0609 Cygnus import
@
text
@d53 2
a54 2
	    prms send-pr gprof gdbtest tgas etc expect dejagnu sim
            m4 autoconf ispell grep diff rcs cvs fileutils shellutils
d56 1
a56 1
	    recode release sed utils guile perl apache inet"
d84 1
a84 1
native_only="autoconf cvs emacs emacs19 fileutils find grep gzip hello
d86 2
a87 1
	     uudecode wdiff gprof target-groff guile perl apache inet"
d124 2
a125 1
  mips*-sgi-irix[56]*)    host_makefile_frag=config/mh-irix5 ;;
d130 11
a140 9
  i[345]86-ncr-sysv4.3)   host_makefile_frag=config/mh-ncrsvr43 ;;
  i[345]86-ncr-sysv4*)    host_makefile_frag=config/mh-ncr3000 ;;
  i[345]86-*-sco3.2v5*)   host_makefile_frag=config/mh-sysv ;;
  i[345]86-*-sco*)        host_makefile_frag=config/mh-sco ;;
  i[345]86-*-isc*)	  host_makefile_frag=config/mh-sysv ;;
  i[345]86-*-linux*)      host_makefile_frag=config/mh-linux ;;
  i[345]86-*-solaris2*)   host_makefile_frag=config/mh-sysv4 ;;
  i[345]86-*-aix*)	  host_makefile_frag=config/mh-aix386 ;;
  i[345]86-*-go32*)	  host_makefile_frag=config/mh-go32 ;;
d197 1
a197 1
    i[345]86-*)		waugh=config/mh-x86pic ;;
d216 1
a216 1
  i[345]86-*-netware*)  target_makefile_frag=config/mt-netware ;;
d218 6
d325 1
a325 1
  mips*-*-* | alpha*-*-osf* | i[345]86*-*-sysv4* | i[345]86*-*-unixware*)
d366 3
a368 1
	i[345]86-*-go32*)
d379 1
a379 1
  i[345]86-*-vsta)
d382 1
a382 1
  i[345]86-*-go32)
d386 1
a386 1
     noconfigdirs="patch diff tk tcl expect dejagnu cvs autoconf texinfo bison send-pr gprof rcs guile perl apache inet"
a400 3
  *-*-ose)
    noconfigdirs="$noconfigdirs target-libgloss"
    ;;
d407 3
d438 1
a438 1
  i[345]86-*-go32)
d449 2
a450 2
    case "${host}:${build}" in
      *-*-cygwin32 | *-*-cygwin32:*-*-cygwin32) ;; # keep gdb
d454 1
a454 1
  i[345]86-*-pe)
d457 1
a457 1
  i[345]86-*-sco3.2v5*)
d462 1
a462 1
  i[345]86-*-sco*)
d465 1
a465 1
  i[345]86-*-solaris2*)
d471 1
a471 1
  i[345]86-*-sysv4*)
d517 6
d537 2
a538 2
      i[345]86-*-vsta) ;; # don't add gprof back in
      i[345]86-*-go32) ;; # don't add gprof back in
d587 1
a587 1
  noconfigdirs="$noconfigdirs expect dejagnu make texinfo diff"
d729 1
a729 1
    i[345]86-*)		target_makefile_frag=config/mt-x86pic ;;
@


1.3
log
@Resolved conflicts with latest Cygnus import and our local changes
@
text
@d17 16
@


1.2
log
@Tweaks for OpenBSD:
1)	recognize OpenBSD at various places
2)	m68k-cbm-* is *NOT* ELF always
3)	clean-info must be called before distclean in the GAS
	realclean target
4)	don't install unformatted ma-pages
5)	add a Makefile.bsd-wrapper
6)	just build gas through Makefile.bsd-wrapper yet
There are still other things to do...
@
text
@d1 1
d36 1
a36 1
host_tools="byacc flex bison binutils ld gas gcc gdb make patch
d40 1
a40 1
	    recode release sed utils"
d46 1
a46 1
target_libs="target-libiberty target-libgloss target-newlib target-libio target-librx target-libstdc++ target-libg++ target-winsup"
d70 1
a70 1
	     uudecode wdiff gprof target-groff"
d101 1
d106 1
d114 1
a120 1
  i[345]86-*-win32)	  host_makefile_frag=config/mh-i386win32 ;;
d134 14
a147 3
# See if we can extract a definition of CC from the fragment.
if [ -z "${CC}" ]; then
  if [ -n "${host_makefile_frag}" -a -f "${srcdir}/${host_makefile_frag}" ]; then
a154 27
# The Solaris /usr/ucb/cc compiler does not appear to work.
case "${host}" in
  sparc-sun-solaris2*)
      if [ "`/usr/bin/which ${CC-cc}`" = "/usr/ucb/cc" ] ; then
          could_use=
          [ -d /opt/SUNWspro/bin ] && could_use="/opt/SUNWspro/bin"
          if [ -d /opt/cygnus/bin ] ; then
              if [ "$could_use" = "" ] ; then
                  could_use="/opt/cygnus/bin"
              else
                  could_use="$could_use or /opt/cygnus/bin"
              fi
          fi
        if [ "$could_use" = "" ] ; then
            echo "Warning: compilation may fail because you're using"
            echo "/usr/ucb/cc.  You should change your PATH or CC "
            echo "variable and rerun configure."
        else
            echo "Warning: compilation may fail because you're using"
            echo "/usr/ucb/cc, when you should use the C compiler from"
            echo "$could_use.  You should change your"
            echo "PATH or CC variable and rerun configure."
        fi
      fi
  ;;
esac

d160 1
d166 8
a173 1
if [ x${enable_shared} = xyes ]; then
d178 1
d296 10
d340 1
a340 1
  i[345]86-*-win32* | i[345]86-*-go32*)
d352 1
a352 1
    noconfigdirs="tcl expect dejagnu make texinfo bison patch flex byacc send-pr gprof uudecode dejagnu diff"
d355 1
a355 1
    noconfigdirs="tcl tk expect dejagnu make texinfo bison patch flex byacc send-pr gprof uudecode dejagnu diff"
d357 5
a361 2
  i[345]86-*-win32)
     noconfigdirs="patch diff flex make tk tcl expect dejagnu cvs autoconf texinfo bison send-pr gprof rcs"
d368 4
a371 1
    noconfigdirs="$noconfigdirs target-libg++ target-libstdc++ target-librx target-newlib target-libiberty"
d373 2
a374 2
  *-*-vxworks5.1)
    noconfigdirs="$noconfigdirs target-newlib"
d379 2
a380 1
    noconfigdirs="$noconfigdirs ld emacs fileutils grep target-newlib"
d384 4
a387 1
    noconfigdirs="$noconfigdirs target-newlib"
d390 1
a390 1
    noconfigdirs="$noconfigdirs ld"
d394 1
a394 1
    noconfigdirs="$noconfigdirs target-libg++ target-libstdc++ target-libio target-librx"
d414 3
a416 7

  i[345]86-*-win32)
    # Can't build gdb for win32 if not native.
    # make/glob's configure uses some AC_TRY_RUN type tests
    if [ x${is_cross_compiler} = xyes ]; then
	    noconfigdirs="$noconfigdirs gdb tk make"
    fi
d419 6
d427 6
a432 1
    noconfigdirs="$noconfigdirs target-libg++ target-libstdc++ target-libio target-librx"
d435 1
a435 1
    noconfigdirs="$noconfigdirs gprof"
d441 1
a441 1
    noconfigdirs="$noconfigdirs ld"
d450 1
a450 1
    noconfigdirs="$noconfigdirs emacs emacs19"
d454 9
a462 1
    noconfigdirs="$noconfigdirs gprof cvs"
d464 3
a466 2
  powerpc*-*-winnt* | powerpc*-*-pe*)
    noconfigdirs="$noconfigdirs gdb"
d473 5
a480 6
  m68k-*-netbsd*)
    noconfigdirs="$noconfigdirs gdb"
    ;;
  m68k-*-openbsd*)
    noconfigdirs="$noconfigdirs gdb"
    ;;
d482 1
a482 1
    noconfigdirs="$noconfigdirs ld binutils gprof"
d487 1
a487 1
    noconfigdirs="$noconfigdirs ld gprof emacs"
d490 1
a490 1
    noconfigdirs="$noconfigdirs gprof"
d493 1
a493 1
    noconfigdirs="$noconfigdirs gprof"
d499 1
a499 1
    noconfigdirs="$noconfigdirs bfd binutils ld gas opcodes"
d507 1
d511 1
a511 1
           noconfigdirs="$noconfigdirs gdb gdbtest target-newlib"
d517 1
a517 1
    noconfigdirs="$noconfigdirs bfd binutils gas gcc gdb ld target-libg++ target-libstdc++ opcodes"
d520 1
a520 1
    noconfigdirs="$noconfigdirs bfd binutils gdb ld target-newlib opcodes"
d523 1
a523 1
    noconfigdirs="$noconfigdirs target-newlib"
d527 1
a527 1
    noconfigdirs="$noconfigdirs target-newlib"
d536 14
d556 12
d625 1
a625 1
  for i in `echo ${target_configdirs} | sed -e s/target-//` ; do
d692 1
a692 1
if [ x${enable_shared} = xyes ]; then
d702 62
d767 15
a781 3
	sed -e 's/--*norecursion//' \
	    -e 's/--*cache[a-z-]*=[^ 	]*//' \
	    -e 's/--*cache[a-z-]*[ 	][ 	]*[^ 	]*//'`
@


1.1
log
@Initial revision
@
text
@d447 3
@


1.1.1.1
log
@Initial GNU binutils 2.6 import
@
text
@@


1.1.1.2
log
@(Correct) Import of Cygnus binutils snapshot taken 960607
@
text
@a0 1
#! /bin/bash
d35 1
a35 1
host_tools="texinfo byacc flex bison binutils ld gas gcc gdb make patch
d39 1
a39 1
	    recode release sed utils guile perl apache inet"
d45 1
a45 1
target_libs="target-libiberty target-libgloss target-newlib target-libio target-librx target-libstdc++ target-libg++"
d69 1
a69 1
	     uudecode wdiff gprof target-groff guile perl apache inet"
a99 1
  m68k-*-linux*)	  host_makefile_frag=config/mh-linux ;;
a103 1
  mips*-nec-sysv4*)	  host_makefile_frag=config/mh-necv4 ;;
a110 1
  i[345]86-*-sco3.2v5*)   host_makefile_frag=config/mh-sysv ;;
d117 1
d131 3
a133 14
# If we aren't going to be using gcc, see if we can extract a definition
# of CC from the fragment.
if [ -z "${CC}" -a "${build}" = "${host}" ]; then
  IFS="${IFS= 	}"; save_ifs="$IFS"; IFS="${IFS}:"
  found=
  for dir in $PATH; do
    test -z "$dir" && dir=.
    if test -f $dir/gcc; then
      found=yes
      break
    fi
  done
  IFS="$save_ifs"
  if [ -z "${found}" -a -n "${host_makefile_frag}" -a -f "${srcdir}/${host_makefile_frag}" ]; then
d141 27
a172 1
    alpha-*-linux*)	enable_shared=yes ;;
d178 1
a178 8
case "${enable_shared}" in
  yes) shared=yes ;;
  no) shared=no ;;
  "") shared=no ;;
  *) shared=yes ;;
esac

if [ x${shared} = xyes ]; then
a182 1
    sparc64-*)		waugh=config/mh-sparcpic ;;
a299 10
# Default to using --with-stabs for certain targets.
if [ x${with_stabs} = x ]; then
  case "${target}" in
  mips*-*-* | alpha*-*-osf* | i[345]86*-*-sysv4* | i[345]86*-*-unixware*)
    with_stabs=yes;
    withoptions="${withoptions} --with-stabs"
    ;;
  esac
fi

d334 1
a334 1
	i[345]86-*-go32*)
d346 1
a346 1
    noconfigdirs="tcl expect dejagnu make texinfo bison patch flex byacc send-pr gprof uudecode dejagnu diff guile perl apache inet"
d349 1
a349 1
    noconfigdirs="tcl tk expect dejagnu make texinfo bison patch flex byacc send-pr gprof uudecode dejagnu diff guile perl apache inet"
d351 2
a352 5
  *-*-cygwin32)
     noconfigdirs="patch diff tk tcl expect dejagnu cvs autoconf texinfo bison send-pr gprof rcs guile perl apache inet"
    ;;
  ppc*-*-pe)
     noconfigdirs="patch diff make tk tcl expect dejagnu cvs autoconf texinfo bison send-pr gprof rcs guile perl apache inet"
d359 1
a359 4
    noconfigdirs="$noconfigdirs target-libg++ target-libstdc++ target-librx target-newlib target-libiberty target-libgloss"
    ;;
  *-*-vxworks*)
    noconfigdirs="$noconfigdirs target-newlib target-libgloss"
d361 2
a362 2
  *-*-ose)
    noconfigdirs="$noconfigdirs target-libgloss"
d367 1
a367 2
    # gas doesn't generate exception information.
    noconfigdirs="$noconfigdirs gas ld emacs fileutils grep target-newlib target-libgloss"
d371 1
a371 4
    noconfigdirs="$noconfigdirs target-newlib target-libgloss"
    ;;
  arm-*-pe*)
    noconfigdirs="$noconfigdirs target-libgloss"
d374 1
a374 1
    noconfigdirs="$noconfigdirs ld target-libgloss"
d378 1
a378 1
    noconfigdirs="$noconfigdirs target-libg++ target-libstdc++ target-libio target-librx target-libgloss"
d398 7
a404 3
  *-*-cygwin32)
    target_configdirs="$target_configdirs target-winsup"
    noconfigdirs="$noconfigdirs tcl tk expect target-libgloss"
a406 6

    # Can't build gdb for cygwin32 if not native.
    case "${host}:${build}" in
      *-*-cygwin32 | *-*-cygwin32:*-*-cygwin32) ;; # keep gdb
      *) noconfigdirs="$noconfigdirs gdb"
    esac
d409 1
a409 6
    noconfigdirs="$noconfigdirs target-libg++ target-libstdc++ target-libio target-librx target-libgloss"
    ;;
  i[345]86-*-sco3.2v5*)
    # The linker does not yet know about weak symbols in COFF,
    # and is not configured to handle mixed ELF and COFF.
    noconfigdirs="$noconfigdirs gprof ld target-libgloss"
d412 1
a412 1
    noconfigdirs="$noconfigdirs gprof target-libgloss"
d418 1
a418 1
    noconfigdirs="$noconfigdirs ld target-libgloss"
d427 1
a427 1
    noconfigdirs="$noconfigdirs emacs emacs19 target-libgloss"
d431 1
a431 9
    noconfigdirs="$noconfigdirs gprof cvs target-libgloss"
    # This is needed until gcc and ld are fixed to work together.
    use_gnu_ld=no
    ;;
  powerpc*-*-winnt* | powerpc*-*-pe* | ppc*-*-pe)
    target_configdirs="$target_configdirs target-winsup"
    noconfigdirs="$noconfigdirs gdb tcl tk make expect target-libgloss"
    # always build newlib.
    skipdirs=`echo " ${skipdirs} " | sed -e 's/ target-newlib / /'`
d433 2
a434 3
    # This is temporary until we can link against shared libraries
  powerpcle-*-solaris*)
    noconfigdirs="$noconfigdirs gdb sim make tcl tk expect"
d441 1
a441 1
  rs6000-*-aix*)
a442 2
    # This is needed until gcc and ld are fixed to work together.
    use_gnu_ld=no
d444 2
a445 2
  rs6000-*-*)
    noconfigdirs="$noconfigdirs gprof"
d448 1
a448 1
    noconfigdirs="$noconfigdirs ld binutils gprof target-libgloss"
d453 1
a453 1
    noconfigdirs="$noconfigdirs ld gprof emacs target-libgloss"
d456 1
a456 1
    noconfigdirs="$noconfigdirs gprof target-libgloss"
d459 1
a459 1
    noconfigdirs="$noconfigdirs gprof target-libgloss"
d465 1
a465 1
    noconfigdirs="$noconfigdirs bfd binutils ld gas opcodes target-libgloss"
a472 1
    noconfigdirs="$noconfigdirs target-libgloss"
d476 1
a476 1
           noconfigdirs="$noconfigdirs gdb gdbtest target-newlib target-libgloss"
d482 1
a482 1
    noconfigdirs="$noconfigdirs bfd binutils gas gcc gdb ld target-libio target-libg++ target-libstdc++ opcodes target-libgloss"
d485 1
a485 1
    noconfigdirs="$noconfigdirs bfd binutils gdb ld target-newlib opcodes target-libgloss"
d488 1
a488 1
    noconfigdirs="$noconfigdirs target-newlib target-libgloss"
d492 1
a492 1
    noconfigdirs="$noconfigdirs target-newlib target-libgloss"
a500 14
# targets that need a second pass
case "${target}" in
  *-gm-magic*)
    noconfigdirs="$noconfigdirs target-libgloss"
    ;;
esac

# If we aren't building newlib, then don't build libgloss, since libgloss
# depends upon some newlib header files.
case "${noconfigdirs}" in
  *target-libgloss*) ;;
  *target-newlib*) noconfigdirs="$noconfigdirs target-libgloss" ;;
esac

a506 12
# Make sure we don't let GNU ld be added if we didn't want it.
if [ x$with_gnu_ld = xno ]; then
  use_gnu_ld=no
  noconfigdirs="$noconfigdirs ld"
fi

# Make sure we don't let GNU as be added if we didn't want it.
if [ x$with_gnu_as = xno ]; then
  use_gnu_as=no
  noconfigdirs="$noconfigdirs gas"
fi

d564 1
a564 1
  for i in `echo ${target_configdirs} | sed -e s/target-//g` ; do
d631 1
a631 1
if [ x${shared} = xyes ]; then
a640 62
# Make sure that the compiler is able to generate an executable.  If it
# can't, we are probably in trouble.  We don't care whether we can run the
# executable--we might be using a cross compiler--we only care whether it
# can be created.  At this point the main configure script has set CC.
echo "int main () { return 0; }" > conftest.c
${CC} -o conftest ${CFLAGS} ${CPPFLAGS} ${LDFLAGS} conftest.c
if [ $? = 0 ] && [ -s conftest ]; then
  :
else
  echo 1>&2 "*** The command '${CC} -o conftest ${CFLAGS} ${CPPFLAGS} ${LDFLAGS} conftest.c' failed."
  echo 1>&2 "*** You must set the environment variable CC to a working compiler."
  rm -f conftest*
  exit 1
fi
rm -f conftest*

# The Solaris /usr/ucb/cc compiler does not appear to work.
case "${host}" in
  sparc-sun-solaris2*)
      CCBASE="`echo ${CC-cc} | sed 's/ .*$//'`"
      if [ "`/usr/bin/which $CCBASE`" = "/usr/ucb/cc" ] ; then
          could_use=
          [ -d /opt/SUNWspro/bin ] && could_use="/opt/SUNWspro/bin"
          if [ -d /opt/cygnus/bin ] ; then
              if [ "$could_use" = "" ] ; then
                  could_use="/opt/cygnus/bin"
              else
                  could_use="$could_use or /opt/cygnus/bin"
              fi
          fi
        if [ "$could_use" = "" ] ; then
            echo "Warning: compilation may fail because you're using"
            echo "/usr/ucb/cc.  You should change your PATH or CC "
            echo "variable and rerun configure."
        else
            echo "Warning: compilation may fail because you're using"
            echo "/usr/ucb/cc, when you should use the C compiler from"
            echo "$could_use.  You should change your"
            echo "PATH or CC variable and rerun configure."
        fi
      fi
  ;;
esac

# If --enable-shared was set, we must set LD_LIBRARY_PATH so that the
# binutils tools will find libbfd.so.
if [ "${shared}" = "yes" ]; then
  sed -e 's/^SET_LIB_PATH[ 	]*=.*$/SET_LIB_PATH = $(REALLY_SET_LIB_PATH)/' \
      Makefile > Makefile.tem
  rm -f Makefile
  mv -f Makefile.tem Makefile

  case "${host}" in
  *-*-hpux*)
    sed -e 's/RPATH_ENVVAR[ 	]*=.*$/RPATH_ENVVAR = SHLIB_PATH/' \
	Makefile > Makefile.tem
    rm -f Makefile
    mv -f Makefile.tem Makefile
    ;;
  esac
fi

d644 3
a646 15
	sed -e 's/--norecursion//' \
	    -e 's/--cache[a-z-]*=[^ 	]*//' \
	    -e 's/--ho[a-z-]*=[^ 	]*//' \
	    -e 's/--ta[a-z-]*=[^ 	]*//'`

# Passing a --with-cross-host argument lets the target libraries know
# whether they are being built with a cross-compiler or being built
# native.  However, it would be better to use other mechanisms to make the
# sorts of decisions they want to make on this basis.  Please consider
# this option to be deprecated.  FIXME.
if [ x${is_cross_compiler} = xyes ]; then
  targargs="--with-cross-host=${host_alias} ${targargs}"
fi

targargs="--host=${target_alias} ${targargs}"
@


1.1.1.3
log
@Import of binutils, gas, ld & gprof from Cygnus 960609 tree
@
text
@a16 16
#   Copyright (C) 1992, 93, 94, 95, 1996 Free Software Foundation, Inc.
#
# This file is free software; you can redistribute it and/or modify it
# under the terms of the GNU General Public License as published by
# the Free Software Foundation; either version 2 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful, but
# WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
# General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program; if not, write to the Free Software
# Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA 02111-1307, USA.

@


1.1.1.4
log
@Import of binutils, gas, ld & gprof from Cygnus 960904 tree
@
text
@d53 2
a54 2
	    prms send-pr gprof gdbtest tgas etc expect dejagnu sim bash
            m4 autoconf ispell grep diff rcs cvs fileutils shellutils time
d56 1
a56 1
	    recode release sed utils guile perl apache inet gawk"
d84 1
a84 1
native_only="autoconf cvs emacs emacs19 fileutils find gawk grep gzip hello
d86 1
a86 2
	     uudecode wdiff gprof target-groff guile perl apache inet time
	     bash prms"
d123 1
a123 2
  mips*-sgi-irix6*)	  host_makefile_frag=config/mh-irix6 ;;
  mips*-sgi-irix5*)	  host_makefile_frag=config/mh-irix5 ;;
d128 9
a136 11
  i[3456]86-*-dgux*)	  host_makefile_frag=config/mh-sysv4 ;;
  i[3456]86-ncr-sysv4.3)  host_makefile_frag=config/mh-ncrsvr43 ;;
  i[3456]86-ncr-sysv4*)   host_makefile_frag=config/mh-ncr3000 ;;
  i[3456]86-*-sco3.2v5*)  host_makefile_frag=config/mh-sysv ;;
  i[3456]86-*-sco*)       host_makefile_frag=config/mh-sco ;;
  i[3456]86-*-isc*)	  host_makefile_frag=config/mh-sysv ;;
  i[3456]86-*-linux*)     host_makefile_frag=config/mh-linux ;;
  i[3456]86-*-solaris2*)  host_makefile_frag=config/mh-sysv4 ;;
  i[3456]86-*-aix*)	  host_makefile_frag=config/mh-aix386 ;;
  i[3456]86-*-go32*)	  host_makefile_frag=config/mh-go32 ;;
  *-cygwin32*)	  	  host_makefile_frag=config/mh-cygwin32 ;;
d193 1
a193 1
    i[3456]86-*)	waugh=config/mh-x86pic ;;
d212 1
a212 1
  i[3456]86-*-netware*) target_makefile_frag=config/mt-netware ;;
a213 6
  powerpc*-*-eabi* | \
  powerpc*-*-elf* | \
  powerpc*-*-linux* | \
  powerpc*-*-rtem* | \
  powerpc*-*-sysv* | \
  powerpc*-*-solaris*)	target_makefile_frag=config/mt-ppc ;;
d315 1
a315 1
  mips*-*-* | alpha*-*-osf* | i[3456]86*-*-sysv4* | i[3456]86*-*-unixware*)
d356 1
a356 3
	i[3456]86-*-go32*)
	  configdirs="$configdirs dosrel" ;;
	*-cygwin32*)
d367 1
a367 1
  i[3456]86-*-vsta)
d370 1
a370 1
  i[3456]86-*-go32)
d374 1
a374 1
     noconfigdirs="tk tcl expect dejagnu cvs autoconf bison send-pr gprof rcs guile perl texinfo apache inet"
d389 3
a397 3
  alpha*-*-*vms*)
    noconfigdirs="$noconfigdirs gdb ld target-newlib target-libgloss"
    ;;
d426 1
a426 1
  i[3456]86-*-go32)
d437 2
a438 2
    case "${host}" in
      *-*-cygwin32) ;; # keep gdb
d442 1
a442 1
  i[3456]86-*-pe)
d445 1
a445 1
  i[3456]86-*-sco3.2v5*)
d450 1
a450 1
  i[3456]86-*-sco*)
d453 1
a453 1
  i[3456]86-*-solaris2*)
d459 1
a459 1
  i[3456]86-*-sysv4*)
a504 6
  mips*-*-irix6*)
    # The GNU linker does not support shared libraries.
    # emacs is emacs 18, which does not work on Irix 5 (emacs19 does work)
    # BFD does not have Irix 6 support yet.
    noconfigdirs="$noconfigdirs bfd binutils ld gas opcodes gdb readline mmalloc sim gprof emacs target-libgloss"
    ;;
d519 2
a520 2
      i[3456]86-*-vsta) ;; # don't add gprof back in
      i[3456]86-*-go32) ;; # don't add gprof back in
d569 1
a569 1
  noconfigdirs="$noconfigdirs tcl tk expect dejagnu"
d711 1
a711 1
    i[3456]86-*)		target_makefile_frag=config/mt-x86pic ;;
@


1.1.1.5
log
@Import of 961112 Cygnus binutils+gas+ld+gdb+gprof
@
text
@d52 5
a56 1
host_tools="texinfo byacc flex bison binutils ld gas gcc gdb make patch prms send-pr gprof gdbtest tgas etc expect dejagnu sim bash m4 autoconf ispell grep diff rcs cvs fileutils shellutils time textutils wdiff find emacs emacs19 uudecode hello tar gzip indent recode release sed utils guile perl apache inet gawk"
d84 4
a87 3
# This must be a single line because of the way it is searched by grep in
# the code below.
native_only="autoconf cvs emacs emacs19 fileutils find gawk grep gzip hello indent ispell m4 rcs recode sed shellutils tar textutils gash uudecode wdiff gprof target-groff guile perl apache inet time bash prms"
d130 1
a130 1
  i[3456]86-*-dgux*)	  host_makefile_frag=config/mh-dgux386 ;;
a140 1
  *-windows*)	  	  host_makefile_frag=config/mh-windows ;;
d218 6
a387 5
  *-*-windows*)
# This is only used to build WinGDB...
     configdirs="bfd gdb libiberty opcodes readline sim"
     target_configdirs=
    ;;
a416 3
  arm-*-coff*)
    noconfigdirs="$noconfigdirs target-libgloss"
    ;;
a479 6
  mn10200-*-*)
    noconfigdirs="$noconfigdirs ld gcc gdb target-libiberty target-libgloss target-newlib target-libio target-librx target-libstdc++ target-libg++"
    ;;
  mn10300-*-*)
    noconfigdirs="$noconfigdirs ld gcc gdb target-libiberty target-libgloss target-newlib target-libio target-librx target-libstdc++ target-libg++"
    ;;
a723 8
fi

# If using newlib, add --with-newlib to the withoptions so that gcc/configure
# can detect this case.

if [ x${with_newlib} != xno ] && echo " ${target_configdirs} " | grep " target-newlib " > /dev/null 2>&1 && [ -d ${srcdir}/newlib ] ; then
  with_newlib=yes
  withoptions="$withoptions --with-newlib"
@


1.1.1.6
log
@Import of binutils-2.8.1 from Cygnus/FSF
@
text
@d17 1
a17 1
#   Copyright (C) 1992, 93, 94, 95, 96, 1997 Free Software Foundation, Inc.
d44 1
a44 1
host_libs="mmalloc libiberty opcodes bfd readline gash db tcl tk tclX itcl"
d51 2
a52 3
# Note, the powerpc-eabi build depends on sim occurring before gdb in order to
# know that we are building the simulator.
host_tools="byacc flex bison binutils ld gas gcc sim gdb make patch prms send-pr gprof gdbtest tgas etc expect dejagnu bash m4 autoconf ispell grep diff rcs cvs fileutils shellutils time textutils wdiff find emacs emacs19 uudecode hello tar gzip indent recode release sed utils guile perl apache inet gawk findutils sn"
d82 1
a82 1
native_only="autoconf cvs emacs emacs19 fileutils find gawk grep gzip hello indent ispell m4 rcs recode sed shellutils tar textutils gash uudecode wdiff gprof target-groff guile perl apache inet time bash prms sn"
d113 1
d131 1
a314 2
  mips*-*-irix6*)
    ;;
d370 1
a370 1
    noconfigdirs="tcl expect dejagnu make texinfo bison patch flex byacc send-pr gprof uudecode dejagnu diff guile perl apache inet itcl db sn"
d373 1
a373 1
    noconfigdirs="tcl tk expect dejagnu make texinfo bison patch flex byacc send-pr gprof uudecode dejagnu diff guile perl apache inet itcl db sn"
d376 1
a376 1
     noconfigdirs="expect dejagnu cvs autoconf bison send-pr gprof rcs guile perl texinfo apache inet itcl db sn"
d384 1
a384 1
     noconfigdirs="patch diff make tk tcl expect dejagnu cvs autoconf texinfo bison send-pr gprof rcs guile perl apache inet itcl db sn"
a417 3
  d10v-*-*)
    noconfigdirs="$noconfigdirs target-librx target-libg++ target-libstdc++ target-libio target-libgloss"
    ;;
d423 1
a423 2
  hppa*-*-lites* | \
  hppa*-*-rtems* )
d442 1
a442 1
    noconfigdirs="$noconfigdirs expect target-libgloss itcl db sn"
d479 1
a479 1
    noconfigdirs="$noconfigdirs target-libgloss"
d482 1
a482 1
    noconfigdirs="$noconfigdirs target-libgloss"
d492 1
a492 1
    noconfigdirs="$noconfigdirs gdb tcl tk make expect target-libgloss itcl db sn"
d498 1
a498 1
    noconfigdirs="$noconfigdirs gdb sim make tcl tk expect itcl db sn"
d524 2
a525 1
    noconfigdirs="$noconfigdirs ld gas gprof emacs target-libgloss"
d591 1
a591 1
  noconfigdirs="$noconfigdirs expect dejagnu itcl db sn"
@


1.1.1.7
log
@Import binutils-2.10
- only the binutils package (no gdb here)
- don't import libiberty and texinfo, they are elsewhere
- remove all .info* generated files
@
text
@d17 1
a17 1
#   Copyright (C) 1992-99, 2000 Free Software Foundation, Inc.
d44 1
a44 1
host_libs="intl mmalloc libiberty opcodes bfd readline gash db tcl tk tcl8.1 tk8.1 tclX itcl tix libgui"
d53 2
a54 1
host_tools="byacc flex bison binutils ld gas gcc sim gdb make patch prms send-pr gprof gdbtest tgas etc expect dejagnu ash bash bzip2 m4 autoconf automake libtool ispell grep diff rcs cvssrc fileutils shellutils time textutils wdiff find emacs emacs19 uudecode hello tar gzip indent recode release sed utils guile perl apache inet gawk findutils snavigator libtool gettext zip"
d59 2
a60 7
target_libs="target-libiberty \
		target-libgloss \
		target-newlib \
		target-libio \
		target-librx \
		target-libstdc++ \
		target-libg++"
d69 1
a69 1
target_tools="target-examples target-groff target-gperf"
d83 1
a83 1
native_only="autoconf automake libtool cvssrc emacs emacs19 fileutils find gawk gettext grep gzip hello indent ispell m4 rcs recode sed shellutils tar textutils gash uudecode wdiff gprof target-groff guile perl apache inet time ash bash bzip2 prms snavigator gnuserv target-gperf"
d87 1
a87 1
cross_only="target-libgloss target-newlib target-cygmon target-opcodes target-libstub"
d111 35
a145 117
  m68k-hp-hpux*)
    host_makefile_frag="${host_makefile_frag} config/mh-hp300"
    ;;
  m68k-apollo-sysv*)
    host_makefile_frag="${host_makefile_frag} config/mh-apollo68"
    ;;
  m68k-apollo-bsd*)
    host_makefile_frag="${host_makefile_frag} config/mh-a68bsd"
    ;;
  m88k-dg-dgux*)
    host_makefile_frag="${host_makefile_frag} config/mh-dgux"
    ;;
  m88k-harris-cxux*)
    host_makefile_frag="${host_makefile_frag} config/mh-cxux"
    ;;
  m88k-motorola-sysv*)
    host_makefile_frag="${host_makefile_frag} config/mh-delta88"
    ;;
  mips*-dec-ultrix*)
    host_makefile_frag="${host_makefile_frag} config/mh-decstation"
    ;;
  mips*-nec-sysv4*)
    host_makefile_frag="${host_makefile_frag} config/mh-necv4"
    ;;
  mips*-sgi-irix6*)
    host_makefile_frag="${host_makefile_frag} config/mh-irix6"
    ;;
  mips*-sgi-irix5*)
    host_makefile_frag="${host_makefile_frag} config/mh-irix5"
    ;;
  mips*-sgi-irix4*)
    host_makefile_frag="${host_makefile_frag} config/mh-irix4"
    ;;
  mips*-sgi-irix3*)
    host_makefile_frag="${host_makefile_frag} config/mh-sysv"
    ;;
  mips*-*-sysv4*)
    host_makefile_frag="${host_makefile_frag} config/mh-sysv4"
    ;;
  mips*-*-sysv*)
    host_makefile_frag="${host_makefile_frag} config/mh-riscos"
    ;;
  i[3456]86-*-sysv5*)
    host_makefile_frag="${host_makefile_frag} config/mh-sysv5"
    ;;
  i[3456]86-*-dgux*)
    host_makefile_frag="${host_makefile_frag} config/mh-dgux386"
    ;;
  i[3456]86-ncr-sysv4.3*)
    host_makefile_frag="${host_makefile_frag} config/mh-ncrsvr43"
    ;;
  i[3456]86-ncr-sysv4*)
    host_makefile_frag="${host_makefile_frag} config/mh-ncr3000"
    ;;
  i[3456]86-*-sco3.2v5*)
    host_makefile_frag="${host_makefile_frag} config/mh-sysv"
    ;;
  i[3456]86-*-sco*)
    host_makefile_frag="${host_makefile_frag} config/mh-sco"
    ;;
  i[3456]86-*-udk*)
    host_makefile_frag="${host_makefile_frag} config/mh-sysv5"
    ;;
  i[3456]86-*-isc*)
    host_makefile_frag="${host_makefile_frag} config/mh-sysv"
    ;;
  i[3456]86-*-solaris2*)
    host_makefile_frag="${host_makefile_frag} config/mh-sysv4"
    ;;
  i[3456]86-*-aix*)
    host_makefile_frag="${host_makefile_frag} config/mh-aix386"
    ;;
  i[3456]86-*-msdosdjgpp*)
    host_makefile_frag="${host_makefile_frag} config/mh-djgpp"
    ;;
  *-cygwin*)
    host_makefile_frag="${host_makefile_frag} config/mh-cygwin"
    ;;
  *-mingw32*)
    host_makefile_frag="${host_makefile_frag} config/mh-mingw32"
    ;;
  *-interix*)
    host_makefile_frag="${host_makefile_frag} config/mh-interix"
    ;;
  *-windows*)
    host_makefile_frag="${host_makefile_frag} config/mh-windows"
    ;;
  vax-*-ultrix2*)
    host_makefile_frag="${host_makefile_frag} config/mh-vaxult2"
    ;;
  *-*-solaris2*)
    host_makefile_frag="${host_makefile_frag} config/mh-solaris"
    ;;
  m68k-sun-sunos*)
    host_makefile_frag="${host_makefile_frag} config/mh-sun3"
    ;;
  *-hp-hpux[78]*)
    host_makefile_frag="${host_makefile_frag} config/mh-hpux8"
    ;;
  *-hp-hpux*)
    host_makefile_frag="${host_makefile_frag} config/mh-hpux"
    ;;
  *-*-hiux*)
    host_makefile_frag="${host_makefile_frag} config/mh-hpux"
    ;;
  rs6000-*-lynxos*)
    host_makefile_frag="${host_makefile_frag} config/mh-lynxrs6k"
    ;;
  *-*-lynxos*)
    host_makefile_frag="${host_makefile_frag} config/mh-lynxos"
    ;;
  *-*-sysv4*)
    host_makefile_frag="${host_makefile_frag} config/mh-sysv4"
    ;;
  *-*-sysv*)
    host_makefile_frag="${host_makefile_frag} config/mh-sysv"
    ;;
d151 1
a151 1
if [ -z "${CC}" ] && [ "${build}" = "${host}" ]; then
d162 1
a162 1
  if [ -z "${found}" ] && [ -n "${host_makefile_frag}" ] && [ -f "${srcdir}/${host_makefile_frag}" ]; then
d174 2
a175 2
    alpha*-dec-osf*)	enable_shared=yes ;;
    alpha*-*-linux*)	enable_shared=yes ;;
d189 1
d191 4
a194 32
    alpha*-*-linux*)
      host_makefile_frag="${host_makefile_frag} config/mh-elfalphapic"
      ;;
    arm*-*-*)
      host_makefile_frag="${host_makefile_frag} config/mh-armpic"
      ;;
    hppa*-*-*)
      host_makefile_frag="${host_makefile_frag} config/mh-papic"
      ;;
    i[3456]86-*-cygwin*)
      # We don't want -fPIC on Cygwin.
      ;;
    i[3456]86-*-*)
      host_makefile_frag="${host_makefile_frag} config/mh-x86pic"
      ;;
    i370-*-*)
      host_makefile_frag="${host_makefile_frag} config/mh-i370pic"
      ;;
    sparc64-*-*)
      host_makefile_frag="${host_makefile_frag} config/mh-sparcpic"
      ;;
    powerpc*-*-aix*)
      # We don't want -fPIC on AIX.
      ;;
    powerpc*-*-*)
      host_makefile_frag="${host_makefile_frag} config/mh-ppcpic"
      ;;
    *-*-*)
      if test -f ${srcdir}/config/mh-${host_cpu}pic; then
        host_makefile_frag="${host_makefile_frag} config/mh-${host_cpu}pic"
      fi
      ;;
d196 9
a204 9
fi

rm -f mh-frag
if [ -n "${host_makefile_frag}" ] ; then
  for f in ${host_makefile_frag}
  do
    cat ${srcdir}/$f >> mh-frag
  done
  host_makefile_frag=mh-frag
d210 3
a212 38
  v810*)
    target_makefile_frag="${target_makefile_frag} config/mt-v810"
    ;;
  i[3456]86-*-netware*)
    target_makefile_frag="${target_makefile_frag} config/mt-netware"
    ;;
  powerpc-*-netware*)
    target_makefile_frag="${target_makefile_frag} config/mt-netware"
    ;;
  *-*-linux-gnu*)
    target_makefile_frag="${target_makefile_frag} config/mt-linux"
    ;;
  *-*-aix4.[3456789]* | *-*-aix[56789].*)
    target_makefile_frag="${target_makefile_frag} config/mt-aix43"
    ;;
  mips*-*-pe | sh*-*-pe | *arm-wince-pe)
    target_makefile_frag="${target_makefile_frag} config/mt-wince"
    ;;
esac

# If --enable-target-optspace always use -Os instead of -O2 to build
# the target libraries, similarly if it is not specified, use -Os
# on selected platforms.
case "${enable_target_optspace}:${target}" in
  yes:*)
    target_makefile_frag="${target_makefile_frag} config/mt-ospace"
    ;;
  :d30v-*)
    target_makefile_frag="${target_makefile_frag} config/mt-d30v"
    ;;
  :m32r-* | :d10v-* | :fr30-*)
    target_makefile_frag="${target_makefile_frag} config/mt-ospace"
    ;;
  no:* | :*)
    ;;
  *)
    echo "*** bad value \"${enable_target_optspace}\" for --enable-target-optspace flag; ignored" 1>&2
    ;;
d227 1
a227 1
	skipdirs="${skipdirs} tk libgui gash"
d246 1
d252 8
a261 12
# We always want to use the same name for this directory, so that dejagnu
# can reliably find it.
target_subdir=${target_alias}

if [ ! -d ${target_subdir} ] ; then
  if mkdir ${target_subdir} ; then true
  else
    echo "'*** could not make ${PWD=`pwd`}/${target_subdir}" 1>&2
    exit 1
  fi
fi

d316 1
a316 1
  mips*-*-* | alpha*-*-osf*)
d338 1
a338 1
      ${srcdir}/install-sh -c -m 644 config.temp $2/COPIED
d359 1
a359 1
	i[3456]86-*-mingw32*)
a360 2
	*-cygwin*)
	  configdirs="$configdirs libtermcap dosrel" ;;
d371 1
a371 1
    noconfigdirs="tcl expect dejagnu make texinfo bison patch flex byacc send-pr gprof uudecode dejagnu diff guile perl apache inet itcl tix db snavigator gnuserv gettext"
d373 2
a374 6
  i[3456]86-*-go32* | i[3456]86-*-msdosdjgpp*)
    noconfigdirs="tcl tk expect dejagnu make texinfo bison patch flex byacc send-pr uudecode dejagnu diff guile perl apache inet itcl tix db snavigator gnuserv gettext"
	;;
  i[3456]86-*-mingw32*)
    # noconfigdirs="tcl tk expect dejagnu make texinfo bison patch flex byacc send-pr uudecode dejagnu diff guile perl apache inet itcl tix db snavigator gnuserv"
     noconfigdirs="expect dejagnu cvs autoconf automake send-pr rcs guile perl texinfo apache inet libtool"
d376 2
a377 5
  i[3456]86-*-beos*)
     noconfigdirs="$noconfigdirs tk itcl tix libgui gdb"
     ;;
  *-*-cygwin*)
     noconfigdirs="autoconf automake send-pr rcs guile perl texinfo apache inet"
d379 4
a382 2
  *-*-netbsd*)
    noconfigdirs="rcs"
d385 1
a385 1
     noconfigdirs="patch diff make tk tcl expect dejagnu cvssrc autoconf automake texinfo bison send-pr gprof rcs guile perl apache inet itcl tix db snavigator gnuserv"
a393 3
  *-*-rtems*)
    noconfigdirs="$noconfigdirs target-libgloss"
    ;;
d397 1
a397 1
  alpha*-dec-osf*)
d399 1
a399 1
    # work.  newlib is not 64 bit ready.  I'm not sure about fileutils.
d401 1
a401 1
    noconfigdirs="$noconfigdirs gas ld emacs fileutils target-newlib target-libgloss"
a405 6
  alpha*-*-linux*)
    # newlib is not 64 bit ready
    noconfigdirs="$noconfigdirs target-newlib target-libgloss"
    # linux has rx in libc
    skipdirs="$skipdirs target-librx"
    ;;
a409 18
  sh*-*-pe|mips*-*-pe|*arm-wince-pe)
    noconfigdirs="$noconfigdirs target-libjava target-libffi target-zlib"
    noconfigdirs="$noconfigdirs target-boehm-gc target-qthreads target-examples"
    noconfigdirs="$noconfigdirs target-librx target-libiberty texinfo send-pr"
    noconfigdirs="$noconfigdirs tcl tix tk itcl libgui sim"
    noconfigdirs="$noconfigdirs expect dejagnu"
    # the C++ libraries don't build on top of CE's C libraries
    noconfigdirs="$noconfigdirs target-libg++ target-libstdc++ target-libio"
    skipdirs="$skipdirs target-newlib"
    case "${host}" in
      *-*-cygwin*) ;; # keep gdb and readline
      *) noconfigdirs="$noconfigdirs gdb readline target-libio target-libstdc++ target-libg++"
	 ;;
    esac
    ;;
  arc-*-*)
    noconfigdirs="$noconfigdirs target-libgloss"
    ;;
a414 39
    if [ x${is_cross_compiler} != xno ] ; then
	   target_configdirs="${target_configdirs} target-bsp target-cygmon"
    fi
    ;;
  arm-*-elf*)
    noconfigdirs="$noconfigdirs target-libgloss"
    if [ x${is_cross_compiler} != xno ] ; then
	   target_configdirs="${target_configdirs} target-bsp target-cygmon"
    fi
    ;;
  arm-*-oabi*)
    noconfigdirs="$noconfigdirs target-libgloss"
    ;;
  c4x-*-*)
    noconfigdirs="$noconfigdirs target-libg++ target-libstdc++ target-libio target-librx target-libgloss"
    ;;
  thumb-*-coff)
    noconfigdirs="$noconfigdirs target-libgloss"
    ;;
  thumb-*-elf)
    noconfigdirs="$noconfigdirs target-libgloss"
    ;;
  thumb-*-oabi)
    noconfigdirs="$noconfigdirs target-libgloss"
    ;;
  strongarm-*-elf)
    noconfigdirs="$noconfigdirs target-libgloss"
    if [ x${is_cross_compiler} != xno ] ; then
	   target_configdirs="${target_configdirs} target-bsp target-cygmon"
    fi
    ;;
  strongarm-*-coff)
    noconfigdirs="$noconfigdirs target-libgloss"
    if [ x${is_cross_compiler} != xno ] ; then
	   target_configdirs="${target_configdirs} target-bsp target-cygmon"
    fi
    ;;
  thumb-*-pe)
    noconfigdirs="$noconfigdirs target-libgloss"
d420 1
a420 8
    noconfigdirs="$noconfigdirs target-librx target-libg++ target-libstdc++ target-libio"
    ;;
  d30v-*-*)
    ;;
  fr30-*-elf*)
    if [ x${is_cross_compiler} != xno ] ; then
	   target_configdirs="${target_configdirs} target-bsp target-libstub target-cygmon"
    fi
d427 3
a429 3
  hppa*-*-linux-gnu* | \
  hppa*-*-lites*)
    # Do configure ld/binutils/gas for the above cases.
d441 1
a441 6
  i[3456]86-*-coff | i[3456]86-*-elf)
    if [ x${is_cross_compiler} != xno ] ; then
         target_configdirs="${target_configdirs} target-libstub target-cygmon"
    fi
    ;;
  i[3456]86-*-go32* | i[3456]-*-msdosdjgpp*)
d445 3
a447 14
  i[3456]86-*-mingw32*)
    target_configdirs="$target_configdirs target-mingw"
    noconfigdirs="$noconfigdirs expect target-libgloss"

    # Can't build gdb for mingw32 if not native.
    case "${host}" in
      i[3456]86-*-mingw32) ;; # keep gdb tcl tk expect etc.
      *) noconfigdirs="$noconfigdirs gdb tcl tk expect itcl tix db snavigator gnuserv"
         ;;
    esac
    ;;    
  *-*-cygwin*)
    target_configdirs="$target_configdirs target-libtermcap target-winsup"
    noconfigdirs="$noconfigdirs target-libgloss"
d451 1
a451 1
    # Can't build gdb for Cygwin if not native.
d453 2
a454 3
      *-*-cygwin*) ;; # keep gdb tcl tk expect etc.
      *) noconfigdirs="$noconfigdirs gdb tcl tk expect itcl tix libgui db snavigator gnuserv"
         ;;
d463 1
a463 1
    noconfigdirs="$noconfigdirs ld target-libgloss"
d469 4
a472 1
    noconfigdirs="$noconfigdirs target-libgloss"
a482 13
  i[3456]86-*-beos*)
     noconfigdirs="$noconfigdirs gdb target-newlib target-libgloss"
     ;;
  m68k-*-elf*)
    if [ x${is_cross_compiler} != xno ] ; then
	   target_configdirs="${target_configdirs} target-bsp target-cygmon"
    fi
    ;;
  m68k-*-coff*)
    if [ x${is_cross_compiler} != xno ] ; then
	   target_configdirs="${target_configdirs} target-bsp target-cygmon"
    fi
    ;;
d484 1
a484 4
    noconfigdirs="$noconfigdirs"
    if [ x${is_cross_compiler} != xno ] ; then
	   target_configdirs="${target_configdirs} target-libstub target-cygmon"
    fi
d487 1
a487 4
    noconfigdirs="$noconfigdirs"
    if [ x${is_cross_compiler} != xno ] ; then
	   target_configdirs="${target_configdirs} target-bsp target-libstub target-cygmon"
    fi
d491 2
a492 5
    # The configure and build of ld are currently disabled because
    # GNU ld is known to be broken for AIX 4.2 and 4.3 (at least)
    # The symptom is that GDBtk 4.18 fails at startup with a segfault
    # if linked by GNU ld, but not if linked by the native ld.
    noconfigdirs="$noconfigdirs gprof cvssrc target-libgloss ld"
d497 1
a497 1
    noconfigdirs="$noconfigdirs gdb tcl tk make expect target-libgloss itcl tix db snavigator gnuserv"
d503 1
a503 6
    noconfigdirs="$noconfigdirs gdb sim make tcl tk expect itcl tix db snavigator gnuserv"
    ;;
  powerpc-*-eabi)
    if [ x${is_cross_compiler} != xno ] ; then
	   target_configdirs="${target_configdirs} target-bsp target-libstub target-cygmon"
    fi
d508 1
a508 1
    noconfigdirs="$noconfigdirs target-newlib gprof cvssrc"
d511 2
a512 5
    # The configure and build of ld are currently disabled because
    # GNU ld is known to be broken for AIX 4.2 and 4.3 (at least)
    # The symptom is that GDBtk 4.18 fails at startup with a segfault
    # if linked by GNU ld, but not if linked by the native ld.
    noconfigdirs="$noconfigdirs gprof ld"
d527 1
a527 1
    # The GNU assembler does not support IRIX 6.
d529 1
a529 6
    noconfigdirs="$noconfigdirs gas gprof emacs target-libgloss"
    ;;
  mips*-*-linux*)
    noconfigdirs="$noconfigdirs gprof"
    # linux has rx in libc
    skipdirs="$skipdirs target-librx"
a536 4
  mipstx39-*-*)
    noconfigdirs="$noconfigdirs gprof"   # same as generic mips
    target_configdirs="${target_configdirs} target-bsp target-libstub target-cygmon"
   ;;
d546 1
a546 2
      i[3456]86-*-go32*) ;; # don't add gprof back in
      i[3456]86-*-msdosdjgpp*) ;; # don't add gprof back in
a550 15
  sparc-*-elf*)
    if [ x${is_cross_compiler} != xno ] ; then
	   target_configdirs="${target_configdirs} target-libstub target-cygmon"
    fi
    ;;
  sparc64-*-elf*)
    if [ x${is_cross_compiler} != xno ] ; then
	   target_configdirs="${target_configdirs} target-libstub target-cygmon"
    fi
    ;;
  sparclite-*-*)
    if [ x${is_cross_compiler} != xno ] ; then
	   target_configdirs="${target_configdirs} target-bsp target-libstub target-cygmon"
    fi
    ;;
a560 9
  v850-*-*)
    noconfigdirs="$noconfigdirs target-libgloss"
    ;;
  v850e-*-*)
    noconfigdirs="$noconfigdirs target-libgloss"
    ;;
  v850ea-*-*)
    noconfigdirs="$noconfigdirs target-libgloss"
    ;;
a566 4
  *-*-linux*)
    # linux has rx in libc
    skipdirs="$skipdirs target-librx"
    ;;
d578 7
d592 6
d661 1
a661 1
if [ -z "${norecursion}" ] && [ -n "${configdirs}" ]; then
d666 1
a666 1
if [ -z "${norecursion}" ] && [ -n "${target_configdirs}" ]; then
d744 3
a746 17
    hppa*)
      target_makefile_frag="${target_makefile_frag} config/mt-papic"
      ;;
    i[3456]86-*)
      target_makefile_frag="${target_makefile_frag} config/mt-x86pic"
      ;;
    powerpc*-*)
      target_makefile_frag="${target_makefile_frag} config/mt-ppcpic"
      ;;
    alpha*-*-linux*)
      target_makefile_frag="${target_makefile_frag} config/mt-elfalphapic"
      ;;
    *)
      if test -f ${srcdir}/config/mt-${target_cpu}pic; then
        target_makefile_frag="${target_makefile_frag} config/mt-${target_cpu}pic"
      fi
      ;;
a749 9
rm -f mt-frag
if [ -n "${target_makefile_frag}" ] ; then
  for f in ${target_makefile_frag}
  do
    cat ${srcdir}/$f >> mt-frag
  done
  target_makefile_frag=mt-frag
fi

d758 1
a758 1
if [ $? = 0 ] && [ -s conftest -o -s conftest.exe ]; then
d806 1
a806 1
    sed -e 's/^RPATH_ENVVAR[ 	]*=.*$/RPATH_ENVVAR = SHLIB_PATH/' \
d817 1
a817 1
	sed -e 's/--no[^ 	]*//' \
a819 1
	    -e 's/--bu[a-z-]*=[^ 	]*//' \
d831 1
a831 41
# Default to --enable-multilib.
if [ x${enable_multilib} = x ]; then
  targargs="--enable-multilib ${targargs}"
fi

# Pass --with-newlib if appropriate.  Note that target_configdirs has
# changed from the earlier setting of with_newlib.
if [ x${with_newlib} != xno ] && echo " ${target_configdirs} " | grep " newlib " > /dev/null 2>&1 && [ -d ${srcdir}/newlib ] ; then
  targargs="--with-newlib ${targargs}"
fi

# provide a proper gxx_include_dir.
# Note, if you change the default, make sure to fix both here and in
# the gcc, libio, libstdc++ and libg++ subdirectories.
# Check whether --with-gxx-include-dir or --without-gxx-include-dir was given.
gxx_include_dir=
if test -n "${with_gxx_include_dir}"; then
  case "${with_gxx_include_dir}" in
    yes )
      echo "configure.in: error: bad value ${withval} given for g++ include directory" 1>&2
      exit 1
      ;;
    no )
      ;;
    * )
      gxx_include_dir=${with_gxx_include_dir}
      ;;
  esac
fi
if test x${gxx_include_dir} = x; then
  if test x${enable_version_specific_runtime_libs} = xyes; then
    gxx_include_dir='${libsubdir}/include/g++'
  else
    . ${topsrcdir}/config.if
    gxx_include_dir='${prefix}/include/g++'-${libstdcxx_interface}
  fi
else
  gxx_include_dir=${gxx_include_dir}
fi

targargs="--host=${target_alias} --build=${build_alias} ${targargs}"
a834 1
    -e "s%^gxx_include_dir[ 	]*=.*$%gxx_include_dir=${gxx_include_dir}%" \
@


1.1.1.8
log
@Import binutils-2.11.2
- only the binutils package (no gdb here)
- don't import libiberty and texinfo, they are elsewhere
- remove all .info* generated files
@
text
@a49 10
# Set up configure/Makefile variables if libstdc++-v3 is to be built.
if [ "${enable_libstdcxx_v3}" = "yes" ] && test -d $srcdir/libstdc++-v3; then
        libstdcxx_version="target-libstdc++-v3"
	# Don't use libstdc++-v3's flags to configure/build itself.
	libstdcxx_flags='`case $$dir in libstdc++-v3) ;; *) cat $$r/$(TARGET_SUBDIR)/libstdc++-v3/src/libstdc++.INC 2>/dev/null || : ;; esac` -L$$r/$(TARGET_SUBDIR)/libstd++-v3/src -L$$r/$(TARGET_SUBDIR)/libstd++-v3/src/.libs'
else
        libstdcxx_version="target-libio target-libstdc++"
        libstdcxx_flags='-isystem $$s/libstdc++ -isystem $$s/libstdc++/std -isystem $$s/libstdc++/stl -isystem $$s/libio/ -isystem $$s/libio/stdio -L$$r/$(TARGET_SUBDIR)/libstdc++'
fi

d53 1
a53 1
host_tools="byacc flex bison binutils ld gas gcc cgen sid sim gdb make patch prms send-pr gprof gdbtest tgas etc expect dejagnu ash bash bzip2 m4 autoconf automake libtool ispell grep diff rcs cvssrc fileutils shellutils time textutils wdiff find emacs emacs19 uudecode hello tar gzip indent recode release sed utils guile perl apache inet gawk findutils snavigator libtool gettext zip"
d61 4
a64 9
		${libstdcxx_version} \
		target-libf2c \
		target-libchill \
		target-libffi \
		target-libjava \
		target-zlib \
		target-boehm-gc \
		target-qthreads \
		target-libobjc"
a156 3
  i370-ibm-opened*)
    host_makefile_frag="${host_makefile_frag} config/mh-openedition"
    ;;
a293 3
    ia64-*-*)
      host_makefile_frag="${host_makefile_frag} config/mh-ia64pic"
      ;;
d527 1
a527 1
    noconfigdirs="tcl tk expect dejagnu make texinfo bison patch flex byacc send-pr uudecode dejagnu diff guile perl apache inet itcl tix db snavigator gnuserv gettext libffi"
a544 3
  powerpc-*-beos*)
    noconfigdirs="$noconfigdirs tk itcl tix libgui gdb dejagnu readline"
    ;;
d550 1
a550 1
    noconfigdirs="$noconfigdirs ${libstdcxx_version} target-newlib target-libiberty target-libgloss target-libffi"
d553 1
a553 1
    noconfigdirs="$noconfigdirs target-libgloss target-libffi"
d556 1
a556 1
    noconfigdirs="$noconfigdirs target-newlib target-libgloss target-libffi"
d565 7
a571 1
    noconfigdirs="$noconfigdirs gdb ld target-newlib target-libgloss target-libffi"
d580 1
a580 1
    noconfigdirs="$noconfigdirs target-libiberty texinfo send-pr"
d584 1
a584 1
    noconfigdirs="$noconfigdirs ${libstdcxx_version}"
d588 1
a588 1
      *) noconfigdirs="$noconfigdirs gdb readline ${libstdcxx_version}"
d593 1
a593 1
    noconfigdirs="$noconfigdirs target-libgloss target-libffi"
d611 4
a614 1
    noconfigdirs="$noconfigdirs target-libgloss target-libffi"
d617 1
a617 1
    noconfigdirs="$noconfigdirs target-libgloss target-libffi"
d620 1
a620 1
    noconfigdirs="$noconfigdirs target-libgloss target-libffi"
d623 1
a623 1
    noconfigdirs="$noconfigdirs target-libgloss target-libffi"
d626 1
a626 1
    noconfigdirs="$noconfigdirs target-libgloss target-libffi"
d632 1
a632 13
    noconfigdirs="$noconfigdirs target-libgloss target-libffi"
    if [ x${is_cross_compiler} != xno ] ; then
	   target_configdirs="${target_configdirs} target-bsp target-cygmon"
    fi
    ;;
  xscale-*-elf)
    noconfigdirs="$noconfigdirs target-libgloss target-libffi"
    if [ x${is_cross_compiler} != xno ] ; then
	   target_configdirs="${target_configdirs} target-bsp target-cygmon"
    fi
    ;;
  xscale-*-coff)
    noconfigdirs="$noconfigdirs target-libgloss target-libffi"
d638 1
a638 1
    noconfigdirs="$noconfigdirs target-libgloss target-libffi"
d641 1
a641 7
    noconfigdirs="$noconfigdirs ld target-libgloss target-libffi"
    ;;
  c4x-*-*)
    noconfigdirs="$noconfigdirs ${libstdcxx_version} target-libgloss target-libffi"
    ;;
  c54x*-*-* | tic54x-*-*)
    noconfigdirs="$noconfigdirs ${libstdcxx_version} target-libgloss target-libffi gcc gdb newlib"
d644 1
a644 1
    noconfigdirs="$noconfigdirs ${libstdcxx_version} target-libgloss target-libffi"
d655 1
a655 1
    noconfigdirs="$noconfigdirs ${libstdcxx_version} target-libgloss target-libffi"
d659 2
a660 3
  hppa*-*-lites* | \
  hppa*64*-*-*)
    # Do configure ld/binutils/gas for this case.
a671 4
  ia64*-*-elf*)
    # No gdb support yet.
    noconfigdirs="$noconfigdirs tix readline mmalloc libgui itcl gdb"
    ;;
d679 1
a679 1
    noconfigdirs="$noconfigdirs gdb ${libstdcxx_version} target-libffi"
d683 1
a683 1
    noconfigdirs="$noconfigdirs expect target-libgloss target-libffi"
d694 1
a694 1
    noconfigdirs="$noconfigdirs target-gperf target-libgloss target-libffi"
d706 1
a706 1
    noconfigdirs="$noconfigdirs ${libstdcxx_version} target-libgloss target-libffi"
d711 1
a711 1
    noconfigdirs="$noconfigdirs ld target-libgloss target-libffi"
d714 1
a714 1
    noconfigdirs="$noconfigdirs gprof target-libgloss target-libffi"
d726 1
a726 1
    noconfigdirs="$noconfigdirs emacs emacs19 target-libgloss target-libffi"
d731 1
a731 4
 m68hc11-*-*|m6811-*-*|m68hc12-*-*|m6812-*-*)
    noconfigdirs="$noconfigdirs target-libiberty target-librx target-libg++ target-libstdc++ target-libio target-libf2c target-libchill target-zlib target-libobjc"
    ;;
 m68k-*-elf*)
d742 1
a742 1
    noconfigdirs="$noconfigdirs target-libffi"
d748 1
a748 1
    noconfigdirs="$noconfigdirs target-libffi"
d759 1
a759 1
    noconfigdirs="$noconfigdirs gprof cvssrc target-libgloss target-libffi ld"
d764 1
a764 1
    noconfigdirs="$noconfigdirs gdb tcl tk make expect target-libgloss itcl tix db snavigator gnuserv target-libffi"
d770 1
a770 4
    noconfigdirs="$noconfigdirs gdb sim make tcl tk expect itcl tix db snavigator gnuserv target-libffi"
    ;;
  powerpc-*-beos*)
    noconfigdirs="$noconfigdirs gdb target-newlib target-libgloss"
d779 2
a780 1
    noconfigdirs="$noconfigdirs target-newlib gprof cvssrc target-libffi"
d787 1
a787 1
    noconfigdirs="$noconfigdirs gprof target-libffi ld"
d791 1
a791 1
    noconfigdirs="$noconfigdirs gprof target-libffi"
d794 1
a794 1
    noconfigdirs="$noconfigdirs ld binutils gprof target-libgloss target-libffi"
d806 5
d812 1
a812 1
    noconfigdirs="$noconfigdirs gprof target-libgloss target-libffi"
d815 1
a815 1
    noconfigdirs="$noconfigdirs gprof target-libgloss target-libffi"
d818 1
a818 1
    noconfigdirs="$noconfigdirs gprof target-libffi"   # same as generic mips
d822 1
a822 1
    noconfigdirs="$noconfigdirs gprof target-libffi"
d825 1
a825 1
    noconfigdirs="$noconfigdirs bfd binutils ld gas opcodes target-libgloss target-libffi"
d834 1
a834 1
    noconfigdirs="$noconfigdirs target-libgloss target-libffi"
a844 1
    noconfigdirs="target-libffi"
a849 1
    noconfigdirs="target-libffi"
d859 1
a859 1
    noconfigdirs="$noconfigdirs bfd binutils gas gcc gdb ld ${libstdcxx_version} opcodes target-libgloss target-libffi"
d862 1
a862 1
    noconfigdirs="$noconfigdirs target-libgloss target-libffi"
d865 1
a865 1
    noconfigdirs="$noconfigdirs target-libgloss target-libffi"
d868 1
a868 1
    noconfigdirs="$noconfigdirs target-libgloss target-libffi"
d871 1
a871 1
    noconfigdirs="$noconfigdirs bfd binutils gdb ld target-newlib opcodes target-libgloss target-libffi"
d874 5
a878 1
    noconfigdirs="$noconfigdirs target-newlib target-libgloss target-libffi"
d881 2
a882 1
    noconfigdirs="$noconfigdirs target-newlib target-libgloss target-libffi"
a887 1
    noconfigdirs="target-libffi"
a909 49
# Figure out what language subdirectories are present.
# Look if the user specified --enable-languages="..."; if not, use
# the environment variable $LANGUAGES if defined. $LANGUAGES might
# go away some day.
if test x"${enable_languages+set}" != xset; then
	if test x"${LANGUAGES+set}" = xset; then
		enable_languages="`echo ${LANGUAGES} | tr ' ' ','`"
	else
		enable_languages=all
	fi
else
	if test x"${enable_languages}" = x; then
		echo configure.in: --enable-languages needs at least one argument 1>&2
		exit 1
	fi
fi
subdirs=
for lang in ${srcdir}/gcc/*/config-lang.in ..
do
	case $lang in
	..) ;;
	# The odd quoting in the next line works around
	# an apparent bug in bash 1.12 on linux.
	${srcdir}/gcc/[*]/config-lang.in) ;;
	*)
	  lang_alias=`sed -n -e 's,^language=['"'"'"'"]\(.*\)["'"'"'"'].*$,\1,p' -e 's,^language=\([^ 	]*\).*$,\1,p' $lang`
	  this_lang_libs=`sed -n -e 's,^target_libs=['"'"'"'"]\(.*\)["'"'"'"'].*$,\1,p' -e 's,^target_libs=\([^ 	]*\).*$,\1,p' $lang`
	  build_by_default=`sed -n -e 's,^build_by_default=['"'"'"'"]\(.*\)["'"'"'"'].*$,\1,p' -e 's,^build_by_default=\([^ 	]*\).*$,\1,p' $lang`
	  if test "x$lang_alias" = x
	  then
		echo "$lang doesn't set \$language." 1>&2
		exit 1
	  fi
	  case ${build_by_default},${enable_languages}, in
	  *,$lang_alias,*) add_this_lang=yes ;;
	  no,*) add_this_lang=no ;;
	  *,all,*) add_this_lang=yes ;;
	  *) add_this_lang=no ;;
	  esac
	  if test x"${add_this_lang}" = xyes; then
	      eval target_libs='"$target_libs "'\"$this_lang_libs\"
	  else
	      eval noconfigdirs='"$noconfigdirs "'\"$this_lang_libs\"
	  fi
	  ;;
	esac
done


a1049 6
    ia64-*)
      target_makefile_frag="${target_makefile_frag} config/mt-ia64pic"
      ;;
    powerpc*-*-aix*)
      # We don't want -fPIC on AIX.
      ;;
d1168 1
a1168 1
# the gcc, libio, and libstdc++ subdirectories.
d1195 1
a1195 101
FLAGS_FOR_TARGET=
case " $skipdirs " in
*" target-newlib "*) ;;
*)
   case "$target" in
   *-cygwin*)
     FLAGS_FOR_TARGET=$FLAGS_FOR_TARGET' -L$$r/$(TARGET_SUBDIR)/winsup -L$$r/$(TARGET_SUBDIR)/winsup/cygwin -L$$r/$(TARGET_SUBDIR)/winsup/w32api/lib -isystem $$s/winsup/include -isystem $$s/winsup/cygwin/include -isystem $$s/winsup/w32api/include -isystem $$s/newlib/libc/sys/cygwin -isystem $$s/newlib/libc/sys/cygwin32' ;;
   esac

   # If we're not building GCC, don't discard standard headers.
   if test -d ${topsrcdir}/gcc; then
     FLAGS_FOR_TARGET=$FLAGS_FOR_TARGET' -nostdinc'

     if test "${build}" != "${host}"; then
       # On Canadian crosses, CC_FOR_TARGET will have already been set
       # by `configure', so we won't have an opportunity to add -Bgcc/
       # to it.  This is right: we don't want to search that directory
       # for binaries, but we want the header files in there, so add
       # them explicitly.
       FLAGS_FOR_TARGET=$FLAGS_FOR_TARGET' -isystem $$r/gcc/include'

       # Someone might think of using the pre-installed headers on
       # Canadian crosses, in case the installed compiler is not fully
       # compatible with the compiler being built.  In this case, it
       # would be better to flag an error than risking having
       # incompatible object files being constructed.  We can't
       # guarantee that an error will be flagged, but let's hope the
       # compiler will do it, when presented with incompatible header
       # files.
     fi
   fi

   # If we're building newlib, use its generic headers last, but search
   # for any libc-related directories first (so make it the last -B
   # switch).
   FLAGS_FOR_TARGET=$FLAGS_FOR_TARGET' -B$$r/$(TARGET_SUBDIR)/newlib/ -isystem $$r/$(TARGET_SUBDIR)/newlib/targ-include -isystem $$s/newlib/libc/include'
   ;;
esac

# On Canadian crosses, we'll be searching the right directories for
# the previously-installed cross compiler, so don't bother to add
# flags for directories within the install tree of the compiler
# being built; programs in there won't even run.
if test "${build}" = "${host}" && test -d ${topsrcdir}/gcc; then
  # Search for pre-installed headers if nothing else fits.
  FLAGS_FOR_TARGET=$FLAGS_FOR_TARGET' -B$(build_tooldir)/bin/ -B$(build_tooldir)/lib/ -isystem $(build_tooldir)/include'
fi

if test "x${use_gnu_ld}" = x && test "x${with_gnu_ld}" != xno &&
   echo " ${configdirs} " | grep " ld " > /dev/null &&
   test -d ${srcdir}/ld; then
  # Arrange for us to find uninstalled linker scripts.
  FLAGS_FOR_TARGET=$FLAGS_FOR_TARGET' -L$$r/ld'
fi

if test "x${CC_FOR_TARGET+set}" = xset; then
  :
elif test -d ${topsrcdir}/gcc; then
  CC_FOR_TARGET='$$r/gcc/xgcc -B$$r/gcc/'
elif test "$host" = "$target"; then
  CC_FOR_TARGET='$(CC)'
else
  CC_FOR_TARGET=`echo gcc | sed -e 's/x/x/' ${program_transform_name}`
fi
# On Canadian crosses, configure reads CC_FOR_TARGET from Makefile,
# if Makefile exists.  Prevent $(FLAGS_FOR_TARGET) from being duplicated.
case $CC_FOR_TARGET in
*' $(FLAGS_FOR_TARGET)') ;;
*) CC_FOR_TARGET=$CC_FOR_TARGET' $(FLAGS_FOR_TARGET)' ;;
esac

if test "x${CHILL_FOR_TARGET+set}" = xset; then
  :
elif test -d ${topsrcdir}/gcc; then
  CHILL_FOR_TARGET='$$r/gcc/xgcc -B$$r/gcc/ -L$$r/gcc/ch/runtime/'
elif test "$host" = "$target"; then
  CHILL_FOR_TARGET='$(CC)'
else
  CHILL_FOR_TARGET=`echo gcc | sed -e 's/x/x/' ${program_transform_name}`
fi
case $CHILL_FOR_TARGET in
*' $(FLAGS_FOR_TARGET)') ;;
*) CHILL_FOR_TARGET=$CHILL_FOR_TARGET' $(FLAGS_FOR_TARGET)' ;;
esac

if test "x${CXX_FOR_TARGET+set}" = xset; then
  :
elif test -d ${topsrcdir}/gcc; then
  CXX_FOR_TARGET='$$r/gcc/g++ -B$$r/gcc/ -nostdinc++ '$libstdcxx_flags
elif test "$host" = "$target"; then
  CXX_FOR_TARGET='$(CXX)'
else
  CXX_FOR_TARGET=`echo c++ | sed -e 's/x/x/' ${program_transform_name}`
fi
case $CXX_FOR_TARGET in
*' $(FLAGS_FOR_TARGET)') ;;
*) CXX_FOR_TARGET=$CXX_FOR_TARGET' $(FLAGS_FOR_TARGET)' ;;
esac
qCXX_FOR_TARGET=`echo "$CXX_FOR_TARGET" | sed 's,&,\\\&,g'`

targargs="--cache-file=../config.cache --host=${target_alias} --build=${build_alias} ${targargs}"
a1197 4
    -e "s%^FLAGS_FOR_TARGET[ 	]*=.*$%FLAGS_FOR_TARGET = ${FLAGS_FOR_TARGET}%" \
    -e "s%^CC_FOR_TARGET[ 	]*=.*$%CC_FOR_TARGET = ${CC_FOR_TARGET}%" \
    -e "s%^CHILL_FOR_TARGET[ 	]*=.*$%CHILL_FOR_TARGET = ${CHILL_FOR_TARGET}%" \
    -e "s%^CXX_FOR_TARGET[ 	]*=.*$%CXX_FOR_TARGET = ${qCXX_FOR_TARGET}%" \
@


1.1.1.9
log
@import binutils 2.14 (excluding testsuites, .info files, and .po files)
@
text
@d1 17
a17 2
#   Copyright (C) 1992, 1993, 1994, 1995, 1996, 1997, 1998,
#   1999, 2000, 2001, 2002, 2003 Free Software Foundation, Inc.
a33 84
### WARNING: this file contains embedded tabs.  Do not run untabify on this file.

AC_INIT(move-if-change)
AC_PREREQ(2.13)
AC_CANONICAL_SYSTEM
AC_ARG_PROGRAM

sinclude(config/acx.m4)

### we might need to use some other shell than /bin/sh for running subshells
### If we are on Windows, search for the shell.  This will permit people
### to not have /bin/sh, but to be able to see /SOME/PATH/sh configure
### without also having to set CONFIG_SHELL.  This code will work when
### using bash, which sets OSTYPE.
case "${OSTYPE}" in
*win32*)
  if test x${CONFIG_SHELL} = x ; then
    if test ! -f /bin/sh ; then
      if test x${SHELL} != x && test -f ${SHELL} ; then
	CONFIG_SHELL=${SHELL}
	export CONFIG_SHELL
      else
	for prog in sh sh.exe bash bash.exe; do
	  IFS="${IFS=	}"; save_ifs="$IFS"; IFS="${IFS}:"
	  for dir in $PATH; do
	    test -z "$dir" && dir=.
	    if test -f $dir/$prog; then
	      CONFIG_SHELL=$dir/$prog
	      export CONFIG_SHELL
	      break
	    fi
	  done
	  IFS="$save_ifs"
	  test -n "${CONFIG_SHELL}" && break
	done
      fi
    fi
  fi
  ;;
esac

config_shell=${CONFIG_SHELL-/bin/sh}

progname=$0
# if PWD already has a value, it is probably wrong.
if test -n "$PWD" ; then PWD=`${PWDCMD-pwd}`; fi

# Export original configure arguments for use by sub-configures.
TOPLEVEL_CONFIGURE_ARGUMENTS="$progname $@@"
AC_SUBST(TOPLEVEL_CONFIGURE_ARGUMENTS)

moveifchange=${srcdir}/move-if-change

# Set srcdir to "." if that's what it is.
# This is important for multilib support.
pwd=`${PWDCMD-pwd}`
srcpwd=`cd ${srcdir} ; ${PWDCMD-pwd}`
if test "${pwd}" = "${srcpwd}" ; then
  srcdir=.
fi

topsrcdir=$srcpwd

extra_host_args=
# Define the trigger file to make sure configure will re-run whenever
# the gcc version number changes.
if test "${with_gcc_version_trigger+set}" = set ; then
  gcc_version_trigger="$with_gcc_version_trigger"
  gcc_version=`grep version_string ${with_gcc_version_trigger} | sed -e 's/.*\"\([[^ \"]]*\)[[ \"]].*/\1/'`
else
  # If gcc's sources are available, define the trigger file.
  if test -f ${topsrcdir}/gcc/version.c ; then
    gcc_version_trigger=${topsrcdir}/gcc/version.c
    gcc_version=`grep version_string ${gcc_version_trigger} | sed -e 's/.*\"\([[^ \"]]*\)[[ \"]].*/\1/'`
    case "$ac_configure_args" in
      *--with-gcc-version-trigger=$gcc_version_trigger* )
        ;;
      * )
        # Add to all subconfigure arguments: build, host, and target.
        ac_configure_args="$ac_configure_args --with-gcc-version-trigger=$gcc_version_trigger"
        ;;
    esac
  fi
fi
d37 3
a39 1
### (library or tools, host or target), doing a dependency sort.
a40 2
# Subdirs will be configured in the order listed in build_configdirs, 
# configdirs, or target_configdirs; see the serialization section below.
d42 3
a44 3
# Dependency sorting is only needed when *configuration* must be done in 
# a particular order.  In all cases a dependency should be specified in 
# the Makefile, whether or not it's implicitly specified here.
d46 3
a48 2
# Double entries in build_configdirs, configdirs, or target_configdirs may
# cause circular dependencies and break everything horribly.
d50 9
a58 3
# these libraries are used by various programs built for the host environment
#
host_libs="intl mmalloc libiberty opcodes bfd readline tcl tk itcl tix libgui zlib"
d63 1
a63 10
# binutils, gas and ld appear in that order because it makes sense to run
# "make check" in that particular order.
host_tools="byacc flex bison binutils gas ld gcc sid sim gdb make patch prms send-pr gprof etc expect dejagnu ash bash bzip2 m4 autoconf automake libtool diff rcs fileutils shellutils time textutils wdiff find uudecode hello tar gzip indent recode release sed utils guile perl gawk findutils gettext zip fastjar"

# libgcj represents the runtime libraries only used by gcj.
libgcj="target-libffi \
	target-boehm-gc \
	target-zlib \
	target-qthreads \
	target-libjava"
d71 1
a71 1
		target-libstdc++-v3 \
d73 6
a78 1
		${libgcj} \
d88 1
a88 1
target_tools="target-examples target-groff target-gperf target-rda"
d92 16
d119 1
d125 1
a125 7
# Define is_cross_compiler to save on calls to 'test'.
is_cross_compiler=
if test x"${host}" = x"${target}" ; then
  is_cross_compiler=no
else
  is_cross_compiler=yes
fi	
d127 125
a251 3
# We always want to use the same name for this directory, so that dejagnu
# can reliably find it.
target_subdir=${target_alias}
d253 18
a270 5
if test ! -d ${target_subdir} ; then
  if mkdir ${target_subdir} ; then true
  else
    echo "'*** could not make ${PWD=`${PWDCMD-pwd}`}/${target_subdir}" 1>&2
    exit 1
d274 57
a330 2
build_prefix=build-
build_subdir=${build_prefix}${build_alias}
d332 7
a338 8
if test x"${build_alias}" != x"${host}" ; then
  if test ! -d ${build_subdir} ; then
    if mkdir ${build_subdir} ; then true
    else
      echo "'*** could not make ${PWD=`${PWDCMD-pwd}`}/${build_subdir}" 1>&2
      exit 1
    fi
  fi
d341 43
a383 1
# Skipdirs are removed silently.
d385 1
a385 3
# Noconfigdirs are removed loudly.
noconfigdirs=""

a386 6
# Make sure we don't let GNU ld be added if we didn't want it.
if test x$with_gnu_ld = xno ; then
  use_gnu_ld=no
  noconfigdirs="$noconfigdirs ld"
fi

a387 5
# Make sure we don't let GNU as be added if we didn't want it.
if test x$with_gnu_as = xno ; then
  use_gnu_as=no
  noconfigdirs="$noconfigdirs gas"
fi
d393 2
a394 1
  yes | "") ;; # the default value for this tree is that X11 is available
d396 5
a400 5
    skipdirs="${skipdirs} tk tix itcl libgui"
    # We won't be able to build gdbtk without X.
    enable_gdbtk=no 
    ;;
  *)  echo "*** bad value \"${with_x}\" for -with-x flag; ignored" 1>&2 ;;
d404 45
a448 2
# Remove these if host!=target.  
native_only="autoconf automake libtool fileutils find gawk gettext gzip hello indent m4 rcs recode sed shellutils tar textutils uudecode wdiff gprof target-groff guile perl time ash bash bzip2 prms gnuserv target-gperf"
d450 17
a466 8
# Similarly, some are only suitable for cross toolchains.
# Remove these if host=target.
cross_only="target-libgloss target-newlib target-opcodes"

case $is_cross_compiler in
  no) skipdirs="${skipdirs} ${cross_only}" ;;
  yes) skipdirs="${skipdirs} ${native_only}" ;;
esac
d470 2
a471 2
if test x"${with_headers}" != x && test x"${with_libs}" != x ; then
  if test x"${with_newlib}" = x ; then
d477 48
a524 4
case ${with_newlib} in
  no) skipdirs="${skipdirs} target-newlib" ;;
  yes) skipdirs=`echo " ${skipdirs} " | sed -e 's/ target-newlib / /'` ;;
esac
d529 6
a534 2
  *-cygwin*)
    configdirs="$configdirs libtermcap" ;;
d541 2
d544 2
a545 15
  hppa*64*-*-*)
    noconfigdirs="$noconfigdirs byacc"
    ;;
  i[[3456]]86-*-vsta)
    noconfigdirs="tcl expect dejagnu make texinfo bison patch flex byacc send-pr gprof uudecode dejagnu diff guile perl itcl tix gnuserv gettext"
    ;;
  i[[3456]]86-*-go32* | i[[3456]]86-*-msdosdjgpp*)
    noconfigdirs="tcl tk expect dejagnu send-pr uudecode guile itcl tix gnuserv libffi"
    ;;
  i[[3456]]86-*-mingw32*)
    # noconfigdirs="tcl tk expect dejagnu make texinfo bison patch flex byacc send-pr uudecode dejagnu diff guile perl itcl tix gnuserv"
    noconfigdirs="expect dejagnu autoconf automake send-pr rcs guile perl texinfo libtool"
    ;;
  i[[3456]]86-*-beos*)
    noconfigdirs="$noconfigdirs tk itcl tix libgui gdb"
d547 10
d558 1
a558 1
    noconfigdirs="autoconf automake send-pr rcs guile perl"
d564 1
a564 1
    noconfigdirs="patch diff make tk tcl expect dejagnu autoconf automake texinfo bison send-pr gprof rcs guile perl itcl tix gnuserv"
a568 3
  *-*-darwin*)
    noconfigdirs="$noconfigdirs tk itcl tix libgui"
    ;;
a570 15
# Save it here so that, even in case of --enable-libgcj, if the Java
# front-end isn't enabled, we still get libgcj disabled.
libgcj_saved=$libgcj
case $enable_libgcj in
yes)
  # If we reset it here, it won't get added to noconfigdirs in the
  # target-specific build rules, so it will be forcibly enabled
  # (unless the Java language itself isn't enabled).
  libgcj=
  ;;
no)
  # Make sure we get it printed in the list of not supported target libs.
  noconfigdirs="$noconfigdirs ${libgcj}"
  ;;
esac
a572 30
  *-*-chorusos)
    noconfigdirs="$noconfigdirs target-newlib target-libgloss ${libgcj}"
    ;;
  *-*-darwin*)
    noconfigdirs="$noconfigdirs bfd binutils ld gas opcodes gdb gprof"
    noconfigdirs="$noconfigdirs target-libobjc ${libgcj}"
    ;;
  *-*-freebsd[[12]] | *-*-freebsd[[12]].* | *-*-freebsd*aout*)
    noconfigdirs="$noconfigdirs target-newlib target-libgloss ${libgcj}"
    ;;
  *-*-kaos*)
    # Remove unsupported stuff on all kaOS configurations.
    skipdirs="target-libiberty ${libgcj} target-libstdc++-v3 target-libf2c target-librx"
    skipdirs="$skipdirs target-libobjc target-examples target-groff target-gperf"
    skipdirs="$skipdirs zlib fastjar target-libjava target-boehm-gc target-zlib"
    noconfigdirs="$noconfigdirs target-libgloss"
    ;;
  *-*-netbsd*)
    # Skip some stuff on all NetBSD configurations.
    noconfigdirs="$noconfigdirs target-newlib target-libiberty target-libgloss"

    # Skip some stuff that's unsupported on some NetBSD configurations.
    case "${target}" in
      i*86-*-netbsdelf*) ;;
      arm*-*-netbsdelf*) ;;
      *)
	noconfigdirs="$noconfigdirs ${libgcj}"
	;;
    esac
    ;;
d574 1
a574 1
    noconfigdirs="$noconfigdirs target-libstdc++-v3 target-newlib target-libiberty target-libgloss ${libgcj}"
d577 1
a577 7
    noconfigdirs="$noconfigdirs target-libgloss ${libgcj}"
    case ${target} in
	h8300*-*-* | h8500-*-*)
	  noconfigdirs="$noconfigdirs target-libf2c"
          ;;
        *) ;;
    esac
d580 1
a580 1
    noconfigdirs="$noconfigdirs target-newlib target-libgloss ${libgcj}"
d583 2
a584 2
    # ld works, but does not support shared libraries.
    # newlib is not 64 bit ready.  I'm not sure about fileutils.
d586 1
a586 1
    noconfigdirs="$noconfigdirs gas ld fileutils target-newlib target-libgloss"
d589 1
a589 1
    noconfigdirs="$noconfigdirs gdb ld target-newlib target-libgloss ${libgcj}"
d591 1
a591 1
  alpha*-*-linux*)
a594 10
  alpha*-*-freebsd*)
    noconfigdirs="$noconfigdirs target-newlib target-libgloss"
    ;;
  alpha*-*-*)
    # newlib is not 64 bit ready
    noconfigdirs="$noconfigdirs target-newlib target-libgloss ${libgcj}"
    ;;
  sh-*-linux*)
    noconfigdirs="$noconfigdirs ${libgcj} target-newlib target-libgloss"
    ;;    
d596 2
a597 2
    noconfigdirs="$noconfigdirs ${libgcj}"
    noconfigdirs="$noconfigdirs target-examples"
d602 2
a603 2
    noconfigdirs="$noconfigdirs target-libstdc++-v3"
    noconfigdirs="$noconfigdirs target-newlib"
d606 1
a606 1
      *) noconfigdirs="$noconfigdirs gdb readline"
d611 1
a611 1
    noconfigdirs="$noconfigdirs target-libgloss ${libgcj}"
d613 2
a614 2
  arm-*-coff | strongarm-*-coff | xscale-*-coff)
    noconfigdirs="$noconfigdirs ${libgcj}"
d616 5
a620 2
  arm-*-elf* | strongarm-*-elf* | xscale-*-elf*)
    noconfigdirs="$noconfigdirs target-libffi target-qthreads"
d622 5
a626 2
  arm-*-pe*)
    noconfigdirs="$noconfigdirs target-libgloss ${libgcj}"
d629 1
a629 1
    noconfigdirs="$noconfigdirs target-libgloss ${libgcj}"
d632 1
a632 1
    noconfigdirs="$noconfigdirs target-libgloss ${libgcj}"
d635 1
a635 1
    noconfigdirs="$noconfigdirs target-libgloss ${libgcj}"
d638 25
a662 1
    noconfigdirs="$noconfigdirs target-libgloss ${libgcj}"
d665 1
a665 1
    noconfigdirs="$noconfigdirs target-libgloss ${libgcj}"
d668 1
a668 1
    noconfigdirs="$noconfigdirs ld target-libgloss ${libgcj}"
d670 2
a671 5
  avr-*-*)
    noconfigdirs="$noconfigdirs target-libiberty target-libstdc++-v3 ${libgcj}"
    ;;
  c4x-*-* | tic4x-*-*)
    noconfigdirs="$noconfigdirs target-libstdc++-v3 target-libgloss ${libgcj}"
d674 1
a674 4
    noconfigdirs="$noconfigdirs target-libstdc++-v3 target-libgloss ${libgcj} gcc gdb newlib"
    ;;
  cris-*-*)
    noconfigdirs="$noconfigdirs ${libgcj}"
d677 1
a677 1
    noconfigdirs="$noconfigdirs target-libstdc++-v3 target-libgloss ${libgcj}"
a679 1
    noconfigdirs="$noconfigdirs ${libgcj}"
d682 3
a684 7
    noconfigdirs="$noconfigdirs ${libgcj}"
    ;;
  frv-*-*)
    noconfigdirs="$noconfigdirs ${libgcj}"
    ;;
  h8300*-*-*)
    noconfigdirs="$noconfigdirs target-libgloss"
d686 1
d688 1
a688 7
    noconfigdirs="$noconfigdirs target-libstdc++-v3 target-libgloss ${libgcj} target-libf2c"
    ;;
  hppa*64*-*-linux* | parisc*64*-*-linux*)
    # In this case, it's because the hppa64-linux target is for
    # the kernel only at this point and has no libc, and thus no
    # headers, crt*.o, etc., all of which are needed by these.
    noconfigdirs="$noconfigdirs target-zlib"
d691 1
a691 1
  parisc*-*-linux* | hppa*-*-linux* | \
a692 1
  hppa*-*-openbsd* | \
a693 1
    noconfigdirs="$noconfigdirs ${libgcj}"
d697 8
a704 3
    # According to Alexandre Oliva <aoliva@@redhat.com>, libjava won't
    # build on HP-UX 10.20.
    noconfigdirs="$noconfigdirs ld shellutils ${libgcj}"
d710 4
a713 9
  ia64*-**-hpux*)
    # No gdb or ld support yet.
    noconfigdirs="$noconfigdirs tix readline mmalloc libgui itcl gdb ld"
    ;;
  i[[3456]]86-*-coff | i[[3456]]86-*-elf)
    noconfigdirs="$noconfigdirs ${libgcj}"
    ;;
  i[[34567]]86-*-freebsd*)
    noconfigdirs="$noconfigdirs target-newlib target-libgloss"
d715 3
a717 18
  i[[3456]]86-*-linux*)
    # The GCC port for glibc1 has no MD_FALLBACK_FRAME_STATE_FOR, so let's
    # not build java stuff by default.
    case "${target}" in
      *-*-*libc1*)
	noconfigdirs="$noconfigdirs ${libgcj}";;
    esac

    # This section makes it possible to build newlib natively on linux.
    # If we are using a cross compiler then don't configure newlib.
    if test x${is_cross_compiler} != xno ; then
      noconfigdirs="$noconfigdirs target-newlib"
    fi
    noconfigdirs="$noconfigdirs target-libgloss"
    # If we are not using a cross compiler, do configure newlib.
    # Note however, that newlib will only be configured in this situation
    # if the --with-newlib option has been given, because otherwise
    # 'target-newlib' will appear in skipdirs.
d719 1
a719 1
  i[[3456]]86-*-mingw32*)
d721 1
a721 1
    noconfigdirs="$noconfigdirs expect target-libgloss ${libgcj}"
d725 2
a726 2
      i[[3456]]86-*-mingw32) ;; # keep gdb tcl tk expect etc.
      *) noconfigdirs="$noconfigdirs gdb tcl tk expect itcl tix gnuserv"
d732 1
a732 1
    noconfigdirs="$noconfigdirs target-gperf target-libgloss ${libgcj}"
d739 1
a739 1
      *) noconfigdirs="$noconfigdirs gdb tcl tk expect itcl tix libgui gnuserv"
d743 2
a744 2
  i[[3456]]86-*-pe)
    noconfigdirs="$noconfigdirs target-libstdc++-v3 target-libgloss ${libgcj}"
d746 1
a746 1
  i[[3456]]86-*-sco3.2v5*)
d749 1
a749 1
    noconfigdirs="$noconfigdirs ld target-libgloss ${libgcj}"
d751 2
a752 2
  i[[3456]]86-*-sco*)
    noconfigdirs="$noconfigdirs gprof target-libgloss ${libgcj}"
d754 1
a754 1
  i[[3456]]86-*-solaris2*)
d757 8
a764 2
  i[[3456]]86-*-sysv4*)
    noconfigdirs="$noconfigdirs target-libgloss ${libgcj}"
d766 10
a775 8
  i[[3456]]86-*-beos*)
    noconfigdirs="$noconfigdirs gdb target-newlib target-libgloss ${libgcj}"
    ;;
  m68hc11-*-*|m6811-*-*|m68hc12-*-*|m6812-*-*)
    noconfigdirs="$noconfigdirs target-libiberty target-libstdc++-v3 ${libgcj}"
    ;;
  m68k-*-elf*)
    noconfigdirs="$noconfigdirs ${libgcj}"
d778 3
a780 9
    noconfigdirs="$noconfigdirs ${libgcj}"
    ;;
  mcore-*-pe*)
  # The EPOC C++ environment does not support exceptions or rtti,
  # and so building libstdc++-v3 tends not to always work.
    noconfigdirs="$noconfigdirs target-libstdc++-v3"
    ;;
  mmix-*-*)
    noconfigdirs="$noconfigdirs ${libgcj} gdb libgloss"
d783 4
a786 1
    noconfigdirs="$noconfigdirs ${libgcj}"
d789 4
a792 1
    noconfigdirs="$noconfigdirs ${libgcj}"
d796 6
a801 1
    noconfigdirs="$noconfigdirs gprof target-libgloss ${libgcj}"
d805 1
a805 1
    noconfigdirs="$noconfigdirs gdb tcl tk make expect target-libgloss itcl tix gnuserv ${libgcj}"
d811 1
a811 1
    noconfigdirs="$noconfigdirs gdb sim make tcl tk expect itcl tix gnuserv ${libgcj}"
d814 1
a814 1
    noconfigdirs="$noconfigdirs gdb target-newlib target-libgloss ${libgcj}"
d817 3
a819 1
    noconfigdirs="$noconfigdirs ${libgcj}"
d822 2
a823 1
    noconfigdirs="$noconfigdirs target-newlib gprof ${libgcj}"
d826 6
a831 1
    noconfigdirs="$noconfigdirs gprof ${libgcj}"
d834 1
a834 1
    noconfigdirs="$noconfigdirs gprof ${libgcj}"
d837 1
a837 1
    noconfigdirs="$noconfigdirs ld binutils gprof target-libgloss ${libgcj}"
d841 2
a842 1
    noconfigdirs="$noconfigdirs ld gprof target-libgloss ${libgcj}"
d845 3
a847 5
    # Linking libjava exceeds command-line length limits on at least
    # IRIX 6.2, but not on IRIX 6.5.
    # Also, boehm-gc won't build on IRIX 6.5, according to Jeffrey Oldham
    # <oldham@@codesourcery.com>
    noconfigdirs="$noconfigdirs gprof target-libgloss ${libgcj}"
d850 1
a850 1
    noconfigdirs="$noconfigdirs gprof target-libgloss ${libgcj}"
d853 1
a853 1
    noconfigdirs="$noconfigdirs gprof target-libgloss ${libgcj}"
d856 3
a858 5
    noconfigdirs="$noconfigdirs gprof ${libgcj}"   # same as generic mips
    ;;
  mips*-*-linux*)
    noconfigdirs="$noconfigdirs target-newlib target-libgloss"
    ;;
d860 1
a860 1
    noconfigdirs="$noconfigdirs gprof ${libgcj}"
d863 1
a863 1
    noconfigdirs="$noconfigdirs bfd binutils ld gas opcodes target-libgloss ${libgcj}"
d867 3
a869 3
      i[[3456]]86-*-vsta) ;; # don't add gprof back in
      i[[3456]]86-*-go32*) ;; # don't add gprof back in
      i[[3456]]86-*-msdosdjgpp*) ;; # don't add gprof back in
d872 1
a872 4
    noconfigdirs="$noconfigdirs target-libgloss ${libgcj}"
    ;;
  sh64-*-*)
    noconfigdirs="$noconfigdirs target-libgloss ${libgcj}"
d875 3
a877 1
    noconfigdirs="$noconfigdirs ${libgcj}"
d880 4
a883 1
    noconfigdirs="$noconfigdirs ${libgcj}"
d886 4
a889 1
    noconfigdirs="$noconfigdirs ${libgcj}"
d892 2
a893 3
    noconfigdirs="$noconfigdirs ${libgcj}"
    if test x${is_cross_compiler} != xno ; then
           noconfigdirs="$noconfigdirs gdb target-newlib target-libgloss"
a897 2
  sparc-*-solaris* | sparc64-*-solaris* | sparcv9-*-solaris*)
    ;;
d899 1
a899 1
    noconfigdirs="$noconfigdirs bfd binutils gas gcc gdb ld target-libstdc++-v3 opcodes target-libgloss ${libgcj}"
d902 1
a902 1
    noconfigdirs="$noconfigdirs target-libgloss ${libgcj}"
d905 1
a905 1
    noconfigdirs="$noconfigdirs target-libgloss ${libgcj}"
d908 1
a908 1
    noconfigdirs="$noconfigdirs target-libgloss ${libgcj}"
d911 1
a911 1
    noconfigdirs="$noconfigdirs bfd binutils gdb ld target-newlib opcodes target-libgloss ${libgcj}"
d914 1
a914 7
    noconfigdirs="$noconfigdirs target-newlib target-libgloss ${libgcj}"
    ;;
  ip2k-*-*)
    noconfigdirs="$noconfigdirs target-libiberty target-libstdc++-v3 ${libgcj}"
    ;;
  *-*-linux*)
    noconfigdirs="$noconfigdirs target-newlib target-libgloss"
d917 1
a917 1
    noconfigdirs="$noconfigdirs target-newlib target-libgloss ${libgcj}"
d919 6
a924 3
  *-*-*)
    noconfigdirs="$noconfigdirs ${libgcj}"
    ;;
d934 12
a949 1
# NB:  embedded tabs in this IF block -- do not untabify
d951 5
a955 6
  if test x"${LANGUAGES+set}" = xset; then
    enable_languages="${LANGUAGES}"
      echo configure.in: warning: setting LANGUAGES is deprecated, use --enable-languages instead 1>&2
  else
    enable_languages=all
  fi
d957 4
a960 6
  if test x"${enable_languages}" = x ||
     test x"${enable_languages}" = xyes;
     then
    echo configure.in: --enable-languages needs at least one language argument 1>&2
    exit 1
  fi
d962 1
a962 5
enable_languages=`echo "${enable_languages}" | sed -e 's/[[ 	,]][[ 	,]]*/,/g' -e 's/,$//'`

# First scan to see if an enabled language requires some other language.
# We assume that a given config-lang.in will list all the language
# front ends it requires, even if some are required indirectly.
d965 26
a990 17
  case $lang in
    ..) ;;
    # The odd quoting in the next line works around
    # an apparent bug in bash 1.12 on linux.
    ${srcdir}/gcc/[[*]]/config-lang.in) ;;
    *)
      lang_alias=`sed -n -e 's,^language=[['"'"'"'"]]\(.*\)[["'"'"'"']].*$,\1,p' -e 's,^language=\([[^ 	]]*\).*$,\1,p' $lang`
      this_lang_requires=`sed -n -e 's,^lang_requires=[['"'"'"'"]]\(.*\)[["'"'"'"']].*$,\1,p' -e 's,^lang_requires=\([[^ 	]]*\).*$,\1,p' $lang`
      for other in $this_lang_requires
      do
        case ,${enable_languages}, in
	  *,$other,*) ;;
	  *,all,*) ;;
	  *,$lang_alias,*)
	    echo " \`$other' language required by \`$lang_alias'; enabling" 1>&2
	    enable_languages="$enable_languages,$other"
	    ;;
a991 3
      done
      ;;
  esac
a993 32
subdirs=
for lang in ${srcdir}/gcc/*/config-lang.in ..
do
  case $lang in
    ..) ;;
    # The odd quoting in the next line works around
    # an apparent bug in bash 1.12 on linux.
    ${srcdir}/gcc/[[*]]/config-lang.in) ;;
    *)
      lang_alias=`sed -n -e 's,^language=[['"'"'"'"]]\(.*\)[["'"'"'"']].*$,\1,p' -e 's,^language=\([[^ 	]]*\).*$,\1,p' $lang`
      this_lang_libs=`sed -n -e 's,^target_libs=[['"'"'"'"]]\(.*\)[["'"'"'"']].*$,\1,p' -e 's,^target_libs=\([[^ 	]]*\).*$,\1,p' $lang`
      this_lang_dirs=`sed -n -e 's,^lang_dirs=[['"'"'"'"]]\(.*\)[["'"'"'"']].*$,\1,p' -e 's,^lang_dirs=\([[^ 	]]*\).*$,\1,p' $lang`
      build_by_default=`sed -n -e 's,^build_by_default=[['"'"'"'"]]\(.*\)[["'"'"'"']].*$,\1,p' -e 's,^build_by_default=\([[^ 	]]*\).*$,\1,p' $lang`
      if test "x$lang_alias" = x
         then
        echo "$lang doesn't set \$language." 1>&2
        exit 1
      fi
      case ${build_by_default},${enable_languages}, in
        *,$lang_alias,*) add_this_lang=yes ;;
        no,*) add_this_lang=no ;;
        *,all,*) add_this_lang=yes ;;
        *) add_this_lang=no ;;
      esac
      if test x"${add_this_lang}" = xyes; then
        eval target_libs='"$target_libs "'\"$this_lang_libs\"
      else
        eval noconfigdirs='"$noconfigdirs "'\"$this_lang_libs $this_lang_dirs\"
      fi
      ;;
  esac
done
d1002 1
a1002 1
  if test $dir != .  && echo " ${configdirs} " | grep " ${dir} " >/dev/null 2>&1; then
d1004 2
a1005 1
    if test -r $srcdir/$dirname/configure ; then
d1013 1
a1013 1
  if test $dir != . && echo " ${target_configdirs} " | grep " ${dir} " >/dev/null 2>&1; then
d1015 2
a1016 1
    if test -r $srcdir/$dirname/configure ; then
d1028 1
a1028 1
if test -n "${target_configdirs}" ; then
d1031 2
a1032 2
    if test "$i" != "libiberty" ; then
      if test -r $srcdir/$i/configure ; then
d1038 1
a1038 1
  if test -z "${others}" ; then
d1043 13
a1055 309
# Quietly strip out all directories which aren't configurable in this tree.
# This relies on all configurable subdirectories being autoconfiscated, which
# is now the case.
configdirs_all="$configdirs"
configdirs=
for i in ${configdirs_all} ; do
  if test -f ${srcdir}/$i/configure ; then
    configdirs="${configdirs} $i"
  fi
done
target_configdirs_all="$target_configdirs"
target_configdirs=
for i in ${target_configdirs_all} ; do
  j=`echo $i | sed -e s/target-//g` 
  if test -f ${srcdir}/$j/configure ; then
    target_configdirs="${target_configdirs} $i"
  fi
done

# Produce a warning message for the subdirs we can't configure.
# This isn't especially interesting in the Cygnus tree, but in the individual
# FSF releases, it's important to let people know when their machine isn't
# supported by the one or two programs in a package.

if test -n "${notsupp}" && test -z "${norecursion}" ; then
  # If $appdirs is non-empty, at least one of those directories must still
  # be configured, or we error out.  (E.g., if the gas release supports a
  # specified target in some subdirs but not the gas subdir, we shouldn't
  # pretend that all is well.)
  if test -n "$appdirs" ; then
    for dir in $appdirs ; do
      if test -r $dir/Makefile.in ; then
	if echo " ${configdirs} " | grep " ${dir} " >/dev/null 2>&1; then
	  appdirs=""
	  break
	fi
	if echo " ${target_configdirs} " | grep " ${dir} " >/dev/null 2>&1; then
	  appdirs=""
	  break
	fi
      fi
    done
    if test -n "$appdirs" ; then
      echo "*** This configuration is not supported by this package." 1>&2
      exit 1
    fi
  fi
  # Okay, some application will build, or we don't care to check.  Still
  # notify of subdirs not getting built.
  echo "*** This configuration is not supported in the following subdirectories:" 1>&2
  echo "    ${notsupp}" 1>&2
  echo "    (Any other directories should still work fine.)" 1>&2
fi

case "$host" in
  *msdosdjgpp*)
    enable_gdbtk=no ;;
esac

copy_dirs=

# Handle --with-headers=XXX.  If the value is not "yes", the contents of
# the named directory are copied to $(tooldir)/sys-include.
if test x"${with_headers}" != x ; then
  if test x${is_cross_compiler} = xno ; then
    echo 1>&2 '***' --with-headers is only supported when cross compiling
    exit 1
  fi
  if test x"${with_headers}" != xyes ; then
    case "${exec_prefixoption}" in
    "") x=${prefix} ;;
    *) x=${exec_prefix} ;;
    esac
    copy_dirs="${copy_dirs} ${with_headers} $x/${target_alias}/sys-include"
  fi
fi

# Handle --with-libs=XXX.  If the value is not "yes", the contents of
# the name directories are copied to $(tooldir)/lib.  Multiple directories
# are permitted.
if test x"${with_libs}" != x ; then
  if test x${is_cross_compiler} = xno ; then
    echo 1>&2 '***' --with-libs is only supported when cross compiling
    exit 1
  fi
  if test x"${with_libs}" != xyes ; then
    # Copy the libraries in reverse order, so that files in the first named
    # library override files in subsequent libraries.
    case "${exec_prefixoption}" in
    "") x=${prefix} ;;
    *) x=${exec_prefix} ;;
    esac
    for l in ${with_libs}; do
      copy_dirs="$l $x/${target_alias}/lib ${copy_dirs}"
    done
  fi
fi

# Handle ${copy_dirs}
set fnord ${copy_dirs}
shift
while test $# != 0 ; do
  if test -f $2/COPIED && test x"`cat $2/COPIED`" = x"$1" ; then
    :
  else
    echo Copying $1 to $2

    # Use the install script to create the directory and all required
    # parent directories.
    if test -d $2 ; then
      :
    else
      echo >config.temp
      ${srcdir}/install-sh -c -m 644 config.temp $2/COPIED
    fi

    # Copy the directory, assuming we have tar.
    # FIXME: Should we use B in the second tar?  Not all systems support it.
    (cd $1; tar -cf - .) | (cd $2; tar -xpf -)

    # It is the responsibility of the user to correctly adjust all
    # symlinks.  If somebody can figure out how to handle them correctly
    # here, feel free to add the code.

    echo $1 > $2/COPIED
  fi
  shift; shift
done

# Work in distributions that contain no compiler tools, like Autoconf.
tentative_cc=""
host_makefile_frag=/dev/null
if test -d ${srcdir}/config ; then
case "${host}" in
  m68k-hp-hpux*)
    # Avoid "too much defining" errors from HPUX compiler.
    tentative_cc="cc -Wp,-H256000"
    # If "ar" in $PATH is GNU ar, the symbol table may need rebuilding.
    # If it's HP/UX ar, this should be harmless.
    RANLIB="ar ts"
    ;;
  m68k-apollo-sysv*)
    tentative_cc="cc -A ansi -A runtype,any -A systype,any -U__STDC__ -DUSG"
    ;;
  m68k-apollo-bsd*)
    #None of the Apollo compilers can compile gas or binutils.  The preprocessor
    # chokes on bfd, the compiler won't let you assign integers to enums, and
    # other problems.  Defining CC to gcc is a questionable way to say "don't use
    # the apollo compiler" (the preferred version of GCC could be called cc,
    # or whatever), but I'm not sure leaving CC as cc is any better...
    #CC=cc -A ansi -A runtype,any -A systype,any -U__STDC__ -DNO_STDARG
    # Used to have BISON=yacc.
    tentative_cc=gcc
    ;;
  m88k-dg-dgux*)
    tentative_cc="gcc -Wall -ansi -D__using_DGUX"
    ;;
  m88k-harris-cxux*)
    # Under CX/UX, we want to tell the compiler to use ANSI mode.
    tentative_cc="cc -Xa"
    host_makefile_frag="config/mh-cxux"
    ;;
  m88k-motorola-sysv*)
    ;;
  mips*-dec-ultrix*)
    tentative_cc="cc -Wf,-XNg1000"
    host_makefile_frag="config/mh-decstation"
    ;;
  mips*-nec-sysv4*)
    # The C compiler on NEC MIPS SVR4 needs bigger tables.
    tentative_cc="cc -ZXNd=5000 -ZXNg=1000"
    host_makefile_frag="config/mh-necv4"
    ;;
  mips*-sgi-irix4*)
    # Tell compiler to use K&R C.  We can't compile under the SGI Ansi
    # environment.  Also bump switch table size so that cp-parse will
    # compile.  Bump string length limit so linker builds.
    tentative_cc="cc -cckr -Wf,-XNg1500 -Wf,-XNk1000 -Wf,-XNh2000 -Wf,-XNl8192"
    ;;
  mips*-*-sysv4*)
    host_makefile_frag="config/mh-sysv4"
    ;;
  mips*-*-sysv*)
    # This is for a MIPS running RISC/os 4.52C.

    # This is needed for GDB, but needs to be in the top-level make because
    # if a library is compiled with the bsd headers and gets linked with the
    # sysv system libraries all hell can break loose (e.g. a jmp_buf might be
    # a different size).
    # ptrace(2) apparently has problems in the BSD environment.  No workaround is
    # known except to select the sysv environment.  Could we use /proc instead?
    # These "sysv environments" and "bsd environments" often end up being a pain.
    #
    # This is not part of CFLAGS because perhaps not all C compilers have this
    # option.
    tentative_cc="cc -systype sysv"
    ;;
  i370-ibm-opened*)
    tentative_cc="c89"
    ;;
  i[[3456]]86-*-sysv5*)
    host_makefile_frag="config/mh-sysv5"
    ;;
  i[[3456]]86-*-dgux*)
    tentative_cc="gcc -Wall -ansi -D__using_DGUX"
    host_makefile_frag="config/mh-dgux386"
    ;;
  i[[3456]]86-ncr-sysv4.3*)
    # The MetaWare compiler will generate a copyright message unless you
    # turn it off by adding the -Hnocopyr flag.
    tentative_cc="cc -Hnocopyr"
    ;;
  i[[3456]]86-ncr-sysv4*)
    # for an NCR 3000 (i486/SVR4) system.
    # The NCR 3000 ships with a MetaWare compiler installed as /bin/cc.
    # This compiler not only emits obnoxious copyright messages every time
    # you run it, but it chokes and dies on a whole bunch of GNU source
    # files.  Default to using the AT&T compiler installed in /usr/ccs/ATT/cc.
    tentative_cc="/usr/ccs/ATT/cc"
    host_makefile_frag="config/mh-ncr3000"
    ;;
  i[[3456]]86-*-sco3.2v5*)
    ;;
  i[[3456]]86-*-sco*)
    # The native C compiler botches some simple uses of const.  Unfortunately,
    # it doesn't defined anything like "__sco__" for us to test for in ansidecl.h.
    tentative_cc="cc -Dconst="
    host_makefile_frag="config/mh-sco"
    ;;
  i[[3456]]86-*-udk*)
    host_makefile_frag="config/mh-sysv5"
    ;;
  i[[3456]]86-*-solaris2*)
    host_makefile_frag="config/mh-sysv4"
    ;;
  i[[3456]]86-*-msdosdjgpp*)
    host_makefile_frag="config/mh-djgpp"
    ;;
  *-cygwin*)
    host_makefile_frag="config/mh-cygwin"
    ;;
  *-mingw32*)
    host_makefile_frag="config/mh-mingw32"
    ;;
  *-interix*)
    host_makefile_frag="config/mh-interix"
    ;;
  vax-*-ultrix2*)
    # The old BSD pcc isn't up to compiling parts of gdb so use gcc
    tentative_cc=gcc
    ;;
  *-*-solaris2*)
    host_makefile_frag="config/mh-solaris"
    ;;
  m68k-sun-sunos*)
    # Sun's C compiler needs the -J flag to be able to compile cp-parse.c
    # without overflowing the jump tables (-J says to use a 32 bit table)
    tentative_cc="cc -J"
    ;;
  *-hp-hpux*)
    tentative_cc="cc -Wp,-H256000"
    ;;
  *-*-hiux*)
    tentative_cc="cc -Wp,-H256000"
    ;;
  rs6000-*-lynxos*)
    # /bin/cc is less than useful for our purposes.  Always use GCC
    tentative_cc="/usr/cygnus/progressive/bin/gcc"
    host_makefile_frag="config/mh-lynxrs6k"
    ;;
  *-*-lynxos*)
    # /bin/cc is less than useful for our purposes.  Always use GCC
    tentative_cc="/bin/gcc"
    ;;
  *-*-sysv4*)
    host_makefile_frag="config/mh-sysv4"
    ;;
esac
fi

extra_arflags_for_target=
extra_nmflags_for_target=
extra_ranlibflags_for_target=
target_makefile_frag=/dev/null
case "${target}" in
  i[[3456]]86-*-netware*)
    target_makefile_frag="config/mt-netware"
    ;;
  powerpc-*-netware*)
    target_makefile_frag="config/mt-netware"
    ;;
  *-*-linux*)
    target_makefile_frag="config/mt-linux"
    ;;
  *-*-aix4.[[3456789]]* | *-*-aix[[56789]].*)
    # nm and ar from AIX 4.3 and above require -X32_64 flag to all ar and nm 
    # commands to handle both 32-bit and 64-bit objects.  These flags are
    # harmless if we're using GNU nm or ar.
    extra_arflags_for_target=" -X32_64"
    extra_nmflags_for_target=" -B -X32_64"
    ;;
  *-*-darwin*)
    # ranlib from Darwin requires the -c flag to look at common symbols.
    extra_ranlibflags_for_target=" -c"
    ;;
  mips*-*-pe | sh*-*-pe | *arm-wince-pe)
    target_makefile_frag="config/mt-wince"
    ;;
esac
d1057 4
a1060 8
alphaieee_frag=/dev/null
case $target in
  alpha*-*-*)
    # This just makes sure to use the -mieee option to build target libs.
    # This should probably be set individually by each library.
    alphaieee_frag="config/mt-alphaieee"
    ;;
esac
d1062 29
a1090 20
# If --enable-target-optspace always use -Os instead of -O2 to build
# the target libraries, similarly if it is not specified, use -Os
# on selected platforms.
ospace_frag=/dev/null
case "${enable_target_optspace}:${target}" in
  yes:*)
    ospace_frag="config/mt-ospace"
    ;;
  :d30v-*)
    ospace_frag="config/mt-d30v"
    ;;
  :m32r-* | :d10v-* | :fr30-*)
    ospace_frag="config/mt-ospace"
    ;;
  no:* | :*)
    ;;
  *)
    echo "*** bad value \"${enable_target_optspace}\" for --enable-target-optspace flag; ignored" 1>&2
    ;;
esac
d1105 5
a1109 4
if test x${use_gnu_as} = x &&
   echo " ${configdirs} " | grep " gas " > /dev/null 2>&1 ; then
  with_gnu_as=yes
  extra_host_args="$extra_host_args --with-gnu-as"
d1112 5
a1116 4
if test x${use_gnu_ld} = x &&
   echo " ${configdirs} " | grep " ld " > /dev/null 2>&1 ; then
  with_gnu_ld=yes
  extra_host_args="$extra_host_args --with-gnu-ld"
d1119 1
a1119 1
# If using newlib, add --with-newlib to the extra_host_args so that gcc/configure
d1122 1
a1122 1
if test x${with_newlib} != xno && echo " ${target_configdirs} " | grep " target-newlib " > /dev/null 2>&1 ; then
d1124 1
a1124 1
  extra_host_args="$extra_host_args --with-newlib"
d1127 1
a1127 3

# Default to using --with-stabs for certain targets.
if test x${with_stabs} = x ; then
d1129 23
a1151 10
  mips*-*-irix6*o32)
    with_stabs=yes;
    extra_host_args="${extra_host_args} --with-stabs"
    ;;
  mips*-*-irix6*)
    ;;
  mips*-*-* | alpha*-*-osf*)
    with_stabs=yes;
    extra_host_args="${extra_host_args} --with-stabs"
    ;;
d1155 5
a1159 20
# hpux11 in 64bit mode has libraries in a weird place.  Arrange to find
# them automatically.
case "${host}" in
  hppa*64*-*-hpux11*)	
    extra_host_args="$extra_host_args -x-libraries=/usr/lib/pa20_64 -x-includes=/usr/X11R6/include"
    ;;
esac

# If we aren't going to be using gcc, see if we can extract a definition
# of CC from the fragment.
# Actually, use the 'pre-extracted' version above.
if test -z "${CC}" && test "${build}" = "${host}" ; then
  IFS="${IFS= 	}"; save_ifs="$IFS"; IFS="${IFS}:"
  found=
  for dir in $PATH; do
    test -z "$dir" && dir=.
    if test -f $dir/gcc; then
      found=yes
      break
    fi
d1161 1
a1161 4
  IFS="$save_ifs"
  if test -z "${found}" && test -n "${tentative_cc}" ; then
    CC=$tentative_cc
  fi
d1164 1
a1164 272
# Some systems (e.g., one of the i386-aix systems the gas testers are
# using) don't handle "\$" correctly, so don't use it here.
tooldir='$(exec_prefix)'/${target_alias}
build_tooldir=${tooldir}

# Generate a default definition for YACC.  This is used if the makefile can't
# locate bison or byacc in objdir.

for prog in 'bison -y' byacc yacc
do
  set dummy $prog; tmp=$2
  IFS="${IFS= 	}"; save_ifs="$IFS"; IFS="${IFS}:"
  for dir in $PATH; do
    test -z "$dir" && dir=.
    if test -f $dir/$tmp; then
      DEFAULT_YACC="$prog"
      break
    fi
  done
  IFS="$save_ifs"

  test -n "$DEFAULT_YACC" && break
done

# Generate a default definition for M4.  This is used if the makefile can't
# locate m4 in objdir.

for prog in gm4 gnum4 m4
do
  set dummy $prog; tmp=$2
  IFS="${IFS=   }"; save_ifs="$IFS"; IFS="${IFS}:"
  for dir in $PATH; do
    test -z "$dir" && dir=.
    if test -f $dir/$tmp; then
      DEFAULT_M4="$prog"
      break
    fi
  done
  IFS="$save_ifs"

  test -n "$DEFAULT_M4" && break
done

# Generate a default definition for LEX.  This is used if the makefile can't
# locate flex in objdir.

for prog in flex lex
do
  set dummy $prog; tmp=$2
  IFS="${IFS= 	}"; save_ifs="$IFS"; IFS="${IFS}:"
  for dir in $PATH; do
    test -z "$dir" && dir=.
    if test -f $dir/$tmp; then
      DEFAULT_LEX="$prog"
      break
    fi
  done
  IFS="$save_ifs"

  test -n "$DEFAULT_LEX" && break
done

if test "${build}" != "${host}" ; then
  # If we are doing a Canadian Cross, in which the host and build systems
  # are not the same, we set reasonable default values for the tools.

  BISON=${BISON-bison}
  CC=${CC-${host_alias}-gcc}
  CFLAGS=${CFLAGS-"-g -O2"}
  CXX=${CXX-${host_alias}-c++}
  CXXFLAGS=${CXXFLAGS-"-g -O2"}
  CC_FOR_BUILD=${CC_FOR_BUILD-gcc}
  CC_FOR_TARGET=${CC_FOR_TARGET-${target_alias}-gcc}
  CXX_FOR_TARGET=${CXX_FOR_TARGET-${target_alias}-c++}
  GCJ_FOR_TARGET=${GCJ_FOR_TARGET-${target_alias}-gcj}
  GCC_FOR_TARGET=${GCC_FOR_TARGET-${CC_FOR_TARGET-${target_alias}-gcc}}
  BUILD_PREFIX=${build_alias}-
  BUILD_PREFIX_1=${build_alias}-
  MAKEINFO=${MAKEINFO-makeinfo}

  if test -z "${YACC}" ; then
    IFS="${IFS= 	}"; save_ifs="$IFS"; IFS="${IFS}:"
    for dir in $PATH; do
      test -z "$dir" && dir=.
      if test -f $dir/bison; then
	YACC="bison -y"
	break
      fi
      if test -f $dir/byacc; then
	YACC=byacc
	break
      fi
      if test -f $dir/yacc; then
	YACC=yacc
	break
      fi
    done
    IFS="$save_ifs"
    if test -z "${YACC}" ; then
      YACC="bison -y"
    fi
  fi

  if test -z "${LEX}" ; then
    IFS="${IFS= 	}"; save_ifs="$IFS"; IFS="${IFS}:"
    for dir in $PATH; do
      test -z "$dir" && dir=.
      if test -f $dir/flex; then
	LEX=flex
	break
      fi
      if test -f $dir/lex; then
	LEX=lex
	break
      fi
    done
    IFS="$save_ifs"
    LEX=${LEX-flex}
  fi

else
  # Set reasonable default values for some tools even if not Canadian.
  # Of course, these are different reasonable default values, originally
  # specified directly in the Makefile.
  # We don't export, so that autoconf can do its job.
  # Note that all these settings are above the fragment inclusion point
  # in Makefile.in, so can still be overridden by fragments.
  # This is all going to change when we autoconfiscate...

  BISON="\$(USUAL_BISON)"
  CC_FOR_BUILD="\$(CC)"
  GCC_FOR_TARGET="\$(USUAL_GCC_FOR_TARGET)"
  BUILD_PREFIX=
  BUILD_PREFIX_1=loser-
  MAKEINFO="\$(USUAL_MAKEINFO)"
  LEX="\$(USUAL_LEX)"
  YACC="\$(USUAL_YACC)"

  # If CC is still not set, try to get gcc.
  cc_prog_is_gcc=
  if test -z "${CC}" ; then
    IFS="${IFS= 	}"; save_ifs="$IFS"; IFS="${IFS}:"
    for dir in $PATH; do
      test -z "$dir" && dir=.
      if test -f $dir/gcc; then
	CC="gcc"
	cc_prog_is_gcc=yes
	echo 'void f(){}' > conftest.c
	if test -z "`${CC} -g -c conftest.c 2>&1`"; then
	  CFLAGS=${CFLAGS-"-g -O2"}
	  CXXFLAGS=${CXXFLAGS-"-g -O2"}
	else
	  CFLAGS=${CFLAGS-"-O2"}
	  CXXFLAGS=${CXXFLAGS-"-O2"}
	fi
	rm -f conftest*
	break
      fi
    done
    IFS="$save_ifs"
    CC=${CC-cc}
  else
    # Determine if we are using gcc.
    cat > conftest.c <<EOF
#ifdef __GNUC__
  yes;
#endif
EOF
    if ${CC} -E conftest.c | grep yes >/dev/null 2>&1; then
      cc_prog_is_gcc=yes
    fi
    rm -f conftest.c
    if test -z "${CFLAGS}"; then
      # Here CC is set but CFLAGS is not.  Use a quick hack to use -O2 if CC
      # is set to a version of gcc.
      if test "$cc_prog_is_gcc" = yes; then
	echo 'void f(){}' > conftest.c
	if test -z "`${CC} -g -c conftest.c 2>&1`"; then
	  CFLAGS=${CFLAGS-"-g -O2"}
	  CXXFLAGS=${CXXFLAGS-"-g -O2"}
	else
	  CFLAGS=${CFLAGS-"-O2"}
	  CXXFLAGS=${CXXFLAGS-"-O2"}
	fi
	rm -f conftest*
      fi
    fi
  fi

  # We must set the default linker to the linker used by gcc for the correct
  # operation of libtool.  If LD is not defined and we are using gcc, try to
  # set the LD default to the ld used by gcc.
  if test -z "$LD"; then
    if test "$cc_prog_is_gcc" = yes; then
      case $build in
      *-*-mingw*)
	gcc_prog_ld=`$CC -print-prog-name=ld 2>&1 | tr -d '\015'` ;;
      *)
	gcc_prog_ld=`$CC -print-prog-name=ld 2>&1` ;;
      esac
      case $gcc_prog_ld in
      # Accept absolute paths.
      [[\\/]* | [A-Za-z]:[\\/]*)]
        LD="$gcc_prog_ld" ;;
      esac
    fi
  fi

  CXX=${CXX-"c++"}
  CFLAGS=${CFLAGS-"-g"}
  CXXFLAGS=${CXXFLAGS-"-g -O2"}
fi

# FIXME Should this be done recursively ??? (Useful for e.g. gdbtest)
# Set up the list of links to be made.
# ${links} is the list of link names, and ${files} is the list of names to link to.

# Make the links.
configlinks="${links}"
if test -r ./config.status  ; then
  mv -f ./config.status ./config.back
fi
while test -n "${files}" ; do
  # set file to car of files, files to cdr of files
  set ${files}; file=$1; shift; files=$*
  set ${links}; link=$1; shift; links=$*

  if test ! -r ${srcdir}/${file} ; then
    if test ! -r ${file} ; then
      echo '***' "${progname}: cannot create a link \"${link}\"," 1>&2
      echo '***' "since the file \"${srcdir}/${file}\" does not exist." 1>&2
      exit 1
    else
      srcfile=${file}
    fi
  else
    srcfile=${srcdir}/${file}
  fi

  ${remove} -f ${link}
  # Make a symlink if possible, otherwise try a hard link
  if ${symbolic_link} ${srcfile} ${link} >/dev/null 2>&1 ; then
    true
  else
    # We need to re-remove the file because Lynx leaves a 
    # very strange directory there when it fails an NFS symlink.
    ${remove} -r -f ${link}
    ${hard_link} ${srcfile} ${link}
  fi
  if test ! -r ${link} ; then
    echo '***' "${progname}: unable to link \"${link}\" to \"${srcfile}\"." 1>&2
    exit 1
  fi

  echo "Linked \"${link}\" to \"${srcfile}\"."
done

# Create a .gdbinit file which runs the one in srcdir
# and tells GDB to look there for source files.

if test -r ${srcdir}/.gdbinit ; then
  case ${srcdir} in
    .) ;;
    *) cat > ./.gdbinit <<EOF
# ${NO_EDIT}
dir ${srcdir}
dir .
source ${srcdir}/.gdbinit
EOF
    ;;
  esac
fi
a1169 1
we_are_ok=no
d1172 8
a1179 13
if test $? = 0 ; then
  if test -s conftest || test -s conftest.exe ; then
    we_are_ok=yes
  fi
fi 
case $we_are_ok in
  no)
    echo 1>&2 "*** The command '${CC} -o conftest ${CFLAGS} ${CPPFLAGS} ${LDFLAGS} conftest.c' failed."
    echo 1>&2 "*** You must set the environment variable CC to a working compiler."
    rm -f conftest*
    exit 1
    ;;
esac
d1186 1
a1186 1
      if test "`type $CCBASE | sed 's/^[[^/]]*//'`" = "/usr/ucb/cc" ; then
d1188 3
a1190 3
          test -d /opt/SUNWspro/bin && could_use="/opt/SUNWspro/bin"
          if test -d /opt/cygnus/bin ; then
              if test "$could_use" = "" ; then
d1196 1
a1196 1
        if test "$could_use" = "" ; then
d1212 12
a1223 93
case "${enable_shared}" in
  no | "") SET_LIB_PATH= ;;
  *) SET_LIB_PATH="\$(REALLY_SET_LIB_PATH)" ;;
esac

case "${host}" in
  *-*-hpux*) RPATH_ENVVAR=SHLIB_PATH ;;
  *) RPATH_ENVVAR=LD_LIBRARY_PATH ;;
esac

# Record target_configdirs and the configure arguments for target and
# build configuration in Makefile.
target_configdirs=`echo "${target_configdirs}" | sed -e 's/target-//g'`

# This is the final value for target_configdirs.  configdirs already
# has its final value.  It's time to create some lists of valid targets.

# While at that, we remove Makefiles if we were started for recursive
# configuration, such that the top-level Makefile reconfigures them,
# like we used to do when configure itself was recursive.

all_build_modules=
configure_build_modules=
# Only make build modules if build != host.
# This should be done more generally, but at the moment it doesn't matter.
if test ${host_alias} != ${build_alias} ; then
  for module in libiberty ; do
    all_build_modules=all-build-${module}
    configure_build_modules=configure-build-${module}
    if test -z "${no_recursion}" \
       && test -f ${build_subdir}/${module}/Makefile; then
      echo 1>&2 "*** removing ${build_subdir}/${module}/Makefile to force reconfigure"
      rm -f ${build_subdir}/${module}/Makefile
    fi
  done
fi

all_host_modules=
check_host_modules=
install_host_modules=
configure_host_modules=
for module in ${configdirs} ; do
  all_host_modules="${all_host_modules} all-${module}"
  check_host_modules="${check_host_modules} check-${module}"
  install_host_modules="${install_host_modules} install-${module}"
  configure_host_modules="${configure_host_modules} configure-${module}"
  if test -z "${no_recursion}" \
     && test -f ${module}/Makefile; then
    echo 1>&2 "*** removing ${module}/Makefile to force reconfigure"
    rm -f ${module}/Makefile
  fi
done
install_host_modules_nogcc=`echo "${install_host_modules}" | sed -e 's/install-gcc//g'`

all_target_modules=
check_target_modules=
install_target_modules=
configure_target_modules=
for module in ${target_configdirs} ; do
  all_target_modules="${all_target_modules} all-target-${module}"
  check_target_modules="${check_target_modules} check-target-${module}"
  install_target_modules="${install_target_modules} install-target-${module}"
  configure_target_modules="${configure_target_modules} configure-target-${module}"
  if test -z "${no_recursion}" \
     && test -f ${target_subdir}/${module}/Makefile; then
    echo 1>&2 "*** removing ${target_subdir}/${module}/Makefile to force reconfigure"
    rm -f ${target_subdir}/${module}/Makefile
  fi
done

# Determine whether gdb needs tk/tcl or not.
# Use 'maybe' since enable_gdbtk might be true even if tk isn't available
# and in that case we want gdb to be built without tk.  Ugh!
# In fact I believe gdb is the *only* package directly dependent on tk,
# so we should be able to put the 'maybe's in unconditionally and
# leave out the maybe dependencies when enable_gdbtk is false.  I'm not
# 100% sure that that's safe though.

gdb_tk="maybe-all-tcl maybe-all-tk maybe-all-itcl maybe-all-tix maybe-all-libgui"
case "$enable_gdbtk" in
  no)
    GDB_TK="" ;;
  yes)
    GDB_TK="${gdb_tk}" ;;
  *)
    # Only add the dependency on gdbtk when GDBtk is part of the gdb
    # distro.  Eventually someone will fix this and move Insight, nee
    # gdbtk to a separate directory.
    if test -d ${srcdir}/gdb/gdbtk ; then
      GDB_TK="${gdb_tk}"
    else
      GDB_TK=""
    fi
a1224 33
esac

# Create the 'maybe dependencies'.  This uses a temporary file.
rm -f maybedep.tmp
echo '# maybedep.tmp' > maybedep.tmp
for item in ${all_build_modules} ${all_host_modules} ${all_target_modules} \
	${install_host_modules} ${install_target_modules} \
	${configure_build_modules} ${configure_host_modules} ${configure_target_modules} \
	; do
  echo "maybe-${item}: ${item}" >> maybedep.tmp
done
maybe_dependencies=maybedep.tmp
AC_SUBST_FILE(maybe_dependencies)

# Create the serialization dependencies.  This uses a temporary file.

AC_ARG_ENABLE([serial-configure],
[  --disable-serial-[{host,target,build}-]configure
                          Don't force sequential configuration of
                          sub-packages for the host, target or build
			  machine, or of any sub-packages at all])

# These force 'configure's to be done one at a time, to avoid problems
# with contention over a shared config.cache.
rm -f serdep.tmp
echo '# serdep.tmp' > serdep.tmp
olditem=
test "x${enable_serial_configure}" = xno ||
test "x${enable_serial_build_configure}" = xno ||
for item in ${build_configdirs} ; do
  case ${olditem} in
    "") ;;
    *) echo "configure-build-${item}: configure-build-${olditem}" >> serdep.tmp ;;
d1226 1
a1226 24
  olditem=${item}
done
olditem=
test "x${enable_serial_configure}" = xno ||
test "x${enable_serial_host_configure}" = xno ||
for item in ${configdirs} ; do
  case ${olditem} in
    "") ;;
    *) echo "configure-${item}: configure-${olditem}" >> serdep.tmp ;;
  esac
  olditem=${item}
done
olditem=
test "x${enable_serial_configure}" = xno ||
test "x${enable_serial_target_configure}" = xno ||
for item in ${target_configdirs} ; do
  case ${olditem} in
    "") ;;
    *) echo "configure-target-${item}: configure-target-${olditem}" >> serdep.tmp ;;
  esac
  olditem=${item}
done
serialization_dependencies=serdep.tmp
AC_SUBST_FILE(serialization_dependencies)
d1228 8
a1235 36
# Base args.  Strip norecursion, cache-file, srcdir, host, build,
# target and nonopt.  These are the ones we might not want to pass
# down to subconfigures.
baseargs=`echo " ${ac_configure_args} " | \
	sed -e 's/ --no[[^ ]]* / /' \
	    -e 's/ --c[[a-z-]]*[[= ]][[^ ]]* / /' \
	    -e 's/ --sr[[a-z-]]*[[= ]][[^ ]]* / /' \
	    -e 's/ --ho[[a-z-]]*[[= ]][[^ ]]* / /' \
	    -e 's/ --bu[[a-z-]]*[[= ]][[^ ]]* / /' \
	    -e 's/ --t[[a-z-]]*[[= ]][[^ ]]* / /' \
	    -e 's/ -cache-file[[= ]][[^ ]]* / /' \
	    -e 's/ -srcdir[[= ]][[^ ]]* / /' \
	    -e 's/ -host[[= ]][[^ ]]* / /' \
	    -e 's/ -build[[= ]][[^ ]]* / /' \
	    -e 's/ -target[[= ]][[^ ]]* / /' \
	    -e "s/ [[^' -][^ ]*] / /" \
	    -e 's/^ *//;s/ *$//'`

# For the build-side libraries, we just need to pretend we're native,
# and not use the same cache file.  Multilibs are neither needed nor
# desired.
build_configargs="--cache-file=../config.cache --build=${build_alias} --host=${build_alias} ${baseargs}"

# For host modules, accept cache file option, or specification as blank.
case "${cache_file}" in
"") # empty
  cache_file_option="" ;;
/* | [[A-Za-z]]:[[\\/]]* ) # absolute path
  cache_file_option="--cache-file=${cache_file}" ;;
*) # relative path
  cache_file_option="--cache-file=../${cache_file}" ;;
esac

host_configargs="${cache_file_option} --build=${build_alias} --host=${host_alias} --target=${target_alias} ${extra_host_args} ${baseargs}"

target_configargs=${baseargs}
d1242 2
a1243 2
if test x${is_cross_compiler} = xyes ; then
  target_configargs="--with-cross-host=${host_alias} ${target_configargs}"
d1247 2
a1248 2
if test x${enable_multilib} = x ; then
  target_configargs="--enable-multilib ${target_configargs}"
d1253 2
a1254 2
if test x${with_newlib} != xno && echo " ${target_configdirs} " | grep " newlib " > /dev/null 2>&1 && test -d ${srcdir}/newlib ; then
  target_configargs="--with-newlib ${target_configargs}"
a1256 3
# Pass the appropriate --host, --build, and --cache-file arguments.
target_configargs="--cache-file=../config.cache --host=${target_alias} --build=${build_alias} ${target_configargs}"

d1259 1
a1259 1
# the gcc and libstdc++-v3 subdirectories.
d1261 24
a1284 13
case "${with_gxx_include_dir}" in
  yes)
    AC_MSG_ERROR([--with-gxx-include-dir=[[dir]] requires a directory])
    ;;
  no | "")
    case "${enable_version_specific_runtime_libs}" in
      yes) gxx_include_dir='${libsubdir}/include/c++' ;;
      *)
        . ${srcdir}/config.if
        gxx_include_dir='${prefix}/include/'${libstdcxx_incdir} ;;
    esac ;;
  *) gxx_include_dir=${with_gxx_include_dir} ;;
esac
d1287 3
a1289 4
case " $target_configdirs " in
 *" newlib "*)
  case " $target_configargs " in
  *" --with-newlib "*)
d1296 1
a1296 1
   if test -d ${srcdir}/gcc; then
d1318 4
a1321 13
   case "${target}-${is_cross_compiler}" in
   i[[3456]]86-*-linux*-no)
      # Here host == target, so we don't need to build gcc,
      # so we don't want to discard standard headers.
      FLAGS_FOR_TARGET=`echo " $FLAGS_FOR_TARGET " | sed -e 's/ -nostdinc / /'`
      ;;
   *)
      # If we're building newlib, use its generic headers last, but search
      # for any libc-related directories first (so make it the last -B
      # switch).
      FLAGS_FOR_TARGET=$FLAGS_FOR_TARGET' -B$$r/$(TARGET_SUBDIR)/newlib/ -isystem $$r/$(TARGET_SUBDIR)/newlib/targ-include -isystem $$s/newlib/libc/include'
      ;;
   esac
a1322 2
  esac
  ;;
d1329 1
a1329 1
if test "${build}" = "${host}" && test -d ${srcdir}/gcc; then
d1331 1
a1331 1
  FLAGS_FOR_TARGET=$FLAGS_FOR_TARGET' -B$(build_tooldir)/bin/ -B$(build_tooldir)/lib/ -isystem $(build_tooldir)/include -isystem $(build_tooldir)/sys-include'
d1334 3
a1336 2
if test "x${use_gnu_ld}" = x &&
   echo " ${configdirs} " | grep " ld " > /dev/null ; then
d1343 1
a1343 1
elif test -d ${srcdir}/gcc; then
d1348 1
a1348 1
  CC_FOR_TARGET=`echo gcc | sed "${program_transform_name}"`
d1350 6
a1355 1
CC_FOR_TARGET=$CC_FOR_TARGET' $(FLAGS_FOR_TARGET)'
d1357 1
a1357 1
if test "x${GCJ_FOR_TARGET+set}" = xset; then
d1359 2
a1360 2
elif test -d ${srcdir}/gcc; then
  GCJ_FOR_TARGET='$$r/gcc/gcj -B$$r/gcc/'
d1362 1
a1362 1
  GCJ_FOR_TARGET='gcj'
d1364 1
a1364 1
  GCJ_FOR_TARGET=`echo gcj | sed "${program_transform_name}"`
d1366 4
a1369 5
GCJ_FOR_TARGET=$GCJ_FOR_TARGET' $(FLAGS_FOR_TARGET)'

# Don't use libstdc++-v3's flags to configure/build itself.
libstdcxx_flags='`test ! -f $$r/$(TARGET_SUBDIR)/libstdc++-v3/testsuite_flags || $(SHELL) $$r/$(TARGET_SUBDIR)/libstdc++-v3/testsuite_flags --build-includes` -L$$r/$(TARGET_SUBDIR)/libstdc++-v3/src -L$$r/$(TARGET_SUBDIR)/libstdc++-v3/src/.libs'
raw_libstdcxx_flags=' -L$$r/$(TARGET_SUBDIR)/libstdc++-v3/src -L$$r/$(TARGET_SUBDIR)/libstdc++-v3/src/.libs'
d1373 1
a1373 6
elif test -d ${srcdir}/gcc; then
  # We add -shared-libgcc to CXX_FOR_TARGET whenever we use xgcc instead
  # of g++ for linking C++ or Java, because g++ has -shared-libgcc by
  # default whereas gcc does not.
  # RAW_CXX_FOR_TARGET is for linking C++ or java; CXX_FOR_TARGET is for
  # all other cases.
a1374 1
  RAW_CXX_FOR_TARGET='$$r/gcc/xgcc -shared-libgcc -B$$r/gcc/ -nostdinc++ '$raw_libstdcxx_flags
a1376 1
  RAW_CXX_FOR_TARGET=${CXX_FOR_TARGET}
d1378 1
a1378 2
  CXX_FOR_TARGET=`echo c++ | sed "${program_transform_name}"`
  RAW_CXX_FOR_TARGET=${CXX_FOR_TARGET}
d1380 18
a1397 2
CXX_FOR_TARGET=$CXX_FOR_TARGET' $(FLAGS_FOR_TARGET)'
RAW_CXX_FOR_TARGET=$RAW_CXX_FOR_TARGET' $(FLAGS_FOR_TARGET)'
d1399 5
a1403 153
qCXX_FOR_TARGET=`echo "$CXX_FOR_TARGET" | sed 's,[[&%]],\\\&,g'`
qRAW_CXX_FOR_TARGET=`echo "$RAW_CXX_FOR_TARGET" | sed 's,[[&%]],\\\&,g'`

# We want to defer the evaluation of `cmd`s and shell variables in
# CXX_FOR_TARGET when recursing in the top-level Makefile, such as for
# bootstrap.  We'll enclose CXX_FOR_TARGET_FOR_RECURSIVE_MAKE in single
# quotes, but we still have to duplicate `$'s so that shell variables
# can be expanded by the nested make as shell variables, not as make
# macros.
qqCXX_FOR_TARGET=`echo "$qCXX_FOR_TARGET" | sed -e 's,[[$]][[$]],$$$$,g'`
qqRAW_CXX_FOR_TARGET=`echo "$qRAW_CXX_FOR_TARGET" | sed -e 's,[[$]][[$]],$$$$,g'`

# Wrap CC_FOR_TARGET and friends, for certain types of builds.
CC_FOR_TARGET="\$(STAGE_CC_WRAPPER) ${CC_FOR_TARGET}"
GCJ_FOR_TARGET="\$(STAGE_CC_WRAPPER) ${GCJ_FOR_TARGET}"
CXX_FOR_TARGET="\$(STAGE_CC_WRAPPER) ${qCXX_FOR_TARGET}"
RAW_CXX_FOR_TARGET="\$(STAGE_CC_WRAPPER) ${qRAW_CXX_FOR_TARGET}"
CXX_FOR_TARGET_FOR_RECURSIVE_MAKE="\$(STAGE_CC_WRAPPER) ${qqCXX_FOR_TARGET}"
RAW_CXX_FOR_TARGET_FOR_RECURSIVE_MAKE="\$(STAGE_CC_WRAPPER) ${qqRAW_CXX_FOR_TARGET}"

# Makefile fragments.
host_makefile_frag=${srcdir}/${host_makefile_frag}
target_makefile_frag=${srcdir}/${target_makefile_frag}
alphaieee_frag=${srcdir}/${alphaieee_frag}
ospace_frag=${srcdir}/${ospace_frag}
AC_SUBST_FILE(host_makefile_frag)
AC_SUBST_FILE(target_makefile_frag)
AC_SUBST_FILE(alphaieee_frag)
AC_SUBST_FILE(ospace_frag)

# Miscellanea: directories, flags, etc.
AC_SUBST(SET_LIB_PATH)
AC_SUBST(RPATH_ENVVAR)
AC_SUBST(BUILD_PREFIX)
AC_SUBST(BUILD_PREFIX_1)
AC_SUBST(configlinks)
AC_SUBST(gcc_version_trigger)
AC_SUBST(gcc_version)
AC_SUBST(tooldir)
AC_SUBST(build_tooldir)
AC_SUBST(GDB_TK)
AC_SUBST(gxx_include_dir)
AC_SUBST(libstdcxx_incdir)

# Build module lists & subconfigure args.
AC_SUBST(build_subdir)
AC_SUBST(build_configargs)
AC_SUBST(configure_build_modules)
AC_SUBST(all_build_modules)

# Host module lists & subconfigure args.
AC_SUBST(host_configargs)
AC_SUBST(configdirs)
AC_SUBST(configure_host_modules)
AC_SUBST(all_host_modules)
AC_SUBST(check_host_modules)
AC_SUBST(install_host_modules)
AC_SUBST(install_host_modules_nogcc)

# Target module lists & subconfigure args.
AC_SUBST(target_subdir)
AC_SUBST(target_configargs)
AC_SUBST(target_configdirs)
AC_SUBST(configure_target_modules)
AC_SUBST(all_target_modules)
AC_SUBST(check_target_modules)
AC_SUBST(install_target_modules)

# Build tools.
AC_SUBST(BISON)
AC_SUBST(CC_FOR_BUILD)
AC_SUBST(LEX)
AC_SUBST(MAKEINFO)
AC_SUBST(YACC)
AC_SUBST(config_shell)

# Host tools.
NCN_STRICT_CHECK_TOOL(AR, ar)
NCN_STRICT_CHECK_TOOL(AS, as)
NCN_STRICT_CHECK_TOOL(DLLTOOL, dlltool)
NCN_STRICT_CHECK_TOOL(LD, ld)
NCN_STRICT_CHECK_TOOL(NM, nm)
NCN_STRICT_CHECK_TOOL(RANLIB, ranlib, :)
NCN_STRICT_CHECK_TOOL(WINDRES, windres)
NCN_STRICT_CHECK_TOOL(OBJCOPY, objcopy)
NCN_STRICT_CHECK_TOOL(OBJDUMP, objdump)
AC_SUBST(CC)
AC_SUBST(CXX)
AC_SUBST(CFLAGS)
AC_SUBST(CXXFLAGS)
AC_SUBST(DEFAULT_YACC)
AC_SUBST(DEFAULT_LEX)
AC_SUBST(DEFAULT_M4)

# Target tools.
NCN_STRICT_CHECK_TARGET_TOOL(AR_FOR_TARGET, ar)
NCN_STRICT_CHECK_TARGET_TOOL(AS_FOR_TARGET, as)
NCN_STRICT_CHECK_TARGET_TOOL(DLLTOOL_FOR_TARGET, dlltool)
NCN_STRICT_CHECK_TARGET_TOOL(LD_FOR_TARGET, ld)
NCN_STRICT_CHECK_TARGET_TOOL(NM_FOR_TARGET, nm)
NCN_STRICT_CHECK_TARGET_TOOL(RANLIB_FOR_TARGET, ranlib, :)
NCN_STRICT_CHECK_TARGET_TOOL(WINDRES_FOR_TARGET, windres)

AC_SUBST(GCC_FOR_TARGET)
AC_SUBST(FLAGS_FOR_TARGET)
AC_SUBST(CC_FOR_TARGET)
AC_SUBST(GCJ_FOR_TARGET)
AC_SUBST(CXX_FOR_TARGET)
AC_SUBST(RAW_CXX_FOR_TARGET)
AC_SUBST(CXX_FOR_TARGET_FOR_RECURSIVE_MAKE)
AC_SUBST(RAW_CXX_FOR_TARGET_FOR_RECURSIVE_MAKE)

# Fix up target tools.
if test "x${build}" = "x${host}" ; then
  # In this case, the newly built tools can and should be used,
  # so we override the results of the autoconf tests.
  # This should really only happen when the tools are actually being built,
  # but that's a further refinement.  The new build scheme, where
  # tools are built into a structure paralleling where they're installed,
  # should also eliminate all of this cleanly.
  AR_FOR_TARGET="\$(USUAL_AR_FOR_TARGET)"
  AS_FOR_TARGET="\$(USUAL_AS_FOR_TARGET)"
  DLLTOOL_FOR_TARGET="\$(USUAL_DLLTOOL_FOR_TARGET)"
  LD_FOR_TARGET="\$(USUAL_LD_FOR_TARGET)"
  NM_FOR_TARGET="\$(USUAL_NM_FOR_TARGET)"
  RANLIB_FOR_TARGET="\$(USUAL_RANLIB_FOR_TARGET)"
  WINDRES_FOR_TARGET="\$(USUAL_WINDRES_FOR_TARGET)"
fi
# Certain tools may need extra flags.
AR_FOR_TARGET=${AR_FOR_TARGET}${extra_arflags_for_target}
RANLIB_FOR_TARGET=${RANLIB_FOR_TARGET}${extra_ranlibflags_for_target}
NM_FOR_TARGET=${NM_FOR_TARGET}${extra_nmflags_for_target}

AC_MSG_CHECKING([whether to enable maintainer-specific portions of Makefiles])
AC_ARG_ENABLE(maintainer-mode,
[  --enable-maintainer-mode enable make rules and dependencies not useful
                          (and sometimes confusing) to the casual installer],
      USE_MAINTAINER_MODE=$enableval,
      USE_MAINTAINER_MODE=no)
AC_MSG_RESULT($USE_MAINTAINER_MODE)
AC_SUBST(MAINTAINER_MODE_TRUE)
AC_SUBST(MAINTAINER_MODE_FALSE)
if test "$USE_MAINTAINER_MODE" = yes; then
  MAINTAINER_MODE_TRUE=
  MAINTAINER_MODE_FALSE='#'
else
  MAINTAINER_MODE_TRUE='#'
  MAINTAINER_MODE_FALSE=
fi	
MAINT=$MAINTAINER_MODE_TRUE
AC_SUBST(MAINT)dnl

AC_OUTPUT(Makefile)
@


1.1.1.10
log
@Binutils 2.15, with testsuites removed, and without gdb and libiberty.
@
text
@d2 1
a2 1
#   1999, 2000, 2001, 2002, 2003, 2004 Free Software Foundation, Inc.
a25 3
# Get 'install' or 'install-sh' and its variants.
AC_PROG_INSTALL

d66 2
a67 8
# Export original configure arguments for use by sub-configures.  These
# will be expanded by make, so quote '$'.
tmp="$progname $@@"
sed -e 's,\$,$$,g' <<EOF_SED > conftestsed.out
$tmp
EOF_SED
TOPLEVEL_CONFIGURE_ARGUMENTS=`cat conftestsed.out`
rm -f conftestsed.out
d139 1
a139 1
target_libraries="target-libiberty \
d145 1
a145 2
		target-libobjc \
		target-libada"
d147 2
a148 2
# these tools are built using the target libraries, and are intended to
# run only in the target environment
d150 1
a150 1
# note: any program that *uses* libraries that are in the "target_libraries"
d165 1
a165 11
target_configdirs=`echo ${target_libraries} ${target_tools}`

# Only make build modules if build != host.
# This should be done more generally, but at the moment it doesn't matter.
if test ${host_alias} != ${build_alias} ; then
  # This is the only build module.
  build_modules=libiberty
else
  build_modules=
fi

d182 24
a205 2
# Find the build and target subdir names.
GCC_TOPLEV_SUBDIRS
d254 1
a254 2
if test x"${with_headers}" != x && test x"${with_headers} != xno \
   && test x"${with_libs}" != x && test x"${with_libs} != xno ; then
d281 2
a282 2
  i[[3456789]]86-*-vsta)
    noconfigdirs="$noconfigdirs tcl expect dejagnu make texinfo bison patch flex byacc send-pr gprof uudecode dejagnu diff guile perl itcl tix gnuserv gettext"
d284 2
a285 2
  i[[3456789]]86-*-go32* | i[[3456789]]86-*-msdosdjgpp*)
    noconfigdirs="$noconfigdirs tcl tk expect dejagnu send-pr uudecode guile itcl tix gnuserv libffi"
d287 1
a287 1
  i[[3456789]]86-*-mingw32*)
d289 1
a289 1
    noconfigdirs="$noconfigdirs expect dejagnu autoconf automake send-pr rcs guile perl texinfo libtool"
d291 1
a291 1
  i[[3456789]]86-*-beos*)
d295 1
a295 1
    noconfigdirs="$noconfigdirs autoconf automake send-pr rcs guile perl"
d298 1
a298 1
    noconfigdirs="$noconfigdirs rcs"
d301 1
a301 1
    noconfigdirs="$noconfigdirs patch diff make tk tcl expect dejagnu autoconf automake texinfo bison send-pr gprof rcs guile perl itcl tix gnuserv"
a310 8
AC_ARG_ENABLE(libada,
[  --enable-libada        Builds libada directory],
ENABLE_LIBADA=$enableval,
ENABLE_LIBADA=yes)
if test "${ENABLE_LIBADA}" != "yes" ; then
  noconfigdirs="$noconfigdirs target-libada"
fi

a330 4
  powerpc-*-darwin*)
    noconfigdirs="$noconfigdirs bfd binutils ld gas opcodes gdb gprof"
    noconfigdirs="$noconfigdirs target-libobjc"
    ;;
a369 3
  *-*-uclinux*)
    noconfigdirs="$noconfigdirs target-newlib target-libgloss target-rda ${libgcj}"
    ;;
d371 1
a371 1
    noconfigdirs="$noconfigdirs target-newlib target-libgloss target-libiberty ${libgcj}"
d386 1
a386 1
  alpha*-*-freebsd* | alpha*-*-kfreebsd*-gnu)
a392 3
  am33_2.0-*-linux*)
    noconfigdirs="$noconfigdirs ${libgcj} target-newlib target-libgloss"
    ;;
d451 1
a451 1
    noconfigdirs="$noconfigdirs ${libgcj} target-newlib target-libgloss"
d457 1
a457 1
    noconfigdirs="$noconfigdirs ${libgcj} gdb"
d460 1
a460 1
    noconfigdirs="$noconfigdirs ${libgcj} gdb"
d466 1
a466 1
    noconfigdirs="$noconfigdirs target-libgloss ${libgcj} target-libf2c"
a489 3
  i960-*-*)
    noconfigdirs="$noconfigdirs ${libgcj} gdb"
    ;;
d496 1
a496 1
    noconfigdirs="$noconfigdirs ${libgcj} tix readline mmalloc libgui itcl gdb ld"
d498 1
a498 1
  i[[3456789]]86-*-coff | i[[3456789]]86-*-elf)
d501 1
a501 1
  i[[3456789]]86-*-freebsd* | i[[3456789]]86-*-kfreebsd*-gnu)
d504 1
a504 1
  i[[3456789]]86-*-linux*)
d523 1
a523 1
  i[[3456789]]86-*-mingw32*)
d529 1
a529 1
      i[[3456789]]86-*-mingw32) ;; # keep gdb tcl tk expect etc.
d547 1
a547 1
  i[[3456789]]86-*-pe)
d550 1
a550 1
  i[[3456789]]86-*-sco3.2v5*)
d555 1
a555 1
  i[[3456789]]86-*-sco*)
d558 1
a558 1
  i[[3456789]]86-*-solaris2*)
d561 1
a561 1
  i[[3456789]]86-*-sysv4*)
d564 1
a564 1
  i[[3456789]]86-*-beos*)
a566 3
  m32r-*-*)
    noconfigdirs="$noconfigdirs ${libgcj}"
    ;;
d592 1
a592 1
    noconfigdirs="$noconfigdirs gprof target-libada target-libgloss ${libgcj}"
d614 1
a614 1
    noconfigdirs="$noconfigdirs gprof target-libada target-libgloss ${libgcj}"
d623 2
a624 1
    noconfigdirs="$noconfigdirs gprof target-libgloss ${libgcj}"
d653 3
a655 3
      i[[3456789]]86-*-vsta) ;; # don't add gprof back in
      i[[3456789]]86-*-go32*) ;; # don't add gprof back in
      i[[3456789]]86-*-msdosdjgpp*) ;; # don't add gprof back in
a699 3
  xtensa-*-*)
    noconfigdirs="$noconfigdirs ${libgcj}"
    ;;
d746 3
a748 2
for lang_frag in ${srcdir}/gcc/*/config-lang.in .. ; do
  case ${lang_frag} in
d754 4
a757 5
      # From the config-lang.in, get $language, $lang_requires
      language=
      lang_requires=
      . ${lang_frag}
      for other in ${lang_requires} ; do
d761 3
a763 3
	  *,$language,*)
	    echo " \`$other' language required by \`$language'; enabling" 1>&2
	    enable_languages="${enable_languages},${other}"
d771 4
a774 2
for lang_frag in ${srcdir}/gcc/*/config-lang.in .. ; do
  case ${lang_frag} in
d780 7
a786 9
      # From the config-lang.in, get $language, $target_libs, 
      # $lang_dirs, and $build_by_default
      language=
      target_libs=
      lang_dirs=
      build_by_default=
      . ${lang_frag}
      if test "x$language" = x ; then
        echo "${lang_frag} doesn't set \$language." 1>&2
d789 4
a792 12
      case ,${enable_languages}, in
        *,${language},*)
          # Language was explicitly selected; include it.
          add_this_lang=yes
          ;;
        *,all,*)
          # 'all' was selected; include 'default' languages.
          case ${build_by_default} in
            no) add_this_lang=no ;;
            *) add_this_lang=yes ;;
          esac 
          ;;
d795 5
a799 6
      case ${add_this_lang} in
        no)
          # Remove language-dependent dirs.
          eval noconfigdirs='"$noconfigdirs "'\"$target_libs $lang_dirs\"
          ;;
      esac
d913 1
a913 1
if test x"${with_headers}" != x && test x"${with_headers}" != xno ; then
d930 1
a930 1
if test x"${with_libs}" != x && test x"${with_libs}" != xno ; then
d1050 1
a1050 1
  i[[3456789]]86-*-sysv5*)
d1053 1
a1053 1
  i[[3456789]]86-*-dgux*)
d1057 1
a1057 1
  i[[3456789]]86-ncr-sysv4.3*)
d1062 1
a1062 1
  i[[3456789]]86-ncr-sysv4*)
d1071 1
a1071 1
  i[[3456789]]86-*-sco3.2v5*)
d1073 1
a1073 1
  i[[3456789]]86-*-sco*)
d1079 1
a1079 1
  i[[3456789]]86-*-udk*)
d1082 1
a1082 1
  i[[3456789]]86-*-solaris2*)
d1085 1
a1085 1
  i[[3456789]]86-*-msdosdjgpp*)
d1135 1
a1135 1
  i[[3456789]]86-*-netware*)
d1227 5
a1231 1
  mips*-*-irix[[56]]*)
d1269 1
a1269 1
tooldir='${exec_prefix}'/${target_alias}
d1607 5
a1611 2
# has its final value, as does build_modules.  It's time to create some 
# lists of valid targets.
d1615 45
a1659 3
for module in ${build_modules} ; do
  all_build_modules=all-build-${module}
  configure_build_modules=configure-build-${module}
a1688 4

# While at that, we remove Makefiles if we were started for recursive
# configuration, so that the top-level Makefile reconfigures them,
# like we used to do when configure itself was recursive.
d1691 5
a1695 38

# Make-targets which may need maybe dependencies.
mts="configure all install check clean distclean dvi info install-info"
mts="${mts} installcheck mostlyclean maintainer-clean TAGS"

# Loop over modules and make-targets.
for module in ${build_modules} ; do
  if test -z "${no_recursion}" \
     && test -f ${build_subdir}/${module}/Makefile; then
    echo 1>&2 "*** removing ${build_subdir}/${module}/Makefile to force reconfigure"
    rm -f ${build_subdir}/${module}/Makefile
  fi
  for mt in ${mts} ; do
    case ${mt} in
      install) ;; # No installing build modules.
      *) echo "maybe-${mt}-build-${module}: ${mt}-build-${module}" >> maybedep.tmp ;;
    esac
  done
done
for module in ${configdirs} ; do
  if test -z "${no_recursion}" \
     && test -f ${module}/Makefile; then
    echo 1>&2 "*** removing ${module}/Makefile to force reconfigure"
    rm -f ${module}/Makefile
  fi
  for mt in ${mts} ; do
    echo "maybe-${mt}-${module}: ${mt}-${module}" >> maybedep.tmp
  done
done
for module in ${target_configdirs} ; do
  if test -z "${no_recursion}" \
     && test -f ${target_subdir}/${module}/Makefile; then
    echo 1>&2 "*** removing ${target_subdir}/${module}/Makefile to force reconfigure"
    rm -f ${target_subdir}/${module}/Makefile
  fi
  for mt in ${mts} ; do
    echo "maybe-${mt}-target-${module}: ${mt}-target-${module}" >> maybedep.tmp
  done
d1703 2
a1704 2
[  --enable-serial-[{host,target,build}-]configure
                          Force sequential configuration of
d1706 1
a1706 9
			  machine, or all sub-packages])

case ${enable_serial_configure} in
  yes)
    enable_serial_build_configure=yes
    enable_serial_host_configure=yes
    enable_serial_target_configure=yes
    ;;
esac
d1713 2
a1714 1
test "x${enable_serial_build_configure}" = xyes &&
d1723 2
a1724 1
test "x${enable_serial_host_configure}" = xyes &&
d1733 2
a1734 1
test "x${enable_serial_target_configure}" = xyes &&
d1747 15
a1761 47
# down to subconfigures.  Also strip program-prefix, program-suffix,
# and program-transform-name, so that we can pass down a consistent
# program-transform-name.  If autoconf has put single quotes around
# any of these arguments (because they contain shell metacharacters)
# then this will fail; in practice this only happens for
# --program-transform-name, so be sure to override --program-transform-name
# at the end of the argument list.
# These will be expanded by make, so quote '$'.
cat <<\EOF_SED > conftestsed
s/ --no[[^ ]]* / /
s/ --c[[a-z-]]*[[= ]][[^ ]]* / /
s/ --sr[[a-z-]]*[[= ]][[^ ]]* / /
s/ --ho[[a-z-]]*[[= ]][[^ ]]* / /
s/ --bu[[a-z-]]*[[= ]][[^ ]]* / /
s/ --t[[a-z-]]*[[= ]][[^ ]]* / /
s/ --program-[[pst]][[a-z-]]*[[= ]][[^ ]]* / /
s/ -cache-file[[= ]][[^ ]]* / /
s/ -srcdir[[= ]][[^ ]]* / /
s/ -host[[= ]][[^ ]]* / /
s/ -build[[= ]][[^ ]]* / /
s/ -target[[= ]][[^ ]]* / /
s/ -program-prefix[[= ]][[^ ]]* / /
s/ -program-suffix[[= ]][[^ ]]* / /
s/ -program-transform-name[[= ]][[^ ]]* / /
s/ [[^' -][^ ]*] / /
s/^ *//;s/ *$//
s,\$,$$,g
EOF_SED
sed -f conftestsed <<EOF_SED > conftestsed.out
 ${ac_configure_args} 
EOF_SED
baseargs=`cat conftestsed.out`
rm -f conftestsed conftestsed.out

# Add in --program-transform-name, after --program-prefix and
# --program-suffix have been applied to it.  Autoconf has already
# doubled dollar signs and backslashes in program_transform_name; we want
# the backslashes un-doubled, and then the entire thing wrapped in single
# quotes, because this will be expanded first by make and then by the shell. 
# Also, because we want to override the logic in subdir configure scripts to
# choose program_transform_name, replace any s,x,x, with s,y,y,.
sed -e "s,\\\\\\\\,\\\\,g; s,','\\\\'',g; s/s,x,x,/s,y,y,/" <<EOF_SED > conftestsed.out
${program_transform_name}
EOF_SED
gcc_transform_name=`cat conftestsed.out`
rm -f conftestsed.out
baseargs="$baseargs --program-transform-name='${gcc_transform_name}'"
d1778 1
a1778 3
# Host dirs don't like to share a cache file either, horribly enough.
# This seems to be due to autoconf 2.5x stupidity.
host_configargs="--cache-file=./config.cache --build=${build_alias} --host=${host_alias} --target=${target_alias} ${extra_host_args} ${baseargs}"
a1801 9
# Different target subdirs use different values of certain variables
# (notably CXX).  Worse, multilibs use *lots* of different values.
# Worse yet, autoconf 2.5x makes some of these 'precious', meaning that
# it doesn't automatically accept command-line overrides of them.
# This means it's not safe for target subdirs to share a cache file,
# which is disgusting, but there you have it.  Hopefully this can be
# fixed in future.  It's still worthwhile to use a cache file for each
# directory.  I think.

d1803 1
a1803 1
target_configargs="--cache-file=./config.cache --host=${target_alias} --build=${build_alias} ${target_configargs}"
d1830 1
a1830 1
     FLAGS_FOR_TARGET=$FLAGS_FOR_TARGET' -L$$r/$(TARGET_SUBDIR)/winsup -L$$r/$(TARGET_SUBDIR)/winsup/cygwin -L$$r/$(TARGET_SUBDIR)/winsup/w32api/lib -isystem $$s/winsup/include -isystem $$s/winsup/cygwin/include -isystem $$s/winsup/w32api/include' ;;
d1857 1
a1857 1
   i[[3456789]]86-*-linux*-no)
a1873 4
# Allow the user to override the flags for
# our build compiler if desired.
CFLAGS_FOR_BUILD=${CFLAGS_FOR_BUILD-${CFLAGS}}

d1912 2
a1913 2
libstdcxx_flags='`test ! -f $$r/$(TARGET_SUBDIR)/libstdc++-v3/scripts/testsuite_flags || $(SHELL) $$r/$(TARGET_SUBDIR)/libstdc++-v3/scripts/testsuite_flags --build-includes` -L$$r/$(TARGET_SUBDIR)/libstdc++-v3/src -L$$r/$(TARGET_SUBDIR)/libstdc++-v3/src/.libs'
raw_libstdcxx_flags='-L$$r/$(TARGET_SUBDIR)/libstdc++-v3/src -L$$r/$(TARGET_SUBDIR)/libstdc++-v3/src/.libs'
d1916 1
a1916 3
  if test "x${RAW_CXX_FOR_TARGET+set}" != xset; then
    RAW_CXX_FOR_TARGET=${CXX_FOR_TARGET}
  fi
d1980 1
d1988 5
d1995 1
d1998 4
a2023 1
AC_SUBST(CFLAGS_FOR_BUILD)
@


