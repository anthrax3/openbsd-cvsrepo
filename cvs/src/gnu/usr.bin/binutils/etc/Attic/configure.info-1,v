head	1.2;
access;
symbols
	BINUTILS-2_10_1:1.1.1.3
	BINUTILS-2_8_1:1.1.1.2
	CYGNUS:1.1.1
	FSF_2_6:1.1.1.1
	FSF:1.1.1;
locks; strict;
comment	@# @;


1.2
date	96.06.10.10.49.45;	author niklas;	state dead;
branches;
next	1.1;

1.1
date	96.01.08.11.10.22;	author niklas;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	96.01.08.11.10.22;	author niklas;	state Exp;
branches;
next	1.1.1.2;

1.1.1.2
date	97.05.29.09.30.20;	author niklas;	state Exp;
branches;
next	1.1.1.3;

1.1.1.3
date	2001.06.09.22.09.26;	author espie;	state Exp;
branches;
next	;


desc
@@


1.2
log
@Bring Cygnus versions into the trunk, keeping our local patches
@
text
@This is Info file configure.info, produced by Makeinfo-1.55 from the
input file ./configure.texi.

START-INFO-DIR-ENTRY
* configure: (configure).        Cygnus configure.
END-INFO-DIR-ENTRY

   This document describes the Cygnus Support version of `configure'.

   Copyright (C) 1991, 1992, 1993 Cygnus Support Permission is granted
to make and distribute verbatim copies of this manual provided the
copyright notice and this permission notice are preserved on all copies.

   Permission is granted to copy and distribute modified versions of
this manual under the conditions for verbatim copying, provided that
the entire resulting derived work is distributed under the terms of a
permission notice identical to this one.

   Permission is granted to copy and distribute translations of this
manual into another language, under the above conditions for modified
versions, except that this permission notice may be stated in a
translation approved by Cygnus Support.


File: configure.info,  Node: Top,  Next: What configure does,  Prev: (DIR),  Up: (DIR)

Cygnus configure
****************

   This file documents the configuration system used and distributed by
Cygnus Support.

* Menu:

* What configure does::    What configure does
* Invoking configure::     Invoking configure--basic usage
* Using configure::        More than you ever wanted to know
* Porting::                How to use configure with new programs
* Variables Index::
* Concept Index::


File: configure.info,  Node: What configure does,  Next: Invoking configure,  Prev: Top,  Up: Top

What `configure' does
*********************

   This manual documents Cygnus `configure', a program which helps to
automate much of the setup activity associated with building large
suites of programs, such the Cygnus Support Developer's Kit.  This
manual is therefore geared toward readers who are likely to face the
problem of configuring software in source form before compiling and
installing it.  We assume you are an experienced programmer or system
administrator.  For further background on this topic, see *Note
Apologia Configure: (cfg-paper)Some Basic Terms, by K. Richard Pixley.

   When `configure' runs, it does the following things:

** creates build directories*
     When you run `configure' with the `--srcdir' option, it uses the
     current directory as the "build directory", creating under it a
     directory tree that parallels the directory structure of the
     source directory.  If you don't specify a `srcdir', `configure'
     first assumes that the source code you wish to configure is in
     your current directory; if it finds no `configure.in' input file
     there, it searches in the directory `configure' itself lies in.
     (For details, see *Note Build directories: Build directories.)

** generates `Makefile'*
     A `Makefile' template from the source directory, usually called
     `Makefile.in', is copied to an output file in the build directory
     which is most often named `Makefile'.  `configure' places
     definitions for a number of standard `Makefile' macros at the
     beginning of the output file.  If `--prefix=DIR' or
     `--exec_prefix=DIR' are specified on the `configure' command line,
     corresponding `Makefile' variables are set accordingly.  If host,
     target, or site-specific `Makefile' fragments exist, these are
     inserted into the output file.  (For details, see *Note `Makefile'
     generation: Makefile generation.)

** generates `.gdbinit'*
     If the source directory contains a `.gdbinit' file and the build
     directory is not the same as the source directory, a `.gdbinit'
     file is created in the build directory.  This `.gdbinit' file
     contains commands which allow the source directory to be read when
     debugging with the GNU debugger, `gdb'.  (*Note Command Files:
     (gdb)Command Files.)

** makes symbolic links*
     Most build directories require that some symbolic links with
     generic names are built pointing to specific files in the source
     directory.  If the system where `configure' runs cannot support
     symbolic links, hard links are used instead.  (For details, see
     *Note The `configure.in' input file: configure.in.)

** generates `config.status'*
     `configure' creates a shell script named `config.status' in the
     build directory.  This shell script, when run from the build
     directory (usually from within a `Makefile'), will reconfigure the
     build directory (but not its subdirectories).  This is most often
     used to have a `Makefile' update itself automatically if a new
     source directory is available.

** calls itself recursively*
     If the source directory has subdirectories that should also be
     configured, `configure' is called for each.


File: configure.info,  Node: Invoking configure,  Next: Using configure,  Prev: What configure does,  Up: Top

Invoking `configure'
********************

   Cygnus `configure' is a shell script which resides in a source tree.
The usual way to invoke `configure' is from the shell, as follows:

     eg$ ./configure HOSTTYPE

This prepares the source in the current directory (`.') to be compiled
for a HOSTTYPE environment.  It assumes that you wish to build programs
and files in the default "build directory" (also the current directory,
`.').  If you do not specify a value for HOSTTYPE, Cygnus `configure'
will attempt to discover this information by itself (*note Determining
system information: config.guess.).  For information on HOSTTYPE
environments, *Note Host: Host.

   All GNU software is packaged with one or more `configure' script(s)
(*note How Configuration Should Work: (standards)Configuration.).  By
using `configure' you prepare the source for your specific environment
by selecting and using `Makefile' fragments and fragments of shell
scripts, which are prepared in advance and stored with the source.

   `configure''s command-line options also allow you to specify other
aspects of the source configuration:

       configure HOSTTYPE  [--target=TARGET] [--srcdir=DIR] [--rm]
                 [--site=SITE] [--prefix=DIR] [--exec-prefix=DIR]
                 [--program-prefix=STRING] [--tmpdir=DIR]
                 [--with-PACKAGE[=YES/NO]] [--without-PACKAGE]
                 [--enable-FEATURE[=YES/NO]] [--disable-FEATURE]
                 [--norecursion] [--nfp] [-s] [-v] [-V | --version] [--help]

`--target=TARGET'
     Requests that the sources be configured to target the TARGET
     machine.  If no target is specified explicitly, the target is
     assumed to be the same as the host (i.e., a "native"
     configuration).  *Note Host: Host, and *Note Target: Target, for
     discussions of each.

`--srcdir=DIR'
     Direct each generated `Makefile' to use the sources located in
     directory DIR.  Use this option whenever you wish the object code
     to reside in a different place from the source code.  The "build
     directory" is always assumed to be the directory you call
     `configure' from.  See *Note Build directories: Build directories,
     for an example.  If the source directory is not specified,
     `configure' assumes that the source is in your current directory.
     If `configure' finds no `configure.in' there, it searches in the
     same directory that the `configure' script itself lies in.
     Pathnames specified (Values for DIR) can be either absolute
     relative to the *build* directory.

`--rm'
     *Remove* the configuration specified by HOSTTYPE and the other
     command-line options, rather than create it.

          *Note:* We recommend that you use `make distclean' rather than
          use this option; see *Note Invoking `make': (make)Invoking
          make, for details on `make distclean'.

`--site=SITE'
     Generate the `Makefile' using site-specific `Makefile' fragments
     for SITE.  *Note Adding information about local conventions:
     Makefile fragments.

`--prefix=DIR'
     Configure the source to install programs and files under directory
     DIR.

     This option sets the variable `prefix'.  Each generated `Makefile'
     will have its `prefix' variables set to this value.  (*Note What
     `configure' really does: What configure really does.)

`--exec-prefix=DIR'
     Configure the source to install "host dependent" files in DIR.

     This option sets the variable `exec_prefix'.  Each generated
     `Makefile' will have its `exec_prefix' variables set to this value.
     (*Note What `configure' really does: What configure really does.)

`--program-prefix=STRING'
     Configure the source to install certain programs using STRING as a
     prefix.  This applies to programs which might be used for
     cross-compilation, such as the compiler and the binary utilities,
     and also to programs which have the same names as common Unix
     programs, such as `make'.

     This option sets the variable `program_prefix'.  Each generated
     `Makefile' will have its `program_prefix' variables set to this
     value.  (*Note What `configure' really does: What configure really
     does.)

`--tmpdir=TMPDIR'
     Use the directory TMPDIR for `configure''s temporary files.  The
     default is the value of the environment variable `TMPDIR', or
     `/tmp' if the environment variable is not set.

`--with-PACKAGE[=YES/NO]'
`--without-PACKAGE'
     Indicate that PACKAGE is present, or not present, depending on
     YES/NO.  If YES/NO is nonexistent, its value is assumed to be
     `yes'.  `--without-PACKAGE' is equivalent to `--with-PACKAGE=no'.

     For example, if you wish to configure the program `gcc' for a Sun
     SPARCstation running SunOS 4.x, and you want `gcc' to use the GNU
     linker `ld', you can configure `gcc' using

          eg$ configure --with-gnu-ld sun4

     *Note What `configure' really does: What configure really does, for
     details.  See the installation or release notes for your
     particular package for details on which other PACKAGE options are
     recognized.

`--enable-FEATURE[=YES/NO]'
`--disable-FEATURE'
     Include FEATURE, or not, depending on YES/NO.  If YES/NO is
     nonexistent, its value is assumed to be `yes'.
     `--disable-FEATURE' is equivalent to `--enable-FEATURE=no'.

     *Note What `configure' really does: What configure really does, for
     details.  See the installation or release notes for your
     particular package for details on which other FEATURE options are
     recognized.

`--norecursion'
     Configure only this directory; ignore any subdirectories.  This is
     used by the executable shell script `config.status' to reconfigure
     only the current directory; it is most often used
     non-interactively, when `make' is invoked.  (*Note
     `config.status': config.status.)

`--nfp'
     Assume that the intended HOSTTYPE has no floating point unit.

`-s'
     Suppress status output.  This option is used internally by
     `configure' when calling itself recursively in subdirectories.  You
     can override this option with the `--verbose' option.

`-v'
`--verbose'
     Print status lines for each directory configured.  Normally, only
     the status lines for the initial working directory are printed.

`--version'
`-V'
     Print the `configure' version number.

`--help'
     Print a short summary of how to invoke `configure'.

   *Note:* You may introduce options with a single dash, `-', rather
than two dashes, `--'.  However, you may not be able to truncate long
option names when using a single dash.  When using two dashes, options
may be abbreviated as long as each option can be uniquely identified.
For example,
     eg$ configure --s=/u/me/src HOSTTYPE

is ambiguous, as `--s' could refer to either `--site' or `--srcdir'.
However,
     eg$ configure --src=/u/me/src HOSTTYPE

is a valid abbreviation.


File: configure.info,  Node: Using configure,  Next: Porting,  Prev: Invoking configure,  Up: Top

Using `configure'
*****************

   `configure' prepares source directories for building programs in
them.  "Configuring" is the process of preparing software to compile
correctly on a given "host", for a given "target".

   `configure' subsequently writes a configured `Makefile' from a
pre-built template; `configure' uses variables that have been set in the
configuring process to determine the values of some variables in the
`Makefile'.  Because of this we will refer to both `configure'
variables and `Makefile' variables.  This convention allows us to
determine where the variable should be set initially, in either
`configure.in' or `Makefile.in'.

* Menu:

* What configure really does:: What configure really does
* configure.in::               The configure.in input file
* Install locations::          Where to install things once they are built
* Host::                       Telling configure what will source will be built
* Target::                     Telling configure what the source will target
* Makefile fragments::         Adding information about local conventions
* Makefile extensions::        Extensions to the GNU coding standards


File: configure.info,  Node: What configure really does,  Next: configure.in,  Up: Using configure

What `configure' really does
============================

   Cygnus `configure' is a shell script that sets up an environment in
which your programs will compile correctly for your machine and
operating system, and will install in proper places.  `configure'
accomplishes this task by doing the following:

   * it generates a `Makefile' from a custom template called
     `Makefile.in' in each relevant source directory;

   * it customizes the build process to your specifications; you set
     certain variables for `configure', either on the command line or
     in the file `configure.in', which subsequently sets variables in
     each generated `Makefile' to be used by `make' when actually
     building the software;

   * it creates "build directories", places for your code to be compiled
     in before being installed;

   * it generates a `.gdbinit' in the build directory, if needed, to
     communicate to `gdb' where to find the program's source code;

   * it generates a shell script called `config.status' which is used
     most often by the `Makefile' to reconfigure itself;

   * it recurses in subdirectories, setting up entire trees so that
     they build correctly; if `configure' finds another `configure'
     script further down in a given source tree, it knows to use this
     script and not recur.

   For the sake of safety (i.e., in order to prevent broken
installations), the GNU coding standards call for software to be
"configured" in such a way that an end user trying to build a given
package will be able to do so by affecting a finite number of
variables.  All GNU software comes with an executable `configure' shell
script which sets up an environment within a build directory which will
correctly compile your new package for your host (or, alternatively,
whatever host you specify to `configure').  For further background on
this topic, see *Note Apologia Configure: (cfg-paper)Some Basic Terms,
by K. Richard Pixley.

   Use `configure' to set for the build process:

   * correct values for certain variables;

   * which type of host you wish to configure a given package for
     (*note Host: Host.);

   * where you want to install this package (by using `prefix',
     `exec-prefix' and `program-prefix'; *note Full descriptions of all
     installation directories: Install details.);

   * optionally, which type of machine you wish to "target" this
     package's output to (*note Target: Target.);

   * which other GNU packages are already installed and available to
     this particular build (by using the `--with-PACKAGE' option; *note
     Invoking `configure': Invoking configure.);

   * where to place temporary files (by using the `--tmpdir=DIR'
     option; *note Invoking `configure': Invoking configure.);

   * whether to recur in subdirectories (changeable through the
     `--norecursion' option; *note Invoking `configure': Invoking
     configure.).

   `configure' uses a few other files to complete its tasks.  These are
discussed in detail where noted.

`configure.in'
     Input file for `configure'.  Shell script fragments reside here.
     *Note The `configure.in' input file: configure.in.

`Makefile.in'
     Template which `configure' uses to build a file called `Makefile'
     in the "build directory".  *Note `Makefile' generation: Makefile
     generation.

`config.sub'
     Shell script used by `configure' to expand referents to the
     HOSTTYPE argument into a single specification of the form
     CPU-VENDOR-OS.  For instance, on the command line you can specify

          eg$ ./configure sun4

     to configure for a Sun SPARCstation running SunOS 4.x.  `configure'
     consults `config.sub' to find that the three-part specification
     for this is

          sparc-sun-sunos4.1.1

     which notes the CPU as `sparc', the MANUFACTURER as `sun' (Sun
     Microsystems), and the OS (operating system) as `sunos4.1.1', the
     SunOS 4.1.1 release.  *Note Variables available to `configure':
     configure variables.

`config.guess'
     If you do not put the HOSTTYPE argument on the command line,
     `configure' uses the `config.guess' shell script to make an
     analysis of your machine (it assumes that you wish to configure
     your software for the type of machine on which you are running).
     The output of `config.guess' is a three-part identifier as
     described above.

`config.status'
     The final step in configuring a directory is to create a shell
     script, `config.status'.  The main purpose of this file is to
     allow the `Makefile' for the current directory to rebuild itself,
     if necessary.  *Note `config.status': config.status.

`config/*'
     `configure' uses three types of `Makefile' "fragments", which
     reside in the directory `SRCDIR/config/'.  *Note Adding
     information about local conventions: Makefile fragments.

* Menu:

* Build variables::         Variable-spaghetti made simple
* Build directories::       Build directories described well
* Makefile generation::     To build a Makefile
* config.guess::            Be vewwy quiet, I'm hunting system information
* config.status::           To rebuild a Makefile


File: configure.info,  Node: Build variables,  Next: Build directories,  Up: What configure really does

Build variables
---------------

   There are several variables in the build process which you can
control through build programs such as `make'.  These include machine
definitions, local conventions, installation locations, locations for
temporary files, etc.  This data is accessible through certain
variables which are configurable in the build process; we refer to them
as "build variables".

   For lists of build variables which you can affect by using
`configure', see *Note Variables available to `configure.in': configure
variables, and *Note Full descriptions of all installation directories:
Install details.

   Generally, build variables, which are used by the `Makefile' to
determine various aspects of the build and installation processes, are
changeable with command-line options to `configure'.  In most large
suites of programs, like the Cygnus Support Developer's Kit, the
individual programs reside in several subdirectories of a single source
code "tree".  All of these subdirectories need to be configured with
information relative to the "build directory", which is not known until
`configure' is run.  Unless specified otherwise, `configure'
recursively configures every subdirectory in the source tree.

   Build variables are passed from `configure' directly into the
`Makefile', and use the same names (except that dashes are transformed
into underbars; for example, when you specify the option
`--exec-prefix' on the command line, the `Makefile' variable
`exec_prefix' is set).  In other words, if you specify

     eg$ ./configure --prefix=/usr/gnu/local ... HOSTTYPE

on the command line, `configure' sets an variable called `prefix' to
`/usr/gnu/local', and passes this into the `Makefile' in the same
manner.  After this command, each `Makefile' generated by `configure'
will contain a line that reads:

     prefix = /usr/gnu/local

   For a list of the `Makefile' variables `configure' can change, and
instructions on how to change them, see *Note Variables available to
`configure.in': configure variables, and *Note Invoking `configure':
Invoking configure.


File: configure.info,  Node: Build directories,  Next: Makefile generation,  Prev: Build variables,  Up: What configure really does

Build directories
-----------------

   By default, `configure' builds a `Makefile' and symbolic links in the
same directory as the source files.  This default works for many cases,
but it has limitations.  For instance, using this approach, you can
only build object code for one host at a time.

   We refer to each directory where `configure' builds a `Makefile' as
a "build directory".

   The build directory for any given build is always the directory from
which you call `configure', or `.' relative to your prompt.  The default
"source directory", the place `configure' looks to find source code, is
also `.'.  For instance, if we have a directory `/gnu-stuff/src/' that
is the top branch of a tree of GNU source code we wish to configure,
then the program we will use to configure this code is
`/gnu-stuff/src/configure', as follows.  (Assume for the sake of
argument that our machine is a sun4.)

     eg$ cd /gnu-stuff/src
     eg$ ./configure sun4
     Created "Makefile" in /gnu-stuff/src
     eg$

   We just configured the code in `/gnu-stuff/src' to run on a Sun
SPARCstation using SunOS 4.x by creating a `Makefile' in
`/gnu-stuff/src'.  By default, we also specified that when this code is
built, the object code should reside in the same directory,
`/gnu-stuff/src'.

   However, if we wanted to build this code for more than one host, we
would be in trouble, because the new configuration would write over the
old one, destroying it in the process.  What we can do is to make a new
"build directory" and configure from there.  Running `configure' from
the new directory will place a correct `Makefile' and a `config.status'
in this new file.  That is all `configure' does; we must run `make' to
generate any object code.

   The new `Makefile' in `/gnu-stuff/sun4-obj', created from the
template file `/gnu-stuff/src/Makefile.in', contains all the information
needed to build the program.

     eg$ mkdir /gnu-stuff/sun4-obj
     eg$ cd /gnu-stuff/sun4-obj
     eg$ ../src/configure --srcdir=../src sun4
     Created "Makefile" in /gnu-stuff/sun4-obj
     eg$ ls
     Makefile       config.status
     eg$ make all info install install-info clean
     COMPILATION MESSAGES...
     eg$ mkdir /gnu-stuff/solaris2
     eg$ cd /gnu-stuff/solaris2
     eg$ ../src/configure --srcdir=../src sol2
     Created "Makefile" in /gnu-stuff/solaris2
     eg$ ls
     Makefile       config.status
     eg$ make all info install install-info clean
     COMPILATION MESSAGES...

   We can repeat this for other configurations of the same software
simply by making a new build directory and reconfiguring from inside
it.  If you do not specify the HOSTTYPE argument, `configure' will
attempt to figure out what kind of machine and operating system you
happen to be using.  *Note Determining system information:
config.guess.  Of course, this may not always be the configuration you
wish to build.

   *Caution:* If you build more than one configuration for a single
program, remember that you must also specify a different `--prefix' for
each configuration at configure-time.  Otherwise, both configurations
will be installed in the same default location (`/usr/local'); the
configuration to be installed last would overwrite previously installed
configurations.


File: configure.info,  Node: Makefile generation,  Next: config.guess,  Prev: Build directories,  Up: What configure really does

`Makefile' generation
---------------------

   Cygnus `configure' creates a file called `Makefile' in the build
directory which can be used with `make' to automatically build a given
program or package.  `configure' also builds a `Makefile' for each
relevant subdirectory for a given program or package (irrelevant
subdirectories would be those which contain no code which needs
configuring, and which therefore have no `configure' input file
`configure.in' and no `Makefile' template `Makefile.in').  *Note `make'
Invocation: (make)Running, for details on using `make' to compile your
source code.

   Each `Makefile' contains variables which have been configured for a
specific build.  These build variables are determined when `configure'
is run.  All build variables have defaults.  By default, `configure'
generates a `Makefile' which specifies:

   * a "native" build, which is to occur

   * in the current directory, and which will be installed

   * in the default installation directory (`/usr/local') when the code
     is compiled with `make'.

Variables are changeable through command-line options to `configure'
(*note Invoking `configure': Invoking configure.).

   If you are porting a new program and intend to use `configure', see
*Note Porting with `configure': Porting, as well as *Note Writing
Makefiles: (make)Makefiles, and *Note Makefile Conventions:
(standards)Makefiles.


File: configure.info,  Node: config.guess,  Next: config.status,  Prev: Makefile generation,  Up: What configure really does

Determining system information
------------------------------

   The shell script `config.guess' is called when you do not specify a
HOSTTYPE on the command line to `configure'.  `config.guess' acquires
available system information from your local machine through the shell
command `uname'.  It compares this information to a database and
attempts to determine a usable three-part system identifier (known as a
"triple") to use as your HOSTTYPE.  *Note What `configure' really does:
What configure really does, to see how this information is used.

   *Note:*  If you do not specify a HOSTTYPE on the command line,
`configure' will attempt to configure your software to run on the
machine you happen to be using.  This may not be the configuration you
desire.


File: configure.info,  Node: config.status,  Prev: config.guess,  Up: What configure really does

`config.status'
---------------

   The final step in configuring a directory is to create an executable
shell script, `config.status'.  The main purpose of this file is to
allow the `Makefile' for the current directory to rebuild itself, if
necessary.  It is usually run from within the `Makefile'.  *Note
Extensions to the GNU coding standards: Makefile extensions.

   `config.status' also contains a record of the `configure' session
which created it.


File: configure.info,  Node: configure.in,  Next: Install locations,  Prev: What configure really does,  Up: Using configure

The `configure.in' input file
=============================

   A `configure.in' file for Cygnus `configure' consists of a
"per-invocation" section, followed by a "per-host" section, followed by
a "per-target" section, optionally followed by a "post-target" section.
Each section is a shell script fragment, which is executed by the
`configure' shell script at an appropriate time.  Values are passed
among `configure' and the shell fragments through a set of shell
variables.  When each section is being interpreted by the shell, the
shell's current directory is the build directory, and any files created
by the section (or referred to by the section) will be relative to the
build directory.  To reference files in other places (such as the
source directory), prepend a shell variable such as `$(srcdir)/' to the
desired file name.

   The beginning of the `configure.in' file begins the "per-invocation"
section.

   A line beginning with `# per-host:' begins the "per-host" section.

   A line beginning with `# per-target:' begins the "per-target"
section.

   If it exists, the "post-target" section begins with `# post-target:'.

* Menu:

* configure variables::    Variables available to configure.in
* Minimal::                A minimal configure.in
* Declarations::           For each invocation
* per-host::               Host-specific instructions
* per-target::             Target-specific instructions
* post-target::            Instructions to be executed after target info
* Example::                An example configure.in


File: configure.info,  Node: configure variables,  Next: Minimal,  Up: configure.in

Variables available to `configure.in'
-------------------------------------

   The following variables pass information between the standard parts
of `configure' and the shell-script fragments in `configure.in':

`srctrigger'
     Contains the name of a source file that is expected to live in the
     source directory.  You must usually set this in the
     "per-invocation" section of `configure.in'.  `configure' tests to
     see that this file exists.  If the file does not exist,
     `configure' prints an error message.  This is used as a sanity
     check that `configure.in' matches the source directory.

`srcname'
     Contains the name of the source collection contained in the source
     directory.  You must usually set this in the "per-invocation"
     section of `configure.in'.  If the file named in `srctrigger' does
     not exist, `configure' uses the value of `srcname' when it prints
     the error message.

`configdirs'
     Contains the names of any subdirectories in which `configure'
     should recurse.  You must usually set this in the "per-invocation"
     section of `configure.in'.  If `Makefile.in' contains a line
     starting with `SUBDIRS =', then it will be replaced with an
     assignment to `SUBDIRS' using the value of `configdirs' (if
     `subdirs' is empty).  This can be used to determine which
     directories to configure and build depending on the host and
     target configurations.  Use `configdirs' (instead of the `subdirs'
     variable described below) if you want to be able to partition the
     subdirectories, or use independent `Makefile' fragments.  Each
     subdirectory can be independent, and independently reconfigured.

`subdirs'
     Contains the names of any subdirectories where `configure' should
     create a `Makefile' (in addition to the current directory),
     *without* recursively running `configure'.  Use `subdirs' (instead
     of the `configdirs' variable described above) if you want to
     configure all of the directories as a unit.  Since there is a
     single invocation of `configure' that configures many directories,
     all the directories can use the same `Makefile' fragments, and the
     same `configure.in'.

`host'
     Contains the full configuration name for the host (generated by
     the script `config.sub' from the name that you entered).  This is
     a three-part name (commonly referred to as a "triple") of the form
     CPU-VENDOR-OS.

     There are separate variables `host_cpu', `host_vendor', and
     `host_os' that you can use to test each of the three parts; this
     variable is useful, however, for error messages, and for testing
     combinations of the three components.

`host_cpu'
     Contains the first element of the canonical triple representing
     the host as returned by `config.sub'.  This is occasionally used to
     distinguish between minor variations of a particular vendor's
     operating system and sometimes to determine variations in binary
     format between the host and the target.

`host_vendor'
     Contains the second element of the canonical triple representing
     the host as returned by `config.sub'.  This is usually used to
     distinguish among the numerous variations of *common* operating
     systems.

`host_os'
     Contains the the third element of the canonical triple
     representing the host as returned by `config.sub'.

`target'
     Contains the full configuration name (generated by the script
     `config.sub' from the name that you entered) for the target.  Like
     the host, this is a three-part name of the form CPU-VENDOR-OS.

     There are separate variables `target_cpu', `target_vendor', and
     `target_os' that you can use to test each of the three parts; this
     variable is useful, however, for error messages, and for testing
     combinations of the three components.

`target_cpu'
     Contains the first element of the canonical triple representing
     the target as returned by `config.sub'.  This variable is used
     heavily by programs which are involved in building other programs,
     like the compiler, assembler, linker, etc.  Most programs will not
     need the `target' variables at all, but this one could conceivably
     be used to build a program, for instance, that operated on binary
     data files whose byte order or alignment differ from the system
     where the program is running.

`target_vendor'
     Contains the second element of the canonical triple representing
     the target as returned by `config.sub'.  This is usually used to
     distinguish among the numerous variations of *common* operating
     systems or object file formats.  It is sometimes used to switch
     between different flavors of user interfaces.

`target_os'
     Contains the the third element of the canonical triple
     representing the target as returned by `config.sub'.  This
     variable is used by development tools to distinguish between
     subtle variations in object file formats that some vendors use
     across operating system releases.  It might also be use to decide
     which libraries to build or what user interface the tool should
     provide.

`floating_point'
     Set to `no' if you invoked `configure' with the `--nfp'
     command-line option, otherwise it is empty.  This is a request to
     target machines with "no floating point" unit, even if the targets
     ordinarily have floating point units available.

`gas'
     Set to `true' if you invoked `configure' with the `--with-gnu-as'
     command line option, otherwise it is empty.  This is a request to
     assume that the specified HOSTTYPE machine has GNU `as' available
     even if it ordinarily does not.

`srcdir'
     Set to the name of the directory containing the source for this
     program.  This will be different from `.' if you have specified the
     `--srcdir=DIR' option.  `srcdir' can indicate either an absolute
     path or a path relative to the build directory.

`package_makefile_frag'
     If set in `configure.in', this variable should be the name a file
     relative to `srcdir' to be included in the resulting `Makefile'.
     If the named file does not exist, `configure' will print a warning
     message.  This variable is not set by `configure'.

`host_makefile_frag'
     If set in `configure.in', this variable should be the name a file
     relative to `srcdir' to be included in the resulting `Makefile'.
     If the named file does not exist, `configure' will print a warning
     message.  This variable is not set by `configure'.

`target_makefile_frag'
     If set in `configure.in', this variable should be the name of a
     file, relative to `srcdir', to be included in the resulting
     `Makefile'.  If the named file does not exist, `configure' will
     print a warning message.  This variable is not set by `configure'.

`site_makefile_frag'
     Set to a file name representing to the default `Makefile' fragment
     for this host.  It may be set in `configure.in' to override this
     default.  Normally `site_makefile_frag' is empty, but will have a
     value if you specify `--site=SITE' on the command line.

`Makefile'
     Set to the name of the generated `Makefile'.  Normally this value
     is precisely `Makefile', but some programs may want something else.

`removing'
     Normally empty but will be set to some non-null value if you
     specified `--rm' on the command line.  That is, if `removing' is
     not empty, then `configure' is *removing* a configuration rather
     than creating one.

`files'
     If this variable is not empty following the "per-target" section,
     then each word in its value will be the target of a symbolic link
     named in the corresponding word from the `links' variable.

`links'
     If the `files' variable is not empty following the "per-target"
     section, then `configure' creates symbolic links with the first
     word of `links' pointing to the first word of `files', the second
     word of `links' pointing to the second word of `files', and so on.


File: configure.info,  Node: Minimal,  Next: Declarations,  Prev: configure variables,  Up: configure.in

A minimal `configure.in'
------------------------

   A minimal `configure.in' consists of four lines.

     srctrigger=foo.c
     srcname="source for the foo program"
     # per-host:
     # per-target:

   The `# per-host:' and `# per-target:' lines divide the file into the
three required sections.  The `srctrigger' line names a file.
`configure' checks to see that this file exists in the source directory
before configuring.  If the `srctrigger' file does not exist,
`configure' uses the value of `srcname' to print an error message about
not finding the source.

   This particular example uses no links, and only the default host,
target, and site-specific `Makefile' fragments if they exist.


File: configure.info,  Node: Declarations,  Next: per-host,  Prev: Minimal,  Up: configure.in

For each invocation
-------------------

   `configure' invokes the entire shell script fragment from the start
of `configure.in' up to a line beginning with `# per-host:' immediately
after parsing command line arguments.  The variables `srctrigger' and
`srcname' *must* be set here.

   You might also want to set the variables `configdirs' and
`package_makefile_frag' here.


File: configure.info,  Node: per-host,  Next: per-target,  Prev: Declarations,  Up: configure.in

Host-specific instructions
--------------------------

   The "per-host" section of `configure.in' starts with the line that
begins with `# per-host:' and ends before a line beginning with
`# per-target:'.  `configure' invokes the commands in the "per-host"
section when determining host-specific information.

   This section usually contains a big `case' statement using the
variable `host' to determine appropriate values for
`host_makefile_frag' and `files', although `files' is not usually set
here.  Usually, it is set at the end of the "per-target" section after
determining the names of the target specific configuration files.


File: configure.info,  Node: per-target,  Next: post-target,  Prev: per-host,  Up: configure.in

Target-specific instructions
----------------------------

   The "per-target" section of `configure.in' starts with the line that
begins with `# per-target:' and ends before the line that begins with
`# post-target:', if there is such a line.  Otherwise the "per-target"
section extends to the end of the file.  `configure' invokes the
commands in the "per-target" section when determining target-specific
information, and before building any files, directories, or links.

   This section usually contains a big `case' statement using the
variable `target' to determine appropriate values for
`target_makefile_frag' and `files'.  The last lines in the "per-target"
section normally set the variables `files' and `links'.


File: configure.info,  Node: post-target,  Next: Example,  Prev: per-target,  Up: configure.in

Instructions to be executed after target info
---------------------------------------------

   The "post-target" section is optional.  If it exists, the
`post-target' section starts with a line beginning with
`# Post-target:' and extends to the end of the file.  If it exists,
`configure' invokes this section once for each target after building
all files, directories, or links.

   This section is seldom needed, but you can use it to edit the
`Makefile' generated by `configure'.


File: configure.info,  Node: Example,  Prev: post-target,  Up: configure.in

An example `configure.in'
-------------------------

   Here is a small example of a `configure.in' file.

     # This file is a collection of shell script fragments
     # used to tailor a template configure script as
     # appropriate for this directory.  For more information,
     # see configure.texi.
     
     configdirs=
     srctrigger=warshall.c
     srcname="bison"
     
     # per-host:
     case "${host}" in
     m88k-motorola-*)
             host_makefile_frag=config/mh-delta88
             ;;
     esac
     
     # per-target:
     files="bison_in.hairy"
     links="bison.hairy"
     
     # post-target:


File: configure.info,  Node: Install locations,  Next: Host,  Prev: configure.in,  Up: Using configure

Install locations
=================

   Using the default configuration, `make install' creates a single
tree of files, some of which are programs.  The location of this tree
is determined by the value of the variable `prefix'.  The default value
of `prefix' is `/usr/local'.  This is often correct for native tools
installed on only one host.

* Menu:

* prefix::            Changing the default install directory
* exec_prefix::       How to separate host independent files
                                         from host dependent files when
                                         installing for multiple hosts
* Install details::   Full descriptions of all installation subdirectories


File: configure.info,  Node: prefix,  Next: exec_prefix,  Up: Install locations

Changing the default install directory
--------------------------------------

   In the default configuration, all files are installed in
subdirectories of `/usr/local'.  The location is determined by the
value of the `configure' variable `prefix'; in turn, this determines the
value of the `Makefile' variable of the same name (`prefix').

   You can also set the value of the `Makefile' variable `prefix'
explicitly each time you invoke `make' if you are so inclined.  However,
because many programs have this location compiled in, you must specify
the `prefix' value consistently on each invocation of `make', or you
will end up with a broken installation.

   To make this easier, the value of the `configure' variable `prefix'
can be set on the command line to `configure' using the option
`--prefix='.


File: configure.info,  Node: exec_prefix,  Next: Install details,  Prev: prefix,  Up: Install locations

Installing for multiple hosts
-----------------------------

   By default, host dependent files are installed in subdirectories of
`$(exec_prefix)'.  The location is determined by the value of the
`configure' variable `exec_prefix', which determines the value of the
`Makefile' variable `exec_prefix'.  This makes it easier to install for
a single host, and simplifies changing the default location for the
install tree.  The default doesn't allow for multiple hosts to
effectively share host independent files, however.

   To configure so that multiple hosts can share common files, use
something like:

     configure HOST1 -prefix=/usr/gnu -exec_prefix=/usr/gnu/H-host1
     make all info install install-info clean
     
     configure HOST2 -prefix=/usr/gnu -exec_prefix=/usr/gnu/H-host2
     make all info install install-info

   The first line configures the source for HOST1 to place host-specific
programs in subdirectories of `/usr/gnu/H-HOST1'.

   The second line builds and installs all programs for HOST1,
including both host-independent and host-specific files, as well as
removing the host-specific object files from of the build directory.

   The third line reconfigures the source for HOST2 to place host
specific programs in subdirectories of `/usr/gnu/H-HOST2'.

   The fourth line builds and installs all programs for HOST2.  Host
specific files are installed in new directories, but the host
independent files are installed *on top of* the host independent files
installed for HOST1.  This results in a single copy of the host
independent files, suitable for use by both hosts.

   *Note Extensions to the GNU coding standards: Makefile extensions,
for more information.


File: configure.info,  Node: Install details,  Prev: exec_prefix,  Up: Install locations

Full descriptions of all installation subdirectories
----------------------------------------------------

   During any install, a number of standard directories are created.
Their names are determined by `Makefile' variables.  Some of the
defaults for `Makefile' variables can be changed at configuration time
using command line options to `configure'.  For more information on the
standard directories or the `Makefile' variables, please refer to *Note
Makefile Conventions: (standards)Makefiles.  See also *Note Extensions
to the GNU coding standards: Makefile extensions.

   Note that `configure' does not create the directory indicated by the
variable `srcdir' at any time.  `$(srcdir)' is not an installation
directory.

   You can override all `Makefile' variables on the command line to
`make'.  (*Note Overriding Variables: (make)Overriding.)  If you do so,
you will need to specify the value precisely the same way for each
invocation of `make', or you risk ending up with a broken installation.
This is because many programs have the locations of other programs or
files compiled into them.  If you find yourself overriding any of the
variables frequently, you should consider site dependent `Makefile'
fragments.  See also *Note Adding site info: Sites.

   During `make install', a number of standard directories are created
and populated.  The following `Makefile' variables define them.  Those
whose defaults are set by corresponding `configure' variables are marked
"`Makefile' and `configure'".

`prefix (`Makefile' and `configure')'
     The root of the installation tree.  You can set its `Makefile'
     default with the `--prefix=' command line option to `configure'
     (*note Invoking `configure': Invoking configure.).  The default
     value for `prefix' is `/usr/local'.

`bindir'
     A directory for binary programs that users can run.  The default
     value for `bindir' depends on `prefix'; `bindir' is normally
     changed only indirectly through `prefix'.  The default value for
     `bindir' is `$(prefix)/bin'.

`exec_prefix (`Makefile' and `configure')'
     A directory for host dependent files.  You can specify the
     `Makefile' default value by using the `--exec_prefix=' option to
     `configure'.  (*Note Invoking `configure': Invoking configure.)
     The default value for `exec_prefix' is `$(prefix)'.

`libdir'
     A directory for libraries and support programs.  The default value
     for `libdir' depends on `prefix'; `libdir' is normally changed only
     indirectly through `prefix'.  The default value for `libdir' is
     `$(prefix)/lib'.

`mandir'
     A directory for `man' format documentation ("man pages").  The
     default value for `mandir' depends on `prefix'; `mandir' is
     normally changed only indirectly through `prefix'.  The default
     value for `mandir' is `$(prefix)/man'.

`manNdir'
     These are eight variables named `man1dir', `man2dir', etc.  They
     name the specific directories for each man page section.  For
     example, `man1dir' by default holds the filename `$(mandir)/man1';
     this directory contains `emacs.1' (the man page for GNU Emacs).
     Similarly, `man5dir' contains the value `$(mandir)/man5',
     indicating the directory which holds `rcsfile.5' (the man page
     describing the `rcs' data file format).  The default value for any
     of the `manNdir' variables depends indirectly on `prefix', and is
     normally changed only through `prefix'.  The default value for
     `manNdir' is `$(mandir)/manN'.

`manNext'
     *Not supported by Cygnus `configure'*.  The `GNU Coding Standards'
     do not call for `man1ext', `man2ext', so the intended use for
     `manext' is apparently not parallel to `mandir'.  Its use is not
     clear.  (See also *Note Extensions to the GNU coding standards:
     Makefile extensions.)

`infodir'
     A directory for `info' format documentation.  The default value for
     `infodir' depends indirectly on `prefix'; `infodir' is normally
     changed only through `prefix'.  The default value for `infodir' is
     `$(prefix)/info'.

`docdir'
     A directory for any documentation that is in a format other than
     those used by `info' or `man'.  The default value for `docdir'
     depends indirectly on `prefix'; `docdir' is normally changed only
     through `prefix'.  The default value for `docdir' is
     `$(datadir)/doc'.  *This variable is an extension to the GNU
     coding standards*.  (See also *Note Extensions to the GNU coding
     standards: Makefile extensions.)

`includedir'
     A directory for the header files accompanying the libraries
     installed in `libdir'.  The default value for `includedir' depends
     on `prefix'; `includedir' is normally changed only indirectly
     through `prefix'.  The default value for `includedir' is
     `$(prefix)/include'.


File: configure.info,  Node: Host,  Next: Target,  Prev: Install locations,  Up: Using configure

Host
====

   The arguments to `configure' are "hosttypes".  By "hosttype" we mean
the "environment" in which the source will be compiled.  This need not
necessarily be the same as the physical machine involved, although it
usually is.

   For example, if some obscure machine had the GNU `POSIX' emulation
libraries available, it would be possible to configure most GNU source
for a `POSIX' system and build it on the obscure host.

   For more on this topic, see *Note On Configuring Development Tools:
(cfg-paper)Host Environments.


File: configure.info,  Node: Target,  Next: Makefile fragments,  Prev: Host,  Up: Using configure

Target
======

   For building native development tools, or most of the other GNU
tools, you need not worry about the target.  The "target" of a
configuration defaults to the same as the "host".

   For building cross development tools, please see *Note On
Configuring Development Tools: (cfg-paper)Building Development
Environments.

@


1.1
log
@Initial revision
@
text
@@


1.1.1.1
log
@Initial GNU binutils 2.6 import
@
text
@@


1.1.1.2
log
@Import of binutils-2.8.1 from Cygnus/FSF
@
text
@d1 1
a1 1
This is Info file configure.info, produced by Makeinfo-1.64 from the
d25 1
a25 1
File: configure.info,  Node: Top,  Next: What configure does,  Up: (dir)
@


1.1.1.3
log
@Long delayed import of binutils-2.10.1. Turns out art@@ needs some alpha
bug-fixes...
@
text
@d1 2
a2 2
This is configure.info, produced by makeinfo version 4.0 from
./configure.texi.
a3 1
INFO-DIR-SECTION GNU admin
d5 1
a5 1
* configure: (configure).	The GNU configure and build system
d8 1
a8 1
   This file documents the GNU configure and build system.
d10 3
a12 5
   Copyright (C) 1998 Cygnus Solutions.

   Permission is granted to make and distribute verbatim copies of this
manual provided the copyright notice and this permission notice are
preserved on all copies.
d22 1
a22 1
translation approved by the Foundation.
d25 1
a25 1
File: configure.info,  Node: Top,  Next: Introduction,  Up: (dir)
d27 2
a28 2
GNU configure and build system
******************************
d30 2
a31 1
   The GNU configure and build system.
d35 258
a292 33
* Introduction::		Introduction.
* Getting Started::		Getting Started.
* Files::			Files.
* Configuration Names::		Configuration Names.
* Cross Compilation Tools::	Cross Compilation Tools.
* Canadian Cross::		Canadian Cross.
* Cygnus Configure::		Cygnus Configure.
* Multilibs::			Multilibs.
* FAQ::				Frequently Asked Questions.
* Index::			Index.


File: configure.info,  Node: Introduction,  Next: Getting Started,  Prev: Top,  Up: Top

Introduction
************

   This document describes the GNU configure and build systems.  It
describes how autoconf, automake, libtool, and make fit together.  It
also includes a discussion of the older Cygnus configure system.

   This document does not describe in detail how to use each of the
tools; see the respective manuals for that.  Instead, it describes
which files the developer must write, which files are machine generated
and how they are generated, and where certain common problems should be
addressed.

   This document draws on several sources, including the autoconf
manual by David MacKenzie (*note autoconf overview: (autoconf)Top.),
the automake manual by David MacKenzie and Tom Tromey (*note automake
overview: (automake)Top.), the libtool manual by Gordon Matzigkeit
(*note libtool overview: (libtool)Top.), and the Cygnus configure
manual by K. Richard Pixley.
d296 77
a372 4
* Goals::			Goals.
* Tools::			The tools.
* History::			History.
* Building::			Building.
d374 2
a375 2

File: configure.info,  Node: Goals,  Next: Tools,  Up: Introduction
d377 3
a379 2
Goals
=====
d381 4
a384 1
   The GNU configure and build system has two main goals.
d386 17
a402 5
   The first is to simplify the development of portable programs.  The
system permits the developer to concentrate on writing the program,
simplifying many details of portability across Unix and even Windows
systems, and permitting the developer to describe how to build the
program using simple rules rather than complex Makefiles.
d404 7
a410 4
   The second is to simplify the building of programs distributed as
source code.  All programs are built using a simple, standardized, two
step process.  The program builder need not install any special tools in
order to build the program.
d412 10
a421 2

File: configure.info,  Node: Tools,  Next: History,  Prev: Goals,  Up: Introduction
d423 1
a423 2
Tools
=====
d425 186
a610 2
   The GNU configure and build system is comprised of several different
tools.  Program developers must build and install all of these tools.
d612 2
a613 3
   People who just want to build programs from distributed sources
normally do not need any special tools beyond a Unix shell, a make
program, and a C compiler.
d615 2
a616 7
autoconf
     provides a general portability framework, based on testing the
     features of the host system at build time.

automake
     a system for describing how to build a program, permitting the
     developer to write a simplified `Makefile'.
d618 5
a622 2
libtool
     a standardized approach to building shared libraries.
d624 2
a625 10
gettext
     provides a framework for translation of text messages into other
     languages; not really discussed in this document.

m4
     autoconf requires the GNU version of m4; the standard Unix m4 does
     not suffice.

perl
     automake requires perl.
d628 1
a628 1
File: configure.info,  Node: History,  Next: Building,  Prev: Tools,  Up: Introduction
d630 2
a631 2
History
=======
d633 12
a644 1
   This is a very brief and probably inaccurate history.
d646 2
a647 5
   As the number of Unix variants increased during the 1980s, it became
harder to write programs which could run on all variants.  While it was
often possible to use `#ifdef' to identify particular systems,
developers frequently did not have access to every system, and the
characteristics of some systems changed from version to version.
d649 1
a649 3
   By 1992, at least three different approaches had been developed:
   * The Metaconfig program, by Larry Wall, Harlan Stenn, and Raphael
     Manfredi.
d651 2
a652 3
   * The Cygnus configure script, by K. Richard Pixley, and the gcc
     configure script, by Richard Stallman.  These use essentially the
     same approach, and the developers communicated regularly.
d654 1
a654 1
   * The autoconf program, by David MacKenzie.
d656 1
a656 3
   The Metaconfig program is still used for Perl and a few other
programs.  It is part of the Dist package.  I do not know if it is
being developed.
d658 160
a817 4
   In 1994, David MacKenzie and others modified autoconf to incorporate
all the features of Cygnus configure.  Since then, there has been a
slow but steady conversion of GNU programs from Cygnus configure to
autoconf. gcc has been converted, eliminating the gcc configure script.
d819 3
a821 12
   GNU autoconf was regularly maintained until late 1996.  As of this
writing in June, 1998, it has no public maintainer.

   Most programs are built using the make program, which requires the
developer to write Makefiles describing how to build the programs.
Since most programs are built in pretty much the same way, this led to a
lot of duplication.

   The X Window system is built using the imake tool, which uses a
database of rules to eliminate the duplication.  However, building a
tool which was developed using imake requires that the builder have
imake installed, violating one of the goals of the GNU system.
d823 5
a827 3
   The new BSD make provides a standard library of Makefile fragments,
which permits developers to write very simple Makefiles.  However, this
requires that the builder install the new BSD make program.
d829 4
a832 5
   In 1994, David MacKenzie wrote the first version of automake, which
permitted writing a simple build description which was converted into a
Makefile which could be used by the standard make program.  In 1995, Tom
Tromey completely rewrote automake in Perl, and he continues to enhance
it.
d834 5
a838 10
   Various free packages built libraries, and by around 1995 several
included support to build shared libraries on various platforms.
However, there was no consistent approach.  In early 1996, Gordon
Matzigkeit began working on libtool, which provided a standardized
approach to building shared libraries.  This was integrated into
automake from the start.

   The development of automake and libtool was driven by the GNITS
project, a group of GNU maintainers who designed standardized tools to
help meet the GNU coding standards.
d841 1
a841 24
File: configure.info,  Node: Building,  Prev: History,  Up: Introduction

Building
========

   Most readers of this document should already know how to build a
tool by running `configure' and `make'.  This section may serve as a
quick introduction or reminder.

   Building a tool is normally as simple as running `configure'
followed by `make'.  You should normally run `configure' from an empty
directory, using some path to refer to the `configure' script in the
source directory.  The directory in which you run `configure' is called
the "object directory".

   In order to use a object directory which is different from the source
directory, you must be using the GNU version of `make', which has the
required `VPATH' support.  Despite this restriction, using a different
object directory is highly recommended:
   * It keeps the files generated during the build from cluttering up
     your sources.

   * It permits you to remove the built files by simply removing the
     entire build directory.
d843 2
a844 2
   * It permits you to build from the same sources with several sets of
     configure options simultaneously.
d846 1
a846 3
   If you don't have GNU `make', you will have to run `configure' in
the source directory.  All GNU packages should support this; in
particular, GNU packages should not assume the presence of GNU `make'.
d848 4
a851 1
   After running `configure', you can build the tools by running `make'.
d853 6
a858 4
   To install the tools, run `make install'.  Installing the tools will
copy the programs and any required support files to the "installation
directory".  The location of the installation directory is controlled
by `configure' options, as described below.
d860 2
a861 32
   In the Cygnus tree at present, the info files are built and
installed as a separate step.  To build them, run `make info'.  To
install them, run `make install-info'.

   All `configure' scripts support a wide variety of options.  The most
interesting ones are `--with' and `--enable' options which are
generally specific to particular tools.  You can usually use the
`--help' option to get a list of interesting options for a particular
configure script.

   The only generic options you are likely to use are the `--prefix'
and `--exec-prefix' options.  These options are used to specify the
installation directory.

   The directory named by the `--prefix' option will hold machine
independent files such as info files.

   The directory named by the `--exec-prefix' option, which is normally
a subdirectory of the `--prefix' directory, will hold machine dependent
files such as executables.

   The default for `--prefix' is `/usr/local'.  The default for
`--exec-prefix' is the value used for `--prefix'.

   The convention used in Cygnus releases is to use a `--prefix' option
of `/usr/cygnus/RELEASE', where RELEASE is the name of the release, and
to use a `--exec-prefix' option of `/usr/cygnus/RELEASE/H-HOST', where
HOST is the configuration name of the host system (*note Configuration
Names::).

   Do not use either the source or the object directory as the
installation directory.  That will just lead to confusion.
d864 1
a864 1
File: configure.info,  Node: Getting Started,  Next: Files,  Prev: Introduction,  Up: Top
d866 2
a867 6
Getting Started
***************

   To start using the GNU configure and build system with your software
package, you must write three files, and you must run some tools to
manually generate additional files.
d869 4
a872 1
* Menu:
d874 2
a875 165
* Write configure.in::		Write configure.in.
* Write Makefile.am::		Write Makefile.am.
* Write acconfig.h::		Write acconfig.h.
* Generate files::		Generate files.
* Getting Started Example::	Example.


File: configure.info,  Node: Write configure.in,  Next: Write Makefile.am,  Up: Getting Started

Write configure.in
==================

   You must first write the file `configure.in'.  This is an autoconf
input file, and the autoconf manual describes in detail what this file
should look like.

   You will write tests in your `configure.in' file to check for
conditions that may change from one system to another, such as the
presence of particular header files or functions.

   For example, not all systems support the `gettimeofday' function.
If you want to use the `gettimeofday' function when it is available,
and to use some other function when it is not, you would check for this
by putting `AC_CHECK_FUNCS(gettimeofday)' in `configure.in'.

   When the configure script is run at build time, this will arrange to
define the preprocessor macro `HAVE_GETTIMEOFDAY' to the value 1 if the
`gettimeofday' function is available, and to not define the macro at
all if the function is not available.  Your code can then use `#ifdef'
to test whether it is safe to call `gettimeofday'.

   If you have an existing body of code, the `autoscan' program may
help identify potential portability problems, and hence configure tests
that you will want to use.  *Note Invoking autoscan: (autoconf)Invoking
autoscan.

   Another handy tool for an existing body of code is `ifnames'.  This
will show you all the preprocessor conditionals that the code already
uses.  *Note Invoking ifnames: (autoconf)Invoking ifnames.

   Besides the portability tests which are specific to your particular
package, every `configure.in' file should contain the following macros.

`AC_INIT'
     This macro takes a single argument, which is the name of a file in
     your package.  For example, `AC_INIT(foo.c)'.

`AC_PREREQ(VERSION)'
     This macro is optional.  It may be used to indicate the version of
     `autoconf' that you are using.  This will prevent users from
     running an earlier version of `autoconf' and perhaps getting an
     invalid `configure' script.  For example, `AC_PREREQ(2.12)'.

`AM_INIT_AUTOMAKE'
     This macro takes two arguments: the name of the package, and a
     version number.  For example, `AM_INIT_AUTOMAKE(foo, 1.0)'.  (This
     macro is not needed if you are not using automake).

`AM_CONFIG_HEADER'
     This macro names the header file which will hold the preprocessor
     macro definitions at run time.  Normally this should be
     `config.h'.  Your sources would then use `#include "config.h"' to
     include it.

     This macro may optionally name the input file for that header
     file; by default, this is `config.h.in', but that file name works
     poorly on DOS filesystems.  Therefore, it is often better to name
     it explicitly as `config.in'.

     This is what you should normally put in `configure.in':
          AM_CONFIG_HEADER(config.h:config.in)

     (If you are not using automake, use `AC_CONFIG_HEADER' rather than
     `AM_CONFIG_HEADER').

`AM_MAINTAINER_MODE'
     This macro always appears in Cygnus configure scripts.  Other
     programs may or may not use it.

     If this macro is used, the `--enable-maintainer-mode' option is
     required to enable automatic rebuilding of generated files used by
     the configure system.  This of course requires that developers be
     aware of, and use, that option.

     If this macro is not used, then the generated files will always be
     rebuilt automatically.  This will cause problems if the wrong
     versions of autoconf, automake, or others are in the builder's
     `PATH'.

     (If you are not using automake, you do not need to use this macro).

`AC_EXEEXT'
     Either this macro or `AM_EXEEXT' always appears in Cygnus configure
     files.  Other programs may or may not use one of them.

     This macro looks for the executable suffix used on the host
     system.  On Unix systems, this is the empty string.  On Windows
     systems, this is `.exe'.  This macro directs automake to use the
     executable suffix as appropriate when creating programs.  This
     macro does not take any arguments.

     The `AC_EXEEXT' form is new, and is part of a Cygnus patch to
     autoconf to support compiling with Visual C++.  Older programs use
     `AM_EXEEXT' instead.

     (Programs which do not use automake use neither `AC_EXEEXT' nor
     `AM_EXEEXT').

`AC_PROG_CC'
     If you are writing C code, you will normally want to use this
     macro.  It locates the C compiler to use.  It does not take any
     arguments.

     However, if this `configure.in' file is for a library which is to
     be compiled by a cross compiler which may not fully work, then you
     will not want to use `AC_PROG_CC'.  Instead, you will want to use a
     variant which does not call the macro `AC_PROG_CC_WORKS'.  Examples
     can be found in various `configure.in' files for libraries that are
     compiled with cross compilers, such as libiberty or libgloss.
     This is essentially a bug in autoconf, and there will probably be
     a better workaround at some point.

`AC_PROG_CXX'
     If you are writing C++ code, you will want to use this macro.  It
     locates the C++ compiler to use.  It does not take any arguments.
     The same cross compiler comments apply as for `AC_PROG_CC'.

`AM_PROG_LIBTOOL'
     If you want to build libraries, and you want to permit them to be
     shared, or you want to link against libraries which were built
     using libtool, then you will need this macro.  This macro is
     required in order to use libtool.

     By default, this will cause all libraries to be built as shared
     libraries.  To prevent this-to change the default-use
     `AM_DISABLE_SHARED' before `AM_PROG_LIBTOOL'.  The configure
     options `--enable-shared' and `--disable-shared' may be used to
     override the default at build time.

`AC_DEFINE(_GNU_SOURCE)'
     GNU packages should normally include this line before any other
     feature tests.  This defines the macro `_GNU_SOURCE' when
     compiling, which directs the libc header files to provide the
     standard GNU system interfaces including all GNU extensions.  If
     this macro is not defined, certain GNU extensions may not be
     available.

`AC_OUTPUT'
     This macro takes a list of file names which the configure process
     should produce.  This is normally a list of one or more `Makefile'
     files in different directories.  If your package lives entirely in
     a single directory, you would use simply `AC_OUTPUT(Makefile)'.
     If you also have, for example, a `lib' subdirectory, you would use
     `AC_OUTPUT(Makefile lib/Makefile)'.

   If you want to use locally defined macros in your `configure.in'
file, then you will need to write a `acinclude.m4' file which defines
them (if not using automake, this file is called `aclocal.m4').
Alternatively, you can put separate macros in an `m4' subdirectory, and
put `ACLOCAL_AMFLAGS = -I m4' in your `Makefile.am' file so that the
`aclocal' program will be able to find them.

   The different macro prefixes indicate which tool defines the macro.
Macros which start with `AC_' are part of autoconf.  Macros which start
with `AM_' are provided by automake or libtool.
d878 1
a878 43
File: configure.info,  Node: Write Makefile.am,  Next: Write acconfig.h,  Prev: Write configure.in,  Up: Getting Started

Write Makefile.am
=================

   You must write the file `Makefile.am'.  This is an automake input
file, and the automake manual describes in detail what this file should
look like.

   The automake commands in `Makefile.am' mostly look like variable
assignments in a `Makefile'.  automake recognizes special variable
names, and automatically add make rules to the output as needed.

   There will be one `Makefile.am' file for each directory in your
package.  For each directory with subdirectories, the `Makefile.am'
file should contain the line
     SUBDIRS = DIR DIR ...

where each DIR is the name of a subdirectory.

   For each `Makefile.am', there should be a corresponding `Makefile'
in the `AC_OUTPUT' macro in `configure.in'.

   Every `Makefile.am' written at Cygnus should contain the line
     AUTOMAKE_OPTIONS = cygnus

This puts automake into Cygnus mode.  See the automake manual for
details.

   You may to include the version number of `automake' that you are
using on the `AUTOMAKE_OPTIONS' line.  For example,
     AUTOMAKE_OPTIONS = cygnus 1.3

This will prevent users from running an earlier version of `automake'
and perhaps getting an invalid `Makefile.in'.

   If your package builds a program, then in the directory where that
program is built you will normally want a line like
     bin_PROGRAMS = PROGRAM

where PROGRAM is the name of the program.  You will then want a line
like
     PROGRAM_SOURCES = FILE FILE ...
d880 2
a881 2
where each FILE is the name of a source file to link into the program
(e.g., `foo.c').
d883 4
a886 4
   If your package builds a library, and you do not want the library to
ever be built as a shared library, then in the directory where that
library is built you will normally want a line like
     lib_LIBRARIES = libNAME.a
d888 5
a892 28
where `libNAME.a' is the name of the library.  You will then want a
line like
     libNAME_a_SOURCES = FILE FILE ...

where each FILE is the name of a source file to add to the library.

   If your package builds a library, and you want to permit building the
library as a shared library, then in the directory where that library is
built you will normally want a line like
     lib_LTLIBRARIES = libNAME.la
   The use of `LTLIBRARIES', and the `.la' extension, indicate a
library to be built using libtool.  As usual, you will then want a line
like
     libNAME_la_SOURCES = FILE FILE ...

   The strings `bin' and `lib' that appear above in `bin_PROGRAMS' and
`lib_LIBRARIES' are not arbitrary.  They refer to particular
directories, which may be set by the `--bindir' and `--libdir' options
to `configure'.  If those options are not used, the default values are
based on the `--prefix' or `--exec-prefix' options to `configure'.  It
is possible to use other names if the program or library should be
installed in some other directory.

   The `Makefile.am' file may also contain almost anything that may
appear in a normal `Makefile'.  automake also supports many other
special variables, as well as conditionals.

   See the automake manual for more information.
d895 1
a895 4
File: configure.info,  Node: Write acconfig.h,  Next: Generate files,  Prev: Write Makefile.am,  Up: Getting Started

Write acconfig.h
================
d897 2
a898 3
   If you are generating a portability header file, (i.e., you are using
`AM_CONFIG_HEADER' in `configure.in'), then you will have to write a
`acconfig.h' file.  It will have to contain the following lines.
d900 6
a905 95
     /* Name of package.  */
     #undef PACKAGE
     
     /* Version of package.  */
     #undef VERSION

   This requirement is really a bug in the system, and the requirement
may be eliminated at some later date.

   The `acconfig.h' file will also similar comment and `#undef' lines
for any unusual macros in the `configure.in' file, including any macro
which appears in a `AC_DEFINE' macro.

   In particular, if you are writing a GNU package and therefore include
`AC_DEFINE(_GNU_SOURCE)' in `configure.in' as suggested above, you will
need lines like this in `acconfig.h':
     /* Enable GNU extensions.  */
     #undef _GNU_SOURCE

   Normally the `autoheader' program will inform you of any such
requirements by printing an error message when it is run.  However, if
you do anything particular odd in your `configure.in' file, you will
have to make sure that the right entries appear in `acconfig.h', since
otherwise the results of the tests may not be available in the
`config.h' file which your code will use.

   (Thee `PACKAGE' and `VERSION' lines are not required if you are not
using automake, and in that case you may not need a `acconfig.h' file
at all).


File: configure.info,  Node: Generate files,  Next: Getting Started Example,  Prev: Write acconfig.h,  Up: Getting Started

Generate files
==============

   Once you have written `configure.in', `Makefile.am', `acconfig.h',
and possibly `acinclude.m4', you must use autoconf and automake
programs to produce the first versions of the generated files.  This is
done by executing the following sequence of commands.

     aclocal
     autoconf
     autoheader
     automake

   The `aclocal' and `automake' commands are part of the automake
package, and the `autoconf' and `autoheader' commands are part of the
autoconf package.

   If you are using a `m4' subdirectory for your macros, you will need
to use the `-I m4' option when you run `aclocal'.

   If you are not using the Cygnus tree, use the `-a' option when
running `automake' command in order to copy the required support files
into your source directory.

   If you are using libtool, you must build and install the libtool
package with the same `--prefix' and `--exec-prefix' options as you
used with the autoconf and automake packages.  You must do this before
running any of the above commands.  If you are not using the Cygnus
tree, you will need to run the `libtoolize' program to copy the libtool
support files into your directory.

   Once you have managed to run these commands without getting any
errors, you should create a new empty directory, and run the `configure'
script which will have been created by `autoconf' with the
`--enable-maintainer-mode' option.  This will give you a set of
Makefiles which will include rules to automatically rebuild all the
generated files.

   After doing that, whenever you have changed some of the input files
and want to regenerated the other files, go to your object directory
and run `make'.  Doing this is more reliable than trying to rebuild the
files manually, because there are complex order dependencies and it is
easy to forget something.


File: configure.info,  Node: Getting Started Example,  Prev: Generate files,  Up: Getting Started

Example
=======

   Let's consider a trivial example.

   Suppose we want to write a simple version of `touch'.  Our program,
which we will call `poke', will take a single file name argument, and
use the `utime' system call to set the modification and access times of
the file to the current time.  We want this program to be highly
portable.

   We'll first see what this looks like without using autoconf and
automake, and then see what it looks like with them.

* Menu:
d907 4
a910 4
* Getting Started Example 1::		First Try.
* Getting Started Example 2::		Second Try.
* Getting Started Example 3::		Third Try.
* Generate Files in Example::		Generate Files.
d913 1
a913 46
File: configure.info,  Node: Getting Started Example 1,  Next: Getting Started Example 2,  Up: Getting Started Example

First Try
---------

   Here is our first try at `poke.c'.  Note that we've written it
without ANSI/ISO C prototypes, since we want it to be highly portable.

     #include <stdio.h>
     #include <stdlib.h>
     #include <sys/types.h>
     #include <utime.h>
     
     int
     main (argc, argv)
          int argc;
          char **argv;
     {
       if (argc != 2)
         {
           fprintf (stderr, "Usage: poke file\n");
           exit (1);
         }
     
       if (utime (argv[1], NULL) < 0)
         {
           perror ("utime");
           exit (1);
         }
     
       exit (0);
     }

   We also write a simple `Makefile'.

     CC = gcc
     CFLAGS = -g -O2
     
     all: poke
     
     poke: poke.o
     	$(CC) -o poke $(CFLAGS) $(LDFLAGS) poke.o

   So far, so good.

   Unfortunately, there are a few problems.
d915 2
a916 5
   On older Unix systems derived from BSD 4.3, the `utime' system call
does not accept a second argument of `NULL'.  On those systems, we need
to pass a pointer to `struct utimbuf' structure.  Unfortunately, even
older systems don't define that structure; on those systems, we need to
pass an array of two `long' values.
d918 5
a922 2
   The header file `stdlib.h' was invented by ANSI C, and older systems
don't have a copy.  We included it above to get a declaration of `exit'.
d924 2
a925 9
   We can find some of these portability problems by running
`autoscan', which will create a `configure.scan' file which we can use
as a prototype for our `configure.in' file.  I won't show the output,
but it will notice the potential problems with `utime' and `stdlib.h'.

   In our `Makefile', we don't provide any way to install the program.
This doesn't matter much for such a simple example, but a real program
will need an `install' target.  For that matter, we will also want a
`clean' target.
d928 1
a928 1
File: configure.info,  Node: Getting Started Example 2,  Next: Getting Started Example 3,  Prev: Getting Started Example 1,  Up: Getting Started Example
d930 2
a931 4
Second Try
----------

   Here is our second try at this program.
d933 1
a933 3
   We modify `poke.c' to use preprocessor macros to control what
features are available.  (I've cheated a bit by using the same macro
names which autoconf will use).
d935 4
a938 31
     #include <stdio.h>
     
     #ifdef STDC_HEADERS
     #include <stdlib.h>
     #endif
     
     #include <sys/types.h>
     
     #ifdef HAVE_UTIME_H
     #include <utime.h>
     #endif
     
     #ifndef HAVE_UTIME_NULL
     
     #include <time.h>
     
     #ifndef HAVE_STRUCT_UTIMBUF
     
     struct utimbuf
     {
       long actime;
       long modtime;
     };
     
     #endif
     
     static int
     utime_now (file)
          char *file;
     {
       struct utimbuf now;
d940 3
a942 3
       now.actime = now.modtime = time (NULL);
       return utime (file, &now);
     }
d944 6
a949 1
     #define utime(f, p) utime_now (f)
d951 3
a953 1
     #endif /* HAVE_UTIME_NULL  */
d955 1
a955 73
     int
     main (argc, argv)
          int argc;
          char **argv;
     {
       if (argc != 2)
         {
           fprintf (stderr, "Usage: poke file\n");
           exit (1);
         }
     
       if (utime (argv[1], NULL) < 0)
         {
           perror ("utime");
           exit (1);
         }
     
       exit (0);
     }

   Here is the associated `Makefile'.  We've added support for the
preprocessor flags we use.  We've also added `install' and `clean'
targets.

     # Set this to your installation directory.
     bindir = /usr/local/bin
     
     # Uncomment this if you have the standard ANSI/ISO C header files.
     # STDC_HDRS = -DSTDC_HEADERS
     
     # Uncomment this if you have utime.h.
     # UTIME_H = -DHAVE_UTIME_H
     
     # Uncomment this if utime (FILE, NULL) works on your system.
     # UTIME_NULL = -DHAVE_UTIME_NULL
     
     # Uncomment this if struct utimbuf is defined in utime.h.
     # UTIMBUF = -DHAVE_STRUCT_UTIMBUF
     
     CC = gcc
     CFLAGS = -g -O2
     
     ALL_CFLAGS = $(STDC_HDRS) $(UTIME_H) $(UTIME_NULL) $(UTIMBUF) $(CFLAGS)
     
     all: poke
     
     poke: poke.o
     	$(CC) -o poke $(ALL_CFLAGS) $(LDFLAGS) poke.o
     
     .c.o:
     	$(CC) -c $(ALL_CFLAGS) poke.c
     
     install: poke
     	cp poke $(bindir)/poke
     
     clean:
     	rm poke poke.o

   Some problems with this approach should be clear.

   Users who want to compile poke will have to know how `utime' works
on their systems, so that they can uncomment the `Makefile' correctly.

   The installation is done using `cp', but many systems have an
`install' program which may be used, and which supports optional
features such as stripping debugging information out of the installed
binary.

   The use of `Makefile' variables like `CC', `CFLAGS' and `LDFLAGS'
follows the requirements of the GNU standards.  This is convenient for
all packages, since it reduces surprises for users.  However, it is
easy to get the details wrong, and wind up with a slightly nonstandard
distribution.
d958 1
a958 1
File: configure.info,  Node: Getting Started Example 3,  Next: Generate Files in Example,  Prev: Getting Started Example 2,  Up: Getting Started Example
d960 2
a961 420
Third Try
---------

   For our third try at this program, we will write a `configure.in'
script to discover the configuration features on the host system, rather
than requiring the user to edit the `Makefile'.  We will also write a
`Makefile.am' rather than a `Makefile'.

   The only change to `poke.c' is to add a line at the start of the
file:
     #include "config.h"

   The new `configure.in' file is as follows.

     AC_INIT(poke.c)
     AM_INIT_AUTOMAKE(poke, 1.0)
     AM_CONFIG_HEADER(config.h:config.in)
     AC_PROG_CC
     AC_HEADER_STDC
     AC_CHECK_HEADERS(utime.h)
     AC_EGREP_HEADER(utimbuf, utime.h, AC_DEFINE(HAVE_STRUCT_UTIMBUF))
     AC_FUNC_UTIME_NULL
     AC_OUTPUT(Makefile)

   The first four macros in this file, and the last one, were described
above; see *Note Write configure.in::.  If we omit these macros, then
when we run `automake' we will get a reminder that we need them.

   The other macros are standard autoconf macros.

`AC_HEADER_STDC'
     Check for standard C headers.

`AC_CHECK_HEADERS'
     Check whether a particular header file exists.

`AC_EGREP_HEADER'
     Check for a particular string in a particular header file, in this
     case checking for `utimbuf' in `utime.h'.

`AC_FUNC_UTIME_NULL'
     Check whether `utime' accepts a NULL second argument to set the
     file change time to the current time.

   See the autoconf manual for a more complete description.

   The new `Makefile.am' file is as follows.  Note how simple this is
compared to our earlier `Makefile'.

     bin_PROGRAMS = poke
     
     poke_SOURCES = poke.c

   This means that we should build a single program name `poke'.  It
should be installed in the binary directory, which we called `bindir'
earlier.  The program `poke' is built from the source file `poke.c'.

   We must also write a `acconfig.h' file.  Besides `PACKAGE' and
`VERSION', which must be mentioned for all packages which use automake,
we must include `HAVE_STRUCT_UTIMBUF', since we mentioned it in an
`AC_DEFINE'.

     /* Name of package.  */
     #undef PACKAGE
     
     /* Version of package.  */
     #undef VERSION
     
     /* Whether utime.h defines struct utimbuf.  */
     #undef HAVE_STRUCT_UTIMBUF


File: configure.info,  Node: Generate Files in Example,  Prev: Getting Started Example 3,  Up: Getting Started Example

Generate Files
--------------

   We must now generate the other files, using the following commands.

     aclocal
     autoconf
     autoheader
     automake

   When we run `autoheader', it will remind us of any macros we forgot
to add to `acconfig.h'.

   When we run `automake', it will want to add some files to our
distribution.  It will add them automatically if we use the
`--add-missing' option.

   By default, `automake' will run in GNU mode, which means that it
will want us to create certain additional files; as of this writing, it
will want `NEWS', `README', `AUTHORS', and `ChangeLog', all of which
are files which should appear in a standard GNU distribution.  We can
either add those files, or run `automake' with the `--foreign' option.

   Running these tools will generate the following files, all of which
are described in the next chapter.

   * `aclocal.m4'

   * `configure'

   * `config.in'

   * `Makefile.in'

   * `stamp-h.in'


File: configure.info,  Node: Files,  Next: Configuration Names,  Prev: Getting Started,  Up: Top

Files
*****

   As was seen in the previous chapter, the GNU configure and build
system uses a number of different files.  The developer must write a
few files.  The others are generated by various tools.

   The system is rather flexible, and can be used in many different
ways.  In describing the files that it uses, I will describe the common
case, and mention some other cases that may arise.

* Menu:

* Developer Files::		Developer Files.
* Build Files::			Build Files.
* Support Files::		Support Files.


File: configure.info,  Node: Developer Files,  Next: Build Files,  Up: Files

Developer Files
===============

   This section describes the files written or generated by the
developer of a package.

* Menu:

* Developer Files Picture::	Developer Files Picture.
* Written Developer Files::	Written Developer Files.
* Generated Developer Files::	Generated Developer Files.


File: configure.info,  Node: Developer Files Picture,  Next: Written Developer Files,  Up: Developer Files

Developer Files Picture
-----------------------

   Here is a picture of the files which are written by the developer,
the generated files which would be included with a complete source
distribution, and the tools which create those files.  The file names
are plain text and the tool names are enclosed by `*' characters (e.g.,
`autoheader' is the name of a tool, not the name of a file).

   acconfig.h       configure.in                 Makefile.am
       |                |                           |
       |  --------------+----------------------     |
       |  |             |                     |     |
       v  v             |    acinclude.m4     |     |
   *autoheader*         |         |           v     v
       |                |         v      --->*automake* 
       v                |--->*aclocal*   |       |      
   config.in            |         |      |       v      
                        |         v      |   Makefile.in
                        |    aclocal.m4---
                        |     |
                        v     v
                       *autoconf*
                           |
                           v
                       configure


File: configure.info,  Node: Written Developer Files,  Next: Generated Developer Files,  Prev: Developer Files Picture,  Up: Developer Files

Written Developer Files
-----------------------

   The following files would be written by the developer.

`configure.in'
     This is the configuration script.  This script contains
     invocations of autoconf macros.  It may also contain ordinary
     shell script code.  This file will contain feature tests for
     portability issues.  The last thing in the file will normally be
     an `AC_OUTPUT' macro listing which files to create when the
     builder runs the configure script.  This file is always required
     when using the GNU configure system.  *Note Write configure.in::.

`Makefile.am'
     This is the automake input file.  It describes how the code should
     be built.  It consists of definitions of automake variables.  It
     may also contain ordinary Makefile targets.  This file is only
     needed when using automake (newer tools normally use automake, but
     there are still older tools which have not been converted, in
     which the developer writes `Makefile.in' directly).  *Note Write
     Makefile.am::.

`acconfig.h'
     When the configure script creates a portability header file, by
     using `AM_CONFIG_HEADER' (or, if not using automake,
     `AC_CONFIG_HEADER'), this file is used to describe macros which are
     not recognized by the `autoheader' command.  This is normally a
     fairly uninteresting file, consisting of a collection of `#undef'
     lines with comments.  Normally any call to `AC_DEFINE' in
     `configure.in' will require a line in this file. *Note Write
     acconfig.h::.

`acinclude.m4'
     This file is not always required.  It defines local autoconf
     macros.  These macros may then be used in `configure.in'.  If you
     don't need any local autoconf macros, then you don't need this
     file at all.  In fact, in general, you never need local autoconf
     macros, since you can put everything in `configure.in', but
     sometimes a local macro is convenient.

     Newer tools may omit `acinclude.m4', and instead use a
     subdirectory, typically named `m4', and define `ACLOCAL_AMFLAGS =
     -I m4' in `Makefile.am' to force `aclocal' to look there for macro
     definitions.  The macro definitions are then placed in separate
     files in that directory.

     The `acinclude.m4' file is only used when using automake; in older
     tools, the developer writes `aclocal.m4' directly, if it is needed.


File: configure.info,  Node: Generated Developer Files,  Prev: Written Developer Files,  Up: Developer Files

Generated Developer Files
-------------------------

   The following files would be generated by the developer.

   When using automake, these files are normally not generated manually
after the first time.  Instead, the generated `Makefile' contains rules
to automatically rebuild the files as required.  When
`AM_MAINTAINER_MODE' is used in `configure.in' (the normal case in
Cygnus code), the automatic rebuilding rules will only be defined if
you configure using the `--enable-maintainer-mode' option.

   When using automatic rebuilding, it is important to ensure that all
the various tools have been built and installed on your `PATH'.  Using
automatic rebuilding is highly recommended, so much so that I'm not
going to explain what you have to do if you don't use it.

`configure'
     This is the configure script which will be run when building the
     package.  This is generated by `autoconf' from `configure.in' and
     `aclocal.m4'.  This is a shell script.

`Makefile.in'
     This is the file which the configure script will turn into the
     `Makefile' at build time.  This file is generated by `automake'
     from `Makefile.am'.  If you aren't using automake, you must write
     this file yourself.  This file is pretty much a normal `Makefile',
     with some configure substitutions for certain variables.

`aclocal.m4'
     This file is created by the `aclocal' program, based on the
     contents of `configure.in' and `acinclude.m4' (or, as noted in the
     description of `acinclude.m4' above, on the contents of an `m4'
     subdirectory).  This file contains definitions of autoconf macros
     which `autoconf' will use when generating the file `configure'.
     These autoconf macros may be defined by you in `acinclude.m4' or
     they may be defined by other packages such as automake, libtool or
     gettext.  If you aren't using automake, you will normally write
     this file yourself; in that case, if `configure.in' uses only
     standard autoconf macros, this file will not be needed at all.

`config.in'
     This file is created by `autoheader' based on `acconfig.h' and
     `configure.in'.  At build time, the configure script will define
     some of the macros in it to create `config.h', which may then be
     included by your program.  This permits your C code to use
     preprocessor conditionals to change its behaviour based on the
     characteristics of the host system.  This file may also be called
     `config.h.in'.

`stamp.h-in'
     This rather uninteresting file, which I omitted from the picture,
     is generated by `automake'.  It always contains the string
     `timestamp'.  It is used as a timestamp file indicating whether
     `config.in' is up to date.  Using a timestamp file means that
     `config.in' can be marked as up to date without actually changing
     its modification time.  This is useful since `config.in' depends
     upon `configure.in', but it is easy to change `configure.in' in a
     way which does not affect `config.in'.


File: configure.info,  Node: Build Files,  Next: Support Files,  Prev: Developer Files,  Up: Files

Build Files
===========

   This section describes the files which are created at configure and
build time.  These are the files which somebody who builds the package
will see.

   Of course, the developer will also build the package.  The
distinction between developer files and build files is not that the
developer does not see the build files, but that somebody who only
builds the package does not have to worry about the developer files.

* Menu:

* Build Files Picture::		Build Files Picture.
* Build Files Description::	Build Files Description.


File: configure.info,  Node: Build Files Picture,  Next: Build Files Description,  Up: Build Files

Build Files Picture
-------------------

   Here is a picture of the files which will be created at build time.
`config.status' is both a created file and a shell script which is run
to create other files, and the picture attempts to show that.

   config.in        *configure*      Makefile.in
      |                  |               |
      |                  v               |
      |             config.status        |
      |                  |               |
   *config.status*<======+==========>*config.status*
      |                                  |
      v                                  v
   config.h                          Makefile


File: configure.info,  Node: Build Files Description,  Prev: Build Files Picture,  Up: Build Files

Build Files Description
-----------------------

   This is a description of the files which are created at build time.

`config.status'
     The first step in building a package is to run the `configure'
     script.  The `configure' script will create the file
     `config.status', which is itself a shell script.  When you first
     run `configure', it will automatically run `config.status'.  An
     `Makefile' derived from an automake generated `Makefile.in' will
     contain rules to automatically run `config.status' again when
     necessary to recreate certain files if their inputs change.

`Makefile'
     This is the file which make will read to build the program.  The
     `config.status' script will transform `Makefile.in' into
     `Makefile'.

`config.h'
     This file defines C preprocessor macros which C code can use to
     adjust its behaviour on different systems.  The `config.status'
     script will transform `config.in' into `config.h'.

`config.cache'
     This file did not fit neatly into the picture, and I omitted it.
     It is used by the `configure' script to cache results between
     runs.  This can be an important speedup.  If you modify
     `configure.in' in such a way that the results of old tests should
     change (perhaps you have added a new library to `LDFLAGS'), then
     you will have to remove `config.cache' to force the tests to be
     rerun.

     The autoconf manual explains how to set up a site specific cache
     file.  This can speed up running `configure' scripts on your
     system.

`stamp.h'
     This file, which I omitted from the picture, is similar to
     `stamp-h.in'.  It is used as a timestamp file indicating whether
     `config.h' is up to date.  This is useful since `config.h' depends
     upon `config.status', but it is easy for `config.status' to change
     in a way which does not affect `config.h'.


File: configure.info,  Node: Support Files,  Prev: Build Files,  Up: Files

Support Files
=============

   The GNU configure and build system requires several support files to
be included with your distribution.  You do not normally need to concern
yourself with these.  If you are using the Cygnus tree, most are already
present.  Otherwise, they will be installed with your source by
`automake' (with the `--add-missing' option) and `libtoolize'.

   You don't have to put the support files in the top level directory.
You can put them in a subdirectory, and use the `AC_CONFIG_AUX_DIR'
macro in `configure.in' to tell `automake' and the `configure' script
where they are.

   In this section, I describe the support files, so that you can know
what they are and why they are there.

`ABOUT-NLS'
     Added by automake if you are using gettext.  This is a
     documentation file about the gettext project.

`ansi2knr.c'
     Used by an automake generated `Makefile' if you put `ansi2knr' in
     `AUTOMAKE_OPTIONS' in `Makefile.am'.  This permits compiling ANSI
     C code with a K&R C compiler.

`ansi2knr.1'
     The man page which goes with `ansi2knr.c'.

`config.guess'
     A shell script which determines the configuration name for the
     system on which it is run.

`config.sub'
     A shell script which canonicalizes a configuration name entered by
     a user.

`elisp-comp'
     Used to compile Emacs LISP files.
d963 5
a967 48
`install-sh'
     A shell script which installs a program.  This is used if the
     configure script can not find an install binary.

`ltconfig'
     Used by libtool.  This is a shell script which configures libtool
     for the particular system on which it is used.

`ltmain.sh'
     Used by libtool.  This is the actual libtool script which is used,
     after it is configured by `ltconfig' to build a library.

`mdate-sh'
     A shell script used by an automake generated `Makefile' to pretty
     print the modification time of a file.  This is used to maintain
     version numbers for texinfo files.

`missing'
     A shell script used if some tool is missing entirely.  This is
     used by an automake generated `Makefile' to avoid certain sorts of
     timestamp problems.

`mkinstalldirs'
     A shell script which creates a directory, including all parent
     directories.  This is used by an automake generated `Makefile'
     during installation.

`texinfo.tex'
     Required if you have any texinfo files.  This is used when
     converting Texinfo files into DVI using `texi2dvi' and TeX.

`ylwrap'
     A shell script used by an automake generated `Makefile' to run
     programs like `bison', `yacc', `flex', and `lex'.  These programs
     default to producing output files with a fixed name, and the
     `ylwrap' script runs them in a subdirectory to avoid file name
     conflicts when using a parallel make program.


File: configure.info,  Node: Configuration Names,  Next: Cross Compilation Tools,  Prev: Files,  Up: Top

Configuration Names
*******************

   The GNU configure system names all systems using a "configuration
name".  All such names used to be triplets (they may now contain four
parts in certain cases), and the term "configuration triplet" is still
seen.
d971 203
a1173 2
* Configuration Name Definition::	Configuration Name Definition.
* Using Configuration Names::		Using Configuration Names.
@

