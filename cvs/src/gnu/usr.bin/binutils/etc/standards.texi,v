head	1.3;
access;
symbols
	OPENBSD_6_1:1.3.0.52
	OPENBSD_6_1_BASE:1.3
	OPENBSD_6_0:1.3.0.50
	OPENBSD_6_0_BASE:1.3
	OPENBSD_5_9:1.3.0.46
	OPENBSD_5_9_BASE:1.3
	OPENBSD_5_8:1.3.0.48
	OPENBSD_5_8_BASE:1.3
	OPENBSD_5_7:1.3.0.40
	OPENBSD_5_7_BASE:1.3
	OPENBSD_5_6:1.3.0.44
	OPENBSD_5_6_BASE:1.3
	OPENBSD_5_5:1.3.0.42
	OPENBSD_5_5_BASE:1.3
	OPENBSD_5_4:1.3.0.38
	OPENBSD_5_4_BASE:1.3
	OPENBSD_5_3:1.3.0.36
	OPENBSD_5_3_BASE:1.3
	OPENBSD_5_2:1.3.0.34
	OPENBSD_5_2_BASE:1.3
	OPENBSD_5_1_BASE:1.3
	OPENBSD_5_1:1.3.0.32
	OPENBSD_5_0:1.3.0.30
	OPENBSD_5_0_BASE:1.3
	OPENBSD_4_9:1.3.0.28
	OPENBSD_4_9_BASE:1.3
	OPENBSD_4_8:1.3.0.26
	OPENBSD_4_8_BASE:1.3
	OPENBSD_4_7:1.3.0.22
	OPENBSD_4_7_BASE:1.3
	OPENBSD_4_6:1.3.0.24
	OPENBSD_4_6_BASE:1.3
	OPENBSD_4_5:1.3.0.20
	OPENBSD_4_5_BASE:1.3
	OPENBSD_4_4:1.3.0.18
	OPENBSD_4_4_BASE:1.3
	OPENBSD_4_3:1.3.0.16
	OPENBSD_4_3_BASE:1.3
	OPENBSD_4_2:1.3.0.14
	OPENBSD_4_2_BASE:1.3
	OPENBSD_4_1:1.3.0.12
	OPENBSD_4_1_BASE:1.3
	OPENBSD_4_0:1.3.0.10
	OPENBSD_4_0_BASE:1.3
	OPENBSD_3_9:1.3.0.8
	OPENBSD_3_9_BASE:1.3
	OPENBSD_3_8:1.3.0.6
	OPENBSD_3_8_BASE:1.3
	OPENBSD_3_7:1.3.0.4
	OPENBSD_3_7_BASE:1.3
	BINUTILS_2_15:1.1.1.4
	OPENBSD_3_6:1.3.0.2
	OPENBSD_3_6_BASE:1.3
	BINUTILS-2_14:1.1.1.4
	OPENBSD_3_5:1.2.0.16
	OPENBSD_3_5_BASE:1.2
	OPENBSD_3_4:1.2.0.14
	OPENBSD_3_4_BASE:1.2
	OPENBSD_3_3:1.2.0.12
	OPENBSD_3_3_BASE:1.2
	OPENBSD_3_2:1.2.0.10
	OPENBSD_3_2_BASE:1.2
	binutils-2_11_2:1.1.1.3
	OPENBSD_3_1:1.2.0.8
	OPENBSD_3_1_BASE:1.2
	OPENBSD_3_0:1.2.0.6
	OPENBSD_3_0_BASE:1.2
	BINUTILS-2_10_1:1.1.1.3
	OPENBSD_2_9:1.2.0.4
	OPENBSD_2_9_BASE:1.2
	OPENBSD_2_8:1.2.0.2
	OPENBSD_2_8_BASE:1.2
	BINUTILS-2_10:1.1.1.3
	OPENBSD_2_7:1.1.0.18
	OPENBSD_2_7_BASE:1.1
	new-binutils:1.1.0.16
	OPENBSD_2_6:1.1.0.14
	OPENBSD_2_6_BASE:1.1
	OPENBSD_2_5:1.1.0.12
	OPENBSD_2_5_BASE:1.1
	OPENBSD_2_4:1.1.0.10
	OPENBSD_2_4_BASE:1.1
	OPENBSD_2_3:1.1.0.8
	OPENBSD_2_3_BASE:1.1
	OPENBSD_2_2:1.1.0.6
	OPENBSD_2_2_BASE:1.1
	BINUTILS-2_8_1:1.1.1.2
	OPENBSD_2_1:1.1.0.4
	OPENBSD_2_1_BASE:1.1
	CYGNUS-961112:1.1.1.1
	OPENBSD_2_0:1.1.0.2
	OPENBSD_2_0_BASE:1.1
	CYGNUS-960904:1.1.1.1
	CYGNUS-960609:1.1.1.1
	CYGNUS-960607:1.1.1.1
	CYGNUS:1.1.1
	FSF_2_6:1.1.1.1
	FSF:1.1.1;
locks; strict;
comment	@# @;


1.3
date	2004.05.17.21.54.27;	author drahn;	state Exp;
branches;
next	1.2;

1.2
date	2000.09.12.19.11.38;	author espie;	state Exp;
branches;
next	1.1;

1.1
date	96.01.08.11.10.21;	author niklas;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	96.01.08.11.10.21;	author niklas;	state Exp;
branches;
next	1.1.1.2;

1.1.1.2
date	97.05.29.09.30.15;	author niklas;	state Exp;
branches;
next	1.1.1.3;

1.1.1.3
date	2000.09.12.14.48.46;	author espie;	state Exp;
branches;
next	1.1.1.4;

1.1.1.4
date	2004.05.17.20.42.57;	author drahn;	state Exp;
branches;
next	;


desc
@@


1.3
log
@Resolve merge conflicts, adjust method of W^X handing (.sh files)
remove testsuites (not useable) remove mmalloc (not part of new binutils).
@
text
@\input texinfo @@c -*-texinfo-*-
@@c %**start of header
@@setfilename standards.info
@@settitle GNU Coding Standards
@@c This date is automagically updated when you save this file:
@@set lastupdate February 14, 2002
@@c %**end of header

@@ifinfo
@@format
START-INFO-DIR-ENTRY
* Standards: (standards).        GNU coding standards.
END-INFO-DIR-ENTRY
@@end format
@@end ifinfo

@@c @@setchapternewpage odd
@@setchapternewpage off

@@c Put everything in one index (arbitrarily chosen to be the concept index).
@@syncodeindex fn cp
@@syncodeindex ky cp
@@syncodeindex pg cp
@@syncodeindex vr cp

@@c This is used by a cross ref in make-stds.texi
@@set CODESTD  1
@@iftex
@@set CHAPTER chapter
@@end iftex
@@ifinfo
@@set CHAPTER node
@@end ifinfo

@@ifinfo
GNU Coding Standards
Copyright (C) 1992, 1993, 1994, 1995, 1996, 1997, 1998, 1999, 2000, 2001 Free Software Foundation, Inc.

Permission is granted to copy, distribute and/or modify this document
under the terms of the GNU Free Documentation License, Version 1.1
or any later version published by the Free Software Foundation;
with no Invariant Sections, with no
Front-Cover Texts, and with no Back-Cover Texts.
A copy of the license is included in the section entitled ``GNU
Free Documentation License''.
@@end ifinfo

@@titlepage
@@title GNU Coding Standards
@@author Richard Stallman, et al.
@@author last updated @@value{lastupdate}
@@page

@@vskip 0pt plus 1filll
Copyright @@copyright{} 1992, 1993, 1994, 1995, 1996, 1997, 1998, 1999, 2000, 2001 Free Software Foundation, Inc.

Permission is granted to copy, distribute and/or modify this document
under the terms of the GNU Free Documentation License, Version 1.1
or any later version published by the Free Software Foundation;
with no Invariant Sections, with no
Front-Cover Texts, and with no Back-Cover Texts.
A copy of the license is included in the section entitled ``GNU
Free Documentation License''.
@@end titlepage

@@ifinfo
@@node Top, Preface, (dir), (dir)
@@top Version

Last updated @@value{lastupdate}.
@@end ifinfo

@@menu
* Preface::                     About the GNU Coding Standards
* Legal Issues::                Keeping Free Software Free
* Design Advice::               General Program Design
* Program Behavior::            Program Behavior for All Programs
* Writing C::                   Making The Best Use of C
* Documentation::               Documenting Programs
* Managing Releases::           The Release Process
* References::                  References to Non-Free Software or Documentation
* Copying This Manual::         How to Make Copies of This Manual
* Index::                       

@@end menu

@@node Preface
@@chapter About the GNU Coding Standards

The GNU Coding Standards were written by Richard Stallman and other GNU
Project volunteers.  Their purpose is to make the GNU system clean,
consistent, and easy to install.  This document can also be read as a
guide to writing portable, robust and reliable programs.  It focuses on
programs written in C, but many of the rules and principles are useful
even if you write in another programming language.  The rules often
state reasons for writing in a certain way.

This release of the GNU Coding Standards was last updated
@@value{lastupdate}.

@@cindex where to obtain @@code{standards.texi}
@@cindex downloading this manual
If you did not obtain this file directly from the GNU project and
recently, please check for a newer version.  You can ftp the GNU
Coding Standards from any GNU FTP host in the directory
@@file{/pub/gnu/standards/}.  The GNU Coding Standards are available
there in several different formats: @@file{standards.text},
@@file{standards.info}, and @@file{standards.dvi}, as well as the
Texinfo ``source'' which is divided in two files:
@@file{standards.texi} and @@file{make-stds.texi}.  The GNU Coding
Standards are also available on the GNU World Wide Web server:
@@uref{http://www.gnu.org/prep/standards_toc.html}.

Corrections or suggestions for this document should be sent to
@@email{bug-standards@@@@gnu.org}.  If you make a suggestion, please include a
suggested new wording for it; our time is limited.  We prefer a context
diff to the @@file{standards.texi} or @@file{make-stds.texi} files, but if
you don't have those files, please mail your suggestion anyway.

These standards cover the minimum of what is important when writing a
GNU package.  Likely, the needs for additional standards will come up.
Sometimes, you might suggest that such standards be added to this
document.  If you think your standards would be generally useful, please
do suggest them.

You should also set standards for your package on many questions not
addressed or not firmly specified here.  The most important point is to
be self-consistent---try to stick to the conventions you pick, and try
to document them as much as possible.  That way, your program will be
more maintainable by others.

@@node Legal Issues
@@chapter Keeping Free Software Free
@@cindex legal aspects

This @@value{CHAPTER} discusses how you can make sure that GNU software
avoids legal difficulties, and other related issues.

@@menu
* Reading Non-Free Code::       Referring to Proprietary Programs
* Contributions::               Accepting Contributions
* Trademarks::                  How We Deal with Trademark Issues
@@end menu

@@node Reading Non-Free Code
@@section Referring to Proprietary Programs
@@cindex proprietary programs
@@cindex avoiding proprietary code

Don't in any circumstances refer to Unix source code for or during
your work on GNU!  (Or to any other proprietary programs.)

If you have a vague recollection of the internals of a Unix program,
this does not absolutely mean you can't write an imitation of it, but
do try to organize the imitation internally along different lines,
because this is likely to make the details of the Unix version
irrelevant and dissimilar to your results.

For example, Unix utilities were generally optimized to minimize
memory use; if you go for speed instead, your program will be very
different.  You could keep the entire input file in core and scan it
there instead of using stdio.  Use a smarter algorithm discovered more
recently than the Unix program.  Eliminate use of temporary files.  Do
it in one pass instead of two (we did this in the assembler).

Or, on the contrary, emphasize simplicity instead of speed.  For some
applications, the speed of today's computers makes simpler algorithms
adequate.

Or go for generality.  For example, Unix programs often have static
tables or fixed-size strings, which make for arbitrary limits; use
dynamic allocation instead.  Make sure your program handles NULs and
other funny characters in the input files.  Add a programming language
for extensibility and write part of the program in that language.

Or turn some parts of the program into independently usable libraries.
Or use a simple garbage collector instead of tracking precisely when
to free memory, or use a new GNU facility such as obstacks.

@@node Contributions
@@section Accepting Contributions
@@cindex legal papers
@@cindex accepting contributions

If the program you are working on is copyrighted by the Free Software
Foundation, then when someone else sends you a piece of code to add to
the program, we need legal papers to use it---just as we asked you to
sign papers initially.  @@emph{Each} person who makes a nontrivial
contribution to a program must sign some sort of legal papers in order
for us to have clear title to the program; the main author alone is not
enough.

So, before adding in any contributions from other people, please tell
us, so we can arrange to get the papers.  Then wait until we tell you
that we have received the signed papers, before you actually use the
contribution.

This applies both before you release the program and afterward.  If
you receive diffs to fix a bug, and they make significant changes, we
need legal papers for that change.

This also applies to comments and documentation files.  For copyright
law, comments and code are just text.  Copyright applies to all kinds of
text, so we need legal papers for all kinds.

We know it is frustrating to ask for legal papers; it's frustrating for
us as well.  But if you don't wait, you are going out on a limb---for
example, what if the contributor's employer won't sign a disclaimer?
You might have to take that code out again!

You don't need papers for changes of a few lines here or there, since
they are not significant for copyright purposes.  Also, you don't need
papers if all you get from the suggestion is some ideas, not actual code
which you use.  For example, if someone send you one implementation, but
you write a different implementation of the same idea, you don't need to
get papers.

The very worst thing is if you forget to tell us about the other
contributor.  We could be very embarrassed in court some day as a
result.

We have more detailed advice for maintainers of programs; if you have
reached the stage of actually maintaining a program for GNU (whether
released or not), please ask us for a copy.

@@node Trademarks
@@section Trademarks
@@cindex trademarks

Please do not include any trademark acknowledgements in GNU software
packages or documentation.

Trademark acknowledgements are the statements that such-and-such is a
trademark of so-and-so.  The GNU Project has no objection to the basic
idea of trademarks, but these acknowledgements feel like kowtowing, so
we don't use them.  There is no legal requirement for them.

What is legally required, as regards other people's trademarks, is to
avoid using them in ways which a reader might read as naming or labeling
our own programs or activities.  For example, since ``Objective C'' is
(or at least was) a trademark, we made sure to say that we provide a
``compiler for the Objective C language'' rather than an ``Objective C
compiler''.  The latter is meant to be short for the former, but it does
not explicitly state the relationship, so it could be misinterpreted as
using ``Objective C'' as a label for the compiler rather than for the
language.

@@node Design Advice
@@chapter General Program Design
@@cindex program design

This @@value{CHAPTER} discusses some of the issues you should take into
account when designing your program.

@@c                         Standard or ANSI C
@@c
@@c In 1989 the American National Standards Institute (ANSI) standardized
@@c C   as  standard  X3.159-1989.    In  December   of  that   year  the
@@c International Standards Organization ISO  adopted the ANSI C standard
@@c making  minor changes.   In 1990  ANSI then  re-adopted  ISO standard
@@c C. This version of C is known as either ANSI C or Standard C.

@@c A major revision of the C Standard appeared in 1999.

@@menu
* Source Language::             Which languges to use.
* Compatibility::               Compatibility with other implementations
* Using Extensions::            Using non-standard features
* Standard C::                  Using Standard C features
* Conditional Compilation::     Compiling Code Only If A Conditional is True
@@end menu

@@node Source Language
@@section Which Languages to Use
@@cindex programming languges

When you want to use a language that gets compiled and runs at high
speed, the best language to use is C.  Using another language is like
using a non-standard feature: it will cause trouble for users.  Even if
GCC supports the other language, users may find it inconvenient to have
to install the compiler for that other language in order to build your
program.  For example, if you write your program in C++, people will
have to install the GNU C++ compiler in order to compile your program.

C has one other advantage over C++ and other compiled languages: more
people know C, so more people will find it easy to read and modify the
program if it is written in C.

So in general it is much better to use C, rather than the
comparable alternatives.

But there are two exceptions to that conclusion:

@@itemize @@bullet
@@item
It is no problem to use another language to write a tool specifically
intended for use with that language.  That is because the only people
who want to build the tool will be those who have installed the other
language anyway.

@@item
If an application is of interest only to a narrow part of the community,
then the question of which language it is written in has less effect on
other people, so you may as well please yourself.
@@end itemize

Many programs are designed to be extensible: they include an interpreter
for a language that is higher level than C.  Often much of the program
is written in that language, too.  The Emacs editor pioneered this
technique.

@@cindex GUILE
The standard extensibility interpreter for GNU software is GUILE, which
implements the language Scheme (an especially clean and simple dialect
of Lisp).  @@uref{http://www.gnu.org/software/guile/}.  We don't reject
programs written in other ``scripting languages'' such as Perl and
Python, but using GUILE is very important for the overall consistency of
the GNU system.

@@node Compatibility
@@section Compatibility with Other Implementations
@@cindex compatibility with C and @@sc{posix} standards
@@cindex @@sc{posix} compatibility

With occasional exceptions, utility programs and libraries for GNU
should be upward compatible with those in Berkeley Unix, and upward
compatible with Standard C if Standard C specifies their
behavior, and upward compatible with @@sc{posix} if @@sc{posix} specifies
their behavior.

When these standards conflict, it is useful to offer compatibility
modes for each of them.

@@cindex options for compatibility
Standard C and @@sc{posix} prohibit many kinds of extensions.  Feel
free to make the extensions anyway, and include a @@samp{--ansi},
@@samp{--posix}, or @@samp{--compatible} option to turn them off.
However, if the extension has a significant chance of breaking any real
programs or scripts, then it is not really upward compatible.  So you
should try to redesign its interface to make it upward compatible.

@@cindex @@code{POSIXLY_CORRECT}, environment variable
Many GNU programs suppress extensions that conflict with @@sc{posix} if the
environment variable @@code{POSIXLY_CORRECT} is defined (even if it is
defined with a null value).  Please make your program recognize this
variable if appropriate.

When a feature is used only by users (not by programs or command
files), and it is done poorly in Unix, feel free to replace it
completely with something totally different and better.  (For example,
@@code{vi} is replaced with Emacs.)  But it is nice to offer a compatible
feature as well.  (There is a free @@code{vi} clone, so we offer it.)

Additional useful features are welcome regardless of whether
there is any precedent for them.

@@node Using Extensions
@@section Using Non-standard Features
@@cindex non-standard extensions

Many GNU facilities that already exist support a number of convenient
extensions over the comparable Unix facilities.  Whether to use these
extensions in implementing your program is a difficult question.

On the one hand, using the extensions can make a cleaner program.
On the other hand, people will not be able to build the program
unless the other GNU tools are available.  This might cause the
program to work on fewer kinds of machines.

With some extensions, it might be easy to provide both alternatives.
For example, you can define functions with a ``keyword'' @@code{INLINE}
and define that as a macro to expand into either @@code{inline} or
nothing, depending on the compiler.

In general, perhaps it is best not to use the extensions if you can
straightforwardly do without them, but to use the extensions if they
are a big improvement.

An exception to this rule are the large, established programs (such as
Emacs) which run on a great variety of systems.  Using GNU extensions in
such programs would make many users unhappy, so we don't do that.

Another exception is for programs that are used as part of compilation:
anything that must be compiled with other compilers in order to
bootstrap the GNU compilation facilities.  If these require the GNU
compiler, then no one can compile them without having them installed
already.  That would be extremely troublesome in certain cases.

@@node Standard C
@@section Standard C and Pre-Standard C
@@cindex @@sc{ansi} C standard

1989 Standard C is widespread enough now that it is ok to use its
features in new programs.  There is one exception: do not ever use the
``trigraph'' feature of Standard C.

1999 Standard C is not widespread yet, so please do not require its
features in programs.  It is ok to use its features if they are present.

However, it is easy to support pre-standard compilers in most programs,
so if you know how to do that, feel free.  If a program you are
maintaining has such support, you should try to keep it working.

@@cindex function prototypes
To support pre-standard C, instead of writing function definitions in
standard prototype form,

@@example
int
foo (int x, int y)
@@dots{}
@@end example

@@noindent
write the definition in pre-standard style like this,

@@example
int
foo (x, y)
     int x, y;
@@dots{}
@@end example

@@noindent
and use a separate declaration to specify the argument prototype:

@@example
int foo (int, int);
@@end example

You need such a declaration anyway, in a header file, to get the benefit
of prototypes in all the files where the function is called.  And once
you have the declaration, you normally lose nothing by writing the
function definition in the pre-standard style.

This technique does not work for integer types narrower than @@code{int}.
If you think of an argument as being of a type narrower than @@code{int},
declare it as @@code{int} instead.

There are a few special cases where this technique is hard to use.  For
example, if a function argument needs to hold the system type
@@code{dev_t}, you run into trouble, because @@code{dev_t} is shorter than
@@code{int} on some machines; but you cannot use @@code{int} instead,
because @@code{dev_t} is wider than @@code{int} on some machines.  There
is no type you can safely use on all machines in a non-standard
definition.  The only way to support non-standard C and pass such an
argument is to check the width of @@code{dev_t} using Autoconf and choose
the argument type accordingly.  This may not be worth the trouble.

In order to support pre-standard compilers that do not recognize
prototypes, you may want to use a preprocessor macro like this:

@@example
/* Declare the prototype for a general external function.  */
#if defined (__STDC__) || defined (WINDOWSNT)
#define P_(proto) proto
#else
#define P_(proto) ()
#endif
@@end example

@@node Conditional Compilation
@@section Conditional Compilation

When supporting configuration options already known when building your
program we prefer using @@code{if (... )} over conditional compilation,
as in the former case the compiler is able to perform more extensive
checking of all possible code paths.

For example, please write

@@smallexample
  if (HAS_FOO)
    ...
  else
    ...
@@end smallexample

instead of:

@@smallexample
  #ifdef HAS_FOO
    ...
  #else
    ...
  #endif
@@end smallexample

A modern compiler such as GCC will generate exactly the same code in
both cases, and we have been using similar techniques with good success
in several projects.

While this is not a silver bullet solving all portability problems,
following this policy would have saved the GCC project alone many person
hours if not days per year.

In the case of function-like macros like @@code{REVERSIBLE_CC_MODE} in
GCC which cannot be simply used in @@code{if( ...)} statements, there is
an easy workaround.  Simply introduce another macro
@@code{HAS_REVERSIBLE_CC_MODE} as in the following example:

@@smallexample
  #ifdef REVERSIBLE_CC_MODE
  #define HAS_REVERSIBLE_CC_MODE 1
  #else
  #define HAS_REVERSIBLE_CC_MODE 0
  #endif
@@end smallexample

@@node Program Behavior
@@chapter Program Behavior for All Programs

This @@value{CHAPTER} describes conventions for writing robust
software.  It also describes general standards for error messages, the
command line interface, and how libraries should behave.

@@menu
* Semantics::                   Writing robust programs
* Libraries::                   Library behavior
* Errors::                      Formatting error messages
* User Interfaces::             Standards about interfaces generally
* Graphical Interfaces::        Standards for graphical interfaces
* Command-Line Interfaces::     Standards for command line interfaces
* Option Table::                Table of long options
* Memory Usage::                When and how to care about memory needs
* File Usage::                  Which files to use, and where
@@end menu

@@node Semantics
@@section Writing Robust Programs

@@cindex arbitrary limits on data
Avoid arbitrary limits on the length or number of @@emph{any} data
structure, including file names, lines, files, and symbols, by allocating
all data structures dynamically.  In most Unix utilities, ``long lines
are silently truncated''.  This is not acceptable in a GNU utility.

@@cindex @@code{NUL} characters
Utilities reading files should not drop NUL characters, or any other
nonprinting characters @@emph{including those with codes above 0177}.
The only sensible exceptions would be utilities specifically intended
for interface to certain types of terminals or printers
that can't handle those characters.
Whenever possible, try to make programs work properly with
sequences of bytes that represent multibyte characters, using encodings
such as UTF-8 and others.

@@cindex error messages
Check every system call for an error return, unless you know you wish to
ignore errors.  Include the system error text (from @@code{perror} or
equivalent) in @@emph{every} error message resulting from a failing
system call, as well as the name of the file if any and the name of the
utility.  Just ``cannot open foo.c'' or ``stat failed'' is not
sufficient.

@@cindex @@code{malloc} return value
@@cindex memory allocation failure
Check every call to @@code{malloc} or @@code{realloc} to see if it
returned zero.  Check @@code{realloc} even if you are making the block
smaller; in a system that rounds block sizes to a power of 2,
@@code{realloc} may get a different block if you ask for less space.

In Unix, @@code{realloc} can destroy the storage block if it returns
zero.  GNU @@code{realloc} does not have this bug: if it fails, the
original block is unchanged.  Feel free to assume the bug is fixed.  If
you wish to run your program on Unix, and wish to avoid lossage in this
case, you can use the GNU @@code{malloc}.

You must expect @@code{free} to alter the contents of the block that was
freed.  Anything you want to fetch from the block, you must fetch before
calling @@code{free}.

If @@code{malloc} fails in a noninteractive program, make that a fatal
error.  In an interactive program (one that reads commands from the
user), it is better to abort the command and return to the command
reader loop.  This allows the user to kill other processes to free up
virtual memory, and then try the command again.

@@cindex command-line arguments, decoding
Use @@code{getopt_long} to decode arguments, unless the argument syntax
makes this unreasonable.

When static storage is to be written in during program execution, use
explicit C code to initialize it.  Reserve C initialized declarations
for data that will not be changed.
@@c ADR: why?

Try to avoid low-level interfaces to obscure Unix data structures (such
as file directories, utmp, or the layout of kernel memory), since these
are less likely to work compatibly.  If you need to find all the files
in a directory, use @@code{readdir} or some other high-level interface.
These are supported compatibly by GNU.

@@cindex signal handling
The preferred signal handling facilities are the BSD variant of
@@code{signal}, and the @@sc{posix} @@code{sigaction} function; the
alternative USG @@code{signal} interface is an inferior design.

Nowadays, using the @@sc{posix} signal functions may be the easiest way
to make a program portable.  If you use @@code{signal}, then on GNU/Linux
systems running GNU libc version 1, you should include
@@file{bsd/signal.h} instead of @@file{signal.h}, so as to get BSD
behavior.  It is up to you whether to support systems where
@@code{signal} has only the USG behavior, or give up on them.

@@cindex impossible conditions
In error checks that detect ``impossible'' conditions, just abort.
There is usually no point in printing any message.  These checks
indicate the existence of bugs.  Whoever wants to fix the bugs will have
to read the source code and run a debugger.  So explain the problem with
comments in the source.  The relevant data will be in variables, which
are easy to examine with the debugger, so there is no point moving them
elsewhere.

Do not use a count of errors as the exit status for a program.
@@emph{That does not work}, because exit status values are limited to 8
bits (0 through 255).  A single run of the program might have 256
errors; if you try to return 256 as the exit status, the parent process
will see 0 as the status, and it will appear that the program succeeded.

@@cindex temporary files
@@cindex @@code{TMPDIR} environment variable
If you make temporary files, check the @@code{TMPDIR} environment
variable; if that variable is defined, use the specified directory
instead of @@file{/tmp}.

In addition, be aware that there is a possible security problem when
creating temporary files in world-writable directories.  In C, you can
avoid this problem by creating temporary files in this manner:

@@example
fd = open(filename, O_WRONLY | O_CREAT | O_EXCL, 0600);
@@end example

@@noindent
or by using the @@code{mkstemps} function from libiberty.

In bash, use @@code{set -C} to avoid this problem.

@@node Libraries
@@section Library Behavior
@@cindex libraries

Try to make library functions reentrant.  If they need to do dynamic
storage allocation, at least try to avoid any nonreentrancy aside from
that of @@code{malloc} itself.

Here are certain name conventions for libraries, to avoid name
conflicts.

Choose a name prefix for the library, more than two characters long.
All external function and variable names should start with this
prefix.  In addition, there should only be one of these in any given
library member.  This usually means putting each one in a separate
source file.

An exception can be made when two external symbols are always used
together, so that no reasonable program could use one without the
other; then they can both go in the same file.

External symbols that are not documented entry points for the user
should have names beginning with @@samp{_}.  The @@samp{_} should be
followed by the chosen name prefix for the library, to prevent
collisions with other libraries.  These can go in the same files with
user entry points if you like.

Static functions and variables can be used as you like and need not
fit any naming convention.

@@node Errors
@@section Formatting Error Messages
@@cindex formatting error messages
@@cindex error messages, formatting

Error messages from compilers should look like this:

@@example
@@var{source-file-name}:@@var{lineno}: @@var{message}
@@end example

@@noindent
If you want to mention the column number, use this format:

@@example
@@var{source-file-name}:@@var{lineno}:@@var{column}: @@var{message}
@@end example

@@noindent
Line numbers should start from 1 at the beginning of the file, and
column numbers should start from 1 at the beginning of the line.  (Both
of these conventions are chosen for compatibility.)  Calculate column
numbers assuming that space and all ASCII printing characters have
equal width, and assuming tab stops every 8 columns.

Error messages from other noninteractive programs should look like this:

@@example
@@var{program}:@@var{source-file-name}:@@var{lineno}: @@var{message}
@@end example

@@noindent
when there is an appropriate source file, or like this:

@@example
@@var{program}: @@var{message}
@@end example

@@noindent
when there is no relevant source file.

If you want to mention the column number, use this format:

@@example
@@var{program}:@@var{source-file-name}:@@var{lineno}:@@var{column}: @@var{message}
@@end example

In an interactive program (one that is reading commands from a
terminal), it is better not to include the program name in an error
message.  The place to indicate which program is running is in the
prompt or with the screen layout.  (When the same program runs with
input from a source other than a terminal, it is not interactive and
would do best to print error messages using the noninteractive style.)

The string @@var{message} should not begin with a capital letter when
it follows a program name and/or file name.  Also, it should not end
with a period.

Error messages from interactive programs, and other messages such as
usage messages, should start with a capital letter.  But they should not
end with a period.

@@node User Interfaces
@@section Standards for Interfaces Generally

@@cindex program name and its behavior
@@cindex behavior, dependent on program's name
Please don't make the behavior of a utility depend on the name used
to invoke it.  It is useful sometimes to make a link to a utility
with a different name, and that should not change what it does.

Instead, use a run time option or a compilation switch or both
to select among the alternate behaviors.

@@cindex output device and program's behavior
Likewise, please don't make the behavior of the program depend on the
type of output device it is used with.  Device independence is an
important principle of the system's design; do not compromise it merely
to save someone from typing an option now and then.  (Variation in error
message syntax when using a terminal is ok, because that is a side issue
that people do not depend on.)

If you think one behavior is most useful when the output is to a
terminal, and another is most useful when the output is a file or a
pipe, then it is usually best to make the default behavior the one that
is useful with output to a terminal, and have an option for the other
behavior.

Compatibility requires certain programs to depend on the type of output
device.  It would be disastrous if @@code{ls} or @@code{sh} did not do so
in the way all users expect.  In some of these cases, we supplement the
program with a preferred alternate version that does not depend on the
output device type.  For example, we provide a @@code{dir} program much
like @@code{ls} except that its default output format is always
multi-column format.

@@node Graphical Interfaces
@@section Standards for Graphical Interfaces
@@cindex graphical user interface

@@cindex gtk
When you write a program that provides a graphical user interface,
please make it work with X Windows and the GTK toolkit unless the
functionality specifically requires some alternative (for example,
``displaying jpeg images while in console mode'').

In addition, please provide a command-line interface to control the
functionality.  (In many cases, the graphical user interface can be a
separate program which invokes the command-line program.)  This is
so that the same jobs can be done from scripts.

@@cindex corba
@@cindex gnome
Please also consider providing a CORBA interface (for use from GNOME), a
library interface (for use from C), and perhaps a keyboard-driven
console interface (for use by users from console mode).  Once you are
doing the work to provide the functionality and the graphical interface,
these won't be much extra work.

@@node Command-Line Interfaces
@@section Standards for Command Line Interfaces
@@cindex command-line interface

@@findex getopt
It is a good idea to follow the @@sc{posix} guidelines for the
command-line options of a program.  The easiest way to do this is to use
@@code{getopt} to parse them.  Note that the GNU version of @@code{getopt}
will normally permit options anywhere among the arguments unless the
special argument @@samp{--} is used.  This is not what @@sc{posix}
specifies; it is a GNU extension.

@@cindex long-named options
Please define long-named options that are equivalent to the
single-letter Unix-style options.  We hope to make GNU more user
friendly this way.  This is easy to do with the GNU function
@@code{getopt_long}.

One of the advantages of long-named options is that they can be
consistent from program to program.  For example, users should be able
to expect the ``verbose'' option of any GNU program which has one, to be
spelled precisely @@samp{--verbose}.  To achieve this uniformity, look at
the table of common long-option names when you choose the option names
for your program (@@pxref{Option Table}).

It is usually a good idea for file names given as ordinary arguments to
be input files only; any output files would be specified using options
(preferably @@samp{-o} or @@samp{--output}).  Even if you allow an output
file name as an ordinary argument for compatibility, try to provide an
option as another way to specify it.  This will lead to more consistency
among GNU utilities, and fewer idiosyncracies for users to remember.

@@cindex standard command-line options
All programs should support two standard options: @@samp{--version}
and @@samp{--help}.

@@table @@code
@@cindex @@samp{--version} option
@@item --version
This option should direct the program to print information about its name,
version, origin and legal status, all on standard output, and then exit
successfully.  Other options and arguments should be ignored once this
is seen, and the program should not perform its normal function.

@@cindex canonical name of a program
@@cindex program's canonical name
The first line is meant to be easy for a program to parse; the version
number proper starts after the last space.  In addition, it contains
the canonical name for this program, in this format:

@@example
GNU Emacs 19.30
@@end example

@@noindent
The program's name should be a constant string; @@emph{don't} compute it
from @@code{argv[0]}.  The idea is to state the standard or canonical
name for the program, not its file name.  There are other ways to find
out the precise file name where a command is found in @@code{PATH}.

If the program is a subsidiary part of a larger package, mention the
package name in parentheses, like this:

@@example
emacsserver (GNU Emacs) 19.30
@@end example

@@noindent
If the package has a version number which is different from this
program's version number, you can mention the package version number
just before the close-parenthesis.

If you @@strong{need} to mention the version numbers of libraries which
are distributed separately from the package which contains this program,
you can do so by printing an additional line of version info for each
library you want to mention.  Use the same format for these lines as for
the first line.

Please do not mention all of the libraries that the program uses ``just
for completeness''---that would produce a lot of unhelpful clutter.
Please mention library version numbers only if you find in practice that
they are very important to you in debugging.

The following line, after the version number line or lines, should be a
copyright notice.  If more than one copyright notice is called for, put
each on a separate line.

Next should follow a brief statement that the program is free software,
and that users are free to copy and change it on certain conditions.  If
the program is covered by the GNU GPL, say so here.  Also mention that
there is no warranty, to the extent permitted by law.

It is ok to finish the output with a list of the major authors of the
program, as a way of giving credit.

Here's an example of output that follows these rules:

@@smallexample
GNU Emacs 19.34.5
Copyright (C) 1996 Free Software Foundation, Inc.
GNU Emacs comes with NO WARRANTY,
to the extent permitted by law.
You may redistribute copies of GNU Emacs
under the terms of the GNU General Public License.
For more information about these matters,
see the files named COPYING.
@@end smallexample

You should adapt this to your program, of course, filling in the proper
year, copyright holder, name of program, and the references to
distribution terms, and changing the rest of the wording as necessary.

This copyright notice only needs to mention the most recent year in
which changes were made---there's no need to list the years for previous
versions' changes.  You don't have to mention the name of the program in
these notices, if that is inconvenient, since it appeared in the first
line.

Translations of the above lines must preserve the validity of the
copyright notices (@@pxref{Internationalization}).  If the translation's
character set supports it, the @@samp{(C)} should be replaced with the
copyright symbol, as follows:

@@ifinfo 
(the official copyright symbol, which is the letter C in a circle); 
@@end ifinfo 
@@ifnotinfo 
@@copyright{}
@@end ifnotinfo 

Write the word ``Copyright'' exactly like that, in English.  Do not
translate it into another language.  International treaties recognize
the English word ``Copyright''; translations into other languages do not
have legal significance.


@@cindex @@samp{--help} option
@@item --help
This option should output brief documentation for how to invoke the
program, on standard output, then exit successfully.  Other options and
arguments should be ignored once this is seen, and the program should
not perform its normal function.

@@cindex address for bug reports
@@cindex bug reports
Near the end of the @@samp{--help} option's output there should be a line
that says where to mail bug reports.  It should have this format:

@@example
Report bugs to @@var{mailing-address}.
@@end example
@@end table

@@node Option Table
@@section Table of Long Options
@@cindex long option names
@@cindex table of long options

Here is a table of long options used by GNU programs.  It is surely
incomplete, but we aim to list all the options that a new program might
want to be compatible with.  If you use names not already in the table,
please send @@email{bug-standards@@@@gnu.org} a list of them, with their
meanings, so we can update the table.

@@c Please leave newlines between items in this table; it's much easier
@@c to update when it isn't completely squashed together and unreadable.
@@c When there is more than one short option for a long option name, put
@@c a semicolon between the lists of the programs that use them, not a
@@c period.   --friedman

@@table @@samp
@@item after-date
@@samp{-N} in @@code{tar}.

@@item all
@@samp{-a} in @@code{du}, @@code{ls}, @@code{nm}, @@code{stty}, @@code{uname},
and @@code{unexpand}.

@@item all-text
@@samp{-a} in @@code{diff}.

@@item almost-all
@@samp{-A} in @@code{ls}.

@@item append
@@samp{-a} in @@code{etags}, @@code{tee}, @@code{time};
@@samp{-r} in @@code{tar}.

@@item archive
@@samp{-a} in @@code{cp}.

@@item archive-name
@@samp{-n} in @@code{shar}.

@@item arglength
@@samp{-l} in @@code{m4}.

@@item ascii
@@samp{-a} in @@code{diff}.

@@item assign
@@samp{-v} in @@code{gawk}.

@@item assume-new
@@samp{-W} in Make.

@@item assume-old
@@samp{-o} in Make.

@@item auto-check
@@samp{-a} in @@code{recode}.

@@item auto-pager
@@samp{-a} in @@code{wdiff}.

@@item auto-reference
@@samp{-A} in @@code{ptx}.

@@item avoid-wraps
@@samp{-n} in @@code{wdiff}.

@@item background
For server programs, run in the background.

@@item backward-search
@@samp{-B} in @@code{ctags}.

@@item basename
@@samp{-f} in @@code{shar}.

@@item batch
Used in GDB.

@@item baud
Used in GDB.

@@item before
@@samp{-b} in @@code{tac}.

@@item binary
@@samp{-b} in @@code{cpio} and @@code{diff}.

@@item bits-per-code
@@samp{-b} in @@code{shar}.

@@item block-size
Used in @@code{cpio} and @@code{tar}.

@@item blocks
@@samp{-b} in @@code{head} and @@code{tail}.

@@item break-file
@@samp{-b} in @@code{ptx}.

@@item brief
Used in various programs to make output shorter.

@@item bytes
@@samp{-c} in @@code{head}, @@code{split}, and @@code{tail}.

@@item c@@t{++}
@@samp{-C} in @@code{etags}.

@@item catenate
@@samp{-A} in @@code{tar}.

@@item cd
Used in various programs to specify the directory to use.

@@item changes
@@samp{-c} in @@code{chgrp} and @@code{chown}.

@@item classify
@@samp{-F} in @@code{ls}.

@@item colons
@@samp{-c} in @@code{recode}.

@@item command
@@samp{-c} in @@code{su};
@@samp{-x} in GDB.

@@item compare
@@samp{-d} in @@code{tar}.

@@item compat
Used in @@code{gawk}.

@@item compress
@@samp{-Z} in @@code{tar} and @@code{shar}.

@@item concatenate
@@samp{-A} in @@code{tar}.

@@item confirmation
@@samp{-w} in @@code{tar}.

@@item context
Used in @@code{diff}.

@@item copyleft
@@samp{-W copyleft} in @@code{gawk}.

@@item copyright
@@samp{-C} in @@code{ptx}, @@code{recode}, and @@code{wdiff};
@@samp{-W copyright} in @@code{gawk}.

@@item core
Used in GDB.

@@item count
@@samp{-q} in @@code{who}.

@@item count-links
@@samp{-l} in @@code{du}.

@@item create
Used in @@code{tar} and @@code{cpio}.

@@item cut-mark
@@samp{-c} in @@code{shar}.

@@item cxref
@@samp{-x} in @@code{ctags}.

@@item date
@@samp{-d} in @@code{touch}.

@@item debug
@@samp{-d} in Make and @@code{m4};
@@samp{-t} in Bison.

@@item define
@@samp{-D} in @@code{m4}.

@@item defines
@@samp{-d} in Bison and @@code{ctags}.

@@item delete
@@samp{-D} in @@code{tar}.

@@item dereference
@@samp{-L} in @@code{chgrp}, @@code{chown}, @@code{cpio}, @@code{du},
@@code{ls}, and @@code{tar}.

@@item dereference-args
@@samp{-D} in @@code{du}.

@@item device
Specify an I/O device (special file name).

@@item diacritics
@@samp{-d} in @@code{recode}.

@@item dictionary-order
@@samp{-d} in @@code{look}.

@@item diff
@@samp{-d} in @@code{tar}.

@@item digits
@@samp{-n} in @@code{csplit}.

@@item directory
Specify the directory to use, in various programs.  In @@code{ls}, it
means to show directories themselves rather than their contents.  In
@@code{rm} and @@code{ln}, it means to not treat links to directories
specially.

@@item discard-all
@@samp{-x} in @@code{strip}.

@@item discard-locals
@@samp{-X} in @@code{strip}.

@@item dry-run
@@samp{-n} in Make.

@@item ed
@@samp{-e} in @@code{diff}.

@@item elide-empty-files
@@samp{-z} in @@code{csplit}.

@@item end-delete
@@samp{-x} in @@code{wdiff}.

@@item end-insert
@@samp{-z} in @@code{wdiff}.

@@item entire-new-file
@@samp{-N} in @@code{diff}.

@@item environment-overrides
@@samp{-e} in Make.

@@item eof
@@samp{-e} in @@code{xargs}.

@@item epoch
Used in GDB.

@@item error-limit
Used in @@code{makeinfo}.

@@item error-output
@@samp{-o} in @@code{m4}.

@@item escape
@@samp{-b} in @@code{ls}.

@@item exclude-from
@@samp{-X} in @@code{tar}.

@@item exec
Used in GDB.

@@item exit
@@samp{-x} in @@code{xargs}.

@@item exit-0
@@samp{-e} in @@code{unshar}.

@@item expand-tabs
@@samp{-t} in @@code{diff}.

@@item expression
@@samp{-e} in @@code{sed}.

@@item extern-only
@@samp{-g} in @@code{nm}.

@@item extract
@@samp{-i} in @@code{cpio};
@@samp{-x} in @@code{tar}.

@@item faces
@@samp{-f} in @@code{finger}.

@@item fast
@@samp{-f} in @@code{su}.

@@item fatal-warnings
@@samp{-E} in @@code{m4}.

@@item file
@@samp{-f} in @@code{info}, @@code{gawk}, Make, @@code{mt}, and @@code{tar};
@@samp{-n} in @@code{sed};
@@samp{-r} in @@code{touch}.

@@item field-separator
@@samp{-F} in @@code{gawk}.

@@item file-prefix
@@samp{-b} in Bison.

@@item file-type
@@samp{-F} in @@code{ls}.

@@item files-from
@@samp{-T} in @@code{tar}.

@@item fill-column
Used in @@code{makeinfo}.

@@item flag-truncation
@@samp{-F} in @@code{ptx}.

@@item fixed-output-files
@@samp{-y} in Bison.

@@item follow
@@samp{-f} in @@code{tail}.

@@item footnote-style
Used in @@code{makeinfo}.

@@item force
@@samp{-f} in @@code{cp}, @@code{ln}, @@code{mv}, and @@code{rm}.

@@item force-prefix
@@samp{-F} in @@code{shar}.

@@item foreground
For server programs, run in the foreground;
in other words, don't do anything special to run the server
in the background.

@@item format
Used in @@code{ls}, @@code{time}, and @@code{ptx}.

@@item freeze-state
@@samp{-F} in @@code{m4}.

@@item fullname
Used in GDB.

@@item gap-size
@@samp{-g} in @@code{ptx}.

@@item get
@@samp{-x} in @@code{tar}.

@@item graphic
@@samp{-i} in @@code{ul}.

@@item graphics
@@samp{-g} in @@code{recode}.

@@item group
@@samp{-g} in @@code{install}.

@@item gzip
@@samp{-z} in @@code{tar} and @@code{shar}.

@@item hashsize
@@samp{-H} in @@code{m4}.

@@item header
@@samp{-h} in @@code{objdump} and @@code{recode}

@@item heading
@@samp{-H} in @@code{who}.

@@item help
Used to ask for brief usage information.

@@item here-delimiter
@@samp{-d} in @@code{shar}.

@@item hide-control-chars
@@samp{-q} in @@code{ls}.

@@item html
In @@code{makeinfo}, output HTML.

@@item idle
@@samp{-u} in @@code{who}.

@@item ifdef
@@samp{-D} in @@code{diff}.

@@item ignore
@@samp{-I} in @@code{ls};
@@samp{-x} in @@code{recode}.

@@item ignore-all-space
@@samp{-w} in @@code{diff}.

@@item ignore-backups
@@samp{-B} in @@code{ls}.

@@item ignore-blank-lines
@@samp{-B} in @@code{diff}.

@@item ignore-case
@@samp{-f} in @@code{look} and @@code{ptx};
@@samp{-i} in @@code{diff} and @@code{wdiff}.

@@item ignore-errors
@@samp{-i} in Make.

@@item ignore-file
@@samp{-i} in @@code{ptx}.

@@item ignore-indentation
@@samp{-I} in @@code{etags}.

@@item ignore-init-file
@@samp{-f} in Oleo.

@@item ignore-interrupts
@@samp{-i} in @@code{tee}.

@@item ignore-matching-lines
@@samp{-I} in @@code{diff}.

@@item ignore-space-change
@@samp{-b} in @@code{diff}.

@@item ignore-zeros
@@samp{-i} in @@code{tar}.

@@item include
@@samp{-i} in @@code{etags};
@@samp{-I} in @@code{m4}.

@@item include-dir
@@samp{-I} in Make.

@@item incremental
@@samp{-G} in @@code{tar}.

@@item info
@@samp{-i}, @@samp{-l}, and @@samp{-m} in Finger.

@@item init-file
In some programs, specify the name of the file to read as the user's
init file.

@@item initial
@@samp{-i} in @@code{expand}.

@@item initial-tab
@@samp{-T} in @@code{diff}.

@@item inode
@@samp{-i} in @@code{ls}.

@@item interactive
@@samp{-i} in @@code{cp}, @@code{ln}, @@code{mv}, @@code{rm};
@@samp{-e} in @@code{m4};
@@samp{-p} in @@code{xargs};
@@samp{-w} in @@code{tar}.

@@item intermix-type
@@samp{-p} in @@code{shar}.

@@item iso-8601
Used in @@code{date}

@@item jobs
@@samp{-j} in Make.

@@item just-print
@@samp{-n} in Make.

@@item keep-going
@@samp{-k} in Make.

@@item keep-files
@@samp{-k} in @@code{csplit}.

@@item kilobytes
@@samp{-k} in @@code{du} and @@code{ls}.

@@item language
@@samp{-l} in @@code{etags}.

@@item less-mode
@@samp{-l} in @@code{wdiff}.

@@item level-for-gzip
@@samp{-g} in @@code{shar}.

@@item line-bytes
@@samp{-C} in @@code{split}.

@@item lines
Used in @@code{split}, @@code{head}, and @@code{tail}.

@@item link
@@samp{-l} in @@code{cpio}.

@@item lint
@@itemx lint-old
Used in @@code{gawk}.

@@item list
@@samp{-t} in @@code{cpio};
@@samp{-l} in @@code{recode}.

@@item list
@@samp{-t} in @@code{tar}.

@@item literal
@@samp{-N} in @@code{ls}.

@@item load-average
@@samp{-l} in Make.

@@item login
Used in @@code{su}.

@@item machine
No listing of which programs already use this;
someone should check to
see if any actually do, and tell @@email{gnu@@@@gnu.org}.

@@item macro-name
@@samp{-M} in @@code{ptx}.

@@item mail
@@samp{-m} in @@code{hello} and @@code{uname}.

@@item make-directories
@@samp{-d} in @@code{cpio}.

@@item makefile
@@samp{-f} in Make.

@@item mapped
Used in GDB.

@@item max-args
@@samp{-n} in @@code{xargs}.

@@item max-chars
@@samp{-n} in @@code{xargs}.

@@item max-lines
@@samp{-l} in @@code{xargs}.

@@item max-load
@@samp{-l} in Make.

@@item max-procs
@@samp{-P} in @@code{xargs}.

@@item mesg
@@samp{-T} in @@code{who}.

@@item message
@@samp{-T} in @@code{who}.

@@item minimal
@@samp{-d} in @@code{diff}.

@@item mixed-uuencode
@@samp{-M} in @@code{shar}.

@@item mode
@@samp{-m} in @@code{install}, @@code{mkdir}, and @@code{mkfifo}.

@@item modification-time
@@samp{-m} in @@code{tar}.

@@item multi-volume
@@samp{-M} in @@code{tar}.

@@item name-prefix
@@samp{-a} in Bison.

@@item nesting-limit
@@samp{-L} in @@code{m4}.

@@item net-headers
@@samp{-a} in @@code{shar}.

@@item new-file
@@samp{-W} in Make.

@@item no-builtin-rules
@@samp{-r} in Make.

@@item no-character-count
@@samp{-w} in @@code{shar}.

@@item no-check-existing
@@samp{-x} in @@code{shar}.

@@item no-common
@@samp{-3} in @@code{wdiff}.

@@item no-create
@@samp{-c} in @@code{touch}.

@@item no-defines
@@samp{-D} in @@code{etags}.

@@item no-deleted
@@samp{-1} in @@code{wdiff}.

@@item no-dereference
@@samp{-d} in @@code{cp}.

@@item no-inserted
@@samp{-2} in @@code{wdiff}.

@@item no-keep-going
@@samp{-S} in Make.

@@item no-lines
@@samp{-l} in Bison.

@@item no-piping
@@samp{-P} in @@code{shar}.

@@item no-prof
@@samp{-e} in @@code{gprof}.

@@item no-regex
@@samp{-R} in @@code{etags}.

@@item no-sort
@@samp{-p} in @@code{nm}.

@@item no-split
Used in @@code{makeinfo}.

@@item no-static
@@samp{-a} in @@code{gprof}.

@@item no-time
@@samp{-E} in @@code{gprof}.

@@item no-timestamp
@@samp{-m} in @@code{shar}.

@@item no-validate
Used in @@code{makeinfo}.

@@item no-wait
Used in @@code{emacsclient}.

@@item no-warn
Used in various programs to inhibit warnings.

@@item node
@@samp{-n} in @@code{info}.

@@item nodename
@@samp{-n} in @@code{uname}.

@@item nonmatching
@@samp{-f} in @@code{cpio}.

@@item nstuff
@@samp{-n} in @@code{objdump}.

@@item null
@@samp{-0} in @@code{xargs}.

@@item number
@@samp{-n} in @@code{cat}.

@@item number-nonblank
@@samp{-b} in @@code{cat}.

@@item numeric-sort
@@samp{-n} in @@code{nm}.

@@item numeric-uid-gid
@@samp{-n} in @@code{cpio} and @@code{ls}.

@@item nx
Used in GDB.

@@item old-archive
@@samp{-o} in @@code{tar}.

@@item old-file
@@samp{-o} in Make.

@@item one-file-system
@@samp{-l} in @@code{tar}, @@code{cp}, and @@code{du}.

@@item only-file
@@samp{-o} in @@code{ptx}.

@@item only-prof
@@samp{-f} in @@code{gprof}.

@@item only-time
@@samp{-F} in @@code{gprof}.

@@item options
@@samp{-o} in @@code{getopt}, @@code{fdlist}, @@code{fdmount},
@@code{fdmountd}, and @@code{fdumount}.

@@item output
In various programs, specify the output file name.

@@item output-prefix
@@samp{-o} in @@code{shar}.

@@item override
@@samp{-o} in @@code{rm}.

@@item overwrite
@@samp{-c} in @@code{unshar}.

@@item owner
@@samp{-o} in @@code{install}.

@@item paginate
@@samp{-l} in @@code{diff}.

@@item paragraph-indent
Used in @@code{makeinfo}.

@@item parents
@@samp{-p} in @@code{mkdir} and @@code{rmdir}.

@@item pass-all
@@samp{-p} in @@code{ul}.

@@item pass-through
@@samp{-p} in @@code{cpio}.

@@item port
@@samp{-P} in @@code{finger}.

@@item portability
@@samp{-c} in @@code{cpio} and @@code{tar}.

@@item posix
Used in @@code{gawk}.

@@item prefix-builtins
@@samp{-P} in @@code{m4}.

@@item prefix
@@samp{-f} in @@code{csplit}.

@@item preserve
Used in @@code{tar} and @@code{cp}.

@@item preserve-environment
@@samp{-p} in @@code{su}.

@@item preserve-modification-time
@@samp{-m} in @@code{cpio}.

@@item preserve-order
@@samp{-s} in @@code{tar}.

@@item preserve-permissions
@@samp{-p} in @@code{tar}.

@@item print
@@samp{-l} in @@code{diff}.

@@item print-chars
@@samp{-L} in @@code{cmp}.

@@item print-data-base
@@samp{-p} in Make.

@@item print-directory
@@samp{-w} in Make.

@@item print-file-name
@@samp{-o} in @@code{nm}.

@@item print-symdefs
@@samp{-s} in @@code{nm}.

@@item printer
@@samp{-p} in @@code{wdiff}.

@@item prompt
@@samp{-p} in @@code{ed}.

@@item proxy
Specify an HTTP proxy.

@@item query-user
@@samp{-X} in @@code{shar}.

@@item question
@@samp{-q} in Make.

@@item quiet
Used in many programs to inhibit the usual output.  @@strong{Note:} every
program accepting @@samp{--quiet} should accept @@samp{--silent} as a
synonym.

@@item quiet-unshar
@@samp{-Q} in @@code{shar}

@@item quote-name
@@samp{-Q} in @@code{ls}.

@@item rcs
@@samp{-n} in @@code{diff}.

@@item re-interval
Used in @@code{gawk}.

@@item read-full-blocks
@@samp{-B} in @@code{tar}.

@@item readnow
Used in GDB.

@@item recon
@@samp{-n} in Make.

@@item record-number
@@samp{-R} in @@code{tar}.

@@item recursive
Used in @@code{chgrp}, @@code{chown}, @@code{cp}, @@code{ls}, @@code{diff},
and @@code{rm}.

@@item reference-limit
Used in @@code{makeinfo}.

@@item references
@@samp{-r} in @@code{ptx}.

@@item regex
@@samp{-r} in @@code{tac} and @@code{etags}.

@@item release
@@samp{-r} in @@code{uname}.

@@item reload-state
@@samp{-R} in @@code{m4}.

@@item relocation
@@samp{-r} in @@code{objdump}.

@@item rename
@@samp{-r} in @@code{cpio}.

@@item replace
@@samp{-i} in @@code{xargs}.

@@item report-identical-files
@@samp{-s} in @@code{diff}.

@@item reset-access-time
@@samp{-a} in @@code{cpio}.

@@item reverse
@@samp{-r} in @@code{ls} and @@code{nm}.

@@item reversed-ed
@@samp{-f} in @@code{diff}.

@@item right-side-defs
@@samp{-R} in @@code{ptx}.

@@item same-order
@@samp{-s} in @@code{tar}.

@@item same-permissions
@@samp{-p} in @@code{tar}.

@@item save
@@samp{-g} in @@code{stty}.

@@item se
Used in GDB.

@@item sentence-regexp
@@samp{-S} in @@code{ptx}.

@@item separate-dirs
@@samp{-S} in @@code{du}.

@@item separator
@@samp{-s} in @@code{tac}.

@@item sequence
Used by @@code{recode} to chose files or pipes for sequencing passes.

@@item shell
@@samp{-s} in @@code{su}.

@@item show-all
@@samp{-A} in @@code{cat}.

@@item show-c-function
@@samp{-p} in @@code{diff}.

@@item show-ends
@@samp{-E} in @@code{cat}.

@@item show-function-line
@@samp{-F} in @@code{diff}.

@@item show-tabs
@@samp{-T} in @@code{cat}.

@@item silent
Used in many programs to inhibit the usual output.
@@strong{Note:} every program accepting
@@samp{--silent} should accept @@samp{--quiet} as a synonym.

@@item size
@@samp{-s} in @@code{ls}.

@@item socket
Specify a file descriptor for a network server to use for its socket,
instead of opening and binding a new socket.  This provides a way to
run, in a nonpriveledged process, a server that normally needs a
reserved port number.

@@item sort
Used in @@code{ls}.

@@item source
@@samp{-W source} in @@code{gawk}.

@@item sparse
@@samp{-S} in @@code{tar}.

@@item speed-large-files
@@samp{-H} in @@code{diff}.

@@item split-at
@@samp{-E} in @@code{unshar}.

@@item split-size-limit
@@samp{-L} in @@code{shar}.

@@item squeeze-blank
@@samp{-s} in @@code{cat}.

@@item start-delete
@@samp{-w} in @@code{wdiff}.

@@item start-insert
@@samp{-y} in @@code{wdiff}.

@@item starting-file
Used in @@code{tar} and @@code{diff} to specify which file within
a directory to start processing with.

@@item statistics
@@samp{-s} in @@code{wdiff}.

@@item stdin-file-list
@@samp{-S} in @@code{shar}.

@@item stop
@@samp{-S} in Make.

@@item strict
@@samp{-s} in @@code{recode}.

@@item strip
@@samp{-s} in @@code{install}.

@@item strip-all
@@samp{-s} in @@code{strip}.

@@item strip-debug
@@samp{-S} in @@code{strip}.

@@item submitter
@@samp{-s} in @@code{shar}.

@@item suffix
@@samp{-S} in @@code{cp}, @@code{ln}, @@code{mv}.

@@item suffix-format
@@samp{-b} in @@code{csplit}.

@@item sum
@@samp{-s} in @@code{gprof}.

@@item summarize
@@samp{-s} in @@code{du}.

@@item symbolic
@@samp{-s} in @@code{ln}.

@@item symbols
Used in GDB and @@code{objdump}.

@@item synclines
@@samp{-s} in @@code{m4}.

@@item sysname
@@samp{-s} in @@code{uname}.

@@item tabs
@@samp{-t} in @@code{expand} and @@code{unexpand}.

@@item tabsize
@@samp{-T} in @@code{ls}.

@@item terminal
@@samp{-T} in @@code{tput} and @@code{ul}.
@@samp{-t} in @@code{wdiff}.

@@item text
@@samp{-a} in @@code{diff}.

@@item text-files
@@samp{-T} in @@code{shar}.

@@item time
Used in @@code{ls} and @@code{touch}.

@@item timeout
Specify how long to wait before giving up on some operation.

@@item to-stdout
@@samp{-O} in @@code{tar}.

@@item total
@@samp{-c} in @@code{du}.

@@item touch
@@samp{-t} in Make, @@code{ranlib}, and @@code{recode}.

@@item trace
@@samp{-t} in @@code{m4}.

@@item traditional
@@samp{-t} in @@code{hello};
@@samp{-W traditional} in @@code{gawk};
@@samp{-G} in @@code{ed}, @@code{m4}, and @@code{ptx}.

@@item tty
Used in GDB.

@@item typedefs
@@samp{-t} in @@code{ctags}.

@@item typedefs-and-c++
@@samp{-T} in @@code{ctags}.

@@item typeset-mode
@@samp{-t} in @@code{ptx}.

@@item uncompress
@@samp{-z} in @@code{tar}.

@@item unconditional
@@samp{-u} in @@code{cpio}.

@@item undefine
@@samp{-U} in @@code{m4}.

@@item undefined-only
@@samp{-u} in @@code{nm}.

@@item update
@@samp{-u} in @@code{cp}, @@code{ctags}, @@code{mv}, @@code{tar}.

@@item usage
Used in @@code{gawk}; same as @@samp{--help}.

@@item uuencode
@@samp{-B} in @@code{shar}.

@@item vanilla-operation
@@samp{-V} in @@code{shar}.

@@item verbose
Print more information about progress.  Many programs support this.

@@item verify
@@samp{-W} in @@code{tar}.

@@item version
Print the version number.

@@item version-control
@@samp{-V} in @@code{cp}, @@code{ln}, @@code{mv}.

@@item vgrind
@@samp{-v} in @@code{ctags}.

@@item volume
@@samp{-V} in @@code{tar}.

@@item what-if
@@samp{-W} in Make.

@@item whole-size-limit
@@samp{-l} in @@code{shar}.

@@item width
@@samp{-w} in @@code{ls} and @@code{ptx}.

@@item word-regexp
@@samp{-W} in @@code{ptx}.

@@item writable
@@samp{-T} in @@code{who}.

@@item zeros
@@samp{-z} in @@code{gprof}.
@@end table

@@node Memory Usage
@@section Memory Usage
@@cindex memory usage

If a program typically uses just a few meg of memory, don't bother making any
effort to reduce memory usage.  For example, if it is impractical for
other reasons to operate on files more than a few meg long, it is
reasonable to read entire input files into core to operate on them.

However, for programs such as @@code{cat} or @@code{tail}, that can
usefully operate on very large files, it is important to avoid using a
technique that would artificially limit the size of files it can handle.
If a program works by lines and could be applied to arbitrary
user-supplied input files, it should keep only a line in memory, because
this is not very hard and users will want to be able to operate on input
files that are bigger than will fit in core all at once.

If your program creates complicated data structures, just make them in
core and give a fatal error if @@code{malloc} returns zero.

@@node File Usage
@@section File Usage
@@cindex file usage

Programs should be prepared to operate when @@file{/usr} and @@file{/etc}
are read-only file systems.  Thus, if the program manages log files,
lock files, backup files, score files, or any other files which are
modified for internal purposes, these files should not be stored in
@@file{/usr} or @@file{/etc}.

There are two exceptions.  @@file{/etc} is used to store system
configuration information; it is reasonable for a program to modify
files in @@file{/etc} when its job is to update the system configuration.
Also, if the user explicitly asks to modify one file in a directory, it
is reasonable for the program to store other files in the same
directory.

@@node Writing C
@@chapter Making The Best Use of C

This @@value{CHAPTER} provides advice on how best to use the C language
when writing GNU software.

@@menu
* Formatting::                  Formatting Your Source Code
* Comments::                    Commenting Your Work
* Syntactic Conventions::       Clean Use of C Constructs
* Names::                       Naming Variables, Functions, and Files
* System Portability::          Portability between different operating systems
* CPU Portability::             Supporting the range of CPU types
* System Functions::            Portability and ``standard'' library functions
* Internationalization::        Techniques for internationalization
* Mmap::                        How you can safely use @@code{mmap}.
@@end menu

@@node Formatting
@@section Formatting Your Source Code
@@cindex formatting source code

@@cindex open brace
@@cindex braces, in C source
It is important to put the open-brace that starts the body of a C
function in column zero, and avoid putting any other open-brace or
open-parenthesis or open-bracket in column zero.  Several tools look
for open-braces in column zero to find the beginnings of C functions.
These tools will not work on code not formatted that way.

It is also important for function definitions to start the name of the
function in column zero.  This helps people to search for function
definitions, and may also help certain tools recognize them.  Thus,
the proper format is this:

@@example
static char *
concat (s1, s2)        /* Name starts in column zero here */
     char *s1, *s2;
@@{                     /* Open brace in column zero here */
  @@dots{}
@@}
@@end example

@@noindent
or, if you want to use Standard C syntax, format the definition like
this:

@@example
static char *
concat (char *s1, char *s2)
@@{
  @@dots{}
@@}
@@end example

In Standard C, if the arguments don't fit nicely on one line,
split it like this:

@@example
int
lots_of_args (int an_integer, long a_long, short a_short,
              double a_double, float a_float)
@@dots{}
@@end example

The rest of this section gives our recommendations for other aspects of
C formatting style, which is also the default style of the @@code{indent}
program in version 1.2 and newer.  It corresponds to the options

@@smallexample
-nbad -bap -nbc -bbo -bl -bli2 -bls -ncdb -nce -cp1 -cs -di2
-ndj -nfc1 -nfca -hnl -i2 -ip5 -lp -pcs -psl -nsc -nsob
@@end smallexample

We don't think of these recommendations as requirements, because it
causes no problems for users if two different programs have different
formatting styles.

But whatever style you use, please use it consistently, since a mixture
of styles within one program tends to look ugly.  If you are
contributing changes to an existing program, please follow the style of
that program.

For the body of the function, our recommended style looks like this:

@@example
if (x < foo (y, z))
  haha = bar[4] + 5;
else
  @@{
    while (z)
      @@{
        haha += foo (z, z);
        z--;
      @@}
    return ++x + bar ();
  @@}
@@end example

@@cindex spaces before open-paren
We find it easier to read a program when it has spaces before the
open-parentheses and after the commas.  Especially after the commas.

When you split an expression into multiple lines, split it
before an operator, not after one.  Here is the right way:

@@cindex expressions, splitting
@@example
if (foo_this_is_long && bar > win (x, y, z)
    && remaining_condition)
@@end example

Try to avoid having two operators of different precedence at the same
level of indentation.  For example, don't write this:

@@example
mode = (inmode[j] == VOIDmode
        || GET_MODE_SIZE (outmode[j]) > GET_MODE_SIZE (inmode[j])
        ? outmode[j] : inmode[j]);
@@end example

Instead, use extra parentheses so that the indentation shows the nesting:

@@example
mode = ((inmode[j] == VOIDmode
         || (GET_MODE_SIZE (outmode[j]) > GET_MODE_SIZE (inmode[j])))
        ? outmode[j] : inmode[j]);
@@end example

Insert extra parentheses so that Emacs will indent the code properly.
For example, the following indentation looks nice if you do it by hand,

@@example
v = rup->ru_utime.tv_sec*1000 + rup->ru_utime.tv_usec/1000
    + rup->ru_stime.tv_sec*1000 + rup->ru_stime.tv_usec/1000;
@@end example

@@noindent
but Emacs would alter it.  Adding a set of parentheses produces
something that looks equally nice, and which Emacs will preserve:

@@example
v = (rup->ru_utime.tv_sec*1000 + rup->ru_utime.tv_usec/1000
     + rup->ru_stime.tv_sec*1000 + rup->ru_stime.tv_usec/1000);
@@end example

Format do-while statements like this:

@@example
do
  @@{
    a = foo (a);
  @@}
while (a > 0);
@@end example

@@cindex formfeed
@@cindex control-L
Please use formfeed characters (control-L) to divide the program into
pages at logical places (but not within a function).  It does not matter
just how long the pages are, since they do not have to fit on a printed
page.  The formfeeds should appear alone on lines by themselves.

@@node Comments
@@section Commenting Your Work
@@cindex commenting

Every program should start with a comment saying briefly what it is for.
Example: @@samp{fmt - filter for simple filling of text}.

Please write the comments in a GNU program in English, because English
is the one language that nearly all programmers in all countries can
read.  If you do not write English well, please write comments in
English as well as you can, then ask other people to help rewrite them.
If you can't write comments in English, please find someone to work with
you and translate your comments into English.

Please put a comment on each function saying what the function does,
what sorts of arguments it gets, and what the possible values of
arguments mean and are used for.  It is not necessary to duplicate in
words the meaning of the C argument declarations, if a C type is being
used in its customary fashion.  If there is anything nonstandard about
its use (such as an argument of type @@code{char *} which is really the
address of the second character of a string, not the first), or any
possible values that would not work the way one would expect (such as,
that strings containing newlines are not guaranteed to work), be sure
to say so.

Also explain the significance of the return value, if there is one.

Please put two spaces after the end of a sentence in your comments, so
that the Emacs sentence commands will work.  Also, please write
complete sentences and capitalize the first word.  If a lower-case
identifier comes at the beginning of a sentence, don't capitalize it!
Changing the spelling makes it a different identifier.  If you don't
like starting a sentence with a lower case letter, write the sentence
differently (e.g., ``The identifier lower-case is @@dots{}'').

The comment on a function is much clearer if you use the argument
names to speak about the argument values.  The variable name itself
should be lower case, but write it in upper case when you are speaking
about the value rather than the variable itself.  Thus, ``the inode
number NODE_NUM'' rather than ``an inode''.

There is usually no purpose in restating the name of the function in
the comment before it, because the reader can see that for himself.
There might be an exception when the comment is so long that the function
itself would be off the bottom of the screen.

There should be a comment on each static variable as well, like this:

@@example
/* Nonzero means truncate lines in the display;
   zero means continue them.  */
int truncate_lines;
@@end example

@@cindex conditionals, comments for
@@cindex @@code{#endif}, commenting
Every @@samp{#endif} should have a comment, except in the case of short
conditionals (just a few lines) that are not nested.  The comment should
state the condition of the conditional that is ending, @@emph{including
its sense}.  @@samp{#else} should have a comment describing the condition
@@emph{and sense} of the code that follows.  For example:

@@example
@@group
#ifdef foo
  @@dots{}
#else /* not foo */
  @@dots{}
#endif /* not foo */
@@end group
@@group
#ifdef foo
  @@dots{}
#endif /* foo */
@@end group
@@end example

@@noindent
but, by contrast, write the comments this way for a @@samp{#ifndef}:

@@example
@@group
#ifndef foo
  @@dots{}
#else /* foo */
  @@dots{}
#endif /* foo */
@@end group
@@group
#ifndef foo
  @@dots{}
#endif /* not foo */
@@end group
@@end example

@@node Syntactic Conventions
@@section Clean Use of C Constructs
@@cindex syntactic conventions

@@cindex implicit @@code{int}
@@cindex function argument, declaring
Please explicitly declare the types of all objects.  For example, you
should explicitly declare all arguments to functions, and you should
declare functions to return @@code{int} rather than omitting the
@@code{int}.

@@cindex compiler warnings
@@cindex @@samp{-Wall} compiler option
Some programmers like to use the GCC @@samp{-Wall} option, and change the
code whenever it issues a warning.  If you want to do this, then do.
Other programmers prefer not to use @@samp{-Wall}, because it gives
warnings for valid and legitimate code which they do not want to change.
If you want to do this, then do.  The compiler should be your servant,
not your master.

Declarations of external functions and functions to appear later in the
source file should all go in one place near the beginning of the file
(somewhere before the first function definition in the file), or else
should go in a header file.  Don't put @@code{extern} declarations inside
functions.

@@cindex temporary variables
It used to be common practice to use the same local variables (with
names like @@code{tem}) over and over for different values within one
function.  Instead of doing this, it is better declare a separate local
variable for each distinct purpose, and give it a name which is
meaningful.  This not only makes programs easier to understand, it also
facilitates optimization by good compilers.  You can also move the
declaration of each local variable into the smallest scope that includes
all its uses.  This makes the program even cleaner.

Don't use local variables or parameters that shadow global identifiers.

@@cindex multiple variables in a line
Don't declare multiple variables in one declaration that spans lines.
Start a new declaration on each line, instead.  For example, instead
of this:

@@example
@@group
int    foo,
       bar;
@@end group
@@end example

@@noindent
write either this:

@@example
int foo, bar;
@@end example

@@noindent
or this:

@@example
int foo;
int bar;
@@end example

@@noindent
(If they are global variables, each should have a comment preceding it
anyway.)

When you have an @@code{if}-@@code{else} statement nested in another
@@code{if} statement, always put braces around the @@code{if}-@@code{else}.
Thus, never write like this:

@@example
if (foo)
  if (bar)
    win ();
  else
    lose ();
@@end example

@@noindent
always like this:

@@example
if (foo)
  @@{
    if (bar)
      win ();
    else
      lose ();
  @@}
@@end example

If you have an @@code{if} statement nested inside of an @@code{else}
statement, either write @@code{else if} on one line, like this,

@@example
if (foo)
  @@dots{}
else if (bar)
  @@dots{}
@@end example

@@noindent
with its @@code{then}-part indented like the preceding @@code{then}-part,
or write the nested @@code{if} within braces like this:

@@example
if (foo)
  @@dots{}
else
  @@{
    if (bar)
      @@dots{}
  @@}
@@end example

Don't declare both a structure tag and variables or typedefs in the
same declaration.  Instead, declare the structure tag separately
and then use it to declare the variables or typedefs.

Try to avoid assignments inside @@code{if}-conditions.  For example,
don't write this:

@@example
if ((foo = (char *) malloc (sizeof *foo)) == 0)
  fatal ("virtual memory exhausted");
@@end example

@@noindent
instead, write this:

@@example
foo = (char *) malloc (sizeof *foo);
if (foo == 0)
  fatal ("virtual memory exhausted");
@@end example

@@pindex lint
Don't make the program ugly to placate @@code{lint}.  Please don't insert any
casts to @@code{void}.  Zero without a cast is perfectly fine as a null
pointer constant, except when calling a varargs function.

@@node Names
@@section Naming Variables, Functions, and Files

@@cindex names of variables, functions, and files
The names of global variables and functions in a program serve as
comments of a sort.  So don't choose terse names---instead, look for
names that give useful information about the meaning of the variable or
function.  In a GNU program, names should be English, like other
comments.

Local variable names can be shorter, because they are used only within
one context, where (presumably) comments explain their purpose.

Try to limit your use of abbreviations in symbol names.  It is ok to
make a few abbreviations, explain what they mean, and then use them
frequently, but don't use lots of obscure abbreviations.

Please use underscores to separate words in a name, so that the Emacs
word commands can be useful within them.  Stick to lower case; reserve
upper case for macros and @@code{enum} constants, and for name-prefixes
that follow a uniform convention.

For example, you should use names like @@code{ignore_space_change_flag};
don't use names like @@code{iCantReadThis}.

Variables that indicate whether command-line options have been
specified should be named after the meaning of the option, not after
the option-letter.  A comment should state both the exact meaning of
the option and its letter.  For example,

@@example
@@group
/* Ignore changes in horizontal whitespace (-b).  */
int ignore_space_change_flag;
@@end group
@@end example

When you want to define names with constant integer values, use
@@code{enum} rather than @@samp{#define}.  GDB knows about enumeration
constants.

@@cindex file-name limitations
@@pindex doschk
You might want to make sure that none of the file names would conflict
the files were loaded onto an MS-DOS file system which shortens the
names.  You can use the program @@code{doschk} to test for this.

Some GNU programs were designed to limit themselves to file names of 14
characters or less, to avoid file name conflicts if they are read into
older System V systems.  Please preserve this feature in the existing
GNU programs that have it, but there is no need to do this in new GNU
programs.  @@code{doschk} also reports file names longer than 14
characters.

@@node System Portability
@@section Portability between System Types
@@cindex portability, between system types

In the Unix world, ``portability'' refers to porting to different Unix
versions.  For a GNU program, this kind of portability is desirable, but
not paramount.

The primary purpose of GNU software is to run on top of the GNU kernel,
compiled with the GNU C compiler, on various types of @@sc{cpu}.  So the
kinds of portability that are absolutely necessary are quite limited.
But it is important to support Linux-based GNU systems, since they
are the form of GNU that is popular.

Beyond that, it is good to support the other free operating systems
(*BSD), and it is nice to support other Unix-like systems if you want
to.  Supporting a variety of Unix-like systems is desirable, although
not paramount.  It is usually not too hard, so you may as well do it.
But you don't have to consider it an obligation, if it does turn out to
be hard.

@@pindex autoconf
The easiest way to achieve portability to most Unix-like systems is to
use Autoconf.  It's unlikely that your program needs to know more
information about the host platform than Autoconf can provide, simply
because most of the programs that need such knowledge have already been
written.

Avoid using the format of semi-internal data bases (e.g., directories)
when there is a higher-level alternative (@@code{readdir}).

@@cindex non-@@sc{posix} systems, and portability
As for systems that are not like Unix, such as MSDOS, Windows, the
Macintosh, VMS, and MVS, supporting them is often a lot of work.  When
that is the case, it is better to spend your time adding features that
will be useful on GNU and GNU/Linux, rather than on supporting other
incompatible systems.

It is a good idea to define the ``feature test macro''
@@code{_GNU_SOURCE} when compiling your C files.  When you compile on GNU
or GNU/Linux, this will enable the declarations of GNU library extension
functions, and that will usually give you a compiler error message if
you define the same function names in some other way in your program.
(You don't have to actually @@emph{use} these functions, if you prefer
to make the program more portable to other systems.)

But whether or not you use these GNU extensions, you should avoid
using their names for any other meanings.  Doing so would make it hard
to move your code into other GNU programs.

@@node CPU Portability
@@section Portability between @@sc{cpu}s

@@cindex data types, and portability
@@cindex portability, and data types
Even GNU systems will differ because of differences among @@sc{cpu}
types---for example, difference in byte ordering and alignment
requirements.  It is absolutely essential to handle these differences.
However, don't make any effort to cater to the possibility that an
@@code{int} will be less than 32 bits.  We don't support 16-bit machines
in GNU.

Similarly, don't make any effort to cater to the possibility that
@@code{long} will be smaller than predefined types like @@code{size_t}.
For example, the following code is ok:

@@example
printf ("size = %lu\n", (unsigned long) sizeof array);
printf ("diff = %ld\n", (long) (pointer2 - pointer1));
@@end example

1989 Standard C requires this to work, and we know of only one
counterexample: 64-bit programs on Microsoft Windows IA-64.  We will
leave it to those who want to port GNU programs to that environment
to figure out how to do it.

Predefined file-size types like @@code{off_t} are an exception: they are
longer than @@code{long} on many platforms, so code like the above won't
work with them.  One way to print an @@code{off_t} value portably is to
print its digits yourself, one by one.

Don't assume that the address of an @@code{int} object is also the
address of its least-significant byte.  This is false on big-endian
machines.  Thus, don't make the following mistake:

@@example
int c;
@@dots{}
while ((c = getchar()) != EOF)
  write(file_descriptor, &c, 1);
@@end example

When calling functions, you need not worry about the difference between
pointers of various types, or between pointers and integers.  On most
machines, there's no difference anyway.  As for the few machines where
there is a difference, all of them support Standard C prototypes, so you can
use prototypes (perhaps conditionalized to be active only in Standard C)
to make the code work on those systems.

In certain cases, it is ok to pass integer and pointer arguments
indiscriminately to the same function, and use no prototype on any
system.  For example, many GNU programs have error-reporting functions
that pass their arguments along to @@code{printf} and friends:

@@example
error (s, a1, a2, a3)
     char *s;
     char *a1, *a2, *a3;
@@{
  fprintf (stderr, "error: ");
  fprintf (stderr, s, a1, a2, a3);
@@}
@@end example

@@noindent
In practice, this works on all machines, since a pointer is generally
the widest possible kind of argument; it is much simpler than any
``correct'' alternative.  Be sure @@emph{not} to use a prototype for such
functions.

If you have decided to use Standard C, then you can instead define
@@code{error} using @@file{stdarg.h}, and pass the arguments along to
@@code{vfprintf}.

@@cindex casting pointers to integers
Avoid casting pointers to integers if you can.  Such casts greatly
reduce portability, and in most programs they are easy to avoid.  In the
cases where casting pointers to integers is essential---such as, a Lisp
interpreter which stores type information as well as an address in one
word---you'll have to make explicit provisions to handle different word
sizes.  You will also need to make provision for systems in which the
normal range of addresses you can get from @@code{malloc} starts far away
from zero.

@@node System Functions
@@section Calling System Functions
@@cindex library functions, and portability
@@cindex portability, and library functions

C implementations differ substantially.  Standard C reduces but does
not eliminate the incompatibilities; meanwhile, many GNU packages still
support pre-standard compilers because this is not hard to do.  This
chapter gives recommendations for how to use the more-or-less standard C
library functions to avoid unnecessary loss of portability.

@@itemize @@bullet
@@item
Don't use the return value of @@code{sprintf}.  It returns the number of
characters written on some systems, but not on all systems.

@@item
Be aware that @@code{vfprintf} is not always available.

@@item
@@code{main} should be declared to return type @@code{int}.  It should
terminate either by calling @@code{exit} or by returning the integer
status code; make sure it cannot ever return an undefined value.

@@cindex declaration for system functions
@@item
Don't declare system functions explicitly.

Almost any declaration for a system function is wrong on some system.
To minimize conflicts, leave it to the system header files to declare
system functions.  If the headers don't declare a function, let it
remain undeclared.

While it may seem unclean to use a function without declaring it, in
practice this works fine for most system library functions on the
systems where this really happens; thus, the disadvantage is only
theoretical.  By contrast, actual declarations have frequently caused
actual conflicts.

@@item
If you must declare a system function, don't specify the argument types.
Use an old-style declaration, not a Standard C prototype.  The more you
specify about the function, the more likely a conflict.

@@item
In particular, don't unconditionally declare @@code{malloc} or
@@code{realloc}.

Most GNU programs use those functions just once, in functions
conventionally named @@code{xmalloc} and @@code{xrealloc}.  These
functions call @@code{malloc} and @@code{realloc}, respectively, and
check the results.

Because @@code{xmalloc} and @@code{xrealloc} are defined in your program,
you can declare them in other files without any risk of type conflict.

On most systems, @@code{int} is the same length as a pointer; thus, the
calls to @@code{malloc} and @@code{realloc} work fine.  For the few
exceptional systems (mostly 64-bit machines), you can use
@@strong{conditionalized} declarations of @@code{malloc} and
@@code{realloc}---or put these declarations in configuration files
specific to those systems.

@@cindex string library functions
@@item
The string functions require special treatment.  Some Unix systems have
a header file @@file{string.h}; others have @@file{strings.h}.  Neither
file name is portable.  There are two things you can do: use Autoconf to
figure out which file to include, or don't include either file.

@@item
If you don't include either strings file, you can't get declarations for
the string functions from the header file in the usual way.

That causes less of a problem than you might think.  The newer standard
string functions should be avoided anyway because many systems still
don't support them.  The string functions you can use are these:

@@example
strcpy   strncpy   strcat   strncat
strlen   strcmp    strncmp
strchr   strrchr
@@end example

The copy and concatenate functions work fine without a declaration as
long as you don't use their values.  Using their values without a
declaration fails on systems where the width of a pointer differs from
the width of @@code{int}, and perhaps in other cases.  It is trivial to
avoid using their values, so do that.

The compare functions and @@code{strlen} work fine without a declaration
on most systems, possibly all the ones that GNU software runs on.
You may find it necessary to declare them @@strong{conditionally} on a
few systems.

The search functions must be declared to return @@code{char *}.  Luckily,
there is no variation in the data type they return.  But there is
variation in their names.  Some systems give these functions the names
@@code{index} and @@code{rindex}; other systems use the names
@@code{strchr} and @@code{strrchr}.  Some systems support both pairs of
names, but neither pair works on all systems.

You should pick a single pair of names and use it throughout your
program.  (Nowadays, it is better to choose @@code{strchr} and
@@code{strrchr} for new programs, since those are the standard
names.)  Declare both of those names as functions returning @@code{char
*}.  On systems which don't support those names, define them as macros
in terms of the other pair.  For example, here is what to put at the
beginning of your file (or in a header) if you want to use the names
@@code{strchr} and @@code{strrchr} throughout:

@@example
#ifndef HAVE_STRCHR
#define strchr index
#endif
#ifndef HAVE_STRRCHR
#define strrchr rindex
#endif

char *strchr ();
char *strrchr ();
@@end example
@@end itemize

Here we assume that @@code{HAVE_STRCHR} and @@code{HAVE_STRRCHR} are
macros defined in systems where the corresponding functions exist.
One way to get them properly defined is to use Autoconf.

@@node Internationalization
@@section Internationalization
@@cindex internationalization

@@pindex gettext
GNU has a library called GNU gettext that makes it easy to translate the
messages in a program into various languages.  You should use this
library in every program.  Use English for the messages as they appear
in the program, and let gettext provide the way to translate them into
other languages.

Using GNU gettext involves putting a call to the @@code{gettext} macro
around each string that might need translation---like this:

@@example
printf (gettext ("Processing file `%s'..."));
@@end example

@@noindent
This permits GNU gettext to replace the string @@code{"Processing file
`%s'..."} with a translated version.

Once a program uses gettext, please make a point of writing calls to
@@code{gettext} when you add new strings that call for translation.

Using GNU gettext in a package involves specifying a @@dfn{text domain
name} for the package.  The text domain name is used to separate the
translations for this package from the translations for other packages.
Normally, the text domain name should be the same as the name of the
package---for example, @@samp{fileutils} for the GNU file utilities.

@@cindex message text, and internationalization
To enable gettext to work well, avoid writing code that makes
assumptions about the structure of words or sentences.  When you want
the precise text of a sentence to vary depending on the data, use two or
more alternative string constants each containing a complete sentences,
rather than inserting conditionalized words or phrases into a single
sentence framework.

Here is an example of what not to do:

@@example
printf ("%d file%s processed", nfiles,
        nfiles != 1 ? "s" : "");
@@end example

@@noindent
The problem with that example is that it assumes that plurals are made
by adding `s'.  If you apply gettext to the format string, like this,

@@example
printf (gettext ("%d file%s processed"), nfiles,
        nfiles != 1 ? "s" : "");
@@end example

@@noindent
the message can use different words, but it will still be forced to use
`s' for the plural.  Here is a better way:

@@example
printf ((nfiles != 1 ? "%d files processed"
         : "%d file processed"),
        nfiles);
@@end example

@@noindent
This way, you can apply gettext to each of the two strings
independently:

@@example
printf ((nfiles != 1 ? gettext ("%d files processed")
         : gettext ("%d file processed")),
        nfiles);
@@end example

@@noindent
This can be any method of forming the plural of the word for ``file'', and
also handles languages that require agreement in the word for
``processed''.

A similar problem appears at the level of sentence structure with this
code:

@@example
printf ("#  Implicit rule search has%s been done.\n",
        f->tried_implicit ? "" : " not");
@@end example

@@noindent
Adding @@code{gettext} calls to this code cannot give correct results for
all languages, because negation in some languages requires adding words
at more than one place in the sentence.  By contrast, adding
@@code{gettext} calls does the job straightfowardly if the code starts
out like this:

@@example
printf (f->tried_implicit
        ? "#  Implicit rule search has been done.\n",
        : "#  Implicit rule search has not been done.\n");
@@end example

@@node Mmap
@@section Mmap
@@findex mmap

Don't assume that @@code{mmap} either works on all files or fails
for all files.  It may work on some files and fail on others.

The proper way to use @@code{mmap} is to try it on the specific file for
which you want to use it---and if @@code{mmap} doesn't work, fall back on
doing the job in another way using @@code{read} and @@code{write}.

The reason this precaution is needed is that the GNU kernel (the HURD)
provides a user-extensible file system, in which there can be many
different kinds of ``ordinary files.''  Many of them support
@@code{mmap}, but some do not.  It is important to make programs handle
all these kinds of files.

@@node Documentation
@@chapter Documenting Programs
@@cindex documentation

A GNU program should ideally come with full free documentation, adequate
for both reference and tutorial purposes.  If the package can be
programmed or extended, the documentation should cover programming or
extending it, as well as just using it.

@@menu
* GNU Manuals::                 Writing proper manuals.
* Doc Strings and Manuals::     Compiling doc strings doesn't make a manual.
* Manual Structure Details::    Specific structure conventions.
* License for Manuals::         Writing the distribution terms for a manual.
* Manual Credits::              Giving credit to documentation contributors.
* Printed Manuals::             Mentioning the printed manual.
* NEWS File::                   NEWS files supplement manuals.
* Change Logs::                 Recording Changes
* Man Pages::                   Man pages are secondary.
* Reading other Manuals::       How far you can go in learning
                                from other manuals.
@@end menu

@@node GNU Manuals
@@section GNU Manuals

The preferred document format for the GNU system is the Texinfo
formatting language.  Every GNU package should (ideally) have
documentation in Texinfo both for reference and for learners.  Texinfo
makes it possible to produce a good quality formatted book, using
@@TeX{}, and to generate an Info file.  It is also possible to generate
HTML output from Texinfo source.  See the Texinfo manual, either the
hardcopy, or the on-line version available through @@code{info} or the
Emacs Info subsystem (@@kbd{C-h i}).

Nowadays some other formats such as Docbook and Sgmltexi can be
converted automatically into Texinfo.  It is ok to produce the Texinfo
documentation by conversion this way, as long as it gives good results.

Programmers often find it most natural to structure the documentation
following the structure of the implementation, which they know.  But
this structure is not necessarily good for explaining how to use the
program; it may be irrelevant and confusing for a user.

At every level, from the sentences in a paragraph to the grouping of
topics into separate manuals, the right way to structure documentation
is according to the concepts and questions that a user will have in mind
when reading it.  Sometimes this structure of ideas matches the
structure of the implementation of the software being documented---but
often they are different.  Often the most important part of learning to
write good documentation is learning to notice when you are structuring
the documentation like the implementation, and think about better
alternatives.

For example, each program in the GNU system probably ought to be
documented in one manual; but this does not mean each program should
have its own manual.  That would be following the structure of the
implementation, rather than the structure that helps the user
understand.

Instead, each manual should cover a coherent @@emph{topic}.  For example,
instead of a manual for @@code{diff} and a manual for @@code{diff3}, we
have one manual for ``comparison of files'' which covers both of those
programs, as well as @@code{cmp}.  By documenting these programs
together, we can make the whole subject clearer.

The manual which discusses a program should certainly document all of
the program's command-line options and all of its commands.  It should
give examples of their use.  But don't organize the manual as a list of
features.  Instead, organize it logically, by subtopics.  Address the
questions that a user will ask when thinking about the job that the
program does.

In general, a GNU manual should serve both as tutorial and reference.
It should be set up for convenient access to each topic through Info,
and for reading straight through (appendixes aside).  A GNU manual
should give a good introduction to a beginner reading through from the
start, and should also provide all the details that hackers want.
The Bison manual is a good example of this---please take a look at it
to see what we mean.

That is not as hard as it first sounds.  Arrange each chapter as a
logical breakdown of its topic, but order the sections, and write their
text, so that reading the chapter straight through makes sense.  Do
likewise when structuring the book into chapters, and when structuring a
section into paragraphs.  The watchword is, @@emph{at each point, address
the most fundamental and important issue raised by the preceding text.}

If necessary, add extra chapters at the beginning of the manual which
are purely tutorial and cover the basics of the subject.  These provide
the framework for a beginner to understand the rest of the manual.  The
Bison manual provides a good example of how to do this.

To serve as a reference, a manual should have an Index that list all the
functions, variables, options, and important concepts that are part of
the program.  One combined Index should do for a short manual, but
sometimes for a complex package it is better to use multiple indices.
The Texinfo manual includes advice on preparing good index entries, see
@@ref{Index Entries, , Making Index Entries, texinfo, The GNU Texinfo
Manual}, and see @@ref{Indexing Commands, , Defining the Entries of an
Index, texinfo, The GNU Texinfo manual}.

Don't use Unix man pages as a model for how to write GNU documentation;
most of them are terse, badly structured, and give inadequate
explanation of the underlying concepts.  (There are, of course, some
exceptions.)  Also, Unix man pages use a particular format which is
different from what we use in GNU manuals.

Please include an email address in the manual for where to report
bugs @@emph{in the manual}.

Please do not use the term ``pathname'' that is used in Unix
documentation; use ``file name'' (two words) instead.  We use the term
``path'' only for search paths, which are lists of directory names.

Please do not use the term ``illegal'' to refer to erroneous input to a
computer program.  Please use ``invalid'' for this, and reserve the term
``illegal'' for activities punishable by law.

@@node Doc Strings and Manuals
@@section Doc Strings and Manuals

Some programming systems, such as Emacs, provide a documentation string
for each function, command or variable.  You may be tempted to write a
reference manual by compiling the documentation strings and writing a
little additional text to go around them---but you must not do it.  That
approach is a fundamental mistake.  The text of well-written
documentation strings will be entirely wrong for a manual.

A documentation string needs to stand alone---when it appears on the
screen, there will be no other text to introduce or explain it.
Meanwhile, it can be rather informal in style.

The text describing a function or variable in a manual must not stand
alone; it appears in the context of a section or subsection.  Other text
at the beginning of the section should explain some of the concepts, and
should often make some general points that apply to several functions or
variables.  The previous descriptions of functions and variables in the
section will also have given information about the topic.  A description
written to stand alone would repeat some of that information; this
redundance looks bad.  Meanwhile, the informality that is acceptable in
a documentation string is totally unacceptable in a manual.

The only good way to use documentation strings in writing a good manual
is to use them as a source of information for writing good text.

@@node Manual Structure Details
@@section Manual Structure Details
@@cindex manual structure

The title page of the manual should state the version of the programs or
packages documented in the manual.  The Top node of the manual should
also contain this information.  If the manual is changing more
frequently than or independent of the program, also state a version
number for the manual in both of these places.

Each program documented in the manual should have a node named
@@samp{@@var{program} Invocation} or @@samp{Invoking @@var{program}}.  This
node (together with its subnodes, if any) should describe the program's
command line arguments and how to run it (the sort of information people
would look in a man page for).  Start with an @@samp{@@@@example}
containing a template for all the options and arguments that the program
uses.

Alternatively, put a menu item in some menu whose item name fits one of
the above patterns.  This identifies the node which that item points to
as the node for this purpose, regardless of the node's actual name.

The @@samp{--usage} feature of the Info reader looks for such a node
or menu item in order to find the relevant text, so it is essential
for every Texinfo file to have one.

If one manual describes several programs, it should have such a node for
each program described in the manual.

@@node License for Manuals
@@section License for Manuals
@@cindex license for manuals

Please use the GNU Free Documentation License for all GNU manuals that
are more than a few pages long.  Likewise for a collection of short
documents---you only need one copy of the GNU FDL for the whole
collection.  For a single short document, you can use a very permissive
non-copyleft license, to avoid taking up space with a long license.

See @@uref{http://www.gnu.org/copyleft/fdl-howto.html} for more explanation
of how to employ the GFDL.

Note that it is not obligatory to include a copy of the GNU GPL or GNU
LGPL in a manual whose license is neither the GPL nor the LGPL.  It can
be a good idea to include the program's license in a large manual; in a
short manual, whose size would be increased considerably by including
the program's license, it is probably better not to include it.

@@node Manual Credits
@@section Manual Credits
@@cindex credits for manuals

Please credit the principal human writers of the manual as the authors,
on the title page of the manual.  If a company sponsored the work, thank
the company in a suitable place in the manual, but do not cite the
company as an author.

@@node Printed Manuals
@@section Printed Manuals

The FSF publishes some GNU manuals in printed form.  To encourage sales
of these manuals, the on-line versions of the manual should mention at
the very start that the printed manual is available and should point at
information for getting it---for instance, with a link to the page
@@url{http://www.gnu.org/order/order.html}.  This should not be included
in the printed manual, though, because there it is redundant.

It is also useful to explain in the on-line forms of the manual how the
user can print out the manual from the sources.

@@node NEWS File
@@section The NEWS File
@@cindex @@file{NEWS} file

In addition to its manual, the package should have a file named
@@file{NEWS} which contains a list of user-visible changes worth
mentioning.  In each new release, add items to the front of the file and
identify the version they pertain to.  Don't discard old items; leave
them in the file after the newer items.  This way, a user upgrading from
any previous version can see what is new.

If the @@file{NEWS} file gets very long, move some of the older items
into a file named @@file{ONEWS} and put a note at the end referring the
user to that file.

@@node Change Logs
@@section Change Logs
@@cindex change logs

Keep a change log to describe all the changes made to program source
files.  The purpose of this is so that people investigating bugs in the
future will know about the changes that might have introduced the bug.
Often a new bug can be found by looking at what was recently changed.
More importantly, change logs can help you eliminate conceptual
inconsistencies between different parts of a program, by giving you a
history of how the conflicting concepts arose and who they came from.

@@menu
* Change Log Concepts::         
* Style of Change Logs::        
* Simple Changes::              
* Conditional Changes::         
* Indicating the Part Changed::
@@end menu

@@node Change Log Concepts
@@subsection Change Log Concepts

You can think of the change log as a conceptual ``undo list'' which
explains how earlier versions were different from the current version.
People can see the current version; they don't need the change log
to tell them what is in it.  What they want from a change log is a
clear explanation of how the earlier version differed.

The change log file is normally called @@file{ChangeLog} and covers an
entire directory.  Each directory can have its own change log, or a
directory can use the change log of its parent directory--it's up to
you.

Another alternative is to record change log information with a version
control system such as RCS or CVS.  This can be converted automatically
to a @@file{ChangeLog} file using @@code{rcs2log}; in Emacs, the command
@@kbd{C-x v a} (@@code{vc-update-change-log}) does the job.

There's no need to describe the full purpose of the changes or how they
work together.  If you think that a change calls for explanation, you're
probably right.  Please do explain it---but please put the explanation
in comments in the code, where people will see it whenever they see the
code.  For example, ``New function'' is enough for the change log when
you add a function, because there should be a comment before the
function definition to explain what it does.

However, sometimes it is useful to write one line to describe the
overall purpose of a batch of changes.

The easiest way to add an entry to @@file{ChangeLog} is with the Emacs
command @@kbd{M-x add-change-log-entry}.  An entry should have an
asterisk, the name of the changed file, and then in parentheses the name
of the changed functions, variables or whatever, followed by a colon.
Then describe the changes you made to that function or variable.

@@node Style of Change Logs
@@subsection Style of Change Logs
@@cindex change logs, style

Here are some simple examples of change log entries, starting with the
header line that says who made the change and when, followed by
descriptions of specific changes.  (These examples are drawn from Emacs
and GCC.)

@@example
1998-08-17  Richard Stallman  <rms@@@@gnu.org>

* register.el (insert-register): Return nil.
(jump-to-register): Likewise.

* sort.el (sort-subr): Return nil.

* tex-mode.el (tex-bibtex-file, tex-file, tex-region):
Restart the tex shell if process is gone or stopped.
(tex-shell-running): New function.

* expr.c (store_one_arg): Round size up for move_block_to_reg.
(expand_call): Round up when emitting USE insns.
* stmt.c (assign_parms): Round size up for move_block_from_reg.
@@end example

It's important to name the changed function or variable in full.  Don't
abbreviate function or variable names, and don't combine them.
Subsequent maintainers will often search for a function name to find all
the change log entries that pertain to it; if you abbreviate the name,
they won't find it when they search.

For example, some people are tempted to abbreviate groups of function
names by writing @@samp{* register.el (@@{insert,jump-to@@}-register)};
this is not a good idea, since searching for @@code{jump-to-register} or
@@code{insert-register} would not find that entry.

Separate unrelated change log entries with blank lines.  When two
entries represent parts of the same change, so that they work together,
then don't put blank lines between them.  Then you can omit the file
name and the asterisk when successive entries are in the same file.

Break long lists of function names by closing continued lines with
@@samp{)}, rather than @@samp{,}, and opening the continuation with
@@samp{(} as in this example:

@@example
* keyboard.c (menu_bar_items, tool_bar_items)
(Fexecute_extended_command): Deal with `keymap' property.
@@end example

@@node Simple Changes
@@subsection Simple Changes

Certain simple kinds of changes don't need much detail in the change
log.

When you change the calling sequence of a function in a simple fashion,
and you change all the callers of the function to use the new calling
sequence, there is no need to make individual entries for all the
callers that you changed.  Just write in the entry for the function
being called, ``All callers changed''---like this:

@@example
* keyboard.c (Fcommand_execute): New arg SPECIAL.
All callers changed.
@@end example

When you change just comments or doc strings, it is enough to write an
entry for the file, without mentioning the functions.  Just ``Doc
fixes'' is enough for the change log.

There's no need to make change log entries for documentation files.
This is because documentation is not susceptible to bugs that are hard
to fix.  Documentation does not consist of parts that must interact in a
precisely engineered fashion.  To correct an error, you need not know
the history of the erroneous passage; it is enough to compare what the
documentation says with the way the program actually works.

@@node Conditional Changes
@@subsection Conditional Changes
@@cindex conditional changes, and change logs
@@cindex change logs, conditional changes

C programs often contain compile-time @@code{#if} conditionals.  Many
changes are conditional; sometimes you add a new definition which is
entirely contained in a conditional.  It is very useful to indicate in
the change log the conditions for which the change applies.

Our convention for indicating conditional changes is to use square
brackets around the name of the condition.

Here is a simple example, describing a change which is conditional but
does not have a function or entity name associated with it:

@@example
* xterm.c [SOLARIS2]: Include string.h.
@@end example

Here is an entry describing a new definition which is entirely
conditional.  This new definition for the macro @@code{FRAME_WINDOW_P} is
used only when @@code{HAVE_X_WINDOWS} is defined:

@@example
* frame.h [HAVE_X_WINDOWS] (FRAME_WINDOW_P): Macro defined.
@@end example

Here is an entry for a change within the function @@code{init_display},
whose definition as a whole is unconditional, but the changes themselves
are contained in a @@samp{#ifdef HAVE_LIBNCURSES} conditional:

@@example
* dispnew.c (init_display) [HAVE_LIBNCURSES]: If X, call tgetent.
@@end example

Here is an entry for a change that takes affect only when
a certain macro is @@emph{not} defined:

@@example
(gethostname) [!HAVE_SOCKETS]: Replace with winsock version.
@@end example

@@node Indicating the Part Changed
@@subsection Indicating the Part Changed

Indicate the part of a function which changed by using angle brackets
enclosing an indication of what the changed part does.  Here is an entry
for a change in the part of the function @@code{sh-while-getopts} that
deals with @@code{sh} commands:

@@example
* progmodes/sh-script.el (sh-while-getopts) <sh>: Handle case that
user-specified option string is empty.
@@end example


@@node Man Pages
@@section Man Pages
@@cindex man pages

In the GNU project, man pages are secondary.  It is not necessary or
expected for every GNU program to have a man page, but some of them do.
It's your choice whether to include a man page in your program.

When you make this decision, consider that supporting a man page
requires continual effort each time the program is changed.  The time
you spend on the man page is time taken away from more useful work.

For a simple program which changes little, updating the man page may be
a small job.  Then there is little reason not to include a man page, if
you have one.

For a large program that changes a great deal, updating a man page may
be a substantial burden.  If a user offers to donate a man page, you may
find this gift costly to accept.  It may be better to refuse the man
page unless the same person agrees to take full responsibility for
maintaining it---so that you can wash your hands of it entirely.  If
this volunteer later ceases to do the job, then don't feel obliged to
pick it up yourself; it may be better to withdraw the man page from the
distribution until someone else agrees to update it.

When a program changes only a little, you may feel that the
discrepancies are small enough that the man page remains useful without
updating.  If so, put a prominent note near the beginning of the man
page explaining that you don't maintain it and that the Texinfo manual
is more authoritative.  The note should say how to access the Texinfo
documentation.

@@node Reading other Manuals
@@section Reading other Manuals

There may be non-free books or documentation files that describe the
program you are documenting.

It is ok to use these documents for reference, just as the author of a
new algebra textbook can read other books on algebra.  A large portion
of any non-fiction book consists of facts, in this case facts about how
a certain program works, and these facts are necessarily the same for
everyone who writes about the subject.  But be careful not to copy your
outline structure, wording, tables or examples from preexisting non-free
documentation.  Copying from free documentation may be ok; please check
with the FSF about the individual case.

@@node Managing Releases
@@chapter The Release Process
@@cindex releasing

Making a release is more than just bundling up your source files in a
tar file and putting it up for FTP.  You should set up your software so
that it can be configured to run on a variety of systems.  Your Makefile
should conform to the GNU standards described below, and your directory
layout should also conform to the standards discussed below.  Doing so
makes it easy to include your package into the larger framework of
all GNU software.

@@menu
* Configuration::               How Configuration Should Work
* Makefile Conventions::        Makefile Conventions
* Releases::                    Making Releases
@@end menu

@@node Configuration
@@section How Configuration Should Work
@@cindex program configuration

@@pindex configure
Each GNU distribution should come with a shell script named
@@code{configure}.  This script is given arguments which describe the
kind of machine and system you want to compile the program for.

The @@code{configure} script must record the configuration options so
that they affect compilation.

One way to do this is to make a link from a standard name such as
@@file{config.h} to the proper configuration file for the chosen system.
If you use this technique, the distribution should @@emph{not} contain a
file named @@file{config.h}.  This is so that people won't be able to
build the program without configuring it first.

Another thing that @@code{configure} can do is to edit the Makefile.  If
you do this, the distribution should @@emph{not} contain a file named
@@file{Makefile}.  Instead, it should include a file @@file{Makefile.in} which
contains the input used for editing.  Once again, this is so that people
won't be able to build the program without configuring it first.

If @@code{configure} does write the @@file{Makefile}, then @@file{Makefile}
should have a target named @@file{Makefile} which causes @@code{configure}
to be rerun, setting up the same configuration that was set up last
time.  The files that @@code{configure} reads should be listed as
dependencies of @@file{Makefile}.

All the files which are output from the @@code{configure} script should
have comments at the beginning explaining that they were generated
automatically using @@code{configure}.  This is so that users won't think
of trying to edit them by hand.

The @@code{configure} script should write a file named @@file{config.status}
which describes which configuration options were specified when the
program was last configured.  This file should be a shell script which,
if run, will recreate the same configuration.

The @@code{configure} script should accept an option of the form
@@samp{--srcdir=@@var{dirname}} to specify the directory where sources are found
(if it is not the current directory).  This makes it possible to build
the program in a separate directory, so that the actual source directory
is not modified.

If the user does not specify @@samp{--srcdir}, then @@code{configure} should
check both @@file{.} and @@file{..} to see if it can find the sources.  If
it finds the sources in one of these places, it should use them from
there.  Otherwise, it should report that it cannot find the sources, and
should exit with nonzero status.

Usually the easy way to support @@samp{--srcdir} is by editing a
definition of @@code{VPATH} into the Makefile.  Some rules may need to
refer explicitly to the specified source directory.  To make this
possible, @@code{configure} can add to the Makefile a variable named
@@code{srcdir} whose value is precisely the specified directory.

The @@code{configure} script should also take an argument which specifies the
type of system to build the program for.  This argument should look like
this:

@@example
@@var{cpu}-@@var{company}-@@var{system}
@@end example

For example, a Sun 3 might be @@samp{m68k-sun-sunos4.1}.

The @@code{configure} script needs to be able to decode all plausible
alternatives for how to describe a machine.  Thus, @@samp{sun3-sunos4.1}
would be a valid alias.  For many programs, @@samp{vax-dec-ultrix} would
be an alias for @@samp{vax-dec-bsd}, simply because the differences
between Ultrix and @@sc{bsd} are rarely noticeable, but a few programs
might need to distinguish them.
@@c Real 4.4BSD now runs on some Suns.

There is a shell script called @@file{config.sub} that you can use
as a subroutine to validate system types and canonicalize aliases.

@@cindex optional features, configure-time
Other options are permitted to specify in more detail the software
or hardware present on the machine, and include or exclude optional
parts of the package:

@@table @@samp
@@item --enable-@@var{feature}@@r{[}=@@var{parameter}@@r{]}
Configure the package to build and install an optional user-level
facility called @@var{feature}.  This allows users to choose which
optional features to include.  Giving an optional @@var{parameter} of
@@samp{no} should omit @@var{feature}, if it is built by default.

No @@samp{--enable} option should @@strong{ever} cause one feature to
replace another.  No @@samp{--enable} option should ever substitute one
useful behavior for another useful behavior.  The only proper use for
@@samp{--enable} is for questions of whether to build part of the program
or exclude it.

@@item --with-@@var{package}
@@c @@r{[}=@@var{parameter}@@r{]}
The package @@var{package} will be installed, so configure this package
to work with @@var{package}.

@@c  Giving an optional @@var{parameter} of
@@c @@samp{no} should omit @@var{package}, if it is used by default.

Possible values of @@var{package} include
@@samp{gnu-as} (or @@samp{gas}), @@samp{gnu-ld}, @@samp{gnu-libc},
@@samp{gdb},
@@samp{x},
and
@@samp{x-toolkit}.

Do not use a @@samp{--with} option to specify the file name to use to
find certain files.  That is outside the scope of what @@samp{--with}
options are for.
@@end table

All @@code{configure} scripts should accept all of these ``detail''
options, whether or not they make any difference to the particular
package at hand.  In particular, they should accept any option that
starts with @@samp{--with-} or @@samp{--enable-}.  This is so users will
be able to configure an entire GNU source tree at once with a single set
of options.

You will note that the categories @@samp{--with-} and @@samp{--enable-}
are narrow: they @@strong{do not} provide a place for any sort of option
you might think of.  That is deliberate.  We want to limit the possible
configuration options in GNU software.  We do not want GNU programs to
have idiosyncratic configuration options.

Packages that perform part of the compilation process may support
cross-compilation.  In such a case, the host and target machines for the
program may be different.

The @@code{configure} script should normally treat the specified type of
system as both the host and the target, thus producing a program which
works for the same type of machine that it runs on.

To configure a cross-compiler, cross-assembler, or what have you, you
should specify a target different from the host, using the configure
option @@samp{--target=@@var{targettype}}.  The syntax for
@@var{targettype} is the same as for the host type.  So the command would
look like this:

@@example
./configure @@var{hosttype} --target=@@var{targettype}
@@end example

Programs for which cross-operation is not meaningful need not accept the
@@samp{--target} option, because configuring an entire operating system for
cross-operation is not a meaningful operation.

Bootstrapping a cross-compiler requires compiling it on a machine other
than the host it will run on.  Compilation packages accept a
configuration option @@samp{--build=@@var{buildtype}} for specifying the
configuration on which you will compile them, but the configure script
should normally guess the build machine type (using
@@file{config.guess}), so this option is probably not necessary.  The
host and target types normally default from the build type, so in
bootstrapping a cross-compiler you must specify them both explicitly.

Some programs have ways of configuring themselves automatically.  If
your program is set up to do this, your @@code{configure} script can simply
ignore most of its arguments.

@@comment The makefile standards are in a separate file that is also
@@comment included by make.texinfo.  Done by roland@@gnu.ai.mit.edu on 1/6/93.
@@comment For this document, turn chapters into sections, etc.
@@lowersections
@@include make-stds.texi
@@raisesections

@@node Releases
@@section Making Releases
@@cindex packaging

Package the distribution of @@code{Foo version 69.96} up in a gzipped tar
file with the name @@file{foo-69.96.tar.gz}.  It should unpack into a
subdirectory named @@file{foo-69.96}.

Building and installing the program should never modify any of the files
contained in the distribution.  This means that all the files that form
part of the program in any way must be classified into @@dfn{source
files} and @@dfn{non-source files}.  Source files are written by humans
and never changed automatically; non-source files are produced from
source files by programs under the control of the Makefile.

@@cindex @@file{README} file
The distribution should contain a file named @@file{README} which gives
the name of the package, and a general description of what it does.  It
is also good to explain the purpose of each of the first-level
subdirectories in the package, if there are any.  The @@file{README} file
should either state the version number of the package, or refer to where
in the package it can be found.

The @@file{README} file should refer to the file @@file{INSTALL}, which
should contain an explanation of the installation procedure.

The @@file{README} file should also refer to the file which contains the
copying conditions.  The GNU GPL, if used, should be in a file called
@@file{COPYING}.  If the GNU LGPL is used, it should be in a file called
@@file{COPYING.LIB}.

Naturally, all the source files must be in the distribution.  It is okay
to include non-source files in the distribution, provided they are
up-to-date and machine-independent, so that building the distribution
normally will never modify them.  We commonly include non-source files
produced by Bison, @@code{lex}, @@TeX{}, and @@code{makeinfo}; this helps avoid
unnecessary dependencies between our distributions, so that users can
install whichever packages they want to install.

Non-source files that might actually be modified by building and
installing the program should @@strong{never} be included in the
distribution.  So if you do distribute non-source files, always make
sure they are up to date when you make a new distribution.

Make sure that the directory into which the distribution unpacks (as
well as any subdirectories) are all world-writable (octal mode 777).
This is so that old versions of @@code{tar} which preserve the
ownership and permissions of the files from the tar archive will be
able to extract all the files even if the user is unprivileged.

Make sure that all the files in the distribution are world-readable.

Make sure that no file name in the distribution is more than 14
characters long.  Likewise, no file created by building the program
should have a name longer than 14 characters.  The reason for this is
that some systems adhere to a foolish interpretation of the @@sc{posix}
standard, and refuse to open a longer name, rather than truncating as
they did in the past.

Don't include any symbolic links in the distribution itself.  If the tar
file contains symbolic links, then people cannot even unpack it on
systems that don't support symbolic links.  Also, don't use multiple
names for one file in different directories, because certain file
systems cannot handle this and that prevents unpacking the
distribution.

Try to make sure that all the file names will be unique on MS-DOS.  A
name on MS-DOS consists of up to 8 characters, optionally followed by a
period and up to three characters.  MS-DOS will truncate extra
characters both before and after the period.  Thus,
@@file{foobarhacker.c} and @@file{foobarhacker.o} are not ambiguous; they
are truncated to @@file{foobarha.c} and @@file{foobarha.o}, which are
distinct.

@@cindex @@file{texinfo.tex}, in a distribution
Include in your distribution a copy of the @@file{texinfo.tex} you used
to test print any @@file{*.texinfo} or @@file{*.texi} files.

Likewise, if your program uses small GNU software packages like regex,
getopt, obstack, or termcap, include them in the distribution file.
Leaving them out would make the distribution file a little smaller at
the expense of possible inconvenience to a user who doesn't know what
other files to get.

@@node References
@@chapter References to Non-Free Software and Documentation
@@cindex references to non-free material

A GNU program should not recommend use of any non-free program.  We
can't stop some people from writing proprietary programs, or stop
other people from using them, but we can and should avoid helping to
advertise them to new potential customers.  Proprietary software is a
social and ethical problem, and the point of GNU is to solve that
problem.

When a non-free program or system is well known, you can mention it in
passing---that is harmless, since users who might want to use it
probably already know about it.  For instance, it is fine to explain
how to build your package on top of some non-free operating system, or
how to use it together with some widely used non-free program.

However, you should give only the necessary information to help those
who already use the non-free program to use your program with
it---don't give, or refer to, any further information about the
proprietary program, and don't imply that the proprietary program
enhances your program, or that its existence is in any way a good
thing.  The goal should be that people already using the proprietary
program will get the advice they need about how to use your free
program, while people who don't already use the proprietary program
will not see anything to lead them to take an interest in it.

If a non-free program or system is obscure in your program's domain,
your program should not mention or support it at all, since doing so
would tend to popularize the non-free program more than it popularizes
your program.  (You cannot hope to find many additional users among
the users of Foobar if the users of Foobar are few.)

A GNU package should not refer the user to any non-free documentation
for free software.  Free documentation that can be included in free
operating systems is essential for completing the GNU system, so it is
a major focus of the GNU Project; to recommend use of documentation
that we are not allowed to use in GNU would undermine the efforts to
get documentation that we can include.  So GNU packages should never
recommend non-free documentation.

@@node Copying This Manual
@@appendix Copying This Manual

@@menu
* GNU Free Documentation License::  License for copying this manual
@@end menu

@@include fdl.texi

@@node Index
@@unnumbered Index
@@printindex cp

@@contents

@@bye
@@c Local variables:
@@c eval: (add-hook 'write-file-hooks 'time-stamp)
@@c time-stamp-start: "@@set lastupdate "
@@c time-stamp-end: "$"
@@c time-stamp-format: "%:b %:d, %:y"
@@c compile-command: "make just-standards"
@@c End:
@


1.2
log
@Help stupid cvs fixing basic conflicts.
@
text
@d6 1
a6 1
@@set lastupdate March 13, 1998
d20 6
d37 1
a37 1
Copyright (C) 1992, 1993, 1994, 1995, 1996, 1997, 1998 Free Software Foundation, Inc.
d39 7
a45 20
Permission is granted to make and distribute verbatim copies of
this manual provided the copyright notice and this permission notice
are preserved on all copies.

@@ignore
Permission is granted to process this file through TeX and print the
results, provided the printed document carries copying permission
notice identical to this one except for the removal of this paragraph
(this paragraph not being relevant to the printed manual).
@@end ignore

Permission is granted to copy and distribute modified versions of this
manual under the conditions for verbatim copying, provided that the entire
resulting derived work is distributed under the terms of a permission
notice identical to this one.

Permission is granted to copy and distribute translations of this manual
into another language, under the above conditions for modified versions,
except that this permission notice may be stated in a translation approved
by the Free Software Foundation.
d50 1
a50 1
@@author Richard Stallman
d55 1
a55 1
Copyright @@copyright{} 1992, 1993, 1994, 1995, 1996, 1997, 1998 Free Software Foundation, Inc.
d57 7
a63 13
Permission is granted to make and distribute verbatim copies of
this manual provided the copyright notice and this permission notice
are preserved on all copies.

Permission is granted to copy and distribute modified versions of this
manual under the conditions for verbatim copying, provided that the entire
resulting derived work is distributed under the terms of a permission
notice identical to this one.

Permission is granted to copy and distribute translations of this manual
into another language, under the above conditions for modified versions,
except that this permission notice may be stated in a translation approved
by the Free Software Foundation.
d75 1
a75 1
* Intellectual Property::       Keeping Free Software Free
d81 4
d98 16
d115 1
a115 1
@@email{gnu@@@@gnu.org}.  If you make a suggestion, please include a
d120 11
a130 2
This release of the GNU Coding Standards was last updated
@@value{lastupdate}.
d132 1
a132 1
@@node Intellectual Property
d134 1
d137 1
a137 1
remains unencumbered.
d142 1
d147 2
a179 1

d182 2
d185 6
a190 5
If someone else sends you a piece of code to add to the program you are
working on, we need legal papers to use it---the same sort of legal
papers we will need to get from you.  @@emph{Each} significant
contributor to a program must sign some sort of legal papers in order
for us to have clear title to the program.  The main author alone is not
d206 5
d214 3
a216 7
which you use.  For example, if you write a different solution to the
problem, you don't need to get papers.

We know this is frustrating; it's frustrating for us as well.  But if
you don't wait, you are going out on a limb---for example, what if the
contributor's employer won't sign a disclaimer?  You might have to take
that code out again!
d226 22
d250 1
d255 10
d266 1
d269 2
a270 2
* ANSI C::                      Using ANSI C features
* Source Language::             Using languages other than C
d273 47
d322 2
d327 3
a329 3
compatible with @@sc{ansi} C if @@sc{ansi} C specifies their behavior, and
upward compatible with @@sc{POSIX} if @@sc{POSIX} specifies their
behavior.
d334 3
a336 2
@@sc{ansi} C and @@sc{POSIX} prohibit many kinds of extensions.  Feel free
to make the extensions anyway, and include a @@samp{--ansi},
d339 2
a340 2
programs or scripts, then it is not really upward compatible.  Try to
redesign its interface.
d342 2
a343 1
Many GNU programs suppress extensions that conflict with POSIX if the
d354 2
a355 1
Additional useful features not in Berkeley Unix are welcome.
d359 1
d380 2
a381 2
Emacs) which run on a great variety of systems.  Such programs would
be broken by use of GNU extensions.
d383 24
a406 20
Another exception is for programs that are used as part of
compilation: anything that must be compiled with other compilers in
order to bootstrap the GNU compilation facilities.  If these require
the GNU compiler, then no one can compile them without having them
installed already.  That would be no good.

@@node ANSI C
@@section @@sc{ansi} C and pre-@@sc{ansi} C

Do not ever use the ``trigraph'' feature of @@sc{ansi} C.

@@sc{ansi} C is widespread enough now that it is ok to write new programs
that use @@sc{ansi} C features (and therefore will not work in
non-@@sc{ansi} compilers).  And if a program is already written in
@@sc{ansi} C, there's no need to convert it to support non-@@sc{ansi}
compilers.

However, it is easy to support non-@@sc{ansi} compilers in most programs,
so you might still consider doing so when you write a program.  Instead
of writing function definitions in @@sc{ansi} prototype form,
d415 1
a415 1
write the definition in pre-@@sc{ansi} style like this,
d432 29
a460 3
of @@sc{ansi} C prototypes in all the files where the function is called.
And once you have it, you lose nothing by writing the function
definition in the pre-@@sc{ansi} style.
d462 2
a463 2
If you don't know non-@@sc{ansi} C, there's no need to learn it; just
write in @@sc{ansi} C.
d465 4
a468 2
@@node Source Language
@@section Using Languages Other Than C
d470 1
a470 6
Using a language other than C is like using a non-standard feature: it
will cause trouble for users.  Even if GCC supports the other language,
users may find it inconvenient to have to install the compiler for that
other language in order to build your program.  For example, if you
write your program in C++, people will have to install the C++ compiler
in order to compile your program.  Thus, it is better if you write in C.
d472 6
a477 2
But there are three situations when there is no disadvantage in using
some other language:
d479 1
a479 4
@@itemize @@bullet
@@item
It is okay to use another language if your program contains an
interpreter for that language.
d481 7
a487 2
For example, if your program links with GUILE, it is ok to write part of
the program in Scheme or another language supported by GUILE.
d489 12
a500 3
@@item
It is okay to use another language in a tool specifically intended for
use with that language.
d502 7
a508 11
This is okay because the only people who want to build the tool will be
those who have installed the other language anyway.

@@item
If an application is of interest to a narrow community, then perhaps
it's not important if the application is inconvenient to install.
@@end itemize

C has one other advantage over C++ and other compiled languages: more
people know C, so more people will find it easy to read and modify the
program if it is written in C.
d513 3
a515 3
This @@value{CHAPTER} describes how to write robust software. It also
describes general standards for error messages, the command line interface,
and how libraries should behave.
d521 4
a524 2
* User Interfaces::             Standards for command line interfaces
* Option Table::                Table of long options.
d526 1
d532 1
d538 1
d540 7
a546 3
nonprinting characters @@emph{including those with codes above 0177}.  The
only sensible exceptions would be utilities specifically intended for
interface to certain types of printers that can't handle those characters.
d548 1
d556 2
d579 1
d592 1
a592 1
These will be supported compatibly by GNU.
d594 11
a604 3
By default, the GNU system will provide the signal handling functions of
@@sc{BSD} and of @@sc{POSIX}.  So GNU software should be written to use
these.
d606 1
d621 2
d627 13
d642 1
d662 4
a665 4
should have names beginning with @@samp{_}.  They should also contain
the chosen name prefix for the library, to prevent collisions with
other libraries.  These can go in the same files with user entry
points if you like.
d672 2
d681 14
d711 6
d733 1
a733 1
@@section Standards for Command Line Interfaces
d735 2
d744 1
d747 4
a750 2
important principle of the system's design; do not compromise it
merely to save someone from typing an option now and then.
d766 29
a794 1
It is a good idea to follow the @@sc{POSIX} guidelines for the
d798 1
a798 1
special argument @@samp{--} is used.  This is not what @@sc{POSIX}
d801 1
d821 1
d826 1
d828 1
a828 1
This option should direct the program to information about its name,
d833 2
d907 19
d932 2
d944 2
d950 1
a950 1
please send @@email{gnu@@@@gnu.org} a list of them, with their
d1010 3
d1137 3
d1272 5
d1322 3
d1385 4
d1407 3
d1645 4
d1733 3
d1864 6
d1968 3
d2063 1
d2065 1
a2065 1
If it typically uses just a few meg of memory, don't bother making any
d2081 17
d2108 1
a2108 1
* Names::                       Naming Variables and Functions
d2118 1
d2120 2
d2143 2
a2144 1
or, if you want to use @@sc{ansi} C, format the definition like this:
d2154 1
a2154 1
In @@sc{ansi} C, if the arguments don't fit nicely on one line,
d2164 19
a2182 1
For the body of the function, we prefer code formatted like this:
d2198 1
d2205 1
a2229 1
but Emacs would mess it up:
d2236 3
a2238 1
But adding a set of parentheses solves the problem:
d2255 2
a2261 1

d2264 1
d2316 2
d2359 1
d2361 15
a2375 2
Please explicitly declare all arguments to functions.
Don't omit them just because they are @@code{int}s.
d2383 1
d2395 1
d2496 1
d2501 2
a2502 2
@@node  Names
@@section Naming Variables and Functions
d2504 1
d2514 4
d2542 12
a2553 5
Use file names of 14 characters or less, to avoid creating gratuitous
problems on older System V systems.  You can use the program
@@code{doschk} to test for this.  @@code{doschk} also tests for potential
name conflicts if the files were loaded onto an MS-DOS file
system---something you may or may not care about.
d2557 1
d2564 11
a2574 9
compiled with the GNU C compiler, on various types of @@sc{cpu}.  The
amount and kinds of variation among GNU systems on different @@sc{cpu}s
will be comparable to the variation among Linux-based GNU systems or
among BSD systems today.  So the kinds of portability that are absolutely
necessary are quite limited.

But many users do run GNU software on non-GNU Unix or Unix-like systems.
So supporting a variety of Unix-like systems is desirable, although not
paramount.
d2576 1
d2586 1
d2588 16
a2603 8
Macintosh, VMS, and MVS, supporting them is usually so much work that it
is better if you don't.

The planned GNU kernel is not finished yet, but you can tell which
facilities it will provide by looking at the GNU C Library Manual.  The
GNU kernel is based on Mach, so the features of Mach will also be
available.  However, if you use Mach features, you'll probably have
trouble debugging your program today.
d2608 2
d2617 19
d2650 3
a2652 3
there is a difference, all of them support @@sc{ansi} C, so you can use
prototypes (conditionalized to be active only in @@sc{ansi} C) to make
the code work on those systems.
d2662 1
a2662 1
     int a1, a2, a3;
d2670 18
a2687 10
In practice, this works on all machines, and it is much simpler than any
``correct'' alternative.  Be sure @@emph{not} to use a prototype
for such functions.

However, avoid casting pointers to integers unless you really need to.
These assumptions really reduce portability, and in most programs they
are easy to avoid.  In the cases where casting pointers to integers is
essential---such as, a Lisp interpreter which stores type information as
well as an address in one word---it is ok to do so, but you'll have to
make explicit provisions to handle different word sizes.
d2691 2
d2694 5
a2698 5
C implementations differ substantially.  @@sc{ansi} C reduces but does not
eliminate the incompatibilities; meanwhile, many users wish to compile
GNU software with pre-@@sc{ansi} compilers.  This chapter gives
recommendations for how to use the more or less standard C library
functions to avoid unnecessary loss of portability.
d2702 1
a2702 1
Don't use the value of @@code{sprintf}.  It returns the number of
d2706 3
d2713 1
d2730 1
a2730 1
Use an old-style declaration, not an @@sc{ansi} prototype.  The more you
d2752 1
d2763 1
a2763 1
That causes less of a problem than you might think.  The newer @@sc{ansi}
d2793 1
a2793 1
@@code{strrchr} for new programs, since those are the standard @@sc{ansi}
d2819 1
d2821 1
d2848 1
d2920 1
d2937 6
d2946 1
d2948 3
d2961 12
a2972 4
The preferred way to document part of the GNU system is to write a
manual in the Texinfo formatting language.  See the Texinfo manual,
either the hardcopy, or the on-line version available through
@@code{info} or the Emacs Info subsystem (@@kbd{C-h i}).
d3001 3
a3003 3
The manual which discusses a program should document all of the
program's command-line options and all of its commands.  It should give
examples of their use.  But don't organize the manual as a list of
d3013 2
d3028 9
d3039 2
a3040 2
explanation of the underlying concepts.  (There are, of course
exceptions.)  Also Unix man pages use a particular format which is
d3043 3
d3048 1
a3048 1
``path'' only for search paths, which are lists of file names.
d3052 28
a3079 1
``illegal'' for violations of law.
d3083 1
d3091 1
a3091 1
Each program documented in the manual should should have a node named
d3103 3
a3105 2
There will be automatic features for specifying a program name and
quickly reading just this part of its manual.
d3108 42
a3149 1
each program described.
d3153 1
d3168 1
d3183 1
d3202 2
a3203 1
to a @@file{ChangeLog} file.
d3224 1
d3226 4
a3229 1
Here are some examples of change log entries:
d3232 2
d3264 9
d3280 4
a3283 3
and you change all the callers of the function, there is no need to make
individual entries for all the callers that you changed.  Just write in
the entry for the function being called, ``All callers changed.''
d3303 2
d3344 14
d3360 1
d3407 1
d3419 1
a3419 1
* Makefile Conventions::	Makefile Conventions
d3425 1
d3427 1
d3495 1
a3495 1
between Ultrix and @@sc{BSD} are rarely noticeable, but a few programs
d3502 1
d3528 1
a3528 1
Possible values of @@var{package} include 
d3531 1
a3531 1
@@samp{x}, 
a3537 11

@@item --nfp
The target machine has no floating point processor.

@@item --gas
The target machine assembler is GAS, the GNU assembler.
This is obsolete; users should use @@samp{--with-gnu-as} instead.

@@item --x
The target machine has the X Window System installed.
This is obsolete; users should use @@samp{--with-x} instead.
d3553 21
a3573 11
Packages that perform part of the compilation process may support cross-compilation.
In such a case, the host and target machines for the program may be
different.  The @@code{configure} script should normally treat the
specified type of system as both the host and the target, thus producing
a program which works for the same type of machine that it runs on.

The way to build a cross-compiler, cross-assembler, or what have you, is
to specify the option @@samp{--host=@@var{hosttype}} when running
@@code{configure}.  This specifies the host system without changing the
type of target system.  The syntax for @@var{hosttype} is the same as
described above.
d3577 6
a3582 7
configuration option @@samp{--build=@@var{hosttype}} for specifying the
configuration on which you will compile them, in case that is different
from the host.

Programs for which cross-operation is not meaningful need not accept the
@@samp{--host} option, because configuring an entire operating system for
cross-operation is not a meaningful thing.
d3597 1
d3610 16
d3650 1
a3650 1
that some systems adhere to a foolish interpretation of the POSIX
d3669 1
d3679 54
d3736 7
a3742 6
Local variables:
update-date-leading-regexp: "@@c This date is automagically updated when you save this file:\n@@set lastupdate "
update-date-trailing-regexp: ""
eval: (load "/gd/gnuorg/update-date.el")
eval: (add-hook 'write-file-hooks 'update-date)
End:
@


1.1
log
@Initial revision
@
text
@d5 2
a6 2
@@c UPDATE THIS DATE WHENEVER YOU MAKE CHANGES!
@@set lastupdate 28 March 1994
d17 1
d20 9
d31 1
a31 1
Copyright (C) 1992, 1993, 1994 Free Software Foundation
d62 1
a62 1
Copyright @@copyright{} 1992, 1993 Free Software Foundation
d76 1
a76 1
by Free Software Foundation.
d80 1
a80 1
@@node Top, Reading Non-Free Code, (dir), (dir)
d87 38
a124 20
* Reading Non-Free Code::	Referring to Proprietary Programs
* Contributions::		Accepting Contributions
* Change Logs::			Recording Changes
* Compatibility::		Compatibility with Other Implementations
* Makefile Conventions::	Makefile Conventions
* Configuration::		How Configuration Should Work
* Source Language::		Using Languages Other Than C
* Formatting::			Formatting Your Source Code
* Comments::			Commenting Your Work
* Syntactic Conventions::	Clean Use of C Constructs
* Names::			Naming Variables and Functions
* Using Extensions::		Using Non-standard Features
* System Functions::            Portability and ``standard'' library functions
* Semantics::			Program Behavior for All Programs
* Errors::			Formatting Error Messages
* Libraries::			Library Behavior
* Portability::			Portability As It Applies to GNU
* User Interfaces::		Standards for Command Line Interfaces
* Documentation::		Documenting Programs
* Releases::			Making Releases
d128 1
a128 1
@@chapter Referring to Proprietary Programs
d162 1
a162 1
@@chapter Accepting Contributions
d171 2
a172 2
So, before adding in any contributions from other people, tell us
so we can arrange to get the papers.  Then wait until we tell you
d177 6
a182 2
you receive diffs to fix a bug, and they make significant change, we
need legal papers for it.
d190 1
a190 1
I know this is frustrating; it's frustrating for us as well.  But if
d199 3
a201 24
@@node Change Logs
@@chapter Change Logs

Keep a change log for each directory, describing the changes made to
source files in that directory.  The purpose of this is so that people
investigating bugs in the future will know about the changes that
might have introduced the bug.  Often a new bug can be found by
looking at what was recently changed.  More importantly, change logs
can help eliminate conceptual inconsistencies between different parts
of a program; they can give you a history of how the conflicting
concepts arose.

Use the Emacs command @@kbd{M-x add-change} to start a new entry in the
change log.  An entry should have an asterisk, the name of the changed
file, and then in parentheses the name of the changed functions,
variables or whatever, followed by a colon.  Then describe the changes
you made to that function or variable.

Separate unrelated entries with blank lines.  When two entries
represent parts of the same change, so that they work together, then
don't put blank lines between them.  Then you can omit the file name
and the asterisk when successive entries are in the same file.

Here are some examples:
d203 2
a204 3
@@example
* register.el (insert-register): Return nil.
(jump-to-register): Likewise.
d206 2
a207 47
* sort.el (sort-subr): Return nil.

* tex-mode.el (tex-bibtex-file, tex-file, tex-region):
Restart the tex shell if process is gone or stopped.
(tex-shell-running): New function.

* expr.c (store_one_arg): Round size up for move_block_to_reg.
(expand_call): Round up when emitting USE insns.
* stmt.c (assign_parms): Round size up for move_block_from_reg.
@@end example

It's important to name the changed function or variable in full.  Don't
abbreviate them; don't combine them.  Subsequent maintainers will often
search for a function name to find all the change log entries that
pertain to it; if you abbreviate the name, they won't find it when they
search.  For example, some people are tempted to abbreviate groups of
function names by writing @@samp{* register.el
(@@{insert,jump-to@@}-register)}; this is not a good idea, since searching
for @@code{jump-to-register} or @@code{insert-register} would not find the
entry.

There's no need to describe the full purpose of the changes or how they
work together.  It is better to put such explanations in comments in the
code.  That's why just ``New function'' is enough; there is a comment
with the function in the source to explain what it does.

However, sometimes it is useful to write one line to describe the
overall purpose of a large batch of changes.

You can think of the change log as a conceptual ``undo list'' which
explains how earlier versions were different from the current version.
People can see the current version; they don't need the change log
to tell them what is in it.  What they want from a change log is a
clear explanation of how the earlier version differed.

When you change the calling sequence of a function in a simple
fashion, and you change all the callers of the function, there is no
need to make individual entries for all the callers.  Just write in
the entry for the function being called, ``All callers changed.''

When you change just comments or doc strings, it is enough to write an
entry for the file, without mentioning the functions.  Write just,
``Doc fix.''  There's no need to keep a change log for documentation
files.  This is because documentation is not susceptible to bugs that
are hard to fix.  Documentation does not consist of parts that must
interact in a precisely engineered fashion; to correct an error, you
need not know the history of the erroneous passage.
d209 6
d217 1
a217 1
@@chapter Compatibility with Other Implementations
d219 5
a223 4
With certain exceptions, utility programs and libraries for GNU should
be upward compatible with those in Berkeley Unix, and upward compatible
with @@sc{ANSI} C if @@sc{ANSI} C specifies their behavior, and upward
compatible with @@sc{POSIX} if @@sc{POSIX} specifies their behavior.
d228 6
a233 6
@@sc{ANSI} C and @@sc{POSIX} prohibit many kinds of extensions.  Feel
free to make the extensions anyway, and include a @@samp{--ansi} or
@@samp{--compatible} option to turn them off.  However, if the extension
has a significant chance of breaking any real programs or scripts,
then it is not really upward compatible.  Try to redesign its
interface.
d243 2
a244 2
vi is replaced with Emacs.)  But it is nice to offer a compatible
feature as well.  (There is a free vi clone, so we offer it.)
a246 3
Additional programs with no counterpart in Unix may be useful,
but our first priority is usually to duplicate what Unix already
has.
d248 2
a249 3
@@comment The makefile standards are in a separate file that is also
@@comment included by make.texinfo.  Done by roland@@gnu.ai.mit.edu on 1/6/93.
@@include make-stds.texi
d251 3
a253 2
@@node Configuration
@@chapter How Configuration Should Work
d255 4
a258 3
Each GNU distribution should come with a shell script named
@@code{configure}.  This script is given arguments which describe the
kind of machine and system you want to compile the program for.
d260 4
a263 2
The @@code{configure} script must record the configuration options so
that they affect compilation.
d265 3
a267 5
One way to do this is to make a link from a standard name such as
@@file{config.h} to the proper configuration file for the chosen system.
If you use this technique, the distribution should @@emph{not} contain a
file named @@file{config.h}.  This is so that people won't be able to
build the program without configuring it first.
d269 3
a271 5
Another thing that @@code{configure} can do is to edit the Makefile.  If
you do this, the distribution should @@emph{not} contain a file named
@@file{Makefile}.  Instead, include a file @@file{Makefile.in} which
contains the input used for editing.  Once again, this is so that people
won't be able to build the program without configuring it first.
d273 5
a277 5
If @@code{configure} does write the @@file{Makefile}, then @@file{Makefile}
should have a target named @@file{Makefile} which causes @@code{configure}
to be rerun, setting up the same configuration that was set up last
time.  The files that @@code{configure} reads should be listed as
dependencies of @@file{Makefile}.
d279 2
a280 4
All the files which are output from the @@code{configure} script should
have comments at the beginning explaining that they were generated
automatically using @@code{configure}.  This is so that users won't think
of trying to edit them by hand.
d282 1
a282 4
The @@code{configure} script should write a file named @@file{config.status}
which describes which configuration options were specified when the
program was last configured.  This file should be a shell script which,
if run, will recreate the same configuration.
d284 9
a292 5
The @@code{configure} script should accept an option of the form
@@samp{--srcdir=@@var{dirname}} to specify the directory where sources are found
(if it is not the current directory).  This makes it possible to build
the program in a separate directory, so that the actual source directory
is not modified.
d294 5
a298 5
If the user does not specify @@samp{--srcdir}, then @@code{configure} should
check both @@file{.} and @@file{..} to see if it can find the sources.  If
it finds the sources in one of these places, it should use them from
there.  Otherwise, it should report that it cannot find the sources, and
should exit with nonzero status.
d300 2
a301 9
Usually the easy way to support @@samp{--srcdir} is by editing a
definition of @@code{VPATH} into the Makefile.  Some rules may need to
refer explicitly to the specified source directory.  To make this
possible, @@code{configure} can add to the Makefile a variable named
@@code{srcdir} whose value is precisely the specified directory.

The @@code{configure} script should also take an argument which specifies the
type of system to build the program for.  This argument should look like
this:
d304 4
a307 1
@@var{cpu}-@@var{company}-@@var{system}
d310 2
a311 1
For example, a Sun 3 might be @@samp{m68k-sun-sunos4.1}.
d313 3
a315 91
The @@code{configure} script needs to be able to decode all plausible
alternatives for how to describe a machine.  Thus, @@samp{sun3-sunos4.1}
would be a valid alias.  So would @@samp{sun3-bsd4.2}, since SunOS is
basically @@sc{BSD} and no other @@sc{BSD} system is used on a Sun.  For many
programs, @@samp{vax-dec-ultrix} would be an alias for
@@samp{vax-dec-bsd}, simply because the differences between Ultrix and
@@sc{BSD} are rarely noticeable, but a few programs might need to distinguish
them.

There is a shell script called @@file{config.sub} that you can use
as a subroutine to validate system types and canonicalize aliases.

Other options are permitted to specify in more detail the software
or hardware present on the machine, and include or exclude optional
parts of the package:

@@table @@samp
@@item --enable-@@var{feature}@@r{[}=@@var{parameter}@@r{]}
Configure the package to build and install an optional user-level
facility called @@var{feature}.  This allows users to choose which
optional features to include.  Giving an optional @@var{parameter} of
@@samp{no} should omit @@var{feature}, if it is built by default.

No @@samp{--enable} option should @@strong{ever} cause one feature to
replace another.  No @@samp{--enable} option should ever substitute one
useful behavior for another useful behavior.  The only proper use for
@@samp{--enable} is for questions of whether to build part of the program
or exclude it.

@@item --with-@@var{package}
@@c @@r{[}=@@var{parameter}@@r{]}
The package @@var{package} will be installed, so configure this package
to work with @@var{package}.

@@c  Giving an optional @@var{parameter} of
@@c @@samp{no} should omit @@var{package}, if it is used by default.

Possible values of @@var{package} include @@samp{x}, @@samp{x-toolkit},
@@samp{gnu-as} (or @@samp{gas}), @@samp{gnu-ld}, @@samp{gnu-libc}, and
@@samp{gdb}.

Do not use a @@samp{--with} option to specify the file name to use to
find certain files.  That is outside the scope of what @@samp{--with}
options are for.

@@item --nfp
The target machine has no floating point processor.

@@item --gas
The target machine assembler is GAS, the GNU assembler.
This is obsolete; users should use @@samp{--with-gnu-as} instead.

@@item --x
The target machine has the X Window System installed.
This is obsolete; users should use @@samp{--with-x} instead.
@@end table

All @@code{configure} scripts should accept all of these ``detail''
options, whether or not they make any difference to the particular
package at hand.  In particular, they should accept any option that
starts with @@samp{--with-} or @@samp{--enable-}.  This is so users will
be able to configure an entire GNU source tree at once with a single set
of options.

You will note that the categories @@samp{--with-} and @@samp{--enable-}
are narrow: they @@strong{do not} provide a place for any sort of option
you might think of.  That is deliberate.  We want to limit the possible
configuration options in GNU software.  We do not want GNU programs to
have idiosyncratic configuration options.

Packages that perform part of compilation may support cross-compilation.
In such a case, the host and target machines for the program may be
different.  The @@code{configure} script should normally treat the
specified type of system as both the host and the target, thus producing
a program which works for the same type of machine that it runs on.

The way to build a cross-compiler, cross-assembler, or what have you, is
to specify the option @@samp{--host=@@var{hosttype}} when running
@@code{configure}.  This specifies the host system without changing the
type of target system.  The syntax for @@var{hosttype} is the same as
described above.

Bootstrapping a cross-compiler requires compiling it on a machine other
than the host it will run on.  Compilation packages accept a
configuration option @@samp{--build=@@var{hosttype}} for specifying the
configuration on which you will compile them, in case that is different
from the host.

Programs for which cross-operation is not meaningful need not accept the
@@samp{--host} option, because configuring an entire operating system for
cross-operation is not a meaningful thing.
d317 4
a320 3
Some programs have ways of configuring themselves automatically.  If
your program is set up to do this, your @@code{configure} script can simply
ignore most of its arguments.
d322 2
d326 1
a326 1
@@chapter Using Languages Other Than C
d331 3
a333 1
other language in order to build your program.  So please write in C.
d335 2
a336 1
There are three exceptions for this rule:
d340 1
a340 1
It is okay to use a special language if the same program contains an
d343 2
a344 2
Thus, it is not a problem that GNU Emacs contains code written in Emacs
Lisp, because it comes with a Lisp interpreter.
d354 1
a354 1
If an application is not of extremely widespread interest, then perhaps
d358 3
a360 2
@@node Formatting
@@chapter Formatting Your Source Code
d362 2
a363 5
It is important to put the open-brace that starts the body of a C
function in column zero, and avoid putting any other open-brace or
open-parenthesis or open-bracket in column zero.  Several tools look
for open-braces in column zero to find the beginnings of C functions.
These tools will not work on code not formatted that way.
d365 3
a367 4
It is also important for function definitions to start the name of the
function in column zero.  This helps people to search for function
definitions, and may also help certain tools recognize them.  Thus,
the proper format is this:
d369 8
a376 8
@@example
static char *
concat (s1, s2)        /* Name starts in column zero here */
     char *s1, *s2;
@@{                     /* Open brace in column zero here */
  @@dots{}
@@}
@@end example
d378 2
a379 2
@@noindent
or, if you want to use @@sc{ANSI} C, format the definition like this:
d381 4
a384 7
@@example
static char *
concat (char *s1, char *s2)
@@{
  @@dots{}
@@}
@@end example
d386 75
a460 2
In @@sc{ANSI} C, if the arguments don't fit nicely on one line,
split it like this:
d462 2
a463 6
@@example
int
lots_of_args (int an_integer, long a_long, short a_short,
              double a_double, float a_float)
@@dots{}
@@end example
d465 5
a469 1
For the body of the function, we prefer code formatted like this:
d471 3
a473 13
@@example
if (x < foo (y, z))
  haha = bar[4] + 5;
else
  @@{
    while (z)
      @@{
        haha += foo (z, z);
        z--;
      @@}
    return ++x + bar ();
  @@}
@@end example
d475 5
a479 2
We find it easier to read a program when it has spaces before the
open-parentheses and after the commas.  Especially after the commas.
d481 2
a482 2
When you split an expression into multiple lines, split it
before an operator, not after one.  Here is the right way:
d484 2
a485 4
@@example
if (foo_this_is_long && bar > win (x, y, z)
    && remaining_condition)
@@end example
d487 1
a487 2
Try to avoid having two operators of different precedence at the same
level of indentation.  For example, don't write this:
d490 1
a490 3
mode = (inmode[j] == VOIDmode
        || GET_MODE_SIZE (outmode[j]) > GET_MODE_SIZE (inmode[j])
        ? outmode[j] : inmode[j]);
d493 1
a493 1
Instead, use extra parentheses so that the indentation shows the nesting:
d496 1
a496 3
mode = ((inmode[j] == VOIDmode
         || (GET_MODE_SIZE (outmode[j]) > GET_MODE_SIZE (inmode[j])))
        ? outmode[j] : inmode[j]);
d499 2
a500 3
Insert extra parentheses so that Emacs will indent the code properly.
For example, the following indentation looks nice if you do it by hand,
but Emacs would mess it up:
d503 1
a503 2
v = rup->ru_utime.tv_sec*1000 + rup->ru_utime.tv_usec/1000
    + rup->ru_stime.tv_sec*1000 + rup->ru_stime.tv_usec/1000;
d506 2
a507 1
But adding a set of parentheses solves the problem:
d509 6
a514 4
@@example
v = (rup->ru_utime.tv_sec*1000 + rup->ru_utime.tv_usec/1000
     + rup->ru_stime.tv_sec*1000 + rup->ru_stime.tv_usec/1000);
@@end example
d516 3
a518 1
Format do-while statements like this:
d520 3
a522 7
@@example
do
  @@{
    a = foo (a);
  @@}
while (a > 0);
@@end example
d524 2
a525 4
Please use formfeed characters (control-L) to divide the program into
pages at logical places (but not within a function).  It does not matter
just how long the pages are, since they do not have to fit on a printed
page.  The formfeeds should appear alone on lines by themselves.
d527 3
d531 2
a532 2
@@node Comments
@@chapter Commenting Your Work
d534 4
a537 2
Every program should start with a comment saying briefly what it is for.
Example: @@samp{fmt - filter for simple filling of text}.
d539 5
a543 10
Please put a comment on each function saying what the function does,
what sorts of arguments it gets, and what the possible values of
arguments mean and are used for.  It is not necessary to duplicate in
words the meaning of the C argument declarations, if a C type is being
used in its customary fashion.  If there is anything nonstandard about
its use (such as an argument of type @@code{char *} which is really the
address of the second character of a string, not the first), or any
possible values that would not work the way one would expect (such as,
that strings containing newlines are not guaranteed to work), be sure
to say so.
d545 7
a551 1
Also explain the significance of the return value, if there is one.
d553 6
a558 7
Please put two spaces after the end of a sentence in your comments, so
that the Emacs sentence commands will work.  Also, please write
complete sentences and capitalize the first word.  If a lower-case
identifer comes at the beginning of a sentence, don't capitalize it!
Changing the spelling makes it a different identifier.  If you don't
like starting a sentence with a lower case letter, write the sentence
differently (e.g., ``The identifier lower-case is @@dots{}'').
d560 4
a563 5
The comment on a function is much clearer if you use the argument
names to speak about the argument values.  The variable name itself
should be lower case, but write it in upper case when you are speaking
about the value rather than the variable itself.  Thus, ``the inode
number NODE_NUM'' rather than ``an inode''.
d565 6
a570 4
There is usually no purpose in restating the name of the function in
the comment before it, because the reader can see that for himself.
There might be an exception when the comment is so long that the function
itself would be off the bottom of the screen.
d572 20
a591 1
There should be a comment on each static variable as well, like this:
d594 1
a594 3
/* Nonzero means truncate lines in the display;
   zero means continue them.  */
int truncate_lines;
d597 8
a604 5
Every @@samp{#endif} should have a comment, except in the case of short
conditionals (just a few lines) that are not nested.  The comment should
state the condition of the conditional that is ending, @@emph{including
its sense}.  @@samp{#else} should have a comment describing the condition
@@emph{and sense} of the code that follows.  For example:
d607 1
a607 5
#ifdef foo
  @@dots{}
#else /* not foo */
  @@dots{}
#endif /* not foo */
d611 58
a668 1
but, by contrast, write the comments this way for a @@samp{#ifndef}:
d671 1
a671 5
#ifndef foo
  @@dots{}
#else /* foo */
  @@dots{}
#endif /* foo */
d673 4
d678 5
d684 5
a688 2
@@node Syntactic Conventions
@@chapter Clean Use of C Constructs
d690 3
a692 2
Please explicitly declare all arguments to functions.
Don't omit them just because they are @@code{int}s.
d694 6
a699 5
Declarations of external functions and functions to appear later in the
source file should all go in one place near the beginning of the file
(somewhere before the first function definition in the file), or else
should go in a header file.  Don't put @@code{extern} declarations inside
functions.
d701 2
a702 8
It used to be common practice to use the same local variables (with
names like @@code{tem}) over and over for different values within one
function.  Instead of doing this, it is better declare a separate local
variable for each distinct purpose, and give it a name which is
meaningful.  This not only makes programs easier to understand, it also
facilitates optimization by good compilers.  You can also move the
declaration of each local variable into the smallest scope that includes
all its uses.  This makes the program even cleaner.
d704 3
a706 1
Don't use local variables or parameters that shadow global identifiers.
d708 2
a709 3
Don't declare multiple variables in one declaration that spans lines.
Start a new declaration on each line, instead.  For example, instead
of this:
d711 2
a712 4
@@example
int    foo,
       bar;
@@end example
d714 2
a715 2
@@noindent
write either this:
d717 2
a718 3
@@example
int foo, bar;
@@end example
d720 2
a721 2
@@noindent
or this:
d723 2
a724 4
@@example
int foo;
int bar;
@@end example
d726 2
a727 3
@@noindent
(If they are global variables, each should have a comment preceding it
anyway.)
d729 2
a730 3
When you have an @@code{if}-@@code{else} statement nested in another
@@code{if} statement, always put braces around the @@code{if}-@@code{else}.
Thus, never write like this:
d732 2
a733 7
@@example
if (foo)
  if (bar)
    win ();
  else
    lose ();
@@end example
d735 2
a736 2
@@noindent
always like this:
d738 2
a739 9
@@example
if (foo)
  @@{
    if (bar)
      win ();
    else
      lose ();
  @@}
@@end example
d741 2
a742 2
If you have an @@code{if} statement nested inside of an @@code{else}
statement, either write @@code{else if} on one line, like this,
d744 2
a745 6
@@example
if (foo)
  @@dots{}
else if (bar)
  @@dots{}
@@end example
d747 2
a748 3
@@noindent
with its @@code{then}-part indented like the preceding @@code{then}-part,
or write the nested @@code{if} within braces like this:
d750 2
a751 9
@@example
if (foo)
  @@dots{}
else
  @@{
    if (bar)
      @@dots{}
  @@}
@@end example
d753 2
a754 3
Don't declare both a structure tag and variables or typedefs in the
same declaration.  Instead, declare the structure tag separately
and then use it to declare the variables or typedefs.
d756 2
a757 2
Try to avoid assignments inside @@code{if}-conditions.  For example,
don't write this:
d759 2
a760 4
@@example
if ((foo = (char *) malloc (sizeof *foo)) == 0)
  fatal ("virtual memory exhausted");
@@end example
d762 2
a763 2
@@noindent
instead, write this:
d765 2
a766 5
@@example
foo = (char *) malloc (sizeof *foo);
if (foo == 0)
  fatal ("virtual memory exhausted");
@@end example
d768 2
a769 3
Don't make the program ugly to placate @@code{lint}.  Please don't insert any
casts to @@code{void}.  Zero without a cast is perfectly fine as a null
pointer constant.
d771 2
a772 2
@@node  Names
@@chapter Naming Variables and Functions
d774 2
a775 4
Please use underscores to separate words in a name, so that the Emacs
word commands can be useful within them.  Stick to lower case; reserve
upper case for macros and @@code{enum} constants, and for name-prefixes
that follow a uniform convention.
d777 2
a778 2
For example, you should use names like @@code{ignore_space_change_flag};
don't use names like @@code{iCantReadThis}.
d780 2
a781 4
Variables that indicate whether command-line options have been
specified should be named after the meaning of the option, not after
the option-letter.  A comment should state both the exact meaning of
the option and its letter.  For example,
d783 2
a784 4
@@example
/* Ignore changes in horizontal whitespace (-b).  */
int ignore_space_change_flag;
@@end example
d786 2
a787 3
When you want to define names with constant integer values, use
@@code{enum} rather than @@samp{#define}.  GDB knows about enumeration
constants.
d789 2
a790 5
Use file names of 14 characters or less, to avoid creating gratuitous
problems on System V.  You can use the program @@code{doschk} to test for
this.  @@code{doschk} also tests for potential name conflicts if the
files were loaded onto an MS-DOS file system---something you may or may
not care about.
d792 2
d795 3
a797 2
@@node Using Extensions
@@chapter Using Non-standard Features
d799 2
a800 3
Many GNU facilities that already exist support a number of convenient
extensions over the comparable Unix facilities.  Whether to use these
extensions in implementing your program is a difficult question.
d802 2
a803 4
On the one hand, using the extensions can make a cleaner program.
On the other hand, people will not be able to build the program
unless the other GNU tools are available.  This might cause the
program to work on fewer kinds of machines.
d805 2
a806 4
With some extensions, it might be easy to provide both alternatives.
For example, you can define functions with a ``keyword'' @@code{INLINE}
and define that as a macro to expand into either @@code{inline} or
nothing, depending on the compiler.
d808 2
a809 3
In general, perhaps it is best not to use the extensions if you can
straightforwardly do without them, but to use the extensions if they
are a big improvement.
d811 2
a812 3
An exception to this rule are the large, established programs (such as
Emacs) which run on a great variety of systems.  Such programs would
be broken by use of GNU extensions.
d814 2
a815 5
Another exception is for programs that are used as part of
compilation: anything that must be compiled with other compilers in
order to bootstrap the GNU compilation facilities.  If these require
the GNU compiler, then no one can compile them without having them
installed already.  That would be no good.
d817 2
a818 4
Since most computer systems do not yet implement @@sc{ANSI} C, using the
@@sc{ANSI} C features is effectively using a GNU extension, so the
same considerations apply.  (Except for @@sc{ANSI} features that we
discourage, such as trigraphs---don't ever use them.)
d820 3
d824 2
a825 2
@@node System Functions
@@chapter Calling System Functions
d827 2
a828 5
C implementations differ substantially.  ANSI C reduces but does not
eliminate the incompatibilities; meanwhile, many users wish to compile
GNU software with pre-ANSI compilers.  This chapter gives
recommendations for how to use the more or less standard C library
functions to avoid unnecessary loss of portability.
d830 2
a831 4
@@itemize @@bullet
@@item
Don't use the value of @@code{sprintf}.  It returns the number of
characters written on some systems, but not on all systems.
d833 2
a834 2
@@item
Don't declare system functions explicitly.
d836 2
a837 4
Almost any declaration for a system function is wrong on some system.
To minimize conflicts, leave it to the system header files to declare
system functions.  If the headers don't declare a function, let it
remain undeclared.
d839 2
a840 4
While it may seem unclean to use a function without declaring it, in
practice this works fine for most system library functions on the
systems where this really happens.  The problem is only theoretical.  By
contrast, actual declarations have frequently caused actual conflicts.
d842 2
a843 4
@@item
If you must declare a system function, don't specify the argument types.
Use an old-style declaration, not an ANSI prototype.  The more you
specify about the function, the more likely a conflict.
d845 3
a847 3
@@item
In particular, don't unconditionally declare @@code{malloc} or
@@code{realloc}.
d849 2
a850 4
Most GNU programs use those functions just once, in functions
conventionally named @@code{xmalloc} and @@code{xrealloc}.  These
functions call @@code{malloc} and @@code{realloc}, respectively, and
check the results.
d852 2
a853 2
Because @@code{xmalloc} and @@code{xrealloc} are defined in your program,
you can declare them in other files without any risk of type conflict.
d855 2
a856 6
On most systems, @@code{int} is the same length as a pointer; thus, the
calls to @@code{malloc} and @@code{realloc} work fine.  For the few
exceptional systems (mostly 64-bit machines), you can use
@@strong{conditionalized} declarations of @@code{malloc} and
@@code{realloc}---or put these declarations in configuration files
specific to those systems.
d858 3
a860 5
@@item
The string functions require special treatment.  Some Unix systems have
a header file @@file{string.h}; other have @@file{strings.h}.  Neither
file name is portable.  There are two things you can do: use Autoconf to
figure out which file to include, or don't include either file.
d862 2
a863 3
@@item
If you don't include either strings file, you can't get declarations for
the string functions from the header file in the usual way.
d865 2
a866 3
That causes less of a problem than you might think.  The newer ANSI
string functions are off-limits anyway because many systems still don't
support them.  The string functions you can use are these:
d868 2
a869 5
@@example
strcpy   strncpy   strcat   strncat
strlen   strcmp   strncmp
strchr   strrchr
@@end example
d871 2
a872 5
The copy and concatenate functions work fine without a declaration as
long as you don't use their values.  Using their values without a
declaration fails on systems where the width of a pointer differs from
the width of @@code{int}, and perhaps in other cases.  It is trivial to
avoid using their values, so do that.
d874 2
a875 4
The compare functions and @@code{strlen} work fine without a declaration
on most systems, possibly all the ones that GNU software runs on.
You may find it necessary to declare them @@strong{conditionally} on a
few systems.
d877 5
a881 6
The search functions must be declared to return @@code{char *}.  Luckily,
there is no variation in the data type they return.  But there is
variation in their names.  Some systems give these functions the names
@@code{index} and @@code{rindex}; other systems use the names
@@code{strchr} and @@code{strrchr}.  Some systems support both pairs of
names, but neither pair works on all systems.
d883 2
a884 7
You should pick a single pair of names and use it throughout your
program.  (Nowadays, it is better to choose @@code{strchr} and
@@code{strrchr}.)  Declare both of those names as functions returning
@@code{char *}.  On systems which don't support those names, define them
as macros in terms of the other pair.  For example, here is what to put
at the beginning of your file (or in a header) if you want to use the
names @@code{strchr} and @@code{strrchr} throughout:
d886 2
a887 7
@@example
#ifndef HAVE_STRCHR
#define strchr index
#endif
#ifndef HAVE_STRRCHR
#define strrchr rindex
#endif
d889 2
a890 4
char *strchr ();
char *strrchr ();
@@end example
@@end itemize
d892 2
a893 3
Here we assume that @@code{HAVE_STRCHR} and @@code{HAVE_STRRCHR} are
macros defined in systems where the corresponding functions exist.
One way to get them properly defined is to use Autoconf.
d895 2
a896 2
@@node Semantics
@@chapter Program Behavior for All Programs
d898 2
a899 4
Avoid arbitrary limits on the length or number of @@emph{any} data
structure, including filenames, lines, files, and symbols, by allocating
all data structures dynamically.  In most Unix utilities, ``long lines
are silently truncated''.  This is not acceptable in a GNU utility.
d901 2
a902 4
Utilities reading files should not drop NUL characters, or any other
nonprinting characters @@emph{including those with codes above 0177}.  The
only sensible exceptions would be utilities specifically intended for
interface to certain types of printers that can't handle those characters.
d904 2
a905 6
Check every system call for an error return, unless you know you wish to
ignore errors.  Include the system error text (from @@code{perror} or
equivalent) in @@emph{every} error message resulting from a failing
system call, as well as the name of the file if any and the name of the
utility.  Just ``cannot open foo.c'' or ``stat failed'' is not
sufficient.
d907 2
a908 4
Check every call to @@code{malloc} or @@code{realloc} to see if it
returned zero.  Check @@code{realloc} even if you are making the block
smaller; in a system that rounds block sizes to a power of 2,
@@code{realloc} may get a different block if you ask for less space.
d910 2
a911 5
In Unix, @@code{realloc} can destroy the storage block if it returns
zero.  GNU @@code{realloc} does not have this bug: if it fails, the
original block is unchanged.  Feel free to assume the bug is fixed.  If
you wish to run your program on Unix, and wish to avoid lossage in this
case, you can use the GNU @@code{malloc}.
d913 2
a914 3
You must expect @@code{free} to alter the contents of the block that was
freed.  Anything you want to fetch from the block, you must fetch before
calling @@code{free}.
d916 2
a917 2
Use @@code{getopt_long} to decode arguments, unless the argument syntax
makes this unreasonable.
d919 2
a920 3
When static storage is to be written in during program execution, use
explicit C code to initialize it.  Reserve C initialized declarations
for data that will not be changed.
d922 2
a923 5
Try to avoid low-level interfaces to obscure Unix data structures (such
as file directories, utmp, or the layout of kernel memory), since these
are less likely to work compatibly.  If you need to find all the files
in a directory, use @@code{readdir} or some other high-level interface.
These will be supported compatibly by GNU.
d925 2
a926 3
By default, the GNU system will provide the signal handling functions of
@@sc{BSD} and of @@sc{POSIX}.  So GNU software should be written to use
these.
d928 2
a929 7
In error checks that detect ``impossible'' conditions, just abort.
There is usually no point in printing any message.  These checks
indicate the existence of bugs.  Whoever wants to fix the bugs will have
to read the source code and run a debugger.  So explain the problem with
comments in the source.  The relevant data will be in variables, which
are easy to examine with the debugger, so there is no point moving them
elsewhere.
d931 2
d934 2
a935 2
@@node Errors
@@chapter Formatting Error Messages
d937 2
a938 1
Error messages from compilers should look like this:
d940 2
a941 3
@@example
@@var{source-file-name}:@@var{lineno}: @@var{message}
@@end example
d943 2
a944 1
Error messages from other noninteractive programs should look like this:
d946 3
a948 3
@@example
@@var{program}:@@var{source-file-name}:@@var{lineno}: @@var{message}
@@end example
d950 2
a951 2
@@noindent
when there is an appropriate source file, or like this:
d953 2
a954 3
@@example
@@var{program}: @@var{message}
@@end example
d956 2
a957 2
@@noindent
when there is no relevant source file.
d959 4
a962 6
In an interactive program (one that is reading commands from a
terminal), it is better not to include the program name in an error
message.  The place to indicate which program is running is in the
prompt or with the screen layout.  (When the same program runs with
input from a source other than a terminal, it is not interactive and
would do best to print error messages using the noninteractive style.)
d964 2
a965 3
The string @@var{message} should not begin with a capital letter when
it follows a program name and/or filename.  Also, it should not end
with a period.
d967 2
a968 3
Error messages from interactive programs, and other messages such as
usage messages, should start with a capital letter.  But they should not
end with a period.
d970 2
d973 2
a974 2
@@node Libraries
@@chapter Library Behavior
d976 2
a977 3
Try to make library functions reentrant.  If they need to do dynamic
storage allocation, at least try to avoid any nonreentrancy aside from
that of @@code{malloc} itself.
d979 2
a980 2
Here are certain name conventions for libraries, to avoid name
conflicts.
d982 2
a983 5
Choose a name prefix for the library, more than two characters long.
All external function and variable names should start with this
prefix.  In addition, there should only be one of these in any given
library member.  This usually means putting each one in a separate
source file.
d985 2
a986 3
An exception can be made when two external symbols are always used
together, so that no reasonable program could use one without the
other; then they can both go in the same file.
d988 2
a989 5
External symbols that are not documented entry points for the user
should have names beginning with @@samp{_}.  They should also contain
the chosen name prefix for the library, to prevent collisions with
other libraries.  These can go in the same files with user entry
points if you like.
d991 2
a992 2
Static functions and variables can be used as you like and need not
fit any naming convention.
d994 2
d997 2
a998 2
@@node Portability
@@chapter Portability As It Applies to GNU
d1000 2
a1001 15
Much of what is called ``portability'' in the Unix world refers to
porting to different Unix versions.  This is a secondary consideration
for GNU software, because its primary purpose is to run on top of one
and only one kernel, the GNU kernel, compiled with one and only one C
compiler, the GNU C compiler.  The amount and kinds of variation among
GNU systems on different cpu's will be like the variation among Berkeley
4.3 systems on different cpu's.

All users today run GNU software on non-GNU systems.  So supporting a
variety of non-GNU systems is desirable; simply not paramount.
The easiest way to achieve portability to a reasonable range of systems
is to use Autoconf.  It's unlikely that your program needs to know more
information about the host machine than Autoconf can provide, simply
because most of the programs that need such knowledge have already been
written.
d1003 2
a1004 30
It is difficult to be sure exactly what facilities the GNU kernel
will provide, since it isn't finished yet.  Therefore, assume you can
use anything in 4.3; just avoid using the format of semi-internal data
bases (e.g., directories) when there is a higher-level alternative
(@@code{readdir}).

You can freely assume any reasonably standard facilities in the C
language, libraries or kernel, because we will find it necessary to
support these facilities in the full GNU system, whether or not we
have already done so.  The fact that there may exist kernels or C
compilers that lack these facilities is irrelevant as long as the GNU
kernel and C compiler support them.

It remains necessary to worry about differences among cpu types, such
as the difference in byte ordering and alignment restrictions.  It's
unlikely that 16-bit machines will ever be supported by GNU, so there
is no point in spending any time to consider the possibility that an
int will be less than 32 bits.

You can assume that all pointers have the same format, regardless
of the type they point to, and that this is really an integer.
There are some weird machines where this isn't true, but they aren't
important; don't waste time catering to them.  Besides, eventually
we will put function prototypes into all GNU programs, and that will
probably make your program work even on weird machines.

Since some important machines (including the 68000) are big-endian,
it is important not to assume that the address of an @@code{int} object
is also the address of its least-significant byte.  Thus, don't
make the following mistake:
d1006 2
a1007 6
@@example
int c;
@@dots{}
while ((c = getchar()) != EOF)
        write(file_descriptor, &c, 1);
@@end example
d1009 2
a1010 4
You can assume that it is reasonable to use a meg of memory.  Don't
strain to reduce memory usage unless it can get to that level.  If
your program creates complicated data structures, just make them in
core and give a fatal error if malloc returns zero.
d1012 2
a1013 4
If a program works by lines and could be applied to arbitrary
user-supplied input files, it should keep only a line in memory, because
this is not very hard and users will want to be able to operate on input
files that are bigger than will fit in core all at once.
d1015 2
d1018 2
a1019 2
@@node User Interfaces
@@chapter Standards for Command Line Interfaces
d1021 2
a1022 3
Please don't make the behavior of a utility depend on the name used
to invoke it.  It is useful sometimes to make a link to a utility
with a different name, and that should not change what it does.
d1024 2
a1025 2
Instead, use a run time option or a compilation switch or both
to select among the alternate behaviors.
d1027 2
a1028 4
Likewise, please don't make the behavior of the program depend on the
type of output device it is used with.  Device independence is an
important principle of the system's design; do not compromise it
merely to save someone from typing an option now and then.
d1030 2
a1031 5
If you think one behavior is most useful when the output is to a
terminal, and another is most useful when the output is a file or a
pipe, then it is usually best to make the default behavior the one that
is useful with output to a terminal, and have an option for the other
behavior.
d1033 2
a1034 7
Compatibility requires certain programs to depend on the type of output
device.  It would be disastrous if @@code{ls} or @@code{sh} did not do so
in the way all users expect.  In some of these cases, we supplement the
program with a preferred alternate version that does not depend on the
output device type.  For example, we provide a @@code{dir} program much
like @@code{ls} except that its default output format is always
multi-column format.
d1036 2
a1037 6
It is a good idea to follow the @@sc{POSIX} guidelines for the
command-line options of a program.  The easiest way to do this is to use
@@code{getopt} to parse them.  Note that the GNU version of @@code{getopt}
will normally permit options anywhere among the arguments unless the
special argument @@samp{--} is used.  This is not what @@sc{POSIX}
specifies; it is a GNU extension.
d1039 2
a1040 4
Please define long-named options that are equivalent to the
single-letter Unix-style options.  We hope to make GNU more user
friendly this way.  This is easy to do with the GNU function
@@code{getopt_long}.
d1042 2
a1043 6
One of the advantages of long-named options is that they can be
consistent from program to program.  For example, users should be able
to expect the ``verbose'' option of any GNU program which has one, to be
spelled precisely @@samp{--verbose}.  To achieve this uniformity, look at
the table of common long-option names when you choose the option names
for your program.  The table appears below.
d1045 2
a1046 18
If you use names not already in the table, please send
@@samp{gnu@@@@prep.ai.mit.edu} a list of them, with their meanings, so we
can update the table.

It is usually a good idea for file names given as ordinary arguments
to be input files only; any output files would be specified using
options (preferably @@samp{-o}).  Even if you allow an output file name
as an ordinary argument for compatibility, try to provide a suitable
option as well.  This will lead to more consistency among GNU
utilities, so that there are fewer idiosyncracies for users to
remember.

Programs should support an option @@samp{--version} which prints the
program's version number on standard output and exits successfully, and
an option @@samp{--help} which prints option usage information on
standard output and exits successfully.  These options should inhibit
the normal function of the command; they should do nothing except print
the requested information.
d1048 3
a1050 5
@@c Please leave newlines between items in this table; it's much easier
@@c to update when it isn't completely squashed together and unreadable.
@@c When there is more than one short option for a long option name, put
@@c a semicolon between the lists of the programs that use them, not a
@@c period.   --friedman
d1052 2
a1053 1
@@table @@samp
d1055 2
a1056 2
@@item auto-check
@@samp{-a} in @@code{recode}.
d1058 2
a1059 2
@@item auto-reference
@@samp{-A} in @@code{ptx}.
d1061 3
a1063 2
@@item after-date
@@samp{-N} in @@code{tar}.
d1065 2
a1066 3
@@item all
@@samp{-a} in @@code{du}, @@code{ls}, @@code{nm}, @@code{stty}, @@code{uname},
and @@code{unexpand}.
d1068 2
a1069 2
@@item all-text
@@samp{-a} in @@code{diff}.
d1071 2
a1072 2
@@item almost-all
@@samp{-A} in @@code{ls}.
d1074 2
a1075 3
@@item append
@@samp{-a} in @@code{etags}, @@code{tee}, @@code{time};
@@samp{-r} in @@code{tar}.
d1077 2
a1078 2
@@item archive
@@samp{-a} in @@code{cp}.
d1080 2
a1081 2
@@item arglength
@@samp{-l} in @@code{m4}.
d1083 2
a1084 2
@@item ascii
@@samp{-a} in @@code{diff}.
d1086 2
a1087 2
@@item assume-new
@@samp{-W} in Make.
d1089 3
a1091 2
@@item assume-old
@@samp{-o} in Make.
d1093 2
a1094 2
@@item backward-search
@@samp{-B} in etags.
d1096 2
a1097 2
@@item batch
Used in GDB.
d1099 2
a1100 2
@@item baud
Used in GDB.
d1102 2
a1103 2
@@item before
@@samp{-b} in @@code{tac}.
d1105 2
a1106 2
@@item binary
@@samp{-b} in @@code{cpio} and @@code{diff}.
d1108 2
a1109 2
@@item block-size
Used in @@code{cpio} and @@code{tar}.
d1111 5
a1115 2
@@item blocks
@@samp{-b} in @@code{head} and @@code{tail}.
d1117 2
a1118 2
@@item break-file
@@samp{-b} in @@code{ptx}.
d1120 2
a1121 2
@@item brief
Used in various programs to make output shorter.
d1123 2
a1124 2
@@item bytes
@@samp{-c} in @@code{head}, @@code{split}, and @@code{tail}.
d1126 2
a1127 2
@@item c++
@@samp{-C} in @@code{etags}.
d1129 2
a1130 2
@@item catenate
@@samp{-A} in @@code{tar}.
d1132 2
a1133 2
@@item cd
Used in various programs to specify the directory to use.
d1135 2
a1136 2
@@item changes
@@samp{-c} in @@code{chgrp} and @@code{chown}.
d1138 2
a1139 2
@@item classify
@@samp{-F} in @@code{ls}.
d1141 2
a1142 2
@@item colons
@@samp{-c} in @@code{recode}.
d1144 2
a1145 3
@@item command
@@samp{-c} in @@code{su};
@@samp{-x} in GDB.
d1147 2
a1148 2
@@item compare
@@samp{-d} in @@code{tar}.
d1150 2
a1151 2
@@item compress
@@samp{-Z} in @@code{tar}.
d1153 3
a1155 2
@@item concatenate
@@samp{-A} in @@code{tar}.
d1157 3
a1159 2
@@item confirmation
@@samp{-w} in @@code{tar}.
d1161 2
a1162 2
@@item context
Used in @@code{diff}.
d1164 2
a1165 2
@@item copyright
@@samp{-C} in @@code{ptx} and @@code{recode}.
d1167 2
a1168 2
@@item core
Used in GDB.
d1170 2
a1171 2
@@item count
@@samp{-q} in @@code{who}.
d1173 4
a1176 2
@@item count-links
@@samp{-l} in @@code{du}.
d1178 2
a1179 2
@@item create
Used in @@code{tar} and @@code{cpio}.
d1181 2
a1182 2
@@item cxref
@@samp{-x} in @@code{etags}.
d1184 2
a1185 2
@@item date
@@samp{-d} in @@code{touch}.
d1187 2
a1188 3
@@item debug
@@samp{-d} in Make and @@code{m4};
@@samp{-t} in Bison.
d1190 2
a1191 2
@@item define
@@samp{-D} in @@code{m4}.
d1193 2
a1194 2
@@item defines
@@samp{-d} in Bison and @@code{etags}.
d1196 2
a1197 2
@@item delete
@@samp{-D} in @@code{tar}.
d1199 2
a1200 3
@@item dereference
@@samp{-L} in @@code{chgrp}, @@code{chown}, @@code{cpio}, @@code{du},
@@code{ls}, and @@code{tar}.
d1202 2
a1203 2
@@item dereference-args
@@samp{-D} in @@code{du}.
d1205 2
a1206 2
@@item diacritics
@@samp{-d} in @@code{recode}.
d1208 2
a1209 2
@@item dictionary-order
@@samp{-d} in @@code{look}.
d1211 2
a1212 2
@@item diff
@@samp{-d} in @@code{tar}.
d1214 2
a1215 2
@@item digits
@@samp{-n} in @@code{csplit}.
d1217 2
a1218 5
@@item directory
Specify the directory to use, in various programs.  In @@code{ls}, it
means to show directories themselves rather than their contents.  In
@@code{rm} and @@code{ln}, it means to not treat links to directories
specially.
d1220 2
a1221 2
@@item discard-all
@@samp{-x} in @@code{strip}.
d1223 14
a1236 2
@@item discard-locals
@@samp{-X} in @@code{strip}.
d1238 2
a1239 2
@@item diversions
@@samp{-N} in @@code{m4}.
d1241 2
a1242 2
@@item dry-run
@@samp{-n} in Make.
d1244 2
a1245 2
@@item ed
@@samp{-e} in @@code{diff}.
d1247 2
a1248 2
@@item elide-empty-files
@@samp{-z} in @@code{csplit}.
d1250 2
a1251 2
@@item entire-new-file
@@samp{-N} in @@code{diff}.
d1253 2
a1254 2
@@item environment-overrides
@@samp{-e} in Make.
d1256 2
a1257 2
@@item eof
@@samp{-e} in @@code{xargs}.
d1259 2
a1260 2
@@item epoch
Used in GDB.
d1262 2
a1263 2
@@item error-limit
Used in Makeinfo.
d1265 2
a1266 2
@@item error-output
@@samp{-o} in @@code{m4}.
d1268 2
a1269 2
@@item escape
@@samp{-b} in @@code{ls}.
d1271 2
a1272 2
@@item exclude-from
@@samp{-X} in @@code{tar}.
d1274 2
a1275 2
@@item exec
Used in GDB.
d1277 2
a1278 2
@@item exit
@@samp{-x} in @@code{xargs}.
d1280 2
a1281 2
@@item expand-tabs
@@samp{-t} in @@code{diff}.
d1283 2
a1284 2
@@item expression
@@samp{-e} in @@code{sed}.
d1286 2
a1287 2
@@item extern-only
@@samp{-g} in @@code{nm}.
d1289 2
a1290 3
@@item extract
@@samp{-i} in @@code{cpio};
@@samp{-x} in @@code{tar}.
d1292 2
a1293 2
@@item faces
@@samp{-f} in @@code{finger}.
d1295 2
a1296 2
@@item fast
@@samp{-f} in @@code{su}.
d1298 2
a1299 4
@@item file
@@samp{-f} in @@code{info}, Make, @@code{mt}, and @@code{tar};
@@samp{-n} in @@code{sed};
@@samp{-r} in @@code{touch}.
d1301 2
a1302 2
@@item file-prefix
@@samp{-b} in Bison.
d1304 2
a1305 2
@@item file-type
@@samp{-F} in @@code{ls}.
d1307 2
a1308 2
@@item files-from
@@samp{-T} in @@code{tar}.
d1310 2
a1311 2
@@item fill-column
Used in Makeinfo.
d1313 2
a1314 2
@@item flag-truncation
@@samp{-F} in @@code{ptx}.
d1316 2
a1317 2
@@item fixed-output-files
@@samp{-y} in Bison.
d1319 2
a1320 2
@@item follow
@@samp{-f} in @@code{tail}.
d1322 2
a1323 2
@@item footnote-style
Used in Makeinfo.
d1325 2
a1326 2
@@item force
@@samp{-f} in @@code{cp}, @@code{ln}, @@code{mv}, and @@code{rm}.
d1328 2
a1329 2
@@item format
Used in @@code{ls}, @@code{time}, and @@code{ptx}.
d1331 2
a1332 2
@@item forward-search
@@samp{-F} in @@code{etags}.
d1334 1
a1334 1
@@item fullname
d1337 20
a1356 2
@@item gap-size
@@samp{-g} in @@code{ptx}.
d1358 2
a1359 2
@@item get
@@samp{-x} in @@code{tar}.
d1361 2
a1362 2
@@item graphic
@@samp{-i} in @@code{ul}.
d1364 2
a1365 2
@@item graphics
@@samp{-g} in @@code{recode}.
d1367 2
a1368 2
@@item group
@@samp{-g} in @@code{install}.
d1370 2
a1371 2
@@item gzip
@@samp{-z} in @@code{tar}.
d1373 2
a1374 2
@@item hashsize
@@samp{-H} in @@code{m4}.
d1376 2
a1377 2
@@item header
@@samp{-h} in @@code{objdump} and @@code{recode}
d1379 2
a1380 2
@@item heading
@@samp{-H} in @@code{who}.
d1382 2
a1383 2
@@item help
Used to ask for brief usage information.
d1385 2
a1386 2
@@item hide-control-chars
@@samp{-q} in @@code{ls}.
d1388 2
a1389 2
@@item idle
@@samp{-u} in @@code{who}.
d1391 2
a1392 2
@@item ifdef
@@samp{-D} in @@code{diff}.
d1394 2
a1395 3
@@item ignore
@@samp{-I} in @@code{ls};
@@samp{-x} in @@code{recode}.
d1397 2
a1398 2
@@item ignore-all-space
@@samp{-w} in @@code{diff}.
d1400 2
a1401 2
@@item ignore-backups
@@samp{-B} in @@code{ls}.
d1403 2
a1404 2
@@item ignore-blank-lines
@@samp{-B} in @@code{diff}.
d1406 2
a1407 3
@@item ignore-case
@@samp{-f} in @@code{look} and @@code{ptx};
@@samp{-i} in @@code{diff}.
d1409 2
a1410 2
@@item ignore-errors
@@samp{-i} in Make.
d1412 2
a1413 2
@@item ignore-file
@@samp{-i} in @@code{ptx}.
d1415 2
a1416 2
@@item ignore-indentation
@@samp{-S} in @@code{etags}.
d1418 2
a1419 2
@@item ignore-init-file
@@samp{-f} in Oleo.
d1421 2
a1422 2
@@item ignore-interrupts
@@samp{-i} in @@code{tee}.
d1424 2
a1425 2
@@item ignore-matching-lines
@@samp{-I} in @@code{diff}.
d1427 2
a1428 2
@@item ignore-space-change
@@samp{-b} in @@code{diff}.
d1430 2
a1431 2
@@item ignore-zeros
@@samp{-i} in @@code{tar}.
d1433 2
a1434 3
@@item include
@@samp{-i} in @@code{etags};
@@samp{-I} in @@code{m4}.
d1436 2
a1437 2
@@item include-dir
@@samp{-I} in Make.
d1439 2
a1440 2
@@item incremental
@@samp{-G} in @@code{tar}.
d1442 2
a1443 2
@@item info
@@samp{-i}, @@samp{-l}, and @@samp{-m} in Finger.
d1445 4
a1448 2
@@item initial
@@samp{-i} in @@code{expand}.
d1450 2
a1451 2
@@item initial-tab
@@samp{-T} in @@code{diff}.
d1453 2
a1454 2
@@item inode
@@samp{-i} in @@code{ls}.
d1456 547
a2002 5
@@item interactive
@@samp{-i} in @@code{cp}, @@code{ln}, @@code{mv}, @@code{rm};
@@samp{-e} in @@code{m4};
@@samp{-p} in @@code{xargs};
@@samp{-w} in @@code{tar}.
d2004 2
a2005 2
@@item jobs
@@samp{-j} in Make.
d2007 2
a2008 2
@@item just-print
@@samp{-n} in Make.
d2010 5
a2014 2
@@item keep-going
@@samp{-k} in Make.
d2016 8
a2023 2
@@item keep-files
@@samp{-k} in @@code{csplit}.
d2025 1
a2025 2
@@item kilobytes
@@samp{-k} in @@code{du} and @@code{ls}.
d2027 3
a2029 2
@@item line-bytes
@@samp{-C} in @@code{split}.
d2031 6
a2036 2
@@item lines
Used in @@code{split}, @@code{head}, and @@code{tail}.
d2038 2
a2039 2
@@item link
@@samp{-l} in @@code{cpio}.
d2041 3
a2043 3
@@item list
@@samp{-t} in @@code{cpio};
@@samp{-l} in @@code{recode}.
d2045 2
a2046 2
@@item list
@@samp{-t} in @@code{tar}.
d2048 4
a2051 2
@@item literal
@@samp{-N} in @@code{ls}.
d2053 3
a2055 2
@@item load-average
@@samp{-l} in Make.
d2057 3
a2059 2
@@item login
Used in @@code{su}.
d2061 7
a2067 4
@@item machine
No listing of which programs already use this;
someone should check to
see if any actually do and tell @@code{gnu@@@@prep.ai.mit.edu}.
d2069 2
a2070 2
@@item macro-name
@@samp{-M} in @@code{ptx}.
d2072 9
a2080 2
@@item mail
@@samp{-m} in @@code{hello} and @@code{uname}.
d2082 2
a2083 2
@@item make-directories
@@samp{-d} in @@code{cpio}.
d2085 6
a2090 2
@@item makefile
@@samp{-f} in Make.
d2092 3
a2094 2
@@item mapped
Used in GDB.
d2096 9
a2104 2
@@item max-args
@@samp{-n} in @@code{xargs}.
d2106 3
a2108 2
@@item max-chars
@@samp{-n} in @@code{xargs}.
d2110 2
a2111 2
@@item max-lines
@@samp{-l} in @@code{xargs}.
d2113 4
a2116 2
@@item max-load
@@samp{-l} in Make.
d2118 2
a2119 2
@@item max-procs
@@samp{-P} in @@code{xargs}.
d2121 5
a2125 2
@@item mesg
@@samp{-T} in @@code{who}.
d2127 3
a2129 2
@@item message
@@samp{-T} in @@code{who}.
d2131 2
a2132 2
@@item minimal
@@samp{-d} in @@code{diff}.
d2134 5
a2138 2
@@item mode
@@samp{-m} in @@code{install}, @@code{mkdir}, and @@code{mkfifo}.
d2140 2
a2141 2
@@item modification-time
@@samp{-m} in @@code{tar}.
d2143 4
a2146 2
@@item multi-volume
@@samp{-M} in @@code{tar}.
d2148 2
a2149 2
@@item name-prefix
@@samp{-a} in Bison.
d2151 4
a2154 2
@@item new-file
@@samp{-W} in Make.
d2156 6
a2161 2
@@item no-builtin-rules
@@samp{-r} in Make.
d2163 3
a2165 2
@@item no-create
@@samp{-c} in @@code{touch}.
d2167 29
a2195 5
@@item no-defines
@@samp{-D} in @@code{etags}.

@@item no-dereference
@@samp{-d} in @@code{cp}.
d2197 2
a2198 2
@@item no-keep-going
@@samp{-S} in Make.
d2200 23
a2222 2
@@item no-lines
@@samp{-l} in Bison.
d2224 6
a2229 2
@@item no-prof
@@samp{-e} in @@code{gprof}.
d2231 6
a2236 2
@@item no-sort
@@samp{-p} in @@code{nm}.
d2238 4
a2241 2
@@item no-split
Used in Makeinfo.
d2243 9
a2251 2
@@item no-static
@@samp{-a} in @@code{gprof}.
d2253 11
a2263 2
@@item no-time
@@samp{-E} in @@code{gprof}.
d2265 2
a2266 2
@@item no-validate
Used in Makeinfo.
d2268 5
a2272 2
@@item no-warn
Used in various programs to inhibit warnings.
d2274 4
a2277 2
@@item node
@@samp{-n} in @@code{info}.
d2279 4
a2282 2
@@item nodename
@@samp{-n} in @@code{uname}.
d2284 2
a2285 2
@@item nonmatching
@@samp{-f} in @@code{cpio}.
d2287 4
a2290 2
@@item nstuff
@@samp{-n} in @@code{objdump}.
d2292 5
a2296 2
@@item null
@@samp{-0} in @@code{xargs}.
d2298 4
a2301 8
@@item number
@@samp{-n} in @@code{cat}.

@@item number-nonblank
@@samp{-b} in @@code{cat}.

@@item numeric-sort
@@samp{-n} in @@code{nm}.
d2303 3
a2305 2
@@item numeric-uid-gid
@@samp{-n} in @@code{cpio} and @@code{ls}.
d2307 4
a2310 2
@@item nx
Used in GDB.
d2312 2
a2313 2
@@item old-archive
@@samp{-o} in @@code{tar}.
d2315 6
a2320 2
@@item old-file
@@samp{-o} in Make.
d2322 5
a2326 2
@@item one-file-system
@@samp{-l} in @@code{tar}, @@code{cp}, and @@code{du}.
d2328 3
a2330 2
@@item only-file
@@samp{-o} in @@code{ptx}.
d2332 3
a2334 2
@@item only-prof
@@samp{-f} in @@code{gprof}.
d2336 5
a2340 2
@@item only-time
@@samp{-F} in @@code{gprof}.
d2342 5
a2346 2
@@item output
In various programs, specify the output file name.
d2348 4
a2351 2
@@item override
@@samp{-o} in @@code{rm}.
d2353 6
a2358 2
@@item owner
@@samp{-o} in @@code{install}.
d2360 8
a2367 2
@@item paginate
@@samp{-l} in @@code{diff}.
d2369 7
a2375 2
@@item paragraph-indent
Used in Makeinfo.
d2377 4
a2380 2
@@item parents
@@samp{-p} in @@code{mkdir} and @@code{rmdir}.
d2382 3
a2384 2
@@item pass-all
@@samp{-p} in @@code{ul}.
d2386 2
a2387 2
@@item pass-through
@@samp{-p} in @@code{cpio}.
d2389 5
a2393 2
@@item port
@@samp{-P} in @@code{finger}.
d2395 2
a2396 2
@@item portability
@@samp{-c} in @@code{cpio} and @@code{tar}.
d2398 3
a2400 2
@@item prefix-builtins
@@samp{-P} in @@code{m4}.
d2402 3
a2404 2
@@item prefix
@@samp{-f} in @@code{csplit}.
d2406 2
a2407 2
@@item preserve
Used in @@code{tar} and @@code{cp}.
d2409 12
a2420 2
@@item preserve-environment
@@samp{-p} in @@code{su}.
d2422 1
a2422 2
@@item preserve-modification-time
@@samp{-m} in @@code{cpio}.
d2424 4
a2427 2
@@item preserve-order
@@samp{-s} in @@code{tar}.
d2429 3
a2431 2
@@item preserve-permissions
@@samp{-p} in @@code{tar}.
d2433 4
a2436 2
@@item print
@@samp{-l} in @@code{diff}.
d2438 3
a2440 2
@@item print-chars
@@samp{-L} in @@code{cmp}.
d2442 5
a2446 2
@@item print-data-base
@@samp{-p} in Make.
d2448 3
a2450 2
@@item print-directory
@@samp{-w} in Make.
d2452 5
a2456 2
@@item print-file-name
@@samp{-o} in @@code{nm}.
d2458 4
a2461 2
@@item print-symdefs
@@samp{-s} in @@code{nm}.
d2463 2
a2464 2
@@item question
@@samp{-q} in Make.
d2466 4
a2469 4
@@item quiet
Used in many programs to inhibit the usual output.  @@strong{Note:} every
program accepting @@samp{--quiet} should accept @@samp{--silent} as a
synonym.
d2471 6
a2476 2
@@item quote-name
@@samp{-Q} in @@code{ls}.
d2478 5
a2482 2
@@item rcs
@@samp{-n} in @@code{diff}.
d2484 2
a2485 2
@@item read-full-blocks
@@samp{-B} in @@code{tar}.
d2487 2
a2488 2
@@item readnow
Used in GDB.
d2490 3
a2492 2
@@item recon
@@samp{-n} in Make.
d2494 5
a2498 2
@@item record-number
@@samp{-R} in @@code{tar}.
d2500 2
a2501 3
@@item recursive
Used in @@code{chgrp}, @@code{chown}, @@code{cp}, @@code{ls}, @@code{diff},
and @@code{rm}.
d2503 9
a2511 2
@@item reference-limit
Used in Makeinfo.
d2513 2
a2514 2
@@item references
@@samp{-r} in @@code{ptx}.
d2516 62
a2577 2
@@item regex
@@samp{-r} in @@code{tac}.
d2579 3
a2581 2
@@item release
@@samp{-r} in @@code{uname}.
d2583 20
a2602 2
@@item relocation
@@samp{-r} in @@code{objdump}.
d2604 3
a2606 2
@@item rename
@@samp{-r} in @@code{cpio}.
d2608 2
a2609 2
@@item replace
@@samp{-i} in @@code{xargs}.
d2611 2
a2612 2
@@item report-identical-files
@@samp{-s} in @@code{diff}.
d2614 2
a2615 2
@@item reset-access-time
@@samp{-a} in @@code{cpio}.
d2617 6
a2622 2
@@item reverse
@@samp{-r} in @@code{ls} and @@code{nm}.
d2624 3
a2626 2
@@item reversed-ed
@@samp{-f} in @@code{diff}.
d2628 2
a2629 2
@@item right-side-defs
@@samp{-R} in @@code{ptx}.
d2631 7
a2637 2
@@item same-order
@@samp{-s} in @@code{tar}.
d2639 6
a2644 2
@@item same-permissions
@@samp{-p} in @@code{tar}.
d2646 2
a2647 2
@@item save
@@samp{-g} in @@code{stty}.
d2649 5
a2653 2
@@item se
Used in GDB.
d2655 8
a2662 2
@@item sentence-regexp
@@samp{-S} in @@code{ptx}.
d2664 7
a2670 2
@@item separate-dirs
@@samp{-S} in @@code{du}.
d2672 2
a2673 2
@@item separator
@@samp{-s} in @@code{tac}.
d2675 5
a2679 2
@@item sequence
Used by @@code{recode} to chose files or pipes for sequencing passes.
d2681 2
a2682 2
@@item shell
@@samp{-s} in @@code{su}.
d2684 1
a2684 2
@@item show-all
@@samp{-A} in @@code{cat}.
d2686 3
a2688 2
@@item show-c-function
@@samp{-p} in @@code{diff}.
d2690 1
a2690 2
@@item show-ends
@@samp{-E} in @@code{cat}.
d2692 3
a2694 2
@@item show-function-line
@@samp{-F} in @@code{diff}.
d2696 4
a2699 2
@@item show-tabs
@@samp{-T} in @@code{cat}.
d2701 26
a2726 4
@@item silent
Used in many programs to inhibit the usual output.
@@strong{Note:} every program accepting
@@samp{--silent} should accept @@samp{--quiet} as a synonym.
d2728 4
a2731 2
@@item size
@@samp{-s} in @@code{ls}.
d2733 3
a2735 2
@@item sort
Used in @@code{ls}.
d2737 6
a2742 2
@@item sparse
@@samp{-S} in @@code{tar}.
d2744 2
a2745 2
@@item speed-large-files
@@samp{-H} in @@code{diff}.
d2747 4
a2750 2
@@item squeeze-blank
@@samp{-s} in @@code{cat}.
d2752 2
a2753 3
@@item starting-file
Used in @@code{tar} and @@code{diff} to specify which file within
a directory to start processing with.
d2755 2
a2756 2
@@item stop
@@samp{-S} in Make.
d2758 3
a2760 2
@@item strict
@@samp{-s} in @@code{recode}.
d2762 3
a2764 2
@@item strip
@@samp{-s} in @@code{install}.
d2766 3
a2768 2
@@item strip-all
@@samp{-s} in @@code{strip}.
d2770 3
a2772 2
@@item strip-debug
@@samp{-S} in @@code{strip}.
d2774 3
a2776 2
@@item suffix
@@samp{-S} in @@code{cp}, @@code{ln}, @@code{mv}.
d2778 2
a2779 2
@@item suffix-format
@@samp{-b} in @@code{csplit}.
d2781 3
a2783 2
@@item sum
@@samp{-s} in @@code{gprof}.
d2785 2
a2786 2
@@item summarize
@@samp{-s} in @@code{du}.
d2788 3
a2790 2
@@item symbolic
@@samp{-s} in @@code{ln}.
d2792 3
a2794 2
@@item symbols
Used in GDB and @@code{objdump}.
d2796 3
a2798 2
@@item synclines
@@samp{-s} in @@code{m4}.
d2800 8
a2807 2
@@item sysname
@@samp{-s} in @@code{uname}.
d2809 6
a2814 2
@@item tabs
@@samp{-t} in @@code{expand} and @@code{unexpand}.
d2816 2
a2817 2
@@item tabsize
@@samp{-T} in @@code{ls}.
d2819 2
a2820 2
@@item terminal
@@samp{-T} in @@code{tput} and @@code{ul}.
d2822 19
a2840 2
@@item text
@@samp{-a} in @@code{diff}.
d2842 5
a2846 2
@@item time
Used in @@code{ls} and @@code{touch}.
d2848 2
a2849 2
@@item to-stdout
@@samp{-O} in @@code{tar}.
d2851 3
a2853 2
@@item total
@@samp{-c} in @@code{du}.
d2855 2
a2856 2
@@item touch
@@samp{-t} in Make, @@code{ranlib}, and @@code{recode}.
d2858 5
a2862 2
@@item trace
@@samp{-t} in @@code{m4}.
d2864 5
a2868 3
@@item traditional
@@samp{-t} in @@code{hello};
@@samp{-G} in @@code{m4} and @@code{ptx}.
d2870 5
a2874 2
@@item tty
Used in GDB.
d2876 4
a2879 2
@@item typedefs
@@samp{-t} in @@code{etags}.
d2881 4
a2884 2
@@item typedefs-and-c++
@@samp{-T} in @@code{etags}.
d2886 5
a2890 2
@@item typeset-mode
@@samp{-t} in @@code{ptx}.
d2892 5
a2896 2
@@item uncompress
@@samp{-z} in @@code{tar}.
d2898 5
a2902 2
@@item unconditional
@@samp{-u} in @@code{cpio}.
d2904 3
a2906 2
@@item undefine
@@samp{-U} in @@code{m4}.
d2908 3
a2910 2
@@item undefined-only
@@samp{-u} in @@code{nm}.
d2912 1
a2912 2
@@item update
@@samp{-u} in @@code{cp}, @@samp{etags}, @@samp{mv}, @@samp{tar}.
d2914 7
a2920 2
@@item verbose
Print more information about progress.  Many programs support this.
d2922 2
a2923 2
@@item verify
@@samp{-W} in @@code{tar}.
d2925 3
a2927 2
@@item version
Print the version number.
d2929 6
a2934 2
@@item version-control
@@samp{-V} in @@code{cp}, @@code{ln}, @@code{mv}.
d2936 5
a2940 2
@@item vgrind
@@samp{-v} in @@code{etags}.
d2942 4
a2945 2
@@item volume
@@samp{-V} in @@code{tar}.
d2947 2
a2948 2
@@item what-if
@@samp{-W} in Make.
d2950 6
a2955 2
@@item width
@@samp{-w} in @@code{ls} and @@code{ptx}.
d2957 3
a2959 2
@@item word-regexp
@@samp{-W} in @@code{ptx}.
d2961 2
a2962 2
@@item writable
@@samp{-T} in @@code{who}.
d2964 3
a2966 2
@@item zeros
@@samp{-z} in @@code{gprof}.
d2968 3
d2973 6
a2978 2
@@node Documentation
@@chapter Documenting Programs
d2980 5
a2984 28
Please use Texinfo for documenting GNU programs.  See the Texinfo
manual, either the hardcopy or the version in the GNU Emacs Info
subsystem (@@kbd{C-h i}).  See existing GNU Texinfo files (e.g., those
under the @@file{man/} directory in the GNU Emacs distribution) for
examples.

The title page of the manual should state the version of the program
which the manual applies to.  The Top node of the manual should also
contain this information.  If the manual is changing more frequently
than or independent of the program, also state a version number for
the manual in both of these places.

The manual should document all command-line arguments and all
commands.  It should give examples of their use.  But don't organize
the manual as a list of features.  Instead, organize it by the
concepts a user will have before reaching that point in the manual.
Address the goals that a user will have in mind, and explain how to
accomplish them.  Don't use Unix man pages as a model for how to
write GNU documentation; they are a bad example to follow.

The manual should have a node named @@samp{@@var{program} Invocation} or
@@samp{Invoking @@var{program}}, where @@var{program} stands for the name
of the program being described, as you would type it in the shell to run
the program.  This node (together with its subnodes, if any) should
describe the program's command line arguments and how to run it (the
sort of information people would look in a man page for).  Start with an
@@samp{@@@@example} containing a template for all the options and arguments
that the program uses.
d2986 5
a2990 3
Alternatively, put a menu item in some menu whose item name fits one of
the above patterns.  This identifies the node which that item points to
as the node for this purpose, regardless of the node's actual name.
d2992 5
a2996 2
There will be automatic features for specifying a program name and
quickly reading just this part of its manual.
d2998 5
a3002 2
If one manual describes several programs, it should have such a node for
each program described.
d3004 3
a3006 6
In addition to its manual, the package should have a file named
@@file{NEWS} which contains a list of user-visible changes worth
mentioning.  In each new release, add items to the front of the file and
identify the version they pertain to.  Don't discard old items; leave
them in the file after the newer items.  This way, a user upgrading from
any previous version can see what is new.
d3008 3
a3010 3
If the @@file{NEWS} file gets very long, move some of the older items
into a file named @@file{ONEWS} and put a note at the end referring the
user to that file.
d3012 6
a3017 23
Please do not use the term ``pathname'' that is used in Unix
documentation; use ``file name'' (two words) instead.  We use the term
``path'' only for search paths, which are lists of file names.

It is ok to supply a man page for the program as well as a Texinfo
manual if you wish to.  But keep in mind that supporting a man page
requires continual effort, each time the program is changed.  Any time
you spend on the man page is time taken away from more useful things you
could contribute.

Thus, even if a user volunteers to donate a man page, you may find this
gift costly to accept.  Unless you have time on your hands, it may be
better to refuse the man page unless the same volunteer agrees to take
full responsibility for maintaining it---so that you can wash your hands
of it entirely.  If the volunteer ceases to do the job, then don't feel
obliged to pick it up yourself; it may be better to withdraw the man
page until another volunteer offers to carry on with it.

Alternatively, if you expect the discrepancies to be small enough that
the man page remains useful, put a prominent note near the beginning of
the man page explaining that you don't maintain it and that the Texinfo
manual is more authoritative, and describing how to access the Texinfo
documentation.
d3020 1
a3020 1
@@chapter Making Releases
d3022 3
a3024 3
Package the distribution of Foo version 69.96 in a gzipped tar file
named @@file{foo-69.96.tar.gz}.  It should unpack into a subdirectory
named @@file{foo-69.96}.
d3037 1
a3037 1
produced by Bison, Lex, @@TeX{}, and Makeinfo; this helps avoid
d3068 3
a3070 3
Try to make sure that all the file names will be unique on MS-DOG.  A
name on MS-DOG consists of up to 8 characters, optionally followed by a
period and up to three characters.  MS-DOG will truncate extra
d3077 1
a3077 1
to test print any @@file{*.texinfo} files.
d3088 6
@


1.1.1.1
log
@Initial GNU binutils 2.6 import
@
text
@@


1.1.1.2
log
@Import of binutils-2.8.1 from Cygnus/FSF
@
text
@d6 1
a6 1
@@set lastupdate 16 January 1997
a16 1
@@c @@setchapternewpage odd
a18 9
@@c This is used by a cross ref in make-stds.texi
@@set CODESTD  1
@@iftex
@@set CHAPTER chapter
@@end iftex
@@ifinfo
@@set CHAPTER node
@@end ifinfo

d21 1
a21 1
Copyright (C) 1992, 1993, 1994, 1995, 1996 Free Software Foundation, Inc.
d52 1
a52 1
Copyright @@copyright{} 1992, 1993, 1994, 1995, 1996 Free Software Foundation, Inc.
d66 1
a66 1
by the Free Software Foundation.
d70 1
a70 1
@@node Top, Preface, (dir), (dir)
d77 20
a96 38
* Preface::                     About the GNU Coding Standards
* Intellectual Property::       Keeping Free Software Free
* Design Advice::               General Program Design
* Program Behavior::            Program Behavior for All Programs
* Writing C::                   Making The Best Use of C
* Documentation::               Documenting Programs
* Managing Releases::           The Release Process
@@end menu

@@node Preface
@@chapter About the GNU Coding Standards

The GNU Coding Standards were written by Richard Stallman and other GNU
Project volunteers.  Their purpose is to make the GNU system clean,
consistent, and easy to install.  This document can also be read as a
guide to writing portable, robust and reliable programs.  It focuses on
programs written in C, but many of the rules and principles are useful
even if you write in another programming language.  The rules often
state reasons for writing in a certain way.

Corrections or suggestions regarding this document should be sent to
@@code{gnu@@@@prep.ai.mit.edu}.  If you make a suggestion, please include a
suggested new wording for it; our time is limited.  We prefer a context
diff to the @@file{standards.texi} or @@file{make-stds.texi} files, but if
you don't have those files, please mail your suggestion anyway.

This release of the GNU Coding Standards was last updated
@@value{lastupdate}.

@@node Intellectual Property
@@chapter Keeping Free Software Free

This @@value{CHAPTER} discusses how you can make sure that GNU software
remains unencumbered.

@@menu
* Reading Non-Free Code::       Referring to Proprietary Programs
* Contributions::               Accepting Contributions
d100 1
a100 1
@@section Referring to Proprietary Programs
d134 1
a134 1
@@section Accepting Contributions
d149 1
a149 1
you receive diffs to fix a bug, and they make significant changes, we
d158 1
a158 1
We know this is frustrating; it's frustrating for us as well.  But if
d167 68
a234 2
@@node Design Advice
@@chapter General Program Design
d236 7
a242 2
This @@value{CHAPTER} discusses some of the issues you should take into
account when designing your program.
a243 6
@@menu
* Compatibility::               Compatibility with other implementations
* Using Extensions::            Using non-standard features
* ANSI C::                      Using ANSI C features
* Source Language::             Using languages other than C
@@end menu
d246 1
a246 1
@@section Compatibility with Other Implementations
d248 4
a251 5
With occasional exceptions, utility programs and libraries for GNU
should be upward compatible with those in Berkeley Unix, and upward
compatible with @@sc{ansi} C if @@sc{ansi} C specifies their behavior, and
upward compatible with @@sc{POSIX} if @@sc{POSIX} specifies their
behavior.
d256 6
a261 6
@@sc{ansi} C and @@sc{POSIX} prohibit many kinds of extensions.  Feel free
to make the extensions anyway, and include a @@samp{--ansi},
@@samp{--posix}, or @@samp{--compatible} option to turn them off.
However, if the extension has a significant chance of breaking any real
programs or scripts, then it is not really upward compatible.  Try to
redesign its interface.
d271 2
a272 2
@@code{vi} is replaced with Emacs.)  But it is nice to offer a compatible
feature as well.  (There is a free @@code{vi} clone, so we offer it.)
d279 13
a291 2
@@node Using Extensions
@@section Using Non-standard Features
d293 5
a297 3
Many GNU facilities that already exist support a number of convenient
extensions over the comparable Unix facilities.  Whether to use these
extensions in implementing your program is a difficult question.
d299 5
a303 4
On the one hand, using the extensions can make a cleaner program.
On the other hand, people will not be able to build the program
unless the other GNU tools are available.  This might cause the
program to work on fewer kinds of machines.
d305 5
a309 4
With some extensions, it might be easy to provide both alternatives.
For example, you can define functions with a ``keyword'' @@code{INLINE}
and define that as a macro to expand into either @@code{inline} or
nothing, depending on the compiler.
d311 4
a314 3
In general, perhaps it is best not to use the extensions if you can
straightforwardly do without them, but to use the extensions if they
are a big improvement.
d316 4
a319 3
An exception to this rule are the large, established programs (such as
Emacs) which run on a great variety of systems.  Such programs would
be broken by use of GNU extensions.
d321 5
a325 5
Another exception is for programs that are used as part of
compilation: anything that must be compiled with other compilers in
order to bootstrap the GNU compilation facilities.  If these require
the GNU compiler, then no one can compile them without having them
installed already.  That would be no good.
d327 5
a331 2
@@node ANSI C
@@section @@sc{ansi} C and pre-@@sc{ansi} C
d333 5
a337 1
Do not ever use the ``trigraph'' feature of @@sc{ansi} C.
d339 3
a341 9
@@sc{ansi} C is widespread enough now that it is ok to write new programs
that use @@sc{ansi} C features (and therefore will not work in
non-@@sc{ansi} compilers).  And if a program is already written in
@@sc{ansi} C, there's no need to convert it to support non-@@sc{ansi}
compilers.

However, it is easy to support non-@@sc{ansi} compilers in most programs,
so you might still consider doing so when you write a program.  Instead
of writing function definitions in @@sc{ansi} prototype form,
d344 1
a344 3
int
foo (int x, int y)
@@dots{}
d347 77
a423 2
@@noindent
write the definition in pre-@@sc{ansi} style like this,
d425 5
a429 6
@@example
int
foo (x, y)
     int x, y;
@@dots{}
@@end example
d431 5
a435 2
@@noindent
and use a separate declaration to specify the argument prototype:
d437 3
a439 3
@@example
int foo (int, int);
@@end example
d441 3
a443 4
You need such a declaration anyway, in a header file, to get the benefit
of @@sc{ansi} C prototypes in all the files where the function is called.
And once you have it, you lose nothing by writing the function
definition in the pre-@@sc{ansi} style.
a444 2
If you don't know non-@@sc{ansi} C, there's no need to learn it; just
write in @@sc{ansi} C.
d447 1
a447 1
@@section Using Languages Other Than C
d461 2
a462 2
For example, if your program links with GUILE, it is ok to write part of
the program in Scheme or another language supported by GUILE.
d476 8
a483 2
@@node Program Behavior
@@chapter Program Behavior for All Programs
d485 4
a488 3
This @@value{CHAPTER} describes how to write robust software. It also
describes general standards for error messages, the command line interface,
and how libraries should behave.
d490 8
a497 8
@@menu
* Semantics::                   Writing robust programs
* Libraries::                   Library behavior
* Errors::                      Formatting error messages
* User Interfaces::             Standards for command line interfaces
* Option Table::                Table of long options.
* Memory Usage::                When and how to care about memory needs
@@end menu
d499 2
a500 2
@@node Semantics
@@section Writing Robust Programs
d502 7
a508 4
Avoid arbitrary limits on the length or number of @@emph{any} data
structure, including file names, lines, files, and symbols, by allocating
all data structures dynamically.  In most Unix utilities, ``long lines
are silently truncated''.  This is not acceptable in a GNU utility.
d510 2
a511 4
Utilities reading files should not drop NUL characters, or any other
nonprinting characters @@emph{including those with codes above 0177}.  The
only sensible exceptions would be utilities specifically intended for
interface to certain types of printers that can't handle those characters.
d513 6
a518 6
Check every system call for an error return, unless you know you wish to
ignore errors.  Include the system error text (from @@code{perror} or
equivalent) in @@emph{every} error message resulting from a failing
system call, as well as the name of the file if any and the name of the
utility.  Just ``cannot open foo.c'' or ``stat failed'' is not
sufficient.
d520 1
a520 4
Check every call to @@code{malloc} or @@code{realloc} to see if it
returned zero.  Check @@code{realloc} even if you are making the block
smaller; in a system that rounds block sizes to a power of 2,
@@code{realloc} may get a different block if you ask for less space.
d522 13
a534 5
In Unix, @@code{realloc} can destroy the storage block if it returns
zero.  GNU @@code{realloc} does not have this bug: if it fails, the
original block is unchanged.  Feel free to assume the bug is fixed.  If
you wish to run your program on Unix, and wish to avoid lossage in this
case, you can use the GNU @@code{malloc}.
d536 2
a537 3
You must expect @@code{free} to alter the contents of the block that was
freed.  Anything you want to fetch from the block, you must fetch before
calling @@code{free}.
d539 2
a540 5
If @@code{malloc} fails in a noninteractive program, make that a fatal
error.  In an interactive program (one that reads commands from the
user), it is better to abort the command and return to the command
reader loop.  This allows the user to kill other processes to free up
virtual memory, and then try the command again.
d542 4
a545 2
Use @@code{getopt_long} to decode arguments, unless the argument syntax
makes this unreasonable.
d547 2
a548 4
When static storage is to be written in during program execution, use
explicit C code to initialize it.  Reserve C initialized declarations
for data that will not be changed.
@@c ADR: why?
d550 5
a554 5
Try to avoid low-level interfaces to obscure Unix data structures (such
as file directories, utmp, or the layout of kernel memory), since these
are less likely to work compatibly.  If you need to find all the files
in a directory, use @@code{readdir} or some other high-level interface.
These will be supported compatibly by GNU.
d556 1
a556 3
By default, the GNU system will provide the signal handling functions of
@@sc{BSD} and of @@sc{POSIX}.  So GNU software should be written to use
these.
d558 5
a562 7
In error checks that detect ``impossible'' conditions, just abort.
There is usually no point in printing any message.  These checks
indicate the existence of bugs.  Whoever wants to fix the bugs will have
to read the source code and run a debugger.  So explain the problem with
comments in the source.  The relevant data will be in variables, which
are easy to examine with the debugger, so there is no point moving them
elsewhere.
d564 3
a566 43
Do not use a count of errors as the exit status for a program.
@@emph{That does not work}, because exit status values are limited to 8
bits (0 through 255).  A single run of the program might have 256
errors; if you try to return 256 as the exit status, the parent process
will see 0 as the status, and it will appear that the program succeeded.

If you make temporary files, check the @@code{TMPDIR} environment
variable; if that variable is defined, use the specified directory
instead of @@file{/tmp}.

@@node Libraries
@@section Library Behavior

Try to make library functions reentrant.  If they need to do dynamic
storage allocation, at least try to avoid any nonreentrancy aside from
that of @@code{malloc} itself.

Here are certain name conventions for libraries, to avoid name
conflicts.

Choose a name prefix for the library, more than two characters long.
All external function and variable names should start with this
prefix.  In addition, there should only be one of these in any given
library member.  This usually means putting each one in a separate
source file.

An exception can be made when two external symbols are always used
together, so that no reasonable program could use one without the
other; then they can both go in the same file.

External symbols that are not documented entry points for the user
should have names beginning with @@samp{_}.  They should also contain
the chosen name prefix for the library, to prevent collisions with
other libraries.  These can go in the same files with user entry
points if you like.

Static functions and variables can be used as you like and need not
fit any naming convention.

@@node Errors
@@section Formatting Error Messages

Error messages from compilers should look like this:
d569 2
a570 1
@@var{source-file-name}:@@var{lineno}: @@var{message}
d573 1
a573 1
Error messages from other noninteractive programs should look like this:
d576 2
a577 1
@@var{program}:@@var{source-file-name}:@@var{lineno}: @@var{message}
d580 1
a580 2
@@noindent
when there is an appropriate source file, or like this:
d583 5
a587 1
@@var{program}: @@var{message}
d590 4
a593 2
@@noindent
when there is no relevant source file.
a594 6
In an interactive program (one that is reading commands from a
terminal), it is better not to include the program name in an error
message.  The place to indicate which program is running is in the
prompt or with the screen layout.  (When the same program runs with
input from a source other than a terminal, it is not interactive and
would do best to print error messages using the noninteractive style.)
d596 2
a597 3
The string @@var{message} should not begin with a capital letter when
it follows a program name and/or file name.  Also, it should not end
with a period.
d599 2
a600 3
Error messages from interactive programs, and other messages such as
usage messages, should start with a capital letter.  But they should not
end with a period.
d602 10
a611 2
@@node User Interfaces
@@section Standards for Command Line Interfaces
d613 1
a613 3
Please don't make the behavior of a utility depend on the name used
to invoke it.  It is useful sometimes to make a link to a utility
with a different name, and that should not change what it does.
d615 7
a621 2
Instead, use a run time option or a compilation switch or both
to select among the alternate behaviors.
d623 5
a627 4
Likewise, please don't make the behavior of the program depend on the
type of output device it is used with.  Device independence is an
important principle of the system's design; do not compromise it
merely to save someone from typing an option now and then.
d629 4
a632 5
If you think one behavior is most useful when the output is to a
terminal, and another is most useful when the output is a file or a
pipe, then it is usually best to make the default behavior the one that
is useful with output to a terminal, and have an option for the other
behavior.
d634 1
a634 47
Compatibility requires certain programs to depend on the type of output
device.  It would be disastrous if @@code{ls} or @@code{sh} did not do so
in the way all users expect.  In some of these cases, we supplement the
program with a preferred alternate version that does not depend on the
output device type.  For example, we provide a @@code{dir} program much
like @@code{ls} except that its default output format is always
multi-column format.

It is a good idea to follow the @@sc{POSIX} guidelines for the
command-line options of a program.  The easiest way to do this is to use
@@code{getopt} to parse them.  Note that the GNU version of @@code{getopt}
will normally permit options anywhere among the arguments unless the
special argument @@samp{--} is used.  This is not what @@sc{POSIX}
specifies; it is a GNU extension.

Please define long-named options that are equivalent to the
single-letter Unix-style options.  We hope to make GNU more user
friendly this way.  This is easy to do with the GNU function
@@code{getopt_long}.

One of the advantages of long-named options is that they can be
consistent from program to program.  For example, users should be able
to expect the ``verbose'' option of any GNU program which has one, to be
spelled precisely @@samp{--verbose}.  To achieve this uniformity, look at
the table of common long-option names when you choose the option names
for your program (@@pxref{Option Table}).

It is usually a good idea for file names given as ordinary arguments to
be input files only; any output files would be specified using options
(preferably @@samp{-o} or @@samp{--output}).  Even if you allow an output
file name as an ordinary argument for compatibility, try to provide an
option as another way to specify it.  This will lead to more consistency
among GNU utilities, and fewer idiosyncracies for users to remember.

All programs should support two standard options: @@samp{--version}
and @@samp{--help}.

@@table @@code
@@item --version
This option should direct the program to information about its name,
version, origin and legal status, all on standard output, and then exit
successfully.  Other options and arguments should be ignored once this
is seen, and the program should not perform its normal function.

The first line is meant to be easy for a program to parse; the version
number proper starts after the last space.  In addition, it contains
the canonical name for this program, in this format:
d637 3
a639 1
GNU Emacs 19.30
d642 5
a646 8
@@noindent
The program's name should be a constant string; @@emph{don't} compute it
from @@code{argv[0]}.  The idea is to state the standard or canonical
name for the program, not its file name.  There are other ways to find
out the precise file name where a command is found in @@code{PATH}.

If the program is a subsidiary part of a larger package, mention the
package name in parentheses, like this:
d649 5
a653 1
emacsserver (GNU Emacs) 19.30
d657 1
a657 56
If the package has a version number which is different from this
program's version number, you can mention the package version number
just before the close-parenthesis.

If you @@strong{need} to mention the version numbers of libraries which
are distributed separately from the package which contains this program,
you can do so by printing an additional line of version info for each
library you want to mention.  Use the same format for these lines as for
the first line.

Please don't mention all the libraries that the program uses ``just for
completeness''---that would produce a lot of unhelpful clutter.  Please
mention library version numbers only if you find in practice that they
are very important to you in debugging.

The following line, after the version number line or lines, should be a
copyright notice.  If more than one copyright notice is called for, put
each on a separate line.

Next should follow a brief statement that the program is free software,
and that users are free to copy and change it on certain conditions.  If
the program is covered by the GNU GPL, say so here.  Also mention that
there is no warranty, to the extent permitted by law.

It is ok to finish the output with a list of the major authors of the
program, as a way of giving credit.

Here's an example of output that follows these rules:

@@smallexample
GNU Emacs 19.34.5
Copyright (C) 1996 Free Software Foundation, Inc.
GNU Emacs comes with NO WARRANTY, to the extent permitted by law.
You may redistribute copies of GNU Emacs
under the terms of the GNU General Public License.
For more information about these matters, see the files named COPYING.
@@end smallexample

You should adapt this to your program, of course, filling in the proper
year, copyright holder, name of program, and the references to
distribution terms, and changing the rest of the wording as necessary.

This copyright notice only needs to mention the most recent year in
which changes were made---there's no need to list the years for previous
versions' changes.  You don't have to mention the name of the program in
these notices, if that is inconvenient, since it appeared in the first
line.

@@item --help
This option should output brief documentation for how to invoke the
program, on standard output, then exit successfully.  Other options and
arguments should be ignored once this is seen, and the program should
not perform its normal function.

Near the end of the @@samp{--help} option's output there should be a line
that says where to mail bug reports.  It should have this format:
d660 5
a664 1
Report bugs to @@var{mailing-address}.
a665 1
@@end table
a666 2
@@node Option Table
@@section Table of Long Options
d668 2
a669 5
Here is a table of long options used by GNU programs.  It is surely
incomplete, but we aim to list all the options that a new program might
want to be compatible with.  If you use names not already in the table,
please send @@samp{gnu@@@@prep.ai.mit.edu} a list of them, with their
meanings, so we can update the table.
d671 2
a672 5
@@c Please leave newlines between items in this table; it's much easier
@@c to update when it isn't completely squashed together and unreadable.
@@c When there is more than one short option for a long option name, put
@@c a semicolon between the lists of the programs that use them, not a
@@c period.   --friedman
d674 5
a678 3
@@table @@samp
@@item after-date
@@samp{-N} in @@code{tar}.
d680 8
a687 3
@@item all
@@samp{-a} in @@code{du}, @@code{ls}, @@code{nm}, @@code{stty}, @@code{uname},
and @@code{unexpand}.
d689 1
a689 2
@@item all-text
@@samp{-a} in @@code{diff}.
d691 3
a693 2
@@item almost-all
@@samp{-A} in @@code{ls}.
d695 4
a698 3
@@item append
@@samp{-a} in @@code{etags}, @@code{tee}, @@code{time};
@@samp{-r} in @@code{tar}.
d700 2
a701 2
@@item archive
@@samp{-a} in @@code{cp}.
d703 3
a705 2
@@item archive-name
@@samp{-n} in @@code{shar}.
d707 2
a708 2
@@item arglength
@@samp{-l} in @@code{m4}.
d710 4
a713 2
@@item ascii
@@samp{-a} in @@code{diff}.
d715 3
a717 472
@@item assign
@@samp{-v} in @@code{gawk}.

@@item assume-new
@@samp{-W} in Make.

@@item assume-old
@@samp{-o} in Make.

@@item auto-check
@@samp{-a} in @@code{recode}.

@@item auto-pager
@@samp{-a} in @@code{wdiff}.

@@item auto-reference
@@samp{-A} in @@code{ptx}.

@@item avoid-wraps
@@samp{-n} in @@code{wdiff}.

@@item backward-search
@@samp{-B} in @@code{ctags}.

@@item basename
@@samp{-f} in @@code{shar}.

@@item batch
Used in GDB.

@@item baud
Used in GDB.

@@item before
@@samp{-b} in @@code{tac}.

@@item binary
@@samp{-b} in @@code{cpio} and @@code{diff}.

@@item bits-per-code
@@samp{-b} in @@code{shar}.

@@item block-size
Used in @@code{cpio} and @@code{tar}.

@@item blocks
@@samp{-b} in @@code{head} and @@code{tail}.

@@item break-file
@@samp{-b} in @@code{ptx}.

@@item brief
Used in various programs to make output shorter.

@@item bytes
@@samp{-c} in @@code{head}, @@code{split}, and @@code{tail}.

@@item c@@t{++}
@@samp{-C} in @@code{etags}.

@@item catenate
@@samp{-A} in @@code{tar}.

@@item cd
Used in various programs to specify the directory to use.

@@item changes
@@samp{-c} in @@code{chgrp} and @@code{chown}.

@@item classify
@@samp{-F} in @@code{ls}.

@@item colons
@@samp{-c} in @@code{recode}.

@@item command
@@samp{-c} in @@code{su};
@@samp{-x} in GDB.

@@item compare
@@samp{-d} in @@code{tar}.

@@item compat
Used in @@code{gawk}.

@@item compress
@@samp{-Z} in @@code{tar} and @@code{shar}.

@@item concatenate
@@samp{-A} in @@code{tar}.

@@item confirmation
@@samp{-w} in @@code{tar}.

@@item context
Used in @@code{diff}.

@@item copyleft
@@samp{-W copyleft} in @@code{gawk}.

@@item copyright
@@samp{-C} in @@code{ptx}, @@code{recode}, and @@code{wdiff};
@@samp{-W copyright} in @@code{gawk}.

@@item core
Used in GDB.

@@item count
@@samp{-q} in @@code{who}.

@@item count-links
@@samp{-l} in @@code{du}.

@@item create
Used in @@code{tar} and @@code{cpio}.

@@item cut-mark
@@samp{-c} in @@code{shar}.

@@item cxref
@@samp{-x} in @@code{ctags}.

@@item date
@@samp{-d} in @@code{touch}.

@@item debug
@@samp{-d} in Make and @@code{m4};
@@samp{-t} in Bison.

@@item define
@@samp{-D} in @@code{m4}.

@@item defines
@@samp{-d} in Bison and @@code{ctags}.

@@item delete
@@samp{-D} in @@code{tar}.

@@item dereference
@@samp{-L} in @@code{chgrp}, @@code{chown}, @@code{cpio}, @@code{du},
@@code{ls}, and @@code{tar}.

@@item dereference-args
@@samp{-D} in @@code{du}.

@@item diacritics
@@samp{-d} in @@code{recode}.

@@item dictionary-order
@@samp{-d} in @@code{look}.

@@item diff
@@samp{-d} in @@code{tar}.

@@item digits
@@samp{-n} in @@code{csplit}.

@@item directory
Specify the directory to use, in various programs.  In @@code{ls}, it
means to show directories themselves rather than their contents.  In
@@code{rm} and @@code{ln}, it means to not treat links to directories
specially.

@@item discard-all
@@samp{-x} in @@code{strip}.

@@item discard-locals
@@samp{-X} in @@code{strip}.

@@item dry-run
@@samp{-n} in Make.

@@item ed
@@samp{-e} in @@code{diff}.

@@item elide-empty-files
@@samp{-z} in @@code{csplit}.

@@item end-delete
@@samp{-x} in @@code{wdiff}.

@@item end-insert
@@samp{-z} in @@code{wdiff}.

@@item entire-new-file
@@samp{-N} in @@code{diff}.

@@item environment-overrides
@@samp{-e} in Make.

@@item eof
@@samp{-e} in @@code{xargs}.

@@item epoch
Used in GDB.

@@item error-limit
Used in @@code{makeinfo}.

@@item error-output
@@samp{-o} in @@code{m4}.

@@item escape
@@samp{-b} in @@code{ls}.

@@item exclude-from
@@samp{-X} in @@code{tar}.

@@item exec
Used in GDB.

@@item exit
@@samp{-x} in @@code{xargs}.

@@item exit-0
@@samp{-e} in @@code{unshar}.

@@item expand-tabs
@@samp{-t} in @@code{diff}.

@@item expression
@@samp{-e} in @@code{sed}.

@@item extern-only
@@samp{-g} in @@code{nm}.

@@item extract
@@samp{-i} in @@code{cpio};
@@samp{-x} in @@code{tar}.

@@item faces
@@samp{-f} in @@code{finger}.

@@item fast
@@samp{-f} in @@code{su}.

@@item fatal-warnings
@@samp{-E} in @@code{m4}.

@@item file
@@samp{-f} in @@code{info}, @@code{gawk}, Make, @@code{mt}, and @@code{tar};
@@samp{-n} in @@code{sed};
@@samp{-r} in @@code{touch}.

@@item field-separator
@@samp{-F} in @@code{gawk}.

@@item file-prefix
@@samp{-b} in Bison.

@@item file-type
@@samp{-F} in @@code{ls}.

@@item files-from
@@samp{-T} in @@code{tar}.

@@item fill-column
Used in @@code{makeinfo}.

@@item flag-truncation
@@samp{-F} in @@code{ptx}.

@@item fixed-output-files
@@samp{-y} in Bison.

@@item follow
@@samp{-f} in @@code{tail}.

@@item footnote-style
Used in @@code{makeinfo}.

@@item force
@@samp{-f} in @@code{cp}, @@code{ln}, @@code{mv}, and @@code{rm}.

@@item force-prefix
@@samp{-F} in @@code{shar}.

@@item format
Used in @@code{ls}, @@code{time}, and @@code{ptx}.

@@item freeze-state
@@samp{-F} in @@code{m4}.

@@item fullname
Used in GDB.

@@item gap-size
@@samp{-g} in @@code{ptx}.

@@item get
@@samp{-x} in @@code{tar}.

@@item graphic
@@samp{-i} in @@code{ul}.

@@item graphics
@@samp{-g} in @@code{recode}.

@@item group
@@samp{-g} in @@code{install}.

@@item gzip
@@samp{-z} in @@code{tar} and @@code{shar}.

@@item hashsize
@@samp{-H} in @@code{m4}.

@@item header
@@samp{-h} in @@code{objdump} and @@code{recode}

@@item heading
@@samp{-H} in @@code{who}.

@@item help
Used to ask for brief usage information.

@@item here-delimiter
@@samp{-d} in @@code{shar}.

@@item hide-control-chars
@@samp{-q} in @@code{ls}.

@@item idle
@@samp{-u} in @@code{who}.

@@item ifdef
@@samp{-D} in @@code{diff}.

@@item ignore
@@samp{-I} in @@code{ls};
@@samp{-x} in @@code{recode}.

@@item ignore-all-space
@@samp{-w} in @@code{diff}.

@@item ignore-backups
@@samp{-B} in @@code{ls}.

@@item ignore-blank-lines
@@samp{-B} in @@code{diff}.

@@item ignore-case
@@samp{-f} in @@code{look} and @@code{ptx};
@@samp{-i} in @@code{diff} and @@code{wdiff}.

@@item ignore-errors
@@samp{-i} in Make.

@@item ignore-file
@@samp{-i} in @@code{ptx}.

@@item ignore-indentation
@@samp{-I} in @@code{etags}.

@@item ignore-init-file
@@samp{-f} in Oleo.

@@item ignore-interrupts
@@samp{-i} in @@code{tee}.

@@item ignore-matching-lines
@@samp{-I} in @@code{diff}.

@@item ignore-space-change
@@samp{-b} in @@code{diff}.

@@item ignore-zeros
@@samp{-i} in @@code{tar}.

@@item include
@@samp{-i} in @@code{etags};
@@samp{-I} in @@code{m4}.

@@item include-dir
@@samp{-I} in Make.

@@item incremental
@@samp{-G} in @@code{tar}.

@@item info
@@samp{-i}, @@samp{-l}, and @@samp{-m} in Finger.

@@item initial
@@samp{-i} in @@code{expand}.

@@item initial-tab
@@samp{-T} in @@code{diff}.

@@item inode
@@samp{-i} in @@code{ls}.

@@item interactive
@@samp{-i} in @@code{cp}, @@code{ln}, @@code{mv}, @@code{rm};
@@samp{-e} in @@code{m4};
@@samp{-p} in @@code{xargs};
@@samp{-w} in @@code{tar}.

@@item intermix-type
@@samp{-p} in @@code{shar}.

@@item jobs
@@samp{-j} in Make.

@@item just-print
@@samp{-n} in Make.

@@item keep-going
@@samp{-k} in Make.

@@item keep-files
@@samp{-k} in @@code{csplit}.

@@item kilobytes
@@samp{-k} in @@code{du} and @@code{ls}.

@@item language
@@samp{-l} in @@code{etags}.

@@item less-mode
@@samp{-l} in @@code{wdiff}.

@@item level-for-gzip
@@samp{-g} in @@code{shar}.

@@item line-bytes
@@samp{-C} in @@code{split}.

@@item lines
Used in @@code{split}, @@code{head}, and @@code{tail}.

@@item link
@@samp{-l} in @@code{cpio}.

@@item lint
@@itemx lint-old
Used in @@code{gawk}.

@@item list
@@samp{-t} in @@code{cpio};
@@samp{-l} in @@code{recode}.

@@item list
@@samp{-t} in @@code{tar}.

@@item literal
@@samp{-N} in @@code{ls}.

@@item load-average
@@samp{-l} in Make.

@@item login
Used in @@code{su}.

@@item machine
No listing of which programs already use this;
someone should check to
see if any actually do and tell @@code{gnu@@@@prep.ai.mit.edu}.

@@item macro-name
@@samp{-M} in @@code{ptx}.

@@item mail
@@samp{-m} in @@code{hello} and @@code{uname}.

@@item make-directories
@@samp{-d} in @@code{cpio}.

@@item makefile
@@samp{-f} in Make.

@@item mapped
Used in GDB.
d719 3
a721 2
@@item max-args
@@samp{-n} in @@code{xargs}.
d723 7
a729 2
@@item max-chars
@@samp{-n} in @@code{xargs}.
d731 2
a732 2
@@item max-lines
@@samp{-l} in @@code{xargs}.
d734 9
a742 2
@@item max-load
@@samp{-l} in Make.
d744 2
a745 2
@@item max-procs
@@samp{-P} in @@code{xargs}.
d747 6
a752 2
@@item mesg
@@samp{-T} in @@code{who}.
d754 3
a756 2
@@item message
@@samp{-T} in @@code{who}.
d758 9
a766 2
@@item minimal
@@samp{-d} in @@code{diff}.
d768 3
a770 2
@@item mixed-uuencode
@@samp{-M} in @@code{shar}.
d772 2
a773 2
@@item mode
@@samp{-m} in @@code{install}, @@code{mkdir}, and @@code{mkfifo}.
d775 4
a778 2
@@item modification-time
@@samp{-m} in @@code{tar}.
d780 2
a781 2
@@item multi-volume
@@samp{-M} in @@code{tar}.
d783 5
a787 2
@@item name-prefix
@@samp{-a} in Bison.
d789 3
a791 2
@@item nesting-limit
@@samp{-L} in @@code{m4}.
d793 2
a794 2
@@item net-headers
@@samp{-a} in @@code{shar}.
d796 4
a799 2
@@item new-file
@@samp{-W} in Make.
d801 2
a802 2
@@item no-builtin-rules
@@samp{-r} in Make.
d804 4
a807 2
@@item no-character-count
@@samp{-w} in @@code{shar}.
d809 4
a812 2
@@item no-check-existing
@@samp{-x} in @@code{shar}.
d814 3
a816 2
@@item no-common
@@samp{-3} in @@code{wdiff}.
d818 5
a822 2
@@item no-create
@@samp{-c} in @@code{touch}.
a823 2
@@item no-defines
@@samp{-D} in @@code{etags}.
d825 2
a826 2
@@item no-deleted
@@samp{-1} in @@code{wdiff}.
d828 3
a830 2
@@item no-dereference
@@samp{-d} in @@code{cp}.
d832 4
a835 2
@@item no-inserted
@@samp{-2} in @@code{wdiff}.
d837 4
a840 2
@@item no-keep-going
@@samp{-S} in Make.
d842 3
a844 2
@@item no-lines
@@samp{-l} in Bison.
d846 3
a848 2
@@item no-piping
@@samp{-P} in @@code{shar}.
d850 5
a854 2
@@item no-prof
@@samp{-e} in @@code{gprof}.
d856 4
a859 2
@@item no-regex
@@samp{-R} in @@code{etags}.
a860 2
@@item no-sort
@@samp{-p} in @@code{nm}.
d862 2
a863 2
@@item no-split
Used in @@code{makeinfo}.
d865 5
a869 2
@@item no-static
@@samp{-a} in @@code{gprof}.
d871 4
a874 2
@@item no-time
@@samp{-E} in @@code{gprof}.
d876 2
a877 2
@@item no-timestamp
@@samp{-m} in @@code{shar}.
d879 4
a882 2
@@item no-validate
Used in @@code{makeinfo}.
d884 4
a887 2
@@item no-wait
Used in @@code{emacsclient}.
d889 4
a892 2
@@item no-warn
Used in various programs to inhibit warnings.
d894 3
a896 2
@@item node
@@samp{-n} in @@code{info}.
d898 4
a901 2
@@item nodename
@@samp{-n} in @@code{uname}.
d903 2
a904 2
@@item nonmatching
@@samp{-f} in @@code{cpio}.
d906 6
a911 2
@@item nstuff
@@samp{-n} in @@code{objdump}.
d913 5
a917 2
@@item null
@@samp{-0} in @@code{xargs}.
d919 3
a921 2
@@item number
@@samp{-n} in @@code{cat}.
d923 3
a925 2
@@item number-nonblank
@@samp{-b} in @@code{cat}.
d927 5
a931 2
@@item numeric-sort
@@samp{-n} in @@code{nm}.
d933 5
a937 2
@@item numeric-uid-gid
@@samp{-n} in @@code{cpio} and @@code{ls}.
d939 4
a942 2
@@item nx
Used in GDB.
d944 6
a949 2
@@item old-archive
@@samp{-o} in @@code{tar}.
d951 7
a957 2
@@item old-file
@@samp{-o} in Make.
d959 7
a965 2
@@item one-file-system
@@samp{-l} in @@code{tar}, @@code{cp}, and @@code{du}.
d967 4
a970 2
@@item only-file
@@samp{-o} in @@code{ptx}.
d972 3
a974 2
@@item only-prof
@@samp{-f} in @@code{gprof}.
d976 2
a977 2
@@item only-time
@@samp{-F} in @@code{gprof}.
d979 4
a982 2
@@item output
In various programs, specify the output file name.
d984 4
a987 2
@@item output-prefix
@@samp{-o} in @@code{shar}.
d989 6
a994 2
@@item override
@@samp{-o} in @@code{rm}.
d996 4
a999 2
@@item overwrite
@@samp{-c} in @@code{unshar}.
d1001 5
a1005 2
@@item owner
@@samp{-o} in @@code{install}.
d1007 3
a1009 2
@@item paginate
@@samp{-l} in @@code{diff}.
d1011 2
a1012 2
@@item paragraph-indent
Used in @@code{makeinfo}.
d1014 3
a1016 2
@@item parents
@@samp{-p} in @@code{mkdir} and @@code{rmdir}.
d1018 5
a1022 2
@@item pass-all
@@samp{-p} in @@code{ul}.
d1024 3
a1026 2
@@item pass-through
@@samp{-p} in @@code{cpio}.
d1028 7
a1034 2
@@item port
@@samp{-P} in @@code{finger}.
a1035 2
@@item portability
@@samp{-c} in @@code{cpio} and @@code{tar}.
d1037 2
a1038 2
@@item posix
Used in @@code{gawk}.
d1040 1
a1040 2
@@item prefix-builtins
@@samp{-P} in @@code{m4}.
d1042 3
a1044 2
@@item prefix
@@samp{-f} in @@code{csplit}.
d1046 1
a1046 2
@@item preserve
Used in @@code{tar} and @@code{cp}.
d1048 3
a1050 2
@@item preserve-environment
@@samp{-p} in @@code{su}.
d1052 2
a1053 2
@@item preserve-modification-time
@@samp{-m} in @@code{cpio}.
d1055 3
a1057 2
@@item preserve-order
@@samp{-s} in @@code{tar}.
d1059 2
a1060 2
@@item preserve-permissions
@@samp{-p} in @@code{tar}.
d1062 6
a1067 2
@@item print
@@samp{-l} in @@code{diff}.
d1069 3
a1071 2
@@item print-chars
@@samp{-L} in @@code{cmp}.
d1073 3
a1075 2
@@item print-data-base
@@samp{-p} in Make.
a1076 2
@@item print-directory
@@samp{-w} in Make.
d1078 2
a1079 2
@@item print-file-name
@@samp{-o} in @@code{nm}.
d1081 3
a1083 2
@@item print-symdefs
@@samp{-s} in @@code{nm}.
d1085 2
a1086 2
@@item printer
@@samp{-p} in @@code{wdiff}.
d1088 5
a1092 2
@@item prompt
@@samp{-p} in @@code{ed}.
d1094 3
a1096 2
@@item query-user
@@samp{-X} in @@code{shar}.
d1098 5
a1102 2
@@item question
@@samp{-q} in Make.
d1104 2
a1105 4
@@item quiet
Used in many programs to inhibit the usual output.  @@strong{Note:} every
program accepting @@samp{--quiet} should accept @@samp{--silent} as a
synonym.
a1106 2
@@item quiet-unshar
@@samp{-Q} in @@code{shar}
d1108 2
a1109 2
@@item quote-name
@@samp{-Q} in @@code{ls}.
d1111 15
a1125 2
@@item rcs
@@samp{-n} in @@code{diff}.
d1127 30
a1156 2
@@item re-interval
Used in @@code{gawk}.
d1158 6
a1163 2
@@item read-full-blocks
@@samp{-B} in @@code{tar}.
d1165 4
a1168 2
@@item readnow
Used in GDB.
d1170 4
a1173 2
@@item recon
@@samp{-n} in Make.
a1174 2
@@item record-number
@@samp{-R} in @@code{tar}.
d1176 2
a1177 3
@@item recursive
Used in @@code{chgrp}, @@code{chown}, @@code{cp}, @@code{ls}, @@code{diff},
and @@code{rm}.
d1179 3
a1181 2
@@item reference-limit
Used in @@code{makeinfo}.
d1183 2
a1184 2
@@item references
@@samp{-r} in @@code{ptx}.
d1186 4
a1189 2
@@item regex
@@samp{-r} in @@code{tac} and @@code{etags}.
d1191 5
a1195 2
@@item release
@@samp{-r} in @@code{uname}.
d1197 7
a1203 2
@@item reload-state
@@samp{-R} in @@code{m4}.
d1205 6
a1210 2
@@item relocation
@@samp{-r} in @@code{objdump}.
d1212 4
a1215 2
@@item rename
@@samp{-r} in @@code{cpio}.
d1217 6
a1222 2
@@item replace
@@samp{-i} in @@code{xargs}.
d1224 18
a1241 2
@@item report-identical-files
@@samp{-s} in @@code{diff}.
d1243 5
a1247 2
@@item reset-access-time
@@samp{-a} in @@code{cpio}.
d1249 1
a1249 2
@@item reverse
@@samp{-r} in @@code{ls} and @@code{nm}.
d1251 2
a1252 2
@@item reversed-ed
@@samp{-f} in @@code{diff}.
d1254 2
a1255 2
@@item right-side-defs
@@samp{-R} in @@code{ptx}.
d1257 2
a1258 2
@@item same-order
@@samp{-s} in @@code{tar}.
d1260 3
a1262 5
@@item same-permissions
@@samp{-p} in @@code{tar}.

@@item save
@@samp{-g} in @@code{stty}.
d1264 2
a1265 2
@@item se
Used in GDB.
d1267 2
a1268 2
@@item sentence-regexp
@@samp{-S} in @@code{ptx}.
d1270 3
a1272 2
@@item separate-dirs
@@samp{-S} in @@code{du}.
d1274 2
a1275 2
@@item separator
@@samp{-s} in @@code{tac}.
d1277 2
a1278 2
@@item sequence
Used by @@code{recode} to chose files or pipes for sequencing passes.
d1280 2
a1281 2
@@item shell
@@samp{-s} in @@code{su}.
d1283 2
a1284 2
@@item show-all
@@samp{-A} in @@code{cat}.
d1286 2
a1287 2
@@item show-c-function
@@samp{-p} in @@code{diff}.
d1289 2
a1290 2
@@item show-ends
@@samp{-E} in @@code{cat}.
d1292 2
a1293 2
@@item show-function-line
@@samp{-F} in @@code{diff}.
d1295 2
a1296 2
@@item show-tabs
@@samp{-T} in @@code{cat}.
d1298 2
a1299 4
@@item silent
Used in many programs to inhibit the usual output.
@@strong{Note:} every program accepting
@@samp{--silent} should accept @@samp{--quiet} as a synonym.
d1301 2
a1302 2
@@item size
@@samp{-s} in @@code{ls}.
d1304 2
a1305 2
@@item sort
Used in @@code{ls}.
d1307 2
a1308 2
@@item source
@@samp{-W source} in @@code{gawk}.
d1310 2
a1311 2
@@item sparse
@@samp{-S} in @@code{tar}.
d1313 2
a1314 2
@@item speed-large-files
@@samp{-H} in @@code{diff}.
d1316 2
a1317 2
@@item split-at
@@samp{-E} in @@code{unshar}.
d1319 2
a1320 2
@@item split-size-limit
@@samp{-L} in @@code{shar}.
d1322 2
a1323 2
@@item squeeze-blank
@@samp{-s} in @@code{cat}.
d1325 2
a1326 2
@@item start-delete
@@samp{-w} in @@code{wdiff}.
d1328 2
a1329 2
@@item start-insert
@@samp{-y} in @@code{wdiff}.
d1331 2
a1332 3
@@item starting-file
Used in @@code{tar} and @@code{diff} to specify which file within
a directory to start processing with.
d1334 2
a1335 2
@@item statistics
@@samp{-s} in @@code{wdiff}.
d1337 3
a1339 2
@@item stdin-file-list
@@samp{-S} in @@code{shar}.
d1341 2
a1342 2
@@item stop
@@samp{-S} in Make.
d1344 2
a1345 2
@@item strict
@@samp{-s} in @@code{recode}.
d1347 2
a1348 2
@@item strip
@@samp{-s} in @@code{install}.
d1350 2
a1351 2
@@item strip-all
@@samp{-s} in @@code{strip}.
d1353 2
a1354 2
@@item strip-debug
@@samp{-S} in @@code{strip}.
d1356 2
a1357 2
@@item submitter
@@samp{-s} in @@code{shar}.
d1359 2
a1360 2
@@item suffix
@@samp{-S} in @@code{cp}, @@code{ln}, @@code{mv}.
d1362 2
a1363 2
@@item suffix-format
@@samp{-b} in @@code{csplit}.
d1365 2
a1366 2
@@item sum
@@samp{-s} in @@code{gprof}.
d1368 2
a1369 2
@@item summarize
@@samp{-s} in @@code{du}.
d1371 2
a1372 2
@@item symbolic
@@samp{-s} in @@code{ln}.
d1374 2
a1375 2
@@item symbols
Used in GDB and @@code{objdump}.
d1377 3
a1379 2
@@item synclines
@@samp{-s} in @@code{m4}.
d1381 2
a1382 2
@@item sysname
@@samp{-s} in @@code{uname}.
d1384 2
a1385 2
@@item tabs
@@samp{-t} in @@code{expand} and @@code{unexpand}.
d1387 2
a1388 2
@@item tabsize
@@samp{-T} in @@code{ls}.
d1390 3
a1392 3
@@item terminal
@@samp{-T} in @@code{tput} and @@code{ul}.
@@samp{-t} in @@code{wdiff}.
d1394 2
a1395 2
@@item text
@@samp{-a} in @@code{diff}.
d1397 2
a1398 2
@@item text-files
@@samp{-T} in @@code{shar}.
d1400 2
a1401 2
@@item time
Used in @@code{ls} and @@code{touch}.
d1403 2
a1404 2
@@item to-stdout
@@samp{-O} in @@code{tar}.
d1406 2
a1407 2
@@item total
@@samp{-c} in @@code{du}.
d1409 5
a1413 2
@@item touch
@@samp{-t} in Make, @@code{ranlib}, and @@code{recode}.
d1415 2
a1416 2
@@item trace
@@samp{-t} in @@code{m4}.
d1418 2
a1419 4
@@item traditional
@@samp{-t} in @@code{hello};
@@samp{-W traditional} in @@code{gawk};
@@samp{-G} in @@code{ed}, @@code{m4}, and @@code{ptx}.
d1421 2
a1422 2
@@item tty
Used in GDB.
d1424 2
a1425 2
@@item typedefs
@@samp{-t} in @@code{ctags}.
d1427 2
a1428 2
@@item typedefs-and-c++
@@samp{-T} in @@code{ctags}.
d1430 2
a1431 2
@@item typeset-mode
@@samp{-t} in @@code{ptx}.
d1433 2
a1434 2
@@item uncompress
@@samp{-z} in @@code{tar}.
d1436 2
a1437 2
@@item unconditional
@@samp{-u} in @@code{cpio}.
d1439 2
a1440 2
@@item undefine
@@samp{-U} in @@code{m4}.
d1442 2
a1443 2
@@item undefined-only
@@samp{-u} in @@code{nm}.
d1445 2
a1446 2
@@item update
@@samp{-u} in @@code{cp}, @@code{ctags}, @@code{mv}, @@code{tar}.
d1448 2
a1449 2
@@item usage
Used in @@code{gawk}; same as @@samp{--help}.
d1451 2
a1452 2
@@item uuencode
@@samp{-B} in @@code{shar}.
d1454 2
a1455 2
@@item vanilla-operation
@@samp{-V} in @@code{shar}.
d1457 2
a1458 2
@@item verbose
Print more information about progress.  Many programs support this.
d1460 2
a1461 2
@@item verify
@@samp{-W} in @@code{tar}.
d1463 2
a1464 2
@@item version
Print the version number.
d1466 2
a1467 2
@@item version-control
@@samp{-V} in @@code{cp}, @@code{ln}, @@code{mv}.
d1469 2
a1470 2
@@item vgrind
@@samp{-v} in @@code{ctags}.
d1472 3
a1474 2
@@item volume
@@samp{-V} in @@code{tar}.
d1476 2
a1477 2
@@item what-if
@@samp{-W} in Make.
d1479 2
a1480 2
@@item whole-size-limit
@@samp{-l} in @@code{shar}.
d1482 4
a1485 2
@@item width
@@samp{-w} in @@code{ls} and @@code{ptx}.
d1487 2
a1488 2
@@item word-regexp
@@samp{-W} in @@code{ptx}.
d1490 2
a1491 2
@@item writable
@@samp{-T} in @@code{who}.
d1493 2
a1494 3
@@item zeros
@@samp{-z} in @@code{gprof}.
@@end table
d1496 2
a1497 2
@@node Memory Usage
@@section Memory Usage
d1499 2
a1500 12
If it typically uses just a few meg of memory, don't bother making any
effort to reduce memory usage.  For example, if it is impractical for
other reasons to operate on files more than a few meg long, it is
reasonable to read entire input files into core to operate on them.

However, for programs such as @@code{cat} or @@code{tail}, that can
usefully operate on very large files, it is important to avoid using a
technique that would artificially limit the size of files it can handle.
If a program works by lines and could be applied to arbitrary
user-supplied input files, it should keep only a line in memory, because
this is not very hard and users will want to be able to operate on input
files that are bigger than will fit in core all at once.
d1502 2
a1503 2
If your program creates complicated data structures, just make them in
core and give a fatal error if @@code{malloc} returns zero.
d1505 2
a1506 2
@@node Writing C
@@chapter Making The Best Use of C
d1508 2
a1509 2
This @@value{CHAPTER} provides advice on how best to use the C language
when writing GNU software.
d1511 2
a1512 11
@@menu
* Formatting::                  Formatting Your Source Code
* Comments::                    Commenting Your Work
* Syntactic Conventions::       Clean Use of C Constructs
* Names::                       Naming Variables and Functions
* System Portability::          Portability between different operating systems
* CPU Portability::             Supporting the range of CPU types
* System Functions::            Portability and ``standard'' library functions
* Internationalization::        Techniques for internationalization
* Mmap::                        How you can safely use @@code{mmap}.
@@end menu
d1514 2
a1515 2
@@node Formatting
@@section Formatting Your Source Code
d1517 2
a1518 5
It is important to put the open-brace that starts the body of a C
function in column zero, and avoid putting any other open-brace or
open-parenthesis or open-bracket in column zero.  Several tools look
for open-braces in column zero to find the beginnings of C functions.
These tools will not work on code not formatted that way.
d1520 2
a1521 4
It is also important for function definitions to start the name of the
function in column zero.  This helps people to search for function
definitions, and may also help certain tools recognize them.  Thus,
the proper format is this:
d1523 2
a1524 8
@@example
static char *
concat (s1, s2)        /* Name starts in column zero here */
     char *s1, *s2;
@@{                     /* Open brace in column zero here */
  @@dots{}
@@}
@@end example
d1526 2
a1527 2
@@noindent
or, if you want to use @@sc{ansi} C, format the definition like this:
d1529 2
a1530 7
@@example
static char *
concat (char *s1, char *s2)
@@{
  @@dots{}
@@}
@@end example
d1532 2
a1533 2
In @@sc{ansi} C, if the arguments don't fit nicely on one line,
split it like this:
d1535 2
a1536 6
@@example
int
lots_of_args (int an_integer, long a_long, short a_short,
              double a_double, float a_float)
@@dots{}
@@end example
d1538 2
a1539 1
For the body of the function, we prefer code formatted like this:
d1541 2
a1542 13
@@example
if (x < foo (y, z))
  haha = bar[4] + 5;
else
  @@{
    while (z)
      @@{
        haha += foo (z, z);
        z--;
      @@}
    return ++x + bar ();
  @@}
@@end example
d1544 2
a1545 2
We find it easier to read a program when it has spaces before the
open-parentheses and after the commas.  Especially after the commas.
d1547 2
a1548 2
When you split an expression into multiple lines, split it
before an operator, not after one.  Here is the right way:
d1550 2
a1551 4
@@example
if (foo_this_is_long && bar > win (x, y, z)
    && remaining_condition)
@@end example
d1553 2
a1554 2
Try to avoid having two operators of different precedence at the same
level of indentation.  For example, don't write this:
d1556 2
a1557 5
@@example
mode = (inmode[j] == VOIDmode
        || GET_MODE_SIZE (outmode[j]) > GET_MODE_SIZE (inmode[j])
        ? outmode[j] : inmode[j]);
@@end example
d1559 2
a1560 1
Instead, use extra parentheses so that the indentation shows the nesting:
d1562 3
a1564 5
@@example
mode = ((inmode[j] == VOIDmode
         || (GET_MODE_SIZE (outmode[j]) > GET_MODE_SIZE (inmode[j])))
        ? outmode[j] : inmode[j]);
@@end example
d1566 2
a1567 3
Insert extra parentheses so that Emacs will indent the code properly.
For example, the following indentation looks nice if you do it by hand,
but Emacs would mess it up:
d1569 2
a1570 4
@@example
v = rup->ru_utime.tv_sec*1000 + rup->ru_utime.tv_usec/1000
    + rup->ru_stime.tv_sec*1000 + rup->ru_stime.tv_usec/1000;
@@end example
d1572 2
a1573 1
But adding a set of parentheses solves the problem:
d1575 3
a1577 4
@@example
v = (rup->ru_utime.tv_sec*1000 + rup->ru_utime.tv_usec/1000
     + rup->ru_stime.tv_sec*1000 + rup->ru_stime.tv_usec/1000);
@@end example
d1579 2
a1580 1
Format do-while statements like this:
d1582 2
a1583 7
@@example
do
  @@{
    a = foo (a);
  @@}
while (a > 0);
@@end example
d1585 2
a1586 4
Please use formfeed characters (control-L) to divide the program into
pages at logical places (but not within a function).  It does not matter
just how long the pages are, since they do not have to fit on a printed
page.  The formfeeds should appear alone on lines by themselves.
d1588 2
d1591 2
a1592 2
@@node Comments
@@section Commenting Your Work
d1594 2
a1595 2
Every program should start with a comment saying briefly what it is for.
Example: @@samp{fmt - filter for simple filling of text}.
d1597 2
a1598 6
Please write the comments in a GNU program in English, because English
is the one language that nearly all programmers in all countries can
read.  If you do not write English well, please write comments in
English as well as you can, then ask other people to help rewrite them.
If you can't write comments in English, please find someone to work with
you and translate your comments into English.
d1600 2
a1601 10
Please put a comment on each function saying what the function does,
what sorts of arguments it gets, and what the possible values of
arguments mean and are used for.  It is not necessary to duplicate in
words the meaning of the C argument declarations, if a C type is being
used in its customary fashion.  If there is anything nonstandard about
its use (such as an argument of type @@code{char *} which is really the
address of the second character of a string, not the first), or any
possible values that would not work the way one would expect (such as,
that strings containing newlines are not guaranteed to work), be sure
to say so.
d1603 3
a1605 1
Also explain the significance of the return value, if there is one.
d1607 2
a1608 7
Please put two spaces after the end of a sentence in your comments, so
that the Emacs sentence commands will work.  Also, please write
complete sentences and capitalize the first word.  If a lower-case
identifier comes at the beginning of a sentence, don't capitalize it!
Changing the spelling makes it a different identifier.  If you don't
like starting a sentence with a lower case letter, write the sentence
differently (e.g., ``The identifier lower-case is @@dots{}'').
d1610 2
a1611 5
The comment on a function is much clearer if you use the argument
names to speak about the argument values.  The variable name itself
should be lower case, but write it in upper case when you are speaking
about the value rather than the variable itself.  Thus, ``the inode
number NODE_NUM'' rather than ``an inode''.
d1613 2
a1614 4
There is usually no purpose in restating the name of the function in
the comment before it, because the reader can see that for himself.
There might be an exception when the comment is so long that the function
itself would be off the bottom of the screen.
d1616 2
a1617 1
There should be a comment on each static variable as well, like this:
d1619 2
a1620 5
@@example
/* Nonzero means truncate lines in the display;
   zero means continue them.  */
int truncate_lines;
@@end example
d1622 2
a1623 5
Every @@samp{#endif} should have a comment, except in the case of short
conditionals (just a few lines) that are not nested.  The comment should
state the condition of the conditional that is ending, @@emph{including
its sense}.  @@samp{#else} should have a comment describing the condition
@@emph{and sense} of the code that follows.  For example:
d1625 5
a1629 9
@@example
@@group
#ifdef foo
  @@dots{}
#else /* not foo */
  @@dots{}
#endif /* not foo */
@@end group
@@end example
d1631 2
a1632 2
@@noindent
but, by contrast, write the comments this way for a @@samp{#ifndef}:
d1634 2
a1635 9
@@example
@@group
#ifndef foo
  @@dots{}
#else /* foo */
  @@dots{}
#endif /* foo */
@@end group
@@end example
d1637 2
d1640 2
a1641 2
@@node Syntactic Conventions
@@section Clean Use of C Constructs
d1643 2
a1644 2
Please explicitly declare all arguments to functions.
Don't omit them just because they are @@code{int}s.
d1646 2
a1647 5
Declarations of external functions and functions to appear later in the
source file should all go in one place near the beginning of the file
(somewhere before the first function definition in the file), or else
should go in a header file.  Don't put @@code{extern} declarations inside
functions.
d1649 2
a1650 8
It used to be common practice to use the same local variables (with
names like @@code{tem}) over and over for different values within one
function.  Instead of doing this, it is better declare a separate local
variable for each distinct purpose, and give it a name which is
meaningful.  This not only makes programs easier to understand, it also
facilitates optimization by good compilers.  You can also move the
declaration of each local variable into the smallest scope that includes
all its uses.  This makes the program even cleaner.
d1652 2
a1653 1
Don't use local variables or parameters that shadow global identifiers.
d1655 3
a1657 3
Don't declare multiple variables in one declaration that spans lines.
Start a new declaration on each line, instead.  For example, instead
of this:
d1659 2
a1660 6
@@example
@@group
int    foo,
       bar;
@@end group
@@end example
d1662 2
a1663 2
@@noindent
write either this:
d1665 2
a1666 3
@@example
int foo, bar;
@@end example
d1668 2
a1669 2
@@noindent
or this:
d1671 4
a1674 4
@@example
int foo;
int bar;
@@end example
d1676 2
a1677 3
@@noindent
(If they are global variables, each should have a comment preceding it
anyway.)
d1679 2
a1680 3
When you have an @@code{if}-@@code{else} statement nested in another
@@code{if} statement, always put braces around the @@code{if}-@@code{else}.
Thus, never write like this:
d1682 2
a1683 7
@@example
if (foo)
  if (bar)
    win ();
  else
    lose ();
@@end example
d1685 2
a1686 2
@@noindent
always like this:
d1688 2
a1689 9
@@example
if (foo)
  @@{
    if (bar)
      win ();
    else
      lose ();
  @@}
@@end example
d1691 2
a1692 2
If you have an @@code{if} statement nested inside of an @@code{else}
statement, either write @@code{else if} on one line, like this,
d1694 2
a1695 6
@@example
if (foo)
  @@dots{}
else if (bar)
  @@dots{}
@@end example
d1697 2
a1698 3
@@noindent
with its @@code{then}-part indented like the preceding @@code{then}-part,
or write the nested @@code{if} within braces like this:
d1700 2
a1701 9
@@example
if (foo)
  @@dots{}
else
  @@{
    if (bar)
      @@dots{}
  @@}
@@end example
d1703 2
a1704 3
Don't declare both a structure tag and variables or typedefs in the
same declaration.  Instead, declare the structure tag separately
and then use it to declare the variables or typedefs.
d1706 2
a1707 2
Try to avoid assignments inside @@code{if}-conditions.  For example,
don't write this:
d1709 2
a1710 4
@@example
if ((foo = (char *) malloc (sizeof *foo)) == 0)
  fatal ("virtual memory exhausted");
@@end example
d1712 2
a1713 2
@@noindent
instead, write this:
d1715 2
a1716 5
@@example
foo = (char *) malloc (sizeof *foo);
if (foo == 0)
  fatal ("virtual memory exhausted");
@@end example
d1718 2
a1719 3
Don't make the program ugly to placate @@code{lint}.  Please don't insert any
casts to @@code{void}.  Zero without a cast is perfectly fine as a null
pointer constant, except when calling a varargs function.
d1721 2
a1722 2
@@node  Names
@@section Naming Variables and Functions
d1724 2
a1725 5
The names of global variables and functions in a program serve as
comments of a sort.  So don't choose terse names---instead, look for
names that give useful information about the meaning of the variable or
function.  In a GNU program, names should be English, like other
comments.
d1727 2
a1728 2
Local variable names can be shorter, because they are used only within
one context, where (presumably) comments explain their purpose.
d1730 2
a1731 4
Please use underscores to separate words in a name, so that the Emacs
word commands can be useful within them.  Stick to lower case; reserve
upper case for macros and @@code{enum} constants, and for name-prefixes
that follow a uniform convention.
d1733 2
a1734 2
For example, you should use names like @@code{ignore_space_change_flag};
don't use names like @@code{iCantReadThis}.
d1736 2
a1737 4
Variables that indicate whether command-line options have been
specified should be named after the meaning of the option, not after
the option-letter.  A comment should state both the exact meaning of
the option and its letter.  For example,
d1739 2
a1740 6
@@example
@@group
/* Ignore changes in horizontal whitespace (-b).  */
int ignore_space_change_flag;
@@end group
@@end example
d1742 2
a1743 3
When you want to define names with constant integer values, use
@@code{enum} rather than @@samp{#define}.  GDB knows about enumeration
constants.
d1745 2
a1746 29
Use file names of 14 characters or less, to avoid creating gratuitous
problems on older System V systems.  You can use the program
@@code{doschk} to test for this.  @@code{doschk} also tests for potential
name conflicts if the files were loaded onto an MS-DOS file
system---something you may or may not care about.

@@node System Portability
@@section Portability between System Types

In the Unix world, ``portability'' refers to porting to different Unix
versions.  For a GNU program, this kind of portability is desirable, but
not paramount.

The primary purpose of GNU software is to run on top of the GNU kernel,
compiled with the GNU C compiler, on various types of @@sc{cpu}.  The
amount and kinds of variation among GNU systems on different @@sc{cpu}s
will be comparable to the variation among Linux-based GNU systems or
among BSD systems today.  So the kinds of portability that are absolutely
necessary are quite limited.

But many users do run GNU software on non-GNU Unix or Unix-like systems.
So supporting a variety of Unix-like systems is desirable, although not
paramount.

The easiest way to achieve portability to most Unix-like systems is to
use Autoconf.  It's unlikely that your program needs to know more
information about the host platform than Autoconf can provide, simply
because most of the programs that need such knowledge have already been
written.
d1748 2
a1749 2
Avoid using the format of semi-internal data bases (e.g., directories)
when there is a higher-level alternative (@@code{readdir}).
d1751 2
a1752 23
As for systems that are not like Unix, such as MSDOS, Windows, the
Macintosh, VMS, and MVS, supporting them is usually so much work that it
is better if you don't.

The planned GNU kernel is not finished yet, but you can tell which
facilities it will provide by looking at the GNU C Library Manual.  The
GNU kernel is based on Mach, so the features of Mach will also be
available.  However, if you use Mach features, you'll probably have
trouble debugging your program today.

@@node CPU Portability
@@section Portability between @@sc{cpu}s

Even GNU systems will differ because of differences among @@sc{cpu}
types---for example, difference in byte ordering and alignment
requirements.  It is absolutely essential to handle these differences.
However, don't make any effort to cater to the possibility that an
@@code{int} will be less than 32 bits.  We don't support 16-bit machines
in GNU.

Don't assume that the address of an @@code{int} object is also the
address of its least-significant byte.  This is false on big-endian
machines.  Thus, don't make the following mistake:
d1754 2
a1755 6
@@example
int c;
@@dots{}
while ((c = getchar()) != EOF)
  write(file_descriptor, &c, 1);
@@end example
d1757 2
a1758 6
When calling functions, you need not worry about the difference between
pointers of various types, or between pointers and integers.  On most
machines, there's no difference anyway.  As for the few machines where
there is a difference, all of them support @@sc{ansi} C, so you can use
prototypes (conditionalized to be active only in @@sc{ansi} C) to make
the code work on those systems.
d1760 2
a1761 4
In certain cases, it is ok to pass integer and pointer arguments
indiscriminately to the same function, and use no prototype on any
system.  For example, many GNU programs have error-reporting functions
that pass their arguments along to @@code{printf} and friends:
d1763 2
a1764 9
@@example
error (s, a1, a2, a3)
     char *s;
     int a1, a2, a3;
@@{
  fprintf (stderr, "error: ");
  fprintf (stderr, s, a1, a2, a3);
@@}
@@end example
d1766 2
a1767 11
@@noindent
In practice, this works on all machines, and it is much simpler than any
``correct'' alternative.  Be sure @@emph{not} to use a prototype
for such functions.

However, avoid casting pointers to integers unless you really need to.
These assumptions really reduce portability, and in most programs they
are easy to avoid.  In the cases where casting pointers to integers is
essential---such as, a Lisp interpreter which stores type information as
well as an address in one word---it is ok to do so, but you'll have to
make explicit provisions to handle different word sizes.
d1769 2
a1770 2
@@node System Functions
@@section Calling System Functions
d1772 2
a1773 5
C implementations differ substantially.  @@sc{ansi} C reduces but does not
eliminate the incompatibilities; meanwhile, many users wish to compile
GNU software with pre-@@sc{ansi} compilers.  This chapter gives
recommendations for how to use the more or less standard C library
functions to avoid unnecessary loss of portability.
d1775 2
a1776 4
@@itemize @@bullet
@@item
Don't use the value of @@code{sprintf}.  It returns the number of
characters written on some systems, but not on all systems.
d1778 2
a1779 4
@@item
@@code{main} should be declared to return type @@code{int}.  It should
terminate either by calling @@code{exit} or by returning the integer
status code; make sure it cannot ever return an undefined value.
d1781 2
a1782 2
@@item
Don't declare system functions explicitly.
d1784 2
a1785 4
Almost any declaration for a system function is wrong on some system.
To minimize conflicts, leave it to the system header files to declare
system functions.  If the headers don't declare a function, let it
remain undeclared.
d1787 2
a1788 5
While it may seem unclean to use a function without declaring it, in
practice this works fine for most system library functions on the
systems where this really happens; thus, the disadvantage is only
theoretical.  By contrast, actual declarations have frequently caused
actual conflicts.
d1790 2
a1791 4
@@item
If you must declare a system function, don't specify the argument types.
Use an old-style declaration, not an @@sc{ansi} prototype.  The more you
specify about the function, the more likely a conflict.
d1793 2
a1794 3
@@item
In particular, don't unconditionally declare @@code{malloc} or
@@code{realloc}.
d1796 2
a1797 4
Most GNU programs use those functions just once, in functions
conventionally named @@code{xmalloc} and @@code{xrealloc}.  These
functions call @@code{malloc} and @@code{realloc}, respectively, and
check the results.
d1799 2
a1800 2
Because @@code{xmalloc} and @@code{xrealloc} are defined in your program,
you can declare them in other files without any risk of type conflict.
d1802 2
a1803 6
On most systems, @@code{int} is the same length as a pointer; thus, the
calls to @@code{malloc} and @@code{realloc} work fine.  For the few
exceptional systems (mostly 64-bit machines), you can use
@@strong{conditionalized} declarations of @@code{malloc} and
@@code{realloc}---or put these declarations in configuration files
specific to those systems.
d1805 2
a1806 5
@@item
The string functions require special treatment.  Some Unix systems have
a header file @@file{string.h}; others have @@file{strings.h}.  Neither
file name is portable.  There are two things you can do: use Autoconf to
figure out which file to include, or don't include either file.
d1808 2
a1809 3
@@item
If you don't include either strings file, you can't get declarations for
the string functions from the header file in the usual way.
d1811 2
a1812 3
That causes less of a problem than you might think.  The newer @@sc{ansi}
string functions should be avoided anyway because many systems still
don't support them.  The string functions you can use are these:
d1814 2
a1815 5
@@example
strcpy   strncpy   strcat   strncat
strlen   strcmp    strncmp
strchr   strrchr
@@end example
d1817 2
a1818 5
The copy and concatenate functions work fine without a declaration as
long as you don't use their values.  Using their values without a
declaration fails on systems where the width of a pointer differs from
the width of @@code{int}, and perhaps in other cases.  It is trivial to
avoid using their values, so do that.
d1820 2
a1821 4
The compare functions and @@code{strlen} work fine without a declaration
on most systems, possibly all the ones that GNU software runs on.
You may find it necessary to declare them @@strong{conditionally} on a
few systems.
d1823 2
a1824 6
The search functions must be declared to return @@code{char *}.  Luckily,
there is no variation in the data type they return.  But there is
variation in their names.  Some systems give these functions the names
@@code{index} and @@code{rindex}; other systems use the names
@@code{strchr} and @@code{strrchr}.  Some systems support both pairs of
names, but neither pair works on all systems.
d1826 2
a1827 8
You should pick a single pair of names and use it throughout your
program.  (Nowadays, it is better to choose @@code{strchr} and
@@code{strrchr} for new programs, since those are the standard @@sc{ansi}
names.)  Declare both of those names as functions returning @@code{char
*}.  On systems which don't support those names, define them as macros
in terms of the other pair.  For example, here is what to put at the
beginning of your file (or in a header) if you want to use the names
@@code{strchr} and @@code{strrchr} throughout:
d1829 2
a1830 7
@@example
#ifndef HAVE_STRCHR
#define strchr index
#endif
#ifndef HAVE_STRRCHR
#define strrchr rindex
#endif
d1832 2
a1833 4
char *strchr ();
char *strrchr ();
@@end example
@@end itemize
d1835 2
a1836 3
Here we assume that @@code{HAVE_STRCHR} and @@code{HAVE_STRRCHR} are
macros defined in systems where the corresponding functions exist.
One way to get them properly defined is to use Autoconf.
d1838 2
a1839 2
@@node Internationalization
@@section Internationalization
d1841 2
a1842 5
GNU has a library called GNU gettext that makes it easy to translate the
messages in a program into various languages.  You should use this
library in every program.  Use English for the messages as they appear
in the program, and let gettext provide the way to translate them into
other languages.
d1844 2
a1845 2
Using GNU gettext involves putting a call to the @@code{gettext} macro
around each string that might need translation---like this:
d1847 2
a1848 3
@@example
printf (gettext ("Processing file `%s'..."));
@@end example
d1850 2
a1851 3
@@noindent
This permits GNU gettext to replace the string @@code{"Processing file
`%s'..."} with a translated version.
d1853 2
a1854 2
Once a program uses gettext, please make a point of writing calls to
@@code{gettext} when you add new strings that call for translation.
d1856 2
a1857 12
Using GNU gettext in a package involves specifying a @@dfn{text domain
name} for the package.  The text domain name is used to separate the
translations for this package from the translations for other packages.
Normally, the text domain name should be the same as the name of the
package---for example, @@samp{fileutils} for the GNU file utilities.

To enable gettext to work well, avoid writing code that makes
assumptions about the structure of words or sentences.  When you want
the precise text of a sentence to vary depending on the data, use two or
more alternative string constants each containing a complete sentences,
rather than inserting conditionalized words or phrases into a single
sentence framework.
d1859 2
a1860 1
Here is an example of what not to do:
d1862 2
a1863 4
@@example
printf ("%d file%s processed", nfiles,
        nfiles != 1 ? "s" : "");
@@end example
d1865 2
a1866 3
@@noindent
The problem with that example is that it assumes that plurals are made
by adding `s'.  If you apply gettext to the format string, like this,
d1868 2
a1869 4
@@example
printf (gettext ("%d file%s processed"), nfiles,
        nfiles != 1 ? "s" : "");
@@end example
d1871 2
a1872 3
@@noindent
the message can use different words, but it will still be forced to use
`s' for the plural.  Here is a better way:
d1874 2
a1875 5
@@example
printf ((nfiles != 1 ? "%d files processed"
         : "%d file processed"),
        nfiles);
@@end example
d1877 2
a1878 3
@@noindent
This way, you can apply gettext to each of the two strings
independently:
d1880 2
a1881 5
@@example
printf ((nfiles != 1 ? gettext ("%d files processed")
         : gettext ("%d file processed")),
        nfiles);
@@end example
d1883 2
a1884 4
@@noindent
This can any method of forming the plural of the word for ``file'', and
also handles languages that require agreement in the word for
``processed''.
d1886 2
a1887 2
A similar problem appears at the level of sentence structure with this
code:
d1889 4
a1892 4
@@example
printf ("#  Implicit rule search has%s been done.\n",
        f->tried_implicit ? "" : " not");
@@end example
d1894 2
a1895 6
@@noindent
Adding @@code{gettext} calls to this code cannot give correct results for
all languages, because negation in some languages requires adding words
at more than one place in the sentence.  By contrast, adding
@@code{gettext} calls does the job straightfowardly if the code starts
out like this:
d1897 2
a1898 5
@@example
printf (f->tried_implicit
        ? "#  Implicit rule search has been done.\n",
        : "#  Implicit rule search has not been done.\n");
@@end example
d1900 2
a1901 2
@@node Mmap
@@section Mmap
d1903 2
a1904 2
Don't assume that @@code{mmap} either works on all files or fails
for all files.  It may work on some files and fail on others.
d1906 2
a1907 3
The proper way to use @@code{mmap} is to try it on the specific file for
which you want to use it---and if @@code{mmap} doesn't work, fall back on
doing the job in another way using @@code{read} and @@code{write}.
d1909 2
a1910 5
The reason this precaution is needed is that the GNU kernel (the HURD)
provides a user-extensible file system, in which there can be many
different kinds of ``ordinary files.''  Many of them support
@@code{mmap}, but some do not.  It is important to make programs handle
all these kinds of files.
d1912 3
a1914 2
@@node Documentation
@@chapter Documenting Programs
d1916 2
a1917 9
@@menu
* GNU Manuals::                 Writing proper manuals.
* Manual Structure Details::    Specific structure conventions.
* NEWS File::                   NEWS files supplement manuals.
* Change Logs::                 Recording Changes
* Man Pages::                   Man pages are secondary.
* Reading other Manuals::       How far you can go in learning
                                from other manuals.
@@end menu
d1919 2
a1920 2
@@node GNU Manuals
@@section GNU Manuals
d1922 2
a1923 62
The preferred way to document part of the GNU system is to write a
manual in the Texinfo formatting language.  See the Texinfo manual,
either the hardcopy, or the on-line version available through
@@code{info} or the Emacs Info subsystem (@@kbd{C-h i}).

Programmers often find it most natural to structure the documentation
following the structure of the implementation, which they know.  But
this structure is not necessarily good for explaining how to use the
program; it may be irrelevant and confusing for a user.

At every level, from the sentences in a paragraph to the grouping of
topics into separate manuals, the right way to structure documentation
is according to the concepts and questions that a user will have in mind
when reading it.  Sometimes this structure of ideas matches the
structure of the implementation of the software being documented---but
often they are different.  Often the most important part of learning to
write good documentation is learning to notice when you are structuring
the documentation like the implementation, and think about better
alternatives.

For example, each program in the GNU system probably ought to be
documented in one manual; but this does not mean each program should
have its own manual.  That would be following the structure of the
implementation, rather than the structure that helps the user
understand.

Instead, each manual should cover a coherent @@emph{topic}.  For example,
instead of a manual for @@code{diff} and a manual for @@code{diff3}, we
have one manual for ``comparison of files'' which covers both of those
programs, as well as @@code{cmp}.  By documenting these programs
together, we can make the whole subject clearer.

The manual which discusses a program should document all of the
program's command-line options and all of its commands.  It should give
examples of their use.  But don't organize the manual as a list of
features.  Instead, organize it logically, by subtopics.  Address the
questions that a user will ask when thinking about the job that the
program does.

In general, a GNU manual should serve both as tutorial and reference.
It should be set up for convenient access to each topic through Info,
and for reading straight through (appendixes aside).  A GNU manual
should give a good introduction to a beginner reading through from the
start, and should also provide all the details that hackers want.

That is not as hard as it first sounds.  Arrange each chapter as a
logical breakdown of its topic, but order the sections, and write their
text, so that reading the chapter straight through makes sense.  Do
likewise when structuring the book into chapters, and when structuring a
section into paragraphs.  The watchword is, @@emph{at each point, address
the most fundamental and important issue raised by the preceding text.}

If necessary, add extra chapters at the beginning of the manual which
are purely tutorial and cover the basics of the subject.  These provide
the framework for a beginner to understand the rest of the manual.  The
Bison manual provides a good example of how to do this.

Don't use Unix man pages as a model for how to write GNU documentation;
most of them are terse, badly structured, and give inadequate
explanation of the underlying concepts.  (There are, of course
exceptions.)  Also Unix man pages use a particular format which is
different from what we use in GNU manuals.
d1925 2
a1926 3
Please do not use the term ``pathname'' that is used in Unix
documentation; use ``file name'' (two words) instead.  We use the term
``path'' only for search paths, which are lists of file names.
d1928 2
a1929 20
Please do not use the term ``illegal'' to refer to erroneous input to a
computer program.  Please use ``invalid'' for this, and reserve the term
``illegal'' for violations of law.

@@node Manual Structure Details
@@section Manual Structure Details

The title page of the manual should state the version of the programs or
packages documented in the manual.  The Top node of the manual should
also contain this information.  If the manual is changing more
frequently than or independent of the program, also state a version
number for the manual in both of these places.

Each program documented in the manual should should have a node named
@@samp{@@var{program} Invocation} or @@samp{Invoking @@var{program}}.  This
node (together with its subnodes, if any) should describe the program's
command line arguments and how to run it (the sort of information people
would look in a man page for).  Start with an @@samp{@@@@example}
containing a template for all the options and arguments that the program
uses.
d1931 2
a1932 3
Alternatively, put a menu item in some menu whose item name fits one of
the above patterns.  This identifies the node which that item points to
as the node for this purpose, regardless of the node's actual name.
d1934 2
a1935 2
There will be automatic features for specifying a program name and
quickly reading just this part of its manual.
d1937 2
a1938 2
If one manual describes several programs, it should have such a node for
each program described.
d1940 2
a1941 2
@@node NEWS File
@@section The NEWS File
d1943 2
a1944 6
In addition to its manual, the package should have a file named
@@file{NEWS} which contains a list of user-visible changes worth
mentioning.  In each new release, add items to the front of the file and
identify the version they pertain to.  Don't discard old items; leave
them in the file after the newer items.  This way, a user upgrading from
any previous version can see what is new.
d1946 2
a1947 3
If the @@file{NEWS} file gets very long, move some of the older items
into a file named @@file{ONEWS} and put a note at the end referring the
user to that file.
d1949 2
a1950 2
@@node Change Logs
@@section Change Logs
d1952 2
a1953 7
Keep a change log to describe all the changes made to program source
files.  The purpose of this is so that people investigating bugs in the
future will know about the changes that might have introduced the bug.
Often a new bug can be found by looking at what was recently changed.
More importantly, change logs can help you eliminate conceptual
inconsistencies between different parts of a program, by giving you a
history of how the conflicting concepts arose and who they came from.
d1955 2
a1956 6
@@menu
* Change Log Concepts::         
* Style of Change Logs::        
* Simple Changes::              
* Conditional Changes::         
@@end menu
d1958 2
a1959 2
@@node Change Log Concepts
@@subsection Change Log Concepts
d1961 2
a1962 5
You can think of the change log as a conceptual ``undo list'' which
explains how earlier versions were different from the current version.
People can see the current version; they don't need the change log
to tell them what is in it.  What they want from a change log is a
clear explanation of how the earlier version differed.
d1964 2
a1965 8
The change log file is normally called @@file{ChangeLog} and covers an
entire directory.  Each directory can have its own change log, or a
directory can use the change log of its parent directory--it's up to
you.

Another alternative is to record change log information with a version
control system such as RCS or CVS.  This can be converted automatically
to a @@file{ChangeLog} file.
d1967 2
a1968 7
There's no need to describe the full purpose of the changes or how they
work together.  If you think that a change calls for explanation, you're
probably right.  Please do explain it---but please put the explanation
in comments in the code, where people will see it whenever they see the
code.  For example, ``New function'' is enough for the change log when
you add a function, because there should be a comment before the
function definition to explain what it does.
d1970 2
a1971 2
However, sometimes it is useful to write one line to describe the
overall purpose of a batch of changes.
d1973 2
a1974 5
The easiest way to add an entry to @@file{ChangeLog} is with the Emacs
command @@kbd{M-x add-change-log-entry}.  An entry should have an
asterisk, the name of the changed file, and then in parentheses the name
of the changed functions, variables or whatever, followed by a colon.
Then describe the changes you made to that function or variable.
d1976 2
a1977 2
@@node Style of Change Logs
@@subsection Style of Change Logs
d1979 2
a1980 1
Here are some examples of change log entries:
d1982 2
a1983 3
@@example
* register.el (insert-register): Return nil.
(jump-to-register): Likewise.
d1985 2
a1986 1
* sort.el (sort-subr): Return nil.
d1988 2
a1989 3
* tex-mode.el (tex-bibtex-file, tex-file, tex-region):
Restart the tex shell if process is gone or stopped.
(tex-shell-running): New function.
d1991 2
a1992 4
* expr.c (store_one_arg): Round size up for move_block_to_reg.
(expand_call): Round up when emitting USE insns.
* stmt.c (assign_parms): Round size up for move_block_from_reg.
@@end example
d1994 4
a1997 26
It's important to name the changed function or variable in full.  Don't
abbreviate function or variable names, and don't combine them.
Subsequent maintainers will often search for a function name to find all
the change log entries that pertain to it; if you abbreviate the name,
they won't find it when they search.

For example, some people are tempted to abbreviate groups of function
names by writing @@samp{* register.el (@@{insert,jump-to@@}-register)};
this is not a good idea, since searching for @@code{jump-to-register} or
@@code{insert-register} would not find that entry.

Separate unrelated change log entries with blank lines.  When two
entries represent parts of the same change, so that they work together,
then don't put blank lines between them.  Then you can omit the file
name and the asterisk when successive entries are in the same file.

@@node Simple Changes
@@subsection Simple Changes

Certain simple kinds of changes don't need much detail in the change
log.

When you change the calling sequence of a function in a simple fashion,
and you change all the callers of the function, there is no need to make
individual entries for all the callers that you changed.  Just write in
the entry for the function being called, ``All callers changed.''
d1999 2
a2000 4
@@example
* keyboard.c (Fcommand_execute): New arg SPECIAL.
All callers changed.
@@end example
d2002 2
a2003 3
When you change just comments or doc strings, it is enough to write an
entry for the file, without mentioning the functions.  Just ``Doc
fixes'' is enough for the change log.
d2005 2
a2006 6
There's no need to make change log entries for documentation files.
This is because documentation is not susceptible to bugs that are hard
to fix.  Documentation does not consist of parts that must interact in a
precisely engineered fashion.  To correct an error, you need not know
the history of the erroneous passage; it is enough to compare what the
documentation says with the way the program actually works.
d2008 2
a2009 2
@@node Conditional Changes
@@subsection Conditional Changes
d2011 2
a2012 4
C programs often contain compile-time @@code{#if} conditionals.  Many
changes are conditional; sometimes you add a new definition which is
entirely contained in a conditional.  It is very useful to indicate in
the change log the conditions for which the change applies.
d2014 3
a2016 2
Our convention for indicating conditional changes is to use square
brackets around the name of the condition.
d2018 2
a2019 2
Here is a simple example, describing a change which is conditional but
does not have a function or entity name associated with it:
d2021 2
a2022 3
@@example
* xterm.c [SOLARIS2]: Include string.h.
@@end example
d2024 2
a2025 3
Here is an entry describing a new definition which is entirely
conditional.  This new definition for the macro @@code{FRAME_WINDOW_P} is
used only when @@code{HAVE_X_WINDOWS} is defined:
d2027 2
a2028 3
@@example
* frame.h [HAVE_X_WINDOWS] (FRAME_WINDOW_P): Macro defined.
@@end example
d2030 2
a2031 3
Here is an entry for a change within the function @@code{init_display},
whose definition as a whole is unconditional, but the changes themselves
are contained in a @@samp{#ifdef HAVE_LIBNCURSES} conditional:
d2033 2
a2034 3
@@example
* dispnew.c (init_display) [HAVE_LIBNCURSES]: If X, call tgetent.
@@end example
d2036 2
a2037 2
Here is an entry for a change that takes affect only when
a certain macro is @@emph{not} defined:
d2039 2
a2040 3
@@example
(gethostname) [!HAVE_SOCKETS]: Replace with winsock version.
@@end example
d2042 2
a2043 2
@@node Man Pages
@@section Man Pages
d2045 2
a2046 3
In the GNU project, man pages are secondary.  It is not necessary or
expected for every GNU program to have a man page, but some of them do.
It's your choice whether to include a man page in your program.
d2048 2
a2049 3
When you make this decision, consider that supporting a man page
requires continual effort each time the program is changed.  The time
you spend on the man page is time taken away from more useful work.
d2051 2
a2052 3
For a simple program which changes little, updating the man page may be
a small job.  Then there is little reason not to include a man page, if
you have one.
d2054 2
a2055 8
For a large program that changes a great deal, updating a man page may
be a substantial burden.  If a user offers to donate a man page, you may
find this gift costly to accept.  It may be better to refuse the man
page unless the same person agrees to take full responsibility for
maintaining it---so that you can wash your hands of it entirely.  If
this volunteer later ceases to do the job, then don't feel obliged to
pick it up yourself; it may be better to withdraw the man page from the
distribution until someone else agrees to update it.
d2057 2
a2058 6
When a program changes only a little, you may feel that the
discrepancies are small enough that the man page remains useful without
updating.  If so, put a prominent note near the beginning of the man
page explaining that you don't maintain it and that the Texinfo manual
is more authoritative.  The note should say how to access the Texinfo
documentation.
d2060 2
a2061 2
@@node Reading other Manuals
@@section Reading other Manuals
d2063 2
a2064 2
There may be non-free books or documentation files that describe the
program you are documenting.
d2066 2
a2067 19
It is ok to use these documents for reference, just as the author of a
new algebra textbook can read other books on algebra.  A large portion
of any non-fiction book consists of facts, in this case facts about how
a certain program works, and these facts are necessarily the same for
everyone who writes about the subject.  But be careful not to copy your
outline structure, wording, tables or examples from preexisting non-free
documentation.  Copying from free documentation may be ok; please check
with the FSF about the individual case.

@@node Managing Releases
@@chapter The Release Process

Making a release is more than just bundling up your source files in a
tar file and putting it up for FTP.  You should set up your software so
that it can be configured to run on a variety of systems.  Your Makefile
should conform to the GNU standards described below, and your directory
layout should also conform to the standards discussed below.  Doing so
makes it easy to include your package into the larger framework of
all GNU software.
d2069 2
a2070 5
@@menu
* Configuration::               How Configuration Should Work
* Makefile Conventions::	Makefile Conventions
* Releases::                    Making Releases
@@end menu
d2072 2
a2073 2
@@node Configuration
@@section How Configuration Should Work
d2075 2
a2076 3
Each GNU distribution should come with a shell script named
@@code{configure}.  This script is given arguments which describe the
kind of machine and system you want to compile the program for.
d2078 2
a2079 2
The @@code{configure} script must record the configuration options so
that they affect compilation.
d2081 2
a2082 5
One way to do this is to make a link from a standard name such as
@@file{config.h} to the proper configuration file for the chosen system.
If you use this technique, the distribution should @@emph{not} contain a
file named @@file{config.h}.  This is so that people won't be able to
build the program without configuring it first.
d2084 3
a2086 5
Another thing that @@code{configure} can do is to edit the Makefile.  If
you do this, the distribution should @@emph{not} contain a file named
@@file{Makefile}.  Instead, it should include a file @@file{Makefile.in} which
contains the input used for editing.  Once again, this is so that people
won't be able to build the program without configuring it first.
d2088 2
a2089 5
If @@code{configure} does write the @@file{Makefile}, then @@file{Makefile}
should have a target named @@file{Makefile} which causes @@code{configure}
to be rerun, setting up the same configuration that was set up last
time.  The files that @@code{configure} reads should be listed as
dependencies of @@file{Makefile}.
d2091 2
a2092 4
All the files which are output from the @@code{configure} script should
have comments at the beginning explaining that they were generated
automatically using @@code{configure}.  This is so that users won't think
of trying to edit them by hand.
d2094 2
a2095 4
The @@code{configure} script should write a file named @@file{config.status}
which describes which configuration options were specified when the
program was last configured.  This file should be a shell script which,
if run, will recreate the same configuration.
d2097 2
a2098 5
The @@code{configure} script should accept an option of the form
@@samp{--srcdir=@@var{dirname}} to specify the directory where sources are found
(if it is not the current directory).  This makes it possible to build
the program in a separate directory, so that the actual source directory
is not modified.
d2100 2
a2101 5
If the user does not specify @@samp{--srcdir}, then @@code{configure} should
check both @@file{.} and @@file{..} to see if it can find the sources.  If
it finds the sources in one of these places, it should use them from
there.  Otherwise, it should report that it cannot find the sources, and
should exit with nonzero status.
d2103 2
a2104 5
Usually the easy way to support @@samp{--srcdir} is by editing a
definition of @@code{VPATH} into the Makefile.  Some rules may need to
refer explicitly to the specified source directory.  To make this
possible, @@code{configure} can add to the Makefile a variable named
@@code{srcdir} whose value is precisely the specified directory.
d2106 2
a2107 3
The @@code{configure} script should also take an argument which specifies the
type of system to build the program for.  This argument should look like
this:
d2109 2
a2110 3
@@example
@@var{cpu}-@@var{company}-@@var{system}
@@end example
d2112 2
a2113 1
For example, a Sun 3 might be @@samp{m68k-sun-sunos4.1}.
d2115 2
a2116 7
The @@code{configure} script needs to be able to decode all plausible
alternatives for how to describe a machine.  Thus, @@samp{sun3-sunos4.1}
would be a valid alias.  For many programs, @@samp{vax-dec-ultrix} would
be an alias for @@samp{vax-dec-bsd}, simply because the differences
between Ultrix and @@sc{BSD} are rarely noticeable, but a few programs
might need to distinguish them.
@@c Real 4.4BSD now runs on some Suns.
d2118 2
a2119 2
There is a shell script called @@file{config.sub} that you can use
as a subroutine to validate system types and canonicalize aliases.
d2121 2
a2122 3
Other options are permitted to specify in more detail the software
or hardware present on the machine, and include or exclude optional
parts of the package:
d2124 2
a2125 6
@@table @@samp
@@item --enable-@@var{feature}@@r{[}=@@var{parameter}@@r{]}
Configure the package to build and install an optional user-level
facility called @@var{feature}.  This allows users to choose which
optional features to include.  Giving an optional @@var{parameter} of
@@samp{no} should omit @@var{feature}, if it is built by default.
d2127 2
a2128 5
No @@samp{--enable} option should @@strong{ever} cause one feature to
replace another.  No @@samp{--enable} option should ever substitute one
useful behavior for another useful behavior.  The only proper use for
@@samp{--enable} is for questions of whether to build part of the program
or exclude it.
d2130 2
a2131 4
@@item --with-@@var{package}
@@c @@r{[}=@@var{parameter}@@r{]}
The package @@var{package} will be installed, so configure this package
to work with @@var{package}.
d2133 2
a2134 2
@@c  Giving an optional @@var{parameter} of
@@c @@samp{no} should omit @@var{package}, if it is used by default.
d2136 2
a2137 3
Possible values of @@var{package} include @@samp{x}, @@samp{x-toolkit},
@@samp{gnu-as} (or @@samp{gas}), @@samp{gnu-ld}, @@samp{gnu-libc}, and
@@samp{gdb}.
d2139 2
a2140 3
Do not use a @@samp{--with} option to specify the file name to use to
find certain files.  That is outside the scope of what @@samp{--with}
options are for.
d2142 2
a2143 2
@@item --nfp
The target machine has no floating point processor.
d2145 2
a2146 3
@@item --gas
The target machine assembler is GAS, the GNU assembler.
This is obsolete; users should use @@samp{--with-gnu-as} instead.
a2147 3
@@item --x
The target machine has the X Window System installed.
This is obsolete; users should use @@samp{--with-x} instead.
d2150 31
a2180 6
All @@code{configure} scripts should accept all of these ``detail''
options, whether or not they make any difference to the particular
package at hand.  In particular, they should accept any option that
starts with @@samp{--with-} or @@samp{--enable-}.  This is so users will
be able to configure an entire GNU source tree at once with a single set
of options.
d2182 3
a2184 5
You will note that the categories @@samp{--with-} and @@samp{--enable-}
are narrow: they @@strong{do not} provide a place for any sort of option
you might think of.  That is deliberate.  We want to limit the possible
configuration options in GNU software.  We do not want GNU programs to
have idiosyncratic configuration options.
d2186 2
a2187 5
Packages that perform part of the compilation process may support cross-compilation.
In such a case, the host and target machines for the program may be
different.  The @@code{configure} script should normally treat the
specified type of system as both the host and the target, thus producing
a program which works for the same type of machine that it runs on.
d2189 2
a2190 5
The way to build a cross-compiler, cross-assembler, or what have you, is
to specify the option @@samp{--host=@@var{hosttype}} when running
@@code{configure}.  This specifies the host system without changing the
type of target system.  The syntax for @@var{hosttype} is the same as
described above.
d2192 6
a2197 5
Bootstrapping a cross-compiler requires compiling it on a machine other
than the host it will run on.  Compilation packages accept a
configuration option @@samp{--build=@@var{hosttype}} for specifying the
configuration on which you will compile them, in case that is different
from the host.
d2199 3
a2201 3
Programs for which cross-operation is not meaningful need not accept the
@@samp{--host} option, because configuring an entire operating system for
cross-operation is not a meaningful thing.
d2203 3
a2205 3
Some programs have ways of configuring themselves automatically.  If
your program is set up to do this, your @@code{configure} script can simply
ignore most of its arguments.
d2207 19
a2225 6
@@comment The makefile standards are in a separate file that is also
@@comment included by make.texinfo.  Done by roland@@gnu.ai.mit.edu on 1/6/93.
@@comment For this document, turn chapters into sections, etc.
@@lowersections
@@include make-stds.texi
@@raisesections
d2228 1
a2228 1
@@section Making Releases
d2245 1
a2245 1
produced by Bison, @@code{lex}, @@TeX{}, and @@code{makeinfo}; this helps avoid
d2276 3
a2278 3
Try to make sure that all the file names will be unique on MS-DOS.  A
name on MS-DOS consists of up to 8 characters, optionally followed by a
period and up to three characters.  MS-DOS will truncate extra
d2285 1
a2285 1
to test print any @@file{*.texinfo} or @@file{*.texi} files.
@


1.1.1.3
log
@Import binutils-2.10
- only the binutils package (no gdb here)
- don't import libiberty and texinfo, they are elsewhere
- remove all .info* generated files
@
text
@d5 2
a6 2
@@c This date is automagically updated when you save this file:
@@set lastupdate March 13, 1998
d31 1
a31 1
Copyright (C) 1992, 1993, 1994, 1995, 1996, 1997, 1998 Free Software Foundation, Inc.
d62 1
a62 1
Copyright @@copyright{} 1992, 1993, 1994, 1995, 1996, 1997, 1998 Free Software Foundation, Inc.
d107 2
a108 2
Corrections or suggestions for this document should be sent to
@@email{gnu@@@@gnu.org}.  If you make a suggestion, please include a
d171 2
a172 2
So, before adding in any contributions from other people, please tell
us, so we can arrange to get the papers.  Then wait until we tell you
d178 1
a178 5
need legal papers for that change.

This also applies to comments and documentation files.  For copyright
law, comments and code are just text.  Copyright applies to all kinds of
text, so we need legal papers for all kinds.
a194 4
We have more detailed advice for maintainers of programs; if you have
reached the stage of actually maintaining a program for GNU (whether
released or not), please ask us for a copy.

d239 3
d326 1
a326 3
other language in order to build your program.  For example, if you
write your program in C++, people will have to install the C++ compiler
in order to compile your program.  Thus, it is better if you write in C.
d328 1
a328 2
But there are three situations when there is no disadvantage in using
some other language:
d332 1
a332 1
It is okay to use another language if your program contains an
d346 1
a346 1
If an application is of interest to a narrow community, then perhaps
a349 4
C has one other advantage over C++ and other compiled languages: more
people know C, so more people will find it easy to read and modify the
program if it is written in C.

d609 4
a612 4
Please do not mention all of the libraries that the program uses ``just
for completeness''---that would produce a lot of unhelpful clutter.
Please mention library version numbers only if you find in practice that
they are very important to you in debugging.
d631 1
a631 2
GNU Emacs comes with NO WARRANTY,
to the extent permitted by law.
d634 1
a634 2
For more information about these matters,
see the files named COPYING.
d667 1
a667 1
please send @@email{gnu@@@@gnu.org} a list of them, with their
d1162 1
a1162 1
see if any actually do, and tell @@email{gnu@@@@gnu.org}.
a1964 5
@@group
#ifdef foo
  @@dots{}
#endif /* foo */
@@end group
a1977 5
@@group
#ifndef foo
  @@dots{}
#endif /* not foo */
@@end group
d1980 1
d2436 1
a2436 1
This can be any method of forming the plural of the word for ``file'', and
d2927 3
a2929 6
Possible values of @@var{package} include 
@@samp{gnu-as} (or @@samp{gas}), @@samp{gnu-ld}, @@samp{gnu-libc},
@@samp{gdb},
@@samp{x}, 
and
@@samp{x-toolkit}.
d2996 3
a2998 3
Package the distribution of @@code{Foo version 69.96} up in a gzipped tar
file with the name @@file{foo-69.96.tar.gz}.  It should unpack into a
subdirectory named @@file{foo-69.96}.
a3061 6
Local variables:
update-date-leading-regexp: "@@c This date is automagically updated when you save this file:\n@@set lastupdate "
update-date-trailing-regexp: ""
eval: (load "/gd/gnuorg/update-date.el")
eval: (add-hook 'write-file-hooks 'update-date)
End:
@


1.1.1.4
log
@import binutils 2.14 (excluding testsuites, .info files, and .po files)
@
text
@d6 1
a6 1
@@set lastupdate February 14, 2002
a19 6
@@c Put everything in one index (arbitrarily chosen to be the concept index).
@@syncodeindex fn cp
@@syncodeindex ky cp
@@syncodeindex pg cp
@@syncodeindex vr cp

d31 1
a31 1
Copyright (C) 1992, 1993, 1994, 1995, 1996, 1997, 1998, 1999, 2000, 2001 Free Software Foundation, Inc.
d33 20
a52 7
Permission is granted to copy, distribute and/or modify this document
under the terms of the GNU Free Documentation License, Version 1.1
or any later version published by the Free Software Foundation;
with no Invariant Sections, with no
Front-Cover Texts, and with no Back-Cover Texts.
A copy of the license is included in the section entitled ``GNU
Free Documentation License''.
d57 1
a57 1
@@author Richard Stallman, et al.
d62 1
a62 1
Copyright @@copyright{} 1992, 1993, 1994, 1995, 1996, 1997, 1998, 1999, 2000, 2001 Free Software Foundation, Inc.
d64 13
a76 7
Permission is granted to copy, distribute and/or modify this document
under the terms of the GNU Free Documentation License, Version 1.1
or any later version published by the Free Software Foundation;
with no Invariant Sections, with no
Front-Cover Texts, and with no Back-Cover Texts.
A copy of the license is included in the section entitled ``GNU
Free Documentation License''.
d88 1
a88 1
* Legal Issues::                Keeping Free Software Free
a93 4
* References::                  References to Non-Free Software or Documentation
* Copying This Manual::         How to Make Copies of This Manual
* Index::                       

a106 16
This release of the GNU Coding Standards was last updated
@@value{lastupdate}.

@@cindex where to obtain @@code{standards.texi}
@@cindex downloading this manual
If you did not obtain this file directly from the GNU project and
recently, please check for a newer version.  You can ftp the GNU
Coding Standards from any GNU FTP host in the directory
@@file{/pub/gnu/standards/}.  The GNU Coding Standards are available
there in several different formats: @@file{standards.text},
@@file{standards.info}, and @@file{standards.dvi}, as well as the
Texinfo ``source'' which is divided in two files:
@@file{standards.texi} and @@file{make-stds.texi}.  The GNU Coding
Standards are also available on the GNU World Wide Web server:
@@uref{http://www.gnu.org/prep/standards_toc.html}.

d108 1
a108 1
@@email{bug-standards@@@@gnu.org}.  If you make a suggestion, please include a
d113 2
a114 11
These standards cover the minimum of what is important when writing a
GNU package.  Likely, the needs for additional standards will come up.
Sometimes, you might suggest that such standards be added to this
document.  If you think your standards would be generally useful, please
do suggest them.

You should also set standards for your package on many questions not
addressed or not firmly specified here.  The most important point is to
be self-consistent---try to stick to the conventions you pick, and try
to document them as much as possible.  That way, your program will be
more maintainable by others.
d116 1
a116 1
@@node Legal Issues
a117 1
@@cindex legal aspects
d120 1
a120 1
avoids legal difficulties, and other related issues.
a124 1
* Trademarks::                  How We Deal with Trademark Issues
a128 2
@@cindex proprietary programs
@@cindex avoiding proprietary code
d160 1
a162 2
@@cindex legal papers
@@cindex accepting contributions
d164 5
a168 6
If the program you are working on is copyrighted by the Free Software
Foundation, then when someone else sends you a piece of code to add to
the program, we need legal papers to use it---just as we asked you to
sign papers initially.  @@emph{Each} person who makes a nontrivial
contribution to a program must sign some sort of legal papers in order
for us to have clear title to the program; the main author alone is not
a183 5
We know it is frustrating to ask for legal papers; it's frustrating for
us as well.  But if you don't wait, you are going out on a limb---for
example, what if the contributor's employer won't sign a disclaimer?
You might have to take that code out again!

d187 7
a193 3
which you use.  For example, if someone send you one implementation, but
you write a different implementation of the same idea, you don't need to
get papers.
a202 22
@@node Trademarks
@@section Trademarks
@@cindex trademarks

Please do not include any trademark acknowledgements in GNU software
packages or documentation.

Trademark acknowledgements are the statements that such-and-such is a
trademark of so-and-so.  The GNU Project has no objection to the basic
idea of trademarks, but these acknowledgements feel like kowtowing, so
we don't use them.  There is no legal requirement for them.

What is legally required, as regards other people's trademarks, is to
avoid using them in ways which a reader might read as naming or labeling
our own programs or activities.  For example, since ``Objective C'' is
(or at least was) a trademark, we made sure to say that we provide a
``compiler for the Objective C language'' rather than an ``Objective C
compiler''.  The latter is meant to be short for the former, but it does
not explicitly state the relationship, so it could be misinterpreted as
using ``Objective C'' as a label for the compiler rather than for the
language.

a204 1
@@cindex program design
a208 10
@@c                         Standard or ANSI C
@@c
@@c In 1989 the American National Standards Institute (ANSI) standardized
@@c C   as  standard  X3.159-1989.    In  December   of  that   year  the
@@c International Standards Organization ISO  adopted the ANSI C standard
@@c making  minor changes.   In 1990  ANSI then  re-adopted  ISO standard
@@c C. This version of C is known as either ANSI C or Standard C.

@@c A major revision of the C Standard appeared in 1999.

a209 1
* Source Language::             Which languges to use.
d212 2
a213 2
* Standard C::                  Using Standard C features
* Conditional Compilation::     Compiling Code Only If A Conditional is True
a215 47
@@node Source Language
@@section Which Languages to Use
@@cindex programming languges

When you want to use a language that gets compiled and runs at high
speed, the best language to use is C.  Using another language is like
using a non-standard feature: it will cause trouble for users.  Even if
GCC supports the other language, users may find it inconvenient to have
to install the compiler for that other language in order to build your
program.  For example, if you write your program in C++, people will
have to install the GNU C++ compiler in order to compile your program.

C has one other advantage over C++ and other compiled languages: more
people know C, so more people will find it easy to read and modify the
program if it is written in C.

So in general it is much better to use C, rather than the
comparable alternatives.

But there are two exceptions to that conclusion:

@@itemize @@bullet
@@item
It is no problem to use another language to write a tool specifically
intended for use with that language.  That is because the only people
who want to build the tool will be those who have installed the other
language anyway.

@@item
If an application is of interest only to a narrow part of the community,
then the question of which language it is written in has less effect on
other people, so you may as well please yourself.
@@end itemize

Many programs are designed to be extensible: they include an interpreter
for a language that is higher level than C.  Often much of the program
is written in that language, too.  The Emacs editor pioneered this
technique.

@@cindex GUILE
The standard extensibility interpreter for GNU software is GUILE, which
implements the language Scheme (an especially clean and simple dialect
of Lisp).  @@uref{http://www.gnu.org/software/guile/}.  We don't reject
programs written in other ``scripting languages'' such as Perl and
Python, but using GUILE is very important for the overall consistency of
the GNU system.

a217 2
@@cindex compatibility with C and @@sc{posix} standards
@@cindex @@sc{posix} compatibility
d221 3
a223 3
compatible with Standard C if Standard C specifies their
behavior, and upward compatible with @@sc{posix} if @@sc{posix} specifies
their behavior.
d228 2
a229 3
@@cindex options for compatibility
Standard C and @@sc{posix} prohibit many kinds of extensions.  Feel
free to make the extensions anyway, and include a @@samp{--ansi},
d232 2
a233 2
programs or scripts, then it is not really upward compatible.  So you
should try to redesign its interface to make it upward compatible.
d235 1
a235 2
@@cindex @@code{POSIXLY_CORRECT}, environment variable
Many GNU programs suppress extensions that conflict with @@sc{posix} if the
d246 1
a246 2
Additional useful features are welcome regardless of whether
there is any precedent for them.
a249 1
@@cindex non-standard extensions
d270 2
a271 2
Emacs) which run on a great variety of systems.  Using GNU extensions in
such programs would make many users unhappy, so we don't do that.
d273 20
a292 24
Another exception is for programs that are used as part of compilation:
anything that must be compiled with other compilers in order to
bootstrap the GNU compilation facilities.  If these require the GNU
compiler, then no one can compile them without having them installed
already.  That would be extremely troublesome in certain cases.

@@node Standard C
@@section Standard C and Pre-Standard C
@@cindex @@sc{ansi} C standard

1989 Standard C is widespread enough now that it is ok to use its
features in new programs.  There is one exception: do not ever use the
``trigraph'' feature of Standard C.

1999 Standard C is not widespread yet, so please do not require its
features in programs.  It is ok to use its features if they are present.

However, it is easy to support pre-standard compilers in most programs,
so if you know how to do that, feel free.  If a program you are
maintaining has such support, you should try to keep it working.

@@cindex function prototypes
To support pre-standard C, instead of writing function definitions in
standard prototype form,
d301 1
a301 1
write the definition in pre-standard style like this,
d318 6
a323 29
of prototypes in all the files where the function is called.  And once
you have the declaration, you normally lose nothing by writing the
function definition in the pre-standard style.

This technique does not work for integer types narrower than @@code{int}.
If you think of an argument as being of a type narrower than @@code{int},
declare it as @@code{int} instead.

There are a few special cases where this technique is hard to use.  For
example, if a function argument needs to hold the system type
@@code{dev_t}, you run into trouble, because @@code{dev_t} is shorter than
@@code{int} on some machines; but you cannot use @@code{int} instead,
because @@code{dev_t} is wider than @@code{int} on some machines.  There
is no type you can safely use on all machines in a non-standard
definition.  The only way to support non-standard C and pass such an
argument is to check the width of @@code{dev_t} using Autoconf and choose
the argument type accordingly.  This may not be worth the trouble.

In order to support pre-standard compilers that do not recognize
prototypes, you may want to use a preprocessor macro like this:

@@example
/* Declare the prototype for a general external function.  */
#if defined (__STDC__) || defined (WINDOWSNT)
#define P_(proto) proto
#else
#define P_(proto) ()
#endif
@@end example
d325 2
a326 2
@@node Conditional Compilation
@@section Conditional Compilation
d328 6
a333 4
When supporting configuration options already known when building your
program we prefer using @@code{if (... )} over conditional compilation,
as in the former case the compiler is able to perform more extensive
checking of all possible code paths.
d335 2
a336 1
For example, please write
d338 4
a341 6
@@smallexample
  if (HAS_FOO)
    ...
  else
    ...
@@end smallexample
d343 2
a344 1
instead of:
d346 6
a351 7
@@smallexample
  #ifdef HAS_FOO
    ...
  #else
    ...
  #endif
@@end smallexample
d353 4
a356 12
A modern compiler such as GCC will generate exactly the same code in
both cases, and we have been using similar techniques with good success
in several projects.

While this is not a silver bullet solving all portability problems,
following this policy would have saved the GCC project alone many person
hours if not days per year.

In the case of function-like macros like @@code{REVERSIBLE_CC_MODE} in
GCC which cannot be simply used in @@code{if( ...)} statements, there is
an easy workaround.  Simply introduce another macro
@@code{HAS_REVERSIBLE_CC_MODE} as in the following example:
d358 3
a360 7
@@smallexample
  #ifdef REVERSIBLE_CC_MODE
  #define HAS_REVERSIBLE_CC_MODE 1
  #else
  #define HAS_REVERSIBLE_CC_MODE 0
  #endif
@@end smallexample
d365 3
a367 3
This @@value{CHAPTER} describes conventions for writing robust
software.  It also describes general standards for error messages, the
command line interface, and how libraries should behave.
d373 2
a374 4
* User Interfaces::             Standards about interfaces generally
* Graphical Interfaces::        Standards for graphical interfaces
* Command-Line Interfaces::     Standards for command line interfaces
* Option Table::                Table of long options
a375 1
* File Usage::                  Which files to use, and where
a380 1
@@cindex arbitrary limits on data
a385 1
@@cindex @@code{NUL} characters
d387 3
a389 7
nonprinting characters @@emph{including those with codes above 0177}.
The only sensible exceptions would be utilities specifically intended
for interface to certain types of terminals or printers
that can't handle those characters.
Whenever possible, try to make programs work properly with
sequences of bytes that represent multibyte characters, using encodings
such as UTF-8 and others.
a390 1
@@cindex error messages
a397 2
@@cindex @@code{malloc} return value
@@cindex memory allocation failure
a418 1
@@cindex command-line arguments, decoding
d431 1
a431 1
These are supported compatibly by GNU.
d433 3
a435 11
@@cindex signal handling
The preferred signal handling facilities are the BSD variant of
@@code{signal}, and the @@sc{posix} @@code{sigaction} function; the
alternative USG @@code{signal} interface is an inferior design.

Nowadays, using the @@sc{posix} signal functions may be the easiest way
to make a program portable.  If you use @@code{signal}, then on GNU/Linux
systems running GNU libc version 1, you should include
@@file{bsd/signal.h} instead of @@file{signal.h}, so as to get BSD
behavior.  It is up to you whether to support systems where
@@code{signal} has only the USG behavior, or give up on them.
a436 1
@@cindex impossible conditions
a450 2
@@cindex temporary files
@@cindex @@code{TMPDIR} environment variable
a454 13
In addition, be aware that there is a possible security problem when
creating temporary files in world-writable directories.  In C, you can
avoid this problem by creating temporary files in this manner:

@@example
fd = open(filename, O_WRONLY | O_CREAT | O_EXCL, 0600);
@@end example

@@noindent
or by using the @@code{mkstemps} function from libiberty.

In bash, use @@code{set -C} to avoid this problem.

a456 1
@@cindex libraries
d476 4
a479 4
should have names beginning with @@samp{_}.  The @@samp{_} should be
followed by the chosen name prefix for the library, to prevent
collisions with other libraries.  These can go in the same files with
user entry points if you like.
a485 2
@@cindex formatting error messages
@@cindex error messages, formatting
a492 14
@@noindent
If you want to mention the column number, use this format:

@@example
@@var{source-file-name}:@@var{lineno}:@@var{column}: @@var{message}
@@end example

@@noindent
Line numbers should start from 1 at the beginning of the file, and
column numbers should start from 1 at the beginning of the line.  (Both
of these conventions are chosen for compatibility.)  Calculate column
numbers assuming that space and all ASCII printing characters have
equal width, and assuming tab stops every 8 columns.

a508 6
If you want to mention the column number, use this format:

@@example
@@var{program}:@@var{source-file-name}:@@var{lineno}:@@var{column}: @@var{message}
@@end example

d525 1
a525 1
@@section Standards for Interfaces Generally
a526 2
@@cindex program name and its behavior
@@cindex behavior, dependent on program's name
a533 1
@@cindex output device and program's behavior
d536 2
a537 4
important principle of the system's design; do not compromise it merely
to save someone from typing an option now and then.  (Variation in error
message syntax when using a terminal is ok, because that is a side issue
that people do not depend on.)
d553 1
a553 29
@@node Graphical Interfaces
@@section Standards for Graphical Interfaces
@@cindex graphical user interface

@@cindex gtk
When you write a program that provides a graphical user interface,
please make it work with X Windows and the GTK toolkit unless the
functionality specifically requires some alternative (for example,
``displaying jpeg images while in console mode'').

In addition, please provide a command-line interface to control the
functionality.  (In many cases, the graphical user interface can be a
separate program which invokes the command-line program.)  This is
so that the same jobs can be done from scripts.

@@cindex corba
@@cindex gnome
Please also consider providing a CORBA interface (for use from GNOME), a
library interface (for use from C), and perhaps a keyboard-driven
console interface (for use by users from console mode).  Once you are
doing the work to provide the functionality and the graphical interface,
these won't be much extra work.

@@node Command-Line Interfaces
@@section Standards for Command Line Interfaces
@@cindex command-line interface

@@findex getopt
It is a good idea to follow the @@sc{posix} guidelines for the
d557 1
a557 1
special argument @@samp{--} is used.  This is not what @@sc{posix}
a559 1
@@cindex long-named options
a578 1
@@cindex standard command-line options
a582 1
@@cindex @@samp{--version} option
d584 1
a584 1
This option should direct the program to print information about its name,
a588 2
@@cindex canonical name of a program
@@cindex program's canonical name
a660 19
Translations of the above lines must preserve the validity of the
copyright notices (@@pxref{Internationalization}).  If the translation's
character set supports it, the @@samp{(C)} should be replaced with the
copyright symbol, as follows:

@@ifinfo 
(the official copyright symbol, which is the letter C in a circle); 
@@end ifinfo 
@@ifnotinfo 
@@copyright{}
@@end ifnotinfo 

Write the word ``Copyright'' exactly like that, in English.  Do not
translate it into another language.  International treaties recognize
the English word ``Copyright''; translations into other languages do not
have legal significance.


@@cindex @@samp{--help} option
a666 2
@@cindex address for bug reports
@@cindex bug reports
a676 2
@@cindex long option names
@@cindex table of long options
d681 1
a681 1
please send @@email{bug-standards@@@@gnu.org} a list of them, with their
a740 3
@@item background
For server programs, run in the background.

a864 3
@@item device
Specify an I/O device (special file name).

a996 5
@@item foreground
For server programs, run in the foreground;
in other words, don't do anything special to run the server
in the background.

a1041 3
@@item html
In @@code{makeinfo}, output HTML.

a1101 4
@@item init-file
In some programs, specify the name of the file to read as the user's
init file.

a1119 3
@@item iso-8601
Used in @@code{date}

a1354 4
@@item options
@@samp{-o} in @@code{getopt}, @@code{fdlist}, @@code{fdmount},
@@code{fdmountd}, and @@code{fdumount}.

a1438 3
@@item proxy
Specify an HTTP proxy.

a1566 6
@@item socket
Specify a file descriptor for a network server to use for its socket,
instead of opening and binding a new socket.  This provides a way to
run, in a nonpriveledged process, a server that normally needs a
reserved port number.

a1664 3
@@item timeout
Specify how long to wait before giving up on some operation.

a1756 1
@@cindex memory usage
d1758 1
a1758 1
If a program typically uses just a few meg of memory, don't bother making any
a1773 17
@@node File Usage
@@section File Usage
@@cindex file usage

Programs should be prepared to operate when @@file{/usr} and @@file{/etc}
are read-only file systems.  Thus, if the program manages log files,
lock files, backup files, score files, or any other files which are
modified for internal purposes, these files should not be stored in
@@file{/usr} or @@file{/etc}.

There are two exceptions.  @@file{/etc} is used to store system
configuration information; it is reasonable for a program to modify
files in @@file{/etc} when its job is to update the system configuration.
Also, if the user explicitly asks to modify one file in a directory, it
is reasonable for the program to store other files in the same
directory.

d1784 1
a1784 1
* Names::                       Naming Variables, Functions, and Files
a1793 1
@@cindex formatting source code
a1794 2
@@cindex open brace
@@cindex braces, in C source
d1816 1
a1816 2
or, if you want to use Standard C syntax, format the definition like
this:
d1826 1
a1826 1
In Standard C, if the arguments don't fit nicely on one line,
d1836 1
a1836 19
The rest of this section gives our recommendations for other aspects of
C formatting style, which is also the default style of the @@code{indent}
program in version 1.2 and newer.  It corresponds to the options

@@smallexample
-nbad -bap -nbc -bbo -bl -bli2 -bls -ncdb -nce -cp1 -cs -di2
-ndj -nfc1 -nfca -hnl -i2 -ip5 -lp -pcs -psl -nsc -nsob
@@end smallexample

We don't think of these recommendations as requirements, because it
causes no problems for users if two different programs have different
formatting styles.

But whatever style you use, please use it consistently, since a mixture
of styles within one program tends to look ugly.  If you are
contributing changes to an existing program, please follow the style of
that program.

For the body of the function, our recommended style looks like this:
a1851 1
@@cindex spaces before open-paren
a1857 1
@@cindex expressions, splitting
d1882 1
d1889 1
a1889 3
@@noindent
but Emacs would alter it.  Adding a set of parentheses produces
something that looks equally nice, and which Emacs will preserve:
a1905 2
@@cindex formfeed
@@cindex control-L
d1911 1
a1913 1
@@cindex commenting
a1964 2
@@cindex conditionals, comments for
@@cindex @@code{#endif}, commenting
a2005 1
@@cindex syntactic conventions
d2007 2
a2008 15
@@cindex implicit @@code{int}
@@cindex function argument, declaring
Please explicitly declare the types of all objects.  For example, you
should explicitly declare all arguments to functions, and you should
declare functions to return @@code{int} rather than omitting the
@@code{int}.

@@cindex compiler warnings
@@cindex @@samp{-Wall} compiler option
Some programmers like to use the GCC @@samp{-Wall} option, and change the
code whenever it issues a warning.  If you want to do this, then do.
Other programmers prefer not to use @@samp{-Wall}, because it gives
warnings for valid and legitimate code which they do not want to change.
If you want to do this, then do.  The compiler should be your servant,
not your master.
a2015 1
@@cindex temporary variables
a2026 1
@@cindex multiple variables in a line
a2126 1
@@pindex lint
d2131 2
a2132 2
@@node Names
@@section Naming Variables, Functions, and Files
a2133 1
@@cindex names of variables, functions, and files
a2142 4
Try to limit your use of abbreviations in symbol names.  It is ok to
make a few abbreviations, explain what they mean, and then use them
frequently, but don't use lots of obscure abbreviations.

d2167 5
a2171 12
@@cindex file-name limitations
@@pindex doschk
You might want to make sure that none of the file names would conflict
the files were loaded onto an MS-DOS file system which shortens the
names.  You can use the program @@code{doschk} to test for this.

Some GNU programs were designed to limit themselves to file names of 14
characters or less, to avoid file name conflicts if they are read into
older System V systems.  Please preserve this feature in the existing
GNU programs that have it, but there is no need to do this in new GNU
programs.  @@code{doschk} also reports file names longer than 14
characters.
a2174 1
@@cindex portability, between system types
d2181 9
a2189 11
compiled with the GNU C compiler, on various types of @@sc{cpu}.  So the
kinds of portability that are absolutely necessary are quite limited.
But it is important to support Linux-based GNU systems, since they
are the form of GNU that is popular.

Beyond that, it is good to support the other free operating systems
(*BSD), and it is nice to support other Unix-like systems if you want
to.  Supporting a variety of Unix-like systems is desirable, although
not paramount.  It is usually not too hard, so you may as well do it.
But you don't have to consider it an obligation, if it does turn out to
be hard.
a2190 1
@@pindex autoconf
a2199 1
@@cindex non-@@sc{posix} systems, and portability
d2201 8
a2208 16
Macintosh, VMS, and MVS, supporting them is often a lot of work.  When
that is the case, it is better to spend your time adding features that
will be useful on GNU and GNU/Linux, rather than on supporting other
incompatible systems.

It is a good idea to define the ``feature test macro''
@@code{_GNU_SOURCE} when compiling your C files.  When you compile on GNU
or GNU/Linux, this will enable the declarations of GNU library extension
functions, and that will usually give you a compiler error message if
you define the same function names in some other way in your program.
(You don't have to actually @@emph{use} these functions, if you prefer
to make the program more portable to other systems.)

But whether or not you use these GNU extensions, you should avoid
using their names for any other meanings.  Doing so would make it hard
to move your code into other GNU programs.
a2212 2
@@cindex data types, and portability
@@cindex portability, and data types
a2219 19
Similarly, don't make any effort to cater to the possibility that
@@code{long} will be smaller than predefined types like @@code{size_t}.
For example, the following code is ok:

@@example
printf ("size = %lu\n", (unsigned long) sizeof array);
printf ("diff = %ld\n", (long) (pointer2 - pointer1));
@@end example

1989 Standard C requires this to work, and we know of only one
counterexample: 64-bit programs on Microsoft Windows IA-64.  We will
leave it to those who want to port GNU programs to that environment
to figure out how to do it.

Predefined file-size types like @@code{off_t} are an exception: they are
longer than @@code{long} on many platforms, so code like the above won't
work with them.  One way to print an @@code{off_t} value portably is to
print its digits yourself, one by one.

d2234 3
a2236 3
there is a difference, all of them support Standard C prototypes, so you can
use prototypes (perhaps conditionalized to be active only in Standard C)
to make the code work on those systems.
d2246 1
a2246 1
     char *a1, *a2, *a3;
d2254 10
a2263 18
In practice, this works on all machines, since a pointer is generally
the widest possible kind of argument; it is much simpler than any
``correct'' alternative.  Be sure @@emph{not} to use a prototype for such
functions.

If you have decided to use Standard C, then you can instead define
@@code{error} using @@file{stdarg.h}, and pass the arguments along to
@@code{vfprintf}.

@@cindex casting pointers to integers
Avoid casting pointers to integers if you can.  Such casts greatly
reduce portability, and in most programs they are easy to avoid.  In the
cases where casting pointers to integers is essential---such as, a Lisp
interpreter which stores type information as well as an address in one
word---you'll have to make explicit provisions to handle different word
sizes.  You will also need to make provision for systems in which the
normal range of addresses you can get from @@code{malloc} starts far away
from zero.
a2266 2
@@cindex library functions, and portability
@@cindex portability, and library functions
d2268 5
a2272 5
C implementations differ substantially.  Standard C reduces but does
not eliminate the incompatibilities; meanwhile, many GNU packages still
support pre-standard compilers because this is not hard to do.  This
chapter gives recommendations for how to use the more-or-less standard C
library functions to avoid unnecessary loss of portability.
d2276 1
a2276 1
Don't use the return value of @@code{sprintf}.  It returns the number of
a2279 3
Be aware that @@code{vfprintf} is not always available.

@@item
a2283 1
@@cindex declaration for system functions
d2300 1
a2300 1
Use an old-style declaration, not a Standard C prototype.  The more you
a2321 1
@@cindex string library functions
d2332 1
a2332 1
That causes less of a problem than you might think.  The newer standard
d2362 1
a2362 1
@@code{strrchr} for new programs, since those are the standard
a2387 1
@@cindex internationalization
a2388 1
@@pindex gettext
a2414 1
@@cindex message text, and internationalization
a2485 1
@@findex mmap
a2501 6
@@cindex documentation

A GNU program should ideally come with full free documentation, adequate
for both reference and tutorial purposes.  If the package can be
programmed or extended, the documentation should cover programming or
extending it, as well as just using it.
a2504 1
* Doc Strings and Manuals::     Compiling doc strings doesn't make a manual.
a2505 3
* License for Manuals::         Writing the distribution terms for a manual.
* Manual Credits::              Giving credit to documentation contributors.
* Printed Manuals::             Mentioning the printed manual.
d2516 4
a2519 12
The preferred document format for the GNU system is the Texinfo
formatting language.  Every GNU package should (ideally) have
documentation in Texinfo both for reference and for learners.  Texinfo
makes it possible to produce a good quality formatted book, using
@@TeX{}, and to generate an Info file.  It is also possible to generate
HTML output from Texinfo source.  See the Texinfo manual, either the
hardcopy, or the on-line version available through @@code{info} or the
Emacs Info subsystem (@@kbd{C-h i}).

Nowadays some other formats such as Docbook and Sgmltexi can be
converted automatically into Texinfo.  It is ok to produce the Texinfo
documentation by conversion this way, as long as it gives good results.
d2548 3
a2550 3
The manual which discusses a program should certainly document all of
the program's command-line options and all of its commands.  It should
give examples of their use.  But don't organize the manual as a list of
a2559 2
The Bison manual is a good example of this---please take a look at it
to see what we mean.
a2572 9
To serve as a reference, a manual should have an Index that list all the
functions, variables, options, and important concepts that are part of
the program.  One combined Index should do for a short manual, but
sometimes for a complex package it is better to use multiple indices.
The Texinfo manual includes advice on preparing good index entries, see
@@ref{Index Entries, , Making Index Entries, texinfo, The GNU Texinfo
Manual}, and see @@ref{Indexing Commands, , Defining the Entries of an
Index, texinfo, The GNU Texinfo manual}.

d2575 2
a2576 2
explanation of the underlying concepts.  (There are, of course, some
exceptions.)  Also, Unix man pages use a particular format which is
a2578 3
Please include an email address in the manual for where to report
bugs @@emph{in the manual}.

d2581 1
a2581 1
``path'' only for search paths, which are lists of directory names.
d2585 1
a2585 28
``illegal'' for activities punishable by law.

@@node Doc Strings and Manuals
@@section Doc Strings and Manuals

Some programming systems, such as Emacs, provide a documentation string
for each function, command or variable.  You may be tempted to write a
reference manual by compiling the documentation strings and writing a
little additional text to go around them---but you must not do it.  That
approach is a fundamental mistake.  The text of well-written
documentation strings will be entirely wrong for a manual.

A documentation string needs to stand alone---when it appears on the
screen, there will be no other text to introduce or explain it.
Meanwhile, it can be rather informal in style.

The text describing a function or variable in a manual must not stand
alone; it appears in the context of a section or subsection.  Other text
at the beginning of the section should explain some of the concepts, and
should often make some general points that apply to several functions or
variables.  The previous descriptions of functions and variables in the
section will also have given information about the topic.  A description
written to stand alone would repeat some of that information; this
redundance looks bad.  Meanwhile, the informality that is acceptable in
a documentation string is totally unacceptable in a manual.

The only good way to use documentation strings in writing a good manual
is to use them as a source of information for writing good text.
a2588 1
@@cindex manual structure
d2596 1
a2596 1
Each program documented in the manual should have a node named
d2608 2
a2609 3
The @@samp{--usage} feature of the Info reader looks for such a node
or menu item in order to find the relevant text, so it is essential
for every Texinfo file to have one.
d2612 1
a2612 42
each program described in the manual.

@@node License for Manuals
@@section License for Manuals
@@cindex license for manuals

Please use the GNU Free Documentation License for all GNU manuals that
are more than a few pages long.  Likewise for a collection of short
documents---you only need one copy of the GNU FDL for the whole
collection.  For a single short document, you can use a very permissive
non-copyleft license, to avoid taking up space with a long license.

See @@uref{http://www.gnu.org/copyleft/fdl-howto.html} for more explanation
of how to employ the GFDL.

Note that it is not obligatory to include a copy of the GNU GPL or GNU
LGPL in a manual whose license is neither the GPL nor the LGPL.  It can
be a good idea to include the program's license in a large manual; in a
short manual, whose size would be increased considerably by including
the program's license, it is probably better not to include it.

@@node Manual Credits
@@section Manual Credits
@@cindex credits for manuals

Please credit the principal human writers of the manual as the authors,
on the title page of the manual.  If a company sponsored the work, thank
the company in a suitable place in the manual, but do not cite the
company as an author.

@@node Printed Manuals
@@section Printed Manuals

The FSF publishes some GNU manuals in printed form.  To encourage sales
of these manuals, the on-line versions of the manual should mention at
the very start that the printed manual is available and should point at
information for getting it---for instance, with a link to the page
@@url{http://www.gnu.org/order/order.html}.  This should not be included
in the printed manual, though, because there it is redundant.

It is also useful to explain in the on-line forms of the manual how the
user can print out the manual from the sources.
a2615 1
@@cindex @@file{NEWS} file
a2629 1
@@cindex change logs
a2643 1
* Indicating the Part Changed::
d2662 1
a2662 2
to a @@file{ChangeLog} file using @@code{rcs2log}; in Emacs, the command
@@kbd{C-x v a} (@@code{vc-update-change-log}) does the job.
a2682 1
@@cindex change logs, style
d2684 1
a2684 4
Here are some simple examples of change log entries, starting with the
header line that says who made the change and when, followed by
descriptions of specific changes.  (These examples are drawn from Emacs
and GCC.)
a2686 2
1998-08-17  Richard Stallman  <rms@@@@gnu.org>

a2716 9
Break long lists of function names by closing continued lines with
@@samp{)}, rather than @@samp{,}, and opening the continuation with
@@samp{(} as in this example:

@@example
* keyboard.c (menu_bar_items, tool_bar_items)
(Fexecute_extended_command): Deal with `keymap' property.
@@end example

d2724 3
a2726 4
and you change all the callers of the function to use the new calling
sequence, there is no need to make individual entries for all the
callers that you changed.  Just write in the entry for the function
being called, ``All callers changed''---like this:
a2745 2
@@cindex conditional changes, and change logs
@@cindex change logs, conditional changes
a2784 14
@@node Indicating the Part Changed
@@subsection Indicating the Part Changed

Indicate the part of a function which changed by using angle brackets
enclosing an indication of what the changed part does.  Here is an entry
for a change in the part of the function @@code{sh-while-getopts} that
deals with @@code{sh} commands:

@@example
* progmodes/sh-script.el (sh-while-getopts) <sh>: Handle case that
user-specified option string is empty.
@@end example


a2786 1
@@cindex man pages
a2832 1
@@cindex releasing
d2844 1
a2844 1
* Makefile Conventions::        Makefile Conventions
a2849 1
@@cindex program configuration
a2850 1
@@pindex configure
d2918 1
a2918 1
between Ultrix and @@sc{bsd} are rarely noticeable, but a few programs
a2924 1
@@cindex optional features, configure-time
d2950 1
a2950 1
Possible values of @@var{package} include
d2953 1
a2953 1
@@samp{x},
d2960 11
d2986 11
a2996 13
Packages that perform part of the compilation process may support
cross-compilation.  In such a case, the host and target machines for the
program may be different.

The @@code{configure} script should normally treat the specified type of
system as both the host and the target, thus producing a program which
works for the same type of machine that it runs on.

To configure a cross-compiler, cross-assembler, or what have you, you
should specify a target different from the host, using the configure
option @@samp{--target=@@var{targettype}}.  The syntax for
@@var{targettype} is the same as for the host type.  So the command would
look like this:
d2998 5
a3002 3
@@example
./configure @@var{hosttype} --target=@@var{targettype}
@@end example
d3005 2
a3006 11
@@samp{--target} option, because configuring an entire operating system for
cross-operation is not a meaningful operation.

Bootstrapping a cross-compiler requires compiling it on a machine other
than the host it will run on.  Compilation packages accept a
configuration option @@samp{--build=@@var{buildtype}} for specifying the
configuration on which you will compile them, but the configure script
should normally guess the build machine type (using
@@file{config.guess}), so this option is probably not necessary.  The
host and target types normally default from the build type, so in
bootstrapping a cross-compiler you must specify them both explicitly.
a3020 1
@@cindex packaging
a3032 16
@@cindex @@file{README} file
The distribution should contain a file named @@file{README} which gives
the name of the package, and a general description of what it does.  It
is also good to explain the purpose of each of the first-level
subdirectories in the package, if there are any.  The @@file{README} file
should either state the version number of the package, or refer to where
in the package it can be found.

The @@file{README} file should refer to the file @@file{INSTALL}, which
should contain an explanation of the installation procedure.

The @@file{README} file should also refer to the file which contains the
copying conditions.  The GNU GPL, if used, should be in a file called
@@file{COPYING}.  If the GNU LGPL is used, it should be in a file called
@@file{COPYING.LIB}.

d3057 1
a3057 1
that some systems adhere to a foolish interpretation of the @@sc{posix}
a3075 1
@@cindex @@file{texinfo.tex}, in a distribution
a3084 54
@@node References
@@chapter References to Non-Free Software and Documentation
@@cindex references to non-free material

A GNU program should not recommend use of any non-free program.  We
can't stop some people from writing proprietary programs, or stop
other people from using them, but we can and should avoid helping to
advertise them to new potential customers.  Proprietary software is a
social and ethical problem, and the point of GNU is to solve that
problem.

When a non-free program or system is well known, you can mention it in
passing---that is harmless, since users who might want to use it
probably already know about it.  For instance, it is fine to explain
how to build your package on top of some non-free operating system, or
how to use it together with some widely used non-free program.

However, you should give only the necessary information to help those
who already use the non-free program to use your program with
it---don't give, or refer to, any further information about the
proprietary program, and don't imply that the proprietary program
enhances your program, or that its existence is in any way a good
thing.  The goal should be that people already using the proprietary
program will get the advice they need about how to use your free
program, while people who don't already use the proprietary program
will not see anything to lead them to take an interest in it.

If a non-free program or system is obscure in your program's domain,
your program should not mention or support it at all, since doing so
would tend to popularize the non-free program more than it popularizes
your program.  (You cannot hope to find many additional users among
the users of Foobar if the users of Foobar are few.)

A GNU package should not refer the user to any non-free documentation
for free software.  Free documentation that can be included in free
operating systems is essential for completing the GNU system, so it is
a major focus of the GNU Project; to recommend use of documentation
that we are not allowed to use in GNU would undermine the efforts to
get documentation that we can include.  So GNU packages should never
recommend non-free documentation.

@@node Copying This Manual
@@appendix Copying This Manual

@@menu
* GNU Free Documentation License::  License for copying this manual
@@end menu

@@include fdl.texi

@@node Index
@@unnumbered Index
@@printindex cp

d3088 6
a3093 7
@@c Local variables:
@@c eval: (add-hook 'write-file-hooks 'time-stamp)
@@c time-stamp-start: "@@set lastupdate "
@@c time-stamp-end: "$"
@@c time-stamp-format: "%:b %:d, %:y"
@@c compile-command: "make just-standards"
@@c End:
@


