head	1.1;
branch	1.1.1;
access;
symbols
	OPENBSD_6_2:1.1.1.5.0.54
	OPENBSD_6_2_BASE:1.1.1.5
	OPENBSD_6_1:1.1.1.5.0.52
	OPENBSD_6_1_BASE:1.1.1.5
	OPENBSD_6_0:1.1.1.5.0.48
	OPENBSD_6_0_BASE:1.1.1.5
	OPENBSD_5_9:1.1.1.5.0.44
	OPENBSD_5_9_BASE:1.1.1.5
	OPENBSD_5_8:1.1.1.5.0.46
	OPENBSD_5_8_BASE:1.1.1.5
	OPENBSD_5_7:1.1.1.5.0.38
	OPENBSD_5_7_BASE:1.1.1.5
	OPENBSD_5_6:1.1.1.5.0.42
	OPENBSD_5_6_BASE:1.1.1.5
	OPENBSD_5_5:1.1.1.5.0.40
	OPENBSD_5_5_BASE:1.1.1.5
	OPENBSD_5_4:1.1.1.5.0.36
	OPENBSD_5_4_BASE:1.1.1.5
	OPENBSD_5_3:1.1.1.5.0.34
	OPENBSD_5_3_BASE:1.1.1.5
	OPENBSD_5_2:1.1.1.5.0.32
	OPENBSD_5_2_BASE:1.1.1.5
	OPENBSD_5_1_BASE:1.1.1.5
	OPENBSD_5_1:1.1.1.5.0.30
	OPENBSD_5_0:1.1.1.5.0.28
	OPENBSD_5_0_BASE:1.1.1.5
	OPENBSD_4_9:1.1.1.5.0.26
	OPENBSD_4_9_BASE:1.1.1.5
	OPENBSD_4_8:1.1.1.5.0.24
	OPENBSD_4_8_BASE:1.1.1.5
	OPENBSD_4_7:1.1.1.5.0.20
	OPENBSD_4_7_BASE:1.1.1.5
	OPENBSD_4_6:1.1.1.5.0.22
	OPENBSD_4_6_BASE:1.1.1.5
	OPENBSD_4_5:1.1.1.5.0.18
	OPENBSD_4_5_BASE:1.1.1.5
	OPENBSD_4_4:1.1.1.5.0.16
	OPENBSD_4_4_BASE:1.1.1.5
	OPENBSD_4_3:1.1.1.5.0.14
	OPENBSD_4_3_BASE:1.1.1.5
	OPENBSD_4_2:1.1.1.5.0.12
	OPENBSD_4_2_BASE:1.1.1.5
	OPENBSD_4_1:1.1.1.5.0.10
	OPENBSD_4_1_BASE:1.1.1.5
	OPENBSD_4_0:1.1.1.5.0.8
	OPENBSD_4_0_BASE:1.1.1.5
	OPENBSD_3_9:1.1.1.5.0.6
	OPENBSD_3_9_BASE:1.1.1.5
	OPENBSD_3_8:1.1.1.5.0.4
	OPENBSD_3_8_BASE:1.1.1.5
	OPENBSD_3_7:1.1.1.5.0.2
	OPENBSD_3_7_BASE:1.1.1.5
	BINUTILS_2_15:1.1.1.5
	OPENBSD_3_6:1.1.1.4.0.2
	OPENBSD_3_6_BASE:1.1.1.4
	BINUTILS-2_14:1.1.1.4
	OPENBSD_3_5:1.1.1.3.0.8
	OPENBSD_3_5_BASE:1.1.1.3
	OPENBSD_3_4:1.1.1.3.0.6
	OPENBSD_3_4_BASE:1.1.1.3
	OPENBSD_3_3:1.1.1.3.0.4
	OPENBSD_3_3_BASE:1.1.1.3
	OPENBSD_3_2:1.1.1.3.0.2
	OPENBSD_3_2_BASE:1.1.1.3
	binutils-2_11_2:1.1.1.3
	OPENBSD_3_1:1.1.1.2.0.8
	OPENBSD_3_1_BASE:1.1.1.2
	OPENBSD_3_0:1.1.1.2.0.6
	OPENBSD_3_0_BASE:1.1.1.2
	BINUTILS-2_10_1:1.1.1.2
	OPENBSD_2_9:1.1.1.2.0.4
	OPENBSD_2_9_BASE:1.1.1.2
	OPENBSD_2_8:1.1.1.2.0.2
	OPENBSD_2_8_BASE:1.1.1.2
	BINUTILS-2_10:1.1.1.2
	FSF:1.1.1
	OPENBSD_2_7:1.1.1.1.0.14
	OPENBSD_2_7_BASE:1.1.1.1
	new-binutils:1.1.1.1.0.12
	OPENBSD_2_6:1.1.1.1.0.10
	OPENBSD_2_6_BASE:1.1.1.1
	OPENBSD_2_5:1.1.1.1.0.8
	OPENBSD_2_5_BASE:1.1.1.1
	OPENBSD_2_4:1.1.1.1.0.6
	OPENBSD_2_4_BASE:1.1.1.1
	OPENBSD_2_3:1.1.1.1.0.4
	OPENBSD_2_3_BASE:1.1.1.1
	OPENBSD_2_2:1.1.1.1.0.2
	OPENBSD_2_2_BASE:1.1.1.1
	BINUTILS-2_8_1:1.1.1.1
	CYGNUS:1.1.1;
locks; strict;
comment	@ * @;


1.1
date	97.05.29.09.27.54;	author niklas;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	97.05.29.09.27.54;	author niklas;	state Exp;
branches;
next	1.1.1.2;

1.1.1.2
date	2000.09.12.14.47.55;	author espie;	state Exp;
branches;
next	1.1.1.3;

1.1.1.3
date	2002.05.13.13.57.41;	author fgsch;	state Exp;
branches;
next	1.1.1.4;

1.1.1.4
date	2004.05.17.20.42.45;	author drahn;	state Exp;
branches;
next	1.1.1.5;

1.1.1.5
date	2004.11.02.20.23.12;	author miod;	state Exp;
branches;
next	;


desc
@@


1.1
log
@Initial revision
@
text
@/* Assembler interface for targets using CGEN. -*- C -*-
   CGEN: Cpu tools GENerator

This file is used to generate m32r-asm.c.

Copyright (C) 1996, 1997 Free Software Foundation, Inc.

This file is part of the GNU Binutils and GDB, the GNU debugger.

This program is free software; you can redistribute it and/or modify
it under the terms of the GNU General Public License as published by
the Free Software Foundation; either version 2, or (at your option)
any later version.

This program is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
GNU General Public License for more details.

You should have received a copy of the GNU General Public License
along with this program; if not, write to the Free Software
Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA 02111-1307, USA.  */

#include "sysdep.h"
#include <ctype.h>
#include <stdio.h>
#include "ansidecl.h"
#include "bfd.h"
#include "m32r-opc.h"

/* ??? The layout of this stuff is still work in progress.
   For speed in assembly/disassembly, we use inline functions.  That of course
   will only work for GCC.  When this stuff is finished, we can decide whether
   to keep the inline functions (and only get the performance increase when
   compiled with GCC), or switch to macros, or use something else.
*/

static const char *parse_insn_normal
     PARAMS ((const struct cgen_insn *, const char **, struct cgen_fields *));
static void insert_insn_normal
     PARAMS ((const struct cgen_insn *, struct cgen_fields *, cgen_insn_t *));

/* Default insertion routine.

   SHIFT is negative for left shifts, positive for right shifts.
   All bits of VALUE to be inserted must be valid as we don't handle
   signed vs unsigned shifts.

   ATTRS is a mask of the boolean attributes.  We don't need any at the
   moment, but for consistency with extract_normal we have them.  */

/* FIXME: This duplicates functionality with bfd's howto table and
   bfd_install_relocation.  */
/* FIXME: For architectures where insns can be representable as ints,
   store insn in `field' struct and add registers, etc. while parsing.  */

static CGEN_INLINE void
insert_normal (value, attrs, start, length, shift, total_length, buffer)
     long value;
     unsigned int attrs;
     int start, length, shift, total_length;
     char *buffer;
{
  bfd_vma x;

#if 0 /*def CGEN_INT_INSN*/
  *buffer |= ((value & ((1 << length) - 1))
	      << (total_length - (start + length)));
#else
  switch (total_length)
    {
    case 8:
      x = *(unsigned char *) buffer;
      break;
    case 16:
      if (CGEN_CURRENT_ENDIAN == CGEN_ENDIAN_BIG)
	x = bfd_getb16 (buffer);
      else
	x = bfd_getl16 (buffer);
      break;
    case 32:
      if (CGEN_CURRENT_ENDIAN == CGEN_ENDIAN_BIG)
	x = bfd_getb32 (buffer);
      else
	x = bfd_getl32 (buffer);
      break;
    default :
      abort ();
    }

  if (shift < 0)
    value <<= -shift;
  else
    value >>= shift;

  x |= ((value & ((1 << length) - 1))
	<< (total_length - (start + length)));

  switch (total_length)
    {
    case 8:
      *buffer = value;
      break;
    case 16:
      if (CGEN_CURRENT_ENDIAN == CGEN_ENDIAN_BIG)
	bfd_putb16 (x, buffer);
      else
	bfd_putl16 (x, buffer);
      break;
    case 32:
      if (CGEN_CURRENT_ENDIAN == CGEN_ENDIAN_BIG)
	bfd_putb32 (x, buffer);
      else
	bfd_putl32 (x, buffer);
      break;
    default :
      abort ();
    }
#endif
}

/* -- assembler routines inserted here */
/* -- asm.c */

/* Handle shigh(), high().  */

static const char *
parse_h_hi16 (strp, opindex, min, max, valuep)
     const char **strp;
     int opindex;
     unsigned long min, max;
     unsigned long *valuep;
{
  const char *errmsg;

  /* FIXME: Need # in assembler syntax (means '#' is optional).  */
  if (**strp == '#')
    ++*strp;

  if (strncmp (*strp, "high(", 5) == 0)
    {
      *strp += 5;
      /* FIXME: If value was a number, right shift by 16.  */
      errmsg = cgen_parse_address (strp, opindex, BFD_RELOC_M32R_HI16_ULO, valuep);
      if (**strp != ')')
	return "missing `)'";
      ++*strp;
      return errmsg;
    }
  else if (strncmp (*strp, "shigh(", 6) == 0)
    {
      *strp += 6;
      /* FIXME: If value was a number, right shift by 16 (+ sign test).  */
      errmsg = cgen_parse_address (strp, opindex, BFD_RELOC_M32R_HI16_SLO, valuep);
      if (**strp != ')')
	return "missing `)'";
      ++*strp;
      return errmsg;
    }

  return cgen_parse_unsigned_integer (strp, opindex, min, max, valuep);
}

/* Handle low() in a signed context.  Also handle sda().
   The signedness of the value doesn't matter to low(), but this also
   handles the case where low() isn't present.  */

static const char *
parse_h_slo16 (strp, opindex, min, max, valuep)
     const char **strp;
     int opindex;
     long min, max;
     long *valuep;
{
  const char *errmsg;

  /* FIXME: Need # in assembler syntax (means '#' is optional).  */
  if (**strp == '#')
    ++*strp;

  if (strncmp (*strp, "low(", 4) == 0)
    {
      *strp += 4;
      errmsg = cgen_parse_address (strp, opindex, BFD_RELOC_M32R_LO16, valuep);
      if (**strp != ')')
	return "missing `)'";
      ++*strp;
      return errmsg;
    }

  if (strncmp (*strp, "sda(", 4) == 0)
    {
      *strp += 4;
      errmsg = cgen_parse_address (strp, opindex, BFD_RELOC_M32R_SDA16, valuep);
      if (**strp != ')')
	return "missing `)'";
      ++*strp;
      return errmsg;
    }

  return cgen_parse_signed_integer (strp, opindex, min, max, valuep);
}

/* Handle low() in an unsigned context.
   The signedness of the value doesn't matter to low(), but this also
   handles the case where low() isn't present.  */

static const char *
parse_h_ulo16 (strp, opindex, min, max, valuep)
     const char **strp;
     int opindex;
     unsigned long min, max;
     unsigned long *valuep;
{
  const char *errmsg;

  /* FIXME: Need # in assembler syntax (means '#' is optional).  */
  if (**strp == '#')
    ++*strp;

  if (strncmp (*strp, "low(", 4) == 0)
    {
      *strp += 4;
      errmsg = cgen_parse_address (strp, opindex, BFD_RELOC_M32R_LO16, valuep);
      if (**strp != ')')
	return "missing `)'";
      ++*strp;
      return errmsg;
    }

  return cgen_parse_unsigned_integer (strp, opindex, min, max, valuep);
}

/* -- */

/* Main entry point for operand parsing.

   This function is basically just a big switch statement.  Earlier versions
   used tables to look up the function to use, but
   - if the table contains both assembler and disassembler functions then
     the disassembler contains much of the assembler and vice-versa,
   - there's a lot of inlining possibilities as things grow,
   - using a switch statement avoids the function call overhead.

   This function could be moved into `parse_insn_normal', but keeping it
   separate makes clear the interface between `parse_insn_normal' and each of
   the handlers.
*/

CGEN_INLINE const char *
m32r_cgen_parse_operand (opindex, strp, fields)
     int opindex;
     const char **strp;
     struct cgen_fields *fields;
{
  const char *errmsg;

  switch (opindex)
    {
    case 0 :
      errmsg = cgen_parse_keyword (strp, & m32r_cgen_opval_h_gr, &fields->f_r2);
      break;
    case 1 :
      errmsg = cgen_parse_keyword (strp, & m32r_cgen_opval_h_gr, &fields->f_r1);
      break;
    case 2 :
      errmsg = cgen_parse_keyword (strp, & m32r_cgen_opval_h_gr, &fields->f_r1);
      break;
    case 3 :
      errmsg = cgen_parse_keyword (strp, & m32r_cgen_opval_h_gr, &fields->f_r2);
      break;
    case 4 :
      errmsg = cgen_parse_keyword (strp, & m32r_cgen_opval_h_cr, &fields->f_r2);
      break;
    case 5 :
      errmsg = cgen_parse_keyword (strp, & m32r_cgen_opval_h_cr, &fields->f_r1);
      break;
    case 6 :
      errmsg = cgen_parse_signed_integer (strp, 6, -128, 127, &fields->f_simm8);
      break;
    case 7 :
      errmsg = cgen_parse_signed_integer (strp, 7, -32768, 32767, &fields->f_simm16);
      break;
    case 8 :
      errmsg = cgen_parse_unsigned_integer (strp, 8, 0, 15, &fields->f_uimm4);
      break;
    case 9 :
      errmsg = cgen_parse_unsigned_integer (strp, 9, 0, 31, &fields->f_uimm5);
      break;
    case 10 :
      errmsg = cgen_parse_unsigned_integer (strp, 10, 0, 65535, &fields->f_uimm16);
      break;
    case 11 :
      errmsg = parse_h_hi16 (strp, 11, 0, 65535, &fields->f_hi16);
      break;
    case 12 :
      errmsg = parse_h_slo16 (strp, 12, -32768, 32767, &fields->f_simm16);
      break;
    case 13 :
      errmsg = parse_h_ulo16 (strp, 13, 0, 65535, &fields->f_uimm16);
      break;
    case 14 :
      errmsg = cgen_parse_address (strp, 14, 0, &fields->f_uimm24);
      break;
    case 15 :
      errmsg = cgen_parse_address (strp, 15, 0, &fields->f_disp8);
      break;
    case 16 :
      errmsg = cgen_parse_address (strp, 16, 0, &fields->f_disp16);
      break;
    case 17 :
      errmsg = cgen_parse_address (strp, 17, 0, &fields->f_disp24);
      break;

    default :
      fprintf (stderr, "Unrecognized field %d while parsing.\n", opindex);
      abort ();
  }

  return errmsg;
}

/* Main entry point for operand insertion.

   This function is basically just a big switch statement.  Earlier versions
   used tables to look up the function to use, but
   - if the table contains both assembler and disassembler functions then
     the disassembler contains much of the assembler and vice-versa,
   - there's a lot of inlining possibilities as things grow,
   - using a switch statement avoids the function call overhead.

   This function could be moved into `parse_insn_normal', but keeping it
   separate makes clear the interface between `parse_insn_normal' and each of
   the handlers.  It's also needed by GAS to insert operands that couldn't be
   resolved during parsing.
*/

CGEN_INLINE void
m32r_cgen_insert_operand (opindex, fields, buffer)
     int opindex;
     struct cgen_fields *fields;
     cgen_insn_t *buffer;
{
  switch (opindex)
    {
    case 0 :
      insert_normal (fields->f_r2, 0|(1<<CGEN_OPERAND_UNSIGNED), 12, 4, 0, CGEN_FIELDS_BITSIZE (fields), buffer);
      break;
    case 1 :
      insert_normal (fields->f_r1, 0|(1<<CGEN_OPERAND_UNSIGNED), 4, 4, 0, CGEN_FIELDS_BITSIZE (fields), buffer);
      break;
    case 2 :
      insert_normal (fields->f_r1, 0|(1<<CGEN_OPERAND_UNSIGNED), 4, 4, 0, CGEN_FIELDS_BITSIZE (fields), buffer);
      break;
    case 3 :
      insert_normal (fields->f_r2, 0|(1<<CGEN_OPERAND_UNSIGNED), 12, 4, 0, CGEN_FIELDS_BITSIZE (fields), buffer);
      break;
    case 4 :
      insert_normal (fields->f_r2, 0|(1<<CGEN_OPERAND_UNSIGNED), 12, 4, 0, CGEN_FIELDS_BITSIZE (fields), buffer);
      break;
    case 5 :
      insert_normal (fields->f_r1, 0|(1<<CGEN_OPERAND_UNSIGNED), 4, 4, 0, CGEN_FIELDS_BITSIZE (fields), buffer);
      break;
    case 6 :
      insert_normal (fields->f_simm8, 0, 8, 8, 0, CGEN_FIELDS_BITSIZE (fields), buffer);
      break;
    case 7 :
      insert_normal (fields->f_simm16, 0, 16, 16, 0, CGEN_FIELDS_BITSIZE (fields), buffer);
      break;
    case 8 :
      insert_normal (fields->f_uimm4, 0|(1<<CGEN_OPERAND_UNSIGNED), 12, 4, 0, CGEN_FIELDS_BITSIZE (fields), buffer);
      break;
    case 9 :
      insert_normal (fields->f_uimm5, 0|(1<<CGEN_OPERAND_UNSIGNED), 11, 5, 0, CGEN_FIELDS_BITSIZE (fields), buffer);
      break;
    case 10 :
      insert_normal (fields->f_uimm16, 0|(1<<CGEN_OPERAND_UNSIGNED), 16, 16, 0, CGEN_FIELDS_BITSIZE (fields), buffer);
      break;
    case 11 :
      insert_normal (fields->f_hi16, 0|(1<<CGEN_OPERAND_SIGN_OPT)|(1<<CGEN_OPERAND_UNSIGNED), 16, 16, 0, CGEN_FIELDS_BITSIZE (fields), buffer);
      break;
    case 12 :
      insert_normal (fields->f_simm16, 0, 16, 16, 0, CGEN_FIELDS_BITSIZE (fields), buffer);
      break;
    case 13 :
      insert_normal (fields->f_uimm16, 0|(1<<CGEN_OPERAND_UNSIGNED), 16, 16, 0, CGEN_FIELDS_BITSIZE (fields), buffer);
      break;
    case 14 :
      insert_normal (fields->f_uimm24, 0|(1<<CGEN_OPERAND_RELOC)|(1<<CGEN_OPERAND_ABS_ADDR)|(1<<CGEN_OPERAND_UNSIGNED), 8, 24, 0, CGEN_FIELDS_BITSIZE (fields), buffer);
      break;
    case 15 :
      insert_normal (fields->f_disp8, 0|(1<<CGEN_OPERAND_RELAX)|(1<<CGEN_OPERAND_RELOC)|(1<<CGEN_OPERAND_PCREL_ADDR), 8, 8, 2, CGEN_FIELDS_BITSIZE (fields), buffer);
      break;
    case 16 :
      insert_normal (fields->f_disp16, 0|(1<<CGEN_OPERAND_RELOC)|(1<<CGEN_OPERAND_PCREL_ADDR), 16, 16, 2, CGEN_FIELDS_BITSIZE (fields), buffer);
      break;
    case 17 :
      insert_normal (fields->f_disp24, 0|(1<<CGEN_OPERAND_RELAX)|(1<<CGEN_OPERAND_RELOC)|(1<<CGEN_OPERAND_PCREL_ADDR), 8, 24, 2, CGEN_FIELDS_BITSIZE (fields), buffer);
      break;

    default :
      fprintf (stderr, "Unrecognized field %d while building insn.\n",
	       opindex);
      abort ();
  }
}

/* Main entry point for operand validation.

   This function is called from GAS when it has fully resolved an operand
   that couldn't be resolved during parsing.

   The result is NULL for success or an error message (which may be
   computed into a static buffer).
*/

CGEN_INLINE const char *
m32r_cgen_validate_operand (opindex, fields)
     int opindex;
     const struct cgen_fields *fields;
{
  const char *errmsg = NULL;

  switch (opindex)
    {
    case 0 :
      /* nothing to do */
      break;
    case 1 :
      /* nothing to do */
      break;
    case 2 :
      /* nothing to do */
      break;
    case 3 :
      /* nothing to do */
      break;
    case 4 :
      /* nothing to do */
      break;
    case 5 :
      /* nothing to do */
      break;
    case 6 :
      errmsg = cgen_validate_signed_integer (fields->f_simm8, -128, 127);
      break;
    case 7 :
      errmsg = cgen_validate_signed_integer (fields->f_simm16, -32768, 32767);
      break;
    case 8 :
      errmsg = cgen_validate_unsigned_integer (fields->f_uimm4, 0, 15);
      break;
    case 9 :
      errmsg = cgen_validate_unsigned_integer (fields->f_uimm5, 0, 31);
      break;
    case 10 :
      errmsg = cgen_validate_unsigned_integer (fields->f_uimm16, 0, 65535);
      break;
    case 11 :
      errmsg = cgen_validate_unsigned_integer (fields->f_hi16, 0, 65535);
      break;
    case 12 :
      errmsg = cgen_validate_signed_integer (fields->f_simm16, -32768, 32767);
      break;
    case 13 :
      errmsg = cgen_validate_unsigned_integer (fields->f_uimm16, 0, 65535);
      break;
    case 14 :
      /* nothing to do */
      break;
    case 15 :
      /* nothing to do */
      break;
    case 16 :
      /* nothing to do */
      break;
    case 17 :
      /* nothing to do */
      break;

    default :
      fprintf (stderr, "Unrecognized field %d while validating operand.\n",
	       opindex);
      abort ();
  }

  return errmsg;
}

cgen_parse_fn *m32r_cgen_parse_handlers[] = {
  0, /* default */
  parse_insn_normal,
};

cgen_insert_fn *m32r_cgen_insert_handlers[] = {
  0, /* default */
  insert_insn_normal,
};

void
m32r_cgen_init_asm (mach, endian)
     int mach;
     enum cgen_endian endian;
{
  m32r_cgen_init_tables (mach);
  cgen_set_cpu (& m32r_cgen_opcode_data, mach, endian);
  cgen_asm_init ();
}


/* Default insn parser.

   The syntax string is scanned and operands are parsed and stored in FIELDS.
   Relocs are queued as we go via other callbacks.

   ??? Note that this is currently an all-or-nothing parser.  If we fail to
   parse the instruction, we return 0 and the caller will start over from
   the beginning.  Backtracking will be necessary in parsing subexpressions,
   but that can be handled there.  Not handling backtracking here may get
   expensive in the case of the m68k.  Deal with later.

   Returns NULL for success, an error message for failure.
*/

static const char *
parse_insn_normal (insn, strp, fields)
     const struct cgen_insn *insn;
     const char **strp;
     struct cgen_fields *fields;
{
  const struct cgen_syntax *syntax = CGEN_INSN_SYNTAX (insn);
  const char *str = *strp;
  const char *errmsg;
  const unsigned char *syn;
#ifdef CGEN_MNEMONIC_OPERANDS
  int past_opcode_p;
#endif

  /* If mnemonics are constant, they're not stored with the syntax string.  */
#ifndef CGEN_MNEMONIC_OPERANDS
  {
    const char *p = syntax->mnemonic;

    while (*p && *p == *str)
      ++p, ++str;
    if (*p || (*str && !isspace (*str)))
      return "unrecognized instruction";

    while (isspace (*str))
      ++str;
  }
#endif

  CGEN_INIT_PARSE ();
  cgen_init_parse_operand ();
#ifdef CGEN_MNEMONIC_OPERANDS
  past_opcode_p = 0;
#endif

  /* We don't check for (*str != '\0') here because we want to parse
     any trailing fake arguments in the syntax string.  */
  for (syn = syntax->syntax; *syn != '\0'; )
    {
      /* Non operand chars must match exactly.  */
      /* FIXME: Need to better handle whitespace.  */
      if (CGEN_SYNTAX_CHAR_P (*syn))
	{
	  if (*str == CGEN_SYNTAX_CHAR (*syn))
	    {
#ifdef CGEN_MNEMONIC_OPERANDS
	      if (*syn == ' ')
		past_opcode_p = 1;
#endif
	      ++syn;
	      ++str;
	    }
	  else
	    {
	      /* Syntax char didn't match.  Can't be this insn.  */
	      /* FIXME: would like to return "expected char `c'" */
	      return "syntax error";
	    }
	  continue;
	}

      /* We have an operand of some sort.  */
      errmsg = m32r_cgen_parse_operand (CGEN_SYNTAX_FIELD (*syn),
					 &str, fields);
      if (errmsg)
	return errmsg;

      /* Done with this operand, continue with next one.  */
      ++syn;
    }

  /* If we're at the end of the syntax string, we're done.  */
  if (*syn == '\0')
    {
      /* FIXME: For the moment we assume a valid `str' can only contain
	 blanks now.  IE: We needn't try again with a longer version of
	 the insn and it is assumed that longer versions of insns appear
	 before shorter ones (eg: lsr r2,r3,1 vs lsr r2,r3).  */
      while (isspace (*str))
	++str;

      if (*str != '\0')
	return "junk at end of line"; /* FIXME: would like to include `str' */

      return NULL;
    }

  /* We couldn't parse it.  */
  return "unrecognized instruction";
}

/* Default insn builder (insert handler).
   The instruction is recorded in target byte order.  */

static void
insert_insn_normal (insn, fields, buffer)
     const struct cgen_insn *insn;
     struct cgen_fields *fields;
     cgen_insn_t *buffer;
{
  const struct cgen_syntax *syntax = CGEN_INSN_SYNTAX (insn);
  bfd_vma value;
  const unsigned char *syn;

  CGEN_INIT_INSERT ();
  value = syntax->value;

  /* If we're recording insns as numbers (rather than a string of bytes),
     target byte order handling is deferred until later.  */
#undef min
#define min(a,b) ((a) < (b) ? (a) : (b))
#if 0 /*def CGEN_INT_INSN*/
  *buffer = value;
#else
  switch (min (CGEN_BASE_INSN_BITSIZE, CGEN_FIELDS_BITSIZE (fields)))
    {
    case 8:
      *buffer = value;
      break;
    case 16:
      if (CGEN_CURRENT_ENDIAN == CGEN_ENDIAN_BIG)
	bfd_putb16 (value, (char *) buffer);
      else
	bfd_putl16 (value, (char *) buffer);
      break;
    case 32:
      if (CGEN_CURRENT_ENDIAN == CGEN_ENDIAN_BIG)
	bfd_putb32 (value, (char *) buffer);
      else
	bfd_putl32 (value, (char *) buffer);
      break;
    default:
      abort ();
    }
#endif

  /* ??? Rather than scanning the syntax string again, we could store
     in `fields' a null terminated list of the fields that are present.  */

  for (syn = syntax->syntax; *syn != '\0'; ++syn)
    {
      if (CGEN_SYNTAX_CHAR_P (*syn))
	continue;

      m32r_cgen_insert_operand (CGEN_SYNTAX_FIELD (*syn), fields, buffer);
    }
}

/* Main entry point.
   This routine is called for each instruction to be assembled.
   STR points to the insn to be assembled.
   We assume all necessary tables have been initialized.
   The result is a pointer to the insn's entry in the opcode table,
   or NULL if an error occured (an error message will have already been
   printed).  */

const struct cgen_insn *
m32r_cgen_assemble_insn (str, fields, buf, errmsg)
     const char *str;
     struct cgen_fields *fields;
     cgen_insn_t *buf;
     char **errmsg;
{
  const char *start;
  CGEN_INSN_LIST *ilist;

  /* Skip leading white space.  */
  while (isspace (*str))
    ++str;

  /* The instructions are stored in hashed lists.
     Get the first in the list.  */
  ilist = CGEN_ASM_LOOKUP_INSN (str);

  /* Keep looking until we find a match.  */

  start = str;
  for ( ; ilist != NULL ; ilist = CGEN_ASM_NEXT_INSN (ilist))
    {
      const struct cgen_insn *insn = ilist->insn;

#if 0 /* not needed as unsupported opcodes shouldn't be in the hash lists */
      /* Is this insn supported by the selected cpu?  */
      if (! m32r_cgen_insn_supported (insn))
	continue;
#endif

#if 1 /* FIXME: wip */
      /* If the RELAX attribute is set, this is an insn that shouldn't be
	 chosen immediately.  Instead, it is used during assembler/linker
	 relaxation if possible.  */
      if (CGEN_INSN_ATTR (insn, CGEN_INSN_RELAX) != 0)
	continue;
#endif

      str = start;

      /* Record a default length for the insn.  This will get set to the
	 correct value while parsing.  */
      /* FIXME: wip */
      CGEN_FIELDS_BITSIZE (fields) = CGEN_INSN_BITSIZE (insn);

      /* ??? The extent to which moving the parse and insert handlers into
         this function (thus removing the function call) will speed things up
	 is unclear.  The simplicity and flexibility of the current scheme is
	 appropriate for now.  One could have the best of both worlds with
	 inline functions but of course that would only work for gcc.  Since
	 we're machine generating some code we could do that here too.  Maybe
	 later.  */
      if (! (*CGEN_PARSE_FN (insn)) (insn, &str, fields))
	{
	  (*CGEN_INSERT_FN (insn)) (insn, fields, buf);
	  /* It is up to the caller to actually output the insn and any
	     queued relocs.  */
	  return insn;
	}

      /* Try the next entry.  */
    }

  /* FIXME: We can return a better error message than this.
     Need to track why it failed and pick the right one.  */
  {
    static char errbuf[100];
    sprintf (errbuf, "bad instruction `%.50s%s'",
	     start, strlen (start) > 50 ? "..." : "");
    *errmsg = errbuf;
    return NULL;
  }
}

#if 0 /* This calls back to GAS which we can't do without care.  */

/* Record each member of OPVALS in the assembler's symbol table.
   This lets GAS parse registers for us.
   ??? Interesting idea but not currently used.  */

void
m32r_cgen_asm_hash_keywords (opvals)
     struct cgen_keyword *opvals;
{
  struct cgen_keyword_search search = cgen_keyword_search_init (opvals, NULL);
  const struct cgen_keyword_entry *ke;

  while ((ke = cgen_keyword_search_next (&search)) != NULL)
    {
#if 0 /* Unnecessary, should be done in the search routine.  */
      if (! m32r_cgen_opval_supported (ke))
	continue;
#endif
      cgen_asm_record_register (ke->name, ke->value);
    }
}

#endif /* 0 */
@


1.1.1.1
log
@Import of binutils-2.8.1 from Cygnus/FSF
@
text
@@


1.1.1.2
log
@Import binutils-2.10
- only the binutils package (no gdb here)
- don't import libiberty and texinfo, they are elsewhere
- remove all .info* generated files
@
text
@d4 1
a4 2
THIS FILE IS MACHINE GENERATED WITH CGEN.
- the resultant file is machine generated, cgen-asm.in isn't
d6 1
a6 1
Copyright (C) 1996, 1997, 1998, 1999 Free Software Foundation, Inc.
d21 2
a22 5
along with this program; if not, write to the Free Software Foundation, Inc.,
59 Temple Place - Suite 330, Boston, MA 02111-1307, USA.  */

/* ??? Eventually more and more of this stuff can go to cpu-independent files.
   Keep that in mind.  */
a28 2
#include "symcat.h"
#include "m32r-desc.h"
a29 1
#include "opintl.h"
d31 6
a36 4
#undef min
#define min(a,b) ((a) < (b) ? (a) : (b))
#undef max
#define max(a,b) ((a) > (b) ? (a) : (b))
d38 4
a41 2
static const char * parse_insn_normal
     PARAMS ((CGEN_CPU_DESC, const CGEN_INSN *, const char **, CGEN_FIELDS *));
d43 47
a89 1
/* -- assembler routines inserted here */
d91 4
a94 1
/* -- asm.c */
d96 2
a97 1
/* Handle '#' prefixes (i.e. skip over them).  */
d99 21
a119 10
static const char *
parse_hash (cd, strp, opindex, valuep)
     CGEN_CPU_DESC cd;
     const char **strp;
     int opindex;
     unsigned long *valuep;
{
  if (**strp == '#')
    ++*strp;
  return NULL;
d121 3
d128 1
a128 2
parse_hi16 (cd, strp, opindex, valuep)
     CGEN_CPU_DESC cd;
d131 1
a134 2
  enum cgen_parse_operand_result result_type;
  bfd_vma value;
d136 1
d140 1
a140 1
  if (strncasecmp (*strp, "high(", 5) == 0)
d143 2
a144 2
      errmsg = cgen_parse_address (cd, strp, opindex, BFD_RELOC_M32R_HI16_ULO,
				   &result_type, &value);
a147 4
      if (errmsg == NULL
  	  && result_type == CGEN_PARSE_OPERAND_RESULT_NUMBER)
	value >>= 16;
      *valuep = value;
d150 1
a150 1
  else if (strncasecmp (*strp, "shigh(", 6) == 0)
d153 2
a154 2
      errmsg = cgen_parse_address (cd, strp, opindex, BFD_RELOC_M32R_HI16_SLO,
 				   &result_type, &value);
a157 4
      if (errmsg == NULL
	  && result_type == CGEN_PARSE_OPERAND_RESULT_NUMBER)
	value = (value >> 16) + (value & 0x8000 ? 1 : 0);
      *valuep = value;
d161 1
a161 1
  return cgen_parse_unsigned_integer (cd, strp, opindex, valuep);
d169 1
a169 2
parse_slo16 (cd, strp, opindex, valuep)
     CGEN_CPU_DESC cd;
d172 1
a175 2
  enum cgen_parse_operand_result result_type;
  bfd_vma value;
d177 1
d181 1
a181 1
  if (strncasecmp (*strp, "low(", 4) == 0)
d184 1
a184 2
      errmsg = cgen_parse_address (cd, strp, opindex, BFD_RELOC_M32R_LO16,
				   &result_type, &value);
a187 4
      if (errmsg == NULL
	  && result_type == CGEN_PARSE_OPERAND_RESULT_NUMBER)
	value &= 0xffff;
      *valuep = value;
d191 1
a191 1
  if (strncasecmp (*strp, "sda(", 4) == 0)
d194 1
a194 2
      errmsg = cgen_parse_address (cd, strp, opindex, BFD_RELOC_M32R_SDA16,
				   NULL, &value);
a197 1
      *valuep = value;
d201 1
a201 1
  return cgen_parse_signed_integer (cd, strp, opindex, valuep);
d209 1
a209 2
parse_ulo16 (cd, strp, opindex, valuep)
     CGEN_CPU_DESC cd;
d212 1
a215 2
  enum cgen_parse_operand_result result_type;
  bfd_vma value;
d217 1
d221 1
a221 1
  if (strncasecmp (*strp, "low(", 4) == 0)
d224 1
a224 2
      errmsg = cgen_parse_address (cd, strp, opindex, BFD_RELOC_M32R_LO16,
				   &result_type, &value);
a227 4
      if (errmsg == NULL
	  && result_type == CGEN_PARSE_OPERAND_RESULT_NUMBER)
	value &= 0xffff;
      *valuep = value;
d231 1
a231 1
  return cgen_parse_unsigned_integer (cd, strp, opindex, valuep);
d250 2
a251 3
const char *
m32r_cgen_parse_operand (cd, opindex, strp, fields)
     CGEN_CPU_DESC cd;
d253 2
a254 2
     const char ** strp;
     CGEN_FIELDS * fields;
d256 1
a256 3
  const char * errmsg = NULL;
  /* Used by scalar operands that still need to be parsed.  */
  long junk;
d260 29
a288 2
    case M32R_OPERAND_ACC :
      errmsg = cgen_parse_keyword (cd, strp, & m32r_cgen_opval_h_accums, & fields->f_acc);
d290 2
a291 2
    case M32R_OPERAND_ACCD :
      errmsg = cgen_parse_keyword (cd, strp, & m32r_cgen_opval_h_accums, & fields->f_accd);
d293 2
a294 2
    case M32R_OPERAND_ACCS :
      errmsg = cgen_parse_keyword (cd, strp, & m32r_cgen_opval_h_accums, & fields->f_accs);
d296 2
a297 2
    case M32R_OPERAND_DCR :
      errmsg = cgen_parse_keyword (cd, strp, & m32r_cgen_opval_cr_names, & fields->f_r1);
d299 2
a300 6
    case M32R_OPERAND_DISP16 :
      {
        bfd_vma value;
        errmsg = cgen_parse_address (cd, strp, M32R_OPERAND_DISP16, 0, NULL,  & value);
        fields->f_disp16 = value;
      }
d302 2
a303 6
    case M32R_OPERAND_DISP24 :
      {
        bfd_vma value;
        errmsg = cgen_parse_address (cd, strp, M32R_OPERAND_DISP24, 0, NULL,  & value);
        fields->f_disp24 = value;
      }
d305 43
a347 6
    case M32R_OPERAND_DISP8 :
      {
        bfd_vma value;
        errmsg = cgen_parse_address (cd, strp, M32R_OPERAND_DISP8, 0, NULL,  & value);
        fields->f_disp8 = value;
      }
d349 2
a350 2
    case M32R_OPERAND_DR :
      errmsg = cgen_parse_keyword (cd, strp, & m32r_cgen_opval_gr_names, & fields->f_r1);
d352 2
a353 2
    case M32R_OPERAND_HASH :
      errmsg = parse_hash (cd, strp, M32R_OPERAND_HASH, &junk);
d355 2
a356 2
    case M32R_OPERAND_HI16 :
      errmsg = parse_hi16 (cd, strp, M32R_OPERAND_HI16, &fields->f_hi16);
d358 2
a359 2
    case M32R_OPERAND_IMM1 :
      errmsg = cgen_parse_unsigned_integer (cd, strp, M32R_OPERAND_IMM1, &fields->f_imm1);
d361 2
a362 2
    case M32R_OPERAND_SCR :
      errmsg = cgen_parse_keyword (cd, strp, & m32r_cgen_opval_cr_names, & fields->f_r2);
d364 2
a365 2
    case M32R_OPERAND_SIMM16 :
      errmsg = cgen_parse_signed_integer (cd, strp, M32R_OPERAND_SIMM16, &fields->f_simm16);
d367 2
a368 2
    case M32R_OPERAND_SIMM8 :
      errmsg = cgen_parse_signed_integer (cd, strp, M32R_OPERAND_SIMM8, &fields->f_simm8);
d370 2
a371 2
    case M32R_OPERAND_SLO16 :
      errmsg = parse_slo16 (cd, strp, M32R_OPERAND_SLO16, &fields->f_simm16);
d373 2
a374 2
    case M32R_OPERAND_SR :
      errmsg = cgen_parse_keyword (cd, strp, & m32r_cgen_opval_gr_names, & fields->f_r2);
d376 2
a377 2
    case M32R_OPERAND_SRC1 :
      errmsg = cgen_parse_keyword (cd, strp, & m32r_cgen_opval_gr_names, & fields->f_r1);
d379 2
a380 2
    case M32R_OPERAND_SRC2 :
      errmsg = cgen_parse_keyword (cd, strp, & m32r_cgen_opval_gr_names, & fields->f_r2);
d382 2
a383 2
    case M32R_OPERAND_UIMM16 :
      errmsg = cgen_parse_unsigned_integer (cd, strp, M32R_OPERAND_UIMM16, &fields->f_uimm16);
d385 2
a386 6
    case M32R_OPERAND_UIMM24 :
      {
        bfd_vma value;
        errmsg = cgen_parse_address (cd, strp, M32R_OPERAND_UIMM24, 0, NULL,  & value);
        fields->f_uimm24 = value;
      }
d388 2
a389 2
    case M32R_OPERAND_UIMM4 :
      errmsg = cgen_parse_unsigned_integer (cd, strp, M32R_OPERAND_UIMM4, &fields->f_uimm4);
d391 2
a392 2
    case M32R_OPERAND_UIMM5 :
      errmsg = cgen_parse_unsigned_integer (cd, strp, M32R_OPERAND_UIMM5, &fields->f_uimm5);
d394 5
a398 2
    case M32R_OPERAND_ULO16 :
      errmsg = parse_ulo16 (cd, strp, M32R_OPERAND_ULO16, &fields->f_uimm16);
d402 82
a483 2
      /* xgettext:c-format */
      fprintf (stderr, _("Unrecognized field %d while parsing.\n"), opindex);
d490 2
a491 2
cgen_parse_fn * const m32r_cgen_parse_handlers[] = 
{
d495 5
d501 3
a503 2
m32r_cgen_init_asm (cd)
     CGEN_CPU_DESC cd;
d505 3
a507 4
  m32r_cgen_init_opcode_table (cd);
  m32r_cgen_init_ibld_table (cd);
  cd->parse_handlers = & m32r_cgen_parse_handlers[0];
  cd->parse_operand = m32r_cgen_parse_operand;
d526 2
a527 3
parse_insn_normal (cd, insn, strp, fields)
     CGEN_CPU_DESC cd;
     const CGEN_INSN *insn;
d529 1
a529 1
     CGEN_FIELDS *fields;
d531 1
a531 2
  /* ??? Runtime added insns not handled yet.  */
  const CGEN_SYNTAX *syntax = CGEN_INSN_SYNTAX (insn);
d534 1
a534 2
  const char *p;
  const unsigned char * syn;
a535 1
  /* FIXME: wip */
d539 4
a542 7
  /* For now we assume the mnemonic is first (there are no leading operands).
     We can parse it without needing to set up operand parsing.
     GAS's input scrubber will ensure mnemonics are lowercase, but we may
     not be called from GAS.  */
  p = CGEN_INSN_MNEMONIC (insn);
  while (*p && tolower (*p) == tolower (*str))
    ++p, ++str;
d544 4
a547 2
  if (* p)
    return _("unrecognized instruction");
d549 3
a551 3
#ifndef CGEN_MNEMONIC_OPERANDS
  if (* str && !isspace (* str))
    return _("unrecognized instruction");
d554 2
a555 2
  CGEN_INIT_PARSE (cd);
  cgen_init_parse_operand (cd);
d562 1
a562 9
  syn = CGEN_SYNTAX_STRING (syntax);

  /* Mnemonics come first for now, ensure valid string.  */
  if (! CGEN_SYNTAX_MNEMONIC_P (* syn))
    abort ();

  ++syn;

  while (* syn != 0)
d565 2
a566 1
      if (CGEN_SYNTAX_CHAR_P (* syn))
d568 1
a568 5
	  /* FIXME: While we allow for non-GAS callers above, we assume the
	     first char after the mnemonic part is a space.  */
	  /* FIXME: We also take inappropriate advantage of the fact that
	     GAS's input scrubber will remove extraneous blanks.  */
	  if (*str == CGEN_SYNTAX_CHAR (* syn))
d571 1
a571 1
	      if (* syn == ' ')
d574 2
a575 2
	      ++ syn;
	      ++ str;
d580 2
a581 3
	      /* FIXME: would like to return something like
		 "expected char `c'" */
	      return _("syntax error");
d587 2
a588 2
      errmsg = m32r_cgen_parse_operand (cd, CGEN_SYNTAX_FIELD (*syn),
					  &str, fields);
d593 1
a593 1
      ++ syn;
d597 1
a597 1
  if (* syn == '\0')
d603 2
a604 2
      while (isspace (* str))
	++ str;
d606 2
a607 2
      if (* str != '\0')
	return _("junk at end of line"); /* FIXME: would like to include `str' */
d613 58
a670 1
  return _("unrecognized instruction");
a676 4
   The assembled instruction, less any fixups, is stored in BUF.
   Remember that if CGEN_INT_INSN_P then BUF is an int and thus the value
   still needs to be converted to target byte order, otherwise BUF is an array
   of bytes in target byte order.
d679 1
a679 4
   printed).

   Note that when processing (non-alias) macro-insns,
   this function recurses.
d681 2
a682 9
   ??? It's possible to make this cpu-independent.
   One would have to deal with a few minor things.
   At this point in time doing so would be more of a curiosity than useful
   [for example this file isn't _that_ big], but keeping the possibility in
   mind helps keep the design clean.  */

const CGEN_INSN *
m32r_cgen_assemble_insn (cd, str, fields, buf, errmsg)
     CGEN_CPU_DESC cd;
d684 2
a685 2
     CGEN_FIELDS *fields;
     CGEN_INSN_BYTES_PTR buf;
a689 1
  const char *tmp_errmsg;
d692 2
a693 2
  while (isspace (* str))
    ++ str;
d697 1
a697 1
  ilist = CGEN_ASM_LOOKUP_INSN (cd, str);
d704 1
a704 1
      const CGEN_INSN *insn = ilist->insn;
d706 1
a706 2
#ifdef CGEN_VALIDATE_INSN_SUPPORTED 
      /* not usually needed as unsupported opcodes shouldn't be in the hash lists */
d708 1
a708 1
      if (! m32r_cgen_insn_supported (cd, insn))
d712 1
d716 1
a716 1
      if (CGEN_INSN_ATTR_VALUE (insn, CGEN_INSN_RELAX) != 0)
d718 1
d722 3
a724 1
      /* Allow parse/insert handlers to obtain length of insn.  */
d727 8
a734 1
      if (!(tmp_errmsg = CGEN_PARSE_FN (cd, insn) (cd, insn, & str, fields)))
d736 1
a736 4
	  /* ??? 0 is passed for `pc' */
	  if (CGEN_INSERT_FN (cd, insn) (cd, insn, fields, buf, (bfd_vma) 0)
	      != NULL)
	    continue;
d745 2
d748 3
a750 19
    static char errbuf[150];

#ifdef CGEN_VERBOSE_ASSEMBLER_ERRORS
    /* if verbose error messages, use errmsg from CGEN_PARSE_FN */
    if (strlen (start) > 50)
      /* xgettext:c-format */
      sprintf (errbuf, "%s `%.50s...'", tmp_errmsg, start);
    else 
      /* xgettext:c-format */
      sprintf (errbuf, "%s `%.50s'", tmp_errmsg, start);
#else
    if (strlen (start) > 50)
      /* xgettext:c-format */
      sprintf (errbuf, _("bad instruction `%.50s...'"), start);
    else 
      /* xgettext:c-format */
      sprintf (errbuf, _("bad instruction `%.50s'"), start);
#endif
      
a761 3
/* Record each member of OPVALS in the assembler's symbol table.
   FIXME: Not currently used.  */

d763 2
a764 3
m32r_cgen_asm_hash_keywords (cd, opvals)
     CGEN_CPU_DESC cd;
     CGEN_KEYWORD *opvals;
d766 2
a767 2
  CGEN_KEYWORD_SEARCH search = cgen_keyword_search_init (opvals, NULL);
  const CGEN_KEYWORD_ENTRY * ke;
d769 1
a769 1
  while ((ke = cgen_keyword_search_next (& search)) != NULL)
d775 1
a775 1
      cgen_asm_record_register (cd, ke->name, ke->value);
@


1.1.1.3
log
@Import binutils-2.11.2
- only the binutils package (no gdb here)
- don't import libiberty and texinfo, they are elsewhere
- remove all .info* generated files
@
text
@d7 1
a7 1
Copyright 1996, 1997, 1998, 1999, 2000, 2001 Free Software Foundation, Inc.
d409 1
a409 1
	  if (tolower (*str) == tolower (CGEN_SYNTAX_CHAR (* syn)))
d421 3
a423 5
	      static char msg [80];
	      /* xgettext:c-format */
	      sprintf (msg, _("syntax error (expected char `%c', found `%c')"),
		       *syn, *str);
	      return msg;
d489 1
a489 1
  const char *tmp_errmsg = NULL;
d524 10
a533 3
      tmp_errmsg = CGEN_PARSE_FN (cd, insn) (cd, insn, & str, fields);
      if (tmp_errmsg != NULL)
	continue;
d535 1
a535 9
      /* ??? 0 is passed for `pc' */
      tmp_errmsg = CGEN_INSERT_FN (cd, insn) (cd, insn, fields, buf,
					      (bfd_vma) 0);
      if (tmp_errmsg != NULL)
        continue;

      /* It is up to the caller to actually output the insn and any
         queued relocs.  */
      return insn;
a536 4

  /* Make sure we leave this with something at this point. */
  if (tmp_errmsg == NULL)
    tmp_errmsg = "unknown mnemonic";
@


1.1.1.4
log
@import binutils 2.14 (excluding testsuites, .info files, and .po files)
@
text
@d29 1
a36 3
#include "xregex.h"
#include "libiberty.h"
#include "safe-ctype.h"
d38 1
a38 1
#undef  min
d40 1
a40 1
#undef  max
d46 1
a46 1
/* -- assembler routines inserted here.  */
a48 8
static const char * parse_hash
  PARAMS ((CGEN_CPU_DESC, const char **, int, unsigned long *));
static const char * parse_hi16
  PARAMS ((CGEN_CPU_DESC, const char **, int, unsigned long *));
static const char * parse_slo16
  PARAMS ((CGEN_CPU_DESC, const char **, int, long *));
static const char * parse_ulo16
  PARAMS ((CGEN_CPU_DESC, const char **, int, unsigned long *));
d54 1
a54 1
     CGEN_CPU_DESC cd ATTRIBUTE_UNUSED;
d56 2
a57 2
     int opindex ATTRIBUTE_UNUSED;
     unsigned long *valuep ATTRIBUTE_UNUSED;
a197 3
const char * m32r_cgen_parse_operand
  PARAMS ((CGEN_CPU_DESC, int, const char **, CGEN_FIELDS *));

d209 2
a210 1
   the handlers.  */
d221 1
a221 1
  long junk ATTRIBUTE_UNUSED;
a335 123

/* Regex construction routine.

   This translates an opcode syntax string into a regex string,
   by replacing any non-character syntax element (such as an
   opcode) with the pattern '.*'

   It then compiles the regex and stores it in the opcode, for
   later use by m32r_cgen_assemble_insn

   Returns NULL for success, an error message for failure.  */

char * 
m32r_cgen_build_insn_regex (insn)
     CGEN_INSN *insn;
{  
  CGEN_OPCODE *opc = (CGEN_OPCODE *) CGEN_INSN_OPCODE (insn);
  const char *mnem = CGEN_INSN_MNEMONIC (insn);
  char rxbuf[CGEN_MAX_RX_ELEMENTS];
  char *rx = rxbuf;
  const CGEN_SYNTAX_CHAR_TYPE *syn;
  int reg_err;

  syn = CGEN_SYNTAX_STRING (CGEN_OPCODE_SYNTAX (opc));

  /* Mnemonics come first in the syntax string.  */
  if (! CGEN_SYNTAX_MNEMONIC_P (* syn))
    return _("missing mnemonic in syntax string");
  ++syn;

  /* Generate a case sensitive regular expression that emulates case
     insensitive matching in the "C" locale.  We cannot generate a case
     insensitive regular expression because in Turkish locales, 'i' and 'I'
     are not equal modulo case conversion.  */

  /* Copy the literal mnemonic out of the insn.  */
  for (; *mnem; mnem++)
    {
      char c = *mnem;

      if (ISALPHA (c))
	{
	  *rx++ = '[';
	  *rx++ = TOLOWER (c);
	  *rx++ = TOUPPER (c);
	  *rx++ = ']';
	}
      else
	*rx++ = c;
    }

  /* Copy any remaining literals from the syntax string into the rx.  */
  for(; * syn != 0 && rx <= rxbuf + (CGEN_MAX_RX_ELEMENTS - 7 - 4); ++syn)
    {
      if (CGEN_SYNTAX_CHAR_P (* syn)) 
	{
	  char c = CGEN_SYNTAX_CHAR (* syn);

	  switch (c) 
	    {
	      /* Escape any regex metacharacters in the syntax.  */
	    case '.': case '[': case '\\': 
	    case '*': case '^': case '$': 

#ifdef CGEN_ESCAPE_EXTENDED_REGEX
	    case '?': case '{': case '}': 
	    case '(': case ')': case '*':
	    case '|': case '+': case ']':
#endif
	      *rx++ = '\\';
	      *rx++ = c;
	      break;

	    default:
	      if (ISALPHA (c))
		{
		  *rx++ = '[';
		  *rx++ = TOLOWER (c);
		  *rx++ = TOUPPER (c);
		  *rx++ = ']';
		}
	      else
		*rx++ = c;
	      break;
	    }
	}
      else
	{
	  /* Replace non-syntax fields with globs.  */
	  *rx++ = '.';
	  *rx++ = '*';
	}
    }

  /* Trailing whitespace ok.  */
  * rx++ = '['; 
  * rx++ = ' '; 
  * rx++ = '\t'; 
  * rx++ = ']'; 
  * rx++ = '*'; 

  /* But anchor it after that.  */
  * rx++ = '$'; 
  * rx = '\0';

  CGEN_INSN_RX (insn) = xmalloc (sizeof (regex_t));
  reg_err = regcomp ((regex_t *) CGEN_INSN_RX (insn), rxbuf, REG_NOSUB);

  if (reg_err == 0) 
    return NULL;
  else
    {
      static char msg[80];

      regerror (reg_err, (regex_t *) CGEN_INSN_RX (insn), msg, 80);
      regfree ((regex_t *) CGEN_INSN_RX (insn));
      free (CGEN_INSN_RX (insn));
      (CGEN_INSN_RX (insn)) = NULL;
      return msg;
    }
}


d347 2
a348 1
   Returns NULL for success, an error message for failure.  */
d362 1
a362 1
  const CGEN_SYNTAX_CHAR_TYPE * syn;
d373 1
a373 1
  while (*p && TOLOWER (*p) == TOLOWER (*str))
d380 1
a380 1
  if (* str && ! ISSPACE (* str))
d409 1
a409 1
	  if (TOLOWER (*str) == TOLOWER (CGEN_SYNTAX_CHAR (* syn)))
d412 1
a412 1
	      if (CGEN_SYNTAX_CHAR(* syn) == ' ')
d418 1
a418 1
	  else if (*str)
a421 1

d424 1
a424 11
		       CGEN_SYNTAX_CHAR(*syn), *str);
	      return msg;
	    }
	  else
	    {
	      /* Ran out of input.  */
	      static char msg [80];

	      /* xgettext:c-format */
	      sprintf (msg, _("syntax error (expected char `%c', found end of instruction)"),
		       CGEN_SYNTAX_CHAR(*syn));
d431 1
a431 1
      errmsg = cd->parse_operand (cd, CGEN_SYNTAX_FIELD (*syn),
d441 1
a441 1
  if (* syn == 0)
d447 1
a447 1
      while (ISSPACE (* str))
d491 1
a491 3
  const char *parse_errmsg = NULL;
  const char *insert_errmsg = NULL;
  int recognized_mnemonic = 0;
d494 1
a494 1
  while (ISSPACE (* str))
d502 1
a506 1
      recognized_mnemonic = 1;
d509 1
a509 2
      /* Not usually needed as unsupported opcodes
	 shouldn't be in the hash lists.  */
d514 1
a522 5
      /* Skip this insn if str doesn't look right lexically.  */
      if (CGEN_INSN_RX (insn) != NULL &&
	  regexec ((regex_t *) CGEN_INSN_RX (insn), str, 0, NULL, 0) == REG_NOMATCH)
	continue;

d526 2
a527 2
      parse_errmsg = CGEN_PARSE_FN (cd, insn) (cd, insn, & str, fields);
      if (parse_errmsg != NULL)
d530 4
a533 4
      /* ??? 0 is passed for `pc'.  */
      insert_errmsg = CGEN_INSERT_FN (cd, insn) (cd, insn, fields, buf,
						 (bfd_vma) 0);
      if (insert_errmsg != NULL)
d541 4
d547 1
d549 1
a549 10
    const char *tmp_errmsg;

    /* If requesting verbose error messages, use insert_errmsg.
       Failing that, use parse_errmsg.  */
    tmp_errmsg = (insert_errmsg ? insert_errmsg :
		  parse_errmsg ? parse_errmsg :
		  recognized_mnemonic ?
		  _("unrecognized form of instruction") :
		  _("unrecognized instruction"));

@


1.1.1.5
log
@Binutils 2.15, with testsuites removed, and without gdb and libiberty.
@
text
@d7 1
a7 1
Copyright 1996, 1997, 1998, 1999, 2000, 2001, 2004 Free Software Foundation, Inc.
d46 1
a46 1
  (CGEN_CPU_DESC, const CGEN_INSN *, const char **, CGEN_FIELDS *);
d114 1
a114 4
        {
          value = value + (value & 0x8000 ? 0x10000 : 0);
          value >>= 16;
        }
d150 1
a150 5
        {
	  value &= 0xffff;
          if (value & 0x8000)
             value |= 0xffff0000;
        }
a312 3
    case M32R_OPERAND_UIMM3 :
      errmsg = cgen_parse_unsigned_integer (cd, strp, M32R_OPERAND_UIMM3, &fields->f_uimm3);
      break;
a318 3
    case M32R_OPERAND_UIMM8 :
      errmsg = cgen_parse_unsigned_integer (cd, strp, M32R_OPERAND_UIMM8, &fields->f_uimm8);
      break;
d361 2
a362 1
m32r_cgen_build_insn_regex (CGEN_INSN *insn)
d485 5
a489 4
parse_insn_normal (CGEN_CPU_DESC cd,
		   const CGEN_INSN *insn,
		   const char **strp,
		   CGEN_FIELDS *fields)
d627 6
a632 5
m32r_cgen_assemble_insn (CGEN_CPU_DESC cd,
			   const char *str,
			   CGEN_FIELDS *fields,
			   CGEN_INSN_BYTES_PTR buf,
			   char **errmsg)
d662 1
a662 1
      /* If the RELAXED attribute is set, this is an insn that shouldn't be
d665 1
a665 1
      if (CGEN_INSN_ATTR_VALUE (insn, CGEN_INSN_RELAXED) != 0)
d736 3
a738 1
m32r_cgen_asm_hash_keywords (CGEN_CPU_DESC cd, CGEN_KEYWORD *opvals)
@


