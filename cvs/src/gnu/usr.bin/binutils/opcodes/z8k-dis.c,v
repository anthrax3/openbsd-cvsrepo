head	1.5;
access;
symbols
	OPENBSD_6_1:1.5.0.52
	OPENBSD_6_1_BASE:1.5
	OPENBSD_6_0:1.5.0.48
	OPENBSD_6_0_BASE:1.5
	OPENBSD_5_9:1.5.0.44
	OPENBSD_5_9_BASE:1.5
	OPENBSD_5_8:1.5.0.46
	OPENBSD_5_8_BASE:1.5
	OPENBSD_5_7:1.5.0.38
	OPENBSD_5_7_BASE:1.5
	OPENBSD_5_6:1.5.0.42
	OPENBSD_5_6_BASE:1.5
	OPENBSD_5_5:1.5.0.40
	OPENBSD_5_5_BASE:1.5
	OPENBSD_5_4:1.5.0.36
	OPENBSD_5_4_BASE:1.5
	OPENBSD_5_3:1.5.0.34
	OPENBSD_5_3_BASE:1.5
	OPENBSD_5_2:1.5.0.32
	OPENBSD_5_2_BASE:1.5
	OPENBSD_5_1_BASE:1.5
	OPENBSD_5_1:1.5.0.30
	OPENBSD_5_0:1.5.0.28
	OPENBSD_5_0_BASE:1.5
	OPENBSD_4_9:1.5.0.26
	OPENBSD_4_9_BASE:1.5
	OPENBSD_4_8:1.5.0.24
	OPENBSD_4_8_BASE:1.5
	OPENBSD_4_7:1.5.0.20
	OPENBSD_4_7_BASE:1.5
	OPENBSD_4_6:1.5.0.22
	OPENBSD_4_6_BASE:1.5
	OPENBSD_4_5:1.5.0.18
	OPENBSD_4_5_BASE:1.5
	OPENBSD_4_4:1.5.0.16
	OPENBSD_4_4_BASE:1.5
	OPENBSD_4_3:1.5.0.14
	OPENBSD_4_3_BASE:1.5
	OPENBSD_4_2:1.5.0.12
	OPENBSD_4_2_BASE:1.5
	OPENBSD_4_1:1.5.0.10
	OPENBSD_4_1_BASE:1.5
	OPENBSD_4_0:1.5.0.8
	OPENBSD_4_0_BASE:1.5
	OPENBSD_3_9:1.5.0.6
	OPENBSD_3_9_BASE:1.5
	OPENBSD_3_8:1.5.0.4
	OPENBSD_3_8_BASE:1.5
	OPENBSD_3_7:1.5.0.2
	OPENBSD_3_7_BASE:1.5
	BINUTILS_2_15:1.1.1.5
	OPENBSD_3_6:1.4.0.2
	OPENBSD_3_6_BASE:1.4
	BINUTILS-2_14:1.1.1.4
	OPENBSD_3_5:1.3.0.8
	OPENBSD_3_5_BASE:1.3
	OPENBSD_3_4:1.3.0.6
	OPENBSD_3_4_BASE:1.3
	OPENBSD_3_3:1.3.0.4
	OPENBSD_3_3_BASE:1.3
	OPENBSD_3_2:1.3.0.2
	OPENBSD_3_2_BASE:1.3
	binutils-2_11_2:1.1.1.3
	OPENBSD_3_1:1.2.0.8
	OPENBSD_3_1_BASE:1.2
	OPENBSD_3_0:1.2.0.6
	OPENBSD_3_0_BASE:1.2
	BINUTILS-2_10_1:1.1.1.2
	OPENBSD_2_9:1.2.0.4
	OPENBSD_2_9_BASE:1.2
	OPENBSD_2_8:1.2.0.2
	OPENBSD_2_8_BASE:1.2
	BINUTILS-2_10:1.1.1.2
	OPENBSD_2_7:1.1.0.18
	OPENBSD_2_7_BASE:1.1
	new-binutils:1.1.0.16
	OPENBSD_2_6:1.1.0.14
	OPENBSD_2_6_BASE:1.1
	OPENBSD_2_5:1.1.0.12
	OPENBSD_2_5_BASE:1.1
	OPENBSD_2_4:1.1.0.10
	OPENBSD_2_4_BASE:1.1
	OPENBSD_2_3:1.1.0.8
	OPENBSD_2_3_BASE:1.1
	OPENBSD_2_2:1.1.0.6
	OPENBSD_2_2_BASE:1.1
	BINUTILS-2_8_1:1.1.1.1
	OPENBSD_2_1:1.1.0.4
	OPENBSD_2_1_BASE:1.1
	CYGNUS-961112:1.1.1.1
	OPENBSD_2_0:1.1.0.2
	OPENBSD_2_0_BASE:1.1
	CYGNUS-960904:1.1.1.1
	CYGNUS-960609:1.1.1.1
	CYGNUS-960607:1.1.1.1
	CYGNUS:1.1.1
	FSF_2_6:1.1.1.1
	FSF:1.1.1;
locks; strict;
comment	@ * @;


1.5
date	2004.11.02.20.45.57;	author miod;	state Exp;
branches;
next	1.4;

1.4
date	2004.05.17.21.54.56;	author drahn;	state Exp;
branches;
next	1.3;

1.3
date	2002.05.13.17.07.45;	author fgsch;	state Exp;
branches;
next	1.2;

1.2
date	2000.09.12.19.13.02;	author espie;	state Exp;
branches;
next	1.1;

1.1
date	96.01.08.11.09.07;	author niklas;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	96.01.08.11.09.07;	author niklas;	state Exp;
branches;
next	1.1.1.2;

1.1.1.2
date	2000.09.12.14.48.01;	author espie;	state Exp;
branches;
next	1.1.1.3;

1.1.1.3
date	2002.05.13.13.59.06;	author fgsch;	state Exp;
branches;
next	1.1.1.4;

1.1.1.4
date	2004.05.17.20.42.47;	author drahn;	state Exp;
branches;
next	1.1.1.5;

1.1.1.5
date	2004.11.02.20.23.17;	author miod;	state Exp;
branches;
next	;


desc
@@


1.5
log
@Merge conflicts, bringing our changes back in:
- extra $(SHELL) and sugar for make (so that files not mode +x still work)
- safer temp file handling
- our W^X binary layout changes in ld
- OpenBSD policy for library file selection in ld
- arm and m88k changes which were not merged in time for official 2.15
- bfd core file handling
- a couple typos

New for 2.15:
- ld(1) and as(1) manpages now generated at build time
- binutils/stabs.c reverted to use our in-tree libiberty for now
- we still use our VIA C3 crypto code over stock binutils, as it recognizes
  more instructions
- new emulations for OpenBSD on mips64 machines, to help OpenBSD/sgi
- relaxed %f# handling in gas on OpenBSD/sparc64 (same as was in 2.14)

Tested on all platforms by various people; special thanks to sturm@@ and
otto@@.
@
text
@/* Disassemble z8000 code.
   Copyright 1992, 1993, 1998, 2000, 2001, 2002, 2003
   Free Software Foundation, Inc.

   This file is part of GNU Binutils.

   This program is free software; you can redistribute it and/or modify
   it under the terms of the GNU General Public License as published by
   the Free Software Foundation; either version 2 of the License, or
   (at your option) any later version.

   This program is distributed in the hope that it will be useful,
   but WITHOUT ANY WARRANTY; without even the implied warranty of
   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
   GNU General Public License for more details.

   You should have received a copy of the GNU General Public License
   along with this program; if not, write to the Free Software
   Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA 02111-1307,
   USA.  */

#include "sysdep.h"
#include "dis-asm.h"

#define DEFINE_TABLE
#include "z8k-opc.h"

#include <setjmp.h>

typedef struct
{
  /* These are all indexed by nibble number (i.e only every other entry
     of bytes is used, and every 4th entry of words).  */
  unsigned char nibbles[24];
  unsigned char bytes[24];
  unsigned short words[24];

  /* Nibble number of first word not yet fetched.  */
  int max_fetched;
  bfd_vma insn_start;
  jmp_buf bailout;

  int tabl_index;
  char instr_asmsrc[80];
  unsigned long arg_reg[0x0f];
  unsigned long immediate;
  unsigned long displacement;
  unsigned long address;
  unsigned long cond_code;
  unsigned long ctrl_code;
  unsigned long flags;
  unsigned long interrupts;
}
instr_data_s;

/* Make sure that bytes from INFO->PRIVATE_DATA->BUFFER (inclusive)
   to ADDR (exclusive) are valid.  Returns 1 for success, longjmps
   on error.  */
#define FETCH_DATA(info, nibble) \
  ((nibble) < ((instr_data_s *) (info->private_data))->max_fetched \
   ? 1 : fetch_data ((info), (nibble)))

static int
fetch_data (struct disassemble_info *info, int nibble)
{
  unsigned char mybuf[20];
  int status;
  instr_data_s *priv = (instr_data_s *) info->private_data;

  if ((nibble % 4) != 0)
    abort ();

  status = (*info->read_memory_func) (priv->insn_start,
				      (bfd_byte *) mybuf,
				      nibble / 2,
				      info);
  if (status != 0)
    {
      (*info->memory_error_func) (status, priv->insn_start, info);
      longjmp (priv->bailout, 1);
    }

  {
    int i;
    unsigned char *p = mybuf;

    for (i = 0; i < nibble;)
      {
	priv->words[i] = (p[0] << 8) | p[1];

	priv->bytes[i] = *p;
	priv->nibbles[i++] = *p >> 4;
	priv->nibbles[i++] = *p & 0xf;

	++p;
	priv->bytes[i] = *p;
	priv->nibbles[i++] = *p >> 4;
	priv->nibbles[i++] = *p & 0xf;

	++p;
      }
  }
  priv->max_fetched = nibble;
  return 1;
}

static char *codes[16] =
  {
    "f",
    "lt",
    "le",
    "ule",
    "ov/pe",
    "mi",
    "eq",
    "c/ult",
    "t",
    "ge",
    "gt",
    "ugt",
    "nov/po",
    "pl",
    "ne",
    "nc/uge"
  };

static char *ctrl_names[8] =
  {
    "<invld>",
    "flags",
    "fcw",
    "refresh",
    "psapseg",
    "psapoff",
    "nspseg",
    "nspoff"
  };

static int seg_length;
int z8k_lookup_instr (unsigned char *, disassemble_info *);
static void output_instr (instr_data_s *, unsigned long, disassemble_info *);
static void unpack_instr (instr_data_s *, int, disassemble_info *);
static void unparse_instr (instr_data_s *, int);

static int
print_insn_z8k (bfd_vma addr, disassemble_info *info, int is_segmented)
{
  instr_data_s instr_data;

  info->private_data = (PTR) &instr_data;
  instr_data.max_fetched = 0;
  instr_data.insn_start = addr;
  if (setjmp (instr_data.bailout) != 0)
    /* Error return.  */
    return -1;

  info->bytes_per_chunk = 2;
  info->bytes_per_line = 6;
  info->display_endian = BFD_ENDIAN_BIG;

  instr_data.tabl_index = z8k_lookup_instr (instr_data.nibbles, info);
  if (instr_data.tabl_index >= 0)
    {
      unpack_instr (&instr_data, is_segmented, info);
      unparse_instr (&instr_data, is_segmented);
      output_instr (&instr_data, addr, info);
      return z8k_table[instr_data.tabl_index].length + seg_length;
    }
  else
    {
      FETCH_DATA (info, 4);
      (*info->fprintf_func) (info->stream, ".word %02x%02x",
			     instr_data.bytes[0], instr_data.bytes[2]);
      return 2;
    }
}

int
print_insn_z8001 (bfd_vma addr, disassemble_info *info)
{
  return print_insn_z8k (addr, info, 1);
}

int
print_insn_z8002 (bfd_vma addr, disassemble_info *info)
{
  return print_insn_z8k (addr, info, 0);
}

int
z8k_lookup_instr (unsigned char *nibbles, disassemble_info *info)
{
  int nibl_index, tabl_index;
  int nibl_matched;
  int need_fetch = 0;
  unsigned short instr_nibl;
  unsigned short tabl_datum, datum_class, datum_value;

  nibl_matched = 0;
  tabl_index = 0;
  FETCH_DATA (info, 4);
  while (!nibl_matched && z8k_table[tabl_index].name)
    {
      nibl_matched = 1;
      for (nibl_index = 0;
	   nibl_index < z8k_table[tabl_index].length * 2 && nibl_matched;
	   nibl_index++)
	{
	  if ((nibl_index % 4) == 0)
            {
              /* Fetch data only if it isn't already there.  */
              if (nibl_index >= 4 || (nibl_index < 4 && need_fetch))
                FETCH_DATA (info, nibl_index + 4);   /* Fetch one word at a time.  */
              if (nibl_index < 4)
                need_fetch = 0;
              else
                need_fetch = 1;
            }
	  instr_nibl = nibbles[nibl_index];

	  tabl_datum = z8k_table[tabl_index].byte_info[nibl_index];
	  datum_class = tabl_datum & CLASS_MASK;
	  datum_value = ~CLASS_MASK & tabl_datum;

	  switch (datum_class)
	    {
	    case CLASS_BIT:
	      if (datum_value != instr_nibl)
		nibl_matched = 0;
	      break;
	    case CLASS_IGNORE:
	      break;
	    case CLASS_00II:
	      if (!((~instr_nibl) & 0x4))
		nibl_matched = 0;
	      break;
	    case CLASS_01II:
	      if (!(instr_nibl & 0x4))
		nibl_matched = 0;
	      break;
	    case CLASS_0CCC:
	      if (!((~instr_nibl) & 0x8))
		nibl_matched = 0;
	      break;
	    case CLASS_1CCC:
	      if (!(instr_nibl & 0x8))
		nibl_matched = 0;
	      break;
	    case CLASS_0DISP7:
	      if (!((~instr_nibl) & 0x8))
		nibl_matched = 0;
	      nibl_index += 1;
	      break;
	    case CLASS_1DISP7:
	      if (!(instr_nibl & 0x8))
		nibl_matched = 0;
	      nibl_index += 1;
	      break;
	    case CLASS_REGN0:
	      if (instr_nibl == 0)
		nibl_matched = 0;
	      break;
	    case CLASS_BIT_1OR2:
	      if ((instr_nibl | 0x2) != (datum_value | 0x2))
		nibl_matched = 0;
	      break;
	    default:
	      break;
	    }
	}

      if (nibl_matched)
	return tabl_index;

      tabl_index++;
    }
  return -1;
}

static void
output_instr (instr_data_s *instr_data,
              unsigned long addr ATTRIBUTE_UNUSED,
              disassemble_info *info)
{
  int num_bytes;
  char out_str[100];

  out_str[0] = 0;

  num_bytes = (z8k_table[instr_data->tabl_index].length + seg_length) * 2;
  FETCH_DATA (info, num_bytes);

  strcat (out_str, instr_data->instr_asmsrc);

  (*info->fprintf_func) (info->stream, "%s", out_str);
}

static void
unpack_instr (instr_data_s *instr_data, int is_segmented, disassemble_info *info)
{
  int nibl_count, loop;
  unsigned short instr_nibl, instr_byte, instr_word;
  long instr_long;
  unsigned int tabl_datum, datum_class;
  unsigned short datum_value;

  nibl_count = 0;
  loop = 0;
  seg_length = 0;

  while (z8k_table[instr_data->tabl_index].byte_info[loop] != 0)
    {
      FETCH_DATA (info, nibl_count + 4 - (nibl_count % 4));
      instr_nibl = instr_data->nibbles[nibl_count];
      instr_byte = instr_data->bytes[nibl_count & ~1];
      instr_word = instr_data->words[nibl_count & ~3];

      tabl_datum = z8k_table[instr_data->tabl_index].byte_info[loop];
      datum_class = tabl_datum & CLASS_MASK;
      datum_value = tabl_datum & ~CLASS_MASK;

      switch (datum_class)
	{
	case CLASS_DISP:
	  switch (datum_value)
	    {
	    case ARG_DISP16:
	      instr_data->displacement = instr_data->insn_start + 4
		+ (signed short) (instr_word & 0xffff);
	      nibl_count += 3;
	      break;
	    case ARG_DISP12:
	      if (instr_word & 0x800)
		/* Negative 12 bit displacement.  */
		instr_data->displacement = instr_data->insn_start + 2
		  - (signed short) ((instr_word & 0xfff) | 0xf000) * 2;
	      else
		instr_data->displacement = instr_data->insn_start + 2
		  - (instr_word & 0x0fff) * 2;

	      nibl_count += 2;
	      break;
	    default:
	      break;
	    }
	  break;
	case CLASS_IMM:
	  switch (datum_value)
	    {
	    case ARG_IMM4:
	      instr_data->immediate = instr_nibl;
	      break;
	    case ARG_NIM4:
	      instr_data->immediate = (- instr_nibl) & 0xf;
	      break;
	    case ARG_NIM8:
	      instr_data->immediate = (- instr_byte) & 0xff;
	      nibl_count += 1;
	      break;
	    case ARG_IMM8:
	      instr_data->immediate = instr_byte;
	      nibl_count += 1;
	      break;
	    case ARG_IMM16:
	      instr_data->immediate = instr_word;
	      nibl_count += 3;
	      break;
	    case ARG_IMM32:
	      FETCH_DATA (info, nibl_count + 8);
	      instr_long = (instr_data->words[nibl_count] << 16)
		| (instr_data->words[nibl_count + 4]);
	      instr_data->immediate = instr_long;
	      nibl_count += 7;
	      break;
	    case ARG_IMMN:
	      instr_data->immediate = instr_nibl - 1;
	      break;
	    case ARG_IMM4M1:
	      instr_data->immediate = instr_nibl + 1;
	      break;
	    case ARG_IMM_1:
	      instr_data->immediate = 1;
	      break;
	    case ARG_IMM_2:
	      instr_data->immediate = 2;
	      break;
	    case ARG_IMM2:
	      instr_data->immediate = instr_nibl & 0x3;
	      break;
	    default:
	      break;
	    }
	  break;
	case CLASS_CC:
	  instr_data->cond_code = instr_nibl;
	  break;
	case CLASS_ADDRESS:
	  if (is_segmented)
	    {
	      if (instr_nibl & 0x8)
		{
		  FETCH_DATA (info, nibl_count + 8);
		  instr_long = (instr_data->words[nibl_count] << 16)
		    | (instr_data->words[nibl_count + 4]);
		  instr_data->address = ((instr_word & 0x7f00) << 16)
		    + (instr_long & 0xffff);
		  nibl_count += 7;
		  seg_length = 2;
		}
	      else
		{
		  instr_data->address = ((instr_word & 0x7f00) << 16)
		    + (instr_word & 0x00ff);
		  nibl_count += 3;
		}
	    }
	  else
	    {
	      instr_data->address = instr_word;
	      nibl_count += 3;
	    }
	  break;
	case CLASS_0CCC:
	case CLASS_1CCC:
	  instr_data->ctrl_code = instr_nibl & 0x7;
	  break;
	case CLASS_0DISP7:
	  instr_data->displacement =
	    instr_data->insn_start + 2 - (instr_byte & 0x7f) * 2;
	  nibl_count += 1;
	  break;
	case CLASS_1DISP7:
	  instr_data->displacement =
	    instr_data->insn_start + 2 - (instr_byte & 0x7f) * 2;
	  nibl_count += 1;
	  break;
	case CLASS_01II:
	  instr_data->interrupts = instr_nibl & 0x3;
	  break;
	case CLASS_00II:
	  instr_data->interrupts = instr_nibl & 0x3;
	  break;
	case CLASS_IGNORE:
	case CLASS_BIT:
	  instr_data->ctrl_code = instr_nibl & 0x7;
	  break;
	case CLASS_FLAGS:
	  instr_data->flags = instr_nibl;
	  break;
	case CLASS_REG:
	  instr_data->arg_reg[datum_value] = instr_nibl;
	  break;
	case CLASS_REGN0:
	  instr_data->arg_reg[datum_value] = instr_nibl;
	  break;
	case CLASS_DISP8:
	  instr_data->displacement =
	    instr_data->insn_start + 2 + (signed char) instr_byte * 2;
	  nibl_count += 1;
	  break;
        case CLASS_BIT_1OR2:
          instr_data->immediate = ((instr_nibl >> 1) & 0x1) + 1;
          nibl_count += 1;
	  break;
	default:
	  abort ();
	  break;
	}

      loop += 1;
      nibl_count += 1;
    }
}

static void
print_intr(char *tmp_str, unsigned long interrupts)
{
  int comma = 0;

  *tmp_str = 0;
  if (! (interrupts & 2))
    {
      strcat (tmp_str, "vi");
      comma = 1;
    }
  if (! (interrupts & 1))
    {
      if (comma) strcat (tmp_str, ",");
      strcat (tmp_str, "nvi");
    }
}

static void
print_flags(char *tmp_str, unsigned long flags)
{
  int comma = 0;

  *tmp_str = 0;
  if (flags & 8)
    {
      strcat (tmp_str, "c");
      comma = 1;
    }
  if (flags & 4)
    {
      if (comma) strcat (tmp_str, ",");
      strcat (tmp_str, "z");
      comma = 1;
    }
  if (flags & 2)
    {
      if (comma) strcat (tmp_str, ",");
      strcat (tmp_str, "s");
      comma = 1;
    }
  if (flags & 1)
    {
      if (comma) strcat (tmp_str, ",");
      strcat (tmp_str, "p");
    }
}

static void
unparse_instr (instr_data_s *instr_data, int is_segmented)
{
  unsigned short datum_value;
  unsigned int tabl_datum, datum_class;
  int loop, loop_limit;
  char out_str[80], tmp_str[25];

  sprintf (out_str, "%s\t", z8k_table[instr_data->tabl_index].name);

  loop_limit = z8k_table[instr_data->tabl_index].noperands;
  for (loop = 0; loop < loop_limit; loop++)
    {
      if (loop)
	strcat (out_str, ",");

      tabl_datum = z8k_table[instr_data->tabl_index].arg_info[loop];
      datum_class = tabl_datum & CLASS_MASK;
      datum_value = tabl_datum & ~CLASS_MASK;

      switch (datum_class)
	{
	case CLASS_X:
          sprintf (tmp_str, "0x%0lx(r%ld)", instr_data->address,
                   instr_data->arg_reg[datum_value]);
	  strcat (out_str, tmp_str);
	  break;
	case CLASS_BA:
          if (is_segmented)
            sprintf (tmp_str, "rr%ld(#0x%lx)", instr_data->arg_reg[datum_value],
                     instr_data->immediate);
          else
            sprintf (tmp_str, "r%ld(#0x%lx)", instr_data->arg_reg[datum_value],
                     instr_data->immediate);
	  strcat (out_str, tmp_str);
	  break;
	case CLASS_BX:
          if (is_segmented)
            sprintf (tmp_str, "rr%ld(r%ld)", instr_data->arg_reg[datum_value],
                     instr_data->arg_reg[ARG_RX]);
          else
            sprintf (tmp_str, "r%ld(r%ld)", instr_data->arg_reg[datum_value],
                     instr_data->arg_reg[ARG_RX]);
	  strcat (out_str, tmp_str);
	  break;
	case CLASS_DISP:
	  sprintf (tmp_str, "0x%0lx", instr_data->displacement);
	  strcat (out_str, tmp_str);
	  break;
	case CLASS_IMM:
	  if (datum_value == ARG_IMM2)	/* True with EI/DI instructions only.  */
	    {
	      print_intr (tmp_str, instr_data->interrupts);
	      strcat (out_str, tmp_str);
	      break;
	    }
	  sprintf (tmp_str, "#0x%0lx", instr_data->immediate);
	  strcat (out_str, tmp_str);
	  break;
	case CLASS_CC:
	  sprintf (tmp_str, "%s", codes[instr_data->cond_code]);
	  strcat (out_str, tmp_str);
	  break;
	case CLASS_CTRL:
	  sprintf (tmp_str, "%s", ctrl_names[instr_data->ctrl_code]);
	  strcat (out_str, tmp_str);
	  break;
	case CLASS_DA:
	case CLASS_ADDRESS:
	  sprintf (tmp_str, "0x%0lx", instr_data->address);
	  strcat (out_str, tmp_str);
	  break;
	case CLASS_IR:
	  if (is_segmented)
	    sprintf (tmp_str, "@@rr%ld", instr_data->arg_reg[datum_value]);
	  else
	    sprintf (tmp_str, "@@r%ld", instr_data->arg_reg[datum_value]);
	  strcat (out_str, tmp_str);
	  break;
	case CLASS_IRO:
          sprintf (tmp_str, "@@r%ld", instr_data->arg_reg[datum_value]);
	  strcat (out_str, tmp_str);
	  break;
	case CLASS_FLAGS:
	  print_flags(tmp_str, instr_data->flags);
	  strcat (out_str, tmp_str);
	  break;
	case CLASS_REG_BYTE:
	  if (instr_data->arg_reg[datum_value] >= 0x8)
	    sprintf (tmp_str, "rl%ld",
		     instr_data->arg_reg[datum_value] - 0x8);
	  else
	    sprintf (tmp_str, "rh%ld", instr_data->arg_reg[datum_value]);
	  strcat (out_str, tmp_str);
	  break;
	case CLASS_REG_WORD:
	  sprintf (tmp_str, "r%ld", instr_data->arg_reg[datum_value]);
	  strcat (out_str, tmp_str);
	  break;
	case CLASS_REG_QUAD:
	  sprintf (tmp_str, "rq%ld", instr_data->arg_reg[datum_value]);
	  strcat (out_str, tmp_str);
	  break;
	case CLASS_REG_LONG:
	  sprintf (tmp_str, "rr%ld", instr_data->arg_reg[datum_value]);
	  strcat (out_str, tmp_str);
	  break;
	case CLASS_PR:
	  if (is_segmented)
	    sprintf (tmp_str, "rr%ld", instr_data->arg_reg[datum_value]);
	  else
	    sprintf (tmp_str, "r%ld", instr_data->arg_reg[datum_value]);
	  strcat (out_str, tmp_str);
	  break;
	default:
	  abort ();
	  break;
	}
    }

  strcpy (instr_data->instr_asmsrc, out_str);
}
@


1.4
log
@Resolve merge conflicts, adjust method of W^X handing (.sh files)
remove testsuites (not useable) remove mmalloc (not part of new binutils).
@
text
@d2 1
a2 1
   Copyright 1992, 1993, 1998, 2000, 2001, 2002
d27 1
a27 1

d29 1
a29 1

d43 1
a43 1
  long tabl_index;
a55 3
static int fetch_data PARAMS ((struct disassemble_info *, int));


d64 1
a64 3
fetch_data (info, nibble)
     struct disassemble_info *info;
     int nibble;
d140 4
a143 6
static int print_insn_z8k PARAMS ((bfd_vma, disassemble_info *, int));
int z8k_lookup_instr PARAMS ((unsigned char *, disassemble_info *));
static void output_instr
  PARAMS ((instr_data_s *, unsigned long, disassemble_info *));
static void unpack_instr PARAMS ((instr_data_s *, int, disassemble_info *));
static void unparse_instr PARAMS ((instr_data_s *, int));
d146 1
a146 4
print_insn_z8k (addr, info, is_segmented)
     bfd_vma addr;
     disassemble_info *info;
     int is_segmented;
d162 1
a162 1
  if (instr_data.tabl_index > 0)
d179 1
a179 3
print_insn_z8001 (addr, info)
     bfd_vma addr;
     disassemble_info *info;
d185 1
a185 3
print_insn_z8002 (addr, info)
     bfd_vma addr;
     disassemble_info *info;
d191 1
a191 3
z8k_lookup_instr (nibbles, info)
     unsigned char *nibbles;
     disassemble_info *info;
a192 1

d281 3
a283 4
output_instr (instr_data, addr, info)
     instr_data_s *instr_data;
     unsigned long addr ATTRIBUTE_UNUSED;
     disassemble_info *info;
d299 1
a299 4
unpack_instr (instr_data, is_segmented, info)
     instr_data_s *instr_data;
     int is_segmented;
     disassemble_info *info;
d475 17
a491 6
static char *intr_names[] = {
  "all",    /* 0 */
  "vi",     /* 1 */
  "nvi",    /* 2 */
  "none"    /* 3 */
};
d494 31
a524 3
unparse_instr (instr_data, is_segmented)
     instr_data_s *instr_data;
     int is_segmented;
d573 6
a578 6
          if (datum_value == ARG_IMM2)  /* True with EI/DI instructions only.  */
            {
              sprintf (tmp_str, "%s", intr_names[instr_data->interrupts]);
              strcat (out_str, tmp_str);
              break;
            }
d602 4
d607 1
a607 1
	  sprintf (tmp_str, "0x%0lx", instr_data->flags);
@


1.3
log
@resolve conflicts.
@
text
@d2 1
a2 1
   Copyright 1992, 1993, 1998, 2000
d5 1
a5 1
This file is part of GNU Binutils.
d7 14
a20 13
This program is free software; you can redistribute it and/or modify
it under the terms of the GNU General Public License as published by
the Free Software Foundation; either version 2 of the License, or
(at your option) any later version.

This program is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
GNU General Public License for more details.

You should have received a copy of the GNU General Public License
along with this program; if not, write to the Free Software
Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA 02111-1307, USA.  */
d56 3
d63 1
a63 1
  ((nibble) < ((instr_data_s *)(info->private_data))->max_fetched \
d113 30
a142 18
{
  "f",
  "lt",
  "le",
  "ule",
  "ov/pe",
  "mi",
  "eq",
  "c/ult",
  "t",
  "ge",
  "gt",
  "ugt",
  "nov/po",
  "pl",
  "ne",
  "nc/uge"
};
d144 2
d150 1
a150 1
static void unparse_instr PARAMS ((instr_data_s *));
d167 4
d175 1
a175 1
      unparse_instr (&instr_data);
d177 1
a177 1
      return z8k_table[instr_data.tabl_index].length;
d212 1
d218 1
d227 9
a235 2
	    /* Fetch one word at a time.  */
	    FETCH_DATA (info, nibl_index + 4);
d248 2
d288 1
d290 1
a290 3
	{
	  return tabl_index;
	}
a294 1

d300 1
a300 1
     unsigned long addr;
d303 1
a303 2
  int loop, loop_limit;
  char tmp_str[20];
d306 1
a306 1
  strcpy (out_str, "\t");
d308 2
a309 12
  loop_limit = z8k_table[instr_data->tabl_index].length * 2;
  FETCH_DATA (info, loop_limit);
  for (loop = 0; loop < loop_limit; loop++)
    {
      sprintf (tmp_str, "%x", instr_data->nibbles[loop]);
      strcat (out_str, tmp_str);
    }

  while (loop++ < 8)
    {
      strcat (out_str, " ");
    }
d325 2
a326 1
  unsigned short tabl_datum, datum_class, datum_value;
d330 2
d336 2
a337 2
      instr_byte = instr_data->bytes[nibl_count];
      instr_word = instr_data->words[nibl_count];
a344 9
	case CLASS_X:
	  instr_data->address = instr_nibl;
	  break;
	case CLASS_BA:
	  instr_data->displacement = instr_nibl;
	  break;
	case CLASS_BX:
	  instr_data->arg_reg[datum_value] = instr_nibl;
	  break;
d349 2
a350 1
	      instr_data->displacement = instr_word;
d354 8
a361 1
	      instr_data->displacement = instr_word & 0x0fff;
d374 3
d378 1
a378 1
	      instr_data->immediate = (-instr_byte);
a417 4
	case CLASS_CTRL:
	  instr_data->ctrl_code = instr_nibl;
	  break;
	case CLASS_DA:
d426 2
a427 2
		  instr_data->address = ((instr_word & 0x7f00) << 8) +
		    (instr_long & 0xffff);
d429 1
d433 2
a434 2
		  instr_data->address = ((instr_word & 0x7f00) << 8) +
		    (instr_word & 0x00ff);
a444 2
	  instr_data->cond_code = instr_nibl & 0x7;
	  break;
d446 1
a446 1
	  instr_data->cond_code = instr_nibl & 0x7;
d449 2
a450 1
	  instr_data->displacement = instr_byte & 0x7f;
d454 2
a455 1
	  instr_data->displacement = instr_byte & 0x7f;
d464 1
d466 1
a466 4
	  /* Do nothing.  */
	  break;
	case CLASS_IR:
	  instr_data->arg_reg[datum_value] = instr_nibl;
d474 1
a474 1
	case CLASS_REG_BYTE:
d477 4
a480 5
	case CLASS_REG_WORD:
	  instr_data->arg_reg[datum_value] = instr_nibl;
	  break;
	case CLASS_REG_QUAD:
	  instr_data->arg_reg[datum_value] = instr_nibl;
d482 3
a484 5
	case CLASS_REG_LONG:
	  instr_data->arg_reg[datum_value] = instr_nibl;
	  break;
	case CLASS_REGN0:
	  instr_data->arg_reg[datum_value] = instr_nibl;
d487 1
d496 7
d504 1
a504 1
unparse_instr (instr_data)
d506 1
d508 2
a509 1
  unsigned short tabl_datum, datum_class, datum_value;
d513 1
a513 1
  sprintf (out_str, "\t%s\t", z8k_table[instr_data->tabl_index].name);
d528 2
a529 2
	  sprintf (tmp_str, "0x%0lx(R%ld)", instr_data->address,
		   instr_data->arg_reg[datum_value]);
d533 6
a538 2
	  sprintf (tmp_str, "r%ld(#%lx)", instr_data->arg_reg[datum_value],
		   instr_data->immediate);
d542 6
a547 2
	  sprintf (tmp_str, "r%ld(R%ld)", instr_data->arg_reg[datum_value],
		   instr_data->arg_reg[ARG_RX]);
d551 1
a551 1
	  sprintf (tmp_str, "#0x%0lx", instr_data->displacement);
d555 6
d569 1
a569 1
	  sprintf (tmp_str, "0x%0lx", instr_data->ctrl_code);
d574 1
a574 1
	  sprintf (tmp_str, "#0x%0lx", instr_data->address);
d578 4
a581 1
	  sprintf (tmp_str, "@@R%ld", instr_data->arg_reg[datum_value]);
d590 2
a591 4
	    {
	      sprintf (tmp_str, "rl%ld",
		       instr_data->arg_reg[datum_value] - 0x8);
	    }
d593 1
a593 3
	    {
	      sprintf (tmp_str, "rh%ld", instr_data->arg_reg[datum_value]);
	    }
d608 7
d616 1
@


1.2
log
@Help stupid cvs fixing basic conflicts.
@
text
@d2 2
a3 1
   Copyright 1992, 1993, 1995, 1998 Free Software Foundation, Inc.
a25 1

a27 1

d69 1
a69 1
  instr_data_s *priv = (instr_data_s *)info->private_data;
d86 2
a87 2
    unsigned char *p = mybuf ;
    
d91 1
a91 1
	
d94 1
a94 1
	priv->nibbles[i++] = *p &0xf;
d128 1
a128 1
int z8k_lookup_instr PARAMS ((unsigned char*, disassemble_info *));
d198 3
a200 1
      for (nibl_index = 0; nibl_index < z8k_table[tabl_index].length * 2 && nibl_matched; nibl_index++)
d443 1
a443 1
	  /* do nothing */
@


1.1
log
@Initial revision
@
text
@d1 3
a3 1
/*
a19 1
#include <ansidecl.h>
a70 1
  bfd_vma start;
d167 1
d175 1
d500 1
a500 1
	  sprintf (tmp_str, "0x%0x(R%d)", instr_data->address,
d505 1
a505 1
	  sprintf (tmp_str, "r%d(#%x)", instr_data->arg_reg[datum_value],
d510 1
a510 1
	  sprintf (tmp_str, "r%d(R%d)", instr_data->arg_reg[datum_value],
d515 1
a515 1
	  sprintf (tmp_str, "#0x%0x", instr_data->displacement);
d519 1
a519 1
	  sprintf (tmp_str, "#0x%0x", instr_data->immediate);
d527 1
a527 1
	  sprintf (tmp_str, "0x%0x", instr_data->ctrl_code);
d532 1
a532 1
	  sprintf (tmp_str, "#0x%0x", instr_data->address);
d536 1
a536 1
	  sprintf (tmp_str, "@@R%d", instr_data->arg_reg[datum_value]);
d540 1
a540 1
	  sprintf (tmp_str, "0x%0x", instr_data->flags);
d546 1
a546 1
	      sprintf (tmp_str, "rl%d",
d551 1
a551 1
	      sprintf (tmp_str, "rh%d", instr_data->arg_reg[datum_value]);
d556 1
a556 1
	  sprintf (tmp_str, "r%d", instr_data->arg_reg[datum_value]);
d560 1
a560 1
	  sprintf (tmp_str, "rq%d", instr_data->arg_reg[datum_value]);
d564 1
a564 1
	  sprintf (tmp_str, "rr%d", instr_data->arg_reg[datum_value]);
@


1.1.1.1
log
@Initial GNU binutils 2.6 import
@
text
@@


1.1.1.2
log
@Import binutils-2.10
- only the binutils package (no gdb here)
- don't import libiberty and texinfo, they are elsewhere
- remove all .info* generated files
@
text
@d1 1
a1 3
/* Disassemble z8000 code.
   Copyright 1992, 1993, 1995, 1998 Free Software Foundation, Inc.

d18 1
d70 1
a166 1
int
a173 1
int
d498 1
a498 1
	  sprintf (tmp_str, "0x%0lx(R%ld)", instr_data->address,
d503 1
a503 1
	  sprintf (tmp_str, "r%ld(#%lx)", instr_data->arg_reg[datum_value],
d508 1
a508 1
	  sprintf (tmp_str, "r%ld(R%ld)", instr_data->arg_reg[datum_value],
d513 1
a513 1
	  sprintf (tmp_str, "#0x%0lx", instr_data->displacement);
d517 1
a517 1
	  sprintf (tmp_str, "#0x%0lx", instr_data->immediate);
d525 1
a525 1
	  sprintf (tmp_str, "0x%0lx", instr_data->ctrl_code);
d530 1
a530 1
	  sprintf (tmp_str, "#0x%0lx", instr_data->address);
d534 1
a534 1
	  sprintf (tmp_str, "@@R%ld", instr_data->arg_reg[datum_value]);
d538 1
a538 1
	  sprintf (tmp_str, "0x%0lx", instr_data->flags);
d544 1
a544 1
	      sprintf (tmp_str, "rl%ld",
d549 1
a549 1
	      sprintf (tmp_str, "rh%ld", instr_data->arg_reg[datum_value]);
d554 1
a554 1
	  sprintf (tmp_str, "r%ld", instr_data->arg_reg[datum_value]);
d558 1
a558 1
	  sprintf (tmp_str, "rq%ld", instr_data->arg_reg[datum_value]);
d562 1
a562 1
	  sprintf (tmp_str, "rr%ld", instr_data->arg_reg[datum_value]);
@


1.1.1.3
log
@Import binutils-2.11.2
- only the binutils package (no gdb here)
- don't import libiberty and texinfo, they are elsewhere
- remove all .info* generated files
@
text
@d2 1
a2 2
   Copyright 1992, 1993, 1998, 2000
   Free Software Foundation, Inc.
d25 1
d28 1
d70 1
a70 1
  instr_data_s *priv = (instr_data_s *) info->private_data;
d87 2
a88 2
    unsigned char *p = mybuf;

d92 1
a92 1

d95 1
a95 1
	priv->nibbles[i++] = *p & 0xf;
d129 1
a129 1
int z8k_lookup_instr PARAMS ((unsigned char *, disassemble_info *));
d199 1
a199 3
      for (nibl_index = 0;
	   nibl_index < z8k_table[tabl_index].length * 2 && nibl_matched;
	   nibl_index++)
d442 1
a442 1
	  /* Do nothing.  */
@


1.1.1.4
log
@import binutils 2.14 (excluding testsuites, .info files, and .po files)
@
text
@d2 1
a2 1
   Copyright 1992, 1993, 1998, 2000, 2001, 2002
d5 1
a5 1
   This file is part of GNU Binutils.
d7 13
a19 14
   This program is free software; you can redistribute it and/or modify
   it under the terms of the GNU General Public License as published by
   the Free Software Foundation; either version 2 of the License, or
   (at your option) any later version.

   This program is distributed in the hope that it will be useful,
   but WITHOUT ANY WARRANTY; without even the implied warranty of
   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
   GNU General Public License for more details.

   You should have received a copy of the GNU General Public License
   along with this program; if not, write to the Free Software
   Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA 02111-1307,
   USA.  */
a54 3
static int fetch_data PARAMS ((struct disassemble_info *, int));


d59 1
a59 1
  ((nibble) < ((instr_data_s *) (info->private_data))->max_fetched \
d109 18
a126 18
  {
    "f",
    "lt",
    "le",
    "ule",
    "ov/pe",
    "mi",
    "eq",
    "c/ult",
    "t",
    "ge",
    "gt",
    "ugt",
    "nov/po",
    "pl",
    "ne",
    "nc/uge"
  };
a127 14
static char *ctrl_names[8] =
  {
    "<invld>",
    "flags",
    "fcw",
    "refresh",
    "psapseg",
    "psapoff",
    "nspseg",
    "nspoff"
  };

static int seg_length;
static int print_insn_z8k PARAMS ((bfd_vma, disassemble_info *, int));
d132 1
a132 1
static void unparse_instr PARAMS ((instr_data_s *, int));
a148 4
  info->bytes_per_chunk = 2;
  info->bytes_per_line = 6;
  info->display_endian = BFD_ENDIAN_BIG;

d153 1
a153 1
      unparse_instr (&instr_data, is_segmented);
d155 1
a155 1
      return z8k_table[instr_data.tabl_index].length + seg_length;
a189 1
  int need_fetch = 0;
a194 1
  FETCH_DATA (info, 4);
d203 2
a204 9
            {
              /* Fetch data only if it isn't already there.  */
              if (nibl_index >= 4 || (nibl_index < 4 && need_fetch))
                FETCH_DATA (info, nibl_index + 4);   /* Fetch one word at a time.  */
              if (nibl_index < 4)
                need_fetch = 0;
              else
                need_fetch = 1;
            }
a216 2
	    case CLASS_IGNORE:
	      break;
a254 1

d256 3
a258 1
	return tabl_index;
d263 1
d269 1
a269 1
     unsigned long addr ATTRIBUTE_UNUSED;
d272 2
a273 1
  int num_bytes;
d276 1
a276 1
  out_str[0] = 0;
d278 12
a289 2
  num_bytes = (z8k_table[instr_data->tabl_index].length + seg_length) * 2;
  FETCH_DATA (info, num_bytes);
d305 1
a305 2
  unsigned int tabl_datum, datum_class;
  unsigned short datum_value;
a308 2
  seg_length = 0;

d313 2
a314 2
      instr_byte = instr_data->bytes[nibl_count & ~1];
      instr_word = instr_data->words[nibl_count & ~3];
d322 9
d335 1
a335 2
	      instr_data->displacement = instr_data->insn_start + 4
		+ (signed short) (instr_word & 0xffff);
d339 1
a339 8
	      if (instr_word & 0x800)
		/* Negative 12 bit displacement.  */
		instr_data->displacement = instr_data->insn_start + 2
		  - (signed short) ((instr_word & 0xfff) | 0xf000) * 2;
	      else
		instr_data->displacement = instr_data->insn_start + 2
		  - (instr_word & 0x0fff) * 2;

a351 3
	    case ARG_NIM4:
	      instr_data->immediate = (- instr_nibl) & 0xf;
	      break;
d353 1
a353 1
	      instr_data->immediate = (- instr_byte) & 0xff;
d393 4
d405 2
a406 2
		  instr_data->address = ((instr_word & 0x7f00) << 16)
		    + (instr_long & 0xffff);
a407 1
		  seg_length = 2;
d411 2
a412 2
		  instr_data->address = ((instr_word & 0x7f00) << 16)
		    + (instr_word & 0x00ff);
d423 2
d426 1
a426 1
	  instr_data->ctrl_code = instr_nibl & 0x7;
d429 1
a429 2
	  instr_data->displacement =
	    instr_data->insn_start + 2 - (instr_byte & 0x7f) * 2;
d433 1
a433 2
	  instr_data->displacement =
	    instr_data->insn_start + 2 - (instr_byte & 0x7f) * 2;
a441 1
	case CLASS_IGNORE:
d443 4
a446 1
	  instr_data->ctrl_code = instr_nibl & 0x7;
d454 4
a457 1
	case CLASS_REGN0:
d460 2
a461 4
	case CLASS_DISP8:
	  instr_data->displacement =
	    instr_data->insn_start + 2 + (signed char) instr_byte * 2;
	  nibl_count += 1;
d463 5
a467 3
        case CLASS_BIT_1OR2:
          instr_data->immediate = ((instr_nibl >> 1) & 0x1) + 1;
          nibl_count += 1;
a469 1
	  abort ();
a477 7
static char *intr_names[] = {
  "all",    /* 0 */
  "vi",     /* 1 */
  "nvi",    /* 2 */
  "none"    /* 3 */
};

d479 1
a479 1
unparse_instr (instr_data, is_segmented)
a480 1
     int is_segmented;
d482 1
a482 2
  unsigned short datum_value;
  unsigned int tabl_datum, datum_class;
d486 1
a486 1
  sprintf (out_str, "%s\t", z8k_table[instr_data->tabl_index].name);
d501 2
a502 2
          sprintf (tmp_str, "0x%0lx(r%ld)", instr_data->address,
                   instr_data->arg_reg[datum_value]);
d506 2
a507 6
          if (is_segmented)
            sprintf (tmp_str, "rr%ld(#0x%lx)", instr_data->arg_reg[datum_value],
                     instr_data->immediate);
          else
            sprintf (tmp_str, "r%ld(#0x%lx)", instr_data->arg_reg[datum_value],
                     instr_data->immediate);
d511 2
a512 6
          if (is_segmented)
            sprintf (tmp_str, "rr%ld(r%ld)", instr_data->arg_reg[datum_value],
                     instr_data->arg_reg[ARG_RX]);
          else
            sprintf (tmp_str, "r%ld(r%ld)", instr_data->arg_reg[datum_value],
                     instr_data->arg_reg[ARG_RX]);
d516 1
a516 1
	  sprintf (tmp_str, "0x%0lx", instr_data->displacement);
a519 6
          if (datum_value == ARG_IMM2)  /* True with EI/DI instructions only.  */
            {
              sprintf (tmp_str, "%s", intr_names[instr_data->interrupts]);
              strcat (out_str, tmp_str);
              break;
            }
d528 1
a528 1
	  sprintf (tmp_str, "%s", ctrl_names[instr_data->ctrl_code]);
d533 1
a533 1
	  sprintf (tmp_str, "0x%0lx", instr_data->address);
d537 1
a537 4
	  if (is_segmented)
	    sprintf (tmp_str, "@@rr%ld", instr_data->arg_reg[datum_value]);
	  else
	    sprintf (tmp_str, "@@r%ld", instr_data->arg_reg[datum_value]);
d546 4
a549 2
	    sprintf (tmp_str, "rl%ld",
		     instr_data->arg_reg[datum_value] - 0x8);
d551 3
a553 1
	    sprintf (tmp_str, "rh%ld", instr_data->arg_reg[datum_value]);
a567 7
	case CLASS_PR:
	  if (is_segmented)
	    sprintf (tmp_str, "rr%ld", instr_data->arg_reg[datum_value]);
	  else
	    sprintf (tmp_str, "r%ld", instr_data->arg_reg[datum_value]);
	  strcat (out_str, tmp_str);
	  break;
a568 1
	  abort ();
@


1.1.1.5
log
@Binutils 2.15, with testsuites removed, and without gdb and libiberty.
@
text
@d2 1
a2 1
   Copyright 1992, 1993, 1998, 2000, 2001, 2002, 2003
d27 1
a27 1

d29 1
a29 1

d43 1
a43 1
  int tabl_index;
d56 3
d67 3
a69 1
fetch_data (struct disassemble_info *info, int nibble)
d145 6
a150 4
int z8k_lookup_instr (unsigned char *, disassemble_info *);
static void output_instr (instr_data_s *, unsigned long, disassemble_info *);
static void unpack_instr (instr_data_s *, int, disassemble_info *);
static void unparse_instr (instr_data_s *, int);
d153 4
a156 1
print_insn_z8k (bfd_vma addr, disassemble_info *info, int is_segmented)
d172 1
a172 1
  if (instr_data.tabl_index >= 0)
d189 3
a191 1
print_insn_z8001 (bfd_vma addr, disassemble_info *info)
d197 3
a199 1
print_insn_z8002 (bfd_vma addr, disassemble_info *info)
d205 3
a207 1
z8k_lookup_instr (unsigned char *nibbles, disassemble_info *info)
d209 1
d298 4
a301 3
output_instr (instr_data_s *instr_data,
              unsigned long addr ATTRIBUTE_UNUSED,
              disassemble_info *info)
d317 4
a320 1
unpack_instr (instr_data_s *instr_data, int is_segmented, disassemble_info *info)
d496 6
a501 17
static void
print_intr(char *tmp_str, unsigned long interrupts)
{
  int comma = 0;

  *tmp_str = 0;
  if (! (interrupts & 2))
    {
      strcat (tmp_str, "vi");
      comma = 1;
    }
  if (! (interrupts & 1))
    {
      if (comma) strcat (tmp_str, ",");
      strcat (tmp_str, "nvi");
    }
}
d504 3
a506 31
print_flags(char *tmp_str, unsigned long flags)
{
  int comma = 0;

  *tmp_str = 0;
  if (flags & 8)
    {
      strcat (tmp_str, "c");
      comma = 1;
    }
  if (flags & 4)
    {
      if (comma) strcat (tmp_str, ",");
      strcat (tmp_str, "z");
      comma = 1;
    }
  if (flags & 2)
    {
      if (comma) strcat (tmp_str, ",");
      strcat (tmp_str, "s");
      comma = 1;
    }
  if (flags & 1)
    {
      if (comma) strcat (tmp_str, ",");
      strcat (tmp_str, "p");
    }
}

static void
unparse_instr (instr_data_s *instr_data, int is_segmented)
d555 6
a560 6
	  if (datum_value == ARG_IMM2)	/* True with EI/DI instructions only.  */
	    {
	      print_intr (tmp_str, instr_data->interrupts);
	      strcat (out_str, tmp_str);
	      break;
	    }
a583 4
	case CLASS_IRO:
          sprintf (tmp_str, "@@r%ld", instr_data->arg_reg[datum_value]);
	  strcat (out_str, tmp_str);
	  break;
d585 1
a585 1
	  print_flags(tmp_str, instr_data->flags);
@


