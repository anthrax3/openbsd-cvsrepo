head	1.4;
access;
symbols
	OPENBSD_6_1_BASE:1.4
	OPENBSD_6_0:1.4.0.50
	OPENBSD_6_0_BASE:1.4
	OPENBSD_5_9:1.4.0.46
	OPENBSD_5_9_BASE:1.4
	OPENBSD_5_8:1.4.0.48
	OPENBSD_5_8_BASE:1.4
	OPENBSD_5_7:1.4.0.40
	OPENBSD_5_7_BASE:1.4
	OPENBSD_5_6:1.4.0.44
	OPENBSD_5_6_BASE:1.4
	OPENBSD_5_5:1.4.0.42
	OPENBSD_5_5_BASE:1.4
	OPENBSD_5_4:1.4.0.38
	OPENBSD_5_4_BASE:1.4
	OPENBSD_5_3:1.4.0.36
	OPENBSD_5_3_BASE:1.4
	OPENBSD_5_2:1.4.0.34
	OPENBSD_5_2_BASE:1.4
	OPENBSD_5_1_BASE:1.4
	OPENBSD_5_1:1.4.0.32
	OPENBSD_5_0:1.4.0.30
	OPENBSD_5_0_BASE:1.4
	OPENBSD_4_9:1.4.0.28
	OPENBSD_4_9_BASE:1.4
	OPENBSD_4_8:1.4.0.26
	OPENBSD_4_8_BASE:1.4
	OPENBSD_4_7:1.4.0.22
	OPENBSD_4_7_BASE:1.4
	OPENBSD_4_6:1.4.0.24
	OPENBSD_4_6_BASE:1.4
	OPENBSD_4_5:1.4.0.20
	OPENBSD_4_5_BASE:1.4
	OPENBSD_4_4:1.4.0.18
	OPENBSD_4_4_BASE:1.4
	OPENBSD_4_3:1.4.0.16
	OPENBSD_4_3_BASE:1.4
	OPENBSD_4_2:1.4.0.14
	OPENBSD_4_2_BASE:1.4
	OPENBSD_4_1:1.4.0.12
	OPENBSD_4_1_BASE:1.4
	OPENBSD_4_0:1.4.0.10
	OPENBSD_4_0_BASE:1.4
	OPENBSD_3_9:1.4.0.8
	OPENBSD_3_9_BASE:1.4
	OPENBSD_3_8:1.4.0.6
	OPENBSD_3_8_BASE:1.4
	OPENBSD_3_7:1.4.0.4
	OPENBSD_3_7_BASE:1.4
	BINUTILS_2_15:1.1.1.4
	OPENBSD_3_6:1.4.0.2
	OPENBSD_3_6_BASE:1.4
	BINUTILS-2_14:1.1.1.4
	OPENBSD_3_5:1.3.0.8
	OPENBSD_3_5_BASE:1.3
	OPENBSD_3_4:1.3.0.6
	OPENBSD_3_4_BASE:1.3
	OPENBSD_3_3:1.3.0.4
	OPENBSD_3_3_BASE:1.3
	OPENBSD_3_2:1.3.0.2
	OPENBSD_3_2_BASE:1.3
	binutils-2_11_2:1.1.1.3
	OPENBSD_3_1:1.2.0.8
	OPENBSD_3_1_BASE:1.2
	OPENBSD_3_0:1.2.0.6
	OPENBSD_3_0_BASE:1.2
	BINUTILS-2_10_1:1.1.1.2
	OPENBSD_2_9:1.2.0.4
	OPENBSD_2_9_BASE:1.2
	OPENBSD_2_8:1.2.0.2
	OPENBSD_2_8_BASE:1.2
	BINUTILS-2_10:1.1.1.2
	OPENBSD_2_7:1.1.0.18
	OPENBSD_2_7_BASE:1.1
	new-binutils:1.1.0.16
	OPENBSD_2_6:1.1.0.14
	OPENBSD_2_6_BASE:1.1
	OPENBSD_2_5:1.1.0.12
	OPENBSD_2_5_BASE:1.1
	OPENBSD_2_4:1.1.0.10
	OPENBSD_2_4_BASE:1.1
	OPENBSD_2_3:1.1.0.8
	OPENBSD_2_3_BASE:1.1
	OPENBSD_2_2:1.1.0.6
	OPENBSD_2_2_BASE:1.1
	BINUTILS-2_8_1:1.1.1.1
	OPENBSD_2_1:1.1.0.4
	OPENBSD_2_1_BASE:1.1
	CYGNUS-961112:1.1.1.1
	OPENBSD_2_0:1.1.0.2
	OPENBSD_2_0_BASE:1.1
	CYGNUS-960904:1.1.1.1
	CYGNUS-960609:1.1.1.1
	CYGNUS-960607:1.1.1.1
	CYGNUS:1.1.1
	FSF_2_6:1.1.1.1
	FSF:1.1.1;
locks; strict;
comment	@ * @;


1.4
date	2004.05.17.21.54.56;	author drahn;	state Exp;
branches;
next	1.3;

1.3
date	2002.05.13.17.07.45;	author fgsch;	state Exp;
branches;
next	1.2;

1.2
date	2000.09.12.19.13.02;	author espie;	state Exp;
branches;
next	1.1;

1.1
date	96.01.08.11.09.07;	author niklas;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	96.01.08.11.09.07;	author niklas;	state Exp;
branches;
next	1.1.1.2;

1.1.1.2
date	2000.09.12.14.48.01;	author espie;	state Exp;
branches;
next	1.1.1.3;

1.1.1.3
date	2002.05.13.13.59.04;	author fgsch;	state Exp;
branches;
next	1.1.1.4;

1.1.1.4
date	2004.05.17.20.42.47;	author drahn;	state Exp;
branches;
next	;


desc
@@


1.4
log
@Resolve merge conflicts, adjust method of W^X handing (.sh files)
remove testsuites (not useable) remove mmalloc (not part of new binutils).
@
text
@/* Disassemble WDC 65816 instructions.
   Copyright 1995, 1998, 2000, 2001, 2002 Free Software Foundation, Inc.

This program is free software; you can redistribute it and/or modify
it under the terms of the GNU General Public License as published by
the Free Software Foundation; either version 2 of the License, or
(at your option) any later version.

This program is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
GNU General Public License for more details.

You should have received a copy of the GNU General Public License
along with this program; if not, write to the Free Software
Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA 02111-1307, USA.  */

#include <stdio.h>
#include "sysdep.h"
#define STATIC_TABLE
#define DEFINE_TABLE

#include "w65-opc.h"
#include "dis-asm.h"

static fprintf_ftype fpr;
static void *stream;
static struct disassemble_info *local_info;

static void print_operand PARAMS ((int, char *, unsigned int *));

#if 0
static char *lname[] = { "r0","r1","r2","r3","r4","r5","r6","r7","s0" };

static char *
findname (val)
     unsigned int val;
{
  if (val >= 0x10 && val <= 0x20)
    return lname[(val - 0x10) / 2];
  return 0;
}
#endif
static void
print_operand (lookup, format, args)
     int lookup;
     char *format;
     unsigned int *args;
{
  int val;
  int c;

  while (*format)
    {
      switch (c = *format++)
	{
	case '$':
	  val = args[(*format++) - '0'];
	  if (lookup)
	    {
#if 0
	      name = findname (val);
	      if (name)
		fpr (stream, "%s", name);
	      else
#endif
		local_info->print_address_func (val, local_info);
	    }
	  else
	    fpr (stream, "0x%x", val);

	  break;
	default:
	  fpr (stream, "%c", c);
	  break;
	}
    }
}

int
print_insn_w65 (memaddr, info)
     bfd_vma memaddr;
     struct disassemble_info *info;
{
  int status = 0;
  unsigned char insn[4];
  const struct opinfo *op;
  int i;
  int X = 0;
  int M = 0;
  int args[2];
  stream = info->stream;
  fpr = info->fprintf_func;
  local_info = info;
  for (i = 0; i < 4 && status == 0; i++)
    {
      status = info->read_memory_func (memaddr + i, insn + i, 1, info);
    }

  for (op = optable; op->val != insn[0]; op++)
    ;

  fpr (stream, "%s", op->name);

  /* Prepare all the posible operand values.  */
  {
    int size = 1;
    int asR_W65_ABS8 = insn[1];
    int asR_W65_ABS16 = (insn[2] << 8) + asR_W65_ABS8;
    int asR_W65_ABS24 = (insn[3] << 16) + asR_W65_ABS16;
    int asR_W65_PCR8 = ((char) (asR_W65_ABS8)) + memaddr + 2;
    int asR_W65_PCR16 = ((short) (asR_W65_ABS16)) + memaddr + 3;

    switch (op->amode)
      {
	DISASM ();
      }

    return size;
  }
}
@


1.3
log
@resolve conflicts.
@
text
@d2 1
a2 1
   Copyright 1995, 1998, 2000 Free Software Foundation, Inc.
d29 3
d87 1
a87 1
  register struct opinfo *op;
@


1.2
log
@Help stupid cvs fixing basic conflicts.
@
text
@d2 1
a2 1
   Copyright (C) 1995, 1998 Free Software Foundation, Inc.
d18 1
a19 1
#include <stdio.h>
d26 3
a28 3
static   fprintf_ftype fpr;
static   void *stream;
static   struct disassemble_info *local_info;
d30 1
a30 1
static char *lname[] =  {"r0","r1","r2","r3","r4","r5","r6","r7","s0"};
d32 2
a33 1
static char *findname (val)
d45 1
a45 1
     unsigned     int *args;
d52 1
a52 1
      switch ( c = *format++) 
d56 1
a56 1
	  if (lookup) 
d59 1
a59 1
	      name = findname(val);
d61 1
a61 1
		fpr(stream, "%s", name);
d64 1
a64 1
		local_info->print_address_func (val, local_info);  
d71 1
a71 1
	  fpr(stream,"%c", c);
d76 3
a78 2
int 
print_insn_w65(memaddr, info)
a81 2


d86 1
a86 1
  int X =0;
d89 1
a89 1
stream = info->stream;
d91 2
a92 2
local_info =    info;
  for (i = 0; i <4 && status == 0; i++) 
d94 2
a95 2
    status = info->read_memory_func(memaddr+i, insn + i, 1, info);
  }
d97 2
d100 1
a100 2
  for (op = optable; op->val != insn[0]; op++) 
    ;
d102 1
a102 3
  fpr(stream,"%s", op->name);
  
  /* Prepare all the posible operand values */
d108 2
a109 2
    int asR_W65_PCR8 = ((char)(asR_W65_ABS8)) + memaddr + 2;
    int asR_W65_PCR16 = ((short)(asR_W65_ABS16)) + memaddr + 3;
d111 4
a114 3
    switch (op->amode) {
      DISASM();
    }
d116 1
a116 1
  return size;
a117 1

@


1.1
log
@Initial revision
@
text
@d2 1
a2 1
   Copyright (C) 1995 Free Software Foundation, Inc.
d18 1
d48 1
a48 1
  char *name;
@


1.1.1.1
log
@Initial GNU binutils 2.6 import
@
text
@@


1.1.1.2
log
@Import binutils-2.10
- only the binutils package (no gdb here)
- don't import libiberty and texinfo, they are elsewhere
- remove all .info* generated files
@
text
@d2 1
a2 1
   Copyright (C) 1995, 1998 Free Software Foundation, Inc.
a17 1
#include "sysdep.h"
d47 1
a47 1

@


1.1.1.3
log
@Import binutils-2.11.2
- only the binutils package (no gdb here)
- don't import libiberty and texinfo, they are elsewhere
- remove all .info* generated files
@
text
@d2 1
a2 1
   Copyright 1995, 1998, 2000 Free Software Foundation, Inc.
d18 1
a19 1
#include "sysdep.h"
d26 3
a28 3
static fprintf_ftype fpr;
static void *stream;
static struct disassemble_info *local_info;
d30 1
a30 1
static char *lname[] = { "r0","r1","r2","r3","r4","r5","r6","r7","s0" };
d32 1
a32 2
static char *
findname (val)
d44 1
a44 1
     unsigned int *args;
d51 1
a51 1
      switch (c = *format++)
d55 1
a55 1
	  if (lookup)
d58 1
a58 1
	      name = findname (val);
d60 1
a60 1
		fpr (stream, "%s", name);
d63 1
a63 1
		local_info->print_address_func (val, local_info);
d70 1
a70 1
	  fpr (stream, "%c", c);
d75 2
a76 3

int
print_insn_w65 (memaddr, info)
d80 2
d86 1
a86 1
  int X = 0;
d89 1
a89 1
  stream = info->stream;
d91 2
a92 2
  local_info = info;
  for (i = 0; i < 4 && status == 0; i++)
d94 3
a96 2
      status = info->read_memory_func (memaddr + i, insn + i, 1, info);
    }
d98 1
a98 1
  for (op = optable; op->val != insn[0]; op++)
d101 3
a103 3
  fpr (stream, "%s", op->name);

  /* Prepare all the posible operand values.  */
d109 2
a110 2
    int asR_W65_PCR8 = ((char) (asR_W65_ABS8)) + memaddr + 2;
    int asR_W65_PCR16 = ((short) (asR_W65_ABS16)) + memaddr + 3;
d112 3
a114 4
    switch (op->amode)
      {
	DISASM ();
      }
d116 1
a116 1
    return size;
d118 1
@


1.1.1.4
log
@import binutils 2.14 (excluding testsuites, .info files, and .po files)
@
text
@d2 1
a2 1
   Copyright 1995, 1998, 2000, 2001, 2002 Free Software Foundation, Inc.
a28 3

static void print_operand PARAMS ((int, char *, unsigned int *));

d84 1
a84 1
  const struct opinfo *op;
@


