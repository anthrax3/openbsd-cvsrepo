head	1.3;
access;
symbols
	CYGNUS-961112:1.1.2.1
	CYGNUS:1.1.0.2;
locks; strict;
comment	@ * @;


1.3
date	96.11.23.16.28.39;	author niklas;	state dead;
branches;
next	1.2;

1.2
date	96.11.23.03.55.32;	author niklas;	state Exp;
branches;
next	1.1;

1.1
date	96.11.19.14.42.35;	author niklas;	state dead;
branches
	1.1.2.1;
next	;

1.1.2.1
date	96.11.19.14.42.36;	author niklas;	state Exp;
branches;
next	;


desc
@@


1.3
log
@Remove accidentally committed dirs from the trunk
@
text
@/*  This file is part of the program psim.

    Copyright (C) 1994-1996, Andrew Cagney <cagney@@highland.com.au>

    This program is free software; you can redistribute it and/or modify
    it under the terms of the GNU General Public License as published by
    the Free Software Foundation; either version 2 of the License, or
    (at your option) any later version.

    This program is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
    GNU General Public License for more details.
 
    You should have received a copy of the GNU General Public License
    along with this program; if not, write to the Free Software
    Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA 02111-1307, USA.
 
    */


#ifndef N
#error "N must be #defined"
#endif

/* NOTE: see end of file for #undef of these macros */
#define unsigned_N XCONCAT2(unsigned_,N)
#define T2H_N XCONCAT2(T2H_,N)
#define H2T_N XCONCAT2(H2T_,N)

#define core_map_read_N XCONCAT2(core_map_read_,N)
#define core_map_write_N XCONCAT2(core_map_write_,N)

INLINE_CORE(unsigned_N)
core_map_read_N(core_map *map,
		unsigned_word addr,
		cpu *processor,
		unsigned_word cia)
{
  core_mapping *mapping = core_map_find_mapping(map,
						addr,
						sizeof(unsigned_N),
						processor,
						cia,
						1); /*abort*/
  if (WITH_CALLBACK_MEMORY && mapping->device != NULL) {
    unsigned_N data;
    if (device_io_read_buffer(mapping->device,
			      &data,
			      mapping->space,
			      addr,
			      sizeof(unsigned_N), /* nr_bytes */
			      processor,
			      cia) != sizeof(unsigned_N))
      error("core_read_,N() reader should not fail\n");
    return T2H_N(data);
  }
  else
    return T2H_N(*(unsigned_N*)core_translate(mapping, addr));
}



INLINE_CORE(void)
core_map_write_N(core_map *map,
		 unsigned_word addr,
		 unsigned_N val,
		 cpu *processor,
		 unsigned_word cia)
{
  core_mapping *mapping = core_map_find_mapping(map,
						addr,
						sizeof(unsigned_N),
						processor,
						cia,
						1); /*abort*/
  if (WITH_CALLBACK_MEMORY && mapping->device != NULL) {
    unsigned_N data = H2T_N(val);
    if (device_io_write_buffer(mapping->device,
			       &data,
			       mapping->space,
			       addr,
			       sizeof(unsigned_N), /* nr_bytes */
			       processor,
			       cia) != sizeof(unsigned_N))
      error("core_read_,N() writer should not fail\n");
  }
  else
    *(unsigned_N*)core_translate(mapping, addr) = H2T_N(val);
}

/* NOTE: see start of file for #define of these macros */
#undef unsigned_N
#undef T2H_N
#undef H2T_N
#undef core_map_read_N
#undef core_map_write_N
@


1.2
log
@Merge to Cygnus 961112 + add some support (not ready) for shared libs
@
text
@@


1.1
log
@file corefile-n.h was initially added on branch CYGNUS.
@
text
@d1 97
@


1.1.2.1
log
@Import of 961112 Cygnus binutils+gas+ld+gdb+gprof
@
text
@a0 97
/*  This file is part of the program psim.

    Copyright (C) 1994-1996, Andrew Cagney <cagney@@highland.com.au>

    This program is free software; you can redistribute it and/or modify
    it under the terms of the GNU General Public License as published by
    the Free Software Foundation; either version 2 of the License, or
    (at your option) any later version.

    This program is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
    GNU General Public License for more details.
 
    You should have received a copy of the GNU General Public License
    along with this program; if not, write to the Free Software
    Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA 02111-1307, USA.
 
    */


#ifndef N
#error "N must be #defined"
#endif

/* NOTE: see end of file for #undef of these macros */
#define unsigned_N XCONCAT2(unsigned_,N)
#define T2H_N XCONCAT2(T2H_,N)
#define H2T_N XCONCAT2(H2T_,N)

#define core_map_read_N XCONCAT2(core_map_read_,N)
#define core_map_write_N XCONCAT2(core_map_write_,N)

INLINE_CORE(unsigned_N)
core_map_read_N(core_map *map,
		unsigned_word addr,
		cpu *processor,
		unsigned_word cia)
{
  core_mapping *mapping = core_map_find_mapping(map,
						addr,
						sizeof(unsigned_N),
						processor,
						cia,
						1); /*abort*/
  if (WITH_CALLBACK_MEMORY && mapping->device != NULL) {
    unsigned_N data;
    if (device_io_read_buffer(mapping->device,
			      &data,
			      mapping->space,
			      addr,
			      sizeof(unsigned_N), /* nr_bytes */
			      processor,
			      cia) != sizeof(unsigned_N))
      error("core_read_,N() reader should not fail\n");
    return T2H_N(data);
  }
  else
    return T2H_N(*(unsigned_N*)core_translate(mapping, addr));
}



INLINE_CORE(void)
core_map_write_N(core_map *map,
		 unsigned_word addr,
		 unsigned_N val,
		 cpu *processor,
		 unsigned_word cia)
{
  core_mapping *mapping = core_map_find_mapping(map,
						addr,
						sizeof(unsigned_N),
						processor,
						cia,
						1); /*abort*/
  if (WITH_CALLBACK_MEMORY && mapping->device != NULL) {
    unsigned_N data = H2T_N(val);
    if (device_io_write_buffer(mapping->device,
			       &data,
			       mapping->space,
			       addr,
			       sizeof(unsigned_N), /* nr_bytes */
			       processor,
			       cia) != sizeof(unsigned_N))
      error("core_read_,N() writer should not fail\n");
  }
  else
    *(unsigned_N*)core_translate(mapping, addr) = H2T_N(val);
}

/* NOTE: see start of file for #define of these macros */
#undef unsigned_N
#undef T2H_N
#undef H2T_N
#undef core_map_read_N
#undef core_map_write_N
@
