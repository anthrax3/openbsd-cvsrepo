head	1.3;
access;
symbols
	OPENBSD_6_2:1.3.0.40
	OPENBSD_6_2_BASE:1.3
	OPENBSD_6_1:1.3.0.38
	OPENBSD_6_1_BASE:1.3
	OPENBSD_6_0:1.3.0.34
	OPENBSD_6_0_BASE:1.3
	OPENBSD_5_9:1.3.0.30
	OPENBSD_5_9_BASE:1.3
	OPENBSD_5_8:1.3.0.32
	OPENBSD_5_8_BASE:1.3
	OPENBSD_5_7:1.3.0.24
	OPENBSD_5_7_BASE:1.3
	OPENBSD_5_6:1.3.0.28
	OPENBSD_5_6_BASE:1.3
	OPENBSD_5_5:1.3.0.26
	OPENBSD_5_5_BASE:1.3
	OPENBSD_5_4:1.3.0.22
	OPENBSD_5_4_BASE:1.3
	OPENBSD_5_3:1.3.0.20
	OPENBSD_5_3_BASE:1.3
	OPENBSD_5_2:1.3.0.18
	OPENBSD_5_2_BASE:1.3
	OPENBSD_5_1_BASE:1.3
	OPENBSD_5_1:1.3.0.16
	OPENBSD_5_0:1.3.0.14
	OPENBSD_5_0_BASE:1.3
	OPENBSD_4_9:1.3.0.12
	OPENBSD_4_9_BASE:1.3
	OPENBSD_4_8:1.3.0.10
	OPENBSD_4_8_BASE:1.3
	OPENBSD_4_7:1.3.0.6
	OPENBSD_4_7_BASE:1.3
	OPENBSD_4_6:1.3.0.8
	OPENBSD_4_6_BASE:1.3
	OPENBSD_4_5:1.3.0.4
	OPENBSD_4_5_BASE:1.3
	OPENBSD_4_4:1.3.0.2
	OPENBSD_4_4_BASE:1.3
	OPENBSD_4_3:1.2.0.16
	OPENBSD_4_3_BASE:1.2
	OPENBSD_4_2:1.2.0.14
	OPENBSD_4_2_BASE:1.2
	OPENBSD_4_1:1.2.0.12
	OPENBSD_4_1_BASE:1.2
	OPENBSD_4_0:1.2.0.10
	OPENBSD_4_0_BASE:1.2
	OPENBSD_3_9:1.2.0.8
	OPENBSD_3_9_BASE:1.2
	OPENBSD_3_8:1.2.0.6
	OPENBSD_3_8_BASE:1.2
	OPENBSD_3_7:1.2.0.4
	OPENBSD_3_7_BASE:1.2
	OPENBSD_3_6:1.2.0.2
	OPENBSD_3_6_BASE:1.2;
locks; strict;
comment	@# @;


1.3
date	2008.06.13.23.33.32;	author kurt;	state Exp;
branches;
next	1.2;

1.2
date	2004.05.30.22.05.40;	author drahn;	state Exp;
branches;
next	1.1;

1.1
date	2004.05.17.21.54.50;	author drahn;	state Exp;
branches;
next	;


desc
@@


1.3
log
@Fixup ldscripts for i386 when linked with -pie (no change to non-pie
ldscripts). Correct the xd and xdc ldscripts (pie and pie + combreloc)
on i386 and add two new variants for pie + combreloc + Z and pie + Z on
all arches. ok drahn@@
@
text
@. ${srcdir}/emulparams/elf_i386.sh
. ${srcdir}/emulparams/elf_obsd.sh

if test "${LD_FLAG#"${LD_FLAG%pie}"}" = "pie"; then
  TEXT_START_ADDR=0x0
  if test "${LD_FLAG%%(cpie|pie)}" = "Z"; then
    RODATA_PADSIZE=${MAXPAGESIZE}
  else
    RODATA_PADSIZE=0x20000000
  fi
else
  if test "${LD_FLAG%%(cpie|pie)}" = "Z"; then
    TEXT_START_ADDR=0x08048000
    RODATA_PADSIZE=${MAXPAGESIZE}
  else
    TEXT_START_ADDR=0x1C000000
    RODATA_PADSIZE=0x20000000
  fi
fi

RODATA_ALIGN=". = ALIGN(${RODATA_PADSIZE})"
RODATA_ALIGN_ADD="${TEXT_START_ADDR}"

unset PAD_PLT
@


1.2
log
@emacs undump is very sensative to the section ordering, For W^X a couple
of sections were moved for protections purposes. This causes problems
with emacs undump. Only move the sections if the W^X padding is active.
Generate the scripts properly for newer binutils, on i386 if -Z is
active, move the executable start address back to the classic base address.
@
text
@d4 7
a10 3
if test "$LD_FLAG" = "Z"
then
TEXT_START_ADDR=0x08048000
d12 7
a18 1
TEXT_START_ADDR=0x1C000000
a20 1
RODATA_PADSIZE=0x20000000
@


1.1
log
@Resolve merge conflicts, adjust method of W^X handing (.sh files)
remove testsuites (not useable) remove mmalloc (not part of new binutils).
@
text
@d4 4
d9 1
@

