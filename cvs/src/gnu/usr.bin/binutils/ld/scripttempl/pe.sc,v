head	1.5;
access;
symbols
	OPENBSD_6_2_BASE:1.5
	OPENBSD_6_1:1.5.0.52
	OPENBSD_6_1_BASE:1.5
	OPENBSD_6_0:1.5.0.48
	OPENBSD_6_0_BASE:1.5
	OPENBSD_5_9:1.5.0.44
	OPENBSD_5_9_BASE:1.5
	OPENBSD_5_8:1.5.0.46
	OPENBSD_5_8_BASE:1.5
	OPENBSD_5_7:1.5.0.38
	OPENBSD_5_7_BASE:1.5
	OPENBSD_5_6:1.5.0.42
	OPENBSD_5_6_BASE:1.5
	OPENBSD_5_5:1.5.0.40
	OPENBSD_5_5_BASE:1.5
	OPENBSD_5_4:1.5.0.36
	OPENBSD_5_4_BASE:1.5
	OPENBSD_5_3:1.5.0.34
	OPENBSD_5_3_BASE:1.5
	OPENBSD_5_2:1.5.0.32
	OPENBSD_5_2_BASE:1.5
	OPENBSD_5_1_BASE:1.5
	OPENBSD_5_1:1.5.0.30
	OPENBSD_5_0:1.5.0.28
	OPENBSD_5_0_BASE:1.5
	OPENBSD_4_9:1.5.0.26
	OPENBSD_4_9_BASE:1.5
	OPENBSD_4_8:1.5.0.24
	OPENBSD_4_8_BASE:1.5
	OPENBSD_4_7:1.5.0.20
	OPENBSD_4_7_BASE:1.5
	OPENBSD_4_6:1.5.0.22
	OPENBSD_4_6_BASE:1.5
	OPENBSD_4_5:1.5.0.18
	OPENBSD_4_5_BASE:1.5
	OPENBSD_4_4:1.5.0.16
	OPENBSD_4_4_BASE:1.5
	OPENBSD_4_3:1.5.0.14
	OPENBSD_4_3_BASE:1.5
	OPENBSD_4_2:1.5.0.12
	OPENBSD_4_2_BASE:1.5
	OPENBSD_4_1:1.5.0.10
	OPENBSD_4_1_BASE:1.5
	OPENBSD_4_0:1.5.0.8
	OPENBSD_4_0_BASE:1.5
	OPENBSD_3_9:1.5.0.6
	OPENBSD_3_9_BASE:1.5
	OPENBSD_3_8:1.5.0.4
	OPENBSD_3_8_BASE:1.5
	OPENBSD_3_7:1.5.0.2
	OPENBSD_3_7_BASE:1.5
	BINUTILS_2_15:1.1.1.6
	OPENBSD_3_6:1.4.0.2
	OPENBSD_3_6_BASE:1.4
	BINUTILS-2_14:1.1.1.5
	OPENBSD_3_5:1.3.0.16
	OPENBSD_3_5_BASE:1.3
	OPENBSD_3_4:1.3.0.14
	OPENBSD_3_4_BASE:1.3
	OPENBSD_3_3:1.3.0.12
	OPENBSD_3_3_BASE:1.3
	OPENBSD_3_2:1.3.0.10
	OPENBSD_3_2_BASE:1.3
	binutils-2_11_2:1.1.1.4
	OPENBSD_3_1:1.3.0.8
	OPENBSD_3_1_BASE:1.3
	OPENBSD_3_0:1.3.0.6
	OPENBSD_3_0_BASE:1.3
	BINUTILS-2_10_1:1.1.1.4
	OPENBSD_2_9:1.3.0.4
	OPENBSD_2_9_BASE:1.3
	OPENBSD_2_8:1.3.0.2
	OPENBSD_2_8_BASE:1.3
	BINUTILS-2_10:1.1.1.4
	OPENBSD_2_7:1.2.0.18
	OPENBSD_2_7_BASE:1.2
	new-binutils:1.2.0.16
	OPENBSD_2_6:1.2.0.14
	OPENBSD_2_6_BASE:1.2
	OPENBSD_2_5:1.2.0.12
	OPENBSD_2_5_BASE:1.2
	OPENBSD_2_4:1.2.0.10
	OPENBSD_2_4_BASE:1.2
	OPENBSD_2_3:1.2.0.8
	OPENBSD_2_3_BASE:1.2
	OPENBSD_2_2:1.2.0.6
	OPENBSD_2_2_BASE:1.2
	BINUTILS-2_8_1:1.1.1.3
	OPENBSD_2_1:1.2.0.4
	OPENBSD_2_1_BASE:1.2
	CYGNUS-961112:1.1.1.2
	OPENBSD_2_0:1.2.0.2
	OPENBSD_2_0_BASE:1.2
	CYGNUS-960904:1.1.1.2
	CYGNUS-960609:1.1.1.2
	CYGNUS:1.1.1
	FSF_2_6:1.1.1.1
	FSF:1.1.1;
locks; strict;
comment	@# @;


1.5
date	2004.11.02.20.45.52;	author miod;	state Exp;
branches;
next	1.4;

1.4
date	2004.05.17.21.54.51;	author drahn;	state Exp;
branches;
next	1.3;

1.3
date	2000.09.12.19.12.51;	author espie;	state Exp;
branches;
next	1.2;

1.2
date	96.06.10.10.55.02;	author niklas;	state Exp;
branches;
next	1.1;

1.1
date	96.01.08.11.09.45;	author niklas;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	96.01.08.11.09.45;	author niklas;	state Exp;
branches;
next	1.1.1.2;

1.1.1.2
date	96.06.09.19.36.19;	author niklas;	state Exp;
branches;
next	1.1.1.3;

1.1.1.3
date	97.05.29.09.29.26;	author niklas;	state Exp;
branches;
next	1.1.1.4;

1.1.1.4
date	2000.09.12.14.48.26;	author espie;	state Exp;
branches;
next	1.1.1.5;

1.1.1.5
date	2004.05.17.20.42.54;	author drahn;	state Exp;
branches;
next	1.1.1.6;

1.1.1.6
date	2004.11.02.20.23.28;	author miod;	state Exp;
branches;
next	;


desc
@@


1.5
log
@Merge conflicts, bringing our changes back in:
- extra $(SHELL) and sugar for make (so that files not mode +x still work)
- safer temp file handling
- our W^X binary layout changes in ld
- OpenBSD policy for library file selection in ld
- arm and m88k changes which were not merged in time for official 2.15
- bfd core file handling
- a couple typos

New for 2.15:
- ld(1) and as(1) manpages now generated at build time
- binutils/stabs.c reverted to use our in-tree libiberty for now
- we still use our VIA C3 crypto code over stock binutils, as it recognizes
  more instructions
- new emulations for OpenBSD on mips64 machines, to help OpenBSD/sgi
- relaxed %f# handling in gas on OpenBSD/sparc64 (same as was in 2.14)

Tested on all platforms by various people; special thanks to sturm@@ and
otto@@.
@
text
@# Linker script for PE.

if test -z "${RELOCATEABLE_OUTPUT_FORMAT}"; then
  RELOCATEABLE_OUTPUT_FORMAT=${OUTPUT_FORMAT}
fi

# We can't easily and portably get an unquoted $ in a shell
# substitution, so we do this instead.
# Sorting of the .foo$* sections is required by the definition of
# grouped sections in PE.
# Sorting of the file names in R_IDATA is required by the
# current implementation of dlltool (this could probably be changed to
# use grouped sections instead).
if test "${RELOCATING}"; then
  R_TEXT='*(SORT(.text$*))'
  R_DATA='*(SORT(.data$*))'
  R_RDATA='*(SORT(.rdata$*))'
  R_IDATA='
    SORT(*)(.idata$2)
    SORT(*)(.idata$3)
    /* These zeroes mark the end of the import list.  */
    LONG (0); LONG (0); LONG (0); LONG (0); LONG (0);
    SORT(*)(.idata$4)
    SORT(*)(.idata$5)
    SORT(*)(.idata$6)
    SORT(*)(.idata$7)'
  R_CRT='*(SORT(.CRT$*))'
  R_TLS='
    *(.tls)
    *(.tls$)
    *(SORT(.tls$*))'
  R_RSRC='*(SORT(.rsrc$*))'
else
  R_TEXT=
  R_DATA=
  R_RDATA=
  R_IDATA=
  R_CRT=
  R_RSRC=
fi

cat <<EOF
${RELOCATING+OUTPUT_FORMAT(${OUTPUT_FORMAT})}
${RELOCATING-OUTPUT_FORMAT(${RELOCATEABLE_OUTPUT_FORMAT})}
${OUTPUT_ARCH+OUTPUT_ARCH(${OUTPUT_ARCH})}

${LIB_SEARCH_DIRS}

ENTRY(${ENTRY})

SECTIONS
{
  .text ${RELOCATING+ __image_base__ + __section_alignment__ } : 
  {
    ${RELOCATING+ *(.init)}
    *(.text)
    ${R_TEXT}
    *(.glue_7t)
    *(.glue_7)
    ${CONSTRUCTING+ ___CTOR_LIST__ = .; __CTOR_LIST__ = . ; 
			LONG (-1); *(SORT(.ctors.*)); *(.ctors); *(.ctor); LONG (0); }
    ${CONSTRUCTING+ ___DTOR_LIST__ = .; __DTOR_LIST__ = . ; 
			LONG (-1); *(SORT(.dtors.*)); *(.dtors); *(.dtor);  LONG (0); }
    ${RELOCATING+ *(.fini)}
    /* ??? Why is .gcc_exc here?  */
    ${RELOCATING+ *(.gcc_exc)}
    ${RELOCATING+PROVIDE (etext = .);}
    *(.gcc_except_table)
  }

  /* The Cygwin32 library uses a section to avoid copying certain data
     on fork.  This used to be named ".data$nocopy".  The linker used
     to include this between __data_start__ and __data_end__, but that
     breaks building the cygwin32 dll.  Instead, we name the section
     ".data_cygwin_nocopy" and explictly include it after __data_end__. */

  .data ${RELOCATING+BLOCK(__section_alignment__)} : 
  {
    ${RELOCATING+__data_start__ = . ;}
    *(.data)
    *(.data2)
    ${R_DATA}
    ${RELOCATING+__data_end__ = . ;}
    ${RELOCATING+*(.data_cygwin_nocopy)}
  }

  .rdata ${RELOCATING+BLOCK(__section_alignment__)} :
  {
    *(.rdata)
    ${R_RDATA}
    *(.eh_frame)
    ${RELOCATING+___RUNTIME_PSEUDO_RELOC_LIST__ = .;}
    ${RELOCATING+__RUNTIME_PSEUDO_RELOC_LIST__ = .;}
    *(.rdata_runtime_pseudo_reloc)
    ${RELOCATING+___RUNTIME_PSEUDO_RELOC_LIST_END__ = .;}
    ${RELOCATING+__RUNTIME_PSEUDO_RELOC_LIST_END__ = .;}
  }

  .pdata ${RELOCATING+BLOCK(__section_alignment__)} :
  {
    *(.pdata)
  }

  .bss ${RELOCATING+BLOCK(__section_alignment__)} :
  {
    ${RELOCATING+__bss_start__ = . ;}
    *(.bss)
    *(COMMON)
    ${RELOCATING+__bss_end__ = . ;}
  }

  .edata ${RELOCATING+BLOCK(__section_alignment__)} :
  {
    *(.edata)
  }

  /DISCARD/ :
  {
    *(.debug\$S)
    *(.debug\$T)
    *(.debug\$F)
    *(.drectve)
  }

  .idata ${RELOCATING+BLOCK(__section_alignment__)} :
  {
    /* This cannot currently be handled with grouped sections.
	See pe.em:sort_sections.  */
    ${R_IDATA}
  }
  .CRT ${RELOCATING+BLOCK(__section_alignment__)} :
  { 					
    ${R_CRT}
  }

  .tls ${RELOCATING+BLOCK(__section_alignment__)} :
  { 					
    ${R_TLS}
  }

  .endjunk ${RELOCATING+BLOCK(__section_alignment__)} :
  {
    /* end is deprecated, don't use it */
    ${RELOCATING+PROVIDE (end = .);}
    ${RELOCATING+PROVIDE ( _end = .);}
    ${RELOCATING+ __end__ = .;}
  }

  .rsrc ${RELOCATING+BLOCK(__section_alignment__)} :
  { 					
    *(.rsrc)
    ${R_RSRC}
  }

  .reloc ${RELOCATING+BLOCK(__section_alignment__)} :
  { 					
    *(.reloc)
  }

  .stab ${RELOCATING+BLOCK(__section_alignment__)} ${RELOCATING+(NOLOAD)} :
  {
    [ .stab ]
  }

  .stabstr ${RELOCATING+BLOCK(__section_alignment__)} ${RELOCATING+(NOLOAD)} :
  {
    [ .stabstr ]
  }

}
EOF
@


1.4
log
@Resolve merge conflicts, adjust method of W^X handing (.sh files)
remove testsuites (not useable) remove mmalloc (not part of new binutils).
@
text
@d28 4
d134 5
@


1.3
log
@Help stupid cvs fixing basic conflicts.
@
text
@d57 1
a57 1
			LONG (-1); *(.ctors); *(.ctor); LONG (0); }
d59 1
a59 1
			LONG (-1); *(.dtors); *(.dtor);  LONG (0); }
d63 1
a63 1
    ${RELOCATING+ etext = .;}
d88 5
d135 2
a136 2
    ${RELOCATING+ end = .;}
    ${RELOCATING+ _end = .;}
@


1.2
log
@Bring Cygnus versions into the trunk, keeping our local patches
@
text
@d3 35
d39 4
a42 1
OUTPUT_FORMAT(${OUTPUT_FORMAT})
d45 1
a45 1
ENTRY(_mainCRTStartup)
d53 3
d64 1
a64 3
    /* Grouped section support currently must be explicitly provided for
	in the linker script.  */
    *(.text\$)
d67 7
a73 8
  .bss BLOCK(__section_alignment__)  :
  {
    __bss_start__ = . ;
    *(.bss)
    *(COMMON)
    __bss_end__ = . ;
  }
  .data BLOCK(__section_alignment__) : 
d75 1
a75 1
    __data_start__ = . ; 
d78 3
a80 4
    __data_end__ = . ; 
    /* Grouped section support currently must be explicitly provided for
	in the linker script.  */
    *(.data\$)
d83 1
a83 1
  .rdata BLOCK(__section_alignment__) :
d86 2
a87 3
    /* Grouped section support currently must be explicitly provided for
	in the linker script.  */
    *(.rdata\$)
d90 14
a103 1
  .edata BLOCK(__section_alignment__) :
d108 1
a108 1
  /DISCARD/ BLOCK(__section_alignment__) :
d116 1
a116 1
  .idata BLOCK(__section_alignment__) :
d120 1
a120 11
    *(.idata\$2)
    *(.idata\$3)
    *(.idata\$4)
    *(.idata\$5)
    *(.idata\$6)
    *(.idata\$7)
  }
  .CRT BLOCK(__section_alignment__) :
  { 					
    /* Grouped sections are used to handle .CRT\$foo.  */
    *(.CRT\$)
d122 1
a122 1
  .rsrc BLOCK(__section_alignment__) :
d124 1
a124 2
    /* Grouped sections are used to handle .rsrc\$0[12].  */
    *(.rsrc\$)
d127 1
a127 1
  .endjunk BLOCK(__section_alignment__) :
d131 1
d135 12
a146 1
  .stab BLOCK(__section_alignment__)  ${RELOCATING+(NOLOAD)} : 
d151 1
a151 1
  .stabstr BLOCK(__section_alignment__) ${RELOCATING+(NOLOAD)} :
a155 4
  .reloc BLOCK(__section_alignment__) :
  { 					
    *(.reloc)
  }
@


1.1
log
@Initial revision
@
text
@d2 1
a2 4
# These are substituted in as variables in order to get '}' in a shell
# conditional expansion.
INIT='.init : { *(.init) }'
FINI='.fini : { *(.fini) }'
a10 1

d12 15
a26 10
	{
	    ${RELOCATING+ *(.init);}
	    *(.text)
	    ${CONSTRUCTING+ ___CTOR_LIST__ = .; __CTOR_LIST__ = . ; 
		              LONG (-1); *(.ctors); *(.ctor); LONG (0); }
            ${CONSTRUCTING+ ___DTOR_LIST__ = .; __DTOR_LIST__ = . ; 
				LONG (-1); *(.dtors); *(.dtor);  LONG (0); }
	    ${RELOCATING+ *(.fini);}
	    ${RELOCATING+ etext  =  .};
	  }
d29 6
a34 7
	{
	__bss_start__ = . ;
	*(.bss) ;
	*(COMMON);
	__bss_end__ = . ;
	${RELOCATING+ end =  .};
	}
d36 9
a44 6
	{
	__data_start__ = . ; 
	*(.data);
	*(.data2);
 	__data_end__ = . ; 
	}
d47 1
a47 1
  { 					
d49 3
a51 1
    ;
d54 3
a56 4


  .edata BLOCK(__section_alignment__) :   { 					
    *(.edata)   ;
d59 2
a60 1
  .junk BLOCK(__section_alignment__) : {
a64 1
    ;
d68 3
a70 1
  { 					
a76 1
    ;
d80 2
a81 14
    *(.CRT\$XCA)
    *(.CRT\$XCC)
    *(.CRT\$XCZ)
    *(.CRT\$XIA)
    *(.CRT\$XIC)
    *(.CRT\$XIZ)
    *(.CRT\$XLA)
    *(.CRT\$XLZ)
    *(.CRT\$XPA)
    *(.CRT\$XPX)
    *(.CRT\$XPZ)
    *(.CRT\$XTA)
    *(.CRT\$XTZ)
    ;
d85 2
a86 3
    *(.rsrc\$01)
    *(.rsrc\$02)
    ;
d88 6
a93 7
  .junk BLOCK(__section_alignment__) :
  { 					
    *(.debug\$S)
    *(.debug\$T)
    *(.debug\$F)
    *(.drectve)
    ;
a105 1

a108 1
    ;
a109 2


@


1.1.1.1
log
@Initial GNU binutils 2.6 import
@
text
@@


1.1.1.2
log
@Import of binutils, gas, ld & gprof from Cygnus 960609 tree
@
text
@d2 4
a5 1

d14 1
d16 10
a25 15
  {
    ${RELOCATING+ *(.init)}
    *(.text)
    ${CONSTRUCTING+ ___CTOR_LIST__ = .; __CTOR_LIST__ = . ; 
			LONG (-1); *(.ctors); *(.ctor); LONG (0); }
    ${CONSTRUCTING+ ___DTOR_LIST__ = .; __DTOR_LIST__ = . ; 
			LONG (-1); *(.dtors); *(.dtor);  LONG (0); }
    ${RELOCATING+ *(.fini)}
    /* ??? Why is .gcc_exc here?  */
    ${RELOCATING+ *(.gcc_exc)}
    ${RELOCATING+ etext = .;}
    /* Grouped section support currently must be explicitly provided for
	in the linker script.  */
    *(.text\$)
  }
d28 7
a34 6
  {
    __bss_start__ = . ;
    *(.bss)
    *(COMMON)
    __bss_end__ = . ;
  }
d36 6
a41 9
  {
    __data_start__ = . ; 
    *(.data)
    *(.data2)
    __data_end__ = . ; 
    /* Grouped section support currently must be explicitly provided for
	in the linker script.  */
    *(.data\$)
  }
d44 1
a44 1
  {
d46 1
a46 3
    /* Grouped section support currently must be explicitly provided for
	in the linker script.  */
    *(.rdata\$)
d49 4
a52 3
  .edata BLOCK(__section_alignment__) :
  {
    *(.edata)
d55 1
a55 2
  /DISCARD/ BLOCK(__section_alignment__) :
  {
d60 1
d64 1
a64 3
  {
    /* This cannot currently be handled with grouped sections.
	See pe.em:sort_sections.  */
d71 1
d75 14
a88 2
    /* Grouped sections are used to handle .CRT\$foo.  */
    *(.CRT\$)
d92 3
a94 2
    /* Grouped sections are used to handle .rsrc\$0[12].  */
    *(.rsrc\$)
d96 7
a102 6

  .endjunk BLOCK(__section_alignment__) :
  {
    /* end is deprecated, don't use it */
    ${RELOCATING+ end = .;}
    ${RELOCATING+ __end__ = .;}
d115 1
d119 1
d121 2
@


1.1.1.3
log
@Import of binutils-2.8.1 from Cygnus/FSF
@
text
@a25 1
    *(.gcc_except_table)
@


1.1.1.4
log
@Import binutils-2.10
- only the binutils package (no gdb here)
- don't import libiberty and texinfo, they are elsewhere
- remove all .info* generated files
@
text
@a2 35
if test -z "${RELOCATEABLE_OUTPUT_FORMAT}"; then
  RELOCATEABLE_OUTPUT_FORMAT=${OUTPUT_FORMAT}
fi

# We can't easily and portably get an unquoted $ in a shell
# substitution, so we do this instead.
# Sorting of the .foo$* sections is required by the definition of
# grouped sections in PE.
# Sorting of the file names in R_IDATA is required by the
# current implementation of dlltool (this could probably be changed to
# use grouped sections instead).
if test "${RELOCATING}"; then
  R_TEXT='*(SORT(.text$*))'
  R_DATA='*(SORT(.data$*))'
  R_RDATA='*(SORT(.rdata$*))'
  R_IDATA='
    SORT(*)(.idata$2)
    SORT(*)(.idata$3)
    /* These zeroes mark the end of the import list.  */
    LONG (0); LONG (0); LONG (0); LONG (0); LONG (0);
    SORT(*)(.idata$4)
    SORT(*)(.idata$5)
    SORT(*)(.idata$6)
    SORT(*)(.idata$7)'
  R_CRT='*(SORT(.CRT$*))'
  R_RSRC='*(SORT(.rsrc$*))'
else
  R_TEXT=
  R_DATA=
  R_RDATA=
  R_IDATA=
  R_CRT=
  R_RSRC=
fi

d4 1
a4 4
${RELOCATING+OUTPUT_FORMAT(${OUTPUT_FORMAT})}
${RELOCATING-OUTPUT_FORMAT(${RELOCATEABLE_OUTPUT_FORMAT})}
${OUTPUT_ARCH+OUTPUT_ARCH(${OUTPUT_ARCH})}

d7 1
a7 1
ENTRY(${ENTRY})
a14 3
    ${R_TEXT}
    *(.glue_7t)
    *(.glue_7)
d23 3
d29 8
a36 7
  /* The Cygwin32 library uses a section to avoid copying certain data
     on fork.  This used to be named ".data$nocopy".  The linker used
     to include this between __data_start__ and __data_end__, but that
     breaks building the cygwin32 dll.  Instead, we name the section
     ".data_cygwin_nocopy" and explictly include it after __data_end__. */

  .data ${RELOCATING+BLOCK(__section_alignment__)} : 
d38 1
a38 1
    ${RELOCATING+__data_start__ = . ;}
d41 4
a44 3
    ${R_DATA}
    ${RELOCATING+__data_end__ = . ;}
    ${RELOCATING+*(.data_cygwin_nocopy)}
d47 1
a47 1
  .rdata ${RELOCATING+BLOCK(__section_alignment__)} :
d50 3
a52 2
    ${R_RDATA}
    *(.eh_frame)
d55 1
a55 14
  .pdata ${RELOCATING+BLOCK(__section_alignment__)} :
  {
    *(.pdata)
  }

  .bss ${RELOCATING+BLOCK(__section_alignment__)} :
  {
    ${RELOCATING+__bss_start__ = . ;}
    *(.bss)
    *(COMMON)
    ${RELOCATING+__bss_end__ = . ;}
  }

  .edata ${RELOCATING+BLOCK(__section_alignment__)} :
d60 1
a60 1
  /DISCARD/ :
d68 1
a68 1
  .idata ${RELOCATING+BLOCK(__section_alignment__)} :
d72 11
a82 1
    ${R_IDATA}
d84 1
a84 1
  .CRT ${RELOCATING+BLOCK(__section_alignment__)} :
d86 2
a87 1
    ${R_CRT}
d90 1
a90 1
  .endjunk ${RELOCATING+BLOCK(__section_alignment__)} :
a93 1
    ${RELOCATING+ _end = .;}
d97 1
a97 12
  .rsrc ${RELOCATING+BLOCK(__section_alignment__)} :
  { 					
    *(.rsrc)
    ${R_RSRC}
  }

  .reloc ${RELOCATING+BLOCK(__section_alignment__)} :
  { 					
    *(.reloc)
  }

  .stab ${RELOCATING+BLOCK(__section_alignment__)} ${RELOCATING+(NOLOAD)} :
d102 1
a102 1
  .stabstr ${RELOCATING+BLOCK(__section_alignment__)} ${RELOCATING+(NOLOAD)} :
d107 4
@


1.1.1.5
log
@import binutils 2.14 (excluding testsuites, .info files, and .po files)
@
text
@d57 1
a57 1
			LONG (-1); *(SORT(.ctors.*)); *(.ctors); *(.ctor); LONG (0); }
d59 1
a59 1
			LONG (-1); *(SORT(.dtors.*)); *(.dtors); *(.dtor);  LONG (0); }
d63 1
a63 1
    ${RELOCATING+PROVIDE (etext = .);}
a87 5
    ${RELOCATING+___RUNTIME_PSEUDO_RELOC_LIST__ = .;}
    ${RELOCATING+__RUNTIME_PSEUDO_RELOC_LIST__ = .;}
    *(.rdata_runtime_pseudo_reloc)
    ${RELOCATING+___RUNTIME_PSEUDO_RELOC_LIST_END__ = .;}
    ${RELOCATING+__RUNTIME_PSEUDO_RELOC_LIST_END__ = .;}
d130 2
a131 2
    ${RELOCATING+PROVIDE (end = .);}
    ${RELOCATING+PROVIDE ( _end = .);}
@


1.1.1.6
log
@Binutils 2.15, with testsuites removed, and without gdb and libiberty.
@
text
@a27 4
  R_TLS='
    *(.tls)
    *(.tls$)
    *(SORT(.tls$*))'
a129 5
  }

  .tls ${RELOCATING+BLOCK(__section_alignment__)} :
  { 					
    ${R_TLS}
@


