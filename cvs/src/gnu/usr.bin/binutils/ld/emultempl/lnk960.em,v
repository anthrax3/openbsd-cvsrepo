head	1.6;
access;
symbols
	OPENBSD_6_1_BASE:1.6
	OPENBSD_6_0:1.6.0.48
	OPENBSD_6_0_BASE:1.6
	OPENBSD_5_9:1.6.0.44
	OPENBSD_5_9_BASE:1.6
	OPENBSD_5_8:1.6.0.46
	OPENBSD_5_8_BASE:1.6
	OPENBSD_5_7:1.6.0.38
	OPENBSD_5_7_BASE:1.6
	OPENBSD_5_6:1.6.0.42
	OPENBSD_5_6_BASE:1.6
	OPENBSD_5_5:1.6.0.40
	OPENBSD_5_5_BASE:1.6
	OPENBSD_5_4:1.6.0.36
	OPENBSD_5_4_BASE:1.6
	OPENBSD_5_3:1.6.0.34
	OPENBSD_5_3_BASE:1.6
	OPENBSD_5_2:1.6.0.32
	OPENBSD_5_2_BASE:1.6
	OPENBSD_5_1_BASE:1.6
	OPENBSD_5_1:1.6.0.30
	OPENBSD_5_0:1.6.0.28
	OPENBSD_5_0_BASE:1.6
	OPENBSD_4_9:1.6.0.26
	OPENBSD_4_9_BASE:1.6
	OPENBSD_4_8:1.6.0.24
	OPENBSD_4_8_BASE:1.6
	OPENBSD_4_7:1.6.0.20
	OPENBSD_4_7_BASE:1.6
	OPENBSD_4_6:1.6.0.22
	OPENBSD_4_6_BASE:1.6
	OPENBSD_4_5:1.6.0.18
	OPENBSD_4_5_BASE:1.6
	OPENBSD_4_4:1.6.0.16
	OPENBSD_4_4_BASE:1.6
	OPENBSD_4_3:1.6.0.14
	OPENBSD_4_3_BASE:1.6
	OPENBSD_4_2:1.6.0.12
	OPENBSD_4_2_BASE:1.6
	OPENBSD_4_1:1.6.0.10
	OPENBSD_4_1_BASE:1.6
	OPENBSD_4_0:1.6.0.8
	OPENBSD_4_0_BASE:1.6
	OPENBSD_3_9:1.6.0.6
	OPENBSD_3_9_BASE:1.6
	OPENBSD_3_8:1.6.0.4
	OPENBSD_3_8_BASE:1.6
	OPENBSD_3_7:1.6.0.2
	OPENBSD_3_7_BASE:1.6
	BINUTILS_2_15:1.1.1.6
	OPENBSD_3_6:1.5.0.2
	OPENBSD_3_6_BASE:1.5
	BINUTILS-2_14:1.1.1.5
	OPENBSD_3_5:1.4.0.8
	OPENBSD_3_5_BASE:1.4
	OPENBSD_3_4:1.4.0.6
	OPENBSD_3_4_BASE:1.4
	OPENBSD_3_3:1.4.0.4
	OPENBSD_3_3_BASE:1.4
	OPENBSD_3_2:1.4.0.2
	OPENBSD_3_2_BASE:1.4
	binutils-2_11_2:1.1.1.4
	OPENBSD_3_1:1.3.0.8
	OPENBSD_3_1_BASE:1.3
	OPENBSD_3_0:1.3.0.6
	OPENBSD_3_0_BASE:1.3
	BINUTILS-2_10_1:1.1.1.3
	OPENBSD_2_9:1.3.0.4
	OPENBSD_2_9_BASE:1.3
	OPENBSD_2_8:1.3.0.2
	OPENBSD_2_8_BASE:1.3
	BINUTILS-2_10:1.1.1.3
	OPENBSD_2_7:1.2.0.18
	OPENBSD_2_7_BASE:1.2
	new-binutils:1.2.0.16
	OPENBSD_2_6:1.2.0.14
	OPENBSD_2_6_BASE:1.2
	OPENBSD_2_5:1.2.0.12
	OPENBSD_2_5_BASE:1.2
	OPENBSD_2_4:1.2.0.10
	OPENBSD_2_4_BASE:1.2
	OPENBSD_2_3:1.2.0.8
	OPENBSD_2_3_BASE:1.2
	OPENBSD_2_2:1.2.0.6
	OPENBSD_2_2_BASE:1.2
	BINUTILS-2_8_1:1.1.1.2
	OPENBSD_2_1:1.2.0.4
	OPENBSD_2_1_BASE:1.2
	CYGNUS-961112:1.1.1.2
	OPENBSD_2_0:1.2.0.2
	OPENBSD_2_0_BASE:1.2
	CYGNUS-960904:1.1.1.2
	CYGNUS-960609:1.1.1.2
	CYGNUS:1.1.1
	FSF_2_6:1.1.1.1
	FSF:1.1.1;
locks; strict;
comment	@# @;


1.6
date	2004.11.02.20.45.51;	author miod;	state Exp;
branches;
next	1.5;

1.5
date	2004.05.17.21.54.51;	author drahn;	state Exp;
branches;
next	1.4;

1.4
date	2002.05.13.17.07.43;	author fgsch;	state Exp;
branches;
next	1.3;

1.3
date	2000.09.12.19.12.49;	author espie;	state Exp;
branches;
next	1.2;

1.2
date	96.06.10.10.54.54;	author niklas;	state Exp;
branches;
next	1.1;

1.1
date	96.01.08.11.09.38;	author niklas;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	96.01.08.11.09.38;	author niklas;	state Exp;
branches;
next	1.1.1.2;

1.1.1.2
date	96.06.09.19.36.06;	author niklas;	state Exp;
branches;
next	1.1.1.3;

1.1.1.3
date	2000.09.12.14.48.22;	author espie;	state Exp;
branches;
next	1.1.1.4;

1.1.1.4
date	2002.05.13.14.01.54;	author fgsch;	state Exp;
branches;
next	1.1.1.5;

1.1.1.5
date	2004.05.17.20.42.53;	author drahn;	state Exp;
branches;
next	1.1.1.6;

1.1.1.6
date	2004.11.02.20.23.26;	author miod;	state Exp;
branches;
next	;


desc
@@


1.6
log
@Merge conflicts, bringing our changes back in:
- extra $(SHELL) and sugar for make (so that files not mode +x still work)
- safer temp file handling
- our W^X binary layout changes in ld
- OpenBSD policy for library file selection in ld
- arm and m88k changes which were not merged in time for official 2.15
- bfd core file handling
- a couple typos

New for 2.15:
- ld(1) and as(1) manpages now generated at build time
- binutils/stabs.c reverted to use our in-tree libiberty for now
- we still use our VIA C3 crypto code over stock binutils, as it recognizes
  more instructions
- new emulations for OpenBSD on mips64 machines, to help OpenBSD/sgi
- relaxed %f# handling in gas on OpenBSD/sparc64 (same as was in 2.14)

Tested on all platforms by various people; special thanks to sturm@@ and
otto@@.
@
text
@# This shell script emits a C file. -*- C -*-
# It does some substitutions.
cat >e${EMULATION_NAME}.c <<EOF
/* intel coff loader emulation specific stuff
   Copyright 1991, 1992, 1994, 1995, 1996, 1999, 2000, 2001, 2002, 2003
   Free Software Foundation, Inc.
   Written by Steve Chamberlain steve@@cygnus.com

This file is part of GLD, the Gnu Linker.

GLD is free software; you can redistribute it and/or modify
it under the terms of the GNU General Public License as published by
the Free Software Foundation; either version 2, or (at your option)
any later version.

GLD is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
GNU General Public License for more details.

You should have received a copy of the GNU General Public License
along with GLD; see the file COPYING.  If not, write to
the Free Software Foundation, 59 Temple Place - Suite 330, Boston, MA 02111-1307, USA.  */

#include "libiberty.h"
#include "bfd.h"
#include "sysdep.h"
#include "bfdlink.h"

/*#include "archures.h"*/
#include "ld.h"
#include "ldmain.h"
#include "ldmisc.h"
#include "ldexp.h"
#include "ldlang.h"
#include "ldfile.h"
#include "ldemul.h"

typedef struct lib_list {
  char *name;
  struct lib_list *next;
} lib_list_type;

static lib_list_type *hll_list;
static lib_list_type **hll_list_tail = &hll_list;

static lib_list_type *syslib_list;
static lib_list_type **syslib_list_tail = &syslib_list;


static void
append (lib_list_type ***list, char *name)
{
  lib_list_type *element = (lib_list_type *) xmalloc (sizeof (lib_list_type));

  element->name = name;
  element->next = (lib_list_type *) NULL;
  **list = element;
  *list = &element->next;

}

static bfd_boolean had_hll = FALSE;
static bfd_boolean had_hll_name = FALSE;

static void
lnk960_hll (char *name)
{
  had_hll = TRUE;
  if (name != (char *) NULL)
    {
      had_hll_name = TRUE;
      append (&hll_list_tail, name);
    }
}

static void
lnk960_syslib (char *name)
{
  append (&syslib_list_tail, name);
}


#ifdef GNU960

static void
lnk960_before_parse (void)
{
  static char *env_variables[] = { "G960LIB", "G960BASE", 0 };
  char **p;
  char *env ;

  for (p = env_variables; *p; p++)
    {
      env = (char *) getenv (*p);
      if (env)
	ldfile_add_library_path (concat (env, "/lib/libcoff", ""), FALSE);
    }

  env = (char *) getenv ("I960BASE");
  if (env)
    ldfile_add_library_path(concat (env, "/lib", ""), FALSE);

  ldfile_output_architecture = bfd_arch_i960;
  ldfile_output_machine = bfd_mach_i960_core;
}

#else	/* not GNU960 */

static void
lnk960_before_parse (void)
{
  char *name = getenv ("I960BASE");

  if (name == (char *) NULL)
    {
      name = getenv("G960BASE");
      if (name == (char *) NULL)
	einfo ("%P%F I960BASE and G960BASE not set\n");
    }


  ldfile_add_library_path (concat (name, "/lib", ""), FALSE);
  ldfile_output_architecture = bfd_arch_i960;
  ldfile_output_machine = bfd_mach_i960_core;
}

#endif	/* GNU960 */


static void
add_on (lib_list_type *list, lang_input_file_enum_type search)
{
  while (list)
    {
      lang_add_input_file (list->name, search, (char *) NULL);
      list = list->next;
    }
}

static void
lnk960_after_parse (void)
{
  /* If there has been no arch, default to -KB */
  if (ldfile_output_machine_name[0] == 0)
    ldfile_add_arch ("KB");

  /* if there has been no hll list then add our own */

  if (had_hll && !had_hll_name)
    {
      append (&hll_list_tail, "cg");
      if (ldfile_output_machine == bfd_mach_i960_ka_sa
	  || ldfile_output_machine == bfd_mach_i960_ca)
	append (&hll_list_tail, "fpg");
    }

  add_on (hll_list, lang_input_file_is_l_enum);
  add_on (syslib_list, lang_input_file_is_search_file_enum);
}

static void
lnk960_before_allocation (void)
{
}

static void
lnk960_after_allocation (void)
{
  if (!link_info.relocatable)
    {
      lang_abs_symbol_at_end_of (".text", "_etext");
      lang_abs_symbol_at_end_of (".data", "_edata");
      lang_abs_symbol_at_beginning_of (".bss", "_bss_start");
      lang_abs_symbol_at_end_of (".bss", "_end");
    }
}


static struct
 {
   unsigned  long number;
   char *name;
 }
machine_table[] =
{
  { bfd_mach_i960_core	,"CORE" },
  { bfd_mach_i960_kb_sb	,"KB" },
  { bfd_mach_i960_kb_sb	,"SB" },
  { bfd_mach_i960_mc	,"MC" },
  { bfd_mach_i960_xa	,"XA" },
  { bfd_mach_i960_ca	,"CA" },
  { bfd_mach_i960_ka_sa	,"KA" },
  { bfd_mach_i960_ka_sa	,"SA" },
  { bfd_mach_i960_jx	,"JX" },
  { bfd_mach_i960_hx	,"HX" },

  { bfd_mach_i960_core	,"core" },
  { bfd_mach_i960_kb_sb	,"kb" },
  { bfd_mach_i960_kb_sb	,"sb" },
  { bfd_mach_i960_mc	,"mc" },
  { bfd_mach_i960_xa	,"xa" },
  { bfd_mach_i960_ca	,"ca" },
  { bfd_mach_i960_ka_sa	,"ka" },
  { bfd_mach_i960_ka_sa	,"sa" },
  { bfd_mach_i960_jx	,"jx" },
  { bfd_mach_i960_hx	,"hx" },

  { 0, (char *) NULL }
};

static void
lnk960_set_output_arch (void)
{
  /* Set the output architecture and machine if possible */
  unsigned int i;
  ldfile_output_machine = bfd_mach_i960_core;
  for (i= 0; machine_table[i].name != (char*) NULL; i++)
    {
      if (strcmp (ldfile_output_machine_name, machine_table[i].name) == 0)
	{
	  ldfile_output_machine = machine_table[i].number;
	  break;
	}
    }
  bfd_set_arch_mach (output_bfd, ldfile_output_architecture,
		     ldfile_output_machine);
}

static char *
lnk960_choose_target (int argc ATTRIBUTE_UNUSED, char **argv ATTRIBUTE_UNUSED)
{
#ifdef GNU960

  return bfd_make_targ_name (BFD_COFF_FORMAT, 0);

#else

  char *from_outside = getenv (TARGET_ENVIRON);
  if (from_outside != (char *) NULL)
    return from_outside;
#ifdef LNK960_LITTLE
  return "coff-Intel-little";
#else
  return "coff-Intel-big";
#endif
#endif

}

static char *
lnk960_get_script (int *isfile)
EOF

if test -n "$COMPILE_IN"
then
# Scripts compiled in.

# sed commands to quote an ld script as a C string.
sc="-f stringify.sed"

cat >>e${EMULATION_NAME}.c <<EOF
{
  *isfile = 0;

  if (link_info.relocatable && config.build_constructors)
    return
EOF
sed $sc ldscripts/${EMULATION_NAME}.xu                 >> e${EMULATION_NAME}.c
echo '  ; else if (link_info.relocatable) return'     >> e${EMULATION_NAME}.c
sed $sc ldscripts/${EMULATION_NAME}.xr                 >> e${EMULATION_NAME}.c
echo '  ; else if (!config.text_read_only) return'     >> e${EMULATION_NAME}.c
sed $sc ldscripts/${EMULATION_NAME}.xbn                >> e${EMULATION_NAME}.c
echo '  ; else if (!config.magic_demand_paged) return' >> e${EMULATION_NAME}.c
sed $sc ldscripts/${EMULATION_NAME}.xn                 >> e${EMULATION_NAME}.c
echo '  ; else return'                                 >> e${EMULATION_NAME}.c
sed $sc ldscripts/${EMULATION_NAME}.x                  >> e${EMULATION_NAME}.c
echo '; }'                                             >> e${EMULATION_NAME}.c

else
# Scripts read from the filesystem.

cat >>e${EMULATION_NAME}.c <<EOF
{
  *isfile = 1;

  if (link_info.relocatable && config.build_constructors)
    return "ldscripts/${EMULATION_NAME}.xu";
  else if (link_info.relocatable)
    return "ldscripts/${EMULATION_NAME}.xr";
  else if (!config.text_read_only)
    return "ldscripts/${EMULATION_NAME}.xbn";
  else if (!config.magic_demand_paged)
    return "ldscripts/${EMULATION_NAME}.xn";
  else
    return "ldscripts/${EMULATION_NAME}.x";
}
EOF

fi

cat >>e${EMULATION_NAME}.c <<EOF

struct ld_emulation_xfer_struct ld_lnk960_emulation =
{
  lnk960_before_parse,
  lnk960_syslib,
  lnk960_hll,
  lnk960_after_parse,
  NULL,			/* after_open */
  lnk960_after_allocation,
  lnk960_set_output_arch,
  lnk960_choose_target,
  lnk960_before_allocation,
  lnk960_get_script,
  "lnk960",
  "",
  NULL,	/* finish */
  NULL,	/* create output section statements */
  NULL,	/* open dynamic archive */
  NULL,	/* place orphan */
  NULL,	/* set symbols */
  NULL,	/* parse args */
  NULL,	/* add_options */
  NULL,	/* handle_option */
  NULL,	/* unrecognized file */
  NULL,	/* list options */
  NULL,	/* recognized file */
  NULL,	/* find_potential_libraries */
  NULL	/* new_vers_pattern */
};
EOF
@


1.5
log
@Resolve merge conflicts, adjust method of W^X handing (.sh files)
remove testsuites (not useable) remove mmalloc (not part of new binutils).
@
text
@a49 12
static void append PARAMS ((lib_list_type ***, char *));
static void lnk960_hll PARAMS ((char *));
static void lnk960_syslib PARAMS ((char *));
static void lnk960_before_parse PARAMS ((void));
static void add_on PARAMS ((lib_list_type *, lang_input_file_enum_type));
static void lnk960_after_parse PARAMS ((void));
static void lnk960_before_allocation PARAMS ((void));
static void lnk960_after_allocation PARAMS ((void));
static void lnk960_set_output_arch PARAMS ((void));
static char *lnk960_choose_target PARAMS ((int, char **));
static char *lnk960_get_script PARAMS ((int *));

d52 1
a52 3
append (list, name)
     lib_list_type ***list;
     char *name;
d67 1
a67 2
lnk960_hll (name)
     char *name;
d77 2
a78 3
static void 
lnk960_syslib (name)
     char *name;
d86 2
a87 2
static void 
lnk960_before_parse ()
d110 2
a111 2
static void 
lnk960_before_parse ()
d132 1
a132 3
add_on (list, search)
     lib_list_type *list;
     lang_input_file_enum_type search;
d140 1
d142 1
a142 1
lnk960_after_parse ()
d149 1
a149 1
  
d157 1
a157 1
  
d163 1
a163 1
lnk960_before_allocation ()
d168 1
a168 1
lnk960_after_allocation ()
d170 1
a170 1
  if (!link_info.relocateable)
d183 1
a183 1
   char *name; 
d213 1
a213 1
lnk960_set_output_arch ()
d231 1
a231 3
lnk960_choose_target (argc, argv)
    int argc ATTRIBUTE_UNUSED;
    char **argv ATTRIBUTE_UNUSED;
d252 1
a252 2
lnk960_get_script (isfile)
     int *isfile;
d263 1
a263 1
{			     
d266 1
a266 1
  if (link_info.relocateable && config.build_constructors)
d270 1
a270 1
echo '  ; else if (link_info.relocateable) return'     >> e${EMULATION_NAME}.c
d284 1
a284 1
{			     
d287 1
a287 1
  if (link_info.relocateable && config.build_constructors)
d289 1
a289 1
  else if (link_info.relocateable)
d304 1
a304 1
struct ld_emulation_xfer_struct ld_lnk960_emulation = 
@


1.4
log
@resolve conflicts.
@
text
@d5 1
a5 1
   Copyright 1991, 1992, 1994, 1995, 1996, 1999, 2000
d50 12
d64 1
a64 1
append(list, name)
d68 1
a68 2
  lib_list_type *element = 
    (lib_list_type *)(xmalloc(sizeof(lib_list_type)));
d71 1
a71 1
  element->next = (lib_list_type *)NULL;
d77 2
a78 2
static boolean had_hll = false;
static boolean had_hll_name = false;
d81 1
a81 1
lnk960_hll(name)
d84 6
a89 5
  had_hll = true;
  if (name != (char *)NULL) {
    had_hll_name = true;
    append(&hll_list_tail, name);
  }
d93 1
a93 1
lnk960_syslib(name)
d96 1
a96 1
  append(&syslib_list_tail,name);
d103 1
a103 1
lnk960_before_parse()
d109 5
a113 4
  for ( p = env_variables; *p; p++ ){
    env =  (char *) getenv(*p);
    if (env) {
      ldfile_add_library_path(concat(env,"/lib/libcoff",""), false);
a114 1
  }
d116 3
a118 4
  env= (char *) getenv("I960BASE");
  if ( env ) {
    ldfile_add_library_path(concat(env,"/lib",""), false);
  }
d127 1
a127 1
lnk960_before_parse()
d129 1
a129 1
  char *name = getenv("I960BASE");
d131 5
a135 4
  if (name == (char *)NULL) {
    name = getenv("G960BASE");
    if (name == (char *)NULL) {
      einfo("%P%F I960BASE and G960BASE not set\n");
a136 1
  }
d139 1
a139 1
  ldfile_add_library_path(concat(name,"/lib",""), false);
d148 1
a148 1
add_on(list, search)
d152 5
a156 6
  while (list) {
    lang_add_input_file(list->name,
			search,
			(char *)NULL);
    list = list->next;
  }
d159 1
a159 1
lnk960_after_parse()
d162 2
a163 3
  if (ldfile_output_machine_name[0] ==0) {
    ldfile_add_arch("KB");
  }
d167 6
a172 7
  if(had_hll && !had_hll_name) {
    append(&hll_list_tail,"cg");
    if (ldfile_output_machine == bfd_mach_i960_ka_sa ||
  	ldfile_output_machine == bfd_mach_i960_ca) {
        {
	  append(&hll_list_tail,"fpg");
        }
a173 1
  }
d175 2
a176 2
  add_on(hll_list, lang_input_file_is_l_enum);
  add_on(syslib_list, lang_input_file_is_search_file_enum);
d180 1
a180 1
lnk960_before_allocation()
d185 1
a185 1
lnk960_after_allocation()
d187 7
a193 6
  if (link_info.relocateable == false) {
    lang_abs_symbol_at_end_of(".text","_etext");
    lang_abs_symbol_at_end_of(".data","_edata");
    lang_abs_symbol_at_beginning_of(".bss","_bss_start");
    lang_abs_symbol_at_end_of(".bss","_end");
  }
d230 1
a230 1
lnk960_set_output_arch()
d235 7
a241 4
  for (i= 0; machine_table[i].name != (char*)NULL; i++) {
    if (strcmp(ldfile_output_machine_name,machine_table[i].name)==0) {
      ldfile_output_machine = machine_table[i].number;
      break;
d243 2
a244 2
  }
  bfd_set_arch_mach(output_bfd, ldfile_output_architecture, ldfile_output_machine);
d248 3
a250 1
lnk960_choose_target()
d254 1
a254 1
  return bfd_make_targ_name(BFD_COFF_FORMAT, 0);
d258 2
a259 2
  char *from_outside = getenv(TARGET_ENVIRON);
  if (from_outside != (char *)NULL)
d271 1
a271 1
lnk960_get_script(isfile)
d286 1
a286 1
  if (link_info.relocateable == true && config.build_constructors == true)
d289 10
a298 10
sed $sc ldscripts/${EMULATION_NAME}.xu                     >> e${EMULATION_NAME}.c
echo '  ; else if (link_info.relocateable == true) return' >> e${EMULATION_NAME}.c
sed $sc ldscripts/${EMULATION_NAME}.xr                     >> e${EMULATION_NAME}.c
echo '  ; else if (!config.text_read_only) return'         >> e${EMULATION_NAME}.c
sed $sc ldscripts/${EMULATION_NAME}.xbn                    >> e${EMULATION_NAME}.c
echo '  ; else if (!config.magic_demand_paged) return'     >> e${EMULATION_NAME}.c
sed $sc ldscripts/${EMULATION_NAME}.xn                     >> e${EMULATION_NAME}.c
echo '  ; else return'                                     >> e${EMULATION_NAME}.c
sed $sc ldscripts/${EMULATION_NAME}.x                      >> e${EMULATION_NAME}.c
echo '; }'                                                 >> e${EMULATION_NAME}.c
d307 1
a307 1
  if (link_info.relocateable == true && config.build_constructors == true)
d309 1
a309 1
  else if (link_info.relocateable == true)
d344 2
d349 2
a350 1
  NULL 	/* find_potential_libraries */
@


1.3
log
@Help stupid cvs fixing basic conflicts.
@
text
@d5 2
a6 1
   Copyright (C) 1991, 93, 94, 95, 96, 1999 Free Software Foundation, Inc.
d32 1
a32 1
#include "ldemul.h"
d37 1
a37 1
#include "ldmain.h"
@


1.2
log
@Bring Cygnus versions into the trunk, keeping our local patches
@
text
@d5 1
a5 1
   Copyright (C) 1991, 1993 Free Software Foundation, Inc.
d266 1
a266 5
sc='s/["\\]/\\&/g
s/$/\\n\\/
1s/^/"/
$s/$/n"/
'
d269 1
d273 1
a273 10
    return `sed "$sc" ldscripts/${EMULATION_NAME}.xu`;
  else if (link_info.relocateable == true)
    return `sed "$sc" ldscripts/${EMULATION_NAME}.xr`;
  else if (!config.text_read_only)
    return `sed "$sc" ldscripts/${EMULATION_NAME}.xbn`;
  else if (!config.magic_demand_paged)
    return `sed "$sc" ldscripts/${EMULATION_NAME}.xn`;
  else
    return `sed "$sc" ldscripts/${EMULATION_NAME}.x`;
}
d275 10
d323 11
a333 1
  ""
@


1.1
log
@Initial revision
@
text
@d203 2
d214 2
@


1.1.1.1
log
@Initial GNU binutils 2.6 import
@
text
@@


1.1.1.2
log
@Import of binutils, gas, ld & gprof from Cygnus 960609 tree
@
text
@a202 2
  { bfd_mach_i960_jx	,"JX" },
  { bfd_mach_i960_hx	,"HX" },
a211 2
  { bfd_mach_i960_jx	,"jx" },
  { bfd_mach_i960_hx	,"hx" },
@


1.1.1.3
log
@Import binutils-2.10
- only the binutils package (no gdb here)
- don't import libiberty and texinfo, they are elsewhere
- remove all .info* generated files
@
text
@d5 1
a5 1
   Copyright (C) 1991, 93, 94, 95, 96, 1999 Free Software Foundation, Inc.
d266 5
a270 1
sc="-f stringify.sed"
a272 1
{			     
d276 10
a285 1
    return
a286 10
sed $sc ldscripts/${EMULATION_NAME}.xu                     >> e${EMULATION_NAME}.c
echo '  ; else if (link_info.relocateable == true) return' >> e${EMULATION_NAME}.c
sed $sc ldscripts/${EMULATION_NAME}.xr                     >> e${EMULATION_NAME}.c
echo '  ; else if (!config.text_read_only) return'         >> e${EMULATION_NAME}.c
sed $sc ldscripts/${EMULATION_NAME}.xbn                    >> e${EMULATION_NAME}.c
echo '  ; else if (!config.magic_demand_paged) return'     >> e${EMULATION_NAME}.c
sed $sc ldscripts/${EMULATION_NAME}.xn                     >> e${EMULATION_NAME}.c
echo '  ; else return'                                     >> e${EMULATION_NAME}.c
sed $sc ldscripts/${EMULATION_NAME}.x                      >> e${EMULATION_NAME}.c
echo '; }'                                                 >> e${EMULATION_NAME}.c
d325 1
a325 11
  "",
  NULL,	/* finish */
  NULL,	/* create output section statements */
  NULL,	/* open dynamic archive */
  NULL,	/* place orphan */
  NULL,	/* set symbols */
  NULL,	/* parse args */
  NULL,	/* unrecognized file */
  NULL,	/* list options */
  NULL,	/* recognized file */
  NULL 	/* find_potential_libraries */
@


1.1.1.4
log
@Import binutils-2.11.2
- only the binutils package (no gdb here)
- don't import libiberty and texinfo, they are elsewhere
- remove all .info* generated files
@
text
@d5 1
a5 2
   Copyright 1991, 1992, 1994, 1995, 1996, 1999, 2000
   Free Software Foundation, Inc.
d31 1
a31 1
#include "ldmain.h"
d36 1
a36 1
#include "ldemul.h"
@


1.1.1.5
log
@import binutils 2.14 (excluding testsuites, .info files, and .po files)
@
text
@d5 1
a5 1
   Copyright 1991, 1992, 1994, 1995, 1996, 1999, 2000, 2001, 2002, 2003
a49 12
static void append PARAMS ((lib_list_type ***, char *));
static void lnk960_hll PARAMS ((char *));
static void lnk960_syslib PARAMS ((char *));
static void lnk960_before_parse PARAMS ((void));
static void add_on PARAMS ((lib_list_type *, lang_input_file_enum_type));
static void lnk960_after_parse PARAMS ((void));
static void lnk960_before_allocation PARAMS ((void));
static void lnk960_after_allocation PARAMS ((void));
static void lnk960_set_output_arch PARAMS ((void));
static char *lnk960_choose_target PARAMS ((int, char **));
static char *lnk960_get_script PARAMS ((int *));

d52 1
a52 1
append (list, name)
d56 2
a57 1
  lib_list_type *element = (lib_list_type *) xmalloc (sizeof (lib_list_type));
d60 1
a60 1
  element->next = (lib_list_type *) NULL;
d66 2
a67 2
static bfd_boolean had_hll = FALSE;
static bfd_boolean had_hll_name = FALSE;
d70 1
a70 1
lnk960_hll (name)
d73 5
a77 6
  had_hll = TRUE;
  if (name != (char *) NULL)
    {
      had_hll_name = TRUE;
      append (&hll_list_tail, name);
    }
d81 1
a81 1
lnk960_syslib (name)
d84 1
a84 1
  append (&syslib_list_tail, name);
d91 1
a91 1
lnk960_before_parse ()
d97 4
a100 5
  for (p = env_variables; *p; p++)
    {
      env = (char *) getenv (*p);
      if (env)
	ldfile_add_library_path (concat (env, "/lib/libcoff", ""), FALSE);
d102 1
d104 4
a107 3
  env = (char *) getenv ("I960BASE");
  if (env)
    ldfile_add_library_path(concat (env, "/lib", ""), FALSE);
d116 1
a116 1
lnk960_before_parse ()
d118 1
a118 1
  char *name = getenv ("I960BASE");
d120 4
a123 5
  if (name == (char *) NULL)
    {
      name = getenv("G960BASE");
      if (name == (char *) NULL)
	einfo ("%P%F I960BASE and G960BASE not set\n");
d125 1
d128 1
a128 1
  ldfile_add_library_path (concat (name, "/lib", ""), FALSE);
d137 1
a137 1
add_on (list, search)
d141 6
a146 5
  while (list)
    {
      lang_add_input_file (list->name, search, (char *) NULL);
      list = list->next;
    }
d149 1
a149 1
lnk960_after_parse ()
d152 3
a154 2
  if (ldfile_output_machine_name[0] == 0)
    ldfile_add_arch ("KB");
d158 7
a164 6
  if (had_hll && !had_hll_name)
    {
      append (&hll_list_tail, "cg");
      if (ldfile_output_machine == bfd_mach_i960_ka_sa
	  || ldfile_output_machine == bfd_mach_i960_ca)
	append (&hll_list_tail, "fpg");
d166 1
d168 2
a169 2
  add_on (hll_list, lang_input_file_is_l_enum);
  add_on (syslib_list, lang_input_file_is_search_file_enum);
d173 1
a173 1
lnk960_before_allocation ()
d178 1
a178 1
lnk960_after_allocation ()
d180 6
a185 7
  if (!link_info.relocateable)
    {
      lang_abs_symbol_at_end_of (".text", "_etext");
      lang_abs_symbol_at_end_of (".data", "_edata");
      lang_abs_symbol_at_beginning_of (".bss", "_bss_start");
      lang_abs_symbol_at_end_of (".bss", "_end");
    }
d222 1
a222 1
lnk960_set_output_arch ()
d227 4
a230 7
  for (i= 0; machine_table[i].name != (char*) NULL; i++)
    {
      if (strcmp (ldfile_output_machine_name, machine_table[i].name) == 0)
	{
	  ldfile_output_machine = machine_table[i].number;
	  break;
	}
d232 2
a233 2
  bfd_set_arch_mach (output_bfd, ldfile_output_architecture,
		     ldfile_output_machine);
d237 1
a237 3
lnk960_choose_target (argc, argv)
    int argc ATTRIBUTE_UNUSED;
    char **argv ATTRIBUTE_UNUSED;
d241 1
a241 1
  return bfd_make_targ_name (BFD_COFF_FORMAT, 0);
d245 2
a246 2
  char *from_outside = getenv (TARGET_ENVIRON);
  if (from_outside != (char *) NULL)
d258 1
a258 1
lnk960_get_script (isfile)
d273 1
a273 1
  if (link_info.relocateable && config.build_constructors)
d276 10
a285 10
sed $sc ldscripts/${EMULATION_NAME}.xu                 >> e${EMULATION_NAME}.c
echo '  ; else if (link_info.relocateable) return'     >> e${EMULATION_NAME}.c
sed $sc ldscripts/${EMULATION_NAME}.xr                 >> e${EMULATION_NAME}.c
echo '  ; else if (!config.text_read_only) return'     >> e${EMULATION_NAME}.c
sed $sc ldscripts/${EMULATION_NAME}.xbn                >> e${EMULATION_NAME}.c
echo '  ; else if (!config.magic_demand_paged) return' >> e${EMULATION_NAME}.c
sed $sc ldscripts/${EMULATION_NAME}.xn                 >> e${EMULATION_NAME}.c
echo '  ; else return'                                 >> e${EMULATION_NAME}.c
sed $sc ldscripts/${EMULATION_NAME}.x                  >> e${EMULATION_NAME}.c
echo '; }'                                             >> e${EMULATION_NAME}.c
d294 1
a294 1
  if (link_info.relocateable && config.build_constructors)
d296 1
a296 1
  else if (link_info.relocateable)
a330 2
  NULL,	/* add_options */
  NULL,	/* handle_option */
d334 1
a334 2
  NULL,	/* find_potential_libraries */
  NULL	/* new_vers_pattern */
@


1.1.1.6
log
@Binutils 2.15, with testsuites removed, and without gdb and libiberty.
@
text
@d50 12
d64 3
a66 1
append (lib_list_type ***list, char *name)
d81 2
a82 1
lnk960_hll (char *name)
d92 3
a94 2
static void
lnk960_syslib (char *name)
d102 2
a103 2
static void
lnk960_before_parse (void)
d126 2
a127 2
static void
lnk960_before_parse (void)
d148 3
a150 1
add_on (lib_list_type *list, lang_input_file_enum_type search)
a157 1

d159 1
a159 1
lnk960_after_parse (void)
d166 1
a166 1

d174 1
a174 1

d180 1
a180 1
lnk960_before_allocation (void)
d185 1
a185 1
lnk960_after_allocation (void)
d187 1
a187 1
  if (!link_info.relocatable)
d200 1
a200 1
   char *name;
d230 1
a230 1
lnk960_set_output_arch (void)
d248 3
a250 1
lnk960_choose_target (int argc ATTRIBUTE_UNUSED, char **argv ATTRIBUTE_UNUSED)
d271 2
a272 1
lnk960_get_script (int *isfile)
d283 1
a283 1
{
d286 1
a286 1
  if (link_info.relocatable && config.build_constructors)
d290 1
a290 1
echo '  ; else if (link_info.relocatable) return'     >> e${EMULATION_NAME}.c
d304 1
a304 1
{
d307 1
a307 1
  if (link_info.relocatable && config.build_constructors)
d309 1
a309 1
  else if (link_info.relocatable)
d324 1
a324 1
struct ld_emulation_xfer_struct ld_lnk960_emulation =
@


