head	1.6;
access;
symbols
	OPENBSD_6_0:1.6.0.48
	OPENBSD_6_0_BASE:1.6
	OPENBSD_5_9:1.6.0.44
	OPENBSD_5_9_BASE:1.6
	OPENBSD_5_8:1.6.0.46
	OPENBSD_5_8_BASE:1.6
	OPENBSD_5_7:1.6.0.38
	OPENBSD_5_7_BASE:1.6
	OPENBSD_5_6:1.6.0.42
	OPENBSD_5_6_BASE:1.6
	OPENBSD_5_5:1.6.0.40
	OPENBSD_5_5_BASE:1.6
	OPENBSD_5_4:1.6.0.36
	OPENBSD_5_4_BASE:1.6
	OPENBSD_5_3:1.6.0.34
	OPENBSD_5_3_BASE:1.6
	OPENBSD_5_2:1.6.0.32
	OPENBSD_5_2_BASE:1.6
	OPENBSD_5_1_BASE:1.6
	OPENBSD_5_1:1.6.0.30
	OPENBSD_5_0:1.6.0.28
	OPENBSD_5_0_BASE:1.6
	OPENBSD_4_9:1.6.0.26
	OPENBSD_4_9_BASE:1.6
	OPENBSD_4_8:1.6.0.24
	OPENBSD_4_8_BASE:1.6
	OPENBSD_4_7:1.6.0.20
	OPENBSD_4_7_BASE:1.6
	OPENBSD_4_6:1.6.0.22
	OPENBSD_4_6_BASE:1.6
	OPENBSD_4_5:1.6.0.18
	OPENBSD_4_5_BASE:1.6
	OPENBSD_4_4:1.6.0.16
	OPENBSD_4_4_BASE:1.6
	OPENBSD_4_3:1.6.0.14
	OPENBSD_4_3_BASE:1.6
	OPENBSD_4_2:1.6.0.12
	OPENBSD_4_2_BASE:1.6
	OPENBSD_4_1:1.6.0.10
	OPENBSD_4_1_BASE:1.6
	OPENBSD_4_0:1.6.0.8
	OPENBSD_4_0_BASE:1.6
	OPENBSD_3_9:1.6.0.6
	OPENBSD_3_9_BASE:1.6
	OPENBSD_3_8:1.6.0.4
	OPENBSD_3_8_BASE:1.6
	OPENBSD_3_7:1.6.0.2
	OPENBSD_3_7_BASE:1.6
	BINUTILS_2_15:1.1.1.7
	OPENBSD_3_6:1.5.0.2
	OPENBSD_3_6_BASE:1.5
	BINUTILS-2_14:1.1.1.6
	OPENBSD_3_5:1.4.0.8
	OPENBSD_3_5_BASE:1.4
	OPENBSD_3_4:1.4.0.6
	OPENBSD_3_4_BASE:1.4
	OPENBSD_3_3:1.4.0.4
	OPENBSD_3_3_BASE:1.4
	OPENBSD_3_2:1.4.0.2
	OPENBSD_3_2_BASE:1.4
	binutils-2_11_2:1.1.1.5
	OPENBSD_3_1:1.3.0.8
	OPENBSD_3_1_BASE:1.3
	OPENBSD_3_0:1.3.0.6
	OPENBSD_3_0_BASE:1.3
	BINUTILS-2_10_1:1.1.1.4
	OPENBSD_2_9:1.3.0.4
	OPENBSD_2_9_BASE:1.3
	OPENBSD_2_8:1.3.0.2
	OPENBSD_2_8_BASE:1.3
	BINUTILS-2_10:1.1.1.4
	OPENBSD_2_7:1.2.0.18
	OPENBSD_2_7_BASE:1.2
	new-binutils:1.2.0.16
	OPENBSD_2_6:1.2.0.14
	OPENBSD_2_6_BASE:1.2
	OPENBSD_2_5:1.2.0.12
	OPENBSD_2_5_BASE:1.2
	OPENBSD_2_4:1.2.0.10
	OPENBSD_2_4_BASE:1.2
	OPENBSD_2_3:1.2.0.8
	OPENBSD_2_3_BASE:1.2
	OPENBSD_2_2:1.2.0.6
	OPENBSD_2_2_BASE:1.2
	BINUTILS-2_8_1:1.1.1.3
	OPENBSD_2_1:1.2.0.4
	OPENBSD_2_1_BASE:1.2
	CYGNUS-961112:1.1.1.2
	OPENBSD_2_0:1.2.0.2
	OPENBSD_2_0_BASE:1.2
	CYGNUS-960904:1.1.1.2
	CYGNUS-960609:1.1.1.2
	CYGNUS:1.1.1
	FSF_2_6:1.1.1.1
	FSF:1.1.1;
locks; strict;
comment	@ * @;


1.6
date	2004.11.02.20.45.47;	author miod;	state Exp;
branches;
next	1.5;

1.5
date	2004.05.17.21.54.50;	author drahn;	state Exp;
branches;
next	1.4;

1.4
date	2002.05.13.17.07.42;	author fgsch;	state Exp;
branches;
next	1.3;

1.3
date	2000.09.12.19.12.43;	author espie;	state Exp;
branches;
next	1.2;

1.2
date	96.06.10.10.54.14;	author niklas;	state Exp;
branches;
next	1.1;

1.1
date	96.01.08.11.09.13;	author niklas;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	96.01.08.11.09.13;	author niklas;	state Exp;
branches;
next	1.1.1.2;

1.1.1.2
date	96.06.09.19.35.28;	author niklas;	state Exp;
branches;
next	1.1.1.3;

1.1.1.3
date	97.05.29.09.28.24;	author niklas;	state Exp;
branches;
next	1.1.1.4;

1.1.1.4
date	2000.09.12.14.48.06;	author espie;	state Exp;
branches;
next	1.1.1.5;

1.1.1.5
date	2002.05.13.14.00.39;	author fgsch;	state Exp;
branches;
next	1.1.1.6;

1.1.1.6
date	2004.05.17.20.42.49;	author drahn;	state Exp;
branches;
next	1.1.1.7;

1.1.1.7
date	2004.11.02.20.23.20;	author miod;	state Exp;
branches;
next	;


desc
@@


1.6
log
@Merge conflicts, bringing our changes back in:
- extra $(SHELL) and sugar for make (so that files not mode +x still work)
- safer temp file handling
- our W^X binary layout changes in ld
- OpenBSD policy for library file selection in ld
- arm and m88k changes which were not merged in time for official 2.15
- bfd core file handling
- a couple typos

New for 2.15:
- ld(1) and as(1) manpages now generated at build time
- binutils/stabs.c reverted to use our in-tree libiberty for now
- we still use our VIA C3 crypto code over stock binutils, as it recognizes
  more instructions
- new emulations for OpenBSD on mips64 machines, to help OpenBSD/sgi
- relaxed %f# handling in gas on OpenBSD/sparc64 (same as was in 2.14)

Tested on all platforms by various people; special thanks to sturm@@ and
otto@@.
@
text
@/* ldemul.c -- clearing house for ld emulation states
   Copyright 1991, 1992, 1993, 1994, 1995, 1996, 1997, 1998, 2000, 2002, 2003
   Free Software Foundation, Inc.

This file is part of GLD, the Gnu Linker.

GLD is free software; you can redistribute it and/or modify
it under the terms of the GNU General Public License as published by
the Free Software Foundation; either version 2, or (at your option)
any later version.

GLD is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
GNU General Public License for more details.

You should have received a copy of the GNU General Public License
along with GLD; see the file COPYING.  If not, write to the Free
Software Foundation, 59 Temple Place - Suite 330, Boston, MA
02111-1307, USA.  */

#include "bfd.h"
#include "sysdep.h"
#include "getopt.h"

#include "ld.h"
#include "ldmisc.h"
#include "ldexp.h"
#include "ldlang.h"
#include "ldfile.h"
#include "ldemul.h"
#include "ldmain.h"
#include "ldemul-list.h"

ld_emulation_xfer_type *ld_emulation;

void
ldemul_hll (char *name)
{
  ld_emulation->hll (name);
}

void
ldemul_syslib (char *name)
{
  ld_emulation->syslib (name);
}

void
ldemul_after_parse (void)
{
  ld_emulation->after_parse ();
}

void
ldemul_before_parse (void)
{
  ld_emulation->before_parse ();
}

void
ldemul_after_open (void)
{
  ld_emulation->after_open ();
}

void
ldemul_after_allocation (void)
{
  ld_emulation->after_allocation ();
}

void
ldemul_before_allocation (void)
{
  if (ld_emulation->before_allocation)
    ld_emulation->before_allocation ();
}

void
ldemul_set_output_arch (void)
{
  ld_emulation->set_output_arch ();
}

void
ldemul_finish (void)
{
  if (ld_emulation->finish)
    ld_emulation->finish ();
}

void
ldemul_set_symbols (void)
{
  if (ld_emulation->set_symbols)
    ld_emulation->set_symbols ();
}

void
ldemul_create_output_section_statements (void)
{
  if (ld_emulation->create_output_section_statements)
    ld_emulation->create_output_section_statements ();
}

char *
ldemul_get_script (int *isfile)
{
  return ld_emulation->get_script (isfile);
}

bfd_boolean
ldemul_open_dynamic_archive (const char *arch, search_dirs_type *search,
			     lang_input_statement_type *entry)
{
  if (ld_emulation->open_dynamic_archive)
    return (*ld_emulation->open_dynamic_archive) (arch, search, entry);
  return FALSE;
}

bfd_boolean
ldemul_place_orphan (lang_input_statement_type *file, asection *s)
{
  if (ld_emulation->place_orphan)
    return (*ld_emulation->place_orphan) (file, s);
  return FALSE;
}

void
ldemul_add_options (int ns, char **shortopts, int nl,
		    struct option **longopts, int nrl,
		    struct option **really_longopts)
{
  if (ld_emulation->add_options)
    (*ld_emulation->add_options) (ns, shortopts, nl, longopts,
				  nrl, really_longopts);
}

bfd_boolean
ldemul_handle_option (int optc)
{
  if (ld_emulation->handle_option)
    return (*ld_emulation->handle_option) (optc);
  return FALSE;
}

bfd_boolean
ldemul_parse_args (int argc, char **argv)
{
  /* Try and use the emulation parser if there is one.  */
  if (ld_emulation->parse_args)
    return (*ld_emulation->parse_args) (argc, argv);
  return FALSE;
}

/* Let the emulation code handle an unrecognized file.  */

bfd_boolean
ldemul_unrecognized_file (lang_input_statement_type *entry)
{
  if (ld_emulation->unrecognized_file)
    return (*ld_emulation->unrecognized_file) (entry);
  return FALSE;
}

/* Let the emulation code handle a recognized file.  */

bfd_boolean
ldemul_recognized_file (lang_input_statement_type *entry)
{
  if (ld_emulation->recognized_file)
    return (*ld_emulation->recognized_file) (entry);
  return FALSE;
}

char *
ldemul_choose_target (int argc, char **argv)
{
  return ld_emulation->choose_target (argc, argv);
}


/* The default choose_target function.  */

char *
ldemul_default_target (int argc ATTRIBUTE_UNUSED, char **argv ATTRIBUTE_UNUSED)
{
  char *from_outside = getenv (TARGET_ENVIRON);
  if (from_outside != (char *) NULL)
    return from_outside;
  return ld_emulation->target_name;
}

void
after_parse_default (void)
{
}

void
after_open_default (void)
{
}

void
after_allocation_default (void)
{
}

void
before_allocation_default (void)
{
}

void
set_output_arch_default (void)
{
  /* Set the output architecture and machine if possible.  */
  bfd_set_arch_mach (output_bfd,
		     ldfile_output_architecture, ldfile_output_machine);
}

void
syslib_default (char *ignore ATTRIBUTE_UNUSED)
{
  info_msg (_("%S SYSLIB ignored\n"));
}

void
hll_default (char *ignore ATTRIBUTE_UNUSED)
{
  info_msg (_("%S HLL ignored\n"));
}

ld_emulation_xfer_type *ld_emulations[] = { EMULATION_LIST };

void
ldemul_choose_mode (char *target)
{
  ld_emulation_xfer_type **eptr = ld_emulations;
  /* Ignore "gld" prefix.  */
  if (target[0] == 'g' && target[1] == 'l' && target[2] == 'd')
    target += 3;
  for (; *eptr; eptr++)
    {
      if (strcmp (target, (*eptr)->emulation_name) == 0)
	{
	  ld_emulation = *eptr;
	  return;
	}
    }
  einfo (_("%P: unrecognised emulation mode: %s\n"), target);
  einfo (_("Supported emulations: "));
  ldemul_list_emulations (stderr);
  einfo ("%F\n");
}

void
ldemul_list_emulations (FILE *f)
{
  ld_emulation_xfer_type **eptr = ld_emulations;
  bfd_boolean first = TRUE;

  for (; *eptr; eptr++)
    {
      if (first)
	first = FALSE;
      else
	fprintf (f, " ");
      fprintf (f, "%s", (*eptr)->emulation_name);
    }
}

void
ldemul_list_emulation_options (FILE *f)
{
  ld_emulation_xfer_type **eptr;
  int options_found = 0;

  for (eptr = ld_emulations; *eptr; eptr++)
    {
      ld_emulation_xfer_type *emul = *eptr;

      if (emul->list_options)
	{
	  fprintf (f, "%s: \n", emul->emulation_name);

	  emul->list_options (f);

	  options_found = 1;
	}
    }

  if (! options_found)
    fprintf (f, _("  no emulation specific options.\n"));
}

int
ldemul_find_potential_libraries (char *name, lang_input_statement_type *entry)
{
  if (ld_emulation->find_potential_libraries)
    return ld_emulation->find_potential_libraries (name, entry);

  return 0;
}

struct bfd_elf_version_expr *
ldemul_new_vers_pattern (struct bfd_elf_version_expr *entry)
{
  if (ld_emulation->new_vers_pattern)
    entry = (*ld_emulation->new_vers_pattern) (entry);
  return entry;
}
@


1.5
log
@Resolve merge conflicts, adjust method of W^X handing (.sh files)
remove testsuites (not useable) remove mmalloc (not part of new binutils).
@
text
@d38 1
a38 2
ldemul_hll (name)
     char *name;
d44 1
a44 2
ldemul_syslib (name)
     char *name;
d50 1
a50 1
ldemul_after_parse ()
d56 1
a56 1
ldemul_before_parse ()
d62 1
a62 1
ldemul_after_open ()
d68 1
a68 1
ldemul_after_allocation ()
d74 1
a74 1
ldemul_before_allocation ()
d81 1
a81 1
ldemul_set_output_arch ()
d87 1
a87 1
ldemul_finish ()
d94 1
a94 1
ldemul_set_symbols ()
d101 1
a101 1
ldemul_create_output_section_statements ()
d108 1
a108 2
ldemul_get_script (isfile)
     int *isfile;
d114 2
a115 4
ldemul_open_dynamic_archive (arch, search, entry)
     const char *arch;
     search_dirs_type *search;
     lang_input_statement_type *entry;
d123 1
a123 3
ldemul_place_orphan (file, s)
     lang_input_statement_type *file;
     asection *s;
d131 3
a133 7
ldemul_add_options (ns, shortopts, nl, longopts, nrl, really_longopts)
     int ns;
     char **shortopts;
     int nl;
     struct option **longopts;
     int nrl;
     struct option **really_longopts;
d141 1
a141 2
ldemul_handle_option (optc)
     int optc;
d149 1
a149 3
ldemul_parse_args (argc, argv)
     int argc;
     char **argv;
d160 1
a160 2
ldemul_unrecognized_file (entry)
     lang_input_statement_type *entry;
d170 1
a170 2
ldemul_recognized_file (entry)
     lang_input_statement_type *entry;
d178 1
a178 3
ldemul_choose_target (argc, argv)
     int argc;
     char **argv;
d187 1
a187 3
ldemul_default_target (argc, argv)
     int argc ATTRIBUTE_UNUSED;
     char **argv ATTRIBUTE_UNUSED;
d196 1
a196 1
after_parse_default ()
d201 1
a201 1
after_open_default ()
d206 1
a206 1
after_allocation_default ()
d211 1
a211 1
before_allocation_default ()
d216 1
a216 1
set_output_arch_default ()
d224 1
a224 2
syslib_default (ignore)
     char *ignore ATTRIBUTE_UNUSED;
d230 1
a230 2
hll_default (ignore)
     char *ignore ATTRIBUTE_UNUSED;
d238 1
a238 2
ldemul_choose_mode (target)
     char *target;
d259 1
a259 2
ldemul_list_emulations (f)
     FILE *f;
d275 1
a275 2
ldemul_list_emulation_options (f)
     FILE *f;
d299 1
a299 3
ldemul_find_potential_libraries (name, entry)
     char *name;
     lang_input_statement_type *entry;
d308 1
a308 2
ldemul_new_vers_pattern (entry)
     struct bfd_elf_version_expr *entry;
@


1.4
log
@resolve conflicts.
@
text
@d2 1
a2 1
   Copyright 1991, 1992, 1993, 1994, 1995, 1996, 1997, 1998, 2000
d24 1
d116 1
a116 1
boolean
d124 1
a124 1
  return false;
d127 1
a127 1
boolean
d134 1
a134 1
  return false;
d137 24
a160 1
int
d167 2
a168 4
    {
      return ld_emulation->parse_args (argc, argv);
    }
  return 0;
d173 1
a173 1
boolean
d179 1
a179 1
  return false;
d184 1
a184 1
boolean
d190 1
a190 1
  return false;
d194 3
a196 1
ldemul_choose_target ()
d198 1
a198 1
  return ld_emulation->choose_target ();
d201 1
d205 3
a207 1
ldemul_default_target ()
d286 1
a286 1
  boolean first = true;
d291 1
a291 1
	first = false;
d332 9
@


1.3
log
@Help stupid cvs fixing basic conflicts.
@
text
@d2 1
a2 1
   Copyright (C) 1991, 92, 93, 94, 95, 96, 97, 98, 1999
d18 3
a20 2
along with GLD; see the file COPYING.  If not, write to
the Free Software Foundation, 59 Temple Place - Suite 330, Boston, MA 02111-1307, USA.  */
a25 1
#include "ldemul.h"
d30 1
d37 1
a37 1
ldemul_hll(name)
d40 1
a40 1
  ld_emulation->hll(name);
d43 2
a44 2

void ldemul_syslib(name)
d47 1
a47 1
  ld_emulation->syslib(name);
d51 1
a51 1
ldemul_after_parse()
d53 1
a53 1
  ld_emulation->after_parse();
d57 1
a57 1
ldemul_before_parse()
d59 1
a59 1
  ld_emulation->before_parse();
d68 2
a69 2
void 
ldemul_after_allocation()
d71 1
a71 1
  ld_emulation->after_allocation();
d74 2
a75 2
void 
ldemul_before_allocation()
d78 1
a78 1
    ld_emulation->before_allocation();
a80 1

d82 1
a82 1
ldemul_set_output_arch()
d84 1
a84 1
  ld_emulation->set_output_arch();
d88 1
a88 1
ldemul_finish()
d91 1
a91 1
    ld_emulation->finish();
d95 1
a95 1
ldemul_set_symbols()
d98 1
a98 1
    ld_emulation->set_symbols();
d102 1
a102 1
ldemul_create_output_section_statements()
d105 1
a105 1
    ld_emulation->create_output_section_statements();
d109 1
a109 1
ldemul_get_script(isfile)
d112 1
a112 1
  return ld_emulation->get_script(isfile);
d141 1
a141 1
  /* Try and use the emulation parser if there is one. */
d172 1
a172 1
ldemul_choose_target()
d174 1
a174 1
  return ld_emulation->choose_target();
d180 1
a180 1
ldemul_default_target()
d183 1
a183 1
  if (from_outside != (char *)NULL)
d188 2
a189 2
void 
after_parse_default()
a190 1

d199 1
a199 1
after_allocation_default()
a200 1

d204 1
a204 1
before_allocation_default()
a205 1

d209 1
a209 1
set_output_arch_default()
d211 3
a213 3
  /* Set the output architecture and machine if possible */
  bfd_set_arch_mach(output_bfd,
	            ldfile_output_architecture, ldfile_output_machine);
a215 1
/*ARGSUSED*/
d217 2
a218 2
syslib_default(ignore)
     char  *ignore ATTRIBUTE_UNUSED;
a222 1
/*ARGSUSED*/
d224 2
a225 2
hll_default(ignore)
     char  *ignore ATTRIBUTE_UNUSED;
d233 1
a233 1
ldemul_choose_mode(target)
d236 16
a251 16
    ld_emulation_xfer_type **eptr = ld_emulations;
    /* Ignore "gld" prefix. */
    if (target[0] == 'g' && target[1] == 'l' && target[2] == 'd')
	target += 3;
    for (; *eptr; eptr++)
      {
	if (strcmp(target, (*eptr)->emulation_name) == 0)
	  {
	    ld_emulation = *eptr;
	    return;
	  }
      }
    einfo (_("%P: unrecognised emulation mode: %s\n"), target);
    einfo (_("Supported emulations: "));
    ldemul_list_emulations (stderr);
    einfo ("%F\n");
d273 1
a273 1
     FILE * f;
d275 1
a275 1
  ld_emulation_xfer_type ** eptr;
d277 2
a278 2
  
  for (eptr = ld_emulations; * eptr; eptr ++)
d280 2
a281 2
      ld_emulation_xfer_type * emul = * eptr;
      
d285 1
a285 1
      
d291 1
a291 1
  
d298 2
a299 2
     char * name;
     lang_input_statement_type * entry;
@


1.2
log
@Bring Cygnus versions into the trunk, keeping our local patches
@
text
@d2 2
a3 1
   Copyright (C) 1991, 1993 Free Software Foundation, Inc.
d160 11
d182 1
a182 1
  char *from_outside = (char *) getenv(TARGET_ENVIRON);
d222 1
a222 1
     char  *ignore;
d224 1
a224 1
  info_msg ("%S SYSLIB ignored\n");
d230 1
a230 1
     char  *ignore;
d232 1
a232 1
  info_msg ("%S HLL ignored\n");
d253 2
a254 2
    einfo ("%P: unrecognised emulation mode: %s\n", target);
    einfo ("Supported emulations: ", program_name);
d274 36
@


1.1
log
@Initial revision
@
text
@d148 11
@


1.1.1.1
log
@Initial GNU binutils 2.6 import
@
text
@@


1.1.1.2
log
@Import of binutils, gas, ld & gprof from Cygnus 960609 tree
@
text
@a147 11
/* Let the emulation code handle an unrecognized file.  */

boolean
ldemul_unrecognized_file (entry)
     lang_input_statement_type *entry;
{
  if (ld_emulation->unrecognized_file)
    return (*ld_emulation->unrecognized_file) (entry);
  return false;
}

@


1.1.1.3
log
@Import of binutils-2.8.1 from Cygnus/FSF
@
text
@d2 1
a2 1
   Copyright (C) 1991, 92, 93, 94, 95, 96, 1997 Free Software Foundation, Inc.
d170 1
a170 1
  char *from_outside = getenv (TARGET_ENVIRON);
@


1.1.1.4
log
@Import binutils-2.10
- only the binutils package (no gdb here)
- don't import libiberty and texinfo, they are elsewhere
- remove all .info* generated files
@
text
@d2 1
a2 2
   Copyright (C) 1991, 92, 93, 94, 95, 96, 97, 98, 1999
   Free Software Foundation, Inc.
a158 11
/* Let the emulation code handle a recognized file.  */

boolean
ldemul_recognized_file (entry)
     lang_input_statement_type *entry;
{
  if (ld_emulation->recognized_file)
    return (*ld_emulation->recognized_file) (entry);
  return false;
}

d210 1
a210 1
     char  *ignore ATTRIBUTE_UNUSED;
d212 1
a212 1
  info_msg (_("%S SYSLIB ignored\n"));
d218 1
a218 1
     char  *ignore ATTRIBUTE_UNUSED;
d220 1
a220 1
  info_msg (_("%S HLL ignored\n"));
d241 2
a242 2
    einfo (_("%P: unrecognised emulation mode: %s\n"), target);
    einfo (_("Supported emulations: "));
a261 36
}

void
ldemul_list_emulation_options (f)
     FILE * f;
{
  ld_emulation_xfer_type ** eptr;
  int options_found = 0;
  
  for (eptr = ld_emulations; * eptr; eptr ++)
    {
      ld_emulation_xfer_type * emul = * eptr;
      
      if (emul->list_options)
	{
	  fprintf (f, "%s: \n", emul->emulation_name);
      
	  emul->list_options (f);

	  options_found = 1;
	}
    }
  
  if (! options_found)
    fprintf (f, _("  no emulation specific options.\n"));
}

int
ldemul_find_potential_libraries (name, entry)
     char * name;
     lang_input_statement_type * entry;
{
  if (ld_emulation->find_potential_libraries)
    return ld_emulation->find_potential_libraries (name, entry);

  return 0;
@


1.1.1.5
log
@Import binutils-2.11.2
- only the binutils package (no gdb here)
- don't import libiberty and texinfo, they are elsewhere
- remove all .info* generated files
@
text
@d2 1
a2 1
   Copyright 1991, 1992, 1993, 1994, 1995, 1996, 1997, 1998, 2000
d18 2
a19 3
along with GLD; see the file COPYING.  If not, write to the Free
Software Foundation, 59 Temple Place - Suite 330, Boston, MA
02111-1307, USA.  */
d25 1
a29 1
#include "ldemul.h"
d36 1
a36 1
ldemul_hll (name)
d39 1
a39 1
  ld_emulation->hll (name);
d42 2
a43 2
void
ldemul_syslib (name)
d46 1
a46 1
  ld_emulation->syslib (name);
d50 1
a50 1
ldemul_after_parse ()
d52 1
a52 1
  ld_emulation->after_parse ();
d56 1
a56 1
ldemul_before_parse ()
d58 1
a58 1
  ld_emulation->before_parse ();
d67 2
a68 2
void
ldemul_after_allocation ()
d70 1
a70 1
  ld_emulation->after_allocation ();
d73 2
a74 2
void
ldemul_before_allocation ()
d77 1
a77 1
    ld_emulation->before_allocation ();
d80 1
d82 1
a82 1
ldemul_set_output_arch ()
d84 1
a84 1
  ld_emulation->set_output_arch ();
d88 1
a88 1
ldemul_finish ()
d91 1
a91 1
    ld_emulation->finish ();
d95 1
a95 1
ldemul_set_symbols ()
d98 1
a98 1
    ld_emulation->set_symbols ();
d102 1
a102 1
ldemul_create_output_section_statements ()
d105 1
a105 1
    ld_emulation->create_output_section_statements ();
d109 1
a109 1
ldemul_get_script (isfile)
d112 1
a112 1
  return ld_emulation->get_script (isfile);
d141 1
a141 1
  /* Try and use the emulation parser if there is one.  */
d172 1
a172 1
ldemul_choose_target ()
d174 1
a174 1
  return ld_emulation->choose_target ();
d180 1
a180 1
ldemul_default_target ()
d183 1
a183 1
  if (from_outside != (char *) NULL)
d188 2
a189 2
void
after_parse_default ()
d191 1
d200 1
a200 1
after_allocation_default ()
d202 1
d206 1
a206 1
before_allocation_default ()
d208 1
d212 1
a212 1
set_output_arch_default ()
d214 3
a216 3
  /* Set the output architecture and machine if possible.  */
  bfd_set_arch_mach (output_bfd,
		     ldfile_output_architecture, ldfile_output_machine);
d219 1
d221 2
a222 2
syslib_default (ignore)
     char *ignore ATTRIBUTE_UNUSED;
d227 1
d229 2
a230 2
hll_default (ignore)
     char *ignore ATTRIBUTE_UNUSED;
d238 1
a238 1
ldemul_choose_mode (target)
d241 16
a256 16
  ld_emulation_xfer_type **eptr = ld_emulations;
  /* Ignore "gld" prefix.  */
  if (target[0] == 'g' && target[1] == 'l' && target[2] == 'd')
    target += 3;
  for (; *eptr; eptr++)
    {
      if (strcmp (target, (*eptr)->emulation_name) == 0)
	{
	  ld_emulation = *eptr;
	  return;
	}
    }
  einfo (_("%P: unrecognised emulation mode: %s\n"), target);
  einfo (_("Supported emulations: "));
  ldemul_list_emulations (stderr);
  einfo ("%F\n");
d278 1
a278 1
     FILE *f;
d280 1
a280 1
  ld_emulation_xfer_type **eptr;
d282 2
a283 2

  for (eptr = ld_emulations; *eptr; eptr++)
d285 2
a286 2
      ld_emulation_xfer_type *emul = *eptr;

d290 1
a290 1

d296 1
a296 1

d303 2
a304 2
     char *name;
     lang_input_statement_type *entry;
@


1.1.1.6
log
@import binutils 2.14 (excluding testsuites, .info files, and .po files)
@
text
@d2 1
a2 1
   Copyright 1991, 1992, 1993, 1994, 1995, 1996, 1997, 1998, 2000, 2002, 2003
a23 1
#include "getopt.h"
d115 1
a115 1
bfd_boolean
d123 1
a123 1
  return FALSE;
d126 1
a126 1
bfd_boolean
d133 1
a133 1
  return FALSE;
d136 1
a136 24
void
ldemul_add_options (ns, shortopts, nl, longopts, nrl, really_longopts)
     int ns;
     char **shortopts;
     int nl;
     struct option **longopts;
     int nrl;
     struct option **really_longopts;
{
  if (ld_emulation->add_options)
    (*ld_emulation->add_options) (ns, shortopts, nl, longopts,
				  nrl, really_longopts);
}

bfd_boolean
ldemul_handle_option (optc)
     int optc;
{
  if (ld_emulation->handle_option)
    return (*ld_emulation->handle_option) (optc);
  return FALSE;
}

bfd_boolean
d143 4
a146 2
    return (*ld_emulation->parse_args) (argc, argv);
  return FALSE;
d151 1
a151 1
bfd_boolean
d157 1
a157 1
  return FALSE;
d162 1
a162 1
bfd_boolean
d168 1
a168 1
  return FALSE;
d172 1
a172 3
ldemul_choose_target (argc, argv)
     int argc;
     char **argv;
d174 1
a174 1
  return ld_emulation->choose_target (argc, argv);
a176 1

d180 1
a180 3
ldemul_default_target (argc, argv)
     int argc ATTRIBUTE_UNUSED;
     char **argv ATTRIBUTE_UNUSED;
d259 1
a259 1
  bfd_boolean first = TRUE;
d264 1
a264 1
	first = FALSE;
a304 9
}

struct bfd_elf_version_expr *
ldemul_new_vers_pattern (entry)
     struct bfd_elf_version_expr *entry;
{
  if (ld_emulation->new_vers_pattern)
    entry = (*ld_emulation->new_vers_pattern) (entry);
  return entry;
@


1.1.1.7
log
@Binutils 2.15, with testsuites removed, and without gdb and libiberty.
@
text
@d38 2
a39 1
ldemul_hll (char *name)
d45 2
a46 1
ldemul_syslib (char *name)
d52 1
a52 1
ldemul_after_parse (void)
d58 1
a58 1
ldemul_before_parse (void)
d64 1
a64 1
ldemul_after_open (void)
d70 1
a70 1
ldemul_after_allocation (void)
d76 1
a76 1
ldemul_before_allocation (void)
d83 1
a83 1
ldemul_set_output_arch (void)
d89 1
a89 1
ldemul_finish (void)
d96 1
a96 1
ldemul_set_symbols (void)
d103 1
a103 1
ldemul_create_output_section_statements (void)
d110 2
a111 1
ldemul_get_script (int *isfile)
d117 4
a120 2
ldemul_open_dynamic_archive (const char *arch, search_dirs_type *search,
			     lang_input_statement_type *entry)
d128 3
a130 1
ldemul_place_orphan (lang_input_statement_type *file, asection *s)
d138 7
a144 3
ldemul_add_options (int ns, char **shortopts, int nl,
		    struct option **longopts, int nrl,
		    struct option **really_longopts)
d152 2
a153 1
ldemul_handle_option (int optc)
d161 3
a163 1
ldemul_parse_args (int argc, char **argv)
d174 2
a175 1
ldemul_unrecognized_file (lang_input_statement_type *entry)
d185 2
a186 1
ldemul_recognized_file (lang_input_statement_type *entry)
d194 3
a196 1
ldemul_choose_target (int argc, char **argv)
d205 3
a207 1
ldemul_default_target (int argc ATTRIBUTE_UNUSED, char **argv ATTRIBUTE_UNUSED)
d216 1
a216 1
after_parse_default (void)
d221 1
a221 1
after_open_default (void)
d226 1
a226 1
after_allocation_default (void)
d231 1
a231 1
before_allocation_default (void)
d236 1
a236 1
set_output_arch_default (void)
d244 2
a245 1
syslib_default (char *ignore ATTRIBUTE_UNUSED)
d251 2
a252 1
hll_default (char *ignore ATTRIBUTE_UNUSED)
d260 2
a261 1
ldemul_choose_mode (char *target)
d282 2
a283 1
ldemul_list_emulations (FILE *f)
d299 2
a300 1
ldemul_list_emulation_options (FILE *f)
d324 3
a326 1
ldemul_find_potential_libraries (char *name, lang_input_statement_type *entry)
d335 2
a336 1
ldemul_new_vers_pattern (struct bfd_elf_version_expr *entry)
@


