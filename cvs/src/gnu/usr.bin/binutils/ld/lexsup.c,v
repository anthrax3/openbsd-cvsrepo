head	1.14;
access;
symbols
	OPENBSD_6_1:1.14.0.10
	OPENBSD_6_1_BASE:1.14
	OPENBSD_6_0:1.14.0.6
	OPENBSD_6_0_BASE:1.14
	OPENBSD_5_9:1.14.0.2
	OPENBSD_5_9_BASE:1.14
	OPENBSD_5_8:1.14.0.4
	OPENBSD_5_8_BASE:1.14
	OPENBSD_5_7:1.13.0.6
	OPENBSD_5_7_BASE:1.13
	OPENBSD_5_6:1.13.0.10
	OPENBSD_5_6_BASE:1.13
	OPENBSD_5_5:1.13.0.8
	OPENBSD_5_5_BASE:1.13
	OPENBSD_5_4:1.13.0.4
	OPENBSD_5_4_BASE:1.13
	OPENBSD_5_3:1.13.0.2
	OPENBSD_5_3_BASE:1.13
	OPENBSD_5_2:1.11.0.32
	OPENBSD_5_2_BASE:1.11
	OPENBSD_5_1_BASE:1.11
	OPENBSD_5_1:1.11.0.30
	OPENBSD_5_0:1.11.0.28
	OPENBSD_5_0_BASE:1.11
	OPENBSD_4_9:1.11.0.26
	OPENBSD_4_9_BASE:1.11
	OPENBSD_4_8:1.11.0.24
	OPENBSD_4_8_BASE:1.11
	OPENBSD_4_7:1.11.0.20
	OPENBSD_4_7_BASE:1.11
	OPENBSD_4_6:1.11.0.22
	OPENBSD_4_6_BASE:1.11
	OPENBSD_4_5:1.11.0.18
	OPENBSD_4_5_BASE:1.11
	OPENBSD_4_4:1.11.0.16
	OPENBSD_4_4_BASE:1.11
	OPENBSD_4_3:1.11.0.14
	OPENBSD_4_3_BASE:1.11
	OPENBSD_4_2:1.11.0.12
	OPENBSD_4_2_BASE:1.11
	OPENBSD_4_1:1.11.0.10
	OPENBSD_4_1_BASE:1.11
	OPENBSD_4_0:1.11.0.8
	OPENBSD_4_0_BASE:1.11
	OPENBSD_3_9:1.11.0.6
	OPENBSD_3_9_BASE:1.11
	OPENBSD_3_8:1.11.0.4
	OPENBSD_3_8_BASE:1.11
	OPENBSD_3_7:1.11.0.2
	OPENBSD_3_7_BASE:1.11
	BINUTILS_2_15:1.1.1.9
	OPENBSD_3_6:1.10.0.2
	OPENBSD_3_6_BASE:1.10
	BINUTILS-2_14:1.1.1.8
	OPENBSD_3_5:1.9.0.6
	OPENBSD_3_5_BASE:1.9
	OPENBSD_3_4:1.9.0.4
	OPENBSD_3_4_BASE:1.9
	OPENBSD_3_3:1.9.0.2
	OPENBSD_3_3_BASE:1.9
	OPENBSD_3_2:1.7.0.2
	OPENBSD_3_2_BASE:1.7
	binutils-2_11_2:1.1.1.7
	OPENBSD_3_1:1.6.0.8
	OPENBSD_3_1_BASE:1.6
	OPENBSD_3_0:1.6.0.6
	OPENBSD_3_0_BASE:1.6
	BINUTILS-2_10_1:1.1.1.6
	OPENBSD_2_9:1.6.0.4
	OPENBSD_2_9_BASE:1.6
	OPENBSD_2_8:1.6.0.2
	OPENBSD_2_8_BASE:1.6
	BINUTILS-2_10:1.1.1.6
	OPENBSD_2_7:1.5.0.16
	OPENBSD_2_7_BASE:1.5
	new-binutils:1.5.0.14
	OPENBSD_2_6:1.5.0.12
	OPENBSD_2_6_BASE:1.5
	OPENBSD_2_5:1.5.0.10
	OPENBSD_2_5_BASE:1.5
	OPENBSD_2_4:1.5.0.8
	OPENBSD_2_4_BASE:1.5
	OPENBSD_2_3:1.5.0.6
	OPENBSD_2_3_BASE:1.5
	OPENBSD_2_2:1.5.0.4
	OPENBSD_2_2_BASE:1.5
	BINUTILS-2_8_1:1.1.1.5
	OPENBSD_2_1:1.5.0.2
	OPENBSD_2_1_BASE:1.5
	CYGNUS-961112:1.1.1.4
	OPENBSD_2_0:1.4.0.2
	OPENBSD_2_0_BASE:1.4
	CYGNUS-960904:1.1.1.3
	CYGNUS-960609:1.1.1.2
	CYGNUS:1.1.1
	FSF_2_6:1.1.1.1
	FSF:1.1.1;
locks; strict;
comment	@ * @;


1.14
date	2015.04.02.11.54.27;	author pascal;	state Exp;
branches;
next	1.13;
commitid	SvzUeUwil33XoFIh;

1.13
date	2013.02.05.14.31.32;	author kettenis;	state Exp;
branches;
next	1.12;

1.12
date	2012.08.28.18.59.28;	author pascal;	state Exp;
branches;
next	1.11;

1.11
date	2004.11.02.20.45.48;	author miod;	state Exp;
branches;
next	1.10;

1.10
date	2004.05.17.21.54.50;	author drahn;	state Exp;
branches;
next	1.9;

1.9
date	2003.01.17.20.50.13;	author drahn;	state Exp;
branches;
next	1.8;

1.8
date	2003.01.13.21.35.27;	author drahn;	state Exp;
branches;
next	1.7;

1.7
date	2002.05.13.17.07.43;	author fgsch;	state Exp;
branches;
next	1.6;

1.6
date	2000.09.12.19.12.46;	author espie;	state Exp;
branches;
next	1.5;

1.5
date	96.11.23.03.52.34;	author niklas;	state Exp;
branches;
next	1.4;

1.4
date	96.09.04.19.09.37;	author niklas;	state Exp;
branches;
next	1.3;

1.3
date	96.07.15.17.12.24;	author pefo;	state Exp;
branches;
next	1.2;

1.2
date	96.06.10.10.54.30;	author niklas;	state Exp;
branches;
next	1.1;

1.1
date	96.01.08.11.09.17;	author niklas;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	96.01.08.11.09.17;	author niklas;	state Exp;
branches;
next	1.1.1.2;

1.1.1.2
date	96.06.09.19.35.39;	author niklas;	state Exp;
branches;
next	1.1.1.3;

1.1.1.3
date	96.09.04.17.35.10;	author niklas;	state Exp;
branches;
next	1.1.1.4;

1.1.1.4
date	96.11.19.14.38.42;	author niklas;	state Exp;
branches;
next	1.1.1.5;

1.1.1.5
date	97.05.29.09.28.38;	author niklas;	state Exp;
branches;
next	1.1.1.6;

1.1.1.6
date	2000.09.12.14.48.11;	author espie;	state Exp;
branches;
next	1.1.1.7;

1.1.1.7
date	2002.05.13.14.01.23;	author fgsch;	state Exp;
branches;
next	1.1.1.8;

1.1.1.8
date	2004.05.17.20.42.50;	author drahn;	state Exp;
branches;
next	1.1.1.9;

1.1.1.9
date	2004.11.02.20.23.22;	author miod;	state Exp;
branches;
next	;


desc
@@


1.14
log
@Change gcc and ld semantics to make static PIE the default when invoking
'cc -static'.  To explicitly request the legacy behaviour, use -nopie.

For the few port affected by this, bumps will follow shortly.

looks good to kettenis@@, ok kurt@@
@
text
@/* Parse options for the GNU linker.
   Copyright 1991, 1992, 1993, 1994, 1995, 1996, 1997, 1998, 1999, 2000,
   2001, 2002, 2003, 2004
   Free Software Foundation, Inc.

   This file is part of GLD, the Gnu Linker.

   GLD is free software; you can redistribute it and/or modify
   it under the terms of the GNU General Public License as published by
   the Free Software Foundation; either version 2, or (at your option)
   any later version.

   GLD is distributed in the hope that it will be useful,
   but WITHOUT ANY WARRANTY; without even the implied warranty of
   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
   GNU General Public License for more details.

   You should have received a copy of the GNU General Public License
   along with GLD; see the file COPYING.  If not, write to the Free
   Software Foundation, 59 Temple Place - Suite 330, Boston, MA
   02111-1307, USA.  */

#include "bfd.h"
#include "sysdep.h"
#include "libiberty.h"
#include <stdio.h>
#include <string.h>
#include "safe-ctype.h"
#include "getopt.h"
#include "bfdlink.h"
#include "ld.h"
#include "ldmain.h"
#include "ldmisc.h"
#include "ldexp.h"
#include "ldlang.h"
#include <ldgram.h>
#include "ldlex.h"
#include "ldfile.h"
#include "ldver.h"
#include "ldemul.h"
#include "demangle.h"

#ifndef PATH_SEPARATOR
#if defined (__MSDOS__) || (defined (_WIN32) && ! defined (__CYGWIN32__))
#define PATH_SEPARATOR ';'
#else
#define PATH_SEPARATOR ':'
#endif
#endif

/* Somewhere above, sys/stat.h got included . . . .  */
#if !defined(S_ISDIR) && defined(S_IFDIR)
#define	S_ISDIR(m) (((m) & S_IFMT) == S_IFDIR)
#endif

static void set_default_dirlist (char *);
static void set_section_start (char *, char *);
static void help (void);

/* Non-zero if we are processing a --defsym from the command line.  */
int parsing_defsym = 0;

/* Codes used for the long options with no short synonyms.  150 isn't
   special; it's just an arbitrary non-ASCII char value.  */
enum option_values
{
  OPTION_ASSERT = 150,
  OPTION_CALL_SHARED,
  OPTION_CREF,
  OPTION_DEFSYM,
  OPTION_DEMANGLE,
  OPTION_DYNAMIC_LINKER,
  OPTION_EB,
  OPTION_EL,
  OPTION_EMBEDDED_RELOCS,
  OPTION_EXPORT_DYNAMIC,
  OPTION_HELP,
  OPTION_IGNORE,
  OPTION_MAP,
  OPTION_NO_DEMANGLE,
  OPTION_NO_KEEP_MEMORY,
  OPTION_NO_WARN_MISMATCH,
  OPTION_NOINHIBIT_EXEC,
  OPTION_NON_SHARED,
  OPTION_NO_WHOLE_ARCHIVE,
  OPTION_OFORMAT,
  OPTION_RELAX,
  OPTION_RETAIN_SYMBOLS_FILE,
  OPTION_RPATH,
  OPTION_RPATH_LINK,
  OPTION_SHARED,
  OPTION_SONAME,
  OPTION_SORT_COMMON,
  OPTION_STATS,
  OPTION_SYMBOLIC,
  OPTION_TASK_LINK,
  OPTION_TBSS,
  OPTION_TDATA,
  OPTION_TTEXT,
  OPTION_TRADITIONAL_FORMAT,
  OPTION_UR,
  OPTION_VERBOSE,
  OPTION_VERSION,
  OPTION_VERSION_SCRIPT,
  OPTION_VERSION_EXPORTS_SECTION,
  OPTION_WARN_COMMON,
  OPTION_WARN_CONSTRUCTORS,
  OPTION_WARN_FATAL,
  OPTION_WARN_MULTIPLE_GP,
  OPTION_WARN_ONCE,
  OPTION_WARN_SECTION_ALIGN,
  OPTION_SPLIT_BY_RELOC,
  OPTION_SPLIT_BY_FILE ,
  OPTION_WHOLE_ARCHIVE,
  OPTION_AS_NEEDED,
  OPTION_NO_AS_NEEDED,
  OPTION_WRAP,
  OPTION_FORCE_EXE_SUFFIX,
  OPTION_GC_SECTIONS,
  OPTION_NO_GC_SECTIONS,
  OPTION_CHECK_SECTIONS,
  OPTION_NO_CHECK_SECTIONS,
  OPTION_NO_UNDEFINED,
  OPTION_INIT,
  OPTION_FINI,
  OPTION_SECTION_START,
  OPTION_UNIQUE,
  OPTION_TARGET_HELP,
  OPTION_ALLOW_SHLIB_UNDEFINED,
  OPTION_NO_ALLOW_SHLIB_UNDEFINED,
  OPTION_ALLOW_MULTIPLE_DEFINITION,
  OPTION_NO_UNDEFINED_VERSION,
  OPTION_DISCARD_NONE,
  OPTION_SPARE_DYNAMIC_TAGS,
  OPTION_NO_DEFINE_COMMON,
  OPTION_NOSTDLIB,
  OPTION_NO_OMAGIC,
  OPTION_STRIP_DISCARDED,
  OPTION_NO_STRIP_DISCARDED,
  OPTION_ACCEPT_UNKNOWN_INPUT_ARCH,
  OPTION_NO_ACCEPT_UNKNOWN_INPUT_ARCH,
  OPTION_PIE,
  OPTION_NOPIE,
  OPTION_UNRESOLVED_SYMBOLS,
  OPTION_WARN_UNRESOLVED_SYMBOLS,
  OPTION_ERROR_UNRESOLVED_SYMBOLS
};

/* The long options.  This structure is used for both the option
   parsing and the help text.  */

struct ld_option
{
  /* The long option information.  */
  struct option opt;
  /* The short option with the same meaning ('\0' if none).  */
  char shortopt;
  /* The name of the argument (NULL if none).  */
  const char *arg;
  /* The documentation string.  If this is NULL, this is a synonym for
     the previous option.  */
  const char *doc;
  enum {
    /* Use one dash before long option name.  */
    ONE_DASH,
    /* Use two dashes before long option name.  */
    TWO_DASHES,
    /* Only accept two dashes before the long option name.
       This is an overloading of the use of this enum, since originally it
       was only intended to tell the --help display function how to display
       the long option name.  This feature was added in order to resolve
       the confusion about the -omagic command line switch.  Is it setting
       the output file name to "magic" or is it setting the NMAGIC flag on
       the output ?  It has been decided that it is setting the output file
       name, and that if you want to set the NMAGIC flag you should use -N
       or --omagic.  */
    EXACTLY_TWO_DASHES,
    /* Don't mention this option in --help output.  */
    NO_HELP
  } control;
};

static const struct ld_option ld_options[] =
{
  { {NULL, required_argument, NULL, '\0'},
      'a', N_("KEYWORD"), N_("Shared library control for HP/UX compatibility"),
      ONE_DASH },
  { {"architecture", required_argument, NULL, 'A'},
      'A', N_("ARCH"), N_("Set architecture") , TWO_DASHES },
  { {"format", required_argument, NULL, 'b'},
      'b', N_("TARGET"), N_("Specify target for following input files"), TWO_DASHES },
  { {"mri-script", required_argument, NULL, 'c'},
      'c', N_("FILE"), N_("Read MRI format linker script"), TWO_DASHES },
  { {"dc", no_argument, NULL, 'd'},
      'd', NULL, N_("Force common symbols to be defined"), ONE_DASH },
  { {"dp", no_argument, NULL, 'd'},
      '\0', NULL, NULL, ONE_DASH },
  { {"entry", required_argument, NULL, 'e'},
      'e', N_("ADDRESS"), N_("Set start address"), TWO_DASHES },
  { {"export-dynamic", no_argument, NULL, OPTION_EXPORT_DYNAMIC},
      'E', NULL, N_("Export all dynamic symbols"), TWO_DASHES },
  { {"EB", no_argument, NULL, OPTION_EB},
      '\0', NULL, N_("Link big-endian objects"), ONE_DASH },
  { {"EL", no_argument, NULL, OPTION_EL},
      '\0', NULL, N_("Link little-endian objects"), ONE_DASH },
  { {"auxiliary", required_argument, NULL, 'f'},
      'f', N_("SHLIB"), N_("Auxiliary filter for shared object symbol table"),
      TWO_DASHES },
  { {"filter", required_argument, NULL, 'F'},
      'F', N_("SHLIB"), N_("Filter for shared object symbol table"), TWO_DASHES },
  { {NULL, no_argument, NULL, '\0'},
      'g', NULL, N_("Ignored"), ONE_DASH },
  { {"gpsize", required_argument, NULL, 'G'},
      'G', N_("SIZE"), N_("Small data size (if no size, same as --shared)"),
      TWO_DASHES },
  { {"soname", required_argument, NULL, OPTION_SONAME},
      'h', N_("FILENAME"), N_("Set internal name of shared library"), ONE_DASH },
  { {"dynamic-linker", required_argument, NULL, OPTION_DYNAMIC_LINKER},
      'I', N_("PROGRAM"), N_("Set PROGRAM as the dynamic linker to use"), TWO_DASHES },
  { {"library", required_argument, NULL, 'l'},
      'l', N_("LIBNAME"), N_("Search for library LIBNAME"), TWO_DASHES },
  { {"library-path", required_argument, NULL, 'L'},
      'L', N_("DIRECTORY"), N_("Add DIRECTORY to library search path"), TWO_DASHES },
  { {NULL, required_argument, NULL, '\0'},
      'm', N_("EMULATION"), N_("Set emulation"), ONE_DASH },
  { {"print-map", no_argument, NULL, 'M'},
      'M', NULL, N_("Print map file on standard output"), TWO_DASHES },
  { {"nmagic", no_argument, NULL, 'n'},
      'n', NULL, N_("Do not page align data"), TWO_DASHES },
  { {"omagic", no_argument, NULL, 'N'},
      'N', NULL, N_("Do not page align data, do not make text readonly"),
      EXACTLY_TWO_DASHES },
  { {"no-omagic", no_argument, NULL, OPTION_NO_OMAGIC},
      '\0', NULL, N_("Page align data, make text readonly"), EXACTLY_TWO_DASHES },
  { {"output", required_argument, NULL, 'o'},
      'o', N_("FILE"), N_("Set output file name"), EXACTLY_TWO_DASHES },
  { {NULL, required_argument, NULL, '\0'},
      'O', NULL, N_("Optimize output file"), ONE_DASH },
  { {"Qy", no_argument, NULL, OPTION_IGNORE},
      '\0', NULL, N_("Ignored for SVR4 compatibility"), ONE_DASH },
  { {"emit-relocs", no_argument, NULL, 'q'},
      'q', NULL, "Generate relocations in final output", TWO_DASHES },
  { {"relocatable", no_argument, NULL, 'r'},
      'r', NULL, N_("Generate relocatable output"), TWO_DASHES },
  { {NULL, no_argument, NULL, '\0'},
      'i', NULL, NULL, ONE_DASH },
  { {"just-symbols", required_argument, NULL, 'R'},
      'R', N_("FILE"), N_("Just link symbols (if directory, same as --rpath)"),
      TWO_DASHES },
  { {"strip-all", no_argument, NULL, 's'},
      's', NULL, N_("Strip all symbols"), TWO_DASHES },
  { {"strip-debug", no_argument, NULL, 'S'},
      'S', NULL, N_("Strip debugging symbols"), TWO_DASHES },
  { {"strip-discarded", no_argument, NULL, OPTION_STRIP_DISCARDED},
      '\0', NULL, N_("Strip symbols in discarded sections"), TWO_DASHES },
  { {"no-strip-discarded", no_argument, NULL, OPTION_NO_STRIP_DISCARDED},
      '\0', NULL, N_("Do not strip symbols in discarded sections"), TWO_DASHES },
  { {"trace", no_argument, NULL, 't'},
      't', NULL, N_("Trace file opens"), TWO_DASHES },
  { {"script", required_argument, NULL, 'T'},
      'T', N_("FILE"), N_("Read linker script"), TWO_DASHES },
  { {"undefined", required_argument, NULL, 'u'},
      'u', N_("SYMBOL"), N_("Start with undefined reference to SYMBOL"), TWO_DASHES },
  { {"unique", optional_argument, NULL, OPTION_UNIQUE},
      '\0', N_("[=SECTION]"), N_("Don't merge input [SECTION | orphan] sections"), TWO_DASHES },
  { {"Ur", no_argument, NULL, OPTION_UR},
      '\0', NULL, N_("Build global constructor/destructor tables"), ONE_DASH },
  { {"version", no_argument, NULL, OPTION_VERSION},
      'v', NULL, N_("Print version information"), TWO_DASHES },
  { {NULL, no_argument, NULL, '\0'},
      'V', NULL, N_("Print version and emulation information"), ONE_DASH },
  { {"discard-all", no_argument, NULL, 'x'},
      'x', NULL, N_("Discard all local symbols"), TWO_DASHES },
  { {"discard-locals", no_argument, NULL, 'X'},
      'X', NULL, N_("Discard temporary local symbols (default)"), TWO_DASHES },
  { {"discard-none", no_argument, NULL, OPTION_DISCARD_NONE},
      '\0', NULL, N_("Don't discard any local symbols"), TWO_DASHES },
  { {"trace-symbol", required_argument, NULL, 'y'},
      'y', N_("SYMBOL"), N_("Trace mentions of SYMBOL"), TWO_DASHES },
  { {NULL, required_argument, NULL, '\0'},
      'Y', N_("PATH"), N_("Default search path for Solaris compatibility"), ONE_DASH },
  { {"Zmagic", no_argument, NULL, 'Z'},
      'Z', NULL, N_("Do not page align got/plt, old style executable"),
      EXACTLY_TWO_DASHES },
  { {"start-group", no_argument, NULL, '('},
      '(', NULL, N_("Start a group"), TWO_DASHES },
  { {"end-group", no_argument, NULL, ')'},
      ')', NULL, N_("End a group"), TWO_DASHES },
  { {"accept-unknown-input-arch", no_argument, NULL, OPTION_ACCEPT_UNKNOWN_INPUT_ARCH},
    '\0', NULL, N_("Accept input files whose architecture cannot be determined"), TWO_DASHES },
  { {"no-accept-unknown-input-arch", no_argument, NULL, OPTION_NO_ACCEPT_UNKNOWN_INPUT_ARCH},
    '\0', NULL, N_("Reject input files whose architecture is unknown"), TWO_DASHES },
  { {"assert", required_argument, NULL, OPTION_ASSERT},
      '\0', N_("KEYWORD"), N_("Ignored for SunOS compatibility"), ONE_DASH },
  { {"Bdynamic", no_argument, NULL, OPTION_CALL_SHARED},
      '\0', NULL, N_("Link against shared libraries"), ONE_DASH },
  { {"dy", no_argument, NULL, OPTION_CALL_SHARED},
      '\0', NULL, NULL, ONE_DASH },
  { {"call_shared", no_argument, NULL, OPTION_CALL_SHARED},
      '\0', NULL, NULL, ONE_DASH },
  { {"Bstatic", no_argument, NULL, OPTION_NON_SHARED},
      '\0', NULL, N_("Do not link against shared libraries"), ONE_DASH },
  { {"dn", no_argument, NULL, OPTION_NON_SHARED},
      '\0', NULL, NULL, ONE_DASH },
  { {"non_shared", no_argument, NULL, OPTION_NON_SHARED},
      '\0', NULL, NULL, ONE_DASH },
  { {"static", no_argument, NULL, OPTION_NON_SHARED},
      '\0', NULL, NULL, ONE_DASH },
  { {"Bsymbolic", no_argument, NULL, OPTION_SYMBOLIC},
      '\0', NULL, N_("Bind global references locally"), ONE_DASH },
  { {"check-sections", no_argument, NULL, OPTION_CHECK_SECTIONS},
      '\0', NULL, N_("Check section addresses for overlaps (default)"), TWO_DASHES },
  { {"no-check-sections", no_argument, NULL, OPTION_NO_CHECK_SECTIONS},
      '\0', NULL, N_("Do not check section addresses for overlaps"),
      TWO_DASHES },
  { {"cref", no_argument, NULL, OPTION_CREF},
      '\0', NULL, N_("Output cross reference table"), TWO_DASHES },
  { {"defsym", required_argument, NULL, OPTION_DEFSYM},
      '\0', N_("SYMBOL=EXPRESSION"), N_("Define a symbol"), TWO_DASHES },
  { {"demangle", optional_argument, NULL, OPTION_DEMANGLE},
      '\0', N_("[=STYLE]"), N_("Demangle symbol names [using STYLE]"), TWO_DASHES },
  { {"embedded-relocs", no_argument, NULL, OPTION_EMBEDDED_RELOCS},
      '\0', NULL, N_("Generate embedded relocs"), TWO_DASHES},
  { {"fini", required_argument, NULL, OPTION_FINI},
     '\0', N_("SYMBOL"), N_("Call SYMBOL at unload-time"), ONE_DASH },
  { {"force-exe-suffix", no_argument, NULL, OPTION_FORCE_EXE_SUFFIX},
      '\0', NULL, N_("Force generation of file with .exe suffix"), TWO_DASHES},
  { {"gc-sections", no_argument, NULL, OPTION_GC_SECTIONS},
      '\0', NULL, N_("Remove unused sections (on some targets)"),
      TWO_DASHES },
  { {"no-gc-sections", no_argument, NULL, OPTION_NO_GC_SECTIONS},
      '\0', NULL, N_("Don't remove unused sections (default)"),
      TWO_DASHES },
  { {"help", no_argument, NULL, OPTION_HELP},
      '\0', NULL, N_("Print option help"), TWO_DASHES },
  { {"init", required_argument, NULL, OPTION_INIT},
     '\0', N_("SYMBOL"), N_("Call SYMBOL at load-time"), ONE_DASH },
  { {"Map", required_argument, NULL, OPTION_MAP},
      '\0', N_("FILE"), N_("Write a map file"), ONE_DASH },
  { {"no-define-common", no_argument, NULL, OPTION_NO_DEFINE_COMMON},
      '\0', NULL, N_("Do not define Common storage"), TWO_DASHES },
  { {"no-demangle", no_argument, NULL, OPTION_NO_DEMANGLE },
      '\0', NULL, N_("Do not demangle symbol names"), TWO_DASHES },
  { {"no-keep-memory", no_argument, NULL, OPTION_NO_KEEP_MEMORY},
      '\0', NULL, N_("Use less memory and more disk I/O"), TWO_DASHES },
  { {"no-undefined", no_argument, NULL, OPTION_NO_UNDEFINED},
     '\0', NULL, N_("Do not allow unresolved references in object files"), TWO_DASHES },
  { {"allow-shlib-undefined", no_argument, NULL, OPTION_ALLOW_SHLIB_UNDEFINED},
     '\0', NULL, N_("Allow unresolved references in shared libaries"), TWO_DASHES },
  { {"no-allow-shlib-undefined", no_argument, NULL, OPTION_NO_ALLOW_SHLIB_UNDEFINED},
     '\0', NULL, N_("Do not allow unresolved references in shared libs"), TWO_DASHES },
  { {"allow-multiple-definition", no_argument, NULL, OPTION_ALLOW_MULTIPLE_DEFINITION},
     '\0', NULL, N_("Allow multiple definitions"), TWO_DASHES },
  { {"no-undefined-version", no_argument, NULL, OPTION_NO_UNDEFINED_VERSION},
     '\0', NULL, N_("Disallow undefined version"), TWO_DASHES },
  { {"no-warn-mismatch", no_argument, NULL, OPTION_NO_WARN_MISMATCH},
      '\0', NULL, N_("Don't warn about mismatched input files"), TWO_DASHES},
  { {"no-whole-archive", no_argument, NULL, OPTION_NO_WHOLE_ARCHIVE},
      '\0', NULL, N_("Turn off --whole-archive"), TWO_DASHES },
  { {"noinhibit-exec", no_argument, NULL, OPTION_NOINHIBIT_EXEC},
      '\0', NULL, N_("Create an output file even if errors occur"), TWO_DASHES },
  { {"noinhibit_exec", no_argument, NULL, OPTION_NOINHIBIT_EXEC},
      '\0', NULL, NULL, NO_HELP },
  { {"nostdlib", no_argument, NULL, OPTION_NOSTDLIB},
      '\0', NULL, N_("Only use library directories specified on\n\t\t\t\tthe command line"), ONE_DASH },
  { {"oformat", required_argument, NULL, OPTION_OFORMAT},
      '\0', N_("TARGET"), N_("Specify target of output file"), EXACTLY_TWO_DASHES },
  { {"qmagic", no_argument, NULL, OPTION_IGNORE},
      '\0', NULL, N_("Ignored for Linux compatibility"), ONE_DASH },
  { {"relax", no_argument, NULL, OPTION_RELAX},
      '\0', NULL, N_("Relax branches on certain targets"), TWO_DASHES },
  { {"retain-symbols-file", required_argument, NULL,
       OPTION_RETAIN_SYMBOLS_FILE},
      '\0', N_("FILE"), N_("Keep only symbols listed in FILE"), TWO_DASHES },
  { {"rpath", required_argument, NULL, OPTION_RPATH},
      '\0', N_("PATH"), N_("Set runtime shared library search path"), ONE_DASH },
  { {"rpath-link", required_argument, NULL, OPTION_RPATH_LINK},
      '\0', N_("PATH"), N_("Set link time shared library search path"), ONE_DASH },
  { {"shared", no_argument, NULL, OPTION_SHARED},
      '\0', NULL, N_("Create a shared library"), ONE_DASH },
  { {"Bshareable", no_argument, NULL, OPTION_SHARED }, /* FreeBSD.  */
      '\0', NULL, NULL, ONE_DASH },
  { {"pie", no_argument, NULL, OPTION_PIE},
      '\0', NULL, N_("Create a position independent executable"), ONE_DASH },
  { {"pic-executable", no_argument, NULL, OPTION_PIE},
      '\0', NULL, NULL, TWO_DASHES },
  { {"nopie", no_argument, NULL, OPTION_NOPIE},
      '\0', NULL, N_("Do not create a position independent executable"), ONE_DASH },
  { {"sort-common", no_argument, NULL, OPTION_SORT_COMMON},
      '\0', NULL, N_("Sort common symbols by size"), TWO_DASHES },
  { {"sort_common", no_argument, NULL, OPTION_SORT_COMMON},
      '\0', NULL, NULL, NO_HELP },
  { {"spare-dynamic-tags", required_argument, NULL, OPTION_SPARE_DYNAMIC_TAGS},
      '\0', N_("COUNT"), N_("How many tags to reserve in .dynamic section"), TWO_DASHES },
  { {"split-by-file", optional_argument, NULL, OPTION_SPLIT_BY_FILE},
      '\0', N_("[=SIZE]"), N_("Split output sections every SIZE octets"), TWO_DASHES },
  { {"split-by-reloc", optional_argument, NULL, OPTION_SPLIT_BY_RELOC},
      '\0', N_("[=COUNT]"), N_("Split output sections every COUNT relocs"), TWO_DASHES },
  { {"stats", no_argument, NULL, OPTION_STATS},
      '\0', NULL, N_("Print memory usage statistics"), TWO_DASHES },
  { {"target-help", no_argument, NULL, OPTION_TARGET_HELP},
      '\0', NULL, N_("Display target specific options"), TWO_DASHES },
  { {"task-link", required_argument, NULL, OPTION_TASK_LINK},
      '\0', N_("SYMBOL"), N_("Do task level linking"), TWO_DASHES },
  { {"traditional-format", no_argument, NULL, OPTION_TRADITIONAL_FORMAT},
      '\0', NULL, N_("Use same format as native linker"), TWO_DASHES },
  { {"section-start", required_argument, NULL, OPTION_SECTION_START},
      '\0', N_("SECTION=ADDRESS"), N_("Set address of named section"), TWO_DASHES },
  { {"Tbss", required_argument, NULL, OPTION_TBSS},
      '\0', N_("ADDRESS"), N_("Set address of .bss section"), ONE_DASH },
  { {"Tdata", required_argument, NULL, OPTION_TDATA},
      '\0', N_("ADDRESS"), N_("Set address of .data section"), ONE_DASH },
  { {"Ttext", required_argument, NULL, OPTION_TTEXT},
      '\0', N_("ADDRESS"), N_("Set address of .text section"), ONE_DASH },
  { {"unresolved-symbols=<method>", required_argument, NULL, OPTION_UNRESOLVED_SYMBOLS},
     '\0', NULL, N_("How to handle unresolved symbols.  <method> is:\n\t\t\t\tignore-all, report-all, ignore-in-object-files,\n\t\t\t\tignore-in-shared-libs"),
    TWO_DASHES },
  { {"verbose", no_argument, NULL, OPTION_VERBOSE},
      '\0', NULL, N_("Output lots of information during link"), TWO_DASHES },
  { {"dll-verbose", no_argument, NULL, OPTION_VERBOSE}, /* Linux.  */
      '\0', NULL, NULL, NO_HELP },
  { {"version-script", required_argument, NULL, OPTION_VERSION_SCRIPT },
      '\0', N_("FILE"), N_("Read version information script"), TWO_DASHES },
  { {"version-exports-section", required_argument, NULL,
     OPTION_VERSION_EXPORTS_SECTION },
    '\0', N_("SYMBOL"), N_("Take export symbols list from .exports, using\n\t\t\t\tSYMBOL as the version."),
    TWO_DASHES },
  { {"warn-common", no_argument, NULL, OPTION_WARN_COMMON},
      '\0', NULL, N_("Warn about duplicate common symbols"), TWO_DASHES },
  { {"warn-constructors", no_argument, NULL, OPTION_WARN_CONSTRUCTORS},
      '\0', NULL, N_("Warn if global constructors/destructors are seen"),
      TWO_DASHES },
  { {"warn-multiple-gp", no_argument, NULL, OPTION_WARN_MULTIPLE_GP},
      '\0', NULL, N_("Warn if the multiple GP values are used"), TWO_DASHES },
  { {"warn-once", no_argument, NULL, OPTION_WARN_ONCE},
      '\0', NULL, N_("Warn only once per undefined symbol"), TWO_DASHES },
  { {"warn-section-align", no_argument, NULL, OPTION_WARN_SECTION_ALIGN},
      '\0', NULL, N_("Warn if start of section changes due to alignment"),
      TWO_DASHES },
  { {"warn-unresolved-symbols", no_argument, NULL, OPTION_WARN_UNRESOLVED_SYMBOLS},
    '\0', NULL, N_("Report unresolved symbols as warnings"), TWO_DASHES },
  { {"error-unresolved-symbols", no_argument, NULL, OPTION_ERROR_UNRESOLVED_SYMBOLS},
    '\0', NULL, N_("Report unresolved symbols as errors"), TWO_DASHES },
  { {"fatal-warnings", no_argument, NULL, OPTION_WARN_FATAL},
     '\0', NULL, N_("Treat warnings as errors"),
     TWO_DASHES },
  { {"whole-archive", no_argument, NULL, OPTION_WHOLE_ARCHIVE},
      '\0', NULL, N_("Include all objects from following archives"), TWO_DASHES },
  { {"as-needed", no_argument, NULL, OPTION_AS_NEEDED},
      '\0', NULL, N_("Only set DT_NEEDED for following dynamic libs if used"), TWO_DASHES },
  { {"no-as-needed", no_argument, NULL, OPTION_NO_AS_NEEDED},
      '\0', NULL, N_("Always set DT_NEEDED for following dynamic libs"), TWO_DASHES },
  { {"wrap", required_argument, NULL, OPTION_WRAP},
      '\0', N_("SYMBOL"), N_("Use wrapper functions for SYMBOL"), TWO_DASHES }
};

#define OPTION_COUNT ARRAY_SIZE (ld_options)

void
parse_args (unsigned argc, char **argv)
{
  unsigned i;
  int is, il, irl;
  int ingroup = 0;
  char *default_dirlist = NULL;
  char *shortopts;
  struct option *longopts;
  struct option *really_longopts;
  int last_optind;
  enum report_method how_to_report_unresolved_symbols = RM_GENERATE_ERROR;

  shortopts = xmalloc (OPTION_COUNT * 3 + 2);
  longopts = xmalloc (sizeof (*longopts) * (OPTION_COUNT + 1));
  really_longopts = xmalloc (sizeof (*really_longopts) * (OPTION_COUNT + 1));

  /* Starting the short option string with '-' is for programs that
     expect options and other ARGV-elements in any order and that care about
     the ordering of the two.  We describe each non-option ARGV-element
     as if it were the argument of an option with character code 1.  */
  shortopts[0] = '-';
  is = 1;
  il = 0;
  irl = 0;
  for (i = 0; i < OPTION_COUNT; i++)
    {
      if (ld_options[i].shortopt != '\0')
	{
	  shortopts[is] = ld_options[i].shortopt;
	  ++is;
	  if (ld_options[i].opt.has_arg == required_argument
	      || ld_options[i].opt.has_arg == optional_argument)
	    {
	      shortopts[is] = ':';
	      ++is;
	      if (ld_options[i].opt.has_arg == optional_argument)
		{
		  shortopts[is] = ':';
		  ++is;
		}
	    }
	}
      if (ld_options[i].opt.name != NULL)
	{
	  if (ld_options[i].control == EXACTLY_TWO_DASHES)
	    {
	      really_longopts[irl] = ld_options[i].opt;
	      ++irl;
	    }
	  else
	    {
	      longopts[il] = ld_options[i].opt;
	      ++il;
	    }
	}
    }
  shortopts[is] = '\0';
  longopts[il].name = NULL;
  really_longopts[irl].name = NULL;

  ldemul_add_options (is, &shortopts, il, &longopts, irl, &really_longopts);

  /* The -G option is ambiguous on different platforms.  Sometimes it
     specifies the largest data size to put into the small data
     section.  Sometimes it is equivalent to --shared.  Unfortunately,
     the first form takes an argument, while the second does not.

     We need to permit the --shared form because on some platforms,
     such as Solaris, gcc -shared will pass -G to the linker.

     To permit either usage, we look through the argument list.  If we
     find -G not followed by a number, we change it into --shared.
     This will work for most normal cases.  */
  for (i = 1; i < argc; i++)
    if (strcmp (argv[i], "-G") == 0
	&& (i + 1 >= argc
	    || ! ISDIGIT (argv[i + 1][0])))
      argv[i] = (char *) "--shared";

  /* Because we permit long options to start with a single dash, and
     we have a --library option, and the -l option is conventionally
     used with an immediately following argument, we can have bad
     results if somebody tries to use -l with a library whose name
     happens to start with "ibrary", as in -li.  We avoid problems by
     simply turning -l into --library.  This means that users will
     have to use two dashes in order to use --library, which is OK
     since that's how it is documented.

     FIXME: It's possible that this problem can arise for other short
     options as well, although the user does always have the recourse
     of adding a space between the option and the argument.  */
  for (i = 1; i < argc; i++)
    {
      if (argv[i][0] == '-'
	  && argv[i][1] == 'l'
	  && argv[i][2] != '\0')
	{
	  char *n;

	  n = xmalloc (strlen (argv[i]) + 20);
	  sprintf (n, "--library=%s", argv[i] + 2);
	  argv[i] = n;
	}
    }

  last_optind = -1;
  while (1)
    {
      int longind;
      int optc;

      /* Using last_optind lets us avoid calling ldemul_parse_args
	 multiple times on a single option, which would lead to
	 confusion in the internal static variables maintained by
	 getopt.  This could otherwise happen for an argument like
	 -nx, in which the -n is parsed as a single option, and we
	 loop around to pick up the -x.  */
      if (optind != last_optind)
	if (ldemul_parse_args (argc, argv))
	  continue;

      /* getopt_long_only is like getopt_long, but '-' as well as '--'
	 can indicate a long option.  */
      opterr = 0;
      last_optind = optind;
      optc = getopt_long_only (argc, argv, shortopts, longopts, &longind);
      if (optc == '?')
	{
	  optind = last_optind;
	  optc = getopt_long (argc, argv, "-", really_longopts, &longind);
	}

      if (ldemul_handle_option (optc))
	continue;

      if (optc == -1)
	break;

      switch (optc)
	{
	case '?':
	  einfo (_("%P: unrecognized option '%s'\n"), argv[last_optind]);
	default:
	  einfo (_("%P%F: use the --help option for usage information\n"));

	case 1:			/* File name.  */
	  lang_add_input_file (optarg, lang_input_file_is_file_enum, NULL);
	  break;

	case OPTION_IGNORE:
	  break;
	case 'a':
	  /* For HP/UX compatibility.  Actually -a shared should mean
	     ``use only shared libraries'' but, then, we don't
	     currently support shared libraries on HP/UX anyhow.  */
	  if (strcmp (optarg, "archive") == 0)
	    config.dynamic_link = FALSE;
	  else if (strcmp (optarg, "shared") == 0
		   || strcmp (optarg, "default") == 0)
	    config.dynamic_link = TRUE;
	  else
	    einfo (_("%P%F: unrecognized -a option `%s'\n"), optarg);
	  break;
	case OPTION_ASSERT:
	  /* FIXME: We just ignore these, but we should handle them.  */
	  if (strcmp (optarg, "definitions") == 0)
	    ;
	  else if (strcmp (optarg, "nodefinitions") == 0)
	    ;
	  else if (strcmp (optarg, "nosymbolic") == 0)
	    ;
	  else if (strcmp (optarg, "pure-text") == 0)
	    ;
	  else
	    einfo (_("%P%F: unrecognized -assert option `%s'\n"), optarg);
	  break;
	case 'A':
	  ldfile_add_arch (optarg);
	  break;
	case 'b':
	  lang_add_target (optarg);
	  break;
	case 'c':
	  ldfile_open_command_file (optarg);
	  parser_input = input_mri_script;
	  yyparse ();
	  break;
	case OPTION_CALL_SHARED:
	  config.dynamic_link = TRUE;
	  break;
	case OPTION_NON_SHARED:
	  config.dynamic_link = FALSE;
	  break;
	case OPTION_CREF:
	  command_line.cref = TRUE;
	  link_info.notice_all = TRUE;
	  break;
	case 'd':
	  command_line.force_common_definition = TRUE;
	  break;
	case OPTION_DEFSYM:
	  lex_string = optarg;
	  lex_redirect (optarg);
	  parser_input = input_defsym;
	  parsing_defsym = 1;
	  yyparse ();
	  parsing_defsym = 0;
	  lex_string = NULL;
	  break;
	case OPTION_DEMANGLE:
	  demangling = TRUE;
	  if (optarg != NULL)
	    {
	      enum demangling_styles style;

	      style = cplus_demangle_name_to_style (optarg);
	      if (style == unknown_demangling)
		einfo (_("%F%P: unknown demangling style `%s'"),
		       optarg);

	      cplus_demangle_set_style (style);
	    }
	  break;
	case 'I':		/* Used on Solaris.  */
	case OPTION_DYNAMIC_LINKER:
	  command_line.interpreter = optarg;
	  break;
	case OPTION_EB:
	  command_line.endian = ENDIAN_BIG;
	  break;
	case OPTION_EL:
	  command_line.endian = ENDIAN_LITTLE;
	  break;
	case OPTION_EMBEDDED_RELOCS:
	  command_line.embedded_relocs = TRUE;
	  break;
	case OPTION_EXPORT_DYNAMIC:
	case 'E': /* HP/UX compatibility.  */
	  link_info.export_dynamic = TRUE;
	  break;
	case 'e':
	  lang_add_entry (optarg, TRUE);
	  break;
	case 'f':
	  if (command_line.auxiliary_filters == NULL)
	    {
	      command_line.auxiliary_filters = xmalloc (2 * sizeof (char *));
	      command_line.auxiliary_filters[0] = optarg;
	      command_line.auxiliary_filters[1] = NULL;
	    }
	  else
	    {
	      int c;
	      char **p;

	      c = 0;
	      for (p = command_line.auxiliary_filters; *p != NULL; p++)
		++c;
	      command_line.auxiliary_filters
		= xrealloc (command_line.auxiliary_filters,
			    (c + 2) * sizeof (char *));
	      command_line.auxiliary_filters[c] = optarg;
	      command_line.auxiliary_filters[c + 1] = NULL;
	    }
	  break;
	case 'F':
	  command_line.filter_shlib = optarg;
	  break;
	case OPTION_FORCE_EXE_SUFFIX:
	  command_line.force_exe_suffix = TRUE;
	  break;
	case 'G':
	  {
	    char *end;
	    g_switch_value = strtoul (optarg, &end, 0);
	    if (*end)
	      einfo (_("%P%F: invalid number `%s'\n"), optarg);
	  }
	  break;
	case 'g':
	  /* Ignore.  */
	  break;
	case OPTION_GC_SECTIONS:
	  command_line.gc_sections = TRUE;
	  break;
	case OPTION_HELP:
	  help ();
	  xexit (0);
	  break;
	case 'L':
	  ldfile_add_library_path (optarg, TRUE);
	  break;
	case 'l':
	  lang_add_input_file (optarg, lang_input_file_is_l_enum, NULL);
	  break;
	case 'M':
	  config.map_filename = "-";
	  break;
	case 'm':
	  /* Ignore.  Was handled in a pre-parse.   */
	  break;
	case OPTION_MAP:
	  config.map_filename = optarg;
	  break;
	case 'N':
	  config.text_read_only = FALSE;
	  config.magic_demand_paged = FALSE;
	  config.dynamic_link = FALSE;
	  break;
	case OPTION_NO_OMAGIC:
	  config.text_read_only = TRUE;
	  config.magic_demand_paged = TRUE;
	  /* NB/ Does not set dynamic_link to TRUE.
	     Use --call-shared or -Bdynamic for this.  */
	  break;
	case 'n':
	  config.magic_demand_paged = FALSE;
	  config.dynamic_link = FALSE;
	  break;
	case OPTION_NO_DEFINE_COMMON:
	  command_line.inhibit_common_definition = TRUE;
	  break;
	case OPTION_NO_DEMANGLE:
	  demangling = FALSE;
	  break;
	case OPTION_NO_GC_SECTIONS:
	  command_line.gc_sections = FALSE;
	  break;
	case OPTION_NO_KEEP_MEMORY:
	  link_info.keep_memory = FALSE;
	  break;
	case OPTION_NO_UNDEFINED:
	  link_info.unresolved_syms_in_objects = how_to_report_unresolved_symbols;
	  break;
	case OPTION_ALLOW_SHLIB_UNDEFINED:
	  link_info.unresolved_syms_in_shared_libs = RM_IGNORE;
	  break;
	case OPTION_NO_ALLOW_SHLIB_UNDEFINED:
	  link_info.unresolved_syms_in_shared_libs = how_to_report_unresolved_symbols;
	  break;
	case OPTION_UNRESOLVED_SYMBOLS:
	  if (strcmp (optarg, "ignore-all") == 0)
	    {
	      link_info.unresolved_syms_in_objects = RM_IGNORE;
	      link_info.unresolved_syms_in_shared_libs = RM_IGNORE;
	    }
	  else if (strcmp (optarg, "report-all") == 0)
	    {
	      link_info.unresolved_syms_in_objects = how_to_report_unresolved_symbols;
	      link_info.unresolved_syms_in_shared_libs = how_to_report_unresolved_symbols;
	    }
	  else if (strcmp (optarg, "ignore-in-object-files") == 0)
	    {
	      link_info.unresolved_syms_in_objects = RM_IGNORE;
	      link_info.unresolved_syms_in_shared_libs = how_to_report_unresolved_symbols;
	    }
      	  else if (strcmp (optarg, "ignore-in-shared-libs") == 0)
	    {
	      link_info.unresolved_syms_in_objects = how_to_report_unresolved_symbols;
	      link_info.unresolved_syms_in_shared_libs = RM_IGNORE;
	    }
	  else
	    einfo (_("%P%F: bad --unresolved-symbols option: %s\n"), optarg);
	  break;
	case OPTION_WARN_UNRESOLVED_SYMBOLS:
	  how_to_report_unresolved_symbols = RM_GENERATE_WARNING;
	  if (link_info.unresolved_syms_in_objects == RM_GENERATE_ERROR)
	    link_info.unresolved_syms_in_objects = RM_GENERATE_WARNING;
	  if (link_info.unresolved_syms_in_shared_libs == RM_GENERATE_ERROR)
	    link_info.unresolved_syms_in_shared_libs = RM_GENERATE_WARNING;
	  break;
	  
	case OPTION_ERROR_UNRESOLVED_SYMBOLS:
	  how_to_report_unresolved_symbols = RM_GENERATE_ERROR;
	  if (link_info.unresolved_syms_in_objects == RM_GENERATE_WARNING)
	    link_info.unresolved_syms_in_objects = RM_GENERATE_ERROR;
	  if (link_info.unresolved_syms_in_shared_libs == RM_GENERATE_WARNING)
	    link_info.unresolved_syms_in_shared_libs = RM_GENERATE_ERROR;
	  break;	  
	case OPTION_ALLOW_MULTIPLE_DEFINITION:
	  link_info.allow_multiple_definition = TRUE;
	  break;
	case OPTION_NO_UNDEFINED_VERSION:
	  link_info.allow_undefined_version = FALSE;
	  break;
	case OPTION_NO_WARN_MISMATCH:
	  command_line.warn_mismatch = FALSE;
	  break;
	case OPTION_NOINHIBIT_EXEC:
	  force_make_executable = TRUE;
	  break;
	case OPTION_NOSTDLIB:
	  config.only_cmd_line_lib_dirs = TRUE;
	  break;
	case OPTION_NO_WHOLE_ARCHIVE:
	  whole_archive = FALSE;
	  break;
	case 'O':
	  /* FIXME "-O<non-digits> <value>" used to set the address of
	     section <non-digits>.  Was this for compatibility with
	     something, or can we create a new option to do that
	     (with a syntax similar to -defsym)?
	     getopt can't handle two args to an option without kludges.  */

	  /* Enable optimizations of output files.  */
	  link_info.optimize = strtoul (optarg, NULL, 0) ? TRUE : FALSE;
	  break;
	case 'o':
	  lang_add_output (optarg, 0);
	  break;
	case OPTION_OFORMAT:
	  lang_add_output_format (optarg, NULL, NULL, 0);
	  break;
	case 'q':
	  link_info.emitrelocations = TRUE;
	  break;
	case 'i':
	case 'r':
	  if (optind == last_optind)
	    /* This can happen if the user put "-rpath,a" on the command
	       line.  (Or something similar.  The comma is important).
	       Getopt becomes confused and thinks that this is a -r option
	       but it cannot parse the text after the -r so it refuses to
	       increment the optind counter.  Detect this case and issue
	       an error message here.  We cannot just make this a warning,
	       increment optind, and continue because getopt is too confused
	       and will seg-fault the next time around.  */
	    einfo(_("%P%F: bad -rpath option\n"));

	  link_info.relocatable = TRUE;
	  config.build_constructors = FALSE;
	  config.magic_demand_paged = FALSE;
	  config.text_read_only = FALSE;
	  config.dynamic_link = FALSE;
	  break;
	case 'R':
	  /* The GNU linker traditionally uses -R to mean to include
	     only the symbols from a file.  The Solaris linker uses -R
	     to set the path used by the runtime linker to find
	     libraries.  This is the GNU linker -rpath argument.  We
	     try to support both simultaneously by checking the file
	     named.  If it is a directory, rather than a regular file,
	     we assume -rpath was meant.  */
	  {
	    struct stat s;

	    if (stat (optarg, &s) >= 0
		&& ! S_ISDIR (s.st_mode))
	      {
		lang_add_input_file (optarg,
				     lang_input_file_is_symbols_only_enum,
				     NULL);
		break;
	      }
	  }
	  /* Fall through.  */
	case OPTION_RPATH:
	  if (command_line.rpath == NULL)
	    command_line.rpath = xstrdup (optarg);
	  else
	    {
	      size_t rpath_len = strlen (command_line.rpath);
	      size_t optarg_len = strlen (optarg);
	      char *buf;
	      char *cp = command_line.rpath;

	      /* First see whether OPTARG is already in the path.  */
	      do
		{
		  size_t idx = 0;

		  while (optarg[idx] != '\0' && optarg[idx] == cp[idx])
		    ++idx;
		  if (optarg[idx] == '\0'
		      && (cp[idx] == '\0' || cp[idx] == ':'))
		    /* We found it.  */
		    break;

		  /* Not yet found.  */
		  cp = strchr (cp, ':');
		  if (cp != NULL)
		    ++cp;
		}
	      while (cp != NULL);

	      if (cp == NULL)
		{
		  buf = xmalloc (rpath_len + optarg_len + 2);
		  sprintf (buf, "%s:%s", command_line.rpath, optarg);
		  free (command_line.rpath);
		  command_line.rpath = buf;
		}
	    }
	  break;
	case OPTION_RPATH_LINK:
	  if (command_line.rpath_link == NULL)
	    command_line.rpath_link = xstrdup (optarg);
	  else
	    {
	      char *buf;

	      buf = xmalloc (strlen (command_line.rpath_link)
			     + strlen (optarg)
			     + 2);
	      sprintf (buf, "%s:%s", command_line.rpath_link, optarg);
	      free (command_line.rpath_link);
	      command_line.rpath_link = buf;
	    }
	  break;
	case OPTION_RELAX:
	  command_line.relax = TRUE;
	  break;
	case OPTION_RETAIN_SYMBOLS_FILE:
	  add_keepsyms_file (optarg);
	  break;
	case 'S':
	  link_info.strip = strip_debugger;
	  break;
	case 's':
	  link_info.strip = strip_all;
	  break;
	case OPTION_STRIP_DISCARDED:
	  link_info.strip_discarded = TRUE;
	  break;
	case OPTION_NO_STRIP_DISCARDED:
	  link_info.strip_discarded = FALSE;
	  break;
	case OPTION_SHARED:
	  if (config.has_shared)
	    {
	      link_info.shared = TRUE;
	      link_info.pie = FALSE;
	      /* When creating a shared library, the default
		 behaviour is to ignore any unresolved references.  */
	      if (link_info.unresolved_syms_in_objects == RM_NOT_YET_SET)
		link_info.unresolved_syms_in_objects = RM_IGNORE;
	      if (link_info.unresolved_syms_in_shared_libs == RM_NOT_YET_SET)
		link_info.unresolved_syms_in_shared_libs = RM_IGNORE;
	    }
	  else
	    einfo (_("%P%F: -shared not supported\n"));
	  break;
	case OPTION_PIE:
	  if (config.has_shared)
	    {
	      link_info.shared = TRUE;
	      link_info.pie = TRUE;
	    }
	  else
	    einfo (_("%P%F: -pie not supported\n"));
	  break;
	case OPTION_NOPIE:
	  if (config.has_shared)
	    {
	      link_info.shared = FALSE;
	      link_info.pie = FALSE;
	    }
	  else
	    einfo (_("%P%F: -nopie not supported\n"));
	  break;
	case 'h':		/* Used on Solaris.  */
	case OPTION_SONAME:
	  command_line.soname = optarg;
	  break;
	case OPTION_SORT_COMMON:
	  config.sort_common = TRUE;
	  break;
	case OPTION_STATS:
	  config.stats = TRUE;
	  break;
	case OPTION_SYMBOLIC:
	  link_info.symbolic = TRUE;
	  break;
	case 't':
	  trace_files = TRUE;
	  break;
	case 'T':
	  ldfile_open_command_file (optarg);
	  parser_input = input_script;
	  yyparse ();
	  break;
	case OPTION_SECTION_START:
	  {
	    char *optarg2;
	    char *sec_name;
	    int len;

	    /* Check for <something>=<somthing>...  */
	    optarg2 = strchr (optarg, '=');
	    if (optarg2 == NULL)
	      einfo (_("%P%F: invalid argument to option \"--section-start\"\n"));

	    optarg2++;

	    /* So far so good.  Are all the args present?  */
	    if ((*optarg == '\0') || (*optarg2 == '\0'))
	      einfo (_("%P%F: missing argument(s) to option \"--section-start\"\n"));

	    /* We must copy the section name as set_section_start
	       doesn't do it for us.  */
	    len = optarg2 - optarg;
	    sec_name = xmalloc (len);
	    memcpy (sec_name, optarg, len - 1);
	    sec_name[len - 1] = 0;

	    /* Then set it...  */
	    set_section_start (sec_name, optarg2);
	  }
	  break;
	case OPTION_TARGET_HELP:
	  /* Mention any target specific options.  */
	  ldemul_list_emulation_options (stdout);
	  exit (0);
	case OPTION_TBSS:
	  set_section_start (".bss", optarg);
	  break;
	case OPTION_TDATA:
	  set_section_start (".data", optarg);
	  break;
	case OPTION_TTEXT:
	  set_section_start (".text", optarg);
	  break;
	case OPTION_TRADITIONAL_FORMAT:
	  link_info.traditional_format = TRUE;
	  break;
	case OPTION_TASK_LINK:
	  link_info.task_link = TRUE;
	  /* Fall through - do an implied -r option.  */
	case OPTION_UR:
	  link_info.relocatable = TRUE;
	  config.build_constructors = TRUE;
	  config.magic_demand_paged = FALSE;
	  config.text_read_only = FALSE;
	  config.dynamic_link = FALSE;
	  break;
	case 'u':
	  ldlang_add_undef (optarg);
	  break;
	case OPTION_UNIQUE:
	  if (optarg != NULL)
	    lang_add_unique (optarg);
	  else
	    config.unique_orphan_sections = TRUE;
	  break;
	case OPTION_VERBOSE:
	  ldversion (1);
	  version_printed = TRUE;
	  trace_file_tries = TRUE;
	  overflow_cutoff_limit = -2;
	  break;
	case 'v':
	  ldversion (0);
	  version_printed = TRUE;
	  break;
	case 'V':
	  ldversion (1);
	  version_printed = TRUE;
	  break;
	case OPTION_VERSION:
	  ldversion (2);
	  xexit (0);
	  break;
	case OPTION_VERSION_SCRIPT:
	  /* This option indicates a small script that only specifies
	     version information.  Read it, but don't assume that
	     we've seen a linker script.  */
	  {
	    FILE *hold_script_handle;

	    hold_script_handle = saved_script_handle;
	    ldfile_open_command_file (optarg);
	    saved_script_handle = hold_script_handle;
	    parser_input = input_version_script;
	    yyparse ();
	  }
	  break;
	case OPTION_VERSION_EXPORTS_SECTION:
	  /* This option records a version symbol to be applied to the
	     symbols listed for export to be found in the object files
	     .exports sections.  */
	  command_line.version_exports_section = optarg;
	  break;
	case OPTION_WARN_COMMON:
	  config.warn_common = TRUE;
	  break;
	case OPTION_WARN_CONSTRUCTORS:
	  config.warn_constructors = TRUE;
	  break;
	case OPTION_WARN_FATAL:
	  config.fatal_warnings = TRUE;
	  break;
	case OPTION_WARN_MULTIPLE_GP:
	  config.warn_multiple_gp = TRUE;
	  break;
	case OPTION_WARN_ONCE:
	  config.warn_once = TRUE;
	  break;
	case OPTION_WARN_SECTION_ALIGN:
	  config.warn_section_align = TRUE;
	  break;
	case OPTION_WHOLE_ARCHIVE:
	  whole_archive = TRUE;
	  break;
	case OPTION_AS_NEEDED:
	  as_needed = TRUE;
	  break;
	case OPTION_NO_AS_NEEDED:
	  as_needed = FALSE;
	  break;
	case OPTION_WRAP:
	  add_wrap (optarg);
	  break;
	case OPTION_DISCARD_NONE:
	  link_info.discard = discard_none;
	  break;
	case 'X':
	  link_info.discard = discard_l;
	  break;
	case 'x':
	  link_info.discard = discard_all;
	  break;
	case 'Y':
	  if (strncmp (optarg, "P,", 2) == 0)
	    optarg += 2;
	  if (default_dirlist != NULL)
	    free (default_dirlist);
	  default_dirlist = xstrdup (optarg);
	  break;
	case 'y':
	  add_ysym (optarg);
	  break;
	case 'Z':
	  config.data_bss_contig = TRUE;
	  break;
	case OPTION_SPARE_DYNAMIC_TAGS:
	  link_info.spare_dynamic_tags = strtoul (optarg, NULL, 0);
	  break;
	case OPTION_SPLIT_BY_RELOC:
	  if (optarg != NULL)
	    config.split_by_reloc = strtoul (optarg, NULL, 0);
	  else
	    config.split_by_reloc = 32768;
	  break;
	case OPTION_SPLIT_BY_FILE:
	  if (optarg != NULL)
	    config.split_by_file = bfd_scan_vma (optarg, NULL, 0);
	  else
	    config.split_by_file = 1;
	  break;
	case OPTION_CHECK_SECTIONS:
	  command_line.check_section_addresses = TRUE;
	  break;
	case OPTION_NO_CHECK_SECTIONS:
	  command_line.check_section_addresses = FALSE;
	  break;
	case OPTION_ACCEPT_UNKNOWN_INPUT_ARCH:
	  command_line.accept_unknown_input_arch = TRUE;
	  break;
	case OPTION_NO_ACCEPT_UNKNOWN_INPUT_ARCH:
	  command_line.accept_unknown_input_arch = FALSE;
	  break;
	case '(':
	  if (ingroup)
	    einfo (_("%P%F: may not nest groups (--help for usage)\n"));

	  lang_enter_group ();
	  ingroup = 1;
	  break;
	case ')':
	  if (! ingroup)
	    einfo (_("%P%F: group ended before it began (--help for usage)\n"));

	  lang_leave_group ();
	  ingroup = 0;
	  break;

	case OPTION_INIT:
	  link_info.init_function = optarg;
	  break;

	case OPTION_FINI:
	  link_info.fini_function = optarg;
	  break;
	}
    }

  if (ingroup)
    lang_leave_group ();

  if (default_dirlist != NULL)
    {
      set_default_dirlist (default_dirlist);
      free (default_dirlist);
    }

  if (link_info.unresolved_syms_in_objects == RM_NOT_YET_SET)
    /* FIXME: Should we allow emulations a chance to set this ?  */
    link_info.unresolved_syms_in_objects = how_to_report_unresolved_symbols;
  
  if (link_info.unresolved_syms_in_shared_libs == RM_NOT_YET_SET)
    /* FIXME: Should we allow emulations a chance to set this ?  */
    link_info.unresolved_syms_in_shared_libs = how_to_report_unresolved_symbols;
}

/* Add the (colon-separated) elements of DIRLIST_PTR to the
   library search path.  */

static void
set_default_dirlist (char *dirlist_ptr)
{
  char *p;

  while (1)
    {
      p = strchr (dirlist_ptr, PATH_SEPARATOR);
      if (p != NULL)
	*p = '\0';
      if (*dirlist_ptr != '\0')
	ldfile_add_library_path (dirlist_ptr, TRUE);
      if (p == NULL)
	break;
      dirlist_ptr = p + 1;
    }
}

static void
set_section_start (char *sect, char *valstr)
{
  const char *end;
  bfd_vma val = bfd_scan_vma (valstr, &end, 16);
  if (*end)
    einfo (_("%P%F: invalid hex number `%s'\n"), valstr);
  lang_section_start (sect, exp_intop (val));
}

/* Print help messages for the options.  */

static void
help (void)
{
  unsigned i;
  const char **targets, **pp;

  printf (_("Usage: %s [options] file...\n"), program_name);

  printf (_("Options:\n"));
  for (i = 0; i < OPTION_COUNT; i++)
    {
      if (ld_options[i].doc != NULL)
	{
	  bfd_boolean comma;
	  int len;
	  unsigned j;

	  printf ("  ");

	  comma = FALSE;
	  len = 2;

	  j = i;
	  do
	    {
	      if (ld_options[j].shortopt != '\0'
		  && ld_options[j].control != NO_HELP)
		{
		  printf ("%s-%c", comma ? ", " : "", ld_options[j].shortopt);
		  len += (comma ? 2 : 0) + 2;
		  if (ld_options[j].arg != NULL)
		    {
		      if (ld_options[j].opt.has_arg != optional_argument)
			{
			  printf (" ");
			  ++len;
			}
		      printf ("%s", _(ld_options[j].arg));
		      len += strlen (_(ld_options[j].arg));
		    }
		  comma = TRUE;
		}
	      ++j;
	    }
	  while (j < OPTION_COUNT && ld_options[j].doc == NULL);

	  j = i;
	  do
	    {
	      if (ld_options[j].opt.name != NULL
		  && ld_options[j].control != NO_HELP)
		{
		  int two_dashes =
		    (ld_options[j].control == TWO_DASHES
		     || ld_options[j].control == EXACTLY_TWO_DASHES);

		  printf ("%s-%s%s",
			  comma ? ", " : "",
			  two_dashes ? "-" : "",
			  ld_options[j].opt.name);
		  len += ((comma ? 2 : 0)
			  + 1
			  + (two_dashes ? 1 : 0)
			  + strlen (ld_options[j].opt.name));
		  if (ld_options[j].arg != NULL)
		    {
		      printf (" %s", _(ld_options[j].arg));
		      len += 1 + strlen (_(ld_options[j].arg));
		    }
		  comma = TRUE;
		}
	      ++j;
	    }
	  while (j < OPTION_COUNT && ld_options[j].doc == NULL);

	  if (len >= 30)
	    {
	      printf ("\n");
	      len = 0;
	    }

	  for (; len < 30; len++)
	    putchar (' ');

	  printf ("%s\n", _(ld_options[i].doc));
	}
    }

  /* Note: Various tools (such as libtool) depend upon the
     format of the listings below - do not change them.  */
  /* xgettext:c-format */
  printf (_("%s: supported targets:"), program_name);
  targets = bfd_target_list ();
  for (pp = targets; *pp != NULL; pp++)
    printf (" %s", *pp);
  free (targets);
  printf ("\n");

  /* xgettext:c-format */
  printf (_("%s: supported emulations: "), program_name);
  ldemul_list_emulations (stdout);
  printf ("\n");

  /* xgettext:c-format */
  printf (_("%s: emulation specific options:\n"), program_name);
  ldemul_list_emulation_options (stdout);
  printf ("\n");

  printf (_("Report bugs to %s\n"), REPORT_BUGS_TO);
}
@


1.13
log
@Disable PIE-by-default if -static (or one of its aliases) is passed on the
command line.  While technically -static only controls whether we link against
static libraries, people expect that doing so produces a fully static binary.

tested by sthen@@
ok pascal@@, miod@@
@
text
@a651 2
	  if (! link_info.shared)
	    link_info.pie = FALSE;
@


1.12
log
@Add support for PIE-by-default in both ld and gcc.  This is a completely
different approach than the one taken in kurt@@'s original diff, but deemed
better after discussion and diff exchange with kettenis@@ and matthew@@.

Lots of feedback by kettenis@@ and matthew@@, prodding and encouragement by
deraadt@@.

ok kettenis@@ matthew@@
@
text
@d652 2
@


1.11
log
@Merge conflicts, bringing our changes back in:
- extra $(SHELL) and sugar for make (so that files not mode +x still work)
- safer temp file handling
- our W^X binary layout changes in ld
- OpenBSD policy for library file selection in ld
- arm and m88k changes which were not merged in time for official 2.15
- bfd core file handling
- a couple typos

New for 2.15:
- ld(1) and as(1) manpages now generated at build time
- binutils/stabs.c reverted to use our in-tree libiberty for now
- we still use our VIA C3 crypto code over stock binutils, as it recognizes
  more instructions
- new emulations for OpenBSD on mips64 machines, to help OpenBSD/sgi
- relaxed %f# handling in gas on OpenBSD/sparc64 (same as was in 2.14)

Tested on all platforms by various people; special thanks to sturm@@ and
otto@@.
@
text
@d143 1
d387 2
d991 1
d1010 9
@


1.10
log
@Resolve merge conflicts, adjust method of W^X handing (.sh files)
remove testsuites (not useable) remove mmalloc (not part of new binutils).
@
text
@d3 1
a3 1
   2001, 2002, 2003
d56 3
a58 4
static int is_num PARAMS ((const char *, int, int, int));
static void set_default_dirlist PARAMS ((char *));
static void set_section_start PARAMS ((char *, char *));
static void help PARAMS ((void));
d65 82
a146 75

#define OPTION_ASSERT			150
#define OPTION_CALL_SHARED		(OPTION_ASSERT + 1)
#define OPTION_CREF			(OPTION_CALL_SHARED + 1)
#define OPTION_DEFSYM			(OPTION_CREF + 1)
#define OPTION_DEMANGLE			(OPTION_DEFSYM + 1)
#define OPTION_DYNAMIC_LINKER		(OPTION_DEMANGLE + 1)
#define OPTION_EB			(OPTION_DYNAMIC_LINKER + 1)
#define OPTION_EL			(OPTION_EB + 1)
#define OPTION_EMBEDDED_RELOCS		(OPTION_EL + 1)
#define OPTION_EXPORT_DYNAMIC		(OPTION_EMBEDDED_RELOCS + 1)
#define OPTION_HELP			(OPTION_EXPORT_DYNAMIC + 1)
#define OPTION_IGNORE			(OPTION_HELP + 1)
#define OPTION_MAP			(OPTION_IGNORE + 1)
#define OPTION_NO_DEMANGLE		(OPTION_MAP + 1)
#define OPTION_NO_KEEP_MEMORY		(OPTION_NO_DEMANGLE + 1)
#define OPTION_NO_WARN_MISMATCH		(OPTION_NO_KEEP_MEMORY + 1)
#define OPTION_NOINHIBIT_EXEC		(OPTION_NO_WARN_MISMATCH + 1)
#define OPTION_NON_SHARED		(OPTION_NOINHIBIT_EXEC + 1)
#define OPTION_NO_WHOLE_ARCHIVE		(OPTION_NON_SHARED + 1)
#define OPTION_OFORMAT			(OPTION_NO_WHOLE_ARCHIVE + 1)
#define OPTION_RELAX			(OPTION_OFORMAT + 1)
#define OPTION_RETAIN_SYMBOLS_FILE	(OPTION_RELAX + 1)
#define OPTION_RPATH			(OPTION_RETAIN_SYMBOLS_FILE + 1)
#define OPTION_RPATH_LINK		(OPTION_RPATH + 1)
#define OPTION_SHARED			(OPTION_RPATH_LINK + 1)
#define OPTION_SONAME			(OPTION_SHARED + 1)
#define OPTION_SORT_COMMON		(OPTION_SONAME + 1)
#define OPTION_STATS			(OPTION_SORT_COMMON + 1)
#define OPTION_SYMBOLIC			(OPTION_STATS + 1)
#define OPTION_TASK_LINK		(OPTION_SYMBOLIC + 1)
#define OPTION_TBSS			(OPTION_TASK_LINK + 1)
#define OPTION_TDATA			(OPTION_TBSS + 1)
#define OPTION_TTEXT			(OPTION_TDATA + 1)
#define OPTION_TRADITIONAL_FORMAT	(OPTION_TTEXT + 1)
#define OPTION_UR			(OPTION_TRADITIONAL_FORMAT + 1)
#define OPTION_VERBOSE			(OPTION_UR + 1)
#define OPTION_VERSION			(OPTION_VERBOSE + 1)
#define OPTION_VERSION_SCRIPT		(OPTION_VERSION + 1)
#define OPTION_VERSION_EXPORTS_SECTION	(OPTION_VERSION_SCRIPT + 1)
#define OPTION_WARN_COMMON		(OPTION_VERSION_EXPORTS_SECTION + 1)
#define OPTION_WARN_CONSTRUCTORS	(OPTION_WARN_COMMON + 1)
#define OPTION_WARN_FATAL		(OPTION_WARN_CONSTRUCTORS + 1)
#define OPTION_WARN_MULTIPLE_GP		(OPTION_WARN_FATAL + 1)
#define OPTION_WARN_ONCE		(OPTION_WARN_MULTIPLE_GP + 1)
#define OPTION_WARN_SECTION_ALIGN	(OPTION_WARN_ONCE + 1)
#define OPTION_SPLIT_BY_RELOC		(OPTION_WARN_SECTION_ALIGN + 1)
#define OPTION_SPLIT_BY_FILE 	    	(OPTION_SPLIT_BY_RELOC + 1)
#define OPTION_WHOLE_ARCHIVE		(OPTION_SPLIT_BY_FILE + 1)
#define OPTION_WRAP			(OPTION_WHOLE_ARCHIVE + 1)
#define OPTION_FORCE_EXE_SUFFIX		(OPTION_WRAP + 1)
#define OPTION_GC_SECTIONS		(OPTION_FORCE_EXE_SUFFIX + 1)
#define OPTION_NO_GC_SECTIONS		(OPTION_GC_SECTIONS + 1)
#define OPTION_CHECK_SECTIONS		(OPTION_NO_GC_SECTIONS + 1)
#define OPTION_NO_CHECK_SECTIONS	(OPTION_CHECK_SECTIONS + 1)
#define OPTION_MPC860C0                 (OPTION_NO_CHECK_SECTIONS + 1)
#define OPTION_NO_UNDEFINED		(OPTION_MPC860C0 + 1)
#define OPTION_INIT                     (OPTION_NO_UNDEFINED + 1)
#define OPTION_FINI                     (OPTION_INIT + 1)
#define OPTION_SECTION_START		(OPTION_FINI + 1)
#define OPTION_UNIQUE			(OPTION_SECTION_START + 1)
#define OPTION_TARGET_HELP              (OPTION_UNIQUE + 1)
#define OPTION_ALLOW_SHLIB_UNDEFINED	(OPTION_TARGET_HELP + 1)
#define OPTION_NO_ALLOW_SHLIB_UNDEFINED	(OPTION_ALLOW_SHLIB_UNDEFINED + 1)
#define OPTION_ALLOW_MULTIPLE_DEFINITION (OPTION_NO_ALLOW_SHLIB_UNDEFINED + 1)
#define OPTION_NO_UNDEFINED_VERSION	(OPTION_ALLOW_MULTIPLE_DEFINITION + 1)
#define OPTION_DISCARD_NONE		(OPTION_NO_UNDEFINED_VERSION + 1)
#define OPTION_SPARE_DYNAMIC_TAGS	(OPTION_DISCARD_NONE + 1)
#define OPTION_NO_DEFINE_COMMON		(OPTION_SPARE_DYNAMIC_TAGS + 1)
#define OPTION_NOSTDLIB			(OPTION_NO_DEFINE_COMMON + 1)
#define OPTION_NO_OMAGIC		(OPTION_NOSTDLIB + 1)
#define OPTION_STRIP_DISCARDED		(OPTION_NO_OMAGIC + 1)
#define OPTION_NO_STRIP_DISCARDED	(OPTION_STRIP_DISCARDED + 1)
#define OPTION_ACCEPT_UNKNOWN_INPUT_ARCH    (OPTION_NO_STRIP_DISCARDED + 1)
#define OPTION_NO_ACCEPT_UNKNOWN_INPUT_ARCH (OPTION_ACCEPT_UNKNOWN_INPUT_ARCH + 1)
a231 3
  { {"Zmagic", no_argument, NULL, 'Z'},
      'Z', NULL, N_("Do not page align got/plt, old style executable"),
      EXACTLY_TWO_DASHES },
d242 2
a243 2
  { {"relocateable", no_argument, NULL, 'r'},
      'r', NULL, N_("Generate relocateable output"), TWO_DASHES },
d281 3
d346 1
a346 1
     '\0', NULL, N_("Allow no undefined symbols"), TWO_DASHES },
d348 1
a348 1
     '\0', NULL, N_("Allow undefined symbols in shared objects (the default)"), TWO_DASHES },
d350 1
a350 1
     '\0', NULL, N_("Do not allow undefined symbols in shared objects"), TWO_DASHES },
d382 4
d412 3
d437 4
d446 4
d451 1
a451 3
      '\0', N_("SYMBOL"), N_("Use wrapper functions for SYMBOL"), TWO_DASHES },
  { {"mpc860c0", optional_argument, NULL, OPTION_MPC860C0},
      '\0', N_("[=WORDS]"), N_("Modify problematic branches in last WORDS (1-10,\n\t\t\t\tdefault 5) words of a page"), TWO_DASHES }
a455 27
/* Test STRING for containing a string of digits that form a number
   between MIN and MAX.  The return value is the number or ERR.  */

static int
is_num (string, min, max, err)
     const char *string;
     int min;
     int max;
     int err;
{
  int result = 0;

  for (; *string; ++string)
    {
      if (! ISDIGIT (*string))
	{
	  result = err;
	  break;
	}
      result = result * 10 + (*string - '0');
    }
  if (result < min || result > max)
    result = err;

  return result;
}

d457 1
a457 3
parse_args (argc, argv)
     unsigned argc;
     char **argv;
d467 1
d469 3
a471 5
  shortopts = (char *) xmalloc (OPTION_COUNT * 3 + 2);
  longopts = (struct option *) xmalloc (sizeof (*longopts)
					* (OPTION_COUNT + 1));
  really_longopts = (struct option *) xmalloc (sizeof (*really_longopts)
					       * (OPTION_COUNT + 1));
d556 1
a556 1
	  n = (char *) xmalloc (strlen (argv[i]) + 20);
d603 1
a603 2
	  lang_add_input_file (optarg, lang_input_file_is_file_enum,
			       (char *) NULL);
d610 2
a611 2
             ``use only shared libraries'' but, then, we don't
             currently support shared libraries on HP/UX anyhow.  */
d703 1
a703 2
	      command_line.auxiliary_filters =
		(char **) xmalloc (2 * sizeof (char *));
d715 3
a717 3
	      command_line.auxiliary_filters =
		(char **) xrealloc (command_line.auxiliary_filters,
				    (c + 2) * sizeof (char *));
d750 1
a750 2
	  lang_add_input_file (optarg, lang_input_file_is_l_enum,
			       (char *) NULL);
a775 3
	case 'Z':
	  config.data_bss_contig = TRUE;
	  break;
d789 1
a789 1
	  link_info.no_undefined = TRUE;
d792 1
a792 1
	  link_info.allow_shlib_undefined = TRUE;
d795 1
a795 1
	  link_info.allow_shlib_undefined = FALSE;
d797 39
d868 1
a868 1
	  lang_add_output_format (optarg, (char *) NULL, (char *) NULL, 0);
d886 1
a886 1
	  link_info.relocateable = TRUE;
d908 1
a908 1
				     (char *) NULL);
d986 9
a994 1
	    link_info.shared = TRUE;
d998 9
d1076 1
a1076 1
	  link_info.relocateable = TRUE;
d1095 1
d1111 2
a1112 2
             version information.  Read it, but don't assume that
             we've seen a linker script.  */
d1150 6
d1178 3
a1221 16
	case OPTION_MPC860C0:
	  /* Default value (in bytes).  */
	  link_info.mpc860c0 = 20;
	  if (optarg)
	    {
	      unsigned words;

	      words = is_num (optarg, 1, 10, 0);
	      if (words == 0)
		einfo (_("%P%F: invalid argument to option \"mpc860c0\"\n"));

	      /* Convert words to bytes.  */
	      link_info.mpc860c0 = words * 4;
	    }
	  command_line.relax = TRUE;
	  break;
d1241 8
d1255 1
a1255 2
set_default_dirlist (dirlist_ptr)
     char *dirlist_ptr;
d1273 1
a1273 2
set_section_start (sect, valstr)
     char *sect, *valstr;
d1285 1
a1285 1
help ()
@


1.9
log
@This is a project to modify executables so that they do not have any
executable regions which are writable. If a section of an executable is
writable and executable, it is much easier for errant code to modify the
executable's behavior.

Two current areas in shared library environments which have this
critical problem are the GOT (Global Offset Table) and PLT (Procedure
Linkage Table). The PLT is required to be executable and both GOT and
PLT are writable on most architectures. On most ELF architecture
machines this would cause shared libraries to have data and BSS marked
as executable.

Padding to the linker script for programs and shared libraries/objects
to isolate the GOT and PLT into their own load sections in the
executables. This allows only the text(readonly) region and the PLT
region to be marked executable with the normal data and BSS not marked
as executable. The PLT region is still marked executable on most
architectures because the PLT lives in the "data" or "BSS" regions
and the dynamic loader will need to modify it. Since the GOT and PLT
should only ever be written by the dynamic linker, it will be modified
to mprotect those regions so that they are not writable during normal
execution. If the dynamic linker needs to modify the regions later,
(eg for lazy binding), it will mprotect the region, make the necessary
changes, and mprotect it back. Since it is possible to receive a
signal which would interrupt the program flow and perhaps cause the
dynamic linker to modify the same (or nearby) PLT references, it is now
necessary for signals to be blocked for the duration of the mprotect.
@
text
@d3 1
a3 1
   2001
d6 1
a6 1
This file is part of GLD, the Gnu Linker.
d8 14
a21 14
GLD is free software; you can redistribute it and/or modify
it under the terms of the GNU General Public License as published by
the Free Software Foundation; either version 2, or (at your option)
any later version.

GLD is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
GNU General Public License for more details.

You should have received a copy of the GNU General Public License
along with GLD; see the file COPYING.  If not, write to the Free
Software Foundation, 59 Temple Place - Suite 330, Boston, MA
02111-1307, USA.  */
d28 1
a28 1
#include <ctype.h>
d36 1
a36 1
#include "ldgram.h"
a55 4
/* Omit args to avoid the possibility of clashing with a system header
   that might disagree about consts.  */
unsigned long strtoul ();

d57 2
a58 2
static void set_default_dirlist PARAMS ((char *dirlist_ptr));
static void set_section_start PARAMS ((char *sect, char *valstr));
d108 2
a109 1
#define OPTION_WARN_MULTIPLE_GP		(OPTION_WARN_CONSTRUCTORS + 1)
d129 12
d211 2
d229 2
d250 4
d271 3
a273 1
      'X', NULL, N_("Discard temporary local symbols"), TWO_DASHES },
d282 4
a314 2
  { {"dynamic-linker", required_argument, NULL, OPTION_DYNAMIC_LINKER},
      '\0', N_("PROGRAM"), N_("Set the dynamic linker to use"), TWO_DASHES },
d333 2
d342 7
a348 1
     '\0', NULL, N_("Allow undefined symbols in shared objects"), TWO_DASHES },
d357 2
d380 2
d424 3
d451 1
a451 1
      if (! isdigit (*string))
d473 3
a475 3
  char shortopts[OPTION_COUNT * 3 + 2];
  struct option longopts[OPTION_COUNT + 1];
  struct option really_longopts[OPTION_COUNT + 1];
d478 6
d528 2
d544 1
a544 1
	    || ! isdigit ((unsigned char) argv[i + 1][0])))
d586 2
a587 5
	{
	  if (ldemul_parse_args (argc, argv))
	    continue;
	  last_optind = optind;
	}
d592 1
d596 2
a597 2
	  --optind;
	  optc = getopt_long (argc, argv, shortopts, really_longopts, &longind);
d600 3
d609 1
a609 2
	  fprintf (stderr, _("%s: unrecognized option '%s'\n"),
		   program_name, argv[optind - 1]);
d611 2
a612 4
	  fprintf (stderr,
		   _("%s: use the --help option for usage information\n"),
		   program_name);
	  xexit (1);
d625 1
a625 1
	    config.dynamic_link = false;
d628 1
a628 1
	    config.dynamic_link = true;
d657 1
a657 1
	  config.dynamic_link = true;
d660 1
a660 1
	  config.dynamic_link = false;
d663 2
a664 2
	  command_line.cref = true;
	  link_info.notice_all = true;
d667 1
a667 1
	  command_line.force_common_definition = true;
d679 1
a679 1
	  demangling = true;
d692 1
d703 1
a703 1
	  command_line.embedded_relocs = true;
d707 1
a707 1
	  command_line.export_dynamic = true;
d710 1
a710 1
	  lang_add_entry (optarg, true);
d739 1
a739 1
	  command_line.force_exe_suffix = true;
d753 1
a753 1
	  command_line.gc_sections = true;
d760 1
a760 1
	  ldfile_add_library_path (optarg, true);
d776 9
a784 3
	  config.text_read_only = false;
	  config.magic_demand_paged = false;
	  config.dynamic_link = false;
d787 2
a788 2
	  config.magic_demand_paged = false;
	  config.dynamic_link = false;
d791 4
a794 1
	  config.data_bss_contig = true;
d797 1
a797 1
	  demangling = false;
d800 1
a800 1
	  command_line.gc_sections = false;
d803 1
a803 1
	  link_info.keep_memory = false;
d806 1
a806 1
	  link_info.no_undefined = true;
d809 10
a818 1
	  link_info.allow_shlib_undefined = true;
d821 1
a821 1
	  command_line.warn_mismatch = false;
d824 4
a827 1
	  force_make_executable = true;
d830 1
a830 1
	  whole_archive = false;
d840 1
a840 1
	  link_info.optimize = strtoul (optarg, NULL, 0) ? true : false;
d849 1
a849 1
	  link_info.emitrelocations = true;
d853 16
a868 5
	  link_info.relocateable = true;
	  config.build_constructors = false;
	  config.magic_demand_paged = false;
	  config.text_read_only = false;
	  config.dynamic_link = false;
d905 1
d945 1
a945 1
	  command_line.relax = true;
d956 6
d964 1
a964 1
	    link_info.shared = true;
d973 1
a973 1
	  config.sort_common = true;
d976 1
a976 1
	  config.stats = true;
d979 1
a979 1
	  link_info.symbolic = true;
d982 1
a982 1
	  trace_files = true;
d998 1
a998 6
	      {
		fprintf (stderr,
			 _("%s: Invalid argument to option \"--section-start\"\n"),
			 program_name);
		xexit (1);
	      }
d1004 1
a1004 6
	      {
		fprintf (stderr,
			 _("%s: Missing argument(s) to option \"--section-start\"\n"),
			 program_name);
		xexit (1);
	      }
d1019 2
a1020 2
          ldemul_list_emulation_options (stdout);
          exit (0);
d1031 1
a1031 1
	  link_info.traditional_format = true;
d1034 1
a1034 1
	  link_info.task_link = true;
d1037 5
a1041 5
	  link_info.relocateable = true;
	  config.build_constructors = true;
	  config.magic_demand_paged = false;
	  config.text_read_only = false;
	  config.dynamic_link = false;
d1050 1
a1050 1
	    config.unique_orphan_sections = true;
d1054 2
a1055 2
	  version_printed = true;
	  trace_file_tries = true;
d1059 1
a1059 1
	  version_printed = true;
d1063 1
a1063 1
	  version_printed = true;
d1066 1
a1066 16
	  /* This output is intended to follow the GNU standards document.  */
	  printf ("GNU ld %s\n", ld_program_version);
	  printf (_("Copyright 2001 Free Software Foundation, Inc.\n"));
	  printf (_("\
This program is free software; you may redistribute it under the terms of\n\
the GNU General Public License.  This program has absolutely no warranty.\n"));
	  {
	    ld_emulation_xfer_type **ptr = ld_emulations;

	    printf (_("  Supported emulations:\n"));
	    while (*ptr)
	      {
		printf ("   %s\n", (*ptr)->emulation_name);
		ptr++;
	      }
	  }
d1074 1
a1074 1
	    boolean hold_had_script;
d1076 1
a1076 1
	    hold_had_script = had_script;
d1078 1
a1078 1
	    had_script = hold_had_script;
d1090 1
a1090 1
	  config.warn_common = true;
d1093 4
a1096 1
	  config.warn_constructors = true;
d1099 1
a1099 1
	  config.warn_multiple_gp = true;
d1102 1
a1102 1
	  config.warn_once = true;
d1105 1
a1105 1
	  config.warn_section_align = true;
d1108 1
a1108 1
	  whole_archive = true;
d1113 3
d1125 2
d1132 3
d1148 1
a1148 1
	  command_line.check_section_addresses = true;
d1151 7
a1157 1
	  command_line.check_section_addresses = false;
d1161 2
a1162 6
	    {
	      fprintf (stderr,
		       _("%s: may not nest groups (--help for usage)\n"),
		       program_name);
	      xexit (1);
	    }
d1168 2
a1169 6
	    {
	      fprintf (stderr,
		       _("%s: group ended before it began (--help for usage)\n"),
		       program_name);
	      xexit (1);
	    }
d1174 2
a1175 1
	  link_info.mpc860c0 = 20;      /* default value (in bytes) */
d1182 4
a1185 7
		{
		  fprintf (stderr,
			   _("%s: Invalid argument to option \"mpc860c0\"\n"),
			   program_name);
		  xexit (1);
		}
	      link_info.mpc860c0 = words * 4;	/* convert words to bytes */
d1187 1
a1187 1
	  command_line.relax = true;
d1204 4
a1207 2
    set_default_dirlist (default_dirlist);

d1225 1
a1225 1
	ldfile_add_library_path (dirlist_ptr, true);
d1258 1
a1258 1
	  boolean comma;
d1264 1
a1264 1
	  comma = false;
d1285 1
a1285 1
		  comma = true;
d1300 1
a1300 1
		  
d1314 1
a1314 1
		  comma = true;
@


1.8
log
@Add a compatibilty flag '-Z' for upcoming elf changes, does nothing currently
but will produce old style executables when the other changes appear.
@
text
@d742 1
a742 1
	  /* compatibility flag, unused */
@


1.7
log
@resolve conflicts.
@
text
@d215 3
d740 3
@


1.6
log
@Help stupid cvs fixing basic conflicts.
@
text
@d2 2
a3 1
   Copyright (C) 1991, 92, 93, 94, 95, 96, 97, 98, 99, 2000
d41 1
d51 1
a51 1
/* Somewhere above, sys/stat.h got included . . . . */
d128 4
d147 18
a164 9
  enum
    {
      /* Use one dash before long option name.  */
      ONE_DASH,
      /* Use two dashes before long option name.  */
      TWO_DASHES,
      /* Don't mention this option in --help output.  */
      NO_HELP
    } control;
d214 1
a214 1
      TWO_DASHES },
d216 1
a216 1
      'o', N_("FILE"), N_("Set output file name"), TWO_DASHES },
d221 2
d240 2
a255 2
  { {NULL, required_argument, NULL, '\0'},
      'z', N_("KEYWORD"), N_("Ignored for Solaris compatibility"), ONE_DASH },
d287 2
a288 2
  { {"demangle", no_argument, NULL, OPTION_DEMANGLE},
      '\0', NULL, N_("Demangle symbol names"), TWO_DASHES },
d315 2
d326 1
a326 1
      '\0', N_("TARGET"), N_("Specify target of output file"), TWO_DASHES },
d346 4
a349 4
  { {"split-by-file", no_argument, NULL, OPTION_SPLIT_BY_FILE},
      '\0', NULL, N_("Split output sections for each file"), TWO_DASHES },
  { {"split-by-reloc", required_argument, NULL, OPTION_SPLIT_BY_RELOC},
      '\0', N_("COUNT"), N_("Split output sections every COUNT relocs"), TWO_DASHES },
d352 2
d358 2
d396 1
a396 1
#define OPTION_COUNT ((int) (sizeof ld_options / sizeof ld_options[0]))
d427 1
a427 1
     int argc;
d430 2
a431 1
  int i, is, il;
d436 1
d446 1
d467 10
a476 2
	  longopts[il] = ld_options[i].opt;
	  ++il;
d481 1
d547 1
d549 5
d557 1
d560 3
d635 11
d750 3
d773 1
a773 1
	  lang_add_output (optarg, 0); 
d778 3
d812 1
a812 1
	    command_line.rpath = buystring (optarg);
d849 1
a849 1
	    command_line.rpath_link = buystring (optarg);
d901 42
d968 6
d990 1
a990 1
	  printf (_("Copyright 2000 Free Software Foundation, Inc.\n"));
d996 1
a996 1
    
d998 1
a998 1
	    while (*ptr) 
d1061 5
a1065 4
	case 'z':
	  /* We accept and ignore this option for Solaris
             compatibility.  Actually, on Solaris, optarg is not
             ignored.  Someday we should handle it correctly.  FIXME.  */
a1066 3
	case OPTION_SPLIT_BY_RELOC:
	  config.split_by_reloc = strtoul (optarg, NULL, 0);
	  break; 
d1068 5
a1072 2
	  config.split_by_file = true;
	  break; 
d1101 10
a1110 10
      case OPTION_MPC860C0:
          link_info.mpc860c0 = 20;      /* default value (in bytes) */
          if (optarg)
            {
              unsigned words;

              words = is_num (optarg, 1, 10, 0);
              if (words == 0)
                {
                  fprintf (stderr,
d1113 6
a1118 6
                  xexit (1);
                }
              link_info.mpc860c0 = words * 4;   /* convert words to bytes */
            }
          command_line.relax = true;
          break;
d1123 1
a1123 1
	  
d1176 1
a1176 1
  int i;
d1188 1
a1188 1
	  int j;
d1225 4
d1231 1
a1231 1
			  ld_options[j].control == TWO_DASHES ? "-" : "",
d1235 1
a1235 1
			  + (ld_options[j].control == TWO_DASHES ? 1 : 0)
@


1.5
log
@Merge to Cygnus 961112 + add some support (not ready) for shared libs
@
text
@d2 2
a3 1
   Copyright (C) 1991, 92, 93, 94, 95, 1996 Free Software Foundation, Inc.
d18 3
a20 2
along with GLD; see the file COPYING.  If not, write to
the Free Software Foundation, 59 Temple Place - Suite 330, Boston, MA 02111-1307, USA.  */
d41 8
d58 1
d73 2
a74 1
#define OPTION_DYNAMIC_LINKER		(OPTION_DEFSYM + 1)
d82 4
a85 2
#define OPTION_NO_KEEP_MEMORY		(OPTION_MAP + 1)
#define OPTION_NOINHIBIT_EXEC		(OPTION_NO_KEEP_MEMORY + 1)
d96 1
a96 2
#define OPTION_STATIC			(OPTION_SORT_COMMON + 1)
#define OPTION_STATS			(OPTION_STATIC + 1)
d98 2
a99 1
#define OPTION_TBSS			(OPTION_SYMBOLIC + 1)
d106 3
a108 1
#define OPTION_WARN_COMMON		(OPTION_VERSION + 1)
d118 8
d155 1
a155 1
      'a', "KEYWORD", "Shared library control for HP/UX compatibility",
d158 1
a158 1
      'A', "ARCH", "Set architecture" , TWO_DASHES },
d160 1
a160 1
      'b', "TARGET", "Specify target for following input files", TWO_DASHES },
d162 1
a162 1
      'c', "FILE", "Read MRI format linker script", TWO_DASHES },
d164 1
a164 1
      'd', NULL, "Force common symbols to be defined", ONE_DASH },
d168 1
a168 1
      'e', "ADDRESS", "Set start address", TWO_DASHES },
d170 10
a179 3
      'E', NULL, "Export all dynamic symbols", TWO_DASHES },
  { {NULL, optional_argument, NULL, '\0'},
      'F', "[FORMAT]", "Ignored", ONE_DASH },
d181 1
a181 1
      'g', NULL, "Ignored", ONE_DASH },
d183 1
a183 1
      'G', "SIZE", "Small data size (if no size, same as --shared)",
d186 1
a186 1
      'h', "FILENAME", "Set internal name of shared library", ONE_DASH },
d188 1
a188 1
      'l', "LIBNAME", "Search for library LIBNAME", TWO_DASHES },
d190 1
a190 1
      'L', "DIRECTORY", "Add DIRECTORY to library search path", TWO_DASHES },
d192 1
a192 1
      'm', "EMULATION", "Set emulation", ONE_DASH },
d194 1
a194 1
      'M', NULL, "Print map file on standard output", TWO_DASHES },
d196 1
a196 1
      'n', NULL, "Do not page align data", TWO_DASHES },
d198 1
a198 1
      'N', NULL, "Do not page align data, do not make text readonly",
d201 1
a201 1
      'o', "FILE", "Set output file name", TWO_DASHES },
d203 3
a205 1
      'O', NULL, "Ignored", ONE_DASH },
d207 1
a207 1
      'r', NULL, "Generate relocateable output", TWO_DASHES },
d211 1
a211 1
      'R', "FILE", "Just link symbols (if directory, same as --rpath)",
d214 1
a214 1
      's', NULL, "Strip all symbols", TWO_DASHES },
d216 1
a216 1
      'S', NULL, "Strip debugging symbols", TWO_DASHES },
d218 1
a218 1
      't', NULL, "Trace file opens", TWO_DASHES },
d220 1
a220 1
      'T', "FILE", "Read linker script", TWO_DASHES },
d222 3
a224 1
      'u', "SYMBOL", "Start with undefined reference to SYMBOL", TWO_DASHES },
d226 1
a226 1
      'v', NULL, "Print version information", TWO_DASHES },
d228 1
a228 1
      'V', NULL, "Print version and emulation information", ONE_DASH },
d230 1
a230 1
      'x', NULL, "Discard all local symbols", TWO_DASHES },
d232 1
a232 1
      'X', NULL, "Discard temporary local symbols", TWO_DASHES },
d234 1
a234 1
      'y', "SYMBOL", "Trace mentions of SYMBOL", TWO_DASHES },
d236 1
a236 1
      'Y', "PATH", "Default search path for Solaris compatibility", ONE_DASH },
d238 1
a238 1
      'z', "KEYWORD", "Ignored for Solaris compatibility", ONE_DASH },
d240 1
a240 1
      '(', NULL, "Start a group", TWO_DASHES },
d242 1
a242 1
      ')', NULL, "End a group", TWO_DASHES },
d244 1
a244 1
      '\0', "KEYWORD", "Ignored for SunOS compatibility", ONE_DASH },
d246 1
a246 1
      '\0', NULL, "Link against shared libraries", ONE_DASH },
d251 2
a252 2
  { {"Bstatic", no_argument, NULL, OPTION_STATIC},
      '\0', NULL, "Do not link against shared libraries", ONE_DASH },
d257 1
a257 1
  { {"static", no_argument, NULL, OPTION_STATIC},
d260 6
a265 1
      '\0', NULL, "Bind global references locally", ONE_DASH },
d267 1
a267 1
      '\0', NULL, "Output cross reference table", TWO_DASHES },
d269 3
a271 1
      '\0', "SYMBOL=EXPRESSION", "Define a symbol", TWO_DASHES },
d273 1
a273 5
      '\0', "PROGRAM", "Set the dynamic linker to use", TWO_DASHES },
  { {"EB", no_argument, NULL, OPTION_EB},
      '\0', NULL, "Link big-endian objects", ONE_DASH },
  { {"EL", no_argument, NULL, OPTION_EL},
      '\0', NULL, "Link little-endian objects", ONE_DASH },
d275 3
a277 1
      '\0', NULL, "Generate embedded relocs", TWO_DASHES},
d279 7
a285 1
      '\0', NULL, "Force generation of file with .exe suffix", TWO_DASHES},
d287 3
a289 1
      '\0', NULL, "Print option help", TWO_DASHES },
d291 3
a293 1
      '\0', "FILE", "Write a map file", ONE_DASH },
d295 5
a299 1
      '\0', NULL, "Use less memory and more disk I/O", TWO_DASHES },
d301 1
a301 1
      '\0', NULL, "Turn off --whole-archive", TWO_DASHES },
d303 1
a303 1
      '\0', NULL, "Create an output file even if errors occur", TWO_DASHES },
d307 1
a307 1
      '\0', "TARGET", "Specify target of output file", TWO_DASHES },
d309 1
a309 3
      '\0', NULL, "Ignored for Linux compatibility", ONE_DASH },
  { {"Qy", no_argument, NULL, OPTION_IGNORE},
      '\0', NULL, "Ignored for SVR4 compatibility", ONE_DASH },
d311 1
a311 1
      '\0', NULL, "Relax branches on certain targets", TWO_DASHES },
d314 1
a314 1
      '\0', "FILE", "Keep only symbols listed in FILE", TWO_DASHES },
d316 1
a316 1
      '\0', "PATH", "Set runtime shared library search path", ONE_DASH },
d318 1
a318 1
      '\0', "PATH", "Set link time shared library search path", ONE_DASH },
d320 1
a320 1
      '\0', NULL, "Create a shared library", ONE_DASH },
d324 1
a324 1
      '\0', NULL, "Sort common symbols by size", TWO_DASHES },
d328 1
a328 1
      '\0', NULL, "Split output sections for each file", TWO_DASHES },
d330 1
a330 1
      '\0', "COUNT", "Split output sections every COUNT relocs", TWO_DASHES },
d332 3
a334 1
      '\0', NULL, "Print memory usage statistics", TWO_DASHES },
d336 1
a336 1
      '\0', NULL, "Use same format as native linker", TWO_DASHES },
d338 1
a338 1
      '\0', "ADDRESS", "Set address of .bss section", ONE_DASH },
d340 1
a340 1
      '\0', "ADDRESS", "Set address of .data section", ONE_DASH },
d342 1
a342 3
      '\0', "ADDRESS", "Set address of .text section", ONE_DASH },
  { {"Ur", no_argument, NULL, OPTION_UR},
      '\0', NULL, "Build global constructor/destructor tables", ONE_DASH },
d344 1
a344 1
      '\0', NULL, "Output lots of information during link", TWO_DASHES },
d347 6
d354 1
a354 1
      '\0', NULL, "Warn about duplicate common symbols", TWO_DASHES },
d356 1
a356 1
      '\0', NULL, "Warn if global constructors/destructors are seen",
d359 1
a359 1
      '\0', NULL, "Warn if the multiple GP values are used", TWO_DASHES },
d361 1
a361 1
      '\0', NULL, "Warn only once per undefined symbol", TWO_DASHES },
d363 1
a363 1
      '\0', NULL, "Warn if start of section changes due to alignment",
d366 1
a366 1
      '\0', NULL, "Include all objects from following archives", TWO_DASHES },
d368 3
a370 1
      '\0', "SYMBOL", "Use wrapper functions for SYMBOL", TWO_DASHES }
d373 28
a400 1
#define OPTION_COUNT (sizeof ld_options / sizeof ld_options[0])
d412 1
d462 1
a462 1
	    || ! isdigit (argv[i + 1][0])))
d465 27
a493 2
      /* getopt_long_only is like getopt_long, but '-' as well as '--' can
	 indicate a long option.  */
d497 12
a508 2
      if (ldemul_parse_args (argc, argv))
	continue;
d510 2
d519 3
d540 1
a540 1
	    einfo ("%P%F: unrecognized -a option `%s'\n", optarg);
d553 1
a553 1
	    einfo ("%P%F: unrecognized -assert option `%s'\n", optarg);
d588 3
d610 23
d634 1
a634 1
	  /* Ignore.  */
d644 1
a644 1
	      einfo ("%P%F: invalid number `%s'\n", optarg);
d650 3
d682 6
d691 6
d709 3
d753 2
d756 1
d758 25
a782 6
	      buf = xmalloc (strlen (command_line.rpath)
			     + strlen (optarg)
			     + 2);
	      sprintf (buf, "%s:%s", command_line.rpath, optarg);
	      free (command_line.rpath);
	      command_line.rpath = buf;
a811 4
	case OPTION_STATIC:
	  config.dynamic_link = false;
	  link_info.static_link = true;         /*XXX added for mips, check ppc usage */
	  break;
d813 4
a816 1
	  link_info.shared = true;
d851 3
d880 2
a881 2
	  printf ("Copyright 1996 Free Software Foundation, Inc.\n");
	  printf ("\
d883 1
a883 1
the GNU General Public License.  This program has absolutely no warranty.\n");
d887 1
a887 1
	    printf ("  Supported emulations:\n");
d896 20
d957 1
a957 1
	  config.split_by_reloc = atoi (optarg);
d962 6
d972 1
a972 1
		       "%s: may not nest groups (--help for usage)\n",
d983 1
a983 1
		       "%s: group ended before it began (--help for usage)\n",
d990 26
a1015 1

d1038 1
a1038 1
      p = strchr (dirlist_ptr, ':');
d1053 2
a1054 2
  char *end;
  unsigned long val = strtoul (valstr, &end, 16);
d1056 1
a1056 1
    einfo ("%P%F: invalid hex number `%s'\n", valstr);
d1068 1
a1068 1
  printf ("Usage: %s [options] file...\n", program_name);
d1070 1
a1070 1
  printf ("Options:\n");
d1099 2
a1100 2
		      printf ("%s", ld_options[j].arg);
		      len += strlen (ld_options[j].arg);
d1124 2
a1125 2
		      printf (" %s", ld_options[j].arg);
		      len += 1 + strlen (ld_options[j].arg);
d1142 1
a1142 1
	  printf ("%s\n", ld_options[i].doc);
d1146 4
a1149 1
  printf ("%s: supported targets:", program_name);
d1156 2
a1157 1
  printf ("%s: supported emulations: ", program_name);
d1160 7
a1166 1
  printf ("\nReport bugs to bug-gnu-utils@@prep.ai.mit.edu\n");
@


1.4
log
@Merge the Cygnus 960904 sources
@
text
@d96 2
a97 1
#define OPTION_SPLIT_BY_RELOC		(OPTION_WARN_ONCE + 1)
d266 1
a266 1
      '\0', "PATH", "Set line time shared library search path", ONE_DASH },
d293 1
a293 1
  { {"dll-verbose", no_argument, NULL, OPTION_VERSION}, /* Linux.  */
d304 3
d682 17
a698 2
	  ldversion (0);
	  version_printed = true;
d712 3
d909 1
@


1.3
log
@A couple of more fixes. -static *IS* static...
@
text
@d22 1
d441 1
d708 1
a708 1
	  default_dirlist = optarg;
d771 2
a772 2
	*p = 0;
      if (*dirlist_ptr)
a775 1
      *p = ':';
@


1.2
log
@Bring Cygnus versions into the trunk, keeping our local patches
@
text
@d81 2
a82 1
#define OPTION_STATS			(OPTION_SORT_COMMON + 1)
d214 1
a214 1
  { {"Bstatic", no_argument, NULL, OPTION_NON_SHARED},
d220 1
a220 1
  { {"static", no_argument, NULL, OPTION_NON_SHARED},
d611 4
@


1.1
log
@Initial revision
@
text
@d2 1
a2 1
   Copyright (C) 1991, 92, 93, 94, 1995 Free Software Foundation, Inc.
d49 1
d54 2
a55 18
void
parse_args (argc, argv)
     int argc;
     char **argv;
{
  int i;
  int ingroup = 0;
  char *default_dirlist = NULL;

  /* Starting the short option string with '-' is for programs that
     expect options and other ARGV-elements in any order and that care about
     the ordering of the two.  We describe each non-option ARGV-element
     as if it were the argument of an option with character code 1.  */

  const char *shortopts =
    "-a:A:b:c:de:F::G:gh:iL:l:Mm:NnO:o:R:rSsT:tu:VvXxY:y:z:()";

  /* 150 isn't special; it's just an arbitrary non-ASCII char value.  */
d59 2
a60 1
#define OPTION_DEFSYM			(OPTION_CALL_SHARED + 1)
d72 2
a73 1
#define OPTION_OFORMAT			(OPTION_NON_SHARED + 1)
d92 2
a93 1
#define OPTION_WARN_ONCE		(OPTION_WARN_CONSTRUCTORS + 1)
d97 2
d100 2
d103 250
a352 57
  static struct option longopts[] = {
  /* Sorted alphabeticaly, except for the PE options grouped at the end. */
    {"assert", required_argument, NULL, OPTION_ASSERT},
    {"Bdynamic", no_argument, NULL, OPTION_CALL_SHARED},
    {"Bstatic", no_argument, NULL, OPTION_NON_SHARED},
    {"Bsymbolic", no_argument, NULL, OPTION_SYMBOLIC},
    {"call_shared", no_argument, NULL, OPTION_CALL_SHARED},
    {"dc", no_argument, NULL, 'd'},
    {"defsym", required_argument, NULL, OPTION_DEFSYM},
    {"dll-verbose", no_argument, NULL, OPTION_VERSION}, /* Linux.  */
    {"dn", no_argument, NULL, OPTION_NON_SHARED},
    {"dp", no_argument, NULL, 'd'},
    {"dy", no_argument, NULL, OPTION_CALL_SHARED},
    {"dynamic-linker", required_argument, NULL, OPTION_DYNAMIC_LINKER},
    {"EB", no_argument, NULL, OPTION_EB},
    {"EL", no_argument, NULL, OPTION_EL},
    {"embedded-relocs", no_argument, NULL, OPTION_EMBEDDED_RELOCS},
    {"end-group", no_argument, NULL, ')'},
    {"export-dynamic", no_argument, NULL, OPTION_EXPORT_DYNAMIC},
    {"format", required_argument, NULL, 'b'},
    {"help", no_argument, NULL, OPTION_HELP},
    {"Map", required_argument, NULL, OPTION_MAP},
    {"no-keep-memory", no_argument, NULL, OPTION_NO_KEEP_MEMORY},
    {"noinhibit-exec", no_argument, NULL, OPTION_NOINHIBIT_EXEC},
    {"noinhibit_exec", no_argument, NULL, OPTION_NOINHIBIT_EXEC},
    {"non_shared", no_argument, NULL, OPTION_NON_SHARED},
    {"oformat", required_argument, NULL, OPTION_OFORMAT},
    {"Qy", no_argument, NULL, OPTION_IGNORE},
    {"qmagic", no_argument, NULL, OPTION_IGNORE}, /* Linux compatibility.  */
    {"relax", no_argument, NULL, OPTION_RELAX},
    {"retain-symbols-file", required_argument, NULL, OPTION_RETAIN_SYMBOLS_FILE},
    {"rpath", required_argument, NULL, OPTION_RPATH},
    {"rpath-link", required_argument, NULL, OPTION_RPATH_LINK},
    {"shared", no_argument, NULL, OPTION_SHARED},
    {"soname", required_argument, NULL, OPTION_SONAME},
    {"sort-common", no_argument, NULL, OPTION_SORT_COMMON},
    {"sort_common", no_argument, NULL, OPTION_SORT_COMMON},
    {"start-group", no_argument, NULL, '('},
    {"stats", no_argument, NULL, OPTION_STATS},
    {"static", no_argument, NULL, OPTION_NON_SHARED},
    {"Tbss", required_argument, NULL, OPTION_TBSS},
    {"Tdata", required_argument, NULL, OPTION_TDATA},
    {"Ttext", required_argument, NULL, OPTION_TTEXT},
    {"traditional-format", no_argument, NULL, OPTION_TRADITIONAL_FORMAT},
    {"Ur", no_argument, NULL, OPTION_UR},
    {"verbose", no_argument, NULL, OPTION_VERBOSE},
    {"version", no_argument, NULL, OPTION_VERSION},
    {"warn-common", no_argument, NULL, OPTION_WARN_COMMON},
    {"warn-constructors", no_argument, NULL, OPTION_WARN_CONSTRUCTORS},
    {"warn-once", no_argument, NULL, OPTION_WARN_ONCE},
    {"split-by-reloc", required_argument, NULL, OPTION_SPLIT_BY_RELOC},
    {"split-by-file", no_argument, NULL, OPTION_SPLIT_BY_FILE},
    {"whole-archive", no_argument, NULL, OPTION_WHOLE_ARCHIVE},

      
    {NULL, no_argument, NULL, 0}
  };
d438 3
d466 1
d475 3
d512 1
d516 1
d524 3
d645 1
a645 1
	  config.traditional_format = true;
d680 3
d689 3
d785 97
@


1.1.1.1
log
@Initial GNU binutils 2.6 import
@
text
@@


1.1.1.2
log
@Import of binutils, gas, ld & gprof from Cygnus 960609 tree
@
text
@d2 1
a2 1
   Copyright (C) 1991, 92, 93, 94, 95, 1996 Free Software Foundation, Inc.
a48 1
static void help PARAMS ((void));
d53 18
a70 2
/* Codes used for the long options with no short synonyms.  150 isn't
   special; it's just an arbitrary non-ASCII char value.  */
d74 1
a74 2
#define OPTION_CREF			(OPTION_CALL_SHARED + 1)
#define OPTION_DEFSYM			(OPTION_CREF + 1)
d86 1
a86 2
#define OPTION_NO_WHOLE_ARCHIVE		(OPTION_NON_SHARED + 1)
#define OPTION_OFORMAT			(OPTION_NO_WHOLE_ARCHIVE + 1)
d105 1
a105 2
#define OPTION_WARN_MULTIPLE_GP		(OPTION_WARN_CONSTRUCTORS + 1)
#define OPTION_WARN_ONCE		(OPTION_WARN_MULTIPLE_GP + 1)
a108 2
#define OPTION_WRAP			(OPTION_WHOLE_ARCHIVE + 1)
#define OPTION_FORCE_EXE_SUFFIX		(OPTION_WRAP + 1)
a109 2
/* The long options.  This structure is used for both the option
   parsing and the help text.  */
d111 57
a167 250
struct ld_option
{
  /* The long option information.  */
  struct option opt;
  /* The short option with the same meaning ('\0' if none).  */
  char shortopt;
  /* The name of the argument (NULL if none).  */
  const char *arg;
  /* The documentation string.  If this is NULL, this is a synonym for
     the previous option.  */
  const char *doc;
  enum
    {
      /* Use one dash before long option name.  */
      ONE_DASH,
      /* Use two dashes before long option name.  */
      TWO_DASHES,
      /* Don't mention this option in --help output.  */
      NO_HELP
    } control;
};

static const struct ld_option ld_options[] =
{
  { {NULL, required_argument, NULL, '\0'},
      'a', "KEYWORD", "Shared library control for HP/UX compatibility",
      ONE_DASH },
  { {"architecture", required_argument, NULL, 'A'},
      'A', "ARCH", "Set architecture" , TWO_DASHES },
  { {"format", required_argument, NULL, 'b'},
      'b', "TARGET", "Specify target for following input files", TWO_DASHES },
  { {"mri-script", required_argument, NULL, 'c'},
      'c', "FILE", "Read MRI format linker script", TWO_DASHES },
  { {"dc", no_argument, NULL, 'd'},
      'd', NULL, "Force common symbols to be defined", ONE_DASH },
  { {"dp", no_argument, NULL, 'd'},
      '\0', NULL, NULL, ONE_DASH },
  { {"entry", required_argument, NULL, 'e'},
      'e', "ADDRESS", "Set start address", TWO_DASHES },
  { {"export-dynamic", no_argument, NULL, OPTION_EXPORT_DYNAMIC},
      'E', NULL, "Export all dynamic symbols", TWO_DASHES },
  { {NULL, optional_argument, NULL, '\0'},
      'F', "[FORMAT]", "Ignored", ONE_DASH },
  { {NULL, no_argument, NULL, '\0'},
      'g', NULL, "Ignored", ONE_DASH },
  { {"gpsize", required_argument, NULL, 'G'},
      'G', "SIZE", "Small data size (if no size, same as --shared)",
      TWO_DASHES },
  { {"soname", required_argument, NULL, OPTION_SONAME},
      'h', "FILENAME", "Set internal name of shared library", ONE_DASH },
  { {"library", required_argument, NULL, 'l'},
      'l', "LIBNAME", "Search for library LIBNAME", TWO_DASHES },
  { {"library-path", required_argument, NULL, 'L'},
      'L', "DIRECTORY", "Add DIRECTORY to library search path", TWO_DASHES },
  { {NULL, required_argument, NULL, '\0'},
      'm', "EMULATION", "Set emulation", ONE_DASH },
  { {"print-map", no_argument, NULL, 'M'},
      'M', NULL, "Print map file on standard output", TWO_DASHES },
  { {"nmagic", no_argument, NULL, 'n'},
      'n', NULL, "Do not page align data", TWO_DASHES },
  { {"omagic", no_argument, NULL, 'N'},
      'N', NULL, "Do not page align data, do not make text readonly",
      TWO_DASHES },
  { {"output", required_argument, NULL, 'o'},
      'o', "FILE", "Set output file name", TWO_DASHES },
  { {NULL, required_argument, NULL, '\0'},
      'O', NULL, "Ignored", ONE_DASH },
  { {"relocateable", no_argument, NULL, 'r'},
      'r', NULL, "Generate relocateable output", TWO_DASHES },
  { {NULL, no_argument, NULL, '\0'},
      'i', NULL, NULL, ONE_DASH },
  { {"just-symbols", required_argument, NULL, 'R'},
      'R', "FILE", "Just link symbols (if directory, same as --rpath)",
      TWO_DASHES },
  { {"strip-all", no_argument, NULL, 's'},
      's', NULL, "Strip all symbols", TWO_DASHES },
  { {"strip-debug", no_argument, NULL, 'S'},
      'S', NULL, "Strip debugging symbols", TWO_DASHES },
  { {"trace", no_argument, NULL, 't'},
      't', NULL, "Trace file opens", TWO_DASHES },
  { {"script", required_argument, NULL, 'T'},
      'T', "FILE", "Read linker script", TWO_DASHES },
  { {"undefined", required_argument, NULL, 'u'},
      'u', "SYMBOL", "Start with undefined reference to SYMBOL", TWO_DASHES },
  { {"version", no_argument, NULL, OPTION_VERSION},
      'v', NULL, "Print version information", TWO_DASHES },
  { {NULL, no_argument, NULL, '\0'},
      'V', NULL, "Print version and emulation information", ONE_DASH },
  { {"discard-all", no_argument, NULL, 'x'},
      'x', NULL, "Discard all local symbols", TWO_DASHES },
  { {"discard-locals", no_argument, NULL, 'X'},
      'X', NULL, "Discard temporary local symbols", TWO_DASHES },
  { {"trace-symbol", required_argument, NULL, 'y'},
      'y', "SYMBOL", "Trace mentions of SYMBOL", TWO_DASHES },
  { {NULL, required_argument, NULL, '\0'},
      'Y', "PATH", "Default search path for Solaris compatibility", ONE_DASH },
  { {NULL, required_argument, NULL, '\0'},
      'z', "KEYWORD", "Ignored for Solaris compatibility", ONE_DASH },
  { {"start-group", no_argument, NULL, '('},
      '(', NULL, "Start a group", TWO_DASHES },
  { {"end-group", no_argument, NULL, ')'},
      ')', NULL, "End a group", TWO_DASHES },
  { {"assert", required_argument, NULL, OPTION_ASSERT},
      '\0', "KEYWORD", "Ignored for SunOS compatibility", ONE_DASH },
  { {"Bdynamic", no_argument, NULL, OPTION_CALL_SHARED},
      '\0', NULL, "Link against shared libraries", ONE_DASH },
  { {"dy", no_argument, NULL, OPTION_CALL_SHARED},
      '\0', NULL, NULL, ONE_DASH },
  { {"call_shared", no_argument, NULL, OPTION_CALL_SHARED},
      '\0', NULL, NULL, ONE_DASH },
  { {"Bstatic", no_argument, NULL, OPTION_NON_SHARED},
      '\0', NULL, "Do not link against shared libraries", ONE_DASH },
  { {"dn", no_argument, NULL, OPTION_NON_SHARED},
      '\0', NULL, NULL, ONE_DASH },
  { {"non_shared", no_argument, NULL, OPTION_NON_SHARED},
      '\0', NULL, NULL, ONE_DASH },
  { {"static", no_argument, NULL, OPTION_NON_SHARED},
      '\0', NULL, NULL, ONE_DASH },
  { {"Bsymbolic", no_argument, NULL, OPTION_SYMBOLIC},
      '\0', NULL, "Bind global references locally", ONE_DASH },
  { {"cref", no_argument, NULL, OPTION_CREF},
      '\0', NULL, "Output cross reference table", TWO_DASHES },
  { {"defsym", required_argument, NULL, OPTION_DEFSYM},
      '\0', "SYMBOL=EXPRESSION", "Define a symbol", TWO_DASHES },
  { {"dynamic-linker", required_argument, NULL, OPTION_DYNAMIC_LINKER},
      '\0', "PROGRAM", "Set the dynamic linker to use", TWO_DASHES },
  { {"EB", no_argument, NULL, OPTION_EB},
      '\0', NULL, "Link big-endian objects", ONE_DASH },
  { {"EL", no_argument, NULL, OPTION_EL},
      '\0', NULL, "Link little-endian objects", ONE_DASH },
  { {"embedded-relocs", no_argument, NULL, OPTION_EMBEDDED_RELOCS},
      '\0', NULL, "Generate embedded relocs", TWO_DASHES},
  { {"force-exe-suffix", no_argument, NULL, OPTION_FORCE_EXE_SUFFIX},
      '\0', NULL, "Force generation of file with .exe suffix", TWO_DASHES},
  { {"help", no_argument, NULL, OPTION_HELP},
      '\0', NULL, "Print option help", TWO_DASHES },
  { {"Map", required_argument, NULL, OPTION_MAP},
      '\0', "FILE", "Write a map file", ONE_DASH },
  { {"no-keep-memory", no_argument, NULL, OPTION_NO_KEEP_MEMORY},
      '\0', NULL, "Use less memory and more disk I/O", TWO_DASHES },
  { {"no-whole-archive", no_argument, NULL, OPTION_NO_WHOLE_ARCHIVE},
      '\0', NULL, "Turn off --whole-archive", TWO_DASHES },
  { {"noinhibit-exec", no_argument, NULL, OPTION_NOINHIBIT_EXEC},
      '\0', NULL, "Create an output file even if errors occur", TWO_DASHES },
  { {"noinhibit_exec", no_argument, NULL, OPTION_NOINHIBIT_EXEC},
      '\0', NULL, NULL, NO_HELP },
  { {"oformat", required_argument, NULL, OPTION_OFORMAT},
      '\0', "TARGET", "Specify target of output file", TWO_DASHES },
  { {"qmagic", no_argument, NULL, OPTION_IGNORE},
      '\0', NULL, "Ignored for Linux compatibility", ONE_DASH },
  { {"Qy", no_argument, NULL, OPTION_IGNORE},
      '\0', NULL, "Ignored for SVR4 compatibility", ONE_DASH },
  { {"relax", no_argument, NULL, OPTION_RELAX},
      '\0', NULL, "Relax branches on certain targets", TWO_DASHES },
  { {"retain-symbols-file", required_argument, NULL,
       OPTION_RETAIN_SYMBOLS_FILE},
      '\0', "FILE", "Keep only symbols listed in FILE", TWO_DASHES },
  { {"rpath", required_argument, NULL, OPTION_RPATH},
      '\0', "PATH", "Set runtime shared library search path", ONE_DASH },
  { {"rpath-link", required_argument, NULL, OPTION_RPATH_LINK},
      '\0', "PATH", "Set line time shared library search path", ONE_DASH },
  { {"shared", no_argument, NULL, OPTION_SHARED},
      '\0', NULL, "Create a shared library", ONE_DASH },
  { {"Bshareable", no_argument, NULL, OPTION_SHARED }, /* FreeBSD.  */
      '\0', NULL, NULL, ONE_DASH },
  { {"sort-common", no_argument, NULL, OPTION_SORT_COMMON},
      '\0', NULL, "Sort common symbols by size", TWO_DASHES },
  { {"sort_common", no_argument, NULL, OPTION_SORT_COMMON},
      '\0', NULL, NULL, NO_HELP },
  { {"split-by-file", no_argument, NULL, OPTION_SPLIT_BY_FILE},
      '\0', NULL, "Split output sections for each file", TWO_DASHES },
  { {"split-by-reloc", required_argument, NULL, OPTION_SPLIT_BY_RELOC},
      '\0', "COUNT", "Split output sections every COUNT relocs", TWO_DASHES },
  { {"stats", no_argument, NULL, OPTION_STATS},
      '\0', NULL, "Print memory usage statistics", TWO_DASHES },
  { {"traditional-format", no_argument, NULL, OPTION_TRADITIONAL_FORMAT},
      '\0', NULL, "Use same format as native linker", TWO_DASHES },
  { {"Tbss", required_argument, NULL, OPTION_TBSS},
      '\0', "ADDRESS", "Set address of .bss section", ONE_DASH },
  { {"Tdata", required_argument, NULL, OPTION_TDATA},
      '\0', "ADDRESS", "Set address of .data section", ONE_DASH },
  { {"Ttext", required_argument, NULL, OPTION_TTEXT},
      '\0', "ADDRESS", "Set address of .text section", ONE_DASH },
  { {"Ur", no_argument, NULL, OPTION_UR},
      '\0', NULL, "Build global constructor/destructor tables", ONE_DASH },
  { {"verbose", no_argument, NULL, OPTION_VERBOSE},
      '\0', NULL, "Output lots of information during link", TWO_DASHES },
  { {"dll-verbose", no_argument, NULL, OPTION_VERSION}, /* Linux.  */
      '\0', NULL, NULL, NO_HELP },
  { {"warn-common", no_argument, NULL, OPTION_WARN_COMMON},
      '\0', NULL, "Warn about duplicate common symbols", TWO_DASHES },
  { {"warn-constructors", no_argument, NULL, OPTION_WARN_CONSTRUCTORS},
      '\0', NULL, "Warn if global constructors/destructors are seen",
      TWO_DASHES },
  { {"warn-multiple-gp", no_argument, NULL, OPTION_WARN_MULTIPLE_GP},
      '\0', NULL, "Warn if the multiple GP values are used", TWO_DASHES },
  { {"warn-once", no_argument, NULL, OPTION_WARN_ONCE},
      '\0', NULL, "Warn only once per undefined symbol", TWO_DASHES },
  { {"whole-archive", no_argument, NULL, OPTION_WHOLE_ARCHIVE},
      '\0', NULL, "Include all objects from following archives", TWO_DASHES },
  { {"wrap", required_argument, NULL, OPTION_WRAP},
      '\0', "SYMBOL", "Use wrapper functions for SYMBOL", TWO_DASHES }
};

#define OPTION_COUNT (sizeof ld_options / sizeof ld_options[0])

void
parse_args (argc, argv)
     int argc;
     char **argv;
{
  int i, is, il;
  int ingroup = 0;
  char *default_dirlist = NULL;
  char shortopts[OPTION_COUNT * 3 + 2];
  struct option longopts[OPTION_COUNT + 1];

  /* Starting the short option string with '-' is for programs that
     expect options and other ARGV-elements in any order and that care about
     the ordering of the two.  We describe each non-option ARGV-element
     as if it were the argument of an option with character code 1.  */
  shortopts[0] = '-';
  is = 1;
  il = 0;
  for (i = 0; i < OPTION_COUNT; i++)
    {
      if (ld_options[i].shortopt != '\0')
	{
	  shortopts[is] = ld_options[i].shortopt;
	  ++is;
	  if (ld_options[i].opt.has_arg == required_argument
	      || ld_options[i].opt.has_arg == optional_argument)
	    {
	      shortopts[is] = ':';
	      ++is;
	      if (ld_options[i].opt.has_arg == optional_argument)
		{
		  shortopts[is] = ':';
		  ++is;
		}
	    }
	}
      if (ld_options[i].opt.name != NULL)
	{
	  longopts[il] = ld_options[i].opt;
	  ++il;
	}
    }
  shortopts[is] = '\0';
  longopts[il].name = NULL;
a252 3
	case OPTION_CREF:
	  link_info.notice_all = true;
	  break;
a277 1
	case 'E': /* HP/UX compatibility.  */
a285 3
	case OPTION_FORCE_EXE_SUFFIX:
	  command_line.force_exe_suffix = true;
	  break;
a319 1
	  config.dynamic_link = false;
a322 1
	  config.dynamic_link = false;
a329 3
	case OPTION_NO_WHOLE_ARCHIVE:
	  whole_archive = false;
	  break;
d448 1
a448 1
	  link_info.traditional_format = true;
a482 3
	case OPTION_WARN_MULTIPLE_GP:
	  config.warn_multiple_gp = true;
	  break;
a488 3
	case OPTION_WRAP:
	  add_wrap (optarg);
	  break;
a581 97
/* Print help messages for the options.  */

static void
help ()
{
  int i;
  const char **targets, **pp;

  printf ("Usage: %s [options] file...\n", program_name);

  printf ("Options:\n");
  for (i = 0; i < OPTION_COUNT; i++)
    {
      if (ld_options[i].doc != NULL)
	{
	  boolean comma;
	  int len;
	  int j;

	  printf ("  ");

	  comma = false;
	  len = 2;

	  j = i;
	  do
	    {
	      if (ld_options[j].shortopt != '\0'
		  && ld_options[j].control != NO_HELP)
		{
		  printf ("%s-%c", comma ? ", " : "", ld_options[j].shortopt);
		  len += (comma ? 2 : 0) + 2;
		  if (ld_options[j].arg != NULL)
		    {
		      if (ld_options[j].opt.has_arg != optional_argument)
			{
			  printf (" ");
			  ++len;
			}
		      printf ("%s", ld_options[j].arg);
		      len += strlen (ld_options[j].arg);
		    }
		  comma = true;
		}
	      ++j;
	    }
	  while (j < OPTION_COUNT && ld_options[j].doc == NULL);

	  j = i;
	  do
	    {
	      if (ld_options[j].opt.name != NULL
		  && ld_options[j].control != NO_HELP)
		{
		  printf ("%s-%s%s",
			  comma ? ", " : "",
			  ld_options[j].control == TWO_DASHES ? "-" : "",
			  ld_options[j].opt.name);
		  len += ((comma ? 2 : 0)
			  + 1
			  + (ld_options[j].control == TWO_DASHES ? 1 : 0)
			  + strlen (ld_options[j].opt.name));
		  if (ld_options[j].arg != NULL)
		    {
		      printf (" %s", ld_options[j].arg);
		      len += 1 + strlen (ld_options[j].arg);
		    }
		  comma = true;
		}
	      ++j;
	    }
	  while (j < OPTION_COUNT && ld_options[j].doc == NULL);

	  if (len >= 30)
	    {
	      printf ("\n");
	      len = 0;
	    }

	  for (; len < 30; len++)
	    putchar (' ');

	  printf ("%s\n", ld_options[i].doc);
	}
    }

  printf ("%s: supported targets:", program_name);
  targets = bfd_target_list ();
  for (pp = targets; *pp != NULL; pp++)
    printf (" %s", *pp);
  free (targets);
  printf ("\n");

  printf ("%s: supported emulations: ", program_name);
  ldemul_list_emulations (stdout);
  printf ("\n");
}
@


1.1.1.3
log
@Import of binutils, gas, ld & gprof from Cygnus 960904 tree
@
text
@a21 1
#include "libiberty.h"
a438 1
	  command_line.cref = true;
d701 1
a701 1
	  default_dirlist = xstrdup (optarg);
d764 2
a765 2
	*p = '\0';
      if (*dirlist_ptr != '\0')
d769 1
@


1.1.1.4
log
@Import of 961112 Cygnus binutils+gas+ld+gdb+gprof
@
text
@d95 1
a95 2
#define OPTION_WARN_SECTION_ALIGN	(OPTION_WARN_ONCE + 1)
#define OPTION_SPLIT_BY_RELOC		(OPTION_WARN_SECTION_ALIGN + 1)
d264 1
a264 1
      '\0', "PATH", "Set link time shared library search path", ONE_DASH },
d291 1
a291 1
  { {"dll-verbose", no_argument, NULL, OPTION_VERBOSE}, /* Linux.  */
a301 3
  { {"warn-section-align", no_argument, NULL, OPTION_WARN_SECTION_ALIGN},
      '\0', NULL, "Warn if start of section changes due to alignment",
      TWO_DASHES },
d673 2
a674 17
	  /* This output is intended to follow the GNU standards document.  */
	  printf ("GNU ld %s\n", ld_program_version);
	  printf ("Copyright 1996 Free Software Foundation, Inc.\n");
	  printf ("\
This program is free software; you may redistribute it under the terms of\n\
the GNU General Public License.  This program has absolutely no warranty.\n");
	  {
	    ld_emulation_xfer_type **ptr = ld_emulations;
    
	    printf ("  Supported emulations:\n");
	    while (*ptr) 
	      {
		printf ("   %s\n", (*ptr)->emulation_name);
		ptr++;
	      }
	  }
	  xexit (0);
a687 3
	case OPTION_WARN_SECTION_ALIGN:
	  config.warn_section_align = true;
	  break;
a881 1
  printf ("\nReport bugs to bug-gnu-utils@@prep.ai.mit.edu\n");
@


1.1.1.5
log
@Import of binutils-2.8.1 from Cygnus/FSF
@
text
@d2 1
a2 1
   Copyright (C) 1991, 92, 93, 94, 95, 96, 1997 Free Software Foundation, Inc.
d91 1
a91 2
#define OPTION_VERSION_SCRIPT		(OPTION_VERSION + 1)
#define OPTION_WARN_COMMON		(OPTION_VERSION_SCRIPT + 1)
d146 2
a147 5
  { {"auxiliary", required_argument, NULL, 'f'},
      'f', "SHLIB", "Auxiliary filter for shared object symbol table",
      TWO_DASHES },
  { {"filter", required_argument, NULL, 'F'},
      'F', "SHLIB", "Filter for shared object symbol table", TWO_DASHES },
a293 2
  { {"version-script", required_argument, NULL, OPTION_VERSION_SCRIPT },
      '\0', "FILE", "Read version information script", TWO_DASHES },
a477 23
	case 'f':
	  if (command_line.auxiliary_filters == NULL)
	    {
	      command_line.auxiliary_filters =
		(char **) xmalloc (2 * sizeof (char *));
	      command_line.auxiliary_filters[0] = optarg;
	      command_line.auxiliary_filters[1] = NULL;
	    }
	  else
	    {
	      int c;
	      char **p;

	      c = 0;
	      for (p = command_line.auxiliary_filters; *p != NULL; p++)
		++c;
	      command_line.auxiliary_filters =
		(char **) xrealloc (command_line.auxiliary_filters,
				    (c + 2) * sizeof (char *));
	      command_line.auxiliary_filters[c] = optarg;
	      command_line.auxiliary_filters[c + 1] = NULL;
	    }
	  break;
d479 1
a479 1
	  command_line.filter_shlib = optarg;
d679 1
a679 1
	  printf ("Copyright 1997 Free Software Foundation, Inc.\n");
a693 14
	  break;
	case OPTION_VERSION_SCRIPT:
	  /* This option indicates a small script that only specifies
             version information.  Read it, but don't assume that
             we've seen a linker script.  */
	  {
	    boolean hold_had_script;

	    hold_had_script = had_script;
	    ldfile_open_command_file (optarg);
	    had_script = hold_had_script;
	    parser_input = input_version_script;
	    yyparse ();
	  }
@


1.1.1.6
log
@Import binutils-2.10
- only the binutils package (no gdb here)
- don't import libiberty and texinfo, they are elsewhere
- remove all .info* generated files
@
text
@d2 1
a2 2
   Copyright (C) 1991, 92, 93, 94, 95, 96, 97, 98, 99, 2000
   Free Software Foundation, Inc.
d17 2
a18 3
along with GLD; see the file COPYING.  If not, write to the Free
Software Foundation, 59 Temple Place - Suite 330, Boston, MA
02111-1307, USA.  */
a38 8
#ifndef PATH_SEPARATOR
#if defined (__MSDOS__) || (defined (_WIN32) && ! defined (__CYGWIN32__))
#define PATH_SEPARATOR ';'
#else
#define PATH_SEPARATOR ':'
#endif
#endif

a47 1
static int is_num PARAMS ((const char *, int, int, int));
d62 1
a62 2
#define OPTION_DEMANGLE			(OPTION_DEFSYM + 1)
#define OPTION_DYNAMIC_LINKER		(OPTION_DEMANGLE + 1)
d70 2
a71 4
#define OPTION_NO_DEMANGLE		(OPTION_MAP + 1)
#define OPTION_NO_KEEP_MEMORY		(OPTION_NO_DEMANGLE + 1)
#define OPTION_NO_WARN_MISMATCH		(OPTION_NO_KEEP_MEMORY + 1)
#define OPTION_NOINHIBIT_EXEC		(OPTION_NO_WARN_MISMATCH + 1)
d84 1
a84 2
#define OPTION_TASK_LINK		(OPTION_SYMBOLIC + 1)
#define OPTION_TBSS			(OPTION_TASK_LINK + 1)
d92 1
a92 2
#define OPTION_VERSION_EXPORTS_SECTION	(OPTION_VERSION_SCRIPT + 1)
#define OPTION_WARN_COMMON		(OPTION_VERSION_EXPORTS_SECTION + 1)
a101 8
#define OPTION_GC_SECTIONS		(OPTION_FORCE_EXE_SUFFIX + 1)
#define OPTION_NO_GC_SECTIONS		(OPTION_GC_SECTIONS + 1)
#define OPTION_CHECK_SECTIONS		(OPTION_NO_GC_SECTIONS + 1)
#define OPTION_NO_CHECK_SECTIONS	(OPTION_CHECK_SECTIONS + 1)
#define OPTION_MPC860C0                 (OPTION_NO_CHECK_SECTIONS + 1)
#define OPTION_NO_UNDEFINED		(OPTION_MPC860C0 + 1)
#define OPTION_INIT                     (OPTION_NO_UNDEFINED + 1)
#define OPTION_FINI                     (OPTION_INIT + 1)
d131 1
a131 1
      'a', N_("KEYWORD"), N_("Shared library control for HP/UX compatibility"),
d134 1
a134 1
      'A', N_("ARCH"), N_("Set architecture") , TWO_DASHES },
d136 1
a136 1
      'b', N_("TARGET"), N_("Specify target for following input files"), TWO_DASHES },
d138 1
a138 1
      'c', N_("FILE"), N_("Read MRI format linker script"), TWO_DASHES },
d140 1
a140 1
      'd', NULL, N_("Force common symbols to be defined"), ONE_DASH },
d144 1
a144 1
      'e', N_("ADDRESS"), N_("Set start address"), TWO_DASHES },
d146 1
a146 5
      'E', NULL, N_("Export all dynamic symbols"), TWO_DASHES },
  { {"EB", no_argument, NULL, OPTION_EB},
      '\0', NULL, N_("Link big-endian objects"), ONE_DASH },
  { {"EL", no_argument, NULL, OPTION_EL},
      '\0', NULL, N_("Link little-endian objects"), ONE_DASH },
d148 1
a148 1
      'f', N_("SHLIB"), N_("Auxiliary filter for shared object symbol table"),
d151 1
a151 1
      'F', N_("SHLIB"), N_("Filter for shared object symbol table"), TWO_DASHES },
d153 1
a153 1
      'g', NULL, N_("Ignored"), ONE_DASH },
d155 1
a155 1
      'G', N_("SIZE"), N_("Small data size (if no size, same as --shared)"),
d158 1
a158 1
      'h', N_("FILENAME"), N_("Set internal name of shared library"), ONE_DASH },
d160 1
a160 1
      'l', N_("LIBNAME"), N_("Search for library LIBNAME"), TWO_DASHES },
d162 1
a162 1
      'L', N_("DIRECTORY"), N_("Add DIRECTORY to library search path"), TWO_DASHES },
d164 1
a164 1
      'm', N_("EMULATION"), N_("Set emulation"), ONE_DASH },
d166 1
a166 1
      'M', NULL, N_("Print map file on standard output"), TWO_DASHES },
d168 1
a168 1
      'n', NULL, N_("Do not page align data"), TWO_DASHES },
d170 1
a170 1
      'N', NULL, N_("Do not page align data, do not make text readonly"),
d173 1
a173 1
      'o', N_("FILE"), N_("Set output file name"), TWO_DASHES },
d175 1
a175 3
      'O', NULL, N_("Optimize output file"), ONE_DASH },
  { {"Qy", no_argument, NULL, OPTION_IGNORE},
      '\0', NULL, N_("Ignored for SVR4 compatibility"), ONE_DASH },
d177 1
a177 1
      'r', NULL, N_("Generate relocateable output"), TWO_DASHES },
d181 1
a181 1
      'R', N_("FILE"), N_("Just link symbols (if directory, same as --rpath)"),
d184 1
a184 1
      's', NULL, N_("Strip all symbols"), TWO_DASHES },
d186 1
a186 1
      'S', NULL, N_("Strip debugging symbols"), TWO_DASHES },
d188 1
a188 1
      't', NULL, N_("Trace file opens"), TWO_DASHES },
d190 1
a190 1
      'T', N_("FILE"), N_("Read linker script"), TWO_DASHES },
d192 1
a192 3
      'u', N_("SYMBOL"), N_("Start with undefined reference to SYMBOL"), TWO_DASHES },
  { {"Ur", no_argument, NULL, OPTION_UR},
      '\0', NULL, N_("Build global constructor/destructor tables"), ONE_DASH },
d194 1
a194 1
      'v', NULL, N_("Print version information"), TWO_DASHES },
d196 1
a196 1
      'V', NULL, N_("Print version and emulation information"), ONE_DASH },
d198 1
a198 1
      'x', NULL, N_("Discard all local symbols"), TWO_DASHES },
d200 1
a200 1
      'X', NULL, N_("Discard temporary local symbols"), TWO_DASHES },
d202 1
a202 1
      'y', N_("SYMBOL"), N_("Trace mentions of SYMBOL"), TWO_DASHES },
d204 1
a204 1
      'Y', N_("PATH"), N_("Default search path for Solaris compatibility"), ONE_DASH },
d206 1
a206 1
      'z', N_("KEYWORD"), N_("Ignored for Solaris compatibility"), ONE_DASH },
d208 1
a208 1
      '(', NULL, N_("Start a group"), TWO_DASHES },
d210 1
a210 1
      ')', NULL, N_("End a group"), TWO_DASHES },
d212 1
a212 1
      '\0', N_("KEYWORD"), N_("Ignored for SunOS compatibility"), ONE_DASH },
d214 1
a214 1
      '\0', NULL, N_("Link against shared libraries"), ONE_DASH },
d220 1
a220 1
      '\0', NULL, N_("Do not link against shared libraries"), ONE_DASH },
d228 1
a228 6
      '\0', NULL, N_("Bind global references locally"), ONE_DASH },
  { {"check-sections", no_argument, NULL, OPTION_CHECK_SECTIONS},
      '\0', NULL, N_("Check section addresses for overlaps (default)"), TWO_DASHES },
  { {"no-check-sections", no_argument, NULL, OPTION_NO_CHECK_SECTIONS},
      '\0', NULL, N_("Do not check section addresses for overlaps"),
      TWO_DASHES },
d230 1
a230 1
      '\0', NULL, N_("Output cross reference table"), TWO_DASHES },
d232 1
a232 3
      '\0', N_("SYMBOL=EXPRESSION"), N_("Define a symbol"), TWO_DASHES },
  { {"demangle", no_argument, NULL, OPTION_DEMANGLE},
      '\0', NULL, N_("Demangle symbol names"), TWO_DASHES },
d234 5
a238 1
      '\0', N_("PROGRAM"), N_("Set the dynamic linker to use"), TWO_DASHES },
d240 1
a240 3
      '\0', NULL, N_("Generate embedded relocs"), TWO_DASHES},
  { {"fini", required_argument, NULL, OPTION_FINI},
     '\0', N_("SYMBOL"), N_("Call SYMBOL at unload-time"), ONE_DASH },
d242 1
a242 7
      '\0', NULL, N_("Force generation of file with .exe suffix"), TWO_DASHES},
  { {"gc-sections", no_argument, NULL, OPTION_GC_SECTIONS},
      '\0', NULL, N_("Remove unused sections (on some targets)"),
      TWO_DASHES },
  { {"no-gc-sections", no_argument, NULL, OPTION_NO_GC_SECTIONS},
      '\0', NULL, N_("Don't remove unused sections (default)"),
      TWO_DASHES },
d244 1
a244 3
      '\0', NULL, N_("Print option help"), TWO_DASHES },
  { {"init", required_argument, NULL, OPTION_INIT},
     '\0', N_("SYMBOL"), N_("Call SYMBOL at load-time"), ONE_DASH },
d246 1
a246 3
      '\0', N_("FILE"), N_("Write a map file"), ONE_DASH },
  { {"no-demangle", no_argument, NULL, OPTION_NO_DEMANGLE },
      '\0', NULL, N_("Do not demangle symbol names"), TWO_DASHES },
d248 1
a248 5
      '\0', NULL, N_("Use less memory and more disk I/O"), TWO_DASHES },
  { {"no-undefined", no_argument, NULL, OPTION_NO_UNDEFINED},
     '\0', NULL, N_("Allow no undefined symbols"), TWO_DASHES },
  { {"no-warn-mismatch", no_argument, NULL, OPTION_NO_WARN_MISMATCH},
      '\0', NULL, N_("Don't warn about mismatched input files"), TWO_DASHES},
d250 1
a250 1
      '\0', NULL, N_("Turn off --whole-archive"), TWO_DASHES },
d252 1
a252 1
      '\0', NULL, N_("Create an output file even if errors occur"), TWO_DASHES },
d256 1
a256 1
      '\0', N_("TARGET"), N_("Specify target of output file"), TWO_DASHES },
d258 3
a260 1
      '\0', NULL, N_("Ignored for Linux compatibility"), ONE_DASH },
d262 1
a262 1
      '\0', NULL, N_("Relax branches on certain targets"), TWO_DASHES },
d265 1
a265 1
      '\0', N_("FILE"), N_("Keep only symbols listed in FILE"), TWO_DASHES },
d267 1
a267 1
      '\0', N_("PATH"), N_("Set runtime shared library search path"), ONE_DASH },
d269 1
a269 1
      '\0', N_("PATH"), N_("Set link time shared library search path"), ONE_DASH },
d271 1
a271 1
      '\0', NULL, N_("Create a shared library"), ONE_DASH },
d275 1
a275 1
      '\0', NULL, N_("Sort common symbols by size"), TWO_DASHES },
d279 1
a279 1
      '\0', NULL, N_("Split output sections for each file"), TWO_DASHES },
d281 1
a281 1
      '\0', N_("COUNT"), N_("Split output sections every COUNT relocs"), TWO_DASHES },
d283 1
a283 3
      '\0', NULL, N_("Print memory usage statistics"), TWO_DASHES },
  { {"task-link", required_argument, NULL, OPTION_TASK_LINK},
      '\0', N_("SYMBOL"), N_("Do task level linking"), TWO_DASHES },
d285 1
a285 1
      '\0', NULL, N_("Use same format as native linker"), TWO_DASHES },
d287 1
a287 1
      '\0', N_("ADDRESS"), N_("Set address of .bss section"), ONE_DASH },
d289 1
a289 1
      '\0', N_("ADDRESS"), N_("Set address of .data section"), ONE_DASH },
d291 3
a293 1
      '\0', N_("ADDRESS"), N_("Set address of .text section"), ONE_DASH },
d295 1
a295 1
      '\0', NULL, N_("Output lots of information during link"), TWO_DASHES },
d299 1
a299 5
      '\0', N_("FILE"), N_("Read version information script"), TWO_DASHES },
  { {"version-exports-section", required_argument, NULL,
     OPTION_VERSION_EXPORTS_SECTION },
    '\0', N_("SYMBOL"), N_("Take export symbols list from .exports, using\n\t\t\t\tSYMBOL as the version."),
    TWO_DASHES },
d301 1
a301 1
      '\0', NULL, N_("Warn about duplicate common symbols"), TWO_DASHES },
d303 1
a303 1
      '\0', NULL, N_("Warn if global constructors/destructors are seen"),
d306 1
a306 1
      '\0', NULL, N_("Warn if the multiple GP values are used"), TWO_DASHES },
d308 1
a308 1
      '\0', NULL, N_("Warn only once per undefined symbol"), TWO_DASHES },
d310 1
a310 1
      '\0', NULL, N_("Warn if start of section changes due to alignment"),
d313 1
a313 1
      '\0', NULL, N_("Include all objects from following archives"), TWO_DASHES },
d315 1
a315 3
      '\0', N_("SYMBOL"), N_("Use wrapper functions for SYMBOL"), TWO_DASHES },
  { {"mpc860c0", optional_argument, NULL, OPTION_MPC860C0},
      '\0', N_("[=WORDS]"), N_("Modify problematic branches in last WORDS (1-10,\n\t\t\t\tdefault 5) words of a page"), TWO_DASHES }
d318 1
a318 28
#define OPTION_COUNT ((int) (sizeof ld_options / sizeof ld_options[0]))

/* Test STRING for containing a string of digits that form a number
   between MIN and MAX.  The return value is the number or ERR.  */

static int
is_num (string, min, max, err)
     const char *string;
     int min;
     int max;
     int err;
{
  int result = 0;

  for (; *string; ++string)
    {
      if (! isdigit (*string))
	{
	  result = err;
	  break;
	}
      result = result * 10 + (*string - '0');
    }
  if (result < min || result > max)
    result = err;

  return result;
}
a329 1
  int last_optind;
d379 1
a379 1
	    || ! isdigit ((unsigned char) argv[i + 1][0])))
a381 27
  /* Because we permit long options to start with a single dash, and
     we have a --library option, and the -l option is conventionally
     used with an immediately following argument, we can have bad
     results if somebody tries to use -l with a library whose name
     happens to start with "ibrary", as in -li.  We avoid problems by
     simply turning -l into --library.  This means that users will
     have to use two dashes in order to use --library, which is OK
     since that's how it is documented.

     FIXME: It's possible that this problem can arise for other short
     options as well, although the user does always have the recourse
     of adding a space between the option and the argument.  */
  for (i = 1; i < argc; i++)
    {
      if (argv[i][0] == '-'
	  && argv[i][1] == 'l'
	  && argv[i][2] != '\0')
	{
	  char *n;

	  n = (char *) xmalloc (strlen (argv[i]) + 20);
	  sprintf (n, "--library=%s", argv[i] + 2);
	  argv[i] = n;
	}
    }

  last_optind = -1;
d384 2
d389 2
a390 12
      /* Using last_optind lets us avoid calling ldemul_parse_args
	 multiple times on a single option, which would lead to
	 confusion in the internal static variables maintained by
	 getopt.  This could otherwise happen for an argument like
	 -nx, in which the -n is parsed as a single option, and we
	 loop around to pick up the -x.  */
      if (optind != last_optind)
	{
	  if (ldemul_parse_args (argc, argv))
	    continue;
	  last_optind = optind;
	}
a391 2
      /* getopt_long_only is like getopt_long, but '-' as well as '--'
	 can indicate a long option.  */
a398 3
	  fprintf (stderr,
		   _("%s: use the --help option for usage information\n"),
		   program_name);
d417 1
a417 1
	    einfo (_("%P%F: unrecognized -a option `%s'\n"), optarg);
d430 1
a430 1
	    einfo (_("%P%F: unrecognized -assert option `%s'\n"), optarg);
a464 3
	case OPTION_DEMANGLE:
	  demangling = true;
	  break;
d518 1
a518 1
	      einfo (_("%P%F: invalid number `%s'\n"), optarg);
a523 3
	case OPTION_GC_SECTIONS:
	  command_line.gc_sections = true;
	  break;
a552 6
	case OPTION_NO_DEMANGLE:
	  demangling = false;
	  break;
	case OPTION_NO_GC_SECTIONS:
	  command_line.gc_sections = false;
	  break;
a555 6
	case OPTION_NO_UNDEFINED:
	  link_info.no_undefined = true;
	  break;
	case OPTION_NO_WARN_MISMATCH:
	  command_line.warn_mismatch = false;
	  break;
a567 3

	  /* Enable optimizations of output files.  */
	  link_info.optimize = strtoul (optarg, NULL, 0) ? true : false;
a608 2
	      size_t rpath_len = strlen (command_line.rpath);
	      size_t optarg_len = strlen (optarg);
a609 1
	      char *cp = command_line.rpath;
d611 6
a616 25
	      /* First see whether OPTARG is already in the path.  */
	      do
		{
		  size_t idx = 0;
		  while (optarg[idx] != '\0' && optarg[idx] == cp[idx])
		    ++idx;
		  if (optarg[idx] == '\0'
		      && (cp[idx] == '\0' || cp[idx] == ':'))
		    /* We found it.  */
		    break;

		  /* Not yet found.  */
		  cp = strchr (cp, ':');
		  if (cp != NULL)
		    ++cp;
		}
	      while (cp != NULL);

	      if (cp == NULL)
		{
		  buf = xmalloc (rpath_len + optarg_len + 2);
		  sprintf (buf, "%s:%s", command_line.rpath, optarg);
		  free (command_line.rpath);
		  command_line.rpath = buf;
		}
d647 1
a647 4
	  if (config.has_shared)
	    link_info.shared = true;
	  else
	    einfo (_("%P%F: -shared not supported\n"));
a681 3
	case OPTION_TASK_LINK:
	  link_info.task_link = true;
	  /* Fall through - do an implied -r option.  */
d708 2
a709 2
	  printf (_("Copyright 2000 Free Software Foundation, Inc.\n"));
	  printf (_("\
d711 1
a711 1
the GNU General Public License.  This program has absolutely no warranty.\n"));
d715 1
a715 1
	    printf (_("  Supported emulations:\n"));
a737 6
	case OPTION_VERSION_EXPORTS_SECTION:
	  /* This option records a version symbol to be applied to the
	     symbols listed for export to be found in the object files
	     .exports sections.  */
	  command_line.version_exports_section = optarg;
	  break;
d779 1
a779 1
	  config.split_by_reloc = strtoul (optarg, NULL, 0);
a783 6
	case OPTION_CHECK_SECTIONS:
	  command_line.check_section_addresses = true;
	  break;
	case OPTION_NO_CHECK_SECTIONS:
	  command_line.check_section_addresses = false;
	  break;
d788 1
a788 1
		       _("%s: may not nest groups (--help for usage)\n"),
d799 1
a799 1
		       _("%s: group ended before it began (--help for usage)\n"),
d806 1
a806 26
      case OPTION_MPC860C0:
          link_info.mpc860c0 = 20;      /* default value (in bytes) */
          if (optarg)
            {
              unsigned words;

              words = is_num (optarg, 1, 10, 0);
              if (words == 0)
                {
                  fprintf (stderr,
			   _("%s: Invalid argument to option \"mpc860c0\"\n"),
			   program_name);
                  xexit (1);
                }
              link_info.mpc860c0 = words * 4;   /* convert words to bytes */
            }
          command_line.relax = true;
          break;

	case OPTION_INIT:
	  link_info.init_function = optarg;
	  break;
	  
	case OPTION_FINI:
	  link_info.fini_function = optarg;
	  break;
d829 1
a829 1
      p = strchr (dirlist_ptr, PATH_SEPARATOR);
d844 2
a845 2
  const char *end;
  bfd_vma val = bfd_scan_vma (valstr, &end, 16);
d847 1
a847 1
    einfo (_("%P%F: invalid hex number `%s'\n"), valstr);
d859 1
a859 1
  printf (_("Usage: %s [options] file...\n"), program_name);
d861 1
a861 1
  printf (_("Options:\n"));
d890 2
a891 2
		      printf ("%s", _(ld_options[j].arg));
		      len += strlen (_(ld_options[j].arg));
d915 2
a916 2
		      printf (" %s", _(ld_options[j].arg));
		      len += 1 + strlen (_(ld_options[j].arg));
d933 1
a933 1
	  printf ("%s\n", _(ld_options[i].doc));
d937 1
a937 4
  /* Note: Various tools (such as libtool) depend upon the
     format of the listings below - do not change them.  */
  /* xgettext:c-format */
  printf (_("%s: supported targets:"), program_name);
d944 1
a944 2
  /* xgettext:c-format */
  printf (_("%s: supported emulations: "), program_name);
d947 1
a947 7

  /* xgettext:c-format */
  printf (_("%s: emulation specific options:\n"), program_name);
  ldemul_list_emulation_options (stdout);
  printf ("\n");

  printf (_("Report bugs to %s\n"), REPORT_BUGS_TO);
@


1.1.1.7
log
@Import binutils-2.11.2
- only the binutils package (no gdb here)
- don't import libiberty and texinfo, they are elsewhere
- remove all .info* generated files
@
text
@d2 1
a2 2
   Copyright 1991, 1992, 1993, 1994, 1995, 1996, 1997, 1998, 1999, 2000,
   2001
a39 1
#include "demangle.h"
d49 1
a49 1
/* Somewhere above, sys/stat.h got included . . . .  */
a125 4
#define OPTION_SECTION_START		(OPTION_FINI + 1)
#define OPTION_UNIQUE			(OPTION_SECTION_START + 1)
#define OPTION_TARGET_HELP              (OPTION_UNIQUE + 1)
#define OPTION_ALLOW_SHLIB_UNDEFINED	(OPTION_TARGET_HELP + 1)
d141 9
a149 18
  enum {
    /* Use one dash before long option name.  */
    ONE_DASH,
    /* Use two dashes before long option name.  */
    TWO_DASHES,
    /* Only accept two dashes before the long option name.
       This is an overloading of the use of this enum, since originally it
       was only intended to tell the --help display function how to display
       the long option name.  This feature was added in order to resolve
       the confusion about the -omagic command line switch.  Is it setting
       the output file name to "magic" or is it setting the NMAGIC flag on
       the output ?  It has been decided that it is setting the output file
       name, and that if you want to set the NMAGIC flag you should use -N
       or --omagic.  */
    EXACTLY_TWO_DASHES,
    /* Don't mention this option in --help output.  */
    NO_HELP
  } control;
d199 1
a199 1
      EXACTLY_TWO_DASHES },
d201 1
a201 1
      'o', N_("FILE"), N_("Set output file name"), EXACTLY_TWO_DASHES },
a205 2
  { {"emit-relocs", no_argument, NULL, 'q'},
      'q', NULL, "Generate relocations in final output", TWO_DASHES },
a222 2
  { {"unique", optional_argument, NULL, OPTION_UNIQUE},
      '\0', N_("[=SECTION]"), N_("Don't merge input [SECTION | orphan] sections"), TWO_DASHES },
d237 2
d270 2
a271 2
  { {"demangle", optional_argument, NULL, OPTION_DEMANGLE},
      '\0', N_("[=STYLE]"), N_("Demangle symbol names [using STYLE]"), TWO_DASHES },
a297 2
  { {"allow-shlib-undefined", no_argument, NULL, OPTION_ALLOW_SHLIB_UNDEFINED},
     '\0', NULL, N_("Allow undefined symbols in shared objects"), TWO_DASHES },
d307 1
a307 1
      '\0', N_("TARGET"), N_("Specify target of output file"), EXACTLY_TWO_DASHES },
d327 4
a330 4
  { {"split-by-file", optional_argument, NULL, OPTION_SPLIT_BY_FILE},
      '\0', N_("[=SIZE]"), N_("Split output sections every SIZE octets"), TWO_DASHES },
  { {"split-by-reloc", optional_argument, NULL, OPTION_SPLIT_BY_RELOC},
      '\0', N_("[=COUNT]"), N_("Split output sections every COUNT relocs"), TWO_DASHES },
a332 2
  { {"target-help", no_argument, NULL, OPTION_TARGET_HELP},
      '\0', NULL, N_("Display target specific options"), TWO_DASHES },
a336 2
  { {"section-start", required_argument, NULL, OPTION_SECTION_START},
      '\0', N_("SECTION=ADDRESS"), N_("Set address of named section"), TWO_DASHES },
d373 1
a373 1
#define OPTION_COUNT ARRAY_SIZE (ld_options)
d404 1
a404 1
     unsigned argc;
d407 1
a407 2
  unsigned i;
  int is, il, irl;
a411 1
  struct option really_longopts[OPTION_COUNT + 1];
a420 1
  irl = 0;
d441 2
a442 10
	  if (ld_options[i].control == EXACTLY_TWO_DASHES)
	    {
	      really_longopts[irl] = ld_options[i].opt;
	      ++irl;
	    }
	  else
	    {
	      longopts[il] = ld_options[i].opt;
	      ++il;
	    }
a446 1
  really_longopts[irl].name = NULL;
a511 1
      opterr = 0;
a512 5
      if (optc == '?')
	{
	  --optind;
	  optc = getopt_long (argc, argv, shortopts, really_longopts, &longind);
	}
a515 1

a517 3
	case '?':
	  fprintf (stderr, _("%s: unrecognized option '%s'\n"),
		   program_name, argv[optind - 1]);
a589 11
	  if (optarg != NULL)
	    {
	      enum demangling_styles style;

	      style = cplus_demangle_name_to_style (optarg);
	      if (style == unknown_demangling)
		einfo (_("%F%P: unknown demangling style `%s'"),
		       optarg);

	      cplus_demangle_set_style (style);
	    }
a693 3
	case OPTION_ALLOW_SHLIB_UNDEFINED:
	  link_info.allow_shlib_undefined = true;
	  break;
d714 1
a714 1
	  lang_add_output (optarg, 0);
a718 3
	case 'q':
	  link_info.emitrelocations = true;
	  break;
d750 1
a750 1
	    command_line.rpath = xstrdup (optarg);
d787 1
a787 1
	    command_line.rpath_link = xstrdup (optarg);
a838 42
	case OPTION_SECTION_START:
	  {
	    char *optarg2;
	    char *sec_name;
	    int len;

	    /* Check for <something>=<somthing>...  */
	    optarg2 = strchr (optarg, '=');
	    if (optarg2 == NULL)
	      {
		fprintf (stderr,
			 _("%s: Invalid argument to option \"--section-start\"\n"),
			 program_name);
		xexit (1);
	      }

	    optarg2++;

	    /* So far so good.  Are all the args present?  */
	    if ((*optarg == '\0') || (*optarg2 == '\0'))
	      {
		fprintf (stderr,
			 _("%s: Missing argument(s) to option \"--section-start\"\n"),
			 program_name);
		xexit (1);
	      }

	    /* We must copy the section name as set_section_start
	       doesn't do it for us.  */
	    len = optarg2 - optarg;
	    sec_name = xmalloc (len);
	    memcpy (sec_name, optarg, len - 1);
	    sec_name[len - 1] = 0;

	    /* Then set it...  */
	    set_section_start (sec_name, optarg2);
	  }
	  break;
	case OPTION_TARGET_HELP:
	  /* Mention any target specific options.  */
          ldemul_list_emulation_options (stdout);
          exit (0);
a863 6
	case OPTION_UNIQUE:
	  if (optarg != NULL)
	    lang_add_unique (optarg);
	  else
	    config.unique_orphan_sections = true;
	  break;
d880 1
a880 1
	  printf (_("Copyright 2001 Free Software Foundation, Inc.\n"));
d886 1
a886 1

d888 1
a888 1
	    while (*ptr)
d951 5
d957 2
a958 5
	  if (optarg != NULL)
	    config.split_by_reloc = strtoul (optarg, NULL, 0);
	  else
	    config.split_by_reloc = 32768;
	  break;
d960 2
a961 5
	  if (optarg != NULL)
	    config.split_by_file = bfd_scan_vma (optarg, NULL, 0);
	  else
	    config.split_by_file = 1;
	  break;
d990 10
a999 10
	case OPTION_MPC860C0:
	  link_info.mpc860c0 = 20;      /* default value (in bytes) */
	  if (optarg)
	    {
	      unsigned words;

	      words = is_num (optarg, 1, 10, 0);
	      if (words == 0)
		{
		  fprintf (stderr,
d1002 6
a1007 6
		  xexit (1);
		}
	      link_info.mpc860c0 = words * 4;	/* convert words to bytes */
	    }
	  command_line.relax = true;
	  break;
d1012 1
a1012 1

d1065 1
a1065 1
  unsigned i;
d1077 1
a1077 1
	  unsigned j;
a1113 4
		  int two_dashes =
		    (ld_options[j].control == TWO_DASHES
		     || ld_options[j].control == EXACTLY_TWO_DASHES);
		  
d1116 1
a1116 1
			  two_dashes ? "-" : "",
d1120 1
a1120 1
			  + (two_dashes ? 1 : 0)
@


1.1.1.8
log
@import binutils 2.14 (excluding testsuites, .info files, and .po files)
@
text
@d3 1
a3 1
   2001, 2002, 2003
d6 1
a6 1
   This file is part of GLD, the Gnu Linker.
d8 14
a21 14
   GLD is free software; you can redistribute it and/or modify
   it under the terms of the GNU General Public License as published by
   the Free Software Foundation; either version 2, or (at your option)
   any later version.

   GLD is distributed in the hope that it will be useful,
   but WITHOUT ANY WARRANTY; without even the implied warranty of
   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
   GNU General Public License for more details.

   You should have received a copy of the GNU General Public License
   along with GLD; see the file COPYING.  If not, write to the Free
   Software Foundation, 59 Temple Place - Suite 330, Boston, MA
   02111-1307, USA.  */
d28 1
a28 1
#include "safe-ctype.h"
d36 1
a36 1
#include <ldgram.h>
d56 4
d61 2
a62 2
static void set_default_dirlist PARAMS ((char *));
static void set_section_start PARAMS ((char *, char *));
d112 1
a112 2
#define OPTION_WARN_FATAL		(OPTION_WARN_CONSTRUCTORS + 1)
#define OPTION_WARN_MULTIPLE_GP		(OPTION_WARN_FATAL + 1)
a131 12
#define OPTION_NO_ALLOW_SHLIB_UNDEFINED	(OPTION_ALLOW_SHLIB_UNDEFINED + 1)
#define OPTION_ALLOW_MULTIPLE_DEFINITION (OPTION_NO_ALLOW_SHLIB_UNDEFINED + 1)
#define OPTION_NO_UNDEFINED_VERSION	(OPTION_ALLOW_MULTIPLE_DEFINITION + 1)
#define OPTION_DISCARD_NONE		(OPTION_NO_UNDEFINED_VERSION + 1)
#define OPTION_SPARE_DYNAMIC_TAGS	(OPTION_DISCARD_NONE + 1)
#define OPTION_NO_DEFINE_COMMON		(OPTION_SPARE_DYNAMIC_TAGS + 1)
#define OPTION_NOSTDLIB			(OPTION_NO_DEFINE_COMMON + 1)
#define OPTION_NO_OMAGIC		(OPTION_NOSTDLIB + 1)
#define OPTION_STRIP_DISCARDED		(OPTION_NO_OMAGIC + 1)
#define OPTION_NO_STRIP_DISCARDED	(OPTION_STRIP_DISCARDED + 1)
#define OPTION_ACCEPT_UNKNOWN_INPUT_ARCH    (OPTION_NO_STRIP_DISCARDED + 1)
#define OPTION_NO_ACCEPT_UNKNOWN_INPUT_ARCH (OPTION_ACCEPT_UNKNOWN_INPUT_ARCH + 1)
a201 2
  { {"dynamic-linker", required_argument, NULL, OPTION_DYNAMIC_LINKER},
      'I', N_("PROGRAM"), N_("Set PROGRAM as the dynamic linker to use"), TWO_DASHES },
a214 2
  { {"no-omagic", no_argument, NULL, OPTION_NO_OMAGIC},
      '\0', NULL, N_("Page align data, make text readonly"), EXACTLY_TWO_DASHES },
a233 4
  { {"strip-discarded", no_argument, NULL, OPTION_STRIP_DISCARDED},
      '\0', NULL, N_("Strip symbols in discarded sections"), TWO_DASHES },
  { {"no-strip-discarded", no_argument, NULL, OPTION_NO_STRIP_DISCARDED},
      '\0', NULL, N_("Do not strip symbols in discarded sections"), TWO_DASHES },
d251 1
a251 3
      'X', NULL, N_("Discard temporary local symbols (default)"), TWO_DASHES },
  { {"discard-none", no_argument, NULL, OPTION_DISCARD_NONE},
      '\0', NULL, N_("Don't discard any local symbols"), TWO_DASHES },
a259 4
  { {"accept-unknown-input-arch", no_argument, NULL, OPTION_ACCEPT_UNKNOWN_INPUT_ARCH},
    '\0', NULL, N_("Accept input files whose architecture cannot be determined"), TWO_DASHES },
  { {"no-accept-unknown-input-arch", no_argument, NULL, OPTION_NO_ACCEPT_UNKNOWN_INPUT_ARCH},
    '\0', NULL, N_("Reject input files whose architecture is unknown"), TWO_DASHES },
d289 2
a308 2
  { {"no-define-common", no_argument, NULL, OPTION_NO_DEFINE_COMMON},
      '\0', NULL, N_("Do not define Common storage"), TWO_DASHES },
d316 1
a316 7
     '\0', NULL, N_("Allow undefined symbols in shared objects (the default)"), TWO_DASHES },
  { {"no-allow-shlib-undefined", no_argument, NULL, OPTION_NO_ALLOW_SHLIB_UNDEFINED},
     '\0', NULL, N_("Do not allow undefined symbols in shared objects"), TWO_DASHES },
  { {"allow-multiple-definition", no_argument, NULL, OPTION_ALLOW_MULTIPLE_DEFINITION},
     '\0', NULL, N_("Allow multiple definitions"), TWO_DASHES },
  { {"no-undefined-version", no_argument, NULL, OPTION_NO_UNDEFINED_VERSION},
     '\0', NULL, N_("Disallow undefined version"), TWO_DASHES },
a324 2
  { {"nostdlib", no_argument, NULL, OPTION_NOSTDLIB},
      '\0', NULL, N_("Only use library directories specified on\n\t\t\t\tthe command line"), ONE_DASH },
a345 2
  { {"spare-dynamic-tags", required_argument, NULL, OPTION_SPARE_DYNAMIC_TAGS},
      '\0', N_("COUNT"), N_("How many tags to reserve in .dynamic section"), TWO_DASHES },
a387 3
  { {"fatal-warnings", no_argument, NULL, OPTION_WARN_FATAL},
     '\0', NULL, N_("Treat warnings as errors"),
     TWO_DASHES },
d412 1
a412 1
      if (! ISDIGIT (*string))
d434 3
a436 3
  char *shortopts;
  struct option *longopts;
  struct option *really_longopts;
a438 6
  shortopts = (char *) xmalloc (OPTION_COUNT * 3 + 2);
  longopts = (struct option *) xmalloc (sizeof (*longopts)
					* (OPTION_COUNT + 1));
  really_longopts = (struct option *) xmalloc (sizeof (*really_longopts)
					       * (OPTION_COUNT + 1));

a482 2
  ldemul_add_options (is, &shortopts, il, &longopts, irl, &really_longopts);

d497 1
a497 1
	    || ! ISDIGIT (argv[i + 1][0])))
d539 5
a543 2
	if (ldemul_parse_args (argc, argv))
	  continue;
a547 1
      last_optind = optind;
d551 2
a552 2
	  optind = last_optind;
	  optc = getopt_long (argc, argv, "-", really_longopts, &longind);
a554 3
      if (ldemul_handle_option (optc))
	continue;

d561 2
a562 1
	  einfo (_("%P: unrecognized option '%s'\n"), argv[last_optind]);
d564 4
a567 2
	  einfo (_("%P%F: use the --help option for usage information\n"));

d580 1
a580 1
	    config.dynamic_link = FALSE;
d583 1
a583 1
	    config.dynamic_link = TRUE;
d612 1
a612 1
	  config.dynamic_link = TRUE;
d615 1
a615 1
	  config.dynamic_link = FALSE;
d618 2
a619 2
	  command_line.cref = TRUE;
	  link_info.notice_all = TRUE;
d622 1
a622 1
	  command_line.force_common_definition = TRUE;
d634 1
a634 1
	  demangling = TRUE;
a646 1
	case 'I':		/* Used on Solaris.  */
d657 1
a657 1
	  command_line.embedded_relocs = TRUE;
d661 1
a661 1
	  link_info.export_dynamic = TRUE;
d664 1
a664 1
	  lang_add_entry (optarg, TRUE);
d693 1
a693 1
	  command_line.force_exe_suffix = TRUE;
d707 1
a707 1
	  command_line.gc_sections = TRUE;
d714 1
a714 1
	  ldfile_add_library_path (optarg, TRUE);
d730 3
a732 9
	  config.text_read_only = FALSE;
	  config.magic_demand_paged = FALSE;
	  config.dynamic_link = FALSE;
	  break;
	case OPTION_NO_OMAGIC:
	  config.text_read_only = TRUE;
	  config.magic_demand_paged = TRUE;
	  /* NB/ Does not set dynamic_link to TRUE.
	     Use --call-shared or -Bdynamic for this.  */
d735 2
a736 5
	  config.magic_demand_paged = FALSE;
	  config.dynamic_link = FALSE;
	  break;
	case OPTION_NO_DEFINE_COMMON:
	  command_line.inhibit_common_definition = TRUE;
d739 1
a739 1
	  demangling = FALSE;
d742 1
a742 1
	  command_line.gc_sections = FALSE;
d745 1
a745 1
	  link_info.keep_memory = FALSE;
d748 1
a748 1
	  link_info.no_undefined = TRUE;
d751 1
a751 10
	  link_info.allow_shlib_undefined = TRUE;
	  break;
	case OPTION_NO_ALLOW_SHLIB_UNDEFINED:
	  link_info.allow_shlib_undefined = FALSE;
	  break;
	case OPTION_ALLOW_MULTIPLE_DEFINITION:
	  link_info.allow_multiple_definition = TRUE;
	  break;
	case OPTION_NO_UNDEFINED_VERSION:
	  link_info.allow_undefined_version = FALSE;
d754 1
a754 1
	  command_line.warn_mismatch = FALSE;
d757 1
a757 4
	  force_make_executable = TRUE;
	  break;
	case OPTION_NOSTDLIB:
	  config.only_cmd_line_lib_dirs = TRUE;
d760 1
a760 1
	  whole_archive = FALSE;
d770 1
a770 1
	  link_info.optimize = strtoul (optarg, NULL, 0) ? TRUE : FALSE;
d779 1
a779 1
	  link_info.emitrelocations = TRUE;
d783 5
a787 16
	  if (optind == last_optind)
	    /* This can happen if the user put "-rpath,a" on the command
	       line.  (Or something similar.  The comma is important).
	       Getopt becomes confused and thinks that this is a -r option
	       but it cannot parse the text after the -r so it refuses to
	       increment the optind counter.  Detect this case and issue
	       an error message here.  We cannot just make this a warning,
	       increment optind, and continue because getopt is too confused
	       and will seg-fault the next time around.  */
	    einfo(_("%P%F: bad -rpath option\n"));

	  link_info.relocateable = TRUE;
	  config.build_constructors = FALSE;
	  config.magic_demand_paged = FALSE;
	  config.text_read_only = FALSE;
	  config.dynamic_link = FALSE;
a823 1

d863 1
a863 1
	  command_line.relax = TRUE;
a873 6
	case OPTION_STRIP_DISCARDED:
	  link_info.strip_discarded = TRUE;
	  break;
	case OPTION_NO_STRIP_DISCARDED:
	  link_info.strip_discarded = FALSE;
	  break;
d876 1
a876 1
	    link_info.shared = TRUE;
d885 1
a885 1
	  config.sort_common = TRUE;
d888 1
a888 1
	  config.stats = TRUE;
d891 1
a891 1
	  link_info.symbolic = TRUE;
d894 1
a894 1
	  trace_files = TRUE;
d910 6
a915 1
	      einfo (_("%P%F: invalid argument to option \"--section-start\"\n"));
d921 6
a926 1
	      einfo (_("%P%F: missing argument(s) to option \"--section-start\"\n"));
d941 2
a942 2
	  ldemul_list_emulation_options (stdout);
	  exit (0);
d953 1
a953 1
	  link_info.traditional_format = TRUE;
d956 1
a956 1
	  link_info.task_link = TRUE;
d959 5
a963 5
	  link_info.relocateable = TRUE;
	  config.build_constructors = TRUE;
	  config.magic_demand_paged = FALSE;
	  config.text_read_only = FALSE;
	  config.dynamic_link = FALSE;
d972 1
a972 1
	    config.unique_orphan_sections = TRUE;
d976 2
a977 2
	  version_printed = TRUE;
	  trace_file_tries = TRUE;
d981 1
a981 1
	  version_printed = TRUE;
d985 1
a985 1
	  version_printed = TRUE;
d988 16
a1003 1
	  ldversion (2);
d1011 1
a1011 1
	    FILE *hold_script_handle;
d1013 1
a1013 1
	    hold_script_handle = saved_script_handle;
d1015 1
a1015 1
	    saved_script_handle = hold_script_handle;
d1027 1
a1027 1
	  config.warn_common = TRUE;
d1030 1
a1030 4
	  config.warn_constructors = TRUE;
	  break;
	case OPTION_WARN_FATAL:
	  config.fatal_warnings = TRUE;
d1033 1
a1033 1
	  config.warn_multiple_gp = TRUE;
d1036 1
a1036 1
	  config.warn_once = TRUE;
d1039 1
a1039 1
	  config.warn_section_align = TRUE;
d1042 1
a1042 1
	  whole_archive = TRUE;
a1046 3
	case OPTION_DISCARD_NONE:
	  link_info.discard = discard_none;
	  break;
a1055 2
	  if (default_dirlist != NULL)
	    free (default_dirlist);
a1060 3
	case OPTION_SPARE_DYNAMIC_TAGS:
	  link_info.spare_dynamic_tags = strtoul (optarg, NULL, 0);
	  break;
d1074 1
a1074 1
	  command_line.check_section_addresses = TRUE;
d1077 1
a1077 7
	  command_line.check_section_addresses = FALSE;
	  break;
	case OPTION_ACCEPT_UNKNOWN_INPUT_ARCH:
	  command_line.accept_unknown_input_arch = TRUE;
	  break;
	case OPTION_NO_ACCEPT_UNKNOWN_INPUT_ARCH:
	  command_line.accept_unknown_input_arch = FALSE;
d1081 6
a1086 2
	    einfo (_("%P%F: may not nest groups (--help for usage)\n"));

d1092 6
a1097 2
	    einfo (_("%P%F: group ended before it began (--help for usage)\n"));

d1102 1
a1102 2
	  /* Default value (in bytes).  */
	  link_info.mpc860c0 = 20;
d1109 7
a1115 4
		einfo (_("%P%F: invalid argument to option \"mpc860c0\"\n"));

	      /* Convert words to bytes.  */
	      link_info.mpc860c0 = words * 4;
d1117 1
a1117 1
	  command_line.relax = TRUE;
d1134 2
a1135 4
    {
      set_default_dirlist (default_dirlist);
      free (default_dirlist);
    }
d1153 1
a1153 1
	ldfile_add_library_path (dirlist_ptr, TRUE);
d1186 1
a1186 1
	  bfd_boolean comma;
d1192 1
a1192 1
	  comma = FALSE;
d1213 1
a1213 1
		  comma = TRUE;
d1228 1
a1228 1

d1242 1
a1242 1
		  comma = TRUE;
@


1.1.1.9
log
@Binutils 2.15, with testsuites removed, and without gdb and libiberty.
@
text
@d3 1
a3 1
   2001, 2002, 2003, 2004
d56 4
a59 3
static void set_default_dirlist (char *);
static void set_section_start (char *, char *);
static void help (void);
d66 75
a140 82
enum option_values
{
  OPTION_ASSERT = 150,
  OPTION_CALL_SHARED,
  OPTION_CREF,
  OPTION_DEFSYM,
  OPTION_DEMANGLE,
  OPTION_DYNAMIC_LINKER,
  OPTION_EB,
  OPTION_EL,
  OPTION_EMBEDDED_RELOCS,
  OPTION_EXPORT_DYNAMIC,
  OPTION_HELP,
  OPTION_IGNORE,
  OPTION_MAP,
  OPTION_NO_DEMANGLE,
  OPTION_NO_KEEP_MEMORY,
  OPTION_NO_WARN_MISMATCH,
  OPTION_NOINHIBIT_EXEC,
  OPTION_NON_SHARED,
  OPTION_NO_WHOLE_ARCHIVE,
  OPTION_OFORMAT,
  OPTION_RELAX,
  OPTION_RETAIN_SYMBOLS_FILE,
  OPTION_RPATH,
  OPTION_RPATH_LINK,
  OPTION_SHARED,
  OPTION_SONAME,
  OPTION_SORT_COMMON,
  OPTION_STATS,
  OPTION_SYMBOLIC,
  OPTION_TASK_LINK,
  OPTION_TBSS,
  OPTION_TDATA,
  OPTION_TTEXT,
  OPTION_TRADITIONAL_FORMAT,
  OPTION_UR,
  OPTION_VERBOSE,
  OPTION_VERSION,
  OPTION_VERSION_SCRIPT,
  OPTION_VERSION_EXPORTS_SECTION,
  OPTION_WARN_COMMON,
  OPTION_WARN_CONSTRUCTORS,
  OPTION_WARN_FATAL,
  OPTION_WARN_MULTIPLE_GP,
  OPTION_WARN_ONCE,
  OPTION_WARN_SECTION_ALIGN,
  OPTION_SPLIT_BY_RELOC,
  OPTION_SPLIT_BY_FILE ,
  OPTION_WHOLE_ARCHIVE,
  OPTION_AS_NEEDED,
  OPTION_NO_AS_NEEDED,
  OPTION_WRAP,
  OPTION_FORCE_EXE_SUFFIX,
  OPTION_GC_SECTIONS,
  OPTION_NO_GC_SECTIONS,
  OPTION_CHECK_SECTIONS,
  OPTION_NO_CHECK_SECTIONS,
  OPTION_NO_UNDEFINED,
  OPTION_INIT,
  OPTION_FINI,
  OPTION_SECTION_START,
  OPTION_UNIQUE,
  OPTION_TARGET_HELP,
  OPTION_ALLOW_SHLIB_UNDEFINED,
  OPTION_NO_ALLOW_SHLIB_UNDEFINED,
  OPTION_ALLOW_MULTIPLE_DEFINITION,
  OPTION_NO_UNDEFINED_VERSION,
  OPTION_DISCARD_NONE,
  OPTION_SPARE_DYNAMIC_TAGS,
  OPTION_NO_DEFINE_COMMON,
  OPTION_NOSTDLIB,
  OPTION_NO_OMAGIC,
  OPTION_STRIP_DISCARDED,
  OPTION_NO_STRIP_DISCARDED,
  OPTION_ACCEPT_UNKNOWN_INPUT_ARCH,
  OPTION_NO_ACCEPT_UNKNOWN_INPUT_ARCH,
  OPTION_PIE,
  OPTION_UNRESOLVED_SYMBOLS,
  OPTION_WARN_UNRESOLVED_SYMBOLS,
  OPTION_ERROR_UNRESOLVED_SYMBOLS
};
d236 2
a237 2
  { {"relocatable", no_argument, NULL, 'r'},
      'r', NULL, N_("Generate relocatable output"), TWO_DASHES },
d337 1
a337 1
     '\0', NULL, N_("Do not allow unresolved references in object files"), TWO_DASHES },
d339 1
a339 1
     '\0', NULL, N_("Allow unresolved references in shared libaries"), TWO_DASHES },
d341 1
a341 1
     '\0', NULL, N_("Do not allow unresolved references in shared libs"), TWO_DASHES },
a372 4
  { {"pie", no_argument, NULL, OPTION_PIE},
      '\0', NULL, N_("Create a position independent executable"), ONE_DASH },
  { {"pic-executable", no_argument, NULL, OPTION_PIE},
      '\0', NULL, NULL, TWO_DASHES },
a398 3
  { {"unresolved-symbols=<method>", required_argument, NULL, OPTION_UNRESOLVED_SYMBOLS},
     '\0', NULL, N_("How to handle unresolved symbols.  <method> is:\n\t\t\t\tignore-all, report-all, ignore-in-object-files,\n\t\t\t\tignore-in-shared-libs"),
    TWO_DASHES },
a420 4
  { {"warn-unresolved-symbols", no_argument, NULL, OPTION_WARN_UNRESOLVED_SYMBOLS},
    '\0', NULL, N_("Report unresolved symbols as warnings"), TWO_DASHES },
  { {"error-unresolved-symbols", no_argument, NULL, OPTION_ERROR_UNRESOLVED_SYMBOLS},
    '\0', NULL, N_("Report unresolved symbols as errors"), TWO_DASHES },
a425 4
  { {"as-needed", no_argument, NULL, OPTION_AS_NEEDED},
      '\0', NULL, N_("Only set DT_NEEDED for following dynamic libs if used"), TWO_DASHES },
  { {"no-as-needed", no_argument, NULL, OPTION_NO_AS_NEEDED},
      '\0', NULL, N_("Always set DT_NEEDED for following dynamic libs"), TWO_DASHES },
d427 3
a429 1
      '\0', N_("SYMBOL"), N_("Use wrapper functions for SYMBOL"), TWO_DASHES }
d434 27
d462 3
a464 1
parse_args (unsigned argc, char **argv)
a473 1
  enum report_method how_to_report_unresolved_symbols = RM_GENERATE_ERROR;
d475 5
a479 3
  shortopts = xmalloc (OPTION_COUNT * 3 + 2);
  longopts = xmalloc (sizeof (*longopts) * (OPTION_COUNT + 1));
  really_longopts = xmalloc (sizeof (*really_longopts) * (OPTION_COUNT + 1));
d564 1
a564 1
	  n = xmalloc (strlen (argv[i]) + 20);
d611 2
a612 1
	  lang_add_input_file (optarg, lang_input_file_is_file_enum, NULL);
d619 2
a620 2
	     ``use only shared libraries'' but, then, we don't
	     currently support shared libraries on HP/UX anyhow.  */
d712 2
a713 1
	      command_line.auxiliary_filters = xmalloc (2 * sizeof (char *));
d725 3
a727 3
	      command_line.auxiliary_filters
		= xrealloc (command_line.auxiliary_filters,
			    (c + 2) * sizeof (char *));
d760 2
a761 1
	  lang_add_input_file (optarg, lang_input_file_is_l_enum, NULL);
d800 1
a800 1
	  link_info.unresolved_syms_in_objects = how_to_report_unresolved_symbols;
d803 1
a803 1
	  link_info.unresolved_syms_in_shared_libs = RM_IGNORE;
d806 1
a806 1
	  link_info.unresolved_syms_in_shared_libs = how_to_report_unresolved_symbols;
a807 39
	case OPTION_UNRESOLVED_SYMBOLS:
	  if (strcmp (optarg, "ignore-all") == 0)
	    {
	      link_info.unresolved_syms_in_objects = RM_IGNORE;
	      link_info.unresolved_syms_in_shared_libs = RM_IGNORE;
	    }
	  else if (strcmp (optarg, "report-all") == 0)
	    {
	      link_info.unresolved_syms_in_objects = how_to_report_unresolved_symbols;
	      link_info.unresolved_syms_in_shared_libs = how_to_report_unresolved_symbols;
	    }
	  else if (strcmp (optarg, "ignore-in-object-files") == 0)
	    {
	      link_info.unresolved_syms_in_objects = RM_IGNORE;
	      link_info.unresolved_syms_in_shared_libs = how_to_report_unresolved_symbols;
	    }
      	  else if (strcmp (optarg, "ignore-in-shared-libs") == 0)
	    {
	      link_info.unresolved_syms_in_objects = how_to_report_unresolved_symbols;
	      link_info.unresolved_syms_in_shared_libs = RM_IGNORE;
	    }
	  else
	    einfo (_("%P%F: bad --unresolved-symbols option: %s\n"), optarg);
	  break;
	case OPTION_WARN_UNRESOLVED_SYMBOLS:
	  how_to_report_unresolved_symbols = RM_GENERATE_WARNING;
	  if (link_info.unresolved_syms_in_objects == RM_GENERATE_ERROR)
	    link_info.unresolved_syms_in_objects = RM_GENERATE_WARNING;
	  if (link_info.unresolved_syms_in_shared_libs == RM_GENERATE_ERROR)
	    link_info.unresolved_syms_in_shared_libs = RM_GENERATE_WARNING;
	  break;
	  
	case OPTION_ERROR_UNRESOLVED_SYMBOLS:
	  how_to_report_unresolved_symbols = RM_GENERATE_ERROR;
	  if (link_info.unresolved_syms_in_objects == RM_GENERATE_WARNING)
	    link_info.unresolved_syms_in_objects = RM_GENERATE_ERROR;
	  if (link_info.unresolved_syms_in_shared_libs == RM_GENERATE_WARNING)
	    link_info.unresolved_syms_in_shared_libs = RM_GENERATE_ERROR;
	  break;	  
d840 1
a840 1
	  lang_add_output_format (optarg, NULL, NULL, 0);
d858 1
a858 1
	  link_info.relocatable = TRUE;
d880 1
a880 1
				     NULL);
d958 1
a958 9
	    {
	      link_info.shared = TRUE;
	      /* When creating a shared library, the default
		 behaviour is to ignore any unresolved references.  */
	      if (link_info.unresolved_syms_in_objects == RM_NOT_YET_SET)
		link_info.unresolved_syms_in_objects = RM_IGNORE;
	      if (link_info.unresolved_syms_in_shared_libs == RM_NOT_YET_SET)
		link_info.unresolved_syms_in_shared_libs = RM_IGNORE;
	    }
a961 9
	case OPTION_PIE:
	  if (config.has_shared)
	    {
	      link_info.shared = TRUE;
	      link_info.pie = TRUE;
	    }
	  else
	    einfo (_("%P%F: -pie not supported\n"));
	  break;
d1031 1
a1031 1
	  link_info.relocatable = TRUE;
a1049 1
	  overflow_cutoff_limit = -2;
d1065 2
a1066 2
	     version information.  Read it, but don't assume that
	     we've seen a linker script.  */
a1103 6
	case OPTION_AS_NEEDED:
	  as_needed = TRUE;
	  break;
	case OPTION_NO_AS_NEEDED:
	  as_needed = FALSE;
	  break;
d1167 16
a1201 8

  if (link_info.unresolved_syms_in_objects == RM_NOT_YET_SET)
    /* FIXME: Should we allow emulations a chance to set this ?  */
    link_info.unresolved_syms_in_objects = how_to_report_unresolved_symbols;
  
  if (link_info.unresolved_syms_in_shared_libs == RM_NOT_YET_SET)
    /* FIXME: Should we allow emulations a chance to set this ?  */
    link_info.unresolved_syms_in_shared_libs = how_to_report_unresolved_symbols;
d1208 2
a1209 1
set_default_dirlist (char *dirlist_ptr)
d1227 2
a1228 1
set_section_start (char *sect, char *valstr)
d1240 1
a1240 1
help (void)
@


