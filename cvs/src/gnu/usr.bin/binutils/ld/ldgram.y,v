head	1.8;
access;
symbols
	OPENBSD_6_2:1.8.0.18
	OPENBSD_6_2_BASE:1.8
	OPENBSD_6_1:1.8.0.16
	OPENBSD_6_1_BASE:1.8
	OPENBSD_6_0:1.8.0.12
	OPENBSD_6_0_BASE:1.8
	OPENBSD_5_9:1.8.0.8
	OPENBSD_5_9_BASE:1.8
	OPENBSD_5_8:1.8.0.10
	OPENBSD_5_8_BASE:1.8
	OPENBSD_5_7:1.8.0.2
	OPENBSD_5_7_BASE:1.8
	OPENBSD_5_6:1.8.0.6
	OPENBSD_5_6_BASE:1.8
	OPENBSD_5_5:1.8.0.4
	OPENBSD_5_5_BASE:1.8
	OPENBSD_5_4:1.7.0.36
	OPENBSD_5_4_BASE:1.7
	OPENBSD_5_3:1.7.0.34
	OPENBSD_5_3_BASE:1.7
	OPENBSD_5_2:1.7.0.32
	OPENBSD_5_2_BASE:1.7
	OPENBSD_5_1_BASE:1.7
	OPENBSD_5_1:1.7.0.30
	OPENBSD_5_0:1.7.0.28
	OPENBSD_5_0_BASE:1.7
	OPENBSD_4_9:1.7.0.26
	OPENBSD_4_9_BASE:1.7
	OPENBSD_4_8:1.7.0.24
	OPENBSD_4_8_BASE:1.7
	OPENBSD_4_7:1.7.0.20
	OPENBSD_4_7_BASE:1.7
	OPENBSD_4_6:1.7.0.22
	OPENBSD_4_6_BASE:1.7
	OPENBSD_4_5:1.7.0.18
	OPENBSD_4_5_BASE:1.7
	OPENBSD_4_4:1.7.0.16
	OPENBSD_4_4_BASE:1.7
	OPENBSD_4_3:1.7.0.14
	OPENBSD_4_3_BASE:1.7
	OPENBSD_4_2:1.7.0.12
	OPENBSD_4_2_BASE:1.7
	OPENBSD_4_1:1.7.0.10
	OPENBSD_4_1_BASE:1.7
	OPENBSD_4_0:1.7.0.8
	OPENBSD_4_0_BASE:1.7
	OPENBSD_3_9:1.7.0.6
	OPENBSD_3_9_BASE:1.7
	OPENBSD_3_8:1.7.0.4
	OPENBSD_3_8_BASE:1.7
	OPENBSD_3_7:1.7.0.2
	OPENBSD_3_7_BASE:1.7
	BINUTILS_2_15:1.1.1.8
	OPENBSD_3_6:1.6.0.2
	OPENBSD_3_6_BASE:1.6
	BINUTILS-2_14:1.1.1.7
	OPENBSD_3_5:1.5.0.8
	OPENBSD_3_5_BASE:1.5
	OPENBSD_3_4:1.5.0.6
	OPENBSD_3_4_BASE:1.5
	OPENBSD_3_3:1.5.0.4
	OPENBSD_3_3_BASE:1.5
	OPENBSD_3_2:1.5.0.2
	OPENBSD_3_2_BASE:1.5
	binutils-2_11_2:1.1.1.6
	OPENBSD_3_1:1.4.0.8
	OPENBSD_3_1_BASE:1.4
	OPENBSD_3_0:1.4.0.6
	OPENBSD_3_0_BASE:1.4
	BINUTILS-2_10_1:1.1.1.5
	OPENBSD_2_9:1.4.0.4
	OPENBSD_2_9_BASE:1.4
	OPENBSD_2_8:1.4.0.2
	OPENBSD_2_8_BASE:1.4
	BINUTILS-2_10:1.1.1.5
	OPENBSD_2_7:1.3.0.18
	OPENBSD_2_7_BASE:1.3
	new-binutils:1.3.0.16
	OPENBSD_2_6:1.3.0.14
	OPENBSD_2_6_BASE:1.3
	OPENBSD_2_5:1.3.0.12
	OPENBSD_2_5_BASE:1.3
	OPENBSD_2_4:1.3.0.10
	OPENBSD_2_4_BASE:1.3
	OPENBSD_2_3:1.3.0.8
	OPENBSD_2_3_BASE:1.3
	OPENBSD_2_2:1.3.0.6
	OPENBSD_2_2_BASE:1.3
	BINUTILS-2_8_1:1.1.1.4
	OPENBSD_2_1:1.3.0.4
	OPENBSD_2_1_BASE:1.3
	CYGNUS-961112:1.1.1.3
	OPENBSD_2_0:1.3.0.2
	OPENBSD_2_0_BASE:1.3
	CYGNUS-960904:1.1.1.3
	CYGNUS-960609:1.1.1.2
	CYGNUS:1.1.1
	FSF_2_6:1.1.1.1
	FSF:1.1.1;
locks; strict;
comment	@ * @;


1.8
date	2013.12.30.10.30.00;	author kettenis;	state Exp;
branches;
next	1.7;

1.7
date	2004.11.02.20.45.47;	author miod;	state Exp;
branches;
next	1.6;

1.6
date	2004.05.17.21.54.50;	author drahn;	state Exp;
branches;
next	1.5;

1.5
date	2002.05.13.17.07.42;	author fgsch;	state Exp;
branches;
next	1.4;

1.4
date	2000.09.12.19.12.44;	author espie;	state Exp;
branches;
next	1.3;

1.3
date	96.09.04.19.09.21;	author niklas;	state Exp;
branches;
next	1.2;

1.2
date	96.06.10.10.54.18;	author niklas;	state Exp;
branches;
next	1.1;

1.1
date	96.01.08.11.09.14;	author niklas;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	96.01.08.11.09.14;	author niklas;	state Exp;
branches;
next	1.1.1.2;

1.1.1.2
date	96.06.09.19.35.32;	author niklas;	state Exp;
branches;
next	1.1.1.3;

1.1.1.3
date	96.09.04.17.34.59;	author niklas;	state Exp;
branches;
next	1.1.1.4;

1.1.1.4
date	97.05.29.09.28.28;	author niklas;	state Exp;
branches;
next	1.1.1.5;

1.1.1.5
date	2000.09.12.14.48.08;	author espie;	state Exp;
branches;
next	1.1.1.6;

1.1.1.6
date	2002.05.13.14.00.51;	author fgsch;	state Exp;
branches;
next	1.1.1.7;

1.1.1.7
date	2004.05.17.20.42.49;	author drahn;	state Exp;
branches;
next	1.1.1.8;

1.1.1.8
date	2004.11.02.20.23.21;	author miod;	state Exp;
branches;
next	;


desc
@@


1.8
log
@Recognize PT_OPENBSD_RANDOMIZE in linker scripts.

ok miod@@, matthew@@
@
text
@/* A YACC grammar to parse a superset of the AT&T linker scripting language.
   Copyright 1991, 1992, 1993, 1994, 1995, 1996, 1997, 1998, 1999, 2000,
   2001, 2002, 2003 Free Software Foundation, Inc.
   Written by Steve Chamberlain of Cygnus Support (steve@@cygnus.com).

This file is part of GNU ld.

This program is free software; you can redistribute it and/or modify
it under the terms of the GNU General Public License as published by
the Free Software Foundation; either version 2 of the License, or
(at your option) any later version.

This program is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
GNU General Public License for more details.

You should have received a copy of the GNU General Public License
along with this program; if not, write to the Free Software
Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA 02111-1307, USA.  */

%{
/*

 */

#define DONTDECLARE_MALLOC

#include "bfd.h"
#include "sysdep.h"
#include "bfdlink.h"
#include "ld.h"
#include "ldexp.h"
#include "ldver.h"
#include "ldlang.h"
#include "ldfile.h"
#include "ldemul.h"
#include "ldmisc.h"
#include "ldmain.h"
#include "mri.h"
#include "ldctor.h"
#include "ldlex.h"

#ifndef YYDEBUG
#define YYDEBUG 1
#endif

static enum section_type sectype;

lang_memory_region_type *region;

bfd_boolean ldgram_want_filename = TRUE;
FILE *saved_script_handle = NULL;
bfd_boolean force_make_executable = FALSE;

bfd_boolean ldgram_in_script = FALSE;
bfd_boolean ldgram_had_equals = FALSE;
bfd_boolean ldgram_had_keep = FALSE;
char *ldgram_vers_current_lang = NULL;

#define ERROR_NAME_MAX 20
static char *error_names[ERROR_NAME_MAX];
static int error_index;
#define PUSH_ERROR(x) if (error_index < ERROR_NAME_MAX) error_names[error_index] = x; error_index++;
#define POP_ERROR()   error_index--;
%}
%union {
  bfd_vma integer;
  struct big_int
    {
      bfd_vma integer;
      char *str;
    } bigint;
  fill_type *fill;
  char *name;
  const char *cname;
  struct wildcard_spec wildcard;
  struct wildcard_list *wildcard_list;
  struct name_list *name_list;
  int token;
  union etree_union *etree;
  struct phdr_info
    {
      bfd_boolean filehdr;
      bfd_boolean phdrs;
      union etree_union *at;
      union etree_union *flags;
    } phdr;
  struct lang_nocrossref *nocrossref;
  struct lang_output_section_phdr_list *section_phdr;
  struct bfd_elf_version_deps *deflist;
  struct bfd_elf_version_expr *versyms;
  struct bfd_elf_version_tree *versnode;
}

%type <etree> exp opt_exp_with_type mustbe_exp opt_at phdr_type phdr_val
%type <etree> opt_exp_without_type opt_subalign
%type <fill> fill_opt fill_exp
%type <name_list> exclude_name_list
%type <wildcard_list> file_NAME_list
%type <name> memspec_opt casesymlist
%type <name> memspec_at_opt
%type <cname> wildcard_name
%type <wildcard> wildcard_spec
%token <bigint> INT
%token <name> NAME LNAME
%type <integer> length
%type <phdr> phdr_qualifiers
%type <nocrossref> nocrossref_list
%type <section_phdr> phdr_opt
%type <integer> opt_nocrossrefs

%right <token> PLUSEQ MINUSEQ MULTEQ DIVEQ  '=' LSHIFTEQ RSHIFTEQ   ANDEQ OREQ
%right <token> '?' ':'
%left <token> OROR
%left <token>  ANDAND
%left <token> '|'
%left <token>  '^'
%left  <token> '&'
%left <token>  EQ NE
%left  <token> '<' '>' LE GE
%left  <token> LSHIFT RSHIFT

%left  <token> '+' '-'
%left  <token> '*' '/' '%'

%right UNARY
%token END
%left <token> '('
%token <token> ALIGN_K BLOCK BIND QUAD SQUAD LONG SHORT BYTE
%token SECTIONS PHDRS SORT DATA_SEGMENT_ALIGN DATA_SEGMENT_END
%token '{' '}'
%token SIZEOF_HEADERS OUTPUT_FORMAT FORCE_COMMON_ALLOCATION OUTPUT_ARCH
%token INHIBIT_COMMON_ALLOCATION
%token SIZEOF_HEADERS
%token INCLUDE
%token MEMORY DEFSYMEND
%token NOLOAD DSECT COPY INFO OVERLAY
%token NAME LNAME DEFINED TARGET_K SEARCH_DIR MAP ENTRY
%token <integer> NEXT
%token SIZEOF ADDR LOADADDR MAX_K MIN_K
%token STARTUP HLL SYSLIB FLOAT NOFLOAT NOCROSSREFS
%token ORIGIN FILL
%token LENGTH CREATE_OBJECT_SYMBOLS INPUT GROUP OUTPUT CONSTRUCTORS
%token ALIGNMOD AT SUBALIGN PROVIDE
%type <token> assign_op atype attributes_opt
%type <name>  filename
%token CHIP LIST SECT ABSOLUTE  LOAD NEWLINE ENDWORD ORDER NAMEWORD ASSERT_K
%token FORMAT PUBLIC DEFSYMEND BASE ALIAS TRUNCATE REL
%token INPUT_SCRIPT INPUT_MRI_SCRIPT INPUT_DEFSYM CASE EXTERN START
%token <name> VERS_TAG VERS_IDENTIFIER
%token GLOBAL LOCAL VERSIONK INPUT_VERSION_SCRIPT
%token KEEP
%token EXCLUDE_FILE
%type <versyms> vers_defns
%type <versnode> vers_tag
%type <deflist> verdep

%%

file:
		INPUT_SCRIPT script_file
	|	INPUT_MRI_SCRIPT mri_script_file
	|	INPUT_VERSION_SCRIPT version_script_file
	|	INPUT_DEFSYM defsym_expr
	;


filename:  NAME;


defsym_expr:
		{ ldlex_defsym(); }
		NAME '=' exp
		{
		  ldlex_popstate();
		  lang_add_assignment(exp_assop($3,$2,$4));
		}
	;

/* SYNTAX WITHIN AN MRI SCRIPT FILE */
mri_script_file:
		{
		  ldlex_mri_script ();
		  PUSH_ERROR (_("MRI style script"));
		}
	     mri_script_lines
		{
		  ldlex_popstate ();
		  mri_draw_tree ();
		  POP_ERROR ();
		}
	;

mri_script_lines:
		mri_script_lines mri_script_command NEWLINE
          |
	;

mri_script_command:
		CHIP  exp
	|	CHIP  exp ',' exp
	|	NAME 	{
			einfo(_("%P%F: unrecognised keyword in MRI style script '%s'\n"),$1);
			}
	|	LIST  	{
			config.map_filename = "-";
			}
        |       ORDER ordernamelist
	|       ENDWORD
        |       PUBLIC NAME '=' exp
 			{ mri_public($2, $4); }
        |       PUBLIC NAME ',' exp
 			{ mri_public($2, $4); }
        |       PUBLIC NAME  exp
 			{ mri_public($2, $3); }
	| 	FORMAT NAME
			{ mri_format($2); }
	|	SECT NAME ',' exp
			{ mri_output_section($2, $4);}
	|	SECT NAME  exp
			{ mri_output_section($2, $3);}
	|	SECT NAME '=' exp
			{ mri_output_section($2, $4);}
	|	ALIGN_K NAME '=' exp
			{ mri_align($2,$4); }
	|	ALIGN_K NAME ',' exp
			{ mri_align($2,$4); }
	|	ALIGNMOD NAME '=' exp
			{ mri_alignmod($2,$4); }
	|	ALIGNMOD NAME ',' exp
			{ mri_alignmod($2,$4); }
	|	ABSOLUTE mri_abs_name_list
	|	LOAD	 mri_load_name_list
	|       NAMEWORD NAME
			{ mri_name($2); }
	|	ALIAS NAME ',' NAME
			{ mri_alias($2,$4,0);}
	|	ALIAS NAME ',' INT
			{ mri_alias ($2, 0, (int) $4.integer); }
	|	BASE     exp
			{ mri_base($2); }
	|	TRUNCATE INT
		{ mri_truncate ((unsigned int) $2.integer); }
	|	CASE casesymlist
	|	EXTERN extern_name_list
	|	INCLUDE filename
		{ ldlex_script (); ldfile_open_command_file($2); }
		mri_script_lines END
		{ ldlex_popstate (); }
	|	START NAME
		{ lang_add_entry ($2, FALSE); }
        |
	;

ordernamelist:
	      ordernamelist ',' NAME         { mri_order($3); }
	|     ordernamelist  NAME         { mri_order($2); }
      	|
	;

mri_load_name_list:
		NAME
			{ mri_load($1); }
	|	mri_load_name_list ',' NAME { mri_load($3); }
	;

mri_abs_name_list:
 		NAME
 			{ mri_only_load($1); }
	|	mri_abs_name_list ','  NAME
 			{ mri_only_load($3); }
	;

casesymlist:
	  /* empty */ { $$ = NULL; }
	| NAME
	| casesymlist ',' NAME
	;

extern_name_list:
	  NAME
			{ ldlang_add_undef ($1); }
	| extern_name_list NAME
			{ ldlang_add_undef ($2); }
	| extern_name_list ',' NAME
			{ ldlang_add_undef ($3); }
	;

script_file:
	{
	 ldlex_both();
	}
       ifile_list
	{
	ldlex_popstate();
	}
        ;


ifile_list:
       ifile_list ifile_p1
        |
	;



ifile_p1:
		memory
	|	sections
	|	phdrs
	|	startup
	|	high_level_library
	|	low_level_library
	|	floating_point_support
	|	statement_anywhere
	|	version
        |	 ';'
	|	TARGET_K '(' NAME ')'
		{ lang_add_target($3); }
	|	SEARCH_DIR '(' filename ')'
		{ ldfile_add_library_path ($3, FALSE); }
	|	OUTPUT '(' filename ')'
		{ lang_add_output($3, 1); }
        |	OUTPUT_FORMAT '(' NAME ')'
		  { lang_add_output_format ($3, (char *) NULL,
					    (char *) NULL, 1); }
	|	OUTPUT_FORMAT '(' NAME ',' NAME ',' NAME ')'
		  { lang_add_output_format ($3, $5, $7, 1); }
        |	OUTPUT_ARCH '(' NAME ')'
		  { ldfile_set_output_arch ($3, bfd_arch_unknown); }
	|	FORCE_COMMON_ALLOCATION
		{ command_line.force_common_definition = TRUE ; }
	|	INHIBIT_COMMON_ALLOCATION
		{ command_line.inhibit_common_definition = TRUE ; }
	|	INPUT '(' input_list ')'
	|	GROUP
		  { lang_enter_group (); }
		    '(' input_list ')'
		  { lang_leave_group (); }
     	|	MAP '(' filename ')'
		{ lang_add_map($3); }
	|	INCLUDE filename
		{ ldlex_script (); ldfile_open_command_file($2); }
		ifile_list END
		{ ldlex_popstate (); }
	|	NOCROSSREFS '(' nocrossref_list ')'
		{
		  lang_add_nocrossref ($3);
		}
	|	EXTERN '(' extern_name_list ')'
	;

input_list:
		NAME
		{ lang_add_input_file($1,lang_input_file_is_search_file_enum,
				 (char *)NULL); }
	|	input_list ',' NAME
		{ lang_add_input_file($3,lang_input_file_is_search_file_enum,
				 (char *)NULL); }
	|	input_list NAME
		{ lang_add_input_file($2,lang_input_file_is_search_file_enum,
				 (char *)NULL); }
	|	LNAME
		{ lang_add_input_file($1,lang_input_file_is_l_enum,
				 (char *)NULL); }
	|	input_list ',' LNAME
		{ lang_add_input_file($3,lang_input_file_is_l_enum,
				 (char *)NULL); }
	|	input_list LNAME
		{ lang_add_input_file($2,lang_input_file_is_l_enum,
				 (char *)NULL); }
	;

sections:
		SECTIONS '{' sec_or_group_p1 '}'
	;

sec_or_group_p1:
		sec_or_group_p1 section
	|	sec_or_group_p1 statement_anywhere
	|
	;

statement_anywhere:
		ENTRY '(' NAME ')'
		{ lang_add_entry ($3, FALSE); }
	|	assignment end
	|	ASSERT_K  {ldlex_expression ();} '(' exp ',' NAME ')'
		{ ldlex_popstate ();
		  lang_add_assignment (exp_assert ($4, $6)); }
	;

/* The '*' and '?' cases are there because the lexer returns them as
   separate tokens rather than as NAME.  */
wildcard_name:
		NAME
			{
			  $$ = $1;
			}
	|	'*'
			{
			  $$ = "*";
			}
	|	'?'
			{
			  $$ = "?";
			}
	;

wildcard_spec:
		wildcard_name
			{
			  $$.name = $1;
			  $$.sorted = FALSE;
			  $$.exclude_name_list = NULL;
			}
	| 	EXCLUDE_FILE '(' exclude_name_list ')' wildcard_name
			{
			  $$.name = $5;
			  $$.sorted = FALSE;
			  $$.exclude_name_list = $3;
			}
	|	SORT '(' wildcard_name ')'
			{
			  $$.name = $3;
			  $$.sorted = TRUE;
			  $$.exclude_name_list = NULL;
			}
	|	SORT '(' EXCLUDE_FILE '(' exclude_name_list ')' wildcard_name ')'
			{
			  $$.name = $7;
			  $$.sorted = TRUE;
			  $$.exclude_name_list = $5;
			}
	;

exclude_name_list:
		exclude_name_list wildcard_name
			{
			  struct name_list *tmp;
			  tmp = (struct name_list *) xmalloc (sizeof *tmp);
			  tmp->name = $2;
			  tmp->next = $1;
			  $$ = tmp;
			}
	|
		wildcard_name
			{
			  struct name_list *tmp;
			  tmp = (struct name_list *) xmalloc (sizeof *tmp);
			  tmp->name = $1;
			  tmp->next = NULL;
			  $$ = tmp;
			}
	;

file_NAME_list:
		file_NAME_list opt_comma wildcard_spec
			{
			  struct wildcard_list *tmp;
			  tmp = (struct wildcard_list *) xmalloc (sizeof *tmp);
			  tmp->next = $1;
			  tmp->spec = $3;
			  $$ = tmp;
			}
	|
		wildcard_spec
			{
			  struct wildcard_list *tmp;
			  tmp = (struct wildcard_list *) xmalloc (sizeof *tmp);
			  tmp->next = NULL;
			  tmp->spec = $1;
			  $$ = tmp;
			}
	;

input_section_spec_no_keep:
		NAME
			{
			  struct wildcard_spec tmp;
			  tmp.name = $1;
			  tmp.exclude_name_list = NULL;
			  tmp.sorted = FALSE;
			  lang_add_wild (&tmp, NULL, ldgram_had_keep);
			}
        |	'[' file_NAME_list ']'
			{
			  lang_add_wild (NULL, $2, ldgram_had_keep);
			}
	|	wildcard_spec '(' file_NAME_list ')'
			{
			  lang_add_wild (&$1, $3, ldgram_had_keep);
			}
	;

input_section_spec:
		input_section_spec_no_keep
	|	KEEP '('
			{ ldgram_had_keep = TRUE; }
		input_section_spec_no_keep ')'
			{ ldgram_had_keep = FALSE; }
	;

statement:
	  	assignment end
	|	CREATE_OBJECT_SYMBOLS
		{
 		lang_add_attribute(lang_object_symbols_statement_enum);
	      	}
        |	';'
        |	CONSTRUCTORS
		{

		  lang_add_attribute(lang_constructors_statement_enum);
		}
	| SORT '(' CONSTRUCTORS ')'
		{
		  constructors_sorted = TRUE;
		  lang_add_attribute (lang_constructors_statement_enum);
		}
	| input_section_spec
        | length '(' mustbe_exp ')'
        	        {
			  lang_add_data ((int) $1, $3);
			}

	| FILL '(' fill_exp ')'
			{
			  lang_add_fill ($3);
			}
	;

statement_list:
		statement_list statement
  	|  	statement
	;

statement_list_opt:
		/* empty */
	|	statement_list
	;

length:
		QUAD
			{ $$ = $1; }
	|	SQUAD
			{ $$ = $1; }
	|	LONG
			{ $$ = $1; }
	| 	SHORT
			{ $$ = $1; }
	|	BYTE
			{ $$ = $1; }
	;

fill_exp:
	mustbe_exp
		{
		  $$ = exp_get_fill ($1,
				     0,
				     "fill value",
				     lang_first_phase_enum);
		}
	;

fill_opt:
	  '=' fill_exp
		{ $$ = $2; }
	| 	{ $$ = (fill_type *) 0; }
	;

assign_op:
		PLUSEQ
			{ $$ = '+'; }
	|	MINUSEQ
			{ $$ = '-'; }
	| 	MULTEQ
			{ $$ = '*'; }
	| 	DIVEQ
			{ $$ = '/'; }
	| 	LSHIFTEQ
			{ $$ = LSHIFT; }
	| 	RSHIFTEQ
			{ $$ = RSHIFT; }
	| 	ANDEQ
			{ $$ = '&'; }
	| 	OREQ
			{ $$ = '|'; }

	;

end:	';' | ','
	;


assignment:
		NAME '=' mustbe_exp
		{
		  lang_add_assignment (exp_assop ($2, $1, $3));
		}
	|	NAME assign_op mustbe_exp
		{
		  lang_add_assignment (exp_assop ('=', $1,
						  exp_binop ($2,
							     exp_nameop (NAME,
									 $1),
							     $3)));
		}
	|	PROVIDE '(' NAME '=' mustbe_exp ')'
		{
		  lang_add_assignment (exp_provide ($3, $5));
		}
	;


opt_comma:
		','	|	;


memory:
		MEMORY '{' memory_spec memory_spec_list '}'
	;

memory_spec_list:
		memory_spec_list memory_spec
	|	memory_spec_list ',' memory_spec
	|
	;


memory_spec: 	NAME
		{ region = lang_memory_region_lookup ($1, TRUE); }
		attributes_opt ':'
		origin_spec opt_comma length_spec
		{}
	;

origin_spec:
	ORIGIN '=' mustbe_exp
		{ region->current =
		 region->origin =
		 exp_get_vma($3, 0L,"origin", lang_first_phase_enum);
}
	;

length_spec:
             LENGTH '=' mustbe_exp
               { region->length = exp_get_vma($3,
					       ~((bfd_vma)0),
					       "length",
					       lang_first_phase_enum);
		}
	;

attributes_opt:
		/* empty */
		  { /* dummy action to avoid bison 1.25 error message */ }
	|	'(' attributes_list ')'
	;

attributes_list:
		attributes_string
	|	attributes_list attributes_string
	;

attributes_string:
		NAME
		  { lang_set_flags (region, $1, 0); }
	|	'!' NAME
		  { lang_set_flags (region, $2, 1); }
	;

startup:
	STARTUP '(' filename ')'
		{ lang_startup($3); }
	;

high_level_library:
		HLL '(' high_level_library_NAME_list ')'
	|	HLL '(' ')'
			{ ldemul_hll((char *)NULL); }
	;

high_level_library_NAME_list:
		high_level_library_NAME_list opt_comma filename
			{ ldemul_hll($3); }
	|	filename
			{ ldemul_hll($1); }

	;

low_level_library:
	SYSLIB '(' low_level_library_NAME_list ')'
	; low_level_library_NAME_list:
		low_level_library_NAME_list opt_comma filename
			{ ldemul_syslib($3); }
	|
	;

floating_point_support:
		FLOAT
			{ lang_float(TRUE); }
	|	NOFLOAT
			{ lang_float(FALSE); }
	;

nocrossref_list:
		/* empty */
		{
		  $$ = NULL;
		}
	|	NAME nocrossref_list
		{
		  struct lang_nocrossref *n;

		  n = (struct lang_nocrossref *) xmalloc (sizeof *n);
		  n->name = $1;
		  n->next = $2;
		  $$ = n;
		}
	|	NAME ',' nocrossref_list
		{
		  struct lang_nocrossref *n;

		  n = (struct lang_nocrossref *) xmalloc (sizeof *n);
		  n->name = $1;
		  n->next = $3;
		  $$ = n;
		}
	;

mustbe_exp:		 { ldlex_expression(); }
		exp
			 { ldlex_popstate(); $$=$2;}
	;

exp	:
		'-' exp %prec UNARY
			{ $$ = exp_unop('-', $2); }
	|	'(' exp ')'
			{ $$ = $2; }
	|	NEXT '(' exp ')' %prec UNARY
			{ $$ = exp_unop((int) $1,$3); }
	|	'!' exp %prec UNARY
			{ $$ = exp_unop('!', $2); }
	|	'+' exp %prec UNARY
			{ $$ = $2; }
	|	'~' exp %prec UNARY
			{ $$ = exp_unop('~', $2);}

	|	exp '*' exp
			{ $$ = exp_binop('*', $1, $3); }
	|	exp '/' exp
			{ $$ = exp_binop('/', $1, $3); }
	|	exp '%' exp
			{ $$ = exp_binop('%', $1, $3); }
	|	exp '+' exp
			{ $$ = exp_binop('+', $1, $3); }
	|	exp '-' exp
			{ $$ = exp_binop('-' , $1, $3); }
	|	exp LSHIFT exp
			{ $$ = exp_binop(LSHIFT , $1, $3); }
	|	exp RSHIFT exp
			{ $$ = exp_binop(RSHIFT , $1, $3); }
	|	exp EQ exp
			{ $$ = exp_binop(EQ , $1, $3); }
	|	exp NE exp
			{ $$ = exp_binop(NE , $1, $3); }
	|	exp LE exp
			{ $$ = exp_binop(LE , $1, $3); }
  	|	exp GE exp
			{ $$ = exp_binop(GE , $1, $3); }
	|	exp '<' exp
			{ $$ = exp_binop('<' , $1, $3); }
	|	exp '>' exp
			{ $$ = exp_binop('>' , $1, $3); }
	|	exp '&' exp
			{ $$ = exp_binop('&' , $1, $3); }
	|	exp '^' exp
			{ $$ = exp_binop('^' , $1, $3); }
	|	exp '|' exp
			{ $$ = exp_binop('|' , $1, $3); }
	|	exp '?' exp ':' exp
			{ $$ = exp_trinop('?' , $1, $3, $5); }
	|	exp ANDAND exp
			{ $$ = exp_binop(ANDAND , $1, $3); }
	|	exp OROR exp
			{ $$ = exp_binop(OROR , $1, $3); }
	|	DEFINED '(' NAME ')'
			{ $$ = exp_nameop(DEFINED, $3); }
	|	INT
			{ $$ = exp_bigintop ($1.integer, $1.str); }
        |	SIZEOF_HEADERS
			{ $$ = exp_nameop(SIZEOF_HEADERS,0); }

	|	SIZEOF '(' NAME ')'
			{ $$ = exp_nameop(SIZEOF,$3); }
	|	ADDR '(' NAME ')'
			{ $$ = exp_nameop(ADDR,$3); }
	|	LOADADDR '(' NAME ')'
			{ $$ = exp_nameop(LOADADDR,$3); }
	|	ABSOLUTE '(' exp ')'
			{ $$ = exp_unop(ABSOLUTE, $3); }
	|	ALIGN_K '(' exp ')'
			{ $$ = exp_unop(ALIGN_K,$3); }
	|	ALIGN_K '(' exp ',' exp ')'
			{ $$ = exp_binop(ALIGN_K,$3,$5); }
	|	DATA_SEGMENT_ALIGN '(' exp ',' exp ')'
			{ $$ = exp_binop (DATA_SEGMENT_ALIGN, $3, $5); }
	|	DATA_SEGMENT_END '(' exp ')'
			{ $$ = exp_unop(DATA_SEGMENT_END, $3); }
	|	BLOCK '(' exp ')'
			{ $$ = exp_unop(ALIGN_K,$3); }
	|	NAME
			{ $$ = exp_nameop(NAME,$1); }
	|	MAX_K '(' exp ',' exp ')'
			{ $$ = exp_binop (MAX_K, $3, $5 ); }
	|	MIN_K '(' exp ',' exp ')'
			{ $$ = exp_binop (MIN_K, $3, $5 ); }
	|	ASSERT_K '(' exp ',' NAME ')'
			{ $$ = exp_assert ($3, $5); }
	;


memspec_at_opt:
                AT '>' NAME { $$ = $3; }
        |       { $$ = 0; }
        ;

opt_at:
		AT '(' exp ')' { $$ = $3; }
	|	{ $$ = 0; }
	;

opt_subalign:
		SUBALIGN '(' exp ')' { $$ = $3; }
	|	{ $$ = 0; }
	;

section:	NAME 		{ ldlex_expression(); }
		opt_exp_with_type
		opt_at
		opt_subalign	{ ldlex_popstate (); ldlex_script (); }
		'{'
			{
			  lang_enter_output_section_statement($1, $3,
							      sectype,
							      0, $5, $4);
			}
		statement_list_opt
 		'}' { ldlex_popstate (); ldlex_expression (); }
		memspec_opt memspec_at_opt phdr_opt fill_opt
		{
		  ldlex_popstate ();
		  lang_leave_output_section_statement ($15, $12, $14, $13);
		}
		opt_comma
		{}
	|	OVERLAY
			{ ldlex_expression (); }
		opt_exp_without_type opt_nocrossrefs opt_at opt_subalign
			{ ldlex_popstate (); ldlex_script (); }
		'{'
			{
			  lang_enter_overlay ($3, $6);
			}
		overlay_section
		'}'
			{ ldlex_popstate (); ldlex_expression (); }
		memspec_opt memspec_at_opt phdr_opt fill_opt
			{
			  ldlex_popstate ();
			  lang_leave_overlay ($5, (int) $4,
					      $16, $13, $15, $14);
			}
		opt_comma
	|	/* The GROUP case is just enough to support the gcc
		   svr3.ifile script.  It is not intended to be full
		   support.  I'm not even sure what GROUP is supposed
		   to mean.  */
		GROUP { ldlex_expression (); }
		opt_exp_with_type
		{
		  ldlex_popstate ();
		  lang_add_assignment (exp_assop ('=', ".", $3));
		}
		'{' sec_or_group_p1 '}'
	;

type:
	   NOLOAD  { sectype = noload_section; }
	|  DSECT   { sectype = dsect_section; }
	|  COPY    { sectype = copy_section; }
	|  INFO    { sectype = info_section; }
	|  OVERLAY { sectype = overlay_section; }
	;

atype:
	 	'(' type ')'
  	| 	/* EMPTY */ { sectype = normal_section; }
  	| 	'(' ')' { sectype = normal_section; }
	;

opt_exp_with_type:
		exp atype ':'		{ $$ = $1; }
	|	atype ':'		{ $$ = (etree_type *)NULL;  }
	|	/* The BIND cases are to support the gcc svr3.ifile
		   script.  They aren't intended to implement full
		   support for the BIND keyword.  I'm not even sure
		   what BIND is supposed to mean.  */
		BIND '(' exp ')' atype ':' { $$ = $3; }
	|	BIND '(' exp ')' BLOCK '(' exp ')' atype ':'
		{ $$ = $3; }
	;

opt_exp_without_type:
		exp ':'		{ $$ = $1; }
	|	':'		{ $$ = (etree_type *) NULL;  }
	;

opt_nocrossrefs:
		/* empty */
			{ $$ = 0; }
	|	NOCROSSREFS
			{ $$ = 1; }
	;

memspec_opt:
		'>' NAME
		{ $$ = $2; }
	|	{ $$ = DEFAULT_MEMORY_REGION; }
	;

phdr_opt:
		/* empty */
		{
		  $$ = NULL;
		}
	|	phdr_opt ':' NAME
		{
		  struct lang_output_section_phdr_list *n;

		  n = ((struct lang_output_section_phdr_list *)
		       xmalloc (sizeof *n));
		  n->name = $3;
		  n->used = FALSE;
		  n->next = $1;
		  $$ = n;
		}
	;

overlay_section:
		/* empty */
	|	overlay_section
		NAME
			{
			  ldlex_script ();
			  lang_enter_overlay_section ($2);
			}
		'{' statement_list_opt '}'
			{ ldlex_popstate (); ldlex_expression (); }
		phdr_opt fill_opt
			{
			  ldlex_popstate ();
			  lang_leave_overlay_section ($9, $8);
			}
		opt_comma
	;

phdrs:
		PHDRS '{' phdr_list '}'
	;

phdr_list:
		/* empty */
	|	phdr_list phdr
	;

phdr:
		NAME { ldlex_expression (); }
		  phdr_type phdr_qualifiers { ldlex_popstate (); }
		  ';'
		{
		  lang_new_phdr ($1, $3, $4.filehdr, $4.phdrs, $4.at,
				 $4.flags);
		}
	;

phdr_type:
		exp
		{
		  $$ = $1;

		  if ($1->type.node_class == etree_name
		      && $1->type.node_code == NAME)
		    {
		      const char *s;
		      unsigned int i;
		      static const char * const phdr_types[] =
			{
			  "PT_NULL", "PT_LOAD", "PT_DYNAMIC",
			  "PT_INTERP", "PT_NOTE", "PT_SHLIB",
			  "PT_PHDR", "PT_TLS"
			};

		      s = $1->name.name;
		      for (i = 0;
			   i < sizeof phdr_types / sizeof phdr_types[0];
			   i++)
			if (strcmp (s, phdr_types[i]) == 0)
			  {
			    $$ = exp_intop (i);
			    break;
			  }
		      if (i == sizeof phdr_types / sizeof phdr_types[0])
			{
			  if (strcmp (s, "PT_GNU_EH_FRAME") == 0)
			    $$ = exp_intop (0x6474e550);
			  else if (strcmp (s, "PT_GNU_STACK") == 0)
			    $$ = exp_intop (0x6474e551);
			  else if (strcmp (s, "PT_OPENBSD_RANDOMIZE") == 0)
			    $$ = exp_intop (0x65a3dbe6);
			  else
			    {
			      einfo (_("\
%X%P:%S: unknown phdr type `%s' (try integer literal)\n"),
				     s);
			      $$ = exp_intop (0);
			    }
			}
		    }
		}
	;

phdr_qualifiers:
		/* empty */
		{
		  memset (&$$, 0, sizeof (struct phdr_info));
		}
	|	NAME phdr_val phdr_qualifiers
		{
		  $$ = $3;
		  if (strcmp ($1, "FILEHDR") == 0 && $2 == NULL)
		    $$.filehdr = TRUE;
		  else if (strcmp ($1, "PHDRS") == 0 && $2 == NULL)
		    $$.phdrs = TRUE;
		  else if (strcmp ($1, "FLAGS") == 0 && $2 != NULL)
		    $$.flags = $2;
		  else
		    einfo (_("%X%P:%S: PHDRS syntax error at `%s'\n"), $1);
		}
	|	AT '(' exp ')' phdr_qualifiers
		{
		  $$ = $5;
		  $$.at = $3;
		}
	;

phdr_val:
		/* empty */
		{
		  $$ = NULL;
		}
	| '(' exp ')'
		{
		  $$ = $2;
		}
	;

/* This syntax is used within an external version script file.  */

version_script_file:
		{
		  ldlex_version_file ();
		  PUSH_ERROR (_("VERSION script"));
		}
		vers_nodes
		{
		  ldlex_popstate ();
		  POP_ERROR ();
		}
	;

/* This is used within a normal linker script file.  */

version:
		{
		  ldlex_version_script ();
		}
		VERSIONK '{' vers_nodes '}'
		{
		  ldlex_popstate ();
		}
	;

vers_nodes:
		vers_node
	|	vers_nodes vers_node
	;

vers_node:
		'{' vers_tag '}' ';'
		{
		  lang_register_vers_node (NULL, $2, NULL);
		}
	|	VERS_TAG '{' vers_tag '}' ';'
		{
		  lang_register_vers_node ($1, $3, NULL);
		}
	|	VERS_TAG '{' vers_tag '}' verdep ';'
		{
		  lang_register_vers_node ($1, $3, $5);
		}
	;

verdep:
		VERS_TAG
		{
		  $$ = lang_add_vers_depend (NULL, $1);
		}
	|	verdep VERS_TAG
		{
		  $$ = lang_add_vers_depend ($1, $2);
		}
	;

vers_tag:
		/* empty */
		{
		  $$ = lang_new_vers_node (NULL, NULL);
		}
	|	vers_defns ';'
		{
		  $$ = lang_new_vers_node ($1, NULL);
		}
	|	GLOBAL ':' vers_defns ';'
		{
		  $$ = lang_new_vers_node ($3, NULL);
		}
	|	LOCAL ':' vers_defns ';'
		{
		  $$ = lang_new_vers_node (NULL, $3);
		}
	|	GLOBAL ':' vers_defns ';' LOCAL ':' vers_defns ';'
		{
		  $$ = lang_new_vers_node ($3, $7);
		}
	;

vers_defns:
		VERS_IDENTIFIER
		{
		  $$ = lang_new_vers_pattern (NULL, $1, ldgram_vers_current_lang);
		}
	|	vers_defns ';' VERS_IDENTIFIER
		{
		  $$ = lang_new_vers_pattern ($1, $3, ldgram_vers_current_lang);
		}
	|	vers_defns ';' EXTERN NAME '{'
			{
			  $<name>$ = ldgram_vers_current_lang;
			  ldgram_vers_current_lang = $4;
			}
		vers_defns opt_semicolon '}'
			{
			  $$ = $7;
			  ldgram_vers_current_lang = $<name>6;
			}
	|	EXTERN NAME '{'
			{
			  $<name>$ = ldgram_vers_current_lang;
			  ldgram_vers_current_lang = $2;
			}
		vers_defns opt_semicolon '}'
			{
			  $$ = $5;
			  ldgram_vers_current_lang = $<name>4;
			}
	;

opt_semicolon:
		/* empty */
	|	';'
	;

%%
void
yyerror(arg)
     const char *arg;
{
  if (ldfile_assumed_script)
    einfo (_("%P:%s: file format not recognized; treating as linker script\n"),
	   ldfile_input_filename);
  if (error_index > 0 && error_index < ERROR_NAME_MAX)
     einfo ("%P%F:%S: %s in %s\n", arg, error_names[error_index-1]);
  else
     einfo ("%P%F:%S: %s\n", arg);
}
@


1.7
log
@Merge conflicts, bringing our changes back in:
- extra $(SHELL) and sugar for make (so that files not mode +x still work)
- safer temp file handling
- our W^X binary layout changes in ld
- OpenBSD policy for library file selection in ld
- arm and m88k changes which were not merged in time for official 2.15
- bfd core file handling
- a couple typos

New for 2.15:
- ld(1) and as(1) manpages now generated at build time
- binutils/stabs.c reverted to use our in-tree libiberty for now
- we still use our VIA C3 crypto code over stock binutils, as it recognizes
  more instructions
- new emulations for OpenBSD on mips64 machines, to help OpenBSD/sgi
- relaxed %f# handling in gas on OpenBSD/sparc64 (same as was in 2.14)

Tested on all platforms by various people; special thanks to sturm@@ and
otto@@.
@
text
@d1022 2
@


1.6
log
@Resolve merge conflicts, adjust method of W^X handing (.sh files)
remove testsuites (not useable) remove mmalloc (not part of new binutils).
@
text
@d3 1
a3 1
   2001, 2002 Free Software Foundation, Inc.
d97 1
a97 1
%type <etree> opt_exp_without_type
d145 1
a145 1
%token ALIGNMOD AT PROVIDE
d331 1
a331 1
		  { ldfile_set_output_arch($3); }
d389 3
d633 1
a633 1
		{ region = lang_memory_region_lookup($1); }
d807 2
d836 5
d843 2
a844 1
		opt_at   	{ ldlex_popstate (); ldlex_script (); }
d849 1
a849 1
							      0, 0, 0, $4);
d856 1
a856 1
		  lang_leave_output_section_statement ($14, $11, $13, $12);
d862 1
a862 1
		opt_exp_without_type opt_nocrossrefs opt_at
d866 1
a866 1
			  lang_enter_overlay ($3);
d875 1
a875 1
					      $15, $12, $14, $13);
d932 1
a932 1
	|	{ $$ = "*default*"; }
d1020 2
@


1.5
log
@resolve conflicts.
@
text
@d3 1
a3 1
   2001 Free Software Foundation, Inc.
d32 1
a32 1
#include "ld.h"    
d52 7
a58 8
struct wildcard_spec current_file;
boolean ldgram_want_filename = true;
boolean had_script = false;
boolean force_make_executable = false;

boolean ldgram_in_script = false;
boolean ldgram_had_equals = false;
boolean ldgram_had_keep = false;
d69 6
d78 1
d84 2
a85 2
      boolean filehdr;
      boolean phdrs;
d98 1
a98 1
%type <integer> fill_opt
d100 1
d105 1
a105 1
%token <integer> INT  
d113 1
a113 1
%right <token> PLUSEQ MINUSEQ MULTEQ DIVEQ  '=' LSHIFTEQ RSHIFTEQ   ANDEQ OREQ 
d128 1
a128 1
%token END 
d131 1
a131 1
%token SECTIONS PHDRS SORT
d134 1
d161 1
a161 1
file:	
d179 1
d181 1
a181 1
/* SYNTAX WITHIN AN MRI SCRIPT FILE */  
d201 1
a201 1
		CHIP  exp 
d210 1
a210 1
	|       ENDWORD 
d215 1
a215 1
        |       PUBLIC NAME  exp 
d235 2
a236 2
	|       NAMEWORD NAME 
			{ mri_name($2); }   
d240 1
a240 1
			{ mri_alias($2,0,(int) $4);}
d243 2
a244 2
        |       TRUNCATE INT
		{  mri_truncate((unsigned int) $2); }
d248 3
a250 1
		{ ldfile_open_command_file ($2); } mri_script_lines END
d252 1
a252 1
		{ lang_add_entry ($2, false); }
d322 1
a322 1
		{ ldfile_add_library_path ($3, false); }
d333 3
a335 1
		{ command_line.force_common_definition = true ; }
d343 4
a346 2
	|	INCLUDE filename 
		{ ldfile_open_command_file($2); } ifile_list END
d387 1
a387 1
		{ lang_add_entry ($3, false); }
d412 1
a412 1
			  $$.sorted = false;
d418 1
a418 1
			  $$.sorted = false;
d424 1
a424 1
			  $$.sorted = true;
d430 1
a430 1
			  $$.sorted = true;
a434 2


d442 1
a442 1
			  $$ = tmp;	
d456 9
d467 5
a471 11
			  lang_add_wild ($1.name, $1.sorted,
					 current_file.name,
					 current_file.sorted,
					 ldgram_had_keep, $1.exclude_name_list);
			}
	|	file_NAME_list opt_comma wildcard_spec
			{
			  lang_add_wild ($3.name, $3.sorted,
					 current_file.name,
					 current_file.sorted,
					 ldgram_had_keep, $3.exclude_name_list);
d478 5
a482 2
			  lang_add_wild (NULL, false, $1, false,
					 ldgram_had_keep, NULL);
d484 1
a484 1
        |	'['
d486 1
a486 2
			  current_file.name = NULL;
			  current_file.sorted = false;
d488 1
a488 2
		file_NAME_list ']'
	|	wildcard_spec
d490 1
a490 4
			  current_file = $1;
			  /* '*' matches any file name.  */
			  if (strcmp (current_file.name, "*") == 0)
			    current_file.name = NULL;
a491 1
		'(' file_NAME_list ')'
d497 1
a497 1
			{ ldgram_had_keep = true; }
d499 1
a499 1
			{ ldgram_had_keep = false; }
d506 1
a506 1
 		lang_add_attribute(lang_object_symbols_statement_enum); 
d511 2
a512 2
 		
		  lang_add_attribute(lang_constructors_statement_enum); 
d516 1
a516 1
		  constructors_sorted = true;
d522 1
a522 1
			lang_add_data((int) $1,$3);
d524 2
a525 2
  
	| FILL '(' mustbe_exp ')'
d527 1
a527 5
			  lang_add_fill
			    (exp_get_value_int($3,
					       0,
					       "fill value",
					       lang_first_phase_enum));
d535 1
a535 1
  
d554 2
a555 2
fill_opt:
          '=' mustbe_exp
d557 4
a560 4
		  $$ =	 exp_get_value_int($2,
					   0,
					   "fill value",
					   lang_first_phase_enum);
a561 1
	| 	{ $$ = 0; }
d564 5
a568 1
		
d629 2
a630 2
memory_spec: 		NAME
			{ region = lang_memory_region_lookup($1); }
d633 1
a633 1

d700 1
a700 1
			{ lang_float(true); }
d702 1
a702 1
			{ lang_float(false); }
d704 1
a704 1
		
d790 1
a790 1
			{ $$ = exp_intop($1); }
d804 4
d823 1
a823 1
        |       { $$ = "*default*"; }
d832 1
a832 1
		opt_exp_with_type 
d840 1
a840 1
		statement_list_opt 	
d848 1
d853 1
a853 1
		'{' 
d855 1
a855 1
			  lang_enter_overlay ($3, $5, (int) $4);
d863 2
a864 1
			  lang_leave_overlay ($15, $12, $14, $13);
d936 1
a936 1
		  n->used = false;
d993 1
a993 1
			  "PT_PHDR"
d1005 12
d1030 1
a1030 1
		    $$.filehdr = true;
d1032 1
a1032 1
		    $$.phdrs = true;
d1088 5
a1092 1
		VERS_TAG '{' vers_tag '}' ';'
d1139 1
a1139 1
		  $$ = lang_new_vers_regex (NULL, $1, ldgram_vers_current_lang);
d1143 1
a1143 1
		  $$ = lang_new_vers_regex ($1, $3, ldgram_vers_current_lang);
d1145 10
d1160 1
a1160 1
		vers_defns '}'
d1167 5
d1174 1
a1174 1
yyerror(arg) 
d1176 1
a1176 1
{ 
@


1.4
log
@Help stupid cvs fixing basic conflicts.
@
text
@d1 3
a3 3
/* A YACC grammer to parse a superset of the AT&T linker scripting languaue.
   Copyright (C) 1991, 92, 93, 94, 95, 96, 97, 98, 99, 2000
   Free Software Foundation, Inc.
d36 1
a37 1
#include "ldfile.h"
d622 3
a624 1
	; origin_spec:
d1118 1
@


1.3
log
@Merge the Cygnus 960904 sources
@
text
@d2 2
a3 1
   Copyright (C) 1991, 92, 93, 94, 95, 1996 Free Software Foundation, Inc.
d41 1
d52 1
a52 2

char *current_file;
d59 2
a60 1

d71 3
d85 3
d93 1
d95 3
d123 2
a124 2
%token <token> ALIGN_K BLOCK BIND QUAD LONG SHORT BYTE
%token SECTIONS PHDRS
d133 1
a133 1
%token SIZEOF ADDR LOADADDR MAX MIN
d138 1
a138 1
%type <token> assign_op atype
d140 1
a140 1
%token CHIP LIST SECT ABSOLUTE  LOAD NEWLINE ENDWORD ORDER NAMEWORD
d143 7
d156 1
d176 1
a176 1
		  PUSH_ERROR ("MRI style script");
d195 1
a195 1
			einfo("%P%F: unrecognised keyword in MRI style script '%s'\n",$1);
d273 2
d306 1
d336 1
d378 1
a378 1
file_NAME_list:
d380 3
a382 1
			{ lang_add_wild ($1, current_file); }
d384 3
a386 1
			{ lang_add_wild ("*", current_file); }
d388 30
a417 7
			{ lang_add_wild ("?", current_file); }
	|	file_NAME_list opt_comma NAME
			{ lang_add_wild ($3, current_file); }
	|	file_NAME_list opt_comma '*'
			{ lang_add_wild ("*", current_file); }
	|	file_NAME_list opt_comma '?'
			{ lang_add_wild ("?", current_file); }
d420 31
a450 6
input_section_spec:
		NAME
		{
		lang_add_wild((char *)NULL, $1);
		}
        |	'['
d452 4
a455 1
			current_file = (char *)NULL;
d457 4
a460 3
			file_NAME_list
		']'
	|	NAME
d462 2
a463 1
			current_file = $1;
d465 1
a465 4
		'(' file_NAME_list ')'
	|	'?'
		/* This case is needed because the lexer returns a
                   single question mark as '?' rather than NAME.  */
d467 2
a468 1
			current_file = "?";
d470 2
a471 2
		'(' file_NAME_list ')'
	|	'*'
d473 4
a476 1
			current_file = (char *)NULL;
d481 8
d501 5
d535 2
d628 3
a630 1
	; length_spec:
d637 1
a637 1
	
d640 15
a654 6
		  '(' NAME ')'
			{
			lang_set_flags(&region->flags, $2);
			}
	|
  
d794 6
a799 4
	|	MAX '(' exp ',' exp ')'
			{ $$ = exp_binop (MAX, $3, $5 ); }
	|	MIN '(' exp ',' exp ')'
			{ $$ = exp_binop (MIN, $3, $5 ); }
d803 5
d824 1
a824 1
		memspec_opt phdr_opt fill_opt
d827 1
a827 1
		  lang_leave_output_section_statement ($13, $11, $12);
d841 1
a841 1
		memspec_opt phdr_opt fill_opt
d844 1
a844 1
			  lang_leave_overlay ($14, $12, $13);
d871 1
d1004 1
a1004 1
		    einfo ("%X%P:%S: PHDRS syntax error at `%s'\n", $1);
d1024 96
d1126 1
a1126 1
    einfo ("%P:%s: file format not recognized; treating as linker script\n",
@


1.2
log
@Bring Cygnus versions into the trunk, keeping our local patches
@
text
@d46 1
a46 1
static int typebits;
d78 2
d83 1
d88 1
a88 1
%type  <integer> length
d90 3
d111 1
a111 1
%token <token> ALIGN_K BLOCK QUAD LONG SHORT BYTE
d120 3
a122 2
%token <integer> SIZEOF NEXT ADDR
%token STARTUP HLL SYSLIB FLOAT NOFLOAT
d309 4
d352 2
d356 5
a360 1
			{ lang_add_wild($1, current_file); }
d362 5
a366 1
			{ lang_add_wild($3, current_file); }
d382 8
a389 1
			current_file =$1;
d412 1
a412 1
        | length '(' exp ')'
d417 1
a417 1
	| FILL '(' exp ')'
d583 24
d676 2
d686 4
d700 1
a700 1
		opt_at   	{ ldlex_popstate(); }
d703 3
a705 1
			lang_enter_output_section_statement($1,$3,typebits,0,0,0,$4);
d708 2
a709 1
 		'}' {ldlex_expression();} memspec_opt phdr_opt fill_opt
d711 2
a712 2
		  ldlex_popstate();
		  lang_leave_output_section_statement($13, $11);
d715 28
d746 5
a750 5
	   NOLOAD  { typebits = SEC_NEVER_LOAD; }
	|  DSECT   { typebits = 0; }
	|  COPY    { typebits = 0; }
	|  INFO    { typebits = 0; }
	|  OVERLAY { typebits = 0; }
d755 1
a755 1
  	| 	/* EMPTY */ { typebits = 0; }
d758 16
d775 5
a779 3
opt_exp_with_type:
		exp atype ':'		{ $$ = $1; ;}
	|	atype ':'		{ $$= (etree_type *)NULL;  }
d790 3
d795 8
a802 1
		  lang_section_in_phdr ($3);
d804 18
@


1.1
log
@Initial revision
@
text
@d2 1
a2 1
   Copyright (C) 1991, 1993 Free Software Foundation, Inc.
d71 7
d80 1
a80 1
%type <etree> exp  opt_exp_with_type  mustbe_exp opt_at
d86 1
d106 1
a106 1
%token SECTIONS
d147 3
a149 2
		{    	ldlex_mri_script();
			PUSH_ERROR("MRI style script");
d152 4
a155 2
		{	ldlex_popstate(); 
			POP_ERROR();
d271 1
d648 1
a648 1
 		'}' {ldlex_expression();} memspec_opt fill_opt
d651 1
a651 1
		  lang_leave_output_section_statement($12, $11);
d653 1
a653 2
opt_comma

d680 93
@


1.1.1.1
log
@Initial GNU binutils 2.6 import
@
text
@@


1.1.1.2
log
@Import of binutils, gas, ld & gprof from Cygnus 960609 tree
@
text
@d2 1
a2 1
   Copyright (C) 1991, 92, 93, 94, 95, 1996 Free Software Foundation, Inc.
a70 7
  struct phdr_info
    {
      boolean filehdr;
      boolean phdrs;
      union etree_union *at;
      union etree_union *flags;
    } phdr;
d73 1
a73 1
%type <etree> exp opt_exp_with_type mustbe_exp opt_at phdr_type phdr_val
a78 1
%type <phdr> phdr_qualifiers
d98 1
a98 1
%token SECTIONS PHDRS
d139 2
a140 3
		{
		  ldlex_mri_script ();
		  PUSH_ERROR ("MRI style script");
d143 2
a144 4
		{
		  ldlex_popstate ();
		  mri_draw_tree ();
		  POP_ERROR ();
a259 1
	|	phdrs
d636 1
a636 1
 		'}' {ldlex_expression();} memspec_opt phdr_opt fill_opt
d639 1
a639 1
		  lang_leave_output_section_statement($13, $11);
d641 2
a642 1
		opt_comma
a668 93

phdr_opt:
		/* empty */
	|	phdr_opt ':' NAME
		{
		  lang_section_in_phdr ($3);
		}
	;

phdrs:
		PHDRS '{' phdr_list '}'
	;

phdr_list:
		/* empty */
	|	phdr_list phdr
	;

phdr:
		NAME { ldlex_expression (); }
		  phdr_type phdr_qualifiers { ldlex_popstate (); }
		  ';'
		{
		  lang_new_phdr ($1, $3, $4.filehdr, $4.phdrs, $4.at,
				 $4.flags);
		}
	;

phdr_type:
		exp
		{
		  $$ = $1;

		  if ($1->type.node_class == etree_name
		      && $1->type.node_code == NAME)
		    {
		      const char *s;
		      unsigned int i;
		      static const char * const phdr_types[] =
			{
			  "PT_NULL", "PT_LOAD", "PT_DYNAMIC",
			  "PT_INTERP", "PT_NOTE", "PT_SHLIB",
			  "PT_PHDR"
			};

		      s = $1->name.name;
		      for (i = 0;
			   i < sizeof phdr_types / sizeof phdr_types[0];
			   i++)
			if (strcmp (s, phdr_types[i]) == 0)
			  {
			    $$ = exp_intop (i);
			    break;
			  }
		    }
		}
	;

phdr_qualifiers:
		/* empty */
		{
		  memset (&$$, 0, sizeof (struct phdr_info));
		}
	|	NAME phdr_val phdr_qualifiers
		{
		  $$ = $3;
		  if (strcmp ($1, "FILEHDR") == 0 && $2 == NULL)
		    $$.filehdr = true;
		  else if (strcmp ($1, "PHDRS") == 0 && $2 == NULL)
		    $$.phdrs = true;
		  else if (strcmp ($1, "FLAGS") == 0 && $2 != NULL)
		    $$.flags = $2;
		  else
		    einfo ("%X%P:%S: PHDRS syntax error at `%s'\n", $1);
		}
	|	AT '(' exp ')' phdr_qualifiers
		{
		  $$ = $5;
		  $$.at = $3;
		}
	;

phdr_val:
		/* empty */
		{
		  $$ = NULL;
		}
	| '(' exp ')'
		{
		  $$ = $2;
		}
	;

@


1.1.1.3
log
@Import of binutils, gas, ld & gprof from Cygnus 960904 tree
@
text
@d46 1
a46 1
static enum section_type sectype;
a77 2
  struct lang_nocrossref *nocrossref;
  struct lang_output_section_phdr_list *section_phdr;
a80 1
%type <etree> opt_exp_without_type
d85 1
a85 1
%type <integer> length
a86 3
%type <nocrossref> nocrossref_list
%type <section_phdr> phdr_opt
%type <integer> opt_nocrossrefs
d105 1
a105 1
%token <token> ALIGN_K BLOCK BIND QUAD LONG SHORT BYTE
d114 2
a115 3
%token <integer> NEXT
%token SIZEOF ADDR LOADADDR MAX MIN
%token STARTUP HLL SYSLIB FLOAT NOFLOAT NOCROSSREFS
a301 4
	|	NOCROSSREFS '(' nocrossref_list ')'
		{
		  lang_add_nocrossref ($3);
		}
a340 2
/* The '*' and '?' cases are there because the lexer returns them as
   separate tokens rather than as NAME.  */
d343 1
a343 5
			{ lang_add_wild ($1, current_file); }
	|	'*'
			{ lang_add_wild ("*", current_file); }
	|	'?'
			{ lang_add_wild ("?", current_file); }
d345 1
a345 5
			{ lang_add_wild ($3, current_file); }
	|	file_NAME_list opt_comma '*'
			{ lang_add_wild ("*", current_file); }
	|	file_NAME_list opt_comma '?'
			{ lang_add_wild ("?", current_file); }
d361 1
a361 8
			current_file = $1;
			}
		'(' file_NAME_list ')'
	|	'?'
		/* This case is needed because the lexer returns a
                   single question mark as '?' rather than NAME.  */
			{
			current_file = "?";
d384 1
a384 1
        | length '(' mustbe_exp ')'
d389 1
a389 1
	| FILL '(' mustbe_exp ')'
a554 24
nocrossref_list:
		/* empty */
		{
		  $$ = NULL;
		}
	|	NAME nocrossref_list
		{
		  struct lang_nocrossref *n;

		  n = (struct lang_nocrossref *) xmalloc (sizeof *n);
		  n->name = $1;
		  n->next = $2;
		  $$ = n;
		}
	|	NAME ',' nocrossref_list
		{
		  struct lang_nocrossref *n;

		  n = (struct lang_nocrossref *) xmalloc (sizeof *n);
		  n->name = $1;
		  n->next = $3;
		  $$ = n;
		}
	;
a623 2
	|	LOADADDR '(' NAME ')'
			{ $$ = exp_nameop(LOADADDR,$3); }
a631 4
	|	MAX '(' exp ',' exp ')'
			{ $$ = exp_binop (MAX, $3, $5 ); }
	|	MIN '(' exp ',' exp ')'
			{ $$ = exp_binop (MIN, $3, $5 ); }
d642 1
a642 1
		opt_at   	{ ldlex_popstate (); ldlex_script (); }
d645 1
a645 3
			  lang_enter_output_section_statement($1, $3,
							      sectype,
							      0, 0, 0, $4);
d648 1
a648 2
 		'}' { ldlex_popstate (); ldlex_expression (); }
		memspec_opt phdr_opt fill_opt
d650 2
a651 2
		  ldlex_popstate ();
		  lang_leave_output_section_statement ($13, $11, $12);
a653 28
	|	OVERLAY
			{ ldlex_expression (); }
		opt_exp_without_type opt_nocrossrefs opt_at
			{ ldlex_popstate (); ldlex_script (); }
		'{' 
			{
			  lang_enter_overlay ($3, $5, (int) $4);
			}
		overlay_section
		'}'
			{ ldlex_popstate (); ldlex_expression (); }
		memspec_opt phdr_opt fill_opt
			{
			  ldlex_popstate ();
			  lang_leave_overlay ($14, $12, $13);
			}
		opt_comma
	|	/* The GROUP case is just enough to support the gcc
		   svr3.ifile script.  It is not intended to be full
		   support.  I'm not even sure what GROUP is supposed
		   to mean.  */
		GROUP { ldlex_expression (); }
		opt_exp_with_type
		{
		  ldlex_popstate ();
		  lang_add_assignment (exp_assop ('=', ".", $3));
		}
		'{' sec_or_group_p1 '}'
d657 5
a661 5
	   NOLOAD  { sectype = noload_section; }
	|  DSECT   { sectype = dsect_section; }
	|  COPY    { sectype = copy_section; }
	|  INFO    { sectype = info_section; }
	|  OVERLAY { sectype = overlay_section; }
d666 1
a666 1
  	| 	/* EMPTY */ { sectype = normal_section; }
d669 1
d671 2
a672 21
		exp atype ':'		{ $$ = $1; }
	|	atype ':'		{ $$ = (etree_type *)NULL;  }
	|	/* The BIND cases are to support the gcc svr3.ifile
		   script.  They aren't intended to implement full
		   support for the BIND keyword.  I'm not even sure
		   what BIND is supposed to mean.  */
		BIND '(' exp ')' atype ':' { $$ = $3; }
	|	BIND '(' exp ')' BLOCK '(' exp ')' atype ':'
		{ $$ = $3; }
	;

opt_exp_without_type:
		exp ':'		{ $$ = $1; }
	|	':'		{ $$ = (etree_type *) NULL;  }
	;

opt_nocrossrefs:
		/* empty */
			{ $$ = 0; }
	|	NOCROSSREFS
			{ $$ = 1; }
a682 3
		{
		  $$ = NULL;
		}
d685 1
a685 8
		  struct lang_output_section_phdr_list *n;

		  n = ((struct lang_output_section_phdr_list *)
		       xmalloc (sizeof *n));
		  n->name = $3;
		  n->used = false;
		  n->next = $1;
		  $$ = n;
a686 18
	;

overlay_section:
		/* empty */
	|	overlay_section
		NAME
			{
			  ldlex_script ();
			  lang_enter_overlay_section ($2);
			}
		'{' statement_list_opt '}'
			{ ldlex_popstate (); ldlex_expression (); }
		phdr_opt fill_opt
			{
			  ldlex_popstate ();
			  lang_leave_overlay_section ($9, $8);
			}
		opt_comma
@


1.1.1.4
log
@Import of binutils-2.8.1 from Cygnus/FSF
@
text
@d2 1
a2 1
   Copyright (C) 1991, 92, 93, 94, 95, 96, 1997 Free Software Foundation, Inc.
a79 3
  struct bfd_elf_version_deps *deflist;
  struct bfd_elf_version_expr *versyms;
  struct bfd_elf_version_tree *versnode;
a130 5
%token <name> VERS_TAG VERS_IDENTIFIER
%token GLOBAL LOCAL VERSION INPUT_VERSION_SCRIPT
%type <versyms> vers_defns
%type <versnode> vers_tag
%type <deflist> verdep
a136 1
	|	INPUT_VERSION_SCRIPT version_script_file
a283 1
	|	version
a904 87
		}
	;

/* This syntax is used within an external version script file.  */

version_script_file:
		{
		  ldlex_version_file ();
		  PUSH_ERROR ("VERSION script");
		}
		vers_nodes
		{
		  ldlex_popstate ();
		  POP_ERROR ();
		}
	;

/* This is used within a normal linker script file.  */

version:
		{
		  ldlex_version_script ();
		}
		VERSION '{' vers_nodes '}'
		{
		  ldlex_popstate ();
		}
	;

vers_nodes:
		vers_node
	|	vers_nodes vers_node
	;

vers_node:
		VERS_TAG '{' vers_tag '}' ';'
		{
		  lang_register_vers_node ($1, $3, NULL);
		}
	|	VERS_TAG '{' vers_tag '}' verdep ';'
		{
		  lang_register_vers_node ($1, $3, $5);
		}
	;

verdep:
		VERS_TAG
		{
		  $$ = lang_add_vers_depend (NULL, $1);
		}
	|	verdep VERS_TAG
		{
		  $$ = lang_add_vers_depend ($1, $2);
		}
	;

vers_tag:
		/* empty */
		{
		  $$ = lang_new_vers_node (NULL, NULL);
		}
	|	vers_defns ';'
		{
		  $$ = lang_new_vers_node ($1, NULL);
		}
	|	GLOBAL ':' vers_defns ';'
		{
		  $$ = lang_new_vers_node ($3, NULL);
		}
	|	LOCAL ':' vers_defns ';'
		{
		  $$ = lang_new_vers_node (NULL, $3);
		}
	|	GLOBAL ':' vers_defns ';' LOCAL ':' vers_defns ';'
		{
		  $$ = lang_new_vers_node ($3, $7);
		}
	;

vers_defns:
		VERS_IDENTIFIER
		{
		  $$ = lang_new_vers_regex (NULL, $1);
		}
	|	vers_defns ';' VERS_IDENTIFIER
		{
		  $$ = lang_new_vers_regex ($1, $3);
@


1.1.1.5
log
@Import binutils-2.10
- only the binutils package (no gdb here)
- don't import libiberty and texinfo, they are elsewhere
- remove all .info* generated files
@
text
@d2 1
a2 2
   Copyright (C) 1991, 92, 93, 94, 95, 96, 97, 98, 99, 2000
   Free Software Foundation, Inc.
a39 1
#include "ldctor.h"
d50 2
a51 1
struct wildcard_spec current_file;
d58 1
a58 2
boolean ldgram_had_keep = false;
char *ldgram_vers_current_lang = NULL;
a68 3
  const char *cname;
  struct wildcard_spec wildcard;
  struct name_list *name_list;
a87 1
%type <name_list> exclude_name_list
a88 3
%type <name> memspec_at_opt
%type <cname> wildcard_name
%type <wildcard> wildcard_spec
d114 2
a115 2
%token <token> ALIGN_K BLOCK BIND QUAD SQUAD LONG SHORT BYTE
%token SECTIONS PHDRS SORT
d124 1
a124 1
%token SIZEOF ADDR LOADADDR MAX_K MIN_K
d129 1
a129 1
%type <token> assign_op atype attributes_opt
d131 1
a131 1
%token CHIP LIST SECT ABSOLUTE  LOAD NEWLINE ENDWORD ORDER NAMEWORD ASSERT_K
d135 1
a135 3
%token GLOBAL LOCAL VERSIONK INPUT_VERSION_SCRIPT
%token KEEP
%token EXCLUDE_FILE
d165 1
a165 1
		  PUSH_ERROR (_("MRI style script"));
d184 1
a184 1
			einfo(_("%P%F: unrecognised keyword in MRI style script '%s'\n"),$1);
a261 2
	| extern_name_list NAME
			{ ldlang_add_undef ($2); }
a322 1
	|	EXTERN '(' extern_name_list ')'
d364 1
a364 1
wildcard_name:
d366 1
a366 3
			{
			  $$ = $1;
			}
d368 1
a368 3
			{
			  $$ = "*";
			}
d370 7
a376 3
			{
			  $$ = "?";
			}
d379 6
a384 2
wildcard_spec:
		wildcard_name
d386 1
a386 3
			  $$.name = $1;
			  $$.sorted = false;
			  $$.exclude_name_list = NULL;
d388 3
a390 1
	| 	EXCLUDE_FILE '(' exclude_name_list ')' wildcard_name
d392 1
a392 3
			  $$.name = $5;
			  $$.sorted = false;
			  $$.exclude_name_list = $3;
d394 4
a397 1
	|	SORT '(' wildcard_name ')'
d399 1
a399 3
			  $$.name = $3;
			  $$.sorted = true;
			  $$.exclude_name_list = NULL;
d401 2
a402 39
	|	SORT '(' EXCLUDE_FILE '(' exclude_name_list ')' wildcard_name ')'
			{
			  $$.name = $7;
			  $$.sorted = true;
			  $$.exclude_name_list = $5;
			}
	;



exclude_name_list:
		exclude_name_list wildcard_name
			{
			  struct name_list *tmp;
			  tmp = (struct name_list *) xmalloc (sizeof *tmp);
			  tmp->name = $2;
			  tmp->next = $1;
			  $$ = tmp;	
			}
	|
		wildcard_name
			{
			  struct name_list *tmp;
			  tmp = (struct name_list *) xmalloc (sizeof *tmp);
			  tmp->name = $1;
			  tmp->next = NULL;
			  $$ = tmp;
			}
	;

file_NAME_list:
		wildcard_spec
			{
			  lang_add_wild ($1.name, $1.sorted,
					 current_file.name,
					 current_file.sorted,
					 ldgram_had_keep, $1.exclude_name_list);
			}
	|	file_NAME_list opt_comma wildcard_spec
d404 1
a404 25
			  lang_add_wild ($3.name, $3.sorted,
					 current_file.name,
					 current_file.sorted,
					 ldgram_had_keep, $3.exclude_name_list);
			}
	;

input_section_spec_no_keep:
		NAME
			{
			  lang_add_wild (NULL, false, $1, false,
					 ldgram_had_keep, NULL);
			}
        |	'['
			{
			  current_file.name = NULL;
			  current_file.sorted = false;
			}
		file_NAME_list ']'
	|	wildcard_spec
			{
			  current_file = $1;
			  /* '*' matches any file name.  */
			  if (strcmp (current_file.name, "*") == 0)
			    current_file.name = NULL;
a408 8
input_section_spec:
		input_section_spec_no_keep
	|	KEEP '('
			{ ldgram_had_keep = true; }
		input_section_spec_no_keep ')'
			{ ldgram_had_keep = false; }
	;

a420 5
	| SORT '(' CONSTRUCTORS ')'
		{
		  constructors_sorted = true;
		  lang_add_attribute (lang_constructors_statement_enum);
		}
a449 2
	|	SQUAD
			{ $$ = $1; }
d541 1
a541 3
	;

length_spec:
d548 1
a548 1
	;
d551 6
a556 15
		/* empty */
		  { /* dummy action to avoid bison 1.25 error message */ }
	|	'(' attributes_list ')'
	;

attributes_list:
		attributes_string
	|	attributes_list attributes_string
	;

attributes_string:
		NAME
		  { lang_set_flags (region, $1, 0); }
	|	'!' NAME
		  { lang_set_flags (region, $2, 1); }
d696 4
a699 6
	|	MAX_K '(' exp ',' exp ')'
			{ $$ = exp_binop (MAX_K, $3, $5 ); }
	|	MIN_K '(' exp ',' exp ')'
			{ $$ = exp_binop (MIN_K, $3, $5 ); }
	|	ASSERT_K '(' exp ',' NAME ')'
			{ $$ = exp_assert ($3, $5); }
a702 5
memspec_at_opt:
                AT '>' NAME { $$ = $3; }
        |       { $$ = "*default*"; }
        ;

d719 1
a719 1
		memspec_opt memspec_at_opt phdr_opt fill_opt
d722 1
a722 1
		  lang_leave_output_section_statement ($14, $11, $13, $12);
d736 1
a736 1
		memspec_opt memspec_at_opt phdr_opt fill_opt
d739 1
a739 1
			  lang_leave_overlay ($15, $12, $14, $13);
a765 1
  	| 	'(' ')' { sectype = normal_section; }
d898 1
a898 1
		    einfo (_("%X%P:%S: PHDRS syntax error at `%s'\n"), $1);
d923 1
a923 1
		  PUSH_ERROR (_("VERSION script"));
d938 1
a938 1
		VERSIONK '{' vers_nodes '}'
d997 1
a997 1
		  $$ = lang_new_vers_regex (NULL, $1, ldgram_vers_current_lang);
d1001 1
a1001 1
		  $$ = lang_new_vers_regex ($1, $3, ldgram_vers_current_lang);
a1002 9
	|	EXTERN NAME '{'
			{
			  $<name>$ = ldgram_vers_current_lang;
			  ldgram_vers_current_lang = $2;
			}
		vers_defns '}'
			{
			  ldgram_vers_current_lang = $<name>4;
			}
d1011 1
a1011 1
    einfo (_("%P:%s: file format not recognized; treating as linker script\n"),
@


1.1.1.6
log
@Import binutils-2.11.2
- only the binutils package (no gdb here)
- don't import libiberty and texinfo, they are elsewhere
- remove all .info* generated files
@
text
@d1 3
a3 3
/* A YACC grammar to parse a superset of the AT&T linker scripting language.
   Copyright 1991, 1992, 1993, 1994, 1995, 1996, 1997, 1998, 1999, 2000,
   2001 Free Software Foundation, Inc.
d36 1
a37 1
#include "ldemul.h"
d622 1
a622 3
	;

origin_spec:
a1115 1
			  $$ = $5;
@


1.1.1.7
log
@import binutils 2.14 (excluding testsuites, .info files, and .po files)
@
text
@d3 1
a3 1
   2001, 2002 Free Software Foundation, Inc.
d32 1
a32 1
#include "ld.h"
d52 8
a59 7
bfd_boolean ldgram_want_filename = TRUE;
FILE *saved_script_handle = NULL;
bfd_boolean force_make_executable = FALSE;

bfd_boolean ldgram_in_script = FALSE;
bfd_boolean ldgram_had_equals = FALSE;
bfd_boolean ldgram_had_keep = FALSE;
a69 6
  struct big_int
    {
      bfd_vma integer;
      char *str;
    } bigint;
  fill_type *fill;
a72 1
  struct wildcard_list *wildcard_list;
d78 2
a79 2
      bfd_boolean filehdr;
      bfd_boolean phdrs;
d92 1
a92 1
%type <fill> fill_opt fill_exp
a93 1
%type <wildcard_list> file_NAME_list
d98 1
a98 1
%token <bigint> INT
d106 1
a106 1
%right <token> PLUSEQ MINUSEQ MULTEQ DIVEQ  '=' LSHIFTEQ RSHIFTEQ   ANDEQ OREQ
d121 1
a121 1
%token END
d124 1
a124 1
%token SECTIONS PHDRS SORT DATA_SEGMENT_ALIGN DATA_SEGMENT_END
a126 1
%token INHIBIT_COMMON_ALLOCATION
d153 1
a153 1
file:
a170 1
	;
d172 1
a172 1
/* SYNTAX WITHIN AN MRI SCRIPT FILE */
d192 1
a192 1
		CHIP  exp
d201 1
a201 1
	|       ENDWORD
d206 1
a206 1
        |       PUBLIC NAME  exp
d226 2
a227 2
	|       NAMEWORD NAME
			{ mri_name($2); }
d231 1
a231 1
			{ mri_alias ($2, 0, (int) $4.integer); }
d234 2
a235 2
	|	TRUNCATE INT
		{ mri_truncate ((unsigned int) $2.integer); }
d239 1
a239 3
		{ ldlex_script (); ldfile_open_command_file($2); }
		mri_script_lines END
		{ ldlex_popstate (); }
d241 1
a241 1
		{ lang_add_entry ($2, FALSE); }
d311 1
a311 1
		{ ldfile_add_library_path ($3, FALSE); }
d322 1
a322 3
		{ command_line.force_common_definition = TRUE ; }
	|	INHIBIT_COMMON_ALLOCATION
		{ command_line.inhibit_common_definition = TRUE ; }
d330 2
a331 4
	|	INCLUDE filename
		{ ldlex_script (); ldfile_open_command_file($2); }
		ifile_list END
		{ ldlex_popstate (); }
d372 1
a372 1
		{ lang_add_entry ($3, FALSE); }
d397 1
a397 1
			  $$.sorted = FALSE;
d403 1
a403 1
			  $$.sorted = FALSE;
d409 1
a409 1
			  $$.sorted = TRUE;
d415 1
a415 1
			  $$.sorted = TRUE;
d420 2
d429 1
a429 1
			  $$ = tmp;
a442 9
		file_NAME_list opt_comma wildcard_spec
			{
			  struct wildcard_list *tmp;
			  tmp = (struct wildcard_list *) xmalloc (sizeof *tmp);
			  tmp->next = $1;
			  tmp->spec = $3;
			  $$ = tmp;
			}
	|
d445 11
a455 5
			  struct wildcard_list *tmp;
			  tmp = (struct wildcard_list *) xmalloc (sizeof *tmp);
			  tmp->next = NULL;
			  tmp->spec = $1;
			  $$ = tmp;
d462 2
a463 5
			  struct wildcard_spec tmp;
			  tmp.name = $1;
			  tmp.exclude_name_list = NULL;
			  tmp.sorted = FALSE;
			  lang_add_wild (&tmp, NULL, ldgram_had_keep);
d465 1
a465 1
        |	'[' file_NAME_list ']'
d467 2
a468 1
			  lang_add_wild (NULL, $2, ldgram_had_keep);
d470 2
a471 1
	|	wildcard_spec '(' file_NAME_list ')'
d473 4
a476 1
			  lang_add_wild (&$1, $3, ldgram_had_keep);
d478 1
d484 1
a484 1
			{ ldgram_had_keep = TRUE; }
d486 1
a486 1
			{ ldgram_had_keep = FALSE; }
d493 1
a493 1
 		lang_add_attribute(lang_object_symbols_statement_enum);
d498 2
a499 2

		  lang_add_attribute(lang_constructors_statement_enum);
d503 1
a503 1
		  constructors_sorted = TRUE;
d509 1
a509 1
			  lang_add_data ((int) $1, $3);
d511 2
a512 2

	| FILL '(' fill_exp ')'
d514 5
a518 1
			  lang_add_fill ($3);
d526 1
a526 1

d545 2
a546 2
fill_exp:
	mustbe_exp
d548 4
a551 4
		  $$ = exp_get_fill ($1,
				     0,
				     "fill value",
				     lang_first_phase_enum);
d553 1
d556 1
a556 5
fill_opt:
	  '=' fill_exp
		{ $$ = $2; }
	| 	{ $$ = (fill_type *) 0; }
	;
d617 2
a618 2
memory_spec: 	NAME
		{ region = lang_memory_region_lookup($1); }
d621 1
a621 1
		{}
d688 1
a688 1
			{ lang_float(TRUE); }
d690 1
a690 1
			{ lang_float(FALSE); }
d692 1
a692 1

d778 1
a778 1
			{ $$ = exp_bigintop ($1.integer, $1.str); }
a791 4
	|	DATA_SEGMENT_ALIGN '(' exp ',' exp ')'
			{ $$ = exp_binop (DATA_SEGMENT_ALIGN, $3, $5); }
	|	DATA_SEGMENT_END '(' exp ')'
			{ $$ = exp_unop(DATA_SEGMENT_END, $3); }
d807 1
a807 1
        |       { $$ = 0; }
d816 1
a816 1
		opt_exp_with_type
d824 1
a824 1
		statement_list_opt
a831 1
		{}
d836 1
a836 1
		'{'
d838 1
a838 1
			  lang_enter_overlay ($3);
d846 1
a846 2
			  lang_leave_overlay ($5, (int) $4,
					      $15, $12, $14, $13);
d918 1
a918 1
		  n->used = FALSE;
d975 1
a975 1
			  "PT_PHDR", "PT_TLS"
a986 12
		      if (i == sizeof phdr_types / sizeof phdr_types[0])
			{
			  if (strcmp (s, "PT_GNU_EH_FRAME") == 0)
			    $$ = exp_intop (0x6474e550);
			  else
			    {
			      einfo (_("\
%X%P:%S: unknown phdr type `%s' (try integer literal)\n"),
				     s);
			      $$ = exp_intop (0);
			    }
			}
d1000 1
a1000 1
		    $$.filehdr = TRUE;
d1002 1
a1002 1
		    $$.phdrs = TRUE;
d1058 1
a1058 5
		'{' vers_tag '}' ';'
		{
		  lang_register_vers_node (NULL, $2, NULL);
		}
	|	VERS_TAG '{' vers_tag '}' ';'
d1105 1
a1105 1
		  $$ = lang_new_vers_pattern (NULL, $1, ldgram_vers_current_lang);
d1109 1
a1109 1
		  $$ = lang_new_vers_pattern ($1, $3, ldgram_vers_current_lang);
a1110 10
	|	vers_defns ';' EXTERN NAME '{'
			{
			  $<name>$ = ldgram_vers_current_lang;
			  ldgram_vers_current_lang = $4;
			}
		vers_defns opt_semicolon '}'
			{
			  $$ = $7;
			  ldgram_vers_current_lang = $<name>6;
			}
d1116 1
a1116 1
		vers_defns opt_semicolon '}'
a1122 5
opt_semicolon:
		/* empty */
	|	';'
	;

d1125 1
a1125 1
yyerror(arg)
d1127 1
a1127 1
{
@


1.1.1.8
log
@Binutils 2.15, with testsuites removed, and without gdb and libiberty.
@
text
@d3 1
a3 1
   2001, 2002, 2003 Free Software Foundation, Inc.
d97 1
a97 1
%type <etree> opt_exp_without_type opt_subalign
d145 1
a145 1
%token ALIGNMOD AT SUBALIGN PROVIDE
d331 1
a331 1
		  { ldfile_set_output_arch ($3, bfd_arch_unknown); }
a388 3
	|	ASSERT_K  {ldlex_expression ();} '(' exp ',' NAME ')'
		{ ldlex_popstate ();
		  lang_add_assignment (exp_assert ($4, $6)); }
d630 1
a630 1
		{ region = lang_memory_region_lookup ($1, TRUE); }
a803 2
	|	ALIGN_K '(' exp ',' exp ')'
			{ $$ = exp_binop(ALIGN_K,$3,$5); }
a830 5
opt_subalign:
		SUBALIGN '(' exp ')' { $$ = $3; }
	|	{ $$ = 0; }
	;

d833 1
a833 2
		opt_at
		opt_subalign	{ ldlex_popstate (); ldlex_script (); }
d838 1
a838 1
							      0, $5, $4);
d845 1
a845 1
		  lang_leave_output_section_statement ($15, $12, $14, $13);
d851 1
a851 1
		opt_exp_without_type opt_nocrossrefs opt_at opt_subalign
d855 1
a855 1
			  lang_enter_overlay ($3, $6);
d864 1
a864 1
					      $16, $13, $15, $14);
d921 1
a921 1
	|	{ $$ = DEFAULT_MEMORY_REGION; }
a1008 2
			  else if (strcmp (s, "PT_GNU_STACK") == 0)
			    $$ = exp_intop (0x6474e551);
@


