head	1.1;
branch	1.1.1;
access;
symbols
	OPENBSD_6_2:1.1.1.4.0.54
	OPENBSD_6_2_BASE:1.1.1.4
	OPENBSD_6_1:1.1.1.4.0.52
	OPENBSD_6_1_BASE:1.1.1.4
	OPENBSD_6_0:1.1.1.4.0.48
	OPENBSD_6_0_BASE:1.1.1.4
	OPENBSD_5_9:1.1.1.4.0.44
	OPENBSD_5_9_BASE:1.1.1.4
	OPENBSD_5_8:1.1.1.4.0.46
	OPENBSD_5_8_BASE:1.1.1.4
	OPENBSD_5_7:1.1.1.4.0.38
	OPENBSD_5_7_BASE:1.1.1.4
	OPENBSD_5_6:1.1.1.4.0.42
	OPENBSD_5_6_BASE:1.1.1.4
	OPENBSD_5_5:1.1.1.4.0.40
	OPENBSD_5_5_BASE:1.1.1.4
	OPENBSD_5_4:1.1.1.4.0.36
	OPENBSD_5_4_BASE:1.1.1.4
	OPENBSD_5_3:1.1.1.4.0.34
	OPENBSD_5_3_BASE:1.1.1.4
	OPENBSD_5_2:1.1.1.4.0.32
	OPENBSD_5_2_BASE:1.1.1.4
	OPENBSD_5_1_BASE:1.1.1.4
	OPENBSD_5_1:1.1.1.4.0.30
	OPENBSD_5_0:1.1.1.4.0.28
	OPENBSD_5_0_BASE:1.1.1.4
	OPENBSD_4_9:1.1.1.4.0.26
	OPENBSD_4_9_BASE:1.1.1.4
	OPENBSD_4_8:1.1.1.4.0.24
	OPENBSD_4_8_BASE:1.1.1.4
	OPENBSD_4_7:1.1.1.4.0.20
	OPENBSD_4_7_BASE:1.1.1.4
	OPENBSD_4_6:1.1.1.4.0.22
	OPENBSD_4_6_BASE:1.1.1.4
	OPENBSD_4_5:1.1.1.4.0.18
	OPENBSD_4_5_BASE:1.1.1.4
	OPENBSD_4_4:1.1.1.4.0.16
	OPENBSD_4_4_BASE:1.1.1.4
	OPENBSD_4_3:1.1.1.4.0.14
	OPENBSD_4_3_BASE:1.1.1.4
	OPENBSD_4_2:1.1.1.4.0.12
	OPENBSD_4_2_BASE:1.1.1.4
	OPENBSD_4_1:1.1.1.4.0.10
	OPENBSD_4_1_BASE:1.1.1.4
	OPENBSD_4_0:1.1.1.4.0.8
	OPENBSD_4_0_BASE:1.1.1.4
	OPENBSD_3_9:1.1.1.4.0.6
	OPENBSD_3_9_BASE:1.1.1.4
	OPENBSD_3_8:1.1.1.4.0.4
	OPENBSD_3_8_BASE:1.1.1.4
	OPENBSD_3_7:1.1.1.4.0.2
	OPENBSD_3_7_BASE:1.1.1.4
	BINUTILS_2_15:1.1.1.4
	OPENBSD_3_6:1.1.1.3.0.2
	OPENBSD_3_6_BASE:1.1.1.3
	BINUTILS-2_14:1.1.1.3
	OPENBSD_3_5:1.1.1.2.0.8
	OPENBSD_3_5_BASE:1.1.1.2
	OPENBSD_3_4:1.1.1.2.0.6
	OPENBSD_3_4_BASE:1.1.1.2
	OPENBSD_3_3:1.1.1.2.0.4
	OPENBSD_3_3_BASE:1.1.1.2
	OPENBSD_3_2:1.1.1.2.0.2
	OPENBSD_3_2_BASE:1.1.1.2
	binutils-2_11_2:1.1.1.2
	OPENBSD_3_1:1.1.1.1.0.8
	OPENBSD_3_1_BASE:1.1.1.1
	OPENBSD_3_0:1.1.1.1.0.6
	OPENBSD_3_0_BASE:1.1.1.1
	BINUTILS-2_10_1:1.1.1.1
	OPENBSD_2_9:1.1.1.1.0.4
	OPENBSD_2_9_BASE:1.1.1.1
	OPENBSD_2_8:1.1.1.1.0.2
	OPENBSD_2_8_BASE:1.1.1.1
	BINUTILS-2_10:1.1.1.1
	FSF:1.1.1;
locks; strict;
comment	@ * @;


1.1
date	2000.09.12.14.48.05;	author espie;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	2000.09.12.14.48.05;	author espie;	state Exp;
branches;
next	1.1.1.2;

1.1.1.2
date	2002.05.13.14.00.16;	author fgsch;	state Exp;
branches;
next	1.1.1.3;

1.1.1.3
date	2004.05.17.20.42.48;	author drahn;	state Exp;
branches;
next	1.1.1.4;

1.1.1.4
date	2004.11.02.20.23.19;	author miod;	state Exp;
branches;
next	;


desc
@@


1.1
log
@Initial revision
@
text
@/* deffile.h - header for .DEF file parser
   Copyright (C) 1998, 1999 Free Software Foundation, Inc.
   Written by DJ Delorie dj@@cygnus.com

   This file is part of GLD, the Gnu Linker.

   GLD is free software; you can redistribute it and/or modify
   it under the terms of the GNU General Public License as published by
   the Free Software Foundation; either version 2, or (at your option)
   any later version.

   GLD is distributed in the hope that it will be useful,
   but WITHOUT ANY WARRANTY; without even the implied warranty of
   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
   GNU General Public License for more details.

   You should have received a copy of the GNU General Public License
   along with GLD; see the file COPYING.  If not, write to the Free
   Software Foundation, 59 Temple Place - Suite 330, Boston, MA
   02111-1307, USA.  */

#ifndef DEFFILE_H
#define DEFFILE_H

#include "ansidecl.h"

/* DEF storage definitions.  Note that any ordinal may be zero, and
   any pointer may be NULL, if not defined by the DEF file. */

typedef struct def_file_section
  {
    char *name;			/* always set */
    char *class;		/* may be NULL */
    char flag_read, flag_write, flag_execute, flag_shared;
  }
def_file_section;

typedef struct def_file_export
  {
    char *name;			/* always set */
    char *internal_name;	/* always set, may == name */
    int ordinal;		/* -1 if not specified */
    int hint;
    char flag_private, flag_constant, flag_noname, flag_data;
  }
def_file_export;

typedef struct def_file_module
  {
    struct def_file_module *next;
    void *user_data;
    char name[1]; /* extended via malloc */
  }
def_file_module;

typedef struct def_file_import
  {
    char *internal_name;	/* always set */
    def_file_module *module;	/* always set */
    char *name;			/* may be NULL; either this or ordinal will be set */
    int ordinal;		/* may be -1 */
  }
def_file_import;

typedef struct def_file
  {

    /* from the NAME or LIBRARY command */
    char *name;
    int is_dll;			/* -1 if NAME/LIBRARY not given */
    bfd_vma base_address;	/* (bfd_vma)(-1) if unspecified */

    /* from the DESCRIPTION command */
    char *description;

    /* from the STACK/HEAP command, -1 if unspecified */
    int stack_reserve, stack_commit;
    int heap_reserve, heap_commit;

    /* from the SECTION/SEGMENT commands */
    int num_section_defs;
    def_file_section *section_defs;

    /* from the EXPORTS commands */
    int num_exports;
    def_file_export *exports;

    /* used by imports for module names */
    def_file_module *modules;

    /* from the IMPORTS commands */
    int num_imports;
    def_file_import *imports;

    /* from the VERSION command, -1 if not specified */
    int version_major, version_minor;
  }
def_file;

extern def_file *def_file_empty PARAMS ((void));

/* add_to may be NULL.  If not, this .def is appended to it */
extern def_file *def_file_parse PARAMS ((const char *_filename,
					 def_file * _add_to));

extern void def_file_free PARAMS ((def_file * _def));

extern def_file_export *def_file_add_export PARAMS ((def_file * _def,
						     const char *_name,
						 const char *_internal_name,
						     int _ordinal));

extern def_file_import *def_file_add_import PARAMS ((def_file * _def,
						     const char *_name,
						     const char *_from,
						     int _ordinal,
					       const char *_imported_name));

extern void def_file_add_directive PARAMS ((def_file * _def,
					    const char *param,
					    int len));

#ifdef DEF_FILE_PRINT
extern void def_file_print PARAMS ((FILE * _file,
				    def_file * _def));
#endif

#endif /* DEFFILE_H */
@


1.1.1.1
log
@Import binutils-2.10
- only the binutils package (no gdb here)
- don't import libiberty and texinfo, they are elsewhere
- remove all .info* generated files
@
text
@@


1.1.1.2
log
@Import binutils-2.11.2
- only the binutils package (no gdb here)
- don't import libiberty and texinfo, they are elsewhere
- remove all .info* generated files
@
text
@d2 1
a2 1
   Copyright 1998, 1999, 2000 Free Software Foundation, Inc.
d28 1
a28 1
   any pointer may be NULL, if not defined by the DEF file.  */
d30 69
a98 58
typedef struct def_file_section {
  char *name;			/* always set */
  char *class;			/* may be NULL */
  char flag_read, flag_write, flag_execute, flag_shared;
} def_file_section;

typedef struct def_file_export {
  char *name;			/* always set */
  char *internal_name;		/* always set, may == name */
  int ordinal;			/* -1 if not specified */
  int hint;
  char flag_private, flag_constant, flag_noname, flag_data;
} def_file_export;

typedef struct def_file_module {
  struct def_file_module *next;
  void *user_data;
  char name[1];			/* extended via malloc */
} def_file_module;

typedef struct def_file_import {
  char *internal_name;		/* always set */
  def_file_module *module;	/* always set */
  char *name;			/* may be NULL; either this or ordinal will be set */
  int ordinal;			/* may be -1 */
} def_file_import;

typedef struct def_file {
  /* from the NAME or LIBRARY command */
  char *name;
  int is_dll;			/* -1 if NAME/LIBRARY not given */
  bfd_vma base_address;		/* (bfd_vma)(-1) if unspecified */

  /* from the DESCRIPTION command */
  char *description;

  /* from the STACK/HEAP command, -1 if unspecified */
  int stack_reserve, stack_commit;
  int heap_reserve, heap_commit;

  /* from the SECTION/SEGMENT commands */
  int num_section_defs;
  def_file_section *section_defs;

  /* from the EXPORTS commands */
  int num_exports;
  def_file_export *exports;

  /* used by imports for module names */
  def_file_module *modules;

  /* from the IMPORTS commands */
  int num_imports;
  def_file_import *imports;

  /* from the VERSION command, -1 if not specified */
  int version_major, version_minor;
} def_file;
d124 2
a125 1
extern void def_file_print PARAMS ((FILE * _file, def_file * _def));
@


1.1.1.3
log
@import binutils 2.14 (excluding testsuites, .info files, and .po files)
@
text
@d2 1
a2 1
   Copyright 1998, 1999, 2000, 2002, 2003 Free Software Foundation, Inc.
a54 1
  int data;			/* = 1 if data */
d58 1
a58 1
  /* From the NAME or LIBRARY command.  */
d63 1
a63 1
  /* From the DESCRIPTION command.  */
d66 1
a66 1
  /* From the STACK/HEAP command, -1 if unspecified.  */
d70 1
a70 1
  /* From the SECTION/SEGMENT commands.  */
d74 1
a74 1
  /* From the EXPORTS commands.  */
d78 1
a78 1
  /* Used by imports for module names.  */
d81 1
a81 1
  /* From the IMPORTS commands.  */
d85 1
a85 1
  /* From the VERSION command, -1 if not specified.  */
d91 21
a111 13
/* The second arg may be NULL.  If not, this .def is appended to it.  */
extern def_file * def_file_parse
  PARAMS ((const char *, def_file *));
extern void def_file_free
  PARAMS ((def_file *));
extern def_file_export * def_file_add_export
  PARAMS ((def_file *, const char *, const char *, int));
extern def_file_import * def_file_add_import
  PARAMS ((def_file *, const char *, const char *, int, const char *));
extern void def_file_add_directive
  PARAMS ((def_file *, const char *, int));
extern def_file_module *def_get_module
  PARAMS ((def_file *, const char *));
d113 1
a113 2
extern void def_file_print
  PARAMS ((FILE *, def_file *));
@


1.1.1.4
log
@Binutils 2.15, with testsuites removed, and without gdb and libiberty.
@
text
@d25 2
d90 1
a90 1
extern def_file *def_file_empty (void);
d93 12
a104 8
extern def_file *def_file_parse (const char *, def_file *);
extern void def_file_free (def_file *);
extern def_file_export *def_file_add_export (def_file *, const char *,
					     const char *, int);
extern def_file_import *def_file_add_import (def_file *, const char *,
					     const char *, int, const char *);
extern void def_file_add_directive (def_file *, const char *, int);
extern def_file_module *def_get_module (def_file *, const char *);
d106 2
a107 1
extern void def_file_print (FILE *, def_file *);
@


