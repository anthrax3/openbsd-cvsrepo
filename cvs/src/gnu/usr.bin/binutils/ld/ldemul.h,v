head	1.7;
access;
symbols
	OPENBSD_6_1_BASE:1.7
	OPENBSD_6_0:1.7.0.48
	OPENBSD_6_0_BASE:1.7
	OPENBSD_5_9:1.7.0.44
	OPENBSD_5_9_BASE:1.7
	OPENBSD_5_8:1.7.0.46
	OPENBSD_5_8_BASE:1.7
	OPENBSD_5_7:1.7.0.38
	OPENBSD_5_7_BASE:1.7
	OPENBSD_5_6:1.7.0.42
	OPENBSD_5_6_BASE:1.7
	OPENBSD_5_5:1.7.0.40
	OPENBSD_5_5_BASE:1.7
	OPENBSD_5_4:1.7.0.36
	OPENBSD_5_4_BASE:1.7
	OPENBSD_5_3:1.7.0.34
	OPENBSD_5_3_BASE:1.7
	OPENBSD_5_2:1.7.0.32
	OPENBSD_5_2_BASE:1.7
	OPENBSD_5_1_BASE:1.7
	OPENBSD_5_1:1.7.0.30
	OPENBSD_5_0:1.7.0.28
	OPENBSD_5_0_BASE:1.7
	OPENBSD_4_9:1.7.0.26
	OPENBSD_4_9_BASE:1.7
	OPENBSD_4_8:1.7.0.24
	OPENBSD_4_8_BASE:1.7
	OPENBSD_4_7:1.7.0.20
	OPENBSD_4_7_BASE:1.7
	OPENBSD_4_6:1.7.0.22
	OPENBSD_4_6_BASE:1.7
	OPENBSD_4_5:1.7.0.18
	OPENBSD_4_5_BASE:1.7
	OPENBSD_4_4:1.7.0.16
	OPENBSD_4_4_BASE:1.7
	OPENBSD_4_3:1.7.0.14
	OPENBSD_4_3_BASE:1.7
	OPENBSD_4_2:1.7.0.12
	OPENBSD_4_2_BASE:1.7
	OPENBSD_4_1:1.7.0.10
	OPENBSD_4_1_BASE:1.7
	OPENBSD_4_0:1.7.0.8
	OPENBSD_4_0_BASE:1.7
	OPENBSD_3_9:1.7.0.6
	OPENBSD_3_9_BASE:1.7
	OPENBSD_3_8:1.7.0.4
	OPENBSD_3_8_BASE:1.7
	OPENBSD_3_7:1.7.0.2
	OPENBSD_3_7_BASE:1.7
	BINUTILS_2_15:1.1.1.7
	OPENBSD_3_6:1.6.0.2
	OPENBSD_3_6_BASE:1.6
	BINUTILS-2_14:1.1.1.6
	OPENBSD_3_5:1.5.0.6
	OPENBSD_3_5_BASE:1.5
	OPENBSD_3_4:1.5.0.4
	OPENBSD_3_4_BASE:1.5
	OPENBSD_3_3:1.5.0.2
	OPENBSD_3_3_BASE:1.5
	OPENBSD_3_2:1.4.0.2
	OPENBSD_3_2_BASE:1.4
	binutils-2_11_2:1.1.1.5
	OPENBSD_3_1:1.3.0.8
	OPENBSD_3_1_BASE:1.3
	OPENBSD_3_0:1.3.0.6
	OPENBSD_3_0_BASE:1.3
	BINUTILS-2_10_1:1.1.1.4
	OPENBSD_2_9:1.3.0.4
	OPENBSD_2_9_BASE:1.3
	OPENBSD_2_8:1.3.0.2
	OPENBSD_2_8_BASE:1.3
	BINUTILS-2_10:1.1.1.4
	OPENBSD_2_7:1.2.0.18
	OPENBSD_2_7_BASE:1.2
	new-binutils:1.2.0.16
	OPENBSD_2_6:1.2.0.14
	OPENBSD_2_6_BASE:1.2
	OPENBSD_2_5:1.2.0.12
	OPENBSD_2_5_BASE:1.2
	OPENBSD_2_4:1.2.0.10
	OPENBSD_2_4_BASE:1.2
	OPENBSD_2_3:1.2.0.8
	OPENBSD_2_3_BASE:1.2
	OPENBSD_2_2:1.2.0.6
	OPENBSD_2_2_BASE:1.2
	BINUTILS-2_8_1:1.1.1.3
	OPENBSD_2_1:1.2.0.4
	OPENBSD_2_1_BASE:1.2
	CYGNUS-961112:1.1.1.2
	OPENBSD_2_0:1.2.0.2
	OPENBSD_2_0_BASE:1.2
	CYGNUS-960904:1.1.1.2
	CYGNUS-960609:1.1.1.2
	CYGNUS:1.1.1
	FSF_2_6:1.1.1.1
	FSF:1.1.1;
locks; strict;
comment	@ * @;


1.7
date	2004.11.02.20.45.47;	author miod;	state Exp;
branches;
next	1.6;

1.6
date	2004.05.17.21.54.50;	author drahn;	state Exp;
branches;
next	1.5;

1.5
date	2002.12.09.00.45.33;	author millert;	state Exp;
branches;
next	1.4;

1.4
date	2002.05.13.17.07.42;	author fgsch;	state Exp;
branches;
next	1.3;

1.3
date	2000.09.12.19.12.43;	author espie;	state Exp;
branches;
next	1.2;

1.2
date	96.06.10.10.54.15;	author niklas;	state Exp;
branches;
next	1.1;

1.1
date	96.01.08.11.09.13;	author niklas;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	96.01.08.11.09.13;	author niklas;	state Exp;
branches;
next	1.1.1.2;

1.1.1.2
date	96.06.09.19.35.29;	author niklas;	state Exp;
branches;
next	1.1.1.3;

1.1.1.3
date	97.05.29.09.28.25;	author niklas;	state Exp;
branches;
next	1.1.1.4;

1.1.1.4
date	2000.09.12.14.48.07;	author espie;	state Exp;
branches;
next	1.1.1.5;

1.1.1.5
date	2002.05.13.14.00.39;	author fgsch;	state Exp;
branches;
next	1.1.1.6;

1.1.1.6
date	2004.05.17.20.42.49;	author drahn;	state Exp;
branches;
next	1.1.1.7;

1.1.1.7
date	2004.11.02.20.23.20;	author miod;	state Exp;
branches;
next	;


desc
@@


1.7
log
@Merge conflicts, bringing our changes back in:
- extra $(SHELL) and sugar for make (so that files not mode +x still work)
- safer temp file handling
- our W^X binary layout changes in ld
- OpenBSD policy for library file selection in ld
- arm and m88k changes which were not merged in time for official 2.15
- bfd core file handling
- a couple typos

New for 2.15:
- ld(1) and as(1) manpages now generated at build time
- binutils/stabs.c reverted to use our in-tree libiberty for now
- we still use our VIA C3 crypto code over stock binutils, as it recognizes
  more instructions
- new emulations for OpenBSD on mips64 machines, to help OpenBSD/sgi
- relaxed %f# handling in gas on OpenBSD/sparc64 (same as was in 2.14)

Tested on all platforms by various people; special thanks to sturm@@ and
otto@@.
@
text
@/* ld-emul.h - Linker emulation header file
   Copyright 1991, 1992, 1993, 1994, 1995, 1996, 1997, 1998, 2000, 2002, 2003
   Free Software Foundation, Inc.

   This file is part of GLD, the Gnu Linker.

   GLD is free software; you can redistribute it and/or modify
   it under the terms of the GNU General Public License as published by
   the Free Software Foundation; either version 1, or (at your option)
   any later version.

   GLD is distributed in the hope that it will be useful,
   but WITHOUT ANY WARRANTY; without even the implied warranty of
   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
   GNU General Public License for more details.  */

#ifndef LDEMUL_H
#define LDEMUL_H

extern void ldemul_hll
  (char *);
extern void ldemul_syslib
  (char *);
extern void ldemul_after_parse
  (void);
extern void ldemul_before_parse
  (void);
extern void ldemul_after_open
  (void);
extern void ldemul_after_allocation
  (void);
extern void ldemul_before_allocation
  (void);
extern void ldemul_set_output_arch
  (void);
extern char *ldemul_choose_target
  (int, char**);
extern void ldemul_choose_mode
  (char *);
extern void ldemul_list_emulations
  (FILE *);
extern void ldemul_list_emulation_options
  (FILE *);
extern char *ldemul_get_script
  (int *isfile);
extern void ldemul_finish
  (void);
extern void ldemul_set_symbols
  (void);
extern void ldemul_create_output_section_statements
  (void);
extern bfd_boolean ldemul_place_orphan
  (struct lang_input_statement_struct *, asection *);
extern bfd_boolean ldemul_parse_args
  (int, char **);
extern void ldemul_add_options
  (int, char **, int, struct option **, int, struct option **);
extern bfd_boolean ldemul_handle_option
  (int);
extern bfd_boolean ldemul_unrecognized_file
  (struct lang_input_statement_struct *);
extern bfd_boolean ldemul_recognized_file
  (struct lang_input_statement_struct *);
extern bfd_boolean ldemul_open_dynamic_archive
  (const char *, struct search_dirs *, struct lang_input_statement_struct *);
extern char *ldemul_default_target
  (int, char**);
extern void after_parse_default
  (void);
extern void after_open_default
  (void);
extern void after_allocation_default
  (void);
extern void before_allocation_default
  (void);
extern void set_output_arch_default
  (void);
extern void syslib_default
  (char*);
extern void hll_default
  (char*);
extern int  ldemul_find_potential_libraries
  (char *, struct lang_input_statement_struct *);
extern struct bfd_elf_version_expr *ldemul_new_vers_pattern
  (struct bfd_elf_version_expr *);

typedef struct ld_emulation_xfer_struct {
  /* Run before parsing the command line and script file.
     Set the architecture, maybe other things.  */
  void   (*before_parse) (void);

  /* Handle the SYSLIB (low level library) script command.  */
  void   (*syslib) (char *);

  /* Handle the HLL (high level library) script command.  */
  void   (*hll) (char *);

  /* Run after parsing the command line and script file.  */
  void   (*after_parse) (void);

  /* Run after opening all input files, and loading the symbols.  */
  void   (*after_open) (void);

  /* Run after allocating output sections.  */
  void   (*after_allocation)  (void);

  /* Set the output architecture and machine if possible.  */
  void   (*set_output_arch) (void);

  /* Decide which target name to use.  */
  char * (*choose_target) (int, char**);

  /* Run before allocating output sections.  */
  void   (*before_allocation) (void);

  /* Return the appropriate linker script.  */
  char * (*get_script) (int *isfile);

  /* The name of this emulation.  */
  char *emulation_name;

  /* The output format.  */
  char *target_name;

  /* Run after assigning values from the script.  */
  void	(*finish) (void);

  /* Create any output sections needed by the target.  */
  void	(*create_output_section_statements) (void);

  /* Try to open a dynamic library.  ARCH is an architecture name, and
     is normally the empty string.  ENTRY is the lang_input_statement
     that should be opened.  */
  bfd_boolean (*open_dynamic_archive)
    (const char *arch, struct search_dirs *,
     struct lang_input_statement_struct *entry);

  /* Place an orphan section.  Return TRUE if it was placed, FALSE if
     the default action should be taken.  This field may be NULL, in
     which case the default action will always be taken.  */
  bfd_boolean (*place_orphan)
    (struct lang_input_statement_struct *, asection *);

  /* Run after assigning parsing with the args, but before
     reading the script.  Used to initialize symbols used in the script.  */
  void	(*set_symbols) (void);

  /* Parse args which the base linker doesn't understand.
     Return TRUE if the arg needs no further processing.  */
  bfd_boolean (*parse_args) (int, char **);

  /* Hook to add options to parameters passed by the base linker to
     getopt_long and getopt_long_only calls.  */
  void (*add_options)
    (int, char **, int, struct option **, int, struct option **);

  /* Companion to the above to handle an option.  Returns TRUE if it is
     one of our options.  */
  bfd_boolean (*handle_option) (int);

  /* Run to handle files which are not recognized as object files or
     archives.  Return TRUE if the file was handled.  */
  bfd_boolean (*unrecognized_file)
    (struct lang_input_statement_struct *);

  /* Run to list the command line options which parse_args handles.  */
  void (* list_options) (FILE *);

  /* Run to specially handle files which *are* recognized as object
     files or archives.  Return TRUE if the file was handled.  */
  bfd_boolean (*recognized_file)
    (struct lang_input_statement_struct *);

  /* Called when looking for libraries in a directory specified
     via a linker command line option or linker script option.
     Files that match the pattern "lib*.a" have already been scanned.
     (For VMS files matching ":lib*.a" have also been scanned).  */
  int (* find_potential_libraries)
    (char *, struct lang_input_statement_struct *);

  /* Called when adding a new version pattern.  PowerPC64-ELF uses
     this hook to add a pattern matching ".foo" for every "foo".  */
  struct bfd_elf_version_expr * (*new_vers_pattern)
    (struct bfd_elf_version_expr *);

} ld_emulation_xfer_type;

typedef enum {
  intel_ic960_ld_mode_enum,
  default_mode_enum,
  intel_gld960_ld_mode_enum
} lang_emulation_mode_enum_type;

extern ld_emulation_xfer_type *ld_emulations[];

#endif
@


1.6
log
@Resolve merge conflicts, adjust method of W^X handing (.sh files)
remove testsuites (not useable) remove mmalloc (not part of new binutils).
@
text
@d2 1
a2 1
   Copyright 1991, 1992, 1993, 1994, 1995, 1996, 1997, 1998, 2000, 2002
d21 1
a21 1
  PARAMS ((char *));
d23 1
a23 1
  PARAMS ((char *));
d25 1
a25 1
  PARAMS ((void));
d27 1
a27 1
  PARAMS ((void));
d29 1
a29 1
  PARAMS ((void));
d31 1
a31 1
  PARAMS ((void));
d33 1
a33 1
  PARAMS ((void));
d35 1
a35 1
  PARAMS ((void));
d37 1
a37 1
  PARAMS ((int, char**));
d39 1
a39 1
  PARAMS ((char *));
d41 1
a41 1
  PARAMS ((FILE *));
d43 1
a43 1
  PARAMS ((FILE *));
d45 1
a45 1
  PARAMS ((int *isfile));
d47 1
a47 1
  PARAMS ((void));
d49 1
a49 1
  PARAMS ((void));
d51 1
a51 1
  PARAMS ((void));
d53 1
a53 1
  PARAMS ((struct lang_input_statement_struct *, asection *));
d55 1
a55 1
  PARAMS ((int, char **));
d57 1
a57 1
  PARAMS ((int, char **, int, struct option **, int, struct option **));
d59 1
a59 1
  PARAMS ((int));
d61 1
a61 1
  PARAMS ((struct lang_input_statement_struct *));
d63 1
a63 1
  PARAMS ((struct lang_input_statement_struct *));
d65 1
a65 2
  PARAMS ((const char *, struct search_dirs *,
	   struct lang_input_statement_struct *));
d67 1
a67 1
  PARAMS ((int, char**));
d69 1
a69 1
  PARAMS ((void));
d71 1
a71 1
  PARAMS ((void));
d73 1
a73 1
  PARAMS ((void));
d75 1
a75 1
  PARAMS ((void));
d77 1
a77 1
  PARAMS ((void));
d79 1
a79 1
  PARAMS ((char*));
d81 1
a81 1
  PARAMS ((char*));
d83 1
a83 1
  PARAMS ((char *, struct lang_input_statement_struct *));
d85 1
a85 1
  PARAMS ((struct bfd_elf_version_expr *));
d90 1
a90 1
  void   (*before_parse) PARAMS ((void));
d93 1
a93 1
  void   (*syslib) PARAMS ((char *));
d96 1
a96 1
  void   (*hll) PARAMS ((char *));
d99 1
a99 1
  void   (*after_parse) PARAMS ((void));
d102 1
a102 1
  void   (*after_open) PARAMS ((void));
d105 1
a105 1
  void   (*after_allocation) PARAMS ( (void));
d108 1
a108 1
  void   (*set_output_arch) PARAMS ((void));
d111 1
a111 1
  char * (*choose_target) PARAMS ((int, char**));
d114 1
a114 1
  void   (*before_allocation) PARAMS ((void));
d117 1
a117 1
  char * (*get_script) PARAMS ((int *isfile));
d126 1
a126 1
  void	(*finish) PARAMS ((void));
d129 1
a129 1
  void	(*create_output_section_statements) PARAMS ((void));
d135 2
a136 2
    PARAMS ((const char *arch, struct search_dirs *,
	     struct lang_input_statement_struct *entry));
d142 1
a142 1
    PARAMS ((struct lang_input_statement_struct *, asection *));
d146 1
a146 1
  void	(*set_symbols) PARAMS ((void));
d150 1
a150 1
  bfd_boolean (*parse_args) PARAMS ((int, char **));
d155 1
a155 1
    PARAMS ((int, char **, int, struct option **, int, struct option **));
d159 1
a159 1
  bfd_boolean (*handle_option) PARAMS ((int));
d164 1
a164 1
    PARAMS ((struct lang_input_statement_struct *));
d167 1
a167 1
  void (* list_options) PARAMS ((FILE *));
d172 1
a172 1
    PARAMS ((struct lang_input_statement_struct *));
d179 1
a179 1
    PARAMS ((char *, struct lang_input_statement_struct *));
d184 1
a184 1
    PARAMS ((struct bfd_elf_version_expr *));
@


1.5
log
@From Andrushock, s/sucess/success/g
@
text
@d2 1
a2 1
   Copyright 1991, 1992, 1993, 1994, 1995, 1996, 1997, 1998, 2000
d20 33
a52 17
extern void ldemul_hll PARAMS ((char *));
extern void ldemul_syslib PARAMS ((char *));
extern void ldemul_after_parse PARAMS ((void));
extern void ldemul_before_parse PARAMS ((void));
extern void ldemul_after_open PARAMS ((void));
extern void ldemul_after_allocation PARAMS ((void));
extern void ldemul_before_allocation PARAMS ((void));
extern void ldemul_set_output_arch PARAMS ((void));
extern char *ldemul_choose_target PARAMS ((void));
extern void ldemul_choose_mode PARAMS ((char *));
extern void ldemul_list_emulations PARAMS ((FILE *));
extern void ldemul_list_emulation_options PARAMS ((FILE *));
extern char *ldemul_get_script PARAMS ((int *isfile));
extern void ldemul_finish PARAMS ((void));
extern void ldemul_set_symbols PARAMS ((void));
extern void ldemul_create_output_section_statements PARAMS ((void));
extern boolean ldemul_place_orphan
d54 7
a60 2
extern int ldemul_parse_args PARAMS ((int, char **));
extern boolean ldemul_unrecognized_file
d62 1
a62 1
extern boolean ldemul_recognized_file
d64 1
a64 1
extern boolean ldemul_open_dynamic_archive
d67 16
a82 8
extern char *ldemul_default_target PARAMS ((void));
extern void after_parse_default PARAMS ((void));
extern void after_open_default PARAMS ((void));
extern void after_allocation_default PARAMS ((void));
extern void before_allocation_default PARAMS ((void));
extern void set_output_arch_default PARAMS ((void));
extern void syslib_default PARAMS ((char*));
extern void hll_default PARAMS ((char*));
d85 2
d112 1
a112 1
  char * (*choose_target) PARAMS ((void));
d135 1
a135 1
  boolean (*open_dynamic_archive)
d139 1
a139 1
  /* Place an orphan section.  Return true if it was placed, false if
d142 1
a142 1
  boolean (*place_orphan)
d149 12
a160 3
  /* Run to parse args which the base linker doesn't
     understand. Return non zero on success.  */
  int (*parse_args) PARAMS ((int, char **));
d163 2
a164 2
     archives.  Return true if the file was handled.  */
  boolean (*unrecognized_file)
d171 2
a172 2
     files or archives.  Return true if the file was handled.  */
  boolean (*recognized_file)
d181 5
@


1.4
log
@resolve conflicts.
@
text
@d119 1
a119 1
     understand. Return non zero on sucess.  */
@


1.3
log
@Help stupid cvs fixing basic conflicts.
@
text
@d2 2
a3 1
   Copyright 1991, 92, 93, 94, 95, 96, 97, 1998, 2000 Free Software Foundation, Inc.
a19 5
#if ANSI_PROTOTYPES
struct lang_input_statement_struct;
struct search_dirs;
#endif

d57 1
a57 2
typedef struct ld_emulation_xfer_struct
{
d114 2
a115 2
  /* Run after assigning parsing with the args, but before 
     reading the script.  Used to initialize symbols used in the script. */
d119 1
a119 1
     understand. Return non zero on sucess. */
d141 1
a141 1
  
d144 1
a144 2
typedef enum 
{
d146 1
a146 1
  default_mode_enum ,
@


1.2
log
@Bring Cygnus versions into the trunk, keeping our local patches
@
text
@d2 1
a2 2

   Copyright 1991, 1992 Free Software Foundation, Inc.
d34 2
a35 1
extern void ldemul_list_emulations PARAMS ((/* FILE * */));
d45 2
d58 2
d132 15
@


1.1
log
@Initial revision
@
text
@d43 2
a116 1

d121 1
d123 4
a126 1
  int (*parse_args) PARAMS ((int, char **));
@


1.1.1.1
log
@Initial GNU binutils 2.6 import
@
text
@@


1.1.1.2
log
@Import of binutils, gas, ld & gprof from Cygnus 960609 tree
@
text
@a42 2
extern boolean ldemul_unrecognized_file
  PARAMS ((struct lang_input_statement_struct *));
d115 1
d120 1
a121 5

  /* Run to handle files which are not recognized as object files or
     archives.  Return true if the file was handled.  */
  boolean (*unrecognized_file)
    PARAMS ((struct lang_input_statement_struct *));
@


1.1.1.3
log
@Import of binutils-2.8.1 from Cygnus/FSF
@
text
@d2 2
a3 1
   Copyright 1991, 92, 93, 94, 95, 96, 1997 Free Software Foundation, Inc.
d35 1
a35 1
extern void ldemul_list_emulations PARAMS ((FILE *));
@


1.1.1.4
log
@Import binutils-2.10
- only the binutils package (no gdb here)
- don't import libiberty and texinfo, they are elsewhere
- remove all .info* generated files
@
text
@d2 1
a2 1
   Copyright 1991, 92, 93, 94, 95, 96, 97, 1998, 2000 Free Software Foundation, Inc.
a34 1
extern void ldemul_list_emulation_options PARAMS ((FILE *));
a43 2
extern boolean ldemul_recognized_file
  PARAMS ((struct lang_input_statement_struct *));
a54 2
extern int  ldemul_find_potential_libraries
  PARAMS ((char *, struct lang_input_statement_struct *));
a126 15
  /* Run to list the command line options which parse_args handles.  */
  void (* list_options) PARAMS ((FILE *));

  /* Run to specially handle files which *are* recognized as object
     files or archives.  Return true if the file was handled.  */
  boolean (*recognized_file)
    PARAMS ((struct lang_input_statement_struct *));

  /* Called when looking for libraries in a directory specified
     via a linker command line option or linker script option.
     Files that match the pattern "lib*.a" have already been scanned.
     (For VMS files matching ":lib*.a" have also been scanned).  */
  int (* find_potential_libraries)
    PARAMS ((char *, struct lang_input_statement_struct *));
  
@


1.1.1.5
log
@Import binutils-2.11.2
- only the binutils package (no gdb here)
- don't import libiberty and texinfo, they are elsewhere
- remove all .info* generated files
@
text
@d2 1
a2 2
   Copyright 1991, 1992, 1993, 1994, 1995, 1996, 1997, 1998, 2000
   Free Software Foundation, Inc.
d19 5
d61 2
a62 1
typedef struct ld_emulation_xfer_struct {
d119 2
a120 2
  /* Run after assigning parsing with the args, but before
     reading the script.  Used to initialize symbols used in the script.  */
d124 1
a124 1
     understand. Return non zero on sucess.  */
d146 1
a146 1

d149 2
a150 1
typedef enum {
d152 1
a152 1
  default_mode_enum,
@


1.1.1.6
log
@import binutils 2.14 (excluding testsuites, .info files, and .po files)
@
text
@d2 1
a2 1
   Copyright 1991, 1992, 1993, 1994, 1995, 1996, 1997, 1998, 2000, 2002
d20 17
a36 33
extern void ldemul_hll
  PARAMS ((char *));
extern void ldemul_syslib
  PARAMS ((char *));
extern void ldemul_after_parse
  PARAMS ((void));
extern void ldemul_before_parse
  PARAMS ((void));
extern void ldemul_after_open
  PARAMS ((void));
extern void ldemul_after_allocation
  PARAMS ((void));
extern void ldemul_before_allocation
  PARAMS ((void));
extern void ldemul_set_output_arch
  PARAMS ((void));
extern char *ldemul_choose_target
  PARAMS ((int, char**));
extern void ldemul_choose_mode
  PARAMS ((char *));
extern void ldemul_list_emulations
  PARAMS ((FILE *));
extern void ldemul_list_emulation_options
  PARAMS ((FILE *));
extern char *ldemul_get_script
  PARAMS ((int *isfile));
extern void ldemul_finish
  PARAMS ((void));
extern void ldemul_set_symbols
  PARAMS ((void));
extern void ldemul_create_output_section_statements
  PARAMS ((void));
extern bfd_boolean ldemul_place_orphan
d38 2
a39 7
extern bfd_boolean ldemul_parse_args
  PARAMS ((int, char **));
extern void ldemul_add_options
  PARAMS ((int, char **, int, struct option **, int, struct option **));
extern bfd_boolean ldemul_handle_option
  PARAMS ((int));
extern bfd_boolean ldemul_unrecognized_file
d41 1
a41 1
extern bfd_boolean ldemul_recognized_file
d43 1
a43 1
extern bfd_boolean ldemul_open_dynamic_archive
d46 8
a53 16
extern char *ldemul_default_target
  PARAMS ((int, char**));
extern void after_parse_default
  PARAMS ((void));
extern void after_open_default
  PARAMS ((void));
extern void after_allocation_default
  PARAMS ((void));
extern void before_allocation_default
  PARAMS ((void));
extern void set_output_arch_default
  PARAMS ((void));
extern void syslib_default
  PARAMS ((char*));
extern void hll_default
  PARAMS ((char*));
a55 2
extern struct bfd_elf_version_expr *ldemul_new_vers_pattern
  PARAMS ((struct bfd_elf_version_expr *));
d81 1
a81 1
  char * (*choose_target) PARAMS ((int, char**));
d104 1
a104 1
  bfd_boolean (*open_dynamic_archive)
d108 1
a108 1
  /* Place an orphan section.  Return TRUE if it was placed, FALSE if
d111 1
a111 1
  bfd_boolean (*place_orphan)
d118 3
a120 12
  /* Parse args which the base linker doesn't understand.
     Return TRUE if the arg needs no further processing.  */
  bfd_boolean (*parse_args) PARAMS ((int, char **));

  /* Hook to add options to parameters passed by the base linker to
     getopt_long and getopt_long_only calls.  */
  void (*add_options)
    PARAMS ((int, char **, int, struct option **, int, struct option **));

  /* Companion to the above to handle an option.  Returns TRUE if it is
     one of our options.  */
  bfd_boolean (*handle_option) PARAMS ((int));
d123 2
a124 2
     archives.  Return TRUE if the file was handled.  */
  bfd_boolean (*unrecognized_file)
d131 2
a132 2
     files or archives.  Return TRUE if the file was handled.  */
  bfd_boolean (*recognized_file)
a140 5

  /* Called when adding a new version pattern.  PowerPC64-ELF uses
     this hook to add a pattern matching ".foo" for every "foo".  */
  struct bfd_elf_version_expr * (*new_vers_pattern)
    PARAMS ((struct bfd_elf_version_expr *));
@


1.1.1.7
log
@Binutils 2.15, with testsuites removed, and without gdb and libiberty.
@
text
@d2 1
a2 1
   Copyright 1991, 1992, 1993, 1994, 1995, 1996, 1997, 1998, 2000, 2002, 2003
d21 1
a21 1
  (char *);
d23 1
a23 1
  (char *);
d25 1
a25 1
  (void);
d27 1
a27 1
  (void);
d29 1
a29 1
  (void);
d31 1
a31 1
  (void);
d33 1
a33 1
  (void);
d35 1
a35 1
  (void);
d37 1
a37 1
  (int, char**);
d39 1
a39 1
  (char *);
d41 1
a41 1
  (FILE *);
d43 1
a43 1
  (FILE *);
d45 1
a45 1
  (int *isfile);
d47 1
a47 1
  (void);
d49 1
a49 1
  (void);
d51 1
a51 1
  (void);
d53 1
a53 1
  (struct lang_input_statement_struct *, asection *);
d55 1
a55 1
  (int, char **);
d57 1
a57 1
  (int, char **, int, struct option **, int, struct option **);
d59 1
a59 1
  (int);
d61 1
a61 1
  (struct lang_input_statement_struct *);
d63 1
a63 1
  (struct lang_input_statement_struct *);
d65 2
a66 1
  (const char *, struct search_dirs *, struct lang_input_statement_struct *);
d68 1
a68 1
  (int, char**);
d70 1
a70 1
  (void);
d72 1
a72 1
  (void);
d74 1
a74 1
  (void);
d76 1
a76 1
  (void);
d78 1
a78 1
  (void);
d80 1
a80 1
  (char*);
d82 1
a82 1
  (char*);
d84 1
a84 1
  (char *, struct lang_input_statement_struct *);
d86 1
a86 1
  (struct bfd_elf_version_expr *);
d91 1
a91 1
  void   (*before_parse) (void);
d94 1
a94 1
  void   (*syslib) (char *);
d97 1
a97 1
  void   (*hll) (char *);
d100 1
a100 1
  void   (*after_parse) (void);
d103 1
a103 1
  void   (*after_open) (void);
d106 1
a106 1
  void   (*after_allocation)  (void);
d109 1
a109 1
  void   (*set_output_arch) (void);
d112 1
a112 1
  char * (*choose_target) (int, char**);
d115 1
a115 1
  void   (*before_allocation) (void);
d118 1
a118 1
  char * (*get_script) (int *isfile);
d127 1
a127 1
  void	(*finish) (void);
d130 1
a130 1
  void	(*create_output_section_statements) (void);
d136 2
a137 2
    (const char *arch, struct search_dirs *,
     struct lang_input_statement_struct *entry);
d143 1
a143 1
    (struct lang_input_statement_struct *, asection *);
d147 1
a147 1
  void	(*set_symbols) (void);
d151 1
a151 1
  bfd_boolean (*parse_args) (int, char **);
d156 1
a156 1
    (int, char **, int, struct option **, int, struct option **);
d160 1
a160 1
  bfd_boolean (*handle_option) (int);
d165 1
a165 1
    (struct lang_input_statement_struct *);
d168 1
a168 1
  void (* list_options) (FILE *);
d173 1
a173 1
    (struct lang_input_statement_struct *);
d180 1
a180 1
    (char *, struct lang_input_statement_struct *);
d185 1
a185 1
    (struct bfd_elf_version_expr *);
@


