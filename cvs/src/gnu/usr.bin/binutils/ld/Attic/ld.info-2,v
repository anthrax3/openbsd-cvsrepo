head	1.2;
access;
symbols
	BINUTILS-2_10_1:1.1.1.3
	BINUTILS-2_8_1:1.1.1.2
	CYGNUS:1.1.1
	FSF_2_6:1.1.1.1
	FSF:1.1.1;
locks; strict;
comment	@# @;


1.2
date	96.06.10.10.54.10;	author niklas;	state dead;
branches;
next	1.1;

1.1
date	96.01.08.11.09.22;	author niklas;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	96.01.08.11.09.22;	author niklas;	state Exp;
branches;
next	1.1.1.2;

1.1.1.2
date	97.05.29.09.28.20;	author niklas;	state Exp;
branches;
next	1.1.1.3;

1.1.1.3
date	2001.06.09.22.08.49;	author espie;	state Exp;
branches;
next	;


desc
@@


1.2
log
@Bring Cygnus versions into the trunk, keeping our local patches
@
text
@This is Info file ld.info, produced by Makeinfo-1.55 from the input
file ./ld.texinfo.

START-INFO-DIR-ENTRY
* Ld: (ld).                       The GNU linker.
END-INFO-DIR-ENTRY

   This file documents the GNU linker LD.

   Copyright (C) 1991, 92, 93, 94, 1995 Free Software Foundation, Inc.

   Permission is granted to make and distribute verbatim copies of this
manual provided the copyright notice and this permission notice are
preserved on all copies.

   Permission is granted to copy and distribute modified versions of
this manual under the conditions for verbatim copying, provided also
that the entire resulting derived work is distributed under the terms
of a permission notice identical to this one.

   Permission is granted to copy and distribute translations of this
manual into another language, under the above conditions for modified
versions.


File: ld.info,  Node: Section Definition,  Next: Section Placement,  Up: SECTIONS

Section Definitions
-------------------

   The most frequently used statement in the `SECTIONS' command is the
"section definition", which specifies the properties of an output
section: its location, alignment, contents, fill pattern, and target
memory region.  Most of these specifications are optional; the simplest
form of a section definition is
     SECTIONS { ...
       SECNAME : {
         CONTENTS
       }
     ... }

SECNAME is the name of the output section, and CONTENTS a specification
of what goes there--for example, a list of input files or sections of
input files (*note Section Placement::.).  As you might assume, the
whitespace shown is optional.  You do need the colon `:' and the braces
`{}', however.

   SECNAME must meet the constraints of your output format.  In formats
which only support a limited number of sections, such as `a.out', the
name must be one of the names supported by the format (`a.out', for
example, allows only `.text', `.data' or `.bss'). If the output format
supports any number of sections, but with numbers and not names (as is
the case for Oasys), the name should be supplied as a quoted numeric
string.  A section name may consist of any sequence of characters, but
any name which does not conform to the standard `ld' symbol name syntax
must be quoted.  *Note Symbol Names: Symbols.

   The linker will not create output sections which do not have any
contents.  This is for convenience when referring to input sections that
may or may not exist.  For example,
     .foo { *(.foo }
   will only create a `.foo' section in the output file if there is a
`.foo' section in at least one input file.


File: ld.info,  Node: Section Placement,  Next: Section Data Expressions,  Prev: Section Definition,  Up: SECTIONS

Section Placement
-----------------

   In a section definition, you can specify the contents of an output
section by listing particular input files, by listing particular
input-file sections, or by a combination of the two.  You can also place
arbitrary data in the section, and define symbols relative to the
beginning of the section.

   The CONTENTS of a section definition may include any of the
following kinds of statement.  You can include as many of these as you
like in a single section definition, separated from one another by
whitespace.

`FILENAME'
     You may simply name a particular input file to be placed in the
     current output section; *all* sections from that file are placed
     in the current section definition.  If the file name has already
     been mentioned in another section definition, with an explicit
     section name list, then only those sections which have not yet
     been allocated are used.

     To specify a list of particular files by name:
          .data : { afile.o bfile.o cfile.o }

     The example also illustrates that multiple statements can be
     included in the contents of a section definition, since each file
     name is a separate statement.

`FILENAME( SECTION )'
`FILENAME( SECTION, SECTION, ... )'
`FILENAME( SECTION SECTION ... )'
     You can name one or more sections from your input files, for
     insertion in the current output section.  If you wish to specify a
     list of input-file sections inside the parentheses, you may
     separate the section names by either commas or whitespace.

`* (SECTION)'
`* (SECTION, SECTION, ...)'
`* (SECTION SECTION ...)'
     Instead of explicitly naming particular input files in a link
     control script, you can refer to *all* files from the `ld' command
     line: use `*' instead of a particular file name before the
     parenthesized input-file section list.

     If you have already explicitly included some files by name, `*'
     refers to all *remaining* files--those whose places in the output
     file have not yet been defined.

     For example, to copy sections `1' through `4' from an Oasys file
     into the `.text' section of an `a.out' file, and sections `13' and
     `14' into the `.data' section:
          SECTIONS {
            .text :{
              *("1" "2" "3" "4")
            }
          
            .data :{
              *("13" "14")
            }
          }

     `[ SECTION ... ]' used to be accepted as an alternate way to
     specify named sections from all unallocated input files.  Because
     some operating systems (VMS) allow brackets in file names, that
     notation is no longer supported.

`FILENAME`( COMMON )''
`*( COMMON )'
     Specify where in your output file to place uninitialized data with
     this notation.  `*(COMMON)' by itself refers to all uninitialized
     data from all input files (so far as it is not yet allocated);
     FILENAME`(COMMON)' refers to uninitialized data from a particular
     file.  Both are special cases of the general mechanisms for
     specifying where to place input-file sections: `ld' permits you to
     refer to uninitialized data as if it were in an input-file section
     named `COMMON', regardless of the input file's format.

   For example, the following command script arranges the output file
into three consecutive sections, named `.text', `.data', and `.bss',
taking the input for each from the correspondingly named sections of
all the input files:

     SECTIONS {
       .text : { *(.text) }
       .data : { *(.data) }
       .bss :  { *(.bss)  *(COMMON) }
     }

   The following example reads all of the sections from file `all.o'
and places them at the start of output section `outputa' which starts
at location `0x10000'. All of section `.input1' from file `foo.o'
follows immediately, in the same output section.  All of section
`.input2' from `foo.o' goes into output section `outputb', followed by
section `.input1' from `foo1.o'.  All of the remaining `.input1' and
`.input2' sections from any files are written to output section
`outputc'.

     SECTIONS {
       outputa 0x10000 :
         {
         all.o
         foo.o (.input1)
         }
       outputb :
         {
         foo.o (.input2)
         foo1.o (.input1)
         }
       outputc :
         {
         *(.input1)
         *(.input2)
         }
     }


File: ld.info,  Node: Section Data Expressions,  Next: Section Options,  Prev: Section Placement,  Up: SECTIONS

Section Data Expressions
------------------------

   The foregoing statements arrange, in your output file, data
originating from your input files.  You can also place data directly in
an output section from the link command script.  Most of these
additional statements involve expressions; *note Expressions::..
Although these statements are shown separately here for ease of
presentation, no such segregation is needed within a section definition
in the `SECTIONS' command; you can intermix them freely with any of the
statements we've just described.

`CREATE_OBJECT_SYMBOLS'
     Create a symbol for each input file in the current section, set to
     the address of the first byte of data written from that input
     file.  For instance, with `a.out' files it is conventional to have
     a symbol for each input file.  You can accomplish this by defining
     the output `.text' section as follows:
          SECTIONS {
            .text 0x2020 :
               {
              CREATE_OBJECT_SYMBOLS
              *(.text)
              _etext = ALIGN(0x2000);
              }
            ...
          }

     If `sample.ld' is a file containing this script, and `a.o', `b.o',
     `c.o', and `d.o' are four input files with contents like the
     following--
          /* a.c */
          
          afunction() { }
          int adata=1;
          int abss;

     `ld -M -T sample.ld a.o b.o c.o d.o' would create a map like this,
     containing symbols matching the object file names:
          00000000 A __DYNAMIC
          00004020 B _abss
          00004000 D _adata
          00002020 T _afunction
          00004024 B _bbss
          00004008 D _bdata
          00002038 T _bfunction
          00004028 B _cbss
          00004010 D _cdata
          00002050 T _cfunction
          0000402c B _dbss
          00004018 D _ddata
          00002068 T _dfunction
          00004020 D _edata
          00004030 B _end
          00004000 T _etext
          00002020 t a.o
          00002038 t b.o
          00002050 t c.o
          00002068 t d.o

`SYMBOL = EXPRESSION ;'
`SYMBOL F= EXPRESSION ;'
     SYMBOL is any symbol name (*note Symbols::.).  "F=" refers to any
     of the operators `&= += -= *= /=' which combine arithmetic and
     assignment.

     When you assign a value to a symbol within a particular section
     definition, the value is relative to the beginning of the section
     (*note Assignment::.).  If you write

          SECTIONS {
            abs = 14 ;
            ...
            .data : { ... rel = 14 ; ... }
            abs2 = 14 + ADDR(.data);
            ...
          }

     `abs' and `rel' do not have the same value; `rel' has the same
     value as `abs2'.

`BYTE(EXPRESSION)'
`SHORT(EXPRESSION)'
`LONG(EXPRESSION)'
`QUAD(EXPRESSION)'
     By including one of these four statements in a section definition,
     you can explicitly place one, two, four, or eight bytes
     (respectively) at the current address of that section.  `QUAD' is
     only supported when using a 64 bit host or target.

     Multiple-byte quantities are represented in whatever byte order is
     appropriate for the output file format (*note BFD::.).

`FILL(EXPRESSION)'
     Specify the "fill pattern" for the current section.  Any otherwise
     unspecified regions of memory within the section (for example,
     regions you skip over by assigning a new value to the location
     counter `.') are filled with the two least significant bytes from
     the EXPRESSION argument.  A `FILL' statement covers memory
     locations *after* the point it occurs in the section definition; by
     including more than one `FILL' statement, you can have different
     fill patterns in different parts of an output section.


File: ld.info,  Node: Section Options,  Prev: Section Data Expressions,  Up: SECTIONS

Optional Section Attributes
---------------------------

   Here is the full syntax of a section definition, including all the
optional portions:

     SECTIONS {
     ...
     SECNAME START BLOCK(ALIGN) (NOLOAD) : AT ( LDADR )
       { CONTENTS } >REGION =FILL
     ...
     }

   SECNAME and CONTENTS are required.  *Note Section Definition::, and
*note Section Placement::. for details on CONTENTS.  The remaining
elements--START, `BLOCK(ALIGN)', `(NOLOAD)', `AT ( LDADR )', `>REGION',
and `=FILL'--are all optional.

`START'
     You can force the output section to be loaded at a specified
     address by specifying START immediately following the section name.
     sTART can be represented as any expression. The following example
     generates section OUTPUT at location `0x40000000':

          SECTIONS {
            ...
            output 0x40000000: {
              ...
              }
            ...
          }

`BLOCK(ALIGN)'
     You can include `BLOCK()' specification to advance the location
     counter `.' prior to the beginning of the section, so that the
     section will begin at the specified alignment.  ALIGN is an
     expression.

`(NOLOAD)'
     Use `(NOLOAD)' to prevent a section from being loaded into memory
     each time it is accessed.  For example, in the script sample
     below, the `ROM' segment is addressed at memory location `0' and
     does not need to be loaded into each object file:

          SECTIONS {
            ROM  0  (NOLOAD)  : { ... }
            ...
          }

`AT ( LDADR )'
     The expression LDADR that follows the `AT' keyword specifies the
     load address of the section.  The default (if you do not use the
     `AT' keyword) is to make the load address the same as the
     relocation address.  This feature is designed to make it easy to
     build a ROM image.  For example, this `SECTIONS' definition
     creates two output sections: one called `.text', which starts at
     `0x1000', and one called `.mdata', which is loaded at the end of
     the `.text' section even though its relocation address is
     `0x2000'.  The symbol `_data' is defined with the value `0x2000':

          SECTIONS
            {
            .text 0x1000 : { *(.text) _etext = . ; }
            .mdata 0x2000 :
              AT ( ADDR(.text) + SIZEOF ( .text ) )
              { _data = . ; *(.data); _edata = . ;  }
            .bss 0x3000 :
              { _bstart = . ;  *(.bss) *(COMMON) ; _bend = . ;}
          }

     The run-time initialization code (for C programs, usually `crt0')
     for use with a ROM generated this way has to include something like
     the following, to copy the initialized data from the ROM image to
     its runtime address:

          char *src = _etext;
          char *dst = _data;
          
          /* ROM has data at end of text; copy it. */
          while (dst < _edata) {
            *dst++ = *src++;
          }
          
          /* Zero bss */
          for (dst = _bstart; dst< _bend; dst++)
            *dst = 0;

`>REGION'
     Assign this section to a previously defined region of memory.
     *Note MEMORY::.

`=FILL'
     Including `=FILL' in a section definition specifies the initial
     fill value for that section.  You may use any expression to
     specify FILL.  Any unallocated holes in the current output section
     when written to the output file will be filled with the two least
     significant bytes of the value, repeated as necessary.  You can
     also change the fill value with a `FILL' statement in the CONTENTS
     of a section definition.


File: ld.info,  Node: Entry Point,  Next: Option Commands,  Prev: SECTIONS,  Up: Commands

The Entry Point
===============

   The linker command language includes a command specifically for
defining the first executable instruction in an output file (its "entry
point").  Its argument is a symbol name:
     ENTRY(SYMBOL)

   Like symbol assignments, the `ENTRY' command may be placed either as
an independent command in the command file, or among the section
definitions within the `SECTIONS' command--whatever makes the most
sense for your layout.

   `ENTRY' is only one of several ways of choosing the entry point.
You may indicate it in any of the following ways (shown in descending
order of priority: methods higher in the list override methods lower
down).
   * the `-e' ENTRY command-line option;

   * the `ENTRY(SYMBOL)' command in a linker control script;

   * the value of the symbol `start', if present;

   * the address of the first byte of the `.text' section, if present;

   * The address `0'.

   For example, you can use these rules to generate an entry point with
an assignment statement: if no symbol `start' is defined within your
input files, you can simply define it, assigning it an appropriate
value--

     start = 0x2020;

The example shows an absolute address, but you can use any expression.
For example, if your input object files use some other symbol-name
convention for the entry point, you can just assign the value of
whatever symbol contains the start address to `start':

     start = other_symbol ;


File: ld.info,  Node: Option Commands,  Prev: Entry Point,  Up: Commands

Option Commands
===============

   The command language includes a number of other commands that you can
use for specialized purposes.  They are similar in purpose to
command-line options.

`CONSTRUCTORS'
     This command ties up C++ style constructor and destructor records.
     The details of the constructor representation vary from one
     object format to another, but usually lists of constructors and
     destructors appear as special sections.  The `CONSTRUCTORS'
     command specifies where the linker is to place the data from these
     sections, relative to the rest of the linked output.  Constructor
     data is marked by the symbol `__CTOR_LIST__' at the start, and
     `__CTOR_LIST_END' at the end; destructor data is bracketed
     similarly, between `__DTOR_LIST__' and `__DTOR_LIST_END'.  (The
     compiler must arrange to actually run this code; GNU C++ calls
     constructors from a subroutine `__main', which it inserts
     automatically into the startup code for `main', and destructors
     from `_exit'.)

`FLOAT'
`NOFLOAT'
     These keywords were used in some older linkers to request a
     particular math subroutine library.  `ld' doesn't use the
     keywords, assuming instead that any necessary subroutines are in
     libraries specified using the general mechanisms for linking to
     archives; but to permit the use of scripts that were written for
     the older linkers, the keywords `FLOAT' and `NOFLOAT' are accepted
     and ignored.

`FORCE_COMMON_ALLOCATION'
     This command has the same effect as the `-d' command-line option:
     to make `ld' assign space to common symbols even if a relocatable
     output file is specified (`-r').

`INPUT ( FILE, FILE, ... )'
`INPUT ( FILE FILE ... )'
     Use this command to include binary input files in the link, without
     including them in a particular section definition.  Specify the
     full name for each FILE, including `.a' if required.

     `ld' searches for each FILE through the archive-library search
     path, just as for files you specify on the command line.  See the
     description of `-L' in *Note Command Line Options: Options.

     If you use `-lFILE', `ld' will transform the name to `libFILE.a'
     as with the command line argument `-l'.

`GROUP ( FILE, FILE, ... )'
`GROUP ( FILE FILE ... )'
     This command is like `INPUT', except that the named files should
     all be archives, and they are searched repeatedly until no new
     undefined references are created.  See the description of `-(' in
     *Note Command Line Options: Options.

`OUTPUT ( FILENAME )'
     Use this command to name the link output file FILENAME.  The
     effect of `OUTPUT(FILENAME)' is identical to the effect of
     `-o FILENAME', which overrides it.  You can use this command to
     supply a default output-file name other than `a.out'.

`OUTPUT_ARCH ( BFDNAME )'
     Specify a particular output machine architecture, with one of the
     names used by the BFD back-end routines (*note BFD::.).  This
     command is often unnecessary; the architecture is most often set
     implicitly by either the system BFD configuration or as a side
     effect of the `OUTPUT_FORMAT' command.

`OUTPUT_FORMAT ( BFDNAME )'
     When `ld' is configured to support multiple object code formats,
     you can use this command to specify a particular output format.
     bFDNAME is one of the names used by the BFD back-end routines
     (*note BFD::.).  The effect is identical to the effect of the
     `-oformat' command-line option.  This selection affects only the
     output file; the related command `TARGET' affects primarily input
     files.

`SEARCH_DIR ( PATH )'
     Add PATH to the list of paths where `ld' looks for archive
     libraries.  `SEARCH_DIR(PATH)' has the same effect as `-LPATH' on
     the command line.

`STARTUP ( FILENAME )'
     Ensure that FILENAME is the first input file used in the link
     process.

`TARGET ( FORMAT )'
     When `ld' is configured to support multiple object code formats,
     you can use this command to change the input-file object code
     format (like the command-line option `-b' or its synonym
     `-format').  The argument FORMAT is one of the strings used by BFD
     to name binary formats.  If `TARGET' is specified but
     `OUTPUT_FORMAT' is not, the last `TARGET' argument is also used as
     the default format for the `ld' output file.  *Note BFD::.

     If you don't use the `TARGET' command, `ld' uses the value of the
     environment variable `GNUTARGET', if available, to select the
     output file format.  If that variable is also absent, `ld' uses
     the default format configured for your machine in the BFD
     libraries.


File: ld.info,  Node: Machine Dependent,  Next: BFD,  Prev: Commands,  Up: Top

Machine Dependent Features
**************************

   `ld' has additional features on some platforms; the following
sections describe them.  Machines where `ld' has no additional
functionality are not listed.

* Menu:

* H8/300::                      `ld' and the H8/300
* i960::                        `ld' and the Intel 960 family


File: ld.info,  Node: H8/300,  Next: i960,  Up: Machine Dependent

`ld' and the H8/300
===================

   For the H8/300, `ld' can perform these global optimizations when you
specify the `-relax' command-line option.

*relaxing address modes*
     `ld' finds all `jsr' and `jmp' instructions whose targets are
     within eight bits, and turns them into eight-bit program-counter
     relative `bsr' and `bra' instructions, respectively.

*synthesizing instructions*
     `ld' finds all `mov.b' instructions which use the sixteen-bit
     absolute address form, but refer to the top page of memory, and
     changes them to use the eight-bit address form.  (That is: the
     linker turns `mov.b `@@'AA:16' into `mov.b `@@'AA:8' whenever the
     address AA is in the top page of memory).


File: ld.info,  Node: i960,  Prev: H8/300,  Up: Machine Dependent

`ld' and the Intel 960 family
=============================

   You can use the `-AARCHITECTURE' command line option to specify one
of the two-letter names identifying members of the 960 family; the
option specifies the desired output target, and warns of any
incompatible instructions in the input files.  It also modifies the
linker's search strategy for archive libraries, to support the use of
libraries specific to each particular architecture, by including in the
search loop names suffixed with the string identifying the architecture.

   For example, if your `ld' command line included `-ACA' as well as
`-ltry', the linker would look (in its built-in search paths, and in
any paths you specify with `-L') for a library with the names

     try
     libtry.a
     tryca
     libtryca.a

The first two possibilities would be considered in any event; the last
two are due to the use of `-ACA'.

   You can meaningfully use `-A' more than once on a command line, since
the 960 architecture family allows combination of target architectures;
each use will add another pair of name variants to search for when `-l'
specifies a library.

   `ld' supports the `-relax' option for the i960 family.  If you
specify `-relax', `ld' finds all `balx' and `calx' instructions whose
targets are within 24 bits, and turns them into 24-bit program-counter
relative `bal' and `cal' instructions, respectively.  `ld' also turns
`cal' instructions into `bal' instructions when it determines that the
target subroutine is a leaf routine (that is, the target subroutine does
not itself call any subroutines).


File: ld.info,  Node: BFD,  Next: MRI,  Prev: Machine Dependent,  Up: Top

BFD
***

   The linker accesses object and archive files using the BFD libraries.
These libraries allow the linker to use the same routines to operate on
object files whatever the object file format.  A different object file
format can be supported simply by creating a new BFD back end and adding
it to the library.  To conserve runtime memory, however, the linker and
associated tools are usually configured to support only a subset of the
object file formats available.  You can use `objdump -i' (*note
objdump: (binutils.info)objdump.) to list all the formats available for
your configuration.

   As with most implementations, BFD is a compromise between several
conflicting requirements. The major factor influencing BFD design was
efficiency: any time used converting between formats is time which
would not have been spent had BFD not been involved. This is partly
offset by abstraction payback; since BFD simplifies applications and
back ends, more time and care may be spent optimizing algorithms for a
greater speed.

   One minor artifact of the BFD solution which you should bear in mind
is the potential for information loss.  There are two places where
useful information can be lost using the BFD mechanism: during
conversion and during output. *Note BFD information loss::.

* Menu:

* BFD outline::                 How it works: an outline of BFD


File: ld.info,  Node: BFD outline,  Up: BFD

How it works: an outline of BFD
===============================

   When an object file is opened, BFD subroutines automatically
determine the format of the input object file.  They then build a
descriptor in memory with pointers to routines that will be used to
access elements of the object file's data structures.

   As different information from the the object files is required, BFD
reads from different sections of the file and processes them.  For
example, a very common operation for the linker is processing symbol
tables.  Each BFD back end provides a routine for converting between
the object file's representation of symbols and an internal canonical
format. When the linker asks for the symbol table of an object file, it
calls through a memory pointer to the routine from the relevant BFD
back end which reads and converts the table into a canonical form.  The
linker then operates upon the canonical form. When the link is finished
and the linker writes the output file's symbol table, another BFD back
end routine is called to take the newly created symbol table and
convert it into the chosen output format.

* Menu:

* BFD information loss::	Information Loss
* Canonical format::		The BFD	canonical object-file format


File: ld.info,  Node: BFD information loss,  Next: Canonical format,  Up: BFD outline

Information Loss
----------------

   *Information can be lost during output.* The output formats
supported by BFD do not provide identical facilities, and information
which can be described in one form has nowhere to go in another format.
One example of this is alignment information in `b.out'. There is
nowhere in an `a.out' format file to store alignment information on the
contained data, so when a file is linked from `b.out' and an `a.out'
image is produced, alignment information will not propagate to the
output file. (The linker will still use the alignment information
internally, so the link is performed correctly).

   Another example is COFF section names. COFF files may contain an
unlimited number of sections, each one with a textual section name. If
the target of the link is a format which does not have many sections
(e.g., `a.out') or has sections without names (e.g., the Oasys format),
the link cannot be done simply. You can circumvent this problem by
describing the desired input-to-output section mapping with the linker
command language.

   *Information can be lost during canonicalization.* The BFD internal
canonical form of the external formats is not exhaustive; there are
structures in input formats for which there is no direct representation
internally.  This means that the BFD back ends cannot maintain all
possible data richness through the transformation between external to
internal and back to external formats.

   This limitation is only a problem when an application reads one
format and writes another.  Each BFD back end is responsible for
maintaining as much data as possible, and the internal BFD canonical
form has structures which are opaque to the BFD core, and exported only
to the back ends. When a file is read in one format, the canonical form
is generated for BFD and the application. At the same time, the back
end saves away any information which may otherwise be lost. If the data
is then written back in the same format, the back end routine will be
able to use the canonical form provided by the BFD core as well as the
information it prepared earlier.  Since there is a great deal of
commonality between back ends, there is no information lost when
linking or copying big endian COFF to little endian COFF, or `a.out' to
`b.out'.  When a mixture of formats is linked, the information is only
lost from the files whose format differs from the destination.


File: ld.info,  Node: Canonical format,  Prev: BFD information loss,  Up: BFD outline

The BFD canonical object-file format
------------------------------------

   The greatest potential for loss of information occurs when there is
the least overlap between the information provided by the source
format, that stored by the canonical format, and that needed by the
destination format. A brief description of the canonical form may help
you understand which kinds of data you can count on preserving across
conversions.

*files*
     Information stored on a per-file basis includes target machine
     architecture, particular implementation format type, a demand
     pageable bit, and a write protected bit.  Information like Unix
     magic numbers is not stored here--only the magic numbers' meaning,
     so a `ZMAGIC' file would have both the demand pageable bit and the
     write protected text bit set.  The byte order of the target is
     stored on a per-file basis, so that big- and little-endian object
     files may be used with one another.

*sections*
     Each section in the input file contains the name of the section,
     the section's original address in the object file, size and
     alignment information, various flags, and pointers into other BFD
     data structures.

*symbols*
     Each symbol contains a pointer to the information for the object
     file which originally defined it, its name, its value, and various
     flag bits.  When a BFD back end reads in a symbol table, it
     relocates all symbols to make them relative to the base of the
     section where they were defined.  Doing this ensures that each
     symbol points to its containing section.  Each symbol also has a
     varying amount of hidden private data for the BFD back end.  Since
     the symbol points to the original file, the private data format
     for that symbol is accessible.  `ld' can operate on a collection
     of symbols of wildly different formats without problems.

     Normal global and simple local symbols are maintained on output,
     so an output file (no matter its format) will retain symbols
     pointing to functions and to global, static, and common variables.
     Some symbol information is not worth retaining; in `a.out', type
     information is stored in the symbol table as long symbol names.
     This information would be useless to most COFF debuggers; the
     linker has command line switches to allow users to throw it away.

     There is one word of type information within the symbol, so if the
     format supports symbol type information within symbols (for
     example, COFF, IEEE, Oasys) and the type is simple enough to fit
     within one word (nearly everything but aggregates), the
     information will be preserved.

*relocation level*
     Each canonical BFD relocation record contains a pointer to the
     symbol to relocate to, the offset of the data to relocate, the
     section the data is in, and a pointer to a relocation type
     descriptor. Relocation is performed by passing messages through
     the relocation type descriptor and the symbol pointer. Therefore,
     relocations can be performed on output data using a relocation
     method that is only available in one of the input formats. For
     instance, Oasys provides a byte relocation format.  A relocation
     record requesting this relocation type would point indirectly to a
     routine to perform this, so the relocation may be performed on a
     byte being written to a 68k COFF file, even though 68k COFF has no
     such relocation type.

*line numbers*
     Object formats can contain, for debugging purposes, some form of
     mapping between symbols, source line numbers, and addresses in the
     output file.  These addresses have to be relocated along with the
     symbol information.  Each symbol with an associated list of line
     number records points to the first record of the list.  The head
     of a line number list consists of a pointer to the symbol, which
     allows finding out the address of the function whose line number
     is being described. The rest of the list is made up of pairs:
     offsets into the section and line numbers. Any format which can
     simply derive this information can pass it successfully between
     formats (COFF, IEEE and Oasys).


File: ld.info,  Node: MRI,  Next: Index,  Prev: BFD,  Up: Top

MRI Compatible Script Files
***************************

   To aid users making the transition to GNU `ld' from the MRI linker,
`ld' can use MRI compatible linker scripts as an alternative to the
more general-purpose linker scripting language described in *Note
Command Language: Commands.  MRI compatible linker scripts have a much
simpler command set than the scripting language otherwise used with
`ld'.  GNU `ld' supports the most commonly used MRI linker commands;
these commands are described here.

   In general, MRI scripts aren't of much use with the `a.out' object
file format, since it only has three sections and MRI scripts lack some
features to make use of them.

   You can specify a file containing an MRI-compatible script using the
`-c' command-line option.

   Each command in an MRI-compatible script occupies its own line; each
command line starts with the keyword that identifies the command (though
blank lines are also allowed for punctuation).  If a line of an
MRI-compatible script begins with an unrecognized keyword, `ld' issues
a warning message, but continues processing the script.

   Lines beginning with `*' are comments.

   You can write these commands using all upper-case letters, or all
lower case; for example, `chip' is the same as `CHIP'.  The following
list shows only the upper-case form of each command.

`ABSOLUTE SECNAME'
`ABSOLUTE SECNAME, SECNAME, ... SECNAME'
     Normally, `ld' includes in the output file all sections from all
     the input files.  However, in an MRI-compatible script, you can
     use the `ABSOLUTE' command to restrict the sections that will be
     present in your output program.  If the `ABSOLUTE' command is used
     at all in a script, then only the sections named explicitly in
     `ABSOLUTE' commands will appear in the linker output.  You can
     still use other input sections (whatever you select on the command
     line, or using `LOAD') to resolve addresses in the output file.

`ALIAS OUT-SECNAME, IN-SECNAME'
     Use this command to place the data from input section IN-SECNAME
     in a section called OUT-SECNAME in the linker output file.

     IN-SECNAME may be an integer.

`ALIGN SECNAME = EXPRESSION'
     Align the section called SECNAME to EXPRESSION.  The EXPRESSION
     should be a power of two.

`BASE EXPRESSION'
     Use the value of EXPRESSION as the lowest address (other than
     absolute addresses) in the output file.

`CHIP EXPRESSION'
`CHIP EXPRESSION, EXPRESSION'
     This command does nothing; it is accepted only for compatibility.

`END'
     This command does nothing whatever; it's only accepted for
     compatibility.

`FORMAT OUTPUT-FORMAT'
     Similar to the `OUTPUT_FORMAT' command in the more general linker
     language, but restricted to one of these output formats:

       1. S-records, if OUTPUT-FORMAT is `S'

       2. IEEE, if OUTPUT-FORMAT is `IEEE'

       3. COFF (the `coff-m68k' variant in BFD), if OUTPUT-FORMAT is
          `COFF'

`LIST ANYTHING...'
     Print (to the standard output file) a link map, as produced by the
     `ld' command-line option `-M'.

     The keyword `LIST' may be followed by anything on the same line,
     with no change in its effect.

`LOAD FILENAME'
`LOAD FILENAME, FILENAME, ... FILENAME'
     Include one or more object file FILENAME in the link; this has the
     same effect as specifying FILENAME directly on the `ld' command
     line.

`NAME OUTPUT-NAME'
     OUTPUT-NAME is the name for the program produced by `ld'; the
     MRI-compatible command `NAME' is equivalent to the command-line
     option `-o' or the general script language command `OUTPUT'.

`ORDER SECNAME, SECNAME, ... SECNAME'
`ORDER SECNAME SECNAME SECNAME'
     Normally, `ld' orders the sections in its output file in the order
     in which they first appear in the input files.  In an
     MRI-compatible script, you can override this ordering with the
     `ORDER' command.  The sections you list with `ORDER' will appear
     first in your output file, in the order specified.

`PUBLIC NAME=EXPRESSION'
`PUBLIC NAME,EXPRESSION'
`PUBLIC NAME EXPRESSION'
     Supply a value (EXPRESSION) for external symbol NAME used in the
     linker input files.

`SECT SECNAME, EXPRESSION'
`SECT SECNAME=EXPRESSION'
`SECT SECNAME EXPRESSION'
     You can use any of these three forms of the `SECT' command to
     specify the start address (EXPRESSION) for section SECNAME.  If
     you have more than one `SECT' statement for the same SECNAME, only
     the *first* sets the start address.

@


1.1
log
@Initial revision
@
text
@@


1.1.1.1
log
@Initial GNU binutils 2.6 import
@
text
@@


1.1.1.2
log
@Import of binutils-2.8.1 from Cygnus/FSF
@
text
@d1 1
a1 1
This is Info file ld.info, produced by Makeinfo-1.64 from the input
d10 1
a10 2
   Copyright (C) 1991, 92, 93, 94, 95, 96, 1997 Free Software
Foundation, Inc.
a25 320
File: ld.info,  Node: Assignment,  Next: Arithmetic Functions,  Prev: Evaluation,  Up: Expressions

Assignment: Defining Symbols
----------------------------

   You may create global symbols, and assign values (addresses) to
global symbols, using any of the C assignment operators:

`SYMBOL  = EXPRESSION ;'
`SYMBOL &= EXPRESSION ;'
`SYMBOL += EXPRESSION ;'
`SYMBOL -= EXPRESSION ;'
`SYMBOL *= EXPRESSION ;'
`SYMBOL /= EXPRESSION ;'
   Two things distinguish assignment from other operators in `ld'
expressions.
   * Assignment may only be used at the root of an expression; `a=b+3;'
     is allowed, but `a+b=3;' is an error.

   * You must place a trailing semicolon (";") at the end of an
     assignment statement.

   Assignment statements may appear:
   * as commands in their own right in an `ld' script; or

   * as independent statements within a `SECTIONS' command; or

   * as part of the contents of a section definition in a `SECTIONS'
     command.

   The first two cases are equivalent in effect--both define a symbol
with an absolute address.  The last case defines a symbol whose address
is relative to a particular section (*note SECTIONS::.).

   When a linker expression is evaluated and assigned to a variable, it
is given either an absolute or a relocatable type. An absolute
expression type is one in which the symbol contains the value that it
will have in the output file; a relocatable expression type is one in
which the value is expressed as a fixed offset from the base of a
section.

   The type of the expression is controlled by its position in the
script file.  A symbol assigned within a section definition is created
relative to the base of the section; a symbol assigned in any other
place is created as an absolute symbol. Since a symbol created within a
section definition is relative to the base of the section, it will
remain relocatable if relocatable output is requested.  A symbol may be
created with an absolute value even when assigned to within a section
definition by using the absolute assignment function `ABSOLUTE'.  For
example, to create an absolute symbol whose address is the last byte of
an output section named `.data':
     SECTIONS{ ...
       .data :
         {
           *(.data)
           _edata = ABSOLUTE(.) ;
         }
     ... }

   The linker tries to put off the evaluation of an assignment until all
the terms in the source expression are known (*note Evaluation::.).  For
instance, the sizes of sections cannot be known until after allocation,
so assignments dependent upon these are not performed until after
allocation. Some expressions, such as those depending upon the location
counter "dot", `.' must be evaluated during allocation. If the result
of an expression is required, but the value is not available, then an
error results.  For example, a script like the following
     SECTIONS { ...
       text 9+this_isnt_constant :
         { ...
         }
     ... }

will cause the error message "`Non constant expression for initial
address'".

   In some cases, it is desirable for a linker script to define a symbol
only if it is referenced, and only if it is not defined by any object
included in the link.  For example, traditional linkers defined the
symbol `etext'.  However, ANSI C requires that the user be able to use
`etext' as a function name without encountering an error.  The
`PROVIDE' keyword may be used to define a symbol, such as `etext', only
if it is referenced but not defined.  The syntax is `PROVIDE(SYMBOL =
EXPRESSION)'.


File: ld.info,  Node: Arithmetic Functions,  Next: Semicolons,  Prev: Assignment,  Up: Expressions

Arithmetic Functions
--------------------

   The command language includes a number of built-in functions for use
in link script expressions.
`ABSOLUTE(EXP)'
     Return the absolute (non-relocatable, as opposed to non-negative)
     value of the expression EXP.  Primarily useful to assign an
     absolute value to a symbol within a section definition, where
     symbol values are normally section-relative.

`ADDR(SECTION)'
     Return the absolute address of the named SECTION.  Your script must
     previously have defined the location of that section. In the
     following example, `symbol_1' and `symbol_2' are assigned identical
     values:
          SECTIONS{ ...
            .output1 :
              {
              start_of_output_1 = ABSOLUTE(.);
              ...
              }
            .output :
              {
              symbol_1 = ADDR(.output1);
              symbol_2 = start_of_output_1;
              }
          ... }

`LOADADDR(SECTION)'
     Return the absolute load address of the named SECTION.  This is
     normally the same as `ADDR', but it may be different if the `AT'
     keyword is used in the section definition (*note Section
     Options::.).

`ALIGN(EXP)'
     Return the result of the current location counter (`.') aligned to
     the next EXP boundary.  EXP must be an expression whose value is a
     power of two.  This is equivalent to
          (. + EXP - 1) & ~(EXP - 1)

     `ALIGN' doesn't change the value of the location counter--it just
     does arithmetic on it.  As an example, to align the output `.data'
     section to the next `0x2000' byte boundary after the preceding
     section and to set a variable within the section to the next
     `0x8000' boundary after the input sections:
          SECTIONS{ ...
            .data ALIGN(0x2000): {
              *(.data)
              variable = ALIGN(0x8000);
            }
          ... }

     The first use of `ALIGN' in this example specifies the location of
     a section because it is used as the optional START attribute of a
     section definition (*note Section Options::.).  The second use
     simply defines the value of a variable.

     The built-in `NEXT' is closely related to `ALIGN'.

`DEFINED(SYMBOL)'
     Return 1 if SYMBOL is in the linker global symbol table and is
     defined, otherwise return 0.  You can use this function to provide
     default values for symbols.  For example, the following
     command-file fragment shows how to set a global symbol `begin' to
     the first location in the `.text' section--but if a symbol called
     `begin' already existed, its value is preserved:

          SECTIONS{ ...
            .text : {
              begin = DEFINED(begin) ? begin : . ;
              ...
            }
          ... }

`NEXT(EXP)'
     Return the next unallocated address that is a multiple of EXP.
     This function is closely related to `ALIGN(EXP)'; unless you use
     the `MEMORY' command to define discontinuous memory for the output
     file, the two functions are equivalent.

`SIZEOF(SECTION)'
     Return the size in bytes of the named SECTION, if that section has
     been allocated.  In the following example, `symbol_1' and
     `symbol_2' are assigned identical values:
          SECTIONS{ ...
            .output {
              .start = . ;
              ...
              .end = . ;
              }
            symbol_1 = .end - .start ;
            symbol_2 = SIZEOF(.output);
          ... }

`SIZEOF_HEADERS'
`sizeof_headers'
     Return the size in bytes of the output file's headers.  You can
     use this number as the start address of the first section, if you
     choose, to facilitate paging.

`MAX(EXP1, EXP2)'
     Returns the maximum of EXP1 and EXP2.

`MIN(EXP1, EXP2)'
     Returns the minimum of EXP1 and EXP2.


File: ld.info,  Node: Semicolons,  Prev: Arithmetic Functions,  Up: Expressions

Semicolons
----------

   Semicolons (";") are required in the following places.  In all other
places they can appear for aesthetic reasons but are otherwise ignored.

`Assignment'
     Semicolons must appear at the end of assignment expressions.
     *Note Assignment::

`PHDRS'
     Semicolons must appear at the end of a `PHDRS' statement.  *Note
     PHDRS::


File: ld.info,  Node: MEMORY,  Next: SECTIONS,  Prev: Expressions,  Up: Commands

Memory Layout
=============

   The linker's default configuration permits allocation of all
available memory.  You can override this configuration by using the
`MEMORY' command.  The `MEMORY' command describes the location and size
of blocks of memory in the target.  By using it carefully, you can
describe which memory regions may be used by the linker, and which
memory regions it must avoid.  The linker does not shuffle sections to
fit into the available regions, but does move the requested sections
into the correct regions and issue errors when the regions become too
full.

   A command file may contain at most one use of the `MEMORY' command;
however, you can define as many blocks of memory within it as you wish.
The syntax is:

     MEMORY
       {
         NAME (ATTR) : ORIGIN = ORIGIN, LENGTH = LEN
         ...
       }

`NAME'
     is a name used internally by the linker to refer to the region. Any
     symbol name may be used.  The region names are stored in a separate
     name space, and will not conflict with symbols, file names or
     section names.  Use distinct names to specify multiple regions.

`(ATTR)'
     is an optional list of attributes, permitted for compatibility
     with the AT&T linker but not used by `ld' beyond checking that the
     attribute list is valid.  Valid attribute lists must be made up of
     the characters "`LIRWX'".  If you omit the attribute list, you may
     omit the parentheses around it as well.

`ORIGIN'
     is the start address of the region in physical memory.  It is an
     expression that must evaluate to a constant before memory
     allocation is performed. The keyword `ORIGIN' may be abbreviated
     to `org' or `o' (but not, for example, `ORG').

`LEN'
     is the size in bytes of the region (an expression).  The keyword
     `LENGTH' may be abbreviated to `len' or `l'.

   For example, to specify that memory has two regions available for
allocation--one starting at 0 for 256 kilobytes, and the other starting
at `0x40000000' for four megabytes:

     MEMORY
       {
       rom : ORIGIN = 0, LENGTH = 256K
       ram : org = 0x40000000, l = 4M
       }

   Once you have defined a region of memory named MEM, you can direct
specific output sections there by using a command ending in `>MEM'
within the `SECTIONS' command (*note Section Options::.).  If the
combined output sections directed to a region are too big for the
region, the linker will issue an error message.


File: ld.info,  Node: SECTIONS,  Next: PHDRS,  Prev: MEMORY,  Up: Commands

Specifying Output Sections
==========================

   The `SECTIONS' command controls exactly where input sections are
placed into output sections, their order in the output file, and to
which output sections they are allocated.

   You may use at most one `SECTIONS' command in a script file, but you
can have as many statements within it as you wish.  Statements within
the `SECTIONS' command can do one of three things:

   * define the entry point;

   * assign a value to a symbol;

   * describe the placement of a named output section, and which input
     sections go into it.

   You can also use the first two operations--defining the entry point
and defining symbols--outside the `SECTIONS' command: *note Entry
Point::., and *Note Assignment::.  They are permitted here as well for
your convenience in reading the script, so that symbols and the entry
point can be defined at meaningful points in your output-file layout.

   If you do not use a `SECTIONS' command, the linker places each input
section into an identically named output section in the order that the
sections are first encountered in the input files.  If all input
sections are present in the first file, for example, the order of
sections in the output file will match the order in the first input
file.

* Menu:

* Section Definition::          Section Definitions
* Section Placement::           Section Placement
* Section Data Expressions::    Section Data Expressions
* Section Options::             Optional Section Attributes
* Overlays::			Overlays


a57 4
   The special SECNAME `/DISCARD/' may be used to discard input
sections.  Any sections which are assigned to an output section named
`/DISCARD/' are not included in the final link output.

d61 1
a61 1
     .foo { *(.foo) }
d98 1
a98 1
`FILENAME( SECTION , SECTION, ... )'
d146 1
a146 23
   In any place where you may use a specific file or section name, you
may also use a wildcard pattern.  The linker handles wildcards much as
the Unix shell does.  A `*' character matches any number of characters.
A `?' character matches any single character.  The sequence `[CHARS]'
will match a single instance of any of the CHARS; the `-' character may
be used to specify a range of characters, as in `[a-z]' to match any
lower case letter.  A `\' character may be used to quote the following
character.

   When a file name is matched with a wildcard, the wildcard characters
will not match a `/' character (used to separate directory names on
Unix).  A pattern consisting of a single `*' character is an exception;
it will always match any file name.  In a section name, the wildcard
characters will match a `/' character.

   Wildcards only match files which are explicitly specified on the
command line.  The linker does not search directories to expand
wildcards.  However, if you specify a simple file name--a name with no
wildcard characters--in a linker script, and the file name is not also
specified on the command line, the linker will attempt to open the file
as though it appeared on the command line.

   In the following example, the command script arranges the output file
a183 13
   This example shows how wildcard patterns might be used to partition
files.  All `.text' sections are placed in `.text', and all `.bss'
sections are placed in `.bss'.  For all files beginning with an upper
case character, the `.data' section is placed into `.DATA'; for all
other files, the `.data' section is placed into `.data'.

     SECTIONS {
       .text : { *(.text) }
       .DATA : { [A-Z]*(.data) }
       .data : { *(.data) }
       .bss : { *(.bss) }
     }

d193 1
a193 1
additional statements involve expressions (*note Expressions::.).
d291 1
a291 1
File: ld.info,  Node: Section Options,  Next: Overlays,  Prev: Section Data Expressions,  Up: SECTIONS
d302 1
a302 1
       { CONTENTS } >REGION :PHDR =FILL
d307 1
a307 1
*Note Section Placement::, for details on CONTENTS.  The remaining
d309 1
a309 1
`:PHDR', and `=FILL'--are all optional.
d314 1
a314 1
     START can be represented as any expression. The following example
a383 8
`:PHDR'
     Assign this section to a segment described by a program header.
     *Note PHDRS::.  If a section is assigned to one or more segments,
     then all subsequent allocated sections will be assigned to those
     segments as well, unless they use an explicitly `:PHDR' modifier.
     To prevent a section from being assigned to a segment when it would
     normally default to one, use `:NONE'.

d394 1
a394 215
File: ld.info,  Node: Overlays,  Prev: Section Options,  Up: SECTIONS

Overlays
--------

   The `OVERLAY' command provides an easy way to describe sections
which are to be loaded as part of a single memory image but are to be
run at the same memory address.  At run time, some sort of overlay
manager will copy the overlaid sections in and out of the runtime memory
address as required, perhaps by simply manipulating addressing bits.
This approach can be useful, for example, when a certain region of
memory is faster than another.

   The `OVERLAY' command is used within a `SECTIONS' command.  It
appears as follows:
     OVERLAY START : [ NOCROSSREFS ] AT ( LDADDR )
        {
          SECNAME1 { CONTENTS } :PHDR =FILL
          SECNAME2 { CONTENTS } :PHDR =FILL
          ...
        } >REGION :PHDR =FILL

   Everything is optional except `OVERLAY' (a keyword), and each
section must have a name (SECNAME1 and SECNAME2 above).  The section
definitions within the `OVERLAY' construct are identical to those
within the general `SECTIONS' contruct (*note SECTIONS::.), except that
no addresses and no memory regions may be defined for sections within
an `OVERLAY'.

   The sections are all defined with the same starting address.  The
load addresses of the sections are arranged such that they are
consecutive in memory starting at the load address used for the
`OVERLAY' as a whole (as with normal section definitions, the load
address is optional, and defaults to the start address; the start
address is also optional, and defaults to `.').

   If the `NOCROSSREFS' keyword is used, and there any references among
the sections, the linker will report an error.  Since the sections all
run at the same address, it normally does not make sense for one
section to refer directly to another.  *Note NOCROSSREFS: Option
Commands.

   For each section within the `OVERLAY', the linker automatically
defines two symbols.  The symbol `__load_start_SECNAME' is defined as
the starting load address of the section.  The symbol
`__load_stop_SECNAME' is defined as the final load address of the
section.  Any characters within SECNAME which are not legal within C
identifiers are removed.  C (or assembler) code may use these symbols
to move the overlaid sections around as necessary.

   At the end of the overlay, the value of `.' is set to the start
address of the overlay plus the size of the largest section.

   Here is an example.  Remember that this would appear inside a
`SECTIONS' construct.

     OVERLAY 0x1000 : AT (0x4000)
        {
          .text0 { o1/*.o(.text) }
          .text1 { o2/*.o(.text) }
        }

   This will define both `.text0' and `.text1' to start at address
0x1000.  `.text0' will be loaded at address 0x4000, and `.text1' will
be loaded immediately after `.text0'.  The following symbols will be
defined: `__load_start_text0', `__load_stop_text0',
`__load_start_text1', `__load_stop_text1'.

   C code to copy overlay `.text1' into the overlay area might look
like the following.

     extern char __load_start_text1, __load_stop_text1;
       memcpy ((char *) 0x1000, &__load_start_text1,
               &__load_stop_text1 - &__load_start_text1);

   Note that the `OVERLAY' command is just syntactic sugar, since
everything it does can be done using the more basic commands.  The above
example could have been written identically as follows.

     .text0 0x1000 : AT (0x4000) { o1/*.o(.text) }
       __load_start_text0 = LOADADDR (.text0);
       __load_stop_text0 = LOADADDR (.text0) + SIZEOF (.text0);
       .text1 0x1000 : AT (0x4000 + SIZEOF (.text0)) { o2/*.o(.text) }
       __load_start_text1 = LOADADDR (.text1);
       __load_stop_text1 = LOADADDR (.text1) + SIZEOF (.text1);
       . = 0x1000 + MAX (SIZEOF (.text0), SIZEOF (.text1));


File: ld.info,  Node: PHDRS,  Next: Entry Point,  Prev: SECTIONS,  Up: Commands

ELF Program Headers
===================

   The ELF object file format uses "program headers", which are read by
the system loader and describe how the program should be loaded into
memory.  These program headers must be set correctly in order to run the
program on a native ELF system.  The linker will create reasonable
program headers by default.  However, in some cases, it is desirable to
specify the program headers more precisely; the `PHDRS' command may be
used for this purpose.  When the `PHDRS' command is used, the linker
will not generate any program headers itself.

   The `PHDRS' command is only meaningful when generating an ELF output
file.  It is ignored in other cases.  This manual does not describe the
details of how the system loader interprets program headers; for more
information, see the ELF ABI.  The program headers of an ELF file may
be displayed using the `-p' option of the `objdump' command.

   This is the syntax of the `PHDRS' command.  The words `PHDRS',
`FILEHDR', `AT', and `FLAGS' are keywords.

     PHDRS
     {
       NAME TYPE [ FILEHDR ] [ PHDRS ] [ AT ( ADDRESS ) ]
             [ FLAGS ( FLAGS ) ] ;
     }

   The NAME is used only for reference in the `SECTIONS' command of the
linker script.  It does not get put into the output file.

   Certain program header types describe segments of memory which are
loaded from the file by the system loader.  In the linker script, the
contents of these segments are specified by directing allocated output
sections to be placed in the segment.  To do this, the command
describing the output section in the `SECTIONS' command should use
`:NAME', where NAME is the name of the program header as it appears in
the `PHDRS' command.  *Note Section Options::.

   It is normal for certain sections to appear in more than one segment.
This merely implies that one segment of memory contains another.  This
is specified by repeating `:NAME', using it once for each program
header in which the section is to appear.

   If a section is placed in one or more segments using `:NAME', then
all subsequent allocated sections which do not specify `:NAME' are
placed in the same segments.  This is for convenience, since generally
a whole set of contiguous sections will be placed in a single segment.
To prevent a section from being assigned to a segment when it would
normally default to one, use `:NONE'.

   The `FILEHDR' and `PHDRS' keywords which may appear after the
program header type also indicate contents of the segment of memory.
The `FILEHDR' keyword means that the segment should include the ELF
file header.  The `PHDRS' keyword means that the segment should include
the ELF program headers themselves.

   The TYPE may be one of the following.  The numbers indicate the
value of the keyword.

`PT_NULL' (0)
     Indicates an unused program header.

`PT_LOAD' (1)
     Indicates that this program header describes a segment to be
     loaded from the file.

`PT_DYNAMIC' (2)
     Indicates a segment where dynamic linking information can be found.

`PT_INTERP' (3)
     Indicates a segment where the name of the program interpreter may
     be found.

`PT_NOTE' (4)
     Indicates a segment holding note information.

`PT_SHLIB' (5)
     A reserved program header type, defined but not specified by the
     ELF ABI.

`PT_PHDR' (6)
     Indicates a segment where the program headers may be found.

EXPRESSION
     An expression giving the numeric type of the program header.  This
     may be used for types not defined above.

   It is possible to specify that a segment should be loaded at a
particular address in memory.  This is done using an `AT' expression.
This is identical to the `AT' command used in the `SECTIONS' command
(*note Section Options::.).  Using the `AT' command for a program
header overrides any information in the `SECTIONS' command.

   Normally the segment flags are set based on the sections.  The
`FLAGS' keyword may be used to explicitly specify the segment flags.
The value of FLAGS must be an integer.  It is used to set the `p_flags'
field of the program header.

   Here is an example of the use of `PHDRS'.  This shows a typical set
of program headers used on a native ELF system.

     PHDRS
     {
       headers PT_PHDR PHDRS ;
       interp PT_INTERP ;
       text PT_LOAD FILEHDR PHDRS ;
       data PT_LOAD ;
       dynamic PT_DYNAMIC ;
     }
     
     SECTIONS
     {
       . = SIZEOF_HEADERS;
       .interp : { *(.interp) } :text :interp
       .text : { *(.text) } :text
       .rodata : { *(.rodata) } /* defaults to :text */
       ...
       . = . + 0x1000; /* move to a new page in memory */
       .data : { *(.data) } :data
       .dynamic : { *(.dynamic) } :data :dynamic
       ...
     }


File: ld.info,  Node: Entry Point,  Next: Version Script,  Prev: PHDRS,  Up: Commands
d438 244
a681 1
File: ld.info,  Node: Version Script,  Next: Option Commands,  Prev: Entry Point,  Up: Commands
d683 2
a684 2
Version Script
==============
d686 238
a923 127
   The linker command script includes a command specifically for
specifying a version script, and is only meaningful for ELF platforms
that support shared libraries.  A version script can be build directly
into the linker script that you are using, or you can supply the
version script as just another input file to the linker at the time
that you link.  The command script syntax is:
     VERSION { version script contents }
   The version script can also be specified to the linker by means of
the `--version-script' linker command line option.  Version scripts are
only meaningful when creating shared libraries.

   The format of the version script itself is identical to that used by
Sun's linker in Solaris 2.5.  Versioning is done by defining a tree of
version nodes with the names and interdependencies specified in the
version script.  The version script can specify which symbols are bound
to which version nodes, and it can reduce a specified set of symbols to
local scope so that they are not globally visible outside of the shared
library.

   The easiest way to demonstrate the version script language is with a
few examples.

     VERS_1.1 {
     	 global:
     		 foo1;
     	 local:
     		 old*;
     		 original*;
     		 new*;
     };
     
     VERS_1.2 {
     		 foo2;
     } VERS_1.1;
     
     VERS_2.0 {
     		 bar1; bar2;
     } VERS_1.2;

   In this example, three version nodes are defined.  `VERS_1.1' is the
first version node defined, and has no other dependencies.  The symbol
`foo1' is bound to this version node, and a number of symbols that have
appeared within various object files are reduced in scope to local so
that they are not visible outside of the shared library.

   Next, the node `VERS_1.2' is defined.  It depends upon `VERS_1.1'.
The symbol `foo2' is bound to this version node.

   Finally, the node `VERS_2.0' is defined.  It depends upon
`VERS_1.2'.  The symbols `bar1' and `bar2' are bound to this version
node.

   Symbols defined in the library which aren't specifically bound to a
version node are effectively bound to an unspecified base version of the
library.  It is possible to bind all otherwise unspecified symbols to a
given version node using `global: *' somewhere in the version script.

   Lexically the names of the version nodes have no specific meaning
other than what they might suggest to the person reading them.  The
`2.0' version could just as well have appeared in between `1.1' and
`1.2'.  However, this would be a confusing way to write a version
script.

   When you link an application against a shared library that has
versioned symbols, the application itself knows which version of each
symbol it requires, and it also knows which version nodes it needs from
each shared library it is linked against.  Thus at runtime, the dynamic
loader can make a quick check to make sure that the libraries you have
linked against do in fact supply all of the version nodes that the
application will need to resolve all of the dynamic symbols.  In this
way it is possible for the dynamic linker to know with certainty that
all external symbols that it needs will be resolvable without having to
search for each symbol reference.

   The symbol versioning is in effect a much more sophisticated way of
doing minor version checking that SunOS does.  The fundamental problem
that is being addressed here is that typically references to external
functions are bound on an as-needed basis, and are not all bound when
the application starts up.  If a shared library is out of date, a
required interface may be missing; when the application tries to use
that interface, it may suddenly and unexpectedly fail.  With symbol
versioning, the user will get a warning when they start their program if
the libraries being used with the application are too old.

   There are several GNU extensions to Sun's versioning approach.  The
first of these is the ability to bind a symbol to a version node in the
source file where the symbol is defined instead of in the versioning
script.  This was done mainly to reduce the burden on the library
maintainer.  This can be done by putting something like:

     __asm__(".symver original_foo,foo@@VERS_1.1");

   in the C source file.  This renamed the function `original_foo' to
be an alias for `foo' bound to the version node `VERS_1.1'.  The
`local:' directive can be used to prevent the symbol `original_foo'
from being exported.

   The second GNU extension is to allow multiple versions of the same
function to appear in a given shared library.  In this way an
incompatible change to an interface can take place without increasing
the major version number of the shared library, while still allowing
applications linked against the old interface to continue to function.

   This can only be accomplished by using multiple `.symver' directives
in the assembler.  An example of this would be:

     __asm__(".symver original_foo,foo@@");
     __asm__(".symver old_foo,foo@@VERS_1.1");
     __asm__(".symver old_foo1,foo@@VERS_1.2");
     __asm__(".symver new_foo,foo@@@@VERS_2.0");

   In this example, `foo@@' represents the symbol `foo' bound to the
unspecified base version of the symbol.  The source file that contains
this example would define 4 C functions: `original_foo', `old_foo',
`old_foo1', and `new_foo'.

   When you have multiple definitions of a given symbol, there needs to
be some way to specify a default version to which external references to
this symbol will be bound.  This can be accomplished with the
`foo@@@@VERS_2.0' type of `.symver' directive.  Only one version of a
symbol can be declared 'default' in this manner - otherwise you would
effectively have multiple definitions of the same symbol.

   If you wish to bind a reference to a specific version of the symbol
within the shared library, you can use the aliases of convenience (i.e.
`old_foo'), or you can use the `.symver' directive to specifically bind
to an external version of the function in question.
@


1.1.1.3
log
@Long delayed import of binutils-2.10.1. Turns out art@@ needs some alpha
bug-fixes...
@
text
@d1 2
a2 1
This is ld.info, produced by makeinfo version 4.0 from ./ld.texinfo.
d8 1
a8 1
   This file documents the GNU linker LD version 2.10.1.
d10 2
a11 2
   Copyright (C) 1991, 92, 93, 94, 95, 96, 97, 98, 99, 2000 Free
Software Foundation, Inc.
d27 1
a27 1
File: ld.info,  Node: Environment,  Prev: Options,  Up: Invocation
d29 1
a29 380
Environment Variables
=====================

   You can change the behavior of `ld' with the environment variables
`GNUTARGET', `LDEMULATION', and `COLLECT_NO_DEMANGLE'.

   `GNUTARGET' determines the input-file object format if you don't use
`-b' (or its synonym `--format').  Its value should be one of the BFD
names for an input format (*note BFD::).  If there is no `GNUTARGET' in
the environment, `ld' uses the natural format of the target. If
`GNUTARGET' is set to `default' then BFD attempts to discover the input
format by examining binary input files; this method often succeeds, but
there are potential ambiguities, since there is no method of ensuring
that the magic number used to specify object-file formats is unique.
However, the configuration procedure for BFD on each system places the
conventional format for that system first in the search-list, so
ambiguities are resolved in favor of convention.

   `LDEMULATION' determines the default emulation if you don't use the
`-m' option.  The emulation can affect various aspects of linker
behaviour, particularly the default linker script.  You can list the
available emulations with the `--verbose' or `-V' options.  If the `-m'
option is not used, and the `LDEMULATION' environment variable is not
defined, the default emulation depends upon how the linker was
configured.

   Normally, the linker will default to demangling symbols.  However, if
`COLLECT_NO_DEMANGLE' is set in the environment, then it will default
to not demangling symbols.  This environment variable is used in a
similar fashion by the `gcc' linker wrapper program.  The default may
be overridden by the `--demangle' and `--no-demangle' options.


File: ld.info,  Node: Scripts,  Next: Machine Dependent,  Prev: Invocation,  Up: Top

Linker Scripts
**************

   Every link is controlled by a "linker script".  This script is
written in the linker command language.

   The main purpose of the linker script is to describe how the
sections in the input files should be mapped into the output file, and
to control the memory layout of the output file.  Most linker scripts
do nothing more than this.  However, when necessary, the linker script
can also direct the linker to perform many other operations, using the
commands described below.

   The linker always uses a linker script.  If you do not supply one
yourself, the linker will use a default script that is compiled into the
linker executable.  You can use the `--verbose' command line option to
display the default linker script.  Certain command line options, such
as `-r' or `-N', will affect the default linker script.

   You may supply your own linker script by using the `-T' command line
option.  When you do this, your linker script will replace the default
linker script.

   You may also use linker scripts implicitly by naming them as input
files to the linker, as though they were files to be linked.  *Note
Implicit Linker Scripts::.

* Menu:

* Basic Script Concepts::	Basic Linker Script Concepts
* Script Format::		Linker Script Format
* Simple Example::		Simple Linker Script Example
* Simple Commands::		Simple Linker Script Commands
* Assignments::			Assigning Values to Symbols
* SECTIONS::			SECTIONS Command
* MEMORY::			MEMORY Command
* PHDRS::			PHDRS Command
* VERSION::			VERSION Command
* Expressions::			Expressions in Linker Scripts
* Implicit Linker Scripts::	Implicit Linker Scripts


File: ld.info,  Node: Basic Script Concepts,  Next: Script Format,  Up: Scripts

Basic Linker Script Concepts
============================

   We need to define some basic concepts and vocabulary in order to
describe the linker script language.

   The linker combines input files into a single output file.  The
output file and each input file are in a special data format known as an
"object file format".  Each file is called an "object file".  The
output file is often called an "executable", but for our purposes we
will also call it an object file.  Each object file has, among other
things, a list of "sections".  We sometimes refer to a section in an
input file as an "input section"; similarly, a section in the output
file is an "output section".

   Each section in an object file has a name and a size.  Most sections
also have an associated block of data, known as the "section contents".
A section may be marked as "loadable", which mean that the contents
should be loaded into memory when the output file is run.  A section
with no contents may be "allocatable", which means that an area in
memory should be set aside, but nothing in particular should be loaded
there (in some cases this memory must be zeroed out).  A section which
is neither loadable nor allocatable typically contains some sort of
debugging information.

   Every loadable or allocatable output section has two addresses.  The
first is the "VMA", or virtual memory address.  This is the address the
section will have when the output file is run.  The second is the
"LMA", or load memory address.  This is the address at which the
section will be loaded.  In most cases the two addresses will be the
same.  An example of when they might be different is when a data section
is loaded into ROM, and then copied into RAM when the program starts up
(this technique is often used to initialize global variables in a ROM
based system).  In this case the ROM address would be the LMA, and the
RAM address would be the VMA.

   You can see the sections in an object file by using the `objdump'
program with the `-h' option.

   Every object file also has a list of "symbols", known as the "symbol
table".  A symbol may be defined or undefined.  Each symbol has a name,
and each defined symbol has an address, among other information.  If
you compile a C or C++ program into an object file, you will get a
defined symbol for every defined function and global or static
variable.  Every undefined function or global variable which is
referenced in the input file will become an undefined symbol.

   You can see the symbols in an object file by using the `nm' program,
or by using the `objdump' program with the `-t' option.


File: ld.info,  Node: Script Format,  Next: Simple Example,  Prev: Basic Script Concepts,  Up: Scripts

Linker Script Format
====================

   Linker scripts are text files.

   You write a linker script as a series of commands.  Each command is
either a keyword, possibly followed by arguments, or an assignment to a
symbol.  You may separate commands using semicolons.  Whitespace is
generally ignored.

   Strings such as file or format names can normally be entered
directly.  If the file name contains a character such as a comma which
would otherwise serve to separate file names, you may put the file name
in double quotes.  There is no way to use a double quote character in a
file name.

   You may include comments in linker scripts just as in C, delimited by
`/*' and `*/'.  As in C, comments are syntactically equivalent to
whitespace.


File: ld.info,  Node: Simple Example,  Next: Simple Commands,  Prev: Script Format,  Up: Scripts

Simple Linker Script Example
============================

   Many linker scripts are fairly simple.

   The simplest possible linker script has just one command:
`SECTIONS'.  You use the `SECTIONS' command to describe the memory
layout of the output file.

   The `SECTIONS' command is a powerful command.  Here we will describe
a simple use of it.  Let's assume your program consists only of code,
initialized data, and uninitialized data.  These will be in the
`.text', `.data', and `.bss' sections, respectively.  Let's assume
further that these are the only sections which appear in your input
files.

   For this example, let's say that the code should be loaded at address
0x10000, and that the data should start at address 0x8000000.  Here is a
linker script which will do that:
     SECTIONS
     {
       . = 0x10000;
       .text : { *(.text) }
       . = 0x8000000;
       .data : { *(.data) }
       .bss : { *(.bss) }
     }

   You write the `SECTIONS' command as the keyword `SECTIONS', followed
by a series of symbol assignments and output section descriptions
enclosed in curly braces.

   The first line inside the `SECTIONS' command of the above example
sets the value of the special symbol `.', which is the location
counter.  If you do not specify the address of an output section in some
other way (other ways are described later), the address is set from the
current value of the location counter.  The location counter is then
incremented by the size of the output section.  At the start of the
`SECTIONS' command, the location counter has the value `0'.

   The second line defines an output section, `.text'.  The colon is
required syntax which may be ignored for now.  Within the curly braces
after the output section name, you list the names of the input sections
which should be placed into this output section.  The `*' is a wildcard
which matches any file name.  The expression `*(.text)' means all
`.text' input sections in all input files.

   Since the location counter is `0x10000' when the output section
`.text' is defined, the linker will set the address of the `.text'
section in the output file to be `0x10000'.

   The remaining lines define the `.data' and `.bss' sections in the
output file.  The linker will place the `.data' output section at
address `0x8000000'.  After the linker places the `.data' output
section, the value of the location counter will be `0x8000000' plus the
size of the `.data' output section.  The effect is that the linker will
place the `.bss' output section immediately after the `.data' output
section in memory

   The linker will ensure that each output section has the required
alignment, by increasing the location counter if necessary.  In this
example, the specified addresses for the `.text' and `.data' sections
will probably satisfy any alignment constraints, but the linker may
have to create a small gap between the `.data' and `.bss' sections.

   That's it!  That's a simple and complete linker script.


File: ld.info,  Node: Simple Commands,  Next: Assignments,  Prev: Simple Example,  Up: Scripts

Simple Linker Script Commands
=============================

   In this section we describe the simple linker script commands.

* Menu:

* Entry Point::			Setting the entry point
* File Commands::		Commands dealing with files

* Format Commands::		Commands dealing with object file formats

* Miscellaneous Commands::	Other linker script commands


File: ld.info,  Node: Entry Point,  Next: File Commands,  Up: Simple Commands

Setting the entry point
-----------------------

   The first instruction to execute in a program is called the "entry
point".  You can use the `ENTRY' linker script command to set the entry
point.  The argument is a symbol name:
     ENTRY(SYMBOL)

   There are several ways to set the entry point.  The linker will set
the entry point by trying each of the following methods in order, and
stopping when one of them succeeds:
   * the `-e' ENTRY command-line option;

   * the `ENTRY(SYMBOL)' command in a linker script;

   * the value of the symbol `start', if defined;

   * the address of the first byte of the `.text' section, if present;

   * The address `0'.


File: ld.info,  Node: File Commands,  Next: Format Commands,  Prev: Entry Point,  Up: Simple Commands

Commands dealing with files
---------------------------

   Several linker script commands deal with files.

`INCLUDE FILENAME'
     Include the linker script FILENAME at this point.  The file will
     be searched for in the current directory, and in any directory
     specified with the `-L' option.  You can nest calls to `INCLUDE'
     up to 10 levels deep.

`INPUT(FILE, FILE, ...)'
`INPUT(FILE FILE ...)'
     The `INPUT' command directs the linker to include the named files
     in the link, as though they were named on the command line.

     For example, if you always want to include `subr.o' any time you do
     a link, but you can't be bothered to put it on every link command
     line, then you can put `INPUT (subr.o)' in your linker script.

     In fact, if you like, you can list all of your input files in the
     linker script, and then invoke the linker with nothing but a `-T'
     option.

     The linker will first try to open the file in the current
     directory.  If it is not found, the linker will search through the
     archive library search path.  See the description of `-L' in *Note
     Command Line Options: Options.

     If you use `INPUT (-lFILE)', `ld' will transform the name to
     `libFILE.a', as with the command line argument `-l'.

     When you use the `INPUT' command in an implicit linker script, the
     files will be included in the link at the point at which the linker
     script file is included.  This can affect archive searching.

`GROUP(FILE, FILE, ...)'
`GROUP(FILE FILE ...)'
     The `GROUP' command is like `INPUT', except that the named files
     should all be archives, and they are searched repeatedly until no
     new undefined references are created.  See the description of `-('
     in *Note Command Line Options: Options.

`OUTPUT(FILENAME)'
     The `OUTPUT' command names the output file.  Using
     `OUTPUT(FILENAME)' in the linker script is exactly like using `-o
     FILENAME' on the command line (*note Command Line Options:
     Options.).  If both are used, the command line option takes
     precedence.

     You can use the `OUTPUT' command to define a default name for the
     output file other than the usual default of `a.out'.

`SEARCH_DIR(PATH)'
     The `SEARCH_DIR' command adds PATH to the list of paths where `ld'
     looks for archive libraries.  Using `SEARCH_DIR(PATH)' is exactly
     like using `-L PATH' on the command line (*note Command Line
     Options: Options.).  If both are used, then the linker will search
     both paths.  Paths specified using the command line option are
     searched first.

`STARTUP(FILENAME)'
     The `STARTUP' command is just like the `INPUT' command, except
     that FILENAME will become the first input file to be linked, as
     though it were specified first on the command line.  This may be
     useful when using a system in which the entry point is always the
     start of the first file.


File: ld.info,  Node: Format Commands,  Next: Miscellaneous Commands,  Prev: File Commands,  Up: Simple Commands

Commands dealing with object file formats
-----------------------------------------

   A couple of linker script commands deal with object file formats.

`OUTPUT_FORMAT(BFDNAME)'
`OUTPUT_FORMAT(DEFAULT, BIG, LITTLE)'
     The `OUTPUT_FORMAT' command names the BFD format to use for the
     output file (*note BFD::).  Using `OUTPUT_FORMAT(BFDNAME)' is
     exactly like using `-oformat BFDNAME' on the command line (*note
     Command Line Options: Options.).  If both are used, the command
     line option takes precedence.

     You can use `OUTPUT_FORMAT' with three arguments to use different
     formats based on the `-EB' and `-EL' command line options.  This
     permits the linker script to set the output format based on the
     desired endianness.

     If neither `-EB' nor `-EL' are used, then the output format will
     be the first argument, DEFAULT.  If `-EB' is used, the output
     format will be the second argument, BIG.  If `-EL' is used, the
     output format will be the third argument, LITTLE.

     For example, the default linker script for the MIPS ELF target
     uses this command:
          OUTPUT_FORMAT(elf32-bigmips, elf32-bigmips, elf32-littlemips)
     This says that the default format for the output file is
     `elf32-bigmips', but if the user uses the `-EL' command line
     option, the output file will be created in the `elf32-littlemips'
     format.

`TARGET(BFDNAME)'
     The `TARGET' command names the BFD format to use when reading input
     files.  It affects subsequent `INPUT' and `GROUP' commands.  This
     command is like using `-b BFDNAME' on the command line (*note
     Command Line Options: Options.).  If the `TARGET' command is used
     but `OUTPUT_FORMAT' is not, then the last `TARGET' command is also
     used to set the format for the output file.  *Note BFD::.


File: ld.info,  Node: Miscellaneous Commands,  Prev: Format Commands,  Up: Simple Commands

Other linker script commands
d32 2
a33 1
   There are a few other linker scripts commands.
d35 2
a36 61
`ASSERT(EXP, MESSAGE)'
     Ensure that EXP is non-zero.  If it is zero, then exit the linker
     with an error code, and print MESSAGE.

`EXTERN(SYMBOL SYMBOL ...)'
     Force SYMBOL to be entered in the output file as an undefined
     symbol.  Doing this may, for example, trigger linking of additional
     modules from standard libraries.  You may list several SYMBOLs for
     each `EXTERN', and you may use `EXTERN' multiple times.  This
     command has the same effect as the `-u' command-line option.

`FORCE_COMMON_ALLOCATION'
     This command has the same effect as the `-d' command-line option:
     to make `ld' assign space to common symbols even if a relocatable
     output file is specified (`-r').

`NOCROSSREFS(SECTION SECTION ...)'
     This command may be used to tell `ld' to issue an error about any
     references among certain output sections.

     In certain types of programs, particularly on embedded systems when
     using overlays, when one section is loaded into memory, another
     section will not be.  Any direct references between the two
     sections would be errors.  For example, it would be an error if
     code in one section called a function defined in the other section.

     The `NOCROSSREFS' command takes a list of output section names.  If
     `ld' detects any cross references between the sections, it reports
     an error and returns a non-zero exit status.  Note that the
     `NOCROSSREFS' command uses output section names, not input section
     names.

`OUTPUT_ARCH(BFDARCH)'
     Specify a particular output machine architecture.  The argument is
     one of the names used by the BFD library (*note BFD::).  You can
     see the architecture of an object file by using the `objdump'
     program with the `-f' option.


File: ld.info,  Node: Assignments,  Next: SECTIONS,  Prev: Simple Commands,  Up: Scripts

Assigning Values to Symbols
===========================

   You may assign a value to a symbol in a linker script.  This will
define the symbol as a global symbol.

* Menu:

* Simple Assignments::		Simple Assignments
* PROVIDE::			PROVIDE


File: ld.info,  Node: Simple Assignments,  Next: PROVIDE,  Up: Assignments

Simple Assignments
------------------

   You may assign to a symbol using any of the C assignment operators:

`SYMBOL = EXPRESSION ;'
d41 26
a66 14
`SYMBOL <<= EXPRESSION ;'
`SYMBOL >>= EXPRESSION ;'
`SYMBOL &= EXPRESSION ;'
`SYMBOL |= EXPRESSION ;'
   The first case will define SYMBOL to the value of EXPRESSION.  In
the other cases, SYMBOL must already be defined, and the value will be
adjusted accordingly.

   The special symbol name `.' indicates the location counter.  You may
only use this within a `SECTIONS' command.

   The semicolon after EXPRESSION is required.

   Expressions are defined below; see *Note Expressions::.
d68 12
a79 14
   You may write symbol assignments as commands in their own right, or
as statements within a `SECTIONS' command, or as part of an output
section description in a `SECTIONS' command.

   The section of the symbol will be set from the section of the
expression; for more information, see *Note Expression Section::.

   Here is an example showing the three different places that symbol
assignments may be used:

     floating_point = 0;
     SECTIONS
     {
       .text :
d81 2
a82 2
           *(.text)
           _etext = .;
d84 1
a84 3
       _bdata = (. + 3) & ~ 4;
       .data : { *(.data) }
     }
d86 13
a98 8
In this example, the symbol `floating_point' will be defined as zero.
The symbol `_etext' will be defined as the address following the last
`.text' input section.  The symbol `_bdata' will be defined as the
address following the `.text' output section aligned upward to a 4 byte
boundary.


File: ld.info,  Node: PROVIDE,  Prev: Simple Assignments,  Up: Assignments
d100 2
a101 2
PROVIDE
-------
d104 154
a257 33
only if it is referenced and is not defined by any object included in
the link.  For example, traditional linkers defined the symbol `etext'.
However, ANSI C requires that the user be able to use `etext' as a
function name without encountering an error.  The `PROVIDE' keyword may
be used to define a symbol, such as `etext', only if it is referenced
but not defined.  The syntax is `PROVIDE(SYMBOL = EXPRESSION)'.

   Here is an example of using `PROVIDE' to define `etext':
     SECTIONS
     {
       .text :
         {
           *(.text)
           _etext = .;
           PROVIDE(etext = .);
         }
     }

   In this example, if the program defines `_etext' (with a leading
underscore), the linker will give a multiple definition error.  If, on
the other hand, the program defines `etext' (with no leading
underscore), the linker will silently use the definition in the program.
If the program references `etext' but does not define it, the linker
will use the definition in the linker script.


File: ld.info,  Node: SECTIONS,  Next: MEMORY,  Prev: Assignments,  Up: Scripts

SECTIONS command
================

   The `SECTIONS' command tells the linker how to map input sections
into output sections, and how to place the output sections in memory.
d259 1
a259 54
   The format of the `SECTIONS' command is:
     SECTIONS
     {
       SECTIONS-COMMAND
       SECTIONS-COMMAND
       ...
     }

   Each SECTIONS-COMMAND may of be one of the following:

   * an `ENTRY' command (*note Entry command: Entry Point.)

   * a symbol assignment (*note Assignments::)

   * an output section description

   * an overlay description

   The `ENTRY' command and symbol assignments are permitted inside the
`SECTIONS' command for convenience in using the location counter in
those commands.  This can also make the linker script easier to
understand because you can use those commands at meaningful points in
the layout of the output file.

   Output section descriptions and overlay descriptions are described
below.

   If you do not use a `SECTIONS' command in your linker script, the
linker will place each input section into an identically named output
section in the order that the sections are first encountered in the
input files.  If all input sections are present in the first file, for
example, the order of sections in the output file will match the order
in the first input file.  The first section will be at address zero.

* Menu:

* Output Section Description::	Output section description
* Output Section Name::		Output section name
* Output Section Address::	Output section address
* Input Section::		Input section description
* Output Section Data::		Output section data
* Output Section Keywords::	Output section keywords
* Output Section Discarding::	Output section discarding
* Output Section Attributes::	Output section attributes
* Overlay Description::		Overlay description


File: ld.info,  Node: Output Section Description,  Next: Output Section Name,  Up: SECTIONS

Output section description
--------------------------

   The full description of an output section looks like this:
     SECTION [ADDRESS] [(TYPE)] : [AT(LMA)]
d261 1
a261 2
         OUTPUT-SECTION-COMMAND
         OUTPUT-SECTION-COMMAND
d263 1
a263 1
       } [>REGION] [AT>LMA_REGION] [:PHDR :PHDR ...] [=FILLEXP]
d265 26
a290 2
   Most output sections do not use most of the optional section
attributes.
d292 5
a296 29
   The whitespace around SECTION is required, so that the section name
is unambiguous.  The colon and the curly braces are also required.  The
line breaks and other white space are optional.

   Each OUTPUT-SECTION-COMMAND may be one of the following:

   * a symbol assignment (*note Assignments::)

   * an input section description (*note Input Section::)

   * data values to include directly (*note Output Section Data::)

   * a special output section keyword (*note Output Section Keywords::)


File: ld.info,  Node: Output Section Name,  Next: Output Section Address,  Prev: Output Section Description,  Up: SECTIONS

Output section name
-------------------

   The name of the output section is SECTION.  SECTION must meet the
constraints of your output format.  In formats which only support a
limited number of sections, such as `a.out', the name must be one of
the names supported by the format (`a.out', for example, allows only
`.text', `.data' or `.bss'). If the output format supports any number
of sections, but with numbers and not names (as is the case for Oasys),
the name should be supplied as a quoted numeric string.  A section name
may consist of any sequence of characters, but a name which contains
any unusual characters such as commas must be quoted.
d298 5
a302 2
   The output section name `/DISCARD/' is special; *Note Output Section
Discarding::.
d305 1
a305 1
File: ld.info,  Node: Output Section Address,  Next: Input Section,  Prev: Output Section Name,  Up: SECTIONS
d307 2
a308 15
Output section address
----------------------

   The ADDRESS is an expression for the VMA (the virtual memory
address) of the output section.  If you do not provide ADDRESS, the
linker will set it based on REGION if present, or otherwise based on
the current value of the location counter.

   If you provide ADDRESS, the address of the output section will be
set to precisely that.  If you provide neither ADDRESS nor REGION, then
the address of the output section will be set to the current value of
the location counter aligned to the alignment requirements of the
output section.  The alignment requirement of the output section is the
strictest alignment of any input section contained within the output
section.
d310 3
a312 2
   For example,
     .text . : { *(.text) }
d314 3
a316 2
and
     .text : { *(.text) }
d318 1
a318 10
are subtly different.  The first will set the address of the `.text'
output section to the current value of the location counter.  The
second will set it to the current value of the location counter aligned
to the strictest alignment of a `.text' input section.

   The ADDRESS may be an arbitrary expression; *Note Expressions::.
For example, if you want to align the section on a 0x10 byte boundary,
so that the lowest four bits of the section address are zero, you could
do something like this:
     .text ALIGN(0x10) : { *(.text) }
d320 1
a320 8
This works because `ALIGN' returns the current location counter aligned
upward to the specified value.

   Specifying ADDRESS for a section will change the value of the
location counter.


File: ld.info,  Node: Input Section,  Next: Output Section Data,  Prev: Output Section Address,  Up: SECTIONS
d322 2
a323 2
Input section description
-------------------------
d325 5
a329 2
   The most common output section command is an input section
description.
d331 6
a336 4
   The input section description is the most basic linker script
operation.  You use output sections to tell the linker how to lay out
your program in memory.  You use input section descriptions to tell the
linker how to map the input files into your memory layout.
d340 5
a344 5
* Input Section Basics::	Input section basics
* Input Section Wildcards::	Input section wildcard patterns
* Input Section Common::	Input section for common symbols
* Input Section Keep::		Input section and garbage collection
* Input Section Example::	Input section example
d347 1
a347 1
File: ld.info,  Node: Input Section Basics,  Next: Input Section Wildcards,  Up: Input Section
d349 2
a350 2
Input section basics
....................
d352 30
a381 2
   An input section description consists of a file name optionally
followed by a list of section names in parentheses.
d383 6
a388 43
   The file name and the section name may be wildcard patterns, which we
describe further below (*note Input Section Wildcards::).

   The most common input section description is to include all input
sections with a particular name in the output section.  For example, to
include all input `.text' sections, you would write:
     *(.text)

Here the `*' is a wildcard which matches any file name.  To exclude a
list of files from matching the file name wildcard, EXCLUDE_FILE may be
used to match all files except the ones specified in the EXCLUDE_FILE
list.  For example:
     (*(EXCLUDE_FILE (*crtend.o *otherfile.o) .ctors))
   will cause all .ctors sections from all files except `crtend.o' and
`otherfile.o' to be included.

   There are two ways to include more than one section:
     *(.text .rdata)
     *(.text) *(.rdata)

The difference between these is the order in which the `.text' and
`.rdata' input sections will appear in the output section.  In the
first example, they will be intermingled.  In the second example, all
`.text' input sections will appear first, followed by all `.rdata'
input sections.

   You can specify a file name to include sections from a particular
file.  You would do this if one or more of your files contain special
data that needs to be at a particular location in memory.  For example:
     data.o(.data)

   If you use a file name without a list of sections, then all sections
in the input file will be included in the output section.  This is not
commonly done, but it may by useful on occasion.  For example:
     data.o

   When you use a file name which does not contain any wild card
characters, the linker will first see if you also specified the file
name on the linker command line or in an `INPUT' command.  If you did
not, the linker will attempt to open the file as an input file, as
though it appeared on the command line.  Note that this differs from an
`INPUT' command, because the linker will not search for the file in the
archive search path.
d391 1
a391 1
File: ld.info,  Node: Input Section Wildcards,  Next: Input Section Common,  Prev: Input Section Basics,  Up: Input Section
d393 2
a394 2
Input section wildcard patterns
...............................
d396 10
a405 7
   In an input section description, either the file name or the section
name or both may be wildcard patterns.

   The file name of `*' seen in many examples is a simple wildcard
pattern for the file name.

   The wildcard patterns are like those used by the Unix shell.
d407 72
a478 13
`*'
     matches any number of characters

`?'
     matches any single character

`[CHARS]'
     matches a single instance of any of the CHARS; the `-' character
     may be used to specify a range of characters, as in `[a-z]' to
     match any lower case letter

`\'
     quotes the following character
d483 2
a484 2
it will always match any file name, whether it contains a `/' or not.
In a section name, the wildcard characters will match a `/' character.
d486 11
a496 22
   File name wildcard patterns only match files which are explicitly
specified on the command line or in an `INPUT' command.  The linker
does not search directories to expand wildcards.

   If a file name matches more than one wildcard pattern, or if a file
name appears explicitly and is also matched by a wildcard pattern, the
linker will use the first match in the linker script.  For example, this
sequence of input section descriptions is probably in error, because the
`data.o' rule will not be used:
     .data : { *(.data) }
     .data1 : { data.o(.data) }

   Normally, the linker will place files and sections matched by
wildcards in the order in which they are seen during the link.  You can
change this by using the `SORT' keyword, which appears before a wildcard
pattern in parentheses (e.g., `SORT(.text*)').  When the `SORT' keyword
is used, the linker will sort the files or sections into ascending
order by name before placing them in the output file.

   If you ever get confused about where input sections are going, use
the `-M' linker option to generate a map file.  The map file shows
precisely how input sections are mapped to output sections.
a497 6
   This example shows how wildcard patterns might be used to partition
files.  This linker script directs the linker to place all `.text'
sections in `.text' and all `.bss' sections in `.bss'.  The linker will
place the `.data' section from all files beginning with an upper case
character in `.DATA'; for all other files, the linker will place the
`.data' section in `.data'.
a499 1
       .DATA : { [A-Z]*(.data) }
d501 1
a501 1
       .bss : { *(.bss) }
d504 8
a511 57

File: ld.info,  Node: Input Section Common,  Next: Input Section Keep,  Prev: Input Section Wildcards,  Up: Input Section

Input section for common symbols
................................

   A special notation is needed for common symbols, because in many
object file formats common symbols do not have a particular input
section.  The linker treats common symbols as though they are in an
input section named `COMMON'.

   You may use file names with the `COMMON' section just as with any
other input sections.  You can use this to place common symbols from a
particular input file in one section while common symbols from other
input files are placed in another section.

   In most cases, common symbols in input files will be placed in the
`.bss' section in the output file.  For example:
     .bss { *(.bss) *(COMMON) }

   Some object file formats have more than one type of common symbol.
For example, the MIPS ELF object file format distinguishes standard
common symbols and small common symbols.  In this case, the linker will
use a different special section name for other types of common symbols.
In the case of MIPS ELF, the linker uses `COMMON' for standard common
symbols and `.scommon' for small common symbols.  This permits you to
map the different types of common symbols into memory at different
locations.

   You will sometimes see `[COMMON]' in old linker scripts.  This
notation is now considered obsolete.  It is equivalent to `*(COMMON)'.


File: ld.info,  Node: Input Section Keep,  Next: Input Section Example,  Prev: Input Section Common,  Up: Input Section

Input section and garbage collection
....................................

   When link-time garbage collection is in use (`--gc-sections'), it is
often useful to mark sections that should not be eliminated.  This is
accomplished by surrounding an input section's wildcard entry with
`KEEP()', as in `KEEP(*(.init))' or `KEEP(SORT(*)(.ctors))'.


File: ld.info,  Node: Input Section Example,  Prev: Input Section Keep,  Up: Input Section

Input section example
.....................

   The following example is a complete linker script.  It tells the
linker to read all of the sections from file `all.o' and place them at
the start of output section `outputa' which starts at location
`0x10000'.  All of section `.input1' from file `foo.o' follows
immediately, in the same output section.  All of section `.input2' from
`foo.o' goes into output section `outputb', followed by section
`.input1' from `foo1.o'.  All of the remaining `.input1' and `.input2'
sections from any files are written to output section `outputc'.
d531 5
a535 2

File: ld.info,  Node: Output Section Data,  Next: Output Section Keywords,  Prev: Input Section,  Up: SECTIONS
d537 6
a542 48
Output section data
-------------------

   You can include explicit bytes of data in an output section by using
`BYTE', `SHORT', `LONG', `QUAD', or `SQUAD' as an output section
command.  Each keyword is followed by an expression in parentheses
providing the value to store (*note Expressions::).  The value of the
expression is stored at the current value of the location counter.

   The `BYTE', `SHORT', `LONG', and `QUAD' commands store one, two,
four, and eight bytes (respectively).  After storing the bytes, the
location counter is incremented by the number of bytes stored.

   For example, this will store the byte 1 followed by the four byte
value of the symbol `addr':
     BYTE(1)
     LONG(addr)

   When using a 64 bit host or target, `QUAD' and `SQUAD' are the same;
they both store an 8 byte, or 64 bit, value.  When both host and target
are 32 bits, an expression is computed as 32 bits.  In this case `QUAD'
stores a 32 bit value zero extended to 64 bits, and `SQUAD' stores a 32
bit value sign extended to 64 bits.

   If the object file format of the output file has an explicit
endianness, which is the normal case, the value will be stored in that
endianness.  When the object file format does not have an explicit
endianness, as is true of, for example, S-records, the value will be
stored in the endianness of the first input object file.

   You may use the `FILL' command to set the fill pattern for the
current section.  It is followed by an expression in parentheses.  Any
otherwise unspecified regions of memory within the section (for example,
gaps left due to the required alignment of input sections) are filled
with the two least significant bytes of the expression, repeated as
necessary.  A `FILL' statement covers memory locations after the point
at which it occurs in the section definition; by including more than
one `FILL' statement, you can have different fill patterns in different
parts of an output section.

   This example shows how to fill unspecified regions of memory with the
value `0x9090':
     FILL(0x9090)

   The `FILL' command is similar to the `=FILLEXP' output section
attribute (*note Output Section Fill::), but it only affects the part
of the section following the `FILL' command, rather than the entire
section.  If both are used, the `FILL' command takes precedence.
d545 1
a545 1
File: ld.info,  Node: Output Section Keywords,  Next: Output Section Discarding,  Prev: Output Section Data,  Up: SECTIONS
d547 2
a548 2
Output section keywords
-----------------------
d550 8
a557 2
   There are a couple of keywords which can appear as output section
commands.
d560 46
a605 62
     The command tells the linker to create a symbol for each input
     file.  The name of each symbol will be the name of the
     corresponding input file.  The section of each symbol will be the
     output section in which the `CREATE_OBJECT_SYMBOLS' command
     appears.

     This is conventional for the a.out object file format.  It is not
     normally used for any other object file format.

`CONSTRUCTORS'
     When linking using the a.out object file format, the linker uses an
     unusual set construct to support C++ global constructors and
     destructors.  When linking object file formats which do not support
     arbitrary sections, such as ECOFF and XCOFF, the linker will
     automatically recognize C++ global constructors and destructors by
     name.  For these object file formats, the `CONSTRUCTORS' command
     tells the linker to place constructor information in the output
     section where the `CONSTRUCTORS' command appears.  The
     `CONSTRUCTORS' command is ignored for other object file formats.

     The symbol `__CTOR_LIST__' marks the start of the global
     constructors, and the symbol `__DTOR_LIST' marks the end.  The
     first word in the list is the number of entries, followed by the
     address of each constructor or destructor, followed by a zero
     word.  The compiler must arrange to actually run the code.  For
     these object file formats GNU C++ normally calls constructors from
     a subroutine `__main'; a call to `__main' is automatically
     inserted into the startup code for `main'.  GNU C++ normally runs
     destructors either by using `atexit', or directly from the function
     `exit'.

     For object file formats such as `COFF' or `ELF' which support
     arbitrary section names, GNU C++ will normally arrange to put the
     addresses of global constructors and destructors into the `.ctors'
     and `.dtors' sections.  Placing the following sequence into your
     linker script will build the sort of table which the GNU C++
     runtime code expects to see.

                __CTOR_LIST__ = .;
                LONG((__CTOR_END__ - __CTOR_LIST__) / 4 - 2)
                *(.ctors)
                LONG(0)
                __CTOR_END__ = .;
                __DTOR_LIST__ = .;
                LONG((__DTOR_END__ - __DTOR_LIST__) / 4 - 2)
                *(.dtors)
                LONG(0)
                __DTOR_END__ = .;

     If you are using the GNU C++ support for initialization priority,
     which provides some control over the order in which global
     constructors are run, you must sort the constructors at link time
     to ensure that they are executed in the correct order.  When using
     the `CONSTRUCTORS' command, use `SORT(CONSTRUCTORS)' instead.
     When using the `.ctors' and `.dtors' sections, use
     `*(SORT(.ctors))' and `*(SORT(.dtors))' instead of just
     `*(.ctors)' and `*(.dtors)'.

     Normally the compiler and linker will handle these issues
     automatically, and you will not need to concern yourself with
     them.  However, you may need to consider this if you are using C++
     and writing your own linker scripts.
d607 42
a648 22

File: ld.info,  Node: Output Section Discarding,  Next: Output Section Attributes,  Prev: Output Section Keywords,  Up: SECTIONS

Output section discarding
-------------------------

   The linker will not create output section which do not have any
contents.  This is for convenience when referring to input sections that
may or may not be present in any of the input files.  For example:
     .foo { *(.foo) }

will only create a `.foo' section in the output file if there is a
`.foo' section in at least one input file.

   If you use anything other than an input section description as an
output section command, such as a symbol assignment, then the output
section will always be created, even if there are no matching input
sections.

   The special output section name `/DISCARD/' may be used to discard
input sections.  Any input sections which are assigned to an output
section named `/DISCARD/' are not included in the output file.
d651 1
a651 1
File: ld.info,  Node: Output Section Attributes,  Next: Overlay Description,  Prev: Output Section Discarding,  Up: SECTIONS
d653 2
a654 2
Output section attributes
-------------------------
d656 2
a657 11
   We showed above that the full description of an output section looked
like this:
     SECTION [ADDRESS] [(TYPE)] : [AT(LMA)]
       {
         OUTPUT-SECTION-COMMAND
         OUTPUT-SECTION-COMMAND
         ...
       } [>REGION] [AT>LMA_REGION] [:PHDR :PHDR ...] [=FILLEXP]
We've already described SECTION, ADDRESS, and
OUTPUT-SECTION-COMMAND.  In this section we will describe the remaining
section attributes.
d659 6
a664 7
* Menu:

* Output Section Type::		Output section type
* Output Section LMA::		Output section LMA
* Output Section Region::	Output section region
* Output Section Phdr::		Output section phdr
* Output Section Fill::		Output section fill
d666 203
a868 2

File: ld.info,  Node: Output Section Type,  Next: Output Section LMA,  Up: Output Section Attributes
d870 2
a871 2
Output section type
...................
d873 4
a876 25
   Each output section may have a type.  The type is a keyword in
parentheses.  The following types are defined:

`NOLOAD'
     The section should be marked as not loadable, so that it will not
     be loaded into memory when the program is run.

`DSECT'
`COPY'
`INFO'
`OVERLAY'
     These type names are supported for backward compatibility, and are
     rarely used.  They all have the same effect: the section should be
     marked as not allocatable, so that no memory is allocated for the
     section when the program is run.

   The linker normally sets the attributes of an output section based on
the input sections which map into it.  You can override this by using
the section type.  For example, in the script sample below, the `ROM'
section is addressed at memory location `0' and does not need to be
loaded when the program is run.  The contents of the `ROM' section will
appear in the linker output file as usual.
     SECTIONS {
       ROM 0 (NOLOAD) : { ... }
       ...
d879 2
a880 2

File: ld.info,  Node: Output Section LMA,  Next: Output Section Region,  Prev: Output Section Type,  Up: Output Section Attributes
d882 67
a948 2
Output section LMA
..................
d950 2
a951 18
   Every section has a virtual address (VMA) and a load address (LMA);
see *Note Basic Script Concepts::.  The address expression which may
appear in an output section description sets the VMA (*note Output
Section Address::).

   The linker will normally set the LMA equal to the VMA.  You can
change that by using the `AT' keyword.  The expression LMA that follows
the `AT' keyword specifies the load address of the section.
Alternatively, with `AT>LMA_REGION' expression, you may specify a
memory region for the section's load address. *Note MEMORY::.

   This feature is designed to make it easy to build a ROM image.  For
example, the following linker script creates three output sections: one
called `.text', which starts at `0x1000', one called `.mdata', which is
loaded at the end of the `.text' section even though its VMA is
`0x2000', and one called `.bss' to hold uninitialized data at address
`0x3000'.  The symbol `_data' is defined with the value `0x2000', which
shows that the location counter holds the VMA value, not the LMA value.
d953 7
a959 8
     SECTIONS
       {
       .text 0x1000 : { *(.text) _etext = . ; }
       .mdata 0x2000 :
         AT ( ADDR (.text) + SIZEOF (.text) )
         { _data = . ; *(.data); _edata = . ;  }
       .bss 0x3000 :
         { _bstart = . ;  *(.bss) *(COMMON) ; _bend = . ;}
a960 10

   The run-time initialization code for use with a program generated
with this linker script would include something like the following, to
copy the initialized data from the ROM image to its runtime address.
Notice how this code takes advantage of the symbols defined by the
linker script.

     extern char _etext, _data, _edata, _bstart, _bend;
     char *src = &_etext;
     char *dst = &_data;
d962 11
a972 3
     /* ROM has data at end of text; copy it. */
     while (dst < &_edata) {
       *dst++ = *src++;
a973 4
     
     /* Zero bss */
     for (dst = &_bstart; dst< &_bend; dst++)
       *dst = 0;
d976 1
a976 1
File: ld.info,  Node: Output Section Region,  Next: Output Section Phdr,  Prev: Output Section LMA,  Up: Output Section Attributes
d978 2
a979 2
Output section region
.....................
d981 4
a984 2
   You can assign a section to a previously defined region of memory by
using `>REGION'.  *Note MEMORY::.
d986 10
a995 3
   Here is a simple example:
     MEMORY { rom : ORIGIN = 0x1000, LENGTH = 0x1000 }
     SECTIONS { ROM : { *(.text) } >rom }
d997 1
a997 2

File: ld.info,  Node: Output Section Phdr,  Next: Output Section Fill,  Prev: Output Section Region,  Up: Output Section Attributes
d999 1
a999 2
Output section phdr
...................
d1001 1
a1001 10
   You can assign a section to a previously defined program segment by
using `:PHDR'.  *Note PHDRS::.  If a section is assigned to one or more
segments, then all subsequent allocated sections will be assigned to
those segments as well, unless they use an explicitly `:PHDR' modifier.
You can use `:NONE' to tell the linker to not put the section in any
segment at all.

   Here is a simple example:
     PHDRS { text PT_LOAD ; }
     SECTIONS { .text : { *(.text) } :text }
d1003 1
a1003 2

File: ld.info,  Node: Output Section Fill,  Prev: Output Section Phdr,  Up: Output Section Attributes
d1005 147
a1151 15
Output section fill
...................

   You can set the fill pattern for an entire section by using
`=FILLEXP'.  FILLEXP is an expression (*note Expressions::).  Any
otherwise unspecified regions of memory within the output section (for
example, gaps left due to the required alignment of input sections)
will be filled with the two least significant bytes of the value,
repeated as necessary.

   You can also change the fill value with a `FILL' command in the
output section commands; see *Note Output Section Data::.

   Here is a simple example:
     SECTIONS { .text : { *(.text) } =0x9090 }
@

