head	1.5;
access;
symbols
	OPENBSD_3_5:1.4.0.8
	OPENBSD_3_5_BASE:1.4
	OPENBSD_3_4:1.4.0.6
	OPENBSD_3_4_BASE:1.4
	OPENBSD_3_3:1.4.0.4
	OPENBSD_3_3_BASE:1.4
	OPENBSD_3_2:1.4.0.2
	OPENBSD_3_2_BASE:1.4
	binutils-2_11_2:1.1.1.4
	OPENBSD_3_1:1.3.0.8
	OPENBSD_3_1_BASE:1.3
	OPENBSD_3_0:1.3.0.6
	OPENBSD_3_0_BASE:1.3
	BINUTILS-2_10_1:1.1.1.3
	OPENBSD_2_9:1.3.0.4
	OPENBSD_2_9_BASE:1.3
	OPENBSD_2_8:1.3.0.2
	OPENBSD_2_8_BASE:1.3
	BINUTILS-2_10:1.1.1.3
	OPENBSD_2_7:1.2.0.18
	OPENBSD_2_7_BASE:1.2
	new-binutils:1.2.0.16
	OPENBSD_2_6:1.2.0.14
	OPENBSD_2_6_BASE:1.2
	OPENBSD_2_5:1.2.0.12
	OPENBSD_2_5_BASE:1.2
	OPENBSD_2_4:1.2.0.10
	OPENBSD_2_4_BASE:1.2
	OPENBSD_2_3:1.2.0.8
	OPENBSD_2_3_BASE:1.2
	OPENBSD_2_2:1.2.0.6
	OPENBSD_2_2_BASE:1.2
	BINUTILS-2_8_1:1.1.1.3
	OPENBSD_2_1:1.2.0.4
	OPENBSD_2_1_BASE:1.2
	CYGNUS-961112:1.1.1.2
	OPENBSD_2_0:1.2.0.2
	OPENBSD_2_0_BASE:1.2
	CYGNUS-960904:1.1.1.2
	CYGNUS-960609:1.1.1.2
	CYGNUS:1.1.1
	FSF_2_6:1.1.1.1
	FSF:1.1.1;
locks; strict;
comment	@# @;


1.5
date	2004.05.17.21.54.52;	author drahn;	state dead;
branches;
next	1.4;

1.4
date	2002.05.13.17.07.44;	author fgsch;	state Exp;
branches;
next	1.3;

1.3
date	2000.09.12.22.26.30;	author espie;	state Exp;
branches;
next	1.2;

1.2
date	96.06.10.10.55.09;	author niklas;	state Exp;
branches;
next	1.1;

1.1
date	96.01.08.11.09.51;	author niklas;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	96.01.08.11.09.51;	author niklas;	state Exp;
branches;
next	1.1.1.2;

1.1.1.2
date	96.06.09.19.36.25;	author niklas;	state Exp;
branches;
next	1.1.1.3;

1.1.1.3
date	97.05.29.09.29.35;	author niklas;	state Exp;
branches;
next	1.1.1.4;

1.1.1.4
date	2002.05.13.14.02.23;	author fgsch;	state Exp;
branches;
next	;


desc
@@


1.5
log
@Resolve merge conflicts, adjust method of W^X handing (.sh files)
remove testsuites (not useable) remove mmalloc (not part of new binutils).
@
text
@# Expect script for ld-empic tests
#   Copyright 1994, 1995, 1996 Free Software Foundation, Inc.
#
# This file is free software; you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation; either version 2 of the License, or
# (at your option) any later version.
# 
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
# 
# You should have received a copy of the GNU General Public License
# along with this program; if not, write to the Free Software
# Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA 02111-1307, USA.
#
# Written by Ian Lance Taylor (ian@@cygnus.com)
#

# Test the handling of MIPS embedded PIC code.  This test essentially
# tests the compiler and assembler as well as the linker, since MIPS
# embedded PIC is a GNU enhancement to standard MIPS tools.

# Embedded PIC is only supported for MIPS ECOFF targets.
if ![istarget mips*-*-ecoff*] {
    return
}

set testname relax

if { [which $CC] == 0 } {
    untested $testname
    return
}

# Test that relaxation works correctly.  This testsuite was composed
# (by experimentation) to force the linker to relax twice--that is,
# the first relaxation pass will force another call to be out of
# range, requiring a second relaxation pass.
if { ![ld_compile "$CC $CFLAGS -membedded-pic" $srcdir/$subdir/relax1.c tmpdir/relax1.o]
     || ![ld_compile "$CC $CFLAGS -membedded-pic" $srcdir/$subdir/relax2.c tmpdir/relax2.o]
     || ![ld_compile "$CC $CFLAGS -membedded-pic" $srcdir/$subdir/relax3.c tmpdir/relax3.o]
     || ![ld_compile "$CC $CFLAGS -membedded-pic" $srcdir/$subdir/relax4.c tmpdir/relax4.o] } {
    unresolved $testname
    return
}

if ![ld_simple_link $ld tmpdir/relax "--relax -T $srcdir/$subdir/relax.t tmpdir/relax1.o tmpdir/relax2.o tmpdir/relax3.o tmpdir/relax4.o"] {
    fail $testname
} else {
    # Check that the relaxation produced the correct result.  Check
    # each bal instruction.  Some will go directly to the start of a
    # function, which is OK.  Some will form part of the five
    # instruction expanded call sequence, in which case we compute the
    # real destination and make sure it is the start of a function.
    # Some bal instructions are used to locate the start of the
    # function in order to do position independent addressing into the
    # text section, in which case we just check that it correctly
    # computes the start of the function.

    # Get the symbol table.
    if ![ld_nm $nm tmpdir/relax] {
	unresolved $testname
	return
    }

    # Get a disassembly.
    send_log "$objdump -d tmpdir/relax >tmpdir/relax.dis\n"
    verbose "$objdump -d tmpdir/relax >tmpdir/relax.dis"
    catch "exec $objdump -d tmpdir/relax >tmpdir/relax.dis" exec_output
    if ![string match "" $exec_output] {
	send_log "$exec_output\n"
	verbose $exec_output
	unresolved $testname
	return
    }

    set balcnt 0
    set file [open tmpdir/relax.dis r]
    while { [gets $file line] != -1 } {
	verbose "$line" 2

	if ![string match "*bal*" $line] {
	    continue
	}

	verbose "$line"

	incr balcnt

	if ![regexp "^(\[0-9a-fA-F\]+) (<\[a-z+0-9A-Z.\]+>)? bal (\[0-9a-fA-F\]+)" $line whole addr label dest] {
	    perror "unrecognized format for $line"
	    unresolved $testname
	    return
	}

	if "0x$addr + 8 != 0x$dest" {
	    # This is a straight function call.  All function calls in
	    # this example are to either foo or bar.
	    if "0x$dest != $nm_output(foo) && 0x$dest != $nm_output(bar)" {
		send_log "fail 1\n"
		send_log "$line\n"
		fail $testname
		return
	    }
	} else {
	    # Pick up the next line.  If it is sll, this is a switch
	    # prologue, and there is not much we can do to test it.
	    # Otherwise, it should be lui, and the next instruction
	    # should be an addiu, followed by an addu to $31.
	    if { [gets $file l] == -1 } {
		send_log "fail 2\n"
		send_log "$line\n"
		fail $testname
		return
	    }
	    verbose $l

	    if [string match "*sll*" $l] {
		continue
	    }
	    if ![regexp "lui (\[\$a-z0-9\]+),(\[0-9a-fA-Fx\]+)" $l whole reg upper] {
		send_log "fail 3\n"
		send_log "$line\n"
		send_log "$l\n"
		fail $testname
		return
	    }

	    if { [gets $file l] == -1 } {
		send_log "fail 4\n"
		send_log "$line\n"
		fail $testname
		return
	    }
	    verbose "$l"
	    if ![regexp "addiu \\$reg,\\$reg,(\[-0-9\]+)" $l whole lower] {
		send_log "fail 5\n"
		send_log "$line\n"
		send_log "$l\n"
		send_log "addiu \\$reg,\\$reg,(\[-0-9\]+)\n"
		fail $testname
		return
	    }

	    if { [gets $file l] == -1 } {
		send_log "fail 6\n"
		send_log "$line\n"
		fail $testname
		return
	    }
	    verbose "$l"
	    if ![regexp "addu \\$reg,\\$reg,\\\$ra" $l] {
		send_log "fail 7\n"
		send_log "$line\n"
		send_log "$l\n"
		fail $testname
		return
	    }

	    # The next line will be jalr in the case of an expanded
	    # call.  Otherwise, the code is getting the start of the
	    # function, and the next line can be anything.

	    if { [gets $file l] == -1 } {
		send_log "fail 8\n"
		send_log "$line\n"
		fail $testname
		return
	    }
	    verbose "$l"	
	    if [string match "*jalr*" $l] {
		set dest [expr 0x$addr + 8 + ($upper << 16) + $lower]
		if { $dest != $nm_output(foo) && $dest != $nm_output(bar) } {
		    send_log "fail 9\n"
		    send_log "$line\n"
		    fail $testname
		    return
		}
	    } else {
		set dest [expr ($upper << 16) + $lower]
		if ![regexp "<(\[.a-z\]+)\\+(\[0-9a-fA-F\]+)>" $label whole base offset] {
		    send_log "fail 10\n"
		    send_log "$line\n"
		    fail $testname
		    return
		}
		set offset 0x$offset
		if { $base == ".foo" } {
		    set offset [expr $offset - ($nm_output(foo) - 0x30)]
		}
		if { $offset + 8 != - $dest } {
		    send_log "fail 11\n"
		    send_log "$line\n"
		    fail $testname
		    return
		}
	    }
	}
    }

    close $file

    if {$balcnt < 10} {
	send_log "fail 12\n"
	fail $testname
    } else {
	verbose "$balcnt bal instructions"
	pass $testname
    }
}

# We now test actually running embedded MIPS PIC code.  This can only
# be done on a MIPS host with the same endianness as our target.
if [istarget mipsel-*-*] {
    if ![ishost mips*-*-ultrix*] {
	return
    }
} else {
    if ![ishost mips*-*-irix*] {
	return
    }
}

set testname "run embedded PIC code"

# Compile the program which will run the test.  This code must be
# compiled for the host, not the target.
send_log "$CC_FOR_HOST $CFLAGS_FOR_HOST -o tmpdir/run $srcdir/$subdir/run.c\n"
verbose "$CC_FOR_HOST $CFLAGS_FOR_HOST -o tmpdir/run $srcdir/$subdir/run.c"
catch "exec $CC_FOR_HOST $CFLAGS_FOR_HOST -o tmpdir/run $srcdir/$subdir/run.c" exec_output
if ![string match "" $exec_output] {
    send_log "$exec_output\n"
    verbose "$exec_output"
    unresolved $testname
    return
}

# Compile and link the test.
if { ![ld_compile "$CC $CFLAGS -membedded-pic" $srcdir/$subdir/runtesti.s tmpdir/runtesti.o]
     || ![ld_compile "$CC $CFLAGS -membedded-pic" $srcdir/$subdir/runtest1.c tmpdir/runtest1.o]
     || ![ld_compile "$CC $CFLAGS -membedded-pic" $srcdir/$subdir/runtest2.c tmpdir/runtest2.o] } {
    unresolved $testname
    return
}
if ![ld_simple_link $ld tmpdir/runtest "--embedded-relocs tmpdir/runtesti.o tmpdir/runtest1.o tmpdir/runtest2.o"] {
    fail $testname
} else {
    # Now run the test.
    send_log "tmpdir/run tmpdir/runtest\n"
    verbose "tmpdir/run tmpdir/runtest"
    catch "exec tmpdir/run tmpdir/runtest" exec_output
    if [string match "*ran and returned 0*" $exec_output] {
	send_log "$exec_output\n"
	verbose "$exec_output"
	pass $testname
    } else {
	send_log "$exec_output\n"
	verbose "$exec_output"
	fail $testname
    }
}
@


1.4
log
@resolve conflicts.
@
text
@@


1.3
log
@Resolve other problems that dumb cvs can't find out by itself.

(trivial part done, `interesting' patches remain)
@
text
@d2 1
a2 1
#   Copyright (C) 1994,1995, 1996, 1997 Free Software Foundation
@


1.2
log
@Bring Cygnus versions into the trunk, keeping our local patches
@
text
@d2 1
a2 1
#   Copyright (C) 1994,1995 Free Software Foundation
d41 4
a44 4
if { ![ld_compile "$CC $CFLAGS -membedded-pic" $srcdir$subdir/relax1.c tmpdir/relax1.o]
     || ![ld_compile "$CC $CFLAGS -membedded-pic" $srcdir$subdir/relax2.c tmpdir/relax2.o]
     || ![ld_compile "$CC $CFLAGS -membedded-pic" $srcdir$subdir/relax3.c tmpdir/relax3.o]
     || ![ld_compile "$CC $CFLAGS -membedded-pic" $srcdir$subdir/relax4.c tmpdir/relax4.o] } {
d49 1
a49 1
if ![ld_simple_link $ld tmpdir/relax "--relax -T $srcdir$subdir/relax.t tmpdir/relax1.o tmpdir/relax2.o tmpdir/relax3.o tmpdir/relax4.o"] {
d230 3
a232 3
send_log "$CC_FOR_HOST $CFLAGS_FOR_HOST -o tmpdir/run $srcdir$subdir/run.c\n"
verbose "$CC_FOR_HOST $CFLAGS_FOR_HOST -o tmpdir/run $srcdir$subdir/run.c"
catch "exec $CC_FOR_HOST $CFLAGS_FOR_HOST -o tmpdir/run $srcdir$subdir/run.c" exec_output
d241 3
a243 3
if { ![ld_compile "$CC $CFLAGS -membedded-pic" $srcdir$subdir/runtesti.s tmpdir/runtesti.o]
     || ![ld_compile "$CC $CFLAGS -membedded-pic" $srcdir$subdir/runtest1.c tmpdir/runtest1.o]
     || ![ld_compile "$CC $CFLAGS -membedded-pic" $srcdir$subdir/runtest2.c tmpdir/runtest2.o] } {
@


1.1
log
@Initial revision
@
text
@d102 1
d113 1
d123 2
a124 1
	    if ![regexp "lui (\[\$a-z0-9\]+),(\[0-9\]+)" $l whole reg upper] {
d132 1
d139 1
d148 1
d155 1
d167 1
d172 1
a172 1

d176 1
d183 2
a184 1
		if ![regexp "<\[a-z\]+\\+(\[0-9a-fA-F\]+)>" $label whole offset] {
d189 6
a194 1
		if "0x$offset + 8 != - $dest" {
d206 1
@


1.1.1.1
log
@Initial GNU binutils 2.6 import
@
text
@@


1.1.1.2
log
@Import of binutils, gas, ld & gprof from Cygnus 960609 tree
@
text
@a101 1
		send_log "fail 1\n"
a111 1
		send_log "fail 2\n"
d121 1
a121 2
	    if ![regexp "lui (\[\$a-z0-9\]+),(\[0-9a-fA-Fx\]+)" $l whole reg upper] {
		send_log "fail 3\n"
a128 1
		send_log "fail 4\n"
a134 1
		send_log "fail 5\n"
a142 1
		send_log "fail 6\n"
a148 1
		send_log "fail 7\n"
a159 1
		send_log "fail 8\n"
d164 1
a164 1
	    verbose "$l"	
a167 1
		    send_log "fail 9\n"
d174 1
a174 2
		if ![regexp "<(\[.a-z\]+)\\+(\[0-9a-fA-F\]+)>" $label whole base offset] {
		    send_log "fail 10\n"
d179 1
a179 6
		set offset 0x$offset
		if { $base == ".foo" } {
		    set offset [expr $offset - ($nm_output(foo) - 0x30)]
		}
		if { $offset + 8 != - $dest } {
		    send_log "fail 11\n"
a190 1
	send_log "fail 12\n"
@


1.1.1.3
log
@Import of binutils-2.8.1 from Cygnus/FSF
@
text
@d2 1
a2 1
#   Copyright (C) 1994,1995, 1996, 1997 Free Software Foundation
d41 4
a44 4
if { ![ld_compile "$CC $CFLAGS -membedded-pic" $srcdir/$subdir/relax1.c tmpdir/relax1.o]
     || ![ld_compile "$CC $CFLAGS -membedded-pic" $srcdir/$subdir/relax2.c tmpdir/relax2.o]
     || ![ld_compile "$CC $CFLAGS -membedded-pic" $srcdir/$subdir/relax3.c tmpdir/relax3.o]
     || ![ld_compile "$CC $CFLAGS -membedded-pic" $srcdir/$subdir/relax4.c tmpdir/relax4.o] } {
d49 1
a49 1
if ![ld_simple_link $ld tmpdir/relax "--relax -T $srcdir/$subdir/relax.t tmpdir/relax1.o tmpdir/relax2.o tmpdir/relax3.o tmpdir/relax4.o"] {
d230 3
a232 3
send_log "$CC_FOR_HOST $CFLAGS_FOR_HOST -o tmpdir/run $srcdir/$subdir/run.c\n"
verbose "$CC_FOR_HOST $CFLAGS_FOR_HOST -o tmpdir/run $srcdir/$subdir/run.c"
catch "exec $CC_FOR_HOST $CFLAGS_FOR_HOST -o tmpdir/run $srcdir/$subdir/run.c" exec_output
d241 3
a243 3
if { ![ld_compile "$CC $CFLAGS -membedded-pic" $srcdir/$subdir/runtesti.s tmpdir/runtesti.o]
     || ![ld_compile "$CC $CFLAGS -membedded-pic" $srcdir/$subdir/runtest1.c tmpdir/runtest1.o]
     || ![ld_compile "$CC $CFLAGS -membedded-pic" $srcdir/$subdir/runtest2.c tmpdir/runtest2.o] } {
@


1.1.1.4
log
@Import binutils-2.11.2
- only the binutils package (no gdb here)
- don't import libiberty and texinfo, they are elsewhere
- remove all .info* generated files
@
text
@d2 1
a2 1
#   Copyright 1994, 1995, 1996 Free Software Foundation, Inc.
@

