head	1.2;
access;
symbols
	OPENBSD_3_5:1.1.1.2.0.16
	OPENBSD_3_5_BASE:1.1.1.2
	OPENBSD_3_4:1.1.1.2.0.14
	OPENBSD_3_4_BASE:1.1.1.2
	OPENBSD_3_3:1.1.1.2.0.12
	OPENBSD_3_3_BASE:1.1.1.2
	OPENBSD_3_2:1.1.1.2.0.10
	OPENBSD_3_2_BASE:1.1.1.2
	binutils-2_11_2:1.1.1.2
	OPENBSD_3_1:1.1.1.2.0.8
	OPENBSD_3_1_BASE:1.1.1.2
	OPENBSD_3_0:1.1.1.2.0.6
	OPENBSD_3_0_BASE:1.1.1.2
	BINUTILS-2_10_1:1.1.1.2
	OPENBSD_2_9:1.1.1.2.0.4
	OPENBSD_2_9_BASE:1.1.1.2
	OPENBSD_2_8:1.1.1.2.0.2
	OPENBSD_2_8_BASE:1.1.1.2
	BINUTILS-2_10:1.1.1.2
	FSF:1.1.1
	OPENBSD_2_7:1.1.1.1.0.14
	OPENBSD_2_7_BASE:1.1.1.1
	new-binutils:1.1.1.1.0.12
	OPENBSD_2_6:1.1.1.1.0.10
	OPENBSD_2_6_BASE:1.1.1.1
	OPENBSD_2_5:1.1.1.1.0.8
	OPENBSD_2_5_BASE:1.1.1.1
	OPENBSD_2_4:1.1.1.1.0.6
	OPENBSD_2_4_BASE:1.1.1.1
	OPENBSD_2_3:1.1.1.1.0.4
	OPENBSD_2_3_BASE:1.1.1.1
	OPENBSD_2_2:1.1.1.1.0.2
	OPENBSD_2_2_BASE:1.1.1.1
	BINUTILS-2_8_1:1.1.1.1
	CYGNUS:1.1.1;
locks; strict;
comment	@ * @;


1.2
date	2004.05.17.21.54.51;	author drahn;	state dead;
branches;
next	1.1;

1.1
date	97.05.29.09.29.33;	author niklas;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	97.05.29.09.29.33;	author niklas;	state Exp;
branches;
next	1.1.1.2;

1.1.1.2
date	2000.09.12.14.48.29;	author espie;	state Exp;
branches;
next	;


desc
@@


1.2
log
@Resolve merge conflicts, adjust method of W^X handing (.sh files)
remove testsuites (not useable) remove mmalloc (not part of new binutils).
@
text
@/*
 * Basic test of versioning.  The idea with this is that we define
 * a bunch of definitions of the same symbol, and we can theoretically
 * then link applications against varying sets of these.
 */
const char * show_bar1 = "asdf";
const char * show_bar2 = "asdf";

int bar()
{
	return 3;
}

/*
 * The 'hide' prefix is something so that we can automatically search the
 * symbol table and verify that none of these symbols were actually exported.
 */
hide_original_foo()
{
	return 1+bar();

}

hide_old_foo()
{
	return 10+bar();

}

hide_old_foo1()
{
	return 100+bar();

}

hide_new_foo()
{
	return 1000+bar();

}

__asm__(".symver hide_original_foo,show_foo@@");
__asm__(".symver hide_old_foo,show_foo@@VERS_1.1");
__asm__(".symver hide_old_foo1,show_foo@@VERS_1.2");
__asm__(".symver hide_new_foo,show_foo@@@@VERS_2.0");



#ifdef DO_TEST10
/* In test 10, we try and define a non-existant version node.  The linker
 * should catch this and complain. */
hide_new_bogus_foo()
{
	return 1000+bar();

}
__asm__(".symver hide_new_bogus_foo,show_foo@@VERS_2.2");
#endif




#ifdef DO_TEST11
/*
 * This test is designed to catch a couple of syntactic errors.  The assembler
 * should complain about both of the directives below.
 */
xyzzz()
{
  new2_foo();
  bar33();
}

__asm__(".symver new2_foo,fooVERS_2.0");
__asm__(".symver bar33,bar@@@@VERS_2.0");
#endif

#ifdef DO_TEST12
/*
 * This test is designed to catch a couple of syntactic errors.  The assembler
 * should complain about both of the directives below.
 */
xyzzz()
{
  new2_foo();
  bar33();
}

__asm__(".symver bar33,bar@@@@VERS_2.0");
#endif
@


1.1
log
@Initial revision
@
text
@@


1.1.1.1
log
@Import of binutils-2.8.1 from Cygnus/FSF
@
text
@@


1.1.1.2
log
@Import binutils-2.10
- only the binutils package (no gdb here)
- don't import libiberty and texinfo, they are elsewhere
- remove all .info* generated files
@
text
@d9 1
a9 5
extern int new2_foo();
extern int bar33();

int
bar()
a17 1
int
a23 1
int
a29 1
int
a35 1
int
a51 1
int
a67 1
void
a82 1
void
@

