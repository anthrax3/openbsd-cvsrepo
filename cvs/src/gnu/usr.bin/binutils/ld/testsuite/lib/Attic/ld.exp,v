head	1.4;
access;
symbols
	OPENBSD_2_7:1.3.0.16
	OPENBSD_2_7_BASE:1.3
	new-binutils:1.3.0.14
	OPENBSD_2_6:1.3.0.12
	OPENBSD_2_6_BASE:1.3
	OPENBSD_2_5:1.3.0.10
	OPENBSD_2_5_BASE:1.3
	OPENBSD_2_4:1.3.0.8
	OPENBSD_2_4_BASE:1.3
	OPENBSD_2_3:1.3.0.6
	OPENBSD_2_3_BASE:1.3
	OPENBSD_2_2:1.3.0.4
	OPENBSD_2_2_BASE:1.3
	BINUTILS-2_8_1:1.1.1.4
	OPENBSD_2_1:1.3.0.2
	OPENBSD_2_1_BASE:1.3
	CYGNUS-961112:1.1.1.3
	OPENBSD_2_0:1.2.0.2
	OPENBSD_2_0_BASE:1.2
	CYGNUS-960904:1.1.1.2
	CYGNUS-960609:1.1.1.1
	CYGNUS:1.1.1
	FSF_2_6:1.1.1.1
	FSF:1.1.1;
locks; strict;
comment	@# @;


1.4
date	2000.09.12.22.26.39;	author espie;	state dead;
branches;
next	1.3;

1.3
date	96.11.23.03.52.44;	author niklas;	state Exp;
branches;
next	1.2;

1.2
date	96.09.04.19.10.13;	author niklas;	state Exp;
branches;
next	1.1;

1.1
date	96.01.08.11.10.04;	author niklas;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	96.01.08.11.10.04;	author niklas;	state Exp;
branches;
next	1.1.1.2;

1.1.1.2
date	96.09.04.17.36.27;	author niklas;	state Exp;
branches;
next	1.1.1.3;

1.1.1.3
date	96.11.19.14.38.57;	author niklas;	state Exp;
branches;
next	1.1.1.4;

1.1.1.4
date	97.05.29.09.29.51;	author niklas;	state Exp;
branches;
next	;


desc
@@


1.4
log
@Resolve other problems that dumb cvs can't find out by itself.

(trivial part done, `interesting' patches remain)
@
text
@#
# default_ld_version 
#	extract and print the version number of ld
#
proc default_ld_version { ld } {
    global host_triplet

    if { [which $ld] == 0 } then {
	perror "$ld does not exist"
	exit 1
    }
    
    catch "exec $ld --version" tmp
    set tmp [prune_system_crud $host_triplet $tmp]
    regexp "\[^\n\]* (cygnus-|)(\[-0-9.a-zA-Z-\]+)\[\r\n\].*" $tmp version cyg number
    if [info exists number] then {
	clone_output "$ld $number\n"
    }
}

#
# default_ld_relocate 
#	link an object using relocation
#
proc default_ld_relocate { ld target objects } {
    global HOSTING_EMU
    global host_triplet
    
    if { [which $ld] == 0 } then {
	perror "$ld does not exist"
	return 0
    }
    
    verbose -log "$ld $HOSTING_EMU -o $target -r $objects"
    
    catch "exec $ld $HOSTING_EMU -o $target -r $objects" exec_output
    set exec_output [prune_system_crud $host_triplet $exec_output]
    if [string match "" $exec_output] then {
	return 1
    } else {
	verbose -log "$exec_output"
	return 0
    }
}


#
# default_ld_link 
#	link a program using ld
#
proc default_ld_link { ld target objects } {
    global HOSTING_EMU
    global HOSTING_CRT0
    global HOSTING_LIBS
    global host_triplet
    
    set objs "$HOSTING_CRT0 $objects"
    set libs "$HOSTING_LIBS"
    
    if { [which $ld] == 0 } then {
	perror "$ld does not exist"
	return 0
    }
    
    verbose -log "$ld $HOSTING_EMU -o $target $objs $libs"
    
    catch "exec $ld $HOSTING_EMU -o $target $objs $libs" exec_output
    set exec_output [prune_system_crud $host_triplet $exec_output]
    if [string match "" $exec_output] then {
	return 1
    } else {
	verbose -log "$exec_output"
	return 0
    }
}

#
# default_ld_simple_link 
#	link a program using ld, without including any libraries
#
proc default_ld_simple_link { ld target objects } {
    global host_triplet
    
    if { [which $ld] == 0 } then {
	perror "$ld does not exist"
	return 0
    }
    
    verbose -log "$ld -o $target $objects"
    
    catch "exec $ld -o $target $objects" exec_output
    set exec_output [prune_system_crud $host_triplet $exec_output]

    # We don't care if we get a warning about a non-existent start
    # symbol, since the default linker script might use ENTRY.
    regsub -all "(^|\n)($ld: warning: cannot find entry symbol\[^\n\]*\n?)" $exec_output "\\1" exec_output

    if [string match "" $exec_output] then {
	return 1
    } else {
	verbose -log "$exec_output"
	return 0
    }
}

#
# default_ld_compile 
#	compile an object using cc
#
proc default_ld_compile { cc source object } {
    global CFLAGS
    global srcdir
    global subdir
    global host_triplet

    set cc_prog $cc
    if {[llength $cc_prog] > 1} then {
	set cc_prog [lindex $cc_prog 0]
    }
    if {[which $cc_prog] == 0} then {
	perror "$cc_prog does not exist"
	return 0
    }

    catch "exec rm -f $object" exec_output

    verbose -log "$cc -I$srcdir$subdir -c $CFLAGS $source -o $object"

    catch "exec $cc -I$srcdir$subdir -c $CFLAGS $source -o $object" exec_output
    set exec_output [prune_system_crud $host_triplet $exec_output]
    if [string match "" $exec_output] then {
	if {![file exists $object]} then {
	    regexp ".*/(\[^/\]*)$" $source all dobj
	    regsub "\\.c" $dobj ".o" realobj
	    verbose "looking for $realobj"
	    if {[file exists $realobj]} then {
		verbose -log "mv $realobj $object"
		catch "exec mv $realobj $object" exec_output
		set exec_output [prune_system_crud $host_triplet $exec_output]
		if {![string match "" $exec_output]} then {
		    verbose -log "$exec_output"
		    perror "could not move $realobj to $object"
		    return 0
		}
	    } else {
		perror "$object not found after compilation"
		return 0
	    }
	}
	return 1
    } else {
	verbose -log "$exec_output"
	perror "$source: compilation failed"
	return 0
    }
}

#
# default_ld_assemble
#	assemble a file
#
proc default_ld_assemble { as source object } {
    global ASFLAGS
    global host_triplet
    
    if {[which $as] == 0} then {
	perror "$as does not exist"
	return 0
    }

    if ![info exists ASFLAGS] { set ASFLAGS "" }

    verbose -log "$as $ASFLAGS -o $object $source"

    catch "exec $as $ASFLAGS -o $object $source" exec_output
    set exec_output [prune_system_crud $host_triplet $exec_output]
    if [string match "" $exec_output] then {
	return 1
    } else {
	verbose -log "$exec_output"
	perror "$source: assembly failed"
	return 0
    }
}

#
# default_ld_nm
#	run nm on a file, putting the result in the array nm_output
#
proc default_ld_nm { nm object } {
    global NMFLAGS
    global nm_output
    global host_triplet

    if {[which $nm] == 0} then {
	perror "$nm does not exist"
	return 0
    }

    if ![info exists NMFLAGS] { set NMFLAGS "" }

    verbose -log "$nm $NMFLAGS $object >tmpdir/nm.out"

    catch "exec $nm $NMFLAGS $object >tmpdir/nm.out" exec_output
    set exec_output [prune_system_crud $host_triplet $exec_output]
    if [string match "" $exec_output] then {
	set file [open tmpdir/nm.out r]
	while { [gets $file line] != -1 } {
	    verbose "$line" 2
	    if [regexp "^(\[0-9a-fA-F\]+) \[a-zA-Z0-9\] (.+)$" $line whole value name] {
		verbose "Setting nm_output($name) to 0x$value" 2
		set nm_output($name) 0x$value
	    }
	}
	close $file
	return 1
    } else {
	verbose -log "$exec_output"
	perror "$object: nm failed"
	return 0
    }
}

#
# simple_diff
#	compares two files line-by-line
#	returns differences if exist
#	returns null if file(s) cannot be opened
#
proc simple_diff { file_1 file_2 } {
    global target
	
    set eof -1
    set differences 0
    
    if [file exists $file_1] then {
	set file_a [open $file_1 r]
    } else {
	warning "$file_1 doesn't exist"
	return
    }
    
    if [file exists $file_2] then {
	set file_b [open $file_2 r]
    } else {
	fail "$file_2 doesn't exist"
	return
    }
    
    verbose "# Diff'ing: $file_1 $file_2\n" 2
    
    while { [gets $file_a line] != $eof } {
	if [regexp "^#.*$" $line] then {
	    continue
	} else {
	    lappend list_a $line
	}
    }
    close $file_a
    
    while { [gets $file_b line] != $eof } {
	if [regexp "^#.*$" $line] then {
	    continue
	} else {
	    lappend list_b $line
	}
    }
    close $file_b

    for { set i 0 } { $i < [llength $list_a] } { incr i } {
	set line_a [lindex $list_a $i]
	set line_b [lindex $list_b $i]

	verbose "\t$file_1: $i: $line_a\n" 3
	verbose "\t$file_2: $i: $line_b\n" 3
	if [string compare $line_a $line_b] then {
	    verbose -log "\t$file_1: $i: $line_a\n"
	    verbose -log "\t$file_2: $i: $line_b\n"

	    fail "Test: $target"
	    return
	}
    }
    
    if { [llength $list_a] != [llength $list_b] } {
	fail "Test: $target"
	return
    }

    if $differences<1 then {
	pass "Test: $target"
    }
}

# This definition is taken from an unreleased version of DejaGnu.  Once
# that version gets released, and has been out in the world for a few
# months at least, it may be safe to delete this copy.
if ![string length [info proc prune_system_crud]] {
    #
    # prune_system_crud -- delete various system verbosities from TEXT on SYSTEM
    #
    # An example is:
    # ld.so: warning: /usr/lib/libc.so.1.8.1 has older revision than expected 9
    #
    # SYSTEM is typical $target_triplet or $host_triplet.
    #
    # This is useful when trying to do pattern matches on program output.
    # Sites with particular verbose os's may wish to override this in site.exp.
    #
    proc prune_system_crud { system text } {
	# This is from sun4's.  Do it for all machines for now.
	# The "\\1" is to try to preserve a "\n" but only if necessary.
	regsub -all "(^|\n)(ld.so: warning:\[^\n\]*\n?)+" $text "\\1" text

	# It might be tempting to get carried away and delete blank lines, etc.
	# Just delete *exactly* what we're ask to, and that's it.
	return $text
    }
}
@


1.3
log
@Merge to Cygnus 961112 + add some support (not ready) for shared libs
@
text
@@


1.2
log
@Merge the Cygnus 960904 sources
@
text
@d15 3
a17 4
    regexp "version.*$" $tmp version
    
    if [info exists version] then {
	clone_output "$ld $version\n"
@


1.1
log
@Initial revision
@
text
@d35 1
a35 2
    send_log "$ld $HOSTING_EMU -o $target -r $objects\n"
    verbose "$ld $HOSTING_EMU -o $target -r $objects"
d42 1
a42 2
	send_log "$exec_output\n"
	verbose "$exec_output"
d66 1
a66 2
    send_log "$ld $HOSTING_EMU -o $target $objs $libs\n"
    verbose "$ld $HOSTING_EMU -o $target $objs $libs"
d73 1
a73 2
	send_log "$exec_output\n"
	verbose "$exec_output"
d90 1
a90 2
    send_log "$ld -o $target $objects\n"
    verbose "$ld -o $target $objects"
d102 1
a102 2
	send_log "$exec_output\n"
	verbose "$exec_output"
d128 1
a128 2
    send_log "$cc -I$srcdir$subdir -c $CFLAGS $source -o $object\n"
    verbose "$cc -I$srcdir$subdir -c $CFLAGS $source -o $object"
d138 1
a138 2
		send_log "mv $realobj $object\n"
		verbose "mv $realobj $object"
d142 1
a142 2
		    send_log "$exec_output\n"
		    verbose "$exec_output"
d153 1
a153 2
	send_log "$exec_output\n"
	verbose "$exec_output"
d174 1
a174 2
    send_log "$as $ASFLAGS -o $object $source\n"
    verbose "$as $ASFLAGS -o $object $source"
d181 1
a181 2
	send_log "$exec_output\n"
	verbose "$exec_output"
d203 1
a203 2
    send_log "$nm $NMFLAGS $object >tmpdir/nm.out\n"
    verbose "$nm $NMFLAGS $object >tmpdir/nm.out"
d219 1
a219 2
	send_log "$exec_output\n"
	verbose $exec_output
d278 2
a279 5
	    verbose "\t$file_1: $i: $line_a\n" 1
	    verbose "\t$file_2: $i: $line_b\n" 1

	    send_log "\t$file_1: $i: $line_a\n"
	    send_log "\t$file_2: $i: $line_b\n"
@


1.1.1.1
log
@Initial GNU binutils 2.6 import
@
text
@@


1.1.1.2
log
@Import of binutils, gas, ld & gprof from Cygnus 960904 tree
@
text
@d35 2
a36 1
    verbose -log "$ld $HOSTING_EMU -o $target -r $objects"
d43 2
a44 1
	verbose -log "$exec_output"
d68 2
a69 1
    verbose -log "$ld $HOSTING_EMU -o $target $objs $libs"
d76 2
a77 1
	verbose -log "$exec_output"
d94 2
a95 1
    verbose -log "$ld -o $target $objects"
d107 2
a108 1
	verbose -log "$exec_output"
d134 2
a135 1
    verbose -log "$cc -I$srcdir$subdir -c $CFLAGS $source -o $object"
d145 2
a146 1
		verbose -log "mv $realobj $object"
d150 2
a151 1
		    verbose -log "$exec_output"
d162 2
a163 1
	verbose -log "$exec_output"
d184 2
a185 1
    verbose -log "$as $ASFLAGS -o $object $source"
d192 2
a193 1
	verbose -log "$exec_output"
d215 2
a216 1
    verbose -log "$nm $NMFLAGS $object >tmpdir/nm.out"
d232 2
a233 1
	verbose -log "$exec_output"
d292 5
a296 2
	    verbose -log "\t$file_1: $i: $line_a\n"
	    verbose -log "\t$file_2: $i: $line_b\n"
@


1.1.1.3
log
@Import of 961112 Cygnus binutils+gas+ld+gdb+gprof
@
text
@d15 4
a18 3
    regexp "\[^\n\]* (cygnus-|)(\[-0-9.a-zA-Z-\]+)\[\r\n\].*" $tmp version cyg number
    if [info exists number] then {
	clone_output "$ld $number\n"
@


1.1.1.4
log
@Import of binutils-2.8.1 from Cygnus/FSF
@
text
@d14 1
a14 1
    set tmp [prune_warnings $tmp]
d37 1
a37 1
    set exec_output [prune_warnings $exec_output]
d68 1
a68 1
    set exec_output [prune_warnings $exec_output]
d92 1
a92 1
    set exec_output [prune_warnings $exec_output]
d127 1
a127 1
    verbose -log "$cc -I$srcdir/$subdir -c $CFLAGS $source -o $object"
d129 2
a130 2
    catch "exec $cc -I$srcdir/$subdir -c $CFLAGS $source -o $object" exec_output
    set exec_output [prune_warnings $exec_output]
d139 1
a139 1
		set exec_output [prune_warnings $exec_output]
d176 1
a176 1
    set exec_output [prune_warnings $exec_output]
d205 1
a205 1
    set exec_output [prune_warnings $exec_output]
d298 1
a298 1
if ![string length [info proc prune_warnings]] {
d300 1
a300 1
    # prune_warnings -- delete various system verbosities from TEXT
d305 3
d310 1
a310 1
    proc prune_warnings { text } {
@
