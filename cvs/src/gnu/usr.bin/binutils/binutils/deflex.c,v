head	1.3;
access;
symbols
	OPENBSD_6_1:1.3.0.12
	OPENBSD_6_1_BASE:1.3
	OPENBSD_6_0:1.3.0.8
	OPENBSD_6_0_BASE:1.3
	OPENBSD_5_9:1.3.0.4
	OPENBSD_5_9_BASE:1.3
	OPENBSD_5_8:1.3.0.6
	OPENBSD_5_8_BASE:1.3
	OPENBSD_5_7:1.3.0.2
	OPENBSD_5_7_BASE:1.3
	OPENBSD_5_6:1.2.0.42
	OPENBSD_5_6_BASE:1.2
	OPENBSD_5_5:1.2.0.40
	OPENBSD_5_5_BASE:1.2
	OPENBSD_5_4:1.2.0.36
	OPENBSD_5_4_BASE:1.2
	OPENBSD_5_3:1.2.0.34
	OPENBSD_5_3_BASE:1.2
	OPENBSD_5_2:1.2.0.32
	OPENBSD_5_2_BASE:1.2
	OPENBSD_5_1_BASE:1.2
	OPENBSD_5_1:1.2.0.30
	OPENBSD_5_0:1.2.0.28
	OPENBSD_5_0_BASE:1.2
	OPENBSD_4_9:1.2.0.26
	OPENBSD_4_9_BASE:1.2
	OPENBSD_4_8:1.2.0.24
	OPENBSD_4_8_BASE:1.2
	OPENBSD_4_7:1.2.0.20
	OPENBSD_4_7_BASE:1.2
	OPENBSD_4_6:1.2.0.22
	OPENBSD_4_6_BASE:1.2
	OPENBSD_4_5:1.2.0.18
	OPENBSD_4_5_BASE:1.2
	OPENBSD_4_4:1.2.0.16
	OPENBSD_4_4_BASE:1.2
	OPENBSD_4_3:1.2.0.14
	OPENBSD_4_3_BASE:1.2
	OPENBSD_4_2:1.2.0.12
	OPENBSD_4_2_BASE:1.2
	OPENBSD_4_1:1.2.0.10
	OPENBSD_4_1_BASE:1.2
	OPENBSD_4_0:1.2.0.8
	OPENBSD_4_0_BASE:1.2
	OPENBSD_3_9:1.2.0.6
	OPENBSD_3_9_BASE:1.2
	OPENBSD_3_8:1.2.0.4
	OPENBSD_3_8_BASE:1.2
	OPENBSD_3_7:1.2.0.2
	OPENBSD_3_7_BASE:1.2
	BINUTILS_2_15:1.1.1.5
	OPENBSD_3_6:1.1.1.4.0.2
	OPENBSD_3_6_BASE:1.1.1.4
	BINUTILS-2_14:1.1.1.4
	OPENBSD_3_5:1.1.1.3.0.8
	OPENBSD_3_5_BASE:1.1.1.3
	OPENBSD_3_4:1.1.1.3.0.6
	OPENBSD_3_4_BASE:1.1.1.3
	OPENBSD_3_3:1.1.1.3.0.4
	OPENBSD_3_3_BASE:1.1.1.3
	OPENBSD_3_2:1.1.1.3.0.2
	OPENBSD_3_2_BASE:1.1.1.3
	binutils-2_11_2:1.1.1.3
	OPENBSD_3_1:1.1.1.2.0.8
	OPENBSD_3_1_BASE:1.1.1.2
	OPENBSD_3_0:1.1.1.2.0.6
	OPENBSD_3_0_BASE:1.1.1.2
	BINUTILS-2_10_1:1.1.1.2
	OPENBSD_2_9:1.1.1.2.0.4
	OPENBSD_2_9_BASE:1.1.1.2
	OPENBSD_2_8:1.1.1.2.0.2
	OPENBSD_2_8_BASE:1.1.1.2
	BINUTILS-2_10:1.1.1.2
	FSF:1.1.1
	OPENBSD_2_7:1.1.1.1.0.14
	OPENBSD_2_7_BASE:1.1.1.1
	new-binutils:1.1.1.1.0.12
	OPENBSD_2_6:1.1.1.1.0.10
	OPENBSD_2_6_BASE:1.1.1.1
	OPENBSD_2_5:1.1.1.1.0.8
	OPENBSD_2_5_BASE:1.1.1.1
	OPENBSD_2_4:1.1.1.1.0.6
	OPENBSD_2_4_BASE:1.1.1.1
	OPENBSD_2_3:1.1.1.1.0.4
	OPENBSD_2_3_BASE:1.1.1.1
	OPENBSD_2_2:1.1.1.1.0.2
	OPENBSD_2_2_BASE:1.1.1.1
	BINUTILS-2_8_1:1.1.1.1
	CYGNUS:1.1.1;
locks; strict;
comment	@ * @;


1.3
date	2014.08.31.13.40.02;	author tobiasu;	state Exp;
branches;
next	1.2;
commitid	dbwlUkpK0xDlII16;

1.2
date	2004.11.02.20.45.16;	author miod;	state Exp;
branches;
next	1.1;

1.1
date	97.05.29.09.15.57;	author niklas;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	97.05.29.09.15.57;	author niklas;	state Exp;
branches;
next	1.1.1.2;

1.1.1.2
date	2000.09.12.14.45.04;	author espie;	state Exp;
branches;
next	1.1.1.3;

1.1.1.3
date	2002.05.13.13.14.50;	author fgsch;	state Exp;
branches;
next	1.1.1.4;

1.1.1.4
date	2004.05.17.20.42.06;	author drahn;	state Exp;
branches;
next	1.1.1.5;

1.1.1.5
date	2004.11.02.20.22.01;	author miod;	state Exp;
branches;
next	;


desc
@@


1.3
log
@Backport @@file support from binutils-2.17

@@file allows reading command line arguments from a file. Gcc now uses this to
pass very long arguments lists to ld.

ok guenther@@ miod@@
@
text
@/* A lexical scanner generated by flex */

/* Scanner skeleton version:
 * $Header: /home/vcs/cvs/openbsd/src/gnu/usr.bin/binutils/binutils/deflex.c,v 1.2 2004/11/02 20:45:16 miod Exp $
 */

#define FLEX_SCANNER
#define YY_FLEX_MAJOR_VERSION 2
#define YY_FLEX_MINOR_VERSION 5

#include <stdio.h>
#include <errno.h>

/* cfront 1.2 defines "c_plusplus" instead of "__cplusplus" */
#ifdef c_plusplus
#ifndef __cplusplus
#define __cplusplus
#endif
#endif


#ifdef __cplusplus

#include <stdlib.h>
#ifndef _WIN32
#include <unistd.h>
#endif

/* Use prototypes in function declarations. */
#define YY_USE_PROTOS

/* The "const" storage-class-modifier is valid. */
#define YY_USE_CONST

#else	/* ! __cplusplus */

#if __STDC__

#define YY_USE_PROTOS
#define YY_USE_CONST

#endif	/* __STDC__ */
#endif	/* ! __cplusplus */

#ifdef __TURBOC__
 #pragma warn -rch
 #pragma warn -use
#include <io.h>
#include <stdlib.h>
#define YY_USE_CONST
#define YY_USE_PROTOS
#endif

#ifdef YY_USE_CONST
#define yyconst const
#else
#define yyconst
#endif


#ifdef YY_USE_PROTOS
#define YY_PROTO(proto) proto
#else
#define YY_PROTO(proto) ()
#endif


/* Returned upon end-of-file. */
#define YY_NULL 0

/* Promotes a possibly negative, possibly signed char to an unsigned
 * integer for use as an array index.  If the signed char is negative,
 * we want to instead treat it as an 8-bit unsigned char, hence the
 * double cast.
 */
#define YY_SC_TO_UI(c) ((unsigned int) (unsigned char) c)

/* Enter a start condition.  This macro really ought to take a parameter,
 * but we do it the disgusting crufty way forced on us by the ()-less
 * definition of BEGIN.
 */
#define BEGIN yy_start = 1 + 2 *

/* Translate the current start state into a value that can be later handed
 * to BEGIN to return to the state.  The YYSTATE alias is for lex
 * compatibility.
 */
#define YY_START ((yy_start - 1) / 2)
#define YYSTATE YY_START

/* Action number for EOF rule of a given start state. */
#define YY_STATE_EOF(state) (YY_END_OF_BUFFER + state + 1)

/* Special action meaning "start processing a new file". */
#define YY_NEW_FILE yyrestart( yyin )

#define YY_END_OF_BUFFER_CHAR 0

/* Size of default input buffer. */
#define YY_BUF_SIZE 16384

typedef struct yy_buffer_state *YY_BUFFER_STATE;

extern int yyleng;
extern FILE *yyin, *yyout;

#define EOB_ACT_CONTINUE_SCAN 0
#define EOB_ACT_END_OF_FILE 1
#define EOB_ACT_LAST_MATCH 2

/* The funky do-while in the following #define is used to turn the definition
 * int a single C statement (which needs a semi-colon terminator).  This
 * avoids problems with code like:
 *
 * 	if ( condition_holds )
 *		yyless( 5 );
 *	else
 *		do_something_else();
 *
 * Prior to using the do-while the compiler would get upset at the
 * "else" because it interpreted the "if" statement as being all
 * done when it reached the ';' after the yyless() call.
 */

/* Return all but the first 'n' matched characters back to the input stream. */

#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up yytext. */ \
		*yy_cp = yy_hold_char; \
		YY_RESTORE_YY_MORE_OFFSET \
		yy_c_buf_p = yy_cp = yy_bp + n - YY_MORE_ADJ; \
		YY_DO_BEFORE_ACTION; /* set up yytext again */ \
		} \
	while ( 0 )

#define unput(c) yyunput( c, yytext_ptr )

/* The following is because we cannot portably get our hands on size_t
 * (without autoconf's help, which isn't available because we want
 * flex-generated scanners to compile on their own).
 */
typedef unsigned int yy_size_t;


struct yy_buffer_state
	{
	FILE *yy_input_file;

	char *yy_ch_buf;		/* input buffer */
	char *yy_buf_pos;		/* current position in input buffer */

	/* Size of input buffer in bytes, not including room for EOB
	 * characters.
	 */
	yy_size_t yy_buf_size;

	/* Number of characters read into yy_ch_buf, not including EOB
	 * characters.
	 */
	int yy_n_chars;

	/* Whether we "own" the buffer - i.e., we know we created it,
	 * and can realloc() it to grow it, and should free() it to
	 * delete it.
	 */
	int yy_is_our_buffer;

	/* Whether this is an "interactive" input source; if so, and
	 * if we're using stdio for input, then we want to use getc()
	 * instead of fread(), to make sure we stop fetching input after
	 * each newline.
	 */
	int yy_is_interactive;

	/* Whether we're considered to be at the beginning of a line.
	 * If so, '^' rules will be active on the next match, otherwise
	 * not.
	 */
	int yy_at_bol;

	/* Whether to try to fill the input buffer when we reach the
	 * end of it.
	 */
	int yy_fill_buffer;

	int yy_buffer_status;
#define YY_BUFFER_NEW 0
#define YY_BUFFER_NORMAL 1
	/* When an EOF's been seen but there's still some text to process
	 * then we mark the buffer as YY_EOF_PENDING, to indicate that we
	 * shouldn't try reading from the input source any more.  We might
	 * still have a bunch of tokens to match, though, because of
	 * possible backing-up.
	 *
	 * When we actually see the EOF, we change the status to "new"
	 * (via yyrestart()), so that the user can continue scanning by
	 * just pointing yyin at a new input file.
	 */
#define YY_BUFFER_EOF_PENDING 2
	};

static YY_BUFFER_STATE yy_current_buffer = 0;

/* We provide macros for accessing buffer states in case in the
 * future we want to put the buffer states in a more general
 * "scanner state".
 */
#define YY_CURRENT_BUFFER yy_current_buffer


/* yy_hold_char holds the character lost when yytext is formed. */
static char yy_hold_char;

static int yy_n_chars;		/* number of characters read into yy_ch_buf */


int yyleng;

/* Points to current character in buffer. */
static char *yy_c_buf_p = (char *) 0;
static int yy_init = 1;		/* whether we need to initialize */
static int yy_start = 0;	/* start state number */

/* Flag which is used to allow yywrap()'s to do buffer switches
 * instead of setting up a fresh yyin.  A bit of a hack ...
 */
static int yy_did_buffer_switch_on_eof;

void yyrestart YY_PROTO(( FILE *input_file ));

void yy_switch_to_buffer YY_PROTO(( YY_BUFFER_STATE new_buffer ));
void yy_load_buffer_state YY_PROTO(( void ));
YY_BUFFER_STATE yy_create_buffer YY_PROTO(( FILE *file, int size ));
void yy_delete_buffer YY_PROTO(( YY_BUFFER_STATE b ));
void yy_init_buffer YY_PROTO(( YY_BUFFER_STATE b, FILE *file ));
void yy_flush_buffer YY_PROTO(( YY_BUFFER_STATE b ));
#define YY_FLUSH_BUFFER yy_flush_buffer( yy_current_buffer )

YY_BUFFER_STATE yy_scan_buffer YY_PROTO(( char *base, yy_size_t size ));
YY_BUFFER_STATE yy_scan_string YY_PROTO(( yyconst char *yy_str ));
YY_BUFFER_STATE yy_scan_bytes YY_PROTO(( yyconst char *bytes, int len ));

static void *yy_flex_alloc YY_PROTO(( yy_size_t ));
static void *yy_flex_realloc YY_PROTO(( void *, yy_size_t ));
static void yy_flex_free YY_PROTO(( void * ));

#define yy_new_buffer yy_create_buffer

#define yy_set_interactive(is_interactive) \
	{ \
	if ( ! yy_current_buffer ) \
		yy_current_buffer = yy_create_buffer( yyin, YY_BUF_SIZE ); \
	yy_current_buffer->yy_is_interactive = is_interactive; \
	}

#define yy_set_bol(at_bol) \
	{ \
	if ( ! yy_current_buffer ) \
		yy_current_buffer = yy_create_buffer( yyin, YY_BUF_SIZE ); \
	yy_current_buffer->yy_at_bol = at_bol; \
	}

#define YY_AT_BOL() (yy_current_buffer->yy_at_bol)

typedef unsigned char YY_CHAR;
FILE *yyin = (FILE *) 0, *yyout = (FILE *) 0;
typedef int yy_state_type;
extern char *yytext;
#define yytext_ptr yytext

static yy_state_type yy_get_previous_state YY_PROTO(( void ));
static yy_state_type yy_try_NUL_trans YY_PROTO(( yy_state_type current_state ));
static int yy_get_next_buffer YY_PROTO(( void ));
static void yy_fatal_error YY_PROTO(( yyconst char msg[] ));

/* Done after the current pattern has been matched and before the
 * corresponding action - sets up yytext.
 */
#define YY_DO_BEFORE_ACTION \
	yytext_ptr = yy_bp; \
	yyleng = (int) (yy_cp - yy_bp); \
	yy_hold_char = *yy_cp; \
	*yy_cp = '\0'; \
	yy_c_buf_p = yy_cp;

#define YY_NUM_RULES 40
#define YY_END_OF_BUFFER 41
static yyconst short int yy_accept[197] =
    {   0,
        0,    0,   41,   40,   34,   35,   33,   40,   28,   40,
       31,   39,   37,   27,   32,   36,   38,   28,   28,   28,
       28,   28,   28,   28,   28,   28,   28,   28,   28,   28,
       28,   28,    0,   29,   28,    0,   30,   31,   27,   32,
       28,   28,   28,   28,   28,   28,   28,   28,   28,   28,
       28,   28,   28,   28,   28,   28,   28,   28,   28,   28,
       28,   28,   28,   28,   28,   28,   28,   28,   28,   28,
       28,   28,   28,   28,   28,   28,   28,   28,   28,   28,
       28,   28,   28,   28,   28,   12,    6,   28,    7,   28,
       28,   28,   28,   28,   28,   28,   28,    1,   28,   28,

       28,   16,   28,   28,   28,   28,   28,   28,   28,   28,
       28,   28,   28,   28,   28,   28,   28,   28,   28,   28,
       28,   28,   28,   28,   28,   28,   28,   28,   28,   17,
       28,   28,   28,   28,   28,   28,   28,   28,   28,   28,
       14,   28,   28,   28,   19,   21,   28,   28,   28,   28,
       28,   28,   18,    9,   28,   10,   28,   28,    2,   28,
       28,   15,   28,   28,   28,   28,   11,   13,   28,    5,
       28,   28,   22,   28,    8,   28,   28,   28,   28,   28,
       28,   20,    4,   28,   28,   28,   24,   28,   26,   28,
        3,   28,   28,   23,   25,    0

    } ;

static yyconst int yy_ec[256] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    1,    2,    3,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    4,    1,    5,    1,    6,    1,    1,    7,    1,
        1,    8,    1,    9,    6,   10,   11,   12,   12,   12,
       12,   12,   12,   12,   12,   12,   12,    6,   13,    1,
       14,    1,    6,   15,   16,   17,   18,   19,   20,   21,
       22,   23,   24,    6,   25,   26,   27,   28,   29,   30,
        6,   31,   32,   33,   34,   35,   36,   37,   38,   39,
        1,    1,    1,    1,    6,    1,   21,   21,   21,   21,

       21,   21,    6,    6,    6,    6,    6,    6,    6,    6,
        6,    6,    6,    6,    6,    6,    6,    6,    6,   21,
        6,    6,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,

        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1
    } ;

static yyconst int yy_meta[40] =
    {   0,
        1,    1,    2,    1,    1,    3,    1,    1,    1,    1,
        4,    5,    1,    1,    4,    6,    6,    6,    6,    6,
        6,    3,    3,    3,    3,    3,    3,    3,    3,    3,
        3,    3,    3,    3,    3,    3,    3,    3,    3
    } ;

static yyconst short int yy_base[204] =
    {   0,
        0,    0,  228,  229,  229,  229,  229,  222,    0,  219,
        0,  229,  229,    0,    0,  229,    0,  209,  195,   24,
      186,  202,   14,  197,  186,   27,  188,  198,   25,  197,
      196,  184,  209,  229,    0,  206,  229,    0,    0,    0,
        0,  180,   27,  178,  178,   27,  193,  178,  183,  189,
      179,  177,  175,  178,  185,  182,  183,  170,  181,  165,
      164,  170,  173,  172,  159,  174,  171,  170,  158,  156,
      156,  151,  152,  149,  161,   34,  145,  160,  145,  146,
      154,  157,  147,  141,  139,    0,    0,  138,    0,  139,
      135,  137,  135,  135,   29,  149,  140,    0,  136,  139,

      145,    0,  136,  139,  132,  132,   30,  132,  135,  138,
      129,  119,  118,  126,  116,  122,  119,  115,  115,  124,
      127,  109,  112,  121,  119,  106,  111,  108,  106,    0,
      106,  103,  112,   99,   91,   97,   99,   95,   88,   99,
        0,   93,  103,   94,    0,    0,   97,   91,   87,   90,
       84,   83,    0,    0,   95,    0,   97,   80,    0,   92,
       91,    0,   78,   70,   91,   74,    0,    0,   82,    0,
       89,   88,    0,   84,    0,   82,   85,   83,   69,   66,
       56,    0,    0,   39,   36,   35,    0,   44,    0,   43,
        0,   40,   39,    0,    0,  229,   66,   70,   76,   82,

       84,   90,   94
    } ;

static yyconst short int yy_def[204] =
    {   0,
      196,    1,  196,  196,  196,  196,  196,  197,  198,  199,
      200,  196,  196,  201,  202,  196,  203,  198,  198,  198,
      198,  198,  198,  198,  198,  198,  198,  198,  198,  198,
      198,  198,  197,  196,  198,  199,  196,  200,  201,  202,
      198,  198,  198,  198,  198,  198,  198,  198,  198,  198,
      198,  198,  198,  198,  198,  198,  198,  198,  198,  198,
      198,  198,  198,  198,  198,  198,  198,  198,  198,  198,
      198,  198,  198,  198,  198,  198,  198,  198,  198,  198,
      198,  198,  198,  198,  198,  198,  198,  198,  198,  198,
      198,  198,  198,  198,  198,  198,  198,  198,  198,  198,

      198,  198,  198,  198,  198,  198,  198,  198,  198,  198,
      198,  198,  198,  198,  198,  198,  198,  198,  198,  198,
      198,  198,  198,  198,  198,  198,  198,  198,  198,  198,
      198,  198,  198,  198,  198,  198,  198,  198,  198,  198,
      198,  198,  198,  198,  198,  198,  198,  198,  198,  198,
      198,  198,  198,  198,  198,  198,  198,  198,  198,  198,
      198,  198,  198,  198,  198,  198,  198,  198,  198,  198,
      198,  198,  198,  198,  198,  198,  198,  198,  198,  198,
      198,  198,  198,  198,  198,  198,  198,  198,  198,  198,
      198,  198,  198,  198,  198,    0,  196,  196,  196,  196,

      196,  196,  196
    } ;

static yyconst short int yy_nxt[269] =
    {   0,
        4,    5,    6,    7,    8,    9,   10,   11,   12,   13,
        4,   14,   15,   16,   17,    9,   18,   19,   20,   21,
        9,    9,   22,   23,    9,   24,   25,   26,    9,   27,
       28,   29,   30,    9,   31,   32,    9,    9,    9,   44,
       48,   49,   52,   45,   56,   64,   68,   57,   58,   99,
      116,  127,  117,  128,   65,   53,   69,   59,  195,  194,
      193,  192,  191,  190,  189,  100,   33,   33,   33,   33,
       33,   33,   35,   35,   35,   35,   36,   36,   36,   36,
       36,   36,   38,  188,   38,   38,   38,   38,   39,   39,
       40,  187,   40,   40,   40,   40,   41,  186,  185,   41,

      184,  183,  182,  181,  180,  179,  178,  177,  176,  175,
      174,  173,  172,  171,  170,  169,  168,  167,  166,  165,
      164,  163,  162,  161,  160,  159,  158,  157,  156,  155,
      154,  153,  152,  151,  150,  149,  148,  147,  146,  145,
      144,  143,  142,  141,  140,  139,  138,  137,  136,  135,
      134,  133,  132,  131,  130,  129,  126,  125,  124,  123,
      122,  121,  120,  119,  118,  115,  114,  113,  112,  111,
      110,  109,  108,  107,  106,  105,  104,  103,  102,  101,
       98,   97,   96,   95,   94,   93,   92,   91,   90,   89,
       88,   87,   86,   85,   84,   83,   82,   81,   80,   79,

       78,   77,   76,   75,   74,   73,   72,   71,   70,   67,
       66,   63,   37,   34,   62,   61,   60,   55,   54,   51,
       50,   47,   46,   43,   42,   37,   34,  196,    3,  196,
      196,  196,  196,  196,  196,  196,  196,  196,  196,  196,
      196,  196,  196,  196,  196,  196,  196,  196,  196,  196,
      196,  196,  196,  196,  196,  196,  196,  196,  196,  196,
      196,  196,  196,  196,  196,  196,  196,  196
    } ;

static yyconst short int yy_chk[269] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,   20,
       23,   23,   26,   20,   29,   43,   46,   29,   29,   76,
       95,  107,   95,  107,   43,   26,   46,   29,  193,  192,
      190,  188,  186,  185,  184,   76,  197,  197,  197,  197,
      197,  197,  198,  198,  198,  198,  199,  199,  199,  199,
      199,  199,  200,  181,  200,  200,  200,  200,  201,  201,
      202,  180,  202,  202,  202,  202,  203,  179,  178,  203,

      177,  176,  174,  172,  171,  169,  166,  165,  164,  163,
      161,  160,  158,  157,  155,  152,  151,  150,  149,  148,
      147,  144,  143,  142,  140,  139,  138,  137,  136,  135,
      134,  133,  132,  131,  129,  128,  127,  126,  125,  124,
      123,  122,  121,  120,  119,  118,  117,  116,  115,  114,
      113,  112,  111,  110,  109,  108,  106,  105,  104,  103,
      101,  100,   99,   97,   96,   94,   93,   92,   91,   90,
       88,   85,   84,   83,   82,   81,   80,   79,   78,   77,
       75,   74,   73,   72,   71,   70,   69,   68,   67,   66,
       65,   64,   63,   62,   61,   60,   59,   58,   57,   56,

       55,   54,   53,   52,   51,   50,   49,   48,   47,   45,
       44,   42,   36,   33,   32,   31,   30,   28,   27,   25,
       24,   22,   21,   19,   18,   10,    8,    3,  196,  196,
      196,  196,  196,  196,  196,  196,  196,  196,  196,  196,
      196,  196,  196,  196,  196,  196,  196,  196,  196,  196,
      196,  196,  196,  196,  196,  196,  196,  196,  196,  196,
      196,  196,  196,  196,  196,  196,  196,  196
    } ;

static yy_state_type yy_last_accepting_state;
static char *yy_last_accepting_cpos;

/* The intent behind this definition is that it'll catch
 * any uses of REJECT which flex missed.
 */
#define REJECT reject_used_but_not_detected
#define yymore() yymore_used_but_not_detected
#define YY_MORE_ADJ 0
#define YY_RESTORE_YY_MORE_OFFSET
char *yytext;
#line 1 "deflex.l"
#define INITIAL 0
#line 2 "deflex.l"

/*  Copyright 1995, 1997, 1998, 1999, 2002, 2003, 2004
    Free Software Foundation, Inc.

    This file is part of GNU Binutils.

    This program is free software; you can redistribute it and/or modify
    it under the terms of the GNU General Public License as published by
    the Free Software Foundation; either version 2 of the License, or
    (at your option) any later version.

    This program is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
    GNU General Public License for more details.

    You should have received a copy of the GNU General Public License
    along with this program; if not, write to the Free Software
    Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA 02111-1307, USA.  */


/* Contributed by Steve Chamberlain: sac@@cygnus.com  */

#define DONTDECLARE_MALLOC
#include "libiberty.h"
#include "defparse.h"
#include "dlltool.h"

int linenumber;

#line 521 "lex.yy.c"

/* Macros after this point can all be overridden by user definitions in
 * section 1.
 */

#ifndef YY_SKIP_YYWRAP
#ifdef __cplusplus
extern "C" int yywrap YY_PROTO(( void ));
#else
extern int yywrap YY_PROTO(( void ));
#endif
#endif

#ifndef YY_NO_UNPUT
static void yyunput YY_PROTO(( int c, char *buf_ptr ));
#endif

#ifndef yytext_ptr
static void yy_flex_strncpy YY_PROTO(( char *, yyconst char *, int ));
#endif

#ifdef YY_NEED_STRLEN
static int yy_flex_strlen YY_PROTO(( yyconst char * ));
#endif

#ifndef YY_NO_INPUT
#ifdef __cplusplus
static int yyinput YY_PROTO(( void ));
#else
static int input YY_PROTO(( void ));
#endif
#endif

#if YY_STACK_USED
static int yy_start_stack_ptr = 0;
static int yy_start_stack_depth = 0;
static int *yy_start_stack = 0;
#ifndef YY_NO_PUSH_STATE
static void yy_push_state YY_PROTO(( int new_state ));
#endif
#ifndef YY_NO_POP_STATE
static void yy_pop_state YY_PROTO(( void ));
#endif
#ifndef YY_NO_TOP_STATE
static int yy_top_state YY_PROTO(( void ));
#endif

#else
#define YY_NO_PUSH_STATE 1
#define YY_NO_POP_STATE 1
#define YY_NO_TOP_STATE 1
#endif

#ifdef YY_MALLOC_DECL
YY_MALLOC_DECL
#else
#if __STDC__
#ifndef __cplusplus
#include <stdlib.h>
#endif
#else
/* Just try to get by without declaring the routines.  This will fail
 * miserably on non-ANSI systems for which sizeof(size_t) != sizeof(int)
 * or sizeof(void*) != sizeof(int).
 */
#endif
#endif

/* Amount of stuff to slurp up with each read. */
#ifndef YY_READ_BUF_SIZE
#define YY_READ_BUF_SIZE 8192
#endif

/* Copy whatever the last rule matched to the standard output. */

#ifndef ECHO
/* This used to be an fputs(), but since the string might contain NUL's,
 * we now use fwrite().
 */
#define ECHO (void) fwrite( yytext, yyleng, 1, yyout )
#endif

/* Gets input and stuffs it into "buf".  number of characters read, or YY_NULL,
 * is returned in "result".
 */
#ifndef YY_INPUT
#define YY_INPUT(buf,result,max_size) \
	if ( yy_current_buffer->yy_is_interactive ) \
		{ \
		int c = '*', n; \
		for ( n = 0; n < max_size && \
			     (c = getc( yyin )) != EOF && c != '\n'; ++n ) \
			buf[n] = (char) c; \
		if ( c == '\n' ) \
			buf[n++] = (char) c; \
		if ( c == EOF && ferror( yyin ) ) \
			YY_FATAL_ERROR( "input in flex scanner failed" ); \
		result = n; \
		} \
	else \
		{ \
		errno=0; \
		while ( (result = fread(buf, 1, max_size, yyin))==0 && ferror(yyin)) \
			{ \
			if( errno != EINTR) \
				{ \
				YY_FATAL_ERROR( "input in flex scanner failed" ); \
				break; \
				} \
			errno=0; \
			clearerr(yyin); \
			} \
		}
#endif

/* No semi-colon after return; correct usage is to write "yyterminate();" -
 * we don't want an extra ';' after the "return" because that will cause
 * some compilers to complain about unreachable statements.
 */
#ifndef yyterminate
#define yyterminate() return YY_NULL
#endif

/* Number of entries by which start-condition stack grows. */
#ifndef YY_START_STACK_INCR
#define YY_START_STACK_INCR 25
#endif

/* Report a fatal error. */
#ifndef YY_FATAL_ERROR
#define YY_FATAL_ERROR(msg) yy_fatal_error( msg )
#endif

/* Default declaration of generated scanner - a define so the user can
 * easily add parameters.
 */
#ifndef YY_DECL
#define YY_DECL int yylex YY_PROTO(( void ))
#endif

/* Code executed at the beginning of each rule, after yytext and yyleng
 * have been set up.
 */
#ifndef YY_USER_ACTION
#define YY_USER_ACTION
#endif

/* Code executed at the end of each rule. */
#ifndef YY_BREAK
#define YY_BREAK break;
#endif

#define YY_RULE_SETUP \
	YY_USER_ACTION

YY_DECL
	{
	register yy_state_type yy_current_state;
	register char *yy_cp, *yy_bp;
	register int yy_act;

#line 33 "deflex.l"

#line 685 "lex.yy.c"

	if ( yy_init )
		{
		yy_init = 0;

#ifdef YY_USER_INIT
		YY_USER_INIT;
#endif

		if ( ! yy_start )
			yy_start = 1;	/* first start state */

		if ( ! yyin )
			yyin = stdin;

		if ( ! yyout )
			yyout = stdout;

		if ( ! yy_current_buffer )
			yy_current_buffer =
				yy_create_buffer( yyin, YY_BUF_SIZE );

		yy_load_buffer_state();
		}

	while ( 1 )		/* loops until end-of-file is reached */
		{
		yy_cp = yy_c_buf_p;

		/* Support of yytext. */
		*yy_cp = yy_hold_char;

		/* yy_bp points to the position in yy_ch_buf of the start of
		 * the current run.
		 */
		yy_bp = yy_cp;

		yy_current_state = yy_start;
yy_match:
		do
			{
			register YY_CHAR yy_c = yy_ec[YY_SC_TO_UI(*yy_cp)];
			if ( yy_accept[yy_current_state] )
				{
				yy_last_accepting_state = yy_current_state;
				yy_last_accepting_cpos = yy_cp;
				}
			while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
				{
				yy_current_state = (int) yy_def[yy_current_state];
				if ( yy_current_state >= 197 )
					yy_c = yy_meta[(unsigned int) yy_c];
				}
			yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
			++yy_cp;
			}
		while ( yy_base[yy_current_state] != 229 );

yy_find_action:
		yy_act = yy_accept[yy_current_state];
		if ( yy_act == 0 )
			{ /* have to back up */
			yy_cp = yy_last_accepting_cpos;
			yy_current_state = yy_last_accepting_state;
			yy_act = yy_accept[yy_current_state];
			}

		YY_DO_BEFORE_ACTION;


do_action:	/* This label is used only to access EOF actions. */


		switch ( yy_act )
	{ /* beginning of action switch */
			case 0: /* must back up */
			/* undo the effects of YY_DO_BEFORE_ACTION */
			*yy_cp = yy_hold_char;
			yy_cp = yy_last_accepting_cpos;
			yy_current_state = yy_last_accepting_state;
			goto yy_find_action;

case 1:
YY_RULE_SETUP
#line 34 "deflex.l"
{ return NAME;}
	YY_BREAK
case 2:
YY_RULE_SETUP
#line 35 "deflex.l"
{ return LIBRARY;}
	YY_BREAK
case 3:
YY_RULE_SETUP
#line 36 "deflex.l"
{ return DESCRIPTION;}
	YY_BREAK
case 4:
YY_RULE_SETUP
#line 37 "deflex.l"
{ return STACKSIZE;}
	YY_BREAK
case 5:
YY_RULE_SETUP
#line 38 "deflex.l"
{ return HEAPSIZE;}
	YY_BREAK
case 6:
YY_RULE_SETUP
#line 39 "deflex.l"
{ return CODE;}
	YY_BREAK
case 7:
YY_RULE_SETUP
#line 40 "deflex.l"
{ return DATA;}
	YY_BREAK
case 8:
YY_RULE_SETUP
#line 41 "deflex.l"
{ return SECTIONS;}
	YY_BREAK
case 9:
YY_RULE_SETUP
#line 42 "deflex.l"
{ return EXPORTS;}
	YY_BREAK
case 10:
YY_RULE_SETUP
#line 43 "deflex.l"
{ return IMPORTS;}
	YY_BREAK
case 11:
YY_RULE_SETUP
#line 44 "deflex.l"
{ return VERSIONK;}
	YY_BREAK
case 12:
YY_RULE_SETUP
#line 45 "deflex.l"
{ return BASE;}
	YY_BREAK
case 13:
YY_RULE_SETUP
#line 46 "deflex.l"
{ return CONSTANT; }
	YY_BREAK
case 14:
YY_RULE_SETUP
#line 47 "deflex.l"
{ return NONAME; }
	YY_BREAK
case 15:
YY_RULE_SETUP
#line 48 "deflex.l"
{ return PRIVATE; }
	YY_BREAK
case 16:
YY_RULE_SETUP
#line 49 "deflex.l"
{ return READ;}
	YY_BREAK
case 17:
YY_RULE_SETUP
#line 50 "deflex.l"
{ return WRITE;}
	YY_BREAK
case 18:
YY_RULE_SETUP
#line 51 "deflex.l"
{ return EXECUTE;}
	YY_BREAK
case 19:
YY_RULE_SETUP
#line 52 "deflex.l"
{ return SHARED;}
	YY_BREAK
case 20:
YY_RULE_SETUP
#line 53 "deflex.l"
{ return NONSHARED;}
	YY_BREAK
case 21:
YY_RULE_SETUP
#line 54 "deflex.l"
{ return SINGLE;}
	YY_BREAK
case 22:
YY_RULE_SETUP
#line 55 "deflex.l"
{ return MULTIPLE;}
	YY_BREAK
case 23:
YY_RULE_SETUP
#line 56 "deflex.l"
{ return INITINSTANCE;}
	YY_BREAK
case 24:
YY_RULE_SETUP
#line 57 "deflex.l"
{ return INITGLOBAL;}
	YY_BREAK
case 25:
YY_RULE_SETUP
#line 58 "deflex.l"
{ return TERMINSTANCE;}
	YY_BREAK
case 26:
YY_RULE_SETUP
#line 59 "deflex.l"
{ return TERMGLOBAL;}
	YY_BREAK
case 27:
YY_RULE_SETUP
#line 61 "deflex.l"
{ yylval.number = strtol (yytext,0,0); 
		return NUMBER; }
	YY_BREAK
case 28:
YY_RULE_SETUP
#line 64 "deflex.l"
{ 	
		yylval.id =  xstrdup (yytext);
		return ID;
		}
	YY_BREAK
case 29:
YY_RULE_SETUP
#line 69 "deflex.l"
{
		yylval.id = xstrdup (yytext+1);
		yylval.id[yyleng-2] = 0;
		return ID;
		}
	YY_BREAK
case 30:
YY_RULE_SETUP
#line 75 "deflex.l"
{
		yylval.id = xstrdup (yytext+1);
		yylval.id[yyleng-2] = 0;
		return ID;
		}
	YY_BREAK
case 31:
YY_RULE_SETUP
#line 80 "deflex.l"
{ }
	YY_BREAK
case 32:
YY_RULE_SETUP
#line 81 "deflex.l"
{ }
	YY_BREAK
case 33:
YY_RULE_SETUP
#line 82 "deflex.l"
{ }
	YY_BREAK
case 34:
YY_RULE_SETUP
#line 83 "deflex.l"
{ }
	YY_BREAK
case 35:
YY_RULE_SETUP
#line 84 "deflex.l"
{ linenumber ++ ;}
	YY_BREAK
case 36:
YY_RULE_SETUP
#line 85 "deflex.l"
{ return '=';}
	YY_BREAK
case 37:
YY_RULE_SETUP
#line 86 "deflex.l"
{ return '.';}
	YY_BREAK
case 38:
YY_RULE_SETUP
#line 87 "deflex.l"
{ return '@@';}
	YY_BREAK
case 39:
YY_RULE_SETUP
#line 88 "deflex.l"
{ return ',';}
	YY_BREAK
case 40:
YY_RULE_SETUP
#line 89 "deflex.l"
ECHO;
	YY_BREAK
#line 980 "lex.yy.c"
case YY_STATE_EOF(INITIAL):
	yyterminate();

	case YY_END_OF_BUFFER:
		{
		/* Amount of text matched not including the EOB char. */
		int yy_amount_of_matched_text = (int) (yy_cp - yytext_ptr) - 1;

		/* Undo the effects of YY_DO_BEFORE_ACTION. */
		*yy_cp = yy_hold_char;
		YY_RESTORE_YY_MORE_OFFSET

		if ( yy_current_buffer->yy_buffer_status == YY_BUFFER_NEW )
			{
			/* We're scanning a new file or input source.  It's
			 * possible that this happened because the user
			 * just pointed yyin at a new source and called
			 * yylex().  If so, then we have to assure
			 * consistency between yy_current_buffer and our
			 * globals.  Here is the right place to do so, because
			 * this is the first action (other than possibly a
			 * back-up) that will match for the new input source.
			 */
			yy_n_chars = yy_current_buffer->yy_n_chars;
			yy_current_buffer->yy_input_file = yyin;
			yy_current_buffer->yy_buffer_status = YY_BUFFER_NORMAL;
			}

		/* Note that here we test for yy_c_buf_p "<=" to the position
		 * of the first EOB in the buffer, since yy_c_buf_p will
		 * already have been incremented past the NUL character
		 * (since all states make transitions on EOB to the
		 * end-of-buffer state).  Contrast this with the test
		 * in input().
		 */
		if ( yy_c_buf_p <= &yy_current_buffer->yy_ch_buf[yy_n_chars] )
			{ /* This was really a NUL. */
			yy_state_type yy_next_state;

			yy_c_buf_p = yytext_ptr + yy_amount_of_matched_text;

			yy_current_state = yy_get_previous_state();

			/* Okay, we're now positioned to make the NUL
			 * transition.  We couldn't have
			 * yy_get_previous_state() go ahead and do it
			 * for us because it doesn't know how to deal
			 * with the possibility of jamming (and we don't
			 * want to build jamming into it because then it
			 * will run more slowly).
			 */

			yy_next_state = yy_try_NUL_trans( yy_current_state );

			yy_bp = yytext_ptr + YY_MORE_ADJ;

			if ( yy_next_state )
				{
				/* Consume the NUL. */
				yy_cp = ++yy_c_buf_p;
				yy_current_state = yy_next_state;
				goto yy_match;
				}

			else
				{
				yy_cp = yy_c_buf_p;
				goto yy_find_action;
				}
			}

		else switch ( yy_get_next_buffer() )
			{
			case EOB_ACT_END_OF_FILE:
				{
				yy_did_buffer_switch_on_eof = 0;

				if ( yywrap() )
					{
					/* Note: because we've taken care in
					 * yy_get_next_buffer() to have set up
					 * yytext, we can now set up
					 * yy_c_buf_p so that if some total
					 * hoser (like flex itself) wants to
					 * call the scanner after we return the
					 * YY_NULL, it'll still work - another
					 * YY_NULL will get returned.
					 */
					yy_c_buf_p = yytext_ptr + YY_MORE_ADJ;

					yy_act = YY_STATE_EOF(YY_START);
					goto do_action;
					}

				else
					{
					if ( ! yy_did_buffer_switch_on_eof )
						YY_NEW_FILE;
					}
				break;
				}

			case EOB_ACT_CONTINUE_SCAN:
				yy_c_buf_p =
					yytext_ptr + yy_amount_of_matched_text;

				yy_current_state = yy_get_previous_state();

				yy_cp = yy_c_buf_p;
				yy_bp = yytext_ptr + YY_MORE_ADJ;
				goto yy_match;

			case EOB_ACT_LAST_MATCH:
				yy_c_buf_p =
				&yy_current_buffer->yy_ch_buf[yy_n_chars];

				yy_current_state = yy_get_previous_state();

				yy_cp = yy_c_buf_p;
				yy_bp = yytext_ptr + YY_MORE_ADJ;
				goto yy_find_action;
			}
		break;
		}

	default:
		YY_FATAL_ERROR(
			"fatal flex scanner internal error--no action found" );
	} /* end of action switch */
		} /* end of scanning one token */
	} /* end of yylex */


/* yy_get_next_buffer - try to read in a new buffer
 *
 * Returns a code representing an action:
 *	EOB_ACT_LAST_MATCH -
 *	EOB_ACT_CONTINUE_SCAN - continue scanning from current position
 *	EOB_ACT_END_OF_FILE - end of file
 */

static int yy_get_next_buffer()
	{
	register char *dest = yy_current_buffer->yy_ch_buf;
	register char *source = yytext_ptr;
	register int number_to_move, i;
	int ret_val;

	if ( yy_c_buf_p > &yy_current_buffer->yy_ch_buf[yy_n_chars + 1] )
		YY_FATAL_ERROR(
		"fatal flex scanner internal error--end of buffer missed" );

	if ( yy_current_buffer->yy_fill_buffer == 0 )
		{ /* Don't try to fill the buffer, so this is an EOF. */
		if ( yy_c_buf_p - yytext_ptr - YY_MORE_ADJ == 1 )
			{
			/* We matched a single character, the EOB, so
			 * treat this as a final EOF.
			 */
			return EOB_ACT_END_OF_FILE;
			}

		else
			{
			/* We matched some text prior to the EOB, first
			 * process it.
			 */
			return EOB_ACT_LAST_MATCH;
			}
		}

	/* Try to read more data. */

	/* First move last chars to start of buffer. */
	number_to_move = (int) (yy_c_buf_p - yytext_ptr) - 1;

	for ( i = 0; i < number_to_move; ++i )
		*(dest++) = *(source++);

	if ( yy_current_buffer->yy_buffer_status == YY_BUFFER_EOF_PENDING )
		/* don't do the read, it's not guaranteed to return an EOF,
		 * just force an EOF
		 */
		yy_current_buffer->yy_n_chars = yy_n_chars = 0;

	else
		{
		int num_to_read =
			yy_current_buffer->yy_buf_size - number_to_move - 1;

		while ( num_to_read <= 0 )
			{ /* Not enough room in the buffer - grow it. */
#ifdef YY_USES_REJECT
			YY_FATAL_ERROR(
"input buffer overflow, can't enlarge buffer because scanner uses REJECT" );
#else

			/* just a shorter name for the current buffer */
			YY_BUFFER_STATE b = yy_current_buffer;

			int yy_c_buf_p_offset =
				(int) (yy_c_buf_p - b->yy_ch_buf);

			if ( b->yy_is_our_buffer )
				{
				int new_size = b->yy_buf_size * 2;

				if ( new_size <= 0 )
					b->yy_buf_size += b->yy_buf_size / 8;
				else
					b->yy_buf_size *= 2;

				b->yy_ch_buf = (char *)
					/* Include room in for 2 EOB chars. */
					yy_flex_realloc( (void *) b->yy_ch_buf,
							 b->yy_buf_size + 2 );
				}
			else
				/* Can't grow it, we don't own it. */
				b->yy_ch_buf = 0;

			if ( ! b->yy_ch_buf )
				YY_FATAL_ERROR(
				"fatal error - scanner input buffer overflow" );

			yy_c_buf_p = &b->yy_ch_buf[yy_c_buf_p_offset];

			num_to_read = yy_current_buffer->yy_buf_size -
						number_to_move - 1;
#endif
			}

		if ( num_to_read > YY_READ_BUF_SIZE )
			num_to_read = YY_READ_BUF_SIZE;

		/* Read in more data. */
		YY_INPUT( (&yy_current_buffer->yy_ch_buf[number_to_move]),
			yy_n_chars, num_to_read );

		yy_current_buffer->yy_n_chars = yy_n_chars;
		}

	if ( yy_n_chars == 0 )
		{
		if ( number_to_move == YY_MORE_ADJ )
			{
			ret_val = EOB_ACT_END_OF_FILE;
			yyrestart( yyin );
			}

		else
			{
			ret_val = EOB_ACT_LAST_MATCH;
			yy_current_buffer->yy_buffer_status =
				YY_BUFFER_EOF_PENDING;
			}
		}

	else
		ret_val = EOB_ACT_CONTINUE_SCAN;

	yy_n_chars += number_to_move;
	yy_current_buffer->yy_ch_buf[yy_n_chars] = YY_END_OF_BUFFER_CHAR;
	yy_current_buffer->yy_ch_buf[yy_n_chars + 1] = YY_END_OF_BUFFER_CHAR;

	yytext_ptr = &yy_current_buffer->yy_ch_buf[0];

	return ret_val;
	}


/* yy_get_previous_state - get the state just before the EOB char was reached */

static yy_state_type yy_get_previous_state()
	{
	register yy_state_type yy_current_state;
	register char *yy_cp;

	yy_current_state = yy_start;

	for ( yy_cp = yytext_ptr + YY_MORE_ADJ; yy_cp < yy_c_buf_p; ++yy_cp )
		{
		register YY_CHAR yy_c = (*yy_cp ? yy_ec[YY_SC_TO_UI(*yy_cp)] : 1);
		if ( yy_accept[yy_current_state] )
			{
			yy_last_accepting_state = yy_current_state;
			yy_last_accepting_cpos = yy_cp;
			}
		while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
			{
			yy_current_state = (int) yy_def[yy_current_state];
			if ( yy_current_state >= 197 )
				yy_c = yy_meta[(unsigned int) yy_c];
			}
		yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
		}

	return yy_current_state;
	}


/* yy_try_NUL_trans - try to make a transition on the NUL character
 *
 * synopsis
 *	next_state = yy_try_NUL_trans( current_state );
 */

#ifdef YY_USE_PROTOS
static yy_state_type yy_try_NUL_trans( yy_state_type yy_current_state )
#else
static yy_state_type yy_try_NUL_trans( yy_current_state )
yy_state_type yy_current_state;
#endif
	{
	register int yy_is_jam;
	register char *yy_cp = yy_c_buf_p;

	register YY_CHAR yy_c = 1;
	if ( yy_accept[yy_current_state] )
		{
		yy_last_accepting_state = yy_current_state;
		yy_last_accepting_cpos = yy_cp;
		}
	while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
		{
		yy_current_state = (int) yy_def[yy_current_state];
		if ( yy_current_state >= 197 )
			yy_c = yy_meta[(unsigned int) yy_c];
		}
	yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
	yy_is_jam = (yy_current_state == 196);

	return yy_is_jam ? 0 : yy_current_state;
	}


#ifndef YY_NO_UNPUT
#ifdef YY_USE_PROTOS
static void yyunput( int c, register char *yy_bp )
#else
static void yyunput( c, yy_bp )
int c;
register char *yy_bp;
#endif
	{
	register char *yy_cp = yy_c_buf_p;

	/* undo effects of setting up yytext */
	*yy_cp = yy_hold_char;

	if ( yy_cp < yy_current_buffer->yy_ch_buf + 2 )
		{ /* need to shift things up to make room */
		/* +2 for EOB chars. */
		register int number_to_move = yy_n_chars + 2;
		register char *dest = &yy_current_buffer->yy_ch_buf[
					yy_current_buffer->yy_buf_size + 2];
		register char *source =
				&yy_current_buffer->yy_ch_buf[number_to_move];

		while ( source > yy_current_buffer->yy_ch_buf )
			*--dest = *--source;

		yy_cp += (int) (dest - source);
		yy_bp += (int) (dest - source);
		yy_current_buffer->yy_n_chars =
			yy_n_chars = yy_current_buffer->yy_buf_size;

		if ( yy_cp < yy_current_buffer->yy_ch_buf + 2 )
			YY_FATAL_ERROR( "flex scanner push-back overflow" );
		}

	*--yy_cp = (char) c;


	yytext_ptr = yy_bp;
	yy_hold_char = *yy_cp;
	yy_c_buf_p = yy_cp;
	}
#endif	/* ifndef YY_NO_UNPUT */


#ifdef __cplusplus
static int yyinput()
#else
static int input()
#endif
	{
	int c;

	*yy_c_buf_p = yy_hold_char;

	if ( *yy_c_buf_p == YY_END_OF_BUFFER_CHAR )
		{
		/* yy_c_buf_p now points to the character we want to return.
		 * If this occurs *before* the EOB characters, then it's a
		 * valid NUL; if not, then we've hit the end of the buffer.
		 */
		if ( yy_c_buf_p < &yy_current_buffer->yy_ch_buf[yy_n_chars] )
			/* This was really a NUL. */
			*yy_c_buf_p = '\0';

		else
			{ /* need more input */
			int offset = yy_c_buf_p - yytext_ptr;
			++yy_c_buf_p;

			switch ( yy_get_next_buffer() )
				{
				case EOB_ACT_LAST_MATCH:
					/* This happens because yy_g_n_b()
					 * sees that we've accumulated a
					 * token and flags that we need to
					 * try matching the token before
					 * proceeding.  But for input(),
					 * there's no matching to consider.
					 * So convert the EOB_ACT_LAST_MATCH
					 * to EOB_ACT_END_OF_FILE.
					 */

					/* Reset buffer status. */
					yyrestart( yyin );

					/* fall through */

				case EOB_ACT_END_OF_FILE:
					{
					if ( yywrap() )
						return EOF;

					if ( ! yy_did_buffer_switch_on_eof )
						YY_NEW_FILE;
#ifdef __cplusplus
					return yyinput();
#else
					return input();
#endif
					}

				case EOB_ACT_CONTINUE_SCAN:
					yy_c_buf_p = yytext_ptr + offset;
					break;
				}
			}
		}

	c = *(unsigned char *) yy_c_buf_p;	/* cast for 8-bit char's */
	*yy_c_buf_p = '\0';	/* preserve yytext */
	yy_hold_char = *++yy_c_buf_p;


	return c;
	}


#ifdef YY_USE_PROTOS
void yyrestart( FILE *input_file )
#else
void yyrestart( input_file )
FILE *input_file;
#endif
	{
	if ( ! yy_current_buffer )
		yy_current_buffer = yy_create_buffer( yyin, YY_BUF_SIZE );

	yy_init_buffer( yy_current_buffer, input_file );
	yy_load_buffer_state();
	}


#ifdef YY_USE_PROTOS
void yy_switch_to_buffer( YY_BUFFER_STATE new_buffer )
#else
void yy_switch_to_buffer( new_buffer )
YY_BUFFER_STATE new_buffer;
#endif
	{
	if ( yy_current_buffer == new_buffer )
		return;

	if ( yy_current_buffer )
		{
		/* Flush out information for old buffer. */
		*yy_c_buf_p = yy_hold_char;
		yy_current_buffer->yy_buf_pos = yy_c_buf_p;
		yy_current_buffer->yy_n_chars = yy_n_chars;
		}

	yy_current_buffer = new_buffer;
	yy_load_buffer_state();

	/* We don't actually know whether we did this switch during
	 * EOF (yywrap()) processing, but the only time this flag
	 * is looked at is after yywrap() is called, so it's safe
	 * to go ahead and always set it.
	 */
	yy_did_buffer_switch_on_eof = 1;
	}


#ifdef YY_USE_PROTOS
void yy_load_buffer_state( void )
#else
void yy_load_buffer_state()
#endif
	{
	yy_n_chars = yy_current_buffer->yy_n_chars;
	yytext_ptr = yy_c_buf_p = yy_current_buffer->yy_buf_pos;
	yyin = yy_current_buffer->yy_input_file;
	yy_hold_char = *yy_c_buf_p;
	}


#ifdef YY_USE_PROTOS
YY_BUFFER_STATE yy_create_buffer( FILE *file, int size )
#else
YY_BUFFER_STATE yy_create_buffer( file, size )
FILE *file;
int size;
#endif
	{
	YY_BUFFER_STATE b;

	b = (YY_BUFFER_STATE) yy_flex_alloc( sizeof( struct yy_buffer_state ) );
	if ( ! b )
		YY_FATAL_ERROR( "out of dynamic memory in yy_create_buffer()" );

	b->yy_buf_size = size;

	/* yy_ch_buf has to be 2 characters longer than the size given because
	 * we need to put in 2 end-of-buffer characters.
	 */
	b->yy_ch_buf = (char *) yy_flex_alloc( b->yy_buf_size + 2 );
	if ( ! b->yy_ch_buf )
		YY_FATAL_ERROR( "out of dynamic memory in yy_create_buffer()" );

	b->yy_is_our_buffer = 1;

	yy_init_buffer( b, file );

	return b;
	}


#ifdef YY_USE_PROTOS
void yy_delete_buffer( YY_BUFFER_STATE b )
#else
void yy_delete_buffer( b )
YY_BUFFER_STATE b;
#endif
	{
	if ( ! b )
		return;

	if ( b == yy_current_buffer )
		yy_current_buffer = (YY_BUFFER_STATE) 0;

	if ( b->yy_is_our_buffer )
		yy_flex_free( (void *) b->yy_ch_buf );

	yy_flex_free( (void *) b );
	}


#ifndef _WIN32
#include <unistd.h>
#else
#ifndef YY_ALWAYS_INTERACTIVE
#ifndef YY_NEVER_INTERACTIVE
extern int isatty YY_PROTO(( int ));
#endif
#endif
#endif

#ifdef YY_USE_PROTOS
void yy_init_buffer( YY_BUFFER_STATE b, FILE *file )
#else
void yy_init_buffer( b, file )
YY_BUFFER_STATE b;
FILE *file;
#endif


	{
	yy_flush_buffer( b );

	b->yy_input_file = file;
	b->yy_fill_buffer = 1;

#if YY_ALWAYS_INTERACTIVE
	b->yy_is_interactive = 1;
#else
#if YY_NEVER_INTERACTIVE
	b->yy_is_interactive = 0;
#else
	b->yy_is_interactive = file ? (isatty( fileno(file) ) > 0) : 0;
#endif
#endif
	}


#ifdef YY_USE_PROTOS
void yy_flush_buffer( YY_BUFFER_STATE b )
#else
void yy_flush_buffer( b )
YY_BUFFER_STATE b;
#endif

	{
	if ( ! b )
		return;

	b->yy_n_chars = 0;

	/* We always need two end-of-buffer characters.  The first causes
	 * a transition to the end-of-buffer state.  The second causes
	 * a jam in that state.
	 */
	b->yy_ch_buf[0] = YY_END_OF_BUFFER_CHAR;
	b->yy_ch_buf[1] = YY_END_OF_BUFFER_CHAR;

	b->yy_buf_pos = &b->yy_ch_buf[0];

	b->yy_at_bol = 1;
	b->yy_buffer_status = YY_BUFFER_NEW;

	if ( b == yy_current_buffer )
		yy_load_buffer_state();
	}


#ifndef YY_NO_SCAN_BUFFER
#ifdef YY_USE_PROTOS
YY_BUFFER_STATE yy_scan_buffer( char *base, yy_size_t size )
#else
YY_BUFFER_STATE yy_scan_buffer( base, size )
char *base;
yy_size_t size;
#endif
	{
	YY_BUFFER_STATE b;

	if ( size < 2 ||
	     base[size-2] != YY_END_OF_BUFFER_CHAR ||
	     base[size-1] != YY_END_OF_BUFFER_CHAR )
		/* They forgot to leave room for the EOB's. */
		return 0;

	b = (YY_BUFFER_STATE) yy_flex_alloc( sizeof( struct yy_buffer_state ) );
	if ( ! b )
		YY_FATAL_ERROR( "out of dynamic memory in yy_scan_buffer()" );

	b->yy_buf_size = size - 2;	/* "- 2" to take care of EOB's */
	b->yy_buf_pos = b->yy_ch_buf = base;
	b->yy_is_our_buffer = 0;
	b->yy_input_file = 0;
	b->yy_n_chars = b->yy_buf_size;
	b->yy_is_interactive = 0;
	b->yy_at_bol = 1;
	b->yy_fill_buffer = 0;
	b->yy_buffer_status = YY_BUFFER_NEW;

	yy_switch_to_buffer( b );

	return b;
	}
#endif


#ifndef YY_NO_SCAN_STRING
#ifdef YY_USE_PROTOS
YY_BUFFER_STATE yy_scan_string( yyconst char *yy_str )
#else
YY_BUFFER_STATE yy_scan_string( yy_str )
yyconst char *yy_str;
#endif
	{
	int len;
	for ( len = 0; yy_str[len]; ++len )
		;

	return yy_scan_bytes( yy_str, len );
	}
#endif


#ifndef YY_NO_SCAN_BYTES
#ifdef YY_USE_PROTOS
YY_BUFFER_STATE yy_scan_bytes( yyconst char *bytes, int len )
#else
YY_BUFFER_STATE yy_scan_bytes( bytes, len )
yyconst char *bytes;
int len;
#endif
	{
	YY_BUFFER_STATE b;
	char *buf;
	yy_size_t n;
	int i;

	/* Get memory for full buffer, including space for trailing EOB's. */
	n = len + 2;
	buf = (char *) yy_flex_alloc( n );
	if ( ! buf )
		YY_FATAL_ERROR( "out of dynamic memory in yy_scan_bytes()" );

	for ( i = 0; i < len; ++i )
		buf[i] = bytes[i];

	buf[len] = buf[len+1] = YY_END_OF_BUFFER_CHAR;

	b = yy_scan_buffer( buf, n );
	if ( ! b )
		YY_FATAL_ERROR( "bad buffer in yy_scan_bytes()" );

	/* It's okay to grow etc. this buffer, and we should throw it
	 * away when we're done.
	 */
	b->yy_is_our_buffer = 1;

	return b;
	}
#endif


#ifndef YY_NO_PUSH_STATE
#ifdef YY_USE_PROTOS
static void yy_push_state( int new_state )
#else
static void yy_push_state( new_state )
int new_state;
#endif
	{
	if ( yy_start_stack_ptr >= yy_start_stack_depth )
		{
		yy_size_t new_size;

		yy_start_stack_depth += YY_START_STACK_INCR;
		new_size = yy_start_stack_depth * sizeof( int );

		if ( ! yy_start_stack )
			yy_start_stack = (int *) yy_flex_alloc( new_size );

		else
			yy_start_stack = (int *) yy_flex_realloc(
					(void *) yy_start_stack, new_size );

		if ( ! yy_start_stack )
			YY_FATAL_ERROR(
			"out of memory expanding start-condition stack" );
		}

	yy_start_stack[yy_start_stack_ptr++] = YY_START;

	BEGIN(new_state);
	}
#endif


#ifndef YY_NO_POP_STATE
static void yy_pop_state()
	{
	if ( --yy_start_stack_ptr < 0 )
		YY_FATAL_ERROR( "start-condition stack underflow" );

	BEGIN(yy_start_stack[yy_start_stack_ptr]);
	}
#endif


#ifndef YY_NO_TOP_STATE
static int yy_top_state()
	{
	return yy_start_stack[yy_start_stack_ptr - 1];
	}
#endif

#ifndef YY_EXIT_FAILURE
#define YY_EXIT_FAILURE 2
#endif

#ifdef YY_USE_PROTOS
static void yy_fatal_error( yyconst char msg[] )
#else
static void yy_fatal_error( msg )
char msg[];
#endif
	{
	(void) fprintf( stderr, "%s\n", msg );
	exit( YY_EXIT_FAILURE );
	}



/* Redefine yyless() so it works in section 3 code. */

#undef yyless
#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up yytext. */ \
		yytext[yyleng] = yy_hold_char; \
		yy_c_buf_p = yytext + n; \
		yy_hold_char = *yy_c_buf_p; \
		*yy_c_buf_p = '\0'; \
		yyleng = n; \
		} \
	while ( 0 )


/* Internal utility routines. */

#ifndef yytext_ptr
#ifdef YY_USE_PROTOS
static void yy_flex_strncpy( char *s1, yyconst char *s2, int n )
#else
static void yy_flex_strncpy( s1, s2, n )
char *s1;
yyconst char *s2;
int n;
#endif
	{
	register int i;
	for ( i = 0; i < n; ++i )
		s1[i] = s2[i];
	}
#endif

#ifdef YY_NEED_STRLEN
#ifdef YY_USE_PROTOS
static int yy_flex_strlen( yyconst char *s )
#else
static int yy_flex_strlen( s )
yyconst char *s;
#endif
	{
	register int n;
	for ( n = 0; s[n]; ++n )
		;

	return n;
	}
#endif


#ifdef YY_USE_PROTOS
static void *yy_flex_alloc( yy_size_t size )
#else
static void *yy_flex_alloc( size )
yy_size_t size;
#endif
	{
	return (void *) malloc( size );
	}

#ifdef YY_USE_PROTOS
static void *yy_flex_realloc( void *ptr, yy_size_t size )
#else
static void *yy_flex_realloc( ptr, size )
void *ptr;
yy_size_t size;
#endif
	{
	/* The cast to (char *) in the following accommodates both
	 * implementations that use char* generic pointers, and those
	 * that use void* generic pointers.  It works with the latter
	 * because both ANSI C and C++ allow castless assignment from
	 * any pointer type to void*, and deal with argument conversions
	 * as though doing an assignment.
	 */
	return (void *) realloc( (char *) ptr, size );
	}

#ifdef YY_USE_PROTOS
static void yy_flex_free( void *ptr )
#else
static void yy_flex_free( ptr )
void *ptr;
#endif
	{
	free( ptr );
	}

#if YY_MAIN
int main()
	{
	yylex();
	return 0;
	}
#endif
#line 89 "deflex.l"

#ifndef yywrap
/* Needed for lex, though not flex. */
int yywrap(void) { return 1; }
#endif
@


1.2
log
@Merge conflicts, bringing our changes back in:
- extra $(SHELL) and sugar for make (so that files not mode +x still work)
- safer temp file handling
- our W^X binary layout changes in ld
- OpenBSD policy for library file selection in ld
- arm and m88k changes which were not merged in time for official 2.15
- bfd core file handling
- a couple typos

New for 2.15:
- ld(1) and as(1) manpages now generated at build time
- binutils/stabs.c reverted to use our in-tree libiberty for now
- we still use our VIA C3 crypto code over stock binutils, as it recognizes
  more instructions
- new emulations for OpenBSD on mips64 machines, to help OpenBSD/sgi
- relaxed %f# handling in gas on OpenBSD/sparc64 (same as was in 2.14)

Tested on all platforms by various people; special thanks to sturm@@ and
otto@@.
@
text
@d4 1
a4 1
 * $Header: /home/daffy/u0/vern/flex/RCS/flex.skl,v 2.91 96/09/10 16:58:48 vern Exp $
@


1.1
log
@Initial revision
@
text
@d4 1
a4 1
 * $Header: /home/daffy/u0/vern/flex/RCS/flex.skl,v 2.85 95/04/24 10:48:47 vern Exp $
d12 1
a12 1

d25 1
d27 1
d67 1
d132 1
d242 1
a242 1
YY_BUFFER_STATE yy_scan_string YY_PROTO(( yyconst char *str ));
d288 3
a290 3
#define YY_NUM_RULES 32
#define YY_END_OF_BUFFER 33
static yyconst short int yy_accept[135] =
d292 22
a313 15
        0,    0,   33,   32,   26,   27,   25,   32,   32,   32,
       23,   31,   29,   19,   24,   28,   30,   32,   32,   32,
       32,   32,   32,   32,   32,   32,   32,   32,   32,    0,
       21,   20,    0,   22,   23,   19,   24,   20,   20,   20,
       20,   20,   20,   20,   20,   20,   20,   20,   20,   20,
       20,   20,   20,   20,   20,   20,   20,   20,   20,   20,
       20,   20,   20,   20,   20,   20,   20,   20,   20,   20,
       20,   12,    6,   20,    7,   20,   20,   20,   20,   20,
       20,    1,   20,   15,   20,   20,   20,   20,   20,   20,
       20,   20,   20,   20,   20,   20,   20,   20,   20,   20,

       20,   16,   20,   20,   20,   20,   20,   20,   20,   14,
       20,   18,   20,   20,   20,   20,   17,    9,   20,   10,
        2,   20,   20,   11,   13,   20,    5,    8,   20,   20,
        4,   20,    3,    0
d324 3
a326 3
       14,    1,    1,   15,   16,   17,   18,   19,   20,   21,
        6,   22,   23,    6,   24,   25,   26,   27,   28,   29,
        6,   30,   31,   32,   33,   34,   35,   36,   37,   38,
d348 1
a348 1
static yyconst int yy_meta[39] =
d351 3
a353 3
        3,    4,    1,    1,    3,    4,    4,    4,    4,    4,
        4,    3,    3,    3,    3,    3,    3,    3,    3,    3,
        3,    3,    3,    3,    3,    3,    3,    3
d356 1
a356 1
static yyconst short int yy_base[141] =
d358 23
a380 15
        0,    0,  156,  157,  157,  157,  157,  150,    0,  147,
        0,  157,  157,    0,    0,  157,  157,  137,  124,   23,
      115,  130,  123,  125,   24,  127,   22,  126,  115,  139,
      157,    0,  136,  157,    0,    0,    0,  111,   22,  109,
      109,   26,  123,  109,  120,  110,  108,  118,  115,  116,
      115,  100,  106,  108,  107,   95,  109,  106,  105,   94,
       92,   92,   89,   98,  101,   97,   83,   84,   95,   81,
       79,    0,    0,   78,    0,   79,   75,   77,   75,   75,
       88,    0,   77,    0,   79,   81,   76,   76,   78,   81,
       73,   63,   62,   70,   60,   61,   70,   61,   69,   56,

       58,    0,   58,   55,   63,   51,   43,   49,   42,    0,
       51,    0,   54,   49,   43,   42,    0,    0,   51,    0,
        0,   36,   15,    0,    0,   28,    0,    0,   30,   20,
        0,   20,    0,  157,   55,   57,   61,   65,   41,   69
d383 1
a383 1
static yyconst short int yy_def[141] =
d385 23
a407 15
      134,    1,  134,  134,  134,  134,  134,  135,  136,  137,
      138,  134,  134,  139,  140,  134,  134,  136,  136,  136,
      136,  136,  136,  136,  136,  136,  136,  136,  136,  135,
      134,  136,  137,  134,  138,  139,  140,  136,  136,  136,
      136,  136,  136,  136,  136,  136,  136,  136,  136,  136,
      136,  136,  136,  136,  136,  136,  136,  136,  136,  136,
      136,  136,  136,  136,  136,  136,  136,  136,  136,  136,
      136,  136,  136,  136,  136,  136,  136,  136,  136,  136,
      136,  136,  136,  136,  136,  136,  136,  136,  136,  136,
      136,  136,  136,  136,  136,  136,  136,  136,  136,  136,

      136,  136,  136,  136,  136,  136,  136,  136,  136,  136,
      136,  136,  136,  136,  136,  136,  136,  136,  136,  136,
      136,  136,  136,  136,  136,  136,  136,  136,  136,  136,
      136,  136,  136,    0,  134,  134,  134,  134,  134,  134
d410 1
a410 1
static yyconst short int yy_nxt[196] =
d414 27
a440 20
        9,   22,   23,    9,   24,    9,   25,    9,    9,   26,
       27,    9,    9,   28,   29,    9,    9,    9,   40,   46,
       55,   49,   41,   50,   36,   59,  133,  132,   56,  131,
      130,   47,  129,   51,   60,   30,   30,   30,   30,   32,
       32,   33,   33,   33,   33,   35,  128,   35,   35,   37,
      127,   37,   37,  126,  125,  124,  123,  122,  121,  120,
      119,  118,  117,  116,  115,  114,  113,  112,  111,  110,
      109,  108,  107,  106,  105,  104,  103,  102,  101,  100,

       99,   98,   97,   96,   95,   94,   93,   92,   91,   90,
       89,   88,   87,   86,   85,   84,   83,   82,   81,   80,
       79,   78,   77,   76,   75,   74,   73,   72,   71,   70,
       69,   68,   67,   66,   65,   64,   63,   62,   61,   58,
       57,   54,   34,   31,   53,   52,   48,   45,   44,   43,
       42,   39,   38,   34,   31,  134,    3,  134,  134,  134,
      134,  134,  134,  134,  134,  134,  134,  134,  134,  134,
      134,  134,  134,  134,  134,  134,  134,  134,  134,  134,
      134,  134,  134,  134,  134,  134,  134,  134,  134,  134,
      134,  134,  134,  134,  134

d443 1
a443 1
static yyconst short int yy_chk[196] =
d448 26
a473 19
        1,    1,    1,    1,    1,    1,    1,    1,   20,   25,
       39,   27,   20,   27,  139,   42,  132,  130,   39,  129,
      126,   25,  123,   27,   42,  135,  135,  135,  135,  136,
      136,  137,  137,  137,  137,  138,  122,  138,  138,  140,
      119,  140,  140,  116,  115,  114,  113,  111,  109,  108,
      107,  106,  105,  104,  103,  101,  100,   99,   98,   97,
       96,   95,   94,   93,   92,   91,   90,   89,   88,   87,

       86,   85,   83,   81,   80,   79,   78,   77,   76,   74,
       71,   70,   69,   68,   67,   66,   65,   64,   63,   62,
       61,   60,   59,   58,   57,   56,   55,   54,   53,   52,
       51,   50,   49,   48,   47,   46,   45,   44,   43,   41,
       40,   38,   33,   30,   29,   28,   26,   24,   23,   22,
       21,   19,   18,   10,    8,    3,  134,  134,  134,  134,
      134,  134,  134,  134,  134,  134,  134,  134,  134,  134,
      134,  134,  134,  134,  134,  134,  134,  134,  134,  134,
      134,  134,  134,  134,  134,  134,  134,  134,  134,  134,
      134,  134,  134,  134,  134

d485 1
d487 1
a487 1
#line 1 "./deflex.l"
d489 1
a489 2
#line 2 "./deflex.l"
/* deflex.l - Lexer for .def files */
d491 2
a492 1
/*   Copyright (C) 1995 Free Software Foundation, Inc.
d494 1
a494 1
This file is part of GNU Binutils.
d496 4
a499 4
This program is free software; you can redistribute it and/or modify
it under the terms of the GNU General Public License as published by
the Free Software Foundation; either version 2 of the License, or
(at your option) any later version.
d501 4
a504 4
This program is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
GNU General Public License for more details.
d506 3
a508 3
You should have received a copy of the GNU General Public License
along with this program; if not, write to the Free Software
Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA 02111-1307, USA.  */
d511 1
a511 2
/* Contributed by Steve Chamberlain
   		  sac@@cygnus.com
a512 1
*/
d514 1
d516 2
a517 1
extern char *strdup();
d520 1
a520 1
#line 479 "lex.yy.c"
d542 4
d620 14
a633 3
	else if ( ((result = fread( buf, 1, max_size, yyin )) == 0) \
		  && ferror( yyin ) ) \
		YY_FATAL_ERROR( "input in flex scanner failed" );
d682 1
a682 1
#line 33 "./deflex.l"
d684 1
a684 1
#line 628 "lex.yy.c"
d735 1
a735 1
				if ( yy_current_state >= 135 )
d741 1
a741 1
		while ( yy_base[yy_current_state] != 157 );
d769 1
a769 1
#line 34 "./deflex.l"
d774 1
a774 1
#line 35 "./deflex.l"
d779 1
a779 1
#line 36 "./deflex.l"
d784 1
a784 1
#line 37 "./deflex.l"
d789 1
a789 1
#line 38 "./deflex.l"
d794 1
a794 1
#line 39 "./deflex.l"
d799 1
a799 1
#line 40 "./deflex.l"
d804 1
a804 1
#line 41 "./deflex.l"
d809 1
a809 1
#line 42 "./deflex.l"
d814 1
a814 1
#line 43 "./deflex.l"
d819 2
a820 2
#line 44 "./deflex.l"
{ return VERSION;}
d824 1
a824 1
#line 45 "./deflex.l"
d829 1
a829 1
#line 46 "./deflex.l"
d834 1
a834 1
#line 47 "./deflex.l"
d839 6
a844 1
#line 48 "./deflex.l"
d847 1
a847 1
case 16:
d849 1
a849 1
#line 49 "./deflex.l"
d852 1
a852 1
case 17:
d854 1
a854 1
#line 50 "./deflex.l"
d857 1
a857 1
case 18:
d859 1
a859 1
#line 51 "./deflex.l"
d862 36
a897 1
case 19:
d899 1
a899 1
#line 53 "./deflex.l"
d903 1
a903 1
case 20:
d905 1
a905 1
#line 56 "./deflex.l"
d907 1
a907 1
		yylval.id =  strdup(yytext);
d911 1
a911 1
case 21:
d913 1
a913 1
#line 61 "./deflex.l"
d915 1
a915 1
		yylval.id = strdup (yytext+1);
d920 1
a920 1
case 22:
d922 1
a922 1
#line 67 "./deflex.l"
d924 1
a924 1
		yylval.id = strdup (yytext+1);
d929 1
a929 1
case 23:
d931 1
a931 1
#line 72 "./deflex.l"
d934 1
a934 1
case 24:
d936 1
a936 1
#line 73 "./deflex.l"
d939 1
a939 1
case 25:
d941 1
a941 1
#line 74 "./deflex.l"
d944 1
a944 1
case 26:
d946 1
a946 1
#line 75 "./deflex.l"
d949 1
a949 1
case 27:
d951 1
a951 1
#line 76 "./deflex.l"
d954 1
a954 1
case 28:
d956 1
a956 1
#line 77 "./deflex.l"
d959 1
a959 1
case 29:
d961 1
a961 1
#line 78 "./deflex.l"
d964 1
a964 1
case 30:
d966 1
a966 1
#line 79 "./deflex.l"
d969 1
a969 1
case 31:
d971 1
a971 1
#line 80 "./deflex.l"
d974 1
a974 1
case 32:
d976 1
a976 1
#line 81 "./deflex.l"
d979 1
a979 1
#line 883 "lex.yy.c"
d990 1
d1136 1
a1136 1
			/* We matched a singled characater, the EOB, so
d1163 1
a1163 1
		yy_n_chars = 0;
d1218 2
d1271 1
a1271 1
			if ( yy_current_state >= 135 )
d1306 1
a1306 1
		if ( yy_current_state >= 135 )
d1310 1
a1310 1
	yy_is_jam = (yy_current_state == 134);
d1344 2
a1345 1
		yy_n_chars = yy_current_buffer->yy_buf_size;
d1383 1
a1383 1
			yytext_ptr = yy_c_buf_p;
d1388 16
a1406 3
						{
						yy_c_buf_p =
						yytext_ptr + YY_MORE_ADJ;
a1407 1
						}
d1419 1
a1419 1
					yy_c_buf_p = yytext_ptr + YY_MORE_ADJ;
a1420 9

				case EOB_ACT_LAST_MATCH:
#ifdef __cplusplus
					YY_FATAL_ERROR(
					"unexpected last match in yyinput()" );
#else
					YY_FATAL_ERROR(
					"unexpected last match in input()" );
#endif
d1543 3
d1551 1
d1588 3
d1650 1
a1650 1
YY_BUFFER_STATE yy_scan_string( yyconst char *str )
d1652 2
a1653 2
YY_BUFFER_STATE yy_scan_string( str )
yyconst char *str;
d1657 1
a1657 1
	for ( len = 0; str[len]; ++len )
d1660 1
a1660 1
	return yy_scan_bytes( str, len );
d1781 1
a1781 1
		yy_c_buf_p = yytext + n - YY_MORE_ADJ; \
d1807 16
d1869 1
a1869 1
#line 81 "./deflex.l"
d1873 1
a1873 1
int yywrap() { return 1; }
@


1.1.1.1
log
@Import of binutils-2.8.1 from Cygnus/FSF
@
text
@@


1.1.1.2
log
@Import binutils-2.10
- only the binutils package (no gdb here)
- don't import libiberty and texinfo, they are elsewhere
- remove all .info* generated files
@
text
@d4 1
a4 1
 * $Header: /cvs/src/src/binutils/Attic/deflex.c,v 1.1.2.1 2000/05/29 14:08:52 pb Exp $
a128 1
		YY_RESTORE_YY_MORE_OFFSET \
d238 1
a238 1
YY_BUFFER_STATE yy_scan_string YY_PROTO(( yyconst char *yy_str ));
d284 3
a286 3
#define YY_NUM_RULES 39
#define YY_END_OF_BUFFER 40
static yyconst short int yy_accept[189] =
d288 15
a302 20
        0,    0,   40,   39,   33,   34,   32,   39,   27,   39,
       30,   38,   36,   26,   31,   35,   37,   27,   27,   27,
       27,   27,   27,   27,   27,   27,   27,   27,   27,   27,
       27,    0,   28,   27,    0,   29,   30,   26,   31,   27,
       27,   27,   27,   27,   27,   27,   27,   27,   27,   27,
       27,   27,   27,   27,   27,   27,   27,   27,   27,   27,
       27,   27,   27,   27,   27,   27,   27,   27,   27,   27,
       27,   27,   27,   27,   27,   27,   27,   27,   27,   27,
       27,   12,    6,   27,    7,   27,   27,   27,   27,   27,
       27,   27,   27,    1,   27,   27,   15,   27,   27,   27,

       27,   27,   27,   27,   27,   27,   27,   27,   27,   27,
       27,   27,   27,   27,   27,   27,   27,   27,   27,   27,
       27,   27,   27,   16,   27,   27,   27,   27,   27,   27,
       27,   27,   27,   27,   14,   27,   27,   18,   20,   27,
       27,   27,   27,   27,   27,   17,    9,   27,   10,   27,
       27,    2,   27,   27,   27,   27,   27,   27,   11,   13,
       27,    5,   27,   27,   21,   27,    8,   27,   27,   27,
       27,   27,   27,   19,    4,   27,   27,   27,   23,   27,
       25,   27,    3,   27,   27,   22,   24,    0
d313 3
a315 3
       14,    1,    6,   15,   16,   17,   18,   19,   20,   21,
       22,   23,   24,    6,   25,   26,   27,   28,   29,   30,
        6,   31,   32,   33,   34,   35,   36,   37,   38,   39,
d337 1
a337 1
static yyconst int yy_meta[40] =
d342 1
a342 1
        3,    3,    3,    3,    3,    3,    3,    3,    3
d345 1
a345 1
static yyconst short int yy_base[195] =
d347 15
a361 22
        0,    0,  209,  210,  210,  210,  210,  203,    0,  200,
        0,  210,  210,    0,    0,  210,  210,  190,  176,   24,
      167,  183,   14,  178,  167,   27,  180,   25,  179,  178,
      166,  191,  210,    0,  188,  210,    0,    0,    0,  162,
       27,  160,  160,   27,  175,  160,  165,  171,  161,  159,
      157,  168,  165,  166,  153,  164,  148,  147,  153,  156,
      155,  142,  157,  154,  153,  141,  139,  139,  134,  135,
      132,  144,   34,  144,  129,  130,  138,  141,  131,  125,
      123,    0,    0,  122,    0,  123,  119,  121,  119,  119,
       29,  133,  124,    0,  120,  123,    0,  121,  124,  117,

      117,   30,  117,  120,  123,  114,  104,  103,  111,  101,
      107,  104,  100,  100,  109,  112,   98,  107,  105,   92,
       97,   94,   92,    0,   92,   89,   98,   85,   77,   83,
       85,   81,   74,   85,    0,   79,   81,    0,    0,   84,
       78,   74,   77,   71,   70,    0,    0,   82,    0,   84,
       67,    0,   79,   78,   65,   57,   78,   61,    0,    0,
       69,    0,   76,   75,    0,   71,    0,   69,   72,   71,
       57,   59,   54,    0,    0,   52,   37,   36,    0,   45,
        0,   44,    0,   41,   40,    0,    0,  210,   66,   68,
       72,   76,   55,   80

d364 1
a364 1
static yyconst short int yy_def[195] =
d366 15
a380 22
      188,    1,  188,  188,  188,  188,  188,  189,  190,  191,
      192,  188,  188,  193,  194,  188,  188,  190,  190,  190,
      190,  190,  190,  190,  190,  190,  190,  190,  190,  190,
      190,  189,  188,  190,  191,  188,  192,  193,  194,  190,
      190,  190,  190,  190,  190,  190,  190,  190,  190,  190,
      190,  190,  190,  190,  190,  190,  190,  190,  190,  190,
      190,  190,  190,  190,  190,  190,  190,  190,  190,  190,
      190,  190,  190,  190,  190,  190,  190,  190,  190,  190,
      190,  190,  190,  190,  190,  190,  190,  190,  190,  190,
      190,  190,  190,  190,  190,  190,  190,  190,  190,  190,

      190,  190,  190,  190,  190,  190,  190,  190,  190,  190,
      190,  190,  190,  190,  190,  190,  190,  190,  190,  190,
      190,  190,  190,  190,  190,  190,  190,  190,  190,  190,
      190,  190,  190,  190,  190,  190,  190,  190,  190,  190,
      190,  190,  190,  190,  190,  190,  190,  190,  190,  190,
      190,  190,  190,  190,  190,  190,  190,  190,  190,  190,
      190,  190,  190,  190,  190,  190,  190,  190,  190,  190,
      190,  190,  190,  190,  190,  190,  190,  190,  190,  190,
      190,  190,  190,  190,  190,  190,  190,    0,  188,  188,
      188,  188,  188,  188

d383 1
a383 1
static yyconst short int yy_nxt[250] =
d387 7
a393 14
        9,    9,   22,   23,    9,   24,   25,   26,    9,    9,
       27,   28,   29,    9,   30,   31,    9,    9,    9,   42,
       46,   47,   50,   43,   53,   61,   65,   54,   55,   95,
      111,  121,  112,  122,   62,   51,   66,   56,   38,  187,
      186,  185,  184,  183,  182,   96,   32,   32,   32,   32,
       34,   34,   35,   35,   35,   35,   37,  181,   37,   37,
       39,  180,   39,   39,  179,  178,  177,  176,  175,  174,
      173,  172,  171,  170,  169,  168,  167,  166,  165,  164,

      163,  162,  161,  160,  159,  158,  157,  156,  155,  154,
      153,  152,  151,  150,  149,  148,  147,  146,  145,  144,
      143,  142,  141,  140,  139,  138,  137,  136,  135,  134,
      133,  132,  131,  130,  129,  128,  127,  126,  125,  124,
      123,  120,  119,  118,  117,  116,  115,  114,  113,  110,
d395 12
a406 10
       99,   98,   97,   94,   93,   92,   91,   90,   89,   88,
       87,   86,   85,   84,   83,   82,   81,   80,   79,   78,
       77,   76,   75,   74,   73,   72,   71,   70,   69,   68,
       67,   64,   63,   60,   36,   33,   59,   58,   57,   52,

       49,   48,   45,   44,   41,   40,   36,   33,  188,    3,
      188,  188,  188,  188,  188,  188,  188,  188,  188,  188,
      188,  188,  188,  188,  188,  188,  188,  188,  188,  188,
      188,  188,  188,  188,  188,  188,  188,  188,  188,  188,
      188,  188,  188,  188,  188,  188,  188,  188,  188
d409 1
a409 1
static yyconst short int yy_chk[250] =
d414 19
a432 24
        1,    1,    1,    1,    1,    1,    1,    1,    1,   20,
       23,   23,   26,   20,   28,   41,   44,   28,   28,   73,
       91,  102,   91,  102,   41,   26,   44,   28,  193,  185,
      184,  182,  180,  178,  177,   73,  189,  189,  189,  189,
      190,  190,  191,  191,  191,  191,  192,  176,  192,  192,
      194,  173,  194,  194,  172,  171,  170,  169,  168,  166,
      164,  163,  161,  158,  157,  156,  155,  154,  153,  151,

      150,  148,  145,  144,  143,  142,  141,  140,  137,  136,
      134,  133,  132,  131,  130,  129,  128,  127,  126,  125,
      123,  122,  121,  120,  119,  118,  117,  116,  115,  114,
      113,  112,  111,  110,  109,  108,  107,  106,  105,  104,
      103,  101,  100,   99,   98,   96,   95,   93,   92,   90,
       89,   88,   87,   86,   84,   81,   80,   79,   78,   77,
       76,   75,   74,   72,   71,   70,   69,   68,   67,   66,
       65,   64,   63,   62,   61,   60,   59,   58,   57,   56,
       55,   54,   53,   52,   51,   50,   49,   48,   47,   46,
       45,   43,   42,   40,   35,   32,   31,   30,   29,   27,

       25,   24,   22,   21,   19,   18,   10,    8,    3,  188,
      188,  188,  188,  188,  188,  188,  188,  188,  188,  188,
      188,  188,  188,  188,  188,  188,  188,  188,  188,  188,
      188,  188,  188,  188,  188,  188,  188,  188,  188,  188,
      188,  188,  188,  188,  188,  188,  188,  188,  188
a443 1
#define YY_RESTORE_YY_MORE_OFFSET
d445 1
a445 1
#line 1 "deflex.l"
d447 2
a448 1
#line 2 "deflex.l"
d450 1
a450 1
/*   Copyright (C) 1995, 1997, 1998, 1999 Free Software Foundation, Inc.
a473 1
#include "libiberty.h"
d475 1
a475 2
#include "dlltool.h"

d478 1
a478 1
#line 511 "lex.yy.c"
a499 4
#ifdef YY_NEED_STRLEN
static int yy_flex_strlen YY_PROTO(( yyconst char * ));
#endif

d625 1
a625 1
#line 34 "deflex.l"
d627 1
a627 1
#line 664 "lex.yy.c"
d678 1
a678 1
				if ( yy_current_state >= 189 )
d684 1
a684 1
		while ( yy_base[yy_current_state] != 210 );
d712 1
a712 1
#line 35 "deflex.l"
d717 1
a717 1
#line 36 "deflex.l"
d722 1
a722 1
#line 37 "deflex.l"
d727 1
a727 1
#line 38 "deflex.l"
d732 1
a732 1
#line 39 "deflex.l"
d737 1
a737 1
#line 40 "deflex.l"
d742 1
a742 1
#line 41 "deflex.l"
d747 1
a747 1
#line 42 "deflex.l"
d752 1
a752 1
#line 43 "deflex.l"
d757 1
a757 1
#line 44 "deflex.l"
d762 2
a763 2
#line 45 "deflex.l"
{ return VERSIONK;}
d767 1
a767 1
#line 46 "deflex.l"
d772 1
a772 1
#line 47 "deflex.l"
d777 1
a777 1
#line 48 "deflex.l"
d782 1
a782 1
#line 49 "deflex.l"
d787 1
a787 1
#line 50 "deflex.l"
d792 1
a792 1
#line 51 "deflex.l"
d797 1
a797 1
#line 52 "deflex.l"
d802 1
a802 36
#line 53 "deflex.l"
{ return NONSHARED;}
	YY_BREAK
case 20:
YY_RULE_SETUP
#line 54 "deflex.l"
{ return SINGLE;}
	YY_BREAK
case 21:
YY_RULE_SETUP
#line 55 "deflex.l"
{ return MULTIPLE;}
	YY_BREAK
case 22:
YY_RULE_SETUP
#line 56 "deflex.l"
{ return INITINSTANCE;}
	YY_BREAK
case 23:
YY_RULE_SETUP
#line 57 "deflex.l"
{ return INITGLOBAL;}
	YY_BREAK
case 24:
YY_RULE_SETUP
#line 58 "deflex.l"
{ return TERMINSTANCE;}
	YY_BREAK
case 25:
YY_RULE_SETUP
#line 59 "deflex.l"
{ return TERMGLOBAL;}
	YY_BREAK
case 26:
YY_RULE_SETUP
#line 61 "deflex.l"
d806 1
a806 1
case 27:
d808 1
a808 1
#line 64 "deflex.l"
d810 1
a810 1
		yylval.id =  xstrdup (yytext);
d814 1
a814 1
case 28:
d816 1
a816 1
#line 69 "deflex.l"
d818 1
a818 1
		yylval.id = xstrdup (yytext+1);
d823 1
a823 1
case 29:
d825 1
a825 1
#line 75 "deflex.l"
d827 1
a827 1
		yylval.id = xstrdup (yytext+1);
d832 1
a832 1
case 30:
d834 1
a834 1
#line 80 "deflex.l"
d837 1
a837 1
case 31:
d839 1
a839 1
#line 81 "deflex.l"
d842 1
a842 1
case 32:
d844 1
a844 1
#line 82 "deflex.l"
d847 1
a847 1
case 33:
d849 1
a849 1
#line 83 "deflex.l"
d852 1
a852 1
case 34:
d854 1
a854 1
#line 84 "deflex.l"
d857 1
a857 1
case 35:
d859 1
a859 1
#line 85 "deflex.l"
d862 1
a862 1
case 36:
d864 1
a864 1
#line 86 "deflex.l"
d867 1
a867 1
case 37:
d869 1
a869 1
#line 87 "deflex.l"
d872 1
a872 1
case 38:
d874 1
a874 1
#line 88 "deflex.l"
d877 1
a877 1
case 39:
d879 1
a879 1
#line 89 "deflex.l"
d882 1
a882 1
#line 954 "lex.yy.c"
a892 1
		YY_RESTORE_YY_MORE_OFFSET
d1038 1
a1038 1
			/* We matched a single character, the EOB, so
d1065 1
a1065 1
		yy_current_buffer->yy_n_chars = yy_n_chars = 0;
a1119 2

		yy_current_buffer->yy_n_chars = yy_n_chars;
d1171 1
a1171 1
			if ( yy_current_state >= 189 )
d1206 1
a1206 1
		if ( yy_current_state >= 189 )
d1210 1
a1210 1
	yy_is_jam = (yy_current_state == 188);
d1244 1
a1244 2
		yy_current_buffer->yy_n_chars =
			yy_n_chars = yy_current_buffer->yy_buf_size;
d1282 1
a1282 1
			int offset = yy_c_buf_p - yytext_ptr;
a1286 16
				case EOB_ACT_LAST_MATCH:
					/* This happens because yy_g_n_b()
					 * sees that we've accumulated a
					 * token and flags that we need to
					 * try matching the token before
					 * proceeding.  But for input(),
					 * there's no matching to consider.
					 * So convert the EOB_ACT_LAST_MATCH
					 * to EOB_ACT_END_OF_FILE.
					 */

					/* Reset buffer status. */
					yyrestart( yyin );

					/* fall through */

d1290 3
d1294 1
d1306 1
a1306 1
					yy_c_buf_p = yytext_ptr + offset;
d1308 9
a1479 3
	if ( ! b )
		return;

d1539 1
a1539 1
YY_BUFFER_STATE yy_scan_string( yyconst char *yy_str )
d1541 2
a1542 2
YY_BUFFER_STATE yy_scan_string( yy_str )
yyconst char *yy_str;
d1546 1
a1546 1
	for ( len = 0; yy_str[len]; ++len )
d1549 1
a1549 1
	return yy_scan_bytes( yy_str, len );
d1670 1
a1670 1
		yy_c_buf_p = yytext + n; \
a1695 16
#ifdef YY_NEED_STRLEN
#ifdef YY_USE_PROTOS
static int yy_flex_strlen( yyconst char *s )
#else
static int yy_flex_strlen( s )
yyconst char *s;
#endif
	{
	register int n;
	for ( n = 0; s[n]; ++n )
		;

	return n;
	}
#endif

d1742 1
a1742 1
#line 89 "deflex.l"
@


1.1.1.3
log
@Import binutils-2.11.2
- only the binutils package (no gdb here)
- don't import libiberty and texinfo, they are elsewhere
- remove all .info* generated files
@
text
@d4 1
a4 1
 * $Header: /cvs/src/src/binutils/Attic/deflex.c,v 1.1.4.2 2001/06/10 15:37:28 pb Exp $
d480 1
a480 1
/*   Copyright 1995, 1997, 1998, 1999 Free Software Foundation, Inc.
@


1.1.1.4
log
@import binutils 2.14 (excluding testsuites, .info files, and .po files)
@
text
@d1 1
d3 3
a5 5
#line 3 "lex.yy.c"

#define  YY_INT_ALIGNED short int

/* A lexical scanner generated by flex */
a9 4
#define YY_FLEX_SUBMINOR_VERSION 31
#if YY_FLEX_SUBMINOR_VERSION > 0
#define FLEX_BETA
#endif
a10 3
/* First, we deal with  platform-specific or compiler-specific issues. */

/* begin standard C headers. */
a11 3
#include <string.h>
#include <errno.h>
#include <stdlib.h>
a12 1
/* end standard C headers. */
d14 4
a17 36
/* flex integer type definitions */

#ifndef FLEXINT_H
#define FLEXINT_H

/* C99 systems have <inttypes.h>. Non-C99 systems may or may not. */

#if defined __STDC_VERSION__ && __STDC_VERSION__ >= 199901L
#include <inttypes.h>
typedef int8_t flex_int8_t;
typedef uint8_t flex_uint8_t;
typedef int16_t flex_int16_t;
typedef uint16_t flex_uint16_t;
typedef int32_t flex_int32_t;
typedef uint32_t flex_uint32_t;
#else
typedef signed char flex_int8_t;
typedef short int flex_int16_t;
typedef int flex_int32_t;
typedef unsigned char flex_uint8_t; 
typedef unsigned short int flex_uint16_t;
typedef unsigned int flex_uint32_t;
#endif /* ! C99 */

/* Limits of integral types. */
#ifndef INT8_MIN
#define INT8_MIN               (-128)
#endif
#ifndef INT16_MIN
#define INT16_MIN              (-32767-1)
#endif
#ifndef INT32_MIN
#define INT32_MIN              (-2147483647-1)
#endif
#ifndef INT8_MAX
#define INT8_MAX               (127)
a18 14
#ifndef INT16_MAX
#define INT16_MAX              (32767)
#endif
#ifndef INT32_MAX
#define INT32_MAX              (2147483647)
#endif
#ifndef UINT8_MAX
#define UINT8_MAX              (255U)
#endif
#ifndef UINT16_MAX
#define UINT16_MAX             (65535U)
#endif
#ifndef UINT32_MAX
#define UINT32_MAX             (4294967295U)
a20 1
#endif /* ! FLEXINT_H */
d24 6
d37 1
d43 9
d58 7
d79 1
a79 1
#define BEGIN (yy_start) = 1 + 2 *
d85 1
a85 1
#define YY_START (((yy_start) - 1) / 2)
d92 1
a92 1
#define YY_NEW_FILE yyrestart(yyin  )
a96 1
#ifndef YY_BUF_SIZE
a97 1
#endif
a98 2
#ifndef YY_TYPEDEF_YY_BUFFER_STATE
#define YY_TYPEDEF_YY_BUFFER_STATE
a99 1
#endif
a101 1

d108 16
a123 3
    #define YY_LESS_LINENO(n)
    
/* Return all but the first "n" matched characters back to the input stream. */
d128 1
a128 3
        int yyless_macro_arg = (n); \
        YY_LESS_LINENO(yyless_macro_arg);\
		*yy_cp = (yy_hold_char); \
d130 1
a130 1
		(yy_c_buf_p) = yy_cp = yy_bp + yyless_macro_arg - YY_MORE_ADJ; \
d135 1
a135 1
#define unput(c) yyunput( c, (yytext_ptr)  )
d141 1
a142 4
#ifndef YY_TYPEDEF_YY_SIZE_T
#define YY_TYPEDEF_YY_SIZE_T
typedef unsigned int yy_size_t;
#endif
a143 2
#ifndef YY_STRUCT_YY_BUFFER_STATE
#define YY_STRUCT_YY_BUFFER_STATE
a179 3
    int yy_bs_lineno; /**< The line count. */
    int yy_bs_column; /**< The column count. */
    
a185 1

a198 1

a199 1
#endif /* !YY_STRUCT_YY_BUFFER_STATE */
d201 1
a201 4
/* Stack of input buffers. */
static size_t yy_buffer_stack_top = 0; /**< index of top of stack. */
static size_t yy_buffer_stack_max = 0; /**< capacity of stack. */
static YY_BUFFER_STATE * yy_buffer_stack = 0; /**< Stack as an array. */
a205 2
 *
 * Returns the top of the stack, or NULL.
d207 1
a207 3
#define YY_CURRENT_BUFFER ( (yy_buffer_stack) \
                          ? (yy_buffer_stack)[(yy_buffer_stack_top)] \
                          : NULL)
a208 4
/* Same as previous macro, but useful when we know that the buffer stack is not
 * NULL or when we need an lvalue. For internal use only.
 */
#define YY_CURRENT_BUFFER_LVALUE (yy_buffer_stack)[(yy_buffer_stack_top)]
d212 1
d214 2
d228 17
a244 21
void yyrestart (FILE *input_file  );
void yy_switch_to_buffer (YY_BUFFER_STATE new_buffer  );
YY_BUFFER_STATE yy_create_buffer (FILE *file,int size  );
void yy_delete_buffer (YY_BUFFER_STATE b  );
void yy_flush_buffer (YY_BUFFER_STATE b  );
void yypush_buffer_state (YY_BUFFER_STATE new_buffer  );
void yypop_buffer_state (void );

static void yyensure_buffer_stack (void );
static void yy_load_buffer_state (void );
static void yy_init_buffer (YY_BUFFER_STATE b,FILE *file  );

#define YY_FLUSH_BUFFER yy_flush_buffer(YY_CURRENT_BUFFER )

YY_BUFFER_STATE yy_scan_buffer (char *base,yy_size_t size  );
YY_BUFFER_STATE yy_scan_string (yyconst char *yy_str  );
YY_BUFFER_STATE yy_scan_bytes (yyconst char *bytes,int len  );

void *yyalloc (yy_size_t  );
void *yyrealloc (void *,yy_size_t  );
void yyfree (void *  );
d250 3
a252 6
	if ( ! YY_CURRENT_BUFFER ){ \
        yyensure_buffer_stack (); \
		YY_CURRENT_BUFFER_LVALUE =    \
            yy_create_buffer(yyin,YY_BUF_SIZE ); \
	} \
	YY_CURRENT_BUFFER_LVALUE->yy_is_interactive = is_interactive; \
d257 3
a259 6
	if ( ! YY_CURRENT_BUFFER ){\
        yyensure_buffer_stack (); \
		YY_CURRENT_BUFFER_LVALUE =    \
            yy_create_buffer(yyin,YY_BUF_SIZE ); \
	} \
	YY_CURRENT_BUFFER_LVALUE->yy_at_bol = at_bol; \
d262 1
a262 3
#define YY_AT_BOL() (YY_CURRENT_BUFFER_LVALUE->yy_at_bol)

/* Begin user sect3 */
a264 1

a265 1

a266 5

extern int yylineno;

int yylineno = 1;

d270 4
a273 4
static yy_state_type yy_get_previous_state (void );
static yy_state_type yy_try_NUL_trans (yy_state_type current_state  );
static int yy_get_next_buffer (void );
static void yy_fatal_error (yyconst char msg[]  );
d279 3
a281 3
	(yytext_ptr) = yy_bp; \
	yyleng = (size_t) (yy_cp - yy_bp); \
	(yy_hold_char) = *yy_cp; \
d283 1
a283 1
	(yy_c_buf_p) = yy_cp;
d287 1
a287 8
/* This struct is not used in this scanner,
   but its presence is necessary. */
struct yy_trans_info
	{
	flex_int32_t yy_verify;
	flex_int32_t yy_nxt;
	};
static yyconst flex_int16_t yy_accept[190] =
d297 2
a298 2
       27,   27,   12,    6,   27,    7,   27,   27,   27,   27,
       27,   27,   27,   27,    1,   27,   27,   15,   27,   27,
d302 7
a308 7
       27,   27,   27,   27,   16,   27,   27,   27,   27,   27,
       27,   27,   27,   27,   27,   14,   27,   27,   18,   20,
       27,   27,   27,   27,   27,   27,   17,    9,   27,   10,
       27,   27,    2,   27,   27,   27,   27,   27,   27,   11,
       13,   27,    5,   27,   27,   21,   27,    8,   27,   27,
       27,   27,   27,   27,   19,    4,   27,   27,   27,   23,
       27,   25,   27,    3,   27,   27,   22,   24,    0
d311 1
a311 1
static yyconst flex_int32_t yy_ec[256] =
d343 1
a343 1
static yyconst flex_int32_t yy_meta[40] =
d346 2
a347 2
        4,    5,    1,    1,    4,    6,    6,    6,    6,    6,
        6,    3,    3,    3,    3,    3,    3,    3,    3,    3,
d351 1
a351 1
static yyconst flex_int16_t yy_base[197] =
d353 21
a373 21
        0,    0,  222,  223,  223,  223,  223,  216,    0,  213,
        0,  223,  223,    0,    0,  223,    0,  203,  189,   24,
      180,  196,   14,  191,  180,   27,  193,   25,  192,  191,
      179,  204,  223,    0,  201,  223,    0,    0,    0,    0,
      175,   27,  173,  173,   27,  188,  173,  178,  184,  174,
      172,  170,  181,  178,  179,  166,  177,  161,  160,  166,
      169,  168,  155,  170,  167,  166,  154,  152,  152,  147,
      148,  145,  157,   34,  157,  142,  143,  151,  154,  144,
      138,  136,    0,    0,  135,    0,  136,  132,  134,  132,
      132,   29,  146,  137,    0,  133,  136,    0,  134,  137,

      130,  130,   30,  130,  133,  136,  127,  117,  116,  124,
      114,  120,  117,  113,  113,  122,  125,  111,  120,  118,
      105,  110,  107,  105,    0,  105,  102,  111,   98,   90,
       96,   98,   94,   87,   98,    0,   92,   94,    0,    0,
       97,   91,   87,   90,   84,   83,    0,    0,   95,    0,
       97,   80,    0,   92,   91,   78,   70,   91,   74,    0,
        0,   82,    0,   89,   88,    0,   84,    0,   82,   85,
       83,   69,   66,   56,    0,    0,   39,   36,   35,    0,
       44,    0,   43,    0,   40,   39,    0,    0,  223,   66,
       70,   76,   82,   84,   90,   94
d377 1
a377 1
static yyconst flex_int16_t yy_def[197] =
d379 21
a399 21
      189,    1,  189,  189,  189,  189,  189,  190,  191,  192,
      193,  189,  189,  194,  195,  189,  196,  191,  191,  191,
      191,  191,  191,  191,  191,  191,  191,  191,  191,  191,
      191,  190,  189,  191,  192,  189,  193,  194,  195,  191,
      191,  191,  191,  191,  191,  191,  191,  191,  191,  191,
      191,  191,  191,  191,  191,  191,  191,  191,  191,  191,
      191,  191,  191,  191,  191,  191,  191,  191,  191,  191,
      191,  191,  191,  191,  191,  191,  191,  191,  191,  191,
      191,  191,  191,  191,  191,  191,  191,  191,  191,  191,
      191,  191,  191,  191,  191,  191,  191,  191,  191,  191,

      191,  191,  191,  191,  191,  191,  191,  191,  191,  191,
      191,  191,  191,  191,  191,  191,  191,  191,  191,  191,
      191,  191,  191,  191,  191,  191,  191,  191,  191,  191,
      191,  191,  191,  191,  191,  191,  191,  191,  191,  191,
      191,  191,  191,  191,  191,  191,  191,  191,  191,  191,
      191,  191,  191,  191,  191,  191,  191,  191,  191,  191,
      191,  191,  191,  191,  191,  191,  191,  191,  191,  191,
      191,  191,  191,  191,  191,  191,  191,  191,  191,  191,
      191,  191,  191,  191,  191,  191,  191,  191,    0,  189,
      189,  189,  189,  189,  189,  189
d403 1
a403 1
static yyconst flex_int16_t yy_nxt[263] =
d408 24
a431 26
       27,   28,   29,    9,   30,   31,    9,    9,    9,   43,
       47,   48,   51,   44,   54,   62,   66,   55,   56,   96,
      112,  122,  113,  123,   63,   52,   67,   57,  188,  187,
      186,  185,  184,  183,  182,   97,   32,   32,   32,   32,
       32,   32,   34,   34,   34,   34,   35,   35,   35,   35,
       35,   35,   37,  181,   37,   37,   37,   37,   38,   38,
       39,  180,   39,   39,   39,   39,   40,  179,  178,   40,

      177,  176,  175,  174,  173,  172,  171,  170,  169,  168,
      167,  166,  165,  164,  163,  162,  161,  160,  159,  158,
      157,  156,  155,  154,  153,  152,  151,  150,  149,  148,
      147,  146,  145,  144,  143,  142,  141,  140,  139,  138,
      137,  136,  135,  134,  133,  132,  131,  130,  129,  128,
      127,  126,  125,  124,  121,  120,  119,  118,  117,  116,
      115,  114,  111,  110,  109,  108,  107,  106,  105,  104,
      103,  102,  101,  100,   99,   98,   95,   94,   93,   92,
       91,   90,   89,   88,   87,   86,   85,   84,   83,   82,
       81,   80,   79,   78,   77,   76,   75,   74,   73,   72,

       71,   70,   69,   68,   65,   64,   61,   36,   33,   60,
       59,   58,   53,   50,   49,   46,   45,   42,   41,   36,
       33,  189,    3,  189,  189,  189,  189,  189,  189,  189,
      189,  189,  189,  189,  189,  189,  189,  189,  189,  189,
      189,  189,  189,  189,  189,  189,  189,  189,  189,  189,
      189,  189,  189,  189,  189,  189,  189,  189,  189,  189,
      189,  189
d434 1
a434 1
static yyconst flex_int16_t yy_chk[263] =
d440 23
a462 25
       23,   23,   26,   20,   28,   42,   45,   28,   28,   74,
       92,  103,   92,  103,   42,   26,   45,   28,  186,  185,
      183,  181,  179,  178,  177,   74,  190,  190,  190,  190,
      190,  190,  191,  191,  191,  191,  192,  192,  192,  192,
      192,  192,  193,  174,  193,  193,  193,  193,  194,  194,
      195,  173,  195,  195,  195,  195,  196,  172,  171,  196,

      170,  169,  167,  165,  164,  162,  159,  158,  157,  156,
      155,  154,  152,  151,  149,  146,  145,  144,  143,  142,
      141,  138,  137,  135,  134,  133,  132,  131,  130,  129,
      128,  127,  126,  124,  123,  122,  121,  120,  119,  118,
      117,  116,  115,  114,  113,  112,  111,  110,  109,  108,
      107,  106,  105,  104,  102,  101,  100,   99,   97,   96,
       94,   93,   91,   90,   89,   88,   87,   85,   82,   81,
       80,   79,   78,   77,   76,   75,   73,   72,   71,   70,
       69,   68,   67,   66,   65,   64,   63,   62,   61,   60,
       59,   58,   57,   56,   55,   54,   53,   52,   51,   50,

       49,   48,   47,   46,   44,   43,   41,   35,   32,   31,
       30,   29,   27,   25,   24,   22,   21,   19,   18,   10,
        8,    3,  189,  189,  189,  189,  189,  189,  189,  189,
      189,  189,  189,  189,  189,  189,  189,  189,  189,  189,
      189,  189,  189,  189,  189,  189,  189,  189,  189,  189,
      189,  189,  189,  189,  189,  189,  189,  189,  189,  189,
      189,  189
a467 3
extern int yy_flex_debug;
int yy_flex_debug = 0;

d477 1
d480 1
a480 1
/*   Copyright 1995, 1997, 1998, 1999, 2002 Free Software Foundation, Inc.
d510 1
a510 13
#line 593 "lex.yy.c"

#define INITIAL 0

/* Special case for "unistd.h", since it is non-ANSI. We include it way
 * down here because we want the user's section 1 to have been scanned first.
 * The user has a chance to override it with an option.
 */
#include <unistd.h>

#ifndef YY_EXTRA_TYPE
#define YY_EXTRA_TYPE void *
#endif
d518 1
a518 1
extern "C" int yywrap (void );
d520 2
a521 1
extern int yywrap (void );
d523 3
a527 2
    static void yyunput (int c,char *buf_ptr  );
    
d529 1
a529 1
static void yy_flex_strncpy (char *,yyconst char *,int );
d533 1
a533 1
static int yy_flex_strlen (yyconst char * );
a536 1

d538 1
a538 1
static int yyinput (void );
d540 2
a541 1
static int input (void );
d544 33
d585 1
d598 1
a598 1
	if ( YY_CURRENT_BUFFER_LVALUE->yy_is_interactive ) \
d600 1
a600 2
		int c = '*'; \
		size_t n; \
d610 3
a612 16
	else \
		{ \
		errno=0; \
		while ( (result = fread(buf, 1, max_size, yyin))==0 && ferror(yyin)) \
			{ \
			if( errno != EINTR) \
				{ \
				YY_FATAL_ERROR( "input in flex scanner failed" ); \
				break; \
				} \
			errno=0; \
			clearerr(yyin); \
			} \
		}\
\

a632 2
/* end tables serialization structures and prototypes */

d637 2
a638 6
#define YY_DECL_IS_OURS 1

extern int yylex (void);

#define YY_DECL int yylex (void)
#endif /* !YY_DECL */
a654 2
/** The main scanner function which does all the work.
 */
d656 1
a656 1
{
d660 1
a660 1
    
d663 1
a663 1
#line 744 "lex.yy.c"
d665 1
a665 1
	if ( (yy_init) )
d667 1
a667 1
		(yy_init) = 0;
d673 2
a674 2
		if ( ! (yy_start) )
			(yy_start) = 1;	/* first start state */
d682 3
a684 5
		if ( ! YY_CURRENT_BUFFER ) {
			yyensure_buffer_stack ();
			YY_CURRENT_BUFFER_LVALUE =
				yy_create_buffer(yyin,YY_BUF_SIZE );
		}
d686 1
a686 1
		yy_load_buffer_state( );
d691 1
a691 1
		yy_cp = (yy_c_buf_p);
d694 1
a694 1
		*yy_cp = (yy_hold_char);
d701 1
a701 1
		yy_current_state = (yy_start);
d708 2
a709 2
				(yy_last_accepting_state) = yy_current_state;
				(yy_last_accepting_cpos) = yy_cp;
d714 1
a714 1
				if ( yy_current_state >= 190 )
d720 1
a720 1
		while ( yy_base[yy_current_state] != 223 );
d726 2
a727 2
			yy_cp = (yy_last_accepting_cpos);
			yy_current_state = (yy_last_accepting_state);
d733 1
d736 1
d741 3
a743 3
			*yy_cp = (yy_hold_char);
			yy_cp = (yy_last_accepting_cpos);
			yy_current_state = (yy_last_accepting_state);
a885 1
/* rule 28 can match eol */
a894 1
/* rule 29 can match eol */
a923 1
/* rule 34 can match eol */
d953 1
a953 1
#line 1037 "lex.yy.c"
d960 1
a960 1
		int yy_amount_of_matched_text = (int) (yy_cp - (yytext_ptr)) - 1;
d963 1
a963 1
		*yy_cp = (yy_hold_char);
d966 1
a966 1
		if ( YY_CURRENT_BUFFER_LVALUE->yy_buffer_status == YY_BUFFER_NEW )
d972 1
a972 1
			 * consistency between YY_CURRENT_BUFFER and our
d977 3
a979 3
			(yy_n_chars) = YY_CURRENT_BUFFER_LVALUE->yy_n_chars;
			YY_CURRENT_BUFFER_LVALUE->yy_input_file = yyin;
			YY_CURRENT_BUFFER_LVALUE->yy_buffer_status = YY_BUFFER_NORMAL;
d989 1
a989 1
		if ( (yy_c_buf_p) <= &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)] )
d993 1
a993 1
			(yy_c_buf_p) = (yytext_ptr) + yy_amount_of_matched_text;
d995 1
a995 1
			yy_current_state = yy_get_previous_state(  );
d1008 1
a1008 1
			yy_bp = (yytext_ptr) + YY_MORE_ADJ;
d1013 1
a1013 1
				yy_cp = ++(yy_c_buf_p);
d1020 1
a1020 1
				yy_cp = (yy_c_buf_p);
d1025 1
a1025 1
		else switch ( yy_get_next_buffer(  ) )
d1029 1
a1029 1
				(yy_did_buffer_switch_on_eof) = 0;
d1031 1
a1031 1
				if ( yywrap( ) )
d1042 1
a1042 1
					(yy_c_buf_p) = (yytext_ptr) + YY_MORE_ADJ;
d1050 1
a1050 1
					if ( ! (yy_did_buffer_switch_on_eof) )
d1057 2
a1058 2
				(yy_c_buf_p) =
					(yytext_ptr) + yy_amount_of_matched_text;
d1060 1
a1060 1
				yy_current_state = yy_get_previous_state(  );
d1062 2
a1063 2
				yy_cp = (yy_c_buf_p);
				yy_bp = (yytext_ptr) + YY_MORE_ADJ;
d1067 2
a1068 2
				(yy_c_buf_p) =
				&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)];
d1070 1
a1070 1
				yy_current_state = yy_get_previous_state(  );
d1072 2
a1073 2
				yy_cp = (yy_c_buf_p);
				yy_bp = (yytext_ptr) + YY_MORE_ADJ;
d1084 2
a1085 1
} /* end of yylex */
d1094 5
a1098 4
static int yy_get_next_buffer (void)
{
    	register char *dest = YY_CURRENT_BUFFER_LVALUE->yy_ch_buf;
	register char *source = (yytext_ptr);
d1102 1
a1102 1
	if ( (yy_c_buf_p) > &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars) + 1] )
d1106 1
a1106 1
	if ( YY_CURRENT_BUFFER_LVALUE->yy_fill_buffer == 0 )
d1108 1
a1108 1
		if ( (yy_c_buf_p) - (yytext_ptr) - YY_MORE_ADJ == 1 )
d1128 1
a1128 1
	number_to_move = (int) ((yy_c_buf_p) - (yytext_ptr)) - 1;
d1133 1
a1133 1
	if ( YY_CURRENT_BUFFER_LVALUE->yy_buffer_status == YY_BUFFER_EOF_PENDING )
d1137 1
a1137 1
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars) = 0;
d1141 2
a1142 2
			size_t num_to_read =
			YY_CURRENT_BUFFER_LVALUE->yy_buf_size - number_to_move - 1;
d1146 4
d1152 1
a1152 1
			YY_BUFFER_STATE b = YY_CURRENT_BUFFER;
d1155 1
a1155 1
				(int) ((yy_c_buf_p) - b->yy_ch_buf);
d1168 2
a1169 1
					yyrealloc((void *) b->yy_ch_buf,b->yy_buf_size + 2  );
d1179 1
a1179 1
			(yy_c_buf_p) = &b->yy_ch_buf[yy_c_buf_p_offset];
d1181 1
a1181 1
			num_to_read = YY_CURRENT_BUFFER_LVALUE->yy_buf_size -
d1183 1
a1183 1

d1190 2
a1191 2
		YY_INPUT( (&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[number_to_move]),
			(yy_n_chars), num_to_read );
d1193 1
a1193 1
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars);
d1196 1
a1196 1
	if ( (yy_n_chars) == 0 )
d1201 1
a1201 1
			yyrestart(yyin  );
d1207 1
a1207 1
			YY_CURRENT_BUFFER_LVALUE->yy_buffer_status =
d1215 3
a1217 3
	(yy_n_chars) += number_to_move;
	YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)] = YY_END_OF_BUFFER_CHAR;
	YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars) + 1] = YY_END_OF_BUFFER_CHAR;
d1219 1
a1219 1
	(yytext_ptr) = &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[0];
d1222 2
a1223 1
}
d1227 2
a1228 2
    static yy_state_type yy_get_previous_state (void)
{
a1230 2
    
	yy_current_state = (yy_start);
d1232 3
a1234 1
	for ( yy_cp = (yytext_ptr) + YY_MORE_ADJ; yy_cp < (yy_c_buf_p); ++yy_cp )
d1239 2
a1240 2
			(yy_last_accepting_state) = yy_current_state;
			(yy_last_accepting_cpos) = yy_cp;
d1245 1
a1245 1
			if ( yy_current_state >= 190 )
d1252 2
a1253 1
}
d1260 8
a1267 2
    static yy_state_type yy_try_NUL_trans  (yy_state_type yy_current_state )
{
d1269 1
a1269 1
    	register char *yy_cp = (yy_c_buf_p);
d1274 2
a1275 2
		(yy_last_accepting_state) = yy_current_state;
		(yy_last_accepting_cpos) = yy_cp;
d1280 1
a1280 1
		if ( yy_current_state >= 190 )
d1284 1
a1284 1
	yy_is_jam = (yy_current_state == 189);
d1287 1
a1287 1
}
d1289 11
a1299 5
    static void yyunput (int c, register char * yy_bp )
{
	register char *yy_cp;
    
    yy_cp = (yy_c_buf_p);
d1302 1
a1302 1
	*yy_cp = (yy_hold_char);
d1304 1
a1304 1
	if ( yy_cp < YY_CURRENT_BUFFER_LVALUE->yy_ch_buf + 2 )
d1307 3
a1309 3
		register int number_to_move = (yy_n_chars) + 2;
		register char *dest = &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[
					YY_CURRENT_BUFFER_LVALUE->yy_buf_size + 2];
d1311 1
a1311 1
				&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[number_to_move];
d1313 1
a1313 1
		while ( source > YY_CURRENT_BUFFER_LVALUE->yy_ch_buf )
d1318 2
a1319 2
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars =
			(yy_n_chars) = YY_CURRENT_BUFFER_LVALUE->yy_buf_size;
d1321 1
a1321 1
		if ( yy_cp < YY_CURRENT_BUFFER_LVALUE->yy_ch_buf + 2 )
a1326 4
	(yytext_ptr) = yy_bp;
	(yy_hold_char) = *yy_cp;
	(yy_c_buf_p) = yy_cp;
}
d1328 7
a1334 1
#ifndef YY_NO_INPUT
d1336 1
a1336 1
    static int yyinput (void)
d1338 1
a1338 1
    static int input  (void)
d1340 2
d1343 1
a1343 4
{
	int c;
    
	*(yy_c_buf_p) = (yy_hold_char);
d1345 1
a1345 1
	if ( *(yy_c_buf_p) == YY_END_OF_BUFFER_CHAR )
d1351 1
a1351 1
		if ( (yy_c_buf_p) < &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)] )
d1353 1
a1353 1
			*(yy_c_buf_p) = '\0';
d1357 2
a1358 2
			int offset = (yy_c_buf_p) - (yytext_ptr);
			++(yy_c_buf_p);
d1360 1
a1360 1
			switch ( yy_get_next_buffer(  ) )
d1374 1
a1374 1
					yyrestart(yyin );
d1376 1
a1376 1
					/*FALLTHROUGH*/
d1380 1
a1380 1
					if ( yywrap( ) )
d1383 1
a1383 1
					if ( ! (yy_did_buffer_switch_on_eof) )
d1393 1
a1393 1
					(yy_c_buf_p) = (yytext_ptr) + offset;
d1399 4
a1402 3
	c = *(unsigned char *) (yy_c_buf_p);	/* cast for 8-bit char's */
	*(yy_c_buf_p) = '\0';	/* preserve yytext */
	(yy_hold_char) = *++(yy_c_buf_p);
d1405 1
a1405 2
}
#endif	/* ifndef YY_NO_INPUT */
d1407 13
a1419 12
/** Immediately switch to a different input stream.
 * @@param input_file A readable stream.
 * 
 * @@note This function does not reset the start condition to @@c INITIAL .
 */
    void yyrestart  (FILE * input_file )
{
    
	if ( ! YY_CURRENT_BUFFER ){
        yyensure_buffer_stack ();
		YY_CURRENT_BUFFER_LVALUE =
            yy_create_buffer(yyin,YY_BUF_SIZE );
d1422 9
a1430 18
	yy_init_buffer(YY_CURRENT_BUFFER,input_file );
	yy_load_buffer_state( );
}

/** Switch to a different input buffer.
 * @@param new_buffer The new input buffer.
 * 
 */
    void yy_switch_to_buffer  (YY_BUFFER_STATE  new_buffer )
{
    
	/* TODO. We should be able to replace this entire function body
	 * with
	 *		yypop_buffer_state();
	 *		yypush_buffer_state(new_buffer);
     */
	yyensure_buffer_stack ();
	if ( YY_CURRENT_BUFFER == new_buffer )
d1433 1
a1433 1
	if ( YY_CURRENT_BUFFER )
d1436 3
a1438 3
		*(yy_c_buf_p) = (yy_hold_char);
		YY_CURRENT_BUFFER_LVALUE->yy_buf_pos = (yy_c_buf_p);
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars);
d1441 2
a1442 2
	YY_CURRENT_BUFFER_LVALUE = new_buffer;
	yy_load_buffer_state( );
d1449 3
a1451 2
	(yy_did_buffer_switch_on_eof) = 1;
}
d1453 21
a1473 16
static void yy_load_buffer_state  (void)
{
    	(yy_n_chars) = YY_CURRENT_BUFFER_LVALUE->yy_n_chars;
	(yytext_ptr) = (yy_c_buf_p) = YY_CURRENT_BUFFER_LVALUE->yy_buf_pos;
	yyin = YY_CURRENT_BUFFER_LVALUE->yy_input_file;
	(yy_hold_char) = *(yy_c_buf_p);
}

/** Allocate and initialize an input buffer state.
 * @@param file A readable stream.
 * @@param size The character buffer size in bytes. When in doubt, use @@c YY_BUF_SIZE.
 * 
 * @@return the allocated buffer state.
 */
    YY_BUFFER_STATE yy_create_buffer  (FILE * file, int  size )
{
d1475 2
a1476 2
    
	b = (YY_BUFFER_STATE) yyalloc(sizeof( struct yy_buffer_state )  );
d1485 1
a1485 1
	b->yy_ch_buf = (char *) yyalloc(b->yy_buf_size + 2  );
d1491 1
a1491 1
	yy_init_buffer(b,file );
d1494 2
a1495 1
}
d1497 7
a1503 7
/** Destroy the buffer.
 * @@param b a buffer created with yy_create_buffer()
 * 
 */
    void yy_delete_buffer (YY_BUFFER_STATE  b )
{
    
d1507 2
a1508 2
	if ( b == YY_CURRENT_BUFFER ) /* Not sure if we should pop here. */
		YY_CURRENT_BUFFER_LVALUE = (YY_BUFFER_STATE) 0;
d1511 4
a1514 1
		yyfree((void *) b->yy_ch_buf  );
a1515 2
	yyfree((void *) b  );
}
d1517 14
a1530 9
#ifndef __cplusplus
extern int isatty (int );
#endif /* __cplusplus */
    
/* Initializes or reinitializes a buffer.
 * This function is sometimes called more than once on the same buffer,
 * such as during a yyrestart() or at EOF.
 */
    static void yy_init_buffer  (YY_BUFFER_STATE  b, FILE * file )
d1532 2
a1533 4
{
	int oerrno = errno;
    
	yy_flush_buffer(b );
d1538 21
a1558 21
    /* If b is the current buffer, then yy_init_buffer was _probably_
     * called from yyrestart() or through yy_get_next_buffer.
     * In that case, we don't want to reset the lineno or column.
     */
    if (b != YY_CURRENT_BUFFER){
        b->yy_bs_lineno = 1;
        b->yy_bs_column = 0;
    }

        b->yy_is_interactive = file ? (isatty( fileno(file) ) > 0) : 0;
    
	errno = oerrno;
}

/** Discard all buffered characters. On the next scan, YY_INPUT will be called.
 * @@param b the buffer state to be flushed, usually @@c YY_CURRENT_BUFFER.
 * 
 */
    void yy_flush_buffer (YY_BUFFER_STATE  b )
{
    	if ( ! b )
d1575 2
a1576 53
	if ( b == YY_CURRENT_BUFFER )
		yy_load_buffer_state( );
}

/** Pushes the new state onto the stack. The new state becomes
 *  the current state. This function will allocate the stack
 *  if necessary.
 *  @@param new_buffer The new state.
 *  
 */
void yypush_buffer_state (YY_BUFFER_STATE new_buffer )
{
    	if (new_buffer == NULL)
		return;

	yyensure_buffer_stack();

	/* This block is copied from yy_switch_to_buffer. */
	if ( YY_CURRENT_BUFFER )
		{
		/* Flush out information for old buffer. */
		*(yy_c_buf_p) = (yy_hold_char);
		YY_CURRENT_BUFFER_LVALUE->yy_buf_pos = (yy_c_buf_p);
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars);
		}

	/* Only push if top exists. Otherwise, replace top. */
	if (YY_CURRENT_BUFFER)
		(yy_buffer_stack_top)++;
	YY_CURRENT_BUFFER_LVALUE = new_buffer;

	/* copied from yy_switch_to_buffer. */
	yy_load_buffer_state( );
	(yy_did_buffer_switch_on_eof) = 1;
}

/** Removes and deletes the top of the stack, if present.
 *  The next element becomes the new top.
 *  
 */
void yypop_buffer_state (void)
{
    	if (!YY_CURRENT_BUFFER)
		return;

	yy_delete_buffer(YY_CURRENT_BUFFER );
	YY_CURRENT_BUFFER_LVALUE = NULL;
	if ((yy_buffer_stack_top) > 0)
		--(yy_buffer_stack_top);

	if (YY_CURRENT_BUFFER) {
		yy_load_buffer_state( );
		(yy_did_buffer_switch_on_eof) = 1;
a1577 1
}
a1578 24
/* Allocates the stack if it does not exist.
 *  Guarantees space for at least one push.
 */
static void yyensure_buffer_stack (void)
{
	int num_to_alloc;
    
	if (!(yy_buffer_stack)) {

		/* First allocation is just for 2 elements, since we don't know if this
		 * scanner will even need a stack. We use 2 instead of 1 to avoid an
		 * immediate realloc on the next call.
         */
		num_to_alloc = 1;
		(yy_buffer_stack) = (struct yy_buffer_state**)yyalloc
								(num_to_alloc * sizeof(struct yy_buffer_state*)
								);
		
		memset((yy_buffer_stack), 0, num_to_alloc * sizeof(struct yy_buffer_state*));
				
		(yy_buffer_stack_max) = num_to_alloc;
		(yy_buffer_stack_top) = 0;
		return;
	}
d1580 10
a1589 4
	if ((yy_buffer_stack_top) >= ((yy_buffer_stack_max)) - 1){

		/* Increase the buffer to prepare for a possible push. */
		int grow_size = 8 /* arbitrary grow size */;
a1590 22
		num_to_alloc = (yy_buffer_stack_max) + grow_size;
		(yy_buffer_stack) = (struct yy_buffer_state**)yyrealloc
								((yy_buffer_stack),
								num_to_alloc * sizeof(struct yy_buffer_state*)
								);

		/* zero only the new slots.*/
		memset((yy_buffer_stack) + (yy_buffer_stack_max), 0, grow_size * sizeof(struct yy_buffer_state*));
		(yy_buffer_stack_max) = num_to_alloc;
	}
}

/** Setup the input buffer state to scan directly from a user-specified character buffer.
 * @@param base the character buffer
 * @@param size the size in bytes of the character buffer
 * 
 * @@return the newly allocated buffer state object. 
 */
YY_BUFFER_STATE yy_scan_buffer  (char * base, yy_size_t  size )
{
	YY_BUFFER_STATE b;
    
d1597 1
a1597 1
	b = (YY_BUFFER_STATE) yyalloc(sizeof( struct yy_buffer_state )  );
d1611 1
a1611 1
	yy_switch_to_buffer(b  );
d1614 20
a1633 1
}
d1635 9
a1643 23
/** Setup the input buffer state to scan a string. The next call to yylex() will
 * scan from a @@e copy of @@a str.
 * @@param str a NUL-terminated string to scan
 * 
 * @@return the newly allocated buffer state object.
 * @@note If you want to scan bytes that may contain NUL values, then use
 *       yy_scan_bytes() instead.
 */
YY_BUFFER_STATE yy_scan_string (yyconst char * str )
{
    
	return yy_scan_bytes(str,strlen(str) );
}

/** Setup the input buffer state to scan the given bytes. The next call to yylex() will
 * scan from a @@e copy of @@a bytes.
 * @@param bytes the byte buffer to scan
 * @@param len the number of bytes in the buffer pointed to by @@a bytes.
 * 
 * @@return the newly allocated buffer state object.
 */
YY_BUFFER_STATE yy_scan_bytes  (yyconst char * bytes, int  len )
{
d1648 1
a1648 1
    
d1651 1
a1651 1
	buf = (char *) yyalloc(n  );
d1660 1
a1660 1
	b = yy_scan_buffer(buf,n );
d1670 3
a1672 1
}
d1674 6
a1679 2
#ifndef YY_EXIT_FAILURE
#define YY_EXIT_FAILURE 2
d1681 7
d1689 6
a1694 5
static void yy_fatal_error (yyconst char* msg )
{
    	(void) fprintf( stderr, "%s\n", msg );
	exit( YY_EXIT_FAILURE );
}
d1696 4
a1699 1
/* Redefine yyless() so it works in section 3 code. */
d1701 1
a1701 14
#undef yyless
#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up yytext. */ \
        int yyless_macro_arg = (n); \
        YY_LESS_LINENO(yyless_macro_arg);\
		yytext[yyleng] = (yy_hold_char); \
		(yy_c_buf_p) = yytext + yyless_macro_arg; \
		(yy_hold_char) = *(yy_c_buf_p); \
		*(yy_c_buf_p) = '\0'; \
		yyleng = yyless_macro_arg; \
		} \
	while ( 0 )
d1703 3
a1705 1
/* Accessor  methods (get/set functions) to struct members. */
a1706 8
/** Get the current line number.
 * 
 */
int yyget_lineno  (void)
{
        
    return yylineno;
}
d1708 5
a1712 7
/** Get the input stream.
 * 
 */
FILE *yyget_in  (void)
{
        return yyin;
}
d1714 3
a1716 7
/** Get the output stream.
 * 
 */
FILE *yyget_out  (void)
{
        return yyout;
}
a1717 7
/** Get the length of the current token.
 * 
 */
int yyget_leng  (void)
{
        return yyleng;
}
d1719 6
a1724 3
/** Get the current token.
 * 
 */
d1726 3
a1728 4
char *yyget_text  (void)
{
        return yytext;
}
d1730 10
a1739 20
/** Set the current line number.
 * @@param line_number
 * 
 */
void yyset_lineno (int  line_number )
{
    
    yylineno = line_number;
}

/** Set the input stream. This does not discard the current
 * input buffer.
 * @@param in_str A readable stream.
 * 
 * @@see yy_switch_to_buffer
 */
void yyset_in (FILE *  in_str )
{
        yyin = in_str ;
}
a1740 4
void yyset_out (FILE *  out_str )
{
        yyout = out_str ;
}
a1741 4
int yyget_debug  (void)
{
        return yy_flex_debug;
}
d1743 1
a1743 4
void yyset_debug (int  bdebug )
{
        yy_flex_debug = bdebug ;
}
d1745 12
a1756 14
/* yylex_destroy is for both reentrant and non-reentrant scanners. */
int yylex_destroy  (void)
{
    
    /* Pop the buffer stack, destroying each element. */
	while(YY_CURRENT_BUFFER){
		yy_delete_buffer(YY_CURRENT_BUFFER  );
		YY_CURRENT_BUFFER_LVALUE = NULL;
		yypop_buffer_state();
	}

	/* Destroy the stack itself. */
	yyfree((yy_buffer_stack) );
	(yy_buffer_stack) = NULL;
a1757 2
    return 0;
}
d1759 1
a1759 3
/*
 * Internal utility routines.
 */
d1762 9
a1770 2
static void yy_flex_strncpy (char* s1, yyconst char * s2, int n )
{
d1772 1
a1772 1
    	for ( i = 0; i < n; ++i )
d1774 1
a1774 1
}
d1778 7
a1784 2
static int yy_flex_strlen (yyconst char * s )
{
d1786 1
a1786 1
    	for ( n = 0; s[n]; ++n )
d1790 1
a1790 1
}
d1793 8
a1800 2
void *yyalloc (yy_size_t  size )
{
d1802 1
a1802 1
}
d1804 8
a1811 2
void *yyrealloc  (void * ptr, yy_size_t  size )
{
d1820 1
a1820 1
}
d1822 9
a1830 4
void yyfree (void * ptr )
{
	free( (char *) ptr );	/* see yyrealloc() for (char *) cast */
}
d1832 6
a1837 13
#define YYTABLES_NAME "yytables"

#undef YY_NEW_FILE
#undef YY_FLUSH_BUFFER
#undef yy_set_bol
#undef yy_new_buffer
#undef yy_set_interactive
#undef yytext_ptr
#undef YY_DO_BEFORE_ACTION

#ifdef YY_DECL_IS_OURS
#undef YY_DECL_IS_OURS
#undef YY_DECL
a1840 1

a1844 1

@


1.1.1.5
log
@Binutils 2.15, with testsuites removed, and without gdb and libiberty.
@
text
@d1 5
a7 4
/* Scanner skeleton version:
 * $Header: /home/daffy/u0/vern/flex/RCS/flex.skl,v 2.91 96/09/10 16:58:48 vern Exp $
 */

d11 6
d18 1
d20 1
d22 27
d50 24
a73 4
/* cfront 1.2 defines "c_plusplus" instead of "__cplusplus" */
#ifdef c_plusplus
#ifndef __cplusplus
#define __cplusplus
d75 2
d79 1
a82 8
#include <stdlib.h>
#ifndef _WIN32
#include <unistd.h>
#endif

/* Use prototypes in function declarations. */
#define YY_USE_PROTOS

a89 1
#define YY_USE_PROTOS
a94 9
#ifdef __TURBOC__
 #pragma warn -rch
 #pragma warn -use
#include <io.h>
#include <stdlib.h>
#define YY_USE_CONST
#define YY_USE_PROTOS
#endif

a100 8

#ifdef YY_USE_PROTOS
#define YY_PROTO(proto) proto
#else
#define YY_PROTO(proto) ()
#endif


d115 1
a115 1
#define BEGIN yy_start = 1 + 2 *
d121 1
a121 1
#define YY_START ((yy_start - 1) / 2)
d128 1
a128 1
#define YY_NEW_FILE yyrestart( yyin )
d133 1
d135 1
d137 2
d140 1
d143 1
d150 3
a152 16
/* The funky do-while in the following #define is used to turn the definition
 * int a single C statement (which needs a semi-colon terminator).  This
 * avoids problems with code like:
 *
 * 	if ( condition_holds )
 *		yyless( 5 );
 *	else
 *		do_something_else();
 *
 * Prior to using the do-while the compiler would get upset at the
 * "else" because it interpreted the "if" statement as being all
 * done when it reached the ';' after the yyless() call.
 */

/* Return all but the first 'n' matched characters back to the input stream. */

d157 3
a159 1
		*yy_cp = yy_hold_char; \
d161 1
a161 1
		yy_c_buf_p = yy_cp = yy_bp + n - YY_MORE_ADJ; \
d166 1
a166 1
#define unput(c) yyunput( c, yytext_ptr )
d172 3
d176 1
d178 2
a179 1

d216 3
d225 1
d239 1
d241 1
d243 4
a246 1
static YY_BUFFER_STATE yy_current_buffer = 0;
d251 2
d254 3
a256 1
#define YY_CURRENT_BUFFER yy_current_buffer
d258 4
a264 1

a265 2


d278 21
a298 17
void yyrestart YY_PROTO(( FILE *input_file ));

void yy_switch_to_buffer YY_PROTO(( YY_BUFFER_STATE new_buffer ));
void yy_load_buffer_state YY_PROTO(( void ));
YY_BUFFER_STATE yy_create_buffer YY_PROTO(( FILE *file, int size ));
void yy_delete_buffer YY_PROTO(( YY_BUFFER_STATE b ));
void yy_init_buffer YY_PROTO(( YY_BUFFER_STATE b, FILE *file ));
void yy_flush_buffer YY_PROTO(( YY_BUFFER_STATE b ));
#define YY_FLUSH_BUFFER yy_flush_buffer( yy_current_buffer )

YY_BUFFER_STATE yy_scan_buffer YY_PROTO(( char *base, yy_size_t size ));
YY_BUFFER_STATE yy_scan_string YY_PROTO(( yyconst char *yy_str ));
YY_BUFFER_STATE yy_scan_bytes YY_PROTO(( yyconst char *bytes, int len ));

static void *yy_flex_alloc YY_PROTO(( yy_size_t ));
static void *yy_flex_realloc YY_PROTO(( void *, yy_size_t ));
static void yy_flex_free YY_PROTO(( void * ));
d304 6
a309 3
	if ( ! yy_current_buffer ) \
		yy_current_buffer = yy_create_buffer( yyin, YY_BUF_SIZE ); \
	yy_current_buffer->yy_is_interactive = is_interactive; \
d314 6
a319 3
	if ( ! yy_current_buffer ) \
		yy_current_buffer = yy_create_buffer( yyin, YY_BUF_SIZE ); \
	yy_current_buffer->yy_at_bol = at_bol; \
d322 3
a324 1
#define YY_AT_BOL() (yy_current_buffer->yy_at_bol)
d327 1
d329 1
d331 5
d339 4
a342 4
static yy_state_type yy_get_previous_state YY_PROTO(( void ));
static yy_state_type yy_try_NUL_trans YY_PROTO(( yy_state_type current_state ));
static int yy_get_next_buffer YY_PROTO(( void ));
static void yy_fatal_error YY_PROTO(( yyconst char msg[] ));
d348 3
a350 3
	yytext_ptr = yy_bp; \
	yyleng = (int) (yy_cp - yy_bp); \
	yy_hold_char = *yy_cp; \
d352 1
a352 1
	yy_c_buf_p = yy_cp;
d354 10
a363 3
#define YY_NUM_RULES 40
#define YY_END_OF_BUFFER 41
static yyconst short int yy_accept[197] =
d365 20
a384 22
        0,    0,   41,   40,   34,   35,   33,   40,   28,   40,
       31,   39,   37,   27,   32,   36,   38,   28,   28,   28,
       28,   28,   28,   28,   28,   28,   28,   28,   28,   28,
       28,   28,    0,   29,   28,    0,   30,   31,   27,   32,
       28,   28,   28,   28,   28,   28,   28,   28,   28,   28,
       28,   28,   28,   28,   28,   28,   28,   28,   28,   28,
       28,   28,   28,   28,   28,   28,   28,   28,   28,   28,
       28,   28,   28,   28,   28,   28,   28,   28,   28,   28,
       28,   28,   28,   28,   28,   12,    6,   28,    7,   28,
       28,   28,   28,   28,   28,   28,   28,    1,   28,   28,

       28,   16,   28,   28,   28,   28,   28,   28,   28,   28,
       28,   28,   28,   28,   28,   28,   28,   28,   28,   28,
       28,   28,   28,   28,   28,   28,   28,   28,   28,   17,
       28,   28,   28,   28,   28,   28,   28,   28,   28,   28,
       14,   28,   28,   28,   19,   21,   28,   28,   28,   28,
       28,   28,   18,    9,   28,   10,   28,   28,    2,   28,
       28,   15,   28,   28,   28,   28,   11,   13,   28,    5,
       28,   28,   22,   28,    8,   28,   28,   28,   28,   28,
       28,   20,    4,   28,   28,   28,   24,   28,   26,   28,
        3,   28,   28,   23,   25,    0

d387 1
a387 1
static yyconst int yy_ec[256] =
d419 1
a419 1
static yyconst int yy_meta[40] =
d427 1
a427 1
static yyconst short int yy_base[204] =
d429 21
a449 21
        0,    0,  228,  229,  229,  229,  229,  222,    0,  219,
        0,  229,  229,    0,    0,  229,    0,  209,  195,   24,
      186,  202,   14,  197,  186,   27,  188,  198,   25,  197,
      196,  184,  209,  229,    0,  206,  229,    0,    0,    0,
        0,  180,   27,  178,  178,   27,  193,  178,  183,  189,
      179,  177,  175,  178,  185,  182,  183,  170,  181,  165,
      164,  170,  173,  172,  159,  174,  171,  170,  158,  156,
      156,  151,  152,  149,  161,   34,  145,  160,  145,  146,
      154,  157,  147,  141,  139,    0,    0,  138,    0,  139,
      135,  137,  135,  135,   29,  149,  140,    0,  136,  139,

      145,    0,  136,  139,  132,  132,   30,  132,  135,  138,
      129,  119,  118,  126,  116,  122,  119,  115,  115,  124,
      127,  109,  112,  121,  119,  106,  111,  108,  106,    0,
      106,  103,  112,   99,   91,   97,   99,   95,   88,   99,
        0,   93,  103,   94,    0,    0,   97,   91,   87,   90,
       84,   83,    0,    0,   95,    0,   97,   80,    0,   92,
       91,    0,   78,   70,   91,   74,    0,    0,   82,    0,
       89,   88,    0,   84,    0,   82,   85,   83,   69,   66,
       56,    0,    0,   39,   36,   35,    0,   44,    0,   43,
        0,   40,   39,    0,    0,  229,   66,   70,   76,   82,
a450 1
       84,   90,   94
d453 1
a453 1
static yyconst short int yy_def[204] =
d455 21
a475 21
      196,    1,  196,  196,  196,  196,  196,  197,  198,  199,
      200,  196,  196,  201,  202,  196,  203,  198,  198,  198,
      198,  198,  198,  198,  198,  198,  198,  198,  198,  198,
      198,  198,  197,  196,  198,  199,  196,  200,  201,  202,
      198,  198,  198,  198,  198,  198,  198,  198,  198,  198,
      198,  198,  198,  198,  198,  198,  198,  198,  198,  198,
      198,  198,  198,  198,  198,  198,  198,  198,  198,  198,
      198,  198,  198,  198,  198,  198,  198,  198,  198,  198,
      198,  198,  198,  198,  198,  198,  198,  198,  198,  198,
      198,  198,  198,  198,  198,  198,  198,  198,  198,  198,

      198,  198,  198,  198,  198,  198,  198,  198,  198,  198,
      198,  198,  198,  198,  198,  198,  198,  198,  198,  198,
      198,  198,  198,  198,  198,  198,  198,  198,  198,  198,
      198,  198,  198,  198,  198,  198,  198,  198,  198,  198,
      198,  198,  198,  198,  198,  198,  198,  198,  198,  198,
      198,  198,  198,  198,  198,  198,  198,  198,  198,  198,
      198,  198,  198,  198,  198,  198,  198,  198,  198,  198,
      198,  198,  198,  198,  198,  198,  198,  198,  198,  198,
      198,  198,  198,  198,  198,  198,  198,  198,  198,  198,
      198,  198,  198,  198,  198,    0,  196,  196,  196,  196,
a476 1
      196,  196,  196
d479 1
a479 1
static yyconst short int yy_nxt[269] =
d483 27
a509 27
        9,    9,   22,   23,    9,   24,   25,   26,    9,   27,
       28,   29,   30,    9,   31,   32,    9,    9,    9,   44,
       48,   49,   52,   45,   56,   64,   68,   57,   58,   99,
      116,  127,  117,  128,   65,   53,   69,   59,  195,  194,
      193,  192,  191,  190,  189,  100,   33,   33,   33,   33,
       33,   33,   35,   35,   35,   35,   36,   36,   36,   36,
       36,   36,   38,  188,   38,   38,   38,   38,   39,   39,
       40,  187,   40,   40,   40,   40,   41,  186,  185,   41,

      184,  183,  182,  181,  180,  179,  178,  177,  176,  175,
      174,  173,  172,  171,  170,  169,  168,  167,  166,  165,
      164,  163,  162,  161,  160,  159,  158,  157,  156,  155,
      154,  153,  152,  151,  150,  149,  148,  147,  146,  145,
      144,  143,  142,  141,  140,  139,  138,  137,  136,  135,
      134,  133,  132,  131,  130,  129,  126,  125,  124,  123,
      122,  121,  120,  119,  118,  115,  114,  113,  112,  111,
      110,  109,  108,  107,  106,  105,  104,  103,  102,  101,
       98,   97,   96,   95,   94,   93,   92,   91,   90,   89,
       88,   87,   86,   85,   84,   83,   82,   81,   80,   79,

       78,   77,   76,   75,   74,   73,   72,   71,   70,   67,
       66,   63,   37,   34,   62,   61,   60,   55,   54,   51,
       50,   47,   46,   43,   42,   37,   34,  196,    3,  196,
      196,  196,  196,  196,  196,  196,  196,  196,  196,  196,
      196,  196,  196,  196,  196,  196,  196,  196,  196,  196,
      196,  196,  196,  196,  196,  196,  196,  196,  196,  196,
      196,  196,  196,  196,  196,  196,  196,  196
d512 1
a512 1
static yyconst short int yy_chk[269] =
d518 25
a542 25
       23,   23,   26,   20,   29,   43,   46,   29,   29,   76,
       95,  107,   95,  107,   43,   26,   46,   29,  193,  192,
      190,  188,  186,  185,  184,   76,  197,  197,  197,  197,
      197,  197,  198,  198,  198,  198,  199,  199,  199,  199,
      199,  199,  200,  181,  200,  200,  200,  200,  201,  201,
      202,  180,  202,  202,  202,  202,  203,  179,  178,  203,

      177,  176,  174,  172,  171,  169,  166,  165,  164,  163,
      161,  160,  158,  157,  155,  152,  151,  150,  149,  148,
      147,  144,  143,  142,  140,  139,  138,  137,  136,  135,
      134,  133,  132,  131,  129,  128,  127,  126,  125,  124,
      123,  122,  121,  120,  119,  118,  117,  116,  115,  114,
      113,  112,  111,  110,  109,  108,  106,  105,  104,  103,
      101,  100,   99,   97,   96,   94,   93,   92,   91,   90,
       88,   85,   84,   83,   82,   81,   80,   79,   78,   77,
       75,   74,   73,   72,   71,   70,   69,   68,   67,   66,
       65,   64,   63,   62,   61,   60,   59,   58,   57,   56,

       55,   54,   53,   52,   51,   50,   49,   48,   47,   45,
       44,   42,   36,   33,   32,   31,   30,   28,   27,   25,
       24,   22,   21,   19,   18,   10,    8,    3,  196,  196,
      196,  196,  196,  196,  196,  196,  196,  196,  196,  196,
      196,  196,  196,  196,  196,  196,  196,  196,  196,  196,
      196,  196,  196,  196,  196,  196,  196,  196,  196,  196,
      196,  196,  196,  196,  196,  196,  196,  196
d548 3
a559 1
#define INITIAL 0
d562 1
a562 2
/*  Copyright 1995, 1997, 1998, 1999, 2002, 2003, 2004
    Free Software Foundation, Inc.
d564 1
a564 1
    This file is part of GNU Binutils.
d566 4
a569 4
    This program is free software; you can redistribute it and/or modify
    it under the terms of the GNU General Public License as published by
    the Free Software Foundation; either version 2 of the License, or
    (at your option) any later version.
d571 4
a574 4
    This program is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
    GNU General Public License for more details.
d576 3
a578 3
    You should have received a copy of the GNU General Public License
    along with this program; if not, write to the Free Software
    Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA 02111-1307, USA.  */
d581 2
a582 1
/* Contributed by Steve Chamberlain: sac@@cygnus.com  */
d584 1
d592 13
a604 1
#line 521 "lex.yy.c"
d612 1
a612 1
extern "C" int yywrap YY_PROTO(( void ));
d614 1
a614 2
extern int yywrap YY_PROTO(( void ));
#endif
a615 3

#ifndef YY_NO_UNPUT
static void yyunput YY_PROTO(( int c, char *buf_ptr ));
d618 2
d621 1
a621 1
static void yy_flex_strncpy YY_PROTO(( char *, yyconst char *, int ));
d625 1
a625 1
static int yy_flex_strlen YY_PROTO(( yyconst char * ));
d629 1
d631 1
a631 1
static int yyinput YY_PROTO(( void ));
d633 1
a633 2
static int input YY_PROTO(( void ));
#endif
a635 33
#if YY_STACK_USED
static int yy_start_stack_ptr = 0;
static int yy_start_stack_depth = 0;
static int *yy_start_stack = 0;
#ifndef YY_NO_PUSH_STATE
static void yy_push_state YY_PROTO(( int new_state ));
#endif
#ifndef YY_NO_POP_STATE
static void yy_pop_state YY_PROTO(( void ));
#endif
#ifndef YY_NO_TOP_STATE
static int yy_top_state YY_PROTO(( void ));
#endif

#else
#define YY_NO_PUSH_STATE 1
#define YY_NO_POP_STATE 1
#define YY_NO_TOP_STATE 1
#endif

#ifdef YY_MALLOC_DECL
YY_MALLOC_DECL
#else
#if __STDC__
#ifndef __cplusplus
#include <stdlib.h>
#endif
#else
/* Just try to get by without declaring the routines.  This will fail
 * miserably on non-ANSI systems for which sizeof(size_t) != sizeof(int)
 * or sizeof(void*) != sizeof(int).
 */
#endif
a643 1

d656 1
a656 1
	if ( yy_current_buffer->yy_is_interactive ) \
d658 2
a659 1
		int c = '*', n; \
d682 3
a684 1
		}
d705 2
d711 6
a716 2
#define YY_DECL int yylex YY_PROTO(( void ))
#endif
d733 2
d736 1
a736 1
	{
d740 2
d743 1
a743 3
#line 33 "deflex.l"

#line 685 "lex.yy.c"
d745 1
a745 1
	if ( yy_init )
d747 1
a747 1
		yy_init = 0;
d753 2
a754 2
		if ( ! yy_start )
			yy_start = 1;	/* first start state */
d762 5
a766 3
		if ( ! yy_current_buffer )
			yy_current_buffer =
				yy_create_buffer( yyin, YY_BUF_SIZE );
d768 1
a768 1
		yy_load_buffer_state();
d773 1
a773 1
		yy_cp = yy_c_buf_p;
d776 1
a776 1
		*yy_cp = yy_hold_char;
d783 1
a783 1
		yy_current_state = yy_start;
d790 2
a791 2
				yy_last_accepting_state = yy_current_state;
				yy_last_accepting_cpos = yy_cp;
d796 1
a796 1
				if ( yy_current_state >= 197 )
d802 1
a802 1
		while ( yy_base[yy_current_state] != 229 );
d808 2
a809 2
			yy_cp = yy_last_accepting_cpos;
			yy_current_state = yy_last_accepting_state;
a814 1

a816 1

d821 3
a823 3
			*yy_cp = yy_hold_char;
			yy_cp = yy_last_accepting_cpos;
			yy_current_state = yy_last_accepting_state;
d828 1
a828 1
#line 34 "deflex.l"
d833 1
a833 1
#line 35 "deflex.l"
d838 1
a838 1
#line 36 "deflex.l"
d843 1
a843 1
#line 37 "deflex.l"
d848 1
a848 1
#line 38 "deflex.l"
d853 1
a853 1
#line 39 "deflex.l"
d858 1
a858 1
#line 40 "deflex.l"
d863 1
a863 1
#line 41 "deflex.l"
d868 1
a868 1
#line 42 "deflex.l"
d873 1
a873 1
#line 43 "deflex.l"
d878 1
a878 1
#line 44 "deflex.l"
d883 1
a883 1
#line 45 "deflex.l"
d888 1
a888 1
#line 46 "deflex.l"
d893 1
a893 1
#line 47 "deflex.l"
a897 5
#line 48 "deflex.l"
{ return PRIVATE; }
	YY_BREAK
case 16:
YY_RULE_SETUP
d901 1
a901 1
case 17:
d906 1
a906 1
case 18:
d911 1
a911 1
case 19:
d916 1
a916 1
case 20:
d921 1
a921 1
case 21:
d926 1
a926 1
case 22:
d931 1
a931 1
case 23:
d936 1
a936 1
case 24:
d941 1
a941 1
case 25:
d946 1
a946 1
case 26:
d951 1
a951 1
case 27:
d957 1
a957 1
case 28:
d965 2
a966 1
case 29:
d975 2
a976 1
case 30:
d985 1
a985 1
case 31:
d990 1
a990 1
case 32:
d995 1
a995 1
case 33:
d1000 1
a1000 1
case 34:
d1005 2
a1006 1
case 35:
d1011 1
a1011 1
case 36:
d1016 1
a1016 1
case 37:
d1021 1
a1021 1
case 38:
d1026 1
a1026 1
case 39:
d1031 1
a1031 1
case 40:
d1036 1
a1036 1
#line 980 "lex.yy.c"
d1043 1
a1043 1
		int yy_amount_of_matched_text = (int) (yy_cp - yytext_ptr) - 1;
d1046 1
a1046 1
		*yy_cp = yy_hold_char;
d1049 1
a1049 1
		if ( yy_current_buffer->yy_buffer_status == YY_BUFFER_NEW )
d1055 1
a1055 1
			 * consistency between yy_current_buffer and our
d1060 3
a1062 3
			yy_n_chars = yy_current_buffer->yy_n_chars;
			yy_current_buffer->yy_input_file = yyin;
			yy_current_buffer->yy_buffer_status = YY_BUFFER_NORMAL;
d1072 1
a1072 1
		if ( yy_c_buf_p <= &yy_current_buffer->yy_ch_buf[yy_n_chars] )
d1076 1
a1076 1
			yy_c_buf_p = yytext_ptr + yy_amount_of_matched_text;
d1078 1
a1078 1
			yy_current_state = yy_get_previous_state();
d1091 1
a1091 1
			yy_bp = yytext_ptr + YY_MORE_ADJ;
d1096 1
a1096 1
				yy_cp = ++yy_c_buf_p;
d1103 1
a1103 1
				yy_cp = yy_c_buf_p;
d1108 1
a1108 1
		else switch ( yy_get_next_buffer() )
d1112 1
a1112 1
				yy_did_buffer_switch_on_eof = 0;
d1114 1
a1114 1
				if ( yywrap() )
d1125 1
a1125 1
					yy_c_buf_p = yytext_ptr + YY_MORE_ADJ;
d1133 1
a1133 1
					if ( ! yy_did_buffer_switch_on_eof )
d1140 2
a1141 2
				yy_c_buf_p =
					yytext_ptr + yy_amount_of_matched_text;
d1143 1
a1143 1
				yy_current_state = yy_get_previous_state();
d1145 2
a1146 2
				yy_cp = yy_c_buf_p;
				yy_bp = yytext_ptr + YY_MORE_ADJ;
d1150 2
a1151 2
				yy_c_buf_p =
				&yy_current_buffer->yy_ch_buf[yy_n_chars];
d1153 1
a1153 1
				yy_current_state = yy_get_previous_state();
d1155 2
a1156 2
				yy_cp = yy_c_buf_p;
				yy_bp = yytext_ptr + YY_MORE_ADJ;
d1167 1
a1167 2
	} /* end of yylex */

d1176 4
a1179 5

static int yy_get_next_buffer()
	{
	register char *dest = yy_current_buffer->yy_ch_buf;
	register char *source = yytext_ptr;
d1183 1
a1183 1
	if ( yy_c_buf_p > &yy_current_buffer->yy_ch_buf[yy_n_chars + 1] )
d1187 1
a1187 1
	if ( yy_current_buffer->yy_fill_buffer == 0 )
d1189 1
a1189 1
		if ( yy_c_buf_p - yytext_ptr - YY_MORE_ADJ == 1 )
d1209 1
a1209 1
	number_to_move = (int) (yy_c_buf_p - yytext_ptr) - 1;
d1214 1
a1214 1
	if ( yy_current_buffer->yy_buffer_status == YY_BUFFER_EOF_PENDING )
d1218 1
a1218 1
		yy_current_buffer->yy_n_chars = yy_n_chars = 0;
d1222 2
a1223 2
		int num_to_read =
			yy_current_buffer->yy_buf_size - number_to_move - 1;
a1226 4
#ifdef YY_USES_REJECT
			YY_FATAL_ERROR(
"input buffer overflow, can't enlarge buffer because scanner uses REJECT" );
#else
d1229 1
a1229 1
			YY_BUFFER_STATE b = yy_current_buffer;
d1232 1
a1232 1
				(int) (yy_c_buf_p - b->yy_ch_buf);
d1245 1
a1245 2
					yy_flex_realloc( (void *) b->yy_ch_buf,
							 b->yy_buf_size + 2 );
d1255 1
a1255 1
			yy_c_buf_p = &b->yy_ch_buf[yy_c_buf_p_offset];
d1257 1
a1257 1
			num_to_read = yy_current_buffer->yy_buf_size -
d1259 1
a1259 1
#endif
d1266 2
a1267 2
		YY_INPUT( (&yy_current_buffer->yy_ch_buf[number_to_move]),
			yy_n_chars, num_to_read );
d1269 1
a1269 1
		yy_current_buffer->yy_n_chars = yy_n_chars;
d1272 1
a1272 1
	if ( yy_n_chars == 0 )
d1277 1
a1277 1
			yyrestart( yyin );
d1283 1
a1283 1
			yy_current_buffer->yy_buffer_status =
d1291 3
a1293 3
	yy_n_chars += number_to_move;
	yy_current_buffer->yy_ch_buf[yy_n_chars] = YY_END_OF_BUFFER_CHAR;
	yy_current_buffer->yy_ch_buf[yy_n_chars + 1] = YY_END_OF_BUFFER_CHAR;
d1295 1
a1295 1
	yytext_ptr = &yy_current_buffer->yy_ch_buf[0];
d1298 1
a1298 2
	}

d1302 2
a1303 2
static yy_state_type yy_get_previous_state()
	{
d1306 2
d1309 1
a1309 3
	yy_current_state = yy_start;

	for ( yy_cp = yytext_ptr + YY_MORE_ADJ; yy_cp < yy_c_buf_p; ++yy_cp )
d1314 2
a1315 2
			yy_last_accepting_state = yy_current_state;
			yy_last_accepting_cpos = yy_cp;
d1320 1
a1320 1
			if ( yy_current_state >= 197 )
d1327 1
a1327 2
	}

d1334 2
a1335 8

#ifdef YY_USE_PROTOS
static yy_state_type yy_try_NUL_trans( yy_state_type yy_current_state )
#else
static yy_state_type yy_try_NUL_trans( yy_current_state )
yy_state_type yy_current_state;
#endif
	{
d1337 1
a1337 1
	register char *yy_cp = yy_c_buf_p;
d1342 2
a1343 2
		yy_last_accepting_state = yy_current_state;
		yy_last_accepting_cpos = yy_cp;
d1348 1
a1348 1
		if ( yy_current_state >= 197 )
d1352 1
a1352 1
	yy_is_jam = (yy_current_state == 196);
d1355 1
a1355 1
	}
d1357 5
a1361 11

#ifndef YY_NO_UNPUT
#ifdef YY_USE_PROTOS
static void yyunput( int c, register char *yy_bp )
#else
static void yyunput( c, yy_bp )
int c;
register char *yy_bp;
#endif
	{
	register char *yy_cp = yy_c_buf_p;
d1364 1
a1364 1
	*yy_cp = yy_hold_char;
d1366 1
a1366 1
	if ( yy_cp < yy_current_buffer->yy_ch_buf + 2 )
d1369 3
a1371 3
		register int number_to_move = yy_n_chars + 2;
		register char *dest = &yy_current_buffer->yy_ch_buf[
					yy_current_buffer->yy_buf_size + 2];
d1373 1
a1373 1
				&yy_current_buffer->yy_ch_buf[number_to_move];
d1375 1
a1375 1
		while ( source > yy_current_buffer->yy_ch_buf )
d1380 2
a1381 2
		yy_current_buffer->yy_n_chars =
			yy_n_chars = yy_current_buffer->yy_buf_size;
d1383 1
a1383 1
		if ( yy_cp < yy_current_buffer->yy_ch_buf + 2 )
d1389 4
d1394 1
a1394 7
	yytext_ptr = yy_bp;
	yy_hold_char = *yy_cp;
	yy_c_buf_p = yy_cp;
	}
#endif	/* ifndef YY_NO_UNPUT */


d1396 1
a1396 1
static int yyinput()
d1398 1
a1398 1
static int input()
d1400 2
a1401 1
	{
d1403 2
d1406 1
a1406 3
	*yy_c_buf_p = yy_hold_char;

	if ( *yy_c_buf_p == YY_END_OF_BUFFER_CHAR )
d1412 1
a1412 1
		if ( yy_c_buf_p < &yy_current_buffer->yy_ch_buf[yy_n_chars] )
d1414 1
a1414 1
			*yy_c_buf_p = '\0';
d1418 2
a1419 2
			int offset = yy_c_buf_p - yytext_ptr;
			++yy_c_buf_p;
d1421 1
a1421 1
			switch ( yy_get_next_buffer() )
d1435 1
a1435 1
					yyrestart( yyin );
d1437 1
a1437 1
					/* fall through */
d1441 1
a1441 1
					if ( yywrap() )
d1444 1
a1444 1
					if ( ! yy_did_buffer_switch_on_eof )
d1454 1
a1454 1
					yy_c_buf_p = yytext_ptr + offset;
d1460 3
a1462 4
	c = *(unsigned char *) yy_c_buf_p;	/* cast for 8-bit char's */
	*yy_c_buf_p = '\0';	/* preserve yytext */
	yy_hold_char = *++yy_c_buf_p;

d1465 2
a1466 1
	}
d1468 12
a1479 13

#ifdef YY_USE_PROTOS
void yyrestart( FILE *input_file )
#else
void yyrestart( input_file )
FILE *input_file;
#endif
	{
	if ( ! yy_current_buffer )
		yy_current_buffer = yy_create_buffer( yyin, YY_BUF_SIZE );

	yy_init_buffer( yy_current_buffer, input_file );
	yy_load_buffer_state();
d1482 18
a1499 9

#ifdef YY_USE_PROTOS
void yy_switch_to_buffer( YY_BUFFER_STATE new_buffer )
#else
void yy_switch_to_buffer( new_buffer )
YY_BUFFER_STATE new_buffer;
#endif
	{
	if ( yy_current_buffer == new_buffer )
d1502 1
a1502 1
	if ( yy_current_buffer )
d1505 3
a1507 3
		*yy_c_buf_p = yy_hold_char;
		yy_current_buffer->yy_buf_pos = yy_c_buf_p;
		yy_current_buffer->yy_n_chars = yy_n_chars;
d1510 2
a1511 2
	yy_current_buffer = new_buffer;
	yy_load_buffer_state();
d1518 2
a1519 2
	yy_did_buffer_switch_on_eof = 1;
	}
d1521 16
a1536 22

#ifdef YY_USE_PROTOS
void yy_load_buffer_state( void )
#else
void yy_load_buffer_state()
#endif
	{
	yy_n_chars = yy_current_buffer->yy_n_chars;
	yytext_ptr = yy_c_buf_p = yy_current_buffer->yy_buf_pos;
	yyin = yy_current_buffer->yy_input_file;
	yy_hold_char = *yy_c_buf_p;
	}


#ifdef YY_USE_PROTOS
YY_BUFFER_STATE yy_create_buffer( FILE *file, int size )
#else
YY_BUFFER_STATE yy_create_buffer( file, size )
FILE *file;
int size;
#endif
	{
d1538 2
a1539 2

	b = (YY_BUFFER_STATE) yy_flex_alloc( sizeof( struct yy_buffer_state ) );
d1548 1
a1548 1
	b->yy_ch_buf = (char *) yy_flex_alloc( b->yy_buf_size + 2 );
d1554 1
a1554 1
	yy_init_buffer( b, file );
d1557 1
a1557 1
	}
d1559 7
a1565 8

#ifdef YY_USE_PROTOS
void yy_delete_buffer( YY_BUFFER_STATE b )
#else
void yy_delete_buffer( b )
YY_BUFFER_STATE b;
#endif
	{
d1569 2
a1570 2
	if ( b == yy_current_buffer )
		yy_current_buffer = (YY_BUFFER_STATE) 0;
d1573 1
a1573 1
		yy_flex_free( (void *) b->yy_ch_buf );
d1575 2
a1576 2
	yy_flex_free( (void *) b );
	}
d1578 9
d1588 4
a1591 21
#ifndef _WIN32
#include <unistd.h>
#else
#ifndef YY_ALWAYS_INTERACTIVE
#ifndef YY_NEVER_INTERACTIVE
extern int isatty YY_PROTO(( int ));
#endif
#endif
#endif

#ifdef YY_USE_PROTOS
void yy_init_buffer( YY_BUFFER_STATE b, FILE *file )
#else
void yy_init_buffer( b, file )
YY_BUFFER_STATE b;
FILE *file;
#endif


	{
	yy_flush_buffer( b );
d1596 21
a1616 21
#if YY_ALWAYS_INTERACTIVE
	b->yy_is_interactive = 1;
#else
#if YY_NEVER_INTERACTIVE
	b->yy_is_interactive = 0;
#else
	b->yy_is_interactive = file ? (isatty( fileno(file) ) > 0) : 0;
#endif
#endif
	}


#ifdef YY_USE_PROTOS
void yy_flush_buffer( YY_BUFFER_STATE b )
#else
void yy_flush_buffer( b )
YY_BUFFER_STATE b;
#endif

	{
	if ( ! b )
d1633 53
a1685 2
	if ( b == yy_current_buffer )
		yy_load_buffer_state();
d1687 1
d1689 26
d1716 23
a1738 9
#ifndef YY_NO_SCAN_BUFFER
#ifdef YY_USE_PROTOS
YY_BUFFER_STATE yy_scan_buffer( char *base, yy_size_t size )
#else
YY_BUFFER_STATE yy_scan_buffer( base, size )
char *base;
yy_size_t size;
#endif
	{
d1740 1
a1740 1

d1747 1
a1747 1
	b = (YY_BUFFER_STATE) yy_flex_alloc( sizeof( struct yy_buffer_state ) );
d1761 1
a1761 1
	yy_switch_to_buffer( b );
d1764 1
a1764 2
	}
#endif
d1766 23
a1788 27

#ifndef YY_NO_SCAN_STRING
#ifdef YY_USE_PROTOS
YY_BUFFER_STATE yy_scan_string( yyconst char *yy_str )
#else
YY_BUFFER_STATE yy_scan_string( yy_str )
yyconst char *yy_str;
#endif
	{
	int len;
	for ( len = 0; yy_str[len]; ++len )
		;

	return yy_scan_bytes( yy_str, len );
	}
#endif


#ifndef YY_NO_SCAN_BYTES
#ifdef YY_USE_PROTOS
YY_BUFFER_STATE yy_scan_bytes( yyconst char *bytes, int len )
#else
YY_BUFFER_STATE yy_scan_bytes( bytes, len )
yyconst char *bytes;
int len;
#endif
	{
d1793 1
a1793 1

d1796 1
a1796 1
	buf = (char *) yy_flex_alloc( n );
d1805 1
a1805 1
	b = yy_scan_buffer( buf, n );
d1815 1
a1815 2
	}
#endif
d1817 2
a1818 7

#ifndef YY_NO_PUSH_STATE
#ifdef YY_USE_PROTOS
static void yy_push_state( int new_state )
#else
static void yy_push_state( new_state )
int new_state;
a1819 4
	{
	if ( yy_start_stack_ptr >= yy_start_stack_depth )
		{
		yy_size_t new_size;
d1821 5
a1825 2
		yy_start_stack_depth += YY_START_STACK_INCR;
		new_size = yy_start_stack_depth * sizeof( int );
d1827 1
a1827 2
		if ( ! yy_start_stack )
			yy_start_stack = (int *) yy_flex_alloc( new_size );
d1829 14
a1842 3
		else
			yy_start_stack = (int *) yy_flex_realloc(
					(void *) yy_start_stack, new_size );
d1844 1
a1844 4
		if ( ! yy_start_stack )
			YY_FATAL_ERROR(
			"out of memory expanding start-condition stack" );
		}
d1846 8
a1853 1
	yy_start_stack[yy_start_stack_ptr++] = YY_START;
d1855 7
a1861 3
	BEGIN(new_state);
	}
#endif
d1863 7
d1871 7
a1877 5
#ifndef YY_NO_POP_STATE
static void yy_pop_state()
	{
	if ( --yy_start_stack_ptr < 0 )
		YY_FATAL_ERROR( "start-condition stack underflow" );
d1879 3
a1881 3
	BEGIN(yy_start_stack[yy_start_stack_ptr]);
	}
#endif
d1883 4
d1888 20
a1907 6
#ifndef YY_NO_TOP_STATE
static int yy_top_state()
	{
	return yy_start_stack[yy_start_stack_ptr - 1];
	}
#endif
d1909 4
a1912 3
#ifndef YY_EXIT_FAILURE
#define YY_EXIT_FAILURE 2
#endif
d1914 4
a1917 10
#ifdef YY_USE_PROTOS
static void yy_fatal_error( yyconst char msg[] )
#else
static void yy_fatal_error( msg )
char msg[];
#endif
	{
	(void) fprintf( stderr, "%s\n", msg );
	exit( YY_EXIT_FAILURE );
	}
d1919 4
d1924 14
d1939 2
a1940 14
/* Redefine yyless() so it works in section 3 code. */

#undef yyless
#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up yytext. */ \
		yytext[yyleng] = yy_hold_char; \
		yy_c_buf_p = yytext + n; \
		yy_hold_char = *yy_c_buf_p; \
		*yy_c_buf_p = '\0'; \
		yyleng = n; \
		} \
	while ( 0 )
d1942 3
a1944 2

/* Internal utility routines. */
d1947 2
a1948 9
#ifdef YY_USE_PROTOS
static void yy_flex_strncpy( char *s1, yyconst char *s2, int n )
#else
static void yy_flex_strncpy( s1, s2, n )
char *s1;
yyconst char *s2;
int n;
#endif
	{
d1950 1
a1950 1
	for ( i = 0; i < n; ++i )
d1952 1
a1952 1
	}
d1956 2
a1957 7
#ifdef YY_USE_PROTOS
static int yy_flex_strlen( yyconst char *s )
#else
static int yy_flex_strlen( s )
yyconst char *s;
#endif
	{
d1959 1
a1959 1
	for ( n = 0; s[n]; ++n )
d1963 1
a1963 1
	}
d1966 2
a1967 8

#ifdef YY_USE_PROTOS
static void *yy_flex_alloc( yy_size_t size )
#else
static void *yy_flex_alloc( size )
yy_size_t size;
#endif
	{
d1969 1
a1969 1
	}
d1971 2
a1972 8
#ifdef YY_USE_PROTOS
static void *yy_flex_realloc( void *ptr, yy_size_t size )
#else
static void *yy_flex_realloc( ptr, size )
void *ptr;
yy_size_t size;
#endif
	{
d1981 6
a1986 1
	}
d1988 1
a1988 9
#ifdef YY_USE_PROTOS
static void yy_flex_free( void *ptr )
#else
static void yy_flex_free( ptr )
void *ptr;
#endif
	{
	free( ptr );
	}
d1990 11
a2000 6
#if YY_MAIN
int main()
	{
	yylex();
	return 0;
	}
d2004 1
d2007 1
a2007 1
int yywrap(void) { return 1; }
d2009 1
@


