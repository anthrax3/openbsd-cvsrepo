head	1.1;
branch	1.1.1;
access;
symbols
	OPENBSD_6_0:1.1.1.4.0.48
	OPENBSD_6_0_BASE:1.1.1.4
	OPENBSD_5_9:1.1.1.4.0.44
	OPENBSD_5_9_BASE:1.1.1.4
	OPENBSD_5_8:1.1.1.4.0.46
	OPENBSD_5_8_BASE:1.1.1.4
	OPENBSD_5_7:1.1.1.4.0.38
	OPENBSD_5_7_BASE:1.1.1.4
	OPENBSD_5_6:1.1.1.4.0.42
	OPENBSD_5_6_BASE:1.1.1.4
	OPENBSD_5_5:1.1.1.4.0.40
	OPENBSD_5_5_BASE:1.1.1.4
	OPENBSD_5_4:1.1.1.4.0.36
	OPENBSD_5_4_BASE:1.1.1.4
	OPENBSD_5_3:1.1.1.4.0.34
	OPENBSD_5_3_BASE:1.1.1.4
	OPENBSD_5_2:1.1.1.4.0.32
	OPENBSD_5_2_BASE:1.1.1.4
	OPENBSD_5_1_BASE:1.1.1.4
	OPENBSD_5_1:1.1.1.4.0.30
	OPENBSD_5_0:1.1.1.4.0.28
	OPENBSD_5_0_BASE:1.1.1.4
	OPENBSD_4_9:1.1.1.4.0.26
	OPENBSD_4_9_BASE:1.1.1.4
	OPENBSD_4_8:1.1.1.4.0.24
	OPENBSD_4_8_BASE:1.1.1.4
	OPENBSD_4_7:1.1.1.4.0.20
	OPENBSD_4_7_BASE:1.1.1.4
	OPENBSD_4_6:1.1.1.4.0.22
	OPENBSD_4_6_BASE:1.1.1.4
	OPENBSD_4_5:1.1.1.4.0.18
	OPENBSD_4_5_BASE:1.1.1.4
	OPENBSD_4_4:1.1.1.4.0.16
	OPENBSD_4_4_BASE:1.1.1.4
	OPENBSD_4_3:1.1.1.4.0.14
	OPENBSD_4_3_BASE:1.1.1.4
	OPENBSD_4_2:1.1.1.4.0.12
	OPENBSD_4_2_BASE:1.1.1.4
	OPENBSD_4_1:1.1.1.4.0.10
	OPENBSD_4_1_BASE:1.1.1.4
	OPENBSD_4_0:1.1.1.4.0.8
	OPENBSD_4_0_BASE:1.1.1.4
	OPENBSD_3_9:1.1.1.4.0.6
	OPENBSD_3_9_BASE:1.1.1.4
	OPENBSD_3_8:1.1.1.4.0.4
	OPENBSD_3_8_BASE:1.1.1.4
	OPENBSD_3_7:1.1.1.4.0.2
	OPENBSD_3_7_BASE:1.1.1.4
	BINUTILS_2_15:1.1.1.4
	OPENBSD_3_6:1.1.1.3.0.2
	OPENBSD_3_6_BASE:1.1.1.3
	BINUTILS-2_14:1.1.1.3
	OPENBSD_3_5:1.1.1.2.0.8
	OPENBSD_3_5_BASE:1.1.1.2
	OPENBSD_3_4:1.1.1.2.0.6
	OPENBSD_3_4_BASE:1.1.1.2
	OPENBSD_3_3:1.1.1.2.0.4
	OPENBSD_3_3_BASE:1.1.1.2
	OPENBSD_3_2:1.1.1.2.0.2
	OPENBSD_3_2_BASE:1.1.1.2
	binutils-2_11_2:1.1.1.2
	OPENBSD_3_1:1.1.1.1.0.8
	OPENBSD_3_1_BASE:1.1.1.1
	OPENBSD_3_0:1.1.1.1.0.6
	OPENBSD_3_0_BASE:1.1.1.1
	BINUTILS-2_10_1:1.1.1.1
	OPENBSD_2_9:1.1.1.1.0.4
	OPENBSD_2_9_BASE:1.1.1.1
	OPENBSD_2_8:1.1.1.1.0.2
	OPENBSD_2_8_BASE:1.1.1.1
	BINUTILS-2_10:1.1.1.1
	FSF:1.1.1;
locks; strict;
comment	@ * @;


1.1
date	2000.09.12.14.45.08;	author espie;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	2000.09.12.14.45.08;	author espie;	state Exp;
branches;
next	1.1.1.2;

1.1.1.2
date	2002.05.13.13.16.06;	author fgsch;	state Exp;
branches;
next	1.1.1.3;

1.1.1.3
date	2004.05.17.20.42.06;	author drahn;	state Exp;
branches;
next	1.1.1.4;

1.1.1.4
date	2004.11.02.20.22.06;	author miod;	state Exp;
branches;
next	;


desc
@@


1.1
log
@Initial revision
@
text
@
/*  A Bison parser, made from rcparse.y
    by GNU Bison version 1.28  */

#define YYBISON 1  /* Identify Bison output.  */

#define	BEG	257
#define	END	258
#define	ACCELERATORS	259
#define	VIRTKEY	260
#define	ASCII	261
#define	NOINVERT	262
#define	SHIFT	263
#define	CONTROL	264
#define	ALT	265
#define	BITMAP	266
#define	CURSOR	267
#define	DIALOG	268
#define	DIALOGEX	269
#define	EXSTYLE	270
#define	CAPTION	271
#define	CLASS	272
#define	STYLE	273
#define	AUTO3STATE	274
#define	AUTOCHECKBOX	275
#define	AUTORADIOBUTTON	276
#define	CHECKBOX	277
#define	COMBOBOX	278
#define	CTEXT	279
#define	DEFPUSHBUTTON	280
#define	EDITTEXT	281
#define	GROUPBOX	282
#define	LISTBOX	283
#define	LTEXT	284
#define	PUSHBOX	285
#define	PUSHBUTTON	286
#define	RADIOBUTTON	287
#define	RTEXT	288
#define	SCROLLBAR	289
#define	STATE3	290
#define	USERBUTTON	291
#define	BEDIT	292
#define	HEDIT	293
#define	IEDIT	294
#define	FONT	295
#define	ICON	296
#define	LANGUAGE	297
#define	CHARACTERISTICS	298
#define	VERSIONK	299
#define	MENU	300
#define	MENUEX	301
#define	MENUITEM	302
#define	SEPARATOR	303
#define	POPUP	304
#define	CHECKED	305
#define	GRAYED	306
#define	HELP	307
#define	INACTIVE	308
#define	MENUBARBREAK	309
#define	MENUBREAK	310
#define	MESSAGETABLE	311
#define	RCDATA	312
#define	STRINGTABLE	313
#define	VERSIONINFO	314
#define	FILEVERSION	315
#define	PRODUCTVERSION	316
#define	FILEFLAGSMASK	317
#define	FILEFLAGS	318
#define	FILEOS	319
#define	FILETYPE	320
#define	FILESUBTYPE	321
#define	BLOCKSTRINGFILEINFO	322
#define	BLOCKVARFILEINFO	323
#define	VALUE	324
#define	BLOCK	325
#define	MOVEABLE	326
#define	FIXED	327
#define	PURE	328
#define	IMPURE	329
#define	PRELOAD	330
#define	LOADONCALL	331
#define	DISCARDABLE	332
#define	NOT	333
#define	QUOTEDSTRING	334
#define	STRING	335
#define	NUMBER	336
#define	SIZEDSTRING	337
#define	IGNORED_TOKEN	338
#define	NEG	339

#line 1 "rcparse.y"
 /* rcparse.y -- parser for Windows rc files
   Copyright 1997, 1998 Free Software Foundation, Inc.
   Written by Ian Lance Taylor, Cygnus Support.

   This file is part of GNU Binutils.

   This program is free software; you can redistribute it and/or modify
   it under the terms of the GNU General Public License as published by
   the Free Software Foundation; either version 2 of the License, or
   (at your option) any later version.

   This program is distributed in the hope that it will be useful,
   but WITHOUT ANY WARRANTY; without even the implied warranty of
   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
   GNU General Public License for more details.

   You should have received a copy of the GNU General Public License
   along with this program; if not, write to the Free Software
   Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA
   02111-1307, USA.  */

/* This is a parser for Windows rc files.  It is based on the parser
   by Gunther Ebert <gunther.ebert@@ixos-leipzig.de>.  */

#include "bfd.h"
#include "bucomm.h"
#include "libiberty.h"
#include "windres.h"

#include <ctype.h>

/* The current language.  */

static unsigned short language;

/* The resource information during a sub statement.  */

static struct res_res_info sub_res_info;

/* Dialog information.  This is built by the nonterminals styles and
   controls.  */

static struct dialog dialog;

/* This is used when building a style.  It is modified by the
   nonterminal styleexpr.  */

static unsigned long style;

/* These are used when building a control.  They are set before using
   control_params.  */

static unsigned long base_style;
static unsigned long default_style;
static unsigned long class;


#line 59 "rcparse.y"
typedef union
{
  struct accelerator acc;
  struct accelerator *pacc;
  struct dialog_control *dialog_control;
  struct menuitem *menuitem;
  struct
  {
    struct rcdata_item *first;
    struct rcdata_item *last;
  } rcdata;
  struct rcdata_item *rcdata_item;
  struct stringtable_data *stringtable;
  struct fixed_versioninfo *fixver;
  struct ver_info *verinfo;
  struct ver_stringinfo *verstring;
  struct ver_varinfo *vervar;
  struct res_id id;
  struct res_res_info res_info;
  struct
  {
    unsigned short on;
    unsigned short off;
  } memflags;
  struct
  {
    unsigned long val;
    /* Nonzero if this number was explicitly specified as long.  */
    int dword;
  } i;
  unsigned long il;
  unsigned short is;
  const char *s;
  struct
  {
    unsigned long length;
    const char *s;
  } ss;
} YYSTYPE;
#include <stdio.h>

#ifndef __cplusplus
#ifndef __STDC__
#define const
#endif
#endif



#define	YYFINAL		475
#define	YYFLAG		-32768
#define	YYNTBASE	99

#define YYTRANSLATE(x) ((unsigned)(x) <= 339 ? yytranslate[x] : 189)

static const char yytranslate[] = {     0,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,    92,    87,     2,    97,
    98,    90,    88,    95,    89,     2,    91,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
    96,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,    86,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,    85,     2,    93,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     1,     3,     4,     5,     6,
     7,     8,     9,    10,    11,    12,    13,    14,    15,    16,
    17,    18,    19,    20,    21,    22,    23,    24,    25,    26,
    27,    28,    29,    30,    31,    32,    33,    34,    35,    36,
    37,    38,    39,    40,    41,    42,    43,    44,    45,    46,
    47,    48,    49,    50,    51,    52,    53,    54,    55,    56,
    57,    58,    59,    60,    61,    62,    63,    64,    65,    66,
    67,    68,    69,    70,    71,    72,    73,    74,    75,    76,
    77,    78,    79,    80,    81,    82,    83,    84,    94
};

#if YYDEBUG != 0
static const short yyprhs[] = {     0,
     0,     1,     5,     9,    13,    17,    21,    25,    29,    33,
    37,    41,    45,    49,    53,    57,    61,    62,    69,    70,
    73,    76,    81,    83,    85,    87,    91,    94,    96,    98,
   100,   102,   104,   106,   111,   116,   117,   131,   132,   146,
   147,   162,   163,   167,   168,   172,   176,   177,   182,   186,
   192,   200,   204,   208,   213,   217,   218,   221,   222,   226,
   227,   231,   232,   236,   237,   241,   242,   246,   247,   251,
   263,   276,   289,   303,   304,   308,   309,   313,   314,   318,
   319,   323,   324,   328,   335,   346,   358,   359,   363,   364,
   368,   369,   373,   374,   378,   379,   383,   384,   388,   389,
   393,   394,   398,   399,   403,   404,   421,   429,   439,   450,
   451,   454,   455,   459,   460,   464,   465,   469,   470,   474,
   479,   484,   488,   495,   496,   499,   504,   507,   514,   515,
   519,   522,   524,   526,   528,   530,   532,   534,   541,   542,
   545,   548,   552,   558,   561,   567,   574,   582,   592,   597,
   604,   605,   608,   609,   611,   613,   615,   619,   623,   624,
   631,   632,   636,   641,   648,   653,   660,   661,   668,   675,
   679,   683,   687,   691,   695,   696,   705,   713,   714,   720,
   721,   725,   727,   729,   730,   733,   737,   742,   746,   747,
   750,   751,   754,   756,   758,   760,   762,   764,   766,   768,
   770,   772,   774,   777,   781,   786,   788,   792,   793,   795,
   798,   800,   802,   806,   809,   812,   816,   820,   824,   828,
   832,   836,   840,   844,   847,   849,   851,   855,   858,   862,
   866,   870,   874,   878,   882,   886
};

static const short yyrhs[] = {    -1,
    99,   100,   101,     0,    99,   100,   107,     0,    99,   100,
   108,     0,    99,   100,   109,     0,    99,   100,   148,     0,
    99,   100,   149,     0,    99,   100,   150,     0,    99,   100,
   151,     0,    99,   100,   156,     0,    99,   100,   159,     0,
    99,   100,   160,     0,    99,   100,   165,     0,    99,   100,
   168,     0,    99,   100,   169,     0,    99,   100,    84,     0,
     0,   174,     5,   175,     3,   102,     4,     0,     0,   102,
   103,     0,   104,   186,     0,   104,   186,    95,   105,     0,
    80,     0,   187,     0,   106,     0,   105,    95,   106,     0,
   105,   106,     0,     6,     0,     7,     0,     8,     0,     9,
     0,    10,     0,    11,     0,   174,    12,   177,   179,     0,
   174,    13,   176,   179,     0,     0,   174,    14,   177,   113,
   187,   183,   183,   183,   110,   114,     3,   116,     4,     0,
     0,   174,    15,   177,   113,   187,   183,   183,   183,   111,
   114,     3,   116,     4,     0,     0,   174,    15,   177,   113,
   187,   183,   183,   183,   183,   112,   114,     3,   116,     4,
     0,     0,    16,    96,   184,     0,     0,   114,    17,    80,
     0,   114,    18,   174,     0,     0,   114,    19,   115,   180,
     0,   114,    16,   184,     0,   114,    41,   184,    95,    80,
     0,   114,    41,   184,    95,    80,   183,   183,     0,   114,
    46,   174,     0,   114,    44,   184,     0,   114,    43,   184,
   183,     0,   114,    45,   184,     0,     0,   116,   117,     0,
     0,    20,   118,   139,     0,     0,    21,   119,   139,     0,
     0,    22,   120,   139,     0,     0,    38,   121,   139,     0,
     0,    23,   122,   139,     0,     0,    24,   123,   139,     0,
    10,   140,   184,   183,   142,   183,   183,   183,   183,   182,
   141,     0,    10,   140,   184,   183,   142,   183,   183,   183,
   183,   183,   183,   141,     0,    10,   140,   184,    95,    80,
   142,   183,   183,   183,   183,   182,   141,     0,    10,   140,
   184,    95,    80,   142,   183,   183,   183,   183,   183,   183,
   141,     0,     0,    25,   124,   139,     0,     0,    26,   125,
   139,     0,     0,    27,   126,   139,     0,     0,    28,   127,
   139,     0,     0,    39,   128,   139,     0,    42,   140,   184,
   183,   183,   141,     0,    42,   140,   184,   183,   183,   183,
   183,   144,   182,   141,     0,    42,   140,   184,   183,   183,
   183,   183,   144,   183,   183,   141,     0,     0,    40,   129,
   139,     0,     0,    29,   130,   139,     0,     0,    30,   131,
   139,     0,     0,    31,   132,   139,     0,     0,    32,   133,
   139,     0,     0,    33,   134,   139,     0,     0,    34,   135,
   139,     0,     0,    35,   136,   139,     0,     0,    36,   137,
   139,     0,     0,    37,    80,    95,   184,    95,   184,    95,
   184,    95,   184,    95,   184,    95,   138,   180,   182,     0,
   140,   184,   183,   183,   183,   183,   141,     0,   140,   184,
   183,   183,   183,   183,   146,   182,   141,     0,   140,   184,
   183,   183,   183,   183,   146,   183,   183,   141,     0,     0,
    80,    95,     0,     0,     3,   161,     4,     0,     0,    95,
   143,   180,     0,     0,    95,   145,   180,     0,     0,    95,
   147,   180,     0,   174,    41,   176,   179,     0,   174,    42,
   176,   179,     0,    43,   184,   183,     0,   174,    46,   175,
     3,   152,     4,     0,     0,   152,   153,     0,    48,    80,
   183,   154,     0,    48,    49,     0,    50,    80,   154,     3,
   152,     4,     0,     0,   154,    95,   155,     0,   154,   155,
     0,    51,     0,    52,     0,    53,     0,    54,     0,    55,
     0,    56,     0,   174,    47,   175,     3,   157,     4,     0,
     0,   157,   158,     0,    48,    80,     0,    48,    80,   183,
     0,    48,    80,   183,   183,   182,     0,    48,    49,     0,
    50,    80,     3,   157,     4,     0,    50,    80,   183,     3,
   157,     4,     0,    50,    80,   183,   183,     3,   157,     4,
     0,    50,    80,   183,   183,   183,   182,     3,   157,     4,
     0,   174,    57,   177,   179,     0,   174,    58,   175,     3,
   161,     4,     0,     0,   162,   163,     0,     0,   164,     0,
    83,     0,   185,     0,   164,    95,    83,     0,   164,    95,
   185,     0,     0,    59,   175,     3,   166,   167,     4,     0,
     0,   167,   184,    80,     0,   167,   184,    95,    80,     0,
   174,   174,   175,     3,   161,     4,     0,   174,   174,   175,
   179,     0,   174,    60,   170,     3,   171,     4,     0,     0,
   170,    61,   184,   183,   183,   183,     0,   170,    62,   184,
   183,   183,   183,     0,   170,    63,   184,     0,   170,    64,
   184,     0,   170,    65,   184,     0,   170,    66,   184,     0,
   170,    67,   184,     0,     0,   171,    68,     3,    71,     3,
   172,     4,     4,     0,   171,    69,     3,    70,    80,   173,
     4,     0,     0,   172,    70,    80,    95,    80,     0,     0,
   173,   183,   183,     0,   187,     0,    81,     0,     0,   175,
   178,     0,   175,    44,   184,     0,   175,    43,   184,   183,
     0,   175,    45,   184,     0,     0,   176,   178,     0,     0,
   177,   178,     0,    72,     0,    73,     0,    74,     0,    75,
     0,    76,     0,    77,     0,    78,     0,    80,     0,    81,
     0,   181,     0,    79,   181,     0,   180,    85,   181,     0,
   180,    85,    79,   181,     0,    82,     0,    97,   184,    98,
     0,     0,   183,     0,    95,   184,     0,   185,     0,    82,
     0,    97,   185,    98,     0,    93,   185,     0,    89,   185,
     0,   185,    90,   185,     0,   185,    91,   185,     0,   185,
    92,   185,     0,   185,    88,   185,     0,   185,    89,   185,
     0,   185,    87,   185,     0,   185,    86,   185,     0,   185,
    85,   185,     0,    95,   187,     0,   188,     0,    82,     0,
    97,   185,    98,     0,    93,   185,     0,   188,    90,   185,
     0,   188,    91,   185,     0,   188,    92,   185,     0,   188,
    88,   185,     0,   188,    89,   185,     0,   188,    87,   185,
     0,   188,    86,   185,     0,   188,    85,   185,     0
};

#endif

#if YYDEBUG != 0
static const short yyrline[] = { 0,
   155,   157,   158,   159,   160,   161,   162,   163,   164,   165,
   166,   167,   168,   169,   170,   171,   174,   183,   190,   195,
   215,   221,   232,   254,   263,   268,   273,   279,   284,   289,
   293,   297,   301,   309,   318,   327,   345,   349,   368,   372,
   392,   398,   403,   409,   411,   415,   419,   422,   425,   429,
   435,   448,   452,   456,   460,   466,   468,   478,   486,   489,
   496,   499,   506,   509,   516,   522,   529,   532,   539,   542,
   553,   562,   575,   586,   593,   596,   603,   606,   613,   616,
   623,   626,   633,   639,   650,   662,   672,   679,   685,   692,
   695,   702,   705,   712,   715,   722,   725,   732,   735,   742,
   745,   752,   755,   762,   765,   768,   782,   795,   806,   817,
   822,   828,   833,   841,   845,   847,   851,   853,   857,   861,
   870,   880,   889,   896,   901,   917,   922,   926,   932,   937,
   941,   947,   952,   956,   960,   964,   968,   976,   983,   988,
  1004,  1009,  1013,  1017,  1021,  1025,  1029,  1033,  1042,  1051,
  1061,  1066,  1072,  1078,  1084,  1093,  1101,  1110,  1123,  1126,
  1129,  1131,  1135,  1144,  1149,  1157,  1164,  1171,  1177,  1183,
  1188,  1193,  1198,  1203,  1216,  1221,  1225,  1231,  1236,  1242,
  1247,  1255,  1261,  1278,  1286,  1292,  1297,  1302,  1311,  1318,
  1328,  1335,  1346,  1352,  1357,  1362,  1367,  1372,  1377,  1386,
  1391,  1407,  1412,  1416,  1420,  1426,  1431,  1439,  1444,  1452,
  1461,  1470,  1475,  1479,  1484,  1489,  1494,  1499,  1504,  1509,
  1514,  1519,  1524,  1534,  1543,  1554,  1559,  1563,  1568,  1573,
  1578,  1583,  1588,  1593,  1598,  1603
};
#endif


#if YYDEBUG != 0 || defined (YYERROR_VERBOSE)

static const char * const yytname[] = {   "$","error","$undefined.","BEG","END",
"ACCELERATORS","VIRTKEY","ASCII","NOINVERT","SHIFT","CONTROL","ALT","BITMAP",
"CURSOR","DIALOG","DIALOGEX","EXSTYLE","CAPTION","CLASS","STYLE","AUTO3STATE",
"AUTOCHECKBOX","AUTORADIOBUTTON","CHECKBOX","COMBOBOX","CTEXT","DEFPUSHBUTTON",
"EDITTEXT","GROUPBOX","LISTBOX","LTEXT","PUSHBOX","PUSHBUTTON","RADIOBUTTON",
"RTEXT","SCROLLBAR","STATE3","USERBUTTON","BEDIT","HEDIT","IEDIT","FONT","ICON",
"LANGUAGE","CHARACTERISTICS","VERSIONK","MENU","MENUEX","MENUITEM","SEPARATOR",
"POPUP","CHECKED","GRAYED","HELP","INACTIVE","MENUBARBREAK","MENUBREAK","MESSAGETABLE",
"RCDATA","STRINGTABLE","VERSIONINFO","FILEVERSION","PRODUCTVERSION","FILEFLAGSMASK",
"FILEFLAGS","FILEOS","FILETYPE","FILESUBTYPE","BLOCKSTRINGFILEINFO","BLOCKVARFILEINFO",
"VALUE","BLOCK","MOVEABLE","FIXED","PURE","IMPURE","PRELOAD","LOADONCALL","DISCARDABLE",
"NOT","QUOTEDSTRING","STRING","NUMBER","SIZEDSTRING","IGNORED_TOKEN","'|'","'^'",
"'&'","'+'","'-'","'*'","'/'","'%'","'~'","NEG","','","'='","'('","')'","input",
"newcmd","accelerator","acc_entries","acc_entry","acc_event","acc_options","acc_option",
"bitmap","cursor","dialog","@@1","@@2","@@3","exstyle","styles","@@4","controls",
"control","@@5","@@6","@@7","@@8","@@9","@@10","@@11","@@12","@@13","@@14","@@15","@@16",
"@@17","@@18","@@19","@@20","@@21","@@22","@@23","@@24","@@25","control_params","optstringc",
"opt_control_data","control_styleexpr","@@26","icon_styleexpr","@@27","control_params_styleexpr",
"@@28","font","icon","language","menu","menuitems","menuitem","menuitem_flags",
"menuitem_flag","menuex","menuexitems","menuexitem","messagetable","rcdata",
"optrcdata_data","@@29","optrcdata_data_int","rcdata_data","stringtable","@@30",
"string_data","user","versioninfo","fixedverinfo","verblocks","vervals","vertrans",
"id","suboptions","memflags_move_discard","memflags_move","memflag","file_name",
"styleexpr","parennumber","optcnumexpr","cnumexpr","numexpr","sizednumexpr",
"cposnumexpr","posnumexpr","sizedposnumexpr", NULL
};
#endif

static const short yyr1[] = {     0,
    99,    99,    99,    99,    99,    99,    99,    99,    99,    99,
    99,    99,    99,    99,    99,    99,   100,   101,   102,   102,
   103,   103,   104,   104,   105,   105,   105,   106,   106,   106,
   106,   106,   106,   107,   108,   110,   109,   111,   109,   112,
   109,   113,   113,   114,   114,   114,   115,   114,   114,   114,
   114,   114,   114,   114,   114,   116,   116,   118,   117,   119,
   117,   120,   117,   121,   117,   122,   117,   123,   117,   117,
   117,   117,   117,   124,   117,   125,   117,   126,   117,   127,
   117,   128,   117,   117,   117,   117,   129,   117,   130,   117,
   131,   117,   132,   117,   133,   117,   134,   117,   135,   117,
   136,   117,   137,   117,   138,   117,   139,   139,   139,   140,
   140,   141,   141,   143,   142,   145,   144,   147,   146,   148,
   149,   150,   151,   152,   152,   153,   153,   153,   154,   154,
   154,   155,   155,   155,   155,   155,   155,   156,   157,   157,
   158,   158,   158,   158,   158,   158,   158,   158,   159,   160,
   162,   161,   163,   163,   164,   164,   164,   164,   166,   165,
   167,   167,   167,   168,   168,   169,   170,   170,   170,   170,
   170,   170,   170,   170,   171,   171,   171,   172,   172,   173,
   173,   174,   174,   175,   175,   175,   175,   175,   176,   176,
   177,   177,   178,   178,   178,   178,   178,   178,   178,   179,
   179,   180,   180,   180,   180,   181,   181,   182,   182,   183,
   184,   185,   185,   185,   185,   185,   185,   185,   185,   185,
   185,   185,   185,   186,   187,   188,   188,   188,   188,   188,
   188,   188,   188,   188,   188,   188
};

static const short yyr2[] = {     0,
     0,     3,     3,     3,     3,     3,     3,     3,     3,     3,
     3,     3,     3,     3,     3,     3,     0,     6,     0,     2,
     2,     4,     1,     1,     1,     3,     2,     1,     1,     1,
     1,     1,     1,     4,     4,     0,    13,     0,    13,     0,
    14,     0,     3,     0,     3,     3,     0,     4,     3,     5,
     7,     3,     3,     4,     3,     0,     2,     0,     3,     0,
     3,     0,     3,     0,     3,     0,     3,     0,     3,    11,
    12,    12,    13,     0,     3,     0,     3,     0,     3,     0,
     3,     0,     3,     6,    10,    11,     0,     3,     0,     3,
     0,     3,     0,     3,     0,     3,     0,     3,     0,     3,
     0,     3,     0,     3,     0,    16,     7,     9,    10,     0,
     2,     0,     3,     0,     3,     0,     3,     0,     3,     4,
     4,     3,     6,     0,     2,     4,     2,     6,     0,     3,
     2,     1,     1,     1,     1,     1,     1,     6,     0,     2,
     2,     3,     5,     2,     5,     6,     7,     9,     4,     6,
     0,     2,     0,     1,     1,     1,     3,     3,     0,     6,
     0,     3,     4,     6,     4,     6,     0,     6,     6,     3,
     3,     3,     3,     3,     0,     8,     7,     0,     5,     0,
     3,     1,     1,     0,     2,     3,     4,     3,     0,     2,
     0,     2,     1,     1,     1,     1,     1,     1,     1,     1,
     1,     1,     2,     3,     4,     1,     3,     0,     1,     2,
     1,     1,     3,     2,     2,     3,     3,     3,     3,     3,
     3,     3,     3,     2,     1,     1,     3,     2,     3,     3,
     3,     3,     3,     3,     3,     3
};

static const short yydefact[] = {     1,
    17,     0,     0,   184,   183,   226,    16,     0,     0,     2,
     3,     4,     5,     6,     7,     8,     9,    10,    11,    12,
    13,    14,    15,     0,   182,   225,   212,     0,     0,     0,
     0,   211,     0,   228,     0,   184,   191,   189,   191,   191,
   189,   189,   184,   184,   191,   184,   167,   184,     0,     0,
     0,     0,     0,     0,     0,     0,   215,   214,     0,     0,
   122,     0,     0,     0,     0,     0,     0,     0,     0,   159,
     0,     0,     0,   193,   194,   195,   196,   197,   198,   199,
   185,   227,     0,     0,     0,    42,    42,     0,     0,     0,
     0,     0,     0,     0,     0,   236,   235,   234,   232,   233,
   229,   230,   231,   213,   210,   223,   222,   221,   219,   220,
   216,   217,   218,   161,     0,   186,   188,    19,   200,   201,
   192,    34,   190,    35,     0,     0,     0,   120,   121,   124,
   139,   149,   151,   175,     0,     0,     0,     0,     0,     0,
     0,   151,   165,     0,   187,     0,     0,     0,     0,     0,
     0,     0,   153,     0,     0,     0,   170,   171,   172,   173,
   174,     0,   160,     0,    18,    23,    20,     0,    24,    43,
     0,     0,   123,     0,     0,   125,   138,     0,     0,   140,
   150,   155,   152,   154,   156,   166,     0,     0,     0,     0,
   164,   162,     0,     0,    21,     0,     0,   127,     0,   129,
   144,   141,     0,     0,     0,     0,     0,     0,   163,   224,
     0,    36,    38,   129,     0,   142,   139,     0,   157,   158,
     0,     0,   168,   169,    28,    29,    30,    31,    32,    33,
    22,    25,    44,    44,    40,   126,   124,   132,   133,   134,
   135,   136,   137,     0,   131,   208,     0,   139,     0,   178,
   180,     0,    27,     0,     0,    44,     0,   130,   143,   209,
   145,     0,   139,   208,     0,     0,    26,    56,     0,     0,
     0,    47,     0,     0,     0,     0,     0,    56,     0,   128,
   146,     0,     0,     0,     0,   177,     0,     0,    49,    45,
    46,     0,     0,     0,    53,    55,    52,     0,    56,   147,
   139,   176,     0,   181,    37,   110,    58,    60,    62,    66,
    68,    74,    76,    78,    80,    89,    91,    93,    95,    97,
    99,   101,   103,     0,    64,    82,    87,   110,    57,     0,
   206,     0,    48,   202,     0,    54,    39,     0,     0,     0,
     0,     0,   110,   110,   110,   110,   110,   110,   110,   110,
   110,   110,   110,   110,   110,   110,   110,   110,   110,     0,
   110,   110,   110,     0,   203,     0,     0,    50,    41,   148,
   179,   111,     0,    59,     0,    61,    63,    67,    69,    75,
    77,    79,    81,    90,    92,    94,    96,    98,   100,   102,
   104,     0,    65,    83,    88,     0,   207,     0,   204,     0,
     0,     0,     0,     0,     0,   205,    51,     0,   114,     0,
     0,     0,   112,     0,     0,     0,     0,     0,   151,    84,
     0,     0,   115,     0,     0,     0,     0,     0,     0,     0,
   112,     0,   113,   116,   208,     0,   208,   118,   107,   208,
     0,     0,   112,   209,   208,   112,   209,     0,   112,   209,
     0,   117,    85,   112,   112,   209,    70,   112,   119,   108,
   112,     0,    86,    72,   112,    71,   109,     0,    73,   105,
     0,   208,   106,     0,     0
};

static const short yydefgoto[] = {     1,
     2,    10,   146,   167,   168,   231,   232,    11,    12,    13,
   233,   234,   256,   126,   254,   292,   288,   329,   343,   344,
   345,   361,   346,   347,   348,   349,   350,   351,   362,   363,
   352,   353,   354,   355,   356,   357,   358,   359,   471,   374,
   375,   420,   410,   415,   435,   442,   440,   448,    14,    15,
    16,    17,   150,   176,   215,   245,    18,   151,   180,    19,
    20,   152,   153,   183,   184,    21,   114,   144,    22,    23,
    94,   154,   265,   266,    24,    33,    85,    84,    81,   122,
   333,   334,   259,   260,   105,    32,   195,    25,    26
};

static const short yypact[] = {-32768,
    39,   284,   231,-32768,-32768,-32768,-32768,   231,   231,-32768,
-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,
-32768,-32768,-32768,   233,-32768,   601,-32768,   231,   231,   231,
   -60,   609,    35,-32768,   314,-32768,-32768,-32768,-32768,-32768,
-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,   231,   231,
   231,   231,   231,   231,   231,   231,-32768,-32768,   577,   231,
-32768,   231,   231,   231,   231,   231,   231,   231,   231,-32768,
   231,   231,   231,-32768,-32768,-32768,-32768,-32768,-32768,-32768,
-32768,-32768,   209,   604,   604,   234,   234,   604,   604,   259,
   273,   604,   319,   169,   113,   616,   152,   386,   -33,   -33,
-32768,-32768,-32768,-32768,-32768,   616,   152,   386,   -33,   -33,
-32768,-32768,-32768,-32768,   -60,-32768,-32768,-32768,-32768,-32768,
-32768,-32768,-32768,-32768,    -1,    99,    99,-32768,-32768,-32768,
-32768,-32768,-32768,-32768,   231,   231,   231,   231,   231,   231,
   231,-32768,-32768,     0,-32768,     1,   231,   -60,   -60,    92,
    95,   110,   337,    52,   -60,   -60,-32768,-32768,-32768,-32768,
-32768,   124,-32768,    59,-32768,-32768,-32768,    32,-32768,-32768,
   -60,   -60,-32768,   -36,    51,-32768,-32768,    42,    68,-32768,
-32768,-32768,-32768,    54,   609,-32768,   150,   161,   -60,   -60,
-32768,-32768,    75,    99,    66,   -60,   -60,-32768,   -60,-32768,
-32768,   -60,     5,   527,   107,   136,   -60,   -60,-32768,-32768,
   703,-32768,   -60,-32768,    20,   -60,-32768,     6,-32768,   609,
   212,   137,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,
    23,-32768,-32768,-32768,-32768,   303,-32768,-32768,-32768,-32768,
-32768,-32768,-32768,   664,-32768,   -60,   102,-32768,     7,-32768,
-32768,   703,-32768,   446,   454,-32768,   115,-32768,-32768,-32768,
-32768,   120,-32768,   -60,    15,    10,-32768,-32768,   231,   141,
   123,-32768,   231,   231,   231,   231,   123,-32768,   463,-32768,
-32768,   121,   219,   221,   143,-32768,   -60,   492,-32768,-32768,
-32768,   -57,   131,   -60,-32768,-32768,-32768,   529,-32768,-32768,
-32768,-32768,   133,-32768,-32768,   157,-32768,-32768,-32768,-32768,
-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,
-32768,-32768,-32768,   177,-32768,-32768,-32768,   157,-32768,    65,
-32768,   231,   171,-32768,   184,-32768,-32768,   566,   125,   185,
   172,   231,   157,   157,   157,   157,   157,   157,   157,   157,
   157,   157,   157,   157,   157,   157,   157,   157,   157,   173,
   157,   157,   157,   231,-32768,   190,    98,   -60,-32768,-32768,
-32768,-32768,   174,-32768,   231,-32768,-32768,-32768,-32768,-32768,
-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,
-32768,   231,-32768,-32768,-32768,   -60,-32768,    65,-32768,   -60,
   289,   194,   -60,   197,   -60,-32768,-32768,   194,-32768,   -60,
   -60,   231,     8,   -60,   -57,   -60,   -60,   199,-32768,-32768,
   -60,   -60,   171,   -60,   -60,   231,   291,   201,   -60,   -60,
     9,   202,-32768,-32768,   -60,   -60,   -60,-32768,-32768,   -60,
   231,   -57,   296,   -60,   -60,   296,   -60,   -57,   296,   -60,
   205,   171,-32768,   296,   296,   -60,-32768,   296,   171,-32768,
   296,   231,-32768,-32768,   296,-32768,-32768,   206,-32768,-32768,
   -57,   114,-32768,   321,-32768
};

static const short yypgoto[] = {-32768,
-32768,-32768,-32768,-32768,-32768,-32768,  -211,-32768,-32768,-32768,
-32768,-32768,-32768,   232,  -219,-32768,  -254,-32768,-32768,-32768,
-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,
-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,   298,
  -285,   176,   -85,-32768,-32768,-32768,-32768,-32768,-32768,-32768,
-32768,-32768,    88,-32768,   126,    94,-32768,  -171,-32768,-32768,
-32768,  -141,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,
-32768,-32768,-32768,-32768,   -22,   215,    46,   158,   493,   452,
  -325,  -312,  -261,    11,    -3,    -2,-32768,  -110,-32768
};


#define	YYLAST		720


static const short yytable[] = {    31,
   162,    48,   283,   163,   165,    34,    35,   217,   248,   263,
   419,   419,   198,   286,   255,   148,   149,   365,   284,   253,
   342,   330,   237,   298,   331,    57,    58,    59,   225,   226,
   227,   228,   229,   230,    60,   169,   279,    70,   474,   332,
   267,    61,   364,   199,   338,   247,    96,    97,    98,    99,
   100,   101,   102,   103,   399,   186,    67,    68,    69,   106,
   107,   108,   109,   110,   111,   112,   113,   115,   116,   117,
   238,   239,   240,   241,   242,   243,   262,    71,    72,    73,
   166,    27,     6,   210,   285,   406,    88,    89,    28,   423,
   201,   282,    29,     8,   147,   173,    30,     9,   177,    60,
    60,    60,    60,   438,    60,   261,    74,    75,    76,    77,
    78,    79,    80,   181,   244,   142,   452,   252,   280,   187,
   188,   202,   459,   281,   300,   145,   194,   191,   370,   339,
   200,   155,   156,   157,   158,   159,   160,   161,   192,   174,
   164,   175,   178,   170,   179,   472,   331,   203,   204,   178,
   185,   179,   205,   193,   209,    71,    72,    73,   171,   172,
   211,   332,   174,   206,   175,   189,   190,   178,   178,   179,
   179,   134,   178,   443,   179,   446,   398,   221,   449,   331,
     6,   196,   197,   455,    74,    75,    76,    77,    78,    79,
    80,     8,   119,   120,   332,     9,    86,    87,   367,   207,
   208,   220,    92,     5,     6,   222,   212,   213,    60,   214,
   473,   118,   216,   218,   250,     8,   251,   223,   224,     9,
   290,   301,   303,   235,   302,   335,   246,   340,   249,   135,
   136,   137,   138,   139,   140,   141,   341,    36,    64,    65,
    66,    67,    68,    69,    37,    38,    39,    40,   291,   125,
    83,    71,    72,    73,   297,   367,   360,    90,    91,   264,
    93,   130,    95,   368,   371,   289,   372,   392,   401,   293,
   294,   295,   296,    41,    42,   131,   287,   427,    43,    44,
    74,    75,    76,    77,    78,    79,    80,   397,   409,    45,
    46,   412,    47,   426,   433,   434,   441,   304,   419,   462,
   470,    71,    72,    73,   336,    74,    75,    76,    77,    78,
    79,    80,    27,     5,     6,    71,    72,    73,   127,    28,
   475,   133,   414,    29,   257,     8,     3,    30,   366,     9,
    74,    75,    76,    77,    78,    79,    80,   258,   373,   236,
     0,     0,     4,     0,    74,    75,    76,    77,    78,    79,
    80,     0,     0,   238,   239,   240,   241,   242,   243,     0,
   396,    71,    72,    73,     5,     6,     0,     7,   408,     0,
    27,   403,     0,     0,     0,     0,     8,    28,   400,     0,
     9,    29,     0,   402,     0,    30,     0,     0,   404,     0,
    74,    75,    76,    77,    78,    79,    80,   244,    62,    63,
    64,    65,    66,    67,    68,    69,   405,     0,   418,     0,
   407,    82,     0,   411,     0,   413,     0,     0,    27,   182,
   416,   417,   432,   421,   422,    28,   424,   425,     0,    29,
     0,   428,   429,    30,   430,   431,     0,   451,     0,   436,
   437,     0,     0,     0,     0,   444,   445,   447,   268,     0,
   450,     0,     0,     0,   454,   456,   278,   458,   468,     0,
   461,   269,   270,   271,   272,   299,   465,     0,     0,   269,
   270,   271,   272,    65,    66,    67,    68,    69,   269,   270,
   271,   272,     0,     0,     0,     0,   273,     0,   274,   275,
   276,   277,     0,     0,   273,   305,   274,   275,   276,   277,
     0,   306,     0,   273,     0,   274,   275,   276,   277,     0,
     0,   307,   308,   309,   310,   311,   312,   313,   314,   315,
   316,   317,   318,   319,   320,   321,   322,   323,   324,   325,
   326,   327,   337,   328,     0,     0,   124,     0,   306,   128,
   129,     0,     0,   132,     0,     0,   143,     0,   307,   308,
   309,   310,   311,   312,   313,   314,   315,   316,   317,   318,
   319,   320,   321,   322,   323,   324,   325,   326,   327,   369,
   328,     0,     0,     0,     0,   306,   121,   123,   121,   121,
   123,   123,     0,     0,   121,   307,   308,   309,   310,   311,
   312,   313,   314,   315,   316,   317,   318,   319,   320,   321,
   322,   323,   324,   325,   326,   327,   439,   328,    27,   219,
     0,     0,     0,     0,     0,    28,     0,     0,   453,    29,
     0,   457,     0,    30,   460,     0,     0,     0,     0,   463,
   464,     0,     0,   466,     0,     0,   467,     0,     0,     0,
   469,   376,   377,   378,   379,   380,   381,   382,   383,   384,
   385,   386,   387,   388,   389,   390,   391,     0,   393,   394,
   395,    62,    63,    64,    65,    66,    67,    68,    69,     0,
     0,     0,     0,     0,   104,    74,    75,    76,    77,    78,
    79,    80,     0,   119,   120,    49,    50,    51,    52,    53,
    54,    55,    56,    62,    63,    64,    65,    66,    67,    68,
    69,    63,    64,    65,    66,    67,    68,    69,   225,   226,
   227,   228,   229,   230,   238,   239,   240,   241,   242,   243
};

static const short yycheck[] = {     3,
   142,    24,   264,     4,     4,     8,     9,     3,     3,     3,
     3,     3,    49,     4,   234,   126,   127,   330,     4,   231,
   306,    79,     3,   278,    82,    28,    29,    30,     6,     7,
     8,     9,    10,    11,    95,   146,   256,     3,     0,    97,
   252,    31,   328,    80,   299,   217,    49,    50,    51,    52,
    53,    54,    55,    56,   367,     4,    90,    91,    92,    62,
    63,    64,    65,    66,    67,    68,    69,    71,    72,    73,
    51,    52,    53,    54,    55,    56,   248,    43,    44,    45,
    80,    82,    82,   194,    70,   398,    41,    42,    89,   415,
    49,   263,    93,    93,    96,     4,    97,    97,     4,    95,
    95,    95,    95,    95,    95,     4,    72,    73,    74,    75,
    76,    77,    78,     4,    95,     3,   442,    95,     4,    68,
    69,    80,   448,     4,     4,   115,    95,     4,     4,   301,
    80,   135,   136,   137,   138,   139,   140,   141,    80,    48,
   144,    50,    48,   147,    50,   471,    82,    80,    95,    48,
   153,    50,     3,    95,    80,    43,    44,    45,   148,   149,
    95,    97,    48,     3,    50,   155,   156,    48,    48,    50,
    50,     3,    48,   435,    50,   437,    79,    71,   440,    82,
    82,   171,   172,   445,    72,    73,    74,    75,    76,    77,
    78,    93,    80,    81,    97,    97,    39,    40,    85,   189,
   190,   204,    45,    81,    82,    70,   196,   197,    95,   199,
   472,     3,   202,   203,     3,    93,    80,   207,   208,    97,
    80,     3,    80,   213,     4,    95,   216,    95,   218,    61,
    62,    63,    64,    65,    66,    67,    80,     5,    87,    88,
    89,    90,    91,    92,    12,    13,    14,    15,   271,    16,
    36,    43,    44,    45,   277,    85,    80,    43,    44,   249,
    46,     3,    48,    80,    80,   269,    95,    95,    95,   273,
   274,   275,   276,    41,    42,     3,   266,   419,    46,    47,
    72,    73,    74,    75,    76,    77,    78,    98,    95,    57,
    58,    95,    60,    95,     4,    95,    95,   287,     3,    95,
    95,    43,    44,    45,   294,    72,    73,    74,    75,    76,
    77,    78,    82,    81,    82,    43,    44,    45,    87,    89,
     0,     3,   408,    93,   237,    93,    43,    97,   332,    97,
    72,    73,    74,    75,    76,    77,    78,   244,   342,   214,
    -1,    -1,    59,    -1,    72,    73,    74,    75,    76,    77,
    78,    -1,    -1,    51,    52,    53,    54,    55,    56,    -1,
   364,    43,    44,    45,    81,    82,    -1,    84,    80,    -1,
    82,   375,    -1,    -1,    -1,    -1,    93,    89,   368,    -1,
    97,    93,    -1,   373,    -1,    97,    -1,    -1,   392,    -1,
    72,    73,    74,    75,    76,    77,    78,    95,    85,    86,
    87,    88,    89,    90,    91,    92,   396,    -1,   412,    -1,
   400,    98,    -1,   403,    -1,   405,    -1,    -1,    82,    83,
   410,   411,   426,   413,   414,    89,   416,   417,    -1,    93,
    -1,   421,   422,    97,   424,   425,    -1,   441,    -1,   429,
   430,    -1,    -1,    -1,    -1,   435,   436,   437,     3,    -1,
   440,    -1,    -1,    -1,   444,   445,     3,   447,   462,    -1,
   450,    16,    17,    18,    19,     3,   456,    -1,    -1,    16,
    17,    18,    19,    88,    89,    90,    91,    92,    16,    17,
    18,    19,    -1,    -1,    -1,    -1,    41,    -1,    43,    44,
    45,    46,    -1,    -1,    41,     4,    43,    44,    45,    46,
    -1,    10,    -1,    41,    -1,    43,    44,    45,    46,    -1,
    -1,    20,    21,    22,    23,    24,    25,    26,    27,    28,
    29,    30,    31,    32,    33,    34,    35,    36,    37,    38,
    39,    40,     4,    42,    -1,    -1,    85,    -1,    10,    88,
    89,    -1,    -1,    92,    -1,    -1,    95,    -1,    20,    21,
    22,    23,    24,    25,    26,    27,    28,    29,    30,    31,
    32,    33,    34,    35,    36,    37,    38,    39,    40,     4,
    42,    -1,    -1,    -1,    -1,    10,    84,    85,    86,    87,
    88,    89,    -1,    -1,    92,    20,    21,    22,    23,    24,
    25,    26,    27,    28,    29,    30,    31,    32,    33,    34,
    35,    36,    37,    38,    39,    40,   431,    42,    82,    83,
    -1,    -1,    -1,    -1,    -1,    89,    -1,    -1,   443,    93,
    -1,   446,    -1,    97,   449,    -1,    -1,    -1,    -1,   454,
   455,    -1,    -1,   458,    -1,    -1,   461,    -1,    -1,    -1,
   465,   344,   345,   346,   347,   348,   349,   350,   351,   352,
   353,   354,   355,   356,   357,   358,   359,    -1,   361,   362,
   363,    85,    86,    87,    88,    89,    90,    91,    92,    -1,
    -1,    -1,    -1,    -1,    98,    72,    73,    74,    75,    76,
    77,    78,    -1,    80,    81,    85,    86,    87,    88,    89,
    90,    91,    92,    85,    86,    87,    88,    89,    90,    91,
    92,    86,    87,    88,    89,    90,    91,    92,     6,     7,
     8,     9,    10,    11,    51,    52,    53,    54,    55,    56
};
/* -*-C-*-  Note some compilers choke on comments on `#line' lines.  */
#line 3 "/usr/share/misc/bison.simple"
/* This file comes from bison-1.28.  */

/* Skeleton output parser for bison,
   Copyright (C) 1984, 1989, 1990 Free Software Foundation, Inc.

   This program is free software; you can redistribute it and/or modify
   it under the terms of the GNU General Public License as published by
   the Free Software Foundation; either version 2, or (at your option)
   any later version.

   This program is distributed in the hope that it will be useful,
   but WITHOUT ANY WARRANTY; without even the implied warranty of
   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
   GNU General Public License for more details.

   You should have received a copy of the GNU General Public License
   along with this program; if not, write to the Free Software
   Foundation, Inc., 59 Temple Place - Suite 330,
   Boston, MA 02111-1307, USA.  */

/* As a special exception, when this file is copied by Bison into a
   Bison output file, you may use that output file without restriction.
   This special exception was added by the Free Software Foundation
   in version 1.24 of Bison.  */

/* This is the parser code that is written into each bison parser
  when the %semantic_parser declaration is not specified in the grammar.
  It was written by Richard Stallman by simplifying the hairy parser
  used when %semantic_parser is specified.  */

#ifndef YYSTACK_USE_ALLOCA
#ifdef alloca
#define YYSTACK_USE_ALLOCA
#else /* alloca not defined */
#ifdef __GNUC__
#define YYSTACK_USE_ALLOCA
#define alloca __builtin_alloca
#else /* not GNU C.  */
#if (!defined (__STDC__) && defined (sparc)) || defined (__sparc__) || defined (__sparc) || defined (__sgi) || (defined (__sun) && defined (__i386))
#define YYSTACK_USE_ALLOCA
#include <alloca.h>
#else /* not sparc */
/* We think this test detects Watcom and Microsoft C.  */
/* This used to test MSDOS, but that is a bad idea
   since that symbol is in the user namespace.  */
#if (defined (_MSDOS) || defined (_MSDOS_)) && !defined (__TURBOC__)
#if 0 /* No need for malloc.h, which pollutes the namespace;
	 instead, just don't use alloca.  */
#include <malloc.h>
#endif
#else /* not MSDOS, or __TURBOC__ */
#if defined(_AIX)
/* I don't know what this was needed for, but it pollutes the namespace.
   So I turned it off.   rms, 2 May 1997.  */
/* #include <malloc.h>  */
 #pragma alloca
#define YYSTACK_USE_ALLOCA
#else /* not MSDOS, or __TURBOC__, or _AIX */
#if 0
#ifdef __hpux /* haible@@ilog.fr says this works for HPUX 9.05 and up,
		 and on HPUX 10.  Eventually we can turn this on.  */
#define YYSTACK_USE_ALLOCA
#define alloca __builtin_alloca
#endif /* __hpux */
#endif
#endif /* not _AIX */
#endif /* not MSDOS, or __TURBOC__ */
#endif /* not sparc */
#endif /* not GNU C */
#endif /* alloca not defined */
#endif /* YYSTACK_USE_ALLOCA not defined */

#ifdef YYSTACK_USE_ALLOCA
#define YYSTACK_ALLOC alloca
#else
#define YYSTACK_ALLOC malloc
#endif

/* Note: there must be only one dollar sign in this file.
   It is replaced by the list of actions, each action
   as one case of the switch.  */

#define yyerrok		(yyerrstatus = 0)
#define yyclearin	(yychar = YYEMPTY)
#define YYEMPTY		-2
#define YYEOF		0
#define YYACCEPT	goto yyacceptlab
#define YYABORT 	goto yyabortlab
#define YYERROR		goto yyerrlab1
/* Like YYERROR except do call yyerror.
   This remains here temporarily to ease the
   transition to the new meaning of YYERROR, for GCC.
   Once GCC version 2 has supplanted version 1, this can go.  */
#define YYFAIL		goto yyerrlab
#define YYRECOVERING()  (!!yyerrstatus)
#define YYBACKUP(token, value) \
do								\
  if (yychar == YYEMPTY && yylen == 1)				\
    { yychar = (token), yylval = (value);			\
      yychar1 = YYTRANSLATE (yychar);				\
      YYPOPSTACK;						\
      goto yybackup;						\
    }								\
  else								\
    { yyerror ("syntax error: cannot back up"); YYERROR; }	\
while (0)

#define YYTERROR	1
#define YYERRCODE	256

#ifndef YYPURE
#define YYLEX		yylex()
#endif

#ifdef YYPURE
#ifdef YYLSP_NEEDED
#ifdef YYLEX_PARAM
#define YYLEX		yylex(&yylval, &yylloc, YYLEX_PARAM)
#else
#define YYLEX		yylex(&yylval, &yylloc)
#endif
#else /* not YYLSP_NEEDED */
#ifdef YYLEX_PARAM
#define YYLEX		yylex(&yylval, YYLEX_PARAM)
#else
#define YYLEX		yylex(&yylval)
#endif
#endif /* not YYLSP_NEEDED */
#endif

/* If nonreentrant, generate the variables here */

#ifndef YYPURE

int	yychar;			/*  the lookahead symbol		*/
YYSTYPE	yylval;			/*  the semantic value of the		*/
				/*  lookahead symbol			*/

#ifdef YYLSP_NEEDED
YYLTYPE yylloc;			/*  location data for the lookahead	*/
				/*  symbol				*/
#endif

int yynerrs;			/*  number of parse errors so far       */
#endif  /* not YYPURE */

#if YYDEBUG != 0
int yydebug;			/*  nonzero means print parse trace	*/
/* Since this is uninitialized, it does not stop multiple parsers
   from coexisting.  */
#endif

/*  YYINITDEPTH indicates the initial size of the parser's stacks	*/

#ifndef	YYINITDEPTH
#define YYINITDEPTH 200
#endif

/*  YYMAXDEPTH is the maximum size the stacks can grow to
    (effective only if the built-in stack extension method is used).  */

#if YYMAXDEPTH == 0
#undef YYMAXDEPTH
#endif

#ifndef YYMAXDEPTH
#define YYMAXDEPTH 10000
#endif

/* Define __yy_memcpy.  Note that the size argument
   should be passed with type unsigned int, because that is what the non-GCC
   definitions require.  With GCC, __builtin_memcpy takes an arg
   of type size_t, but it can handle unsigned int.  */

#if __GNUC__ > 1		/* GNU C and GNU C++ define this.  */
#define __yy_memcpy(TO,FROM,COUNT)	__builtin_memcpy(TO,FROM,COUNT)
#else				/* not GNU C or C++ */
#ifndef __cplusplus

/* This is the most reliable way to avoid incompatibilities
   in available built-in functions on various systems.  */
static void
__yy_memcpy (to, from, count)
     char *to;
     char *from;
     unsigned int count;
{
  register char *f = from;
  register char *t = to;
  register int i = count;

  while (i-- > 0)
    *t++ = *f++;
}

#else /* __cplusplus */

/* This is the most reliable way to avoid incompatibilities
   in available built-in functions on various systems.  */
static void
__yy_memcpy (char *to, char *from, unsigned int count)
{
  register char *t = to;
  register char *f = from;
  register int i = count;

  while (i-- > 0)
    *t++ = *f++;
}

#endif
#endif

#line 217 "/usr/share/misc/bison.simple"

/* The user can define YYPARSE_PARAM as the name of an argument to be passed
   into yyparse.  The argument should have type void *.
   It should actually point to an object.
   Grammar actions can access the variable by casting it
   to the proper pointer type.  */

#ifdef YYPARSE_PARAM
#ifdef __cplusplus
#define YYPARSE_PARAM_ARG void *YYPARSE_PARAM
#define YYPARSE_PARAM_DECL
#else /* not __cplusplus */
#define YYPARSE_PARAM_ARG YYPARSE_PARAM
#define YYPARSE_PARAM_DECL void *YYPARSE_PARAM;
#endif /* not __cplusplus */
#else /* not YYPARSE_PARAM */
#define YYPARSE_PARAM_ARG
#define YYPARSE_PARAM_DECL
#endif /* not YYPARSE_PARAM */

/* Prevent warning if -Wstrict-prototypes.  */
#ifdef __GNUC__
#ifdef YYPARSE_PARAM
int yyparse (void *);
#else
int yyparse (void);
#endif
#endif

int
yyparse(YYPARSE_PARAM_ARG)
     YYPARSE_PARAM_DECL
{
  register int yystate;
  register int yyn;
  register short *yyssp;
  register YYSTYPE *yyvsp;
  int yyerrstatus;	/*  number of tokens to shift before error messages enabled */
  int yychar1 = 0;		/*  lookahead token as an internal (translated) token number */

  short	yyssa[YYINITDEPTH];	/*  the state stack			*/
  YYSTYPE yyvsa[YYINITDEPTH];	/*  the semantic value stack		*/

  short *yyss = yyssa;		/*  refer to the stacks thru separate pointers */
  YYSTYPE *yyvs = yyvsa;	/*  to allow yyoverflow to reallocate them elsewhere */

#ifdef YYLSP_NEEDED
  YYLTYPE yylsa[YYINITDEPTH];	/*  the location stack			*/
  YYLTYPE *yyls = yylsa;
  YYLTYPE *yylsp;

#define YYPOPSTACK   (yyvsp--, yyssp--, yylsp--)
#else
#define YYPOPSTACK   (yyvsp--, yyssp--)
#endif

  int yystacksize = YYINITDEPTH;
  int yyfree_stacks = 0;

#ifdef YYPURE
  int yychar;
  YYSTYPE yylval;
  int yynerrs;
#ifdef YYLSP_NEEDED
  YYLTYPE yylloc;
#endif
#endif

  YYSTYPE yyval;		/*  the variable used to return		*/
				/*  semantic values from the action	*/
				/*  routines				*/

  int yylen;

#if YYDEBUG != 0
  if (yydebug)
    fprintf(stderr, "Starting parse\n");
#endif

  yystate = 0;
  yyerrstatus = 0;
  yynerrs = 0;
  yychar = YYEMPTY;		/* Cause a token to be read.  */

  /* Initialize stack pointers.
     Waste one element of value and location stack
     so that they stay on the same level as the state stack.
     The wasted elements are never initialized.  */

  yyssp = yyss - 1;
  yyvsp = yyvs;
#ifdef YYLSP_NEEDED
  yylsp = yyls;
#endif

/* Push a new state, which is found in  yystate  .  */
/* In all cases, when you get here, the value and location stacks
   have just been pushed. so pushing a state here evens the stacks.  */
yynewstate:

  *++yyssp = yystate;

  if (yyssp >= yyss + yystacksize - 1)
    {
      /* Give user a chance to reallocate the stack */
      /* Use copies of these so that the &'s don't force the real ones into memory. */
      YYSTYPE *yyvs1 = yyvs;
      short *yyss1 = yyss;
#ifdef YYLSP_NEEDED
      YYLTYPE *yyls1 = yyls;
#endif

      /* Get the current used size of the three stacks, in elements.  */
      int size = yyssp - yyss + 1;

#ifdef yyoverflow
      /* Each stack pointer address is followed by the size of
	 the data in use in that stack, in bytes.  */
#ifdef YYLSP_NEEDED
      /* This used to be a conditional around just the two extra args,
	 but that might be undefined if yyoverflow is a macro.  */
      yyoverflow("parser stack overflow",
		 &yyss1, size * sizeof (*yyssp),
		 &yyvs1, size * sizeof (*yyvsp),
		 &yyls1, size * sizeof (*yylsp),
		 &yystacksize);
#else
      yyoverflow("parser stack overflow",
		 &yyss1, size * sizeof (*yyssp),
		 &yyvs1, size * sizeof (*yyvsp),
		 &yystacksize);
#endif

      yyss = yyss1; yyvs = yyvs1;
#ifdef YYLSP_NEEDED
      yyls = yyls1;
#endif
#else /* no yyoverflow */
      /* Extend the stack our own way.  */
      if (yystacksize >= YYMAXDEPTH)
	{
	  yyerror("parser stack overflow");
	  if (yyfree_stacks)
	    {
	      free (yyss);
	      free (yyvs);
#ifdef YYLSP_NEEDED
	      free (yyls);
#endif
	    }
	  return 2;
	}
      yystacksize *= 2;
      if (yystacksize > YYMAXDEPTH)
	yystacksize = YYMAXDEPTH;
#ifndef YYSTACK_USE_ALLOCA
      yyfree_stacks = 1;
#endif
      yyss = (short *) YYSTACK_ALLOC (yystacksize * sizeof (*yyssp));
      __yy_memcpy ((char *)yyss, (char *)yyss1,
		   size * (unsigned int) sizeof (*yyssp));
      yyvs = (YYSTYPE *) YYSTACK_ALLOC (yystacksize * sizeof (*yyvsp));
      __yy_memcpy ((char *)yyvs, (char *)yyvs1,
		   size * (unsigned int) sizeof (*yyvsp));
#ifdef YYLSP_NEEDED
      yyls = (YYLTYPE *) YYSTACK_ALLOC (yystacksize * sizeof (*yylsp));
      __yy_memcpy ((char *)yyls, (char *)yyls1,
		   size * (unsigned int) sizeof (*yylsp));
#endif
#endif /* no yyoverflow */

      yyssp = yyss + size - 1;
      yyvsp = yyvs + size - 1;
#ifdef YYLSP_NEEDED
      yylsp = yyls + size - 1;
#endif

#if YYDEBUG != 0
      if (yydebug)
	fprintf(stderr, "Stack size increased to %d\n", yystacksize);
#endif

      if (yyssp >= yyss + yystacksize - 1)
	YYABORT;
    }

#if YYDEBUG != 0
  if (yydebug)
    fprintf(stderr, "Entering state %d\n", yystate);
#endif

  goto yybackup;
 yybackup:

/* Do appropriate processing given the current state.  */
/* Read a lookahead token if we need one and don't already have one.  */
/* yyresume: */

  /* First try to decide what to do without reference to lookahead token.  */

  yyn = yypact[yystate];
  if (yyn == YYFLAG)
    goto yydefault;

  /* Not known => get a lookahead token if don't already have one.  */

  /* yychar is either YYEMPTY or YYEOF
     or a valid token in external form.  */

  if (yychar == YYEMPTY)
    {
#if YYDEBUG != 0
      if (yydebug)
	fprintf(stderr, "Reading a token: ");
#endif
      yychar = YYLEX;
    }

  /* Convert token to internal form (in yychar1) for indexing tables with */

  if (yychar <= 0)		/* This means end of input. */
    {
      yychar1 = 0;
      yychar = YYEOF;		/* Don't call YYLEX any more */

#if YYDEBUG != 0
      if (yydebug)
	fprintf(stderr, "Now at end of input.\n");
#endif
    }
  else
    {
      yychar1 = YYTRANSLATE(yychar);

#if YYDEBUG != 0
      if (yydebug)
	{
	  fprintf (stderr, "Next token is %d (%s", yychar, yytname[yychar1]);
	  /* Give the individual parser a way to print the precise meaning
	     of a token, for further debugging info.  */
#ifdef YYPRINT
	  YYPRINT (stderr, yychar, yylval);
#endif
	  fprintf (stderr, ")\n");
	}
#endif
    }

  yyn += yychar1;
  if (yyn < 0 || yyn > YYLAST || yycheck[yyn] != yychar1)
    goto yydefault;

  yyn = yytable[yyn];

  /* yyn is what to do for this token type in this state.
     Negative => reduce, -yyn is rule number.
     Positive => shift, yyn is new state.
       New state is final state => don't bother to shift,
       just return success.
     0, or most negative number => error.  */

  if (yyn < 0)
    {
      if (yyn == YYFLAG)
	goto yyerrlab;
      yyn = -yyn;
      goto yyreduce;
    }
  else if (yyn == 0)
    goto yyerrlab;

  if (yyn == YYFINAL)
    YYACCEPT;

  /* Shift the lookahead token.  */

#if YYDEBUG != 0
  if (yydebug)
    fprintf(stderr, "Shifting token %d (%s), ", yychar, yytname[yychar1]);
#endif

  /* Discard the token being shifted unless it is eof.  */
  if (yychar != YYEOF)
    yychar = YYEMPTY;

  *++yyvsp = yylval;
#ifdef YYLSP_NEEDED
  *++yylsp = yylloc;
#endif

  /* count tokens shifted since error; after three, turn off error status.  */
  if (yyerrstatus) yyerrstatus--;

  yystate = yyn;
  goto yynewstate;

/* Do the default action for the current state.  */
yydefault:

  yyn = yydefact[yystate];
  if (yyn == 0)
    goto yyerrlab;

/* Do a reduction.  yyn is the number of a rule to reduce with.  */
yyreduce:
  yylen = yyr2[yyn];
  if (yylen > 0)
    yyval = yyvsp[1-yylen]; /* implement default value of the action */

#if YYDEBUG != 0
  if (yydebug)
    {
      int i;

      fprintf (stderr, "Reducing via rule %d (line %d), ",
	       yyn, yyrline[yyn]);

      /* Print the symbols being reduced, and their result.  */
      for (i = yyprhs[yyn]; yyrhs[i] > 0; i++)
	fprintf (stderr, "%s ", yytname[yyrhs[i]]);
      fprintf (stderr, " -> %s\n", yytname[yyr1[yyn]]);
    }
#endif


  switch (yyn) {

case 17:
#line 176 "rcparse.y"
{
	    rcparse_discard_strings ();
	  ;
    break;}
case 18:
#line 185 "rcparse.y"
{
	    define_accelerator (yyvsp[-5].id, &yyvsp[-3].res_info, yyvsp[-1].pacc);
	  ;
    break;}
case 19:
#line 192 "rcparse.y"
{
	    yyval.pacc = NULL;
	  ;
    break;}
case 20:
#line 196 "rcparse.y"
{
	    struct accelerator *a;

	    a = (struct accelerator *) res_alloc (sizeof *a);
	    *a = yyvsp[0].acc;
	    if (yyvsp[-1].pacc == NULL)
	      yyval.pacc = a;
	    else
	      {
		struct accelerator **pp;

		for (pp = &yyvsp[-1].pacc->next; *pp != NULL; pp = &(*pp)->next)
		  ;
		*pp = a;
		yyval.pacc = yyvsp[-1].pacc;
	      }
	  ;
    break;}
case 21:
#line 217 "rcparse.y"
{
	    yyval.acc = yyvsp[-1].acc;
	    yyval.acc.id = yyvsp[0].il;
	  ;
    break;}
case 22:
#line 222 "rcparse.y"
{
	    yyval.acc = yyvsp[-3].acc;
	    yyval.acc.id = yyvsp[-2].il;
	    yyval.acc.flags |= yyvsp[0].is;
	    if ((yyval.acc.flags & ACC_VIRTKEY) == 0
		&& (yyval.acc.flags & (ACC_SHIFT | ACC_CONTROL | ACC_ALT)) != 0)
	      rcparse_warning (_("inappropriate modifiers for non-VIRTKEY"));
	  ;
    break;}
case 23:
#line 234 "rcparse.y"
{
	    const char *s = yyvsp[0].s;
	    char ch;

	    yyval.acc.next = NULL;
	    yyval.acc.id = 0;
	    ch = *s;
	    if (ch != '^')
	      yyval.acc.flags = 0;
	    else
	      {
		yyval.acc.flags = ACC_CONTROL | ACC_VIRTKEY;
		++s;
		ch = *s;
		ch = toupper ((unsigned char) ch);
	      }
	    yyval.acc.key = ch;
	    if (s[1] != '\0')
	      rcparse_warning (_("accelerator should only be one character"));
	  ;
    break;}
case 24:
#line 255 "rcparse.y"
{
	    yyval.acc.next = NULL;
	    yyval.acc.flags = 0;
	    yyval.acc.id = 0;
	    yyval.acc.key = yyvsp[0].il;
	  ;
    break;}
case 25:
#line 265 "rcparse.y"
{
	    yyval.is = yyvsp[0].is;
	  ;
    break;}
case 26:
#line 269 "rcparse.y"
{
	    yyval.is = yyvsp[-2].is | yyvsp[0].is;
	  ;
    break;}
case 27:
#line 274 "rcparse.y"
{
	    yyval.is = yyvsp[-1].is | yyvsp[0].is;
	  ;
    break;}
case 28:
#line 281 "rcparse.y"
{
	    yyval.is = ACC_VIRTKEY;
	  ;
    break;}
case 29:
#line 285 "rcparse.y"
{
	    /* This is just the absence of VIRTKEY.  */
	    yyval.is = 0;
	  ;
    break;}
case 30:
#line 290 "rcparse.y"
{
	    yyval.is = ACC_NOINVERT;
	  ;
    break;}
case 31:
#line 294 "rcparse.y"
{
	    yyval.is = ACC_SHIFT;
	  ;
    break;}
case 32:
#line 298 "rcparse.y"
{
	    yyval.is = ACC_CONTROL;
	  ;
    break;}
case 33:
#line 302 "rcparse.y"
{
	    yyval.is = ACC_ALT;
	  ;
    break;}
case 34:
#line 311 "rcparse.y"
{
	    define_bitmap (yyvsp[-3].id, &yyvsp[-1].res_info, yyvsp[0].s);
	  ;
    break;}
case 35:
#line 320 "rcparse.y"
{
	    define_cursor (yyvsp[-3].id, &yyvsp[-1].res_info, yyvsp[0].s);
	  ;
    break;}
case 36:
#line 330 "rcparse.y"
{
	      memset (&dialog, 0, sizeof dialog);
	      dialog.x = yyvsp[-3].il;
	      dialog.y = yyvsp[-2].il;
	      dialog.width = yyvsp[-1].il;
	      dialog.height = yyvsp[0].il;
	      dialog.style = WS_POPUP | WS_BORDER | WS_SYSMENU;
	      dialog.exstyle = yyvsp[-4].il;
	      dialog.menu.named = 1;
	      dialog.class.named = 1;
	      dialog.font = NULL;
	      dialog.ex = NULL;
	      dialog.controls = NULL;
	      sub_res_info = yyvsp[-5].res_info;
	    ;
    break;}
case 37:
#line 346 "rcparse.y"
{
	    define_dialog (yyvsp[-12].id, &sub_res_info, &dialog);
	  ;
    break;}
case 38:
#line 351 "rcparse.y"
{
	      memset (&dialog, 0, sizeof dialog);
	      dialog.x = yyvsp[-3].il;
	      dialog.y = yyvsp[-2].il;
	      dialog.width = yyvsp[-1].il;
	      dialog.height = yyvsp[0].il;
	      dialog.style = WS_POPUP | WS_BORDER | WS_SYSMENU;
	      dialog.exstyle = yyvsp[-4].il;
	      dialog.menu.named = 1;
	      dialog.class.named = 1;
	      dialog.font = NULL;
	      dialog.ex = ((struct dialog_ex *)
			   res_alloc (sizeof (struct dialog_ex)));
	      memset (dialog.ex, 0, sizeof (struct dialog_ex));
	      dialog.controls = NULL;
	      sub_res_info = yyvsp[-5].res_info;
	    ;
    break;}
case 39:
#line 369 "rcparse.y"
{
	    define_dialog (yyvsp[-12].id, &sub_res_info, &dialog);
	  ;
    break;}
case 40:
#line 374 "rcparse.y"
{
	      memset (&dialog, 0, sizeof dialog);
	      dialog.x = yyvsp[-4].il;
	      dialog.y = yyvsp[-3].il;
	      dialog.width = yyvsp[-2].il;
	      dialog.height = yyvsp[-1].il;
	      dialog.style = WS_POPUP | WS_BORDER | WS_SYSMENU;
	      dialog.exstyle = yyvsp[-5].il;
	      dialog.menu.named = 1;
	      dialog.class.named = 1;
	      dialog.font = NULL;
	      dialog.ex = ((struct dialog_ex *)
			   res_alloc (sizeof (struct dialog_ex)));
	      memset (dialog.ex, 0, sizeof (struct dialog_ex));
	      dialog.ex->help = yyvsp[0].il;
	      dialog.controls = NULL;
	      sub_res_info = yyvsp[-6].res_info;
	    ;
    break;}
case 41:
#line 393 "rcparse.y"
{
	    define_dialog (yyvsp[-13].id, &sub_res_info, &dialog);
	  ;
    break;}
case 42:
#line 400 "rcparse.y"
{
	    yyval.il = 0;
	  ;
    break;}
case 43:
#line 404 "rcparse.y"
{
	    yyval.il = yyvsp[0].il;
	  ;
    break;}
case 45:
#line 412 "rcparse.y"
{
	    unicode_from_ascii ((int *) NULL, &dialog.caption, yyvsp[0].s);
	  ;
    break;}
case 46:
#line 416 "rcparse.y"
{
	    dialog.class = yyvsp[0].id;
	  ;
    break;}
case 47:
#line 420 "rcparse.y"
{ style = dialog.style; ;
    break;}
case 48:
#line 422 "rcparse.y"
{
	    dialog.style = style;
	  ;
    break;}
case 49:
#line 426 "rcparse.y"
{
	    dialog.exstyle = yyvsp[0].il;
	  ;
    break;}
case 50:
#line 430 "rcparse.y"
{
	    dialog.style |= DS_SETFONT;
	    dialog.pointsize = yyvsp[-2].il;
	    unicode_from_ascii ((int *) NULL, &dialog.font, yyvsp[0].s);
	  ;
    break;}
case 51:
#line 436 "rcparse.y"
{
	    dialog.style |= DS_SETFONT;
	    dialog.pointsize = yyvsp[-4].il;
	    unicode_from_ascii ((int *) NULL, &dialog.font, yyvsp[-2].s);
	    if (dialog.ex == NULL)
	      rcparse_warning (_("extended FONT requires DIALOGEX"));
	    else
	      {
		dialog.ex->weight = yyvsp[-1].il;
		dialog.ex->italic = yyvsp[0].il;
	      }
	  ;
    break;}
case 52:
#line 449 "rcparse.y"
{
	    dialog.menu = yyvsp[0].id;
	  ;
    break;}
case 53:
#line 453 "rcparse.y"
{
	    sub_res_info.characteristics = yyvsp[0].il;
	  ;
    break;}
case 54:
#line 457 "rcparse.y"
{
	    sub_res_info.language = yyvsp[-1].il | (yyvsp[0].il << 8);
	  ;
    break;}
case 55:
#line 461 "rcparse.y"
{
	    sub_res_info.version = yyvsp[0].il;
	  ;
    break;}
case 57:
#line 469 "rcparse.y"
{
	    struct dialog_control **pp;

	    for (pp = &dialog.controls; *pp != NULL; pp = &(*pp)->next)
	      ;
	    *pp = yyvsp[0].dialog_control;
	  ;
    break;}
case 58:
#line 480 "rcparse.y"
{
	      default_style = BS_AUTO3STATE | WS_TABSTOP;
	      base_style = BS_AUTO3STATE;
	      class = CTL_BUTTON;
	    ;
    break;}
case 59:
#line 486 "rcparse.y"
{
	    yyval.dialog_control = yyvsp[0].dialog_control;
	  ;
    break;}
case 60:
#line 490 "rcparse.y"
{
	      default_style = BS_AUTOCHECKBOX | WS_TABSTOP;
	      base_style = BS_AUTOCHECKBOX;
	      class = CTL_BUTTON;
	    ;
    break;}
case 61:
#line 496 "rcparse.y"
{
	    yyval.dialog_control = yyvsp[0].dialog_control;
	  ;
    break;}
case 62:
#line 500 "rcparse.y"
{
	      default_style = BS_AUTORADIOBUTTON | WS_TABSTOP;
	      base_style = BS_AUTORADIOBUTTON;
	      class = CTL_BUTTON;
	    ;
    break;}
case 63:
#line 506 "rcparse.y"
{
	    yyval.dialog_control = yyvsp[0].dialog_control;
	  ;
    break;}
case 64:
#line 510 "rcparse.y"
{
	      default_style = ES_LEFT | WS_BORDER | WS_TABSTOP;
	      base_style = ES_LEFT | WS_BORDER | WS_TABSTOP;
	      class = CTL_EDIT;
	    ;
    break;}
case 65:
#line 516 "rcparse.y"
{
	    yyval.dialog_control = yyvsp[0].dialog_control;
	    if (dialog.ex == NULL)
	      rcparse_warning (_("IEDIT requires DIALOGEX"));
	    res_string_to_id (&yyval.dialog_control->class, "BEDIT");
	  ;
    break;}
case 66:
#line 523 "rcparse.y"
{
	      default_style = BS_CHECKBOX | WS_TABSTOP;
	      base_style = BS_CHECKBOX | WS_TABSTOP;
	      class = CTL_BUTTON;
	    ;
    break;}
case 67:
#line 529 "rcparse.y"
{
	    yyval.dialog_control = yyvsp[0].dialog_control;
	  ;
    break;}
case 68:
#line 533 "rcparse.y"
{
	      default_style = CBS_SIMPLE | WS_TABSTOP;
	      base_style = 0;
	      class = CTL_COMBOBOX;
	    ;
    break;}
case 69:
#line 539 "rcparse.y"
{
	    yyval.dialog_control = yyvsp[0].dialog_control;
	  ;
    break;}
case 70:
#line 544 "rcparse.y"
{
	    yyval.dialog_control = define_control (yyvsp[-9].s, yyvsp[-8].il, yyvsp[-5].il, yyvsp[-4].il, yyvsp[-3].il, yyvsp[-2].il, yyvsp[-7].il, style, yyvsp[-1].il);
	    if (yyvsp[0].rcdata_item != NULL)
	      {
		if (dialog.ex == NULL)
		  rcparse_warning (_("control data requires DIALOGEX"));
		yyval.dialog_control->data = yyvsp[0].rcdata_item;
	      }
	  ;
    break;}
case 71:
#line 555 "rcparse.y"
{
	    yyval.dialog_control = define_control (yyvsp[-10].s, yyvsp[-9].il, yyvsp[-6].il, yyvsp[-5].il, yyvsp[-4].il, yyvsp[-3].il, yyvsp[-8].il, style, yyvsp[-2].il);
	    if (dialog.ex == NULL)
	      rcparse_warning (_("help ID requires DIALOGEX"));
	    yyval.dialog_control->help = yyvsp[-1].il;
	    yyval.dialog_control->data = yyvsp[0].rcdata_item;
	  ;
    break;}
case 72:
#line 564 "rcparse.y"
{
	    yyval.dialog_control = define_control (yyvsp[-10].s, yyvsp[-9].il, yyvsp[-5].il, yyvsp[-4].il, yyvsp[-3].il, yyvsp[-2].il, 0, style, yyvsp[-1].il);
	    if (yyvsp[0].rcdata_item != NULL)
	      {
		if (dialog.ex == NULL)
		  rcparse_warning ("control data requires DIALOGEX");
		yyval.dialog_control->data = yyvsp[0].rcdata_item;
	      }
	    yyval.dialog_control->class.named = 1;
  	    unicode_from_ascii(&yyval.dialog_control->class.u.n.length, &yyval.dialog_control->class.u.n.name, yyvsp[-7].s);
	  ;
    break;}
case 73:
#line 577 "rcparse.y"
{
	    yyval.dialog_control = define_control (yyvsp[-11].s, yyvsp[-10].il, yyvsp[-6].il, yyvsp[-5].il, yyvsp[-4].il, yyvsp[-3].il, 0, style, yyvsp[-2].il);
	    if (dialog.ex == NULL)
	      rcparse_warning ("help ID requires DIALOGEX");
	    yyval.dialog_control->help = yyvsp[-1].il;
	    yyval.dialog_control->data = yyvsp[0].rcdata_item;
	    yyval.dialog_control->class.named = 1;
  	    unicode_from_ascii(&yyval.dialog_control->class.u.n.length, &yyval.dialog_control->class.u.n.name, yyvsp[-8].s);
	  ;
    break;}
case 74:
#line 587 "rcparse.y"
{
	      default_style = SS_CENTER | WS_GROUP;
	      base_style = SS_CENTER;
	      class = CTL_STATIC;
	    ;
    break;}
case 75:
#line 593 "rcparse.y"
{
	    yyval.dialog_control = yyvsp[0].dialog_control;
	  ;
    break;}
case 76:
#line 597 "rcparse.y"
{
	      default_style = BS_DEFPUSHBUTTON | WS_TABSTOP;
	      base_style = BS_DEFPUSHBUTTON | WS_TABSTOP;
	      class = CTL_BUTTON;
	    ;
    break;}
case 77:
#line 603 "rcparse.y"
{
	    yyval.dialog_control = yyvsp[0].dialog_control;
	  ;
    break;}
case 78:
#line 607 "rcparse.y"
{
	      default_style = ES_LEFT | WS_BORDER | WS_TABSTOP;
	      base_style = ES_LEFT | WS_BORDER | WS_TABSTOP;
	      class = CTL_EDIT;
	    ;
    break;}
case 79:
#line 613 "rcparse.y"
{
	    yyval.dialog_control = yyvsp[0].dialog_control;
	  ;
    break;}
case 80:
#line 617 "rcparse.y"
{
	      default_style = BS_GROUPBOX;
	      base_style = BS_GROUPBOX;
	      class = CTL_BUTTON;
	    ;
    break;}
case 81:
#line 623 "rcparse.y"
{
	    yyval.dialog_control = yyvsp[0].dialog_control;
	  ;
    break;}
case 82:
#line 627 "rcparse.y"
{
	      default_style = ES_LEFT | WS_BORDER | WS_TABSTOP;
	      base_style = ES_LEFT | WS_BORDER | WS_TABSTOP;
	      class = CTL_EDIT;
	    ;
    break;}
case 83:
#line 633 "rcparse.y"
{
	    yyval.dialog_control = yyvsp[0].dialog_control;
	    if (dialog.ex == NULL)
	      rcparse_warning (_("IEDIT requires DIALOGEX"));
	    res_string_to_id (&yyval.dialog_control->class, "HEDIT");
	  ;
    break;}
case 84:
#line 640 "rcparse.y"
{
	    yyval.dialog_control = define_control (yyvsp[-4].s, yyvsp[-3].il, yyvsp[-2].il, yyvsp[-1].il, 0, 0, CTL_STATIC,
				 SS_ICON | WS_CHILD | WS_VISIBLE, 0);
	    if (yyvsp[0].rcdata_item != NULL)
	      {
		if (dialog.ex == NULL)
		  rcparse_warning (_("control data requires DIALOGEX"));
		yyval.dialog_control->data = yyvsp[0].rcdata_item;
	      }
	  ;
    break;}
case 85:
#line 652 "rcparse.y"
{
    	    yyval.dialog_control = define_control (yyvsp[-8].s, yyvsp[-7].il, yyvsp[-6].il, yyvsp[-5].il, yyvsp[-4].il, yyvsp[-3].il, CTL_STATIC,
				 style, yyvsp[-1].il);
	    if (yyvsp[0].rcdata_item != NULL)
	      {
		if (dialog.ex == NULL)
		  rcparse_warning (_("control data requires DIALOGEX"));
		yyval.dialog_control->data = yyvsp[0].rcdata_item;
	      }
	  ;
    break;}
case 86:
#line 664 "rcparse.y"
{
    	    yyval.dialog_control = define_control (yyvsp[-9].s, yyvsp[-8].il, yyvsp[-7].il, yyvsp[-6].il, yyvsp[-5].il, yyvsp[-4].il, CTL_STATIC,
				 style, yyvsp[-2].il);
	    if (dialog.ex == NULL)
	      rcparse_warning (_("help ID requires DIALOGEX"));
	    yyval.dialog_control->help = yyvsp[-1].il;
	    yyval.dialog_control->data = yyvsp[0].rcdata_item;
	  ;
    break;}
case 87:
#line 673 "rcparse.y"
{
	      default_style = ES_LEFT | WS_BORDER | WS_TABSTOP;
	      base_style = ES_LEFT | WS_BORDER | WS_TABSTOP;
	      class = CTL_EDIT;
	    ;
    break;}
case 88:
#line 679 "rcparse.y"
{
	    yyval.dialog_control = yyvsp[0].dialog_control;
	    if (dialog.ex == NULL)
	      rcparse_warning (_("IEDIT requires DIALOGEX"));
	    res_string_to_id (&yyval.dialog_control->class, "IEDIT");
	  ;
    break;}
case 89:
#line 686 "rcparse.y"
{
	      default_style = LBS_NOTIFY | WS_BORDER;
	      base_style = LBS_NOTIFY | WS_BORDER;
	      class = CTL_LISTBOX;
	    ;
    break;}
case 90:
#line 692 "rcparse.y"
{
	    yyval.dialog_control = yyvsp[0].dialog_control;
	  ;
    break;}
case 91:
#line 696 "rcparse.y"
{
	      default_style = SS_LEFT | WS_GROUP;
	      base_style = SS_LEFT;
	      class = CTL_STATIC;
	    ;
    break;}
case 92:
#line 702 "rcparse.y"
{
	    yyval.dialog_control = yyvsp[0].dialog_control;
	  ;
    break;}
case 93:
#line 706 "rcparse.y"
{
	      default_style = BS_PUSHBOX | WS_TABSTOP;
	      base_style = BS_PUSHBOX;
	      class = CTL_BUTTON;
	    ;
    break;}
case 94:
#line 712 "rcparse.y"
{
	    yyval.dialog_control = yyvsp[0].dialog_control;
	  ;
    break;}
case 95:
#line 716 "rcparse.y"
{
	      default_style = BS_PUSHBUTTON | WS_TABSTOP;
	      base_style = BS_PUSHBUTTON | WS_TABSTOP;
	      class = CTL_BUTTON;
	    ;
    break;}
case 96:
#line 722 "rcparse.y"
{
	    yyval.dialog_control = yyvsp[0].dialog_control;
	  ;
    break;}
case 97:
#line 726 "rcparse.y"
{
	      default_style = BS_RADIOBUTTON | WS_TABSTOP;
	      base_style = BS_RADIOBUTTON;
	      class = CTL_BUTTON;
	    ;
    break;}
case 98:
#line 732 "rcparse.y"
{
	    yyval.dialog_control = yyvsp[0].dialog_control;
	  ;
    break;}
case 99:
#line 736 "rcparse.y"
{
	      default_style = SS_RIGHT | WS_GROUP;
	      base_style = SS_RIGHT;
	      class = CTL_STATIC;
	    ;
    break;}
case 100:
#line 742 "rcparse.y"
{
	    yyval.dialog_control = yyvsp[0].dialog_control;
	  ;
    break;}
case 101:
#line 746 "rcparse.y"
{
	      default_style = SBS_HORZ;
	      base_style = 0;
	      class = CTL_SCROLLBAR;
	    ;
    break;}
case 102:
#line 752 "rcparse.y"
{
	    yyval.dialog_control = yyvsp[0].dialog_control;
	  ;
    break;}
case 103:
#line 756 "rcparse.y"
{
	      default_style = BS_3STATE | WS_TABSTOP;
	      base_style = BS_3STATE;
	      class = CTL_BUTTON;
	    ;
    break;}
case 104:
#line 762 "rcparse.y"
{
	    yyval.dialog_control = yyvsp[0].dialog_control;
	  ;
    break;}
case 105:
#line 767 "rcparse.y"
{ style = WS_CHILD | WS_VISIBLE; ;
    break;}
case 106:
#line 769 "rcparse.y"
{
	    yyval.dialog_control = define_control (yyvsp[-14].s, yyvsp[-12].il, yyvsp[-10].il, yyvsp[-8].il, yyvsp[-6].il, yyvsp[-4].il, CTL_BUTTON,
				 style, yyvsp[0].il);
	  ;
    break;}
case 107:
#line 785 "rcparse.y"
{
	    yyval.dialog_control = define_control (yyvsp[-6].s, yyvsp[-5].il, yyvsp[-4].il, yyvsp[-3].il, yyvsp[-2].il, yyvsp[-1].il, class,
				 default_style | WS_CHILD | WS_VISIBLE, 0);
	    if (yyvsp[0].rcdata_item != NULL)
	      {
		if (dialog.ex == NULL)
		  rcparse_warning (_("control data requires DIALOGEX"));
		yyval.dialog_control->data = yyvsp[0].rcdata_item;
	      }
	  ;
    break;}
case 108:
#line 797 "rcparse.y"
{
	    yyval.dialog_control = define_control (yyvsp[-8].s, yyvsp[-7].il, yyvsp[-6].il, yyvsp[-5].il, yyvsp[-4].il, yyvsp[-3].il, class, style, yyvsp[-1].il);
	    if (yyvsp[0].rcdata_item != NULL)
	      {
		if (dialog.ex == NULL)
		  rcparse_warning (_("control data requires DIALOGEX"));
		yyval.dialog_control->data = yyvsp[0].rcdata_item;
	      }
	  ;
    break;}
case 109:
#line 808 "rcparse.y"
{
	    yyval.dialog_control = define_control (yyvsp[-9].s, yyvsp[-8].il, yyvsp[-7].il, yyvsp[-6].il, yyvsp[-5].il, yyvsp[-4].il, class, style, yyvsp[-2].il);
	    if (dialog.ex == NULL)
	      rcparse_warning (_("help ID requires DIALOGEX"));
	    yyval.dialog_control->help = yyvsp[-1].il;
	    yyval.dialog_control->data = yyvsp[0].rcdata_item;
	  ;
    break;}
case 110:
#line 819 "rcparse.y"
{
	    yyval.s = NULL;
	  ;
    break;}
case 111:
#line 823 "rcparse.y"
{
	    yyval.s = yyvsp[-1].s;
	  ;
    break;}
case 112:
#line 830 "rcparse.y"
{
	    yyval.rcdata_item = NULL;
	  ;
    break;}
case 113:
#line 834 "rcparse.y"
{
	    yyval.rcdata_item = yyvsp[-1].rcdata.first;
	  ;
    break;}
case 114:
#line 843 "rcparse.y"
{ style = WS_CHILD | WS_VISIBLE; ;
    break;}
case 116:
#line 849 "rcparse.y"
{ style = SS_ICON | WS_CHILD | WS_VISIBLE; ;
    break;}
case 118:
#line 855 "rcparse.y"
{ style = base_style | WS_CHILD | WS_VISIBLE; ;
    break;}
case 120:
#line 863 "rcparse.y"
{
	    define_font (yyvsp[-3].id, &yyvsp[-1].res_info, yyvsp[0].s);
	  ;
    break;}
case 121:
#line 872 "rcparse.y"
{
	    define_icon (yyvsp[-3].id, &yyvsp[-1].res_info, yyvsp[0].s);
	  ;
    break;}
case 122:
#line 882 "rcparse.y"
{
	    language = yyvsp[-1].il | (yyvsp[0].il << 8);
	  ;
    break;}
case 123:
#line 891 "rcparse.y"
{
	    define_menu (yyvsp[-5].id, &yyvsp[-3].res_info, yyvsp[-1].menuitem);
	  ;
    break;}
case 124:
#line 898 "rcparse.y"
{
	    yyval.menuitem = NULL;
	  ;
    break;}
case 125:
#line 902 "rcparse.y"
{
	    if (yyvsp[-1].menuitem == NULL)
	      yyval.menuitem = yyvsp[0].menuitem;
	    else
	      {
		struct menuitem **pp;

		for (pp = &yyvsp[-1].menuitem->next; *pp != NULL; pp = &(*pp)->next)
		  ;
		*pp = yyvsp[0].menuitem;
		yyval.menuitem = yyvsp[-1].menuitem;
	      }
	  ;
    break;}
case 126:
#line 919 "rcparse.y"
{
	    yyval.menuitem = define_menuitem (yyvsp[-2].s, yyvsp[-1].il, yyvsp[0].is, 0, 0, NULL);
	  ;
    break;}
case 127:
#line 923 "rcparse.y"
{
	    yyval.menuitem = define_menuitem (NULL, 0, 0, 0, 0, NULL);
	  ;
    break;}
case 128:
#line 927 "rcparse.y"
{
	    yyval.menuitem = define_menuitem (yyvsp[-4].s, 0, yyvsp[-3].is, 0, 0, yyvsp[-1].menuitem);
	  ;
    break;}
case 129:
#line 934 "rcparse.y"
{
	    yyval.is = 0;
	  ;
    break;}
case 130:
#line 938 "rcparse.y"
{
	    yyval.is = yyvsp[-2].is | yyvsp[0].is;
	  ;
    break;}
case 131:
#line 942 "rcparse.y"
{
	    yyval.is = yyvsp[-1].is | yyvsp[0].is;
	  ;
    break;}
case 132:
#line 949 "rcparse.y"
{
	    yyval.is = MENUITEM_CHECKED;
	  ;
    break;}
case 133:
#line 953 "rcparse.y"
{
	    yyval.is = MENUITEM_GRAYED;
	  ;
    break;}
case 134:
#line 957 "rcparse.y"
{
	    yyval.is = MENUITEM_HELP;
	  ;
    break;}
case 135:
#line 961 "rcparse.y"
{
	    yyval.is = MENUITEM_INACTIVE;
	  ;
    break;}
case 136:
#line 965 "rcparse.y"
{
	    yyval.is = MENUITEM_MENUBARBREAK;
	  ;
    break;}
case 137:
#line 969 "rcparse.y"
{
	    yyval.is = MENUITEM_MENUBREAK;
	  ;
    break;}
case 138:
#line 978 "rcparse.y"
{
	    define_menu (yyvsp[-5].id, &yyvsp[-3].res_info, yyvsp[-1].menuitem);
	  ;
    break;}
case 139:
#line 985 "rcparse.y"
{
	    yyval.menuitem = NULL;
	  ;
    break;}
case 140:
#line 989 "rcparse.y"
{
	    if (yyvsp[-1].menuitem == NULL)
	      yyval.menuitem = yyvsp[0].menuitem;
	    else
	      {
		struct menuitem **pp;

		for (pp = &yyvsp[-1].menuitem->next; *pp != NULL; pp = &(*pp)->next)
		  ;
		*pp = yyvsp[0].menuitem;
		yyval.menuitem = yyvsp[-1].menuitem;
	      }
	  ;
    break;}
case 141:
#line 1006 "rcparse.y"
{
	    yyval.menuitem = define_menuitem (yyvsp[0].s, 0, 0, 0, 0, NULL);
	  ;
    break;}
case 142:
#line 1010 "rcparse.y"
{
	    yyval.menuitem = define_menuitem (yyvsp[-1].s, yyvsp[0].il, 0, 0, 0, NULL);
	  ;
    break;}
case 143:
#line 1014 "rcparse.y"
{
	    yyval.menuitem = define_menuitem (yyvsp[-3].s, yyvsp[-2].il, yyvsp[-1].il, yyvsp[0].il, 0, NULL);
	  ;
    break;}
case 144:
#line 1018 "rcparse.y"
{
 	    yyval.menuitem = define_menuitem (NULL, 0, 0, 0, 0, NULL);
 	  ;
    break;}
case 145:
#line 1022 "rcparse.y"
{
	    yyval.menuitem = define_menuitem (yyvsp[-3].s, 0, 0, 0, 0, yyvsp[-1].menuitem);
	  ;
    break;}
case 146:
#line 1026 "rcparse.y"
{
	    yyval.menuitem = define_menuitem (yyvsp[-4].s, yyvsp[-3].il, 0, 0, 0, yyvsp[-1].menuitem);
	  ;
    break;}
case 147:
#line 1030 "rcparse.y"
{
	    yyval.menuitem = define_menuitem (yyvsp[-5].s, yyvsp[-4].il, yyvsp[-3].il, 0, 0, yyvsp[-1].menuitem);
	  ;
    break;}
case 148:
#line 1035 "rcparse.y"
{
	    yyval.menuitem = define_menuitem (yyvsp[-7].s, yyvsp[-6].il, yyvsp[-5].il, yyvsp[-4].il, yyvsp[-3].il, yyvsp[-1].menuitem);
	  ;
    break;}
case 149:
#line 1044 "rcparse.y"
{
	    define_messagetable (yyvsp[-3].id, &yyvsp[-1].res_info, yyvsp[0].s);
	  ;
    break;}
case 150:
#line 1053 "rcparse.y"
{
	    define_rcdata (yyvsp[-5].id, &yyvsp[-3].res_info, yyvsp[-1].rcdata.first);
	  ;
    break;}
case 151:
#line 1062 "rcparse.y"
{
	    rcparse_rcdata ();
	  ;
    break;}
case 152:
#line 1066 "rcparse.y"
{
	    rcparse_normal ();
	    yyval.rcdata = yyvsp[0].rcdata;
	  ;
    break;}
case 153:
#line 1074 "rcparse.y"
{
	    yyval.rcdata.first = NULL;
	    yyval.rcdata.last = NULL;
	  ;
    break;}
case 154:
#line 1079 "rcparse.y"
{
	    yyval.rcdata = yyvsp[0].rcdata;
	  ;
    break;}
case 155:
#line 1086 "rcparse.y"
{
	    struct rcdata_item *ri;

	    ri = define_rcdata_string (yyvsp[0].ss.s, yyvsp[0].ss.length);
	    yyval.rcdata.first = ri;
	    yyval.rcdata.last = ri;
	  ;
    break;}
case 156:
#line 1094 "rcparse.y"
{
	    struct rcdata_item *ri;

	    ri = define_rcdata_number (yyvsp[0].i.val, yyvsp[0].i.dword);
	    yyval.rcdata.first = ri;
	    yyval.rcdata.last = ri;
	  ;
    break;}
case 157:
#line 1102 "rcparse.y"
{
	    struct rcdata_item *ri;

	    ri = define_rcdata_string (yyvsp[0].ss.s, yyvsp[0].ss.length);
	    yyval.rcdata.first = yyvsp[-2].rcdata.first;
	    yyvsp[-2].rcdata.last->next = ri;
	    yyval.rcdata.last = ri;
	  ;
    break;}
case 158:
#line 1111 "rcparse.y"
{
	    struct rcdata_item *ri;

	    ri = define_rcdata_number (yyvsp[0].i.val, yyvsp[0].i.dword);
	    yyval.rcdata.first = yyvsp[-2].rcdata.first;
	    yyvsp[-2].rcdata.last->next = ri;
	    yyval.rcdata.last = ri;
	  ;
    break;}
case 159:
#line 1125 "rcparse.y"
{ sub_res_info = yyvsp[-1].res_info; ;
    break;}
case 162:
#line 1132 "rcparse.y"
{
	    define_stringtable (&sub_res_info, yyvsp[-1].il, yyvsp[0].s);
	  ;
    break;}
case 163:
#line 1136 "rcparse.y"
{
	    define_stringtable (&sub_res_info, yyvsp[-2].il, yyvsp[0].s);
	  ;
    break;}
case 164:
#line 1146 "rcparse.y"
{
	    define_user_data (yyvsp[-5].id, yyvsp[-4].id, &yyvsp[-3].res_info, yyvsp[-1].rcdata.first);
	  ;
    break;}
case 165:
#line 1150 "rcparse.y"
{
	    define_user_file (yyvsp[-3].id, yyvsp[-2].id, &yyvsp[-1].res_info, yyvsp[0].s);
	  ;
    break;}
case 166:
#line 1159 "rcparse.y"
{
	    define_versioninfo (yyvsp[-5].id, language, yyvsp[-3].fixver, yyvsp[-1].verinfo);
	  ;
    break;}
case 167:
#line 1166 "rcparse.y"
{
	    yyval.fixver = ((struct fixed_versioninfo *)
		  res_alloc (sizeof (struct fixed_versioninfo)));
	    memset (yyval.fixver, 0, sizeof (struct fixed_versioninfo));
	  ;
    break;}
case 168:
#line 1172 "rcparse.y"
{
	    yyvsp[-5].fixver->file_version_ms = (yyvsp[-3].il << 16) | yyvsp[-2].il;
	    yyvsp[-5].fixver->file_version_ls = (yyvsp[-1].il << 16) | yyvsp[0].il;
	    yyval.fixver = yyvsp[-5].fixver;
	  ;
    break;}
case 169:
#line 1178 "rcparse.y"
{
	    yyvsp[-5].fixver->product_version_ms = (yyvsp[-3].il << 16) | yyvsp[-2].il;
	    yyvsp[-5].fixver->product_version_ls = (yyvsp[-1].il << 16) | yyvsp[0].il;
	    yyval.fixver = yyvsp[-5].fixver;
	  ;
    break;}
case 170:
#line 1184 "rcparse.y"
{
	    yyvsp[-2].fixver->file_flags_mask = yyvsp[0].il;
	    yyval.fixver = yyvsp[-2].fixver;
	  ;
    break;}
case 171:
#line 1189 "rcparse.y"
{
	    yyvsp[-2].fixver->file_flags = yyvsp[0].il;
	    yyval.fixver = yyvsp[-2].fixver;
	  ;
    break;}
case 172:
#line 1194 "rcparse.y"
{
	    yyvsp[-2].fixver->file_os = yyvsp[0].il;
	    yyval.fixver = yyvsp[-2].fixver;
	  ;
    break;}
case 173:
#line 1199 "rcparse.y"
{
	    yyvsp[-2].fixver->file_type = yyvsp[0].il;
	    yyval.fixver = yyvsp[-2].fixver;
	  ;
    break;}
case 174:
#line 1204 "rcparse.y"
{
	    yyvsp[-2].fixver->file_subtype = yyvsp[0].il;
	    yyval.fixver = yyvsp[-2].fixver;
	  ;
    break;}
case 175:
#line 1218 "rcparse.y"
{
	    yyval.verinfo = NULL;
	  ;
    break;}
case 176:
#line 1222 "rcparse.y"
{
	    yyval.verinfo = append_ver_stringfileinfo (yyvsp[-7].verinfo, yyvsp[-4].s, yyvsp[-2].verstring);
	  ;
    break;}
case 177:
#line 1226 "rcparse.y"
{
	    yyval.verinfo = append_ver_varfileinfo (yyvsp[-6].verinfo, yyvsp[-2].s, yyvsp[-1].vervar);
	  ;
    break;}
case 178:
#line 1233 "rcparse.y"
{
	    yyval.verstring = NULL;
	  ;
    break;}
case 179:
#line 1237 "rcparse.y"
{
	    yyval.verstring = append_verval (yyvsp[-4].verstring, yyvsp[-2].s, yyvsp[0].s);
	  ;
    break;}
case 180:
#line 1244 "rcparse.y"
{
	    yyval.vervar = NULL;
	  ;
    break;}
case 181:
#line 1248 "rcparse.y"
{
	    yyval.vervar = append_vertrans (yyvsp[-2].vervar, yyvsp[-1].il, yyvsp[0].il);
	  ;
    break;}
case 182:
#line 1257 "rcparse.y"
{
	    yyval.id.named = 0;
	    yyval.id.u.id = yyvsp[0].il;
	  ;
    break;}
case 183:
#line 1262 "rcparse.y"
{
	    char *copy, *s;

	    /* It seems that resource ID's are forced to upper case.  */
	    copy = xstrdup (yyvsp[0].s);
	    for (s = copy; *s != '\0'; s++)
	      if (islower ((unsigned char) *s))
		*s = toupper ((unsigned char) *s);
	    res_string_to_id (&yyval.id, copy);
	    free (copy);
	  ;
    break;}
case 184:
#line 1280 "rcparse.y"
{
	    memset (&yyval.res_info, 0, sizeof (struct res_res_info));
	    yyval.res_info.language = language;
	    /* FIXME: Is this the right default?  */
	    yyval.res_info.memflags = MEMFLAG_MOVEABLE;
	  ;
    break;}
case 185:
#line 1287 "rcparse.y"
{
	    yyval.res_info = yyvsp[-1].res_info;
	    yyval.res_info.memflags |= yyvsp[0].memflags.on;
	    yyval.res_info.memflags &=~ yyvsp[0].memflags.off;
	  ;
    break;}
case 186:
#line 1293 "rcparse.y"
{
	    yyval.res_info = yyvsp[-2].res_info;
	    yyval.res_info.characteristics = yyvsp[0].il;
	  ;
    break;}
case 187:
#line 1298 "rcparse.y"
{
	    yyval.res_info = yyvsp[-3].res_info;
	    yyval.res_info.language = yyvsp[-1].il | (yyvsp[0].il << 8);
	  ;
    break;}
case 188:
#line 1303 "rcparse.y"
{
	    yyval.res_info = yyvsp[-2].res_info;
	    yyval.res_info.version = yyvsp[0].il;
	  ;
    break;}
case 189:
#line 1313 "rcparse.y"
{
	    memset (&yyval.res_info, 0, sizeof (struct res_res_info));
	    yyval.res_info.language = language;
	    yyval.res_info.memflags = MEMFLAG_MOVEABLE | MEMFLAG_DISCARDABLE;
	  ;
    break;}
case 190:
#line 1319 "rcparse.y"
{
	    yyval.res_info = yyvsp[-1].res_info;
	    yyval.res_info.memflags |= yyvsp[0].memflags.on;
	    yyval.res_info.memflags &=~ yyvsp[0].memflags.off;
	  ;
    break;}
case 191:
#line 1330 "rcparse.y"
{
	    memset (&yyval.res_info, 0, sizeof (struct res_res_info));
	    yyval.res_info.language = language;
	    yyval.res_info.memflags = MEMFLAG_MOVEABLE;
	  ;
    break;}
case 192:
#line 1336 "rcparse.y"
{
	    yyval.res_info = yyvsp[-1].res_info;
	    yyval.res_info.memflags |= yyvsp[0].memflags.on;
	    yyval.res_info.memflags &=~ yyvsp[0].memflags.off;
	  ;
    break;}
case 193:
#line 1348 "rcparse.y"
{
	    yyval.memflags.on = MEMFLAG_MOVEABLE;
	    yyval.memflags.off = 0;
	  ;
    break;}
case 194:
#line 1353 "rcparse.y"
{
	    yyval.memflags.on = 0;
	    yyval.memflags.off = MEMFLAG_MOVEABLE;
	  ;
    break;}
case 195:
#line 1358 "rcparse.y"
{
	    yyval.memflags.on = MEMFLAG_PURE;
	    yyval.memflags.off = 0;
	  ;
    break;}
case 196:
#line 1363 "rcparse.y"
{
	    yyval.memflags.on = 0;
	    yyval.memflags.off = MEMFLAG_PURE;
	  ;
    break;}
case 197:
#line 1368 "rcparse.y"
{
	    yyval.memflags.on = MEMFLAG_PRELOAD;
	    yyval.memflags.off = 0;
	  ;
    break;}
case 198:
#line 1373 "rcparse.y"
{
	    yyval.memflags.on = 0;
	    yyval.memflags.off = MEMFLAG_PRELOAD;
	  ;
    break;}
case 199:
#line 1378 "rcparse.y"
{
	    yyval.memflags.on = MEMFLAG_DISCARDABLE;
	    yyval.memflags.off = 0;
	  ;
    break;}
case 200:
#line 1388 "rcparse.y"
{
	    yyval.s = yyvsp[0].s;
	  ;
    break;}
case 201:
#line 1392 "rcparse.y"
{
	    yyval.s = yyvsp[0].s;
	  ;
    break;}
case 202:
#line 1409 "rcparse.y"
{
	    style |= yyvsp[0].il;
	  ;
    break;}
case 203:
#line 1413 "rcparse.y"
{
	    style &=~ yyvsp[0].il;
	  ;
    break;}
case 204:
#line 1417 "rcparse.y"
{
	    style |= yyvsp[0].il;
	  ;
    break;}
case 205:
#line 1421 "rcparse.y"
{
	    style &=~ yyvsp[0].il;
	  ;
    break;}
case 206:
#line 1428 "rcparse.y"
{
	    yyval.il = yyvsp[0].i.val;
	  ;
    break;}
case 207:
#line 1432 "rcparse.y"
{
	    yyval.il = yyvsp[-1].il;
	  ;
    break;}
case 208:
#line 1441 "rcparse.y"
{
	    yyval.il = 0;
	  ;
    break;}
case 209:
#line 1445 "rcparse.y"
{
	    yyval.il = yyvsp[0].il;
	  ;
    break;}
case 210:
#line 1454 "rcparse.y"
{
	    yyval.il = yyvsp[0].il;
	  ;
    break;}
case 211:
#line 1463 "rcparse.y"
{
	    yyval.il = yyvsp[0].i.val;
	  ;
    break;}
case 212:
#line 1472 "rcparse.y"
{
	    yyval.i = yyvsp[0].i;
	  ;
    break;}
case 213:
#line 1476 "rcparse.y"
{
	    yyval.i = yyvsp[-1].i;
	  ;
    break;}
case 214:
#line 1480 "rcparse.y"
{
	    yyval.i.val = ~ yyvsp[0].i.val;
	    yyval.i.dword = yyvsp[0].i.dword;
	  ;
    break;}
case 215:
#line 1485 "rcparse.y"
{
	    yyval.i.val = - yyvsp[0].i.val;
	    yyval.i.dword = yyvsp[0].i.dword;
	  ;
    break;}
case 216:
#line 1490 "rcparse.y"
{
	    yyval.i.val = yyvsp[-2].i.val * yyvsp[0].i.val;
	    yyval.i.dword = yyvsp[-2].i.dword || yyvsp[0].i.dword;
	  ;
    break;}
case 217:
#line 1495 "rcparse.y"
{
	    yyval.i.val = yyvsp[-2].i.val / yyvsp[0].i.val;
	    yyval.i.dword = yyvsp[-2].i.dword || yyvsp[0].i.dword;
	  ;
    break;}
case 218:
#line 1500 "rcparse.y"
{
	    yyval.i.val = yyvsp[-2].i.val % yyvsp[0].i.val;
	    yyval.i.dword = yyvsp[-2].i.dword || yyvsp[0].i.dword;
	  ;
    break;}
case 219:
#line 1505 "rcparse.y"
{
	    yyval.i.val = yyvsp[-2].i.val + yyvsp[0].i.val;
	    yyval.i.dword = yyvsp[-2].i.dword || yyvsp[0].i.dword;
	  ;
    break;}
case 220:
#line 1510 "rcparse.y"
{
	    yyval.i.val = yyvsp[-2].i.val - yyvsp[0].i.val;
	    yyval.i.dword = yyvsp[-2].i.dword || yyvsp[0].i.dword;
	  ;
    break;}
case 221:
#line 1515 "rcparse.y"
{
	    yyval.i.val = yyvsp[-2].i.val & yyvsp[0].i.val;
	    yyval.i.dword = yyvsp[-2].i.dword || yyvsp[0].i.dword;
	  ;
    break;}
case 222:
#line 1520 "rcparse.y"
{
	    yyval.i.val = yyvsp[-2].i.val ^ yyvsp[0].i.val;
	    yyval.i.dword = yyvsp[-2].i.dword || yyvsp[0].i.dword;
	  ;
    break;}
case 223:
#line 1525 "rcparse.y"
{
	    yyval.i.val = yyvsp[-2].i.val | yyvsp[0].i.val;
	    yyval.i.dword = yyvsp[-2].i.dword || yyvsp[0].i.dword;
	  ;
    break;}
case 224:
#line 1536 "rcparse.y"
{
	    yyval.il = yyvsp[0].il;
	  ;
    break;}
case 225:
#line 1545 "rcparse.y"
{
	    yyval.il = yyvsp[0].i.val;
	  ;
    break;}
case 226:
#line 1556 "rcparse.y"
{
	    yyval.i = yyvsp[0].i;
	  ;
    break;}
case 227:
#line 1560 "rcparse.y"
{
	    yyval.i = yyvsp[-1].i;
	  ;
    break;}
case 228:
#line 1564 "rcparse.y"
{
	    yyval.i.val = ~ yyvsp[0].i.val;
	    yyval.i.dword = yyvsp[0].i.dword;
	  ;
    break;}
case 229:
#line 1569 "rcparse.y"
{
	    yyval.i.val = yyvsp[-2].i.val * yyvsp[0].i.val;
	    yyval.i.dword = yyvsp[-2].i.dword || yyvsp[0].i.dword;
	  ;
    break;}
case 230:
#line 1574 "rcparse.y"
{
	    yyval.i.val = yyvsp[-2].i.val / yyvsp[0].i.val;
	    yyval.i.dword = yyvsp[-2].i.dword || yyvsp[0].i.dword;
	  ;
    break;}
case 231:
#line 1579 "rcparse.y"
{
	    yyval.i.val = yyvsp[-2].i.val % yyvsp[0].i.val;
	    yyval.i.dword = yyvsp[-2].i.dword || yyvsp[0].i.dword;
	  ;
    break;}
case 232:
#line 1584 "rcparse.y"
{
	    yyval.i.val = yyvsp[-2].i.val + yyvsp[0].i.val;
	    yyval.i.dword = yyvsp[-2].i.dword || yyvsp[0].i.dword;
	  ;
    break;}
case 233:
#line 1589 "rcparse.y"
{
	    yyval.i.val = yyvsp[-2].i.val - yyvsp[0].i.val;
	    yyval.i.dword = yyvsp[-2].i.dword || yyvsp[0].i.dword;
	  ;
    break;}
case 234:
#line 1594 "rcparse.y"
{
	    yyval.i.val = yyvsp[-2].i.val & yyvsp[0].i.val;
	    yyval.i.dword = yyvsp[-2].i.dword || yyvsp[0].i.dword;
	  ;
    break;}
case 235:
#line 1599 "rcparse.y"
{
	    yyval.i.val = yyvsp[-2].i.val ^ yyvsp[0].i.val;
	    yyval.i.dword = yyvsp[-2].i.dword || yyvsp[0].i.dword;
	  ;
    break;}
case 236:
#line 1604 "rcparse.y"
{
	    yyval.i.val = yyvsp[-2].i.val | yyvsp[0].i.val;
	    yyval.i.dword = yyvsp[-2].i.dword || yyvsp[0].i.dword;
	  ;
    break;}
}
   /* the action file gets copied in in place of this dollarsign */
#line 543 "/usr/share/misc/bison.simple"

  yyvsp -= yylen;
  yyssp -= yylen;
#ifdef YYLSP_NEEDED
  yylsp -= yylen;
#endif

#if YYDEBUG != 0
  if (yydebug)
    {
      short *ssp1 = yyss - 1;
      fprintf (stderr, "state stack now");
      while (ssp1 != yyssp)
	fprintf (stderr, " %d", *++ssp1);
      fprintf (stderr, "\n");
    }
#endif

  *++yyvsp = yyval;

#ifdef YYLSP_NEEDED
  yylsp++;
  if (yylen == 0)
    {
      yylsp->first_line = yylloc.first_line;
      yylsp->first_column = yylloc.first_column;
      yylsp->last_line = (yylsp-1)->last_line;
      yylsp->last_column = (yylsp-1)->last_column;
      yylsp->text = 0;
    }
  else
    {
      yylsp->last_line = (yylsp+yylen-1)->last_line;
      yylsp->last_column = (yylsp+yylen-1)->last_column;
    }
#endif

  /* Now "shift" the result of the reduction.
     Determine what state that goes to,
     based on the state we popped back to
     and the rule number reduced by.  */

  yyn = yyr1[yyn];

  yystate = yypgoto[yyn - YYNTBASE] + *yyssp;
  if (yystate >= 0 && yystate <= YYLAST && yycheck[yystate] == *yyssp)
    yystate = yytable[yystate];
  else
    yystate = yydefgoto[yyn - YYNTBASE];

  goto yynewstate;

yyerrlab:   /* here on detecting error */

  if (! yyerrstatus)
    /* If not already recovering from an error, report this error.  */
    {
      ++yynerrs;

#ifdef YYERROR_VERBOSE
      yyn = yypact[yystate];

      if (yyn > YYFLAG && yyn < YYLAST)
	{
	  int size = 0;
	  char *msg;
	  int x, count;

	  count = 0;
	  /* Start X at -yyn if nec to avoid negative indexes in yycheck.  */
	  for (x = (yyn < 0 ? -yyn : 0);
	       x < (sizeof(yytname) / sizeof(char *)); x++)
	    if (yycheck[x + yyn] == x)
	      size += strlen(yytname[x]) + 15, count++;
	  msg = (char *) malloc(size + 15);
	  if (msg != 0)
	    {
	      strcpy(msg, "parse error");

	      if (count < 5)
		{
		  count = 0;
		  for (x = (yyn < 0 ? -yyn : 0);
		       x < (sizeof(yytname) / sizeof(char *)); x++)
		    if (yycheck[x + yyn] == x)
		      {
			strcat(msg, count == 0 ? ", expecting `" : " or `");
			strcat(msg, yytname[x]);
			strcat(msg, "'");
			count++;
		      }
		}
	      yyerror(msg);
	      free(msg);
	    }
	  else
	    yyerror ("parse error; also virtual memory exceeded");
	}
      else
#endif /* YYERROR_VERBOSE */
	yyerror("parse error");
    }

  goto yyerrlab1;
yyerrlab1:   /* here on error raised explicitly by an action */

  if (yyerrstatus == 3)
    {
      /* if just tried and failed to reuse lookahead token after an error, discard it.  */

      /* return failure if at end of input */
      if (yychar == YYEOF)
	YYABORT;

#if YYDEBUG != 0
      if (yydebug)
	fprintf(stderr, "Discarding token %d (%s).\n", yychar, yytname[yychar1]);
#endif

      yychar = YYEMPTY;
    }

  /* Else will try to reuse lookahead token
     after shifting the error token.  */

  yyerrstatus = 3;		/* Each real token shifted decrements this */

  goto yyerrhandle;

yyerrdefault:  /* current state does not do anything special for the error token. */

#if 0
  /* This is wrong; only states that explicitly want error tokens
     should shift them.  */
  yyn = yydefact[yystate];  /* If its default is to accept any token, ok.  Otherwise pop it.*/
  if (yyn) goto yydefault;
#endif

yyerrpop:   /* pop the current state because it cannot handle the error token */

  if (yyssp == yyss) YYABORT;
  yyvsp--;
  yystate = *--yyssp;
#ifdef YYLSP_NEEDED
  yylsp--;
#endif

#if YYDEBUG != 0
  if (yydebug)
    {
      short *ssp1 = yyss - 1;
      fprintf (stderr, "Error: state stack now");
      while (ssp1 != yyssp)
	fprintf (stderr, " %d", *++ssp1);
      fprintf (stderr, "\n");
    }
#endif

yyerrhandle:

  yyn = yypact[yystate];
  if (yyn == YYFLAG)
    goto yyerrdefault;

  yyn += YYTERROR;
  if (yyn < 0 || yyn > YYLAST || yycheck[yyn] != YYTERROR)
    goto yyerrdefault;

  yyn = yytable[yyn];
  if (yyn < 0)
    {
      if (yyn == YYFLAG)
	goto yyerrpop;
      yyn = -yyn;
      goto yyreduce;
    }
  else if (yyn == 0)
    goto yyerrpop;

  if (yyn == YYFINAL)
    YYACCEPT;

#if YYDEBUG != 0
  if (yydebug)
    fprintf(stderr, "Shifting error token, ");
#endif

  *++yyvsp = yylval;
#ifdef YYLSP_NEEDED
  *++yylsp = yylloc;
#endif

  yystate = yyn;
  goto yynewstate;

 yyacceptlab:
  /* YYACCEPT comes here.  */
  if (yyfree_stacks)
    {
      free (yyss);
      free (yyvs);
#ifdef YYLSP_NEEDED
      free (yyls);
#endif
    }
  return 0;

 yyabortlab:
  /* YYABORT comes here.  */
  if (yyfree_stacks)
    {
      free (yyss);
      free (yyvs);
#ifdef YYLSP_NEEDED
      free (yyls);
#endif
    }
  return 1;
}
#line 1610 "rcparse.y"


/* Set the language from the command line.  */

void
rcparse_set_language (lang)
     int lang;
{
  language = lang;
}
@


1.1.1.1
log
@Import binutils-2.10
- only the binutils package (no gdb here)
- don't import libiberty and texinfo, they are elsewhere
- remove all .info* generated files
@
text
@@


1.1.1.2
log
@Import binutils-2.11.2
- only the binutils package (no gdb here)
- don't import libiberty and texinfo, they are elsewhere
- remove all .info* generated files
@
text
@d93 1
a93 1
   Copyright 1997, 1998, 1999, 2000 Free Software Foundation, Inc.
d199 1
a199 1
#define	YYFINAL		483
d203 1
a203 1
#define YYTRANSLATE(x) ((unsigned)(x) <= 339 ? yytranslate[x] : 191)
d252 16
a267 17
   319,   323,   324,   328,   335,   344,   355,   367,   368,   372,
   373,   377,   378,   382,   383,   387,   388,   392,   393,   397,
   398,   402,   403,   407,   408,   412,   413,   430,   438,   448,
   459,   460,   462,   465,   466,   470,   471,   475,   476,   480,
   481,   485,   490,   495,   499,   506,   507,   510,   515,   518,
   525,   526,   530,   533,   535,   537,   539,   541,   543,   545,
   552,   553,   556,   559,   563,   569,   572,   578,   585,   593,
   603,   608,   615,   616,   619,   620,   622,   624,   626,   630,
   634,   635,   642,   643,   647,   652,   659,   664,   671,   672,
   679,   686,   690,   694,   698,   702,   706,   707,   716,   724,
   725,   731,   732,   736,   738,   740,   742,   745,   748,   751,
   753,   754,   757,   761,   766,   770,   771,   774,   775,   778,
   780,   782,   784,   786,   788,   790,   792,   794,   796,   798,
   801,   805,   810,   812,   816,   817,   819,   822,   824,   826,
   830,   833,   836,   840,   844,   848,   852,   856,   860,   864,
   868,   871,   873,   875,   879,   882,   886,   890,   894,   898,
   902,   906,   910
d277 3
a279 3
     0,   174,     5,   177,     3,   102,     4,     0,     0,   102,
   103,     0,   104,   188,     0,   104,   188,    95,   105,     0,
    80,     0,   189,     0,   106,     0,   105,    95,   106,     0,
d281 12
a292 12
     0,    10,     0,    11,     0,   174,    12,   179,   181,     0,
   174,    13,   178,   181,     0,     0,   174,    14,   179,   113,
   189,   185,   185,   185,   110,   114,     3,   116,     4,     0,
     0,   174,    15,   179,   113,   189,   185,   185,   185,   111,
   114,     3,   116,     4,     0,     0,   174,    15,   179,   113,
   189,   185,   185,   185,   185,   112,   114,     3,   116,     4,
     0,     0,    16,    96,   186,     0,     0,   114,    17,    80,
     0,   114,    18,   174,     0,     0,   114,    19,   115,   182,
     0,   114,    16,   186,     0,   114,    41,   186,    95,    80,
     0,   114,    41,   186,    95,    80,   185,   185,     0,   114,
    46,   174,     0,   114,    44,   186,     0,   114,    43,   186,
   185,     0,   114,    45,   186,     0,     0,   116,   117,     0,
d296 5
a300 5
    10,   140,   186,   185,   142,   185,   185,   185,   185,   184,
   141,     0,    10,   140,   186,   185,   142,   185,   185,   185,
   185,   185,   185,   141,     0,    10,   140,   186,    95,    80,
   142,   185,   185,   185,   185,   184,   141,     0,    10,   140,
   186,    95,    80,   142,   185,   185,   185,   185,   185,   185,
d303 57
a359 60
   139,     0,     0,    39,   128,   139,     0,    42,   176,   186,
   185,   185,   141,     0,    42,   176,   186,   185,   185,   185,
   185,   141,     0,    42,   176,   186,   185,   185,   185,   185,
   144,   184,   141,     0,    42,   176,   186,   185,   185,   185,
   185,   144,   185,   185,   141,     0,     0,    40,   129,   139,
     0,     0,    29,   130,   139,     0,     0,    30,   131,   139,
     0,     0,    31,   132,   139,     0,     0,    32,   133,   139,
     0,     0,    33,   134,   139,     0,     0,    34,   135,   139,
     0,     0,    35,   136,   139,     0,     0,    36,   137,   139,
     0,     0,    37,    80,    95,   186,    95,   186,    95,   186,
    95,   186,    95,   186,    95,   138,   182,   184,     0,   140,
   186,   185,   185,   185,   185,   141,     0,   140,   186,   185,
   185,   185,   185,   146,   184,   141,     0,   140,   186,   185,
   185,   185,   185,   146,   185,   185,   141,     0,     0,    80,
     0,    80,    95,     0,     0,     3,   161,     4,     0,     0,
    95,   143,   182,     0,     0,    95,   145,   182,     0,     0,
    95,   147,   182,     0,   174,    41,   178,   181,     0,   174,
    42,   178,   181,     0,    43,   186,   185,     0,   174,    46,
   177,     3,   152,     4,     0,     0,   152,   153,     0,    48,
    80,   185,   154,     0,    48,    49,     0,    50,    80,   154,
     3,   152,     4,     0,     0,   154,    95,   155,     0,   154,
   155,     0,    51,     0,    52,     0,    53,     0,    54,     0,
    55,     0,    56,     0,   174,    47,   177,     3,   157,     4,
     0,     0,   157,   158,     0,    48,    80,     0,    48,    80,
   185,     0,    48,    80,   185,   185,   184,     0,    48,    49,
     0,    50,    80,     3,   157,     4,     0,    50,    80,   185,
     3,   157,     4,     0,    50,    80,   185,   185,     3,   157,
     4,     0,    50,    80,   185,   185,   185,   184,     3,   157,
     4,     0,   174,    57,   179,   181,     0,   174,    58,   177,
     3,   161,     4,     0,     0,   162,   163,     0,     0,   164,
     0,    83,     0,   187,     0,   164,    95,    83,     0,   164,
    95,   187,     0,     0,    59,   177,     3,   166,   167,     4,
     0,     0,   167,   186,    80,     0,   167,   186,    95,    80,
     0,   174,   174,   177,     3,   161,     4,     0,   174,   174,
   177,   181,     0,   174,    60,   170,     3,   171,     4,     0,
     0,   170,    61,   186,   185,   185,   185,     0,   170,    62,
   186,   185,   185,   185,     0,   170,    63,   186,     0,   170,
    64,   186,     0,   170,    65,   186,     0,   170,    66,   186,
     0,   170,    67,   186,     0,     0,   171,    68,     3,    71,
     3,   172,     4,     4,     0,   171,    69,     3,    70,    80,
   173,     4,     0,     0,   172,    70,    80,    95,    80,     0,
     0,   173,   185,   185,     0,   189,     0,    81,     0,    80,
     0,    80,    95,     0,    81,    95,     0,   189,    95,     0,
   175,     0,     0,   177,   180,     0,   177,    44,   186,     0,
   177,    43,   186,   185,     0,   177,    45,   186,     0,     0,
   178,   180,     0,     0,   179,   180,     0,    72,     0,    73,
     0,    74,     0,    75,     0,    76,     0,    77,     0,    78,
     0,    80,     0,    81,     0,   183,     0,    79,   183,     0,
   182,    85,   183,     0,   182,    85,    79,   183,     0,    82,
     0,    97,   186,    98,     0,     0,   185,     0,    95,   186,
     0,   187,     0,    82,     0,    97,   187,    98,     0,    93,
   187,     0,    89,   187,     0,   187,    90,   187,     0,   187,
    91,   187,     0,   187,    92,   187,     0,   187,    88,   187,
     0,   187,    89,   187,     0,   187,    87,   187,     0,   187,
    86,   187,     0,   187,    85,   187,     0,    95,   189,     0,
   190,     0,    82,     0,    97,   187,    98,     0,    93,   187,
     0,   190,    90,   187,     0,   190,    91,   187,     0,   190,
    92,   187,     0,   190,    88,   187,     0,   190,    89,   187,
     0,   190,    87,   187,     0,   190,    86,   187,     0,   190,
    85,   187,     0
d374 16
a389 17
   623,   626,   633,   639,   644,   650,   656,   662,   669,   675,
   682,   685,   692,   695,   702,   705,   712,   715,   722,   725,
   732,   735,   742,   745,   752,   755,   758,   772,   785,   796,
   807,   812,   816,   822,   827,   835,   839,   841,   845,   847,
   851,   855,   864,   874,   883,   890,   895,   911,   916,   920,
   926,   931,   935,   941,   946,   950,   954,   958,   962,   970,
   977,   982,   998,  1003,  1007,  1011,  1015,  1019,  1023,  1027,
  1036,  1045,  1055,  1060,  1066,  1072,  1078,  1087,  1095,  1104,
  1117,  1120,  1123,  1125,  1129,  1138,  1143,  1151,  1158,  1165,
  1171,  1177,  1182,  1187,  1192,  1197,  1210,  1215,  1219,  1225,
  1230,  1236,  1241,  1249,  1255,  1271,  1276,  1280,  1287,  1293,
  1310,  1318,  1324,  1329,  1334,  1343,  1350,  1360,  1367,  1378,
  1384,  1389,  1394,  1399,  1404,  1409,  1418,  1423,  1439,  1444,
  1448,  1452,  1458,  1463,  1471,  1476,  1484,  1493,  1502,  1507,
  1511,  1516,  1521,  1526,  1531,  1536,  1541,  1546,  1551,  1556,
  1566,  1575,  1586,  1591,  1595,  1600,  1605,  1610,  1615,  1620,
  1625,  1630,  1635
d418 3
a420 3
"id","resname","resref","suboptions","memflags_move_discard","memflags_move",
"memflag","file_name","styleexpr","parennumber","optcnumexpr","cnumexpr","numexpr",
"sizednumexpr","cposnumexpr","posnumexpr","sizedposnumexpr", NULL
d433 16
a448 17
   117,   128,   117,   117,   117,   117,   117,   129,   117,   130,
   117,   131,   117,   132,   117,   133,   117,   134,   117,   135,
   117,   136,   117,   137,   117,   138,   117,   139,   139,   139,
   140,   140,   140,   141,   141,   143,   142,   145,   144,   147,
   146,   148,   149,   150,   151,   152,   152,   153,   153,   153,
   154,   154,   154,   155,   155,   155,   155,   155,   155,   156,
   157,   157,   158,   158,   158,   158,   158,   158,   158,   158,
   159,   160,   162,   161,   163,   163,   164,   164,   164,   164,
   166,   165,   167,   167,   167,   168,   168,   169,   170,   170,
   170,   170,   170,   170,   170,   170,   171,   171,   171,   172,
   172,   173,   173,   174,   174,   175,   175,   175,   176,   176,
   177,   177,   177,   177,   177,   178,   178,   179,   179,   180,
   180,   180,   180,   180,   180,   180,   181,   181,   182,   182,
   182,   182,   183,   183,   184,   184,   185,   186,   187,   187,
   187,   187,   187,   187,   187,   187,   187,   187,   187,   187,
   188,   189,   190,   190,   190,   190,   190,   190,   190,   190,
   190,   190,   190
d460 16
a475 17
     3,     0,     3,     6,     8,    10,    11,     0,     3,     0,
     3,     0,     3,     0,     3,     0,     3,     0,     3,     0,
     3,     0,     3,     0,     3,     0,    16,     7,     9,    10,
     0,     1,     2,     0,     3,     0,     3,     0,     3,     0,
     3,     4,     4,     3,     6,     0,     2,     4,     2,     6,
     0,     3,     2,     1,     1,     1,     1,     1,     1,     6,
     0,     2,     2,     3,     5,     2,     5,     6,     7,     9,
     4,     6,     0,     2,     0,     1,     1,     1,     3,     3,
     0,     6,     0,     3,     4,     6,     4,     6,     0,     6,
     6,     3,     3,     3,     3,     3,     0,     8,     7,     0,
     5,     0,     3,     1,     1,     1,     2,     2,     2,     1,
     0,     2,     3,     4,     3,     0,     2,     0,     2,     1,
     1,     1,     1,     1,     1,     1,     1,     1,     1,     2,
     3,     4,     1,     3,     0,     1,     2,     1,     1,     3,
     2,     2,     3,     3,     3,     3,     3,     3,     3,     3,
     2,     1,     1,     3,     2,     3,     3,     3,     3,     3,
     3,     3,     3
d479 1
a479 1
    17,     0,     0,   191,   185,   233,    16,     0,     0,     2,
d481 46
a526 47
    13,    14,    15,     0,   184,   232,   219,     0,     0,     0,
     0,   218,     0,   235,     0,   191,   198,   196,   198,   198,
   196,   196,   191,   191,   198,   191,   169,   191,     0,     0,
     0,     0,     0,     0,     0,     0,   222,   221,     0,     0,
   124,     0,     0,     0,     0,     0,     0,     0,     0,   161,
     0,     0,     0,   200,   201,   202,   203,   204,   205,   206,
   192,   234,     0,     0,     0,    42,    42,     0,     0,     0,
     0,     0,     0,     0,     0,   243,   242,   241,   239,   240,
   236,   237,   238,   220,   217,   230,   229,   228,   226,   227,
   223,   224,   225,   163,     0,   193,   195,    19,   207,   208,
   199,    34,   197,    35,     0,     0,     0,   122,   123,   126,
   141,   151,   153,   177,     0,     0,     0,     0,     0,     0,
     0,   153,   167,     0,   194,     0,     0,     0,     0,     0,
     0,     0,   155,     0,     0,     0,   172,   173,   174,   175,
   176,     0,   162,     0,    18,    23,    20,     0,    24,    43,
     0,     0,   125,     0,     0,   127,   140,     0,     0,   142,
   152,   157,   154,   156,   158,   168,     0,     0,     0,     0,
   166,   164,     0,     0,    21,     0,     0,   129,     0,   131,
   146,   143,     0,     0,     0,     0,     0,     0,   165,   231,
     0,    36,    38,   131,     0,   144,   141,     0,   159,   160,
     0,     0,   170,   171,    28,    29,    30,    31,    32,    33,
    22,    25,    44,    44,    40,   128,   126,   134,   135,   136,
   137,   138,   139,     0,   133,   215,     0,   141,     0,   180,
   182,     0,    27,     0,     0,    44,     0,   132,   145,   216,
   147,     0,   141,   215,     0,     0,    26,    56,     0,     0,
     0,    47,     0,     0,     0,     0,     0,    56,     0,   130,
   148,     0,     0,     0,     0,   179,     0,     0,    49,    45,
    46,     0,     0,     0,    53,    55,    52,     0,    56,   149,
   141,   178,     0,   183,    37,   111,    58,    60,    62,    66,
    68,    74,    76,    78,    80,    90,    92,    94,    96,    98,
   100,   102,   104,     0,    64,    82,    88,     0,    57,     0,
   213,     0,    48,   209,     0,    54,    39,     0,     0,     0,
   112,     0,   111,   111,   111,   111,   111,   111,   111,   111,
   111,   111,   111,   111,   111,   111,   111,   111,   111,     0,
   111,   111,   111,   186,     0,   190,     0,     0,   210,     0,
     0,    50,    41,   150,   181,   113,     0,    59,     0,    61,
    63,    67,    69,    75,    77,    79,    81,    91,    93,    95,
    97,    99,   101,   103,   105,     0,    65,    83,    89,   187,
   188,     0,   189,   214,     0,   211,     0,     0,     0,     0,
     0,     0,   212,    51,     0,   116,     0,     0,     0,   114,
     0,     0,     0,     0,     0,   153,    84,     0,     0,   117,
     0,     0,     0,     0,   114,     0,     0,   114,     0,   115,
   118,    85,   215,     0,   215,   120,   108,   215,     0,     0,
   114,   216,   215,   114,   216,     0,   114,   216,     0,   119,
    86,   114,   114,   216,    70,   114,   121,   109,   114,     0,
    87,    72,   114,    71,   110,     0,    73,   106,     0,   215,
   107,     0,     0
d533 2
a534 2
   352,   353,   354,   355,   356,   357,   358,   359,   479,   378,
   379,   427,   417,   422,   443,   450,   448,   456,    14,    15,
d537 2
a538 3
    94,   154,   265,   266,    24,   366,   367,    33,    85,    84,
    81,   122,   333,   334,   259,   260,   105,    32,   195,    25,
    26
d542 1
a542 1
    31,   240,   241,-32768,-32768,-32768,-32768,   241,   241,-32768,
d544 29
a572 29
-32768,-32768,-32768,    68,-32768,   578,-32768,   241,   241,   241,
   -73,   586,   169,-32768,   388,-32768,-32768,-32768,-32768,-32768,
-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,   241,   241,
   241,   241,   241,   241,   241,   241,-32768,-32768,   513,   241,
-32768,   241,   241,   241,   241,   241,   241,   241,   241,-32768,
   241,   241,   241,-32768,-32768,-32768,-32768,-32768,-32768,-32768,
-32768,-32768,   215,   581,   581,   268,   268,   581,   581,   232,
   275,   581,   283,   250,   156,   593,   599,   616,    98,    98,
-32768,-32768,-32768,-32768,-32768,   593,   599,   616,    98,    98,
-32768,-32768,-32768,-32768,   -73,-32768,-32768,-32768,-32768,-32768,
-32768,-32768,-32768,-32768,   -61,   290,   290,-32768,-32768,-32768,
-32768,-32768,-32768,-32768,   241,   241,   241,   241,   241,   241,
   241,-32768,-32768,     4,-32768,     5,   241,   -73,   -73,     9,
    92,    32,   309,    10,   -73,   -73,-32768,-32768,-32768,-32768,
-32768,    54,-32768,   -57,-32768,-32768,-32768,   -20,-32768,-32768,
   -73,   -73,-32768,    39,    -9,-32768,-32768,    40,    11,-32768,
-32768,-32768,-32768,    36,   586,-32768,   145,   151,   -73,   -73,
-32768,-32768,    78,   290,    79,   -73,   -73,-32768,   -73,-32768,
-32768,   -73,    16,   365,   106,   108,   -73,   -73,-32768,-32768,
   686,-32768,   -73,-32768,    52,   -73,-32768,    17,-32768,   586,
   178,   128,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,
    34,-32768,-32768,-32768,-32768,   314,-32768,-32768,-32768,-32768,
-32768,-32768,-32768,   647,-32768,   -73,    95,-32768,    18,-32768,
-32768,   686,-32768,   150,   378,-32768,   112,-32768,-32768,-32768,
-32768,   123,-32768,   -73,     6,    29,-32768,-32768,   241,   129,
   281,-32768,   241,   241,   241,   241,   281,-32768,   452,-32768,
-32768,   135,   200,   213,   143,-32768,   -73,   479,-32768,-32768,
-32768,   182,    91,   -73,-32768,-32768,-32768,   516,-32768,-32768,
-32768,-32768,   130,-32768,-32768,   147,-32768,-32768,-32768,-32768,
d574 6
a579 6
-32768,-32768,-32768,   158,-32768,-32768,-32768,   170,-32768,    73,
-32768,   241,   154,-32768,   160,-32768,-32768,   553,   172,   168,
   161,   241,   147,   147,   147,   147,   147,   147,   147,   147,
   147,   147,   147,   147,   147,   147,   147,   147,   147,   173,
   147,   147,   147,   174,   186,-32768,   241,   187,-32768,   196,
   183,   -73,-32768,-32768,-32768,-32768,   201,-32768,   241,-32768,
d581 9
a589 10
-32768,-32768,-32768,-32768,-32768,   241,-32768,-32768,-32768,-32768,
-32768,   -73,-32768,-32768,    73,-32768,   -73,   293,   202,   -73,
   203,   -73,-32768,-32768,   202,-32768,   -73,   -73,   241,    22,
   -73,   182,   -73,   -73,   205,-32768,-32768,   -73,   -73,   154,
   -73,   -73,   241,   297,    26,   -73,   -73,    27,   208,-32768,
-32768,-32768,   -73,   -73,   -73,-32768,-32768,   -73,   241,   182,
   251,   -73,   -73,   251,   -73,   182,   251,   -73,   230,   154,
-32768,   251,   251,   -73,-32768,   251,   154,-32768,   251,   241,
-32768,-32768,   251,-32768,-32768,   236,-32768,-32768,   182,   -11,
-32768,   332,-32768
d593 2
a594 2
-32768,-32768,-32768,-32768,-32768,-32768,  -220,-32768,-32768,-32768,
-32768,-32768,-32768,   248,  -222,-32768,  -262,-32768,-32768,-32768,
d596 3
a598 3
-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,   289,
    30,   159,   -44,-32768,-32768,-32768,-32768,-32768,-32768,-32768,
-32768,-32768,   117,-32768,   163,   140,-32768,  -171,-32768,-32768,
d600 2
a601 3
-32768,-32768,-32768,-32768,   -22,-32768,-32768,   486,   -24,    55,
   480,   316,  -304,  -315,  -261,     8,    -3,    -2,-32768,  -122,
-32768
d605 1
a605 1
#define	YYLAST		708
d609 6
a614 6
   162,    48,   283,   148,   149,    34,    35,   163,   165,   284,
   253,   255,   173,   186,   369,   298,    88,    89,   217,   248,
   263,    60,   192,   169,   426,    57,    58,    59,   426,   426,
   482,   267,   286,   279,   147,   181,   338,   193,    61,   225,
   226,   227,   228,   229,   230,   247,    96,    97,    98,    99,
   100,   101,   102,   103,   237,   406,   174,   191,   175,   106,
d616 48
a663 43
   200,   210,    36,   371,   194,   285,   262,   187,   188,    37,
    38,    39,    40,    60,   166,    27,     6,   198,   201,   413,
   203,   282,    28,    86,    87,   177,    29,     8,   261,    92,
    30,     9,   238,   239,   240,   241,   242,   243,    41,    42,
    60,    60,    60,    43,    44,   280,    60,   430,   199,   202,
   441,   446,   145,    60,    45,    46,   281,    47,   252,   339,
   204,   155,   156,   157,   158,   159,   160,   161,   300,   178,
   164,   179,   178,   170,   179,   460,   244,   205,     5,     6,
   185,   467,   268,   206,   331,   171,   172,   209,   142,   174,
     8,   175,   189,   190,     9,   269,   270,   271,   272,   332,
   178,    70,   179,   211,   480,   374,   221,   222,   196,   197,
   250,   451,   178,   454,   179,   335,   457,    67,    68,    69,
   273,   463,   274,   275,   276,   277,   207,   208,    71,    72,
    73,   220,   301,   212,   213,   368,   214,   251,   290,   216,
   218,    71,    72,    73,   223,   224,   302,   118,   481,   178,
   235,   179,   303,   246,   340,   249,   341,    74,    75,    76,
    77,    78,    79,    80,   130,   119,   120,   360,   371,   372,
    74,    75,    76,    77,    78,    79,    80,   375,   291,   364,
   365,     6,   134,   426,   297,   376,   264,    71,    72,    73,
   330,   405,     8,   331,   331,   289,     9,   396,   400,   293,
   294,   295,   296,   287,    71,    72,    73,   131,   332,   332,
   401,   403,     3,   125,   434,   133,    74,    75,    76,    77,
    78,    79,    80,   404,   304,   408,   416,   419,     4,   433,
   440,   336,   449,    74,    75,    76,    77,    78,    79,    80,
   135,   136,   137,   138,   139,   140,   141,    71,    72,    73,
     5,     6,    27,     7,   470,    71,    72,    73,   370,    28,
   478,   483,     8,    29,   127,   342,     9,    30,   377,    74,
    75,    76,    77,    78,    79,    80,    74,    75,    76,    77,
    78,    79,    80,   257,    74,    75,    76,    77,    78,    79,
    80,     5,     6,   402,   238,   239,   240,   241,   242,   243,
   421,     6,   415,     8,    27,   410,   236,     9,     0,   407,
   278,    28,     8,   258,   409,    29,     9,     0,     0,    30,
    27,   182,   411,   269,   270,   271,   272,    28,     0,     0,
   124,    29,     0,   128,   129,    30,     0,   132,   244,   412,
   143,     0,     0,     0,   414,   425,     0,   418,   273,   420,
   274,   275,   276,   277,   423,   424,     0,   428,   429,   439,
   431,   432,     0,     0,     0,   435,   436,     0,   437,   438,
     0,     0,     0,   444,   445,   459,    27,   219,     0,     0,
   452,   453,   455,    28,   299,   458,     0,    29,     0,   462,
   464,    30,   466,     0,     0,   469,   476,   269,   270,   271,
   272,   473,    62,    63,    64,    65,    66,    67,    68,    69,
     0,     0,   305,     0,     0,    82,     0,     0,   306,     0,
     0,     0,   273,     0,   274,   275,   276,   277,   307,   308,
d665 3
a667 3
   319,   320,   321,   322,   323,   324,   325,   326,   327,   337,
   328,    83,     0,     0,     0,   306,     0,     0,    90,    91,
     0,    93,     0,    95,     0,   307,   308,   309,   310,   311,
d669 12
a680 16
   322,   323,   324,   325,   326,   327,   373,   328,     0,     0,
     0,     0,   306,   121,   123,   121,   121,   123,   123,     0,
     0,   121,   307,   308,   309,   310,   311,   312,   313,   314,
   315,   316,   317,   318,   319,   320,   321,   322,   323,   324,
   325,   326,   327,   442,   328,     0,   447,    62,    63,    64,
    65,    66,    67,    68,    69,     0,     0,     0,     0,   461,
   104,     0,   465,     0,     0,   468,     0,     0,     0,     0,
   471,   472,     0,     0,   474,     0,     0,   475,     0,     0,
     0,   477,   380,   381,   382,   383,   384,   385,   386,   387,
   388,   389,   390,   391,   392,   393,   394,   395,     0,   397,
   398,   399,    74,    75,    76,    77,    78,    79,    80,     0,
   119,   120,    49,    50,    51,    52,    53,    54,    55,    56,
    62,    63,    64,    65,    66,    67,    68,    69,    63,    64,
    65,    66,    67,    68,    69,    64,    65,    66,    67,    68,
    69,   225,   226,   227,   228,   229,   230,   238,   239,   240,
   241,   242,   243,    65,    66,    67,    68,    69
d684 6
a689 6
   142,    24,   264,   126,   127,     8,     9,     4,     4,     4,
   231,   234,     4,     4,   330,   278,    41,    42,     3,     3,
     3,    95,    80,   146,     3,    28,    29,    30,     3,     3,
     0,   252,     4,   256,    96,     4,   299,    95,    31,     6,
     7,     8,     9,    10,    11,   217,    49,    50,    51,    52,
    53,    54,    55,    56,     3,   371,    48,     4,    50,    62,
d691 48
a738 43
    80,   194,     5,    85,    95,    70,   248,    68,    69,    12,
    13,    14,    15,    95,    80,    82,    82,    49,    49,   405,
    80,   263,    89,    39,    40,     4,    93,    93,     4,    45,
    97,    97,    51,    52,    53,    54,    55,    56,    41,    42,
    95,    95,    95,    46,    47,     4,    95,   422,    80,    80,
    95,    95,   115,    95,    57,    58,     4,    60,    95,   301,
    95,   135,   136,   137,   138,   139,   140,   141,     4,    48,
   144,    50,    48,   147,    50,   450,    95,     3,    81,    82,
   153,   456,     3,     3,    82,   148,   149,    80,     3,    48,
    93,    50,   155,   156,    97,    16,    17,    18,    19,    97,
    48,     3,    50,    95,   479,     4,    71,    70,   171,   172,
     3,   443,    48,   445,    50,    95,   448,    90,    91,    92,
    41,   453,    43,    44,    45,    46,   189,   190,    43,    44,
    45,   204,     3,   196,   197,   328,   199,    80,    80,   202,
   203,    43,    44,    45,   207,   208,     4,     3,   480,    48,
   213,    50,    80,   216,    95,   218,    80,    72,    73,    74,
    75,    76,    77,    78,     3,    80,    81,    80,    85,    80,
    72,    73,    74,    75,    76,    77,    78,    80,   271,    80,
    81,    82,     3,     3,   277,    95,   249,    43,    44,    45,
    79,    79,    93,    82,    82,   269,    97,    95,    95,   273,
   274,   275,   276,   266,    43,    44,    45,     3,    97,    97,
    95,    95,    43,    16,   426,     3,    72,    73,    74,    75,
    76,    77,    78,    98,   287,    95,    95,    95,    59,    95,
     4,   294,    95,    72,    73,    74,    75,    76,    77,    78,
    61,    62,    63,    64,    65,    66,    67,    43,    44,    45,
    81,    82,    82,    84,    95,    43,    44,    45,   332,    89,
    95,     0,    93,    93,    87,   306,    97,    97,   342,    72,
    73,    74,    75,    76,    77,    78,    72,    73,    74,    75,
    76,    77,    78,   237,    72,    73,    74,    75,    76,    77,
    78,    81,    82,   367,    51,    52,    53,    54,    55,    56,
   415,    82,    80,    93,    82,   379,   214,    97,    -1,   372,
     3,    89,    93,   244,   377,    93,    97,    -1,    -1,    97,
    82,    83,   396,    16,    17,    18,    19,    89,    -1,    -1,
    85,    93,    -1,    88,    89,    97,    -1,    92,    95,   402,
    95,    -1,    -1,    -1,   407,   419,    -1,   410,    41,   412,
    43,    44,    45,    46,   417,   418,    -1,   420,   421,   433,
   423,   424,    -1,    -1,    -1,   428,   429,    -1,   431,   432,
    -1,    -1,    -1,   436,   437,   449,    82,    83,    -1,    -1,
   443,   444,   445,    89,     3,   448,    -1,    93,    -1,   452,
   453,    97,   455,    -1,    -1,   458,   470,    16,    17,    18,
    19,   464,    85,    86,    87,    88,    89,    90,    91,    92,
    -1,    -1,     4,    -1,    -1,    98,    -1,    -1,    10,    -1,
    -1,    -1,    41,    -1,    43,    44,    45,    46,    20,    21,
d741 2
a742 2
    42,    36,    -1,    -1,    -1,    10,    -1,    -1,    43,    44,
    -1,    46,    -1,    48,    -1,    20,    21,    22,    23,    24,
d744 12
a755 16
    35,    36,    37,    38,    39,    40,     4,    42,    -1,    -1,
    -1,    -1,    10,    84,    85,    86,    87,    88,    89,    -1,
    -1,    92,    20,    21,    22,    23,    24,    25,    26,    27,
    28,    29,    30,    31,    32,    33,    34,    35,    36,    37,
    38,    39,    40,   435,    42,    -1,   438,    85,    86,    87,
    88,    89,    90,    91,    92,    -1,    -1,    -1,    -1,   451,
    98,    -1,   454,    -1,    -1,   457,    -1,    -1,    -1,    -1,
   462,   463,    -1,    -1,   466,    -1,    -1,   469,    -1,    -1,
    -1,   473,   344,   345,   346,   347,   348,   349,   350,   351,
   352,   353,   354,   355,   356,   357,   358,   359,    -1,   361,
   362,   363,    72,    73,    74,    75,    76,    77,    78,    -1,
    80,    81,    85,    86,    87,    88,    89,    90,    91,    92,
    85,    86,    87,    88,    89,    90,    91,    92,    86,    87,
    88,    89,    90,    91,    92,    87,    88,    89,    90,    91,
    92,     6,     7,     8,     9,    10,    11,    51,    52,    53,
    54,    55,    56,    88,    89,    90,    91,    92
d758 1
a758 1
#line 3 "/usr/share/bison/bison.simple"
d972 1
a972 1
#line 217 "/usr/share/bison/bison.simple"
d1840 9
a1848 3
	    yyval.dialog_control = define_icon_control (yyvsp[-4].id, yyvsp[-3].il, yyvsp[-2].il, yyvsp[-1].il, 0, 0, 0, yyvsp[0].rcdata_item,
				      dialog.ex);
          ;
d1851 1
a1851 1
#line 646 "rcparse.y"
d1853 9
a1861 3
	    yyval.dialog_control = define_icon_control (yyvsp[-6].id, yyvsp[-5].il, yyvsp[-4].il, yyvsp[-3].il, 0, 0, 0, yyvsp[0].rcdata_item,
				      dialog.ex);
          ;
d1864 1
a1864 1
#line 652 "rcparse.y"
d1866 7
a1872 3
	    yyval.dialog_control = define_icon_control (yyvsp[-8].id, yyvsp[-7].il, yyvsp[-6].il, yyvsp[-5].il, style, yyvsp[-1].il, 0, yyvsp[0].rcdata_item,
				      dialog.ex);
          ;
d1875 1
a1875 8
#line 658 "rcparse.y"
{
	    yyval.dialog_control = define_icon_control (yyvsp[-9].id, yyvsp[-8].il, yyvsp[-7].il, yyvsp[-6].il, style, yyvsp[-2].il, yyvsp[-1].il, yyvsp[0].rcdata_item,
				      dialog.ex);
          ;
    break;}
case 88:
#line 663 "rcparse.y"
d1882 2
a1883 2
case 89:
#line 669 "rcparse.y"
d1891 2
a1892 2
case 90:
#line 676 "rcparse.y"
d1899 2
a1900 2
case 91:
#line 682 "rcparse.y"
d1905 2
a1906 2
case 92:
#line 686 "rcparse.y"
d1913 2
a1914 2
case 93:
#line 692 "rcparse.y"
d1919 2
a1920 2
case 94:
#line 696 "rcparse.y"
d1927 2
a1928 2
case 95:
#line 702 "rcparse.y"
d1933 2
a1934 2
case 96:
#line 706 "rcparse.y"
d1941 2
a1942 2
case 97:
#line 712 "rcparse.y"
d1947 2
a1948 2
case 98:
#line 716 "rcparse.y"
d1955 2
a1956 2
case 99:
#line 722 "rcparse.y"
d1961 2
a1962 2
case 100:
#line 726 "rcparse.y"
d1969 2
a1970 2
case 101:
#line 732 "rcparse.y"
d1975 2
a1976 2
case 102:
#line 736 "rcparse.y"
d1983 2
a1984 2
case 103:
#line 742 "rcparse.y"
d1989 2
a1990 2
case 104:
#line 746 "rcparse.y"
d1997 2
a1998 2
case 105:
#line 752 "rcparse.y"
d2003 2
a2004 2
case 106:
#line 757 "rcparse.y"
d2007 2
a2008 2
case 107:
#line 759 "rcparse.y"
d2014 2
a2015 2
case 108:
#line 775 "rcparse.y"
d2027 2
a2028 2
case 109:
#line 787 "rcparse.y"
d2039 2
a2040 2
case 110:
#line 798 "rcparse.y"
d2049 2
a2050 2
case 111:
#line 809 "rcparse.y"
d2055 2
a2056 8
case 112:
#line 813 "rcparse.y"
{
	    yyval.s = yyvsp[0].s;
	  ;
    break;}
case 113:
#line 817 "rcparse.y"
d2061 2
a2062 2
case 114:
#line 824 "rcparse.y"
d2067 2
a2068 2
case 115:
#line 828 "rcparse.y"
d2073 2
a2074 2
case 116:
#line 837 "rcparse.y"
d2077 2
a2078 2
case 118:
#line 843 "rcparse.y"
d2081 2
a2082 2
case 120:
#line 849 "rcparse.y"
d2085 2
a2086 2
case 122:
#line 857 "rcparse.y"
d2091 2
a2092 2
case 123:
#line 866 "rcparse.y"
d2097 2
a2098 2
case 124:
#line 876 "rcparse.y"
d2103 2
a2104 2
case 125:
#line 885 "rcparse.y"
d2109 2
a2110 2
case 126:
#line 892 "rcparse.y"
d2115 2
a2116 2
case 127:
#line 896 "rcparse.y"
d2131 2
a2132 2
case 128:
#line 913 "rcparse.y"
d2137 2
a2138 2
case 129:
#line 917 "rcparse.y"
d2143 2
a2144 2
case 130:
#line 921 "rcparse.y"
d2149 2
a2150 2
case 131:
#line 928 "rcparse.y"
d2155 2
a2156 2
case 132:
#line 932 "rcparse.y"
d2161 2
a2162 2
case 133:
#line 936 "rcparse.y"
d2167 2
a2168 2
case 134:
#line 943 "rcparse.y"
d2173 2
a2174 2
case 135:
#line 947 "rcparse.y"
d2179 2
a2180 2
case 136:
#line 951 "rcparse.y"
d2185 2
a2186 2
case 137:
#line 955 "rcparse.y"
d2191 2
a2192 2
case 138:
#line 959 "rcparse.y"
d2197 2
a2198 2
case 139:
#line 963 "rcparse.y"
d2203 2
a2204 2
case 140:
#line 972 "rcparse.y"
d2209 2
a2210 2
case 141:
#line 979 "rcparse.y"
d2215 2
a2216 2
case 142:
#line 983 "rcparse.y"
d2231 2
a2232 2
case 143:
#line 1000 "rcparse.y"
d2237 2
a2238 2
case 144:
#line 1004 "rcparse.y"
d2243 2
a2244 2
case 145:
#line 1008 "rcparse.y"
d2249 2
a2250 2
case 146:
#line 1012 "rcparse.y"
d2255 2
a2256 2
case 147:
#line 1016 "rcparse.y"
d2261 2
a2262 2
case 148:
#line 1020 "rcparse.y"
d2267 2
a2268 2
case 149:
#line 1024 "rcparse.y"
d2273 2
a2274 2
case 150:
#line 1029 "rcparse.y"
d2279 2
a2280 2
case 151:
#line 1038 "rcparse.y"
d2285 2
a2286 2
case 152:
#line 1047 "rcparse.y"
d2291 2
a2292 2
case 153:
#line 1056 "rcparse.y"
d2297 2
a2298 2
case 154:
#line 1060 "rcparse.y"
d2304 2
a2305 2
case 155:
#line 1068 "rcparse.y"
d2311 2
a2312 2
case 156:
#line 1073 "rcparse.y"
d2317 2
a2318 2
case 157:
#line 1080 "rcparse.y"
d2327 2
a2328 2
case 158:
#line 1088 "rcparse.y"
d2337 2
a2338 2
case 159:
#line 1096 "rcparse.y"
d2348 2
a2349 2
case 160:
#line 1105 "rcparse.y"
d2359 2
a2360 2
case 161:
#line 1119 "rcparse.y"
d2363 2
a2364 2
case 164:
#line 1126 "rcparse.y"
d2369 2
a2370 2
case 165:
#line 1130 "rcparse.y"
d2375 2
a2376 2
case 166:
#line 1140 "rcparse.y"
d2381 2
a2382 2
case 167:
#line 1144 "rcparse.y"
d2387 2
a2388 2
case 168:
#line 1153 "rcparse.y"
d2393 2
a2394 2
case 169:
#line 1160 "rcparse.y"
d2401 2
a2402 2
case 170:
#line 1166 "rcparse.y"
d2409 2
a2410 2
case 171:
#line 1172 "rcparse.y"
d2417 2
a2418 2
case 172:
#line 1178 "rcparse.y"
d2424 2
a2425 2
case 173:
#line 1183 "rcparse.y"
d2431 2
a2432 2
case 174:
#line 1188 "rcparse.y"
d2438 2
a2439 2
case 175:
#line 1193 "rcparse.y"
d2445 2
a2446 2
case 176:
#line 1198 "rcparse.y"
d2452 2
a2453 2
case 177:
#line 1212 "rcparse.y"
d2458 2
a2459 2
case 178:
#line 1216 "rcparse.y"
d2464 2
a2465 2
case 179:
#line 1220 "rcparse.y"
d2470 2
a2471 2
case 180:
#line 1227 "rcparse.y"
d2476 2
a2477 2
case 181:
#line 1231 "rcparse.y"
d2482 2
a2483 2
case 182:
#line 1238 "rcparse.y"
d2488 2
a2489 2
case 183:
#line 1242 "rcparse.y"
d2494 2
a2495 2
case 184:
#line 1251 "rcparse.y"
d2501 2
a2502 2
case 185:
#line 1256 "rcparse.y"
d2515 2
a2516 41
case 186:
#line 1273 "rcparse.y"
{
	    yyval.s = yyvsp[0].s;
	  ;
    break;}
case 187:
#line 1277 "rcparse.y"
{
	    yyval.s = yyvsp[-1].s;
	  ;
    break;}
case 188:
#line 1281 "rcparse.y"
{
	    yyval.s = yyvsp[-1].s;
	  ;
    break;}
case 189:
#line 1289 "rcparse.y"
{
	    yyval.id.named = 0;
	    yyval.id.u.id = yyvsp[-1].il;
	  ;
    break;}
case 190:
#line 1294 "rcparse.y"
{
	    char *copy, *s;

	    /* It seems that resource ID's are forced to upper case.  */
	    copy = xstrdup (yyvsp[0].s);
	    for (s = copy; *s != '\0'; s++)
	      if (islower ((unsigned char) *s))
	        *s = toupper ((unsigned char) *s);
	    res_string_to_id (&yyval.id, copy);
	    free (copy);
	  ;
    break;}
case 191:
#line 1312 "rcparse.y"
d2524 2
a2525 2
case 192:
#line 1319 "rcparse.y"
d2532 2
a2533 2
case 193:
#line 1325 "rcparse.y"
d2539 2
a2540 2
case 194:
#line 1330 "rcparse.y"
d2546 2
a2547 2
case 195:
#line 1335 "rcparse.y"
d2553 2
a2554 2
case 196:
#line 1345 "rcparse.y"
d2561 2
a2562 2
case 197:
#line 1351 "rcparse.y"
d2569 2
a2570 2
case 198:
#line 1362 "rcparse.y"
d2577 2
a2578 2
case 199:
#line 1368 "rcparse.y"
d2585 2
a2586 2
case 200:
#line 1380 "rcparse.y"
d2592 2
a2593 2
case 201:
#line 1385 "rcparse.y"
d2599 2
a2600 2
case 202:
#line 1390 "rcparse.y"
d2606 2
a2607 2
case 203:
#line 1395 "rcparse.y"
d2613 2
a2614 2
case 204:
#line 1400 "rcparse.y"
d2620 2
a2621 2
case 205:
#line 1405 "rcparse.y"
d2627 2
a2628 2
case 206:
#line 1410 "rcparse.y"
d2634 2
a2635 2
case 207:
#line 1420 "rcparse.y"
d2640 2
a2641 2
case 208:
#line 1424 "rcparse.y"
d2646 2
a2647 2
case 209:
#line 1441 "rcparse.y"
d2652 2
a2653 2
case 210:
#line 1445 "rcparse.y"
d2658 2
a2659 2
case 211:
#line 1449 "rcparse.y"
d2664 2
a2665 2
case 212:
#line 1453 "rcparse.y"
d2670 2
a2671 2
case 213:
#line 1460 "rcparse.y"
d2676 2
a2677 2
case 214:
#line 1464 "rcparse.y"
d2682 2
a2683 2
case 215:
#line 1473 "rcparse.y"
d2688 2
a2689 2
case 216:
#line 1477 "rcparse.y"
d2694 2
a2695 2
case 217:
#line 1486 "rcparse.y"
d2700 2
a2701 2
case 218:
#line 1495 "rcparse.y"
d2706 2
a2707 2
case 219:
#line 1504 "rcparse.y"
d2712 2
a2713 2
case 220:
#line 1508 "rcparse.y"
d2718 2
a2719 2
case 221:
#line 1512 "rcparse.y"
d2725 2
a2726 2
case 222:
#line 1517 "rcparse.y"
d2732 2
a2733 2
case 223:
#line 1522 "rcparse.y"
d2739 2
a2740 2
case 224:
#line 1527 "rcparse.y"
d2746 2
a2747 2
case 225:
#line 1532 "rcparse.y"
d2753 2
a2754 2
case 226:
#line 1537 "rcparse.y"
d2760 2
a2761 2
case 227:
#line 1542 "rcparse.y"
d2767 2
a2768 2
case 228:
#line 1547 "rcparse.y"
d2774 2
a2775 2
case 229:
#line 1552 "rcparse.y"
d2781 2
a2782 2
case 230:
#line 1557 "rcparse.y"
d2788 2
a2789 2
case 231:
#line 1568 "rcparse.y"
d2794 2
a2795 2
case 232:
#line 1577 "rcparse.y"
d2800 2
a2801 2
case 233:
#line 1588 "rcparse.y"
d2806 2
a2807 2
case 234:
#line 1592 "rcparse.y"
d2812 2
a2813 2
case 235:
#line 1596 "rcparse.y"
d2819 2
a2820 2
case 236:
#line 1601 "rcparse.y"
d2826 2
a2827 2
case 237:
#line 1606 "rcparse.y"
d2833 2
a2834 2
case 238:
#line 1611 "rcparse.y"
d2840 2
a2841 2
case 239:
#line 1616 "rcparse.y"
d2847 2
a2848 2
case 240:
#line 1621 "rcparse.y"
d2854 2
a2855 2
case 241:
#line 1626 "rcparse.y"
d2861 2
a2862 2
case 242:
#line 1631 "rcparse.y"
d2868 2
a2869 2
case 243:
#line 1636 "rcparse.y"
d2877 1
a2877 1
#line 543 "/usr/share/bison/bison.simple"
d3097 1
a3097 1
#line 1642 "rcparse.y"
@


1.1.1.3
log
@import binutils 2.14 (excluding testsuites, .info files, and .po files)
@
text
@d1 3
a3 2
/* A Bison parser, made from rcparse.y
   by GNU bison 1.35.  */
d7 83
a89 83
# define	BEG	257
# define	END	258
# define	ACCELERATORS	259
# define	VIRTKEY	260
# define	ASCII	261
# define	NOINVERT	262
# define	SHIFT	263
# define	CONTROL	264
# define	ALT	265
# define	BITMAP	266
# define	CURSOR	267
# define	DIALOG	268
# define	DIALOGEX	269
# define	EXSTYLE	270
# define	CAPTION	271
# define	CLASS	272
# define	STYLE	273
# define	AUTO3STATE	274
# define	AUTOCHECKBOX	275
# define	AUTORADIOBUTTON	276
# define	CHECKBOX	277
# define	COMBOBOX	278
# define	CTEXT	279
# define	DEFPUSHBUTTON	280
# define	EDITTEXT	281
# define	GROUPBOX	282
# define	LISTBOX	283
# define	LTEXT	284
# define	PUSHBOX	285
# define	PUSHBUTTON	286
# define	RADIOBUTTON	287
# define	RTEXT	288
# define	SCROLLBAR	289
# define	STATE3	290
# define	USERBUTTON	291
# define	BEDIT	292
# define	HEDIT	293
# define	IEDIT	294
# define	FONT	295
# define	ICON	296
# define	LANGUAGE	297
# define	CHARACTERISTICS	298
# define	VERSIONK	299
# define	MENU	300
# define	MENUEX	301
# define	MENUITEM	302
# define	SEPARATOR	303
# define	POPUP	304
# define	CHECKED	305
# define	GRAYED	306
# define	HELP	307
# define	INACTIVE	308
# define	MENUBARBREAK	309
# define	MENUBREAK	310
# define	MESSAGETABLE	311
# define	RCDATA	312
# define	STRINGTABLE	313
# define	VERSIONINFO	314
# define	FILEVERSION	315
# define	PRODUCTVERSION	316
# define	FILEFLAGSMASK	317
# define	FILEFLAGS	318
# define	FILEOS	319
# define	FILETYPE	320
# define	FILESUBTYPE	321
# define	BLOCKSTRINGFILEINFO	322
# define	BLOCKVARFILEINFO	323
# define	VALUE	324
# define	BLOCK	325
# define	MOVEABLE	326
# define	FIXED	327
# define	PURE	328
# define	IMPURE	329
# define	PRELOAD	330
# define	LOADONCALL	331
# define	DISCARDABLE	332
# define	NOT	333
# define	QUOTEDSTRING	334
# define	STRING	335
# define	NUMBER	336
# define	SIZEDSTRING	337
# define	IGNORED_TOKEN	338
# define	NEG	339
d93 1
a93 1
   Copyright 1997, 1998, 1999, 2000, 2001, 2002, 2003 Free Software Foundation, Inc.
d120 2
a121 1
#include "safe-ctype.h"
d149 1
a149 2
#line 58 "rcparse.y"
#ifndef YYSTYPE
d188 6
a193 3
} yystype;
# define YYSTYPE yystype
# define YYSTYPE_IS_TRIVIAL 1
a194 2
#ifndef YYDEBUG
# define YYDEBUG 0
d199 1
a199 1
#define	YYFINAL		484
d203 1
a203 2
/* YYTRANSLATE(YYLEX) -- Bison token number corresponding to YYLEX. */
#define YYTRANSLATE(x) ((unsigned)(x) <= 339 ? yytranslate[x] : 189)
d205 35
a239 37
/* YYTRANSLATE[YYLEX] -- Bison token number corresponding to YYLEX. */
static const char yytranslate[] =
{
       0,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,    92,    87,     2,
      97,    98,    90,    88,    95,    89,     2,    91,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,    96,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,    86,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,    85,     2,    93,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     1,     3,     4,     5,
       6,     7,     8,     9,    10,    11,    12,    13,    14,    15,
      16,    17,    18,    19,    20,    21,    22,    23,    24,    25,
      26,    27,    28,    29,    30,    31,    32,    33,    34,    35,
      36,    37,    38,    39,    40,    41,    42,    43,    44,    45,
      46,    47,    48,    49,    50,    51,    52,    53,    54,    55,
      56,    57,    58,    59,    60,    61,    62,    63,    64,    65,
      66,    67,    68,    69,    70,    71,    72,    73,    74,    75,
      76,    77,    78,    79,    80,    81,    82,    83,    84,    94
d242 27
a268 28
#if YYDEBUG
static const short yyprhs[] =
{
       0,     0,     1,     4,     7,    10,    13,    16,    19,    22,
      25,    28,    31,    34,    37,    40,    43,    46,    53,    54,
      57,    60,    65,    67,    69,    71,    75,    78,    80,    82,
      84,    86,    88,    90,    95,   100,   101,   115,   116,   130,
     131,   146,   147,   151,   152,   156,   160,   164,   168,   172,
     178,   185,   193,   202,   206,   210,   215,   219,   220,   223,
     224,   228,   229,   233,   234,   238,   239,   243,   244,   248,
     249,   253,   265,   278,   291,   305,   306,   310,   311,   315,
     316,   320,   321,   325,   326,   330,   337,   346,   357,   369,
     370,   374,   375,   379,   380,   384,   385,   389,   390,   394,
     395,   399,   400,   404,   405,   409,   410,   414,   415,   431,
     439,   449,   460,   461,   464,   466,   469,   470,   474,   475,
     479,   480,   484,   485,   489,   494,   499,   503,   510,   511,
     514,   519,   522,   529,   530,   534,   537,   539,   541,   543,
     545,   547,   549,   556,   557,   560,   563,   567,   573,   576,
     582,   589,   597,   607,   612,   619,   620,   623,   624,   626,
     628,   630,   634,   638,   639,   646,   647,   651,   656,   663,
     668,   675,   676,   683,   690,   694,   698,   702,   706,   710,
     711,   720,   728,   729,   735,   736,   740,   742,   744,   746,
     749,   752,   755,   757,   758,   761,   765,   770,   774,   775,
     778,   779,   782,   784,   786,   788,   790,   792,   794,   796,
     798,   800,   802,   805,   809,   814,   816,   820,   821,   823,
     826,   828,   830,   834,   837,   840,   844,   848,   852,   856,
     860,   864,   868,   872,   875,   877,   879,   883,   886,   890,
     894,   898,   902,   906,   910,   914
d270 94
a363 94
static const short yyrhs[] =
{
      -1,    99,   100,     0,    99,   106,     0,    99,   107,     0,
      99,   108,     0,    99,   146,     0,    99,   147,     0,    99,
     148,     0,    99,   149,     0,    99,   154,     0,    99,   157,
       0,    99,   158,     0,    99,   163,     0,    99,   166,     0,
      99,   167,     0,    99,    84,     0,   172,     5,   175,     3,
     101,     4,     0,     0,   101,   102,     0,   103,   186,     0,
     103,   186,    95,   104,     0,    80,     0,   187,     0,   105,
       0,   104,    95,   105,     0,   104,   105,     0,     6,     0,
       7,     0,     8,     0,     9,     0,    10,     0,    11,     0,
     172,    12,   177,   179,     0,   172,    13,   176,   179,     0,
       0,   172,    14,   177,   112,   187,   183,   183,   183,   109,
     113,     3,   114,     4,     0,     0,   172,    15,   177,   112,
     187,   183,   183,   183,   110,   113,     3,   114,     4,     0,
       0,   172,    15,   177,   112,   187,   183,   183,   183,   183,
     111,   113,     3,   114,     4,     0,     0,    16,    96,   184,
       0,     0,   113,    17,    80,     0,   113,    18,   172,     0,
     113,    19,   180,     0,   113,    16,   184,     0,   113,    18,
      80,     0,   113,    41,   184,    95,    80,     0,   113,    41,
     184,    95,    80,   183,     0,   113,    41,   184,    95,    80,
     183,   183,     0,   113,    41,   184,    95,    80,   183,   183,
     183,     0,   113,    46,   172,     0,   113,    44,   184,     0,
     113,    43,   184,   183,     0,   113,    45,   184,     0,     0,
     114,   115,     0,     0,    20,   116,   137,     0,     0,    21,
     117,   137,     0,     0,    22,   118,   137,     0,     0,    38,
     119,   137,     0,     0,    23,   120,   137,     0,     0,    24,
     121,   137,     0,    10,   138,   184,   183,   140,   183,   183,
     183,   183,   182,   139,     0,    10,   138,   184,   183,   140,
     183,   183,   183,   183,   183,   183,   139,     0,    10,   138,
     184,    95,    80,   140,   183,   183,   183,   183,   182,   139,
       0,    10,   138,   184,    95,    80,   140,   183,   183,   183,
     183,   183,   183,   139,     0,     0,    25,   122,   137,     0,
       0,    26,   123,   137,     0,     0,    27,   124,   137,     0,
       0,    28,   125,   137,     0,     0,    39,   126,   137,     0,
      42,   174,   184,   183,   183,   139,     0,    42,   174,   184,
     183,   183,   183,   183,   139,     0,    42,   174,   184,   183,
     183,   183,   183,   142,   182,   139,     0,    42,   174,   184,
     183,   183,   183,   183,   142,   183,   183,   139,     0,     0,
      40,   127,   137,     0,     0,    29,   128,   137,     0,     0,
      30,   129,   137,     0,     0,    31,   130,   137,     0,     0,
      32,   131,   137,     0,     0,    33,   132,   137,     0,     0,
      34,   133,   137,     0,     0,    35,   134,   137,     0,     0,
      36,   135,   137,     0,     0,    37,   174,   184,    95,   184,
      95,   184,    95,   184,    95,   184,    95,   136,   180,   182,
       0,   138,   184,   183,   183,   183,   183,   139,     0,   138,
     184,   183,   183,   183,   183,   144,   182,   139,     0,   138,
     184,   183,   183,   183,   183,   144,   183,   183,   139,     0,
       0,   187,    95,     0,    80,     0,    80,    95,     0,     0,
       3,   159,     4,     0,     0,    95,   141,   180,     0,     0,
      95,   143,   180,     0,     0,    95,   145,   180,     0,   172,
      41,   176,   179,     0,   172,    42,   176,   179,     0,    43,
     184,   183,     0,   172,    46,   175,     3,   150,     4,     0,
       0,   150,   151,     0,    48,    80,   183,   152,     0,    48,
      49,     0,    50,    80,   152,     3,   150,     4,     0,     0,
     152,    95,   153,     0,   152,   153,     0,    51,     0,    52,
       0,    53,     0,    54,     0,    55,     0,    56,     0,   172,
      47,   175,     3,   155,     4,     0,     0,   155,   156,     0,
      48,    80,     0,    48,    80,   183,     0,    48,    80,   183,
     183,   182,     0,    48,    49,     0,    50,    80,     3,   155,
       4,     0,    50,    80,   183,     3,   155,     4,     0,    50,
      80,   183,   183,     3,   155,     4,     0,    50,    80,   183,
     183,   183,   182,     3,   155,     4,     0,   172,    57,   177,
     179,     0,   172,    58,   175,     3,   159,     4,     0,     0,
     160,   161,     0,     0,   162,     0,    83,     0,   185,     0,
     162,    95,    83,     0,   162,    95,   185,     0,     0,    59,
     175,     3,   164,   165,     4,     0,     0,   165,   184,    80,
       0,   165,   184,    95,    80,     0,   172,   172,   175,     3,
     159,     4,     0,   172,   172,   175,   179,     0,   172,    60,
     168,     3,   169,     4,     0,     0,   168,    61,   184,   183,
     183,   183,     0,   168,    62,   184,   183,   183,   183,     0,
     168,    63,   184,     0,   168,    64,   184,     0,   168,    65,
     184,     0,   168,    66,   184,     0,   168,    67,   184,     0,
       0,   169,    68,     3,    71,     3,   170,     4,     4,     0,
     169,    69,     3,    70,    80,   171,     4,     0,     0,   170,
      70,    80,    95,    80,     0,     0,   171,   183,   183,     0,
     187,     0,    81,     0,    80,     0,    80,    95,     0,    81,
      95,     0,   187,    95,     0,   173,     0,     0,   175,   178,
       0,   175,    44,   184,     0,   175,    43,   184,   183,     0,
     175,    45,   184,     0,     0,   176,   178,     0,     0,   177,
     178,     0,    72,     0,    73,     0,    74,     0,    75,     0,
      76,     0,    77,     0,    78,     0,    80,     0,    81,     0,
     181,     0,    79,   181,     0,   180,    85,   181,     0,   180,
      85,    79,   181,     0,    82,     0,    97,   184,    98,     0,
       0,   183,     0,    95,   184,     0,   185,     0,    82,     0,
      97,   185,    98,     0,    93,   185,     0,    89,   185,     0,
     185,    90,   185,     0,   185,    91,   185,     0,   185,    92,
     185,     0,   185,    88,   185,     0,   185,    89,   185,     0,
     185,    87,   185,     0,   185,    86,   185,     0,   185,    85,
     185,     0,    95,   187,     0,   188,     0,    82,     0,    97,
     185,    98,     0,    93,   185,     0,   188,    90,   185,     0,
     188,    91,   185,     0,   188,    92,   185,     0,   188,    88,
     185,     0,   188,    89,   185,     0,   188,    87,   185,     0,
     188,    86,   185,     0,   188,    85,   185,     0
d368 27
a394 29
#if YYDEBUG
/* YYRLINE[YYN] -- source line where rule number YYN was defined. */
static const short yyrline[] =
{
       0,   154,   156,   157,   158,   159,   160,   161,   162,   163,
     164,   165,   166,   167,   168,   169,   170,   175,   185,   190,
     210,   216,   227,   249,   258,   263,   268,   274,   279,   284,
     288,   292,   296,   304,   316,   328,   328,   354,   354,   381,
     381,   411,   416,   422,   424,   430,   434,   439,   443,   447,
     460,   475,   490,   505,   509,   513,   517,   523,   525,   535,
     535,   546,   546,   556,   556,   566,   566,   579,   579,   589,
     589,   599,   610,   619,   632,   643,   643,   653,   653,   663,
     663,   673,   673,   683,   683,   696,   701,   707,   713,   719,
     719,   732,   732,   742,   742,   752,   752,   762,   762,   772,
     772,   782,   782,   792,   792,   802,   802,   812,   812,   829,
     842,   853,   864,   869,   874,   878,   884,   889,   897,   897,
     903,   903,   909,   909,   917,   929,   942,   951,   961,   966,
     982,   987,   991,   997,  1002,  1006,  1012,  1017,  1021,  1025,
    1029,  1033,  1041,  1051,  1056,  1072,  1077,  1081,  1085,  1089,
    1093,  1097,  1101,  1110,  1122,  1135,  1135,  1146,  1152,  1158,
    1167,  1175,  1184,  1197,  1197,  1203,  1205,  1212,  1224,  1232,
    1243,  1253,  1260,  1266,  1272,  1277,  1282,  1287,  1292,  1305,
    1310,  1314,  1320,  1325,  1331,  1336,  1344,  1350,  1365,  1370,
    1374,  1381,  1387,  1403,  1411,  1417,  1422,  1427,  1436,  1443,
    1453,  1460,  1471,  1477,  1482,  1487,  1492,  1497,  1502,  1511,
    1516,  1532,  1537,  1541,  1545,  1551,  1556,  1564,  1569,  1577,
    1586,  1595,  1600,  1604,  1609,  1614,  1619,  1624,  1629,  1634,
    1639,  1644,  1649,  1659,  1668,  1679,  1684,  1688,  1693,  1698,
    1703,  1708,  1713,  1718,  1723,  1728
d399 1
a399 1
#if (YYDEBUG) || defined YYERROR_VERBOSE
d401 25
a425 35
/* YYTNAME[TOKEN_NUM] -- String name of the token TOKEN_NUM. */
static const char *const yytname[] =
{
  "$", "error", "$undefined.", "BEG", "END", "ACCELERATORS", "VIRTKEY", 
  "ASCII", "NOINVERT", "SHIFT", "CONTROL", "ALT", "BITMAP", "CURSOR", 
  "DIALOG", "DIALOGEX", "EXSTYLE", "CAPTION", "CLASS", "STYLE", 
  "AUTO3STATE", "AUTOCHECKBOX", "AUTORADIOBUTTON", "CHECKBOX", "COMBOBOX", 
  "CTEXT", "DEFPUSHBUTTON", "EDITTEXT", "GROUPBOX", "LISTBOX", "LTEXT", 
  "PUSHBOX", "PUSHBUTTON", "RADIOBUTTON", "RTEXT", "SCROLLBAR", "STATE3", 
  "USERBUTTON", "BEDIT", "HEDIT", "IEDIT", "FONT", "ICON", "LANGUAGE", 
  "CHARACTERISTICS", "VERSIONK", "MENU", "MENUEX", "MENUITEM", 
  "SEPARATOR", "POPUP", "CHECKED", "GRAYED", "HELP", "INACTIVE", 
  "MENUBARBREAK", "MENUBREAK", "MESSAGETABLE", "RCDATA", "STRINGTABLE", 
  "VERSIONINFO", "FILEVERSION", "PRODUCTVERSION", "FILEFLAGSMASK", 
  "FILEFLAGS", "FILEOS", "FILETYPE", "FILESUBTYPE", "BLOCKSTRINGFILEINFO", 
  "BLOCKVARFILEINFO", "VALUE", "BLOCK", "MOVEABLE", "FIXED", "PURE", 
  "IMPURE", "PRELOAD", "LOADONCALL", "DISCARDABLE", "NOT", "QUOTEDSTRING", 
  "STRING", "NUMBER", "SIZEDSTRING", "IGNORED_TOKEN", "'|'", "'^'", "'&'", 
  "'+'", "'-'", "'*'", "'/'", "'%'", "'~'", "NEG", "','", "'='", "'('", 
  "')'", "input", "accelerator", "acc_entries", "acc_entry", "acc_event", 
  "acc_options", "acc_option", "bitmap", "cursor", "dialog", "@@1", "@@2", 
  "@@3", "exstyle", "styles", "controls", "control", "@@4", "@@5", "@@6", 
  "@@7", "@@8", "@@9", "@@10", "@@11", "@@12", "@@13", "@@14", "@@15", "@@16", 
  "@@17", "@@18", "@@19", "@@20", "@@21", "@@22", "@@23", "@@24", 
  "control_params", "optresidc", "opt_control_data", "control_styleexpr", 
  "@@25", "icon_styleexpr", "@@26", "control_params_styleexpr", "@@27", 
  "font", "icon", "language", "menu", "menuitems", "menuitem", 
  "menuitem_flags", "menuitem_flag", "menuex", "menuexitems", 
  "menuexitem", "messagetable", "rcdata", "optrcdata_data", "@@28", 
  "optrcdata_data_int", "rcdata_data", "stringtable", "@@29", 
  "string_data", "user", "versioninfo", "fixedverinfo", "verblocks", 
  "vervals", "vertrans", "id", "resname", "resref", "suboptions", 
  "memflags_move_discard", "memflags_move", "memflag", "file_name", 
  "styleexpr", "parennumber", "optcnumexpr", "cnumexpr", "numexpr", 
  "sizednumexpr", "cposnumexpr", "posnumexpr", "sizedposnumexpr", 0
d429 26
a454 28
/* YYR1[YYN] -- Symbol number of symbol that rule YYN derives. */
static const short yyr1[] =
{
       0,    99,    99,    99,    99,    99,    99,    99,    99,    99,
      99,    99,    99,    99,    99,    99,    99,   100,   101,   101,
     102,   102,   103,   103,   104,   104,   104,   105,   105,   105,
     105,   105,   105,   106,   107,   109,   108,   110,   108,   111,
     108,   112,   112,   113,   113,   113,   113,   113,   113,   113,
     113,   113,   113,   113,   113,   113,   113,   114,   114,   116,
     115,   117,   115,   118,   115,   119,   115,   120,   115,   121,
     115,   115,   115,   115,   115,   122,   115,   123,   115,   124,
     115,   125,   115,   126,   115,   115,   115,   115,   115,   127,
     115,   128,   115,   129,   115,   130,   115,   131,   115,   132,
     115,   133,   115,   134,   115,   135,   115,   136,   115,   137,
     137,   137,   138,   138,   138,   138,   139,   139,   141,   140,
     143,   142,   145,   144,   146,   147,   148,   149,   150,   150,
     151,   151,   151,   152,   152,   152,   153,   153,   153,   153,
     153,   153,   154,   155,   155,   156,   156,   156,   156,   156,
     156,   156,   156,   157,   158,   160,   159,   161,   161,   162,
     162,   162,   162,   164,   163,   165,   165,   165,   166,   166,
     167,   168,   168,   168,   168,   168,   168,   168,   168,   169,
     169,   169,   170,   170,   171,   171,   172,   172,   173,   173,
     173,   174,   174,   175,   175,   175,   175,   175,   176,   176,
     177,   177,   178,   178,   178,   178,   178,   178,   178,   179,
     179,   180,   180,   180,   180,   181,   181,   182,   182,   183,
     184,   185,   185,   185,   185,   185,   185,   185,   185,   185,
     185,   185,   185,   186,   187,   188,   188,   188,   188,   188,
     188,   188,   188,   188,   188,   188
d457 26
a482 28
/* YYR2[YYN] -- Number of symbols composing right hand side of rule YYN. */
static const short yyr2[] =
{
       0,     0,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     6,     0,     2,
       2,     4,     1,     1,     1,     3,     2,     1,     1,     1,
       1,     1,     1,     4,     4,     0,    13,     0,    13,     0,
      14,     0,     3,     0,     3,     3,     3,     3,     3,     5,
       6,     7,     8,     3,     3,     4,     3,     0,     2,     0,
       3,     0,     3,     0,     3,     0,     3,     0,     3,     0,
       3,    11,    12,    12,    13,     0,     3,     0,     3,     0,
       3,     0,     3,     0,     3,     6,     8,    10,    11,     0,
       3,     0,     3,     0,     3,     0,     3,     0,     3,     0,
       3,     0,     3,     0,     3,     0,     3,     0,    15,     7,
       9,    10,     0,     2,     1,     2,     0,     3,     0,     3,
       0,     3,     0,     3,     4,     4,     3,     6,     0,     2,
       4,     2,     6,     0,     3,     2,     1,     1,     1,     1,
       1,     1,     6,     0,     2,     2,     3,     5,     2,     5,
       6,     7,     9,     4,     6,     0,     2,     0,     1,     1,
       1,     3,     3,     0,     6,     0,     3,     4,     6,     4,
       6,     0,     6,     6,     3,     3,     3,     3,     3,     0,
       8,     7,     0,     5,     0,     3,     1,     1,     1,     2,
       2,     2,     1,     0,     2,     3,     4,     3,     0,     2,
       0,     2,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     2,     3,     4,     1,     3,     0,     1,     2,
       1,     1,     3,     2,     2,     3,     3,     3,     3,     3,
       3,     3,     3,     2,     1,     1,     3,     2,     3,     3,
       3,     3,     3,     3,     3,     3
d485 50
a534 54
/* YYDEFACT[S] -- default rule to reduce with in state S when YYTABLE
   doesn't specify something else to do.  Zero means the default is an
   error. */
static const short yydefact[] =
{
       1,     0,     0,   193,   187,   235,    16,     0,     0,     2,
       3,     4,     5,     6,     7,     8,     9,    10,    11,    12,
      13,    14,    15,     0,   186,   234,   221,     0,     0,     0,
       0,   220,     0,   237,     0,   193,   200,   198,   200,   200,
     198,   198,   193,   193,   200,   193,   171,   193,     0,     0,
       0,     0,     0,     0,     0,     0,   224,   223,     0,     0,
     126,     0,     0,     0,     0,     0,     0,     0,     0,   163,
       0,     0,     0,   202,   203,   204,   205,   206,   207,   208,
     194,   236,     0,     0,     0,    41,    41,     0,     0,     0,
       0,     0,     0,     0,     0,   245,   244,   243,   241,   242,
     238,   239,   240,   222,   219,   232,   231,   230,   228,   229,
     225,   226,   227,   165,     0,   195,   197,    18,   209,   210,
     201,    33,   199,    34,     0,     0,     0,   124,   125,   128,
     143,   153,   155,   179,     0,     0,     0,     0,     0,     0,
       0,   155,   169,     0,   196,     0,     0,     0,     0,     0,
       0,     0,   157,     0,     0,     0,   174,   175,   176,   177,
     178,     0,   164,     0,    17,    22,    19,     0,    23,    42,
       0,     0,   127,     0,     0,   129,   142,     0,     0,   144,
     154,   159,   156,   158,   160,   170,     0,     0,     0,     0,
     168,   166,     0,     0,    20,     0,     0,   131,     0,   133,
     148,   145,     0,     0,     0,     0,     0,     0,   167,   233,
       0,    35,    37,   133,     0,   146,   143,     0,   161,   162,
       0,     0,   172,   173,    27,    28,    29,    30,    31,    32,
      21,    24,    43,    43,    39,   130,   128,   136,   137,   138,
     139,   140,   141,     0,   135,   217,     0,   143,     0,   182,
     184,     0,    26,     0,     0,    43,     0,   134,   147,   218,
     149,     0,   143,   217,     0,     0,    25,    57,     0,     0,
       0,     0,     0,     0,     0,     0,     0,    57,     0,   132,
     150,     0,     0,     0,     0,   181,     0,     0,    47,    44,
      48,    45,     0,   215,     0,    46,   211,     0,     0,    54,
      56,    53,     0,    57,   151,   143,   180,     0,   185,    36,
     112,    59,    61,    63,    67,    69,    75,    77,    79,    81,
      91,    93,    95,    97,    99,   101,   103,   105,     0,    65,
      83,    89,     0,    58,   212,     0,     0,     0,    55,    38,
       0,     0,     0,   114,     0,     0,   112,   112,   112,   112,
     112,   112,   112,   112,   112,   112,   112,   112,   112,   112,
     112,   112,   112,   188,     0,   192,     0,     0,   112,   112,
     112,     0,   216,     0,   213,    49,    40,   152,   183,   115,
       0,   113,    60,     0,    62,    64,    68,    70,    76,    78,
      80,    82,    92,    94,    96,    98,   100,   102,   104,   106,
     189,   190,     0,   191,    66,    84,    90,     0,   214,    50,
       0,     0,     0,     0,     0,    51,     0,   118,     0,     0,
       0,   116,    52,     0,     0,     0,     0,     0,   155,    85,
       0,     0,   119,     0,     0,     0,     0,   116,     0,     0,
     116,     0,   117,   120,    86,   217,     0,   217,   122,   109,
     217,     0,     0,   116,   218,   217,   116,   218,     0,   116,
     218,     0,   121,    87,   116,   116,   218,    71,   116,   123,
     110,   116,     0,    88,    73,   116,    72,   111,   107,    74,
       0,   217,   108,     0,     0
d537 11
a547 11
static const short yydefgoto[] =
{
       1,     9,   145,   166,   167,   230,   231,    10,    11,    12,
     232,   233,   255,   125,   253,   287,   333,   346,   347,   348,
     368,   349,   350,   351,   352,   353,   354,   369,   370,   355,
     356,   357,   358,   359,   360,   361,   362,   480,   382,   383,
     429,   418,   424,   445,   452,   450,   458,    13,    14,    15,
      16,   149,   175,   214,   244,    17,   150,   179,    18,    19,
     151,   152,   182,   183,    20,   113,   143,    21,    22,    93,
     153,   264,   265,    23,   365,   366,    32,    84,    83,    80,
     121,   295,   296,   258,   259,   104,    31,   194,   345,    25
d550 50
a599 51
static const short yypact[] =
{
  -32768,    12,   432,-32768,-32768,-32768,-32768,   432,   432,-32768,
  -32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,
  -32768,-32768,-32768,   155,-32768,   490,-32768,   432,   432,   432,
     -80,   528,   235,-32768,   561,-32768,-32768,-32768,-32768,-32768,
  -32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,   432,   432,
     432,   432,   432,   432,   432,   432,-32768,-32768,   620,   432,
  -32768,   432,   432,   432,   432,   432,   432,   432,   432,-32768,
     432,   432,   432,-32768,-32768,-32768,-32768,-32768,-32768,-32768,
  -32768,-32768,   373,   647,   647,   157,   157,   647,   647,   409,
     417,   647,   424,    89,   224,   643,   649,   193,   113,   113,
  -32768,-32768,-32768,-32768,-32768,   643,   649,   193,   113,   113,
  -32768,-32768,-32768,-32768,   -80,-32768,-32768,-32768,-32768,-32768,
  -32768,-32768,-32768,-32768,   -43,   221,   221,-32768,-32768,-32768,
  -32768,-32768,-32768,-32768,   432,   432,   432,   432,   432,   432,
     432,-32768,-32768,     6,-32768,     4,   432,   -80,   -80,    35,
      39,    50,   168,     5,   -80,   -80,-32768,-32768,-32768,-32768,
  -32768,    63,-32768,   -60,-32768,-32768,-32768,    -4,-32768,-32768,
     -80,   -80,-32768,   -36,    27,-32768,-32768,    -8,    36,-32768,
  -32768,-32768,-32768,     9,   528,-32768,   124,   142,   -80,   -80,
  -32768,-32768,    77,   221,    64,   -80,   -80,-32768,   -80,-32768,
  -32768,   -80,    11,   289,    90,    96,   -80,   -80,-32768,-32768,
     736,-32768,   -80,-32768,    24,   -80,-32768,    13,-32768,   528,
     177,    95,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,
      22,-32768,-32768,-32768,-32768,   191,-32768,-32768,-32768,-32768,
  -32768,-32768,-32768,   697,-32768,   -80,    62,-32768,    16,-32768,
  -32768,   736,-32768,   314,   322,-32768,    78,-32768,-32768,-32768,
  -32768,   159,-32768,   -80,    32,     3,-32768,-32768,   432,   109,
     255,   102,   432,   432,   432,   432,   280,-32768,   500,-32768,
  -32768,   172,   195,   190,   126,-32768,   -80,   527,-32768,-32768,
  -32768,-32768,    43,-32768,   432,   131,-32768,   122,   -80,-32768,
  -32768,-32768,   564,-32768,-32768,-32768,-32768,   123,-32768,-32768,
     427,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,
  -32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,   383,-32768,
  -32768,-32768,   383,-32768,-32768,   121,   129,   148,-32768,-32768,
     601,   175,   160,   144,   432,   161,   427,   427,   427,   427,
     427,   427,   427,   427,   427,   427,   427,   427,   427,   427,
     427,   427,   427,   163,   165,-32768,   432,   169,   427,   427,
     427,   432,-32768,    43,-32768,   -80,-32768,-32768,-32768,-32768,
     180,-32768,-32768,   432,-32768,-32768,-32768,-32768,-32768,-32768,
  -32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,
  -32768,-32768,   181,-32768,-32768,-32768,-32768,   -80,-32768,   -80,
     307,   182,   -80,   432,   -80,   -80,   182,-32768,   -80,   -80,
     194,    18,-32768,   -80,   102,   -80,   -80,   432,-32768,-32768,
     -80,   -80,   131,   -80,   -80,   196,   286,    19,   -80,   -80,
      20,   432,-32768,-32768,-32768,   -80,   -80,   -80,-32768,-32768,
     -80,   199,   102,   260,   -80,   -80,   260,   -80,   102,   260,
     -80,   432,   131,-32768,   260,   260,   -80,-32768,   260,   131,
  -32768,   260,   200,-32768,-32768,   260,-32768,-32768,-32768,-32768,
     102,    44,-32768,   306,-32768
d602 11
a612 11
static const short yypgoto[] =
{
  -32768,-32768,-32768,-32768,-32768,-32768,  -213,-32768,-32768,-32768,
  -32768,-32768,-32768,   229,  -199,  -155,-32768,-32768,-32768,-32768,
  -32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,
  -32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,   334,    10,
     205,   -97,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,
  -32768,    85,-32768,   114,    79,-32768,  -205,-32768,-32768,-32768,
    -140,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,
  -32768,-32768,-32768,   -21,-32768,     2,   281,    80,   215,   387,
     259,  -266,  -255,  -260,   -24,    -2,    -3,-32768,    17,-32768
d616 1
a616 1
#define	YYLAST		753
d619 72
a690 78
static const short yytable[] =
{
      30,   161,    47,   282,    33,    34,    60,   285,   164,   185,
     162,   246,   483,   197,   216,    59,   247,   252,    24,   262,
     191,   428,   428,   428,    56,    57,    58,   236,   224,   225,
     226,   227,   228,   229,   254,   192,   283,   334,   266,   172,
      24,   200,   261,   176,   198,    95,    96,    97,    98,    99,
     100,   101,   102,   146,   180,     2,   278,   281,   105,   106,
     107,   108,   109,   110,   111,   112,   260,   190,   114,   115,
     116,     3,   201,   186,   187,   237,   238,   239,   240,   241,
     242,   374,   279,   173,   165,   174,     5,   177,    26,   178,
     144,   193,   133,     4,     5,    27,     6,     7,    59,    28,
     341,     8,   284,    29,   203,     7,    59,   199,    59,     8,
     177,    59,   178,    59,   443,   448,   202,   251,   408,   243,
      87,    88,   302,   170,   171,   293,   173,   204,   174,   336,
     188,   189,   154,   155,   156,   157,   158,   159,   160,    59,
     294,   163,   147,   148,   169,   205,   195,   196,   340,   184,
     134,   135,   136,   137,   138,   139,   140,   208,   432,   210,
      35,   220,   168,   280,   206,   207,   221,    36,    37,    38,
      39,   211,   212,   124,   213,   250,   304,   215,   217,   377,
     249,   292,   222,   223,   293,   453,   462,   456,   234,   289,
     459,   245,   469,   248,   306,   465,    40,    41,   305,   294,
     219,    42,    43,    66,    67,    68,   307,   177,   373,   178,
     209,   293,    44,    45,   481,    46,   336,   337,   342,   372,
     177,   482,   178,   177,   263,   178,   294,   141,   375,    73,
      74,    75,    76,    77,    78,    79,     4,     5,    69,   379,
     378,   286,   237,   238,   239,   240,   241,   242,     7,   291,
      26,   181,     8,    85,    86,   301,   381,    27,   400,    91,
     401,    28,   308,   428,   403,    29,   288,    70,    71,    72,
     297,   298,   299,   300,   338,   410,   413,   417,    70,    71,
      72,    64,    65,    66,    67,    68,   243,    24,   436,   427,
     442,   441,   335,    24,   461,   478,    73,    74,    75,    76,
      77,    78,    79,     5,   118,   119,   484,    73,    74,    75,
      76,    77,    78,    79,     7,   126,    82,   267,     8,   423,
     344,   256,   257,    89,    90,   277,    92,   235,    94,     0,
     268,   269,   270,   271,   371,   290,     4,     5,   268,   269,
     270,   271,   380,   123,     0,   367,   127,   128,     7,   367,
     131,   409,     8,   142,     0,   272,   411,   273,   274,   275,
     276,     4,     5,   272,   402,   273,   274,   275,   276,   407,
       0,    26,   218,     7,     0,     0,   117,     8,    27,     0,
       0,   412,    28,   414,     0,   415,    29,   416,   419,    26,
     421,   422,     0,     0,   425,   426,    27,   430,     0,   431,
      28,   433,   434,     0,    29,     0,   437,   438,     0,   439,
     440,   420,   129,     0,   446,   447,    70,    71,    72,     0,
     130,   454,   455,   457,     0,   435,   460,   132,     0,     0,
     464,   466,     0,   468,     0,     0,   471,     0,     0,   451,
       0,     0,   475,     0,     0,    73,    74,    75,    76,    77,
      78,    79,    70,    71,    72,     0,     0,     0,     0,   472,
      70,    71,    72,   363,   364,     5,     0,    70,    71,    72,
     120,   122,   120,   120,   122,   122,     7,     0,   120,     0,
       8,    73,    74,    75,    76,    77,    78,    79,     0,    73,
      74,    75,    76,    77,    78,    79,    73,    74,    75,    76,
      77,    78,    79,   303,     0,     0,     0,   343,     0,     5,
       0,     0,     0,     0,    26,     0,   268,   269,   270,   271,
       7,    27,     0,     0,     8,    28,     0,     0,     0,    29,
       0,   309,     0,     0,     0,     0,     0,   310,     0,     0,
       0,   272,     0,   273,   274,   275,   276,   311,   312,   313,
     314,   315,   316,   317,   318,   319,   320,   321,   322,   323,
     324,   325,   326,   327,   328,   329,   330,   331,   339,   332,
       0,     0,     0,     0,   310,    48,    49,    50,    51,    52,
      53,    54,    55,     0,   311,   312,   313,   314,   315,   316,
     317,   318,   319,   320,   321,   322,   323,   324,   325,   326,
     327,   328,   329,   330,   331,   376,   332,     0,     0,     0,
       0,   310,     0,    61,    62,    63,    64,    65,    66,    67,
      68,   311,   312,   313,   314,   315,   316,   317,   318,   319,
     320,   321,   322,   323,   324,   325,   326,   327,   328,   329,
     330,   331,   444,   332,     0,   449,    61,    62,    63,    64,
      65,    66,    67,    68,     0,     0,     0,     0,   463,    81,
       0,   467,     0,     0,   470,     0,     0,     0,     0,   473,
     474,     0,     0,   476,     0,     0,   477,     0,     0,     0,
     479,   384,   385,   386,   387,   388,   389,   390,   391,   392,
     393,   394,   395,   396,   397,   398,   399,     0,     0,     0,
       0,     0,   404,   405,   406,    61,    62,    63,    64,    65,
      66,    67,    68,     0,     0,     0,     0,     0,   103,    73,
      74,    75,    76,    77,    78,    79,     0,   118,   119,    62,
      63,    64,    65,    66,    67,    68,    63,    64,    65,    66,
      67,    68,   224,   225,   226,   227,   228,   229,   237,   238,
     239,   240,   241,   242
d693 72
a764 78
static const short yycheck[] =
{
       2,   141,    23,   263,     7,     8,    30,     4,     4,     4,
       4,   216,     0,    49,     3,    95,     3,   230,     1,     3,
      80,     3,     3,     3,    27,    28,    29,     3,     6,     7,
       8,     9,    10,    11,   233,    95,     4,   292,   251,     4,
      23,    49,   247,     4,    80,    48,    49,    50,    51,    52,
      53,    54,    55,    96,     4,    43,   255,   262,    61,    62,
      63,    64,    65,    66,    67,    68,     4,     4,    70,    71,
      72,    59,    80,    68,    69,    51,    52,    53,    54,    55,
      56,   336,     4,    48,    80,    50,    82,    48,    82,    50,
     114,    95,     3,    81,    82,    89,    84,    93,    95,    93,
     305,    97,    70,    97,    95,    93,    95,    80,    95,    97,
      48,    95,    50,    95,    95,    95,    80,    95,   373,    95,
      40,    41,   277,   147,   148,    82,    48,     3,    50,    85,
     154,   155,   134,   135,   136,   137,   138,   139,   140,    95,
      97,   143,   125,   126,   146,     3,   170,   171,   303,   152,
      61,    62,    63,    64,    65,    66,    67,    80,   424,    95,
       5,    71,   145,     4,   188,   189,    70,    12,    13,    14,
      15,   195,   196,    16,   198,    80,     4,   201,   202,     4,
       3,    79,   206,   207,    82,   445,   452,   447,   212,    80,
     450,   215,   458,   217,     4,   455,    41,    42,     3,    97,
     203,    46,    47,    90,    91,    92,    80,    48,    79,    50,
     193,    82,    57,    58,   480,    60,    85,    95,    95,    98,
      48,   481,    50,    48,   248,    50,    97,     3,    80,    72,
      73,    74,    75,    76,    77,    78,    81,    82,     3,    95,
      80,   265,    51,    52,    53,    54,    55,    56,    93,   270,
      82,    83,    97,    38,    39,   276,    95,    89,    95,    44,
      95,    93,   286,     3,    95,    97,   268,    43,    44,    45,
     272,   273,   274,   275,   298,    95,    95,    95,    43,    44,
      45,    88,    89,    90,    91,    92,    95,   270,   428,    95,
       4,    95,   294,   276,    95,    95,    72,    73,    74,    75,
      76,    77,    78,    82,    80,    81,     0,    72,    73,    74,
      75,    76,    77,    78,    93,    86,    35,     3,    97,   416,
     310,   236,   243,    42,    43,     3,    45,   213,    47,    -1,
      16,    17,    18,    19,   332,    80,    81,    82,    16,    17,
      18,    19,   344,    84,    -1,   328,    87,    88,    93,   332,
      91,   375,    97,    94,    -1,    41,   380,    43,    44,    45,
      46,    81,    82,    41,   366,    43,    44,    45,    46,   371,
      -1,    82,    83,    93,    -1,    -1,     3,    97,    89,    -1,
      -1,   383,    93,   407,    -1,   409,    97,    80,   412,    82,
     414,   415,    -1,    -1,   418,   419,    89,   421,    -1,   423,
      93,   425,   426,    -1,    97,    -1,   430,   431,    -1,   433,
     434,   413,     3,    -1,   438,   439,    43,    44,    45,    -1,
       3,   445,   446,   447,    -1,   427,   450,     3,    -1,    -1,
     454,   455,    -1,   457,    -1,    -1,   460,    -1,    -1,   441,
      -1,    -1,   466,    -1,    -1,    72,    73,    74,    75,    76,
      77,    78,    43,    44,    45,    -1,    -1,    -1,    -1,   461,
      43,    44,    45,    80,    81,    82,    -1,    43,    44,    45,
      83,    84,    85,    86,    87,    88,    93,    -1,    91,    -1,
      97,    72,    73,    74,    75,    76,    77,    78,    -1,    72,
      73,    74,    75,    76,    77,    78,    72,    73,    74,    75,
      76,    77,    78,     3,    -1,    -1,    -1,    80,    -1,    82,
      -1,    -1,    -1,    -1,    82,    -1,    16,    17,    18,    19,
      93,    89,    -1,    -1,    97,    93,    -1,    -1,    -1,    97,
      -1,     4,    -1,    -1,    -1,    -1,    -1,    10,    -1,    -1,
      -1,    41,    -1,    43,    44,    45,    46,    20,    21,    22,
      23,    24,    25,    26,    27,    28,    29,    30,    31,    32,
      33,    34,    35,    36,    37,    38,    39,    40,     4,    42,
      -1,    -1,    -1,    -1,    10,    85,    86,    87,    88,    89,
      90,    91,    92,    -1,    20,    21,    22,    23,    24,    25,
      26,    27,    28,    29,    30,    31,    32,    33,    34,    35,
      36,    37,    38,    39,    40,     4,    42,    -1,    -1,    -1,
      -1,    10,    -1,    85,    86,    87,    88,    89,    90,    91,
      92,    20,    21,    22,    23,    24,    25,    26,    27,    28,
      29,    30,    31,    32,    33,    34,    35,    36,    37,    38,
      39,    40,   437,    42,    -1,   440,    85,    86,    87,    88,
      89,    90,    91,    92,    -1,    -1,    -1,    -1,   453,    98,
      -1,   456,    -1,    -1,   459,    -1,    -1,    -1,    -1,   464,
     465,    -1,    -1,   468,    -1,    -1,   471,    -1,    -1,    -1,
     475,   347,   348,   349,   350,   351,   352,   353,   354,   355,
     356,   357,   358,   359,   360,   361,   362,    -1,    -1,    -1,
      -1,    -1,   368,   369,   370,    85,    86,    87,    88,    89,
      90,    91,    92,    -1,    -1,    -1,    -1,    -1,    98,    72,
      73,    74,    75,    76,    77,    78,    -1,    80,    81,    86,
      87,    88,    89,    90,    91,    92,    87,    88,    89,    90,
      91,    92,     6,     7,     8,     9,    10,    11,    51,    52,
      53,    54,    55,    56
d767 2
a768 1
#line 3 "/usr/share/bison-1.35/bison.simple"
d771 1
a771 3

   Copyright (C) 1984, 1989, 1990, 2000, 2001, 2002 Free Software
   Foundation, Inc.
d793 46
a838 57
/* This is the parser code that is written into each bison parser when
   the %semantic_parser declaration is not specified in the grammar.
   It was written by Richard Stallman by simplifying the hairy parser
   used when %semantic_parser is specified.  */

/* All symbols defined below should begin with yy or YY, to avoid
   infringing on user name space.  This should be done even for local
   variables, as they might otherwise be expanded by user macros.
   There are some unavoidable exceptions within include files to
   define necessary library symbols; they are noted "INFRINGES ON
   USER NAME SPACE" below.  */

#if ! defined (yyoverflow) || defined (YYERROR_VERBOSE)

/* The parser invokes alloca or malloc; define the necessary symbols.  */

# if YYSTACK_USE_ALLOCA
#  define YYSTACK_ALLOC alloca
# else
#  ifndef YYSTACK_USE_ALLOCA
#   if defined (alloca) || defined (_ALLOCA_H)
#    define YYSTACK_ALLOC alloca
#   else
#    ifdef __GNUC__
#     define YYSTACK_ALLOC __builtin_alloca
#    endif
#   endif
#  endif
# endif

# ifdef YYSTACK_ALLOC
   /* Pacify GCC's `empty if-body' warning. */
#  define YYSTACK_FREE(Ptr) do { /* empty */; } while (0)
# else
#  if defined (__STDC__) || defined (__cplusplus)
#   include <stdlib.h> /* INFRINGES ON USER NAME SPACE */
#   define YYSIZE_T size_t
#  endif
#  define YYSTACK_ALLOC malloc
#  define YYSTACK_FREE free
# endif
#endif /* ! defined (yyoverflow) || defined (YYERROR_VERBOSE) */


#if (! defined (yyoverflow) \
     && (! defined (__cplusplus) \
	 || (YYLTYPE_IS_TRIVIAL && YYSTYPE_IS_TRIVIAL)))

/* A type that is properly aligned for any stack member.  */
union yyalloc
{
  short yyss;
  YYSTYPE yyvs;
# if YYLSP_NEEDED
  YYLTYPE yyls;
# endif
};
d840 5
a844 2
/* The size of the maximum gap between one aligned stack and the next.  */
# define YYSTACK_GAP_MAX (sizeof (union yyalloc) - 1)
d846 3
a848 64
/* The size of an array large to enough to hold all stacks, each with
   N elements.  */
# if YYLSP_NEEDED
#  define YYSTACK_BYTES(N) \
     ((N) * (sizeof (short) + sizeof (YYSTYPE) + sizeof (YYLTYPE))	\
      + 2 * YYSTACK_GAP_MAX)
# else
#  define YYSTACK_BYTES(N) \
     ((N) * (sizeof (short) + sizeof (YYSTYPE))				\
      + YYSTACK_GAP_MAX)
# endif

/* Copy COUNT objects from FROM to TO.  The source and destination do
   not overlap.  */
# ifndef YYCOPY
#  if 1 < __GNUC__
#   define YYCOPY(To, From, Count) \
      __builtin_memcpy (To, From, (Count) * sizeof (*(From)))
#  else
#   define YYCOPY(To, From, Count)		\
      do					\
	{					\
	  register YYSIZE_T yyi;		\
	  for (yyi = 0; yyi < (Count); yyi++)	\
	    (To)[yyi] = (From)[yyi];		\
	}					\
      while (0)
#  endif
# endif

/* Relocate STACK from its old location to the new one.  The
   local variables YYSIZE and YYSTACKSIZE give the old and new number of
   elements in the stack, and YYPTR gives the new location of the
   stack.  Advance YYPTR to a properly aligned location for the next
   stack.  */
# define YYSTACK_RELOCATE(Stack)					\
    do									\
      {									\
	YYSIZE_T yynewbytes;						\
	YYCOPY (&yyptr->Stack, Stack, yysize);				\
	Stack = &yyptr->Stack;						\
	yynewbytes = yystacksize * sizeof (*Stack) + YYSTACK_GAP_MAX;	\
	yyptr += yynewbytes / sizeof (*yyptr);				\
      }									\
    while (0)

#endif


#if ! defined (YYSIZE_T) && defined (__SIZE_TYPE__)
# define YYSIZE_T __SIZE_TYPE__
#endif
#if ! defined (YYSIZE_T) && defined (size_t)
# define YYSIZE_T size_t
#endif
#if ! defined (YYSIZE_T)
# if defined (__STDC__) || defined (__cplusplus)
#  include <stddef.h> /* INFRINGES ON USER NAME SPACE */
#  define YYSIZE_T size_t
# endif
#endif
#if ! defined (YYSIZE_T)
# define YYSIZE_T unsigned int
#endif
d857 3
a859 2
/* Like YYERROR except do call yyerror.  This remains here temporarily
   to ease the transition to the new meaning of YYERROR, for GCC.
d863 1
a863 1
#define YYBACKUP(Token, Value)					\
d866 1
a866 3
    {								\
      yychar = (Token);						\
      yylval = (Value);						\
d872 1
a872 4
    { 								\
      yyerror ("syntax error: cannot back up");			\
      YYERROR;							\
    }								\
d878 21
d900 1
a900 2
/* YYLLOC_DEFAULT -- Compute the default location (before the actions
   are run).
d902 7
a908 8
   When YYLLOC_DEFAULT is run, CURRENT is set the location of the
   first token.  By default, to implement support for ranges, extend
   its range to the last symbol.  */

#ifndef YYLLOC_DEFAULT
# define YYLLOC_DEFAULT(Current, Rhs, N)       	\
   Current.last_line   = Rhs[N].last_line;	\
   Current.last_column = Rhs[N].last_column;
d911 8
d920 1
a920 40
/* YYLEX -- calling `yylex' with the right arguments.  */

#if YYPURE
# if YYLSP_NEEDED
#  ifdef YYLEX_PARAM
#   define YYLEX		yylex (&yylval, &yylloc, YYLEX_PARAM)
#  else
#   define YYLEX		yylex (&yylval, &yylloc)
#  endif
# else /* !YYLSP_NEEDED */
#  ifdef YYLEX_PARAM
#   define YYLEX		yylex (&yylval, YYLEX_PARAM)
#  else
#   define YYLEX		yylex (&yylval)
#  endif
# endif /* !YYLSP_NEEDED */
#else /* !YYPURE */
# define YYLEX			yylex ()
#endif /* !YYPURE */


/* Enable debugging if requested.  */
#if YYDEBUG

# ifndef YYFPRINTF
#  include <stdio.h> /* INFRINGES ON USER NAME SPACE */
#  define YYFPRINTF fprintf
# endif

# define YYDPRINTF(Args)			\
do {						\
  if (yydebug)					\
    YYFPRINTF Args;				\
} while (0)
/* Nonzero means print parse trace.  It is left uninitialized so that
   multiple parsers can coexist.  */
int yydebug;
#else /* !YYDEBUG */
# define YYDPRINTF(Args)
#endif /* !YYDEBUG */
a921 1
/* YYINITDEPTH -- initial size of the parser's stacks.  */
d923 1
a923 1
# define YYINITDEPTH 200
d926 2
a927 6
/* YYMAXDEPTH -- maximum size the stacks can grow to (effective only
   if the built-in stack extension method is used).

   Do not make this value too large; the results are undefined if
   SIZE_MAX < YYSTACK_BYTES (YYMAXDEPTH)
   evaluated with infinite-precision integer arithmetic.  */
d930 1
a930 1
# undef YYMAXDEPTH
d934 1
a934 1
# define YYMAXDEPTH 10000
d937 21
a957 19
#ifdef YYERROR_VERBOSE

# ifndef yystrlen
#  if defined (__GLIBC__) && defined (_STRING_H)
#   define yystrlen strlen
#  else
/* Return the length of YYSTR.  */
static YYSIZE_T
#   if defined (__STDC__) || defined (__cplusplus)
yystrlen (const char *yystr)
#   else
yystrlen (yystr)
     const char *yystr;
#   endif
{
  register const char *yys = yystr;

  while (*yys++ != '\0')
    continue;
d959 2
a960 1
  return yys - yystr - 1;
a961 2
#  endif
# endif
d963 1
a963 17
# ifndef yystpcpy
#  if defined (__GLIBC__) && defined (_STRING_H) && defined (_GNU_SOURCE)
#   define yystpcpy stpcpy
#  else
/* Copy YYSRC to YYDEST, returning the address of the terminating '\0' in
   YYDEST.  */
static char *
#   if defined (__STDC__) || defined (__cplusplus)
yystpcpy (char *yydest, const char *yysrc)
#   else
yystpcpy (yydest, yysrc)
     char *yydest;
     const char *yysrc;
#   endif
{
  register char *yyd = yydest;
  register const char *yys = yysrc;
d965 8
a972 2
  while ((*yyd++ = *yys++) != '\0')
    continue;
d974 2
a975 1
  return yyd - 1;
d977 2
a978 2
#  endif
# endif
d981 1
a981 2
#line 315 "/usr/share/bison-1.35/bison.simple"

d990 11
a1000 11
# if defined (__STDC__) || defined (__cplusplus)
#  define YYPARSE_PARAM_ARG void *YYPARSE_PARAM
#  define YYPARSE_PARAM_DECL
# else
#  define YYPARSE_PARAM_ARG YYPARSE_PARAM
#  define YYPARSE_PARAM_DECL void *YYPARSE_PARAM;
# endif
#else /* !YYPARSE_PARAM */
# define YYPARSE_PARAM_ARG
# define YYPARSE_PARAM_DECL
#endif /* !YYPARSE_PARAM */
d1004 1
a1004 1
# ifdef YYPARSE_PARAM
d1006 1
a1006 1
# else
a1007 1
# endif
a1008 23

/* YY_DECL_VARIABLES -- depending whether we use a pure parser,
   variables are global, or local to YYPARSE.  */

#define YY_DECL_NON_LSP_VARIABLES			\
/* The lookahead symbol.  */				\
int yychar;						\
							\
/* The semantic value of the lookahead symbol. */	\
YYSTYPE yylval;						\
							\
/* Number of parse errors so far.  */			\
int yynerrs;

#if YYLSP_NEEDED
# define YY_DECL_VARIABLES			\
YY_DECL_NON_LSP_VARIABLES			\
						\
/* Location data for the lookahead symbol.  */	\
YYLTYPE yylloc;
#else
# define YY_DECL_VARIABLES			\
YY_DECL_NON_LSP_VARIABLES
a1010 7

/* If nonreentrant, generate the variables here. */

#if !YYPURE
YY_DECL_VARIABLES
#endif  /* !YYPURE */

d1012 1
a1012 1
yyparse (YYPARSE_PARAM_ARG)
a1014 5
  /* If reentrant, generate the variables here. */
#if YYPURE
  YY_DECL_VARIABLES
#endif  /* !YYPURE */

a1016 17
  int yyresult;
  /* Number of tokens to shift before error messages enabled.  */
  int yyerrstatus;
  /* Lookahead token as an internal (translated) token number.  */
  int yychar1 = 0;

  /* Three stacks and their tools:
     `yyss': related to states,
     `yyvs': related to semantic values,
     `yyls': related to locations.

     Refer to the stacks thru separate pointers, to allow yyoverflow
     to reallocate them elsewhere.  */

  /* The state stack. */
  short	yyssa[YYINITDEPTH];
  short *yyss = yyssa;
d1018 3
d1022 5
a1026 4
  /* The semantic value stack.  */
  YYSTYPE yyvsa[YYINITDEPTH];
  YYSTYPE *yyvs = yyvsa;
  register YYSTYPE *yyvsp;
d1028 2
a1029 3
#if YYLSP_NEEDED
  /* The location stack.  */
  YYLTYPE yylsa[YYINITDEPTH];
a1031 1
#endif
d1033 1
a1033 2
#if YYLSP_NEEDED
# define YYPOPSTACK   (yyvsp--, yyssp--, yylsp--)
d1035 1
a1035 1
# define YYPOPSTACK   (yyvsp--, yyssp--)
d1038 2
a1039 1
  YYSIZE_T yystacksize = YYINITDEPTH;
d1041 8
d1050 3
a1052 6
  /* The variables used to return semantic value and location from the
     action routines.  */
  YYSTYPE yyval;
#if YYLSP_NEEDED
  YYLTYPE yyloc;
#endif
a1053 2
  /* When reducing, the number of symbols on the RHS of the reduced
     rule. */
d1056 4
a1059 1
  YYDPRINTF ((stderr, "Starting parse\n"));
d1071 1
a1071 1
  yyssp = yyss;
d1073 1
a1073 1
#if YYLSP_NEEDED
a1075 1
  goto yysetstate;
d1077 4
a1080 8
/*------------------------------------------------------------.
| yynewstate -- Push a new state, which is found in yystate.  |
`------------------------------------------------------------*/
 yynewstate:
  /* In all cases, when you get here, the value and location stacks
     have just been pushed. so pushing a state here evens the stacks.
     */
  yyssp++;
d1082 1
a1082 2
 yysetstate:
  *yyssp = yystate;
d1086 8
d1095 1
a1095 1
      YYSIZE_T yysize = yyssp - yyss + 1;
d1098 21
a1118 28
      {
	/* Give user a chance to reallocate the stack. Use copies of
	   these so that the &'s don't force the real ones into
	   memory.  */
	YYSTYPE *yyvs1 = yyvs;
	short *yyss1 = yyss;

	/* Each stack pointer address is followed by the size of the
	   data in use in that stack, in bytes.  */
# if YYLSP_NEEDED
	YYLTYPE *yyls1 = yyls;
	/* This used to be a conditional around just the two extra args,
	   but that might be undefined if yyoverflow is a macro.  */
	yyoverflow ("parser stack overflow",
		    &yyss1, yysize * sizeof (*yyssp),
		    &yyvs1, yysize * sizeof (*yyvsp),
		    &yyls1, yysize * sizeof (*yylsp),
		    &yystacksize);
	yyls = yyls1;
# else
	yyoverflow ("parser stack overflow",
		    &yyss1, yysize * sizeof (*yyssp),
		    &yyvs1, yysize * sizeof (*yyvsp),
		    &yystacksize);
# endif
	yyss = yyss1;
	yyvs = yyvs1;
      }
a1119 3
# ifndef YYSTACK_RELOCATE
      goto yyoverflowlab;
# else
d1122 12
a1133 1
	goto yyoverflowlab;
d1137 14
a1150 17

      {
	short *yyss1 = yyss;
	union yyalloc *yyptr =
	  (union yyalloc *) YYSTACK_ALLOC (YYSTACK_BYTES (yystacksize));
	if (! yyptr)
	  goto yyoverflowlab;
	YYSTACK_RELOCATE (yyss);
	YYSTACK_RELOCATE (yyvs);
# if YYLSP_NEEDED
	YYSTACK_RELOCATE (yyls);
# endif
# undef YYSTACK_RELOCATE
	if (yyss1 != yyssa)
	  YYSTACK_FREE (yyss1);
      }
# endif
d1153 4
a1156 4
      yyssp = yyss + yysize - 1;
      yyvsp = yyvs + yysize - 1;
#if YYLSP_NEEDED
      yylsp = yyls + yysize - 1;
d1159 4
a1162 2
      YYDPRINTF ((stderr, "Stack size increased to %lu\n",
		  (unsigned long int) yystacksize));
d1168 4
a1171 1
  YYDPRINTF ((stderr, "Entering state %d\n", yystate));
d1174 1
a1174 6


/*-----------.
| yybackup.  |
`-----------*/
yybackup:
d1193 4
a1196 1
      YYDPRINTF ((stderr, "Reading a token: "));
d1207 4
a1210 1
      YYDPRINTF ((stderr, "Now at end of input.\n"));
d1214 1
a1214 1
      yychar1 = YYTRANSLATE (yychar);
d1216 1
a1216 3
#if YYDEBUG
     /* We have to keep this `#if YYDEBUG', since we use variables
	which are defined only if `YYDEBUG' is set.  */
d1219 4
a1222 5
	  YYFPRINTF (stderr, "Next token is %d (%s",
		     yychar, yytname[yychar1]);
	  /* Give the individual parser a way to print the precise
	     meaning of a token, for further debugging info.  */
# ifdef YYPRINT
d1224 2
a1225 2
# endif
	  YYFPRINTF (stderr, ")\n");
d1257 5
a1261 2
  YYDPRINTF ((stderr, "Shifting token %d (%s), ",
	      yychar, yytname[yychar1]));
d1268 1
a1268 1
#if YYLSP_NEEDED
d1272 2
a1273 4
  /* Count tokens shifted since error; after three, turn off error
     status.  */
  if (yyerrstatus)
    yyerrstatus--;
d1278 2
a1280 4
/*-----------------------------------------------------------.
| yydefault -- do the default action for the current state.  |
`-----------------------------------------------------------*/
yydefault:
a1283 1
  goto yyreduce;
d1285 1
a1285 4

/*-----------------------------.
| yyreduce -- Do a reduction.  |
`-----------------------------*/
a1286 1
  /* yyn is the number of a rule to reduce with.  */
d1288 2
d1291 1
a1291 20
  /* If YYLEN is nonzero, implement the default value of the action:
     `$$ = $1'.

     Otherwise, the following line sets YYVAL to the semantic value of
     the lookahead token.  This behavior is undocumented and Bison
     users should not rely upon it.  Assigning to YYVAL
     unconditionally makes the parser a bit smaller, and it avoids a
     GCC warning that YYVAL may be used uninitialized.  */
  yyval = yyvsp[1-yylen];

#if YYLSP_NEEDED
  /* Similarly for the default location.  Let the user run additional
     commands if for instance locations are ranges.  */
  yyloc = yylsp[1-yylen];
  YYLLOC_DEFAULT (yyloc, (yylsp - yylen), yylen);
#endif

#if YYDEBUG
  /* We have to keep this `#if YYDEBUG', since we use variables which
     are defined only if `YYDEBUG' is set.  */
d1294 1
a1294 1
      int yyi;
d1296 2
a1297 2
      YYFPRINTF (stderr, "Reducing via rule %d (line %d), ",
		 yyn, yyrline[yyn]);
d1300 3
a1302 3
      for (yyi = yyprhs[yyn]; yyrhs[yyi] > 0; yyi++)
	YYFPRINTF (stderr, "%s ", yytname[yyrhs[yyi]]);
      YYFPRINTF (stderr, " -> %s\n", yytname[yyr1[yyn]]);
d1306 1
d1310 1
a1310 1
#line 177 "rcparse.y"
a1311 3
	    define_accelerator (yyvsp[-5].id, &yyvsp[-3].res_info, yyvsp[-1].pacc);
	    if (yychar != YYEMPTY)
	      YYERROR;
d1313 2
a1314 2
	  }
    break;
d1316 7
a1322 1
#line 187 "rcparse.y"
d1325 4
a1328 4
	  }
    break;
case 19:
#line 191 "rcparse.y"
d1345 4
a1348 4
	  }
    break;
case 20:
#line 212 "rcparse.y"
d1352 4
a1355 4
	  }
    break;
case 21:
#line 217 "rcparse.y"
d1361 1
a1361 1
		&& (yyval.acc.flags & (ACC_SHIFT | ACC_CONTROL)) != 0)
d1363 4
a1366 4
	  }
    break;
case 22:
#line 229 "rcparse.y"
d1381 1
a1381 1
		ch = TOUPPER (ch);
d1386 4
a1389 4
	  }
    break;
case 23:
#line 250 "rcparse.y"
d1395 4
a1398 4
	  }
    break;
case 24:
#line 260 "rcparse.y"
d1401 4
a1404 4
	  }
    break;
case 25:
#line 264 "rcparse.y"
d1407 4
a1410 4
	  }
    break;
case 26:
#line 269 "rcparse.y"
d1413 4
a1416 4
	  }
    break;
case 27:
#line 276 "rcparse.y"
d1419 4
a1422 4
	  }
    break;
case 28:
#line 280 "rcparse.y"
d1426 4
a1429 4
	  }
    break;
case 29:
#line 285 "rcparse.y"
d1432 4
a1435 4
	  }
    break;
case 30:
#line 289 "rcparse.y"
d1438 4
a1441 4
	  }
    break;
case 31:
#line 293 "rcparse.y"
d1444 4
a1447 4
	  }
    break;
case 32:
#line 297 "rcparse.y"
d1450 4
a1453 4
	  }
    break;
case 33:
#line 306 "rcparse.y"
d1456 4
a1459 7
	    if (yychar != YYEMPTY)
	      YYERROR;
	    rcparse_discard_strings ();
	  }
    break;
case 34:
#line 318 "rcparse.y"
d1462 4
a1465 7
	    if (yychar != YYEMPTY)
	      YYERROR;
	    rcparse_discard_strings ();
	  }
    break;
case 35:
#line 331 "rcparse.y"
d1480 4
a1483 5
	      style = 0;
	    }
    break;
case 36:
#line 348 "rcparse.y"
d1486 4
a1489 7
	    if (yychar != YYEMPTY)
	      YYERROR;
	    rcparse_discard_strings ();
	  }
    break;
case 37:
#line 356 "rcparse.y"
d1506 4
a1509 5
	      style = 0;
	    }
    break;
case 38:
#line 375 "rcparse.y"
d1512 4
a1515 7
	    if (yychar != YYEMPTY)
	      YYERROR;
	    rcparse_discard_strings ();
	  }
    break;
case 39:
#line 383 "rcparse.y"
d1533 4
a1536 5
	      style = 0;
	    }
    break;
case 40:
#line 403 "rcparse.y"
d1539 4
a1542 7
	    if (yychar != YYEMPTY)
	      YYERROR;
	    rcparse_discard_strings ();
	  }
    break;
case 41:
#line 413 "rcparse.y"
d1545 4
a1548 4
	  }
    break;
case 42:
#line 417 "rcparse.y"
d1551 4
a1554 4
	  }
    break;
case 44:
#line 425 "rcparse.y"
a1555 2
	    dialog.style |= WS_CAPTION;
	    style |= WS_CAPTION;
d1557 4
a1560 4
	  }
    break;
case 45:
#line 431 "rcparse.y"
d1563 8
a1570 4
	  }
    break;
case 46:
#line 436 "rcparse.y"
d1573 4
a1576 4
	  }
    break;
case 47:
#line 440 "rcparse.y"
d1579 4
a1582 10
	  }
    break;
case 48:
#line 444 "rcparse.y"
{
	    res_string_to_id (& dialog.class, yyvsp[0].s);
	  }
    break;
case 49:
#line 448 "rcparse.y"
a1584 1
	    style |= DS_SETFONT;
d1587 2
a1588 25
	    if (dialog.ex != NULL)
	      {
		dialog.ex->weight = 0;
		dialog.ex->italic = 0;
		dialog.ex->charset = 1;
	      }
	  }
    break;
case 50:
#line 461 "rcparse.y"
{
	    dialog.style |= DS_SETFONT;
	    style |= DS_SETFONT;
	    dialog.pointsize = yyvsp[-3].il;
	    unicode_from_ascii ((int *) NULL, &dialog.font, yyvsp[-1].s);
	    if (dialog.ex == NULL)
	      rcparse_warning (_("extended FONT requires DIALOGEX"));
	    else
	      {
		dialog.ex->weight = yyvsp[0].il;
		dialog.ex->italic = 0;
		dialog.ex->charset = 1;
	      }
	  }
    break;
d1590 1
a1590 1
#line 476 "rcparse.y"
a1592 1
	    style |= DS_SETFONT;
a1600 1
		dialog.ex->charset = 1;
d1602 2
a1603 2
	  }
    break;
d1605 1
a1605 1
#line 491 "rcparse.y"
d1607 3
a1609 14
	    dialog.style |= DS_SETFONT;
	    style |= DS_SETFONT;
	    dialog.pointsize = yyvsp[-5].il;
	    unicode_from_ascii ((int *) NULL, &dialog.font, yyvsp[-3].s);
	    if (dialog.ex == NULL)
	      rcparse_warning (_("extended FONT requires DIALOGEX"));
	    else
	      {
		dialog.ex->weight = yyvsp[-2].il;
		dialog.ex->italic = yyvsp[-1].il;
		dialog.ex->charset = yyvsp[0].il;
	      }
	  }
    break;
d1611 1
a1611 1
#line 506 "rcparse.y"
d1613 3
a1615 3
	    dialog.menu = yyvsp[0].id;
	  }
    break;
d1617 1
a1617 1
#line 510 "rcparse.y"
d1619 3
a1621 3
	    sub_res_info.characteristics = yyvsp[0].il;
	  }
    break;
d1623 1
a1623 7
#line 514 "rcparse.y"
{
	    sub_res_info.language = yyvsp[-1].il | (yyvsp[0].il << SUBLANG_SHIFT);
	  }
    break;
case 56:
#line 518 "rcparse.y"
d1626 4
a1629 4
	  }
    break;
case 58:
#line 526 "rcparse.y"
d1636 4
a1639 4
	  }
    break;
case 59:
#line 537 "rcparse.y"
d1644 4
a1647 4
	    }
    break;
case 60:
#line 543 "rcparse.y"
d1650 4
a1653 4
	  }
    break;
case 61:
#line 547 "rcparse.y"
d1658 4
a1661 4
	    }
    break;
case 62:
#line 553 "rcparse.y"
d1664 4
a1667 4
	  }
    break;
case 63:
#line 557 "rcparse.y"
d1672 4
a1675 4
	    }
    break;
case 64:
#line 563 "rcparse.y"
d1678 4
a1681 4
	  }
    break;
case 65:
#line 567 "rcparse.y"
d1686 4
a1689 4
	    }
    break;
case 66:
#line 573 "rcparse.y"
d1693 1
a1693 1
	      rcparse_warning (_("BEDIT requires DIALOGEX"));
d1695 4
a1698 4
	  }
    break;
case 67:
#line 580 "rcparse.y"
d1703 4
a1706 4
	    }
    break;
case 68:
#line 586 "rcparse.y"
d1709 4
a1712 4
	  }
    break;
case 69:
#line 590 "rcparse.y"
d1717 4
a1720 4
	    }
    break;
case 70:
#line 596 "rcparse.y"
d1723 4
a1726 4
	  }
    break;
case 71:
#line 601 "rcparse.y"
d1728 1
a1728 1
	    yyval.dialog_control = define_control (yyvsp[-9].id, yyvsp[-8].il, yyvsp[-5].il, yyvsp[-4].il, yyvsp[-3].il, yyvsp[-2].il, yyvsp[-7].il, style, yyvsp[-1].il);
d1735 4
a1738 4
	  }
    break;
case 72:
#line 612 "rcparse.y"
d1740 1
a1740 1
	    yyval.dialog_control = define_control (yyvsp[-10].id, yyvsp[-9].il, yyvsp[-6].il, yyvsp[-5].il, yyvsp[-4].il, yyvsp[-3].il, yyvsp[-8].il, style, yyvsp[-2].il);
d1745 4
a1748 4
	  }
    break;
case 73:
#line 621 "rcparse.y"
d1750 1
a1750 1
	    yyval.dialog_control = define_control (yyvsp[-10].id, yyvsp[-9].il, yyvsp[-5].il, yyvsp[-4].il, yyvsp[-3].il, yyvsp[-2].il, 0, style, yyvsp[-1].il);
d1758 5
a1762 5
  	    unicode_from_ascii (&yyval.dialog_control->class.u.n.length, &yyval.dialog_control->class.u.n.name, yyvsp[-7].s);
	  }
    break;
case 74:
#line 634 "rcparse.y"
d1764 1
a1764 1
	    yyval.dialog_control = define_control (yyvsp[-11].id, yyvsp[-10].il, yyvsp[-6].il, yyvsp[-5].il, yyvsp[-4].il, yyvsp[-3].il, 0, style, yyvsp[-2].il);
d1770 5
a1774 5
  	    unicode_from_ascii (&yyval.dialog_control->class.u.n.length, &yyval.dialog_control->class.u.n.name, yyvsp[-8].s);
	  }
    break;
case 75:
#line 644 "rcparse.y"
d1779 4
a1782 4
	    }
    break;
case 76:
#line 650 "rcparse.y"
d1785 4
a1788 4
	  }
    break;
case 77:
#line 654 "rcparse.y"
d1793 4
a1796 4
	    }
    break;
case 78:
#line 660 "rcparse.y"
d1799 4
a1802 4
	  }
    break;
case 79:
#line 664 "rcparse.y"
d1807 4
a1810 4
	    }
    break;
case 80:
#line 670 "rcparse.y"
d1813 4
a1816 4
	  }
    break;
case 81:
#line 674 "rcparse.y"
d1821 4
a1824 4
	    }
    break;
case 82:
#line 680 "rcparse.y"
d1827 4
a1830 4
	  }
    break;
case 83:
#line 684 "rcparse.y"
d1835 4
a1838 4
	    }
    break;
case 84:
#line 690 "rcparse.y"
d1844 4
a1847 4
	  }
    break;
case 85:
#line 697 "rcparse.y"
d1851 4
a1854 4
          }
    break;
case 86:
#line 703 "rcparse.y"
d1858 4
a1861 4
          }
    break;
case 87:
#line 709 "rcparse.y"
d1865 4
a1868 4
          }
    break;
case 88:
#line 715 "rcparse.y"
d1872 4
a1875 4
          }
    break;
case 89:
#line 720 "rcparse.y"
d1880 4
a1883 4
	    }
    break;
case 90:
#line 726 "rcparse.y"
d1889 4
a1892 4
	  }
    break;
case 91:
#line 733 "rcparse.y"
d1897 4
a1900 4
	    }
    break;
case 92:
#line 739 "rcparse.y"
d1903 4
a1906 4
	  }
    break;
case 93:
#line 743 "rcparse.y"
d1911 4
a1914 4
	    }
    break;
case 94:
#line 749 "rcparse.y"
d1917 4
a1920 4
	  }
    break;
case 95:
#line 753 "rcparse.y"
d1925 4
a1928 4
	    }
    break;
case 96:
#line 759 "rcparse.y"
d1931 4
a1934 4
	  }
    break;
case 97:
#line 763 "rcparse.y"
d1939 4
a1942 4
	    }
    break;
case 98:
#line 769 "rcparse.y"
d1945 4
a1948 4
	  }
    break;
case 99:
#line 773 "rcparse.y"
d1953 4
a1956 4
	    }
    break;
case 100:
#line 779 "rcparse.y"
d1959 4
a1962 4
	  }
    break;
case 101:
#line 783 "rcparse.y"
d1967 4
a1970 4
	    }
    break;
case 102:
#line 789 "rcparse.y"
d1973 4
a1976 4
	  }
    break;
case 103:
#line 793 "rcparse.y"
d1981 4
a1984 4
	    }
    break;
case 104:
#line 799 "rcparse.y"
d1987 4
a1990 4
	  }
    break;
case 105:
#line 803 "rcparse.y"
d1995 4
a1998 4
	    }
    break;
case 106:
#line 809 "rcparse.y"
d2001 6
a2006 2
	  }
    break;
d2008 1
a2008 5
#line 814 "rcparse.y"
{ style = WS_CHILD | WS_VISIBLE; }
    break;
case 108:
#line 816 "rcparse.y"
d2010 1
a2010 1
	    yyval.dialog_control = define_control (yyvsp[-13].id, yyvsp[-12].il, yyvsp[-10].il, yyvsp[-8].il, yyvsp[-6].il, yyvsp[-4].il, CTL_BUTTON,
d2012 4
a2015 4
	  }
    break;
case 109:
#line 832 "rcparse.y"
d2017 1
a2017 1
	    yyval.dialog_control = define_control (yyvsp[-6].id, yyvsp[-5].il, yyvsp[-4].il, yyvsp[-3].il, yyvsp[-2].il, yyvsp[-1].il, class,
d2025 4
a2028 4
	  }
    break;
case 110:
#line 844 "rcparse.y"
d2030 1
a2030 1
	    yyval.dialog_control = define_control (yyvsp[-8].id, yyvsp[-7].il, yyvsp[-6].il, yyvsp[-5].il, yyvsp[-4].il, yyvsp[-3].il, class, style, yyvsp[-1].il);
d2037 4
a2040 4
	  }
    break;
case 111:
#line 855 "rcparse.y"
d2042 1
a2042 1
	    yyval.dialog_control = define_control (yyvsp[-9].id, yyvsp[-8].il, yyvsp[-7].il, yyvsp[-6].il, yyvsp[-5].il, yyvsp[-4].il, class, style, yyvsp[-2].il);
d2047 8
a2054 2
	  }
    break;
d2056 1
a2056 1
#line 866 "rcparse.y"
d2058 3
a2060 3
	    res_string_to_id (&yyval.id, "");
	  }
    break;
d2062 1
a2062 1
#line 870 "rcparse.y"
d2064 3
a2066 4
	    yyval.id.named = 0;
	    yyval.id.u.id = yyvsp[-1].il;
	  }
    break;
d2068 1
a2068 1
#line 875 "rcparse.y"
d2070 3
a2072 3
	    res_string_to_id (&yyval.id, yyvsp[0].s);
	  }
    break;
d2074 1
a2074 1
#line 879 "rcparse.y"
d2076 3
a2078 3
	    res_string_to_id (&yyval.id, yyvsp[-1].s);
	  }
    break;
d2080 3
a2082 11
#line 886 "rcparse.y"
{
	    yyval.rcdata_item = NULL;
	  }
    break;
case 117:
#line 890 "rcparse.y"
{
	    yyval.rcdata_item = yyvsp[-1].rcdata.first;
	  }
    break;
d2084 3
a2086 3
#line 899 "rcparse.y"
{ style = WS_CHILD | WS_VISIBLE; }
    break;
d2088 3
a2090 3
#line 905 "rcparse.y"
{ style = SS_ICON | WS_CHILD | WS_VISIBLE; }
    break;
d2092 1
a2092 5
#line 911 "rcparse.y"
{ style = base_style | WS_CHILD | WS_VISIBLE; }
    break;
case 124:
#line 919 "rcparse.y"
d2095 4
a2098 7
	    if (yychar != YYEMPTY)
	      YYERROR;
	    rcparse_discard_strings ();
	  }
    break;
case 125:
#line 931 "rcparse.y"
d2101 4
a2104 7
	    if (yychar != YYEMPTY)
	      YYERROR;
	    rcparse_discard_strings ();
	  }
    break;
case 126:
#line 944 "rcparse.y"
d2106 5
a2110 5
	    language = yyvsp[-1].il | (yyvsp[0].il << SUBLANG_SHIFT);
	  }
    break;
case 127:
#line 953 "rcparse.y"
d2113 4
a2116 7
	    if (yychar != YYEMPTY)
	      YYERROR;
	    rcparse_discard_strings ();
	  }
    break;
case 128:
#line 963 "rcparse.y"
d2119 4
a2122 4
	  }
    break;
case 129:
#line 967 "rcparse.y"
d2135 4
a2138 4
	  }
    break;
case 130:
#line 984 "rcparse.y"
d2141 4
a2144 4
	  }
    break;
case 131:
#line 988 "rcparse.y"
d2147 4
a2150 4
	  }
    break;
case 132:
#line 992 "rcparse.y"
d2153 4
a2156 4
	  }
    break;
case 133:
#line 999 "rcparse.y"
d2159 4
a2162 4
	  }
    break;
case 134:
#line 1003 "rcparse.y"
d2165 4
a2168 4
	  }
    break;
case 135:
#line 1007 "rcparse.y"
d2171 4
a2174 4
	  }
    break;
case 136:
#line 1014 "rcparse.y"
d2177 4
a2180 4
	  }
    break;
case 137:
#line 1018 "rcparse.y"
d2183 4
a2186 4
	  }
    break;
case 138:
#line 1022 "rcparse.y"
d2189 4
a2192 4
	  }
    break;
case 139:
#line 1026 "rcparse.y"
d2195 4
a2198 4
	  }
    break;
case 140:
#line 1030 "rcparse.y"
d2201 4
a2204 4
	  }
    break;
case 141:
#line 1034 "rcparse.y"
d2207 4
a2210 4
	  }
    break;
case 142:
#line 1043 "rcparse.y"
d2213 4
a2216 7
	    if (yychar != YYEMPTY)
	      YYERROR;
	    rcparse_discard_strings ();
	  }
    break;
case 143:
#line 1053 "rcparse.y"
d2219 4
a2222 4
	  }
    break;
case 144:
#line 1057 "rcparse.y"
d2235 4
a2238 4
	  }
    break;
case 145:
#line 1074 "rcparse.y"
d2241 4
a2244 4
	  }
    break;
case 146:
#line 1078 "rcparse.y"
d2247 4
a2250 4
	  }
    break;
case 147:
#line 1082 "rcparse.y"
d2253 4
a2256 4
	  }
    break;
case 148:
#line 1086 "rcparse.y"
d2259 4
a2262 4
 	  }
    break;
case 149:
#line 1090 "rcparse.y"
d2265 4
a2268 4
	  }
    break;
case 150:
#line 1094 "rcparse.y"
d2271 4
a2274 4
	  }
    break;
case 151:
#line 1098 "rcparse.y"
d2277 4
a2280 4
	  }
    break;
case 152:
#line 1103 "rcparse.y"
d2283 4
a2286 4
	  }
    break;
case 153:
#line 1112 "rcparse.y"
d2289 4
a2292 7
	    if (yychar != YYEMPTY)
	      YYERROR;
	    rcparse_discard_strings ();
	  }
    break;
case 154:
#line 1124 "rcparse.y"
d2295 4
a2298 7
	    if (yychar != YYEMPTY)
	      YYERROR;
	    rcparse_discard_strings ();
	  }
    break;
case 155:
#line 1136 "rcparse.y"
d2301 4
a2304 4
	  }
    break;
case 156:
#line 1140 "rcparse.y"
d2308 4
a2311 4
	  }
    break;
case 157:
#line 1148 "rcparse.y"
d2315 4
a2318 4
	  }
    break;
case 158:
#line 1153 "rcparse.y"
d2321 4
a2324 4
	  }
    break;
case 159:
#line 1160 "rcparse.y"
d2331 4
a2334 4
	  }
    break;
case 160:
#line 1168 "rcparse.y"
d2341 4
a2344 4
	  }
    break;
case 161:
#line 1176 "rcparse.y"
d2352 4
a2355 4
	  }
    break;
case 162:
#line 1185 "rcparse.y"
d2363 8
a2370 8
	  }
    break;
case 163:
#line 1199 "rcparse.y"
{ sub_res_info = yyvsp[-1].res_info; }
    break;
case 166:
#line 1206 "rcparse.y"
d2373 4
a2376 7
	    if (yychar != YYEMPTY)
	      YYERROR;
	    rcparse_discard_strings ();
	  }
    break;
case 167:
#line 1213 "rcparse.y"
d2379 4
a2382 7
	    if (yychar != YYEMPTY)
	      YYERROR;
	    rcparse_discard_strings ();
	  }
    break;
case 168:
#line 1226 "rcparse.y"
d2385 4
a2388 7
	    if (yychar != YYEMPTY)
	      YYERROR;
	    rcparse_discard_strings ();
	  }
    break;
case 169:
#line 1233 "rcparse.y"
d2391 4
a2394 7
	    if (yychar != YYEMPTY)
	      YYERROR;
	    rcparse_discard_strings ();
	  }
    break;
case 170:
#line 1245 "rcparse.y"
d2397 4
a2400 7
	    if (yychar != YYEMPTY)
	      YYERROR;
	    rcparse_discard_strings ();
	  }
    break;
case 171:
#line 1255 "rcparse.y"
d2405 4
a2408 4
	  }
    break;
case 172:
#line 1261 "rcparse.y"
d2413 4
a2416 4
	  }
    break;
case 173:
#line 1267 "rcparse.y"
d2421 4
a2424 4
	  }
    break;
case 174:
#line 1273 "rcparse.y"
d2428 4
a2431 4
	  }
    break;
case 175:
#line 1278 "rcparse.y"
d2435 4
a2438 4
	  }
    break;
case 176:
#line 1283 "rcparse.y"
d2442 4
a2445 4
	  }
    break;
case 177:
#line 1288 "rcparse.y"
d2449 4
a2452 4
	  }
    break;
case 178:
#line 1293 "rcparse.y"
d2456 4
a2459 4
	  }
    break;
case 179:
#line 1307 "rcparse.y"
d2462 4
a2465 4
	  }
    break;
case 180:
#line 1311 "rcparse.y"
d2468 4
a2471 4
	  }
    break;
case 181:
#line 1315 "rcparse.y"
d2474 4
a2477 4
	  }
    break;
case 182:
#line 1322 "rcparse.y"
d2480 4
a2483 4
	  }
    break;
case 183:
#line 1326 "rcparse.y"
d2486 4
a2489 4
	  }
    break;
case 184:
#line 1333 "rcparse.y"
d2492 4
a2495 4
	  }
    break;
case 185:
#line 1337 "rcparse.y"
d2498 4
a2501 4
	  }
    break;
case 186:
#line 1346 "rcparse.y"
d2505 4
a2508 4
	  }
    break;
case 187:
#line 1351 "rcparse.y"
d2515 2
a2516 1
	      *s = TOUPPER (*s);
d2519 4
a2522 4
	  }
    break;
case 188:
#line 1367 "rcparse.y"
d2525 4
a2528 4
	  }
    break;
case 189:
#line 1371 "rcparse.y"
d2531 4
a2534 4
	  }
    break;
case 190:
#line 1375 "rcparse.y"
d2537 4
a2540 4
	  }
    break;
case 191:
#line 1383 "rcparse.y"
d2544 4
a2547 4
	  }
    break;
case 192:
#line 1388 "rcparse.y"
d2554 2
a2555 1
	      *s = TOUPPER (*s);
d2558 4
a2561 4
	  }
    break;
case 193:
#line 1405 "rcparse.y"
d2566 5
a2570 5
	    yyval.res_info.memflags = MEMFLAG_MOVEABLE | MEMFLAG_PURE | MEMFLAG_DISCARDABLE;
	  }
    break;
case 194:
#line 1412 "rcparse.y"
d2575 4
a2578 4
	  }
    break;
case 195:
#line 1418 "rcparse.y"
d2582 4
a2585 4
	  }
    break;
case 196:
#line 1423 "rcparse.y"
d2588 5
a2592 5
	    yyval.res_info.language = yyvsp[-1].il | (yyvsp[0].il << SUBLANG_SHIFT);
	  }
    break;
case 197:
#line 1428 "rcparse.y"
d2596 4
a2599 4
	  }
    break;
case 198:
#line 1438 "rcparse.y"
d2604 4
a2607 4
	  }
    break;
case 199:
#line 1444 "rcparse.y"
d2612 4
a2615 4
	  }
    break;
case 200:
#line 1455 "rcparse.y"
d2619 5
a2623 5
	    yyval.res_info.memflags = MEMFLAG_MOVEABLE | MEMFLAG_PURE | MEMFLAG_DISCARDABLE;
	  }
    break;
case 201:
#line 1461 "rcparse.y"
d2628 4
a2631 4
	  }
    break;
case 202:
#line 1473 "rcparse.y"
d2635 4
a2638 4
	  }
    break;
case 203:
#line 1478 "rcparse.y"
d2642 4
a2645 4
	  }
    break;
case 204:
#line 1483 "rcparse.y"
d2649 4
a2652 4
	  }
    break;
case 205:
#line 1488 "rcparse.y"
d2656 4
a2659 4
	  }
    break;
case 206:
#line 1493 "rcparse.y"
d2663 4
a2666 4
	  }
    break;
case 207:
#line 1498 "rcparse.y"
d2670 4
a2673 4
	  }
    break;
case 208:
#line 1503 "rcparse.y"
d2677 4
a2680 4
	  }
    break;
case 209:
#line 1513 "rcparse.y"
d2683 4
a2686 4
	  }
    break;
case 210:
#line 1517 "rcparse.y"
d2689 4
a2692 4
	  }
    break;
case 211:
#line 1534 "rcparse.y"
d2695 4
a2698 4
	  }
    break;
case 212:
#line 1538 "rcparse.y"
d2701 4
a2704 4
	  }
    break;
case 213:
#line 1542 "rcparse.y"
d2707 4
a2710 4
	  }
    break;
case 214:
#line 1546 "rcparse.y"
d2713 4
a2716 4
	  }
    break;
case 215:
#line 1553 "rcparse.y"
d2719 4
a2722 4
	  }
    break;
case 216:
#line 1557 "rcparse.y"
d2725 4
a2728 4
	  }
    break;
case 217:
#line 1566 "rcparse.y"
d2731 4
a2734 4
	  }
    break;
case 218:
#line 1570 "rcparse.y"
d2737 4
a2740 4
	  }
    break;
case 219:
#line 1579 "rcparse.y"
d2743 4
a2746 4
	  }
    break;
case 220:
#line 1588 "rcparse.y"
d2749 4
a2752 4
	  }
    break;
case 221:
#line 1597 "rcparse.y"
d2755 4
a2758 4
	  }
    break;
case 222:
#line 1601 "rcparse.y"
d2761 4
a2764 4
	  }
    break;
case 223:
#line 1605 "rcparse.y"
d2768 4
a2771 4
	  }
    break;
case 224:
#line 1610 "rcparse.y"
d2775 4
a2778 4
	  }
    break;
case 225:
#line 1615 "rcparse.y"
d2782 4
a2785 4
	  }
    break;
case 226:
#line 1620 "rcparse.y"
d2789 4
a2792 4
	  }
    break;
case 227:
#line 1625 "rcparse.y"
d2796 4
a2799 4
	  }
    break;
case 228:
#line 1630 "rcparse.y"
d2803 4
a2806 4
	  }
    break;
case 229:
#line 1635 "rcparse.y"
d2810 4
a2813 4
	  }
    break;
case 230:
#line 1640 "rcparse.y"
d2817 4
a2820 4
	  }
    break;
case 231:
#line 1645 "rcparse.y"
d2824 4
a2827 4
	  }
    break;
case 232:
#line 1650 "rcparse.y"
d2831 4
a2834 4
	  }
    break;
case 233:
#line 1661 "rcparse.y"
d2837 4
a2840 4
	  }
    break;
case 234:
#line 1670 "rcparse.y"
d2843 4
a2846 4
	  }
    break;
case 235:
#line 1681 "rcparse.y"
d2849 4
a2852 4
	  }
    break;
case 236:
#line 1685 "rcparse.y"
d2855 4
a2858 4
	  }
    break;
case 237:
#line 1689 "rcparse.y"
d2862 4
a2865 4
	  }
    break;
case 238:
#line 1694 "rcparse.y"
d2869 4
a2872 4
	  }
    break;
case 239:
#line 1699 "rcparse.y"
d2876 4
a2879 4
	  }
    break;
case 240:
#line 1704 "rcparse.y"
d2883 4
a2886 4
	  }
    break;
case 241:
#line 1709 "rcparse.y"
d2890 4
a2893 4
	  }
    break;
case 242:
#line 1714 "rcparse.y"
d2897 4
a2900 4
	  }
    break;
case 243:
#line 1719 "rcparse.y"
d2904 4
a2907 4
	  }
    break;
case 244:
#line 1724 "rcparse.y"
d2911 4
a2914 4
	  }
    break;
case 245:
#line 1729 "rcparse.y"
d2918 2
a2919 2
	  }
    break;
d2921 2
a2922 3

#line 705 "/usr/share/bison-1.35/bison.simple"

d2926 1
a2926 1
#if YYLSP_NEEDED
d2930 1
a2930 1
#if YYDEBUG
d2933 5
a2937 5
      short *yyssp1 = yyss - 1;
      YYFPRINTF (stderr, "state stack now");
      while (yyssp1 != yyssp)
	YYFPRINTF (stderr, " %d", *++yyssp1);
      YYFPRINTF (stderr, "\n");
d2942 16
a2957 2
#if YYLSP_NEEDED
  *++yylsp = yyloc;
d2960 4
a2963 3
  /* Now `shift' the result of the reduction.  Determine what state
     that goes to, based on the state we popped back to and the rule
     number reduced by.  */
d2975 1
d2977 2
a2978 6
/*------------------------------------.
| yyerrlab -- here on detecting error |
`------------------------------------*/
yyerrlab:
  /* If not already recovering from an error, report this error.  */
  if (!yyerrstatus)
d2987 12
a2998 15
	  YYSIZE_T yysize = 0;
	  char *yymsg;
	  int yyx, yycount;

	  yycount = 0;
	  /* Start YYX at -YYN if negative to avoid negative indexes in
	     YYCHECK.  */
	  for (yyx = yyn < 0 ? -yyn : 0;
	       yyx < (int) (sizeof (yytname) / sizeof (char *)); yyx++)
	    if (yycheck[yyx + yyn] == yyx)
	      yysize += yystrlen (yytname[yyx]) + 15, yycount++;
	  yysize += yystrlen ("parse error, unexpected ") + 1;
	  yysize += yystrlen (yytname[YYTRANSLATE (yychar)]);
	  yymsg = (char *) YYSTACK_ALLOC (yysize);
	  if (yymsg != 0)
d3000 1
a3000 2
	      char *yyp = yystpcpy (yymsg, "parse error, unexpected ");
	      yyp = yystpcpy (yyp, yytname[YYTRANSLATE (yychar)]);
d3002 1
a3002 1
	      if (yycount < 5)
d3004 4
a3007 5
		  yycount = 0;
		  for (yyx = yyn < 0 ? -yyn : 0;
		       yyx < (int) (sizeof (yytname) / sizeof (char *));
		       yyx++)
		    if (yycheck[yyx + yyn] == yyx)
d3009 4
a3012 4
			const char *yyq = ! yycount ? ", expecting " : " or ";
			yyp = yystpcpy (yyp, yyq);
			yyp = yystpcpy (yyp, yytname[yyx]);
			yycount++;
d3015 2
a3016 2
	      yyerror (yymsg);
	      YYSTACK_FREE (yymsg);
d3019 1
a3019 1
	    yyerror ("parse error; also virtual memory exhausted");
d3022 2
a3023 2
#endif /* defined (YYERROR_VERBOSE) */
	yyerror ("parse error");
d3025 1
d3027 1
a3028 5

/*--------------------------------------------------.
| yyerrlab1 -- error raised explicitly by an action |
`--------------------------------------------------*/
yyerrlab1:
d3031 1
a3031 2
      /* If just tried and failed to reuse lookahead token after an
	 error, discard it.  */
d3036 6
a3041 2
      YYDPRINTF ((stderr, "Discarding token %d (%s).\n",
		  yychar, yytname[yychar1]));
d3045 2
a3046 2
  /* Else will try to reuse lookahead token after shifting the error
     token.  */
d3052 1
a3053 5
/*-------------------------------------------------------------------.
| yyerrdefault -- current state does not do anything special for the |
| error token.                                                       |
`-------------------------------------------------------------------*/
yyerrdefault:
d3057 2
a3058 5

  /* If its default is to accept any token, ok.  Otherwise pop it.  */
  yyn = yydefact[yystate];
  if (yyn)
    goto yydefault;
d3061 1
d3063 1
a3063 7
/*---------------------------------------------------------------.
| yyerrpop -- pop the current state because it cannot handle the |
| error token                                                    |
`---------------------------------------------------------------*/
yyerrpop:
  if (yyssp == yyss)
    YYABORT;
d3066 1
a3066 1
#if YYLSP_NEEDED
d3070 1
a3070 1
#if YYDEBUG
d3073 5
a3077 5
      short *yyssp1 = yyss - 1;
      YYFPRINTF (stderr, "Error: state stack now");
      while (yyssp1 != yyssp)
	YYFPRINTF (stderr, " %d", *++yyssp1);
      YYFPRINTF (stderr, "\n");
a3080 3
/*--------------.
| yyerrhandle.  |
`--------------*/
d3082 1
d3105 4
a3108 1
  YYDPRINTF ((stderr, "Shifting error token, "));
d3111 1
a3111 1
#if YYLSP_NEEDED
d3118 11
d3130 8
a3137 26
/*-------------------------------------.
| yyacceptlab -- YYACCEPT comes here.  |
`-------------------------------------*/
yyacceptlab:
  yyresult = 0;
  goto yyreturn;

/*-----------------------------------.
| yyabortlab -- YYABORT comes here.  |
`-----------------------------------*/
yyabortlab:
  yyresult = 1;
  goto yyreturn;

/*---------------------------------------------.
| yyoverflowab -- parser overflow comes here.  |
`---------------------------------------------*/
yyoverflowlab:
  yyerror ("parser stack overflow");
  yyresult = 2;
  /* Fall through.  */

yyreturn:
#ifndef yyoverflow
  if (yyss != yyssa)
    YYSTACK_FREE (yyss);
d3139 2
a3140 1
  return yyresult;
d3142 1
a3142 1
#line 1735 "rcparse.y"
@


1.1.1.4
log
@Binutils 2.15, with testsuites removed, and without gdb and libiberty.
@
text
@a144 1
static struct res_id res_text_field;
a145 3
/* This is used for COMBOBOX, LISTBOX and EDITTEXT which
   do not allow resource 'text' field in control definition. */
static const struct res_id res_null_text = { 1, {{0, L""}}};
d147 1
a147 2

#line 63 "rcparse.y"
d197 1
a197 1
#define	YYFINAL		499
d252 19
a270 19
     224,   229,   230,   235,   236,   241,   242,   247,   248,   253,
     254,   258,   270,   283,   296,   310,   311,   316,   317,   322,
     323,   327,   328,   333,   334,   339,   346,   355,   366,   378,
     379,   384,   385,   389,   390,   395,   396,   401,   402,   407,
     408,   413,   414,   419,   420,   424,   425,   430,   431,   447,
     454,   463,   473,   474,   477,   479,   482,   483,   487,   488,
     492,   493,   497,   498,   502,   507,   512,   516,   523,   524,
     527,   532,   535,   542,   543,   547,   550,   552,   554,   556,
     558,   560,   562,   569,   570,   573,   576,   580,   586,   589,
     595,   602,   610,   620,   625,   632,   633,   636,   637,   639,
     641,   643,   647,   651,   652,   659,   660,   664,   669,   676,
     681,   688,   689,   696,   703,   707,   711,   715,   719,   723,
     724,   733,   741,   742,   748,   749,   753,   755,   757,   759,
     762,   765,   768,   770,   771,   774,   778,   783,   787,   788,
     791,   792,   795,   797,   799,   801,   803,   805,   807,   809,
     811,   813,   815,   818,   822,   827,   829,   833,   834,   836,
     839,   841,   843,   847,   850,   853,   857,   861,   865,   869,
     873,   877,   881,   885,   888,   890,   892,   896,   899,   903,
     907,   911,   915,   919,   923,   927
d296 70
a365 72
     114,   115,     0,     0,    20,   138,   116,   137,     0,     0,
      21,   138,   117,   137,     0,     0,    22,   138,   118,   137,
       0,     0,    38,   138,   119,   137,     0,     0,    23,   138,
     120,   137,     0,     0,    24,   121,   137,     0,    10,   138,
     184,   183,   140,   183,   183,   183,   183,   182,   139,     0,
      10,   138,   184,   183,   140,   183,   183,   183,   183,   183,
     183,   139,     0,    10,   138,   184,    95,    80,   140,   183,
     183,   183,   183,   182,   139,     0,    10,   138,   184,    95,
      80,   140,   183,   183,   183,   183,   183,   183,   139,     0,
       0,    25,   138,   122,   137,     0,     0,    26,   138,   123,
     137,     0,     0,    27,   124,   137,     0,     0,    28,   138,
     125,   137,     0,     0,    39,   138,   126,   137,     0,    42,
     174,   184,   183,   183,   139,     0,    42,   174,   184,   183,
     183,   183,   183,   139,     0,    42,   174,   184,   183,   183,
     183,   183,   142,   182,   139,     0,    42,   174,   184,   183,
     183,   183,   183,   142,   183,   183,   139,     0,     0,    40,
     138,   127,   137,     0,     0,    29,   128,   137,     0,     0,
      30,   138,   129,   137,     0,     0,    31,   138,   130,   137,
       0,     0,    32,   138,   131,   137,     0,     0,    33,   138,
     132,   137,     0,     0,    34,   138,   133,   137,     0,     0,
      35,   134,   137,     0,     0,    36,   138,   135,   137,     0,
       0,    37,   174,   184,    95,   184,    95,   184,    95,   184,
      95,   184,    95,   136,   180,   182,     0,   184,   183,   183,
     183,   183,   139,     0,   184,   183,   183,   183,   183,   144,
     182,   139,     0,   184,   183,   183,   183,   183,   144,   183,
     183,   139,     0,     0,   187,    95,     0,    80,     0,    80,
      95,     0,     0,     3,   159,     4,     0,     0,    95,   141,
     180,     0,     0,    95,   143,   180,     0,     0,    95,   145,
     180,     0,   172,    41,   176,   179,     0,   172,    42,   176,
     179,     0,    43,   184,   183,     0,   172,    46,   175,     3,
     150,     4,     0,     0,   150,   151,     0,    48,    80,   183,
     152,     0,    48,    49,     0,    50,    80,   152,     3,   150,
       4,     0,     0,   152,    95,   153,     0,   152,   153,     0,
      51,     0,    52,     0,    53,     0,    54,     0,    55,     0,
      56,     0,   172,    47,   175,     3,   155,     4,     0,     0,
     155,   156,     0,    48,    80,     0,    48,    80,   183,     0,
      48,    80,   183,   183,   182,     0,    48,    49,     0,    50,
      80,     3,   155,     4,     0,    50,    80,   183,     3,   155,
       4,     0,    50,    80,   183,   183,     3,   155,     4,     0,
      50,    80,   183,   183,   183,   182,     3,   155,     4,     0,
     172,    57,   177,   179,     0,   172,    58,   175,     3,   159,
       4,     0,     0,   160,   161,     0,     0,   162,     0,    83,
       0,   185,     0,   162,    95,    83,     0,   162,    95,   185,
       0,     0,    59,   175,     3,   164,   165,     4,     0,     0,
     165,   184,    80,     0,   165,   184,    95,    80,     0,   172,
     172,   175,     3,   159,     4,     0,   172,   172,   175,   179,
       0,   172,    60,   168,     3,   169,     4,     0,     0,   168,
      61,   184,   183,   183,   183,     0,   168,    62,   184,   183,
     183,   183,     0,   168,    63,   184,     0,   168,    64,   184,
       0,   168,    65,   184,     0,   168,    66,   184,     0,   168,
      67,   184,     0,     0,   169,    68,     3,    71,     3,   170,
       4,     4,     0,   169,    69,     3,    70,    80,   171,     4,
       0,     0,   170,    70,    80,    95,    80,     0,     0,   171,
     183,   183,     0,   187,     0,    81,     0,    80,     0,    80,
      95,     0,    81,    95,     0,   187,    95,     0,   173,     0,
       0,   175,   178,     0,   175,    44,   184,     0,   175,    43,
     184,   183,     0,   175,    45,   184,     0,     0,   176,   178,
       0,     0,   177,   178,     0,    72,     0,    73,     0,    74,
       0,    75,     0,    76,     0,    77,     0,    78,     0,    80,
       0,    81,     0,   181,     0,    79,   181,     0,   180,    85,
     181,     0,   180,    85,    79,   181,     0,    82,     0,    97,
     184,    98,     0,     0,   183,     0,    95,   184,     0,   185,
       0,    82,     0,    97,   185,    98,     0,    93,   185,     0,
      89,   185,     0,   185,    90,   185,     0,   185,    91,   185,
       0,   185,    92,   185,     0,   185,    88,   185,     0,   185,
      89,   185,     0,   185,    87,   185,     0,   185,    86,   185,
       0,   185,    85,   185,     0,    95,   187,     0,   188,     0,
      82,     0,    97,   185,    98,     0,    93,   185,     0,   188,
      90,   185,     0,   188,    91,   185,     0,   188,    92,   185,
       0,   188,    88,   185,     0,   188,    89,   185,     0,   188,
      87,   185,     0,   188,    86,   185,     0,   188,    85,   185,
       0
d374 25
a398 25
       0,   159,   161,   162,   163,   164,   165,   166,   167,   168,
     169,   170,   171,   172,   173,   174,   175,   180,   190,   195,
     215,   221,   232,   254,   263,   268,   273,   279,   284,   289,
     293,   297,   301,   309,   321,   333,   333,   359,   359,   386,
     386,   416,   421,   427,   429,   435,   439,   444,   448,   452,
     465,   480,   495,   510,   514,   518,   522,   528,   530,   540,
     540,   552,   552,   563,   563,   574,   574,   588,   588,   599,
     599,   612,   623,   632,   645,   656,   656,   667,   667,   678,
     678,   689,   689,   700,   700,   714,   719,   725,   731,   737,
     737,   751,   751,   762,   762,   773,   773,   783,   783,   794,
     794,   805,   805,   816,   816,   827,   827,   838,   838,   855,
     867,   878,   889,   894,   899,   903,   909,   914,   922,   922,
     928,   928,   934,   934,   942,   954,   967,   976,   986,   991,
    1007,  1012,  1016,  1022,  1027,  1031,  1037,  1042,  1046,  1050,
    1054,  1058,  1066,  1076,  1081,  1097,  1102,  1106,  1110,  1114,
    1118,  1122,  1126,  1135,  1147,  1160,  1160,  1171,  1177,  1183,
    1192,  1200,  1209,  1222,  1222,  1228,  1230,  1237,  1249,  1257,
    1268,  1278,  1285,  1291,  1297,  1302,  1307,  1312,  1317,  1330,
    1335,  1339,  1345,  1350,  1356,  1361,  1369,  1375,  1390,  1395,
    1399,  1406,  1412,  1428,  1436,  1442,  1447,  1452,  1461,  1468,
    1478,  1485,  1496,  1502,  1507,  1512,  1517,  1522,  1527,  1536,
    1541,  1557,  1562,  1566,  1570,  1576,  1581,  1589,  1594,  1602,
    1611,  1620,  1625,  1629,  1634,  1639,  1644,  1649,  1654,  1659,
    1664,  1669,  1674,  1684,  1693,  1704,  1709,  1713,  1718,  1723,
    1728,  1733,  1738,  1743,  1748,  1753
d482 6
a487 6
       4,     0,     4,     0,     4,     0,     4,     0,     4,     0,
       3,    11,    12,    12,    13,     0,     4,     0,     4,     0,
       3,     0,     4,     0,     4,     6,     8,    10,    11,     0,
       4,     0,     3,     0,     4,     0,     4,     0,     4,     0,
       4,     0,     4,     0,     3,     0,     4,     0,    15,     6,
       8,     9,     0,     2,     1,     2,     0,     3,     0,     3,
d539 18
a556 19
     112,   112,   112,   112,   112,    69,   112,   112,    79,   112,
      91,   112,   112,   112,   112,   112,   103,   112,     0,   112,
     112,   112,     0,    58,   212,     0,     0,     0,    55,    38,
       0,     0,     0,   114,     0,     0,    59,    61,    63,    67,
       0,    75,    77,     0,    81,     0,    93,    95,    97,    99,
     101,     0,   105,   188,     0,   192,     0,     0,    65,    83,
      89,     0,   216,     0,   213,    49,    40,   152,   183,   115,
       0,   113,     0,     0,     0,     0,    70,     0,     0,     0,
      80,     0,    92,     0,     0,     0,     0,     0,   104,     0,
     189,   190,     0,   191,     0,     0,     0,     0,   214,    50,
       0,     0,    60,    62,    64,    68,     0,    76,    78,    82,
      94,    96,    98,   100,   102,   106,     0,    66,    84,    90,
       0,    51,     0,   118,     0,     0,     0,   116,    52,     0,
       0,     0,     0,     0,   155,    85,     0,     0,   119,     0,
     116,     0,     0,   116,     0,     0,   122,   109,   217,     0,
     117,   120,    86,   217,     0,   217,     0,   116,   218,     0,
       0,   116,   218,   217,   116,   218,   123,   110,   116,     0,
     121,    87,   116,   116,   218,    71,   116,   111,     0,    88,
      73,   116,    72,   107,    74,     0,   217,   108,     0,     0
d562 4
a565 4
     232,   233,   255,   125,   253,   287,   333,   382,   383,   384,
     404,   385,   350,   388,   389,   353,   391,   405,   406,   355,
     393,   394,   395,   396,   397,   361,   399,   495,   386,   344,
     445,   434,   440,   463,   470,   458,   466,    13,    14,    15,
d569 1
a569 1
     121,   295,   296,   258,   259,   387,    31,   194,   345,    25
d574 39
a612 1
  -32768,    13,   265,-32768,-32768,-32768,-32768,   265,   265,-32768,
d614 9
a622 48
  -32768,-32768,-32768,   110,-32768,   567,-32768,   265,   265,   265,
     -70,   605,   300,-32768,   657,-32768,-32768,-32768,-32768,-32768,
  -32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,   265,   265,
     265,   265,   265,   265,   265,   265,-32768,-32768,   671,   265,
  -32768,   265,   265,   265,   265,   265,   265,   265,   265,-32768,
     265,   265,   265,-32768,-32768,-32768,-32768,-32768,-32768,-32768,
  -32768,-32768,   307,   698,   698,   224,   224,   698,   698,   323,
     345,   698,   445,   195,   244,   694,   700,   217,    89,    89,
  -32768,-32768,-32768,-32768,-32768,   694,   700,   217,    89,    89,
  -32768,-32768,-32768,-32768,   -70,-32768,-32768,-32768,-32768,-32768,
  -32768,-32768,-32768,-32768,   -42,   141,   141,-32768,-32768,-32768,
  -32768,-32768,-32768,-32768,   265,   265,   265,   265,   265,   265,
     265,-32768,-32768,    -1,-32768,     5,   265,   -70,   -70,     3,
      34,    51,   186,    39,   -70,   -70,-32768,-32768,-32768,-32768,
  -32768,    54,-32768,    10,-32768,-32768,-32768,   -12,-32768,-32768,
     -70,   -70,-32768,   -35,    11,-32768,-32768,   -31,    31,-32768,
  -32768,-32768,-32768,    23,   605,-32768,   128,   137,   -70,   -70,
  -32768,-32768,    68,   141,    58,   -70,   -70,-32768,   -70,-32768,
  -32768,   -70,     8,   516,    28,    85,   -70,   -70,-32768,-32768,
     787,-32768,   -70,-32768,   158,   -70,-32768,     9,-32768,   605,
     156,    80,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,
      22,-32768,-32768,-32768,-32768,   359,-32768,-32768,-32768,-32768,
  -32768,-32768,-32768,   748,-32768,   -70,   115,-32768,    14,-32768,
  -32768,   787,-32768,   529,   540,-32768,   123,-32768,-32768,-32768,
  -32768,   124,-32768,   -70,    30,     6,-32768,-32768,   265,    86,
      65,    96,   265,   265,   265,   265,   256,-32768,   549,-32768,
  -32768,   138,   166,   178,   105,-32768,   -70,   604,-32768,-32768,
  -32768,-32768,    57,-32768,   265,   104,-32768,   100,   -70,-32768,
  -32768,-32768,   641,-32768,-32768,-32768,-32768,   107,-32768,-32768,
     170,   170,   170,   170,   170,-32768,   170,   170,-32768,   170,
  -32768,   170,   170,   170,   170,   170,-32768,   170,   140,   170,
     170,   170,   140,-32768,-32768,   106,   108,   139,-32768,-32768,
     678,   146,   148,   131,   265,   134,-32768,-32768,-32768,-32768,
     265,-32768,-32768,   265,-32768,   265,-32768,-32768,-32768,-32768,
  -32768,   265,-32768,   147,   150,-32768,   265,   153,-32768,-32768,
  -32768,   265,-32768,    57,-32768,   -70,-32768,-32768,-32768,-32768,
     159,-32768,   265,   265,   265,   265,-32768,   -70,   265,   265,
  -32768,   265,-32768,   265,   265,   265,   265,   265,-32768,   265,
  -32768,-32768,   169,-32768,   265,   265,   265,   -70,-32768,   -70,
     346,   181,-32768,-32768,-32768,-32768,   -70,-32768,-32768,-32768,
  -32768,-32768,-32768,-32768,-32768,-32768,   265,-32768,-32768,-32768,
     -70,   -70,   181,-32768,   -70,   -70,   183,    18,-32768,   -70,
      96,   -70,   -70,   265,-32768,-32768,   -70,   -70,   104,   -70,
      19,   187,   228,    21,   -70,   -70,-32768,-32768,   -70,   265,
  -32768,-32768,-32768,   -70,   -70,   -70,    96,   240,   -70,   189,
      96,   240,   -70,   -70,   240,   -70,   104,-32768,   240,   265,
     104,-32768,   240,   240,   -70,-32768,   240,-32768,   190,-32768,
  -32768,   240,-32768,-32768,-32768,    96,   -59,-32768,   251,-32768
d627 2
a628 2
  -32768,-32768,-32768,-32768,-32768,-32768,  -207,-32768,-32768,-32768,
  -32768,-32768,-32768,   179,  -218,  -191,-32768,-32768,-32768,-32768,
d630 3
a632 3
  -32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,   145,   410,
     129,  -151,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,
  -32768,    50,-32768,    77,    48,-32768,  -212,-32768,-32768,-32768,
d634 2
a635 2
  -32768,-32768,-32768,   -21,-32768,   -39,   288,     7,    82,   424,
     343,  -424,  -284,  -257,    29,    -2,    12,-32768,     4,-32768
d639 1
a639 1
#define	YYLAST		804
d644 59
a702 63
      30,   161,    47,   162,   246,    24,   282,   172,   334,   164,
     285,   216,   247,   498,   197,   254,   448,   262,   200,    33,
      34,   444,   444,   252,   444,    59,   336,    24,   224,   225,
     226,   227,   228,   229,   283,   261,    59,   278,   176,    56,
      57,    58,   476,   185,   266,   198,   480,    87,    88,   201,
     281,   173,   374,   174,   146,   180,     2,   104,   190,    60,
      95,    96,    97,    98,    99,   100,   101,   102,   114,   115,
     116,   496,     3,   105,   106,   107,   108,   109,   110,   111,
     112,    26,   177,   193,   178,   165,   302,     5,    27,   408,
     191,   199,    28,   341,     4,     5,    29,     6,     7,   220,
     284,    59,     8,    59,    59,   192,     7,   186,   187,    59,
       8,   202,   340,    59,   456,    35,   461,   251,   203,   260,
      85,    86,    36,    37,    38,    39,    91,   279,   280,   147,
     148,   204,   154,   155,   156,   157,   158,   159,   160,   293,
     205,   163,   304,   144,   169,   290,     4,     5,   208,   168,
     377,    40,    41,   210,   294,   221,    42,    43,     7,   249,
     250,   236,     8,   177,   184,   178,   289,    44,    45,   305,
      46,   173,   177,   174,   178,   292,   170,   171,   293,    66,
      67,    68,   306,   188,   189,   307,   177,   373,   178,   336,
     293,     4,     5,   294,   177,   337,   178,   209,   133,   195,
     196,   467,   342,     7,   372,   294,   471,     8,   474,   237,
     238,   239,   240,   241,   242,   219,   483,   206,   207,   375,
     363,   364,     5,     5,   211,   212,   379,   213,   378,   381,
     215,   217,   460,     7,     7,   222,   223,     8,     8,   497,
     124,   234,   400,   444,   245,   401,   248,   141,   403,   291,
     343,   499,     5,   243,   410,   301,   134,   135,   136,   137,
     138,   139,   140,     7,   426,   126,   288,     8,    26,   181,
     297,   298,   299,   300,    24,    27,   433,   263,   443,    28,
      24,   439,   459,    29,   479,   493,   256,    70,    71,    72,
     235,   257,   335,   371,   286,     0,    73,    74,    75,    76,
      77,    78,    79,    69,   452,    64,    65,    66,    67,    68,
     117,     0,     0,     0,     0,   308,    73,    74,    75,    76,
      77,    78,    79,    82,   118,   119,   129,   338,     0,     0,
      89,    90,   367,    92,     0,    94,   367,     4,     5,     0,
       0,     0,   380,    70,    71,    72,     0,    26,   130,     7,
      70,    71,    72,     8,    27,     0,     0,     0,    28,     0,
       0,     0,    29,     0,   402,     0,    70,    71,    72,   407,
       0,     0,    73,    74,    75,    76,    77,    78,    79,    73,
      74,    75,    76,    77,    78,    79,     0,     0,    70,    71,
      72,     0,     0,     0,     0,    73,    74,    75,    76,    77,
      78,    79,     0,     0,   409,     0,     0,     0,   104,   411,
     237,   238,   239,   240,   241,   242,   416,    73,    74,    75,
      76,    77,    78,    79,   436,     0,   432,   123,    26,     0,
     127,   128,     0,     0,   131,    27,   430,   142,   431,    28,
       0,   451,     0,    29,     0,   435,     0,     0,   132,     0,
       0,     0,     0,     0,   243,     0,     0,   469,     0,   437,
     438,     0,     0,   441,   442,     0,   446,     0,   447,     0,
     449,   450,     0,     0,     0,   453,   454,   488,   455,     0,
       0,     0,     0,   464,   465,     0,     0,   468,    70,    71,
      72,     0,   472,   473,   475,     0,     0,   478,   390,     0,
     392,   482,   484,     0,   486,     0,   398,   120,   122,   120,
     120,   122,   122,   491,     0,   120,     0,    73,    74,    75,
      76,    77,    78,    79,     0,     0,     0,   412,   413,   414,
     415,     0,   267,   417,   418,     0,   419,     0,   420,   421,
     422,   423,   424,   277,   425,   268,   269,   270,   271,   427,
     428,   429,   303,     0,     0,     0,   268,   269,   270,   271,
       0,     0,     0,     0,     0,   268,   269,   270,   271,     0,
     272,     0,   273,   274,   275,   276,     0,     0,     0,   457,
       0,   272,   462,   273,   274,   275,   276,     0,     0,     0,
     272,     0,   273,   274,   275,   276,   477,     0,    26,   218,
     481,     0,     0,   485,     0,    27,     0,   487,   309,    28,
       0,   489,   490,    29,   310,   492,     0,     0,     0,     0,
     494,     0,     0,     0,   311,   312,   313,   314,   315,   316,
d704 3
a706 3
     327,   328,   329,   330,   331,   339,   332,     0,     0,     0,
       0,   310,    48,    49,    50,    51,    52,    53,    54,    55,
       0,   311,   312,   313,   314,   315,   316,   317,   318,   319,
d708 12
a719 13
     330,   331,   376,   332,     0,     0,     0,     0,   310,     0,
      61,    62,    63,    64,    65,    66,    67,    68,   311,   312,
     313,   314,   315,   316,   317,   318,   319,   320,   321,   322,
     323,   324,   325,   326,   327,   328,   329,   330,   331,     0,
     332,   346,   347,   348,   349,     0,   351,   352,     0,   354,
       0,   356,   357,   358,   359,   360,     0,   362,     0,   368,
     369,   370,    61,    62,    63,    64,    65,    66,    67,    68,
       0,     0,     0,     0,     0,    81,    61,    62,    63,    64,
      65,    66,    67,    68,     0,     0,     0,     0,     0,   103,
      73,    74,    75,    76,    77,    78,    79,     0,   118,   119,
      62,    63,    64,    65,    66,    67,    68,    63,    64,    65,
      66,    67,    68,   224,   225,   226,   227,   228,   229,   237,
     238,   239,   240,   241,   242
d724 59
a782 63
       2,   141,    23,     4,   216,     1,   263,     4,   292,     4,
       4,     3,     3,     0,    49,   233,   440,     3,    49,     7,
       8,     3,     3,   230,     3,    95,    85,    23,     6,     7,
       8,     9,    10,    11,     4,   247,    95,   255,     4,    27,
      28,    29,   466,     4,   251,    80,   470,    40,    41,    80,
     262,    48,   336,    50,    96,     4,    43,    59,     4,    30,
      48,    49,    50,    51,    52,    53,    54,    55,    70,    71,
      72,   495,    59,    61,    62,    63,    64,    65,    66,    67,
      68,    82,    48,    95,    50,    80,   277,    82,    89,   373,
      80,    80,    93,   305,    81,    82,    97,    84,    93,    71,
      70,    95,    97,    95,    95,    95,    93,    68,    69,    95,
      97,    80,   303,    95,    95,     5,    95,    95,    95,     4,
      38,    39,    12,    13,    14,    15,    44,     4,     4,   125,
     126,     3,   134,   135,   136,   137,   138,   139,   140,    82,
       3,   143,     4,   114,   146,    80,    81,    82,    80,   145,
       4,    41,    42,    95,    97,    70,    46,    47,    93,     3,
      80,     3,    97,    48,   152,    50,    80,    57,    58,     3,
      60,    48,    48,    50,    50,    79,   147,   148,    82,    90,
      91,    92,     4,   154,   155,    80,    48,    79,    50,    85,
      82,    81,    82,    97,    48,    95,    50,   193,     3,   170,
     171,   458,    95,    93,    98,    97,   463,    97,   465,    51,
      52,    53,    54,    55,    56,   203,   473,   188,   189,    80,
      80,    81,    82,    82,   195,   196,    95,   198,    80,    95,
     201,   202,     4,    93,    93,   206,   207,    97,    97,   496,
      16,   212,    95,     3,   215,    95,   217,     3,    95,   270,
      80,     0,    82,    95,    95,   276,    61,    62,    63,    64,
      65,    66,    67,    93,    95,    86,   268,    97,    82,    83,
     272,   273,   274,   275,   270,    89,    95,   248,    95,    93,
     276,   432,    95,    97,    95,    95,   236,    43,    44,    45,
     213,   243,   294,   332,   265,    -1,    72,    73,    74,    75,
      76,    77,    78,     3,   444,    88,    89,    90,    91,    92,
       3,    -1,    -1,    -1,    -1,   286,    72,    73,    74,    75,
      76,    77,    78,    35,    80,    81,     3,   298,    -1,    -1,
      42,    43,   328,    45,    -1,    47,   332,    81,    82,    -1,
      -1,    -1,   344,    43,    44,    45,    -1,    82,     3,    93,
      43,    44,    45,    97,    89,    -1,    -1,    -1,    93,    -1,
      -1,    -1,    97,    -1,   366,    -1,    43,    44,    45,   371,
      -1,    -1,    72,    73,    74,    75,    76,    77,    78,    72,
      73,    74,    75,    76,    77,    78,    -1,    -1,    43,    44,
      45,    -1,    -1,    -1,    -1,    72,    73,    74,    75,    76,
      77,    78,    -1,    -1,   375,    -1,    -1,    -1,   410,   380,
      51,    52,    53,    54,    55,    56,   387,    72,    73,    74,
      75,    76,    77,    78,   426,    -1,    80,    84,    82,    -1,
      87,    88,    -1,    -1,    91,    89,   407,    94,   409,    93,
      -1,   443,    -1,    97,    -1,   416,    -1,    -1,     3,    -1,
      -1,    -1,    -1,    -1,    95,    -1,    -1,   459,    -1,   430,
     431,    -1,    -1,   434,   435,    -1,   437,    -1,   439,    -1,
     441,   442,    -1,    -1,    -1,   446,   447,   479,   449,    -1,
      -1,    -1,    -1,   454,   455,    -1,    -1,   458,    43,    44,
      45,    -1,   463,   464,   465,    -1,    -1,   468,   353,    -1,
     355,   472,   473,    -1,   475,    -1,   361,    83,    84,    85,
      86,    87,    88,   484,    -1,    91,    -1,    72,    73,    74,
      75,    76,    77,    78,    -1,    -1,    -1,   382,   383,   384,
     385,    -1,     3,   388,   389,    -1,   391,    -1,   393,   394,
     395,   396,   397,     3,   399,    16,    17,    18,    19,   404,
     405,   406,     3,    -1,    -1,    -1,    16,    17,    18,    19,
      -1,    -1,    -1,    -1,    -1,    16,    17,    18,    19,    -1,
      41,    -1,    43,    44,    45,    46,    -1,    -1,    -1,   450,
      -1,    41,   453,    43,    44,    45,    46,    -1,    -1,    -1,
      41,    -1,    43,    44,    45,    46,   467,    -1,    82,    83,
     471,    -1,    -1,   474,    -1,    89,    -1,   478,     4,    93,
      -1,   482,   483,    97,    10,   486,    -1,    -1,    -1,    -1,
     491,    -1,    -1,    -1,    20,    21,    22,    23,    24,    25,
d785 2
a786 2
      -1,    10,    85,    86,    87,    88,    89,    90,    91,    92,
      -1,    20,    21,    22,    23,    24,    25,    26,    27,    28,
d788 12
a799 13
      39,    40,     4,    42,    -1,    -1,    -1,    -1,    10,    -1,
      85,    86,    87,    88,    89,    90,    91,    92,    20,    21,
      22,    23,    24,    25,    26,    27,    28,    29,    30,    31,
      32,    33,    34,    35,    36,    37,    38,    39,    40,    -1,
      42,   311,   312,   313,   314,    -1,   316,   317,    -1,   319,
      -1,   321,   322,   323,   324,   325,    -1,   327,    -1,   329,
     330,   331,    85,    86,    87,    88,    89,    90,    91,    92,
      -1,    -1,    -1,    -1,    -1,    98,    85,    86,    87,    88,
      89,    90,    91,    92,    -1,    -1,    -1,    -1,    -1,    98,
      72,    73,    74,    75,    76,    77,    78,    -1,    80,    81,
      86,    87,    88,    89,    90,    91,    92,    87,    88,    89,
      90,    91,    92,     6,     7,     8,     9,    10,    11,    51,
      52,    53,    54,    55,    56
d1509 1
a1509 1
#line 182 "rcparse.y"
d1518 1
a1518 1
#line 192 "rcparse.y"
d1524 1
a1524 1
#line 196 "rcparse.y"
d1544 1
a1544 1
#line 217 "rcparse.y"
d1551 1
a1551 1
#line 222 "rcparse.y"
d1562 1
a1562 1
#line 234 "rcparse.y"
d1585 1
a1585 1
#line 255 "rcparse.y"
d1594 1
a1594 1
#line 265 "rcparse.y"
d1600 1
a1600 1
#line 269 "rcparse.y"
d1606 1
a1606 1
#line 274 "rcparse.y"
d1612 1
a1612 1
#line 281 "rcparse.y"
d1618 1
a1618 1
#line 285 "rcparse.y"
d1625 1
a1625 1
#line 290 "rcparse.y"
d1631 1
a1631 1
#line 294 "rcparse.y"
d1637 1
a1637 1
#line 298 "rcparse.y"
d1643 1
a1643 1
#line 302 "rcparse.y"
d1649 1
a1649 1
#line 311 "rcparse.y"
d1658 1
a1658 1
#line 323 "rcparse.y"
d1667 1
a1667 1
#line 336 "rcparse.y"
d1686 1
a1686 1
#line 353 "rcparse.y"
d1695 1
a1695 1
#line 361 "rcparse.y"
d1716 1
a1716 1
#line 380 "rcparse.y"
d1725 1
a1725 1
#line 388 "rcparse.y"
d1747 1
a1747 1
#line 408 "rcparse.y"
d1756 1
a1756 1
#line 418 "rcparse.y"
d1762 1
a1762 1
#line 422 "rcparse.y"
d1768 1
a1768 1
#line 430 "rcparse.y"
d1776 1
a1776 1
#line 436 "rcparse.y"
d1782 1
a1782 1
#line 441 "rcparse.y"
d1788 1
a1788 1
#line 445 "rcparse.y"
d1794 1
a1794 1
#line 449 "rcparse.y"
d1800 1
a1800 1
#line 453 "rcparse.y"
d1815 1
a1815 1
#line 466 "rcparse.y"
d1832 1
a1832 1
#line 481 "rcparse.y"
d1849 1
a1849 1
#line 496 "rcparse.y"
d1866 1
a1866 1
#line 511 "rcparse.y"
d1872 1
a1872 1
#line 515 "rcparse.y"
d1878 1
a1878 1
#line 519 "rcparse.y"
d1884 1
a1884 1
#line 523 "rcparse.y"
d1890 1
a1890 1
#line 531 "rcparse.y"
d1900 1
a1900 1
#line 542 "rcparse.y"
a1904 1
	      res_text_field = yyvsp[0].id;	
d1908 1
a1908 1
#line 549 "rcparse.y"
d1914 1
a1914 1
#line 553 "rcparse.y"
a1918 1
	      res_text_field = yyvsp[0].id;	
d1922 1
a1922 1
#line 560 "rcparse.y"
d1928 1
a1928 1
#line 564 "rcparse.y"
a1932 1
	      res_text_field = yyvsp[0].id;	
d1936 1
a1936 1
#line 571 "rcparse.y"
d1942 1
a1942 1
#line 575 "rcparse.y"
a1946 1
	      res_text_field = yyvsp[0].id;	
d1950 1
a1950 1
#line 582 "rcparse.y"
d1959 1
a1959 1
#line 589 "rcparse.y"
a1963 1
	      res_text_field = yyvsp[0].id;	
d1967 1
a1967 1
#line 596 "rcparse.y"
d1973 1
a1973 1
#line 600 "rcparse.y"
a1974 2
	      /* This is as per MSDN documentation.  With some (???)
		 versions of MS rc.exe their is no default style.  */
a1977 1
	      res_text_field = res_null_text;	
d1981 1
a1981 1
#line 609 "rcparse.y"
d1987 1
a1987 1
#line 614 "rcparse.y"
d1999 1
a1999 1
#line 625 "rcparse.y"
d2009 1
a2009 1
#line 634 "rcparse.y"
d2023 1
a2023 1
#line 647 "rcparse.y"
d2035 1
a2035 1
#line 657 "rcparse.y"
a2039 1
	      res_text_field = yyvsp[0].id;	
d2043 1
a2043 1
#line 664 "rcparse.y"
d2049 1
a2049 1
#line 668 "rcparse.y"
a2053 1
	      res_text_field = yyvsp[0].id;	
d2057 1
a2057 1
#line 675 "rcparse.y"
d2063 1
a2063 1
#line 679 "rcparse.y"
a2067 1
	      res_text_field = res_null_text;	
d2071 1
a2071 1
#line 686 "rcparse.y"
d2077 1
a2077 1
#line 690 "rcparse.y"
a2081 1
	      res_text_field = yyvsp[0].id;	
d2085 1
a2085 1
#line 697 "rcparse.y"
d2091 1
a2091 1
#line 701 "rcparse.y"
a2095 1
	      res_text_field = yyvsp[0].id;	
d2099 1
a2099 1
#line 708 "rcparse.y"
d2108 1
a2108 1
#line 715 "rcparse.y"
d2115 1
a2115 1
#line 721 "rcparse.y"
d2122 1
a2122 1
#line 727 "rcparse.y"
d2129 1
a2129 1
#line 733 "rcparse.y"
d2136 1
a2136 1
#line 738 "rcparse.y"
a2140 1
	      res_text_field = yyvsp[0].id;	
d2144 1
a2144 1
#line 745 "rcparse.y"
d2153 1
a2153 1
#line 752 "rcparse.y"
a2157 1
	      res_text_field = res_null_text;	
d2161 1
a2161 1
#line 759 "rcparse.y"
d2167 1
a2167 1
#line 763 "rcparse.y"
a2171 1
	      res_text_field = yyvsp[0].id;	
d2175 1
a2175 1
#line 770 "rcparse.y"
d2181 1
a2181 1
#line 774 "rcparse.y"
d2189 1
a2189 1
#line 780 "rcparse.y"
d2195 1
a2195 1
#line 784 "rcparse.y"
a2199 1
	      res_text_field = yyvsp[0].id;	
d2203 1
a2203 1
#line 791 "rcparse.y"
d2209 1
a2209 1
#line 795 "rcparse.y"
a2213 1
	      res_text_field = yyvsp[0].id;	
d2217 1
a2217 1
#line 802 "rcparse.y"
d2223 1
a2223 1
#line 806 "rcparse.y"
a2227 1
	      res_text_field = yyvsp[0].id;	
d2231 1
a2231 1
#line 813 "rcparse.y"
d2237 1
a2237 1
#line 817 "rcparse.y"
a2241 1
	      res_text_field = res_null_text;	
d2245 1
a2245 1
#line 824 "rcparse.y"
d2251 1
a2251 1
#line 828 "rcparse.y"
a2255 1
	      res_text_field = yyvsp[0].id;	
d2259 1
a2259 1
#line 835 "rcparse.y"
d2265 1
a2265 1
#line 840 "rcparse.y"
d2269 1
a2269 1
#line 842 "rcparse.y"
d2276 1
a2276 1
#line 857 "rcparse.y"
d2278 1
a2278 1
	    yyval.dialog_control = define_control (res_text_field, yyvsp[-5].il, yyvsp[-4].il, yyvsp[-3].il, yyvsp[-2].il, yyvsp[-1].il, class,
d2289 1
a2289 1
#line 869 "rcparse.y"
d2291 1
a2291 1
	    yyval.dialog_control = define_control (res_text_field, yyvsp[-7].il, yyvsp[-6].il, yyvsp[-5].il, yyvsp[-4].il, yyvsp[-3].il, class, style, yyvsp[-1].il);
d2301 1
a2301 1
#line 880 "rcparse.y"
d2303 1
a2303 1
	    yyval.dialog_control = define_control (res_text_field, yyvsp[-8].il, yyvsp[-7].il, yyvsp[-6].il, yyvsp[-5].il, yyvsp[-4].il, class, style, yyvsp[-2].il);
d2311 1
a2311 1
#line 891 "rcparse.y"
d2317 1
a2317 1
#line 895 "rcparse.y"
d2324 1
a2324 1
#line 900 "rcparse.y"
d2330 1
a2330 1
#line 904 "rcparse.y"
d2336 1
a2336 1
#line 911 "rcparse.y"
d2342 1
a2342 1
#line 915 "rcparse.y"
d2348 1
a2348 1
#line 924 "rcparse.y"
d2352 1
a2352 1
#line 930 "rcparse.y"
d2356 1
a2356 1
#line 936 "rcparse.y"
d2360 1
a2360 1
#line 944 "rcparse.y"
d2369 1
a2369 1
#line 956 "rcparse.y"
d2378 1
a2378 1
#line 969 "rcparse.y"
d2384 1
a2384 1
#line 978 "rcparse.y"
d2393 1
a2393 1
#line 988 "rcparse.y"
d2399 1
a2399 1
#line 992 "rcparse.y"
d2415 1
a2415 1
#line 1009 "rcparse.y"
d2421 1
a2421 1
#line 1013 "rcparse.y"
d2427 1
a2427 1
#line 1017 "rcparse.y"
d2433 1
a2433 1
#line 1024 "rcparse.y"
d2439 1
a2439 1
#line 1028 "rcparse.y"
d2445 1
a2445 1
#line 1032 "rcparse.y"
d2451 1
a2451 1
#line 1039 "rcparse.y"
d2457 1
a2457 1
#line 1043 "rcparse.y"
d2463 1
a2463 1
#line 1047 "rcparse.y"
d2469 1
a2469 1
#line 1051 "rcparse.y"
d2475 1
a2475 1
#line 1055 "rcparse.y"
d2481 1
a2481 1
#line 1059 "rcparse.y"
d2487 1
a2487 1
#line 1068 "rcparse.y"
d2496 1
a2496 1
#line 1078 "rcparse.y"
d2502 1
a2502 1
#line 1082 "rcparse.y"
d2518 1
a2518 1
#line 1099 "rcparse.y"
d2524 1
a2524 1
#line 1103 "rcparse.y"
d2530 1
a2530 1
#line 1107 "rcparse.y"
d2536 1
a2536 1
#line 1111 "rcparse.y"
d2542 1
a2542 1
#line 1115 "rcparse.y"
d2548 1
a2548 1
#line 1119 "rcparse.y"
d2554 1
a2554 1
#line 1123 "rcparse.y"
d2560 1
a2560 1
#line 1128 "rcparse.y"
d2566 1
a2566 1
#line 1137 "rcparse.y"
d2575 1
a2575 1
#line 1149 "rcparse.y"
d2584 1
a2584 1
#line 1161 "rcparse.y"
d2590 1
a2590 1
#line 1165 "rcparse.y"
d2597 1
a2597 1
#line 1173 "rcparse.y"
d2604 1
a2604 1
#line 1178 "rcparse.y"
d2610 1
a2610 1
#line 1185 "rcparse.y"
d2620 1
a2620 1
#line 1193 "rcparse.y"
d2630 1
a2630 1
#line 1201 "rcparse.y"
d2641 1
a2641 1
#line 1210 "rcparse.y"
d2652 1
a2652 1
#line 1224 "rcparse.y"
d2656 1
a2656 1
#line 1231 "rcparse.y"
d2665 1
a2665 1
#line 1238 "rcparse.y"
d2674 1
a2674 1
#line 1251 "rcparse.y"
d2683 1
a2683 1
#line 1258 "rcparse.y"
d2692 1
a2692 1
#line 1270 "rcparse.y"
d2701 1
a2701 1
#line 1280 "rcparse.y"
d2709 1
a2709 1
#line 1286 "rcparse.y"
d2717 1
a2717 1
#line 1292 "rcparse.y"
d2725 1
a2725 1
#line 1298 "rcparse.y"
d2732 1
a2732 1
#line 1303 "rcparse.y"
d2739 1
a2739 1
#line 1308 "rcparse.y"
d2746 1
a2746 1
#line 1313 "rcparse.y"
d2753 1
a2753 1
#line 1318 "rcparse.y"
d2760 1
a2760 1
#line 1332 "rcparse.y"
d2766 1
a2766 1
#line 1336 "rcparse.y"
d2772 1
a2772 1
#line 1340 "rcparse.y"
d2778 1
a2778 1
#line 1347 "rcparse.y"
d2784 1
a2784 1
#line 1351 "rcparse.y"
d2790 1
a2790 1
#line 1358 "rcparse.y"
d2796 1
a2796 1
#line 1362 "rcparse.y"
d2802 1
a2802 1
#line 1371 "rcparse.y"
d2809 1
a2809 1
#line 1376 "rcparse.y"
d2822 1
a2822 1
#line 1392 "rcparse.y"
d2828 1
a2828 1
#line 1396 "rcparse.y"
d2834 1
a2834 1
#line 1400 "rcparse.y"
d2840 1
a2840 1
#line 1408 "rcparse.y"
d2847 1
a2847 1
#line 1413 "rcparse.y"
d2860 1
a2860 1
#line 1430 "rcparse.y"
d2869 1
a2869 1
#line 1437 "rcparse.y"
d2877 1
a2877 1
#line 1443 "rcparse.y"
d2884 1
a2884 1
#line 1448 "rcparse.y"
d2891 1
a2891 1
#line 1453 "rcparse.y"
d2898 1
a2898 1
#line 1463 "rcparse.y"
d2906 1
a2906 1
#line 1469 "rcparse.y"
d2914 1
a2914 1
#line 1480 "rcparse.y"
d2922 1
a2922 1
#line 1486 "rcparse.y"
d2930 1
a2930 1
#line 1498 "rcparse.y"
d2937 1
a2937 1
#line 1503 "rcparse.y"
d2944 1
a2944 1
#line 1508 "rcparse.y"
d2951 1
a2951 1
#line 1513 "rcparse.y"
d2958 1
a2958 1
#line 1518 "rcparse.y"
d2965 1
a2965 1
#line 1523 "rcparse.y"
d2972 1
a2972 1
#line 1528 "rcparse.y"
d2979 1
a2979 1
#line 1538 "rcparse.y"
d2985 1
a2985 1
#line 1542 "rcparse.y"
d2991 1
a2991 1
#line 1559 "rcparse.y"
d2997 1
a2997 1
#line 1563 "rcparse.y"
d3003 1
a3003 1
#line 1567 "rcparse.y"
d3009 1
a3009 1
#line 1571 "rcparse.y"
d3015 1
a3015 1
#line 1578 "rcparse.y"
d3021 1
a3021 1
#line 1582 "rcparse.y"
d3027 1
a3027 1
#line 1591 "rcparse.y"
d3033 1
a3033 1
#line 1595 "rcparse.y"
d3039 1
a3039 1
#line 1604 "rcparse.y"
d3045 1
a3045 1
#line 1613 "rcparse.y"
d3051 1
a3051 1
#line 1622 "rcparse.y"
d3057 1
a3057 1
#line 1626 "rcparse.y"
d3063 1
a3063 1
#line 1630 "rcparse.y"
d3070 1
a3070 1
#line 1635 "rcparse.y"
d3077 1
a3077 1
#line 1640 "rcparse.y"
d3084 1
a3084 1
#line 1645 "rcparse.y"
d3091 1
a3091 1
#line 1650 "rcparse.y"
d3098 1
a3098 1
#line 1655 "rcparse.y"
d3105 1
a3105 1
#line 1660 "rcparse.y"
d3112 1
a3112 1
#line 1665 "rcparse.y"
d3119 1
a3119 1
#line 1670 "rcparse.y"
d3126 1
a3126 1
#line 1675 "rcparse.y"
d3133 1
a3133 1
#line 1686 "rcparse.y"
d3139 1
a3139 1
#line 1695 "rcparse.y"
d3145 1
a3145 1
#line 1706 "rcparse.y"
d3151 1
a3151 1
#line 1710 "rcparse.y"
d3157 1
a3157 1
#line 1714 "rcparse.y"
d3164 1
a3164 1
#line 1719 "rcparse.y"
d3171 1
a3171 1
#line 1724 "rcparse.y"
d3178 1
a3178 1
#line 1729 "rcparse.y"
d3185 1
a3185 1
#line 1734 "rcparse.y"
d3192 1
a3192 1
#line 1739 "rcparse.y"
d3199 1
a3199 1
#line 1744 "rcparse.y"
d3206 1
a3206 1
#line 1749 "rcparse.y"
d3213 1
a3213 1
#line 1754 "rcparse.y"
d3452 1
a3452 1
#line 1760 "rcparse.y"
d3458 2
a3459 1
rcparse_set_language (int lang)
@


