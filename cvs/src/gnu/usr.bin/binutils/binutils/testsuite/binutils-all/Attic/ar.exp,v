head	1.5;
access;
symbols
	OPENBSD_3_5:1.4.0.8
	OPENBSD_3_5_BASE:1.4
	OPENBSD_3_4:1.4.0.6
	OPENBSD_3_4_BASE:1.4
	OPENBSD_3_3:1.4.0.4
	OPENBSD_3_3_BASE:1.4
	OPENBSD_3_2:1.4.0.2
	OPENBSD_3_2_BASE:1.4
	binutils-2_11_2:1.1.1.5
	OPENBSD_3_1:1.3.0.8
	OPENBSD_3_1_BASE:1.3
	OPENBSD_3_0:1.3.0.6
	OPENBSD_3_0_BASE:1.3
	BINUTILS-2_10_1:1.1.1.4
	OPENBSD_2_9:1.3.0.4
	OPENBSD_2_9_BASE:1.3
	OPENBSD_2_8:1.3.0.2
	OPENBSD_2_8_BASE:1.3
	BINUTILS-2_10:1.1.1.4
	OPENBSD_2_7:1.2.0.18
	OPENBSD_2_7_BASE:1.2
	new-binutils:1.2.0.16
	OPENBSD_2_6:1.2.0.14
	OPENBSD_2_6_BASE:1.2
	OPENBSD_2_5:1.2.0.12
	OPENBSD_2_5_BASE:1.2
	OPENBSD_2_4:1.2.0.10
	OPENBSD_2_4_BASE:1.2
	OPENBSD_2_3:1.2.0.8
	OPENBSD_2_3_BASE:1.2
	OPENBSD_2_2:1.2.0.6
	OPENBSD_2_2_BASE:1.2
	BINUTILS-2_8_1:1.1.1.3
	OPENBSD_2_1:1.2.0.4
	OPENBSD_2_1_BASE:1.2
	CYGNUS-961112:1.1.1.2
	OPENBSD_2_0:1.2.0.2
	OPENBSD_2_0_BASE:1.2
	CYGNUS-960904:1.1.1.2
	CYGNUS-960609:1.1.1.2
	CYGNUS-960607:1.1.1.2
	CYGNUS:1.1.1
	FSF_2_6:1.1.1.1
	FSF:1.1.1;
locks; strict;
comment	@# @;


1.5
date	2004.05.17.21.54.26;	author drahn;	state dead;
branches;
next	1.4;

1.4
date	2002.05.13.17.07.33;	author fgsch;	state Exp;
branches;
next	1.3;

1.3
date	2000.09.12.19.11.34;	author espie;	state Exp;
branches;
next	1.2;

1.2
date	96.06.10.10.49.25;	author niklas;	state Exp;
branches;
next	1.1;

1.1
date	96.01.08.11.04.02;	author niklas;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	96.01.08.11.04.02;	author niklas;	state Exp;
branches;
next	1.1.1.2;

1.1.1.2
date	96.06.07.11.04.01;	author niklas;	state Exp;
branches;
next	1.1.1.3;

1.1.1.3
date	97.05.29.09.16.36;	author niklas;	state Exp;
branches;
next	1.1.1.4;

1.1.1.4
date	2000.09.12.14.45.12;	author espie;	state Exp;
branches;
next	1.1.1.5;

1.1.1.5
date	2002.05.13.13.17.27;	author fgsch;	state Exp;
branches;
next	;


desc
@@


1.5
log
@Resolve merge conflicts, adjust method of W^X handing (.sh files)
remove testsuites (not useable) remove mmalloc (not part of new binutils).
@
text
@#   Copyright 1995, 1997 Free Software Foundation, Inc.

# This program is free software; you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation; either version 2 of the License, or
# (at your option) any later version.
# 
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
# 
# You should have received a copy of the GNU General Public License
# along with this program; if not, write to the Free Software
# Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA 02111-1307, USA.

# Please email any bugs, comments, and/or additions to this file to:
# bug-dejagnu@@prep.ai.mit.edu

# Written by Ian Lance Taylor <ian@@cygnus.com>

if ![is_remote host] {
    if {[which $AR] == 0} then {
        perror "$AR does not exist"
        return
    }
}

# send_user "Version [binutil_version $AR]"

# Test long file name support

proc long_filenames { } {
    global AR
    global host_triplet

    set testname "ar long file names"

    set n1 "abcdefghijklmnopqrstuvwxyz1"
    set n2 "abcdefghijklmnopqrstuvwxyz2"
    set file1 tmpdir/$n1
    set file2 tmpdir/$n2

    remote_file build delete $file1

    # Some file systems truncate file names at 14 characters, which
    # makes it impossible to run this test.  Check for that now.
    set status [catch "set f [open tmpdir/$n1 w]" errs]
    if { $status != 0 } {
	verbose -log "open tmpdir/$n1 returned $errs"
	unsupported $testname
	return
    }
    puts $f "first"
    close $f


    remote_file build delete $file2

    set status [catch "set f [open tmpdir/$n2 w]" errs]
    if { $status != 0 } {
	verbose -log "open tmpdir/$n2 returned $errs"
	unsupported $testname
	return
    }
    puts $f "second"
    close $f

    if [is_remote host] {
	set file1 [remote_download host $file1];
	set file2 [remote_download host $file2];
	set dest artest.a
    } else {
	set dest tmpdir/artest.a
    }

    remote_file host delete $dest;

    set got [binutils_run $AR "rc $dest $file1 $file2"]
    if [is_remote host] {
	remote_upload host $file1 tmpdir/$n1
    }

    set f [open tmpdir/$n1 r]
    gets $f string
    close $f
    if ![string match "first" $string] {
	verbose -log "reading tmpdir/$n1 returned $string"
	unsupported $testname
	return
    }

    remote_file host delete $dest;
    set got [binutils_run $AR "rc $dest $file1 $file2"]

    if ![string match "" $got] {
	fail $testname
	return
    }

    remote_file build delete tmpdir/$n1
    remote_file build delete tmpdir/$n2

    set got [binutils_run $AR "t $dest"]
    regsub "\[\r\n \t\]*$" "$got" "" got;
    if ![string match "$n1*$n2" $got] {
	fail $testname
	return
    }
    
    if [is_remote host] {
	remote_file host delete $file1;
	remote_file host delete $file2;
    }

    verbose -log "$AR x $dest"
    set exec_output [binutils_run $AR "x $dest"]
    set exec_output [prune_warnings $exec_output]
    if ![string match "" $exec_output] {
	verbose -log $exec_output
	fail $testname
	return
    }

    if [is_remote host] {
	remote_upload host $n1 tmpdir/$n1;
	remote_upload host $n2 tmpdir/$n2;
	set file1 tmpdir/$n1
	set file2 tmpdir/$n2
    } else {
	set file1 $n1
	set file2 $n2
    }

    if ![file exists $file1] {
	verbose -log "$file1 does not exist"
	fail $testname
	return
    }
    if ![file exists $file2] {
	verbose -log "$file2 does not exist"
	fail $testname
	return
    }

    set f [open $file1 r]
    if { [gets $f line] == -1 || $line != "first" } {
	verbose -log "$file1 contents:"
	verbose -log "$line"
	close $f
	fail $testname
	return
    }
    close $f

    set f [open $file2 r]
    if { [gets $f line] == -1 || $line != "second" } {
	verbose -log "$file2 contents:"
	verbose -log "$line"
	close $f
	fail $testname
	return
    }
    close $f

    pass $testname
}

# Test building the symbol table.

proc symbol_table { } {
    global AR
    global AS
    global NM
    global srcdir
    global subdir

    set testname "ar symbol table"

    if ![binutils_assemble $srcdir/$subdir/bintest.s tmpdir/bintest.o] {
	unresolved $testname
	return
    }

    if [is_remote host] {
	set archive artest.a
	set objfile [remote_download host tmpdir/bintest.o]
	remote_file host delete $archive
    } else {
	set archive tmpdir/artest.a
	set objfile tmpdir/bintest.o
    }

    remote_file build delete tmpdir/artest.a

    set got [binutils_run $AR "rc $archive ${objfile}"]
    if ![string match "" $got] {
	fail $testname
	return
    }

    set got [binutils_run $NM "--print-armap $archive"]
    if { ![string match "*text_symbol in bintest.o*" $got] \
	 || ![string match "*data_symbol in bintest.o*" $got] \
	 || ![string match "*common_symbol in bintest.o*" $got] \
	 || [string match "*static_text_symbol in bintest.o*" $got] \
	 || [string match "*static_data_symbol in bintest.o*" $got] \
	 || [string match "*external_symbol in bintest.o*" $got] } {
	fail $testname
	return
    }

    pass $testname
}

# Run the tests.

long_filenames
symbol_table
@


1.4
log
@resolve conflicts.
@
text
@@


1.3
log
@Help stupid cvs fixing basic conflicts.
@
text
@d1 1
a1 1
#   Copyright (C) 1995, 1997 Free Software Foundation, Inc.
@


1.2
log
@Bring Cygnus versions into the trunk, keeping our local patches
@
text
@d1 1
a1 1
#   Copyright (C) 1995 Free Software Foundation, Inc.
d22 5
a26 3
if {[which $AR] == 0} then {
    perror "$AR does not exist"
    return
d41 4
d46 8
a53 2
    binutils_remove tmpdir/$n1
    set f [open tmpdir/$n1 w]
d57 9
a65 2
    binutils_remove tmpdir/$n2
    set f [open tmpdir/$n2 w]
d69 27
a95 2
    binutils_remove tmpdir/artest.a
    set got [binutils_run $AR "rc tmpdir/artest.a tmpdir/$n1 tmpdir/$n2"]
d101 2
a102 2
    binutils_remove tmpdir/$n1
    binutils_remove tmpdir/$n2
d104 2
a105 1
    set got [binutils_run $AR "t tmpdir/artest.a"]
d110 5
d116 3
a118 3
    verbose -log "cd tmpdir; $AR x artest.a"
    catch "exec /bin/sh -c \"cd tmpdir; $AR x artest.a\"" exec_output
    set exec_output [prune_system_crud $host_triplet $exec_output]
d125 12
a136 2
    if ![file exists tmpdir/$n1] {
	verbose -log "tmpdir/$n1 does not exist"
d140 2
a141 2
    if ![file exists tmpdir/$n2] {
	verbose -log "tmpdir/$n2 does not exist"
d146 1
a146 1
    set f [open tmpdir/$n1 r]
d148 1
a148 1
	verbose -log "tmpdir/$n1 contents:"
d156 1
a156 1
    set f [open tmpdir/$n2 r]
d158 1
a158 1
	verbose -log "tmpdir/$n2 contents:"
d180 1
a180 1
    if ![binutils_assemble $AS $srcdir/$subdir/bintest.s tmpdir/bintest.o] {
d185 10
a194 1
    binutils_remove tmpdir/artest.a
d196 1
a196 1
    set got [binutils_run $AR "rc tmpdir/artest.a tmpdir/bintest.o"]
d202 1
a202 1
    set got [binutils_run $NM "--print-armap tmpdir/artest.a"]
@


1.1
log
@Initial revision
@
text
@d66 1
a66 2
    send_log "cd tmpdir; $AR x artest.a\n"
    verbose "cd tmpdir; $AR x artest.a"
d70 1
a70 2
	send_log "$exec_output\n"
	verbose $exec_output
d76 1
a76 2
	send_log "tmpdir/$n1 does not exist\n"
	verbose "tmpdir/$n1 does not exist"
d81 1
a81 2
	send_log "tmpdir/$n2 does not exist\n"
	verbose "tmpdir/$n2 does not exist"
d88 2
a89 4
	send_log "tmpdir/$n1 contents:\n"
	verbose "tmpdir/$n1 contents:"
	send_log "$line\n"
	verbose "$line"
d98 2
a99 4
	send_log "tmpdir/$n2 contents:\n"
	verbose "tmpdir/$n2 contents:"
	send_log "$line\n"
	verbose "$line"
@


1.1.1.1
log
@Initial GNU binutils 2.6 import
@
text
@@


1.1.1.2
log
@(Correct) Import of Cygnus binutils snapshot taken 960607
@
text
@d66 2
a67 1
    verbose -log "cd tmpdir; $AR x artest.a"
d71 2
a72 1
	verbose -log $exec_output
d78 2
a79 1
	verbose -log "tmpdir/$n1 does not exist"
d84 2
a85 1
	verbose -log "tmpdir/$n2 does not exist"
d92 4
a95 2
	verbose -log "tmpdir/$n1 contents:"
	verbose -log "$line"
d104 4
a107 2
	verbose -log "tmpdir/$n2 contents:"
	verbose -log "$line"
@


1.1.1.3
log
@Import of binutils-2.8.1 from Cygnus/FSF
@
text
@d1 1
a1 1
#   Copyright (C) 1995, 1997 Free Software Foundation, Inc.
d41 1
a41 6
    set status [catch "set f [open tmpdir/$n1 w]" errs]
    if { $status != 0 } {
	verbose -log "open tmpdir/$n1 returned $errs"
	unsupported $testname
	return
    }
d46 1
a46 6
    set status [catch "set f [open tmpdir/$n2 w]" errs]
    if { $status != 0 } {
	verbose -log "open tmpdir/$n2 returned $errs"
	unsupported $testname
	return
    }
a49 11
    # Some file systems truncate file names at 14 characters, which
    # makes it impossible to run this test.  Check for that now.
    set f [open tmpdir/$n1 r]
    gets $f string
    close $f
    if ![string match "first" $string] {
	verbose -log "reading tmpdir/$n1 returned $string"
	unsupported $testname
	return
    }

d66 3
a68 3
    verbose -log "cd ./tmpdir; $AR x artest.a"
    catch "exec /bin/sh -c \"cd ./tmpdir; $AR x artest.a\"" exec_output
    set exec_output [prune_warnings $exec_output]
@


1.1.1.4
log
@Import binutils-2.10
- only the binutils package (no gdb here)
- don't import libiberty and texinfo, they are elsewhere
- remove all .info* generated files
@
text
@d22 3
a24 5
if ![is_remote host] {
    if {[which $AR] == 0} then {
        perror "$AR does not exist"
        return
    }
a38 4
    set file1 tmpdir/$n1
    set file2 tmpdir/$n2

    remote_file build delete $file1
d40 1
a40 2
    # Some file systems truncate file names at 14 characters, which
    # makes it impossible to run this test.  Check for that now.
d50 1
a50 3

    remote_file build delete $file2

d60 2
a61 15
    if [is_remote host] {
	set file1 [remote_download host $file1];
	set file2 [remote_download host $file2];
	set dest artest.a
    } else {
	set dest tmpdir/artest.a
    }

    remote_file host delete $dest;

    set got [binutils_run $AR "rc $dest $file1 $file2"]
    if [is_remote host] {
	remote_upload host $file1 tmpdir/$n1
    }

d71 2
a72 3
    remote_file host delete $dest;
    set got [binutils_run $AR "rc $dest $file1 $file2"]

d78 2
a79 2
    remote_file build delete tmpdir/$n1
    remote_file build delete tmpdir/$n2
d81 1
a81 2
    set got [binutils_run $AR "t $dest"]
    regsub "\[\r\n \t\]*$" "$got" "" got;
a85 5
    
    if [is_remote host] {
	remote_file host delete $file1;
	remote_file host delete $file2;
    }
d87 2
a88 2
    verbose -log "$AR x $dest"
    set exec_output [binutils_run $AR "x $dest"]
d96 2
a97 12
    if [is_remote host] {
	remote_upload host $n1 tmpdir/$n1;
	remote_upload host $n2 tmpdir/$n2;
	set file1 tmpdir/$n1
	set file2 tmpdir/$n2
    } else {
	set file1 $n1
	set file2 $n2
    }

    if ![file exists $file1] {
	verbose -log "$file1 does not exist"
d101 2
a102 2
    if ![file exists $file2] {
	verbose -log "$file2 does not exist"
d107 1
a107 1
    set f [open $file1 r]
d109 1
a109 1
	verbose -log "$file1 contents:"
d117 1
a117 1
    set f [open $file2 r]
d119 1
a119 1
	verbose -log "$file2 contents:"
d141 1
a141 1
    if ![binutils_assemble $srcdir/$subdir/bintest.s tmpdir/bintest.o] {
d146 1
a146 10
    if [is_remote host] {
	set archive artest.a
	set objfile [remote_download host tmpdir/bintest.o]
	remote_file host delete $archive
    } else {
	set archive tmpdir/artest.a
	set objfile tmpdir/bintest.o
    }

    remote_file build delete tmpdir/artest.a
d148 1
a148 1
    set got [binutils_run $AR "rc $archive ${objfile}"]
d154 1
a154 1
    set got [binutils_run $NM "--print-armap $archive"]
@


1.1.1.5
log
@Import binutils-2.11.2
- only the binutils package (no gdb here)
- don't import libiberty and texinfo, they are elsewhere
- remove all .info* generated files
@
text
@d1 1
a1 1
#   Copyright 1995, 1997 Free Software Foundation, Inc.
@


