head	1.7;
access;
symbols
	OPENBSD_6_0:1.7.0.48
	OPENBSD_6_0_BASE:1.7
	OPENBSD_5_9:1.7.0.44
	OPENBSD_5_9_BASE:1.7
	OPENBSD_5_8:1.7.0.46
	OPENBSD_5_8_BASE:1.7
	OPENBSD_5_7:1.7.0.38
	OPENBSD_5_7_BASE:1.7
	OPENBSD_5_6:1.7.0.42
	OPENBSD_5_6_BASE:1.7
	OPENBSD_5_5:1.7.0.40
	OPENBSD_5_5_BASE:1.7
	OPENBSD_5_4:1.7.0.36
	OPENBSD_5_4_BASE:1.7
	OPENBSD_5_3:1.7.0.34
	OPENBSD_5_3_BASE:1.7
	OPENBSD_5_2:1.7.0.32
	OPENBSD_5_2_BASE:1.7
	OPENBSD_5_1_BASE:1.7
	OPENBSD_5_1:1.7.0.30
	OPENBSD_5_0:1.7.0.28
	OPENBSD_5_0_BASE:1.7
	OPENBSD_4_9:1.7.0.26
	OPENBSD_4_9_BASE:1.7
	OPENBSD_4_8:1.7.0.24
	OPENBSD_4_8_BASE:1.7
	OPENBSD_4_7:1.7.0.20
	OPENBSD_4_7_BASE:1.7
	OPENBSD_4_6:1.7.0.22
	OPENBSD_4_6_BASE:1.7
	OPENBSD_4_5:1.7.0.18
	OPENBSD_4_5_BASE:1.7
	OPENBSD_4_4:1.7.0.16
	OPENBSD_4_4_BASE:1.7
	OPENBSD_4_3:1.7.0.14
	OPENBSD_4_3_BASE:1.7
	OPENBSD_4_2:1.7.0.12
	OPENBSD_4_2_BASE:1.7
	OPENBSD_4_1:1.7.0.10
	OPENBSD_4_1_BASE:1.7
	OPENBSD_4_0:1.7.0.8
	OPENBSD_4_0_BASE:1.7
	OPENBSD_3_9:1.7.0.6
	OPENBSD_3_9_BASE:1.7
	OPENBSD_3_8:1.7.0.4
	OPENBSD_3_8_BASE:1.7
	OPENBSD_3_7:1.7.0.2
	OPENBSD_3_7_BASE:1.7
	BINUTILS_2_15:1.1.1.8
	OPENBSD_3_6:1.6.0.2
	OPENBSD_3_6_BASE:1.6
	BINUTILS-2_14:1.1.1.7
	OPENBSD_3_5:1.5.0.8
	OPENBSD_3_5_BASE:1.5
	OPENBSD_3_4:1.5.0.6
	OPENBSD_3_4_BASE:1.5
	OPENBSD_3_3:1.5.0.4
	OPENBSD_3_3_BASE:1.5
	OPENBSD_3_2:1.5.0.2
	OPENBSD_3_2_BASE:1.5
	binutils-2_11_2:1.1.1.6
	OPENBSD_3_1:1.4.0.8
	OPENBSD_3_1_BASE:1.4
	OPENBSD_3_0:1.4.0.6
	OPENBSD_3_0_BASE:1.4
	BINUTILS-2_10_1:1.1.1.5
	OPENBSD_2_9:1.4.0.4
	OPENBSD_2_9_BASE:1.4
	OPENBSD_2_8:1.4.0.2
	OPENBSD_2_8_BASE:1.4
	BINUTILS-2_10:1.1.1.5
	OPENBSD_2_7:1.3.0.18
	OPENBSD_2_7_BASE:1.3
	new-binutils:1.3.0.16
	OPENBSD_2_6:1.3.0.14
	OPENBSD_2_6_BASE:1.3
	OPENBSD_2_5:1.3.0.12
	OPENBSD_2_5_BASE:1.3
	OPENBSD_2_4:1.3.0.10
	OPENBSD_2_4_BASE:1.3
	OPENBSD_2_3:1.3.0.8
	OPENBSD_2_3_BASE:1.3
	OPENBSD_2_2:1.3.0.6
	OPENBSD_2_2_BASE:1.3
	BINUTILS-2_8_1:1.1.1.4
	OPENBSD_2_1:1.3.0.4
	OPENBSD_2_1_BASE:1.3
	CYGNUS-961112:1.1.1.3
	OPENBSD_2_0:1.3.0.2
	OPENBSD_2_0_BASE:1.3
	CYGNUS-960904:1.1.1.3
	CYGNUS-960609:1.1.1.2
	CYGNUS-960607:1.1.1.2
	CYGNUS:1.1.1
	FSF_2_6:1.1.1.1
	FSF:1.1.1;
locks; strict;
comment	@ * @;


1.7
date	2004.11.02.20.45.15;	author miod;	state Exp;
branches;
next	1.6;

1.6
date	2004.05.17.21.54.25;	author drahn;	state Exp;
branches;
next	1.5;

1.5
date	2002.05.13.17.07.32;	author fgsch;	state Exp;
branches;
next	1.4;

1.4
date	2000.09.12.19.11.29;	author espie;	state Exp;
branches;
next	1.3;

1.3
date	96.09.04.19.02.33;	author niklas;	state Exp;
branches;
next	1.2;

1.2
date	96.06.10.10.48.16;	author niklas;	state Exp;
branches;
next	1.1;

1.1
date	96.01.08.11.03.42;	author niklas;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	96.01.08.11.03.42;	author niklas;	state Exp;
branches;
next	1.1.1.2;

1.1.1.2
date	96.06.07.11.03.35;	author niklas;	state Exp;
branches;
next	1.1.1.3;

1.1.1.3
date	96.09.04.17.49.24;	author niklas;	state Exp;
branches;
next	1.1.1.4;

1.1.1.4
date	97.05.29.09.15.37;	author niklas;	state Exp;
branches;
next	1.1.1.5;

1.1.1.5
date	2000.09.12.14.45.01;	author espie;	state Exp;
branches;
next	1.1.1.6;

1.1.1.6
date	2002.05.13.13.14.10;	author fgsch;	state Exp;
branches;
next	1.1.1.7;

1.1.1.7
date	2004.05.17.20.42.03;	author drahn;	state Exp;
branches;
next	1.1.1.8;

1.1.1.8
date	2004.11.02.20.22.00;	author miod;	state Exp;
branches;
next	;


desc
@@


1.7
log
@Merge conflicts, bringing our changes back in:
- extra $(SHELL) and sugar for make (so that files not mode +x still work)
- safer temp file handling
- our W^X binary layout changes in ld
- OpenBSD policy for library file selection in ld
- arm and m88k changes which were not merged in time for official 2.15
- bfd core file handling
- a couple typos

New for 2.15:
- ld(1) and as(1) manpages now generated at build time
- binutils/stabs.c reverted to use our in-tree libiberty for now
- we still use our VIA C3 crypto code over stock binutils, as it recognizes
  more instructions
- new emulations for OpenBSD on mips64 machines, to help OpenBSD/sgi
- relaxed %f# handling in gas on OpenBSD/sparc64 (same as was in 2.14)

Tested on all platforms by various people; special thanks to sturm@@ and
otto@@.
@
text
@/* arsup.c - Archive support for MRI compatibility
   Copyright 1992, 1994, 1995, 1996, 1997, 2000, 2002, 2003, 2004
   Free Software Foundation, Inc.

   This file is part of GNU Binutils.

   This program is free software; you can redistribute it and/or modify
   it under the terms of the GNU General Public License as published by
   the Free Software Foundation; either version 2 of the License, or
   (at your option) any later version.

   This program is distributed in the hope that it will be useful,
   but WITHOUT ANY WARRANTY; without even the implied warranty of
   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
   GNU General Public License for more details.

   You should have received a copy of the GNU General Public License
   along with this program; if not, write to the Free Software
   Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA 02111-1307, USA.  */


/* Contributed by Steve Chamberlain
   sac@@cygnus.com

   This file looks after requests from arparse.y, to provide the MRI
   style librarian command syntax + 1 word LIST.  */

#include "bfd.h"
#include "arsup.h"
#include "libiberty.h"
#include "bucomm.h"
#include "filenames.h"

static void map_over_list
  (bfd *, void (*function) (bfd *, bfd *), struct list *);
static void ar_directory_doer (bfd *, bfd *);
static void ar_addlib_doer (bfd *, bfd *);

extern int verbose;

static void
map_over_list (bfd *arch, void (*function) (bfd *, bfd *), struct list *list)
{
  bfd *head;

  if (list == NULL)
    {
      bfd *next;

      head = arch->next;
      while (head != NULL)
	{
	  next = head->next;
	  function (head, (bfd *) NULL);
	  head = next;
	}
    }
  else
    {
      struct list *ptr;

      /* This may appear to be a baroque way of accomplishing what we
	 want.  however we have to iterate over the filenames in order
	 to notice where a filename is requested but does not exist in
	 the archive.  Ditto mapping over each file each time -- we
	 want to hack multiple references.  */
      for (ptr = list; ptr; ptr = ptr->next)
	{
	  bfd_boolean found = FALSE;
	  bfd *prev = arch;

	  for (head = arch->next; head; head = head->next)
	    {
	      if (head->filename != NULL
		  && FILENAME_CMP (ptr->name, head->filename) == 0)
		{
		  found = TRUE;
		  function (head, prev);
		}
	      prev = head;
	    }
	  if (! found)
	    fprintf (stderr, _("No entry %s in archive.\n"), ptr->name);
	}
    }
}


FILE *outfile;

static void
ar_directory_doer (bfd *abfd, bfd *ignore ATTRIBUTE_UNUSED)
{
  print_arelt_descr(outfile, abfd, verbose);
}

void
ar_directory (char *ar_name, struct list *list, char *output)
{
  bfd *arch;

  arch = open_inarch (ar_name, (char *) NULL);
  if (output)
    {
      outfile = fopen(output,"w");
      if (outfile == 0)
	{
	  outfile = stdout;
	  fprintf (stderr,_("Can't open file %s\n"), output);
	  output = 0;
	}
    }
  else
    outfile = stdout;

  map_over_list (arch, ar_directory_doer, list);

  bfd_close (arch);

  if (output)
   fclose (outfile);
}

void
prompt (void)
{
  extern int interactive;

  if (interactive)
    {
      printf ("AR >");
      fflush (stdout);
    }
}

void
maybequit (void)
{
  if (! interactive)
    xexit (9);
}


bfd *obfd;
char *real_name;

void
ar_open (char *name, int t)
{
  char *tname = (char *) xmalloc (strlen (name) + 10);
  const char *bname = lbasename (name);
  real_name = name;

  /* Prepend tmp- to the beginning, to avoid file-name clashes after
     truncation on filesystems with limited namespaces (DOS).  */
  sprintf (tname, "%.*stmp-%s", (int) (bname - name), name, bname);
  obfd = bfd_openw (tname, NULL);

  if (!obfd)
    {
      fprintf (stderr,
	       _("%s: Can't open output archive %s\n"),
	       program_name,  tname);

      maybequit ();
    }
  else
    {
      if (!t)
	{
	  bfd **ptr;
	  bfd *element;
	  bfd *ibfd;

	  ibfd = bfd_openr (name, NULL);

	  if (!ibfd)
	    {
	      fprintf (stderr,_("%s: Can't open input archive %s\n"),
		       program_name, name);
	      maybequit ();
	      return;
	    }

	  if (!bfd_check_format(ibfd, bfd_archive))
	    {
	      fprintf (stderr,
		       _("%s: file %s is not an archive\n"),
		       program_name, name);
	      maybequit ();
	      return;
	    }

	  ptr = &(obfd->archive_head);
	  element = bfd_openr_next_archived_file (ibfd, NULL);

	  while (element)
	    {
	      *ptr = element;
	      ptr = &element->next;
	      element = bfd_openr_next_archived_file (ibfd, element);
	    }
	}

      bfd_set_format (obfd, bfd_archive);

      obfd->has_armap = 1;
    }
}

static void
ar_addlib_doer (bfd *abfd, bfd *prev)
{
  /* Add this module to the output bfd.  */
  if (prev != NULL)
    prev->next = abfd->next;

  abfd->next = obfd->archive_head;
  obfd->archive_head = abfd;
}

void
ar_addlib (char *name, struct list *list)
{
  if (obfd == NULL)
    {
      fprintf (stderr, _("%s: no output archive specified yet\n"), program_name);
      maybequit ();
    }
  else
    {
      bfd *arch;

      arch = open_inarch (name, (char *) NULL);
      if (arch != NULL)
	map_over_list (arch, ar_addlib_doer, list);

      /* Don't close the bfd, since it will make the elements disappear.  */
    }
}

void
ar_addmod (struct list *list)
{
  if (!obfd)
    {
      fprintf (stderr, _("%s: no open output archive\n"), program_name);
      maybequit ();
    }
  else
    {
      while (list)
	{
	  bfd *abfd = bfd_openr (list->name, NULL);

	  if (!abfd)
	    {
	      fprintf (stderr, _("%s: can't open file %s\n"),
		       program_name, list->name);
	      maybequit ();
	    }
	  else
	    {
	      abfd->next = obfd->archive_head;
	      obfd->archive_head = abfd;
	    }
	  list = list->next;
	}
    }
}


void
ar_clear (void)
{
  if (obfd)
    obfd->archive_head = 0;
}

void
ar_delete (struct list *list)
{
  if (!obfd)
    {
      fprintf (stderr, _("%s: no open output archive\n"), program_name);
      maybequit ();
    }
  else
    {
      while (list)
	{
	  /* Find this name in the archive.  */
	  bfd *member = obfd->archive_head;
	  bfd **prev = &(obfd->archive_head);
	  int found = 0;

	  while (member)
	    {
	      if (FILENAME_CMP(member->filename, list->name) == 0)
		{
		  *prev = member->next;
		  found = 1;
		}
	      else
		prev = &(member->next);

	      member = member->next;
	    }

	  if (!found)
	    {
	      fprintf (stderr, _("%s: can't find module file %s\n"),
		       program_name, list->name);
	      maybequit ();
	    }

	  list = list->next;
	}
    }
}

void
ar_save (void)
{
  if (!obfd)
    {
      fprintf (stderr, _("%s: no open output archive\n"), program_name);
      maybequit ();
    }
  else
    {
      char *ofilename = xstrdup (bfd_get_filename (obfd));

      bfd_close (obfd);

      smart_rename (ofilename, real_name, 0);
      obfd = 0;
      free (ofilename);
    }
}

void
ar_replace (struct list *list)
{
  if (!obfd)
    {
      fprintf (stderr, _("%s: no open output archive\n"), program_name);
      maybequit ();
    }
  else
    {
      while (list)
	{
	  /* Find this name in the archive.  */
	  bfd *member = obfd->archive_head;
	  bfd **prev = &(obfd->archive_head);
	  int found = 0;

	  while (member)
	    {
	      if (FILENAME_CMP (member->filename, list->name) == 0)
		{
		  /* Found the one to replace.  */
		  bfd *abfd = bfd_openr (list->name, 0);

		  if (!abfd)
		    {
		      fprintf (stderr, _("%s: can't open file %s\n"),
			       program_name, list->name);
		      maybequit ();
		    }
		  else
		    {
		      *prev = abfd;
		      abfd->next = member->next;
		      found = 1;
		    }
		}
	      else
		{
		  prev = &(member->next);
		}
	      member = member->next;
	    }

	  if (!found)
	    {
	      bfd *abfd = bfd_openr (list->name, 0);

	      fprintf (stderr,_("%s: can't find module file %s\n"),
		       program_name, list->name);
	      if (!abfd)
		{
		  fprintf (stderr, _("%s: can't open file %s\n"),
			   program_name, list->name);
		  maybequit ();
		}
	      else
		*prev = abfd;
	    }

	  list = list->next;
	}
    }
}

/* And I added this one.  */
void
ar_list (void)
{
  if (!obfd)
    {
      fprintf (stderr, _("%s: no open output archive\n"), program_name);
      maybequit ();
    }
  else
    {
      bfd *abfd;

      outfile = stdout;
      verbose =1 ;
      printf (_("Current open archive is %s\n"), bfd_get_filename (obfd));

      for (abfd = obfd->archive_head;
	   abfd != (bfd *)NULL;
	   abfd = abfd->next)
	ar_directory_doer (abfd, (bfd *) NULL);
    }
}

void
ar_end (void)
{
  if (obfd)
    {
      bfd_cache_close (obfd);
      unlink (bfd_get_filename (obfd));
    }
}

void
ar_extract (struct list *list)
{
  if (!obfd)
    {
      fprintf (stderr, _("%s: no open archive\n"), program_name);
      maybequit ();
    }
  else
    {
      while (list)
	{
	  /* Find this name in the archive.  */
	  bfd *member = obfd->archive_head;
	  int found = 0;

	  while (member && !found)
	    {
	      if (FILENAME_CMP (member->filename, list->name) == 0)
		{
		  extract_file (member);
		  found = 1;
		}

	      member = member->next;
	    }

	  if (!found)
	    {
	      bfd_openr (list->name, 0);
	      fprintf (stderr, _("%s: can't find module file %s\n"),
		       program_name, list->name);
	    }

	  list = list->next;
	}
    }
}
@


1.6
log
@Resolve merge conflicts, adjust method of W^X handing (.sh files)
remove testsuites (not useable) remove mmalloc (not part of new binutils).
@
text
@d2 1
a2 1
   Copyright 1992, 1994, 1995, 1996, 1997, 2000, 2002
d35 3
a37 3
  PARAMS ((bfd *, void (*function) (bfd *, bfd *), struct list *));
static void ar_directory_doer PARAMS ((bfd *, bfd *));
static void ar_addlib_doer PARAMS ((bfd *, bfd *));
d42 1
a42 4
map_over_list (arch, function, list)
     bfd *arch;
     void (*function) PARAMS ((bfd *, bfd *));
     struct list *list;
d92 1
a92 3
ar_directory_doer (abfd, ignore)
     bfd *abfd;
     bfd *ignore ATTRIBUTE_UNUSED;
d98 1
a98 4
ar_directory (ar_name, list, output)
     char *ar_name;
     struct list *list;
     char *output;
d125 1
a125 1
DEFUN_VOID(prompt)
d137 1
a137 1
maybequit ()
d148 1
a148 3
ar_open (name, t)
  char *name;
  int t;
d212 1
a212 3
ar_addlib_doer (abfd, prev)
     bfd *abfd;
     bfd *prev;
d223 1
a223 3
ar_addlib (name, list)
     char *name;
     struct list *list;
d238 1
a238 1
      /* Don't close the bfd, since it will make the elements disasppear.  */
d243 1
a243 2
ar_addmod (list)
     struct list *list;
d274 1
a274 1
ar_clear ()
d281 1
a281 2
ar_delete (list)
     struct list *list;
d323 1
a323 1
ar_save ()
d336 1
a336 1
      rename (ofilename, real_name);
d343 1
a343 2
ar_replace (list)
     struct list *list;
d409 1
a409 1
ar_list ()
d432 1
a432 1
ar_end ()
d436 1
a436 1
      fclose ((FILE *)(obfd->iostream));
d442 1
a442 2
ar_extract (list)
     struct list *list;
@


1.5
log
@resolve conflicts.
@
text
@d2 1
a2 1
   Copyright 1992, 1994, 1995, 1996, 1997, 2000
d5 1
a5 1
This file is part of GNU Binutils.
d7 13
a19 13
This program is free software; you can redistribute it and/or modify
it under the terms of the GNU General Public License as published by
the Free Software Foundation; either version 2 of the License, or
(at your option) any later version.

This program is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
GNU General Public License for more details.

You should have received a copy of the GNU General Public License
along with this program; if not, write to the Free Software
Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA 02111-1307, USA.  */
d23 1
a23 1
   		  sac@@cygnus.com
d25 2
a26 4
This file looks after requests from arparse.y, to provide the MRI
style librarian command syntax + 1 word LIST

*/
d72 1
a72 1
	  boolean found = false;
d75 1
a75 1
	  for (head = arch->next; head; head = head->next) 
d80 1
a80 1
		  found = true;
a93 1
/*ARGSUSED*/
d99 1
a99 1
    print_arelt_descr(outfile, abfd, verbose);
d121 1
a121 1
  else 
d136 6
a141 5
  if (interactive) 
  {
    printf("AR >");
    fflush(stdout); 
  }
d147 1
a147 1
  if (! interactive) 
d153 2
a154 1
char *real_name ; 
d156 3
a158 4
DEFUN(ar_open,(name, t),
      char *name AND
      int t)

d161 1
d163 1
d166 2
a167 2
  sprintf(tname, "tmp-%s", name);
  obfd = bfd_openw(tname, NULL);
d169 7
a175 32
  if (!obfd) {
    fprintf(stderr,_("%s: Can't open output archive %s\n"), program_name,
	    tname);

    maybequit();
  }
  else {
    if (!t) {
      bfd **ptr;
      bfd *element;
      bfd *ibfd;
      ibfd = bfd_openr(name, NULL);
      if (!ibfd) {
	fprintf(stderr,_("%s: Can't open input archive %s\n"),
		program_name, name);
	maybequit();
	return;
      }
      if (bfd_check_format(ibfd, bfd_archive) != true) {
	fprintf(stderr,_("%s: file %s is not an archive\n"), program_name,
		name);
	maybequit();
	return;
      }
      ptr = &(obfd->archive_head);
      element = bfd_openr_next_archived_file(ibfd, NULL);

      while (element) {
	*ptr = element;
	ptr = &element->next;
	element = bfd_openr_next_archived_file(ibfd, element);
      }
d177 9
d187 7
a193 1
    bfd_set_format(obfd, bfd_archive);
d195 24
a218 2
    obfd->has_armap = 1;
  }
a220 1

d226 1
a226 1
  /* Add this module to the output bfd */
d229 1
d252 1
a252 1
      /* Don't close the bfd, since it will make the elements disasppear */
d257 2
a258 2
DEFUN(ar_addmod, (list),
      struct list *list)
d260 24
a283 18
  if (!obfd) {
    fprintf(stderr, _("%s: no open output archive\n"), program_name);
    maybequit();
  }
  else 
  {
    while (list) {
      bfd *abfd = bfd_openr(list->name, NULL);
      if (!abfd)  {
	fprintf(stderr,_("%s: can't open file %s\n"), program_name,
		list->name);
	maybequit();
      }
      else {
	abfd->next = obfd->archive_head;
	obfd->archive_head = abfd;
      }
      list = list->next;
a284 1
  }
a287 1

d289 1
a289 1
DEFUN_VOID(ar_clear)
d291 2
a292 2
if (obfd) 
 obfd->archive_head = 0;
d296 2
a297 2
DEFUN(ar_delete, (list),
      struct list *list)
d299 35
a333 15
  if (!obfd) {
    fprintf(stderr, _("%s: no open output archive\n"), program_name);
    maybequit();
  }
  else 
  {
    while (list) {
      /* Find this name in the archive */
      bfd *member = obfd->archive_head;
      bfd **prev = &(obfd->archive_head);
      int found = 0;
      while (member) {
	if (FILENAME_CMP(member->filename, list->name) == 0) {
	  *prev = member->next;
	  found = 1;
a334 11
	else {
	  prev = &(member->next);
	}
	  member = member->next;
      }
      if (!found)  {
	fprintf(stderr,_("%s: can't find module file %s\n"), program_name,
		list->name);
	maybequit();
      }
      list = list->next;
a335 1
  }
d338 19
d359 2
a360 1
DEFUN_VOID(ar_save)
d362 13
d376 30
a405 13
  if (!obfd) {
    fprintf(stderr, _("%s: no open output archive\n"), program_name);
    maybequit();
  }
  else {
    char *ofilename = xstrdup (bfd_get_filename (obfd));
    bfd_close(obfd);
    
    rename (ofilename, real_name);
    obfd = 0;
    free(ofilename);
  }
}
d407 11
d419 4
d424 1
d426 1
a426 2
DEFUN(ar_replace, (list),
      struct list *list)
d428 12
a439 47
  if (!obfd) {
    fprintf(stderr, _("%s: no open output archive\n"), program_name);
    maybequit();
  }
  else 
  {
    while (list) {
      /* Find this name in the archive */
      bfd *member = obfd->archive_head;
      bfd **prev = &(obfd->archive_head);
      int found = 0;
      while (member) 
      {
	if (FILENAME_CMP(member->filename, list->name) == 0) 
	{
	  /* Found the one to replace */
	  bfd *abfd = bfd_openr(list->name, 0);
	  if (!abfd) 
	  {
	    fprintf(stderr, _("%s: can't open file %s\n"), program_name, list->name);
	    maybequit();
	  }
	  else {
	    *prev = abfd;
	    abfd->next = member->next;
	    found = 1;
	  }
	}
	else {
	  prev = &(member->next);
	}
	member = member->next;
      }
      if (!found)  {
	bfd *abfd = bfd_openr(list->name, 0);
	fprintf(stderr,_("%s: can't find module file %s\n"), program_name,
		list->name);
	if (!abfd) 
	{
	  fprintf(stderr, _("%s: can't open file %s\n"), program_name, list->name);
	  maybequit();
	}
	else 
	{
	  *prev = abfd;
	}
      }
d441 4
a444 1
    list = list->next;
a445 1
  }
a447 1
/* And I added this one */
d449 1
a449 1
DEFUN_VOID(ar_list)
d451 1
a451 13
  if (!obfd) 
  {
    fprintf(stderr, _("%s: no open output archive\n"), program_name);
    maybequit();
  }
  else {
    bfd *abfd;
    outfile = stdout;
    verbose =1 ;
    printf(_("Current open archive is %s\n"), bfd_get_filename (obfd));
    for (abfd = obfd->archive_head;
	 abfd != (bfd *)NULL;
	 abfd = abfd->next) 
d453 2
a454 1
      ar_directory_doer (abfd, (bfd *) NULL);
a455 1
  }
d458 3
a460 3

void 
DEFUN_VOID(ar_end)
d462 8
a469 25
  if (obfd)
  {
    fclose((FILE *)(obfd->iostream));
    unlink(bfd_get_filename (obfd));
  }
}
void
DEFUN(ar_extract,(list),
      struct list *list)
{
  if (!obfd) 
  {

    fprintf(stderr, _("%s: no open  archive\n"), program_name);
    maybequit();
  }
  else 
  {
    while (list) {
      /* Find this name in the archive */
      bfd *member = obfd->archive_head;
      int found = 0;
      while (member && !found) 
      {
	if (FILENAME_CMP(member->filename, list->name) == 0) 
d471 14
a484 10
	  extract_file(member);
	  found = 1;
	  }

	member = member->next;
      }
      if (!found)  {
	bfd_openr(list->name, 0);
	fprintf(stderr,_("%s: can't find module file %s\n"), program_name,
		list->name);
d486 9
a494 2
      }
      list = list->next;
a495 1
  }
@


1.4
log
@Help stupid cvs fixing basic conflicts.
@
text
@d2 1
a2 1
   Copyright (C) 1992, 93, 94, 95, 96, 97, 98, 99, 2000
@


1.3
log
@Merge the Cygnus 960904 sources
@
text
@d2 2
a3 1
   Copyright (C) 1992 Free Software Foundation, Inc.
d34 1
a42 2
extern char *strdup();

d80 1
a80 1
		  && strcmp (ptr->name, head->filename) == 0)
d88 1
a88 1
	    fprintf (stderr, "No entry %s in archive.\n", ptr->name);
d100 1
a100 1
     bfd *ignore;
d120 1
a120 1
	  fprintf (stderr,"Can't open file %s\n", output);
d162 1
a162 1
  char *tname = (char *) malloc(strlen(name)+10);
d164 3
a166 1
  sprintf(tname, "%s-tmp", name);
d170 1
a170 1
    fprintf(stderr,"%s: Can't open output archive %s\n", program_name,
d182 1
a182 1
	fprintf(stderr,"%s: Can't open input archive %s\n",
d188 1
a188 1
	fprintf(stderr,"%s: file %s is not an archive\n", program_name,
d229 1
a229 1
      fprintf (stderr, "%s: no output archive specified yet\n", program_name);
d249 1
a249 1
    fprintf(stderr, "%s: no open output archive\n", program_name);
d257 1
a257 1
	fprintf(stderr,"%s: can't open file %s\n", program_name,
d284 1
a284 1
    fprintf(stderr, "%s: no open output archive\n", program_name);
d295 1
a295 1
	if (strcmp(member->filename, list->name) == 0) {
d305 1
a305 1
	fprintf(stderr,"%s: can't find module file %s\n", program_name,
d320 1
a320 1
    fprintf(stderr, "%s: no open output archive\n", program_name);
d324 1
a324 1
    char *ofilename = strdup(bfd_get_filename (obfd));
d340 1
a340 1
    fprintf(stderr, "%s: no open output archive\n", program_name);
d352 1
a352 1
	if (strcmp(member->filename, list->name) == 0) 
d358 1
a358 1
	    fprintf(stderr, "%s: can't open file %s\n", program_name, list->name);
d374 1
a374 1
	fprintf(stderr,"%s: can't find module file %s\n", program_name,
d378 1
a378 1
	  fprintf(stderr, "%s: can't open file %s\n", program_name, list->name);
d398 1
a398 1
    fprintf(stderr, "%s: no open output archive\n", program_name);
d405 1
a405 1
    printf("Current open archive is %s\n", bfd_get_filename (obfd));
d432 1
a432 1
    fprintf(stderr, "%s: no open  archive\n", program_name);
d443 1
a443 1
	if (strcmp(member->filename, list->name) == 0) 
d453 1
a453 1
	fprintf(stderr,"%s: can't find module file %s\n", program_name,
@


1.2
log
@Bring Cygnus versions into the trunk, keeping our local patches
@
text
@d113 1
a113 1
  arch = open_inarch (ar_name);
d234 1
a234 1
      arch = open_inarch (name);
@


1.1
log
@Initial revision
@
text
@d49 1
a49 1
  bfd            *head;
d51 11
a61 3
  if (list == 0) {
    for (head = arch->next; head; head = head->next){
      function (head, (bfd *) NULL);
d63 3
a65 10
  }
  else {
    /*
      This may appear to be a baroque way of accomplishing what we want.
      however we have to iterate over the filenames in order to notice where
      a filename is requested but does not exist in the archive.  Ditto
      mapping over each file each time -- we want to hack multiple
      references.
      */
    struct list *ptr = list;
d67 6
a72 8
    for (ptr = list; ptr; ptr=ptr->next)
    {
      boolean         found = false;
      bfd *prev = arch;
      for (head = arch->next; head; head = head->next) 
      {
	if ((head->filename != NULL) &&
	    (!strcmp(ptr->name, head->filename))) 
d74 2
a75 2
	  found = true;
	  function(head, prev);
d77 12
a89 4
	prev = head;
      }
      if (!found)
       fprintf(stderr, "No entry %s in archive.\n", ptr->name);
a90 1
  }
d214 2
a215 2
  
  prev->next = abfd->next;
@


1.1.1.1
log
@Initial GNU binutils 2.6 import
@
text
@@


1.1.1.2
log
@(Correct) Import of Cygnus binutils snapshot taken 960607
@
text
@d49 1
a49 1
  bfd *head;
d51 14
a64 3
  if (list == NULL)
    {
      bfd *next;
d66 1
a66 9
      head = arch->next;
      while (head != NULL)
	{
	  next = head->next;
	  function (head, (bfd *) NULL);
	  head = next;
	}
    }
  else
d68 6
a73 8
      struct list *ptr;

      /* This may appear to be a baroque way of accomplishing what we
	 want.  however we have to iterate over the filenames in order
	 to notice where a filename is requested but does not exist in
	 the archive.  Ditto mapping over each file each time -- we
	 want to hack multiple references.  */
      for (ptr = list; ptr; ptr = ptr->next)
d75 2
a76 2
	  boolean found = false;
	  bfd *prev = arch;
a77 12
	  for (head = arch->next; head; head = head->next) 
	    {
	      if (head->filename != NULL
		  && strcmp (ptr->name, head->filename) == 0)
		{
		  found = true;
		  function (head, prev);
		}
	      prev = head;
	    }
	  if (! found)
	    fprintf (stderr, "No entry %s in archive.\n", ptr->name);
d79 4
d84 1
d208 2
a209 2
  if (prev != NULL)
    prev->next = abfd->next;
@


1.1.1.3
log
@Import of binutils, gas, ld & gprof from Cygnus 960904 tree
@
text
@d113 1
a113 1
  arch = open_inarch (ar_name, (char *) NULL);
d234 1
a234 1
      arch = open_inarch (name, (char *) NULL);
@


1.1.1.4
log
@Import of binutils-2.8.1 from Cygnus/FSF
@
text
@d2 1
a2 1
   Copyright (C) 1992, 93, 94, 95, 96, 1997 Free Software Foundation, Inc.
d41 2
d162 1
a162 1
  char *tname = (char *) xmalloc (strlen (name) + 10);
d322 1
a322 1
    char *ofilename = xstrdup (bfd_get_filename (obfd));
@


1.1.1.5
log
@Import binutils-2.10
- only the binutils package (no gdb here)
- don't import libiberty and texinfo, they are elsewhere
- remove all .info* generated files
@
text
@d2 1
a2 2
   Copyright (C) 1992, 93, 94, 95, 96, 97, 98, 99, 2000
   Free Software Foundation, Inc.
a32 1
#include "filenames.h"
d78 1
a78 1
		  && FILENAME_CMP (ptr->name, head->filename) == 0)
d86 1
a86 1
	    fprintf (stderr, _("No entry %s in archive.\n"), ptr->name);
d98 1
a98 1
     bfd *ignore ATTRIBUTE_UNUSED;
d118 1
a118 1
	  fprintf (stderr,_("Can't open file %s\n"), output);
d162 1
a162 3
  /* Prepend tmp- to the beginning, to avoid file-name clashes after
     truncation on filesystems with limited namespaces (DOS).  */
  sprintf(tname, "tmp-%s", name);
d166 1
a166 1
    fprintf(stderr,_("%s: Can't open output archive %s\n"), program_name,
d178 1
a178 1
	fprintf(stderr,_("%s: Can't open input archive %s\n"),
d184 1
a184 1
	fprintf(stderr,_("%s: file %s is not an archive\n"), program_name,
d225 1
a225 1
      fprintf (stderr, _("%s: no output archive specified yet\n"), program_name);
d245 1
a245 1
    fprintf(stderr, _("%s: no open output archive\n"), program_name);
d253 1
a253 1
	fprintf(stderr,_("%s: can't open file %s\n"), program_name,
d280 1
a280 1
    fprintf(stderr, _("%s: no open output archive\n"), program_name);
d291 1
a291 1
	if (FILENAME_CMP(member->filename, list->name) == 0) {
d301 1
a301 1
	fprintf(stderr,_("%s: can't find module file %s\n"), program_name,
d316 1
a316 1
    fprintf(stderr, _("%s: no open output archive\n"), program_name);
d336 1
a336 1
    fprintf(stderr, _("%s: no open output archive\n"), program_name);
d348 1
a348 1
	if (FILENAME_CMP(member->filename, list->name) == 0) 
d354 1
a354 1
	    fprintf(stderr, _("%s: can't open file %s\n"), program_name, list->name);
d370 1
a370 1
	fprintf(stderr,_("%s: can't find module file %s\n"), program_name,
d374 1
a374 1
	  fprintf(stderr, _("%s: can't open file %s\n"), program_name, list->name);
d394 1
a394 1
    fprintf(stderr, _("%s: no open output archive\n"), program_name);
d401 1
a401 1
    printf(_("Current open archive is %s\n"), bfd_get_filename (obfd));
d428 1
a428 1
    fprintf(stderr, _("%s: no open  archive\n"), program_name);
d439 1
a439 1
	if (FILENAME_CMP(member->filename, list->name) == 0) 
d449 1
a449 1
	fprintf(stderr,_("%s: can't find module file %s\n"), program_name,
@


1.1.1.6
log
@Import binutils-2.11.2
- only the binutils package (no gdb here)
- don't import libiberty and texinfo, they are elsewhere
- remove all .info* generated files
@
text
@d2 1
a2 1
   Copyright 1992, 1994, 1995, 1996, 1997, 2000
@


1.1.1.7
log
@import binutils 2.14 (excluding testsuites, .info files, and .po files)
@
text
@d2 1
a2 1
   Copyright 1992, 1994, 1995, 1996, 1997, 2000, 2002
d5 1
a5 1
   This file is part of GNU Binutils.
d7 13
a19 13
   This program is free software; you can redistribute it and/or modify
   it under the terms of the GNU General Public License as published by
   the Free Software Foundation; either version 2 of the License, or
   (at your option) any later version.

   This program is distributed in the hope that it will be useful,
   but WITHOUT ANY WARRANTY; without even the implied warranty of
   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
   GNU General Public License for more details.

   You should have received a copy of the GNU General Public License
   along with this program; if not, write to the Free Software
   Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA 02111-1307, USA.  */
d23 1
a23 1
   sac@@cygnus.com
d25 4
a28 2
   This file looks after requests from arparse.y, to provide the MRI
   style librarian command syntax + 1 word LIST.  */
d74 1
a74 1
	  bfd_boolean found = FALSE;
d77 1
a77 1
	  for (head = arch->next; head; head = head->next)
d82 1
a82 1
		  found = TRUE;
d96 1
d102 1
a102 1
  print_arelt_descr(outfile, abfd, verbose);
d124 1
a124 1
  else
d139 5
a143 6

  if (interactive)
    {
      printf ("AR >");
      fflush (stdout);
    }
d149 1
a149 1
  if (! interactive)
d155 5
a159 1
char *real_name;
a160 4
void
ar_open (name, t)
  char *name;
  int t;
a162 1
  const char *bname = lbasename (name);
a163 1

d166 2
a167 2
  sprintf (tname, "%.*stmp-%s", (int) (bname - name), name, bname);
  obfd = bfd_openw (tname, NULL);
d169 32
a200 7
  if (!obfd)
    {
      fprintf (stderr,
	       _("%s: Can't open output archive %s\n"),
	       program_name,  tname);

      maybequit ();
a201 7
  else
    {
      if (!t)
	{
	  bfd **ptr;
	  bfd *element;
	  bfd *ibfd;
d203 1
a203 1
	  ibfd = bfd_openr (name, NULL);
d205 3
a207 7
	  if (!ibfd)
	    {
	      fprintf (stderr,_("%s: Can't open input archive %s\n"),
		       program_name, name);
	      maybequit ();
	      return;
	    }
a208 25
	  if (!bfd_check_format(ibfd, bfd_archive))
	    {
	      fprintf (stderr,
		       _("%s: file %s is not an archive\n"),
		       program_name, name);
	      maybequit ();
	      return;
	    }

	  ptr = &(obfd->archive_head);
	  element = bfd_openr_next_archived_file (ibfd, NULL);

	  while (element)
	    {
	      *ptr = element;
	      ptr = &element->next;
	      element = bfd_openr_next_archived_file (ibfd, element);
	    }
	}

      bfd_set_format (obfd, bfd_archive);

      obfd->has_armap = 1;
    }
}
d215 1
a215 1
  /* Add this module to the output bfd.  */
a217 1

d240 1
a240 1
      /* Don't close the bfd, since it will make the elements disasppear.  */
d245 2
a246 2
ar_addmod (list)
     struct list *list;
d248 18
a265 4
  if (!obfd)
    {
      fprintf (stderr, _("%s: no open output archive\n"), program_name);
      maybequit ();
d267 2
a268 5
  else
    {
      while (list)
	{
	  bfd *abfd = bfd_openr (list->name, NULL);
a269 15
	  if (!abfd)
	    {
	      fprintf (stderr, _("%s: can't open file %s\n"),
		       program_name, list->name);
	      maybequit ();
	    }
	  else
	    {
	      abfd->next = obfd->archive_head;
	      obfd->archive_head = abfd;
	    }
	  list = list->next;
	}
    }
}
d273 1
a273 1
ar_clear ()
d275 2
a276 2
  if (obfd)
    obfd->archive_head = 0;
d280 2
a281 2
ar_delete (list)
     struct list *list;
d283 18
a300 35
  if (!obfd)
    {
      fprintf (stderr, _("%s: no open output archive\n"), program_name);
      maybequit ();
    }
  else
    {
      while (list)
	{
	  /* Find this name in the archive.  */
	  bfd *member = obfd->archive_head;
	  bfd **prev = &(obfd->archive_head);
	  int found = 0;

	  while (member)
	    {
	      if (FILENAME_CMP(member->filename, list->name) == 0)
		{
		  *prev = member->next;
		  found = 1;
		}
	      else
		prev = &(member->next);

	      member = member->next;
	    }

	  if (!found)
	    {
	      fprintf (stderr, _("%s: can't find module file %s\n"),
		       program_name, list->name);
	      maybequit ();
	    }

	  list = list->next;
d302 8
d311 1
d314 1
d316 1
a316 1
ar_save ()
a317 8
  if (!obfd)
    {
      fprintf (stderr, _("%s: no open output archive\n"), program_name);
      maybequit ();
    }
  else
    {
      char *ofilename = xstrdup (bfd_get_filename (obfd));
d319 14
a332 1
      bfd_close (obfd);
a333 5
      rename (ofilename, real_name);
      obfd = 0;
      free (ofilename);
    }
}
d336 2
a337 2
ar_replace (list)
     struct list *list;
d339 43
a381 8
  if (!obfd)
    {
      fprintf (stderr, _("%s: no open output archive\n"), program_name);
      maybequit ();
    }
  else
    {
      while (list)
d383 3
a385 47
	  /* Find this name in the archive.  */
	  bfd *member = obfd->archive_head;
	  bfd **prev = &(obfd->archive_head);
	  int found = 0;

	  while (member)
	    {
	      if (FILENAME_CMP (member->filename, list->name) == 0)
		{
		  /* Found the one to replace.  */
		  bfd *abfd = bfd_openr (list->name, 0);

		  if (!abfd)
		    {
		      fprintf (stderr, _("%s: can't open file %s\n"),
			       program_name, list->name);
		      maybequit ();
		    }
		  else
		    {
		      *prev = abfd;
		      abfd->next = member->next;
		      found = 1;
		    }
		}
	      else
		{
		  prev = &(member->next);
		}
	      member = member->next;
	    }

	  if (!found)
	    {
	      bfd *abfd = bfd_openr (list->name, 0);

	      fprintf (stderr,_("%s: can't find module file %s\n"),
		       program_name, list->name);
	      if (!abfd)
		{
		  fprintf (stderr, _("%s: can't open file %s\n"),
			   program_name, list->name);
		  maybequit ();
		}
	      else
		*prev = abfd;
	    }
d387 1
a387 2
	  list = list->next;
	}
d389 1
d392 1
a392 1
/* And I added this one.  */
d394 1
a394 1
ar_list ()
d396 13
a408 1
  if (!obfd)
d410 1
a410 2
      fprintf (stderr, _("%s: no open output archive\n"), program_name);
      maybequit ();
d412 2
a413 3
  else
    {
      bfd *abfd;
a414 10
      outfile = stdout;
      verbose =1 ;
      printf (_("Current open archive is %s\n"), bfd_get_filename (obfd));

      for (abfd = obfd->archive_head;
	   abfd != (bfd *)NULL;
	   abfd = abfd->next)
	ar_directory_doer (abfd, (bfd *) NULL);
    }
}
d416 2
a417 2
void
ar_end ()
d420 24
a443 18
    {
      fclose ((FILE *)(obfd->iostream));
      unlink (bfd_get_filename (obfd));
    }
}

void
ar_extract (list)
     struct list *list;
{
  if (!obfd)
    {
      fprintf (stderr, _("%s: no open archive\n"), program_name);
      maybequit ();
    }
  else
    {
      while (list)
d445 10
a454 14
	  /* Find this name in the archive.  */
	  bfd *member = obfd->archive_head;
	  int found = 0;

	  while (member && !found)
	    {
	      if (FILENAME_CMP (member->filename, list->name) == 0)
		{
		  extract_file (member);
		  found = 1;
		}

	      member = member->next;
	    }
d456 2
a457 9
	  if (!found)
	    {
	      bfd_openr (list->name, 0);
	      fprintf (stderr, _("%s: can't find module file %s\n"),
		       program_name, list->name);
	    }

	  list = list->next;
	}
d459 1
@


1.1.1.8
log
@Binutils 2.15, with testsuites removed, and without gdb and libiberty.
@
text
@d2 1
a2 1
   Copyright 1992, 1994, 1995, 1996, 1997, 2000, 2002, 2003, 2004
d35 3
a37 3
  (bfd *, void (*function) (bfd *, bfd *), struct list *);
static void ar_directory_doer (bfd *, bfd *);
static void ar_addlib_doer (bfd *, bfd *);
d42 4
a45 1
map_over_list (bfd *arch, void (*function) (bfd *, bfd *), struct list *list)
d95 3
a97 1
ar_directory_doer (bfd *abfd, bfd *ignore ATTRIBUTE_UNUSED)
d103 4
a106 1
ar_directory (char *ar_name, struct list *list, char *output)
d133 1
a133 1
prompt (void)
d145 1
a145 1
maybequit (void)
d156 3
a158 1
ar_open (char *name, int t)
d222 3
a224 1
ar_addlib_doer (bfd *abfd, bfd *prev)
d235 3
a237 1
ar_addlib (char *name, struct list *list)
d252 1
a252 1
      /* Don't close the bfd, since it will make the elements disappear.  */
d257 2
a258 1
ar_addmod (struct list *list)
d289 1
a289 1
ar_clear (void)
d296 2
a297 1
ar_delete (struct list *list)
d339 1
a339 1
ar_save (void)
d352 1
a352 1
      smart_rename (ofilename, real_name, 0);
d359 2
a360 1
ar_replace (struct list *list)
d426 1
a426 1
ar_list (void)
d449 1
a449 1
ar_end (void)
d453 1
a453 1
      bfd_cache_close (obfd);
d459 2
a460 1
ar_extract (struct list *list)
@


