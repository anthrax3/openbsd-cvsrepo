head	1.1;
branch	1.1.1;
access;
symbols
	OPENBSD_6_1:1.1.1.4.0.52
	OPENBSD_6_1_BASE:1.1.1.4
	OPENBSD_6_0:1.1.1.4.0.48
	OPENBSD_6_0_BASE:1.1.1.4
	OPENBSD_5_9:1.1.1.4.0.44
	OPENBSD_5_9_BASE:1.1.1.4
	OPENBSD_5_8:1.1.1.4.0.46
	OPENBSD_5_8_BASE:1.1.1.4
	OPENBSD_5_7:1.1.1.4.0.38
	OPENBSD_5_7_BASE:1.1.1.4
	OPENBSD_5_6:1.1.1.4.0.42
	OPENBSD_5_6_BASE:1.1.1.4
	OPENBSD_5_5:1.1.1.4.0.40
	OPENBSD_5_5_BASE:1.1.1.4
	OPENBSD_5_4:1.1.1.4.0.36
	OPENBSD_5_4_BASE:1.1.1.4
	OPENBSD_5_3:1.1.1.4.0.34
	OPENBSD_5_3_BASE:1.1.1.4
	OPENBSD_5_2:1.1.1.4.0.32
	OPENBSD_5_2_BASE:1.1.1.4
	OPENBSD_5_1_BASE:1.1.1.4
	OPENBSD_5_1:1.1.1.4.0.30
	OPENBSD_5_0:1.1.1.4.0.28
	OPENBSD_5_0_BASE:1.1.1.4
	OPENBSD_4_9:1.1.1.4.0.26
	OPENBSD_4_9_BASE:1.1.1.4
	OPENBSD_4_8:1.1.1.4.0.24
	OPENBSD_4_8_BASE:1.1.1.4
	OPENBSD_4_7:1.1.1.4.0.20
	OPENBSD_4_7_BASE:1.1.1.4
	OPENBSD_4_6:1.1.1.4.0.22
	OPENBSD_4_6_BASE:1.1.1.4
	OPENBSD_4_5:1.1.1.4.0.18
	OPENBSD_4_5_BASE:1.1.1.4
	OPENBSD_4_4:1.1.1.4.0.16
	OPENBSD_4_4_BASE:1.1.1.4
	OPENBSD_4_3:1.1.1.4.0.14
	OPENBSD_4_3_BASE:1.1.1.4
	OPENBSD_4_2:1.1.1.4.0.12
	OPENBSD_4_2_BASE:1.1.1.4
	OPENBSD_4_1:1.1.1.4.0.10
	OPENBSD_4_1_BASE:1.1.1.4
	OPENBSD_4_0:1.1.1.4.0.8
	OPENBSD_4_0_BASE:1.1.1.4
	OPENBSD_3_9:1.1.1.4.0.6
	OPENBSD_3_9_BASE:1.1.1.4
	OPENBSD_3_8:1.1.1.4.0.4
	OPENBSD_3_8_BASE:1.1.1.4
	OPENBSD_3_7:1.1.1.4.0.2
	OPENBSD_3_7_BASE:1.1.1.4
	BINUTILS_2_15:1.1.1.4
	OPENBSD_3_6:1.1.1.3.0.2
	OPENBSD_3_6_BASE:1.1.1.3
	BINUTILS-2_14:1.1.1.3
	OPENBSD_3_5:1.1.1.2.0.8
	OPENBSD_3_5_BASE:1.1.1.2
	OPENBSD_3_4:1.1.1.2.0.6
	OPENBSD_3_4_BASE:1.1.1.2
	OPENBSD_3_3:1.1.1.2.0.4
	OPENBSD_3_3_BASE:1.1.1.2
	OPENBSD_3_2:1.1.1.2.0.2
	OPENBSD_3_2_BASE:1.1.1.2
	binutils-2_11_2:1.1.1.2
	OPENBSD_3_1:1.1.1.1.0.8
	OPENBSD_3_1_BASE:1.1.1.1
	OPENBSD_3_0:1.1.1.1.0.6
	OPENBSD_3_0_BASE:1.1.1.1
	BINUTILS-2_10_1:1.1.1.1
	OPENBSD_2_9:1.1.1.1.0.4
	OPENBSD_2_9_BASE:1.1.1.1
	OPENBSD_2_8:1.1.1.1.0.2
	OPENBSD_2_8_BASE:1.1.1.1
	BINUTILS-2_10:1.1.1.1
	FSF:1.1.1;
locks; strict;
comment	@ * @;


1.1
date	2000.09.12.14.45.04;	author espie;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	2000.09.12.14.45.04;	author espie;	state Exp;
branches;
next	1.1.1.2;

1.1.1.2
date	2002.05.13.13.14.52;	author fgsch;	state Exp;
branches;
next	1.1.1.3;

1.1.1.3
date	2004.05.17.20.42.06;	author drahn;	state Exp;
branches;
next	1.1.1.4;

1.1.1.4
date	2004.11.02.20.22.03;	author miod;	state Exp;
branches;
next	;


desc
@@


1.1
log
@Initial revision
@
text
@
/*  A Bison parser, made from defparse.y
    by GNU Bison version 1.28  */

#define YYBISON 1  /* Identify Bison output.  */

#define	NAME	257
#define	LIBRARY	258
#define	DESCRIPTION	259
#define	STACKSIZE	260
#define	HEAPSIZE	261
#define	CODE	262
#define	DATA	263
#define	SECTIONS	264
#define	EXPORTS	265
#define	IMPORTS	266
#define	VERSIONK	267
#define	BASE	268
#define	CONSTANT	269
#define	READ	270
#define	WRITE	271
#define	EXECUTE	272
#define	SHARED	273
#define	NONSHARED	274
#define	NONAME	275
#define	SINGLE	276
#define	MULTIPLE	277
#define	INITINSTANCE	278
#define	INITGLOBAL	279
#define	TERMINSTANCE	280
#define	TERMGLOBAL	281
#define	ID	282
#define	NUMBER	283

#line 1 "defparse.y"
 /* defparse.y - parser for .def files */

/*   Copyright (C) 1995, 1997, 1998, 1999 Free Software Foundation, Inc.

This file is part of GNU Binutils.

This program is free software; you can redistribute it and/or modify
it under the terms of the GNU General Public License as published by
the Free Software Foundation; either version 2 of the License, or
(at your option) any later version.

This program is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
GNU General Public License for more details.

You should have received a copy of the GNU General Public License
along with this program; if not, write to the Free Software
Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA 02111-1307, USA.  */

#include "bfd.h"
#include "bucomm.h"
#include "dlltool.h"

#line 26 "defparse.y"
typedef union {
  char *id;
  int number;
} YYSTYPE;
#include <stdio.h>

#ifndef __cplusplus
#ifndef __STDC__
#define const
#endif
#endif



#define	YYFINAL		94
#define	YYFLAG		-32768
#define	YYNTBASE	34

#define YYTRANSLATE(x) ((unsigned)(x) <= 283 ? yytranslate[x] : 55)

static const char yytranslate[] = {     0,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,    32,     2,    30,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
    31,     2,     2,    33,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     1,     3,     4,     5,     6,
     7,     8,     9,    10,    11,    12,    13,    14,    15,    16,
    17,    18,    19,    20,    21,    22,    23,    24,    25,    26,
    27,    28,    29
};

#if YYDEBUG != 0
static const short yyprhs[] = {     0,
     0,     3,     5,     9,    14,    17,    20,    24,    28,    31,
    34,    37,    40,    43,    48,    49,    52,    59,    62,    64,
    72,    80,    86,    92,    98,   104,   108,   112,   115,   117,
   120,   124,   126,   128,   129,   132,   133,   135,   137,   139,
   141,   143,   145,   147,   149,   150,   152,   153,   155,   156,
   158,   162,   163,   166,   167,   170,   171,   175,   176,   177,
   181,   183,   185,   187
};

static const short yyrhs[] = {    34,
    35,     0,    35,     0,     3,    49,    52,     0,     4,    49,
    52,    53,     0,    11,    36,     0,     5,    28,     0,     6,
    29,    44,     0,     7,    29,    44,     0,     8,    42,     0,
     9,    42,     0,    10,    40,     0,    12,    38,     0,    13,
    29,     0,    13,    29,    30,    29,     0,     0,    36,    37,
     0,    28,    51,    50,    47,    46,    48,     0,    38,    39,
     0,    39,     0,    28,    31,    28,    30,    28,    30,    28,
     0,    28,    31,    28,    30,    28,    30,    29,     0,    28,
    31,    28,    30,    28,     0,    28,    31,    28,    30,    29,
     0,    28,    30,    28,    30,    28,     0,    28,    30,    28,
    30,    29,     0,    28,    30,    28,     0,    28,    30,    29,
     0,    40,    41,     0,    41,     0,    28,    42,     0,    42,
    43,    45,     0,    45,     0,    32,     0,     0,    32,    29,
     0,     0,    16,     0,    17,     0,    18,     0,    19,     0,
    20,     0,    22,     0,    23,     0,    15,     0,     0,    21,
     0,     0,     9,     0,     0,    28,     0,    28,    30,    28,
     0,     0,    33,    29,     0,     0,    31,    28,     0,     0,
    14,    31,    29,     0,     0,     0,    53,    43,    54,     0,
    24,     0,    25,     0,    26,     0,    27,     0
};

#endif

#if YYDEBUG != 0
static const short yyrline[] = { 0,
    43,    44,    47,    49,    50,    51,    52,    53,    54,    55,
    56,    57,    58,    59,    63,    65,    68,    72,    74,    77,
    79,    80,    81,    82,    83,    84,    85,    88,    90,    93,
    97,    99,   102,   104,   106,   107,   110,   112,   113,   114,
   115,   116,   117,   120,   122,   125,   127,   130,   132,   135,
   136,   142,   145,   147,   150,   152,   155,   156,   159,   161,
   164,   166,   167,   168
};
#endif


#if YYDEBUG != 0 || defined (YYERROR_VERBOSE)

static const char * const yytname[] = {   "$","error","$undefined.","NAME","LIBRARY",
"DESCRIPTION","STACKSIZE","HEAPSIZE","CODE","DATA","SECTIONS","EXPORTS","IMPORTS",
"VERSIONK","BASE","CONSTANT","READ","WRITE","EXECUTE","SHARED","NONSHARED","NONAME",
"SINGLE","MULTIPLE","INITINSTANCE","INITGLOBAL","TERMINSTANCE","TERMGLOBAL",
"ID","NUMBER","'.'","'='","','","'@@'","start","command","explist","expline",
"implist","impline","seclist","secline","attr_list","opt_comma","opt_number",
"attr","opt_CONSTANT","opt_NONAME","opt_DATA","opt_name","opt_ordinal","opt_equal_name",
"opt_base","option_list","option", NULL
};
#endif

static const short yyr1[] = {     0,
    34,    34,    35,    35,    35,    35,    35,    35,    35,    35,
    35,    35,    35,    35,    36,    36,    37,    38,    38,    39,
    39,    39,    39,    39,    39,    39,    39,    40,    40,    41,
    42,    42,    43,    43,    44,    44,    45,    45,    45,    45,
    45,    45,    45,    46,    46,    47,    47,    48,    48,    49,
    49,    49,    50,    50,    51,    51,    52,    52,    53,    53,
    54,    54,    54,    54
};

static const short yyr2[] = {     0,
     2,     1,     3,     4,     2,     2,     3,     3,     2,     2,
     2,     2,     2,     4,     0,     2,     6,     2,     1,     7,
     7,     5,     5,     5,     5,     3,     3,     2,     1,     2,
     3,     1,     1,     0,     2,     0,     1,     1,     1,     1,
     1,     1,     1,     1,     0,     1,     0,     1,     0,     1,
     3,     0,     2,     0,     2,     0,     3,     0,     0,     3,
     1,     1,     1,     1
};

static const short yydefact[] = {     0,
    52,    52,     0,     0,     0,     0,     0,     0,    15,     0,
     0,     0,     2,    50,    58,    58,     6,    36,    36,    37,
    38,    39,    40,    41,    42,    43,     9,    32,    10,     0,
    11,    29,     5,     0,    12,    19,    13,     1,     0,     0,
     3,    59,     0,     7,     8,    33,     0,    30,    28,    56,
    16,     0,     0,    18,     0,    51,     0,     4,    35,    31,
     0,    54,    26,    27,     0,    14,    57,     0,    55,     0,
    47,     0,     0,    61,    62,    63,    64,    60,    53,    46,
    45,    24,    25,    22,    23,    44,    49,     0,    48,    17,
    20,    21,     0,     0
};

static const short yydefgoto[] = {    12,
    13,    33,    51,    35,    36,    31,    32,    27,    47,    44,
    28,    87,    81,    90,    15,    71,    62,    41,    58,    78
};

static const short yypact[] = {    32,
   -22,   -22,   -19,   -13,    22,    30,    30,    -6,-32768,    26,
    38,    21,-32768,    29,    46,    46,-32768,    36,    36,-32768,
-32768,-32768,-32768,-32768,-32768,-32768,   -15,-32768,   -15,    30,
    -6,-32768,    41,   -16,    26,-32768,    40,-32768,    43,    42,
-32768,-32768,    45,-32768,-32768,-32768,    30,   -15,-32768,    44,
-32768,    -9,    48,-32768,    49,-32768,    50,   -14,-32768,-32768,
    52,    39,    47,-32768,    51,-32768,-32768,    31,-32768,    53,
    62,    33,    35,-32768,-32768,-32768,-32768,-32768,-32768,-32768,
    69,-32768,-32768,    55,-32768,-32768,    77,    37,-32768,-32768,
-32768,-32768,    87,-32768
};

static const short yypgoto[] = {-32768,
    76,-32768,-32768,-32768,    54,-32768,    59,    -7,    34,    72,
    56,-32768,-32768,-32768,    91,-32768,-32768,    78,-32768,-32768
};


#define	YYLAST		103


static const short yytable[] = {    29,
   -34,   -34,   -34,   -34,   -34,    14,   -34,   -34,    17,   -34,
   -34,   -34,   -34,    52,    53,    18,    46,    46,    63,    64,
    93,    30,    48,     1,     2,     3,     4,     5,     6,     7,
     8,     9,    10,    11,     1,     2,     3,     4,     5,     6,
     7,     8,     9,    10,    11,    20,    21,    22,    23,    24,
    19,    25,    26,    34,    74,    75,    76,    77,    39,    40,
    82,    83,    84,    85,    91,    92,    37,    43,    50,    55,
    56,    70,    57,    59,    61,    65,    72,    66,    67,    69,
    73,    79,    80,    86,    88,    89,    94,    38,    54,    49,
    45,    68,    16,    42,     0,     0,     0,     0,     0,     0,
     0,     0,    60
};

static const short yycheck[] = {     7,
    16,    17,    18,    19,    20,    28,    22,    23,    28,    24,
    25,    26,    27,    30,    31,    29,    32,    32,    28,    29,
     0,    28,    30,     3,     4,     5,     6,     7,     8,     9,
    10,    11,    12,    13,     3,     4,     5,     6,     7,     8,
     9,    10,    11,    12,    13,    16,    17,    18,    19,    20,
    29,    22,    23,    28,    24,    25,    26,    27,    30,    14,
    28,    29,    28,    29,    28,    29,    29,    32,    28,    30,
    28,    33,    31,    29,    31,    28,    30,    29,    29,    28,
    30,    29,    21,    15,    30,     9,     0,    12,    35,    31,
    19,    58,     2,    16,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    47
};
/* -*-C-*-  Note some compilers choke on comments on `#line' lines.  */
#line 3 "/usr/share/misc/bison.simple"
/* This file comes from bison-1.28.  */

/* Skeleton output parser for bison,
   Copyright (C) 1984, 1989, 1990 Free Software Foundation, Inc.

   This program is free software; you can redistribute it and/or modify
   it under the terms of the GNU General Public License as published by
   the Free Software Foundation; either version 2, or (at your option)
   any later version.

   This program is distributed in the hope that it will be useful,
   but WITHOUT ANY WARRANTY; without even the implied warranty of
   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
   GNU General Public License for more details.

   You should have received a copy of the GNU General Public License
   along with this program; if not, write to the Free Software
   Foundation, Inc., 59 Temple Place - Suite 330,
   Boston, MA 02111-1307, USA.  */

/* As a special exception, when this file is copied by Bison into a
   Bison output file, you may use that output file without restriction.
   This special exception was added by the Free Software Foundation
   in version 1.24 of Bison.  */

/* This is the parser code that is written into each bison parser
  when the %semantic_parser declaration is not specified in the grammar.
  It was written by Richard Stallman by simplifying the hairy parser
  used when %semantic_parser is specified.  */

#ifndef YYSTACK_USE_ALLOCA
#ifdef alloca
#define YYSTACK_USE_ALLOCA
#else /* alloca not defined */
#ifdef __GNUC__
#define YYSTACK_USE_ALLOCA
#define alloca __builtin_alloca
#else /* not GNU C.  */
#if (!defined (__STDC__) && defined (sparc)) || defined (__sparc__) || defined (__sparc) || defined (__sgi) || (defined (__sun) && defined (__i386))
#define YYSTACK_USE_ALLOCA
#include <alloca.h>
#else /* not sparc */
/* We think this test detects Watcom and Microsoft C.  */
/* This used to test MSDOS, but that is a bad idea
   since that symbol is in the user namespace.  */
#if (defined (_MSDOS) || defined (_MSDOS_)) && !defined (__TURBOC__)
#if 0 /* No need for malloc.h, which pollutes the namespace;
	 instead, just don't use alloca.  */
#include <malloc.h>
#endif
#else /* not MSDOS, or __TURBOC__ */
#if defined(_AIX)
/* I don't know what this was needed for, but it pollutes the namespace.
   So I turned it off.   rms, 2 May 1997.  */
/* #include <malloc.h>  */
 #pragma alloca
#define YYSTACK_USE_ALLOCA
#else /* not MSDOS, or __TURBOC__, or _AIX */
#if 0
#ifdef __hpux /* haible@@ilog.fr says this works for HPUX 9.05 and up,
		 and on HPUX 10.  Eventually we can turn this on.  */
#define YYSTACK_USE_ALLOCA
#define alloca __builtin_alloca
#endif /* __hpux */
#endif
#endif /* not _AIX */
#endif /* not MSDOS, or __TURBOC__ */
#endif /* not sparc */
#endif /* not GNU C */
#endif /* alloca not defined */
#endif /* YYSTACK_USE_ALLOCA not defined */

#ifdef YYSTACK_USE_ALLOCA
#define YYSTACK_ALLOC alloca
#else
#define YYSTACK_ALLOC malloc
#endif

/* Note: there must be only one dollar sign in this file.
   It is replaced by the list of actions, each action
   as one case of the switch.  */

#define yyerrok		(yyerrstatus = 0)
#define yyclearin	(yychar = YYEMPTY)
#define YYEMPTY		-2
#define YYEOF		0
#define YYACCEPT	goto yyacceptlab
#define YYABORT 	goto yyabortlab
#define YYERROR		goto yyerrlab1
/* Like YYERROR except do call yyerror.
   This remains here temporarily to ease the
   transition to the new meaning of YYERROR, for GCC.
   Once GCC version 2 has supplanted version 1, this can go.  */
#define YYFAIL		goto yyerrlab
#define YYRECOVERING()  (!!yyerrstatus)
#define YYBACKUP(token, value) \
do								\
  if (yychar == YYEMPTY && yylen == 1)				\
    { yychar = (token), yylval = (value);			\
      yychar1 = YYTRANSLATE (yychar);				\
      YYPOPSTACK;						\
      goto yybackup;						\
    }								\
  else								\
    { yyerror ("syntax error: cannot back up"); YYERROR; }	\
while (0)

#define YYTERROR	1
#define YYERRCODE	256

#ifndef YYPURE
#define YYLEX		yylex()
#endif

#ifdef YYPURE
#ifdef YYLSP_NEEDED
#ifdef YYLEX_PARAM
#define YYLEX		yylex(&yylval, &yylloc, YYLEX_PARAM)
#else
#define YYLEX		yylex(&yylval, &yylloc)
#endif
#else /* not YYLSP_NEEDED */
#ifdef YYLEX_PARAM
#define YYLEX		yylex(&yylval, YYLEX_PARAM)
#else
#define YYLEX		yylex(&yylval)
#endif
#endif /* not YYLSP_NEEDED */
#endif

/* If nonreentrant, generate the variables here */

#ifndef YYPURE

int	yychar;			/*  the lookahead symbol		*/
YYSTYPE	yylval;			/*  the semantic value of the		*/
				/*  lookahead symbol			*/

#ifdef YYLSP_NEEDED
YYLTYPE yylloc;			/*  location data for the lookahead	*/
				/*  symbol				*/
#endif

int yynerrs;			/*  number of parse errors so far       */
#endif  /* not YYPURE */

#if YYDEBUG != 0
int yydebug;			/*  nonzero means print parse trace	*/
/* Since this is uninitialized, it does not stop multiple parsers
   from coexisting.  */
#endif

/*  YYINITDEPTH indicates the initial size of the parser's stacks	*/

#ifndef	YYINITDEPTH
#define YYINITDEPTH 200
#endif

/*  YYMAXDEPTH is the maximum size the stacks can grow to
    (effective only if the built-in stack extension method is used).  */

#if YYMAXDEPTH == 0
#undef YYMAXDEPTH
#endif

#ifndef YYMAXDEPTH
#define YYMAXDEPTH 10000
#endif

/* Define __yy_memcpy.  Note that the size argument
   should be passed with type unsigned int, because that is what the non-GCC
   definitions require.  With GCC, __builtin_memcpy takes an arg
   of type size_t, but it can handle unsigned int.  */

#if __GNUC__ > 1		/* GNU C and GNU C++ define this.  */
#define __yy_memcpy(TO,FROM,COUNT)	__builtin_memcpy(TO,FROM,COUNT)
#else				/* not GNU C or C++ */
#ifndef __cplusplus

/* This is the most reliable way to avoid incompatibilities
   in available built-in functions on various systems.  */
static void
__yy_memcpy (to, from, count)
     char *to;
     char *from;
     unsigned int count;
{
  register char *f = from;
  register char *t = to;
  register int i = count;

  while (i-- > 0)
    *t++ = *f++;
}

#else /* __cplusplus */

/* This is the most reliable way to avoid incompatibilities
   in available built-in functions on various systems.  */
static void
__yy_memcpy (char *to, char *from, unsigned int count)
{
  register char *t = to;
  register char *f = from;
  register int i = count;

  while (i-- > 0)
    *t++ = *f++;
}

#endif
#endif

#line 217 "/usr/share/misc/bison.simple"

/* The user can define YYPARSE_PARAM as the name of an argument to be passed
   into yyparse.  The argument should have type void *.
   It should actually point to an object.
   Grammar actions can access the variable by casting it
   to the proper pointer type.  */

#ifdef YYPARSE_PARAM
#ifdef __cplusplus
#define YYPARSE_PARAM_ARG void *YYPARSE_PARAM
#define YYPARSE_PARAM_DECL
#else /* not __cplusplus */
#define YYPARSE_PARAM_ARG YYPARSE_PARAM
#define YYPARSE_PARAM_DECL void *YYPARSE_PARAM;
#endif /* not __cplusplus */
#else /* not YYPARSE_PARAM */
#define YYPARSE_PARAM_ARG
#define YYPARSE_PARAM_DECL
#endif /* not YYPARSE_PARAM */

/* Prevent warning if -Wstrict-prototypes.  */
#ifdef __GNUC__
#ifdef YYPARSE_PARAM
int yyparse (void *);
#else
int yyparse (void);
#endif
#endif

int
yyparse(YYPARSE_PARAM_ARG)
     YYPARSE_PARAM_DECL
{
  register int yystate;
  register int yyn;
  register short *yyssp;
  register YYSTYPE *yyvsp;
  int yyerrstatus;	/*  number of tokens to shift before error messages enabled */
  int yychar1 = 0;		/*  lookahead token as an internal (translated) token number */

  short	yyssa[YYINITDEPTH];	/*  the state stack			*/
  YYSTYPE yyvsa[YYINITDEPTH];	/*  the semantic value stack		*/

  short *yyss = yyssa;		/*  refer to the stacks thru separate pointers */
  YYSTYPE *yyvs = yyvsa;	/*  to allow yyoverflow to reallocate them elsewhere */

#ifdef YYLSP_NEEDED
  YYLTYPE yylsa[YYINITDEPTH];	/*  the location stack			*/
  YYLTYPE *yyls = yylsa;
  YYLTYPE *yylsp;

#define YYPOPSTACK   (yyvsp--, yyssp--, yylsp--)
#else
#define YYPOPSTACK   (yyvsp--, yyssp--)
#endif

  int yystacksize = YYINITDEPTH;
  int yyfree_stacks = 0;

#ifdef YYPURE
  int yychar;
  YYSTYPE yylval;
  int yynerrs;
#ifdef YYLSP_NEEDED
  YYLTYPE yylloc;
#endif
#endif

  YYSTYPE yyval;		/*  the variable used to return		*/
				/*  semantic values from the action	*/
				/*  routines				*/

  int yylen;

#if YYDEBUG != 0
  if (yydebug)
    fprintf(stderr, "Starting parse\n");
#endif

  yystate = 0;
  yyerrstatus = 0;
  yynerrs = 0;
  yychar = YYEMPTY;		/* Cause a token to be read.  */

  /* Initialize stack pointers.
     Waste one element of value and location stack
     so that they stay on the same level as the state stack.
     The wasted elements are never initialized.  */

  yyssp = yyss - 1;
  yyvsp = yyvs;
#ifdef YYLSP_NEEDED
  yylsp = yyls;
#endif

/* Push a new state, which is found in  yystate  .  */
/* In all cases, when you get here, the value and location stacks
   have just been pushed. so pushing a state here evens the stacks.  */
yynewstate:

  *++yyssp = yystate;

  if (yyssp >= yyss + yystacksize - 1)
    {
      /* Give user a chance to reallocate the stack */
      /* Use copies of these so that the &'s don't force the real ones into memory. */
      YYSTYPE *yyvs1 = yyvs;
      short *yyss1 = yyss;
#ifdef YYLSP_NEEDED
      YYLTYPE *yyls1 = yyls;
#endif

      /* Get the current used size of the three stacks, in elements.  */
      int size = yyssp - yyss + 1;

#ifdef yyoverflow
      /* Each stack pointer address is followed by the size of
	 the data in use in that stack, in bytes.  */
#ifdef YYLSP_NEEDED
      /* This used to be a conditional around just the two extra args,
	 but that might be undefined if yyoverflow is a macro.  */
      yyoverflow("parser stack overflow",
		 &yyss1, size * sizeof (*yyssp),
		 &yyvs1, size * sizeof (*yyvsp),
		 &yyls1, size * sizeof (*yylsp),
		 &yystacksize);
#else
      yyoverflow("parser stack overflow",
		 &yyss1, size * sizeof (*yyssp),
		 &yyvs1, size * sizeof (*yyvsp),
		 &yystacksize);
#endif

      yyss = yyss1; yyvs = yyvs1;
#ifdef YYLSP_NEEDED
      yyls = yyls1;
#endif
#else /* no yyoverflow */
      /* Extend the stack our own way.  */
      if (yystacksize >= YYMAXDEPTH)
	{
	  yyerror("parser stack overflow");
	  if (yyfree_stacks)
	    {
	      free (yyss);
	      free (yyvs);
#ifdef YYLSP_NEEDED
	      free (yyls);
#endif
	    }
	  return 2;
	}
      yystacksize *= 2;
      if (yystacksize > YYMAXDEPTH)
	yystacksize = YYMAXDEPTH;
#ifndef YYSTACK_USE_ALLOCA
      yyfree_stacks = 1;
#endif
      yyss = (short *) YYSTACK_ALLOC (yystacksize * sizeof (*yyssp));
      __yy_memcpy ((char *)yyss, (char *)yyss1,
		   size * (unsigned int) sizeof (*yyssp));
      yyvs = (YYSTYPE *) YYSTACK_ALLOC (yystacksize * sizeof (*yyvsp));
      __yy_memcpy ((char *)yyvs, (char *)yyvs1,
		   size * (unsigned int) sizeof (*yyvsp));
#ifdef YYLSP_NEEDED
      yyls = (YYLTYPE *) YYSTACK_ALLOC (yystacksize * sizeof (*yylsp));
      __yy_memcpy ((char *)yyls, (char *)yyls1,
		   size * (unsigned int) sizeof (*yylsp));
#endif
#endif /* no yyoverflow */

      yyssp = yyss + size - 1;
      yyvsp = yyvs + size - 1;
#ifdef YYLSP_NEEDED
      yylsp = yyls + size - 1;
#endif

#if YYDEBUG != 0
      if (yydebug)
	fprintf(stderr, "Stack size increased to %d\n", yystacksize);
#endif

      if (yyssp >= yyss + yystacksize - 1)
	YYABORT;
    }

#if YYDEBUG != 0
  if (yydebug)
    fprintf(stderr, "Entering state %d\n", yystate);
#endif

  goto yybackup;
 yybackup:

/* Do appropriate processing given the current state.  */
/* Read a lookahead token if we need one and don't already have one.  */
/* yyresume: */

  /* First try to decide what to do without reference to lookahead token.  */

  yyn = yypact[yystate];
  if (yyn == YYFLAG)
    goto yydefault;

  /* Not known => get a lookahead token if don't already have one.  */

  /* yychar is either YYEMPTY or YYEOF
     or a valid token in external form.  */

  if (yychar == YYEMPTY)
    {
#if YYDEBUG != 0
      if (yydebug)
	fprintf(stderr, "Reading a token: ");
#endif
      yychar = YYLEX;
    }

  /* Convert token to internal form (in yychar1) for indexing tables with */

  if (yychar <= 0)		/* This means end of input. */
    {
      yychar1 = 0;
      yychar = YYEOF;		/* Don't call YYLEX any more */

#if YYDEBUG != 0
      if (yydebug)
	fprintf(stderr, "Now at end of input.\n");
#endif
    }
  else
    {
      yychar1 = YYTRANSLATE(yychar);

#if YYDEBUG != 0
      if (yydebug)
	{
	  fprintf (stderr, "Next token is %d (%s", yychar, yytname[yychar1]);
	  /* Give the individual parser a way to print the precise meaning
	     of a token, for further debugging info.  */
#ifdef YYPRINT
	  YYPRINT (stderr, yychar, yylval);
#endif
	  fprintf (stderr, ")\n");
	}
#endif
    }

  yyn += yychar1;
  if (yyn < 0 || yyn > YYLAST || yycheck[yyn] != yychar1)
    goto yydefault;

  yyn = yytable[yyn];

  /* yyn is what to do for this token type in this state.
     Negative => reduce, -yyn is rule number.
     Positive => shift, yyn is new state.
       New state is final state => don't bother to shift,
       just return success.
     0, or most negative number => error.  */

  if (yyn < 0)
    {
      if (yyn == YYFLAG)
	goto yyerrlab;
      yyn = -yyn;
      goto yyreduce;
    }
  else if (yyn == 0)
    goto yyerrlab;

  if (yyn == YYFINAL)
    YYACCEPT;

  /* Shift the lookahead token.  */

#if YYDEBUG != 0
  if (yydebug)
    fprintf(stderr, "Shifting token %d (%s), ", yychar, yytname[yychar1]);
#endif

  /* Discard the token being shifted unless it is eof.  */
  if (yychar != YYEOF)
    yychar = YYEMPTY;

  *++yyvsp = yylval;
#ifdef YYLSP_NEEDED
  *++yylsp = yylloc;
#endif

  /* count tokens shifted since error; after three, turn off error status.  */
  if (yyerrstatus) yyerrstatus--;

  yystate = yyn;
  goto yynewstate;

/* Do the default action for the current state.  */
yydefault:

  yyn = yydefact[yystate];
  if (yyn == 0)
    goto yyerrlab;

/* Do a reduction.  yyn is the number of a rule to reduce with.  */
yyreduce:
  yylen = yyr2[yyn];
  if (yylen > 0)
    yyval = yyvsp[1-yylen]; /* implement default value of the action */

#if YYDEBUG != 0
  if (yydebug)
    {
      int i;

      fprintf (stderr, "Reducing via rule %d (line %d), ",
	       yyn, yyrline[yyn]);

      /* Print the symbols being reduced, and their result.  */
      for (i = yyprhs[yyn]; yyrhs[i] > 0; i++)
	fprintf (stderr, "%s ", yytname[yyrhs[i]]);
      fprintf (stderr, " -> %s\n", yytname[yyr1[yyn]]);
    }
#endif


  switch (yyn) {

case 3:
#line 48 "defparse.y"
{ def_name (yyvsp[-1].id, yyvsp[0].number); ;
    break;}
case 4:
#line 49 "defparse.y"
{ def_library (yyvsp[-2].id, yyvsp[-1].number); ;
    break;}
case 6:
#line 51 "defparse.y"
{ def_description (yyvsp[0].id);;
    break;}
case 7:
#line 52 "defparse.y"
{ def_stacksize (yyvsp[-1].number, yyvsp[0].number);;
    break;}
case 8:
#line 53 "defparse.y"
{ def_heapsize (yyvsp[-1].number, yyvsp[0].number);;
    break;}
case 9:
#line 54 "defparse.y"
{ def_code (yyvsp[0].number);;
    break;}
case 10:
#line 55 "defparse.y"
{ def_data (yyvsp[0].number);;
    break;}
case 13:
#line 58 "defparse.y"
{ def_version (yyvsp[0].number,0);;
    break;}
case 14:
#line 59 "defparse.y"
{ def_version (yyvsp[-2].number,yyvsp[0].number);;
    break;}
case 17:
#line 70 "defparse.y"
{ def_exports (yyvsp[-5].id, yyvsp[-4].id, yyvsp[-3].number, yyvsp[-2].number, yyvsp[-1].number, yyvsp[0].number);;
    break;}
case 20:
#line 78 "defparse.y"
{ def_import (yyvsp[-6].id,yyvsp[-4].id,yyvsp[-2].id,yyvsp[0].id, 0); ;
    break;}
case 21:
#line 79 "defparse.y"
{ def_import (yyvsp[-6].id,yyvsp[-4].id,yyvsp[-2].id, 0,yyvsp[0].number); ;
    break;}
case 22:
#line 80 "defparse.y"
{ def_import (yyvsp[-4].id,yyvsp[-2].id, 0,yyvsp[0].id, 0); ;
    break;}
case 23:
#line 81 "defparse.y"
{ def_import (yyvsp[-4].id,yyvsp[-2].id, 0, 0,yyvsp[0].number); ;
    break;}
case 24:
#line 82 "defparse.y"
{ def_import ( 0,yyvsp[-4].id,yyvsp[-2].id,yyvsp[0].id, 0); ;
    break;}
case 25:
#line 83 "defparse.y"
{ def_import ( 0,yyvsp[-4].id,yyvsp[-2].id, 0,yyvsp[0].number); ;
    break;}
case 26:
#line 84 "defparse.y"
{ def_import ( 0,yyvsp[-2].id, 0,yyvsp[0].id, 0); ;
    break;}
case 27:
#line 85 "defparse.y"
{ def_import ( 0,yyvsp[-2].id, 0, 0,yyvsp[0].number); ;
    break;}
case 30:
#line 94 "defparse.y"
{ def_section (yyvsp[-1].id,yyvsp[0].number);;
    break;}
case 35:
#line 106 "defparse.y"
{ yyval.number=yyvsp[0].number;;
    break;}
case 36:
#line 107 "defparse.y"
{ yyval.number=-1;;
    break;}
case 37:
#line 111 "defparse.y"
{ yyval.number = 1; ;
    break;}
case 38:
#line 112 "defparse.y"
{ yyval.number = 2; ;
    break;}
case 39:
#line 113 "defparse.y"
{ yyval.number = 4; ;
    break;}
case 40:
#line 114 "defparse.y"
{ yyval.number = 8; ;
    break;}
case 41:
#line 115 "defparse.y"
{ yyval.number = 0; ;
    break;}
case 42:
#line 116 "defparse.y"
{ yyval.number = 0; ;
    break;}
case 43:
#line 117 "defparse.y"
{ yyval.number = 0; ;
    break;}
case 44:
#line 121 "defparse.y"
{yyval.number=1;;
    break;}
case 45:
#line 122 "defparse.y"
{yyval.number=0;;
    break;}
case 46:
#line 126 "defparse.y"
{yyval.number=1;;
    break;}
case 47:
#line 127 "defparse.y"
{yyval.number=0;;
    break;}
case 48:
#line 131 "defparse.y"
{ yyval.number = 1; ;
    break;}
case 49:
#line 132 "defparse.y"
{ yyval.number = 0; ;
    break;}
case 50:
#line 135 "defparse.y"
{ yyval.id =yyvsp[0].id; ;
    break;}
case 51:
#line 137 "defparse.y"
{ 
	    char *name = xmalloc (strlen (yyvsp[-2].id) + 1 + strlen (yyvsp[0].id) + 1);
	    sprintf (name, "%s.%s", yyvsp[-2].id, yyvsp[0].id);
	    yyval.id = name;
	  ;
    break;}
case 52:
#line 142 "defparse.y"
{ yyval.id=""; ;
    break;}
case 53:
#line 146 "defparse.y"
{ yyval.number=yyvsp[0].number;;
    break;}
case 54:
#line 147 "defparse.y"
{ yyval.number=-1;;
    break;}
case 55:
#line 151 "defparse.y"
{ yyval.id = yyvsp[0].id; ;
    break;}
case 56:
#line 152 "defparse.y"
{ yyval.id =  0; ;
    break;}
case 57:
#line 155 "defparse.y"
{ yyval.number= yyvsp[0].number;;
    break;}
case 58:
#line 156 "defparse.y"
{ yyval.number=-1;;
    break;}
}
   /* the action file gets copied in in place of this dollarsign */
#line 543 "/usr/share/misc/bison.simple"

  yyvsp -= yylen;
  yyssp -= yylen;
#ifdef YYLSP_NEEDED
  yylsp -= yylen;
#endif

#if YYDEBUG != 0
  if (yydebug)
    {
      short *ssp1 = yyss - 1;
      fprintf (stderr, "state stack now");
      while (ssp1 != yyssp)
	fprintf (stderr, " %d", *++ssp1);
      fprintf (stderr, "\n");
    }
#endif

  *++yyvsp = yyval;

#ifdef YYLSP_NEEDED
  yylsp++;
  if (yylen == 0)
    {
      yylsp->first_line = yylloc.first_line;
      yylsp->first_column = yylloc.first_column;
      yylsp->last_line = (yylsp-1)->last_line;
      yylsp->last_column = (yylsp-1)->last_column;
      yylsp->text = 0;
    }
  else
    {
      yylsp->last_line = (yylsp+yylen-1)->last_line;
      yylsp->last_column = (yylsp+yylen-1)->last_column;
    }
#endif

  /* Now "shift" the result of the reduction.
     Determine what state that goes to,
     based on the state we popped back to
     and the rule number reduced by.  */

  yyn = yyr1[yyn];

  yystate = yypgoto[yyn - YYNTBASE] + *yyssp;
  if (yystate >= 0 && yystate <= YYLAST && yycheck[yystate] == *yyssp)
    yystate = yytable[yystate];
  else
    yystate = yydefgoto[yyn - YYNTBASE];

  goto yynewstate;

yyerrlab:   /* here on detecting error */

  if (! yyerrstatus)
    /* If not already recovering from an error, report this error.  */
    {
      ++yynerrs;

#ifdef YYERROR_VERBOSE
      yyn = yypact[yystate];

      if (yyn > YYFLAG && yyn < YYLAST)
	{
	  int size = 0;
	  char *msg;
	  int x, count;

	  count = 0;
	  /* Start X at -yyn if nec to avoid negative indexes in yycheck.  */
	  for (x = (yyn < 0 ? -yyn : 0);
	       x < (sizeof(yytname) / sizeof(char *)); x++)
	    if (yycheck[x + yyn] == x)
	      size += strlen(yytname[x]) + 15, count++;
	  msg = (char *) malloc(size + 15);
	  if (msg != 0)
	    {
	      strcpy(msg, "parse error");

	      if (count < 5)
		{
		  count = 0;
		  for (x = (yyn < 0 ? -yyn : 0);
		       x < (sizeof(yytname) / sizeof(char *)); x++)
		    if (yycheck[x + yyn] == x)
		      {
			strcat(msg, count == 0 ? ", expecting `" : " or `");
			strcat(msg, yytname[x]);
			strcat(msg, "'");
			count++;
		      }
		}
	      yyerror(msg);
	      free(msg);
	    }
	  else
	    yyerror ("parse error; also virtual memory exceeded");
	}
      else
#endif /* YYERROR_VERBOSE */
	yyerror("parse error");
    }

  goto yyerrlab1;
yyerrlab1:   /* here on error raised explicitly by an action */

  if (yyerrstatus == 3)
    {
      /* if just tried and failed to reuse lookahead token after an error, discard it.  */

      /* return failure if at end of input */
      if (yychar == YYEOF)
	YYABORT;

#if YYDEBUG != 0
      if (yydebug)
	fprintf(stderr, "Discarding token %d (%s).\n", yychar, yytname[yychar1]);
#endif

      yychar = YYEMPTY;
    }

  /* Else will try to reuse lookahead token
     after shifting the error token.  */

  yyerrstatus = 3;		/* Each real token shifted decrements this */

  goto yyerrhandle;

yyerrdefault:  /* current state does not do anything special for the error token. */

#if 0
  /* This is wrong; only states that explicitly want error tokens
     should shift them.  */
  yyn = yydefact[yystate];  /* If its default is to accept any token, ok.  Otherwise pop it.*/
  if (yyn) goto yydefault;
#endif

yyerrpop:   /* pop the current state because it cannot handle the error token */

  if (yyssp == yyss) YYABORT;
  yyvsp--;
  yystate = *--yyssp;
#ifdef YYLSP_NEEDED
  yylsp--;
#endif

#if YYDEBUG != 0
  if (yydebug)
    {
      short *ssp1 = yyss - 1;
      fprintf (stderr, "Error: state stack now");
      while (ssp1 != yyssp)
	fprintf (stderr, " %d", *++ssp1);
      fprintf (stderr, "\n");
    }
#endif

yyerrhandle:

  yyn = yypact[yystate];
  if (yyn == YYFLAG)
    goto yyerrdefault;

  yyn += YYTERROR;
  if (yyn < 0 || yyn > YYLAST || yycheck[yyn] != YYTERROR)
    goto yyerrdefault;

  yyn = yytable[yyn];
  if (yyn < 0)
    {
      if (yyn == YYFLAG)
	goto yyerrpop;
      yyn = -yyn;
      goto yyreduce;
    }
  else if (yyn == 0)
    goto yyerrpop;

  if (yyn == YYFINAL)
    YYACCEPT;

#if YYDEBUG != 0
  if (yydebug)
    fprintf(stderr, "Shifting error token, ");
#endif

  *++yyvsp = yylval;
#ifdef YYLSP_NEEDED
  *++yylsp = yylloc;
#endif

  yystate = yyn;
  goto yynewstate;

 yyacceptlab:
  /* YYACCEPT comes here.  */
  if (yyfree_stacks)
    {
      free (yyss);
      free (yyvs);
#ifdef YYLSP_NEEDED
      free (yyls);
#endif
    }
  return 0;

 yyabortlab:
  /* YYABORT comes here.  */
  if (yyfree_stacks)
    {
      free (yyss);
      free (yyvs);
#ifdef YYLSP_NEEDED
      free (yyls);
#endif
    }
  return 1;
}
#line 170 "defparse.y"
@


1.1.1.1
log
@Import binutils-2.10
- only the binutils package (no gdb here)
- don't import libiberty and texinfo, they are elsewhere
- remove all .info* generated files
@
text
@@


1.1.1.2
log
@Import binutils-2.11.2
- only the binutils package (no gdb here)
- don't import libiberty and texinfo, they are elsewhere
- remove all .info* generated files
@
text
@d38 1
a38 1
/*   Copyright 1995, 1997, 1998, 1999 Free Software Foundation, Inc.
d262 1
a262 1
#line 3 "/usr/share/bison/bison.simple"
d476 1
a476 1
#line 217 "/usr/share/bison/bison.simple"
d982 1
a982 1
#line 543 "/usr/share/bison/bison.simple"
@


1.1.1.3
log
@import binutils 2.14 (excluding testsuites, .info files, and .po files)
@
text
@d1 3
a3 2
/* A Bison parser, made from defparse.y
   by GNU bison 1.35.  */
d7 27
a33 27
# define	NAME	257
# define	LIBRARY	258
# define	DESCRIPTION	259
# define	STACKSIZE	260
# define	HEAPSIZE	261
# define	CODE	262
# define	DATA	263
# define	SECTIONS	264
# define	EXPORTS	265
# define	IMPORTS	266
# define	VERSIONK	267
# define	BASE	268
# define	CONSTANT	269
# define	READ	270
# define	WRITE	271
# define	EXECUTE	272
# define	SHARED	273
# define	NONSHARED	274
# define	NONAME	275
# define	SINGLE	276
# define	MULTIPLE	277
# define	INITINSTANCE	278
# define	INITGLOBAL	279
# define	TERMINSTANCE	280
# define	TERMGLOBAL	281
# define	ID	282
# define	NUMBER	283
a60 1
#ifndef YYSTYPE
d64 6
a69 3
} yystype;
# define YYSTYPE yystype
# define YYSTYPE_IS_TRIVIAL 1
a70 2
#ifndef YYDEBUG
# define YYDEBUG 0
d75 1
a75 1
#define	YYFINAL		96
a78 1
/* YYTRANSLATE(YYLEX) -- Bison token number corresponding to YYLEX. */
d81 30
a110 32
/* YYTRANSLATE[YYLEX] -- Bison token number corresponding to YYLEX. */
static const char yytranslate[] =
{
       0,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,    32,     2,    30,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,    31,     2,     2,    33,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     1,     3,     4,     5,
       6,     7,     8,     9,    10,    11,    12,    13,    14,    15,
      16,    17,    18,    19,    20,    21,    22,    23,    24,    25,
      26,    27,    28,    29
d113 9
a121 10
#if YYDEBUG
static const short yyprhs[] =
{
       0,     0,     3,     5,     9,    14,    17,    20,    24,    28,
      31,    34,    37,    40,    43,    48,    49,    52,    59,    62,
      64,    72,    80,    86,    92,    98,   104,   108,   112,   115,
     117,   120,   124,   126,   128,   129,   132,   133,   135,   137,
     139,   141,   143,   145,   147,   149,   150,   152,   153,   155,
     156,   158,   162,   163,   166,   167,   170,   175,   176,   180,
     181,   182,   186,   188,   190,   192
d123 21
a143 22
static const short yyrhs[] =
{
      34,    35,     0,    35,     0,     3,    49,    52,     0,     4,
      49,    52,    53,     0,    11,    36,     0,     5,    28,     0,
       6,    29,    44,     0,     7,    29,    44,     0,     8,    42,
       0,     9,    42,     0,    10,    40,     0,    12,    38,     0,
      13,    29,     0,    13,    29,    30,    29,     0,     0,    36,
      37,     0,    28,    51,    50,    47,    46,    48,     0,    38,
      39,     0,    39,     0,    28,    31,    28,    30,    28,    30,
      28,     0,    28,    31,    28,    30,    28,    30,    29,     0,
      28,    31,    28,    30,    28,     0,    28,    31,    28,    30,
      29,     0,    28,    30,    28,    30,    28,     0,    28,    30,
      28,    30,    29,     0,    28,    30,    28,     0,    28,    30,
      29,     0,    40,    41,     0,    41,     0,    28,    42,     0,
      42,    43,    45,     0,    45,     0,    32,     0,     0,    32,
      29,     0,     0,    16,     0,    17,     0,    18,     0,    19,
       0,    20,     0,    22,     0,    23,     0,    15,     0,     0,
      21,     0,     0,     9,     0,     0,    28,     0,    28,    30,
      28,     0,     0,    33,    29,     0,     0,    31,    28,     0,
      31,    28,    30,    28,     0,     0,    14,    31,    29,     0,
       0,     0,    53,    43,    54,     0,    24,     0,    25,     0,
      26,     0,    27,     0
d148 9
a156 11
#if YYDEBUG
/* YYRLINE[YYN] -- source line where rule number YYN was defined. */
static const short yyrline[] =
{
       0,    43,    44,    47,    49,    50,    51,    52,    53,    54,
      55,    56,    57,    58,    59,    63,    65,    68,    72,    74,
      77,    79,    80,    81,    82,    83,    84,    85,    88,    90,
      93,    97,    99,   102,   104,   106,   107,   110,   112,   113,
     114,   115,   116,   117,   120,   122,   125,   127,   130,   132,
     135,   136,   142,   145,   147,   150,   152,   158,   161,   162,
     165,   167,   170,   172,   173,   174
d161 1
a161 1
#if (YYDEBUG) || defined YYERROR_VERBOSE
d163 8
a170 13
/* YYTNAME[TOKEN_NUM] -- String name of the token TOKEN_NUM. */
static const char *const yytname[] =
{
  "$", "error", "$undefined.", "NAME", "LIBRARY", "DESCRIPTION", 
  "STACKSIZE", "HEAPSIZE", "CODE", "DATA", "SECTIONS", "EXPORTS", 
  "IMPORTS", "VERSIONK", "BASE", "CONSTANT", "READ", "WRITE", "EXECUTE", 
  "SHARED", "NONSHARED", "NONAME", "SINGLE", "MULTIPLE", "INITINSTANCE", 
  "INITGLOBAL", "TERMINSTANCE", "TERMGLOBAL", "ID", "NUMBER", "'.'", 
  "'='", "','", "'@@'", "start", "command", "explist", "expline", 
  "implist", "impline", "seclist", "secline", "attr_list", "opt_comma", 
  "opt_number", "attr", "opt_CONSTANT", "opt_NONAME", "opt_DATA", 
  "opt_name", "opt_ordinal", "opt_equal_name", "opt_base", "option_list", 
  "option", 0
d174 8
a181 10
/* YYR1[YYN] -- Symbol number of symbol that rule YYN derives. */
static const short yyr1[] =
{
       0,    34,    34,    35,    35,    35,    35,    35,    35,    35,
      35,    35,    35,    35,    35,    36,    36,    37,    38,    38,
      39,    39,    39,    39,    39,    39,    39,    39,    40,    40,
      41,    42,    42,    43,    43,    44,    44,    45,    45,    45,
      45,    45,    45,    45,    46,    46,    47,    47,    48,    48,
      49,    49,    49,    50,    50,    51,    51,    51,    52,    52,
      53,    53,    54,    54,    54,    54
d184 8
a191 10
/* YYR2[YYN] -- Number of symbols composing right hand side of rule YYN. */
static const short yyr2[] =
{
       0,     2,     1,     3,     4,     2,     2,     3,     3,     2,
       2,     2,     2,     2,     4,     0,     2,     6,     2,     1,
       7,     7,     5,     5,     5,     5,     3,     3,     2,     1,
       2,     3,     1,     1,     0,     2,     0,     1,     1,     1,
       1,     1,     1,     1,     1,     0,     1,     0,     1,     0,
       1,     3,     0,     2,     0,     2,     4,     0,     3,     0,
       0,     3,     1,     1,     1,     1
d194 11
a204 15
/* YYDEFACT[S] -- default rule to reduce with in state S when YYTABLE
   doesn't specify something else to do.  Zero means the default is an
   error. */
static const short yydefact[] =
{
       0,    52,    52,     0,     0,     0,     0,     0,     0,    15,
       0,     0,     0,     2,    50,    59,    59,     6,    36,    36,
      37,    38,    39,    40,    41,    42,    43,     9,    32,    10,
       0,    11,    29,     5,     0,    12,    19,    13,     1,     0,
       0,     3,    60,     0,     7,     8,    33,     0,    30,    28,
      57,    16,     0,     0,    18,     0,    51,     0,     4,    35,
      31,     0,    54,    26,    27,     0,    14,    58,     0,    55,
       0,    47,     0,     0,    62,    63,    64,    65,    61,     0,
      53,    46,    45,    24,    25,    22,    23,    56,    44,    49,
       0,    48,    17,    20,    21,     0,     0
d207 3
a209 5
static const short yydefgoto[] =
{
      12,    13,    33,    51,    35,    36,    31,    32,    27,    47,
      44,    28,    89,    82,    92,    15,    71,    62,    41,    58,
      78
d212 11
a222 12
static const short yypact[] =
{
      32,   -22,   -22,   -19,   -13,    22,    30,    30,    -6,-32768,
      26,    38,    21,-32768,    29,    46,    46,-32768,    36,    36,
  -32768,-32768,-32768,-32768,-32768,-32768,-32768,   -15,-32768,   -15,
      30,    -6,-32768,    41,   -16,    26,-32768,    40,-32768,    43,
      42,-32768,-32768,    45,-32768,-32768,-32768,    30,   -15,-32768,
      44,-32768,    -9,    48,-32768,    49,-32768,    50,   -14,-32768,
  -32768,    52,    39,    47,-32768,    51,-32768,-32768,    31,    53,
      55,    61,    33,    35,-32768,-32768,-32768,-32768,-32768,    57,
  -32768,-32768,    71,-32768,-32768,    58,-32768,-32768,-32768,    78,
      37,-32768,-32768,-32768,-32768,    89,-32768
d225 3
a227 5
static const short yypgoto[] =
{
  -32768,    79,-32768,-32768,-32768,    59,-32768,    62,    -7,    34,
      76,    54,-32768,-32768,-32768,    88,-32768,-32768,    80,-32768,
  -32768
d231 1
a231 1
#define	YYLAST		101
d234 12
a245 13
static const short yytable[] =
{
      29,   -34,   -34,   -34,   -34,   -34,    14,   -34,   -34,    17,
     -34,   -34,   -34,   -34,    52,    53,    18,    46,    46,    63,
      64,    95,    30,    48,     1,     2,     3,     4,     5,     6,
       7,     8,     9,    10,    11,     1,     2,     3,     4,     5,
       6,     7,     8,     9,    10,    11,    20,    21,    22,    23,
      24,    19,    25,    26,    34,    74,    75,    76,    77,    39,
      40,    83,    84,    85,    86,    93,    94,    37,    43,    50,
      55,    56,    70,    57,    59,    61,    65,    72,    66,    67,
      69,    73,    81,    79,    80,    87,    88,    91,    90,    96,
      16,    38,    68,    49,    54,    45,    42,     0,     0,     0,
       0,    60
d248 12
a259 13
static const short yycheck[] =
{
       7,    16,    17,    18,    19,    20,    28,    22,    23,    28,
      24,    25,    26,    27,    30,    31,    29,    32,    32,    28,
      29,     0,    28,    30,     3,     4,     5,     6,     7,     8,
       9,    10,    11,    12,    13,     3,     4,     5,     6,     7,
       8,     9,    10,    11,    12,    13,    16,    17,    18,    19,
      20,    29,    22,    23,    28,    24,    25,    26,    27,    30,
      14,    28,    29,    28,    29,    28,    29,    29,    32,    28,
      30,    28,    33,    31,    29,    31,    28,    30,    29,    29,
      28,    30,    21,    30,    29,    28,    15,     9,    30,     0,
       2,    12,    58,    31,    35,    19,    16,    -1,    -1,    -1,
      -1,    47
d262 2
a263 1
#line 3 "/usr/share/bison-1.35/bison.simple"
d266 1
a266 3

   Copyright (C) 1984, 1989, 1990, 2000, 2001, 2002 Free Software
   Foundation, Inc.
d288 46
a333 47
/* This is the parser code that is written into each bison parser when
   the %semantic_parser declaration is not specified in the grammar.
   It was written by Richard Stallman by simplifying the hairy parser
   used when %semantic_parser is specified.  */

/* All symbols defined below should begin with yy or YY, to avoid
   infringing on user name space.  This should be done even for local
   variables, as they might otherwise be expanded by user macros.
   There are some unavoidable exceptions within include files to
   define necessary library symbols; they are noted "INFRINGES ON
   USER NAME SPACE" below.  */

#if ! defined (yyoverflow) || defined (YYERROR_VERBOSE)

/* The parser invokes alloca or malloc; define the necessary symbols.  */

# if YYSTACK_USE_ALLOCA
#  define YYSTACK_ALLOC alloca
# else
#  ifndef YYSTACK_USE_ALLOCA
#   if defined (alloca) || defined (_ALLOCA_H)
#    define YYSTACK_ALLOC alloca
#   else
#    ifdef __GNUC__
#     define YYSTACK_ALLOC __builtin_alloca
#    endif
#   endif
#  endif
# endif

# ifdef YYSTACK_ALLOC
   /* Pacify GCC's `empty if-body' warning. */
#  define YYSTACK_FREE(Ptr) do { /* empty */; } while (0)
# else
#  if defined (__STDC__) || defined (__cplusplus)
#   include <stdlib.h> /* INFRINGES ON USER NAME SPACE */
#   define YYSIZE_T size_t
#  endif
#  define YYSTACK_ALLOC malloc
#  define YYSTACK_FREE free
# endif
#endif /* ! defined (yyoverflow) || defined (YYERROR_VERBOSE) */


#if (! defined (yyoverflow) \
     && (! defined (__cplusplus) \
	 || (YYLTYPE_IS_TRIVIAL && YYSTYPE_IS_TRIVIAL)))
d335 5
a339 12
/* A type that is properly aligned for any stack member.  */
union yyalloc
{
  short yyss;
  YYSTYPE yyvs;
# if YYLSP_NEEDED
  YYLTYPE yyls;
# endif
};

/* The size of the maximum gap between one aligned stack and the next.  */
# define YYSTACK_GAP_MAX (sizeof (union yyalloc) - 1)
d341 3
a343 64
/* The size of an array large to enough to hold all stacks, each with
   N elements.  */
# if YYLSP_NEEDED
#  define YYSTACK_BYTES(N) \
     ((N) * (sizeof (short) + sizeof (YYSTYPE) + sizeof (YYLTYPE))	\
      + 2 * YYSTACK_GAP_MAX)
# else
#  define YYSTACK_BYTES(N) \
     ((N) * (sizeof (short) + sizeof (YYSTYPE))				\
      + YYSTACK_GAP_MAX)
# endif

/* Copy COUNT objects from FROM to TO.  The source and destination do
   not overlap.  */
# ifndef YYCOPY
#  if 1 < __GNUC__
#   define YYCOPY(To, From, Count) \
      __builtin_memcpy (To, From, (Count) * sizeof (*(From)))
#  else
#   define YYCOPY(To, From, Count)		\
      do					\
	{					\
	  register YYSIZE_T yyi;		\
	  for (yyi = 0; yyi < (Count); yyi++)	\
	    (To)[yyi] = (From)[yyi];		\
	}					\
      while (0)
#  endif
# endif

/* Relocate STACK from its old location to the new one.  The
   local variables YYSIZE and YYSTACKSIZE give the old and new number of
   elements in the stack, and YYPTR gives the new location of the
   stack.  Advance YYPTR to a properly aligned location for the next
   stack.  */
# define YYSTACK_RELOCATE(Stack)					\
    do									\
      {									\
	YYSIZE_T yynewbytes;						\
	YYCOPY (&yyptr->Stack, Stack, yysize);				\
	Stack = &yyptr->Stack;						\
	yynewbytes = yystacksize * sizeof (*Stack) + YYSTACK_GAP_MAX;	\
	yyptr += yynewbytes / sizeof (*yyptr);				\
      }									\
    while (0)

#endif


#if ! defined (YYSIZE_T) && defined (__SIZE_TYPE__)
# define YYSIZE_T __SIZE_TYPE__
#endif
#if ! defined (YYSIZE_T) && defined (size_t)
# define YYSIZE_T size_t
#endif
#if ! defined (YYSIZE_T)
# if defined (__STDC__) || defined (__cplusplus)
#  include <stddef.h> /* INFRINGES ON USER NAME SPACE */
#  define YYSIZE_T size_t
# endif
#endif
#if ! defined (YYSIZE_T)
# define YYSIZE_T unsigned int
#endif
d352 3
a354 2
/* Like YYERROR except do call yyerror.  This remains here temporarily
   to ease the transition to the new meaning of YYERROR, for GCC.
d358 1
a358 1
#define YYBACKUP(Token, Value)					\
d361 1
a361 3
    {								\
      yychar = (Token);						\
      yylval = (Value);						\
d367 1
a367 4
    { 								\
      yyerror ("syntax error: cannot back up");			\
      YYERROR;							\
    }								\
d373 23
d397 3
a399 2
/* YYLLOC_DEFAULT -- Compute the default location (before the actions
   are run).
d401 3
a403 8
   When YYLLOC_DEFAULT is run, CURRENT is set the location of the
   first token.  By default, to implement support for ranges, extend
   its range to the last symbol.  */

#ifndef YYLLOC_DEFAULT
# define YYLLOC_DEFAULT(Current, Rhs, N)       	\
   Current.last_line   = Rhs[N].last_line;	\
   Current.last_column = Rhs[N].last_column;
d406 2
d409 7
a415 40
/* YYLEX -- calling `yylex' with the right arguments.  */

#if YYPURE
# if YYLSP_NEEDED
#  ifdef YYLEX_PARAM
#   define YYLEX		yylex (&yylval, &yylloc, YYLEX_PARAM)
#  else
#   define YYLEX		yylex (&yylval, &yylloc)
#  endif
# else /* !YYLSP_NEEDED */
#  ifdef YYLEX_PARAM
#   define YYLEX		yylex (&yylval, YYLEX_PARAM)
#  else
#   define YYLEX		yylex (&yylval)
#  endif
# endif /* !YYLSP_NEEDED */
#else /* !YYPURE */
# define YYLEX			yylex ()
#endif /* !YYPURE */


/* Enable debugging if requested.  */
#if YYDEBUG

# ifndef YYFPRINTF
#  include <stdio.h> /* INFRINGES ON USER NAME SPACE */
#  define YYFPRINTF fprintf
# endif

# define YYDPRINTF(Args)			\
do {						\
  if (yydebug)					\
    YYFPRINTF Args;				\
} while (0)
/* Nonzero means print parse trace.  It is left uninitialized so that
   multiple parsers can coexist.  */
int yydebug;
#else /* !YYDEBUG */
# define YYDPRINTF(Args)
#endif /* !YYDEBUG */
a416 1
/* YYINITDEPTH -- initial size of the parser's stacks.  */
d418 1
a418 1
# define YYINITDEPTH 200
d421 2
a422 6
/* YYMAXDEPTH -- maximum size the stacks can grow to (effective only
   if the built-in stack extension method is used).

   Do not make this value too large; the results are undefined if
   SIZE_MAX < YYSTACK_BYTES (YYMAXDEPTH)
   evaluated with infinite-precision integer arithmetic.  */
d425 1
a425 1
# undef YYMAXDEPTH
d429 1
a429 1
# define YYMAXDEPTH 10000
d432 17
a448 14
#ifdef YYERROR_VERBOSE

# ifndef yystrlen
#  if defined (__GLIBC__) && defined (_STRING_H)
#   define yystrlen strlen
#  else
/* Return the length of YYSTR.  */
static YYSIZE_T
#   if defined (__STDC__) || defined (__cplusplus)
yystrlen (const char *yystr)
#   else
yystrlen (yystr)
     const char *yystr;
#   endif
d450 3
a452 1
  register const char *yys = yystr;
d454 3
a456 2
  while (*yys++ != '\0')
    continue;
d458 1
a458 4
  return yys - yystr - 1;
}
#  endif
# endif
d460 4
a463 14
# ifndef yystpcpy
#  if defined (__GLIBC__) && defined (_STRING_H) && defined (_GNU_SOURCE)
#   define yystpcpy stpcpy
#  else
/* Copy YYSRC to YYDEST, returning the address of the terminating '\0' in
   YYDEST.  */
static char *
#   if defined (__STDC__) || defined (__cplusplus)
yystpcpy (char *yydest, const char *yysrc)
#   else
yystpcpy (yydest, yysrc)
     char *yydest;
     const char *yysrc;
#   endif
d465 3
a467 2
  register char *yyd = yydest;
  register const char *yys = yysrc;
d469 3
a471 2
  while ((*yyd++ = *yys++) != '\0')
    continue;
d473 1
a473 4
  return yyd - 1;
}
#  endif
# endif
d476 1
a476 2
#line 315 "/usr/share/bison-1.35/bison.simple"

d485 11
a495 11
# if defined (__STDC__) || defined (__cplusplus)
#  define YYPARSE_PARAM_ARG void *YYPARSE_PARAM
#  define YYPARSE_PARAM_DECL
# else
#  define YYPARSE_PARAM_ARG YYPARSE_PARAM
#  define YYPARSE_PARAM_DECL void *YYPARSE_PARAM;
# endif
#else /* !YYPARSE_PARAM */
# define YYPARSE_PARAM_ARG
# define YYPARSE_PARAM_DECL
#endif /* !YYPARSE_PARAM */
d499 1
a499 1
# ifdef YYPARSE_PARAM
d501 1
a501 1
# else
a502 1
# endif
a503 23

/* YY_DECL_VARIABLES -- depending whether we use a pure parser,
   variables are global, or local to YYPARSE.  */

#define YY_DECL_NON_LSP_VARIABLES			\
/* The lookahead symbol.  */				\
int yychar;						\
							\
/* The semantic value of the lookahead symbol. */	\
YYSTYPE yylval;						\
							\
/* Number of parse errors so far.  */			\
int yynerrs;

#if YYLSP_NEEDED
# define YY_DECL_VARIABLES			\
YY_DECL_NON_LSP_VARIABLES			\
						\
/* Location data for the lookahead symbol.  */	\
YYLTYPE yylloc;
#else
# define YY_DECL_VARIABLES			\
YY_DECL_NON_LSP_VARIABLES
a505 7

/* If nonreentrant, generate the variables here. */

#if !YYPURE
YY_DECL_VARIABLES
#endif  /* !YYPURE */

d507 1
a507 1
yyparse (YYPARSE_PARAM_ARG)
a509 5
  /* If reentrant, generate the variables here. */
#if YYPURE
  YY_DECL_VARIABLES
#endif  /* !YYPURE */

a511 17
  int yyresult;
  /* Number of tokens to shift before error messages enabled.  */
  int yyerrstatus;
  /* Lookahead token as an internal (translated) token number.  */
  int yychar1 = 0;

  /* Three stacks and their tools:
     `yyss': related to states,
     `yyvs': related to semantic values,
     `yyls': related to locations.

     Refer to the stacks thru separate pointers, to allow yyoverflow
     to reallocate them elsewhere.  */

  /* The state stack. */
  short	yyssa[YYINITDEPTH];
  short *yyss = yyssa;
d513 6
d520 2
a521 4
  /* The semantic value stack.  */
  YYSTYPE yyvsa[YYINITDEPTH];
  YYSTYPE *yyvs = yyvsa;
  register YYSTYPE *yyvsp;
d523 2
a524 3
#if YYLSP_NEEDED
  /* The location stack.  */
  YYLTYPE yylsa[YYINITDEPTH];
a526 1
#endif
d528 1
a528 2
#if YYLSP_NEEDED
# define YYPOPSTACK   (yyvsp--, yyssp--, yylsp--)
d530 1
a530 1
# define YYPOPSTACK   (yyvsp--, yyssp--)
d533 2
a534 1
  YYSIZE_T yystacksize = YYINITDEPTH;
d536 8
d545 3
a547 6
  /* The variables used to return semantic value and location from the
     action routines.  */
  YYSTYPE yyval;
#if YYLSP_NEEDED
  YYLTYPE yyloc;
#endif
a548 2
  /* When reducing, the number of symbols on the RHS of the reduced
     rule. */
d551 4
a554 1
  YYDPRINTF ((stderr, "Starting parse\n"));
d566 1
a566 1
  yyssp = yyss;
d568 1
a568 1
#if YYLSP_NEEDED
a570 1
  goto yysetstate;
d572 4
a575 8
/*------------------------------------------------------------.
| yynewstate -- Push a new state, which is found in yystate.  |
`------------------------------------------------------------*/
 yynewstate:
  /* In all cases, when you get here, the value and location stacks
     have just been pushed. so pushing a state here evens the stacks.
     */
  yyssp++;
d577 1
a577 2
 yysetstate:
  *yyssp = yystate;
d581 8
d590 1
a590 1
      YYSIZE_T yysize = yyssp - yyss + 1;
d593 21
a613 28
      {
	/* Give user a chance to reallocate the stack. Use copies of
	   these so that the &'s don't force the real ones into
	   memory.  */
	YYSTYPE *yyvs1 = yyvs;
	short *yyss1 = yyss;

	/* Each stack pointer address is followed by the size of the
	   data in use in that stack, in bytes.  */
# if YYLSP_NEEDED
	YYLTYPE *yyls1 = yyls;
	/* This used to be a conditional around just the two extra args,
	   but that might be undefined if yyoverflow is a macro.  */
	yyoverflow ("parser stack overflow",
		    &yyss1, yysize * sizeof (*yyssp),
		    &yyvs1, yysize * sizeof (*yyvsp),
		    &yyls1, yysize * sizeof (*yylsp),
		    &yystacksize);
	yyls = yyls1;
# else
	yyoverflow ("parser stack overflow",
		    &yyss1, yysize * sizeof (*yyssp),
		    &yyvs1, yysize * sizeof (*yyvsp),
		    &yystacksize);
# endif
	yyss = yyss1;
	yyvs = yyvs1;
      }
a614 3
# ifndef YYSTACK_RELOCATE
      goto yyoverflowlab;
# else
d617 12
a628 1
	goto yyoverflowlab;
d632 14
a645 17

      {
	short *yyss1 = yyss;
	union yyalloc *yyptr =
	  (union yyalloc *) YYSTACK_ALLOC (YYSTACK_BYTES (yystacksize));
	if (! yyptr)
	  goto yyoverflowlab;
	YYSTACK_RELOCATE (yyss);
	YYSTACK_RELOCATE (yyvs);
# if YYLSP_NEEDED
	YYSTACK_RELOCATE (yyls);
# endif
# undef YYSTACK_RELOCATE
	if (yyss1 != yyssa)
	  YYSTACK_FREE (yyss1);
      }
# endif
d648 4
a651 4
      yyssp = yyss + yysize - 1;
      yyvsp = yyvs + yysize - 1;
#if YYLSP_NEEDED
      yylsp = yyls + yysize - 1;
d654 4
a657 2
      YYDPRINTF ((stderr, "Stack size increased to %lu\n",
		  (unsigned long int) yystacksize));
d663 4
a666 1
  YYDPRINTF ((stderr, "Entering state %d\n", yystate));
d669 1
a669 6


/*-----------.
| yybackup.  |
`-----------*/
yybackup:
d688 4
a691 1
      YYDPRINTF ((stderr, "Reading a token: "));
d702 4
a705 1
      YYDPRINTF ((stderr, "Now at end of input.\n"));
d709 1
a709 1
      yychar1 = YYTRANSLATE (yychar);
d711 1
a711 3
#if YYDEBUG
     /* We have to keep this `#if YYDEBUG', since we use variables
	which are defined only if `YYDEBUG' is set.  */
d714 4
a717 5
	  YYFPRINTF (stderr, "Next token is %d (%s",
		     yychar, yytname[yychar1]);
	  /* Give the individual parser a way to print the precise
	     meaning of a token, for further debugging info.  */
# ifdef YYPRINT
d719 2
a720 2
# endif
	  YYFPRINTF (stderr, ")\n");
d752 5
a756 2
  YYDPRINTF ((stderr, "Shifting token %d (%s), ",
	      yychar, yytname[yychar1]));
d763 1
a763 1
#if YYLSP_NEEDED
d767 2
a768 4
  /* Count tokens shifted since error; after three, turn off error
     status.  */
  if (yyerrstatus)
    yyerrstatus--;
d773 2
a775 4
/*-----------------------------------------------------------.
| yydefault -- do the default action for the current state.  |
`-----------------------------------------------------------*/
yydefault:
a778 2
  goto yyreduce;

d780 1
a780 3
/*-----------------------------.
| yyreduce -- Do a reduction.  |
`-----------------------------*/
a781 1
  /* yyn is the number of a rule to reduce with.  */
d783 2
d786 1
a786 20
  /* If YYLEN is nonzero, implement the default value of the action:
     `$$ = $1'.

     Otherwise, the following line sets YYVAL to the semantic value of
     the lookahead token.  This behavior is undocumented and Bison
     users should not rely upon it.  Assigning to YYVAL
     unconditionally makes the parser a bit smaller, and it avoids a
     GCC warning that YYVAL may be used uninitialized.  */
  yyval = yyvsp[1-yylen];

#if YYLSP_NEEDED
  /* Similarly for the default location.  Let the user run additional
     commands if for instance locations are ranges.  */
  yyloc = yylsp[1-yylen];
  YYLLOC_DEFAULT (yyloc, (yylsp - yylen), yylen);
#endif

#if YYDEBUG
  /* We have to keep this `#if YYDEBUG', since we use variables which
     are defined only if `YYDEBUG' is set.  */
d789 1
a789 1
      int yyi;
d791 2
a792 2
      YYFPRINTF (stderr, "Reducing via rule %d (line %d), ",
		 yyn, yyrline[yyn]);
d795 3
a797 3
      for (yyi = yyprhs[yyn]; yyrhs[yyi] > 0; yyi++)
	YYFPRINTF (stderr, "%s ", yytname[yyrhs[yyi]]);
      YYFPRINTF (stderr, " -> %s\n", yytname[yyr1[yyn]]);
d801 1
d806 2
a807 2
{ def_name (yyvsp[-1].id, yyvsp[0].number); }
    break;
d810 2
a811 2
{ def_library (yyvsp[-2].id, yyvsp[-1].number); }
    break;
d814 2
a815 2
{ def_description (yyvsp[0].id);}
    break;
d818 2
a819 2
{ def_stacksize (yyvsp[-1].number, yyvsp[0].number);}
    break;
d822 2
a823 2
{ def_heapsize (yyvsp[-1].number, yyvsp[0].number);}
    break;
d826 2
a827 2
{ def_code (yyvsp[0].number);}
    break;
d830 2
a831 2
{ def_data (yyvsp[0].number);}
    break;
d834 2
a835 2
{ def_version (yyvsp[0].number,0);}
    break;
d838 2
a839 2
{ def_version (yyvsp[-2].number,yyvsp[0].number);}
    break;
d842 2
a843 2
{ def_exports (yyvsp[-5].id, yyvsp[-4].id, yyvsp[-3].number, yyvsp[-2].number, yyvsp[-1].number, yyvsp[0].number);}
    break;
d846 2
a847 2
{ def_import (yyvsp[-6].id,yyvsp[-4].id,yyvsp[-2].id,yyvsp[0].id, 0); }
    break;
d850 2
a851 2
{ def_import (yyvsp[-6].id,yyvsp[-4].id,yyvsp[-2].id, 0,yyvsp[0].number); }
    break;
d854 2
a855 2
{ def_import (yyvsp[-4].id,yyvsp[-2].id, 0,yyvsp[0].id, 0); }
    break;
d858 2
a859 2
{ def_import (yyvsp[-4].id,yyvsp[-2].id, 0, 0,yyvsp[0].number); }
    break;
d862 2
a863 2
{ def_import ( 0,yyvsp[-4].id,yyvsp[-2].id,yyvsp[0].id, 0); }
    break;
d866 2
a867 2
{ def_import ( 0,yyvsp[-4].id,yyvsp[-2].id, 0,yyvsp[0].number); }
    break;
d870 2
a871 2
{ def_import ( 0,yyvsp[-2].id, 0,yyvsp[0].id, 0); }
    break;
d874 2
a875 2
{ def_import ( 0,yyvsp[-2].id, 0, 0,yyvsp[0].number); }
    break;
d878 2
a879 2
{ def_section (yyvsp[-1].id,yyvsp[0].number);}
    break;
d882 2
a883 2
{ yyval.number=yyvsp[0].number;}
    break;
d886 2
a887 2
{ yyval.number=-1;}
    break;
d890 2
a891 2
{ yyval.number = 1; }
    break;
d894 2
a895 2
{ yyval.number = 2; }
    break;
d898 2
a899 2
{ yyval.number = 4; }
    break;
d902 2
a903 2
{ yyval.number = 8; }
    break;
d906 2
a907 2
{ yyval.number = 0; }
    break;
d910 2
a911 2
{ yyval.number = 0; }
    break;
d914 2
a915 2
{ yyval.number = 0; }
    break;
d918 2
a919 2
{yyval.number=1;}
    break;
d922 2
a923 2
{yyval.number=0;}
    break;
d926 2
a927 2
{yyval.number=1;}
    break;
d930 2
a931 2
{yyval.number=0;}
    break;
d934 2
a935 2
{ yyval.number = 1; }
    break;
d938 2
a939 2
{ yyval.number = 0; }
    break;
d942 2
a943 2
{ yyval.id =yyvsp[0].id; }
    break;
d950 2
a951 2
	  }
    break;
d954 2
a955 2
{ yyval.id=""; }
    break;
d958 2
a959 2
{ yyval.number=yyvsp[0].number;}
    break;
d962 2
a963 2
{ yyval.number=-1;}
    break;
d966 2
a967 2
{ yyval.id = yyvsp[0].id; }
    break;
d969 3
a971 7
#line 153 "defparse.y"
{ 
	    char *name = xmalloc (strlen (yyvsp[-2].id) + 1 + strlen (yyvsp[0].id) + 1);
	    sprintf (name, "%s.%s", yyvsp[-2].id, yyvsp[0].id);
	    yyval.id = name;
	  }
    break;
d973 3
a975 3
#line 158 "defparse.y"
{ yyval.id =  0; }
    break;
d977 3
a979 7
#line 161 "defparse.y"
{ yyval.number= yyvsp[0].number;}
    break;
case 59:
#line 162 "defparse.y"
{ yyval.number=-1;}
    break;
d981 2
a982 3

#line 705 "/usr/share/bison-1.35/bison.simple"

d986 1
a986 1
#if YYLSP_NEEDED
d990 1
a990 1
#if YYDEBUG
d993 5
a997 5
      short *yyssp1 = yyss - 1;
      YYFPRINTF (stderr, "state stack now");
      while (yyssp1 != yyssp)
	YYFPRINTF (stderr, " %d", *++yyssp1);
      YYFPRINTF (stderr, "\n");
d1002 16
a1017 2
#if YYLSP_NEEDED
  *++yylsp = yyloc;
d1020 4
a1023 3
  /* Now `shift' the result of the reduction.  Determine what state
     that goes to, based on the state we popped back to and the rule
     number reduced by.  */
d1035 1
d1037 2
a1038 6
/*------------------------------------.
| yyerrlab -- here on detecting error |
`------------------------------------*/
yyerrlab:
  /* If not already recovering from an error, report this error.  */
  if (!yyerrstatus)
d1047 12
a1058 15
	  YYSIZE_T yysize = 0;
	  char *yymsg;
	  int yyx, yycount;

	  yycount = 0;
	  /* Start YYX at -YYN if negative to avoid negative indexes in
	     YYCHECK.  */
	  for (yyx = yyn < 0 ? -yyn : 0;
	       yyx < (int) (sizeof (yytname) / sizeof (char *)); yyx++)
	    if (yycheck[yyx + yyn] == yyx)
	      yysize += yystrlen (yytname[yyx]) + 15, yycount++;
	  yysize += yystrlen ("parse error, unexpected ") + 1;
	  yysize += yystrlen (yytname[YYTRANSLATE (yychar)]);
	  yymsg = (char *) YYSTACK_ALLOC (yysize);
	  if (yymsg != 0)
d1060 1
a1060 2
	      char *yyp = yystpcpy (yymsg, "parse error, unexpected ");
	      yyp = yystpcpy (yyp, yytname[YYTRANSLATE (yychar)]);
d1062 1
a1062 1
	      if (yycount < 5)
d1064 4
a1067 5
		  yycount = 0;
		  for (yyx = yyn < 0 ? -yyn : 0;
		       yyx < (int) (sizeof (yytname) / sizeof (char *));
		       yyx++)
		    if (yycheck[yyx + yyn] == yyx)
d1069 4
a1072 4
			const char *yyq = ! yycount ? ", expecting " : " or ";
			yyp = yystpcpy (yyp, yyq);
			yyp = yystpcpy (yyp, yytname[yyx]);
			yycount++;
d1075 2
a1076 2
	      yyerror (yymsg);
	      YYSTACK_FREE (yymsg);
d1079 1
a1079 1
	    yyerror ("parse error; also virtual memory exhausted");
d1082 2
a1083 2
#endif /* defined (YYERROR_VERBOSE) */
	yyerror ("parse error");
d1085 1
d1087 1
a1088 5

/*--------------------------------------------------.
| yyerrlab1 -- error raised explicitly by an action |
`--------------------------------------------------*/
yyerrlab1:
d1091 1
a1091 2
      /* If just tried and failed to reuse lookahead token after an
	 error, discard it.  */
d1096 6
a1101 2
      YYDPRINTF ((stderr, "Discarding token %d (%s).\n",
		  yychar, yytname[yychar1]));
d1105 2
a1106 2
  /* Else will try to reuse lookahead token after shifting the error
     token.  */
d1112 1
a1113 5
/*-------------------------------------------------------------------.
| yyerrdefault -- current state does not do anything special for the |
| error token.                                                       |
`-------------------------------------------------------------------*/
yyerrdefault:
d1117 2
a1118 5

  /* If its default is to accept any token, ok.  Otherwise pop it.  */
  yyn = yydefact[yystate];
  if (yyn)
    goto yydefault;
d1121 1
d1123 1
a1123 7
/*---------------------------------------------------------------.
| yyerrpop -- pop the current state because it cannot handle the |
| error token                                                    |
`---------------------------------------------------------------*/
yyerrpop:
  if (yyssp == yyss)
    YYABORT;
d1126 1
a1126 1
#if YYLSP_NEEDED
d1130 1
a1130 1
#if YYDEBUG
d1133 5
a1137 5
      short *yyssp1 = yyss - 1;
      YYFPRINTF (stderr, "Error: state stack now");
      while (yyssp1 != yyssp)
	YYFPRINTF (stderr, " %d", *++yyssp1);
      YYFPRINTF (stderr, "\n");
a1140 3
/*--------------.
| yyerrhandle.  |
`--------------*/
d1142 1
d1165 4
a1168 1
  YYDPRINTF ((stderr, "Shifting error token, "));
d1171 1
a1171 1
#if YYLSP_NEEDED
d1178 11
d1190 8
a1197 26
/*-------------------------------------.
| yyacceptlab -- YYACCEPT comes here.  |
`-------------------------------------*/
yyacceptlab:
  yyresult = 0;
  goto yyreturn;

/*-----------------------------------.
| yyabortlab -- YYABORT comes here.  |
`-----------------------------------*/
yyabortlab:
  yyresult = 1;
  goto yyreturn;

/*---------------------------------------------.
| yyoverflowab -- parser overflow comes here.  |
`---------------------------------------------*/
yyoverflowlab:
  yyerror ("parser stack overflow");
  yyresult = 2;
  /* Fall through.  */

yyreturn:
#ifndef yyoverflow
  if (yyss != yyssa)
    YYSTACK_FREE (yyss);
d1199 2
a1200 1
  return yyresult;
d1202 1
a1202 1
#line 176 "defparse.y"
@


1.1.1.4
log
@Binutils 2.15, with testsuites removed, and without gdb and libiberty.
@
text
@d25 8
a32 9
# define	PRIVATE	276
# define	SINGLE	277
# define	MULTIPLE	278
# define	INITINSTANCE	279
# define	INITGLOBAL	280
# define	TERMINSTANCE	281
# define	TERMGLOBAL	282
# define	ID	283
# define	NUMBER	284
d37 1
a37 2
/*  Copyright 1995, 1997, 1998, 1999, 2004
    Free Software Foundation, Inc.
d39 1
a39 1
    This file is part of GNU Binutils.
d41 13
a53 13
    This program is free software; you can redistribute it and/or modify
    it under the terms of the GNU General Public License as published by
    the Free Software Foundation; either version 2 of the License, or
    (at your option) any later version.

    This program is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
    GNU General Public License for more details.

    You should have received a copy of the GNU General Public License
    along with this program; if not, write to the Free Software
    Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA 02111-1307, USA.  */
d59 1
a59 1
#line 27 "defparse.y"
d74 1
a74 1
#define	YYFINAL		98
d76 1
a76 1
#define	YYNTBASE	35
d79 1
a79 1
#define YYTRANSLATE(x) ((unsigned)(x) <= 284 ? yytranslate[x] : 57)
d88 1
a88 1
       2,     2,     2,     2,    33,     2,    31,     2,     2,     2,
d90 1
a90 1
       2,    32,     2,     2,    34,     2,     2,     2,     2,     2,
d112 1
a112 1
      26,    27,    28,    29,    30
d119 6
a124 6
      31,    34,    37,    40,    43,    48,    49,    52,    60,    63,
      65,    73,    81,    87,    93,    99,   105,   109,   113,   116,
     118,   121,   125,   127,   129,   130,   133,   134,   136,   138,
     140,   142,   144,   146,   148,   150,   151,   153,   154,   156,
     157,   159,   160,   162,   166,   167,   170,   171,   174,   179,
     180,   184,   185,   186,   190,   192,   194,   196
d128 20
a147 20
      35,    36,     0,    36,     0,     3,    51,    54,     0,     4,
      51,    54,    55,     0,    11,    37,     0,     5,    29,     0,
       6,    30,    45,     0,     7,    30,    45,     0,     8,    43,
       0,     9,    43,     0,    10,    41,     0,    12,    39,     0,
      13,    30,     0,    13,    30,    31,    30,     0,     0,    37,
      38,     0,    29,    53,    52,    48,    47,    49,    50,     0,
      39,    40,     0,    40,     0,    29,    32,    29,    31,    29,
      31,    29,     0,    29,    32,    29,    31,    29,    31,    30,
       0,    29,    32,    29,    31,    29,     0,    29,    32,    29,
      31,    30,     0,    29,    31,    29,    31,    29,     0,    29,
      31,    29,    31,    30,     0,    29,    31,    29,     0,    29,
      31,    30,     0,    41,    42,     0,    42,     0,    29,    43,
       0,    43,    44,    46,     0,    46,     0,    33,     0,     0,
      33,    30,     0,     0,    16,     0,    17,     0,    18,     0,
      19,     0,    20,     0,    23,     0,    24,     0,    15,     0,
       0,    21,     0,     0,     9,     0,     0,    22,     0,     0,
      29,     0,    29,    31,    29,     0,     0,    34,    30,     0,
       0,    32,    29,     0,    32,    29,    31,    29,     0,     0,
      14,    32,    30,     0,     0,     0,    55,    44,    56,     0,
      25,     0,    26,     0,    27,     0,    28,     0
d156 7
a162 7
       0,    44,    45,    48,    50,    51,    52,    53,    54,    55,
      56,    57,    58,    59,    60,    64,    66,    69,    73,    75,
      78,    80,    81,    82,    83,    84,    85,    86,    89,    91,
      94,    98,   100,   103,   105,   107,   108,   111,   113,   114,
     115,   116,   117,   118,   121,   123,   126,   128,   131,   133,
     136,   138,   141,   142,   148,   151,   153,   156,   158,   164,
     167,   168,   171,   173,   176,   178,   179,   180
d175 7
a181 7
  "SHARED", "NONSHARED", "NONAME", "PRIVATE", "SINGLE", "MULTIPLE", 
  "INITINSTANCE", "INITGLOBAL", "TERMINSTANCE", "TERMGLOBAL", "ID", 
  "NUMBER", "'.'", "'='", "','", "'@@'", "start", "command", "explist", 
  "expline", "implist", "impline", "seclist", "secline", "attr_list", 
  "opt_comma", "opt_number", "attr", "opt_CONSTANT", "opt_NONAME", 
  "opt_DATA", "opt_PRIVATE", "opt_name", "opt_ordinal", "opt_equal_name", 
  "opt_base", "option_list", "option", 0
d188 7
a194 7
       0,    35,    35,    36,    36,    36,    36,    36,    36,    36,
      36,    36,    36,    36,    36,    37,    37,    38,    39,    39,
      40,    40,    40,    40,    40,    40,    40,    40,    41,    41,
      42,    43,    43,    44,    44,    45,    45,    46,    46,    46,
      46,    46,    46,    46,    47,    47,    48,    48,    49,    49,
      50,    50,    51,    51,    51,    52,    52,    53,    53,    53,
      54,    54,    55,    55,    56,    56,    56,    56
d201 1
a201 1
       2,     2,     2,     2,     4,     0,     2,     7,     2,     1,
d205 2
a206 2
       1,     0,     1,     3,     0,     2,     0,     2,     4,     0,
       3,     0,     0,     3,     1,     1,     1,     1
d214 2
a215 2
       0,    54,    54,     0,     0,     0,     0,     0,     0,    15,
       0,     0,     0,     2,    52,    61,    61,     6,    36,    36,
d218 6
a223 6
       0,     3,    62,     0,     7,     8,    33,     0,    30,    28,
      59,    16,     0,     0,    18,     0,    53,     0,     4,    35,
      31,     0,    56,    26,    27,     0,    14,    60,     0,    57,
       0,    47,     0,     0,    64,    65,    66,    67,    63,     0,
      55,    46,    45,    24,    25,    22,    23,    58,    44,    49,
       0,    48,    51,    20,    21,    50,    17,     0,     0
d229 2
a230 2
      44,    28,    89,    82,    92,    96,    15,    71,    62,    41,
      58,    78
d235 2
a236 2
      32,   -12,   -12,    17,    -8,    33,    -4,    -4,    35,-32768,
      36,    37,    21,-32768,    38,    48,    48,-32768,    39,    39,
d238 7
a244 7
      -4,    35,-32768,    41,   -25,    36,-32768,    40,-32768,    44,
      34,-32768,-32768,    45,-32768,-32768,-32768,    -4,   -15,-32768,
      42,-32768,   -19,    47,-32768,    49,-32768,    50,    22,-32768,
  -32768,    52,    43,    51,-32768,    53,-32768,-32768,    26,    54,
      56,    57,    27,    29,-32768,-32768,-32768,-32768,-32768,    58,
  -32768,-32768,    68,-32768,-32768,    59,-32768,-32768,-32768,    79,
      31,-32768,    46,-32768,-32768,-32768,-32768,    89,-32768
d249 3
a251 3
  -32768,    80,-32768,-32768,-32768,    60,-32768,    62,    -7,    55,
      72,    61,-32768,-32768,-32768,-32768,    92,-32768,-32768,    81,
  -32768,-32768
d255 1
a255 1
#define	YYLAST		113
d260 3
a262 3
      29,   -34,   -34,   -34,   -34,   -34,    52,    53,   -34,   -34,
      63,    64,    20,    21,    22,    23,    24,    14,    46,    25,
      26,    97,    18,    48,     1,     2,     3,     4,     5,     6,
d264 7
a270 8
       6,     7,     8,     9,    10,    11,    17,   -34,   -34,   -34,
     -34,    74,    75,    76,    77,    46,    83,    84,    85,    86,
      93,    94,    40,    19,    30,    34,    57,    37,    95,    39,
      50,    55,    43,    56,    61,    59,    65,    70,    81,    66,
      67,    69,    72,    88,    73,    79,    80,    87,    91,    98,
      90,    45,    38,    49,    16,    54,     0,    42,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,    60,     0,
       0,     0,     0,    68
d275 3
a277 3
       7,    16,    17,    18,    19,    20,    31,    32,    23,    24,
      29,    30,    16,    17,    18,    19,    20,    29,    33,    23,
      24,     0,    30,    30,     3,     4,     5,     6,     7,     8,
d279 7
a285 8
       8,     9,    10,    11,    12,    13,    29,    25,    26,    27,
      28,    25,    26,    27,    28,    33,    29,    30,    29,    30,
      29,    30,    14,    30,    29,    29,    32,    30,    22,    31,
      29,    31,    33,    29,    32,    30,    29,    34,    21,    30,
      30,    29,    31,    15,    31,    31,    30,    29,     9,     0,
      31,    19,    12,    31,     2,    35,    -1,    16,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    47,    -1,
      -1,    -1,    -1,    58
d995 1
a995 1
#line 49 "defparse.y"
d999 1
a999 1
#line 50 "defparse.y"
d1003 1
a1003 1
#line 52 "defparse.y"
d1007 1
a1007 1
#line 53 "defparse.y"
d1011 1
a1011 1
#line 54 "defparse.y"
d1015 1
a1015 1
#line 55 "defparse.y"
d1019 1
a1019 1
#line 56 "defparse.y"
d1023 1
a1023 1
#line 59 "defparse.y"
d1027 1
a1027 1
#line 60 "defparse.y"
d1031 2
a1032 2
#line 71 "defparse.y"
{ def_exports (yyvsp[-6].id, yyvsp[-5].id, yyvsp[-4].number, yyvsp[-3].number, yyvsp[-2].number, yyvsp[-1].number, yyvsp[0].number);}
d1035 1
a1035 1
#line 79 "defparse.y"
d1039 1
a1039 1
#line 80 "defparse.y"
d1043 1
a1043 1
#line 81 "defparse.y"
d1047 1
a1047 1
#line 82 "defparse.y"
d1051 1
a1051 1
#line 83 "defparse.y"
d1055 1
a1055 1
#line 84 "defparse.y"
d1059 1
a1059 1
#line 85 "defparse.y"
d1063 1
a1063 1
#line 86 "defparse.y"
d1067 1
a1067 1
#line 95 "defparse.y"
d1071 1
a1071 1
#line 107 "defparse.y"
d1075 1
a1075 1
#line 108 "defparse.y"
d1079 1
a1079 1
#line 112 "defparse.y"
d1083 1
a1083 1
#line 113 "defparse.y"
d1087 1
a1087 1
#line 114 "defparse.y"
d1091 1
a1091 1
#line 115 "defparse.y"
d1095 1
a1095 1
#line 116 "defparse.y"
d1099 1
a1099 1
#line 117 "defparse.y"
d1103 1
a1103 1
#line 118 "defparse.y"
d1107 1
a1107 1
#line 122 "defparse.y"
d1111 1
a1111 1
#line 123 "defparse.y"
d1115 1
a1115 1
#line 127 "defparse.y"
d1119 1
a1119 1
#line 128 "defparse.y"
d1123 1
a1123 1
#line 132 "defparse.y"
d1127 1
a1127 1
#line 133 "defparse.y"
d1131 2
a1132 2
#line 137 "defparse.y"
{ yyval.number = 1; }
d1135 1
a1135 9
#line 138 "defparse.y"
{ yyval.number = 0; }
    break;
case 52:
#line 141 "defparse.y"
{ yyval.id =yyvsp[0].id; }
    break;
case 53:
#line 143 "defparse.y"
d1142 2
a1143 2
case 54:
#line 148 "defparse.y"
d1146 2
a1147 2
case 55:
#line 152 "defparse.y"
d1150 2
a1151 2
case 56:
#line 153 "defparse.y"
d1154 2
a1155 2
case 57:
#line 157 "defparse.y"
d1158 2
a1159 2
case 58:
#line 159 "defparse.y"
d1166 2
a1167 2
case 59:
#line 164 "defparse.y"
d1170 2
a1171 2
case 60:
#line 167 "defparse.y"
d1174 2
a1175 2
case 61:
#line 168 "defparse.y"
d1411 1
a1411 1
#line 182 "defparse.y"
@


