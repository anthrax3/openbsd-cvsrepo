head	1.6;
access;
symbols
	OPENBSD_6_1:1.6.0.52
	OPENBSD_6_1_BASE:1.6
	OPENBSD_6_0:1.6.0.48
	OPENBSD_6_0_BASE:1.6
	OPENBSD_5_9:1.6.0.44
	OPENBSD_5_9_BASE:1.6
	OPENBSD_5_8:1.6.0.46
	OPENBSD_5_8_BASE:1.6
	OPENBSD_5_7:1.6.0.38
	OPENBSD_5_7_BASE:1.6
	OPENBSD_5_6:1.6.0.42
	OPENBSD_5_6_BASE:1.6
	OPENBSD_5_5:1.6.0.40
	OPENBSD_5_5_BASE:1.6
	OPENBSD_5_4:1.6.0.36
	OPENBSD_5_4_BASE:1.6
	OPENBSD_5_3:1.6.0.34
	OPENBSD_5_3_BASE:1.6
	OPENBSD_5_2:1.6.0.32
	OPENBSD_5_2_BASE:1.6
	OPENBSD_5_1_BASE:1.6
	OPENBSD_5_1:1.6.0.30
	OPENBSD_5_0:1.6.0.28
	OPENBSD_5_0_BASE:1.6
	OPENBSD_4_9:1.6.0.26
	OPENBSD_4_9_BASE:1.6
	OPENBSD_4_8:1.6.0.24
	OPENBSD_4_8_BASE:1.6
	OPENBSD_4_7:1.6.0.20
	OPENBSD_4_7_BASE:1.6
	OPENBSD_4_6:1.6.0.22
	OPENBSD_4_6_BASE:1.6
	OPENBSD_4_5:1.6.0.18
	OPENBSD_4_5_BASE:1.6
	OPENBSD_4_4:1.6.0.16
	OPENBSD_4_4_BASE:1.6
	OPENBSD_4_3:1.6.0.14
	OPENBSD_4_3_BASE:1.6
	OPENBSD_4_2:1.6.0.12
	OPENBSD_4_2_BASE:1.6
	OPENBSD_4_1:1.6.0.10
	OPENBSD_4_1_BASE:1.6
	OPENBSD_4_0:1.6.0.8
	OPENBSD_4_0_BASE:1.6
	OPENBSD_3_9:1.6.0.6
	OPENBSD_3_9_BASE:1.6
	OPENBSD_3_8:1.6.0.4
	OPENBSD_3_8_BASE:1.6
	OPENBSD_3_7:1.6.0.2
	OPENBSD_3_7_BASE:1.6
	BINUTILS_2_15:1.1.1.6
	OPENBSD_3_6:1.5.0.2
	OPENBSD_3_6_BASE:1.5
	BINUTILS-2_14:1.1.1.5
	OPENBSD_3_5:1.4.0.8
	OPENBSD_3_5_BASE:1.4
	OPENBSD_3_4:1.4.0.6
	OPENBSD_3_4_BASE:1.4
	OPENBSD_3_3:1.4.0.4
	OPENBSD_3_3_BASE:1.4
	OPENBSD_3_2:1.4.0.2
	OPENBSD_3_2_BASE:1.4
	binutils-2_11_2:1.1.1.4
	OPENBSD_3_1:1.3.0.8
	OPENBSD_3_1_BASE:1.3
	OPENBSD_3_0:1.3.0.6
	OPENBSD_3_0_BASE:1.3
	BINUTILS-2_10_1:1.1.1.3
	OPENBSD_2_9:1.3.0.4
	OPENBSD_2_9_BASE:1.3
	OPENBSD_2_8:1.3.0.2
	OPENBSD_2_8_BASE:1.3
	BINUTILS-2_10:1.1.1.3
	BINUTILS-2_8_1:1.1.1.2
	CYGNUS:1.1.1
	FSF_2_6:1.1.1.1
	FSF:1.1.1;
locks; strict;
comment	@ * @;


1.6
date	2004.11.02.20.45.17;	author miod;	state Exp;
branches;
next	1.5;

1.5
date	2004.05.17.21.54.25;	author drahn;	state Exp;
branches;
next	1.4;

1.4
date	2002.05.13.17.07.32;	author fgsch;	state Exp;
branches;
next	1.3;

1.3
date	2000.09.12.22.24.42;	author espie;	state Exp;
branches;
next	1.2;

1.2
date	96.06.10.10.48.45;	author niklas;	state dead;
branches;
next	1.1;

1.1
date	96.01.08.11.03.57;	author niklas;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	96.01.08.11.03.57;	author niklas;	state Exp;
branches;
next	1.1.1.2;

1.1.1.2
date	97.05.29.09.16.11;	author niklas;	state Exp;
branches;
next	1.1.1.3;

1.1.1.3
date	2000.09.12.14.45.06;	author espie;	state Exp;
branches;
next	1.1.1.4;

1.1.1.4
date	2002.05.13.13.15.28;	author fgsch;	state Exp;
branches;
next	1.1.1.5;

1.1.1.5
date	2004.05.17.20.42.05;	author drahn;	state Exp;
branches;
next	1.1.1.6;

1.1.1.6
date	2004.11.02.20.22.04;	author miod;	state Exp;
branches;
next	;


desc
@@


1.6
log
@Merge conflicts, bringing our changes back in:
- extra $(SHELL) and sugar for make (so that files not mode +x still work)
- safer temp file handling
- our W^X binary layout changes in ld
- OpenBSD policy for library file selection in ld
- arm and m88k changes which were not merged in time for official 2.15
- bfd core file handling
- a couple typos

New for 2.15:
- ld(1) and as(1) manpages now generated at build time
- binutils/stabs.c reverted to use our in-tree libiberty for now
- we still use our VIA C3 crypto code over stock binutils, as it recognizes
  more instructions
- new emulations for OpenBSD on mips64 machines, to help OpenBSD/sgi
- relaxed %f# handling in gas on OpenBSD/sparc64 (same as was in 2.14)

Tested on all platforms by various people; special thanks to sturm@@ and
otto@@.
@
text
@/* A Bison parser, made from nlmheader.y
   by GNU bison 1.35.  */

#define YYBISON 1  /* Identify Bison output.  */

# define	CHECK	257
# define	CODESTART	258
# define	COPYRIGHT	259
# define	CUSTOM	260
# define	DATE	261
# define	DEBUG	262
# define	DESCRIPTION	263
# define	EXIT	264
# define	EXPORT	265
# define	FLAG_ON	266
# define	FLAG_OFF	267
# define	FULLMAP	268
# define	HELP	269
# define	IMPORT	270
# define	INPUT	271
# define	MAP	272
# define	MESSAGES	273
# define	MODULE	274
# define	MULTIPLE	275
# define	OS_DOMAIN	276
# define	OUTPUT	277
# define	PSEUDOPREEMPTION	278
# define	REENTRANT	279
# define	SCREENNAME	280
# define	SHARELIB	281
# define	STACK	282
# define	START	283
# define	SYNCHRONIZE	284
# define	THREADNAME	285
# define	TYPE	286
# define	VERBOSE	287
# define	VERSIONK	288
# define	XDCDATA	289
# define	STRING	290
# define	QUOTED_STRING	291

#line 1 "nlmheader.y"
/* nlmheader.y - parse NLM header specification keywords.
     Copyright 1993, 1994, 1995, 1997, 1998, 2001, 2002, 2003
     Free Software Foundation, Inc.

This file is part of GNU Binutils.

This program is free software; you can redistribute it and/or modify
it under the terms of the GNU General Public License as published by
the Free Software Foundation; either version 2 of the License, or
(at your option) any later version.

This program is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
GNU General Public License for more details.

You should have received a copy of the GNU General Public License
along with this program; if not, write to the Free Software
Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA 02111-1307, USA.  */

/* Written by Ian Lance Taylor <ian@@cygnus.com>.

   This bison file parses the commands recognized by the NetWare NLM
   linker, except for lists of object files.  It stores the
   information in global variables.

   This implementation is based on the description in the NetWare Tool
   Maker Specification manual, edition 1.0.  */

#include "ansidecl.h"
#include <stdio.h>
#include "safe-ctype.h"
#include "bfd.h"
#include "bucomm.h"
#include "nlm/common.h"
#include "nlm/internal.h"
#include "nlmconv.h"

/* Information is stored in the structures pointed to by these
   variables.  */

Nlm_Internal_Fixed_Header *fixed_hdr;
Nlm_Internal_Variable_Header *var_hdr;
Nlm_Internal_Version_Header *version_hdr;
Nlm_Internal_Copyright_Header *copyright_hdr;
Nlm_Internal_Extended_Header *extended_hdr;

/* Procedure named by CHECK.  */
char *check_procedure;
/* File named by CUSTOM.  */
char *custom_file;
/* Whether to generate debugging information (DEBUG).  */
bfd_boolean debug_info;
/* Procedure named by EXIT.  */
char *exit_procedure;
/* Exported symbols (EXPORT).  */
struct string_list *export_symbols;
/* List of files from INPUT.  */
struct string_list *input_files;
/* Map file name (MAP, FULLMAP).  */
char *map_file;
/* Whether a full map has been requested (FULLMAP).  */
bfd_boolean full_map;
/* File named by HELP.  */
char *help_file;
/* Imported symbols (IMPORT).  */
struct string_list *import_symbols;
/* File named by MESSAGES.  */
char *message_file;
/* Autoload module list (MODULE).  */
struct string_list *modules;
/* File named by OUTPUT.  */
char *output_file;
/* File named by SHARELIB.  */
char *sharelib_file;
/* Start procedure name (START).  */
char *start_procedure;
/* VERBOSE.  */
bfd_boolean verbose;
/* RPC description file (XDCDATA).  */
char *rpc_file;

/* The number of serious errors that have occurred.  */
int parse_errors;

/* The current symbol prefix when reading a list of import or export
   symbols.  */
static char *symbol_prefix;

/* Parser error message handler.  */
#define yyerror(msg) nlmheader_error (msg);

/* Local functions.  */
static int yylex (void);
static void nlmlex_file_push (const char *);
static bfd_boolean nlmlex_file_open (const char *);
static int nlmlex_buf_init (void);
static char nlmlex_buf_add (int);
static long nlmlex_get_number (const char *);
static void nlmheader_identify (void);
static void nlmheader_warn (const char *, int);
static void nlmheader_error (const char *);
static struct string_list * string_list_cons (char *, struct string_list *);
static struct string_list * string_list_append (struct string_list *,
						struct string_list *);
static struct string_list * string_list_append1 (struct string_list *,
						 char *);
static char *xstrdup (const char *);


#line 112 "nlmheader.y"
#ifndef YYSTYPE
typedef union
{
  char *string;
  struct string_list *list;
} yystype;
# define YYSTYPE yystype
# define YYSTYPE_IS_TRIVIAL 1
#endif
#ifndef YYDEBUG
# define YYDEBUG 0
#endif



#define	YYFINAL		82
#define	YYFLAG		-32768
#define	YYNTBASE	40

/* YYTRANSLATE(YYLEX) -- Bison token number corresponding to YYLEX. */
#define YYTRANSLATE(x) ((unsigned)(x) <= 291 ? yytranslate[x] : 50)

/* YYTRANSLATE[YYLEX] -- Bison token number corresponding to YYLEX. */
static const char yytranslate[] =
{
       0,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
      38,    39,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     1,     3,     4,     5,
       6,     7,     8,     9,    10,    11,    12,    13,    14,    15,
      16,    17,    18,    19,    20,    21,    22,    23,    24,    25,
      26,    27,    28,    29,    30,    31,    32,    33,    34,    35,
      36,    37
};

#if YYDEBUG
static const short yyprhs[] =
{
       0,     0,     2,     3,     6,     9,    12,    15,    18,    23,
      25,    28,    31,    32,    36,    39,    42,    44,    47,    50,
      51,    55,    58,    60,    63,    66,    69,    71,    73,    76,
      78,    80,    83,    86,    89,    92,    94,    97,   100,   102,
     107,   111,   114,   115,   117,   119,   121,   124,   127,   131,
     133,   134
};
static const short yyrhs[] =
{
      41,     0,     0,    42,    41,     0,     3,    36,     0,     4,
      36,     0,     5,    37,     0,     6,    36,     0,     7,    36,
      36,    36,     0,     8,     0,     9,    37,     0,    10,    36,
       0,     0,    11,    43,    45,     0,    12,    36,     0,    13,
      36,     0,    14,     0,    14,    36,     0,    15,    36,     0,
       0,    16,    44,    45,     0,    17,    49,     0,    18,     0,
      18,    36,     0,    19,    36,     0,    20,    49,     0,    21,
       0,    22,     0,    23,    36,     0,    24,     0,    25,     0,
      26,    37,     0,    27,    36,     0,    28,    36,     0,    29,
      36,     0,    30,     0,    31,    37,     0,    32,    36,     0,
      33,     0,    34,    36,    36,    36,     0,    34,    36,    36,
       0,    35,    36,     0,     0,    46,     0,    48,     0,    47,
       0,    46,    48,     0,    46,    47,     0,    38,    36,    39,
       0,    36,     0,     0,    36,    49,     0
};

#endif

#if YYDEBUG
/* YYRLINE[YYN] -- source line where rule number YYN was defined. */
static const short yyrline[] =
{
       0,   143,   149,   151,   156,   161,   166,   183,   187,   205,
     209,   225,   229,   229,   237,   242,   247,   252,   257,   261,
     261,   269,   273,   277,   281,   285,   289,   293,   297,   304,
     308,   312,   328,   332,   337,   341,   345,   361,   366,   370,
     394,   410,   418,   423,   433,   438,   442,   446,   454,   465,
     481,   486
};
#endif


#if (YYDEBUG) || defined YYERROR_VERBOSE

/* YYTNAME[TOKEN_NUM] -- String name of the token TOKEN_NUM. */
static const char *const yytname[] =
{
  "$", "error", "$undefined.", "CHECK", "CODESTART", "COPYRIGHT", "CUSTOM", 
  "DATE", "DEBUG", "DESCRIPTION", "EXIT", "EXPORT", "FLAG_ON", "FLAG_OFF", 
  "FULLMAP", "HELP", "IMPORT", "INPUT", "MAP", "MESSAGES", "MODULE", 
  "MULTIPLE", "OS_DOMAIN", "OUTPUT", "PSEUDOPREEMPTION", "REENTRANT", 
  "SCREENNAME", "SHARELIB", "STACK", "START", "SYNCHRONIZE", "THREADNAME", 
  "TYPE", "VERBOSE", "VERSIONK", "XDCDATA", "STRING", "QUOTED_STRING", 
  "'('", "')'", "file", "commands", "command", "@@1", "@@2", 
  "symbol_list_opt", "symbol_list", "symbol_prefix", "symbol", 
  "string_list", 0
};
#endif

/* YYR1[YYN] -- Symbol number of symbol that rule YYN derives. */
static const short yyr1[] =
{
       0,    40,    41,    41,    42,    42,    42,    42,    42,    42,
      42,    42,    43,    42,    42,    42,    42,    42,    42,    44,
      42,    42,    42,    42,    42,    42,    42,    42,    42,    42,
      42,    42,    42,    42,    42,    42,    42,    42,    42,    42,
      42,    42,    45,    45,    46,    46,    46,    46,    47,    48,
      49,    49
};

/* YYR2[YYN] -- Number of symbols composing right hand side of rule YYN. */
static const short yyr2[] =
{
       0,     1,     0,     2,     2,     2,     2,     2,     4,     1,
       2,     2,     0,     3,     2,     2,     1,     2,     2,     0,
       3,     2,     1,     2,     2,     2,     1,     1,     2,     1,
       1,     2,     2,     2,     2,     1,     2,     2,     1,     4,
       3,     2,     0,     1,     1,     1,     2,     2,     3,     1,
       0,     2
};

/* YYDEFACT[S] -- default rule to reduce with in state S when YYTABLE
   doesn't specify something else to do.  Zero means the default is an
   error. */
static const short yydefact[] =
{
       2,     0,     0,     0,     0,     0,     9,     0,     0,    12,
       0,     0,    16,     0,    19,    50,    22,     0,    50,    26,
      27,     0,    29,    30,     0,     0,     0,     0,    35,     0,
       0,    38,     0,     0,     1,     2,     4,     5,     6,     7,
       0,    10,    11,    42,    14,    15,    17,    18,    42,    50,
      21,    23,    24,    25,    28,    31,    32,    33,    34,    36,
      37,     0,    41,     3,     0,    49,     0,    13,    43,    45,
      44,    20,    51,    40,     8,     0,    47,    46,    39,    48,
       0,     0,     0
};

static const short yydefgoto[] =
{
      80,    34,    35,    43,    48,    67,    68,    69,    70,    50
};

static const short yypact[] =
{
      -3,    -1,     1,     2,     4,     5,-32768,     6,     8,-32768,
       9,    10,    11,    12,-32768,    13,    14,    16,    13,-32768,
  -32768,    17,-32768,-32768,    18,    20,    21,    22,-32768,    23,
      25,-32768,    26,    27,-32768,    -3,-32768,-32768,-32768,-32768,
      29,-32768,-32768,    -2,-32768,-32768,-32768,-32768,    -2,    13,
  -32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,
  -32768,    30,-32768,-32768,    31,-32768,    32,-32768,    -2,-32768,
  -32768,-32768,-32768,    33,-32768,     3,-32768,-32768,-32768,-32768,
      38,    51,-32768
};

static const short yypgoto[] =
{
  -32768,    19,-32768,-32768,-32768,    24,-32768,    -9,     7,    15
};


#define	YYLAST		75


static const short yytable[] =
{
       1,     2,     3,     4,     5,     6,     7,     8,     9,    10,
      11,    12,    13,    14,    15,    16,    17,    18,    19,    20,
      21,    22,    23,    24,    25,    26,    27,    28,    29,    30,
      31,    32,    33,    53,    65,    36,    66,    37,    81,    38,
      39,    40,    79,    41,    42,    44,    45,    46,    47,    49,
      51,    82,    52,    54,    63,    55,    56,    57,    58,    76,
      59,    60,    61,    62,    72,    64,    73,    74,    75,    78,
       0,     0,    71,     0,     0,    77
};

static const short yycheck[] =
{
       3,     4,     5,     6,     7,     8,     9,    10,    11,    12,
      13,    14,    15,    16,    17,    18,    19,    20,    21,    22,
      23,    24,    25,    26,    27,    28,    29,    30,    31,    32,
      33,    34,    35,    18,    36,    36,    38,    36,     0,    37,
      36,    36,    39,    37,    36,    36,    36,    36,    36,    36,
      36,     0,    36,    36,    35,    37,    36,    36,    36,    68,
      37,    36,    36,    36,    49,    36,    36,    36,    36,    36,
      -1,    -1,    48,    -1,    -1,    68
};
/* -*-C-*-  Note some compilers choke on comments on `#line' lines.  */
#line 3 "/usr/share/bison-1.35/bison.simple"

/* Skeleton output parser for bison,

   Copyright (C) 1984, 1989, 1990, 2000, 2001, 2002 Free Software
   Foundation, Inc.

   This program is free software; you can redistribute it and/or modify
   it under the terms of the GNU General Public License as published by
   the Free Software Foundation; either version 2, or (at your option)
   any later version.

   This program is distributed in the hope that it will be useful,
   but WITHOUT ANY WARRANTY; without even the implied warranty of
   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
   GNU General Public License for more details.

   You should have received a copy of the GNU General Public License
   along with this program; if not, write to the Free Software
   Foundation, Inc., 59 Temple Place - Suite 330,
   Boston, MA 02111-1307, USA.  */

/* As a special exception, when this file is copied by Bison into a
   Bison output file, you may use that output file without restriction.
   This special exception was added by the Free Software Foundation
   in version 1.24 of Bison.  */

/* This is the parser code that is written into each bison parser when
   the %semantic_parser declaration is not specified in the grammar.
   It was written by Richard Stallman by simplifying the hairy parser
   used when %semantic_parser is specified.  */

/* All symbols defined below should begin with yy or YY, to avoid
   infringing on user name space.  This should be done even for local
   variables, as they might otherwise be expanded by user macros.
   There are some unavoidable exceptions within include files to
   define necessary library symbols; they are noted "INFRINGES ON
   USER NAME SPACE" below.  */

#if ! defined (yyoverflow) || defined (YYERROR_VERBOSE)

/* The parser invokes alloca or malloc; define the necessary symbols.  */

# if YYSTACK_USE_ALLOCA
#  define YYSTACK_ALLOC alloca
# else
#  ifndef YYSTACK_USE_ALLOCA
#   if defined (alloca) || defined (_ALLOCA_H)
#    define YYSTACK_ALLOC alloca
#   else
#    ifdef __GNUC__
#     define YYSTACK_ALLOC __builtin_alloca
#    endif
#   endif
#  endif
# endif

# ifdef YYSTACK_ALLOC
   /* Pacify GCC's `empty if-body' warning. */
#  define YYSTACK_FREE(Ptr) do { /* empty */; } while (0)
# else
#  if defined (__STDC__) || defined (__cplusplus)
#   include <stdlib.h> /* INFRINGES ON USER NAME SPACE */
#   define YYSIZE_T size_t
#  endif
#  define YYSTACK_ALLOC malloc
#  define YYSTACK_FREE free
# endif
#endif /* ! defined (yyoverflow) || defined (YYERROR_VERBOSE) */


#if (! defined (yyoverflow) \
     && (! defined (__cplusplus) \
	 || (YYLTYPE_IS_TRIVIAL && YYSTYPE_IS_TRIVIAL)))

/* A type that is properly aligned for any stack member.  */
union yyalloc
{
  short yyss;
  YYSTYPE yyvs;
# if YYLSP_NEEDED
  YYLTYPE yyls;
# endif
};

/* The size of the maximum gap between one aligned stack and the next.  */
# define YYSTACK_GAP_MAX (sizeof (union yyalloc) - 1)

/* The size of an array large to enough to hold all stacks, each with
   N elements.  */
# if YYLSP_NEEDED
#  define YYSTACK_BYTES(N) \
     ((N) * (sizeof (short) + sizeof (YYSTYPE) + sizeof (YYLTYPE))	\
      + 2 * YYSTACK_GAP_MAX)
# else
#  define YYSTACK_BYTES(N) \
     ((N) * (sizeof (short) + sizeof (YYSTYPE))				\
      + YYSTACK_GAP_MAX)
# endif

/* Copy COUNT objects from FROM to TO.  The source and destination do
   not overlap.  */
# ifndef YYCOPY
#  if 1 < __GNUC__
#   define YYCOPY(To, From, Count) \
      __builtin_memcpy (To, From, (Count) * sizeof (*(From)))
#  else
#   define YYCOPY(To, From, Count)		\
      do					\
	{					\
	  register YYSIZE_T yyi;		\
	  for (yyi = 0; yyi < (Count); yyi++)	\
	    (To)[yyi] = (From)[yyi];		\
	}					\
      while (0)
#  endif
# endif

/* Relocate STACK from its old location to the new one.  The
   local variables YYSIZE and YYSTACKSIZE give the old and new number of
   elements in the stack, and YYPTR gives the new location of the
   stack.  Advance YYPTR to a properly aligned location for the next
   stack.  */
# define YYSTACK_RELOCATE(Stack)					\
    do									\
      {									\
	YYSIZE_T yynewbytes;						\
	YYCOPY (&yyptr->Stack, Stack, yysize);				\
	Stack = &yyptr->Stack;						\
	yynewbytes = yystacksize * sizeof (*Stack) + YYSTACK_GAP_MAX;	\
	yyptr += yynewbytes / sizeof (*yyptr);				\
      }									\
    while (0)

#endif


#if ! defined (YYSIZE_T) && defined (__SIZE_TYPE__)
# define YYSIZE_T __SIZE_TYPE__
#endif
#if ! defined (YYSIZE_T) && defined (size_t)
# define YYSIZE_T size_t
#endif
#if ! defined (YYSIZE_T)
# if defined (__STDC__) || defined (__cplusplus)
#  include <stddef.h> /* INFRINGES ON USER NAME SPACE */
#  define YYSIZE_T size_t
# endif
#endif
#if ! defined (YYSIZE_T)
# define YYSIZE_T unsigned int
#endif

#define yyerrok		(yyerrstatus = 0)
#define yyclearin	(yychar = YYEMPTY)
#define YYEMPTY		-2
#define YYEOF		0
#define YYACCEPT	goto yyacceptlab
#define YYABORT 	goto yyabortlab
#define YYERROR		goto yyerrlab1
/* Like YYERROR except do call yyerror.  This remains here temporarily
   to ease the transition to the new meaning of YYERROR, for GCC.
   Once GCC version 2 has supplanted version 1, this can go.  */
#define YYFAIL		goto yyerrlab
#define YYRECOVERING()  (!!yyerrstatus)
#define YYBACKUP(Token, Value)					\
do								\
  if (yychar == YYEMPTY && yylen == 1)				\
    {								\
      yychar = (Token);						\
      yylval = (Value);						\
      yychar1 = YYTRANSLATE (yychar);				\
      YYPOPSTACK;						\
      goto yybackup;						\
    }								\
  else								\
    { 								\
      yyerror ("syntax error: cannot back up");			\
      YYERROR;							\
    }								\
while (0)

#define YYTERROR	1
#define YYERRCODE	256


/* YYLLOC_DEFAULT -- Compute the default location (before the actions
   are run).

   When YYLLOC_DEFAULT is run, CURRENT is set the location of the
   first token.  By default, to implement support for ranges, extend
   its range to the last symbol.  */

#ifndef YYLLOC_DEFAULT
# define YYLLOC_DEFAULT(Current, Rhs, N)       	\
   Current.last_line   = Rhs[N].last_line;	\
   Current.last_column = Rhs[N].last_column;
#endif


/* YYLEX -- calling `yylex' with the right arguments.  */

#if YYPURE
# if YYLSP_NEEDED
#  ifdef YYLEX_PARAM
#   define YYLEX		yylex (&yylval, &yylloc, YYLEX_PARAM)
#  else
#   define YYLEX		yylex (&yylval, &yylloc)
#  endif
# else /* !YYLSP_NEEDED */
#  ifdef YYLEX_PARAM
#   define YYLEX		yylex (&yylval, YYLEX_PARAM)
#  else
#   define YYLEX		yylex (&yylval)
#  endif
# endif /* !YYLSP_NEEDED */
#else /* !YYPURE */
# define YYLEX			yylex ()
#endif /* !YYPURE */


/* Enable debugging if requested.  */
#if YYDEBUG

# ifndef YYFPRINTF
#  include <stdio.h> /* INFRINGES ON USER NAME SPACE */
#  define YYFPRINTF fprintf
# endif

# define YYDPRINTF(Args)			\
do {						\
  if (yydebug)					\
    YYFPRINTF Args;				\
} while (0)
/* Nonzero means print parse trace.  It is left uninitialized so that
   multiple parsers can coexist.  */
int yydebug;
#else /* !YYDEBUG */
# define YYDPRINTF(Args)
#endif /* !YYDEBUG */

/* YYINITDEPTH -- initial size of the parser's stacks.  */
#ifndef	YYINITDEPTH
# define YYINITDEPTH 200
#endif

/* YYMAXDEPTH -- maximum size the stacks can grow to (effective only
   if the built-in stack extension method is used).

   Do not make this value too large; the results are undefined if
   SIZE_MAX < YYSTACK_BYTES (YYMAXDEPTH)
   evaluated with infinite-precision integer arithmetic.  */

#if YYMAXDEPTH == 0
# undef YYMAXDEPTH
#endif

#ifndef YYMAXDEPTH
# define YYMAXDEPTH 10000
#endif

#ifdef YYERROR_VERBOSE

# ifndef yystrlen
#  if defined (__GLIBC__) && defined (_STRING_H)
#   define yystrlen strlen
#  else
/* Return the length of YYSTR.  */
static YYSIZE_T
#   if defined (__STDC__) || defined (__cplusplus)
yystrlen (const char *yystr)
#   else
yystrlen (yystr)
     const char *yystr;
#   endif
{
  register const char *yys = yystr;

  while (*yys++ != '\0')
    continue;

  return yys - yystr - 1;
}
#  endif
# endif

# ifndef yystpcpy
#  if defined (__GLIBC__) && defined (_STRING_H) && defined (_GNU_SOURCE)
#   define yystpcpy stpcpy
#  else
/* Copy YYSRC to YYDEST, returning the address of the terminating '\0' in
   YYDEST.  */
static char *
#   if defined (__STDC__) || defined (__cplusplus)
yystpcpy (char *yydest, const char *yysrc)
#   else
yystpcpy (yydest, yysrc)
     char *yydest;
     const char *yysrc;
#   endif
{
  register char *yyd = yydest;
  register const char *yys = yysrc;

  while ((*yyd++ = *yys++) != '\0')
    continue;

  return yyd - 1;
}
#  endif
# endif
#endif

#line 315 "/usr/share/bison-1.35/bison.simple"


/* The user can define YYPARSE_PARAM as the name of an argument to be passed
   into yyparse.  The argument should have type void *.
   It should actually point to an object.
   Grammar actions can access the variable by casting it
   to the proper pointer type.  */

#ifdef YYPARSE_PARAM
# if defined (__STDC__) || defined (__cplusplus)
#  define YYPARSE_PARAM_ARG void *YYPARSE_PARAM
#  define YYPARSE_PARAM_DECL
# else
#  define YYPARSE_PARAM_ARG YYPARSE_PARAM
#  define YYPARSE_PARAM_DECL void *YYPARSE_PARAM;
# endif
#else /* !YYPARSE_PARAM */
# define YYPARSE_PARAM_ARG
# define YYPARSE_PARAM_DECL
#endif /* !YYPARSE_PARAM */

/* Prevent warning if -Wstrict-prototypes.  */
#ifdef __GNUC__
# ifdef YYPARSE_PARAM
int yyparse (void *);
# else
int yyparse (void);
# endif
#endif

/* YY_DECL_VARIABLES -- depending whether we use a pure parser,
   variables are global, or local to YYPARSE.  */

#define YY_DECL_NON_LSP_VARIABLES			\
/* The lookahead symbol.  */				\
int yychar;						\
							\
/* The semantic value of the lookahead symbol. */	\
YYSTYPE yylval;						\
							\
/* Number of parse errors so far.  */			\
int yynerrs;

#if YYLSP_NEEDED
# define YY_DECL_VARIABLES			\
YY_DECL_NON_LSP_VARIABLES			\
						\
/* Location data for the lookahead symbol.  */	\
YYLTYPE yylloc;
#else
# define YY_DECL_VARIABLES			\
YY_DECL_NON_LSP_VARIABLES
#endif


/* If nonreentrant, generate the variables here. */

#if !YYPURE
YY_DECL_VARIABLES
#endif  /* !YYPURE */

int
yyparse (YYPARSE_PARAM_ARG)
     YYPARSE_PARAM_DECL
{
  /* If reentrant, generate the variables here. */
#if YYPURE
  YY_DECL_VARIABLES
#endif  /* !YYPURE */

  register int yystate;
  register int yyn;
  int yyresult;
  /* Number of tokens to shift before error messages enabled.  */
  int yyerrstatus;
  /* Lookahead token as an internal (translated) token number.  */
  int yychar1 = 0;

  /* Three stacks and their tools:
     `yyss': related to states,
     `yyvs': related to semantic values,
     `yyls': related to locations.

     Refer to the stacks thru separate pointers, to allow yyoverflow
     to reallocate them elsewhere.  */

  /* The state stack. */
  short	yyssa[YYINITDEPTH];
  short *yyss = yyssa;
  register short *yyssp;

  /* The semantic value stack.  */
  YYSTYPE yyvsa[YYINITDEPTH];
  YYSTYPE *yyvs = yyvsa;
  register YYSTYPE *yyvsp;

#if YYLSP_NEEDED
  /* The location stack.  */
  YYLTYPE yylsa[YYINITDEPTH];
  YYLTYPE *yyls = yylsa;
  YYLTYPE *yylsp;
#endif

#if YYLSP_NEEDED
# define YYPOPSTACK   (yyvsp--, yyssp--, yylsp--)
#else
# define YYPOPSTACK   (yyvsp--, yyssp--)
#endif

  YYSIZE_T yystacksize = YYINITDEPTH;


  /* The variables used to return semantic value and location from the
     action routines.  */
  YYSTYPE yyval;
#if YYLSP_NEEDED
  YYLTYPE yyloc;
#endif

  /* When reducing, the number of symbols on the RHS of the reduced
     rule. */
  int yylen;

  YYDPRINTF ((stderr, "Starting parse\n"));

  yystate = 0;
  yyerrstatus = 0;
  yynerrs = 0;
  yychar = YYEMPTY;		/* Cause a token to be read.  */

  /* Initialize stack pointers.
     Waste one element of value and location stack
     so that they stay on the same level as the state stack.
     The wasted elements are never initialized.  */

  yyssp = yyss;
  yyvsp = yyvs;
#if YYLSP_NEEDED
  yylsp = yyls;
#endif
  goto yysetstate;

/*------------------------------------------------------------.
| yynewstate -- Push a new state, which is found in yystate.  |
`------------------------------------------------------------*/
 yynewstate:
  /* In all cases, when you get here, the value and location stacks
     have just been pushed. so pushing a state here evens the stacks.
     */
  yyssp++;

 yysetstate:
  *yyssp = yystate;

  if (yyssp >= yyss + yystacksize - 1)
    {
      /* Get the current used size of the three stacks, in elements.  */
      YYSIZE_T yysize = yyssp - yyss + 1;

#ifdef yyoverflow
      {
	/* Give user a chance to reallocate the stack. Use copies of
	   these so that the &'s don't force the real ones into
	   memory.  */
	YYSTYPE *yyvs1 = yyvs;
	short *yyss1 = yyss;

	/* Each stack pointer address is followed by the size of the
	   data in use in that stack, in bytes.  */
# if YYLSP_NEEDED
	YYLTYPE *yyls1 = yyls;
	/* This used to be a conditional around just the two extra args,
	   but that might be undefined if yyoverflow is a macro.  */
	yyoverflow ("parser stack overflow",
		    &yyss1, yysize * sizeof (*yyssp),
		    &yyvs1, yysize * sizeof (*yyvsp),
		    &yyls1, yysize * sizeof (*yylsp),
		    &yystacksize);
	yyls = yyls1;
# else
	yyoverflow ("parser stack overflow",
		    &yyss1, yysize * sizeof (*yyssp),
		    &yyvs1, yysize * sizeof (*yyvsp),
		    &yystacksize);
# endif
	yyss = yyss1;
	yyvs = yyvs1;
      }
#else /* no yyoverflow */
# ifndef YYSTACK_RELOCATE
      goto yyoverflowlab;
# else
      /* Extend the stack our own way.  */
      if (yystacksize >= YYMAXDEPTH)
	goto yyoverflowlab;
      yystacksize *= 2;
      if (yystacksize > YYMAXDEPTH)
	yystacksize = YYMAXDEPTH;

      {
	short *yyss1 = yyss;
	union yyalloc *yyptr =
	  (union yyalloc *) YYSTACK_ALLOC (YYSTACK_BYTES (yystacksize));
	if (! yyptr)
	  goto yyoverflowlab;
	YYSTACK_RELOCATE (yyss);
	YYSTACK_RELOCATE (yyvs);
# if YYLSP_NEEDED
	YYSTACK_RELOCATE (yyls);
# endif
# undef YYSTACK_RELOCATE
	if (yyss1 != yyssa)
	  YYSTACK_FREE (yyss1);
      }
# endif
#endif /* no yyoverflow */

      yyssp = yyss + yysize - 1;
      yyvsp = yyvs + yysize - 1;
#if YYLSP_NEEDED
      yylsp = yyls + yysize - 1;
#endif

      YYDPRINTF ((stderr, "Stack size increased to %lu\n",
		  (unsigned long int) yystacksize));

      if (yyssp >= yyss + yystacksize - 1)
	YYABORT;
    }

  YYDPRINTF ((stderr, "Entering state %d\n", yystate));

  goto yybackup;


/*-----------.
| yybackup.  |
`-----------*/
yybackup:

/* Do appropriate processing given the current state.  */
/* Read a lookahead token if we need one and don't already have one.  */
/* yyresume: */

  /* First try to decide what to do without reference to lookahead token.  */

  yyn = yypact[yystate];
  if (yyn == YYFLAG)
    goto yydefault;

  /* Not known => get a lookahead token if don't already have one.  */

  /* yychar is either YYEMPTY or YYEOF
     or a valid token in external form.  */

  if (yychar == YYEMPTY)
    {
      YYDPRINTF ((stderr, "Reading a token: "));
      yychar = YYLEX;
    }

  /* Convert token to internal form (in yychar1) for indexing tables with */

  if (yychar <= 0)		/* This means end of input. */
    {
      yychar1 = 0;
      yychar = YYEOF;		/* Don't call YYLEX any more */

      YYDPRINTF ((stderr, "Now at end of input.\n"));
    }
  else
    {
      yychar1 = YYTRANSLATE (yychar);

#if YYDEBUG
     /* We have to keep this `#if YYDEBUG', since we use variables
	which are defined only if `YYDEBUG' is set.  */
      if (yydebug)
	{
	  YYFPRINTF (stderr, "Next token is %d (%s",
		     yychar, yytname[yychar1]);
	  /* Give the individual parser a way to print the precise
	     meaning of a token, for further debugging info.  */
# ifdef YYPRINT
	  YYPRINT (stderr, yychar, yylval);
# endif
	  YYFPRINTF (stderr, ")\n");
	}
#endif
    }

  yyn += yychar1;
  if (yyn < 0 || yyn > YYLAST || yycheck[yyn] != yychar1)
    goto yydefault;

  yyn = yytable[yyn];

  /* yyn is what to do for this token type in this state.
     Negative => reduce, -yyn is rule number.
     Positive => shift, yyn is new state.
       New state is final state => don't bother to shift,
       just return success.
     0, or most negative number => error.  */

  if (yyn < 0)
    {
      if (yyn == YYFLAG)
	goto yyerrlab;
      yyn = -yyn;
      goto yyreduce;
    }
  else if (yyn == 0)
    goto yyerrlab;

  if (yyn == YYFINAL)
    YYACCEPT;

  /* Shift the lookahead token.  */
  YYDPRINTF ((stderr, "Shifting token %d (%s), ",
	      yychar, yytname[yychar1]));

  /* Discard the token being shifted unless it is eof.  */
  if (yychar != YYEOF)
    yychar = YYEMPTY;

  *++yyvsp = yylval;
#if YYLSP_NEEDED
  *++yylsp = yylloc;
#endif

  /* Count tokens shifted since error; after three, turn off error
     status.  */
  if (yyerrstatus)
    yyerrstatus--;

  yystate = yyn;
  goto yynewstate;


/*-----------------------------------------------------------.
| yydefault -- do the default action for the current state.  |
`-----------------------------------------------------------*/
yydefault:
  yyn = yydefact[yystate];
  if (yyn == 0)
    goto yyerrlab;
  goto yyreduce;


/*-----------------------------.
| yyreduce -- Do a reduction.  |
`-----------------------------*/
yyreduce:
  /* yyn is the number of a rule to reduce with.  */
  yylen = yyr2[yyn];

  /* If YYLEN is nonzero, implement the default value of the action:
     `$$ = $1'.

     Otherwise, the following line sets YYVAL to the semantic value of
     the lookahead token.  This behavior is undocumented and Bison
     users should not rely upon it.  Assigning to YYVAL
     unconditionally makes the parser a bit smaller, and it avoids a
     GCC warning that YYVAL may be used uninitialized.  */
  yyval = yyvsp[1-yylen];

#if YYLSP_NEEDED
  /* Similarly for the default location.  Let the user run additional
     commands if for instance locations are ranges.  */
  yyloc = yylsp[1-yylen];
  YYLLOC_DEFAULT (yyloc, (yylsp - yylen), yylen);
#endif

#if YYDEBUG
  /* We have to keep this `#if YYDEBUG', since we use variables which
     are defined only if `YYDEBUG' is set.  */
  if (yydebug)
    {
      int yyi;

      YYFPRINTF (stderr, "Reducing via rule %d (line %d), ",
		 yyn, yyrline[yyn]);

      /* Print the symbols being reduced, and their result.  */
      for (yyi = yyprhs[yyn]; yyrhs[yyi] > 0; yyi++)
	YYFPRINTF (stderr, "%s ", yytname[yyrhs[yyi]]);
      YYFPRINTF (stderr, " -> %s\n", yytname[yyr1[yyn]]);
    }
#endif

  switch (yyn) {

case 4:
#line 158 "nlmheader.y"
{
	    check_procedure = yyvsp[0].string;
	  }
    break;
case 5:
#line 162 "nlmheader.y"
{
	    nlmheader_warn (_("CODESTART is not implemented; sorry"), -1);
	    free (yyvsp[0].string);
	  }
    break;
case 6:
#line 167 "nlmheader.y"
{
	    int len;

	    strncpy (copyright_hdr->stamp, "CoPyRiGhT=", 10);
	    len = strlen (yyvsp[0].string);
	    if (len >= NLM_MAX_COPYRIGHT_MESSAGE_LENGTH)
	      {
		nlmheader_warn (_("copyright string is too long"),
				NLM_MAX_COPYRIGHT_MESSAGE_LENGTH - 1);
		len = NLM_MAX_COPYRIGHT_MESSAGE_LENGTH - 1;
	      }
	    copyright_hdr->copyrightMessageLength = len;
	    strncpy (copyright_hdr->copyrightMessage, yyvsp[0].string, len);
	    copyright_hdr->copyrightMessage[len] = '\0';
	    free (yyvsp[0].string);
	  }
    break;
case 7:
#line 184 "nlmheader.y"
{
	    custom_file = yyvsp[0].string;
	  }
    break;
case 8:
#line 188 "nlmheader.y"
{
	    /* We don't set the version stamp here, because we use the
	       version stamp to detect whether the required VERSION
	       keyword was given.  */
	    version_hdr->month = nlmlex_get_number (yyvsp[-2].string);
	    version_hdr->day = nlmlex_get_number (yyvsp[-1].string);
	    version_hdr->year = nlmlex_get_number (yyvsp[0].string);
	    free (yyvsp[-2].string);
	    free (yyvsp[-1].string);
	    free (yyvsp[0].string);
	    if (version_hdr->month < 1 || version_hdr->month > 12)
	      nlmheader_warn (_("illegal month"), -1);
	    if (version_hdr->day < 1 || version_hdr->day > 31)
	      nlmheader_warn (_("illegal day"), -1);
	    if (version_hdr->year < 1900 || version_hdr->year > 3000)
	      nlmheader_warn (_("illegal year"), -1);
	  }
    break;
case 9:
#line 206 "nlmheader.y"
{
	    debug_info = TRUE;
	  }
    break;
case 10:
#line 210 "nlmheader.y"
{
	    int len;

	    len = strlen (yyvsp[0].string);
	    if (len > NLM_MAX_DESCRIPTION_LENGTH)
	      {
		nlmheader_warn (_("description string is too long"),
				NLM_MAX_DESCRIPTION_LENGTH);
		len = NLM_MAX_DESCRIPTION_LENGTH;
	      }
	    var_hdr->descriptionLength = len;
	    strncpy (var_hdr->descriptionText, yyvsp[0].string, len);
	    var_hdr->descriptionText[len] = '\0';
	    free (yyvsp[0].string);
	  }
    break;
case 11:
#line 226 "nlmheader.y"
{
	    exit_procedure = yyvsp[0].string;
	  }
    break;
case 12:
#line 230 "nlmheader.y"
{
	    symbol_prefix = NULL;
	  }
    break;
case 13:
#line 234 "nlmheader.y"
{
	    export_symbols = string_list_append (export_symbols, yyvsp[0].list);
	  }
    break;
case 14:
#line 238 "nlmheader.y"
{
	    fixed_hdr->flags |= nlmlex_get_number (yyvsp[0].string);
	    free (yyvsp[0].string);
	  }
    break;
case 15:
#line 243 "nlmheader.y"
{
	    fixed_hdr->flags &=~ nlmlex_get_number (yyvsp[0].string);
	    free (yyvsp[0].string);
	  }
    break;
case 16:
#line 248 "nlmheader.y"
{
	    map_file = "";
	    full_map = TRUE;
	  }
    break;
case 17:
#line 253 "nlmheader.y"
{
	    map_file = yyvsp[0].string;
	    full_map = TRUE;
	  }
    break;
case 18:
#line 258 "nlmheader.y"
{
	    help_file = yyvsp[0].string;
	  }
    break;
case 19:
#line 262 "nlmheader.y"
{
	    symbol_prefix = NULL;
	  }
    break;
case 20:
#line 266 "nlmheader.y"
{
	    import_symbols = string_list_append (import_symbols, yyvsp[0].list);
	  }
    break;
case 21:
#line 270 "nlmheader.y"
{
	    input_files = string_list_append (input_files, yyvsp[0].list);
	  }
    break;
case 22:
#line 274 "nlmheader.y"
{
	    map_file = "";
	  }
    break;
case 23:
#line 278 "nlmheader.y"
{
	    map_file = yyvsp[0].string;
	  }
    break;
case 24:
#line 282 "nlmheader.y"
{
	    message_file = yyvsp[0].string;
	  }
    break;
case 25:
#line 286 "nlmheader.y"
{
	    modules = string_list_append (modules, yyvsp[0].list);
	  }
    break;
case 26:
#line 290 "nlmheader.y"
{
	    fixed_hdr->flags |= 0x2;
	  }
    break;
case 27:
#line 294 "nlmheader.y"
{
	    fixed_hdr->flags |= 0x10;
	  }
    break;
case 28:
#line 298 "nlmheader.y"
{
	    if (output_file == NULL)
	      output_file = yyvsp[0].string;
	    else
	      nlmheader_warn (_("ignoring duplicate OUTPUT statement"), -1);
	  }
    break;
case 29:
#line 305 "nlmheader.y"
{
	    fixed_hdr->flags |= 0x8;
	  }
    break;
case 30:
#line 309 "nlmheader.y"
{
	    fixed_hdr->flags |= 0x1;
	  }
    break;
case 31:
#line 313 "nlmheader.y"
{
	    int len;

	    len = strlen (yyvsp[0].string);
	    if (len >= NLM_MAX_SCREEN_NAME_LENGTH)
	      {
		nlmheader_warn (_("screen name is too long"),
				NLM_MAX_SCREEN_NAME_LENGTH);
		len = NLM_MAX_SCREEN_NAME_LENGTH;
	      }
	    var_hdr->screenNameLength = len;
	    strncpy (var_hdr->screenName, yyvsp[0].string, len);
	    var_hdr->screenName[NLM_MAX_SCREEN_NAME_LENGTH] = '\0';
	    free (yyvsp[0].string);
	  }
    break;
case 32:
#line 329 "nlmheader.y"
{
	    sharelib_file = yyvsp[0].string;
	  }
    break;
case 33:
#line 333 "nlmheader.y"
{
	    var_hdr->stackSize = nlmlex_get_number (yyvsp[0].string);
	    free (yyvsp[0].string);
	  }
    break;
case 34:
#line 338 "nlmheader.y"
{
	    start_procedure = yyvsp[0].string;
	  }
    break;
case 35:
#line 342 "nlmheader.y"
{
	    fixed_hdr->flags |= 0x4;
	  }
    break;
case 36:
#line 346 "nlmheader.y"
{
	    int len;

	    len = strlen (yyvsp[0].string);
	    if (len >= NLM_MAX_THREAD_NAME_LENGTH)
	      {
		nlmheader_warn (_("thread name is too long"),
				NLM_MAX_THREAD_NAME_LENGTH);
		len = NLM_MAX_THREAD_NAME_LENGTH;
	      }
	    var_hdr->threadNameLength = len;
	    strncpy (var_hdr->threadName, yyvsp[0].string, len);
	    var_hdr->threadName[len] = '\0';
	    free (yyvsp[0].string);
	  }
    break;
case 37:
#line 362 "nlmheader.y"
{
	    fixed_hdr->moduleType = nlmlex_get_number (yyvsp[0].string);
	    free (yyvsp[0].string);
	  }
    break;
case 38:
#line 367 "nlmheader.y"
{
	    verbose = TRUE;
	  }
    break;
case 39:
#line 371 "nlmheader.y"
{
	    long val;

	    strncpy (version_hdr->stamp, "VeRsIoN#", 8);
	    version_hdr->majorVersion = nlmlex_get_number (yyvsp[-2].string);
	    val = nlmlex_get_number (yyvsp[-1].string);
	    if (val < 0 || val > 99)
	      nlmheader_warn (_("illegal minor version number (must be between 0 and 99)"),
			      -1);
	    else
	      version_hdr->minorVersion = val;
	    val = nlmlex_get_number (yyvsp[0].string);
	    if (val < 0)
	      nlmheader_warn (_("illegal revision number (must be between 0 and 26)"),
			      -1);
	    else if (val > 26)
	      version_hdr->revision = 0;
	    else
	      version_hdr->revision = val;
	    free (yyvsp[-2].string);
	    free (yyvsp[-1].string);
	    free (yyvsp[0].string);
	  }
    break;
case 40:
#line 395 "nlmheader.y"
{
	    long val;

	    strncpy (version_hdr->stamp, "VeRsIoN#", 8);
	    version_hdr->majorVersion = nlmlex_get_number (yyvsp[-1].string);
	    val = nlmlex_get_number (yyvsp[0].string);
	    if (val < 0 || val > 99)
	      nlmheader_warn (_("illegal minor version number (must be between 0 and 99)"),
			      -1);
	    else
	      version_hdr->minorVersion = val;
	    version_hdr->revision = 0;
	    free (yyvsp[-1].string);
	    free (yyvsp[0].string);
	  }
    break;
case 41:
#line 411 "nlmheader.y"
{
	    rpc_file = yyvsp[0].string;
	  }
    break;
case 42:
#line 420 "nlmheader.y"
{
	    yyval.list = NULL;
	  }
    break;
case 43:
#line 424 "nlmheader.y"
{
	    yyval.list = yyvsp[0].list;
	  }
    break;
case 44:
#line 435 "nlmheader.y"
{
	    yyval.list = string_list_cons (yyvsp[0].string, NULL);
	  }
    break;
case 45:
#line 439 "nlmheader.y"
{
	    yyval.list = NULL;
	  }
    break;
case 46:
#line 443 "nlmheader.y"
{
	    yyval.list = string_list_append1 (yyvsp[-1].list, yyvsp[0].string);
	  }
    break;
case 47:
#line 447 "nlmheader.y"
{
	    yyval.list = yyvsp[-1].list;
	  }
    break;
case 48:
#line 456 "nlmheader.y"
{
	    if (symbol_prefix != NULL)
	      free (symbol_prefix);
	    symbol_prefix = yyvsp[-1].string;
	  }
    break;
case 49:
#line 467 "nlmheader.y"
{
	    if (symbol_prefix == NULL)
	      yyval.string = yyvsp[0].string;
	    else
	      {
		yyval.string = xmalloc (strlen (symbol_prefix) + strlen (yyvsp[0].string) + 2);
		sprintf (yyval.string, "%s@@%s", symbol_prefix, yyvsp[0].string);
		free (yyvsp[0].string);
	      }
	  }
    break;
case 50:
#line 483 "nlmheader.y"
{
	    yyval.list = NULL;
	  }
    break;
case 51:
#line 487 "nlmheader.y"
{
	    yyval.list = string_list_cons (yyvsp[-1].string, yyvsp[0].list);
	  }
    break;
}

#line 705 "/usr/share/bison-1.35/bison.simple"


  yyvsp -= yylen;
  yyssp -= yylen;
#if YYLSP_NEEDED
  yylsp -= yylen;
#endif

#if YYDEBUG
  if (yydebug)
    {
      short *yyssp1 = yyss - 1;
      YYFPRINTF (stderr, "state stack now");
      while (yyssp1 != yyssp)
	YYFPRINTF (stderr, " %d", *++yyssp1);
      YYFPRINTF (stderr, "\n");
    }
#endif

  *++yyvsp = yyval;
#if YYLSP_NEEDED
  *++yylsp = yyloc;
#endif

  /* Now `shift' the result of the reduction.  Determine what state
     that goes to, based on the state we popped back to and the rule
     number reduced by.  */

  yyn = yyr1[yyn];

  yystate = yypgoto[yyn - YYNTBASE] + *yyssp;
  if (yystate >= 0 && yystate <= YYLAST && yycheck[yystate] == *yyssp)
    yystate = yytable[yystate];
  else
    yystate = yydefgoto[yyn - YYNTBASE];

  goto yynewstate;


/*------------------------------------.
| yyerrlab -- here on detecting error |
`------------------------------------*/
yyerrlab:
  /* If not already recovering from an error, report this error.  */
  if (!yyerrstatus)
    {
      ++yynerrs;

#ifdef YYERROR_VERBOSE
      yyn = yypact[yystate];

      if (yyn > YYFLAG && yyn < YYLAST)
	{
	  YYSIZE_T yysize = 0;
	  char *yymsg;
	  int yyx, yycount;

	  yycount = 0;
	  /* Start YYX at -YYN if negative to avoid negative indexes in
	     YYCHECK.  */
	  for (yyx = yyn < 0 ? -yyn : 0;
	       yyx < (int) (sizeof (yytname) / sizeof (char *)); yyx++)
	    if (yycheck[yyx + yyn] == yyx)
	      yysize += yystrlen (yytname[yyx]) + 15, yycount++;
	  yysize += yystrlen ("parse error, unexpected ") + 1;
	  yysize += yystrlen (yytname[YYTRANSLATE (yychar)]);
	  yymsg = (char *) YYSTACK_ALLOC (yysize);
	  if (yymsg != 0)
	    {
	      char *yyp = yystpcpy (yymsg, "parse error, unexpected ");
	      yyp = yystpcpy (yyp, yytname[YYTRANSLATE (yychar)]);

	      if (yycount < 5)
		{
		  yycount = 0;
		  for (yyx = yyn < 0 ? -yyn : 0;
		       yyx < (int) (sizeof (yytname) / sizeof (char *));
		       yyx++)
		    if (yycheck[yyx + yyn] == yyx)
		      {
			const char *yyq = ! yycount ? ", expecting " : " or ";
			yyp = yystpcpy (yyp, yyq);
			yyp = yystpcpy (yyp, yytname[yyx]);
			yycount++;
		      }
		}
	      yyerror (yymsg);
	      YYSTACK_FREE (yymsg);
	    }
	  else
	    yyerror ("parse error; also virtual memory exhausted");
	}
      else
#endif /* defined (YYERROR_VERBOSE) */
	yyerror ("parse error");
    }
  goto yyerrlab1;


/*--------------------------------------------------.
| yyerrlab1 -- error raised explicitly by an action |
`--------------------------------------------------*/
yyerrlab1:
  if (yyerrstatus == 3)
    {
      /* If just tried and failed to reuse lookahead token after an
	 error, discard it.  */

      /* return failure if at end of input */
      if (yychar == YYEOF)
	YYABORT;
      YYDPRINTF ((stderr, "Discarding token %d (%s).\n",
		  yychar, yytname[yychar1]));
      yychar = YYEMPTY;
    }

  /* Else will try to reuse lookahead token after shifting the error
     token.  */

  yyerrstatus = 3;		/* Each real token shifted decrements this */

  goto yyerrhandle;


/*-------------------------------------------------------------------.
| yyerrdefault -- current state does not do anything special for the |
| error token.                                                       |
`-------------------------------------------------------------------*/
yyerrdefault:
#if 0
  /* This is wrong; only states that explicitly want error tokens
     should shift them.  */

  /* If its default is to accept any token, ok.  Otherwise pop it.  */
  yyn = yydefact[yystate];
  if (yyn)
    goto yydefault;
#endif


/*---------------------------------------------------------------.
| yyerrpop -- pop the current state because it cannot handle the |
| error token                                                    |
`---------------------------------------------------------------*/
yyerrpop:
  if (yyssp == yyss)
    YYABORT;
  yyvsp--;
  yystate = *--yyssp;
#if YYLSP_NEEDED
  yylsp--;
#endif

#if YYDEBUG
  if (yydebug)
    {
      short *yyssp1 = yyss - 1;
      YYFPRINTF (stderr, "Error: state stack now");
      while (yyssp1 != yyssp)
	YYFPRINTF (stderr, " %d", *++yyssp1);
      YYFPRINTF (stderr, "\n");
    }
#endif

/*--------------.
| yyerrhandle.  |
`--------------*/
yyerrhandle:
  yyn = yypact[yystate];
  if (yyn == YYFLAG)
    goto yyerrdefault;

  yyn += YYTERROR;
  if (yyn < 0 || yyn > YYLAST || yycheck[yyn] != YYTERROR)
    goto yyerrdefault;

  yyn = yytable[yyn];
  if (yyn < 0)
    {
      if (yyn == YYFLAG)
	goto yyerrpop;
      yyn = -yyn;
      goto yyreduce;
    }
  else if (yyn == 0)
    goto yyerrpop;

  if (yyn == YYFINAL)
    YYACCEPT;

  YYDPRINTF ((stderr, "Shifting error token, "));

  *++yyvsp = yylval;
#if YYLSP_NEEDED
  *++yylsp = yylloc;
#endif

  yystate = yyn;
  goto yynewstate;


/*-------------------------------------.
| yyacceptlab -- YYACCEPT comes here.  |
`-------------------------------------*/
yyacceptlab:
  yyresult = 0;
  goto yyreturn;

/*-----------------------------------.
| yyabortlab -- YYABORT comes here.  |
`-----------------------------------*/
yyabortlab:
  yyresult = 1;
  goto yyreturn;

/*---------------------------------------------.
| yyoverflowab -- parser overflow comes here.  |
`---------------------------------------------*/
yyoverflowlab:
  yyerror ("parser stack overflow");
  yyresult = 2;
  /* Fall through.  */

yyreturn:
#ifndef yyoverflow
  if (yyss != yyssa)
    YYSTACK_FREE (yyss);
#endif
  return yyresult;
}
#line 492 "nlmheader.y"


/* If strerror is just a macro, we want to use the one from libiberty
   since it will handle undefined values.  */
#undef strerror
extern char *strerror PARAMS ((int));

/* The lexer is simple, too simple for flex.  Keywords are only
   recognized at the start of lines.  Everything else must be an
   argument.  A comma is treated as whitespace.  */

/* The states the lexer can be in.  */

enum lex_state
{
  /* At the beginning of a line.  */
  BEGINNING_OF_LINE,
  /* In the middle of a line.  */
  IN_LINE
};

/* We need to keep a stack of files to handle file inclusion.  */

struct input
{
  /* The file to read from.  */
  FILE *file;
  /* The name of the file.  */
  char *name;
  /* The current line number.  */
  int lineno;
  /* The current state.  */
  enum lex_state state;
  /* The next file on the stack.  */
  struct input *next;
};

/* The current input file.  */

static struct input current;

/* The character which introduces comments.  */
#define COMMENT_CHAR '#'

/* Start the lexer going on the main input file.  */

bfd_boolean
nlmlex_file (const char *name)
{
  current.next = NULL;
  return nlmlex_file_open (name);
}

/* Start the lexer going on a subsidiary input file.  */

static void
nlmlex_file_push (const char *name)
{
  struct input *push;

  push = (struct input *) xmalloc (sizeof (struct input));
  *push = current;
  if (nlmlex_file_open (name))
    current.next = push;
  else
    {
      current = *push;
      free (push);
    }
}

/* Start lexing from a file.  */

static bfd_boolean
nlmlex_file_open (const char *name)
{
  current.file = fopen (name, "r");
  if (current.file == NULL)
    {
      fprintf (stderr, "%s:%s: %s\n", program_name, name, strerror (errno));
      ++parse_errors;
      return FALSE;
    }
  current.name = xstrdup (name);
  current.lineno = 1;
  current.state = BEGINNING_OF_LINE;
  return TRUE;
}

/* Table used to turn keywords into tokens.  */

struct keyword_tokens_struct
{
  const char *keyword;
  int token;
};

struct keyword_tokens_struct keyword_tokens[] =
{
  { "CHECK", CHECK },
  { "CODESTART", CODESTART },
  { "COPYRIGHT", COPYRIGHT },
  { "CUSTOM", CUSTOM },
  { "DATE", DATE },
  { "DEBUG", DEBUG },
  { "DESCRIPTION", DESCRIPTION },
  { "EXIT", EXIT },
  { "EXPORT", EXPORT },
  { "FLAG_ON", FLAG_ON },
  { "FLAG_OFF", FLAG_OFF },
  { "FULLMAP", FULLMAP },
  { "HELP", HELP },
  { "IMPORT", IMPORT },
  { "INPUT", INPUT },
  { "MAP", MAP },
  { "MESSAGES", MESSAGES },
  { "MODULE", MODULE },
  { "MULTIPLE", MULTIPLE },
  { "OS_DOMAIN", OS_DOMAIN },
  { "OUTPUT", OUTPUT },
  { "PSEUDOPREEMPTION", PSEUDOPREEMPTION },
  { "REENTRANT", REENTRANT },
  { "SCREENNAME", SCREENNAME },
  { "SHARELIB", SHARELIB },
  { "STACK", STACK },
  { "STACKSIZE", STACK },
  { "START", START },
  { "SYNCHRONIZE", SYNCHRONIZE },
  { "THREADNAME", THREADNAME },
  { "TYPE", TYPE },
  { "VERBOSE", VERBOSE },
  { "VERSION", VERSIONK },
  { "XDCDATA", XDCDATA }
};

#define KEYWORD_COUNT (sizeof (keyword_tokens) / sizeof (keyword_tokens[0]))

/* The lexer accumulates strings in these variables.  */
static char *lex_buf;
static int lex_size;
static int lex_pos;

/* Start accumulating strings into the buffer.  */
#define BUF_INIT() \
  ((void) (lex_buf != NULL ? lex_pos = 0 : nlmlex_buf_init ()))

static int
nlmlex_buf_init (void)
{
  lex_size = 10;
  lex_buf = xmalloc (lex_size + 1);
  lex_pos = 0;
  return 0;
}

/* Finish a string in the buffer.  */
#define BUF_FINISH() ((void) (lex_buf[lex_pos] = '\0'))

/* Accumulate a character into the buffer.  */
#define BUF_ADD(c) \
  ((void) (lex_pos < lex_size \
	   ? lex_buf[lex_pos++] = (c) \
	   : nlmlex_buf_add (c)))

static char
nlmlex_buf_add (int c)
{
  if (lex_pos >= lex_size)
    {
      lex_size *= 2;
      lex_buf = xrealloc (lex_buf, lex_size + 1);
    }

  return lex_buf[lex_pos++] = c;
}

/* The lexer proper.  This is called by the bison generated parsing
   code.  */

static int
yylex (void)
{
  int c;

tail_recurse:

  c = getc (current.file);

  /* Commas are treated as whitespace characters.  */
  while (ISSPACE (c) || c == ',')
    {
      current.state = IN_LINE;
      if (c == '\n')
	{
	  ++current.lineno;
	  current.state = BEGINNING_OF_LINE;
	}
      c = getc (current.file);
    }

  /* At the end of the file we either pop to the previous file or
     finish up.  */
  if (c == EOF)
    {
      fclose (current.file);
      free (current.name);
      if (current.next == NULL)
	return 0;
      else
	{
	  struct input *next;

	  next = current.next;
	  current = *next;
	  free (next);
	  goto tail_recurse;
	}
    }

  /* A comment character always means to drop everything until the
     next newline.  */
  if (c == COMMENT_CHAR)
    {
      do
	{
	  c = getc (current.file);
	}
      while (c != '\n');
      ++current.lineno;
      current.state = BEGINNING_OF_LINE;
      goto tail_recurse;
    }

  /* An '@@' introduces an include file.  */
  if (c == '@@')
    {
      do
	{
	  c = getc (current.file);
	  if (c == '\n')
	    ++current.lineno;
	}
      while (ISSPACE (c));
      BUF_INIT ();
      while (! ISSPACE (c) && c != EOF)
	{
	  BUF_ADD (c);
	  c = getc (current.file);
	}
      BUF_FINISH ();

      ungetc (c, current.file);

      nlmlex_file_push (lex_buf);
      goto tail_recurse;
    }

  /* A non-space character at the start of a line must be the start of
     a keyword.  */
  if (current.state == BEGINNING_OF_LINE)
    {
      BUF_INIT ();
      while (ISALNUM (c) || c == '_')
	{
	  BUF_ADD (TOUPPER (c));
	  c = getc (current.file);
	}
      BUF_FINISH ();

      if (c != EOF && ! ISSPACE (c) && c != ',')
	{
	  nlmheader_identify ();
	  fprintf (stderr, _("%s:%d: illegal character in keyword: %c\n"),
		   current.name, current.lineno, c);
	}
      else
	{
	  unsigned int i;

	  for (i = 0; i < KEYWORD_COUNT; i++)
	    {
	      if (lex_buf[0] == keyword_tokens[i].keyword[0]
		  && strcmp (lex_buf, keyword_tokens[i].keyword) == 0)
		{
		  /* Pushing back the final whitespace avoids worrying
		     about \n here.  */
		  ungetc (c, current.file);
		  current.state = IN_LINE;
		  return keyword_tokens[i].token;
		}
	    }

	  nlmheader_identify ();
	  fprintf (stderr, _("%s:%d: unrecognized keyword: %s\n"),
		   current.name, current.lineno, lex_buf);
	}

      ++parse_errors;
      /* Treat the rest of this line as a comment.  */
      ungetc (COMMENT_CHAR, current.file);
      goto tail_recurse;
    }

  /* Parentheses just represent themselves.  */
  if (c == '(' || c == ')')
    return c;

  /* Handle quoted strings.  */
  if (c == '"' || c == '\'')
    {
      int quote;
      int start_lineno;

      quote = c;
      start_lineno = current.lineno;

      c = getc (current.file);
      BUF_INIT ();
      while (c != quote && c != EOF)
	{
	  BUF_ADD (c);
	  if (c == '\n')
	    ++current.lineno;
	  c = getc (current.file);
	}
      BUF_FINISH ();

      if (c == EOF)
	{
	  nlmheader_identify ();
	  fprintf (stderr, _("%s:%d: end of file in quoted string\n"),
		   current.name, start_lineno);
	  ++parse_errors;
	}

      /* FIXME: Possible memory leak.  */
      yylval.string = xstrdup (lex_buf);
      return QUOTED_STRING;
    }

  /* Gather a generic argument.  */
  BUF_INIT ();
  while (! ISSPACE (c)
	 && c != ','
	 && c != COMMENT_CHAR
	 && c != '('
	 && c != ')')
    {
      BUF_ADD (c);
      c = getc (current.file);
    }
  BUF_FINISH ();

  ungetc (c, current.file);

  /* FIXME: Possible memory leak.  */
  yylval.string = xstrdup (lex_buf);
  return STRING;
}

/* Get a number from a string.  */

static long
nlmlex_get_number (const char *s)
{
  long ret;
  char *send;

  ret = strtol (s, &send, 10);
  if (*send != '\0')
    nlmheader_warn (_("bad number"), -1);
  return ret;
}

/* Prefix the nlmconv warnings with a note as to where they come from.
   We don't use program_name on every warning, because then some
   versions of the emacs next-error function can't recognize the line
   number.  */

static void
nlmheader_identify (void)
{
  static int done;

  if (! done)
    {
      fprintf (stderr, _("%s: problems in NLM command language input:\n"),
	       program_name);
      done = 1;
    }
}

/* Issue a warning.  */

static void
nlmheader_warn (const char *s, int imax)
{
  nlmheader_identify ();
  fprintf (stderr, "%s:%d: %s", current.name, current.lineno, s);
  if (imax != -1)
    fprintf (stderr, " (max %d)", imax);
  fprintf (stderr, "\n");
}

/* Report an error.  */

static void
nlmheader_error (const char *s)
{
  nlmheader_warn (s, -1);
  ++parse_errors;
}

/* Add a string to a string list.  */

static struct string_list *
string_list_cons (char *s, struct string_list *l)
{
  struct string_list *ret;

  ret = (struct string_list *) xmalloc (sizeof (struct string_list));
  ret->next = l;
  ret->string = s;
  return ret;
}

/* Append a string list to another string list.  */

static struct string_list *
string_list_append (struct string_list *l1, struct string_list *l2)
{
  register struct string_list **pp;

  for (pp = &l1; *pp != NULL; pp = &(*pp)->next)
    ;
  *pp = l2;
  return l1;
}

/* Append a string to a string list.  */

static struct string_list *
string_list_append1 (struct string_list *l, char *s)
{
  struct string_list *n;
  register struct string_list **pp;

  n = (struct string_list *) xmalloc (sizeof (struct string_list));
  n->next = NULL;
  n->string = s;
  for (pp = &l; *pp != NULL; pp = &(*pp)->next)
    ;
  *pp = n;
  return l;
}

/* Duplicate a string in memory.  */

static char *
xstrdup (const char *s)
{
  unsigned long len;
  char *ret;

  len = strlen (s);
  ret = xmalloc (len + 1);
  strcpy (ret, s);
  return ret;
}
@


1.5
log
@Resolve merge conflicts, adjust method of W^X handing (.sh files)
remove testsuites (not useable) remove mmalloc (not part of new binutils).
@
text
@d44 1
a44 1
     Copyright 1993, 1994, 1995, 1997, 1998, 2001, 2002
d136 15
a150 16
static int yylex PARAMS ((void));
static void nlmlex_file_push PARAMS ((const char *));
static bfd_boolean nlmlex_file_open PARAMS ((const char *));
static int nlmlex_buf_init PARAMS ((void));
static char nlmlex_buf_add PARAMS ((int));
static long nlmlex_get_number PARAMS ((const char *));
static void nlmheader_identify PARAMS ((void));
static void nlmheader_warn PARAMS ((const char *, int));
static void nlmheader_error PARAMS ((const char *));
static struct string_list * string_list_cons PARAMS ((char *,
						      struct string_list *));
static struct string_list * string_list_append PARAMS ((struct string_list *,
							struct string_list *));
static struct string_list * string_list_append1 PARAMS ((struct string_list *,
							 char *));
static char *xstrdup PARAMS ((const char *));
d153 1
a153 1
#line 113 "nlmheader.y"
d245 6
a250 6
       0,   144,   150,   152,   157,   162,   167,   184,   188,   206,
     210,   226,   230,   230,   238,   243,   248,   253,   258,   262,
     262,   270,   274,   278,   282,   286,   290,   294,   298,   305,
     309,   313,   329,   333,   338,   342,   346,   362,   367,   371,
     395,   411,   419,   424,   434,   439,   443,   447,   455,   466,
     482,   487
d1068 1
a1068 1
#line 159 "nlmheader.y"
d1074 1
a1074 1
#line 163 "nlmheader.y"
d1081 1
a1081 1
#line 168 "nlmheader.y"
d1100 1
a1100 1
#line 185 "nlmheader.y"
d1106 1
a1106 1
#line 189 "nlmheader.y"
d1126 1
a1126 1
#line 207 "nlmheader.y"
d1132 1
a1132 1
#line 211 "nlmheader.y"
d1150 1
a1150 1
#line 227 "nlmheader.y"
d1156 1
a1156 1
#line 231 "nlmheader.y"
d1162 1
a1162 1
#line 235 "nlmheader.y"
d1168 1
a1168 1
#line 239 "nlmheader.y"
d1175 1
a1175 1
#line 244 "nlmheader.y"
d1182 1
a1182 1
#line 249 "nlmheader.y"
d1189 1
a1189 1
#line 254 "nlmheader.y"
d1196 1
a1196 1
#line 259 "nlmheader.y"
d1202 1
a1202 1
#line 263 "nlmheader.y"
d1208 1
a1208 1
#line 267 "nlmheader.y"
d1214 1
a1214 1
#line 271 "nlmheader.y"
d1220 1
a1220 1
#line 275 "nlmheader.y"
d1226 1
a1226 1
#line 279 "nlmheader.y"
d1232 1
a1232 1
#line 283 "nlmheader.y"
d1238 1
a1238 1
#line 287 "nlmheader.y"
d1244 1
a1244 1
#line 291 "nlmheader.y"
d1250 1
a1250 1
#line 295 "nlmheader.y"
d1256 1
a1256 1
#line 299 "nlmheader.y"
d1265 1
a1265 1
#line 306 "nlmheader.y"
d1271 1
a1271 1
#line 310 "nlmheader.y"
d1277 1
a1277 1
#line 314 "nlmheader.y"
d1295 1
a1295 1
#line 330 "nlmheader.y"
d1301 1
a1301 1
#line 334 "nlmheader.y"
d1308 1
a1308 1
#line 339 "nlmheader.y"
d1314 1
a1314 1
#line 343 "nlmheader.y"
d1320 1
a1320 1
#line 347 "nlmheader.y"
d1338 1
a1338 1
#line 363 "nlmheader.y"
d1345 1
a1345 1
#line 368 "nlmheader.y"
d1351 1
a1351 1
#line 372 "nlmheader.y"
d1377 1
a1377 1
#line 396 "nlmheader.y"
d1395 1
a1395 1
#line 412 "nlmheader.y"
d1401 1
a1401 1
#line 421 "nlmheader.y"
d1407 1
a1407 1
#line 425 "nlmheader.y"
d1413 1
a1413 1
#line 436 "nlmheader.y"
d1419 1
a1419 1
#line 440 "nlmheader.y"
d1425 1
a1425 1
#line 444 "nlmheader.y"
d1431 1
a1431 1
#line 448 "nlmheader.y"
d1437 1
a1437 1
#line 457 "nlmheader.y"
d1445 1
a1445 1
#line 468 "nlmheader.y"
d1458 1
a1458 1
#line 484 "nlmheader.y"
d1464 1
a1464 1
#line 488 "nlmheader.y"
d1702 1
a1702 1
#line 493 "nlmheader.y"
d1750 1
a1750 2
nlmlex_file (name)
     const char *name;
d1759 1
a1759 2
nlmlex_file_push (name)
     const char *name;
d1777 1
a1777 2
nlmlex_file_open (name)
     const char *name;
d1850 1
a1850 1
nlmlex_buf_init ()
d1868 1
a1868 2
nlmlex_buf_add (c)
     int c;
d1883 1
a1883 1
yylex ()
d2066 1
a2066 2
nlmlex_get_number (s)
     const char *s;
d2083 1
a2083 1
nlmheader_identify ()
d2098 1
a2098 3
nlmheader_warn (s, imax)
     const char *s;
     int imax;
d2110 1
a2110 2
nlmheader_error (s)
     const char *s;
d2119 1
a2119 3
string_list_cons (s, l)
     char *s;
     struct string_list *l;
d2132 1
a2132 3
string_list_append (l1, l2)
     struct string_list *l1;
     struct string_list *l2;
d2145 1
a2145 3
string_list_append1 (l, s)
     struct string_list *l;
     char *s;
d2162 1
a2162 2
xstrdup (s)
     const char *s;
@


1.4
log
@resolve conflicts.
@
text
@d1 2
a2 3

/*  A Bison parser, made from nlmheader.y
    by GNU Bison version 1.28  */
d6 35
a40 35
#define	CHECK	257
#define	CODESTART	258
#define	COPYRIGHT	259
#define	CUSTOM	260
#define	DATE	261
#define	DEBUG	262
#define	DESCRIPTION	263
#define	EXIT	264
#define	EXPORT	265
#define	FLAG_ON	266
#define	FLAG_OFF	267
#define	FULLMAP	268
#define	HELP	269
#define	IMPORT	270
#define	INPUT	271
#define	MAP	272
#define	MESSAGES	273
#define	MODULE	274
#define	MULTIPLE	275
#define	OS_DOMAIN	276
#define	OUTPUT	277
#define	PSEUDOPREEMPTION	278
#define	REENTRANT	279
#define	SCREENNAME	280
#define	SHARELIB	281
#define	STACK	282
#define	START	283
#define	SYNCHRONIZE	284
#define	THREADNAME	285
#define	TYPE	286
#define	VERBOSE	287
#define	VERSIONK	288
#define	XDCDATA	289
#define	STRING	290
#define	QUOTED_STRING	291
d44 2
a45 1
     Copyright 1993, 1994, 1995, 1997, 1998 Free Software Foundation, Inc.
d72 1
a72 1
#include <ansidecl.h>
d74 1
a74 1
#include <ctype.h>
d95 1
a95 1
boolean debug_info;
d105 1
a105 1
boolean full_map;
d121 1
a121 1
boolean verbose;
d138 1
a138 1
static boolean nlmlex_file_open PARAMS ((const char *));
d154 2
a155 1
#line 112 "nlmheader.y"
d160 3
a162 6
} YYSTYPE;
#include <stdio.h>

#ifndef __cplusplus
#ifndef __STDC__
#define const
d164 2
d174 1
d177 33
a209 31
static const char yytranslate[] = {     0,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,    38,
    39,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     1,     3,     4,     5,     6,
     7,     8,     9,    10,    11,    12,    13,    14,    15,    16,
    17,    18,    19,    20,    21,    22,    23,    24,    25,    26,
    27,    28,    29,    30,    31,    32,    33,    34,    35,    36,
    37
d212 9
a220 8
#if YYDEBUG != 0
static const short yyprhs[] = {     0,
     0,     2,     3,     6,     9,    12,    15,    18,    23,    25,
    28,    31,    32,    36,    39,    42,    44,    47,    50,    51,
    55,    58,    60,    63,    66,    69,    71,    73,    76,    78,
    80,    83,    86,    89,    92,    94,    97,   100,   102,   107,
   111,   114,   115,   117,   119,   121,   124,   127,   131,   133,
   134
d222 16
a237 16

static const short yyrhs[] = {    41,
     0,     0,    42,    41,     0,     3,    36,     0,     4,    36,
     0,     5,    37,     0,     6,    36,     0,     7,    36,    36,
    36,     0,     8,     0,     9,    37,     0,    10,    36,     0,
     0,    11,    43,    45,     0,    12,    36,     0,    13,    36,
     0,    14,     0,    14,    36,     0,    15,    36,     0,     0,
    16,    44,    45,     0,    17,    49,     0,    18,     0,    18,
    36,     0,    19,    36,     0,    20,    49,     0,    21,     0,
    22,     0,    23,    36,     0,    24,     0,    25,     0,    26,
    37,     0,    27,    36,     0,    28,    36,     0,    29,    36,
     0,    30,     0,    31,    37,     0,    32,    36,     0,    33,
     0,    34,    36,    36,    36,     0,    34,    36,    36,     0,
    35,    36,     0,     0,    46,     0,    48,     0,    47,     0,
    46,    48,     0,    46,    47,     0,    38,    36,    39,     0,
    36,     0,     0,    36,    49,     0
d242 10
a251 8
#if YYDEBUG != 0
static const short yyrline[] = { 0,
   143,   149,   151,   156,   161,   166,   183,   187,   205,   209,
   225,   229,   234,   237,   242,   247,   252,   257,   261,   266,
   269,   273,   277,   281,   285,   289,   293,   297,   304,   308,
   312,   328,   332,   337,   341,   345,   361,   366,   370,   394,
   410,   418,   423,   433,   438,   442,   446,   454,   465,   481,
   486
d256 1
a256 1
#if YYDEBUG != 0 || defined (YYERROR_VERBOSE)
d258 12
a269 7
static const char * const yytname[] = {   "$","error","$undefined.","CHECK",
"CODESTART","COPYRIGHT","CUSTOM","DATE","DEBUG","DESCRIPTION","EXIT","EXPORT",
"FLAG_ON","FLAG_OFF","FULLMAP","HELP","IMPORT","INPUT","MAP","MESSAGES","MODULE",
"MULTIPLE","OS_DOMAIN","OUTPUT","PSEUDOPREEMPTION","REENTRANT","SCREENNAME",
"SHARELIB","STACK","START","SYNCHRONIZE","THREADNAME","TYPE","VERBOSE","VERSIONK",
"XDCDATA","STRING","QUOTED_STRING","'('","')'","file","commands","command","@@1",
"@@2","symbol_list_opt","symbol_list","symbol_prefix","symbol","string_list", NULL
d273 9
a281 7
static const short yyr1[] = {     0,
    40,    41,    41,    42,    42,    42,    42,    42,    42,    42,
    42,    43,    42,    42,    42,    42,    42,    42,    44,    42,
    42,    42,    42,    42,    42,    42,    42,    42,    42,    42,
    42,    42,    42,    42,    42,    42,    42,    42,    42,    42,
    42,    45,    45,    46,    46,    46,    46,    47,    48,    49,
    49
d284 9
a292 7
static const short yyr2[] = {     0,
     1,     0,     2,     2,     2,     2,     2,     4,     1,     2,
     2,     0,     3,     2,     2,     1,     2,     2,     0,     3,
     2,     1,     2,     2,     2,     1,     1,     2,     1,     1,
     2,     2,     2,     2,     1,     2,     2,     1,     4,     3,
     2,     0,     1,     1,     1,     2,     2,     3,     1,     0,
     2
d295 14
a308 10
static const short yydefact[] = {     2,
     0,     0,     0,     0,     0,     9,     0,     0,    12,     0,
     0,    16,     0,    19,    50,    22,     0,    50,    26,    27,
     0,    29,    30,     0,     0,     0,     0,    35,     0,     0,
    38,     0,     0,     1,     2,     4,     5,     6,     7,     0,
    10,    11,    42,    14,    15,    17,    18,    42,    50,    21,
    23,    24,    25,    28,    31,    32,    33,    34,    36,    37,
     0,    41,     3,     0,    49,     0,    13,    43,    45,    44,
    20,    51,    40,     8,     0,    47,    46,    39,    48,     0,
     0,     0
d311 3
a313 2
static const short yydefgoto[] = {    80,
    34,    35,    43,    48,    67,    68,    69,    70,    50
d316 11
a326 10
static const short yypact[] = {    -3,
    -1,     1,     2,     4,     5,-32768,     6,     8,-32768,     9,
    10,    11,    12,-32768,    13,    14,    16,    13,-32768,-32768,
    17,-32768,-32768,    18,    20,    21,    22,-32768,    23,    25,
-32768,    26,    27,-32768,    -3,-32768,-32768,-32768,-32768,    29,
-32768,-32768,    -2,-32768,-32768,-32768,-32768,    -2,    13,-32768,
-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,
    30,-32768,-32768,    31,-32768,    32,-32768,    -2,-32768,-32768,
-32768,-32768,    33,-32768,     3,-32768,-32768,-32768,-32768,    38,
    51,-32768
d329 3
a331 2
static const short yypgoto[] = {-32768,
    19,-32768,-32768,-32768,    24,-32768,    -9,     7,    15
d338 10
a347 9
static const short yytable[] = {     1,
     2,     3,     4,     5,     6,     7,     8,     9,    10,    11,
    12,    13,    14,    15,    16,    17,    18,    19,    20,    21,
    22,    23,    24,    25,    26,    27,    28,    29,    30,    31,
    32,    33,    53,    65,    36,    66,    37,    81,    38,    39,
    40,    79,    41,    42,    44,    45,    46,    47,    49,    51,
    82,    52,    54,    63,    55,    56,    57,    58,    76,    59,
    60,    61,    62,    72,    64,    73,    74,    75,    78,     0,
     0,    71,     0,     0,    77
d350 10
a359 9
static const short yycheck[] = {     3,
     4,     5,     6,     7,     8,     9,    10,    11,    12,    13,
    14,    15,    16,    17,    18,    19,    20,    21,    22,    23,
    24,    25,    26,    27,    28,    29,    30,    31,    32,    33,
    34,    35,    18,    36,    36,    38,    36,     0,    37,    36,
    36,    39,    37,    36,    36,    36,    36,    36,    36,    36,
     0,    36,    36,    35,    37,    36,    36,    36,    68,    37,
    36,    36,    36,    49,    36,    36,    36,    36,    36,    -1,
    -1,    48,    -1,    -1,    68
d362 1
a362 2
#line 3 "/usr/share/bison/bison.simple"
/* This file comes from bison-1.28.  */
d365 3
a367 1
   Copyright (C) 1984, 1989, 1990 Free Software Foundation, Inc.
d389 60
a448 46
/* This is the parser code that is written into each bison parser
  when the %semantic_parser declaration is not specified in the grammar.
  It was written by Richard Stallman by simplifying the hairy parser
  used when %semantic_parser is specified.  */

#ifndef YYSTACK_USE_ALLOCA
#ifdef alloca
#define YYSTACK_USE_ALLOCA
#else /* alloca not defined */
#ifdef __GNUC__
#define YYSTACK_USE_ALLOCA
#define alloca __builtin_alloca
#else /* not GNU C.  */
#if (!defined (__STDC__) && defined (sparc)) || defined (__sparc__) || defined (__sparc) || defined (__sgi) || (defined (__sun) && defined (__i386))
#define YYSTACK_USE_ALLOCA
#include <alloca.h>
#else /* not sparc */
/* We think this test detects Watcom and Microsoft C.  */
/* This used to test MSDOS, but that is a bad idea
   since that symbol is in the user namespace.  */
#if (defined (_MSDOS) || defined (_MSDOS_)) && !defined (__TURBOC__)
#if 0 /* No need for malloc.h, which pollutes the namespace;
	 instead, just don't use alloca.  */
#include <malloc.h>
#endif
#else /* not MSDOS, or __TURBOC__ */
#if defined(_AIX)
/* I don't know what this was needed for, but it pollutes the namespace.
   So I turned it off.   rms, 2 May 1997.  */
/* #include <malloc.h>  */
 #pragma alloca
#define YYSTACK_USE_ALLOCA
#else /* not MSDOS, or __TURBOC__, or _AIX */
#if 0
#ifdef __hpux /* haible@@ilog.fr says this works for HPUX 9.05 and up,
		 and on HPUX 10.  Eventually we can turn this on.  */
#define YYSTACK_USE_ALLOCA
#define alloca __builtin_alloca
#endif /* __hpux */
#endif
#endif /* not _AIX */
#endif /* not MSDOS, or __TURBOC__ */
#endif /* not sparc */
#endif /* not GNU C */
#endif /* alloca not defined */
#endif /* YYSTACK_USE_ALLOCA not defined */
d450 63
a512 4
#ifdef YYSTACK_USE_ALLOCA
#define YYSTACK_ALLOC alloca
#else
#define YYSTACK_ALLOC malloc
a514 4
/* Note: there must be only one dollar sign in this file.
   It is replaced by the list of actions, each action
   as one case of the switch.  */

d522 2
a523 3
/* Like YYERROR except do call yyerror.
   This remains here temporarily to ease the
   transition to the new meaning of YYERROR, for GCC.
d527 1
a527 1
#define YYBACKUP(token, value) \
d530 3
a532 1
    { yychar = (token), yylval = (value);			\
d538 4
a541 1
    { yyerror ("syntax error: cannot back up"); YYERROR; }	\
a546 21
#ifndef YYPURE
#define YYLEX		yylex()
#endif

#ifdef YYPURE
#ifdef YYLSP_NEEDED
#ifdef YYLEX_PARAM
#define YYLEX		yylex(&yylval, &yylloc, YYLEX_PARAM)
#else
#define YYLEX		yylex(&yylval, &yylloc)
#endif
#else /* not YYLSP_NEEDED */
#ifdef YYLEX_PARAM
#define YYLEX		yylex(&yylval, YYLEX_PARAM)
#else
#define YYLEX		yylex(&yylval)
#endif
#endif /* not YYLSP_NEEDED */
#endif

/* If nonreentrant, generate the variables here */
d548 2
a549 1
#ifndef YYPURE
d551 8
a558 7
int	yychar;			/*  the lookahead symbol		*/
YYSTYPE	yylval;			/*  the semantic value of the		*/
				/*  lookahead symbol			*/

#ifdef YYLSP_NEEDED
YYLTYPE yylloc;			/*  location data for the lookahead	*/
				/*  symbol				*/
a560 8
int yynerrs;			/*  number of parse errors so far       */
#endif  /* not YYPURE */

#if YYDEBUG != 0
int yydebug;			/*  nonzero means print parse trace	*/
/* Since this is uninitialized, it does not stop multiple parsers
   from coexisting.  */
#endif
d562 40
a601 1
/*  YYINITDEPTH indicates the initial size of the parser's stacks	*/
d603 1
d605 1
a605 1
#define YYINITDEPTH 200
d608 6
a613 2
/*  YYMAXDEPTH is the maximum size the stacks can grow to
    (effective only if the built-in stack extension method is used).  */
d616 1
a616 1
#undef YYMAXDEPTH
d620 1
a620 1
#define YYMAXDEPTH 10000
d623 16
a638 9
/* Define __yy_memcpy.  Note that the size argument
   should be passed with type unsigned int, because that is what the non-GCC
   definitions require.  With GCC, __builtin_memcpy takes an arg
   of type size_t, but it can handle unsigned int.  */

#if __GNUC__ > 1		/* GNU C and GNU C++ define this.  */
#define __yy_memcpy(TO,FROM,COUNT)	__builtin_memcpy(TO,FROM,COUNT)
#else				/* not GNU C or C++ */
#ifndef __cplusplus
d640 2
a641 11
/* This is the most reliable way to avoid incompatibilities
   in available built-in functions on various systems.  */
static void
__yy_memcpy (to, from, count)
     char *to;
     char *from;
     unsigned int count;
{
  register char *f = from;
  register char *t = to;
  register int i = count;
d643 1
a643 2
  while (i-- > 0)
    *t++ = *f++;
d645 2
d648 17
a664 1
#else /* __cplusplus */
d666 2
a667 8
/* This is the most reliable way to avoid incompatibilities
   in available built-in functions on various systems.  */
static void
__yy_memcpy (char *to, char *from, unsigned int count)
{
  register char *t = to;
  register char *f = from;
  register int i = count;
d669 1
a669 2
  while (i-- > 0)
    *t++ = *f++;
d671 2
a672 2

#endif
d675 2
a676 1
#line 217 "/usr/share/bison/bison.simple"
d685 11
a695 11
#ifdef __cplusplus
#define YYPARSE_PARAM_ARG void *YYPARSE_PARAM
#define YYPARSE_PARAM_DECL
#else /* not __cplusplus */
#define YYPARSE_PARAM_ARG YYPARSE_PARAM
#define YYPARSE_PARAM_DECL void *YYPARSE_PARAM;
#endif /* not __cplusplus */
#else /* not YYPARSE_PARAM */
#define YYPARSE_PARAM_ARG
#define YYPARSE_PARAM_DECL
#endif /* not YYPARSE_PARAM */
d699 1
a699 1
#ifdef YYPARSE_PARAM
d701 1
a701 1
#else
d703 1
d705 23
d730 7
d738 1
a738 1
yyparse(YYPARSE_PARAM_ARG)
d741 5
d748 17
d766 4
a770 2
  int yyerrstatus;	/*  number of tokens to shift before error messages enabled */
  int yychar1 = 0;		/*  lookahead token as an internal (translated) token number */
d772 3
a774 8
  short	yyssa[YYINITDEPTH];	/*  the state stack			*/
  YYSTYPE yyvsa[YYINITDEPTH];	/*  the semantic value stack		*/

  short *yyss = yyssa;		/*  refer to the stacks thru separate pointers */
  YYSTYPE *yyvs = yyvsa;	/*  to allow yyoverflow to reallocate them elsewhere */

#ifdef YYLSP_NEEDED
  YYLTYPE yylsa[YYINITDEPTH];	/*  the location stack			*/
d777 1
d779 2
a780 1
#define YYPOPSTACK   (yyvsp--, yyssp--, yylsp--)
d782 1
a782 1
#define YYPOPSTACK   (yyvsp--, yyssp--)
d785 2
a786 2
  int yystacksize = YYINITDEPTH;
  int yyfree_stacks = 0;
d788 5
a792 6
#ifdef YYPURE
  int yychar;
  YYSTYPE yylval;
  int yynerrs;
#ifdef YYLSP_NEEDED
  YYLTYPE yylloc;
a793 5
#endif

  YYSTYPE yyval;		/*  the variable used to return		*/
				/*  semantic values from the action	*/
				/*  routines				*/
d795 2
d799 1
a799 4
#if YYDEBUG != 0
  if (yydebug)
    fprintf(stderr, "Starting parse\n");
#endif
d811 1
a811 1
  yyssp = yyss - 1;
d813 1
a813 1
#ifdef YYLSP_NEEDED
d816 1
d818 8
a825 4
/* Push a new state, which is found in  yystate  .  */
/* In all cases, when you get here, the value and location stacks
   have just been pushed. so pushing a state here evens the stacks.  */
yynewstate:
d827 2
a828 1
  *++yyssp = yystate;
a831 8
      /* Give user a chance to reallocate the stack */
      /* Use copies of these so that the &'s don't force the real ones into memory. */
      YYSTYPE *yyvs1 = yyvs;
      short *yyss1 = yyss;
#ifdef YYLSP_NEEDED
      YYLTYPE *yyls1 = yyls;
#endif

d833 1
a833 1
      int size = yyssp - yyss + 1;
d836 28
a863 21
      /* Each stack pointer address is followed by the size of
	 the data in use in that stack, in bytes.  */
#ifdef YYLSP_NEEDED
      /* This used to be a conditional around just the two extra args,
	 but that might be undefined if yyoverflow is a macro.  */
      yyoverflow("parser stack overflow",
		 &yyss1, size * sizeof (*yyssp),
		 &yyvs1, size * sizeof (*yyvsp),
		 &yyls1, size * sizeof (*yylsp),
		 &yystacksize);
#else
      yyoverflow("parser stack overflow",
		 &yyss1, size * sizeof (*yyssp),
		 &yyvs1, size * sizeof (*yyvsp),
		 &yystacksize);
#endif

      yyss = yyss1; yyvs = yyvs1;
#ifdef YYLSP_NEEDED
      yyls = yyls1;
#endif
d865 3
d870 1
a870 12
	{
	  yyerror("parser stack overflow");
	  if (yyfree_stacks)
	    {
	      free (yyss);
	      free (yyvs);
#ifdef YYLSP_NEEDED
	      free (yyls);
#endif
	    }
	  return 2;
	}
d874 17
a890 14
#ifndef YYSTACK_USE_ALLOCA
      yyfree_stacks = 1;
#endif
      yyss = (short *) YYSTACK_ALLOC (yystacksize * sizeof (*yyssp));
      __yy_memcpy ((char *)yyss, (char *)yyss1,
		   size * (unsigned int) sizeof (*yyssp));
      yyvs = (YYSTYPE *) YYSTACK_ALLOC (yystacksize * sizeof (*yyvsp));
      __yy_memcpy ((char *)yyvs, (char *)yyvs1,
		   size * (unsigned int) sizeof (*yyvsp));
#ifdef YYLSP_NEEDED
      yyls = (YYLTYPE *) YYSTACK_ALLOC (yystacksize * sizeof (*yylsp));
      __yy_memcpy ((char *)yyls, (char *)yyls1,
		   size * (unsigned int) sizeof (*yylsp));
#endif
d893 4
a896 4
      yyssp = yyss + size - 1;
      yyvsp = yyvs + size - 1;
#ifdef YYLSP_NEEDED
      yylsp = yyls + size - 1;
d899 2
a900 4
#if YYDEBUG != 0
      if (yydebug)
	fprintf(stderr, "Stack size increased to %d\n", yystacksize);
#endif
d906 1
a906 4
#if YYDEBUG != 0
  if (yydebug)
    fprintf(stderr, "Entering state %d\n", yystate);
#endif
d909 6
a914 1
 yybackup:
d933 1
a933 4
#if YYDEBUG != 0
      if (yydebug)
	fprintf(stderr, "Reading a token: ");
#endif
d944 1
a944 4
#if YYDEBUG != 0
      if (yydebug)
	fprintf(stderr, "Now at end of input.\n");
#endif
d948 1
a948 1
      yychar1 = YYTRANSLATE(yychar);
d950 3
a952 1
#if YYDEBUG != 0
d955 5
a959 4
	  fprintf (stderr, "Next token is %d (%s", yychar, yytname[yychar1]);
	  /* Give the individual parser a way to print the precise meaning
	     of a token, for further debugging info.  */
#ifdef YYPRINT
d961 2
a962 2
#endif
	  fprintf (stderr, ")\n");
d994 2
a995 5

#if YYDEBUG != 0
  if (yydebug)
    fprintf(stderr, "Shifting token %d (%s), ", yychar, yytname[yychar1]);
#endif
d1002 1
a1002 1
#ifdef YYLSP_NEEDED
d1006 4
a1009 2
  /* count tokens shifted since error; after three, turn off error status.  */
  if (yyerrstatus) yyerrstatus--;
d1014 4
a1017 1
/* Do the default action for the current state.  */
a1018 1

d1022 2
d1025 3
a1027 1
/* Do a reduction.  yyn is the number of a rule to reduce with.  */
d1029 1
a1030 2
  if (yylen > 0)
    yyval = yyvsp[1-yylen]; /* implement default value of the action */
d1032 20
a1051 1
#if YYDEBUG != 0
d1054 1
a1054 1
      int i;
d1056 2
a1057 2
      fprintf (stderr, "Reducing via rule %d (line %d), ",
	       yyn, yyrline[yyn]);
d1060 3
a1062 3
      for (i = yyprhs[yyn]; yyrhs[i] > 0; i++)
	fprintf (stderr, "%s ", yytname[yyrhs[i]]);
      fprintf (stderr, " -> %s\n", yytname[yyr1[yyn]]);
a1065 1

d1069 1
a1069 1
#line 158 "nlmheader.y"
d1072 2
a1073 2
	  ;
    break;}
d1075 1
a1075 1
#line 162 "nlmheader.y"
d1079 2
a1080 2
	  ;
    break;}
d1082 1
a1082 1
#line 167 "nlmheader.y"
d1098 2
a1099 2
	  ;
    break;}
d1101 1
a1101 1
#line 184 "nlmheader.y"
d1104 2
a1105 2
	  ;
    break;}
d1107 1
a1107 1
#line 188 "nlmheader.y"
d1124 2
a1125 2
	  ;
    break;}
d1127 1
a1127 1
#line 206 "nlmheader.y"
d1129 3
a1131 3
	    debug_info = true;
	  ;
    break;}
d1133 1
a1133 1
#line 210 "nlmheader.y"
d1148 2
a1149 2
	  ;
    break;}
d1151 1
a1151 1
#line 226 "nlmheader.y"
d1154 2
a1155 2
	  ;
    break;}
d1157 1
a1157 1
#line 230 "nlmheader.y"
d1160 2
a1161 2
	  ;
    break;}
d1163 1
a1163 1
#line 234 "nlmheader.y"
d1166 2
a1167 2
	  ;
    break;}
d1169 1
a1169 1
#line 238 "nlmheader.y"
d1173 2
a1174 2
	  ;
    break;}
d1176 1
a1176 1
#line 243 "nlmheader.y"
d1180 2
a1181 2
	  ;
    break;}
d1183 1
a1183 1
#line 248 "nlmheader.y"
d1186 3
a1188 3
	    full_map = true;
	  ;
    break;}
d1190 1
a1190 1
#line 253 "nlmheader.y"
d1193 3
a1195 3
	    full_map = true;
	  ;
    break;}
d1197 1
a1197 1
#line 258 "nlmheader.y"
d1200 2
a1201 2
	  ;
    break;}
d1203 1
a1203 1
#line 262 "nlmheader.y"
d1206 2
a1207 2
	  ;
    break;}
d1209 1
a1209 1
#line 266 "nlmheader.y"
d1212 2
a1213 2
	  ;
    break;}
d1215 1
a1215 1
#line 270 "nlmheader.y"
d1218 2
a1219 2
	  ;
    break;}
d1221 1
a1221 1
#line 274 "nlmheader.y"
d1224 2
a1225 2
	  ;
    break;}
d1227 1
a1227 1
#line 278 "nlmheader.y"
d1230 2
a1231 2
	  ;
    break;}
d1233 1
a1233 1
#line 282 "nlmheader.y"
d1236 2
a1237 2
	  ;
    break;}
d1239 1
a1239 1
#line 286 "nlmheader.y"
d1242 2
a1243 2
	  ;
    break;}
d1245 1
a1245 1
#line 290 "nlmheader.y"
d1248 2
a1249 2
	  ;
    break;}
d1251 1
a1251 1
#line 294 "nlmheader.y"
d1254 2
a1255 2
	  ;
    break;}
d1257 1
a1257 1
#line 298 "nlmheader.y"
d1263 2
a1264 2
	  ;
    break;}
d1266 1
a1266 1
#line 305 "nlmheader.y"
d1269 2
a1270 2
	  ;
    break;}
d1272 1
a1272 1
#line 309 "nlmheader.y"
d1275 2
a1276 2
	  ;
    break;}
d1278 1
a1278 1
#line 313 "nlmheader.y"
d1293 2
a1294 2
	  ;
    break;}
d1296 1
a1296 1
#line 329 "nlmheader.y"
d1299 2
a1300 2
	  ;
    break;}
d1302 1
a1302 1
#line 333 "nlmheader.y"
d1306 2
a1307 2
	  ;
    break;}
d1309 1
a1309 1
#line 338 "nlmheader.y"
d1312 2
a1313 2
	  ;
    break;}
d1315 1
a1315 1
#line 342 "nlmheader.y"
d1318 2
a1319 2
	  ;
    break;}
d1321 1
a1321 1
#line 346 "nlmheader.y"
d1336 2
a1337 2
	  ;
    break;}
d1339 1
a1339 1
#line 362 "nlmheader.y"
d1343 2
a1344 2
	  ;
    break;}
d1346 1
a1346 1
#line 367 "nlmheader.y"
d1348 3
a1350 3
	    verbose = true;
	  ;
    break;}
d1352 1
a1352 1
#line 371 "nlmheader.y"
d1375 2
a1376 2
	  ;
    break;}
d1378 1
a1378 1
#line 395 "nlmheader.y"
d1393 2
a1394 2
	  ;
    break;}
d1396 1
a1396 1
#line 411 "nlmheader.y"
d1399 2
a1400 2
	  ;
    break;}
d1402 1
a1402 1
#line 420 "nlmheader.y"
d1405 2
a1406 2
	  ;
    break;}
d1408 1
a1408 1
#line 424 "nlmheader.y"
d1411 2
a1412 2
	  ;
    break;}
d1414 1
a1414 1
#line 435 "nlmheader.y"
d1417 2
a1418 2
	  ;
    break;}
d1420 1
a1420 1
#line 439 "nlmheader.y"
d1423 2
a1424 2
	  ;
    break;}
d1426 1
a1426 1
#line 443 "nlmheader.y"
d1429 2
a1430 2
	  ;
    break;}
d1432 1
a1432 1
#line 447 "nlmheader.y"
d1435 2
a1436 2
	  ;
    break;}
d1438 1
a1438 1
#line 456 "nlmheader.y"
d1443 2
a1444 2
	  ;
    break;}
d1446 1
a1446 1
#line 467 "nlmheader.y"
d1456 2
a1457 2
	  ;
    break;}
d1459 1
a1459 1
#line 483 "nlmheader.y"
d1462 2
a1463 2
	  ;
    break;}
d1465 1
a1465 1
#line 487 "nlmheader.y"
d1468 2
a1469 2
	  ;
    break;}
d1471 3
a1473 2
   /* the action file gets copied in in place of this dollarsign */
#line 543 "/usr/share/bison/bison.simple"
d1477 1
a1477 1
#ifdef YYLSP_NEEDED
d1481 1
a1481 1
#if YYDEBUG != 0
d1484 5
a1488 5
      short *ssp1 = yyss - 1;
      fprintf (stderr, "state stack now");
      while (ssp1 != yyssp)
	fprintf (stderr, " %d", *++ssp1);
      fprintf (stderr, "\n");
d1493 2
a1494 16

#ifdef YYLSP_NEEDED
  yylsp++;
  if (yylen == 0)
    {
      yylsp->first_line = yylloc.first_line;
      yylsp->first_column = yylloc.first_column;
      yylsp->last_line = (yylsp-1)->last_line;
      yylsp->last_column = (yylsp-1)->last_column;
      yylsp->text = 0;
    }
  else
    {
      yylsp->last_line = (yylsp+yylen-1)->last_line;
      yylsp->last_column = (yylsp+yylen-1)->last_column;
    }
d1497 3
a1499 4
  /* Now "shift" the result of the reduction.
     Determine what state that goes to,
     based on the state we popped back to
     and the rule number reduced by.  */
a1510 1
yyerrlab:   /* here on detecting error */
d1512 6
a1517 2
  if (! yyerrstatus)
    /* If not already recovering from an error, report this error.  */
d1526 15
a1540 12
	  int size = 0;
	  char *msg;
	  int x, count;

	  count = 0;
	  /* Start X at -yyn if nec to avoid negative indexes in yycheck.  */
	  for (x = (yyn < 0 ? -yyn : 0);
	       x < (sizeof(yytname) / sizeof(char *)); x++)
	    if (yycheck[x + yyn] == x)
	      size += strlen(yytname[x]) + 15, count++;
	  msg = (char *) malloc(size + 15);
	  if (msg != 0)
d1542 2
a1543 1
	      strcpy(msg, "parse error");
d1545 1
a1545 1
	      if (count < 5)
d1547 5
a1551 4
		  count = 0;
		  for (x = (yyn < 0 ? -yyn : 0);
		       x < (sizeof(yytname) / sizeof(char *)); x++)
		    if (yycheck[x + yyn] == x)
d1553 4
a1556 4
			strcat(msg, count == 0 ? ", expecting `" : " or `");
			strcat(msg, yytname[x]);
			strcat(msg, "'");
			count++;
d1559 2
a1560 2
	      yyerror(msg);
	      free(msg);
d1563 1
a1563 1
	    yyerror ("parse error; also virtual memory exceeded");
d1566 2
a1567 2
#endif /* YYERROR_VERBOSE */
	yyerror("parse error");
d1569 1
a1570 2
  goto yyerrlab1;
yyerrlab1:   /* here on error raised explicitly by an action */
d1572 4
d1578 2
a1579 1
      /* if just tried and failed to reuse lookahead token after an error, discard it.  */
d1584 2
a1585 6

#if YYDEBUG != 0
      if (yydebug)
	fprintf(stderr, "Discarding token %d (%s).\n", yychar, yytname[yychar1]);
#endif

d1589 2
a1590 2
  /* Else will try to reuse lookahead token
     after shifting the error token.  */
a1595 1
yyerrdefault:  /* current state does not do anything special for the error token. */
d1597 5
d1605 5
a1609 2
  yyn = yydefact[yystate];  /* If its default is to accept any token, ok.  Otherwise pop it.*/
  if (yyn) goto yydefault;
a1611 1
yyerrpop:   /* pop the current state because it cannot handle the error token */
d1613 7
a1619 1
  if (yyssp == yyss) YYABORT;
d1622 1
a1622 1
#ifdef YYLSP_NEEDED
d1626 1
a1626 1
#if YYDEBUG != 0
d1629 5
a1633 5
      short *ssp1 = yyss - 1;
      fprintf (stderr, "Error: state stack now");
      while (ssp1 != yyssp)
	fprintf (stderr, " %d", *++ssp1);
      fprintf (stderr, "\n");
d1637 3
a1640 1

d1663 1
a1663 4
#if YYDEBUG != 0
  if (yydebug)
    fprintf(stderr, "Shifting error token, ");
#endif
d1666 1
a1666 1
#ifdef YYLSP_NEEDED
a1672 11
 yyacceptlab:
  /* YYACCEPT comes here.  */
  if (yyfree_stacks)
    {
      free (yyss);
      free (yyvs);
#ifdef YYLSP_NEEDED
      free (yyls);
#endif
    }
  return 0;
d1674 26
a1699 8
 yyabortlab:
  /* YYABORT comes here.  */
  if (yyfree_stacks)
    {
      free (yyss);
      free (yyvs);
#ifdef YYLSP_NEEDED
      free (yyls);
d1701 1
a1701 2
    }
  return 1;
d1703 1
a1703 1
#line 492 "nlmheader.y"
d1709 1
a1709 1
extern char *strerror ();
d1750 1
a1750 1
boolean
d1779 1
a1779 1
static boolean
d1788 1
a1788 1
      return false;
d1793 1
a1793 1
  return true;
d1897 1
a1897 1
  while (isspace ((unsigned char) c) || c == ',')
d1950 1
a1950 1
      while (isspace ((unsigned char) c));
d1952 1
a1952 1
      while (! isspace ((unsigned char) c) && c != EOF)
d1960 1
a1960 1
      
d1970 1
a1970 1
      while (isalnum ((unsigned char) c) || c == '_')
d1972 1
a1972 4
	  if (islower ((unsigned char) c))
	    BUF_ADD (toupper ((unsigned char) c));
	  else
	    BUF_ADD (c);
d1977 1
a1977 1
      if (c != EOF && ! isspace ((unsigned char) c) && c != ',')
d1999 1
a1999 1
	  
d2050 1
a2050 1
  while (! isspace (c)
@


1.3
log
@Resolve other problems that dumb cvs can't find out by itself.

(trivial part done, `interesting' patches remain)
@
text
@d45 1
a45 1
     Copyright (C) 1993, 94, 95, 97, 1998 Free Software Foundation, Inc.
d338 1
a338 1
#line 3 "/usr/share/misc/bison.simple"
d552 1
a552 1
#line 217 "/usr/share/misc/bison.simple"
d1284 1
a1284 1
#line 543 "/usr/share/misc/bison.simple"
@


1.2
log
@Bring Cygnus versions into the trunk, keeping our local patches
@
text
@d2 2
a3 2
/*  A Bison parser, made from ./nlmheader.y with Bison version GNU Bison version 1.24
  */
d7 35
a41 35
#define	CHECK	258
#define	CODESTART	259
#define	COPYRIGHT	260
#define	CUSTOM	261
#define	DATE	262
#define	DEBUG	263
#define	DESCRIPTION	264
#define	EXIT	265
#define	EXPORT	266
#define	FLAG_ON	267
#define	FLAG_OFF	268
#define	FULLMAP	269
#define	HELP	270
#define	IMPORT	271
#define	INPUT	272
#define	MAP	273
#define	MESSAGES	274
#define	MODULE	275
#define	MULTIPLE	276
#define	OS_DOMAIN	277
#define	OUTPUT	278
#define	PSEUDOPREEMPTION	279
#define	REENTRANT	280
#define	SCREENNAME	281
#define	SHARELIB	282
#define	STACK	283
#define	START	284
#define	SYNCHRONIZE	285
#define	THREADNAME	286
#define	TYPE	287
#define	VERBOSE	288
#define	VERSION	289
#define	XDCDATA	290
#define	STRING	291
#define	QUOTED_STRING	292
d43 1
a43 1
#line 1 "./nlmheader.y"
d45 1
a45 1
     Copyright (C) 1993 Free Software Foundation, Inc.
a75 1
#include "sysdep.h"
d154 1
a154 1
#line 113 "./nlmheader.y"
a159 17

#ifndef YYLTYPE
typedef
  struct yyltype
    {
      int timestamp;
      int first_line;
      int first_column;
      int last_line;
      int last_column;
      char *text;
   }
  yyltype;

#define YYLTYPE yyltype
#endif

d174 1
a174 1
#define YYTRANSLATE(x) ((unsigned)(x) <= 292 ? yytranslate[x] : 50)
d202 5
a206 5
     2,     2,     2,     2,     2,     1,     2,     3,     4,     5,
     6,     7,     8,     9,    10,    11,    12,    13,    14,    15,
    16,    17,    18,    19,    20,    21,    22,    23,    24,    25,
    26,    27,    28,    29,    30,    31,    32,    33,    34,    35,
    36,    37
d240 6
a245 6
   144,   150,   152,   157,   162,   167,   184,   188,   206,   210,
   226,   230,   235,   238,   243,   248,   253,   258,   262,   267,
   270,   274,   278,   282,   286,   290,   294,   298,   305,   309,
   313,   329,   333,   338,   342,   346,   362,   367,   371,   395,
   411,   419,   424,   434,   439,   443,   447,   455,   466,   482,
   487
d247 4
d256 1
a256 1
"SHARELIB","STACK","START","SYNCHRONIZE","THREADNAME","TYPE","VERBOSE","VERSION",
d258 1
a258 2
"@@2","symbol_list_opt","symbol_list","symbol_prefix","symbol","string_list",
""
d338 2
a339 1
#line 3 "/usr/unsupported/share/bison.simple"
d356 2
a357 1
   Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.  */
d364 9
a372 1
#ifndef alloca
d374 1
d377 2
a378 1
#if (!defined (__STDC__) && defined (sparc)) || defined (__sparc__) || defined (__sparc) || defined (__sgi)
d381 6
a386 1
#if defined (MSDOS) && !defined (__TURBOC__)
d388 1
d391 3
a393 1
#include <malloc.h>
d395 7
a401 9
#else /* not MSDOS, __TURBOC__, or _AIX */
#ifdef __hpux
#ifdef __cplusplus
extern "C" {
void *alloca (unsigned int);
};
#else /* not __cplusplus */
void *alloca ();
#endif /* not __cplusplus */
d403 1
d406 4
a409 3
#endif /* not sparc.  */
#endif /* not GNU C.  */
#endif /* alloca not defined.  */
d411 5
a415 4
/* This is the parser code that is written into each bison parser
  when the %semantic_parser declaration is not specified in the grammar.
  It was written by Richard Stallman by simplifying the hairy parser
  used when %semantic_parser is specified.  */
d425 2
a426 2
#define YYACCEPT	return(0)
#define YYABORT 	return(1)
d507 5
a512 5
/* Prevent warning if -Wstrict-prototypes.  */
#ifdef __GNUC__
int yyparse (void);
#endif

d514 1
a514 1
#define __yy_memcpy(FROM,TO,COUNT)	__builtin_memcpy(TO,FROM,COUNT)
d521 2
a522 1
__yy_memcpy (from, to, count)
d524 1
a524 2
     char *to;
     int count;
d539 1
a539 1
__yy_memcpy (char *from, char *to, int count)
d541 1
a542 1
  register char *t = to;
d552 1
a552 1
#line 192 "/usr/unsupported/share/bison.simple"
d561 5
d567 10
d578 2
a579 2
#define YYPARSE_PARAM
#define YYPARSE_PARAM_DECL
d583 1
a583 1
yyparse(YYPARSE_PARAM)
d610 1
d695 8
d708 9
a716 4
      yyss = (short *) alloca (yystacksize * sizeof (*yyssp));
      __yy_memcpy ((char *)yyss1, (char *)yyss, size * sizeof (*yyssp));
      yyvs = (YYSTYPE *) alloca (yystacksize * sizeof (*yyvsp));
      __yy_memcpy ((char *)yyvs1, (char *)yyvs, size * sizeof (*yyvsp));
d718 3
a720 2
      yyls = (YYLTYPE *) alloca (yystacksize * sizeof (*yylsp));
      __yy_memcpy ((char *)yyls1, (char *)yyls, size * sizeof (*yylsp));
d881 1
a881 1
#line 159 "./nlmheader.y"
d887 1
a887 1
#line 163 "./nlmheader.y"
d889 1
a889 1
	    nlmheader_warn ("CODESTART is not implemented; sorry", -1);
d894 1
a894 1
#line 168 "./nlmheader.y"
d902 1
a902 1
		nlmheader_warn ("copyright string is too long",
d913 1
a913 1
#line 185 "./nlmheader.y"
d919 1
a919 1
#line 189 "./nlmheader.y"
d931 1
a931 1
	      nlmheader_warn ("illegal month", -1);
d933 1
a933 1
	      nlmheader_warn ("illegal day", -1);
d935 1
a935 1
	      nlmheader_warn ("illegal year", -1);
d939 1
a939 1
#line 207 "./nlmheader.y"
d945 1
a945 1
#line 211 "./nlmheader.y"
d952 1
a952 1
		nlmheader_warn ("description string is too long",
d963 1
a963 1
#line 227 "./nlmheader.y"
d969 1
a969 1
#line 231 "./nlmheader.y"
d975 1
a975 1
#line 235 "./nlmheader.y"
d981 1
a981 1
#line 239 "./nlmheader.y"
d988 1
a988 1
#line 244 "./nlmheader.y"
d995 1
a995 1
#line 249 "./nlmheader.y"
d1002 1
a1002 1
#line 254 "./nlmheader.y"
d1009 1
a1009 1
#line 259 "./nlmheader.y"
d1015 1
a1015 1
#line 263 "./nlmheader.y"
d1021 1
a1021 1
#line 267 "./nlmheader.y"
d1027 1
a1027 1
#line 271 "./nlmheader.y"
d1033 1
a1033 1
#line 275 "./nlmheader.y"
d1039 1
a1039 1
#line 279 "./nlmheader.y"
d1045 1
a1045 1
#line 283 "./nlmheader.y"
d1051 1
a1051 1
#line 287 "./nlmheader.y"
d1057 1
a1057 1
#line 291 "./nlmheader.y"
d1063 1
a1063 1
#line 295 "./nlmheader.y"
d1069 1
a1069 1
#line 299 "./nlmheader.y"
d1074 1
a1074 1
	      nlmheader_warn ("ignoring duplicate OUTPUT statement", -1);
d1078 1
a1078 1
#line 306 "./nlmheader.y"
d1084 1
a1084 1
#line 310 "./nlmheader.y"
d1090 1
a1090 1
#line 314 "./nlmheader.y"
d1097 1
a1097 1
		nlmheader_warn ("screen name is too long",
d1108 1
a1108 1
#line 330 "./nlmheader.y"
d1114 1
a1114 1
#line 334 "./nlmheader.y"
d1121 1
a1121 1
#line 339 "./nlmheader.y"
d1127 1
a1127 1
#line 343 "./nlmheader.y"
d1133 1
a1133 1
#line 347 "./nlmheader.y"
d1140 1
a1140 1
		nlmheader_warn ("thread name is too long",
d1151 1
a1151 1
#line 363 "./nlmheader.y"
d1158 1
a1158 1
#line 368 "./nlmheader.y"
d1164 1
a1164 1
#line 372 "./nlmheader.y"
d1172 1
a1172 1
	      nlmheader_warn ("illegal minor version number (must be between 0 and 99)",
d1178 1
a1178 1
	      nlmheader_warn ("illegal revision number (must be between 0 and 26)",
d1190 1
a1190 1
#line 396 "./nlmheader.y"
d1198 1
a1198 1
	      nlmheader_warn ("illegal minor version number (must be between 0 and 99)",
d1208 1
a1208 1
#line 412 "./nlmheader.y"
d1214 1
a1214 1
#line 421 "./nlmheader.y"
d1220 1
a1220 1
#line 425 "./nlmheader.y"
d1226 1
a1226 1
#line 436 "./nlmheader.y"
d1232 1
a1232 1
#line 440 "./nlmheader.y"
d1238 1
a1238 1
#line 444 "./nlmheader.y"
d1244 1
a1244 1
#line 448 "./nlmheader.y"
d1250 1
a1250 1
#line 457 "./nlmheader.y"
d1258 1
a1258 1
#line 468 "./nlmheader.y"
d1271 1
a1271 1
#line 484 "./nlmheader.y"
d1277 1
a1277 1
#line 488 "./nlmheader.y"
d1284 1
a1284 1
#line 487 "/usr/unsupported/share/bison.simple"
d1479 24
d1504 1
a1504 1
#line 493 "./nlmheader.y"
d1639 1
a1639 1
  { "VERSION", VERSION },
d1784 1
a1784 1
	  fprintf (stderr, "%s:%d: illegal character in keyword: %c\n",
d1789 1
a1789 1
	  int i;
d1805 1
a1805 1
	  fprintf (stderr, "%s:%d: unrecognized keyword: %s\n",
d1842 1
a1842 1
	  fprintf (stderr, "%s:%d: end of file in quoted string\n",
d1883 1
a1883 1
    nlmheader_warn ("bad number", -1);
d1899 1
a1899 1
      fprintf (stderr, "%s: problems in NLM command language input:\n",
@


1.1
log
@Initial revision
@
text
@@


1.1.1.1
log
@Initial GNU binutils 2.6 import
@
text
@@


1.1.1.2
log
@Import of binutils-2.8.1 from Cygnus/FSF
@
text
@d76 1
d155 1
a155 1
#line 112 "./nlmheader.y"
d258 6
a263 6
   143,   149,   151,   156,   161,   166,   183,   187,   205,   209,
   225,   229,   234,   237,   242,   247,   252,   257,   261,   266,
   269,   273,   277,   281,   285,   289,   293,   297,   304,   308,
   312,   328,   332,   337,   341,   345,   361,   366,   370,   394,
   410,   418,   423,   433,   438,   442,   446,   454,   465,   481,
   486
d845 1
a845 1
#line 158 "./nlmheader.y"
d851 1
a851 1
#line 162 "./nlmheader.y"
d858 1
a858 1
#line 167 "./nlmheader.y"
d877 1
a877 1
#line 184 "./nlmheader.y"
d883 1
a883 1
#line 188 "./nlmheader.y"
d903 1
a903 1
#line 206 "./nlmheader.y"
d909 1
a909 1
#line 210 "./nlmheader.y"
d927 1
a927 1
#line 226 "./nlmheader.y"
d933 1
a933 1
#line 230 "./nlmheader.y"
d939 1
a939 1
#line 234 "./nlmheader.y"
d945 1
a945 1
#line 238 "./nlmheader.y"
d952 1
a952 1
#line 243 "./nlmheader.y"
d959 1
a959 1
#line 248 "./nlmheader.y"
d966 1
a966 1
#line 253 "./nlmheader.y"
d973 1
a973 1
#line 258 "./nlmheader.y"
d979 1
a979 1
#line 262 "./nlmheader.y"
d985 1
a985 1
#line 266 "./nlmheader.y"
d991 1
a991 1
#line 270 "./nlmheader.y"
d997 1
a997 1
#line 274 "./nlmheader.y"
d1003 1
a1003 1
#line 278 "./nlmheader.y"
d1009 1
a1009 1
#line 282 "./nlmheader.y"
d1015 1
a1015 1
#line 286 "./nlmheader.y"
d1021 1
a1021 1
#line 290 "./nlmheader.y"
d1027 1
a1027 1
#line 294 "./nlmheader.y"
d1033 1
a1033 1
#line 298 "./nlmheader.y"
d1042 1
a1042 1
#line 305 "./nlmheader.y"
d1048 1
a1048 1
#line 309 "./nlmheader.y"
d1054 1
a1054 1
#line 313 "./nlmheader.y"
d1072 1
a1072 1
#line 329 "./nlmheader.y"
d1078 1
a1078 1
#line 333 "./nlmheader.y"
d1085 1
a1085 1
#line 338 "./nlmheader.y"
d1091 1
a1091 1
#line 342 "./nlmheader.y"
d1097 1
a1097 1
#line 346 "./nlmheader.y"
d1115 1
a1115 1
#line 362 "./nlmheader.y"
d1122 1
a1122 1
#line 367 "./nlmheader.y"
d1128 1
a1128 1
#line 371 "./nlmheader.y"
d1154 1
a1154 1
#line 395 "./nlmheader.y"
d1172 1
a1172 1
#line 411 "./nlmheader.y"
d1178 1
a1178 1
#line 420 "./nlmheader.y"
d1184 1
a1184 1
#line 424 "./nlmheader.y"
d1190 1
a1190 1
#line 435 "./nlmheader.y"
d1196 1
a1196 1
#line 439 "./nlmheader.y"
d1202 1
a1202 1
#line 443 "./nlmheader.y"
d1208 1
a1208 1
#line 447 "./nlmheader.y"
d1214 1
a1214 1
#line 456 "./nlmheader.y"
d1222 1
a1222 1
#line 467 "./nlmheader.y"
d1235 1
a1235 1
#line 483 "./nlmheader.y"
d1241 1
a1241 1
#line 487 "./nlmheader.y"
d1444 1
a1444 1
#line 492 "./nlmheader.y"
@


1.1.1.3
log
@Import binutils-2.10
- only the binutils package (no gdb here)
- don't import libiberty and texinfo, they are elsewhere
- remove all .info* generated files
@
text
@d2 2
a3 2
/*  A Bison parser, made from nlmheader.y
    by GNU Bison version 1.28  */
d7 35
a41 35
#define	CHECK	257
#define	CODESTART	258
#define	COPYRIGHT	259
#define	CUSTOM	260
#define	DATE	261
#define	DEBUG	262
#define	DESCRIPTION	263
#define	EXIT	264
#define	EXPORT	265
#define	FLAG_ON	266
#define	FLAG_OFF	267
#define	FULLMAP	268
#define	HELP	269
#define	IMPORT	270
#define	INPUT	271
#define	MAP	272
#define	MESSAGES	273
#define	MODULE	274
#define	MULTIPLE	275
#define	OS_DOMAIN	276
#define	OUTPUT	277
#define	PSEUDOPREEMPTION	278
#define	REENTRANT	279
#define	SCREENNAME	280
#define	SHARELIB	281
#define	STACK	282
#define	START	283
#define	SYNCHRONIZE	284
#define	THREADNAME	285
#define	TYPE	286
#define	VERBOSE	287
#define	VERSIONK	288
#define	XDCDATA	289
#define	STRING	290
#define	QUOTED_STRING	291
d43 1
a43 1
#line 1 "nlmheader.y"
d45 1
a45 1
     Copyright (C) 1993, 94, 95, 97, 1998 Free Software Foundation, Inc.
d154 1
a154 1
#line 112 "nlmheader.y"
d160 17
d191 1
a191 1
#define YYTRANSLATE(x) ((unsigned)(x) <= 291 ? yytranslate[x] : 50)
d219 5
a223 5
     2,     2,     2,     2,     2,     1,     3,     4,     5,     6,
     7,     8,     9,    10,    11,    12,    13,    14,    15,    16,
    17,    18,    19,    20,    21,    22,    23,    24,    25,    26,
    27,    28,    29,    30,    31,    32,    33,    34,    35,    36,
    37
a263 4
#endif


#if YYDEBUG != 0 || defined (YYERROR_VERBOSE)
d269 1
a269 1
"SHARELIB","STACK","START","SYNCHRONIZE","THREADNAME","TYPE","VERBOSE","VERSIONK",
d271 2
a272 1
"@@2","symbol_list_opt","symbol_list","symbol_prefix","symbol","string_list", NULL
d352 1
a352 2
#line 3 "/usr/share/misc/bison.simple"
/* This file comes from bison-1.28.  */
d369 1
a369 2
   Foundation, Inc., 59 Temple Place - Suite 330,
   Boston, MA 02111-1307, USA.  */
d376 1
a376 9
/* This is the parser code that is written into each bison parser
  when the %semantic_parser declaration is not specified in the grammar.
  It was written by Richard Stallman by simplifying the hairy parser
  used when %semantic_parser is specified.  */

#ifndef YYSTACK_USE_ALLOCA
#ifdef alloca
#define YYSTACK_USE_ALLOCA
#else /* alloca not defined */
a377 1
#define YYSTACK_USE_ALLOCA
d380 1
a380 2
#if (!defined (__STDC__) && defined (sparc)) || defined (__sparc__) || defined (__sparc) || defined (__sgi) || (defined (__sun) && defined (__i386))
#define YYSTACK_USE_ALLOCA
d383 1
a383 6
/* We think this test detects Watcom and Microsoft C.  */
/* This used to test MSDOS, but that is a bad idea
   since that symbol is in the user namespace.  */
#if (defined (_MSDOS) || defined (_MSDOS_)) && !defined (__TURBOC__)
#if 0 /* No need for malloc.h, which pollutes the namespace;
	 instead, just don't use alloca.  */
a384 1
#endif
d387 1
a387 3
/* I don't know what this was needed for, but it pollutes the namespace.
   So I turned it off.   rms, 2 May 1997.  */
/* #include <malloc.h>  */
d389 9
a397 7
#define YYSTACK_USE_ALLOCA
#else /* not MSDOS, or __TURBOC__, or _AIX */
#if 0
#ifdef __hpux /* haible@@ilog.fr says this works for HPUX 9.05 and up,
		 and on HPUX 10.  Eventually we can turn this on.  */
#define YYSTACK_USE_ALLOCA
#define alloca __builtin_alloca
a398 1
#endif
d401 3
a403 4
#endif /* not sparc */
#endif /* not GNU C */
#endif /* alloca not defined */
#endif /* YYSTACK_USE_ALLOCA not defined */
d405 4
a408 5
#ifdef YYSTACK_USE_ALLOCA
#define YYSTACK_ALLOC alloca
#else
#define YYSTACK_ALLOC malloc
#endif
d418 2
a419 2
#define YYACCEPT	goto yyacceptlab
#define YYABORT 	goto yyabortlab
d500 5
a505 5
/* Define __yy_memcpy.  Note that the size argument
   should be passed with type unsigned int, because that is what the non-GCC
   definitions require.  With GCC, __builtin_memcpy takes an arg
   of type size_t, but it can handle unsigned int.  */

d507 1
a507 1
#define __yy_memcpy(TO,FROM,COUNT)	__builtin_memcpy(TO,FROM,COUNT)
d514 2
a515 1
__yy_memcpy (to, from, count)
d517 1
a517 2
     char *from;
     unsigned int count;
d532 1
a532 1
__yy_memcpy (char *to, char *from, unsigned int count)
d534 1
a535 1
  register char *f = from;
d545 1
a545 1
#line 217 "/usr/share/misc/bison.simple"
a553 5
#ifdef __cplusplus
#define YYPARSE_PARAM_ARG void *YYPARSE_PARAM
#define YYPARSE_PARAM_DECL
#else /* not __cplusplus */
#define YYPARSE_PARAM_ARG YYPARSE_PARAM
d555 2
a556 3
#endif /* not __cplusplus */
#else /* not YYPARSE_PARAM */
#define YYPARSE_PARAM_ARG
a557 9
#endif /* not YYPARSE_PARAM */

/* Prevent warning if -Wstrict-prototypes.  */
#ifdef __GNUC__
#ifdef YYPARSE_PARAM
int yyparse (void *);
#else
int yyparse (void);
#endif
d561 1
a561 1
yyparse(YYPARSE_PARAM_ARG)
a587 1
  int yyfree_stacks = 0;
a671 8
	  if (yyfree_stacks)
	    {
	      free (yyss);
	      free (yyvs);
#ifdef YYLSP_NEEDED
	      free (yyls);
#endif
	    }
d677 4
a680 9
#ifndef YYSTACK_USE_ALLOCA
      yyfree_stacks = 1;
#endif
      yyss = (short *) YYSTACK_ALLOC (yystacksize * sizeof (*yyssp));
      __yy_memcpy ((char *)yyss, (char *)yyss1,
		   size * (unsigned int) sizeof (*yyssp));
      yyvs = (YYSTYPE *) YYSTACK_ALLOC (yystacksize * sizeof (*yyvsp));
      __yy_memcpy ((char *)yyvs, (char *)yyvs1,
		   size * (unsigned int) sizeof (*yyvsp));
d682 2
a683 3
      yyls = (YYLTYPE *) YYSTACK_ALLOC (yystacksize * sizeof (*yylsp));
      __yy_memcpy ((char *)yyls, (char *)yyls1,
		   size * (unsigned int) sizeof (*yylsp));
d844 1
a844 1
#line 158 "nlmheader.y"
d850 1
a850 1
#line 162 "nlmheader.y"
d852 1
a852 1
	    nlmheader_warn (_("CODESTART is not implemented; sorry"), -1);
d857 1
a857 1
#line 167 "nlmheader.y"
d865 1
a865 1
		nlmheader_warn (_("copyright string is too long"),
d876 1
a876 1
#line 184 "nlmheader.y"
d882 1
a882 1
#line 188 "nlmheader.y"
d894 1
a894 1
	      nlmheader_warn (_("illegal month"), -1);
d896 1
a896 1
	      nlmheader_warn (_("illegal day"), -1);
d898 1
a898 1
	      nlmheader_warn (_("illegal year"), -1);
d902 1
a902 1
#line 206 "nlmheader.y"
d908 1
a908 1
#line 210 "nlmheader.y"
d915 1
a915 1
		nlmheader_warn (_("description string is too long"),
d926 1
a926 1
#line 226 "nlmheader.y"
d932 1
a932 1
#line 230 "nlmheader.y"
d938 1
a938 1
#line 234 "nlmheader.y"
d944 1
a944 1
#line 238 "nlmheader.y"
d951 1
a951 1
#line 243 "nlmheader.y"
d958 1
a958 1
#line 248 "nlmheader.y"
d965 1
a965 1
#line 253 "nlmheader.y"
d972 1
a972 1
#line 258 "nlmheader.y"
d978 1
a978 1
#line 262 "nlmheader.y"
d984 1
a984 1
#line 266 "nlmheader.y"
d990 1
a990 1
#line 270 "nlmheader.y"
d996 1
a996 1
#line 274 "nlmheader.y"
d1002 1
a1002 1
#line 278 "nlmheader.y"
d1008 1
a1008 1
#line 282 "nlmheader.y"
d1014 1
a1014 1
#line 286 "nlmheader.y"
d1020 1
a1020 1
#line 290 "nlmheader.y"
d1026 1
a1026 1
#line 294 "nlmheader.y"
d1032 1
a1032 1
#line 298 "nlmheader.y"
d1037 1
a1037 1
	      nlmheader_warn (_("ignoring duplicate OUTPUT statement"), -1);
d1041 1
a1041 1
#line 305 "nlmheader.y"
d1047 1
a1047 1
#line 309 "nlmheader.y"
d1053 1
a1053 1
#line 313 "nlmheader.y"
d1060 1
a1060 1
		nlmheader_warn (_("screen name is too long"),
d1071 1
a1071 1
#line 329 "nlmheader.y"
d1077 1
a1077 1
#line 333 "nlmheader.y"
d1084 1
a1084 1
#line 338 "nlmheader.y"
d1090 1
a1090 1
#line 342 "nlmheader.y"
d1096 1
a1096 1
#line 346 "nlmheader.y"
d1103 1
a1103 1
		nlmheader_warn (_("thread name is too long"),
d1114 1
a1114 1
#line 362 "nlmheader.y"
d1121 1
a1121 1
#line 367 "nlmheader.y"
d1127 1
a1127 1
#line 371 "nlmheader.y"
d1135 1
a1135 1
	      nlmheader_warn (_("illegal minor version number (must be between 0 and 99)"),
d1141 1
a1141 1
	      nlmheader_warn (_("illegal revision number (must be between 0 and 26)"),
d1153 1
a1153 1
#line 395 "nlmheader.y"
d1161 1
a1161 1
	      nlmheader_warn (_("illegal minor version number (must be between 0 and 99)"),
d1171 1
a1171 1
#line 411 "nlmheader.y"
d1177 1
a1177 1
#line 420 "nlmheader.y"
d1183 1
a1183 1
#line 424 "nlmheader.y"
d1189 1
a1189 1
#line 435 "nlmheader.y"
d1195 1
a1195 1
#line 439 "nlmheader.y"
d1201 1
a1201 1
#line 443 "nlmheader.y"
d1207 1
a1207 1
#line 447 "nlmheader.y"
d1213 1
a1213 1
#line 456 "nlmheader.y"
d1221 1
a1221 1
#line 467 "nlmheader.y"
d1234 1
a1234 1
#line 483 "nlmheader.y"
d1240 1
a1240 1
#line 487 "nlmheader.y"
d1247 1
a1247 1
#line 543 "/usr/share/misc/bison.simple"
a1441 24

 yyacceptlab:
  /* YYACCEPT comes here.  */
  if (yyfree_stacks)
    {
      free (yyss);
      free (yyvs);
#ifdef YYLSP_NEEDED
      free (yyls);
#endif
    }
  return 0;

 yyabortlab:
  /* YYABORT comes here.  */
  if (yyfree_stacks)
    {
      free (yyss);
      free (yyvs);
#ifdef YYLSP_NEEDED
      free (yyls);
#endif
    }
  return 1;
d1443 1
a1443 1
#line 492 "nlmheader.y"
d1578 1
a1578 1
  { "VERSION", VERSIONK },
d1723 1
a1723 1
	  fprintf (stderr, _("%s:%d: illegal character in keyword: %c\n"),
d1728 1
a1728 1
	  unsigned int i;
d1744 1
a1744 1
	  fprintf (stderr, _("%s:%d: unrecognized keyword: %s\n"),
d1781 1
a1781 1
	  fprintf (stderr, _("%s:%d: end of file in quoted string\n"),
d1822 1
a1822 1
    nlmheader_warn (_("bad number"), -1);
d1838 1
a1838 1
      fprintf (stderr, _("%s: problems in NLM command language input:\n"),
@


1.1.1.4
log
@Import binutils-2.11.2
- only the binutils package (no gdb here)
- don't import libiberty and texinfo, they are elsewhere
- remove all .info* generated files
@
text
@d45 1
a45 1
     Copyright 1993, 1994, 1995, 1997, 1998 Free Software Foundation, Inc.
d338 1
a338 1
#line 3 "/usr/share/bison/bison.simple"
d552 1
a552 1
#line 217 "/usr/share/bison/bison.simple"
d1284 1
a1284 1
#line 543 "/usr/share/bison/bison.simple"
@


1.1.1.5
log
@import binutils 2.14 (excluding testsuites, .info files, and .po files)
@
text
@d1 3
a3 2
/* A Bison parser, made from nlmheader.y
   by GNU bison 1.35.  */
d7 35
a41 35
# define	CHECK	257
# define	CODESTART	258
# define	COPYRIGHT	259
# define	CUSTOM	260
# define	DATE	261
# define	DEBUG	262
# define	DESCRIPTION	263
# define	EXIT	264
# define	EXPORT	265
# define	FLAG_ON	266
# define	FLAG_OFF	267
# define	FULLMAP	268
# define	HELP	269
# define	IMPORT	270
# define	INPUT	271
# define	MAP	272
# define	MESSAGES	273
# define	MODULE	274
# define	MULTIPLE	275
# define	OS_DOMAIN	276
# define	OUTPUT	277
# define	PSEUDOPREEMPTION	278
# define	REENTRANT	279
# define	SCREENNAME	280
# define	SHARELIB	281
# define	STACK	282
# define	START	283
# define	SYNCHRONIZE	284
# define	THREADNAME	285
# define	TYPE	286
# define	VERBOSE	287
# define	VERSIONK	288
# define	XDCDATA	289
# define	STRING	290
# define	QUOTED_STRING	291
d45 1
a45 2
     Copyright 1993, 1994, 1995, 1997, 1998, 2001, 2002
     Free Software Foundation, Inc.
d72 1
a72 1
#include "ansidecl.h"
d74 1
a74 1
#include "safe-ctype.h"
d95 1
a95 1
bfd_boolean debug_info;
d105 1
a105 1
bfd_boolean full_map;
d121 1
a121 1
bfd_boolean verbose;
d138 1
a138 1
static bfd_boolean nlmlex_file_open PARAMS ((const char *));
d154 1
a154 2
#line 113 "nlmheader.y"
#ifndef YYSTYPE
d159 6
a164 3
} yystype;
# define YYSTYPE yystype
# define YYSTYPE_IS_TRIVIAL 1
a165 2
#ifndef YYDEBUG
# define YYDEBUG 0
a173 1
/* YYTRANSLATE(YYLEX) -- Bison token number corresponding to YYLEX. */
d176 31
a206 33
/* YYTRANSLATE[YYLEX] -- Bison token number corresponding to YYLEX. */
static const char yytranslate[] =
{
       0,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
      38,    39,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     1,     3,     4,     5,
       6,     7,     8,     9,    10,    11,    12,    13,    14,    15,
      16,    17,    18,    19,    20,    21,    22,    23,    24,    25,
      26,    27,    28,    29,    30,    31,    32,    33,    34,    35,
      36,    37
d209 8
a216 9
#if YYDEBUG
static const short yyprhs[] =
{
       0,     0,     2,     3,     6,     9,    12,    15,    18,    23,
      25,    28,    31,    32,    36,    39,    42,    44,    47,    50,
      51,    55,    58,    60,    63,    66,    69,    71,    73,    76,
      78,    80,    83,    86,    89,    92,    94,    97,   100,   102,
     107,   111,   114,   115,   117,   119,   121,   124,   127,   131,
     133,   134
d218 16
a233 16
static const short yyrhs[] =
{
      41,     0,     0,    42,    41,     0,     3,    36,     0,     4,
      36,     0,     5,    37,     0,     6,    36,     0,     7,    36,
      36,    36,     0,     8,     0,     9,    37,     0,    10,    36,
       0,     0,    11,    43,    45,     0,    12,    36,     0,    13,
      36,     0,    14,     0,    14,    36,     0,    15,    36,     0,
       0,    16,    44,    45,     0,    17,    49,     0,    18,     0,
      18,    36,     0,    19,    36,     0,    20,    49,     0,    21,
       0,    22,     0,    23,    36,     0,    24,     0,    25,     0,
      26,    37,     0,    27,    36,     0,    28,    36,     0,    29,
      36,     0,    30,     0,    31,    37,     0,    32,    36,     0,
      33,     0,    34,    36,    36,    36,     0,    34,    36,    36,
       0,    35,    36,     0,     0,    46,     0,    48,     0,    47,
       0,    46,    48,     0,    46,    47,     0,    38,    36,    39,
       0,    36,     0,     0,    36,    49,     0
d238 8
a245 10
#if YYDEBUG
/* YYRLINE[YYN] -- source line where rule number YYN was defined. */
static const short yyrline[] =
{
       0,   144,   150,   152,   157,   162,   167,   184,   188,   206,
     210,   226,   230,   230,   238,   243,   248,   253,   258,   262,
     262,   270,   274,   278,   282,   286,   290,   294,   298,   305,
     309,   313,   329,   333,   338,   342,   346,   362,   367,   371,
     395,   411,   419,   424,   434,   439,   443,   447,   455,   466,
     482,   487
d250 1
a250 1
#if (YYDEBUG) || defined YYERROR_VERBOSE
d252 7
a258 12
/* YYTNAME[TOKEN_NUM] -- String name of the token TOKEN_NUM. */
static const char *const yytname[] =
{
  "$", "error", "$undefined.", "CHECK", "CODESTART", "COPYRIGHT", "CUSTOM", 
  "DATE", "DEBUG", "DESCRIPTION", "EXIT", "EXPORT", "FLAG_ON", "FLAG_OFF", 
  "FULLMAP", "HELP", "IMPORT", "INPUT", "MAP", "MESSAGES", "MODULE", 
  "MULTIPLE", "OS_DOMAIN", "OUTPUT", "PSEUDOPREEMPTION", "REENTRANT", 
  "SCREENNAME", "SHARELIB", "STACK", "START", "SYNCHRONIZE", "THREADNAME", 
  "TYPE", "VERBOSE", "VERSIONK", "XDCDATA", "STRING", "QUOTED_STRING", 
  "'('", "')'", "file", "commands", "command", "@@1", "@@2", 
  "symbol_list_opt", "symbol_list", "symbol_prefix", "symbol", 
  "string_list", 0
d262 7
a268 9
/* YYR1[YYN] -- Symbol number of symbol that rule YYN derives. */
static const short yyr1[] =
{
       0,    40,    41,    41,    42,    42,    42,    42,    42,    42,
      42,    42,    43,    42,    42,    42,    42,    42,    42,    44,
      42,    42,    42,    42,    42,    42,    42,    42,    42,    42,
      42,    42,    42,    42,    42,    42,    42,    42,    42,    42,
      42,    42,    45,    45,    46,    46,    46,    46,    47,    48,
      49,    49
d271 7
a277 9
/* YYR2[YYN] -- Number of symbols composing right hand side of rule YYN. */
static const short yyr2[] =
{
       0,     1,     0,     2,     2,     2,     2,     2,     4,     1,
       2,     2,     0,     3,     2,     2,     1,     2,     2,     0,
       3,     2,     1,     2,     2,     2,     1,     1,     2,     1,
       1,     2,     2,     2,     2,     1,     2,     2,     1,     4,
       3,     2,     0,     1,     1,     1,     2,     2,     3,     1,
       0,     2
d280 10
a289 14
/* YYDEFACT[S] -- default rule to reduce with in state S when YYTABLE
   doesn't specify something else to do.  Zero means the default is an
   error. */
static const short yydefact[] =
{
       2,     0,     0,     0,     0,     0,     9,     0,     0,    12,
       0,     0,    16,     0,    19,    50,    22,     0,    50,    26,
      27,     0,    29,    30,     0,     0,     0,     0,    35,     0,
       0,    38,     0,     0,     1,     2,     4,     5,     6,     7,
       0,    10,    11,    42,    14,    15,    17,    18,    42,    50,
      21,    23,    24,    25,    28,    31,    32,    33,    34,    36,
      37,     0,    41,     3,     0,    49,     0,    13,    43,    45,
      44,    20,    51,    40,     8,     0,    47,    46,    39,    48,
       0,     0,     0
d292 2
a293 3
static const short yydefgoto[] =
{
      80,    34,    35,    43,    48,    67,    68,    69,    70,    50
d296 10
a305 11
static const short yypact[] =
{
      -3,    -1,     1,     2,     4,     5,-32768,     6,     8,-32768,
       9,    10,    11,    12,-32768,    13,    14,    16,    13,-32768,
  -32768,    17,-32768,-32768,    18,    20,    21,    22,-32768,    23,
      25,-32768,    26,    27,-32768,    -3,-32768,-32768,-32768,-32768,
      29,-32768,-32768,    -2,-32768,-32768,-32768,-32768,    -2,    13,
  -32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,
  -32768,    30,-32768,-32768,    31,-32768,    32,-32768,    -2,-32768,
  -32768,-32768,-32768,    33,-32768,     3,-32768,-32768,-32768,-32768,
      38,    51,-32768
d308 2
a309 3
static const short yypgoto[] =
{
  -32768,    19,-32768,-32768,-32768,    24,-32768,    -9,     7,    15
d316 9
a324 10
static const short yytable[] =
{
       1,     2,     3,     4,     5,     6,     7,     8,     9,    10,
      11,    12,    13,    14,    15,    16,    17,    18,    19,    20,
      21,    22,    23,    24,    25,    26,    27,    28,    29,    30,
      31,    32,    33,    53,    65,    36,    66,    37,    81,    38,
      39,    40,    79,    41,    42,    44,    45,    46,    47,    49,
      51,    82,    52,    54,    63,    55,    56,    57,    58,    76,
      59,    60,    61,    62,    72,    64,    73,    74,    75,    78,
       0,     0,    71,     0,     0,    77
d327 9
a335 10
static const short yycheck[] =
{
       3,     4,     5,     6,     7,     8,     9,    10,    11,    12,
      13,    14,    15,    16,    17,    18,    19,    20,    21,    22,
      23,    24,    25,    26,    27,    28,    29,    30,    31,    32,
      33,    34,    35,    18,    36,    36,    38,    36,     0,    37,
      36,    36,    39,    37,    36,    36,    36,    36,    36,    36,
      36,     0,    36,    36,    35,    37,    36,    36,    36,    68,
      37,    36,    36,    36,    49,    36,    36,    36,    36,    36,
      -1,    -1,    48,    -1,    -1,    68
d338 2
a339 1
#line 3 "/usr/share/bison-1.35/bison.simple"
d342 1
a342 3

   Copyright (C) 1984, 1989, 1990, 2000, 2001, 2002 Free Software
   Foundation, Inc.
d364 46
a409 57
/* This is the parser code that is written into each bison parser when
   the %semantic_parser declaration is not specified in the grammar.
   It was written by Richard Stallman by simplifying the hairy parser
   used when %semantic_parser is specified.  */

/* All symbols defined below should begin with yy or YY, to avoid
   infringing on user name space.  This should be done even for local
   variables, as they might otherwise be expanded by user macros.
   There are some unavoidable exceptions within include files to
   define necessary library symbols; they are noted "INFRINGES ON
   USER NAME SPACE" below.  */

#if ! defined (yyoverflow) || defined (YYERROR_VERBOSE)

/* The parser invokes alloca or malloc; define the necessary symbols.  */

# if YYSTACK_USE_ALLOCA
#  define YYSTACK_ALLOC alloca
# else
#  ifndef YYSTACK_USE_ALLOCA
#   if defined (alloca) || defined (_ALLOCA_H)
#    define YYSTACK_ALLOC alloca
#   else
#    ifdef __GNUC__
#     define YYSTACK_ALLOC __builtin_alloca
#    endif
#   endif
#  endif
# endif

# ifdef YYSTACK_ALLOC
   /* Pacify GCC's `empty if-body' warning. */
#  define YYSTACK_FREE(Ptr) do { /* empty */; } while (0)
# else
#  if defined (__STDC__) || defined (__cplusplus)
#   include <stdlib.h> /* INFRINGES ON USER NAME SPACE */
#   define YYSIZE_T size_t
#  endif
#  define YYSTACK_ALLOC malloc
#  define YYSTACK_FREE free
# endif
#endif /* ! defined (yyoverflow) || defined (YYERROR_VERBOSE) */


#if (! defined (yyoverflow) \
     && (! defined (__cplusplus) \
	 || (YYLTYPE_IS_TRIVIAL && YYSTYPE_IS_TRIVIAL)))

/* A type that is properly aligned for any stack member.  */
union yyalloc
{
  short yyss;
  YYSTYPE yyvs;
# if YYLSP_NEEDED
  YYLTYPE yyls;
# endif
};
d411 5
a415 2
/* The size of the maximum gap between one aligned stack and the next.  */
# define YYSTACK_GAP_MAX (sizeof (union yyalloc) - 1)
d417 3
a419 64
/* The size of an array large to enough to hold all stacks, each with
   N elements.  */
# if YYLSP_NEEDED
#  define YYSTACK_BYTES(N) \
     ((N) * (sizeof (short) + sizeof (YYSTYPE) + sizeof (YYLTYPE))	\
      + 2 * YYSTACK_GAP_MAX)
# else
#  define YYSTACK_BYTES(N) \
     ((N) * (sizeof (short) + sizeof (YYSTYPE))				\
      + YYSTACK_GAP_MAX)
# endif

/* Copy COUNT objects from FROM to TO.  The source and destination do
   not overlap.  */
# ifndef YYCOPY
#  if 1 < __GNUC__
#   define YYCOPY(To, From, Count) \
      __builtin_memcpy (To, From, (Count) * sizeof (*(From)))
#  else
#   define YYCOPY(To, From, Count)		\
      do					\
	{					\
	  register YYSIZE_T yyi;		\
	  for (yyi = 0; yyi < (Count); yyi++)	\
	    (To)[yyi] = (From)[yyi];		\
	}					\
      while (0)
#  endif
# endif

/* Relocate STACK from its old location to the new one.  The
   local variables YYSIZE and YYSTACKSIZE give the old and new number of
   elements in the stack, and YYPTR gives the new location of the
   stack.  Advance YYPTR to a properly aligned location for the next
   stack.  */
# define YYSTACK_RELOCATE(Stack)					\
    do									\
      {									\
	YYSIZE_T yynewbytes;						\
	YYCOPY (&yyptr->Stack, Stack, yysize);				\
	Stack = &yyptr->Stack;						\
	yynewbytes = yystacksize * sizeof (*Stack) + YYSTACK_GAP_MAX;	\
	yyptr += yynewbytes / sizeof (*yyptr);				\
      }									\
    while (0)

#endif


#if ! defined (YYSIZE_T) && defined (__SIZE_TYPE__)
# define YYSIZE_T __SIZE_TYPE__
#endif
#if ! defined (YYSIZE_T) && defined (size_t)
# define YYSIZE_T size_t
#endif
#if ! defined (YYSIZE_T)
# if defined (__STDC__) || defined (__cplusplus)
#  include <stddef.h> /* INFRINGES ON USER NAME SPACE */
#  define YYSIZE_T size_t
# endif
#endif
#if ! defined (YYSIZE_T)
# define YYSIZE_T unsigned int
#endif
d428 3
a430 2
/* Like YYERROR except do call yyerror.  This remains here temporarily
   to ease the transition to the new meaning of YYERROR, for GCC.
d434 1
a434 1
#define YYBACKUP(Token, Value)					\
d437 1
a437 3
    {								\
      yychar = (Token);						\
      yylval = (Value);						\
d443 1
a443 4
    { 								\
      yyerror ("syntax error: cannot back up");			\
      YYERROR;							\
    }								\
d449 21
d471 1
a471 2
/* YYLLOC_DEFAULT -- Compute the default location (before the actions
   are run).
d473 7
a479 8
   When YYLLOC_DEFAULT is run, CURRENT is set the location of the
   first token.  By default, to implement support for ranges, extend
   its range to the last symbol.  */

#ifndef YYLLOC_DEFAULT
# define YYLLOC_DEFAULT(Current, Rhs, N)       	\
   Current.last_line   = Rhs[N].last_line;	\
   Current.last_column = Rhs[N].last_column;
d482 8
d491 1
a491 40
/* YYLEX -- calling `yylex' with the right arguments.  */

#if YYPURE
# if YYLSP_NEEDED
#  ifdef YYLEX_PARAM
#   define YYLEX		yylex (&yylval, &yylloc, YYLEX_PARAM)
#  else
#   define YYLEX		yylex (&yylval, &yylloc)
#  endif
# else /* !YYLSP_NEEDED */
#  ifdef YYLEX_PARAM
#   define YYLEX		yylex (&yylval, YYLEX_PARAM)
#  else
#   define YYLEX		yylex (&yylval)
#  endif
# endif /* !YYLSP_NEEDED */
#else /* !YYPURE */
# define YYLEX			yylex ()
#endif /* !YYPURE */


/* Enable debugging if requested.  */
#if YYDEBUG

# ifndef YYFPRINTF
#  include <stdio.h> /* INFRINGES ON USER NAME SPACE */
#  define YYFPRINTF fprintf
# endif

# define YYDPRINTF(Args)			\
do {						\
  if (yydebug)					\
    YYFPRINTF Args;				\
} while (0)
/* Nonzero means print parse trace.  It is left uninitialized so that
   multiple parsers can coexist.  */
int yydebug;
#else /* !YYDEBUG */
# define YYDPRINTF(Args)
#endif /* !YYDEBUG */
a492 1
/* YYINITDEPTH -- initial size of the parser's stacks.  */
d494 1
a494 1
# define YYINITDEPTH 200
d497 2
a498 6
/* YYMAXDEPTH -- maximum size the stacks can grow to (effective only
   if the built-in stack extension method is used).

   Do not make this value too large; the results are undefined if
   SIZE_MAX < YYSTACK_BYTES (YYMAXDEPTH)
   evaluated with infinite-precision integer arithmetic.  */
d501 1
a501 1
# undef YYMAXDEPTH
d505 1
a505 1
# define YYMAXDEPTH 10000
d508 9
a516 1
#ifdef YYERROR_VERBOSE
d518 11
a528 14
# ifndef yystrlen
#  if defined (__GLIBC__) && defined (_STRING_H)
#   define yystrlen strlen
#  else
/* Return the length of YYSTR.  */
static YYSIZE_T
#   if defined (__STDC__) || defined (__cplusplus)
yystrlen (const char *yystr)
#   else
yystrlen (yystr)
     const char *yystr;
#   endif
{
  register const char *yys = yystr;
d530 3
a532 2
  while (*yys++ != '\0')
    continue;
d534 1
a534 4
  return yys - yystr - 1;
}
#  endif
# endif
d536 4
a539 14
# ifndef yystpcpy
#  if defined (__GLIBC__) && defined (_STRING_H) && defined (_GNU_SOURCE)
#   define yystpcpy stpcpy
#  else
/* Copy YYSRC to YYDEST, returning the address of the terminating '\0' in
   YYDEST.  */
static char *
#   if defined (__STDC__) || defined (__cplusplus)
yystpcpy (char *yydest, const char *yysrc)
#   else
yystpcpy (yydest, yysrc)
     char *yydest;
     const char *yysrc;
#   endif
d541 3
a543 2
  register char *yyd = yydest;
  register const char *yys = yysrc;
d545 3
a547 2
  while ((*yyd++ = *yys++) != '\0')
    continue;
d549 1
a549 4
  return yyd - 1;
}
#  endif
# endif
d552 1
a552 2
#line 315 "/usr/share/bison-1.35/bison.simple"

d561 11
a571 11
# if defined (__STDC__) || defined (__cplusplus)
#  define YYPARSE_PARAM_ARG void *YYPARSE_PARAM
#  define YYPARSE_PARAM_DECL
# else
#  define YYPARSE_PARAM_ARG YYPARSE_PARAM
#  define YYPARSE_PARAM_DECL void *YYPARSE_PARAM;
# endif
#else /* !YYPARSE_PARAM */
# define YYPARSE_PARAM_ARG
# define YYPARSE_PARAM_DECL
#endif /* !YYPARSE_PARAM */
d575 1
a575 1
# ifdef YYPARSE_PARAM
d577 1
a577 1
# else
a578 1
# endif
a579 23

/* YY_DECL_VARIABLES -- depending whether we use a pure parser,
   variables are global, or local to YYPARSE.  */

#define YY_DECL_NON_LSP_VARIABLES			\
/* The lookahead symbol.  */				\
int yychar;						\
							\
/* The semantic value of the lookahead symbol. */	\
YYSTYPE yylval;						\
							\
/* Number of parse errors so far.  */			\
int yynerrs;

#if YYLSP_NEEDED
# define YY_DECL_VARIABLES			\
YY_DECL_NON_LSP_VARIABLES			\
						\
/* Location data for the lookahead symbol.  */	\
YYLTYPE yylloc;
#else
# define YY_DECL_VARIABLES			\
YY_DECL_NON_LSP_VARIABLES
a581 7

/* If nonreentrant, generate the variables here. */

#if !YYPURE
YY_DECL_VARIABLES
#endif  /* !YYPURE */

d583 1
a583 1
yyparse (YYPARSE_PARAM_ARG)
a585 5
  /* If reentrant, generate the variables here. */
#if YYPURE
  YY_DECL_VARIABLES
#endif  /* !YYPURE */

a587 17
  int yyresult;
  /* Number of tokens to shift before error messages enabled.  */
  int yyerrstatus;
  /* Lookahead token as an internal (translated) token number.  */
  int yychar1 = 0;

  /* Three stacks and their tools:
     `yyss': related to states,
     `yyvs': related to semantic values,
     `yyls': related to locations.

     Refer to the stacks thru separate pointers, to allow yyoverflow
     to reallocate them elsewhere.  */

  /* The state stack. */
  short	yyssa[YYINITDEPTH];
  short *yyss = yyssa;
d589 3
d593 5
a597 4
  /* The semantic value stack.  */
  YYSTYPE yyvsa[YYINITDEPTH];
  YYSTYPE *yyvs = yyvsa;
  register YYSTYPE *yyvsp;
d599 2
a600 3
#if YYLSP_NEEDED
  /* The location stack.  */
  YYLTYPE yylsa[YYINITDEPTH];
a602 1
#endif
d604 1
a604 2
#if YYLSP_NEEDED
# define YYPOPSTACK   (yyvsp--, yyssp--, yylsp--)
d606 1
a606 1
# define YYPOPSTACK   (yyvsp--, yyssp--)
d609 2
a610 1
  YYSIZE_T yystacksize = YYINITDEPTH;
d612 8
d621 3
a623 6
  /* The variables used to return semantic value and location from the
     action routines.  */
  YYSTYPE yyval;
#if YYLSP_NEEDED
  YYLTYPE yyloc;
#endif
a624 2
  /* When reducing, the number of symbols on the RHS of the reduced
     rule. */
d627 4
a630 1
  YYDPRINTF ((stderr, "Starting parse\n"));
d642 1
a642 1
  yyssp = yyss;
d644 1
a644 1
#if YYLSP_NEEDED
a646 1
  goto yysetstate;
d648 4
a651 8
/*------------------------------------------------------------.
| yynewstate -- Push a new state, which is found in yystate.  |
`------------------------------------------------------------*/
 yynewstate:
  /* In all cases, when you get here, the value and location stacks
     have just been pushed. so pushing a state here evens the stacks.
     */
  yyssp++;
d653 1
a653 2
 yysetstate:
  *yyssp = yystate;
d657 8
d666 1
a666 1
      YYSIZE_T yysize = yyssp - yyss + 1;
d669 21
a689 28
      {
	/* Give user a chance to reallocate the stack. Use copies of
	   these so that the &'s don't force the real ones into
	   memory.  */
	YYSTYPE *yyvs1 = yyvs;
	short *yyss1 = yyss;

	/* Each stack pointer address is followed by the size of the
	   data in use in that stack, in bytes.  */
# if YYLSP_NEEDED
	YYLTYPE *yyls1 = yyls;
	/* This used to be a conditional around just the two extra args,
	   but that might be undefined if yyoverflow is a macro.  */
	yyoverflow ("parser stack overflow",
		    &yyss1, yysize * sizeof (*yyssp),
		    &yyvs1, yysize * sizeof (*yyvsp),
		    &yyls1, yysize * sizeof (*yylsp),
		    &yystacksize);
	yyls = yyls1;
# else
	yyoverflow ("parser stack overflow",
		    &yyss1, yysize * sizeof (*yyssp),
		    &yyvs1, yysize * sizeof (*yyvsp),
		    &yystacksize);
# endif
	yyss = yyss1;
	yyvs = yyvs1;
      }
a690 3
# ifndef YYSTACK_RELOCATE
      goto yyoverflowlab;
# else
d693 12
a704 1
	goto yyoverflowlab;
d708 14
a721 17

      {
	short *yyss1 = yyss;
	union yyalloc *yyptr =
	  (union yyalloc *) YYSTACK_ALLOC (YYSTACK_BYTES (yystacksize));
	if (! yyptr)
	  goto yyoverflowlab;
	YYSTACK_RELOCATE (yyss);
	YYSTACK_RELOCATE (yyvs);
# if YYLSP_NEEDED
	YYSTACK_RELOCATE (yyls);
# endif
# undef YYSTACK_RELOCATE
	if (yyss1 != yyssa)
	  YYSTACK_FREE (yyss1);
      }
# endif
d724 4
a727 4
      yyssp = yyss + yysize - 1;
      yyvsp = yyvs + yysize - 1;
#if YYLSP_NEEDED
      yylsp = yyls + yysize - 1;
d730 4
a733 2
      YYDPRINTF ((stderr, "Stack size increased to %lu\n",
		  (unsigned long int) yystacksize));
d739 4
a742 1
  YYDPRINTF ((stderr, "Entering state %d\n", yystate));
d745 1
a745 6


/*-----------.
| yybackup.  |
`-----------*/
yybackup:
d764 4
a767 1
      YYDPRINTF ((stderr, "Reading a token: "));
d778 4
a781 1
      YYDPRINTF ((stderr, "Now at end of input.\n"));
d785 1
a785 1
      yychar1 = YYTRANSLATE (yychar);
d787 1
a787 3
#if YYDEBUG
     /* We have to keep this `#if YYDEBUG', since we use variables
	which are defined only if `YYDEBUG' is set.  */
d790 4
a793 5
	  YYFPRINTF (stderr, "Next token is %d (%s",
		     yychar, yytname[yychar1]);
	  /* Give the individual parser a way to print the precise
	     meaning of a token, for further debugging info.  */
# ifdef YYPRINT
d795 2
a796 2
# endif
	  YYFPRINTF (stderr, ")\n");
d828 5
a832 2
  YYDPRINTF ((stderr, "Shifting token %d (%s), ",
	      yychar, yytname[yychar1]));
d839 1
a839 1
#if YYLSP_NEEDED
d843 2
a844 4
  /* Count tokens shifted since error; after three, turn off error
     status.  */
  if (yyerrstatus)
    yyerrstatus--;
d849 2
a851 4
/*-----------------------------------------------------------.
| yydefault -- do the default action for the current state.  |
`-----------------------------------------------------------*/
yydefault:
a854 2
  goto yyreduce;

d856 1
a856 3
/*-----------------------------.
| yyreduce -- Do a reduction.  |
`-----------------------------*/
a857 1
  /* yyn is the number of a rule to reduce with.  */
d859 2
d862 1
a862 20
  /* If YYLEN is nonzero, implement the default value of the action:
     `$$ = $1'.

     Otherwise, the following line sets YYVAL to the semantic value of
     the lookahead token.  This behavior is undocumented and Bison
     users should not rely upon it.  Assigning to YYVAL
     unconditionally makes the parser a bit smaller, and it avoids a
     GCC warning that YYVAL may be used uninitialized.  */
  yyval = yyvsp[1-yylen];

#if YYLSP_NEEDED
  /* Similarly for the default location.  Let the user run additional
     commands if for instance locations are ranges.  */
  yyloc = yylsp[1-yylen];
  YYLLOC_DEFAULT (yyloc, (yylsp - yylen), yylen);
#endif

#if YYDEBUG
  /* We have to keep this `#if YYDEBUG', since we use variables which
     are defined only if `YYDEBUG' is set.  */
d865 1
a865 1
      int yyi;
d867 2
a868 2
      YYFPRINTF (stderr, "Reducing via rule %d (line %d), ",
		 yyn, yyrline[yyn]);
d871 3
a873 3
      for (yyi = yyprhs[yyn]; yyrhs[yyi] > 0; yyi++)
	YYFPRINTF (stderr, "%s ", yytname[yyrhs[yyi]]);
      YYFPRINTF (stderr, " -> %s\n", yytname[yyr1[yyn]]);
d877 1
d881 1
a881 1
#line 159 "nlmheader.y"
d884 2
a885 2
	  }
    break;
d887 1
a887 1
#line 163 "nlmheader.y"
d891 2
a892 2
	  }
    break;
d894 1
a894 1
#line 168 "nlmheader.y"
d910 2
a911 2
	  }
    break;
d913 1
a913 1
#line 185 "nlmheader.y"
d916 2
a917 2
	  }
    break;
d919 1
a919 1
#line 189 "nlmheader.y"
d936 2
a937 2
	  }
    break;
d939 1
a939 1
#line 207 "nlmheader.y"
d941 3
a943 3
	    debug_info = TRUE;
	  }
    break;
d945 1
a945 1
#line 211 "nlmheader.y"
d960 2
a961 2
	  }
    break;
d963 1
a963 1
#line 227 "nlmheader.y"
d966 2
a967 2
	  }
    break;
d969 1
a969 1
#line 231 "nlmheader.y"
d972 2
a973 2
	  }
    break;
d975 1
a975 1
#line 235 "nlmheader.y"
d978 2
a979 2
	  }
    break;
d981 1
a981 1
#line 239 "nlmheader.y"
d985 2
a986 2
	  }
    break;
d988 1
a988 1
#line 244 "nlmheader.y"
d992 2
a993 2
	  }
    break;
d995 1
a995 1
#line 249 "nlmheader.y"
d998 3
a1000 3
	    full_map = TRUE;
	  }
    break;
d1002 1
a1002 1
#line 254 "nlmheader.y"
d1005 3
a1007 3
	    full_map = TRUE;
	  }
    break;
d1009 1
a1009 1
#line 259 "nlmheader.y"
d1012 2
a1013 2
	  }
    break;
d1015 1
a1015 1
#line 263 "nlmheader.y"
d1018 2
a1019 2
	  }
    break;
d1021 1
a1021 1
#line 267 "nlmheader.y"
d1024 2
a1025 2
	  }
    break;
d1027 1
a1027 1
#line 271 "nlmheader.y"
d1030 2
a1031 2
	  }
    break;
d1033 1
a1033 1
#line 275 "nlmheader.y"
d1036 2
a1037 2
	  }
    break;
d1039 1
a1039 1
#line 279 "nlmheader.y"
d1042 2
a1043 2
	  }
    break;
d1045 1
a1045 1
#line 283 "nlmheader.y"
d1048 2
a1049 2
	  }
    break;
d1051 1
a1051 1
#line 287 "nlmheader.y"
d1054 2
a1055 2
	  }
    break;
d1057 1
a1057 1
#line 291 "nlmheader.y"
d1060 2
a1061 2
	  }
    break;
d1063 1
a1063 1
#line 295 "nlmheader.y"
d1066 2
a1067 2
	  }
    break;
d1069 1
a1069 1
#line 299 "nlmheader.y"
d1075 2
a1076 2
	  }
    break;
d1078 1
a1078 1
#line 306 "nlmheader.y"
d1081 2
a1082 2
	  }
    break;
d1084 1
a1084 1
#line 310 "nlmheader.y"
d1087 2
a1088 2
	  }
    break;
d1090 1
a1090 1
#line 314 "nlmheader.y"
d1105 2
a1106 2
	  }
    break;
d1108 1
a1108 1
#line 330 "nlmheader.y"
d1111 2
a1112 2
	  }
    break;
d1114 1
a1114 1
#line 334 "nlmheader.y"
d1118 2
a1119 2
	  }
    break;
d1121 1
a1121 1
#line 339 "nlmheader.y"
d1124 2
a1125 2
	  }
    break;
d1127 1
a1127 1
#line 343 "nlmheader.y"
d1130 2
a1131 2
	  }
    break;
d1133 1
a1133 1
#line 347 "nlmheader.y"
d1148 2
a1149 2
	  }
    break;
d1151 1
a1151 1
#line 363 "nlmheader.y"
d1155 2
a1156 2
	  }
    break;
d1158 1
a1158 1
#line 368 "nlmheader.y"
d1160 3
a1162 3
	    verbose = TRUE;
	  }
    break;
d1164 1
a1164 1
#line 372 "nlmheader.y"
d1187 2
a1188 2
	  }
    break;
d1190 1
a1190 1
#line 396 "nlmheader.y"
d1205 2
a1206 2
	  }
    break;
d1208 1
a1208 1
#line 412 "nlmheader.y"
d1211 2
a1212 2
	  }
    break;
d1214 1
a1214 1
#line 421 "nlmheader.y"
d1217 2
a1218 2
	  }
    break;
d1220 1
a1220 1
#line 425 "nlmheader.y"
d1223 2
a1224 2
	  }
    break;
d1226 1
a1226 1
#line 436 "nlmheader.y"
d1229 2
a1230 2
	  }
    break;
d1232 1
a1232 1
#line 440 "nlmheader.y"
d1235 2
a1236 2
	  }
    break;
d1238 1
a1238 1
#line 444 "nlmheader.y"
d1241 2
a1242 2
	  }
    break;
d1244 1
a1244 1
#line 448 "nlmheader.y"
d1247 2
a1248 2
	  }
    break;
d1250 1
a1250 1
#line 457 "nlmheader.y"
d1255 2
a1256 2
	  }
    break;
d1258 1
a1258 1
#line 468 "nlmheader.y"
d1268 2
a1269 2
	  }
    break;
d1271 1
a1271 1
#line 484 "nlmheader.y"
d1274 2
a1275 2
	  }
    break;
d1277 1
a1277 1
#line 488 "nlmheader.y"
d1280 2
a1281 2
	  }
    break;
d1283 2
a1284 3

#line 705 "/usr/share/bison-1.35/bison.simple"

d1288 1
a1288 1
#if YYLSP_NEEDED
d1292 1
a1292 1
#if YYDEBUG
d1295 5
a1299 5
      short *yyssp1 = yyss - 1;
      YYFPRINTF (stderr, "state stack now");
      while (yyssp1 != yyssp)
	YYFPRINTF (stderr, " %d", *++yyssp1);
      YYFPRINTF (stderr, "\n");
d1304 16
a1319 2
#if YYLSP_NEEDED
  *++yylsp = yyloc;
d1322 4
a1325 3
  /* Now `shift' the result of the reduction.  Determine what state
     that goes to, based on the state we popped back to and the rule
     number reduced by.  */
d1337 1
d1339 2
a1340 6
/*------------------------------------.
| yyerrlab -- here on detecting error |
`------------------------------------*/
yyerrlab:
  /* If not already recovering from an error, report this error.  */
  if (!yyerrstatus)
d1349 12
a1360 15
	  YYSIZE_T yysize = 0;
	  char *yymsg;
	  int yyx, yycount;

	  yycount = 0;
	  /* Start YYX at -YYN if negative to avoid negative indexes in
	     YYCHECK.  */
	  for (yyx = yyn < 0 ? -yyn : 0;
	       yyx < (int) (sizeof (yytname) / sizeof (char *)); yyx++)
	    if (yycheck[yyx + yyn] == yyx)
	      yysize += yystrlen (yytname[yyx]) + 15, yycount++;
	  yysize += yystrlen ("parse error, unexpected ") + 1;
	  yysize += yystrlen (yytname[YYTRANSLATE (yychar)]);
	  yymsg = (char *) YYSTACK_ALLOC (yysize);
	  if (yymsg != 0)
d1362 1
a1362 2
	      char *yyp = yystpcpy (yymsg, "parse error, unexpected ");
	      yyp = yystpcpy (yyp, yytname[YYTRANSLATE (yychar)]);
d1364 1
a1364 1
	      if (yycount < 5)
d1366 4
a1369 5
		  yycount = 0;
		  for (yyx = yyn < 0 ? -yyn : 0;
		       yyx < (int) (sizeof (yytname) / sizeof (char *));
		       yyx++)
		    if (yycheck[yyx + yyn] == yyx)
d1371 4
a1374 4
			const char *yyq = ! yycount ? ", expecting " : " or ";
			yyp = yystpcpy (yyp, yyq);
			yyp = yystpcpy (yyp, yytname[yyx]);
			yycount++;
d1377 2
a1378 2
	      yyerror (yymsg);
	      YYSTACK_FREE (yymsg);
d1381 1
a1381 1
	    yyerror ("parse error; also virtual memory exhausted");
d1384 2
a1385 2
#endif /* defined (YYERROR_VERBOSE) */
	yyerror ("parse error");
d1387 1
d1389 1
a1390 5

/*--------------------------------------------------.
| yyerrlab1 -- error raised explicitly by an action |
`--------------------------------------------------*/
yyerrlab1:
d1393 1
a1393 2
      /* If just tried and failed to reuse lookahead token after an
	 error, discard it.  */
d1398 6
a1403 2
      YYDPRINTF ((stderr, "Discarding token %d (%s).\n",
		  yychar, yytname[yychar1]));
d1407 2
a1408 2
  /* Else will try to reuse lookahead token after shifting the error
     token.  */
d1414 1
a1415 5
/*-------------------------------------------------------------------.
| yyerrdefault -- current state does not do anything special for the |
| error token.                                                       |
`-------------------------------------------------------------------*/
yyerrdefault:
d1419 2
a1420 5

  /* If its default is to accept any token, ok.  Otherwise pop it.  */
  yyn = yydefact[yystate];
  if (yyn)
    goto yydefault;
d1423 1
d1425 1
a1425 7
/*---------------------------------------------------------------.
| yyerrpop -- pop the current state because it cannot handle the |
| error token                                                    |
`---------------------------------------------------------------*/
yyerrpop:
  if (yyssp == yyss)
    YYABORT;
d1428 1
a1428 1
#if YYLSP_NEEDED
d1432 1
a1432 1
#if YYDEBUG
d1435 5
a1439 5
      short *yyssp1 = yyss - 1;
      YYFPRINTF (stderr, "Error: state stack now");
      while (yyssp1 != yyssp)
	YYFPRINTF (stderr, " %d", *++yyssp1);
      YYFPRINTF (stderr, "\n");
a1442 3
/*--------------.
| yyerrhandle.  |
`--------------*/
d1444 1
d1467 4
a1470 1
  YYDPRINTF ((stderr, "Shifting error token, "));
d1473 1
a1473 1
#if YYLSP_NEEDED
d1480 11
d1492 8
a1499 26
/*-------------------------------------.
| yyacceptlab -- YYACCEPT comes here.  |
`-------------------------------------*/
yyacceptlab:
  yyresult = 0;
  goto yyreturn;

/*-----------------------------------.
| yyabortlab -- YYABORT comes here.  |
`-----------------------------------*/
yyabortlab:
  yyresult = 1;
  goto yyreturn;

/*---------------------------------------------.
| yyoverflowab -- parser overflow comes here.  |
`---------------------------------------------*/
yyoverflowlab:
  yyerror ("parser stack overflow");
  yyresult = 2;
  /* Fall through.  */

yyreturn:
#ifndef yyoverflow
  if (yyss != yyssa)
    YYSTACK_FREE (yyss);
d1501 2
a1502 1
  return yyresult;
d1504 1
a1504 1
#line 493 "nlmheader.y"
d1510 1
a1510 1
extern char *strerror PARAMS ((int));
d1551 1
a1551 1
bfd_boolean
d1580 1
a1580 1
static bfd_boolean
d1589 1
a1589 1
      return FALSE;
d1594 1
a1594 1
  return TRUE;
d1698 1
a1698 1
  while (ISSPACE (c) || c == ',')
d1751 1
a1751 1
      while (ISSPACE (c));
d1753 1
a1753 1
      while (! ISSPACE (c) && c != EOF)
d1761 1
a1761 1

d1771 1
a1771 1
      while (ISALNUM (c) || c == '_')
d1773 4
a1776 1
	  BUF_ADD (TOUPPER (c));
d1781 1
a1781 1
      if (c != EOF && ! ISSPACE (c) && c != ',')
d1803 1
a1803 1

d1854 1
a1854 1
  while (! ISSPACE (c)
@


1.1.1.6
log
@Binutils 2.15, with testsuites removed, and without gdb and libiberty.
@
text
@d44 1
a44 1
     Copyright 1993, 1994, 1995, 1997, 1998, 2001, 2002, 2003
d136 16
a151 15
static int yylex (void);
static void nlmlex_file_push (const char *);
static bfd_boolean nlmlex_file_open (const char *);
static int nlmlex_buf_init (void);
static char nlmlex_buf_add (int);
static long nlmlex_get_number (const char *);
static void nlmheader_identify (void);
static void nlmheader_warn (const char *, int);
static void nlmheader_error (const char *);
static struct string_list * string_list_cons (char *, struct string_list *);
static struct string_list * string_list_append (struct string_list *,
						struct string_list *);
static struct string_list * string_list_append1 (struct string_list *,
						 char *);
static char *xstrdup (const char *);
d154 1
a154 1
#line 112 "nlmheader.y"
d246 6
a251 6
       0,   143,   149,   151,   156,   161,   166,   183,   187,   205,
     209,   225,   229,   229,   237,   242,   247,   252,   257,   261,
     261,   269,   273,   277,   281,   285,   289,   293,   297,   304,
     308,   312,   328,   332,   337,   341,   345,   361,   366,   370,
     394,   410,   418,   423,   433,   438,   442,   446,   454,   465,
     481,   486
d1069 1
a1069 1
#line 158 "nlmheader.y"
d1075 1
a1075 1
#line 162 "nlmheader.y"
d1082 1
a1082 1
#line 167 "nlmheader.y"
d1101 1
a1101 1
#line 184 "nlmheader.y"
d1107 1
a1107 1
#line 188 "nlmheader.y"
d1127 1
a1127 1
#line 206 "nlmheader.y"
d1133 1
a1133 1
#line 210 "nlmheader.y"
d1151 1
a1151 1
#line 226 "nlmheader.y"
d1157 1
a1157 1
#line 230 "nlmheader.y"
d1163 1
a1163 1
#line 234 "nlmheader.y"
d1169 1
a1169 1
#line 238 "nlmheader.y"
d1176 1
a1176 1
#line 243 "nlmheader.y"
d1183 1
a1183 1
#line 248 "nlmheader.y"
d1190 1
a1190 1
#line 253 "nlmheader.y"
d1197 1
a1197 1
#line 258 "nlmheader.y"
d1203 1
a1203 1
#line 262 "nlmheader.y"
d1209 1
a1209 1
#line 266 "nlmheader.y"
d1215 1
a1215 1
#line 270 "nlmheader.y"
d1221 1
a1221 1
#line 274 "nlmheader.y"
d1227 1
a1227 1
#line 278 "nlmheader.y"
d1233 1
a1233 1
#line 282 "nlmheader.y"
d1239 1
a1239 1
#line 286 "nlmheader.y"
d1245 1
a1245 1
#line 290 "nlmheader.y"
d1251 1
a1251 1
#line 294 "nlmheader.y"
d1257 1
a1257 1
#line 298 "nlmheader.y"
d1266 1
a1266 1
#line 305 "nlmheader.y"
d1272 1
a1272 1
#line 309 "nlmheader.y"
d1278 1
a1278 1
#line 313 "nlmheader.y"
d1296 1
a1296 1
#line 329 "nlmheader.y"
d1302 1
a1302 1
#line 333 "nlmheader.y"
d1309 1
a1309 1
#line 338 "nlmheader.y"
d1315 1
a1315 1
#line 342 "nlmheader.y"
d1321 1
a1321 1
#line 346 "nlmheader.y"
d1339 1
a1339 1
#line 362 "nlmheader.y"
d1346 1
a1346 1
#line 367 "nlmheader.y"
d1352 1
a1352 1
#line 371 "nlmheader.y"
d1378 1
a1378 1
#line 395 "nlmheader.y"
d1396 1
a1396 1
#line 411 "nlmheader.y"
d1402 1
a1402 1
#line 420 "nlmheader.y"
d1408 1
a1408 1
#line 424 "nlmheader.y"
d1414 1
a1414 1
#line 435 "nlmheader.y"
d1420 1
a1420 1
#line 439 "nlmheader.y"
d1426 1
a1426 1
#line 443 "nlmheader.y"
d1432 1
a1432 1
#line 447 "nlmheader.y"
d1438 1
a1438 1
#line 456 "nlmheader.y"
d1446 1
a1446 1
#line 467 "nlmheader.y"
d1459 1
a1459 1
#line 483 "nlmheader.y"
d1465 1
a1465 1
#line 487 "nlmheader.y"
d1703 1
a1703 1
#line 492 "nlmheader.y"
d1751 2
a1752 1
nlmlex_file (const char *name)
d1761 2
a1762 1
nlmlex_file_push (const char *name)
d1780 2
a1781 1
nlmlex_file_open (const char *name)
d1854 1
a1854 1
nlmlex_buf_init (void)
d1872 2
a1873 1
nlmlex_buf_add (int c)
d1888 1
a1888 1
yylex (void)
d2071 2
a2072 1
nlmlex_get_number (const char *s)
d2089 1
a2089 1
nlmheader_identify (void)
d2104 3
a2106 1
nlmheader_warn (const char *s, int imax)
d2118 2
a2119 1
nlmheader_error (const char *s)
d2128 3
a2130 1
string_list_cons (char *s, struct string_list *l)
d2143 3
a2145 1
string_list_append (struct string_list *l1, struct string_list *l2)
d2158 3
a2160 1
string_list_append1 (struct string_list *l, char *s)
d2177 2
a2178 1
xstrdup (const char *s)
@


