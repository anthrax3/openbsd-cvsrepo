head	1.2;
access;
symbols
	BINUTILS_2_15:1.1.1.5
	BINUTILS-2_14:1.1.1.4
	binutils-2_11_2:1.1.1.3
	BINUTILS-2_10_1:1.1.1.2
	BINUTILS-2_10:1.1.1.2
	BINUTILS-2_8_1:1.1.1.1
	CYGNUS:1.1.1
	FSF_2_6:1.1.1.1
	FSF:1.1.1;
locks; strict;
comment	@ * @;


1.2
date	96.06.10.10.49.10;	author niklas;	state dead;
branches;
next	1.1;

1.1
date	96.01.08.11.03.58;	author niklas;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	96.01.08.11.03.58;	author niklas;	state Exp;
branches;
next	1.1.1.2;

1.1.1.2
date	2000.09.12.14.45.10;	author espie;	state Exp;
branches;
next	1.1.1.3;

1.1.1.3
date	2002.05.13.13.17.06;	author fgsch;	state Exp;
branches;
next	1.1.1.4;

1.1.1.4
date	2004.05.17.20.42.05;	author drahn;	state Exp;
branches;
next	1.1.1.5;

1.1.1.5
date	2004.11.02.20.22.04;	author miod;	state Exp;
branches;
next	;


desc
@@


1.2
log
@Bring Cygnus versions into the trunk, keeping our local patches
@
text
@/* A lexical scanner generated by flex */

/* Scanner skeleton version:
 * $Header: /cvs/src/gnu/usr.bin/binutils/binutils/syslex.c,v 1.1 1996/01/08 11:03:58 niklas Exp niklas $
 */

#define FLEX_SCANNER
#define YY_FLEX_MAJOR_VERSION 2
#define YY_FLEX_MINOR_VERSION 5

#include <stdio.h>


/* cfront 1.2 defines "c_plusplus" instead of "__cplusplus" */
#ifdef c_plusplus
#ifndef __cplusplus
#define __cplusplus
#endif
#endif


#ifdef __cplusplus

#include <stdlib.h>
#include <unistd.h>

/* Use prototypes in function declarations. */
#define YY_USE_PROTOS

/* The "const" storage-class-modifier is valid. */
#define YY_USE_CONST

#else	/* ! __cplusplus */

#if __STDC__

#define YY_USE_PROTOS
#define YY_USE_CONST

#endif	/* __STDC__ */
#endif	/* ! __cplusplus */

#ifdef __TURBOC__
 #pragma warn -rch
 #pragma warn -use
#include <io.h>
#include <stdlib.h>
#define YY_USE_CONST
#define YY_USE_PROTOS
#endif

#ifdef YY_USE_CONST
#define yyconst const
#else
#define yyconst
#endif


#ifdef YY_USE_PROTOS
#define YY_PROTO(proto) proto
#else
#define YY_PROTO(proto) ()
#endif

/* Returned upon end-of-file. */
#define YY_NULL 0

/* Promotes a possibly negative, possibly signed char to an unsigned
 * integer for use as an array index.  If the signed char is negative,
 * we want to instead treat it as an 8-bit unsigned char, hence the
 * double cast.
 */
#define YY_SC_TO_UI(c) ((unsigned int) (unsigned char) c)

/* Enter a start condition.  This macro really ought to take a parameter,
 * but we do it the disgusting crufty way forced on us by the ()-less
 * definition of BEGIN.
 */
#define BEGIN yy_start = 1 + 2 *

/* Translate the current start state into a value that can be later handed
 * to BEGIN to return to the state.  The YYSTATE alias is for lex
 * compatibility.
 */
#define YY_START ((yy_start - 1) / 2)
#define YYSTATE YY_START

/* Action number for EOF rule of a given start state. */
#define YY_STATE_EOF(state) (YY_END_OF_BUFFER + state + 1)

/* Special action meaning "start processing a new file". */
#define YY_NEW_FILE yyrestart( yyin )

#define YY_END_OF_BUFFER_CHAR 0

/* Size of default input buffer. */
#define YY_BUF_SIZE 16384

typedef struct yy_buffer_state *YY_BUFFER_STATE;

extern int yyleng;
extern FILE *yyin, *yyout;

#define EOB_ACT_CONTINUE_SCAN 0
#define EOB_ACT_END_OF_FILE 1
#define EOB_ACT_LAST_MATCH 2

/* The funky do-while in the following #define is used to turn the definition
 * int a single C statement (which needs a semi-colon terminator).  This
 * avoids problems with code like:
 *
 * 	if ( condition_holds )
 *		yyless( 5 );
 *	else
 *		do_something_else();
 *
 * Prior to using the do-while the compiler would get upset at the
 * "else" because it interpreted the "if" statement as being all
 * done when it reached the ';' after the yyless() call.
 */

/* Return all but the first 'n' matched characters back to the input stream. */

#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up yytext. */ \
		*yy_cp = yy_hold_char; \
		yy_c_buf_p = yy_cp = yy_bp + n - YY_MORE_ADJ; \
		YY_DO_BEFORE_ACTION; /* set up yytext again */ \
		} \
	while ( 0 )

#define unput(c) yyunput( c, yytext_ptr )

/* The following is because we cannot portably get our hands on size_t
 * (without autoconf's help, which isn't available because we want
 * flex-generated scanners to compile on their own).
 */
typedef unsigned int yy_size_t;


struct yy_buffer_state
	{
	FILE *yy_input_file;

	char *yy_ch_buf;		/* input buffer */
	char *yy_buf_pos;		/* current position in input buffer */

	/* Size of input buffer in bytes, not including room for EOB
	 * characters.
	 */
	yy_size_t yy_buf_size;

	/* Number of characters read into yy_ch_buf, not including EOB
	 * characters.
	 */
	int yy_n_chars;

	/* Whether we "own" the buffer - i.e., we know we created it,
	 * and can realloc() it to grow it, and should free() it to
	 * delete it.
	 */
	int yy_is_our_buffer;

	/* Whether this is an "interactive" input source; if so, and
	 * if we're using stdio for input, then we want to use getc()
	 * instead of fread(), to make sure we stop fetching input after
	 * each newline.
	 */
	int yy_is_interactive;

	/* Whether we're considered to be at the beginning of a line.
	 * If so, '^' rules will be active on the next match, otherwise
	 * not.
	 */
	int yy_at_bol;

	/* Whether to try to fill the input buffer when we reach the
	 * end of it.
	 */
	int yy_fill_buffer;

	int yy_buffer_status;
#define YY_BUFFER_NEW 0
#define YY_BUFFER_NORMAL 1
	/* When an EOF's been seen but there's still some text to process
	 * then we mark the buffer as YY_EOF_PENDING, to indicate that we
	 * shouldn't try reading from the input source any more.  We might
	 * still have a bunch of tokens to match, though, because of
	 * possible backing-up.
	 *
	 * When we actually see the EOF, we change the status to "new"
	 * (via yyrestart()), so that the user can continue scanning by
	 * just pointing yyin at a new input file.
	 */
#define YY_BUFFER_EOF_PENDING 2
	};

static YY_BUFFER_STATE yy_current_buffer = 0;

/* We provide macros for accessing buffer states in case in the
 * future we want to put the buffer states in a more general
 * "scanner state".
 */
#define YY_CURRENT_BUFFER yy_current_buffer


/* yy_hold_char holds the character lost when yytext is formed. */
static char yy_hold_char;

static int yy_n_chars;		/* number of characters read into yy_ch_buf */


int yyleng;

/* Points to current character in buffer. */
static char *yy_c_buf_p = (char *) 0;
static int yy_init = 1;		/* whether we need to initialize */
static int yy_start = 0;	/* start state number */

/* Flag which is used to allow yywrap()'s to do buffer switches
 * instead of setting up a fresh yyin.  A bit of a hack ...
 */
static int yy_did_buffer_switch_on_eof;

void yyrestart YY_PROTO(( FILE *input_file ));

void yy_switch_to_buffer YY_PROTO(( YY_BUFFER_STATE new_buffer ));
void yy_load_buffer_state YY_PROTO(( void ));
YY_BUFFER_STATE yy_create_buffer YY_PROTO(( FILE *file, int size ));
void yy_delete_buffer YY_PROTO(( YY_BUFFER_STATE b ));
void yy_init_buffer YY_PROTO(( YY_BUFFER_STATE b, FILE *file ));
void yy_flush_buffer YY_PROTO(( YY_BUFFER_STATE b ));
#define YY_FLUSH_BUFFER yy_flush_buffer( yy_current_buffer )

YY_BUFFER_STATE yy_scan_buffer YY_PROTO(( char *base, yy_size_t size ));
YY_BUFFER_STATE yy_scan_string YY_PROTO(( yyconst char *str ));
YY_BUFFER_STATE yy_scan_bytes YY_PROTO(( yyconst char *bytes, int len ));

static void *yy_flex_alloc YY_PROTO(( yy_size_t ));
static void *yy_flex_realloc YY_PROTO(( void *, yy_size_t ));
static void yy_flex_free YY_PROTO(( void * ));

#define yy_new_buffer yy_create_buffer

#define yy_set_interactive(is_interactive) \
	{ \
	if ( ! yy_current_buffer ) \
		yy_current_buffer = yy_create_buffer( yyin, YY_BUF_SIZE ); \
	yy_current_buffer->yy_is_interactive = is_interactive; \
	}

#define yy_set_bol(at_bol) \
	{ \
	if ( ! yy_current_buffer ) \
		yy_current_buffer = yy_create_buffer( yyin, YY_BUF_SIZE ); \
	yy_current_buffer->yy_at_bol = at_bol; \
	}

#define YY_AT_BOL() (yy_current_buffer->yy_at_bol)

typedef unsigned char YY_CHAR;
FILE *yyin = (FILE *) 0, *yyout = (FILE *) 0;
typedef int yy_state_type;
extern char *yytext;
#define yytext_ptr yytext

static yy_state_type yy_get_previous_state YY_PROTO(( void ));
static yy_state_type yy_try_NUL_trans YY_PROTO(( yy_state_type current_state ));
static int yy_get_next_buffer YY_PROTO(( void ));
static void yy_fatal_error YY_PROTO(( yyconst char msg[] ));

/* Done after the current pattern has been matched and before the
 * corresponding action - sets up yytext.
 */
#define YY_DO_BEFORE_ACTION \
	yytext_ptr = yy_bp; \
	yyleng = (int) (yy_cp - yy_bp); \
	yy_hold_char = *yy_cp; \
	*yy_cp = '\0'; \
	yy_c_buf_p = yy_cp;

#define YY_NUM_RULES 25
#define YY_END_OF_BUFFER 26
static yyconst short int yy_accept[81] =
    {   0,
        0,    0,   26,   25,    7,    8,    5,   25,    1,    2,
       11,   11,    6,    3,    4,   25,   25,   25,   25,   25,
       25,   25,    0,    9,   11,    0,    6,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,   10,    0,    0,
       13,    0,    0,    0,    0,   16,    0,    0,    0,    0,
        0,   12,   15,    0,   23,    0,    0,    0,    0,    0,
        0,   14,   18,    0,    0,    0,    0,    0,   17,    0,
       24,    0,    0,    0,   20,   22,    0,   21,   19,    0
    } ;

static yyconst int yy_ec[256] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    1,    2,    3,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    4,    1,    5,    1,    1,    1,    1,    1,    6,
        7,    1,    1,    1,    1,    1,    1,    8,    9,    9,
        9,    9,    9,    9,    9,    9,    9,    1,   10,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
       11,    1,   12,    1,    1,    1,   13,   14,   15,   16,

       17,   18,   19,   20,   21,    1,    1,   22,    1,   23,
       24,   25,    1,   26,   27,   28,   29,   30,    1,   31,
       32,   33,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,

        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1
    } ;

static yyconst int yy_meta[34] =
    {   0,
        1,    1,    2,    1,    1,    1,    1,    3,    3,    1,
        1,    1,    3,    3,    3,    3,    3,    3,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1
    } ;

static yyconst short int yy_base[84] =
    {   0,
        0,    0,  100,  101,  101,  101,  101,   94,  101,  101,
       26,   28,    0,  101,  101,   82,   26,   18,   74,   79,
       78,   81,   88,  101,   32,    0,    0,   76,   65,   62,
       61,   75,   20,   59,   61,   66,   58,    0,   57,   56,
       54,   63,   53,   62,   54,  101,   59,   48,   53,   46,
       59,  101,   44,   43,  101,   41,   55,   46,   53,   44,
       31,  101,  101,   39,   27,   21,   39,   19,  101,   35,
      101,   33,   26,   29,  101,  101,   28,  101,  101,  101,
       58,   61,   41
    } ;

static yyconst short int yy_def[84] =
    {   0,
       80,    1,   80,   80,   80,   80,   80,   81,   80,   80,
       80,   80,   82,   80,   80,   80,   80,   80,   80,   80,
       80,   80,   81,   80,   80,   83,   82,   80,   80,   80,
       80,   80,   80,   80,   80,   80,   80,   83,   80,   80,
       80,   80,   80,   80,   80,   80,   80,   80,   80,   80,
       80,   80,   80,   80,   80,   80,   80,   80,   80,   80,
       80,   80,   80,   80,   80,   80,   80,   80,   80,   80,
       80,   80,   80,   80,   80,   80,   80,   80,   80,    0,
       80,   80,   80
    } ;

static yyconst short int yy_nxt[135] =
    {   0,
        4,    5,    6,    7,    8,    9,   10,   11,   12,   13,
       14,   15,   16,   17,   18,    4,    4,    4,    4,    4,
       19,    4,    4,    4,    4,   20,   21,    4,    4,   22,
        4,    4,    4,   25,   25,   25,   25,   32,   29,   25,
       25,   33,   44,   38,   79,   78,   30,   77,   45,   76,
       75,   74,   73,   72,   71,   70,   26,   31,   23,   23,
       23,   27,   69,   27,   68,   67,   66,   65,   64,   63,
       62,   61,   60,   59,   58,   57,   56,   55,   54,   53,
       52,   51,   50,   49,   48,   47,   46,   43,   42,   41,
       40,   39,   24,   37,   36,   35,   34,   28,   24,   80,

        3,   80,   80,   80,   80,   80,   80,   80,   80,   80,
       80,   80,   80,   80,   80,   80,   80,   80,   80,   80,
       80,   80,   80,   80,   80,   80,   80,   80,   80,   80,
       80,   80,   80,   80
    } ;

static yyconst short int yy_chk[135] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,   11,   11,   12,   12,   18,   17,   25,
       25,   18,   33,   83,   77,   74,   17,   73,   33,   72,
       70,   68,   67,   66,   65,   64,   11,   17,   81,   81,
       81,   82,   61,   82,   60,   59,   58,   57,   56,   54,
       53,   51,   50,   49,   48,   47,   45,   44,   43,   42,
       41,   40,   39,   37,   36,   35,   34,   32,   31,   30,
       29,   28,   23,   22,   21,   20,   19,   16,    8,    3,

       80,   80,   80,   80,   80,   80,   80,   80,   80,   80,
       80,   80,   80,   80,   80,   80,   80,   80,   80,   80,
       80,   80,   80,   80,   80,   80,   80,   80,   80,   80,
       80,   80,   80,   80
    } ;

static yy_state_type yy_last_accepting_state;
static char *yy_last_accepting_cpos;

/* The intent behind this definition is that it'll catch
 * any uses of REJECT which flex missed.
 */
#define REJECT reject_used_but_not_detected
#define yymore() yymore_used_but_not_detected
#define YY_MORE_ADJ 0
char *yytext;
#line 1 "./syslex.l"
#define INITIAL 0
#line 2 "./syslex.l"
#include "sysinfo.h"
char *word;
int number;
int unit;

#ifndef yywrap
static int yywrap () { return 1; }
#endif
#line 424 "lex.yy.c"

/* Macros after this point can all be overridden by user definitions in
 * section 1.
 */

#ifndef YY_SKIP_YYWRAP
#ifdef __cplusplus
extern "C" int yywrap YY_PROTO(( void ));
#else
extern int yywrap YY_PROTO(( void ));
#endif
#endif

#ifndef YY_NO_UNPUT
static void yyunput YY_PROTO(( int c, char *buf_ptr ));
#endif

#ifndef yytext_ptr
static void yy_flex_strncpy YY_PROTO(( char *, yyconst char *, int ));
#endif

#ifndef YY_NO_INPUT
#ifdef __cplusplus
static int yyinput YY_PROTO(( void ));
#else
static int input YY_PROTO(( void ));
#endif
#endif

#if YY_STACK_USED
static int yy_start_stack_ptr = 0;
static int yy_start_stack_depth = 0;
static int *yy_start_stack = 0;
#ifndef YY_NO_PUSH_STATE
static void yy_push_state YY_PROTO(( int new_state ));
#endif
#ifndef YY_NO_POP_STATE
static void yy_pop_state YY_PROTO(( void ));
#endif
#ifndef YY_NO_TOP_STATE
static int yy_top_state YY_PROTO(( void ));
#endif

#else
#define YY_NO_PUSH_STATE 1
#define YY_NO_POP_STATE 1
#define YY_NO_TOP_STATE 1
#endif

#ifdef YY_MALLOC_DECL
YY_MALLOC_DECL
#else
#if __STDC__
#ifndef __cplusplus
#include <stdlib.h>
#endif
#else
/* Just try to get by without declaring the routines.  This will fail
 * miserably on non-ANSI systems for which sizeof(size_t) != sizeof(int)
 * or sizeof(void*) != sizeof(int).
 */
#endif
#endif

/* Amount of stuff to slurp up with each read. */
#ifndef YY_READ_BUF_SIZE
#define YY_READ_BUF_SIZE 8192
#endif

/* Copy whatever the last rule matched to the standard output. */

#ifndef ECHO
/* This used to be an fputs(), but since the string might contain NUL's,
 * we now use fwrite().
 */
#define ECHO (void) fwrite( yytext, yyleng, 1, yyout )
#endif

/* Gets input and stuffs it into "buf".  number of characters read, or YY_NULL,
 * is returned in "result".
 */
#ifndef YY_INPUT
#define YY_INPUT(buf,result,max_size) \
	if ( yy_current_buffer->yy_is_interactive ) \
		{ \
		int c = '*', n; \
		for ( n = 0; n < max_size && \
			     (c = getc( yyin )) != EOF && c != '\n'; ++n ) \
			buf[n] = (char) c; \
		if ( c == '\n' ) \
			buf[n++] = (char) c; \
		if ( c == EOF && ferror( yyin ) ) \
			YY_FATAL_ERROR( "input in flex scanner failed" ); \
		result = n; \
		} \
	else if ( ((result = fread( buf, 1, max_size, yyin )) == 0) \
		  && ferror( yyin ) ) \
		YY_FATAL_ERROR( "input in flex scanner failed" );
#endif

/* No semi-colon after return; correct usage is to write "yyterminate();" -
 * we don't want an extra ';' after the "return" because that will cause
 * some compilers to complain about unreachable statements.
 */
#ifndef yyterminate
#define yyterminate() return YY_NULL
#endif

/* Number of entries by which start-condition stack grows. */
#ifndef YY_START_STACK_INCR
#define YY_START_STACK_INCR 25
#endif

/* Report a fatal error. */
#ifndef YY_FATAL_ERROR
#define YY_FATAL_ERROR(msg) yy_fatal_error( msg )
#endif

/* Default declaration of generated scanner - a define so the user can
 * easily add parameters.
 */
#ifndef YY_DECL
#define YY_DECL int yylex YY_PROTO(( void ))
#endif

/* Code executed at the beginning of each rule, after yytext and yyleng
 * have been set up.
 */
#ifndef YY_USER_ACTION
#define YY_USER_ACTION
#endif

/* Code executed at the end of each rule. */
#ifndef YY_BREAK
#define YY_BREAK break;
#endif

#define YY_RULE_SETUP \
	YY_USER_ACTION

YY_DECL
	{
	register yy_state_type yy_current_state;
	register char *yy_cp, *yy_bp;
	register int yy_act;

#line 11 "./syslex.l"

#line 573 "lex.yy.c"

	if ( yy_init )
		{
		yy_init = 0;

#ifdef YY_USER_INIT
		YY_USER_INIT;
#endif

		if ( ! yy_start )
			yy_start = 1;	/* first start state */

		if ( ! yyin )
			yyin = stdin;

		if ( ! yyout )
			yyout = stdout;

		if ( ! yy_current_buffer )
			yy_current_buffer =
				yy_create_buffer( yyin, YY_BUF_SIZE );

		yy_load_buffer_state();
		}

	while ( 1 )		/* loops until end-of-file is reached */
		{
		yy_cp = yy_c_buf_p;

		/* Support of yytext. */
		*yy_cp = yy_hold_char;

		/* yy_bp points to the position in yy_ch_buf of the start of
		 * the current run.
		 */
		yy_bp = yy_cp;

		yy_current_state = yy_start;
yy_match:
		do
			{
			register YY_CHAR yy_c = yy_ec[YY_SC_TO_UI(*yy_cp)];
			if ( yy_accept[yy_current_state] )
				{
				yy_last_accepting_state = yy_current_state;
				yy_last_accepting_cpos = yy_cp;
				}
			while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
				{
				yy_current_state = (int) yy_def[yy_current_state];
				if ( yy_current_state >= 81 )
					yy_c = yy_meta[(unsigned int) yy_c];
				}
			yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
			++yy_cp;
			}
		while ( yy_base[yy_current_state] != 101 );

yy_find_action:
		yy_act = yy_accept[yy_current_state];
		if ( yy_act == 0 )
			{ /* have to back up */
			yy_cp = yy_last_accepting_cpos;
			yy_current_state = yy_last_accepting_state;
			yy_act = yy_accept[yy_current_state];
			}

		YY_DO_BEFORE_ACTION;


do_action:	/* This label is used only to access EOF actions. */


		switch ( yy_act )
	{ /* beginning of action switch */
			case 0: /* must back up */
			/* undo the effects of YY_DO_BEFORE_ACTION */
			*yy_cp = yy_hold_char;
			yy_cp = yy_last_accepting_cpos;
			yy_current_state = yy_last_accepting_state;
			goto yy_find_action;

case 1:
YY_RULE_SETUP
#line 12 "./syslex.l"
{ return '(';}
	YY_BREAK
case 2:
YY_RULE_SETUP
#line 13 "./syslex.l"
{ return ')';}
	YY_BREAK
case 3:
YY_RULE_SETUP
#line 14 "./syslex.l"
{ return '[';}
	YY_BREAK
case 4:
YY_RULE_SETUP
#line 15 "./syslex.l"
{ return ']';}
	YY_BREAK
case 5:
YY_RULE_SETUP
#line 16 "./syslex.l"
{ ; }
	YY_BREAK
case 6:
YY_RULE_SETUP
#line 17 "./syslex.l"
{ ; } 
	YY_BREAK
case 7:
YY_RULE_SETUP
#line 18 "./syslex.l"
{ ; }
	YY_BREAK
case 8:
YY_RULE_SETUP
#line 19 "./syslex.l"
{ ; }
	YY_BREAK
case 9:
YY_RULE_SETUP
#line 20 "./syslex.l"
{
yylval.s = malloc(strlen (yytext));
strcpy(yylval.s, yytext+1);
yylval.s[strlen(yylval.s)-1] = 0;
        return NAME;
	}
	YY_BREAK
case 10:
YY_RULE_SETUP
#line 27 "./syslex.l"
{
        yylval.i = strtol(yytext,0,16);
	return  NUMBER;
	}
	YY_BREAK
case 11:
YY_RULE_SETUP
#line 32 "./syslex.l"
{
        yylval.i = atoi(yytext);
	return  NUMBER;
	}
	YY_BREAK
case 12:
YY_RULE_SETUP
#line 38 "./syslex.l"
{ yylval.i =1 ;return UNIT;}
	YY_BREAK
case 13:
YY_RULE_SETUP
#line 39 "./syslex.l"
{ yylval.i = 1; return UNIT;}
	YY_BREAK
case 14:
YY_RULE_SETUP
#line 40 "./syslex.l"
{ yylval.i= 8; return UNIT;}
	YY_BREAK
case 15:
YY_RULE_SETUP
#line 41 "./syslex.l"
{ yylval.i = 8; return UNIT;}
	YY_BREAK
case 16:
YY_RULE_SETUP
#line 43 "./syslex.l"
{ yylval.s = "INT"; return TYPE;}
	YY_BREAK
case 17:
YY_RULE_SETUP
#line 44 "./syslex.l"
{ yylval.s = "BARRAY"; return TYPE;}
	YY_BREAK
case 18:
YY_RULE_SETUP
#line 45 "./syslex.l"
{ yylval.s = "CHARS"; return TYPE;}
	YY_BREAK
case 19:
YY_RULE_SETUP
#line 46 "./syslex.l"
{ yylval.i = 0; return NUMBER;}
	YY_BREAK
case 20:
YY_RULE_SETUP
#line 47 "./syslex.l"
{ yylval.i = -4; return NUMBER;}
	YY_BREAK
case 21:
YY_RULE_SETUP
#line 48 "./syslex.l"
{ yylval.i = -2; return NUMBER; }
	YY_BREAK
case 22:
YY_RULE_SETUP
#line 49 "./syslex.l"
{ yylval.i = -1; return NUMBER; }
	YY_BREAK
case 23:
YY_RULE_SETUP
#line 50 "./syslex.l"
{ return COND;}
	YY_BREAK
case 24:
YY_RULE_SETUP
#line 51 "./syslex.l"
{ return REPEAT;}
	YY_BREAK
case 25:
YY_RULE_SETUP
#line 52 "./syslex.l"
ECHO;
	YY_BREAK
#line 792 "lex.yy.c"
case YY_STATE_EOF(INITIAL):
	yyterminate();

	case YY_END_OF_BUFFER:
		{
		/* Amount of text matched not including the EOB char. */
		int yy_amount_of_matched_text = (int) (yy_cp - yytext_ptr) - 1;

		/* Undo the effects of YY_DO_BEFORE_ACTION. */
		*yy_cp = yy_hold_char;

		if ( yy_current_buffer->yy_buffer_status == YY_BUFFER_NEW )
			{
			/* We're scanning a new file or input source.  It's
			 * possible that this happened because the user
			 * just pointed yyin at a new source and called
			 * yylex().  If so, then we have to assure
			 * consistency between yy_current_buffer and our
			 * globals.  Here is the right place to do so, because
			 * this is the first action (other than possibly a
			 * back-up) that will match for the new input source.
			 */
			yy_n_chars = yy_current_buffer->yy_n_chars;
			yy_current_buffer->yy_input_file = yyin;
			yy_current_buffer->yy_buffer_status = YY_BUFFER_NORMAL;
			}

		/* Note that here we test for yy_c_buf_p "<=" to the position
		 * of the first EOB in the buffer, since yy_c_buf_p will
		 * already have been incremented past the NUL character
		 * (since all states make transitions on EOB to the
		 * end-of-buffer state).  Contrast this with the test
		 * in input().
		 */
		if ( yy_c_buf_p <= &yy_current_buffer->yy_ch_buf[yy_n_chars] )
			{ /* This was really a NUL. */
			yy_state_type yy_next_state;

			yy_c_buf_p = yytext_ptr + yy_amount_of_matched_text;

			yy_current_state = yy_get_previous_state();

			/* Okay, we're now positioned to make the NUL
			 * transition.  We couldn't have
			 * yy_get_previous_state() go ahead and do it
			 * for us because it doesn't know how to deal
			 * with the possibility of jamming (and we don't
			 * want to build jamming into it because then it
			 * will run more slowly).
			 */

			yy_next_state = yy_try_NUL_trans( yy_current_state );

			yy_bp = yytext_ptr + YY_MORE_ADJ;

			if ( yy_next_state )
				{
				/* Consume the NUL. */
				yy_cp = ++yy_c_buf_p;
				yy_current_state = yy_next_state;
				goto yy_match;
				}

			else
				{
				yy_cp = yy_c_buf_p;
				goto yy_find_action;
				}
			}

		else switch ( yy_get_next_buffer() )
			{
			case EOB_ACT_END_OF_FILE:
				{
				yy_did_buffer_switch_on_eof = 0;

				if ( yywrap() )
					{
					/* Note: because we've taken care in
					 * yy_get_next_buffer() to have set up
					 * yytext, we can now set up
					 * yy_c_buf_p so that if some total
					 * hoser (like flex itself) wants to
					 * call the scanner after we return the
					 * YY_NULL, it'll still work - another
					 * YY_NULL will get returned.
					 */
					yy_c_buf_p = yytext_ptr + YY_MORE_ADJ;

					yy_act = YY_STATE_EOF(YY_START);
					goto do_action;
					}

				else
					{
					if ( ! yy_did_buffer_switch_on_eof )
						YY_NEW_FILE;
					}
				break;
				}

			case EOB_ACT_CONTINUE_SCAN:
				yy_c_buf_p =
					yytext_ptr + yy_amount_of_matched_text;

				yy_current_state = yy_get_previous_state();

				yy_cp = yy_c_buf_p;
				yy_bp = yytext_ptr + YY_MORE_ADJ;
				goto yy_match;

			case EOB_ACT_LAST_MATCH:
				yy_c_buf_p =
				&yy_current_buffer->yy_ch_buf[yy_n_chars];

				yy_current_state = yy_get_previous_state();

				yy_cp = yy_c_buf_p;
				yy_bp = yytext_ptr + YY_MORE_ADJ;
				goto yy_find_action;
			}
		break;
		}

	default:
		YY_FATAL_ERROR(
			"fatal flex scanner internal error--no action found" );
	} /* end of action switch */
		} /* end of scanning one token */
	} /* end of yylex */


/* yy_get_next_buffer - try to read in a new buffer
 *
 * Returns a code representing an action:
 *	EOB_ACT_LAST_MATCH -
 *	EOB_ACT_CONTINUE_SCAN - continue scanning from current position
 *	EOB_ACT_END_OF_FILE - end of file
 */

static int yy_get_next_buffer()
	{
	register char *dest = yy_current_buffer->yy_ch_buf;
	register char *source = yytext_ptr;
	register int number_to_move, i;
	int ret_val;

	if ( yy_c_buf_p > &yy_current_buffer->yy_ch_buf[yy_n_chars + 1] )
		YY_FATAL_ERROR(
		"fatal flex scanner internal error--end of buffer missed" );

	if ( yy_current_buffer->yy_fill_buffer == 0 )
		{ /* Don't try to fill the buffer, so this is an EOF. */
		if ( yy_c_buf_p - yytext_ptr - YY_MORE_ADJ == 1 )
			{
			/* We matched a singled characater, the EOB, so
			 * treat this as a final EOF.
			 */
			return EOB_ACT_END_OF_FILE;
			}

		else
			{
			/* We matched some text prior to the EOB, first
			 * process it.
			 */
			return EOB_ACT_LAST_MATCH;
			}
		}

	/* Try to read more data. */

	/* First move last chars to start of buffer. */
	number_to_move = (int) (yy_c_buf_p - yytext_ptr) - 1;

	for ( i = 0; i < number_to_move; ++i )
		*(dest++) = *(source++);

	if ( yy_current_buffer->yy_buffer_status == YY_BUFFER_EOF_PENDING )
		/* don't do the read, it's not guaranteed to return an EOF,
		 * just force an EOF
		 */
		yy_n_chars = 0;

	else
		{
		int num_to_read =
			yy_current_buffer->yy_buf_size - number_to_move - 1;

		while ( num_to_read <= 0 )
			{ /* Not enough room in the buffer - grow it. */
#ifdef YY_USES_REJECT
			YY_FATAL_ERROR(
"input buffer overflow, can't enlarge buffer because scanner uses REJECT" );
#else

			/* just a shorter name for the current buffer */
			YY_BUFFER_STATE b = yy_current_buffer;

			int yy_c_buf_p_offset =
				(int) (yy_c_buf_p - b->yy_ch_buf);

			if ( b->yy_is_our_buffer )
				{
				int new_size = b->yy_buf_size * 2;

				if ( new_size <= 0 )
					b->yy_buf_size += b->yy_buf_size / 8;
				else
					b->yy_buf_size *= 2;

				b->yy_ch_buf = (char *)
					/* Include room in for 2 EOB chars. */
					yy_flex_realloc( (void *) b->yy_ch_buf,
							 b->yy_buf_size + 2 );
				}
			else
				/* Can't grow it, we don't own it. */
				b->yy_ch_buf = 0;

			if ( ! b->yy_ch_buf )
				YY_FATAL_ERROR(
				"fatal error - scanner input buffer overflow" );

			yy_c_buf_p = &b->yy_ch_buf[yy_c_buf_p_offset];

			num_to_read = yy_current_buffer->yy_buf_size -
						number_to_move - 1;
#endif
			}

		if ( num_to_read > YY_READ_BUF_SIZE )
			num_to_read = YY_READ_BUF_SIZE;

		/* Read in more data. */
		YY_INPUT( (&yy_current_buffer->yy_ch_buf[number_to_move]),
			yy_n_chars, num_to_read );
		}

	if ( yy_n_chars == 0 )
		{
		if ( number_to_move == YY_MORE_ADJ )
			{
			ret_val = EOB_ACT_END_OF_FILE;
			yyrestart( yyin );
			}

		else
			{
			ret_val = EOB_ACT_LAST_MATCH;
			yy_current_buffer->yy_buffer_status =
				YY_BUFFER_EOF_PENDING;
			}
		}

	else
		ret_val = EOB_ACT_CONTINUE_SCAN;

	yy_n_chars += number_to_move;
	yy_current_buffer->yy_ch_buf[yy_n_chars] = YY_END_OF_BUFFER_CHAR;
	yy_current_buffer->yy_ch_buf[yy_n_chars + 1] = YY_END_OF_BUFFER_CHAR;

	yytext_ptr = &yy_current_buffer->yy_ch_buf[0];

	return ret_val;
	}


/* yy_get_previous_state - get the state just before the EOB char was reached */

static yy_state_type yy_get_previous_state()
	{
	register yy_state_type yy_current_state;
	register char *yy_cp;

	yy_current_state = yy_start;

	for ( yy_cp = yytext_ptr + YY_MORE_ADJ; yy_cp < yy_c_buf_p; ++yy_cp )
		{
		register YY_CHAR yy_c = (*yy_cp ? yy_ec[YY_SC_TO_UI(*yy_cp)] : 1);
		if ( yy_accept[yy_current_state] )
			{
			yy_last_accepting_state = yy_current_state;
			yy_last_accepting_cpos = yy_cp;
			}
		while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
			{
			yy_current_state = (int) yy_def[yy_current_state];
			if ( yy_current_state >= 81 )
				yy_c = yy_meta[(unsigned int) yy_c];
			}
		yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
		}

	return yy_current_state;
	}


/* yy_try_NUL_trans - try to make a transition on the NUL character
 *
 * synopsis
 *	next_state = yy_try_NUL_trans( current_state );
 */

#ifdef YY_USE_PROTOS
static yy_state_type yy_try_NUL_trans( yy_state_type yy_current_state )
#else
static yy_state_type yy_try_NUL_trans( yy_current_state )
yy_state_type yy_current_state;
#endif
	{
	register int yy_is_jam;
	register char *yy_cp = yy_c_buf_p;

	register YY_CHAR yy_c = 1;
	if ( yy_accept[yy_current_state] )
		{
		yy_last_accepting_state = yy_current_state;
		yy_last_accepting_cpos = yy_cp;
		}
	while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
		{
		yy_current_state = (int) yy_def[yy_current_state];
		if ( yy_current_state >= 81 )
			yy_c = yy_meta[(unsigned int) yy_c];
		}
	yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
	yy_is_jam = (yy_current_state == 80);

	return yy_is_jam ? 0 : yy_current_state;
	}


#ifndef YY_NO_UNPUT
#ifdef YY_USE_PROTOS
static void yyunput( int c, register char *yy_bp )
#else
static void yyunput( c, yy_bp )
int c;
register char *yy_bp;
#endif
	{
	register char *yy_cp = yy_c_buf_p;

	/* undo effects of setting up yytext */
	*yy_cp = yy_hold_char;

	if ( yy_cp < yy_current_buffer->yy_ch_buf + 2 )
		{ /* need to shift things up to make room */
		/* +2 for EOB chars. */
		register int number_to_move = yy_n_chars + 2;
		register char *dest = &yy_current_buffer->yy_ch_buf[
					yy_current_buffer->yy_buf_size + 2];
		register char *source =
				&yy_current_buffer->yy_ch_buf[number_to_move];

		while ( source > yy_current_buffer->yy_ch_buf )
			*--dest = *--source;

		yy_cp += (int) (dest - source);
		yy_bp += (int) (dest - source);
		yy_n_chars = yy_current_buffer->yy_buf_size;

		if ( yy_cp < yy_current_buffer->yy_ch_buf + 2 )
			YY_FATAL_ERROR( "flex scanner push-back overflow" );
		}

	*--yy_cp = (char) c;


	yytext_ptr = yy_bp;
	yy_hold_char = *yy_cp;
	yy_c_buf_p = yy_cp;
	}
#endif	/* ifndef YY_NO_UNPUT */


#ifdef __cplusplus
static int yyinput()
#else
static int input()
#endif
	{
	int c;

	*yy_c_buf_p = yy_hold_char;

	if ( *yy_c_buf_p == YY_END_OF_BUFFER_CHAR )
		{
		/* yy_c_buf_p now points to the character we want to return.
		 * If this occurs *before* the EOB characters, then it's a
		 * valid NUL; if not, then we've hit the end of the buffer.
		 */
		if ( yy_c_buf_p < &yy_current_buffer->yy_ch_buf[yy_n_chars] )
			/* This was really a NUL. */
			*yy_c_buf_p = '\0';

		else
			{ /* need more input */
			yytext_ptr = yy_c_buf_p;
			++yy_c_buf_p;

			switch ( yy_get_next_buffer() )
				{
				case EOB_ACT_END_OF_FILE:
					{
					if ( yywrap() )
						{
						yy_c_buf_p =
						yytext_ptr + YY_MORE_ADJ;
						return EOF;
						}

					if ( ! yy_did_buffer_switch_on_eof )
						YY_NEW_FILE;
#ifdef __cplusplus
					return yyinput();
#else
					return input();
#endif
					}

				case EOB_ACT_CONTINUE_SCAN:
					yy_c_buf_p = yytext_ptr + YY_MORE_ADJ;
					break;

				case EOB_ACT_LAST_MATCH:
#ifdef __cplusplus
					YY_FATAL_ERROR(
					"unexpected last match in yyinput()" );
#else
					YY_FATAL_ERROR(
					"unexpected last match in input()" );
#endif
				}
			}
		}

	c = *(unsigned char *) yy_c_buf_p;	/* cast for 8-bit char's */
	*yy_c_buf_p = '\0';	/* preserve yytext */
	yy_hold_char = *++yy_c_buf_p;


	return c;
	}


#ifdef YY_USE_PROTOS
void yyrestart( FILE *input_file )
#else
void yyrestart( input_file )
FILE *input_file;
#endif
	{
	if ( ! yy_current_buffer )
		yy_current_buffer = yy_create_buffer( yyin, YY_BUF_SIZE );

	yy_init_buffer( yy_current_buffer, input_file );
	yy_load_buffer_state();
	}


#ifdef YY_USE_PROTOS
void yy_switch_to_buffer( YY_BUFFER_STATE new_buffer )
#else
void yy_switch_to_buffer( new_buffer )
YY_BUFFER_STATE new_buffer;
#endif
	{
	if ( yy_current_buffer == new_buffer )
		return;

	if ( yy_current_buffer )
		{
		/* Flush out information for old buffer. */
		*yy_c_buf_p = yy_hold_char;
		yy_current_buffer->yy_buf_pos = yy_c_buf_p;
		yy_current_buffer->yy_n_chars = yy_n_chars;
		}

	yy_current_buffer = new_buffer;
	yy_load_buffer_state();

	/* We don't actually know whether we did this switch during
	 * EOF (yywrap()) processing, but the only time this flag
	 * is looked at is after yywrap() is called, so it's safe
	 * to go ahead and always set it.
	 */
	yy_did_buffer_switch_on_eof = 1;
	}


#ifdef YY_USE_PROTOS
void yy_load_buffer_state( void )
#else
void yy_load_buffer_state()
#endif
	{
	yy_n_chars = yy_current_buffer->yy_n_chars;
	yytext_ptr = yy_c_buf_p = yy_current_buffer->yy_buf_pos;
	yyin = yy_current_buffer->yy_input_file;
	yy_hold_char = *yy_c_buf_p;
	}


#ifdef YY_USE_PROTOS
YY_BUFFER_STATE yy_create_buffer( FILE *file, int size )
#else
YY_BUFFER_STATE yy_create_buffer( file, size )
FILE *file;
int size;
#endif
	{
	YY_BUFFER_STATE b;

	b = (YY_BUFFER_STATE) yy_flex_alloc( sizeof( struct yy_buffer_state ) );
	if ( ! b )
		YY_FATAL_ERROR( "out of dynamic memory in yy_create_buffer()" );

	b->yy_buf_size = size;

	/* yy_ch_buf has to be 2 characters longer than the size given because
	 * we need to put in 2 end-of-buffer characters.
	 */
	b->yy_ch_buf = (char *) yy_flex_alloc( b->yy_buf_size + 2 );
	if ( ! b->yy_ch_buf )
		YY_FATAL_ERROR( "out of dynamic memory in yy_create_buffer()" );

	b->yy_is_our_buffer = 1;

	yy_init_buffer( b, file );

	return b;
	}


#ifdef YY_USE_PROTOS
void yy_delete_buffer( YY_BUFFER_STATE b )
#else
void yy_delete_buffer( b )
YY_BUFFER_STATE b;
#endif
	{
	if ( ! b )
		return;

	if ( b == yy_current_buffer )
		yy_current_buffer = (YY_BUFFER_STATE) 0;

	if ( b->yy_is_our_buffer )
		yy_flex_free( (void *) b->yy_ch_buf );

	yy_flex_free( (void *) b );
	}


#ifndef YY_ALWAYS_INTERACTIVE
#ifndef YY_NEVER_INTERACTIVE
extern int isatty YY_PROTO(( int ));
#endif
#endif

#ifdef YY_USE_PROTOS
void yy_init_buffer( YY_BUFFER_STATE b, FILE *file )
#else
void yy_init_buffer( b, file )
YY_BUFFER_STATE b;
FILE *file;
#endif


	{
	yy_flush_buffer( b );

	b->yy_input_file = file;
	b->yy_fill_buffer = 1;

#if YY_ALWAYS_INTERACTIVE
	b->yy_is_interactive = 1;
#else
#if YY_NEVER_INTERACTIVE
	b->yy_is_interactive = 0;
#else
	b->yy_is_interactive = file ? (isatty( fileno(file) ) > 0) : 0;
#endif
#endif
	}


#ifdef YY_USE_PROTOS
void yy_flush_buffer( YY_BUFFER_STATE b )
#else
void yy_flush_buffer( b )
YY_BUFFER_STATE b;
#endif

	{
	b->yy_n_chars = 0;

	/* We always need two end-of-buffer characters.  The first causes
	 * a transition to the end-of-buffer state.  The second causes
	 * a jam in that state.
	 */
	b->yy_ch_buf[0] = YY_END_OF_BUFFER_CHAR;
	b->yy_ch_buf[1] = YY_END_OF_BUFFER_CHAR;

	b->yy_buf_pos = &b->yy_ch_buf[0];

	b->yy_at_bol = 1;
	b->yy_buffer_status = YY_BUFFER_NEW;

	if ( b == yy_current_buffer )
		yy_load_buffer_state();
	}


#ifndef YY_NO_SCAN_BUFFER
#ifdef YY_USE_PROTOS
YY_BUFFER_STATE yy_scan_buffer( char *base, yy_size_t size )
#else
YY_BUFFER_STATE yy_scan_buffer( base, size )
char *base;
yy_size_t size;
#endif
	{
	YY_BUFFER_STATE b;

	if ( size < 2 ||
	     base[size-2] != YY_END_OF_BUFFER_CHAR ||
	     base[size-1] != YY_END_OF_BUFFER_CHAR )
		/* They forgot to leave room for the EOB's. */
		return 0;

	b = (YY_BUFFER_STATE) yy_flex_alloc( sizeof( struct yy_buffer_state ) );
	if ( ! b )
		YY_FATAL_ERROR( "out of dynamic memory in yy_scan_buffer()" );

	b->yy_buf_size = size - 2;	/* "- 2" to take care of EOB's */
	b->yy_buf_pos = b->yy_ch_buf = base;
	b->yy_is_our_buffer = 0;
	b->yy_input_file = 0;
	b->yy_n_chars = b->yy_buf_size;
	b->yy_is_interactive = 0;
	b->yy_at_bol = 1;
	b->yy_fill_buffer = 0;
	b->yy_buffer_status = YY_BUFFER_NEW;

	yy_switch_to_buffer( b );

	return b;
	}
#endif


#ifndef YY_NO_SCAN_STRING
#ifdef YY_USE_PROTOS
YY_BUFFER_STATE yy_scan_string( yyconst char *str )
#else
YY_BUFFER_STATE yy_scan_string( str )
yyconst char *str;
#endif
	{
	int len;
	for ( len = 0; str[len]; ++len )
		;

	return yy_scan_bytes( str, len );
	}
#endif


#ifndef YY_NO_SCAN_BYTES
#ifdef YY_USE_PROTOS
YY_BUFFER_STATE yy_scan_bytes( yyconst char *bytes, int len )
#else
YY_BUFFER_STATE yy_scan_bytes( bytes, len )
yyconst char *bytes;
int len;
#endif
	{
	YY_BUFFER_STATE b;
	char *buf;
	yy_size_t n;
	int i;

	/* Get memory for full buffer, including space for trailing EOB's. */
	n = len + 2;
	buf = (char *) yy_flex_alloc( n );
	if ( ! buf )
		YY_FATAL_ERROR( "out of dynamic memory in yy_scan_bytes()" );

	for ( i = 0; i < len; ++i )
		buf[i] = bytes[i];

	buf[len] = buf[len+1] = YY_END_OF_BUFFER_CHAR;

	b = yy_scan_buffer( buf, n );
	if ( ! b )
		YY_FATAL_ERROR( "bad buffer in yy_scan_bytes()" );

	/* It's okay to grow etc. this buffer, and we should throw it
	 * away when we're done.
	 */
	b->yy_is_our_buffer = 1;

	return b;
	}
#endif


#ifndef YY_NO_PUSH_STATE
#ifdef YY_USE_PROTOS
static void yy_push_state( int new_state )
#else
static void yy_push_state( new_state )
int new_state;
#endif
	{
	if ( yy_start_stack_ptr >= yy_start_stack_depth )
		{
		yy_size_t new_size;

		yy_start_stack_depth += YY_START_STACK_INCR;
		new_size = yy_start_stack_depth * sizeof( int );

		if ( ! yy_start_stack )
			yy_start_stack = (int *) yy_flex_alloc( new_size );

		else
			yy_start_stack = (int *) yy_flex_realloc(
					(void *) yy_start_stack, new_size );

		if ( ! yy_start_stack )
			YY_FATAL_ERROR(
			"out of memory expanding start-condition stack" );
		}

	yy_start_stack[yy_start_stack_ptr++] = YY_START;

	BEGIN(new_state);
	}
#endif


#ifndef YY_NO_POP_STATE
static void yy_pop_state()
	{
	if ( --yy_start_stack_ptr < 0 )
		YY_FATAL_ERROR( "start-condition stack underflow" );

	BEGIN(yy_start_stack[yy_start_stack_ptr]);
	}
#endif


#ifndef YY_NO_TOP_STATE
static int yy_top_state()
	{
	return yy_start_stack[yy_start_stack_ptr - 1];
	}
#endif

#ifndef YY_EXIT_FAILURE
#define YY_EXIT_FAILURE 2
#endif

#ifdef YY_USE_PROTOS
static void yy_fatal_error( yyconst char msg[] )
#else
static void yy_fatal_error( msg )
char msg[];
#endif
	{
	(void) fprintf( stderr, "%s\n", msg );
	exit( YY_EXIT_FAILURE );
	}



/* Redefine yyless() so it works in section 3 code. */

#undef yyless
#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up yytext. */ \
		yytext[yyleng] = yy_hold_char; \
		yy_c_buf_p = yytext + n - YY_MORE_ADJ; \
		yy_hold_char = *yy_c_buf_p; \
		*yy_c_buf_p = '\0'; \
		yyleng = n; \
		} \
	while ( 0 )


/* Internal utility routines. */

#ifndef yytext_ptr
#ifdef YY_USE_PROTOS
static void yy_flex_strncpy( char *s1, yyconst char *s2, int n )
#else
static void yy_flex_strncpy( s1, s2, n )
char *s1;
yyconst char *s2;
int n;
#endif
	{
	register int i;
	for ( i = 0; i < n; ++i )
		s1[i] = s2[i];
	}
#endif


#ifdef YY_USE_PROTOS
static void *yy_flex_alloc( yy_size_t size )
#else
static void *yy_flex_alloc( size )
yy_size_t size;
#endif
	{
	return (void *) malloc( size );
	}

#ifdef YY_USE_PROTOS
static void *yy_flex_realloc( void *ptr, yy_size_t size )
#else
static void *yy_flex_realloc( ptr, size )
void *ptr;
yy_size_t size;
#endif
	{
	/* The cast to (char *) in the following accommodates both
	 * implementations that use char* generic pointers, and those
	 * that use void* generic pointers.  It works with the latter
	 * because both ANSI C and C++ allow castless assignment from
	 * any pointer type to void*, and deal with argument conversions
	 * as though doing an assignment.
	 */
	return (void *) realloc( (char *) ptr, size );
	}

#ifdef YY_USE_PROTOS
static void yy_flex_free( void *ptr )
#else
static void yy_flex_free( ptr )
void *ptr;
#endif
	{
	free( ptr );
	}

#if YY_MAIN
int main()
	{
	yylex();
	return 0;
	}
#endif
#line 52 "./syslex.l"
@


1.1
log
@Initial revision
@
text
@d4 1
a4 1
 * $Header: /home/daffy/u0/vern/flex/RCS/flex.skl,v 2.85 95/04/24 10:48:47 vern Exp $
@


1.1.1.1
log
@Initial GNU binutils 2.6 import
@
text
@@


1.1.1.2
log
@Import binutils-2.10
- only the binutils package (no gdb here)
- don't import libiberty and texinfo, they are elsewhere
- remove all .info* generated files
@
text
@d4 1
a4 1
 * $Header: /cvs/src/src/binutils/Attic/syslex.c,v 1.1.2.1 2000/05/29 14:08:52 pb Exp $
a128 1
		YY_RESTORE_YY_MORE_OFFSET \
d238 1
a238 1
YY_BUFFER_STATE yy_scan_string YY_PROTO(( yyconst char *yy_str ));
a410 1
#define YY_RESTORE_YY_MORE_OFFSET
d412 1
a412 1
#line 1 "syslex.l"
d414 1
a414 1
#line 2 "syslex.l"
d423 1
a423 1
#line 426 "lex.yy.c"
a444 4
#ifdef YY_NEED_STRLEN
static int yy_flex_strlen YY_PROTO(( yyconst char * ));
#endif

d570 1
a570 1
#line 11 "syslex.l"
d572 1
a572 1
#line 579 "lex.yy.c"
d657 1
a657 1
#line 12 "syslex.l"
d662 1
a662 1
#line 13 "syslex.l"
d667 1
a667 1
#line 14 "syslex.l"
d672 1
a672 1
#line 15 "syslex.l"
d677 1
a677 1
#line 16 "syslex.l"
d682 1
a682 1
#line 17 "syslex.l"
d687 1
a687 1
#line 18 "syslex.l"
d692 1
a692 1
#line 19 "syslex.l"
d697 1
a697 1
#line 20 "syslex.l"
d707 1
a707 1
#line 27 "syslex.l"
d715 1
a715 1
#line 32 "syslex.l"
d723 1
a723 1
#line 38 "syslex.l"
d728 1
a728 1
#line 39 "syslex.l"
d733 1
a733 1
#line 40 "syslex.l"
d738 1
a738 1
#line 41 "syslex.l"
d743 1
a743 1
#line 43 "syslex.l"
d748 1
a748 1
#line 44 "syslex.l"
d753 1
a753 1
#line 45 "syslex.l"
d758 1
a758 1
#line 46 "syslex.l"
d763 1
a763 1
#line 47 "syslex.l"
d768 1
a768 1
#line 48 "syslex.l"
d773 1
a773 1
#line 49 "syslex.l"
d778 1
a778 1
#line 50 "syslex.l"
d783 1
a783 1
#line 51 "syslex.l"
d788 1
a788 1
#line 52 "syslex.l"
d791 1
a791 1
#line 798 "lex.yy.c"
a801 1
		YY_RESTORE_YY_MORE_OFFSET
d947 1
a947 1
			/* We matched a single character, the EOB, so
d974 1
a974 1
		yy_current_buffer->yy_n_chars = yy_n_chars = 0;
a1028 2

		yy_current_buffer->yy_n_chars = yy_n_chars;
d1153 1
a1153 2
		yy_current_buffer->yy_n_chars =
			yy_n_chars = yy_current_buffer->yy_buf_size;
d1191 1
a1191 1
			int offset = yy_c_buf_p - yytext_ptr;
a1195 16
				case EOB_ACT_LAST_MATCH:
					/* This happens because yy_g_n_b()
					 * sees that we've accumulated a
					 * token and flags that we need to
					 * try matching the token before
					 * proceeding.  But for input(),
					 * there's no matching to consider.
					 * So convert the EOB_ACT_LAST_MATCH
					 * to EOB_ACT_END_OF_FILE.
					 */

					/* Reset buffer status. */
					yyrestart( yyin );

					/* fall through */

d1199 3
d1203 1
d1215 1
a1215 1
					yy_c_buf_p = yytext_ptr + offset;
d1217 9
a1388 3
	if ( ! b )
		return;

d1448 1
a1448 1
YY_BUFFER_STATE yy_scan_string( yyconst char *yy_str )
d1450 2
a1451 2
YY_BUFFER_STATE yy_scan_string( yy_str )
yyconst char *yy_str;
d1455 1
a1455 1
	for ( len = 0; yy_str[len]; ++len )
d1458 1
a1458 1
	return yy_scan_bytes( yy_str, len );
d1579 1
a1579 1
		yy_c_buf_p = yytext + n; \
a1604 16
#ifdef YY_NEED_STRLEN
#ifdef YY_USE_PROTOS
static int yy_flex_strlen( yyconst char *s )
#else
static int yy_flex_strlen( s )
yyconst char *s;
#endif
	{
	register int n;
	for ( n = 0; s[n]; ++n )
		;

	return n;
	}
#endif

d1651 1
a1651 1
#line 52 "syslex.l"
@


1.1.1.3
log
@Import binutils-2.11.2
- only the binutils package (no gdb here)
- don't import libiberty and texinfo, they are elsewhere
- remove all .info* generated files
@
text
@d4 1
a4 1
 * $Header: /cvs/src/src/binutils/Attic/syslex.c,v 1.1.4.2 2001/06/10 15:37:28 pb Exp $
a416 19
/* Copyright 2001 Free Software Foundation, Inc.

This file is part of GLD, the Gnu Linker.

GLD is free software; you can redistribute it and/or modify
it under the terms of the GNU General Public License as published by
the Free Software Foundation; either version 2, or (at your option)
any later version.

GLD is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
GNU General Public License for more details.

You should have received a copy of the GNU General Public License
along with GLD; see the file COPYING.  If not, write to the Free
Software Foundation, 59 Temple Place - Suite 330, Boston, MA
02111-1307, USA.  */

d425 1
a425 1
#line 445 "lex.yy.c"
d576 1
a576 1
#line 30 "syslex.l"
d578 1
a578 1
#line 598 "lex.yy.c"
d663 1
a663 1
#line 31 "syslex.l"
d668 1
a668 1
#line 32 "syslex.l"
d673 1
a673 1
#line 33 "syslex.l"
d678 1
a678 1
#line 34 "syslex.l"
d683 1
a683 1
#line 35 "syslex.l"
d688 1
a688 1
#line 36 "syslex.l"
d693 1
a693 1
#line 37 "syslex.l"
d698 1
a698 1
#line 38 "syslex.l"
d703 1
a703 1
#line 39 "syslex.l"
d713 1
a713 1
#line 46 "syslex.l"
d721 1
a721 1
#line 51 "syslex.l"
d729 1
a729 1
#line 57 "syslex.l"
d734 1
a734 1
#line 58 "syslex.l"
d739 1
a739 1
#line 59 "syslex.l"
d744 1
a744 1
#line 60 "syslex.l"
d749 1
a749 1
#line 62 "syslex.l"
d754 1
a754 1
#line 63 "syslex.l"
d759 1
a759 1
#line 64 "syslex.l"
d764 1
a764 1
#line 65 "syslex.l"
d769 1
a769 1
#line 66 "syslex.l"
d774 1
a774 1
#line 67 "syslex.l"
d779 1
a779 1
#line 68 "syslex.l"
d784 1
a784 1
#line 69 "syslex.l"
d789 1
a789 1
#line 70 "syslex.l"
d794 1
a794 1
#line 71 "syslex.l"
d797 1
a797 1
#line 817 "lex.yy.c"
d1683 1
a1683 1
#line 71 "syslex.l"
@


1.1.1.4
log
@import binutils 2.14 (excluding testsuites, .info files, and .po files)
@
text
@d1 1
d3 3
a5 5
#line 3 "lex.yy.c"

#define  YY_INT_ALIGNED short int

/* A lexical scanner generated by flex */
a9 4
#define YY_FLEX_SUBMINOR_VERSION 31
#if YY_FLEX_SUBMINOR_VERSION > 0
#define FLEX_BETA
#endif
a10 3
/* First, we deal with  platform-specific or compiler-specific issues. */

/* begin standard C headers. */
a11 3
#include <string.h>
#include <errno.h>
#include <stdlib.h>
a12 1
/* end standard C headers. */
d14 4
a17 36
/* flex integer type definitions */

#ifndef FLEXINT_H
#define FLEXINT_H

/* C99 systems have <inttypes.h>. Non-C99 systems may or may not. */

#if defined __STDC_VERSION__ && __STDC_VERSION__ >= 199901L
#include <inttypes.h>
typedef int8_t flex_int8_t;
typedef uint8_t flex_uint8_t;
typedef int16_t flex_int16_t;
typedef uint16_t flex_uint16_t;
typedef int32_t flex_int32_t;
typedef uint32_t flex_uint32_t;
#else
typedef signed char flex_int8_t;
typedef short int flex_int16_t;
typedef int flex_int32_t;
typedef unsigned char flex_uint8_t; 
typedef unsigned short int flex_uint16_t;
typedef unsigned int flex_uint32_t;
#endif /* ! C99 */

/* Limits of integral types. */
#ifndef INT8_MIN
#define INT8_MIN               (-128)
#endif
#ifndef INT16_MIN
#define INT16_MIN              (-32767-1)
#endif
#ifndef INT32_MIN
#define INT32_MIN              (-2147483647-1)
#endif
#ifndef INT8_MAX
#define INT8_MAX               (127)
a18 14
#ifndef INT16_MAX
#define INT16_MAX              (32767)
#endif
#ifndef INT32_MAX
#define INT32_MAX              (2147483647)
#endif
#ifndef UINT8_MAX
#define UINT8_MAX              (255U)
#endif
#ifndef UINT16_MAX
#define UINT16_MAX             (65535U)
#endif
#ifndef UINT32_MAX
#define UINT32_MAX             (4294967295U)
a20 1
#endif /* ! FLEXINT_H */
d24 6
d37 1
d43 9
d58 7
d79 1
a79 1
#define BEGIN (yy_start) = 1 + 2 *
d85 1
a85 1
#define YY_START (((yy_start) - 1) / 2)
d92 1
a92 1
#define YY_NEW_FILE yyrestart(yyin  )
a96 1
#ifndef YY_BUF_SIZE
a97 1
#endif
a98 2
#ifndef YY_TYPEDEF_YY_BUFFER_STATE
#define YY_TYPEDEF_YY_BUFFER_STATE
a99 1
#endif
a101 1

d108 16
a123 3
    #define YY_LESS_LINENO(n)
    
/* Return all but the first "n" matched characters back to the input stream. */
d128 1
a128 3
        int yyless_macro_arg = (n); \
        YY_LESS_LINENO(yyless_macro_arg);\
		*yy_cp = (yy_hold_char); \
d130 1
a130 1
		(yy_c_buf_p) = yy_cp = yy_bp + yyless_macro_arg - YY_MORE_ADJ; \
d135 1
a135 1
#define unput(c) yyunput( c, (yytext_ptr)  )
d141 1
a142 4
#ifndef YY_TYPEDEF_YY_SIZE_T
#define YY_TYPEDEF_YY_SIZE_T
typedef unsigned int yy_size_t;
#endif
a143 2
#ifndef YY_STRUCT_YY_BUFFER_STATE
#define YY_STRUCT_YY_BUFFER_STATE
a179 3
    int yy_bs_lineno; /**< The line count. */
    int yy_bs_column; /**< The column count. */
    
a185 1

a198 1

a199 1
#endif /* !YY_STRUCT_YY_BUFFER_STATE */
d201 1
a201 4
/* Stack of input buffers. */
static size_t yy_buffer_stack_top = 0; /**< index of top of stack. */
static size_t yy_buffer_stack_max = 0; /**< capacity of stack. */
static YY_BUFFER_STATE * yy_buffer_stack = 0; /**< Stack as an array. */
a205 2
 *
 * Returns the top of the stack, or NULL.
d207 1
a207 3
#define YY_CURRENT_BUFFER ( (yy_buffer_stack) \
                          ? (yy_buffer_stack)[(yy_buffer_stack_top)] \
                          : NULL)
a208 4
/* Same as previous macro, but useful when we know that the buffer stack is not
 * NULL or when we need an lvalue. For internal use only.
 */
#define YY_CURRENT_BUFFER_LVALUE (yy_buffer_stack)[(yy_buffer_stack_top)]
d212 1
d214 2
d228 17
a244 21
void yyrestart (FILE *input_file  );
void yy_switch_to_buffer (YY_BUFFER_STATE new_buffer  );
YY_BUFFER_STATE yy_create_buffer (FILE *file,int size  );
void yy_delete_buffer (YY_BUFFER_STATE b  );
void yy_flush_buffer (YY_BUFFER_STATE b  );
void yypush_buffer_state (YY_BUFFER_STATE new_buffer  );
void yypop_buffer_state (void );

static void yyensure_buffer_stack (void );
static void yy_load_buffer_state (void );
static void yy_init_buffer (YY_BUFFER_STATE b,FILE *file  );

#define YY_FLUSH_BUFFER yy_flush_buffer(YY_CURRENT_BUFFER )

YY_BUFFER_STATE yy_scan_buffer (char *base,yy_size_t size  );
YY_BUFFER_STATE yy_scan_string (yyconst char *yy_str  );
YY_BUFFER_STATE yy_scan_bytes (yyconst char *bytes,int len  );

void *yyalloc (yy_size_t  );
void *yyrealloc (void *,yy_size_t  );
void yyfree (void *  );
d250 3
a252 6
	if ( ! YY_CURRENT_BUFFER ){ \
        yyensure_buffer_stack (); \
		YY_CURRENT_BUFFER_LVALUE =    \
            yy_create_buffer(yyin,YY_BUF_SIZE ); \
	} \
	YY_CURRENT_BUFFER_LVALUE->yy_is_interactive = is_interactive; \
d257 3
a259 6
	if ( ! YY_CURRENT_BUFFER ){\
        yyensure_buffer_stack (); \
		YY_CURRENT_BUFFER_LVALUE =    \
            yy_create_buffer(yyin,YY_BUF_SIZE ); \
	} \
	YY_CURRENT_BUFFER_LVALUE->yy_at_bol = at_bol; \
d262 1
a262 1
#define YY_AT_BOL() (YY_CURRENT_BUFFER_LVALUE->yy_at_bol)
a264 1

a265 1

a266 5

extern int yylineno;

int yylineno = 1;

d270 4
a273 4
static yy_state_type yy_get_previous_state (void );
static yy_state_type yy_try_NUL_trans (yy_state_type current_state  );
static int yy_get_next_buffer (void );
static void yy_fatal_error (yyconst char msg[]  );
d279 3
a281 3
	(yytext_ptr) = yy_bp; \
	yyleng = (size_t) (yy_cp - yy_bp); \
	(yy_hold_char) = *yy_cp; \
d283 1
a283 1
	(yy_c_buf_p) = yy_cp;
d287 1
a287 8
/* This struct is not used in this scanner,
   but its presence is necessary. */
struct yy_trans_info
	{
	flex_int32_t yy_verify;
	flex_int32_t yy_nxt;
	};
static yyconst flex_int16_t yy_accept[81] =
d299 1
a299 1
static yyconst flex_int32_t yy_ec[256] =
d331 1
a331 1
static yyconst flex_int32_t yy_meta[34] =
d339 1
a339 1
static yyconst flex_int16_t yy_base[84] =
d352 1
a352 1
static yyconst flex_int16_t yy_def[84] =
d365 1
a365 1
static yyconst flex_int16_t yy_nxt[135] =
d384 1
a384 1
static yyconst flex_int16_t yy_chk[135] =
a405 3
extern int yy_flex_debug;
int yy_flex_debug = 0;

d415 1
d444 1
a444 13
#line 521 "lex.yy.c"

#define INITIAL 0

/* Special case for "unistd.h", since it is non-ANSI. We include it way
 * down here because we want the user's section 1 to have been scanned first.
 * The user has a chance to override it with an option.
 */
#include <unistd.h>

#ifndef YY_EXTRA_TYPE
#define YY_EXTRA_TYPE void *
#endif
d452 1
a452 1
extern "C" int yywrap (void );
d454 2
a455 1
extern int yywrap (void );
d457 3
a461 2
    static void yyunput (int c,char *buf_ptr  );
    
d463 1
a463 1
static void yy_flex_strncpy (char *,yyconst char *,int );
d467 1
a467 1
static int yy_flex_strlen (yyconst char * );
a470 1

d472 1
a472 1
static int yyinput (void );
d474 2
a475 1
static int input (void );
d478 33
d519 1
d532 1
a532 1
	if ( YY_CURRENT_BUFFER_LVALUE->yy_is_interactive ) \
d534 1
a534 2
		int c = '*'; \
		size_t n; \
d544 3
a546 16
	else \
		{ \
		errno=0; \
		while ( (result = fread(buf, 1, max_size, yyin))==0 && ferror(yyin)) \
			{ \
			if( errno != EINTR) \
				{ \
				YY_FATAL_ERROR( "input in flex scanner failed" ); \
				break; \
				} \
			errno=0; \
			clearerr(yyin); \
			} \
		}\
\

a566 2
/* end tables serialization structures and prototypes */

d571 2
a572 6
#define YY_DECL_IS_OURS 1

extern int yylex (void);

#define YY_DECL int yylex (void)
#endif /* !YY_DECL */
a588 2
/** The main scanner function which does all the work.
 */
d590 1
a590 1
{
d594 1
a594 1
    
d597 1
a597 1
#line 672 "lex.yy.c"
d599 1
a599 1
	if ( (yy_init) )
d601 1
a601 1
		(yy_init) = 0;
d607 2
a608 2
		if ( ! (yy_start) )
			(yy_start) = 1;	/* first start state */
d616 3
a618 5
		if ( ! YY_CURRENT_BUFFER ) {
			yyensure_buffer_stack ();
			YY_CURRENT_BUFFER_LVALUE =
				yy_create_buffer(yyin,YY_BUF_SIZE );
		}
d620 1
a620 1
		yy_load_buffer_state( );
d625 1
a625 1
		yy_cp = (yy_c_buf_p);
d628 1
a628 1
		*yy_cp = (yy_hold_char);
d635 1
a635 1
		yy_current_state = (yy_start);
d642 2
a643 2
				(yy_last_accepting_state) = yy_current_state;
				(yy_last_accepting_cpos) = yy_cp;
d660 2
a661 2
			yy_cp = (yy_last_accepting_cpos);
			yy_current_state = (yy_last_accepting_state);
d667 1
d670 1
d675 3
a677 3
			*yy_cp = (yy_hold_char);
			yy_cp = (yy_last_accepting_cpos);
			yy_current_state = (yy_last_accepting_state);
a715 1
/* rule 8 can match eol */
a720 1
/* rule 9 can match eol */
d816 1
a816 1
#line 893 "lex.yy.c"
d823 1
a823 1
		int yy_amount_of_matched_text = (int) (yy_cp - (yytext_ptr)) - 1;
d826 1
a826 1
		*yy_cp = (yy_hold_char);
d829 1
a829 1
		if ( YY_CURRENT_BUFFER_LVALUE->yy_buffer_status == YY_BUFFER_NEW )
d835 1
a835 1
			 * consistency between YY_CURRENT_BUFFER and our
d840 3
a842 3
			(yy_n_chars) = YY_CURRENT_BUFFER_LVALUE->yy_n_chars;
			YY_CURRENT_BUFFER_LVALUE->yy_input_file = yyin;
			YY_CURRENT_BUFFER_LVALUE->yy_buffer_status = YY_BUFFER_NORMAL;
d852 1
a852 1
		if ( (yy_c_buf_p) <= &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)] )
d856 1
a856 1
			(yy_c_buf_p) = (yytext_ptr) + yy_amount_of_matched_text;
d858 1
a858 1
			yy_current_state = yy_get_previous_state(  );
d871 1
a871 1
			yy_bp = (yytext_ptr) + YY_MORE_ADJ;
d876 1
a876 1
				yy_cp = ++(yy_c_buf_p);
d883 1
a883 1
				yy_cp = (yy_c_buf_p);
d888 1
a888 1
		else switch ( yy_get_next_buffer(  ) )
d892 1
a892 1
				(yy_did_buffer_switch_on_eof) = 0;
d894 1
a894 1
				if ( yywrap( ) )
d905 1
a905 1
					(yy_c_buf_p) = (yytext_ptr) + YY_MORE_ADJ;
d913 1
a913 1
					if ( ! (yy_did_buffer_switch_on_eof) )
d920 2
a921 2
				(yy_c_buf_p) =
					(yytext_ptr) + yy_amount_of_matched_text;
d923 1
a923 1
				yy_current_state = yy_get_previous_state(  );
d925 2
a926 2
				yy_cp = (yy_c_buf_p);
				yy_bp = (yytext_ptr) + YY_MORE_ADJ;
d930 2
a931 2
				(yy_c_buf_p) =
				&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)];
d933 1
a933 1
				yy_current_state = yy_get_previous_state(  );
d935 2
a936 2
				yy_cp = (yy_c_buf_p);
				yy_bp = (yytext_ptr) + YY_MORE_ADJ;
d947 2
a948 1
} /* end of yylex */
d957 5
a961 4
static int yy_get_next_buffer (void)
{
    	register char *dest = YY_CURRENT_BUFFER_LVALUE->yy_ch_buf;
	register char *source = (yytext_ptr);
d965 1
a965 1
	if ( (yy_c_buf_p) > &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars) + 1] )
d969 1
a969 1
	if ( YY_CURRENT_BUFFER_LVALUE->yy_fill_buffer == 0 )
d971 1
a971 1
		if ( (yy_c_buf_p) - (yytext_ptr) - YY_MORE_ADJ == 1 )
d991 1
a991 1
	number_to_move = (int) ((yy_c_buf_p) - (yytext_ptr)) - 1;
d996 1
a996 1
	if ( YY_CURRENT_BUFFER_LVALUE->yy_buffer_status == YY_BUFFER_EOF_PENDING )
d1000 1
a1000 1
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars) = 0;
d1004 2
a1005 2
			size_t num_to_read =
			YY_CURRENT_BUFFER_LVALUE->yy_buf_size - number_to_move - 1;
d1009 4
d1015 1
a1015 1
			YY_BUFFER_STATE b = YY_CURRENT_BUFFER;
d1018 1
a1018 1
				(int) ((yy_c_buf_p) - b->yy_ch_buf);
d1031 2
a1032 1
					yyrealloc((void *) b->yy_ch_buf,b->yy_buf_size + 2  );
d1042 1
a1042 1
			(yy_c_buf_p) = &b->yy_ch_buf[yy_c_buf_p_offset];
d1044 1
a1044 1
			num_to_read = YY_CURRENT_BUFFER_LVALUE->yy_buf_size -
d1046 1
a1046 1

d1053 2
a1054 2
		YY_INPUT( (&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[number_to_move]),
			(yy_n_chars), num_to_read );
d1056 1
a1056 1
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars);
d1059 1
a1059 1
	if ( (yy_n_chars) == 0 )
d1064 1
a1064 1
			yyrestart(yyin  );
d1070 1
a1070 1
			YY_CURRENT_BUFFER_LVALUE->yy_buffer_status =
d1078 3
a1080 3
	(yy_n_chars) += number_to_move;
	YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)] = YY_END_OF_BUFFER_CHAR;
	YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars) + 1] = YY_END_OF_BUFFER_CHAR;
d1082 1
a1082 1
	(yytext_ptr) = &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[0];
d1085 2
a1086 1
}
d1090 2
a1091 2
    static yy_state_type yy_get_previous_state (void)
{
a1093 2
    
	yy_current_state = (yy_start);
d1095 3
a1097 1
	for ( yy_cp = (yytext_ptr) + YY_MORE_ADJ; yy_cp < (yy_c_buf_p); ++yy_cp )
d1102 2
a1103 2
			(yy_last_accepting_state) = yy_current_state;
			(yy_last_accepting_cpos) = yy_cp;
d1115 2
a1116 1
}
d1123 8
a1130 2
    static yy_state_type yy_try_NUL_trans  (yy_state_type yy_current_state )
{
d1132 1
a1132 1
    	register char *yy_cp = (yy_c_buf_p);
d1137 2
a1138 2
		(yy_last_accepting_state) = yy_current_state;
		(yy_last_accepting_cpos) = yy_cp;
d1150 2
a1151 1
}
d1153 10
a1162 5
    static void yyunput (int c, register char * yy_bp )
{
	register char *yy_cp;
    
    yy_cp = (yy_c_buf_p);
d1165 1
a1165 1
	*yy_cp = (yy_hold_char);
d1167 1
a1167 1
	if ( yy_cp < YY_CURRENT_BUFFER_LVALUE->yy_ch_buf + 2 )
d1170 3
a1172 3
		register int number_to_move = (yy_n_chars) + 2;
		register char *dest = &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[
					YY_CURRENT_BUFFER_LVALUE->yy_buf_size + 2];
d1174 1
a1174 1
				&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[number_to_move];
d1176 1
a1176 1
		while ( source > YY_CURRENT_BUFFER_LVALUE->yy_ch_buf )
d1181 2
a1182 2
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars =
			(yy_n_chars) = YY_CURRENT_BUFFER_LVALUE->yy_buf_size;
d1184 1
a1184 1
		if ( yy_cp < YY_CURRENT_BUFFER_LVALUE->yy_ch_buf + 2 )
a1189 4
	(yytext_ptr) = yy_bp;
	(yy_hold_char) = *yy_cp;
	(yy_c_buf_p) = yy_cp;
}
d1191 7
a1197 1
#ifndef YY_NO_INPUT
d1199 1
a1199 1
    static int yyinput (void)
d1201 1
a1201 1
    static int input  (void)
d1203 2
d1206 1
a1206 4
{
	int c;
    
	*(yy_c_buf_p) = (yy_hold_char);
d1208 1
a1208 1
	if ( *(yy_c_buf_p) == YY_END_OF_BUFFER_CHAR )
d1214 1
a1214 1
		if ( (yy_c_buf_p) < &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)] )
d1216 1
a1216 1
			*(yy_c_buf_p) = '\0';
d1220 2
a1221 2
			int offset = (yy_c_buf_p) - (yytext_ptr);
			++(yy_c_buf_p);
d1223 1
a1223 1
			switch ( yy_get_next_buffer(  ) )
d1237 1
a1237 1
					yyrestart(yyin );
d1239 1
a1239 1
					/*FALLTHROUGH*/
d1243 1
a1243 1
					if ( yywrap( ) )
d1246 1
a1246 1
					if ( ! (yy_did_buffer_switch_on_eof) )
d1256 1
a1256 1
					(yy_c_buf_p) = (yytext_ptr) + offset;
d1262 4
a1265 3
	c = *(unsigned char *) (yy_c_buf_p);	/* cast for 8-bit char's */
	*(yy_c_buf_p) = '\0';	/* preserve yytext */
	(yy_hold_char) = *++(yy_c_buf_p);
d1268 2
a1269 2
}
#endif	/* ifndef YY_NO_INPUT */
d1271 12
a1282 12
/** Immediately switch to a different input stream.
 * @@param input_file A readable stream.
 * 
 * @@note This function does not reset the start condition to @@c INITIAL .
 */
    void yyrestart  (FILE * input_file )
{
    
	if ( ! YY_CURRENT_BUFFER ){
        yyensure_buffer_stack ();
		YY_CURRENT_BUFFER_LVALUE =
            yy_create_buffer(yyin,YY_BUF_SIZE );
d1285 9
a1293 18
	yy_init_buffer(YY_CURRENT_BUFFER,input_file );
	yy_load_buffer_state( );
}

/** Switch to a different input buffer.
 * @@param new_buffer The new input buffer.
 * 
 */
    void yy_switch_to_buffer  (YY_BUFFER_STATE  new_buffer )
{
    
	/* TODO. We should be able to replace this entire function body
	 * with
	 *		yypop_buffer_state();
	 *		yypush_buffer_state(new_buffer);
     */
	yyensure_buffer_stack ();
	if ( YY_CURRENT_BUFFER == new_buffer )
d1296 1
a1296 1
	if ( YY_CURRENT_BUFFER )
d1299 3
a1301 3
		*(yy_c_buf_p) = (yy_hold_char);
		YY_CURRENT_BUFFER_LVALUE->yy_buf_pos = (yy_c_buf_p);
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars);
d1304 2
a1305 2
	YY_CURRENT_BUFFER_LVALUE = new_buffer;
	yy_load_buffer_state( );
d1312 2
a1313 2
	(yy_did_buffer_switch_on_eof) = 1;
}
d1315 22
a1336 16
static void yy_load_buffer_state  (void)
{
    	(yy_n_chars) = YY_CURRENT_BUFFER_LVALUE->yy_n_chars;
	(yytext_ptr) = (yy_c_buf_p) = YY_CURRENT_BUFFER_LVALUE->yy_buf_pos;
	yyin = YY_CURRENT_BUFFER_LVALUE->yy_input_file;
	(yy_hold_char) = *(yy_c_buf_p);
}

/** Allocate and initialize an input buffer state.
 * @@param file A readable stream.
 * @@param size The character buffer size in bytes. When in doubt, use @@c YY_BUF_SIZE.
 * 
 * @@return the allocated buffer state.
 */
    YY_BUFFER_STATE yy_create_buffer  (FILE * file, int  size )
{
d1338 2
a1339 2
    
	b = (YY_BUFFER_STATE) yyalloc(sizeof( struct yy_buffer_state )  );
d1348 1
a1348 1
	b->yy_ch_buf = (char *) yyalloc(b->yy_buf_size + 2  );
d1354 1
a1354 1
	yy_init_buffer(b,file );
d1357 2
a1358 1
}
d1360 7
a1366 7
/** Destroy the buffer.
 * @@param b a buffer created with yy_create_buffer()
 * 
 */
    void yy_delete_buffer (YY_BUFFER_STATE  b )
{
    
d1370 2
a1371 2
	if ( b == YY_CURRENT_BUFFER ) /* Not sure if we should pop here. */
		YY_CURRENT_BUFFER_LVALUE = (YY_BUFFER_STATE) 0;
d1374 5
a1378 1
		yyfree((void *) b->yy_ch_buf  );
d1380 13
a1392 2
	yyfree((void *) b  );
}
a1393 9
#ifndef __cplusplus
extern int isatty (int );
#endif /* __cplusplus */
    
/* Initializes or reinitializes a buffer.
 * This function is sometimes called more than once on the same buffer,
 * such as during a yyrestart() or at EOF.
 */
    static void yy_init_buffer  (YY_BUFFER_STATE  b, FILE * file )
d1395 2
a1396 4
{
	int oerrno = errno;
    
	yy_flush_buffer(b );
d1401 21
a1421 21
    /* If b is the current buffer, then yy_init_buffer was _probably_
     * called from yyrestart() or through yy_get_next_buffer.
     * In that case, we don't want to reset the lineno or column.
     */
    if (b != YY_CURRENT_BUFFER){
        b->yy_bs_lineno = 1;
        b->yy_bs_column = 0;
    }

        b->yy_is_interactive = file ? (isatty( fileno(file) ) > 0) : 0;
    
	errno = oerrno;
}

/** Discard all buffered characters. On the next scan, YY_INPUT will be called.
 * @@param b the buffer state to be flushed, usually @@c YY_CURRENT_BUFFER.
 * 
 */
    void yy_flush_buffer (YY_BUFFER_STATE  b )
{
    	if ( ! b )
d1438 2
a1439 53
	if ( b == YY_CURRENT_BUFFER )
		yy_load_buffer_state( );
}

/** Pushes the new state onto the stack. The new state becomes
 *  the current state. This function will allocate the stack
 *  if necessary.
 *  @@param new_buffer The new state.
 *  
 */
void yypush_buffer_state (YY_BUFFER_STATE new_buffer )
{
    	if (new_buffer == NULL)
		return;

	yyensure_buffer_stack();

	/* This block is copied from yy_switch_to_buffer. */
	if ( YY_CURRENT_BUFFER )
		{
		/* Flush out information for old buffer. */
		*(yy_c_buf_p) = (yy_hold_char);
		YY_CURRENT_BUFFER_LVALUE->yy_buf_pos = (yy_c_buf_p);
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars);
		}

	/* Only push if top exists. Otherwise, replace top. */
	if (YY_CURRENT_BUFFER)
		(yy_buffer_stack_top)++;
	YY_CURRENT_BUFFER_LVALUE = new_buffer;

	/* copied from yy_switch_to_buffer. */
	yy_load_buffer_state( );
	(yy_did_buffer_switch_on_eof) = 1;
}

/** Removes and deletes the top of the stack, if present.
 *  The next element becomes the new top.
 *  
 */
void yypop_buffer_state (void)
{
    	if (!YY_CURRENT_BUFFER)
		return;

	yy_delete_buffer(YY_CURRENT_BUFFER );
	YY_CURRENT_BUFFER_LVALUE = NULL;
	if ((yy_buffer_stack_top) > 0)
		--(yy_buffer_stack_top);

	if (YY_CURRENT_BUFFER) {
		yy_load_buffer_state( );
		(yy_did_buffer_switch_on_eof) = 1;
a1440 1
}
a1441 24
/* Allocates the stack if it does not exist.
 *  Guarantees space for at least one push.
 */
static void yyensure_buffer_stack (void)
{
	int num_to_alloc;
    
	if (!(yy_buffer_stack)) {

		/* First allocation is just for 2 elements, since we don't know if this
		 * scanner will even need a stack. We use 2 instead of 1 to avoid an
		 * immediate realloc on the next call.
         */
		num_to_alloc = 1;
		(yy_buffer_stack) = (struct yy_buffer_state**)yyalloc
								(num_to_alloc * sizeof(struct yy_buffer_state*)
								);
		
		memset((yy_buffer_stack), 0, num_to_alloc * sizeof(struct yy_buffer_state*));
				
		(yy_buffer_stack_max) = num_to_alloc;
		(yy_buffer_stack_top) = 0;
		return;
	}
d1443 10
a1452 4
	if ((yy_buffer_stack_top) >= ((yy_buffer_stack_max)) - 1){

		/* Increase the buffer to prepare for a possible push. */
		int grow_size = 8 /* arbitrary grow size */;
a1453 22
		num_to_alloc = (yy_buffer_stack_max) + grow_size;
		(yy_buffer_stack) = (struct yy_buffer_state**)yyrealloc
								((yy_buffer_stack),
								num_to_alloc * sizeof(struct yy_buffer_state*)
								);

		/* zero only the new slots.*/
		memset((yy_buffer_stack) + (yy_buffer_stack_max), 0, grow_size * sizeof(struct yy_buffer_state*));
		(yy_buffer_stack_max) = num_to_alloc;
	}
}

/** Setup the input buffer state to scan directly from a user-specified character buffer.
 * @@param base the character buffer
 * @@param size the size in bytes of the character buffer
 * 
 * @@return the newly allocated buffer state object. 
 */
YY_BUFFER_STATE yy_scan_buffer  (char * base, yy_size_t  size )
{
	YY_BUFFER_STATE b;
    
d1460 1
a1460 1
	b = (YY_BUFFER_STATE) yyalloc(sizeof( struct yy_buffer_state )  );
d1474 1
a1474 1
	yy_switch_to_buffer(b  );
d1477 20
a1496 1
}
d1498 9
a1506 23
/** Setup the input buffer state to scan a string. The next call to yylex() will
 * scan from a @@e copy of @@a str.
 * @@param str a NUL-terminated string to scan
 * 
 * @@return the newly allocated buffer state object.
 * @@note If you want to scan bytes that may contain NUL values, then use
 *       yy_scan_bytes() instead.
 */
YY_BUFFER_STATE yy_scan_string (yyconst char * str )
{
    
	return yy_scan_bytes(str,strlen(str) );
}

/** Setup the input buffer state to scan the given bytes. The next call to yylex() will
 * scan from a @@e copy of @@a bytes.
 * @@param bytes the byte buffer to scan
 * @@param len the number of bytes in the buffer pointed to by @@a bytes.
 * 
 * @@return the newly allocated buffer state object.
 */
YY_BUFFER_STATE yy_scan_bytes  (yyconst char * bytes, int  len )
{
d1511 1
a1511 1
    
d1514 1
a1514 1
	buf = (char *) yyalloc(n  );
d1523 1
a1523 1
	b = yy_scan_buffer(buf,n );
d1533 3
a1535 1
}
d1537 6
a1542 2
#ifndef YY_EXIT_FAILURE
#define YY_EXIT_FAILURE 2
d1544 10
d1555 3
a1557 5
static void yy_fatal_error (yyconst char* msg )
{
    	(void) fprintf( stderr, "%s\n", msg );
	exit( YY_EXIT_FAILURE );
}
d1559 4
a1562 1
/* Redefine yyless() so it works in section 3 code. */
d1564 1
a1564 14
#undef yyless
#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up yytext. */ \
        int yyless_macro_arg = (n); \
        YY_LESS_LINENO(yyless_macro_arg);\
		yytext[yyleng] = (yy_hold_char); \
		(yy_c_buf_p) = yytext + yyless_macro_arg; \
		(yy_hold_char) = *(yy_c_buf_p); \
		*(yy_c_buf_p) = '\0'; \
		yyleng = yyless_macro_arg; \
		} \
	while ( 0 )
d1566 3
a1568 1
/* Accessor  methods (get/set functions) to struct members. */
a1569 8
/** Get the current line number.
 * 
 */
int yyget_lineno  (void)
{
        
    return yylineno;
}
d1571 5
a1575 7
/** Get the input stream.
 * 
 */
FILE *yyget_in  (void)
{
        return yyin;
}
d1577 3
a1579 7
/** Get the output stream.
 * 
 */
FILE *yyget_out  (void)
{
        return yyout;
}
a1580 7
/** Get the length of the current token.
 * 
 */
int yyget_leng  (void)
{
        return yyleng;
}
d1582 6
a1587 3
/** Get the current token.
 * 
 */
d1589 3
a1591 4
char *yyget_text  (void)
{
        return yytext;
}
d1593 10
a1602 20
/** Set the current line number.
 * @@param line_number
 * 
 */
void yyset_lineno (int  line_number )
{
    
    yylineno = line_number;
}

/** Set the input stream. This does not discard the current
 * input buffer.
 * @@param in_str A readable stream.
 * 
 * @@see yy_switch_to_buffer
 */
void yyset_in (FILE *  in_str )
{
        yyin = in_str ;
}
a1603 4
void yyset_out (FILE *  out_str )
{
        yyout = out_str ;
}
a1604 4
int yyget_debug  (void)
{
        return yy_flex_debug;
}
d1606 1
a1606 4
void yyset_debug (int  bdebug )
{
        yy_flex_debug = bdebug ;
}
d1608 12
a1619 14
/* yylex_destroy is for both reentrant and non-reentrant scanners. */
int yylex_destroy  (void)
{
    
    /* Pop the buffer stack, destroying each element. */
	while(YY_CURRENT_BUFFER){
		yy_delete_buffer(YY_CURRENT_BUFFER  );
		YY_CURRENT_BUFFER_LVALUE = NULL;
		yypop_buffer_state();
	}

	/* Destroy the stack itself. */
	yyfree((yy_buffer_stack) );
	(yy_buffer_stack) = NULL;
a1620 2
    return 0;
}
d1622 1
a1622 3
/*
 * Internal utility routines.
 */
d1625 9
a1633 2
static void yy_flex_strncpy (char* s1, yyconst char * s2, int n )
{
d1635 1
a1635 1
    	for ( i = 0; i < n; ++i )
d1637 1
a1637 1
}
d1641 7
a1647 2
static int yy_flex_strlen (yyconst char * s )
{
d1649 1
a1649 1
    	for ( n = 0; s[n]; ++n )
d1653 1
a1653 1
}
d1656 8
a1663 2
void *yyalloc (yy_size_t  size )
{
d1665 1
a1665 1
}
d1667 8
a1674 2
void *yyrealloc  (void * ptr, yy_size_t  size )
{
d1683 1
a1683 1
}
d1685 9
a1693 4
void yyfree (void * ptr )
{
	free( (char *) ptr );	/* see yyrealloc() for (char *) cast */
}
d1695 6
a1700 13
#define YYTABLES_NAME "yytables"

#undef YY_NEW_FILE
#undef YY_FLUSH_BUFFER
#undef yy_set_bol
#undef yy_new_buffer
#undef yy_set_interactive
#undef yytext_ptr
#undef YY_DO_BEFORE_ACTION

#ifdef YY_DECL_IS_OURS
#undef YY_DECL_IS_OURS
#undef YY_DECL
@


1.1.1.5
log
@Binutils 2.15, with testsuites removed, and without gdb and libiberty.
@
text
@d1 5
a7 4
/* Scanner skeleton version:
 * $Header: /cvs/src/src/binutils/Attic/syslex.c,v 1.1.12.1 2004/04/09 19:32:16 drow Exp $
 */

d11 4
d16 3
d20 1
d22 8
d31 43
a73 4
/* cfront 1.2 defines "c_plusplus" instead of "__cplusplus" */
#ifdef c_plusplus
#ifndef __cplusplus
#define __cplusplus
d75 2
d79 1
a82 8
#include <stdlib.h>
#ifndef _WIN32
#include <unistd.h>
#endif

/* Use prototypes in function declarations. */
#define YY_USE_PROTOS

a89 1
#define YY_USE_PROTOS
a94 9
#ifdef __TURBOC__
 #pragma warn -rch
 #pragma warn -use
#include <io.h>
#include <stdlib.h>
#define YY_USE_CONST
#define YY_USE_PROTOS
#endif

a100 8

#ifdef YY_USE_PROTOS
#define YY_PROTO(proto) proto
#else
#define YY_PROTO(proto) ()
#endif


d115 1
a115 1
#define BEGIN yy_start = 1 + 2 *
d121 1
a121 1
#define YY_START ((yy_start - 1) / 2)
d128 1
a128 1
#define YY_NEW_FILE yyrestart( yyin )
d133 1
d135 1
d137 2
d140 1
d143 1
d150 3
a152 16
/* The funky do-while in the following #define is used to turn the definition
 * int a single C statement (which needs a semi-colon terminator).  This
 * avoids problems with code like:
 *
 * 	if ( condition_holds )
 *		yyless( 5 );
 *	else
 *		do_something_else();
 *
 * Prior to using the do-while the compiler would get upset at the
 * "else" because it interpreted the "if" statement as being all
 * done when it reached the ';' after the yyless() call.
 */

/* Return all but the first 'n' matched characters back to the input stream. */

d157 3
a159 1
		*yy_cp = yy_hold_char; \
d161 1
a161 1
		yy_c_buf_p = yy_cp = yy_bp + n - YY_MORE_ADJ; \
d166 1
a166 1
#define unput(c) yyunput( c, yytext_ptr )
d172 3
d176 1
d178 2
a179 1

d216 3
d225 1
d239 1
d241 1
d243 4
a246 1
static YY_BUFFER_STATE yy_current_buffer = 0;
d251 2
d254 3
a256 1
#define YY_CURRENT_BUFFER yy_current_buffer
d258 4
a264 1

a265 2


d278 21
a298 17
void yyrestart YY_PROTO(( FILE *input_file ));

void yy_switch_to_buffer YY_PROTO(( YY_BUFFER_STATE new_buffer ));
void yy_load_buffer_state YY_PROTO(( void ));
YY_BUFFER_STATE yy_create_buffer YY_PROTO(( FILE *file, int size ));
void yy_delete_buffer YY_PROTO(( YY_BUFFER_STATE b ));
void yy_init_buffer YY_PROTO(( YY_BUFFER_STATE b, FILE *file ));
void yy_flush_buffer YY_PROTO(( YY_BUFFER_STATE b ));
#define YY_FLUSH_BUFFER yy_flush_buffer( yy_current_buffer )

YY_BUFFER_STATE yy_scan_buffer YY_PROTO(( char *base, yy_size_t size ));
YY_BUFFER_STATE yy_scan_string YY_PROTO(( yyconst char *yy_str ));
YY_BUFFER_STATE yy_scan_bytes YY_PROTO(( yyconst char *bytes, int len ));

static void *yy_flex_alloc YY_PROTO(( yy_size_t ));
static void *yy_flex_realloc YY_PROTO(( void *, yy_size_t ));
static void yy_flex_free YY_PROTO(( void * ));
d304 6
a309 3
	if ( ! yy_current_buffer ) \
		yy_current_buffer = yy_create_buffer( yyin, YY_BUF_SIZE ); \
	yy_current_buffer->yy_is_interactive = is_interactive; \
d314 6
a319 3
	if ( ! yy_current_buffer ) \
		yy_current_buffer = yy_create_buffer( yyin, YY_BUF_SIZE ); \
	yy_current_buffer->yy_at_bol = at_bol; \
d322 1
a322 1
#define YY_AT_BOL() (yy_current_buffer->yy_at_bol)
d325 1
d327 1
d329 5
d337 4
a340 4
static yy_state_type yy_get_previous_state YY_PROTO(( void ));
static yy_state_type yy_try_NUL_trans YY_PROTO(( yy_state_type current_state ));
static int yy_get_next_buffer YY_PROTO(( void ));
static void yy_fatal_error YY_PROTO(( yyconst char msg[] ));
d346 3
a348 3
	yytext_ptr = yy_bp; \
	yyleng = (int) (yy_cp - yy_bp); \
	yy_hold_char = *yy_cp; \
d350 1
a350 1
	yy_c_buf_p = yy_cp;
d354 8
a361 1
static yyconst short int yy_accept[81] =
d373 1
a373 1
static yyconst int yy_ec[256] =
d405 1
a405 1
static yyconst int yy_meta[34] =
d413 1
a413 1
static yyconst short int yy_base[84] =
d426 1
a426 1
static yyconst short int yy_def[84] =
d439 1
a439 1
static yyconst short int yy_nxt[135] =
d458 1
a458 1
static yyconst short int yy_chk[135] =
d480 3
a491 1
#define INITIAL 0
d493 1
a493 1
/* Copyright 2001, 2003 Free Software Foundation, Inc.
d518 14
a531 1
static int yywrap (void) { return 1; }
a532 1
#line 448 "lex.yy.c"
d540 1
a540 1
extern "C" int yywrap YY_PROTO(( void ));
d542 1
a542 1
extern int yywrap YY_PROTO(( void ));
d546 2
a547 4
#ifndef YY_NO_UNPUT
static void yyunput YY_PROTO(( int c, char *buf_ptr ));
#endif

d549 1
a549 1
static void yy_flex_strncpy YY_PROTO(( char *, yyconst char *, int ));
d553 1
a553 1
static int yy_flex_strlen YY_PROTO(( yyconst char * ));
d557 1
d559 1
a559 1
static int yyinput YY_PROTO(( void ));
d561 1
a561 2
static int input YY_PROTO(( void ));
#endif
a563 33
#if YY_STACK_USED
static int yy_start_stack_ptr = 0;
static int yy_start_stack_depth = 0;
static int *yy_start_stack = 0;
#ifndef YY_NO_PUSH_STATE
static void yy_push_state YY_PROTO(( int new_state ));
#endif
#ifndef YY_NO_POP_STATE
static void yy_pop_state YY_PROTO(( void ));
#endif
#ifndef YY_NO_TOP_STATE
static int yy_top_state YY_PROTO(( void ));
#endif

#else
#define YY_NO_PUSH_STATE 1
#define YY_NO_POP_STATE 1
#define YY_NO_TOP_STATE 1
#endif

#ifdef YY_MALLOC_DECL
YY_MALLOC_DECL
#else
#if __STDC__
#ifndef __cplusplus
#include <stdlib.h>
#endif
#else
/* Just try to get by without declaring the routines.  This will fail
 * miserably on non-ANSI systems for which sizeof(size_t) != sizeof(int)
 * or sizeof(void*) != sizeof(int).
 */
#endif
a571 1

d584 1
a584 1
	if ( yy_current_buffer->yy_is_interactive ) \
d586 2
a587 1
		int c = '*', n; \
d610 3
a612 1
		}
d633 2
d639 6
a644 2
#define YY_DECL int yylex YY_PROTO(( void ))
#endif
d661 2
d664 1
a664 1
	{
d668 1
a668 1

d671 1
a671 1
#line 612 "lex.yy.c"
d673 1
a673 1
	if ( yy_init )
d675 1
a675 1
		yy_init = 0;
d681 2
a682 2
		if ( ! yy_start )
			yy_start = 1;	/* first start state */
d690 5
a694 3
		if ( ! yy_current_buffer )
			yy_current_buffer =
				yy_create_buffer( yyin, YY_BUF_SIZE );
d696 1
a696 1
		yy_load_buffer_state();
d701 1
a701 1
		yy_cp = yy_c_buf_p;
d704 1
a704 1
		*yy_cp = yy_hold_char;
d711 1
a711 1
		yy_current_state = yy_start;
d718 2
a719 2
				yy_last_accepting_state = yy_current_state;
				yy_last_accepting_cpos = yy_cp;
d736 2
a737 2
			yy_cp = yy_last_accepting_cpos;
			yy_current_state = yy_last_accepting_state;
a742 1

a744 1

d749 3
a751 3
			*yy_cp = yy_hold_char;
			yy_cp = yy_last_accepting_cpos;
			yy_current_state = yy_last_accepting_state;
d790 1
d796 1
d892 1
a892 1
#line 831 "lex.yy.c"
d899 1
a899 1
		int yy_amount_of_matched_text = (int) (yy_cp - yytext_ptr) - 1;
d902 1
a902 1
		*yy_cp = yy_hold_char;
d905 1
a905 1
		if ( yy_current_buffer->yy_buffer_status == YY_BUFFER_NEW )
d911 1
a911 1
			 * consistency between yy_current_buffer and our
d916 3
a918 3
			yy_n_chars = yy_current_buffer->yy_n_chars;
			yy_current_buffer->yy_input_file = yyin;
			yy_current_buffer->yy_buffer_status = YY_BUFFER_NORMAL;
d928 1
a928 1
		if ( yy_c_buf_p <= &yy_current_buffer->yy_ch_buf[yy_n_chars] )
d932 1
a932 1
			yy_c_buf_p = yytext_ptr + yy_amount_of_matched_text;
d934 1
a934 1
			yy_current_state = yy_get_previous_state();
d947 1
a947 1
			yy_bp = yytext_ptr + YY_MORE_ADJ;
d952 1
a952 1
				yy_cp = ++yy_c_buf_p;
d959 1
a959 1
				yy_cp = yy_c_buf_p;
d964 1
a964 1
		else switch ( yy_get_next_buffer() )
d968 1
a968 1
				yy_did_buffer_switch_on_eof = 0;
d970 1
a970 1
				if ( yywrap() )
d981 1
a981 1
					yy_c_buf_p = yytext_ptr + YY_MORE_ADJ;
d989 1
a989 1
					if ( ! yy_did_buffer_switch_on_eof )
d996 2
a997 2
				yy_c_buf_p =
					yytext_ptr + yy_amount_of_matched_text;
d999 1
a999 1
				yy_current_state = yy_get_previous_state();
d1001 2
a1002 2
				yy_cp = yy_c_buf_p;
				yy_bp = yytext_ptr + YY_MORE_ADJ;
d1006 2
a1007 2
				yy_c_buf_p =
				&yy_current_buffer->yy_ch_buf[yy_n_chars];
d1009 1
a1009 1
				yy_current_state = yy_get_previous_state();
d1011 2
a1012 2
				yy_cp = yy_c_buf_p;
				yy_bp = yytext_ptr + YY_MORE_ADJ;
d1023 1
a1023 2
	} /* end of yylex */

d1032 4
a1035 5

static int yy_get_next_buffer()
	{
	register char *dest = yy_current_buffer->yy_ch_buf;
	register char *source = yytext_ptr;
d1039 1
a1039 1
	if ( yy_c_buf_p > &yy_current_buffer->yy_ch_buf[yy_n_chars + 1] )
d1043 1
a1043 1
	if ( yy_current_buffer->yy_fill_buffer == 0 )
d1045 1
a1045 1
		if ( yy_c_buf_p - yytext_ptr - YY_MORE_ADJ == 1 )
d1065 1
a1065 1
	number_to_move = (int) (yy_c_buf_p - yytext_ptr) - 1;
d1070 1
a1070 1
	if ( yy_current_buffer->yy_buffer_status == YY_BUFFER_EOF_PENDING )
d1074 1
a1074 1
		yy_current_buffer->yy_n_chars = yy_n_chars = 0;
d1078 2
a1079 2
		int num_to_read =
			yy_current_buffer->yy_buf_size - number_to_move - 1;
a1082 4
#ifdef YY_USES_REJECT
			YY_FATAL_ERROR(
"input buffer overflow, can't enlarge buffer because scanner uses REJECT" );
#else
d1085 1
a1085 1
			YY_BUFFER_STATE b = yy_current_buffer;
d1088 1
a1088 1
				(int) (yy_c_buf_p - b->yy_ch_buf);
d1101 1
a1101 2
					yy_flex_realloc( (void *) b->yy_ch_buf,
							 b->yy_buf_size + 2 );
d1111 1
a1111 1
			yy_c_buf_p = &b->yy_ch_buf[yy_c_buf_p_offset];
d1113 1
a1113 1
			num_to_read = yy_current_buffer->yy_buf_size -
d1115 1
a1115 1
#endif
d1122 2
a1123 2
		YY_INPUT( (&yy_current_buffer->yy_ch_buf[number_to_move]),
			yy_n_chars, num_to_read );
d1125 1
a1125 1
		yy_current_buffer->yy_n_chars = yy_n_chars;
d1128 1
a1128 1
	if ( yy_n_chars == 0 )
d1133 1
a1133 1
			yyrestart( yyin );
d1139 1
a1139 1
			yy_current_buffer->yy_buffer_status =
d1147 3
a1149 3
	yy_n_chars += number_to_move;
	yy_current_buffer->yy_ch_buf[yy_n_chars] = YY_END_OF_BUFFER_CHAR;
	yy_current_buffer->yy_ch_buf[yy_n_chars + 1] = YY_END_OF_BUFFER_CHAR;
d1151 1
a1151 1
	yytext_ptr = &yy_current_buffer->yy_ch_buf[0];
d1154 1
a1154 2
	}

d1158 2
a1159 2
static yy_state_type yy_get_previous_state()
	{
d1162 2
d1165 1
a1165 3
	yy_current_state = yy_start;

	for ( yy_cp = yytext_ptr + YY_MORE_ADJ; yy_cp < yy_c_buf_p; ++yy_cp )
d1170 2
a1171 2
			yy_last_accepting_state = yy_current_state;
			yy_last_accepting_cpos = yy_cp;
d1183 1
a1183 2
	}

d1190 2
a1191 8

#ifdef YY_USE_PROTOS
static yy_state_type yy_try_NUL_trans( yy_state_type yy_current_state )
#else
static yy_state_type yy_try_NUL_trans( yy_current_state )
yy_state_type yy_current_state;
#endif
	{
d1193 1
a1193 1
	register char *yy_cp = yy_c_buf_p;
d1198 2
a1199 2
		yy_last_accepting_state = yy_current_state;
		yy_last_accepting_cpos = yy_cp;
d1211 1
a1211 1
	}
d1213 5
a1217 11

#ifndef YY_NO_UNPUT
#ifdef YY_USE_PROTOS
static void yyunput( int c, register char *yy_bp )
#else
static void yyunput( c, yy_bp )
int c;
register char *yy_bp;
#endif
	{
	register char *yy_cp = yy_c_buf_p;
d1220 1
a1220 1
	*yy_cp = yy_hold_char;
d1222 1
a1222 1
	if ( yy_cp < yy_current_buffer->yy_ch_buf + 2 )
d1225 3
a1227 3
		register int number_to_move = yy_n_chars + 2;
		register char *dest = &yy_current_buffer->yy_ch_buf[
					yy_current_buffer->yy_buf_size + 2];
d1229 1
a1229 1
				&yy_current_buffer->yy_ch_buf[number_to_move];
d1231 1
a1231 1
		while ( source > yy_current_buffer->yy_ch_buf )
d1236 2
a1237 2
		yy_current_buffer->yy_n_chars =
			yy_n_chars = yy_current_buffer->yy_buf_size;
d1239 1
a1239 1
		if ( yy_cp < yy_current_buffer->yy_ch_buf + 2 )
d1245 4
d1250 1
a1250 7
	yytext_ptr = yy_bp;
	yy_hold_char = *yy_cp;
	yy_c_buf_p = yy_cp;
	}
#endif	/* ifndef YY_NO_UNPUT */


d1252 1
a1252 1
static int yyinput()
d1254 1
a1254 1
static int input()
d1256 2
a1257 1
	{
d1259 2
d1262 1
a1262 3
	*yy_c_buf_p = yy_hold_char;

	if ( *yy_c_buf_p == YY_END_OF_BUFFER_CHAR )
d1268 1
a1268 1
		if ( yy_c_buf_p < &yy_current_buffer->yy_ch_buf[yy_n_chars] )
d1270 1
a1270 1
			*yy_c_buf_p = '\0';
d1274 2
a1275 2
			int offset = yy_c_buf_p - yytext_ptr;
			++yy_c_buf_p;
d1277 1
a1277 1
			switch ( yy_get_next_buffer() )
d1291 1
a1291 1
					yyrestart( yyin );
d1293 1
a1293 1
					/* fall through */
d1297 1
a1297 1
					if ( yywrap() )
d1300 1
a1300 1
					if ( ! yy_did_buffer_switch_on_eof )
d1310 1
a1310 1
					yy_c_buf_p = yytext_ptr + offset;
d1316 3
a1318 4
	c = *(unsigned char *) yy_c_buf_p;	/* cast for 8-bit char's */
	*yy_c_buf_p = '\0';	/* preserve yytext */
	yy_hold_char = *++yy_c_buf_p;

d1321 2
a1322 1
	}
d1324 12
a1335 13

#ifdef YY_USE_PROTOS
void yyrestart( FILE *input_file )
#else
void yyrestart( input_file )
FILE *input_file;
#endif
	{
	if ( ! yy_current_buffer )
		yy_current_buffer = yy_create_buffer( yyin, YY_BUF_SIZE );

	yy_init_buffer( yy_current_buffer, input_file );
	yy_load_buffer_state();
d1338 18
a1355 9

#ifdef YY_USE_PROTOS
void yy_switch_to_buffer( YY_BUFFER_STATE new_buffer )
#else
void yy_switch_to_buffer( new_buffer )
YY_BUFFER_STATE new_buffer;
#endif
	{
	if ( yy_current_buffer == new_buffer )
d1358 1
a1358 1
	if ( yy_current_buffer )
d1361 3
a1363 3
		*yy_c_buf_p = yy_hold_char;
		yy_current_buffer->yy_buf_pos = yy_c_buf_p;
		yy_current_buffer->yy_n_chars = yy_n_chars;
d1366 2
a1367 2
	yy_current_buffer = new_buffer;
	yy_load_buffer_state();
d1374 2
a1375 2
	yy_did_buffer_switch_on_eof = 1;
	}
d1377 16
a1392 22

#ifdef YY_USE_PROTOS
void yy_load_buffer_state( void )
#else
void yy_load_buffer_state()
#endif
	{
	yy_n_chars = yy_current_buffer->yy_n_chars;
	yytext_ptr = yy_c_buf_p = yy_current_buffer->yy_buf_pos;
	yyin = yy_current_buffer->yy_input_file;
	yy_hold_char = *yy_c_buf_p;
	}


#ifdef YY_USE_PROTOS
YY_BUFFER_STATE yy_create_buffer( FILE *file, int size )
#else
YY_BUFFER_STATE yy_create_buffer( file, size )
FILE *file;
int size;
#endif
	{
d1394 2
a1395 2

	b = (YY_BUFFER_STATE) yy_flex_alloc( sizeof( struct yy_buffer_state ) );
d1404 1
a1404 1
	b->yy_ch_buf = (char *) yy_flex_alloc( b->yy_buf_size + 2 );
d1410 1
a1410 1
	yy_init_buffer( b, file );
d1413 1
a1413 1
	}
d1415 7
a1421 8

#ifdef YY_USE_PROTOS
void yy_delete_buffer( YY_BUFFER_STATE b )
#else
void yy_delete_buffer( b )
YY_BUFFER_STATE b;
#endif
	{
d1425 2
a1426 2
	if ( b == yy_current_buffer )
		yy_current_buffer = (YY_BUFFER_STATE) 0;
d1429 1
a1429 1
		yy_flex_free( (void *) b->yy_ch_buf );
d1431 2
a1432 2
	yy_flex_free( (void *) b );
	}
d1434 9
d1444 4
a1447 21
#ifndef _WIN32
#include <unistd.h>
#else
#ifndef YY_ALWAYS_INTERACTIVE
#ifndef YY_NEVER_INTERACTIVE
extern int isatty YY_PROTO(( int ));
#endif
#endif
#endif

#ifdef YY_USE_PROTOS
void yy_init_buffer( YY_BUFFER_STATE b, FILE *file )
#else
void yy_init_buffer( b, file )
YY_BUFFER_STATE b;
FILE *file;
#endif


	{
	yy_flush_buffer( b );
d1452 21
a1472 21
#if YY_ALWAYS_INTERACTIVE
	b->yy_is_interactive = 1;
#else
#if YY_NEVER_INTERACTIVE
	b->yy_is_interactive = 0;
#else
	b->yy_is_interactive = file ? (isatty( fileno(file) ) > 0) : 0;
#endif
#endif
	}


#ifdef YY_USE_PROTOS
void yy_flush_buffer( YY_BUFFER_STATE b )
#else
void yy_flush_buffer( b )
YY_BUFFER_STATE b;
#endif

	{
	if ( ! b )
d1489 53
a1541 2
	if ( b == yy_current_buffer )
		yy_load_buffer_state();
d1543 1
d1545 29
d1575 20
a1594 9
#ifndef YY_NO_SCAN_BUFFER
#ifdef YY_USE_PROTOS
YY_BUFFER_STATE yy_scan_buffer( char *base, yy_size_t size )
#else
YY_BUFFER_STATE yy_scan_buffer( base, size )
char *base;
yy_size_t size;
#endif
	{
d1596 1
a1596 1

d1603 1
a1603 1
	b = (YY_BUFFER_STATE) yy_flex_alloc( sizeof( struct yy_buffer_state ) );
d1617 1
a1617 1
	yy_switch_to_buffer( b );
d1620 1
a1620 2
	}
#endif
d1622 23
a1644 27

#ifndef YY_NO_SCAN_STRING
#ifdef YY_USE_PROTOS
YY_BUFFER_STATE yy_scan_string( yyconst char *yy_str )
#else
YY_BUFFER_STATE yy_scan_string( yy_str )
yyconst char *yy_str;
#endif
	{
	int len;
	for ( len = 0; yy_str[len]; ++len )
		;

	return yy_scan_bytes( yy_str, len );
	}
#endif


#ifndef YY_NO_SCAN_BYTES
#ifdef YY_USE_PROTOS
YY_BUFFER_STATE yy_scan_bytes( yyconst char *bytes, int len )
#else
YY_BUFFER_STATE yy_scan_bytes( bytes, len )
yyconst char *bytes;
int len;
#endif
	{
d1649 1
a1649 1

d1652 1
a1652 1
	buf = (char *) yy_flex_alloc( n );
d1661 1
a1661 1
	b = yy_scan_buffer( buf, n );
d1671 1
a1671 2
	}
#endif
d1673 2
a1674 7

#ifndef YY_NO_PUSH_STATE
#ifdef YY_USE_PROTOS
static void yy_push_state( int new_state )
#else
static void yy_push_state( new_state )
int new_state;
a1675 4
	{
	if ( yy_start_stack_ptr >= yy_start_stack_depth )
		{
		yy_size_t new_size;
d1677 5
a1681 2
		yy_start_stack_depth += YY_START_STACK_INCR;
		new_size = yy_start_stack_depth * sizeof( int );
d1683 1
a1683 2
		if ( ! yy_start_stack )
			yy_start_stack = (int *) yy_flex_alloc( new_size );
d1685 14
a1698 3
		else
			yy_start_stack = (int *) yy_flex_realloc(
					(void *) yy_start_stack, new_size );
d1700 1
a1700 4
		if ( ! yy_start_stack )
			YY_FATAL_ERROR(
			"out of memory expanding start-condition stack" );
		}
d1702 8
a1709 1
	yy_start_stack[yy_start_stack_ptr++] = YY_START;
d1711 7
a1717 3
	BEGIN(new_state);
	}
#endif
d1719 7
d1727 7
a1733 5
#ifndef YY_NO_POP_STATE
static void yy_pop_state()
	{
	if ( --yy_start_stack_ptr < 0 )
		YY_FATAL_ERROR( "start-condition stack underflow" );
d1735 3
a1737 3
	BEGIN(yy_start_stack[yy_start_stack_ptr]);
	}
#endif
d1739 4
d1744 20
a1763 6
#ifndef YY_NO_TOP_STATE
static int yy_top_state()
	{
	return yy_start_stack[yy_start_stack_ptr - 1];
	}
#endif
d1765 4
a1768 3
#ifndef YY_EXIT_FAILURE
#define YY_EXIT_FAILURE 2
#endif
d1770 4
a1773 10
#ifdef YY_USE_PROTOS
static void yy_fatal_error( yyconst char msg[] )
#else
static void yy_fatal_error( msg )
char msg[];
#endif
	{
	(void) fprintf( stderr, "%s\n", msg );
	exit( YY_EXIT_FAILURE );
	}
d1775 4
d1780 14
d1795 2
a1796 1
/* Redefine yyless() so it works in section 3 code. */
d1798 3
a1800 15
#undef yyless
#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up yytext. */ \
		yytext[yyleng] = yy_hold_char; \
		yy_c_buf_p = yytext + n; \
		yy_hold_char = *yy_c_buf_p; \
		*yy_c_buf_p = '\0'; \
		yyleng = n; \
		} \
	while ( 0 )


/* Internal utility routines. */
d1803 2
a1804 9
#ifdef YY_USE_PROTOS
static void yy_flex_strncpy( char *s1, yyconst char *s2, int n )
#else
static void yy_flex_strncpy( s1, s2, n )
char *s1;
yyconst char *s2;
int n;
#endif
	{
d1806 1
a1806 1
	for ( i = 0; i < n; ++i )
d1808 1
a1808 1
	}
d1812 2
a1813 7
#ifdef YY_USE_PROTOS
static int yy_flex_strlen( yyconst char *s )
#else
static int yy_flex_strlen( s )
yyconst char *s;
#endif
	{
d1815 1
a1815 1
	for ( n = 0; s[n]; ++n )
d1819 1
a1819 1
	}
d1822 2
a1823 8

#ifdef YY_USE_PROTOS
static void *yy_flex_alloc( yy_size_t size )
#else
static void *yy_flex_alloc( size )
yy_size_t size;
#endif
	{
d1825 1
a1825 1
	}
d1827 2
a1828 8
#ifdef YY_USE_PROTOS
static void *yy_flex_realloc( void *ptr, yy_size_t size )
#else
static void *yy_flex_realloc( ptr, size )
void *ptr;
yy_size_t size;
#endif
	{
d1837 6
a1842 1
	}
d1844 1
a1844 9
#ifdef YY_USE_PROTOS
static void yy_flex_free( void *ptr )
#else
static void yy_flex_free( ptr )
void *ptr;
#endif
	{
	free( ptr );
	}
d1846 11
a1856 6
#if YY_MAIN
int main()
	{
	yylex();
	return 0;
	}
@


