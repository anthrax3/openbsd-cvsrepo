head	1.2;
access;
symbols
	BINUTILS_2_15:1.1.1.6
	BINUTILS-2_14:1.1.1.5
	binutils-2_11_2:1.1.1.4
	BINUTILS-2_10_1:1.1.1.3
	BINUTILS-2_10:1.1.1.3
	BINUTILS-2_8_1:1.1.1.2
	CYGNUS:1.1.1
	FSF_2_6:1.1.1.1
	FSF:1.1.1;
locks; strict;
comment	@ * @;


1.2
date	96.06.10.10.48.12;	author niklas;	state dead;
branches;
next	1.1;

1.1
date	96.01.08.11.03.56;	author niklas;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	96.01.08.11.03.56;	author niklas;	state Exp;
branches;
next	1.1.1.2;

1.1.1.2
date	97.05.29.09.15.34;	author niklas;	state Exp;
branches;
next	1.1.1.3;

1.1.1.3
date	2000.09.12.14.45.01;	author espie;	state Exp;
branches;
next	1.1.1.4;

1.1.1.4
date	2002.05.13.13.14.10;	author fgsch;	state Exp;
branches;
next	1.1.1.5;

1.1.1.5
date	2004.05.17.20.42.05;	author drahn;	state Exp;
branches;
next	1.1.1.6;

1.1.1.6
date	2004.11.02.20.22.01;	author miod;	state Exp;
branches;
next	;


desc
@@


1.2
log
@Bring Cygnus versions into the trunk, keeping our local patches
@
text
@
/*  A Bison parser, made from ./arparse.y with Bison version GNU Bison version 1.24
  */

#define YYBISON 1  /* Identify Bison output.  */

#define	NEWLINE	258
#define	VERBOSE	259
#define	FILENAME	260
#define	ADDLIB	261
#define	LIST	262
#define	ADDMOD	263
#define	CLEAR	264
#define	CREATE	265
#define	DELETE	266
#define	DIRECTORY	267
#define	END	268
#define	EXTRACT	269
#define	FULLDIR	270
#define	HELP	271
#define	QUIT	272
#define	REPLACE	273
#define	SAVE	274
#define	OPEN	275

#line 1 "./arparse.y"

/* arparse.y - Stange script language parser */

/*   Copyright (C) 1992 Free Software Foundation, Inc.

This file is part of GNU Binutils.

This program is free software; you can redistribute it and/or modify
it under the terms of the GNU General Public License as published by
the Free Software Foundation; either version 2 of the License, or
(at your option) any later version.

This program is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
GNU General Public License for more details.

You should have received a copy of the GNU General Public License
along with this program; if not, write to the Free Software
Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA 02111-1307, USA.  */


/* Contributed by Steve Chamberlain
   		  sac@@cygnus.com

*/
#define DONTDECLARE_MALLOC
#include "bfd.h"
#include <sysdep.h>
#include "arsup.h"
extern int verbose;

#line 34 "./arparse.y"
typedef union {
  char *name;
struct list *list ;

} YYSTYPE;

#ifndef YYLTYPE
typedef
  struct yyltype
    {
      int timestamp;
      int first_line;
      int first_column;
      int last_line;
      int last_column;
      char *text;
   }
  yyltype;

#define YYLTYPE yyltype
#endif

#include <stdio.h>

#ifndef __cplusplus
#ifndef __STDC__
#define const
#endif
#endif



#define	YYFINAL		53
#define	YYFLAG		-32768
#define	YYNTBASE	24

#define YYTRANSLATE(x) ((unsigned)(x) <= 275 ? yytranslate[x] : 45)

static const char yytranslate[] = {     0,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,    21,
    22,     2,     2,    23,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     1,     2,     3,     4,     5,
     6,     7,     8,     9,    10,    11,    12,    13,    14,    15,
    16,    17,    18,    19,    20
};

#if YYDEBUG != 0
static const short yyprhs[] = {     0,
     0,     1,     4,     7,     8,    11,    13,    15,    17,    19,
    21,    23,    25,    27,    29,    31,    33,    35,    37,    39,
    41,    42,    45,    48,    50,    53,    56,    58,    60,    63,
    66,    70,    75,    77,    78,    82,    83,    87,    88,    90,
    91
};

static const short yyrhs[] = {    -1,
    25,    26,     0,    26,    27,     0,     0,    28,     3,     0,
    36,     0,    37,     0,    44,     0,    39,     0,    38,     0,
    31,     0,    33,     0,    35,     0,    29,     0,    30,     0,
    32,     0,    34,     0,    13,     0,     1,     0,     5,     0,
     0,    14,    42,     0,    18,    42,     0,     9,     0,    11,
    42,     0,     8,    42,     0,     7,     0,    19,     0,    20,
     5,     0,    10,     5,     0,     6,     5,    41,     0,    12,
     5,    41,    40,     0,     5,     0,     0,    21,    42,    22,
     0,     0,    42,    43,     5,     0,     0,    23,     0,     0,
     4,     0
};

#endif

#if YYDEBUG != 0
static const short yyrline[] = { 0,
    64,    66,    68,    70,    73,    76,    78,    79,    80,    81,
    82,    83,    84,    85,    86,    87,    88,    89,    90,    91,
    92,    96,   101,   106,   111,   115,   120,   125,   132,   137,
   143,   147,   154,   157,   160,   163,   167,   174,   178,   180,
   184
};

static const char * const yytname[] = {   "$","error","$undefined.","NEWLINE",
"VERBOSE","FILENAME","ADDLIB","LIST","ADDMOD","CLEAR","CREATE","DELETE","DIRECTORY",
"END","EXTRACT","FULLDIR","HELP","QUIT","REPLACE","SAVE","OPEN","'('","')'",
"','","start","@@1","session","command_line","command","extract_command","replace_command",
"clear_command","delete_command","addmod_command","list_command","save_command",
"open_command","create_command","addlib_command","directory_command","optional_filename",
"modulelist","modulename","optcomma","verbose_command",""
};
#endif

static const short yyr1[] = {     0,
    25,    24,    26,    26,    27,    28,    28,    28,    28,    28,
    28,    28,    28,    28,    28,    28,    28,    28,    28,    28,
    28,    29,    30,    31,    32,    33,    34,    35,    36,    37,
    38,    39,    40,    40,    41,    41,    42,    42,    43,    43,
    44
};

static const short yyr2[] = {     0,
     0,     2,     2,     0,     2,     1,     1,     1,     1,     1,
     1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
     0,     2,     2,     1,     2,     2,     1,     1,     2,     2,
     3,     4,     1,     0,     3,     0,     3,     0,     1,     0,
     1
};

static const short yydefact[] = {     1,
     4,     0,    19,    41,    20,     0,    27,    38,    24,     0,
    38,     0,    18,    38,    38,    28,     0,     3,     0,    14,
    15,    11,    16,    12,    17,    13,     6,     7,    10,     9,
     8,    36,    26,    30,    25,    36,    22,    23,    29,     5,
    38,    31,    39,     0,    34,    40,    37,    33,    32,    35,
     0,     0,     0
};

static const short yydefgoto[] = {    51,
     1,     2,    18,    19,    20,    21,    22,    23,    24,    25,
    26,    27,    28,    29,    30,    49,    42,    33,    44,    31
};

static const short yypact[] = {-32768,
-32768,     5,-32768,-32768,-32768,    -4,-32768,-32768,-32768,     2,
-32768,    21,-32768,-32768,-32768,-32768,    22,-32768,    25,-32768,
-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,
-32768,     8,    -3,-32768,    -3,     8,    -3,    -3,-32768,-32768,
-32768,-32768,-32768,    26,    27,    -1,-32768,-32768,-32768,-32768,
    33,    34,-32768
};

static const short yypgoto[] = {-32768,
-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,
-32768,-32768,-32768,-32768,-32768,-32768,     0,   -11,-32768,-32768
};


#define	YYLAST		36


static const short yytable[] = {    35,
    32,   -40,    37,    38,    -2,     3,    34,   -21,     4,     5,
     6,     7,     8,     9,    10,    11,    12,    13,    14,    43,
    50,    43,    15,    16,    17,    36,    39,    40,    41,    46,
    47,    48,    52,    53,     0,    45
};

static const short yycheck[] = {    11,
     5,     5,    14,    15,     0,     1,     5,     3,     4,     5,
     6,     7,     8,     9,    10,    11,    12,    13,    14,    23,
    22,    23,    18,    19,    20,     5,     5,     3,    21,    41,
     5,     5,     0,     0,    -1,    36
};
/* -*-C-*-  Note some compilers choke on comments on `#line' lines.  */
#line 3 "/usr/unsupported/share/bison.simple"

/* Skeleton output parser for bison,
   Copyright (C) 1984, 1989, 1990 Free Software Foundation, Inc.

   This program is free software; you can redistribute it and/or modify
   it under the terms of the GNU General Public License as published by
   the Free Software Foundation; either version 2, or (at your option)
   any later version.

   This program is distributed in the hope that it will be useful,
   but WITHOUT ANY WARRANTY; without even the implied warranty of
   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
   GNU General Public License for more details.

   You should have received a copy of the GNU General Public License
   along with this program; if not, write to the Free Software
   Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.  */

/* As a special exception, when this file is copied by Bison into a
   Bison output file, you may use that output file without restriction.
   This special exception was added by the Free Software Foundation
   in version 1.24 of Bison.  */

#ifndef alloca
#ifdef __GNUC__
#define alloca __builtin_alloca
#else /* not GNU C.  */
#if (!defined (__STDC__) && defined (sparc)) || defined (__sparc__) || defined (__sparc) || defined (__sgi)
#include <alloca.h>
#else /* not sparc */
#if defined (MSDOS) && !defined (__TURBOC__)
#include <malloc.h>
#else /* not MSDOS, or __TURBOC__ */
#if defined(_AIX)
#include <malloc.h>
 #pragma alloca
#else /* not MSDOS, __TURBOC__, or _AIX */
#ifdef __hpux
#ifdef __cplusplus
extern "C" {
void *alloca (unsigned int);
};
#else /* not __cplusplus */
void *alloca ();
#endif /* not __cplusplus */
#endif /* __hpux */
#endif /* not _AIX */
#endif /* not MSDOS, or __TURBOC__ */
#endif /* not sparc.  */
#endif /* not GNU C.  */
#endif /* alloca not defined.  */

/* This is the parser code that is written into each bison parser
  when the %semantic_parser declaration is not specified in the grammar.
  It was written by Richard Stallman by simplifying the hairy parser
  used when %semantic_parser is specified.  */

/* Note: there must be only one dollar sign in this file.
   It is replaced by the list of actions, each action
   as one case of the switch.  */

#define yyerrok		(yyerrstatus = 0)
#define yyclearin	(yychar = YYEMPTY)
#define YYEMPTY		-2
#define YYEOF		0
#define YYACCEPT	return(0)
#define YYABORT 	return(1)
#define YYERROR		goto yyerrlab1
/* Like YYERROR except do call yyerror.
   This remains here temporarily to ease the
   transition to the new meaning of YYERROR, for GCC.
   Once GCC version 2 has supplanted version 1, this can go.  */
#define YYFAIL		goto yyerrlab
#define YYRECOVERING()  (!!yyerrstatus)
#define YYBACKUP(token, value) \
do								\
  if (yychar == YYEMPTY && yylen == 1)				\
    { yychar = (token), yylval = (value);			\
      yychar1 = YYTRANSLATE (yychar);				\
      YYPOPSTACK;						\
      goto yybackup;						\
    }								\
  else								\
    { yyerror ("syntax error: cannot back up"); YYERROR; }	\
while (0)

#define YYTERROR	1
#define YYERRCODE	256

#ifndef YYPURE
#define YYLEX		yylex()
#endif

#ifdef YYPURE
#ifdef YYLSP_NEEDED
#ifdef YYLEX_PARAM
#define YYLEX		yylex(&yylval, &yylloc, YYLEX_PARAM)
#else
#define YYLEX		yylex(&yylval, &yylloc)
#endif
#else /* not YYLSP_NEEDED */
#ifdef YYLEX_PARAM
#define YYLEX		yylex(&yylval, YYLEX_PARAM)
#else
#define YYLEX		yylex(&yylval)
#endif
#endif /* not YYLSP_NEEDED */
#endif

/* If nonreentrant, generate the variables here */

#ifndef YYPURE

int	yychar;			/*  the lookahead symbol		*/
YYSTYPE	yylval;			/*  the semantic value of the		*/
				/*  lookahead symbol			*/

#ifdef YYLSP_NEEDED
YYLTYPE yylloc;			/*  location data for the lookahead	*/
				/*  symbol				*/
#endif

int yynerrs;			/*  number of parse errors so far       */
#endif  /* not YYPURE */

#if YYDEBUG != 0
int yydebug;			/*  nonzero means print parse trace	*/
/* Since this is uninitialized, it does not stop multiple parsers
   from coexisting.  */
#endif

/*  YYINITDEPTH indicates the initial size of the parser's stacks	*/

#ifndef	YYINITDEPTH
#define YYINITDEPTH 200
#endif

/*  YYMAXDEPTH is the maximum size the stacks can grow to
    (effective only if the built-in stack extension method is used).  */

#if YYMAXDEPTH == 0
#undef YYMAXDEPTH
#endif

#ifndef YYMAXDEPTH
#define YYMAXDEPTH 10000
#endif

/* Prevent warning if -Wstrict-prototypes.  */
#ifdef __GNUC__
int yyparse (void);
#endif

#if __GNUC__ > 1		/* GNU C and GNU C++ define this.  */
#define __yy_memcpy(FROM,TO,COUNT)	__builtin_memcpy(TO,FROM,COUNT)
#else				/* not GNU C or C++ */
#ifndef __cplusplus

/* This is the most reliable way to avoid incompatibilities
   in available built-in functions on various systems.  */
static void
__yy_memcpy (from, to, count)
     char *from;
     char *to;
     int count;
{
  register char *f = from;
  register char *t = to;
  register int i = count;

  while (i-- > 0)
    *t++ = *f++;
}

#else /* __cplusplus */

/* This is the most reliable way to avoid incompatibilities
   in available built-in functions on various systems.  */
static void
__yy_memcpy (char *from, char *to, int count)
{
  register char *f = from;
  register char *t = to;
  register int i = count;

  while (i-- > 0)
    *t++ = *f++;
}

#endif
#endif

#line 192 "/usr/unsupported/share/bison.simple"

/* The user can define YYPARSE_PARAM as the name of an argument to be passed
   into yyparse.  The argument should have type void *.
   It should actually point to an object.
   Grammar actions can access the variable by casting it
   to the proper pointer type.  */

#ifdef YYPARSE_PARAM
#define YYPARSE_PARAM_DECL void *YYPARSE_PARAM;
#else
#define YYPARSE_PARAM
#define YYPARSE_PARAM_DECL
#endif

int
yyparse(YYPARSE_PARAM)
     YYPARSE_PARAM_DECL
{
  register int yystate;
  register int yyn;
  register short *yyssp;
  register YYSTYPE *yyvsp;
  int yyerrstatus;	/*  number of tokens to shift before error messages enabled */
  int yychar1 = 0;		/*  lookahead token as an internal (translated) token number */

  short	yyssa[YYINITDEPTH];	/*  the state stack			*/
  YYSTYPE yyvsa[YYINITDEPTH];	/*  the semantic value stack		*/

  short *yyss = yyssa;		/*  refer to the stacks thru separate pointers */
  YYSTYPE *yyvs = yyvsa;	/*  to allow yyoverflow to reallocate them elsewhere */

#ifdef YYLSP_NEEDED
  YYLTYPE yylsa[YYINITDEPTH];	/*  the location stack			*/
  YYLTYPE *yyls = yylsa;
  YYLTYPE *yylsp;

#define YYPOPSTACK   (yyvsp--, yyssp--, yylsp--)
#else
#define YYPOPSTACK   (yyvsp--, yyssp--)
#endif

  int yystacksize = YYINITDEPTH;

#ifdef YYPURE
  int yychar;
  YYSTYPE yylval;
  int yynerrs;
#ifdef YYLSP_NEEDED
  YYLTYPE yylloc;
#endif
#endif

  YYSTYPE yyval;		/*  the variable used to return		*/
				/*  semantic values from the action	*/
				/*  routines				*/

  int yylen;

#if YYDEBUG != 0
  if (yydebug)
    fprintf(stderr, "Starting parse\n");
#endif

  yystate = 0;
  yyerrstatus = 0;
  yynerrs = 0;
  yychar = YYEMPTY;		/* Cause a token to be read.  */

  /* Initialize stack pointers.
     Waste one element of value and location stack
     so that they stay on the same level as the state stack.
     The wasted elements are never initialized.  */

  yyssp = yyss - 1;
  yyvsp = yyvs;
#ifdef YYLSP_NEEDED
  yylsp = yyls;
#endif

/* Push a new state, which is found in  yystate  .  */
/* In all cases, when you get here, the value and location stacks
   have just been pushed. so pushing a state here evens the stacks.  */
yynewstate:

  *++yyssp = yystate;

  if (yyssp >= yyss + yystacksize - 1)
    {
      /* Give user a chance to reallocate the stack */
      /* Use copies of these so that the &'s don't force the real ones into memory. */
      YYSTYPE *yyvs1 = yyvs;
      short *yyss1 = yyss;
#ifdef YYLSP_NEEDED
      YYLTYPE *yyls1 = yyls;
#endif

      /* Get the current used size of the three stacks, in elements.  */
      int size = yyssp - yyss + 1;

#ifdef yyoverflow
      /* Each stack pointer address is followed by the size of
	 the data in use in that stack, in bytes.  */
#ifdef YYLSP_NEEDED
      /* This used to be a conditional around just the two extra args,
	 but that might be undefined if yyoverflow is a macro.  */
      yyoverflow("parser stack overflow",
		 &yyss1, size * sizeof (*yyssp),
		 &yyvs1, size * sizeof (*yyvsp),
		 &yyls1, size * sizeof (*yylsp),
		 &yystacksize);
#else
      yyoverflow("parser stack overflow",
		 &yyss1, size * sizeof (*yyssp),
		 &yyvs1, size * sizeof (*yyvsp),
		 &yystacksize);
#endif

      yyss = yyss1; yyvs = yyvs1;
#ifdef YYLSP_NEEDED
      yyls = yyls1;
#endif
#else /* no yyoverflow */
      /* Extend the stack our own way.  */
      if (yystacksize >= YYMAXDEPTH)
	{
	  yyerror("parser stack overflow");
	  return 2;
	}
      yystacksize *= 2;
      if (yystacksize > YYMAXDEPTH)
	yystacksize = YYMAXDEPTH;
      yyss = (short *) alloca (yystacksize * sizeof (*yyssp));
      __yy_memcpy ((char *)yyss1, (char *)yyss, size * sizeof (*yyssp));
      yyvs = (YYSTYPE *) alloca (yystacksize * sizeof (*yyvsp));
      __yy_memcpy ((char *)yyvs1, (char *)yyvs, size * sizeof (*yyvsp));
#ifdef YYLSP_NEEDED
      yyls = (YYLTYPE *) alloca (yystacksize * sizeof (*yylsp));
      __yy_memcpy ((char *)yyls1, (char *)yyls, size * sizeof (*yylsp));
#endif
#endif /* no yyoverflow */

      yyssp = yyss + size - 1;
      yyvsp = yyvs + size - 1;
#ifdef YYLSP_NEEDED
      yylsp = yyls + size - 1;
#endif

#if YYDEBUG != 0
      if (yydebug)
	fprintf(stderr, "Stack size increased to %d\n", yystacksize);
#endif

      if (yyssp >= yyss + yystacksize - 1)
	YYABORT;
    }

#if YYDEBUG != 0
  if (yydebug)
    fprintf(stderr, "Entering state %d\n", yystate);
#endif

  goto yybackup;
 yybackup:

/* Do appropriate processing given the current state.  */
/* Read a lookahead token if we need one and don't already have one.  */
/* yyresume: */

  /* First try to decide what to do without reference to lookahead token.  */

  yyn = yypact[yystate];
  if (yyn == YYFLAG)
    goto yydefault;

  /* Not known => get a lookahead token if don't already have one.  */

  /* yychar is either YYEMPTY or YYEOF
     or a valid token in external form.  */

  if (yychar == YYEMPTY)
    {
#if YYDEBUG != 0
      if (yydebug)
	fprintf(stderr, "Reading a token: ");
#endif
      yychar = YYLEX;
    }

  /* Convert token to internal form (in yychar1) for indexing tables with */

  if (yychar <= 0)		/* This means end of input. */
    {
      yychar1 = 0;
      yychar = YYEOF;		/* Don't call YYLEX any more */

#if YYDEBUG != 0
      if (yydebug)
	fprintf(stderr, "Now at end of input.\n");
#endif
    }
  else
    {
      yychar1 = YYTRANSLATE(yychar);

#if YYDEBUG != 0
      if (yydebug)
	{
	  fprintf (stderr, "Next token is %d (%s", yychar, yytname[yychar1]);
	  /* Give the individual parser a way to print the precise meaning
	     of a token, for further debugging info.  */
#ifdef YYPRINT
	  YYPRINT (stderr, yychar, yylval);
#endif
	  fprintf (stderr, ")\n");
	}
#endif
    }

  yyn += yychar1;
  if (yyn < 0 || yyn > YYLAST || yycheck[yyn] != yychar1)
    goto yydefault;

  yyn = yytable[yyn];

  /* yyn is what to do for this token type in this state.
     Negative => reduce, -yyn is rule number.
     Positive => shift, yyn is new state.
       New state is final state => don't bother to shift,
       just return success.
     0, or most negative number => error.  */

  if (yyn < 0)
    {
      if (yyn == YYFLAG)
	goto yyerrlab;
      yyn = -yyn;
      goto yyreduce;
    }
  else if (yyn == 0)
    goto yyerrlab;

  if (yyn == YYFINAL)
    YYACCEPT;

  /* Shift the lookahead token.  */

#if YYDEBUG != 0
  if (yydebug)
    fprintf(stderr, "Shifting token %d (%s), ", yychar, yytname[yychar1]);
#endif

  /* Discard the token being shifted unless it is eof.  */
  if (yychar != YYEOF)
    yychar = YYEMPTY;

  *++yyvsp = yylval;
#ifdef YYLSP_NEEDED
  *++yylsp = yylloc;
#endif

  /* count tokens shifted since error; after three, turn off error status.  */
  if (yyerrstatus) yyerrstatus--;

  yystate = yyn;
  goto yynewstate;

/* Do the default action for the current state.  */
yydefault:

  yyn = yydefact[yystate];
  if (yyn == 0)
    goto yyerrlab;

/* Do a reduction.  yyn is the number of a rule to reduce with.  */
yyreduce:
  yylen = yyr2[yyn];
  if (yylen > 0)
    yyval = yyvsp[1-yylen]; /* implement default value of the action */

#if YYDEBUG != 0
  if (yydebug)
    {
      int i;

      fprintf (stderr, "Reducing via rule %d (line %d), ",
	       yyn, yyrline[yyn]);

      /* Print the symbols being reduced, and their result.  */
      for (i = yyprhs[yyn]; yyrhs[i] > 0; i++)
	fprintf (stderr, "%s ", yytname[yyrhs[i]]);
      fprintf (stderr, " -> %s\n", yytname[yyr1[yyn]]);
    }
#endif


  switch (yyn) {

case 1:
#line 65 "./arparse.y"
{ prompt(); ;
    break;}
case 5:
#line 74 "./arparse.y"
{ prompt(); ;
    break;}
case 18:
#line 89 "./arparse.y"
{ ar_end(); return 0; ;
    break;}
case 20:
#line 91 "./arparse.y"
{ yyerror("foo"); ;
    break;}
case 22:
#line 98 "./arparse.y"
{ ar_extract(yyvsp[0].list); ;
    break;}
case 23:
#line 103 "./arparse.y"
{ ar_replace(yyvsp[0].list); ;
    break;}
case 24:
#line 108 "./arparse.y"
{ ar_clear(); ;
    break;}
case 25:
#line 113 "./arparse.y"
{ ar_delete(yyvsp[0].list); ;
    break;}
case 26:
#line 117 "./arparse.y"
{ ar_addmod(yyvsp[0].list); ;
    break;}
case 27:
#line 122 "./arparse.y"
{ ar_list(); ;
    break;}
case 28:
#line 127 "./arparse.y"
{ ar_save(); ;
    break;}
case 29:
#line 134 "./arparse.y"
{ ar_open(yyvsp[0].name,0); ;
    break;}
case 30:
#line 139 "./arparse.y"
{ ar_open(yyvsp[0].name,1); ;
    break;}
case 31:
#line 145 "./arparse.y"
{ ar_addlib(yyvsp[-1].name,yyvsp[0].list); ;
    break;}
case 32:
#line 149 "./arparse.y"
{ ar_directory(yyvsp[-2].name, yyvsp[-1].list, yyvsp[0].name); ;
    break;}
case 33:
#line 156 "./arparse.y"
{ yyval.name = yyvsp[0].name; ;
    break;}
case 34:
#line 157 "./arparse.y"
{ yyval.name = 0; ;
    break;}
case 35:
#line 162 "./arparse.y"
{ yyval.list = yyvsp[-1].list; ;
    break;}
case 36:
#line 164 "./arparse.y"
{ yyval.list = 0; ;
    break;}
case 37:
#line 169 "./arparse.y"
{ 	struct list *n  = (struct list *) malloc(sizeof(struct list));
			n->next = yyvsp[-2].list; 
			n->name = yyvsp[0].name;
			yyval.list = n;
		 ;
    break;}
case 38:
#line 174 "./arparse.y"
{ yyval.list = 0; ;
    break;}
case 41:
#line 186 "./arparse.y"
{ verbose = !verbose; ;
    break;}
}
   /* the action file gets copied in in place of this dollarsign */
#line 487 "/usr/unsupported/share/bison.simple"

  yyvsp -= yylen;
  yyssp -= yylen;
#ifdef YYLSP_NEEDED
  yylsp -= yylen;
#endif

#if YYDEBUG != 0
  if (yydebug)
    {
      short *ssp1 = yyss - 1;
      fprintf (stderr, "state stack now");
      while (ssp1 != yyssp)
	fprintf (stderr, " %d", *++ssp1);
      fprintf (stderr, "\n");
    }
#endif

  *++yyvsp = yyval;

#ifdef YYLSP_NEEDED
  yylsp++;
  if (yylen == 0)
    {
      yylsp->first_line = yylloc.first_line;
      yylsp->first_column = yylloc.first_column;
      yylsp->last_line = (yylsp-1)->last_line;
      yylsp->last_column = (yylsp-1)->last_column;
      yylsp->text = 0;
    }
  else
    {
      yylsp->last_line = (yylsp+yylen-1)->last_line;
      yylsp->last_column = (yylsp+yylen-1)->last_column;
    }
#endif

  /* Now "shift" the result of the reduction.
     Determine what state that goes to,
     based on the state we popped back to
     and the rule number reduced by.  */

  yyn = yyr1[yyn];

  yystate = yypgoto[yyn - YYNTBASE] + *yyssp;
  if (yystate >= 0 && yystate <= YYLAST && yycheck[yystate] == *yyssp)
    yystate = yytable[yystate];
  else
    yystate = yydefgoto[yyn - YYNTBASE];

  goto yynewstate;

yyerrlab:   /* here on detecting error */

  if (! yyerrstatus)
    /* If not already recovering from an error, report this error.  */
    {
      ++yynerrs;

#ifdef YYERROR_VERBOSE
      yyn = yypact[yystate];

      if (yyn > YYFLAG && yyn < YYLAST)
	{
	  int size = 0;
	  char *msg;
	  int x, count;

	  count = 0;
	  /* Start X at -yyn if nec to avoid negative indexes in yycheck.  */
	  for (x = (yyn < 0 ? -yyn : 0);
	       x < (sizeof(yytname) / sizeof(char *)); x++)
	    if (yycheck[x + yyn] == x)
	      size += strlen(yytname[x]) + 15, count++;
	  msg = (char *) malloc(size + 15);
	  if (msg != 0)
	    {
	      strcpy(msg, "parse error");

	      if (count < 5)
		{
		  count = 0;
		  for (x = (yyn < 0 ? -yyn : 0);
		       x < (sizeof(yytname) / sizeof(char *)); x++)
		    if (yycheck[x + yyn] == x)
		      {
			strcat(msg, count == 0 ? ", expecting `" : " or `");
			strcat(msg, yytname[x]);
			strcat(msg, "'");
			count++;
		      }
		}
	      yyerror(msg);
	      free(msg);
	    }
	  else
	    yyerror ("parse error; also virtual memory exceeded");
	}
      else
#endif /* YYERROR_VERBOSE */
	yyerror("parse error");
    }

  goto yyerrlab1;
yyerrlab1:   /* here on error raised explicitly by an action */

  if (yyerrstatus == 3)
    {
      /* if just tried and failed to reuse lookahead token after an error, discard it.  */

      /* return failure if at end of input */
      if (yychar == YYEOF)
	YYABORT;

#if YYDEBUG != 0
      if (yydebug)
	fprintf(stderr, "Discarding token %d (%s).\n", yychar, yytname[yychar1]);
#endif

      yychar = YYEMPTY;
    }

  /* Else will try to reuse lookahead token
     after shifting the error token.  */

  yyerrstatus = 3;		/* Each real token shifted decrements this */

  goto yyerrhandle;

yyerrdefault:  /* current state does not do anything special for the error token. */

#if 0
  /* This is wrong; only states that explicitly want error tokens
     should shift them.  */
  yyn = yydefact[yystate];  /* If its default is to accept any token, ok.  Otherwise pop it.*/
  if (yyn) goto yydefault;
#endif

yyerrpop:   /* pop the current state because it cannot handle the error token */

  if (yyssp == yyss) YYABORT;
  yyvsp--;
  yystate = *--yyssp;
#ifdef YYLSP_NEEDED
  yylsp--;
#endif

#if YYDEBUG != 0
  if (yydebug)
    {
      short *ssp1 = yyss - 1;
      fprintf (stderr, "Error: state stack now");
      while (ssp1 != yyssp)
	fprintf (stderr, " %d", *++ssp1);
      fprintf (stderr, "\n");
    }
#endif

yyerrhandle:

  yyn = yypact[yystate];
  if (yyn == YYFLAG)
    goto yyerrdefault;

  yyn += YYTERROR;
  if (yyn < 0 || yyn > YYLAST || yycheck[yyn] != YYTERROR)
    goto yyerrdefault;

  yyn = yytable[yyn];
  if (yyn < 0)
    {
      if (yyn == YYFLAG)
	goto yyerrpop;
      yyn = -yyn;
      goto yyreduce;
    }
  else if (yyn == 0)
    goto yyerrpop;

  if (yyn == YYFINAL)
    YYACCEPT;

#if YYDEBUG != 0
  if (yydebug)
    fprintf(stderr, "Shifting error token, ");
#endif

  *++yyvsp = yylval;
#ifdef YYLSP_NEEDED
  *++yylsp = yylloc;
#endif

  yystate = yyn;
  goto yynewstate;
}
#line 190 "./arparse.y"



int
yyerror(x)
char *x;
{
  extern int linenumber;
  printf("Synax error in archive script, line %d\n", linenumber + 1);
  return 0;
}
@


1.1
log
@Initial revision
@
text
@@


1.1.1.1
log
@Initial GNU binutils 2.6 import
@
text
@@


1.1.1.2
log
@Import of binutils-2.8.1 from Cygnus/FSF
@
text
@d30 1
a30 1
/*   Copyright (C) 1992, 93, 95, 1997 Free Software Foundation, Inc.
d55 1
a55 1
#include "bucomm.h"
a57 1
static int yyerror PARAMS ((const char *));
d59 1
a59 1
#line 35 "./arparse.y"
d155 5
a159 5
    65,    67,    69,    71,    74,    77,    79,    80,    81,    82,
    83,    84,    85,    86,    87,    88,    89,    90,    91,    92,
    93,    97,   102,   107,   112,   116,   121,   126,   133,   138,
   144,   148,   155,   158,   161,   164,   168,   175,   179,   181,
   185
d726 1
a726 1
#line 66 "./arparse.y"
d730 1
a730 1
#line 75 "./arparse.y"
d734 1
a734 1
#line 90 "./arparse.y"
d738 1
a738 1
#line 92 "./arparse.y"
d742 1
a742 1
#line 99 "./arparse.y"
d746 1
a746 1
#line 104 "./arparse.y"
d750 1
a750 1
#line 109 "./arparse.y"
d754 1
a754 1
#line 114 "./arparse.y"
d758 1
a758 1
#line 118 "./arparse.y"
d762 1
a762 1
#line 123 "./arparse.y"
d766 1
a766 1
#line 128 "./arparse.y"
d770 1
a770 1
#line 135 "./arparse.y"
d774 1
a774 1
#line 140 "./arparse.y"
d778 1
a778 1
#line 146 "./arparse.y"
d782 1
a782 1
#line 150 "./arparse.y"
d786 1
a786 1
#line 157 "./arparse.y"
d790 1
a790 1
#line 158 "./arparse.y"
d794 1
a794 1
#line 163 "./arparse.y"
d798 1
a798 1
#line 165 "./arparse.y"
d802 1
a802 1
#line 170 "./arparse.y"
d810 1
a810 1
#line 175 "./arparse.y"
d814 1
a814 1
#line 187 "./arparse.y"
d1015 2
a1016 1
#line 191 "./arparse.y"
d1019 3
a1021 3
static int
yyerror (x)
     const char *x;
d1024 1
a1024 2

  printf ("Syntax error in archive script, line %d\n", linenumber + 1);
@


1.1.1.3
log
@Import binutils-2.10
- only the binutils package (no gdb here)
- don't import libiberty and texinfo, they are elsewhere
- remove all .info* generated files
@
text
@d2 2
a3 2
/*  A Bison parser, made from arparse.y
    by GNU Bison version 1.28  */
d7 18
a24 18
#define	NEWLINE	257
#define	VERBOSE	258
#define	FILENAME	259
#define	ADDLIB	260
#define	LIST	261
#define	ADDMOD	262
#define	CLEAR	263
#define	CREATE	264
#define	DELETE	265
#define	DIRECTORY	266
#define	END	267
#define	EXTRACT	268
#define	FULLDIR	269
#define	HELP	270
#define	QUIT	271
#define	REPLACE	272
#define	SAVE	273
#define	OPEN	274
d26 1
a26 1
#line 1 "arparse.y"
d30 1
a30 1
/*   Copyright (C) 1992, 93, 95, 97, 98, 1999 Free Software Foundation, Inc.
a57 1
extern int yylex PARAMS ((void));
d60 1
a60 1
#line 36 "arparse.y"
d66 17
d97 1
a97 1
#define YYTRANSLATE(x) ((unsigned)(x) <= 274 ? yytranslate[x] : 45)
d125 3
a127 3
     2,     2,     2,     2,     2,     1,     3,     4,     5,     6,
     7,     8,     9,    10,    11,    12,    13,    14,    15,    16,
    17,    18,    19,    20
d156 5
a160 5
    66,    68,    70,    72,    75,    78,    80,    81,    82,    83,
    84,    85,    86,    87,    88,    89,    90,    91,    92,    93,
    94,    98,   103,   108,   113,   117,   122,   127,   134,   139,
   145,   149,   156,   159,   162,   165,   169,   176,   180,   182,
   186
a161 4
#endif


#if YYDEBUG != 0 || defined (YYERROR_VERBOSE)
d169 1
a169 1
"modulelist","modulename","optcomma","verbose_command", NULL
d235 1
a235 2
#line 3 "/usr/share/misc/bison.simple"
/* This file comes from bison-1.28.  */
d252 1
a252 2
   Foundation, Inc., 59 Temple Place - Suite 330,
   Boston, MA 02111-1307, USA.  */
d259 1
a259 9
/* This is the parser code that is written into each bison parser
  when the %semantic_parser declaration is not specified in the grammar.
  It was written by Richard Stallman by simplifying the hairy parser
  used when %semantic_parser is specified.  */

#ifndef YYSTACK_USE_ALLOCA
#ifdef alloca
#define YYSTACK_USE_ALLOCA
#else /* alloca not defined */
a260 1
#define YYSTACK_USE_ALLOCA
d263 1
a263 2
#if (!defined (__STDC__) && defined (sparc)) || defined (__sparc__) || defined (__sparc) || defined (__sgi) || (defined (__sun) && defined (__i386))
#define YYSTACK_USE_ALLOCA
d266 1
a266 6
/* We think this test detects Watcom and Microsoft C.  */
/* This used to test MSDOS, but that is a bad idea
   since that symbol is in the user namespace.  */
#if (defined (_MSDOS) || defined (_MSDOS_)) && !defined (__TURBOC__)
#if 0 /* No need for malloc.h, which pollutes the namespace;
	 instead, just don't use alloca.  */
a267 1
#endif
d270 1
a270 3
/* I don't know what this was needed for, but it pollutes the namespace.
   So I turned it off.   rms, 2 May 1997.  */
/* #include <malloc.h>  */
d272 9
a280 7
#define YYSTACK_USE_ALLOCA
#else /* not MSDOS, or __TURBOC__, or _AIX */
#if 0
#ifdef __hpux /* haible@@ilog.fr says this works for HPUX 9.05 and up,
		 and on HPUX 10.  Eventually we can turn this on.  */
#define YYSTACK_USE_ALLOCA
#define alloca __builtin_alloca
a281 1
#endif
d284 3
a286 4
#endif /* not sparc */
#endif /* not GNU C */
#endif /* alloca not defined */
#endif /* YYSTACK_USE_ALLOCA not defined */
d288 4
a291 5
#ifdef YYSTACK_USE_ALLOCA
#define YYSTACK_ALLOC alloca
#else
#define YYSTACK_ALLOC malloc
#endif
d301 2
a302 2
#define YYACCEPT	goto yyacceptlab
#define YYABORT 	goto yyabortlab
d383 5
a388 5
/* Define __yy_memcpy.  Note that the size argument
   should be passed with type unsigned int, because that is what the non-GCC
   definitions require.  With GCC, __builtin_memcpy takes an arg
   of type size_t, but it can handle unsigned int.  */

d390 1
a390 1
#define __yy_memcpy(TO,FROM,COUNT)	__builtin_memcpy(TO,FROM,COUNT)
d397 2
a398 1
__yy_memcpy (to, from, count)
d400 1
a400 2
     char *from;
     unsigned int count;
d415 1
a415 1
__yy_memcpy (char *to, char *from, unsigned int count)
d417 1
a418 1
  register char *f = from;
d428 1
a428 1
#line 217 "/usr/share/misc/bison.simple"
a436 5
#ifdef __cplusplus
#define YYPARSE_PARAM_ARG void *YYPARSE_PARAM
#define YYPARSE_PARAM_DECL
#else /* not __cplusplus */
#define YYPARSE_PARAM_ARG YYPARSE_PARAM
d438 2
a439 3
#endif /* not __cplusplus */
#else /* not YYPARSE_PARAM */
#define YYPARSE_PARAM_ARG
a440 9
#endif /* not YYPARSE_PARAM */

/* Prevent warning if -Wstrict-prototypes.  */
#ifdef __GNUC__
#ifdef YYPARSE_PARAM
int yyparse (void *);
#else
int yyparse (void);
#endif
d444 1
a444 1
yyparse(YYPARSE_PARAM_ARG)
a470 1
  int yyfree_stacks = 0;
a554 8
	  if (yyfree_stacks)
	    {
	      free (yyss);
	      free (yyvs);
#ifdef YYLSP_NEEDED
	      free (yyls);
#endif
	    }
d560 4
a563 9
#ifndef YYSTACK_USE_ALLOCA
      yyfree_stacks = 1;
#endif
      yyss = (short *) YYSTACK_ALLOC (yystacksize * sizeof (*yyssp));
      __yy_memcpy ((char *)yyss, (char *)yyss1,
		   size * (unsigned int) sizeof (*yyssp));
      yyvs = (YYSTYPE *) YYSTACK_ALLOC (yystacksize * sizeof (*yyvsp));
      __yy_memcpy ((char *)yyvs, (char *)yyvs1,
		   size * (unsigned int) sizeof (*yyvsp));
d565 2
a566 3
      yyls = (YYLTYPE *) YYSTACK_ALLOC (yystacksize * sizeof (*yylsp));
      __yy_memcpy ((char *)yyls, (char *)yyls1,
		   size * (unsigned int) sizeof (*yylsp));
d727 1
a727 1
#line 67 "arparse.y"
d731 1
a731 1
#line 76 "arparse.y"
d735 1
a735 1
#line 91 "arparse.y"
d739 1
a739 1
#line 93 "arparse.y"
d743 1
a743 1
#line 100 "arparse.y"
d747 1
a747 1
#line 105 "arparse.y"
d751 1
a751 1
#line 110 "arparse.y"
d755 1
a755 1
#line 115 "arparse.y"
d759 1
a759 1
#line 119 "arparse.y"
d763 1
a763 1
#line 124 "arparse.y"
d767 1
a767 1
#line 129 "arparse.y"
d771 1
a771 1
#line 136 "arparse.y"
d775 1
a775 1
#line 141 "arparse.y"
d779 1
a779 1
#line 147 "arparse.y"
d783 1
a783 1
#line 151 "arparse.y"
d787 1
a787 1
#line 158 "arparse.y"
d791 1
a791 1
#line 159 "arparse.y"
d795 1
a795 1
#line 164 "arparse.y"
d799 1
a799 1
#line 166 "arparse.y"
d803 1
a803 1
#line 171 "arparse.y"
d811 1
a811 1
#line 176 "arparse.y"
d815 1
a815 1
#line 188 "arparse.y"
d820 1
a820 1
#line 543 "/usr/share/misc/bison.simple"
a1014 24

 yyacceptlab:
  /* YYACCEPT comes here.  */
  if (yyfree_stacks)
    {
      free (yyss);
      free (yyvs);
#ifdef YYLSP_NEEDED
      free (yyls);
#endif
    }
  return 0;

 yyabortlab:
  /* YYABORT comes here.  */
  if (yyfree_stacks)
    {
      free (yyss);
      free (yyvs);
#ifdef YYLSP_NEEDED
      free (yyls);
#endif
    }
  return 1;
d1016 1
a1016 1
#line 192 "arparse.y"
d1021 1
a1021 1
     const char *x ATTRIBUTE_UNUSED;
d1025 1
a1025 1
  printf (_("Syntax error in archive script, line %d\n"), linenumber + 1);
@


1.1.1.4
log
@Import binutils-2.11.2
- only the binutils package (no gdb here)
- don't import libiberty and texinfo, they are elsewhere
- remove all .info* generated files
@
text
@d30 1
a30 1
/*   Copyright 1992, 1993, 1995, 1997, 1999 Free Software Foundation, Inc.
d223 1
a223 1
#line 3 "/usr/share/bison/bison.simple"
d437 1
a437 1
#line 217 "/usr/share/bison/bison.simple"
d859 1
a859 1
#line 543 "/usr/share/bison/bison.simple"
@


1.1.1.5
log
@import binutils 2.14 (excluding testsuites, .info files, and .po files)
@
text
@d1 3
a3 2
/* A Bison parser, made from arparse.y
   by GNU bison 1.35.  */
d7 18
a24 18
# define	NEWLINE	257
# define	VERBOSE	258
# define	FILENAME	259
# define	ADDLIB	260
# define	LIST	261
# define	ADDMOD	262
# define	CLEAR	263
# define	CREATE	264
# define	DELETE	265
# define	DIRECTORY	266
# define	END	267
# define	EXTRACT	268
# define	FULLDIR	269
# define	HELP	270
# define	QUIT	271
# define	REPLACE	272
# define	SAVE	273
# define	OPEN	274
a61 1
#ifndef YYSTYPE
d66 6
a71 3
} yystype;
# define YYSTYPE yystype
# define YYSTYPE_IS_TRIVIAL 1
a72 2
#ifndef YYDEBUG
# define YYDEBUG 0
a80 1
/* YYTRANSLATE(YYLEX) -- Bison token number corresponding to YYLEX. */
d83 29
a111 31
/* YYTRANSLATE[YYLEX] -- Bison token number corresponding to YYLEX. */
static const char yytranslate[] =
{
       0,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
      21,    22,     2,     2,    23,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     1,     3,     4,     5,
       6,     7,     8,     9,    10,    11,    12,    13,    14,    15,
      16,    17,    18,    19,    20
d114 7
a120 8
#if YYDEBUG
static const short yyprhs[] =
{
       0,     0,     1,     4,     7,     8,    11,    13,    15,    17,
      19,    21,    23,    25,    27,    29,    31,    33,    35,    37,
      39,    41,    42,    45,    48,    50,    53,    56,    58,    60,
      63,    66,    70,    75,    77,    78,    82,    83,    87,    88,
      90,    91
d122 12
a133 12
static const short yyrhs[] =
{
      -1,    25,    26,     0,    26,    27,     0,     0,    28,     3,
       0,    36,     0,    37,     0,    44,     0,    39,     0,    38,
       0,    31,     0,    33,     0,    35,     0,    29,     0,    30,
       0,    32,     0,    34,     0,    13,     0,     1,     0,     5,
       0,     0,    14,    42,     0,    18,    42,     0,     9,     0,
      11,    42,     0,     8,    42,     0,     7,     0,    19,     0,
      20,     5,     0,    10,     5,     0,     6,     5,    41,     0,
      12,     5,    41,    40,     0,     5,     0,     0,    21,    42,
      22,     0,     0,    42,    43,     5,     0,     0,    23,     0,
       0,     4,     0
d138 7
a144 9
#if YYDEBUG
/* YYRLINE[YYN] -- source line where rule number YYN was defined. */
static const short yyrline[] =
{
       0,    66,    66,    70,    72,    75,    79,    81,    82,    83,
      84,    85,    86,    87,    88,    89,    90,    91,    92,    93,
      94,    95,    99,   104,   109,   114,   118,   123,   128,   135,
     140,   146,   150,   157,   160,   163,   166,   170,   177,   181,
     183,   187
d149 1
a149 1
#if (YYDEBUG) || defined YYERROR_VERBOSE
d151 7
a157 12
/* YYTNAME[TOKEN_NUM] -- String name of the token TOKEN_NUM. */
static const char *const yytname[] =
{
  "$", "error", "$undefined.", "NEWLINE", "VERBOSE", "FILENAME", "ADDLIB", 
  "LIST", "ADDMOD", "CLEAR", "CREATE", "DELETE", "DIRECTORY", "END", 
  "EXTRACT", "FULLDIR", "HELP", "QUIT", "REPLACE", "SAVE", "OPEN", "'('", 
  "')'", "','", "start", "@@1", "session", "command_line", "command", 
  "extract_command", "replace_command", "clear_command", "delete_command", 
  "addmod_command", "list_command", "save_command", "open_command", 
  "create_command", "addlib_command", "directory_command", 
  "optional_filename", "modulelist", "modulename", "optcomma", 
  "verbose_command", 0
d161 6
a166 8
/* YYR1[YYN] -- Symbol number of symbol that rule YYN derives. */
static const short yyr1[] =
{
       0,    25,    24,    26,    26,    27,    28,    28,    28,    28,
      28,    28,    28,    28,    28,    28,    28,    28,    28,    28,
      28,    28,    29,    30,    31,    32,    33,    34,    35,    36,
      37,    38,    39,    40,    40,    41,    41,    42,    42,    43,
      43,    44
d169 6
a174 8
/* YYR2[YYN] -- Number of symbols composing right hand side of rule YYN. */
static const short yyr2[] =
{
       0,     0,     2,     2,     0,     2,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     0,     2,     2,     1,     2,     2,     1,     1,     2,
       2,     3,     4,     1,     0,     3,     0,     3,     0,     1,
       0,     1
d177 7
a183 11
/* YYDEFACT[S] -- default rule to reduce with in state S when YYTABLE
   doesn't specify something else to do.  Zero means the default is an
   error. */
static const short yydefact[] =
{
       1,     4,     0,    19,    41,    20,     0,    27,    38,    24,
       0,    38,     0,    18,    38,    38,    28,     0,     3,     0,
      14,    15,    11,    16,    12,    17,    13,     6,     7,    10,
       9,     8,    36,    26,    30,    25,    36,    22,    23,    29,
       5,    38,    31,    39,     0,    34,    40,    37,    33,    32,
      35,     0,     0,     0
d186 3
a188 5
static const short yydefgoto[] =
{
      51,     1,     2,    18,    19,    20,    21,    22,    23,    24,
      25,    26,    27,    28,    29,    30,    49,    42,    33,    44,
      31
d191 7
a197 8
static const short yypact[] =
{
  -32768,-32768,     5,-32768,-32768,-32768,    -4,-32768,-32768,-32768,
       2,-32768,    21,-32768,-32768,-32768,-32768,    22,-32768,    25,
  -32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,
  -32768,-32768,     8,    -3,-32768,    -3,     8,    -3,    -3,-32768,
  -32768,-32768,-32768,-32768,    26,    27,    -1,-32768,-32768,-32768,
  -32768,    33,    34,-32768
d200 3
a202 5
static const short yypgoto[] =
{
  -32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,
  -32768,-32768,-32768,-32768,-32768,-32768,-32768,     0,   -11,-32768,
  -32768
d209 5
a213 6
static const short yytable[] =
{
      35,    32,   -40,    37,    38,    -2,     3,    34,   -21,     4,
       5,     6,     7,     8,     9,    10,    11,    12,    13,    14,
      43,    50,    43,    15,    16,    17,    36,    39,    40,    41,
      46,    47,    48,    52,    53,     0,    45
d216 5
a220 6
static const short yycheck[] =
{
      11,     5,     5,    14,    15,     0,     1,     5,     3,     4,
       5,     6,     7,     8,     9,    10,    11,    12,    13,    14,
      23,    22,    23,    18,    19,    20,     5,     5,     3,    21,
      41,     5,     5,     0,     0,    -1,    36
d223 2
a224 1
#line 3 "/usr/share/bison-1.35/bison.simple"
d227 1
a227 3

   Copyright (C) 1984, 1989, 1990, 2000, 2001, 2002 Free Software
   Foundation, Inc.
d249 46
a294 47
/* This is the parser code that is written into each bison parser when
   the %semantic_parser declaration is not specified in the grammar.
   It was written by Richard Stallman by simplifying the hairy parser
   used when %semantic_parser is specified.  */

/* All symbols defined below should begin with yy or YY, to avoid
   infringing on user name space.  This should be done even for local
   variables, as they might otherwise be expanded by user macros.
   There are some unavoidable exceptions within include files to
   define necessary library symbols; they are noted "INFRINGES ON
   USER NAME SPACE" below.  */

#if ! defined (yyoverflow) || defined (YYERROR_VERBOSE)

/* The parser invokes alloca or malloc; define the necessary symbols.  */

# if YYSTACK_USE_ALLOCA
#  define YYSTACK_ALLOC alloca
# else
#  ifndef YYSTACK_USE_ALLOCA
#   if defined (alloca) || defined (_ALLOCA_H)
#    define YYSTACK_ALLOC alloca
#   else
#    ifdef __GNUC__
#     define YYSTACK_ALLOC __builtin_alloca
#    endif
#   endif
#  endif
# endif

# ifdef YYSTACK_ALLOC
   /* Pacify GCC's `empty if-body' warning. */
#  define YYSTACK_FREE(Ptr) do { /* empty */; } while (0)
# else
#  if defined (__STDC__) || defined (__cplusplus)
#   include <stdlib.h> /* INFRINGES ON USER NAME SPACE */
#   define YYSIZE_T size_t
#  endif
#  define YYSTACK_ALLOC malloc
#  define YYSTACK_FREE free
# endif
#endif /* ! defined (yyoverflow) || defined (YYERROR_VERBOSE) */


#if (! defined (yyoverflow) \
     && (! defined (__cplusplus) \
	 || (YYLTYPE_IS_TRIVIAL && YYSTYPE_IS_TRIVIAL)))
d296 5
a300 12
/* A type that is properly aligned for any stack member.  */
union yyalloc
{
  short yyss;
  YYSTYPE yyvs;
# if YYLSP_NEEDED
  YYLTYPE yyls;
# endif
};

/* The size of the maximum gap between one aligned stack and the next.  */
# define YYSTACK_GAP_MAX (sizeof (union yyalloc) - 1)
d302 3
a304 64
/* The size of an array large to enough to hold all stacks, each with
   N elements.  */
# if YYLSP_NEEDED
#  define YYSTACK_BYTES(N) \
     ((N) * (sizeof (short) + sizeof (YYSTYPE) + sizeof (YYLTYPE))	\
      + 2 * YYSTACK_GAP_MAX)
# else
#  define YYSTACK_BYTES(N) \
     ((N) * (sizeof (short) + sizeof (YYSTYPE))				\
      + YYSTACK_GAP_MAX)
# endif

/* Copy COUNT objects from FROM to TO.  The source and destination do
   not overlap.  */
# ifndef YYCOPY
#  if 1 < __GNUC__
#   define YYCOPY(To, From, Count) \
      __builtin_memcpy (To, From, (Count) * sizeof (*(From)))
#  else
#   define YYCOPY(To, From, Count)		\
      do					\
	{					\
	  register YYSIZE_T yyi;		\
	  for (yyi = 0; yyi < (Count); yyi++)	\
	    (To)[yyi] = (From)[yyi];		\
	}					\
      while (0)
#  endif
# endif

/* Relocate STACK from its old location to the new one.  The
   local variables YYSIZE and YYSTACKSIZE give the old and new number of
   elements in the stack, and YYPTR gives the new location of the
   stack.  Advance YYPTR to a properly aligned location for the next
   stack.  */
# define YYSTACK_RELOCATE(Stack)					\
    do									\
      {									\
	YYSIZE_T yynewbytes;						\
	YYCOPY (&yyptr->Stack, Stack, yysize);				\
	Stack = &yyptr->Stack;						\
	yynewbytes = yystacksize * sizeof (*Stack) + YYSTACK_GAP_MAX;	\
	yyptr += yynewbytes / sizeof (*yyptr);				\
      }									\
    while (0)

#endif


#if ! defined (YYSIZE_T) && defined (__SIZE_TYPE__)
# define YYSIZE_T __SIZE_TYPE__
#endif
#if ! defined (YYSIZE_T) && defined (size_t)
# define YYSIZE_T size_t
#endif
#if ! defined (YYSIZE_T)
# if defined (__STDC__) || defined (__cplusplus)
#  include <stddef.h> /* INFRINGES ON USER NAME SPACE */
#  define YYSIZE_T size_t
# endif
#endif
#if ! defined (YYSIZE_T)
# define YYSIZE_T unsigned int
#endif
d313 3
a315 2
/* Like YYERROR except do call yyerror.  This remains here temporarily
   to ease the transition to the new meaning of YYERROR, for GCC.
d319 1
a319 1
#define YYBACKUP(Token, Value)					\
d322 1
a322 3
    {								\
      yychar = (Token);						\
      yylval = (Value);						\
d328 1
a328 4
    { 								\
      yyerror ("syntax error: cannot back up");			\
      YYERROR;							\
    }								\
d334 3
d338 23
a360 2
/* YYLLOC_DEFAULT -- Compute the default location (before the actions
   are run).
d362 3
a364 8
   When YYLLOC_DEFAULT is run, CURRENT is set the location of the
   first token.  By default, to implement support for ranges, extend
   its range to the last symbol.  */

#ifndef YYLLOC_DEFAULT
# define YYLLOC_DEFAULT(Current, Rhs, N)       	\
   Current.last_line   = Rhs[N].last_line;	\
   Current.last_column = Rhs[N].last_column;
d367 2
d370 7
a376 40
/* YYLEX -- calling `yylex' with the right arguments.  */

#if YYPURE
# if YYLSP_NEEDED
#  ifdef YYLEX_PARAM
#   define YYLEX		yylex (&yylval, &yylloc, YYLEX_PARAM)
#  else
#   define YYLEX		yylex (&yylval, &yylloc)
#  endif
# else /* !YYLSP_NEEDED */
#  ifdef YYLEX_PARAM
#   define YYLEX		yylex (&yylval, YYLEX_PARAM)
#  else
#   define YYLEX		yylex (&yylval)
#  endif
# endif /* !YYLSP_NEEDED */
#else /* !YYPURE */
# define YYLEX			yylex ()
#endif /* !YYPURE */


/* Enable debugging if requested.  */
#if YYDEBUG

# ifndef YYFPRINTF
#  include <stdio.h> /* INFRINGES ON USER NAME SPACE */
#  define YYFPRINTF fprintf
# endif

# define YYDPRINTF(Args)			\
do {						\
  if (yydebug)					\
    YYFPRINTF Args;				\
} while (0)
/* Nonzero means print parse trace.  It is left uninitialized so that
   multiple parsers can coexist.  */
int yydebug;
#else /* !YYDEBUG */
# define YYDPRINTF(Args)
#endif /* !YYDEBUG */
a377 1
/* YYINITDEPTH -- initial size of the parser's stacks.  */
d379 1
a379 1
# define YYINITDEPTH 200
d382 2
a383 6
/* YYMAXDEPTH -- maximum size the stacks can grow to (effective only
   if the built-in stack extension method is used).

   Do not make this value too large; the results are undefined if
   SIZE_MAX < YYSTACK_BYTES (YYMAXDEPTH)
   evaluated with infinite-precision integer arithmetic.  */
d386 1
a386 1
# undef YYMAXDEPTH
d390 1
a390 1
# define YYMAXDEPTH 10000
d393 17
a409 14
#ifdef YYERROR_VERBOSE

# ifndef yystrlen
#  if defined (__GLIBC__) && defined (_STRING_H)
#   define yystrlen strlen
#  else
/* Return the length of YYSTR.  */
static YYSIZE_T
#   if defined (__STDC__) || defined (__cplusplus)
yystrlen (const char *yystr)
#   else
yystrlen (yystr)
     const char *yystr;
#   endif
d411 3
a413 1
  register const char *yys = yystr;
d415 3
a417 2
  while (*yys++ != '\0')
    continue;
d419 1
a419 4
  return yys - yystr - 1;
}
#  endif
# endif
d421 4
a424 14
# ifndef yystpcpy
#  if defined (__GLIBC__) && defined (_STRING_H) && defined (_GNU_SOURCE)
#   define yystpcpy stpcpy
#  else
/* Copy YYSRC to YYDEST, returning the address of the terminating '\0' in
   YYDEST.  */
static char *
#   if defined (__STDC__) || defined (__cplusplus)
yystpcpy (char *yydest, const char *yysrc)
#   else
yystpcpy (yydest, yysrc)
     char *yydest;
     const char *yysrc;
#   endif
d426 3
a428 2
  register char *yyd = yydest;
  register const char *yys = yysrc;
d430 3
a432 2
  while ((*yyd++ = *yys++) != '\0')
    continue;
d434 1
a434 4
  return yyd - 1;
}
#  endif
# endif
d437 1
a437 2
#line 315 "/usr/share/bison-1.35/bison.simple"

d446 11
a456 11
# if defined (__STDC__) || defined (__cplusplus)
#  define YYPARSE_PARAM_ARG void *YYPARSE_PARAM
#  define YYPARSE_PARAM_DECL
# else
#  define YYPARSE_PARAM_ARG YYPARSE_PARAM
#  define YYPARSE_PARAM_DECL void *YYPARSE_PARAM;
# endif
#else /* !YYPARSE_PARAM */
# define YYPARSE_PARAM_ARG
# define YYPARSE_PARAM_DECL
#endif /* !YYPARSE_PARAM */
d460 1
a460 1
# ifdef YYPARSE_PARAM
d462 1
a462 1
# else
a463 1
# endif
a464 23

/* YY_DECL_VARIABLES -- depending whether we use a pure parser,
   variables are global, or local to YYPARSE.  */

#define YY_DECL_NON_LSP_VARIABLES			\
/* The lookahead symbol.  */				\
int yychar;						\
							\
/* The semantic value of the lookahead symbol. */	\
YYSTYPE yylval;						\
							\
/* Number of parse errors so far.  */			\
int yynerrs;

#if YYLSP_NEEDED
# define YY_DECL_VARIABLES			\
YY_DECL_NON_LSP_VARIABLES			\
						\
/* Location data for the lookahead symbol.  */	\
YYLTYPE yylloc;
#else
# define YY_DECL_VARIABLES			\
YY_DECL_NON_LSP_VARIABLES
a466 7

/* If nonreentrant, generate the variables here. */

#if !YYPURE
YY_DECL_VARIABLES
#endif  /* !YYPURE */

d468 1
a468 1
yyparse (YYPARSE_PARAM_ARG)
a470 5
  /* If reentrant, generate the variables here. */
#if YYPURE
  YY_DECL_VARIABLES
#endif  /* !YYPURE */

a472 17
  int yyresult;
  /* Number of tokens to shift before error messages enabled.  */
  int yyerrstatus;
  /* Lookahead token as an internal (translated) token number.  */
  int yychar1 = 0;

  /* Three stacks and their tools:
     `yyss': related to states,
     `yyvs': related to semantic values,
     `yyls': related to locations.

     Refer to the stacks thru separate pointers, to allow yyoverflow
     to reallocate them elsewhere.  */

  /* The state stack. */
  short	yyssa[YYINITDEPTH];
  short *yyss = yyssa;
d474 6
d481 2
a482 4
  /* The semantic value stack.  */
  YYSTYPE yyvsa[YYINITDEPTH];
  YYSTYPE *yyvs = yyvsa;
  register YYSTYPE *yyvsp;
d484 2
a485 3
#if YYLSP_NEEDED
  /* The location stack.  */
  YYLTYPE yylsa[YYINITDEPTH];
a487 1
#endif
d489 1
a489 2
#if YYLSP_NEEDED
# define YYPOPSTACK   (yyvsp--, yyssp--, yylsp--)
d491 1
a491 1
# define YYPOPSTACK   (yyvsp--, yyssp--)
d494 2
a495 1
  YYSIZE_T yystacksize = YYINITDEPTH;
d497 8
d506 3
a508 6
  /* The variables used to return semantic value and location from the
     action routines.  */
  YYSTYPE yyval;
#if YYLSP_NEEDED
  YYLTYPE yyloc;
#endif
a509 2
  /* When reducing, the number of symbols on the RHS of the reduced
     rule. */
d512 4
a515 1
  YYDPRINTF ((stderr, "Starting parse\n"));
d527 1
a527 1
  yyssp = yyss;
d529 1
a529 1
#if YYLSP_NEEDED
a531 1
  goto yysetstate;
d533 4
a536 8
/*------------------------------------------------------------.
| yynewstate -- Push a new state, which is found in yystate.  |
`------------------------------------------------------------*/
 yynewstate:
  /* In all cases, when you get here, the value and location stacks
     have just been pushed. so pushing a state here evens the stacks.
     */
  yyssp++;
d538 1
a538 2
 yysetstate:
  *yyssp = yystate;
d542 8
d551 1
a551 1
      YYSIZE_T yysize = yyssp - yyss + 1;
d554 21
a574 28
      {
	/* Give user a chance to reallocate the stack. Use copies of
	   these so that the &'s don't force the real ones into
	   memory.  */
	YYSTYPE *yyvs1 = yyvs;
	short *yyss1 = yyss;

	/* Each stack pointer address is followed by the size of the
	   data in use in that stack, in bytes.  */
# if YYLSP_NEEDED
	YYLTYPE *yyls1 = yyls;
	/* This used to be a conditional around just the two extra args,
	   but that might be undefined if yyoverflow is a macro.  */
	yyoverflow ("parser stack overflow",
		    &yyss1, yysize * sizeof (*yyssp),
		    &yyvs1, yysize * sizeof (*yyvsp),
		    &yyls1, yysize * sizeof (*yylsp),
		    &yystacksize);
	yyls = yyls1;
# else
	yyoverflow ("parser stack overflow",
		    &yyss1, yysize * sizeof (*yyssp),
		    &yyvs1, yysize * sizeof (*yyvsp),
		    &yystacksize);
# endif
	yyss = yyss1;
	yyvs = yyvs1;
      }
a575 3
# ifndef YYSTACK_RELOCATE
      goto yyoverflowlab;
# else
d578 12
a589 1
	goto yyoverflowlab;
d593 14
a606 17

      {
	short *yyss1 = yyss;
	union yyalloc *yyptr =
	  (union yyalloc *) YYSTACK_ALLOC (YYSTACK_BYTES (yystacksize));
	if (! yyptr)
	  goto yyoverflowlab;
	YYSTACK_RELOCATE (yyss);
	YYSTACK_RELOCATE (yyvs);
# if YYLSP_NEEDED
	YYSTACK_RELOCATE (yyls);
# endif
# undef YYSTACK_RELOCATE
	if (yyss1 != yyssa)
	  YYSTACK_FREE (yyss1);
      }
# endif
d609 4
a612 4
      yyssp = yyss + yysize - 1;
      yyvsp = yyvs + yysize - 1;
#if YYLSP_NEEDED
      yylsp = yyls + yysize - 1;
d615 4
a618 2
      YYDPRINTF ((stderr, "Stack size increased to %lu\n",
		  (unsigned long int) yystacksize));
d624 4
a627 1
  YYDPRINTF ((stderr, "Entering state %d\n", yystate));
d630 1
a630 6


/*-----------.
| yybackup.  |
`-----------*/
yybackup:
d649 4
a652 1
      YYDPRINTF ((stderr, "Reading a token: "));
d663 4
a666 1
      YYDPRINTF ((stderr, "Now at end of input.\n"));
d670 1
a670 1
      yychar1 = YYTRANSLATE (yychar);
d672 1
a672 3
#if YYDEBUG
     /* We have to keep this `#if YYDEBUG', since we use variables
	which are defined only if `YYDEBUG' is set.  */
d675 4
a678 5
	  YYFPRINTF (stderr, "Next token is %d (%s",
		     yychar, yytname[yychar1]);
	  /* Give the individual parser a way to print the precise
	     meaning of a token, for further debugging info.  */
# ifdef YYPRINT
d680 2
a681 2
# endif
	  YYFPRINTF (stderr, ")\n");
d713 5
a717 2
  YYDPRINTF ((stderr, "Shifting token %d (%s), ",
	      yychar, yytname[yychar1]));
d724 1
a724 1
#if YYLSP_NEEDED
d728 2
a729 4
  /* Count tokens shifted since error; after three, turn off error
     status.  */
  if (yyerrstatus)
    yyerrstatus--;
d734 2
a736 4
/*-----------------------------------------------------------.
| yydefault -- do the default action for the current state.  |
`-----------------------------------------------------------*/
yydefault:
a739 2
  goto yyreduce;

d741 1
a741 3
/*-----------------------------.
| yyreduce -- Do a reduction.  |
`-----------------------------*/
a742 1
  /* yyn is the number of a rule to reduce with.  */
d744 2
d747 1
a747 20
  /* If YYLEN is nonzero, implement the default value of the action:
     `$$ = $1'.

     Otherwise, the following line sets YYVAL to the semantic value of
     the lookahead token.  This behavior is undocumented and Bison
     users should not rely upon it.  Assigning to YYVAL
     unconditionally makes the parser a bit smaller, and it avoids a
     GCC warning that YYVAL may be used uninitialized.  */
  yyval = yyvsp[1-yylen];

#if YYLSP_NEEDED
  /* Similarly for the default location.  Let the user run additional
     commands if for instance locations are ranges.  */
  yyloc = yylsp[1-yylen];
  YYLLOC_DEFAULT (yyloc, (yylsp - yylen), yylen);
#endif

#if YYDEBUG
  /* We have to keep this `#if YYDEBUG', since we use variables which
     are defined only if `YYDEBUG' is set.  */
d750 1
a750 1
      int yyi;
d752 2
a753 2
      YYFPRINTF (stderr, "Reducing via rule %d (line %d), ",
		 yyn, yyrline[yyn]);
d756 3
a758 3
      for (yyi = yyprhs[yyn]; yyrhs[yyi] > 0; yyi++)
	YYFPRINTF (stderr, "%s ", yytname[yyrhs[yyi]]);
      YYFPRINTF (stderr, " -> %s\n", yytname[yyr1[yyn]]);
d762 1
d767 2
a768 2
{ prompt(); }
    break;
d771 2
a772 2
{ prompt(); }
    break;
d774 3
a776 3
#line 92 "arparse.y"
{ ar_end(); return 0; }
    break;
d778 3
a780 3
#line 94 "arparse.y"
{ yyerror("foo"); }
    break;
d782 3
a784 3
#line 101 "arparse.y"
{ ar_extract(yyvsp[0].list); }
    break;
d786 3
a788 3
#line 106 "arparse.y"
{ ar_replace(yyvsp[0].list); }
    break;
d790 3
a792 3
#line 111 "arparse.y"
{ ar_clear(); }
    break;
d794 3
a796 3
#line 116 "arparse.y"
{ ar_delete(yyvsp[0].list); }
    break;
d798 3
a800 3
#line 120 "arparse.y"
{ ar_addmod(yyvsp[0].list); }
    break;
d802 3
a804 3
#line 125 "arparse.y"
{ ar_list(); }
    break;
d806 3
a808 3
#line 130 "arparse.y"
{ ar_save(); }
    break;
d810 3
a812 3
#line 137 "arparse.y"
{ ar_open(yyvsp[0].name,0); }
    break;
d814 3
a816 3
#line 142 "arparse.y"
{ ar_open(yyvsp[0].name,1); }
    break;
d818 3
a820 3
#line 148 "arparse.y"
{ ar_addlib(yyvsp[-1].name,yyvsp[0].list); }
    break;
d822 3
a824 3
#line 152 "arparse.y"
{ ar_directory(yyvsp[-2].name, yyvsp[-1].list, yyvsp[0].name); }
    break;
d826 4
d831 2
a832 6
{ yyval.name = yyvsp[0].name; }
    break;
case 34:
#line 160 "arparse.y"
{ yyval.name = 0; }
    break;
d834 3
a836 3
#line 165 "arparse.y"
{ yyval.list = yyvsp[-1].list; }
    break;
d838 3
a840 3
#line 167 "arparse.y"
{ yyval.list = 0; }
    break;
d842 1
a842 1
#line 172 "arparse.y"
d847 2
a848 2
		 }
    break;
d850 3
a852 3
#line 177 "arparse.y"
{ yyval.list = 0; }
    break;
d854 3
a856 3
#line 189 "arparse.y"
{ verbose = !verbose; }
    break;
d858 2
a859 3

#line 705 "/usr/share/bison-1.35/bison.simple"

d863 1
a863 1
#if YYLSP_NEEDED
d867 1
a867 1
#if YYDEBUG
d870 5
a874 5
      short *yyssp1 = yyss - 1;
      YYFPRINTF (stderr, "state stack now");
      while (yyssp1 != yyssp)
	YYFPRINTF (stderr, " %d", *++yyssp1);
      YYFPRINTF (stderr, "\n");
d879 16
a894 2
#if YYLSP_NEEDED
  *++yylsp = yyloc;
d897 4
a900 3
  /* Now `shift' the result of the reduction.  Determine what state
     that goes to, based on the state we popped back to and the rule
     number reduced by.  */
d912 1
d914 2
a915 6
/*------------------------------------.
| yyerrlab -- here on detecting error |
`------------------------------------*/
yyerrlab:
  /* If not already recovering from an error, report this error.  */
  if (!yyerrstatus)
d924 12
a935 15
	  YYSIZE_T yysize = 0;
	  char *yymsg;
	  int yyx, yycount;

	  yycount = 0;
	  /* Start YYX at -YYN if negative to avoid negative indexes in
	     YYCHECK.  */
	  for (yyx = yyn < 0 ? -yyn : 0;
	       yyx < (int) (sizeof (yytname) / sizeof (char *)); yyx++)
	    if (yycheck[yyx + yyn] == yyx)
	      yysize += yystrlen (yytname[yyx]) + 15, yycount++;
	  yysize += yystrlen ("parse error, unexpected ") + 1;
	  yysize += yystrlen (yytname[YYTRANSLATE (yychar)]);
	  yymsg = (char *) YYSTACK_ALLOC (yysize);
	  if (yymsg != 0)
d937 1
a937 2
	      char *yyp = yystpcpy (yymsg, "parse error, unexpected ");
	      yyp = yystpcpy (yyp, yytname[YYTRANSLATE (yychar)]);
d939 1
a939 1
	      if (yycount < 5)
d941 4
a944 5
		  yycount = 0;
		  for (yyx = yyn < 0 ? -yyn : 0;
		       yyx < (int) (sizeof (yytname) / sizeof (char *));
		       yyx++)
		    if (yycheck[yyx + yyn] == yyx)
d946 4
a949 4
			const char *yyq = ! yycount ? ", expecting " : " or ";
			yyp = yystpcpy (yyp, yyq);
			yyp = yystpcpy (yyp, yytname[yyx]);
			yycount++;
d952 2
a953 2
	      yyerror (yymsg);
	      YYSTACK_FREE (yymsg);
d956 1
a956 1
	    yyerror ("parse error; also virtual memory exhausted");
d959 2
a960 2
#endif /* defined (YYERROR_VERBOSE) */
	yyerror ("parse error");
d962 1
d964 1
a965 5

/*--------------------------------------------------.
| yyerrlab1 -- error raised explicitly by an action |
`--------------------------------------------------*/
yyerrlab1:
d968 1
a968 2
      /* If just tried and failed to reuse lookahead token after an
	 error, discard it.  */
d973 6
a978 2
      YYDPRINTF ((stderr, "Discarding token %d (%s).\n",
		  yychar, yytname[yychar1]));
d982 2
a983 2
  /* Else will try to reuse lookahead token after shifting the error
     token.  */
d989 1
a990 5
/*-------------------------------------------------------------------.
| yyerrdefault -- current state does not do anything special for the |
| error token.                                                       |
`-------------------------------------------------------------------*/
yyerrdefault:
d994 2
a995 5

  /* If its default is to accept any token, ok.  Otherwise pop it.  */
  yyn = yydefact[yystate];
  if (yyn)
    goto yydefault;
d998 1
d1000 1
a1000 7
/*---------------------------------------------------------------.
| yyerrpop -- pop the current state because it cannot handle the |
| error token                                                    |
`---------------------------------------------------------------*/
yyerrpop:
  if (yyssp == yyss)
    YYABORT;
d1003 1
a1003 1
#if YYLSP_NEEDED
d1007 1
a1007 1
#if YYDEBUG
d1010 5
a1014 5
      short *yyssp1 = yyss - 1;
      YYFPRINTF (stderr, "Error: state stack now");
      while (yyssp1 != yyssp)
	YYFPRINTF (stderr, " %d", *++yyssp1);
      YYFPRINTF (stderr, "\n");
a1017 3
/*--------------.
| yyerrhandle.  |
`--------------*/
d1019 1
d1042 4
a1045 1
  YYDPRINTF ((stderr, "Shifting error token, "));
d1048 1
a1048 1
#if YYLSP_NEEDED
d1055 11
d1067 8
a1074 26
/*-------------------------------------.
| yyacceptlab -- YYACCEPT comes here.  |
`-------------------------------------*/
yyacceptlab:
  yyresult = 0;
  goto yyreturn;

/*-----------------------------------.
| yyabortlab -- YYABORT comes here.  |
`-----------------------------------*/
yyabortlab:
  yyresult = 1;
  goto yyreturn;

/*---------------------------------------------.
| yyoverflowab -- parser overflow comes here.  |
`---------------------------------------------*/
yyoverflowlab:
  yyerror ("parser stack overflow");
  yyresult = 2;
  /* Fall through.  */

yyreturn:
#ifndef yyoverflow
  if (yyss != yyssa)
    YYSTACK_FREE (yyss);
d1076 2
a1077 1
  return yyresult;
d1079 1
a1079 1
#line 193 "arparse.y"
@


1.1.1.6
log
@Binutils 2.15, with testsuites removed, and without gdb and libiberty.
@
text
@d29 1
a29 2
/*   Copyright 1992, 1993, 1995, 1997, 1999, 2003
     Free Software Foundation, Inc.
d57 2
a58 2
extern int yylex (void);
static int yyerror (const char *);
d60 1
a60 1
#line 37 "arparse.y"
d145 5
a149 5
       0,    67,    67,    71,    73,    76,    80,    82,    83,    84,
      85,    86,    87,    88,    89,    90,    91,    92,    93,    94,
      95,    96,   100,   105,   110,   115,   119,   124,   129,   136,
     141,   147,   151,   158,   161,   164,   167,   171,   178,   182,
     184,   188
d955 1
a955 1
#line 68 "arparse.y"
d959 1
a959 1
#line 77 "arparse.y"
d963 1
a963 1
#line 93 "arparse.y"
d967 1
a967 1
#line 95 "arparse.y"
d971 1
a971 1
#line 102 "arparse.y"
d975 1
a975 1
#line 107 "arparse.y"
d979 1
a979 1
#line 112 "arparse.y"
d983 1
a983 1
#line 117 "arparse.y"
d987 1
a987 1
#line 121 "arparse.y"
d991 1
a991 1
#line 126 "arparse.y"
d995 1
a995 1
#line 131 "arparse.y"
d999 1
a999 1
#line 138 "arparse.y"
d1003 1
a1003 1
#line 143 "arparse.y"
d1007 1
a1007 1
#line 149 "arparse.y"
d1011 1
a1011 1
#line 153 "arparse.y"
d1015 1
a1015 1
#line 160 "arparse.y"
d1019 1
a1019 1
#line 161 "arparse.y"
d1023 1
a1023 1
#line 166 "arparse.y"
d1027 1
a1027 1
#line 168 "arparse.y"
d1031 1
a1031 1
#line 173 "arparse.y"
d1039 1
a1039 1
#line 178 "arparse.y"
d1043 1
a1043 1
#line 190 "arparse.y"
d1279 1
a1279 1
#line 194 "arparse.y"
d1283 2
a1284 1
yyerror (const char *x ATTRIBUTE_UNUSED)
@


