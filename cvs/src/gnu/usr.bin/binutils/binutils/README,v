head	1.7;
access;
symbols
	OPENBSD_6_1_BASE:1.7
	OPENBSD_6_0:1.7.0.48
	OPENBSD_6_0_BASE:1.7
	OPENBSD_5_9:1.7.0.44
	OPENBSD_5_9_BASE:1.7
	OPENBSD_5_8:1.7.0.46
	OPENBSD_5_8_BASE:1.7
	OPENBSD_5_7:1.7.0.38
	OPENBSD_5_7_BASE:1.7
	OPENBSD_5_6:1.7.0.42
	OPENBSD_5_6_BASE:1.7
	OPENBSD_5_5:1.7.0.40
	OPENBSD_5_5_BASE:1.7
	OPENBSD_5_4:1.7.0.36
	OPENBSD_5_4_BASE:1.7
	OPENBSD_5_3:1.7.0.34
	OPENBSD_5_3_BASE:1.7
	OPENBSD_5_2:1.7.0.32
	OPENBSD_5_2_BASE:1.7
	OPENBSD_5_1_BASE:1.7
	OPENBSD_5_1:1.7.0.30
	OPENBSD_5_0:1.7.0.28
	OPENBSD_5_0_BASE:1.7
	OPENBSD_4_9:1.7.0.26
	OPENBSD_4_9_BASE:1.7
	OPENBSD_4_8:1.7.0.24
	OPENBSD_4_8_BASE:1.7
	OPENBSD_4_7:1.7.0.20
	OPENBSD_4_7_BASE:1.7
	OPENBSD_4_6:1.7.0.22
	OPENBSD_4_6_BASE:1.7
	OPENBSD_4_5:1.7.0.18
	OPENBSD_4_5_BASE:1.7
	OPENBSD_4_4:1.7.0.16
	OPENBSD_4_4_BASE:1.7
	OPENBSD_4_3:1.7.0.14
	OPENBSD_4_3_BASE:1.7
	OPENBSD_4_2:1.7.0.12
	OPENBSD_4_2_BASE:1.7
	OPENBSD_4_1:1.7.0.10
	OPENBSD_4_1_BASE:1.7
	OPENBSD_4_0:1.7.0.8
	OPENBSD_4_0_BASE:1.7
	OPENBSD_3_9:1.7.0.6
	OPENBSD_3_9_BASE:1.7
	OPENBSD_3_8:1.7.0.4
	OPENBSD_3_8_BASE:1.7
	OPENBSD_3_7:1.7.0.2
	OPENBSD_3_7_BASE:1.7
	BINUTILS_2_15:1.1.1.9
	OPENBSD_3_6:1.6.0.2
	OPENBSD_3_6_BASE:1.6
	BINUTILS-2_14:1.1.1.8
	OPENBSD_3_5:1.5.0.8
	OPENBSD_3_5_BASE:1.5
	OPENBSD_3_4:1.5.0.6
	OPENBSD_3_4_BASE:1.5
	OPENBSD_3_3:1.5.0.4
	OPENBSD_3_3_BASE:1.5
	OPENBSD_3_2:1.5.0.2
	OPENBSD_3_2_BASE:1.5
	binutils-2_11_2:1.1.1.7
	OPENBSD_3_1:1.4.0.8
	OPENBSD_3_1_BASE:1.4
	OPENBSD_3_0:1.4.0.6
	OPENBSD_3_0_BASE:1.4
	BINUTILS-2_10_1:1.1.1.6
	OPENBSD_2_9:1.4.0.4
	OPENBSD_2_9_BASE:1.4
	OPENBSD_2_8:1.4.0.2
	OPENBSD_2_8_BASE:1.4
	BINUTILS-2_10:1.1.1.6
	OPENBSD_2_7:1.3.0.18
	OPENBSD_2_7_BASE:1.3
	new-binutils:1.3.0.16
	OPENBSD_2_6:1.3.0.14
	OPENBSD_2_6_BASE:1.3
	OPENBSD_2_5:1.3.0.12
	OPENBSD_2_5_BASE:1.3
	OPENBSD_2_4:1.3.0.10
	OPENBSD_2_4_BASE:1.3
	OPENBSD_2_3:1.3.0.8
	OPENBSD_2_3_BASE:1.3
	OPENBSD_2_2:1.3.0.6
	OPENBSD_2_2_BASE:1.3
	BINUTILS-2_8_1:1.1.1.5
	OPENBSD_2_1:1.3.0.4
	OPENBSD_2_1_BASE:1.3
	CYGNUS-961112:1.1.1.4
	OPENBSD_2_0:1.3.0.2
	OPENBSD_2_0_BASE:1.3
	CYGNUS-960904:1.1.1.4
	CYGNUS-960609:1.1.1.3
	CYGNUS-960607:1.1.1.2
	CYGNUS:1.1.1
	FSF_2_6:1.1.1.1
	FSF:1.1.1;
locks; strict;
comment	@# @;


1.7
date	2004.11.02.20.45.15;	author miod;	state Exp;
branches;
next	1.6;

1.6
date	2004.05.17.21.54.25;	author drahn;	state Exp;
branches;
next	1.5;

1.5
date	2002.05.13.17.07.32;	author fgsch;	state Exp;
branches;
next	1.4;

1.4
date	2000.09.12.19.11.28;	author espie;	state Exp;
branches;
next	1.3;

1.3
date	96.09.04.19.02.27;	author niklas;	state Exp;
branches;
next	1.2;

1.2
date	96.06.10.10.48.05;	author niklas;	state Exp;
branches;
next	1.1;

1.1
date	96.01.08.11.03.39;	author niklas;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	96.01.08.11.03.39;	author niklas;	state Exp;
branches;
next	1.1.1.2;

1.1.1.2
date	96.06.07.11.03.33;	author niklas;	state Exp;
branches;
next	1.1.1.3;

1.1.1.3
date	96.06.09.19.43.31;	author niklas;	state Exp;
branches;
next	1.1.1.4;

1.1.1.4
date	96.09.04.17.49.21;	author niklas;	state Exp;
branches;
next	1.1.1.5;

1.1.1.5
date	97.05.29.09.15.29;	author niklas;	state Exp;
branches;
next	1.1.1.6;

1.1.1.6
date	2000.09.12.14.44.59;	author espie;	state Exp;
branches;
next	1.1.1.7;

1.1.1.7
date	2002.05.13.13.13.57;	author fgsch;	state Exp;
branches;
next	1.1.1.8;

1.1.1.8
date	2004.05.17.20.42.02;	author drahn;	state Exp;
branches;
next	1.1.1.9;

1.1.1.9
date	2004.11.02.20.22.00;	author miod;	state Exp;
branches;
next	;


desc
@@


1.7
log
@Merge conflicts, bringing our changes back in:
- extra $(SHELL) and sugar for make (so that files not mode +x still work)
- safer temp file handling
- our W^X binary layout changes in ld
- OpenBSD policy for library file selection in ld
- arm and m88k changes which were not merged in time for official 2.15
- bfd core file handling
- a couple typos

New for 2.15:
- ld(1) and as(1) manpages now generated at build time
- binutils/stabs.c reverted to use our in-tree libiberty for now
- we still use our VIA C3 crypto code over stock binutils, as it recognizes
  more instructions
- new emulations for OpenBSD on mips64 machines, to help OpenBSD/sgi
- relaxed %f# handling in gas on OpenBSD/sparc64 (same as was in 2.14)

Tested on all platforms by various people; special thanks to sturm@@ and
otto@@.
@
text
@		README for BINUTILS

These are the GNU binutils.  These are utilities of use when dealing
with binary files, either object files or executables.  These tools
consist of the linker (ld), the assembler (gas), and the profiler
(gprof) each of which have their own sub-directory named after them.
There is also a collection of other binary tools, including the
disassembler (objdump) in this directory.  These tools make use of a
pair of libraries (bfd and opcodes) and a common set of header files
(include).

There are README and NEWS files in most of the program sub-directories
which give more information about those specific programs.


Unpacking and Installation -- quick overview
============================================

When you unpack the binutils archive file, you will get a directory
called something like `binutils-XXX', where XXX is the number of the
release.  (Probably 2.13 or higher).  This directory contains
various files and sub-directories.  Most of the files in the top
directory are for information and for configuration.  The actual
source code is in sub-directories.

To build binutils, you can just do:

	cd binutils-XXX
	./configure [options]
	make
	make install # copies the programs files into /usr/local/bin
		     # by default.

This will configure and build all the libraries as well as the
assembler, the binutils, and the linker.

If you have GNU make, we recommend building in a different directory:

	mkdir objdir
	cd objdir
	../binutils-XXX/configure [options]
	make
	make install

This relies on the VPATH feature of GNU make.

By default, the binutils will be configured to support the system on
which they are built.  When doing cross development, use the --target
configure option to specify a different target, eg:

	./configure --target=foo-elf        

The --enable-targets option adds support for more binary file formats
besides the default.  List them as the argument to --enable-targets,
separated by commas.  For example:

	./configure --enable-targets=sun3,rs6000-aix,decstation

The name 'all' compiles in support for all valid BFD targets:

	./configure --enable-targets=all

On 32-bit hosts though, this support will be restricted to 32-bit
target unless the --enable-64-bit-bfd option is also used:

	./configure --enable-64-bit-bfd --enable-targets=all
	
You can also specify the --enable-shared option when you run
configure.  This will build the BFD and opcodes libraries as shared
libraries.  You can use arguments with the --enable-shared option to
indicate that only certain libraries should be built shared; for
example, --enable-shared=bfd.  The only potential shared libraries in
a binutils release are bfd and opcodes.

The binutils will be linked against the shared libraries.  The build
step will attempt to place the correct library in the run-time search
path for the binaries.  However, in some cases, after you install the
binaries, you may have to set an environment variable, normally
LD_LIBRARY_PATH, so that the system can find the installed libbfd
shared library.

To build under openVMS/AXP, see the file makefile.vms in the top level
directory.


Native Language Support
=======================

By default Native Language Support will be enabled for binutils.  On
some systems however this support is not present and can lead to error
messages such as "undefined reference to `libintl_gettext'" when
building there tools.  If that happens the NLS support can be disabled
by adding the --disable-nls switch to the configure line like this:

	../binutils-XXX/configure --disable-nls


If you don't have ar
====================

If your system does not already have an 'ar' program, the normal
binutils build process will not work.  In this case, run configure as
usual.  Before running make, run this script:

#!/bin/sh
MAKE_PROG="${MAKE-make}"
MAKE="${MAKE_PROG} AR=true LINK=true"
export MAKE
${MAKE} $* all-libiberty
${MAKE} $* all-intl
${MAKE} $* all-bfd
cd binutils
MAKE="${MAKE_PROG}"
export MAKE
${MAKE} $* ar_DEPENDENCIES= ar_LDADD='../bfd/*.o ../libiberty/*.o `if test -f ../intl/gettext.o; then echo '../intl/*.o'; fi`' ar

This script will build an ar program in binutils/ar.  Move binutils/ar
into a directory on your PATH.  After doing this, you can run make as
usual to build the complete binutils distribution.  You do not need
the ranlib program in order to build the distribution.

Porting
=======

Binutils-2.13 supports many different architectures, but there
are many more not supported, including some that were supported
by earlier versions.  We are hoping for volunteers to improve this
situation.

The major effort in porting binutils to a new host and/or target
architecture involves the BFD library.  There is some documentation
in ../bfd/doc.  The file ../gdb/doc/gdbint.texinfo (distributed
with gdb-5.x) may also be of help.

Reporting bugs
==============

Send bug reports and patches to:

   bug-binutils@@gnu.org.

Please include the following in bug reports:

- A description of exactly what went wrong, and exactly what should have
  happened instead.

- The configuration name(s) given to the "configure" script.  The
  "config.status" file should have this information.  This is assuming
  you built binutils yourself.  If you didn't build binutils youself,
  then we need information regarding your machine and operating system,
  and it may be more appropriate to report bugs to wherever you obtained
  binutils.

- The options given to the tool (gas, objcopy, ld etc.) at run time.

- The actual input file that caused the problem.

Always mention the version number you are running; this is printed by
running any of the binutils with the --version option.  We appreciate
reports about bugs, but we do not promise to fix them, particularly so
when the bug report is against an old version.  If you are able, please
consider building the latest tools from CVS to check that your bug has
not already been fixed.

When reporting problems about gas and ld, it's useful to provide a
testcase that triggers the problem.  In the case of a gas problem, we
want input files to gas and command line switches used.  The inputs to
gas are _NOT_ .c or .i files, but rather .s files.  If your original
source was a C program, you can generate the .s file and see the command
line options by passing -v -save-temps to gcc in addition to all the
usual options you use.  The reason we don't want C files is that we
might not have a C compiler around for the target you use.  While it
might be possible to build a compiler, that takes considerable time and
disk space, and we might not end up with exactly the same compiler you
use.

In the case of a ld problem, the input files are .o, .a and .so files,
and possibly a linker script specified with -T.  Again, when using gcc
to link, you can see these files by adding options to the gcc command
line.  Use -v -save-temps -Wl,-t, except that on targets that use gcc's
collect2, you would add -v -save-temps -Wl,-t,-debug.  The -t option
tells ld to print all files and libraries used, so that, for example,
you can associate -lc on the ld command line with the actual libc used.
Note that your simple two line C program to trigger a problem typically
expands into several megabytes of objects by the time you include
libraries.

It is antisocial to post megabyte sized attachments to mailing lists, so
please put large testcases somewhere on an ftp or web site so that only
interested developers need to download them, or offer to email them on
request.  Better still, try to reduce the testcase, for example, try to
develop a ld testcase that doesn't use system libraries.  However,
please be sure it is a complete testcase and that it really does
demonstrate the problem.  Also, don't bother paring it down if that will
cause large delays in filing the bug report.

If you expect to be contributing a large number of test cases, it would
be helpful if you would look at the test suite included in the release
(based on the Deja Gnu testing framework, available from the usual ftp
sites) and write test cases to fit into that framework.  This is
certainly not required.

VMS
===

This section was written by Klaus K"ampf <kkaempf@@rmi.de>.  It
describes how to build and install the binutils on openVMS (Alpha and
Vax).  (The BFD library only supports reading Vax object files.)

Compiling the release:

To compile the gnu binary utilities and the gnu assembler, you'll
need DEC C or GNU C for openVMS/Alpha. You'll need *both* compilers
on openVMS/Vax.

Compiling with either DEC C or GNU C works on openVMS/Alpha only. Some
of the opcodes and binutils files trap a bug in the DEC C optimizer,
so these files must be compiled with /noopt.

Compiling on openVMS/Vax is a bit complicated, as the bfd library traps
a bug in GNU C and the gnu assembler a bug in (my version of) DEC C.

I never tried compiling with VAX C.


You further need GNU Make Version 3.76 or later. This is available
at ftp.progis.de or any GNU archive site. The makefiles assume that
gmake starts gnu make as a foreign command.

If you're compiling with DEC C or VAX C, you must run

  $ @@setup

before starting gnu-make. This isn't needed with GNU C.

On the Alpha you can choose the compiler by editing the toplevel
makefile.vms. Either select CC=cc (for DEC C) or CC=gcc (for GNU C)


Installing the release

Provided that your directory setup conforms to the GNU on openVMS
standard, you already have a concealed device named 'GNU_ROOT'.
In this case, a simple

 $ gmake install

suffices to copy all programs and libraries to the proper directories.

Define the programs as foreign commands by adding these lines to your
login.com:

  $ gas :== $GNU_ROOT:[bin]as.exe
  $ size :== $GNU_ROOT:[bin]size.exe
  $ nm :== $GNU_ROOT:[bin]nm.exe
  $ objdump :== $GNU_ROOT:[bin]objdump.exe
  $ strings :== $GNU_ROOT:[bin]strings.exe

If you have a different directory setup, copy the binary utilities
([.binutils]size.exe, [.binutils]nm.exe, [.binutils]objdump.exe,
and [.binutils]strings.exe) and the gnu assembler and preprocessor
([.gas]as.exe and [.gas]gasp.exe]) to a directory of your choice
and define all programs as foreign commands.


If you're satisfied with the compilation, you may want to remove
unneeded objects and libraries:

  $ gmake clean


If you have any problems or questions about the binutils on VMS, feel
free to mail me at kkaempf@@rmi.de.
@


1.6
log
@Resolve merge conflicts, adjust method of W^X handing (.sh files)
remove testsuites (not useable) remove mmalloc (not part of new binutils).
@
text
@d142 16
d160 42
a201 1
reports about bugs, but we do not promise to fix them.
@


1.5
log
@resolve conflicts.
@
text
@d1 2
d4 7
a10 4
with object files.

The linker (ld) is in a separate directory, which should be ../ld.
Linker-specific notes are in ../ld/README.
d12 2
a13 2
As of version 2.5, the assembler (as) is also included in this package, in
../gas.  Assembler-specific notes can be found in ../gas/README.
a14 1
Recent changes are in ./NEWS, ../ld/NEWS, and ../gas/NEWS.
d19 6
a24 5
When you unpack the binutils-2.9.tar.gz file, you'll get a directory
called something like `binutils-2.9', which contains various files and
directories.  Most of the files in the top directory are for
information and for configuration.  The actual source code is in
subdirectories.
d28 1
a28 1
	cd binutils-2.9
d41 1
a41 1
	../binutils-2.9/configure [options]
d49 3
a51 1
configure option to specify a different target.
d59 1
a59 2
The name 'all' compiles in support for all valid BFD targets (this was
the default in releases before 2.3):
d63 5
d76 1
a76 1
step will attempt to place the correct library in the runtime search
d85 13
d101 1
a101 1
If your system does not already have an ar program, the normal
d115 1
a115 1
${MAKE} $* ar_DEPENDENCIES= ar_LDADD='../bfd/*.o `cat ../libiberty/required-list ../libiberty/needed-list | sed -e "s,\([^ ][^ ]*\),../libiberty/\1,g"` `if test -f ../intl/gettext.o; then echo '../intl/*.o'; fi`' ar
d125 1
a125 1
Binutils-2.9 supports many different architectures, but there
d127 2
a128 2
by earlier versions.  We are hoping for volunteers to
improve this situation.
d133 1
a133 1
with gdb-4.x) may also be of help.
d138 7
a144 4
Send bug reports and patches to bug-binutils@@gnu.org.  Always mention
the version number you are running; this is printed by running any of
the binutils with the --version option.  We appreciate reports about
bugs, but we do not promise to fix them.
d186 1
a186 1
standard, you already have a concealed deviced named 'GNU_ROOT'.
d209 1
a209 1
If you're satiesfied with the compilation, you may want to remove
@


1.4
log
@Help stupid cvs fixing basic conflicts.
@
text
@d114 1
a114 1
Send bug reports and patches to bug-gnu-utils@@gnu.org.  Always mention
@


1.3
log
@Merge the Cygnus 960904 sources
@
text
@d1 2
a2 2
This is a beta release of a completely rewritten binutils distribution.
(Rewritten since binutils 1.x, that is.)
d4 2
a5 2
The linker (ld) has been moved into a separate directory, which should be
../ld.  Linker-specific notes are in ../ld/README.
a9 10
These programs have been tested on various architectures.
However, since this is a beta release taken directly from an
evolving source tree, there might be some problems.  In particular,
the programs have not been ported to as many machines as the
old binutils.  There are also features of the old versions
that are missing on the new programs.  We would appreciate
patches to make things run on other machines; especially welcome
are fixes for what used to work on the old programs!
(See ./TODO, as well a ../bfd/TODO and ../ld/TODO.)

d13 1
a13 1
==========================
d15 5
a19 16
In this release, the binary utilities, the linker, the generic GNU include
files, the BFD ("binary file description") library, gprof, and getopt all
have directories of their own underneath the binutils-2.7 directory.
The idea is that a variety of GNU tools can
share a common copy of these things.  Configuration scripts and
makefiles exist to cruise up and down this directory tree and
automatically build all the pieces in the right order.

When you unpack the binutils-2.7.tar.gz file, you'll get a directory
called something like `binutils-2.7', which contains:

	COPYING          bfd/             configure*       libiberty/
	COPYING.LIB      binutils/        configure.in     move-if-change*
	CYGNUS           build-all.mk     etc/             opcodes/
	ChangeLog        config/          gprof/           test-build.mk
	Makefile.in      config.guess*    inc
d23 2
a24 2
	cd binutils-2.7
	./configure [ --enable-targets='target1,target2...' ]
d29 12
a40 2
This will configure and build all the libraries as well as binutils
and the linker.
d42 7
a48 5
The --enable-targets option adds support for more binary file
formats besides the default.  By default, support for only the
selected target file format is compiled in.  To add support for more
formats, list them as the argument to --enable-targets, separated by
commas.  For example:
d53 1
a53 1
the default in previous releases):
a56 3
The binutils can be used in a cross-development environment.
The file etc/configure.texi contains more information.

d59 4
a62 5
libraries.  This will only work on certain systems, and currently will
only work when compiling with gcc.  You can use arguments with the
--enable-shared option to indicate that only certain libraries should
be built shared; for example, --enable-shared=bfd.  The only
possibilities in a binutils release are bfd and opcodes.
d71 1
a71 6
If you specify --enable-commonbfdlib as well as --enable-shared, then
a single shared library will be built containing the bfd, opcodes, and
libiberty libraries.  It will be installed as libbfd.  This option
will make the binutils programs as small as possible.

To build under openVMS/AXP, see the file make-all.com in the top level
d82 6
a87 3
MAKE=${MAKE-make}
${MAKE} $* AR=true all-libiberty
${MAKE} $* AR=true all-bfd
d89 3
a91 1
${MAKE} $* ADDL_DEPS='$(BULIBS)' ADDL_LIBS='$(BULIBS) ../bfd/*.o `cat ../libiberty/required-list ../libiberty/needed-list | sed -e "s,\([^ ][^ ]*\),../libiberty/\1,g"`' ar
d100 2
a101 1
Binutils-2.7 supports many different architectures, but there
a110 6
If your system uses some variant of old-style a.out-format,
you can start with a copy of bfd/newsos3.c, and edit it to fit.
(You may also need to tweak bfd/aout-target.h.)
Alternatively, you could use the host-aout.c target.  This is a
special kludge that only works for native (non-cross) configurations.

d113 77
a189 7
If you can't track down a bug and send suggestions/patches
for fixes, you should probably *not* be using this release.
We have little time to spend tracking down whatever random bugs you
may run into (except for configurations that Cygnus supports for
its customers).  The general place to send bug reports or patches
is to bug-gnu-utils@@prep.ai.mit.edu; you can also send them directly
to raeburn@@cygnus.com or ian@@cygnus.com.
@


1.2
log
@Bring Cygnus versions into the trunk, keeping our local patches
@
text
@d89 3
@


1.1
log
@Initial revision
@
text
@d27 1
a27 1
have directories of their own underneath the binutils-2.5 directory.
d33 2
a34 2
When you unpack the binutils-2.5.tar.gz file, you'll get a directory
called something like `binutils-2.5', which contains:
d44 1
a44 1
	cd binutils-2.5
d69 39
d110 1
a110 1
Binutils-2.5 supports many different architectures, but there
d133 2
a134 2
is to bug-gnu-utils@@ai.mit.edu; you can also send them directly to
raeburn@@cygnus.com or ian@@cygnus.com.
@


1.1.1.1
log
@Initial GNU binutils 2.6 import
@
text
@@


1.1.1.2
log
@(Correct) Import of Cygnus binutils snapshot taken 960607
@
text
@d27 1
a27 1
have directories of their own underneath the binutils-2.7 directory.
d33 2
a34 2
When you unpack the binutils-2.7.tar.gz file, you'll get a directory
called something like `binutils-2.7', which contains:
d44 1
a44 1
	cd binutils-2.7
a68 39
You can also specify the --enable-shared option when you run
configure.  This will build the BFD and opcodes libraries as shared
libraries.  This will only work on certain systems, and currently will
only work when compiling with gcc.  You can use arguments with the
--enable-shared option to indicate that only certain libraries should
be built shared; for example, --enable-shared=bfd.  The only
possibilities in a binutils release are bfd and opcodes.

The binutils will be linked against the shared libraries.  The build
step will attempt to place the correct library in the runtime search
path for the binaries.  However, in some cases, after you install the
binaries, you may have to set an environment variable, normally
LD_LIBRARY_PATH, so that the system can find the installed libbfd
shared library.

If you specify --enable-commonbfdlib as well as --enable-shared, then
a single shared library will be built containing the bfd, opcodes, and
libiberty libraries.  It will be installed as libbfd.  This option
will make the binutils programs as small as possible.

If you don't have ar
====================

If your system does not already have an ar program, the normal
binutils build process will not work.  In this case, run configure as
usual.  Before running make, run this script:

#!/bin/sh
MAKE=${MAKE-make}
${MAKE} $* AR=true all-libiberty
${MAKE} $* AR=true all-bfd
cd binutils
${MAKE} $* ADDL_DEPS='$(BULIBS)' ADDL_LIBS='$(BULIBS) ../bfd/*.o `cat ../libiberty/required-list ../libiberty/needed-list | sed -e "s,\([^ ][^ ]*\),../libiberty/\1,g"`' ar

This script will build an ar program in binutils/ar.  Move binutils/ar
into a directory on your PATH.  After doing this, you can run make as
usual to build the complete binutils distribution.  You do not need
the ranlib program in order to build the distribution.

d71 1
a71 1
Binutils-2.7 supports many different architectures, but there
@


1.1.1.3
log
@Import of binutils, gas, ld & gprof from Cygnus 960609 tree
@
text
@d133 2
a134 2
is to bug-gnu-utils@@prep.ai.mit.edu; you can also send them directly
to raeburn@@cygnus.com or ian@@cygnus.com.
@


1.1.1.4
log
@Import of binutils, gas, ld & gprof from Cygnus 960904 tree
@
text
@a88 3
To build under openVMS/AXP, see the file make-all.com in the top level
directory.

@


1.1.1.5
log
@Import of binutils-2.8.1 from Cygnus/FSF
@
text
@d10 10
d23 1
a23 1
============================================
d25 16
a40 5
When you unpack the binutils-2.8.tar.gz file, you'll get a directory
called something like `binutils-2.8', which contains various files and
directories.  Most of the files in the top directory are for
information and for configuration.  The actual source code is in
subdirectories.
d44 1
a44 1
	cd binutils-2.8
d50 2
a51 2
This will configure and build all the libraries as well as the
assembler, the binutils, and the linker.
d62 1
a62 1
the default in releases before 2.3):
d74 2
a75 2
be built shared; for example, --enable-shared=bfd.  The only potential
shared libraries in a binutils release are bfd and opcodes.
d89 1
a89 1
To build under openVMS/AXP, see the file makefile.vms in the top level
d113 1
a113 1
Binutils-2.8 supports many different architectures, but there
d123 6
d131 7
a137 4
Send bug reports and patches to bug-gnu-utils@@prep.ai.mit.edu.  Always
mention the version number you are running; this is printed by running
any of the binutils with the --version option.  We appreciate reports
about bugs, but we do not promise to fix them.
@


1.1.1.6
log
@Import binutils-2.10
- only the binutils package (no gdb here)
- don't import libiberty and texinfo, they are elsewhere
- remove all .info* generated files
@
text
@d1 2
a2 2
These are the GNU binutils.  These are utilities of use when dealing
with object files.
d4 2
a5 2
The linker (ld) is in a separate directory, which should be ../ld.
Linker-specific notes are in ../ld/README.
d15 2
a16 2
When you unpack the binutils-2.9.tar.gz file, you'll get a directory
called something like `binutils-2.9', which contains various files and
d23 2
a24 2
	cd binutils-2.9
	./configure [options]
d32 5
a36 17
If you have GNU make, we recommend building in a different directory:

	mkdir objdir
	cd objdir
	../binutils-2.9/configure [options]
	make
	make install

This relies on the VPATH feature of GNU make.

By default, the binutils will be configured to support the system on
which they are built.  When doing cross development, use the --target
configure option to specify a different target.

The --enable-targets option adds support for more binary file formats
besides the default.  List them as the argument to --enable-targets,
separated by commas.  For example:
d45 3
d50 5
a54 4
libraries.  You can use arguments with the --enable-shared option to
indicate that only certain libraries should be built shared; for
example, --enable-shared=bfd.  The only potential shared libraries in
a binutils release are bfd and opcodes.
d63 5
d79 3
a81 6
MAKE_PROG="${MAKE-make}"
MAKE="${MAKE_PROG} AR=true LINK=true"
export MAKE
${MAKE} $* all-libiberty
${MAKE} $* all-intl
${MAKE} $* all-bfd
d83 1
a83 3
MAKE="${MAKE_PROG}"
export MAKE
${MAKE} $* ar_DEPENDENCIES= ar_LDADD='../bfd/*.o `cat ../libiberty/required-list ../libiberty/needed-list | sed -e "s,\([^ ][^ ]*\),../libiberty/\1,g"` `if test -f ../intl/gettext.o; then echo '../intl/*.o'; fi`' ar
d92 1
a92 2

Binutils-2.9 supports many different architectures, but there
d104 4
a107 77

Send bug reports and patches to bug-gnu-utils@@gnu.org.  Always mention
the version number you are running; this is printed by running any of
the binutils with the --version option.  We appreciate reports about
bugs, but we do not promise to fix them.

VMS
===

This section was written by Klaus K"ampf <kkaempf@@rmi.de>.  It
describes how to build and install the binutils on openVMS (Alpha and
Vax).  (The BFD library only supports reading Vax object files.)

Compiling the release:

To compile the gnu binary utilities and the gnu assembler, you'll
need DEC C or GNU C for openVMS/Alpha. You'll need *both* compilers
on openVMS/Vax.

Compiling with either DEC C or GNU C works on openVMS/Alpha only. Some
of the opcodes and binutils files trap a bug in the DEC C optimizer,
so these files must be compiled with /noopt.

Compiling on openVMS/Vax is a bit complicated, as the bfd library traps
a bug in GNU C and the gnu assembler a bug in (my version of) DEC C.

I never tried compiling with VAX C.


You further need GNU Make Version 3.76 or later. This is available
at ftp.progis.de or any GNU archive site. The makefiles assume that
gmake starts gnu make as a foreign command.

If you're compiling with DEC C or VAX C, you must run

  $ @@setup

before starting gnu-make. This isn't needed with GNU C.

On the Alpha you can choose the compiler by editing the toplevel
makefile.vms. Either select CC=cc (for DEC C) or CC=gcc (for GNU C)


Installing the release

Provided that your directory setup conforms to the GNU on openVMS
standard, you already have a concealed deviced named 'GNU_ROOT'.
In this case, a simple

 $ gmake install

suffices to copy all programs and libraries to the proper directories.

Define the programs as foreign commands by adding these lines to your
login.com:

  $ gas :== $GNU_ROOT:[bin]as.exe
  $ size :== $GNU_ROOT:[bin]size.exe
  $ nm :== $GNU_ROOT:[bin]nm.exe
  $ objdump :== $GNU_ROOT:[bin]objdump.exe
  $ strings :== $GNU_ROOT:[bin]strings.exe

If you have a different directory setup, copy the binary utilities
([.binutils]size.exe, [.binutils]nm.exe, [.binutils]objdump.exe,
and [.binutils]strings.exe) and the gnu assembler and preprocessor
([.gas]as.exe and [.gas]gasp.exe]) to a directory of your choice
and define all programs as foreign commands.


If you're satiesfied with the compilation, you may want to remove
unneeded objects and libraries:

  $ gmake clean


If you have any problems or questions about the binutils on VMS, feel
free to mail me at kkaempf@@rmi.de.
@


1.1.1.7
log
@Import binutils-2.11.2
- only the binutils package (no gdb here)
- don't import libiberty and texinfo, they are elsewhere
- remove all .info* generated files
@
text
@d114 1
a114 1
Send bug reports and patches to bug-binutils@@gnu.org.  Always mention
@


1.1.1.8
log
@import binutils 2.14 (excluding testsuites, .info files, and .po files)
@
text
@d1 2
a2 1
		README for BINUTILS
d4 2
a5 8
These are the GNU binutils.  These are utilities of use when dealing
with binary files, either object files or executables.  These tools
consist of the linker (ld), the assembler (gas), and the profiler
(gprof) each of which have their own sub-directory named after them.
There is also a collection of other binary tools, including the
disassembler (objdump) in this directory.  These tools make use of a
pair of libraries (bfd and opcodes) and a common set of header files
(include).
d7 2
a8 2
There are README and NEWS files in most of the program sub-directories
which give more information about those specific programs.
d10 1
d15 5
a19 6
When you unpack the binutils archive file, you will get a directory
called something like `binutils-XXX', where XXX is the number of the
release.  (Probably 2.13 or higher).  This directory contains
various files and sub-directories.  Most of the files in the top
directory are for information and for configuration.  The actual
source code is in sub-directories.
d23 1
a23 1
	cd binutils-XXX
d36 1
a36 1
	../binutils-XXX/configure [options]
d44 1
a44 3
configure option to specify a different target, eg:

	./configure --target=foo-elf        
d52 2
a53 1
The name 'all' compiles in support for all valid BFD targets:
a56 5
On 32-bit hosts though, this support will be restricted to 32-bit
target unless the --enable-64-bit-bfd option is also used:

	./configure --enable-64-bit-bfd --enable-targets=all
	
d65 1
a65 1
step will attempt to place the correct library in the run-time search
a73 13

Native Language Support
=======================

By default Native Language Support will be enabled for binutils.  On
some systems however this support is not present and can lead to error
messages such as "undefined reference to `libintl_gettext'" when
building there tools.  If that happens the NLS support can be disabled
by adding the --disable-nls switch to the configure line like this:

	../binutils-XXX/configure --disable-nls


d77 1
a77 1
If your system does not already have an 'ar' program, the normal
d91 1
a91 1
${MAKE} $* ar_DEPENDENCIES= ar_LDADD='../bfd/*.o ../libiberty/*.o `if test -f ../intl/gettext.o; then echo '../intl/*.o'; fi`' ar
d101 1
a101 1
Binutils-2.13 supports many different architectures, but there
d103 2
a104 2
by earlier versions.  We are hoping for volunteers to improve this
situation.
d109 1
a109 1
with gdb-5.x) may also be of help.
d114 4
a117 7
Send bug reports and patches to:

   bug-binutils@@gnu.org.

Always mention the version number you are running; this is printed by
running any of the binutils with the --version option.  We appreciate
reports about bugs, but we do not promise to fix them.
d159 1
a159 1
standard, you already have a concealed device named 'GNU_ROOT'.
d182 1
a182 1
If you're satisfied with the compilation, you may want to remove
@


1.1.1.9
log
@Binutils 2.15, with testsuites removed, and without gdb and libiberty.
@
text
@a141 16
Please include the following in bug reports:

- A description of exactly what went wrong, and exactly what should have
  happened instead.

- The configuration name(s) given to the "configure" script.  The
  "config.status" file should have this information.  This is assuming
  you built binutils yourself.  If you didn't build binutils youself,
  then we need information regarding your machine and operating system,
  and it may be more appropriate to report bugs to wherever you obtained
  binutils.

- The options given to the tool (gas, objcopy, ld etc.) at run time.

- The actual input file that caused the problem.

d144 1
a144 42
reports about bugs, but we do not promise to fix them, particularly so
when the bug report is against an old version.  If you are able, please
consider building the latest tools from CVS to check that your bug has
not already been fixed.

When reporting problems about gas and ld, it's useful to provide a
testcase that triggers the problem.  In the case of a gas problem, we
want input files to gas and command line switches used.  The inputs to
gas are _NOT_ .c or .i files, but rather .s files.  If your original
source was a C program, you can generate the .s file and see the command
line options by passing -v -save-temps to gcc in addition to all the
usual options you use.  The reason we don't want C files is that we
might not have a C compiler around for the target you use.  While it
might be possible to build a compiler, that takes considerable time and
disk space, and we might not end up with exactly the same compiler you
use.

In the case of a ld problem, the input files are .o, .a and .so files,
and possibly a linker script specified with -T.  Again, when using gcc
to link, you can see these files by adding options to the gcc command
line.  Use -v -save-temps -Wl,-t, except that on targets that use gcc's
collect2, you would add -v -save-temps -Wl,-t,-debug.  The -t option
tells ld to print all files and libraries used, so that, for example,
you can associate -lc on the ld command line with the actual libc used.
Note that your simple two line C program to trigger a problem typically
expands into several megabytes of objects by the time you include
libraries.

It is antisocial to post megabyte sized attachments to mailing lists, so
please put large testcases somewhere on an ftp or web site so that only
interested developers need to download them, or offer to email them on
request.  Better still, try to reduce the testcase, for example, try to
develop a ld testcase that doesn't use system libraries.  However,
please be sure it is a complete testcase and that it really does
demonstrate the problem.  Also, don't bother paring it down if that will
cause large delays in filing the bug report.

If you expect to be contributing a large number of test cases, it would
be helpful if you would look at the test suite included in the release
(based on the Deja Gnu testing framework, available from the usual ftp
sites) and write test cases to fit into that framework.  This is
certainly not required.
@


