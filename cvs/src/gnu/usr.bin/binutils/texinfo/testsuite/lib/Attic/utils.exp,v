head	1.3;
access;
symbols
	CYGNUS-961112:1.1.2.1
	CYGNUS:1.1.0.2;
locks; strict;
comment	@# @;


1.3
date	96.11.23.16.34.59;	author niklas;	state dead;
branches;
next	1.2;

1.2
date	96.11.23.04.03.34;	author niklas;	state Exp;
branches;
next	1.1;

1.1
date	96.11.19.14.53.15;	author niklas;	state dead;
branches
	1.1.2.1;
next	;

1.1.2.1
date	96.11.19.14.53.15;	author niklas;	state Exp;
branches;
next	;


desc
@@


1.3
log
@Remove accidentally committed dirs from the trunk
@
text
@# utils.exp, a collection of Tcl/Expect utilities for texinfo tests.

# ----------default--------------------------------------------
#  default VAR VALUE
#          Check whether VAR exists and has a nonempty value; 
#          if not, use VALUE as the default
# -------------------------------------------------------------
proc default {varname varval} {
  upvar $varname outervar
  if { ![info exists outervar] || [string match {} $outervar] } then {
    verbose "Defaulting $varname to $varval\n" 1
    set outervar $varval
  } else {
    verbose "$varname retains existing value $outervar\n" 1
  }
  return 
}


# ----------is_executable--------------------------------------
#  is_executable NAME
#          Boolean predicate: is NAME an executable file 
#            somewhere on our PATH?
# -------------------------------------------------------------
proc is_executable {name} {
  if [ file executable [which $name] ] then {
    return 1
  } else {
    return 0
  }
}
@


1.2
log
@Merge to Cygnus 961112 + add some support (not ready) for shared libs
@
text
@@


1.1
log
@file utils.exp was initially added on branch CYGNUS.
@
text
@d1 31
@


1.1.2.1
log
@Import of 961112 Cygnus binutils+gas+ld+gdb+gprof
@
text
@a0 31
# utils.exp, a collection of Tcl/Expect utilities for texinfo tests.

# ----------default--------------------------------------------
#  default VAR VALUE
#          Check whether VAR exists and has a nonempty value; 
#          if not, use VALUE as the default
# -------------------------------------------------------------
proc default {varname varval} {
  upvar $varname outervar
  if { ![info exists outervar] || [string match {} $outervar] } then {
    verbose "Defaulting $varname to $varval\n" 1
    set outervar $varval
  } else {
    verbose "$varname retains existing value $outervar\n" 1
  }
  return 
}


# ----------is_executable--------------------------------------
#  is_executable NAME
#          Boolean predicate: is NAME an executable file 
#            somewhere on our PATH?
# -------------------------------------------------------------
proc is_executable {name} {
  if [ file executable [which $name] ] then {
    return 1
  } else {
    return 0
  }
}
@
