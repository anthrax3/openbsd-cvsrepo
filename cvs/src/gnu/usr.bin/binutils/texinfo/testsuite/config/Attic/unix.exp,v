head	1.3;
access;
symbols
	CYGNUS-961112:1.1.2.1
	CYGNUS:1.1.0.2;
locks; strict;
comment	@# @;


1.3
date	96.11.23.16.34.58;	author niklas;	state dead;
branches;
next	1.2;

1.2
date	96.11.23.04.03.33;	author niklas;	state Exp;
branches;
next	1.1;

1.1
date	96.11.19.14.53.13;	author niklas;	state dead;
branches
	1.1.2.1;
next	;

1.1.2.1
date	96.11.19.14.53.14;	author niklas;	state Exp;
branches;
next	;


desc
@@


1.3
log
@Remove accidentally committed dirs from the trunk
@
text
@load_lib utils.exp   ;# Get the file of utilities for Texinfo tests

default MAKEINFO makeinfo      ;# ensure Tcl var MAKEINFO has value

#                                   Ensure we can execute this tool
if [is_executable $MAKEINFO] then {
  verbose "$MAKEINFO is executable\n" 1
} else {
  perror "$MAKEINFO: cannot execute\n"
  exit 1                      ;# no point in running any makeinfo tests
}

# makeinfo_start undefined by choice; 
# 1) it makes it clearer where the output is to start
# $MAKEINFO directly with `catch' from each test case,
# and 
# 2) this takes no more lines than it would to call makeinfo_start

proc makeinfo_exit {} {}

proc makeinfo_version {} {
	global MAKEINFO
	set tmp [ exec $MAKEINFO --version ]
	regexp "version.*$" $tmp vn      ;# "vn" undef if pattern not found
	if [info exists vn] then {
		clone_output "[which $MAKEINFO] $vn\n"
	}
}

@


1.2
log
@Merge to Cygnus 961112 + add some support (not ready) for shared libs
@
text
@@


1.1
log
@file unix.exp was initially added on branch CYGNUS.
@
text
@d1 29
@


1.1.2.1
log
@Import of 961112 Cygnus binutils+gas+ld+gdb+gprof
@
text
@a0 29
load_lib utils.exp   ;# Get the file of utilities for Texinfo tests

default MAKEINFO makeinfo      ;# ensure Tcl var MAKEINFO has value

#                                   Ensure we can execute this tool
if [is_executable $MAKEINFO] then {
  verbose "$MAKEINFO is executable\n" 1
} else {
  perror "$MAKEINFO: cannot execute\n"
  exit 1                      ;# no point in running any makeinfo tests
}

# makeinfo_start undefined by choice; 
# 1) it makes it clearer where the output is to start
# $MAKEINFO directly with `catch' from each test case,
# and 
# 2) this takes no more lines than it would to call makeinfo_start

proc makeinfo_exit {} {}

proc makeinfo_version {} {
	global MAKEINFO
	set tmp [ exec $MAKEINFO --version ]
	regexp "version.*$" $tmp vn      ;# "vn" undef if pattern not found
	if [info exists vn] then {
		clone_output "[which $MAKEINFO] $vn\n"
	}
}

@
