head	1.3;
access;
symbols
	CYGNUS-961112:1.1.2.1
	CYGNUS:1.1.0.2;
locks; strict;
comment	@# @;


1.3
date	96.11.23.16.32.20;	author niklas;	state dead;
branches;
next	1.2;

1.2
date	96.11.23.04.00.13;	author niklas;	state Exp;
branches;
next	1.1;

1.1
date	96.11.19.14.49.05;	author niklas;	state dead;
branches
	1.1.2.1;
next	;

1.1.2.1
date	96.11.19.14.49.05;	author niklas;	state Exp;
branches;
next	;


desc
@@


1.3
log
@Remove accidentally committed dirs from the trunk
@
text
@# This file contains a top-level script to run all of the Tcl
# tests.  Execute it by invoking "source all" when running tclTest
# in this directory.
#

# If the srcdir variable exists, tests are looked for in that
# directory.  Otherwise they are looked for in ".".

if {! [info exists srcdir]} then {
    set srcdir .
}

# Always explicitly load `defs', so tests don't have to.  This avoids
# the need for each .test file to know about $srcdir.

source $srcdir/defs

foreach i [lsort [glob $srcdir/*.test]] {
    if [string match l.*.test $i] {
	# This is an SCCS lock file;  ignore it.
	continue
    }
    puts stdout [file tail $i]
    if [catch {source $i} msg] {
	puts $msg
    }	
}
puts "Tests all done"
@


1.2
log
@Merge to Cygnus 961112 + add some support (not ready) for shared libs
@
text
@@


1.1
log
@file all was initially added on branch CYGNUS.
@
text
@d1 28
@


1.1.2.1
log
@Import of 961112 Cygnus binutils+gas+ld+gdb+gprof
@
text
@a0 28
# This file contains a top-level script to run all of the Tcl
# tests.  Execute it by invoking "source all" when running tclTest
# in this directory.
#

# If the srcdir variable exists, tests are looked for in that
# directory.  Otherwise they are looked for in ".".

if {! [info exists srcdir]} then {
    set srcdir .
}

# Always explicitly load `defs', so tests don't have to.  This avoids
# the need for each .test file to know about $srcdir.

source $srcdir/defs

foreach i [lsort [glob $srcdir/*.test]] {
    if [string match l.*.test $i] {
	# This is an SCCS lock file;  ignore it.
	continue
    }
    puts stdout [file tail $i]
    if [catch {source $i} msg] {
	puts $msg
    }	
}
puts "Tests all done"
@
