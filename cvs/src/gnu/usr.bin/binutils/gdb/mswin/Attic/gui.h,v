head	1.3;
access;
symbols
	OPENBSD_3_5:1.2.0.32
	OPENBSD_3_5_BASE:1.2
	OPENBSD_3_4:1.2.0.30
	OPENBSD_3_4_BASE:1.2
	OPENBSD_3_3:1.2.0.28
	OPENBSD_3_3_BASE:1.2
	OPENBSD_3_2:1.2.0.26
	OPENBSD_3_2_BASE:1.2
	OPENBSD_3_1:1.2.0.24
	OPENBSD_3_1_BASE:1.2
	OPENBSD_3_0:1.2.0.22
	OPENBSD_3_0_BASE:1.2
	OPENBSD_2_9:1.2.0.20
	OPENBSD_2_9_BASE:1.2
	OPENBSD_2_8:1.2.0.18
	OPENBSD_2_8_BASE:1.2
	OPENBSD_2_7:1.2.0.16
	OPENBSD_2_7_BASE:1.2
	new-binutils:1.2.0.14
	OPENBSD_2_6:1.2.0.12
	OPENBSD_2_6_BASE:1.2
	OPENBSD_2_5:1.2.0.10
	OPENBSD_2_5_BASE:1.2
	OPENBSD_2_4:1.2.0.8
	OPENBSD_2_4_BASE:1.2
	OPENBSD_2_3:1.2.0.6
	OPENBSD_2_3_BASE:1.2
	OPENBSD_2_2:1.2.0.4
	OPENBSD_2_2_BASE:1.2
	OPENBSD_2_1:1.2.0.2
	OPENBSD_2_1_BASE:1.2
	CYGNUS-961112:1.1.2.1
	CYGNUS:1.1.0.2;
locks; strict;
comment	@ * @;


1.3
date	2004.05.21.20.23.30;	author kettenis;	state dead;
branches;
next	1.2;

1.2
date	96.11.23.03.46.28;	author niklas;	state Exp;
branches;
next	1.1;

1.1
date	96.11.19.14.30.18;	author niklas;	state dead;
branches
	1.1.2.1;
next	;

1.1.2.1
date	96.11.19.14.30.19;	author niklas;	state Exp;
branches;
next	;


desc
@@


1.3
log
@Resolve conflicts for GDB 6.1.  Add local patches.
ok deraadt@@
@
text
@// gui.h : main header file for the GUI application
//

#ifndef __AFXWIN_H__
	#error include 'stdafx.h' before including this file for PCH
#endif

#include "resource.h"       // main symbols

/////////////////////////////////////////////////////////////////////////////
// CGuiApp:
// See gui.cpp for the implementation of this class
//

class CGuiApp : public CWinApp
{
 private:
  virtual BOOL InitInstance();
  virtual BOOL ExitInstance();
  virtual BOOL PreTranslateMessage(MSG* pMsg);


 public:
  UINT m_uiMyListClipFormat;


  void raisekids(CMultiDocTemplate *);
  void newwin(CMultiDocTemplate*);

 public:
  static void SyncRegs();
  void sync_bpts();
  class CMultiDocTemplate* m_CmdLogTemplate;
  class CMultiDocTemplate* m_srcTemplate;
  class CMultiDocTemplate* m_expTemplate;
  class CMultiDocTemplate* m_infoTemplate;
  class CMultiDocTemplate* m_cmdTemplate;
  class CMultiDocTemplate* m_IOLogTemplate;
  class CMultiDocTemplate* m_regTemplate;
  class CMultiDocTemplate* m_srcsTemplate;
  class CMultiDocTemplate* m_bptTemplate;
  class CMultiDocTemplate* m_asmTemplate;	
  class CMultiDocTemplate* m_localTemplate;	
  class CMultiDocTemplate* m_srcbrowserTemplate;	
  class CMultiDocTemplate* m_watchTemplate;	

//  class CMultiDocTemplate *m_memTemplate;



  int gotkid(CMultiDocTemplate *p);
  CGuiApp();
  void Command(const char *command);

  void SetInterestingLine(int line);
  void SetInterestingAddr(  CORE_ADDR addr);
  void InsertBreakpoint(struct symtab *tab, int line);
  // Overrides
  // ClassWizard generated virtual function overrides
  //{{AFX_VIRTUAL(CGuiApp)
public:
  virtual BOOL OnIdle(LONG lCount);
  //}}AFX_VIRTUAL
  
  // Implementation
  
  //{{AFX_MSG(CGuiApp)

  afx_msg void OnUpdateShowAsm(CCmdUI* pCmdUI);
  afx_msg void OnShowAsm();

  afx_msg void OnUpdateShowSource(CCmdUI* pCmdUI);
  afx_msg void OnShowSource();

  afx_msg void OnUpdateShowBpts(CCmdUI* pCmdUI);
  afx_msg void OnShowBpts();

  afx_msg void OnUpdateShowLine(CCmdUI* pCmdUI);
  afx_msg void OnShowLine();

//  afx_msg void OnNewMemwin();
//  afx_msg void OnUpdateNewMemwin(CCmdUI* pCmdUI);


  afx_msg void OnAppAbout();
  afx_msg void OnRegister();
  afx_msg void OnNewCmdwin();
  afx_msg void OnUpdateNewCmdwin(CCmdUI* pCmdUI);
  afx_msg void OnNewIOLogWin();
  afx_msg void OnUpdateNewIOLogWin(CCmdUI* pCmdUI);
  afx_msg void OnUpdateBptWin(CCmdUI* pCmdUI);
  afx_msg void OnNewExpressionwin();
  afx_msg void OnNewSrcwin();
  afx_msg void OnNewRegwin();
  afx_msg void OnUpdateNewRegwin(CCmdUI* pCmdUI);
  afx_msg void OnNewBptwin();
  afx_msg void OnNewSrcBrowserWin();
  afx_msg void OnNewLocalWin();
  afx_msg void OnUpdateNewLocalWin(CCmdUI* pCmdUI);
  afx_msg void OnUpdateExpressionwin(CCmdUI* pCmdUI);
  afx_msg void OnUpdateNeedExec(CCmdUI* pCmdUI);
  
  afx_msg void OnUpdateNewSrcBrowserWin(CCmdUI* pCmdUI);
  afx_msg void OnUpdateNewSrcwin(CCmdUI* pCmdUI);
  afx_msg void OnHelpIndex();
  afx_msg void OnHelp();
  //}}AFX_MSG
  DECLARE_MESSAGE_MAP()
  };


/////////////////////////////////////////////////////////////////////////////
void theApp_sync_pc();
void theApp_show_at(CORE_ADDR pc);
void theApp_show_file(const char *);
void theApp_show_with_symtab(class CSymtab *);
void theApp_show_function(const char *, CORE_ADDR, CORE_ADDR);

class CGlobalOptions {
public:
  int always_create;
  static void Initialize();
  static void Terminate();
};

extern CGlobalOptions global_options;



class CSrcState 
{
public:
  BOOL	addresses ;
  BOOL 	breakpoint_ok;
  BOOL	disassembly;
  BOOL	instruction_data;
  BOOL	linenumbers ;
  BOOL 	source ;
public:
  CSrcState();
};
void props();

void redraw_allwins(CMultiDocTemplate *p);


void load_where(CFrameWnd *p, const char *);
void save_where(CFrameWnd *p, const char *);

void string_command (const CString &x);

extern "C" {
int mswin_query (const char*, va_list);
}
@


1.2
log
@Merge to Cygnus 961112 + add some support (not ready) for shared libs
@
text
@@


1.1
log
@file gui.h was initially added on branch CYGNUS.
@
text
@d1 154
@


1.1.2.1
log
@Import of 961112 Cygnus binutils+gas+ld+gdb+gprof
@
text
@a0 154
// gui.h : main header file for the GUI application
//

#ifndef __AFXWIN_H__
	#error include 'stdafx.h' before including this file for PCH
#endif

#include "resource.h"       // main symbols

/////////////////////////////////////////////////////////////////////////////
// CGuiApp:
// See gui.cpp for the implementation of this class
//

class CGuiApp : public CWinApp
{
 private:
  virtual BOOL InitInstance();
  virtual BOOL ExitInstance();
  virtual BOOL PreTranslateMessage(MSG* pMsg);


 public:
  UINT m_uiMyListClipFormat;


  void raisekids(CMultiDocTemplate *);
  void newwin(CMultiDocTemplate*);

 public:
  static void SyncRegs();
  void sync_bpts();
  class CMultiDocTemplate* m_CmdLogTemplate;
  class CMultiDocTemplate* m_srcTemplate;
  class CMultiDocTemplate* m_expTemplate;
  class CMultiDocTemplate* m_infoTemplate;
  class CMultiDocTemplate* m_cmdTemplate;
  class CMultiDocTemplate* m_IOLogTemplate;
  class CMultiDocTemplate* m_regTemplate;
  class CMultiDocTemplate* m_srcsTemplate;
  class CMultiDocTemplate* m_bptTemplate;
  class CMultiDocTemplate* m_asmTemplate;	
  class CMultiDocTemplate* m_localTemplate;	
  class CMultiDocTemplate* m_srcbrowserTemplate;	
  class CMultiDocTemplate* m_watchTemplate;	

//  class CMultiDocTemplate *m_memTemplate;



  int gotkid(CMultiDocTemplate *p);
  CGuiApp();
  void Command(const char *command);

  void SetInterestingLine(int line);
  void SetInterestingAddr(  CORE_ADDR addr);
  void InsertBreakpoint(struct symtab *tab, int line);
  // Overrides
  // ClassWizard generated virtual function overrides
  //{{AFX_VIRTUAL(CGuiApp)
public:
  virtual BOOL OnIdle(LONG lCount);
  //}}AFX_VIRTUAL
  
  // Implementation
  
  //{{AFX_MSG(CGuiApp)

  afx_msg void OnUpdateShowAsm(CCmdUI* pCmdUI);
  afx_msg void OnShowAsm();

  afx_msg void OnUpdateShowSource(CCmdUI* pCmdUI);
  afx_msg void OnShowSource();

  afx_msg void OnUpdateShowBpts(CCmdUI* pCmdUI);
  afx_msg void OnShowBpts();

  afx_msg void OnUpdateShowLine(CCmdUI* pCmdUI);
  afx_msg void OnShowLine();

//  afx_msg void OnNewMemwin();
//  afx_msg void OnUpdateNewMemwin(CCmdUI* pCmdUI);


  afx_msg void OnAppAbout();
  afx_msg void OnRegister();
  afx_msg void OnNewCmdwin();
  afx_msg void OnUpdateNewCmdwin(CCmdUI* pCmdUI);
  afx_msg void OnNewIOLogWin();
  afx_msg void OnUpdateNewIOLogWin(CCmdUI* pCmdUI);
  afx_msg void OnUpdateBptWin(CCmdUI* pCmdUI);
  afx_msg void OnNewExpressionwin();
  afx_msg void OnNewSrcwin();
  afx_msg void OnNewRegwin();
  afx_msg void OnUpdateNewRegwin(CCmdUI* pCmdUI);
  afx_msg void OnNewBptwin();
  afx_msg void OnNewSrcBrowserWin();
  afx_msg void OnNewLocalWin();
  afx_msg void OnUpdateNewLocalWin(CCmdUI* pCmdUI);
  afx_msg void OnUpdateExpressionwin(CCmdUI* pCmdUI);
  afx_msg void OnUpdateNeedExec(CCmdUI* pCmdUI);
  
  afx_msg void OnUpdateNewSrcBrowserWin(CCmdUI* pCmdUI);
  afx_msg void OnUpdateNewSrcwin(CCmdUI* pCmdUI);
  afx_msg void OnHelpIndex();
  afx_msg void OnHelp();
  //}}AFX_MSG
  DECLARE_MESSAGE_MAP()
  };


/////////////////////////////////////////////////////////////////////////////
void theApp_sync_pc();
void theApp_show_at(CORE_ADDR pc);
void theApp_show_file(const char *);
void theApp_show_with_symtab(class CSymtab *);
void theApp_show_function(const char *, CORE_ADDR, CORE_ADDR);

class CGlobalOptions {
public:
  int always_create;
  static void Initialize();
  static void Terminate();
};

extern CGlobalOptions global_options;



class CSrcState 
{
public:
  BOOL	addresses ;
  BOOL 	breakpoint_ok;
  BOOL	disassembly;
  BOOL	instruction_data;
  BOOL	linenumbers ;
  BOOL 	source ;
public:
  CSrcState();
};
void props();

void redraw_allwins(CMultiDocTemplate *p);


void load_where(CFrameWnd *p, const char *);
void save_where(CFrameWnd *p, const char *);

void string_command (const CString &x);

extern "C" {
int mswin_query (const char*, va_list);
}
@
