head	1.3;
access;
symbols
	OPENBSD_3_5:1.2.0.32
	OPENBSD_3_5_BASE:1.2
	OPENBSD_3_4:1.2.0.30
	OPENBSD_3_4_BASE:1.2
	OPENBSD_3_3:1.2.0.28
	OPENBSD_3_3_BASE:1.2
	OPENBSD_3_2:1.2.0.26
	OPENBSD_3_2_BASE:1.2
	OPENBSD_3_1:1.2.0.24
	OPENBSD_3_1_BASE:1.2
	OPENBSD_3_0:1.2.0.22
	OPENBSD_3_0_BASE:1.2
	OPENBSD_2_9:1.2.0.20
	OPENBSD_2_9_BASE:1.2
	OPENBSD_2_8:1.2.0.18
	OPENBSD_2_8_BASE:1.2
	OPENBSD_2_7:1.2.0.16
	OPENBSD_2_7_BASE:1.2
	new-binutils:1.2.0.14
	OPENBSD_2_6:1.2.0.12
	OPENBSD_2_6_BASE:1.2
	OPENBSD_2_5:1.2.0.10
	OPENBSD_2_5_BASE:1.2
	OPENBSD_2_4:1.2.0.8
	OPENBSD_2_4_BASE:1.2
	OPENBSD_2_3:1.2.0.6
	OPENBSD_2_3_BASE:1.2
	OPENBSD_2_2:1.2.0.4
	OPENBSD_2_2_BASE:1.2
	OPENBSD_2_1:1.2.0.2
	OPENBSD_2_1_BASE:1.2
	CYGNUS-961112:1.1.2.1
	CYGNUS:1.1.0.2;
locks; strict;
comment	@ * @;


1.3
date	2004.05.21.20.23.31;	author kettenis;	state dead;
branches;
next	1.2;

1.2
date	96.11.23.03.47.15;	author niklas;	state Exp;
branches;
next	1.1;

1.1
date	96.11.19.14.31.28;	author niklas;	state dead;
branches
	1.1.2.1;
next	;

1.1.2.1
date	96.11.19.14.31.28;	author niklas;	state Exp;
branches;
next	;


desc
@@


1.3
log
@Resolve conflicts for GDB 6.1.  Add local patches.
ok deraadt@@
@
text
@

#include "windefs.h"
#include <stdio.h>
#include <stdlib.h>
#include "../defs.h"
// define last to prevent windows from conflicting with bfd's boolean 

#define abort ff



void ff() {
printf("OUUCH!!!\n");
}

int fork () { abort(); return 0; }


void kill() { abort(); }

void wait() { abort(); }
int vfork() { abort(); return 0; }


void getkey() { abort(); }
int getgid() { return 1; }
int getpagesize() { return 4096;}

char **environ;

int getuit() { return 0;}


int ScreenRows() { return 20; }
int ScreenCols() { return 80;}


/*int sys_nerr=1;*/
char *sys_siglist[] = {"OOPS"};


PTR mmalloc(PTR x,size_t y) { return malloc(y) ;}
PTR mrealloc(PTR x,PTR y,size_t z) { return realloc(y,z);}
PTR mcalloc(PTR x,size_t y,size_t z) { return calloc(y,z) ;}
void mfree(PTR x,PTR y) { free(y); }
int mmcheck(PTR x, void (*f) (void)) { return 1;}
int mmtrace(void) { return 1; }
#undef isascii
int isascii (x) { return __isascii (x);}

int getuid() { return 1;}


void ScreenGetCursor() { abort(); }
void ScreenSetCursor() { abort(); }
char *environ_vector[20];



#if 0
void c_error() { abort(); }
void c_parse() { abort(); }
#endif





void chown() {}
void pipe() {}
int sbrk() { return 0;}

#if 0	/* FIXME!  not sure if this is right?? */
void operator_chars() {}
#endif


#if 0
void core_file_matches_executable_p(x,y) { abort();}
void coffstab_build_psymtabs() { abort(); }
char *chill_demangle(const char *a) { return 0;}
void f_error () { abort(); }
void f_parse() { abort(); }

#endif

char *tilde_expand(char *n) {return strdup(n);}

int isnan() { return 0;}

int sleep(int secs) 
{
  unsigned long stop = GetTickCount() + secs * 1000;

  /* on win32s, sleep returns immediately if there's
     nothing else ready to run, so loop. */
  while (GetTickCount() < stop)
    Sleep (100);
  return 0;
}

char* strsignal(int x)
{
return 0;
}
@


1.2
log
@Merge to Cygnus 961112 + add some support (not ready) for shared libs
@
text
@@


1.1
log
@file stubs.c was initially added on branch CYGNUS.
@
text
@d1 106
@


1.1.2.1
log
@Import of 961112 Cygnus binutils+gas+ld+gdb+gprof
@
text
@a0 106


#include "windefs.h"
#include <stdio.h>
#include <stdlib.h>
#include "../defs.h"
// define last to prevent windows from conflicting with bfd's boolean 

#define abort ff



void ff() {
printf("OUUCH!!!\n");
}

int fork () { abort(); return 0; }


void kill() { abort(); }

void wait() { abort(); }
int vfork() { abort(); return 0; }


void getkey() { abort(); }
int getgid() { return 1; }
int getpagesize() { return 4096;}

char **environ;

int getuit() { return 0;}


int ScreenRows() { return 20; }
int ScreenCols() { return 80;}


/*int sys_nerr=1;*/
char *sys_siglist[] = {"OOPS"};


PTR mmalloc(PTR x,size_t y) { return malloc(y) ;}
PTR mrealloc(PTR x,PTR y,size_t z) { return realloc(y,z);}
PTR mcalloc(PTR x,size_t y,size_t z) { return calloc(y,z) ;}
void mfree(PTR x,PTR y) { free(y); }
int mmcheck(PTR x, void (*f) (void)) { return 1;}
int mmtrace(void) { return 1; }
#undef isascii
int isascii (x) { return __isascii (x);}

int getuid() { return 1;}


void ScreenGetCursor() { abort(); }
void ScreenSetCursor() { abort(); }
char *environ_vector[20];



#if 0
void c_error() { abort(); }
void c_parse() { abort(); }
#endif





void chown() {}
void pipe() {}
int sbrk() { return 0;}

#if 0	/* FIXME!  not sure if this is right?? */
void operator_chars() {}
#endif


#if 0
void core_file_matches_executable_p(x,y) { abort();}
void coffstab_build_psymtabs() { abort(); }
char *chill_demangle(const char *a) { return 0;}
void f_error () { abort(); }
void f_parse() { abort(); }

#endif

char *tilde_expand(char *n) {return strdup(n);}

int isnan() { return 0;}

int sleep(int secs) 
{
  unsigned long stop = GetTickCount() + secs * 1000;

  /* on win32s, sleep returns immediately if there's
     nothing else ready to run, so loop. */
  while (GetTickCount() < stop)
    Sleep (100);
  return 0;
}

char* strsignal(int x)
{
return 0;
}
@
