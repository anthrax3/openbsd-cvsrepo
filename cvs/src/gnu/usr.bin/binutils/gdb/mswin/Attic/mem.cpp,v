head	1.3;
access;
symbols
	OPENBSD_3_5:1.2.0.32
	OPENBSD_3_5_BASE:1.2
	OPENBSD_3_4:1.2.0.30
	OPENBSD_3_4_BASE:1.2
	OPENBSD_3_3:1.2.0.28
	OPENBSD_3_3_BASE:1.2
	OPENBSD_3_2:1.2.0.26
	OPENBSD_3_2_BASE:1.2
	OPENBSD_3_1:1.2.0.24
	OPENBSD_3_1_BASE:1.2
	OPENBSD_3_0:1.2.0.22
	OPENBSD_3_0_BASE:1.2
	OPENBSD_2_9:1.2.0.20
	OPENBSD_2_9_BASE:1.2
	OPENBSD_2_8:1.2.0.18
	OPENBSD_2_8_BASE:1.2
	OPENBSD_2_7:1.2.0.16
	OPENBSD_2_7_BASE:1.2
	new-binutils:1.2.0.14
	OPENBSD_2_6:1.2.0.12
	OPENBSD_2_6_BASE:1.2
	OPENBSD_2_5:1.2.0.10
	OPENBSD_2_5_BASE:1.2
	OPENBSD_2_4:1.2.0.8
	OPENBSD_2_4_BASE:1.2
	OPENBSD_2_3:1.2.0.6
	OPENBSD_2_3_BASE:1.2
	OPENBSD_2_2:1.2.0.4
	OPENBSD_2_2_BASE:1.2
	OPENBSD_2_1:1.2.0.2
	OPENBSD_2_1_BASE:1.2
	CYGNUS-961112:1.1.2.1
	CYGNUS:1.1.0.2;
locks; strict;
comment	@// @;


1.3
date	2004.05.21.20.23.31;	author kettenis;	state dead;
branches;
next	1.2;

1.2
date	96.11.23.03.46.46;	author niklas;	state Exp;
branches;
next	1.1;

1.1
date	96.11.19.14.30.42;	author niklas;	state dead;
branches
	1.1.2.1;
next	;

1.1.2.1
date	96.11.19.14.30.42;	author niklas;	state Exp;
branches;
next	;


desc
@@


1.3
log
@Resolve conflicts for GDB 6.1.  Add local patches.
ok deraadt@@
@
text
@#if 0
// mem.cpp : implementation file
//

#include "stdafx.h"
#include "regdoc.h"
#include "mem.h"

#ifdef _DEBUG
#undef THIS_FILE
static char BASED_CODE THIS_FILE[] = __FILE__;
#endif

extern CGuiApp theApp;
void redraw_allmemwins()
{ 
redraw_allwins(theApp.m_memTemplate);
}

 CFontInfo mem_fontinfo  ("MemFont", redraw_allmemwins);

/////////////////////////////////////////////////////////////////////////////
// CMem

IMPLEMENT_DYNCREATE(CMem, CView)

CMem::CMem()
{
}

CMem::~CMem()
{
}


BEGIN_MESSAGE_MAP(CMem, CView)
	//{{AFX_MSG_MAP(CMem)
	ON_EN_CHANGE(IDC_EDIT1, OnChangeEdit)
	//}}AFX_MSG_MAP
END_MESSAGE_MAP()


/////////////////////////////////////////////////////////////////////////////
// CMem drawing

void CMem::OnDraw(CDC* pDC)
{
  CRegDoc* pDoc = (CRegDoc *)GetDocument();
  CRect rect;
  GetClientRect (rect);
  /* Work out how many bytes we can go across */
  int wid = 40;

  int off = 0x100;
  int yco;
  CORE_ADDR addr = off;

  for (yco = 0; yco < rect.bottom; yco += mem_fontinfo.dunits.cy)
    {
      char abuf[20];
      sprintf(abuf,"%s ", paddr(addr)); /* FIXME - this bit's not done yet */

      pDC->TextOut(0,yco,abuf);
     addr += off;
    }
}


/////////////////////////////////////////////////////////////////////////////
// CMem message handlers
/////////////////////////////////////////////////////////////////////////////
// CMemFrame

IMPLEMENT_DYNCREATE(CMemFrame, CMiniMDIChildWnd)

CMemFrame::CMemFrame()
{
}

CMemFrame::~CMemFrame()
{
}


BEGIN_MESSAGE_MAP(CMemFrame, CMiniMDIChildWnd)
	//{{AFX_MSG_MAP(CMemFrame)
		// NOTE - the ClassWizard will add and remove mapping macros here.

    // ON_EN_CHANGE(ID_CMD_BUTTON_BREAKPOINT, on_edit_changed)
	//}}AFX_MSG_MAP
END_MESSAGE_MAP()


/////////////////////////////////////////////////////////////////////////////
// CMemFrame message handlers

BOOL CMemFrame::Create(LPCTSTR lpszClassName, LPCTSTR lpszWindowName, DWORD dwStyle, const RECT& rect, CWnd* pParentWnd, UINT nID, CCreateContext* pContext) 
{
	// TODO: Add your specialized code here and/or call the base class
	
	return CWnd::Create(lpszClassName, lpszWindowName, dwStyle, rect, pParentWnd, nID, pContext);
}

BOOL CMemFrame::OnCreateClient(LPCREATESTRUCT lpcs, CCreateContext* pContext) 
{
	// TODO: Add your specialized code here and/or call the base class
#if 1
bar.Create(this, IDD_DIALOG3, WS_CHILD|WS_VISIBLE|CBRS_TOP, 0);
bar.ShowWindow(1);
bar.SetWindowPos(0,0,0,0,0,SWP_NOSIZE);
#endif
#if 0
CRect x;
GetClientRect(x);
mini.Create(0, "memory", WS_CAPTION|WS_POPUP|WS_SYSMENU|WS_VISIBLE|MFS_THICKFRAME|MFS_SYNCACTIVE|MFS_MOVEFRAME, x, this, 0);
mini.SetWindowPos(0,40,40,100,100,0);
#endif
SetWindowText("memory");
	return CMiniMDIChildWnd::OnCreateClient(lpcs, pContext);
}

BOOL CMemFrame::PreCreateWindow(CREATESTRUCT& cs) 
{
	// TODO: Add your specialized code here and/or call the base class
//	cs.style &= ~(WS_THICKFRAME|WS_CAPTION);
//	cs.style |= WS_BORDER | WS_THICKFRAME;

	return CMiniMDIChildWnd::PreCreateWindow(cs);
}


/////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////
// CMemMini

IMPLEMENT_DYNCREATE(CMemMini, CMiniFrameWnd)

CMemMini::CMemMini()
{
}

CMemMini::~CMemMini()
{
}


BEGIN_MESSAGE_MAP(CMemMini, CMiniFrameWnd)
	//{{AFX_MSG_MAP(CMemMini)
		// NOTE - the ClassWizard will add and remove mapping macros here.
	//}}AFX_MSG_MAP
END_MESSAGE_MAP()


/////////////////////////////////////////////////////////////////////////////
// CMemMini message handlers


void CMem::Initialize()
{
  mem_fontinfo.Initialize();
}

void CMem::Terminate()
{
  mem_fontinfo.Terminate();
}

void CMem::OnChangeEdit() 
{
	// TODO: Add your control notification handler code here
	
}

void CMem::OnInitialUpdate() 
{
 // TODO: Add your specialized code here and/or call the base class
 

// edit.Create(WS_TABSTOP|WS_CHILD|WS_VISIBLE|WS_BORDER, CRect(0,0,20,20), this,ID_EDIT1);
 //edit.SetWindowPos(0,0,0,20,20,0);

 CView::OnInitialUpdate();
}
#endif
@


1.2
log
@Merge to Cygnus 961112 + add some support (not ready) for shared libs
@
text
@@


1.1
log
@file mem.cpp was initially added on branch CYGNUS.
@
text
@d1 184
@


1.1.2.1
log
@Import of 961112 Cygnus binutils+gas+ld+gdb+gprof
@
text
@a0 184
#if 0
// mem.cpp : implementation file
//

#include "stdafx.h"
#include "regdoc.h"
#include "mem.h"

#ifdef _DEBUG
#undef THIS_FILE
static char BASED_CODE THIS_FILE[] = __FILE__;
#endif

extern CGuiApp theApp;
void redraw_allmemwins()
{ 
redraw_allwins(theApp.m_memTemplate);
}

 CFontInfo mem_fontinfo  ("MemFont", redraw_allmemwins);

/////////////////////////////////////////////////////////////////////////////
// CMem

IMPLEMENT_DYNCREATE(CMem, CView)

CMem::CMem()
{
}

CMem::~CMem()
{
}


BEGIN_MESSAGE_MAP(CMem, CView)
	//{{AFX_MSG_MAP(CMem)
	ON_EN_CHANGE(IDC_EDIT1, OnChangeEdit)
	//}}AFX_MSG_MAP
END_MESSAGE_MAP()


/////////////////////////////////////////////////////////////////////////////
// CMem drawing

void CMem::OnDraw(CDC* pDC)
{
  CRegDoc* pDoc = (CRegDoc *)GetDocument();
  CRect rect;
  GetClientRect (rect);
  /* Work out how many bytes we can go across */
  int wid = 40;

  int off = 0x100;
  int yco;
  CORE_ADDR addr = off;

  for (yco = 0; yco < rect.bottom; yco += mem_fontinfo.dunits.cy)
    {
      char abuf[20];
      sprintf(abuf,"%s ", paddr(addr)); /* FIXME - this bit's not done yet */

      pDC->TextOut(0,yco,abuf);
     addr += off;
    }
}


/////////////////////////////////////////////////////////////////////////////
// CMem message handlers
/////////////////////////////////////////////////////////////////////////////
// CMemFrame

IMPLEMENT_DYNCREATE(CMemFrame, CMiniMDIChildWnd)

CMemFrame::CMemFrame()
{
}

CMemFrame::~CMemFrame()
{
}


BEGIN_MESSAGE_MAP(CMemFrame, CMiniMDIChildWnd)
	//{{AFX_MSG_MAP(CMemFrame)
		// NOTE - the ClassWizard will add and remove mapping macros here.

    // ON_EN_CHANGE(ID_CMD_BUTTON_BREAKPOINT, on_edit_changed)
	//}}AFX_MSG_MAP
END_MESSAGE_MAP()


/////////////////////////////////////////////////////////////////////////////
// CMemFrame message handlers

BOOL CMemFrame::Create(LPCTSTR lpszClassName, LPCTSTR lpszWindowName, DWORD dwStyle, const RECT& rect, CWnd* pParentWnd, UINT nID, CCreateContext* pContext) 
{
	// TODO: Add your specialized code here and/or call the base class
	
	return CWnd::Create(lpszClassName, lpszWindowName, dwStyle, rect, pParentWnd, nID, pContext);
}

BOOL CMemFrame::OnCreateClient(LPCREATESTRUCT lpcs, CCreateContext* pContext) 
{
	// TODO: Add your specialized code here and/or call the base class
#if 1
bar.Create(this, IDD_DIALOG3, WS_CHILD|WS_VISIBLE|CBRS_TOP, 0);
bar.ShowWindow(1);
bar.SetWindowPos(0,0,0,0,0,SWP_NOSIZE);
#endif
#if 0
CRect x;
GetClientRect(x);
mini.Create(0, "memory", WS_CAPTION|WS_POPUP|WS_SYSMENU|WS_VISIBLE|MFS_THICKFRAME|MFS_SYNCACTIVE|MFS_MOVEFRAME, x, this, 0);
mini.SetWindowPos(0,40,40,100,100,0);
#endif
SetWindowText("memory");
	return CMiniMDIChildWnd::OnCreateClient(lpcs, pContext);
}

BOOL CMemFrame::PreCreateWindow(CREATESTRUCT& cs) 
{
	// TODO: Add your specialized code here and/or call the base class
//	cs.style &= ~(WS_THICKFRAME|WS_CAPTION);
//	cs.style |= WS_BORDER | WS_THICKFRAME;

	return CMiniMDIChildWnd::PreCreateWindow(cs);
}


/////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////
// CMemMini

IMPLEMENT_DYNCREATE(CMemMini, CMiniFrameWnd)

CMemMini::CMemMini()
{
}

CMemMini::~CMemMini()
{
}


BEGIN_MESSAGE_MAP(CMemMini, CMiniFrameWnd)
	//{{AFX_MSG_MAP(CMemMini)
		// NOTE - the ClassWizard will add and remove mapping macros here.
	//}}AFX_MSG_MAP
END_MESSAGE_MAP()


/////////////////////////////////////////////////////////////////////////////
// CMemMini message handlers


void CMem::Initialize()
{
  mem_fontinfo.Initialize();
}

void CMem::Terminate()
{
  mem_fontinfo.Terminate();
}

void CMem::OnChangeEdit() 
{
	// TODO: Add your control notification handler code here
	
}

void CMem::OnInitialUpdate() 
{
 // TODO: Add your specialized code here and/or call the base class
 

// edit.Create(WS_TABSTOP|WS_CHILD|WS_VISIBLE|WS_BORDER, CRect(0,0,20,20), this,ID_EDIT1);
 //edit.SetWindowPos(0,0,0,20,20,0);

 CView::OnInitialUpdate();
}
#endif
@
