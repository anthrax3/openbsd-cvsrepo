head	1.3;
access;
symbols
	OPENBSD_3_5:1.2.0.32
	OPENBSD_3_5_BASE:1.2
	OPENBSD_3_4:1.2.0.30
	OPENBSD_3_4_BASE:1.2
	OPENBSD_3_3:1.2.0.28
	OPENBSD_3_3_BASE:1.2
	OPENBSD_3_2:1.2.0.26
	OPENBSD_3_2_BASE:1.2
	OPENBSD_3_1:1.2.0.24
	OPENBSD_3_1_BASE:1.2
	OPENBSD_3_0:1.2.0.22
	OPENBSD_3_0_BASE:1.2
	OPENBSD_2_9:1.2.0.20
	OPENBSD_2_9_BASE:1.2
	OPENBSD_2_8:1.2.0.18
	OPENBSD_2_8_BASE:1.2
	OPENBSD_2_7:1.2.0.16
	OPENBSD_2_7_BASE:1.2
	new-binutils:1.2.0.14
	OPENBSD_2_6:1.2.0.12
	OPENBSD_2_6_BASE:1.2
	OPENBSD_2_5:1.2.0.10
	OPENBSD_2_5_BASE:1.2
	OPENBSD_2_4:1.2.0.8
	OPENBSD_2_4_BASE:1.2
	OPENBSD_2_3:1.2.0.6
	OPENBSD_2_3_BASE:1.2
	OPENBSD_2_2:1.2.0.4
	OPENBSD_2_2_BASE:1.2
	OPENBSD_2_1:1.2.0.2
	OPENBSD_2_1_BASE:1.2
	CYGNUS-961112:1.1.2.1
	CYGNUS:1.1.0.2;
locks; strict;
comment	@ * @;


1.3
date	2004.05.21.20.23.30;	author kettenis;	state dead;
branches;
next	1.2;

1.2
date	96.11.23.03.46.20;	author niklas;	state Exp;
branches;
next	1.1;

1.1
date	96.11.19.14.30.06;	author niklas;	state dead;
branches
	1.1.2.1;
next	;

1.1.2.1
date	96.11.19.14.30.06;	author niklas;	state Exp;
branches;
next	;


desc
@@


1.3
log
@Resolve conflicts for GDB 6.1.  Add local patches.
ok deraadt@@
@
text
@/* Code to look inside gdb's structures to provide
   information suitable for a GUI or an ASCII representation */

#include <stdio.h>
#include <varargs.h>
#include <stdarg.h>
#include "../defs.h"
#include "../symtab.h"
#include "../../include/obstack.h"


/* This code builds all its stuff in one obstack
   so we never bother with freeing */


static int
build_info_block_frame_locals (b, frame)
     struct block *b;
     register FRAME frame;
{
  int nsyms;
  register int i;
  register struct symbol *sym;

  nsyms = BLOCK_NSYMS (b);

  for (i = 0; i < nsyms; i++)
    {
      sym = BLOCK_SYM (b, i);
      switch (SYMBOL_CLASS (sym))
	{
	case LOC_LOCAL:
	case LOC_REGISTER:
	case LOC_STATIC:
	case LOC_BASEREG:
	  add_record (sym, frame);
	  break;

	default:
	  /* Ignore symbols which are not locals.  */
	  break;
	}
    }
}

build_block_info (frame)
FRAME frame;
{
  register struct block *block = get_frame_block (frame);
  register int values_printed = 0;

  while (block != 0)
    {
      build_info_block_frame_locals (block, frame);

      /* After handling the function's top-level block, stop.
	 Don't continue to its superblock, the block of
	 per-file symbols.  */
      if (BLOCK_FUNCTION (block))
	break;
      block = BLOCK_SUPERBLOCK (block);
    }
}

@


1.2
log
@Merge to Cygnus 961112 + add some support (not ready) for shared libs
@
text
@@


1.1
log
@file gdbpeek.c was initially added on branch CYGNUS.
@
text
@d1 64
@


1.1.2.1
log
@Import of 961112 Cygnus binutils+gas+ld+gdb+gprof
@
text
@a0 64
/* Code to look inside gdb's structures to provide
   information suitable for a GUI or an ASCII representation */

#include <stdio.h>
#include <varargs.h>
#include <stdarg.h>
#include "../defs.h"
#include "../symtab.h"
#include "../../include/obstack.h"


/* This code builds all its stuff in one obstack
   so we never bother with freeing */


static int
build_info_block_frame_locals (b, frame)
     struct block *b;
     register FRAME frame;
{
  int nsyms;
  register int i;
  register struct symbol *sym;

  nsyms = BLOCK_NSYMS (b);

  for (i = 0; i < nsyms; i++)
    {
      sym = BLOCK_SYM (b, i);
      switch (SYMBOL_CLASS (sym))
	{
	case LOC_LOCAL:
	case LOC_REGISTER:
	case LOC_STATIC:
	case LOC_BASEREG:
	  add_record (sym, frame);
	  break;

	default:
	  /* Ignore symbols which are not locals.  */
	  break;
	}
    }
}

build_block_info (frame)
FRAME frame;
{
  register struct block *block = get_frame_block (frame);
  register int values_printed = 0;

  while (block != 0)
    {
      build_info_block_frame_locals (block, frame);

      /* After handling the function's top-level block, stop.
	 Don't continue to its superblock, the block of
	 per-file symbols.  */
      if (BLOCK_FUNCTION (block))
	break;
      block = BLOCK_SUPERBLOCK (block);
    }
}

@
