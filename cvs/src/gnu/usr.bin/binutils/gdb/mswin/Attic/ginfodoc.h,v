head	1.3;
access;
symbols
	OPENBSD_3_5:1.2.0.32
	OPENBSD_3_5_BASE:1.2
	OPENBSD_3_4:1.2.0.30
	OPENBSD_3_4_BASE:1.2
	OPENBSD_3_3:1.2.0.28
	OPENBSD_3_3_BASE:1.2
	OPENBSD_3_2:1.2.0.26
	OPENBSD_3_2_BASE:1.2
	OPENBSD_3_1:1.2.0.24
	OPENBSD_3_1_BASE:1.2
	OPENBSD_3_0:1.2.0.22
	OPENBSD_3_0_BASE:1.2
	OPENBSD_2_9:1.2.0.20
	OPENBSD_2_9_BASE:1.2
	OPENBSD_2_8:1.2.0.18
	OPENBSD_2_8_BASE:1.2
	OPENBSD_2_7:1.2.0.16
	OPENBSD_2_7_BASE:1.2
	new-binutils:1.2.0.14
	OPENBSD_2_6:1.2.0.12
	OPENBSD_2_6_BASE:1.2
	OPENBSD_2_5:1.2.0.10
	OPENBSD_2_5_BASE:1.2
	OPENBSD_2_4:1.2.0.8
	OPENBSD_2_4_BASE:1.2
	OPENBSD_2_3:1.2.0.6
	OPENBSD_2_3_BASE:1.2
	OPENBSD_2_2:1.2.0.4
	OPENBSD_2_2_BASE:1.2
	OPENBSD_2_1:1.2.0.2
	OPENBSD_2_1_BASE:1.2
	CYGNUS-961112:1.1.2.1
	CYGNUS:1.1.0.2;
locks; strict;
comment	@ * @;


1.3
date	2004.05.21.20.23.30;	author kettenis;	state dead;
branches;
next	1.2;

1.2
date	96.11.23.03.46.24;	author niklas;	state Exp;
branches;
next	1.1;

1.1
date	96.11.19.14.30.13;	author niklas;	state dead;
branches
	1.1.2.1;
next	;

1.1.2.1
date	96.11.19.14.30.13;	author niklas;	state Exp;
branches;
next	;


desc
@@


1.3
log
@Resolve conflicts for GDB 6.1.  Add local patches.
ok deraadt@@
@
text
@
class CGnuInfoNode
{

 public:
  CString name;			/* name of node */
  CGnuInfoNode *prev;
  CGnuInfoNode *next;
  CGnuInfoNode *up;
  class CGnuInfoFile *file;	/* Which file is the node in */
  int offset;
  int pagenumber;
  void init (CGnuInfoNode *up, CGnuInfoNode *prev, CGnuInfoNode *next,
	     class  CGnuInfoFile *file, int off, int pagenumber);

  CGnuInfoNode(const char *n);
  int GetPageDepth();

};

#define BSIZE 512

class CGnuInfoFile
{

public:
CGnuInfoFile();
  CGnuInfoFile *next;
  CFile file;			
  char buf[BSIZE];
  int gc();
  long where();
  void set(long x);

  int off;
  int idx;
  int len;

};



class CGnuInfoDoc : public CDocument
{


 protected:			// create from serialization only
  CGnuInfoDoc();
  DECLARE_DYNCREATE(CGnuInfoDoc)
    CGnuInfoNode *LookupNode(const char *name);
  // Attributes
public:
  CGnuInfoFile *head;  
  // Operations
public:
  int npages;
  void Next();
  void Prev();
  void info(char *);
  void Up();
  CGnuInfoNode *nodes;
  void look(char *what, int *ptr);
  void GetPage(class CGnuInfoNode *want, CStringArray &p);
  CString GetPageName(int n);
  
  CGnuInfoNode *GetNode (int i);  
  int scanfile (CGnuInfoFile *, const char *, const char *);
  CMapStringToPtr map;
  CPtrArray vector;
  // Overrides
  // ClassWizard generated virtual function overrides
  //{{AFX_VIRTUAL(CGnuInfoDoc)
public:
  virtual BOOL OnNewDocument();
  virtual BOOL OnOpenDocument(LPCTSTR lpszPathName);
  virtual void OnCloseDocument();
  //}}AFX_VIRTUAL
  
  // Implementation
public:
  /* pointer to last place history read from, or hindex if not */
  
  virtual ~CGnuInfoDoc();
  virtual void Serialize(CArchive& ar);	// overridden for document i/o
  
  
protected:
  void GotoPage(int n);
  void RememberPage(int n);
#define HISTORY 20
  
  
  
  // transaction basis.
  int open;
  
  void InfoWorker (char *&dst, int val, char*name);  
  
  // Generated message map functions

protected:
  //{{AFX_MSG(CGnuInfoDoc)
  
  //}}AFX_MSG
  DECLARE_MESSAGE_MAP()



  };

/////////////////////////////////////////////////////////////////////////////
@


1.2
log
@Merge to Cygnus 961112 + add some support (not ready) for shared libs
@
text
@@


1.1
log
@file ginfodoc.h was initially added on branch CYGNUS.
@
text
@d1 111
@


1.1.2.1
log
@Import of 961112 Cygnus binutils+gas+ld+gdb+gprof
@
text
@a0 111

class CGnuInfoNode
{

 public:
  CString name;			/* name of node */
  CGnuInfoNode *prev;
  CGnuInfoNode *next;
  CGnuInfoNode *up;
  class CGnuInfoFile *file;	/* Which file is the node in */
  int offset;
  int pagenumber;
  void init (CGnuInfoNode *up, CGnuInfoNode *prev, CGnuInfoNode *next,
	     class  CGnuInfoFile *file, int off, int pagenumber);

  CGnuInfoNode(const char *n);
  int GetPageDepth();

};

#define BSIZE 512

class CGnuInfoFile
{

public:
CGnuInfoFile();
  CGnuInfoFile *next;
  CFile file;			
  char buf[BSIZE];
  int gc();
  long where();
  void set(long x);

  int off;
  int idx;
  int len;

};



class CGnuInfoDoc : public CDocument
{


 protected:			// create from serialization only
  CGnuInfoDoc();
  DECLARE_DYNCREATE(CGnuInfoDoc)
    CGnuInfoNode *LookupNode(const char *name);
  // Attributes
public:
  CGnuInfoFile *head;  
  // Operations
public:
  int npages;
  void Next();
  void Prev();
  void info(char *);
  void Up();
  CGnuInfoNode *nodes;
  void look(char *what, int *ptr);
  void GetPage(class CGnuInfoNode *want, CStringArray &p);
  CString GetPageName(int n);
  
  CGnuInfoNode *GetNode (int i);  
  int scanfile (CGnuInfoFile *, const char *, const char *);
  CMapStringToPtr map;
  CPtrArray vector;
  // Overrides
  // ClassWizard generated virtual function overrides
  //{{AFX_VIRTUAL(CGnuInfoDoc)
public:
  virtual BOOL OnNewDocument();
  virtual BOOL OnOpenDocument(LPCTSTR lpszPathName);
  virtual void OnCloseDocument();
  //}}AFX_VIRTUAL
  
  // Implementation
public:
  /* pointer to last place history read from, or hindex if not */
  
  virtual ~CGnuInfoDoc();
  virtual void Serialize(CArchive& ar);	// overridden for document i/o
  
  
protected:
  void GotoPage(int n);
  void RememberPage(int n);
#define HISTORY 20
  
  
  
  // transaction basis.
  int open;
  
  void InfoWorker (char *&dst, int val, char*name);  
  
  // Generated message map functions

protected:
  //{{AFX_MSG(CGnuInfoDoc)
  
  //}}AFX_MSG
  DECLARE_MESSAGE_MAP()



  };

/////////////////////////////////////////////////////////////////////////////
@
