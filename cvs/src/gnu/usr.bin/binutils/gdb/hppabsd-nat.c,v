head	1.6;
access;
symbols
	OPENBSD_6_0:1.6.0.16
	OPENBSD_6_0_BASE:1.6
	OPENBSD_5_9:1.6.0.12
	OPENBSD_5_9_BASE:1.6
	OPENBSD_5_8:1.6.0.14
	OPENBSD_5_8_BASE:1.6
	OPENBSD_5_7:1.6.0.6
	OPENBSD_5_7_BASE:1.6
	OPENBSD_5_6:1.6.0.10
	OPENBSD_5_6_BASE:1.6
	OPENBSD_5_5:1.6.0.8
	OPENBSD_5_5_BASE:1.6
	OPENBSD_5_4:1.6.0.4
	OPENBSD_5_4_BASE:1.6
	OPENBSD_5_3:1.6.0.2
	OPENBSD_5_3_BASE:1.6
	OPENBSD_5_2:1.5.0.2
	OPENBSD_5_2_BASE:1.5
	OPENBSD_5_1_BASE:1.4
	OPENBSD_5_1:1.4.0.8
	OPENBSD_5_0:1.4.0.6
	OPENBSD_5_0_BASE:1.4
	OPENBSD_4_9:1.4.0.4
	OPENBSD_4_9_BASE:1.4
	OPENBSD_4_8:1.4.0.2
	OPENBSD_4_8_BASE:1.4
	OPENBSD_4_7:1.3.0.16
	OPENBSD_4_7_BASE:1.3
	OPENBSD_4_6:1.3.0.18
	OPENBSD_4_6_BASE:1.3
	OPENBSD_4_5:1.3.0.14
	OPENBSD_4_5_BASE:1.3
	OPENBSD_4_4:1.3.0.12
	OPENBSD_4_4_BASE:1.3
	OPENBSD_4_3:1.3.0.10
	OPENBSD_4_3_BASE:1.3
	OPENBSD_4_2:1.3.0.8
	OPENBSD_4_2_BASE:1.3
	OPENBSD_4_1:1.3.0.6
	OPENBSD_4_1_BASE:1.3
	OPENBSD_4_0:1.3.0.4
	OPENBSD_4_0_BASE:1.3
	OPENBSD_3_9:1.3.0.2
	OPENBSD_3_9_BASE:1.3
	OPENBSD_3_8:1.2.0.4
	OPENBSD_3_8_BASE:1.2
	OPENBSD_3_7:1.2.0.2
	OPENBSD_3_7_BASE:1.2
	GDB_6_3:1.1.1.1
	FSF:1.1.1
	OPENBSD_3_6:1.1.0.2
	OPENBSD_3_6_BASE:1.1;
locks; strict;
comment	@ * @;


1.6
date	2012.08.29.19.03.35;	author kettenis;	state Exp;
branches;
next	1.5;

1.5
date	2012.05.04.20.42.37;	author kettenis;	state Exp;
branches;
next	1.4;

1.4
date	2010.05.02.19.38.47;	author kettenis;	state Exp;
branches;
next	1.3;

1.3
date	2005.11.25.18.26.43;	author kettenis;	state Exp;
branches;
next	1.2;

1.2
date	2004.12.27.14.00.36;	author kettenis;	state Exp;
branches;
next	1.1;

1.1
date	2004.05.21.20.23.07;	author kettenis;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	2004.12.27.13.11.20;	author kettenis;	state Exp;
branches;
next	;


desc
@@


1.6
log
@Adjust for changes to "struct reg".
@
text
@/* Native-dependent code for HP PA-RISC BSD's.

   Copyright 2004, 2005 Free Software Foundation, Inc.

   This file is part of GDB.

   This program is free software; you can redistribute it and/or modify
   it under the terms of the GNU General Public License as published by
   the Free Software Foundation; either version 2 of the License, or
   (at your option) any later version.

   This program is distributed in the hope that it will be useful,
   but WITHOUT ANY WARRANTY; without even the implied warranty of
   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
   GNU General Public License for more details.

   You should have received a copy of the GNU General Public License
   along with this program; if not, write to the Free Software
   Foundation, Inc., 59 Temple Place - Suite 330,
   Boston, MA 02111-1307, USA.  */

#include "defs.h"
#include "inferior.h"
#include "regcache.h"
#include "target.h"

#include <sys/types.h>
#include <sys/ptrace.h>
#include <machine/reg.h>

#include "obsd-nat.h"
#include "hppa-tdep.h"
#include "inf-ptrace.h"

static int
hppabsd_gregset_supplies_p (int regnum)
{
  return (regnum >= HPPA_R0_REGNUM && regnum <= HPPA_CR27_REGNUM);
}

static int
hppabsd_fpregset_supplies_p (int regnum)
{
  return (regnum >= HPPA_FP0_REGNUM && regnum < HPPA_FP0_REGNUM + 32 * 2);
}

/* Supply the general-purpose registers stored in GREGS to REGCACHE.  */

static void
hppabsd_supply_gregset (struct regcache *regcache, const void *gregs)
{
  const char *regs = gregs;
  int regnum;

  for (regnum = HPPA_R1_REGNUM; regnum <= HPPA_R31_REGNUM; regnum++)
    regcache_raw_supply (regcache, regnum, regs + regnum * 4);

  regcache_raw_supply (regcache, HPPA_IPSW_REGNUM, regs);
  regcache_raw_supply (regcache, HPPA_SAR_REGNUM, regs + 32 * 4);
  regcache_raw_supply (regcache, HPPA_PCSQ_HEAD_REGNUM, regs + 33 * 4);
  regcache_raw_supply (regcache, HPPA_PCSQ_TAIL_REGNUM, regs + 34 * 4);
  regcache_raw_supply (regcache, HPPA_PCOQ_HEAD_REGNUM, regs + 35 * 4);
  regcache_raw_supply (regcache, HPPA_PCOQ_TAIL_REGNUM, regs + 36 * 4);
  regcache_raw_supply (regcache, HPPA_SR0_REGNUM, regs + 37 * 4);
  regcache_raw_supply (regcache, HPPA_SR1_REGNUM, regs + 38 * 4);
  regcache_raw_supply (regcache, HPPA_SR2_REGNUM, regs + 39 * 4);
  regcache_raw_supply (regcache, HPPA_SR3_REGNUM, regs + 40 * 4);
  regcache_raw_supply (regcache, HPPA_SR4_REGNUM, regs + 41 * 4);
  regcache_raw_supply (regcache, HPPA_SR5_REGNUM, regs + 42 * 4);
  regcache_raw_supply (regcache, HPPA_SR6_REGNUM, regs + 43 * 4);
  regcache_raw_supply (regcache, HPPA_SR7_REGNUM, regs + 44 * 4);
  regcache_raw_supply (regcache, HPPA_CR26_REGNUM, regs + 45 * 4);
  regcache_raw_supply (regcache, HPPA_CR27_REGNUM, regs + 46 * 4);
}

/* Supply the floating-point registers stored in FPREGS to REGCACHE.  */

static void
hppabsd_supply_fpregset (struct regcache *regcache, const void *fpregs)
{
  const char *regs = fpregs;
  int regnum;

  for (regnum = HPPA_FP0_REGNUM; regnum < HPPA_FP0_REGNUM + 32 * 2; regnum++)
    regcache_raw_supply (regcache, regnum,
			 regs + (regnum - HPPA_FP0_REGNUM) * 4);
}

/* Collect the general-purpose registers from REGCACHE and store them
   in GREGS.  */

static void
hppabsd_collect_gregset (const struct regcache *regcache,
			  void *gregs, int regnum)
{
  char *regs = gregs;
  int i;

  for (i = HPPA_R1_REGNUM; i <= HPPA_R31_REGNUM; i++)
    {
      if (regnum == -1 || regnum == i)
	regcache_raw_collect (regcache, i, regs + i * 4);
    }

  if (regnum == -1 || regnum == HPPA_IPSW_REGNUM)
    regcache_raw_collect (regcache, HPPA_IPSW_REGNUM, regs);
  if (regnum == -1 || regnum == HPPA_SAR_REGNUM)
    regcache_raw_collect (regcache, HPPA_SAR_REGNUM, regs + 32 * 4);
  if (regnum == -1 || regnum == HPPA_PCSQ_HEAD_REGNUM)
    regcache_raw_collect (regcache, HPPA_PCSQ_HEAD_REGNUM, regs + 33 * 4);
  if (regnum == -1 || regnum == HPPA_PCSQ_TAIL_REGNUM)
    regcache_raw_collect (regcache, HPPA_PCSQ_TAIL_REGNUM, regs + 34 * 4);
  if (regnum == -1 || regnum == HPPA_PCOQ_HEAD_REGNUM)
    regcache_raw_collect (regcache, HPPA_PCOQ_HEAD_REGNUM, regs + 35 * 4);
  if (regnum == -1 || regnum == HPPA_PCOQ_TAIL_REGNUM)
    regcache_raw_collect (regcache, HPPA_PCOQ_TAIL_REGNUM, regs + 36 * 4);
  if (regnum == -1 || regnum == HPPA_SR0_REGNUM)
    regcache_raw_collect (regcache, HPPA_SR0_REGNUM, regs + 37 * 4);
  if (regnum == -1 || regnum == HPPA_SR1_REGNUM)
    regcache_raw_collect (regcache, HPPA_SR1_REGNUM, regs + 38 * 4);
  if (regnum == -1 || regnum == HPPA_SR2_REGNUM)
    regcache_raw_collect (regcache, HPPA_SR2_REGNUM, regs + 39 * 4);
  if (regnum == -1 || regnum == HPPA_SR3_REGNUM)
    regcache_raw_collect (regcache, HPPA_SR3_REGNUM, regs + 40 * 4);
  if (regnum == -1 || regnum == HPPA_SR4_REGNUM)
    regcache_raw_collect (regcache, HPPA_SR4_REGNUM, regs + 41 * 4);
  if (regnum == -1 || regnum == HPPA_SR5_REGNUM)
    regcache_raw_collect (regcache, HPPA_SR5_REGNUM, regs + 42 * 4);
  if (regnum == -1 || regnum == HPPA_SR6_REGNUM)
    regcache_raw_collect (regcache, HPPA_SR6_REGNUM, regs + 43 * 4);
  if (regnum == -1 || regnum == HPPA_SR7_REGNUM)
    regcache_raw_collect (regcache, HPPA_SR7_REGNUM, regs + 44 * 4);
  if (regnum == -1 || regnum == HPPA_CR26_REGNUM)
    regcache_raw_collect (regcache, HPPA_CR26_REGNUM, regs + 45 * 4);
  if (regnum == -1 || regnum == HPPA_CR27_REGNUM)
    regcache_raw_collect (regcache, HPPA_CR27_REGNUM, regs + 46 * 4);
}

/* Collect the floating-point registers from REGCACHE and store them
   in FPREGS.  */

static void
hppabsd_collect_fpregset (struct regcache *regcache,
			  void *fpregs, int regnum)
{
  char *regs = fpregs;
  int i;

  for (i = HPPA_FP0_REGNUM; i < HPPA_FP0_REGNUM + 32 * 2; i++)
    {
      if (regnum == -1 || regnum == i)
	regcache_raw_collect (regcache, i, regs + (i - HPPA_FP0_REGNUM) * 4);
    }
}


/* Fetch register REGNUM from the inferior.  If REGNUM is -1, do this
   for all registers (including the floating-point registers).  */

static void
hppabsd_fetch_registers (int regnum)
{
  struct regcache *regcache = current_regcache;
  int pid;

  /* Cater for systems like OpenBSD, that implement threads as
     separate processes.  */
  pid = ptid_get_lwp (inferior_ptid);
  if (pid == 0)
    pid = ptid_get_pid (inferior_ptid);


  if (regnum == -1 || hppabsd_gregset_supplies_p (regnum))
    {
      struct reg regs;

      if (ptrace (PT_GETREGS, pid, (PTRACE_TYPE_ARG3) &regs, 0) == -1)
	perror_with_name (_("Couldn't get registers"));

      hppabsd_supply_gregset (regcache, &regs);
    }

  if (regnum == -1 || hppabsd_fpregset_supplies_p (regnum))
    {
      struct fpreg fpregs;

      if (ptrace (PT_GETFPREGS, pid, (PTRACE_TYPE_ARG3) &fpregs, 0) == -1)
	perror_with_name (_("Couldn't get floating point status"));

      hppabsd_supply_fpregset (current_regcache, &fpregs);
    }
}

/* Store register REGNUM back into the inferior.  If REGNUM is -1, do
   this for all registers (including the floating-point registers).  */

static void
hppabsd_store_registers (int regnum)
{
  int pid;

  /* Cater for systems like OpenBSD, that implement threads as
     separate processes.  */
  pid = ptid_get_lwp (inferior_ptid);
  if (pid == 0)
    pid = ptid_get_pid (inferior_ptid);

  if (regnum == -1 || hppabsd_gregset_supplies_p (regnum))
    {
      struct reg regs;

      if (ptrace (PT_GETREGS, pid, (PTRACE_TYPE_ARG3) &regs, 0) == -1)
        perror_with_name (_("Couldn't get registers"));

      hppabsd_collect_gregset (current_regcache, &regs, regnum);

      if (ptrace (PT_SETREGS, pid, (PTRACE_TYPE_ARG3) &regs, 0) == -1)
        perror_with_name (_("Couldn't write registers"));
    }

  if (regnum == -1 || hppabsd_fpregset_supplies_p (regnum))
    {
      struct fpreg fpregs;

      if (ptrace (PT_GETFPREGS, pid, (PTRACE_TYPE_ARG3) &fpregs, 0) == -1)
	perror_with_name (_("Couldn't get floating point status"));

      hppabsd_collect_fpregset (current_regcache, &fpregs, regnum);

      if (ptrace (PT_SETFPREGS, pid, (PTRACE_TYPE_ARG3) &fpregs, 0) == -1)
	perror_with_name (_("Couldn't write floating point status"));
    }
}

/* Provide a prototype to silence -Wmissing-prototypes.  */
void _initialize_hppabsd_nat (void);

void
_initialize_hppabsd_nat (void)
{
  struct target_ops *t;

  /* Add in local overrides.  */
  t = inf_ptrace_target ();
  t->to_fetch_registers = hppabsd_fetch_registers;
  t->to_store_registers = hppabsd_store_registers;
  t->to_pid_to_str = obsd_pid_to_str;
  t->to_find_new_threads = obsd_find_new_threads;
  t->to_wait = obsd_wait;
  add_target (t);
}
@


1.5
log
@Enable multi-threaded debugging on hppa.
@
text
@d38 1
a38 1
  return (regnum >= HPPA_R0_REGNUM && regnum <= HPPA_PCOQ_TAIL_REGNUM);
d58 16
a73 3
  regcache_raw_supply (regcache, HPPA_SAR_REGNUM, regs);
  regcache_raw_supply (regcache, HPPA_PCOQ_HEAD_REGNUM, regs + 32 * 4);
  regcache_raw_supply (regcache, HPPA_PCOQ_TAIL_REGNUM, regs + 33 * 4);
d105 2
d108 5
a112 1
    regcache_raw_collect (regcache, HPPA_SAR_REGNUM, regs);
d114 1
a114 1
    regcache_raw_collect (regcache, HPPA_PCOQ_HEAD_REGNUM, regs + 32 * 4);
d116 21
a136 1
    regcache_raw_collect (regcache, HPPA_PCOQ_TAIL_REGNUM, regs + 33 * 4);
@


1.4
log
@Add support for floating-point registers on OpenBSD/hppa.
@
text
@d31 1
d125 8
d138 1
a138 2
      if (ptrace (PT_GETREGS, PIDGET (inferior_ptid),
		  (PTRACE_TYPE_ARG3) &regs, 0) == -1)
d148 1
a148 2
      if (ptrace (PT_GETFPREGS, PIDGET (inferior_ptid),
		  (PTRACE_TYPE_ARG3) &fpregs, 0) == -1)
d161 8
d173 1
a173 2
      if (ptrace (PT_GETREGS, PIDGET (inferior_ptid),
                  (PTRACE_TYPE_ARG3) &regs, 0) == -1)
d178 1
a178 2
      if (ptrace (PT_SETREGS, PIDGET (inferior_ptid),
	          (PTRACE_TYPE_ARG3) &regs, 0) == -1)
d186 1
a186 2
      if (ptrace (PT_GETFPREGS, PIDGET (inferior_ptid),
		  (PTRACE_TYPE_ARG3) &fpregs, 0) == -1)
d191 1
a191 2
      if (ptrace (PT_SETFPREGS, PIDGET (inferior_ptid),
		  (PTRACE_TYPE_ARG3) &fpregs, 0) == -1)
d208 3
@


1.3
log
@Cut hppa over to inf-ptrace.c, making fork following work.
tested by miod@@.
@
text
@d40 6
d62 13
d98 17
d135 11
d167 15
@


1.2
log
@Resolve conflicts for GDB 6.3.  Add local patches.
ok deraadt@@
@
text
@d3 1
a3 1
   Copyright 2004 Free Software Foundation, Inc.
d25 1
d32 1
d84 2
a85 2
void
fetch_inferior_registers (int regnum)
d95 1
a95 1
	perror_with_name ("Couldn't get registers");
d104 2
a105 2
void
store_inferior_registers (int regnum)
d113 1
a113 1
        perror_with_name ("Couldn't get registers");
d119 1
a119 1
        perror_with_name ("Couldn't write registers");
d121 15
@


1.1
log
@Resolve conflicts for GDB 6.1.  Add local patches.
ok deraadt@@
@
text
@a37 6
static int
hppabsd_fpregset_supplies_p (int regnum)
{
  return 0;
}

d67 1
a67 1
	regcache_raw_collect (regcache, regnum, regs + i * 4);
d92 1
a92 1
		  (PTRACE_ARG3_TYPE) &regs, 0) == -1)
d110 1
a110 1
                  (PTRACE_ARG3_TYPE) &regs, 0) == -1)
d116 1
a116 1
	          (PTRACE_ARG3_TYPE) &regs, 0) == -1)
@


1.1.1.1
log
@GDB 6.3 (excluding .info files)
@
text
@d38 6
d73 1
a73 1
	regcache_raw_collect (regcache, i, regs + i * 4);
d98 1
a98 1
		  (PTRACE_TYPE_ARG3) &regs, 0) == -1)
d116 1
a116 1
                  (PTRACE_TYPE_ARG3) &regs, 0) == -1)
d122 1
a122 1
	          (PTRACE_TYPE_ARG3) &regs, 0) == -1)
@

