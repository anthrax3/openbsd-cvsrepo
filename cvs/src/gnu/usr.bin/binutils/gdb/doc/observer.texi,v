head	1.2;
access;
symbols
	OPENBSD_6_1_BASE:1.2
	OPENBSD_6_0:1.2.0.44
	OPENBSD_6_0_BASE:1.2
	OPENBSD_5_9:1.2.0.40
	OPENBSD_5_9_BASE:1.2
	OPENBSD_5_8:1.2.0.42
	OPENBSD_5_8_BASE:1.2
	OPENBSD_5_7:1.2.0.34
	OPENBSD_5_7_BASE:1.2
	OPENBSD_5_6:1.2.0.38
	OPENBSD_5_6_BASE:1.2
	OPENBSD_5_5:1.2.0.36
	OPENBSD_5_5_BASE:1.2
	OPENBSD_5_4:1.2.0.32
	OPENBSD_5_4_BASE:1.2
	OPENBSD_5_3:1.2.0.30
	OPENBSD_5_3_BASE:1.2
	OPENBSD_5_2:1.2.0.28
	OPENBSD_5_2_BASE:1.2
	OPENBSD_5_1_BASE:1.2
	OPENBSD_5_1:1.2.0.26
	OPENBSD_5_0:1.2.0.24
	OPENBSD_5_0_BASE:1.2
	OPENBSD_4_9:1.2.0.22
	OPENBSD_4_9_BASE:1.2
	OPENBSD_4_8:1.2.0.20
	OPENBSD_4_8_BASE:1.2
	OPENBSD_4_7:1.2.0.16
	OPENBSD_4_7_BASE:1.2
	OPENBSD_4_6:1.2.0.18
	OPENBSD_4_6_BASE:1.2
	OPENBSD_4_5:1.2.0.14
	OPENBSD_4_5_BASE:1.2
	OPENBSD_4_4:1.2.0.12
	OPENBSD_4_4_BASE:1.2
	OPENBSD_4_3:1.2.0.10
	OPENBSD_4_3_BASE:1.2
	OPENBSD_4_2:1.2.0.8
	OPENBSD_4_2_BASE:1.2
	OPENBSD_4_1:1.2.0.6
	OPENBSD_4_1_BASE:1.2
	OPENBSD_4_0:1.2.0.4
	OPENBSD_4_0_BASE:1.2
	OPENBSD_3_9:1.2.0.2
	OPENBSD_3_9_BASE:1.2
	OPENBSD_3_8:1.1.1.2.0.4
	OPENBSD_3_8_BASE:1.1.1.2
	OPENBSD_3_7:1.1.1.2.0.2
	OPENBSD_3_7_BASE:1.1.1.2
	GDB_6_3:1.1.1.2
	OPENBSD_3_6:1.1.1.1.0.2
	OPENBSD_3_6_BASE:1.1.1.1
	GDB_6_1:1.1.1.1
	FSF:1.1.1;
locks; strict;
comment	@# @;


1.2
date	2005.12.03.10.34.15;	author kettenis;	state Exp;
branches;
next	1.1;

1.1
date	2004.05.21.19.15.02;	author kettenis;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	2004.05.21.19.15.02;	author kettenis;	state Exp;
branches;
next	1.1.1.2;

1.1.1.2
date	2004.12.27.13.12.49;	author kettenis;	state Exp;
branches;
next	;


desc
@@


1.2
log
@Threads support.
@
text
@@@c -*-texinfo-*-
@@node GDB Observers
@@appendix @@value{GDBN} Currently available observers

@@section Implementation rationale
@@cindex observers implementation rationale

An @@dfn{observer} is an entity which is interested in being notified
when GDB reaches certain states, or certain events occur in GDB.
The entity being observed is called the @@dfn{subject}.  To receive
notifications, the observer attaches a callback to the subject.
One subject can have several observers.

@@file{observer.c} implements an internal generic low-level event
notification mechanism.  This generic event notification mechanism is
then re-used to implement the exported high-level notification
management routines for all possible notifications.

The current implementation of the generic observer provides support
for contextual data.  This contextual data is given to the subject
when attaching the callback.  In return, the subject will provide
this contextual data back to the observer as a parameter of the
callback.

Note that the current support for the contextual data is only partial,
as it lacks a mechanism that would deallocate this data when the
callback is detached.  This is not a problem so far, as this contextual
data is only used internally to hold a function pointer.  Later on, if
a certain observer needs to provide support for user-level contextual
data, then the generic notification mechanism will need to be
enhanced to allow the observer to provide a routine to deallocate the
data when attaching the callback.

The observer implementation is also currently not reentrant.
In particular, it is therefore not possible to call the attach
or detach routines during a notification.

@@section Debugging
Observer notifications can be traced using the command @@samp{set debug
observer 1} (@@pxref{Debugging Output, , Optional messages about
internal happenings, gdb, Debugging with @@var{GDBN}}).

@@section @@code{normal_stop} Notifications
@@cindex @@code{normal_stop} observer
@@cindex notification about inferior execution stop

@@value{GDBN} notifies all @@code{normal_stop} observers when the
inferior execution has just stopped, the associated messages and
annotations have been printed, and the control is about to be returned
to the user. 

Note that the @@code{normal_stop} notification is not emitted when
the execution stops due to a breakpoint, and this breakpoint has
a condition that is not met.  If the breakpoint has any associated
commands list, the commands are executed after the notification
is emitted.

The following interfaces are available to manage observers:

@@deftypefun extern struct observer *observer_attach_@@var{event} (observer_@@var{event}_ftype *@@var{f})
Using the function @@var{f}, create an observer that is notified when
ever @@var{event} occures, return the observer.
@@end deftypefun

@@deftypefun extern void observer_detach_@@var{event} (struct observer *@@var{observer});
Remove @@var{observer} from the list of observers to be notified when
@@var{event} occurs.
@@end deftypefun

@@deftypefun extern void observer_notify_@@var{event} (void);
Send a notification to all @@var{event} observers.
@@end deftypefun

The following observable events are defined:

@@c note: all events must take at least one parameter.

@@deftypefun void normal_stop (struct bpstats *@@var{bs})
The inferior has stopped for real.
@@end deftypefun

@@deftypefun void target_changed (struct target_ops *@@var{target})
The target's register contents have changed.
@@end deftypefun

@@deftypefun void inferior_created (struct target_ops *@@var{objfile}, int @@var{from_tty})
@@value{GDBN} has just connected to an inferior.  For @@samp{run},
@@value{GDBN} calls this observer while the inferior is still stopped
at the entry-point instruction.  For @@samp{attach} and @@samp{core},
@@value{GDBN} calls this observer immediately after connecting to the
inferior, and before any information on the inferior has been printed.
@@end deftypefun

@@deftypefun void solib_loaded (struct so_list *@@var{solib})
The shared library specified by @@var{solib} has been loaded.  Note that
when @@value{GDBN} calls this observer, the library's symbols probably
haven't been loaded yet.
@@end deftypefun

@@deftypefun void solib_unloaded (struct so_list *@@var{solib})
The specified shared library has been discovered to be unloaded.
@@end deftypefun
@


1.1
log
@Initial revision
@
text
@d38 5
d58 1
a58 2
The following interface is available to manage @@code{normal_stop}
observers:
d60 3
a62 3
@@deftypefun extern struct observer *observer_attach_normal_stop (observer_normal_stop_ftype *@@var{f})
Attach the given @@code{normal_stop} callback function @@var{f} and
return the associated observer.
d65 1
a65 1
@@deftypefun extern void observer_detach_normal_stop (struct observer *@@var{observer});
d67 5
a71 1
a @@code{normal_stop} event occurs.
d74 6
a79 2
@@deftypefun extern void observer_notify_normal_stop (void);
Send a notification to all @@code{normal_stop} observers.
d82 3
d86 17
@


1.1.1.1
log
@GDB 6.1 (excluding .info files)
@
text
@@


1.1.1.2
log
@GDB 6.3 (excluding .info files)
@
text
@a37 5
@@section Debugging
Observer notifications can be traced using the command @@samp{set debug
observer 1} (@@pxref{Debugging Output, , Optional messages about
internal happenings, gdb, Debugging with @@var{GDBN}}).

d53 2
a54 1
The following interfaces are available to manage observers:
d56 3
a58 3
@@deftypefun extern struct observer *observer_attach_@@var{event} (observer_@@var{event}_ftype *@@var{f})
Using the function @@var{f}, create an observer that is notified when
ever @@var{event} occures, return the observer.
d61 1
a61 1
@@deftypefun extern void observer_detach_@@var{event} (struct observer *@@var{observer});
d63 1
a63 13
@@var{event} occurs.
@@end deftypefun

@@deftypefun extern void observer_notify_@@var{event} (void);
Send a notification to all @@var{event} observers.
@@end deftypefun

The following observable events are defined:

@@c note: all events must take at least one parameter.

@@deftypefun void normal_stop (struct bpstats *@@var{bs})
The inferior has stopped for real.
d66 2
a67 2
@@deftypefun void target_changed (struct target_ops *@@var{target})
The target's register contents have changed.
a69 11
@@deftypefun void inferior_created (struct target_ops *@@var{objfile}, int @@var{from_tty})
@@value{GDBN} has just connected to an inferior.  For @@samp{run},
@@value{GDBN} calls this observer while the inferior is still stopped
at the entry-point instruction.  For @@samp{attach} and @@samp{core},
@@value{GDBN} calls this observer immediately after connecting to the
inferior, and before any information on the inferior has been printed.
@@end deftypefun

@@deftypefun void solib_unloaded (struct so_list *@@var{solib})
The specified shared library has been discovered to be unloaded.
@@end deftypefun
@

