head	1.2;
access;
symbols
	OPENBSD_6_1:1.2.0.86
	OPENBSD_6_1_BASE:1.2
	OPENBSD_6_0:1.2.0.82
	OPENBSD_6_0_BASE:1.2
	OPENBSD_5_9:1.2.0.78
	OPENBSD_5_9_BASE:1.2
	OPENBSD_5_8:1.2.0.80
	OPENBSD_5_8_BASE:1.2
	OPENBSD_5_7:1.2.0.72
	OPENBSD_5_7_BASE:1.2
	OPENBSD_5_6:1.2.0.76
	OPENBSD_5_6_BASE:1.2
	OPENBSD_5_5:1.2.0.74
	OPENBSD_5_5_BASE:1.2
	OPENBSD_5_4:1.2.0.70
	OPENBSD_5_4_BASE:1.2
	OPENBSD_5_3:1.2.0.68
	OPENBSD_5_3_BASE:1.2
	OPENBSD_5_2:1.2.0.66
	OPENBSD_5_2_BASE:1.2
	OPENBSD_5_1_BASE:1.2
	OPENBSD_5_1:1.2.0.64
	OPENBSD_5_0:1.2.0.62
	OPENBSD_5_0_BASE:1.2
	OPENBSD_4_9:1.2.0.60
	OPENBSD_4_9_BASE:1.2
	OPENBSD_4_8:1.2.0.58
	OPENBSD_4_8_BASE:1.2
	OPENBSD_4_7:1.2.0.54
	OPENBSD_4_7_BASE:1.2
	OPENBSD_4_6:1.2.0.56
	OPENBSD_4_6_BASE:1.2
	OPENBSD_4_5:1.2.0.52
	OPENBSD_4_5_BASE:1.2
	OPENBSD_4_4:1.2.0.50
	OPENBSD_4_4_BASE:1.2
	OPENBSD_4_3:1.2.0.48
	OPENBSD_4_3_BASE:1.2
	OPENBSD_4_2:1.2.0.46
	OPENBSD_4_2_BASE:1.2
	OPENBSD_4_1:1.2.0.44
	OPENBSD_4_1_BASE:1.2
	OPENBSD_4_0:1.2.0.42
	OPENBSD_4_0_BASE:1.2
	OPENBSD_3_9:1.2.0.40
	OPENBSD_3_9_BASE:1.2
	OPENBSD_3_8:1.2.0.38
	OPENBSD_3_8_BASE:1.2
	OPENBSD_3_7:1.2.0.36
	OPENBSD_3_7_BASE:1.2
	GDB_6_3:1.1.1.1
	OPENBSD_3_6:1.2.0.34
	OPENBSD_3_6_BASE:1.2
	GDB_6_1:1.1.1.1
	FSF:1.1.1
	OPENBSD_3_5:1.2.0.32
	OPENBSD_3_5_BASE:1.2
	OPENBSD_3_4:1.2.0.30
	OPENBSD_3_4_BASE:1.2
	OPENBSD_3_3:1.2.0.28
	OPENBSD_3_3_BASE:1.2
	OPENBSD_3_2:1.2.0.26
	OPENBSD_3_2_BASE:1.2
	OPENBSD_3_1:1.2.0.24
	OPENBSD_3_1_BASE:1.2
	OPENBSD_3_0:1.2.0.22
	OPENBSD_3_0_BASE:1.2
	OPENBSD_2_9:1.2.0.20
	OPENBSD_2_9_BASE:1.2
	OPENBSD_2_8:1.2.0.18
	OPENBSD_2_8_BASE:1.2
	OPENBSD_2_7:1.2.0.16
	OPENBSD_2_7_BASE:1.2
	new-binutils:1.2.0.14
	OPENBSD_2_6:1.2.0.12
	OPENBSD_2_6_BASE:1.2
	OPENBSD_2_5:1.2.0.10
	OPENBSD_2_5_BASE:1.2
	OPENBSD_2_4:1.2.0.8
	OPENBSD_2_4_BASE:1.2
	OPENBSD_2_3:1.2.0.6
	OPENBSD_2_3_BASE:1.2
	OPENBSD_2_2:1.2.0.4
	OPENBSD_2_2_BASE:1.2
	OPENBSD_2_1:1.2.0.2
	OPENBSD_2_1_BASE:1.2
	CYGNUS-961112:1.1.2.1
	CYGNUS:1.1.0.2;
locks; strict;
comment	@ * @;


1.2
date	96.11.23.03.48.59;	author niklas;	state Exp;
branches;
next	1.1;

1.1
date	96.11.19.14.33.52;	author niklas;	state dead;
branches
	1.1.1.1
	1.1.2.1;
next	;

1.1.1.1
date	2004.05.21.19.15.41;	author kettenis;	state Exp;
branches;
next	;

1.1.2.1
date	96.11.19.14.33.52;	author niklas;	state Exp;
branches;
next	;


desc
@@


1.2
log
@Merge to Cygnus 961112 + add some support (not ready) for shared libs
@
text
@/* 
 * (c) Copyright 1990-1996 OPEN SOFTWARE FOUNDATION, INC.
 * (c) Copyright 1990-1996 HEWLETT-PACKARD COMPANY
 * (c) Copyright 1990-1996 DIGITAL EQUIPMENT CORPORATION
 * (c) Copyright 1991, 1992 Siemens-Nixdorf Information Systems
 * To anyone who acknowledges that this file is provided "AS IS" without
 * any express or implied warranty: permission to use, copy, modify, and
 * distribute this file for any purpose is hereby granted without fee,
 * provided that the above copyright notices and this notice appears in
 * all source code copies, and that none of the names listed above be used
 * in advertising or publicity pertaining to distribution of the software
 * without specific, written prior permission.  None of these organizations
 * makes any representations about the suitability of this software for
 * any purpose.
 */
/*
 *	Header file for CMA initialization
 */

#ifndef CMA_INIT
#define CMA_INIT

/*
 *  INCLUDE FILES
 */
#include <dce/cma_host.h>
#include <cma_errors.h>

/*
 * CONSTANTS AND MACROS
 */

#define cma__c_env_maxattr	0
#define cma__c_env_minattr	1
#define cma__c_env_maxcond	2
#define	cma__c_env_mincond	3
#define cma__c_env_maxmutex	4
#define cma__c_env_minmutex	5
#define cma__c_env_maxthread	6
#define cma__c_env_minthread	7
#define cma__c_env_maxcluster	8
#define cma__c_env_mincluster	9
#define cma__c_env_maxvp	10
#define cma__c_env_multiplex	11
#define cma__c_env_trace	12
#define cma__c_env_trace_file	13

#define cma__c_env_count	13


/*
 * cma__int_init
 *
 * Initialize the main body of CMA exactly once.
 *
 * We raise an exception if, for some odd reason, there are already threads
 * in the environment (e.g. kernel threads), and one of them is trying to
 * initialize CMA before the  first thread got all the way through the actual
 * initialization. This code maintains the invariants: "after successfully
 * calling CMA_INIT, you can call any CMA function", and  "CMA is actually
 * initialized at most once".
 */
/*#ifndef _HP_LIBC_R */

#if  defined _HP_LIBC_R  ||(defined(SNI_SVR4) && !defined(CMA_INIT_NEEDED))
# define cma__int_init()
#else
# define cma__int_init() { \
    if (!cma__tac_isset(&cma__g_init_started)) { \
	if (!cma__test_and_set (&cma__g_init_started)) { \
	    cma__init_static (); \
	    cma__test_and_set (&cma__g_init_done); \
	    } \
	else if (!cma__tac_isset (&cma__g_init_done)) { \
	    cma__error (cma_s_inialrpro); \
    }}}
#endif

/*
 * TYPEDEFS
 */

typedef enum CMA__T_ENV_TYPE {
    cma__c_env_type_int,
    cma__c_env_type_file
    } cma__t_env_type;

typedef struct CMA__T_ENV {
    char		*name;		/* Name of environment variable */
    cma__t_env_type	type;		/* Type of variable */
    cma_t_integer	value;		/* Numeric value of the variable */
    } cma__t_env;

/*
 *  GLOBAL DATA
 */

extern cma__t_env		cma__g_env[cma__c_env_count];
extern cma__t_atomic_bit	cma__g_init_started;
extern cma__t_atomic_bit	cma__g_init_done;
extern char			*cma__g_version;

/*
 * INTERNAL INTERFACES
 */

extern void
cma__init_static (void);	/* Initialize static data */

#if _CMA_OS_ != _CMA__VMS
extern void cma__init_atfork (void);
#endif

#endif
@


1.1
log
@file cma_init.h was initially added on branch CYGNUS.
@
text
@d1 114
@


1.1.1.1
log
@GDB 6.1 (excluding .info files)
@
text
@a0 114
/* 
 * (c) Copyright 1990-1996 OPEN SOFTWARE FOUNDATION, INC.
 * (c) Copyright 1990-1996 HEWLETT-PACKARD COMPANY
 * (c) Copyright 1990-1996 DIGITAL EQUIPMENT CORPORATION
 * (c) Copyright 1991, 1992 Siemens-Nixdorf Information Systems
 * To anyone who acknowledges that this file is provided "AS IS" without
 * any express or implied warranty: permission to use, copy, modify, and
 * distribute this file for any purpose is hereby granted without fee,
 * provided that the above copyright notices and this notice appears in
 * all source code copies, and that none of the names listed above be used
 * in advertising or publicity pertaining to distribution of the software
 * without specific, written prior permission.  None of these organizations
 * makes any representations about the suitability of this software for
 * any purpose.
 */
/*
 *	Header file for CMA initialization
 */

#ifndef CMA_INIT
#define CMA_INIT

/*
 *  INCLUDE FILES
 */
#include <dce/cma_host.h>
#include <cma_errors.h>

/*
 * CONSTANTS AND MACROS
 */

#define cma__c_env_maxattr	0
#define cma__c_env_minattr	1
#define cma__c_env_maxcond	2
#define	cma__c_env_mincond	3
#define cma__c_env_maxmutex	4
#define cma__c_env_minmutex	5
#define cma__c_env_maxthread	6
#define cma__c_env_minthread	7
#define cma__c_env_maxcluster	8
#define cma__c_env_mincluster	9
#define cma__c_env_maxvp	10
#define cma__c_env_multiplex	11
#define cma__c_env_trace	12
#define cma__c_env_trace_file	13

#define cma__c_env_count	13


/*
 * cma__int_init
 *
 * Initialize the main body of CMA exactly once.
 *
 * We raise an exception if, for some odd reason, there are already threads
 * in the environment (e.g. kernel threads), and one of them is trying to
 * initialize CMA before the  first thread got all the way through the actual
 * initialization. This code maintains the invariants: "after successfully
 * calling CMA_INIT, you can call any CMA function", and  "CMA is actually
 * initialized at most once".
 */
/*#ifndef _HP_LIBC_R */

#if  defined _HP_LIBC_R  ||(defined(SNI_SVR4) && !defined(CMA_INIT_NEEDED))
# define cma__int_init()
#else
# define cma__int_init() { \
    if (!cma__tac_isset(&cma__g_init_started)) { \
	if (!cma__test_and_set (&cma__g_init_started)) { \
	    cma__init_static (); \
	    cma__test_and_set (&cma__g_init_done); \
	    } \
	else if (!cma__tac_isset (&cma__g_init_done)) { \
	    cma__error (cma_s_inialrpro); \
    }}}
#endif

/*
 * TYPEDEFS
 */

typedef enum CMA__T_ENV_TYPE {
    cma__c_env_type_int,
    cma__c_env_type_file
    } cma__t_env_type;

typedef struct CMA__T_ENV {
    char		*name;		/* Name of environment variable */
    cma__t_env_type	type;		/* Type of variable */
    cma_t_integer	value;		/* Numeric value of the variable */
    } cma__t_env;

/*
 *  GLOBAL DATA
 */

extern cma__t_env		cma__g_env[cma__c_env_count];
extern cma__t_atomic_bit	cma__g_init_started;
extern cma__t_atomic_bit	cma__g_init_done;
extern char			*cma__g_version;

/*
 * INTERNAL INTERFACES
 */

extern void
cma__init_static (void);	/* Initialize static data */

#if _CMA_OS_ != _CMA__VMS
extern void cma__init_atfork (void);
#endif

#endif
@


1.1.2.1
log
@Import of 961112 Cygnus binutils+gas+ld+gdb+gprof
@
text
@a0 114
/* 
 * (c) Copyright 1990-1996 OPEN SOFTWARE FOUNDATION, INC.
 * (c) Copyright 1990-1996 HEWLETT-PACKARD COMPANY
 * (c) Copyright 1990-1996 DIGITAL EQUIPMENT CORPORATION
 * (c) Copyright 1991, 1992 Siemens-Nixdorf Information Systems
 * To anyone who acknowledges that this file is provided "AS IS" without
 * any express or implied warranty: permission to use, copy, modify, and
 * distribute this file for any purpose is hereby granted without fee,
 * provided that the above copyright notices and this notice appears in
 * all source code copies, and that none of the names listed above be used
 * in advertising or publicity pertaining to distribution of the software
 * without specific, written prior permission.  None of these organizations
 * makes any representations about the suitability of this software for
 * any purpose.
 */
/*
 *	Header file for CMA initialization
 */

#ifndef CMA_INIT
#define CMA_INIT

/*
 *  INCLUDE FILES
 */
#include <dce/cma_host.h>
#include <cma_errors.h>

/*
 * CONSTANTS AND MACROS
 */

#define cma__c_env_maxattr	0
#define cma__c_env_minattr	1
#define cma__c_env_maxcond	2
#define	cma__c_env_mincond	3
#define cma__c_env_maxmutex	4
#define cma__c_env_minmutex	5
#define cma__c_env_maxthread	6
#define cma__c_env_minthread	7
#define cma__c_env_maxcluster	8
#define cma__c_env_mincluster	9
#define cma__c_env_maxvp	10
#define cma__c_env_multiplex	11
#define cma__c_env_trace	12
#define cma__c_env_trace_file	13

#define cma__c_env_count	13


/*
 * cma__int_init
 *
 * Initialize the main body of CMA exactly once.
 *
 * We raise an exception if, for some odd reason, there are already threads
 * in the environment (e.g. kernel threads), and one of them is trying to
 * initialize CMA before the  first thread got all the way through the actual
 * initialization. This code maintains the invariants: "after successfully
 * calling CMA_INIT, you can call any CMA function", and  "CMA is actually
 * initialized at most once".
 */
/*#ifndef _HP_LIBC_R */

#if  defined _HP_LIBC_R  ||(defined(SNI_SVR4) && !defined(CMA_INIT_NEEDED))
# define cma__int_init()
#else
# define cma__int_init() { \
    if (!cma__tac_isset(&cma__g_init_started)) { \
	if (!cma__test_and_set (&cma__g_init_started)) { \
	    cma__init_static (); \
	    cma__test_and_set (&cma__g_init_done); \
	    } \
	else if (!cma__tac_isset (&cma__g_init_done)) { \
	    cma__error (cma_s_inialrpro); \
    }}}
#endif

/*
 * TYPEDEFS
 */

typedef enum CMA__T_ENV_TYPE {
    cma__c_env_type_int,
    cma__c_env_type_file
    } cma__t_env_type;

typedef struct CMA__T_ENV {
    char		*name;		/* Name of environment variable */
    cma__t_env_type	type;		/* Type of variable */
    cma_t_integer	value;		/* Numeric value of the variable */
    } cma__t_env;

/*
 *  GLOBAL DATA
 */

extern cma__t_env		cma__g_env[cma__c_env_count];
extern cma__t_atomic_bit	cma__g_init_started;
extern cma__t_atomic_bit	cma__g_init_done;
extern char			*cma__g_version;

/*
 * INTERNAL INTERFACES
 */

extern void
cma__init_static (void);	/* Initialize static data */

#if _CMA_OS_ != _CMA__VMS
extern void cma__init_atfork (void);
#endif

#endif
@
