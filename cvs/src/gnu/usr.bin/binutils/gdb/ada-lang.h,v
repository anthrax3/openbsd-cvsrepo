head	1.1;
branch	1.1.1;
access;
symbols
	OPENBSD_6_2:1.1.1.2.0.50
	OPENBSD_6_2_BASE:1.1.1.2
	OPENBSD_6_1:1.1.1.2.0.52
	OPENBSD_6_1_BASE:1.1.1.2
	OPENBSD_6_0:1.1.1.2.0.48
	OPENBSD_6_0_BASE:1.1.1.2
	OPENBSD_5_9:1.1.1.2.0.44
	OPENBSD_5_9_BASE:1.1.1.2
	OPENBSD_5_8:1.1.1.2.0.46
	OPENBSD_5_8_BASE:1.1.1.2
	OPENBSD_5_7:1.1.1.2.0.38
	OPENBSD_5_7_BASE:1.1.1.2
	OPENBSD_5_6:1.1.1.2.0.42
	OPENBSD_5_6_BASE:1.1.1.2
	OPENBSD_5_5:1.1.1.2.0.40
	OPENBSD_5_5_BASE:1.1.1.2
	OPENBSD_5_4:1.1.1.2.0.36
	OPENBSD_5_4_BASE:1.1.1.2
	OPENBSD_5_3:1.1.1.2.0.34
	OPENBSD_5_3_BASE:1.1.1.2
	OPENBSD_5_2:1.1.1.2.0.32
	OPENBSD_5_2_BASE:1.1.1.2
	OPENBSD_5_1_BASE:1.1.1.2
	OPENBSD_5_1:1.1.1.2.0.30
	OPENBSD_5_0:1.1.1.2.0.28
	OPENBSD_5_0_BASE:1.1.1.2
	OPENBSD_4_9:1.1.1.2.0.26
	OPENBSD_4_9_BASE:1.1.1.2
	OPENBSD_4_8:1.1.1.2.0.24
	OPENBSD_4_8_BASE:1.1.1.2
	OPENBSD_4_7:1.1.1.2.0.20
	OPENBSD_4_7_BASE:1.1.1.2
	OPENBSD_4_6:1.1.1.2.0.22
	OPENBSD_4_6_BASE:1.1.1.2
	OPENBSD_4_5:1.1.1.2.0.18
	OPENBSD_4_5_BASE:1.1.1.2
	OPENBSD_4_4:1.1.1.2.0.16
	OPENBSD_4_4_BASE:1.1.1.2
	OPENBSD_4_3:1.1.1.2.0.14
	OPENBSD_4_3_BASE:1.1.1.2
	OPENBSD_4_2:1.1.1.2.0.12
	OPENBSD_4_2_BASE:1.1.1.2
	OPENBSD_4_1:1.1.1.2.0.10
	OPENBSD_4_1_BASE:1.1.1.2
	OPENBSD_4_0:1.1.1.2.0.8
	OPENBSD_4_0_BASE:1.1.1.2
	OPENBSD_3_9:1.1.1.2.0.6
	OPENBSD_3_9_BASE:1.1.1.2
	OPENBSD_3_8:1.1.1.2.0.4
	OPENBSD_3_8_BASE:1.1.1.2
	OPENBSD_3_7:1.1.1.2.0.2
	OPENBSD_3_7_BASE:1.1.1.2
	GDB_6_3:1.1.1.2
	OPENBSD_3_6:1.1.1.1.0.2
	OPENBSD_3_6_BASE:1.1.1.1
	GDB_6_1:1.1.1.1
	FSF:1.1.1;
locks; strict;
comment	@ * @;


1.1
date	2004.05.21.19.08.43;	author kettenis;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	2004.05.21.19.08.43;	author kettenis;	state Exp;
branches;
next	1.1.1.2;

1.1.1.2
date	2004.12.27.13.09.40;	author kettenis;	state Exp;
branches;
next	;


desc
@@


1.1
log
@Initial revision
@
text
@/* Ada language support definitions for GDB, the GNU debugger.
   Copyright 1992, 1997 Free Software Foundation, Inc.

This file is part of GDB.

This program is free software; you can redistribute it and/or modify
it under the terms of the GNU General Public License as published by
the Free Software Foundation; either version 2 of the License, or
(at your option) any later version.

This program is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
GNU General Public License for more details.

You should have received a copy of the GNU General Public License
along with this program; if not, write to the Free Software
Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.  */

#if !defined (ADA_LANG_H)
#define ADA_LANG_H 1

struct partial_symbol;

#include "value.h"
#include "gdbtypes.h"

struct block;

/* A macro to reorder the bytes of an address depending on the
   endiannes of the target.  */
#define EXTRACT_ADDRESS(x) ((void *) extract_unsigned_integer (&(x), sizeof (x)))
/* A macro to reorder the bytes of an int depending on the endiannes
   of the target */
#define EXTRACT_INT(x) ((int) extract_signed_integer (&(x), sizeof (x)))

/* Chain of cleanups for arguments of OP_UNRESOLVED_VALUE names.  Created in
   yyparse and freed in ada_resolve. */
extern struct cleanup *unresolved_names;

/* Corresponding mangled/demangled names and opcodes for Ada user-definable 
   operators. */
struct ada_opname_map
{
  const char *mangled;
  const char *demangled;
  enum exp_opcode op;
};

/* Table of Ada operators in mangled and demangled forms. */
/* Defined in ada-lang.c */
extern const struct ada_opname_map ada_opname_table[];

/* The maximum number of tasks known to the Ada runtime */
extern const int MAX_NUMBER_OF_KNOWN_TASKS;

/* Identifiers for Ada attributes that need special processing.  Be sure 
   to update the table attribute_names in ada-lang.c whenever you change this.
   */

enum ada_attribute
{
  /* Invalid attribute for error checking. */
  ATR_INVALID,

  ATR_FIRST,
  ATR_LAST,
  ATR_LENGTH,
  ATR_IMAGE,
  ATR_IMG,
  ATR_MAX,
  ATR_MIN,
  ATR_MODULUS,
  ATR_POS,
  ATR_SIZE,
  ATR_TAG,
  ATR_VAL,

  /* Dummy last attribute. */
  ATR_END
};

enum task_states
{
  Unactivated,
  Runnable,
  Terminated,
  Activator_Sleep,
  Acceptor_Sleep,
  Entry_Caller_Sleep,
  Async_Select_Sleep,
  Delay_Sleep,
  Master_Completion_Sleep,
  Master_Phase_2_Sleep
};

extern char *ada_task_states[];

typedef struct
{
  char *P_ARRAY;
  int *P_BOUNDS;
}
fat_string;

typedef struct entry_call
{
  void *self;
}
 *entry_call_link;

struct task_fields
{
  int entry_num;
#if (defined (VXWORKS_TARGET) || !defined (i386)) \
    && !(defined (VXWORKS_TARGET) && defined (M68K_TARGET))
  int pad1;
#endif
  char state;
#if (defined (VXWORKS_TARGET) && defined (M68K_TARGET))
  char pad_8bits;
#endif
  void *parent;
  int priority;
  int current_priority;
  fat_string image;
  entry_call_link call;
#if (defined (sun) && defined (__SVR4)) && !defined (VXWORKS_TARGET)
  int pad2;
  unsigned thread;
  unsigned lwp;
#else
  void *thread;
  void *lwp;
#endif
}
#if (defined (VXWORKS_TARGET) && defined (M68K_TARGET))
__attribute__ ((packed))
#endif
  ;

struct task_entry
{
  void *task_id;
  int task_num;
  int known_tasks_index;
  struct task_entry *next_task;
  void *thread;
  void *lwp;
  int stack_per;
};

extern struct type *builtin_type_ada_int;
extern struct type *builtin_type_ada_short;
extern struct type *builtin_type_ada_long;
extern struct type *builtin_type_ada_long_long;
extern struct type *builtin_type_ada_char;
extern struct type *builtin_type_ada_float;
extern struct type *builtin_type_ada_double;
extern struct type *builtin_type_ada_long_double;
extern struct type *builtin_type_ada_natural;
extern struct type *builtin_type_ada_positive;
extern struct type *builtin_type_ada_system_address;

/* Assuming V points to an array of S objects,  make sure that it contains at 
   least M objects, updating V and S as necessary. */

#define GROW_VECT(v, s, m) 						\
   if ((s) < (m)) grow_vect ((void**) &(v), &(s), (m), sizeof(*(v)));

extern void grow_vect (void **, size_t *, size_t, int);

extern int ada_parse (void);	/* Defined in ada-exp.y */

extern void ada_error (char *);	/* Defined in ada-exp.y */

			/* Defined in ada-typeprint.c */
extern void ada_print_type (struct type *, char *, struct ui_file *, int,
			    int);

extern int ada_val_print (struct type *, char *, int, CORE_ADDR,
			  struct ui_file *, int, int, int,
			  enum val_prettyprint);

extern int ada_value_print (struct value *, struct ui_file *, int,
			    enum val_prettyprint);

				/* Defined in ada-lang.c */

extern struct value *value_from_contents_and_address (struct type *, char *,
						      CORE_ADDR);

extern void ada_emit_char (int, struct ui_file *, int, int);

extern void ada_printchar (int, struct ui_file *);

extern void ada_printstr (struct ui_file *, char *, unsigned int, int, int);

extern void ada_convert_actuals (struct value *, int, struct value **,
				 CORE_ADDR *);

extern struct value *ada_value_subscript (struct value *, int,
					  struct value **);

extern struct type *ada_array_element_type (struct type *, int);

extern int ada_array_arity (struct type *);

struct type *ada_type_of_array (struct value *, int);

extern struct value *ada_coerce_to_simple_array (struct value *);

extern struct value *ada_coerce_to_simple_array_ptr (struct value *);

extern int ada_is_simple_array (struct type *);

extern int ada_is_array_descriptor (struct type *);

extern int ada_is_bogus_array_descriptor (struct type *);

extern struct type *ada_index_type (struct type *, int);

extern struct value *ada_array_bound (struct value *, int, int);

extern int ada_lookup_symbol_list (const char *, struct block *,
				   domain_enum, struct symbol ***,
				   struct block ***);

extern char *ada_fold_name (const char *);

extern struct symbol *ada_lookup_symbol (const char *, struct block *,
					 domain_enum);

extern struct minimal_symbol *ada_lookup_minimal_symbol (const char *);

extern void ada_resolve (struct expression **, struct type *);

extern int ada_resolve_function (struct symbol **, struct block **, int,
				 struct value **, int, const char *,
				 struct type *);

extern void ada_fill_in_ada_prototype (struct symbol *);

extern int user_select_syms (struct symbol **, struct block **, int, int);

extern int get_selections (int *, int, int, int, char *);

extern char *ada_start_decode_line_1 (char *);

extern struct symtabs_and_lines ada_finish_decode_line_1 (char **,
							  struct symtab *,
							  int, char ***);

extern int ada_scan_number (const char *, int, LONGEST *, int *);

extern struct type *ada_parent_type (struct type *);

extern int ada_is_ignored_field (struct type *, int);

extern int ada_is_packed_array_type (struct type *);

extern struct value *ada_value_primitive_packed_val (struct value *, char *,
						     long, int, int,
						     struct type *);

extern struct type *ada_coerce_to_simple_array_type (struct type *);

extern int ada_is_character_type (struct type *);

extern int ada_is_string_type (struct type *);

extern int ada_is_tagged_type (struct type *);

extern struct type *ada_tag_type (struct value *);

extern struct value *ada_value_tag (struct value *);

extern int ada_is_parent_field (struct type *, int);

extern int ada_is_wrapper_field (struct type *, int);

extern int ada_is_variant_part (struct type *, int);

extern struct type *ada_variant_discrim_type (struct type *, struct type *);

extern int ada_is_others_clause (struct type *, int);

extern int ada_in_variant (LONGEST, struct type *, int);

extern char *ada_variant_discrim_name (struct type *);

extern struct type *ada_lookup_struct_elt_type (struct type *, char *, int,
						int *);

extern struct value *ada_value_struct_elt (struct value *, char *, char *);

extern struct value *ada_search_struct_field (char *, struct value *, int,
					      struct type *);

extern int ada_is_aligner_type (struct type *);

extern struct type *ada_aligned_type (struct type *);

extern char *ada_aligned_value_addr (struct type *, char *);

extern const char *ada_attribute_name (int);

extern int ada_is_fixed_point_type (struct type *);

extern DOUBLEST ada_delta (struct type *);

extern DOUBLEST ada_fixed_to_float (struct type *, LONGEST);

extern LONGEST ada_float_to_fixed (struct type *, DOUBLEST);

extern int ada_is_vax_floating_type (struct type *);

extern int ada_vax_float_type_suffix (struct type *);

extern struct value *ada_vax_float_print_function (struct type *);

extern struct type *ada_system_address_type (void);

extern int ada_which_variant_applies (struct type *, struct type *, char *);

extern struct value *ada_to_fixed_value (struct type *, char *, CORE_ADDR,
					 struct value *);

extern struct type *ada_to_fixed_type (struct type *, char *, CORE_ADDR,
				       struct value *);

extern int ada_name_prefix_len (const char *);

extern char *ada_type_name (struct type *);

extern struct type *ada_find_parallel_type (struct type *,
					    const char *suffix);

extern LONGEST get_int_var_value (char *, char *, int *);

extern struct type *ada_find_any_type (const char *name);

extern int ada_prefer_type (struct type *, struct type *);

extern struct type *ada_get_base_type (struct type *);

extern struct type *ada_completed_type (struct type *);

extern char *ada_mangle (const char *);

extern const char *ada_enum_name (const char *);

extern int ada_is_modular_type (struct type *);

extern LONGEST ada_modulus (struct type *);

extern struct value *ada_value_ind (struct value *);

extern void ada_print_scalar (struct type *, LONGEST, struct ui_file *);

extern int ada_is_range_type_name (const char *);

extern const char *ada_renaming_type (struct type *);

extern int ada_is_object_renaming (struct symbol *);

extern const char *ada_simple_renamed_entity (struct symbol *);

extern char *ada_breakpoint_rewrite (char *, int *);

/* Tasking-related: ada-tasks.c */

extern int valid_task_id (int);

extern int get_current_task (void);

extern void init_task_list (void);

extern void *get_self_id (void);

extern int get_current_task (void);

extern int get_entry_number (void *);

extern void ada_report_exception_break (struct breakpoint *);

extern int ada_maybe_exception_partial_symbol (struct partial_symbol *sym);

extern int ada_is_exception_sym (struct symbol *sym);


#endif
@


1.1.1.1
log
@GDB 6.1 (excluding .info files)
@
text
@@


1.1.1.2
log
@GDB 6.3 (excluding .info files)
@
text
@d2 1
a2 2
   Copyright 1992, 1997, 1998, 1999, 2000, 2001, 2002, 2003, 2004
   Free Software Foundation, Inc.
a23 1
struct frame_info;
a26 1
#include "breakpoint.h"
d28 1
a28 19
/* Names of specific files known to be part of the runtime
   system and that might consider (confusing) debugging information.
   Each name (a basic regular expression string) is followed by a
   comma.  FIXME: Should be part of a configuration file. */
#if defined(__alpha__) && defined(__osf__) && !defined(VXWORKS_TARGET)
#define ADA_KNOWN_RUNTIME_FILE_NAME_PATTERNS \
   "^[agis]-.*\\.ad[bs]$", \
   "/usr/shlib/libpthread\\.so",
#elif defined (__linux__)
#define ADA_KNOWN_RUNTIME_FILE_NAME_PATTERNS \
   "^[agis]-.*\\.ad[bs]$", \
   "/lib.*/libpthread\\.so[.0-9]*$", "/lib.*/libpthread\\.a$", \
   "/lib.*/libc\\.so[.0-9]*$", "/lib.*/libc\\.a$",
#endif

#if !defined (ADA_KNOWN_RUNTIME_FILE_NAME_PATTERNS)
#define ADA_KNOWN_RUNTIME_FILE_NAME_PATTERNS \
   "^[agis]-.*\\.ad[bs]$",
#endif
d30 10
a39 15
/* Names of compiler-generated auxiliary functions probably of no
   interest to users. Each name (a basic regular expression string)
   is followed by a comma. */
#define ADA_KNOWN_AUXILIARY_FUNCTION_NAME_PATTERNS \
   "___clean[.a-zA-Z0-9_]*$",

/* The maximum number of frame levels searched for non-local,
 * non-global symbols.  This limit exists as a precaution to prevent
 * infinite search loops when the stack is screwed up. */
#define MAX_ENCLOSING_FRAME_LEVELS 7

/* Maximum number of steps followed in looking for the ultimate
   referent of a renaming.  This prevents certain infinite loops that
   can otherwise result. */
#define MAX_RENAMING_CHAIN_LENGTH 10
d41 1
a41 3
struct block;

/* Corresponding encoded/decoded names and opcodes for Ada user-definable
d45 2
a46 2
  const char *encoded;
  const char *decoded;
d50 1
a50 1
/* Table of Ada operators in encoded and decoded forms. */
d54 41
a94 44
enum ada_operator 
  {
    /* X IN A'RANGE(N).  N is an immediate operand, surrounded by 
       BINOP_IN_BOUNDS before and after.  A is an array, X an index 
       value.  Evaluates to true iff X is within range of the Nth
       dimension (1-based) of A.  (A multi-dimensional array
       type is represented as array of array of ...) */
    BINOP_IN_BOUNDS = OP_EXTENDED0,

    /* X IN L .. U.  True iff L <= X <= U.  */
    TERNOP_IN_RANGE,

    /* Ada attributes ('Foo). */
    OP_ATR_FIRST,
    OP_ATR_LAST,
    OP_ATR_LENGTH,
    OP_ATR_IMAGE,
    OP_ATR_MAX,
    OP_ATR_MIN,
    OP_ATR_MODULUS,
    OP_ATR_POS,
    OP_ATR_SIZE,
    OP_ATR_TAG,
    OP_ATR_VAL,

    /* Ada type qualification.  It is encoded as for UNOP_CAST, above, 
       and denotes the TYPE'(EXPR) construct. */
    UNOP_QUAL,

    /* X IN TYPE.  The `TYPE' argument is immediate, with 
       UNOP_IN_RANGE before and after it. True iff X is a member of 
       type TYPE (typically a subrange). */
    UNOP_IN_RANGE,

    /* End marker */
    OP_ADA_LAST
  };

/* A triple, (symbol, block, symtab), representing one instance of a 
 * symbol-lookup operation. */
struct ada_symbol_info {
  struct symbol* sym;
  struct block* block;
  struct symtab* symtab;
d97 1
a97 1
/* Ada task structures.  */
d99 6
a104 1
/* Ada task control block, as defined in the GNAT runt-time library.  */
d106 1
a106 1
struct task_control_block
d108 11
d120 4
a123 1
  CORE_ADDR parent;
d125 16
a140 14
  char image [32];
  int image_len;    /* This field is not always present in the ATCB.  */
  CORE_ADDR call;
  CORE_ADDR thread;
  CORE_ADDR lwp;    /* This field is not always present in the ATCB.  */
};

struct task_ptid
{
  int pid;                      /* The Process id */
  long lwp;                     /* The Light Weight Process id */
  long tid;                     /* The Thread id */
};
typedef struct task_ptid task_ptid_t;
d144 1
a144 2
  CORE_ADDR task_id;
  struct task_control_block atcb;
d148 2
a149 1
  task_ptid_t task_ptid;
d153 11
a163 5
/* The maximum number of tasks known to the Ada runtime.  */
extern const int MAX_NUMBER_OF_KNOWN_TASKS;

/* task entry list.  */
extern struct task_entry *task_list;
d165 1
a165 2

/* Assuming V points to an array of S objects,  make sure that it contains at
d168 1
a168 1
#define GROW_VECT(v, s, m)                                              \
d173 1
a173 5
extern int ada_get_field_index (const struct type *type,
                                const char *field_name,
                                int maybe_missing);

extern int ada_parse (void);    /* Defined in ada-exp.y */
d175 1
a175 1
extern void ada_error (char *); /* Defined in ada-exp.y */
d177 1
a177 1
                        /* Defined in ada-typeprint.c */
d179 1
a179 1
                            int);
d182 2
a183 2
                          struct ui_file *, int, int, int,
                          enum val_prettyprint);
d186 1
a186 1
                            enum val_prettyprint);
d188 1
a188 1
                                /* Defined in ada-lang.c */
d191 1
a191 1
                                                      CORE_ADDR);
d200 1
a200 1
                                 CORE_ADDR *);
d203 1
a203 1
                                          struct value **);
d211 2
d215 1
a215 1
extern int ada_is_simple_array_type (struct type *);
d217 1
a217 1
extern int ada_is_array_descriptor_type (struct type *);
d225 3
a227 1
extern char *ada_decode_symbol (const struct general_symbol_info*);
d229 1
a229 1
extern const char *ada_decode (const char*);
d231 2
a232 2
extern enum language ada_update_initial_language (enum language, 
						  struct partial_symtab*);
d234 1
a234 1
extern void clear_ada_sym_cache (void);
d236 1
a236 2
extern char **ada_make_symbol_completion_list (const char *text0,
                                               const char *word);
d238 3
a240 10
extern int ada_lookup_symbol_list (const char *, const struct block *,
                                   domain_enum, struct ada_symbol_info**);

extern char *ada_fold_name (const char *);

extern struct symbol *ada_lookup_symbol (const char *, const struct block *,
                                         domain_enum, int *, 
					 struct symtab **);

extern struct minimal_symbol *ada_lookup_simple_minsym (const char *);
d244 1
a244 1
extern int user_select_syms (struct ada_symbol_info *, int, int);
d251 2
a252 5
                                                          struct symtab *,
                                                          int, char ***);

extern struct symtabs_and_lines ada_sals_for_line (const char*, int,
						   int, char***, int);
d263 2
a264 2
                                                     long, int, int,
                                                     struct type *);
d272 1
a272 3
extern int ada_is_tagged_type (struct type *, int);

extern int ada_is_tag_type (struct type *);
a277 2
extern const char *ada_tag_name (struct value *);

d292 3
d297 3
d306 1
a306 1
extern const char *ada_attribute_name (enum exp_opcode);
a309 2
extern int ada_is_system_address_type (struct type *);

d326 3
d330 1
a330 6
                                       struct value *);

extern struct type *
  ada_template_to_fixed_record_type_1 (struct type *type, char *valaddr,
                                       CORE_ADDR address, struct value *dval0,
                                       int keep_dynamic_fields);
d337 1
a337 3
                                            const char *suffix);

extern LONGEST get_int_var_value (char *, int *);
d339 1
a339 1
extern struct symbol *ada_find_any_symbol (const char *name);
a342 3
extern struct symbol *ada_find_renaming_symbol (const char *name,
                                                struct block *block);

d347 1
a347 1
extern struct type *ada_check_typedef (struct type *);
d349 1
a349 1
extern char *ada_encode (const char *);
d355 1
a355 1
extern ULONGEST ada_modulus (struct type *);
d367 1
a367 1
extern char *ada_simple_renamed_entity (struct symbol *);
a370 2
extern char *ada_main_name (void);

d375 2
d379 1
a379 9
extern int ada_is_exception_breakpoint (bpstat bs);

extern void ada_adjust_exception_stop (bpstat bs);

extern void ada_print_exception_stop (bpstat bs);

extern int ada_get_current_task (ptid_t);

extern int breakpoint_ada_task_match (CORE_ADDR, ptid_t);
d381 1
a381 1
extern int ada_print_exception_breakpoint_nontask (struct breakpoint *);
d383 1
a383 1
extern void ada_print_exception_breakpoint_task (struct breakpoint *);
d385 1
a385 1
extern void ada_find_printable_frame (struct frame_info *fi);
d387 1
a387 1
extern void ada_reset_thread_registers (void);
d389 1
a389 1
extern int ada_build_task_list (void);
a390 3
/* Look up a symbol by name using the search conventions of 
   a specific language (optional block, optional symtab). 
   FIXME: Should be symtab.h. */
a391 6
extern struct symbol *lookup_symbol_in_language (const char *, 
						 const struct block *,
						 domain_enum, 
						 enum language,
						 int *,
						 struct symtab **);
@

