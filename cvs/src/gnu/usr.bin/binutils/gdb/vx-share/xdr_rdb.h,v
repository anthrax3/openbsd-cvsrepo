head	1.2;
access;
symbols
	OPENBSD_6_1_BASE:1.2
	OPENBSD_6_0:1.2.0.82
	OPENBSD_6_0_BASE:1.2
	OPENBSD_5_9:1.2.0.78
	OPENBSD_5_9_BASE:1.2
	OPENBSD_5_8:1.2.0.80
	OPENBSD_5_8_BASE:1.2
	OPENBSD_5_7:1.2.0.72
	OPENBSD_5_7_BASE:1.2
	OPENBSD_5_6:1.2.0.76
	OPENBSD_5_6_BASE:1.2
	OPENBSD_5_5:1.2.0.74
	OPENBSD_5_5_BASE:1.2
	OPENBSD_5_4:1.2.0.70
	OPENBSD_5_4_BASE:1.2
	OPENBSD_5_3:1.2.0.68
	OPENBSD_5_3_BASE:1.2
	OPENBSD_5_2:1.2.0.66
	OPENBSD_5_2_BASE:1.2
	OPENBSD_5_1_BASE:1.2
	OPENBSD_5_1:1.2.0.64
	OPENBSD_5_0:1.2.0.62
	OPENBSD_5_0_BASE:1.2
	OPENBSD_4_9:1.2.0.60
	OPENBSD_4_9_BASE:1.2
	OPENBSD_4_8:1.2.0.58
	OPENBSD_4_8_BASE:1.2
	OPENBSD_4_7:1.2.0.54
	OPENBSD_4_7_BASE:1.2
	OPENBSD_4_6:1.2.0.56
	OPENBSD_4_6_BASE:1.2
	OPENBSD_4_5:1.2.0.52
	OPENBSD_4_5_BASE:1.2
	OPENBSD_4_4:1.2.0.50
	OPENBSD_4_4_BASE:1.2
	OPENBSD_4_3:1.2.0.48
	OPENBSD_4_3_BASE:1.2
	OPENBSD_4_2:1.2.0.46
	OPENBSD_4_2_BASE:1.2
	OPENBSD_4_1:1.2.0.44
	OPENBSD_4_1_BASE:1.2
	OPENBSD_4_0:1.2.0.42
	OPENBSD_4_0_BASE:1.2
	OPENBSD_3_9:1.2.0.40
	OPENBSD_3_9_BASE:1.2
	OPENBSD_3_8:1.2.0.38
	OPENBSD_3_8_BASE:1.2
	OPENBSD_3_7:1.2.0.36
	OPENBSD_3_7_BASE:1.2
	GDB_6_3:1.1.1.1
	OPENBSD_3_6:1.2.0.34
	OPENBSD_3_6_BASE:1.2
	GDB_6_1:1.1.1.1
	FSF:1.1.1
	OPENBSD_3_5:1.2.0.32
	OPENBSD_3_5_BASE:1.2
	OPENBSD_3_4:1.2.0.30
	OPENBSD_3_4_BASE:1.2
	OPENBSD_3_3:1.2.0.28
	OPENBSD_3_3_BASE:1.2
	OPENBSD_3_2:1.2.0.26
	OPENBSD_3_2_BASE:1.2
	OPENBSD_3_1:1.2.0.24
	OPENBSD_3_1_BASE:1.2
	OPENBSD_3_0:1.2.0.22
	OPENBSD_3_0_BASE:1.2
	OPENBSD_2_9:1.2.0.20
	OPENBSD_2_9_BASE:1.2
	OPENBSD_2_8:1.2.0.18
	OPENBSD_2_8_BASE:1.2
	OPENBSD_2_7:1.2.0.16
	OPENBSD_2_7_BASE:1.2
	new-binutils:1.2.0.14
	OPENBSD_2_6:1.2.0.12
	OPENBSD_2_6_BASE:1.2
	OPENBSD_2_5:1.2.0.10
	OPENBSD_2_5_BASE:1.2
	OPENBSD_2_4:1.2.0.8
	OPENBSD_2_4_BASE:1.2
	OPENBSD_2_3:1.2.0.6
	OPENBSD_2_3_BASE:1.2
	OPENBSD_2_2:1.2.0.4
	OPENBSD_2_2_BASE:1.2
	OPENBSD_2_1:1.2.0.2
	OPENBSD_2_1_BASE:1.2
	CYGNUS-961112:1.1.2.1
	CYGNUS:1.1.0.2;
locks; strict;
comment	@ * @;


1.2
date	96.11.23.03.52.06;	author niklas;	state Exp;
branches;
next	1.1;

1.1
date	96.11.19.14.38.07;	author niklas;	state dead;
branches
	1.1.1.1
	1.1.2.1;
next	;

1.1.1.1
date	2004.05.21.19.18.38;	author kettenis;	state Exp;
branches;
next	;

1.1.2.1
date	96.11.19.14.38.07;	author niklas;	state Exp;
branches;
next	;


desc
@@


1.2
log
@Merge to Cygnus 961112 + add some support (not ready) for shared libs
@
text
@/* xdr_rdb.h - xdr for additional rdb structures */

/* Copyright 1992 Free Software Foundation, Inc.

   This code was donated by Wind River Systems, Inc. */

/*
modification history
--------------------
01c,25may91,maf  rolled RDBVERS for VxGDB 1.0 version.
01b,12apr91,maf  rolled RDBVERS.
01a,09jan91,maf  created using v1a of xdr_rdb.h for 4.0.2 VxWorks 68k.
		 added struct SOURCE_STEP.
*/

#ifndef INCxdrrdbh
#define INCxdrrdbh

enum arg_type {
        T_UNKNOWN = 0,
        T_BYTE = 1,
        T_WORD = 2,
        T_INT = 3,
        T_FLOAT = 4,
        T_DOUBLE = 5
};
typedef enum arg_type arg_type;
bool_t xdr_arg_type();


struct arg_value {
        arg_type type;
        union {
                char v_byte;
                short v_word;
                int v_int;
                float v_fp;
                double v_dp;
        } arg_value_u;
};
typedef struct arg_value arg_value;
bool_t xdr_arg_value();

struct func_call {
        int func_addr;
        struct {
                u_int args_len;
                arg_value *args_val;
        } args;
};
typedef struct func_call func_call;
bool_t xdr_func_call();


typedef char *arg_one;
bool_t xdr_arg_one();


typedef struct {
        u_int arg_array_len;
        arg_one *arg_array_val;
} arg_array;
bool_t xdr_arg_array();


/*
 * Structures used to pass structures required for
 * process control but not part of the standard ptrace interface
 */

/*
 * arg_info is used to pass arguments into process start
 */
struct arg_info {
	int rargc;
	char **rargv;
};
typedef struct arg_info Arg_info;


enum EVENT_TYPE {
        EVENT_BREAK = 0,
        EVENT_STOP = 1,
        EVENT_EXIT = 2,
        EVENT_BUS_ERR = 3,
        EVENT_SUSPEND = 4,
        EVENT_ZERO_DIV = 5,
        EVENT_SIGNAL = 6,
        EVENT_START = 7
};
typedef enum EVENT_TYPE EVENT_TYPE;


struct RDB_EVENT {
	int status;
	int taskId;
        EVENT_TYPE eventType;
        int sigType;
};
typedef struct RDB_EVENT RDB_EVENT;


struct TASK_START {
        int status;
        int pid;
};
typedef struct TASK_START TASK_START;


struct SYMBOL_ADDR {
        int status;
        u_int addr;
};
typedef struct SYMBOL_ADDR SYMBOL_ADDR;

struct SOURCE_STEP {
	int taskId;
	u_int startAddr;
	u_int endAddr;
};
typedef struct SOURCE_STEP SOURCE_STEP;

#define MAX_ARG_CNT 10
#define MAX_FUNC_ARGS 100
#define MAX_ARG_LEN   100


bool_t xdr_arg_info();
bool_t xdr_EVENT_TYPE();
bool_t xdr_RDB_EVENT();
bool_t xdr_TASK_START();
bool_t xdr_SYMBOL_ADDR();
bool_t xdr_SOURCE_STEP();

#define RDBPROG (u_long) 0x44444444
#define RDBVERS (u_long) 3
#endif	INCxdrrdbh
@


1.1
log
@file xdr_rdb.h was initially added on branch CYGNUS.
@
text
@d1 137
@


1.1.1.1
log
@GDB 6.1 (excluding .info files)
@
text
@a0 137
/* xdr_rdb.h - xdr for additional rdb structures */

/* Copyright 1992 Free Software Foundation, Inc.

   This code was donated by Wind River Systems, Inc. */

/*
modification history
--------------------
01c,25may91,maf  rolled RDBVERS for VxGDB 1.0 version.
01b,12apr91,maf  rolled RDBVERS.
01a,09jan91,maf  created using v1a of xdr_rdb.h for 4.0.2 VxWorks 68k.
		 added struct SOURCE_STEP.
*/

#ifndef INCxdrrdbh
#define INCxdrrdbh

enum arg_type {
        T_UNKNOWN = 0,
        T_BYTE = 1,
        T_WORD = 2,
        T_INT = 3,
        T_FLOAT = 4,
        T_DOUBLE = 5
};
typedef enum arg_type arg_type;
bool_t xdr_arg_type();


struct arg_value {
        arg_type type;
        union {
                char v_byte;
                short v_word;
                int v_int;
                float v_fp;
                double v_dp;
        } arg_value_u;
};
typedef struct arg_value arg_value;
bool_t xdr_arg_value();

struct func_call {
        int func_addr;
        struct {
                u_int args_len;
                arg_value *args_val;
        } args;
};
typedef struct func_call func_call;
bool_t xdr_func_call();


typedef char *arg_one;
bool_t xdr_arg_one();


typedef struct {
        u_int arg_array_len;
        arg_one *arg_array_val;
} arg_array;
bool_t xdr_arg_array();


/*
 * Structures used to pass structures required for
 * process control but not part of the standard ptrace interface
 */

/*
 * arg_info is used to pass arguments into process start
 */
struct arg_info {
	int rargc;
	char **rargv;
};
typedef struct arg_info Arg_info;


enum EVENT_TYPE {
        EVENT_BREAK = 0,
        EVENT_STOP = 1,
        EVENT_EXIT = 2,
        EVENT_BUS_ERR = 3,
        EVENT_SUSPEND = 4,
        EVENT_ZERO_DIV = 5,
        EVENT_SIGNAL = 6,
        EVENT_START = 7
};
typedef enum EVENT_TYPE EVENT_TYPE;


struct RDB_EVENT {
	int status;
	int taskId;
        EVENT_TYPE eventType;
        int sigType;
};
typedef struct RDB_EVENT RDB_EVENT;


struct TASK_START {
        int status;
        int pid;
};
typedef struct TASK_START TASK_START;


struct SYMBOL_ADDR {
        int status;
        u_int addr;
};
typedef struct SYMBOL_ADDR SYMBOL_ADDR;

struct SOURCE_STEP {
	int taskId;
	u_int startAddr;
	u_int endAddr;
};
typedef struct SOURCE_STEP SOURCE_STEP;

#define MAX_ARG_CNT 10
#define MAX_FUNC_ARGS 100
#define MAX_ARG_LEN   100


bool_t xdr_arg_info();
bool_t xdr_EVENT_TYPE();
bool_t xdr_RDB_EVENT();
bool_t xdr_TASK_START();
bool_t xdr_SYMBOL_ADDR();
bool_t xdr_SOURCE_STEP();

#define RDBPROG (u_long) 0x44444444
#define RDBVERS (u_long) 3
#endif	INCxdrrdbh
@


1.1.2.1
log
@Import of 961112 Cygnus binutils+gas+ld+gdb+gprof
@
text
@a0 137
/* xdr_rdb.h - xdr for additional rdb structures */

/* Copyright 1992 Free Software Foundation, Inc.

   This code was donated by Wind River Systems, Inc. */

/*
modification history
--------------------
01c,25may91,maf  rolled RDBVERS for VxGDB 1.0 version.
01b,12apr91,maf  rolled RDBVERS.
01a,09jan91,maf  created using v1a of xdr_rdb.h for 4.0.2 VxWorks 68k.
		 added struct SOURCE_STEP.
*/

#ifndef INCxdrrdbh
#define INCxdrrdbh

enum arg_type {
        T_UNKNOWN = 0,
        T_BYTE = 1,
        T_WORD = 2,
        T_INT = 3,
        T_FLOAT = 4,
        T_DOUBLE = 5
};
typedef enum arg_type arg_type;
bool_t xdr_arg_type();


struct arg_value {
        arg_type type;
        union {
                char v_byte;
                short v_word;
                int v_int;
                float v_fp;
                double v_dp;
        } arg_value_u;
};
typedef struct arg_value arg_value;
bool_t xdr_arg_value();

struct func_call {
        int func_addr;
        struct {
                u_int args_len;
                arg_value *args_val;
        } args;
};
typedef struct func_call func_call;
bool_t xdr_func_call();


typedef char *arg_one;
bool_t xdr_arg_one();


typedef struct {
        u_int arg_array_len;
        arg_one *arg_array_val;
} arg_array;
bool_t xdr_arg_array();


/*
 * Structures used to pass structures required for
 * process control but not part of the standard ptrace interface
 */

/*
 * arg_info is used to pass arguments into process start
 */
struct arg_info {
	int rargc;
	char **rargv;
};
typedef struct arg_info Arg_info;


enum EVENT_TYPE {
        EVENT_BREAK = 0,
        EVENT_STOP = 1,
        EVENT_EXIT = 2,
        EVENT_BUS_ERR = 3,
        EVENT_SUSPEND = 4,
        EVENT_ZERO_DIV = 5,
        EVENT_SIGNAL = 6,
        EVENT_START = 7
};
typedef enum EVENT_TYPE EVENT_TYPE;


struct RDB_EVENT {
	int status;
	int taskId;
        EVENT_TYPE eventType;
        int sigType;
};
typedef struct RDB_EVENT RDB_EVENT;


struct TASK_START {
        int status;
        int pid;
};
typedef struct TASK_START TASK_START;


struct SYMBOL_ADDR {
        int status;
        u_int addr;
};
typedef struct SYMBOL_ADDR SYMBOL_ADDR;

struct SOURCE_STEP {
	int taskId;
	u_int startAddr;
	u_int endAddr;
};
typedef struct SOURCE_STEP SOURCE_STEP;

#define MAX_ARG_CNT 10
#define MAX_FUNC_ARGS 100
#define MAX_ARG_LEN   100


bool_t xdr_arg_info();
bool_t xdr_EVENT_TYPE();
bool_t xdr_RDB_EVENT();
bool_t xdr_TASK_START();
bool_t xdr_SYMBOL_ADDR();
bool_t xdr_SOURCE_STEP();

#define RDBPROG (u_long) 0x44444444
#define RDBVERS (u_long) 3
#endif	INCxdrrdbh
@
