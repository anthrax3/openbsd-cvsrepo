head	1.3;
access;
symbols
	OPENBSD_6_1_BASE:1.3
	OPENBSD_6_0:1.3.0.50
	OPENBSD_6_0_BASE:1.3
	OPENBSD_5_9:1.3.0.46
	OPENBSD_5_9_BASE:1.3
	OPENBSD_5_8:1.3.0.48
	OPENBSD_5_8_BASE:1.3
	OPENBSD_5_7:1.3.0.40
	OPENBSD_5_7_BASE:1.3
	OPENBSD_5_6:1.3.0.44
	OPENBSD_5_6_BASE:1.3
	OPENBSD_5_5:1.3.0.42
	OPENBSD_5_5_BASE:1.3
	OPENBSD_5_4:1.3.0.38
	OPENBSD_5_4_BASE:1.3
	OPENBSD_5_3:1.3.0.36
	OPENBSD_5_3_BASE:1.3
	OPENBSD_5_2:1.3.0.34
	OPENBSD_5_2_BASE:1.3
	OPENBSD_5_1_BASE:1.3
	OPENBSD_5_1:1.3.0.32
	OPENBSD_5_0:1.3.0.30
	OPENBSD_5_0_BASE:1.3
	OPENBSD_4_9:1.3.0.28
	OPENBSD_4_9_BASE:1.3
	OPENBSD_4_8:1.3.0.26
	OPENBSD_4_8_BASE:1.3
	OPENBSD_4_7:1.3.0.22
	OPENBSD_4_7_BASE:1.3
	OPENBSD_4_6:1.3.0.24
	OPENBSD_4_6_BASE:1.3
	OPENBSD_4_5:1.3.0.20
	OPENBSD_4_5_BASE:1.3
	OPENBSD_4_4:1.3.0.18
	OPENBSD_4_4_BASE:1.3
	OPENBSD_4_3:1.3.0.16
	OPENBSD_4_3_BASE:1.3
	OPENBSD_4_2:1.3.0.14
	OPENBSD_4_2_BASE:1.3
	OPENBSD_4_1:1.3.0.12
	OPENBSD_4_1_BASE:1.3
	OPENBSD_4_0:1.3.0.10
	OPENBSD_4_0_BASE:1.3
	OPENBSD_3_9:1.3.0.8
	OPENBSD_3_9_BASE:1.3
	OPENBSD_3_8:1.3.0.6
	OPENBSD_3_8_BASE:1.3
	OPENBSD_3_7:1.3.0.4
	OPENBSD_3_7_BASE:1.3
	GDB_6_3:1.1.1.1
	OPENBSD_3_6:1.3.0.2
	OPENBSD_3_6_BASE:1.3
	GDB_6_1:1.1.1.1
	FSF:1.1.1
	OPENBSD_3_5:1.2.0.32
	OPENBSD_3_5_BASE:1.2
	OPENBSD_3_4:1.2.0.30
	OPENBSD_3_4_BASE:1.2
	OPENBSD_3_3:1.2.0.28
	OPENBSD_3_3_BASE:1.2
	OPENBSD_3_2:1.2.0.26
	OPENBSD_3_2_BASE:1.2
	OPENBSD_3_1:1.2.0.24
	OPENBSD_3_1_BASE:1.2
	OPENBSD_3_0:1.2.0.22
	OPENBSD_3_0_BASE:1.2
	OPENBSD_2_9:1.2.0.20
	OPENBSD_2_9_BASE:1.2
	OPENBSD_2_8:1.2.0.18
	OPENBSD_2_8_BASE:1.2
	OPENBSD_2_7:1.2.0.16
	OPENBSD_2_7_BASE:1.2
	new-binutils:1.2.0.14
	OPENBSD_2_6:1.2.0.12
	OPENBSD_2_6_BASE:1.2
	OPENBSD_2_5:1.2.0.10
	OPENBSD_2_5_BASE:1.2
	OPENBSD_2_4:1.2.0.8
	OPENBSD_2_4_BASE:1.2
	OPENBSD_2_3:1.2.0.6
	OPENBSD_2_3_BASE:1.2
	OPENBSD_2_2:1.2.0.4
	OPENBSD_2_2_BASE:1.2
	OPENBSD_2_1:1.2.0.2
	OPENBSD_2_1_BASE:1.2
	CYGNUS-961112:1.1.2.1
	CYGNUS:1.1.0.2;
locks; strict;
comment	@ * @;


1.3
date	2004.05.21.20.23.16;	author kettenis;	state Exp;
branches;
next	1.2;

1.2
date	96.11.23.03.40.32;	author niklas;	state Exp;
branches;
next	1.1;

1.1
date	96.11.19.14.21.31;	author niklas;	state dead;
branches
	1.1.1.1
	1.1.2.1;
next	;

1.1.1.1
date	2004.05.21.19.14.01;	author kettenis;	state Exp;
branches;
next	;

1.1.2.1
date	96.11.19.14.21.31;	author niklas;	state Exp;
branches;
next	;


desc
@@


1.3
log
@Resolve conflicts for GDB 6.1.  Add local patches.
ok deraadt@@
@
text
@/* Data structures for RS/6000 shared libraries, for GDB.
   Copyright 1991, 1992, 1993, 1994, 1996, 1997, 2000
   Free Software Foundation, Inc.

   This file is part of GDB.

   This program is free software; you can redistribute it and/or modify
   it under the terms of the GNU General Public License as published by
   the Free Software Foundation; either version 2 of the License, or
   (at your option) any later version.

   This program is distributed in the hope that it will be useful,
   but WITHOUT ANY WARRANTY; without even the implied warranty of
   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
   GNU General Public License for more details.

   You should have received a copy of the GNU General Public License
   along with this program; if not, write to the Free Software
   Foundation, Inc., 59 Temple Place - Suite 330,
   Boston, MA 02111-1307, USA.  */

/* The vmap struct is used to describe the virtual address space of
   the target we are manipulating.  The first entry is always the "exec"
   file.  Subsequent entries correspond to other objects that are
   mapped into the address space of a process created from the "exec" file.
   These are either in response to exec()ing the file, in which case all
   shared libraries are loaded, or a "load" system call, followed by the
   user's issuance of a "load" command.  */

#ifndef XCOFFSOLIB_H
#define XCOFFSOLIB_H

struct vmap
  {
    struct vmap *nxt;		/* ptr to next in chain                 */
    bfd *bfd;			/* BFD for mappable object library      */
    char *name;			/* ptr to object file name              */
    char *member;		/* ptr to member name                   */
    CORE_ADDR tstart;		/* virtual addr where member is mapped  */
    CORE_ADDR tend;		/* virtual upper bound of member        */
    CORE_ADDR tvma;		/* virtual addr of text section in object file */
    CORE_ADDR toffs;		/* offset of text section in object file */
    CORE_ADDR dstart;		/* virtual address of data start        */
    CORE_ADDR dend;		/* virtual address of data end          */
    CORE_ADDR dvma;		/* virtual addr of data section in object file */

    /* This is NULL for the exec-file.  */
    struct objfile *objfile;

    unsigned loaded:1;		/* True if symbols are loaded           */
    unsigned padding:15;
  };


struct vmap_and_bfd
  {
    bfd *pbfd;
    struct vmap *pvmap;
  };

extern struct vmap *vmap;

/* Add symbols for a vmap.  */
extern int vmap_add_symbols (struct vmap *vp);

#endif
@


1.2
log
@Merge to Cygnus 961112 + add some support (not ready) for shared libs
@
text
@d2 2
a3 1
   Copyright 1991, 1992, 1994 Free Software Foundation, Inc.
d5 1
a5 1
This file is part of GDB.
d7 14
a20 13
This program is free software; you can redistribute it and/or modify
it under the terms of the GNU General Public License as published by
the Free Software Foundation; either version 2 of the License, or
(at your option) any later version.

This program is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
GNU General Public License for more details.

You should have received a copy of the GNU General Public License
along with this program; if not, write to the Free Software
Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA 02111-1307, USA.  */
d30 30
a59 23
struct vmap {
  struct vmap *nxt;	/* ptr to next in chain			*/
  bfd *bfd;		/* BFD for mappable object library	*/
  char *name;		/* ptr to object file name		*/
  char *member;		/* ptr to member name			*/
  CORE_ADDR tstart;	/* virtual addr where member is mapped	*/
  CORE_ADDR tend;	/* virtual upper bound of member	*/
  CORE_ADDR tadj;	/* heuristically derived adjustment	*/
  CORE_ADDR dstart;	/* virtual address of data start	*/
  CORE_ADDR dend;	/* vitrual address of data end		*/

  /* This is NULL for the exec-file.  */
  struct objfile *objfile;
  
  unsigned  loaded:1;	/* True if symbols are loaded		*/
  unsigned  padding:15;
};


struct vmap_and_bfd {
  bfd *pbfd;
  struct vmap *pvmap;
};
d63 2
a64 4
extern void
add_text_to_loadinfo PARAMS ((CORE_ADDR textaddr, CORE_ADDR dataaddr));

/* Hook for symbol table relocation at runtime. */
d66 1
a66 1
extern void (*xcoff_relocate_symtab_hook) PARAMS ((unsigned int));
@


1.1
log
@file xcoffsolib.h was initially added on branch CYGNUS.
@
text
@d1 59
@


1.1.1.1
log
@GDB 6.1 (excluding .info files)
@
text
@a0 66
/* Data structures for RS/6000 shared libraries, for GDB.
   Copyright 1991, 1992, 1993, 1994, 1996, 1997, 2000
   Free Software Foundation, Inc.

   This file is part of GDB.

   This program is free software; you can redistribute it and/or modify
   it under the terms of the GNU General Public License as published by
   the Free Software Foundation; either version 2 of the License, or
   (at your option) any later version.

   This program is distributed in the hope that it will be useful,
   but WITHOUT ANY WARRANTY; without even the implied warranty of
   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
   GNU General Public License for more details.

   You should have received a copy of the GNU General Public License
   along with this program; if not, write to the Free Software
   Foundation, Inc., 59 Temple Place - Suite 330,
   Boston, MA 02111-1307, USA.  */

/* The vmap struct is used to describe the virtual address space of
   the target we are manipulating.  The first entry is always the "exec"
   file.  Subsequent entries correspond to other objects that are
   mapped into the address space of a process created from the "exec" file.
   These are either in response to exec()ing the file, in which case all
   shared libraries are loaded, or a "load" system call, followed by the
   user's issuance of a "load" command.  */

#ifndef XCOFFSOLIB_H
#define XCOFFSOLIB_H

struct vmap
  {
    struct vmap *nxt;		/* ptr to next in chain                 */
    bfd *bfd;			/* BFD for mappable object library      */
    char *name;			/* ptr to object file name              */
    char *member;		/* ptr to member name                   */
    CORE_ADDR tstart;		/* virtual addr where member is mapped  */
    CORE_ADDR tend;		/* virtual upper bound of member        */
    CORE_ADDR tvma;		/* virtual addr of text section in object file */
    CORE_ADDR toffs;		/* offset of text section in object file */
    CORE_ADDR dstart;		/* virtual address of data start        */
    CORE_ADDR dend;		/* virtual address of data end          */
    CORE_ADDR dvma;		/* virtual addr of data section in object file */

    /* This is NULL for the exec-file.  */
    struct objfile *objfile;

    unsigned loaded:1;		/* True if symbols are loaded           */
    unsigned padding:15;
  };


struct vmap_and_bfd
  {
    bfd *pbfd;
    struct vmap *pvmap;
  };

extern struct vmap *vmap;

/* Add symbols for a vmap.  */
extern int vmap_add_symbols (struct vmap *vp);

#endif
@


1.1.2.1
log
@Import of 961112 Cygnus binutils+gas+ld+gdb+gprof
@
text
@a0 59
/* Data structures for RS/6000 shared libraries, for GDB.
   Copyright 1991, 1992, 1994 Free Software Foundation, Inc.

This file is part of GDB.

This program is free software; you can redistribute it and/or modify
it under the terms of the GNU General Public License as published by
the Free Software Foundation; either version 2 of the License, or
(at your option) any later version.

This program is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
GNU General Public License for more details.

You should have received a copy of the GNU General Public License
along with this program; if not, write to the Free Software
Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA 02111-1307, USA.  */

/* The vmap struct is used to describe the virtual address space of
   the target we are manipulating.  The first entry is always the "exec"
   file.  Subsequent entries correspond to other objects that are
   mapped into the address space of a process created from the "exec" file.
   These are either in response to exec()ing the file, in which case all
   shared libraries are loaded, or a "load" system call, followed by the
   user's issuance of a "load" command.  */

struct vmap {
  struct vmap *nxt;	/* ptr to next in chain			*/
  bfd *bfd;		/* BFD for mappable object library	*/
  char *name;		/* ptr to object file name		*/
  char *member;		/* ptr to member name			*/
  CORE_ADDR tstart;	/* virtual addr where member is mapped	*/
  CORE_ADDR tend;	/* virtual upper bound of member	*/
  CORE_ADDR tadj;	/* heuristically derived adjustment	*/
  CORE_ADDR dstart;	/* virtual address of data start	*/
  CORE_ADDR dend;	/* vitrual address of data end		*/

  /* This is NULL for the exec-file.  */
  struct objfile *objfile;
  
  unsigned  loaded:1;	/* True if symbols are loaded		*/
  unsigned  padding:15;
};


struct vmap_and_bfd {
  bfd *pbfd;
  struct vmap *pvmap;
};

extern struct vmap *vmap;

extern void
add_text_to_loadinfo PARAMS ((CORE_ADDR textaddr, CORE_ADDR dataaddr));

/* Hook for symbol table relocation at runtime. */

extern void (*xcoff_relocate_symtab_hook) PARAMS ((unsigned int));
@
