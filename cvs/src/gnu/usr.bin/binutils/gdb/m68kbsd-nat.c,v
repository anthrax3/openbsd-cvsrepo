head	1.4;
access;
symbols
	OPENBSD_6_1:1.4.0.48
	OPENBSD_6_1_BASE:1.4
	OPENBSD_6_0:1.4.0.44
	OPENBSD_6_0_BASE:1.4
	OPENBSD_5_9:1.4.0.40
	OPENBSD_5_9_BASE:1.4
	OPENBSD_5_8:1.4.0.42
	OPENBSD_5_8_BASE:1.4
	OPENBSD_5_7:1.4.0.34
	OPENBSD_5_7_BASE:1.4
	OPENBSD_5_6:1.4.0.38
	OPENBSD_5_6_BASE:1.4
	OPENBSD_5_5:1.4.0.36
	OPENBSD_5_5_BASE:1.4
	OPENBSD_5_4:1.4.0.32
	OPENBSD_5_4_BASE:1.4
	OPENBSD_5_3:1.4.0.30
	OPENBSD_5_3_BASE:1.4
	OPENBSD_5_2:1.4.0.28
	OPENBSD_5_2_BASE:1.4
	OPENBSD_5_1_BASE:1.4
	OPENBSD_5_1:1.4.0.26
	OPENBSD_5_0:1.4.0.24
	OPENBSD_5_0_BASE:1.4
	OPENBSD_4_9:1.4.0.22
	OPENBSD_4_9_BASE:1.4
	OPENBSD_4_8:1.4.0.20
	OPENBSD_4_8_BASE:1.4
	OPENBSD_4_7:1.4.0.16
	OPENBSD_4_7_BASE:1.4
	OPENBSD_4_6:1.4.0.18
	OPENBSD_4_6_BASE:1.4
	OPENBSD_4_5:1.4.0.14
	OPENBSD_4_5_BASE:1.4
	OPENBSD_4_4:1.4.0.12
	OPENBSD_4_4_BASE:1.4
	OPENBSD_4_3:1.4.0.10
	OPENBSD_4_3_BASE:1.4
	OPENBSD_4_2:1.4.0.8
	OPENBSD_4_2_BASE:1.4
	OPENBSD_4_1:1.4.0.6
	OPENBSD_4_1_BASE:1.4
	OPENBSD_4_0:1.4.0.4
	OPENBSD_4_0_BASE:1.4
	OPENBSD_3_9:1.4.0.2
	OPENBSD_3_9_BASE:1.4
	OPENBSD_3_8:1.3.0.4
	OPENBSD_3_8_BASE:1.3
	OPENBSD_3_7:1.3.0.2
	OPENBSD_3_7_BASE:1.3
	GDB_6_3:1.1.1.1
	FSF:1.1.1
	OPENBSD_3_6:1.2.0.2
	OPENBSD_3_6_BASE:1.2;
locks; strict;
comment	@ * @;


1.4
date	2005.11.21.10.22.31;	author kettenis;	state Exp;
branches;
next	1.3;

1.3
date	2004.12.27.14.00.38;	author kettenis;	state Exp;
branches;
next	1.2;

1.2
date	2004.07.08.08.17.59;	author kettenis;	state Exp;
branches;
next	1.1;

1.1
date	2004.05.21.20.23.09;	author kettenis;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	2004.12.27.13.11.07;	author kettenis;	state Exp;
branches;
next	;


desc
@@


1.4
log
@Cut m68k over to inf-ptrace.c, making fork following work.
@
text
@/* Native-dependent code for Motorola 68000 BSD's.

   Copyright 2004 Free Software Foundation, Inc.

   This file is part of GDB.

   This program is free software; you can redistribute it and/or modify
   it under the terms of the GNU General Public License as published by
   the Free Software Foundation; either version 2 of the License, or
   (at your option) any later version.

   This program is distributed in the hope that it will be useful,
   but WITHOUT ANY WARRANTY; without even the implied warranty of
   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
   GNU General Public License for more details.

   You should have received a copy of the GNU General Public License
   along with this program; if not, write to the Free Software
   Foundation, Inc., 59 Temple Place - Suite 330,
   Boston, MA 02111-1307, USA.  */

#include "defs.h"
#include "gdbcore.h"
#include "inferior.h"
#include "regcache.h"

#include "gdb_assert.h"
#include <sys/types.h>
#include <sys/ptrace.h>
#include <machine/reg.h>

#include "m68k-tdep.h"
#include "inf-ptrace.h"

static int
m68kbsd_gregset_supplies_p (int regnum)
{
  return (regnum >= M68K_D0_REGNUM && regnum <= M68K_PC_REGNUM);
}

static int
m68kbsd_fpregset_supplies_p (int regnum)
{
  return (regnum >= M68K_FP0_REGNUM && regnum <= M68K_FPI_REGNUM);
}

/* Supply the general-purpose registers stored in GREGS to REGCACHE.  */

static void
m68kbsd_supply_gregset (struct regcache *regcache, const void *gregs)
{
  const char *regs = gregs;
  int regnum;

  for (regnum = M68K_D0_REGNUM; regnum <= M68K_PC_REGNUM; regnum++)
    regcache_raw_supply (regcache, regnum, regs + regnum * 4);
}

/* Supply the floating-point registers stored in FPREGS to REGCACHE.  */

static void
m68kbsd_supply_fpregset (struct regcache *regcache, const void *fpregs)
{
  const char *regs = fpregs;
  int regnum;

  for (regnum = M68K_FP0_REGNUM; regnum <= M68K_FPI_REGNUM; regnum++)
    regcache_raw_supply (regcache, regnum,
			 regs + m68kbsd_fpreg_offset (regnum));
}

/* Collect the general-purpose registers from REGCACHE and store them
   in GREGS.  */

static void
m68kbsd_collect_gregset (const struct regcache *regcache,
			 void *gregs, int regnum)
{
  char *regs = gregs;
  int i;

  for (i = M68K_D0_REGNUM; i <= M68K_PC_REGNUM; i++)
    {
      if (regnum == -1 || regnum == i)
	regcache_raw_collect (regcache, i, regs + i * 4);
    }
}

/* Collect the floating-point registers from REGCACHE and store them
   in FPREGS.  */

static void
m68kbsd_collect_fpregset (struct regcache *regcache,
			  void *fpregs, int regnum)
{
  char *regs = fpregs;
  int i;

  for (i = M68K_FP0_REGNUM; i <= M68K_FPI_REGNUM; i++)
    {
      if (regnum == -1 || regnum == i)
	regcache_raw_collect (regcache, i, regs + m68kbsd_fpreg_offset (i));
    }
}


/* Fetch register REGNUM from the inferior.  If REGNUM is -1, do this
   for all registers (including the floating-point registers).  */

static void
m68kbsd_fetch_inferior_registers (int regnum)
{
  if (regnum == -1 || m68kbsd_gregset_supplies_p (regnum))
    {
      struct reg regs;

      if (ptrace (PT_GETREGS, PIDGET (inferior_ptid),
		  (PTRACE_TYPE_ARG3) &regs, 0) == -1)
	perror_with_name (_("Couldn't get registers"));

      m68kbsd_supply_gregset (current_regcache, &regs);
    }

  if (regnum == -1 || m68kbsd_fpregset_supplies_p (regnum))
    {
      struct fpreg fpregs;

      if (ptrace (PT_GETFPREGS, PIDGET (inferior_ptid),
		  (PTRACE_TYPE_ARG3) &fpregs, 0) == -1)
	perror_with_name (_("Couldn't get floating point status"));

      m68kbsd_supply_fpregset (current_regcache, &fpregs);
    }
}

/* Store register REGNUM back into the inferior.  If REGNUM is -1, do
   this for all registers (including the floating-point registers).  */

static void
m68kbsd_store_inferior_registers (int regnum)
{
  if (regnum == -1 || m68kbsd_gregset_supplies_p (regnum))
    {
      struct reg regs;

      if (ptrace (PT_GETREGS, PIDGET (inferior_ptid),
                  (PTRACE_TYPE_ARG3) &regs, 0) == -1)
        perror_with_name (_("Couldn't get registers"));

      m68kbsd_collect_gregset (current_regcache, &regs, regnum);

      if (ptrace (PT_SETREGS, PIDGET (inferior_ptid),
	          (PTRACE_TYPE_ARG3) &regs, 0) == -1)
        perror_with_name (_("Couldn't write registers"));
    }

  if (regnum == -1 || m68kbsd_fpregset_supplies_p (regnum))
    {
      struct fpreg fpregs;

      if (ptrace (PT_GETFPREGS, PIDGET (inferior_ptid),
		  (PTRACE_TYPE_ARG3) &fpregs, 0) == -1)
	perror_with_name (_("Couldn't get floating point status"));

      m68kbsd_collect_fpregset (current_regcache, &fpregs, regnum);

      if (ptrace (PT_SETFPREGS, PIDGET (inferior_ptid),
		  (PTRACE_TYPE_ARG3) &fpregs, 0) == -1)
	perror_with_name (_("Couldn't write floating point status"));
    }
}


/* Support for debugging kernel virtual memory images.  */

#include <sys/types.h>
#include <machine/pcb.h>

#include "bsd-kvm.h"

/* OpenBSD doesn't have these.  */
#ifndef PCB_REGS_FP
#define PCB_REGS_FP 10
#endif
#ifndef PCB_REGS_SP
#define PCB_REGS_SP 11
#endif

static int
m68kbsd_supply_pcb (struct regcache *regcache, struct pcb *pcb)
{
  int regnum, tmp;
  int i = 0;

  /* The following is true for NetBSD 1.6.2:

     The pcb contains %d2...%d7, %a2...%a7 and %ps.  This accounts for
     all callee-saved registers.  From this information we reconstruct
     the register state as it would look when we just returned from
     cpu_switch().  */

  /* The stack pointer shouldn't be zero.  */
  if (pcb->pcb_regs[PCB_REGS_SP] == 0)
    return 0;

  for (regnum = M68K_D2_REGNUM; regnum <= M68K_D7_REGNUM; regnum++)
    regcache_raw_supply (regcache, regnum, &pcb->pcb_regs[i++]);
  for (regnum = M68K_A2_REGNUM; regnum <= M68K_SP_REGNUM; regnum++)
    regcache_raw_supply (regcache, regnum, &pcb->pcb_regs[i++]);

  tmp = pcb->pcb_ps & 0xffff;
  regcache_raw_supply (regcache, M68K_PS_REGNUM, &tmp);

  read_memory (pcb->pcb_regs[PCB_REGS_FP] + 4, (char *) &tmp, sizeof tmp);
  regcache_raw_supply (regcache, M68K_PC_REGNUM, &tmp);

  return 1;
}


/* Provide a prototype to silence -Wmissing-prototypes.  */
void _initialize_m68kbsd_nat (void);

void
_initialize_m68kbsd_nat (void)
{
  struct target_ops *t;

  t = inf_ptrace_target ();
  t->to_fetch_registers = m68kbsd_fetch_inferior_registers;
  t->to_store_registers = m68kbsd_store_inferior_registers;
  add_target (t);

  /* Support debugging kernel virtual memory images.  */
  bsd_kvm_add_target (m68kbsd_supply_pcb);
}
@


1.3
log
@Resolve conflicts for GDB 6.3.  Add local patches.
ok deraadt@@
@
text
@d33 1
d110 2
a111 2
void
fetch_inferior_registers (int regnum)
d119 1
a119 1
	perror_with_name ("Couldn't get registers");
d130 1
a130 1
	perror_with_name ("Couldn't get floating point status");
d139 2
a140 2
void
store_inferior_registers (int regnum)
d148 1
a148 1
        perror_with_name ("Couldn't get registers");
d154 1
a154 1
        perror_with_name ("Couldn't write registers");
d163 1
a163 1
	perror_with_name ("Couldn't get floating point status");
d169 1
a169 1
	perror_with_name ("Couldn't write floating point status");
d227 7
@


1.2
log
@Sync libkvm interface with FSF repository.  This adds new "kvm proc" and
"kvm pcb" commands.
ok deraadt@@
@
text
@d117 1
a117 1
		  (PTRACE_ARG3_TYPE) &regs, 0) == -1)
d128 1
a128 1
		  (PTRACE_ARG3_TYPE) &fpregs, 0) == -1)
d146 1
a146 1
                  (PTRACE_ARG3_TYPE) &regs, 0) == -1)
d152 1
a152 1
	          (PTRACE_ARG3_TYPE) &regs, 0) == -1)
d161 1
a161 1
		  (PTRACE_ARG3_TYPE) &fpregs, 0) == -1)
d167 1
a167 1
		  (PTRACE_ARG3_TYPE) &fpregs, 0) == -1)
@


1.1
log
@Resolve conflicts for GDB 6.1.  Add local patches.
ok deraadt@@
@
text
@d84 1
a84 1
	regcache_raw_collect (regcache, regnum, regs + i * 4);
d101 1
a101 2
	regcache_raw_collect (regcache, regnum,
			      regs + m68kbsd_fpreg_offset (i));
d188 2
a189 2
int
bsd_kvm_supply_pcb (struct regcache *regcache, struct pcb *pcb)
d217 11
@


1.1.1.1
log
@GDB 6.3 (excluding .info files)
@
text
@d84 1
a84 1
	regcache_raw_collect (regcache, i, regs + i * 4);
d101 2
a102 1
	regcache_raw_collect (regcache, i, regs + m68kbsd_fpreg_offset (i));
d118 1
a118 1
		  (PTRACE_TYPE_ARG3) &regs, 0) == -1)
d129 1
a129 1
		  (PTRACE_TYPE_ARG3) &fpregs, 0) == -1)
d147 1
a147 1
                  (PTRACE_TYPE_ARG3) &regs, 0) == -1)
d153 1
a153 1
	          (PTRACE_TYPE_ARG3) &regs, 0) == -1)
d162 1
a162 1
		  (PTRACE_TYPE_ARG3) &fpregs, 0) == -1)
d168 1
a168 1
		  (PTRACE_TYPE_ARG3) &fpregs, 0) == -1)
d189 2
a190 2
static int
m68kbsd_supply_pcb (struct regcache *regcache, struct pcb *pcb)
a217 11
}


/* Provide a prototype to silence -Wmissing-prototypes.  */
void _initialize_m68kbsd_nat (void);

void
_initialize_m68kbsd_nat (void)
{
  /* Support debugging kernel virtual memory images.  */
  bsd_kvm_add_target (m68kbsd_supply_pcb);
@


