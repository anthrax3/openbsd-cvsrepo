head	1.3;
access;
symbols
	OPENBSD_6_1:1.3.0.50
	OPENBSD_6_1_BASE:1.3
	OPENBSD_6_0:1.3.0.48
	OPENBSD_6_0_BASE:1.3
	OPENBSD_5_9:1.3.0.44
	OPENBSD_5_9_BASE:1.3
	OPENBSD_5_8:1.3.0.46
	OPENBSD_5_8_BASE:1.3
	OPENBSD_5_7:1.3.0.38
	OPENBSD_5_7_BASE:1.3
	OPENBSD_5_6:1.3.0.42
	OPENBSD_5_6_BASE:1.3
	OPENBSD_5_5:1.3.0.40
	OPENBSD_5_5_BASE:1.3
	OPENBSD_5_4:1.3.0.36
	OPENBSD_5_4_BASE:1.3
	OPENBSD_5_3:1.3.0.34
	OPENBSD_5_3_BASE:1.3
	OPENBSD_5_2:1.3.0.32
	OPENBSD_5_2_BASE:1.3
	OPENBSD_5_1_BASE:1.3
	OPENBSD_5_1:1.3.0.30
	OPENBSD_5_0:1.3.0.28
	OPENBSD_5_0_BASE:1.3
	OPENBSD_4_9:1.3.0.26
	OPENBSD_4_9_BASE:1.3
	OPENBSD_4_8:1.3.0.24
	OPENBSD_4_8_BASE:1.3
	OPENBSD_4_7:1.3.0.20
	OPENBSD_4_7_BASE:1.3
	OPENBSD_4_6:1.3.0.22
	OPENBSD_4_6_BASE:1.3
	OPENBSD_4_5:1.3.0.18
	OPENBSD_4_5_BASE:1.3
	OPENBSD_4_4:1.3.0.16
	OPENBSD_4_4_BASE:1.3
	OPENBSD_4_3:1.3.0.14
	OPENBSD_4_3_BASE:1.3
	OPENBSD_4_2:1.3.0.12
	OPENBSD_4_2_BASE:1.3
	OPENBSD_4_1:1.3.0.10
	OPENBSD_4_1_BASE:1.3
	OPENBSD_4_0:1.3.0.8
	OPENBSD_4_0_BASE:1.3
	OPENBSD_3_9:1.3.0.6
	OPENBSD_3_9_BASE:1.3
	OPENBSD_3_8:1.3.0.4
	OPENBSD_3_8_BASE:1.3
	OPENBSD_3_7:1.3.0.2
	OPENBSD_3_7_BASE:1.3
	GDB_6_3:1.1.1.2
	OPENBSD_3_6:1.2.0.2
	OPENBSD_3_6_BASE:1.2
	GDB_6_1:1.1.1.1
	FSF:1.1.1
	OPENBSD_3_5:1.1.0.28
	OPENBSD_3_5_BASE:1.1
	OPENBSD_3_4:1.1.0.26
	OPENBSD_3_4_BASE:1.1
	OPENBSD_3_3:1.1.0.24
	OPENBSD_3_3_BASE:1.1
	OPENBSD_3_2:1.1.0.22
	OPENBSD_3_2_BASE:1.1
	OPENBSD_3_1:1.1.0.20
	OPENBSD_3_1_BASE:1.1
	OPENBSD_3_0:1.1.0.18
	OPENBSD_3_0_BASE:1.1
	OPENBSD_2_9:1.1.0.16
	OPENBSD_2_9_BASE:1.1
	OPENBSD_2_8:1.1.0.14
	OPENBSD_2_8_BASE:1.1
	OPENBSD_2_7:1.1.0.12
	OPENBSD_2_7_BASE:1.1
	new-binutils:1.1.0.10
	OPENBSD_2_6:1.1.0.8
	OPENBSD_2_6_BASE:1.1
	OPENBSD_2_5:1.1.0.6
	OPENBSD_2_5_BASE:1.1
	OPENBSD_2_4:1.1.0.4
	OPENBSD_2_4_BASE:1.1
	OPENBSD_2_3:1.1.0.2
	OPENBSD_2_3_BASE:1.1;
locks; strict;
comment	@ * @;


1.3
date	2004.12.27.14.00.39;	author kettenis;	state Exp;
branches;
next	1.2;

1.2
date	2004.05.21.20.23.10;	author kettenis;	state Exp;
branches;
next	1.1;

1.1
date	98.03.29.22.17.24;	author niklas;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	2004.05.21.19.12.01;	author kettenis;	state Exp;
branches;
next	1.1.1.2;

1.1.1.2
date	2004.12.27.13.08.40;	author kettenis;	state Exp;
branches;
next	;


desc
@@


1.3
log
@Resolve conflicts for GDB 6.3.  Add local patches.
ok deraadt@@
@
text
@/* Native-dependent code for MIPS systems running NetBSD.

   Copyright 2000, 2001, 2002, 2004 Free Software Foundation, Inc.

   This file is part of GDB.

   This program is free software; you can redistribute it and/or modify
   it under the terms of the GNU General Public License as published by
   the Free Software Foundation; either version 2 of the License, or
   (at your option) any later version.

   This program is distributed in the hope that it will be useful,
   but WITHOUT ANY WARRANTY; without even the implied warranty of
   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
   GNU General Public License for more details.

   You should have received a copy of the GNU General Public License
   along with this program; if not, write to the Free Software
   Foundation, Inc., 59 Temple Place - Suite 330,
   Boston, MA 02111-1307, USA.  */

#include "defs.h"
#include "inferior.h"
#include "regcache.h"

#include "mipsnbsd-tdep.h"

#include <sys/types.h>
#include <sys/ptrace.h>
#include <machine/reg.h>

/* Determine if PT_GETREGS fetches this register.  */
static int
getregs_supplies (int regno)
{
  return ((regno) >= ZERO_REGNUM && (regno) <= PC_REGNUM);
}

void
fetch_inferior_registers (int regno)
{
  if (regno == -1 || getregs_supplies (regno))
    {
      struct reg regs;

      if (ptrace (PT_GETREGS, PIDGET (inferior_ptid),
		  (PTRACE_TYPE_ARG3) &regs, 0) == -1)
	perror_with_name ("Couldn't get registers");
      
      mipsnbsd_supply_reg ((char *) &regs, regno);
      if (regno != -1)
	return;
    }

  if (regno == -1 || regno >= FP0_REGNUM)
    {
      struct fpreg fpregs;

      if (ptrace (PT_GETFPREGS, PIDGET (inferior_ptid),
		  (PTRACE_TYPE_ARG3) &fpregs, 0) == -1)
	perror_with_name ("Couldn't get floating point status");

      mipsnbsd_supply_fpreg ((char *) &fpregs, regno);
    }
}

void
store_inferior_registers (int regno)
{
  if (regno == -1 || getregs_supplies (regno))
    {
      struct reg regs;

      if (ptrace (PT_GETREGS, PIDGET (inferior_ptid),
		  (PTRACE_TYPE_ARG3) &regs, 0) == -1)
	perror_with_name ("Couldn't get registers");

      mipsnbsd_fill_reg ((char *) &regs, regno);

      if (ptrace (PT_SETREGS, PIDGET (inferior_ptid), 
		  (PTRACE_TYPE_ARG3) &regs, 0) == -1)
	perror_with_name ("Couldn't write registers");

      if (regno != -1)
	return;
    }

  if (regno == -1 || regno >= FP0_REGNUM)
    {
      struct fpreg fpregs; 

      if (ptrace (PT_GETFPREGS, PIDGET (inferior_ptid),
		  (PTRACE_TYPE_ARG3) &fpregs, 0) == -1)
	perror_with_name ("Couldn't get floating point status");

      mipsnbsd_fill_fpreg ((char *) &fpregs, regno);

      if (ptrace (PT_SETFPREGS, PIDGET (inferior_ptid),
		  (PTRACE_TYPE_ARG3) &fpregs, 0) == -1)
	perror_with_name ("Couldn't write floating point status");
    }
}
@


1.2
log
@Resolve conflicts for GDB 6.1.  Add local patches.
ok deraadt@@
@
text
@d2 2
a3 1
   Copyright 2000, 2001, 2002 Free Software Foundation, Inc.
d47 1
a47 1
		  (PTRACE_ARG3_TYPE) &regs, 0) == -1)
d60 1
a60 1
		  (PTRACE_ARG3_TYPE) &fpregs, 0) == -1)
d75 1
a75 1
		  (PTRACE_ARG3_TYPE) &regs, 0) == -1)
d81 1
a81 1
		  (PTRACE_ARG3_TYPE) &regs, 0) == -1)
d93 1
a93 1
		  (PTRACE_ARG3_TYPE) &fpregs, 0) == -1)
d99 1
a99 1
		  (PTRACE_ARG3_TYPE) &fpregs, 0) == -1)
@


1.1
log
@Adapt the newer of our GDB versions to a.out ports.  The main part of this
commit comes from NetBSD.  Also, the kernel debugging mode is a bit different
but you will notice when you type gdb -k because it documents the difference
@
text
@d1 2
a2 19
/* Functions specific to running gdb native on a mips running NetBSD
   Copyright  1997 Free Software Foundation, Inc.
   Contributed by Jonathan Stone(jonathan@@dsg.stanford.edu) at Stanford

This file is part of GDB.

This program is free software; you can redistribute it and/or modify
it under the terms of the GNU General Public License as published by
the Free Software Foundation; either version 2 of the License, or
(at your option) any later version.

This program is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
GNU General Public License for more details.

You should have received a copy of the GNU General Public License
along with this program; if not, write to the Free Software
Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA 02111-1307, USA.  */
d4 16
a19 5
#include <sys/types.h>
#include <sys/ptrace.h>
#include <machine/reg.h>
#include <machine/pcb.h>
#include <setjmp.h>
d23 1
a23 2
#include "target.h"
#include "gdbcore.h"
d25 5
a29 1
#define JB_ELEMENT_SIZE 4
d31 3
a33 3
void
fetch_inferior_registers (regno)
     int regno;
d35 1
a35 18
  struct reg inferior_registers;
  struct fpreg inferior_fp_registers;

  bzero(&inferior_registers, sizeof(inferior_registers));
  ptrace (PT_GETREGS, inferior_pid,
	  (PTRACE_ARG3_TYPE) &inferior_registers, 0);

  memcpy (&registers[REGISTER_BYTE (0)], 
	  &inferior_registers, sizeof(inferior_registers));

  bzero(&inferior_fp_registers, sizeof(inferior_fp_registers));
  ptrace (PT_GETFPREGS, inferior_pid,
	  (PTRACE_ARG3_TYPE) &inferior_fp_registers, 0);

  memcpy (&registers[REGISTER_BYTE (FP0_REGNUM)],
	  &inferior_fp_registers, sizeof(struct fpreg));

  registers_fetched ();
d39 1
a39 28
store_inferior_registers (regno)
     int regno;
{
  struct reg inferior_registers;
  struct fpreg inferior_fp_registers;

  memcpy (&inferior_registers, &registers[REGISTER_BYTE (0)], 
	  sizeof(inferior_registers));

  ptrace (PT_SETREGS, inferior_pid,
	  (PTRACE_ARG3_TYPE) &inferior_registers, 0);

  memcpy (&inferior_fp_registers, &registers[REGISTER_BYTE (FP0_REGNUM)],
	  sizeof(inferior_fp_registers));

  ptrace (PT_SETFPREGS, inferior_pid,
	  (PTRACE_ARG3_TYPE) &inferior_fp_registers, 0);
}


/* Figure out where the longjmp will land.
   We expect the first arg to be a pointer to the jmp_buf structure from which
   we extract the pc (JB_PC) that we will land at.  The pc is copied into PC.
   This routine returns true on success. */

int
get_longjmp_target(pc)
     CORE_ADDR *pc;
d41 20
a60 8
  CORE_ADDR jb_addr;
  char buf[TARGET_PTR_BIT / TARGET_CHAR_BIT];

  jb_addr = read_register (A0_REGNUM);

  if (target_read_memory (jb_addr + JB_PC * JB_ELEMENT_SIZE, buf,
			  TARGET_PTR_BIT / TARGET_CHAR_BIT))
    return 0;
d62 2
a63 3
  *pc = extract_address (buf, TARGET_PTR_BIT / TARGET_CHAR_BIT);

  return 1;
a64 1

a65 19
/* XXX - Add this to machine/regs.h instead? */
struct md_core {
	struct reg intreg;
	struct fpreg freg;
};


/* Extract the register values out of the core file and store
   them where `read_register' will find them.

   CORE_REG_SECT points to the register values themselves, read into memory.
   CORE_REG_SIZE is the size of that area.
   WHICH says which set of registers we are handling (0 = int, 2 = float
         on machines where they are discontiguous).
   REG_ADDR is the offset from u.u_ar0 to the register values relative to
            core_reg_sect.  This is used with old-fashioned core files to
	    locate the registers in a large upage-plus-stack ".reg" section.
	    Original upage address X is at location core_reg_sect+x+reg_addr.
 */
d67 1
a67 5
fetch_core_registers (core_reg_sect, core_reg_size, which, ignore)
  char *core_reg_sect;
  unsigned core_reg_size;
  int which;
  unsigned int ignore;	/* reg addr, unused in this version */
d69 3
a71 1
  struct md_core *core_reg;
d73 3
a75 1
  core_reg = (struct md_core *)core_reg_sect;
d77 1
a77 12
  if (which == 0) {
    /* Integer registers */
    memcpy(&registers[REGISTER_BYTE (0)],
	   &core_reg->intreg, sizeof(struct reg));
  }

  else if (which == 2) {
    /* Floating point registers */
    memcpy(&registers[REGISTER_BYTE (FP0_REGNUM)],
	   &core_reg->freg, sizeof(struct fpreg));
  }
}
d79 3
a81 9
#ifdef	FETCH_KCORE_REGISTERS
/* Get registers from a kernel crash dump. 
   FIXME: NetBSD 1.3 does not produce kernel crashdumps.  */
void
fetch_kcore_registers(pcb)
struct pcb *pcb;
{
  int i, *ip, tmp=0;
  u_long sp;
d83 3
a85 4
#if 0
  supply_register(SP_REGNUM, (char *)&pcb->pcb_sp);
  supply_register(PC_REGNUM, (char *)&pcb->pcb_pc);
#endif
d87 3
a89 4
  /* The kernel does not use the FPU, so ignore it. */
  registers_fetched ();
}
#endif	/* FETCH_KCORE_REGISTERS */
d91 3
a93 3

/* Register that we are able to handle core file formats.
   FIXME: is this really bfd_target_unknown_flavour? */
d95 1
a95 6
static struct core_fns netbsd_core_fns =
{
  bfd_target_unknown_flavour,
  fetch_core_registers,
  NULL
};
d97 4
a100 4
void
_initialize_mipsbsd_nat ()
{
  add_core_fns (&netbsd_core_fns);
@


1.1.1.1
log
@GDB 6.1 (excluding .info files)
@
text
@d1 19
a19 2
/* Native-dependent code for MIPS systems running NetBSD.
   Copyright 2000, 2001, 2002 Free Software Foundation, Inc.
d21 5
a25 16
   This file is part of GDB.

   This program is free software; you can redistribute it and/or modify
   it under the terms of the GNU General Public License as published by
   the Free Software Foundation; either version 2 of the License, or
   (at your option) any later version.

   This program is distributed in the hope that it will be useful,
   but WITHOUT ANY WARRANTY; without even the implied warranty of
   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
   GNU General Public License for more details.

   You should have received a copy of the GNU General Public License
   along with this program; if not, write to the Free Software
   Foundation, Inc., 59 Temple Place - Suite 330,
   Boston, MA 02111-1307, USA.  */
d29 11
a39 1
#include "regcache.h"
d41 3
a43 1
#include "mipsnbsd-tdep.h"
d45 12
a56 3
#include <sys/types.h>
#include <sys/ptrace.h>
#include <machine/reg.h>
d58 3
a60 3
/* Determine if PT_GETREGS fetches this register.  */
static int
getregs_supplies (int regno)
d62 14
a75 1
  return ((regno) >= ZERO_REGNUM && (regno) <= PC_REGNUM);
d78 9
a86 2
void
fetch_inferior_registers (int regno)
d88 8
a95 20
  if (regno == -1 || getregs_supplies (regno))
    {
      struct reg regs;

      if (ptrace (PT_GETREGS, PIDGET (inferior_ptid),
		  (PTRACE_ARG3_TYPE) &regs, 0) == -1)
	perror_with_name ("Couldn't get registers");
      
      mipsnbsd_supply_reg ((char *) &regs, regno);
      if (regno != -1)
	return;
    }

  if (regno == -1 || regno >= FP0_REGNUM)
    {
      struct fpreg fpregs;

      if (ptrace (PT_GETFPREGS, PIDGET (inferior_ptid),
		  (PTRACE_ARG3_TYPE) &fpregs, 0) == -1)
	perror_with_name ("Couldn't get floating point status");
d97 3
a99 2
      mipsnbsd_supply_fpreg ((char *) &fpregs, regno);
    }
d101 1
d103 19
d123 5
a127 1
store_inferior_registers (int regno)
d129 1
a129 3
  if (regno == -1 || getregs_supplies (regno))
    {
      struct reg regs;
d131 1
a131 3
      if (ptrace (PT_GETREGS, PIDGET (inferior_ptid),
		  (PTRACE_ARG3_TYPE) &regs, 0) == -1)
	perror_with_name ("Couldn't get registers");
d133 12
a144 1
      mipsnbsd_fill_reg ((char *) &regs, regno);
d146 9
a154 3
      if (ptrace (PT_SETREGS, PIDGET (inferior_ptid), 
		  (PTRACE_ARG3_TYPE) &regs, 0) == -1)
	perror_with_name ("Couldn't write registers");
d156 4
a159 3
      if (regno != -1)
	return;
    }
d161 4
a164 3
  if (regno == -1 || regno >= FP0_REGNUM)
    {
      struct fpreg fpregs; 
d166 3
a168 3
      if (ptrace (PT_GETFPREGS, PIDGET (inferior_ptid),
		  (PTRACE_ARG3_TYPE) &fpregs, 0) == -1)
	perror_with_name ("Couldn't get floating point status");
d170 6
a175 1
      mipsnbsd_fill_fpreg ((char *) &fpregs, regno);
d177 4
a180 4
      if (ptrace (PT_SETFPREGS, PIDGET (inferior_ptid),
		  (PTRACE_ARG3_TYPE) &fpregs, 0) == -1)
	perror_with_name ("Couldn't write floating point status");
    }
@


1.1.1.2
log
@GDB 6.3 (excluding .info files)
@
text
@d2 1
a2 2

   Copyright 2000, 2001, 2002, 2004 Free Software Foundation, Inc.
d46 1
a46 1
		  (PTRACE_TYPE_ARG3) &regs, 0) == -1)
d59 1
a59 1
		  (PTRACE_TYPE_ARG3) &fpregs, 0) == -1)
d74 1
a74 1
		  (PTRACE_TYPE_ARG3) &regs, 0) == -1)
d80 1
a80 1
		  (PTRACE_TYPE_ARG3) &regs, 0) == -1)
d92 1
a92 1
		  (PTRACE_TYPE_ARG3) &fpregs, 0) == -1)
d98 1
a98 1
		  (PTRACE_TYPE_ARG3) &fpregs, 0) == -1)
@


