head	1.1;
branch	1.1.1;
access;
symbols
	OPENBSD_6_2:1.1.1.2.0.54
	OPENBSD_6_2_BASE:1.1.1.2
	OPENBSD_6_1:1.1.1.2.0.52
	OPENBSD_6_1_BASE:1.1.1.2
	OPENBSD_6_0:1.1.1.2.0.48
	OPENBSD_6_0_BASE:1.1.1.2
	OPENBSD_5_9:1.1.1.2.0.44
	OPENBSD_5_9_BASE:1.1.1.2
	OPENBSD_5_8:1.1.1.2.0.46
	OPENBSD_5_8_BASE:1.1.1.2
	OPENBSD_5_7:1.1.1.2.0.38
	OPENBSD_5_7_BASE:1.1.1.2
	OPENBSD_5_6:1.1.1.2.0.42
	OPENBSD_5_6_BASE:1.1.1.2
	OPENBSD_5_5:1.1.1.2.0.40
	OPENBSD_5_5_BASE:1.1.1.2
	OPENBSD_5_4:1.1.1.2.0.36
	OPENBSD_5_4_BASE:1.1.1.2
	OPENBSD_5_3:1.1.1.2.0.34
	OPENBSD_5_3_BASE:1.1.1.2
	OPENBSD_5_2:1.1.1.2.0.32
	OPENBSD_5_2_BASE:1.1.1.2
	OPENBSD_5_1_BASE:1.1.1.2
	OPENBSD_5_1:1.1.1.2.0.30
	OPENBSD_5_0:1.1.1.2.0.28
	OPENBSD_5_0_BASE:1.1.1.2
	OPENBSD_4_9:1.1.1.2.0.26
	OPENBSD_4_9_BASE:1.1.1.2
	OPENBSD_4_8:1.1.1.2.0.24
	OPENBSD_4_8_BASE:1.1.1.2
	OPENBSD_4_7:1.1.1.2.0.20
	OPENBSD_4_7_BASE:1.1.1.2
	OPENBSD_4_6:1.1.1.2.0.22
	OPENBSD_4_6_BASE:1.1.1.2
	OPENBSD_4_5:1.1.1.2.0.18
	OPENBSD_4_5_BASE:1.1.1.2
	OPENBSD_4_4:1.1.1.2.0.16
	OPENBSD_4_4_BASE:1.1.1.2
	OPENBSD_4_3:1.1.1.2.0.14
	OPENBSD_4_3_BASE:1.1.1.2
	OPENBSD_4_2:1.1.1.2.0.12
	OPENBSD_4_2_BASE:1.1.1.2
	OPENBSD_4_1:1.1.1.2.0.10
	OPENBSD_4_1_BASE:1.1.1.2
	OPENBSD_4_0:1.1.1.2.0.8
	OPENBSD_4_0_BASE:1.1.1.2
	OPENBSD_3_9:1.1.1.2.0.6
	OPENBSD_3_9_BASE:1.1.1.2
	OPENBSD_3_8:1.1.1.2.0.4
	OPENBSD_3_8_BASE:1.1.1.2
	OPENBSD_3_7:1.1.1.2.0.2
	OPENBSD_3_7_BASE:1.1.1.2
	GDB_6_3:1.1.1.2
	OPENBSD_3_6:1.1.1.1.0.2
	OPENBSD_3_6_BASE:1.1.1.1
	GDB_6_1:1.1.1.1
	FSF:1.1.1;
locks; strict;
comment	@# @;


1.1
date	2004.05.21.19.18.02;	author kettenis;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	2004.05.21.19.18.02;	author kettenis;	state Exp;
branches;
next	1.1.1.2;

1.1.1.2
date	2004.12.27.13.16.15;	author kettenis;	state Exp;
branches;
next	;


desc
@@


1.1
log
@Initial revision
@
text
@#   Copyright 2003
#   Free Software Foundation, Inc.

# This program is free software; you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation; either version 2 of the License, or
# (at your option) any later version.
# 
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
# 
# You should have received a copy of the GNU General Public License
# along with this program; if not, write to the Free Software
# Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA 02111-1307, USA.  

# Please email any bugs, comments, and/or additions to this file to:
# bug-gdb@@prep.ai.mit.edu

# This file was written by Joel Brobecker (brobecker@@gnat.com), derived
# from xfullpath.exp.

if $tracelevel then {
    strace $tracelevel
}

set prms_id 0
set bug_id 0

# are we on a target board
if [is_remote target] {
    return
}

proc setup_test { executable } {
    global gdb_prompt
    global timeout

    # load yourself into the debugger
    # This can take a relatively long time, particularly for testing where
    # the executable is being accessed over a network, or where gdb does not
    # support partial symbols for a particular target and has to load the
    # entire symbol table.  Set the timeout to 10 minutes, which should be
    # adequate for most environments (it *has* timed out with 5 min on a
    # SPARCstation SLC under moderate load, so this isn't unreasonable).
    # After gdb is started, set the timeout to 30 seconds for the duration
    # of this test, and then back to the original value.

    set oldtimeout $timeout
    set timeout 600
    verbose "Timeout is now $timeout seconds" 2
    if {[gdb_load $executable] <0} then {
	set timeout $oldtimeout
	verbose "Timeout is now $timeout seconds" 2
	return -1
    }
    set timeout $oldtimeout
    verbose "Timeout is now $timeout seconds" 2

    # Set a breakpoint at main
    gdb_test "break captured_main" \
            "Breakpoint.*at.* file.*, line.*" \
            "breakpoint in captured_main"

    # run yourself
    # It may take a very long time for the inferior gdb to start (lynx),
    # so we bump it back up for the duration of this command.
    set timeout 600

    set description "run until breakpoint at captured_main"
    send_gdb "run -nw\n"
    gdb_expect {
        -re "Starting program.*Breakpoint \[0-9\]+,.*captured_main .data.* at .*main.c:.*$gdb_prompt $" {
            pass "$description"
        }
        -re "Starting program.*Breakpoint \[0-9\]+,.*captured_main .data.*$gdb_prompt $" {
            xfail "$description (line numbers scrambled?)"
        }
        -re "vfork: No more processes.*$gdb_prompt $" {
            fail "$description (out of virtual memory)"
            set timeout $oldtimeout
            verbose "Timeout is now $timeout seconds" 2
            return -1
        }
        -re ".*$gdb_prompt $" {
            fail "$description"
            set timeout $oldtimeout
            verbose "Timeout is now $timeout seconds" 2
            return -1
        }
        timeout {
            fail "$description (timeout)"
        }
    }

    set timeout $oldtimeout
    verbose "Timeout is now $timeout seconds" 2

    return 0
}

proc attach_first_observer { } {
    gdb_test "set \$first_obs = observer_attach_normal_stop (&observer_test_first_notification_function)" \
             "" "attach first observer"
}

proc attach_second_observer { } {
    gdb_test "set \$second_obs = observer_attach_normal_stop (&observer_test_second_notification_function)" \
             "" "attach second observer"
}

proc attach_third_observer { } {
    gdb_test "set \$third_obs = observer_attach_normal_stop (&observer_test_third_notification_function)" \
             "" "attach third observer"
}

proc detach_first_observer { } {
    gdb_test "call observer_detach_normal_stop (\$first_obs)" \
             "" "detach first observer"
}

proc detach_second_observer { } {
    gdb_test "call observer_detach_normal_stop (\$second_obs)" \
             "" "detach second observer"
}

proc detach_third_observer { } {
    gdb_test "call observer_detach_normal_stop (\$third_obs)" \
             "" "detach third observer"
}

proc check_counters { first second third message } {
    gdb_test "print observer_test_first_observer" \
             ".\[0-9\]+ =.*$first" \
             "check first observer counter value ($message)"
    gdb_test "print observer_test_second_observer" \
             ".\[0-9\]+ =.*$second" \
             "check second observer counter value ($message)"
    gdb_test "print observer_test_third_observer" \
             ".\[0-9\]+ =.*$third" \
             "check third observer counter value ($message)"
}

proc reset_counters { } {
    gdb_test "set variable observer_test_first_observer = 0" "" \
             "reset first observer counter"
    gdb_test "set variable observer_test_second_observer = 0" "" \
             "reset second observer counter"
    gdb_test "set variable observer_test_third_observer = 0" "" \
             "reset third observer counter"
}

proc test_normal_stop_notifications { first second third message } {
    reset_counters
    gdb_test "call observer_notify_normal_stop ()" "" \
             "sending notification ($message)"
    check_counters $first $second $third $message
}

proc test_observer_normal_stop { executable } {

    set setup_result [setup_test $executable]
    if {$setup_result <0} then {
        return -1
    }

    # First, try sending a notification without any observer attached.
    test_normal_stop_notifications 0 0 0 "no observer"

    # Now, attach one observer, and send a notification.
    attach_second_observer
    test_normal_stop_notifications 0 1 0 "one observer"

    # Remove the observer, and send a notification.
    detach_second_observer
    test_normal_stop_notifications 0 0 0 "no observer"

    # With a new observer.
    attach_first_observer
    test_normal_stop_notifications 1 0 0 "a new observer"

    # With 2 observers.
    attach_second_observer
    test_normal_stop_notifications 1 1 0 "2 observers"

    # With 3 observers.
    attach_third_observer
    test_normal_stop_notifications 1 1 1 "3 observers"

    # Remove middle observer.
    detach_second_observer
    test_normal_stop_notifications 1 0 1 "middle observer removed"

    # Remove first observer.
    detach_first_observer
    test_normal_stop_notifications 0 0 1 "first observer removed"

    # Remove last observer.
    detach_third_observer
    test_normal_stop_notifications 0 0 0 "last observer removed"

    # Go back to 3 observers, and remove them in a different order...
    attach_first_observer
    attach_second_observer
    attach_third_observer
    test_normal_stop_notifications 1 1 1 "3 observers again"

    # Remove the third observer.
    detach_third_observer
    test_normal_stop_notifications 1 1 0 "third observer removed"

    # Remove the second observer.
    detach_second_observer
    test_normal_stop_notifications 1 0 0 "second observer removed"

    # Remove the first observer, no more observers.
    detach_first_observer
    test_normal_stop_notifications 0 0 0 "last observer removed"

    return 0
}

# Find a pathname to a file that we would execute if the shell was asked
# to run $arg using the current PATH.

proc find_gdb { arg } {

    # If the arg directly specifies an existing executable file, then
    # simply use it.

    if [file executable $arg] then {
	return $arg
    }

    set result [which $arg]
    if [string match "/" [ string range $result 0 0 ]] then {
	return $result
    }

    # If everything fails, just return the unqualified pathname as default
    # and hope for best.

    return $arg
}

# Run the test with self.
# Copy the file executable file in case this OS doesn't like to edit its own
# text space.

set GDB_FULLPATH [find_gdb $GDB]

# Remove any old copy lying around.
remote_file host delete x$tool

gdb_start
set file [remote_download host $GDB_FULLPATH x$tool]
set result [test_observer_normal_stop $file];
gdb_exit;
catch "remote_file host delete $file";

if {$result <0} then {
    warning "Couldn't test self"
    return -1
}
@


1.1.1.1
log
@GDB 6.1 (excluding .info files)
@
text
@@


1.1.1.2
log
@GDB 6.3 (excluding .info files)
@
text
@d1 2
a2 1
# Copyright 2003, 2004 Free Software Foundation, Inc.
d18 3
d53 5
a57 5

    global gdb_file_cmd_debug_info
    set gdb_file_cmd_debug_info "unset"

    set result [gdb_load $executable]
a60 9
    if { $result != 0 } then {
	return -1
    }

    if { $gdb_file_cmd_debug_info != "debug" } then {
	untested "No debug information, skipping testcase."
	return -1
    }

d72 2
a73 1
    gdb_test_multiple "run -nw" "$description" {
d92 3
d103 1
a103 1
proc attach_first_observer { message } {
d105 1
a105 1
	"" "$message; attach first observer"
d108 1
a108 1
proc attach_second_observer { message } {
d110 1
a110 1
	"" "$message; attach second observer"
d113 1
a113 1
proc attach_third_observer { message } {
d115 1
a115 1
	"" "$message; attach third observer"
d118 1
a118 1
proc detach_first_observer { message } {
d120 1
a120 1
	"" "$message; detach first observer"
d123 1
a123 1
proc detach_second_observer { message } {
d125 1
a125 1
	"" "$message; detach second observer"
d128 1
a128 1
proc detach_third_observer { message } {
d130 1
a130 1
	"" "$message; detach third observer"
d135 2
a136 2
	".\[0-9\]+ =.*$first" \
	"$message; check first observer counter value"
d138 2
a139 2
	".\[0-9\]+ =.*$second" \
	"$message; check second observer counter value"
d141 2
a142 2
	".\[0-9\]+ =.*$third" \
	"$message; check third observer counter value"
d145 1
a145 1
proc reset_counters { message } {
d147 1
a147 1
	"$message; reset first observer counter"
d149 1
a149 1
	"$message; reset second observer counter"
d151 1
a151 1
	"$message; reset third observer counter"
d154 4
a157 11
proc test_normal_stop_notifications { first second third message args } {
    # Do any initialization
    for {set i 0} {$i < [llength $args]} {incr i} {
	[lindex $args $i] $message
    }
    reset_counters $message
    # Call observer_notify_normal_stop.  Note that this procedure
    # takes one argument, but this argument is ignored by the observer
    # callbacks we have installed.  So we just pass an arbitrary value.
    gdb_test "call observer_notify_normal_stop (0)" "" \
	"$message; sending notification"
d169 1
a169 1
    test_normal_stop_notifications 0 0 0 "no observer attached"
d172 2
a173 2
    test_normal_stop_notifications 0 1 0 "second observer attached" \
	attach_second_observer
d176 2
a177 2
    test_normal_stop_notifications 0 0 0 "second observer detached" \
	detach_second_observer
d180 2
a181 2
    test_normal_stop_notifications 1 0 0 "1st observer added" \
	attach_first_observer
d184 2
a185 2
    test_normal_stop_notifications 1 1 0 "2nd observer added" \
	attach_second_observer
d188 2
a189 2
    test_normal_stop_notifications 1 1 1 "3rd observer added" \
	attach_third_observer
d192 2
a193 2
    test_normal_stop_notifications 1 0 1 "2nd observer removed" \
	detach_second_observer
d196 2
a197 2
    test_normal_stop_notifications 0 0 1 "1st observer removed" \
	detach_first_observer
d200 2
a201 2
    test_normal_stop_notifications 0 0 0 "3rd observer removed" \
	detach_third_observer
d204 4
a207 4
    test_normal_stop_notifications 1 1 1 "three observers added" \
	attach_first_observer \
	attach_second_observer \
	attach_third_observer 
d210 2
a211 2
    test_normal_stop_notifications 1 1 0 "third observer removed" \
	detach_third_observer
d214 2
a215 2
    test_normal_stop_notifications 1 0 0 "second observer removed" \
	detach_second_observer
d218 2
a219 2
    test_normal_stop_notifications 0 0 0 "first observer removed" \
	detach_first_observer
@

