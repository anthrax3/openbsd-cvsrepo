head	1.3;
access;
symbols
	OPENBSD_3_5:1.2.0.32
	OPENBSD_3_5_BASE:1.2
	OPENBSD_3_4:1.2.0.30
	OPENBSD_3_4_BASE:1.2
	OPENBSD_3_3:1.2.0.28
	OPENBSD_3_3_BASE:1.2
	OPENBSD_3_2:1.2.0.26
	OPENBSD_3_2_BASE:1.2
	OPENBSD_3_1:1.2.0.24
	OPENBSD_3_1_BASE:1.2
	OPENBSD_3_0:1.2.0.22
	OPENBSD_3_0_BASE:1.2
	OPENBSD_2_9:1.2.0.20
	OPENBSD_2_9_BASE:1.2
	OPENBSD_2_8:1.2.0.18
	OPENBSD_2_8_BASE:1.2
	OPENBSD_2_7:1.2.0.16
	OPENBSD_2_7_BASE:1.2
	new-binutils:1.2.0.14
	OPENBSD_2_6:1.2.0.12
	OPENBSD_2_6_BASE:1.2
	OPENBSD_2_5:1.2.0.10
	OPENBSD_2_5_BASE:1.2
	OPENBSD_2_4:1.2.0.8
	OPENBSD_2_4_BASE:1.2
	OPENBSD_2_3:1.2.0.6
	OPENBSD_2_3_BASE:1.2
	OPENBSD_2_2:1.2.0.4
	OPENBSD_2_2_BASE:1.2
	OPENBSD_2_1:1.2.0.2
	OPENBSD_2_1_BASE:1.2
	CYGNUS-961112:1.1.2.1
	CYGNUS:1.1.0.2;
locks; strict;
comment	@# @;


1.3
date	2004.05.21.20.23.38;	author kettenis;	state dead;
branches;
next	1.2;

1.2
date	96.11.23.03.49.31;	author niklas;	state Exp;
branches;
next	1.1;

1.1
date	96.11.19.14.34.36;	author niklas;	state dead;
branches
	1.1.2.1;
next	;

1.1.2.1
date	96.11.19.14.34.36;	author niklas;	state Exp;
branches;
next	;


desc
@@


1.3
log
@Resolve conflicts for GDB 6.1.  Add local patches.
ok deraadt@@
@
text
@#   Copyright (C) 1988, 1990, 1991, 1992, 1995 Free Software Foundation, Inc.

# This program is free software; you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation; either version 2 of the License, or
# (at your option) any later version.
# 
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
# 
# You should have received a copy of the GNU General Public License
# along with this program; if not, write to the Free Software
# Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA 02111-1307, USA.  */

# Please email any bugs, comments, and/or additions to this file to:
# DejaGnu@@cygnus.com

# This file was written by Rob Savoye. (rob@@cygnus.com)

#
# load support libraries
#
load_lib remote.exp
load_lib gdb.exp
load_lib vxworks.exp

set shell_prompt "->"
set prompt "\\(vxgdb\\)"

#
# gdb_version -- extract and print the version number of gcc
#
proc gdb_version {} {
    default_gdb_version
}

#
# gdb_load -- load a file into the debugger.
# We have to stop and start gdb each time we do this, because when
# vxgdb loads two files in a row, the symbols in the first file loaded
# take precedence. Returns -1 on error, else 0.
#
proc gdb_load { arg } {
    global shell_id

#    gdb_exit
#    spawn_vxgdb
    set result 0

    if { [vxworks_ld $shell_id $arg] != 0 } {
	perror "Couldn't load $arg"
	return -1
    }

    return [gdb_file_cmd $arg]
}

#
# gdb_start -- start gdb running and 
#
proc gdb_start { } {
    global prompt
    global verbose
    global targetname
    global connectmode
    global reboot
    global shell_id

    # get a connection to the board
    set shell_id [ eval $connectmode "$targetname" ]
    if { $shell_id < 0 } then {
	perror "Couldn't connect to $targetname."
	return -1
    }
    verbose "Spawn id for remote shell is $shell_id"

    # reboot vxworks to get a clean start
    if $reboot then {
	verbose "Rebooting VxWorks, Please wait...\n"

	send -i $shell_id "\030"
	set timeout 120
	verbose "Timeout is now $timeout seconds" 2
	expect {
	    -i $shell_id -re "Connection closed.*$" {
		verbose "\nVxWorks has closed the shell"
		}
	    -i $shell_id eof {
		perror "(eof) never disconnected from VxWorks shell."
		return -1
	    }
	    -i $shell_id timeout {
		perror "(timeout) never disconnected from VxWorks shell."
		return -1
	    }
	}
	catch "close -i $shell_id" tmp
	wait -i $shell_id
    }
    set timeout 10
    verbose "Timeout is now $timeout seconds" 2

    catch "spawn_vxgdb"
}

proc spawn_vxgdb { } {
    global prompt
    global verbose
    global targetname

    default_gdb_start

    # set the default arguments to "main", so that "run" with no
    # arguments will work correctly.
    send "set args main\n"
    expect -re ".*$prompt $" {}

    verbose "Setting up target, Please wait..."
    # set targets hostname
    send "target vxworks $targetname\n"
    set timeout 60
    verbose "Timeout is now $timeout seconds" 2
    expect {
	-re "Done\..*$prompt $"	{
	    verbose "Set target to $targetname" 1
	}
	-re "net_connect: RPC: Program not registered.*$" {
	    perror "Couldn't set GDB to target $targetname."
	    exit 1
	}
	timeout { 
	    perror "Couldn't set target for vxworks."
	    set timeout 10
	    verbose "Timeout is now $timeout seconds" 2
	    return -1
	}
    }
    set timeout 10
    verbose "Timeout is now $timeout seconds" 2
}

proc gdb_exit { } {
    global shell_id
    if [info exists shell_id] then {
	exit_remote_shell $shell_id
    }
    catch default_gdb_exit
}

#expect_after {
#    "<return>"		   { send "\n"; perror "Window too small." }
#    -re "\(y or n\) " 	   { send "n\n"; perror "Got interactive prompt." }
#    buffer_full		   { perror "internal buffer is full." }
#    eof			   { perror "eof -- pty is hosed." }
#    timeout			   { perror "timeout." }
#    "virtual memory exhausted" { perror "virtual memory exhausted." }
#    "Undefined command"	   { perror "send string probably wrong." }
#}

gdb_start

@


1.2
log
@Merge to Cygnus 961112 + add some support (not ready) for shared libs
@
text
@@


1.1
log
@file vx-gdb.exp was initially added on branch CYGNUS.
@
text
@d1 163
@


1.1.2.1
log
@Import of 961112 Cygnus binutils+gas+ld+gdb+gprof
@
text
@a0 163
#   Copyright (C) 1988, 1990, 1991, 1992, 1995 Free Software Foundation, Inc.

# This program is free software; you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation; either version 2 of the License, or
# (at your option) any later version.
# 
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
# 
# You should have received a copy of the GNU General Public License
# along with this program; if not, write to the Free Software
# Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA 02111-1307, USA.  */

# Please email any bugs, comments, and/or additions to this file to:
# DejaGnu@@cygnus.com

# This file was written by Rob Savoye. (rob@@cygnus.com)

#
# load support libraries
#
load_lib remote.exp
load_lib gdb.exp
load_lib vxworks.exp

set shell_prompt "->"
set prompt "\\(vxgdb\\)"

#
# gdb_version -- extract and print the version number of gcc
#
proc gdb_version {} {
    default_gdb_version
}

#
# gdb_load -- load a file into the debugger.
# We have to stop and start gdb each time we do this, because when
# vxgdb loads two files in a row, the symbols in the first file loaded
# take precedence. Returns -1 on error, else 0.
#
proc gdb_load { arg } {
    global shell_id

#    gdb_exit
#    spawn_vxgdb
    set result 0

    if { [vxworks_ld $shell_id $arg] != 0 } {
	perror "Couldn't load $arg"
	return -1
    }

    return [gdb_file_cmd $arg]
}

#
# gdb_start -- start gdb running and 
#
proc gdb_start { } {
    global prompt
    global verbose
    global targetname
    global connectmode
    global reboot
    global shell_id

    # get a connection to the board
    set shell_id [ eval $connectmode "$targetname" ]
    if { $shell_id < 0 } then {
	perror "Couldn't connect to $targetname."
	return -1
    }
    verbose "Spawn id for remote shell is $shell_id"

    # reboot vxworks to get a clean start
    if $reboot then {
	verbose "Rebooting VxWorks, Please wait...\n"

	send -i $shell_id "\030"
	set timeout 120
	verbose "Timeout is now $timeout seconds" 2
	expect {
	    -i $shell_id -re "Connection closed.*$" {
		verbose "\nVxWorks has closed the shell"
		}
	    -i $shell_id eof {
		perror "(eof) never disconnected from VxWorks shell."
		return -1
	    }
	    -i $shell_id timeout {
		perror "(timeout) never disconnected from VxWorks shell."
		return -1
	    }
	}
	catch "close -i $shell_id" tmp
	wait -i $shell_id
    }
    set timeout 10
    verbose "Timeout is now $timeout seconds" 2

    catch "spawn_vxgdb"
}

proc spawn_vxgdb { } {
    global prompt
    global verbose
    global targetname

    default_gdb_start

    # set the default arguments to "main", so that "run" with no
    # arguments will work correctly.
    send "set args main\n"
    expect -re ".*$prompt $" {}

    verbose "Setting up target, Please wait..."
    # set targets hostname
    send "target vxworks $targetname\n"
    set timeout 60
    verbose "Timeout is now $timeout seconds" 2
    expect {
	-re "Done\..*$prompt $"	{
	    verbose "Set target to $targetname" 1
	}
	-re "net_connect: RPC: Program not registered.*$" {
	    perror "Couldn't set GDB to target $targetname."
	    exit 1
	}
	timeout { 
	    perror "Couldn't set target for vxworks."
	    set timeout 10
	    verbose "Timeout is now $timeout seconds" 2
	    return -1
	}
    }
    set timeout 10
    verbose "Timeout is now $timeout seconds" 2
}

proc gdb_exit { } {
    global shell_id
    if [info exists shell_id] then {
	exit_remote_shell $shell_id
    }
    catch default_gdb_exit
}

#expect_after {
#    "<return>"		   { send "\n"; perror "Window too small." }
#    -re "\(y or n\) " 	   { send "n\n"; perror "Got interactive prompt." }
#    buffer_full		   { perror "internal buffer is full." }
#    eof			   { perror "eof -- pty is hosed." }
#    timeout			   { perror "timeout." }
#    "virtual memory exhausted" { perror "virtual memory exhausted." }
#    "Undefined command"	   { perror "send string probably wrong." }
#}

gdb_start

@
