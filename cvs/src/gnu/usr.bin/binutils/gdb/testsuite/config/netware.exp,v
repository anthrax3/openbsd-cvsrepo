head	1.3;
access;
symbols
	OPENBSD_6_1:1.3.0.54
	OPENBSD_6_1_BASE:1.3
	OPENBSD_6_0:1.3.0.50
	OPENBSD_6_0_BASE:1.3
	OPENBSD_5_9:1.3.0.46
	OPENBSD_5_9_BASE:1.3
	OPENBSD_5_8:1.3.0.48
	OPENBSD_5_8_BASE:1.3
	OPENBSD_5_7:1.3.0.40
	OPENBSD_5_7_BASE:1.3
	OPENBSD_5_6:1.3.0.44
	OPENBSD_5_6_BASE:1.3
	OPENBSD_5_5:1.3.0.42
	OPENBSD_5_5_BASE:1.3
	OPENBSD_5_4:1.3.0.38
	OPENBSD_5_4_BASE:1.3
	OPENBSD_5_3:1.3.0.36
	OPENBSD_5_3_BASE:1.3
	OPENBSD_5_2:1.3.0.34
	OPENBSD_5_2_BASE:1.3
	OPENBSD_5_1_BASE:1.3
	OPENBSD_5_1:1.3.0.32
	OPENBSD_5_0:1.3.0.30
	OPENBSD_5_0_BASE:1.3
	OPENBSD_4_9:1.3.0.28
	OPENBSD_4_9_BASE:1.3
	OPENBSD_4_8:1.3.0.26
	OPENBSD_4_8_BASE:1.3
	OPENBSD_4_7:1.3.0.22
	OPENBSD_4_7_BASE:1.3
	OPENBSD_4_6:1.3.0.24
	OPENBSD_4_6_BASE:1.3
	OPENBSD_4_5:1.3.0.20
	OPENBSD_4_5_BASE:1.3
	OPENBSD_4_4:1.3.0.18
	OPENBSD_4_4_BASE:1.3
	OPENBSD_4_3:1.3.0.16
	OPENBSD_4_3_BASE:1.3
	OPENBSD_4_2:1.3.0.14
	OPENBSD_4_2_BASE:1.3
	OPENBSD_4_1:1.3.0.12
	OPENBSD_4_1_BASE:1.3
	OPENBSD_4_0:1.3.0.10
	OPENBSD_4_0_BASE:1.3
	OPENBSD_3_9:1.3.0.8
	OPENBSD_3_9_BASE:1.3
	OPENBSD_3_8:1.3.0.6
	OPENBSD_3_8_BASE:1.3
	OPENBSD_3_7:1.3.0.4
	OPENBSD_3_7_BASE:1.3
	GDB_6_3:1.1.1.1
	OPENBSD_3_6:1.3.0.2
	OPENBSD_3_6_BASE:1.3
	GDB_6_1:1.1.1.1
	FSF:1.1.1
	OPENBSD_3_5:1.2.0.32
	OPENBSD_3_5_BASE:1.2
	OPENBSD_3_4:1.2.0.30
	OPENBSD_3_4_BASE:1.2
	OPENBSD_3_3:1.2.0.28
	OPENBSD_3_3_BASE:1.2
	OPENBSD_3_2:1.2.0.26
	OPENBSD_3_2_BASE:1.2
	OPENBSD_3_1:1.2.0.24
	OPENBSD_3_1_BASE:1.2
	OPENBSD_3_0:1.2.0.22
	OPENBSD_3_0_BASE:1.2
	OPENBSD_2_9:1.2.0.20
	OPENBSD_2_9_BASE:1.2
	OPENBSD_2_8:1.2.0.18
	OPENBSD_2_8_BASE:1.2
	OPENBSD_2_7:1.2.0.16
	OPENBSD_2_7_BASE:1.2
	new-binutils:1.2.0.14
	OPENBSD_2_6:1.2.0.12
	OPENBSD_2_6_BASE:1.2
	OPENBSD_2_5:1.2.0.10
	OPENBSD_2_5_BASE:1.2
	OPENBSD_2_4:1.2.0.8
	OPENBSD_2_4_BASE:1.2
	OPENBSD_2_3:1.2.0.6
	OPENBSD_2_3_BASE:1.2
	OPENBSD_2_2:1.2.0.4
	OPENBSD_2_2_BASE:1.2
	OPENBSD_2_1:1.2.0.2
	OPENBSD_2_1_BASE:1.2
	CYGNUS-961112:1.1.2.1
	CYGNUS:1.1.0.2;
locks; strict;
comment	@# @;


1.3
date	2004.05.21.20.23.38;	author kettenis;	state Exp;
branches;
next	1.2;

1.2
date	96.11.23.03.49.27;	author niklas;	state Exp;
branches;
next	1.1;

1.1
date	96.11.19.14.34.30;	author niklas;	state dead;
branches
	1.1.1.1
	1.1.2.1;
next	;

1.1.1.1
date	2004.05.21.19.16.15;	author kettenis;	state Exp;
branches;
next	;

1.1.2.1
date	96.11.19.14.34.30;	author niklas;	state Exp;
branches;
next	;


desc
@@


1.3
log
@Resolve conflicts for GDB 6.1.  Add local patches.
ok deraadt@@
@
text
@#   Copyright (C) 1988, 1990, 1991, 1992, 1994, 1997 Free Software Foundation, Inc.

# This program is free software; you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation; either version 2 of the License, or
# (at your option) any later version.
# 
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
# 
# You should have received a copy of the GNU General Public License
# along with this program; if not, write to the Free Software
# Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA 02111-1307, USA.  

# Please email any bugs, comments, and/or additions to this file to:
# bug-gdb@@prep.ai.mit.edu

# This file was written by J.T. Conklin. (jtc@@cygnus.com)

load_lib gdb.exp
load_lib remote.exp

global shell_id

global LD
if ![info exists LD] then {
	set LD [findfile "$base_dir/../../ld/ld.new"]
}

global NLMCONV
if ![info exists NLMCONV] then {
	set NLMCONV [findfile "$base_dir/../../binutils/nlmconv"]
}

#
# gdb_version -- extract and print the version number of gcc
#
proc gdb_version {} {
    default_gdb_version
}

#
# gdb_unload -- unload a file if one is loaded
#

#
# gdb_load -- load a file into the debugger.
#             return a -1 if anything goes wrong.
#
proc gdb_load { arg } {
    global gdb_prompt
    global LD
    global NLMCONV
    global errorCode
    global shell_id

    # FIXME: this is wrong.
    set targetname [target_info name];

    set obj [file tail $arg]
    set nlm "$obj.nlm"
    set lnk "$obj.lnk"

    # build *.lnk file
    set fd [open $lnk w]
    puts $fd "description \"[file tail $nlm]\""
    puts $fd "screenname \"System Console\""
    puts $fd "module clib.nlm"
    puts $fd "module mathlib.nlm"
    puts $fd "stack 32768"
#    puts $fd "stack 64512"
    puts $fd "debug"
    # FIXME: don't hardcode location of prelude.o
    puts $fd "input /s1/cygnus/dejagnu/i386-netware/lib/prelude.o"
    puts $fd "input $arg"
    puts $fd "output $nlm"
    close $fd

    # run nlmconv
    verbose "Executing: $NLMCONV -l$LD -T$lnk" 1
    catch "exec $NLMCONV -l$LD -T$lnk" output
    if ![string match "" $output] then {
	verbose $output 1
    }
    if ![string match "NONE" $errorCode] {
	warning "Can't link $arg"

	return -1
    }
    catch "exec rm -f $lnk"

    # download
    verbose "Downloading $nlm" 1
    catch "exec cp $nlm /.NetWare/$targetname.nws/sys.nwv/tmp/x.nlm" output
    if ![string match "" $output] then {
	verbose $output 1
	return -1
    }

    gdb_file_cmd $nlm
}

proc gdb_run_cmd { } {
    global shell_id
    global gdb_prompt
    global timeout

    set connhost [target_info name];
    if [board_info $connhost exists serial] {
	set serialport [board_info $connhost serial];
    } else {
	set serialport [board_info $connhost netport];
    }

    if [board_info $connhost exists baud] {
	set baud [board_info $connhost baud];
    } else {
	set baud 9600;
    }
    # FIXME: This is wrong.
    send "kill\n"
    gdb_expect {
	-re ".*Kill the program being debugged.*y or n. $" {
	    send "y\n"
	    exp_continue
	}
	-re ".*$gdb_prompt $" {}
    }

    verbose "Starting GDB stub on [target_info name]" 1
    send -i $shell_id "load nlmstub BAUD=$baud x.nlm\r\n"

    send "set remotebaud $baud\n"
    gdb_expect {
	-re "$gdb_prompt" {}
	timeout {
	    perror "Couldn't set remote baud rate"
	    return
	}
    }

    set otimeout $timeout
    set timeout 60
    verbose "Timeout is now $timeout seconds" 2
    send "target remote $serialport\n"
    gdb_expect {
	-re "Couldn't establish connection to remote target" {
	    send "target remote $serialport\n"
	    exp_continue
	}
	-re "$gdb_prompt" {}
	timeout {
	    set timeout $otimeout
	    verbose "Timeout restored to $timeout seconds" 2
	    perror "Couldn't set remote target"
	    return
	}
    }
    set timeout $otimeout
    verbose "Timeout restored to $timeout seconds" 2

    send "continue\n"
    gdb_expect {
	"Continuing.$" {}
    }

    return
}



#
# start the remote shell
#

set shell_prompt "Password:"
set shell_id [remote_open target]

if $shell_id<0 then {
    warning "Couldn't connect to target"
    return -1
}

if [string match "" $passwd] then {
    stty -echo
    send_user "Password: "
    expect_user -re "(.*)\n"
    send_user "\n"
    set passwd "$expect_out(1,string)"
    stty echo
}

send -i $shell_id "$passwd\n"
gdb_expect {
    -i $shell_id ":" {
	verbose "Got termtype prompt" 0
    }

    -i $shell_id timeout {
	warning "Connection timed out"
	return -1
    }
}


# FIXME: this is wrong.
set shell_prompt "[string toupper [target_info name]]:"
send -i $shell_id "1\n"

gdb_expect {
    -i $shell_id -re "$shell_prompt" {}
    -i $shell_id timeout {
	warning "Connection timed out"
	return -1
    }
}
@


1.2
log
@Merge to Cygnus 961112 + add some support (not ready) for shared libs
@
text
@d1 1
a1 1
#   Copyright (C) 1988, 1990, 1991, 1992, 1994 Free Software Foundation, Inc.
d15 1
a15 1
# Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA 02111-1307, USA.  */
a25 1
global passwd
d53 1
a53 1
    global prompt
a56 1
    global targetname
d59 3
a104 8
proc gdb_start { } {
    default_gdb_start
}
  
proc gdb_exit { } {
    catch default_gdb_exit
}

d107 1
a107 3
    global prompt
    global baud serialport
    global targetname
d110 13
d124 1
a124 1
    expect {
d129 1
a129 1
	-re ".*$prompt $" {}
d132 1
a132 1
    verbose "Starting GDB stub on $targetname" 1
d136 2
a137 2
    expect {
	-re "$prompt" {}
d148 1
a148 1
    expect {
d153 1
a153 1
	-re "$prompt" {}
d165 1
a165 1
    expect {
d179 1
a179 1
set shell_id [ eval $connectmode "$targetname" ]
d196 1
a196 1
expect {
d208 2
a209 1
set shell_prompt "[string toupper $targetname]:"
d212 1
a212 1
expect {
a218 2

gdb_start
@


1.1
log
@file netware.exp was initially added on branch CYGNUS.
@
text
@d1 215
@


1.1.1.1
log
@GDB 6.1 (excluding .info files)
@
text
@a0 218
#   Copyright (C) 1988, 1990, 1991, 1992, 1994, 1997 Free Software Foundation, Inc.

# This program is free software; you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation; either version 2 of the License, or
# (at your option) any later version.
# 
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
# 
# You should have received a copy of the GNU General Public License
# along with this program; if not, write to the Free Software
# Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA 02111-1307, USA.  

# Please email any bugs, comments, and/or additions to this file to:
# bug-gdb@@prep.ai.mit.edu

# This file was written by J.T. Conklin. (jtc@@cygnus.com)

load_lib gdb.exp
load_lib remote.exp

global shell_id

global LD
if ![info exists LD] then {
	set LD [findfile "$base_dir/../../ld/ld.new"]
}

global NLMCONV
if ![info exists NLMCONV] then {
	set NLMCONV [findfile "$base_dir/../../binutils/nlmconv"]
}

#
# gdb_version -- extract and print the version number of gcc
#
proc gdb_version {} {
    default_gdb_version
}

#
# gdb_unload -- unload a file if one is loaded
#

#
# gdb_load -- load a file into the debugger.
#             return a -1 if anything goes wrong.
#
proc gdb_load { arg } {
    global gdb_prompt
    global LD
    global NLMCONV
    global errorCode
    global shell_id

    # FIXME: this is wrong.
    set targetname [target_info name];

    set obj [file tail $arg]
    set nlm "$obj.nlm"
    set lnk "$obj.lnk"

    # build *.lnk file
    set fd [open $lnk w]
    puts $fd "description \"[file tail $nlm]\""
    puts $fd "screenname \"System Console\""
    puts $fd "module clib.nlm"
    puts $fd "module mathlib.nlm"
    puts $fd "stack 32768"
#    puts $fd "stack 64512"
    puts $fd "debug"
    # FIXME: don't hardcode location of prelude.o
    puts $fd "input /s1/cygnus/dejagnu/i386-netware/lib/prelude.o"
    puts $fd "input $arg"
    puts $fd "output $nlm"
    close $fd

    # run nlmconv
    verbose "Executing: $NLMCONV -l$LD -T$lnk" 1
    catch "exec $NLMCONV -l$LD -T$lnk" output
    if ![string match "" $output] then {
	verbose $output 1
    }
    if ![string match "NONE" $errorCode] {
	warning "Can't link $arg"

	return -1
    }
    catch "exec rm -f $lnk"

    # download
    verbose "Downloading $nlm" 1
    catch "exec cp $nlm /.NetWare/$targetname.nws/sys.nwv/tmp/x.nlm" output
    if ![string match "" $output] then {
	verbose $output 1
	return -1
    }

    gdb_file_cmd $nlm
}

proc gdb_run_cmd { } {
    global shell_id
    global gdb_prompt
    global timeout

    set connhost [target_info name];
    if [board_info $connhost exists serial] {
	set serialport [board_info $connhost serial];
    } else {
	set serialport [board_info $connhost netport];
    }

    if [board_info $connhost exists baud] {
	set baud [board_info $connhost baud];
    } else {
	set baud 9600;
    }
    # FIXME: This is wrong.
    send "kill\n"
    gdb_expect {
	-re ".*Kill the program being debugged.*y or n. $" {
	    send "y\n"
	    exp_continue
	}
	-re ".*$gdb_prompt $" {}
    }

    verbose "Starting GDB stub on [target_info name]" 1
    send -i $shell_id "load nlmstub BAUD=$baud x.nlm\r\n"

    send "set remotebaud $baud\n"
    gdb_expect {
	-re "$gdb_prompt" {}
	timeout {
	    perror "Couldn't set remote baud rate"
	    return
	}
    }

    set otimeout $timeout
    set timeout 60
    verbose "Timeout is now $timeout seconds" 2
    send "target remote $serialport\n"
    gdb_expect {
	-re "Couldn't establish connection to remote target" {
	    send "target remote $serialport\n"
	    exp_continue
	}
	-re "$gdb_prompt" {}
	timeout {
	    set timeout $otimeout
	    verbose "Timeout restored to $timeout seconds" 2
	    perror "Couldn't set remote target"
	    return
	}
    }
    set timeout $otimeout
    verbose "Timeout restored to $timeout seconds" 2

    send "continue\n"
    gdb_expect {
	"Continuing.$" {}
    }

    return
}



#
# start the remote shell
#

set shell_prompt "Password:"
set shell_id [remote_open target]

if $shell_id<0 then {
    warning "Couldn't connect to target"
    return -1
}

if [string match "" $passwd] then {
    stty -echo
    send_user "Password: "
    expect_user -re "(.*)\n"
    send_user "\n"
    set passwd "$expect_out(1,string)"
    stty echo
}

send -i $shell_id "$passwd\n"
gdb_expect {
    -i $shell_id ":" {
	verbose "Got termtype prompt" 0
    }

    -i $shell_id timeout {
	warning "Connection timed out"
	return -1
    }
}


# FIXME: this is wrong.
set shell_prompt "[string toupper [target_info name]]:"
send -i $shell_id "1\n"

gdb_expect {
    -i $shell_id -re "$shell_prompt" {}
    -i $shell_id timeout {
	warning "Connection timed out"
	return -1
    }
}
@


1.1.2.1
log
@Import of 961112 Cygnus binutils+gas+ld+gdb+gprof
@
text
@a0 215
#   Copyright (C) 1988, 1990, 1991, 1992, 1994 Free Software Foundation, Inc.

# This program is free software; you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation; either version 2 of the License, or
# (at your option) any later version.
# 
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
# 
# You should have received a copy of the GNU General Public License
# along with this program; if not, write to the Free Software
# Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA 02111-1307, USA.  */

# Please email any bugs, comments, and/or additions to this file to:
# bug-gdb@@prep.ai.mit.edu

# This file was written by J.T. Conklin. (jtc@@cygnus.com)

load_lib gdb.exp
load_lib remote.exp

global shell_id
global passwd

global LD
if ![info exists LD] then {
	set LD [findfile "$base_dir/../../ld/ld.new"]
}

global NLMCONV
if ![info exists NLMCONV] then {
	set NLMCONV [findfile "$base_dir/../../binutils/nlmconv"]
}

#
# gdb_version -- extract and print the version number of gcc
#
proc gdb_version {} {
    default_gdb_version
}

#
# gdb_unload -- unload a file if one is loaded
#

#
# gdb_load -- load a file into the debugger.
#             return a -1 if anything goes wrong.
#
proc gdb_load { arg } {
    global prompt
    global LD
    global NLMCONV
    global errorCode
    global targetname
    global shell_id

    set obj [file tail $arg]
    set nlm "$obj.nlm"
    set lnk "$obj.lnk"

    # build *.lnk file
    set fd [open $lnk w]
    puts $fd "description \"[file tail $nlm]\""
    puts $fd "screenname \"System Console\""
    puts $fd "module clib.nlm"
    puts $fd "module mathlib.nlm"
    puts $fd "stack 32768"
#    puts $fd "stack 64512"
    puts $fd "debug"
    # FIXME: don't hardcode location of prelude.o
    puts $fd "input /s1/cygnus/dejagnu/i386-netware/lib/prelude.o"
    puts $fd "input $arg"
    puts $fd "output $nlm"
    close $fd

    # run nlmconv
    verbose "Executing: $NLMCONV -l$LD -T$lnk" 1
    catch "exec $NLMCONV -l$LD -T$lnk" output
    if ![string match "" $output] then {
	verbose $output 1
    }
    if ![string match "NONE" $errorCode] {
	warning "Can't link $arg"

	return -1
    }
    catch "exec rm -f $lnk"

    # download
    verbose "Downloading $nlm" 1
    catch "exec cp $nlm /.NetWare/$targetname.nws/sys.nwv/tmp/x.nlm" output
    if ![string match "" $output] then {
	verbose $output 1
	return -1
    }

    gdb_file_cmd $nlm
}

proc gdb_start { } {
    default_gdb_start
}
  
proc gdb_exit { } {
    catch default_gdb_exit
}

proc gdb_run_cmd { } {
    global shell_id
    global prompt
    global baud serialport
    global targetname
    global timeout

    send "kill\n"
    expect {
	-re ".*Kill the program being debugged.*y or n. $" {
	    send "y\n"
	    exp_continue
	}
	-re ".*$prompt $" {}
    }

    verbose "Starting GDB stub on $targetname" 1
    send -i $shell_id "load nlmstub BAUD=$baud x.nlm\r\n"

    send "set remotebaud $baud\n"
    expect {
	-re "$prompt" {}
	timeout {
	    perror "Couldn't set remote baud rate"
	    return
	}
    }

    set otimeout $timeout
    set timeout 60
    verbose "Timeout is now $timeout seconds" 2
    send "target remote $serialport\n"
    expect {
	-re "Couldn't establish connection to remote target" {
	    send "target remote $serialport\n"
	    exp_continue
	}
	-re "$prompt" {}
	timeout {
	    set timeout $otimeout
	    verbose "Timeout restored to $timeout seconds" 2
	    perror "Couldn't set remote target"
	    return
	}
    }
    set timeout $otimeout
    verbose "Timeout restored to $timeout seconds" 2

    send "continue\n"
    expect {
	"Continuing.$" {}
    }

    return
}



#
# start the remote shell
#

set shell_prompt "Password:"
set shell_id [ eval $connectmode "$targetname" ]

if $shell_id<0 then {
    warning "Couldn't connect to target"
    return -1
}

if [string match "" $passwd] then {
    stty -echo
    send_user "Password: "
    expect_user -re "(.*)\n"
    send_user "\n"
    set passwd "$expect_out(1,string)"
    stty echo
}

send -i $shell_id "$passwd\n"
expect {
    -i $shell_id ":" {
	verbose "Got termtype prompt" 0
    }

    -i $shell_id timeout {
	warning "Connection timed out"
	return -1
    }
}


set shell_prompt "[string toupper $targetname]:"
send -i $shell_id "1\n"

expect {
    -i $shell_id -re "$shell_prompt" {}
    -i $shell_id timeout {
	warning "Connection timed out"
	return -1
    }
}

gdb_start
@
