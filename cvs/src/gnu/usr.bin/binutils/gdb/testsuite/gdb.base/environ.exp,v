head	1.1;
branch	1.1.1;
access;
symbols
	OPENBSD_6_2:1.1.1.1.0.52
	OPENBSD_6_2_BASE:1.1.1.1
	OPENBSD_6_1:1.1.1.1.0.54
	OPENBSD_6_1_BASE:1.1.1.1
	OPENBSD_6_0:1.1.1.1.0.50
	OPENBSD_6_0_BASE:1.1.1.1
	OPENBSD_5_9:1.1.1.1.0.46
	OPENBSD_5_9_BASE:1.1.1.1
	OPENBSD_5_8:1.1.1.1.0.48
	OPENBSD_5_8_BASE:1.1.1.1
	OPENBSD_5_7:1.1.1.1.0.40
	OPENBSD_5_7_BASE:1.1.1.1
	OPENBSD_5_6:1.1.1.1.0.44
	OPENBSD_5_6_BASE:1.1.1.1
	OPENBSD_5_5:1.1.1.1.0.42
	OPENBSD_5_5_BASE:1.1.1.1
	OPENBSD_5_4:1.1.1.1.0.38
	OPENBSD_5_4_BASE:1.1.1.1
	OPENBSD_5_3:1.1.1.1.0.36
	OPENBSD_5_3_BASE:1.1.1.1
	OPENBSD_5_2:1.1.1.1.0.34
	OPENBSD_5_2_BASE:1.1.1.1
	OPENBSD_5_1_BASE:1.1.1.1
	OPENBSD_5_1:1.1.1.1.0.32
	OPENBSD_5_0:1.1.1.1.0.30
	OPENBSD_5_0_BASE:1.1.1.1
	OPENBSD_4_9:1.1.1.1.0.28
	OPENBSD_4_9_BASE:1.1.1.1
	OPENBSD_4_8:1.1.1.1.0.26
	OPENBSD_4_8_BASE:1.1.1.1
	OPENBSD_4_7:1.1.1.1.0.22
	OPENBSD_4_7_BASE:1.1.1.1
	OPENBSD_4_6:1.1.1.1.0.24
	OPENBSD_4_6_BASE:1.1.1.1
	OPENBSD_4_5:1.1.1.1.0.20
	OPENBSD_4_5_BASE:1.1.1.1
	OPENBSD_4_4:1.1.1.1.0.18
	OPENBSD_4_4_BASE:1.1.1.1
	OPENBSD_4_3:1.1.1.1.0.16
	OPENBSD_4_3_BASE:1.1.1.1
	OPENBSD_4_2:1.1.1.1.0.14
	OPENBSD_4_2_BASE:1.1.1.1
	OPENBSD_4_1:1.1.1.1.0.12
	OPENBSD_4_1_BASE:1.1.1.1
	OPENBSD_4_0:1.1.1.1.0.10
	OPENBSD_4_0_BASE:1.1.1.1
	OPENBSD_3_9:1.1.1.1.0.8
	OPENBSD_3_9_BASE:1.1.1.1
	OPENBSD_3_8:1.1.1.1.0.6
	OPENBSD_3_8_BASE:1.1.1.1
	OPENBSD_3_7:1.1.1.1.0.4
	OPENBSD_3_7_BASE:1.1.1.1
	GDB_6_3:1.1.1.1
	OPENBSD_3_6:1.1.1.1.0.2
	OPENBSD_3_6_BASE:1.1.1.1
	GDB_6_1:1.1.1.1
	FSF:1.1.1;
locks; strict;
comment	@# @;


1.1
date	2004.05.21.19.16.34;	author kettenis;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	2004.05.21.19.16.34;	author kettenis;	state Exp;
branches;
next	;


desc
@@


1.1
log
@Initial revision
@
text
@# Copyright 1997, 1998, 1999, 2003 Free Software Foundation, Inc.

# This program is free software; you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation; either version 2 of the License, or
# (at your option) any later version.
# 
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
# 
# You should have received a copy of the GNU General Public License
# along with this program; if not, write to the Free Software
# Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA 02111-1307, USA.  */

# Please email any bugs, comments, and/or additions to this file to:
# bug-gdb@@prep.ai.mit.edu

if $tracelevel then {
	strace $tracelevel
	}

global usestubs

#
# test running programs
#
set prms_id 0
set bug_id 0

# This test exists solely to exercise the "environment" commands for
# code-coverage on HP-UX.
#
if ![istarget "hppa*-*-hpux*"] then {
  return
}

set testfile "break"
set srcfile ${testfile}.c
set srcfile1 ${testfile}1.c
set binfile ${objdir}/${subdir}/${testfile}

if { [gdb_compile "${srcdir}/${subdir}/${srcfile}" "${binfile}0.o" object {debug additional_flags=-w}] != "" } {
    gdb_suppress_entire_file "Testcase compile failed, so all tests in this file will automatically fail."
}

if { [gdb_compile "${srcdir}/${subdir}/${srcfile1}" "${binfile}1.o" object {debug additional_flags=-w}] != "" } {
    gdb_suppress_entire_file "Testcase compile failed, so all tests in this file will automatically fail."
}

if { [gdb_compile "${binfile}0.o ${binfile}1.o" "${binfile}" executable {debug additional_flags=-w}] != "" } {
    gdb_suppress_entire_file "Testcase compile failed, so all tests in this file will automatically fail."
}

gdb_exit
gdb_start
gdb_reinitialize_dir $srcdir/$subdir
gdb_load ${binfile}

if ![runto_main] then { fail "environment command tests suppressed" }

# (No, this is not really related to the environment commands.  But it's
# a convenient place to verify that this command works.)
#
send_gdb "info program\n"
gdb_expect {
  -re ".*Using the running image of child process \[0-9\]*.\r\nProgram stopped at 0x\[0-9a-fA-F\]*.\r\nIt stopped at breakpoint 1..*$gdb_prompt $"\
          {pass "info program"}
  -re "$gdb_prompt $"\
          {fail "info program"}
  timeout {fail "(timeout) info program"}
}

# We don't really care where this step lands, so long as it gets
# the inferior pushed off the breakpoint it's currently on...
#
send_gdb "next\n"
gdb_expect {
  -re ".*$gdb_prompt $"\
          {pass "step before info program"}
  timeout {fail "(timeout) step before info program"}
}
send_gdb "info program\n"
gdb_expect {
  -re ".*Using the running image of child process \[0-9\]*.\r\nProgram stopped at 0x\[0-9a-fA-F\]*.\r\nIt stopped after being stepped..*$gdb_prompt $"\
          {pass "info program after step"}
  -re "$gdb_prompt $"\
          {fail "info program after step"}
  timeout {fail "(timeout) info program after step"}
}

if ![runto_main] then { fail "environment command tests suppressed" }

send_gdb "delete\n"
gdb_expect {
  -re ".*y or n. $"\
          {send_gdb "y\n"
           gdb_expect {
             -re ".*$gdb_prompt $"\
                     {pass "delete breakpoint before info program"}
             timeout {fail "(timeout) delete breakpoint before info program"}
           }
          }
  -re "$gdb_prompt $"\
          {fail "delete breakpoint before info program"}
  timeout {fail "(timeout) delete breakpoint before info program"}
}
send_gdb "info program\n"
gdb_expect {
  -re ".*Using the running image of child process \[0-9\]*.\r\nProgram stopped at 0x\[0-9a-fA-F\]*.\r\nIt stopped at a breakpoint that has since been deleted..*$gdb_prompt $"\
          {pass "info program after deleted breakpoint"}
  -re "$gdb_prompt $"\
          {fail "info program after deleted breakpoint"}
  timeout {fail "(timeout) info program after deleted breakpoint"}
}

# Verify that we can show all currently-set environment variables.
# (It's a bit hacky, but nonetheless probably safe to check for at
# least the SHELL variable.)
#
# need to increase timeout because of very long output
set oldtimeout $timeout
set timeout [expr "$timeout + 300"]

send_gdb "show environment\n"
gdb_expect {
  -re ".*SHELL=(\[a-zA-Z0-9\]*).*$gdb_prompt $"\
          {pass "show environment"}
  -re "$gdb_prompt $"\
          {fail "show environment"}
  timeout {fail "(timeout) show environment"}
}
set timeout $oldtimeout

# Verify that we can unset a specific environment variable.
#
send_gdb "unset environment EDITOR\n"
gdb_expect {
  -re "$gdb_prompt $"\
          {pass "issue unset environment"}
  timeout {fail "(timeout) issue unset environment"}
}
send_gdb "show environment EDITOR\n"
gdb_expect {
  -re "Environment variable \"EDITOR\" not defined.\r\n$gdb_prompt $"\
          {pass "unset environment"}
  -re "$gdb_prompt $"\
          {fail "unset environment"}
  timeout {fail "(timeout) unset environment"}
}

# Verify that we can unset all environment variables.
#
send_gdb "unset environment\n"
gdb_expect {
  -re "Delete all environment variables.*y or n. $"\
          {send_gdb "y\n"
           gdb_expect {
             -re "$gdb_prompt $"\
                     {pass "unset entire environment"}
             timeout {fail "(timeout) unset entire environment"}
           }
          }
  -re "$gdb_prompt $"\
          {fail "unset entire environment"}
  timeout {fail "(timeout) unset entire environment"}
}

# Verify that we can set a specific environment variable.
#
send_gdb "set environment EDITOR emacs\n"
gdb_expect {
  -re "$gdb_prompt $"\
          {pass "issue set environment"}
  timeout {fail "(timeout) issue set environment"}
}
send_gdb "show environment EDITOR\n"
gdb_expect {
  -re "EDITOR = emacs\r\n$gdb_prompt $"\
          {pass "set environment"}
  -re "$gdb_prompt $"\
          {fail "set environment"}
  timeout {fail "(timeout) set environment"}
}

# Verify that GDB responds gracefully to a request to set environment,
# with no variable name.
#
send_gdb "set environment\n"
gdb_expect {
  -re "Argument required .environment variable and value..*$gdb_prompt $"\
          {pass "set environment without variable disallowed"}
  -re "$gdb_prompt $"\
          {fail "set environment without variable disallowed"}
  timeout {fail "(timeout) set environment without variable disallowed"}
}

# I'm not sure just what GDB has in mind in explicitly checking
# for this variant, but since GDB handles it, test it.
#
send_gdb "set environment =\n"
gdb_expect {
  -re "Argument required .environment variable to set..*$gdb_prompt $"\
          {pass "set environment equals without variable disallowed"}
  -re "$gdb_prompt $"\
          {fail "set environment equals without variable disallowed"}
  timeout {fail "(timeout) set environment equals without variable disallowed"}
}

# Setting an environment variable without a value sets it to a NULL
# value.
#
send_gdb "set environment EDITOR\n"
gdb_expect {
  -re "Setting environment variable \"EDITOR\" to null value..*$gdb_prompt $"\
          {pass "issue set environment without variable value"}
  -re "$gdb_prompt $"\
          {fail "issue set environment without variable value"}
  timeout {fail "(timeout) issue set environment without variable value"}
}
send_gdb "show environment EDITOR\n"
gdb_expect {
  -re "EDITOR = \r\n$gdb_prompt $"\
          {pass "set environment without variable value"}
  -re "$gdb_prompt $"\
          {fail "set environment without variable value"}
  timeout {fail "(timeout) set environment without variable value"}
}

# Verify that GDB responds gracefully to an attempt to show a
# non-existent environment variable.  (We hope this variable is
# undefined!)
#
send_gdb "show environment FOOBARBAZGRUNGESPAZBALL\n"
gdb_expect {
  -re "Environment variable \"FOOBARBAZGRUNGESPAZBALL\" not defined..*$gdb_prompt $"\
          {pass "show non-existent environment variable disallowed"}
  -re "$gdb_prompt $"\
          {fail "show non-existent environment variable disallowed"}
  timeout {fail "(timeout) show non-existent environment variable disallowed"}
}

# Verify that GDB can set an environment variable hitherto undefined.
#
send_gdb "set environment FOOBARBAZGRUNGESPAZBALL t\n"
gdb_expect {
  -re "$gdb_prompt $"\
          {pass "issue set environment for previously undefined variable"}
  timeout {fail "(timeout) issue set environment for previously undefined variable"}
}
send_gdb "show environment FOOBARBAZGRUNGESPAZBALL\n"
gdb_expect {
  -re "FOOBARBAZGRUNGESPAZBALL = t\r\n$gdb_prompt $"\
          {pass "set environment for previously undefined variable"}
  -re "$gdb_prompt $"\
          {fail "set environment for previously undefined variable"}
  timeout {fail "(timeout) set environment for previously undefined variable"}
}

# Verify that GDB can also set an environment variable using the "="
# syntax.
#
send_gdb "set environment FOOBARBAZGRUNGESPAZBALL = t\n"
gdb_expect {
  -re "$gdb_prompt $"\
          {pass "issue set environment with equals"}
  timeout {fail "(timeout) issue set environment with equals"}
}
send_gdb "show environment FOOBARBAZGRUNGESPAZBALL\n"
gdb_expect {
  -re "FOOBARBAZGRUNGESPAZBALL = t\r\n$gdb_prompt $"\
          {pass "set environment with equals"}
  -re "$gdb_prompt $"\
          {fail "set environment with equals"}
  timeout {fail "(timeout) set environment with equals"}
}

# Verify that GDB can set an environment variable to a value that has
# an embedded (trailing, in this case) equals.
#
send_gdb "set environment FOOBARBAZGRUNGESPAZBALL t=\n"
gdb_expect {
  -re "$gdb_prompt $"\
          {pass "issue set environment with trailing equals"}
  timeout {fail "(timeout) issue set environment with trailing equals"}
}
send_gdb "show environment FOOBARBAZGRUNGESPAZBALL\n"
gdb_expect {
  -re "FOOBARBAZGRUNGESPAZBALL = t=\r\n$gdb_prompt $"\
          {pass "set environment with trailing equals"}
  -re "$gdb_prompt $"\
          {fail "set environment with trailing equals"}
  timeout {fail "(timeout) set environment with trailing equals"}
}

# Verify that GDB can set an environment variable to a value preceded
# by whitespace, and that such whitespace is ignored (not included
# in the set value).
#
send_gdb "set environment FOOBARBAZGRUNGESPAZBALL =     foo\n"
gdb_expect {
  -re "$gdb_prompt $"\
          {pass "issue set environment with preceding whitespace"}
  timeout {fail "(timeout) issue set environment with preceding whitespace"}
}
send_gdb "show environment FOOBARBAZGRUNGESPAZBALL\n"
gdb_expect {
  -re "FOOBARBAZGRUNGESPAZBALL = foo\r\n$gdb_prompt $"\
          {pass "set environment with preceding whitespace"}
  -re "$gdb_prompt $"\
          {fail "set environment with preceding whitespace"}
  timeout {fail "(timeout) set environment with preceding whitespace"}
}

# Verify that GDB can manipulate the distinguished PATH variable.
#
send_gdb "path /tmp/FOOBARBAZGRUNGESPAZBALL\n"
gdb_expect {
  -re ".*Executable and object file path: /tmp/FOOBARBAZGRUNGESPAZBALL.*$gdb_prompt $"\
          {pass "issue path"}
  -re "$gdb_prompt $"\
          {fail "issue path"}
  timeout {fail "(timeout) issue path"}
}
send_gdb "show paths\n"
gdb_expect {
  -re "Executable and object file path: /tmp/FOOBARBAZGRUNGESPAZBALL.*$gdb_prompt $"\
          {pass "show paths"}
  -re "$gdb_prompt $"\
          {fail "show paths"}
  timeout {fail "(timeout) show paths"}
}

gdb_exit
return 0
@


1.1.1.1
log
@GDB 6.1 (excluding .info files)
@
text
@@
