head	1.1;
branch	1.1.1;
access;
symbols
	OPENBSD_6_2:1.1.1.2.0.54
	OPENBSD_6_2_BASE:1.1.1.2
	OPENBSD_6_1:1.1.1.2.0.52
	OPENBSD_6_1_BASE:1.1.1.2
	OPENBSD_6_0:1.1.1.2.0.48
	OPENBSD_6_0_BASE:1.1.1.2
	OPENBSD_5_9:1.1.1.2.0.44
	OPENBSD_5_9_BASE:1.1.1.2
	OPENBSD_5_8:1.1.1.2.0.46
	OPENBSD_5_8_BASE:1.1.1.2
	OPENBSD_5_7:1.1.1.2.0.38
	OPENBSD_5_7_BASE:1.1.1.2
	OPENBSD_5_6:1.1.1.2.0.42
	OPENBSD_5_6_BASE:1.1.1.2
	OPENBSD_5_5:1.1.1.2.0.40
	OPENBSD_5_5_BASE:1.1.1.2
	OPENBSD_5_4:1.1.1.2.0.36
	OPENBSD_5_4_BASE:1.1.1.2
	OPENBSD_5_3:1.1.1.2.0.34
	OPENBSD_5_3_BASE:1.1.1.2
	OPENBSD_5_2:1.1.1.2.0.32
	OPENBSD_5_2_BASE:1.1.1.2
	OPENBSD_5_1_BASE:1.1.1.2
	OPENBSD_5_1:1.1.1.2.0.30
	OPENBSD_5_0:1.1.1.2.0.28
	OPENBSD_5_0_BASE:1.1.1.2
	OPENBSD_4_9:1.1.1.2.0.26
	OPENBSD_4_9_BASE:1.1.1.2
	OPENBSD_4_8:1.1.1.2.0.24
	OPENBSD_4_8_BASE:1.1.1.2
	OPENBSD_4_7:1.1.1.2.0.20
	OPENBSD_4_7_BASE:1.1.1.2
	OPENBSD_4_6:1.1.1.2.0.22
	OPENBSD_4_6_BASE:1.1.1.2
	OPENBSD_4_5:1.1.1.2.0.18
	OPENBSD_4_5_BASE:1.1.1.2
	OPENBSD_4_4:1.1.1.2.0.16
	OPENBSD_4_4_BASE:1.1.1.2
	OPENBSD_4_3:1.1.1.2.0.14
	OPENBSD_4_3_BASE:1.1.1.2
	OPENBSD_4_2:1.1.1.2.0.12
	OPENBSD_4_2_BASE:1.1.1.2
	OPENBSD_4_1:1.1.1.2.0.10
	OPENBSD_4_1_BASE:1.1.1.2
	OPENBSD_4_0:1.1.1.2.0.8
	OPENBSD_4_0_BASE:1.1.1.2
	OPENBSD_3_9:1.1.1.2.0.6
	OPENBSD_3_9_BASE:1.1.1.2
	OPENBSD_3_8:1.1.1.2.0.4
	OPENBSD_3_8_BASE:1.1.1.2
	OPENBSD_3_7:1.1.1.2.0.2
	OPENBSD_3_7_BASE:1.1.1.2
	GDB_6_3:1.1.1.2
	OPENBSD_3_6:1.1.1.1.0.2
	OPENBSD_3_6_BASE:1.1.1.1
	GDB_6_1:1.1.1.1
	FSF:1.1.1;
locks; strict;
comment	@ * @;


1.1
date	2004.05.21.19.16.43;	author kettenis;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	2004.05.21.19.16.43;	author kettenis;	state Exp;
branches;
next	1.1.1.2;

1.1.1.2
date	2004.12.27.13.15.59;	author kettenis;	state Exp;
branches;
next	;


desc
@@


1.1
log
@Initial revision
@
text
@/* Test long long expression; test printing in general.
 *
 * /CLO/BUILD_ENV/Exports/cc -g +e -o long_long long_long.c
 *
 * or
 *
 * cc +e +DA2.0 -g -o long_long long_long.c
 */

#ifdef PROTOTYPES
long long callee(long long i)
#else
long long callee( i )
long long i;
#endif
{
   register long long result;

   result  = 0x12345678;
   result  = result << i;
   result += 0x9abcdef0;

   return result;
}

int known_types()
{
   long long bin = 0, oct = 0, dec = 0, hex = 0;

   /* Known values, filling the full 64 bits.
    */
   bin = 0x123456789abcdefLL; /* 64 bits = 16 hex digits */
   oct = 01234567123456701234567LL; /*  = 21+ octal digits */
   dec = 12345678901234567890ULL;    /*  = 19+ decimal digits */

   /* Stop here and look!
    */
   hex = bin - dec | oct;

   return 0;
}

int main() {

   register long long x, y;
   register long long i;
   
   x = (long long) 0xfedcba9876543210LL;
   y = x++;
   x +=y;
   i = 11;
   x = callee( i );
   y += x;

   known_types();
   
   return 0;
}



@


1.1.1.1
log
@GDB 6.1 (excluding .info files)
@
text
@@


1.1.1.2
log
@GDB 6.3 (excluding .info files)
@
text
@a0 20
/* This test script is part of GDB, the GNU debugger.

   Copyright 1999, 2004,
   Free Software Foundation, Inc.

   This program is free software; you can redistribute it and/or modify
   it under the terms of the GNU General Public License as published by
   the Free Software Foundation; either version 2 of the License, or
   (at your option) any later version.

   This program is distributed in the hope that it will be useful,
   but WITHOUT ANY WARRANTY; without even the implied warranty of
   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
   GNU General Public License for more details.
 
   You should have received a copy of the GNU General Public License
   along with this program; if not, write to the Free Software
   Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA 02111-1307, USA.
   */

d10 8
a17 1
#include <string.h>
d19 3
a21 1
enum { MAX_BYTES = 16 };
d23 1
a23 17
void
pack (unsigned char b[MAX_BYTES], int size, int nr)
{
  static long long val[] = { 0x123456789abcdefLL, 01234567123456701234567LL, 12345678901234567890ULL};
  volatile static int e = 1;
  int i;
  for (i = 0; i < nr; i++)
    {
      int offset;
      if (*(char *)&e)
	/* Little endian.  */
	offset = sizeof (long long) - size;
      else
	/* Big endian endian.  */
	offset = 0;
      memcpy (b + size * i, (char *) val + sizeof (long long) * i + offset, size);
    }
a25 11
unsigned char b[MAX_BYTES];
unsigned char h[MAX_BYTES];
unsigned char w[MAX_BYTES];
unsigned char g[MAX_BYTES];

unsigned char c[MAX_BYTES];
unsigned char s[MAX_BYTES];
unsigned char i[MAX_BYTES];
unsigned char l[MAX_BYTES];
unsigned char ll[MAX_BYTES];

d28 1
a28 11
  /* A union is used here as, hopefully it has well defined packing
     rules.  */
  struct {
    long long bin, oct, dec, hex;    
  } val;
  memset (&val, 0, sizeof val);

  /* Known values, filling the full 64 bits.  */
  val.bin = 0x123456789abcdefLL; /* 64 bits = 16 hex digits */
  val.oct = 01234567123456701234567LL; /*  = 21+ octal digits */
  val.dec = 12345678901234567890ULL;    /*  = 19+ decimal digits */
d30 9
a38 2
  /* Stop here and look!  */
  val.hex = val.bin - val.dec | val.oct;
d40 1
a40 1
  return 0;
d45 9
a53 12
   /* Pack Byte, Half, Word and Giant arrays with byte-orderd values.
      That way "(gdb) x" gives the same output on different
      architectures.  */
   pack (b, 1, 2);
   pack (h, 2, 2);
   pack (w, 4, 2);
   pack (g, 8, 2);
   pack (c, sizeof (char), 2);
   pack (s, sizeof (short), 2);
   pack (i, sizeof (int), 2);
   pack (l, sizeof (long), 2);
   pack (ll, sizeof (long long), 2);
d59 3
@

