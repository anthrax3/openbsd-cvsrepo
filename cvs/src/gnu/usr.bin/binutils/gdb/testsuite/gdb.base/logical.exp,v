head	1.1;
branch	1.1.1;
access;
symbols
	OPENBSD_6_1:1.1.1.2.0.50
	OPENBSD_6_1_BASE:1.1.1.2
	OPENBSD_6_0:1.1.1.2.0.48
	OPENBSD_6_0_BASE:1.1.1.2
	OPENBSD_5_9:1.1.1.2.0.44
	OPENBSD_5_9_BASE:1.1.1.2
	OPENBSD_5_8:1.1.1.2.0.46
	OPENBSD_5_8_BASE:1.1.1.2
	OPENBSD_5_7:1.1.1.2.0.38
	OPENBSD_5_7_BASE:1.1.1.2
	OPENBSD_5_6:1.1.1.2.0.42
	OPENBSD_5_6_BASE:1.1.1.2
	OPENBSD_5_5:1.1.1.2.0.40
	OPENBSD_5_5_BASE:1.1.1.2
	OPENBSD_5_4:1.1.1.2.0.36
	OPENBSD_5_4_BASE:1.1.1.2
	OPENBSD_5_3:1.1.1.2.0.34
	OPENBSD_5_3_BASE:1.1.1.2
	OPENBSD_5_2:1.1.1.2.0.32
	OPENBSD_5_2_BASE:1.1.1.2
	OPENBSD_5_1_BASE:1.1.1.2
	OPENBSD_5_1:1.1.1.2.0.30
	OPENBSD_5_0:1.1.1.2.0.28
	OPENBSD_5_0_BASE:1.1.1.2
	OPENBSD_4_9:1.1.1.2.0.26
	OPENBSD_4_9_BASE:1.1.1.2
	OPENBSD_4_8:1.1.1.2.0.24
	OPENBSD_4_8_BASE:1.1.1.2
	OPENBSD_4_7:1.1.1.2.0.20
	OPENBSD_4_7_BASE:1.1.1.2
	OPENBSD_4_6:1.1.1.2.0.22
	OPENBSD_4_6_BASE:1.1.1.2
	OPENBSD_4_5:1.1.1.2.0.18
	OPENBSD_4_5_BASE:1.1.1.2
	OPENBSD_4_4:1.1.1.2.0.16
	OPENBSD_4_4_BASE:1.1.1.2
	OPENBSD_4_3:1.1.1.2.0.14
	OPENBSD_4_3_BASE:1.1.1.2
	OPENBSD_4_2:1.1.1.2.0.12
	OPENBSD_4_2_BASE:1.1.1.2
	OPENBSD_4_1:1.1.1.2.0.10
	OPENBSD_4_1_BASE:1.1.1.2
	OPENBSD_4_0:1.1.1.2.0.8
	OPENBSD_4_0_BASE:1.1.1.2
	OPENBSD_3_9:1.1.1.2.0.6
	OPENBSD_3_9_BASE:1.1.1.2
	OPENBSD_3_8:1.1.1.2.0.4
	OPENBSD_3_8_BASE:1.1.1.2
	OPENBSD_3_7:1.1.1.2.0.2
	OPENBSD_3_7_BASE:1.1.1.2
	GDB_6_3:1.1.1.2
	OPENBSD_3_6:1.1.1.1.0.2
	OPENBSD_3_6_BASE:1.1.1.1
	GDB_6_1:1.1.1.1
	FSF:1.1.1;
locks; strict;
comment	@# @;


1.1
date	2004.05.21.19.16.43;	author kettenis;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	2004.05.21.19.16.43;	author kettenis;	state Exp;
branches;
next	1.1.1.2;

1.1.1.2
date	2004.12.27.13.16.08;	author kettenis;	state Exp;
branches;
next	;


desc
@@


1.1
log
@Initial revision
@
text
@# Copyright 1998, 1999 Free Software Foundation, Inc.

# This program is free software; you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation; either version 2 of the License, or
# (at your option) any later version.
# 
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
# 
# You should have received a copy of the GNU General Public License
# along with this program; if not, write to the Free Software
# Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA 02111-1307, USA.  

# Please email any bugs, comments, and/or additions to this file to:
# bug-gdb@@prep.ai.mit.edu

# This file was written by Elena Zannoni (ezannoni@@cygnus.com)

# This file is part of the gdb testsuite

#
# tests for correctenss of logical operators, associativity and precedence
# with integer type variables
# 

if $tracelevel then {
	strace $tracelevel
	}

#
# test running programs
#
set prms_id 0
set bug_id 0

set testfile "int-type"
set srcfile ${testfile}.c
set binfile ${objdir}/${subdir}/${testfile}

if  { [gdb_compile "${srcdir}/${subdir}/${srcfile}" "${binfile}" executable {debug additional_flags=-w}] != "" } {
     gdb_suppress_entire_file "Testcase compile failed, so all tests in this file will automatically fail."
    }

if [get_compiler_info ${binfile}] {
    return -1;
}

gdb_exit
gdb_start
gdb_reinitialize_dir $srcdir/$subdir
gdb_load ${binfile}


#
# set it up at a breakpoint so we can play with the variable values
#

if ![runto_main] then {
    perror "couldn't run to breakpoint"
    continue
}

#
# test expressions with "int" types
#

gdb_test "set variable x=0" "" "set variable x=0"
gdb_test "set variable y=0" "" "set variable y=0"
gdb_test "set variable z=0" "" "set variable z=0"

send_gdb "print x\n"
gdb_expect {
    -re ".*0.*$gdb_prompt $" {
        pass "print value of x"
      }
    -re ".*$gdb_prompt $" { fail "print value of x" }
    timeout           { fail "(timeout) print value of x" }    
  }


send_gdb "print y\n"
gdb_expect {
    -re ".*0.*$gdb_prompt $" {
        pass "print value of y"
      }
    -re ".*$gdb_prompt $" { fail "print value of y" }
    timeout           { fail "(timeout) print value of y" }    
  }

send_gdb "print z\n"
gdb_expect {
    -re ".*0.*$gdb_prompt $" {
        pass "print value of z"
      }
    -re ".*$gdb_prompt $" { fail "print value of z" }
    timeout           { fail "(timeout) print value of z" }    
  }


# truth tables for && , || , !  

send_gdb "print x && y\n"
gdb_expect {
    -re ".*$false.*$gdb_prompt $" {
        pass "print value of x<y"
      }
    -re ".*$gdb_prompt $" { fail "print value of x<y" }
    timeout           { fail "(timeout) print value of x<y" }    
  }



send_gdb "print x || y\n"
gdb_expect {
    -re ".*$false.*$gdb_prompt $" {
        pass "print value of x<=y"
      }
    -re ".*$gdb_prompt $" { fail "print value of x<=y" }
    timeout           { fail "(timeout) print value of x<=y" }    
  }

send_gdb "print !x\n"
gdb_expect {
    -re ".*$true.*$gdb_prompt $" {
        pass "print value of x>y"
      }
    -re ".*$gdb_prompt $" { fail "print value of x>y" }
    timeout           { fail "(timeout) print value of x>y" }    
  }

gdb_test "set variable y=1" "" "set variable y=1"

send_gdb "print x && y\n"
gdb_expect {
    -re ".*$false.*$gdb_prompt $" {
        pass "print value of x<y"
      }
    -re ".*$gdb_prompt $" { fail "print value of x<y" }
    timeout           { fail "(timeout) print value of x<y" }    
  }



send_gdb "print x || y\n"
gdb_expect {
    -re ".*$true.*$gdb_prompt $" {
        pass "print value of x<=y"
      }
    -re ".*$gdb_prompt $" { fail "print value of x<=y" }
    timeout           { fail "(timeout) print value of x<=y" }    
  }

gdb_test "set variable x=1" "" "set variable x=1"

send_gdb "print x && y\n"
gdb_expect {
    -re ".*$true.*$gdb_prompt $" {
        pass "print value of x<y"
      }
    -re ".*$gdb_prompt $" { fail "print value of x<y" }
    timeout           { fail "(timeout) print value of x<y" }    
  }



send_gdb "print x || y\n"
gdb_expect {
    -re ".*$true.*$gdb_prompt $" {
        pass "print value of x<=y"
      }
    -re ".*$gdb_prompt $" { fail "print value of x<=y" }
    timeout           { fail "(timeout) print value of x<=y" }    
  }

send_gdb "print !x\n"
gdb_expect {
    -re ".*$false.*$gdb_prompt $" {
        pass "print value of x>y"
      }
    -re ".*$gdb_prompt $" { fail "print value of x>y" }
    timeout           { fail "(timeout) print value of x>y" }    
  }

gdb_test "set variable y=0" "" "set variable y=0"

send_gdb "print x && y\n"
gdb_expect {
    -re ".*$false.*$gdb_prompt $" {
        pass "print value of x<y"
      }
    -re ".*$gdb_prompt $" { fail "print value of x<y" }
    timeout           { fail "(timeout) print value of x<y" }    
  }



send_gdb "print x || y\n"
gdb_expect {
    -re ".*$true.*$gdb_prompt $" {
        pass "print value of x<=y"
      }
    -re ".*$gdb_prompt $" { fail "print value of x<=y" }
    timeout           { fail "(timeout) print value of x<=y" }    
  }


# end truth tables for &&, ||, !


# test associativity of && , || , !

gdb_test "set variable x=0" "" "set variable x=0"
gdb_test "set variable y=0" "" "set variable y=0"
gdb_test "set variable z=0" "" "set variable z=0"

send_gdb "print x && y && z\n"
gdb_expect {
    -re ".*$false.*$gdb_prompt $" {
        pass "print value of x &&  y && z (000)"
      }
    -re ".*$gdb_prompt $" { fail "print value of x && y && z (000) " }
    timeout           { fail "(timeout) print value of x && y && z (000) " }    
  }

send_gdb "print x || y || z\n"
gdb_expect {
    -re ".*$false.*$gdb_prompt $" {
        pass "print value of x || y || z (000)"
      }
    -re ".*$gdb_prompt $" { fail "print value of x || y || z (000)" }
    timeout           { fail "(timeout) print value of x || y || z (000) " }    
  }

send_gdb "print !!x\n"
gdb_expect {
    -re ".*$false.*$gdb_prompt $" {
        pass "print value of !!x (0)"
      }
    -re ".*$gdb_prompt $" { fail "print value of !!x (0)" }
    timeout           { fail "(timeout) print value of !!x (0) " }    
  }


gdb_test "set variable y=1" "" "set variable y=1"

send_gdb "print x && y && z\n"
gdb_expect {
    -re ".*$false.*$gdb_prompt $" {
        pass "print value of x &&  y && z (010)"
      }
    -re ".*$gdb_prompt $" { fail "print value of x && y && z (010) " }
    timeout           { fail "(timeout) print value of x && y && z (010) " }    
  }

send_gdb "print x || y || z\n"
gdb_expect {
    -re ".*$true.*$gdb_prompt $" {
        pass "print value of x || y || z (010)"
      }
    -re ".*$gdb_prompt $" { fail "print value of x || y || z (010)" }
    timeout           { fail "(timeout) print value of x || y || z (010) " }    
  }


gdb_test "set variable z=1" "" "set variable z=1"

send_gdb "print x && y && z\n"
gdb_expect {
    -re ".*$false.*$gdb_prompt $" {
        pass "print value of x &&  y && z (011)"
      }
    -re ".*$gdb_prompt $" { fail "print value of x && y && z (011) " }
    timeout           { fail "(timeout) print value of x && y && z (011) " }    
  }

send_gdb "print x || y || z\n"
gdb_expect {
    -re ".*$true.*$gdb_prompt $" {
        pass "print value of x || y || z (011)"
      }
    -re ".*$gdb_prompt $" { fail "print value of x || y || z (011)" }
    timeout           { fail "(timeout) print value of x || y || z (011) " }    
  }


gdb_test "set variable x=1" "" "set variable x=1"

send_gdb "print x && y && z\n"
gdb_expect {
    -re ".*$true.*$gdb_prompt $" {
        pass "print value of x &&  y && z (111)"
      }
    -re ".*$gdb_prompt $" { fail "print value of x && y && z (111) " }
    timeout           { fail "(timeout) print value of x && y && z (111) " }    
  }

send_gdb "print x || y || z\n"
gdb_expect {
    -re ".*$true.*$gdb_prompt $" {
        pass "print value of x || y || z (111)"
      }
    -re ".*$gdb_prompt $" { fail "print value of x || y || z (111)" }
    timeout           { fail "(timeout) print value of x || y || z (111) " }    
  }

send_gdb "print !!x\n"
gdb_expect {
    -re ".*$true.*$gdb_prompt $" {
        pass "print value of !!x (1)"
      }
    -re ".*$gdb_prompt $" { fail "print value of !!x (1)" }
    timeout           { fail "(timeout) print value of !!x (1) " }    
  }


gdb_test "set variable z=0" "" "set variable z=0"

send_gdb "print x && y && z\n"
gdb_expect {
    -re ".*$false.*$gdb_prompt $" {
        pass "print value of x &&  y && z (110)"
      }
    -re ".*$gdb_prompt $" { fail "print value of x && y && z (110) " }
    timeout           { fail "(timeout) print value of x && y && z (110) " }    
  }

send_gdb "print x || y || z\n"
gdb_expect {
    -re ".*$true.*$gdb_prompt $" {
        pass "print value of x || y || z (110)"
      }
    -re ".*$gdb_prompt $" { fail "print value of x || y || z (110)" }
    timeout           { fail "(timeout) print value of x || y || z (110) " }    
  }




gdb_test "set variable y=0" "" "set variable y=0"

send_gdb "print x && y && z\n"
gdb_expect {
    -re ".*$false.*$gdb_prompt $" {
        pass "print value of x &&  y && z (100)"
      }
    -re ".*$gdb_prompt $" { fail "print value of x && y && z (100) " }
    timeout           { fail "(timeout) print value of x && y && z (100) " }    
  }

send_gdb "print x || y || z\n"
gdb_expect {
    -re ".*$true.*$gdb_prompt $" {
        pass "print value of x || y || z (100)"
      }
    -re ".*$gdb_prompt $" { fail "print value of x || y || z (100)" }
    timeout           { fail "(timeout) print value of x || y || z (100) " }    
  }




gdb_test "set variable z=1" "" "set variable z=1"

send_gdb "print x && y && z\n"
gdb_expect {
    -re ".*$false.*$gdb_prompt $" {
        pass "print value of x &&  y && z (101)"
      }
    -re ".*$gdb_prompt $" { fail "print value of x && y && z (101) " }
    timeout           { fail "(timeout) print value of x && y && z (101) " }    
  }

send_gdb "print x || y || z\n"
gdb_expect {
    -re ".*$true.*$gdb_prompt $" {
        pass "print value of x || y || z (101)"
      }
    -re ".*$gdb_prompt $" { fail "print value of x || y || z (101)" }
    timeout           { fail "(timeout) print value of x || y || z (101) " }    
  }


gdb_test "set variable x=0" "" "set variable x=0"

send_gdb "print x && y && z\n"
gdb_expect {
    -re ".*$false.*$gdb_prompt $" {
        pass "print value of x &&  y && z (001)"
      }
    -re ".*$gdb_prompt $" { fail "print value of x && y && z (001) " }
    timeout           { fail "(timeout) print value of x && y && z (001) " }    
  }

send_gdb "print x || y || z\n"
gdb_expect {
    -re ".*$true.*$gdb_prompt $" {
        pass "print value of x || y || z (001)"
      }
    -re ".*$gdb_prompt $" { fail "print value of x || y || z (001)" }
    timeout           { fail "(timeout) print value of x || y || z (001) " }    
  }




# test precedence of &&, || ,! 


send_gdb "print !x && y\n"
gdb_expect {
    -re ".*$false.*$gdb_prompt $" {
        pass "print value of !x && y  (00)"
      }
    -re ".*$gdb_prompt $" { fail "print value of  !x && y (00)" }
    timeout           { fail "(timeout) print value of !x && y (00) " }    
  }


gdb_test "set variable x=1" "" "set variable x=1"


send_gdb "print !x && y\n"
gdb_expect {
    -re ".*$false.*$gdb_prompt $" {
        pass "print value of !x && y  (10)"
      }
    -re ".*$gdb_prompt $" { fail "print value of  !x && y (10)" }
    timeout           { fail "(timeout) print value of !x && y (10) " }    
  }




gdb_test "set variable y=1" "" "set variable y=1"

send_gdb "print !x || y\n"
gdb_expect {
    -re ".*$true.*$gdb_prompt $" {
        pass "print value of !x || y  (11)"
      }
    -re ".*$gdb_prompt $" { fail "print value of  !x || y (11)" }
    timeout           { fail "(timeout) print value of !x || y (11) " }    
  }


gdb_test "set variable x=0" "" "set variable x=0"


send_gdb "print !x || y\n"
gdb_expect {
    -re ".*$true.*$gdb_prompt $" {
        pass "print value of !x || y  (01)"
      }
    -re ".*$gdb_prompt $" { fail "print value of  !x || y (01)" }
    timeout           { fail "(timeout) print value of !x || y (01) " }    
  }



gdb_test "set variable x=1" "" "set variable x=1"
gdb_test "set variable z=0" "" "set variable z=0"

send_gdb "print x || y && z\n"
gdb_expect {
    -re ".*$true.*$gdb_prompt $" {
        pass "print value of x || y && z  (110)"
      }
    -re ".*$gdb_prompt $" { fail "print value of  x || y && z (110)" }
    timeout           { fail "(timeout) print value of x || y && z (110) " }    
  }


gdb_test "set variable y=0" "" "set variable y=0"


send_gdb "print x || y && z\n"
gdb_expect {
    -re ".*$true.*$gdb_prompt $" {
        pass "print value of x || y && z (100)"
      }
    -re ".*$gdb_prompt $" { fail "print value of  x || y && z (100)" }
    timeout           { fail "(timeout) print value of x || y && z (100) " }    
  }



gdb_test "set variable x=0" "" "set variable x=0"

send_gdb "print x || !y && z\n"
gdb_expect {
    -re ".*$false.*$gdb_prompt $" {
        
         gdb_test "set variable x=1" "" "set variable x=1"
         send_gdb "print x || !y && z\n"
         gdb_expect {
             -re ".*$true.*$gdb_prompt $" {
                  pass "print value of x || !y && z "
             }
             -re ".*$gdb_prompt $" { fail "print value of  x || !y && z" }
             timeout           { fail "(timeout) print value of x || !y && z " }    
           }
    }       
    -re ".*$gdb_prompt $" { fail "print value of  x || y && z " }
    timeout           { fail "(timeout) print value of x || y && z " }    
 }





gdb_test "set variable x=1" "" "set variable x=1"
gdb_test "set variable y=2" "" "set variable y=2"
gdb_test "set variable w=3" "" "set variable w=3"
gdb_test "set variable z=3" "" "set variable z=3"


send_gdb "print x > y || w == z\n"
gdb_expect {
    -re ".*$true.*$gdb_prompt $" {
        pass "print value of x > y || w == z"
      }
    -re ".*$gdb_prompt $" { fail "print value of  x > y || w == z" }
    timeout           { fail "(timeout) print value of x > y || w == z " }    
  }


gdb_test "set variable x=1" "" "set variable x=1"
gdb_test "set variable y=2" "" "set variable y=2"
gdb_test "set variable w=1" "" "set variable w=1"
gdb_test "set variable z=3" "" "set variable z=3"


send_gdb "print x >= y && w != z\n"
gdb_expect {
    -re ".*$false.*$gdb_prompt $" {
        pass "print value of x >= y || w != z"
      }
    -re ".*$gdb_prompt $" { fail "print value of  x >= y || w != z" }
    timeout           { fail "(timeout) print value of x >= y || w != z " }    
  }



gdb_test "set variable x=2" "" "set variable x=2"
gdb_test "set variable y=2" "" "set variable y=2"
gdb_test "set variable w=2" "" "set variable w=2"
gdb_test "set variable z=3" "" "set variable z=3"


send_gdb "print ! x > y || w + z\n"
gdb_expect {
    -re ".*$true.*$gdb_prompt $" {
        pass "print value of x > y || w != z"
      }
    -re ".*$gdb_prompt $" { fail "print value of  x > y || w != z" }
    timeout           { fail "(timeout) print value of x > y || w != z " }    
  }

















@


1.1.1.1
log
@GDB 6.1 (excluding .info files)
@
text
@@


1.1.1.2
log
@GDB 6.3 (excluding .info files)
@
text
@d1 1
a1 3
# This testcase is part of GDB, the GNU debugger.

# Copyright 1998, 1999, 2004 Free Software Foundation, Inc.
d17 3
d22 1
a22 2
# Tests for correctenss of logical operators, associativity and
# precedence with integer type variables
d24 4
d30 2
a31 2
    strace $tracelevel
}
d44 2
a45 2
    gdb_suppress_entire_file "Testcase compile failed, so all tests in this file will automatically fail."
}
d66 504
a569 10
proc evaluate { vars ops } {
    for {set vari 0} {$vari < [llength $vars]} {incr vari} {
	set var [lindex $vars $vari]
	for {set opi 0} {$opi < [llength $ops]} {incr opi} {
	    set op [lindex [lindex $ops $opi] 0]
	    set val [lindex [lindex $ops $opi] [expr $vari + 1]]
	    gdb_test "print $var, $op" " = $val" "evaluate $op; variables $var; expecting $val"
	}
    }
}
a570 1
# Unary
a571 7
evaluate {
    {x = 0} {x = 1}
} {
    { {x}   0 1 }
    { {!x}  1 0 }
    { {!!x} 0 1 }
}
a572 1
# Binary (with unary)
a573 20
evaluate {
    {x = 0, y = 0} {x = 0, y = 1} {x = 1, y = 0} {x = 1, y = 1}
} {
    { {x && y}   0 0 0 1 }
    { {!x && y}  0 1 0 0 }
    { {x && !y}  0 0 1 0 }
    { {!x && !y} 1 0 0 0 }

    { {x || y}   0 1 1 1 }
    { {!x || y}  1 1 0 1 }
    { {x || !y}  1 0 1 1 }
    { {!x || !y} 1 1 1 0 }

    { {x < y}    0 1 0 0 }
    { {x <= y}   1 1 0 1 }
    { {x == y}   1 0 0 1 }
    { {x != y}   0 1 1 0 }
    { {x >= y}   1 0 1 1 }
    { {x > y}    0 0 1 0 }
}
a574 1
# Full table of &&, || combinations, followed by random mix of unary ops
a575 13
evaluate {
    {x = 0, y = 0, z = 0} {x = 0, y = 0, z = 1} {x = 0, y = 1, z = 0} {x = 0, y = 1, z = 1}
    {x = 1, y = 0, z = 0} {x = 1, y = 0, z = 1} {x = 1, y = 1, z = 0} {x = 1, y = 1, z = 1}
} {
    { {x && y && z}    0 0 0 0  0 0 0 1 }
    { {x || y && z}    0 0 0 1  1 1 1 1 }
    { {x && y || z}    0 1 0 1  0 1 1 1 }
    { {x || y || z}    0 1 1 1  1 1 1 1 }

    { {x || !y && z}   0 1 0 0  1 1 1 1 }
    { {!x || y && z}   1 1 1 1  0 0 0 1 }
    { {!x || y && !z}  1 1 1 1  0 0 1 0 }
}
a576 1
# More complex operations
a577 9
evaluate {
    {x = 1, y = 2, w = 3, z = 3}
    {x = 1, y = 2, w = 1, z = 3}
    {x = 2, y = 2, w = 2, z = 3}
} {
    { {x > y || w == z}   1 0 0 }
    { {x >= y && w != z}  0 0 1 }
    { {! x > y || w + z}  1 1 1 }
}
@

