head	1.1;
branch	1.1.1;
access;
symbols
	OPENBSD_6_2_BASE:1.1.1.1
	OPENBSD_6_1:1.1.1.1.0.54
	OPENBSD_6_1_BASE:1.1.1.1
	OPENBSD_6_0:1.1.1.1.0.50
	OPENBSD_6_0_BASE:1.1.1.1
	OPENBSD_5_9:1.1.1.1.0.46
	OPENBSD_5_9_BASE:1.1.1.1
	OPENBSD_5_8:1.1.1.1.0.48
	OPENBSD_5_8_BASE:1.1.1.1
	OPENBSD_5_7:1.1.1.1.0.40
	OPENBSD_5_7_BASE:1.1.1.1
	OPENBSD_5_6:1.1.1.1.0.44
	OPENBSD_5_6_BASE:1.1.1.1
	OPENBSD_5_5:1.1.1.1.0.42
	OPENBSD_5_5_BASE:1.1.1.1
	OPENBSD_5_4:1.1.1.1.0.38
	OPENBSD_5_4_BASE:1.1.1.1
	OPENBSD_5_3:1.1.1.1.0.36
	OPENBSD_5_3_BASE:1.1.1.1
	OPENBSD_5_2:1.1.1.1.0.34
	OPENBSD_5_2_BASE:1.1.1.1
	OPENBSD_5_1_BASE:1.1.1.1
	OPENBSD_5_1:1.1.1.1.0.32
	OPENBSD_5_0:1.1.1.1.0.30
	OPENBSD_5_0_BASE:1.1.1.1
	OPENBSD_4_9:1.1.1.1.0.28
	OPENBSD_4_9_BASE:1.1.1.1
	OPENBSD_4_8:1.1.1.1.0.26
	OPENBSD_4_8_BASE:1.1.1.1
	OPENBSD_4_7:1.1.1.1.0.22
	OPENBSD_4_7_BASE:1.1.1.1
	OPENBSD_4_6:1.1.1.1.0.24
	OPENBSD_4_6_BASE:1.1.1.1
	OPENBSD_4_5:1.1.1.1.0.20
	OPENBSD_4_5_BASE:1.1.1.1
	OPENBSD_4_4:1.1.1.1.0.18
	OPENBSD_4_4_BASE:1.1.1.1
	OPENBSD_4_3:1.1.1.1.0.16
	OPENBSD_4_3_BASE:1.1.1.1
	OPENBSD_4_2:1.1.1.1.0.14
	OPENBSD_4_2_BASE:1.1.1.1
	OPENBSD_4_1:1.1.1.1.0.12
	OPENBSD_4_1_BASE:1.1.1.1
	OPENBSD_4_0:1.1.1.1.0.10
	OPENBSD_4_0_BASE:1.1.1.1
	OPENBSD_3_9:1.1.1.1.0.8
	OPENBSD_3_9_BASE:1.1.1.1
	OPENBSD_3_8:1.1.1.1.0.6
	OPENBSD_3_8_BASE:1.1.1.1
	OPENBSD_3_7:1.1.1.1.0.4
	OPENBSD_3_7_BASE:1.1.1.1
	GDB_6_3:1.1.1.1
	OPENBSD_3_6:1.1.1.1.0.2
	OPENBSD_3_6_BASE:1.1.1.1
	GDB_6_1:1.1.1.1
	FSF:1.1.1;
locks; strict;
comment	@# @;


1.1
date	2004.05.21.19.16.44;	author kettenis;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	2004.05.21.19.16.44;	author kettenis;	state Exp;
branches;
next	;


desc
@@


1.1
log
@Initial revision
@
text
@OUTPUT_FORMAT("elf32-m32r", "elf32-m32r",
	      "elf32-m32r")
OUTPUT_ARCH(m32r)
ENTRY(_start)
 SEARCH_DIR(/usr/cygnus/m32r-961018/H-sparc-sun-sunos4.1//lib);
/* Do we need any of these for elf?
   __DYNAMIC = 0;    */
SECTIONS
{
     OVERLAY 0x300000 : AT (0x400000)
        {
          .ovly0 { foo.o(.text) }
          .ovly1 { bar.o(.text) }
        }
     OVERLAY 0x380000 : AT (0x480000)
        {
          .ovly2 { baz.o(.text) }
          .ovly3 { grbx.o(.text) }
        }
     OVERLAY 0x340000 : AT (0x440000)
        {
          .data00 { foo.o(.data) }
          .data01 { bar.o(.data) }
        }
     OVERLAY 0x3C0000 : AT (0x4C0000)
        {
          .data02 { baz.o(.data) }
          .data03 { grbx.o(.data) }
        }

  /* Read-only sections, merged into text segment: */
  . = 0x208000;
  .interp        : { *(.interp) 	}
  .hash          : { *(.hash)		}
  .dynsym        : { *(.dynsym)		}
  .dynstr        : { *(.dynstr)		}
  .rel.text      : { *(.rel.text)	}
  .rela.text     : { *(.rela.text) 	}
  .rel.data      : { *(.rel.data)	}
  .rela.data     : { *(.rela.data) 	}
  .rel.rodata    : { *(.rel.rodata) 	}
  .rela.rodata   : { *(.rela.rodata) 	}
  .rel.got       : { *(.rel.got)	}
  .rela.got      : { *(.rela.got)	}
  .rel.ctors     : { *(.rel.ctors)	}
  .rela.ctors    : { *(.rela.ctors)	}
  .rel.dtors     : { *(.rel.dtors)	}
  .rela.dtors    : { *(.rela.dtors)	}
  .rel.init      : { *(.rel.init)	}
  .rela.init     : { *(.rela.init)	}
  .rel.fini      : { *(.rel.fini)	}
  .rela.fini     : { *(.rela.fini)	}
  .rel.bss       : { *(.rel.bss)	}
  .rela.bss      : { *(.rela.bss)	}
  .rel.plt       : { *(.rel.plt)	}
  .rela.plt      : { *(.rela.plt)	}
  .init          : { *(.init)		} =0
  .plt           : { *(.plt)		}
  .text          :
  {
    *(.text)
    /* .gnu.warning sections are handled specially by elf32.em.  */
    *(.gnu.warning)
    *(.gnu.linkonce.t*)
  } =0
  _etext = .;
  PROVIDE (etext = .);
  .fini          : { *(.fini)		} =0
  .rodata        : { *(.rodata) *(.gnu.linkonce.r*) }
  .rodata1       : { *(.rodata1)	}
  /* Adjust the address for the data segment.  We want to adjust up to
     the same address within the page on the next page up.  */
  . = ALIGN(32) + (ALIGN(8) & (32 - 1));
  .data          :
  {
    *(.data)
    *(.gnu.linkonce.d*)
    _ovly_table = .; 
      _ovly0_entry = .;
	LONG(ABSOLUTE(ADDR(.ovly0)));
	LONG(SIZEOF(.ovly0));
	LONG(LOADADDR(.ovly0));
	LONG(0);
      _ovly1_entry = .;
	LONG(ABSOLUTE(ADDR(.ovly1)));
	LONG(SIZEOF(.ovly1));
	LONG(LOADADDR(.ovly1));
	LONG(0);
      _ovly2_entry = .;
	LONG(ABSOLUTE(ADDR(.ovly2)));
	LONG(SIZEOF(.ovly2));
	LONG(LOADADDR(.ovly2));
	LONG(0);
      _ovly3_entry = .;
	LONG(ABSOLUTE(ADDR(.ovly3)));
	LONG(SIZEOF(.ovly3));
	LONG(LOADADDR(.ovly3));
	LONG(0);
      _data00_entry = .;
	LONG(ABSOLUTE(ADDR(.data00)));
	LONG(SIZEOF(.data00));
	LONG(LOADADDR(.data00));
	LONG(0);
      _data01_entry = .;
	LONG(ABSOLUTE(ADDR(.data01)));
	LONG(SIZEOF(.data01));
	LONG(LOADADDR(.data01));
	LONG(0);
      _data02_entry = .;
	LONG(ABSOLUTE(ADDR(.data02)));
	LONG(SIZEOF(.data02));
	LONG(LOADADDR(.data02));
	LONG(0);
      _data03_entry = .;
	LONG(ABSOLUTE(ADDR(.data03)));
	LONG(SIZEOF(.data03));
	LONG(LOADADDR(.data03));
	LONG(0);
    _novlys = .;
	LONG((_novlys - _ovly_table) / 16);

    CONSTRUCTORS
  }
  .data1         : { *(.data1)		}
  .ctors         : { *(.ctors)		}
  .dtors         : { *(.dtors)		}
  .got           : { *(.got.plt) *(.got)}
  .dynamic       : { *(.dynamic)	}
  /* We want the small data sections together, so single-instruction offsets
     can access them all, and initialized data all before uninitialized, so
     we can shorten the on-disk segment size.  */
  .sdata         : { *(.sdata)		}
  _edata  =  .;
  PROVIDE (edata = .);
  __bss_start = .;
  .sbss          : { *(.sbss) *(.scommon) }
  .bss           : { *(.dynbss) *(.bss) *(COMMON) }
  _end = . ;
  PROVIDE (end = .);
  /* Stabs debugging sections.  */
  .stab 0        : { *(.stab)		}
  .stabstr 0     : { *(.stabstr)	}
  .stab.excl 0   : { *(.stab.excl)	}
  .stab.exclstr 0 : { *(.stab.exclstr)	}
  .stab.index 0  : { *(.stab.index)	}
  .stab.indexstr 0 : { *(.stab.indexstr) }
  .comment 0     : { *(.comment)	}
  /* DWARF debug sections.
     Symbols in the .debug DWARF section are relative to the beginning of the
     section so we begin .debug at 0.  It's not clear yet what needs to happen
     for the others.   */
  .debug          0 : { *(.debug) 	  }
  .debug_srcinfo  0 : { *(.debug_srcinfo) }
  .debug_aranges  0 : { *(.debug_aranges) }
  .debug_pubnames 0 : { *(.debug_pubnames) }
  .debug_sfnames  0 : { *(.debug_sfnames) }
  .line           0 : { *(.line)	  }
  .stack   0x5ffffc : { _stack = .; *(.stack) }
  /* These must appear regardless of  .  */
}
@


1.1.1.1
log
@GDB 6.1 (excluding .info files)
@
text
@@
