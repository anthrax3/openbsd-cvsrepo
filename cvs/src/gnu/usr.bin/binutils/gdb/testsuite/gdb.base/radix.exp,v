head	1.4;
access;
symbols
	OPENBSD_6_1:1.4.0.52
	OPENBSD_6_1_BASE:1.4
	OPENBSD_6_0:1.4.0.48
	OPENBSD_6_0_BASE:1.4
	OPENBSD_5_9:1.4.0.44
	OPENBSD_5_9_BASE:1.4
	OPENBSD_5_8:1.4.0.46
	OPENBSD_5_8_BASE:1.4
	OPENBSD_5_7:1.4.0.38
	OPENBSD_5_7_BASE:1.4
	OPENBSD_5_6:1.4.0.42
	OPENBSD_5_6_BASE:1.4
	OPENBSD_5_5:1.4.0.40
	OPENBSD_5_5_BASE:1.4
	OPENBSD_5_4:1.4.0.36
	OPENBSD_5_4_BASE:1.4
	OPENBSD_5_3:1.4.0.34
	OPENBSD_5_3_BASE:1.4
	OPENBSD_5_2:1.4.0.32
	OPENBSD_5_2_BASE:1.4
	OPENBSD_5_1_BASE:1.4
	OPENBSD_5_1:1.4.0.30
	OPENBSD_5_0:1.4.0.28
	OPENBSD_5_0_BASE:1.4
	OPENBSD_4_9:1.4.0.26
	OPENBSD_4_9_BASE:1.4
	OPENBSD_4_8:1.4.0.24
	OPENBSD_4_8_BASE:1.4
	OPENBSD_4_7:1.4.0.20
	OPENBSD_4_7_BASE:1.4
	OPENBSD_4_6:1.4.0.22
	OPENBSD_4_6_BASE:1.4
	OPENBSD_4_5:1.4.0.18
	OPENBSD_4_5_BASE:1.4
	OPENBSD_4_4:1.4.0.16
	OPENBSD_4_4_BASE:1.4
	OPENBSD_4_3:1.4.0.14
	OPENBSD_4_3_BASE:1.4
	OPENBSD_4_2:1.4.0.12
	OPENBSD_4_2_BASE:1.4
	OPENBSD_4_1:1.4.0.10
	OPENBSD_4_1_BASE:1.4
	OPENBSD_4_0:1.4.0.8
	OPENBSD_4_0_BASE:1.4
	OPENBSD_3_9:1.4.0.6
	OPENBSD_3_9_BASE:1.4
	OPENBSD_3_8:1.4.0.4
	OPENBSD_3_8_BASE:1.4
	OPENBSD_3_7:1.4.0.2
	OPENBSD_3_7_BASE:1.4
	GDB_6_3:1.1.1.2
	OPENBSD_3_6:1.3.0.2
	OPENBSD_3_6_BASE:1.3
	GDB_6_1:1.1.1.1
	FSF:1.1.1
	OPENBSD_3_5:1.2.0.32
	OPENBSD_3_5_BASE:1.2
	OPENBSD_3_4:1.2.0.30
	OPENBSD_3_4_BASE:1.2
	OPENBSD_3_3:1.2.0.28
	OPENBSD_3_3_BASE:1.2
	OPENBSD_3_2:1.2.0.26
	OPENBSD_3_2_BASE:1.2
	OPENBSD_3_1:1.2.0.24
	OPENBSD_3_1_BASE:1.2
	OPENBSD_3_0:1.2.0.22
	OPENBSD_3_0_BASE:1.2
	OPENBSD_2_9:1.2.0.20
	OPENBSD_2_9_BASE:1.2
	OPENBSD_2_8:1.2.0.18
	OPENBSD_2_8_BASE:1.2
	OPENBSD_2_7:1.2.0.16
	OPENBSD_2_7_BASE:1.2
	new-binutils:1.2.0.14
	OPENBSD_2_6:1.2.0.12
	OPENBSD_2_6_BASE:1.2
	OPENBSD_2_5:1.2.0.10
	OPENBSD_2_5_BASE:1.2
	OPENBSD_2_4:1.2.0.8
	OPENBSD_2_4_BASE:1.2
	OPENBSD_2_3:1.2.0.6
	OPENBSD_2_3_BASE:1.2
	OPENBSD_2_2:1.2.0.4
	OPENBSD_2_2_BASE:1.2
	OPENBSD_2_1:1.2.0.2
	OPENBSD_2_1_BASE:1.2
	CYGNUS-961112:1.1.2.1
	CYGNUS:1.1.0.2;
locks; strict;
comment	@# @;


1.4
date	2004.12.27.14.00.56;	author kettenis;	state Exp;
branches;
next	1.3;

1.3
date	2004.05.21.20.23.39;	author kettenis;	state Exp;
branches;
next	1.2;

1.2
date	96.11.23.03.50.15;	author niklas;	state Exp;
branches;
next	1.1;

1.1
date	96.11.19.14.35.34;	author niklas;	state dead;
branches
	1.1.1.1
	1.1.2.1;
next	;

1.1.1.1
date	2004.05.21.19.16.49;	author kettenis;	state Exp;
branches;
next	1.1.1.2;

1.1.1.2
date	2004.12.27.13.15.53;	author kettenis;	state Exp;
branches;
next	;

1.1.2.1
date	96.11.19.14.35.35;	author niklas;	state Exp;
branches;
next	;


desc
@@


1.4
log
@Resolve conflicts for GDB 6.3.  Add local patches.
ok deraadt@@
@
text
@# This testcase is part of GDB, the GNU debugger.
# Copyright 1993, 1997, 2004 Free Software Foundation, Inc.

# This program is free software; you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation; either version 2 of the License, or
# (at your option) any later version.
# 
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
# 
# You should have received a copy of the GNU General Public License
# along with this program; if not, write to the Free Software
# Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA 02111-1307, USA.  

# This file was written by Fred Fish. (fnf@@cygnus.com)
# And rewritten by Michael Chastain (mec.gnu@@mindspring.com)

if $tracelevel then {
	strace $tracelevel
}

set prms_id 0
set bug_id 0

# Start with a fresh gdb.

gdb_exit
gdb_start

# Test input radices.

proc test_one_input { iradix input output } {
    gdb_test "print $input" "$output" \
	"print $input; expect $output; input radix $iradix"
}

proc test_input_radix { iradix iradixhex iradixoctal } {
    # set input-radix = $iradix, output-radix = ten
    gdb_test "set radix" \
	"Input and output radices now set to decimal 10, hex a, octal 12." \
	"initialize radix, input radix $iradix"
    gdb_test "set input-radix $iradix" \
	"Input radix now set to decimal $iradix, hex $iradixhex, octal $iradixoctal."
    if { $iradix == 10 } then {
	gdb_test "show radix" \
	    "Input and output radices set to decimal 10, hex a, octal 12." \
	    "show radix, input radix $iradix"
    } else {
	gdb_test "show radix" \
	    "Input radix set to decimal $iradix, hex $iradixhex, octal $iradixoctal.\r\nOutput radix set to decimal 10, hex a, octal 12." \
	    "show radix, input radix $iradix"
    }

    # test constants with specific bases that do not use $iradix
    test_one_input $iradix  "010"        "8"
    test_one_input $iradix  "20."        "20"
    test_one_input $iradix  "(int) 20."  "20"
    test_one_input $iradix  "0xf"        "15"

    # test simple one-digit constants
    test_one_input $iradix  "0"          "0"
    test_one_input $iradix  "1"          "1"
    test_one_input $iradix  "-1"          "-1"

    # test simple two-digit constants
    test_one_input $iradix "10"          [expr $iradix]
    test_one_input $iradix "11"          [expr $iradix + 1]
    test_one_input $iradix "-10"         [expr 0 - $iradix]
    test_one_input $iradix "-11"         [expr 0 - $iradix - 1]

    # test simple three-digit constants
    test_one_input $iradix "100"         [expr $iradix * $iradix]
    test_one_input $iradix "101"         [expr $iradix * $iradix + 1]
    test_one_input $iradix "-100"        [expr 0 - $iradix * $iradix]
    test_one_input $iradix "-101"        [expr 0 - $iradix * $iradix - 1]

    # test a five-digit constant
    test_one_input $iradix  "10101"      \
	[expr $iradix * $iradix * $iradix * $iradix + $iradix * $iradix + 1]
}

test_input_radix 2 "2" "2"
    test_one_input 2  "4"   "Invalid number \"4\"\\."
    test_one_input 2  "-2"  "Invalid number \"2\"\\."

test_input_radix 3 "3" "3"
    test_one_input 3  "2"   "2"
    test_one_input 3  "20"  "6"
    test_one_input 3  "3"   "Invalid number \"3\"\\."
    test_one_input 2  "30"  "Invalid number \"30\"\\."

test_input_radix 8 "8" "10"
    test_one_input 8  "20"  "16"
    test_one_input 8  "-20" "-16"
    test_one_input 8  "8"   "Invalid number \"8\"."
    test_one_input 8  "-9"  "Invalid number \"9\"."

test_input_radix 10 "a" "12"
    test_one_input 10 "-12"  "-12"

test_input_radix 16 "10" "20"

# Test output radices.

proc test_one_output { oradix input output } {
    gdb_test "print $input" "$output" \
	"print $input; expect $output; output radix $oradix"
}

proc test_output_radix { oradix oradixhex oradixoctal } {
    # set input-radix = ten, output-radix = $oradix
    gdb_test "set radix" \
	"Input and output radices now set to decimal 10, hex a, octal 12." \
	"initialize radix, output radix $oradix"
    gdb_test "set output-radix $oradix" \
	"Output radix now set to decimal $oradix, hex $oradixhex, octal $oradixoctal."
    if { $oradix == 10 } then {
	gdb_test "show radix" \
	    "Input and output radices set to decimal 10, hex a, octal 12." \
	    "show radix, output radix $oradix"
    } else {
	gdb_test "show radix" \
	    "Input radix set to decimal 10, hex a, octal 12.\r\nOutput radix set to decimal $oradix, hex $oradixhex, octal $oradixoctal." \
	    "show radix, output radix $oradix"
    }

    # no standard tests for output radix
}

test_output_radix 8 "8" "10"
    test_one_output 8  "010"        "010"
    test_one_output 8  "0xf"        "17"
    test_one_output 8  "10"         "12"
    test_one_output 8  "100"        "144"
    setup_kfail *-*-* "gdb/1715"
    test_one_output 8  "20."        "24"
    test_one_output 8  "(int) 20."  "24"

test_output_radix 10 "a" "12"
    test_one_output 10 "010"        "8"
    test_one_output 10 "0xf"        "15"
    test_one_output 10 "10"         "10"
    test_one_output 10 "100"        "100"
    test_one_output 10 "20."        "20"
    test_one_output 10 "(int) 20."  "20"

test_output_radix 16 "10" "20"
    test_one_output 16 "010"        "8"
    test_one_output 16 "0xf"        "f"
    test_one_output 16 "10"         "a"
    test_one_output 16 "100"        "64"
    setup_kfail *-*-* "gdb/1715"
    test_one_output 16 "20."        "14"
    test_one_output 16 "(int) 20."  "14"
@


1.3
log
@Resolve conflicts for GDB 6.1.  Add local patches.
ok deraadt@@
@
text
@d1 2
a2 1
# Copyright 1993, 1997 Free Software Foundation, Inc.
a17 3
# Please email any bugs, comments, and/or additions to this file to:
# bug-gdb@@prep.ai.mit.edu

d19 1
a27 160
proc test_input_radix_2 {} {
    gdb_test "set radix" \
	"Input and output radices now set to decimal 10, hex a, octal 12." \
	"set radix #1"
    gdb_test "set input-radix 2" \
	"Input radix now set to decimal 2, hex 2, octal 2."
    gdb_test "show radix" \
	"Input radix set to decimal 2, hex 2, octal 2.\r\nOutput radix set to decimal 10, hex a, octal 12." \
	"show radix #1"
    gdb_test "p 010"		"8"
    gdb_test "p 20."		"20"
    gdb_test "p (int) 20."	"20"
    gdb_test "p 0xf"		"15"
    gdb_test "p 10"		"2"
    gdb_test "p -101"		"-5"
    gdb_test "p 101"		"5"
    gdb_test "p 10101"		"21"
    gdb_test "p 4"		"Invalid number \"4\"\\."
    gdb_test "p -2"		"Invalid number \"2\"\\."
}

# Test input radix 3 (an non-typical radix)

proc test_input_radix_3 {} {
    gdb_test "set radix" \
	"Input and output radices now set to decimal 10, hex a, octal 12." \
	"set radix #2"
    gdb_test "set input-radix 3" \
	"Input radix now set to decimal 3, hex 3, octal 3."
    gdb_test "show radix" \
	"Input radix set to decimal 3, hex 3, octal 3.\r\nOutput radix set to decimal 10, hex a, octal 12." \
	"show radix #2"
    gdb_test "p 010"		"8"
    gdb_test "p 20."		"20"
    gdb_test "p (int) 20."	"20"
    gdb_test "p 0xf"		"15"
    gdb_test "p 10"		"3"
    gdb_test "p 0"		"0"
    gdb_test "p 1"		"1"
    gdb_test "p 2"		"2"
    gdb_test "p 10"		"3"
    gdb_test "p 20"		"6"
    gdb_test "p 100"		"9"
    gdb_test "p -100"		"-9"
    gdb_test "p 3"		"Invalid number \"3\"."
    gdb_test "p 30"		"Invalid number \"30\"."
}

proc test_input_radix_8 {} {
    gdb_test "set radix" \
	"Input and output radices now set to decimal 10, hex a, octal 12." \
	"set radix #3"
    gdb_test "set input-radix 8" \
	"Input radix now set to decimal 8, hex 8, octal 10."
    gdb_test "show radix" \
	"Input radix set to decimal 8, hex 8, octal 10.\r\nOutput radix set to decimal 10, hex a, octal 12." \
	"set radix #3"
    gdb_test "p 010"		"8"
    gdb_test "p 20."		"20"
    gdb_test "p (int) 20."	"20"
    gdb_test "p 0xf"		"15"
    gdb_test "p 10"		"8"
    gdb_test "p 20"		"16"
    gdb_test "p -20"		"-16"
    gdb_test "p 100"		"64"
    gdb_test "p 8"		"Invalid number \"8\"."
    gdb_test "p -9"		"Invalid number \"9\"."
}

proc test_input_radix_10 {} {
    gdb_test "set radix" \
	"Input and output radices now set to decimal 10, hex a, octal 12." \
	"set radix #4"
    gdb_test "set input-radix 10" \
	"Input radix now set to decimal 10, hex a, octal 12."
    gdb_test "show radix" \
	"Input and output radices set to decimal 10, hex a, octal 12." \
	"show radix #4"
    gdb_test "p 010"		"8"
    gdb_test "p 20."		"20"
    gdb_test "p (int) 20."	"20"
    gdb_test "p 0xf"		"15"
    gdb_test "p 10"		"10"
    gdb_test "p -12"		"-12"
}

proc test_input_radix_16 {} {
    gdb_test "set radix" \
	"Input and output radices now set to decimal 10, hex a, octal 12." \
	"set radix #5"
    gdb_test "set input-radix 16" \
	"Input radix now set to decimal 16, hex 10, octal 20."
    gdb_test "show radix" \
	"Input radix set to decimal 16, hex 10, octal 20.\r\nOutput radix set to decimal 10, hex a, octal 12." \
	"show radix #5"
    gdb_test "p 010"		"8"
    gdb_test "p 20."		"20"
    gdb_test "p (int) 20."	"20"
    gdb_test "p 0xf"		"15"
    gdb_test "p 10"		"16"
    gdb_test "p 100"		"256"
}

proc test_output_radix_8 {} {
    gdb_test "set radix" \
	"Input and output radices now set to decimal 10, hex a, octal 12." \
	"set radix #6"
    gdb_test "set output-radix 8" \
	"Output radix now set to decimal 8, hex 8, octal 10."
    gdb_test "show radix" \
	"Input radix set to decimal 10, hex a, octal 12.\r\nOutput radix set to decimal 8, hex 8, octal 10." \
	"show radix #6"
    gdb_test "p 010"		"010"
    # FIXME:  If gdb can't handle float printing in different radices, it
    # should at least warn once the first time that is attempted.
    setup_xfail "*-*-*"
    gdb_test "p 20."		"24"	"Float printing when output radix is 8"
    gdb_test "p (int) 20."	"24"
    gdb_test "p 0xf"		"17"
    gdb_test "p 10"		"12"
    gdb_test "p 100"		"144"
}

proc test_output_radix_10 {} {
    gdb_test "set radix" \
	"Input and output radices now set to decimal 10, hex a, octal 12." \
	"set radix #7"
    gdb_test "set output-radix 10" \
	"Output radix now set to decimal 10, hex a, octal 12."
    gdb_test "show radix" \
	"Input and output radices set to decimal 10, hex a, octal 12." \
	"show radix #7"
    gdb_test "p 010"		"8"
    gdb_test "p 20."		"20"
    gdb_test "p (int) 20."	"20"
    gdb_test "p 0xf"		"15"
    gdb_test "p 10"		"10"
    gdb_test "p 100"		"100"
}

proc test_output_radix_16 {} {
    gdb_test "set radix" \
	"Input and output radices now set to decimal 10, hex a, octal 12." \
	"set radix #8"
    gdb_test "set output-radix 16" \
	"Output radix now set to decimal 16, hex 10, octal 20."
    gdb_test "show radix" \
	"Input radix set to decimal 10, hex a, octal 12.\r\nOutput radix set to decimal 16, hex 10, octal 20." \
	"show radix #8"
    gdb_test "p 010"		"8"
    # FIXME:  If gdb can't handle float printing in different radices, it
    # should at least warn once the first time that is attempted.
    setup_xfail "*-*-*"
    gdb_test "p 20."		"14"	"Float printing when output radix is 16"
    gdb_test "p (int) 20."	"14"
    gdb_test "p 0xf"		"f"
    gdb_test "p 10"		"a"
    gdb_test "p 100"		"64"
}

d33 125
a157 8
test_input_radix_2
test_input_radix_3
test_input_radix_8
test_input_radix_10
test_input_radix_16
test_output_radix_8
test_output_radix_10
test_output_radix_16
@


1.2
log
@Merge to Cygnus 961112 + add some support (not ready) for shared libs
@
text
@d1 1
a1 1
# Copyright (C) 1993 Free Software Foundation, Inc.
d15 1
a15 1
# Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA 02111-1307, USA.  */
d31 2
a32 1
	"Input and output radices now set to decimal 10, hex a, octal 12."
d36 2
a37 1
	"Input radix set to decimal 2, hex 2, octal 2.\r\nOutput radix set to decimal 10, hex a, octal 12."
d54 2
a55 1
	"Input and output radices now set to decimal 10, hex a, octal 12."
d59 2
a60 1
	"Input radix set to decimal 3, hex 3, octal 3.\r\nOutput radix set to decimal 10, hex a, octal 12."
d79 2
a80 1
	"Input and output radices now set to decimal 10, hex a, octal 12."
d84 2
a85 1
	"Input radix set to decimal 8, hex 8, octal 10.\r\nOutput radix set to decimal 10, hex a, octal 12."
d100 2
a101 1
	"Input and output radices now set to decimal 10, hex a, octal 12."
d105 2
a106 1
	"Input and output radices set to decimal 10, hex a, octal 12."
d117 2
a118 1
	"Input and output radices now set to decimal 10, hex a, octal 12."
d122 2
a123 1
	"Input radix set to decimal 16, hex 10, octal 20.\r\nOutput radix set to decimal 10, hex a, octal 12."
d134 2
a135 1
	"Input and output radices now set to decimal 10, hex a, octal 12."
d139 2
a140 1
	"Input radix set to decimal 10, hex a, octal 12.\r\nOutput radix set to decimal 8, hex 8, octal 10."
d154 2
a155 1
	"Input and output radices now set to decimal 10, hex a, octal 12."
d159 2
a160 1
	"Input and output radices set to decimal 10, hex a, octal 12."
d171 2
a172 1
	"Input and output radices now set to decimal 10, hex a, octal 12."
d176 2
a177 1
	"Input radix set to decimal 10, hex a, octal 12.\r\nOutput radix set to decimal 16, hex 10, octal 20."
@


1.1
log
@file radix.exp was initially added on branch CYGNUS.
@
text
@d1 185
@


1.1.1.1
log
@GDB 6.1 (excluding .info files)
@
text
@a0 201
# Copyright 1993, 1997 Free Software Foundation, Inc.

# This program is free software; you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation; either version 2 of the License, or
# (at your option) any later version.
# 
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
# 
# You should have received a copy of the GNU General Public License
# along with this program; if not, write to the Free Software
# Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA 02111-1307, USA.  

# Please email any bugs, comments, and/or additions to this file to:
# bug-gdb@@prep.ai.mit.edu

# This file was written by Fred Fish. (fnf@@cygnus.com)

if $tracelevel then {
	strace $tracelevel
}

set prms_id 0
set bug_id 0

proc test_input_radix_2 {} {
    gdb_test "set radix" \
	"Input and output radices now set to decimal 10, hex a, octal 12." \
	"set radix #1"
    gdb_test "set input-radix 2" \
	"Input radix now set to decimal 2, hex 2, octal 2."
    gdb_test "show radix" \
	"Input radix set to decimal 2, hex 2, octal 2.\r\nOutput radix set to decimal 10, hex a, octal 12." \
	"show radix #1"
    gdb_test "p 010"		"8"
    gdb_test "p 20."		"20"
    gdb_test "p (int) 20."	"20"
    gdb_test "p 0xf"		"15"
    gdb_test "p 10"		"2"
    gdb_test "p -101"		"-5"
    gdb_test "p 101"		"5"
    gdb_test "p 10101"		"21"
    gdb_test "p 4"		"Invalid number \"4\"\\."
    gdb_test "p -2"		"Invalid number \"2\"\\."
}

# Test input radix 3 (an non-typical radix)

proc test_input_radix_3 {} {
    gdb_test "set radix" \
	"Input and output radices now set to decimal 10, hex a, octal 12." \
	"set radix #2"
    gdb_test "set input-radix 3" \
	"Input radix now set to decimal 3, hex 3, octal 3."
    gdb_test "show radix" \
	"Input radix set to decimal 3, hex 3, octal 3.\r\nOutput radix set to decimal 10, hex a, octal 12." \
	"show radix #2"
    gdb_test "p 010"		"8"
    gdb_test "p 20."		"20"
    gdb_test "p (int) 20."	"20"
    gdb_test "p 0xf"		"15"
    gdb_test "p 10"		"3"
    gdb_test "p 0"		"0"
    gdb_test "p 1"		"1"
    gdb_test "p 2"		"2"
    gdb_test "p 10"		"3"
    gdb_test "p 20"		"6"
    gdb_test "p 100"		"9"
    gdb_test "p -100"		"-9"
    gdb_test "p 3"		"Invalid number \"3\"."
    gdb_test "p 30"		"Invalid number \"30\"."
}

proc test_input_radix_8 {} {
    gdb_test "set radix" \
	"Input and output radices now set to decimal 10, hex a, octal 12." \
	"set radix #3"
    gdb_test "set input-radix 8" \
	"Input radix now set to decimal 8, hex 8, octal 10."
    gdb_test "show radix" \
	"Input radix set to decimal 8, hex 8, octal 10.\r\nOutput radix set to decimal 10, hex a, octal 12." \
	"set radix #3"
    gdb_test "p 010"		"8"
    gdb_test "p 20."		"20"
    gdb_test "p (int) 20."	"20"
    gdb_test "p 0xf"		"15"
    gdb_test "p 10"		"8"
    gdb_test "p 20"		"16"
    gdb_test "p -20"		"-16"
    gdb_test "p 100"		"64"
    gdb_test "p 8"		"Invalid number \"8\"."
    gdb_test "p -9"		"Invalid number \"9\"."
}

proc test_input_radix_10 {} {
    gdb_test "set radix" \
	"Input and output radices now set to decimal 10, hex a, octal 12." \
	"set radix #4"
    gdb_test "set input-radix 10" \
	"Input radix now set to decimal 10, hex a, octal 12."
    gdb_test "show radix" \
	"Input and output radices set to decimal 10, hex a, octal 12." \
	"show radix #4"
    gdb_test "p 010"		"8"
    gdb_test "p 20."		"20"
    gdb_test "p (int) 20."	"20"
    gdb_test "p 0xf"		"15"
    gdb_test "p 10"		"10"
    gdb_test "p -12"		"-12"
}

proc test_input_radix_16 {} {
    gdb_test "set radix" \
	"Input and output radices now set to decimal 10, hex a, octal 12." \
	"set radix #5"
    gdb_test "set input-radix 16" \
	"Input radix now set to decimal 16, hex 10, octal 20."
    gdb_test "show radix" \
	"Input radix set to decimal 16, hex 10, octal 20.\r\nOutput radix set to decimal 10, hex a, octal 12." \
	"show radix #5"
    gdb_test "p 010"		"8"
    gdb_test "p 20."		"20"
    gdb_test "p (int) 20."	"20"
    gdb_test "p 0xf"		"15"
    gdb_test "p 10"		"16"
    gdb_test "p 100"		"256"
}

proc test_output_radix_8 {} {
    gdb_test "set radix" \
	"Input and output radices now set to decimal 10, hex a, octal 12." \
	"set radix #6"
    gdb_test "set output-radix 8" \
	"Output radix now set to decimal 8, hex 8, octal 10."
    gdb_test "show radix" \
	"Input radix set to decimal 10, hex a, octal 12.\r\nOutput radix set to decimal 8, hex 8, octal 10." \
	"show radix #6"
    gdb_test "p 010"		"010"
    # FIXME:  If gdb can't handle float printing in different radices, it
    # should at least warn once the first time that is attempted.
    setup_xfail "*-*-*"
    gdb_test "p 20."		"24"	"Float printing when output radix is 8"
    gdb_test "p (int) 20."	"24"
    gdb_test "p 0xf"		"17"
    gdb_test "p 10"		"12"
    gdb_test "p 100"		"144"
}

proc test_output_radix_10 {} {
    gdb_test "set radix" \
	"Input and output radices now set to decimal 10, hex a, octal 12." \
	"set radix #7"
    gdb_test "set output-radix 10" \
	"Output radix now set to decimal 10, hex a, octal 12."
    gdb_test "show radix" \
	"Input and output radices set to decimal 10, hex a, octal 12." \
	"show radix #7"
    gdb_test "p 010"		"8"
    gdb_test "p 20."		"20"
    gdb_test "p (int) 20."	"20"
    gdb_test "p 0xf"		"15"
    gdb_test "p 10"		"10"
    gdb_test "p 100"		"100"
}

proc test_output_radix_16 {} {
    gdb_test "set radix" \
	"Input and output radices now set to decimal 10, hex a, octal 12." \
	"set radix #8"
    gdb_test "set output-radix 16" \
	"Output radix now set to decimal 16, hex 10, octal 20."
    gdb_test "show radix" \
	"Input radix set to decimal 10, hex a, octal 12.\r\nOutput radix set to decimal 16, hex 10, octal 20." \
	"show radix #8"
    gdb_test "p 010"		"8"
    # FIXME:  If gdb can't handle float printing in different radices, it
    # should at least warn once the first time that is attempted.
    setup_xfail "*-*-*"
    gdb_test "p 20."		"14"	"Float printing when output radix is 16"
    gdb_test "p (int) 20."	"14"
    gdb_test "p 0xf"		"f"
    gdb_test "p 10"		"a"
    gdb_test "p 100"		"64"
}

# Start with a fresh gdb.

gdb_exit
gdb_start

test_input_radix_2
test_input_radix_3
test_input_radix_8
test_input_radix_10
test_input_radix_16
test_output_radix_8
test_output_radix_10
test_output_radix_16
@


1.1.1.2
log
@GDB 6.3 (excluding .info files)
@
text
@d1 1
a1 2
# This testcase is part of GDB, the GNU debugger.
# Copyright 1993, 1997, 2004 Free Software Foundation, Inc.
d17 3
a20 1
# And rewritten by Michael Chastain (mec.gnu@@mindspring.com)
d29 160
d194 8
a201 125
# Test input radices.

proc test_one_input { iradix input output } {
    gdb_test "print $input" "$output" \
	"print $input; expect $output; input radix $iradix"
}

proc test_input_radix { iradix iradixhex iradixoctal } {
    # set input-radix = $iradix, output-radix = ten
    gdb_test "set radix" \
	"Input and output radices now set to decimal 10, hex a, octal 12." \
	"initialize radix, input radix $iradix"
    gdb_test "set input-radix $iradix" \
	"Input radix now set to decimal $iradix, hex $iradixhex, octal $iradixoctal."
    if { $iradix == 10 } then {
	gdb_test "show radix" \
	    "Input and output radices set to decimal 10, hex a, octal 12." \
	    "show radix, input radix $iradix"
    } else {
	gdb_test "show radix" \
	    "Input radix set to decimal $iradix, hex $iradixhex, octal $iradixoctal.\r\nOutput radix set to decimal 10, hex a, octal 12." \
	    "show radix, input radix $iradix"
    }

    # test constants with specific bases that do not use $iradix
    test_one_input $iradix  "010"        "8"
    test_one_input $iradix  "20."        "20"
    test_one_input $iradix  "(int) 20."  "20"
    test_one_input $iradix  "0xf"        "15"

    # test simple one-digit constants
    test_one_input $iradix  "0"          "0"
    test_one_input $iradix  "1"          "1"
    test_one_input $iradix  "-1"          "-1"

    # test simple two-digit constants
    test_one_input $iradix "10"          [expr $iradix]
    test_one_input $iradix "11"          [expr $iradix + 1]
    test_one_input $iradix "-10"         [expr 0 - $iradix]
    test_one_input $iradix "-11"         [expr 0 - $iradix - 1]

    # test simple three-digit constants
    test_one_input $iradix "100"         [expr $iradix * $iradix]
    test_one_input $iradix "101"         [expr $iradix * $iradix + 1]
    test_one_input $iradix "-100"        [expr 0 - $iradix * $iradix]
    test_one_input $iradix "-101"        [expr 0 - $iradix * $iradix - 1]

    # test a five-digit constant
    test_one_input $iradix  "10101"      \
	[expr $iradix * $iradix * $iradix * $iradix + $iradix * $iradix + 1]
}

test_input_radix 2 "2" "2"
    test_one_input 2  "4"   "Invalid number \"4\"\\."
    test_one_input 2  "-2"  "Invalid number \"2\"\\."

test_input_radix 3 "3" "3"
    test_one_input 3  "2"   "2"
    test_one_input 3  "20"  "6"
    test_one_input 3  "3"   "Invalid number \"3\"\\."
    test_one_input 2  "30"  "Invalid number \"30\"\\."

test_input_radix 8 "8" "10"
    test_one_input 8  "20"  "16"
    test_one_input 8  "-20" "-16"
    test_one_input 8  "8"   "Invalid number \"8\"."
    test_one_input 8  "-9"  "Invalid number \"9\"."

test_input_radix 10 "a" "12"
    test_one_input 10 "-12"  "-12"

test_input_radix 16 "10" "20"

# Test output radices.

proc test_one_output { oradix input output } {
    gdb_test "print $input" "$output" \
	"print $input; expect $output; output radix $oradix"
}

proc test_output_radix { oradix oradixhex oradixoctal } {
    # set input-radix = ten, output-radix = $oradix
    gdb_test "set radix" \
	"Input and output radices now set to decimal 10, hex a, octal 12." \
	"initialize radix, output radix $oradix"
    gdb_test "set output-radix $oradix" \
	"Output radix now set to decimal $oradix, hex $oradixhex, octal $oradixoctal."
    if { $oradix == 10 } then {
	gdb_test "show radix" \
	    "Input and output radices set to decimal 10, hex a, octal 12." \
	    "show radix, output radix $oradix"
    } else {
	gdb_test "show radix" \
	    "Input radix set to decimal 10, hex a, octal 12.\r\nOutput radix set to decimal $oradix, hex $oradixhex, octal $oradixoctal." \
	    "show radix, output radix $oradix"
    }

    # no standard tests for output radix
}

test_output_radix 8 "8" "10"
    test_one_output 8  "010"        "010"
    test_one_output 8  "0xf"        "17"
    test_one_output 8  "10"         "12"
    test_one_output 8  "100"        "144"
    setup_kfail *-*-* "gdb/1715"
    test_one_output 8  "20."        "24"
    test_one_output 8  "(int) 20."  "24"

test_output_radix 10 "a" "12"
    test_one_output 10 "010"        "8"
    test_one_output 10 "0xf"        "15"
    test_one_output 10 "10"         "10"
    test_one_output 10 "100"        "100"
    test_one_output 10 "20."        "20"
    test_one_output 10 "(int) 20."  "20"

test_output_radix 16 "10" "20"
    test_one_output 16 "010"        "8"
    test_one_output 16 "0xf"        "f"
    test_one_output 16 "10"         "a"
    test_one_output 16 "100"        "64"
    setup_kfail *-*-* "gdb/1715"
    test_one_output 16 "20."        "14"
    test_one_output 16 "(int) 20."  "14"
@


1.1.2.1
log
@Import of 961112 Cygnus binutils+gas+ld+gdb+gprof
@
text
@a0 185
# Copyright (C) 1993 Free Software Foundation, Inc.

# This program is free software; you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation; either version 2 of the License, or
# (at your option) any later version.
# 
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
# 
# You should have received a copy of the GNU General Public License
# along with this program; if not, write to the Free Software
# Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA 02111-1307, USA.  */

# Please email any bugs, comments, and/or additions to this file to:
# bug-gdb@@prep.ai.mit.edu

# This file was written by Fred Fish. (fnf@@cygnus.com)

if $tracelevel then {
	strace $tracelevel
}

set prms_id 0
set bug_id 0

proc test_input_radix_2 {} {
    gdb_test "set radix" \
	"Input and output radices now set to decimal 10, hex a, octal 12."
    gdb_test "set input-radix 2" \
	"Input radix now set to decimal 2, hex 2, octal 2."
    gdb_test "show radix" \
	"Input radix set to decimal 2, hex 2, octal 2.\r\nOutput radix set to decimal 10, hex a, octal 12."
    gdb_test "p 010"		"8"
    gdb_test "p 20."		"20"
    gdb_test "p (int) 20."	"20"
    gdb_test "p 0xf"		"15"
    gdb_test "p 10"		"2"
    gdb_test "p -101"		"-5"
    gdb_test "p 101"		"5"
    gdb_test "p 10101"		"21"
    gdb_test "p 4"		"Invalid number \"4\"\\."
    gdb_test "p -2"		"Invalid number \"2\"\\."
}

# Test input radix 3 (an non-typical radix)

proc test_input_radix_3 {} {
    gdb_test "set radix" \
	"Input and output radices now set to decimal 10, hex a, octal 12."
    gdb_test "set input-radix 3" \
	"Input radix now set to decimal 3, hex 3, octal 3."
    gdb_test "show radix" \
	"Input radix set to decimal 3, hex 3, octal 3.\r\nOutput radix set to decimal 10, hex a, octal 12."
    gdb_test "p 010"		"8"
    gdb_test "p 20."		"20"
    gdb_test "p (int) 20."	"20"
    gdb_test "p 0xf"		"15"
    gdb_test "p 10"		"3"
    gdb_test "p 0"		"0"
    gdb_test "p 1"		"1"
    gdb_test "p 2"		"2"
    gdb_test "p 10"		"3"
    gdb_test "p 20"		"6"
    gdb_test "p 100"		"9"
    gdb_test "p -100"		"-9"
    gdb_test "p 3"		"Invalid number \"3\"."
    gdb_test "p 30"		"Invalid number \"30\"."
}

proc test_input_radix_8 {} {
    gdb_test "set radix" \
	"Input and output radices now set to decimal 10, hex a, octal 12."
    gdb_test "set input-radix 8" \
	"Input radix now set to decimal 8, hex 8, octal 10."
    gdb_test "show radix" \
	"Input radix set to decimal 8, hex 8, octal 10.\r\nOutput radix set to decimal 10, hex a, octal 12."
    gdb_test "p 010"		"8"
    gdb_test "p 20."		"20"
    gdb_test "p (int) 20."	"20"
    gdb_test "p 0xf"		"15"
    gdb_test "p 10"		"8"
    gdb_test "p 20"		"16"
    gdb_test "p -20"		"-16"
    gdb_test "p 100"		"64"
    gdb_test "p 8"		"Invalid number \"8\"."
    gdb_test "p -9"		"Invalid number \"9\"."
}

proc test_input_radix_10 {} {
    gdb_test "set radix" \
	"Input and output radices now set to decimal 10, hex a, octal 12."
    gdb_test "set input-radix 10" \
	"Input radix now set to decimal 10, hex a, octal 12."
    gdb_test "show radix" \
	"Input and output radices set to decimal 10, hex a, octal 12."
    gdb_test "p 010"		"8"
    gdb_test "p 20."		"20"
    gdb_test "p (int) 20."	"20"
    gdb_test "p 0xf"		"15"
    gdb_test "p 10"		"10"
    gdb_test "p -12"		"-12"
}

proc test_input_radix_16 {} {
    gdb_test "set radix" \
	"Input and output radices now set to decimal 10, hex a, octal 12."
    gdb_test "set input-radix 16" \
	"Input radix now set to decimal 16, hex 10, octal 20."
    gdb_test "show radix" \
	"Input radix set to decimal 16, hex 10, octal 20.\r\nOutput radix set to decimal 10, hex a, octal 12."
    gdb_test "p 010"		"8"
    gdb_test "p 20."		"20"
    gdb_test "p (int) 20."	"20"
    gdb_test "p 0xf"		"15"
    gdb_test "p 10"		"16"
    gdb_test "p 100"		"256"
}

proc test_output_radix_8 {} {
    gdb_test "set radix" \
	"Input and output radices now set to decimal 10, hex a, octal 12."
    gdb_test "set output-radix 8" \
	"Output radix now set to decimal 8, hex 8, octal 10."
    gdb_test "show radix" \
	"Input radix set to decimal 10, hex a, octal 12.\r\nOutput radix set to decimal 8, hex 8, octal 10."
    gdb_test "p 010"		"010"
    # FIXME:  If gdb can't handle float printing in different radices, it
    # should at least warn once the first time that is attempted.
    setup_xfail "*-*-*"
    gdb_test "p 20."		"24"	"Float printing when output radix is 8"
    gdb_test "p (int) 20."	"24"
    gdb_test "p 0xf"		"17"
    gdb_test "p 10"		"12"
    gdb_test "p 100"		"144"
}

proc test_output_radix_10 {} {
    gdb_test "set radix" \
	"Input and output radices now set to decimal 10, hex a, octal 12."
    gdb_test "set output-radix 10" \
	"Output radix now set to decimal 10, hex a, octal 12."
    gdb_test "show radix" \
	"Input and output radices set to decimal 10, hex a, octal 12."
    gdb_test "p 010"		"8"
    gdb_test "p 20."		"20"
    gdb_test "p (int) 20."	"20"
    gdb_test "p 0xf"		"15"
    gdb_test "p 10"		"10"
    gdb_test "p 100"		"100"
}

proc test_output_radix_16 {} {
    gdb_test "set radix" \
	"Input and output radices now set to decimal 10, hex a, octal 12."
    gdb_test "set output-radix 16" \
	"Output radix now set to decimal 16, hex 10, octal 20."
    gdb_test "show radix" \
	"Input radix set to decimal 10, hex a, octal 12.\r\nOutput radix set to decimal 16, hex 10, octal 20."
    gdb_test "p 010"		"8"
    # FIXME:  If gdb can't handle float printing in different radices, it
    # should at least warn once the first time that is attempted.
    setup_xfail "*-*-*"
    gdb_test "p 20."		"14"	"Float printing when output radix is 16"
    gdb_test "p (int) 20."	"14"
    gdb_test "p 0xf"		"f"
    gdb_test "p 10"		"a"
    gdb_test "p 100"		"64"
}

# Start with a fresh gdb.

gdb_exit
gdb_start

test_input_radix_2
test_input_radix_3
test_input_radix_8
test_input_radix_10
test_input_radix_16
test_output_radix_8
test_output_radix_10
test_output_radix_16
@
