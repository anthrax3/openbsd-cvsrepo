head	1.3;
access;
symbols
	OPENBSD_6_0:1.3.0.50
	OPENBSD_6_0_BASE:1.3
	OPENBSD_5_9:1.3.0.46
	OPENBSD_5_9_BASE:1.3
	OPENBSD_5_8:1.3.0.48
	OPENBSD_5_8_BASE:1.3
	OPENBSD_5_7:1.3.0.40
	OPENBSD_5_7_BASE:1.3
	OPENBSD_5_6:1.3.0.44
	OPENBSD_5_6_BASE:1.3
	OPENBSD_5_5:1.3.0.42
	OPENBSD_5_5_BASE:1.3
	OPENBSD_5_4:1.3.0.38
	OPENBSD_5_4_BASE:1.3
	OPENBSD_5_3:1.3.0.36
	OPENBSD_5_3_BASE:1.3
	OPENBSD_5_2:1.3.0.34
	OPENBSD_5_2_BASE:1.3
	OPENBSD_5_1_BASE:1.3
	OPENBSD_5_1:1.3.0.32
	OPENBSD_5_0:1.3.0.30
	OPENBSD_5_0_BASE:1.3
	OPENBSD_4_9:1.3.0.28
	OPENBSD_4_9_BASE:1.3
	OPENBSD_4_8:1.3.0.26
	OPENBSD_4_8_BASE:1.3
	OPENBSD_4_7:1.3.0.22
	OPENBSD_4_7_BASE:1.3
	OPENBSD_4_6:1.3.0.24
	OPENBSD_4_6_BASE:1.3
	OPENBSD_4_5:1.3.0.20
	OPENBSD_4_5_BASE:1.3
	OPENBSD_4_4:1.3.0.18
	OPENBSD_4_4_BASE:1.3
	OPENBSD_4_3:1.3.0.16
	OPENBSD_4_3_BASE:1.3
	OPENBSD_4_2:1.3.0.14
	OPENBSD_4_2_BASE:1.3
	OPENBSD_4_1:1.3.0.12
	OPENBSD_4_1_BASE:1.3
	OPENBSD_4_0:1.3.0.10
	OPENBSD_4_0_BASE:1.3
	OPENBSD_3_9:1.3.0.8
	OPENBSD_3_9_BASE:1.3
	OPENBSD_3_8:1.3.0.6
	OPENBSD_3_8_BASE:1.3
	OPENBSD_3_7:1.3.0.4
	OPENBSD_3_7_BASE:1.3
	GDB_6_3:1.1.1.1
	OPENBSD_3_6:1.3.0.2
	OPENBSD_3_6_BASE:1.3
	GDB_6_1:1.1.1.1
	FSF:1.1.1
	OPENBSD_3_5:1.2.0.32
	OPENBSD_3_5_BASE:1.2
	OPENBSD_3_4:1.2.0.30
	OPENBSD_3_4_BASE:1.2
	OPENBSD_3_3:1.2.0.28
	OPENBSD_3_3_BASE:1.2
	OPENBSD_3_2:1.2.0.26
	OPENBSD_3_2_BASE:1.2
	OPENBSD_3_1:1.2.0.24
	OPENBSD_3_1_BASE:1.2
	OPENBSD_3_0:1.2.0.22
	OPENBSD_3_0_BASE:1.2
	OPENBSD_2_9:1.2.0.20
	OPENBSD_2_9_BASE:1.2
	OPENBSD_2_8:1.2.0.18
	OPENBSD_2_8_BASE:1.2
	OPENBSD_2_7:1.2.0.16
	OPENBSD_2_7_BASE:1.2
	new-binutils:1.2.0.14
	OPENBSD_2_6:1.2.0.12
	OPENBSD_2_6_BASE:1.2
	OPENBSD_2_5:1.2.0.10
	OPENBSD_2_5_BASE:1.2
	OPENBSD_2_4:1.2.0.8
	OPENBSD_2_4_BASE:1.2
	OPENBSD_2_3:1.2.0.6
	OPENBSD_2_3_BASE:1.2
	OPENBSD_2_2:1.2.0.4
	OPENBSD_2_2_BASE:1.2
	OPENBSD_2_1:1.2.0.2
	OPENBSD_2_1_BASE:1.2
	CYGNUS-961112:1.1.2.1
	CYGNUS:1.1.0.2;
locks; strict;
comment	@# @;


1.3
date	2004.05.21.20.23.40;	author kettenis;	state Exp;
branches;
next	1.2;

1.2
date	96.11.23.03.50.22;	author niklas;	state Exp;
branches;
next	1.1;

1.1
date	96.11.19.14.35.44;	author niklas;	state dead;
branches
	1.1.1.1
	1.1.2.1;
next	;

1.1.1.1
date	2004.05.21.19.16.59;	author kettenis;	state Exp;
branches;
next	;

1.1.2.1
date	96.11.19.14.35.45;	author niklas;	state Exp;
branches;
next	;


desc
@@


1.3
log
@Resolve conflicts for GDB 6.1.  Add local patches.
ok deraadt@@
@
text
@# Copyright 1992, 1994, 1996, 1997, 1998, 2001, 2003
# Free Software Foundation, Inc.

# This program is free software; you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation; either version 2 of the License, or
# (at your option) any later version.
# 
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
# 
# You should have received a copy of the GNU General Public License
# along with this program; if not, write to the Free Software
# Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA 02111-1307, USA.  

# Please email any bugs, comments, and/or additions to this file to:
# bug-gdb@@prep.ai.mit.edu

# This file was written by Michael Snyder (msnyder@@cygnus.com)

if $tracelevel then {
	strace $tracelevel
}

set prms_id 0
set bug_id 0

set testfile "setshow"
set srcfile ${testfile}.c
set binfile ${objdir}/${subdir}/${testfile}
if { [gdb_compile ${srcdir}/${subdir}/${srcfile} ${binfile} executable {debug}] != "" } {
     gdb_suppress_entire_file "Testcase compile failed, so all tests in this file will automatically fail."
}

# Start with a fresh gdb

gdb_exit
gdb_start
gdb_reinitialize_dir $srcdir/$subdir
gdb_load ${binfile}

# make sure $pc is sane, in case we're talking to a board.
if { ![runto_main] } {
    gdb_suppress_tests;
}

#
# Test gdb set and show commands.
# Add tests here for show and set that don't fit neatly elsewhere.
# FIXME: many rudimentary tests for set and show commands have been
#        added below, but most do nothing more than check that a 
#        variable has been set successfully, ie. they do not test
#        whether setting the variable has had the desired effect.
#

#test default annotation_level is 0
gdb_test "show annotate" "Annotation_level is 0..*"  "default annotation_level is zero"

#test set annotate 2
send_gdb "set annotate 2\n"
gdb_expect {
	-re ".*\032\032pre-prompt.*$gdb_prompt .*\032\032prompt.*$" \
				{ pass "set annotate 2" }
 	-re ".*$gdb_prompt $"	{ fail "set annotate 2" }
	timeout			{ fail "(timeout) set annotate 2" }
    }

send_gdb "show annotate\n"
gdb_expect {
	-re ".*\032\032post-prompt.*Annotation_level is 2..*\032\032pre-prompt.*$gdb_prompt .*\032\032prompt.*$" \
				{ pass "show annotate (2)" }
 	-re ".*$gdb_prompt $"	{ fail "show annotate (2)" }
	timeout			{ fail "(timeout) show annotate (2)" }
    }

#test annotation_level 2
send_gdb "info line 1\n"
gdb_expect {
	-re ".*\032\032post-prompt.*Line 1 of .* is at address .* but contains no code.*:1:0:beg:0x.*\032\032pre-prompt.*$gdb_prompt .*\032\032prompt.*$" \
				{ pass "annotation_level 2" }
	-re ".*$gdb_prompt $"	{ fail "annotation_level 2" }
	timeout			{ fail "(timeout) annotation_level 2" }
    }

#test set annotate 1
gdb_test "set annotate 1" ".*post-prompt.*"  "set annotate 1" 
gdb_test "show annotate" "Annotation_level is 1..*"  "show annotate (1)" 
#test annotation_level 1
gdb_test "info line 1" "Line 1 of .* is at address .* but contains no code.*:1:0:beg:0x.*"  "annotation_level 1" 
#test set annotate 0
gdb_test "set annotate 0" "" "set annotate 0" 
gdb_test "show annotate" "Annotation_level is 0..*"  "show annotate (0)" 
#test annotation_level 0
gdb_test "info line 1" "Line 1 of .* is at address .* but contains no code.*"  "annotation_level 0" 
#test set args
gdb_test "set args foo bar blup baz bubble" "" "set args" 
#test show args
gdb_test "show args" "Argument list to give program being debugged when it is started is \"foo bar blup baz bubble\"..*" "show args"

# Don't test if we can't pass args or if we're using a stub.
if { ![target_info exists use_gdb_stub] && ![target_info exists noargs] } {
    #test passing args
    gdb_test "cont" "Continuing.*" "continuing"
    delete_breakpoints
    gdb_test "run" "Starting program:.*foo bar blup baz bubble.*" "passing args"
}
#test set check range on
gdb_test "set check range on" "" "set check range on" 
#test show check range on
gdb_test "show check range" "Range checking is \"on\"\..*" "show check range (on)" 
#test set check range auto
gdb_test "set check range auto" "" "set check range auto" 
#test show check range auto
gdb_test "show check range" "Range checking is \"auto; currently .*" "show check range (auto)" 
#test set check type on
gdb_test "set check type on" "" "set check type on" 
#test show check type on
gdb_test "show check type" "Type checking is \"on\"..*" "show check type (on)" 
#test set check type auto
gdb_test "set check type auto" "" "set check type auto" 
#test show check type
gdb_test "show check type" "Type checking is \"auto; currently .*" "show check type (auto)" 
#test set complaints 100
gdb_test "set complaints 100" "" "set complaints 100" 
#test show complaints 100
gdb_test "show complaints" "Max number of complaints about incorrect symbols is 100..*" "show complaints (100)" 
#test set complaints 0
gdb_test "set complaints 0" "" "set complaints 0" 
#test show complaints 0
gdb_test "show complaints" "Max number of complaints about incorrect symbols is 0..*" "show complaints (0)" 
#test set confirm off
gdb_test "set confirm off" "" "set confirm off" 
#test show confirm off
gdb_test "show confirm" "Whether to confirm potentially dangerous operations is off..*" "show confirm (off)" 
#test set confirm on
gdb_test "set confirm on" "" "set confirm on" 
#test show confirm on
gdb_test "show confirm" "Whether to confirm potentially dangerous operations is on..*" "show confirm (on)" 
#test set editing off
gdb_test "set editing off" "" "set editing off" 
#test show editing off
gdb_test "show editing" "Editing of command lines as they are typed is off..*" "show editing (off)" 
#test set editing on
#gdb_test "set editing on" "" "set editing on" 
#test show editing on
#gdb_test "show editing" "Editing of command lines as they are typed is on..*" "show editing (on)" 
#test set environment FOOBARBAZ
gdb_test "set environment FOOBARBAZ = grbxgrbxgrbx" ""    "set environment FOOBARBAZ" 
#test show environment FOOBARBAZ
gdb_test "show environment FOOBARBAZ" "FOOBARBAZ = grbxgrbxgrbx.*"  "show environment FOOBARBAZ" 
#test set height 100
gdb_test "set height 100" "" "set height 100" 
#test show height 100
gdb_test "show height" "Number of lines gdb thinks are in a page is 100..*" "show height" 
#test set history expansion on
gdb_test "set history expansion on" "" "set history expansion on" 
#test show history expansion on
gdb_test "show history expansion on" "History expansion on command input is on.*" "show history expansion" 
#test set history filename foobar.baz
gdb_test "set history filename foobar.baz" ""    "set history filename foobar.baz" 
#test show history filename foobar.baz
gdb_test "show history filename" "The filename in which to record the command history is \"foobar.baz\"..*"  "show history filename (foobar.baz)" 
#test set history save on
gdb_test "set history save on" "" "set history save on" 
#test show history save on
gdb_test "show history save" "Saving of the history record on exit is on..*"  "show history save (on)" 
#test set history size 100
gdb_test "set history size 100" "" "set history size 100" 
#test show history size 100
gdb_test "show history size" "The size of the command history is 100..*" "show history size (100)" 
#test set language asm
gdb_test "set language asm" "" "set language asm" 
#test show language asm
gdb_test "show language" "The current source language is \"asm\"..*" "show language (asm)" 
#test set language auto
gdb_test "set language auto" "" "set language auto" 
#test show language
gdb_test "show language" "The current source language is \"auto.*\"..*" "show language (auto)" 
#test set listsize 100
gdb_test "set listsize 100" "" "set listsize 100" 
#test show listsize 100
gdb_test "show listsize" "Number of source lines gdb will list by default is 100..*" "show listsize (100)" 

if ![board_info target exists gdb_prompt] {
    #test set prompt (FooBarBaz) 
    set newprompt "\\(FooBarBaz\\)"
    send_gdb "set prompt (FooBarBaz) \n"
    gdb_expect {
	-re "$newprompt $"	{ pass "set prompt (FooBarBaz) " }
	timeout			{ fail "(timeout) set prompt (FooBarBaz) " }
    }

    #test show prompt (FooBarBaz) 
    send_gdb "show prompt\n"
    gdb_expect {
	-re "Gdb's prompt is \"$newprompt \"..* $" \
		{ pass "show prompt (FooBarBaz) " }
	timeout			{ fail "(timeout) show prompt (FooBarBaz) " }
    }

    #test set prompt (gdb) 
    send_gdb "set prompt (gdb) \n"
    gdb_expect {
	-re "$gdb_prompt $"		{ pass "set prompt (gdb) " }
	timeout			{ fail "(timeout) set prompt (gdb) " }
    }
}

#test set radix 11
gdb_test "set radix 11" "Unsupported output radix ``decimal 11''; output radix unchanged..*"  "set radix 11" 
#test set radix 16
gdb_test "set radix 16" "Input and output radices now set to decimal 16, hex 10, octal 20..*"  "set radix 16" 
#test show radix 16
gdb_test "show radix" "Input and output radices set to decimal 16, hex 10, octal 20..*"  "show radix (16)" 
#test set radix 10
gdb_test "set radix" "Input and output radices now set to decimal 10, hex a, octal 12..*"  "set radix 10" 
#test show radix 10
gdb_test "show radix" "Input and output radices set to decimal 10, hex a, octal 12..*" "show radix (10)" 
#test set width 90
gdb_test "set width 90" "" "set width 90"
#test show width 90
gdb_test "show width" "Number of characters gdb thinks are in a line is 90..*" "show width (90)" 
#test set write on
# This is only supported on targets which use exec.o.
gdb_test "set write on" ""  "set write on" 
#test show write on
# This is only supported on targets which use exec.o.
gdb_test "show write" "Writing into executable and core files is on..*" "show write (on)" 
#test set symbol-reloading on
gdb_test "set symbol-reloading on" "" "set symbol-reloading on" 
#test show symbol-reloading on
gdb_test "show symbol-reloading" "Dynamic symbol table reloading multiple times in one run is on..*" "show symbol-reloading (on)" 
#test show user
gdb_test "show user" "" "show user" 
#test set verbose on
gdb_test "set verbose on" "" "set verbose on" 
#test show verbose on
gdb_test "show verbose" "Verbose printing of informational messages is on..*" "show verbose (on)" 
#test set verbose off
gdb_test "set verbose off" "" "set verbose off" 
#test show verbose off
gdb_test "show verbose" "Verbosity is off..*" "show verbose (off)" 
@


1.2
log
@Merge to Cygnus 961112 + add some support (not ready) for shared libs
@
text
@d1 2
a2 1
# Copyright (C) 1992, 1994 Free Software Foundation, Inc.
d16 1
a16 1
# Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA 02111-1307, USA.  */
d33 2
a34 3
if  { [compile "${srcdir}/${subdir}/${srcfile} -g -o ${binfile}"] != "" } {
    perror "Couldn't compile ${srcfile}"
    return -1
d44 5
a57 3
#load_lib gdb.exp


d59 1
a59 7
send "show annotate\n"
expect {
	-re "Annotation_level is 0..*$prompt $" \
				{ pass "default annotation_level is zero" }
	-re ".*$prompt $"	{ fail "default annotation_level is zero" }
	timeout			{ fail "(timeout) default annotation_level is zero" }
	}
d62 3
a64 3
send "set annotate 2\n"
expect {
	-re ".*\032\032pre-prompt.*$prompt .*\032\032prompt.*$" \
d66 1
a66 1
 	-re ".*$prompt $"	{ fail "set annotate 2" }
d68 1
a68 1
	}
d70 3
a72 3
send "show annotate\n"
expect {
	-re ".*\032\032post-prompt.*Annotation_level is 2..*\032\032pre-prompt.*$prompt .*\032\032prompt.*$" \
d74 1
a74 1
 	-re ".*$prompt $"	{ fail "show annotate (2)" }
d76 1
a76 1
	}
d79 3
a81 3
send "info line 1\n"
expect {
	-re ".*\032\032post-prompt.*Line 1 of .* is at address .* but contains no code.*:1:0:beg:0x.*\032\032pre-prompt.*$prompt .*\032\032prompt.*$" \
d83 1
a83 1
	-re ".*$prompt $"	{ fail "annotation_level 2" }
d85 1
a85 1
	}
d88 2
a89 16
send "set annotate 1\n"
expect {
	-re ".*post-prompt.*$prompt $" \
				{ pass "set annotate 1" }
	-re ".*$prompt $"	{ fail "set annotate 1" }
	timeout			{ fail "(timeout) set annotate 1" }
	}

send "show annotate\n"
expect {
	-re "Annotation_level is 1..*$prompt $" \
				{ pass "show annotate (1)" }
	-re ".*$prompt $"	{ fail "show annotate (1)" }
	timeout			{ fail "(timeout) show annotate (1)" }
	}

d91 1
a91 8
send "info line 1\n"
expect {
	-re "Line 1 of .* is at address .* but contains no code.*:1:0:beg:0x.*$prompt $" \
				{ pass "annotation_level 1" }
	-re ".*$prompt $"	{ fail "annotation_level 1" }
	timeout			{ fail "(timeout) annotation_level 1" }
	}

d93 2
a94 15
send "set annotate 0\n"
expect {
	-re "$prompt $"	{ pass "set annotate 0" }
	-re ".*$prompt $"	{ fail "set annotate 0" }
	timeout			{ fail "(timeout) set annotate 0" }
	}

send "show annotate\n"
expect {
	-re "Annotation_level is 0..*$prompt $" \
				{ pass "show annotate (0)" }
	-re ".*$prompt $"	{ fail "show annotate (0)" }
	timeout			{ fail "(timeout) show annotate (1)" }
	}

d96 1
a96 8
send "info line 1\n"
expect {
	-re "Line 1 of .* is at address .* but contains no code.*$prompt $" \
				{ pass "annotation_level 0" }
	-re ".*$prompt $"	{ fail "annotation_level 0" }
	timeout			{ fail "(timeout) annotation_level 0" }
	}

d98 3
a100 6
send "set args foo bar blup baz bubble\n"
expect {
	-re "$prompt $"		{ pass "set args" }
	-re ".*$prompt $"	{ fail "set args" }
	timeout			{ fail "(timeout) set args" }
	}
d102 6
a107 16
#test show args
send "show args\n"
expect {
	-re "Arguments to give program being debugged when it is started is \"foo bar blup baz bubble\"..*$prompt $"\
				{ pass "show args" }
	-re ".*$prompt $"	{ fail "show args" }
	timeout			{ fail "(timeout) show args" }
	}

#test passing args
send "run\n"
expect {
	-re "Starting program:.*foo bar blup baz bubble.*$prompt $"
				{ pass "passing args" }
	-re ".*$prompt $"	{ fail "passing args" }
	timeout			{ fail "(timeout) passing args" }
a108 1

d110 1
a110 7
send "set check range on\n"
expect {
	-re "$prompt $"		{ pass "set check range on" }
	-re ".*$prompt $"	{ fail "set check range on" }
	timeout			{ fail "(timeout) set check range on" }
	}

d112 1
a112 8
send "show check range\n"
expect {
	-re "Range checking is \"on\"\..*$prompt $"\
				{ pass "show check range (on)" }
	-re ".*$prompt $"	{ fail "show check range (on)" }
	timeout			{ fail "(timeout) show check range (on)" }
	}

d114 1
a114 7
send "set check range auto\n"
expect {
	-re "$prompt $"		{ pass "set check range auto" }
	-re ".*$prompt $"	{ fail "set check range auto" }
	timeout			{ fail "(timeout) set check range auto" }
	}

d116 1
a116 8
send "show check range\n"
expect {
	-re "Range checking is \"auto; currently .*$prompt $"\
				{ pass "show check range (auto)" }
	-re ".*$prompt $"	{ fail "show check range (auto)" }
	timeout			{ fail "(timeout) show check range (auto)" }
	}

d118 1
a118 7
send "set check type on\n"
expect {
	-re "$prompt $"		{ pass "set check type on" }
	-re ".*$prompt $"	{ fail "set check type on" }
	timeout			{ fail "(timeout) set check type on" }
	}

d120 1
a120 8
send "show check type\n"
expect {
	-re "Type checking is \"on\"..*$prompt $"\
				{ pass "show check type (on)" }
	-re ".*$prompt $"	{ fail "show check type (on)" }
	timeout			{ fail "(timeout) show check type (on)" }
	}

d122 1
a122 7
send "set check type auto\n"
expect {
	-re "$prompt $"		{ pass "set check type auto" }
	-re ".*$prompt $"	{ fail "set check type auto" }
	timeout			{ fail "(timeout) set check type auto" }
	}

d124 1
a124 8
send "show check type\n"
expect {
	-re "Type checking is \"auto; currently .*$prompt $"\
				{ pass "show check type (auto)" }
	-re ".*$prompt $"	{ fail "show check type (auto)" }
	timeout			{ fail "(timeout) show check type (auto)" }
	}

d126 1
a126 7
send "set complaints 100\n"
expect {
	-re "$prompt $"		{ pass "set complaints 100" }
	-re ".*$prompt $"	{ fail "set complaints 100" }
	timeout			{ fail "(timeout) set complaints 100" }
	}

d128 1
a128 8
send "show complaints\n"
expect {
	-re "Max number of complaints about incorrect symbols is 100..*$prompt $"\
				{ pass "show complaints (100)" }
	-re ".*$prompt $"	{ fail "show complaints (100)" }
	timeout			{ fail "(timeout) show complaints (100)" }
	}

d130 1
a130 7
send "set complaints 0\n"
expect {
	-re "$prompt $"		{ pass "set complaints 0" }
	-re ".*$prompt $"	{ fail "set complaints 0" }
	timeout			{ fail "(timeout) set complaints 0" }
	}

d132 1
a132 8
send "show complaints\n"
expect {
	-re "Max number of complaints about incorrect symbols is 0..*$prompt $"\
				{ pass "show complaints (0)" }
	-re ".*$prompt $"	{ fail "show complaints (0)" }
	timeout			{ fail "(timeout) show complaints (0)" }
	}

d134 1
a134 7
send "set confirm off\n"
expect {
	-re "$prompt $"		{ pass "set confirm off" }
	-re ".*$prompt $"	{ fail "set confirm off" }
	timeout			{ fail "(timeout) set confirm off" }
	}

d136 1
a136 8
send "show confirm\n"
expect {
	-re "Whether to confirm potentially dangerous operations is off..*$prompt $"\
				{ pass "show confirm (off)" }
	-re ".*$prompt $"	{ fail "show confirm (off)" }
	timeout			{ fail "(timeout) show confirm (off)" }
	}

d138 1
a138 7
send "set confirm on\n"
expect {
	-re "$prompt $"		{ pass "set confirm on" }
	-re ".*$prompt $"	{ fail "set confirm on" }
	timeout			{ fail "(timeout) set confirm on" }
	}

d140 1
a140 8
send "show confirm\n"
expect {
	-re "Whether to confirm potentially dangerous operations is on..*$prompt $"\
				{ pass "show confirm (on)" }
	-re ".*$prompt $"	{ fail "show confirm (on)" }
	timeout			{ fail "(timeout) show confirm (on)" }
	}

d142 1
a142 7
send "set editing off\n"
expect {
	-re "$prompt $"		{ pass "set editing off" }
	-re ".*$prompt $"	{ fail "set editing off" }
	timeout			{ fail "(timeout) set editing off" }
	}

d144 1
a144 8
send "show editing\n"
expect {
	-re "Editing of command lines as they are typed is off..*$prompt $"\
				{ pass "show editing (off)" }
	-re ".*$prompt $"	{ fail "show editing (off)" }
	timeout			{ fail "(timeout) show editing (off)" }
	}

d146 1
a146 7
send "set editing on\n"
expect {
	-re "$prompt $"		{ pass "set editing on" }
	-re ".*$prompt $"	{ fail "set editing on" }
	timeout			{ fail "(timeout) set editing on" }
	}

d148 1
a148 8
send "show editing\n"
expect {
	-re "Editing of command lines as they are typed is on..*$prompt $"\
				{ pass "show editing (on)" }
	-re ".*$prompt $"	{ fail "show editing (on)" }
	timeout			{ fail "(timeout) show editing (on)" }
	}

d150 1
a150 7
send "set environment FOOBARBAZ = grbxgrbxgrbx\n"
expect {
	-re "$prompt $"	   { pass "set environment FOOBARBAZ" }
	-re ".*$prompt $"  { fail "set environment FOOBARBAZ" }
	timeout		   { fail "(timeout) set environment FOOBARBAZ" }
	}

d152 1
a152 7
send "show environment FOOBARBAZ\n"
expect {
	-re "FOOBARBAZ = grbxgrbxgrbx.*$prompt $" { pass "show environment FOOBARBAZ" }
	-re ".*$prompt $"                         { fail "show environment FOOBARBAZ" }
	timeout                                   { fail "(timeout) show environment FOOBARBAZ" }
	}

d154 1
a154 7
send "set height 100\n"
expect {
	-re "$prompt $"	{ pass "set height 100" }
	-re ".*$prompt $"	{ pass "set height 100" }
	timeout		{ fail "(timeout) set height 100" }
	}

d156 1
a156 8
send "show height\n"
expect {
	-re "Number of lines gdb thinks are in a page is 100..*$prompt $"\
			{ pass "show height" }
	-re ".*$prompt $"	{ fail "show height" }
	timeout		{ fail "(timeout) show height" }
	}

d158 1
a158 7
send "set history expansion on\n"
expect {
	-re "$prompt $"		{ pass "set history expansion on" }
	-re ".*$prompt $"	{ fail "set hitsory expansion on" }
	timeout			{ fail "(timeout) set history expansion" }
	}

d160 1
a160 8
send "show history expansion on\n"
expect {
	-re "History expansion on command input is on.*$prompt $"\
				{ pass "show history expansion" }
	-re ".*$prompt $"	{ fail "show history expansion" }
	timeout			{ fail "(timeout) show history expansion" }
	}

d162 1
a162 7
send "set history filename foobar.baz\n"
expect {
	-re "$prompt $"   { pass "set history filename foobar.baz" }
	-re ".*$prompt $" { fail "set history filename foobar.baz" }
	timeout	          { fail "(timeout) set history filename foobar.baz" }
    }

d164 1
a164 8
send "show history filename\n"
expect {
	-re "The filename in which to record the command history is \"foobar.baz\"..*$prompt $" \
				{ pass "show history filename (foobar.baz)" }
	-re ".*$prompt $"	{ fail "show history filename (foobar.baz)" }
	timeout			{ fail "(timeout) show history filename (foobar.baz)" }
	}

d166 1
a166 7
send "set history save on\n"
expect {
	-re "$prompt $"		{ pass "set history save on" }
	-re ".*$prompt $" 	{ fail "set history save on" }
	timeout			{ fail "(timeout) set history save on" }
	}

d168 1
a168 8
send "show history save\n"
expect {
	-re "Saving of the history record on exit is on..*$prompt $" 
				{ pass "show history save (on)" }
	-re ".*$prompt $"	{ fail "show history save (on)" }
	timeout			{ fail "(timeout) show history save" }
	}

d170 1
a170 7
send "set history size 100\n"
expect {
	-re "$prompt $"		{ pass "set history size 100" }
	-re ".*$prompt $"	{ fail "set history size 100" }
	timeout			{ fail "(timeout) set history size 100" }
	}

d172 1
a172 8
send "show history size\n"
expect {
	-re "The size of the command history is 100..*$prompt $"\
				{ pass "show history size (100)" }
	-re ".*$prompt $"	{ fail "show history size (100)" }
	timeout			{ fail "(timeout) show history size (100)" }
	}

d174 1
a174 7
send "set language asm\n"
expect {
	-re "$prompt $"		{ pass "set language asm" }
	-re ".*$prompt $"	{ fail "set language asm" }
	timeout			{ fail "(timeout) set language asm" }
	}

d176 1
a176 8
send "show language\n"
expect {
	-re "The current source language is \"asm\"..*$prompt $"\
				{ pass "show language (asm)" }
	-re ".*$prompt $"	{ fail "show language (asm)" }
	timeout			{ fail "(timeout) show language (asm)" }
	}

d178 1
a178 7
send "set language auto\n"
expect {
	-re "$prompt $"		{ pass "set language auto" }
	-re ".*$prompt $"	{ fail "set language auto" }
	timeout			{ fail "(timeout) set language auto" }
	}

d180 1
a180 8
send "show language\n"
expect {
	-re "The current source language is \"auto\"..*$prompt $"\
				{ pass "show language (auto)" }
	-re ".*$prompt $"	{ fail "show language (auto)" }
	timeout			{ fail "(timeout) show language (auto)" }
	}

d182 3
a184 6
send "set listsize 100\n"
expect {
	-re "$prompt $"		{ pass "set listsize 100" }
	-re ".*$prompt $"	{ fail "set listsize 100" }
	timeout			{ fail "(timeout) set listsize 100" }
	}
d186 5
a190 13
#test show listsize 100
send "show listsize\n"
expect {
	-re "Number of source lines gdb will list by default is 100..*$prompt $"\
				{ pass "show listsize (100)" }
	-re ".*$prompt $"	{ fail "show listsize (100)" }
	timeout			{ fail "(timeout) show listsize (100)" }
	}

#test set prompt (FooBarBaz) 
set newprompt "\\(FooBarBaz\\)"
send "set prompt (FooBarBaz) \n"
expect {
d193 1
a193 1
	}
d195 3
a197 3
#test show prompt (FooBarBaz) 
send "show prompt\n"
expect {
d199 1
a199 1
				{ pass "show prompt (FooBarBaz) " }
d201 1
a201 1
	}
d203 4
a206 4
#test set prompt (gdb) 
send "set prompt (gdb) \n"
expect {
	-re "$prompt $"		{ pass "set prompt (gdb) " }
d208 2
a209 1
	}
d212 1
a212 7
send "set radix 11\n"
expect {
	-re "Unsupported output radix ``decimal 11''; output radix unchanged..*$prompt $" \
				{ pass "set radix 11" }
	timeout			{ fail "(timeout) set radix 11" }
	}

d214 1
a214 7
send "set radix 16\n"
expect {
	-re "Input and output radices now set to decimal 16, hex 10, octal 20..*$prompt $" \
				{ pass "set radix 16" }
	timeout			{ fail "(timeout) set radix 16" }
	}

d216 1
a216 7
send "show radix\n"
expect {
        -re "Input and output radices set to decimal 16, hex 10, octal 20..*$prompt $" \
				{ pass "show radix (16)" }
	timeout			{ fail "(timeout) show radix (16)" }
	}

d218 1
a218 7
send "set radix\n"
expect {
	-re "Input and output radices now set to decimal 10, hex a, octal 12..*$prompt $" \
				{ pass "set radix 10" }
	timeout			{ fail "(timeout) set radix 10" }
	}

d220 1
a220 10
send "show radix\n"
expect {
        -re "Input and output radices set to decimal 10, hex a, octal 12..*$prompt $"\
				{ pass "show radix (10)" }
	-re "Default input and output number radix is 10..*$prompt $"\
				{ fail "show radix (obsolete radix support)" }
	-re ".*$prompt $"	{ fail "show radix (10)" }
	timeout			{ fail "(timeout) show radix (10)" }
	}

d222 1
a222 7
send "set width 90\n"
expect {
	-re "$prompt $"		{ pass "set width 90" }
	-re ".*$prompt $"	{ fail "set width 90" }
	timeout			{ fail "(timeout) set width 90" }
	}

d224 1
a224 8
send "show width\n"
expect {
	-re "Number of characters gdb thinks are in a line is 90..*$prompt $"\
				{ pass "show width (90)" }
	-re ".*$prompt $"	{ fail "show width (90)" }
	timeout		{ fail "(timeout) show width (90)" }
	}

d227 1
a227 9
if ![istarget "rs6000-*-*"] then {
    send "set write on\n"
    expect {
	-re "$prompt $" 	{ pass "set write on" }
	-re ".*$prompt $" 	{ fail "set write on" }
	timeout			{ fail "(timeout) set write on" }
	}
}

d230 1
a230 11
if ![istarget "rs6000-*-*"] then {
    send "show write\n"
    expect {
	-re "Writing into executable and core files is on..*$prompt $"\
				{ pass "show write (on)" }
	-re ".*$prompt $"	{ fail "show write (on)" }
	timeout		{ fail "(timeout) show write (on)" }
	}
}
gdb_test "set write off" ""

d232 1
a232 7
send "set symbol-reloading on\n"
expect {
	-re "$prompt $"		{ pass "set symbol-reloading on" }
	-re ".*$prompt $"	{ fail "set symbol-reloading on" }
	timeout			{ fail "(timeout) set symbol-reloading on" }
	}

d234 1
a234 9
send "show symbol-reloading\n"
expect {
	-re "Dynamic symbol table reloading multiple times in one run is on..*$prompt $"\
				{ pass "show symbol-reloading (on)" }
	-re ".*$prompt $"	{ fail "show symbol-reloading (on)" }
	timeout			{ fail "(timeout) show symbol-reloading (on)" }
	}


d236 1
a236 7
send "show user\n"
expect {
	-re "$prompt $"		{ pass "show user" }
	-re ".*$prompt $"	{ fail "show user" }
	timeout			{ fail "(timeout) show user" }
	}

d238 1
a238 7
send "set verbose on\n"
expect {
	-re "$prompt $"		{ pass "set verbose on" }
	-re ".*$prompt $"	{ fail "set verbose on" }
	timeout			{ fail "(timeout) set verbose on" }
	}

d240 1
a240 7
send "show verbose\n"
expect {
	-re "Verbose printing of informational messages is on..*$prompt $"\
				{ pass "show verbose (on)" }
	-re ".*$prompt $"	{ fail "show verbose (on)" }
	timeout			{ fail "(timeout) show verbose (on)" }
	}
d242 1
a242 7
send "set verbose off\n"
expect {
	-re "$prompt $"		{ pass "set verbose off" }
	-re ".*$prompt $"	{ fail "set verbose off" }
	timeout			{ fail "(timeout) set verbose off" }
	}

d244 1
a244 7
send "show verbose\n"
expect {
	-re "Verbosity is off..*$prompt $"\
				{ pass "show verbose (off)" }
	-re ".*$prompt $"	{ fail "show verbose (off)" }
	timeout			{ fail "(timeout) show verbose (off)" }
	}
@


1.1
log
@file setshow.exp was initially added on branch CYGNUS.
@
text
@d1 654
@


1.1.1.1
log
@GDB 6.1 (excluding .info files)
@
text
@a0 244
# Copyright 1992, 1994, 1996, 1997, 1998, 2001, 2003
# Free Software Foundation, Inc.

# This program is free software; you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation; either version 2 of the License, or
# (at your option) any later version.
# 
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
# 
# You should have received a copy of the GNU General Public License
# along with this program; if not, write to the Free Software
# Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA 02111-1307, USA.  

# Please email any bugs, comments, and/or additions to this file to:
# bug-gdb@@prep.ai.mit.edu

# This file was written by Michael Snyder (msnyder@@cygnus.com)

if $tracelevel then {
	strace $tracelevel
}

set prms_id 0
set bug_id 0

set testfile "setshow"
set srcfile ${testfile}.c
set binfile ${objdir}/${subdir}/${testfile}
if { [gdb_compile ${srcdir}/${subdir}/${srcfile} ${binfile} executable {debug}] != "" } {
     gdb_suppress_entire_file "Testcase compile failed, so all tests in this file will automatically fail."
}

# Start with a fresh gdb

gdb_exit
gdb_start
gdb_reinitialize_dir $srcdir/$subdir
gdb_load ${binfile}

# make sure $pc is sane, in case we're talking to a board.
if { ![runto_main] } {
    gdb_suppress_tests;
}

#
# Test gdb set and show commands.
# Add tests here for show and set that don't fit neatly elsewhere.
# FIXME: many rudimentary tests for set and show commands have been
#        added below, but most do nothing more than check that a 
#        variable has been set successfully, ie. they do not test
#        whether setting the variable has had the desired effect.
#

#test default annotation_level is 0
gdb_test "show annotate" "Annotation_level is 0..*"  "default annotation_level is zero"

#test set annotate 2
send_gdb "set annotate 2\n"
gdb_expect {
	-re ".*\032\032pre-prompt.*$gdb_prompt .*\032\032prompt.*$" \
				{ pass "set annotate 2" }
 	-re ".*$gdb_prompt $"	{ fail "set annotate 2" }
	timeout			{ fail "(timeout) set annotate 2" }
    }

send_gdb "show annotate\n"
gdb_expect {
	-re ".*\032\032post-prompt.*Annotation_level is 2..*\032\032pre-prompt.*$gdb_prompt .*\032\032prompt.*$" \
				{ pass "show annotate (2)" }
 	-re ".*$gdb_prompt $"	{ fail "show annotate (2)" }
	timeout			{ fail "(timeout) show annotate (2)" }
    }

#test annotation_level 2
send_gdb "info line 1\n"
gdb_expect {
	-re ".*\032\032post-prompt.*Line 1 of .* is at address .* but contains no code.*:1:0:beg:0x.*\032\032pre-prompt.*$gdb_prompt .*\032\032prompt.*$" \
				{ pass "annotation_level 2" }
	-re ".*$gdb_prompt $"	{ fail "annotation_level 2" }
	timeout			{ fail "(timeout) annotation_level 2" }
    }

#test set annotate 1
gdb_test "set annotate 1" ".*post-prompt.*"  "set annotate 1" 
gdb_test "show annotate" "Annotation_level is 1..*"  "show annotate (1)" 
#test annotation_level 1
gdb_test "info line 1" "Line 1 of .* is at address .* but contains no code.*:1:0:beg:0x.*"  "annotation_level 1" 
#test set annotate 0
gdb_test "set annotate 0" "" "set annotate 0" 
gdb_test "show annotate" "Annotation_level is 0..*"  "show annotate (0)" 
#test annotation_level 0
gdb_test "info line 1" "Line 1 of .* is at address .* but contains no code.*"  "annotation_level 0" 
#test set args
gdb_test "set args foo bar blup baz bubble" "" "set args" 
#test show args
gdb_test "show args" "Argument list to give program being debugged when it is started is \"foo bar blup baz bubble\"..*" "show args"

# Don't test if we can't pass args or if we're using a stub.
if { ![target_info exists use_gdb_stub] && ![target_info exists noargs] } {
    #test passing args
    gdb_test "cont" "Continuing.*" "continuing"
    delete_breakpoints
    gdb_test "run" "Starting program:.*foo bar blup baz bubble.*" "passing args"
}
#test set check range on
gdb_test "set check range on" "" "set check range on" 
#test show check range on
gdb_test "show check range" "Range checking is \"on\"\..*" "show check range (on)" 
#test set check range auto
gdb_test "set check range auto" "" "set check range auto" 
#test show check range auto
gdb_test "show check range" "Range checking is \"auto; currently .*" "show check range (auto)" 
#test set check type on
gdb_test "set check type on" "" "set check type on" 
#test show check type on
gdb_test "show check type" "Type checking is \"on\"..*" "show check type (on)" 
#test set check type auto
gdb_test "set check type auto" "" "set check type auto" 
#test show check type
gdb_test "show check type" "Type checking is \"auto; currently .*" "show check type (auto)" 
#test set complaints 100
gdb_test "set complaints 100" "" "set complaints 100" 
#test show complaints 100
gdb_test "show complaints" "Max number of complaints about incorrect symbols is 100..*" "show complaints (100)" 
#test set complaints 0
gdb_test "set complaints 0" "" "set complaints 0" 
#test show complaints 0
gdb_test "show complaints" "Max number of complaints about incorrect symbols is 0..*" "show complaints (0)" 
#test set confirm off
gdb_test "set confirm off" "" "set confirm off" 
#test show confirm off
gdb_test "show confirm" "Whether to confirm potentially dangerous operations is off..*" "show confirm (off)" 
#test set confirm on
gdb_test "set confirm on" "" "set confirm on" 
#test show confirm on
gdb_test "show confirm" "Whether to confirm potentially dangerous operations is on..*" "show confirm (on)" 
#test set editing off
gdb_test "set editing off" "" "set editing off" 
#test show editing off
gdb_test "show editing" "Editing of command lines as they are typed is off..*" "show editing (off)" 
#test set editing on
#gdb_test "set editing on" "" "set editing on" 
#test show editing on
#gdb_test "show editing" "Editing of command lines as they are typed is on..*" "show editing (on)" 
#test set environment FOOBARBAZ
gdb_test "set environment FOOBARBAZ = grbxgrbxgrbx" ""    "set environment FOOBARBAZ" 
#test show environment FOOBARBAZ
gdb_test "show environment FOOBARBAZ" "FOOBARBAZ = grbxgrbxgrbx.*"  "show environment FOOBARBAZ" 
#test set height 100
gdb_test "set height 100" "" "set height 100" 
#test show height 100
gdb_test "show height" "Number of lines gdb thinks are in a page is 100..*" "show height" 
#test set history expansion on
gdb_test "set history expansion on" "" "set history expansion on" 
#test show history expansion on
gdb_test "show history expansion on" "History expansion on command input is on.*" "show history expansion" 
#test set history filename foobar.baz
gdb_test "set history filename foobar.baz" ""    "set history filename foobar.baz" 
#test show history filename foobar.baz
gdb_test "show history filename" "The filename in which to record the command history is \"foobar.baz\"..*"  "show history filename (foobar.baz)" 
#test set history save on
gdb_test "set history save on" "" "set history save on" 
#test show history save on
gdb_test "show history save" "Saving of the history record on exit is on..*"  "show history save (on)" 
#test set history size 100
gdb_test "set history size 100" "" "set history size 100" 
#test show history size 100
gdb_test "show history size" "The size of the command history is 100..*" "show history size (100)" 
#test set language asm
gdb_test "set language asm" "" "set language asm" 
#test show language asm
gdb_test "show language" "The current source language is \"asm\"..*" "show language (asm)" 
#test set language auto
gdb_test "set language auto" "" "set language auto" 
#test show language
gdb_test "show language" "The current source language is \"auto.*\"..*" "show language (auto)" 
#test set listsize 100
gdb_test "set listsize 100" "" "set listsize 100" 
#test show listsize 100
gdb_test "show listsize" "Number of source lines gdb will list by default is 100..*" "show listsize (100)" 

if ![board_info target exists gdb_prompt] {
    #test set prompt (FooBarBaz) 
    set newprompt "\\(FooBarBaz\\)"
    send_gdb "set prompt (FooBarBaz) \n"
    gdb_expect {
	-re "$newprompt $"	{ pass "set prompt (FooBarBaz) " }
	timeout			{ fail "(timeout) set prompt (FooBarBaz) " }
    }

    #test show prompt (FooBarBaz) 
    send_gdb "show prompt\n"
    gdb_expect {
	-re "Gdb's prompt is \"$newprompt \"..* $" \
		{ pass "show prompt (FooBarBaz) " }
	timeout			{ fail "(timeout) show prompt (FooBarBaz) " }
    }

    #test set prompt (gdb) 
    send_gdb "set prompt (gdb) \n"
    gdb_expect {
	-re "$gdb_prompt $"		{ pass "set prompt (gdb) " }
	timeout			{ fail "(timeout) set prompt (gdb) " }
    }
}

#test set radix 11
gdb_test "set radix 11" "Unsupported output radix ``decimal 11''; output radix unchanged..*"  "set radix 11" 
#test set radix 16
gdb_test "set radix 16" "Input and output radices now set to decimal 16, hex 10, octal 20..*"  "set radix 16" 
#test show radix 16
gdb_test "show radix" "Input and output radices set to decimal 16, hex 10, octal 20..*"  "show radix (16)" 
#test set radix 10
gdb_test "set radix" "Input and output radices now set to decimal 10, hex a, octal 12..*"  "set radix 10" 
#test show radix 10
gdb_test "show radix" "Input and output radices set to decimal 10, hex a, octal 12..*" "show radix (10)" 
#test set width 90
gdb_test "set width 90" "" "set width 90"
#test show width 90
gdb_test "show width" "Number of characters gdb thinks are in a line is 90..*" "show width (90)" 
#test set write on
# This is only supported on targets which use exec.o.
gdb_test "set write on" ""  "set write on" 
#test show write on
# This is only supported on targets which use exec.o.
gdb_test "show write" "Writing into executable and core files is on..*" "show write (on)" 
#test set symbol-reloading on
gdb_test "set symbol-reloading on" "" "set symbol-reloading on" 
#test show symbol-reloading on
gdb_test "show symbol-reloading" "Dynamic symbol table reloading multiple times in one run is on..*" "show symbol-reloading (on)" 
#test show user
gdb_test "show user" "" "show user" 
#test set verbose on
gdb_test "set verbose on" "" "set verbose on" 
#test show verbose on
gdb_test "show verbose" "Verbose printing of informational messages is on..*" "show verbose (on)" 
#test set verbose off
gdb_test "set verbose off" "" "set verbose off" 
#test show verbose off
gdb_test "show verbose" "Verbosity is off..*" "show verbose (off)" 
@


1.1.2.1
log
@Import of 961112 Cygnus binutils+gas+ld+gdb+gprof
@
text
@a0 654
# Copyright (C) 1992, 1994 Free Software Foundation, Inc.

# This program is free software; you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation; either version 2 of the License, or
# (at your option) any later version.
# 
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
# 
# You should have received a copy of the GNU General Public License
# along with this program; if not, write to the Free Software
# Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA 02111-1307, USA.  */

# Please email any bugs, comments, and/or additions to this file to:
# bug-gdb@@prep.ai.mit.edu

# This file was written by Michael Snyder (msnyder@@cygnus.com)

if $tracelevel then {
	strace $tracelevel
}

set prms_id 0
set bug_id 0

set testfile "setshow"
set srcfile ${testfile}.c
set binfile ${objdir}/${subdir}/${testfile}
if  { [compile "${srcdir}/${subdir}/${srcfile} -g -o ${binfile}"] != "" } {
    perror "Couldn't compile ${srcfile}"
    return -1
}

# Start with a fresh gdb

gdb_exit
gdb_start
gdb_reinitialize_dir $srcdir/$subdir
gdb_load ${binfile}

#
# Test gdb set and show commands.
# Add tests here for show and set that don't fit neatly elsewhere.
# FIXME: many rudimentary tests for set and show commands have been
#        added below, but most do nothing more than check that a 
#        variable has been set successfully, ie. they do not test
#        whether setting the variable has had the desired effect.
#

#load_lib gdb.exp


#test default annotation_level is 0
send "show annotate\n"
expect {
	-re "Annotation_level is 0..*$prompt $" \
				{ pass "default annotation_level is zero" }
	-re ".*$prompt $"	{ fail "default annotation_level is zero" }
	timeout			{ fail "(timeout) default annotation_level is zero" }
	}

#test set annotate 2
send "set annotate 2\n"
expect {
	-re ".*\032\032pre-prompt.*$prompt .*\032\032prompt.*$" \
				{ pass "set annotate 2" }
 	-re ".*$prompt $"	{ fail "set annotate 2" }
	timeout			{ fail "(timeout) set annotate 2" }
	}

send "show annotate\n"
expect {
	-re ".*\032\032post-prompt.*Annotation_level is 2..*\032\032pre-prompt.*$prompt .*\032\032prompt.*$" \
				{ pass "show annotate (2)" }
 	-re ".*$prompt $"	{ fail "show annotate (2)" }
	timeout			{ fail "(timeout) show annotate (2)" }
	}

#test annotation_level 2
send "info line 1\n"
expect {
	-re ".*\032\032post-prompt.*Line 1 of .* is at address .* but contains no code.*:1:0:beg:0x.*\032\032pre-prompt.*$prompt .*\032\032prompt.*$" \
				{ pass "annotation_level 2" }
	-re ".*$prompt $"	{ fail "annotation_level 2" }
	timeout			{ fail "(timeout) annotation_level 2" }
	}

#test set annotate 1
send "set annotate 1\n"
expect {
	-re ".*post-prompt.*$prompt $" \
				{ pass "set annotate 1" }
	-re ".*$prompt $"	{ fail "set annotate 1" }
	timeout			{ fail "(timeout) set annotate 1" }
	}

send "show annotate\n"
expect {
	-re "Annotation_level is 1..*$prompt $" \
				{ pass "show annotate (1)" }
	-re ".*$prompt $"	{ fail "show annotate (1)" }
	timeout			{ fail "(timeout) show annotate (1)" }
	}

#test annotation_level 1
send "info line 1\n"
expect {
	-re "Line 1 of .* is at address .* but contains no code.*:1:0:beg:0x.*$prompt $" \
				{ pass "annotation_level 1" }
	-re ".*$prompt $"	{ fail "annotation_level 1" }
	timeout			{ fail "(timeout) annotation_level 1" }
	}

#test set annotate 0
send "set annotate 0\n"
expect {
	-re "$prompt $"	{ pass "set annotate 0" }
	-re ".*$prompt $"	{ fail "set annotate 0" }
	timeout			{ fail "(timeout) set annotate 0" }
	}

send "show annotate\n"
expect {
	-re "Annotation_level is 0..*$prompt $" \
				{ pass "show annotate (0)" }
	-re ".*$prompt $"	{ fail "show annotate (0)" }
	timeout			{ fail "(timeout) show annotate (1)" }
	}

#test annotation_level 0
send "info line 1\n"
expect {
	-re "Line 1 of .* is at address .* but contains no code.*$prompt $" \
				{ pass "annotation_level 0" }
	-re ".*$prompt $"	{ fail "annotation_level 0" }
	timeout			{ fail "(timeout) annotation_level 0" }
	}

#test set args
send "set args foo bar blup baz bubble\n"
expect {
	-re "$prompt $"		{ pass "set args" }
	-re ".*$prompt $"	{ fail "set args" }
	timeout			{ fail "(timeout) set args" }
	}

#test show args
send "show args\n"
expect {
	-re "Arguments to give program being debugged when it is started is \"foo bar blup baz bubble\"..*$prompt $"\
				{ pass "show args" }
	-re ".*$prompt $"	{ fail "show args" }
	timeout			{ fail "(timeout) show args" }
	}

#test passing args
send "run\n"
expect {
	-re "Starting program:.*foo bar blup baz bubble.*$prompt $"
				{ pass "passing args" }
	-re ".*$prompt $"	{ fail "passing args" }
	timeout			{ fail "(timeout) passing args" }
}

#test set check range on
send "set check range on\n"
expect {
	-re "$prompt $"		{ pass "set check range on" }
	-re ".*$prompt $"	{ fail "set check range on" }
	timeout			{ fail "(timeout) set check range on" }
	}

#test show check range on
send "show check range\n"
expect {
	-re "Range checking is \"on\"\..*$prompt $"\
				{ pass "show check range (on)" }
	-re ".*$prompt $"	{ fail "show check range (on)" }
	timeout			{ fail "(timeout) show check range (on)" }
	}

#test set check range auto
send "set check range auto\n"
expect {
	-re "$prompt $"		{ pass "set check range auto" }
	-re ".*$prompt $"	{ fail "set check range auto" }
	timeout			{ fail "(timeout) set check range auto" }
	}

#test show check range auto
send "show check range\n"
expect {
	-re "Range checking is \"auto; currently .*$prompt $"\
				{ pass "show check range (auto)" }
	-re ".*$prompt $"	{ fail "show check range (auto)" }
	timeout			{ fail "(timeout) show check range (auto)" }
	}

#test set check type on
send "set check type on\n"
expect {
	-re "$prompt $"		{ pass "set check type on" }
	-re ".*$prompt $"	{ fail "set check type on" }
	timeout			{ fail "(timeout) set check type on" }
	}

#test show check type on
send "show check type\n"
expect {
	-re "Type checking is \"on\"..*$prompt $"\
				{ pass "show check type (on)" }
	-re ".*$prompt $"	{ fail "show check type (on)" }
	timeout			{ fail "(timeout) show check type (on)" }
	}

#test set check type auto
send "set check type auto\n"
expect {
	-re "$prompt $"		{ pass "set check type auto" }
	-re ".*$prompt $"	{ fail "set check type auto" }
	timeout			{ fail "(timeout) set check type auto" }
	}

#test show check type
send "show check type\n"
expect {
	-re "Type checking is \"auto; currently .*$prompt $"\
				{ pass "show check type (auto)" }
	-re ".*$prompt $"	{ fail "show check type (auto)" }
	timeout			{ fail "(timeout) show check type (auto)" }
	}

#test set complaints 100
send "set complaints 100\n"
expect {
	-re "$prompt $"		{ pass "set complaints 100" }
	-re ".*$prompt $"	{ fail "set complaints 100" }
	timeout			{ fail "(timeout) set complaints 100" }
	}

#test show complaints 100
send "show complaints\n"
expect {
	-re "Max number of complaints about incorrect symbols is 100..*$prompt $"\
				{ pass "show complaints (100)" }
	-re ".*$prompt $"	{ fail "show complaints (100)" }
	timeout			{ fail "(timeout) show complaints (100)" }
	}

#test set complaints 0
send "set complaints 0\n"
expect {
	-re "$prompt $"		{ pass "set complaints 0" }
	-re ".*$prompt $"	{ fail "set complaints 0" }
	timeout			{ fail "(timeout) set complaints 0" }
	}

#test show complaints 0
send "show complaints\n"
expect {
	-re "Max number of complaints about incorrect symbols is 0..*$prompt $"\
				{ pass "show complaints (0)" }
	-re ".*$prompt $"	{ fail "show complaints (0)" }
	timeout			{ fail "(timeout) show complaints (0)" }
	}

#test set confirm off
send "set confirm off\n"
expect {
	-re "$prompt $"		{ pass "set confirm off" }
	-re ".*$prompt $"	{ fail "set confirm off" }
	timeout			{ fail "(timeout) set confirm off" }
	}

#test show confirm off
send "show confirm\n"
expect {
	-re "Whether to confirm potentially dangerous operations is off..*$prompt $"\
				{ pass "show confirm (off)" }
	-re ".*$prompt $"	{ fail "show confirm (off)" }
	timeout			{ fail "(timeout) show confirm (off)" }
	}

#test set confirm on
send "set confirm on\n"
expect {
	-re "$prompt $"		{ pass "set confirm on" }
	-re ".*$prompt $"	{ fail "set confirm on" }
	timeout			{ fail "(timeout) set confirm on" }
	}

#test show confirm on
send "show confirm\n"
expect {
	-re "Whether to confirm potentially dangerous operations is on..*$prompt $"\
				{ pass "show confirm (on)" }
	-re ".*$prompt $"	{ fail "show confirm (on)" }
	timeout			{ fail "(timeout) show confirm (on)" }
	}

#test set editing off
send "set editing off\n"
expect {
	-re "$prompt $"		{ pass "set editing off" }
	-re ".*$prompt $"	{ fail "set editing off" }
	timeout			{ fail "(timeout) set editing off" }
	}

#test show editing off
send "show editing\n"
expect {
	-re "Editing of command lines as they are typed is off..*$prompt $"\
				{ pass "show editing (off)" }
	-re ".*$prompt $"	{ fail "show editing (off)" }
	timeout			{ fail "(timeout) show editing (off)" }
	}

#test set editing on
send "set editing on\n"
expect {
	-re "$prompt $"		{ pass "set editing on" }
	-re ".*$prompt $"	{ fail "set editing on" }
	timeout			{ fail "(timeout) set editing on" }
	}

#test show editing on
send "show editing\n"
expect {
	-re "Editing of command lines as they are typed is on..*$prompt $"\
				{ pass "show editing (on)" }
	-re ".*$prompt $"	{ fail "show editing (on)" }
	timeout			{ fail "(timeout) show editing (on)" }
	}

#test set environment FOOBARBAZ
send "set environment FOOBARBAZ = grbxgrbxgrbx\n"
expect {
	-re "$prompt $"	   { pass "set environment FOOBARBAZ" }
	-re ".*$prompt $"  { fail "set environment FOOBARBAZ" }
	timeout		   { fail "(timeout) set environment FOOBARBAZ" }
	}

#test show environment FOOBARBAZ
send "show environment FOOBARBAZ\n"
expect {
	-re "FOOBARBAZ = grbxgrbxgrbx.*$prompt $" { pass "show environment FOOBARBAZ" }
	-re ".*$prompt $"                         { fail "show environment FOOBARBAZ" }
	timeout                                   { fail "(timeout) show environment FOOBARBAZ" }
	}

#test set height 100
send "set height 100\n"
expect {
	-re "$prompt $"	{ pass "set height 100" }
	-re ".*$prompt $"	{ pass "set height 100" }
	timeout		{ fail "(timeout) set height 100" }
	}

#test show height 100
send "show height\n"
expect {
	-re "Number of lines gdb thinks are in a page is 100..*$prompt $"\
			{ pass "show height" }
	-re ".*$prompt $"	{ fail "show height" }
	timeout		{ fail "(timeout) show height" }
	}

#test set history expansion on
send "set history expansion on\n"
expect {
	-re "$prompt $"		{ pass "set history expansion on" }
	-re ".*$prompt $"	{ fail "set hitsory expansion on" }
	timeout			{ fail "(timeout) set history expansion" }
	}

#test show history expansion on
send "show history expansion on\n"
expect {
	-re "History expansion on command input is on.*$prompt $"\
				{ pass "show history expansion" }
	-re ".*$prompt $"	{ fail "show history expansion" }
	timeout			{ fail "(timeout) show history expansion" }
	}

#test set history filename foobar.baz
send "set history filename foobar.baz\n"
expect {
	-re "$prompt $"   { pass "set history filename foobar.baz" }
	-re ".*$prompt $" { fail "set history filename foobar.baz" }
	timeout	          { fail "(timeout) set history filename foobar.baz" }
    }

#test show history filename foobar.baz
send "show history filename\n"
expect {
	-re "The filename in which to record the command history is \"foobar.baz\"..*$prompt $" \
				{ pass "show history filename (foobar.baz)" }
	-re ".*$prompt $"	{ fail "show history filename (foobar.baz)" }
	timeout			{ fail "(timeout) show history filename (foobar.baz)" }
	}

#test set history save on
send "set history save on\n"
expect {
	-re "$prompt $"		{ pass "set history save on" }
	-re ".*$prompt $" 	{ fail "set history save on" }
	timeout			{ fail "(timeout) set history save on" }
	}

#test show history save on
send "show history save\n"
expect {
	-re "Saving of the history record on exit is on..*$prompt $" 
				{ pass "show history save (on)" }
	-re ".*$prompt $"	{ fail "show history save (on)" }
	timeout			{ fail "(timeout) show history save" }
	}

#test set history size 100
send "set history size 100\n"
expect {
	-re "$prompt $"		{ pass "set history size 100" }
	-re ".*$prompt $"	{ fail "set history size 100" }
	timeout			{ fail "(timeout) set history size 100" }
	}

#test show history size 100
send "show history size\n"
expect {
	-re "The size of the command history is 100..*$prompt $"\
				{ pass "show history size (100)" }
	-re ".*$prompt $"	{ fail "show history size (100)" }
	timeout			{ fail "(timeout) show history size (100)" }
	}

#test set language asm
send "set language asm\n"
expect {
	-re "$prompt $"		{ pass "set language asm" }
	-re ".*$prompt $"	{ fail "set language asm" }
	timeout			{ fail "(timeout) set language asm" }
	}

#test show language asm
send "show language\n"
expect {
	-re "The current source language is \"asm\"..*$prompt $"\
				{ pass "show language (asm)" }
	-re ".*$prompt $"	{ fail "show language (asm)" }
	timeout			{ fail "(timeout) show language (asm)" }
	}

#test set language auto
send "set language auto\n"
expect {
	-re "$prompt $"		{ pass "set language auto" }
	-re ".*$prompt $"	{ fail "set language auto" }
	timeout			{ fail "(timeout) set language auto" }
	}

#test show language
send "show language\n"
expect {
	-re "The current source language is \"auto\"..*$prompt $"\
				{ pass "show language (auto)" }
	-re ".*$prompt $"	{ fail "show language (auto)" }
	timeout			{ fail "(timeout) show language (auto)" }
	}

#test set listsize 100
send "set listsize 100\n"
expect {
	-re "$prompt $"		{ pass "set listsize 100" }
	-re ".*$prompt $"	{ fail "set listsize 100" }
	timeout			{ fail "(timeout) set listsize 100" }
	}

#test show listsize 100
send "show listsize\n"
expect {
	-re "Number of source lines gdb will list by default is 100..*$prompt $"\
				{ pass "show listsize (100)" }
	-re ".*$prompt $"	{ fail "show listsize (100)" }
	timeout			{ fail "(timeout) show listsize (100)" }
	}

#test set prompt (FooBarBaz) 
set newprompt "\\(FooBarBaz\\)"
send "set prompt (FooBarBaz) \n"
expect {
	-re "$newprompt $"	{ pass "set prompt (FooBarBaz) " }
	timeout			{ fail "(timeout) set prompt (FooBarBaz) " }
	}

#test show prompt (FooBarBaz) 
send "show prompt\n"
expect {
	-re "Gdb's prompt is \"$newprompt \"..* $" \
				{ pass "show prompt (FooBarBaz) " }
	timeout			{ fail "(timeout) show prompt (FooBarBaz) " }
	}

#test set prompt (gdb) 
send "set prompt (gdb) \n"
expect {
	-re "$prompt $"		{ pass "set prompt (gdb) " }
	timeout			{ fail "(timeout) set prompt (gdb) " }
	}

#test set radix 11
send "set radix 11\n"
expect {
	-re "Unsupported output radix ``decimal 11''; output radix unchanged..*$prompt $" \
				{ pass "set radix 11" }
	timeout			{ fail "(timeout) set radix 11" }
	}

#test set radix 16
send "set radix 16\n"
expect {
	-re "Input and output radices now set to decimal 16, hex 10, octal 20..*$prompt $" \
				{ pass "set radix 16" }
	timeout			{ fail "(timeout) set radix 16" }
	}

#test show radix 16
send "show radix\n"
expect {
        -re "Input and output radices set to decimal 16, hex 10, octal 20..*$prompt $" \
				{ pass "show radix (16)" }
	timeout			{ fail "(timeout) show radix (16)" }
	}

#test set radix 10
send "set radix\n"
expect {
	-re "Input and output radices now set to decimal 10, hex a, octal 12..*$prompt $" \
				{ pass "set radix 10" }
	timeout			{ fail "(timeout) set radix 10" }
	}

#test show radix 10
send "show radix\n"
expect {
        -re "Input and output radices set to decimal 10, hex a, octal 12..*$prompt $"\
				{ pass "show radix (10)" }
	-re "Default input and output number radix is 10..*$prompt $"\
				{ fail "show radix (obsolete radix support)" }
	-re ".*$prompt $"	{ fail "show radix (10)" }
	timeout			{ fail "(timeout) show radix (10)" }
	}

#test set width 90
send "set width 90\n"
expect {
	-re "$prompt $"		{ pass "set width 90" }
	-re ".*$prompt $"	{ fail "set width 90" }
	timeout			{ fail "(timeout) set width 90" }
	}

#test show width 90
send "show width\n"
expect {
	-re "Number of characters gdb thinks are in a line is 90..*$prompt $"\
				{ pass "show width (90)" }
	-re ".*$prompt $"	{ fail "show width (90)" }
	timeout		{ fail "(timeout) show width (90)" }
	}

#test set write on
# This is only supported on targets which use exec.o.
if ![istarget "rs6000-*-*"] then {
    send "set write on\n"
    expect {
	-re "$prompt $" 	{ pass "set write on" }
	-re ".*$prompt $" 	{ fail "set write on" }
	timeout			{ fail "(timeout) set write on" }
	}
}

#test show write on
# This is only supported on targets which use exec.o.
if ![istarget "rs6000-*-*"] then {
    send "show write\n"
    expect {
	-re "Writing into executable and core files is on..*$prompt $"\
				{ pass "show write (on)" }
	-re ".*$prompt $"	{ fail "show write (on)" }
	timeout		{ fail "(timeout) show write (on)" }
	}
}
gdb_test "set write off" ""

#test set symbol-reloading on
send "set symbol-reloading on\n"
expect {
	-re "$prompt $"		{ pass "set symbol-reloading on" }
	-re ".*$prompt $"	{ fail "set symbol-reloading on" }
	timeout			{ fail "(timeout) set symbol-reloading on" }
	}

#test show symbol-reloading on
send "show symbol-reloading\n"
expect {
	-re "Dynamic symbol table reloading multiple times in one run is on..*$prompt $"\
				{ pass "show symbol-reloading (on)" }
	-re ".*$prompt $"	{ fail "show symbol-reloading (on)" }
	timeout			{ fail "(timeout) show symbol-reloading (on)" }
	}


#test show user
send "show user\n"
expect {
	-re "$prompt $"		{ pass "show user" }
	-re ".*$prompt $"	{ fail "show user" }
	timeout			{ fail "(timeout) show user" }
	}

#test set verbose on
send "set verbose on\n"
expect {
	-re "$prompt $"		{ pass "set verbose on" }
	-re ".*$prompt $"	{ fail "set verbose on" }
	timeout			{ fail "(timeout) set verbose on" }
	}

#test show verbose on
send "show verbose\n"
expect {
	-re "Verbose printing of informational messages is on..*$prompt $"\
				{ pass "show verbose (on)" }
	-re ".*$prompt $"	{ fail "show verbose (on)" }
	timeout			{ fail "(timeout) show verbose (on)" }
	}
#test set verbose off
send "set verbose off\n"
expect {
	-re "$prompt $"		{ pass "set verbose off" }
	-re ".*$prompt $"	{ fail "set verbose off" }
	timeout			{ fail "(timeout) set verbose off" }
	}

#test show verbose off
send "show verbose\n"
expect {
	-re "Verbosity is off..*$prompt $"\
				{ pass "show verbose (off)" }
	-re ".*$prompt $"	{ fail "show verbose (off)" }
	timeout			{ fail "(timeout) show verbose (off)" }
	}
@
