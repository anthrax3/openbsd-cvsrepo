head	1.3;
access;
symbols
	OPENBSD_6_0:1.3.0.50
	OPENBSD_6_0_BASE:1.3
	OPENBSD_5_9:1.3.0.46
	OPENBSD_5_9_BASE:1.3
	OPENBSD_5_8:1.3.0.48
	OPENBSD_5_8_BASE:1.3
	OPENBSD_5_7:1.3.0.40
	OPENBSD_5_7_BASE:1.3
	OPENBSD_5_6:1.3.0.44
	OPENBSD_5_6_BASE:1.3
	OPENBSD_5_5:1.3.0.42
	OPENBSD_5_5_BASE:1.3
	OPENBSD_5_4:1.3.0.38
	OPENBSD_5_4_BASE:1.3
	OPENBSD_5_3:1.3.0.36
	OPENBSD_5_3_BASE:1.3
	OPENBSD_5_2:1.3.0.34
	OPENBSD_5_2_BASE:1.3
	OPENBSD_5_1_BASE:1.3
	OPENBSD_5_1:1.3.0.32
	OPENBSD_5_0:1.3.0.30
	OPENBSD_5_0_BASE:1.3
	OPENBSD_4_9:1.3.0.28
	OPENBSD_4_9_BASE:1.3
	OPENBSD_4_8:1.3.0.26
	OPENBSD_4_8_BASE:1.3
	OPENBSD_4_7:1.3.0.22
	OPENBSD_4_7_BASE:1.3
	OPENBSD_4_6:1.3.0.24
	OPENBSD_4_6_BASE:1.3
	OPENBSD_4_5:1.3.0.20
	OPENBSD_4_5_BASE:1.3
	OPENBSD_4_4:1.3.0.18
	OPENBSD_4_4_BASE:1.3
	OPENBSD_4_3:1.3.0.16
	OPENBSD_4_3_BASE:1.3
	OPENBSD_4_2:1.3.0.14
	OPENBSD_4_2_BASE:1.3
	OPENBSD_4_1:1.3.0.12
	OPENBSD_4_1_BASE:1.3
	OPENBSD_4_0:1.3.0.10
	OPENBSD_4_0_BASE:1.3
	OPENBSD_3_9:1.3.0.8
	OPENBSD_3_9_BASE:1.3
	OPENBSD_3_8:1.3.0.6
	OPENBSD_3_8_BASE:1.3
	OPENBSD_3_7:1.3.0.4
	OPENBSD_3_7_BASE:1.3
	GDB_6_3:1.1.1.1
	OPENBSD_3_6:1.3.0.2
	OPENBSD_3_6_BASE:1.3
	GDB_6_1:1.1.1.1
	FSF:1.1.1
	OPENBSD_3_5:1.2.0.32
	OPENBSD_3_5_BASE:1.2
	OPENBSD_3_4:1.2.0.30
	OPENBSD_3_4_BASE:1.2
	OPENBSD_3_3:1.2.0.28
	OPENBSD_3_3_BASE:1.2
	OPENBSD_3_2:1.2.0.26
	OPENBSD_3_2_BASE:1.2
	OPENBSD_3_1:1.2.0.24
	OPENBSD_3_1_BASE:1.2
	OPENBSD_3_0:1.2.0.22
	OPENBSD_3_0_BASE:1.2
	OPENBSD_2_9:1.2.0.20
	OPENBSD_2_9_BASE:1.2
	OPENBSD_2_8:1.2.0.18
	OPENBSD_2_8_BASE:1.2
	OPENBSD_2_7:1.2.0.16
	OPENBSD_2_7_BASE:1.2
	new-binutils:1.2.0.14
	OPENBSD_2_6:1.2.0.12
	OPENBSD_2_6_BASE:1.2
	OPENBSD_2_5:1.2.0.10
	OPENBSD_2_5_BASE:1.2
	OPENBSD_2_4:1.2.0.8
	OPENBSD_2_4_BASE:1.2
	OPENBSD_2_3:1.2.0.6
	OPENBSD_2_3_BASE:1.2
	OPENBSD_2_2:1.2.0.4
	OPENBSD_2_2_BASE:1.2
	OPENBSD_2_1:1.2.0.2
	OPENBSD_2_1_BASE:1.2
	CYGNUS-961112:1.1.2.1
	CYGNUS:1.1.0.2;
locks; strict;
comment	@# @;


1.3
date	2004.05.21.20.23.39;	author kettenis;	state Exp;
branches;
next	1.2;

1.2
date	96.11.23.03.50.00;	author niklas;	state Exp;
branches;
next	1.1;

1.1
date	96.11.19.14.35.14;	author niklas;	state dead;
branches
	1.1.1.1
	1.1.2.1;
next	;

1.1.1.1
date	2004.05.21.19.16.43;	author kettenis;	state Exp;
branches;
next	;

1.1.2.1
date	96.11.19.14.35.14;	author niklas;	state Exp;
branches;
next	;


desc
@@


1.3
log
@Resolve conflicts for GDB 6.1.  Add local patches.
ok deraadt@@
@
text
@# Copyright 1992, 1994, 1995, 1996, 1997, 1998, 1999, 2002, 2003
# Free Software Foundation, Inc.

# This program is free software; you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation; either version 2 of the License, or
# (at your option) any later version.
# 
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
# 
# You should have received a copy of the GNU General Public License
# along with this program; if not, write to the Free Software
# Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA 02111-1307, USA.  

# Please email any bugs, comments, and/or additions to this file to:
# bug-gdb@@prep.ai.mit.edu

# This file was written by Fred Fish. (fnf@@cygnus.com)

if $tracelevel then {
	strace $tracelevel
}

set prms_id 0
set bug_id 0

set testfile "list"
set binfile ${objdir}/${subdir}/${testfile}

# Need to download the header to the host.
remote_download host ${srcdir}/${subdir}/list0.h list0.h


if  { [gdb_compile "${srcdir}/${subdir}/list0.c" "${binfile}0.o" object {debug}] != "" } {
     gdb_suppress_entire_file "Testcase compile failed, so all tests in this file will automatically fail."
}

if  { [gdb_compile "${srcdir}/${subdir}/list1.c" "${binfile}1.o" object {debug}] != "" } {
     gdb_suppress_entire_file "Testcase compile failed, so all tests in this file will automatically fail."
}

if  { [gdb_compile "${binfile}0.o ${binfile}1.o" ${binfile} executable {debug}] != "" } {
     gdb_suppress_entire_file "Testcase compile failed, so all tests in this file will automatically fail."
}



# Create and source the file that provides information about the compiler
# used to compile the test case.
if [get_compiler_info ${binfile}] {
    return -1;
}

#
# Local utility proc just to set and verify listsize
# Return 1 if success, 0 if fail.
#

set set_listsize_count 0;

proc set_listsize { arg } {
    global gdb_prompt
    global set_listsize_count;

    incr set_listsize_count;
    if [gdb_test "set listsize $arg" "" "setting listsize to $arg #$set_listsize_count"] {
	return 0;
    }
    if { $arg <= 0 } {
	set arg "unlimited";
    }

    if [gdb_test "show listsize" "Number of source lines.* is ${arg}.*" "show listsize $arg #$set_listsize_count"] {
	return 0;
    }
    return 1
}

#
# Test display of listsize lines around a given line number.
#

proc test_listsize {} {
    global gdb_prompt
    global hp_cc_compiler
    global hp_aCC_compiler

    # Show default size

    gdb_test "show listsize" "Number of source lines gdb will list by default is 10.*" "show default list size"
    
    # Show the default lines
    # Note that remote targets that have debugging info for _start available will
    # list the lines there instead of main, so we skip this test for remote targets.
    # The second case is for optimized code, it is still correct.
    
    if [is_remote target] {
	runto_main;
	unsupported "list default lines around main";
    } else {
	gdb_test "list" "(1\[ \t\]+#include \"list0.h\".*10\[ \t\]+x = 0;|2.*11\[ \t\]+foo .x\[+)\]+;)" "list default lines around main"
    }

    # Ensure we can limit printouts to one line

    if [set_listsize 1] {
	gdb_test "list 1" "1\[ \t\]+#include \"list0.h\"" "list line 1 with listsize 1"
	gdb_test "list 2" "2\[ \t\]+" "list line 2 with listsize 1"
    }    

    # Try just two lines
    
    if [ set_listsize 2 ] {
	gdb_test "list 1" "1\[ \t\]+#include \"list0.h\"\r\n2\[ \t\]+" "list line 1 with listsize 2"
	gdb_test "list 2" "1\[ \t\]+#include \"list0.h\"\r\n2\[ \t\]+" "list line 2 with listsize 2"
	gdb_test "list 3" "2\[ \t\]+\r\n3\[ \t\]+int main \[)(\]+" "list line 3 with listsize 2"
    }

    # Try small listsize > 1 that is an odd number

    if [ set_listsize 3 ] {
	gdb_test "list 1" "1\[ \t\]+#include \"list0.h\".*3\[ \t\]+int main \[)(\]+" "list line 1 with listsize 3"
	gdb_test "list 2" "1\[ \t\]+#include \"list0.h\".*3\[ \t\]+int main \[)(\]+" "list line 2 with listsize 3"
	gdb_test "list 3" "2\[ \t\]+\r\n3\[ \t\]+int main \[(\]+\[)\]+\r\n4\[ \t\]+\{" "list line 3 with listsize 3"
    }

    # Try small listsize > 2 that is an even number.

    if [ set_listsize 4 ] then {
	gdb_test "list 1" "1\[ \t\]+#include \"list0.h\".*4\[ \t\]+\{" "list line 1 with listsize 4"
	gdb_test "list 2" "1\[ \t\]+#include \"list0.h\".*4\[ \t\]+\{" "list line 2 with listsize 4"
	
	gdb_test "list 3" "1\[ \t\]+#include \"list0.h\".*4\[ \t\]+\{" "list line 3 with listsize 4"
	gdb_test "list 4" "2\[ \t\]+\r\n.*5\[ \t\]+int x;.*" "list line 4 with listsize 4"
    }

    # Try a size larger than the entire file.

    if [ set_listsize 100 ] then {
	gdb_test "list 1" "1\[ \t\]+#include \"list0.h\".*\r\n4\[23\]\[ \t\]+\}" "list line 1 with listsize 100"
	
	gdb_test "list 10" "1\[ \t\]+#include \"list0.h\".*\r\n4\[23\]\[ \t\]+\}" "list line 10 with listsize 100"
    }

    # Try listsize of 0 which suppresses printing.

    set_listsize 0
    gdb_test "list 1" "" "listsize of 0 suppresses output"

    # Try listsize of -1 which is special, and means unlimited.

    set_listsize -1
    setup_xfail "*-*-*"
    gdb_test "list 1" "1\[ \t\]+#include .*\r\n39\[ \t\]+\}" "list line 1 with unlimited listsize"
}

#
# Test "list filename:number" for C include file
#

proc test_list_include_file {} {
    global gdb_prompt

    setup_xfail_format "COFF"
    gdb_test "list list0.h:1" "1\[ \t\]+/\[*\]+ An include file .*10\[ \t\]+bar \\(x\\+\\+\\);" "list line 1 in include file"

    setup_xfail_format "COFF"
    gdb_test "list list0.h:100" "Line number 95 out of range; .*list0.h has 3\[67\] lines." "list message for lines past EOF"
}

#
# Test "list filename:number" for C source file
#

proc test_list_filename_and_number {} {
    global gdb_prompt

    set testcnt 0

    send_gdb "list list0.c:1\n"
    gdb_expect {
	-re "1\[ \t\]+#include \"list0.h\".*10\[ \t]+x = 0;\r\n$gdb_prompt $" {
	    incr testcnt 
	}
	-re ".*$gdb_prompt $" { fail "list list0.c:1" ; gdb_suppress_tests }
	timeout { fail "list list0.c:1 (timeout)" ; gdb_suppress_tests }
    }
    send_gdb "list list0.c:10\n"
    gdb_expect {
	-re "5\[ \t\]+int x;.*14\[ \t\]+foo .x\[+)\]+;\r\n$gdb_prompt $" {
	    incr testcnt 
	}
	-re ".*$gdb_prompt $" { fail "list list.c:10" ; gdb_suppress_tests }
	timeout { fail "list list.c:10 (timeout)" ; gdb_suppress_tests }
    }
    send_gdb "list list1.c:1\n"
    gdb_expect {
	-re "1\[ \t\]+\#include.*4\[ \t\]+.*int oof\[ \t\]*\(.*\);\r\n.*$gdb_prompt $" {
	    incr testcnt 
	}
	-re ".*$gdb_prompt $" { fail "list list1.c:1" ; gdb_suppress_tests }
	timeout { fail "list list1.c:1 (timeout)" ; gdb_suppress_tests }
    }
    send_gdb "list list1.c:12\n"
    gdb_expect {
	-re "12\[ \t\]+long_line \[(\]+.*\[)\]+;.*13\[ \t\]+\}\r\n.*$gdb_prompt $" {
	    incr testcnt 
	}
	-re ".*$gdb_prompt $" { fail "list list1.c:12" ; gdb_suppress_tests }
	timeout { fail "list list1.c:12 (timeout)" ; gdb_suppress_tests }
    }
    pass "list filename:number ($testcnt tests)"
    gdb_stop_suppressing_tests;
}

#
# Test "list function" for C source file
#

proc test_list_function {} {
    global gdb_prompt

    # gcc appears to generate incorrect debugging information for code
    # in include files, which breaks this test.
    # SunPRO cc is the second case below, it's also correct.
    gdb_test "list main" "(5\[ \t\]+int x;.*14\[ \t\]+foo \[(\]+.*\[)\]+;|1\[ \t\]+#include .*10\[ \t\]+x = 0;)" "list function in source file 1"

    # Ultrix gdb takes the second case below; it's also correct.
    # SunPRO cc is the third case.
    gdb_test "list bar" "(4\[ \t\]+void.*\[ \t\]*long_line.*;.*bar.*9\[ \t\]*.*|1\[ \t\]+void.*8\[ \t\]+\}|1\[ \t\]+void.*7\[ \t\]*long_line ..;|7\[ \t\]+void.*14\[ \t\]+\})" "list function in source file 2"

    # Test "list function" for C include file
    # Ultrix gdb is the second case, still correct.
    # SunPRO cc is the third case.
    setup_xfail "powerpc-*-*"
    gdb_test "list foo" "(3\[ \t\]+.*12\[ \t\]+bar \[(\]+.*\[)\]+;|2\[ \t\]+including file.*11\[ \t\]+bar \[(\]+.*\[)\]+;|1\[ \t\]+/. An include file.*10\[ \t\]+bar \[(\]+.*\[)\]+;)" "list function in include file"
}

proc test_list_forward {} {
    global gdb_prompt

    set testcnt 0

    send_gdb "list list0.c:10\n"
    gdb_expect {
	-re "5\[ \t\]+int x;.*14\[ \t\]+foo \[(\]+.*\[)\]+;\r\n$gdb_prompt $" { incr testcnt }
	-re ".*$gdb_prompt $" { fail "list list0.c:10" ; gdb_suppress_tests }
	timeout { fail "list list0.c:10 (timeout)" ; gdb_suppress_tests }
    }

    send_gdb "list\n"
    gdb_expect {
	-re "15\[ \t\]+foo \[(\]+.*\[)\]+;.*24\[ \t\]+foo \[(\]+.*\[)\]+;\r\n$gdb_prompt $" { incr testcnt }
	-re ".*$gdb_prompt $" { fail "list 15-24" ; gdb_suppress_tests }
	timeout { fail "list 15-24 (timeout)" ; gdb_suppress_tests }
    }

    send_gdb "list\n"
    gdb_expect {
	-re "25\[ \t\]+foo \[(\]+.*\[)\]+;.*34\[ \t\]+foo \[(\]+.*\[)\]+;\r\n$gdb_prompt $" { incr testcnt }
	-re ".*$gdb_prompt $" { fail "list 25-34" ; gdb_suppress_tests }
	timeout { fail "list 25-34 (timeout)" ; gdb_suppress_tests }
    }

    send_gdb "list\n"
    gdb_expect {
	-re "35\[ \t\]+foo \\(.*\\);.*42\[ \t\]+.*\}\r\n$gdb_prompt $" { incr testcnt }
	-re ".*$gdb_prompt $" { fail "list 35-42" ; gdb_suppress_tests }
	timeout { fail "list 35-42 (timeout)" ; gdb_suppress_tests }
    }

    pass "successive list commands to page forward ($testcnt tests)"
    gdb_stop_suppressing_tests;
}

# Test that repeating the list linenum command doesn't print the same
# lines over again.  Note that this test makes sure that the argument
# linenum is dropped, when we repeat the previous command. 'x/5i $pc'
# works the same way.  

proc test_repeat_list_command {} {
    global gdb_prompt

    set testcnt 0

    send_gdb "list list0.c:10\n"
    gdb_expect {
	-re "5\[ \t\]+int x;.*14\[ \t\]+foo \[(\]+.*\[)\]+;\r\n$gdb_prompt $" { incr testcnt }
	-re ".*$gdb_prompt $" { fail "list list0.c:10" ; gdb_suppress_tests }
	timeout { fail "list list0.c:10 (timeout)" ; gdb_suppress_tests }
    }

    send_gdb "\n"
    gdb_expect {
	-re "15\[ \t\]+foo \[(\]+.*\[)\]+;.*24\[ \t\]+foo \[(\]+.*\[)\]+;\r\n$gdb_prompt $" { incr testcnt }
	-re ".*$gdb_prompt $" { fail "list 15-24" ; gdb_suppress_tests }
	timeout { fail "list 15-24 (timeout)" ; gdb_suppress_tests }
    }

    send_gdb "\n"
    gdb_expect {
	-re "25\[ \t\]+foo \[(\]+.*\[)\]+;.*34\[ \t\]+foo \[(\]+.*\[)\]+;\r\n$gdb_prompt $" { incr testcnt }
	-re ".*$gdb_prompt $" { fail "list 25-34" ; gdb_suppress_tests }
	timeout { fail "list 25-34 (timeout)" ; gdb_suppress_tests }
    }

    send_gdb "\n"
    gdb_expect {
	-re "35\[ \t\]+foo \\(.*\\);.*42\[ \t\]+.*\}\r\n$gdb_prompt $" { incr testcnt }
	-re ".*$gdb_prompt $" { fail "list 35-42" ; gdb_suppress_tests }
	timeout { fail "list 35-42 (timeout)" ; gdb_suppress_tests }
    }

    pass "repeat list commands to page forward using 'return' ($testcnt tests)"
    gdb_stop_suppressing_tests;
}

proc test_list_backwards {} {
    global gdb_prompt

    set testcnt 0

    send_gdb "list list0.c:33\n"
    gdb_expect {
	-re "28\[ \t\]+foo \\(.*\\);.*37\[ \t\]+\}\r\n$gdb_prompt $" { incr testcnt }
	-re ".*$gdb_prompt $" { fail "list list0.c:33" ; gdb_suppress_tests }
	timeout { fail "list list0.c:33 (timeout)" ; gdb_suppress_tests }
    }

    send_gdb "list -\n"
    gdb_expect {
	-re "18\[ \t\]+foo \[(\]+.*\[)\]+;.*27\[ \t\]+foo \[(\]+.*\[)\]+;\r\n$gdb_prompt $" { incr testcnt }
	-re ".*$gdb_prompt $" { fail "list 18-27" ; gdb_suppress_tests }
	timeout { fail "list 18-27 (timeout)" ; gdb_suppress_tests }
    }

    send_gdb "list -\n"
    gdb_expect {
	-re "8\[ \t\]+breakpoint\[(\]\[)\];.*17\[ \t\]+foo \[(\]+.*\[)\]+;\r\n$gdb_prompt $" { incr testcnt }
	-re ".*$gdb_prompt $" { fail "list 8-17" ; gdb_suppress_tests }
	timeout { fail "list 8-17 (timeout)" ; gdb_suppress_tests }
    }

    send_gdb "list -\n"
    gdb_expect {
	-re "1\[ \t\]+#include .*7\[ \t\]+set_debug_traps\[(\]\[)\]+;\r\n$gdb_prompt $" { incr testcnt }
	-re ".*$gdb_prompt $" { fail "list 1-7" ; gdb_suppress_tests }
	timeout { fail "list 1-7 (timeout)" ; gdb_suppress_tests }
    }

    pass "$testcnt successive \"list -\" commands to page backwards"
    gdb_stop_suppressing_tests;
}

#
# Test "list first,last"
#

proc test_list_range {} {
    global gdb_prompt

    gdb_test "list list0.c:2,list0.c:5" "2\[ \t\]+\r\n3\[ \t\]+int main \[)(\]+.*5\[ \t\]+int x;" "list range; filename:line1,filename:line2"

    gdb_test "list 2,5" "2\[ \t\]+\r\n3\[ \t\]+int main \[)(\]+.*5\[ \t\]+int x;" "list range; line1,line2"

#    gdb_test     "list -1,6" 	"Line number 0 out of range; .*list0.c has 39 lines." "list range; lower bound negative"

#    gdb_test     "list -100,-40" 	"Line number -60 out of range; .*list0.c has 39 lines." "list range; both bounds negative"

    gdb_test "list 30,45" "30\[ \t\]+foo \(.*\);.*43\[ \t\]+\}" "list range; upper bound past EOF"

    gdb_test "list 45,100" "Line number 45 out of range; .*list0.c has 43 lines." "list range; both bounds past EOF"

    gdb_test "list list0.c:2,list1.c:17" "Specified start and end are in different files." "list range, must be same files"
}

#
# Test "list filename:function"
#

proc test_list_filename_and_function {} {
    global gdb_prompt

    set testcnt 0

    # gcc appears to generate incorrect debugging information for code
    # in include files, which breaks this test.
    # SunPRO cc is the second case below, it's also correct.
    send_gdb "list list0.c:main\n"
    gdb_expect {
	-re "1\[ \t\]+#include .*10\[ \t\]+x = 0;\r\n$gdb_prompt $" {
	    incr testcnt
	}
	-re "5\[ \t\]+int x;.*14\[ \t\]+foo \[(\]+.*\[)\]+;\r\n$gdb_prompt $" {
	    pass "list function in source file 1"
	}
	-re ".*$gdb_prompt $" { fail "list list0.c:main" }
	timeout { fail "list list0.c:main (timeout)" }
    }

    # Not sure what the point of having this function be unused is.
    # AIX is legitimately removing it.
    setup_xfail "rs6000-*-aix*"
    send_gdb "list list0.c:unused\n"
    gdb_expect {
	-re "40\[ \t\]+unused.*43\[ \t\]+\}\r\n$gdb_prompt $" {
	    incr testcnt
	}
	-re "37.*42\[ \t\]+\}\r\n$gdb_prompt $" {
	    incr testcnt
	}
	-re ".*$gdb_prompt $" { fail "list list0.c:unused" }
	timeout { fail "list list0.c:unused (timeout)" }
    }
    clear_xfail "rs6000-*-aix*"

    # gcc appears to generate incorrect debugging information for code
    # in include files, which breaks this test.
    # Ultrix gdb is the second case, one line different but still correct.
    # SunPRO cc is the third case.
    setup_xfail "rs6000-*-*" 1804
    setup_xfail "powerpc-*-*" 1804
    setup_xfail_format "COFF"
    send_gdb "list list0.h:foo\n"
    gdb_expect {
	-re "2\[ \t\]+including file.  This.*11\[ \t\]+bar \[(\]+.*\[)\]+;\r\n$gdb_prompt $" {
	    incr testcnt
	}
	-re "1\[ \t\]+/. An include file.*10\[ \t\]+bar \[(\]+.*\[)\]+;\r\n$gdb_prompt $" {
	    incr testcnt
	}
	-re "3\[ \t\]+.*12\[ \t\]+bar \[(\]+.*\[)\]+;\r\n$gdb_prompt $" {
	    incr testcnt
	}
	-re "No source file named list0.h.\r\n$gdb_prompt $" {
	    fail "list list0.h:foo"
	}
	-re ".*$gdb_prompt $" { fail "list list0.h:foo" }
	timeout { fail "list list0.h:foo (timeout)" }
    }

    # Ultrix gdb is the second case.
    send_gdb "list list1.c:bar\n"
    gdb_expect {
	-re "4\[ \t\]+void.*13\[ \t\]+\}\r\n$gdb_prompt $" {
	    incr testcnt
	}
	-re "4\[ \t\]+void.*12\[ \t\]*long_line ..;\r\n$gdb_prompt $" {
	    incr testcnt
	}
	-re "4\[ \t\]+void.*11\[ \t\]*\r\n$gdb_prompt $" {
	    incr testcnt
	}
	-re ".*$gdb_prompt $" { fail "list list1.c:bar" }
	timeout { fail "list list1.c:bar (timeout)" }
    }

    # Not sure what the point of having this function be unused is.
    # AIX is legitimately removing it.
    setup_xfail "rs6000-*-aix*"
    send_gdb "list list1.c:unused\n"
    gdb_expect {
	-re "12\[ \t\]+long_line \[(\]\[)\];.*13\[ \t\]+\}\r\n.*$gdb_prompt $" {
	    incr testcnt
	}
	-re "14.*19\[ \t\]+\}\r\n.*$gdb_prompt $" {
	    incr testcnt
	}
	-re ".*$gdb_prompt $" { fail "list list1.c:unused" }
	timeout { fail "list list1.c:unused (timeout)" }
    }
    clear_xfail "rs6000-*-aix*"

    pass "list filename:function ($testcnt tests)"

    # Test some invalid specs
    # The following test takes the FIXME result on most systems using
    # DWARF.  It fails to notice that main() is not in the file requested.
   
    setup_xfail "*-*-*"

# Does this actually work ANYWHERE?  I believe not, as this is an `aspect' of
# lookup_symbol(), where, when it is given a specific symtab which does not
# contain the requested symbol, it will subsequently search all of the symtabs
# for the requested symbol.

    gdb_test "list list0.c:foo" "Function \"foo\" not defined in .*list0.c" "list filename:function; wrong filename rejected"

    gdb_test "list foobar.c:main" "No source file named foobar.c.|Location not found" "list filename:function; nonexistant file"

    gdb_test "list list0.h:foobar" "Function \"foobar\" not defined.|Location not found" "list filename:function; nonexistant function"

}

proc test_forward_search {} {
	global timeout

	gdb_test "set listsize 4" ""
	# On SunOS4, this gives us lines 19-22.  On AIX, it gives us
	# lines 20-23.  This depends on whether the line number of a function
	# is considered to be the openbrace or the first statement--either one
	# is acceptable.
	gdb_test "list long_line" "24\[ \t\]+long_line .*"

	gdb_test "search 4321" " not found"

	gdb_test "search 6789" "28\[ \t\]+oof .6789.;"

	# Test that GDB won't crash if the line being searched is extremely long.

	set oldtimeout $timeout
	set timeout [expr "$timeout + 300"]
	verbose "Timeout is now $timeout seconds" 2
	gdb_test "search 1234" ".*1234.*" "search extremely long line (> 5000 chars)"
	set timeout $oldtimeout
	verbose "Timeout is now $timeout seconds" 2
}

# Start with a fresh gdb.

gdb_exit
gdb_start
gdb_reinitialize_dir $srcdir/$subdir
gdb_load ${binfile}

if [target_info exists gdb_stub] {
    gdb_step_for_stub;
}

gdb_test "set width 0" "" "set width 0"

test_listsize
get_debug_format
if [ set_listsize 10 ] then {
    test_list_include_file
    test_list_filename_and_number
    test_list_function
    test_list_forward
    test_list_backwards
    test_repeat_list_command
    test_list_range
    test_list_filename_and_function
    test_forward_search
}

remote_exec build "rm -f list0.h"
@


1.2
log
@Merge to Cygnus 961112 + add some support (not ready) for shared libs
@
text
@d1 2
a2 1
# Copyright (C) 1992, 1994, 1995 Free Software Foundation, Inc.
d16 1
a16 1
# Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA 02111-1307, USA.  */
d32 15
a46 13
if  { [compile "-g -c ${srcdir}/${subdir}/list0.c"] != "" } {
    perror "Couldn't compile ${testfile}0.c to object"
    return -1
}
execute_anywhere "mv list0.o ${binfile}0.o"
if  { [compile "-g -c ${srcdir}/${subdir}/list1.c"] != "" } {
    perror "Couldn't compile ${testfile}1.c to object"
    return -1
}
execute_anywhere "mv list1.o ${binfile}1.o"
if  { [compile "${binfile}0.o ${binfile}1.o -o ${binfile}"] != "" } {
    perror "Couldn't link ${testfile}."
    return -1
d49 2
d53 2
a54 4
execute_anywhere "rm -f ${binfile}.ci"
if  { [compile "-E ${srcdir}/${subdir}/compiler.c > ${binfile}.ci"] != "" } {
    perror "Couldn't make ${binfile}.ci file"
    return -1
a55 1
source ${binfile}.ci
d62 2
d65 2
a66 1
    global prompt
d68 3
a70 5
    send "set listsize $arg\n"
    expect {
	-re "set listsize $arg\[\r\n\]+$prompt $" {}
	-re ".*$prompt $" { fail "setting listsize to $arg" ; return 0 }
	timeout { fail "set listsize to $arg (timeout)" ; return 0 } 
d72 6
a77 6
    
    send "show listsize\n"
    expect {
	-re "Number of source lines .* is $arg.\r\n.*$prompt $" {}
	-re ".*$prompt $" { fail "listsize not set to $arg" ; return 0 }
	timeout { fail "show listsize (timeout)" ; return 0 }
d87 3
a89 1
    global prompt
d93 1
a93 12
    send "show listsize\n"
    expect {
	-re "Number of source lines gdb will list by default is 10.*$prompt $" {
	    pass "show default list size"
	}
	-re ".*$prompt $" {
	    fail "show default listsize (10)"
	}
	timeout {
	    fail "show listsize (timeout)"
	}
    }
d96 2
d100 5
a104 16
    # This doesn't work for COFF targets.
    setup_xfail "a29k-*-udi"
    send "list\n"
    expect {
	-re "1\[ \t\]+#include \"list0.h\".*10\[ \t\]+x = 0;\r\n$prompt $" {
	    pass "list default lines around main"
	}
	-re "2.*11\[ \t\]+foo .x\[+)\]+;\r\n$prompt $" {
	    pass "list default lines around main"
	}
	-re ".*$prompt $" {
	    fail "list default lines around main"
	}
	timeout {
	    fail "list default lines around main (timeout)"
	}
d106 1
a106 1
    
d108 4
a111 35
    
    if [ set_listsize 1 ] then {
	setup_xfail "*-*-*"
	send "list 1\n"
	expect {
	    -re "1\[ \t\]+#include \"list0.h\"\r\n$prompt $" {
		pass "list line 1 with listsize 1"
	    }
	    -re "list 1\r\n$prompt $" {
		fail "list line 1 with listsize 1"
	    }
	    -re ".*$prompt $" {
		fail "list line 1 with listsize 1"
	    }
	    timeout {
		fail "list line 1 with listsize 1 (timeout)"
	    }
	}
	
	setup_xfail "*-*-*"
	send "list 2\n"
	expect {
	    -re "2\[ \t\]+\r\n$prompt $" {
		pass "list line 2 with listsize 1"
	    }
	    -re "list 2\r\n$prompt $" {
		fail "list line 2 with listsize 1"
	    }
	    -re ".*$prompt $" {
		fail "list line 2 with listsize 1"
	    }
	    timeout {
		fail "list line 2 with listsize 1 (timeout)"
	    }
	}
d116 5
a120 40
    if [ set_listsize 2 ] then {
	send "list 1\n"
	expect {
	    -re "1\[ \t\]+#include \"list0.h\"\r\n$prompt $" {
		pass "list line 1 with listsize 2"
	    }
	    -re ".*$prompt $" {
		fail "list line 1 with listsize 2"
	    }
	    timeout {
		fail "list line 1 with listsize 2 (timeout)"
	    }
	}
	
	send "list 2\n"
	expect {
	    -re "1\[ \t\]+#include \"list0.h\"\r\n2\[ \t\]+\r\n$prompt $" {
		pass "list line 2 with listsize 2"
	    }
	    -re ".*$prompt $" {
		fail "list line 2 with listsize 2"
	    }
	    timeout {
		fail "list line 2 with listsize 2 (timeout)"
	    }
	}
	
	send "list 3\n"
	expect {
	    -re "2\[ \t\]+\r\n3\[ \t\]+main \[)(\]+\r\n$prompt $" {
		pass "list line 3 with listsize 2"
	    }
	    -re ".*$prompt $" {
		fail "list line 3 with listsize 2"
	    }
	    timeout {
		fail "list line 3 with listsize 2 (timeout)"
	    }
	}
    }    
d123 5
a127 52
    
    if [ set_listsize 3 ] then {
	setup_xfail "*-*-*"
	send "list 1\n"
	expect {
	    -re "1\[ \t\]+#include \"list0.h\"2\[ \t\]+\r\n$prompt $" {
		pass "list line 1 with listsize 3"
	    }
	    -re "1\[ \t\]+#include \"list0.h\"\r\n$prompt $" {
		fail "list line 1 with listsize 3"
	    }
	    -re ".*$prompt $" {
		fail "list line 1 with listsize 3"
	    }
	    timeout {
		fail "list line 1 with listsize 3 (timeout)"
	    }
	}
	
	setup_xfail "*-*-*"
	send "list 2\n"
	expect {
	    -re "1\[ \t\]+#include \"list0.h\".*3\[ \t\]+main \[)(\]+\r\n$prompt $" {
		pass "list line 2 with listsize 3"
	    }
	    -re "1\[ \t\]+#include \"list0.h\"\r\n2\[ \t\]+\r\n$prompt $" {
		fail "list line 2 with listsize 3"
	    }
	    -re ".*$prompt $" {
		fail "list line 2 with listsize 3"
	    }
	    timeout {
		fail "list line 2 with listsize 3 (timeout)"
	    }
	}
	
	setup_xfail "*-*-*"
	send "list 3\n"
	expect {
	    -re "2\[ \t\]+\r\n3\[ \t\]+main \[(\]+\[)\]+\r\n4\[ \t\]+\{\r\n$prompt $" {
		pass "list line 3 with listsize 3"
	    }
	    -re "2\[ \t\]+\r\n3\[ \t\]+main \[)(\]+\r\n$prompt $" {
		fail "list line 3 with listsize 3"
	    }
	    -re ".*$prompt $" {
		fail "list line 3 with listsize 3"
	    }
	    timeout {
		fail "list line 3 with listsize 3 (timeout)"
	    }
	}
d133 2
a134 38
	send "list 1\n"
	expect {
	    -re "1\[ \t\]+#include \"list0.h\"\r\n2\[ \t\]+\r\n$prompt $" {
		pass "list line 1 with listsize 4"
	    }
	    -re ".*$prompt $" {
		fail "list line 1 with listsize 4"
	    }
	    timeout {
		fail "list line 1 with listsize 4 (timeout)"
	    }
	}
	
	send "list 2\n"
	expect {
	    -re "1\[ \t\]+#include \"list0.h\".*3\[ \t\]+main \[)(\]+\r\n$prompt $" {
		pass "list line 2 with listsize 4"
	    }
	    -re ".*$prompt $" {
		fail "list line 2 with listsize 4"
	    }
	    timeout {
		fail "list line 2 with listsize 4 (timeout)"
	    }
	}
	
	send "list 3\n"
	expect {
	    -re "1\[ \t\]+#include \"list0.h\".*4\[ \t\]+\{\r\n$prompt $" {
		pass "list line 3 with listsize 4"
	    }
	    -re ".*$prompt $" {
		fail "list line 3 with listsize 4"
	    }
	    timeout {
		fail "list line 3 with listsize 4 (timeout)"
	    }
	}
d136 2
a137 12
	send "list 4\n"
	expect {
	    -re "2\[ \t\]+\r\n.*5\[ \t\]+int x;\r\n$prompt $" {
		pass "list line 4 with listsize 4"
	    }
	    -re ".*$prompt $" {
		fail "list line 4 with listsize 4"
	    }
	    timeout {
		fail "list line 4 with listsize 4 (timeout)"
	    }
	}
d143 1
a143 12
	send "list 1\n"
	expect {
	    -re "1\[ \t\]+#include \"list0.h\".*\r\n42\[ \t\]+\}\r\n$prompt $" {
		pass "list line 1 with listsize 100"
	    }
	    -re ".*$prompt $" {
		fail "list line 1 with listsize 100"
	    }
	    timeout {
		fail "list line 1 with listsize 100 (timeout)"
	    }
	}
d145 1
a145 12
	send "list 10\n"
	expect {
	    -re "1\[ \t\]+#include \"list0.h\".*\r\n42\[ \t\]+\}\r\n$prompt $" {
		pass "list line 10 with listsize 100"
	    }
	    -re ".*$prompt $" {
		fail "list line 10 with listsize 100"
	    }
	    timeout {
		fail "list line 10 with listsize 100 (timeout)"
	    }
	}
d150 2
a151 39
    send "set listsize 0\n"
    expect {
	-re "set listsize 0\[\r\n\]+$prompt $" {
	    setup_xfail "*-*-*"
	    send "show listsize\n"
	    expect {
		-re "Number of source lines .* is 0.\r\n.*$prompt $" {
		    pass "listsize of 0 displays as 0"
		}
		-re "Number of source lines .* is unlimited.\r\n.*$prompt $" {
		    fail "listsize of 0 displays as unlimited"
		}
		-re ".*$prompt $" {
		    fail "listsize not set to unlimited (0)"
		}
		timeout {
		    fail "show listsize (timeout)"
		}
	    }
	    send "list 1\n"
	    expect {
		-re "list 1\[\r\n\]+$prompt $" {
		    pass "listsize of 0 suppresses output"
		}
		-re ".*$prompt $" {
		    fail "listsize of 0 should suppress output"
		}
		timeout {
		    fail "listsize of 0 suppresses output (timeout)"
		}
	    }
	}
	-re ".*$prompt $" {
	    fail "setting listsize to 0"
	}
	timeout {
	    fail "set listsize to 0 (timeout)"
	}
    }
d155 3
a157 36
    send "set listsize -1\n"
    expect {
	-re "set listsize -1\[\r\n\]+$prompt $" {
	    send "show listsize\n"
	    expect {
		-re "Number of source lines .* is unlimited.\r\n.*$prompt $" {
		    pass "listsize of -1 displays as unlimited"
		}
		-re ".*$prompt $" {
		    fail "listsize not set to unlimited (-1)"
		}
		timeout {
		    fail "show listsize (timeout)"
		}
	    }
	    setup_xfail "*-*-*"
	    send "list 1\n"
	    expect {
		-re "1\[ \t\]+#include .*\r\n39\[ \t\]+\}\r\n$prompt $" {
		    pass "list line 1 with unlimited listsize"
		}
		-re "list 1\[\r\n\]+$prompt $" {
		    fail "listsize of -1 (unlimited) suppresses output"
		}
		timeout {
		    fail "list line 1 with unlimited listsize (timeout)"
		}
	    }
	}
	-re ".*$prompt $" {
	    fail "setting listsize to -1"
	}
	timeout {
	    fail "set listsize to -1 (timeout)"
	}
    }
d165 1
a165 1
    global prompt
d167 2
a168 17
    # FIXME Fails for COFF as well, I think.
    setup_xfail "a29k-*-udi"
    send "list list0.h:1\n"
    expect {
	-re "1\[ \t\]+/\[*\]+ An include file .*5\[ \t\]+foo \[(\]+x\[)\]+\r\n$prompt $" {
	    pass "list line 1 in include file"
	}
	-re "No source file named list0.h.\r\n$prompt $" {
	    fail "list line 1 in include file"
	}
	-re ".*$prompt $" {
	    fail "list line 1 in include file"
	}
	timeout {
	    fail "list line 1 in include file (timeout)"
	}
    }
d170 2
a171 17
    # FIXME Fails for COFF as well, I think.
    setup_xfail "a29k-*-udi"
    send "list list0.h:100\n"
    expect {
	-re "Line number 95 out of range; .*list0.h has 36 lines.\r\n$prompt $" {
	    pass "list message for lines past EOF"
	}
	-re "No source file named list0.h.\r\n$prompt $" {
	    fail "list message for lines past EOF"
	}
	-re ".*$prompt $" {
	    fail "list message for lines past EOF"
	}
	timeout {
	    fail "list message for lines past EOF (timeout)"
	}
    }
d179 1
a179 1
    global prompt
d183 3
a185 3
    send "list list0.c:1\n"
    expect {
	-re "1\[ \t\]+#include \"list0.h\".*5\[ \t\]+int x;\r\n$prompt $" {
d188 2
a189 2
	-re ".*$prompt $" { fail "list list0.c:1" ; return }
	timeout { fail "list list0.c:1 (timeout)" ; return }
d191 3
a193 3
    send "list list0.c:10\n"
    expect {
	-re "5\[ \t\]+int x;.*14\[ \t\]+foo .x\[+)\]+;\r\n$prompt $" {
d196 2
a197 2
	-re ".*$prompt $" { fail "list list.c:10" ; return }
	timeout { fail "list list.c:10 (timeout)" ; return }
d199 3
a201 3
    send "list list1.c:1\n"
    expect {
	-re "1\[ \t\]+void.*5\[ \t\]+printf \[(\]+.*\[)\]+;\r\n$prompt $" {
d204 2
a205 2
	-re ".*$prompt $" { fail "list list1.c:1" ; return }
	timeout { fail "list list1.c:1 (timeout)" ; return }
d207 3
a209 3
    send "list list1.c:12\n"
    expect {
	-re "7\[ \t\]+long_line \[(\]+.*\[)\]+;.*14\[ \t\]+\}\r\n.*$prompt $" {
d212 2
a213 2
	-re ".*$prompt $" { fail "list list1.c:12" ; return }
	timeout { fail "list list1.c:12 (timeout)" ; return }
d216 1
d224 1
a224 2
    global prompt
    global gcc_compiled
d229 1
a229 12
    setup_xfail "a29k-*-udi"
    send "list main\n"
    expect {
	-re "1\[ \t\]+#include .*8\[ \t\]+breakpoint\[(\]\[)\]+;\r\n$prompt $" {
	    pass "list function in source file 1"
	}
	-re "5\[ \t\]+int x;.*14\[ \t\]+foo \[(\]+.*\[)\]+;\r\n$prompt $" {
	    pass "list function in source file 1"
	}
	-re ".*$prompt $" { fail "list main" ; return }
	timeout { fail "list main (timeout)" ; return }
    }
d233 1
a233 14
    send "list bar\n"
    expect {
	-re "1\[ \t\]+void.*8\[ \t\]+\}\r\n$prompt $" {
	    pass "list function in source file 2"
	}
	-re "1\[ \t\]+void.*7\[ \t\]*long_line ..;\r\n$prompt $" {
	    pass "list function in source file 2"
	}
	-re "1\[ \t\]+void.*7\[ \t\]*long_line ..;.*9\[ \t\]*\r\n$prompt $" {
	    pass "list function in source file 2"
	}
	-re ".*$prompt $" { fail "list bar" ; return }
	timeout { fail "list bar (timeout)" ; return }
    }
d239 1
a239 17
    send "list foo\n"
    expect {
	-re "2\[ \t\]+including file.*11\[ \t\]+bar \[(\]+.*\[)\]+;\r\n$prompt $" {
	    pass "list function in include file"
	}
	-re "1\[ \t\]+/. An include file.*10\[ \t\]+bar \[(\]+.*\[)\]+;\r\n$prompt $" {
	    pass "list function in include file"
	}
	-re "3\[ \t\]+.*12\[ \t\]+bar \[(\]+.*\[)\]+;\r\n$prompt $" {
	    pass "list function in include file"
	}
	-re ".*main \[)(\]+.*$prompt $" {
	    fail "list function in include file"
	}
	-re ".*$prompt $" { fail "list foo (in include file)" ; return }
	timeout { fail "list foo (timeout)" ; return }
    }
d243 1
a243 1
    global prompt
d247 26
a272 26
    send "list list0.c:10\n"
    expect {
	-re "5\[ \t\]+int x;.*14\[ \t\]+foo \[(\]+.*\[)\]+;\r\n$prompt $" { incr testcnt }
	-re ".*$prompt $" { fail "list list0.c:10" ; return }
	timeout { fail "list list0.c:10 (timeout)" ; return }
    }

    send "list\n"
    expect {
	-re "15\[ \t\]+foo \[(\]+.*\[)\]+;.*24\[ \t\]+foo \[(\]+.*\[)\]+;\r\n$prompt $" { incr testcnt }
	-re ".*$prompt $" { fail "list 15-24" ; return }
	timeout { fail "list 15-24 (timeout)" ; return }
    }

    send "list\n"
    expect {
	-re "25\[ \t\]+foo \[(\]+.*\[)\]+;.*34\[ \t\]+foo \[(\]+.*\[)\]+;\r\n$prompt $" { incr testcnt }
	-re ".*$prompt $" { fail "list 25-34" ; return }
	timeout { fail "list 25-34 (timeout)" ; return }
    }

    send "list\n"
    expect {
	-re "35\[ \t\]+foo \[(\]+.*\[)\]+;.*42\[ \t\]+\}\r\n$prompt $" { incr testcnt }
	-re ".*$prompt $" { fail "list 35-42" ; return }
	timeout { fail "list 35-42 (timeout)" ; return }
d276 43
d322 1
a322 1
    global prompt
d326 26
a351 26
    send "list list0.c:33\n"
    expect {
	-re "28\[ \t\]+foo \[(\]+.*\[)\]+;.*37\[ \t\]+\r\n$prompt $" { incr testcnt }
	-re ".*$prompt $" { fail "list list0.c:33" ; return }
	timeout { fail "list list0.c:33 (timeout)" ; return }
    }

    send "list -\n"
    expect {
	-re "18\[ \t\]+foo \[(\]+.*\[)\]+;.*27\[ \t\]+foo \[(\]+.*\[)\]+;\r\n$prompt $" { incr testcnt }
	-re ".*$prompt $" { fail "list 18-27" ; return }
	timeout { fail "list 18-27 (timeout)" ; return }
    }

    send "list -\n"
    expect {
	-re "8\[ \t\]+breakpoint\[(\]\[)\];.*17\[ \t\]+foo \[(\]+.*\[)\]+;\r\n$prompt $" { incr testcnt }
	-re ".*$prompt $" { fail "list 8-17" ; return }
	timeout { fail "list 8-17 (timeout)" ; return }
    }

    send "list -\n"
    expect {
	-re "1\[ \t\]+#include .*7\[ \t\]+set_debug_traps\[(\]\[)\]+;\r\n$prompt $" { incr testcnt }
	-re ".*$prompt $" { fail "list 1-7" ; return }
	timeout { fail "list 1-7 (timeout)" ; return }
d355 1
d363 1
a363 1
    global prompt
d365 1
a365 8
    send "list list0.c:2,list0.c:5\n"
    expect {
	-re "2\[ \t\]+\r\n3\[ \t\]+main \[)(\]+.*5\[ \t\]+int x;\r\n$prompt $" {
	    pass "list range; filename:line1,filename:line2"
	}
	-re ".*$prompt $" { fail "list list0.c:2,list0.c:5" }
	timeout { fail "list list0.c:2,list0.c:5 (timeout)" }
    }
d367 1
a367 8
    send "list 2,5\n"
    expect {
	-re "2\[ \t\]+\r\n3\[ \t\]+main \[)(\]+.*5\[ \t\]+int x;\r\n$prompt $" {
	    pass "list range; line1,line2"
	}
	-re ".*$prompt $" { fail "list 2,5" }
	timeout { fail "list 2,5 (timeout)" }
    }
d369 1
a369 8
    #send "list -1,6\n"
    #expect {
	#-re "Line number 0 out of range; .*list0.c has 39 lines.\r\n$prompt $" {
	    #pass "list range; lower bound negative"
	#}
	#-re ".*$prompt $" { fail "list -1,6" }
	#timeout { fail "list -1,6 (timeout)" }
    #}
d371 1
a371 8
    #send "list -100,-40\n"
    #expect {
	#-re "Line number -60 out of range; .*list0.c has 39 lines.\r\n$prompt $" {
	    #pass "list range; both bounds negative"
	#}
	#-re ".*$prompt $" { fail "-100,-40" }
	#timeout { fail "-100,-40 (timeout)" }
    #}
d373 1
a373 8
    send "list 30,43\n"
    expect {
	-re "30\[ \t\]+foo \[(\]+.*\[)\]+;.*42\[ \t\]+\}\r\n$prompt $" {
	    pass "list range; upper bound past EOF"
	}
	-re ".*$prompt $" { fail "list 30,43" }
	timeout { fail "list 30,43 (timeout)" }
    }
d375 1
a375 8
    send "list 43,100\n"
    expect {
	-re "Line number 43 out of range; .*list0.c has 42 lines.\r\n$prompt $" {
	    pass "list range; both bounds past EOF"
	}
	-re ".*$prompt $" { fail "43,100" }
	timeout { fail "43,100 (timeout)" }
    }
d377 1
a377 8
    send "list list0.c:2,list1.c:17\n"
    expect {
	-re "Specified start and end are in different files.\r\n$prompt $" {
	    pass "list range, must be same files"
	}
	-re ".*$prompt $" { fail "list0.c:2,list1.c:17" }
	timeout { fail "list0.c:2,list1.c:17 (timeout)" }
    }
d385 1
a385 1
    global prompt
d392 3
a394 4
    setup_xfail "a29k-*-udi"
    send "list list0.c:main\n"
    expect {
	-re "1\[ \t\]+#include .*8\[ \t\]+breakpoint\[(\]\[)\]+;\r\n$prompt $" {
d397 1
a397 1
	-re "5\[ \t\]+int x;.*14\[ \t\]+foo \[(\]+.*\[)\]+;\r\n$prompt $" {
d400 1
a400 1
	-re ".*$prompt $" { fail "list list0.c:main" }
a403 2
    # The i960 and a29k-amd-udi are the second case

d407 3
a409 3
    send "list list0.c:unused\n"
    expect {
	-re "36\[ \t\]+\}.*42\[ \t\]+\}\r\n$prompt $" {
d412 1
a412 1
	-re "37.*42\[ \t\]+\}\r\n$prompt $" {
d415 1
a415 1
	-re ".*$prompt $" { fail "list list0.c:unused" }
d426 4
a429 5
    # FIXME Fails for COFF as well, I think.
    setup_xfail "a29k-*-udi"
    send "list list0.h:foo\n"
    expect {
	-re "2\[ \t\]+including file.  This.*11\[ \t\]+bar \[(\]+.*\[)\]+;\r\n$prompt $" {
d432 1
a432 1
	-re "1\[ \t\]+/. An include file.*10\[ \t\]+bar \[(\]+.*\[)\]+;\r\n$prompt $" {
d435 1
a435 1
	-re "3\[ \t\]+.*12\[ \t\]+bar \[(\]+.*\[)\]+;\r\n$prompt $" {
d438 1
a438 1
	-re "No source file named list0.h.\r\n$prompt $" {
d441 1
a441 1
	-re ".*$prompt $" { fail "list list0.h:foo" }
d446 3
a448 4
    # a29k-amd-udi is the third case.
    send "list list1.c:bar\n"
    expect {
	-re "1\[ \t\]+void.*8\[ \t\]+\}\r\n$prompt $" {
d451 1
a451 1
	-re "1\[ \t\]+void.*7\[ \t\]*long_line ..;\r\n$prompt $" {
d454 1
a454 1
	-re "1\[ \t\]+void.*9\[ \t\]*\r\n$prompt $" {
d457 1
a457 1
	-re ".*$prompt $" { fail "list list1.c:bar" }
a460 2
    # The i960 and a29k-amd-udi are the second case

d464 3
a466 3
    send "list list1.c:unused\n"
    expect {
	-re "7\[ \t\]+long_line \[(\]\[)\];.*14\[ \t\]+\}\r\n.*$prompt $" {
d469 1
a469 1
	-re "9.*14\[ \t\]+\}\r\n.*$prompt $" {
d472 1
a472 1
	-re ".*$prompt $" { fail "list list1.c:unused" }
d490 1
a490 18
    send "list list0.c:foo\n"
    expect {
	-re "Function \"foo\" not defined in .*list0.c\r\n$prompt $" {
	    pass "list filename:function; wrong filename rejected"
	}
	-re "2\[ \t\]+including file.*11\[ \t\]+bar \[(\]+.*\[)\]+;\r\n$prompt $" {
	    fail "list filename:function; wrong filename not rejected"
	}
	-re ".*main \[)(\]+.*$prompt $" {
	    fail "list filename:function; wrong filename not rejected"
	}
	-re ".*$prompt $" {
	    fail "list filename:function; wrong filename not rejected"
	}
	timeout {
	    fail "list filename:function; wrong filename (timeout)"
	}
    }
d492 1
a492 12
    send "list foobar.c:main\n"
    expect {
	-re "No source file named foobar.c.\r\n$prompt $" {
	    pass "list filename:function; nonexistant file"
	}
	-re ".*$prompt $" {
	    fail "list filename:function; nonexistant file"
	}
	timeout {
	    fail "list filename:function; nonexistant file (timeout)"
	}
    }
d494 1
a494 15
    send "list list0.h:foobar\n"
    expect {
	-re "Function \"foobar\" not defined.\r\n$prompt $" {
	    pass "list filename:function; nonexistant function"
	}
	-re "No source file named list0.h.\r\n$prompt $" {
	    fail "list filename:function; nonexistant function"
	}
	-re ".*$prompt $" {
	    fail "list filename:function; nonexistant function"
	}
	timeout {
	    fail "list filename:function; nonexistant function (timeout)"
	}
    }
d506 1
a506 1
	gdb_test "list long_line" "20\[ \t\]+long_line .*"
d510 1
a510 1
	gdb_test "search 6789" "24\[ \t\]+oof .6789.;"
a516 1
	match_max 10000
d529 2
a530 7
if $usestubs {
    send "step\n"
    # if use stubs step out of the breakpoint() function.
    expect {
        -re "main.* at .*$prompt $" {}
        timeout { fail "single step at breakpoint() (timeout)" ; return 0 }
    }
d533 1
a533 2
send "set width 0\n"
expect -re "$prompt $"
d536 1
d543 1
d548 2
@


1.1
log
@file list.exp was initially added on branch CYGNUS.
@
text
@d1 942
@


1.1.1.1
log
@GDB 6.1 (excluding .info files)
@
text
@a0 549
# Copyright 1992, 1994, 1995, 1996, 1997, 1998, 1999, 2002, 2003
# Free Software Foundation, Inc.

# This program is free software; you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation; either version 2 of the License, or
# (at your option) any later version.
# 
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
# 
# You should have received a copy of the GNU General Public License
# along with this program; if not, write to the Free Software
# Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA 02111-1307, USA.  

# Please email any bugs, comments, and/or additions to this file to:
# bug-gdb@@prep.ai.mit.edu

# This file was written by Fred Fish. (fnf@@cygnus.com)

if $tracelevel then {
	strace $tracelevel
}

set prms_id 0
set bug_id 0

set testfile "list"
set binfile ${objdir}/${subdir}/${testfile}

# Need to download the header to the host.
remote_download host ${srcdir}/${subdir}/list0.h list0.h


if  { [gdb_compile "${srcdir}/${subdir}/list0.c" "${binfile}0.o" object {debug}] != "" } {
     gdb_suppress_entire_file "Testcase compile failed, so all tests in this file will automatically fail."
}

if  { [gdb_compile "${srcdir}/${subdir}/list1.c" "${binfile}1.o" object {debug}] != "" } {
     gdb_suppress_entire_file "Testcase compile failed, so all tests in this file will automatically fail."
}

if  { [gdb_compile "${binfile}0.o ${binfile}1.o" ${binfile} executable {debug}] != "" } {
     gdb_suppress_entire_file "Testcase compile failed, so all tests in this file will automatically fail."
}



# Create and source the file that provides information about the compiler
# used to compile the test case.
if [get_compiler_info ${binfile}] {
    return -1;
}

#
# Local utility proc just to set and verify listsize
# Return 1 if success, 0 if fail.
#

set set_listsize_count 0;

proc set_listsize { arg } {
    global gdb_prompt
    global set_listsize_count;

    incr set_listsize_count;
    if [gdb_test "set listsize $arg" "" "setting listsize to $arg #$set_listsize_count"] {
	return 0;
    }
    if { $arg <= 0 } {
	set arg "unlimited";
    }

    if [gdb_test "show listsize" "Number of source lines.* is ${arg}.*" "show listsize $arg #$set_listsize_count"] {
	return 0;
    }
    return 1
}

#
# Test display of listsize lines around a given line number.
#

proc test_listsize {} {
    global gdb_prompt
    global hp_cc_compiler
    global hp_aCC_compiler

    # Show default size

    gdb_test "show listsize" "Number of source lines gdb will list by default is 10.*" "show default list size"
    
    # Show the default lines
    # Note that remote targets that have debugging info for _start available will
    # list the lines there instead of main, so we skip this test for remote targets.
    # The second case is for optimized code, it is still correct.
    
    if [is_remote target] {
	runto_main;
	unsupported "list default lines around main";
    } else {
	gdb_test "list" "(1\[ \t\]+#include \"list0.h\".*10\[ \t\]+x = 0;|2.*11\[ \t\]+foo .x\[+)\]+;)" "list default lines around main"
    }

    # Ensure we can limit printouts to one line

    if [set_listsize 1] {
	gdb_test "list 1" "1\[ \t\]+#include \"list0.h\"" "list line 1 with listsize 1"
	gdb_test "list 2" "2\[ \t\]+" "list line 2 with listsize 1"
    }    

    # Try just two lines
    
    if [ set_listsize 2 ] {
	gdb_test "list 1" "1\[ \t\]+#include \"list0.h\"\r\n2\[ \t\]+" "list line 1 with listsize 2"
	gdb_test "list 2" "1\[ \t\]+#include \"list0.h\"\r\n2\[ \t\]+" "list line 2 with listsize 2"
	gdb_test "list 3" "2\[ \t\]+\r\n3\[ \t\]+int main \[)(\]+" "list line 3 with listsize 2"
    }

    # Try small listsize > 1 that is an odd number

    if [ set_listsize 3 ] {
	gdb_test "list 1" "1\[ \t\]+#include \"list0.h\".*3\[ \t\]+int main \[)(\]+" "list line 1 with listsize 3"
	gdb_test "list 2" "1\[ \t\]+#include \"list0.h\".*3\[ \t\]+int main \[)(\]+" "list line 2 with listsize 3"
	gdb_test "list 3" "2\[ \t\]+\r\n3\[ \t\]+int main \[(\]+\[)\]+\r\n4\[ \t\]+\{" "list line 3 with listsize 3"
    }

    # Try small listsize > 2 that is an even number.

    if [ set_listsize 4 ] then {
	gdb_test "list 1" "1\[ \t\]+#include \"list0.h\".*4\[ \t\]+\{" "list line 1 with listsize 4"
	gdb_test "list 2" "1\[ \t\]+#include \"list0.h\".*4\[ \t\]+\{" "list line 2 with listsize 4"
	
	gdb_test "list 3" "1\[ \t\]+#include \"list0.h\".*4\[ \t\]+\{" "list line 3 with listsize 4"
	gdb_test "list 4" "2\[ \t\]+\r\n.*5\[ \t\]+int x;.*" "list line 4 with listsize 4"
    }

    # Try a size larger than the entire file.

    if [ set_listsize 100 ] then {
	gdb_test "list 1" "1\[ \t\]+#include \"list0.h\".*\r\n4\[23\]\[ \t\]+\}" "list line 1 with listsize 100"
	
	gdb_test "list 10" "1\[ \t\]+#include \"list0.h\".*\r\n4\[23\]\[ \t\]+\}" "list line 10 with listsize 100"
    }

    # Try listsize of 0 which suppresses printing.

    set_listsize 0
    gdb_test "list 1" "" "listsize of 0 suppresses output"

    # Try listsize of -1 which is special, and means unlimited.

    set_listsize -1
    setup_xfail "*-*-*"
    gdb_test "list 1" "1\[ \t\]+#include .*\r\n39\[ \t\]+\}" "list line 1 with unlimited listsize"
}

#
# Test "list filename:number" for C include file
#

proc test_list_include_file {} {
    global gdb_prompt

    setup_xfail_format "COFF"
    gdb_test "list list0.h:1" "1\[ \t\]+/\[*\]+ An include file .*10\[ \t\]+bar \\(x\\+\\+\\);" "list line 1 in include file"

    setup_xfail_format "COFF"
    gdb_test "list list0.h:100" "Line number 95 out of range; .*list0.h has 3\[67\] lines." "list message for lines past EOF"
}

#
# Test "list filename:number" for C source file
#

proc test_list_filename_and_number {} {
    global gdb_prompt

    set testcnt 0

    send_gdb "list list0.c:1\n"
    gdb_expect {
	-re "1\[ \t\]+#include \"list0.h\".*10\[ \t]+x = 0;\r\n$gdb_prompt $" {
	    incr testcnt 
	}
	-re ".*$gdb_prompt $" { fail "list list0.c:1" ; gdb_suppress_tests }
	timeout { fail "list list0.c:1 (timeout)" ; gdb_suppress_tests }
    }
    send_gdb "list list0.c:10\n"
    gdb_expect {
	-re "5\[ \t\]+int x;.*14\[ \t\]+foo .x\[+)\]+;\r\n$gdb_prompt $" {
	    incr testcnt 
	}
	-re ".*$gdb_prompt $" { fail "list list.c:10" ; gdb_suppress_tests }
	timeout { fail "list list.c:10 (timeout)" ; gdb_suppress_tests }
    }
    send_gdb "list list1.c:1\n"
    gdb_expect {
	-re "1\[ \t\]+\#include.*4\[ \t\]+.*int oof\[ \t\]*\(.*\);\r\n.*$gdb_prompt $" {
	    incr testcnt 
	}
	-re ".*$gdb_prompt $" { fail "list list1.c:1" ; gdb_suppress_tests }
	timeout { fail "list list1.c:1 (timeout)" ; gdb_suppress_tests }
    }
    send_gdb "list list1.c:12\n"
    gdb_expect {
	-re "12\[ \t\]+long_line \[(\]+.*\[)\]+;.*13\[ \t\]+\}\r\n.*$gdb_prompt $" {
	    incr testcnt 
	}
	-re ".*$gdb_prompt $" { fail "list list1.c:12" ; gdb_suppress_tests }
	timeout { fail "list list1.c:12 (timeout)" ; gdb_suppress_tests }
    }
    pass "list filename:number ($testcnt tests)"
    gdb_stop_suppressing_tests;
}

#
# Test "list function" for C source file
#

proc test_list_function {} {
    global gdb_prompt

    # gcc appears to generate incorrect debugging information for code
    # in include files, which breaks this test.
    # SunPRO cc is the second case below, it's also correct.
    gdb_test "list main" "(5\[ \t\]+int x;.*14\[ \t\]+foo \[(\]+.*\[)\]+;|1\[ \t\]+#include .*10\[ \t\]+x = 0;)" "list function in source file 1"

    # Ultrix gdb takes the second case below; it's also correct.
    # SunPRO cc is the third case.
    gdb_test "list bar" "(4\[ \t\]+void.*\[ \t\]*long_line.*;.*bar.*9\[ \t\]*.*|1\[ \t\]+void.*8\[ \t\]+\}|1\[ \t\]+void.*7\[ \t\]*long_line ..;|7\[ \t\]+void.*14\[ \t\]+\})" "list function in source file 2"

    # Test "list function" for C include file
    # Ultrix gdb is the second case, still correct.
    # SunPRO cc is the third case.
    setup_xfail "powerpc-*-*"
    gdb_test "list foo" "(3\[ \t\]+.*12\[ \t\]+bar \[(\]+.*\[)\]+;|2\[ \t\]+including file.*11\[ \t\]+bar \[(\]+.*\[)\]+;|1\[ \t\]+/. An include file.*10\[ \t\]+bar \[(\]+.*\[)\]+;)" "list function in include file"
}

proc test_list_forward {} {
    global gdb_prompt

    set testcnt 0

    send_gdb "list list0.c:10\n"
    gdb_expect {
	-re "5\[ \t\]+int x;.*14\[ \t\]+foo \[(\]+.*\[)\]+;\r\n$gdb_prompt $" { incr testcnt }
	-re ".*$gdb_prompt $" { fail "list list0.c:10" ; gdb_suppress_tests }
	timeout { fail "list list0.c:10 (timeout)" ; gdb_suppress_tests }
    }

    send_gdb "list\n"
    gdb_expect {
	-re "15\[ \t\]+foo \[(\]+.*\[)\]+;.*24\[ \t\]+foo \[(\]+.*\[)\]+;\r\n$gdb_prompt $" { incr testcnt }
	-re ".*$gdb_prompt $" { fail "list 15-24" ; gdb_suppress_tests }
	timeout { fail "list 15-24 (timeout)" ; gdb_suppress_tests }
    }

    send_gdb "list\n"
    gdb_expect {
	-re "25\[ \t\]+foo \[(\]+.*\[)\]+;.*34\[ \t\]+foo \[(\]+.*\[)\]+;\r\n$gdb_prompt $" { incr testcnt }
	-re ".*$gdb_prompt $" { fail "list 25-34" ; gdb_suppress_tests }
	timeout { fail "list 25-34 (timeout)" ; gdb_suppress_tests }
    }

    send_gdb "list\n"
    gdb_expect {
	-re "35\[ \t\]+foo \\(.*\\);.*42\[ \t\]+.*\}\r\n$gdb_prompt $" { incr testcnt }
	-re ".*$gdb_prompt $" { fail "list 35-42" ; gdb_suppress_tests }
	timeout { fail "list 35-42 (timeout)" ; gdb_suppress_tests }
    }

    pass "successive list commands to page forward ($testcnt tests)"
    gdb_stop_suppressing_tests;
}

# Test that repeating the list linenum command doesn't print the same
# lines over again.  Note that this test makes sure that the argument
# linenum is dropped, when we repeat the previous command. 'x/5i $pc'
# works the same way.  

proc test_repeat_list_command {} {
    global gdb_prompt

    set testcnt 0

    send_gdb "list list0.c:10\n"
    gdb_expect {
	-re "5\[ \t\]+int x;.*14\[ \t\]+foo \[(\]+.*\[)\]+;\r\n$gdb_prompt $" { incr testcnt }
	-re ".*$gdb_prompt $" { fail "list list0.c:10" ; gdb_suppress_tests }
	timeout { fail "list list0.c:10 (timeout)" ; gdb_suppress_tests }
    }

    send_gdb "\n"
    gdb_expect {
	-re "15\[ \t\]+foo \[(\]+.*\[)\]+;.*24\[ \t\]+foo \[(\]+.*\[)\]+;\r\n$gdb_prompt $" { incr testcnt }
	-re ".*$gdb_prompt $" { fail "list 15-24" ; gdb_suppress_tests }
	timeout { fail "list 15-24 (timeout)" ; gdb_suppress_tests }
    }

    send_gdb "\n"
    gdb_expect {
	-re "25\[ \t\]+foo \[(\]+.*\[)\]+;.*34\[ \t\]+foo \[(\]+.*\[)\]+;\r\n$gdb_prompt $" { incr testcnt }
	-re ".*$gdb_prompt $" { fail "list 25-34" ; gdb_suppress_tests }
	timeout { fail "list 25-34 (timeout)" ; gdb_suppress_tests }
    }

    send_gdb "\n"
    gdb_expect {
	-re "35\[ \t\]+foo \\(.*\\);.*42\[ \t\]+.*\}\r\n$gdb_prompt $" { incr testcnt }
	-re ".*$gdb_prompt $" { fail "list 35-42" ; gdb_suppress_tests }
	timeout { fail "list 35-42 (timeout)" ; gdb_suppress_tests }
    }

    pass "repeat list commands to page forward using 'return' ($testcnt tests)"
    gdb_stop_suppressing_tests;
}

proc test_list_backwards {} {
    global gdb_prompt

    set testcnt 0

    send_gdb "list list0.c:33\n"
    gdb_expect {
	-re "28\[ \t\]+foo \\(.*\\);.*37\[ \t\]+\}\r\n$gdb_prompt $" { incr testcnt }
	-re ".*$gdb_prompt $" { fail "list list0.c:33" ; gdb_suppress_tests }
	timeout { fail "list list0.c:33 (timeout)" ; gdb_suppress_tests }
    }

    send_gdb "list -\n"
    gdb_expect {
	-re "18\[ \t\]+foo \[(\]+.*\[)\]+;.*27\[ \t\]+foo \[(\]+.*\[)\]+;\r\n$gdb_prompt $" { incr testcnt }
	-re ".*$gdb_prompt $" { fail "list 18-27" ; gdb_suppress_tests }
	timeout { fail "list 18-27 (timeout)" ; gdb_suppress_tests }
    }

    send_gdb "list -\n"
    gdb_expect {
	-re "8\[ \t\]+breakpoint\[(\]\[)\];.*17\[ \t\]+foo \[(\]+.*\[)\]+;\r\n$gdb_prompt $" { incr testcnt }
	-re ".*$gdb_prompt $" { fail "list 8-17" ; gdb_suppress_tests }
	timeout { fail "list 8-17 (timeout)" ; gdb_suppress_tests }
    }

    send_gdb "list -\n"
    gdb_expect {
	-re "1\[ \t\]+#include .*7\[ \t\]+set_debug_traps\[(\]\[)\]+;\r\n$gdb_prompt $" { incr testcnt }
	-re ".*$gdb_prompt $" { fail "list 1-7" ; gdb_suppress_tests }
	timeout { fail "list 1-7 (timeout)" ; gdb_suppress_tests }
    }

    pass "$testcnt successive \"list -\" commands to page backwards"
    gdb_stop_suppressing_tests;
}

#
# Test "list first,last"
#

proc test_list_range {} {
    global gdb_prompt

    gdb_test "list list0.c:2,list0.c:5" "2\[ \t\]+\r\n3\[ \t\]+int main \[)(\]+.*5\[ \t\]+int x;" "list range; filename:line1,filename:line2"

    gdb_test "list 2,5" "2\[ \t\]+\r\n3\[ \t\]+int main \[)(\]+.*5\[ \t\]+int x;" "list range; line1,line2"

#    gdb_test     "list -1,6" 	"Line number 0 out of range; .*list0.c has 39 lines." "list range; lower bound negative"

#    gdb_test     "list -100,-40" 	"Line number -60 out of range; .*list0.c has 39 lines." "list range; both bounds negative"

    gdb_test "list 30,45" "30\[ \t\]+foo \(.*\);.*43\[ \t\]+\}" "list range; upper bound past EOF"

    gdb_test "list 45,100" "Line number 45 out of range; .*list0.c has 43 lines." "list range; both bounds past EOF"

    gdb_test "list list0.c:2,list1.c:17" "Specified start and end are in different files." "list range, must be same files"
}

#
# Test "list filename:function"
#

proc test_list_filename_and_function {} {
    global gdb_prompt

    set testcnt 0

    # gcc appears to generate incorrect debugging information for code
    # in include files, which breaks this test.
    # SunPRO cc is the second case below, it's also correct.
    send_gdb "list list0.c:main\n"
    gdb_expect {
	-re "1\[ \t\]+#include .*10\[ \t\]+x = 0;\r\n$gdb_prompt $" {
	    incr testcnt
	}
	-re "5\[ \t\]+int x;.*14\[ \t\]+foo \[(\]+.*\[)\]+;\r\n$gdb_prompt $" {
	    pass "list function in source file 1"
	}
	-re ".*$gdb_prompt $" { fail "list list0.c:main" }
	timeout { fail "list list0.c:main (timeout)" }
    }

    # Not sure what the point of having this function be unused is.
    # AIX is legitimately removing it.
    setup_xfail "rs6000-*-aix*"
    send_gdb "list list0.c:unused\n"
    gdb_expect {
	-re "40\[ \t\]+unused.*43\[ \t\]+\}\r\n$gdb_prompt $" {
	    incr testcnt
	}
	-re "37.*42\[ \t\]+\}\r\n$gdb_prompt $" {
	    incr testcnt
	}
	-re ".*$gdb_prompt $" { fail "list list0.c:unused" }
	timeout { fail "list list0.c:unused (timeout)" }
    }
    clear_xfail "rs6000-*-aix*"

    # gcc appears to generate incorrect debugging information for code
    # in include files, which breaks this test.
    # Ultrix gdb is the second case, one line different but still correct.
    # SunPRO cc is the third case.
    setup_xfail "rs6000-*-*" 1804
    setup_xfail "powerpc-*-*" 1804
    setup_xfail_format "COFF"
    send_gdb "list list0.h:foo\n"
    gdb_expect {
	-re "2\[ \t\]+including file.  This.*11\[ \t\]+bar \[(\]+.*\[)\]+;\r\n$gdb_prompt $" {
	    incr testcnt
	}
	-re "1\[ \t\]+/. An include file.*10\[ \t\]+bar \[(\]+.*\[)\]+;\r\n$gdb_prompt $" {
	    incr testcnt
	}
	-re "3\[ \t\]+.*12\[ \t\]+bar \[(\]+.*\[)\]+;\r\n$gdb_prompt $" {
	    incr testcnt
	}
	-re "No source file named list0.h.\r\n$gdb_prompt $" {
	    fail "list list0.h:foo"
	}
	-re ".*$gdb_prompt $" { fail "list list0.h:foo" }
	timeout { fail "list list0.h:foo (timeout)" }
    }

    # Ultrix gdb is the second case.
    send_gdb "list list1.c:bar\n"
    gdb_expect {
	-re "4\[ \t\]+void.*13\[ \t\]+\}\r\n$gdb_prompt $" {
	    incr testcnt
	}
	-re "4\[ \t\]+void.*12\[ \t\]*long_line ..;\r\n$gdb_prompt $" {
	    incr testcnt
	}
	-re "4\[ \t\]+void.*11\[ \t\]*\r\n$gdb_prompt $" {
	    incr testcnt
	}
	-re ".*$gdb_prompt $" { fail "list list1.c:bar" }
	timeout { fail "list list1.c:bar (timeout)" }
    }

    # Not sure what the point of having this function be unused is.
    # AIX is legitimately removing it.
    setup_xfail "rs6000-*-aix*"
    send_gdb "list list1.c:unused\n"
    gdb_expect {
	-re "12\[ \t\]+long_line \[(\]\[)\];.*13\[ \t\]+\}\r\n.*$gdb_prompt $" {
	    incr testcnt
	}
	-re "14.*19\[ \t\]+\}\r\n.*$gdb_prompt $" {
	    incr testcnt
	}
	-re ".*$gdb_prompt $" { fail "list list1.c:unused" }
	timeout { fail "list list1.c:unused (timeout)" }
    }
    clear_xfail "rs6000-*-aix*"

    pass "list filename:function ($testcnt tests)"

    # Test some invalid specs
    # The following test takes the FIXME result on most systems using
    # DWARF.  It fails to notice that main() is not in the file requested.
   
    setup_xfail "*-*-*"

# Does this actually work ANYWHERE?  I believe not, as this is an `aspect' of
# lookup_symbol(), where, when it is given a specific symtab which does not
# contain the requested symbol, it will subsequently search all of the symtabs
# for the requested symbol.

    gdb_test "list list0.c:foo" "Function \"foo\" not defined in .*list0.c" "list filename:function; wrong filename rejected"

    gdb_test "list foobar.c:main" "No source file named foobar.c.|Location not found" "list filename:function; nonexistant file"

    gdb_test "list list0.h:foobar" "Function \"foobar\" not defined.|Location not found" "list filename:function; nonexistant function"

}

proc test_forward_search {} {
	global timeout

	gdb_test "set listsize 4" ""
	# On SunOS4, this gives us lines 19-22.  On AIX, it gives us
	# lines 20-23.  This depends on whether the line number of a function
	# is considered to be the openbrace or the first statement--either one
	# is acceptable.
	gdb_test "list long_line" "24\[ \t\]+long_line .*"

	gdb_test "search 4321" " not found"

	gdb_test "search 6789" "28\[ \t\]+oof .6789.;"

	# Test that GDB won't crash if the line being searched is extremely long.

	set oldtimeout $timeout
	set timeout [expr "$timeout + 300"]
	verbose "Timeout is now $timeout seconds" 2
	gdb_test "search 1234" ".*1234.*" "search extremely long line (> 5000 chars)"
	set timeout $oldtimeout
	verbose "Timeout is now $timeout seconds" 2
}

# Start with a fresh gdb.

gdb_exit
gdb_start
gdb_reinitialize_dir $srcdir/$subdir
gdb_load ${binfile}

if [target_info exists gdb_stub] {
    gdb_step_for_stub;
}

gdb_test "set width 0" "" "set width 0"

test_listsize
get_debug_format
if [ set_listsize 10 ] then {
    test_list_include_file
    test_list_filename_and_number
    test_list_function
    test_list_forward
    test_list_backwards
    test_repeat_list_command
    test_list_range
    test_list_filename_and_function
    test_forward_search
}

remote_exec build "rm -f list0.h"
@


1.1.2.1
log
@Import of 961112 Cygnus binutils+gas+ld+gdb+gprof
@
text
@a0 942
# Copyright (C) 1992, 1994, 1995 Free Software Foundation, Inc.

# This program is free software; you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation; either version 2 of the License, or
# (at your option) any later version.
# 
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
# 
# You should have received a copy of the GNU General Public License
# along with this program; if not, write to the Free Software
# Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA 02111-1307, USA.  */

# Please email any bugs, comments, and/or additions to this file to:
# bug-gdb@@prep.ai.mit.edu

# This file was written by Fred Fish. (fnf@@cygnus.com)

if $tracelevel then {
	strace $tracelevel
}

set prms_id 0
set bug_id 0

set testfile "list"
set binfile ${objdir}/${subdir}/${testfile}
if  { [compile "-g -c ${srcdir}/${subdir}/list0.c"] != "" } {
    perror "Couldn't compile ${testfile}0.c to object"
    return -1
}
execute_anywhere "mv list0.o ${binfile}0.o"
if  { [compile "-g -c ${srcdir}/${subdir}/list1.c"] != "" } {
    perror "Couldn't compile ${testfile}1.c to object"
    return -1
}
execute_anywhere "mv list1.o ${binfile}1.o"
if  { [compile "${binfile}0.o ${binfile}1.o -o ${binfile}"] != "" } {
    perror "Couldn't link ${testfile}."
    return -1
}

# Create and source the file that provides information about the compiler
# used to compile the test case.
execute_anywhere "rm -f ${binfile}.ci"
if  { [compile "-E ${srcdir}/${subdir}/compiler.c > ${binfile}.ci"] != "" } {
    perror "Couldn't make ${binfile}.ci file"
    return -1
}
source ${binfile}.ci

#
# Local utility proc just to set and verify listsize
# Return 1 if success, 0 if fail.
#

proc set_listsize { arg } {
    global prompt

    send "set listsize $arg\n"
    expect {
	-re "set listsize $arg\[\r\n\]+$prompt $" {}
	-re ".*$prompt $" { fail "setting listsize to $arg" ; return 0 }
	timeout { fail "set listsize to $arg (timeout)" ; return 0 } 
    }
    
    send "show listsize\n"
    expect {
	-re "Number of source lines .* is $arg.\r\n.*$prompt $" {}
	-re ".*$prompt $" { fail "listsize not set to $arg" ; return 0 }
	timeout { fail "show listsize (timeout)" ; return 0 }
    }
    return 1
}

#
# Test display of listsize lines around a given line number.
#

proc test_listsize {} {
    global prompt

    # Show default size

    send "show listsize\n"
    expect {
	-re "Number of source lines gdb will list by default is 10.*$prompt $" {
	    pass "show default list size"
	}
	-re ".*$prompt $" {
	    fail "show default listsize (10)"
	}
	timeout {
	    fail "show listsize (timeout)"
	}
    }
    
    # Show the default lines
    # The second case is for optimized code, it is still correct.
    
    # This doesn't work for COFF targets.
    setup_xfail "a29k-*-udi"
    send "list\n"
    expect {
	-re "1\[ \t\]+#include \"list0.h\".*10\[ \t\]+x = 0;\r\n$prompt $" {
	    pass "list default lines around main"
	}
	-re "2.*11\[ \t\]+foo .x\[+)\]+;\r\n$prompt $" {
	    pass "list default lines around main"
	}
	-re ".*$prompt $" {
	    fail "list default lines around main"
	}
	timeout {
	    fail "list default lines around main (timeout)"
	}
    }
    
    # Ensure we can limit printouts to one line
    
    if [ set_listsize 1 ] then {
	setup_xfail "*-*-*"
	send "list 1\n"
	expect {
	    -re "1\[ \t\]+#include \"list0.h\"\r\n$prompt $" {
		pass "list line 1 with listsize 1"
	    }
	    -re "list 1\r\n$prompt $" {
		fail "list line 1 with listsize 1"
	    }
	    -re ".*$prompt $" {
		fail "list line 1 with listsize 1"
	    }
	    timeout {
		fail "list line 1 with listsize 1 (timeout)"
	    }
	}
	
	setup_xfail "*-*-*"
	send "list 2\n"
	expect {
	    -re "2\[ \t\]+\r\n$prompt $" {
		pass "list line 2 with listsize 1"
	    }
	    -re "list 2\r\n$prompt $" {
		fail "list line 2 with listsize 1"
	    }
	    -re ".*$prompt $" {
		fail "list line 2 with listsize 1"
	    }
	    timeout {
		fail "list line 2 with listsize 1 (timeout)"
	    }
	}
    }    

    # Try just two lines
    
    if [ set_listsize 2 ] then {
	send "list 1\n"
	expect {
	    -re "1\[ \t\]+#include \"list0.h\"\r\n$prompt $" {
		pass "list line 1 with listsize 2"
	    }
	    -re ".*$prompt $" {
		fail "list line 1 with listsize 2"
	    }
	    timeout {
		fail "list line 1 with listsize 2 (timeout)"
	    }
	}
	
	send "list 2\n"
	expect {
	    -re "1\[ \t\]+#include \"list0.h\"\r\n2\[ \t\]+\r\n$prompt $" {
		pass "list line 2 with listsize 2"
	    }
	    -re ".*$prompt $" {
		fail "list line 2 with listsize 2"
	    }
	    timeout {
		fail "list line 2 with listsize 2 (timeout)"
	    }
	}
	
	send "list 3\n"
	expect {
	    -re "2\[ \t\]+\r\n3\[ \t\]+main \[)(\]+\r\n$prompt $" {
		pass "list line 3 with listsize 2"
	    }
	    -re ".*$prompt $" {
		fail "list line 3 with listsize 2"
	    }
	    timeout {
		fail "list line 3 with listsize 2 (timeout)"
	    }
	}
    }    

    # Try small listsize > 1 that is an odd number
    
    if [ set_listsize 3 ] then {
	setup_xfail "*-*-*"
	send "list 1\n"
	expect {
	    -re "1\[ \t\]+#include \"list0.h\"2\[ \t\]+\r\n$prompt $" {
		pass "list line 1 with listsize 3"
	    }
	    -re "1\[ \t\]+#include \"list0.h\"\r\n$prompt $" {
		fail "list line 1 with listsize 3"
	    }
	    -re ".*$prompt $" {
		fail "list line 1 with listsize 3"
	    }
	    timeout {
		fail "list line 1 with listsize 3 (timeout)"
	    }
	}
	
	setup_xfail "*-*-*"
	send "list 2\n"
	expect {
	    -re "1\[ \t\]+#include \"list0.h\".*3\[ \t\]+main \[)(\]+\r\n$prompt $" {
		pass "list line 2 with listsize 3"
	    }
	    -re "1\[ \t\]+#include \"list0.h\"\r\n2\[ \t\]+\r\n$prompt $" {
		fail "list line 2 with listsize 3"
	    }
	    -re ".*$prompt $" {
		fail "list line 2 with listsize 3"
	    }
	    timeout {
		fail "list line 2 with listsize 3 (timeout)"
	    }
	}
	
	setup_xfail "*-*-*"
	send "list 3\n"
	expect {
	    -re "2\[ \t\]+\r\n3\[ \t\]+main \[(\]+\[)\]+\r\n4\[ \t\]+\{\r\n$prompt $" {
		pass "list line 3 with listsize 3"
	    }
	    -re "2\[ \t\]+\r\n3\[ \t\]+main \[)(\]+\r\n$prompt $" {
		fail "list line 3 with listsize 3"
	    }
	    -re ".*$prompt $" {
		fail "list line 3 with listsize 3"
	    }
	    timeout {
		fail "list line 3 with listsize 3 (timeout)"
	    }
	}
    }

    # Try small listsize > 2 that is an even number.

    if [ set_listsize 4 ] then {
	send "list 1\n"
	expect {
	    -re "1\[ \t\]+#include \"list0.h\"\r\n2\[ \t\]+\r\n$prompt $" {
		pass "list line 1 with listsize 4"
	    }
	    -re ".*$prompt $" {
		fail "list line 1 with listsize 4"
	    }
	    timeout {
		fail "list line 1 with listsize 4 (timeout)"
	    }
	}
	
	send "list 2\n"
	expect {
	    -re "1\[ \t\]+#include \"list0.h\".*3\[ \t\]+main \[)(\]+\r\n$prompt $" {
		pass "list line 2 with listsize 4"
	    }
	    -re ".*$prompt $" {
		fail "list line 2 with listsize 4"
	    }
	    timeout {
		fail "list line 2 with listsize 4 (timeout)"
	    }
	}
	
	send "list 3\n"
	expect {
	    -re "1\[ \t\]+#include \"list0.h\".*4\[ \t\]+\{\r\n$prompt $" {
		pass "list line 3 with listsize 4"
	    }
	    -re ".*$prompt $" {
		fail "list line 3 with listsize 4"
	    }
	    timeout {
		fail "list line 3 with listsize 4 (timeout)"
	    }
	}
	
	send "list 4\n"
	expect {
	    -re "2\[ \t\]+\r\n.*5\[ \t\]+int x;\r\n$prompt $" {
		pass "list line 4 with listsize 4"
	    }
	    -re ".*$prompt $" {
		fail "list line 4 with listsize 4"
	    }
	    timeout {
		fail "list line 4 with listsize 4 (timeout)"
	    }
	}
    }

    # Try a size larger than the entire file.

    if [ set_listsize 100 ] then {
	send "list 1\n"
	expect {
	    -re "1\[ \t\]+#include \"list0.h\".*\r\n42\[ \t\]+\}\r\n$prompt $" {
		pass "list line 1 with listsize 100"
	    }
	    -re ".*$prompt $" {
		fail "list line 1 with listsize 100"
	    }
	    timeout {
		fail "list line 1 with listsize 100 (timeout)"
	    }
	}
	
	send "list 10\n"
	expect {
	    -re "1\[ \t\]+#include \"list0.h\".*\r\n42\[ \t\]+\}\r\n$prompt $" {
		pass "list line 10 with listsize 100"
	    }
	    -re ".*$prompt $" {
		fail "list line 10 with listsize 100"
	    }
	    timeout {
		fail "list line 10 with listsize 100 (timeout)"
	    }
	}
    }

    # Try listsize of 0 which suppresses printing.

    send "set listsize 0\n"
    expect {
	-re "set listsize 0\[\r\n\]+$prompt $" {
	    setup_xfail "*-*-*"
	    send "show listsize\n"
	    expect {
		-re "Number of source lines .* is 0.\r\n.*$prompt $" {
		    pass "listsize of 0 displays as 0"
		}
		-re "Number of source lines .* is unlimited.\r\n.*$prompt $" {
		    fail "listsize of 0 displays as unlimited"
		}
		-re ".*$prompt $" {
		    fail "listsize not set to unlimited (0)"
		}
		timeout {
		    fail "show listsize (timeout)"
		}
	    }
	    send "list 1\n"
	    expect {
		-re "list 1\[\r\n\]+$prompt $" {
		    pass "listsize of 0 suppresses output"
		}
		-re ".*$prompt $" {
		    fail "listsize of 0 should suppress output"
		}
		timeout {
		    fail "listsize of 0 suppresses output (timeout)"
		}
	    }
	}
	-re ".*$prompt $" {
	    fail "setting listsize to 0"
	}
	timeout {
	    fail "set listsize to 0 (timeout)"
	}
    }

    # Try listsize of -1 which is special, and means unlimited.

    send "set listsize -1\n"
    expect {
	-re "set listsize -1\[\r\n\]+$prompt $" {
	    send "show listsize\n"
	    expect {
		-re "Number of source lines .* is unlimited.\r\n.*$prompt $" {
		    pass "listsize of -1 displays as unlimited"
		}
		-re ".*$prompt $" {
		    fail "listsize not set to unlimited (-1)"
		}
		timeout {
		    fail "show listsize (timeout)"
		}
	    }
	    setup_xfail "*-*-*"
	    send "list 1\n"
	    expect {
		-re "1\[ \t\]+#include .*\r\n39\[ \t\]+\}\r\n$prompt $" {
		    pass "list line 1 with unlimited listsize"
		}
		-re "list 1\[\r\n\]+$prompt $" {
		    fail "listsize of -1 (unlimited) suppresses output"
		}
		timeout {
		    fail "list line 1 with unlimited listsize (timeout)"
		}
	    }
	}
	-re ".*$prompt $" {
	    fail "setting listsize to -1"
	}
	timeout {
	    fail "set listsize to -1 (timeout)"
	}
    }
}

#
# Test "list filename:number" for C include file
#

proc test_list_include_file {} {
    global prompt

    # FIXME Fails for COFF as well, I think.
    setup_xfail "a29k-*-udi"
    send "list list0.h:1\n"
    expect {
	-re "1\[ \t\]+/\[*\]+ An include file .*5\[ \t\]+foo \[(\]+x\[)\]+\r\n$prompt $" {
	    pass "list line 1 in include file"
	}
	-re "No source file named list0.h.\r\n$prompt $" {
	    fail "list line 1 in include file"
	}
	-re ".*$prompt $" {
	    fail "list line 1 in include file"
	}
	timeout {
	    fail "list line 1 in include file (timeout)"
	}
    }

    # FIXME Fails for COFF as well, I think.
    setup_xfail "a29k-*-udi"
    send "list list0.h:100\n"
    expect {
	-re "Line number 95 out of range; .*list0.h has 36 lines.\r\n$prompt $" {
	    pass "list message for lines past EOF"
	}
	-re "No source file named list0.h.\r\n$prompt $" {
	    fail "list message for lines past EOF"
	}
	-re ".*$prompt $" {
	    fail "list message for lines past EOF"
	}
	timeout {
	    fail "list message for lines past EOF (timeout)"
	}
    }
}

#
# Test "list filename:number" for C source file
#

proc test_list_filename_and_number {} {
    global prompt

    set testcnt 0

    send "list list0.c:1\n"
    expect {
	-re "1\[ \t\]+#include \"list0.h\".*5\[ \t\]+int x;\r\n$prompt $" {
	    incr testcnt 
	}
	-re ".*$prompt $" { fail "list list0.c:1" ; return }
	timeout { fail "list list0.c:1 (timeout)" ; return }
    }
    send "list list0.c:10\n"
    expect {
	-re "5\[ \t\]+int x;.*14\[ \t\]+foo .x\[+)\]+;\r\n$prompt $" {
	    incr testcnt 
	}
	-re ".*$prompt $" { fail "list list.c:10" ; return }
	timeout { fail "list list.c:10 (timeout)" ; return }
    }
    send "list list1.c:1\n"
    expect {
	-re "1\[ \t\]+void.*5\[ \t\]+printf \[(\]+.*\[)\]+;\r\n$prompt $" {
	    incr testcnt 
	}
	-re ".*$prompt $" { fail "list list1.c:1" ; return }
	timeout { fail "list list1.c:1 (timeout)" ; return }
    }
    send "list list1.c:12\n"
    expect {
	-re "7\[ \t\]+long_line \[(\]+.*\[)\]+;.*14\[ \t\]+\}\r\n.*$prompt $" {
	    incr testcnt 
	}
	-re ".*$prompt $" { fail "list list1.c:12" ; return }
	timeout { fail "list list1.c:12 (timeout)" ; return }
    }
    pass "list filename:number ($testcnt tests)"
}

#
# Test "list function" for C source file
#

proc test_list_function {} {
    global prompt
    global gcc_compiled

    # gcc appears to generate incorrect debugging information for code
    # in include files, which breaks this test.
    # SunPRO cc is the second case below, it's also correct.
    setup_xfail "a29k-*-udi"
    send "list main\n"
    expect {
	-re "1\[ \t\]+#include .*8\[ \t\]+breakpoint\[(\]\[)\]+;\r\n$prompt $" {
	    pass "list function in source file 1"
	}
	-re "5\[ \t\]+int x;.*14\[ \t\]+foo \[(\]+.*\[)\]+;\r\n$prompt $" {
	    pass "list function in source file 1"
	}
	-re ".*$prompt $" { fail "list main" ; return }
	timeout { fail "list main (timeout)" ; return }
    }

    # Ultrix gdb takes the second case below; it's also correct.
    # SunPRO cc is the third case.
    send "list bar\n"
    expect {
	-re "1\[ \t\]+void.*8\[ \t\]+\}\r\n$prompt $" {
	    pass "list function in source file 2"
	}
	-re "1\[ \t\]+void.*7\[ \t\]*long_line ..;\r\n$prompt $" {
	    pass "list function in source file 2"
	}
	-re "1\[ \t\]+void.*7\[ \t\]*long_line ..;.*9\[ \t\]*\r\n$prompt $" {
	    pass "list function in source file 2"
	}
	-re ".*$prompt $" { fail "list bar" ; return }
	timeout { fail "list bar (timeout)" ; return }
    }

    # Test "list function" for C include file
    # Ultrix gdb is the second case, still correct.
    # SunPRO cc is the third case.
    setup_xfail "powerpc-*-*"
    send "list foo\n"
    expect {
	-re "2\[ \t\]+including file.*11\[ \t\]+bar \[(\]+.*\[)\]+;\r\n$prompt $" {
	    pass "list function in include file"
	}
	-re "1\[ \t\]+/. An include file.*10\[ \t\]+bar \[(\]+.*\[)\]+;\r\n$prompt $" {
	    pass "list function in include file"
	}
	-re "3\[ \t\]+.*12\[ \t\]+bar \[(\]+.*\[)\]+;\r\n$prompt $" {
	    pass "list function in include file"
	}
	-re ".*main \[)(\]+.*$prompt $" {
	    fail "list function in include file"
	}
	-re ".*$prompt $" { fail "list foo (in include file)" ; return }
	timeout { fail "list foo (timeout)" ; return }
    }
}

proc test_list_forward {} {
    global prompt

    set testcnt 0

    send "list list0.c:10\n"
    expect {
	-re "5\[ \t\]+int x;.*14\[ \t\]+foo \[(\]+.*\[)\]+;\r\n$prompt $" { incr testcnt }
	-re ".*$prompt $" { fail "list list0.c:10" ; return }
	timeout { fail "list list0.c:10 (timeout)" ; return }
    }

    send "list\n"
    expect {
	-re "15\[ \t\]+foo \[(\]+.*\[)\]+;.*24\[ \t\]+foo \[(\]+.*\[)\]+;\r\n$prompt $" { incr testcnt }
	-re ".*$prompt $" { fail "list 15-24" ; return }
	timeout { fail "list 15-24 (timeout)" ; return }
    }

    send "list\n"
    expect {
	-re "25\[ \t\]+foo \[(\]+.*\[)\]+;.*34\[ \t\]+foo \[(\]+.*\[)\]+;\r\n$prompt $" { incr testcnt }
	-re ".*$prompt $" { fail "list 25-34" ; return }
	timeout { fail "list 25-34 (timeout)" ; return }
    }

    send "list\n"
    expect {
	-re "35\[ \t\]+foo \[(\]+.*\[)\]+;.*42\[ \t\]+\}\r\n$prompt $" { incr testcnt }
	-re ".*$prompt $" { fail "list 35-42" ; return }
	timeout { fail "list 35-42 (timeout)" ; return }
    }

    pass "successive list commands to page forward ($testcnt tests)"
}

proc test_list_backwards {} {
    global prompt

    set testcnt 0

    send "list list0.c:33\n"
    expect {
	-re "28\[ \t\]+foo \[(\]+.*\[)\]+;.*37\[ \t\]+\r\n$prompt $" { incr testcnt }
	-re ".*$prompt $" { fail "list list0.c:33" ; return }
	timeout { fail "list list0.c:33 (timeout)" ; return }
    }

    send "list -\n"
    expect {
	-re "18\[ \t\]+foo \[(\]+.*\[)\]+;.*27\[ \t\]+foo \[(\]+.*\[)\]+;\r\n$prompt $" { incr testcnt }
	-re ".*$prompt $" { fail "list 18-27" ; return }
	timeout { fail "list 18-27 (timeout)" ; return }
    }

    send "list -\n"
    expect {
	-re "8\[ \t\]+breakpoint\[(\]\[)\];.*17\[ \t\]+foo \[(\]+.*\[)\]+;\r\n$prompt $" { incr testcnt }
	-re ".*$prompt $" { fail "list 8-17" ; return }
	timeout { fail "list 8-17 (timeout)" ; return }
    }

    send "list -\n"
    expect {
	-re "1\[ \t\]+#include .*7\[ \t\]+set_debug_traps\[(\]\[)\]+;\r\n$prompt $" { incr testcnt }
	-re ".*$prompt $" { fail "list 1-7" ; return }
	timeout { fail "list 1-7 (timeout)" ; return }
    }

    pass "$testcnt successive \"list -\" commands to page backwards"
}

#
# Test "list first,last"
#

proc test_list_range {} {
    global prompt

    send "list list0.c:2,list0.c:5\n"
    expect {
	-re "2\[ \t\]+\r\n3\[ \t\]+main \[)(\]+.*5\[ \t\]+int x;\r\n$prompt $" {
	    pass "list range; filename:line1,filename:line2"
	}
	-re ".*$prompt $" { fail "list list0.c:2,list0.c:5" }
	timeout { fail "list list0.c:2,list0.c:5 (timeout)" }
    }

    send "list 2,5\n"
    expect {
	-re "2\[ \t\]+\r\n3\[ \t\]+main \[)(\]+.*5\[ \t\]+int x;\r\n$prompt $" {
	    pass "list range; line1,line2"
	}
	-re ".*$prompt $" { fail "list 2,5" }
	timeout { fail "list 2,5 (timeout)" }
    }

    #send "list -1,6\n"
    #expect {
	#-re "Line number 0 out of range; .*list0.c has 39 lines.\r\n$prompt $" {
	    #pass "list range; lower bound negative"
	#}
	#-re ".*$prompt $" { fail "list -1,6" }
	#timeout { fail "list -1,6 (timeout)" }
    #}

    #send "list -100,-40\n"
    #expect {
	#-re "Line number -60 out of range; .*list0.c has 39 lines.\r\n$prompt $" {
	    #pass "list range; both bounds negative"
	#}
	#-re ".*$prompt $" { fail "-100,-40" }
	#timeout { fail "-100,-40 (timeout)" }
    #}

    send "list 30,43\n"
    expect {
	-re "30\[ \t\]+foo \[(\]+.*\[)\]+;.*42\[ \t\]+\}\r\n$prompt $" {
	    pass "list range; upper bound past EOF"
	}
	-re ".*$prompt $" { fail "list 30,43" }
	timeout { fail "list 30,43 (timeout)" }
    }

    send "list 43,100\n"
    expect {
	-re "Line number 43 out of range; .*list0.c has 42 lines.\r\n$prompt $" {
	    pass "list range; both bounds past EOF"
	}
	-re ".*$prompt $" { fail "43,100" }
	timeout { fail "43,100 (timeout)" }
    }

    send "list list0.c:2,list1.c:17\n"
    expect {
	-re "Specified start and end are in different files.\r\n$prompt $" {
	    pass "list range, must be same files"
	}
	-re ".*$prompt $" { fail "list0.c:2,list1.c:17" }
	timeout { fail "list0.c:2,list1.c:17 (timeout)" }
    }
}

#
# Test "list filename:function"
#

proc test_list_filename_and_function {} {
    global prompt

    set testcnt 0

    # gcc appears to generate incorrect debugging information for code
    # in include files, which breaks this test.
    # SunPRO cc is the second case below, it's also correct.
    setup_xfail "a29k-*-udi"
    send "list list0.c:main\n"
    expect {
	-re "1\[ \t\]+#include .*8\[ \t\]+breakpoint\[(\]\[)\]+;\r\n$prompt $" {
	    incr testcnt
	}
	-re "5\[ \t\]+int x;.*14\[ \t\]+foo \[(\]+.*\[)\]+;\r\n$prompt $" {
	    pass "list function in source file 1"
	}
	-re ".*$prompt $" { fail "list list0.c:main" }
	timeout { fail "list list0.c:main (timeout)" }
    }

    # The i960 and a29k-amd-udi are the second case

    # Not sure what the point of having this function be unused is.
    # AIX is legitimately removing it.
    setup_xfail "rs6000-*-aix*"
    send "list list0.c:unused\n"
    expect {
	-re "36\[ \t\]+\}.*42\[ \t\]+\}\r\n$prompt $" {
	    incr testcnt
	}
	-re "37.*42\[ \t\]+\}\r\n$prompt $" {
	    incr testcnt
	}
	-re ".*$prompt $" { fail "list list0.c:unused" }
	timeout { fail "list list0.c:unused (timeout)" }
    }
    clear_xfail "rs6000-*-aix*"

    # gcc appears to generate incorrect debugging information for code
    # in include files, which breaks this test.
    # Ultrix gdb is the second case, one line different but still correct.
    # SunPRO cc is the third case.
    setup_xfail "rs6000-*-*" 1804
    setup_xfail "powerpc-*-*" 1804
    # FIXME Fails for COFF as well, I think.
    setup_xfail "a29k-*-udi"
    send "list list0.h:foo\n"
    expect {
	-re "2\[ \t\]+including file.  This.*11\[ \t\]+bar \[(\]+.*\[)\]+;\r\n$prompt $" {
	    incr testcnt
	}
	-re "1\[ \t\]+/. An include file.*10\[ \t\]+bar \[(\]+.*\[)\]+;\r\n$prompt $" {
	    incr testcnt
	}
	-re "3\[ \t\]+.*12\[ \t\]+bar \[(\]+.*\[)\]+;\r\n$prompt $" {
	    incr testcnt
	}
	-re "No source file named list0.h.\r\n$prompt $" {
	    fail "list list0.h:foo"
	}
	-re ".*$prompt $" { fail "list list0.h:foo" }
	timeout { fail "list list0.h:foo (timeout)" }
    }

    # Ultrix gdb is the second case.
    # a29k-amd-udi is the third case.
    send "list list1.c:bar\n"
    expect {
	-re "1\[ \t\]+void.*8\[ \t\]+\}\r\n$prompt $" {
	    incr testcnt
	}
	-re "1\[ \t\]+void.*7\[ \t\]*long_line ..;\r\n$prompt $" {
	    incr testcnt
	}
	-re "1\[ \t\]+void.*9\[ \t\]*\r\n$prompt $" {
	    incr testcnt
	}
	-re ".*$prompt $" { fail "list list1.c:bar" }
	timeout { fail "list list1.c:bar (timeout)" }
    }

    # The i960 and a29k-amd-udi are the second case

    # Not sure what the point of having this function be unused is.
    # AIX is legitimately removing it.
    setup_xfail "rs6000-*-aix*"
    send "list list1.c:unused\n"
    expect {
	-re "7\[ \t\]+long_line \[(\]\[)\];.*14\[ \t\]+\}\r\n.*$prompt $" {
	    incr testcnt
	}
	-re "9.*14\[ \t\]+\}\r\n.*$prompt $" {
	    incr testcnt
	}
	-re ".*$prompt $" { fail "list list1.c:unused" }
	timeout { fail "list list1.c:unused (timeout)" }
    }
    clear_xfail "rs6000-*-aix*"

    pass "list filename:function ($testcnt tests)"

    # Test some invalid specs
    # The following test takes the FIXME result on most systems using
    # DWARF.  It fails to notice that main() is not in the file requested.
   
    setup_xfail "*-*-*"

# Does this actually work ANYWHERE?  I believe not, as this is an `aspect' of
# lookup_symbol(), where, when it is given a specific symtab which does not
# contain the requested symbol, it will subsequently search all of the symtabs
# for the requested symbol.

    send "list list0.c:foo\n"
    expect {
	-re "Function \"foo\" not defined in .*list0.c\r\n$prompt $" {
	    pass "list filename:function; wrong filename rejected"
	}
	-re "2\[ \t\]+including file.*11\[ \t\]+bar \[(\]+.*\[)\]+;\r\n$prompt $" {
	    fail "list filename:function; wrong filename not rejected"
	}
	-re ".*main \[)(\]+.*$prompt $" {
	    fail "list filename:function; wrong filename not rejected"
	}
	-re ".*$prompt $" {
	    fail "list filename:function; wrong filename not rejected"
	}
	timeout {
	    fail "list filename:function; wrong filename (timeout)"
	}
    }

    send "list foobar.c:main\n"
    expect {
	-re "No source file named foobar.c.\r\n$prompt $" {
	    pass "list filename:function; nonexistant file"
	}
	-re ".*$prompt $" {
	    fail "list filename:function; nonexistant file"
	}
	timeout {
	    fail "list filename:function; nonexistant file (timeout)"
	}
    }

    send "list list0.h:foobar\n"
    expect {
	-re "Function \"foobar\" not defined.\r\n$prompt $" {
	    pass "list filename:function; nonexistant function"
	}
	-re "No source file named list0.h.\r\n$prompt $" {
	    fail "list filename:function; nonexistant function"
	}
	-re ".*$prompt $" {
	    fail "list filename:function; nonexistant function"
	}
	timeout {
	    fail "list filename:function; nonexistant function (timeout)"
	}
    }

}

proc test_forward_search {} {
	global timeout

	gdb_test "set listsize 4" ""
	# On SunOS4, this gives us lines 19-22.  On AIX, it gives us
	# lines 20-23.  This depends on whether the line number of a function
	# is considered to be the openbrace or the first statement--either one
	# is acceptable.
	gdb_test "list long_line" "20\[ \t\]+long_line .*"

	gdb_test "search 4321" " not found"

	gdb_test "search 6789" "24\[ \t\]+oof .6789.;"

	# Test that GDB won't crash if the line being searched is extremely long.

	set oldtimeout $timeout
	set timeout [expr "$timeout + 300"]
	verbose "Timeout is now $timeout seconds" 2
	match_max 10000
	gdb_test "search 1234" ".*1234.*" "search extremely long line (> 5000 chars)"
	set timeout $oldtimeout
	verbose "Timeout is now $timeout seconds" 2
}

# Start with a fresh gdb.

gdb_exit
gdb_start
gdb_reinitialize_dir $srcdir/$subdir
gdb_load ${binfile}

if $usestubs {
    send "step\n"
    # if use stubs step out of the breakpoint() function.
    expect {
        -re "main.* at .*$prompt $" {}
        timeout { fail "single step at breakpoint() (timeout)" ; return 0 }
    }
}

send "set width 0\n"
expect -re "$prompt $"

test_listsize
if [ set_listsize 10 ] then {
    test_list_include_file
    test_list_filename_and_number
    test_list_function
    test_list_forward
    test_list_backwards
    test_list_range
    test_list_filename_and_function
    test_forward_search
}
@
