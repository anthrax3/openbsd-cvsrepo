head	1.1;
branch	1.1.1;
access;
symbols
	OPENBSD_6_0:1.1.1.1.0.50
	OPENBSD_6_0_BASE:1.1.1.1
	OPENBSD_5_9:1.1.1.1.0.46
	OPENBSD_5_9_BASE:1.1.1.1
	OPENBSD_5_8:1.1.1.1.0.48
	OPENBSD_5_8_BASE:1.1.1.1
	OPENBSD_5_7:1.1.1.1.0.40
	OPENBSD_5_7_BASE:1.1.1.1
	OPENBSD_5_6:1.1.1.1.0.44
	OPENBSD_5_6_BASE:1.1.1.1
	OPENBSD_5_5:1.1.1.1.0.42
	OPENBSD_5_5_BASE:1.1.1.1
	OPENBSD_5_4:1.1.1.1.0.38
	OPENBSD_5_4_BASE:1.1.1.1
	OPENBSD_5_3:1.1.1.1.0.36
	OPENBSD_5_3_BASE:1.1.1.1
	OPENBSD_5_2:1.1.1.1.0.34
	OPENBSD_5_2_BASE:1.1.1.1
	OPENBSD_5_1_BASE:1.1.1.1
	OPENBSD_5_1:1.1.1.1.0.32
	OPENBSD_5_0:1.1.1.1.0.30
	OPENBSD_5_0_BASE:1.1.1.1
	OPENBSD_4_9:1.1.1.1.0.28
	OPENBSD_4_9_BASE:1.1.1.1
	OPENBSD_4_8:1.1.1.1.0.26
	OPENBSD_4_8_BASE:1.1.1.1
	OPENBSD_4_7:1.1.1.1.0.22
	OPENBSD_4_7_BASE:1.1.1.1
	OPENBSD_4_6:1.1.1.1.0.24
	OPENBSD_4_6_BASE:1.1.1.1
	OPENBSD_4_5:1.1.1.1.0.20
	OPENBSD_4_5_BASE:1.1.1.1
	OPENBSD_4_4:1.1.1.1.0.18
	OPENBSD_4_4_BASE:1.1.1.1
	OPENBSD_4_3:1.1.1.1.0.16
	OPENBSD_4_3_BASE:1.1.1.1
	OPENBSD_4_2:1.1.1.1.0.14
	OPENBSD_4_2_BASE:1.1.1.1
	OPENBSD_4_1:1.1.1.1.0.12
	OPENBSD_4_1_BASE:1.1.1.1
	OPENBSD_4_0:1.1.1.1.0.10
	OPENBSD_4_0_BASE:1.1.1.1
	OPENBSD_3_9:1.1.1.1.0.8
	OPENBSD_3_9_BASE:1.1.1.1
	OPENBSD_3_8:1.1.1.1.0.6
	OPENBSD_3_8_BASE:1.1.1.1
	OPENBSD_3_7:1.1.1.1.0.4
	OPENBSD_3_7_BASE:1.1.1.1
	GDB_6_3:1.1.1.1
	OPENBSD_3_6:1.1.1.1.0.2
	OPENBSD_3_6_BASE:1.1.1.1
	GDB_6_1:1.1.1.1
	FSF:1.1.1;
locks; strict;
comment	@ * @;


1.1
date	2004.05.21.19.18.04;	author kettenis;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	2004.05.21.19.18.04;	author kettenis;	state Exp;
branches;
next	;


desc
@@


1.1
log
@Initial revision
@
text
@/* Source for debugging optimimzed code test.

    cc -g -O -o optimize optimize.c
*/
int callee();
int test_opt;

int main()
{
   int a,b,c,d,e,f,g,h;

   a = 10;;

   /* Value propagate
    */
   b = 2 * a + 1;
   c = 3 * b + 2;

   /* Re-use expressions
    */
   d = (2 * a + 1) * (3 * b + 2);
   e = (2 * a + 1) * (3 * b + 2);

   /* Create dead stores--do lines still exist?
    */
   d = (2 * a + 1) * (3 * b + 2);
   e = (2 * a + 1) * (3 * b + 2);
   d = (2 * a + 1) * (3 * b + 2);
   e = (2 * a + 1) * (3 * b + 2);

   /* Alpha and psi motion
    */
   if( test_opt ) {
       f = e - d;
       f = f--;
   }
   else {
       f = e - d;
       f = f + d * e;
   }

   /* Chi and Rho motion
    */
   h = 0;
   do {
       h++;
       a = b * c + d * e;  /* Chi */
       f = f + d * e;
       g = f + d * e;      /* Rho */
       callee( g+1 );
       test_opt = (test_opt != 1);  /* Cycles */
   } while( g && h < 10);

   /* Opps for tail recursion, unrolling,
    * folding, evaporating
    */
   for( a = 0; a < 100; a++ ) {
       callee( callee ( callee( a )));
       callee( callee ( callee( a )));
       callee( callee ( callee( a )));
   }

   return callee( test_opt );
}

/* defined late to keep line numbers the same
*/
int callee( x )
    int x;      /* not used! */
{
    test_opt++; /* side effect */

    return test_opt;
}

/* end */@


1.1.1.1
log
@GDB 6.1 (excluding .info files)
@
text
@@
