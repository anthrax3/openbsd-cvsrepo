head	1.1;
branch	1.1.1;
access;
symbols
	OPENBSD_6_0:1.1.1.1.0.50
	OPENBSD_6_0_BASE:1.1.1.1
	OPENBSD_5_9:1.1.1.1.0.46
	OPENBSD_5_9_BASE:1.1.1.1
	OPENBSD_5_8:1.1.1.1.0.48
	OPENBSD_5_8_BASE:1.1.1.1
	OPENBSD_5_7:1.1.1.1.0.40
	OPENBSD_5_7_BASE:1.1.1.1
	OPENBSD_5_6:1.1.1.1.0.44
	OPENBSD_5_6_BASE:1.1.1.1
	OPENBSD_5_5:1.1.1.1.0.42
	OPENBSD_5_5_BASE:1.1.1.1
	OPENBSD_5_4:1.1.1.1.0.38
	OPENBSD_5_4_BASE:1.1.1.1
	OPENBSD_5_3:1.1.1.1.0.36
	OPENBSD_5_3_BASE:1.1.1.1
	OPENBSD_5_2:1.1.1.1.0.34
	OPENBSD_5_2_BASE:1.1.1.1
	OPENBSD_5_1_BASE:1.1.1.1
	OPENBSD_5_1:1.1.1.1.0.32
	OPENBSD_5_0:1.1.1.1.0.30
	OPENBSD_5_0_BASE:1.1.1.1
	OPENBSD_4_9:1.1.1.1.0.28
	OPENBSD_4_9_BASE:1.1.1.1
	OPENBSD_4_8:1.1.1.1.0.26
	OPENBSD_4_8_BASE:1.1.1.1
	OPENBSD_4_7:1.1.1.1.0.22
	OPENBSD_4_7_BASE:1.1.1.1
	OPENBSD_4_6:1.1.1.1.0.24
	OPENBSD_4_6_BASE:1.1.1.1
	OPENBSD_4_5:1.1.1.1.0.20
	OPENBSD_4_5_BASE:1.1.1.1
	OPENBSD_4_4:1.1.1.1.0.18
	OPENBSD_4_4_BASE:1.1.1.1
	OPENBSD_4_3:1.1.1.1.0.16
	OPENBSD_4_3_BASE:1.1.1.1
	OPENBSD_4_2:1.1.1.1.0.14
	OPENBSD_4_2_BASE:1.1.1.1
	OPENBSD_4_1:1.1.1.1.0.12
	OPENBSD_4_1_BASE:1.1.1.1
	OPENBSD_4_0:1.1.1.1.0.10
	OPENBSD_4_0_BASE:1.1.1.1
	OPENBSD_3_9:1.1.1.1.0.8
	OPENBSD_3_9_BASE:1.1.1.1
	OPENBSD_3_8:1.1.1.1.0.6
	OPENBSD_3_8_BASE:1.1.1.1
	OPENBSD_3_7:1.1.1.1.0.4
	OPENBSD_3_7_BASE:1.1.1.1
	GDB_6_3:1.1.1.1
	OPENBSD_3_6:1.1.1.1.0.2
	OPENBSD_3_6_BASE:1.1.1.1
	GDB_6_1:1.1.1.1
	FSF:1.1.1;
locks; strict;
comment	@# @;


1.1
date	2004.05.21.19.18.08;	author kettenis;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	2004.05.21.19.18.08;	author kettenis;	state Exp;
branches;
next	;


desc
@@


1.1
log
@Initial revision
@
text
@# Copyright (C) 1997, 1998 Free Software Foundation, Inc.

# This program is free software; you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation; either version 2 of the License, or
# (at your option) any later version.
# 
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
# 
# You should have received a copy of the GNU General Public License
# along with this program; if not, write to the Free Software
# Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA 02111-1307, USA.  */

# Please email any bugs, comments, and/or additions to this file to:
# bug-gdb@@prep.ai.mit.edu

# GDB tests for sized enumerations

# This is aimed at HP-UX systems.  The HP C compiler
# allows specifying "char" or "short" for an enum, to
# indicate that it is 1 or 2 bytes long.

# This file was written by Satish Pai <pai@@apollo.hp.com>
# 1997-09-24

if $tracelevel then {
	strace $tracelevel
	}

#
# test running programs
#
set prms_id 0
set bug_id 0

if { [skip_hp_tests] } then { continue }

set testfile "sized-enum"
set srcfile ${testfile}.c
set binfile ${objdir}/${subdir}/${testfile}

if [get_compiler_info ${binfile}] {
    return -1
}

if { $gcc_compiled } then { continue }
if {$hp_aCC_compiler} {continue}

if  { [gdb_compile "${srcdir}/${subdir}/${srcfile}" "${binfile}" executable {debug}] != "" } {
     gdb_suppress_entire_file "Testcase compile failed, so all tests in this file will automatically fail."
}

gdb_exit
gdb_start
gdb_reinitialize_dir $srcdir/$subdir
gdb_load ${binfile}

#
# set it up at a breakpoint so we can play with the variable values
#

if ![runto_main] then {
    perror "couldn't run to breakpoint"
    continue
}

# set a breakpoint and go there
send_gdb "break 34\n"   
gdb_expect {   
   -re "Breakpoint.*line 34.*$gdb_prompt $" { pass "set break 34" }
   -re "$gdb_prompt $"                     { fail "set break 34" }
   timeout                             { fail "(timeout) set break 34" }
}
send_gdb "continue\n"   
gdb_expect {   
   -re "Continuing\\.\r\n\r\nBreakpoint \[0-9\]*, main....at.*sized-enum\\.c:34\r\n34.*\r\n$gdb_prompt $" { pass "continue" }
   -re "$gdb_prompt $"                     { fail "continue" }
   timeout                             { fail "(timeout) continue" }
}

# print stuff
send_gdb "print normal\n"   
gdb_expect {   
   -re "\\$\[0-9\]* = \\{red, blue, green\\}.*$gdb_prompt $" { pass "print normal" }
   -re "$gdb_prompt $"                     { fail "print normal" }
   timeout                             { fail "(timeout) print normal" }
}
send_gdb "print small\n"   
gdb_expect {   
   -re "\\$\[0-9\]* = \\{pink, cyan, grey\\}.*$gdb_prompt $" { pass "print small" }
   -re "$gdb_prompt $"                     { fail "print small" }
   timeout                             { fail "(timeout) print small" }
}
send_gdb "print tiny\n"   
gdb_expect {   
   -re "\\$\[0-9\]* = \\{orange, yellow, brown\\}.*$gdb_prompt $" { pass "print tiny" }
   -re "$gdb_prompt $"                     { fail "print tiny" }
   timeout                             { fail "(timeout) print tiny" }
}

# print type sizes
send_gdb "print sizeof (Normal)\n"   
gdb_expect {   
   -re "\\$\[0-9\]* = 4.*$gdb_prompt $" { pass "print sizeof (Normal)" }
   -re "$gdb_prompt $"                     { fail "print sizeof (Normal)" }
   timeout                             { fail "(timeout) print sizeof (Normal)" }
}
send_gdb "print sizeof (Small)\n"   
gdb_expect {   
   -re "\\$\[0-9\]* = 2.*$gdb_prompt $" { pass "print sizeof (Small)" }
   -re "$gdb_prompt $"                     { fail "print sizeof (Small)" }
   timeout                             { fail "(timeout) print sizeof (Small)" }
}
send_gdb "print sizeof (Tiny)\n"   
gdb_expect {   
   -re "\\$\[0-9\]* = 1.*$gdb_prompt $" { pass "print sizeof (Tiny)" }
   -re "$gdb_prompt $"                     { fail "print sizeof (Tiny)" }
   timeout                             { fail "(timeout) print sizeof (Tiny)" }
}

# print types
send_gdb "ptype normal\n"   
gdb_expect {   
   -re "type = enum Normal \\{red, blue, green\\} \\\[3\\\].*$gdb_prompt $" { pass "ptype normal" }
   -re "$gdb_prompt $"                     { fail "ptype normal" }
   timeout                             { fail "(timeout) ptype normal" }
}
send_gdb "ptype small\n"   
gdb_expect {   
   -re "type = short enum Small \\{pink, cyan, grey\\} \\\[3\\\].*$gdb_prompt $" { pass "ptype small" }
   -re "$gdb_prompt $"                     { fail "ptype small" }
   timeout                             { fail "(timeout) ptype small" }
}
send_gdb "ptype tiny\n"   
gdb_expect {   
   -re "type = char enum Tiny \\{orange, yellow, brown\\} \\\[3\\\].*$gdb_prompt $" { pass "ptype tiny" }
   -re "$gdb_prompt $"                     { fail "ptype tiny" }
   timeout                             { fail "(timeout) ptype tiny" }
}

# convert to int
send_gdb "print (int) blue\n"   
gdb_expect {   
   -re "\\$\[0-9\]* = 1.*$gdb_prompt $" { pass "print (int) blue" }
   -re "$gdb_prompt $"                     { fail "print (int) blue" }
   timeout                             { fail "(timeout) print (int) blue" }
}
send_gdb "print (int) cyan\n"   
gdb_expect {   
   -re "\\$\[0-9\]* = 1.*$gdb_prompt $" { pass "print (int) cyan" }
   -re "$gdb_prompt $"                     { fail "print (int) cyan" }
   timeout                             { fail "(timeout) print (int) cyan" }
}
send_gdb "print (int) yellow\n"   
gdb_expect {   
   -re "\\$\[0-9\]* = 1.*$gdb_prompt $" { pass "print (int) yellow" }
   -re "$gdb_prompt $"                     { fail "print (int) yellow" }
   timeout                             { fail "(timeout) print (int) yellow" }
}



@


1.1.1.1
log
@GDB 6.1 (excluding .info files)
@
text
@@
