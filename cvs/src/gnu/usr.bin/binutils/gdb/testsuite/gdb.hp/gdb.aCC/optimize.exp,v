head	1.1;
branch	1.1.1;
access;
symbols
	OPENBSD_6_1:1.1.1.1.0.52
	OPENBSD_6_1_BASE:1.1.1.1
	OPENBSD_6_0:1.1.1.1.0.50
	OPENBSD_6_0_BASE:1.1.1.1
	OPENBSD_5_9:1.1.1.1.0.46
	OPENBSD_5_9_BASE:1.1.1.1
	OPENBSD_5_8:1.1.1.1.0.48
	OPENBSD_5_8_BASE:1.1.1.1
	OPENBSD_5_7:1.1.1.1.0.40
	OPENBSD_5_7_BASE:1.1.1.1
	OPENBSD_5_6:1.1.1.1.0.44
	OPENBSD_5_6_BASE:1.1.1.1
	OPENBSD_5_5:1.1.1.1.0.42
	OPENBSD_5_5_BASE:1.1.1.1
	OPENBSD_5_4:1.1.1.1.0.38
	OPENBSD_5_4_BASE:1.1.1.1
	OPENBSD_5_3:1.1.1.1.0.36
	OPENBSD_5_3_BASE:1.1.1.1
	OPENBSD_5_2:1.1.1.1.0.34
	OPENBSD_5_2_BASE:1.1.1.1
	OPENBSD_5_1_BASE:1.1.1.1
	OPENBSD_5_1:1.1.1.1.0.32
	OPENBSD_5_0:1.1.1.1.0.30
	OPENBSD_5_0_BASE:1.1.1.1
	OPENBSD_4_9:1.1.1.1.0.28
	OPENBSD_4_9_BASE:1.1.1.1
	OPENBSD_4_8:1.1.1.1.0.26
	OPENBSD_4_8_BASE:1.1.1.1
	OPENBSD_4_7:1.1.1.1.0.22
	OPENBSD_4_7_BASE:1.1.1.1
	OPENBSD_4_6:1.1.1.1.0.24
	OPENBSD_4_6_BASE:1.1.1.1
	OPENBSD_4_5:1.1.1.1.0.20
	OPENBSD_4_5_BASE:1.1.1.1
	OPENBSD_4_4:1.1.1.1.0.18
	OPENBSD_4_4_BASE:1.1.1.1
	OPENBSD_4_3:1.1.1.1.0.16
	OPENBSD_4_3_BASE:1.1.1.1
	OPENBSD_4_2:1.1.1.1.0.14
	OPENBSD_4_2_BASE:1.1.1.1
	OPENBSD_4_1:1.1.1.1.0.12
	OPENBSD_4_1_BASE:1.1.1.1
	OPENBSD_4_0:1.1.1.1.0.10
	OPENBSD_4_0_BASE:1.1.1.1
	OPENBSD_3_9:1.1.1.1.0.8
	OPENBSD_3_9_BASE:1.1.1.1
	OPENBSD_3_8:1.1.1.1.0.6
	OPENBSD_3_8_BASE:1.1.1.1
	OPENBSD_3_7:1.1.1.1.0.4
	OPENBSD_3_7_BASE:1.1.1.1
	GDB_6_3:1.1.1.1
	OPENBSD_3_6:1.1.1.1.0.2
	OPENBSD_3_6_BASE:1.1.1.1
	GDB_6_1:1.1.1.1
	FSF:1.1.1;
locks; strict;
comment	@# @;


1.1
date	2004.05.21.19.18.04;	author kettenis;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	2004.05.21.19.18.04;	author kettenis;	state Exp;
branches;
next	;


desc
@@


1.1
log
@Initial revision
@
text
@# Copyright (C) 1998 Free Software Foundation, Inc.

# This program is free software; you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation; either version 2 of the License, or
# (at your option) any later version.
# 
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
# 
# You should have received a copy of the GNU General Public License
# along with this program; if not, write to the Free Software
# Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA 02111-1307, USA.  */

# Please email any bugs, comments, and/or additions to this file to:
# bug-gdb@@prep.ai.mit.edu

# optimize.exp -- Expect script for testing apps compiled with -O

# There is no DOC support for gdb yet, return 0 for now.
return 0

global timeout

# use this to debug:
#
#log_user 1

if $tracelevel then {
    strace $tracelevel
}

if { [skip_hp_tests] } then { continue }

set testfile optimize
set srcfile ${testfile}.c
set binfile ${objdir}/${subdir}/${testfile}

if [get_compiler_info ${binfile}] {
    return -1;
}

 
if { $gcc_compiled } then { continue }


# Vanilla -O, which is the same as +O2
#
if  { [gdb_compile "${srcdir}/${subdir}/${srcfile}" "${binfile}" executable {debug optimize=+O2}] != "" } {
     gdb_suppress_entire_file "Testcase compile failed, so all tests in this file will automatically fail."
}


gdb_exit
gdb_start
gdb_reinitialize_dir $srcdir/$subdir

send_gdb "file $binfile\n"
gdb_expect {
    -re ".*no debugging symbols found.*$gdb_prompt $" {
        fail "Didn't find debug symbols; CHFts23488" 
    }
    -re ".*No header section (PXDB data).*$gdb_prompt $" {
        fail "pointless warning"
    }
    -re ".*done.*$gdb_prompt $" {
        pass "load debug symbols"
    }
    timeout { fail "timeout on file" }
}

# Two lines at the same place after opt.
#
gdb_test "b 28"   ".*"
gdb_test "b 26"   ".*also set at.*" "same line"

gdb_test "b 47"   ".*"
gdb_test "b 48"   ".*also set at.*" "same line"

gdb_test "tb main" ".*"

set old_timeout $timeout
set timeout [expr "$timeout + 200"]
send_gdb "r\n"
gdb_expect {
    -re ".*No header section (PXDB data).*$gdb_prompt $" {
        fail "pointless warning"
    }
    -re ".*main.*2\[12].*$gdb_prompt $" {
        # All the lines before line 21 or 22 are 
        # evaporated by the compiler.
        # 
        pass "hit main"
    }
    -re ".*$gdb_prompt $" {
        fail "didn't hit main"
    }
    timeout { fail "timeout on run" }
}
set timeout $old_timeout

gdb_test "c" ".*Breakpoint 1.*33.*"
gdb_test "c" ".*51.*"
gdb_test "cle" ".*Deleted breakpoints.*" "set 2, so del 2"

gdb_test "b callee" ".*"
gdb_test "c" ".*callee.*" "hit called rtn"

gdb_exit

# +O4, don't use -g
#
if  { [gdb_compile "${srcdir}/${subdir}/${srcfile}" "${binfile}" executable {optimize=+O4}] != "" } {
     gdb_suppress_entire_file "Testcase compile failed, so all tests in this file will automatically fail."
}

gdb_start
gdb_reinitialize_dir $srcdir/$subdir

send_gdb "file $binfile\n"
gdb_expect {
    -re ".*no debugging symbols found.*$gdb_prompt $" {
        pass "Didn't find debug symbols, as expected"
    }
    -re ".*No header section (PXDB data).*$gdb_prompt $" {
        fail "pointless warning"
    }
    -re ".*done.*$gdb_prompt $" {
        fail "Somehow found debug symbols--make this a pass?"
    }
    timeout { fail "timeout on file" }
}

gdb_test "b main"   ".*"
gdb_test "b callee" ".*"
gdb_test "r"        ".*Breakpoint 1.*main.*"
gdb_test "si 3"     ".*main.*" "steps"
gdb_test "x/4i \$pc" ".*main.*main+4.*main+8.*"
gdb_test "c"        ".*callee.*" "hit bp"
gdb_test "disas"    ".*callee.*callee+4.*callee+12.*"
gdb_test "si"       ".*callee.*"
gdb_test "fin"      ".*Run till exit.*main.*" "finish"
gdb_test "x/i \$pc" ".*main+.*" "back in main"
gdb_exit

#remote_exec build "rm -f ${binfile}"
return 0
@


1.1.1.1
log
@GDB 6.1 (excluding .info files)
@
text
@@
