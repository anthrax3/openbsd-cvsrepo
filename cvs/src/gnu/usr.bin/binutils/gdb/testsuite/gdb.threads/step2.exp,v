head	1.3;
access;
symbols
	OPENBSD_6_2:1.3.0.52
	OPENBSD_6_2_BASE:1.3
	OPENBSD_6_1:1.3.0.54
	OPENBSD_6_1_BASE:1.3
	OPENBSD_6_0:1.3.0.50
	OPENBSD_6_0_BASE:1.3
	OPENBSD_5_9:1.3.0.46
	OPENBSD_5_9_BASE:1.3
	OPENBSD_5_8:1.3.0.48
	OPENBSD_5_8_BASE:1.3
	OPENBSD_5_7:1.3.0.40
	OPENBSD_5_7_BASE:1.3
	OPENBSD_5_6:1.3.0.44
	OPENBSD_5_6_BASE:1.3
	OPENBSD_5_5:1.3.0.42
	OPENBSD_5_5_BASE:1.3
	OPENBSD_5_4:1.3.0.38
	OPENBSD_5_4_BASE:1.3
	OPENBSD_5_3:1.3.0.36
	OPENBSD_5_3_BASE:1.3
	OPENBSD_5_2:1.3.0.34
	OPENBSD_5_2_BASE:1.3
	OPENBSD_5_1_BASE:1.3
	OPENBSD_5_1:1.3.0.32
	OPENBSD_5_0:1.3.0.30
	OPENBSD_5_0_BASE:1.3
	OPENBSD_4_9:1.3.0.28
	OPENBSD_4_9_BASE:1.3
	OPENBSD_4_8:1.3.0.26
	OPENBSD_4_8_BASE:1.3
	OPENBSD_4_7:1.3.0.22
	OPENBSD_4_7_BASE:1.3
	OPENBSD_4_6:1.3.0.24
	OPENBSD_4_6_BASE:1.3
	OPENBSD_4_5:1.3.0.20
	OPENBSD_4_5_BASE:1.3
	OPENBSD_4_4:1.3.0.18
	OPENBSD_4_4_BASE:1.3
	OPENBSD_4_3:1.3.0.16
	OPENBSD_4_3_BASE:1.3
	OPENBSD_4_2:1.3.0.14
	OPENBSD_4_2_BASE:1.3
	OPENBSD_4_1:1.3.0.12
	OPENBSD_4_1_BASE:1.3
	OPENBSD_4_0:1.3.0.10
	OPENBSD_4_0_BASE:1.3
	OPENBSD_3_9:1.3.0.8
	OPENBSD_3_9_BASE:1.3
	OPENBSD_3_8:1.3.0.6
	OPENBSD_3_8_BASE:1.3
	OPENBSD_3_7:1.3.0.4
	OPENBSD_3_7_BASE:1.3
	GDB_6_3:1.1.1.1
	OPENBSD_3_6:1.3.0.2
	OPENBSD_3_6_BASE:1.3
	GDB_6_1:1.1.1.1
	FSF:1.1.1
	OPENBSD_3_5:1.2.0.32
	OPENBSD_3_5_BASE:1.2
	OPENBSD_3_4:1.2.0.30
	OPENBSD_3_4_BASE:1.2
	OPENBSD_3_3:1.2.0.28
	OPENBSD_3_3_BASE:1.2
	OPENBSD_3_2:1.2.0.26
	OPENBSD_3_2_BASE:1.2
	OPENBSD_3_1:1.2.0.24
	OPENBSD_3_1_BASE:1.2
	OPENBSD_3_0:1.2.0.22
	OPENBSD_3_0_BASE:1.2
	OPENBSD_2_9:1.2.0.20
	OPENBSD_2_9_BASE:1.2
	OPENBSD_2_8:1.2.0.18
	OPENBSD_2_8_BASE:1.2
	OPENBSD_2_7:1.2.0.16
	OPENBSD_2_7_BASE:1.2
	new-binutils:1.2.0.14
	OPENBSD_2_6:1.2.0.12
	OPENBSD_2_6_BASE:1.2
	OPENBSD_2_5:1.2.0.10
	OPENBSD_2_5_BASE:1.2
	OPENBSD_2_4:1.2.0.8
	OPENBSD_2_4_BASE:1.2
	OPENBSD_2_3:1.2.0.6
	OPENBSD_2_3_BASE:1.2
	OPENBSD_2_2:1.2.0.4
	OPENBSD_2_2_BASE:1.2
	OPENBSD_2_1:1.2.0.2
	OPENBSD_2_1_BASE:1.2
	CYGNUS-961112:1.1.2.1
	CYGNUS:1.1.0.2;
locks; strict;
comment	@# @;


1.3
date	2004.05.21.20.23.43;	author kettenis;	state Exp;
branches;
next	1.2;

1.2
date	96.11.23.03.51.57;	author niklas;	state Exp;
branches;
next	1.1;

1.1
date	96.11.19.14.37.54;	author niklas;	state dead;
branches
	1.1.1.1
	1.1.2.1;
next	;

1.1.1.1
date	2004.05.21.19.18.28;	author kettenis;	state Exp;
branches;
next	;

1.1.2.1
date	96.11.19.14.37.54;	author niklas;	state Exp;
branches;
next	;


desc
@@


1.3
log
@Resolve conflicts for GDB 6.1.  Add local patches.
ok deraadt@@
@
text
@# step2.exp -- Expect script to test gdb step.c
# Copyright (C) 1992, 1997 Free Software Foundation, Inc.

# This program is free software; you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation; either version 2 of the License, or
# (at your option) any later version.
# 
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
# 
# You should have received a copy of the GNU General Public License
# along with this program; if not, write to the Free Software
# Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA 02111-1307, USA.  

# Please email any bugs, comments, and/or additions to this file to:
# bug-gdb@@prep.ai.mit.edu

# This file was written by Jeff Law. (law@@cygnus.com)
#


if $tracelevel then {
	strace $tracelevel
}

set program_exited 0

# A simple and crude test to see that we can step two threads independently
proc test_multi_threaded_stepping {} {
    global gdb_prompt
    global hex
    global srcfile
    global decimal

    # Set breakpoints in code that we know is executed in only
    # thread of control.
    gdb_test "break thread1" \
	     "Break.* at $hex: file .*$srcfile, line $decimal\\."
    gdb_test "break thread2" \
	     "Break.* at $hex: file .*$srcfile, line $decimal\\."

    # the order in which things happen is indeterminate.  So we basically
    # look for a set of events and note that each one happens and that
    # all of the required events have happened when we're done.
    #
    # Right now we only verify that both threads start and that they
    # both call pthread_cond_wait twice.
    set thread1started 0
    set thread1condwait 0
    set thread2started 0
    set thread2condwait 0
    
    send_gdb "run\n"
    gdb_expect {
	-re "The program .* has been started already.*y or n. $" {
	    send_gdb "y\n"
	    exp_continue
	}
	-re ".*Breakpoint \[0-9\]+,.*thread1.* at .*$srcfile:.*\[\t \].*$gdb_prompt $" {
	    if { $thread1started != 0 } then {
		fail "thread1 started"
		return
	    } else {
		set thread1started 1
		pass "thread1 started"
	    }
	    send_gdb "step\n"
	    exp_continue
	}
	-re ".*Breakpoint \[0-9\]+,.*thread2.* at .*$srcfile:.*\[\t \].*$gdb_prompt $" {
	    if { $thread2started != 0 } then {
		fail "thread2 started"
		return
	    } else {
		set thread2started 1
		pass "thread2 started"
	    }
	    send_gdb "step\n"
	    exp_continue
	}
	-re ".*pthread_cond_wait.*cv_a.*$gdb_prompt" {
	    if { $thread1started == 0 } then {
		fail "thread1 condwait"
		return
	    }
	    if { $thread1condwait < 2 } then {
		pass "thread1 condwait"
		incr thread1condwait
	    }
	    if { $thread2condwait == 2 } then {
		pass "multi threaded stepping"
		return
	    }
	    send_gdb "step\n"
	    exp_continue
	}
		    
	-re ".*pthread_cond_wait.*cv_b.*$gdb_prompt" {
	    if { $thread2started == 0 } then {
		fail "thread2 condwait"
		return
	    }
	    if { $thread2condwait < 2 } then {
		pass "thread2 condwait"
		incr thread2condwait
	    }
	    if { $thread1condwait == 2 } then {
		pass "multi threaded stepping"
		return
	    }
	    send_gdb "step\n"
	    exp_continue
	}
		    
	-re "$gdb_prompt" {
	    send_gdb "step\n"
	    exp_continue
	}
	default { fail "multi threaded stepping" }
    }
}

# Check to see if we have an executable to test.  If not, then either we
# haven't tried to compile one, or the compilation failed for some reason.
# In either case, just notify the user and skip the tests in this file.

set binfile "step"
set srcfile "step.c"

if ![file exists $objdir/$subdir/$binfile] then {
    if $all_flag then {
	warning "$binfile does not exist; tests suppressed."
    }
    return
}

set prms_id 0
set bug_id 0

# Start with a fresh gdb.

gdb_exit
gdb_start
gdb_reinitialize_dir $srcdir/$subdir
gdb_load $objdir/$subdir/$binfile

test_multi_threaded_stepping
@


1.2
log
@Merge to Cygnus 961112 + add some support (not ready) for shared libs
@
text
@d2 1
a2 1
# Copyright (C) 1992 Free Software Foundation, Inc.
d16 1
a16 1
# Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA 02111-1307, USA.  */
d33 1
a33 1
    global prompt
d56 2
a57 2
    send "run\n"
    expect {
d59 1
a59 1
	    send "y\n"
d62 1
a62 1
	-re ".*Breakpoint \[0-9\]+,.*thread1.* at .*$srcfile:.*\[\t \].*$prompt $" {
d70 1
a70 1
	    send "step\n"
d73 1
a73 1
	-re ".*Breakpoint \[0-9\]+,.*thread2.* at .*$srcfile:.*\[\t \].*$prompt $" {
d81 1
a81 1
	    send "step\n"
d84 1
a84 1
	-re ".*pthread_cond_wait.*cv_a.*$prompt" {
d97 1
a97 1
	    send "step\n"
d101 1
a101 1
	-re ".*pthread_cond_wait.*cv_b.*$prompt" {
d114 1
a114 1
	    send "step\n"
d118 2
a119 2
	-re "$prompt" {
	    send "step\n"
@


1.1
log
@file step2.exp was initially added on branch CYGNUS.
@
text
@d1 150
@


1.1.1.1
log
@GDB 6.1 (excluding .info files)
@
text
@a0 150
# step2.exp -- Expect script to test gdb step.c
# Copyright (C) 1992, 1997 Free Software Foundation, Inc.

# This program is free software; you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation; either version 2 of the License, or
# (at your option) any later version.
# 
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
# 
# You should have received a copy of the GNU General Public License
# along with this program; if not, write to the Free Software
# Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA 02111-1307, USA.  

# Please email any bugs, comments, and/or additions to this file to:
# bug-gdb@@prep.ai.mit.edu

# This file was written by Jeff Law. (law@@cygnus.com)
#


if $tracelevel then {
	strace $tracelevel
}

set program_exited 0

# A simple and crude test to see that we can step two threads independently
proc test_multi_threaded_stepping {} {
    global gdb_prompt
    global hex
    global srcfile
    global decimal

    # Set breakpoints in code that we know is executed in only
    # thread of control.
    gdb_test "break thread1" \
	     "Break.* at $hex: file .*$srcfile, line $decimal\\."
    gdb_test "break thread2" \
	     "Break.* at $hex: file .*$srcfile, line $decimal\\."

    # the order in which things happen is indeterminate.  So we basically
    # look for a set of events and note that each one happens and that
    # all of the required events have happened when we're done.
    #
    # Right now we only verify that both threads start and that they
    # both call pthread_cond_wait twice.
    set thread1started 0
    set thread1condwait 0
    set thread2started 0
    set thread2condwait 0
    
    send_gdb "run\n"
    gdb_expect {
	-re "The program .* has been started already.*y or n. $" {
	    send_gdb "y\n"
	    exp_continue
	}
	-re ".*Breakpoint \[0-9\]+,.*thread1.* at .*$srcfile:.*\[\t \].*$gdb_prompt $" {
	    if { $thread1started != 0 } then {
		fail "thread1 started"
		return
	    } else {
		set thread1started 1
		pass "thread1 started"
	    }
	    send_gdb "step\n"
	    exp_continue
	}
	-re ".*Breakpoint \[0-9\]+,.*thread2.* at .*$srcfile:.*\[\t \].*$gdb_prompt $" {
	    if { $thread2started != 0 } then {
		fail "thread2 started"
		return
	    } else {
		set thread2started 1
		pass "thread2 started"
	    }
	    send_gdb "step\n"
	    exp_continue
	}
	-re ".*pthread_cond_wait.*cv_a.*$gdb_prompt" {
	    if { $thread1started == 0 } then {
		fail "thread1 condwait"
		return
	    }
	    if { $thread1condwait < 2 } then {
		pass "thread1 condwait"
		incr thread1condwait
	    }
	    if { $thread2condwait == 2 } then {
		pass "multi threaded stepping"
		return
	    }
	    send_gdb "step\n"
	    exp_continue
	}
		    
	-re ".*pthread_cond_wait.*cv_b.*$gdb_prompt" {
	    if { $thread2started == 0 } then {
		fail "thread2 condwait"
		return
	    }
	    if { $thread2condwait < 2 } then {
		pass "thread2 condwait"
		incr thread2condwait
	    }
	    if { $thread1condwait == 2 } then {
		pass "multi threaded stepping"
		return
	    }
	    send_gdb "step\n"
	    exp_continue
	}
		    
	-re "$gdb_prompt" {
	    send_gdb "step\n"
	    exp_continue
	}
	default { fail "multi threaded stepping" }
    }
}

# Check to see if we have an executable to test.  If not, then either we
# haven't tried to compile one, or the compilation failed for some reason.
# In either case, just notify the user and skip the tests in this file.

set binfile "step"
set srcfile "step.c"

if ![file exists $objdir/$subdir/$binfile] then {
    if $all_flag then {
	warning "$binfile does not exist; tests suppressed."
    }
    return
}

set prms_id 0
set bug_id 0

# Start with a fresh gdb.

gdb_exit
gdb_start
gdb_reinitialize_dir $srcdir/$subdir
gdb_load $objdir/$subdir/$binfile

test_multi_threaded_stepping
@


1.1.2.1
log
@Import of 961112 Cygnus binutils+gas+ld+gdb+gprof
@
text
@a0 150
# step2.exp -- Expect script to test gdb step.c
# Copyright (C) 1992 Free Software Foundation, Inc.

# This program is free software; you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation; either version 2 of the License, or
# (at your option) any later version.
# 
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
# 
# You should have received a copy of the GNU General Public License
# along with this program; if not, write to the Free Software
# Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA 02111-1307, USA.  */

# Please email any bugs, comments, and/or additions to this file to:
# bug-gdb@@prep.ai.mit.edu

# This file was written by Jeff Law. (law@@cygnus.com)
#


if $tracelevel then {
	strace $tracelevel
}

set program_exited 0

# A simple and crude test to see that we can step two threads independently
proc test_multi_threaded_stepping {} {
    global prompt
    global hex
    global srcfile
    global decimal

    # Set breakpoints in code that we know is executed in only
    # thread of control.
    gdb_test "break thread1" \
	     "Break.* at $hex: file .*$srcfile, line $decimal\\."
    gdb_test "break thread2" \
	     "Break.* at $hex: file .*$srcfile, line $decimal\\."

    # the order in which things happen is indeterminate.  So we basically
    # look for a set of events and note that each one happens and that
    # all of the required events have happened when we're done.
    #
    # Right now we only verify that both threads start and that they
    # both call pthread_cond_wait twice.
    set thread1started 0
    set thread1condwait 0
    set thread2started 0
    set thread2condwait 0
    
    send "run\n"
    expect {
	-re "The program .* has been started already.*y or n. $" {
	    send "y\n"
	    exp_continue
	}
	-re ".*Breakpoint \[0-9\]+,.*thread1.* at .*$srcfile:.*\[\t \].*$prompt $" {
	    if { $thread1started != 0 } then {
		fail "thread1 started"
		return
	    } else {
		set thread1started 1
		pass "thread1 started"
	    }
	    send "step\n"
	    exp_continue
	}
	-re ".*Breakpoint \[0-9\]+,.*thread2.* at .*$srcfile:.*\[\t \].*$prompt $" {
	    if { $thread2started != 0 } then {
		fail "thread2 started"
		return
	    } else {
		set thread2started 1
		pass "thread2 started"
	    }
	    send "step\n"
	    exp_continue
	}
	-re ".*pthread_cond_wait.*cv_a.*$prompt" {
	    if { $thread1started == 0 } then {
		fail "thread1 condwait"
		return
	    }
	    if { $thread1condwait < 2 } then {
		pass "thread1 condwait"
		incr thread1condwait
	    }
	    if { $thread2condwait == 2 } then {
		pass "multi threaded stepping"
		return
	    }
	    send "step\n"
	    exp_continue
	}
		    
	-re ".*pthread_cond_wait.*cv_b.*$prompt" {
	    if { $thread2started == 0 } then {
		fail "thread2 condwait"
		return
	    }
	    if { $thread2condwait < 2 } then {
		pass "thread2 condwait"
		incr thread2condwait
	    }
	    if { $thread1condwait == 2 } then {
		pass "multi threaded stepping"
		return
	    }
	    send "step\n"
	    exp_continue
	}
		    
	-re "$prompt" {
	    send "step\n"
	    exp_continue
	}
	default { fail "multi threaded stepping" }
    }
}

# Check to see if we have an executable to test.  If not, then either we
# haven't tried to compile one, or the compilation failed for some reason.
# In either case, just notify the user and skip the tests in this file.

set binfile "step"
set srcfile "step.c"

if ![file exists $objdir/$subdir/$binfile] then {
    if $all_flag then {
	warning "$binfile does not exist; tests suppressed."
    }
    return
}

set prms_id 0
set bug_id 0

# Start with a fresh gdb.

gdb_exit
gdb_start
gdb_reinitialize_dir $srcdir/$subdir
gdb_load $objdir/$subdir/$binfile

test_multi_threaded_stepping
@
