head	1.2;
access;
symbols
	OPENBSD_6_2:1.2.0.54
	OPENBSD_6_2_BASE:1.2
	OPENBSD_6_1:1.2.0.52
	OPENBSD_6_1_BASE:1.2
	OPENBSD_6_0:1.2.0.48
	OPENBSD_6_0_BASE:1.2
	OPENBSD_5_9:1.2.0.44
	OPENBSD_5_9_BASE:1.2
	OPENBSD_5_8:1.2.0.46
	OPENBSD_5_8_BASE:1.2
	OPENBSD_5_7:1.2.0.38
	OPENBSD_5_7_BASE:1.2
	OPENBSD_5_6:1.2.0.42
	OPENBSD_5_6_BASE:1.2
	OPENBSD_5_5:1.2.0.40
	OPENBSD_5_5_BASE:1.2
	OPENBSD_5_4:1.2.0.36
	OPENBSD_5_4_BASE:1.2
	OPENBSD_5_3:1.2.0.34
	OPENBSD_5_3_BASE:1.2
	OPENBSD_5_2:1.2.0.32
	OPENBSD_5_2_BASE:1.2
	OPENBSD_5_1_BASE:1.2
	OPENBSD_5_1:1.2.0.30
	OPENBSD_5_0:1.2.0.28
	OPENBSD_5_0_BASE:1.2
	OPENBSD_4_9:1.2.0.26
	OPENBSD_4_9_BASE:1.2
	OPENBSD_4_8:1.2.0.24
	OPENBSD_4_8_BASE:1.2
	OPENBSD_4_7:1.2.0.20
	OPENBSD_4_7_BASE:1.2
	OPENBSD_4_6:1.2.0.22
	OPENBSD_4_6_BASE:1.2
	OPENBSD_4_5:1.2.0.18
	OPENBSD_4_5_BASE:1.2
	OPENBSD_4_4:1.2.0.16
	OPENBSD_4_4_BASE:1.2
	OPENBSD_4_3:1.2.0.14
	OPENBSD_4_3_BASE:1.2
	OPENBSD_4_2:1.2.0.12
	OPENBSD_4_2_BASE:1.2
	OPENBSD_4_1:1.2.0.10
	OPENBSD_4_1_BASE:1.2
	OPENBSD_4_0:1.2.0.8
	OPENBSD_4_0_BASE:1.2
	OPENBSD_3_9:1.2.0.6
	OPENBSD_3_9_BASE:1.2
	OPENBSD_3_8:1.2.0.4
	OPENBSD_3_8_BASE:1.2
	OPENBSD_3_7:1.2.0.2
	OPENBSD_3_7_BASE:1.2
	GDB_6_3:1.1.1.1
	FSF:1.1.1
	OPENBSD_3_6:1.1.0.2
	OPENBSD_3_6_BASE:1.1;
locks; strict;
comment	@ * @;


1.2
date	2004.12.27.14.00.38;	author kettenis;	state Exp;
branches;
next	1.1;

1.1
date	2004.05.24.22.21.21;	author kettenis;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	2004.12.27.13.05.23;	author kettenis;	state Exp;
branches;
next	;


desc
@@


1.2
log
@Resolve conflicts for GDB 6.3.  Add local patches.
ok deraadt@@
@
text
@/* Native-dependent code for Motorola 88000 BSD's.

   Copyright 2004 Free Software Foundation, Inc.

   This file is part of GDB.

   This program is free software; you can redistribute it and/or modify
   it under the terms of the GNU General Public License as published by
   the Free Software Foundation; either version 2 of the License, or
   (at your option) any later version.

   This program is distributed in the hope that it will be useful,
   but WITHOUT ANY WARRANTY; without even the implied warranty of
   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
   GNU General Public License for more details.

   You should have received a copy of the GNU General Public License
   along with this program; if not, write to the Free Software
   Foundation, Inc., 59 Temple Place - Suite 330,
   Boston, MA 02111-1307, USA.  */

#include "defs.h"
#include "inferior.h"
#include "regcache.h"
#include "target.h"

#include <sys/types.h>
#include <sys/ptrace.h>
#include <machine/reg.h>

#include "m88k-tdep.h"
#include "inf-ptrace.h"

/* Supply the general-purpose registers stored in GREGS to REGCACHE.  */

static void
m88kbsd_supply_gregset (struct regcache *regcache, const void *gregs)
{
  const char *regs = gregs;
  int regnum;

  for (regnum = 0; regnum < M88K_NUM_REGS; regnum++)
    regcache_raw_supply (regcache, regnum, regs + regnum * 4);
}

/* Collect the general-purpose registers from REGCACHE and store them
   in GREGS.  */

static void
m88kbsd_collect_gregset (const struct regcache *regcache,
			 void *gregs, int regnum)
{
  char *regs = gregs;
  int i;

  for (i = 0; i < M88K_NUM_REGS; i++)
    {
      if (regnum == -1 || regnum == i)
	regcache_raw_collect (regcache, i, regs + i * 4);
    }
}


/* Fetch register REGNUM from the inferior.  If REGNUM is -1, do this
   for all registers.  */

static void
m88kbsd_fetch_inferior_registers (int regnum)
{
  struct reg regs;

  if (ptrace (PT_GETREGS, PIDGET (inferior_ptid),
	      (PTRACE_TYPE_ARG3) &regs, 0) == -1)
    perror_with_name ("Couldn't get registers");

  m88kbsd_supply_gregset (current_regcache, &regs);
}

/* Store register REGNUM back into the inferior.  If REGNUM is -1, do
   this for all registers.  */

static void
m88kbsd_store_inferior_registers (int regnum)
{
  struct reg regs;

  if (ptrace (PT_GETREGS, PIDGET (inferior_ptid),
	      (PTRACE_TYPE_ARG3) &regs, 0) == -1)
    perror_with_name ("Couldn't get registers");

  m88kbsd_collect_gregset (current_regcache, &regs, regnum);

  if (ptrace (PT_SETREGS, PIDGET (inferior_ptid),
	      (PTRACE_TYPE_ARG3) &regs, 0) == -1)
    perror_with_name ("Couldn't write registers");
}


/* Provide a prototype to silence -Wmissing-prototypes.  */
void _initialize_m88kbsd_nat (void);

void
_initialize_m88kbsd_nat (void)
{
  struct target_ops *t;

  t = inf_ptrace_target ();
  t->to_fetch_registers = m88kbsd_fetch_inferior_registers;
  t->to_store_registers = m88kbsd_store_inferior_registers;
  add_target (t);
}
@


1.1
log
@Add m88k support.
ok miod@@
@
text
@d25 1
d32 1
d67 2
a68 2
void
fetch_inferior_registers (int regnum)
d73 1
a73 1
	      (PTRACE_ARG3_TYPE) &regs, 0) == -1)
d82 2
a83 2
void
store_inferior_registers (int regnum)
d88 1
a88 1
	      (PTRACE_ARG3_TYPE) &regs, 0) == -1)
d94 1
a94 1
	      (PTRACE_ARG3_TYPE) &regs, 0) == -1)
d96 15
@


1.1.1.1
log
@GDB 6.3 (excluding .info files)
@
text
@a24 1
#include "target.h"
a30 1
#include "inf-ptrace.h"
d65 2
a66 2
static void
m88kbsd_fetch_inferior_registers (int regnum)
d71 1
a71 1
	      (PTRACE_TYPE_ARG3) &regs, 0) == -1)
d80 2
a81 2
static void
m88kbsd_store_inferior_registers (int regnum)
d86 1
a86 1
	      (PTRACE_TYPE_ARG3) &regs, 0) == -1)
d92 1
a92 1
	      (PTRACE_TYPE_ARG3) &regs, 0) == -1)
a93 15
}


/* Provide a prototype to silence -Wmissing-prototypes.  */
void _initialize_m88kbsd_nat (void);

void
_initialize_m88kbsd_nat (void)
{
  struct target_ops *t;

  t = inf_ptrace_target ();
  t->to_fetch_registers = m88kbsd_fetch_inferior_registers;
  t->to_store_registers = m88kbsd_store_inferior_registers;
  add_target (t);
@

