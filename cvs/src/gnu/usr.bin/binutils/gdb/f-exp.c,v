head	1.1;
branch	1.1.1;
access;
symbols
	OPENBSD_6_2:1.1.1.2.0.50
	OPENBSD_6_2_BASE:1.1.1.2
	OPENBSD_6_1:1.1.1.2.0.52
	OPENBSD_6_1_BASE:1.1.1.2
	OPENBSD_6_0:1.1.1.2.0.48
	OPENBSD_6_0_BASE:1.1.1.2
	OPENBSD_5_9:1.1.1.2.0.44
	OPENBSD_5_9_BASE:1.1.1.2
	OPENBSD_5_8:1.1.1.2.0.46
	OPENBSD_5_8_BASE:1.1.1.2
	OPENBSD_5_7:1.1.1.2.0.38
	OPENBSD_5_7_BASE:1.1.1.2
	OPENBSD_5_6:1.1.1.2.0.42
	OPENBSD_5_6_BASE:1.1.1.2
	OPENBSD_5_5:1.1.1.2.0.40
	OPENBSD_5_5_BASE:1.1.1.2
	OPENBSD_5_4:1.1.1.2.0.36
	OPENBSD_5_4_BASE:1.1.1.2
	OPENBSD_5_3:1.1.1.2.0.34
	OPENBSD_5_3_BASE:1.1.1.2
	OPENBSD_5_2:1.1.1.2.0.32
	OPENBSD_5_2_BASE:1.1.1.2
	OPENBSD_5_1_BASE:1.1.1.2
	OPENBSD_5_1:1.1.1.2.0.30
	OPENBSD_5_0:1.1.1.2.0.28
	OPENBSD_5_0_BASE:1.1.1.2
	OPENBSD_4_9:1.1.1.2.0.26
	OPENBSD_4_9_BASE:1.1.1.2
	OPENBSD_4_8:1.1.1.2.0.24
	OPENBSD_4_8_BASE:1.1.1.2
	OPENBSD_4_7:1.1.1.2.0.20
	OPENBSD_4_7_BASE:1.1.1.2
	OPENBSD_4_6:1.1.1.2.0.22
	OPENBSD_4_6_BASE:1.1.1.2
	OPENBSD_4_5:1.1.1.2.0.18
	OPENBSD_4_5_BASE:1.1.1.2
	OPENBSD_4_4:1.1.1.2.0.16
	OPENBSD_4_4_BASE:1.1.1.2
	OPENBSD_4_3:1.1.1.2.0.14
	OPENBSD_4_3_BASE:1.1.1.2
	OPENBSD_4_2:1.1.1.2.0.12
	OPENBSD_4_2_BASE:1.1.1.2
	OPENBSD_4_1:1.1.1.2.0.10
	OPENBSD_4_1_BASE:1.1.1.2
	OPENBSD_4_0:1.1.1.2.0.8
	OPENBSD_4_0_BASE:1.1.1.2
	OPENBSD_3_9:1.1.1.2.0.6
	OPENBSD_3_9_BASE:1.1.1.2
	OPENBSD_3_8:1.1.1.2.0.4
	OPENBSD_3_8_BASE:1.1.1.2
	OPENBSD_3_7:1.1.1.2.0.2
	OPENBSD_3_7_BASE:1.1.1.2
	GDB_6_3:1.1.1.2
	OPENBSD_3_6:1.1.1.1.0.2
	OPENBSD_3_6_BASE:1.1.1.1
	GDB_6_1:1.1.1.1
	FSF:1.1.1;
locks; strict;
comment	@ * @;


1.1
date	2004.05.21.19.14.13;	author kettenis;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	2004.05.21.19.14.13;	author kettenis;	state Exp;
branches;
next	1.1.1.2;

1.1.1.2
date	2004.12.27.13.08.32;	author kettenis;	state Exp;
branches;
next	;


desc
@@


1.1
log
@Initial revision
@
text
@/* A Bison parser, made from f-exp.y
   by GNU bison 1.35.  */

#define YYBISON 1  /* Identify Bison output.  */

# define	INT	257
# define	FLOAT	258
# define	STRING_LITERAL	259
# define	BOOLEAN_LITERAL	260
# define	NAME	261
# define	TYPENAME	262
# define	NAME_OR_INT	263
# define	SIZEOF	264
# define	ERROR	265
# define	INT_KEYWORD	266
# define	INT_S2_KEYWORD	267
# define	LOGICAL_S1_KEYWORD	268
# define	LOGICAL_S2_KEYWORD	269
# define	LOGICAL_KEYWORD	270
# define	REAL_KEYWORD	271
# define	REAL_S8_KEYWORD	272
# define	REAL_S16_KEYWORD	273
# define	COMPLEX_S8_KEYWORD	274
# define	COMPLEX_S16_KEYWORD	275
# define	COMPLEX_S32_KEYWORD	276
# define	BOOL_AND	277
# define	BOOL_OR	278
# define	BOOL_NOT	279
# define	CHARACTER	280
# define	VARIABLE	281
# define	ASSIGN_MODIFY	282
# define	ABOVE_COMMA	283
# define	EQUAL	284
# define	NOTEQUAL	285
# define	LESSTHAN	286
# define	GREATERTHAN	287
# define	LEQ	288
# define	GEQ	289
# define	LSH	290
# define	RSH	291
# define	UNARY	292

#line 44 "f-exp.y"


#include "defs.h"
#include "gdb_string.h"
#include "expression.h"
#include "value.h"
#include "parser-defs.h"
#include "language.h"
#include "f-lang.h"
#include "bfd.h" /* Required by objfiles.h.  */
#include "symfile.h" /* Required by objfiles.h.  */
#include "objfiles.h" /* For have_full_symbols and have_partial_symbols */
#include "block.h"
#include <ctype.h>

/* Remap normal yacc parser interface names (yyparse, yylex, yyerror, etc),
   as well as gratuitiously global symbol names, so we can have multiple
   yacc generated parsers in gdb.  Note that these are only the variables
   produced by yacc.  If other parser generators (bison, byacc, etc) produce
   additional global names that conflict at link time, then those parser
   generators need to be fixed instead of adding those names to this list. */

#define	yymaxdepth f_maxdepth
#define	yyparse	f_parse
#define	yylex	f_lex
#define	yyerror	f_error
#define	yylval	f_lval
#define	yychar	f_char
#define	yydebug	f_debug
#define	yypact	f_pact	
#define	yyr1	f_r1			
#define	yyr2	f_r2			
#define	yydef	f_def		
#define	yychk	f_chk		
#define	yypgo	f_pgo		
#define	yyact	f_act		
#define	yyexca	f_exca
#define yyerrflag f_errflag
#define yynerrs	f_nerrs
#define	yyps	f_ps
#define	yypv	f_pv
#define	yys	f_s
#define	yy_yys	f_yys
#define	yystate	f_state
#define	yytmp	f_tmp
#define	yyv	f_v
#define	yy_yyv	f_yyv
#define	yyval	f_val
#define	yylloc	f_lloc
#define yyreds	f_reds		/* With YYDEBUG defined */
#define yytoks	f_toks		/* With YYDEBUG defined */
#define yyname	f_name		/* With YYDEBUG defined */
#define yyrule	f_rule		/* With YYDEBUG defined */
#define yylhs	f_yylhs
#define yylen	f_yylen
#define yydefred f_yydefred
#define yydgoto	f_yydgoto
#define yysindex f_yysindex
#define yyrindex f_yyrindex
#define yygindex f_yygindex
#define yytable	 f_yytable
#define yycheck	 f_yycheck

#ifndef YYDEBUG
#define	YYDEBUG	1		/* Default to yydebug support */
#endif

#define YYFPRINTF parser_fprintf

int yyparse (void);

static int yylex (void);

void yyerror (char *);

static void growbuf_by_size (int);

static int match_string_literal (void);


#line 129 "f-exp.y"
#ifndef YYSTYPE
typedef union
  {
    LONGEST lval;
    struct {
      LONGEST val;
      struct type *type;
    } typed_val;
    DOUBLEST dval;
    struct symbol *sym;
    struct type *tval;
    struct stoken sval;
    struct ttype tsym;
    struct symtoken ssym;
    int voidval;
    struct block *bval;
    enum exp_opcode opcode;
    struct internalvar *ivar;

    struct type **tvec;
    int *ivec;
  } yystype;
# define YYSTYPE yystype
# define YYSTYPE_IS_TRIVIAL 1
#endif
#line 151 "f-exp.y"

/* YYSTYPE gets defined by %union */
static int parse_number (char *, int, int, YYSTYPE *);
#ifndef YYDEBUG
# define YYDEBUG 0
#endif



#define	YYFINAL		125
#define	YYFLAG		-32768
#define	YYNTBASE	55

/* YYTRANSLATE(YYLEX) -- Bison token number corresponding to YYLEX. */
#define YYTRANSLATE(x) ((unsigned)(x) <= 292 ? yytranslate[x] : 71)

/* YYTRANSLATE[YYLEX] -- Bison token number corresponding to YYLEX. */
static const char yytranslate[] =
{
       0,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,    49,    35,     2,
      51,    52,    47,    45,    29,    46,     2,    48,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,    54,     2,
       2,    31,     2,    32,    44,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,    34,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,    33,     2,    53,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     1,     3,     4,     5,
       6,     7,     8,     9,    10,    11,    12,    13,    14,    15,
      16,    17,    18,    19,    20,    21,    22,    23,    24,    25,
      26,    27,    28,    30,    36,    37,    38,    39,    40,    41,
      42,    43,    50
};

#if YYDEBUG
static const short yyprhs[] =
{
       0,     0,     2,     4,     6,    10,    13,    16,    19,    22,
      25,    28,    29,    35,    36,    38,    40,    44,    48,    52,
      56,    61,    65,    69,    73,    77,    81,    85,    89,    93,
      97,   101,   105,   109,   113,   117,   121,   125,   129,   133,
     137,   141,   145,   147,   149,   151,   153,   155,   160,   162,
     164,   166,   168,   170,   173,   175,   178,   180,   183,   185,
     189,   192,   194,   197,   201,   203,   205,   207,   209,   211,
     213,   215,   217,   219,   221,   223,   225,   227,   229,   231,
     235,   237,   239,   241
};
static const short yyrhs[] =
{
      57,     0,    56,     0,    63,     0,    51,    57,    52,     0,
      47,    57,     0,    35,    57,     0,    46,    57,     0,    25,
      57,     0,    53,    57,     0,    10,    57,     0,     0,    57,
      51,    58,    59,    52,     0,     0,    57,     0,    60,     0,
      59,    29,    57,     0,    57,    54,    57,     0,    57,    29,
      57,     0,    51,    61,    52,     0,    51,    63,    52,    57,
       0,    57,    44,    57,     0,    57,    47,    57,     0,    57,
      48,    57,     0,    57,    49,    57,     0,    57,    45,    57,
       0,    57,    46,    57,     0,    57,    42,    57,     0,    57,
      43,    57,     0,    57,    36,    57,     0,    57,    37,    57,
       0,    57,    40,    57,     0,    57,    41,    57,     0,    57,
      38,    57,     0,    57,    39,    57,     0,    57,    35,    57,
       0,    57,    34,    57,     0,    57,    33,    57,     0,    57,
      23,    57,     0,    57,    24,    57,     0,    57,    31,    57,
       0,    57,    28,    57,     0,     3,     0,     9,     0,     4,
       0,    62,     0,    27,     0,    10,    51,    63,    52,     0,
       6,     0,     5,     0,    70,     0,    64,     0,    68,     0,
      68,    65,     0,    47,     0,    47,    65,     0,    35,     0,
      35,    65,     0,    66,     0,    51,    65,    52,     0,    66,
      67,     0,    67,     0,    51,    52,     0,    51,    69,    52,
       0,     8,     0,    12,     0,    13,     0,    26,     0,    16,
       0,    15,     0,    14,     0,    17,     0,    18,     0,    19,
       0,    20,     0,    21,     0,    22,     0,     8,     0,    63,
       0,    69,    29,    63,     0,     7,     0,     8,     0,     9,
       0,     7,     0
};

#endif

#if YYDEBUG
/* YYRLINE[YYN] -- source line where rule number YYN was defined. */
static const short yyrline[] =
{
       0,   228,   229,   232,   238,   243,   247,   251,   255,   259,
     263,   272,   272,   280,   283,   287,   291,   295,   300,   304,
     308,   316,   320,   324,   328,   332,   336,   340,   344,   348,
     352,   356,   360,   364,   368,   372,   376,   380,   384,   389,
     393,   397,   403,   410,   419,   426,   429,   432,   440,   447,
     455,   499,   502,   503,   546,   548,   550,   552,   554,   557,
     559,   561,   565,   567,   572,   574,   576,   578,   580,   582,
     584,   586,   588,   590,   592,   594,   596,   600,   604,   609,
     616,   618,   620,   624
};
#endif


#if (YYDEBUG) || defined YYERROR_VERBOSE

/* YYTNAME[TOKEN_NUM] -- String name of the token TOKEN_NUM. */
static const char *const yytname[] =
{
  "$", "error", "$undefined.", "INT", "FLOAT", "STRING_LITERAL", 
  "BOOLEAN_LITERAL", "NAME", "TYPENAME", "NAME_OR_INT", "SIZEOF", "ERROR", 
  "INT_KEYWORD", "INT_S2_KEYWORD", "LOGICAL_S1_KEYWORD", 
  "LOGICAL_S2_KEYWORD", "LOGICAL_KEYWORD", "REAL_KEYWORD", 
  "REAL_S8_KEYWORD", "REAL_S16_KEYWORD", "COMPLEX_S8_KEYWORD", 
  "COMPLEX_S16_KEYWORD", "COMPLEX_S32_KEYWORD", "BOOL_AND", "BOOL_OR", 
  "BOOL_NOT", "CHARACTER", "VARIABLE", "ASSIGN_MODIFY", "','", 
  "ABOVE_COMMA", "'='", "'?'", "'|'", "'^'", "'&'", "EQUAL", "NOTEQUAL", 
  "LESSTHAN", "GREATERTHAN", "LEQ", "GEQ", "LSH", "RSH", "'@@'", "'+'", 
  "'-'", "'*'", "'/'", "'%'", "UNARY", "'('", "')'", "'~'", "':'", 
  "start", "type_exp", "exp", "@@1", "arglist", "substring", "complexnum", 
  "variable", "type", "ptype", "abs_decl", "direct_abs_decl", "func_mod", 
  "typebase", "nonempty_typelist", "name_not_typename", 0
};
#endif

/* YYR1[YYN] -- Symbol number of symbol that rule YYN derives. */
static const short yyr1[] =
{
       0,    55,    55,    56,    57,    57,    57,    57,    57,    57,
      57,    58,    57,    59,    59,    59,    59,    60,    61,    57,
      57,    57,    57,    57,    57,    57,    57,    57,    57,    57,
      57,    57,    57,    57,    57,    57,    57,    57,    57,    57,
      57,    57,    57,    57,    57,    57,    57,    57,    57,    57,
      62,    63,    64,    64,    65,    65,    65,    65,    65,    66,
      66,    66,    67,    67,    68,    68,    68,    68,    68,    68,
      68,    68,    68,    68,    68,    68,    68,    71,    69,    69,
      72,    72,    72,    70
};

/* YYR2[YYN] -- Number of symbols composing right hand side of rule YYN. */
static const short yyr2[] =
{
       0,     1,     1,     1,     3,     2,     2,     2,     2,     2,
       2,     0,     5,     0,     1,     1,     3,     3,     3,     3,
       4,     3,     3,     3,     3,     3,     3,     3,     3,     3,
       3,     3,     3,     3,     3,     3,     3,     3,     3,     3,
       3,     3,     1,     1,     1,     1,     1,     4,     1,     1,
       1,     1,     1,     2,     1,     2,     1,     2,     1,     3,
       2,     1,     2,     3,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     3,
       1,     1,     1,     1
};

/* YYDEFACT[S] -- default rule to reduce with in state S when YYTABLE
   doesn't specify something else to do.  Zero means the default is an
   error. */
static const short yydefact[] =
{
       0,    42,    44,    49,    48,    83,    64,    43,     0,    65,
      66,    70,    69,    68,    71,    72,    73,    74,    75,    76,
       0,    67,    46,     0,     0,     0,     0,     0,     2,     1,
      45,     3,    51,    52,    50,     0,    10,     8,     6,     7,
       5,     0,     0,     0,     9,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,    11,    56,    54,     0,
      53,    58,    61,     0,     0,     4,    19,     0,    38,    39,
      41,    40,    37,    36,    35,    29,    30,    33,    34,    31,
      32,    27,    28,    21,    25,    26,    22,    23,    24,    13,
      57,    55,    62,    78,     0,     0,     0,    60,    47,    18,
      20,    14,     0,    15,    59,     0,    63,     0,     0,    12,
      79,    17,    16,     0,     0,     0
};

static const short yydefgoto[] =
{
     123,    28,    41,    99,   112,   113,    42,    30,   103,    32,
      70,    71,    72,    33,   105,    34
};

static const short yypact[] =
{
      75,-32768,-32768,-32768,-32768,-32768,-32768,-32768,   126,-32768,
  -32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,
     135,-32768,-32768,   135,   135,   135,    75,   135,-32768,   309,
  -32768,-32768,-32768,   -34,-32768,    75,   -49,   -49,   -49,   -49,
     -49,   279,   -46,   -45,   -49,   135,   135,   135,   135,   135,
     135,   135,   135,   135,   135,   135,   135,   135,   135,   135,
     135,   135,   135,   135,   135,   135,-32768,   -34,   -34,   206,
  -32768,   -42,-32768,   -36,   135,-32768,-32768,   135,   355,   336,
     309,   309,   390,   407,   161,   221,   221,   -11,   -11,   -11,
     -11,    22,    22,    58,   -37,   -37,   -49,   -49,   -49,   135,
  -32768,-32768,-32768,-32768,   -33,   -26,   230,-32768,   186,   309,
     -49,   250,   -24,-32768,-32768,   397,-32768,   135,   135,-32768,
  -32768,   309,   309,    15,    18,-32768
};

static const short yypgoto[] =
{
  -32768,-32768,     0,-32768,-32768,-32768,-32768,-32768,     4,-32768,
     -25,-32768,   -50,-32768,-32768,-32768
};


#define	YYLAST		458


static const short yytable[] =
{
      29,    67,    66,   115,    31,   118,    76,    77,    36,   106,
      63,    64,    65,    68,    66,   124,   108,    69,   125,   114,
      37,   107,     0,    38,    39,    40,   116,    44,   119,     0,
      43,    58,    59,    60,    61,    62,    63,    64,    65,    73,
      66,     0,   100,   101,   104,    78,    79,    80,    81,    82,
      83,    84,    85,    86,    87,    88,    89,    90,    91,    92,
      93,    94,    95,    96,    97,    98,    60,    61,    62,    63,
      64,    65,     0,    66,   109,     0,     0,   110,     1,     2,
       3,     4,     5,     6,     7,     8,     0,     9,    10,    11,
      12,    13,    14,    15,    16,    17,    18,    19,     0,   111,
      20,    21,    22,    61,    62,    63,    64,    65,   110,    66,
      23,     0,     0,     0,     0,     0,     0,   121,   122,   120,
       0,    24,    25,     0,     0,     0,    26,     0,    27,     1,
       2,     3,     4,     5,     0,     7,     8,     0,     1,     2,
       3,     4,     5,     0,     7,     8,     0,     0,     0,     0,
       0,    20,     0,    22,     0,     0,     0,     0,     0,     0,
      20,    23,    22,     0,     0,     0,     0,     0,     0,     0,
      23,     0,    24,    25,     0,     0,     0,    35,     0,    27,
       0,    24,    25,     0,     0,     0,    26,     0,    27,     1,
       2,     3,     4,     5,     0,     7,     8,    52,    53,    54,
      55,    56,    57,    58,    59,    60,    61,    62,    63,    64,
      65,    20,    66,    22,     6,     0,     0,     0,     9,    10,
      11,    12,    13,    14,    15,    16,    17,    18,    19,     0,
       0,     0,    21,     0,     0,     0,     0,    26,     6,    27,
       0,    67,     9,    10,    11,    12,    13,    14,    15,    16,
      17,    18,    19,    68,     0,     0,    21,    69,   102,    54,
      55,    56,    57,    58,    59,    60,    61,    62,    63,    64,
      65,     0,    66,    45,    46,     0,     0,     0,    47,     0,
       0,    48,   102,    49,    50,    51,    52,    53,    54,    55,
      56,    57,    58,    59,    60,    61,    62,    63,    64,    65,
       0,    66,    45,    46,   117,     0,     0,    47,    74,     0,
      48,     0,    49,    50,    51,    52,    53,    54,    55,    56,
      57,    58,    59,    60,    61,    62,    63,    64,    65,     0,
      66,    75,    45,    46,     0,     0,     0,    47,     0,     0,
      48,     0,    49,    50,    51,    52,    53,    54,    55,    56,
      57,    58,    59,    60,    61,    62,    63,    64,    65,    45,
      66,     0,     0,     0,     0,     0,     0,     0,     0,    49,
      50,    51,    52,    53,    54,    55,    56,    57,    58,    59,
      60,    61,    62,    63,    64,    65,     0,    66,    49,    50,
      51,    52,    53,    54,    55,    56,    57,    58,    59,    60,
      61,    62,    63,    64,    65,     6,    66,     0,     0,     9,
      10,    11,    12,    13,    14,    15,    16,    17,    18,    19,
       0,     0,     0,    21,    50,    51,    52,    53,    54,    55,
      56,    57,    58,    59,    60,    61,    62,    63,    64,    65,
       0,    66,    51,    52,    53,    54,    55,    56,    57,    58,
      59,    60,    61,    62,    63,    64,    65,     0,    66
};

static const short yycheck[] =
{
       0,    35,    51,    29,     0,    29,    52,    52,     8,    51,
      47,    48,    49,    47,    51,     0,    52,    51,     0,    52,
      20,    71,    -1,    23,    24,    25,    52,    27,    52,    -1,
      26,    42,    43,    44,    45,    46,    47,    48,    49,    35,
      51,    -1,    67,    68,    69,    45,    46,    47,    48,    49,
      50,    51,    52,    53,    54,    55,    56,    57,    58,    59,
      60,    61,    62,    63,    64,    65,    44,    45,    46,    47,
      48,    49,    -1,    51,    74,    -1,    -1,    77,     3,     4,
       5,     6,     7,     8,     9,    10,    -1,    12,    13,    14,
      15,    16,    17,    18,    19,    20,    21,    22,    -1,    99,
      25,    26,    27,    45,    46,    47,    48,    49,   108,    51,
      35,    -1,    -1,    -1,    -1,    -1,    -1,   117,   118,   115,
      -1,    46,    47,    -1,    -1,    -1,    51,    -1,    53,     3,
       4,     5,     6,     7,    -1,     9,    10,    -1,     3,     4,
       5,     6,     7,    -1,     9,    10,    -1,    -1,    -1,    -1,
      -1,    25,    -1,    27,    -1,    -1,    -1,    -1,    -1,    -1,
      25,    35,    27,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      35,    -1,    46,    47,    -1,    -1,    -1,    51,    -1,    53,
      -1,    46,    47,    -1,    -1,    -1,    51,    -1,    53,     3,
       4,     5,     6,     7,    -1,     9,    10,    36,    37,    38,
      39,    40,    41,    42,    43,    44,    45,    46,    47,    48,
      49,    25,    51,    27,     8,    -1,    -1,    -1,    12,    13,
      14,    15,    16,    17,    18,    19,    20,    21,    22,    -1,
      -1,    -1,    26,    -1,    -1,    -1,    -1,    51,     8,    53,
      -1,    35,    12,    13,    14,    15,    16,    17,    18,    19,
      20,    21,    22,    47,    -1,    -1,    26,    51,    52,    38,
      39,    40,    41,    42,    43,    44,    45,    46,    47,    48,
      49,    -1,    51,    23,    24,    -1,    -1,    -1,    28,    -1,
      -1,    31,    52,    33,    34,    35,    36,    37,    38,    39,
      40,    41,    42,    43,    44,    45,    46,    47,    48,    49,
      -1,    51,    23,    24,    54,    -1,    -1,    28,    29,    -1,
      31,    -1,    33,    34,    35,    36,    37,    38,    39,    40,
      41,    42,    43,    44,    45,    46,    47,    48,    49,    -1,
      51,    52,    23,    24,    -1,    -1,    -1,    28,    -1,    -1,
      31,    -1,    33,    34,    35,    36,    37,    38,    39,    40,
      41,    42,    43,    44,    45,    46,    47,    48,    49,    23,
      51,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    33,
      34,    35,    36,    37,    38,    39,    40,    41,    42,    43,
      44,    45,    46,    47,    48,    49,    -1,    51,    33,    34,
      35,    36,    37,    38,    39,    40,    41,    42,    43,    44,
      45,    46,    47,    48,    49,     8,    51,    -1,    -1,    12,
      13,    14,    15,    16,    17,    18,    19,    20,    21,    22,
      -1,    -1,    -1,    26,    34,    35,    36,    37,    38,    39,
      40,    41,    42,    43,    44,    45,    46,    47,    48,    49,
      -1,    51,    35,    36,    37,    38,    39,    40,    41,    42,
      43,    44,    45,    46,    47,    48,    49,    -1,    51
};
/* -*-C-*-  Note some compilers choke on comments on `#line' lines.  */
#line 3 "/usr/share/bison/bison.simple"

/* Skeleton output parser for bison,

   Copyright (C) 1984, 1989, 1990, 2000, 2001, 2002 Free Software
   Foundation, Inc.

   This program is free software; you can redistribute it and/or modify
   it under the terms of the GNU General Public License as published by
   the Free Software Foundation; either version 2, or (at your option)
   any later version.

   This program is distributed in the hope that it will be useful,
   but WITHOUT ANY WARRANTY; without even the implied warranty of
   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
   GNU General Public License for more details.

   You should have received a copy of the GNU General Public License
   along with this program; if not, write to the Free Software
   Foundation, Inc., 59 Temple Place - Suite 330,
   Boston, MA 02111-1307, USA.  */

/* As a special exception, when this file is copied by Bison into a
   Bison output file, you may use that output file without restriction.
   This special exception was added by the Free Software Foundation
   in version 1.24 of Bison.  */

/* This is the parser code that is written into each bison parser when
   the %semantic_parser declaration is not specified in the grammar.
   It was written by Richard Stallman by simplifying the hairy parser
   used when %semantic_parser is specified.  */

/* All symbols defined below should begin with yy or YY, to avoid
   infringing on user name space.  This should be done even for local
   variables, as they might otherwise be expanded by user macros.
   There are some unavoidable exceptions within include files to
   define necessary library symbols; they are noted "INFRINGES ON
   USER NAME SPACE" below.  */

#if ! defined (yyoverflow) || defined (YYERROR_VERBOSE)

/* The parser invokes alloca or xmalloc; define the necessary symbols.  */

# if YYSTACK_USE_ALLOCA
#  define YYSTACK_ALLOC alloca
# else
#  ifndef YYSTACK_USE_ALLOCA
#   if defined (alloca) || defined (_ALLOCA_H)
#    define YYSTACK_ALLOC alloca
#   else
#    ifdef __GNUC__
#     define YYSTACK_ALLOC __builtin_alloca
#    endif
#   endif
#  endif
# endif

# ifdef YYSTACK_ALLOC
   /* Pacify GCC's `empty if-body' warning. */
#  define YYSTACK_FREE(Ptr) do { /* empty */; } while (0)
# else
#  if defined (__STDC__) || defined (__cplusplus)
#   include <stdlib.h> /* INFRINGES ON USER NAME SPACE */
#   define YYSIZE_T size_t
#  endif
#  define YYSTACK_ALLOC xmalloc
#  define YYSTACK_FREE free
# endif
#endif /* ! defined (yyoverflow) || defined (YYERROR_VERBOSE) */


#if (! defined (yyoverflow) \
     && (! defined (__cplusplus) \
	 || (YYLTYPE_IS_TRIVIAL && YYSTYPE_IS_TRIVIAL)))

/* A type that is properly aligned for any stack member.  */
union yyalloc
{
  short yyss;
  YYSTYPE yyvs;
# if YYLSP_NEEDED
  YYLTYPE yyls;
# endif
};

/* The size of the maximum gap between one aligned stack and the next.  */
# define YYSTACK_GAP_MAX (sizeof (union yyalloc) - 1)

/* The size of an array large to enough to hold all stacks, each with
   N elements.  */
# if YYLSP_NEEDED
#  define YYSTACK_BYTES(N) \
     ((N) * (sizeof (short) + sizeof (YYSTYPE) + sizeof (YYLTYPE))	\
      + 2 * YYSTACK_GAP_MAX)
# else
#  define YYSTACK_BYTES(N) \
     ((N) * (sizeof (short) + sizeof (YYSTYPE))				\
      + YYSTACK_GAP_MAX)
# endif

/* Copy COUNT objects from FROM to TO.  The source and destination do
   not overlap.  */
# ifndef YYCOPY
#  if 1 < __GNUC__
#   define YYCOPY(To, From, Count) \
      __builtin_memcpy (To, From, (Count) * sizeof (*(From)))
#  else
#   define YYCOPY(To, From, Count)		\
      do					\
	{					\
	  register YYSIZE_T yyi;		\
	  for (yyi = 0; yyi < (Count); yyi++)	\
	    (To)[yyi] = (From)[yyi];		\
	}					\
      while (0)
#  endif
# endif

/* Relocate STACK from its old location to the new one.  The
   local variables YYSIZE and YYSTACKSIZE give the old and new number of
   elements in the stack, and YYPTR gives the new location of the
   stack.  Advance YYPTR to a properly aligned location for the next
   stack.  */
# define YYSTACK_RELOCATE(Stack)					\
    do									\
      {									\
	YYSIZE_T yynewbytes;						\
	YYCOPY (&yyptr->Stack, Stack, yysize);				\
	Stack = &yyptr->Stack;						\
	yynewbytes = yystacksize * sizeof (*Stack) + YYSTACK_GAP_MAX;	\
	yyptr += yynewbytes / sizeof (*yyptr);				\
      }									\
    while (0)

#endif


#if ! defined (YYSIZE_T) && defined (__SIZE_TYPE__)
# define YYSIZE_T __SIZE_TYPE__
#endif
#if ! defined (YYSIZE_T) && defined (size_t)
# define YYSIZE_T size_t
#endif
#if ! defined (YYSIZE_T)
# if defined (__STDC__) || defined (__cplusplus)
#  include <stddef.h> /* INFRINGES ON USER NAME SPACE */
#  define YYSIZE_T size_t
# endif
#endif
#if ! defined (YYSIZE_T)
# define YYSIZE_T unsigned int
#endif

#define yyerrok		(yyerrstatus = 0)
#define yyclearin	(yychar = YYEMPTY)
#define YYEMPTY		-2
#define YYEOF		0
#define YYACCEPT	goto yyacceptlab
#define YYABORT 	goto yyabortlab
#define YYERROR		goto yyerrlab1
/* Like YYERROR except do call yyerror.  This remains here temporarily
   to ease the transition to the new meaning of YYERROR, for GCC.
   Once GCC version 2 has supplanted version 1, this can go.  */
#define YYFAIL		goto yyerrlab
#define YYRECOVERING()  (!!yyerrstatus)
#define YYBACKUP(Token, Value)					\
do								\
  if (yychar == YYEMPTY && yylen == 1)				\
    {								\
      yychar = (Token);						\
      yylval = (Value);						\
      yychar1 = YYTRANSLATE (yychar);				\
      YYPOPSTACK;						\
      goto yybackup;						\
    }								\
  else								\
    { 								\
      yyerror ("syntax error: cannot back up");			\
      YYERROR;							\
    }								\
while (0)

#define YYTERROR	1
#define YYERRCODE	256


/* YYLLOC_DEFAULT -- Compute the default location (before the actions
   are run).

   When YYLLOC_DEFAULT is run, CURRENT is set the location of the
   first token.  By default, to implement support for ranges, extend
   its range to the last symbol.  */

#ifndef YYLLOC_DEFAULT
# define YYLLOC_DEFAULT(Current, Rhs, N)       	\
   Current.last_line   = Rhs[N].last_line;	\
   Current.last_column = Rhs[N].last_column;
#endif


/* YYLEX -- calling `yylex' with the right arguments.  */

#if YYPURE
# if YYLSP_NEEDED
#  ifdef YYLEX_PARAM
#   define YYLEX		yylex (&yylval, &yylloc, YYLEX_PARAM)
#  else
#   define YYLEX		yylex (&yylval, &yylloc)
#  endif
# else /* !YYLSP_NEEDED */
#  ifdef YYLEX_PARAM
#   define YYLEX		yylex (&yylval, YYLEX_PARAM)
#  else
#   define YYLEX		yylex (&yylval)
#  endif
# endif /* !YYLSP_NEEDED */
#else /* !YYPURE */
# define YYLEX			yylex ()
#endif /* !YYPURE */


/* Enable debugging if requested.  */
#if YYDEBUG

# ifndef YYFPRINTF
#  include <stdio.h> /* INFRINGES ON USER NAME SPACE */
#  define YYFPRINTF fprintf
# endif

# define YYDPRINTF(Args)			\
do {						\
  if (yydebug)					\
    YYFPRINTF Args;				\
} while (0)
/* Nonzero means print parse trace.  It is left uninitialized so that
   multiple parsers can coexist.  */
int yydebug;
#else /* !YYDEBUG */
# define YYDPRINTF(Args)
#endif /* !YYDEBUG */

/* YYINITDEPTH -- initial size of the parser's stacks.  */
#ifndef	YYINITDEPTH
# define YYINITDEPTH 200
#endif

/* YYMAXDEPTH -- maximum size the stacks can grow to (effective only
   if the built-in stack extension method is used).

   Do not make this value too large; the results are undefined if
   SIZE_MAX < YYSTACK_BYTES (YYMAXDEPTH)
   evaluated with infinite-precision integer arithmetic.  */

#if YYMAXDEPTH == 0
# undef YYMAXDEPTH
#endif

#ifndef YYMAXDEPTH
# define YYMAXDEPTH 10000
#endif

#ifdef YYERROR_VERBOSE

# ifndef yystrlen
#  if defined (__GLIBC__) && defined (_STRING_H)
#   define yystrlen strlen
#  else
/* Return the length of YYSTR.  */
static YYSIZE_T
#   if defined (__STDC__) || defined (__cplusplus)
yystrlen (const char *yystr)
#   else
yystrlen (yystr)
     const char *yystr;
#   endif
{
  register const char *yys = yystr;

  while (*yys++ != '\0')
    continue;

  return yys - yystr - 1;
}
#  endif
# endif

# ifndef yystpcpy
#  if defined (__GLIBC__) && defined (_STRING_H) && defined (_GNU_SOURCE)
#   define yystpcpy stpcpy
#  else
/* Copy YYSRC to YYDEST, returning the address of the terminating '\0' in
   YYDEST.  */
static char *
#   if defined (__STDC__) || defined (__cplusplus)
yystpcpy (char *yydest, const char *yysrc)
#   else
yystpcpy (yydest, yysrc)
     char *yydest;
     const char *yysrc;
#   endif
{
  register char *yyd = yydest;
  register const char *yys = yysrc;

  while ((*yyd++ = *yys++) != '\0')
    continue;

  return yyd - 1;
}
#  endif
# endif
#endif

#line 315 "/usr/share/bison/bison.simple"


/* The user can define YYPARSE_PARAM as the name of an argument to be passed
   into yyparse.  The argument should have type void *.
   It should actually point to an object.
   Grammar actions can access the variable by casting it
   to the proper pointer type.  */

#ifdef YYPARSE_PARAM
# if defined (__STDC__) || defined (__cplusplus)
#  define YYPARSE_PARAM_ARG void *YYPARSE_PARAM
#  define YYPARSE_PARAM_DECL
# else
#  define YYPARSE_PARAM_ARG YYPARSE_PARAM
#  define YYPARSE_PARAM_DECL void *YYPARSE_PARAM;
# endif
#else /* !YYPARSE_PARAM */
# define YYPARSE_PARAM_ARG
# define YYPARSE_PARAM_DECL
#endif /* !YYPARSE_PARAM */

/* Prevent warning if -Wstrict-prototypes.  */
#ifdef __GNUC__
# ifdef YYPARSE_PARAM
int yyparse (void *);
# else
int yyparse (void);
# endif
#endif

/* YY_DECL_VARIABLES -- depending whether we use a pure parser,
   variables are global, or local to YYPARSE.  */

#define YY_DECL_NON_LSP_VARIABLES			\
/* The lookahead symbol.  */				\
int yychar;						\
							\
/* The semantic value of the lookahead symbol. */	\
YYSTYPE yylval;						\
							\
/* Number of parse errors so far.  */			\
int yynerrs;

#if YYLSP_NEEDED
# define YY_DECL_VARIABLES			\
YY_DECL_NON_LSP_VARIABLES			\
						\
/* Location data for the lookahead symbol.  */	\
YYLTYPE yylloc;
#else
# define YY_DECL_VARIABLES			\
YY_DECL_NON_LSP_VARIABLES
#endif


/* If nonreentrant, generate the variables here. */

#if !YYPURE
YY_DECL_VARIABLES
#endif  /* !YYPURE */

int
yyparse (YYPARSE_PARAM_ARG)
     YYPARSE_PARAM_DECL
{
  /* If reentrant, generate the variables here. */
#if YYPURE
  YY_DECL_VARIABLES
#endif  /* !YYPURE */

  register int yystate;
  register int yyn;
  int yyresult;
  /* Number of tokens to shift before error messages enabled.  */
  int yyerrstatus;
  /* Lookahead token as an internal (translated) token number.  */
  int yychar1 = 0;

  /* Three stacks and their tools:
     `yyss': related to states,
     `yyvs': related to semantic values,
     `yyls': related to locations.

     Refer to the stacks thru separate pointers, to allow yyoverflow
     to xreallocate them elsewhere.  */

  /* The state stack. */
  short	yyssa[YYINITDEPTH];
  short *yyss = yyssa;
  register short *yyssp;

  /* The semantic value stack.  */
  YYSTYPE yyvsa[YYINITDEPTH];
  YYSTYPE *yyvs = yyvsa;
  register YYSTYPE *yyvsp;

#if YYLSP_NEEDED
  /* The location stack.  */
  YYLTYPE yylsa[YYINITDEPTH];
  YYLTYPE *yyls = yylsa;
  YYLTYPE *yylsp;
#endif

#if YYLSP_NEEDED
# define YYPOPSTACK   (yyvsp--, yyssp--, yylsp--)
#else
# define YYPOPSTACK   (yyvsp--, yyssp--)
#endif

  YYSIZE_T yystacksize = YYINITDEPTH;


  /* The variables used to return semantic value and location from the
     action routines.  */
  YYSTYPE yyval;
#if YYLSP_NEEDED
  YYLTYPE yyloc;
#endif

  /* When reducing, the number of symbols on the RHS of the reduced
     rule. */
  int yylen;

  YYDPRINTF ((stderr, "Starting parse\n"));

  yystate = 0;
  yyerrstatus = 0;
  yynerrs = 0;
  yychar = YYEMPTY;		/* Cause a token to be read.  */

  /* Initialize stack pointers.
     Waste one element of value and location stack
     so that they stay on the same level as the state stack.
     The wasted elements are never initialized.  */

  yyssp = yyss;
  yyvsp = yyvs;
#if YYLSP_NEEDED
  yylsp = yyls;
#endif
  goto yysetstate;

/*------------------------------------------------------------.
| yynewstate -- Push a new state, which is found in yystate.  |
`------------------------------------------------------------*/
 yynewstate:
  /* In all cases, when you get here, the value and location stacks
     have just been pushed. so pushing a state here evens the stacks.
     */
  yyssp++;

 yysetstate:
  *yyssp = yystate;

  if (yyssp >= yyss + yystacksize - 1)
    {
      /* Get the current used size of the three stacks, in elements.  */
      YYSIZE_T yysize = yyssp - yyss + 1;

#ifdef yyoverflow
      {
	/* Give user a chance to xreallocate the stack. Use copies of
	   these so that the &'s don't force the real ones into
	   memory.  */
	YYSTYPE *yyvs1 = yyvs;
	short *yyss1 = yyss;

	/* Each stack pointer address is followed by the size of the
	   data in use in that stack, in bytes.  */
# if YYLSP_NEEDED
	YYLTYPE *yyls1 = yyls;
	/* This used to be a conditional around just the two extra args,
	   but that might be undefined if yyoverflow is a macro.  */
	yyoverflow ("parser stack overflow",
		    &yyss1, yysize * sizeof (*yyssp),
		    &yyvs1, yysize * sizeof (*yyvsp),
		    &yyls1, yysize * sizeof (*yylsp),
		    &yystacksize);
	yyls = yyls1;
# else
	yyoverflow ("parser stack overflow",
		    &yyss1, yysize * sizeof (*yyssp),
		    &yyvs1, yysize * sizeof (*yyvsp),
		    &yystacksize);
# endif
	yyss = yyss1;
	yyvs = yyvs1;
      }
#else /* no yyoverflow */
# ifndef YYSTACK_RELOCATE
      goto yyoverflowlab;
# else
      /* Extend the stack our own way.  */
      if (yystacksize >= YYMAXDEPTH)
	goto yyoverflowlab;
      yystacksize *= 2;
      if (yystacksize > YYMAXDEPTH)
	yystacksize = YYMAXDEPTH;

      {
	short *yyss1 = yyss;
	union yyalloc *yyptr =
	  (union yyalloc *) YYSTACK_ALLOC (YYSTACK_BYTES (yystacksize));
	if (! yyptr)
	  goto yyoverflowlab;
	YYSTACK_RELOCATE (yyss);
	YYSTACK_RELOCATE (yyvs);
# if YYLSP_NEEDED
	YYSTACK_RELOCATE (yyls);
# endif
# undef YYSTACK_RELOCATE
	if (yyss1 != yyssa)
	  YYSTACK_FREE (yyss1);
      }
# endif
#endif /* no yyoverflow */

      yyssp = yyss + yysize - 1;
      yyvsp = yyvs + yysize - 1;
#if YYLSP_NEEDED
      yylsp = yyls + yysize - 1;
#endif

      YYDPRINTF ((stderr, "Stack size increased to %lu\n",
		  (unsigned long int) yystacksize));

      if (yyssp >= yyss + yystacksize - 1)
	YYABORT;
    }

  YYDPRINTF ((stderr, "Entering state %d\n", yystate));

  goto yybackup;


/*-----------.
| yybackup.  |
`-----------*/
yybackup:

/* Do appropriate processing given the current state.  */
/* Read a lookahead token if we need one and don't already have one.  */
/* yyresume: */

  /* First try to decide what to do without reference to lookahead token.  */

  yyn = yypact[yystate];
  if (yyn == YYFLAG)
    goto yydefault;

  /* Not known => get a lookahead token if don't already have one.  */

  /* yychar is either YYEMPTY or YYEOF
     or a valid token in external form.  */

  if (yychar == YYEMPTY)
    {
      YYDPRINTF ((stderr, "Reading a token: "));
      yychar = YYLEX;
    }

  /* Convert token to internal form (in yychar1) for indexing tables with */

  if (yychar <= 0)		/* This means end of input. */
    {
      yychar1 = 0;
      yychar = YYEOF;		/* Don't call YYLEX any more */

      YYDPRINTF ((stderr, "Now at end of input.\n"));
    }
  else
    {
      yychar1 = YYTRANSLATE (yychar);

#if YYDEBUG
     /* We have to keep this `#if YYDEBUG', since we use variables
	which are defined only if `YYDEBUG' is set.  */
      if (yydebug)
	{
	  YYFPRINTF (stderr, "Next token is %d (%s",
		     yychar, yytname[yychar1]);
	  /* Give the individual parser a way to print the precise
	     meaning of a token, for further debugging info.  */
# ifdef YYPRINT
	  YYPRINT (stderr, yychar, yylval);
# endif
	  YYFPRINTF (stderr, ")\n");
	}
#endif
    }

  yyn += yychar1;
  if (yyn < 0 || yyn > YYLAST || yycheck[yyn] != yychar1)
    goto yydefault;

  yyn = yytable[yyn];

  /* yyn is what to do for this token type in this state.
     Negative => reduce, -yyn is rule number.
     Positive => shift, yyn is new state.
       New state is final state => don't bother to shift,
       just return success.
     0, or most negative number => error.  */

  if (yyn < 0)
    {
      if (yyn == YYFLAG)
	goto yyerrlab;
      yyn = -yyn;
      goto yyreduce;
    }
  else if (yyn == 0)
    goto yyerrlab;

  if (yyn == YYFINAL)
    YYACCEPT;

  /* Shift the lookahead token.  */
  YYDPRINTF ((stderr, "Shifting token %d (%s), ",
	      yychar, yytname[yychar1]));

  /* Discard the token being shifted unless it is eof.  */
  if (yychar != YYEOF)
    yychar = YYEMPTY;

  *++yyvsp = yylval;
#if YYLSP_NEEDED
  *++yylsp = yylloc;
#endif

  /* Count tokens shifted since error; after three, turn off error
     status.  */
  if (yyerrstatus)
    yyerrstatus--;

  yystate = yyn;
  goto yynewstate;


/*-----------------------------------------------------------.
| yydefault -- do the default action for the current state.  |
`-----------------------------------------------------------*/
yydefault:
  yyn = yydefact[yystate];
  if (yyn == 0)
    goto yyerrlab;
  goto yyreduce;


/*-----------------------------.
| yyreduce -- Do a reduction.  |
`-----------------------------*/
yyreduce:
  /* yyn is the number of a rule to reduce with.  */
  yylen = yyr2[yyn];

  /* If YYLEN is nonzero, implement the default value of the action:
     `$$ = $1'.

     Otherwise, the following line sets YYVAL to the semantic value of
     the lookahead token.  This behavior is undocumented and Bison
     users should not rely upon it.  Assigning to YYVAL
     unconditionally makes the parser a bit smaller, and it avoids a
     GCC warning that YYVAL may be used uninitialized.  */
  yyval = yyvsp[1-yylen];

#if YYLSP_NEEDED
  /* Similarly for the default location.  Let the user run additional
     commands if for instance locations are ranges.  */
  yyloc = yylsp[1-yylen];
  YYLLOC_DEFAULT (yyloc, (yylsp - yylen), yylen);
#endif

#if YYDEBUG
  /* We have to keep this `#if YYDEBUG', since we use variables which
     are defined only if `YYDEBUG' is set.  */
  if (yydebug)
    {
      int yyi;

      YYFPRINTF (stderr, "Reducing via rule %d (line %d), ",
		 yyn, yyrline[yyn]);

      /* Print the symbols being reduced, and their result.  */
      for (yyi = yyprhs[yyn]; yyrhs[yyi] > 0; yyi++)
	YYFPRINTF (stderr, "%s ", yytname[yyrhs[yyi]]);
      YYFPRINTF (stderr, " -> %s\n", yytname[yyr1[yyn]]);
    }
#endif

  switch (yyn) {

case 3:
#line 233 "f-exp.y"
{ write_exp_elt_opcode(OP_TYPE);
			  write_exp_elt_type(yyvsp[0].tval);
			  write_exp_elt_opcode(OP_TYPE); }
    break;
case 4:
#line 239 "f-exp.y"
{ }
    break;
case 5:
#line 244 "f-exp.y"
{ write_exp_elt_opcode (UNOP_IND); }
    break;
case 6:
#line 248 "f-exp.y"
{ write_exp_elt_opcode (UNOP_ADDR); }
    break;
case 7:
#line 252 "f-exp.y"
{ write_exp_elt_opcode (UNOP_NEG); }
    break;
case 8:
#line 256 "f-exp.y"
{ write_exp_elt_opcode (UNOP_LOGICAL_NOT); }
    break;
case 9:
#line 260 "f-exp.y"
{ write_exp_elt_opcode (UNOP_COMPLEMENT); }
    break;
case 10:
#line 264 "f-exp.y"
{ write_exp_elt_opcode (UNOP_SIZEOF); }
    break;
case 11:
#line 273 "f-exp.y"
{ start_arglist (); }
    break;
case 12:
#line 275 "f-exp.y"
{ write_exp_elt_opcode (OP_F77_UNDETERMINED_ARGLIST);
			  write_exp_elt_longcst ((LONGEST) end_arglist ());
			  write_exp_elt_opcode (OP_F77_UNDETERMINED_ARGLIST); }
    break;
case 14:
#line 284 "f-exp.y"
{ arglist_len = 1; }
    break;
case 15:
#line 288 "f-exp.y"
{ arglist_len = 2;}
    break;
case 16:
#line 292 "f-exp.y"
{ arglist_len++; }
    break;
case 17:
#line 296 "f-exp.y"
{ }
    break;
case 18:
#line 301 "f-exp.y"
{ }
    break;
case 19:
#line 305 "f-exp.y"
{ write_exp_elt_opcode(OP_COMPLEX); }
    break;
case 20:
#line 309 "f-exp.y"
{ write_exp_elt_opcode (UNOP_CAST);
			  write_exp_elt_type (yyvsp[-2].tval);
			  write_exp_elt_opcode (UNOP_CAST); }
    break;
case 21:
#line 317 "f-exp.y"
{ write_exp_elt_opcode (BINOP_REPEAT); }
    break;
case 22:
#line 321 "f-exp.y"
{ write_exp_elt_opcode (BINOP_MUL); }
    break;
case 23:
#line 325 "f-exp.y"
{ write_exp_elt_opcode (BINOP_DIV); }
    break;
case 24:
#line 329 "f-exp.y"
{ write_exp_elt_opcode (BINOP_REM); }
    break;
case 25:
#line 333 "f-exp.y"
{ write_exp_elt_opcode (BINOP_ADD); }
    break;
case 26:
#line 337 "f-exp.y"
{ write_exp_elt_opcode (BINOP_SUB); }
    break;
case 27:
#line 341 "f-exp.y"
{ write_exp_elt_opcode (BINOP_LSH); }
    break;
case 28:
#line 345 "f-exp.y"
{ write_exp_elt_opcode (BINOP_RSH); }
    break;
case 29:
#line 349 "f-exp.y"
{ write_exp_elt_opcode (BINOP_EQUAL); }
    break;
case 30:
#line 353 "f-exp.y"
{ write_exp_elt_opcode (BINOP_NOTEQUAL); }
    break;
case 31:
#line 357 "f-exp.y"
{ write_exp_elt_opcode (BINOP_LEQ); }
    break;
case 32:
#line 361 "f-exp.y"
{ write_exp_elt_opcode (BINOP_GEQ); }
    break;
case 33:
#line 365 "f-exp.y"
{ write_exp_elt_opcode (BINOP_LESS); }
    break;
case 34:
#line 369 "f-exp.y"
{ write_exp_elt_opcode (BINOP_GTR); }
    break;
case 35:
#line 373 "f-exp.y"
{ write_exp_elt_opcode (BINOP_BITWISE_AND); }
    break;
case 36:
#line 377 "f-exp.y"
{ write_exp_elt_opcode (BINOP_BITWISE_XOR); }
    break;
case 37:
#line 381 "f-exp.y"
{ write_exp_elt_opcode (BINOP_BITWISE_IOR); }
    break;
case 38:
#line 385 "f-exp.y"
{ write_exp_elt_opcode (BINOP_LOGICAL_AND); }
    break;
case 39:
#line 390 "f-exp.y"
{ write_exp_elt_opcode (BINOP_LOGICAL_OR); }
    break;
case 40:
#line 394 "f-exp.y"
{ write_exp_elt_opcode (BINOP_ASSIGN); }
    break;
case 41:
#line 398 "f-exp.y"
{ write_exp_elt_opcode (BINOP_ASSIGN_MODIFY);
			  write_exp_elt_opcode (yyvsp[-1].opcode);
			  write_exp_elt_opcode (BINOP_ASSIGN_MODIFY); }
    break;
case 42:
#line 404 "f-exp.y"
{ write_exp_elt_opcode (OP_LONG);
			  write_exp_elt_type (yyvsp[0].typed_val.type);
			  write_exp_elt_longcst ((LONGEST)(yyvsp[0].typed_val.val));
			  write_exp_elt_opcode (OP_LONG); }
    break;
case 43:
#line 411 "f-exp.y"
{ YYSTYPE val;
			  parse_number (yyvsp[0].ssym.stoken.ptr, yyvsp[0].ssym.stoken.length, 0, &val);
			  write_exp_elt_opcode (OP_LONG);
			  write_exp_elt_type (val.typed_val.type);
			  write_exp_elt_longcst ((LONGEST)val.typed_val.val);
			  write_exp_elt_opcode (OP_LONG); }
    break;
case 44:
#line 420 "f-exp.y"
{ write_exp_elt_opcode (OP_DOUBLE);
			  write_exp_elt_type (builtin_type_f_real_s8);
			  write_exp_elt_dblcst (yyvsp[0].dval);
			  write_exp_elt_opcode (OP_DOUBLE); }
    break;
case 47:
#line 433 "f-exp.y"
{ write_exp_elt_opcode (OP_LONG);
			  write_exp_elt_type (builtin_type_f_integer);
			  CHECK_TYPEDEF (yyvsp[-1].tval);
			  write_exp_elt_longcst ((LONGEST) TYPE_LENGTH (yyvsp[-1].tval));
			  write_exp_elt_opcode (OP_LONG); }
    break;
case 48:
#line 441 "f-exp.y"
{ write_exp_elt_opcode (OP_BOOL);
			  write_exp_elt_longcst ((LONGEST) yyvsp[0].lval);
			  write_exp_elt_opcode (OP_BOOL);
			}
    break;
case 49:
#line 448 "f-exp.y"
{
			  write_exp_elt_opcode (OP_STRING);
			  write_exp_string (yyvsp[0].sval);
			  write_exp_elt_opcode (OP_STRING);
			}
    break;
case 50:
#line 456 "f-exp.y"
{ struct symbol *sym = yyvsp[0].ssym.sym;

			  if (sym)
			    {
			      if (symbol_read_needs_frame (sym))
				{
				  if (innermost_block == 0 ||
				      contained_in (block_found, 
						    innermost_block))
				    innermost_block = block_found;
				}
			      write_exp_elt_opcode (OP_VAR_VALUE);
			      /* We want to use the selected frame, not
				 another more inner frame which happens to
				 be in the same block.  */
			      write_exp_elt_block (NULL);
			      write_exp_elt_sym (sym);
			      write_exp_elt_opcode (OP_VAR_VALUE);
			      break;
			    }
			  else
			    {
			      struct minimal_symbol *msymbol;
			      char *arg = copy_name (yyvsp[0].ssym.stoken);

			      msymbol =
				lookup_minimal_symbol (arg, NULL, NULL);
			      if (msymbol != NULL)
				{
				  write_exp_msymbol (msymbol,
						     lookup_function_type (builtin_type_int),
						     builtin_type_int);
				}
			      else if (!have_full_symbols () && !have_partial_symbols ())
				error ("No symbol table is loaded.  Use the \"file\" command.");
			      else
				error ("No symbol \"%s\" in current context.",
				       copy_name (yyvsp[0].ssym.stoken));
			    }
			}
    break;
case 53:
#line 504 "f-exp.y"
{
		  /* This is where the interesting stuff happens.  */
		  int done = 0;
		  int array_size;
		  struct type *follow_type = yyvsp[-1].tval;
		  struct type *range_type;
		  
		  while (!done)
		    switch (pop_type ())
		      {
		      case tp_end:
			done = 1;
			break;
		      case tp_pointer:
			follow_type = lookup_pointer_type (follow_type);
			break;
		      case tp_reference:
			follow_type = lookup_reference_type (follow_type);
			break;
		      case tp_array:
			array_size = pop_type_int ();
			if (array_size != -1)
			  {
			    range_type =
			      create_range_type ((struct type *) NULL,
						 builtin_type_f_integer, 0,
						 array_size - 1);
			    follow_type =
			      create_array_type ((struct type *) NULL,
						 follow_type, range_type);
			  }
			else
			  follow_type = lookup_pointer_type (follow_type);
			break;
		      case tp_function:
			follow_type = lookup_function_type (follow_type);
			break;
		      }
		  yyval.tval = follow_type;
		}
    break;
case 54:
#line 547 "f-exp.y"
{ push_type (tp_pointer); yyval.voidval = 0; }
    break;
case 55:
#line 549 "f-exp.y"
{ push_type (tp_pointer); yyval.voidval = yyvsp[0].voidval; }
    break;
case 56:
#line 551 "f-exp.y"
{ push_type (tp_reference); yyval.voidval = 0; }
    break;
case 57:
#line 553 "f-exp.y"
{ push_type (tp_reference); yyval.voidval = yyvsp[0].voidval; }
    break;
case 59:
#line 558 "f-exp.y"
{ yyval.voidval = yyvsp[-1].voidval; }
    break;
case 60:
#line 560 "f-exp.y"
{ push_type (tp_function); }
    break;
case 61:
#line 562 "f-exp.y"
{ push_type (tp_function); }
    break;
case 62:
#line 566 "f-exp.y"
{ yyval.voidval = 0; }
    break;
case 63:
#line 568 "f-exp.y"
{ free (yyvsp[-1].tvec); yyval.voidval = 0; }
    break;
case 64:
#line 573 "f-exp.y"
{ yyval.tval = yyvsp[0].tsym.type; }
    break;
case 65:
#line 575 "f-exp.y"
{ yyval.tval = builtin_type_f_integer; }
    break;
case 66:
#line 577 "f-exp.y"
{ yyval.tval = builtin_type_f_integer_s2; }
    break;
case 67:
#line 579 "f-exp.y"
{ yyval.tval = builtin_type_f_character; }
    break;
case 68:
#line 581 "f-exp.y"
{ yyval.tval = builtin_type_f_logical;}
    break;
case 69:
#line 583 "f-exp.y"
{ yyval.tval = builtin_type_f_logical_s2;}
    break;
case 70:
#line 585 "f-exp.y"
{ yyval.tval = builtin_type_f_logical_s1;}
    break;
case 71:
#line 587 "f-exp.y"
{ yyval.tval = builtin_type_f_real;}
    break;
case 72:
#line 589 "f-exp.y"
{ yyval.tval = builtin_type_f_real_s8;}
    break;
case 73:
#line 591 "f-exp.y"
{ yyval.tval = builtin_type_f_real_s16;}
    break;
case 74:
#line 593 "f-exp.y"
{ yyval.tval = builtin_type_f_complex_s8;}
    break;
case 75:
#line 595 "f-exp.y"
{ yyval.tval = builtin_type_f_complex_s16;}
    break;
case 76:
#line 597 "f-exp.y"
{ yyval.tval = builtin_type_f_complex_s32;}
    break;
case 78:
#line 605 "f-exp.y"
{ yyval.tvec = (struct type **) xmalloc (sizeof (struct type *) * 2);
		  yyval.ivec[0] = 1;	/* Number of types in vector */
		  yyval.tvec[1] = yyvsp[0].tval;
		}
    break;
case 79:
#line 610 "f-exp.y"
{ int len = sizeof (struct type *) * (++(yyvsp[-2].ivec[0]) + 1);
		  yyval.tvec = (struct type **) xrealloc ((char *) yyvsp[-2].tvec, len);
		  yyval.tvec[yyval.ivec[0]] = yyvsp[0].tval;
		}
    break;
case 80:
#line 617 "f-exp.y"
{ yyval.sval = yyvsp[0].ssym.stoken; }
    break;
case 81:
#line 619 "f-exp.y"
{ yyval.sval = yyvsp[0].tsym.stoken; }
    break;
case 82:
#line 621 "f-exp.y"
{ yyval.sval = yyvsp[0].ssym.stoken; }
    break;
}

#line 705 "/usr/share/bison/bison.simple"


  yyvsp -= yylen;
  yyssp -= yylen;
#if YYLSP_NEEDED
  yylsp -= yylen;
#endif

#if YYDEBUG
  if (yydebug)
    {
      short *yyssp1 = yyss - 1;
      YYFPRINTF (stderr, "state stack now");
      while (yyssp1 != yyssp)
	YYFPRINTF (stderr, " %d", *++yyssp1);
      YYFPRINTF (stderr, "\n");
    }
#endif

  *++yyvsp = yyval;
#if YYLSP_NEEDED
  *++yylsp = yyloc;
#endif

  /* Now `shift' the result of the reduction.  Determine what state
     that goes to, based on the state we popped back to and the rule
     number reduced by.  */

  yyn = yyr1[yyn];

  yystate = yypgoto[yyn - YYNTBASE] + *yyssp;
  if (yystate >= 0 && yystate <= YYLAST && yycheck[yystate] == *yyssp)
    yystate = yytable[yystate];
  else
    yystate = yydefgoto[yyn - YYNTBASE];

  goto yynewstate;


/*------------------------------------.
| yyerrlab -- here on detecting error |
`------------------------------------*/
yyerrlab:
  /* If not already recovering from an error, report this error.  */
  if (!yyerrstatus)
    {
      ++yynerrs;

#ifdef YYERROR_VERBOSE
      yyn = yypact[yystate];

      if (yyn > YYFLAG && yyn < YYLAST)
	{
	  YYSIZE_T yysize = 0;
	  char *yymsg;
	  int yyx, yycount;

	  yycount = 0;
	  /* Start YYX at -YYN if negative to avoid negative indexes in
	     YYCHECK.  */
	  for (yyx = yyn < 0 ? -yyn : 0;
	       yyx < (int) (sizeof (yytname) / sizeof (char *)); yyx++)
	    if (yycheck[yyx + yyn] == yyx)
	      yysize += yystrlen (yytname[yyx]) + 15, yycount++;
	  yysize += yystrlen ("parse error, unexpected ") + 1;
	  yysize += yystrlen (yytname[YYTRANSLATE (yychar)]);
	  yymsg = (char *) YYSTACK_ALLOC (yysize);
	  if (yymsg != 0)
	    {
	      char *yyp = yystpcpy (yymsg, "parse error, unexpected ");
	      yyp = yystpcpy (yyp, yytname[YYTRANSLATE (yychar)]);

	      if (yycount < 5)
		{
		  yycount = 0;
		  for (yyx = yyn < 0 ? -yyn : 0;
		       yyx < (int) (sizeof (yytname) / sizeof (char *));
		       yyx++)
		    if (yycheck[yyx + yyn] == yyx)
		      {
			const char *yyq = ! yycount ? ", expecting " : " or ";
			yyp = yystpcpy (yyp, yyq);
			yyp = yystpcpy (yyp, yytname[yyx]);
			yycount++;
		      }
		}
	      yyerror (yymsg);
	      YYSTACK_FREE (yymsg);
	    }
	  else
	    yyerror ("parse error; also virtual memory exhausted");
	}
      else
#endif /* defined (YYERROR_VERBOSE) */
	yyerror ("parse error");
    }
  goto yyerrlab1;


/*--------------------------------------------------.
| yyerrlab1 -- error raised explicitly by an action |
`--------------------------------------------------*/
yyerrlab1:
  if (yyerrstatus == 3)
    {
      /* If just tried and failed to reuse lookahead token after an
	 error, discard it.  */

      /* return failure if at end of input */
      if (yychar == YYEOF)
	YYABORT;
      YYDPRINTF ((stderr, "Discarding token %d (%s).\n",
		  yychar, yytname[yychar1]));
      yychar = YYEMPTY;
    }

  /* Else will try to reuse lookahead token after shifting the error
     token.  */

  yyerrstatus = 3;		/* Each real token shifted decrements this */

  goto yyerrhandle;


/*-------------------------------------------------------------------.
| yyerrdefault -- current state does not do anything special for the |
| error token.                                                       |
`-------------------------------------------------------------------*/
yyerrdefault:
#if 0
  /* This is wrong; only states that explicitly want error tokens
     should shift them.  */

  /* If its default is to accept any token, ok.  Otherwise pop it.  */
  yyn = yydefact[yystate];
  if (yyn)
    goto yydefault;
#endif


/*---------------------------------------------------------------.
| yyerrpop -- pop the current state because it cannot handle the |
| error token                                                    |
`---------------------------------------------------------------*/
yyerrpop:
  if (yyssp == yyss)
    YYABORT;
  yyvsp--;
  yystate = *--yyssp;
#if YYLSP_NEEDED
  yylsp--;
#endif

#if YYDEBUG
  if (yydebug)
    {
      short *yyssp1 = yyss - 1;
      YYFPRINTF (stderr, "Error: state stack now");
      while (yyssp1 != yyssp)
	YYFPRINTF (stderr, " %d", *++yyssp1);
      YYFPRINTF (stderr, "\n");
    }
#endif

/*--------------.
| yyerrhandle.  |
`--------------*/
yyerrhandle:
  yyn = yypact[yystate];
  if (yyn == YYFLAG)
    goto yyerrdefault;

  yyn += YYTERROR;
  if (yyn < 0 || yyn > YYLAST || yycheck[yyn] != YYTERROR)
    goto yyerrdefault;

  yyn = yytable[yyn];
  if (yyn < 0)
    {
      if (yyn == YYFLAG)
	goto yyerrpop;
      yyn = -yyn;
      goto yyreduce;
    }
  else if (yyn == 0)
    goto yyerrpop;

  if (yyn == YYFINAL)
    YYACCEPT;

  YYDPRINTF ((stderr, "Shifting error token, "));

  *++yyvsp = yylval;
#if YYLSP_NEEDED
  *++yylsp = yylloc;
#endif

  yystate = yyn;
  goto yynewstate;


/*-------------------------------------.
| yyacceptlab -- YYACCEPT comes here.  |
`-------------------------------------*/
yyacceptlab:
  yyresult = 0;
  goto yyreturn;

/*-----------------------------------.
| yyabortlab -- YYABORT comes here.  |
`-----------------------------------*/
yyabortlab:
  yyresult = 1;
  goto yyreturn;

/*---------------------------------------------.
| yyoverflowab -- parser overflow comes here.  |
`---------------------------------------------*/
yyoverflowlab:
  yyerror ("parser stack overflow");
  yyresult = 2;
  /* Fall through.  */

yyreturn:
#ifndef yyoverflow
  if (yyss != yyssa)
    YYSTACK_FREE (yyss);
#endif
  return yyresult;
}
#line 634 "f-exp.y"


/* Take care of parsing a number (anything that starts with a digit).
   Set yylval and return the token type; update lexptr.
   LEN is the number of characters in it.  */

/*** Needs some error checking for the float case ***/

static int
parse_number (p, len, parsed_float, putithere)
     char *p;
     int len;
     int parsed_float;
     YYSTYPE *putithere;
{
  LONGEST n = 0;
  LONGEST prevn = 0;
  int c;
  int base = input_radix;
  int unsigned_p = 0;
  int long_p = 0;
  ULONGEST high_bit;
  struct type *signed_type;
  struct type *unsigned_type;

  if (parsed_float)
    {
      /* It's a float since it contains a point or an exponent.  */
      /* [dD] is not understood as an exponent by atof, change it to 'e'.  */
      char *tmp, *tmp2;

      tmp = xstrdup (p);
      for (tmp2 = tmp; *tmp2; ++tmp2)
	if (*tmp2 == 'd' || *tmp2 == 'D')
	  *tmp2 = 'e';
      putithere->dval = atof (tmp);
      free (tmp);
      return FLOAT;
    }

  /* Handle base-switching prefixes 0x, 0t, 0d, 0 */
  if (p[0] == '0')
    switch (p[1])
      {
      case 'x':
      case 'X':
	if (len >= 3)
	  {
	    p += 2;
	    base = 16;
	    len -= 2;
	  }
	break;
	
      case 't':
      case 'T':
      case 'd':
      case 'D':
	if (len >= 3)
	  {
	    p += 2;
	    base = 10;
	    len -= 2;
	  }
	break;
	
      default:
	base = 8;
	break;
      }
  
  while (len-- > 0)
    {
      c = *p++;
      if (isupper (c))
	c = tolower (c);
      if (len == 0 && c == 'l')
	long_p = 1;
      else if (len == 0 && c == 'u')
	unsigned_p = 1;
      else
	{
	  int i;
	  if (c >= '0' && c <= '9')
	    i = c - '0';
	  else if (c >= 'a' && c <= 'f')
	    i = c - 'a' + 10;
	  else
	    return ERROR;	/* Char not a digit */
	  if (i >= base)
	    return ERROR;		/* Invalid digit in this base */
	  n *= base;
	  n += i;
	}
      /* Portably test for overflow (only works for nonzero values, so make
	 a second check for zero).  */
      if ((prevn >= n) && n != 0)
	unsigned_p=1;		/* Try something unsigned */
      /* If range checking enabled, portably test for unsigned overflow.  */
      if (RANGE_CHECK && n != 0)
	{
	  if ((unsigned_p && (unsigned)prevn >= (unsigned)n))
	    range_error("Overflow on numeric constant.");	 
	}
      prevn = n;
    }
  
  /* If the number is too big to be an int, or it's got an l suffix
     then it's a long.  Work out if this has to be a long by
     shifting right and and seeing if anything remains, and the
     target int size is different to the target long size.
     
     In the expression below, we could have tested
     (n >> TARGET_INT_BIT)
     to see if it was zero,
     but too many compilers warn about that, when ints and longs
     are the same size.  So we shift it twice, with fewer bits
     each time, for the same result.  */
  
  if ((TARGET_INT_BIT != TARGET_LONG_BIT 
       && ((n >> 2) >> (TARGET_INT_BIT-2)))   /* Avoid shift warning */
      || long_p)
    {
      high_bit = ((ULONGEST)1) << (TARGET_LONG_BIT-1);
      unsigned_type = builtin_type_unsigned_long;
      signed_type = builtin_type_long;
    }
  else 
    {
      high_bit = ((ULONGEST)1) << (TARGET_INT_BIT-1);
      unsigned_type = builtin_type_unsigned_int;
      signed_type = builtin_type_int;
    }    
  
  putithere->typed_val.val = n;
  
  /* If the high bit of the worked out type is set then this number
     has to be unsigned. */
  
  if (unsigned_p || (n & high_bit)) 
    putithere->typed_val.type = unsigned_type;
  else 
    putithere->typed_val.type = signed_type;
  
  return INT;
}

struct token
{
  char *operator;
  int token;
  enum exp_opcode opcode;
};

static const struct token dot_ops[] =
{
  { ".and.", BOOL_AND, BINOP_END },
  { ".AND.", BOOL_AND, BINOP_END },
  { ".or.", BOOL_OR, BINOP_END },
  { ".OR.", BOOL_OR, BINOP_END },
  { ".not.", BOOL_NOT, BINOP_END },
  { ".NOT.", BOOL_NOT, BINOP_END },
  { ".eq.", EQUAL, BINOP_END },
  { ".EQ.", EQUAL, BINOP_END },
  { ".eqv.", EQUAL, BINOP_END },
  { ".NEQV.", NOTEQUAL, BINOP_END },
  { ".neqv.", NOTEQUAL, BINOP_END },
  { ".EQV.", EQUAL, BINOP_END },
  { ".ne.", NOTEQUAL, BINOP_END },
  { ".NE.", NOTEQUAL, BINOP_END },
  { ".le.", LEQ, BINOP_END },
  { ".LE.", LEQ, BINOP_END },
  { ".ge.", GEQ, BINOP_END },
  { ".GE.", GEQ, BINOP_END },
  { ".gt.", GREATERTHAN, BINOP_END },
  { ".GT.", GREATERTHAN, BINOP_END },
  { ".lt.", LESSTHAN, BINOP_END },
  { ".LT.", LESSTHAN, BINOP_END },
  { NULL, 0, 0 }
};

struct f77_boolean_val 
{
  char *name;
  int value;
}; 

static const struct f77_boolean_val boolean_values[]  = 
{
  { ".true.", 1 },
  { ".TRUE.", 1 },
  { ".false.", 0 },
  { ".FALSE.", 0 },
  { NULL, 0 }
};

static const struct token f77_keywords[] = 
{
  { "complex_16", COMPLEX_S16_KEYWORD, BINOP_END },
  { "complex_32", COMPLEX_S32_KEYWORD, BINOP_END },
  { "character", CHARACTER, BINOP_END },
  { "integer_2", INT_S2_KEYWORD, BINOP_END },
  { "logical_1", LOGICAL_S1_KEYWORD, BINOP_END },
  { "logical_2", LOGICAL_S2_KEYWORD, BINOP_END },
  { "complex_8", COMPLEX_S8_KEYWORD, BINOP_END },
  { "integer", INT_KEYWORD, BINOP_END },
  { "logical", LOGICAL_KEYWORD, BINOP_END },
  { "real_16", REAL_S16_KEYWORD, BINOP_END },
  { "complex", COMPLEX_S8_KEYWORD, BINOP_END },
  { "sizeof", SIZEOF, BINOP_END },
  { "real_8", REAL_S8_KEYWORD, BINOP_END },
  { "real", REAL_KEYWORD, BINOP_END },
  { NULL, 0, 0 }
}; 

/* Implementation of a dynamically expandable buffer for processing input
   characters acquired through lexptr and building a value to return in
   yylval. Ripped off from ch-exp.y */ 

static char *tempbuf;		/* Current buffer contents */
static int tempbufsize;		/* Size of allocated buffer */
static int tempbufindex;	/* Current index into buffer */

#define GROWBY_MIN_SIZE 64	/* Minimum amount to grow buffer by */

#define CHECKBUF(size) \
  do { \
    if (tempbufindex + (size) >= tempbufsize) \
      { \
	growbuf_by_size (size); \
      } \
  } while (0);


/* Grow the static temp buffer if necessary, including allocating the first one
   on demand. */

static void
growbuf_by_size (count)
     int count;
{
  int growby;

  growby = max (count, GROWBY_MIN_SIZE);
  tempbufsize += growby;
  if (tempbuf == NULL)
    tempbuf = (char *) xmalloc (tempbufsize);
  else
    tempbuf = (char *) xrealloc (tempbuf, tempbufsize);
}

/* Blatantly ripped off from ch-exp.y. This routine recognizes F77 
   string-literals. 
   
   Recognize a string literal.  A string literal is a nonzero sequence
   of characters enclosed in matching single quotes, except that
   a single character inside single quotes is a character literal, which
   we reject as a string literal.  To embed the terminator character inside
   a string, it is simply doubled (I.E. 'this''is''one''string') */

static int
match_string_literal ()
{
  char *tokptr = lexptr;

  for (tempbufindex = 0, tokptr++; *tokptr != '\0'; tokptr++)
    {
      CHECKBUF (1);
      if (*tokptr == *lexptr)
	{
	  if (*(tokptr + 1) == *lexptr)
	    tokptr++;
	  else
	    break;
	}
      tempbuf[tempbufindex++] = *tokptr;
    }
  if (*tokptr == '\0'					/* no terminator */
      || tempbufindex == 0)				/* no string */
    return 0;
  else
    {
      tempbuf[tempbufindex] = '\0';
      yylval.sval.ptr = tempbuf;
      yylval.sval.length = tempbufindex;
      lexptr = ++tokptr;
      return STRING_LITERAL;
    }
}

/* Read one token, getting characters through lexptr.  */

static int
yylex ()
{
  int c;
  int namelen;
  unsigned int i,token;
  char *tokstart;
  
 retry:
 
  prev_lexptr = lexptr;
 
  tokstart = lexptr;
  
  /* First of all, let us make sure we are not dealing with the 
     special tokens .true. and .false. which evaluate to 1 and 0.  */
  
  if (*lexptr == '.')
    { 
      for (i = 0; boolean_values[i].name != NULL; i++)
	{
	  if (strncmp (tokstart, boolean_values[i].name,
		       strlen (boolean_values[i].name)) == 0)
	    {
	      lexptr += strlen (boolean_values[i].name); 
	      yylval.lval = boolean_values[i].value; 
	      return BOOLEAN_LITERAL;
	    }
	}
    }
  
  /* See if it is a special .foo. operator */
  
  for (i = 0; dot_ops[i].operator != NULL; i++)
    if (strncmp (tokstart, dot_ops[i].operator, strlen (dot_ops[i].operator)) == 0)
      {
	lexptr += strlen (dot_ops[i].operator);
	yylval.opcode = dot_ops[i].opcode;
	return dot_ops[i].token;
      }
  
  switch (c = *tokstart)
    {
    case 0:
      return 0;
      
    case ' ':
    case '\t':
    case '\n':
      lexptr++;
      goto retry;
      
    case '\'':
      token = match_string_literal ();
      if (token != 0)
	return (token);
      break;
      
    case '(':
      paren_depth++;
      lexptr++;
      return c;
      
    case ')':
      if (paren_depth == 0)
	return 0;
      paren_depth--;
      lexptr++;
      return c;
      
    case ',':
      if (comma_terminates && paren_depth == 0)
	return 0;
      lexptr++;
      return c;
      
    case '.':
      /* Might be a floating point number.  */
      if (lexptr[1] < '0' || lexptr[1] > '9')
	goto symbol;		/* Nope, must be a symbol. */
      /* FALL THRU into number case.  */
      
    case '0':
    case '1':
    case '2':
    case '3':
    case '4':
    case '5':
    case '6':
    case '7':
    case '8':
    case '9':
      {
        /* It's a number.  */
	int got_dot = 0, got_e = 0, got_d = 0, toktype;
	char *p = tokstart;
	int hex = input_radix > 10;
	
	if (c == '0' && (p[1] == 'x' || p[1] == 'X'))
	  {
	    p += 2;
	    hex = 1;
	  }
	else if (c == '0' && (p[1]=='t' || p[1]=='T' || p[1]=='d' || p[1]=='D'))
	  {
	    p += 2;
	    hex = 0;
	  }
	
	for (;; ++p)
	  {
	    if (!hex && !got_e && (*p == 'e' || *p == 'E'))
	      got_dot = got_e = 1;
	    else if (!hex && !got_d && (*p == 'd' || *p == 'D'))
	      got_dot = got_d = 1;
	    else if (!hex && !got_dot && *p == '.')
	      got_dot = 1;
	    else if (((got_e && (p[-1] == 'e' || p[-1] == 'E'))
		     || (got_d && (p[-1] == 'd' || p[-1] == 'D')))
		     && (*p == '-' || *p == '+'))
	      /* This is the sign of the exponent, not the end of the
		 number.  */
	      continue;
	    /* We will take any letters or digits.  parse_number will
	       complain if past the radix, or if L or U are not final.  */
	    else if ((*p < '0' || *p > '9')
		     && ((*p < 'a' || *p > 'z')
			 && (*p < 'A' || *p > 'Z')))
	      break;
	  }
	toktype = parse_number (tokstart, p - tokstart, got_dot|got_e|got_d,
				&yylval);
        if (toktype == ERROR)
          {
	    char *err_copy = (char *) alloca (p - tokstart + 1);
	    
	    memcpy (err_copy, tokstart, p - tokstart);
	    err_copy[p - tokstart] = 0;
	    error ("Invalid number \"%s\".", err_copy);
	  }
	lexptr = p;
	return toktype;
      }
      
    case '+':
    case '-':
    case '*':
    case '/':
    case '%':
    case '|':
    case '&':
    case '^':
    case '~':
    case '!':
    case '@@':
    case '<':
    case '>':
    case '[':
    case ']':
    case '?':
    case ':':
    case '=':
    case '{':
    case '}':
    symbol:
      lexptr++;
      return c;
    }
  
  if (!(c == '_' || c == '$'
	|| (c >= 'a' && c <= 'z') || (c >= 'A' && c <= 'Z')))
    /* We must have come across a bad character (e.g. ';').  */
    error ("Invalid character '%c' in expression.", c);
  
  namelen = 0;
  for (c = tokstart[namelen];
       (c == '_' || c == '$' || (c >= '0' && c <= '9') 
	|| (c >= 'a' && c <= 'z') || (c >= 'A' && c <= 'Z')); 
       c = tokstart[++namelen]);
  
  /* The token "if" terminates the expression and is NOT 
     removed from the input stream.  */
  
  if (namelen == 2 && tokstart[0] == 'i' && tokstart[1] == 'f')
    return 0;
  
  lexptr += namelen;
  
  /* Catch specific keywords.  */
  
  for (i = 0; f77_keywords[i].operator != NULL; i++)
    if (strncmp (tokstart, f77_keywords[i].operator,
		 strlen(f77_keywords[i].operator)) == 0)
      {
	/* 	lexptr += strlen(f77_keywords[i].operator); */ 
	yylval.opcode = f77_keywords[i].opcode;
	return f77_keywords[i].token;
      }
  
  yylval.sval.ptr = tokstart;
  yylval.sval.length = namelen;
  
  if (*tokstart == '$')
    {
      write_dollar_variable (yylval.sval);
      return VARIABLE;
    }
  
  /* Use token-type TYPENAME for symbols that happen to be defined
     currently as names of types; NAME for other symbols.
     The caller is not constrained to care about the distinction.  */
  {
    char *tmp = copy_name (yylval.sval);
    struct symbol *sym;
    int is_a_field_of_this = 0;
    int hextype;
    
    sym = lookup_symbol (tmp, expression_context_block,
			 VAR_DOMAIN,
			 current_language->la_language == language_cplus
			 ? &is_a_field_of_this : NULL,
			 NULL);
    if (sym && SYMBOL_CLASS (sym) == LOC_TYPEDEF)
      {
	yylval.tsym.type = SYMBOL_TYPE (sym);
	return TYPENAME;
      }
    if ((yylval.tsym.type = lookup_primitive_typename (tmp)) != 0)
      return TYPENAME;
    
    /* Input names that aren't symbols but ARE valid hex numbers,
       when the input radix permits them, can be names or numbers
       depending on the parse.  Note we support radixes > 16 here.  */
    if (!sym
	&& ((tokstart[0] >= 'a' && tokstart[0] < 'a' + input_radix - 10)
	    || (tokstart[0] >= 'A' && tokstart[0] < 'A' + input_radix - 10)))
      {
 	YYSTYPE newlval;	/* Its value is ignored.  */
	hextype = parse_number (tokstart, namelen, 0, &newlval);
	if (hextype == INT)
	  {
	    yylval.ssym.sym = sym;
	    yylval.ssym.is_a_field_of_this = is_a_field_of_this;
	    return NAME_OR_INT;
	  }
      }
    
    /* Any other kind of symbol */
    yylval.ssym.sym = sym;
    yylval.ssym.is_a_field_of_this = is_a_field_of_this;
    return NAME;
  }
}

void
yyerror (msg)
     char *msg;
{
  if (prev_lexptr)
    lexptr = prev_lexptr;

  error ("A %s in expression, near `%s'.", (msg ? msg : "error"), lexptr);
}
@


1.1.1.1
log
@GDB 6.1 (excluding .info files)
@
text
@@


1.1.1.2
log
@GDB 6.3 (excluding .info files)
@
text
@d1 2
a2 1
/* A Bison parser, made by GNU Bison 1.875c.  */
d4 1
a4 2
/* Skeleton parser for Yacc-like parsing with Bison,
   Copyright (C) 1984, 1989, 1990, 2000, 2001, 2002, 2003 Free Software Foundation, Inc.
d6 36
a41 19
   This program is free software; you can redistribute it and/or modify
   it under the terms of the GNU General Public License as published by
   the Free Software Foundation; either version 2, or (at your option)
   any later version.

   This program is distributed in the hope that it will be useful,
   but WITHOUT ANY WARRANTY; without even the implied warranty of
   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
   GNU General Public License for more details.

   You should have received a copy of the GNU General Public License
   along with this program; if not, write to the Free Software
   Foundation, Inc., 59 Temple Place - Suite 330,
   Boston, MA 02111-1307, USA.  */

/* As a special exception, when this file is copied by Bison into a
   Bison output file, you may use that output file without restriction.
   This special exception was added by the Free Software Foundation
   in version 1.24 of Bison.  */
a42 109
/* Written by Richard Stallman by simplifying the original so called
   ``semantic'' parser.  */

/* All symbols defined below should begin with yy or YY, to avoid
   infringing on user name space.  This should be done even for local
   variables, as they might otherwise be expanded by user macros.
   There are some unavoidable exceptions within include files to
   define necessary library symbols; they are noted "INFRINGES ON
   USER NAME SPACE" below.  */

/* Identify Bison output.  */
#define YYBISON 1

/* Skeleton name.  */
#define YYSKELETON_NAME "yacc.c"

/* Pure parsers.  */
#define YYPURE 0

/* Using locations.  */
#define YYLSP_NEEDED 0



/* Tokens.  */
#ifndef YYTOKENTYPE
# define YYTOKENTYPE
   /* Put the tokens into the symbol table, so that GDB and other debuggers
      know about them.  */
   enum yytokentype {
     INT = 258,
     FLOAT = 259,
     STRING_LITERAL = 260,
     BOOLEAN_LITERAL = 261,
     NAME = 262,
     TYPENAME = 263,
     NAME_OR_INT = 264,
     SIZEOF = 265,
     ERROR = 266,
     INT_KEYWORD = 267,
     INT_S2_KEYWORD = 268,
     LOGICAL_S1_KEYWORD = 269,
     LOGICAL_S2_KEYWORD = 270,
     LOGICAL_KEYWORD = 271,
     REAL_KEYWORD = 272,
     REAL_S8_KEYWORD = 273,
     REAL_S16_KEYWORD = 274,
     COMPLEX_S8_KEYWORD = 275,
     COMPLEX_S16_KEYWORD = 276,
     COMPLEX_S32_KEYWORD = 277,
     BOOL_AND = 278,
     BOOL_OR = 279,
     BOOL_NOT = 280,
     CHARACTER = 281,
     VARIABLE = 282,
     ASSIGN_MODIFY = 283,
     ABOVE_COMMA = 284,
     NOTEQUAL = 285,
     EQUAL = 286,
     GEQ = 287,
     LEQ = 288,
     GREATERTHAN = 289,
     LESSTHAN = 290,
     RSH = 291,
     LSH = 292,
     UNARY = 293
   };
#endif
#define INT 258
#define FLOAT 259
#define STRING_LITERAL 260
#define BOOLEAN_LITERAL 261
#define NAME 262
#define TYPENAME 263
#define NAME_OR_INT 264
#define SIZEOF 265
#define ERROR 266
#define INT_KEYWORD 267
#define INT_S2_KEYWORD 268
#define LOGICAL_S1_KEYWORD 269
#define LOGICAL_S2_KEYWORD 270
#define LOGICAL_KEYWORD 271
#define REAL_KEYWORD 272
#define REAL_S8_KEYWORD 273
#define REAL_S16_KEYWORD 274
#define COMPLEX_S8_KEYWORD 275
#define COMPLEX_S16_KEYWORD 276
#define COMPLEX_S32_KEYWORD 277
#define BOOL_AND 278
#define BOOL_OR 279
#define BOOL_NOT 280
#define CHARACTER 281
#define VARIABLE 282
#define ASSIGN_MODIFY 283
#define ABOVE_COMMA 284
#define NOTEQUAL 285
#define EQUAL 286
#define GEQ 287
#define LEQ 288
#define GREATERTHAN 289
#define LESSTHAN 290
#define RSH 291
#define LSH 292
#define UNARY 293




/* Copy the first part of user declarations.  */
d124 4
a127 17

/* Enabling traces.  */
#ifndef YYDEBUG
# define YYDEBUG 0
#endif

/* Enabling verbose error messages.  */
#ifdef YYERROR_VERBOSE
# undef YYERROR_VERBOSE
# define YYERROR_VERBOSE 1
#else
# define YYERROR_VERBOSE 0
#endif

#if ! defined (YYSTYPE) && ! defined (YYSTYPE_IS_DECLARED)
#line 130 "f-exp.y"
typedef union YYSTYPE {
d146 2
a147 4
  } YYSTYPE;
/* Line 191 of yacc.c.  */
# define yystype YYSTYPE /* obsolescent; will be withdrawn */
# define YYSTYPE_IS_DECLARED 1
a149 4



/* Copy the second part of user declarations.  */
d154 3
a158 102
/* Line 214 of yacc.c.  */

#if ! defined (yyoverflow) || YYERROR_VERBOSE

# ifndef YYFREE
#  define YYFREE free
# endif
# ifndef YYMALLOC
#  define YYMALLOC xmalloc
# endif

/* The parser invokes alloca or xmalloc; define the necessary symbols.  */

# ifdef YYSTACK_USE_ALLOCA
#  if YYSTACK_USE_ALLOCA
#   define YYSTACK_ALLOC alloca
#  endif
# else
#  if defined (alloca) || defined (_ALLOCA_H)
#   define YYSTACK_ALLOC alloca
#  else
#   ifdef __GNUC__
#    define YYSTACK_ALLOC __builtin_alloca
#   endif
#  endif
# endif

# ifdef YYSTACK_ALLOC
   /* Pacify GCC's `empty if-body' warning. */
#  define YYSTACK_FREE(Ptr) do { /* empty */; } while (0)
# else
#  if defined (__STDC__) || defined (__cplusplus)
#   include <stdlib.h> /* INFRINGES ON USER NAME SPACE */
#   define YYSIZE_T size_t
#  endif
#  define YYSTACK_ALLOC YYMALLOC
#  define YYSTACK_FREE YYFREE
# endif
#endif /* ! defined (yyoverflow) || YYERROR_VERBOSE */


#if (! defined (yyoverflow) \
     && (! defined (__cplusplus) \
	 || (defined (YYSTYPE_IS_TRIVIAL) && YYSTYPE_IS_TRIVIAL)))

/* A type that is properly aligned for any stack member.  */
union yyalloc
{
  short yyss;
  YYSTYPE yyvs;
  };

/* The size of the maximum gap between one aligned stack and the next.  */
# define YYSTACK_GAP_MAXIMUM (sizeof (union yyalloc) - 1)

/* The size of an array large to enough to hold all stacks, each with
   N elements.  */
# define YYSTACK_BYTES(N) \
     ((N) * (sizeof (short) + sizeof (YYSTYPE))				\
      + YYSTACK_GAP_MAXIMUM)

/* Copy COUNT objects from FROM to TO.  The source and destination do
   not overlap.  */
# ifndef YYCOPY
#  if defined (__GNUC__) && 1 < __GNUC__
#   define YYCOPY(To, From, Count) \
      __builtin_memcpy (To, From, (Count) * sizeof (*(From)))
#  else
#   define YYCOPY(To, From, Count)		\
      do					\
	{					\
	  register YYSIZE_T yyi;		\
	  for (yyi = 0; yyi < (Count); yyi++)	\
	    (To)[yyi] = (From)[yyi];		\
	}					\
      while (0)
#  endif
# endif

/* Relocate STACK from its old location to the new one.  The
   local variables YYSIZE and YYSTACKSIZE give the old and new number of
   elements in the stack, and YYPTR gives the new location of the
   stack.  Advance YYPTR to a properly aligned location for the next
   stack.  */
# define YYSTACK_RELOCATE(Stack)					\
    do									\
      {									\
	YYSIZE_T yynewbytes;						\
	YYCOPY (&yyptr->Stack, Stack, yysize);				\
	Stack = &yyptr->Stack;						\
	yynewbytes = yystacksize * sizeof (*Stack) + YYSTACK_GAP_MAXIMUM; \
	yyptr += yynewbytes / sizeof (*yyptr);				\
      }									\
    while (0)

#endif

#if defined (__STDC__) || defined (__cplusplus)
   typedef signed char yysigned_char;
#else
   typedef short yysigned_char;
#endif
d160 3
a162 17
/* YYFINAL -- State number of the termination state. */
#define YYFINAL  46
/* YYLAST -- Last index in YYTABLE.  */
#define YYLAST   460

/* YYNTOKENS -- Number of terminals. */
#define YYNTOKENS  55
/* YYNNTS -- Number of nonterminals. */
#define YYNNTS  17
/* YYNRULES -- Number of rules. */
#define YYNRULES  80
/* YYNRULES -- Number of states. */
#define YYNSTATES  125

/* YYTRANSLATE(YYLEX) -- Bison symbol number corresponding to YYLEX.  */
#define YYUNDEFTOK  2
#define YYMAXUTOK   293
d164 2
a165 2
#define YYTRANSLATE(YYX) 						\
  ((unsigned int) (YYX) <= YYMAXUTOK ? yytranslate[YYX] : YYUNDEFTOK)
d167 2
a168 2
/* YYTRANSLATE[YYLEX] -- Bison symbol number corresponding to YYLEX.  */
static const unsigned char yytranslate[] =
d195 5
a199 5
       2,     2,     2,     2,     2,     2,     1,     2,     3,     4,
       5,     6,     7,     8,     9,    10,    11,    12,    13,    14,
      15,    16,    17,    18,    19,    20,    21,    22,    23,    24,
      25,    26,    27,    28,    30,    36,    37,    38,    39,    40,
      41,    42,    43,    50
d203 11
a213 13
/* YYPRHS[YYN] -- Index of the first RHS symbol of rule number YYN in
   YYRHS.  */
static const unsigned char yyprhs[] =
{
       0,     0,     3,     5,     7,     9,    13,    16,    19,    22,
      25,    28,    31,    32,    38,    39,    41,    43,    47,    51,
      55,    59,    64,    68,    72,    76,    80,    84,    88,    92,
      96,   100,   104,   108,   112,   116,   120,   124,   128,   132,
     136,   140,   144,   148,   150,   152,   154,   156,   158,   163,
     165,   167,   169,   171,   173,   176,   178,   181,   183,   186,
     188,   192,   195,   197,   200,   204,   206,   208,   210,   212,
     214,   216,   218,   220,   222,   224,   226,   228,   230,   232,
     236
d215 1
a215 3

/* YYRHS -- A `-1'-separated list of the rules' RHS. */
static const yysigned_char yyrhs[] =
d217 25
a241 24
      56,     0,    -1,    58,    -1,    57,    -1,    64,    -1,    51,
      58,    52,    -1,    47,    58,    -1,    35,    58,    -1,    46,
      58,    -1,    25,    58,    -1,    53,    58,    -1,    10,    58,
      -1,    -1,    58,    51,    59,    60,    52,    -1,    -1,    58,
      -1,    61,    -1,    60,    29,    58,    -1,    58,    54,    58,
      -1,    58,    29,    58,    -1,    51,    62,    52,    -1,    51,
      64,    52,    58,    -1,    58,    44,    58,    -1,    58,    47,
      58,    -1,    58,    48,    58,    -1,    58,    49,    58,    -1,
      58,    45,    58,    -1,    58,    46,    58,    -1,    58,    43,
      58,    -1,    58,    42,    58,    -1,    58,    37,    58,    -1,
      58,    36,    58,    -1,    58,    39,    58,    -1,    58,    38,
      58,    -1,    58,    41,    58,    -1,    58,    40,    58,    -1,
      58,    35,    58,    -1,    58,    34,    58,    -1,    58,    33,
      58,    -1,    58,    23,    58,    -1,    58,    24,    58,    -1,
      58,    31,    58,    -1,    58,    28,    58,    -1,     3,    -1,
       9,    -1,     4,    -1,    63,    -1,    27,    -1,    10,    51,
      64,    52,    -1,     6,    -1,     5,    -1,    71,    -1,    65,
      -1,    69,    -1,    69,    66,    -1,    47,    -1,    47,    66,
      -1,    35,    -1,    35,    66,    -1,    67,    -1,    51,    66,
      52,    -1,    67,    68,    -1,    68,    -1,    51,    52,    -1,
      51,    70,    52,    -1,     8,    -1,    12,    -1,    13,    -1,
      26,    -1,    16,    -1,    15,    -1,    14,    -1,    17,    -1,
      18,    -1,    19,    -1,    20,    -1,    21,    -1,    22,    -1,
      64,    -1,    70,    29,    64,    -1,     7,    -1
d244 5
a248 2
/* YYRLINE[YYN] -- source line where rule number YYN was defined.  */
static const unsigned short yyrline[] =
d250 9
a258 9
       0,   228,   228,   229,   232,   238,   243,   247,   251,   255,
     259,   263,   273,   272,   280,   283,   287,   291,   295,   300,
     304,   308,   316,   320,   324,   328,   332,   336,   340,   344,
     348,   352,   356,   360,   364,   368,   372,   376,   380,   384,
     389,   393,   397,   403,   410,   419,   426,   429,   432,   440,
     447,   455,   499,   502,   503,   546,   548,   550,   552,   554,
     557,   559,   561,   565,   567,   572,   574,   576,   578,   580,
     582,   584,   586,   588,   590,   592,   594,   596,   604,   609,
     624
d262 4
a265 3
#if YYDEBUG || YYERROR_VERBOSE
/* YYTNME[SYMBOL-NUM] -- String name of the symbol SYMBOL-NUM.
   First, the terminals, then, starting at YYNTOKENS, nonterminals. */
d268 13
a280 13
  "$end", "error", "$undefined", "INT", "FLOAT", "STRING_LITERAL",
  "BOOLEAN_LITERAL", "NAME", "TYPENAME", "NAME_OR_INT", "SIZEOF", "ERROR",
  "INT_KEYWORD", "INT_S2_KEYWORD", "LOGICAL_S1_KEYWORD",
  "LOGICAL_S2_KEYWORD", "LOGICAL_KEYWORD", "REAL_KEYWORD",
  "REAL_S8_KEYWORD", "REAL_S16_KEYWORD", "COMPLEX_S8_KEYWORD",
  "COMPLEX_S16_KEYWORD", "COMPLEX_S32_KEYWORD", "BOOL_AND", "BOOL_OR",
  "BOOL_NOT", "CHARACTER", "VARIABLE", "ASSIGN_MODIFY", "','",
  "ABOVE_COMMA", "'='", "'?'", "'|'", "'^'", "'&'", "NOTEQUAL", "EQUAL",
  "GEQ", "LEQ", "GREATERTHAN", "LESSTHAN", "RSH", "LSH", "'@@'", "'+'",
  "'-'", "'*'", "'/'", "'%'", "UNARY", "'('", "')'", "'~'", "':'",
  "$accept", "start", "type_exp", "exp", "@@1", "arglist", "substring",
  "complexnum", "variable", "type", "ptype", "abs_decl", "direct_abs_decl",
  "func_mod", "typebase", "nonempty_typelist", "name_not_typename", 0
d284 2
a285 16
# ifdef YYPRINT
/* YYTOKNUM[YYLEX-NUM] -- Internal token number corresponding to
   token YYLEX-NUM.  */
static const unsigned short yytoknum[] =
{
       0,   256,   257,   258,   259,   260,   261,   262,   263,   264,
     265,   266,   267,   268,   269,   270,   271,   272,   273,   274,
     275,   276,   277,   278,   279,   280,   281,   282,   283,    44,
     284,    61,    63,   124,    94,    38,   285,   286,   287,   288,
     289,   290,   291,   292,    64,    43,    45,    42,    47,    37,
     293,    40,    41,   126,    58
};
# endif

/* YYR1[YYN] -- Symbol number of symbol that rule YYN derives.  */
static const unsigned char yyr1[] =
d287 9
a295 9
       0,    55,    56,    56,    57,    58,    58,    58,    58,    58,
      58,    58,    59,    58,    60,    60,    60,    60,    61,    62,
      58,    58,    58,    58,    58,    58,    58,    58,    58,    58,
      58,    58,    58,    58,    58,    58,    58,    58,    58,    58,
      58,    58,    58,    58,    58,    58,    58,    58,    58,    58,
      58,    63,    64,    65,    65,    66,    66,    66,    66,    66,
      67,    67,    67,    68,    68,    69,    69,    69,    69,    69,
      69,    69,    69,    69,    69,    69,    69,    69,    70,    70,
      71
d298 2
a299 2
/* YYR2[YYN] -- Number of symbols composing right hand side of rule YYN.  */
static const unsigned char yyr2[] =
d301 3
a303 3
       0,     2,     1,     1,     1,     3,     2,     2,     2,     2,
       2,     2,     0,     5,     0,     1,     1,     3,     3,     3,
       3,     4,     3,     3,     3,     3,     3,     3,     3,     3,
d305 3
a307 3
       3,     3,     3,     1,     1,     1,     1,     1,     4,     1,
       1,     1,     1,     1,     2,     1,     2,     1,     2,     1,
       3,     2,     1,     2,     3,     1,     1,     1,     1,     1,
d309 1
a309 1
       1
d312 10
a321 10
/* YYDEFACT[STATE-NAME] -- Default rule to reduce with in state
   STATE-NUM when YYTABLE doesn't specify something else to do.  Zero
   means the default is an error.  */
static const unsigned char yydefact[] =
{
       0,    43,    45,    50,    49,    80,    65,    44,     0,    66,
      67,    71,    70,    69,    72,    73,    74,    75,    76,    77,
       0,    68,    47,     0,     0,     0,     0,     0,     0,     3,
       2,    46,     4,    52,    53,    51,     0,    11,     9,     7,
       8,     6,     0,     0,     0,    10,     1,     0,     0,     0,
d323 7
a329 7
       0,     0,     0,     0,     0,     0,     0,     0,    12,    57,
      55,     0,    54,    59,    62,     0,     0,     5,    20,     0,
      39,    40,    42,    41,    38,    37,    36,    31,    30,    33,
      32,    35,    34,    29,    28,    22,    26,    27,    23,    24,
      25,    14,    58,    56,    63,    78,     0,     0,     0,    61,
      48,    19,    21,    15,     0,    16,    60,     0,    64,     0,
       0,    13,    79,    18,    17
d332 1
a332 2
/* YYDEFGOTO[NTERM-NUM]. */
static const yysigned_char yydefgoto[] =
d334 2
a335 2
      -1,    28,    29,    42,   101,   114,   115,    43,    31,   105,
      33,    72,    73,    74,    34,   107,    35
a337 3
/* YYPACT[STATE-NUM] -- Index in YYTABLE of the portion describing
   STATE-NUM.  */
#define YYPACT_NINF -59
d340 13
a352 13
      77,   -59,   -59,   -59,   -59,   -59,   -59,   -59,   128,   -59,
     -59,   -59,   -59,   -59,   -59,   -59,   -59,   -59,   -59,   -59,
     137,   -59,   -59,   137,   137,   137,    77,   137,     2,   -59,
     311,   -59,   -59,   -59,   -34,   -59,    77,   -45,   -45,   -45,
     -45,   -45,   281,   -43,   -36,   -45,   -59,   137,   137,   137,
     137,   137,   137,   137,   137,   137,   137,   137,   137,   137,
     137,   137,   137,   137,   137,   137,   137,   137,   -59,   -34,
     -34,   208,   -59,   -44,   -59,   -33,   137,   -59,   -59,   137,
     357,   338,   311,   311,   392,   409,   163,   223,   223,   -10,
     -10,   -10,   -10,    24,    24,    60,   -37,   -37,   -45,   -45,
     -45,   137,   -59,   -59,   -59,   -59,   -31,   -26,   232,   -59,
     188,   311,   -45,   252,   -24,   -59,   -59,   399,   -59,   137,
     137,   -59,   -59,   311,   311
d355 1
a355 2
/* YYPGOTO[NTERM-NUM].  */
static const yysigned_char yypgoto[] =
d357 2
a358 2
     -59,   -59,   -59,     0,   -59,   -59,   -59,   -59,   -59,     4,
     -59,   -27,   -59,   -58,   -59,   -59,   -59
d361 11
a371 12
/* YYTABLE[YYPACT[STATE-NUM]].  What to do in state STATE-NUM.  If
   positive, shift that token.  If negative, reduce the rule which
   number is the opposite.  If zero, do what YYDEFACT says.
   If YYTABLE_NINF, syntax error.  */
#define YYTABLE_NINF -1
static const unsigned char yytable[] =
{
      30,    69,    46,   117,    32,   120,    68,   108,    37,    78,
      65,    66,    67,    70,    68,   109,    79,    71,     0,   110,
      38,   116,     0,    39,    40,    41,   118,    45,   121,     0,
      44,     0,    60,    61,    62,    63,    64,    65,    66,    67,
      75,    68,   102,   103,   106,     0,     0,    80,    81,    82,
d373 20
a392 14
      93,    94,    95,    96,    97,    98,    99,   100,    62,    63,
      64,    65,    66,    67,     0,    68,   111,     0,     0,   112,
       1,     2,     3,     4,     5,     6,     7,     8,     0,     9,
      10,    11,    12,    13,    14,    15,    16,    17,    18,    19,
       0,   113,    20,    21,    22,    63,    64,    65,    66,    67,
     112,    68,    23,     0,     0,     0,     0,     0,     0,   123,
     124,   122,     0,    24,    25,     0,     0,     0,    26,     0,
      27,     1,     2,     3,     4,     5,     0,     7,     8,     0,
       1,     2,     3,     4,     5,     0,     7,     8,     0,     0,
       0,     0,     0,    20,     0,    22,     0,     0,     0,     0,
       0,     0,    20,    23,    22,     0,     0,     0,     0,     0,
       0,     0,    23,     0,    24,    25,     0,     0,     0,    36,
       0,    27,     0,    24,    25,     0,     0,     0,    26,     0,
      27,     1,     2,     3,     4,     5,     0,     7,     8,    54,
d394 2
a395 8
      65,    66,    67,    20,    68,    22,     6,     0,     0,     0,
       9,    10,    11,    12,    13,    14,    15,    16,    17,    18,
      19,     0,     0,     0,    21,     0,     0,     0,     0,    26,
       6,    27,     0,    69,     9,    10,    11,    12,    13,    14,
      15,    16,    17,    18,    19,    70,     0,     0,    21,    71,
     104,    56,    57,    58,    59,    60,    61,    62,    63,    64,
      65,    66,    67,     0,    68,    47,    48,     0,     0,     0,
      49,     0,     0,    50,   104,    51,    52,    53,    54,    55,
d397 9
a405 9
      66,    67,     0,    68,    47,    48,   119,     0,     0,    49,
      76,     0,    50,     0,    51,    52,    53,    54,    55,    56,
      57,    58,    59,    60,    61,    62,    63,    64,    65,    66,
      67,     0,    68,    77,    47,    48,     0,     0,     0,    49,
       0,     0,    50,     0,    51,    52,    53,    54,    55,    56,
      57,    58,    59,    60,    61,    62,    63,    64,    65,    66,
      67,    47,    68,     0,     0,     0,     0,     0,     0,     0,
       0,    51,    52,    53,    54,    55,    56,    57,    58,    59,
      60,    61,    62,    63,    64,    65,    66,    67,     0,    68,
d407 3
a409 3
      61,    62,    63,    64,    65,    66,    67,     6,    68,     0,
       0,     9,    10,    11,    12,    13,    14,    15,    16,    17,
      18,    19,     0,     0,     0,    21,    52,    53,    54,    55,
d411 2
a412 3
      66,    67,     0,    68,    53,    54,    55,    56,    57,    58,
      59,    60,    61,    62,    63,    64,    65,    66,    67,     0,
      68
d415 1
a415 1
static const yysigned_char yycheck[] =
d417 5
a421 5
       0,    35,     0,    29,     0,    29,    51,    51,     8,    52,
      47,    48,    49,    47,    51,    73,    52,    51,    -1,    52,
      20,    52,    -1,    23,    24,    25,    52,    27,    52,    -1,
      26,    -1,    42,    43,    44,    45,    46,    47,    48,    49,
      36,    51,    69,    70,    71,    -1,    -1,    47,    48,    49,
d423 14
a436 26
      60,    61,    62,    63,    64,    65,    66,    67,    44,    45,
      46,    47,    48,    49,    -1,    51,    76,    -1,    -1,    79,
       3,     4,     5,     6,     7,     8,     9,    10,    -1,    12,
      13,    14,    15,    16,    17,    18,    19,    20,    21,    22,
      -1,   101,    25,    26,    27,    45,    46,    47,    48,    49,
     110,    51,    35,    -1,    -1,    -1,    -1,    -1,    -1,   119,
     120,   117,    -1,    46,    47,    -1,    -1,    -1,    51,    -1,
      53,     3,     4,     5,     6,     7,    -1,     9,    10,    -1,
       3,     4,     5,     6,     7,    -1,     9,    10,    -1,    -1,
      -1,    -1,    -1,    25,    -1,    27,    -1,    -1,    -1,    -1,
      -1,    -1,    25,    35,    27,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    35,    -1,    46,    47,    -1,    -1,    -1,    51,
      -1,    53,    -1,    46,    47,    -1,    -1,    -1,    51,    -1,
      53,     3,     4,     5,     6,     7,    -1,     9,    10,    36,
      37,    38,    39,    40,    41,    42,    43,    44,    45,    46,
      47,    48,    49,    25,    51,    27,     8,    -1,    -1,    -1,
      12,    13,    14,    15,    16,    17,    18,    19,    20,    21,
      22,    -1,    -1,    -1,    26,    -1,    -1,    -1,    -1,    51,
       8,    53,    -1,    35,    12,    13,    14,    15,    16,    17,
      18,    19,    20,    21,    22,    47,    -1,    -1,    26,    51,
      52,    38,    39,    40,    41,    42,    43,    44,    45,    46,
      47,    48,    49,    -1,    51,    23,    24,    -1,    -1,    -1,
      28,    -1,    -1,    31,    52,    33,    34,    35,    36,    37,
      38,    39,    40,    41,    42,    43,    44,    45,    46,    47,
      48,    49,    -1,    51,    23,    24,    54,    -1,    -1,    28,
      29,    -1,    31,    -1,    33,    34,    35,    36,    37,    38,
d438 5
a442 2
      49,    -1,    51,    52,    23,    24,    -1,    -1,    -1,    28,
      -1,    -1,    31,    -1,    33,    34,    35,    36,    37,    38,
d444 5
a448 9
      49,    23,    51,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    33,    34,    35,    36,    37,    38,    39,    40,    41,
      42,    43,    44,    45,    46,    47,    48,    49,    -1,    51,
      33,    34,    35,    36,    37,    38,    39,    40,    41,    42,
      43,    44,    45,    46,    47,    48,    49,     8,    51,    -1,
      -1,    12,    13,    14,    15,    16,    17,    18,    19,    20,
      21,    22,    -1,    -1,    -1,    26,    34,    35,    36,    37,
      38,    39,    40,    41,    42,    43,    44,    45,    46,    47,
      48,    49,    -1,    51,    35,    36,    37,    38,    39,    40,
d450 13
a462 1
      51
d464 4
d469 73
a541 3
/* YYSTOS[STATE-NUM] -- The (internal number of the) accessing
   symbol of state STATE-NUM.  */
static const unsigned char yystos[] =
d543 5
a547 13
       0,     3,     4,     5,     6,     7,     8,     9,    10,    12,
      13,    14,    15,    16,    17,    18,    19,    20,    21,    22,
      25,    26,    27,    35,    46,    47,    51,    53,    56,    57,
      58,    63,    64,    65,    69,    71,    51,    58,    58,    58,
      58,    58,    58,    62,    64,    58,     0,    23,    24,    28,
      31,    33,    34,    35,    36,    37,    38,    39,    40,    41,
      42,    43,    44,    45,    46,    47,    48,    49,    51,    35,
      47,    51,    66,    67,    68,    64,    29,    52,    52,    52,
      58,    58,    58,    58,    58,    58,    58,    58,    58,    58,
      58,    58,    58,    58,    58,    58,    58,    58,    58,    58,
      58,    59,    66,    66,    52,    64,    66,    70,    51,    68,
      52,    58,    58,    58,    60,    61,    52,    29,    52,    54,
      29,    52,    64,    58,    58
d550 52
d620 1
a620 1
#define YYEMPTY		(-2)
a621 1

d623 2
a624 4
#define YYABORT		goto yyabortlab
#define YYERROR		goto yyerrorlab


a627 1

a628 1

a629 1

d636 1
a636 1
      yytoken = YYTRANSLATE (yychar);				\
d642 1
a642 1
      yyerror ("syntax error: cannot back up");\
d650 1
d652 5
a656 1
   are run).  */
d659 3
a661 5
# define YYLLOC_DEFAULT(Current, Rhs, N)		\
   ((Current).first_line   = (Rhs)[1].first_line,	\
    (Current).first_column = (Rhs)[1].first_column,	\
    (Current).last_line    = (Rhs)[N].last_line,	\
    (Current).last_column  = (Rhs)[N].last_column)
d664 1
d667 17
a683 63
#ifdef YYLEX_PARAM
# define YYLEX yylex (YYLEX_PARAM)
#else
# define YYLEX yylex ()
#endif

/* Enable debugging if requested.  */
#if YYDEBUG

# ifndef YYFPRINTF
#  include <stdio.h> /* INFRINGES ON USER NAME SPACE */
#  define YYFPRINTF fprintf
# endif

# define YYDPRINTF(Args)			\
do {						\
  if (yydebug)					\
    YYFPRINTF Args;				\
} while (0)

# define YYDSYMPRINT(Args)			\
do {						\
  if (yydebug)					\
    yysymprint Args;				\
} while (0)

# define YYDSYMPRINTF(Title, Token, Value, Location)		\
do {								\
  if (yydebug)							\
    {								\
      YYFPRINTF (stderr, "%s ", Title);				\
      yysymprint (stderr, 					\
                  Token, Value);	\
      YYFPRINTF (stderr, "\n");					\
    }								\
} while (0)

/*------------------------------------------------------------------.
| yy_stack_print -- Print the state stack from its BOTTOM up to its |
| TOP (included).                                                   |
`------------------------------------------------------------------*/

#if defined (__STDC__) || defined (__cplusplus)
static void
yy_stack_print (short *bottom, short *top)
#else
static void
yy_stack_print (bottom, top)
    short *bottom;
    short *top;
#endif
{
  YYFPRINTF (stderr, "Stack now");
  for (/* Nothing. */; bottom <= top; ++bottom)
    YYFPRINTF (stderr, " %d", *bottom);
  YYFPRINTF (stderr, "\n");
}

# define YY_STACK_PRINT(Bottom, Top)				\
do {								\
  if (yydebug)							\
    yy_stack_print ((Bottom), (Top));				\
} while (0)
d686 2
a687 3
/*------------------------------------------------.
| Report that the YYRULE is going to be reduced.  |
`------------------------------------------------*/
d689 4
a692 18
#if defined (__STDC__) || defined (__cplusplus)
static void
yy_reduce_print (int yyrule)
#else
static void
yy_reduce_print (yyrule)
    int yyrule;
#endif
{
  int yyi;
  unsigned int yylno = yyrline[yyrule];
  YYFPRINTF (stderr, "Reducing stack by rule %d (line %u), ",
             yyrule - 1, yylno);
  /* Print the symbols being reduced, and their result.  */
  for (yyi = yyprhs[yyrule]; 0 <= yyrhs[yyi]; yyi++)
    YYFPRINTF (stderr, "%s ", yytname [yyrhs[yyi]]);
  YYFPRINTF (stderr, "-> %s\n", yytname [yyr1[yyrule]]);
}
d694 4
a697 4
# define YY_REDUCE_PRINT(Rule)		\
do {					\
  if (yydebug)				\
    yy_reduce_print (Rule);		\
a698 1

a703 4
# define YYDSYMPRINT(Args)
# define YYDSYMPRINTF(Title, Token, Value, Location)
# define YY_STACK_PRINT(Bottom, Top)
# define YY_REDUCE_PRINT(Rule)
a705 1

d718 1
a718 1
#if defined (YYMAXDEPTH) && YYMAXDEPTH == 0
a724 1

d726 1
a726 2

#if YYERROR_VERBOSE
d776 1
a776 3

#endif /* !YYERROR_VERBOSE */

d778 1
a779 63
#if YYDEBUG
/*--------------------------------.
| Print this symbol on YYOUTPUT.  |
`--------------------------------*/

#if defined (__STDC__) || defined (__cplusplus)
static void
yysymprint (FILE *yyoutput, int yytype, YYSTYPE *yyvaluep)
#else
static void
yysymprint (yyoutput, yytype, yyvaluep)
    FILE *yyoutput;
    int yytype;
    YYSTYPE *yyvaluep;
#endif
{
  /* Pacify ``unused variable'' warnings.  */
  (void) yyvaluep;

  if (yytype < YYNTOKENS)
    {
      YYFPRINTF (yyoutput, "token %s (", yytname[yytype]);
# ifdef YYPRINT
      YYPRINT (yyoutput, yytoknum[yytype], *yyvaluep);
# endif
    }
  else
    YYFPRINTF (yyoutput, "nterm %s (", yytname[yytype]);

  switch (yytype)
    {
      default:
        break;
    }
  YYFPRINTF (yyoutput, ")");
}

#endif /* ! YYDEBUG */
/*-----------------------------------------------.
| Release the memory associated to this symbol.  |
`-----------------------------------------------*/

#if defined (__STDC__) || defined (__cplusplus)
static void
yydestruct (int yytype, YYSTYPE *yyvaluep)
#else
static void
yydestruct (yytype, yyvaluep)
    int yytype;
    YYSTYPE *yyvaluep;
#endif
{
  /* Pacify ``unused variable'' warnings.  */
  (void) yyvaluep;

  switch (yytype)
    {

      default:
        break;
    }
}

d781 5
a785 1
/* Prevent warnings from -Wmissing-prototypes.  */
d789 2
a790 1
int yyparse (void *YYPARSE_PARAM);
d792 2
a793 1
int yyparse ();
d795 10
a804 2
#else /* ! YYPARSE_PARAM */
#if defined (__STDC__) || defined (__cplusplus)
d806 1
a806 2
#else
int yyparse ();
a807 1
#endif /* ! YYPARSE_PARAM */
d809 2
d812 9
d822 10
a831 8
/* The lookahead symbol.  */
int yychar;

/* The semantic value of the lookahead symbol.  */
YYSTYPE yylval;

/* Number of syntax errors so far.  */
int yynerrs;
d834 1
d836 3
a838 3
/*----------.
| yyparse.  |
`----------*/
a839 9
#ifdef YYPARSE_PARAM
# if defined (__STDC__) || defined (__cplusplus)
int yyparse (void *YYPARSE_PARAM)
# else
int yyparse (YYPARSE_PARAM)
  void *YYPARSE_PARAM;
# endif
#else /* ! YYPARSE_PARAM */
#if defined (__STDC__) || defined (__cplusplus)
d841 7
a847 4
yyparse (void)
#else
int
yyparse ()
a848 4
#endif
#endif
{
  
d855 1
a855 1
  int yytoken = 0;
d865 1
a865 1
  /* The state stack.  */
d875 6
d882 5
d888 1
a888 1
#define YYPOPSTACK   (yyvsp--, yyssp--)
a889 1
  YYSIZE_T yystacksize = YYINITDEPTH;
d894 3
a896 1

d899 1
a899 1
     rule.  */
d916 3
a918 1

d933 1
a933 1
  if (yyss + yystacksize - 1 <= yyssp)
a945 1

d947 12
a958 3
	   data in use in that stack, in bytes.  This used to be a
	   conditional around just the two extra args, but that might
	   be undefined if yyoverflow is a macro.  */
a961 1

d963 1
a963 1

d972 1
a972 1
      if (YYMAXDEPTH <= yystacksize)
d975 1
a975 1
      if (YYMAXDEPTH < yystacksize)
d986 4
a989 2

#  undef YYSTACK_RELOCATE
d998 3
a1000 1

d1005 1
a1005 1
      if (yyss + yystacksize - 1 <= yyssp)
d1013 1
d1026 1
a1026 1
  if (yyn == YYPACT_NINF)
d1031 3
a1033 1
  /* YYCHAR is either YYEMPTY or YYEOF or a valid lookahead symbol.  */
d1040 3
a1042 1
  if (yychar <= YYEOF)
d1044 3
a1046 1
      yychar = yytoken = YYEOF;
d1051 17
a1067 2
      yytoken = YYTRANSLATE (yychar);
      YYDSYMPRINTF ("Next token is", yytoken, &yylval, &yylloc);
d1070 2
a1071 4
  /* If the proper action on seeing token YYTOKEN is to reduce or to
     detect an error, take that action.  */
  yyn += yytoken;
  if (yyn < 0 || YYLAST < yyn || yycheck[yyn] != yytoken)
d1073 1
d1075 9
a1083 1
  if (yyn <= 0)
d1085 1
a1085 1
      if (yyn == 0 || yyn == YYTABLE_NINF)
d1090 2
d1097 2
a1098 1
  YYDPRINTF ((stderr, "Shifting token %s, ", yytname[yytoken]));
d1105 3
a1107 1

d1138 2
a1139 2
     Otherwise, the following line sets YYVAL to garbage.
     This behavior is undocumented and Bison
d1145 25
d1171 1
a1171 4
  YY_REDUCE_PRINT (yyn);
  switch (yyn)
    {
        case 4:
d1173 1
a1173 1
    { write_exp_elt_opcode(OP_TYPE);
d1177 1
a1177 2

  case 5:
d1179 1
a1179 1
    { }
d1181 1
a1181 2

  case 6:
d1183 1
a1183 1
    { write_exp_elt_opcode (UNOP_IND); }
d1185 1
a1185 2

  case 7:
d1187 1
a1187 1
    { write_exp_elt_opcode (UNOP_ADDR); }
d1189 1
a1189 2

  case 8:
d1191 1
a1191 1
    { write_exp_elt_opcode (UNOP_NEG); }
d1193 1
a1193 2

  case 9:
d1195 1
a1195 1
    { write_exp_elt_opcode (UNOP_LOGICAL_NOT); }
d1197 1
a1197 2

  case 10:
d1199 1
a1199 1
    { write_exp_elt_opcode (UNOP_COMPLEMENT); }
d1201 1
a1201 2

  case 11:
d1203 1
a1203 1
    { write_exp_elt_opcode (UNOP_SIZEOF); }
d1205 1
a1205 2

  case 12:
d1207 1
a1207 1
    { start_arglist (); }
d1209 1
a1209 2

  case 13:
d1211 1
a1211 1
    { write_exp_elt_opcode (OP_F77_UNDETERMINED_ARGLIST);
d1215 1
a1215 2

  case 15:
d1217 1
a1217 1
    { arglist_len = 1; }
d1219 1
a1219 2

  case 16:
d1221 1
a1221 1
    { arglist_len = 2;}
d1223 1
a1223 2

  case 17:
d1225 1
a1225 1
    { arglist_len++; }
d1227 1
a1227 2

  case 18:
d1229 1
a1229 1
    { }
d1231 1
a1231 2

  case 19:
d1233 1
a1233 1
    { }
d1235 1
a1235 2

  case 20:
d1237 1
a1237 1
    { write_exp_elt_opcode(OP_COMPLEX); }
d1239 1
a1239 2

  case 21:
d1241 1
a1241 1
    { write_exp_elt_opcode (UNOP_CAST);
d1245 1
a1245 2

  case 22:
d1247 1
a1247 1
    { write_exp_elt_opcode (BINOP_REPEAT); }
d1249 1
a1249 2

  case 23:
d1251 1
a1251 1
    { write_exp_elt_opcode (BINOP_MUL); }
d1253 1
a1253 2

  case 24:
d1255 1
a1255 1
    { write_exp_elt_opcode (BINOP_DIV); }
d1257 1
a1257 2

  case 25:
d1259 1
a1259 1
    { write_exp_elt_opcode (BINOP_REM); }
d1261 1
a1261 2

  case 26:
d1263 1
a1263 1
    { write_exp_elt_opcode (BINOP_ADD); }
d1265 1
a1265 2

  case 27:
d1267 1
a1267 1
    { write_exp_elt_opcode (BINOP_SUB); }
d1269 1
a1269 2

  case 28:
d1271 1
a1271 1
    { write_exp_elt_opcode (BINOP_LSH); }
d1273 1
a1273 2

  case 29:
d1275 1
a1275 1
    { write_exp_elt_opcode (BINOP_RSH); }
d1277 1
a1277 2

  case 30:
d1279 1
a1279 1
    { write_exp_elt_opcode (BINOP_EQUAL); }
d1281 1
a1281 2

  case 31:
d1283 1
a1283 1
    { write_exp_elt_opcode (BINOP_NOTEQUAL); }
d1285 1
a1285 2

  case 32:
d1287 1
a1287 1
    { write_exp_elt_opcode (BINOP_LEQ); }
d1289 1
a1289 2

  case 33:
d1291 1
a1291 1
    { write_exp_elt_opcode (BINOP_GEQ); }
d1293 1
a1293 2

  case 34:
d1295 1
a1295 1
    { write_exp_elt_opcode (BINOP_LESS); }
d1297 1
a1297 2

  case 35:
d1299 1
a1299 1
    { write_exp_elt_opcode (BINOP_GTR); }
d1301 1
a1301 2

  case 36:
d1303 1
a1303 1
    { write_exp_elt_opcode (BINOP_BITWISE_AND); }
d1305 1
a1305 2

  case 37:
d1307 1
a1307 1
    { write_exp_elt_opcode (BINOP_BITWISE_XOR); }
d1309 1
a1309 2

  case 38:
d1311 1
a1311 1
    { write_exp_elt_opcode (BINOP_BITWISE_IOR); }
d1313 1
a1313 2

  case 39:
d1315 1
a1315 1
    { write_exp_elt_opcode (BINOP_LOGICAL_AND); }
d1317 1
a1317 2

  case 40:
d1319 1
a1319 1
    { write_exp_elt_opcode (BINOP_LOGICAL_OR); }
d1321 1
a1321 2

  case 41:
d1323 1
a1323 1
    { write_exp_elt_opcode (BINOP_ASSIGN); }
d1325 1
a1325 2

  case 42:
d1327 1
a1327 1
    { write_exp_elt_opcode (BINOP_ASSIGN_MODIFY);
d1331 1
a1331 2

  case 43:
d1333 1
a1333 1
    { write_exp_elt_opcode (OP_LONG);
d1338 1
a1338 2

  case 44:
d1340 1
a1340 1
    { YYSTYPE val;
d1347 1
a1347 2

  case 45:
d1349 1
a1349 1
    { write_exp_elt_opcode (OP_DOUBLE);
d1354 1
a1354 2

  case 48:
d1356 1
a1356 1
    { write_exp_elt_opcode (OP_LONG);
d1362 1
a1362 2

  case 49:
d1364 1
a1364 1
    { write_exp_elt_opcode (OP_BOOL);
d1369 1
a1369 2

  case 50:
d1371 1
a1371 1
    {
d1377 1
a1377 2

  case 51:
d1379 1
a1379 1
    { struct symbol *sym = yyvsp[0].ssym.sym;
d1420 1
a1420 2

  case 54:
d1422 1
a1422 1
    {
d1463 1
a1463 2

  case 55:
d1465 1
a1465 1
    { push_type (tp_pointer); yyval.voidval = 0; }
d1467 1
a1467 2

  case 56:
d1469 1
a1469 1
    { push_type (tp_pointer); yyval.voidval = yyvsp[0].voidval; }
d1471 1
a1471 2

  case 57:
d1473 1
a1473 1
    { push_type (tp_reference); yyval.voidval = 0; }
d1475 1
a1475 2

  case 58:
d1477 1
a1477 1
    { push_type (tp_reference); yyval.voidval = yyvsp[0].voidval; }
d1479 1
a1479 2

  case 60:
d1481 1
a1481 1
    { yyval.voidval = yyvsp[-1].voidval; }
d1483 1
a1483 2

  case 61:
d1485 1
a1485 1
    { push_type (tp_function); }
d1487 1
a1487 2

  case 62:
d1489 1
a1489 1
    { push_type (tp_function); }
d1491 1
a1491 2

  case 63:
d1493 1
a1493 1
    { yyval.voidval = 0; }
d1495 1
a1495 2

  case 64:
d1497 1
a1497 1
    { free (yyvsp[-1].tvec); yyval.voidval = 0; }
d1499 1
a1499 2

  case 65:
d1501 1
a1501 1
    { yyval.tval = yyvsp[0].tsym.type; }
d1503 1
a1503 2

  case 66:
d1505 1
a1505 1
    { yyval.tval = builtin_type_f_integer; }
d1507 1
a1507 2

  case 67:
d1509 1
a1509 1
    { yyval.tval = builtin_type_f_integer_s2; }
d1511 1
a1511 2

  case 68:
d1513 1
a1513 1
    { yyval.tval = builtin_type_f_character; }
d1515 1
a1515 2

  case 69:
d1517 1
a1517 1
    { yyval.tval = builtin_type_f_logical;}
d1519 1
a1519 2

  case 70:
d1521 1
a1521 1
    { yyval.tval = builtin_type_f_logical_s2;}
d1523 1
a1523 2

  case 71:
d1525 1
a1525 1
    { yyval.tval = builtin_type_f_logical_s1;}
d1527 1
a1527 2

  case 72:
d1529 1
a1529 1
    { yyval.tval = builtin_type_f_real;}
d1531 1
a1531 2

  case 73:
d1533 1
a1533 1
    { yyval.tval = builtin_type_f_real_s8;}
d1535 1
a1535 2

  case 74:
d1537 1
a1537 1
    { yyval.tval = builtin_type_f_real_s16;}
d1539 1
a1539 2

  case 75:
d1541 1
a1541 1
    { yyval.tval = builtin_type_f_complex_s8;}
d1543 1
a1543 2

  case 76:
d1545 1
a1545 1
    { yyval.tval = builtin_type_f_complex_s16;}
d1547 1
a1547 2

  case 77:
d1549 1
a1549 1
    { yyval.tval = builtin_type_f_complex_s32;}
d1551 1
a1551 2

  case 78:
d1553 1
a1553 1
    { yyval.tvec = (struct type **) xmalloc (sizeof (struct type *) * 2);
d1558 1
a1558 2

  case 79:
d1560 1
a1560 1
    { int len = sizeof (struct type *) * (++(yyvsp[-2].ivec[0]) + 1);
d1565 13
d1579 1
a1580 3
    }

/* Line 1000 of yacc.c.  */
d1584 3
d1588 10
a1597 2

  YY_STACK_PRINT (yyss, yyssp);
d1600 3
a1602 1

d1610 2
a1611 2
  yystate = yypgoto[yyn - YYNTOKENS] + *yyssp;
  if (0 <= yystate && yystate <= YYLAST && yycheck[yystate] == *yyssp)
d1614 1
a1614 1
    yystate = yydefgoto[yyn - YYNTOKENS];
d1627 2
a1628 1
#if YYERROR_VERBOSE
d1631 1
a1631 1
      if (YYPACT_NINF < yyn && yyn < YYLAST)
a1633 2
	  int yytype = YYTRANSLATE (yychar);
	  const char* yyprefix;
d1635 1
a1635 1
	  int yyx;
d1637 1
d1640 6
a1645 21
	  int yyxbegin = yyn < 0 ? -yyn : 0;

	  /* Stay within bounds of both yycheck and yytname.  */
	  int yychecklim = YYLAST - yyn;
	  int yyxend = yychecklim < YYNTOKENS ? yychecklim : YYNTOKENS;
	  int yycount = 0;

	  yyprefix = ", expecting ";
	  for (yyx = yyxbegin; yyx < yyxend; ++yyx)
	    if (yycheck[yyx + yyn] == yyx && yyx != YYTERROR)
	      {
		yysize += yystrlen (yyprefix) + yystrlen (yytname [yyx]);
		yycount += 1;
		if (yycount == 5)
		  {
		    yysize = 0;
		    break;
		  }
	      }
	  yysize += (sizeof ("syntax error, unexpected ")
		     + yystrlen (yytname[yytype]));
d1649 2
a1650 2
	      char *yyp = yystpcpy (yymsg, "syntax error, unexpected ");
	      yyp = yystpcpy (yyp, yytname[yytype]);
d1654 5
a1658 3
		  yyprefix = ", expecting ";
		  for (yyx = yyxbegin; yyx < yyxend; ++yyx)
		    if (yycheck[yyx + yyn] == yyx && yyx != YYTERROR)
d1660 2
a1661 1
			yyp = yystpcpy (yyp, yyprefix);
d1663 1
a1663 1
			yyprefix = " or ";
d1670 1
a1670 1
	    yyerror ("syntax error; also virtual memory exhausted");
d1673 2
a1674 2
#endif /* YYERROR_VERBOSE */
	yyerror ("syntax error");
d1676 1
d1679 4
a1682 1

d1688 6
a1693 21
      if (yychar <= YYEOF)
        {
          /* If at end of input, pop the error token,
	     then the rest of the stack, then return failure.  */
	  if (yychar == YYEOF)
	     for (;;)
	       {
		 YYPOPSTACK;
		 if (yyssp == yyss)
		   YYABORT;
		 YYDSYMPRINTF ("Error: popping", yystos[*yyssp], yyvsp, yylsp);
		 yydestruct (yystos[*yyssp], yyvsp);
	       }
        }
      else
	{
	  YYDSYMPRINTF ("Error: discarding", yytoken, &yylval, &yylloc);
	  yydestruct (yytoken, &yylval);
	  yychar = YYEMPTY;

	}
d1698 4
a1701 1
  goto yyerrlab1;
d1704 8
a1711 4
/*---------------------------------------------------.
| yyerrorlab -- error raised explicitly by YYERROR.  |
`---------------------------------------------------*/
yyerrorlab:
d1713 4
a1716 5
#ifdef __GNUC__
  /* Pacify GCC when the user code never invokes YYERROR and the label
     yyerrorlab therefore never appears in user code.  */
  if (0)
     goto yyerrorlab;
a1718 4
  yyvsp -= yylen;
  yyssp -= yylen;
  yystate = *yyssp;
  goto yyerrlab1;
d1720 12
d1733 10
a1742 5
/*-------------------------------------------------------------.
| yyerrlab1 -- common code for both syntax error and YYERROR.  |
`-------------------------------------------------------------*/
yyerrlab1:
  yyerrstatus = 3;	/* Each real token shifted decrements this.  */
d1744 7
a1750 13
  for (;;)
    {
      yyn = yypact[yystate];
      if (yyn != YYPACT_NINF)
	{
	  yyn += YYTERROR;
	  if (0 <= yyn && yyn <= YYLAST && yycheck[yyn] == YYTERROR)
	    {
	      yyn = yytable[yyn];
	      if (0 < yyn)
		break;
	    }
	}
d1752 3
a1754 3
      /* Pop the current state because it cannot handle the error token.  */
      if (yyssp == yyss)
	YYABORT;
d1756 7
a1762 5
      YYDSYMPRINTF ("Error: popping", yystos[*yyssp], yyvsp, yylsp);
      yydestruct (yystos[yystate], yyvsp);
      YYPOPSTACK;
      yystate = *yyssp;
      YY_STACK_PRINT (yyss, yyssp);
d1764 2
d1773 3
a1775 1

d1795 3
a1797 4
#ifndef yyoverflow
/*----------------------------------------------.
| yyoverflowlab -- parser overflow comes here.  |
`----------------------------------------------*/
a1801 1
#endif
a1809 2


d2330 1
a2330 4
    yylval.tsym.type
      = language_lookup_primitive_type_by_name (current_language,
						current_gdbarch, tmp);
    if (yylval.tsym.type != NULL)
a2365 2


@

