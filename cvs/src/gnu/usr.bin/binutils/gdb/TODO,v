head	1.3;
access;
symbols
	OPENBSD_6_1_BASE:1.3
	OPENBSD_6_0:1.3.0.50
	OPENBSD_6_0_BASE:1.3
	OPENBSD_5_9:1.3.0.46
	OPENBSD_5_9_BASE:1.3
	OPENBSD_5_8:1.3.0.48
	OPENBSD_5_8_BASE:1.3
	OPENBSD_5_7:1.3.0.40
	OPENBSD_5_7_BASE:1.3
	OPENBSD_5_6:1.3.0.44
	OPENBSD_5_6_BASE:1.3
	OPENBSD_5_5:1.3.0.42
	OPENBSD_5_5_BASE:1.3
	OPENBSD_5_4:1.3.0.38
	OPENBSD_5_4_BASE:1.3
	OPENBSD_5_3:1.3.0.36
	OPENBSD_5_3_BASE:1.3
	OPENBSD_5_2:1.3.0.34
	OPENBSD_5_2_BASE:1.3
	OPENBSD_5_1_BASE:1.3
	OPENBSD_5_1:1.3.0.32
	OPENBSD_5_0:1.3.0.30
	OPENBSD_5_0_BASE:1.3
	OPENBSD_4_9:1.3.0.28
	OPENBSD_4_9_BASE:1.3
	OPENBSD_4_8:1.3.0.26
	OPENBSD_4_8_BASE:1.3
	OPENBSD_4_7:1.3.0.22
	OPENBSD_4_7_BASE:1.3
	OPENBSD_4_6:1.3.0.24
	OPENBSD_4_6_BASE:1.3
	OPENBSD_4_5:1.3.0.20
	OPENBSD_4_5_BASE:1.3
	OPENBSD_4_4:1.3.0.18
	OPENBSD_4_4_BASE:1.3
	OPENBSD_4_3:1.3.0.16
	OPENBSD_4_3_BASE:1.3
	OPENBSD_4_2:1.3.0.14
	OPENBSD_4_2_BASE:1.3
	OPENBSD_4_1:1.3.0.12
	OPENBSD_4_1_BASE:1.3
	OPENBSD_4_0:1.3.0.10
	OPENBSD_4_0_BASE:1.3
	OPENBSD_3_9:1.3.0.8
	OPENBSD_3_9_BASE:1.3
	OPENBSD_3_8:1.3.0.6
	OPENBSD_3_8_BASE:1.3
	OPENBSD_3_7:1.3.0.4
	OPENBSD_3_7_BASE:1.3
	GDB_6_3:1.1.1.1
	OPENBSD_3_6:1.3.0.2
	OPENBSD_3_6_BASE:1.3
	GDB_6_1:1.1.1.1
	FSF:1.1.1
	OPENBSD_3_5:1.2.0.32
	OPENBSD_3_5_BASE:1.2
	OPENBSD_3_4:1.2.0.30
	OPENBSD_3_4_BASE:1.2
	OPENBSD_3_3:1.2.0.28
	OPENBSD_3_3_BASE:1.2
	OPENBSD_3_2:1.2.0.26
	OPENBSD_3_2_BASE:1.2
	OPENBSD_3_1:1.2.0.24
	OPENBSD_3_1_BASE:1.2
	OPENBSD_3_0:1.2.0.22
	OPENBSD_3_0_BASE:1.2
	OPENBSD_2_9:1.2.0.20
	OPENBSD_2_9_BASE:1.2
	OPENBSD_2_8:1.2.0.18
	OPENBSD_2_8_BASE:1.2
	OPENBSD_2_7:1.2.0.16
	OPENBSD_2_7_BASE:1.2
	new-binutils:1.2.0.14
	OPENBSD_2_6:1.2.0.12
	OPENBSD_2_6_BASE:1.2
	OPENBSD_2_5:1.2.0.10
	OPENBSD_2_5_BASE:1.2
	OPENBSD_2_4:1.2.0.8
	OPENBSD_2_4_BASE:1.2
	OPENBSD_2_3:1.2.0.6
	OPENBSD_2_3_BASE:1.2
	OPENBSD_2_2:1.2.0.4
	OPENBSD_2_2_BASE:1.2
	OPENBSD_2_1:1.2.0.2
	OPENBSD_2_1_BASE:1.2
	CYGNUS-961112:1.1.2.1
	CYGNUS:1.1.0.2;
locks; strict;
comment	@# @;


1.3
date	2004.05.21.20.23.03;	author kettenis;	state Exp;
branches;
next	1.2;

1.2
date	96.11.23.03.36.19;	author niklas;	state Exp;
branches;
next	1.1;

1.1
date	96.11.19.14.16.16;	author niklas;	state dead;
branches
	1.1.1.1
	1.1.2.1;
next	;

1.1.1.1
date	2004.05.21.19.08.35;	author kettenis;	state Exp;
branches;
next	;

1.1.2.1
date	96.11.19.14.16.17;	author niklas;	state Exp;
branches;
next	;


desc
@@


1.3
log
@Resolve conflicts for GDB 6.1.  Add local patches.
ok deraadt@@
@
text
@If you find inaccuracies in this list, please send mail to
gdb-patches@@sources.redhat.com.  If you would like to work on any
of these, you should consider sending mail to the same address, to
find out whether anyone else is working on it.


			GDB 5.1 - Fixes
			===============

Below is a list of problems identified during the GDB 5.0 release
cycle.  People hope to have these problems fixed in 5.1.

--

Wow, three bug reports for the same problem in one day!  We should
probably make fixing this a real priority :-).

Anyway, thanks for reporting.

The following patch will fix the problems with setting breakpoints in
dynamically loaded objects:

   http://sources.redhat.com/ml/gdb-patches/2000-05/msg00230.html

This patch isn't checked in yet (ping Michael/JimB), but I hope this
will be in the next GDB release.

There should really be a test in the testsuite for this problem, since
it keeps coming up :-(.  Any volunteers?

Mark

--

		GDB 5.1 - New features
		======================

The following new features should be included in 5.1.

--

		GDB 5.1 - Cleanups
		==================

The following code cleanups will hopefully be applied to GDB 5.1.

--

		GDB 5.1 - Known Problems
		========================

--

z8k

The z8k has suffered bit rot and is known to not build.  The problem
was occuring in the opcodes directory.

--

The BFD directory requires bug-fixed AUTOMAKE et.al.

AUTOMAKE 1.4 incorrectly set the TEXINPUTS environment variable.  It
contained the full path to texinfo.tex when it should have only
contained the directory.  The bug has been fixed in the current
AUTOMAKE sources.  Automake snapshots can be found in:
	ftp://sources.redhat.com/pub/gdb/infrastructure
and	ftp://sources.redhat.com/pub/binutils

--

Solaris 8 x86 CURSES_H problem
http://sources.redhat.com/ml/gdb/2000-07/msg00038.html

The original problem was worked around with:

    2000-06-06  Michael Snyder  <msnyder@@cygnus.com>

        * configure.in: Enable autoconf to find curses.h on Solaris 2.8.
        * configure: Regenerate.

When building both GDB and SID using the same source tree the problem
will still occure. sid/component/configure.in mis-configures
<curses.h> and leaves wrong information in the config cache.

--

		GDB 5.2 - Fixes
		===============

--

		GDB 5.2 - New features
		======================

--

GCC 3.0 ABI support (but hopefully sooner...).

--

Objective C/C++ support (but hopefully sooner...).

--

Import of readline 4.2

--

		GDB 5.2 - Cleanups
		==================

The following cleanups have been identified as part of GDB 5.2.

--

Compiler warnings.

Eliminate warnings for all targets on at least one host for one of the
-W flags.  Flags up for debate include: -Wswitch -Wcomment -trigraphs
-Wtrigraphs -Wunused-function -Wunused-label -Wunused-variable
-Wunused-value -Wchar-subscripts -Wtraditional -Wshadow -Wcast-qual
-Wcast-align -Wwrite-strings -Wconversion -Wstrict-prototypes
-Wmissing-prototypes -Wmissing-declarations -Wredundant-decls
-Woverloaded-virtual -Winline

--

Deprecate, if not delete, the following:

        register[]
        register_valid[]
	REGISTER_BYTE()
                Replaced by, on the target side
                  supply_register()
                and on core-gdb side:
                  {read,write}_register_gen()
		Remote.c will need to use something
		other than REGISTER_BYTE() and
		REGISTER_RAW_SIZE() when unpacking
		[gG] packets.

        STORE_PSEUDO_REGISTER
        FETCH_PSEUDO_REGISTER
                Now handed by the methods
                  gdbarch_{read,write}_register()
                which sits between core GDB and
                the register cache.

        REGISTER_CONVERTIBLE
        REGISTER_CONVERT_TO_RAW
        REGISTER_CONVERT_TO_VIRTUAL
                I think these three are redundant.
                gdbarch_register_{read,write} can
                do any conversion it likes.

        REGISTER_VIRTUAL_SIZE
        MAX_REGISTER_VIRTUAL_SIZE
        REGISTER_VIRTUAL_TYPE
                I think these can be replaced by
		the pair:
                  FRAME_REGISTER_TYPE(frame, regnum)
                  REGISTER_TYPE(regnum)

	DO_REGISTERS_INFO
		Replace with
		 FRAME_REGISTER_INFO (frame, ...)

	REGISTER_SIM_REGNO()
		If nothing else rename this so that
		how it relates to rawreg and the
		regnum is clear.

--

Obsolete the targets:

arm*-wince-pe
mips*-*-pe
sh*-*-pe

--

Obsolete the protocols:

RDB?

``As of version 5.3, WindRiver has removed the RDB server (RDB
protocol support is built into gdb).''  -- Till.

--

Restructure gdb directory tree so that it avoids any 8.3 and 14
filename problems.

--

Convert GDB build process to AUTOMAKE.

See also sub-directory configure below.

The current convention is (kind of) to use $(<header>_h) in all
dependency lists.  It isn't done in a consistent way.

--

		GDB 5.2 - Known Problems
		========================

--

		Code Cleanups: General
		======================

The following are more general cleanups and fixes.  They are not tied
to any specific release.


			New Features and Fixes
			======================

These are harder than cleanups but easier than work involving
fundamental architectural change.

--

			Language Support
			================

New languages come onto the scene all the time.

--

Re: Various C++ things

RTTI for g++ should be using the typeinfo functions rather than the
vtables.  The typeinfo functions are always at offset 4 from the
beginning of the vtable, and are always right. The vtables will have
weird names like E::VB sometimes.  The typeinfo function will always
be "E type_info function", or somesuch.

value_virtual_fn_field needs to be fixed so there are no failures for
virtual functions for C++ using g++.

Testsuite cases are the major priority right now for C++ support,
since i have to make a lot of changes that could potentially break
each other.

--


			Symbol Support
			==============

--

Investiagate ways of reducing memory.

--

Investigate ways of improving load time.

--

			Testsuite Support
			=================

There are never to many testcases.

--

Better thread testsuite.

--

Better C++ testsuite.

--

		Architectural Changes: General
		==============================

These are harder than simple cleanups / fixes and, consequently
involve more work.  Typically an Architectural Change will be broken
down into a more digestible set of cleanups and fixes.

--

		Architectural Change: Multi-arch et al.
		=======================================

The long term objective is to remove all assumptions that there is a
single target with a single address space with a single instruction
set architecture and single application binary interface.

This is an ongoing effort.  The first milestone is to enable
``multi-arch'' where by all architectural decisions are made at
runtime.

It should be noted that ``gdbarch'' is really ``gdbabi'' and
``gdbisa''.  Once things are multi-arched breaking that down correctly
will become much easier.

--

	Architectural Change: MI, LIBGDB and scripting languages
	========================================================

See also architectural changes related to the event loop.  LIBGDB
can't be finished until there is a generic event loop being used by
all targets.

The long term objective is it to be possible to integrate GDB into
scripting languages.

--

		Architectural Change: Async
		===========================

While GDB uses an event loop when prompting the user for input.  That
event loop is not exploited by targets when they allow the target
program to continue.  Typically targets still block in (target_wait())
until the program again halts.

The closest a target comes to supporting full asynchronous mode are
the remote targets ``async'' and ``extended-async''.

--

# Local Variables:
# mode: text
# End:
@


1.2
log
@Merge to Cygnus 961112 + add some support (not ready) for shared libs
@
text
@d2 3
a4 3
bug-gdb@@prep.ai.mit.edu.  If you would like to work on any of these,
you should consider sending mail to the same address, to find out
whether anyone else is working on it.
a5 2
General To Do List
------------------
d7 2
a8 2
This list is probably not up to date, and opinions vary about the
importance or even desirability of some of the items.
d10 2
a11 2
Add an "info bfd" command that displays supported object formats,
similarly to objdump -i.
d13 1
a13 2
START_INFERIOR_TRAPS_EXPECTED need never be defined to 2, since that
is its default value.  Clean this up.
d15 2
a16 4
It should be possible to use symbols from shared libraries before we know
exactly where the libraries will be loaded.  E.g. "b perror" before running
the program.  This could maybe be done as an extension of the "breakpoint
re-evaluation" after new symbols are loaded.
d18 1
a18 1
Make single_step() insert and remove breakpoints in one operation.
d20 2
a21 1
Speed up single stepping by avoiding extraneous ptrace calls.
d23 1
a23 2
Speed up single stepping by not inserting and removing breakpoints
each time the inferior starts and stops.
d25 2
a26 3
Breakpoints should not be inserted and deleted all the time.  Only the
one(s) there should be removed when we have to step over one.  Support
breakpoints that don't have to be removed to step over them.
d28 2
a29 2
Update gdbint.texinfo to include doc on the directory structure and 
the various tricks of building gdb.
d31 1
a31 3
Do a tutorial in gdb.texinfo on how to do simple things in gdb.
E.g. how to set a breakpoint that just prints something and continues.
How to break on aborts.  Etc.
d33 1
a33 4
Provide "voodoo" debugging of core files.  This creates a zombie
process as a child of the debugger, and loads it up with the data,
stack, and regs of the core file.  This allows you to call functions
in the executable, to manipulate the data in the core file.
d35 2
a36 1
GDB reopens the source file on every line, as you "next" through it.
d38 1
a38 2
Referencing the vtbl member of a struct doesn't work.  It prints OK
if you print the struct, but it gets 0 if you try to deref it.
d40 1
a40 6
Persistent command history: A feature where you could save off a list
of the commands you did, so you can edit it into something that will bring
the target to the same place every time you source it.
This would also be useful for automated fast watchpointing; if you go
past the place where it watchpoints, you just start it over again and
do it more carefully.
d42 2
a43 2
Deal with the SunOS 4.0 and 4.1.1 ptrace bug that loses the registers if
the stack is paged out.
d45 1
a45 2
Finish the C++ exception handling stub routines.  Lint points them out
as unused statics functions.
d47 1
a47 1
Perhaps "i source" should take an argument like that of "list".
d49 2
a50 2
See if core-aout.c's fetch_core_registers can be used on more machines.
E.g. MIPS (mips-xdep.c).
d52 1
a52 2
unpack_double() does not handle IEEE float on the target unless the host
is also IEEE.  Death on a vax.
d54 1
a54 5
Set up interface between GDB and INFO so that you can hop into interactive
INFO and back out again.  When running under Emacs, should use Emacs
info, else fork the info program.  Installation of GDB should install
its texinfo files into the info tree automagically, including the readline
texinfo files.
d56 2
a57 1
"help address" ought to find the "help set print address" entry.
d59 1
a59 2
Remove the VTBL internal guts from printouts of C++ structs, unless
vtblprint is set.
d61 1
a61 2
Remove "at 0xnnnn" from the "b foo" response, if `print address off' and if
it matches the source line indicated.
d63 6
a68 1
The prompt at end of screen should accept space as well as CR.
d70 1
a70 2
Check STORE_RETURN_VALUE on all architectures.  Check near it in tm-sparc.h
for other bogosities.
d72 2
a73 1
Check for storage leaks in GDB, I'm sure there are a lot!
d75 1
a75 1
vtblprint of a vtbl should demangle the names it's printing.
d77 1
a77 3
Backtrace should point out what the currently selected frame is, in
its display, perhaps showing "@@3 foo (bar, ...)" or ">3 foo (bar,
...)" rather than "#3 foo (bar, ...)".
d79 2
a80 2
"i program" should work for core files, and display more info, like what
actually caused it to die.
d82 3
a84 1
"x/10i" should shorten the long name, if any, on subsequent lines.
d86 1
a86 2
Check through the code for FIXME comments and fix them.  dbxread.c,
blockframe.c, and plenty more. (I count 634 as of 940621 - sts)
d88 2
a89 3
"next" over a function that longjumps, never stops until next time you happen
to get to that spot by accident.  E.g. "n" over execute_command which has
an error.
d91 1
a91 3
"set zeroprint off", don't bother printing members of structs which
are entirely zero.  Useful for those big structs with few useful
members.
d93 2
a94 2
GDB does four ioctl's for every command, probably switching terminal modes
to/from inferior or for readline or something.
d96 1
a96 2
terminal_ours versus terminal_inferior: cache state.  Switch should be a noop
if the state is the same, too.
d98 1
a98 1
ptype $i6 = void??!
d100 1
a100 3
Clean up invalid_float handling so gdb doesn't coredump when it tries to
access a NaN.  While this might work on SPARC, other machines are not
configured right.
d102 1
a102 6
"b value_at ; commands ; continue ; end" stops EVERY OTHER TIME!
Then once you enter a command, it does the command, runs two more
times, and then stops again!  Bizarre...  (This behaviour has been
modified, but it is not yet 100% predictable when e.g. the commands
call functions in the child, and while there, the child is interrupted
with a signal, or hits a breakpoint.)
d104 1
a104 1
help completion, help history should work.
d106 1
a106 2
Check that we can handle stack trace through varargs AND alloca in same
function, on 29K.
d108 1
a108 1
wait_for_inferior loops forever if wait() gives it an error.
d110 2
a111 2
"i frame" shows wrong "arglist at" location, doesn't show where the args
should be found, only their actual values.
d113 1
a113 2
There should be a way for "set" commands to validate the new setting
before it takes effect.
d115 1
a115 9
A mess of floating point opcodes are missing from sparc-opcode.h.
Also, a little program should test the table for bits that are
overspecified or underspecified.  E.g. if the must-be-ones bits
and the must-be-zeroes bits leave some fields unexamined, and the format
string leaves them unprinted, then point this out.  If multiple
non-alias patterns match, point this out too.  Finally, there should
be a sparc-optest.s file that tries each pattern out.  This file
should end up coming back the same (modulo transformation comments) 
if fed to "gas" then the .o is fed to gdb for disassembly.
d117 1
a117 2
Eliminate all the core_file_command's in all the xdep files.
Eliminate separate declarations of registers[] everywhere.
d119 7
a125 1
"ena d" is ambiguous, why?  "ena delete" seems to think it is a command!
d127 1
a127 3
Perhaps move the tdep, xdep, and nat files, into the config
subdirectories.  If not, at least straighten out their names so that
they all start with the machine name.
d129 1
a129 2
inferior_status should include stop_print_frame.  It won't need to be
reset in wait_for_inferior after bpstat_stop_status call, then.
d131 11
a141 2
i line VAR produces "Line number not known for symbol ``var''.".  I
thought we were stashing that info now!
d143 6
a148 1
We should be able to write to random files at hex offsets like adb.
d150 6
a155 1
Make "target xxx" command interruptible.
d157 7
a163 2
Handle add_file with separate text, data, and bss addresses.  Maybe
handle separate addresses for each segment in the object file?
d165 3
a167 3
Handle free_named_symtab to cope with multiply-loaded object files
in a dynamic linking environment.  Should remember the last copy loaded,
but not get too snowed if it finds references to the older copy.
d169 4
a172 5
Generalize and Standardize the RPC interface to a target program,
improve it beyond the "ptrace" interface, and see if it can become a
standard for remote debugging.  (This is talking about the vxworks
interface.  Seems unlikely to me that there will be "a standard" for
remote debugging anytime soon --kingdon, 8 Nov 1994).
d174 1
a174 8
Remove all references to:
	text_offset
	data_offset
	text_data_start
	text_end
	exec_data_offset
	...
now that we have BFD.  All remaining are in machine dependent files.
d176 1
a176 3
When quitting with a running program, if a core file was previously
examined, you get "Couldn't read float regs from core file"...if 
indeed it can't.  generic_mourn_inferior...
d178 3
a180 3
Have remote targets give a warning on a signal argument to
target_resume.  Or better yet, extend the protocols so that it works
like it does on the Unix-like systems.
d182 1
a182 1
Sort help and info output.
d184 1
a184 2
Re-organize help categories into things that tend to fit on a screen
and hang together.
d186 1
a186 3
renote-nindy.c handles interrupts poorly; it error()s out of badly
chosen places, e.g. leaving current_frame zero, which causes core dumps
on the next command.
d188 2
a189 3
Add in commands like ADB's for searching for patterns, etc.  We should
be able to examine and patch raw unsymboled binaries as well in gdb as
we can in adb.  (E.g. increase the timeout in /bin/login without source).
d191 1
a191 5
Those xdep files that call register_addr without defining it are
probably simply broken.  When reconfiguring this part of gdb, I could
only make guesses about how to redo some of those files, and I
probably guessed wrong, or left them "for later" when I have a
machine that can attempt to build them.
d193 2
a194 3
When doing "step" or "next", if a few lines of source are skipped between
the previous line and the current one, print those lines, not just the
last line of a multiline statement.
d196 1
a196 5
When searching for C++ superclasses in value_cast in valops.c, we must
not search the "fields", only the "superclasses".  There might be a
struct with a field name that matches the superclass name.  This can
happen when the struct was defined before the superclass (before the
name became a typedef).
d198 1
a198 9
Handling of "&" address-of operator needs some serious overhaul
for ANSI C and consistency on arrays and functions.
  For "float point[15];":
ptype &point[4]   ==> Attempt to take address of non-lvalue.
  For "char *malloc();":
ptype malloc	  ==> "char *()";  should be same as
ptype &malloc     ==> "char *(*)()"
call printf ("%x\n", malloc)   ==> weird value, should be same as
call printf ("%x\n", &malloc)  ==> correct value
d200 1
a200 3
Fix dbxread.c symbol reading in the presence of interrupts.  It
currently leaves a cleanup to blow away the entire symbol table when a
QUIT occurs.  (What's wrong with that? -kingdon, 28 Oct 1993).
d202 2
a203 4
Mipsread.c reads include files depth-first, because the dependencies
in the psymtabs are way too inclusive (it seems to me).  Figure out what
really depends on what, to avoid recursing 20 or 30 times while reading
real symtabs.
d205 1
a205 2
value_add() should be subtracting the lower bound of arrays, if known,
and possibly checking against the upper bound for error reporting.
d207 2
a208 2
mipsread.c symbol table allocation and deallocation should be checked.
My suspicion is that it's full of memory leaks.
d210 1
a210 2
SunOS should have a target_lookup_symbol() for common'd things allocated
by the shared library linker ld.so.
d212 2
a213 2
When listing source lines, check for a preceding \n, to verify that
the file hasn't changed out from under us.
d215 2
a216 2
When listing source lines, eat leading whitespace corresponding to the
line-number prefix we print.  This avoids long lines wrapping.
a217 3
mipsread.c needs to check for old symtabs and psymtabs for the same
files, the way it happens for dbxread.c and coffread.c, for VxWorks
incremental symbol table reloading.
d219 2
a220 3
Get all the remote systems (where the protocol allows it) to be able to
stop the remote system when the GDB user types ^C (like remote.c
does).  For ebmon, use ^Ak.
d222 2
a223 3
Possible feature: A version of the "disassemble" command which shows
both source and assembly code ("set symbol-filename on" is a partial
solution).
d225 1
a225 2
investigate "x/s 0" (right now stops early) (I think maybe GDB is
using a 0 address for bad purposes internally).
d227 2
a228 2
Make "info path" and path_command work again (but independent of the
environment either of gdb or that we'll pass to the inferior).
d230 1
a230 4
Make GDB understand the GCC feature for putting octal constants in
enums.  Make it so overflow on an enum constant does not error_type
the whole type.  Allow arbitrarily large enums with type attributes.
Put all this stuff in the testsuite.
d232 1
a232 4
Make TYPE_CODE_ERROR with a non-zero TYPE_LENGTH more useful (print
the value in hex; process type attributes).  Add this to the
testsuite.  This way future compilers can add new types and old
versions of GDB can do something halfway reasonable.
d234 1
a234 2
Clean up formatting of "info registers" on MIPS and 88k.  See if it
is possible to do this generically across all target architectures.
d236 5
a240 2
GDB gets bfd/corefile.c and gdb/corefile.c confused (this should be easy to
repeat even with something more recent than GDB 4.9).
d242 2
a243 1
Check that unmatched RBRAC doesn't abort().
d245 3
a247 6
Fix mdebugread.c:parse_type to do fundamental types right (see
rs6000_builtin_type in stabsread.c for what "right" is--the point is
that the debug format fixes the sizes of these things and it shouldn't
depend on stuff like TARGET_PTR_BIT and so on.  For mdebug, there seem
to be separate bt* codes for 64 bit and 32 bit things, and GDB should
be aware of that).  Also use a switch statement for clarity and speed.
d249 1
a249 2
Investigate adding symbols in target_load--some targets do, some
don't.
a250 3
Put dirname in psymtabs and change lookup*symtab to use dirname (so
/foo/bar.c works whether compiled by cc /foo/bar.c, or cd /foo; cc
bar.c).
d252 2
a253 2
Merge xcoffread.c and coffread.c.  Use breakpoint_re_set instead of
fixup_breakpoints.
d255 1
a255 3
Fix byte order and int size sins in tm-a29k.h
(EXTRACT_RETURN_VALUE).  Perhaps should reproduce bug and verify fix
(or perhaps should just fix it...).
d257 1
a257 2
Make a watchpoint on a constant expression an error (or warning
perhaps)
d259 1
a259 2
Make a watchpoint which contains a function call an error (it is
broken now, making it work is probably not worth the effort).
d261 1
a261 5
Re-do calls to signal() in remote.c, and inflow.c (set_sigint_trap and
so on) to be independent of the debugging target, using target_stop to
stop the inferior.  Probably the part which is now handled by
interrupt_query in remote.c can be done without any new features in
the debugging target.
d263 1
a263 3
New test case based on weird.exp but in which type numbers are not
renumbered (thus multiply defining a type).  This currently causes an
infinite loop on "p v_comb".
d265 2
a266 1
Nuke baseclass_addr.
d268 1
a268 1
Nuke USG define.
d270 1
a270 1
"source file more recent" loses on re-read
d272 1
a272 3
Fix 386 floating point so that floating point registers are real
registers (but code can deal at run-time if they are missing, like
mips and 68k).  This would clean up "info float" and related stuff.
d274 1
a274 3
Look at Solaris bug in interrupt.exp.  Can get out of syscall with
PRSABORT (syscall will return EINTR) but merely doing that leads to a
"can't read memory" error.
d276 1
a276 2
gcc -g -c enummask.c then gdb enummask.o, then "p v".  GDB complains
about not being able to access memory location 0.
d278 1
a278 7
-------------------- enummask.c
enum mask
{
  ANIMAL = 0,
  VEGETABLE = 1,
  MINERAL = 2,
  BASIC_CATEGORY = 3,
d280 2
a281 5
  WHITE = 0,
  BLUE = 4,
  GREEN = 8,
  BLACK = 0xc,
  COLOR = 0xc,
d283 3
a285 1
  ALIVE = 0x10,
d287 1
a287 2
  LARGE = 0x20
} v;
d289 2
a290 2
If try to modify value in file with "set write off" should give
appropriate error not "cannot access memory at address 0x65e0".
d292 3
a294 3
Why do we allow a target to omit standard register names (NO_STD_REGS
in tm-z8k.h)?  I thought the standard register names were supposed to
be just that, standard.
d296 3
a298 2
Make DEBUG_EXPRESSIONS a maintenance command, dependent on
MAINTENANCE_COMMANDS.
d300 3
a302 1
Allow core file without exec file on RS/6000.
d304 1
a304 1
Make sure "shell" with no arguments works right on DOS.
d306 2
a307 3
Make gdb.ini (as well as .gdbinit) be checked on all platforms, so
the same directory can be NFS-mounted on unix or DOS, and work the
same way.
d309 3
a311 1
cd ~/tmp/<M-?> causes infinite loop (where ~/tmp is a directory).
d313 2
a314 2
Get SECT_OFF_TEXT stuff out of objfile_relocate (might be needed to
get RS/6000 to work right, might not be immediately relevant).
d316 1
a316 1
Clean up add_toc_to_loadinfo
d318 2
a319 1
Think about attached processes and sharing terminal.
d321 4
a324 5
John sez in reference to ignoring errors from tcsegpgrp if attach_flag:
set_tty_state should not have any trouble with attached processes.
Instead, the tty handling should leave the pgrp of the tty alone when
attaching to processes (perhaps pass terminal_init_inferior a flag
saying whether we're attaching).
d326 2
a327 2
PAGE_SIZE redefined warnings on AIX.  Probably should be using
BFD_PAGE_SIZE throughout BFD.
d329 1
a329 54
Rewrite proceed, wait_for_inferior, and normal_stop to clean them up.
Suggestions: 

	1) Make each test in wait_for_inferior a seperate subroutine
	   call.
	2) Combine wait_for_inferior and normal_stop to clean up
	   communication via global variables.
	3) See if you can find some way to clean up the global
	   variables that are used; possibly group them by data flow
	   and information content?

Work out some kind of way to allow running the inferior to be done as
a sub-execution of, eg. breakpoint command lists.  Currently running
the inferior interupts any command list execution.  This would require
some rewriting of wait_for_inferior & friends, and hence should
probably be done in concert with the above.

Add function arguments to gdb user defined functions.

Add convenience variables that refer to exec file, symbol file,
selected frame source file, selected frame function, selected frame
line number, etc.

Add a "suspend" subcommand of the "continue" command to suspend gdb
while continuing  execution of the subprocess.  Useful when you are
debugging servers and you want to dodge out and initiate a connection
to a server running under gdb.

Add stab information to allow reasonable debugging of inline functions
(possibly they should show up on a stack backtrace?  With a note
indicating that they weren't "real"?).

Modify the naked "until" command to step until past the current source
line, rather than past the current pc value.  This is tricky simply
because the low level routines have no way of specifying a multi-line
step range, and there is no way of saying "don't print stuff when we
stop" from above (otherwise could just call step many times).

Modify the handling of symbols grouped through BINCL/EINCL stabs to
allocate a partial symtab for each BINCL/EINCL grouping.  This will
seriously decrease the size of inter-psymtab dependencies and hence
lessen the amount that needs to be read in when a new source file is
accessed. 

Do an "x/i $pc" after each stepi or nexti.  

Modify all of the disassemblers to use printf_filtered to get correct
more filtering.

Modify gdb to work correctly with Pascal.

Add a command for searching memory, a la adb.  It specifies size,
mask, value, start address.  ADB searches until it finds it or hits
an error (or is interrupted).
@


1.1
log
@file TODO was initially added on branch CYGNUS.
@
text
@d1 471
@


1.1.1.1
log
@GDB 6.1 (excluding .info files)
@
text
@a0 333
If you find inaccuracies in this list, please send mail to
gdb-patches@@sources.redhat.com.  If you would like to work on any
of these, you should consider sending mail to the same address, to
find out whether anyone else is working on it.


			GDB 5.1 - Fixes
			===============

Below is a list of problems identified during the GDB 5.0 release
cycle.  People hope to have these problems fixed in 5.1.

--

Wow, three bug reports for the same problem in one day!  We should
probably make fixing this a real priority :-).

Anyway, thanks for reporting.

The following patch will fix the problems with setting breakpoints in
dynamically loaded objects:

   http://sources.redhat.com/ml/gdb-patches/2000-05/msg00230.html

This patch isn't checked in yet (ping Michael/JimB), but I hope this
will be in the next GDB release.

There should really be a test in the testsuite for this problem, since
it keeps coming up :-(.  Any volunteers?

Mark

--

		GDB 5.1 - New features
		======================

The following new features should be included in 5.1.

--

		GDB 5.1 - Cleanups
		==================

The following code cleanups will hopefully be applied to GDB 5.1.

--

		GDB 5.1 - Known Problems
		========================

--

z8k

The z8k has suffered bit rot and is known to not build.  The problem
was occuring in the opcodes directory.

--

The BFD directory requires bug-fixed AUTOMAKE et.al.

AUTOMAKE 1.4 incorrectly set the TEXINPUTS environment variable.  It
contained the full path to texinfo.tex when it should have only
contained the directory.  The bug has been fixed in the current
AUTOMAKE sources.  Automake snapshots can be found in:
	ftp://sources.redhat.com/pub/gdb/infrastructure
and	ftp://sources.redhat.com/pub/binutils

--

Solaris 8 x86 CURSES_H problem
http://sources.redhat.com/ml/gdb/2000-07/msg00038.html

The original problem was worked around with:

    2000-06-06  Michael Snyder  <msnyder@@cygnus.com>

        * configure.in: Enable autoconf to find curses.h on Solaris 2.8.
        * configure: Regenerate.

When building both GDB and SID using the same source tree the problem
will still occure. sid/component/configure.in mis-configures
<curses.h> and leaves wrong information in the config cache.

--

		GDB 5.2 - Fixes
		===============

--

		GDB 5.2 - New features
		======================

--

GCC 3.0 ABI support (but hopefully sooner...).

--

Objective C/C++ support (but hopefully sooner...).

--

Import of readline 4.2

--

		GDB 5.2 - Cleanups
		==================

The following cleanups have been identified as part of GDB 5.2.

--

Compiler warnings.

Eliminate warnings for all targets on at least one host for one of the
-W flags.  Flags up for debate include: -Wswitch -Wcomment -trigraphs
-Wtrigraphs -Wunused-function -Wunused-label -Wunused-variable
-Wunused-value -Wchar-subscripts -Wtraditional -Wshadow -Wcast-qual
-Wcast-align -Wwrite-strings -Wconversion -Wstrict-prototypes
-Wmissing-prototypes -Wmissing-declarations -Wredundant-decls
-Woverloaded-virtual -Winline

--

Deprecate, if not delete, the following:

        register[]
        register_valid[]
	REGISTER_BYTE()
                Replaced by, on the target side
                  supply_register()
                and on core-gdb side:
                  {read,write}_register_gen()
		Remote.c will need to use something
		other than REGISTER_BYTE() and
		REGISTER_RAW_SIZE() when unpacking
		[gG] packets.

        STORE_PSEUDO_REGISTER
        FETCH_PSEUDO_REGISTER
                Now handed by the methods
                  gdbarch_{read,write}_register()
                which sits between core GDB and
                the register cache.

        REGISTER_CONVERTIBLE
        REGISTER_CONVERT_TO_RAW
        REGISTER_CONVERT_TO_VIRTUAL
                I think these three are redundant.
                gdbarch_register_{read,write} can
                do any conversion it likes.

        REGISTER_VIRTUAL_SIZE
        MAX_REGISTER_VIRTUAL_SIZE
        REGISTER_VIRTUAL_TYPE
                I think these can be replaced by
		the pair:
                  FRAME_REGISTER_TYPE(frame, regnum)
                  REGISTER_TYPE(regnum)

	DO_REGISTERS_INFO
		Replace with
		 FRAME_REGISTER_INFO (frame, ...)

	REGISTER_SIM_REGNO()
		If nothing else rename this so that
		how it relates to rawreg and the
		regnum is clear.

--

Obsolete the targets:

arm*-wince-pe
mips*-*-pe
sh*-*-pe

--

Obsolete the protocols:

RDB?

``As of version 5.3, WindRiver has removed the RDB server (RDB
protocol support is built into gdb).''  -- Till.

--

Restructure gdb directory tree so that it avoids any 8.3 and 14
filename problems.

--

Convert GDB build process to AUTOMAKE.

See also sub-directory configure below.

The current convention is (kind of) to use $(<header>_h) in all
dependency lists.  It isn't done in a consistent way.

--

		GDB 5.2 - Known Problems
		========================

--

		Code Cleanups: General
		======================

The following are more general cleanups and fixes.  They are not tied
to any specific release.


			New Features and Fixes
			======================

These are harder than cleanups but easier than work involving
fundamental architectural change.

--

			Language Support
			================

New languages come onto the scene all the time.

--

Re: Various C++ things

RTTI for g++ should be using the typeinfo functions rather than the
vtables.  The typeinfo functions are always at offset 4 from the
beginning of the vtable, and are always right. The vtables will have
weird names like E::VB sometimes.  The typeinfo function will always
be "E type_info function", or somesuch.

value_virtual_fn_field needs to be fixed so there are no failures for
virtual functions for C++ using g++.

Testsuite cases are the major priority right now for C++ support,
since i have to make a lot of changes that could potentially break
each other.

--


			Symbol Support
			==============

--

Investiagate ways of reducing memory.

--

Investigate ways of improving load time.

--

			Testsuite Support
			=================

There are never to many testcases.

--

Better thread testsuite.

--

Better C++ testsuite.

--

		Architectural Changes: General
		==============================

These are harder than simple cleanups / fixes and, consequently
involve more work.  Typically an Architectural Change will be broken
down into a more digestible set of cleanups and fixes.

--

		Architectural Change: Multi-arch et al.
		=======================================

The long term objective is to remove all assumptions that there is a
single target with a single address space with a single instruction
set architecture and single application binary interface.

This is an ongoing effort.  The first milestone is to enable
``multi-arch'' where by all architectural decisions are made at
runtime.

It should be noted that ``gdbarch'' is really ``gdbabi'' and
``gdbisa''.  Once things are multi-arched breaking that down correctly
will become much easier.

--

	Architectural Change: MI, LIBGDB and scripting languages
	========================================================

See also architectural changes related to the event loop.  LIBGDB
can't be finished until there is a generic event loop being used by
all targets.

The long term objective is it to be possible to integrate GDB into
scripting languages.

--

		Architectural Change: Async
		===========================

While GDB uses an event loop when prompting the user for input.  That
event loop is not exploited by targets when they allow the target
program to continue.  Typically targets still block in (target_wait())
until the program again halts.

The closest a target comes to supporting full asynchronous mode are
the remote targets ``async'' and ``extended-async''.

--

# Local Variables:
# mode: text
# End:
@


1.1.2.1
log
@Import of 961112 Cygnus binutils+gas+ld+gdb+gprof
@
text
@a0 471
If you find inaccuracies in this list, please send mail to
bug-gdb@@prep.ai.mit.edu.  If you would like to work on any of these,
you should consider sending mail to the same address, to find out
whether anyone else is working on it.

General To Do List
------------------

This list is probably not up to date, and opinions vary about the
importance or even desirability of some of the items.

Add an "info bfd" command that displays supported object formats,
similarly to objdump -i.

START_INFERIOR_TRAPS_EXPECTED need never be defined to 2, since that
is its default value.  Clean this up.

It should be possible to use symbols from shared libraries before we know
exactly where the libraries will be loaded.  E.g. "b perror" before running
the program.  This could maybe be done as an extension of the "breakpoint
re-evaluation" after new symbols are loaded.

Make single_step() insert and remove breakpoints in one operation.

Speed up single stepping by avoiding extraneous ptrace calls.

Speed up single stepping by not inserting and removing breakpoints
each time the inferior starts and stops.

Breakpoints should not be inserted and deleted all the time.  Only the
one(s) there should be removed when we have to step over one.  Support
breakpoints that don't have to be removed to step over them.

Update gdbint.texinfo to include doc on the directory structure and 
the various tricks of building gdb.

Do a tutorial in gdb.texinfo on how to do simple things in gdb.
E.g. how to set a breakpoint that just prints something and continues.
How to break on aborts.  Etc.

Provide "voodoo" debugging of core files.  This creates a zombie
process as a child of the debugger, and loads it up with the data,
stack, and regs of the core file.  This allows you to call functions
in the executable, to manipulate the data in the core file.

GDB reopens the source file on every line, as you "next" through it.

Referencing the vtbl member of a struct doesn't work.  It prints OK
if you print the struct, but it gets 0 if you try to deref it.

Persistent command history: A feature where you could save off a list
of the commands you did, so you can edit it into something that will bring
the target to the same place every time you source it.
This would also be useful for automated fast watchpointing; if you go
past the place where it watchpoints, you just start it over again and
do it more carefully.

Deal with the SunOS 4.0 and 4.1.1 ptrace bug that loses the registers if
the stack is paged out.

Finish the C++ exception handling stub routines.  Lint points them out
as unused statics functions.

Perhaps "i source" should take an argument like that of "list".

See if core-aout.c's fetch_core_registers can be used on more machines.
E.g. MIPS (mips-xdep.c).

unpack_double() does not handle IEEE float on the target unless the host
is also IEEE.  Death on a vax.

Set up interface between GDB and INFO so that you can hop into interactive
INFO and back out again.  When running under Emacs, should use Emacs
info, else fork the info program.  Installation of GDB should install
its texinfo files into the info tree automagically, including the readline
texinfo files.

"help address" ought to find the "help set print address" entry.

Remove the VTBL internal guts from printouts of C++ structs, unless
vtblprint is set.

Remove "at 0xnnnn" from the "b foo" response, if `print address off' and if
it matches the source line indicated.

The prompt at end of screen should accept space as well as CR.

Check STORE_RETURN_VALUE on all architectures.  Check near it in tm-sparc.h
for other bogosities.

Check for storage leaks in GDB, I'm sure there are a lot!

vtblprint of a vtbl should demangle the names it's printing.

Backtrace should point out what the currently selected frame is, in
its display, perhaps showing "@@3 foo (bar, ...)" or ">3 foo (bar,
...)" rather than "#3 foo (bar, ...)".

"i program" should work for core files, and display more info, like what
actually caused it to die.

"x/10i" should shorten the long name, if any, on subsequent lines.

Check through the code for FIXME comments and fix them.  dbxread.c,
blockframe.c, and plenty more. (I count 634 as of 940621 - sts)

"next" over a function that longjumps, never stops until next time you happen
to get to that spot by accident.  E.g. "n" over execute_command which has
an error.

"set zeroprint off", don't bother printing members of structs which
are entirely zero.  Useful for those big structs with few useful
members.

GDB does four ioctl's for every command, probably switching terminal modes
to/from inferior or for readline or something.

terminal_ours versus terminal_inferior: cache state.  Switch should be a noop
if the state is the same, too.

ptype $i6 = void??!

Clean up invalid_float handling so gdb doesn't coredump when it tries to
access a NaN.  While this might work on SPARC, other machines are not
configured right.

"b value_at ; commands ; continue ; end" stops EVERY OTHER TIME!
Then once you enter a command, it does the command, runs two more
times, and then stops again!  Bizarre...  (This behaviour has been
modified, but it is not yet 100% predictable when e.g. the commands
call functions in the child, and while there, the child is interrupted
with a signal, or hits a breakpoint.)

help completion, help history should work.

Check that we can handle stack trace through varargs AND alloca in same
function, on 29K.

wait_for_inferior loops forever if wait() gives it an error.

"i frame" shows wrong "arglist at" location, doesn't show where the args
should be found, only their actual values.

There should be a way for "set" commands to validate the new setting
before it takes effect.

A mess of floating point opcodes are missing from sparc-opcode.h.
Also, a little program should test the table for bits that are
overspecified or underspecified.  E.g. if the must-be-ones bits
and the must-be-zeroes bits leave some fields unexamined, and the format
string leaves them unprinted, then point this out.  If multiple
non-alias patterns match, point this out too.  Finally, there should
be a sparc-optest.s file that tries each pattern out.  This file
should end up coming back the same (modulo transformation comments) 
if fed to "gas" then the .o is fed to gdb for disassembly.

Eliminate all the core_file_command's in all the xdep files.
Eliminate separate declarations of registers[] everywhere.

"ena d" is ambiguous, why?  "ena delete" seems to think it is a command!

Perhaps move the tdep, xdep, and nat files, into the config
subdirectories.  If not, at least straighten out their names so that
they all start with the machine name.

inferior_status should include stop_print_frame.  It won't need to be
reset in wait_for_inferior after bpstat_stop_status call, then.

i line VAR produces "Line number not known for symbol ``var''.".  I
thought we were stashing that info now!

We should be able to write to random files at hex offsets like adb.

Make "target xxx" command interruptible.

Handle add_file with separate text, data, and bss addresses.  Maybe
handle separate addresses for each segment in the object file?

Handle free_named_symtab to cope with multiply-loaded object files
in a dynamic linking environment.  Should remember the last copy loaded,
but not get too snowed if it finds references to the older copy.

Generalize and Standardize the RPC interface to a target program,
improve it beyond the "ptrace" interface, and see if it can become a
standard for remote debugging.  (This is talking about the vxworks
interface.  Seems unlikely to me that there will be "a standard" for
remote debugging anytime soon --kingdon, 8 Nov 1994).

Remove all references to:
	text_offset
	data_offset
	text_data_start
	text_end
	exec_data_offset
	...
now that we have BFD.  All remaining are in machine dependent files.

When quitting with a running program, if a core file was previously
examined, you get "Couldn't read float regs from core file"...if 
indeed it can't.  generic_mourn_inferior...

Have remote targets give a warning on a signal argument to
target_resume.  Or better yet, extend the protocols so that it works
like it does on the Unix-like systems.

Sort help and info output.

Re-organize help categories into things that tend to fit on a screen
and hang together.

renote-nindy.c handles interrupts poorly; it error()s out of badly
chosen places, e.g. leaving current_frame zero, which causes core dumps
on the next command.

Add in commands like ADB's for searching for patterns, etc.  We should
be able to examine and patch raw unsymboled binaries as well in gdb as
we can in adb.  (E.g. increase the timeout in /bin/login without source).

Those xdep files that call register_addr without defining it are
probably simply broken.  When reconfiguring this part of gdb, I could
only make guesses about how to redo some of those files, and I
probably guessed wrong, or left them "for later" when I have a
machine that can attempt to build them.

When doing "step" or "next", if a few lines of source are skipped between
the previous line and the current one, print those lines, not just the
last line of a multiline statement.

When searching for C++ superclasses in value_cast in valops.c, we must
not search the "fields", only the "superclasses".  There might be a
struct with a field name that matches the superclass name.  This can
happen when the struct was defined before the superclass (before the
name became a typedef).

Handling of "&" address-of operator needs some serious overhaul
for ANSI C and consistency on arrays and functions.
  For "float point[15];":
ptype &point[4]   ==> Attempt to take address of non-lvalue.
  For "char *malloc();":
ptype malloc	  ==> "char *()";  should be same as
ptype &malloc     ==> "char *(*)()"
call printf ("%x\n", malloc)   ==> weird value, should be same as
call printf ("%x\n", &malloc)  ==> correct value

Fix dbxread.c symbol reading in the presence of interrupts.  It
currently leaves a cleanup to blow away the entire symbol table when a
QUIT occurs.  (What's wrong with that? -kingdon, 28 Oct 1993).

Mipsread.c reads include files depth-first, because the dependencies
in the psymtabs are way too inclusive (it seems to me).  Figure out what
really depends on what, to avoid recursing 20 or 30 times while reading
real symtabs.

value_add() should be subtracting the lower bound of arrays, if known,
and possibly checking against the upper bound for error reporting.

mipsread.c symbol table allocation and deallocation should be checked.
My suspicion is that it's full of memory leaks.

SunOS should have a target_lookup_symbol() for common'd things allocated
by the shared library linker ld.so.

When listing source lines, check for a preceding \n, to verify that
the file hasn't changed out from under us.

When listing source lines, eat leading whitespace corresponding to the
line-number prefix we print.  This avoids long lines wrapping.

mipsread.c needs to check for old symtabs and psymtabs for the same
files, the way it happens for dbxread.c and coffread.c, for VxWorks
incremental symbol table reloading.

Get all the remote systems (where the protocol allows it) to be able to
stop the remote system when the GDB user types ^C (like remote.c
does).  For ebmon, use ^Ak.

Possible feature: A version of the "disassemble" command which shows
both source and assembly code ("set symbol-filename on" is a partial
solution).

investigate "x/s 0" (right now stops early) (I think maybe GDB is
using a 0 address for bad purposes internally).

Make "info path" and path_command work again (but independent of the
environment either of gdb or that we'll pass to the inferior).

Make GDB understand the GCC feature for putting octal constants in
enums.  Make it so overflow on an enum constant does not error_type
the whole type.  Allow arbitrarily large enums with type attributes.
Put all this stuff in the testsuite.

Make TYPE_CODE_ERROR with a non-zero TYPE_LENGTH more useful (print
the value in hex; process type attributes).  Add this to the
testsuite.  This way future compilers can add new types and old
versions of GDB can do something halfway reasonable.

Clean up formatting of "info registers" on MIPS and 88k.  See if it
is possible to do this generically across all target architectures.

GDB gets bfd/corefile.c and gdb/corefile.c confused (this should be easy to
repeat even with something more recent than GDB 4.9).

Check that unmatched RBRAC doesn't abort().

Fix mdebugread.c:parse_type to do fundamental types right (see
rs6000_builtin_type in stabsread.c for what "right" is--the point is
that the debug format fixes the sizes of these things and it shouldn't
depend on stuff like TARGET_PTR_BIT and so on.  For mdebug, there seem
to be separate bt* codes for 64 bit and 32 bit things, and GDB should
be aware of that).  Also use a switch statement for clarity and speed.

Investigate adding symbols in target_load--some targets do, some
don't.

Put dirname in psymtabs and change lookup*symtab to use dirname (so
/foo/bar.c works whether compiled by cc /foo/bar.c, or cd /foo; cc
bar.c).

Merge xcoffread.c and coffread.c.  Use breakpoint_re_set instead of
fixup_breakpoints.

Fix byte order and int size sins in tm-a29k.h
(EXTRACT_RETURN_VALUE).  Perhaps should reproduce bug and verify fix
(or perhaps should just fix it...).

Make a watchpoint on a constant expression an error (or warning
perhaps)

Make a watchpoint which contains a function call an error (it is
broken now, making it work is probably not worth the effort).

Re-do calls to signal() in remote.c, and inflow.c (set_sigint_trap and
so on) to be independent of the debugging target, using target_stop to
stop the inferior.  Probably the part which is now handled by
interrupt_query in remote.c can be done without any new features in
the debugging target.

New test case based on weird.exp but in which type numbers are not
renumbered (thus multiply defining a type).  This currently causes an
infinite loop on "p v_comb".

Nuke baseclass_addr.

Nuke USG define.

"source file more recent" loses on re-read

Fix 386 floating point so that floating point registers are real
registers (but code can deal at run-time if they are missing, like
mips and 68k).  This would clean up "info float" and related stuff.

Look at Solaris bug in interrupt.exp.  Can get out of syscall with
PRSABORT (syscall will return EINTR) but merely doing that leads to a
"can't read memory" error.

gcc -g -c enummask.c then gdb enummask.o, then "p v".  GDB complains
about not being able to access memory location 0.

-------------------- enummask.c
enum mask
{
  ANIMAL = 0,
  VEGETABLE = 1,
  MINERAL = 2,
  BASIC_CATEGORY = 3,

  WHITE = 0,
  BLUE = 4,
  GREEN = 8,
  BLACK = 0xc,
  COLOR = 0xc,

  ALIVE = 0x10,

  LARGE = 0x20
} v;

If try to modify value in file with "set write off" should give
appropriate error not "cannot access memory at address 0x65e0".

Why do we allow a target to omit standard register names (NO_STD_REGS
in tm-z8k.h)?  I thought the standard register names were supposed to
be just that, standard.

Make DEBUG_EXPRESSIONS a maintenance command, dependent on
MAINTENANCE_COMMANDS.

Allow core file without exec file on RS/6000.

Make sure "shell" with no arguments works right on DOS.

Make gdb.ini (as well as .gdbinit) be checked on all platforms, so
the same directory can be NFS-mounted on unix or DOS, and work the
same way.

cd ~/tmp/<M-?> causes infinite loop (where ~/tmp is a directory).

Get SECT_OFF_TEXT stuff out of objfile_relocate (might be needed to
get RS/6000 to work right, might not be immediately relevant).

Clean up add_toc_to_loadinfo

Think about attached processes and sharing terminal.

John sez in reference to ignoring errors from tcsegpgrp if attach_flag:
set_tty_state should not have any trouble with attached processes.
Instead, the tty handling should leave the pgrp of the tty alone when
attaching to processes (perhaps pass terminal_init_inferior a flag
saying whether we're attaching).

PAGE_SIZE redefined warnings on AIX.  Probably should be using
BFD_PAGE_SIZE throughout BFD.

Rewrite proceed, wait_for_inferior, and normal_stop to clean them up.
Suggestions: 

	1) Make each test in wait_for_inferior a seperate subroutine
	   call.
	2) Combine wait_for_inferior and normal_stop to clean up
	   communication via global variables.
	3) See if you can find some way to clean up the global
	   variables that are used; possibly group them by data flow
	   and information content?

Work out some kind of way to allow running the inferior to be done as
a sub-execution of, eg. breakpoint command lists.  Currently running
the inferior interupts any command list execution.  This would require
some rewriting of wait_for_inferior & friends, and hence should
probably be done in concert with the above.

Add function arguments to gdb user defined functions.

Add convenience variables that refer to exec file, symbol file,
selected frame source file, selected frame function, selected frame
line number, etc.

Add a "suspend" subcommand of the "continue" command to suspend gdb
while continuing  execution of the subprocess.  Useful when you are
debugging servers and you want to dodge out and initiate a connection
to a server running under gdb.

Add stab information to allow reasonable debugging of inline functions
(possibly they should show up on a stack backtrace?  With a note
indicating that they weren't "real"?).

Modify the naked "until" command to step until past the current source
line, rather than past the current pc value.  This is tricky simply
because the low level routines have no way of specifying a multi-line
step range, and there is no way of saying "don't print stuff when we
stop" from above (otherwise could just call step many times).

Modify the handling of symbols grouped through BINCL/EINCL stabs to
allocate a partial symtab for each BINCL/EINCL grouping.  This will
seriously decrease the size of inter-psymtab dependencies and hence
lessen the amount that needs to be read in when a new source file is
accessed. 

Do an "x/i $pc" after each stepi or nexti.  

Modify all of the disassemblers to use printf_filtered to get correct
more filtering.

Modify gdb to work correctly with Pascal.

Add a command for searching memory, a la adb.  It specifies size,
mask, value, start address.  ADB searches until it finds it or hits
an error (or is interrupted).

# Local Variables:
# mode: text
# End:
@
