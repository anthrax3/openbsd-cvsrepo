head	1.3;
access;
symbols
	OPENBSD_3_5:1.2.0.32
	OPENBSD_3_5_BASE:1.2
	OPENBSD_3_4:1.2.0.30
	OPENBSD_3_4_BASE:1.2
	OPENBSD_3_3:1.2.0.28
	OPENBSD_3_3_BASE:1.2
	OPENBSD_3_2:1.2.0.26
	OPENBSD_3_2_BASE:1.2
	OPENBSD_3_1:1.2.0.24
	OPENBSD_3_1_BASE:1.2
	OPENBSD_3_0:1.2.0.22
	OPENBSD_3_0_BASE:1.2
	OPENBSD_2_9:1.2.0.20
	OPENBSD_2_9_BASE:1.2
	OPENBSD_2_8:1.2.0.18
	OPENBSD_2_8_BASE:1.2
	OPENBSD_2_7:1.2.0.16
	OPENBSD_2_7_BASE:1.2
	new-binutils:1.2.0.14
	OPENBSD_2_6:1.2.0.12
	OPENBSD_2_6_BASE:1.2
	OPENBSD_2_5:1.2.0.10
	OPENBSD_2_5_BASE:1.2
	OPENBSD_2_4:1.2.0.8
	OPENBSD_2_4_BASE:1.2
	OPENBSD_2_3:1.2.0.6
	OPENBSD_2_3_BASE:1.2
	OPENBSD_2_2:1.2.0.4
	OPENBSD_2_2_BASE:1.2
	OPENBSD_2_1:1.2.0.2
	OPENBSD_2_1_BASE:1.2
	CYGNUS-961112:1.1.2.1
	CYGNUS:1.1.0.2;
locks; strict;
comment	@ * @;


1.3
date	2004.05.21.20.23.03;	author kettenis;	state dead;
branches;
next	1.2;

1.2
date	96.11.23.03.36.21;	author niklas;	state Exp;
branches;
next	1.1;

1.1
date	96.11.19.14.16.18;	author niklas;	state dead;
branches
	1.1.2.1;
next	;

1.1.2.1
date	96.11.19.14.16.19;	author niklas;	state Exp;
branches;
next	;


desc
@@


1.3
log
@Resolve conflicts for GDB 6.1.  Add local patches.
ok deraadt@@
@
text
@/* Host-dependent code for Apollo-68ks for GDB, the GNU debugger.
   Copyright 1986, 1987, 1989, 1991 Free Software Foundation, Inc.

This file is part of GDB.

This program is free software; you can redistribute it and/or modify
it under the terms of the GNU General Public License as published by
the Free Software Foundation; either version 2 of the License, or
(at your option) any later version.

This program is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
GNU General Public License for more details.

You should have received a copy of the GNU General Public License
along with this program; if not, write to the Free Software
Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA 02111-1307, USA.  */

#include "defs.h"
#include "inferior.h"

#ifndef _ISP__M68K
#define _ISP__M68K 1
#endif

#include <ptrace.h>

extern int errno;

void
fetch_inferior_registers (ignored)
    int ignored;
{
  struct ptrace_$data_regs_m68k inferior_registers;
  struct ptrace_$floating_regs_m68k inferior_fp_registers;
  struct ptrace_$control_regs_m68k inferior_control_registers;
  extern char registers[];

  ptrace_$init_control(&inferior_control_registers);
  inferior_fp_registers.size = sizeof(inferior_fp_registers);

  registers_fetched ();
  
  ptrace (PTRACE_GETREGS, inferior_pid,
	  (PTRACE_ARG3_TYPE) &inferior_registers,
	  ptrace_$data_set,
	  (PTRACE_ARG3_TYPE) &inferior_registers,
	  ptrace_$data_set);

  ptrace (PTRACE_GETREGS, inferior_pid,
	(PTRACE_ARG3_TYPE) &inferior_fp_registers,
	ptrace_$floating_set_m68k,
	(PTRACE_ARG3_TYPE) &inferior_fp_registers,
	ptrace_$floating_set_m68k);

  ptrace (PTRACE_GETREGS, inferior_pid,
	(PTRACE_ARG3_TYPE) &inferior_control_registers,
	ptrace_$control_set_m68k,
	(PTRACE_ARG3_TYPE) &inferior_control_registers,
	ptrace_$control_set_m68k);

  bcopy (&inferior_registers, registers, 16 * 4);
  bcopy (&inferior_fp_registers, &registers[REGISTER_BYTE (FP0_REGNUM)],
	 sizeof inferior_fp_registers.regs);
  *(int *)&registers[REGISTER_BYTE (PS_REGNUM)] = inferior_control_registers.sr;
  *(int *)&registers[REGISTER_BYTE (PC_REGNUM)] = inferior_control_registers.pc;
}

/* Store our register values back into the inferior.
   If REGNO is -1, do this for all registers.
   Otherwise, REGNO specifies which register (so we can save time).  */

void
store_inferior_registers (regno)
     int regno;
{
  struct ptrace_$data_regs_m68k inferior_registers;
  struct ptrace_$floating_regs_m68k inferior_fp_registers;
  struct ptrace_$control_regs_m68k inferior_control_registers;
  extern char registers[];

  ptrace_$init_control(&inferior_control_registers);
  inferior_fp_registers.size = sizeof(inferior_fp_registers);

  ptrace (PTRACE_GETREGS, inferior_pid,
	(PTRACE_ARG3_TYPE) &inferior_fp_registers,
	ptrace_$floating_set_m68k,
	(PTRACE_ARG3_TYPE) &inferior_fp_registers,
	ptrace_$floating_set_m68k);

  ptrace (PTRACE_GETREGS, inferior_pid,
	(PTRACE_ARG3_TYPE) &inferior_control_registers,
	ptrace_$control_set_m68k,
	(PTRACE_ARG3_TYPE) &inferior_control_registers,
	ptrace_$control_set_m68k);

  bcopy (registers, &inferior_registers, sizeof(inferior_registers));

  bcopy (&registers[REGISTER_BYTE (FP0_REGNUM)], inferior_fp_registers.regs,
	 sizeof inferior_fp_registers.regs);

  inferior_control_registers.sr = *(int *)&registers[REGISTER_BYTE (PS_REGNUM)];
  inferior_control_registers.pc = *(int *)&registers[REGISTER_BYTE (PC_REGNUM)];

  ptrace (PTRACE_SETREGS, inferior_pid,
	  (PTRACE_ARG3_TYPE) &inferior_registers,
	  ptrace_$data_set_m68k,
	  (PTRACE_ARG3_TYPE) &inferior_registers,
	  ptrace_$data_set_m68k);

  ptrace (PTRACE_SETREGS, inferior_pid,
	  (PTRACE_ARG3_TYPE) &inferior_fp_registers,
	  ptrace_$floating_set_m68k,
	  (PTRACE_ARG3_TYPE) &inferior_fp_registers,
	  ptrace_$floating_set_m68k);

  ptrace (PTRACE_SETREGS, inferior_pid,
	  (PTRACE_ARG3_TYPE) &inferior_control_registers,
	  ptrace_$control_set_m68k,
	  (PTRACE_ARG3_TYPE) &inferior_control_registers,
	  ptrace_$control_set_m68k);
}
@


1.2
log
@Merge to Cygnus 961112 + add some support (not ready) for shared libs
@
text
@@


1.1
log
@file a68v-nat.c was initially added on branch CYGNUS.
@
text
@d1 123
@


1.1.2.1
log
@Import of 961112 Cygnus binutils+gas+ld+gdb+gprof
@
text
@a0 123
/* Host-dependent code for Apollo-68ks for GDB, the GNU debugger.
   Copyright 1986, 1987, 1989, 1991 Free Software Foundation, Inc.

This file is part of GDB.

This program is free software; you can redistribute it and/or modify
it under the terms of the GNU General Public License as published by
the Free Software Foundation; either version 2 of the License, or
(at your option) any later version.

This program is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
GNU General Public License for more details.

You should have received a copy of the GNU General Public License
along with this program; if not, write to the Free Software
Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA 02111-1307, USA.  */

#include "defs.h"
#include "inferior.h"

#ifndef _ISP__M68K
#define _ISP__M68K 1
#endif

#include <ptrace.h>

extern int errno;

void
fetch_inferior_registers (ignored)
    int ignored;
{
  struct ptrace_$data_regs_m68k inferior_registers;
  struct ptrace_$floating_regs_m68k inferior_fp_registers;
  struct ptrace_$control_regs_m68k inferior_control_registers;
  extern char registers[];

  ptrace_$init_control(&inferior_control_registers);
  inferior_fp_registers.size = sizeof(inferior_fp_registers);

  registers_fetched ();
  
  ptrace (PTRACE_GETREGS, inferior_pid,
	  (PTRACE_ARG3_TYPE) &inferior_registers,
	  ptrace_$data_set,
	  (PTRACE_ARG3_TYPE) &inferior_registers,
	  ptrace_$data_set);

  ptrace (PTRACE_GETREGS, inferior_pid,
	(PTRACE_ARG3_TYPE) &inferior_fp_registers,
	ptrace_$floating_set_m68k,
	(PTRACE_ARG3_TYPE) &inferior_fp_registers,
	ptrace_$floating_set_m68k);

  ptrace (PTRACE_GETREGS, inferior_pid,
	(PTRACE_ARG3_TYPE) &inferior_control_registers,
	ptrace_$control_set_m68k,
	(PTRACE_ARG3_TYPE) &inferior_control_registers,
	ptrace_$control_set_m68k);

  bcopy (&inferior_registers, registers, 16 * 4);
  bcopy (&inferior_fp_registers, &registers[REGISTER_BYTE (FP0_REGNUM)],
	 sizeof inferior_fp_registers.regs);
  *(int *)&registers[REGISTER_BYTE (PS_REGNUM)] = inferior_control_registers.sr;
  *(int *)&registers[REGISTER_BYTE (PC_REGNUM)] = inferior_control_registers.pc;
}

/* Store our register values back into the inferior.
   If REGNO is -1, do this for all registers.
   Otherwise, REGNO specifies which register (so we can save time).  */

void
store_inferior_registers (regno)
     int regno;
{
  struct ptrace_$data_regs_m68k inferior_registers;
  struct ptrace_$floating_regs_m68k inferior_fp_registers;
  struct ptrace_$control_regs_m68k inferior_control_registers;
  extern char registers[];

  ptrace_$init_control(&inferior_control_registers);
  inferior_fp_registers.size = sizeof(inferior_fp_registers);

  ptrace (PTRACE_GETREGS, inferior_pid,
	(PTRACE_ARG3_TYPE) &inferior_fp_registers,
	ptrace_$floating_set_m68k,
	(PTRACE_ARG3_TYPE) &inferior_fp_registers,
	ptrace_$floating_set_m68k);

  ptrace (PTRACE_GETREGS, inferior_pid,
	(PTRACE_ARG3_TYPE) &inferior_control_registers,
	ptrace_$control_set_m68k,
	(PTRACE_ARG3_TYPE) &inferior_control_registers,
	ptrace_$control_set_m68k);

  bcopy (registers, &inferior_registers, sizeof(inferior_registers));

  bcopy (&registers[REGISTER_BYTE (FP0_REGNUM)], inferior_fp_registers.regs,
	 sizeof inferior_fp_registers.regs);

  inferior_control_registers.sr = *(int *)&registers[REGISTER_BYTE (PS_REGNUM)];
  inferior_control_registers.pc = *(int *)&registers[REGISTER_BYTE (PC_REGNUM)];

  ptrace (PTRACE_SETREGS, inferior_pid,
	  (PTRACE_ARG3_TYPE) &inferior_registers,
	  ptrace_$data_set_m68k,
	  (PTRACE_ARG3_TYPE) &inferior_registers,
	  ptrace_$data_set_m68k);

  ptrace (PTRACE_SETREGS, inferior_pid,
	  (PTRACE_ARG3_TYPE) &inferior_fp_registers,
	  ptrace_$floating_set_m68k,
	  (PTRACE_ARG3_TYPE) &inferior_fp_registers,
	  ptrace_$floating_set_m68k);

  ptrace (PTRACE_SETREGS, inferior_pid,
	  (PTRACE_ARG3_TYPE) &inferior_control_registers,
	  ptrace_$control_set_m68k,
	  (PTRACE_ARG3_TYPE) &inferior_control_registers,
	  ptrace_$control_set_m68k);
}
@
