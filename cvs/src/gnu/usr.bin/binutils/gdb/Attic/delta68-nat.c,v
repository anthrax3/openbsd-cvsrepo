head	1.4;
access;
symbols
	OPENBSD_3_6:1.3.0.2
	OPENBSD_3_6_BASE:1.3
	GDB_6_1:1.1.1.1
	FSF:1.1.1
	OPENBSD_3_5:1.2.0.32
	OPENBSD_3_5_BASE:1.2
	OPENBSD_3_4:1.2.0.30
	OPENBSD_3_4_BASE:1.2
	OPENBSD_3_3:1.2.0.28
	OPENBSD_3_3_BASE:1.2
	OPENBSD_3_2:1.2.0.26
	OPENBSD_3_2_BASE:1.2
	OPENBSD_3_1:1.2.0.24
	OPENBSD_3_1_BASE:1.2
	OPENBSD_3_0:1.2.0.22
	OPENBSD_3_0_BASE:1.2
	OPENBSD_2_9:1.2.0.20
	OPENBSD_2_9_BASE:1.2
	OPENBSD_2_8:1.2.0.18
	OPENBSD_2_8_BASE:1.2
	OPENBSD_2_7:1.2.0.16
	OPENBSD_2_7_BASE:1.2
	new-binutils:1.2.0.14
	OPENBSD_2_6:1.2.0.12
	OPENBSD_2_6_BASE:1.2
	OPENBSD_2_5:1.2.0.10
	OPENBSD_2_5_BASE:1.2
	OPENBSD_2_4:1.2.0.8
	OPENBSD_2_4_BASE:1.2
	OPENBSD_2_3:1.2.0.6
	OPENBSD_2_3_BASE:1.2
	OPENBSD_2_2:1.2.0.4
	OPENBSD_2_2_BASE:1.2
	OPENBSD_2_1:1.2.0.2
	OPENBSD_2_1_BASE:1.2
	CYGNUS-961112:1.1.2.1
	CYGNUS:1.1.0.2;
locks; strict;
comment	@ * @;


1.4
date	2004.12.27.14.00.34;	author kettenis;	state dead;
branches;
next	1.3;

1.3
date	2004.05.21.20.23.06;	author kettenis;	state Exp;
branches;
next	1.2;

1.2
date	96.11.23.03.37.09;	author niklas;	state Exp;
branches;
next	1.1;

1.1
date	96.11.19.14.17.21;	author niklas;	state dead;
branches
	1.1.1.1
	1.1.2.1;
next	;

1.1.1.1
date	2004.05.21.19.09.48;	author kettenis;	state Exp;
branches;
next	;

1.1.2.1
date	96.11.19.14.17.22;	author niklas;	state Exp;
branches;
next	;


desc
@@


1.4
log
@Resolve conflicts for GDB 6.3.  Add local patches.
ok deraadt@@
@
text
@/* Functions specific to running gdb native on a Motorola Delta Series sysV68.
   Copyright 1993, 1996, 1998, 2000 Free Software Foundation, Inc.

   This file is part of GDB.

   This program is free software; you can redistribute it and/or modify
   it under the terms of the GNU General Public License as published by
   the Free Software Foundation; either version 2 of the License, or
   (at your option) any later version.

   This program is distributed in the hope that it will be useful,
   but WITHOUT ANY WARRANTY; without even the implied warranty of
   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
   GNU General Public License for more details.

   You should have received a copy of the GNU General Public License
   along with this program; if not, write to the Free Software
   Foundation, Inc., 59 Temple Place - Suite 330,
   Boston, MA 02111-1307, USA.  */

#include "defs.h"
#include <sys/signal.h>		/* for MAXSIG in sys/user.h */
#include <sys/types.h>		/* for ushort in sys/dir.h */
#include <sys/dir.h>		/* for struct direct in sys/user.h */
#include <sys/user.h>

#include <nlist.h>

#if !defined (offsetof)
#define offsetof(TYPE, MEMBER) ((unsigned long) &((TYPE *)0)->MEMBER)
#endif

/* Return the address in the core dump or inferior of register REGNO.
   BLOCKEND is the address of the end of the user structure.  */

CORE_ADDR
register_addr (int regno, CORE_ADDR blockend)
{
  static int sysv68reg[] =
  {0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, -1, 15, 16};

  if (regno >= 0 && regno < sizeof (sysv68reg) / sizeof (sysv68reg[0]))
    return blockend + sysv68reg[regno] * 4;
  else if (regno < FPC_REGNUM)
    return offsetof (struct user, u_fpu.regs.reg[regno - FP0_REGNUM][0]);
  else if (regno == FPC_REGNUM)
    return offsetof (struct user, u_fpu.regs.control);
  else if (regno == FPS_REGNUM)
    return offsetof (struct user, u_fpu.regs.status);
  else if (regno == FPI_REGNUM)
    return offsetof (struct user, u_fpu.regs.iaddr);
  else
    {
      fprintf_unfiltered (gdb_stderr, "\
Internal error: invalid register number %d in REGISTER_U_ADDR\n",
			  regno);
      return blockend;
    }
}

CORE_ADDR kernel_u_addr;

/* Read the value of the u area from the kernel.  */
void
_initialize_delta68_nat (void)
{
  struct nlist nl[2];

  nl[0].n_name = "u";
  nl[1].n_name = NULL;
  if (nlist ("/sysV68", nl) == 0 && nl[0].n_scnum != 0)
    kernel_u_addr = nl[0].n_value;
  else
    {
      perror ("Cannot get kernel u area address");
      exit (1);
    }
}

clear_insn_cache (void)
{
#ifdef MCT_TEXT			/* in sys/signal.h on sysV68 R3V7.1 */
  memctl (0, 4096, MCT_TEXT);
#endif
}

kernel_u_size (void)
{
  return sizeof (struct user);
}
@


1.3
log
@Resolve conflicts for GDB 6.1.  Add local patches.
ok deraadt@@
@
text
@@


1.2
log
@Merge to Cygnus 961112 + add some support (not ready) for shared libs
@
text
@d2 1
a2 1
   Copyright (C) 1993, Free Software Foundation, Inc.
d4 1
a4 1
This file is part of GDB.
d6 14
a19 13
This program is free software; you can redistribute it and/or modify
it under the terms of the GNU General Public License as published by
the Free Software Foundation; either version 2 of the License, or
(at your option) any later version.

This program is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
GNU General Public License for more details.

You should have received a copy of the GNU General Public License
along with this program; if not, write to the Free Software
Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA 02111-1307, USA.  */
d22 3
a24 3
#include <sys/signal.h>	/* for MAXSIG in sys/user.h */
#include <sys/types.h>	/* for ushort in sys/dir.h */
#include <sys/dir.h>	/* for struct direct in sys/user.h */
d37 1
a37 3
register_addr (regno, blockend)
     int	regno;
     CORE_ADDR	blockend;
d39 2
a40 2
  static int	sysv68reg[] =
    { 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, -1, 15, 16 };
d42 2
a43 2
  if (regno >= 0 && regno < sizeof(sysv68reg) / sizeof(sysv68reg[0]))
    return blockend + sysv68reg[regno] * 4; 
d56 1
a56 1
	       regno);
d65 1
a65 1
_initialize_delta68_nat ()
d78 12
@


1.1
log
@file delta68-nat.c was initially added on branch CYGNUS.
@
text
@d1 79
@


1.1.1.1
log
@GDB 6.1 (excluding .info files)
@
text
@a0 90
/* Functions specific to running gdb native on a Motorola Delta Series sysV68.
   Copyright 1993, 1996, 1998, 2000 Free Software Foundation, Inc.

   This file is part of GDB.

   This program is free software; you can redistribute it and/or modify
   it under the terms of the GNU General Public License as published by
   the Free Software Foundation; either version 2 of the License, or
   (at your option) any later version.

   This program is distributed in the hope that it will be useful,
   but WITHOUT ANY WARRANTY; without even the implied warranty of
   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
   GNU General Public License for more details.

   You should have received a copy of the GNU General Public License
   along with this program; if not, write to the Free Software
   Foundation, Inc., 59 Temple Place - Suite 330,
   Boston, MA 02111-1307, USA.  */

#include "defs.h"
#include <sys/signal.h>		/* for MAXSIG in sys/user.h */
#include <sys/types.h>		/* for ushort in sys/dir.h */
#include <sys/dir.h>		/* for struct direct in sys/user.h */
#include <sys/user.h>

#include <nlist.h>

#if !defined (offsetof)
#define offsetof(TYPE, MEMBER) ((unsigned long) &((TYPE *)0)->MEMBER)
#endif

/* Return the address in the core dump or inferior of register REGNO.
   BLOCKEND is the address of the end of the user structure.  */

CORE_ADDR
register_addr (int regno, CORE_ADDR blockend)
{
  static int sysv68reg[] =
  {0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, -1, 15, 16};

  if (regno >= 0 && regno < sizeof (sysv68reg) / sizeof (sysv68reg[0]))
    return blockend + sysv68reg[regno] * 4;
  else if (regno < FPC_REGNUM)
    return offsetof (struct user, u_fpu.regs.reg[regno - FP0_REGNUM][0]);
  else if (regno == FPC_REGNUM)
    return offsetof (struct user, u_fpu.regs.control);
  else if (regno == FPS_REGNUM)
    return offsetof (struct user, u_fpu.regs.status);
  else if (regno == FPI_REGNUM)
    return offsetof (struct user, u_fpu.regs.iaddr);
  else
    {
      fprintf_unfiltered (gdb_stderr, "\
Internal error: invalid register number %d in REGISTER_U_ADDR\n",
			  regno);
      return blockend;
    }
}

CORE_ADDR kernel_u_addr;

/* Read the value of the u area from the kernel.  */
void
_initialize_delta68_nat (void)
{
  struct nlist nl[2];

  nl[0].n_name = "u";
  nl[1].n_name = NULL;
  if (nlist ("/sysV68", nl) == 0 && nl[0].n_scnum != 0)
    kernel_u_addr = nl[0].n_value;
  else
    {
      perror ("Cannot get kernel u area address");
      exit (1);
    }
}

clear_insn_cache (void)
{
#ifdef MCT_TEXT			/* in sys/signal.h on sysV68 R3V7.1 */
  memctl (0, 4096, MCT_TEXT);
#endif
}

kernel_u_size (void)
{
  return sizeof (struct user);
}
@


1.1.2.1
log
@Import of 961112 Cygnus binutils+gas+ld+gdb+gprof
@
text
@a0 79
/* Functions specific to running gdb native on a Motorola Delta Series sysV68.
   Copyright (C) 1993, Free Software Foundation, Inc.

This file is part of GDB.

This program is free software; you can redistribute it and/or modify
it under the terms of the GNU General Public License as published by
the Free Software Foundation; either version 2 of the License, or
(at your option) any later version.

This program is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
GNU General Public License for more details.

You should have received a copy of the GNU General Public License
along with this program; if not, write to the Free Software
Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA 02111-1307, USA.  */

#include "defs.h"
#include <sys/signal.h>	/* for MAXSIG in sys/user.h */
#include <sys/types.h>	/* for ushort in sys/dir.h */
#include <sys/dir.h>	/* for struct direct in sys/user.h */
#include <sys/user.h>

#include <nlist.h>

#if !defined (offsetof)
#define offsetof(TYPE, MEMBER) ((unsigned long) &((TYPE *)0)->MEMBER)
#endif

/* Return the address in the core dump or inferior of register REGNO.
   BLOCKEND is the address of the end of the user structure.  */

CORE_ADDR
register_addr (regno, blockend)
     int	regno;
     CORE_ADDR	blockend;
{
  static int	sysv68reg[] =
    { 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, -1, 15, 16 };

  if (regno >= 0 && regno < sizeof(sysv68reg) / sizeof(sysv68reg[0]))
    return blockend + sysv68reg[regno] * 4; 
  else if (regno < FPC_REGNUM)
    return offsetof (struct user, u_fpu.regs.reg[regno - FP0_REGNUM][0]);
  else if (regno == FPC_REGNUM)
    return offsetof (struct user, u_fpu.regs.control);
  else if (regno == FPS_REGNUM)
    return offsetof (struct user, u_fpu.regs.status);
  else if (regno == FPI_REGNUM)
    return offsetof (struct user, u_fpu.regs.iaddr);
  else
    {
      fprintf_unfiltered (gdb_stderr, "\
Internal error: invalid register number %d in REGISTER_U_ADDR\n",
	       regno);
      return blockend;
    }
}

CORE_ADDR kernel_u_addr;

/* Read the value of the u area from the kernel.  */
void
_initialize_delta68_nat ()
{
  struct nlist nl[2];

  nl[0].n_name = "u";
  nl[1].n_name = NULL;
  if (nlist ("/sysV68", nl) == 0 && nl[0].n_scnum != 0)
    kernel_u_addr = nl[0].n_value;
  else
    {
      perror ("Cannot get kernel u area address");
      exit (1);
    }
}
@
