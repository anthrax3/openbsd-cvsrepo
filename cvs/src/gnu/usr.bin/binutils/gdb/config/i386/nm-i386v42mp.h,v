head	1.1;
branch	1.1.1;
access;
symbols
	OPENBSD_6_2_BASE:1.1.1.2
	OPENBSD_6_1:1.1.1.2.0.52
	OPENBSD_6_1_BASE:1.1.1.2
	OPENBSD_6_0:1.1.1.2.0.48
	OPENBSD_6_0_BASE:1.1.1.2
	OPENBSD_5_9:1.1.1.2.0.44
	OPENBSD_5_9_BASE:1.1.1.2
	OPENBSD_5_8:1.1.1.2.0.46
	OPENBSD_5_8_BASE:1.1.1.2
	OPENBSD_5_7:1.1.1.2.0.38
	OPENBSD_5_7_BASE:1.1.1.2
	OPENBSD_5_6:1.1.1.2.0.42
	OPENBSD_5_6_BASE:1.1.1.2
	OPENBSD_5_5:1.1.1.2.0.40
	OPENBSD_5_5_BASE:1.1.1.2
	OPENBSD_5_4:1.1.1.2.0.36
	OPENBSD_5_4_BASE:1.1.1.2
	OPENBSD_5_3:1.1.1.2.0.34
	OPENBSD_5_3_BASE:1.1.1.2
	OPENBSD_5_2:1.1.1.2.0.32
	OPENBSD_5_2_BASE:1.1.1.2
	OPENBSD_5_1_BASE:1.1.1.2
	OPENBSD_5_1:1.1.1.2.0.30
	OPENBSD_5_0:1.1.1.2.0.28
	OPENBSD_5_0_BASE:1.1.1.2
	OPENBSD_4_9:1.1.1.2.0.26
	OPENBSD_4_9_BASE:1.1.1.2
	OPENBSD_4_8:1.1.1.2.0.24
	OPENBSD_4_8_BASE:1.1.1.2
	OPENBSD_4_7:1.1.1.2.0.20
	OPENBSD_4_7_BASE:1.1.1.2
	OPENBSD_4_6:1.1.1.2.0.22
	OPENBSD_4_6_BASE:1.1.1.2
	OPENBSD_4_5:1.1.1.2.0.18
	OPENBSD_4_5_BASE:1.1.1.2
	OPENBSD_4_4:1.1.1.2.0.16
	OPENBSD_4_4_BASE:1.1.1.2
	OPENBSD_4_3:1.1.1.2.0.14
	OPENBSD_4_3_BASE:1.1.1.2
	OPENBSD_4_2:1.1.1.2.0.12
	OPENBSD_4_2_BASE:1.1.1.2
	OPENBSD_4_1:1.1.1.2.0.10
	OPENBSD_4_1_BASE:1.1.1.2
	OPENBSD_4_0:1.1.1.2.0.8
	OPENBSD_4_0_BASE:1.1.1.2
	OPENBSD_3_9:1.1.1.2.0.6
	OPENBSD_3_9_BASE:1.1.1.2
	OPENBSD_3_8:1.1.1.2.0.4
	OPENBSD_3_8_BASE:1.1.1.2
	OPENBSD_3_7:1.1.1.2.0.2
	OPENBSD_3_7_BASE:1.1.1.2
	GDB_6_3:1.1.1.2
	OPENBSD_3_6:1.1.1.1.0.2
	OPENBSD_3_6_BASE:1.1.1.1
	GDB_6_1:1.1.1.1
	FSF:1.1.1;
locks; strict;
comment	@ * @;


1.1
date	2004.05.21.19.15.27;	author kettenis;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	2004.05.21.19.15.27;	author kettenis;	state Exp;
branches;
next	1.1.1.2;

1.1.1.2
date	2004.12.27.13.13.39;	author kettenis;	state Exp;
branches;
next	;


desc
@@


1.1
log
@Initial revision
@
text
@/* Native support for i386 running SVR4.
   Copyright 1986, 1987, 1989, 1992, 1996, 1997, 1998
   Free Software Foundation, Inc.
   Changes for 80386 by Pace Willisson (pace@@prep.ai.mit.edu), July 1988.

   This file is part of GDB.

   This program is free software; you can redistribute it and/or modify
   it under the terms of the GNU General Public License as published by
   the Free Software Foundation; either version 2 of the License, or
   (at your option) any later version.

   This program is distributed in the hope that it will be useful,
   but WITHOUT ANY WARRANTY; without even the implied warranty of
   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
   GNU General Public License for more details.

   You should have received a copy of the GNU General Public License
   along with this program; if not, write to the Free Software
   Foundation, Inc., 59 Temple Place - Suite 330,
   Boston, MA 02111-1307, USA.  */

#ifndef NM_I386V42MP_H
#define NM_I386V42MP_H

#include "config/nm-sysv4.h"

/* define to select for other sysv4.2mp weirdness (see procfs.c) */

#define UNIXWARE

#if 0
/* The following macros extract process and lwp/thread ids from a
   composite id.

   For consistency with UnixWare core files, allocate bits 0-15 for
   process ids and bits 16 and up for lwp ids.  Reserve bit 31 for
   negative return values to indicate exceptions, and use bit 30 as a
   flag to indicate a user-mode thread, leaving 14 bits for lwp
   ids. */

/* Number of bits in composite id allocated to process number. */
#define PIDBITS 16

/* Return the process id stored in composite PID. */
#define PIDGET(PID)             (((PID) & ((1 << PIDBITS) - 1)))

/* Return the thread or lwp id stored in composite PID. */
#define TIDGET(PID)             (((PID) & 0x3fffffff) >> PIDBITS)
#define LIDGET(PID)             TIDGET(PID)

/* Construct a composite id from lwp LID and the process portion of
   composite PID. */
#define MERGEPID(PID, LID)      (PIDGET(PID) | ((LID) << PIDBITS))
#define MKLID(PID, LID)         MERGEPID(PID, LID)

/* Construct a composite id from thread TID and the process portion of
   composite PID. */
#define MKTID(PID, TID)         (MERGEPID(PID, TID) | 0x40000000)

/* Return whether PID contains a user-space thread id. */
#define ISTID(PID)              ((PID) & 0x40000000)
#endif

/* New definitions of the ptid stuff.  Due to the way the
   code is structured in uw-thread.c, I'm overloading the thread id
   and lwp id onto the lwp field.  The tid field is used to indicate
   whether the lwp is a tid or not.  
   
   FIXME: Check that core file support is not broken.  (See original
   #if 0'd comments above.)
   FIXME: Restructure uw-thread.c so that the struct ptid fields
   can be used as intended. */

/* Return the process id stored in composite PID. */
#define PIDGET(PID) (ptid_get_pid (PID))

/* Return the thread or lwp id stored in composite PID. */
#define TIDGET(PID) (ptid_get_lwp (PID))
#define LIDGET(PID) TIDGET(PID)

#define MERGEPID(PID, LID) (ptid_build ((PID), (LID), 0))
#define MKLID(PID, LID) (ptid_build ((PID), (LID), 0))

/* Construct a composite id from thread TID and the process portion of
   composite PID. */
#define MKTID(PID, TID) (ptid_build ((PID), (TID), 1))

/* Return whether PID contains a user-space thread id. */
#define ISTID(PID) (ptid_get_tid (PID))

#endif /* NM_I386V42MP_H */
@


1.1.1.1
log
@GDB 6.1 (excluding .info files)
@
text
@@


1.1.1.2
log
@GDB 6.3 (excluding .info files)
@
text
@a91 4
/* This is the amount to subtract from u.u_ar0
   to get the offset in the core file of the register values.  */
#define KERNEL_U_ADDR 0xe0000000

@

