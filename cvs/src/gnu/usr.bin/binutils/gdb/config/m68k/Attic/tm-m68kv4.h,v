head	1.4;
access;
symbols
	OPENBSD_3_6:1.3.0.2
	OPENBSD_3_6_BASE:1.3
	GDB_6_1:1.1.1.1
	FSF:1.1.1
	OPENBSD_3_5:1.2.0.32
	OPENBSD_3_5_BASE:1.2
	OPENBSD_3_4:1.2.0.30
	OPENBSD_3_4_BASE:1.2
	OPENBSD_3_3:1.2.0.28
	OPENBSD_3_3_BASE:1.2
	OPENBSD_3_2:1.2.0.26
	OPENBSD_3_2_BASE:1.2
	OPENBSD_3_1:1.2.0.24
	OPENBSD_3_1_BASE:1.2
	OPENBSD_3_0:1.2.0.22
	OPENBSD_3_0_BASE:1.2
	OPENBSD_2_9:1.2.0.20
	OPENBSD_2_9_BASE:1.2
	OPENBSD_2_8:1.2.0.18
	OPENBSD_2_8_BASE:1.2
	OPENBSD_2_7:1.2.0.16
	OPENBSD_2_7_BASE:1.2
	new-binutils:1.2.0.14
	OPENBSD_2_6:1.2.0.12
	OPENBSD_2_6_BASE:1.2
	OPENBSD_2_5:1.2.0.10
	OPENBSD_2_5_BASE:1.2
	OPENBSD_2_4:1.2.0.8
	OPENBSD_2_4_BASE:1.2
	OPENBSD_2_3:1.2.0.6
	OPENBSD_2_3_BASE:1.2
	OPENBSD_2_2:1.2.0.4
	OPENBSD_2_2_BASE:1.2
	OPENBSD_2_1:1.2.0.2
	OPENBSD_2_1_BASE:1.2
	CYGNUS-961112:1.1.2.1
	CYGNUS:1.1.0.2;
locks; strict;
comment	@ * @;


1.4
date	2004.12.27.14.00.48;	author kettenis;	state dead;
branches;
next	1.3;

1.3
date	2004.05.21.20.23.21;	author kettenis;	state Exp;
branches;
next	1.2;

1.2
date	96.11.23.03.42.59;	author niklas;	state Exp;
branches;
next	1.1;

1.1
date	96.11.19.14.25.12;	author niklas;	state dead;
branches
	1.1.1.1
	1.1.2.1;
next	;

1.1.1.1
date	2004.05.21.19.15.29;	author kettenis;	state Exp;
branches;
next	;

1.1.2.1
date	96.11.19.14.25.12;	author niklas;	state Exp;
branches;
next	;


desc
@@


1.4
log
@Resolve conflicts for GDB 6.3.  Add local patches.
ok deraadt@@
@
text
@// OBSOLETE /* Target definitions for GDB on a Motorola 680x0 running SVR4.
// OBSOLETE    (Commodore Amiga with amix or Atari TT with ASV)
// OBSOLETE    Copyright 1991, 1994, 1995, 1996, 1998, 1999, 2000, 2003
// OBSOLETE    Free Software Foundation, Inc.
// OBSOLETE    Written by Fred Fish at Cygnus Support (fnf@@cygint)
// OBSOLETE 
// OBSOLETE    This file is part of GDB.
// OBSOLETE 
// OBSOLETE    This program is free software; you can redistribute it and/or modify
// OBSOLETE    it under the terms of the GNU General Public License as published by
// OBSOLETE    the Free Software Foundation; either version 2 of the License, or
// OBSOLETE    (at your option) any later version.
// OBSOLETE 
// OBSOLETE    This program is distributed in the hope that it will be useful,
// OBSOLETE    but WITHOUT ANY WARRANTY; without even the implied warranty of
// OBSOLETE    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// OBSOLETE    GNU General Public License for more details.
// OBSOLETE 
// OBSOLETE    You should have received a copy of the GNU General Public License
// OBSOLETE    along with this program; if not, write to the Free Software
// OBSOLETE    Foundation, Inc., 59 Temple Place - Suite 330,
// OBSOLETE    Boston, MA 02111-1307, USA.  */
// OBSOLETE 
// OBSOLETE /* Define BPT_VECTOR if it is different than the default.
// OBSOLETE    This is the vector number used by traps to indicate a breakpoint. */
// OBSOLETE 
// OBSOLETE #define BPT_VECTOR 0x1
// OBSOLETE 
// OBSOLETE /* How much to decrement the PC after a trap.  Depends on kernel. */
// OBSOLETE 
// OBSOLETE #define DECR_PC_AFTER_BREAK 0	/* No decrement required */
// OBSOLETE 
// OBSOLETE #include "config/tm-sysv4.h"
// OBSOLETE #include "m68k/tm-m68k.h"
// OBSOLETE 
// OBSOLETE /* Offsets (in target ints) into jmp_buf.  Not defined in any system header
// OBSOLETE    file, so we have to step through setjmp/longjmp with a debugger and figure
// OBSOLETE    them out.  As a double check, note that <setjmp> defines _JBLEN as 13,
// OBSOLETE    which matches the number of elements we see saved by setjmp(). */
// OBSOLETE 
// OBSOLETE #define JB_ELEMENT_SIZE sizeof(int)	/* jmp_buf[_JBLEN] is array of ints */
// OBSOLETE 
// OBSOLETE #define JB_D2	0
// OBSOLETE #define JB_D3	1
// OBSOLETE #define JB_D4	2
// OBSOLETE #define JB_D5	3
// OBSOLETE #define JB_D6	4
// OBSOLETE #define JB_D7	5
// OBSOLETE #define JB_A1	6
// OBSOLETE #define JB_A2	7
// OBSOLETE #define JB_A3	8
// OBSOLETE #define JB_A4	9
// OBSOLETE #define JB_A5	10
// OBSOLETE #define JB_A6	11
// OBSOLETE #define JB_A7	12
// OBSOLETE 
// OBSOLETE #define JB_PC	JB_A1		/* Setjmp()'s return PC saved in A1 */
// OBSOLETE 
// OBSOLETE /* Figure out where the longjmp will land.  Slurp the args out of the stack.
// OBSOLETE    We expect the first arg to be a pointer to the jmp_buf structure from which
// OBSOLETE    we extract the pc (JB_PC) that we will land at.  The pc is copied into ADDR.
// OBSOLETE    This routine returns true on success */
// OBSOLETE 
// OBSOLETE #define GET_LONGJMP_TARGET(ADDR) m68k_get_longjmp_target(ADDR)
// OBSOLETE 
// OBSOLETE /* Convert a DWARF register number to a gdb REGNUM.  */
// OBSOLETE #define DWARF_REG_TO_REGNUM(num) ((num) < 16 ? (num) : (num)+FP0_REGNUM-16)
@


1.3
log
@Resolve conflicts for GDB 6.1.  Add local patches.
ok deraadt@@
@
text
@@


1.2
log
@Merge to Cygnus 961112 + add some support (not ready) for shared libs
@
text
@d1 67
a67 70
/* Target definitions for GDB on a Motorola 680x0 running SVR4.
   (Commodore Amiga with amix or Atari TT with ASV)
   Copyright (C) 1991, 1995 Free Software Foundation, Inc.
   Written by Fred Fish at Cygnus Support (fnf@@cygint)

This file is part of GDB.

This program is free software; you can redistribute it and/or modify
it under the terms of the GNU General Public License as published by
the Free Software Foundation; either version 2 of the License, or
(at your option) any later version.

This program is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
GNU General Public License for more details.

You should have received a copy of the GNU General Public License
along with this program; if not, write to the Free Software
Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA 02111-1307, USA.  */

/* Define BPT_VECTOR if it is different than the default.
   This is the vector number used by traps to indicate a breakpoint. */

#define BPT_VECTOR 0x1

/* How much to decrement the PC after a trap.  Depends on kernel. */

#define DECR_PC_AFTER_BREAK 0		/* No decrement required */

/* Use the alternate method of determining valid frame chains. */

#define FRAME_CHAIN_VALID_ALTERNATE

#include "tm-sysv4.h"
#include "m68k/tm-m68k.h"

/* Offsets (in target ints) into jmp_buf.  Not defined in any system header
   file, so we have to step through setjmp/longjmp with a debugger and figure
   them out.  As a double check, note that <setjmp> defines _JBLEN as 13,
   which matches the number of elements we see saved by setjmp(). */

#define JB_ELEMENT_SIZE sizeof(int)	/* jmp_buf[_JBLEN] is array of ints */

#define JB_D2	0
#define JB_D3	1
#define JB_D4	2
#define JB_D5	3
#define JB_D6	4
#define JB_D7	5
#define JB_A1	6
#define JB_A2	7
#define JB_A3	8
#define JB_A4	9
#define JB_A5	10
#define JB_A6	11
#define JB_A7	12

#define JB_PC	JB_A1	/* Setjmp()'s return PC saved in A1 */

/* Figure out where the longjmp will land.  Slurp the args out of the stack.
   We expect the first arg to be a pointer to the jmp_buf structure from which
   we extract the pc (JB_PC) that we will land at.  The pc is copied into ADDR.
   This routine returns true on success */

#define GET_LONGJMP_TARGET(ADDR) get_longjmp_target(ADDR)
extern int get_longjmp_target PARAMS ((CORE_ADDR *));

/* Convert a DWARF register number to a gdb REGNUM.  */
#define DWARF_REG_TO_REGNUM(num) ((num) < 16 ? (num) : (num)+FP0_REGNUM-16)
@


1.1
log
@file tm-m68kv4.h was initially added on branch CYGNUS.
@
text
@d1 70
@


1.1.1.1
log
@GDB 6.1 (excluding .info files)
@
text
@a0 67
// OBSOLETE /* Target definitions for GDB on a Motorola 680x0 running SVR4.
// OBSOLETE    (Commodore Amiga with amix or Atari TT with ASV)
// OBSOLETE    Copyright 1991, 1994, 1995, 1996, 1998, 1999, 2000, 2003
// OBSOLETE    Free Software Foundation, Inc.
// OBSOLETE    Written by Fred Fish at Cygnus Support (fnf@@cygint)
// OBSOLETE 
// OBSOLETE    This file is part of GDB.
// OBSOLETE 
// OBSOLETE    This program is free software; you can redistribute it and/or modify
// OBSOLETE    it under the terms of the GNU General Public License as published by
// OBSOLETE    the Free Software Foundation; either version 2 of the License, or
// OBSOLETE    (at your option) any later version.
// OBSOLETE 
// OBSOLETE    This program is distributed in the hope that it will be useful,
// OBSOLETE    but WITHOUT ANY WARRANTY; without even the implied warranty of
// OBSOLETE    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// OBSOLETE    GNU General Public License for more details.
// OBSOLETE 
// OBSOLETE    You should have received a copy of the GNU General Public License
// OBSOLETE    along with this program; if not, write to the Free Software
// OBSOLETE    Foundation, Inc., 59 Temple Place - Suite 330,
// OBSOLETE    Boston, MA 02111-1307, USA.  */
// OBSOLETE 
// OBSOLETE /* Define BPT_VECTOR if it is different than the default.
// OBSOLETE    This is the vector number used by traps to indicate a breakpoint. */
// OBSOLETE 
// OBSOLETE #define BPT_VECTOR 0x1
// OBSOLETE 
// OBSOLETE /* How much to decrement the PC after a trap.  Depends on kernel. */
// OBSOLETE 
// OBSOLETE #define DECR_PC_AFTER_BREAK 0	/* No decrement required */
// OBSOLETE 
// OBSOLETE #include "config/tm-sysv4.h"
// OBSOLETE #include "m68k/tm-m68k.h"
// OBSOLETE 
// OBSOLETE /* Offsets (in target ints) into jmp_buf.  Not defined in any system header
// OBSOLETE    file, so we have to step through setjmp/longjmp with a debugger and figure
// OBSOLETE    them out.  As a double check, note that <setjmp> defines _JBLEN as 13,
// OBSOLETE    which matches the number of elements we see saved by setjmp(). */
// OBSOLETE 
// OBSOLETE #define JB_ELEMENT_SIZE sizeof(int)	/* jmp_buf[_JBLEN] is array of ints */
// OBSOLETE 
// OBSOLETE #define JB_D2	0
// OBSOLETE #define JB_D3	1
// OBSOLETE #define JB_D4	2
// OBSOLETE #define JB_D5	3
// OBSOLETE #define JB_D6	4
// OBSOLETE #define JB_D7	5
// OBSOLETE #define JB_A1	6
// OBSOLETE #define JB_A2	7
// OBSOLETE #define JB_A3	8
// OBSOLETE #define JB_A4	9
// OBSOLETE #define JB_A5	10
// OBSOLETE #define JB_A6	11
// OBSOLETE #define JB_A7	12
// OBSOLETE 
// OBSOLETE #define JB_PC	JB_A1		/* Setjmp()'s return PC saved in A1 */
// OBSOLETE 
// OBSOLETE /* Figure out where the longjmp will land.  Slurp the args out of the stack.
// OBSOLETE    We expect the first arg to be a pointer to the jmp_buf structure from which
// OBSOLETE    we extract the pc (JB_PC) that we will land at.  The pc is copied into ADDR.
// OBSOLETE    This routine returns true on success */
// OBSOLETE 
// OBSOLETE #define GET_LONGJMP_TARGET(ADDR) m68k_get_longjmp_target(ADDR)
// OBSOLETE 
// OBSOLETE /* Convert a DWARF register number to a gdb REGNUM.  */
// OBSOLETE #define DWARF_REG_TO_REGNUM(num) ((num) < 16 ? (num) : (num)+FP0_REGNUM-16)
@


1.1.2.1
log
@Import of 961112 Cygnus binutils+gas+ld+gdb+gprof
@
text
@a0 70
/* Target definitions for GDB on a Motorola 680x0 running SVR4.
   (Commodore Amiga with amix or Atari TT with ASV)
   Copyright (C) 1991, 1995 Free Software Foundation, Inc.
   Written by Fred Fish at Cygnus Support (fnf@@cygint)

This file is part of GDB.

This program is free software; you can redistribute it and/or modify
it under the terms of the GNU General Public License as published by
the Free Software Foundation; either version 2 of the License, or
(at your option) any later version.

This program is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
GNU General Public License for more details.

You should have received a copy of the GNU General Public License
along with this program; if not, write to the Free Software
Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA 02111-1307, USA.  */

/* Define BPT_VECTOR if it is different than the default.
   This is the vector number used by traps to indicate a breakpoint. */

#define BPT_VECTOR 0x1

/* How much to decrement the PC after a trap.  Depends on kernel. */

#define DECR_PC_AFTER_BREAK 0		/* No decrement required */

/* Use the alternate method of determining valid frame chains. */

#define FRAME_CHAIN_VALID_ALTERNATE

#include "tm-sysv4.h"
#include "m68k/tm-m68k.h"

/* Offsets (in target ints) into jmp_buf.  Not defined in any system header
   file, so we have to step through setjmp/longjmp with a debugger and figure
   them out.  As a double check, note that <setjmp> defines _JBLEN as 13,
   which matches the number of elements we see saved by setjmp(). */

#define JB_ELEMENT_SIZE sizeof(int)	/* jmp_buf[_JBLEN] is array of ints */

#define JB_D2	0
#define JB_D3	1
#define JB_D4	2
#define JB_D5	3
#define JB_D6	4
#define JB_D7	5
#define JB_A1	6
#define JB_A2	7
#define JB_A3	8
#define JB_A4	9
#define JB_A5	10
#define JB_A6	11
#define JB_A7	12

#define JB_PC	JB_A1	/* Setjmp()'s return PC saved in A1 */

/* Figure out where the longjmp will land.  Slurp the args out of the stack.
   We expect the first arg to be a pointer to the jmp_buf structure from which
   we extract the pc (JB_PC) that we will land at.  The pc is copied into ADDR.
   This routine returns true on success */

#define GET_LONGJMP_TARGET(ADDR) get_longjmp_target(ADDR)
extern int get_longjmp_target PARAMS ((CORE_ADDR *));

/* Convert a DWARF register number to a gdb REGNUM.  */
#define DWARF_REG_TO_REGNUM(num) ((num) < 16 ? (num) : (num)+FP0_REGNUM-16)
@
