head	1.4;
access;
symbols
	OPENBSD_3_6:1.3.0.2
	OPENBSD_3_6_BASE:1.3
	GDB_6_1:1.1.1.1
	FSF:1.1.1
	OPENBSD_3_5:1.2.0.32
	OPENBSD_3_5_BASE:1.2
	OPENBSD_3_4:1.2.0.30
	OPENBSD_3_4_BASE:1.2
	OPENBSD_3_3:1.2.0.28
	OPENBSD_3_3_BASE:1.2
	OPENBSD_3_2:1.2.0.26
	OPENBSD_3_2_BASE:1.2
	OPENBSD_3_1:1.2.0.24
	OPENBSD_3_1_BASE:1.2
	OPENBSD_3_0:1.2.0.22
	OPENBSD_3_0_BASE:1.2
	OPENBSD_2_9:1.2.0.20
	OPENBSD_2_9_BASE:1.2
	OPENBSD_2_8:1.2.0.18
	OPENBSD_2_8_BASE:1.2
	OPENBSD_2_7:1.2.0.16
	OPENBSD_2_7_BASE:1.2
	new-binutils:1.2.0.14
	OPENBSD_2_6:1.2.0.12
	OPENBSD_2_6_BASE:1.2
	OPENBSD_2_5:1.2.0.10
	OPENBSD_2_5_BASE:1.2
	OPENBSD_2_4:1.2.0.8
	OPENBSD_2_4_BASE:1.2
	OPENBSD_2_3:1.2.0.6
	OPENBSD_2_3_BASE:1.2
	OPENBSD_2_2:1.2.0.4
	OPENBSD_2_2_BASE:1.2
	OPENBSD_2_1:1.2.0.2
	OPENBSD_2_1_BASE:1.2
	CYGNUS-961112:1.1.2.1
	CYGNUS:1.1.0.2;
locks; strict;
comment	@ * @;


1.4
date	2004.12.27.14.00.48;	author kettenis;	state dead;
branches;
next	1.3;

1.3
date	2004.05.21.20.23.21;	author kettenis;	state Exp;
branches;
next	1.2;

1.2
date	96.11.23.03.43.06;	author niklas;	state Exp;
branches;
next	1.1;

1.1
date	96.11.19.14.25.22;	author niklas;	state dead;
branches
	1.1.1.1
	1.1.2.1;
next	;

1.1.1.1
date	2004.05.21.19.15.30;	author kettenis;	state Exp;
branches;
next	;

1.1.2.1
date	96.11.19.14.25.23;	author niklas;	state Exp;
branches;
next	;


desc
@@


1.4
log
@Resolve conflicts for GDB 6.3.  Add local patches.
ok deraadt@@
@
text
@// OBSOLETE /* Parameters for execution on a 3b1.
// OBSOLETE    Copyright 1986, 1987, 1989, 1999 Free Software Foundation, Inc.
// OBSOLETE 
// OBSOLETE    This file is part of GDB.
// OBSOLETE 
// OBSOLETE    This program is free software; you can redistribute it and/or modify
// OBSOLETE    it under the terms of the GNU General Public License as published by
// OBSOLETE    the Free Software Foundation; either version 2 of the License, or
// OBSOLETE    (at your option) any later version.
// OBSOLETE 
// OBSOLETE    This program is distributed in the hope that it will be useful,
// OBSOLETE    but WITHOUT ANY WARRANTY; without even the implied warranty of
// OBSOLETE    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// OBSOLETE    GNU General Public License for more details.
// OBSOLETE 
// OBSOLETE    You should have received a copy of the GNU General Public License
// OBSOLETE    along with this program; if not, write to the Free Software
// OBSOLETE    Foundation, Inc., 59 Temple Place - Suite 330,
// OBSOLETE    Boston, MA 02111-1307, USA.  */
// OBSOLETE 
// OBSOLETE #define HAVE_TERMIO
// OBSOLETE #define USG
// OBSOLETE 
// OBSOLETE /* This is the amount to subtract from u.u_ar0
// OBSOLETE    to get the offset in the core file of the register values.  */
// OBSOLETE 
// OBSOLETE #define KERNEL_U_ADDR 0x70000
// OBSOLETE 
// OBSOLETE #define REGISTER_U_ADDR(addr, blockend, regno)		\
// OBSOLETE { addr = blockend + regno * 4; }
// OBSOLETE 
// OBSOLETE /* Interface definitions for kernel debugger KDB.  */
// OBSOLETE 
// OBSOLETE /* Map machine fault codes into signal numbers.
// OBSOLETE    First subtract 0, divide by 4, then index in a table.
// OBSOLETE    Faults for which the entry in this table is 0
// OBSOLETE    are not handled by KDB; the program's own trap handler
// OBSOLETE    gets to handle then.  */
// OBSOLETE 
// OBSOLETE #define FAULT_CODE_ORIGIN 0
// OBSOLETE #define FAULT_CODE_UNITS 4
// OBSOLETE #define FAULT_TABLE    \
// OBSOLETE { 0, 0, 0, 0, SIGTRAP, 0, 0, 0, \
// OBSOLETE   0, SIGTRAP, 0, 0, 0, 0, 0, SIGKILL, \
// OBSOLETE   0, 0, 0, 0, 0, 0, 0, 0, \
// OBSOLETE   SIGILL }
// OBSOLETE 
// OBSOLETE /* Start running with a stack stretching from BEG to END.
// OBSOLETE    BEG and END should be symbols meaningful to the assembler.
// OBSOLETE    This is used only for kdb.  */
// OBSOLETE 
// OBSOLETE #define INIT_STACK(beg, end)  \
// OBSOLETE { asm (".globl end");         \
// OBSOLETE   asm ("movel $ end, sp");      \
// OBSOLETE   asm ("clrl fp"); }
// OBSOLETE 
// OBSOLETE /* Push the frame pointer register on the stack.  */
// OBSOLETE #define PUSH_FRAME_PTR        \
// OBSOLETE   asm ("movel fp, -(sp)");
// OBSOLETE 
// OBSOLETE /* Copy the top-of-stack to the frame pointer register.  */
// OBSOLETE #define POP_FRAME_PTR  \
// OBSOLETE   asm ("movl (sp), fp");
// OBSOLETE 
// OBSOLETE /* After KDB is entered by a fault, push all registers
// OBSOLETE    that GDB thinks about (all NUM_REGS of them),
// OBSOLETE    so that they appear in order of ascending GDB register number.
// OBSOLETE    The fault code will be on the stack beyond the last register.  */
// OBSOLETE 
// OBSOLETE #define PUSH_REGISTERS        \
// OBSOLETE { asm ("clrw -(sp)");	      \
// OBSOLETE   asm ("pea 10(sp)");	      \
// OBSOLETE   asm ("movem $ 0xfffe,-(sp)"); }
// OBSOLETE 
// OBSOLETE /* Assuming the registers (including processor status) have been
// OBSOLETE    pushed on the stack in order of ascending GDB register number,
// OBSOLETE    restore them and return to the address in the saved PC register.  */
// OBSOLETE 
// OBSOLETE #define POP_REGISTERS          \
// OBSOLETE { asm ("subil $8,28(sp)");     \
// OBSOLETE   asm ("movem (sp),$ 0xffff"); \
// OBSOLETE   asm ("rte"); }
@


1.3
log
@Resolve conflicts for GDB 6.1.  Add local patches.
ok deraadt@@
@
text
@@


1.2
log
@Merge to Cygnus 961112 + add some support (not ready) for shared libs
@
text
@d1 82
a82 85
/* Parameters for execution on a 3b1.
   Copyright (C) 1986, 1987, 1989 Free Software Foundation, Inc.

This file is part of GDB.

This program is free software; you can redistribute it and/or modify
it under the terms of the GNU General Public License as published by
the Free Software Foundation; either version 2 of the License, or
(at your option) any later version.

This program is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
GNU General Public License for more details.

You should have received a copy of the GNU General Public License
along with this program; if not, write to the Free Software
Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA 02111-1307, USA.  */

#define HOST_BYTE_ORDER BIG_ENDIAN

#define HAVE_TERMIO
#define USG

/* This is the amount to subtract from u.u_ar0
   to get the offset in the core file of the register values.  */

#define KERNEL_U_ADDR 0x70000

#define REGISTER_U_ADDR(addr, blockend, regno)		\
{ addr = blockend + regno * 4; }

/* Interface definitions for kernel debugger KDB.  */

/* Map machine fault codes into signal numbers.
   First subtract 0, divide by 4, then index in a table.
   Faults for which the entry in this table is 0
   are not handled by KDB; the program's own trap handler
   gets to handle then.  */

#define FAULT_CODE_ORIGIN 0
#define FAULT_CODE_UNITS 4
#define FAULT_TABLE    \
{ 0, 0, 0, 0, SIGTRAP, 0, 0, 0, \
  0, SIGTRAP, 0, 0, 0, 0, 0, SIGKILL, \
  0, 0, 0, 0, 0, 0, 0, 0, \
  SIGILL }

/* Start running with a stack stretching from BEG to END.
   BEG and END should be symbols meaningful to the assembler.
   This is used only for kdb.  */

#define INIT_STACK(beg, end)  \
{ asm (".globl end");         \
  asm ("movel $ end, sp");      \
  asm ("clrl fp"); }

/* Push the frame pointer register on the stack.  */
#define PUSH_FRAME_PTR        \
  asm ("movel fp, -(sp)");

/* Copy the top-of-stack to the frame pointer register.  */
#define POP_FRAME_PTR  \
  asm ("movl (sp), fp");

/* After KDB is entered by a fault, push all registers
   that GDB thinks about (all NUM_REGS of them),
   so that they appear in order of ascending GDB register number.
   The fault code will be on the stack beyond the last register.  */

#define PUSH_REGISTERS        \
{ asm ("clrw -(sp)");	      \
  asm ("pea 10(sp)");	      \
  asm ("movem $ 0xfffe,-(sp)"); }

/* Assuming the registers (including processor status) have been
   pushed on the stack in order of ascending GDB register number,
   restore them and return to the address in the saved PC register.  */

#define POP_REGISTERS          \
{ asm ("subil $8,28(sp)");     \
  asm ("movem (sp),$ 0xffff"); \
  asm ("rte"); }

#endif
@


1.1
log
@file xm-3b1.h was initially added on branch CYGNUS.
@
text
@d1 85
@


1.1.1.1
log
@GDB 6.1 (excluding .info files)
@
text
@a0 82
// OBSOLETE /* Parameters for execution on a 3b1.
// OBSOLETE    Copyright 1986, 1987, 1989, 1999 Free Software Foundation, Inc.
// OBSOLETE 
// OBSOLETE    This file is part of GDB.
// OBSOLETE 
// OBSOLETE    This program is free software; you can redistribute it and/or modify
// OBSOLETE    it under the terms of the GNU General Public License as published by
// OBSOLETE    the Free Software Foundation; either version 2 of the License, or
// OBSOLETE    (at your option) any later version.
// OBSOLETE 
// OBSOLETE    This program is distributed in the hope that it will be useful,
// OBSOLETE    but WITHOUT ANY WARRANTY; without even the implied warranty of
// OBSOLETE    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// OBSOLETE    GNU General Public License for more details.
// OBSOLETE 
// OBSOLETE    You should have received a copy of the GNU General Public License
// OBSOLETE    along with this program; if not, write to the Free Software
// OBSOLETE    Foundation, Inc., 59 Temple Place - Suite 330,
// OBSOLETE    Boston, MA 02111-1307, USA.  */
// OBSOLETE 
// OBSOLETE #define HAVE_TERMIO
// OBSOLETE #define USG
// OBSOLETE 
// OBSOLETE /* This is the amount to subtract from u.u_ar0
// OBSOLETE    to get the offset in the core file of the register values.  */
// OBSOLETE 
// OBSOLETE #define KERNEL_U_ADDR 0x70000
// OBSOLETE 
// OBSOLETE #define REGISTER_U_ADDR(addr, blockend, regno)		\
// OBSOLETE { addr = blockend + regno * 4; }
// OBSOLETE 
// OBSOLETE /* Interface definitions for kernel debugger KDB.  */
// OBSOLETE 
// OBSOLETE /* Map machine fault codes into signal numbers.
// OBSOLETE    First subtract 0, divide by 4, then index in a table.
// OBSOLETE    Faults for which the entry in this table is 0
// OBSOLETE    are not handled by KDB; the program's own trap handler
// OBSOLETE    gets to handle then.  */
// OBSOLETE 
// OBSOLETE #define FAULT_CODE_ORIGIN 0
// OBSOLETE #define FAULT_CODE_UNITS 4
// OBSOLETE #define FAULT_TABLE    \
// OBSOLETE { 0, 0, 0, 0, SIGTRAP, 0, 0, 0, \
// OBSOLETE   0, SIGTRAP, 0, 0, 0, 0, 0, SIGKILL, \
// OBSOLETE   0, 0, 0, 0, 0, 0, 0, 0, \
// OBSOLETE   SIGILL }
// OBSOLETE 
// OBSOLETE /* Start running with a stack stretching from BEG to END.
// OBSOLETE    BEG and END should be symbols meaningful to the assembler.
// OBSOLETE    This is used only for kdb.  */
// OBSOLETE 
// OBSOLETE #define INIT_STACK(beg, end)  \
// OBSOLETE { asm (".globl end");         \
// OBSOLETE   asm ("movel $ end, sp");      \
// OBSOLETE   asm ("clrl fp"); }
// OBSOLETE 
// OBSOLETE /* Push the frame pointer register on the stack.  */
// OBSOLETE #define PUSH_FRAME_PTR        \
// OBSOLETE   asm ("movel fp, -(sp)");
// OBSOLETE 
// OBSOLETE /* Copy the top-of-stack to the frame pointer register.  */
// OBSOLETE #define POP_FRAME_PTR  \
// OBSOLETE   asm ("movl (sp), fp");
// OBSOLETE 
// OBSOLETE /* After KDB is entered by a fault, push all registers
// OBSOLETE    that GDB thinks about (all NUM_REGS of them),
// OBSOLETE    so that they appear in order of ascending GDB register number.
// OBSOLETE    The fault code will be on the stack beyond the last register.  */
// OBSOLETE 
// OBSOLETE #define PUSH_REGISTERS        \
// OBSOLETE { asm ("clrw -(sp)");	      \
// OBSOLETE   asm ("pea 10(sp)");	      \
// OBSOLETE   asm ("movem $ 0xfffe,-(sp)"); }
// OBSOLETE 
// OBSOLETE /* Assuming the registers (including processor status) have been
// OBSOLETE    pushed on the stack in order of ascending GDB register number,
// OBSOLETE    restore them and return to the address in the saved PC register.  */
// OBSOLETE 
// OBSOLETE #define POP_REGISTERS          \
// OBSOLETE { asm ("subil $8,28(sp)");     \
// OBSOLETE   asm ("movem (sp),$ 0xffff"); \
// OBSOLETE   asm ("rte"); }
@


1.1.2.1
log
@Import of 961112 Cygnus binutils+gas+ld+gdb+gprof
@
text
@a0 85
/* Parameters for execution on a 3b1.
   Copyright (C) 1986, 1987, 1989 Free Software Foundation, Inc.

This file is part of GDB.

This program is free software; you can redistribute it and/or modify
it under the terms of the GNU General Public License as published by
the Free Software Foundation; either version 2 of the License, or
(at your option) any later version.

This program is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
GNU General Public License for more details.

You should have received a copy of the GNU General Public License
along with this program; if not, write to the Free Software
Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA 02111-1307, USA.  */

#define HOST_BYTE_ORDER BIG_ENDIAN

#define HAVE_TERMIO
#define USG

/* This is the amount to subtract from u.u_ar0
   to get the offset in the core file of the register values.  */

#define KERNEL_U_ADDR 0x70000

#define REGISTER_U_ADDR(addr, blockend, regno)		\
{ addr = blockend + regno * 4; }

/* Interface definitions for kernel debugger KDB.  */

/* Map machine fault codes into signal numbers.
   First subtract 0, divide by 4, then index in a table.
   Faults for which the entry in this table is 0
   are not handled by KDB; the program's own trap handler
   gets to handle then.  */

#define FAULT_CODE_ORIGIN 0
#define FAULT_CODE_UNITS 4
#define FAULT_TABLE    \
{ 0, 0, 0, 0, SIGTRAP, 0, 0, 0, \
  0, SIGTRAP, 0, 0, 0, 0, 0, SIGKILL, \
  0, 0, 0, 0, 0, 0, 0, 0, \
  SIGILL }

/* Start running with a stack stretching from BEG to END.
   BEG and END should be symbols meaningful to the assembler.
   This is used only for kdb.  */

#define INIT_STACK(beg, end)  \
{ asm (".globl end");         \
  asm ("movel $ end, sp");      \
  asm ("clrl fp"); }

/* Push the frame pointer register on the stack.  */
#define PUSH_FRAME_PTR        \
  asm ("movel fp, -(sp)");

/* Copy the top-of-stack to the frame pointer register.  */
#define POP_FRAME_PTR  \
  asm ("movl (sp), fp");

/* After KDB is entered by a fault, push all registers
   that GDB thinks about (all NUM_REGS of them),
   so that they appear in order of ascending GDB register number.
   The fault code will be on the stack beyond the last register.  */

#define PUSH_REGISTERS        \
{ asm ("clrw -(sp)");	      \
  asm ("pea 10(sp)");	      \
  asm ("movem $ 0xfffe,-(sp)"); }

/* Assuming the registers (including processor status) have been
   pushed on the stack in order of ascending GDB register number,
   restore them and return to the address in the saved PC register.  */

#define POP_REGISTERS          \
{ asm ("subil $8,28(sp)");     \
  asm ("movem (sp),$ 0xffff"); \
  asm ("rte"); }

#endif
@
