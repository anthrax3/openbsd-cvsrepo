head	1.5;
access;
symbols
	OPENBSD_6_2_BASE:1.5
	OPENBSD_6_1:1.5.0.52
	OPENBSD_6_1_BASE:1.5
	OPENBSD_6_0:1.5.0.48
	OPENBSD_6_0_BASE:1.5
	OPENBSD_5_9:1.5.0.44
	OPENBSD_5_9_BASE:1.5
	OPENBSD_5_8:1.5.0.46
	OPENBSD_5_8_BASE:1.5
	OPENBSD_5_7:1.5.0.38
	OPENBSD_5_7_BASE:1.5
	OPENBSD_5_6:1.5.0.42
	OPENBSD_5_6_BASE:1.5
	OPENBSD_5_5:1.5.0.40
	OPENBSD_5_5_BASE:1.5
	OPENBSD_5_4:1.5.0.36
	OPENBSD_5_4_BASE:1.5
	OPENBSD_5_3:1.5.0.34
	OPENBSD_5_3_BASE:1.5
	OPENBSD_5_2:1.5.0.32
	OPENBSD_5_2_BASE:1.5
	OPENBSD_5_1_BASE:1.5
	OPENBSD_5_1:1.5.0.30
	OPENBSD_5_0:1.5.0.28
	OPENBSD_5_0_BASE:1.5
	OPENBSD_4_9:1.5.0.26
	OPENBSD_4_9_BASE:1.5
	OPENBSD_4_8:1.5.0.24
	OPENBSD_4_8_BASE:1.5
	OPENBSD_4_7:1.5.0.20
	OPENBSD_4_7_BASE:1.5
	OPENBSD_4_6:1.5.0.22
	OPENBSD_4_6_BASE:1.5
	OPENBSD_4_5:1.5.0.18
	OPENBSD_4_5_BASE:1.5
	OPENBSD_4_4:1.5.0.16
	OPENBSD_4_4_BASE:1.5
	OPENBSD_4_3:1.5.0.14
	OPENBSD_4_3_BASE:1.5
	OPENBSD_4_2:1.5.0.12
	OPENBSD_4_2_BASE:1.5
	OPENBSD_4_1:1.5.0.10
	OPENBSD_4_1_BASE:1.5
	OPENBSD_4_0:1.5.0.8
	OPENBSD_4_0_BASE:1.5
	OPENBSD_3_9:1.5.0.6
	OPENBSD_3_9_BASE:1.5
	OPENBSD_3_8:1.5.0.4
	OPENBSD_3_8_BASE:1.5
	OPENBSD_3_7:1.5.0.2
	OPENBSD_3_7_BASE:1.5
	BINUTILS_2_15:1.1.1.5
	OPENBSD_3_6:1.4.0.2
	OPENBSD_3_6_BASE:1.4
	BINUTILS-2_14:1.1.1.4
	OPENBSD_3_5:1.3.0.8
	OPENBSD_3_5_BASE:1.3
	OPENBSD_3_4:1.3.0.6
	OPENBSD_3_4_BASE:1.3
	OPENBSD_3_3:1.3.0.4
	OPENBSD_3_3_BASE:1.3
	OPENBSD_3_2:1.3.0.2
	OPENBSD_3_2_BASE:1.3
	binutils-2_11_2:1.1.1.3
	OPENBSD_3_1:1.2.0.8
	OPENBSD_3_1_BASE:1.2
	OPENBSD_3_0:1.2.0.6
	OPENBSD_3_0_BASE:1.2
	BINUTILS-2_10_1:1.1.1.2
	OPENBSD_2_9:1.2.0.4
	OPENBSD_2_9_BASE:1.2
	OPENBSD_2_8:1.2.0.2
	OPENBSD_2_8_BASE:1.2
	BINUTILS-2_10:1.1.1.2
	OPENBSD_2_7:1.1.0.18
	OPENBSD_2_7_BASE:1.1
	new-binutils:1.1.0.16
	OPENBSD_2_6:1.1.0.14
	OPENBSD_2_6_BASE:1.1
	OPENBSD_2_5:1.1.0.12
	OPENBSD_2_5_BASE:1.1
	OPENBSD_2_4:1.1.0.10
	OPENBSD_2_4_BASE:1.1
	OPENBSD_2_3:1.1.0.8
	OPENBSD_2_3_BASE:1.1
	OPENBSD_2_2:1.1.0.6
	OPENBSD_2_2_BASE:1.1
	BINUTILS-2_8_1:1.1.1.1
	OPENBSD_2_1:1.1.0.4
	OPENBSD_2_1_BASE:1.1
	CYGNUS-961112:1.1.1.1
	OPENBSD_2_0:1.1.0.2
	OPENBSD_2_0_BASE:1.1
	CYGNUS-960904:1.1.1.1
	CYGNUS-960609:1.1.1.1
	CYGNUS-960607:1.1.1.1
	CYGNUS:1.1.1
	FSF_2_6:1.1.1.1
	FSF:1.1.1;
locks; strict;
comment	@ * @;


1.5
date	2004.11.02.20.45.45;	author miod;	state Exp;
branches;
next	1.4;

1.4
date	2004.05.17.21.54.49;	author drahn;	state Exp;
branches;
next	1.3;

1.3
date	2002.05.13.17.07.41;	author fgsch;	state Exp;
branches;
next	1.2;

1.2
date	2000.09.12.19.12.40;	author espie;	state Exp;
branches;
next	1.1;

1.1
date	96.01.08.11.08.36;	author niklas;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	96.01.08.11.08.36;	author niklas;	state Exp;
branches;
next	1.1.1.2;

1.1.1.2
date	2000.09.12.14.47.47;	author espie;	state Exp;
branches;
next	1.1.1.3;

1.1.1.3
date	2002.05.13.13.54.37;	author fgsch;	state Exp;
branches;
next	1.1.1.4;

1.1.1.4
date	2004.05.17.20.42.39;	author drahn;	state Exp;
branches;
next	1.1.1.5;

1.1.1.5
date	2004.11.02.20.23.05;	author miod;	state Exp;
branches;
next	;


desc
@@


1.5
log
@Merge conflicts, bringing our changes back in:
- extra $(SHELL) and sugar for make (so that files not mode +x still work)
- safer temp file handling
- our W^X binary layout changes in ld
- OpenBSD policy for library file selection in ld
- arm and m88k changes which were not merged in time for official 2.15
- bfd core file handling
- a couple typos

New for 2.15:
- ld(1) and as(1) manpages now generated at build time
- binutils/stabs.c reverted to use our in-tree libiberty for now
- we still use our VIA C3 crypto code over stock binutils, as it recognizes
  more instructions
- new emulations for OpenBSD on mips64 machines, to help OpenBSD/sgi
- relaxed %f# handling in gas on OpenBSD/sparc64 (same as was in 2.14)

Tested on all platforms by various people; special thanks to sturm@@ and
otto@@.
@
text
@/* ppc.h -- Header file for PowerPC opcode table
   Copyright 1994, 1995, 1999, 2000, 2001, 2002, 2003, 2004
   Free Software Foundation, Inc.
   Written by Ian Lance Taylor, Cygnus Support

This file is part of GDB, GAS, and the GNU binutils.

GDB, GAS, and the GNU binutils are free software; you can redistribute
them and/or modify them under the terms of the GNU General Public
License as published by the Free Software Foundation; either version
1, or (at your option) any later version.

GDB, GAS, and the GNU binutils are distributed in the hope that they
will be useful, but WITHOUT ANY WARRANTY; without even the implied
warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See
the GNU General Public License for more details.

You should have received a copy of the GNU General Public License
along with this file; see the file COPYING.  If not, write to the Free
Software Foundation, 59 Temple Place - Suite 330, Boston, MA 02111-1307, USA.  */

#ifndef PPC_H
#define PPC_H

/* The opcode table is an array of struct powerpc_opcode.  */

struct powerpc_opcode
{
  /* The opcode name.  */
  const char *name;

  /* The opcode itself.  Those bits which will be filled in with
     operands are zeroes.  */
  unsigned long opcode;

  /* The opcode mask.  This is used by the disassembler.  This is a
     mask containing ones indicating those bits which must match the
     opcode field, and zeroes indicating those bits which need not
     match (and are presumably filled in by operands).  */
  unsigned long mask;

  /* One bit flags for the opcode.  These are used to indicate which
     specific processors support the instructions.  The defined values
     are listed below.  */
  unsigned long flags;

  /* An array of operand codes.  Each code is an index into the
     operand table.  They appear in the order which the operands must
     appear in assembly code, and are terminated by a zero.  */
  unsigned char operands[8];
};

/* The table itself is sorted by major opcode number, and is otherwise
   in the order in which the disassembler should consider
   instructions.  */
extern const struct powerpc_opcode powerpc_opcodes[];
extern const int powerpc_num_opcodes;

/* Values defined for the flags field of a struct powerpc_opcode.  */

/* Opcode is defined for the PowerPC architecture.  */
#define PPC_OPCODE_PPC			 1

/* Opcode is defined for the POWER (RS/6000) architecture.  */
#define PPC_OPCODE_POWER		 2

/* Opcode is defined for the POWER2 (Rios 2) architecture.  */
#define PPC_OPCODE_POWER2		 4

/* Opcode is only defined on 32 bit architectures.  */
#define PPC_OPCODE_32			 8

/* Opcode is only defined on 64 bit architectures.  */
#define PPC_OPCODE_64		      0x10

/* Opcode is supported by the Motorola PowerPC 601 processor.  The 601
   is assumed to support all PowerPC (PPC_OPCODE_PPC) instructions,
   but it also supports many additional POWER instructions.  */
#define PPC_OPCODE_601		      0x20

/* Opcode is supported in both the Power and PowerPC architectures
   (ie, compiler's -mcpu=common or assembler's -mcom).  */
#define PPC_OPCODE_COMMON	      0x40

/* Opcode is supported for any Power or PowerPC platform (this is
   for the assembler's -many option, and it eliminates duplicates).  */
#define PPC_OPCODE_ANY		      0x80

/* Opcode is supported as part of the 64-bit bridge.  */
#define PPC_OPCODE_64_BRIDGE	     0x100

/* Opcode is supported by Altivec Vector Unit */
#define PPC_OPCODE_ALTIVEC	     0x200

/* Opcode is supported by PowerPC 403 processor.  */
#define PPC_OPCODE_403		     0x400

/* Opcode is supported by PowerPC BookE processor.  */
#define PPC_OPCODE_BOOKE	     0x800

/* Opcode is only supported by 64-bit PowerPC BookE processor.  */
#define PPC_OPCODE_BOOKE64	    0x1000

/* Opcode is supported by PowerPC 440 processor.  */
#define PPC_OPCODE_440		    0x2000

/* Opcode is only supported by Power4 architecture.  */
#define PPC_OPCODE_POWER4	    0x4000

/* Opcode isn't supported by Power4 architecture.  */
#define PPC_OPCODE_NOPOWER4	    0x8000

/* Opcode is only supported by POWERPC Classic architecture.  */
#define PPC_OPCODE_CLASSIC	   0x10000

/* Opcode is only supported by e500x2 Core.  */
#define PPC_OPCODE_SPE		   0x20000

/* Opcode is supported by e500x2 Integer select APU.  */
#define PPC_OPCODE_ISEL		   0x40000

/* Opcode is an e500 SPE floating point instruction.  */
#define PPC_OPCODE_EFS		   0x80000

/* Opcode is supported by branch locking APU.  */
#define PPC_OPCODE_BRLOCK	  0x100000

/* Opcode is supported by performance monitor APU.  */
#define PPC_OPCODE_PMR		  0x200000

/* Opcode is supported by cache locking APU.  */
#define PPC_OPCODE_CACHELCK	  0x400000

/* Opcode is supported by machine check APU.  */
#define PPC_OPCODE_RFMCI	  0x800000

/* A macro to extract the major opcode from an instruction.  */
#define PPC_OP(i) (((i) >> 26) & 0x3f)

/* The operands table is an array of struct powerpc_operand.  */

struct powerpc_operand
{
  /* The number of bits in the operand.  */
  int bits;

  /* How far the operand is left shifted in the instruction.  */
  int shift;

  /* Insertion function.  This is used by the assembler.  To insert an
     operand value into an instruction, check this field.

     If it is NULL, execute
	 i |= (op & ((1 << o->bits) - 1)) << o->shift;
     (i is the instruction which we are filling in, o is a pointer to
     this structure, and op is the opcode value; this assumes twos
     complement arithmetic).

     If this field is not NULL, then simply call it with the
     instruction and the operand value.  It will return the new value
     of the instruction.  If the ERRMSG argument is not NULL, then if
     the operand value is illegal, *ERRMSG will be set to a warning
     string (the operand will be inserted in any case).  If the
     operand value is legal, *ERRMSG will be unchanged (most operands
     can accept any value).  */
  unsigned long (*insert)
    (unsigned long instruction, long op, int dialect, const char **errmsg);

  /* Extraction function.  This is used by the disassembler.  To
     extract this operand type from an instruction, check this field.

     If it is NULL, compute
	 op = ((i) >> o->shift) & ((1 << o->bits) - 1);
	 if ((o->flags & PPC_OPERAND_SIGNED) != 0
	     && (op & (1 << (o->bits - 1))) != 0)
	   op -= 1 << o->bits;
     (i is the instruction, o is a pointer to this structure, and op
     is the result; this assumes twos complement arithmetic).

     If this field is not NULL, then simply call it with the
     instruction value.  It will return the value of the operand.  If
     the INVALID argument is not NULL, *INVALID will be set to
     non-zero if this operand type can not actually be extracted from
     this operand (i.e., the instruction does not match).  If the
     operand is valid, *INVALID will not be changed.  */
  long (*extract) (unsigned long instruction, int dialect, int *invalid);

  /* One bit syntax flags.  */
  unsigned long flags;
};

/* Elements in the table are retrieved by indexing with values from
   the operands field of the powerpc_opcodes table.  */

extern const struct powerpc_operand powerpc_operands[];

/* Values defined for the flags field of a struct powerpc_operand.  */

/* This operand takes signed values.  */
#define PPC_OPERAND_SIGNED (01)

/* This operand takes signed values, but also accepts a full positive
   range of values when running in 32 bit mode.  That is, if bits is
   16, it takes any value from -0x8000 to 0xffff.  In 64 bit mode,
   this flag is ignored.  */
#define PPC_OPERAND_SIGNOPT (02)

/* This operand does not actually exist in the assembler input.  This
   is used to support extended mnemonics such as mr, for which two
   operands fields are identical.  The assembler should call the
   insert function with any op value.  The disassembler should call
   the extract function, ignore the return value, and check the value
   placed in the valid argument.  */
#define PPC_OPERAND_FAKE (04)

/* The next operand should be wrapped in parentheses rather than
   separated from this one by a comma.  This is used for the load and
   store instructions which want their operands to look like
       reg,displacement(reg)
   */
#define PPC_OPERAND_PARENS (010)

/* This operand may use the symbolic names for the CR fields, which
   are
       lt  0	gt  1	eq  2	so  3	un  3
       cr0 0	cr1 1	cr2 2	cr3 3
       cr4 4	cr5 5	cr6 6	cr7 7
   These may be combined arithmetically, as in cr2*4+gt.  These are
   only supported on the PowerPC, not the POWER.  */
#define PPC_OPERAND_CR (020)

/* This operand names a register.  The disassembler uses this to print
   register names with a leading 'r'.  */
#define PPC_OPERAND_GPR (040)

/* Like PPC_OPERAND_GPR, but don't print a leading 'r' for r0.  */
#define PPC_OPERAND_GPR_0 (0100)

/* This operand names a floating point register.  The disassembler
   prints these with a leading 'f'.  */
#define PPC_OPERAND_FPR (0200)

/* This operand is a relative branch displacement.  The disassembler
   prints these symbolically if possible.  */
#define PPC_OPERAND_RELATIVE (0400)

/* This operand is an absolute branch address.  The disassembler
   prints these symbolically if possible.  */
#define PPC_OPERAND_ABSOLUTE (01000)

/* This operand is optional, and is zero if omitted.  This is used for
   the optional BF and L fields in the comparison instructions.  The
   assembler must count the number of operands remaining on the line,
   and the number of operands remaining for the opcode, and decide
   whether this operand is present or not.  The disassembler should
   print this operand out only if it is not zero.  */
#define PPC_OPERAND_OPTIONAL (02000)

/* This flag is only used with PPC_OPERAND_OPTIONAL.  If this operand
   is omitted, then for the next operand use this operand value plus
   1, ignoring the next operand field for the opcode.  This wretched
   hack is needed because the Power rotate instructions can take
   either 4 or 5 operands.  The disassembler should print this operand
   out regardless of the PPC_OPERAND_OPTIONAL field.  */
#define PPC_OPERAND_NEXT (04000)

/* This operand should be regarded as a negative number for the
   purposes of overflow checking (i.e., the normal most negative
   number is disallowed and one more than the normal most positive
   number is allowed).  This flag will only be set for a signed
   operand.  */
#define PPC_OPERAND_NEGATIVE (010000)

/* This operand names a vector unit register.  The disassembler
   prints these with a leading 'v'.  */
#define PPC_OPERAND_VR (020000)

/* This operand is for the DS field in a DS form instruction.  */
#define PPC_OPERAND_DS (040000)

/* This operand is for the DQ field in a DQ form instruction.  */
#define PPC_OPERAND_DQ (0100000)

/* The POWER and PowerPC assemblers use a few macros.  We keep them
   with the operands table for simplicity.  The macro table is an
   array of struct powerpc_macro.  */

struct powerpc_macro
{
  /* The macro name.  */
  const char *name;

  /* The number of operands the macro takes.  */
  unsigned int operands;

  /* One bit flags for the opcode.  These are used to indicate which
     specific processors support the instructions.  The values are the
     same as those for the struct powerpc_opcode flags field.  */
  unsigned long flags;

  /* A format string to turn the macro into a normal instruction.
     Each %N in the string is replaced with operand number N (zero
     based).  */
  const char *format;
};

extern const struct powerpc_macro powerpc_macros[];
extern const int powerpc_num_macros;

#endif /* PPC_H */
@


1.4
log
@Resolve merge conflicts, adjust method of W^X handing (.sh files)
remove testsuites (not useable) remove mmalloc (not part of new binutils).
@
text
@d2 1
a2 1
   Copyright 1994, 1995, 1999, 2000, 2001, 2002
d62 1
a62 1
#define PPC_OPCODE_PPC (01)
d65 1
a65 1
#define PPC_OPCODE_POWER (02)
d68 1
a68 1
#define PPC_OPCODE_POWER2 (04)
d71 1
a71 1
#define PPC_OPCODE_32 (010)
d74 1
a74 1
#define PPC_OPCODE_64 (020)
d79 1
a79 1
#define PPC_OPCODE_601 (040)
d83 1
a83 1
#define PPC_OPCODE_COMMON (0100)
d87 1
a87 1
#define PPC_OPCODE_ANY (0200)
d90 1
a90 1
#define PPC_OPCODE_64_BRIDGE (0400)
d93 1
a93 1
#define PPC_OPCODE_ALTIVEC (01000)
d96 1
a96 1
#define PPC_OPCODE_403 (02000)
d99 1
a99 1
#define PPC_OPCODE_BOOKE (04000)
d102 4
a105 1
#define PPC_OPCODE_BOOKE64 (010000)
d108 1
a108 1
#define PPC_OPCODE_POWER4 (020000)
d111 1
a111 1
#define PPC_OPCODE_NOPOWER4 (040000)
d114 1
a114 1
#define PPC_OPCODE_CLASSIC (0100000)
d117 1
a117 1
#define PPC_OPCODE_SPE     (0200000)
d120 1
a120 1
#define PPC_OPCODE_ISEL     (0400000)
d123 1
a123 1
#define PPC_OPCODE_EFS      (01000000)
d126 1
a126 1
#define PPC_OPCODE_BRLOCK   (02000000)
d129 1
a129 1
#define PPC_OPCODE_PMR      (04000000)
d132 1
a132 1
#define PPC_OPCODE_CACHELCK (010000000)
d135 1
a135 1
#define PPC_OPCODE_RFMCI    (020000000)
d154 1
a154 1
         i |= (op & ((1 << o->bits) - 1)) << o->shift;
d166 2
a167 3
  unsigned long (*insert) PARAMS ((unsigned long instruction, long op,
				   int dialect,
				   const char **errmsg));
d173 1
a173 1
         op = ((i) >> o->shift) & ((1 << o->bits) - 1);
d186 1
a186 2
  long (*extract) PARAMS ((unsigned long instruction, int dialect,
			   int *invalid));
d236 3
d241 1
a241 1
#define PPC_OPERAND_FPR (0100)
d245 1
a245 1
#define PPC_OPERAND_RELATIVE (0200)
d249 1
a249 1
#define PPC_OPERAND_ABSOLUTE (0400)
d257 1
a257 1
#define PPC_OPERAND_OPTIONAL (01000)
d265 1
a265 1
#define PPC_OPERAND_NEXT (02000)
d272 1
a272 1
#define PPC_OPERAND_NEGATIVE (04000)
d276 1
a276 1
#define PPC_OPERAND_VR (010000)
d279 4
a282 1
#define PPC_OPERAND_DS (020000)
@


1.3
log
@resolve conflicts.
@
text
@d2 2
a3 1
   Copyright 1994, 1995, 1999, 2000 Free Software Foundation, Inc.
d93 40
a132 1
#define PPC_OPCODE_ALTIVEC   (01000)
d164 1
d184 2
a185 1
  long (*extract) PARAMS ((unsigned long instruction, int *invalid));
d274 2
@


1.2
log
@Help stupid cvs fixing basic conflicts.
@
text
@d2 1
a2 1
   Copyright 1994, 1995 Free Software Foundation, Inc.
d91 3
d227 5
@


1.1
log
@Initial revision
@
text
@d88 3
@


1.1.1.1
log
@Initial GNU binutils 2.6 import
@
text
@@


1.1.1.2
log
@Import binutils-2.10
- only the binutils package (no gdb here)
- don't import libiberty and texinfo, they are elsewhere
- remove all .info* generated files
@
text
@a87 3
/* Opcode is supported as part of the 64-bit bridge.  */
#define PPC_OPCODE_64_BRIDGE (0400)

@


1.1.1.3
log
@Import binutils-2.11.2
- only the binutils package (no gdb here)
- don't import libiberty and texinfo, they are elsewhere
- remove all .info* generated files
@
text
@d2 1
a2 1
   Copyright 1994, 1995, 1999, 2000 Free Software Foundation, Inc.
a90 3
/* Opcode is supported by Altivec Vector Unit */
#define PPC_OPCODE_ALTIVEC   (01000)

a223 5

/* This operand names a vector unit register.  The disassembler
   prints these with a leading 'v'.  */
#define PPC_OPERAND_VR (010000)

@


1.1.1.4
log
@import binutils 2.14 (excluding testsuites, .info files, and .po files)
@
text
@d2 1
a2 2
   Copyright 1994, 1995, 1999, 2000, 2001, 2002
   Free Software Foundation, Inc.
d92 1
a92 40
#define PPC_OPCODE_ALTIVEC (01000)

/* Opcode is supported by PowerPC 403 processor.  */
#define PPC_OPCODE_403 (02000)

/* Opcode is supported by PowerPC BookE processor.  */
#define PPC_OPCODE_BOOKE (04000)

/* Opcode is only supported by 64-bit PowerPC BookE processor.  */
#define PPC_OPCODE_BOOKE64 (010000)

/* Opcode is only supported by Power4 architecture.  */
#define PPC_OPCODE_POWER4 (020000)

/* Opcode isn't supported by Power4 architecture.  */
#define PPC_OPCODE_NOPOWER4 (040000)

/* Opcode is only supported by POWERPC Classic architecture.  */
#define PPC_OPCODE_CLASSIC (0100000)

/* Opcode is only supported by e500x2 Core.  */
#define PPC_OPCODE_SPE     (0200000)

/* Opcode is supported by e500x2 Integer select APU.  */
#define PPC_OPCODE_ISEL     (0400000)

/* Opcode is an e500 SPE floating point instruction.  */
#define PPC_OPCODE_EFS      (01000000)

/* Opcode is supported by branch locking APU.  */
#define PPC_OPCODE_BRLOCK   (02000000)

/* Opcode is supported by performance monitor APU.  */
#define PPC_OPCODE_PMR      (04000000)

/* Opcode is supported by cache locking APU.  */
#define PPC_OPCODE_CACHELCK (010000000)

/* Opcode is supported by machine check APU.  */
#define PPC_OPCODE_RFMCI    (020000000)
a123 1
				   int dialect,
d143 1
a143 2
  long (*extract) PARAMS ((unsigned long instruction, int dialect,
			   int *invalid));
a231 2
/* This operand is for the DS field in a DS form instruction.  */
#define PPC_OPERAND_DS (020000)
@


1.1.1.5
log
@Binutils 2.15, with testsuites removed, and without gdb and libiberty.
@
text
@d2 1
a2 1
   Copyright 1994, 1995, 1999, 2000, 2001, 2002, 2003, 2004
d62 1
a62 1
#define PPC_OPCODE_PPC			 1
d65 1
a65 1
#define PPC_OPCODE_POWER		 2
d68 1
a68 1
#define PPC_OPCODE_POWER2		 4
d71 1
a71 1
#define PPC_OPCODE_32			 8
d74 1
a74 1
#define PPC_OPCODE_64		      0x10
d79 1
a79 1
#define PPC_OPCODE_601		      0x20
d83 1
a83 1
#define PPC_OPCODE_COMMON	      0x40
d87 1
a87 1
#define PPC_OPCODE_ANY		      0x80
d90 1
a90 1
#define PPC_OPCODE_64_BRIDGE	     0x100
d93 1
a93 1
#define PPC_OPCODE_ALTIVEC	     0x200
d96 1
a96 1
#define PPC_OPCODE_403		     0x400
d99 1
a99 1
#define PPC_OPCODE_BOOKE	     0x800
d102 1
a102 4
#define PPC_OPCODE_BOOKE64	    0x1000

/* Opcode is supported by PowerPC 440 processor.  */
#define PPC_OPCODE_440		    0x2000
d105 1
a105 1
#define PPC_OPCODE_POWER4	    0x4000
d108 1
a108 1
#define PPC_OPCODE_NOPOWER4	    0x8000
d111 1
a111 1
#define PPC_OPCODE_CLASSIC	   0x10000
d114 1
a114 1
#define PPC_OPCODE_SPE		   0x20000
d117 1
a117 1
#define PPC_OPCODE_ISEL		   0x40000
d120 1
a120 1
#define PPC_OPCODE_EFS		   0x80000
d123 1
a123 1
#define PPC_OPCODE_BRLOCK	  0x100000
d126 1
a126 1
#define PPC_OPCODE_PMR		  0x200000
d129 1
a129 1
#define PPC_OPCODE_CACHELCK	  0x400000
d132 1
a132 1
#define PPC_OPCODE_RFMCI	  0x800000
d151 1
a151 1
	 i |= (op & ((1 << o->bits) - 1)) << o->shift;
d163 3
a165 2
  unsigned long (*insert)
    (unsigned long instruction, long op, int dialect, const char **errmsg);
d171 1
a171 1
	 op = ((i) >> o->shift) & ((1 << o->bits) - 1);
d184 2
a185 1
  long (*extract) (unsigned long instruction, int dialect, int *invalid);
a234 3
/* Like PPC_OPERAND_GPR, but don't print a leading 'r' for r0.  */
#define PPC_OPERAND_GPR_0 (0100)

d237 1
a237 1
#define PPC_OPERAND_FPR (0200)
d241 1
a241 1
#define PPC_OPERAND_RELATIVE (0400)
d245 1
a245 1
#define PPC_OPERAND_ABSOLUTE (01000)
d253 1
a253 1
#define PPC_OPERAND_OPTIONAL (02000)
d261 1
a261 1
#define PPC_OPERAND_NEXT (04000)
d268 1
a268 1
#define PPC_OPERAND_NEGATIVE (010000)
d272 1
a272 1
#define PPC_OPERAND_VR (020000)
d275 1
a275 4
#define PPC_OPERAND_DS (040000)

/* This operand is for the DQ field in a DQ form instruction.  */
#define PPC_OPERAND_DQ (0100000)
@


