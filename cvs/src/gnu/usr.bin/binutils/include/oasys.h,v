head	1.2;
access;
symbols
	OPENBSD_6_1:1.2.0.60
	OPENBSD_6_1_BASE:1.2
	OPENBSD_6_0:1.2.0.58
	OPENBSD_6_0_BASE:1.2
	OPENBSD_5_9:1.2.0.54
	OPENBSD_5_9_BASE:1.2
	OPENBSD_5_8:1.2.0.56
	OPENBSD_5_8_BASE:1.2
	OPENBSD_5_7:1.2.0.48
	OPENBSD_5_7_BASE:1.2
	OPENBSD_5_6:1.2.0.52
	OPENBSD_5_6_BASE:1.2
	OPENBSD_5_5:1.2.0.50
	OPENBSD_5_5_BASE:1.2
	OPENBSD_5_4:1.2.0.46
	OPENBSD_5_4_BASE:1.2
	OPENBSD_5_3:1.2.0.44
	OPENBSD_5_3_BASE:1.2
	OPENBSD_5_2:1.2.0.42
	OPENBSD_5_2_BASE:1.2
	OPENBSD_5_1_BASE:1.2
	OPENBSD_5_1:1.2.0.40
	OPENBSD_5_0:1.2.0.38
	OPENBSD_5_0_BASE:1.2
	OPENBSD_4_9:1.2.0.36
	OPENBSD_4_9_BASE:1.2
	OPENBSD_4_8:1.2.0.34
	OPENBSD_4_8_BASE:1.2
	OPENBSD_4_7:1.2.0.30
	OPENBSD_4_7_BASE:1.2
	OPENBSD_4_6:1.2.0.32
	OPENBSD_4_6_BASE:1.2
	OPENBSD_4_5:1.2.0.28
	OPENBSD_4_5_BASE:1.2
	OPENBSD_4_4:1.2.0.26
	OPENBSD_4_4_BASE:1.2
	OPENBSD_4_3:1.2.0.24
	OPENBSD_4_3_BASE:1.2
	OPENBSD_4_2:1.2.0.22
	OPENBSD_4_2_BASE:1.2
	OPENBSD_4_1:1.2.0.20
	OPENBSD_4_1_BASE:1.2
	OPENBSD_4_0:1.2.0.18
	OPENBSD_4_0_BASE:1.2
	OPENBSD_3_9:1.2.0.16
	OPENBSD_3_9_BASE:1.2
	OPENBSD_3_8:1.2.0.14
	OPENBSD_3_8_BASE:1.2
	OPENBSD_3_7:1.2.0.12
	OPENBSD_3_7_BASE:1.2
	BINUTILS_2_15:1.1.1.2
	OPENBSD_3_6:1.2.0.10
	OPENBSD_3_6_BASE:1.2
	BINUTILS-2_14:1.1.1.2
	OPENBSD_3_5:1.2.0.8
	OPENBSD_3_5_BASE:1.2
	OPENBSD_3_4:1.2.0.6
	OPENBSD_3_4_BASE:1.2
	OPENBSD_3_3:1.2.0.4
	OPENBSD_3_3_BASE:1.2
	OPENBSD_3_2:1.2.0.2
	OPENBSD_3_2_BASE:1.2
	binutils-2_11_2:1.1.1.2
	OPENBSD_3_1:1.1.0.26
	OPENBSD_3_1_BASE:1.1
	OPENBSD_3_0:1.1.0.24
	OPENBSD_3_0_BASE:1.1
	BINUTILS-2_10_1:1.1.1.1
	OPENBSD_2_9:1.1.0.22
	OPENBSD_2_9_BASE:1.1
	OPENBSD_2_8:1.1.0.20
	OPENBSD_2_8_BASE:1.1
	BINUTILS-2_10:1.1.1.1
	OPENBSD_2_7:1.1.0.18
	OPENBSD_2_7_BASE:1.1
	new-binutils:1.1.0.16
	OPENBSD_2_6:1.1.0.14
	OPENBSD_2_6_BASE:1.1
	OPENBSD_2_5:1.1.0.12
	OPENBSD_2_5_BASE:1.1
	OPENBSD_2_4:1.1.0.10
	OPENBSD_2_4_BASE:1.1
	OPENBSD_2_3:1.1.0.8
	OPENBSD_2_3_BASE:1.1
	OPENBSD_2_2:1.1.0.6
	OPENBSD_2_2_BASE:1.1
	BINUTILS-2_8_1:1.1.1.1
	OPENBSD_2_1:1.1.0.4
	OPENBSD_2_1_BASE:1.1
	CYGNUS-961112:1.1.1.1
	OPENBSD_2_0:1.1.0.2
	OPENBSD_2_0_BASE:1.1
	CYGNUS-960904:1.1.1.1
	CYGNUS-960609:1.1.1.1
	CYGNUS-960607:1.1.1.1
	CYGNUS:1.1.1
	FSF_2_6:1.1.1.1
	FSF:1.1.1;
locks; strict;
comment	@ * @;


1.2
date	2002.05.13.17.07.40;	author fgsch;	state Exp;
branches;
next	1.1;

1.1
date	96.01.08.11.08.12;	author niklas;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	96.01.08.11.08.12;	author niklas;	state Exp;
branches;
next	1.1.1.2;

1.1.1.2
date	2002.05.13.13.52.50;	author fgsch;	state Exp;
branches;
next	;


desc
@@


1.2
log
@resolve conflicts.
@
text
@/* Oasys object format header file for BFD.

   Copyright 2001 Free Software Foundation, Inc.
   
   This program is free software; you can redistribute it and/or modify
   it under the terms of the GNU General Public License as published by
   the Free Software Foundation; either version 2, or (at your option)
   any later version.

   This program is distributed in the hope that it will be useful,
   but WITHOUT ANY WARRANTY; without even the implied warranty of
   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
   GNU General Public License for more details.

   You should have received a copy of the GNU General Public License
   along with this program; if not, write to the Free Software
   Foundation, Inc., 59 Temple Place - Suite 330,
   Boston, MA 02111-1307, USA.
   
   Contributed by Cygnus Support.  */

#define OASYS_MAX_SEC_COUNT 16
/* **** */

typedef struct oasys_archive_header
  {
    unsigned int  version;
    char create_date[12];
    char revision_date[12];
    unsigned int mod_count;
    file_ptr mod_tbl_offset;
    unsigned int sym_tbl_size;
    unsigned int sym_count;
    file_ptr sym_tbl_offset;
    unsigned int xref_count;
    file_ptr xref_lst_offset;
  }
oasys_archive_header_type;

typedef struct oasys_extarchive_header
  {
    bfd_byte version[4];
    bfd_byte create_date[12];
    bfd_byte revision_date[12];
    bfd_byte mod_count[4];
    bfd_byte mod_tbl_offset[4];
    bfd_byte sym_tbl_size[4];
    bfd_byte sym_count[4];
    bfd_byte sym_tbl_offset[4];
    bfd_byte xref_count[4];
    bfd_byte xref_lst_offset[4];
  }
oasys_extarchive_header_type;

typedef struct oasys_module_table
  {
    int mod_number;
    char mod_date[12];
    unsigned int mod_size;
    unsigned int dep_count;
    unsigned int depee_count;
    file_ptr file_offset;
    unsigned int sect_count;
    char *module_name;
    unsigned int module_name_size;
  }
oasys_module_table_type;

typedef struct oasys_extmodule_table_a
  {
    bfd_byte mod_number[4];
    bfd_byte mod_date[12];
    bfd_byte mod_size[4];
    bfd_byte dep_count[4];
    bfd_byte depee_count[4];
    bfd_byte sect_count[4];
    bfd_byte file_offset[4];
    bfd_byte mod_name[32];
  }
oasys_extmodule_table_type_a_type;

typedef struct oasys_extmodule_table_b
  {
    bfd_byte mod_number[4];
    bfd_byte mod_date[12];
    bfd_byte mod_size[4];
    bfd_byte dep_count[4];
    bfd_byte depee_count[4];
    bfd_byte sect_count[4];
    bfd_byte file_offset[4];
    bfd_byte mod_name_length[4];
  }
oasys_extmodule_table_type_b_type;

typedef enum oasys_record
  {
    oasys_record_is_end_enum = 0,
    oasys_record_is_data_enum = 1,
    oasys_record_is_symbol_enum = 2,
    oasys_record_is_header_enum = 3,
    oasys_record_is_named_section_enum = 4,
    oasys_record_is_com_enum = 5,
    oasys_record_is_debug_enum = 6,
    oasys_record_is_section_enum = 7,
    oasys_record_is_debug_file_enum = 8,
    oasys_record_is_module_enum = 9,
    oasys_record_is_local_enum = 10
  }
oasys_record_enum_type;

typedef struct oasys_record_header
  {
    unsigned char length;
    unsigned char check_sum;
    unsigned char type;
    unsigned char fill;
  }
oasys_record_header_type;

typedef struct oasys_data_record
  {
    oasys_record_header_type header;
    unsigned char relb;
    bfd_byte addr[4];
    /* maximum total size of data record is 255 bytes */
    bfd_byte data[246];
  }
oasys_data_record_type;

typedef struct oasys_header_record
  {
    oasys_record_header_type header;
    unsigned char version_number;
    unsigned char rev_number;
    char module_name[26-6];
    char description[64-26];
  }
oasys_header_record_type;

#define OASYS_VERSION_NUMBER 0
#define OASYS_REV_NUMBER 0

typedef struct oasys_symbol_record
  {
    oasys_record_header_type header;
    unsigned char relb;
    bfd_byte value[4];
    bfd_byte refno[2];
    char name[64];
  }
oasys_symbol_record_type;

#define RELOCATION_PCREL_BIT 0x80
#define RELOCATION_32BIT_BIT 0x40
#define RELOCATION_TYPE_BITS 0x30
#define RELOCATION_TYPE_ABS 0x00
#define RELOCATION_TYPE_REL 0x10
#define RELOCATION_TYPE_UND 0x20
#define RELOCATION_TYPE_COM 0x30
#define RELOCATION_SECT_BITS 0x0f

typedef struct oasys_section_record
  {
    oasys_record_header_type header;
    unsigned char relb;
    bfd_byte value[4];
    bfd_byte vma[4];
    bfd_byte fill[3];
  }
oasys_section_record_type;

typedef struct oasys_end_record
  {
    oasys_record_header_type header;
    unsigned char relb;
    bfd_byte entry[4];
    bfd_byte fill[2];
    bfd_byte zero;
  }
oasys_end_record_type;

typedef union oasys_record_union
  {
    oasys_record_header_type header;
    oasys_data_record_type data;
    oasys_section_record_type section;
    oasys_symbol_record_type symbol;
    oasys_header_record_type first;
    oasys_end_record_type end;
    bfd_byte pad[256];
  }
oasys_record_union_type;
@


1.1
log
@Initial revision
@
text
@d2 18
d25 114
a138 100
typedef struct oasys_archive_header {
  unsigned int  version;
  char create_date[12];
  char revision_date[12];
  unsigned int mod_count;
  file_ptr mod_tbl_offset;
  unsigned int sym_tbl_size;
  unsigned int sym_count;
  file_ptr sym_tbl_offset;
  unsigned int xref_count;
  file_ptr xref_lst_offset;
} oasys_archive_header_type;

typedef struct oasys_extarchive_header {
  bfd_byte version[4];
  bfd_byte create_date[12];
  bfd_byte revision_date[12];
  bfd_byte mod_count[4];
  bfd_byte mod_tbl_offset[4];
  bfd_byte sym_tbl_size[4];
  bfd_byte sym_count[4];
  bfd_byte sym_tbl_offset[4];
  bfd_byte xref_count[4];
  bfd_byte xref_lst_offset[4];
} oasys_extarchive_header_type;

typedef struct oasys_module_table {
  int mod_number;
  char mod_date[12];
  unsigned int mod_size;
  unsigned int dep_count;
  unsigned int depee_count;
  file_ptr file_offset;
  unsigned int sect_count;
  char *module_name;
  unsigned int module_name_size;
} oasys_module_table_type;


typedef struct oasys_extmodule_table_a {
  bfd_byte mod_number[4];
  bfd_byte mod_date[12];
  bfd_byte mod_size[4];
  bfd_byte dep_count[4];
  bfd_byte depee_count[4];
  bfd_byte sect_count[4];
  bfd_byte file_offset[4];
  bfd_byte mod_name[32];
} oasys_extmodule_table_type_a_type;

typedef struct oasys_extmodule_table_b {
  bfd_byte mod_number[4];
  bfd_byte mod_date[12];
  bfd_byte mod_size[4];
  bfd_byte dep_count[4];
  bfd_byte depee_count[4];
  bfd_byte sect_count[4];
  bfd_byte file_offset[4];
  bfd_byte mod_name_length[4];
} oasys_extmodule_table_type_b_type;


typedef enum oasys_record {
  oasys_record_is_end_enum = 0,
  oasys_record_is_data_enum = 1,
  oasys_record_is_symbol_enum = 2,
  oasys_record_is_header_enum = 3,
  oasys_record_is_named_section_enum = 4,
  oasys_record_is_com_enum = 5,
  oasys_record_is_debug_enum = 6,
  oasys_record_is_section_enum = 7,
  oasys_record_is_debug_file_enum = 8,
  oasys_record_is_module_enum = 9,
  oasys_record_is_local_enum = 10
} oasys_record_enum_type;

  

typedef struct oasys_record_header {
  unsigned char length;
  unsigned char check_sum;
  unsigned char type;
  unsigned char fill;
} oasys_record_header_type;

typedef struct oasys_data_record {
  oasys_record_header_type header;
  unsigned char relb;
  bfd_byte addr[4];
  /* maximum total size of data record is 255 bytes */
  bfd_byte data[246];
} oasys_data_record_type;

typedef struct oasys_header_record {
  oasys_record_header_type header;
  unsigned char version_number;
  unsigned char rev_number;
  char module_name[26-6];
  char description[64-26];
} oasys_header_record_type;
d143 9
a151 7
typedef struct oasys_symbol_record {
  oasys_record_header_type header;
  unsigned char relb;
  bfd_byte value[4];
  bfd_byte refno[2];
  char name[64];
} oasys_symbol_record_type;
d162 31
a192 25
typedef struct oasys_section_record {
  oasys_record_header_type header;
  unsigned char relb;
  bfd_byte value[4];
  bfd_byte vma[4];
  bfd_byte fill[3];
} oasys_section_record_type;

typedef struct oasys_end_record {
  oasys_record_header_type header;
  unsigned char relb;
  bfd_byte entry[4];
  bfd_byte fill[2];
  bfd_byte zero;
} oasys_end_record_type;

typedef union oasys_record_union {
  oasys_record_header_type header;
  oasys_data_record_type data;
  oasys_section_record_type section;
  oasys_symbol_record_type symbol;
  oasys_header_record_type first;
  oasys_end_record_type end;
  bfd_byte pad[256];
} oasys_record_union_type;
@


1.1.1.1
log
@Initial GNU binutils 2.6 import
@
text
@@


1.1.1.2
log
@Import binutils-2.11.2
- only the binutils package (no gdb here)
- don't import libiberty and texinfo, they are elsewhere
- remove all .info* generated files
@
text
@a1 18

   Copyright 2001 Free Software Foundation, Inc.
   
   This program is free software; you can redistribute it and/or modify
   it under the terms of the GNU General Public License as published by
   the Free Software Foundation; either version 2, or (at your option)
   any later version.

   This program is distributed in the hope that it will be useful,
   but WITHOUT ANY WARRANTY; without even the implied warranty of
   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
   GNU General Public License for more details.

   You should have received a copy of the GNU General Public License
   along with this program; if not, write to the Free Software
   Foundation, Inc., 59 Temple Place - Suite 330,
   Boston, MA 02111-1307, USA.
   
d7 100
a106 114
typedef struct oasys_archive_header
  {
    unsigned int  version;
    char create_date[12];
    char revision_date[12];
    unsigned int mod_count;
    file_ptr mod_tbl_offset;
    unsigned int sym_tbl_size;
    unsigned int sym_count;
    file_ptr sym_tbl_offset;
    unsigned int xref_count;
    file_ptr xref_lst_offset;
  }
oasys_archive_header_type;

typedef struct oasys_extarchive_header
  {
    bfd_byte version[4];
    bfd_byte create_date[12];
    bfd_byte revision_date[12];
    bfd_byte mod_count[4];
    bfd_byte mod_tbl_offset[4];
    bfd_byte sym_tbl_size[4];
    bfd_byte sym_count[4];
    bfd_byte sym_tbl_offset[4];
    bfd_byte xref_count[4];
    bfd_byte xref_lst_offset[4];
  }
oasys_extarchive_header_type;

typedef struct oasys_module_table
  {
    int mod_number;
    char mod_date[12];
    unsigned int mod_size;
    unsigned int dep_count;
    unsigned int depee_count;
    file_ptr file_offset;
    unsigned int sect_count;
    char *module_name;
    unsigned int module_name_size;
  }
oasys_module_table_type;

typedef struct oasys_extmodule_table_a
  {
    bfd_byte mod_number[4];
    bfd_byte mod_date[12];
    bfd_byte mod_size[4];
    bfd_byte dep_count[4];
    bfd_byte depee_count[4];
    bfd_byte sect_count[4];
    bfd_byte file_offset[4];
    bfd_byte mod_name[32];
  }
oasys_extmodule_table_type_a_type;

typedef struct oasys_extmodule_table_b
  {
    bfd_byte mod_number[4];
    bfd_byte mod_date[12];
    bfd_byte mod_size[4];
    bfd_byte dep_count[4];
    bfd_byte depee_count[4];
    bfd_byte sect_count[4];
    bfd_byte file_offset[4];
    bfd_byte mod_name_length[4];
  }
oasys_extmodule_table_type_b_type;

typedef enum oasys_record
  {
    oasys_record_is_end_enum = 0,
    oasys_record_is_data_enum = 1,
    oasys_record_is_symbol_enum = 2,
    oasys_record_is_header_enum = 3,
    oasys_record_is_named_section_enum = 4,
    oasys_record_is_com_enum = 5,
    oasys_record_is_debug_enum = 6,
    oasys_record_is_section_enum = 7,
    oasys_record_is_debug_file_enum = 8,
    oasys_record_is_module_enum = 9,
    oasys_record_is_local_enum = 10
  }
oasys_record_enum_type;

typedef struct oasys_record_header
  {
    unsigned char length;
    unsigned char check_sum;
    unsigned char type;
    unsigned char fill;
  }
oasys_record_header_type;

typedef struct oasys_data_record
  {
    oasys_record_header_type header;
    unsigned char relb;
    bfd_byte addr[4];
    /* maximum total size of data record is 255 bytes */
    bfd_byte data[246];
  }
oasys_data_record_type;

typedef struct oasys_header_record
  {
    oasys_record_header_type header;
    unsigned char version_number;
    unsigned char rev_number;
    char module_name[26-6];
    char description[64-26];
  }
oasys_header_record_type;
d111 7
a117 9
typedef struct oasys_symbol_record
  {
    oasys_record_header_type header;
    unsigned char relb;
    bfd_byte value[4];
    bfd_byte refno[2];
    char name[64];
  }
oasys_symbol_record_type;
d128 25
a152 31
typedef struct oasys_section_record
  {
    oasys_record_header_type header;
    unsigned char relb;
    bfd_byte value[4];
    bfd_byte vma[4];
    bfd_byte fill[3];
  }
oasys_section_record_type;

typedef struct oasys_end_record
  {
    oasys_record_header_type header;
    unsigned char relb;
    bfd_byte entry[4];
    bfd_byte fill[2];
    bfd_byte zero;
  }
oasys_end_record_type;

typedef union oasys_record_union
  {
    oasys_record_header_type header;
    oasys_data_record_type data;
    oasys_section_record_type section;
    oasys_symbol_record_type symbol;
    oasys_header_record_type first;
    oasys_end_record_type end;
    bfd_byte pad[256];
  }
oasys_record_union_type;
@

