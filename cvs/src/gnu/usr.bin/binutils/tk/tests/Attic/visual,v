head	1.3;
access;
symbols
	CYGNUS-961112:1.1.2.1
	CYGNUS:1.1.0.2;
locks; strict;
comment	@# @;


1.3
date	96.11.23.16.39.07;	author niklas;	state dead;
branches;
next	1.2;

1.2
date	96.11.23.04.08.38;	author niklas;	state Exp;
branches;
next	1.1;

1.1
date	96.11.19.15.00.01;	author niklas;	state dead;
branches
	1.1.2.1;
next	;

1.1.2.1
date	96.11.19.15.00.02;	author niklas;	state Exp;
branches;
next	;


desc
@@


1.3
log
@Remove accidentally committed dirs from the trunk
@
text
@#!/usr/local/bin/wish -f
#
# This script displays provides visual tests for many of Tk's features.
# Each test displays a window with various information in it, along
# with instructions about how the window should appear.  You can look
# at the window to make sure it appears as expected.  Individual tests
# are kept in separate ".tcl" files in this directory.
#
# SCCS: @@(#) visual 1.3 96/02/16 10:55:47

set auto_path ". $auto_path"
wm title . "Visual Tests for Tk"

#-------------------------------------------------------
# The code below create the main window, consisting of a
# menu bar and a message explaining the basic operation
# of the program.
#-------------------------------------------------------

frame .menu -relief raised -borderwidth 1
message .msg -font -Adobe-times-medium-r-normal--*-180-*-*-*-*-*-* \
	-relief raised -width 4i \
	-borderwidth 1 -text "This application provides a collection of visual tests for the Tk toolkit.  Each menu entry invokes a test, which displays information on the screen.  You can then verify visually that the information is being displayed in the correct way.  The tests under the \"Postscript\" menu exercise the Postscript-generation capabilities of canvas widgets."

pack .menu -side top -fill x
pack .msg -side bottom -expand yes -fill both

#-------------------------------------------------------
# The code below creates all the menus, which invoke procedures
# to create particular demonstrations of various widgets.
#-------------------------------------------------------

menubutton .menu.file -text "File" -menu .menu.file.m
menu .menu.file.m
.menu.file.m add command -label "Quit" -command exit

menubutton .menu.group1 -text "Group 1" -menu .menu.group1.m
menu .menu.group1.m
.menu.group1.m add command -label "Canvas arcs" -command {source arc.tcl}
.menu.group1.m add command -label "Beveled borders in text widgets" \
	-command {source bevel.tcl}
.menu.group1.m add command -label "Colormap management" \
	-command {source cmap.tcl}
.menu.group1.m add command -label "Label/button geometry" \
	-command {source butGeom.tcl}

menubutton .menu.ps -text "Canvas Postscript" -menu .menu.ps.m
menu .menu.ps.m
.menu.ps.m add command -label "Rectangles and other graphics" \
	-command {source canvPsGrph.tcl}
.menu.ps.m add command -label "Text" \
	-command {source canvPsText.tcl}
.menu.ps.m add command -label "Bitmaps" \
	-command {source canvPsBmap.tcl}
.menu.ps.m add command -label "Arcs" \
	-command {source canvPsArc.tcl}

pack .menu.file .menu.group1 .menu.ps -side left -padx 1m

# Set up for keyboard-based menu traversal

bind . <Any-FocusIn> {
    if {("%d" == "NotifyVirtual") && ("%m" == "NotifyNormal")} {
	focus .menu
    }
}
tk_menuBar .menu .menu.file .menu.group1 .menu.ps

# The following procedure is invoked to print the contents of a canvas:

proc lpr c {
    exec rm -f tmp.ps
    $c postscript -file tmp.ps
    exec lpr tmp.ps
}

# Set up a class binding to allow objects to be deleted from a canvas
# by clicking with mouse button 1:

bind Canvas <1> {%W delete [%W find closest %x %y]}
@


1.2
log
@Merge to Cygnus 961112 + add some support (not ready) for shared libs
@
text
@@


1.1
log
@file visual was initially added on branch CYGNUS.
@
text
@d1 80
@


1.1.2.1
log
@Import of 961112 Cygnus binutils+gas+ld+gdb+gprof
@
text
@a0 80
#!/usr/local/bin/wish -f
#
# This script displays provides visual tests for many of Tk's features.
# Each test displays a window with various information in it, along
# with instructions about how the window should appear.  You can look
# at the window to make sure it appears as expected.  Individual tests
# are kept in separate ".tcl" files in this directory.
#
# SCCS: @@(#) visual 1.3 96/02/16 10:55:47

set auto_path ". $auto_path"
wm title . "Visual Tests for Tk"

#-------------------------------------------------------
# The code below create the main window, consisting of a
# menu bar and a message explaining the basic operation
# of the program.
#-------------------------------------------------------

frame .menu -relief raised -borderwidth 1
message .msg -font -Adobe-times-medium-r-normal--*-180-*-*-*-*-*-* \
	-relief raised -width 4i \
	-borderwidth 1 -text "This application provides a collection of visual tests for the Tk toolkit.  Each menu entry invokes a test, which displays information on the screen.  You can then verify visually that the information is being displayed in the correct way.  The tests under the \"Postscript\" menu exercise the Postscript-generation capabilities of canvas widgets."

pack .menu -side top -fill x
pack .msg -side bottom -expand yes -fill both

#-------------------------------------------------------
# The code below creates all the menus, which invoke procedures
# to create particular demonstrations of various widgets.
#-------------------------------------------------------

menubutton .menu.file -text "File" -menu .menu.file.m
menu .menu.file.m
.menu.file.m add command -label "Quit" -command exit

menubutton .menu.group1 -text "Group 1" -menu .menu.group1.m
menu .menu.group1.m
.menu.group1.m add command -label "Canvas arcs" -command {source arc.tcl}
.menu.group1.m add command -label "Beveled borders in text widgets" \
	-command {source bevel.tcl}
.menu.group1.m add command -label "Colormap management" \
	-command {source cmap.tcl}
.menu.group1.m add command -label "Label/button geometry" \
	-command {source butGeom.tcl}

menubutton .menu.ps -text "Canvas Postscript" -menu .menu.ps.m
menu .menu.ps.m
.menu.ps.m add command -label "Rectangles and other graphics" \
	-command {source canvPsGrph.tcl}
.menu.ps.m add command -label "Text" \
	-command {source canvPsText.tcl}
.menu.ps.m add command -label "Bitmaps" \
	-command {source canvPsBmap.tcl}
.menu.ps.m add command -label "Arcs" \
	-command {source canvPsArc.tcl}

pack .menu.file .menu.group1 .menu.ps -side left -padx 1m

# Set up for keyboard-based menu traversal

bind . <Any-FocusIn> {
    if {("%d" == "NotifyVirtual") && ("%m" == "NotifyNormal")} {
	focus .menu
    }
}
tk_menuBar .menu .menu.file .menu.group1 .menu.ps

# The following procedure is invoked to print the contents of a canvas:

proc lpr c {
    exec rm -f tmp.ps
    $c postscript -file tmp.ps
    exec lpr tmp.ps
}

# Set up a class binding to allow objects to be deleted from a canvas
# by clicking with mouse button 1:

bind Canvas <1> {%W delete [%W find closest %x %y]}
@
