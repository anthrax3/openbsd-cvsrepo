head	1.3;
access;
symbols
	CYGNUS-961112:1.1.2.1
	CYGNUS:1.1.0.2;
locks; strict;
comment	@# @;


1.3
date	96.11.23.16.35.46;	author niklas;	state dead;
branches;
next	1.2;

1.2
date	96.11.23.04.04.31;	author niklas;	state Exp;
branches;
next	1.1;

1.1
date	96.11.19.14.54.38;	author niklas;	state dead;
branches
	1.1.2.1;
next	;

1.1.2.1
date	96.11.19.14.54.38;	author niklas;	state Exp;
branches;
next	;


desc
@@


1.3
log
@Remove accidentally committed dirs from the trunk
@
text
@'\"
'\" Copyright (c) 1990-1992 The Regents of the University of California.
'\" Copyright (c) 1994-1996 Sun Microsystems, Inc.
'\"
'\" See the file "license.terms" for information on usage and redistribution
'\" of this file, and for a DISCLAIMER OF ALL WARRANTIES.
'\" 
'\" SCCS: @@(#) HandleEvent.3 1.6 96/03/26 18:13:34
'\" 
.so man.macros
.TH Tk_HandleEvent 3 "" Tk "Tk Library Procedures"
.BS
.SH NAME
Tk_HandleEvent \- invoke event handlers for window system events
.SH SYNOPSIS
.nf
\fB#include <tk.h>\fR
.sp
\fBTk_HandleEvent\fR(\fIeventPtr\fR)
.SH ARGUMENTS
.AS XEvent *eventPtr
.AP XEvent *eventPtr in
Pointer to X event to dispatch to relevant handler(s).
.BE

.SH DESCRIPTION
.PP
\fBTk_HandleEvent\fR is a lower-level procedure that deals with window
events.  It is called by \fBTk_ServiceEvent\fR (and indirectly by
\fBTk_DoOneEvent\fR), and in a few other cases within Tk.
It makes callbacks to any window event
handlers (created by calls to \fBTk_CreateEventHandler\fR)
that match \fIeventPtr\fR and then returns.  In some cases
it may be useful for an application to bypass the Tk event
queue and call \fBTk_HandleEvent\fR directly instead of
calling \fBTk_QueueEvent\fR followed by
\fBTk_ServiceEvent\fR.
.PP
This procedure may be invoked recursively.  For example,
it is possible to invoke \fBTk_HandleEvent\fR recursively
from a handler called by \fBTk_HandleEvent\fR.  This sort
of operation is useful in some modal situations, such
as when a
notifier has been popped up and an application wishes to
wait for the user to click a button in the notifier before
doing anything else.

.SH KEYWORDS
callback, event, handler, window
@


1.2
log
@Merge to Cygnus 961112 + add some support (not ready) for shared libs
@
text
@@


1.1
log
@file HandleEvent.3 was initially added on branch CYGNUS.
@
text
@d1 49
@


1.1.2.1
log
@Import of 961112 Cygnus binutils+gas+ld+gdb+gprof
@
text
@a0 49
'\"
'\" Copyright (c) 1990-1992 The Regents of the University of California.
'\" Copyright (c) 1994-1996 Sun Microsystems, Inc.
'\"
'\" See the file "license.terms" for information on usage and redistribution
'\" of this file, and for a DISCLAIMER OF ALL WARRANTIES.
'\" 
'\" SCCS: @@(#) HandleEvent.3 1.6 96/03/26 18:13:34
'\" 
.so man.macros
.TH Tk_HandleEvent 3 "" Tk "Tk Library Procedures"
.BS
.SH NAME
Tk_HandleEvent \- invoke event handlers for window system events
.SH SYNOPSIS
.nf
\fB#include <tk.h>\fR
.sp
\fBTk_HandleEvent\fR(\fIeventPtr\fR)
.SH ARGUMENTS
.AS XEvent *eventPtr
.AP XEvent *eventPtr in
Pointer to X event to dispatch to relevant handler(s).
.BE

.SH DESCRIPTION
.PP
\fBTk_HandleEvent\fR is a lower-level procedure that deals with window
events.  It is called by \fBTk_ServiceEvent\fR (and indirectly by
\fBTk_DoOneEvent\fR), and in a few other cases within Tk.
It makes callbacks to any window event
handlers (created by calls to \fBTk_CreateEventHandler\fR)
that match \fIeventPtr\fR and then returns.  In some cases
it may be useful for an application to bypass the Tk event
queue and call \fBTk_HandleEvent\fR directly instead of
calling \fBTk_QueueEvent\fR followed by
\fBTk_ServiceEvent\fR.
.PP
This procedure may be invoked recursively.  For example,
it is possible to invoke \fBTk_HandleEvent\fR recursively
from a handler called by \fBTk_HandleEvent\fR.  This sort
of operation is useful in some modal situations, such
as when a
notifier has been popped up and an application wishes to
wait for the user to click a button in the notifier before
doing anything else.

.SH KEYWORDS
callback, event, handler, window
@
