head	1.2;
access;
symbols
	BINUTILS-2_14:1.1.1.3
	OPENBSD_2_5:1.1.0.12
	OPENBSD_2_5_BASE:1.1
	OPENBSD_2_4:1.1.0.10
	OPENBSD_2_4_BASE:1.1
	OPENBSD_2_3:1.1.0.8
	OPENBSD_2_3_BASE:1.1
	OPENBSD_2_2:1.1.0.6
	OPENBSD_2_2_BASE:1.1
	BINUTILS-2_8_1:1.1.1.2
	OPENBSD_2_1:1.1.0.4
	OPENBSD_2_1_BASE:1.1
	CYGNUS-961112:1.1.1.1
	OPENBSD_2_0:1.1.0.2
	OPENBSD_2_0_BASE:1.1
	CYGNUS-960904:1.1.1.1
	CYGNUS-960609:1.1.1.1
	CYGNUS-960607:1.1.1.1
	CYGNUS:1.1.1
	FSF_2_6:1.1.1.1
	FSF:1.1.1;
locks; strict;
comment	@ * @;


1.2
date	99.06.18.02.12.12;	author espie;	state dead;
branches;
next	1.1;

1.1
date	96.01.08.11.08.50;	author niklas;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	96.01.08.11.08.50;	author niklas;	state Exp;
branches;
next	1.1.1.2;

1.1.1.2
date	97.05.29.09.27.35;	author niklas;	state Exp;
branches;
next	1.1.1.3;

1.1.1.3
date	2004.05.17.20.42.41;	author drahn;	state Exp;
branches;
next	;


desc
@@


1.2
log
@Kill old libiberty, use the one under egcs now.
@
text
@#include <stdio.h>
#include <varargs.h>
#include <ansidecl.h>
#undef vprintf
int
vprintf (format, ap)
     const char *format;
     va_list ap;
{
  return vfprintf (stdout, format, ap);
}
@


1.1
log
@Initial revision
@
text
@@


1.1.1.1
log
@Initial GNU binutils 2.6 import
@
text
@@


1.1.1.2
log
@Import of binutils-2.8.1 from Cygnus/FSF
@
text
@a1 3
#ifdef __STDC__
#include <stdarg.h>
#else
a2 1
#endif
@


1.1.1.3
log
@import binutils 2.14 (excluding testsuites, .info files, and .po files)
@
text
@d1 2
a2 19
/*

@@deftypefn Supplemental int vprintf (const char *@@var{format}, va_list @@var{ap})
@@deftypefnx Supplemental int vfprintf (FILE *@@var{stream}, const char *@@var{format}, va_list @@var{ap})
@@deftypefnx Supplemental int vsprintf (char *@@var{str}, const char *@@var{format}, va_list @@var{ap})

These functions are the same as @@code{printf}, @@code{fprintf}, and
@@code{sprintf}, respectively, except that they are called with a
@@code{va_list} instead of a variable number of arguments.  Note that
they do not call @@code{va_end}; this is the application's
responsibility.  In @@libib{} they are implemented in terms of the
nonstandard but common function @@code{_doprnt}.

@@end deftypefn

*/

#include <ansidecl.h>
#ifdef ANSI_PROTOTYPES
d7 1
a7 1
#include <stdio.h>
@

