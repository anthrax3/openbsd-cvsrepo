head	1.4;
access;
symbols
	BINUTILS-2_14:1.1.1.4
	OPENBSD_2_5:1.3.0.12
	OPENBSD_2_5_BASE:1.3
	OPENBSD_2_4:1.3.0.10
	OPENBSD_2_4_BASE:1.3
	OPENBSD_2_3:1.3.0.8
	OPENBSD_2_3_BASE:1.3
	OPENBSD_2_2:1.3.0.6
	OPENBSD_2_2_BASE:1.3
	BINUTILS-2_8_1:1.1.1.3
	OPENBSD_2_1:1.3.0.4
	OPENBSD_2_1_BASE:1.3
	CYGNUS-961112:1.1.1.3
	OPENBSD_2_0:1.3.0.2
	OPENBSD_2_0_BASE:1.3
	CYGNUS-960904:1.1.1.3
	CYGNUS-960609:1.1.1.2
	CYGNUS-960607:1.1.1.2
	CYGNUS:1.1.1
	FSF_2_6:1.1.1.1
	FSF:1.1.1;
locks; strict;
comment	@ * @;


1.4
date	99.06.18.02.12.15;	author espie;	state dead;
branches;
next	1.3;

1.3
date	96.09.04.19.10.36;	author niklas;	state Exp;
branches;
next	1.2;

1.2
date	96.06.10.10.55.28;	author niklas;	state Exp;
branches;
next	1.1;

1.1
date	96.01.08.11.08.51;	author niklas;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	96.01.08.11.08.51;	author niklas;	state Exp;
branches;
next	1.1.1.2;

1.1.1.2
date	96.06.07.11.07.09;	author niklas;	state Exp;
branches;
next	1.1.1.3;

1.1.1.3
date	96.09.04.17.40.18;	author niklas;	state Exp;
branches;
next	1.1.1.4;

1.1.1.4
date	2004.05.17.20.42.41;	author drahn;	state Exp;
branches;
next	;


desc
@@


1.4
log
@Kill old libiberty, use the one under egcs now.
@
text
@/* memory allocation routines with error checking.
   Copyright 1989, 90, 91, 92, 93, 94 Free Software Foundation, Inc.
   
This file is part of the libiberty library.
Libiberty is free software; you can redistribute it and/or
modify it under the terms of the GNU Library General Public
License as published by the Free Software Foundation; either
version 2 of the License, or (at your option) any later version.

Libiberty is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
Library General Public License for more details.

You should have received a copy of the GNU Library General Public
License along with libiberty; see the file COPYING.LIB.  If
not, write to the Free Software Foundation, Inc., 59 Temple Place - Suite 330,
Boston, MA 02111-1307, USA.  */

#include "ansidecl.h"
#include "libiberty.h"

#include <stdio.h>

#ifdef __STDC__
#include <stddef.h>
#else
#define size_t unsigned long
#define ptrdiff_t long
#endif

#if VMS
#include <stdlib.h>
#include <unixlib.h>
#else
/* For systems with larger pointers than ints, these must be declared.  */
PTR malloc PARAMS ((size_t));
PTR realloc PARAMS ((PTR, size_t));
PTR sbrk PARAMS ((ptrdiff_t));
#endif

/* The program name if set.  */
static const char *name = "";

/* The initial sbrk, set when the program name is set.  */
static char *first_break = NULL;

void
xmalloc_set_program_name (s)
     const char *s;
{
  name = s;
  if (first_break == NULL)
    first_break = (char *) sbrk (0);
}

PTR
xmalloc (size)
    size_t size;
{
  PTR newmem;

  if (size == 0)
    size = 1;
  newmem = malloc (size);
  if (!newmem)
    {
      extern char **environ;
      size_t allocated;

      if (first_break != NULL)
	allocated = (char *) sbrk (0) - first_break;
      else
	allocated = (char *) sbrk (0) - (char *) &environ;
      fprintf (stderr,
	       "\n%s%sCan not allocate %lu bytes after allocating %lu bytes\n",
	       name, *name ? ": " : "",
	       (unsigned long) size, (unsigned long) allocated);
      xexit (1);
    }
  return (newmem);
}

PTR
xrealloc (oldmem, size)
    PTR oldmem;
    size_t size;
{
  PTR newmem;

  if (size == 0)
    size = 1;
  if (!oldmem)
    newmem = malloc (size);
  else
    newmem = realloc (oldmem, size);
  if (!newmem)
    {
      extern char **environ;
      size_t allocated;

      if (first_break != NULL)
	allocated = (char *) sbrk (0) - first_break;
      else
	allocated = (char *) sbrk (0) - (char *) &environ;
      fprintf (stderr,
	       "\n%s%sCan not reallocate %lu bytes after allocating %lu bytes\n",
	       name, *name ? ": " : "",
	       (unsigned long) size, (unsigned long) allocated);
      xexit (1);
    }
  return (newmem);
}
@


1.3
log
@Merge the Cygnus 960904 sources
@
text
@@


1.2
log
@Bring Cygnus versions into the trunk, keeping our local patches
@
text
@d32 4
d40 1
@


1.1
log
@Initial revision
@
text
@d29 1
d35 1
@


1.1.1.1
log
@Initial GNU binutils 2.6 import
@
text
@@


1.1.1.2
log
@(Correct) Import of Cygnus binutils snapshot taken 960607
@
text
@a28 1
#define ptrdiff_t long
a33 1
PTR sbrk PARAMS ((ptrdiff_t));
@


1.1.1.3
log
@Import of binutils, gas, ld & gprof from Cygnus 960904 tree
@
text
@a31 4
#if VMS
#include <stdlib.h>
#include <unixlib.h>
#else
a35 1
#endif
@


1.1.1.4
log
@import binutils 2.14 (excluding testsuites, .info files, and .po files)
@
text
@a19 46
/*

@@deftypefn Replacement void* xmalloc (size_t)

Allocate memory without fail.  If @@code{malloc} fails, this will print
a message to @@code{stderr} (using the name set by
@@code{xmalloc_set_program_name},
if any) and then call @@code{xexit}.  Note that it is therefore safe for
a program to contain @@code{#define malloc xmalloc} in its source.

@@end deftypefn

@@deftypefn Replacement void* xrealloc (void *@@var{ptr}, size_t @@var{size})
Reallocate memory without fail.  This routine functions like @@code{realloc},
but will behave the same as @@code{xmalloc} if memory cannot be found.

@@end deftypefn

@@deftypefn Replacement void* xcalloc (size_t @@var{nelem}, size_t @@var{elsize})

Allocate memory without fail, and set it to zero.  This routine functions
like @@code{calloc}, but will behave the same as @@code{xmalloc} if memory
cannot be found.

@@end deftypefn

@@deftypefn Replacement void xmalloc_set_program_name (const char *@@var{name})

You can use this to set the name of the program used by
@@code{xmalloc_failed} when printing a failure message.

@@end deftypefn

@@deftypefn Replacement void xmalloc_failed (size_t)

This function is not meant to be called by client code, and is listed
here for completeness only.  If any of the allocation routines fail, this
function will be called to print an error message and terminate execution.

@@end deftypefn

*/

#ifdef HAVE_CONFIG_H
#include "config.h"
#endif
d25 1
a25 1
#ifdef ANSI_PROTOTYPES
a38 1
PTR calloc PARAMS ((size_t, size_t));
d45 1
a45 3
#ifdef HAVE_SBRK
/* The initial sbrk, set when the program name is set. Not used for win32
   ports other than cygwin32.  */
a46 1
#endif /* HAVE_SBRK */
a52 2
#ifdef HAVE_SBRK
  /* Win32 ports other than cygwin32 don't have brk() */
a54 1
#endif /* HAVE_SBRK */
a56 25
void
xmalloc_failed (size)
     size_t size;
{
#ifdef HAVE_SBRK
  extern char **environ;
  size_t allocated;

  if (first_break != NULL)
    allocated = (char *) sbrk (0) - first_break;
  else
    allocated = (char *) sbrk (0) - (char *) &environ;
  fprintf (stderr,
	   "\n%s%sout of memory allocating %lu bytes after a total of %lu bytes\n",
	   name, *name ? ": " : "",
	   (unsigned long) size, (unsigned long) allocated);
#else /* HAVE_SBRK */
  fprintf (stderr,
	   "\n%s%sout of memory allocating %lu bytes\n",
	   name, *name ? ": " : "",
	   (unsigned long) size);
#endif /* HAVE_SBRK */
  xexit (1);
}  

d67 14
a80 18
    xmalloc_failed (size);

  return (newmem);
}

PTR
xcalloc (nelem, elsize)
  size_t nelem, elsize;
{
  PTR newmem;

  if (nelem == 0 || elsize == 0)
    nelem = elsize = 1;

  newmem = calloc (nelem, elsize);
  if (!newmem)
    xmalloc_failed (nelem * elsize);

d98 14
a111 2
    xmalloc_failed (size);

@

