head	1.2;
access;
symbols
	BINUTILS-2_14:1.1.1.2
	OPENBSD_2_5:1.1.0.12
	OPENBSD_2_5_BASE:1.1
	OPENBSD_2_4:1.1.0.10
	OPENBSD_2_4_BASE:1.1
	OPENBSD_2_3:1.1.0.8
	OPENBSD_2_3_BASE:1.1
	OPENBSD_2_2:1.1.0.6
	OPENBSD_2_2_BASE:1.1
	BINUTILS-2_8_1:1.1.1.1
	OPENBSD_2_1:1.1.0.4
	OPENBSD_2_1_BASE:1.1
	CYGNUS-961112:1.1.1.1
	OPENBSD_2_0:1.1.0.2
	OPENBSD_2_0_BASE:1.1
	CYGNUS-960904:1.1.1.1
	CYGNUS-960609:1.1.1.1
	CYGNUS-960607:1.1.1.1
	CYGNUS:1.1.1
	FSF_2_6:1.1.1.1
	FSF:1.1.1;
locks; strict;
comment	@ * @;


1.2
date	99.06.18.02.11.51;	author espie;	state dead;
branches;
next	1.1;

1.1
date	96.01.08.11.08.45;	author niklas;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	96.01.08.11.08.45;	author niklas;	state Exp;
branches;
next	1.1.1.2;

1.1.1.2
date	2004.05.17.20.42.41;	author drahn;	state Exp;
branches;
next	;


desc
@@


1.2
log
@Kill old libiberty, use the one under egcs now.
@
text
@/* memcmp -- compare two memory regions.
   This function is in the public domain.  */

/*
NAME
	memcmp -- compare two memory regions

SYNOPSIS
	int memcmp (const void *from, const void *to, size_t count)

DESCRIPTION
	Compare two memory regions and return less than,
	equal to, or greater than zero, according to lexicographical
	ordering of the compared regions.
*/

#include <ansidecl.h>
#ifdef __STDC__
#include <stddef.h>
#else
#define size_t unsigned long
#endif

int
DEFUN(memcmp, (str1, str2, count),
      const PTR str1 AND const PTR str2 AND size_t count)
{
  register unsigned char *s1 = (unsigned char*)str1;
  register unsigned char *s2 = (unsigned char*)str2;

  while (count-- > 0)
    {
      if (*s1++ != *s2++)
	  return s1[-1] < s2[-1] ? -1 : 1;
    }
  return 0;
}

@


1.1
log
@Initial revision
@
text
@@


1.1.1.1
log
@Initial GNU binutils 2.6 import
@
text
@@


1.1.1.2
log
@import binutils 2.14 (excluding testsuites, .info files, and .po files)
@
text
@d5 2
d8 2
a9 9
@@deftypefn Supplemental int memcmp (const void *@@var{x}, const void *@@var{y}, size_t @@var{count})

Compares the first @@var{count} bytes of two areas of memory.  Returns
zero if they are the same, a value less than zero if @@var{x} is
lexically less than @@var{y}, or a value greater than zero if @@var{x}
is lexically greater than @@var{y}.  Note that lexical order is determined
as if comparing unsigned char arrays.

@@end deftypefn
d11 4
d18 1
a18 1
#ifdef ANSI_PROTOTYPES
d25 2
a26 4
memcmp (str1, str2, count)
     const PTR str1;
     const PTR str2;
     size_t count;
d28 2
a29 2
  register const unsigned char *s1 = (const unsigned char*)str1;
  register const unsigned char *s2 = (const unsigned char*)str2;
@

