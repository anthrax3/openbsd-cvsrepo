head	1.2;
access;
symbols
	BINUTILS-2_14:1.1.1.2
	OPENBSD_2_5:1.1.0.12
	OPENBSD_2_5_BASE:1.1
	OPENBSD_2_4:1.1.0.10
	OPENBSD_2_4_BASE:1.1
	OPENBSD_2_3:1.1.0.8
	OPENBSD_2_3_BASE:1.1
	OPENBSD_2_2:1.1.0.6
	OPENBSD_2_2_BASE:1.1
	BINUTILS-2_8_1:1.1.1.1
	OPENBSD_2_1:1.1.0.4
	OPENBSD_2_1_BASE:1.1
	CYGNUS-961112:1.1.1.1
	OPENBSD_2_0:1.1.0.2
	OPENBSD_2_0_BASE:1.1
	CYGNUS-960904:1.1.1.1
	CYGNUS-960609:1.1.1.1
	CYGNUS-960607:1.1.1.1
	CYGNUS:1.1.1
	FSF_2_6:1.1.1.1
	FSF:1.1.1;
locks; strict;
comment	@ * @;


1.2
date	99.06.18.02.11.44;	author espie;	state dead;
branches;
next	1.1;

1.1
date	96.01.08.11.08.43;	author niklas;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	96.01.08.11.08.43;	author niklas;	state Exp;
branches;
next	1.1.1.2;

1.1.1.2
date	2004.05.17.20.42.40;	author drahn;	state Exp;
branches;
next	;


desc
@@


1.2
log
@Kill old libiberty, use the one under egcs now.
@
text
@/* Emulate getcwd using getwd.
   This function is in the public domain. */

/*
NAME
	getcwd -- get absolute pathname for current working directory

SYNOPSIS
	char *getcwd (char pathname[len], len)

DESCRIPTION
	Copy the absolute pathname for the current working directory into
	the supplied buffer and return a pointer to the buffer.  If the 
	current directory's path doesn't fit in LEN characters, the result
	is NULL and errno is set.

BUGS
	Emulated via the getwd() call, which is reasonable for most
	systems that do not have getcwd().

*/

#ifndef NO_SYS_PARAM_H
#include <sys/param.h>
#endif
#include <errno.h>

extern char *getwd ();
extern int errno;

#ifndef MAXPATHLEN
#define MAXPATHLEN 1024
#endif

char *
getcwd (buf, len)
  char *buf;
  int len;
{
  char ourbuf[MAXPATHLEN];
  char *result;

  result = getwd (ourbuf);
  if (result) {
    if (strlen (ourbuf) >= len) {
      errno = ERANGE;
      return 0;
    }
    strcpy (buf, ourbuf);
  }
  return buf;
}
@


1.1
log
@Initial revision
@
text
@@


1.1.1.1
log
@Initial GNU binutils 2.6 import
@
text
@@


1.1.1.2
log
@import binutils 2.14 (excluding testsuites, .info files, and .po files)
@
text
@d5 2
d8 2
a9 1
@@deftypefn Supplemental char* getcwd (char *@@var{pathname}, int @@var{len})
d11 9
a19 9
Copy the absolute pathname for the current working directory into
@@var{pathname}, which is assumed to point to a buffer of at least
@@var{len} bytes, and return a pointer to the buffer.  If the current
directory's path doesn't fit in @@var{len} characters, the result is
@@code{NULL} and @@code{errno} is set.  If @@var{pathname} is a null pointer,
@@code{getcwd} will obtain @@var{len} bytes of space using
@@code{malloc}.

@@end deftypefn
d23 1
a23 3
#include "config.h"

#ifdef HAVE_SYS_PARAM_H
a26 6
#ifdef HAVE_STRING_H
#include <string.h>
#endif
#ifdef HAVE_STDLIB_H
#include <stdlib.h>
#endif
d38 1
a38 1
  size_t len;
a47 7
    }
    if (!buf) {
       buf = (char*)malloc(len);
       if (!buf) {
           errno = ENOMEM;
	   return 0;
       }
@

