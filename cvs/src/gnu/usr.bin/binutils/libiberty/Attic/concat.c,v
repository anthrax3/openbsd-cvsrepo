head	1.2;
access;
symbols
	BINUTILS-2_14:1.1.1.2
	OPENBSD_2_5:1.1.0.12
	OPENBSD_2_5_BASE:1.1
	OPENBSD_2_4:1.1.0.10
	OPENBSD_2_4_BASE:1.1
	OPENBSD_2_3:1.1.0.8
	OPENBSD_2_3_BASE:1.1
	OPENBSD_2_2:1.1.0.6
	OPENBSD_2_2_BASE:1.1
	BINUTILS-2_8_1:1.1.1.1
	OPENBSD_2_1:1.1.0.4
	OPENBSD_2_1_BASE:1.1
	CYGNUS-961112:1.1.1.1
	OPENBSD_2_0:1.1.0.2
	OPENBSD_2_0_BASE:1.1
	CYGNUS-960904:1.1.1.1
	CYGNUS-960609:1.1.1.1
	CYGNUS-960607:1.1.1.1
	CYGNUS:1.1.1
	FSF_2_6:1.1.1.1
	FSF:1.1.1;
locks; strict;
comment	@ * @;


1.2
date	99.06.18.02.11.36;	author espie;	state dead;
branches;
next	1.1;

1.1
date	96.01.08.11.08.40;	author niklas;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	96.01.08.11.08.40;	author niklas;	state Exp;
branches;
next	1.1.1.2;

1.1.1.2
date	2004.05.17.20.42.40;	author drahn;	state Exp;
branches;
next	;


desc
@@


1.2
log
@Kill old libiberty, use the one under egcs now.
@
text
@/* Concatenate variable number of strings.
   Copyright (C) 1991, 1994 Free Software Foundation, Inc.
   Written by Fred Fish @@ Cygnus Support

This file is part of the libiberty library.
Libiberty is free software; you can redistribute it and/or
modify it under the terms of the GNU Library General Public
License as published by the Free Software Foundation; either
version 2 of the License, or (at your option) any later version.

Libiberty is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
Library General Public License for more details.

You should have received a copy of the GNU Library General Public
License along with libiberty; see the file COPYING.LIB.  If
not, write to the Free Software Foundation, Inc., 59 Temple Place - Suite 330,
Boston, MA 02111-1307, USA.  */


/*

NAME

	concat -- concatenate a variable number of strings

SYNOPSIS

	#include <varargs.h>

	char *concat (s1, s2, s3, ..., NULL)

DESCRIPTION

	Concatenate a variable number of strings and return the result
	in freshly malloc'd memory.

	Returns NULL if insufficient memory is available.  The argument
	list is terminated by the first NULL pointer encountered.  Pointers
	to empty strings are ignored.

NOTES

	This function uses xmalloc() which is expected to be a front end
	function to malloc() that deals with low memory situations.  In
	typical use, if malloc() returns NULL then xmalloc() diverts to an
	error handler routine which never returns, and thus xmalloc will
	never return a NULL pointer.  If the client application wishes to
	deal with low memory situations itself, it should supply an xmalloc
	that just directly invokes malloc and blindly returns whatever
	malloc returns.
*/


#include "ansidecl.h"
#include "libiberty.h"

#ifdef ANSI_PROTOTYPES
#include <stdarg.h>
#else
#include <varargs.h>
#endif

#ifdef __STDC__
#include <stddef.h>
extern size_t strlen (const char *s);
#else
extern int strlen ();
#endif

#define NULLP (char *)0

/* VARARGS */
#ifdef ANSI_PROTOTYPES
char *
concat (const char *first, ...)
#else
char *
concat (va_alist)
     va_dcl
#endif
{
  register int length;
  register char *newstr;
  register char *end;
  register const char *arg;
  va_list args;
#ifndef ANSI_PROTOTYPES
  const char *first;
#endif

  /* First compute the size of the result and get sufficient memory. */

#ifdef ANSI_PROTOTYPES
  va_start (args, first);
#else
  va_start (args);
  first = va_arg (args, const char *);
#endif

  if (first == NULLP)
    length = 0;
  else
    {
      length = strlen (first);
      while ((arg = va_arg (args, const char *)) != NULLP)
	{
	  length += strlen (arg);
	}
    }
  newstr = (char *) xmalloc (length + 1);
  va_end (args);

  /* Now copy the individual pieces to the result string. */

  if (newstr != NULLP)
    {
#ifdef ANSI_PROTOTYPES
      va_start (args, first);
#else
      va_start (args);
      first = va_arg (args, const char *);
#endif
      end = newstr;
      if (first != NULLP)
	{
	  arg = first;
	  while (*arg)
	    {
	      *end++ = *arg++;
	    }
	  while ((arg = va_arg (args, const char *)) != NULLP)
	    {
	      while (*arg)
		{
		  *end++ = *arg++;
		}
	    }
	}
      *end = '\000';
      va_end (args);
    }

  return (newstr);
}

#ifdef MAIN

/* Simple little test driver. */

#include <stdio.h>

int
main ()
{
  printf ("\"\" = \"%s\"\n", concat (NULLP));
  printf ("\"a\" = \"%s\"\n", concat ("a", NULLP));
  printf ("\"ab\" = \"%s\"\n", concat ("a", "b", NULLP));
  printf ("\"abc\" = \"%s\"\n", concat ("a", "b", "c", NULLP));
  printf ("\"abcd\" = \"%s\"\n", concat ("ab", "cd", NULLP));
  printf ("\"abcde\" = \"%s\"\n", concat ("ab", "c", "de", NULLP));
  printf ("\"abcdef\" = \"%s\"\n", concat ("", "a", "", "bcd", "ef", NULLP));
  return 0;
}

#endif
@


1.1
log
@Initial revision
@
text
@@


1.1.1.1
log
@Initial GNU binutils 2.6 import
@
text
@@


1.1.1.2
log
@import binutils 2.14 (excluding testsuites, .info files, and .po files)
@
text
@d2 1
a2 1
   Copyright (C) 1991, 1994, 2001 Free Software Foundation, Inc.
d24 1
a24 1
@@deftypefn Extension char* concat (const char *@@var{s1}, const char *@@var{s2}, @@dots{}, @@code{NULL})
d26 1
a26 4
Concatenate zero or more of strings and return the result in freshly
@@code{xmalloc}ed memory.  Returns @@code{NULL} if insufficient memory is
available.  The argument list is terminated by the first @@code{NULL}
pointer encountered.  Pointers to empty strings are ignored.
d28 14
a41 1
@@end deftypefn
a52 1

a55 3
#ifdef HAVE_CONFIG_H
#include "config.h"
#endif
a57 1
#include <sys/types.h>		/* size_t */
d65 6
a70 20
# if HAVE_STRING_H
#  include <string.h>
# else
#  if HAVE_STRINGS_H
#   include <strings.h>
#  endif
# endif

#if HAVE_STDLIB_H
#include <stdlib.h>
#endif

static inline unsigned long vconcat_length PARAMS ((const char *, va_list));
static inline unsigned long
vconcat_length (first, args)
     const char *first;
     va_list args;
{
  unsigned long length = 0;
  const char *arg;
d72 1
a72 43
  for (arg = first; arg ; arg = va_arg (args, const char *))
    length += strlen (arg);

  return length;
}

static inline char *vconcat_copy PARAMS ((char *, const char *, va_list));
static inline char *
vconcat_copy (dst, first, args)
     char *dst;
     const char *first;
     va_list args;
{
  char *end = dst;
  const char *arg;

  for (arg = first; arg ; arg = va_arg (args, const char *))
    {
      unsigned long length = strlen (arg);
      memcpy (end, arg, length);
      end += length;
    }
  *end = '\000';

  return dst;
}

/* @@undocumented concat_length */

unsigned long
concat_length VPARAMS ((const char *first, ...))
{
  unsigned long length;

  VA_OPEN (args, first);
  VA_FIXEDARG (args, const char *, first);
  length = vconcat_length (first, args);
  VA_CLOSE (args);

  return length;
}

/* @@undocumented concat_copy */
d74 2
d77 2
a78 18
concat_copy VPARAMS ((char *dst, const char *first, ...))
{
  char *save_dst;

  VA_OPEN (args, first);
  VA_FIXEDARG (args, char *, dst);
  VA_FIXEDARG (args, const char *, first);
  vconcat_copy (dst, first, args);
  save_dst = dst; /* With K&R C, dst goes out of scope here.  */
  VA_CLOSE (args);

  return save_dst;
}

char *libiberty_concat_ptr;

/* @@undocumented concat_copy2 */

d80 3
a82 1
concat_copy2 VPARAMS ((const char *first, ...))
d84 8
a91 4
  VA_OPEN (args, first);
  VA_FIXEDARG (args, const char *, first);
  vconcat_copy (libiberty_concat_ptr, first, args);
  VA_CLOSE (args);
d93 1
a93 2
  return libiberty_concat_ptr;
}
d95 6
a100 4
char *
concat VPARAMS ((const char *first, ...))
{
  char *newstr;
d102 12
a113 5
  /* First compute the size of the result and get sufficient memory.  */
  VA_OPEN (args, first);
  VA_FIXEDARG (args, const char *, first);
  newstr = (char *) xmalloc (vconcat_length (first, args) + 1);
  VA_CLOSE (args);
a115 4
  VA_OPEN (args, first);
  VA_FIXEDARG (args, const char *, first);
  vconcat_copy (newstr, first, args);
  VA_CLOSE (args);
d117 27
a143 24
  return newstr;
}

/*

@@deftypefn Extension char* reconcat (char *@@var{optr}, const char *@@var{s1}, @@dots{}, @@code{NULL})

Same as @@code{concat}, except that if @@var{optr} is not @@code{NULL} it
is freed after the string is created.  This is intended to be useful
when you're extending an existing string or building up a string in a
loop:

@@example
  str = reconcat (str, "pre-", str, NULL);
@@end example

@@end deftypefn

*/

char *
reconcat VPARAMS ((char *optr, const char *first, ...))
{
  char *newstr;
d145 1
a145 17
  /* First compute the size of the result and get sufficient memory.  */
  VA_OPEN (args, first);
  VA_FIXEDARG (args, char *, optr);
  VA_FIXEDARG (args, const char *, first);
  newstr = (char *) xmalloc (vconcat_length (first, args) + 1);
  VA_CLOSE (args);

  /* Now copy the individual pieces to the result string. */
  VA_OPEN (args, first);
  VA_FIXEDARG (args, char *, optr);
  VA_FIXEDARG (args, const char *, first);
  vconcat_copy (newstr, first, args);
  if (optr) /* Done before VA_CLOSE so optr stays in scope for K&R C.  */
    free (optr);
  VA_CLOSE (args);

  return newstr;
a148 1
#define NULLP (char *)0
@

