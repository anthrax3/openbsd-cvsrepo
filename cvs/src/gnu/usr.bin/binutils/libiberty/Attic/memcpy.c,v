head	1.2;
access;
symbols
	BINUTILS-2_14:1.1.1.2
	OPENBSD_2_5:1.1.0.12
	OPENBSD_2_5_BASE:1.1
	OPENBSD_2_4:1.1.0.10
	OPENBSD_2_4_BASE:1.1
	OPENBSD_2_3:1.1.0.8
	OPENBSD_2_3_BASE:1.1
	OPENBSD_2_2:1.1.0.6
	OPENBSD_2_2_BASE:1.1
	BINUTILS-2_8_1:1.1.1.1
	OPENBSD_2_1:1.1.0.4
	OPENBSD_2_1_BASE:1.1
	CYGNUS-961112:1.1.1.1
	OPENBSD_2_0:1.1.0.2
	OPENBSD_2_0_BASE:1.1
	CYGNUS-960904:1.1.1.1
	CYGNUS-960609:1.1.1.1
	CYGNUS-960607:1.1.1.1
	CYGNUS:1.1.1
	FSF_2_6:1.1.1.1
	FSF:1.1.1;
locks; strict;
comment	@ * @;


1.2
date	99.06.18.02.11.52;	author espie;	state dead;
branches;
next	1.1;

1.1
date	96.01.08.11.08.45;	author niklas;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	96.01.08.11.08.45;	author niklas;	state Exp;
branches;
next	1.1.1.2;

1.1.1.2
date	2004.05.17.20.42.41;	author drahn;	state Exp;
branches;
next	;


desc
@@


1.2
log
@Kill old libiberty, use the one under egcs now.
@
text
@/* memcpy (the standard C function)
   This function is in the public domain.  */

/*
NAME
	memcpy -- copy memory regions of arbitary length

SYNOPSIS
	void* memcpy (void *out, const void *in, size_t n);

DESCRIPTION
	Copy LENGTH bytes from memory region pointed to by IN to memory
	region pointed to by OUT.
*/

#include <ansidecl.h>
#ifdef __STDC__
#include <stddef.h>
#else
#define size_t unsigned long
#endif

PTR
DEFUN(memcpy, (out, in, length), PTR out AND CONST PTR in AND size_t length)
{
    bcopy(in, out, length);
    return out;
}
@


1.1
log
@Initial revision
@
text
@@


1.1.1.1
log
@Initial GNU binutils 2.6 import
@
text
@@


1.1.1.2
log
@import binutils 2.14 (excluding testsuites, .info files, and .po files)
@
text
@d5 2
d8 2
a9 6
@@deftypefn Supplemental void* memcpy (void *@@var{out}, const void *@@var{in}, size_t @@var{length})

Copies @@var{length} bytes from memory region @@var{in} to region
@@var{out}.  Returns a pointer to @@var{out}.

@@end deftypefn
d11 3
d17 1
a17 1
#ifdef ANSI_PROTOTYPES
a22 2
void bcopy PARAMS((const void*, void*, size_t));

d24 1
a24 4
memcpy (out, in, length)
     PTR out;
     const PTR in;
     size_t length;
@

