head	1.6;
access;
symbols
	OPENBSD_6_1_BASE:1.6
	OPENBSD_6_0:1.6.0.50
	OPENBSD_6_0_BASE:1.6
	OPENBSD_5_9:1.6.0.46
	OPENBSD_5_9_BASE:1.6
	OPENBSD_5_8:1.6.0.48
	OPENBSD_5_8_BASE:1.6
	OPENBSD_5_7:1.6.0.40
	OPENBSD_5_7_BASE:1.6
	OPENBSD_5_6:1.6.0.44
	OPENBSD_5_6_BASE:1.6
	OPENBSD_5_5:1.6.0.42
	OPENBSD_5_5_BASE:1.6
	OPENBSD_5_4:1.6.0.38
	OPENBSD_5_4_BASE:1.6
	OPENBSD_5_3:1.6.0.36
	OPENBSD_5_3_BASE:1.6
	OPENBSD_5_2:1.6.0.34
	OPENBSD_5_2_BASE:1.6
	OPENBSD_5_1_BASE:1.6
	OPENBSD_5_1:1.6.0.32
	OPENBSD_5_0:1.6.0.30
	OPENBSD_5_0_BASE:1.6
	OPENBSD_4_9:1.6.0.28
	OPENBSD_4_9_BASE:1.6
	OPENBSD_4_8:1.6.0.26
	OPENBSD_4_8_BASE:1.6
	OPENBSD_4_7:1.6.0.22
	OPENBSD_4_7_BASE:1.6
	OPENBSD_4_6:1.6.0.24
	OPENBSD_4_6_BASE:1.6
	OPENBSD_4_5:1.6.0.20
	OPENBSD_4_5_BASE:1.6
	OPENBSD_4_4:1.6.0.18
	OPENBSD_4_4_BASE:1.6
	OPENBSD_4_3:1.6.0.16
	OPENBSD_4_3_BASE:1.6
	OPENBSD_4_2:1.6.0.14
	OPENBSD_4_2_BASE:1.6
	OPENBSD_4_1:1.6.0.12
	OPENBSD_4_1_BASE:1.6
	OPENBSD_4_0:1.6.0.10
	OPENBSD_4_0_BASE:1.6
	OPENBSD_3_9:1.6.0.8
	OPENBSD_3_9_BASE:1.6
	OPENBSD_3_8:1.6.0.6
	OPENBSD_3_8_BASE:1.6
	OPENBSD_3_7:1.6.0.4
	OPENBSD_3_7_BASE:1.6
	BINUTILS_2_15:1.1.1.5
	OPENBSD_3_6:1.6.0.2
	OPENBSD_3_6_BASE:1.6
	BINUTILS-2_14:1.1.1.5
	OPENBSD_3_5:1.5.0.8
	OPENBSD_3_5_BASE:1.5
	OPENBSD_3_4:1.5.0.6
	OPENBSD_3_4_BASE:1.5
	OPENBSD_3_3:1.5.0.4
	OPENBSD_3_3_BASE:1.5
	OPENBSD_3_2:1.5.0.2
	OPENBSD_3_2_BASE:1.5
	binutils-2_11_2:1.1.1.4
	OPENBSD_3_1:1.3.0.8
	OPENBSD_3_1_BASE:1.3
	OPENBSD_3_0:1.3.0.6
	OPENBSD_3_0_BASE:1.3
	BINUTILS-2_10_1:1.1.1.3
	OPENBSD_2_9:1.3.0.4
	OPENBSD_2_9_BASE:1.3
	OPENBSD_2_8:1.3.0.2
	OPENBSD_2_8_BASE:1.3
	BINUTILS-2_10:1.1.1.3
	OPENBSD_2_7:1.2.0.18
	OPENBSD_2_7_BASE:1.2
	new-binutils:1.2.0.16
	OPENBSD_2_6:1.2.0.14
	OPENBSD_2_6_BASE:1.2
	OPENBSD_2_5:1.2.0.12
	OPENBSD_2_5_BASE:1.2
	OPENBSD_2_4:1.2.0.10
	OPENBSD_2_4_BASE:1.2
	OPENBSD_2_3:1.2.0.8
	OPENBSD_2_3_BASE:1.2
	OPENBSD_2_2:1.2.0.6
	OPENBSD_2_2_BASE:1.2
	BINUTILS-2_8_1:1.1.1.2
	OPENBSD_2_1:1.2.0.4
	OPENBSD_2_1_BASE:1.2
	CYGNUS-961112:1.1.1.2
	OPENBSD_2_0:1.2.0.2
	OPENBSD_2_0_BASE:1.2
	CYGNUS-960904:1.1.1.2
	CYGNUS-960609:1.1.1.2
	CYGNUS:1.1.1
	FSF_2_6:1.1.1.1
	FSF:1.1.1;
locks; strict;
comment	@ * @;


1.6
date	2004.05.17.21.54.48;	author drahn;	state Exp;
branches;
next	1.5;

1.5
date	2002.07.30.16.10.25;	author fgsch;	state Exp;
branches;
next	1.4;

1.4
date	2002.05.13.17.07.40;	author fgsch;	state Exp;
branches;
next	1.3;

1.3
date	2000.09.12.19.12.33;	author espie;	state Exp;
branches;
next	1.2;

1.2
date	96.06.10.10.53.20;	author niklas;	state Exp;
branches;
next	1.1;

1.1
date	96.01.08.11.10.17;	author niklas;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	96.01.08.11.10.17;	author niklas;	state Exp;
branches;
next	1.1.1.2;

1.1.1.2
date	96.06.09.19.43.29;	author niklas;	state Exp;
branches;
next	1.1.1.3;

1.1.1.3
date	2000.09.12.14.48.44;	author espie;	state Exp;
branches;
next	1.1.1.4;

1.1.1.4
date	2002.05.13.14.03.19;	author fgsch;	state Exp;
branches;
next	1.1.1.5;

1.1.1.5
date	2004.05.17.20.42.56;	author drahn;	state Exp;
branches;
next	;


desc
@@


1.6
log
@Resolve merge conflicts, adjust method of W^X handing (.sh files)
remove testsuites (not useable) remove mmalloc (not part of new binutils).
@
text
@/*
 * Copyright (c) 1983, 1993, 2001
 *      The Regents of the University of California.  All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 * 1. Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in the
 *    documentation and/or other materials provided with the distribution.
 * 3. Neither the name of the University nor the names of its contributors
 *    may be used to endorse or promote products derived from this software
 *    without specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE REGENTS AND CONTRIBUTORS ``AS IS'' AND
 * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
 * ARE DISCLAIMED.  IN NO EVENT SHALL THE REGENTS OR CONTRIBUTORS BE LIABLE
 * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
 * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS
 * OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
 * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
 * LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY
 * OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
 * SUCH DAMAGE.
 */
#include "gprof.h"
#include "search_list.h"
#include "source.h"
#include "symtab.h"
#include "cg_arcs.h"
#include "corefile.h"
#include "hist.h"

    /*
     *        opcode of the `calls' instruction
     */
#define	CALLS	0xfb

    /*
     *        register for pc relative addressing
     */
#define	PC	0xf

enum opermodes
  {
    literal, indexed, reg, regdef, autodec, autoinc, autoincdef,
    bytedisp, bytedispdef, worddisp, worddispdef, longdisp, longdispdef,
    immediate, absolute, byterel, bytereldef, wordrel, wordreldef,
    longrel, longreldef
  };
typedef enum opermodes operandenum;

#if 0
/* Here to document only.  We can't use this when cross compiling as
   the bitfield layout might not be the same as native.  */
struct modebyte
  {
    unsigned int regfield:4;
    unsigned int modefield:4;
  };
#endif

/*
 * A symbol to be the child of indirect calls:
 */
static Sym indirectchild;

static operandenum vax_operandmode PARAMS ((unsigned char *));
static char *vax_operandname PARAMS ((operandenum));
static long vax_operandlength PARAMS ((unsigned char *));
static bfd_signed_vma vax_offset PARAMS ((unsigned char *));
void vax_find_call PARAMS ((Sym *, bfd_vma, bfd_vma));

static operandenum
vax_operandmode (modep)
     unsigned char *modep;
{
  int usesreg = *modep & 0xf;

  switch ((*modep >> 4) & 0xf)
    {
    case 0:
    case 1:
    case 2:
    case 3:
      return literal;
    case 4:
      return indexed;
    case 5:
      return reg;
    case 6:
      return regdef;
    case 7:
      return autodec;
    case 8:
      return usesreg != PC ? autoinc : immediate;
    case 9:
      return usesreg != PC ? autoincdef : absolute;
    case 10:
      return usesreg != PC ? bytedisp : byterel;
    case 11:
      return usesreg != PC ? bytedispdef : bytereldef;
    case 12:
      return usesreg != PC ? worddisp : wordrel;
    case 13:
      return usesreg != PC ? worddispdef : wordreldef;
    case 14:
      return usesreg != PC ? longdisp : longrel;
    case 15:
      return usesreg != PC ? longdispdef : longreldef;
    }
  /* NOTREACHED */
  abort ();
}

static char *
vax_operandname (mode)
     operandenum mode;
{

  switch (mode)
    {
    case literal:
      return "literal";
    case indexed:
      return "indexed";
    case reg:
      return "register";
    case regdef:
      return "register deferred";
    case autodec:
      return "autodecrement";
    case autoinc:
      return "autoincrement";
    case autoincdef:
      return "autoincrement deferred";
    case bytedisp:
      return "byte displacement";
    case bytedispdef:
      return "byte displacement deferred";
    case byterel:
      return "byte relative";
    case bytereldef:
      return "byte relative deferred";
    case worddisp:
      return "word displacement";
    case worddispdef:
      return "word displacement deferred";
    case wordrel:
      return "word relative";
    case wordreldef:
      return "word relative deferred";
    case immediate:
      return "immediate";
    case absolute:
      return "absolute";
    case longdisp:
      return "long displacement";
    case longdispdef:
      return "long displacement deferred";
    case longrel:
      return "long relative";
    case longreldef:
      return "long relative deferred";
    }
  /* NOTREACHED */
  abort ();
}

static long
vax_operandlength (modep)
     unsigned char *modep;
{

  switch (vax_operandmode (modep))
    {
    case literal:
    case reg:
    case regdef:
    case autodec:
    case autoinc:
    case autoincdef:
      return 1;
    case bytedisp:
    case bytedispdef:
    case byterel:
    case bytereldef:
      return 2;
    case worddisp:
    case worddispdef:
    case wordrel:
    case wordreldef:
      return 3;
    case immediate:
    case absolute:
    case longdisp:
    case longdispdef:
    case longrel:
    case longreldef:
      return 5;
    case indexed:
      return 1 + vax_operandlength (modep + 1);
    }
  /* NOTREACHED */
  abort ();
}

static bfd_signed_vma
vax_offset (modep)
     unsigned char *modep;
{
  operandenum mode = vax_operandmode (modep);

  ++modep;				/* skip over the mode */
  switch (mode)
    {
    default:
      fprintf (stderr, "[reladdr] not relative address\n");
      return 0;
    case byterel:
      return 1 + bfd_get_signed_8 (core_bfd, modep);
    case wordrel:
      return 2 + bfd_get_signed_16 (core_bfd, modep);
    case longrel:
      return 4 + bfd_get_signed_32 (core_bfd, modep);
    }
}


void
vax_find_call (parent, p_lowpc, p_highpc)
     Sym *parent;
     bfd_vma p_lowpc;
     bfd_vma p_highpc;
{
  unsigned char *instructp;
  long length;
  Sym *child;
  operandenum mode;
  operandenum firstmode;
  bfd_vma pc, destpc;
  static bfd_boolean inited = FALSE;

  if (!inited)
    {
      inited = TRUE;
      sym_init (&indirectchild);
      indirectchild.cg.prop.fract = 1.0;
      indirectchild.cg.cyc.head = &indirectchild;
    }

  if (core_text_space == 0)
    {
      return;
    }
  if (p_lowpc < s_lowpc)
    {
      p_lowpc = s_lowpc;
    }
  if (p_highpc > s_highpc)
    {
      p_highpc = s_highpc;
    }
  DBG (CALLDEBUG, printf ("[findcall] %s: 0x%lx to 0x%lx\n",
			  parent->name, (unsigned long) p_lowpc,
			  (unsigned long) p_highpc));
  for (pc = p_lowpc; pc < p_highpc; pc += length)
    {
      length = 1;
      instructp = ((unsigned char *) core_text_space
		   + pc - core_text_sect->vma);
      if ((*instructp & 0xff) == CALLS)
	{
	  /*
	   *    maybe a calls, better check it out.
	   *      skip the count of the number of arguments.
	   */
	  DBG (CALLDEBUG,
	       printf ("[findcall]\t0x%lx:calls", (unsigned long) pc));
	  firstmode = vax_operandmode (instructp + length);
	  switch (firstmode)
	    {
	    case literal:
	    case immediate:
	      break;
	    default:
	      goto botched;
	    }
	  length += vax_operandlength (instructp + length);
	  mode = vax_operandmode (instructp + length);
	  DBG (CALLDEBUG,
	       printf ("\tfirst operand is %s", vax_operandname (firstmode));
	       printf ("\tsecond operand is %s\n", vax_operandname (mode)));
	  switch (mode)
	    {
	    case regdef:
	    case bytedispdef:
	    case worddispdef:
	    case longdispdef:
	    case bytereldef:
	    case wordreldef:
	    case longreldef:
	      /*
	       *    indirect call: call through pointer
	       *      either  *d(r)   as a parameter or local
	       *              (r)     as a return value
	       *              *f      as a global pointer
	       *      [are there others that we miss?,
	       *       e.g. arrays of pointers to functions???]
	       */
	      arc_add (parent, &indirectchild, (unsigned long) 0);
	      length += vax_operandlength (instructp + length);
	      continue;
	    case byterel:
	    case wordrel:
	    case longrel:
	      /*
	       *    regular pc relative addressing
	       *      check that this is the address of
	       *      a function.
	       */
	      destpc = pc + vax_offset (instructp + length);
	      if (destpc >= s_lowpc && destpc <= s_highpc)
		{
		  child = sym_lookup (&symtab, destpc);
		  DBG (CALLDEBUG,
		       printf ("[findcall]\tdestpc 0x%lx",
			       (unsigned long) destpc);
		       printf (" child->name %s", child->name);
		       printf (" child->addr 0x%lx\n",
			       (unsigned long) child->addr);
		    );
		  if (child->addr == destpc)
		    {
		      /*
		       *    a hit
		       */
		      arc_add (parent, child, (unsigned long) 0);
		      length += vax_operandlength (instructp + length);
		      continue;
		    }
		  goto botched;
		}
	      /*
	       *    else:
	       *      it looked like a calls,
	       *      but it wasn't to anywhere.
	       */
	      goto botched;
	    default:
	    botched:
	      /*
	       *    something funny going on.
	       */
	      DBG (CALLDEBUG, printf ("[findcall]\tbut it's a botch\n"));
	      length = 1;
	      continue;
	    }
	}
    }
}
@


1.5
log
@Update BSD licenses to include 'with or without modification'.
From binutils -current.
@
text
@d30 3
a35 1
#include "symtab.h"
d56 3
d64 1
d69 1
a69 1
Sym indirectchild;
d71 5
d79 1
a79 1
     struct modebyte *modep;
d81 1
a81 1
  long usesreg = modep->regfield;
d83 1
a83 1
  switch (modep->modefield)
d175 1
a175 1
     struct modebyte *modep;
d205 1
a205 1
      return 1 + vax_operandlength ((struct modebyte *) ((char *) modep) + 1);
d211 3
a213 3
static bfd_vma
vax_reladdr (modep)
     struct modebyte *modep;
a215 3
  char *cp;
  short *sp;
  long *lp;
d217 1
a217 2
  cp = (char *) modep;
  ++cp;				/* skip over the mode */
d222 1
a222 1
      return (bfd_vma) modep;
d224 1
a224 1
      return (bfd_vma) (cp + sizeof *cp + *cp);
d226 1
a226 2
      sp = (short *) cp;
      return (bfd_vma) (cp + sizeof *sp + *sp);
d228 1
a228 2
      lp = (long *) cp;
      return (bfd_vma) (cp + sizeof *lp + *lp);
d244 2
a245 2
  bfd_vma destpc;
  static bool inited = FALSE;
d270 1
a270 3
  for (instructp = (unsigned char *) core_text_space + p_lowpc;
       instructp < (unsigned char *) core_text_space + p_highpc;
       instructp += length)
d273 3
a275 1
      if (*instructp == CALLS)
d282 2
a283 4
	       printf ("[findcall]\t0x%lx:calls",
		       ((unsigned long)
			(instructp - (unsigned char *) core_text_space))));
	  firstmode = vax_operandmode ((struct modebyte *) (instructp + length));
d292 2
a293 2
	  length += vax_operandlength ((struct modebyte *) (instructp + length));
	  mode = vax_operandmode ((struct modebyte *) (instructp + length));
d315 1
a315 2
	      length += vax_operandlength (
				  (struct modebyte *) (instructp + length));
d325 1
a325 2
	      destpc = vax_reladdr ((struct modebyte *) (instructp + length))
		- (bfd_vma) core_text_space;
d342 1
a342 2
		      length += vax_operandlength ((struct modebyte *)
						   (instructp + length));
@


1.4
log
@resolve conflicts.
@
text
@d2 2
a3 2
 * Copyright (c) 1983, 2001 Regents of the University of California.
 * All rights reserved.
d5 23
a27 13
 * Redistribution and use in source and binary forms are permitted
 * provided that: (1) source distributions retain this entire copyright
 * notice and comment, and (2) distributions including binaries display
 * the following acknowledgement:  ``This product includes software
 * developed by the University of California, Berkeley and its contributors''
 * in the documentation or other materials provided with the distribution
 * and in all advertising materials mentioning features or use of this
 * software. Neither the name of the University nor the names of its
 * contributors may be used to endorse or promote products derived
 * from this software without specific prior written permission.
 * THIS SOFTWARE IS PROVIDED ``AS IS'' AND WITHOUT ANY EXPRESS OR
 * IMPLIED WARRANTIES, INCLUDING, WITHOUT LIMITATION, THE IMPLIED
 * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.
@


1.3
log
@Help stupid cvs fixing basic conflicts.
@
text
@d2 1
a2 1
 * Copyright (c) 1983 Regents of the University of California.
d310 1
a310 1
	       *      check that this is the address of 
@


1.2
log
@Bring Cygnus versions into the trunk, keeping our local patches
@
text
@d21 1
a21 1
#include "core.h"
d25 25
d57 1
a57 1
operandmode (modep)
d95 1
d99 1
a99 1
operandname (mode)
d149 1
d153 1
a153 1
operandlength (modep)
d157 1
a157 1
  switch (operandmode (modep))
d184 1
a184 1
      return 1 + operandlength ((struct modebyte *) ((char *) modep) + 1);
d187 1
d191 1
a191 1
reladdr (modep)
d194 1
a194 1
  operandenum mode = operandmode (modep);
d219 1
a219 1
find_call (parent, p_lowpc, p_highpc)
d253 2
a254 1
			  parent->name, p_lowpc, p_highpc));
d267 4
a270 3
	       printf ("[findcall]\t0x%x:calls",
		       instructp - (unsigned char *) core_text_space));
	  firstmode = operandmode ((struct modebyte *) (instructp + length));
d279 2
a280 2
	  length += operandlength ((struct modebyte *) (instructp + length));
	  mode = operandmode ((struct modebyte *) (instructp + length));
d282 2
a283 2
	       printf ("\tfirst operand is %s", operandname (firstmode));
	       printf ("\tsecond operand is %s\n", operandname (mode)));
d301 2
a302 2
	      arc_add (parent, &indirectchild, (long) 0);
	      length += operandlength (
d313 1
a313 1
	      destpc = reladdr ((struct modebyte *) (instructp + length))
d319 2
a320 1
		       printf ("[findcall]\tdestpc 0x%lx", destpc);
d322 2
a323 1
		       printf (" child->addr 0x%lx\n", child->addr);
d330 3
a332 3
		      arc_add (parent, child, (long) 0);
		      length += operandlength ((struct modebyte *)
					       (instructp + length));
@


1.1
log
@Initial revision
@
text
@a23 1
#include "vax.h"
@


1.1.1.1
log
@Initial GNU binutils 2.6 import
@
text
@@


1.1.1.2
log
@Import of binutils, gas, ld & gprof from Cygnus 960609 tree
@
text
@d24 1
@


1.1.1.3
log
@Import binutils-2.10
- only the binutils package (no gdb here)
- don't import libiberty and texinfo, they are elsewhere
- remove all .info* generated files
@
text
@d21 1
a21 1
#include "corefile.h"
a24 25
    /*
     *        opcode of the `calls' instruction
     */
#define	CALLS	0xfb

    /*
     *        register for pc relative addressing
     */
#define	PC	0xf

enum opermodes
  {
    literal, indexed, reg, regdef, autodec, autoinc, autoincdef,
    bytedisp, bytedispdef, worddisp, worddispdef, longdisp, longdispdef,
    immediate, absolute, byterel, bytereldef, wordrel, wordreldef,
    longrel, longreldef
  };
typedef enum opermodes operandenum;

struct modebyte
  {
    unsigned int regfield:4;
    unsigned int modefield:4;
  };

d32 1
a32 1
vax_operandmode (modep)
a69 1
  abort ();
d73 1
a73 1
vax_operandname (mode)
a122 1
  abort ();
d126 1
a126 1
vax_operandlength (modep)
d130 1
a130 1
  switch (vax_operandmode (modep))
d157 1
a157 1
      return 1 + vax_operandlength ((struct modebyte *) ((char *) modep) + 1);
a159 1
  abort ();
d163 1
a163 1
vax_reladdr (modep)
d166 1
a166 1
  operandenum mode = vax_operandmode (modep);
d191 1
a191 1
vax_find_call (parent, p_lowpc, p_highpc)
d225 1
a225 2
			  parent->name, (unsigned long) p_lowpc,
			  (unsigned long) p_highpc));
d238 3
a240 4
	       printf ("[findcall]\t0x%lx:calls",
		       ((unsigned long)
			(instructp - (unsigned char *) core_text_space))));
	  firstmode = vax_operandmode ((struct modebyte *) (instructp + length));
d249 2
a250 2
	  length += vax_operandlength ((struct modebyte *) (instructp + length));
	  mode = vax_operandmode ((struct modebyte *) (instructp + length));
d252 2
a253 2
	       printf ("\tfirst operand is %s", vax_operandname (firstmode));
	       printf ("\tsecond operand is %s\n", vax_operandname (mode)));
d271 2
a272 2
	      arc_add (parent, &indirectchild, (unsigned long) 0);
	      length += vax_operandlength (
d283 1
a283 1
	      destpc = vax_reladdr ((struct modebyte *) (instructp + length))
d289 1
a289 2
		       printf ("[findcall]\tdestpc 0x%lx",
			       (unsigned long) destpc);
d291 1
a291 2
		       printf (" child->addr 0x%lx\n",
			       (unsigned long) child->addr);
d298 3
a300 3
		      arc_add (parent, child, (unsigned long) 0);
		      length += vax_operandlength ((struct modebyte *)
						   (instructp + length));
@


1.1.1.4
log
@Import binutils-2.11.2
- only the binutils package (no gdb here)
- don't import libiberty and texinfo, they are elsewhere
- remove all .info* generated files
@
text
@d2 1
a2 1
 * Copyright (c) 1983, 2001 Regents of the University of California.
d310 1
a310 1
	       *      check that this is the address of
@


1.1.1.5
log
@import binutils 2.14 (excluding testsuites, .info files, and .po files)
@
text
@d2 2
a3 2
 * Copyright (c) 1983, 1993, 2001
 *      The Regents of the University of California.  All rights reserved.
d5 13
a17 23
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 * 1. Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in the
 *    documentation and/or other materials provided with the distribution.
 * 3. Neither the name of the University nor the names of its contributors
 *    may be used to endorse or promote products derived from this software
 *    without specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE REGENTS AND CONTRIBUTORS ``AS IS'' AND
 * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
 * ARE DISCLAIMED.  IN NO EVENT SHALL THE REGENTS OR CONTRIBUTORS BE LIABLE
 * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
 * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS
 * OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
 * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
 * LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY
 * OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
 * SUCH DAMAGE.
a19 3
#include "search_list.h"
#include "source.h"
#include "symtab.h"
d23 1
a43 3
#if 0
/* Here to document only.  We can't use this when cross compiling as
   the bitfield layout might not be the same as native.  */
a48 1
#endif
d53 1
a53 1
static Sym indirectchild;
a54 5
static operandenum vax_operandmode PARAMS ((unsigned char *));
static char *vax_operandname PARAMS ((operandenum));
static long vax_operandlength PARAMS ((unsigned char *));
static bfd_signed_vma vax_offset PARAMS ((unsigned char *));
void vax_find_call PARAMS ((Sym *, bfd_vma, bfd_vma));
d58 1
a58 1
     unsigned char *modep;
d60 1
a60 1
  int usesreg = *modep & 0xf;
d62 1
a62 1
  switch ((*modep >> 4) & 0xf)
d154 1
a154 1
     unsigned char *modep;
d184 1
a184 1
      return 1 + vax_operandlength (modep + 1);
d190 3
a192 3
static bfd_signed_vma
vax_offset (modep)
     unsigned char *modep;
d195 3
d199 2
a200 1
  ++modep;				/* skip over the mode */
d205 1
a205 1
      return 0;
d207 1
a207 1
      return 1 + bfd_get_signed_8 (core_bfd, modep);
d209 2
a210 1
      return 2 + bfd_get_signed_16 (core_bfd, modep);
d212 2
a213 1
      return 4 + bfd_get_signed_32 (core_bfd, modep);
d229 2
a230 2
  bfd_vma pc, destpc;
  static bfd_boolean inited = FALSE;
d255 3
a257 1
  for (pc = p_lowpc; pc < p_highpc; pc += length)
d260 1
a260 3
      instructp = ((unsigned char *) core_text_space
		   + pc - core_text_sect->vma);
      if ((*instructp & 0xff) == CALLS)
d267 4
a270 2
	       printf ("[findcall]\t0x%lx:calls", (unsigned long) pc));
	  firstmode = vax_operandmode (instructp + length);
d279 2
a280 2
	  length += vax_operandlength (instructp + length);
	  mode = vax_operandmode (instructp + length);
d302 2
a303 1
	      length += vax_operandlength (instructp + length);
d313 2
a314 1
	      destpc = pc + vax_offset (instructp + length);
d331 2
a332 1
		      length += vax_operandlength (instructp + length);
@


