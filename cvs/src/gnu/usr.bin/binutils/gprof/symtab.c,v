head	1.5;
access;
symbols
	OPENBSD_6_2_BASE:1.5
	OPENBSD_6_1:1.5.0.54
	OPENBSD_6_1_BASE:1.5
	OPENBSD_6_0:1.5.0.50
	OPENBSD_6_0_BASE:1.5
	OPENBSD_5_9:1.5.0.46
	OPENBSD_5_9_BASE:1.5
	OPENBSD_5_8:1.5.0.48
	OPENBSD_5_8_BASE:1.5
	OPENBSD_5_7:1.5.0.40
	OPENBSD_5_7_BASE:1.5
	OPENBSD_5_6:1.5.0.44
	OPENBSD_5_6_BASE:1.5
	OPENBSD_5_5:1.5.0.42
	OPENBSD_5_5_BASE:1.5
	OPENBSD_5_4:1.5.0.38
	OPENBSD_5_4_BASE:1.5
	OPENBSD_5_3:1.5.0.36
	OPENBSD_5_3_BASE:1.5
	OPENBSD_5_2:1.5.0.34
	OPENBSD_5_2_BASE:1.5
	OPENBSD_5_1_BASE:1.5
	OPENBSD_5_1:1.5.0.32
	OPENBSD_5_0:1.5.0.30
	OPENBSD_5_0_BASE:1.5
	OPENBSD_4_9:1.5.0.28
	OPENBSD_4_9_BASE:1.5
	OPENBSD_4_8:1.5.0.26
	OPENBSD_4_8_BASE:1.5
	OPENBSD_4_7:1.5.0.22
	OPENBSD_4_7_BASE:1.5
	OPENBSD_4_6:1.5.0.24
	OPENBSD_4_6_BASE:1.5
	OPENBSD_4_5:1.5.0.20
	OPENBSD_4_5_BASE:1.5
	OPENBSD_4_4:1.5.0.18
	OPENBSD_4_4_BASE:1.5
	OPENBSD_4_3:1.5.0.16
	OPENBSD_4_3_BASE:1.5
	OPENBSD_4_2:1.5.0.14
	OPENBSD_4_2_BASE:1.5
	OPENBSD_4_1:1.5.0.12
	OPENBSD_4_1_BASE:1.5
	OPENBSD_4_0:1.5.0.10
	OPENBSD_4_0_BASE:1.5
	OPENBSD_3_9:1.5.0.8
	OPENBSD_3_9_BASE:1.5
	OPENBSD_3_8:1.5.0.6
	OPENBSD_3_8_BASE:1.5
	OPENBSD_3_7:1.5.0.4
	OPENBSD_3_7_BASE:1.5
	BINUTILS_2_15:1.1.1.5
	OPENBSD_3_6:1.5.0.2
	OPENBSD_3_6_BASE:1.5
	BINUTILS-2_14:1.1.1.5
	OPENBSD_3_5:1.4.0.8
	OPENBSD_3_5_BASE:1.4
	OPENBSD_3_4:1.4.0.6
	OPENBSD_3_4_BASE:1.4
	OPENBSD_3_3:1.4.0.4
	OPENBSD_3_3_BASE:1.4
	OPENBSD_3_2:1.4.0.2
	OPENBSD_3_2_BASE:1.4
	binutils-2_11_2:1.1.1.4
	OPENBSD_3_1:1.3.0.8
	OPENBSD_3_1_BASE:1.3
	OPENBSD_3_0:1.3.0.6
	OPENBSD_3_0_BASE:1.3
	BINUTILS-2_10_1:1.1.1.3
	OPENBSD_2_9:1.3.0.4
	OPENBSD_2_9_BASE:1.3
	OPENBSD_2_8:1.3.0.2
	OPENBSD_2_8_BASE:1.3
	BINUTILS-2_10:1.1.1.3
	OPENBSD_2_7:1.2.0.18
	OPENBSD_2_7_BASE:1.2
	new-binutils:1.2.0.16
	OPENBSD_2_6:1.2.0.14
	OPENBSD_2_6_BASE:1.2
	OPENBSD_2_5:1.2.0.12
	OPENBSD_2_5_BASE:1.2
	OPENBSD_2_4:1.2.0.10
	OPENBSD_2_4_BASE:1.2
	OPENBSD_2_3:1.2.0.8
	OPENBSD_2_3_BASE:1.2
	OPENBSD_2_2:1.2.0.6
	OPENBSD_2_2_BASE:1.2
	BINUTILS-2_8_1:1.1.1.2
	OPENBSD_2_1:1.2.0.4
	OPENBSD_2_1_BASE:1.2
	CYGNUS-961112:1.1.1.2
	OPENBSD_2_0:1.2.0.2
	OPENBSD_2_0_BASE:1.2
	CYGNUS-960904:1.1.1.2
	CYGNUS-960609:1.1.1.2
	CYGNUS:1.1.1
	FSF_2_6:1.1.1.1
	FSF:1.1.1;
locks; strict;
comment	@ * @;


1.5
date	2004.05.17.21.54.48;	author drahn;	state Exp;
branches;
next	1.4;

1.4
date	2002.05.13.17.07.40;	author fgsch;	state Exp;
branches;
next	1.3;

1.3
date	2000.09.12.19.12.32;	author espie;	state Exp;
branches;
next	1.2;

1.2
date	96.06.10.10.53.19;	author niklas;	state Exp;
branches;
next	1.1;

1.1
date	96.01.08.11.10.16;	author niklas;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	96.01.08.11.10.16;	author niklas;	state Exp;
branches;
next	1.1.1.2;

1.1.1.2
date	96.06.09.19.43.27;	author niklas;	state Exp;
branches;
next	1.1.1.3;

1.1.1.3
date	2000.09.12.14.48.44;	author espie;	state Exp;
branches;
next	1.1.1.4;

1.1.1.4
date	2002.05.13.14.03.17;	author fgsch;	state Exp;
branches;
next	1.1.1.5;

1.1.1.5
date	2004.05.17.20.42.56;	author drahn;	state Exp;
branches;
next	;


desc
@@


1.5
log
@Resolve merge conflicts, adjust method of W^X handing (.sh files)
remove testsuites (not useable) remove mmalloc (not part of new binutils).
@
text
@/* symtab.c

   Copyright 2000, 2001, 2002 Free Software Foundation, Inc.

   This file is part of GNU Binutils.

   This program is free software; you can redistribute it and/or modify
   it under the terms of the GNU General Public License as published by
   the Free Software Foundation; either version 2 of the License, or
   (at your option) any later version.

   This program is distributed in the hope that it will be useful,
   but WITHOUT ANY WARRANTY; without even the implied warranty of
   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
   GNU General Public License for more details.

   You should have received a copy of the GNU General Public License
   along with this program; if not, write to the Free Software
   Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA
   02111-1307, USA.  */

#include "gprof.h"
#include "search_list.h"
#include "source.h"
#include "symtab.h"
#include "cg_arcs.h"
#include "corefile.h"

static int cmp_addr PARAMS ((const PTR, const PTR));

Sym_Table symtab;


/* Initialize a symbol (so it's empty).  */

void
sym_init (sym)
     Sym *sym;
{
  memset (sym, 0, sizeof (*sym));

  /* It is not safe to assume that a binary zero corresponds
     to a floating-point 0.0, so initialize floats explicitly.  */
  sym->hist.time = 0.0;
  sym->cg.child_time = 0.0;
  sym->cg.prop.fract = 0.0;
  sym->cg.prop.self = 0.0;
  sym->cg.prop.child = 0.0;
}


/* Compare the function entry-point of two symbols and return <0, =0,
   or >0 depending on whether the left value is smaller than, equal
   to, or greater than the right value.  If two symbols are equal
   but one has is_func set and the other doesn't, we make the
   non-function symbol one "bigger" so that the function symbol will
   survive duplicate removal.  Finally, if both symbols have the
   same is_func value, we discriminate against is_static such that
   the global symbol survives.  */

static int
cmp_addr (lp, rp)
     const PTR lp;
     const PTR rp;
{
  const Sym *left = (const Sym *) lp;
  const Sym *right = (const Sym *) rp;

  if (left->addr > right->addr)
    return 1;
  else if (left->addr < right->addr)
    return -1;

  if (left->is_func != right->is_func)
    return right->is_func - left->is_func;

  return left->is_static - right->is_static;
}


void
symtab_finalize (tab)
     Sym_Table *tab;
{
  Sym *src, *dst;
  bfd_vma prev_addr;

  if (!tab->len)
    return;

  /* Sort symbol table in order of increasing function addresses.  */
  qsort (tab->base, tab->len, sizeof (Sym), cmp_addr);

  /* Remove duplicate entries to speed-up later processing and
     set end_addr if its not set yet.  */
  prev_addr = tab->base[0].addr + 1;

  for (src = dst = tab->base; src < tab->limit; ++src)
    {
      if (src->addr == prev_addr)
	{
	  /* If same address, favor global symbol over static one,
	     then function over line number.  If both symbols are
	     either static or global and either function or line, check
	     whether one has name beginning with underscore while
	     the other doesn't.  In such cases, keep sym without
	     underscore.  This takes cares of compiler generated
	     symbols (such as __gnu_compiled, __c89_used, etc.).  */
	  if ((!src->is_static && dst[-1].is_static)
	      || ((src->is_static == dst[-1].is_static)
		  && ((src->is_func && !dst[-1].is_func)
		      || ((src->is_func == dst[-1].is_func)
			  && ((src->name[0] != '_' && dst[-1].name[0] == '_')
			      || (src->name[0]
				  && src->name[1] != '_'
				  && dst[-1].name[1] == '_'))))))
	    {
	      DBG (AOUTDEBUG | IDDEBUG,
		   printf ("[symtab_finalize] favor %s@@%c%c over %s@@%c%c",
			   src->name, src->is_static ? 't' : 'T',
			   src->is_func ? 'F' : 'f',
			   dst[-1].name, dst[-1].is_static ? 't' : 'T',
			   dst[-1].is_func ? 'F' : 'f');
		   printf (" (addr=%lx)\n", (unsigned long) src->addr));

	      dst[-1] = *src;
	    }
	  else
	    {
	      DBG (AOUTDEBUG | IDDEBUG,
		   printf ("[symtab_finalize] favor %s@@%c%c over %s@@%c%c",
			   dst[-1].name, dst[-1].is_static ? 't' : 'T',
			   dst[-1].is_func ? 'F' : 'f',
			   src->name, src->is_static ? 't' : 'T',
			   src->is_func ? 'F' : 'f');
		   printf (" (addr=%lx)\n", (unsigned long) src->addr));
	    }
	}
      else
	{
	  if (dst > tab->base && dst[-1].end_addr == 0)
	    dst[-1].end_addr = src->addr - 1;

	  /* Retain sym only if it has a non-empty address range.  */
	  if (!src->end_addr || src->addr <= src->end_addr)
	    {
	      *dst = *src;
	      dst++;
	      prev_addr = src->addr;
	    }
	}
    }

  if (tab->len > 0 && dst[-1].end_addr == 0)
    dst[-1].end_addr = core_text_sect->vma + core_text_sect->_raw_size - 1;

  DBG (AOUTDEBUG | IDDEBUG,
       printf ("[symtab_finalize]: removed %d duplicate entries\n",
	       tab->len - (int) (dst - tab->base)));

  tab->limit = dst;
  tab->len = tab->limit - tab->base;

  DBG (AOUTDEBUG | IDDEBUG,
       unsigned int j;

       for (j = 0; j < tab->len; ++j)
	 {
	   printf ("[symtab_finalize] 0x%lx-0x%lx\t%s\n",
		 (long) tab->base[j].addr, (long) tab->base[j].end_addr,
		 tab->base[j].name);
	 }
  );
}


#ifdef DEBUG

Sym *
dbg_sym_lookup (sym_tab, address)
     Sym_Table *sym_tab;
     bfd_vma address;
{
  long low, mid, high;
  Sym *sym;

  fprintf (stderr, "[dbg_sym_lookup] address 0x%lx\n",
	   (unsigned long) address);

  sym = sym_tab->base;
  for (low = 0, high = sym_tab->len - 1; low != high;)
    {
      mid = (high + low) >> 1;

      fprintf (stderr, "[dbg_sym_lookup] low=0x%lx, mid=0x%lx, high=0x%lx\n",
	       low, mid, high);
      fprintf (stderr, "[dbg_sym_lookup] sym[m]=0x%lx sym[m + 1]=0x%lx\n",
	       (unsigned long) sym[mid].addr,
	       (unsigned long) sym[mid + 1].addr);

      if (sym[mid].addr <= address && sym[mid + 1].addr > address)
	return &sym[mid];

      if (sym[mid].addr > address)
	high = mid;
      else
	low = mid + 1;
    }

  fprintf (stderr, "[dbg_sym_lookup] binary search fails???\n");

  return 0;
}

#endif	/* DEBUG */


/* Look up an address in the symbol-table that is sorted by address.
   If address does not hit any symbol, 0 is returned.  */
Sym *
sym_lookup (sym_tab, address)
     Sym_Table *sym_tab;
     bfd_vma address;
{
  long low, high;
  long mid = -1;
  Sym *sym;
#ifdef DEBUG
  int probes = 0;
#endif /* DEBUG */

  if (!sym_tab->len)
    return 0;

  sym = sym_tab->base;
  for (low = 0, high = sym_tab->len - 1; low != high;)
    {
      DBG (LOOKUPDEBUG, ++probes);
      mid = (high + low) / 2;

      if (sym[mid].addr <= address && sym[mid + 1].addr > address)
	{
	  if (address > sym[mid].end_addr)
	    {
	      /* Address falls into gap between
		 sym[mid] and sym[mid + 1].  */
	      return 0;
	    }
	  else
	    {
	      DBG (LOOKUPDEBUG,
		   printf ("[sym_lookup] %d probes (symtab->len=%u)\n",
			   probes, sym_tab->len - 1));
	      return &sym[mid];
	    }
	}

      if (sym[mid].addr > address)
	high = mid;
      else
	low = mid + 1;
    }

  if (sym[mid + 1].addr <= address)
    {
      if (address > sym[mid + 1].end_addr)
	{
	  /* Address is beyond end of sym[mid + 1].  */
	  return 0;
	}
      else
	{
	  DBG (LOOKUPDEBUG, printf ("[sym_lookup] %d (%u) probes, fall off\n",
				    probes, sym_tab->len - 1));
	  return &sym[mid + 1];
	}
    }

  return 0;
}
@


1.4
log
@resolve conflicts.
@
text
@d3 1
a3 1
   Copyright 2000, 2001 Free Software Foundation, Inc.
d23 3
d28 2
a29 1
#include "symtab.h"
d37 2
a38 1
DEFUN (sym_init, (sym), Sym * sym)
d62 3
a64 1
DEFUN (cmp_addr, (lp, rp), const PTR lp AND const PTR rp)
d66 2
a67 2
  Sym *left = (Sym *) lp;
  Sym *right = (Sym *) rp;
d82 2
a83 1
DEFUN (symtab_finalize, (tab), Sym_Table * tab)
d180 3
a182 1
DEFUN (dbg_sym_lookup, (symtab, address), Sym_Table * symtab AND bfd_vma address)
d190 2
a191 2
  sym = symtab->base;
  for (low = 0, high = symtab->len - 1; low != high;)
d221 3
a223 1
DEFUN (sym_lookup, (symtab, address), Sym_Table * symtab AND bfd_vma address)
d232 1
a232 1
  if (!symtab->len)
d235 2
a236 2
  sym = symtab->base;
  for (low = 0, high = symtab->len - 1; low != high;)
d253 1
a253 1
			   probes, symtab->len - 1));
d274 1
a274 1
				    probes, symtab->len - 1));
@


1.3
log
@Help stupid cvs fixing basic conflicts.
@
text
@d1 21
d30 2
a31 3
/*
 * Initialize a symbol (so it's empty).
 */
d36 3
a38 4
  /*
   * It is not safe to assume that a binary zero corresponds to
   * a floating-point 0.0, so initialize floats explicitly:
   */
d47 9
a55 10
/*
 * Compare the function entry-point of two symbols and return <0, =0,
 * or >0 depending on whether the left value is smaller than, equal
 * to, or greater than the right value.  If two symbols are equal
 * but one has is_func set and the other doesn't, we make the
 * non-function symbol one "bigger" so that the function symbol will
 * survive duplicate removal.  Finally, if both symbols have the
 * same is_func value, we discriminate against is_static such that
 * the global symbol survives.
 */
d63 1
a63 3
    {
      return 1;
    }
d65 1
a65 3
    {
      return -1;
    }
d68 1
a68 3
    {
      return right->is_func - left->is_func;
    }
d81 1
a81 3
    {
      return;
    }
d83 1
a83 3
  /*
   * Sort symbol table in order of increasing function addresses:
   */
d86 2
a87 4
  /*
   * Remove duplicate entries to speed-up later processing and
   * set end_addr if its not set yet:
   */
d89 1
d94 7
a100 9
	  /*
	   * If same address, favor global symbol over static one,
	   * then function over line number.  If both symbols are
	   * either static or global and either function or line, check
	   * whether one has name beginning with underscore while
	   * the other doesn't.  In such cases, keep sym without
	   * underscore.  This takes cares of compiler generated
	   * symbols (such as __gnu_compiled, __c89_used, etc.).
	   */
d117 1
d134 1
a134 3
	    {
	      dst[-1].end_addr = src->addr - 1;
	    }
d136 1
a136 1
	  /* retain sym only if it has a non-empty address range: */
d145 1
d147 1
a147 3
    {
      dst[-1].end_addr = core_text_sect->vma + core_text_sect->_raw_size - 1;
    }
d160 5
a164 5
       {
       printf ("[symtab_finalize] 0x%lx-0x%lx\t%s\n",
	       (long) tab->base[j].addr, (long) tab->base[j].end_addr,
	       tab->base[j].name);
       }
d184 1
d190 1
d192 2
a193 3
	{
	  return &sym[mid];
	}
d195 1
a195 3
	{
	  high = mid;
	}
d197 1
a197 3
	{
	  low = mid + 1;
	}
d199 1
d201 1
d208 2
a209 4
/*
 * Look up an address in the symbol-table that is sorted by address.
 * If address does not hit any symbol, 0 is returned.
 */
d221 1
a221 3
    {
      return 0;
    }
d228 1
d233 2
a234 4
	      /*
	       * Address falls into gap between sym[mid] and
	       * sym[mid + 1]:
	       */
d245 1
d247 1
a247 3
	{
	  high = mid;
	}
d249 1
a249 3
	{
	  low = mid + 1;
	}
d251 1
d256 1
a256 1
	  /* address is beyond end of sym[mid + 1]: */
d266 1
@


1.2
log
@Bring Cygnus versions into the trunk, keeping our local patches
@
text
@d3 1
a3 1
#include "core.h"
d88 3
a90 2
	   * If same address, favor global symbol over static one.
	   * If both symbols are either static or global, check
d98 6
a103 3
		  && ((src->name[0] != '_' && dst[-1].name[0] == '_')
		      || (src->name[0]
			  && src->name[1] != '_' && dst[-1].name[1] == '_'))))
d111 1
a111 1
		   printf (" (addr=%lx)\n", src->addr));
d122 1
a122 1
		   printf (" (addr=%lx)\n", src->addr));
d135 2
a136 1
	      *dst++ = *src;
d154 1
a154 1
       int j;
d174 2
a175 1
  fprintf (stderr, "[sym_lookup] address 0x%lx\n", address);
d184 2
a185 1
	       sym[mid].addr, sym[mid + 1].addr);
d199 1
a199 1
  fprintf (stderr, "[sym_lookup] binary search fails???\n");
d243 1
a243 1
		   printf ("[sym_lookup] %d probes (symtab->len=%d)\n",
d266 1
a266 1
	  DBG (LOOKUPDEBUG, printf ("[sym_lookup] %d (%d) probes, fall off\n",
@


1.1
log
@Initial revision
@
text
@d96 4
a99 4
	      || ((src->is_static == dst[-1].is_static) &&
		  (src->name[0] != '_' && dst[-1].name[0] == '_')
		  || (src->name[0]
		      && src->name[1] != '_' && dst[-1].name[1] == '_')))
@


1.1.1.1
log
@Initial GNU binutils 2.6 import
@
text
@@


1.1.1.2
log
@Import of binutils, gas, ld & gprof from Cygnus 960609 tree
@
text
@d96 4
a99 4
	      || ((src->is_static == dst[-1].is_static)
		  && ((src->name[0] != '_' && dst[-1].name[0] == '_')
		      || (src->name[0]
			  && src->name[1] != '_' && dst[-1].name[1] == '_'))))
@


1.1.1.3
log
@Import binutils-2.10
- only the binutils package (no gdb here)
- don't import libiberty and texinfo, they are elsewhere
- remove all .info* generated files
@
text
@d3 1
a3 1
#include "corefile.h"
d88 2
a89 3
	   * If same address, favor global symbol over static one,
	   * then function over line number.  If both symbols are
	   * either static or global and either function or line, check
d97 3
a99 6
		  && ((src->is_func && !dst[-1].is_func)
		      || ((src->is_func == dst[-1].is_func)
			  && ((src->name[0] != '_' && dst[-1].name[0] == '_')
			      || (src->name[0]
				  && src->name[1] != '_'
				  && dst[-1].name[1] == '_'))))))
d107 1
a107 1
		   printf (" (addr=%lx)\n", (unsigned long) src->addr));
d118 1
a118 1
		   printf (" (addr=%lx)\n", (unsigned long) src->addr));
d131 1
a131 2
	      *dst = *src;
	      dst++;
d149 1
a149 1
       unsigned int j;
d169 1
a169 2
  fprintf (stderr, "[dbg_sym_lookup] address 0x%lx\n",
	   (unsigned long) address);
d178 1
a178 2
	       (unsigned long) sym[mid].addr,
	       (unsigned long) sym[mid + 1].addr);
d192 1
a192 1
  fprintf (stderr, "[dbg_sym_lookup] binary search fails???\n");
d236 1
a236 1
		   printf ("[sym_lookup] %d probes (symtab->len=%u)\n",
d259 1
a259 1
	  DBG (LOOKUPDEBUG, printf ("[sym_lookup] %d (%u) probes, fall off\n",
@


1.1.1.4
log
@Import binutils-2.11.2
- only the binutils package (no gdb here)
- don't import libiberty and texinfo, they are elsewhere
- remove all .info* generated files
@
text
@a0 21
/* symtab.c

   Copyright 2000, 2001 Free Software Foundation, Inc.

   This file is part of GNU Binutils.

   This program is free software; you can redistribute it and/or modify
   it under the terms of the GNU General Public License as published by
   the Free Software Foundation; either version 2 of the License, or
   (at your option) any later version.

   This program is distributed in the hope that it will be useful,
   but WITHOUT ANY WARRANTY; without even the implied warranty of
   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
   GNU General Public License for more details.

   You should have received a copy of the GNU General Public License
   along with this program; if not, write to the Free Software
   Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA
   02111-1307, USA.  */

d9 3
a11 2
/* Initialize a symbol (so it's empty).  */

d16 4
a19 3

  /* It is not safe to assume that a binary zero corresponds
     to a floating-point 0.0, so initialize floats explicitly.  */
d28 10
a37 9
/* Compare the function entry-point of two symbols and return <0, =0,
   or >0 depending on whether the left value is smaller than, equal
   to, or greater than the right value.  If two symbols are equal
   but one has is_func set and the other doesn't, we make the
   non-function symbol one "bigger" so that the function symbol will
   survive duplicate removal.  Finally, if both symbols have the
   same is_func value, we discriminate against is_static such that
   the global symbol survives.  */

d45 3
a47 1
    return 1;
d49 3
a51 1
    return -1;
d54 3
a56 1
    return right->is_func - left->is_func;
d69 3
a71 1
    return;
d73 3
a75 1
  /* Sort symbol table in order of increasing function addresses.  */
d78 4
a81 2
  /* Remove duplicate entries to speed-up later processing and
     set end_addr if its not set yet.  */
a82 1

d87 9
a95 7
	  /* If same address, favor global symbol over static one,
	     then function over line number.  If both symbols are
	     either static or global and either function or line, check
	     whether one has name beginning with underscore while
	     the other doesn't.  In such cases, keep sym without
	     underscore.  This takes cares of compiler generated
	     symbols (such as __gnu_compiled, __c89_used, etc.).  */
a111 1

d128 3
a130 1
	    dst[-1].end_addr = src->addr - 1;
d132 1
a132 1
	  /* Retain sym only if it has a non-empty address range.  */
a140 1

d142 3
a144 1
    dst[-1].end_addr = core_text_sect->vma + core_text_sect->_raw_size - 1;
d157 5
a161 5
	 {
	   printf ("[symtab_finalize] 0x%lx-0x%lx\t%s\n",
		 (long) tab->base[j].addr, (long) tab->base[j].end_addr,
		 tab->base[j].name);
	 }
a180 1

a185 1

d187 3
a189 2
	return &sym[mid];

d191 3
a193 1
	high = mid;
d195 3
a197 1
	low = mid + 1;
a198 1

a199 1

d206 4
a209 2
/* Look up an address in the symbol-table that is sorted by address.
   If address does not hit any symbol, 0 is returned.  */
d221 3
a223 1
    return 0;
a229 1

d234 4
a237 2
	      /* Address falls into gap between
		 sym[mid] and sym[mid + 1].  */
a247 1

d249 3
a251 1
	high = mid;
d253 3
a255 1
	low = mid + 1;
a256 1

d261 1
a261 1
	  /* Address is beyond end of sym[mid + 1].  */
a270 1

@


1.1.1.5
log
@import binutils 2.14 (excluding testsuites, .info files, and .po files)
@
text
@d3 1
a3 1
   Copyright 2000, 2001, 2002 Free Software Foundation, Inc.
a22 3
#include "search_list.h"
#include "source.h"
#include "symtab.h"
d25 1
a25 2

static int cmp_addr PARAMS ((const PTR, const PTR));
d33 1
a33 2
sym_init (sym)
     Sym *sym;
d57 1
a57 3
cmp_addr (lp, rp)
     const PTR lp;
     const PTR rp;
d59 2
a60 2
  const Sym *left = (const Sym *) lp;
  const Sym *right = (const Sym *) rp;
d75 1
a75 2
symtab_finalize (tab)
     Sym_Table *tab;
d172 1
a172 3
dbg_sym_lookup (sym_tab, address)
     Sym_Table *sym_tab;
     bfd_vma address;
d180 2
a181 2
  sym = sym_tab->base;
  for (low = 0, high = sym_tab->len - 1; low != high;)
d211 1
a211 3
sym_lookup (sym_tab, address)
     Sym_Table *sym_tab;
     bfd_vma address;
d220 1
a220 1
  if (!sym_tab->len)
d223 2
a224 2
  sym = sym_tab->base;
  for (low = 0, high = sym_tab->len - 1; low != high;)
d241 1
a241 1
			   probes, sym_tab->len - 1));
d262 1
a262 1
				    probes, sym_tab->len - 1));
@


