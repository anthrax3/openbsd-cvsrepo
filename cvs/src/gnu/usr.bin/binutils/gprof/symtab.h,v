head	1.6;
access;
symbols
	OPENBSD_6_1:1.6.0.52
	OPENBSD_6_1_BASE:1.6
	OPENBSD_6_0:1.6.0.50
	OPENBSD_6_0_BASE:1.6
	OPENBSD_5_9:1.6.0.46
	OPENBSD_5_9_BASE:1.6
	OPENBSD_5_8:1.6.0.48
	OPENBSD_5_8_BASE:1.6
	OPENBSD_5_7:1.6.0.40
	OPENBSD_5_7_BASE:1.6
	OPENBSD_5_6:1.6.0.44
	OPENBSD_5_6_BASE:1.6
	OPENBSD_5_5:1.6.0.42
	OPENBSD_5_5_BASE:1.6
	OPENBSD_5_4:1.6.0.38
	OPENBSD_5_4_BASE:1.6
	OPENBSD_5_3:1.6.0.36
	OPENBSD_5_3_BASE:1.6
	OPENBSD_5_2:1.6.0.34
	OPENBSD_5_2_BASE:1.6
	OPENBSD_5_1_BASE:1.6
	OPENBSD_5_1:1.6.0.32
	OPENBSD_5_0:1.6.0.30
	OPENBSD_5_0_BASE:1.6
	OPENBSD_4_9:1.6.0.28
	OPENBSD_4_9_BASE:1.6
	OPENBSD_4_8:1.6.0.26
	OPENBSD_4_8_BASE:1.6
	OPENBSD_4_7:1.6.0.22
	OPENBSD_4_7_BASE:1.6
	OPENBSD_4_6:1.6.0.24
	OPENBSD_4_6_BASE:1.6
	OPENBSD_4_5:1.6.0.20
	OPENBSD_4_5_BASE:1.6
	OPENBSD_4_4:1.6.0.18
	OPENBSD_4_4_BASE:1.6
	OPENBSD_4_3:1.6.0.16
	OPENBSD_4_3_BASE:1.6
	OPENBSD_4_2:1.6.0.14
	OPENBSD_4_2_BASE:1.6
	OPENBSD_4_1:1.6.0.12
	OPENBSD_4_1_BASE:1.6
	OPENBSD_4_0:1.6.0.10
	OPENBSD_4_0_BASE:1.6
	OPENBSD_3_9:1.6.0.8
	OPENBSD_3_9_BASE:1.6
	OPENBSD_3_8:1.6.0.6
	OPENBSD_3_8_BASE:1.6
	OPENBSD_3_7:1.6.0.4
	OPENBSD_3_7_BASE:1.6
	BINUTILS_2_15:1.1.1.6
	OPENBSD_3_6:1.6.0.2
	OPENBSD_3_6_BASE:1.6
	BINUTILS-2_14:1.1.1.6
	OPENBSD_3_5:1.5.0.8
	OPENBSD_3_5_BASE:1.5
	OPENBSD_3_4:1.5.0.6
	OPENBSD_3_4_BASE:1.5
	OPENBSD_3_3:1.5.0.4
	OPENBSD_3_3_BASE:1.5
	OPENBSD_3_2:1.5.0.2
	OPENBSD_3_2_BASE:1.5
	binutils-2_11_2:1.1.1.5
	OPENBSD_3_1:1.4.0.8
	OPENBSD_3_1_BASE:1.4
	OPENBSD_3_0:1.4.0.6
	OPENBSD_3_0_BASE:1.4
	BINUTILS-2_10_1:1.1.1.4
	OPENBSD_2_9:1.4.0.4
	OPENBSD_2_9_BASE:1.4
	OPENBSD_2_8:1.4.0.2
	OPENBSD_2_8_BASE:1.4
	BINUTILS-2_10:1.1.1.4
	OPENBSD_2_7:1.2.0.18
	OPENBSD_2_7_BASE:1.2
	new-binutils:1.2.0.16
	OPENBSD_2_6:1.2.0.14
	OPENBSD_2_6_BASE:1.2
	OPENBSD_2_5:1.2.0.12
	OPENBSD_2_5_BASE:1.2
	OPENBSD_2_4:1.2.0.10
	OPENBSD_2_4_BASE:1.2
	OPENBSD_2_3:1.2.0.8
	OPENBSD_2_3_BASE:1.2
	OPENBSD_2_2:1.2.0.6
	OPENBSD_2_2_BASE:1.2
	BINUTILS-2_8_1:1.1.1.3
	OPENBSD_2_1:1.2.0.4
	OPENBSD_2_1_BASE:1.2
	CYGNUS-961112:1.1.1.2
	OPENBSD_2_0:1.2.0.2
	OPENBSD_2_0_BASE:1.2
	CYGNUS-960904:1.1.1.2
	CYGNUS-960609:1.1.1.2
	CYGNUS:1.1.1
	FSF_2_6:1.1.1.1
	FSF:1.1.1;
locks; strict;
comment	@ * @;


1.6
date	2004.05.17.21.54.48;	author drahn;	state Exp;
branches;
next	1.5;

1.5
date	2002.05.13.17.07.40;	author fgsch;	state Exp;
branches;
next	1.4;

1.4
date	2000.09.12.22.26.04;	author espie;	state Exp;
branches;
next	1.3;

1.3
date	2000.09.12.19.12.32;	author espie;	state Exp;
branches;
next	1.2;

1.2
date	96.06.10.10.53.20;	author niklas;	state Exp;
branches;
next	1.1;

1.1
date	96.01.08.11.10.16;	author niklas;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	96.01.08.11.10.16;	author niklas;	state Exp;
branches;
next	1.1.1.2;

1.1.1.2
date	96.06.09.19.43.28;	author niklas;	state Exp;
branches;
next	1.1.1.3;

1.1.1.3
date	97.05.29.09.30.11;	author niklas;	state Exp;
branches;
next	1.1.1.4;

1.1.1.4
date	2000.09.12.14.48.44;	author espie;	state Exp;
branches;
next	1.1.1.5;

1.1.1.5
date	2002.05.13.14.03.17;	author fgsch;	state Exp;
branches;
next	1.1.1.6;

1.1.1.6
date	2004.05.17.20.42.56;	author drahn;	state Exp;
branches;
next	;


desc
@@


1.6
log
@Resolve merge conflicts, adjust method of W^X handing (.sh files)
remove testsuites (not useable) remove mmalloc (not part of new binutils).
@
text
@/* symtab.h

   Copyright 2000, 2001, 2002 Free Software Foundation, Inc.

This file is part of GNU Binutils.

This program is free software; you can redistribute it and/or modify
it under the terms of the GNU General Public License as published by
the Free Software Foundation; either version 2 of the License, or
(at your option) any later version.

This program is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
GNU General Public License for more details.

You should have received a copy of the GNU General Public License
along with this program; if not, write to the Free Software
Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA 02111-1307, USA.  */

#ifndef symtab_h
#define symtab_h

/* For a profile to be intelligible to a human user, it is necessary
   to map code-addresses into source-code information.  Source-code
   information can be any combination of: (i) function-name, (ii)
   source file-name, and (iii) source line number.

   The symbol table is used to map addresses into source-code
   information.  */

#define NBBS 10

/* Symbol-entry.  For each external in the specified file we gather
   its address, the number of calls and compute its share of cpu time.  */
typedef struct sym
  {
    /* Common information:

       In the symbol-table, fields ADDR and FUNC_NAME are guaranteed
       to contain valid information.  FILE may be 0, if unknown and
       LINE_NUM maybe 0 if unknown.  */

    bfd_vma addr;		/* Address of entry point.  */
    bfd_vma end_addr;		/* End-address.  */
    const char *name;		/* Name of function this sym is from.  */
    Source_File *file;		/* Source file symbol comes from.  */
    int line_num;		/* Source line number.  */
    unsigned int		/* Boolean fields:  */
      is_func:1,		/*  Is this a function entry point?  */
      is_static:1,		/*  Is this a local (static) symbol?  */
      is_bb_head:1,		/*  Is this the head of a basic-blk?  */
      mapped:1,			/*  This symbol was mapped to another name.  */
      has_been_placed:1;	/*  Have we placed this symbol?  */
    unsigned long ncalls;	/* How many times executed  */
    int nuses;			/* How many times this symbol appears in
				   a particular context.  */
    bfd_vma bb_addr[NBBS];	/* Address of basic-block start.  */
    unsigned long bb_calls[NBBS];/* How many times basic-block was called.  */
    struct sym *next;		/* For building chains of syms.  */
    struct sym *prev;		/* For building chains of syms.  */

    /* Profile specific information:  */

    /* Histogram specific information:  */
    struct
      {
	double time;		/* (Weighted) ticks in this routine.  */
	bfd_vma scaled_addr;	/* Scaled entry point.  */
      }
    hist;

    /* Call-graph specific information:  */
    struct
      {
	unsigned long self_calls; /* How many calls to self.  */
	double child_time;	/* Cumulative ticks in children.  */
	int index;		/* Index in the graph list.  */
	int top_order;		/* Graph call chain top-sort order.  */
	bfd_boolean print_flag;	/* Should this be printed?  */
	struct
	  {
	    double fract;	/* What % of time propagates.  */
	    double self;	/* How much self time propagates.  */
	    double child;	/* How much child time propagates.  */
	  }
	prop;
	struct
	  {
	    int num;		/* Internal number of cycle on.  */
	    struct sym *head;	/* Head of cycle.  */
	    struct sym *next;	/* Next member of cycle.  */
	  }
	cyc;
	struct arc *parents;	/* List of caller arcs.  */
	struct arc *children;	/* List of callee arcs.  */
      }
    cg;
  }
Sym;

/* Symbol-tables are always assumed to be sorted
   in increasing order of addresses.  */
typedef struct
  {
    unsigned int len;		/* # of symbols in this table.  */
    Sym *base;			/* First element in symbol table.  */
    Sym *limit;			/* Limit = base + len.  */
  }
Sym_Table;

extern Sym_Table symtab;	/* The symbol table.  */

extern void sym_init        PARAMS ((Sym *));
extern void symtab_finalize PARAMS ((Sym_Table *));
#ifdef DEBUG
extern Sym *dbg_sym_lookup  PARAMS ((Sym_Table *, bfd_vma));
#endif
extern Sym *sym_lookup      PARAMS ((Sym_Table *, bfd_vma));
extern void find_call       PARAMS ((Sym *, bfd_vma, bfd_vma));

#endif /* symtab_h */
@


1.5
log
@resolve conflicts.
@
text
@d3 1
a3 1
   Copyright 2000, 2001 Free Software Foundation, Inc.
a23 3
#include "bfd.h"
#include "gprof.h"

a31 2
#include "source.h"

d80 1
a80 1
	bool print_flag;	/* Should this be printed?  */
d116 3
@


1.4
log
@Resolve other problems that dumb cvs can't find out by itself.

(trivial part done, `interesting' patches remain)
@
text
@d1 20
d27 7
a33 9
/*
 * For a profile to be intelligible to a human user, it is necessary
 * to map code-addresses into source-code information.  Source-code
 * information can be any combination of: (i) function-name, (ii)
 * source file-name, and (iii) source line number.
 *
 * The symbol table is used to map addresses into source-code
 * information.
 */
d39 2
a40 4
/*
 * Symbol-entry.  For each external in the specified file we gather
 * its address, the number of calls and compute its share of cpu time.
 */
d43 24
a66 24
    /*
     * Common information:
     *
     * In the symbol-table, fields ADDR and FUNC_NAME are guaranteed
     * to contain valid information.  FILE may be 0, if unknown and
     * LINE_NUM maybe 0 if unknown.
     */
    bfd_vma addr;		/* address of entry point */
    bfd_vma end_addr;		/* end-address */
    const char *name;		/* name of function this sym is from */
    Source_File *file;		/* source file symbol comes from */
    int line_num;		/* source line number */
    unsigned int is_func:1,	/* is this a function entry point? */
      is_static:1,		/* is this a local (static) symbol? */
      is_bb_head:1,		/* is this the head of a basic-blk? */
      mapped:1,			/* this symbol was mapped to another name */
      has_been_placed:1;	/* have we placed this symbol?  */
    unsigned long ncalls;	/* how many times executed */
    int nuses;			/* how many times this symbol appears in
				   a particular context */
    bfd_vma bb_addr[NBBS];	/* address of basic-block start */
    unsigned long bb_calls[NBBS]; /* how many times basic-block was called */
    struct sym *next;		/* for building chains of syms */
    struct sym *prev;		/* for building chains of syms */
d68 1
a68 1
    /* profile-specific information: */
d70 1
a70 1
    /* histogram specific info: */
d73 2
a74 2
	double time;		/* (weighted) ticks in this routine */
	bfd_vma scaled_addr;	/* scaled entry point */
d78 1
a78 1
    /* call-graph specific info: */
d81 5
a85 5
	unsigned long self_calls; /* how many calls to self */
	double child_time;	/* cumulative ticks in children */
	int index;		/* index in the graph list */
	int top_order;		/* graph call chain top-sort order */
	bool print_flag;	/* should this be printed? */
d88 3
a90 3
	    double fract;	/* what % of time propagates */
	    double self;	/* how much self time propagates */
	    double child;	/* how much child time propagates */
d95 3
a97 3
	    int num;		/* internal number of cycle on */
	    struct sym *head;	/* head of cycle */
	    struct sym *next;	/* next member of cycle */
d100 2
a101 2
	struct arc *parents;	/* list of caller arcs */
	struct arc *children;	/* list of callee arcs */
d107 2
a108 4
/*
 * Symbol-tables are always assumed to be sorted in increasing order
 * of addresses:
 */
d111 3
a113 3
    unsigned int len;		/* # of symbols in this table */
    Sym *base;			/* first element in symbol table */
    Sym *limit;			/* limit = base + len */
d117 1
a117 5
extern Sym_Table symtab;	/* the symbol table */

extern void sym_init PARAMS ((Sym * sym));
extern void symtab_finalize PARAMS ((Sym_Table * symtab));
extern Sym *sym_lookup PARAMS ((Sym_Table * symtab, bfd_vma address));
d119 4
a122 1
extern void find_call PARAMS ((Sym *, bfd_vma, bfd_vma));
@


1.3
log
@Help stupid cvs fixing basic conflicts.
@
text
@d109 2
@


1.2
log
@Bring Cygnus versions into the trunk, keeping our local patches
@
text
@d19 2
d44 1
a44 1
    int ncalls;			/* how many times executed */
d47 2
d65 1
a65 1
	int self_calls;		/* how many calls to self */
d97 1
a97 1
    int len;			/* # of symbols in this table */
@


1.1
log
@Initial revision
@
text
@d39 3
a41 1
      is_bb_head:1;		/* is this the head of a basic-blk? */
d43 2
d46 1
@


1.1.1.1
log
@Initial GNU binutils 2.6 import
@
text
@@


1.1.1.2
log
@Import of binutils, gas, ld & gprof from Cygnus 960609 tree
@
text
@d39 1
a39 3
      is_bb_head:1,		/* is this the head of a basic-blk? */
      mapped:1,			/* this symbol was mapped to another name */
      has_been_placed:1;	/* have we placed this symbol?  */
a40 2
    int nuses;			/* how many times this symbol appears in
				   a particular context */
a41 1
    struct sym *prev;		/* for building chains of syms */
@


1.1.1.3
log
@Import of binutils-2.8.1 from Cygnus/FSF
@
text
@a104 2
extern void find_call PARAMS ((Sym *, bfd_vma, bfd_vma));

@


1.1.1.4
log
@Import binutils-2.10
- only the binutils package (no gdb here)
- don't import libiberty and texinfo, they are elsewhere
- remove all .info* generated files
@
text
@a18 2
#define NBBS 10

d42 1
a42 1
    unsigned long ncalls;	/* how many times executed */
a44 2
    bfd_vma bb_addr[NBBS];	/* address of basic-block start */
    unsigned long bb_calls[NBBS]; /* how many times basic-block was called */
d61 1
a61 1
	unsigned long self_calls; /* how many calls to self */
d93 1
a93 1
    unsigned int len;		/* # of symbols in this table */
@


1.1.1.5
log
@Import binutils-2.11.2
- only the binutils package (no gdb here)
- don't import libiberty and texinfo, they are elsewhere
- remove all .info* generated files
@
text
@a0 20
/* symtab.h

   Copyright 2000, 2001 Free Software Foundation, Inc.

This file is part of GNU Binutils.

This program is free software; you can redistribute it and/or modify
it under the terms of the GNU General Public License as published by
the Free Software Foundation; either version 2 of the License, or
(at your option) any later version.

This program is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
GNU General Public License for more details.

You should have received a copy of the GNU General Public License
along with this program; if not, write to the Free Software
Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA 02111-1307, USA.  */

d7 9
a15 7
/* For a profile to be intelligible to a human user, it is necessary
   to map code-addresses into source-code information.  Source-code
   information can be any combination of: (i) function-name, (ii)
   source file-name, and (iii) source line number.

   The symbol table is used to map addresses into source-code
   information.  */
d21 4
a24 2
/* Symbol-entry.  For each external in the specified file we gather
   its address, the number of calls and compute its share of cpu time.  */
d27 24
a50 24
    /* Common information:

       In the symbol-table, fields ADDR and FUNC_NAME are guaranteed
       to contain valid information.  FILE may be 0, if unknown and
       LINE_NUM maybe 0 if unknown.  */

    bfd_vma addr;		/* Address of entry point.  */
    bfd_vma end_addr;		/* End-address.  */
    const char *name;		/* Name of function this sym is from.  */
    Source_File *file;		/* Source file symbol comes from.  */
    int line_num;		/* Source line number.  */
    unsigned int		/* Boolean fields:  */
      is_func:1,		/*  Is this a function entry point?  */
      is_static:1,		/*  Is this a local (static) symbol?  */
      is_bb_head:1,		/*  Is this the head of a basic-blk?  */
      mapped:1,			/*  This symbol was mapped to another name.  */
      has_been_placed:1;	/*  Have we placed this symbol?  */
    unsigned long ncalls;	/* How many times executed  */
    int nuses;			/* How many times this symbol appears in
				   a particular context.  */
    bfd_vma bb_addr[NBBS];	/* Address of basic-block start.  */
    unsigned long bb_calls[NBBS];/* How many times basic-block was called.  */
    struct sym *next;		/* For building chains of syms.  */
    struct sym *prev;		/* For building chains of syms.  */
d52 1
a52 1
    /* Profile specific information:  */
d54 1
a54 1
    /* Histogram specific information:  */
d57 2
a58 2
	double time;		/* (Weighted) ticks in this routine.  */
	bfd_vma scaled_addr;	/* Scaled entry point.  */
d62 1
a62 1
    /* Call-graph specific information:  */
d65 5
a69 5
	unsigned long self_calls; /* How many calls to self.  */
	double child_time;	/* Cumulative ticks in children.  */
	int index;		/* Index in the graph list.  */
	int top_order;		/* Graph call chain top-sort order.  */
	bool print_flag;	/* Should this be printed?  */
d72 3
a74 3
	    double fract;	/* What % of time propagates.  */
	    double self;	/* How much self time propagates.  */
	    double child;	/* How much child time propagates.  */
d79 3
a81 3
	    int num;		/* Internal number of cycle on.  */
	    struct sym *head;	/* Head of cycle.  */
	    struct sym *next;	/* Next member of cycle.  */
d84 2
a85 2
	struct arc *parents;	/* List of caller arcs.  */
	struct arc *children;	/* List of callee arcs.  */
d91 4
a94 2
/* Symbol-tables are always assumed to be sorted
   in increasing order of addresses.  */
d97 3
a99 3
    unsigned int len;		/* # of symbols in this table.  */
    Sym *base;			/* First element in symbol table.  */
    Sym *limit;			/* Limit = base + len.  */
d103 5
a107 1
extern Sym_Table symtab;	/* The symbol table.  */
d109 1
a109 4
extern void sym_init        PARAMS ((Sym *));
extern void symtab_finalize PARAMS ((Sym_Table *));
extern Sym *sym_lookup      PARAMS ((Sym_Table *, bfd_vma));
extern void find_call       PARAMS ((Sym *, bfd_vma, bfd_vma));
@


1.1.1.6
log
@import binutils 2.14 (excluding testsuites, .info files, and .po files)
@
text
@d3 1
a3 1
   Copyright 2000, 2001, 2002 Free Software Foundation, Inc.
d24 3
d35 2
d85 1
a85 1
	bfd_boolean print_flag;	/* Should this be printed?  */
a120 3
#ifdef DEBUG
extern Sym *dbg_sym_lookup  PARAMS ((Sym_Table *, bfd_vma));
#endif
@


