head	1.4;
access;
symbols
	OPENBSD_5_3:1.3.0.62
	OPENBSD_5_3_BASE:1.3
	OPENBSD_5_2:1.3.0.60
	OPENBSD_5_2_BASE:1.3
	OPENBSD_5_1_BASE:1.3
	OPENBSD_5_1:1.3.0.58
	OPENBSD_5_0:1.3.0.56
	OPENBSD_5_0_BASE:1.3
	OPENBSD_4_9:1.3.0.54
	OPENBSD_4_9_BASE:1.3
	OPENBSD_4_8:1.3.0.52
	OPENBSD_4_8_BASE:1.3
	OPENBSD_4_7:1.3.0.48
	OPENBSD_4_7_BASE:1.3
	OPENBSD_4_6:1.3.0.50
	OPENBSD_4_6_BASE:1.3
	OPENBSD_4_5:1.3.0.46
	OPENBSD_4_5_BASE:1.3
	OPENBSD_4_4:1.3.0.44
	OPENBSD_4_4_BASE:1.3
	OPENBSD_4_3:1.3.0.42
	OPENBSD_4_3_BASE:1.3
	OPENBSD_4_2:1.3.0.40
	OPENBSD_4_2_BASE:1.3
	OPENBSD_4_1:1.3.0.38
	OPENBSD_4_1_BASE:1.3
	OPENBSD_4_0:1.3.0.36
	OPENBSD_4_0_BASE:1.3
	OPENBSD_3_9:1.3.0.34
	OPENBSD_3_9_BASE:1.3
	OPENBSD_3_8:1.3.0.32
	OPENBSD_3_8_BASE:1.3
	OPENBSD_3_7:1.3.0.30
	OPENBSD_3_7_BASE:1.3
	OPENBSD_3_6:1.3.0.28
	OPENBSD_3_6_BASE:1.3
	OPENBSD_3_5:1.3.0.26
	OPENBSD_3_5_BASE:1.3
	OPENBSD_3_4:1.3.0.24
	OPENBSD_3_4_BASE:1.3
	OPENBSD_3_3:1.3.0.22
	OPENBSD_3_3_BASE:1.3
	OPENBSD_3_2:1.3.0.20
	OPENBSD_3_2_BASE:1.3
	OPENBSD_3_1:1.3.0.18
	OPENBSD_3_1_BASE:1.3
	OPENBSD_3_0:1.3.0.16
	OPENBSD_3_0_BASE:1.3
	OPENBSD_2_9:1.3.0.14
	OPENBSD_2_9_BASE:1.3
	OPENBSD_2_8:1.3.0.12
	OPENBSD_2_8_BASE:1.3
	OPENBSD_2_7:1.3.0.10
	OPENBSD_2_7_BASE:1.3
	OPENBSD_2_6:1.3.0.8
	OPENBSD_2_6_BASE:1.3
	OPENBSD_2_5:1.3.0.6
	OPENBSD_2_5_BASE:1.3
	OPENBSD_2_4:1.3.0.4
	OPENBSD_2_4_BASE:1.3
	OPENBSD_2_3:1.3.0.2
	OPENBSD_2_3_BASE:1.3
	OPENBSD_2_2:1.1.1.1.0.6
	OPENBSD_2_2_BASE:1.1.1.1
	OPENBSD_2_1:1.1.1.1.0.4
	OPENBSD_2_1_BASE:1.1.1.1
	OPENBSD_2_0:1.1.1.1.0.2
	OPENBSD_2_0_BASE:1.1.1.1
	netbsd_1_1:1.1.1.1;
locks; strict;
comment	@ * @;


1.4
date	2013.07.05.21.31.45;	author miod;	state dead;
branches;
next	1.3;

1.3
date	98.02.28.00.51.59;	author niklas;	state Exp;
branches;
next	1.2;

1.2
date	98.02.15.18.48.59;	author niklas;	state Exp;
branches;
next	1.1;

1.1
date	95.10.18.08.39.00;	author deraadt;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	95.10.18.08.39.00;	author deraadt;	state Exp;
branches;
next	;


desc
@@


1.4
log
@Put the a.out as and ld to rest in the Attic, finally!
@
text
@/*	$OpenBSD: struc-symbol.h,v 1.3 1998/02/28 00:51:59 niklas Exp $	*/

/* struct_symbol.h - Internal symbol structure
   Copyright (C) 1987, 1992 Free Software Foundation, Inc.
   
   This file is part of GAS, the GNU Assembler.
   
   GAS is free software; you can redistribute it and/or modify
   it under the terms of the GNU General Public License as published by
   the Free Software Foundation; either version 2, or (at your option)
   any later version.
   
   GAS is distributed in the hope that it will be useful,
   but WITHOUT ANY WARRANTY; without even the implied warranty of
   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
   GNU General Public License for more details.
   
   oYou should have received a copy of the GNU General Public License
   along with GAS; see the file COPYING.  If not, write to
   the Free Software Foundation, 675 Mass Ave, Cambridge, MA 02139, USA.  */

#ifndef __struc_symbol_h__
#define __struc_symbol_h__

struct symbol			/* our version of an nlist node */
{
	obj_symbol_type sy_symbol;	/* what we write in .o file (if permitted) */
	unsigned long sy_name_offset;	/* 4-origin position of sy_name in symbols */
	/* part of object file. */
	/* 0 for (nameless) .stabd symbols. */
	/* Not used until write_object_file() time. */
	long	sy_number;	/* 24 bit symbol number. */
	/* Symbol numbers start at 0 and are */
	/* unsigned. */

	/* The value of the symbol.  */
	expressionS sy_value;

	struct symbol *sy_next;	/* forward chain, or NULL */
#ifdef SYMBOLS_NEED_BACKPOINTERS
	struct symbol *sy_previous;	/* backward chain, or NULL */
#endif /* SYMBOLS_NEED_BACKPOINTERS */
	struct frag *sy_frag;	/* NULL or -> frag this symbol attaches to. */

#ifdef PIC
	/* Force symbol into symbol table, even if local */
	int	sy_forceout;
#endif
	/* Size of symbol as given by the .size directive */
	void 	*sy_sizexp;	/* (expressionS *) */

	/* Auxiliary type information as given by the .type directive */
	unsigned char	sy_aux;
#define AUX_OBJECT	1
#define AUX_FUNC	2
	unsigned char	sy_bind;
#define BIND_LOCAL	0	/* currently not used */
#define BIND_GLOBAL	1	/* currently not used */
#define BIND_WEAK	2

	/* Whether symbol value has been completely resolved (used during
	   final pass over symbol table).  */
	int sy_resolved : 1;
	/* Whether the symbol value is currently being resolved (used to
	   detect loops in symbol dependencies).  */
	int sy_resolving : 1;
};

typedef struct symbol symbolS;

#ifdef PIC
symbolS *GOT_symbol;		/* Pre-defined "__GLOBAL_OFFSET_TABLE" */
int	got_referenced;
#endif

typedef unsigned valueT;	/* The type of n_value. Helps casting. */

#ifndef WORKING_DOT_WORD
struct broken_word {
	struct broken_word *next_broken_word;/* One of these strucs per .word x-y */
	fragS	*frag;		/* Which frag its in */
	char	*word_goes_here;/* Where in the frag it is */
	fragS	*dispfrag;	/* where to add the break */
	symbolS	*add;		/* symbol_x */
	symbolS	*sub;		/* - symbol_y */
	long	addnum;		/* + addnum */
	int	added;		/* nasty thing happend yet? */
	/* 1: added and has a long-jump */
	/* 2: added but uses someone elses long-jump */
	struct broken_word *use_jump; /* points to broken_word with a similar
					 long-jump */
};
extern struct broken_word *broken_words;
#endif /* ndef WORKING_DOT_WORD */

#define	SEGMENT_TO_SYMBOL_TYPE(seg)  (seg_N_TYPE[(int) (seg)])
extern const short seg_N_TYPE[]; /* subseg.c */

#ifdef SYMBOLS_NEED_BACKPOINTERS
#if __STDC__ == 1

void symbol_clear_list_pointers(symbolS *symbolP);
void symbol_insert(symbolS *addme, symbolS *target, symbolS **rootP, symbolS **lastP);
void symbol_remove(symbolS *symbolP, symbolS **rootP, symbolS **lastP);
void verify_symbol_chain(symbolS *rootP, symbolS *lastP);

#else /* not __STDC__ */

void symbol_clear_list_pointers();
void symbol_insert();
void symbol_remove();
void verify_symbol_chain();

#endif /* not __STDC__ */

#define symbol_previous(s) ((s)->sy_previous)

#else /* SYMBOLS_NEED_BACKPOINTERS */

#define symbol_clear_list_pointers(clearme) {clearme->sy_next = NULL;}

#endif /* SYMBOLS_NEED_BACKPOINTERS */

#if __STDC__ == 1
void symbol_append(symbolS *addme, symbolS *target, symbolS **rootP, symbolS **lastP);
#else /* not __STDC__ */
void symbol_append();
#endif /* not __STDC__ */

#define symbol_next(s)	((s)->sy_next)

#endif /* __struc_symbol_h__ */

/*
 * Local Variables:
 * comment-column: 0
 * fill-column: 131
 * End:
 */

/* end of struc-symbol.h */
@


1.3
log
@A merge of the  late resolution of symbols code Ian Lance Taylor added to
gas2 back in 1993.  gcc2.8 generates code which relies on this.
@
text
@d1 1
a1 1
/*	$OpenBSD: struc-symbol.h,v 1.2 1998/02/15 18:48:59 niklas Exp $	*/
@


1.2
log
@Merge of NetBSD changes + $OpenBSD$ tags
@
text
@d1 1
a1 1
/*	$OpenBSD: struc-symbol.h,v 1.1.1.1 1995/10/18 08:39:00 deraadt Exp $	*/
d35 4
a43 2
	struct symbol *sy_forward;	/* value is really that of this other symbol */
	/* We will probably want to add a sy_segment here soon. */
d60 7
@


1.1
log
@Initial revision
@
text
@d1 2
a20 4
/*
 * $Id: struc-symbol.h,v 1.8 1994/12/18 16:12:45 pk Exp $
 */

@


1.1.1.1
log
@initial import of NetBSD tree
@
text
@@

