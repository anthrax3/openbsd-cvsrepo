head	1.3;
access;
symbols
	OPENBSD_5_3:1.2.0.62
	OPENBSD_5_3_BASE:1.2
	OPENBSD_5_2:1.2.0.60
	OPENBSD_5_2_BASE:1.2
	OPENBSD_5_1_BASE:1.2
	OPENBSD_5_1:1.2.0.58
	OPENBSD_5_0:1.2.0.56
	OPENBSD_5_0_BASE:1.2
	OPENBSD_4_9:1.2.0.54
	OPENBSD_4_9_BASE:1.2
	OPENBSD_4_8:1.2.0.52
	OPENBSD_4_8_BASE:1.2
	OPENBSD_4_7:1.2.0.48
	OPENBSD_4_7_BASE:1.2
	OPENBSD_4_6:1.2.0.50
	OPENBSD_4_6_BASE:1.2
	OPENBSD_4_5:1.2.0.46
	OPENBSD_4_5_BASE:1.2
	OPENBSD_4_4:1.2.0.44
	OPENBSD_4_4_BASE:1.2
	OPENBSD_4_3:1.2.0.42
	OPENBSD_4_3_BASE:1.2
	OPENBSD_4_2:1.2.0.40
	OPENBSD_4_2_BASE:1.2
	OPENBSD_4_1:1.2.0.38
	OPENBSD_4_1_BASE:1.2
	OPENBSD_4_0:1.2.0.36
	OPENBSD_4_0_BASE:1.2
	OPENBSD_3_9:1.2.0.34
	OPENBSD_3_9_BASE:1.2
	OPENBSD_3_8:1.2.0.32
	OPENBSD_3_8_BASE:1.2
	OPENBSD_3_7:1.2.0.30
	OPENBSD_3_7_BASE:1.2
	OPENBSD_3_6:1.2.0.28
	OPENBSD_3_6_BASE:1.2
	OPENBSD_3_5:1.2.0.26
	OPENBSD_3_5_BASE:1.2
	OPENBSD_3_4:1.2.0.24
	OPENBSD_3_4_BASE:1.2
	OPENBSD_3_3:1.2.0.22
	OPENBSD_3_3_BASE:1.2
	OPENBSD_3_2:1.2.0.20
	OPENBSD_3_2_BASE:1.2
	OPENBSD_3_1:1.2.0.18
	OPENBSD_3_1_BASE:1.2
	OPENBSD_3_0:1.2.0.16
	OPENBSD_3_0_BASE:1.2
	OPENBSD_2_9:1.2.0.14
	OPENBSD_2_9_BASE:1.2
	OPENBSD_2_8:1.2.0.12
	OPENBSD_2_8_BASE:1.2
	OPENBSD_2_7:1.2.0.10
	OPENBSD_2_7_BASE:1.2
	OPENBSD_2_6:1.2.0.8
	OPENBSD_2_6_BASE:1.2
	OPENBSD_2_5:1.2.0.6
	OPENBSD_2_5_BASE:1.2
	OPENBSD_2_4:1.2.0.4
	OPENBSD_2_4_BASE:1.2
	OPENBSD_2_3:1.2.0.2
	OPENBSD_2_3_BASE:1.2
	OPENBSD_2_2:1.1.1.1.0.6
	OPENBSD_2_2_BASE:1.1.1.1
	OPENBSD_2_1:1.1.1.1.0.4
	OPENBSD_2_1_BASE:1.1.1.1
	OPENBSD_2_0:1.1.1.1.0.2
	OPENBSD_2_0_BASE:1.1.1.1
	netbsd_1_1:1.1.1.1;
locks; strict;
comment	@ * @;


1.3
date	2013.07.05.21.31.45;	author miod;	state dead;
branches;
next	1.2;

1.2
date	98.02.15.18.48.47;	author niklas;	state Exp;
branches;
next	1.1;

1.1
date	95.10.18.08.38.58;	author deraadt;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	95.10.18.08.38.58;	author deraadt;	state Exp;
branches;
next	;


desc
@@


1.3
log
@Put the a.out as and ld to rest in the Attic, finally!
@
text
@/*	$OpenBSD: flonum-mult.c,v 1.2 1998/02/15 18:48:47 niklas Exp $	*/

/* flonum_mult.c - multiply two flonums
   Copyright (C) 1987, 1990, 1991, 1992 Free Software Foundation, Inc.
   
   This file is part of Gas, the GNU Assembler.
   
   The GNU assembler is distributed in the hope that it will be
   useful, but WITHOUT ANY WARRANTY.  No author or distributor
   accepts responsibility to anyone for the consequences of using it
   or for whether it serves any particular purpose or works at all,
   unless he says so in writing.  Refer to the GNU Assembler General
   Public License for full details.
   
   Everyone is granted permission to copy, modify and redistribute
   the GNU Assembler, but only under the conditions described in the
   GNU Assembler General Public License.  A copy of this license is
   supposed to have been given to you along with the GNU Assembler
   so you can know your rights and responsibilities.  It should be
   in a file named COPYING.  Among other things, the copyright
   notice and this notice must be preserved on all copies.  */

#ifndef lint
static char rcsid[] = "$OpenBSD: flonum-mult.c,v 1.2 1998/02/15 18:48:47 niklas Exp $";
#endif

#include "flonum.h"

/*	plan for a . b => p(roduct)
	
	
	+-------+-------+-/   /-+-------+-------+
	| a	| a	|  ...	| a	| a	|
	|  A	|  A-1	|	|  1	|  0	|
	+-------+-------+-/   /-+-------+-------+
	
	
	+-------+-------+-/   /-+-------+-------+
	| b	| b	|  ...	| b	| b	|
	|  B	|  B-1	|	|  1	|  0	|
	+-------+-------+-/   /-+-------+-------+
	
	
	+-------+-------+-/   /-+-------+-/   /-+-------+-------+
	| p	| p	|  ...	| p	|  ...	| p	| p	|
	|  A+B+1|  A+B	|	|  N	|	|  1	|  0	|
	+-------+-------+-/   /-+-------+-/   /-+-------+-------+
	
	/^\
	(carry) a .b	   ...	    |	   ...	 a .b	 a .b
	A  B 		    |		  0  1	  0  0
	|
	...	    |	   ...	 a .b
	|		  1  0
	|
	|	   ...
	|
	|
	|
	|		  ___
	|		  \
	+-----  P  =   >  a .b
	N	  /__  i  j
	
	N = 0 ... A+B
	
	for all i,j where i+j=N
	[i,j integers > 0]
	
	a[], b[], p[] may not intersect.
	Zero length factors signify 0 significant bits: treat as 0.0.
	0.0 factors do the right thing.
	Zero length product OK.
	
	I chose the ForTran accent "foo[bar]" instead of the C accent "*garply"
	because I felt the ForTran way was more intuitive. The C way would
	probably yield better code on most C compilers. Dean Elsner.
	(C style also gives deeper insight [to me] ... oh well ...)
	*/

void flonum_multip (a, b, product)
const FLONUM_TYPE *a;
const FLONUM_TYPE *b;
FLONUM_TYPE *product;
{
	int			size_of_a;		/* 0 origin */
	int			size_of_b;		/* 0 origin */
	int			size_of_product;	/* 0 origin */
	int			size_of_sum;		/* 0 origin */
	int			extra_product_positions;/* 1 origin */
	unsigned long	work;
	unsigned long	carry;
	long		exponent;
	LITTLENUM_TYPE *	q;
	long		significant;		/* TRUE when we emit a non-0 littlenum  */
	/* ForTran accent follows. */
	int			P;	/* Scan product low-order -> high. */
	int			N;	/* As in sum above.  */
	int			A;	/* Which [] of a? */
	int			B;	/* Which [] of b? */
	
	if ((a->sign != '-' && a->sign != '+') || (b->sign != '-' && b->sign != '+')) {
		/* ...
		   Got to fail somehow.  Any suggestions? */
		product->sign=0;
		return;
	}
	product->sign = (a->sign == b->sign) ? '+' : '-';
	size_of_a		= a->leader	-  a->low;
	size_of_b		= b->leader	-  b->low;
	exponent		= a->exponent	+  b->exponent;
	size_of_product	= product->high	-  product->low;
	size_of_sum		= size_of_a		+  size_of_b;
	extra_product_positions  =  size_of_product  -  size_of_sum;
	if (extra_product_positions < 0)
	    {
		    P = extra_product_positions; /* P < 0 */
		    exponent -= extra_product_positions; /* Increases exponent. */
	    }
	else
	    {
		    P = 0;
	    }
	carry = 0;
	significant = 0;
	for (N = 0;
	     N <= size_of_sum;
	     N++)
	    {
		    work = carry;
		    carry = 0;
		    for (A = 0;
			 A <= N;
			 A ++)
			{
				B = N - A;
				if (A <= size_of_a   &&   B <= size_of_b  &&  B >= 0)
				    {
#ifdef TRACE
					    printf("a:low[%d.]=%04x b:low[%d.]=%04x work_before=%08x\n", A, a->low[A], B, b->low[B], work);
#endif
					    work += a->low[A]   *   b->low[B];
					    carry += work >> LITTLENUM_NUMBER_OF_BITS;
					    work &= LITTLENUM_MASK;
#ifdef TRACE
					    printf("work=%08x carry=%04x\n", work, carry);
#endif
				    }
			}
		    significant |= work;
		    if (significant || P<0)
			{
				if (P >= 0)
				    {
					    product->low[P] = work;
#ifdef TRACE
					    printf("P=%d. work[p]:=%04x\n", P, work);
#endif
				    }
				P ++;
			}
		    else
			{
				extra_product_positions ++;
				exponent ++;
			}
	    }
	/*
	 * [P]->position # size_of_sum + 1.
	 * This is where 'carry' should go.
	 */
#ifdef TRACE
	printf("final carry =%04x\n", carry);
#endif
	if (carry)
	    {
		    if (extra_product_positions > 0)
			{
				product->low[P] = carry;
			}
		    else
			{
				/* No room at high order for carry littlenum. */
				/* Shift right 1 to make room for most significant littlenum. */
				exponent ++;
				P --;
				for (q  = product->low + P;
				     q >= product->low;
				     q --)
				    {
					    work = * q;
					    * q = carry;
					    carry = work;
				    }
			}
	    }
	else
	    {
		    P --;
	    }
	product->leader	= product->low + P;
	product->exponent	= exponent;
}

/* end of flonum_mult.c */
@


1.2
log
@Merge of NetBSD changes + $OpenBSD$ tags
@
text
@d1 1
a1 1
/*	$OpenBSD$	*/
d24 1
a24 1
static char rcsid[] = "$OpenBSD: flonum-mult.c,v 1.1.1.1 1995/10/18 08:38:58 deraadt Exp $";
@


1.1
log
@Initial revision
@
text
@d1 2
d24 1
a24 1
static char rcsid[] = "$Id: flonum-mult.c,v 1.3 1993/10/02 20:57:30 pk Exp $";
@


1.1.1.1
log
@initial import of NetBSD tree
@
text
@@
