head	1.4;
access;
symbols
	OPENBSD_5_3:1.3.0.62
	OPENBSD_5_3_BASE:1.3
	OPENBSD_5_2:1.3.0.60
	OPENBSD_5_2_BASE:1.3
	OPENBSD_5_1_BASE:1.3
	OPENBSD_5_1:1.3.0.58
	OPENBSD_5_0:1.3.0.56
	OPENBSD_5_0_BASE:1.3
	OPENBSD_4_9:1.3.0.54
	OPENBSD_4_9_BASE:1.3
	OPENBSD_4_8:1.3.0.52
	OPENBSD_4_8_BASE:1.3
	OPENBSD_4_7:1.3.0.48
	OPENBSD_4_7_BASE:1.3
	OPENBSD_4_6:1.3.0.50
	OPENBSD_4_6_BASE:1.3
	OPENBSD_4_5:1.3.0.46
	OPENBSD_4_5_BASE:1.3
	OPENBSD_4_4:1.3.0.44
	OPENBSD_4_4_BASE:1.3
	OPENBSD_4_3:1.3.0.42
	OPENBSD_4_3_BASE:1.3
	OPENBSD_4_2:1.3.0.40
	OPENBSD_4_2_BASE:1.3
	OPENBSD_4_1:1.3.0.38
	OPENBSD_4_1_BASE:1.3
	OPENBSD_4_0:1.3.0.36
	OPENBSD_4_0_BASE:1.3
	OPENBSD_3_9:1.3.0.34
	OPENBSD_3_9_BASE:1.3
	OPENBSD_3_8:1.3.0.32
	OPENBSD_3_8_BASE:1.3
	OPENBSD_3_7:1.3.0.30
	OPENBSD_3_7_BASE:1.3
	OPENBSD_3_6:1.3.0.28
	OPENBSD_3_6_BASE:1.3
	OPENBSD_3_5:1.3.0.26
	OPENBSD_3_5_BASE:1.3
	OPENBSD_3_4:1.3.0.24
	OPENBSD_3_4_BASE:1.3
	OPENBSD_3_3:1.3.0.22
	OPENBSD_3_3_BASE:1.3
	OPENBSD_3_2:1.3.0.20
	OPENBSD_3_2_BASE:1.3
	OPENBSD_3_1:1.3.0.18
	OPENBSD_3_1_BASE:1.3
	OPENBSD_3_0:1.3.0.16
	OPENBSD_3_0_BASE:1.3
	OPENBSD_2_9:1.3.0.14
	OPENBSD_2_9_BASE:1.3
	OPENBSD_2_8:1.3.0.12
	OPENBSD_2_8_BASE:1.3
	OPENBSD_2_7:1.3.0.10
	OPENBSD_2_7_BASE:1.3
	OPENBSD_2_6:1.3.0.8
	OPENBSD_2_6_BASE:1.3
	OPENBSD_2_5:1.3.0.6
	OPENBSD_2_5_BASE:1.3
	OPENBSD_2_4:1.3.0.4
	OPENBSD_2_4_BASE:1.3
	OPENBSD_2_3:1.3.0.2
	OPENBSD_2_3_BASE:1.3
	OPENBSD_2_2:1.1.1.1.0.6
	OPENBSD_2_2_BASE:1.1.1.1
	OPENBSD_2_1:1.1.1.1.0.4
	OPENBSD_2_1_BASE:1.1.1.1
	OPENBSD_2_0:1.1.1.1.0.2
	OPENBSD_2_0_BASE:1.1.1.1
	netbsd_1_1:1.1.1.1;
locks; strict;
comment	@ * @;


1.4
date	2013.07.05.21.31.45;	author miod;	state dead;
branches;
next	1.3;

1.3
date	98.02.28.00.51.56;	author niklas;	state Exp;
branches;
next	1.2;

1.2
date	98.02.15.18.48.45;	author niklas;	state Exp;
branches;
next	1.1;

1.1
date	95.10.18.08.38.57;	author deraadt;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	95.10.18.08.38.57;	author deraadt;	state Exp;
branches;
next	;


desc
@@


1.4
log
@Put the a.out as and ld to rest in the Attic, finally!
@
text
@/*	$OpenBSD: expr.h,v 1.3 1998/02/28 00:51:56 niklas Exp $	*/

/* expr.h -> header file for expr.c
   Copyright (C) 1987, 1992 Free Software Foundation, Inc.
   
   This file is part of GAS, the GNU Assembler.
   
   GAS is free software; you can redistribute it and/or modify
   it under the terms of the GNU General Public License as published by
   the Free Software Foundation; either version 2, or (at your option)
   any later version.
   
   GAS is distributed in the hope that it will be useful,
   but WITHOUT ANY WARRANTY; without even the implied warranty of
   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
   GNU General Public License for more details.
   
   You should have received a copy of the GNU General Public License
   along with GAS; see the file COPYING.  If not, write to
   the Free Software Foundation, 675 Mass Ave, Cambridge, MA 02139, USA.  */

/*
 * Abbreviations (mnemonics).
 *
 *	O	operator
 *	Q	quantity,  operand
 *	X	eXpression
 */

/*
 * By popular demand, we define a struct to represent an expression.
 * This will no doubt mutate as expressions become baroque.
 *
 * Currently, we support expressions like "foo-bar+42".
 * In other words we permit a (possibly undefined) minuend, a
 * (possibly undefined) subtrahend and an (absolute) augend.
 * RMS says this is so we can have 1-pass assembly for any compiler
 * emmissions, and a 'case' statement might emit 'undefined1 - undefined2'.
 *
 * To simplify table-driven dispatch, we also have a "segment" for the
 * entire expression. That way we don't require complex reasoning about
 * whether particular components are defined; and we can change component
 * semantics without re-working all the dispatch tables in the assembler.
 * In other words the "type" of an expression is its segment.
 */

typedef struct {
	struct symbol *X_add_symbol;		/* foo */
	struct symbol *X_subtract_symbol;	/* bar */
	struct symbol *X_got_symbol;		/* got */
	long	X_add_number;			/* 42.    Must be signed. */
	segT	X_seg;				/* What segment (expr type)? */
} expressionS;

/* result should be type (expressionS *). */
#define expression(result) expr(0,result)

/* If an expression is SEG_BIG, look here */
/* for its value. These common data may */
/* be clobbered whenever expr() is called. */
extern FLONUM_TYPE generic_floating_point_number; /* Flonums returned here. */
/* Enough to hold most precise flonum. */
extern LITTLENUM_TYPE generic_bignum[]; /* Bignums returned here. */
#define SIZE_OF_LARGE_NUMBER (20)	/* Number of littlenums in above. */

typedef char operator_rankT;

#if __STDC__ == 1

char get_symbol_end(void);
segT expr(int rank, expressionS *resultP);
unsigned int get_single_number(void);

#else /* not __STDC__ */

char get_symbol_end();
segT expr();
unsigned int get_single_number();

#endif /* not __STDC__ */

/* end of expr.h */
@


1.3
log
@A merge of the  late resolution of symbols code Ian Lance Taylor added to
gas2 back in 1993.  gcc2.8 generates code which relies on this.
@
text
@d1 1
a1 1
/*	$OpenBSD: expr.h,v 1.2 1998/02/15 18:48:45 niklas Exp $	*/
@


1.2
log
@Merge of NetBSD changes + $OpenBSD$ tags
@
text
@d1 1
a1 1
/*	$OpenBSD: expr.h,v 1.1.1.1 1995/10/18 08:38:57 deraadt Exp $	*/
d48 6
a53 7
	symbolS *X_add_symbol;		/* foo */
	symbolS *X_subtract_symbol;	/* bar */
	symbolS *X_got_symbol;		/* got */
	long X_add_number;		/* 42.    Must be signed. */
	segT	X_seg;			/* What segment (expr type)? */
}
expressionS;
@


1.1
log
@Initial revision
@
text
@d1 2
a20 4
/*
 * $Id: expr.h,v 1.3 1993/10/02 20:57:27 pk Exp $
 */

@


1.1.1.1
log
@initial import of NetBSD tree
@
text
@@

