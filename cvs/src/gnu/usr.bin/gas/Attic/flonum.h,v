head	1.3;
access;
symbols
	OPENBSD_5_3:1.2.0.62
	OPENBSD_5_3_BASE:1.2
	OPENBSD_5_2:1.2.0.60
	OPENBSD_5_2_BASE:1.2
	OPENBSD_5_1_BASE:1.2
	OPENBSD_5_1:1.2.0.58
	OPENBSD_5_0:1.2.0.56
	OPENBSD_5_0_BASE:1.2
	OPENBSD_4_9:1.2.0.54
	OPENBSD_4_9_BASE:1.2
	OPENBSD_4_8:1.2.0.52
	OPENBSD_4_8_BASE:1.2
	OPENBSD_4_7:1.2.0.48
	OPENBSD_4_7_BASE:1.2
	OPENBSD_4_6:1.2.0.50
	OPENBSD_4_6_BASE:1.2
	OPENBSD_4_5:1.2.0.46
	OPENBSD_4_5_BASE:1.2
	OPENBSD_4_4:1.2.0.44
	OPENBSD_4_4_BASE:1.2
	OPENBSD_4_3:1.2.0.42
	OPENBSD_4_3_BASE:1.2
	OPENBSD_4_2:1.2.0.40
	OPENBSD_4_2_BASE:1.2
	OPENBSD_4_1:1.2.0.38
	OPENBSD_4_1_BASE:1.2
	OPENBSD_4_0:1.2.0.36
	OPENBSD_4_0_BASE:1.2
	OPENBSD_3_9:1.2.0.34
	OPENBSD_3_9_BASE:1.2
	OPENBSD_3_8:1.2.0.32
	OPENBSD_3_8_BASE:1.2
	OPENBSD_3_7:1.2.0.30
	OPENBSD_3_7_BASE:1.2
	OPENBSD_3_6:1.2.0.28
	OPENBSD_3_6_BASE:1.2
	OPENBSD_3_5:1.2.0.26
	OPENBSD_3_5_BASE:1.2
	OPENBSD_3_4:1.2.0.24
	OPENBSD_3_4_BASE:1.2
	OPENBSD_3_3:1.2.0.22
	OPENBSD_3_3_BASE:1.2
	OPENBSD_3_2:1.2.0.20
	OPENBSD_3_2_BASE:1.2
	OPENBSD_3_1:1.2.0.18
	OPENBSD_3_1_BASE:1.2
	OPENBSD_3_0:1.2.0.16
	OPENBSD_3_0_BASE:1.2
	OPENBSD_2_9:1.2.0.14
	OPENBSD_2_9_BASE:1.2
	OPENBSD_2_8:1.2.0.12
	OPENBSD_2_8_BASE:1.2
	OPENBSD_2_7:1.2.0.10
	OPENBSD_2_7_BASE:1.2
	OPENBSD_2_6:1.2.0.8
	OPENBSD_2_6_BASE:1.2
	OPENBSD_2_5:1.2.0.6
	OPENBSD_2_5_BASE:1.2
	OPENBSD_2_4:1.2.0.4
	OPENBSD_2_4_BASE:1.2
	OPENBSD_2_3:1.2.0.2
	OPENBSD_2_3_BASE:1.2
	OPENBSD_2_2:1.1.1.1.0.6
	OPENBSD_2_2_BASE:1.1.1.1
	OPENBSD_2_1:1.1.1.1.0.4
	OPENBSD_2_1_BASE:1.1.1.1
	OPENBSD_2_0:1.1.1.1.0.2
	OPENBSD_2_0_BASE:1.1.1.1
	netbsd_1_1:1.1.1.1;
locks; strict;
comment	@ * @;


1.3
date	2013.07.05.21.31.45;	author miod;	state dead;
branches;
next	1.2;

1.2
date	98.02.15.18.48.48;	author niklas;	state Exp;
branches;
next	1.1;

1.1
date	95.10.18.08.38.58;	author deraadt;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	95.10.18.08.38.58;	author deraadt;	state Exp;
branches;
next	;


desc
@@


1.3
log
@Put the a.out as and ld to rest in the Attic, finally!
@
text
@/*	$OpenBSD: flonum.h,v 1.2 1998/02/15 18:48:48 niklas Exp $	*/

/* flonum.h - Floating point package

   Copyright (C) 1987, 1990, 1991, 1992 Free Software Foundation, Inc.
   
   This file is part of GAS, the GNU Assembler.
   
   GAS is free software; you can redistribute it and/or modify
   it under the terms of the GNU General Public License as published by
   the Free Software Foundation; either version 2, or (at your option)
   any later version.
   
   GAS is distributed in the hope that it will be useful,
   but WITHOUT ANY WARRANTY; without even the implied warranty of
   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
   GNU General Public License for more details.
   
   You should have received a copy of the GNU General Public License
   along with GAS; see the file COPYING.  If not, write to
   the Free Software Foundation, 675 Mass Ave, Cambridge, MA 02139, USA.  */

/***********************************************************************\
 *									*
 *	Arbitrary-precision floating point arithmetic.			*
 *									*
 *									*
 *	Notation: a floating point number is expressed as		*
 *	MANTISSA * (2 ** EXPONENT).					*
 *									*
 *	If this offends more traditional mathematicians, then		*
 *	please tell me your nomenclature for flonums!			*
 *									*
 \***********************************************************************/
#if (__STDC__ != 1) && !defined(const)
#define const /* empty */
#endif

#include "bignum.h"

/***********************************************************************\
 *									*
 *	Variable precision floating point numbers.			*
 *									*
 *	Exponent is the place value of the low littlenum. E.g.:		*
 *	If  0:  low points to the units             littlenum.		*
 *	If  1:  low points to the LITTLENUM_RADIX   littlenum.		*
 *	If -1:  low points to the 1/LITTLENUM_RADIX littlenum.		*
 *									*
 \***********************************************************************/

/* JF:  A sign value of 0 means we have been asked to assemble NaN
   A sign value of 'P' means we've been asked to assemble +Inf
   A sign value of 'N' means we've been asked to assemble -Inf
   */
struct FLONUM_STRUCT
{
	LITTLENUM_TYPE *low;	/* low order littlenum of a bignum */
	LITTLENUM_TYPE *high;	/* high order littlenum of a bignum */
	LITTLENUM_TYPE *leader;	/* -> 1st non-zero littlenum */
	/* If flonum is 0.0, leader == low-1 */
	long		exponent; /* base LITTLENUM_RADIX */
	char			sign;	/* '+' or '-' */
};

typedef struct FLONUM_STRUCT FLONUM_TYPE;


/***********************************************************************\
 *									*
 *	Since we can (& do) meet with exponents like 10^5000, it	*
 *	is silly to make a table of ~ 10,000 entries, one for each	*
 *	power of 10. We keep a table where item [n] is a struct		*
 *	FLONUM_FLOATING_POINT representing 10^(2^n). We then		*
 *	multiply appropriate entries from this table to get any		*
 *	particular power of 10. For the example of 10^5000, a table	*
 *	of just 25 entries suffices: 10^(2^-12)...10^(2^+12).		*
 *									*
 \***********************************************************************/


extern const FLONUM_TYPE flonum_positive_powers_of_ten[];
extern const FLONUM_TYPE flonum_negative_powers_of_ten[];
extern const int table_size_of_flonum_powers_of_ten;
/* Flonum_XXX_powers_of_ten[] table has */
/* legal indices from 0 to */
/* + this number inclusive. */



/***********************************************************************\
 *									*
 *	Declare worker functions.					*
 *									*
 \***********************************************************************/

#if __STDC__ == 1

int atof_generic(char **address_of_string_pointer,
		 const char *string_of_decimal_marks,
		 const char *string_of_decimal_exponent_marks,
		 FLONUM_TYPE *address_of_generic_floating_point_number);

void flonum_copy(FLONUM_TYPE *in, FLONUM_TYPE *out);
void flonum_multip(const FLONUM_TYPE *a, const FLONUM_TYPE *b, FLONUM_TYPE *product);

#else /* not __STDC__ */

int atof_generic();
void flonum_copy();
void flonum_multip();

#endif /* not __STDC__ */

/***********************************************************************\
 *									*
 *	Declare error codes.						*
 *									*
 \***********************************************************************/

#define ERROR_EXPONENT_OVERFLOW (2)

/* end of flonum.h */
@


1.2
log
@Merge of NetBSD changes + $OpenBSD$ tags
@
text
@d1 1
a1 1
/*	$OpenBSD: flonum.h,v 1.1.1.1 1995/10/18 08:38:58 deraadt Exp $	*/
@


1.1
log
@Initial revision
@
text
@d1 2
a21 4
/*
 * $Id: flonum.h,v 1.3 1993/10/02 20:57:31 pk Exp $
 */

@


1.1.1.1
log
@initial import of NetBSD tree
@
text
@@
