head	1.4;
access;
symbols
	OPENBSD_6_2:1.4.0.44
	OPENBSD_6_2_BASE:1.4
	OPENBSD_6_1:1.4.0.46
	OPENBSD_6_1_BASE:1.4
	OPENBSD_6_0:1.4.0.42
	OPENBSD_6_0_BASE:1.4
	OPENBSD_5_9:1.4.0.38
	OPENBSD_5_9_BASE:1.4
	OPENBSD_5_8:1.4.0.40
	OPENBSD_5_8_BASE:1.4
	OPENBSD_5_7:1.4.0.32
	OPENBSD_5_7_BASE:1.4
	OPENBSD_5_6:1.4.0.36
	OPENBSD_5_6_BASE:1.4
	OPENBSD_5_5:1.4.0.34
	OPENBSD_5_5_BASE:1.4
	OPENBSD_5_4:1.4.0.30
	OPENBSD_5_4_BASE:1.4
	OPENBSD_5_3:1.4.0.28
	OPENBSD_5_3_BASE:1.4
	OPENBSD_5_2:1.4.0.26
	OPENBSD_5_2_BASE:1.4
	OPENBSD_5_1_BASE:1.4
	OPENBSD_5_1:1.4.0.24
	OPENBSD_5_0:1.4.0.22
	OPENBSD_5_0_BASE:1.4
	OPENBSD_4_9:1.4.0.20
	OPENBSD_4_9_BASE:1.4
	OPENBSD_4_8:1.4.0.18
	OPENBSD_4_8_BASE:1.4
	OPENBSD_4_7:1.4.0.14
	OPENBSD_4_7_BASE:1.4
	OPENBSD_4_6:1.4.0.16
	OPENBSD_4_6_BASE:1.4
	OPENBSD_4_5:1.4.0.12
	OPENBSD_4_5_BASE:1.4
	OPENBSD_4_4:1.4.0.10
	OPENBSD_4_4_BASE:1.4
	OPENBSD_4_3:1.4.0.8
	OPENBSD_4_3_BASE:1.4
	OPENBSD_4_2:1.4.0.6
	OPENBSD_4_2_BASE:1.4
	OPENBSD_4_1:1.4.0.4
	OPENBSD_4_1_BASE:1.4
	OPENBSD_4_0:1.4.0.2
	OPENBSD_4_0_BASE:1.4
	TEXINFO_4_8:1.1.1.4
	OPENBSD_3_9:1.3.0.26
	OPENBSD_3_9_BASE:1.3
	OPENBSD_3_8:1.3.0.24
	OPENBSD_3_8_BASE:1.3
	OPENBSD_3_7:1.3.0.22
	OPENBSD_3_7_BASE:1.3
	OPENBSD_3_6:1.3.0.20
	OPENBSD_3_6_BASE:1.3
	OPENBSD_3_5:1.3.0.18
	OPENBSD_3_5_BASE:1.3
	OPENBSD_3_4:1.3.0.16
	OPENBSD_3_4_BASE:1.3
	OPENBSD_3_3:1.3.0.14
	OPENBSD_3_3_BASE:1.3
	OPENBSD_3_2:1.3.0.12
	OPENBSD_3_2_BASE:1.3
	TEXINFO_4_2:1.1.1.3
	OPENBSD_3_1:1.3.0.10
	OPENBSD_3_1_BASE:1.3
	OPENBSD_3_0:1.3.0.8
	OPENBSD_3_0_BASE:1.3
	OPENBSD_2_9:1.3.0.6
	OPENBSD_2_9_BASE:1.3
	OPENBSD_2_8:1.3.0.4
	OPENBSD_2_8_BASE:1.3
	OPENBSD_2_7:1.3.0.2
	OPENBSD_2_7_BASE:1.3
	TEXINFO_4_0:1.1.1.3
	OPENBSD_2_6:1.2.0.4
	OPENBSD_2_6_BASE:1.2
	OPENBSD_2_5:1.2.0.2
	OPENBSD_2_5_BASE:1.2
	TEXINFO_3_12:1.1.1.2
	OPENBSD_2_4:1.1.1.2.0.6
	OPENBSD_2_4_BASE:1.1.1.2
	OPENBSD_2_3:1.1.1.2.0.4
	OPENBSD_2_3_BASE:1.1.1.2
	OPENBSD_2_2:1.1.1.2.0.2
	OPENBSD_2_2_BASE:1.1.1.2
	TEXINFO_3_11:1.1.1.2
	OPENBSD_2_1:1.1.1.1.0.4
	OPENBSD_2_1_BASE:1.1.1.1
	TEXINFO_3_9:1.1.1.1
	OPENBSD_2_0:1.1.1.1.0.2
	OPENBSD_2_0_BASE:1.1.1.1
	TEXINFO_3_7:1.1.1.1
	TEXINFO_3_6:1.1.1.1
	FSF:1.1.1;
locks; strict;
comment	@ * @;


1.4
date	2006.07.17.16.12.36;	author espie;	state Exp;
branches;
next	1.3;

1.3
date	2000.02.09.02.18.39;	author espie;	state Exp;
branches;
next	1.2;

1.2
date	99.01.11.16.38.08;	author espie;	state Exp;
branches;
next	1.1;

1.1
date	95.12.22.16.47.13;	author niklas;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	95.12.22.16.47.13;	author niklas;	state Exp;
branches;
next	1.1.1.2;

1.1.1.2
date	97.08.01.22.00.11;	author kstailey;	state Exp;
branches;
next	1.1.1.3;

1.1.1.3
date	2000.02.09.01.24.41;	author espie;	state Exp;
branches;
next	1.1.1.4;

1.1.1.4
date	2006.07.17.16.03.42;	author espie;	state Exp;
branches;
next	;


desc
@@


1.4
log
@conflict resolution
@
text
@/* footnotes.c -- Some functions for manipulating footnotes.
   $Id: footnotes.c,v 1.4 2004/04/11 17:56:45 karl Exp $

   Copyright (C) 1993, 1997, 1998, 1999, 2002, 2004 Free Software
   Foundation, Inc.

   This program is free software; you can redistribute it and/or modify
   it under the terms of the GNU General Public License as published by
   the Free Software Foundation; either version 2, or (at your option)
   any later version.

   This program is distributed in the hope that it will be useful,
   but WITHOUT ANY WARRANTY; without even the implied warranty of
   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
   GNU General Public License for more details.

   You should have received a copy of the GNU General Public License
   along with this program; if not, write to the Free Software
   Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA 02111-1307, USA.

   Originally written by Brian Fox (bfox@@ai.mit.edu). */

#include "info.h"

/* Nonzero means attempt to show footnotes when displaying a new window. */
int auto_footnotes_p = 0;

static char *footnote_nodename = "*Footnotes*";

NODE * make_footnotes_node (NODE *node);

#define FOOTNOTE_HEADER_FORMAT \
   "*** Footnotes appearing in the node `%s' ***\n"

/* Find the window currently showing footnotes. */
static WINDOW *
find_footnotes_window (void)
{
  WINDOW *win;

  /* Try to find an existing window first. */
  for (win = windows; win; win = win->next)
    if (internal_info_node_p (win->node) &&
        (strcmp (win->node->nodename, footnote_nodename) == 0))
      break;

  return (win);
}

/* Manufacture a node containing the footnotes of this node, and
   return the manufactured node.  If NODE has no footnotes, return a 
   NULL pointer. */
NODE *
make_footnotes_node (NODE *node)
{
  NODE *fn_node, *result = (NODE *)NULL;
  long fn_start;

  /* Make the initial assumption that the footnotes appear as simple
     text within this windows node. */
  fn_node = node;

  /* See if this node contains the magic footnote label. */
  fn_start =
    info_search_in_node (FOOTNOTE_LABEL, node, 0, (WINDOW *)NULL, 1, 0);

  /* If it doesn't, check to see if it has an associated footnotes node. */
  if (fn_start == -1)
    {
      REFERENCE **refs;

      refs = info_xrefs_of_node (node);

      if (refs)
        {
          register int i;
          char *refname;
          int reflen = strlen ("-Footnotes") + strlen (node->nodename);

          refname = (char *)xmalloc (reflen + 1);

          strcpy (refname, node->nodename);
          strcat (refname, "-Footnotes");

          for (i = 0; refs[i]; i++)
            if ((refs[i]->nodename != (char *)NULL) &&
                /* Support both the older "foo-Footnotes" and the new
                   style "foo-Footnote-NN" references.  */
                (strcmp (refs[i]->nodename, refname) == 0 ||
                 (strncmp (refs[i]->nodename, refname, reflen - 1) == 0 &&
                  refs[i]->nodename[reflen - 1] == '-' &&
                  isdigit (refs[i]->nodename[reflen]))))
              {
                char *filename;

                filename = node->parent;
                if (!filename)
                  filename = node->filename;

                fn_node = info_get_node (filename, refname);

                if (fn_node)
                  fn_start = 0;

                break;
              }

          free (refname);
          info_free_references (refs);
        }
    }

  /* If we never found the start of a footnotes area, quit now. */
  if (fn_start == -1)
    return ((NODE *)NULL);

  /* Make the new node. */
  result = (NODE *)xmalloc (sizeof (NODE));
  result->flags = 0;
  result->display_pos = 0;

  /* Get the size of the footnotes appearing within this node. */
  {
    char *header;
    long text_start = fn_start;

    header = (char *)xmalloc
      (1 + strlen (node->nodename) + strlen (FOOTNOTE_HEADER_FORMAT));
    sprintf (header, FOOTNOTE_HEADER_FORMAT, node->nodename);

    /* Move the start of the displayed text to right after the first line.
       This effectively skips either "---- footno...", or "File: foo...". */
    while (text_start < fn_node->nodelen)
      if (fn_node->contents[text_start++] == '\n')
        break;
  
    result->nodelen = strlen (header) + fn_node->nodelen - text_start;

    /* Set the contents of this node. */
    result->contents = (char *)xmalloc (1 + result->nodelen);
    sprintf (result->contents, "%s", header);
    memcpy (result->contents + strlen (header),
            fn_node->contents + text_start, fn_node->nodelen - text_start);

    name_internal_node (result, footnote_nodename);
    free (header);
  }

#if defined (NOTDEF)
  /* If the footnotes were gleaned from the node that we were called with,
     shorten the calling node's display length. */
  if (fn_node == node)
    narrow_node (node, 0, fn_start);
#endif /* NOTDEF */

  return (result);
}

/* Create or delete the footnotes window depending on whether footnotes
   exist in WINDOW's node or not.  Returns FN_FOUND if footnotes were found
   and displayed.  Returns FN_UNFOUND if there were no footnotes found
   in WINDOW's node.  Returns FN_UNABLE if there were footnotes, but the
   window to show them couldn't be made. */
int
info_get_or_remove_footnotes (WINDOW *window)
{
  WINDOW *fn_win;
  NODE *new_footnotes;

  fn_win = find_footnotes_window ();

  /* If we are in the footnotes window, change nothing. */
  if (fn_win == window)
    return (FN_FOUND);

  /* Try to find footnotes for this window's node. */
  new_footnotes = make_footnotes_node (window->node);

  /* If there was a window showing footnotes, and there are no footnotes
     for the current window, delete the old footnote window. */
  if (fn_win && !new_footnotes)
    {
      if (windows->next)
        info_delete_window_internal (fn_win);
    }

  /* If there are footnotes for this window's node, but no window around
     showing footnotes, try to make a new window. */
  if (new_footnotes && !fn_win)
    {
      WINDOW *old_active;
      WINDOW *last, *win;

      /* Always make this window be the last one appearing in the list.  Find
         the last window in the chain. */
      for (win = windows, last = windows; win; last = win, win = win->next);

      /* Try to split this window, and make the split window the one to
         contain the footnotes. */
      old_active = active_window;
      active_window = last;
      fn_win = window_make_window (new_footnotes);
      active_window = old_active;

      if (!fn_win)
        {
          free (new_footnotes->contents);
          free (new_footnotes);

          /* If we are hacking automatic footnotes, and there are footnotes
             but we couldn't display them, print a message to that effect. */
          if (auto_footnotes_p)
            inform_in_echo_area ((char *) _("Footnotes could not be displayed"));
          return (FN_UNABLE);
        }
    }

  /* If there are footnotes, and there is a window to display them,
     make that window be the number of lines appearing in the footnotes. */
  if (new_footnotes && fn_win)
    {
      window_set_node_of_window (fn_win, new_footnotes);

      window_change_window_height
        (fn_win, fn_win->line_count - fn_win->height);

      remember_window_and_node (fn_win, new_footnotes);
      add_gcable_pointer (new_footnotes->contents);
    }

  if (!new_footnotes)
    return (FN_UNFOUND);
  else
    return (FN_FOUND);
}

/* Show the footnotes associated with this node in another window. */
DECLARE_INFO_COMMAND (info_show_footnotes,
   _("Show the footnotes associated with this node in another window"))
{
  /* A negative argument means just make the window go away. */
  if (count < 0)
    {
      WINDOW *fn_win = find_footnotes_window ();

      /* If there is an old footnotes window, and it isn't the only window
         on the screen, delete it. */
      if (fn_win && windows->next)
        info_delete_window_internal (fn_win);
    }
  else
    {
      int result;

      result = info_get_or_remove_footnotes (window);

      switch (result)
        {
        case FN_UNFOUND:
          info_error ((char *) msg_no_foot_node, NULL, NULL);
          break;

        case FN_UNABLE:
          info_error ((char *) msg_win_too_small, NULL, NULL);
          break;
        }
    }
}
@


1.3
log
@Merge conflicts, and a few details:
- Makefile.bsd-wrapper: man pages, disable NLS for now.
- doc/Makefile.in: install man pages manually, remove buggy targets that
would break `make clean'.
- makeinfo/Makefile.in: shell failure ??? rework problematic line.
- util/texindex.c: let maketempname create the file, remove race condition.
@
text
@d2 1
a2 1
   $Id: footnotes.c,v 1.9 1999/09/25 16:10:04 karl Exp $
d4 2
a5 1
   Copyright (C) 1993, 97, 98, 99 Free Software Foundation, Inc.
d21 1
a21 1
   Written by Brian Fox (bfox@@ai.mit.edu). */
d25 2
a26 2
/* Non-zero means attempt to show footnotes when displaying a new window. */
int auto_footnotes_p = 1;
d30 2
d33 1
a33 1
   "*** Footnotes appearing in the node \"%s\" ***\n"
d37 1
a37 1
find_footnotes_window ()
d54 1
a54 2
make_footnotes_node (node)
     NODE *node;
d165 1
a165 2
info_get_or_remove_footnotes (window)
     WINDOW *window;
d213 1
a213 1
            inform_in_echo_area (_("Footnotes could not be displayed"));
d260 1
a260 1
          info_error (msg_no_foot_node);
d264 1
a264 1
          info_error (msg_win_too_small);
@


1.2
log
@Upgrade to 3.12, merge with OpenBSD changes.
@
text
@d2 1
a2 1
   $Id: footnotes.c,v 1.4 1997/07/24 21:23:33 karl Exp $
d4 1
a4 1
   Copyright (C) 1993, 97 Free Software Foundation, Inc.
d63 1
a63 1
    info_search_in_node (FOOTNOTE_LABEL, node, 0, (WINDOW *)NULL, 1);
d76 1
d78 1
a78 2
          refname = (char *)xmalloc
            (1 + strlen ("-Footnotes") + strlen (node->nodename));
d85 6
a90 1
                (strcmp (refs[i]->nodename, refname) == 0))
d118 1
d259 1
a259 1
          info_error (NO_FOOT_NODE);
d263 1
a263 1
          info_error (WIN_TOO_SMALL);
@


1.1
log
@Initial revision
@
text
@d1 2
a2 1
/* footnotes.c -- Some functions for manipulating footnotes. */
d4 1
a4 4
/* This file is part of GNU Info, a program for reading online documentation
   stored in Info format.

   Copyright (C) 1993 Free Software Foundation, Inc.
d41 1
a41 1
	(strcmp (win->node->nodename, footnote_nodename) == 0))
d73 3
a75 3
	{
	  register int i;
	  char *refname;
d77 2
a78 2
	  refname = (char *)xmalloc
	    (1 + strlen ("-Footnotes") + strlen (node->nodename));
d80 2
a81 2
	  strcpy (refname, node->nodename);
	  strcat (refname, "-Footnotes");
d83 5
a87 5
	  for (i = 0; refs[i]; i++)
	    if ((refs[i]->nodename != (char *)NULL) &&
		(strcmp (refs[i]->nodename, refname) == 0))
	      {
		char *filename;
d89 3
a91 3
		filename = node->parent;
		if (!filename)
		  filename = node->filename;
d93 1
a93 1
		fn_node = info_get_node (filename, refname);
d95 2
a96 2
		if (fn_node)
		  fn_start = 0;
d98 2
a99 2
		break;
	      }
d101 3
a103 3
	  free (refname);
	  info_free_references (refs);
	}
d127 1
a127 1
	break;
d135 1
a135 1
	    fn_node->contents + text_start, fn_node->nodelen - text_start);
d177 1
a177 1
	info_delete_window_internal (fn_win);
d188 1
a188 1
	 the last window in the chain. */
d192 1
a192 1
	 contain the footnotes. */
d199 10
a208 10
	{
	  free (new_footnotes->contents);
	  free (new_footnotes);

	  /* If we are hacking automatic footnotes, and there are footnotes
	     but we couldn't display them, print a message to that effect. */
	  if (auto_footnotes_p)
	    inform_in_echo_area ("Footnotes could not be displayed");
	  return (FN_UNABLE);
	}
d218 1
a218 1
	(fn_win, fn_win->line_count - fn_win->height);
d232 1
a232 1
   "Show the footnotes associated with this node in another window")
a233 2
  int result;

d240 1
a240 1
	 on the screen, delete it. */
d242 1
a242 1
	info_delete_window_internal (fn_win);
d251 9
a259 9
	{
	case FN_UNFOUND:
	  info_error (NO_FOOT_NODE);
	  break;

	case FN_UNABLE:
	  info_error (WIN_TOO_SMALL);
	  break;
	}
@


1.1.1.1
log
@Import of texinfo-3.6 from FSF
@
text
@@


1.1.1.2
log
@Import of FSF texinfo 3.11
@
text
@d1 1
a1 2
/* footnotes.c -- Some functions for manipulating footnotes.
   $Id: footnotes.c,v 1.4 1997/07/24 21:23:33 karl Exp $
d3 4
a6 1
   Copyright (C) 1993, 97 Free Software Foundation, Inc.
d43 1
a43 1
        (strcmp (win->node->nodename, footnote_nodename) == 0))
d75 3
a77 3
        {
          register int i;
          char *refname;
d79 2
a80 2
          refname = (char *)xmalloc
            (1 + strlen ("-Footnotes") + strlen (node->nodename));
d82 2
a83 2
          strcpy (refname, node->nodename);
          strcat (refname, "-Footnotes");
d85 5
a89 5
          for (i = 0; refs[i]; i++)
            if ((refs[i]->nodename != (char *)NULL) &&
                (strcmp (refs[i]->nodename, refname) == 0))
              {
                char *filename;
d91 3
a93 3
                filename = node->parent;
                if (!filename)
                  filename = node->filename;
d95 1
a95 1
                fn_node = info_get_node (filename, refname);
d97 2
a98 2
                if (fn_node)
                  fn_start = 0;
d100 2
a101 2
                break;
              }
d103 3
a105 3
          free (refname);
          info_free_references (refs);
        }
d129 1
a129 1
        break;
d137 1
a137 1
            fn_node->contents + text_start, fn_node->nodelen - text_start);
d179 1
a179 1
        info_delete_window_internal (fn_win);
d190 1
a190 1
         the last window in the chain. */
d194 1
a194 1
         contain the footnotes. */
d201 10
a210 10
        {
          free (new_footnotes->contents);
          free (new_footnotes);

          /* If we are hacking automatic footnotes, and there are footnotes
             but we couldn't display them, print a message to that effect. */
          if (auto_footnotes_p)
            inform_in_echo_area (_("Footnotes could not be displayed"));
          return (FN_UNABLE);
        }
d220 1
a220 1
        (fn_win, fn_win->line_count - fn_win->height);
d234 1
a234 1
   _("Show the footnotes associated with this node in another window"))
d236 2
d244 1
a244 1
         on the screen, delete it. */
d246 1
a246 1
        info_delete_window_internal (fn_win);
d255 9
a263 9
        {
        case FN_UNFOUND:
          info_error (NO_FOOT_NODE);
          break;

        case FN_UNABLE:
          info_error (WIN_TOO_SMALL);
          break;
        }
@


1.1.1.3
log
@TexInfo 4.0. New manpages, can create html.
A bit more grumpy about bad texinfo, though.
@
text
@d2 1
a2 1
   $Id: footnotes.c,v 1.9 1999/09/25 16:10:04 karl Exp $
d4 1
a4 1
   Copyright (C) 1993, 97, 98, 99 Free Software Foundation, Inc.
d63 1
a63 1
    info_search_in_node (FOOTNOTE_LABEL, node, 0, (WINDOW *)NULL, 1, 0);
a75 1
          int reflen = strlen ("-Footnotes") + strlen (node->nodename);
d77 2
a78 1
          refname = (char *)xmalloc (reflen + 1);
d85 1
a85 6
                /* Support both the older "foo-Footnotes" and the new
                   style "foo-Footnote-NN" references.  */
                (strcmp (refs[i]->nodename, refname) == 0 ||
                 (strncmp (refs[i]->nodename, refname, reflen - 1) == 0 &&
                  refs[i]->nodename[reflen - 1] == '-' &&
                  isdigit (refs[i]->nodename[reflen]))))
a112 1
  result->display_pos = 0;
d253 1
a253 1
          info_error (msg_no_foot_node);
d257 1
a257 1
          info_error (msg_win_too_small);
@


1.1.1.4
log
@import texinfo 4.8 into the tree.
(okay theo, kettenis)
@
text
@d2 1
a2 1
   $Id: footnotes.c,v 1.4 2004/04/11 17:56:45 karl Exp $
d4 1
a4 2
   Copyright (C) 1993, 1997, 1998, 1999, 2002, 2004 Free Software
   Foundation, Inc.
d20 1
a20 1
   Originally written by Brian Fox (bfox@@ai.mit.edu). */
d24 2
a25 2
/* Nonzero means attempt to show footnotes when displaying a new window. */
int auto_footnotes_p = 0;
a28 2
NODE * make_footnotes_node (NODE *node);

d30 1
a30 1
   "*** Footnotes appearing in the node `%s' ***\n"
d34 1
a34 1
find_footnotes_window (void)
d51 2
a52 1
make_footnotes_node (NODE *node)
d163 2
a164 1
info_get_or_remove_footnotes (WINDOW *window)
d212 1
a212 1
            inform_in_echo_area ((char *) _("Footnotes could not be displayed"));
d259 1
a259 1
          info_error ((char *) msg_no_foot_node, NULL, NULL);
d263 1
a263 1
          info_error ((char *) msg_win_too_small, NULL, NULL);
@


