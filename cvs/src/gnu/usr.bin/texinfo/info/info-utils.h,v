head	1.4;
access;
symbols
	OPENBSD_6_1_BASE:1.4
	OPENBSD_6_0:1.4.0.42
	OPENBSD_6_0_BASE:1.4
	OPENBSD_5_9:1.4.0.38
	OPENBSD_5_9_BASE:1.4
	OPENBSD_5_8:1.4.0.40
	OPENBSD_5_8_BASE:1.4
	OPENBSD_5_7:1.4.0.32
	OPENBSD_5_7_BASE:1.4
	OPENBSD_5_6:1.4.0.36
	OPENBSD_5_6_BASE:1.4
	OPENBSD_5_5:1.4.0.34
	OPENBSD_5_5_BASE:1.4
	OPENBSD_5_4:1.4.0.30
	OPENBSD_5_4_BASE:1.4
	OPENBSD_5_3:1.4.0.28
	OPENBSD_5_3_BASE:1.4
	OPENBSD_5_2:1.4.0.26
	OPENBSD_5_2_BASE:1.4
	OPENBSD_5_1_BASE:1.4
	OPENBSD_5_1:1.4.0.24
	OPENBSD_5_0:1.4.0.22
	OPENBSD_5_0_BASE:1.4
	OPENBSD_4_9:1.4.0.20
	OPENBSD_4_9_BASE:1.4
	OPENBSD_4_8:1.4.0.18
	OPENBSD_4_8_BASE:1.4
	OPENBSD_4_7:1.4.0.14
	OPENBSD_4_7_BASE:1.4
	OPENBSD_4_6:1.4.0.16
	OPENBSD_4_6_BASE:1.4
	OPENBSD_4_5:1.4.0.12
	OPENBSD_4_5_BASE:1.4
	OPENBSD_4_4:1.4.0.10
	OPENBSD_4_4_BASE:1.4
	OPENBSD_4_3:1.4.0.8
	OPENBSD_4_3_BASE:1.4
	OPENBSD_4_2:1.4.0.6
	OPENBSD_4_2_BASE:1.4
	OPENBSD_4_1:1.4.0.4
	OPENBSD_4_1_BASE:1.4
	OPENBSD_4_0:1.4.0.2
	OPENBSD_4_0_BASE:1.4
	TEXINFO_4_8:1.1.1.5
	OPENBSD_3_9:1.3.0.26
	OPENBSD_3_9_BASE:1.3
	OPENBSD_3_8:1.3.0.24
	OPENBSD_3_8_BASE:1.3
	OPENBSD_3_7:1.3.0.22
	OPENBSD_3_7_BASE:1.3
	OPENBSD_3_6:1.3.0.20
	OPENBSD_3_6_BASE:1.3
	OPENBSD_3_5:1.3.0.18
	OPENBSD_3_5_BASE:1.3
	OPENBSD_3_4:1.3.0.16
	OPENBSD_3_4_BASE:1.3
	OPENBSD_3_3:1.3.0.14
	OPENBSD_3_3_BASE:1.3
	OPENBSD_3_2:1.3.0.12
	OPENBSD_3_2_BASE:1.3
	TEXINFO_4_2:1.1.1.4
	OPENBSD_3_1:1.3.0.10
	OPENBSD_3_1_BASE:1.3
	OPENBSD_3_0:1.3.0.8
	OPENBSD_3_0_BASE:1.3
	OPENBSD_2_9:1.3.0.6
	OPENBSD_2_9_BASE:1.3
	OPENBSD_2_8:1.3.0.4
	OPENBSD_2_8_BASE:1.3
	OPENBSD_2_7:1.3.0.2
	OPENBSD_2_7_BASE:1.3
	TEXINFO_4_0:1.1.1.4
	OPENBSD_2_6:1.2.0.4
	OPENBSD_2_6_BASE:1.2
	OPENBSD_2_5:1.2.0.2
	OPENBSD_2_5_BASE:1.2
	TEXINFO_3_12:1.1.1.3
	OPENBSD_2_4:1.1.1.3.0.6
	OPENBSD_2_4_BASE:1.1.1.3
	OPENBSD_2_3:1.1.1.3.0.4
	OPENBSD_2_3_BASE:1.1.1.3
	OPENBSD_2_2:1.1.1.3.0.2
	OPENBSD_2_2_BASE:1.1.1.3
	TEXINFO_3_11:1.1.1.3
	OPENBSD_2_1:1.1.1.2.0.2
	OPENBSD_2_1_BASE:1.1.1.2
	TEXINFO_3_9:1.1.1.2
	OPENBSD_2_0:1.1.1.1.0.2
	OPENBSD_2_0_BASE:1.1.1.1
	TEXINFO_3_7:1.1.1.1
	TEXINFO_3_6:1.1.1.1
	FSF:1.1.1;
locks; strict;
comment	@ * @;


1.4
date	2006.07.17.16.12.36;	author espie;	state Exp;
branches;
next	1.3;

1.3
date	2000.02.09.02.18.39;	author espie;	state Exp;
branches;
next	1.2;

1.2
date	99.01.11.16.38.08;	author espie;	state Exp;
branches;
next	1.1;

1.1
date	95.12.22.16.47.13;	author niklas;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	95.12.22.16.47.13;	author niklas;	state Exp;
branches;
next	1.1.1.2;

1.1.1.2
date	96.12.15.21.38.50;	author downsj;	state Exp;
branches;
next	1.1.1.3;

1.1.1.3
date	97.08.01.22.00.19;	author kstailey;	state Exp;
branches;
next	1.1.1.4;

1.1.1.4
date	2000.02.09.01.24.44;	author espie;	state Exp;
branches;
next	1.1.1.5;

1.1.1.5
date	2006.07.17.16.03.43;	author espie;	state Exp;
branches;
next	;


desc
@@


1.4
log
@conflict resolution
@
text
@/* info-utils.h -- Exported functions and variables from info-utils.c.
   $Id: info-utils.h,v 1.4 2004/04/11 17:56:45 karl Exp $   

   Copyright (C) 1993, 1996, 1998, 2002, 2003, 2004 Free Software
   Foundation, Inc.

   This program is free software; you can redistribute it and/or modify
   it under the terms of the GNU General Public License as published by
   the Free Software Foundation; either version 2, or (at your option)
   any later version.

   This program is distributed in the hope that it will be useful,
   but WITHOUT ANY WARRANTY; without even the implied warranty of
   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
   GNU General Public License for more details.

   You should have received a copy of the GNU General Public License
   along with this program; if not, write to the Free Software
   Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA 02111-1307, USA.

   Written by Brian Fox (bfox@@ai.mit.edu). */

#ifndef INFO_UTILS_H
#define INFO_UTILS_H

#include "nodes.h"
#include "window.h"
#include "search.h"

/* Structure which describes a node reference, such as a menu entry or
   cross reference.  Arrays of such references can be built by calling
   info_menus_of_node () or info_xrefs_of_node (). */
typedef struct {
  char *label;          /* User Label. */
  char *filename;       /* File where this node can be found. */
  char *nodename;       /* Name of the node. */
  int start, end;       /* Offsets within the containing node of LABEL. */
  int line_number;      /* Specific line number a menu item points to.  */
} REFERENCE;

/* When non-zero, various display and input functions handle ISO Latin
   character sets correctly. */
extern int ISO_Latin_p;

/* Variable which holds the most recent filename parsed as a result of
   calling info_parse_xxx (). */
extern char *info_parsed_filename;

/* Variable which holds the most recent nodename parsed as a result of
   calling info_parse_xxx (). */
extern char *info_parsed_nodename;

/* Parse the filename and nodename out of STRING.  If STRING doesn't
   contain a filename (i.e., it is NOT (FILENAME)NODENAME) then set
   INFO_PARSED_FILENAME to NULL.  If second argument NEWLINES_OKAY is
   non-zero, it says to allow the nodename specification to cross a
   newline boundary (i.e., only `,', `.', or `TAB' can end the spec). */
void info_parse_node (char *string, int newlines_okay);

/* Return a NULL terminated array of REFERENCE * which represents the menu
   found in NODE.  If there is no menu in NODE, just return a NULL pointer. */
extern REFERENCE **info_menu_of_node (NODE *node);

/* Return a NULL terminated array of REFERENCE * which represents the cross
   refrences found in NODE.  If there are no cross references in NODE, just
   return a NULL pointer. */
extern REFERENCE **info_xrefs_of_node (NODE *node);

/* Glean cross references from BINDING->buffer + BINDING->start until
   BINDING->end.  Return an array of REFERENCE * that represents each
   cross reference in this range. */
extern REFERENCE **info_xrefs (SEARCH_BINDING *binding);

/* Get the entry associated with LABEL in REFERENCES.  Return a pointer to
   the reference if found, or NULL. */
extern REFERENCE *info_get_labeled_reference (char *label,
    REFERENCE **references);

/* Glean menu entries from BINDING->buffer + BINDING->start until we
   have looked at the entire contents of BINDING.  Return an array
   of REFERENCE * that represents each menu item in this range. */
extern REFERENCE **info_menu_items (SEARCH_BINDING *binding);

/* A utility function for concatenating REFERENCE **.  Returns a new
   REFERENCE ** which is the concatenation of REF1 and REF2.  The REF1
   and REF2 arrays are freed, but their contents are not. */
REFERENCE **info_concatenate_references (REFERENCE **ref1, REFERENCE **ref2);

/* Copy an existing reference into new memory.  */
extern REFERENCE *info_copy_reference (REFERENCE *src);

/* Free the data associated with REFERENCES. */
extern void info_free_references (REFERENCE **references);

/* Search for sequences of whitespace or newlines in STRING, replacing
   all such sequences with just a single space.  Remove whitespace from
   start and end of string. */
void canonicalize_whitespace (char *string);

/* Return a pointer to a string which is the printed representation
   of CHARACTER if it were printed at HPOS. */
extern char *printed_representation (unsigned char character, int hpos);

/* Return a pointer to the part of PATHNAME that simply defines the file. */
extern char *filename_non_directory (char *pathname);

/* Return non-zero if NODE is one especially created by Info. */
extern int internal_info_node_p (NODE *node);

/* Make NODE appear to be one especially created by Info, and give it NAME. */
extern void name_internal_node (NODE *node, char *name);

/* Return the window displaying NAME, the name of an internally created
   Info window. */
extern WINDOW *get_internal_info_window (char *name);

/* Return a window displaying the node NODE. */
extern WINDOW *get_window_of_node (NODE *node);

/* Return the node addressed by LABEL in NODE (usually one of "Prev:",
   "Next:", "Up:", "File:", or "Node:".  After a call to this function,
   the globals `info_parsed_nodename' and `info_parsed_filename' contain
   the information. */
extern void info_parse_label (char *label, NODE *node);

#define info_file_label_of_node(n) info_parse_label (INFO_FILE_LABEL, n)
#define info_next_label_of_node(n) info_parse_label (INFO_NEXT_LABEL, n)
#define info_up_label_of_node(n)   info_parse_label (INFO_UP_LABEL, n)
#define info_prev_label_of_node(n) \
  do { \
    info_parse_label (INFO_PREV_LABEL, n); \
    if (!info_parsed_nodename && !info_parsed_filename) \
      info_parse_label (INFO_ALTPREV_LABEL, n); \
  } while (0)

#endif /* not INFO_UTILS_H */
@


1.3
log
@Merge conflicts, and a few details:
- Makefile.bsd-wrapper: man pages, disable NLS for now.
- doc/Makefile.in: install man pages manually, remove buggy targets that
would break `make clean'.
- makeinfo/Makefile.in: shell failure ??? rework problematic line.
- util/texindex.c: let maketempname create the file, remove race condition.
@
text
@d2 1
a2 1
   $Id: info-utils.h,v 1.5 1998/08/10 18:07:28 karl Exp $   
d4 2
a5 1
   Copyright (C) 1993, 96, 98 Free Software Foundation, Inc.
d38 1
d58 1
a58 1
void info_parse_node ();
d62 1
a62 1
extern REFERENCE **info_menu_of_node ();
d67 1
a67 1
extern REFERENCE **info_xrefs_of_node ();
d72 1
a72 1
extern REFERENCE **info_xrefs ();
d76 2
a77 1
extern REFERENCE *info_get_labeled_reference ();
d82 1
a82 1
extern REFERENCE **info_menu_items ();
d87 4
a90 1
REFERENCE **info_concatenate_references ();
d93 1
a93 1
extern void info_free_references ();
d98 1
a98 1
void canonicalize_whitespace ();
d102 1
a102 1
extern char *printed_representation ();
d105 1
a105 1
extern char *filename_non_directory ();
d108 1
a108 1
extern int internal_info_node_p ();
d111 1
a111 1
extern void name_internal_node ();
d115 1
a115 1
extern WINDOW *get_internal_info_window ();
d118 1
a118 1
extern WINDOW *get_window_of_node ();
d124 1
a124 1
extern void info_parse_label (/* label, node */);
@


1.2
log
@Upgrade to 3.12, merge with OpenBSD changes.
@
text
@d1 2
a2 2
/* info-utils.h -- Exported functions and variables from info-util.c.
   $Id: info-utils.h,v 1.3 1997/07/15 18:42:20 karl Exp $   
d4 1
a4 4
   This file is part of GNU Info, a program for reading online documentation
   stored in Info format.

   Copyright (C) 1993, 96 Free Software Foundation, Inc.
a24 7
#if !defined (HAVE_STRCHR)
#  undef strchr
#  undef strrchr
#  define strchr index
#  define strrchr rindex
#endif /* !HAVE_STRCHR */

d111 3
d116 1
a116 1
   the global INFO_PARSED_NODENAME and INFO_PARSED_FILENAME contain
a119 3
#define info_label_was_found \
   (info_parsed_nodename != NULL || info_parsed_filename != NULL)

d126 1
a126 1
    if (!info_label_was_found) \
@


1.1
log
@Initial revision
@
text
@d1 2
a2 1
/* info-utils.h -- Exported functions and variables from info-util.c. */
d4 1
a4 1
/* This file is part of GNU Info, a program for reading online documentation
d7 1
a7 1
   Copyright (C) 1993 Free Software Foundation, Inc.
d25 2
a26 2
#if !defined (_INFO_UTILS_H_)
#define _INFO_UTILS_H_
a34 5
#if !defined (HAVE_MEMCPY)
#  undef memcpy
#  define memcpy(dest, source, count) bcopy(source, dest, count)
#endif /* !HAVE_MEMCPY */

d43 4
a46 4
  char *label;		/* User Label. */
  char *filename;	/* File where this node can be found. */
  char *nodename;	/* Name of the node. */
  int start, end;	/* Offsets within the containing node of LABEL. */
d140 1
a140 1
#endif /* !_INFO_UTILS_H_ */
@


1.1.1.1
log
@Import of texinfo-3.6 from FSF
@
text
@@


1.1.1.2
log
@Import of texinfo-3.9.
@
text
@d1 1
a1 2
/* info-utils.h -- Exported functions and variables from info-util.c.
   $Id: info-utils.h,v 1.2 1996/10/02 22:24:11 karl Exp $   
d3 1
a3 1
   This file is part of GNU Info, a program for reading online documentation
d6 1
a6 1
   Copyright (C) 1993, 96 Free Software Foundation, Inc.
d33 5
@


1.1.1.3
log
@Import of FSF texinfo 3.11
@
text
@d2 1
a2 1
   $Id: info-utils.h,v 1.3 1997/07/15 18:42:20 karl Exp $   
d25 2
a26 2
#ifndef INFO_UTILS_H
#define INFO_UTILS_H
d43 4
a46 4
  char *label;          /* User Label. */
  char *filename;       /* File where this node can be found. */
  char *nodename;       /* Name of the node. */
  int start, end;       /* Offsets within the containing node of LABEL. */
d140 1
a140 1
#endif /* not INFO_UTILS_H */
@


1.1.1.4
log
@TexInfo 4.0. New manpages, can create html.
A bit more grumpy about bad texinfo, though.
@
text
@d1 2
a2 2
/* info-utils.h -- Exported functions and variables from info-utils.c.
   $Id: info-utils.h,v 1.5 1998/08/10 18:07:28 karl Exp $   
d4 4
a7 1
   Copyright (C) 1993, 96, 98 Free Software Foundation, Inc.
d28 7
a120 3
/* Return a window displaying the node NODE. */
extern WINDOW *get_window_of_node ();

d123 1
a123 1
   the globals `info_parsed_nodename' and `info_parsed_filename' contain
d127 3
d136 1
a136 1
    if (!info_parsed_nodename && !info_parsed_filename) \
@


1.1.1.5
log
@import texinfo 4.8 into the tree.
(okay theo, kettenis)
@
text
@d2 1
a2 1
   $Id: info-utils.h,v 1.4 2004/04/11 17:56:45 karl Exp $   
d4 1
a4 2
   Copyright (C) 1993, 1996, 1998, 2002, 2003, 2004 Free Software
   Foundation, Inc.
a36 1
  int line_number;      /* Specific line number a menu item points to.  */
d56 1
a56 1
void info_parse_node (char *string, int newlines_okay);
d60 1
a60 1
extern REFERENCE **info_menu_of_node (NODE *node);
d65 1
a65 1
extern REFERENCE **info_xrefs_of_node (NODE *node);
d70 1
a70 1
extern REFERENCE **info_xrefs (SEARCH_BINDING *binding);
d74 1
a74 2
extern REFERENCE *info_get_labeled_reference (char *label,
    REFERENCE **references);
d79 1
a79 1
extern REFERENCE **info_menu_items (SEARCH_BINDING *binding);
d84 1
a84 4
REFERENCE **info_concatenate_references (REFERENCE **ref1, REFERENCE **ref2);

/* Copy an existing reference into new memory.  */
extern REFERENCE *info_copy_reference (REFERENCE *src);
d87 1
a87 1
extern void info_free_references (REFERENCE **references);
d92 1
a92 1
void canonicalize_whitespace (char *string);
d96 1
a96 1
extern char *printed_representation (unsigned char character, int hpos);
d99 1
a99 1
extern char *filename_non_directory (char *pathname);
d102 1
a102 1
extern int internal_info_node_p (NODE *node);
d105 1
a105 1
extern void name_internal_node (NODE *node, char *name);
d109 1
a109 1
extern WINDOW *get_internal_info_window (char *name);
d112 1
a112 1
extern WINDOW *get_window_of_node (NODE *node);
d118 1
a118 1
extern void info_parse_label (char *label, NODE *node);
@


