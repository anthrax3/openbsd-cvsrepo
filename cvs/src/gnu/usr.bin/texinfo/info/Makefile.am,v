head	1.5;
access;
symbols
	OPENBSD_6_1:1.5.0.46
	OPENBSD_6_1_BASE:1.5
	OPENBSD_6_0:1.5.0.42
	OPENBSD_6_0_BASE:1.5
	OPENBSD_5_9:1.5.0.38
	OPENBSD_5_9_BASE:1.5
	OPENBSD_5_8:1.5.0.40
	OPENBSD_5_8_BASE:1.5
	OPENBSD_5_7:1.5.0.32
	OPENBSD_5_7_BASE:1.5
	OPENBSD_5_6:1.5.0.36
	OPENBSD_5_6_BASE:1.5
	OPENBSD_5_5:1.5.0.34
	OPENBSD_5_5_BASE:1.5
	OPENBSD_5_4:1.5.0.30
	OPENBSD_5_4_BASE:1.5
	OPENBSD_5_3:1.5.0.28
	OPENBSD_5_3_BASE:1.5
	OPENBSD_5_2:1.5.0.26
	OPENBSD_5_2_BASE:1.5
	OPENBSD_5_1_BASE:1.5
	OPENBSD_5_1:1.5.0.24
	OPENBSD_5_0:1.5.0.22
	OPENBSD_5_0_BASE:1.5
	OPENBSD_4_9:1.5.0.20
	OPENBSD_4_9_BASE:1.5
	OPENBSD_4_8:1.5.0.18
	OPENBSD_4_8_BASE:1.5
	OPENBSD_4_7:1.5.0.14
	OPENBSD_4_7_BASE:1.5
	OPENBSD_4_6:1.5.0.16
	OPENBSD_4_6_BASE:1.5
	OPENBSD_4_5:1.5.0.12
	OPENBSD_4_5_BASE:1.5
	OPENBSD_4_4:1.5.0.10
	OPENBSD_4_4_BASE:1.5
	OPENBSD_4_3:1.5.0.8
	OPENBSD_4_3_BASE:1.5
	OPENBSD_4_2:1.5.0.6
	OPENBSD_4_2_BASE:1.5
	OPENBSD_4_1:1.5.0.4
	OPENBSD_4_1_BASE:1.5
	OPENBSD_4_0:1.5.0.2
	OPENBSD_4_0_BASE:1.5
	TEXINFO_4_8:1.1.1.5
	OPENBSD_3_9:1.4.0.16
	OPENBSD_3_9_BASE:1.4
	OPENBSD_3_8:1.4.0.14
	OPENBSD_3_8_BASE:1.4
	OPENBSD_3_7:1.4.0.12
	OPENBSD_3_7_BASE:1.4
	OPENBSD_3_6:1.4.0.10
	OPENBSD_3_6_BASE:1.4
	OPENBSD_3_5:1.4.0.8
	OPENBSD_3_5_BASE:1.4
	OPENBSD_3_4:1.4.0.6
	OPENBSD_3_4_BASE:1.4
	OPENBSD_3_3:1.4.0.4
	OPENBSD_3_3_BASE:1.4
	OPENBSD_3_2:1.4.0.2
	OPENBSD_3_2_BASE:1.4
	TEXINFO_4_2:1.1.1.4
	OPENBSD_3_1:1.3.0.10
	OPENBSD_3_1_BASE:1.3
	OPENBSD_3_0:1.3.0.8
	OPENBSD_3_0_BASE:1.3
	OPENBSD_2_9:1.3.0.6
	OPENBSD_2_9_BASE:1.3
	OPENBSD_2_8:1.3.0.4
	OPENBSD_2_8_BASE:1.3
	OPENBSD_2_7:1.3.0.2
	OPENBSD_2_7_BASE:1.3
	TEXINFO_4_0:1.1.1.3
	OPENBSD_2_6:1.2.0.4
	OPENBSD_2_6_BASE:1.2
	OPENBSD_2_5:1.2.0.2
	OPENBSD_2_5_BASE:1.2
	TEXINFO_3_12:1.1.1.2
	OPENBSD_2_4:1.1.1.1.0.6
	OPENBSD_2_4_BASE:1.1.1.1
	OPENBSD_2_3:1.1.1.1.0.4
	OPENBSD_2_3_BASE:1.1.1.1
	OPENBSD_2_2:1.1.1.1.0.2
	OPENBSD_2_2_BASE:1.1.1.1
	TEXINFO_3_11:1.1.1.1
	FSF:1.1.1;
locks; strict;
comment	@# @;


1.5
date	2006.07.17.16.12.36;	author espie;	state Exp;
branches;
next	1.4;

1.4
date	2002.06.10.13.51.03;	author espie;	state Exp;
branches;
next	1.3;

1.3
date	2000.02.09.02.18.39;	author espie;	state Exp;
branches;
next	1.2;

1.2
date	99.01.11.16.38.06;	author espie;	state Exp;
branches;
next	1.1;

1.1
date	97.08.01.21.59.59;	author kstailey;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	97.08.01.21.59.59;	author kstailey;	state Exp;
branches;
next	1.1.1.2;

1.1.1.2
date	99.01.11.16.32.09;	author espie;	state Exp;
branches;
next	1.1.1.3;

1.1.1.3
date	2000.02.09.01.24.25;	author espie;	state Exp;
branches;
next	1.1.1.4;

1.1.1.4
date	2002.06.10.13.21.01;	author espie;	state Exp;
branches;
next	1.1.1.5;

1.1.1.5
date	2006.07.17.16.03.42;	author espie;	state Exp;
branches;
next	;


desc
@@


1.5
log
@conflict resolution
@
text
@# $Id: Makefile.am,v 1.8 2004/10/28 14:03:27 karl Exp $
# Makefile.am for texinfo/info.
# Run automake in .. to produce Makefile.in from this.
#
# This file is free software; as a special exception the author gives
# unlimited permission to copy and/or distribute it, with or without
# modifications, as long as this notice is preserved.
#
# This program is distributed in the hope that it will be useful, but
# WITHOUT ANY WARRANTY, to the extent permitted by law; without even the
# implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.

# Use `ginfo' for building to avoid confusion with the standard `info'
# target.  Removes the `g' in the install rule before applying any
# user-specified name transformations.
bin_PROGRAMS = ginfo infokey
transform = s/ginfo/info/; $(program_transform_name)

localedir = $(datadir)/locale
infodir2 = $(datadir)/info

# -I. for funs.h.
# Automake puts -I.. and -I$(srcdir) into DEFS by default, but
# we need to override it, so include them ourselves.
INCLUDES = -I. -I$(top_srcdir)/lib -I../intl -I.. -I$(srcdir)
DEFS += -DLOCALEDIR=\"$(localedir)\" -DINFODIR=\"$(infodir)\" \
	-DINFODIR2=\"$(infodir2)\"
LDADD = ../lib/libtxi.a $(TERMLIBS) $(LIBINTL)

EXTRA_DIST = README pcterm.c

ginfo_SOURCES = dir.c display.c display.h doc.h dribble.c dribble.h \
  echo-area.c echo-area.h \
  filesys.c filesys.h footnotes.c footnotes.h gc.c gc.h \
  indices.c indices.h info-utils.c info-utils.h info.c info.h infodoc.c \
  infomap.c infomap.h m-x.c man.c man.h nodemenu.c nodes.c nodes.h \
  search.c search.h session.c session.h signals.c signals.h \
  termdep.h terminal.c terminal.h tilde.c tilde.h \
  variables.c variables.h window.c window.h
nodist_ginfo_SOURCES = doc.c funs.h
infokey_SOURCES = infokey.c infokey.h key.h
nodist_infokey_SOURCES = key.c funs.h

# The files `doc.c', `key.c' and `funs.h' are created by ./makedoc run over the
# source files which contain DECLARE_INFO_COMMAND.  `funs.h' is a header file
# listing the functions found.  `doc.c' is a structure containing pointers
# to those functions along with completable names and documentation strings.
#
generated_sources = doc.c key.c funs.h

# We need a linear ordering to prevent race condition in parallel make.
# See the node ``(automake)Multiple Outputs'' for an explanation.
doc.c: key.c
key.c: funs.h

# These files are not distributed.
DISTCLEANFILES = $(generated_sources)

noinst_PROGRAMS = makedoc
makedoc_SOURCES = makedoc.c

# Files with Info commands defined that makedoc should read.
cmd_sources = $(srcdir)/session.c $(srcdir)/echo-area.c $(srcdir)/infodoc.c \
  $(srcdir)/m-x.c $(srcdir)/indices.c $(srcdir)/nodemenu.c \
  $(srcdir)/footnotes.c $(srcdir)/variables.c

# The $(EXEEXT) should be added by Automake, but isn't. Fine.
$(generated_sources): makedoc$(EXEEXT) $(cmd_sources)
	rm -f $(generated_sources)
	$(top_builddir)/$(native_tools)/info/makedoc $(cmd_sources)

# The following hack is necessary to hint make before the automatic
# dependencies are built.
BUILT_SOURCES = funs.h
@


1.4
log
@brain-dead cvs conflict merge
@
text
@d1 1
a1 1
# $Id: Makefile.am,v 1.25 2002/03/22 21:26:49 karl Exp $
a12 2
noinst_PROGRAMS = makedoc

d17 1
a17 1
transform = s/ginfo/info/; @@program_transform_name@@
d20 1
d26 3
a28 2
DEFS = -DINFODIR=\"$(infodir)\" -DLOCALEDIR=\"$(localedir)\" @@DEFS@@
LDADD = ../lib/libtxi.a @@TERMLIBS@@ @@LIBINTL@@
a31 12
if TEXINFO_MAINT
# The files `doc.c' and `funs.h' are created by ./makedoc run over the source
# files which contain DECLARE_INFO_COMMAND.  `funs.h' is a header file
# listing the functions found.  `doc.c' is a structure containing pointers
# to those functions along with completable names and documentation strings.
BUILT_SOURCES = doc.c funs.h key.c
else
# don't make installers rebuild them.
generated_sources = doc.c funs.h key.c
endif

makedoc_SOURCES = makedoc.c
d39 22
a60 3
  variables.c variables.h window.c window.h \
  $(BUILT_SOURCES) $(generated_sources)
infokey_SOURCES = infokey.c infokey.h key.c key.h
d68 7
a74 6
$(BUILT_SOURCES): makedoc$(EXEEXT) $(cmd_sources)
# This is insufficient.  We really need them not to be in the
# distribution in the first place, but it seems Automake does not
# currently allow that.
	rm -f $(BUILT_SOURCES)
	./makedoc $(cmd_sources)
@


1.3
log
@Merge conflicts, and a few details:
- Makefile.bsd-wrapper: man pages, disable NLS for now.
- doc/Makefile.in: install man pages manually, remove buggy targets that
would break `make clean'.
- makeinfo/Makefile.in: shell failure ??? rework problematic line.
- util/texindex.c: let maketempname create the file, remove race condition.
@
text
@d1 11
a11 3
## Makefile.am for texinfo/info.
## $Id: Makefile.am,v 1.19 1999/08/06 18:07:55 karl Exp $
## Run automake in .. to produce Makefile.in from this.
d18 1
a18 1
bin_PROGRAMS = ginfo
d28 1
a28 1
LDADD = ../lib/libtxi.a @@TERMLIBS@@ @@INTLLIBS@@
d32 1
d37 5
a41 1
BUILT_SOURCES = doc.c funs.h
d51 3
a53 1
  variables.c variables.h window.c window.h $(BUILT_SOURCES)
d60 2
a61 1
$(BUILT_SOURCES): makedoc $(cmd_sources)
@


1.2
log
@Upgrade to 3.12, merge with OpenBSD changes.
@
text
@d2 1
a2 1
## $Id: Makefile.am,v 1.11 1998/02/22 22:55:44 karl Exp $
d8 1
a8 1
# target.  The install rule removes the `g' before applying any
d22 8
d31 1
a31 1
ginfo_SOURCES = dir.c display.c display.h doc.c doc.h dribble.c dribble.h \
d33 1
a33 1
  filesys.c filesys.h footnotes.c footnotes.h funs.h gc.c gc.h \
d38 1
a38 9
  variables.c variables.h window.c window.h

EXTRA_DIST = README

# The files `doc.c' and `funs.h' are created by ./makedoc run over the source
# files which contain DECLARE_INFO_COMMAND.  `funs.h' is a header file
# listing the functions found.  `doc.c' is a structure containing pointers
# to those functions along with completable names and documentation strings.
BUILT_SOURCES = doc.c funs.h
d40 1
d46 4
@


1.1
log
@Initial revision
@
text
@d2 1
a2 1
## $Id: Makefile.am,v 1.8 1997/07/04 21:02:08 karl Exp $
d16 4
a19 1
INCLUDES = -I. -I$(top_srcdir)/lib -I../intl -DLOCALEDIR=\"$(localedir)\"
d38 8
a45 10
# 
# I do not know how to get this right.
# BUILT_SOURCES = doc.c funs.h
#
#cmd_sources = $(srcdir)/session.c $(srcdir)/echo-area.c $(srcdir)/infodoc.c \
#  $(srcdir)/m-x.c $(srcdir)/indices.c $(srcdir)/nodemenu.c \
#  $(srcdir)/footnotes.c $(srcdir)/variables.c
#
#$(BUILTSOURCES): makedoc $(cmd_sources)
#	./makedoc $(cmd_sources)
@


1.1.1.1
log
@Import of FSF texinfo 3.11
@
text
@@


1.1.1.2
log
@Import of FSF texinfo 3.12. This version creates empty info-dirs correctly.
@
text
@d2 1
a2 1
## $Id: Makefile.am,v 1.11 1998/02/22 22:55:44 karl Exp $
d16 1
a16 4
# Automake puts -I.. and -I$(srcdir) into DEFS by default, but
# we need to override it, so include them ourselves.
INCLUDES = -I. -I$(top_srcdir)/lib -I../intl -I.. -I$(srcdir)
DEFS = -DINFODIR=\"$(infodir)\" -DLOCALEDIR=\"$(localedir)\" @@DEFS@@
d35 10
a44 8
BUILT_SOURCES = doc.c funs.h

cmd_sources = $(srcdir)/session.c $(srcdir)/echo-area.c $(srcdir)/infodoc.c \
  $(srcdir)/m-x.c $(srcdir)/indices.c $(srcdir)/nodemenu.c \
  $(srcdir)/footnotes.c $(srcdir)/variables.c

$(BUILT_SOURCES): makedoc $(cmd_sources)
	./makedoc $(cmd_sources)
@


1.1.1.3
log
@TexInfo 4.0. New manpages, can create html.
A bit more grumpy about bad texinfo, though.
@
text
@d2 1
a2 1
## $Id: Makefile.am,v 1.19 1999/08/06 18:07:55 karl Exp $
d8 1
a8 1
# target.  Removes the `g' in the install rule before applying any
d22 11
a32 1
EXTRA_DIST = README pcterm.c
a39 11
makedoc_SOURCES = makedoc.c
ginfo_SOURCES = dir.c display.c display.h doc.h dribble.c dribble.h \
  echo-area.c echo-area.h \
  filesys.c filesys.h footnotes.c footnotes.h gc.c gc.h \
  indices.c indices.h info-utils.c info-utils.h info.c info.h infodoc.c \
  infomap.c infomap.h m-x.c man.c man.h nodemenu.c nodes.c nodes.h \
  search.c search.h session.c session.h signals.c signals.h \
  termdep.h terminal.c terminal.h tilde.c tilde.h \
  variables.c variables.h window.c window.h $(BUILT_SOURCES)

# Files with Info commands defined that makedoc should read.
a44 4
# This is insufficient.  We really need them not to be in the
# distribution in the first place, but it seems Automake does not
# currently allow that.
	rm -f $(BUILT_SOURCES)
@


1.1.1.4
log
@TeXinfo 4.2, much more robust html (and other formats) output, and a few
features that new FSF programs will need (e.g., gcc snapshots).

looked at by fgs@@, thanks.
@
text
@d1 3
a3 11
# $Id: Makefile.am,v 1.25 2002/03/22 21:26:49 karl Exp $
# Makefile.am for texinfo/info.
# Run automake in .. to produce Makefile.in from this.
#
# This file is free software; as a special exception the author gives
# unlimited permission to copy and/or distribute it, with or without
# modifications, as long as this notice is preserved.
#
# This program is distributed in the hope that it will be useful, but
# WITHOUT ANY WARRANTY, to the extent permitted by law; without even the
# implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
d10 1
a10 1
bin_PROGRAMS = ginfo infokey
d20 1
a20 1
LDADD = ../lib/libtxi.a @@TERMLIBS@@ @@LIBINTL@@
a23 1
if TEXINFO_MAINT
d28 1
a28 5
BUILT_SOURCES = doc.c funs.h key.c
else
# don't make installers rebuild them.
generated_sources = doc.c funs.h key.c
endif
d38 1
a38 3
  variables.c variables.h window.c window.h \
  $(BUILT_SOURCES) $(generated_sources)
infokey_SOURCES = infokey.c infokey.h key.c key.h
d45 1
a45 2
# The $(EXEEXT) should be added by Automake, but isn't. Fine.
$(BUILT_SOURCES): makedoc$(EXEEXT) $(cmd_sources)
@


1.1.1.5
log
@import texinfo 4.8 into the tree.
(okay theo, kettenis)
@
text
@d1 1
a1 1
# $Id: Makefile.am,v 1.8 2004/10/28 14:03:27 karl Exp $
d13 2
d19 1
a19 1
transform = s/ginfo/info/; $(program_transform_name)
a21 1
infodir2 = $(datadir)/info
d27 2
a28 3
DEFS += -DLOCALEDIR=\"$(localedir)\" -DINFODIR=\"$(infodir)\" \
	-DINFODIR2=\"$(infodir2)\"
LDADD = ../lib/libtxi.a $(TERMLIBS) $(LIBINTL)
d32 12
d51 3
a53 22
  variables.c variables.h window.c window.h
nodist_ginfo_SOURCES = doc.c funs.h
infokey_SOURCES = infokey.c infokey.h key.h
nodist_infokey_SOURCES = key.c funs.h

# The files `doc.c', `key.c' and `funs.h' are created by ./makedoc run over the
# source files which contain DECLARE_INFO_COMMAND.  `funs.h' is a header file
# listing the functions found.  `doc.c' is a structure containing pointers
# to those functions along with completable names and documentation strings.
#
generated_sources = doc.c key.c funs.h

# We need a linear ordering to prevent race condition in parallel make.
# See the node ``(automake)Multiple Outputs'' for an explanation.
doc.c: key.c
key.c: funs.h

# These files are not distributed.
DISTCLEANFILES = $(generated_sources)

noinst_PROGRAMS = makedoc
makedoc_SOURCES = makedoc.c
d61 6
a66 7
$(generated_sources): makedoc$(EXEEXT) $(cmd_sources)
	rm -f $(generated_sources)
	$(top_builddir)/$(native_tools)/info/makedoc $(cmd_sources)

# The following hack is necessary to hint make before the automatic
# dependencies are built.
BUILT_SOURCES = funs.h
@


