head	1.5;
access;
symbols
	OPENBSD_6_1:1.5.0.44
	OPENBSD_6_1_BASE:1.5
	OPENBSD_6_0:1.5.0.42
	OPENBSD_6_0_BASE:1.5
	OPENBSD_5_9:1.5.0.38
	OPENBSD_5_9_BASE:1.5
	OPENBSD_5_8:1.5.0.40
	OPENBSD_5_8_BASE:1.5
	OPENBSD_5_7:1.5.0.32
	OPENBSD_5_7_BASE:1.5
	OPENBSD_5_6:1.5.0.36
	OPENBSD_5_6_BASE:1.5
	OPENBSD_5_5:1.5.0.34
	OPENBSD_5_5_BASE:1.5
	OPENBSD_5_4:1.5.0.30
	OPENBSD_5_4_BASE:1.5
	OPENBSD_5_3:1.5.0.28
	OPENBSD_5_3_BASE:1.5
	OPENBSD_5_2:1.5.0.26
	OPENBSD_5_2_BASE:1.5
	OPENBSD_5_1_BASE:1.5
	OPENBSD_5_1:1.5.0.24
	OPENBSD_5_0:1.5.0.22
	OPENBSD_5_0_BASE:1.5
	OPENBSD_4_9:1.5.0.20
	OPENBSD_4_9_BASE:1.5
	OPENBSD_4_8:1.5.0.18
	OPENBSD_4_8_BASE:1.5
	OPENBSD_4_7:1.5.0.14
	OPENBSD_4_7_BASE:1.5
	OPENBSD_4_6:1.5.0.16
	OPENBSD_4_6_BASE:1.5
	OPENBSD_4_5:1.5.0.12
	OPENBSD_4_5_BASE:1.5
	OPENBSD_4_4:1.5.0.10
	OPENBSD_4_4_BASE:1.5
	OPENBSD_4_3:1.5.0.8
	OPENBSD_4_3_BASE:1.5
	OPENBSD_4_2:1.5.0.6
	OPENBSD_4_2_BASE:1.5
	OPENBSD_4_1:1.5.0.4
	OPENBSD_4_1_BASE:1.5
	OPENBSD_4_0:1.5.0.2
	OPENBSD_4_0_BASE:1.5
	TEXINFO_4_8:1.1.1.5
	OPENBSD_3_9:1.4.0.16
	OPENBSD_3_9_BASE:1.4
	OPENBSD_3_8:1.4.0.14
	OPENBSD_3_8_BASE:1.4
	OPENBSD_3_7:1.4.0.12
	OPENBSD_3_7_BASE:1.4
	OPENBSD_3_6:1.4.0.10
	OPENBSD_3_6_BASE:1.4
	OPENBSD_3_5:1.4.0.8
	OPENBSD_3_5_BASE:1.4
	OPENBSD_3_4:1.4.0.6
	OPENBSD_3_4_BASE:1.4
	OPENBSD_3_3:1.4.0.4
	OPENBSD_3_3_BASE:1.4
	OPENBSD_3_2:1.4.0.2
	OPENBSD_3_2_BASE:1.4
	TEXINFO_4_2:1.1.1.4
	OPENBSD_3_1:1.3.0.10
	OPENBSD_3_1_BASE:1.3
	OPENBSD_3_0:1.3.0.8
	OPENBSD_3_0_BASE:1.3
	OPENBSD_2_9:1.3.0.6
	OPENBSD_2_9_BASE:1.3
	OPENBSD_2_8:1.3.0.4
	OPENBSD_2_8_BASE:1.3
	OPENBSD_2_7:1.3.0.2
	OPENBSD_2_7_BASE:1.3
	TEXINFO_4_0:1.1.1.3
	OPENBSD_2_6:1.2.0.4
	OPENBSD_2_6_BASE:1.2
	OPENBSD_2_5:1.2.0.2
	OPENBSD_2_5_BASE:1.2
	TEXINFO_3_12:1.1.1.2
	OPENBSD_2_4:1.1.1.2.0.6
	OPENBSD_2_4_BASE:1.1.1.2
	OPENBSD_2_3:1.1.1.2.0.4
	OPENBSD_2_3_BASE:1.1.1.2
	OPENBSD_2_2:1.1.1.2.0.2
	OPENBSD_2_2_BASE:1.1.1.2
	TEXINFO_3_11:1.1.1.2
	OPENBSD_2_1:1.1.1.1.0.2
	OPENBSD_2_1_BASE:1.1.1.1
	TEXINFO_3_9:1.1.1.1
	FSF:1.1.1;
locks; strict;
comment	@ * @;


1.5
date	2006.07.17.16.12.36;	author espie;	state Exp;
branches;
next	1.4;

1.4
date	2002.06.10.13.51.03;	author espie;	state Exp;
branches;
next	1.3;

1.3
date	2000.02.09.02.18.42;	author espie;	state Exp;
branches;
next	1.2;

1.2
date	99.01.11.16.38.13;	author espie;	state Exp;
branches;
next	1.1;

1.1
date	96.12.15.21.39.27;	author downsj;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	96.12.15.21.39.27;	author downsj;	state Exp;
branches;
next	1.1.1.2;

1.1.1.2
date	97.08.01.22.00.58;	author kstailey;	state Exp;
branches;
next	1.1.1.3;

1.1.1.3
date	2000.02.09.01.25.28;	author espie;	state Exp;
branches;
next	1.1.1.4;

1.1.1.4
date	2002.06.10.13.21.20;	author espie;	state Exp;
branches;
next	1.1.1.5;

1.1.1.5
date	2006.07.17.16.03.48;	author espie;	state Exp;
branches;
next	;


desc
@@


1.5
log
@conflict resolution
@
text
@/* makeinfo.h -- declarations for Makeinfo.
   $Id: makeinfo.h,v 1.17 2004/11/30 02:03:23 karl Exp $

   Copyright (C) 1996, 1997, 1998, 1999, 2000, 2001, 2002, 2003, 2004 Free
   Software Foundation, Inc.

   This program is free software; you can redistribute it and/or modify
   it under the terms of the GNU General Public License as published by
   the Free Software Foundation; either version 2, or (at your option)
   any later version.

   This program is distributed in the hope that it will be useful,
   but WITHOUT ANY WARRANTY; without even the implied warranty of
   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
   GNU General Public License for more details.

   You should have received a copy of the GNU General Public License
   along with this program; if not, write to the Free Software
   Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA 02111-1307, USA.

   Written by Brian Fox (bfox@@ai.mit.edu). */

#ifndef MAKEINFO_H
#define MAKEINFO_H

#ifdef COMPILING_MAKEINFO
#  define DECLARE(type,var,init) type var = init
#else
#  define DECLARE(type,var,init) extern type var
#endif

/* Hardcoded per GNU standards, not dependent on argv[0].  */
DECLARE (char *, progname, "makeinfo");

/* Nonzero means a string is in execution, as opposed to a file. */
DECLARE (int, executing_string, 0);

/* Nonzero means to inhibit writing macro expansions to the output
   stream, because it has already been written. */
DECLARE (int, me_inhibit_expansion, 0);

/* Current output stream. */
DECLARE (FILE *, output_stream, NULL);

DECLARE (char *, pretty_output_filename, NULL);

/* Current output file name.  */
DECLARE (char *, current_output_filename, NULL);

/* Output paragraph buffer. */
DECLARE (unsigned char *, output_paragraph, NULL);

/* Offset into OUTPUT_PARAGRAPH. */
DECLARE (int, output_paragraph_offset, 0);

/* The output paragraph "cursor" horizontal position. */
DECLARE (int, output_column, 0);

/* Position in the output file. */
DECLARE (int, output_position, 0);

/* Number of lines in the output.  */
DECLARE (int, output_line_number, 1);
DECLARE (int, node_line_number, 0);

/* The offset into OUTPUT_PARAGRAPH where we have a meta character
   produced by a markup such as @@code or @@dfn.  */
DECLARE (int, meta_char_pos, -1);

/* Nonzero means output_paragraph contains text. */
DECLARE (int, paragraph_is_open, 0);

/* Nonzero means that `start_paragraph' MUST be called before we pay
   any attention to `close_paragraph' calls. */
DECLARE (int, must_start_paragraph, 0);

/* Nonzero means that we have seen "@@top" once already. */
DECLARE (int, top_node_seen, 0);

/* Nonzero means that we have seen a non-"@@top" node already. */
DECLARE (int, non_top_node_seen, 0);

/* Nonzero indicates that indentation is temporarily turned off. */
DECLARE (int, no_indent, 1);

/* The amount of indentation to apply at the start of each line. */
DECLARE (int, current_indent, 0);

/* Nonzero means that we suppress the indentation of the first paragraph
   following any section heading.  */
DECLARE (int, do_first_par_indent, 0);

/* Amount by which @@example indentation increases/decreases. */
DECLARE (int, example_indentation_increment, 5);

/* Amount by which @@table, @@defun, etc. indentation increases/decreases.  */
DECLARE (int, default_indentation_increment, 5);

/* Amount by which xml indentation increases/decreases.
   Zero means unnecessary whitespace is compressed.  */
DECLARE (int, xml_indentation_increment, 2);

/* Nonzero indicates that filling a line also indents the new line. */
DECLARE (int, indented_fill, 0);

/* Nonzero means forcing output text to be flushright. */
DECLARE (int, force_flush_right, 0);

/* The column at which long lines are broken. */
DECLARE (int, fill_column, 72);

/* Nonzero means that words are not to be split, even in long lines.  This
   gets changed for cm_w (). */
DECLARE (int, non_splitting_words, 0);

/* Nonzero means that we are currently hacking the insides of an
   insertion which would use a fixed width font. */
DECLARE (int, in_fixed_width_font, 0);

/* Nonzero if we are currently processing a multitable command */
DECLARE (int, multitable_active, 0);

/* Nonzero means that we're generating HTML. (--html) */
DECLARE (int, html, 0);

/* Nonzero means that we're generating XML. (--xml) */
DECLARE (int, xml, 0);

/* Nonzero means that we're generating DocBook. (--docbook) */
DECLARE (int, docbook, 0);

/* Nonzero means true 8-bit output for Info and plain text.
   (--enable-encoding) */
DECLARE (int, enable_encoding, 0);

/* Nonzero means escape characters in HTML output. */
DECLARE (int, escape_html, 1);

/* Access key number for next menu entry to be generated (1 to 9, or 10 to
   mean no access key)  */
DECLARE (int, next_menu_item_number, 1);

/* Nonzero means that the use of paragraph_start_indent is inhibited.
   @@example uses this to line up the left columns of the example text.
   A negative value for this variable is incremented each time it is used.
   @@noindent uses this to inhibit indentation for a single paragraph.  */
DECLARE (int, inhibit_paragraph_indentation, 0);

/* Nonzero indicates that filling will take place on long lines. */
DECLARE (int, filling_enabled, 1);

/* The current node's node name. */
DECLARE (char *, current_node, NULL);

/* Command name in the process of being hacked. */
DECLARE (char *, command, NULL);

/* Nonzero if we have seen an @@titlepage command.  */
DECLARE (int, titlepage_cmd_present, 0);

/* @@copying ... @@end copying. */
DECLARE (char *, copying_text, NULL);

/* @@documentdescription ... @@end documentdescription. */
DECLARE (const char *, document_description, NULL);

/* Nonzero if the last character inserted has the syntax class of NEWLINE. */
DECLARE (int, last_char_was_newline, 1);

/* The current input file state. */
DECLARE (char *, input_filename, (char *)NULL);
DECLARE (char *, input_text, (char *)NULL);
DECLARE (int, input_text_length, 0);
DECLARE (int, input_text_offset, 0);
DECLARE (int, line_number, 0);
DECLARE (char *, toplevel_output_filename, NULL);
#define curchar() input_text[input_text_offset]

/* A colon separated list of directories to search for files included
   with @@include.  This can be controlled with the `-I' option to makeinfo. */
DECLARE (char *, include_files_path, NULL);

/* The filename of the current input file.  This is never freed. */
DECLARE (char *, node_filename, NULL);

/* Name of CSS file to include, if any.  (--css-include).  */
DECLARE (char *, css_include, NULL);

/* Nonzero means do not output "Node: Foo" for node separations, that
   is, generate plain text.  (--no-headers) */
DECLARE (int, no_headers, 0);

/* Nonzero means that we process @@docbook and @@ifdocbook.  (--ifdocbook) */
DECLARE (int, process_docbook, 0);

/* Nonzero means that we process @@html and @@rawhtml even when not
   generating HTML.  (--ifhtml) */
DECLARE (int, process_html, 0);

/* Positive means process @@ifinfo (even if not generating Info);
   zero means don't process @@ifinfo (even if we are);
   -1 means we don't know yet.  (--ifinfo) */
DECLARE (int, process_info, -1);

/* Positive means process @@ifplaintext (even if not generating plain text);
   zero means we don't process @@ifplaintext (even if we are);
   -1 means we don't know yet.  (--ifplaintext) */
DECLARE (int, process_plaintext, -1);

/* Nonzero means that we process @@tex and @@iftex.  (--iftex) */
DECLARE (int, process_tex, 0);

/* Nonzero means that we process @@xml and @@ifxml.  (--ifxml) */
DECLARE (int, process_xml, 0);

/* Maximum number of references to a single node before complaining.
   (--reference-limit) */
DECLARE (int, reference_warning_limit, 1000);

/* Default is to check node references.  (--no-validate) */
DECLARE (int, validating, 1);

/* Nonzero means print information about what is going on.  (--verbose) */
DECLARE (int, verbose_mode, 0);

/* Nonzero means prefix each @@chapter, ... with a number like
   1, 1.1, etc.  (--number-sections) */
DECLARE (int, number_sections, 1);

/* Nonzero means split size.  When zero, DEFAULT_SPLIT_SIZE is used. */
DECLARE (int, split_size, 0);

/* Nonzero means expand node names and references while validating.
   This will avoid errors when the Texinfo document uses features
   like @@@@ and @@value inconsistently in node names, but will slow
   the program by about 80%.  You HAVE been warned.  */
DECLARE (int, expensive_validation, 0);

/* C's standard macros don't check to make sure that the characters being
   changed are within range.  So I have to check explicitly. */

#define coerce_to_upper(c) ((islower(c) ? toupper(c) : (c)))
#define coerce_to_lower(c) ((isupper(c) ? tolower(c) : (c)))

#define control_character_bit 0x40 /* %01000000, must be off. */
#define meta_character_bit 0x080/* %10000000, must be on.  */
#define CTL(c) ((c) & (~control_character_bit))
#define UNCTL(c) coerce_to_upper(((c)|control_character_bit))
#define META(c) ((c) | (meta_character_bit))
#define UNMETA(c) ((c) & (~meta_character_bit))

#define whitespace(c)       ((c) == '\t' || (c) == ' ')
#define sentence_ender(c)   ((c) == '.'  || (c) == '?' || (c) == '!')
#define cr_or_whitespace(c) (whitespace(c) || (c) == '\r' || (c) == '\n')

#ifndef isletter
#define isletter(c) (((c) >= 'A' && (c) <= 'Z') || ((c) >= 'a' && (c) <= 'z'))
#endif

#ifndef isupper
#define isupper(c) ((c) >= 'A' && (c) <= 'Z')
#endif

#ifndef isdigit
#define isdigit(c)  ((c) >= '0' && (c) <= '9')
#endif

#ifndef digit_value
#define digit_value(c) ((c) - '0')
#endif

/* These characters are not really HTML-safe (with strict XHTML),
   and also there are possible collisions.  That's the whole reason we
   designed a new conversion scheme in the first place.  But we
   nevertheless need to generate the old names.  See
   `add_escaped_anchor_name' in html.c.  */
#define OLD_HTML_SAFE "$-_.+!*'()"
#define OLD_URL_SAFE_CHAR(ch) (strchr (OLD_HTML_SAFE, ch))

/* For the current/stable scheme.  */
#define URL_SAFE_CHAR(ch) (isalnum (ch))

#define COMMAND_PREFIX '@@'

#define END_VERBATIM "end verbatim"

/* Stuff for splitting large files.  The numbers for Emacs
   texinfo-format-buffer are much smaller, but memory capacities have
   increased so much, 50k info files seem a bit tiny these days.  */
#define DEFAULT_SPLIT_SIZE 300000
DECLARE (int, splitting, 1);    /* Defaults to true for now. */

#define skip_whitespace() \
     while ((input_text_offset != input_text_length) && \
             whitespace (curchar())) \
       input_text_offset++

#define skip_whitespace_and_newlines() \
  do { \
   while (input_text_offset != input_text_length \
          && cr_or_whitespace (curchar ())) \
      { \
         if (curchar () == '\n') \
           line_number++; \
         input_text_offset++; \
      } \
   } while (0)

/* Return nonzero if STRING is the text at input_text + input_text_offset,
   else zero. */
#define looking_at(string) \
  (strncmp (input_text + input_text_offset, string, strlen (string)) == 0)

/* Any list with a member named `next'.  */
typedef struct generic_list {
  struct generic_list *next;
} GENERIC_LIST;

/* Reverse the order of a list.  */
extern GENERIC_LIST * reverse_list (GENERIC_LIST *list);

/* Possibly return Local Variables trailer for Info output.  */
extern char *info_trailer (void),
  *expansion (char *str, int implicit_code),
  *text_expansion (char *str),
  *maybe_escaped_expansion (char *str, int implicit_code, int do_escape_html),
  *full_expansion (char *str, int implicit_code);

extern void free_and_clear (char **pointer),
  add_word (char *string),
  add_char (int character),
  add_meta_char (int character),
  close_single_paragraph (void),
  insert_string (const char *),
  insert (int character),
  get_rest_of_line (int expand, char **string),
  add_html_block_elt (char *string),
  get_until_in_braces (char *match, char **string),
  get_until_in_line (int expand, char *match, char **string),
  canon_white (char *string),
  discard_until (char *string),
  indent (int amount),
  kill_self_indent (int count),
  backup_input_pointer (void),
  inhibit_output_flushing (void),
  uninhibit_output_flushing (void),
  flush_output (void),
  start_paragraph (void),
  close_paragraph (void),
  close_insertion_paragraph (void),
  init_paragraph (void),
  ignore_blank_line (void),
  reader_loop (void),
  discard_braces (void),
  replace_with_expansion (int from, int *to),
  fix_whitespace (char *string),
  add_html_elt (char *string);

extern int get_until (char *match, char **string),
  set_paragraph_indent (char *string),
  self_delimiting (int character),
  search_forward (char *string, int from),
  search_forward_until_pos (char *string, int from, int end_pos),
  next_nonwhitespace_character (void),
  fs_error (char *filename);

#if defined (VA_FPRINTF) && __STDC__
/* Unfortunately we must use prototypes if we are to use <stdarg.h>.  */
extern void add_word_args (const char *, ...),
  add_html_block_elt_args (const char *, ...),
  execute_string (char *, ...),
  warning (const char *format, ...),
  error (const char *format, ...),
  line_error (const char *format, ...),
  file_line_error (char *infile, int lno, const char *format, ...);
#else
extern void add_word_args (),
  add_html_block_elt_args (),
  execute_string (),
  warning (),
  error (),
  line_error (),
  file_line_error ();
#endif /* no prototypes */

#endif /* not MAKEINFO_H */
@


1.4
log
@brain-dead cvs conflict merge
@
text
@d2 1
a2 1
   $Id: makeinfo.h,v 1.37 2002/03/28 16:33:48 karl Exp $
d4 2
a5 1
   Copyright (C) 1996, 97, 98, 99, 2000, 01, 02 Free Software Foundation, Inc.
a33 7

enum reftype
{
  menu_reference, followed_reference
};

extern char *get_xref_token ();
a40 2

extern char *expansion (), *text_expansion (), *full_expansion ();
d62 4
d86 17
a108 3
/* The amount of indentation to apply at the start of each line. */
DECLARE (int, current_indent, 0);

a115 3
/* Amount by which @@example indentation increases/decreases. */
DECLARE (int, default_indentation_increment, 5);

d123 1
a123 1
/* Nonzero means that we're generating HTML. */
d126 1
a126 1
/* Nonzero means that we're generating XML. */
d129 1
a129 1
/* Nonzero means that we're generating DocBook. */
d132 2
a133 1
/* Nonzero means true 8-bit output for Info and plain text.  */
a137 1
extern char *escape_string (); /* do HTML escapes */
d158 3
d165 1
a165 1
DECLARE (char *, document_description, NULL);
d186 3
d193 3
d213 3
d226 3
a228 2
/* Nonzero means prefix each @@chapter, ... with a number like 1. (--number-sections) */
DECLARE (int, number_sections, 0);
d272 10
a281 2
#define HTML_SAFE "$-_.+!*'()"
#define URL_SAFE_CHAR(ch) (isalnum (ch) || strchr (HTML_SAFE, ch))
d287 4
a290 3
/* Stuff for splitting large files. */
#define SPLIT_SIZE_THRESHOLD 70000  /* What's good enough for Stallman... */
#define DEFAULT_SPLIT_SIZE 50000    /* Is probably good enough for me. */
a292 5
#define command_char(c) (!cr_or_whitespace(c) \
                         && (c) != '{' \
                         && (c) != '}' \
                         && (c) != '=')

d313 72
@


1.3
log
@Merge conflicts, and a few details:
- Makefile.bsd-wrapper: man pages, disable NLS for now.
- doc/Makefile.in: install man pages manually, remove buggy targets that
would break `make clean'.
- makeinfo/Makefile.in: shell failure ??? rework problematic line.
- util/texindex.c: let maketempname create the file, remove race condition.
@
text
@d2 1
a2 1
   $Id: makeinfo.h,v 1.25 1999/09/18 18:09:22 karl Exp $
d4 1
a4 1
   Copyright (C) 1996, 97, 98, 99 Free Software Foundation, Inc.
d48 1
a48 1
extern char *expansion (), *text_expansion ();
d119 9
d132 4
d151 6
d166 1
d184 9
a192 3
/* Nonzero means that we process @@ifinfo even when generating HTML.
   (--ifinfo) */
DECLARE (int, process_info, 1);
d210 3
d257 2
a288 1

@


1.2
log
@Upgrade to 3.12, merge with OpenBSD changes.
@
text
@d1 2
a2 2
/* makeinfo.h -- Declarations for Makeinfo.
   $Id: makeinfo.h,v 1.3 1997/07/15 18:28:38 karl Exp $
d4 1
a4 1
   Copyright (C) 1996, 97 Free Software Foundation, Inc.
d22 1
a22 6
/* Why, oh why, did I ever listen to rms when he said:
   "Don't make lots of small files, just make one big one!"  I've
   regretted it ever since with this program, and with readline.
   bfox@@ai.mit.edu Thu Jul 11 07:54:32 1996 */

#if !defined (MAKEINFO_H)
d25 2
a26 2
#if defined (COMPILING_MAKEINFO)
#  define DECLARE(type, var, init) type var = init
d28 1
a28 1
#  define DECLARE(type, var, init)  extern type var
d31 4
a34 1
enum insertion_type
d36 1
a36 8
  cartouche, defcv, deffn, defivar, defmac, defmethod,
  defop, defopt, defspec, deftp, deftypefn, deftypefun,
  deftypemethod, deftypevar, deftypevr, defun, defvar,
  defvr, detailmenu, direntry, display, enumerate, example,
  flushleft, flushright, format, ftable, group, ifclear,
  ifinfo, ifnothtml, ifnottex, ifset, itemize, lisp, menu,
  multitable, quotation, smallexample, smalllisp, table, vtable,
  bad_type
d39 8
a46 1
DECLARE (int, insertion_level, 0);
d48 4
a51 26
#if defined (COMPILING_MAKEINFO)
char *insertion_type_names[] =
{
  "cartouche", "defcv", "deffn", "defivar", "defmac", "defmethod",
  "defop", "defopt", "defspec", "deftp", "deftypefn", "deftypefun",
  "deftypemethod", "deftypevar", "deftypevr", "defun", "defvar",
  "defvr", "detailmenu", "direntry", "display", "enumerate", "example",
  "flushleft", "flushright", "format", "ftable", "group", "ifclear",
  "ifinfo", "ifnothtml", "ifnottex", "ifset", "itemize", "lisp", "menu",
  "multitable", "quotation", "smallexample", "smalllisp", "table", "vtable",
  "bad_type"
};
#endif

typedef struct istack_elt
{
  struct istack_elt *next;
  char *item_function;
  char *filename;
  int line_number;
  int filling_enabled;
  int indented_fill;
  enum insertion_type insertion;
  int inhibited;
  int in_fixed_width_font;
} INSERTION_ELT;
d53 1
a53 1
DECLARE (INSERTION_ELT *, insertion_stack, (INSERTION_ELT *)NULL);
d55 2
a56 2
/* Current output stream. */
DECLARE (FILE *, output_stream, (FILE *)NULL);
d59 1
a59 1
DECLARE (unsigned char *, output_paragraph, (unsigned char *)NULL);
d67 8
a74 1
/* Non-zero means output_paragraph contains text. */
d77 19
d99 15
a113 1
/* nonzero if we are currently processing a multitable command */
d116 24
a139 2
/* The column at which long lines are broken. */
DECLARE (int, fill_column, 72);
d144 1
a144 1
DECLARE (int, size_of_input_text, 0);
a146 1

d148 42
a189 11
/* **************************************************************** */
/*                                                                  */
/*                            Global Defines                        */
/*                                                                  */
/* **************************************************************** */

/* Error levels */
#define NO_ERROR 0
#define SYNTAX   2
#define FATAL    4

a192 6
/* GNU Library doesn't have toupper().  Until GNU gets this fixed, I will
   have to do it. */
#ifndef toupper
#define toupper(c) ((c) - 32)
#endif

d203 3
a205 3
#define whitespace(c) (((c) == '\t') || ((c) == ' '))
#define sentence_ender(c) ((c) == '.' || (c) == '?' || (c) == '!')
#define cr_or_whitespace(c) (((c) == '\t') || ((c) == ' ') || ((c) == '\n'))
d223 2
a224 1
#define member(c, s) (strchr (s, c) != NULL)
a230 1

d233 4
a236 7
typedef void COMMAND_FUNCTION (); /* So I can say COMMAND_FUNCTION *foo; */

#define command_char(c) ((!whitespace(c)) && \
                         ((c) != '\n') && \
                         ((c) != '{') && \
                         ((c) != '}') && \
                         ((c) != '='))
d239 1
a239 1
     while ((input_text_offset != size_of_input_text) && \
d245 2
a246 2
   while ((input_text_offset != size_of_input_text) && \
          (whitespace (curchar ()) || (curchar () == '\n'))) \
d254 7
a260 1
#endif /* !MAKEINFO_H */
@


1.1
log
@Initial revision
@
text
@d2 1
a2 1
   $Id: makeinfo.h,v 1.2 1996/07/21 11:21:45 karl Exp $
d4 1
a4 1
   Copyright (C) 1996 Free Software Foundation, Inc.
d38 8
a45 6
  menu, detailmenu, quotation, lisp, smalllisp, example, smallexample,
  display, itemize, format, enumerate, cartouche, multitable, table,
  ftable, vtable, group, ifinfo, flushleft, flushright, ifset,
  ifclear, deffn, defun, defmac, defspec, defvr, defvar, defopt,
  deftypefn, deftypefun, deftypevr, deftypevar, defcv, defivar, defop,
  defmethod, deftypemethod, deftp, direntry, bad_type
d53 7
a59 7
  "menu", "detailmenu", "quotation", "lisp", "smalllisp", "example",
  "smallexample", "display", "itemize", "format", "enumerate",
  "cartouche", "multitable", "table", "ftable", "vtable", "group",
  "ifinfo", "flushleft", "flushright", "ifset", "ifclear", "deffn",
  "defun", "defmac", "defspec", "defvr", "defvar", "defopt",
  "deftypefn", "deftypefun", "deftypevr", "deftypevar", "defcv",
  "defivar", "defop", "defmethod", "deftypemethod", "deftp", "direntry",
d112 3
a114 3
/*								    */
/*			      Global Defines  			    */
/*								    */
d119 2
a120 2
#define SYNTAX	 2
#define FATAL	 4
d169 1
a169 1
DECLARE (int, splitting, 1);	/* Defaults to true for now. */
d174 4
a177 4
			 ((c) != '\n') && \
			 ((c) != '{') && \
			 ((c) != '}') && \
			 ((c) != '='))
d181 1
a181 1
	     whitespace (curchar())) \
d187 1
a187 1
	  (whitespace (curchar ()) || (curchar () == '\n'))) \
d189 3
a191 3
	 if (curchar () == '\n') \
	   line_number++; \
	 input_text_offset++; \
@


1.1.1.1
log
@Import of texinfo-3.9.
@
text
@@


1.1.1.2
log
@Import of FSF texinfo 3.11
@
text
@d2 1
a2 1
   $Id: makeinfo.h,v 1.3 1997/07/15 18:28:38 karl Exp $
d4 1
a4 1
   Copyright (C) 1996, 97 Free Software Foundation, Inc.
d38 6
a43 8
  cartouche, defcv, deffn, defivar, defmac, defmethod,
  defop, defopt, defspec, deftp, deftypefn, deftypefun,
  deftypemethod, deftypevar, deftypevr, defun, defvar,
  defvr, detailmenu, direntry, display, enumerate, example,
  flushleft, flushright, format, ftable, group, ifclear,
  ifinfo, ifnothtml, ifnottex, ifset, itemize, lisp, menu,
  multitable, quotation, smallexample, smalllisp, table, vtable,
  bad_type
d51 7
a57 7
  "cartouche", "defcv", "deffn", "defivar", "defmac", "defmethod",
  "defop", "defopt", "defspec", "deftp", "deftypefn", "deftypefun",
  "deftypemethod", "deftypevar", "deftypevr", "defun", "defvar",
  "defvr", "detailmenu", "direntry", "display", "enumerate", "example",
  "flushleft", "flushright", "format", "ftable", "group", "ifclear",
  "ifinfo", "ifnothtml", "ifnottex", "ifset", "itemize", "lisp", "menu",
  "multitable", "quotation", "smallexample", "smalllisp", "table", "vtable",
d110 3
a112 3
/*                                                                  */
/*                            Global Defines                        */
/*                                                                  */
d117 2
a118 2
#define SYNTAX   2
#define FATAL    4
d167 1
a167 1
DECLARE (int, splitting, 1);    /* Defaults to true for now. */
d172 4
a175 4
                         ((c) != '\n') && \
                         ((c) != '{') && \
                         ((c) != '}') && \
                         ((c) != '='))
d179 1
a179 1
             whitespace (curchar())) \
d185 1
a185 1
          (whitespace (curchar ()) || (curchar () == '\n'))) \
d187 3
a189 3
         if (curchar () == '\n') \
           line_number++; \
         input_text_offset++; \
@


1.1.1.3
log
@TexInfo 4.0. New manpages, can create html.
A bit more grumpy about bad texinfo, though.
@
text
@d1 2
a2 2
/* makeinfo.h -- declarations for Makeinfo.
   $Id: makeinfo.h,v 1.25 1999/09/18 18:09:22 karl Exp $
d4 1
a4 1
   Copyright (C) 1996, 97, 98, 99 Free Software Foundation, Inc.
d22 6
a27 1
#ifndef MAKEINFO_H
d30 2
a31 2
#ifdef COMPILING_MAKEINFO
#  define DECLARE(type,var,init) type var = init
d33 1
a33 1
#  define DECLARE(type,var,init) extern type var
d36 11
a46 2
/* Hardcoded per GNU standards, not dependent on argv[0].  */
DECLARE (char *, progname, "makeinfo");
d48 4
a51 1
enum reftype
d53 8
a60 1
  menu_reference, followed_reference
d62 1
d64 14
a77 8
extern char *get_xref_token ();

/* Nonzero means a string is in execution, as opposed to a file. */
DECLARE (int, executing_string, 0);

/* Nonzero means to inhibit writing macro expansions to the output
   stream, because it has already been written. */
DECLARE (int, me_inhibit_expansion, 0);
a78 2
extern char *expansion (), *text_expansion ();

d80 1
a80 6
DECLARE (FILE *, output_stream, NULL);

DECLARE (char *, pretty_output_filename, NULL);

/* Current output file name.  */
DECLARE (char *, current_output_filename, NULL);
d83 1
a83 1
DECLARE (unsigned char *, output_paragraph, NULL);
d91 1
a91 8
/* Position in the output file. */
DECLARE (int, output_position, 0);

/* The offset into OUTPUT_PARAGRAPH where we have a meta character
   produced by a markup such as @@code or @@dfn.  */
DECLARE (int, meta_char_pos, -1);

/* Nonzero means output_paragraph contains text. */
a93 19
/* Nonzero means that `start_paragraph' MUST be called before we pay
   any attention to `close_paragraph' calls. */
DECLARE (int, must_start_paragraph, 0);

/* Nonzero means that we have seen "@@top" once already. */
DECLARE (int, top_node_seen, 0);

/* Nonzero means that we have seen a non-"@@top" node already. */
DECLARE (int, non_top_node_seen, 0);

/* Nonzero indicates that indentation is temporarily turned off. */
DECLARE (int, no_indent, 1);

/* Nonzero indicates that filling a line also indents the new line. */
DECLARE (int, indented_fill, 0);

/* Nonzero means forcing output text to be flushright. */
DECLARE (int, force_flush_right, 0);

d97 3
a102 39
/* Nonzero means that words are not to be split, even in long lines.  This
   gets changed for cm_w (). */
DECLARE (int, non_splitting_words, 0);

/* Amount by which @@example indentation increases/decreases. */
DECLARE (int, default_indentation_increment, 5);

/* Nonzero means that we are currently hacking the insides of an
   insertion which would use a fixed width font. */
DECLARE (int, in_fixed_width_font, 0);

/* Nonzero if we are currently processing a multitable command */
DECLARE (int, multitable_active, 0);

/* Nonzero means that we're generating HTML. */
DECLARE (int, html, 0);

/* Nonzero means escape characters in HTML output. */
DECLARE (int, escape_html, 1);
extern char *escape_string (); /* do HTML escapes */

/* Nonzero means that the use of paragraph_start_indent is inhibited.
   @@example uses this to line up the left columns of the example text.
   A negative value for this variable is incremented each time it is used.
   @@noindent uses this to inhibit indentation for a single paragraph.  */
DECLARE (int, inhibit_paragraph_indentation, 0);

/* Nonzero indicates that filling will take place on long lines. */
DECLARE (int, filling_enabled, 1);

/* The current node's node name. */
DECLARE (char *, current_node, NULL);

/* Command name in the process of being hacked. */
DECLARE (char *, command, NULL);

/* Nonzero if the last character inserted has the syntax class of NEWLINE. */
DECLARE (int, last_char_was_newline, 1);

d106 1
a106 1
DECLARE (int, input_text_length, 0);
d109 1
d111 11
a121 42

/* A colon separated list of directories to search for files included
   with @@include.  This can be controlled with the `-I' option to makeinfo. */
DECLARE (char *, include_files_path, NULL);

/* The filename of the current input file.  This is never freed. */
DECLARE (char *, node_filename, NULL);

/* Nonzero means do not output "Node: Foo" for node separations, that
   is, generate plain text.  (--no-headers) */
DECLARE (int, no_headers, 0);

/* Nonzero means that we process @@html and @@rawhtml even when not
   generating HTML.  (--ifhtml) */
DECLARE (int, process_html, 0);

/* Nonzero means that we process @@ifinfo even when generating HTML.
   (--ifinfo) */
DECLARE (int, process_info, 1);

/* Nonzero means that we process @@tex and @@iftex.  (--iftex) */
DECLARE (int, process_tex, 0);

/* Maximum number of references to a single node before complaining.
   (--reference-limit) */
DECLARE (int, reference_warning_limit, 1000);

/* Default is to check node references.  (--no-validate) */
DECLARE (int, validating, 1);

/* Nonzero means print information about what is going on.  (--verbose) */
DECLARE (int, verbose_mode, 0);

/* Nonzero means prefix each @@chapter, ... with a number like 1. (--number-sections) */
DECLARE (int, number_sections, 0);

/* Nonzero means expand node names and references while validating.
   This will avoid errors when the Texinfo document uses features
   like @@@@ and @@value inconsistently in node names, but will slow
   the program by about 80%.  You HAVE been warned.  */
DECLARE (int, expensive_validation, 0);

d125 6
d141 3
a143 3
#define whitespace(c)       ((c) == '\t' || (c) == ' ')
#define sentence_ender(c)   ((c) == '.'  || (c) == '?' || (c) == '!')
#define cr_or_whitespace(c) (whitespace(c) || (c) == '\r' || (c) == '\n')
d161 1
a161 2
#define HTML_SAFE "$-_.+!*'()"
#define URL_SAFE_CHAR(ch) (isalnum (ch) || strchr (HTML_SAFE, ch))
d168 1
d171 7
a177 4
#define command_char(c) (!cr_or_whitespace(c) \
                         && (c) != '{' \
                         && (c) != '}' \
                         && (c) != '=')
d180 1
a180 1
     while ((input_text_offset != input_text_length) && \
d186 2
a187 2
   while (input_text_offset != input_text_length \
          && cr_or_whitespace (curchar ())) \
d195 1
a195 7
/* Return nonzero if STRING is the text at input_text + input_text_offset,
   else zero. */
#define looking_at(string) \
  (strncmp (input_text + input_text_offset, string, strlen (string)) == 0)


#endif /* not MAKEINFO_H */
@


1.1.1.4
log
@TeXinfo 4.2, much more robust html (and other formats) output, and a few
features that new FSF programs will need (e.g., gcc snapshots).

looked at by fgs@@, thanks.
@
text
@d2 1
a2 1
   $Id: makeinfo.h,v 1.37 2002/03/28 16:33:48 karl Exp $
d4 1
a4 1
   Copyright (C) 1996, 97, 98, 99, 2000, 01, 02 Free Software Foundation, Inc.
d48 1
a48 1
extern char *expansion (), *text_expansion (), *full_expansion ();
a118 9
/* Nonzero means that we're generating XML. */
DECLARE (int, xml, 0);

/* Nonzero means that we're generating DocBook. */
DECLARE (int, docbook, 0);

/* Nonzero means true 8-bit output for Info and plain text.  */
DECLARE (int, enable_encoding, 0);

a122 4
/* Access key number for next menu entry to be generated (1 to 9, or 10 to
   mean no access key)  */
DECLARE (int, next_menu_item_number, 1);

a137 6
/* @@copying ... @@end copying. */
DECLARE (char *, copying_text, NULL);

/* @@documentdescription ... @@end documentdescription. */
DECLARE (char *, document_description, NULL);

a146 1
DECLARE (char *, toplevel_output_filename, NULL);
d164 3
a166 9
/* Positive means process @@ifinfo (even if not generating Info);
   zero means don't process @@ifinfo (even if we are);
   -1 means we don't know yet.  (--ifinfo) */
DECLARE (int, process_info, -1);

/* Positive means process @@ifplaintext (even if not generating plain text);
   zero means we don't process @@ifplaintext (even if we are);
   -1 means we don't know yet.  (--ifplaintext) */
DECLARE (int, process_plaintext, -1);
a183 3
/* Nonzero means split size.  When zero, DEFAULT_SPLIT_SIZE is used. */
DECLARE (int, split_size, 0);

a227 2
#define END_VERBATIM "end verbatim"

d258 1
@


1.1.1.5
log
@import texinfo 4.8 into the tree.
(okay theo, kettenis)
@
text
@d2 1
a2 1
   $Id: makeinfo.h,v 1.17 2004/11/30 02:03:23 karl Exp $
d4 1
a4 2
   Copyright (C) 1996, 1997, 1998, 1999, 2000, 2001, 2002, 2003, 2004 Free
   Software Foundation, Inc.
d33 7
d47 2
a69 4
/* Number of lines in the output.  */
DECLARE (int, output_line_number, 1);
DECLARE (int, node_line_number, 0);

a89 17
/* The amount of indentation to apply at the start of each line. */
DECLARE (int, current_indent, 0);

/* Nonzero means that we suppress the indentation of the first paragraph
   following any section heading.  */
DECLARE (int, do_first_par_indent, 0);

/* Amount by which @@example indentation increases/decreases. */
DECLARE (int, example_indentation_increment, 5);

/* Amount by which @@table, @@defun, etc. indentation increases/decreases.  */
DECLARE (int, default_indentation_increment, 5);

/* Amount by which xml indentation increases/decreases.
   Zero means unnecessary whitespace is compressed.  */
DECLARE (int, xml_indentation_increment, 2);

d96 3
d106 3
d116 1
a116 1
/* Nonzero means that we're generating HTML. (--html) */
d119 1
a119 1
/* Nonzero means that we're generating XML. (--xml) */
d122 1
a122 1
/* Nonzero means that we're generating DocBook. (--docbook) */
d125 1
a125 2
/* Nonzero means true 8-bit output for Info and plain text.
   (--enable-encoding) */
d130 1
a150 3
/* Nonzero if we have seen an @@titlepage command.  */
DECLARE (int, titlepage_cmd_present, 0);

d155 1
a155 1
DECLARE (const char *, document_description, NULL);
a175 3
/* Name of CSS file to include, if any.  (--css-include).  */
DECLARE (char *, css_include, NULL);

a179 3
/* Nonzero means that we process @@docbook and @@ifdocbook.  (--ifdocbook) */
DECLARE (int, process_docbook, 0);

a196 3
/* Nonzero means that we process @@xml and @@ifxml.  (--ifxml) */
DECLARE (int, process_xml, 0);

d207 2
a208 3
/* Nonzero means prefix each @@chapter, ... with a number like
   1, 1.1, etc.  (--number-sections) */
DECLARE (int, number_sections, 1);
d252 2
a253 10
/* These characters are not really HTML-safe (with strict XHTML),
   and also there are possible collisions.  That's the whole reason we
   designed a new conversion scheme in the first place.  But we
   nevertheless need to generate the old names.  See
   `add_escaped_anchor_name' in html.c.  */
#define OLD_HTML_SAFE "$-_.+!*'()"
#define OLD_URL_SAFE_CHAR(ch) (strchr (OLD_HTML_SAFE, ch))

/* For the current/stable scheme.  */
#define URL_SAFE_CHAR(ch) (isalnum (ch))
d259 3
a261 4
/* Stuff for splitting large files.  The numbers for Emacs
   texinfo-format-buffer are much smaller, but memory capacities have
   increased so much, 50k info files seem a bit tiny these days.  */
#define DEFAULT_SPLIT_SIZE 300000
d264 5
a288 72

/* Any list with a member named `next'.  */
typedef struct generic_list {
  struct generic_list *next;
} GENERIC_LIST;

/* Reverse the order of a list.  */
extern GENERIC_LIST * reverse_list (GENERIC_LIST *list);

/* Possibly return Local Variables trailer for Info output.  */
extern char *info_trailer (void),
  *expansion (char *str, int implicit_code),
  *text_expansion (char *str),
  *maybe_escaped_expansion (char *str, int implicit_code, int do_escape_html),
  *full_expansion (char *str, int implicit_code);

extern void free_and_clear (char **pointer),
  add_word (char *string),
  add_char (int character),
  add_meta_char (int character),
  close_single_paragraph (void),
  insert_string (const char *),
  insert (int character),
  get_rest_of_line (int expand, char **string),
  add_html_block_elt (char *string),
  get_until_in_braces (char *match, char **string),
  get_until_in_line (int expand, char *match, char **string),
  canon_white (char *string),
  discard_until (char *string),
  indent (int amount),
  kill_self_indent (int count),
  backup_input_pointer (void),
  inhibit_output_flushing (void),
  uninhibit_output_flushing (void),
  flush_output (void),
  start_paragraph (void),
  close_paragraph (void),
  close_insertion_paragraph (void),
  init_paragraph (void),
  ignore_blank_line (void),
  reader_loop (void),
  discard_braces (void),
  replace_with_expansion (int from, int *to),
  fix_whitespace (char *string),
  add_html_elt (char *string);

extern int get_until (char *match, char **string),
  set_paragraph_indent (char *string),
  self_delimiting (int character),
  search_forward (char *string, int from),
  search_forward_until_pos (char *string, int from, int end_pos),
  next_nonwhitespace_character (void),
  fs_error (char *filename);

#if defined (VA_FPRINTF) && __STDC__
/* Unfortunately we must use prototypes if we are to use <stdarg.h>.  */
extern void add_word_args (const char *, ...),
  add_html_block_elt_args (const char *, ...),
  execute_string (char *, ...),
  warning (const char *format, ...),
  error (const char *format, ...),
  line_error (const char *format, ...),
  file_line_error (char *infile, int lno, const char *format, ...);
#else
extern void add_word_args (),
  add_html_block_elt_args (),
  execute_string (),
  warning (),
  error (),
  line_error (),
  file_line_error ();
#endif /* no prototypes */
@


