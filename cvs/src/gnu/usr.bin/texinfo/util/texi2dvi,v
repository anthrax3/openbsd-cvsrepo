head	1.6;
access;
symbols
	OPENBSD_6_2:1.6.0.42
	OPENBSD_6_2_BASE:1.6
	OPENBSD_6_1:1.6.0.44
	OPENBSD_6_1_BASE:1.6
	OPENBSD_6_0:1.6.0.40
	OPENBSD_6_0_BASE:1.6
	OPENBSD_5_9:1.6.0.36
	OPENBSD_5_9_BASE:1.6
	OPENBSD_5_8:1.6.0.38
	OPENBSD_5_8_BASE:1.6
	OPENBSD_5_7:1.6.0.30
	OPENBSD_5_7_BASE:1.6
	OPENBSD_5_6:1.6.0.34
	OPENBSD_5_6_BASE:1.6
	OPENBSD_5_5:1.6.0.32
	OPENBSD_5_5_BASE:1.6
	OPENBSD_5_4:1.6.0.28
	OPENBSD_5_4_BASE:1.6
	OPENBSD_5_3:1.6.0.26
	OPENBSD_5_3_BASE:1.6
	OPENBSD_5_2:1.6.0.24
	OPENBSD_5_2_BASE:1.6
	OPENBSD_5_1_BASE:1.6
	OPENBSD_5_1:1.6.0.22
	OPENBSD_5_0:1.6.0.20
	OPENBSD_5_0_BASE:1.6
	OPENBSD_4_9:1.6.0.18
	OPENBSD_4_9_BASE:1.6
	OPENBSD_4_8:1.6.0.16
	OPENBSD_4_8_BASE:1.6
	OPENBSD_4_7:1.6.0.12
	OPENBSD_4_7_BASE:1.6
	OPENBSD_4_6:1.6.0.14
	OPENBSD_4_6_BASE:1.6
	OPENBSD_4_5:1.6.0.10
	OPENBSD_4_5_BASE:1.6
	OPENBSD_4_4:1.6.0.8
	OPENBSD_4_4_BASE:1.6
	OPENBSD_4_3:1.6.0.6
	OPENBSD_4_3_BASE:1.6
	OPENBSD_4_2:1.6.0.4
	OPENBSD_4_2_BASE:1.6
	OPENBSD_4_1:1.6.0.2
	OPENBSD_4_1_BASE:1.6
	OPENBSD_4_0:1.5.0.2
	OPENBSD_4_0_BASE:1.5
	TEXINFO_4_8:1.1.1.7
	OPENBSD_3_9:1.4.0.16
	OPENBSD_3_9_BASE:1.4
	OPENBSD_3_8:1.4.0.14
	OPENBSD_3_8_BASE:1.4
	OPENBSD_3_7:1.4.0.12
	OPENBSD_3_7_BASE:1.4
	OPENBSD_3_6:1.4.0.10
	OPENBSD_3_6_BASE:1.4
	OPENBSD_3_5:1.4.0.8
	OPENBSD_3_5_BASE:1.4
	OPENBSD_3_4:1.4.0.6
	OPENBSD_3_4_BASE:1.4
	OPENBSD_3_3:1.4.0.4
	OPENBSD_3_3_BASE:1.4
	OPENBSD_3_2:1.4.0.2
	OPENBSD_3_2_BASE:1.4
	TEXINFO_4_2:1.1.1.6
	OPENBSD_3_1:1.3.0.10
	OPENBSD_3_1_BASE:1.3
	OPENBSD_3_0:1.3.0.8
	OPENBSD_3_0_BASE:1.3
	OPENBSD_2_9:1.3.0.6
	OPENBSD_2_9_BASE:1.3
	OPENBSD_2_8:1.3.0.4
	OPENBSD_2_8_BASE:1.3
	OPENBSD_2_7:1.3.0.2
	OPENBSD_2_7_BASE:1.3
	TEXINFO_4_0:1.1.1.5
	OPENBSD_2_6:1.2.0.4
	OPENBSD_2_6_BASE:1.2
	OPENBSD_2_5:1.2.0.2
	OPENBSD_2_5_BASE:1.2
	TEXINFO_3_12:1.1.1.4
	OPENBSD_2_4:1.1.1.3.0.6
	OPENBSD_2_4_BASE:1.1.1.3
	OPENBSD_2_3:1.1.1.3.0.4
	OPENBSD_2_3_BASE:1.1.1.3
	OPENBSD_2_2:1.1.1.3.0.2
	OPENBSD_2_2_BASE:1.1.1.3
	TEXINFO_3_11:1.1.1.3
	OPENBSD_2_1:1.1.1.2.0.2
	OPENBSD_2_1_BASE:1.1.1.2
	TEXINFO_3_9:1.1.1.2
	OPENBSD_2_0:1.1.1.1.0.2
	OPENBSD_2_0_BASE:1.1.1.1
	TEXINFO_3_7:1.1.1.1
	TEXINFO_3_6:1.1.1.1
	FSF:1.1.1;
locks; strict;
comment	@# @;


1.6
date	2006.12.23.19.00.33;	author kettenis;	state Exp;
branches;
next	1.5;

1.5
date	2006.07.17.16.12.36;	author espie;	state Exp;
branches;
next	1.4;

1.4
date	2002.06.10.13.51.04;	author espie;	state Exp;
branches;
next	1.3;

1.3
date	2000.02.09.02.18.42;	author espie;	state Exp;
branches;
next	1.2;

1.2
date	99.01.11.16.38.15;	author espie;	state Exp;
branches;
next	1.1;

1.1
date	95.12.22.16.47.17;	author niklas;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	95.12.22.16.47.17;	author niklas;	state Exp;
branches;
next	1.1.1.2;

1.1.1.2
date	96.12.15.21.39.34;	author downsj;	state Exp;
branches;
next	1.1.1.3;

1.1.1.3
date	97.08.01.22.01.09;	author kstailey;	state Exp;
branches;
next	1.1.1.4;

1.1.1.4
date	99.01.11.16.32.47;	author espie;	state Exp;
branches;
next	1.1.1.5;

1.1.1.5
date	2000.02.09.01.26.25;	author espie;	state Exp;
branches;
next	1.1.1.6;

1.1.1.6
date	2002.06.10.13.21.27;	author espie;	state Exp;
branches;
next	1.1.1.7;

1.1.1.7
date	2006.07.17.16.03.51;	author espie;	state Exp;
branches;
next	;


desc
@@


1.6
log
@Remove trailing spaces in sed expression.

From Michael Small.  Fixes PR 5300.
ok otto@@
@
text
@#! /bin/sh
# texi2dvi --- produce DVI (or PDF) files from Texinfo (or LaTeX) sources.
# $Id: texi2dvi,v 1.5 2006/07/17 16:12:36 espie Exp $
#
# Copyright (C) 1992, 1993, 1994, 1995, 1996, 1997, 1998, 1999, 2001,
# 2002, 2003, 2004 Free Software Foundation, Inc.
#
# This program is free software; you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation; either version 2, or (at your option)
# any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program; if not, you can either send email to this
# program's maintainer or write to: The Free Software Foundation,
# Inc.; 59 Temple Place, Suite 330; Boston, MA 02111-1307, USA.
#
# Original author: Noah Friedman.
#
# Please send bug reports, etc. to bug-texinfo@@gnu.org.
# If possible, please send a copy of the output of the script called with
# the `--debug' option when making a bug report.

# This string is expanded by rcs automatically when this file is checked out.
rcs_revision='$Revision: 1.5 $'
rcs_version=`set - $rcs_revision; echo $2`
program=`echo $0 | sed -e 's!.*/!!'`
version="texi2dvi (GNU Texinfo 4.8) $rcs_version

Copyright (C) 2004 Free Software Foundation, Inc.
There is NO warranty.  You may redistribute this software
under the terms of the GNU General Public License.
For more information about these matters, see the files named COPYING."

usage="Usage: $program [OPTION]... FILE...

Run each Texinfo or LaTeX FILE through TeX in turn until all
cross-references are resolved, building all indices.  The directory
containing each FILE is searched for included files.  The suffix of FILE
is used to determine its language (LaTeX or Texinfo).

Makeinfo is used to perform Texinfo macro expansion before running TeX
when needed.

Operation modes:
  -b, --batch         no interaction
  -c, --clean         remove all auxiliary files
  -D, --debug         turn on shell debugging (set -x)
  -h, --help          display this help and exit successfully
  -o, --output=OFILE  leave output in OFILE (implies --clean);
                      Only one input FILE may be specified in this case
  -q, --quiet         no output unless errors (implies --batch)
  -s, --silent        same as --quiet
  -v, --version       display version information and exit successfully
  -V, --verbose       report on what is done

TeX tuning:
  -@@                   use @@input instead of \input; for preloaded Texinfo
  -e, -E, --expand     force macro expansion using makeinfo
  -I DIR               search DIR for Texinfo files
  -l, --language=LANG  specify the LANG of FILE (LaTeX or Texinfo)
  -p, --pdf            use pdftex or pdflatex for processing
  -r, --recode         call recode before TeX to translate input characters
  -t, --command=CMD    insert CMD in copy of input file
   or --texinfo=CMD    multiple values accumulate

The values of the BIBTEX, LATEX (or PDFLATEX), MAKEINDEX, MAKEINFO,
TEX (or PDFTEX), TEXINDEX, and THUMBPDF environment variables are used
to run those commands, if they are set.  Any CMD strings are added
after @@setfilename for Texinfo input, in the first line for LaTeX input.

Email bug reports to <bug-texinfo@@gnu.org>,
general questions and discussion to <help-texinfo@@gnu.org>.
Texinfo home page: http://www.gnu.org/software/texinfo/"

# Initialize variables for option overriding and otherwise.
# Don't use `unset' since old bourne shells don't have this command.
# Instead, assign them an empty value.
batch=false     # eval for batch mode
clean=
debug=
escape='\'
expand=         # t for expansion via makeinfo
miincludes=     # makeinfo include path
oformat=dvi
oname=          # --output
quiet=          # by default let the tools' message be displayed
recode=false
set_language=
textra=         # Extra TeX commands to insert in the input file.
textra_cmd=     # sed command to insert TEXTRA where appropriate
tmpdir=${TMPDIR:-/tmp}/t2d$$  # avoid collisions on 8.3 filesystems.
txincludes=     # TEXINPUTS extensions, with trailing colon
txiprereq=19990129 # minimum texinfo.tex version with macro expansion
verbose=false   # echo for verbose mode

orig_pwd=`pwd`

# Systems which define $COMSPEC or $ComSpec use semicolons to separate
# directories in TEXINPUTS.
if test -n "$COMSPEC$ComSpec"; then
  path_sep=";"
else
  path_sep=":"
fi

# Pacify verbose cds.
CDPATH=${ZSH_VERSION+.}$path_sep

# In case someone crazy insists on using grep -E.
: ${EGREP=egrep}

# return true if program $1 is somewhere in PATH, else false.
#
findprog () {
  foundprog=false
  for dir in `echo $PATH | tr "$path_sep" " "`; do
    if test -x "$dir/$1"; then  # does anyone still need test -f?
      foundprog=true
      break
    fi
  done
  $foundprog
}

# Report an error and exit with failure.
fatal () {
  echo "$0: $*" >&2
  exit 1
}

# Save TEXINPUTS so we can construct a new TEXINPUTS path for each file.
# Likewise for bibtex and makeindex.
tex_envvars="BIBINPUTS BSTINPUTS INDEXSTYLE TEXINPUTS"
for var in $tex_envvars; do
  eval ${var}_orig=\$$var
  export $var
done


# Push a token among the arguments that will be used to notice when we
# ended options/arguments parsing.
# Use "set dummy ...; shift" rather than 'set - ..." because on
# Solaris set - turns off set -x (but keeps set -e).
# Use ${1+"$@@"} rather than "$@@" because Digital Unix and Ultrix 4.3
# still expand "$@@" to a single argument (the empty string) rather
# than nothing at all.
arg_sep="$$--$$"
set dummy ${1+"$@@"} "$arg_sep"; shift

# 
# Parse command line arguments.
while test x"$1" != x"$arg_sep"; do

  # Handle --option=value by splitting apart and putting back on argv.
  case "$1" in
    --*=*)
      opt=`echo "$1" | sed -e 's/=.*//'`
      val=`echo "$1" | sed -e 's/[^=]*=//'`
      shift
      set dummy "$opt" "$val" ${1+"$@@"}; shift
      ;;
  esac

  # This recognizes --quark as --quiet.  So what.
  case "$1" in
    -@@ ) escape=@@;;
    # Silently and without documentation accept -b and --b[atch] as synonyms.
    -b | --b*) batch=true;;
    -c | --c*) clean=t;;
    -D | --d*) debug=t;;
    -e | -E | --e*) expand=t;;
    -h | --h*) echo "$usage"; exit 0;;
    -I | --I*)
      shift
      miincludes="$miincludes -I $1"
      txincludes="$txincludes$1$path_sep"
      ;;
    -l | --l*) shift; set_language=$1;;
    -o | --o*)
      shift
      clean=t
      case "$1" in
        /* | ?:/*) oname=$1;;
                *) oname="$orig_pwd/$1";;
      esac;;
    -p | --p*) oformat=pdf;;
    -q | -s | --q* | --s*) quiet=t; batch=true;;
    -r | --r*) recode=true;;
    -t | --tex* | --com* ) shift; textra="$textra\\
"`echo "$1" | sed 's/\\\\/\\\\\\\\/g'`;;
    -v | --vers*) echo "$version"; exit 0;;
    -V | --verb*) verbose=echo;;
    --) # What remains are not options.
      shift
      while test x"$1" != x"$arg_sep"; do
        set dummy ${1+"$@@"} "$1"; shift
        shift
      done
      break;;
    -*)
      echo "$0: Unknown or ambiguous option \`$1'." >&2
      echo "$0: Try \`--help' for more information." >&2
      exit 1;;
    *) set dummy ${1+"$@@"} "$1"; shift;;
   esac
   shift
done
# Pop the token
shift

# Interpret remaining command line args as filenames.
case $# in
 0)
  echo "$0: Missing file arguments." >&2
  echo "$0: Try \`--help' for more information." >&2
  exit 2
  ;;
 1) ;;
 *)
  if test -n "$oname"; then
    echo "$0: Can't use option \`--output' with more than one argument." >&2
    exit 2
  fi
  ;;
esac


# We can't do much without tex.
#
if findprog ${TEX:-tex}; then :; else cat <<EOM
You don't have a working TeX binary (${TEX:-tex}) installed anywhere in
your PATH, and texi2dvi cannot proceed without one.  If you want to use
this script, you'll need to install TeX (if you don't have it) or change
your PATH or TEX environment variable (if you do).  See the --help
output for more details.

For information about obtaining TeX, please see http://www.tug.org.  If
you happen to be using Debian, you can get it with this command:
  apt-get install tetex-bin
EOM
  exit 1
fi


# We want to use etex (or pdftex) if they are available, and the user
# didn't explicitly specify.  We don't check for elatex and pdfelatex
# because (as of 2003), the LaTeX team has asked that new distributions
# use etex by default anyway.
#
# End up with the TEX and PDFTEX variables set to what we are going to use.
if test -z "$TEX"; then
  if findprog etex; then TEX=etex; else TEX=tex; fi
fi
#
if test -z "$PDFTEX"; then
  if findprog pdfetex; then PDFTEX=pdfetex; else PDFTEX=pdftex; fi
fi


# Prepare the temporary directory.  Remove it at exit, unless debugging.
if test -z "$debug"; then
  trap "cd / && rm -rf $tmpdir" 0 1 2 15
fi

# Create the temporary directory with strict rights
(umask 077 && mkdir $tmpdir) || exit 1

# Prepare the tools we might need.  This may be extra work in some
# cases, but improves the readability of the script.
utildir=$tmpdir/utils
mkdir $utildir || exit 1

# A sed script that preprocesses Texinfo sources in order to keep the
# iftex sections only.  We want to remove non TeX sections, and comment
# (with `@@c texi2dvi') TeX sections so that makeinfo does not try to
# parse them.  Nevertheless, while commenting TeX sections, don't
# comment @@macro/@@end macro so that makeinfo does propagate them.
# Unfortunately makeinfo --iftex --no-ifinfo doesn't work well enough
# (yet), makeinfo can't parse the TeX commands, so work around with sed.
#
comment_iftex_sed=$utildir/comment.sed
cat <<EOF >$comment_iftex_sed
/^@@tex/,/^@@end tex/{
  s/^/@@c texi2dvi/
}
/^@@iftex/,/^@@end iftex/{
  s/^/@@c texi2dvi/
  /^@@c texi2dvi@@macro/,/^@@c texi2dvi@@end macro/{
    s/^@@c texi2dvi//
  }
}
/^@@ifnottex/,/^@@end ifnottex/{
  s/^/@@c (texi2dvi)/
}
/^@@ifinfo/,/^@@end ifinfo/{
  /^@@node/p
  /^@@menu/,/^@@end menu/p
  t
  s/^/@@c (texi2dvi)/
}
s/^@@ifnotinfo/@@c texi2dvi@@ifnotinfo/
s/^@@end ifnotinfo/@@c texi2dvi@@end ifnotinfo/
EOF
# Uncommenting is simple: Remove any leading `@@c texi2dvi'.
uncomment_iftex_sed=$utildir/uncomment.sed
cat <<EOF >$uncomment_iftex_sed
s/^@@c texi2dvi//
EOF

# Compute the list of xref files.
# Takes the filename (without extension) of which we look for xref
# files as argument.  The index files must be reported last.
get_xref_files ()
{
  # Get list of xref files (indexes, tables and lists).
  # Find all files having root filename with a two-letter extension,
  # saves the ones that are really Texinfo-related files.  .?o? catches
  # many files: .toc, .log, LaTeX tables and lists, FiXme's .lox, maybe more.
  for this_file in "$1".?o? "$1".aux "$1".?? "$1".idx; do
    # If file is empty, skip it.
    test -s "$this_file" || continue
    # If the file is not suitable to be an index or xref file, don't
    # process it.  It's suitable if the first character is a
    # backslash or right quote or at, as long as the first line isn't
    # \input texinfo.
    first_character=`sed -n '1s/^\(.\).*$/\1/p;q' $this_file`
    if (test "x$first_character" = "x\\" \
        && sed 1q $this_file | grep -v '^\\input *texinfo' >/dev/null) \
       || test "x$first_character" = "x'" \
       || test "x$first_character" = "x@@"; then
      xref_files="$xref_files ./$this_file"
    fi
  done
  echo "$xref_files"
}

# File descriptor usage:
# 0 standard input
# 1 standard output (--verbose messages)
# 2 standard error
# 3 some systems may open it to /dev/tty
# 4 used on the Kubota Titan
# 5 tools output (turned off by --quiet)

# Tools' output.  If quiet, discard, else redirect to the message flow.
if test "$quiet" = t; then
  exec 5>/dev/null
else
  exec 5>&1
fi

# Enable tracing
if test "$debug" = t; then
  exec 6>&1
  set -x
else
  exec 6>/dev/null
fi

# 
# TeXify files.

for command_line_filename in ${1+"$@@"}; do
  $verbose "Processing $command_line_filename ..."

  # If the COMMAND_LINE_FILENAME is not absolute (e.g., --debug.tex),
  # prepend `./' in order to avoid that the tools take it as an option.
  echo "$command_line_filename" | $EGREP '^(/|[A-z]:/)' >&6 \
  || command_line_filename="./$command_line_filename"

  # See if the file exists.  If it doesn't we're in trouble since, even
  # though the user may be able to reenter a valid filename at the tex
  # prompt (assuming they're attending the terminal), this script won't
  # be able to find the right xref files and so forth.
  if test ! -r "$command_line_filename"; then
    echo "$0: Could not read $command_line_filename, skipping." >&2
    continue
  fi

  # Get the name of the current directory.  We want the full path
  # because in clean mode we are in tmp, in which case a relative
  # path has no meaning.
  filename_dir=`echo $command_line_filename | sed 's!/[^/]*$!!;s!^$!.!'`
  filename_dir=`cd "$filename_dir" >/dev/null && pwd`

  # Strip directory part but leave extension.
  filename_ext=`basename "$command_line_filename"`
  # Strip extension.
  filename_noext=`echo "$filename_ext" | sed 's/\.[^.]*$//'`
  ext=`echo "$filename_ext" | sed 's/^.*\.//'`

  # _src.  Use same basename since we want to generate aux files with
  # the same basename as the manual.  If --expand, then output the
  # macro-expanded file to here, else copy the original file.
  tmpdir_src=$tmpdir/src
  filename_src=$tmpdir_src/$filename_noext.$ext

  # _xtr.  The file with the user's extra commands.
  tmpdir_xtr=$tmpdir/xtr
  filename_xtr=$tmpdir_xtr/$filename_noext.$ext

  # _rcd.  The Texinfo file recoded in 7bit.
  tmpdir_rcd=$tmpdir/rcd
  filename_rcd=$tmpdir_rcd/$filename_noext.$ext

  # _bak.  Copies of the previous xref files (another round is run if
  # they differ from the new one).
  tmpdir_bak=$tmpdir/bak

  # Make all those directories and give up if we can't succeed.
  mkdir $tmpdir_src $tmpdir_xtr $tmpdir_rcd $tmpdir_bak || exit 1

  # Source file might include additional sources.
  # We want `.:$orig_pwd' before anything else.  (We'll add `.:' later
  # after all other directories have been turned into absolute paths.)
  # `.' goes first to ensure that any old .aux, .cps,
  # etc. files in ${directory} don't get used in preference to fresher
  # files in `.'.  Include orig_pwd in case we are in clean mode, where
  # we've cd'd to a temp directory.
  common="$orig_pwd$path_sep$filename_dir$path_sep$txincludes"
  for var in $tex_envvars; do
    eval ${var}="\$common\$${var}_orig"
    export $var
  done

  # Convert relative paths to absolute paths, so we can run in another
  # directory (e.g., in --clean mode, or during the macro-support detection.)
  #
  # Empty path components are meaningful to tex.  We rewrite them
  # as `EMPTY' so they don't get lost when we split on $path_sep.
  # Hopefully no one will have an actual directory named EMPTY.
  replace_empty="-e 's/^$path_sep/EMPTY$path_sep/g' \
                 -e 's/$path_sep\$/${path_sep}EMPTY/g' \
                 -e 's/$path_sep$path_sep/${path_sep}EMPTY:/g'"
   TEXINPUTS=`echo $TEXINPUTS  | eval sed $replace_empty`
  INDEXSTYLE=`echo $INDEXSTYLE | eval sed $replace_empty`
  save_IFS=$IFS
  IFS=$path_sep
  set x $TEXINPUTS; shift
  TEXINPUTS=.
  for dir
  do
    case $dir in
      EMPTY)
        TEXINPUTS=$TEXINPUTS$path_sep
        ;;
      [\\/]* | ?:[\\/]*)        # Absolute paths don't need to be expanded.
        TEXINPUTS=$TEXINPUTS$path_sep$dir
        ;;
      *)
        abs=`cd "$dir" && pwd` && TEXINPUTS=$TEXINPUTS$path_sep$abs
        ;;
    esac
  done
  set x $INDEXSTYLE; shift
  INDEXSTYLE=.
  for dir
  do
    case $dir in
      EMPTY)
        INDEXSTYLE=$INDEXSTYLE$path_sep
        ;;
      [\\/]* | ?:[\\/]*)        # Absolute paths don't need to be expansed.
        INDEXSTYLE=$INDEXSTYLE$path_sep$dir
        ;;
      *)
        abs=`cd "$dir" && pwd` && INDEXSTYLE=$INDEXSTYLE$path_sep$abs
        ;;
    esac
  done
  IFS=$save_IFS

  # If the user explicitly specified the language, use that.
  # Otherwise, if the first line is \input texinfo, assume it's texinfo.
  # Otherwise, guess from the file extension.
  if test -n "$set_language"; then
    language=$set_language
  elif sed 1q "$command_line_filename" | grep 'input texinfo' >&6; then
    language=texinfo
  else
    language=
  fi

  # Get the type of the file (latex or texinfo) from the given language
  # we just guessed, or from the file extension if not set yet.
  case ${language:-$filename_ext} in
    [lL]a[tT]e[xX] | *.ltx | *.tex)
      # Assume a LaTeX file.  LaTeX needs bibtex and uses latex for
      # compilation.  No makeinfo.
      language=latex
      bibtex=${BIBTEX:-bibtex}
      makeinfo= # no point in running makeinfo on latex source.
      texindex=${MAKEINDEX:-makeindex}
      textra_cmd=1i
      if test $oformat = dvi; then
        tex=${LATEX:-latex}
      else
        tex=${PDFLATEX:-pdflatex}
      fi
      thumbpdf=${THUMBPDF:-thumbpdf}
      ;;

    *)
      # Assume a Texinfo file.  Texinfo files need makeinfo, texindex and tex.
      language=texinfo
      bibtex=
      texindex=${TEXINDEX:-texindex}
      textra_cmd='/^@@setfilename/a'
      if test $oformat = dvi; then
        # MetaPost also uses the TEX environment variable.  If the user
        # has set TEX=latex for that reason, don't bomb out.
        if echo $TEX | grep 'latex$' >/dev/null; then
          tex=tex  # don't bother trying to find etex
        else
          tex=$TEX
        fi
      else
        tex=$PDFTEX
      fi
      # Unless required by the user, makeinfo expansion is wanted only
      # if texinfo.tex is too old.
      if test "$expand" = t; then
        makeinfo=${MAKEINFO:-makeinfo}
      else
        # Check if texinfo.tex performs macro expansion by looking for
        # its version.  The version is a date of the form YEAR-MO-DA.
        # We don't need to use [0-9] to match the digits since anyway
        # the comparison with $txiprereq, a number, will fail with non
        # digits.
        # Run in the tmpdir to avoid leaving files.
	(
           cd $tmpdir
	   echo '\input texinfo.tex @@bye' >txiversion.tex
	   # Be sure that if tex wants to fail, it is not interactive:
	   # close stdin.
           $tex txiversion.tex </dev/null
	) >$tmpdir/txiversion.out 2>$tmpdir/txiversion.err
	if test $? != 0; then
	  cat $tmpdir/txiversion.out
	  cat $tmpdir/txiversion.err >&2
	  fatal "texinfo.tex appears to be broken, quitting."
        fi
	eval `sed -n 's/^.*\[\(.*\)version \(....\)-\(..\)-\(..\).*$/txiformat=\1 txiversion="\2\3\4"/p' $tmpdir/txiversion.out`
        $verbose "texinfo.tex preloaded as \`$txiformat', version is \`$txiversion' ..."
        if test "$txiprereq" -le "$txiversion" >/dev/null 2>&1; then
          makeinfo=
        else
          makeinfo=${MAKEINFO:-makeinfo}
        fi
        # As long as we had to run TeX, offer the user this convenience:
        test "$txiformat" = Texinfo && escape=@@
      fi
      thumbpdf=${THUMBPDF:-thumbpdf}
      ;;
  esac

  # Go to $tmpdir to try --help, since old versions that don't accept
  # --help will generate a texput.log.
  tex_help=`cd $tmpdir >/dev/null && $tex --help </dev/null 2>&1`

  # If possible, make TeX report error locations in GNU format.
  tex_args=
  case $tex_help in
    *file-line-error*) tex_args="$tex_args --file-line-error";;
  esac

  # Tell TeX to be batch if requested.  (\batchmode does not show
  # terminal output at all, so we don't want that.)
  $batch && tex_args="$tex_args ${escape}nonstopmode ${escape}input"

  # Expand macro commands in the original source file using Makeinfo.
  # Always use `end' footnote style, since the `separate' style
  #   generates different output (arguably this is a bug in -E).
  # Discard main info output, the user asked to run TeX, not makeinfo.
  if test -n "$makeinfo"; then
    $verbose "Macro-expanding $command_line_filename to $filename_src ..."
    sed -f $comment_iftex_sed "$command_line_filename" \
      | $makeinfo --footnote-style=end -I "$filename_dir" $miincludes \
        -o /dev/null --macro-expand=- \
      | sed -f $uncomment_iftex_sed >"$filename_src"
    filename_input=$filename_src
  fi

  # If makeinfo failed (or was not even run), use the original file as input.
  if test $? -ne 0 \
     || test ! -r "$filename_src"; then
    $verbose "Reverting to $command_line_filename ..."
    filename_input=$filename_dir/$filename_ext
  fi

  # Used most commonly for @@finalout, @@smallbook, etc.
  if test -n "$textra"; then
    $verbose "Inserting extra commands: $textra"
    sed "$textra_cmd\\
$textra" "$filename_input" >"$filename_xtr"
    filename_input=$filename_xtr
  fi

  # If this is a Texinfo file with a specified input encoding, and
  # recode is available, then recode to plain 7 bit Texinfo.
  if test $language = texinfo; then
    pgm='s/\(^\|.* \)@@documentencoding  *\([^ ][^ ]*\)\( .*\|$\)/\2/
	t found
	d
	:found
	q'
    encoding=`sed -e "$pgm" "$filename_input"`
    if $recode && test -n "$encoding" && findprog recode; then
      $verbose "Recoding from $encoding to Texinfo."
      if recode "$encoding"..texinfo <"$filename_input" >"$filename_rcd" \
         && test -s "$filename_rcd"; then
        filename_input=$filename_rcd
      else
        $verbose "Recoding failed, using original input."
      fi
    fi
  fi

  # If clean mode was specified, then move to the temporary directory.
  if test "$clean" = t; then
    $verbose "cd $tmpdir_src"
    cd "$tmpdir_src" || exit 1
  fi

  while :; do # will break out of loop below
    orig_xref_files=`get_xref_files "$filename_noext"`

    # Save copies of originals for later comparison.
    if test -n "$orig_xref_files"; then
      $verbose "Backing up xref files: `echo $orig_xref_files | sed 's|\./||g'`"
      cp $orig_xref_files $tmpdir_bak
    fi

    # Run bibtex on current file.
    # - If its input (AUX) exists.
    # - If AUX contains both `\bibdata' and `\bibstyle'.
    # - If some citations are missing (LOG contains `Citation').
    #   or the LOG complains of a missing .bbl
    #
    # We run bibtex first, because I can see reasons for the indexes
    # to change after bibtex is run, but I see no reason for the
    # converse.
    #
    # Don't try to be too smart.  Running bibtex only if the bbl file
    # exists and is older than the LaTeX file is wrong, since the
    # document might include files that have changed.  Because there
    # can be several AUX (if there are \include's), but a single LOG,
    # looking for missing citations in LOG is easier, though we take
    # the risk to match false messages.
    if test -n "$bibtex" \
       && test -r "$filename_noext.aux" \
       && test -r "$filename_noext.log" \
       && (grep '^\\bibdata[{]'  "$filename_noext.aux" \
           && grep '^\\bibstyle[{]' "$filename_noext.aux" \
           && (grep 'Warning:.*Citation.*undefined' "$filename_noext.log" \
               || grep 'No file .*\.bbl\.' "$filename_noext.log")) \
          >&6 2>&1; \
    then
      $verbose "Running $bibtex $filename_noext ..."
      $bibtex "$filename_noext" >&5 ||
        fatal "$bibtex exited with bad status, quitting."
    fi

    # What we'll run texindex on -- exclude non-index files.
    # Since we know index files are last, it is correct to remove everything
    # before .aux and .?o?.  But don't really do <anything>o<anything>
    # -- don't match whitespace as <anything>.
    # Otherwise, if orig_xref_files contains something like
    #   foo.xo foo.whatever
    # the space after the o will get matched.
    index_files=`echo "$orig_xref_files" \
                 | sed "s!.*\.aux!!g;
                        s!./$filename_noext\.[^ ]o[^ ]!!g;
                        s/^[ ]*//;s/[ ]*$//"`
    # Run texindex (or makeindex) on current index files.  If they
    # already exist, and after running TeX a first time the index
    # files don't change, then there's no reason to run TeX again.
    # But we won't know that if the index files are out of date or
    # nonexistent.
    if test -n "$texindex" && test -n "$index_files"; then
      $verbose "Running $texindex $index_files ..."
      $texindex $index_files 2>&5 1>&2 ||
         fatal "$texindex exited with bad status, quitting."
    fi

    # Finally, run TeX.
    cmd="$tex $tex_args"
    $verbose "Running $cmd $filename_input ..."
    if $cmd "$filename_input" >&5; then :; else
      echo "$0: $tex exited with bad status, quitting." >&2
      echo "$0: see $filename_noext.log for errors." >&2
      test "$clean" = t \
        && cp "$filename_noext.log" "$orig_pwd"
      exit 1
    fi


    # Decide if looping again is needed.
    finished=t

    # LaTeX (and the package changebar) report in the LOG file if it
    # should be rerun.  This is needed for files included from
    # subdirs, since texi2dvi does not try to compare xref files in
    # subdirs.  Performing xref files test is still good since LaTeX
    # does not report changes in xref files.
    if grep "Rerun to get" "$filename_noext.log" >&6 2>&1; then
      finished=
    fi

    # Check if xref files changed.
    new_xref_files=`get_xref_files "$filename_noext"`
    $verbose "Original xref files = `echo $orig_xref_files | sed 's|\./||g'`"
    $verbose "New xref files      = `echo $new_xref_files | sed 's|\./||g'`"

    # If old and new lists don't at least have the same file list,
    # then one file or another has definitely changed.
    test "x$orig_xref_files" != "x$new_xref_files" && finished=

    # File list is the same.  We must compare each file until we find
    # a difference.
    if test -n "$finished"; then
      for this_file in $new_xref_files; do
        $verbose "Comparing xref file `echo $this_file | sed 's|\./||g'` ..."
        # cmp -s returns nonzero exit status if files differ.
        if cmp -s "$this_file" "$tmpdir_bak/$this_file"; then :; else
          # We only need to keep comparing until we find one that
          # differs, because we'll have to run texindex & tex again no
          # matter how many more there might be.
          finished=
          $verbose "xref file `echo $this_file | sed 's|\./||g'` differed ..."
          test "$debug" = t && diff -c "$tmpdir_bak/$this_file" "$this_file"
          break
        fi
      done
    fi

    # If finished, exit the loop, else rerun the loop.
    test -n "$finished" && break
  done # while :;

  # If we were using thumbpdf and producing PDF, then run thumbpdf
  # and TeX one last time.
  if test $oformat = pdf \
     && test -r "$filename_noext.log" \
     && grep 'thumbpdf\.sty'  "$filename_noext.log" >&6 2>&1; \
  then
    $verbose "Running $thumbpdf $filename_noext ..."
    $thumbpdf "$filename_noext" >&5 ||
      fatal "$thumbpdf exited with bad status, quitting."

    $verbose "Running $cmd $filename_input..."
    if $cmd "$filename_input" >&5; then :; else
      echo "$0: $tex exited with bad status, quitting." >&2
      echo "$0: see $filename_noext.log for errors." >&2
      test "$clean" = t \
	&& cp "$filename_noext.log" "$orig_pwd"
      exit 1
    fi
  fi


  # If we were in clean mode, compilation was in a tmp directory.
  # Copy the DVI (or PDF) file into the directory where the compilation
  # has been done.  (The temp dir is about to get removed anyway.)
  # We also return to the original directory so that
  # - the next file is processed in correct conditions
  # - the temporary file can be removed
  if test -n "$clean"; then
    if test -n "$oname"; then
       dest=$oname
    else
       dest=$orig_pwd
    fi
    $verbose "Copying $oformat file from `pwd` to $dest"
    cp -p "./$filename_noext.$oformat" "$dest"
    cd / # in case $orig_pwd is on a different drive (for DOS)
    cd $orig_pwd || exit 1
  fi

  # Remove temporary files.
  if test "x$debug" = "x"; then
    $verbose "Removing $tmpdir_src $tmpdir_xtr $tmpdir_bak ..."
    cd /
    rm -rf $tmpdir_src $tmpdir_xtr $tmpdir_bak
  fi
done

$verbose "$0: done."
exit 0 # exit successfully, not however we ended the loop.
@


1.5
log
@conflict resolution
@
text
@d3 1
a3 1
# $Id: texi2dvi,v 1.34 2004/12/01 18:35:36 karl Exp $
d30 1
a30 1
rcs_revision='$Revision: 1.34 $'
d608 4
a611 4
    pgm='s/\(^\|.* \)@@documentencoding  *\([^ ][^ ]*\)\( .*\|$\)/\2/  
	t found                                                
	d                                                     
	:found                                               
@


1.4
log
@brain-dead cvs conflict merge
@
text
@d3 1
a3 1
# $Id: texi2dvi,v 0.51 2002/04/01 14:20:59 karl Exp $
d5 2
a6 2
# Copyright (C) 1992, 93, 94, 95, 96, 97, 98, 99, 2001, 02
# Free Software Foundation, Inc.
d23 1
a23 1
# Original author: Noah Friedman <friedman@@gnu.org>.
d30 1
a30 1
rcs_revision='$Revision: 0.51 $'
d33 1
a33 1
version="texi2dvi (GNU Texinfo 4.2) $rcs_version
d35 1
a35 1
Copyright (C) 2002 Free Software Foundation, Inc.
d64 1
a64 1
  -e, --expand         force macro expansion using makeinfo
d68 3
a70 2
  -t, --texinfo=CMD    insert CMD after @@setfilename in copy of input file
                       multiple values accumulate
d73 3
a75 2
TEX (or PDFTEX), and TEXINDEX environment variables are used to run
those commands, if they are set.
d91 1
a91 1
oname=		# --output
d93 1
d95 2
a96 1
textra=
d98 2
a99 2
txincludes=     # TEXINPUTS extensions
txiprereq=19990129 # minimum texinfo.tex version to have macro expansion
d112 33
a144 5
# Save this so we can construct a new TEXINPUTS path for each file.
TEXINPUTS_orig="$TEXINPUTS"
# Unfortunately makeindex does not read TEXINPUTS.
INDEXSTYLE_orig="$INDEXSTYLE"
export TEXINPUTS INDEXSTYLE
d174 1
a174 2
    -b | --b*) batch=eval;;
    -q | -s | --q* | --s*) quiet=t; batch=eval;;
d177 1
a177 1
    -e | --e*) expand=t;;
d182 1
a182 1
      txincludes="$txincludes$path_sep$1"
d193 4
a196 2
    -t | --t*) shift; textra="$textra\\
$1";;
d233 33
d275 1
a275 1
# cases, but improves the readibility of the script.
d280 7
a286 6
# iftex sections only.  We want to remove non TeX sections, and
# comment (with `@@c texi2dvi') TeX sections so that makeinfo does not
# try to parse them.  Nevertheless, while commenting TeX sections,
# don't comment @@macro/@@end macro so that makeinfo does propagate
# them.  Unfortunately makeinfo --iftex --no-ifhtml --no-ifinfo
# doesn't work well enough (yet) to use that, so work around with sed.
a297 6
/^@@html/,/^@@end html/{
  s/^/@@c (texi2dvi)/
}
/^@@ifhtml/,/^@@end ifhtml/{
  s/^/@@c (texi2dvi)/
}
d316 1
a316 1
# A shell script that computes the list of xref files.
d319 23
a341 23
get_xref_files=$utildir/get_xref.sh
cat <<\EOF >$get_xref_files
#! /bin/sh

# Get list of xref files (indexes, tables and lists).
# Find all files having root filename with a two-letter extension,
# saves the ones that are really Texinfo-related files.  .?o? catches
# LaTeX tables and lists.
for this_file in "$1".?o? "$1".aux "$1".?? "$1".idx; do
  # If file is empty, skip it.
  test -s "$this_file" || continue
  # If the file is not suitable to be an index or xref file, don't
  # process it.  The file can't be if its first character is not a
  # backslash or single quote.
  first_character=`sed -n '1s/^\(.\).*$/\1/p;q' $this_file`
  if test "x$first_character" = "x\\" \
     || test "x$first_character" = "x'"; then
    xref_files="$xref_files ./$this_file"
  fi
done
echo "$xref_files"
EOF
chmod 500 $get_xref_files
d359 6
a364 1
test "$debug" = t && set -x
d374 1
a374 1
  echo "$command_line_filename" | egrep '^(/|[A-z]:/)' >/dev/null \
d408 4
d417 1
a417 1
  mkdir $tmpdir_src $tmpdir_xtr $tmpdir_bak || exit 1
d419 4
a422 3
  # Source file might include additional sources.  Put `.' and
  # directory where source file(s) reside in TEXINPUTS before anything
  # else.  `.' goes first to ensure that any old .aux, .cps,
d426 52
a477 3
  common=".$path_sep$orig_pwd$path_sep$filename_dir$path_sep$txincludes$path_sep"
   TEXINPUTS="$common$TEXINPUTS_orig"
  INDEXSTYLE="$common$INDEXSTYLE_orig"
d484 1
a484 1
  elif sed 1q "$command_line_filename" | fgrep 'input texinfo' >/dev/null; then
d496 1
d500 1
d506 1
d511 1
d514 1
d516 7
a522 1
        tex=${TEX:-tex}
d524 1
a524 1
        tex=${PDFTEX:-pdftex}
a535 2
        txiversion_tex=txiversion.tex
        echo '\input texinfo.tex @@bye' >$tmpdir/$txiversion_tex
d537 13
a549 3
        eval `cd $tmpdir >/dev/null &&
              $tex $txiversion_tex 2>/dev/null |
              sed -n 's/^.*\[\(.*\)version \(....\)-\(..\)-\(..\).*$/txiformat=\1 txiversion="\2\3\4"/p'`
d556 2
a557 4
        # As long as we had to run TeX, offer the user this convenience
        if test "$txiformat" = Texinfo; then
          escape=@@
        fi
d559 1
d563 14
d600 2
a601 2
    sed '/^@@setfilename/a\
'"$textra" "$filename_input" >$filename_xtr
d605 20
d632 1
a632 1
    orig_xref_files=`$get_xref_files "$filename_noext"`
d663 1
a663 1
          >/dev/null 2>&1; \
d666 2
a667 4
      if $bibtex "$filename_noext" >&5; then :; else
        echo "$0: $bibtex exited with bad status, quitting." >&2
        exit 1
      fi
d672 5
a676 1
    # before .aux and .?o?.
d679 1
a679 1
                        s!./$filename_noext\..o.!!g;
d688 2
a689 4
      if $texindex $index_files 2>&5 1>&2; then :; else
         echo "$0: $texindex exited with bad status, quitting." >&2
         exit 1
      fi
d693 3
a695 6
    # Prevent $ESCAPE from being interpreted by the shell if it happens
    # to be `/'.
    $batch tex_args="\\${escape}nonstopmode\ \\${escape}input"
    cmd="$tex $tex_args $filename_input"
    $verbose "Running $cmd ..."
    if $cmd >&5; then :; else
d712 1
a712 1
    if fgrep "Rerun to get" "$filename_noext.log" >/dev/null 2>&1; then
d717 1
a717 1
    new_xref_files=`$get_xref_files "$filename_noext"`
d745 22
a766 1
  done
d794 1
a794 1
$verbose "$0 done."
@


1.3
log
@Merge conflicts, and a few details:
- Makefile.bsd-wrapper: man pages, disable NLS for now.
- doc/Makefile.in: install man pages manually, remove buggy targets that
would break `make clean'.
- makeinfo/Makefile.in: shell failure ??? rework problematic line.
- util/texindex.c: let maketempname create the file, remove race condition.
@
text
@d3 1
a3 1
# $Id: texi2dvi,v 0.43 1999/09/28 19:36:53 karl Exp $
d5 2
a6 1
# Copyright (C) 1992, 93, 94, 95, 96, 97, 98, 99 Free Software Foundation, Inc.
d30 1
a30 1
rcs_revision='$Revision: 0.43 $'
d33 1
a33 1
version="texi2dvi (GNU Texinfo 4.0) $rcs_version
d35 1
a35 1
Copyright (C) 1999 Free Software Foundation, Inc.
d50 20
a69 16
Options:
  -@@                   Use @@input instead of \input; for preloaded Texinfo.
  -b, --batch          No interaction.
  -c, --clean          Remove all auxiliary files.
  -D, --debug          Turn on shell debugging (set -x).
  -e, --expand         Force macro expansion using makeinfo.
  -I DIR               Search DIR for Texinfo files.
  -h, --help           Display this help and exit successfully.
  -l, --language=LANG  Specify the LANG of FILE: LaTeX or Texinfo.
  -p, --pdf            Use pdftex or pdflatex for processing.
  -q, --quiet          No output unless errors (implies --batch).
  -s, --silent         Same as --quiet.
  -t, --texinfo=CMD    Insert CMD after @@setfilename in copy of input file.
                       Multiple values accumulate.
  -v, --version        Display version information and exit successfully.
  -V, --verbose        Report on what is done.
d76 2
a77 1
general questions and discussion to <help-texinfo@@gnu.org>."
a81 1
escape='\'
d85 1
d87 1
d89 2
a91 1
miincludes=     # makeinfo include path
a95 1
quiet=          # by default let the tools' message be displayed
d154 7
d185 2
a186 1
if test $# = 0; then
d190 9
a198 1
fi
d231 9
a239 3
/^@@html/,/^@@end html/d
/^@@ifhtml/,/^@@end ifhtml/d
/^@@ifnottex/,/^@@end ifnottex/d
d243 2
a244 1
  d
d246 2
d408 3
a410 3
        eval `cd $tmpdir >/dev/null \
                    && $tex $txiversion_tex 2>/dev/null \
| sed -n 's/^.*\[\(.*\)version \(....\)-\(..\)-\(..\).*$/txiformat=\1 txiversion="\2\3\4"/p'`
d524 1
a525 1
    cmd="$tex $tex_args $filename_input"
d585 7
a591 2
    $verbose "Copying $oformat file from `pwd` to $orig_pwd"
    cp -p "./$filename_noext.$oformat" "$orig_pwd"
@


1.2
log
@Upgrade to 3.12, merge with OpenBSD changes.
@
text
@d2 2
a3 2
# texi2dvi --- smartly produce DVI files from texinfo sources
# $Id: texi2dvi,v 0.8 1998/02/26 21:13:13 karl Exp $
d5 1
a5 1
# Copyright (C) 1992, 93, 94, 95, 96, 97, 98 Free Software Foundation, Inc.
d22 1
a22 3
# Commentary:
#
# Author: Noah Friedman <friedman@@gnu.org>
a26 14
#
# In the interest of general portability, some common bourne shell
# constructs were avoided because they weren't guaranteed to be available
# in some earlier implementations.  I've tried to make this program as
# portable as possible.  Welcome to unix, where the lowest common
# denominator is rapidly diminishing.
#
# Among the more interesting lossages I noticed among Bourne shells:
#     * No shell functions.
#     * No `unset' builtin.
#     * `shift' cannot take a numeric argument, and signals an error if
#       there are no arguments to shift.
#
# Code:
d28 10
a37 2
# Name by which this script was invoked.
progname=`echo "$0" | sed -e 's/[^\/]*\///g'`
d39 1
a39 3
# This string is expanded by rcs automatically when this file is checked out.
rcs_revision='$Revision: 0.8 $'
version=`set - $rcs_revision; echo $2`
d41 4
a44 3
# To prevent hairy quoting and escaping later.
bq='`'
eq="'"
d46 2
a47 2
usage="Usage: $0 [OPTION]... FILE...
Run a Texinfo document through TeX.
d50 19
a68 10
-b, --batch          No interaction (\nonstopmode in TeX).
-c, --clean          Remove all auxiliary files.
-D, --debug          Turn on shell debugging ($bq${bq}set -x$eq$eq).
-t, --texinfo CMD    Insert CMD after @@setfilename before running TeX.
--verbose            Report on what is done.
-h, --help           Display this help and exit.
-v, --version        Display version information and exit.

The values of the TEX, TEXINDEX, and MAKEINFO environment variables are
used to run those commands, if they are set.
d70 2
a71 1
Email bug reports to bug-texinfo@@gnu.org."
d73 1
a73 1
# Initialize variables.
d76 2
a77 3
# Some of these, like TEX and TEXINDEX, may be inherited from the environment.
backup_extension=.bak # these files get deleted if all goes well.
batch=
d80 4
a83 1
orig_pwd="`pwd`"
d85 15
a99 4
verbose=false
makeinfo="${MAKEINFO-makeinfo}"
texindex="${TEXINDEX-texindex}"
tex="${TEX-tex}"
d103 13
a115 1
export TEXINPUTS
d117 1
d119 13
a131 7
# Make sure that all wildcarded options are long enough to be unambiguous.
# It's a good idea to document the full long option name in each case.
# Long options which take arguments will need a `*' appended to the
# canonical name to match the value appended after the `=' character.
while :; do
  test $# -eq 0 && break
  
d133 20
a152 15
    -b | --batch | --b* ) batch=t; shift ;;
    -c | --clean | --c* ) clean=t; shift ;;
    -D | --debug | --d* ) debug=t; shift ;;
    -h | --help | --h* )   echo "$usage"; exit 0 ;;
    # OK, we should do real option parsing here, but be lazy for now.
    -t | --texinfo | --t*) shift; textra="$textra $1"; shift ;; 
    -v | --vers* )
      echo "$progname (GNU Texinfo 3.12) $version"
      echo "Copyright (C) 1998 Free Software Foundation, Inc.
There is NO warranty.  You may redistribute this software
under the terms of the GNU General Public License.
For more information about these matters, see the files named COPYING."
      exit 0 ;;
    --verb* )            verbose=echo; shift ;;
    -- )     # Stop option processing
d154 10
a163 11
      break ;;
    -* )
      case "$1" in
        --*=* ) arg=`echo "$1" | sed -e 's/=.*//'` ;;
        * )     arg="$1" ;;
      esac
      exec 1>&2
      echo "$progname: Unknown or ambiguous option $bq$arg$eq."
      echo "$progname: Try $bq--help$eq for more information."
      exit 1 ;;
    * ) break ;;
d165 1
d167 2
d170 4
a173 6
# See if there are any command line args left (which will be interpreted as
# filename arguments).
if test $# -eq 0; then
  exec 1>&2
  echo "$progname: At least one file name is required as an argument."
  echo "$progname: Try $bq--help$eq for more information."
d177 89
d268 3
a270 1
# Texify files
d274 6
a279 1
  # See if file exists.  If it doesn't we're in trouble since, even
d282 3
a284 3
  # be able to find the right index files and so forth.
  if test ! -r "${command_line_filename}"; then
    echo "$0: Could not read ${command_line_filename}." >&2
d288 48
a335 26
  # Roughly equivalent to `dirname ...`, but more portable
  directory="`echo ${command_line_filename} | sed 's/\/[^\/]*$//'`"
  filename_texi="`basename ${command_line_filename}`"
  # Strip off the last extension part (probably .texinfo or .texi)
  filename_noext="`echo ${filename_texi} | sed 's/\.[^.]*$//'`"

  # Use same basename since we want to generate aux files with the same
  # basename as the manual.  Use extension .texi for the temp file so
  # that TeX will ignore it.  Thus, we must use a subdirectory.
  #
  # Output the macro-expanded file to here.  The vastly abbreviated
  # temporary directory name is so we don't have collisions on 8.3 or
  # 14-character filesystems.
  tmp_dir=${TMPDIR-/tmp}/txi2d.$$
  filename_tmp=$tmp_dir/$filename_noext.texi
  # Output the file with the user's extra commands to here.
  tmp_dir2=${tmp_dir}.2
  filename_tmp2=$tmp_dir2/$filename_noext.texi
  mkdir $tmp_dir $tmp_dir2
  # Always remove the temporary directories.
  trap "rm -rf $tmp_dir $tmp_dir2" 1 2 15

  # If directory and file are the same, then it's probably because there's
  # no pathname component.  Set dirname to `.', the current directory.
  if test "z${directory}" = "z${command_line_filename}"; then
    directory=.
d338 54
a391 5
  # Source file might @@include additional texinfo sources.  Put `.' and
  # directory where source file(s) reside in TEXINPUTS before anything
  # else.  `.' goes first to ensure that any old .aux, .cps, etc. files in
  # ${directory} don't get used in preference to fresher files in `.'.
  TEXINPUTS=".:${directory}:${TEXINPUTS_orig}"
d393 1
a393 2
  # Expand macro commands in the original source file using Makeinfo;
  #   the macro syntax bfox implemented is impossible to implement in TeX.
d397 12
a408 9
  # Redirect output to /dev/null to throw away `Making info file...' msg.
  $verbose "Macro-expanding $command_line_filename to $filename_tmp ..."
  $makeinfo --footnote-style=end -E $filename_tmp -o /dev/null \
    $command_line_filename >/dev/null

  # But if there were no macros, or makeinfo failed for some reason,
  # just use the original file.  (It shouldn't make any difference, but
  # let's be safe.)
  if test $? -ne 0 || cmp -s $filename_tmp $command_line_filename; then
d410 1
a410 1
    cp -p $command_line_filename $filename_tmp
a411 2
  filename_input=$filename_tmp
  dirname_input=$tmp_dir
d415 1
a415 1
    $verbose "Inserting extra commands: $textra."
d417 2
a418 3
'"$textra" $filename_input >$filename_tmp2
   filename_input=$filename_tmp2
   dirname_input=$tmp_dir2
d423 2
a424 3
    $verbose "cd $dirname_input"
    cd $dirname_input || exit 1
    filename_input=`basename $filename_input`
d427 58
a484 20
  while true; do # will break out of loop below
    # "Unset" variables that might have values from previous iterations and
    # which won't be completely reset later.
    definite_index_files=

    # Find all files having root filename with a two-letter extension,
    # determine whether they're really index files, and save them.  Foo.aux
    # is actually the cross-references file, but we need to keep track of
    # that too.
    possible_index_files="`eval echo ${filename_noext}.?? ${filename_noext}.aux`"
    for this_file in ${possible_index_files}; do
      # If file is empty, forget it.
      test -s "${this_file}" || continue

      # Examine first character of file.  If it's not suitable to be an
      # index or xref file, don't process it.
      first_character="`sed -n '1s/^\(.\).*$/\1/p;q' ${this_file}`"
      if test "x${first_character}" = "x\\" \
         || test "x${first_character}" = "x'"; then
        definite_index_files="${definite_index_files} ${this_file}"
a485 20
    done
    orig_index_files="${definite_index_files}"
    orig_index_files_sans_aux="`echo ${definite_index_files} \
                                 | sed 's/'${filename_noext}'\.aux//;
                                        s/^[ ]*//;s/[ ]*$//;'`"

    # Now save copies of original index files so we have some means of
    # comparison later.
    $verbose "Backing up current index files: $orig_index_files ..."  
    for index_file_to_save in ${orig_index_files}; do
      cp "${index_file_to_save}" "${index_file_to_save}${backup_extension}"
    done

    # Run texindex on current index files.  If they already exist, and
    # after running TeX a first time the index files don't change, then
    # there's no reason to run TeX again.  But we won't know that if the
    # index files are out of date or nonexistent.
    if test -n "${orig_index_files_sans_aux}"; then
      $verbose "Running $texindex $orig_index_files_sans_aux ..."
      ${texindex} ${orig_index_files_sans_aux}
d489 11
a499 4
    if test "$batch" = t; then
      tex_mode='\nonstopmode'
    else
      tex_mode=
d501 36
a536 50
    $verbose "Running $tex $filename_input ..."
    cmd="$tex $tex_mode \\input $filename_input"
    $cmd

    # Check if index files changed.
    # 
    definite_index_files=
    # Get list of new index files.
    possible_index_files="`eval echo ${filename_noext}.?? ${filename_noext}.aux`"
    for this_file in ${possible_index_files}; do
       # If file is empty, forget it.
       test -s "${this_file}" || continue

       # Examine first character of file.  If it's not a backslash or
       # single quote, then it's definitely not an index or xref file.
       # (Will have to check for @@ when we switch to Texinfo syntax in
       # all these files...)
       first_character="`sed -n '1s/^\(.\).*$/\1/p;q' ${this_file}`"
       if test "x${first_character}" = "x\\" \
          || test "x${first_character}" = "x'"; then
         definite_index_files="${definite_index_files} ${this_file}"
       fi
    done
    new_index_files="${definite_index_files}"
    new_index_files_sans_aux="`echo ${definite_index_files} \
                               | sed 's/'${filename_noext}'\.aux//;
                                      s/^[ ]*//;s/[ ]*$//;'`"

    # If old and new list don't at least have the same file list, then one
    # file or another has definitely changed.
    $verbose "Original index files =$orig_index_files"
    $verbose "New index files =$new_index_files"
    if test "z${orig_index_files}" != "z${new_index_files}"; then
      index_files_changed_p=t
    else
      # File list is the same.  We must compare each file until we find a
      # difference.
      index_files_changed_p=
      for this_file in ${new_index_files}; do
        $verbose "Comparing index file $this_file ..."
        # cmp -s will return nonzero exit status if files differ.
        cmp -s "${this_file}" "${this_file}${backup_extension}"
        if test $? -ne 0; then
          # We only need to keep comparing until we find *one* that
          # differs, because we'll have to run texindex & tex no
          # matter what.
          index_files_changed_p=t
          $verbose "Index file $this_file differed:"
          test $verbose = echo \
          && diff -c "${this_file}${backup_extension}" "${this_file}"
d542 2
a543 6
    # If index files have changed since TeX has been run, or if the aux
    # file wasn't present originally, run texindex and TeX again.
    if test "${index_files_changed_p}"; then :; else
      # Nothing changed.  We're done with TeX.
      break
    fi
d547 1
a547 1
  # Copy the DVI file into the directory where the compilation
d553 3
a555 2
    $verbose "Copying DVI file from `pwd` to $orig_pwd"
    cp -p $filename_noext.dvi $orig_pwd
d559 5
a563 10
  # Generate list of files to delete, then call rm once with the entire
  # list.  This is significantly faster than multiple executions of rm.
  file_list=
  for file in ${orig_index_files}; do
    file_list="${file_list} ${file}${backup_extension}"
  done
  if test -n "${file_list}"; then
    $verbose "Removing $file_list $tmp_dir $tmp_dir2 ..."
    rm -f ${file_list}
    rm -rf $tmp_dir $tmp_dir2
d568 1
a568 1
true # exit successfully.
@


1.1
log
@Initial revision
@
text
@d3 4
a6 5

# Copyright (C) 1992, 1993, 1994, 1995 Free Software Foundation, Inc.

# $Id: texi2dvi,v 0.5 1995/06/20 02:21:36 friedman Exp $

d21 1
a21 1

d23 4
a26 4

# Author: Noah Friedman <friedman@@prep.ai.mit.edu>

# Please send bug reports, etc. to bug-texinfo@@prep.ai.mit.edu
d29 1
a29 1

d36 1
a36 2
# Among the more interesting lossages I noticed with some bourne shells
# are:
d41 1
a41 1

d48 1
a48 1
rcs_revision='$Revision: 0.5 $'
d55 2
a56 2
usage="Usage: $progname {options} [file1] {file2 {...}}
(version $version)
d58 3
a60 1
Options are:
d62 4
a65 2
-h, --help           You're looking at it.
-v, --version        Print version number.
d67 4
a70 2
Arguments in brackets are required.  Those in braces are optional.
"
d75 4
a78 2
# Some of these, like TEX and TEXINDEX, may be inherited from the environment
backup_extension=.bak
d81 3
a83 1
verbose=
d87 1
a87 2
# Save this so we can construct a new TEXINPUTS path for each file to be
# processed.
d96 3
a98 2
while : ; do
  case $# in 0) break ;; esac
d100 14
a113 12
    -D | --debug | --d* )
      debug=t
      shift
     ;;
    -h | --help | --h* )
      echo "$usage" 1>&2
      exit 0
     ;;
    -v | --version | --v* )
      echo "texi2dvi version $version" 1>&2
      exit 0
     ;;
d116 1
a116 2
      break
     ;;
d123 4
a126 7
      echo "$progname: unknown or ambiguous option $bq$arg$eq"
      echo "$progname: Use $bq--help$eq for a list of options."
      exit 1
     ;;
    * )
      break
     ;;
d131 7
a137 9
# filename arguments)
case $# in
  0 )
    exec 1>&2
    echo "$progname: at least one file name is required as an argument."
    echo "$progname: Use $bq--help$eq for a description of command syntax."
    exit 2
   ;;
esac
d139 1
a139 1
case "$debug" in t ) set -x ;; esac
d142 93
a234 38
for command_line_filename in ${1+"$@@"} ; do
   # Roughly equivalent to `dirname ...`, but more portable
   directory="`echo ${command_line_filename} | sed 's/\/[^\/]*$//'`"
   filename_texi="`basename ${command_line_filename}`"
   # Strip off the last extension part (probably .texinfo or .texi)
   filename_noext="`echo ${filename_texi} | sed 's/\.[^.]*$//'`"

   # If directory and file are the same, then it's probably because there's
   # no pathname component.  Set dirname to `.', the current directory.
   if test "z${directory}" = "z${command_line_filename}" ; then
      directory="."
   fi

   # Source file might @@include additional texinfo sources.  Put `.' and
   # directory where source file(s) reside in TEXINPUTS before anything
   # else.  `.' goes first to ensure that any old .aux, .cps, etc. files in
   # ${directory} don't get used in preference to fresher files in `.'.
   TEXINPUTS=".:${directory}:${TEXINPUTS_orig}"

   # "Unset" variables that might have values from previous iterations and
   # which won't be completely reset later.
   definite_index_files=""

   # See if file exists here.  If it doesn't we're in trouble since, even
   # though the user may be able to reenter a valid filename at the tex
   # prompt (assuming they're attending the terminal), this script won't be
   # able to find the right index files and so forth.
   if test ! -r "${command_line_filename}" ; then
      echo "${progname}: ${command_line_filename}: No such file or permission denied." 1>&2
      continue;
   fi

   # Find all files having root filename with a two-letter extension,
   # determine whether they're really index files, and save them.  Foo.aux
   # is actually the cross-references file, but we need to keep track of
   # that too.
   possible_index_files="`eval echo ${filename_noext}.?? ${filename_noext}.aux`"
   for this_file in ${possible_index_files} ; do
d236 1
a236 3
      if test ! -s "${this_file}" ; then
         continue;
      fi
d238 2
a239 2
      # Examine first character of file.  If it's not a backslash or
      # single quote, then it's definitely not an index or xref file.
d241 3
a243 2
      if test "${first_character}" = "\\" -o "${first_character}" = "'" ; then
         definite_index_files="${definite_index_files} ${this_file}"
d245 19
a263 17
   done
   orig_index_files="${definite_index_files}"
   orig_index_files_sans_aux="`echo ${definite_index_files} \
                                | sed 's/'${filename_noext}'\.aux//;
                                       s/^[ ]*//;s/[ ]*$//;'`"

   # Now save copies of original index files so we have some means of
   # comparison later.
   for index_file_to_save in ${orig_index_files} ; do
       cp "${index_file_to_save}" "${index_file_to_save}${backup_extension}"
   done

   # Run texindex on current index files.  If they already exist, and
   # after running TeX a first time the index files don't change, then
   # there's no reason to run TeX again.  But we won't know that if the
   # index files are out of date or nonexistent.
   if test "${orig_index_files_sans_aux}" ; then
d265 1
a265 1
   fi
d267 58
a324 16
   if ${tex} ${command_line_filename} ; then		# TeX run first time
      definite_index_files=""
      # Get list of new index files
      possible_index_files="`eval echo ${filename_noext}.?? ${filename_noext}.aux`"
      for this_file in ${possible_index_files} ; do
         # If file is empty, forget it.
         if test ! -s ${this_file} ; then
            continue;
         fi

         # Examine first character of file.  If it's not a backslash or
         # single quote, then it's definitely not an index or xref file.
         first_character="`sed -n '1s/^\(.\).*$/\1/p;q' ${this_file}`"
         if test "${first_character}" = "\\" -o "${first_character}" = "'" ; then
            definite_index_files="${definite_index_files} ${this_file}"
         fi
d326 1
a326 25
      new_index_files="${definite_index_files}"
      new_index_files_sans_aux="`echo ${definite_index_files} \
                                  | sed 's/'${filename_noext}'\.aux//;
                                         s/^[ ]*//;s/[ ]*$//;'`"

      # If old and new list don't at least have the same file list, then one
      # file or another has definitely changed.
      if test "${orig_index_files}" != "${new_index_files}" ; then
         index_files_changed_p=t
      else
         # File list is the same.  We must compare each file until we find a
         # difference.
         index_files_changed_p=""
         for this_file in ${new_index_files} ; do
            # cmp -s will return nonzero exit status if files differ.
            cmp -s "${this_file}" "${this_file}${backup_extension}"
            if test $? -ne 0  ; then
               # We only need to keep comparing until we find *one* that
               # differs, because we'll have to run texindex & tex no
               # matter what.
               index_files_changed_p=t
               break
            fi
         done
      fi
d328 7
a334 13
      # If index files have changed since TeX has been run, or if the aux
      # file wasn't present originally, run texindex and TeX again.
      if test "${index_files_changed_p}"  ; then
         retval=0
         if test "${new_index_files_sans_aux}" ; then
            ${texindex} ${new_index_files_sans_aux}
            retval=$?
         fi
         if test ${retval} -eq 0 ; then
            ${tex} "${command_line_filename}"
         fi
      fi
   fi
d336 23
a358 9
   # Generate list of files to delete, then call rm once with the entire
   # list.  This is significantly faster than multiple executions of rm.
   file_list=""
   for file in ${orig_index_files} ; do
       file_list="${file_list} ${file}${backup_extension}"
   done
   if test "${file_list}" ; then
      rm -f ${file_list}
   fi
d361 2
a362 1
# texi2dvi ends here
@


1.1.1.1
log
@Import of texinfo-3.6 from FSF
@
text
@@


1.1.1.2
log
@Import of texinfo-3.9.
@
text
@d4 1
a4 1
# Copyright (C) 1992, 93, 94, 95, 96 Free Software Foundation, Inc.
d6 1
a6 1
# $Id: texi2dvi,v 1.10 1996/10/04 18:21:55 karl Exp $
d50 1
a50 1
rcs_revision='$Revision: 1.10 $'
d57 2
a58 2
usage="Usage: $0 [OPTION]... FILE...
Run a Texinfo document through TeX.
d60 1
a60 1
Options:
d62 2
a63 4
-t, --texinfo CMD    Insert CMD after @@setfilename before running TeX.
--verbose            Report on what is done.
-h, --help           Display this help and exit.
-v, --version        Display version information and exit.
d65 1
a65 4
The values of the TEX, TEXINDEX, and MAKEINFO environment variables are
used to run those commands, if they are set.

Email bug reports to bug-texinfo@@prep.ai.mit.edu.
d71 2
a72 2
# Some of these, like TEX and TEXINDEX, may be inherited from the environment.
backup_extension=.bak # these files get deleted if all goes well.
d75 1
a75 3
textra=
verbose=false
makeinfo="${MAKEINFO-makeinfo}"
d79 2
a80 1
# Save this so we can construct a new TEXINPUTS path for each file.
d92 12
a103 12
    -D | --debug | --d* ) debug=t; shift ;;
    -h | --help | --h* )   echo "$usage"; exit 0 ;;
    # OK, we should do real option parsing here, but be lazy for now.
    -t | --texinfo | --t*) shift; textra="$textra $1"; shift ;; 
    -v | --vers* )
      echo "$progname (Texinfo 3.9) $version"
      echo "Copyright (C) 1996 Free Software Foundation, Inc.
There is NO warranty.  You may redistribute this software
under the terms of the GNU General Public License.
For more information about these matters, see the files named COPYING."
      exit 0 ;;
    --verb* )            verbose=echo; shift ;;
d114 2
a115 2
      echo "$progname: Unknown or ambiguous option $bq$arg$eq."
      echo "$progname: Try $bq--help$eq for more information."
d125 9
a133 7
# filename arguments).
if test $# -eq 0; then
  exec 1>&2
  echo "$progname: At least one file name is required as an argument."
  echo "$progname: Try $bq--help$eq for more information."
  exit 2
fi
d135 1
a135 1
test "$debug" = t && set -x
d139 46
a184 131
  $verbose "Processing $command_line_filename ..."

  # See if file exists.  If it doesn't we're in trouble since, even
  # though the user may be able to reenter a valid filename at the tex
  # prompt (assuming they're attending the terminal), this script won't
  # be able to find the right index files and so forth.
  if test ! -r "${command_line_filename}" ; then
    echo "$0: Could not read ${command_line_filename}." >&2
    continue
  fi

  # Roughly equivalent to `dirname ...`, but more portable
  directory="`echo ${command_line_filename} | sed 's/\/[^\/]*$//'`"
  filename_texi="`basename ${command_line_filename}`"
  # Strip off the last extension part (probably .texinfo or .texi)
  filename_noext="`echo ${filename_texi} | sed 's/\.[^.]*$//'`"

  # Use same basename since we want to generate aux files with the same
  # basename as the manual.  Use extension .texi for the temp file so
  # that TeX will ignore it.  Thus, we must use a subdirectory.
  #
  # Output the macro-expanded file to here.
  tmp_dir=${TMPDIR-/tmp}/$$
  filename_tmp=$tmp_dir/$filename_noext.texi
  # Output the file with the user's extra commands to here.
  filename_tmp2=$tmp_dir.2/$filename_noext.texi
  mkdir $tmp_dir $tmp_dir.2

  # If directory and file are the same, then it's probably because there's
  # no pathname component.  Set dirname to `.', the current directory.
  if test "z${directory}" = "z${command_line_filename}" ; then
     directory=.
  fi

  # Source file might @@include additional texinfo sources.  Put `.' and
  # directory where source file(s) reside in TEXINPUTS before anything
  # else.  `.' goes first to ensure that any old .aux, .cps, etc. files in
  # ${directory} don't get used in preference to fresher files in `.'.
  TEXINPUTS=".:${directory}:${TEXINPUTS_orig}"

  # Expand macro commands in the original source file using Makeinfo;
  #   the macro syntax bfox implemented is impossible to implement in TeX.
  # Always use `end' footnote style, since the `separate' style
  #   generates different output (arguably this is a bug in -E).
  # Discard main info output, the user asked to run TeX, not makeinfo.
  # Redirect output to /dev/null to throw away `Making info file...' msg.
  $verbose "Macro-expanding $command_line_filename to $filename_tmp ..."
  $makeinfo --footnote-style=end -E $filename_tmp -o /dev/null \
    $command_line_filename >/dev/null

  # But if there were no macros, or makeinfo failed for some reason,
  # just use the original file.  (It shouldn't make any difference, but
  # let's be safe.)
  if test $? -ne 0 || cmp -s $filename_tmp $command_line_filename; then
    $verbose "Reverting to $command_line_filename ..."
    filename_input=$command_line_filename
  else
    filename_input=$filename_tmp
  fi

  # Used most commonly for @@finalout, @@smallbook, etc.
  if test -n "$textra"; then
    $verbose "Inserting extra commands: $textra."
    sed '/^@@setfilename/a\
'"$textra" $filename_input >$filename_tmp2
   filename_input=$filename_tmp2
  fi

  while true; do # will break out of loop below
    # "Unset" variables that might have values from previous iterations and
    # which won't be completely reset later.
    definite_index_files=

    # Find all files having root filename with a two-letter extension,
    # determine whether they're really index files, and save them.  Foo.aux
    # is actually the cross-references file, but we need to keep track of
    # that too.
    possible_index_files="`eval echo ${filename_noext}.?? ${filename_noext}.aux`"
    for this_file in ${possible_index_files} ; do
       # If file is empty, forget it.
       test -s "${this_file}" || continue

       # Examine first character of file.  If it's not suitable to be an
       # index or xref file, don't process it.
       first_character="`sed -n '1s/^\(.\).*$/\1/p;q' ${this_file}`"
       if test "x${first_character}" = "x\\" \
          || test "x${first_character}" = "x'"; then
         definite_index_files="${definite_index_files} ${this_file}"
       fi
    done
    orig_index_files="${definite_index_files}"
    orig_index_files_sans_aux="`echo ${definite_index_files} \
                                 | sed 's/'${filename_noext}'\.aux//;
                                        s/^[ ]*//;s/[ ]*$//;'`"

    # Now save copies of original index files so we have some means of
    # comparison later.
    $verbose "Backing up current index files: $orig_index_files ..."  
    for index_file_to_save in ${orig_index_files} ; do
      cp "${index_file_to_save}" "${index_file_to_save}${backup_extension}"
    done

    # Run texindex on current index files.  If they already exist, and
    # after running TeX a first time the index files don't change, then
    # there's no reason to run TeX again.  But we won't know that if the
    # index files are out of date or nonexistent.
    if test -n "${orig_index_files_sans_aux}" ; then
       $verbose "Running $texindex $orig_index_files_sans_aux ..."
       ${texindex} ${orig_index_files_sans_aux}
    fi

    # Finally, run TeX.
    $verbose "Running $tex $filename_input ..."
    ${tex} "$filename_input"

    # Check if index files changed.
    # 
    definite_index_files=
    # Get list of new index files.
    possible_index_files="`eval echo ${filename_noext}.?? ${filename_noext}.aux`"
    for this_file in ${possible_index_files} ; do
       # If file is empty, forget it.
       test -s "${this_file}" || continue

       # Examine first character of file.  If it's not a backslash or
       # single quote, then it's definitely not an index or xref file.
       # (Will have to check for @@ when we switch to Texinfo syntax in
       # all these files...)
       first_character="`sed -n '1s/^\(.\).*$/\1/p;q' ${this_file}`"
       if test "x${first_character}" = "x\\" \
          || test "x${first_character}" = "x'"; then
d186 37
a222 31
       fi
    done
    new_index_files="${definite_index_files}"
    new_index_files_sans_aux="`echo ${definite_index_files} \
                               | sed 's/'${filename_noext}'\.aux//;
                                      s/^[ ]*//;s/[ ]*$//;'`"

    # If old and new list don't at least have the same file list, then one
    # file or another has definitely changed.
    $verbose "Original index files =$orig_index_files"
    $verbose "New index files =$new_index_files"
    if test "z${orig_index_files}" != "z${new_index_files}" ; then
      index_files_changed_p=t
    else
      # File list is the same.  We must compare each file until we find a
      # difference.
      index_files_changed_p=
      for this_file in ${new_index_files} ; do
        $verbose "Comparing index file $this_file ..."
        # cmp -s will return nonzero exit status if files differ.
        cmp -s "${this_file}" "${this_file}${backup_extension}"
        if test $? -ne 0 ; then
          # We only need to keep comparing until we find *one* that
          # differs, because we'll have to run texindex & tex no
          # matter what.
          index_files_changed_p=t
          $verbose "Index file $this_file differed:"
          test $verbose = echo \
          && diff -c "${this_file}${backup_extension}" "${this_file}"
          break
        fi
d224 49
a272 21
    fi

    # If index files have changed since TeX has been run, or if the aux
    # file wasn't present originally, run texindex and TeX again.
    if test "${index_files_changed_p}" ; then :; else
      # Nothing changed.  We're done with TeX.
      break
    fi
  done

  # Generate list of files to delete, then call rm once with the entire
  # list.  This is significantly faster than multiple executions of rm.
  file_list=
  for file in ${orig_index_files} ; do
    file_list="${file_list} ${file}${backup_extension}"
  done
  if test -n "${file_list}" ; then
    $verbose "Removing $file_list $tmp_dir $tmp_dir.2 ..."
    rm -f ${file_list}
    rm -rf $tmp_dir $tmp_dir.2
  fi
a274 3
$verbose "$0 done."
true # exit successfully.

a275 31
# $Log: texi2dvi,v $
# Revision 1.10  1996/10/04 18:21:55  karl
# Include only the current year in the copyright message.
#
# Revision 1.9  1996/10/04 11:49:48  karl
# Exit successfully.  From arnold.
#
# Revision 1.8  1996/10/03 23:14:26  karl
# Only show diff if verbose.
# Update version number.
#
# Revision 1.7  1996/09/29 22:56:08  karl
# Use $progname instead of $0 for --version.
#
# Revision 1.6  1996/09/28 21:01:23  karl
# Recompute original index files each time through loop.
# Make indentation uniform.
# Use same basename for the temp input files.
# Standardize --version output.
#
# Revision 1.5  1996/09/26 14:46:34  karl
# (texi2dvi): Run TeX until the aux/index files stabilize, instead of just
# twice.  From: David Shaw <daves@@gsms01.alcatel.com.au>.
#
# Revision 1.4  1996/08/27 18:59:26  karl
# Include bug reporting address.
#
# Revision 1.3  1996/07/26 18:20:56  karl
# Do macro expansion with makeinfo before running TeX.
# Various expansion safety measures added for test; avoid use of -o.
#
@


1.1.1.3
log
@Import of FSF texinfo 3.11
@
text
@d6 1
a6 1
# $Id: texi2dvi,v 0.6 1997/07/14 19:23:18 karl Exp $
d50 1
a50 1
rcs_revision='$Revision: 0.6 $'
d332 33
@


1.1.1.4
log
@Import of FSF texinfo 3.12. This version creates empty info-dirs correctly.
@
text
@d3 5
a7 4
# $Id: texi2dvi,v 0.8 1998/02/26 21:13:13 karl Exp $
#
# Copyright (C) 1992, 93, 94, 95, 96, 97, 98 Free Software Foundation, Inc.
#
d22 1
a22 1
#
d24 4
a27 4
#
# Author: Noah Friedman <friedman@@gnu.org>
#
# Please send bug reports, etc. to bug-texinfo@@gnu.org.
d30 1
a30 1
#
d37 2
a38 1
# Among the more interesting lossages I noticed among Bourne shells:
d43 1
a43 1
#
d50 1
a50 1
rcs_revision='$Revision: 0.8 $'
a60 2
-b, --batch          No interaction (\nonstopmode in TeX).
-c, --clean          Remove all auxiliary files.
d70 2
a71 1
Email bug reports to bug-texinfo@@gnu.org."
a77 2
batch=
clean=
d95 2
a96 3
while :; do
  test $# -eq 0 && break
  
a97 2
    -b | --batch | --b* ) batch=t; shift ;;
    -c | --clean | --c* ) clean=t; shift ;;
d103 2
a104 2
      echo "$progname (GNU Texinfo 3.12) $version"
      echo "Copyright (C) 1998 Free Software Foundation, Inc.
d112 2
a113 1
      break ;;
d122 5
a126 2
      exit 1 ;;
    * ) break ;;
d142 1
a142 1
for command_line_filename in ${1+"$@@"}; do
d149 1
a149 1
  if test ! -r "${command_line_filename}"; then
d164 2
a165 4
  # Output the macro-expanded file to here.  The vastly abbreviated
  # temporary directory name is so we don't have collisions on 8.3 or
  # 14-character filesystems.
  tmp_dir=${TMPDIR-/tmp}/txi2d.$$
d168 2
a169 5
  tmp_dir2=${tmp_dir}.2
  filename_tmp2=$tmp_dir2/$filename_noext.texi
  mkdir $tmp_dir $tmp_dir2
  # Always remove the temporary directories.
  trap "rm -rf $tmp_dir $tmp_dir2" 1 2 15
d173 2
a174 2
  if test "z${directory}" = "z${command_line_filename}"; then
    directory=.
d198 3
a200 1
    cp -p $command_line_filename $filename_tmp
a201 2
  filename_input=$filename_tmp
  dirname_input=$tmp_dir
a208 8
   dirname_input=$tmp_dir2
  fi

  # If clean mode was specified, then move to the temporary directory.
  if test "$clean" = t; then
    $verbose "cd $dirname_input"
    cd $dirname_input || exit 1
    filename_input=`basename $filename_input`
d221 11
a231 11
    for this_file in ${possible_index_files}; do
      # If file is empty, forget it.
      test -s "${this_file}" || continue

      # Examine first character of file.  If it's not suitable to be an
      # index or xref file, don't process it.
      first_character="`sed -n '1s/^\(.\).*$/\1/p;q' ${this_file}`"
      if test "x${first_character}" = "x\\" \
         || test "x${first_character}" = "x'"; then
        definite_index_files="${definite_index_files} ${this_file}"
      fi
d241 1
a241 1
    for index_file_to_save in ${orig_index_files}; do
d249 3
a251 3
    if test -n "${orig_index_files_sans_aux}"; then
      $verbose "Running $texindex $orig_index_files_sans_aux ..."
      ${texindex} ${orig_index_files_sans_aux}
a254 5
    if test "$batch" = t; then
      tex_mode='\nonstopmode'
    else
      tex_mode=
    fi
d256 1
a256 2
    cmd="$tex $tex_mode \\input $filename_input"
    $cmd
d263 1
a263 1
    for this_file in ${possible_index_files}; do
d286 1
a286 1
    if test "z${orig_index_files}" != "z${new_index_files}"; then
d292 1
a292 1
      for this_file in ${new_index_files}; do
d296 1
a296 1
        if test $? -ne 0; then
d311 1
a311 1
    if test "${index_files_changed_p}"; then :; else
a316 12
  # If we were in clean mode, compilation was in a tmp directory.
  # Copy the DVI file into the directory where the compilation
  # has been done.  (The temp dir is about to get removed anyway.)
  # We also return to the original directory so that
  # - the next file is processed in correct conditions
  # - the temporary file can be removed
  if test -n "$clean"; then
    $verbose "Copying DVI file from `pwd` to $orig_pwd"
    cp -p $filename_noext.dvi $orig_pwd
    cd $orig_pwd || exit 1
  fi

d320 1
a320 1
  for file in ${orig_index_files}; do
d323 2
a324 2
  if test -n "${file_list}"; then
    $verbose "Removing $file_list $tmp_dir $tmp_dir2 ..."
d326 1
a326 1
    rm -rf $tmp_dir $tmp_dir2
@


1.1.1.5
log
@TexInfo 4.0. New manpages, can create html.
A bit more grumpy about bad texinfo, though.
@
text
@d2 2
a3 2
# texi2dvi --- produce DVI (or PDF) files from Texinfo (or LaTeX) sources.
# $Id: texi2dvi,v 0.43 1999/09/28 19:36:53 karl Exp $
d5 1
a5 1
# Copyright (C) 1992, 93, 94, 95, 96, 97, 98, 99 Free Software Foundation, Inc.
d22 3
a24 1
# Original author: Noah Friedman <friedman@@gnu.org>.
d29 17
d48 2
a49 9
rcs_revision='$Revision: 0.43 $'
rcs_version=`set - $rcs_revision; echo $2`
program=`echo $0 | sed -e 's!.*/!!'`
version="texi2dvi (GNU Texinfo 4.0) $rcs_version

Copyright (C) 1999 Free Software Foundation, Inc.
There is NO warranty.  You may redistribute this software
under the terms of the GNU General Public License.
For more information about these matters, see the files named COPYING."
d51 3
a53 1
usage="Usage: $program [OPTION]... FILE...
d55 2
a56 4
Run each Texinfo or LaTeX FILE through TeX in turn until all
cross-references are resolved, building all indices.  The directory
containing each FILE is searched for included files.  The suffix of FILE
is used to determine its language (LaTeX or Texinfo).
d58 8
a65 2
Makeinfo is used to perform Texinfo macro expansion before running TeX
when needed.
d67 2
a68 20
Options:
  -@@                   Use @@input instead of \input; for preloaded Texinfo.
  -b, --batch          No interaction.
  -c, --clean          Remove all auxiliary files.
  -D, --debug          Turn on shell debugging (set -x).
  -e, --expand         Force macro expansion using makeinfo.
  -I DIR               Search DIR for Texinfo files.
  -h, --help           Display this help and exit successfully.
  -l, --language=LANG  Specify the LANG of FILE: LaTeX or Texinfo.
  -p, --pdf            Use pdftex or pdflatex for processing.
  -q, --quiet          No output unless errors (implies --batch).
  -s, --silent         Same as --quiet.
  -t, --texinfo=CMD    Insert CMD after @@setfilename in copy of input file.
                       Multiple values accumulate.
  -v, --version        Display version information and exit successfully.
  -V, --verbose        Report on what is done.

The values of the BIBTEX, LATEX (or PDFLATEX), MAKEINDEX, MAKEINFO,
TEX (or PDFTEX), and TEXINDEX environment variables are used to run
those commands, if they are set.
d70 1
a70 2
Email bug reports to <bug-texinfo@@gnu.org>,
general questions and discussion to <help-texinfo@@gnu.org>."
d72 1
a72 1
# Initialize variables for option overriding and otherwise.
d75 3
a77 2
escape='\'
batch=false     # eval for batch mode
d80 1
a80 4
expand=         # t for expansion via makeinfo
oformat=dvi
set_language=
miincludes=     # makeinfo include path
d82 4
a85 15
tmpdir=${TMPDIR:-/tmp}/t2d$$  # avoid collisions on 8.3 filesystems.
txincludes=     # TEXINPUTS extensions
txiprereq=19990129 # minimum texinfo.tex version to have macro expansion
quiet=          # by default let the tools' message be displayed
verbose=false   # echo for verbose mode

orig_pwd=`pwd`

# Systems which define $COMSPEC or $ComSpec use semicolons to separate
# directories in TEXINPUTS.
if test -n "$COMSPEC$ComSpec"; then
  path_sep=";"
else
  path_sep=":"
fi
d89 1
a89 13
# Unfortunately makeindex does not read TEXINPUTS.
INDEXSTYLE_orig="$INDEXSTYLE"
export TEXINPUTS INDEXSTYLE

# Push a token among the arguments that will be used to notice when we
# ended options/arguments parsing.
# Use "set dummy ...; shift" rather than 'set - ..." because on
# Solaris set - turns off set -x (but keeps set -e).
# Use ${1+"$@@"} rather than "$@@" because Digital Unix and Ultrix 4.3
# still expand "$@@" to a single argument (the empty string) rather
# than nothing at all.
arg_sep="$$--$$"
set dummy ${1+"$@@"} "$arg_sep"; shift
a90 1
# 
d92 7
a98 3
while test x"$1" != x"$arg_sep"; do

  # Handle --option=value by splitting apart and putting back on argv.
d100 15
a114 3
    --*=*)
      opt=`echo "$1" | sed -e 's/=.*//'`
      val=`echo "$1" | sed -e 's/[^=]*=//'`
d116 11
a126 37
      set dummy "$opt" "$val" ${1+"$@@"}; shift
      ;;
  esac

  # This recognizes --quark as --quiet.  So what.
  case "$1" in
    -@@ ) escape=@@;;
    # Silently and without documentation accept -b and --b[atch] as synonyms.
    -b | --b*) batch=eval;;
    -q | -s | --q* | --s*) quiet=t; batch=eval;;
    -c | --c*) clean=t;;
    -D | --d*) debug=t;;
    -e | --e*) expand=t;;
    -h | --h*) echo "$usage"; exit 0;;
    -I | --I*)
      shift
      miincludes="$miincludes -I $1"
      txincludes="$txincludes$path_sep$1"
      ;;
    -l | --l*) shift; set_language=$1;;
    -p | --p*) oformat=pdf;;
    -t | --t*) shift; textra="$textra\\
$1";;
    -v | --vers*) echo "$version"; exit 0;;
    -V | --verb*) verbose=echo;;
    --) # What remains are not options.
      shift
      while test x"$1" != x"$arg_sep"; do
        set dummy ${1+"$@@"} "$1"; shift
        shift
      done
      break;;
    -*)
      echo "$0: Unknown or ambiguous option \`$1'." >&2
      echo "$0: Try \`--help' for more information." >&2
      exit 1;;
    *) set dummy ${1+"$@@"} "$1"; shift;;
a127 1
   shift
a128 2
# Pop the token
shift
d130 6
a135 4
# Interpret remaining command line args as filenames.
if test $# = 0; then
  echo "$0: Missing file arguments." >&2
  echo "$0: Try \`--help' for more information." >&2
a138 89
# Prepare the temporary directory.  Remove it at exit, unless debugging.
if test -z "$debug"; then
  trap "cd / && rm -rf $tmpdir" 0 1 2 15
fi

# Create the temporary directory with strict rights
(umask 077 && mkdir $tmpdir) || exit 1

# Prepare the tools we might need.  This may be extra work in some
# cases, but improves the readibility of the script.
utildir=$tmpdir/utils
mkdir $utildir || exit 1

# A sed script that preprocesses Texinfo sources in order to keep the
# iftex sections only.  We want to remove non TeX sections, and
# comment (with `@@c texi2dvi') TeX sections so that makeinfo does not
# try to parse them.  Nevertheless, while commenting TeX sections,
# don't comment @@macro/@@end macro so that makeinfo does propagate
# them.  Unfortunately makeinfo --iftex --no-ifhtml --no-ifinfo
# doesn't work well enough (yet) to use that, so work around with sed.
comment_iftex_sed=$utildir/comment.sed
cat <<EOF >$comment_iftex_sed
/^@@tex/,/^@@end tex/{
  s/^/@@c texi2dvi/
}
/^@@iftex/,/^@@end iftex/{
  s/^/@@c texi2dvi/
  /^@@c texi2dvi@@macro/,/^@@c texi2dvi@@end macro/{
    s/^@@c texi2dvi//
  }
}
/^@@html/,/^@@end html/d
/^@@ifhtml/,/^@@end ifhtml/d
/^@@ifnottex/,/^@@end ifnottex/d
/^@@ifinfo/,/^@@end ifinfo/{
  /^@@node/p
  /^@@menu/,/^@@end menu/p
  d
}
EOF
# Uncommenting is simple: Remove any leading `@@c texi2dvi'.
uncomment_iftex_sed=$utildir/uncomment.sed
cat <<EOF >$uncomment_iftex_sed
s/^@@c texi2dvi//
EOF

# A shell script that computes the list of xref files.
# Takes the filename (without extension) of which we look for xref
# files as argument.  The index files must be reported last.
get_xref_files=$utildir/get_xref.sh
cat <<\EOF >$get_xref_files
#! /bin/sh

# Get list of xref files (indexes, tables and lists).
# Find all files having root filename with a two-letter extension,
# saves the ones that are really Texinfo-related files.  .?o? catches
# LaTeX tables and lists.
for this_file in "$1".?o? "$1".aux "$1".?? "$1".idx; do
  # If file is empty, skip it.
  test -s "$this_file" || continue
  # If the file is not suitable to be an index or xref file, don't
  # process it.  The file can't be if its first character is not a
  # backslash or single quote.
  first_character=`sed -n '1s/^\(.\).*$/\1/p;q' $this_file`
  if test "x$first_character" = "x\\" \
     || test "x$first_character" = "x'"; then
    xref_files="$xref_files ./$this_file"
  fi
done
echo "$xref_files"
EOF
chmod 500 $get_xref_files

# File descriptor usage:
# 0 standard input
# 1 standard output (--verbose messages)
# 2 standard error
# 3 some systems may open it to /dev/tty
# 4 used on the Kubota Titan
# 5 tools output (turned off by --quiet)

# Tools' output.  If quiet, discard, else redirect to the message flow.
if test "$quiet" = t; then
  exec 5>/dev/null
else
  exec 5>&1
fi

# Enable tracing
d141 1
a141 3
# 
# TeXify files.

d145 1
a145 6
  # If the COMMAND_LINE_FILENAME is not absolute (e.g., --debug.tex),
  # prepend `./' in order to avoid that the tools take it as an option.
  echo "$command_line_filename" | egrep '^(/|[A-z]:/)' >/dev/null \
  || command_line_filename="./$command_line_filename"

  # See if the file exists.  If it doesn't we're in trouble since, even
d148 3
a150 3
  # be able to find the right xref files and so forth.
  if test ! -r "$command_line_filename"; then
    echo "$0: Could not read $command_line_filename, skipping." >&2
d154 27
a180 28
  # Get the name of the current directory.  We want the full path
  # because in clean mode we are in tmp, in which case a relative
  # path has no meaning.
  filename_dir=`echo $command_line_filename | sed 's!/[^/]*$!!;s!^$!.!'`
  filename_dir=`cd "$filename_dir" >/dev/null && pwd`

  # Strip directory part but leave extension.
  filename_ext=`basename "$command_line_filename"`
  # Strip extension.
  filename_noext=`echo "$filename_ext" | sed 's/\.[^.]*$//'`
  ext=`echo "$filename_ext" | sed 's/^.*\.//'`

  # _src.  Use same basename since we want to generate aux files with
  # the same basename as the manual.  If --expand, then output the
  # macro-expanded file to here, else copy the original file.
  tmpdir_src=$tmpdir/src
  filename_src=$tmpdir_src/$filename_noext.$ext

  # _xtr.  The file with the user's extra commands.
  tmpdir_xtr=$tmpdir/xtr
  filename_xtr=$tmpdir_xtr/$filename_noext.$ext

  # _bak.  Copies of the previous xref files (another round is run if
  # they differ from the new one).
  tmpdir_bak=$tmpdir/bak

  # Make all those directories and give up if we can't succeed.
  mkdir $tmpdir_src $tmpdir_xtr $tmpdir_bak || exit 1
d182 1
a182 1
  # Source file might include additional sources.  Put `.' and
d184 3
a186 34
  # else.  `.' goes first to ensure that any old .aux, .cps,
  # etc. files in ${directory} don't get used in preference to fresher
  # files in `.'.  Include orig_pwd in case we are in clean mode, where
  # we've cd'd to a temp directory.
  common=".$path_sep$orig_pwd$path_sep$filename_dir$path_sep$txincludes$path_sep"
   TEXINPUTS="$common$TEXINPUTS_orig"
  INDEXSTYLE="$common$INDEXSTYLE_orig"

  # If the user explicitly specified the language, use that.
  # Otherwise, if the first line is \input texinfo, assume it's texinfo.
  # Otherwise, guess from the file extension.
  if test -n "$set_language"; then
    language=$set_language
  elif sed 1q "$command_line_filename" | fgrep 'input texinfo' >/dev/null; then
    language=texinfo
  else
    language=
  fi

  # Get the type of the file (latex or texinfo) from the given language
  # we just guessed, or from the file extension if not set yet.
  case ${language:-$filename_ext} in
    [lL]a[tT]e[xX] | *.ltx | *.tex)
      # Assume a LaTeX file.  LaTeX needs bibtex and uses latex for
      # compilation.  No makeinfo.
      bibtex=${BIBTEX:-bibtex}
      makeinfo= # no point in running makeinfo on latex source.
      texindex=${MAKEINDEX:-makeindex}
      if test $oformat = dvi; then
        tex=${LATEX:-latex}
      else
        tex=${PDFLATEX:-pdflatex}
      fi
      ;;
d188 2
a189 40
    *)
      # Assume a Texinfo file.  Texinfo files need makeinfo, texindex and tex.
      bibtex=
      texindex=${TEXINDEX:-texindex}
      if test $oformat = dvi; then
        tex=${TEX:-tex}
      else
        tex=${PDFTEX:-pdftex}
      fi
      # Unless required by the user, makeinfo expansion is wanted only
      # if texinfo.tex is too old.
      if test "$expand" = t; then
        makeinfo=${MAKEINFO:-makeinfo}
      else
        # Check if texinfo.tex performs macro expansion by looking for
        # its version.  The version is a date of the form YEAR-MO-DA.
        # We don't need to use [0-9] to match the digits since anyway
        # the comparison with $txiprereq, a number, will fail with non
        # digits.
        txiversion_tex=txiversion.tex
        echo '\input texinfo.tex @@bye' >$tmpdir/$txiversion_tex
        # Run in the tmpdir to avoid leaving files.
        eval `cd $tmpdir >/dev/null \
                    && $tex $txiversion_tex 2>/dev/null \
| sed -n 's/^.*\[\(.*\)version \(....\)-\(..\)-\(..\).*$/txiformat=\1 txiversion="\2\3\4"/p'`
        $verbose "texinfo.tex preloaded as \`$txiformat', version is \`$txiversion' ..."
        if test "$txiprereq" -le "$txiversion" >/dev/null 2>&1; then
          makeinfo=
        else
          makeinfo=${MAKEINFO:-makeinfo}
        fi
        # As long as we had to run TeX, offer the user this convenience
        if test "$txiformat" = Texinfo; then
          escape=@@
        fi
      fi
      ;;
  esac

  # Expand macro commands in the original source file using Makeinfo.
d193 9
a201 12
  if test -n "$makeinfo"; then
    $verbose "Macro-expanding $command_line_filename to $filename_src ..."
    sed -f $comment_iftex_sed "$command_line_filename" \
      | $makeinfo --footnote-style=end -I "$filename_dir" $miincludes \
        -o /dev/null --macro-expand=- \
      | sed -f $uncomment_iftex_sed >"$filename_src"
    filename_input=$filename_src
  fi

  # If makeinfo failed (or was not even run), use the original file as input.
  if test $? -ne 0 \
     || test ! -r "$filename_src"; then
d203 1
a203 1
    filename_input=$filename_dir/$filename_ext
d205 2
d210 1
a210 1
    $verbose "Inserting extra commands: $textra"
d212 3
a214 2
'"$textra" "$filename_input" >$filename_xtr
    filename_input=$filename_xtr
d219 3
a221 2
    $verbose "cd $tmpdir_src"
    cd "$tmpdir_src" || exit 1
d224 20
a243 58
  while :; do # will break out of loop below
    orig_xref_files=`$get_xref_files "$filename_noext"`

    # Save copies of originals for later comparison.
    if test -n "$orig_xref_files"; then
      $verbose "Backing up xref files: `echo $orig_xref_files | sed 's|\./||g'`"
      cp $orig_xref_files $tmpdir_bak
    fi

    # Run bibtex on current file.
    # - If its input (AUX) exists.
    # - If AUX contains both `\bibdata' and `\bibstyle'.
    # - If some citations are missing (LOG contains `Citation').
    #   or the LOG complains of a missing .bbl
    #
    # We run bibtex first, because I can see reasons for the indexes
    # to change after bibtex is run, but I see no reason for the
    # converse.
    #
    # Don't try to be too smart.  Running bibtex only if the bbl file
    # exists and is older than the LaTeX file is wrong, since the
    # document might include files that have changed.  Because there
    # can be several AUX (if there are \include's), but a single LOG,
    # looking for missing citations in LOG is easier, though we take
    # the risk to match false messages.
    if test -n "$bibtex" \
       && test -r "$filename_noext.aux" \
       && test -r "$filename_noext.log" \
       && (grep '^\\bibdata[{]'  "$filename_noext.aux" \
           && grep '^\\bibstyle[{]' "$filename_noext.aux" \
           && (grep 'Warning:.*Citation.*undefined' "$filename_noext.log" \
               || grep 'No file .*\.bbl\.' "$filename_noext.log")) \
          >/dev/null 2>&1; \
    then
      $verbose "Running $bibtex $filename_noext ..."
      if $bibtex "$filename_noext" >&5; then :; else
        echo "$0: $bibtex exited with bad status, quitting." >&2
        exit 1
      fi
    fi

    # What we'll run texindex on -- exclude non-index files.
    # Since we know index files are last, it is correct to remove everything
    # before .aux and .?o?.
    index_files=`echo "$orig_xref_files" \
                 | sed "s!.*\.aux!!g;
                        s!./$filename_noext\..o.!!g;
                        s/^[ ]*//;s/[ ]*$//"`
    # Run texindex (or makeindex) on current index files.  If they
    # already exist, and after running TeX a first time the index
    # files don't change, then there's no reason to run TeX again.
    # But we won't know that if the index files are out of date or
    # nonexistent.
    if test -n "$texindex" && test -n "$index_files"; then
      $verbose "Running $texindex $index_files ..."
      if $texindex $index_files 2>&5 1>&2; then :; else
         echo "$0: $texindex exited with bad status, quitting." >&2
         exit 1
d245 20
d268 4
a271 11
    # Prevent $ESCAPE from being interpreted by the shell if it happens
    # to be `/'.
    $batch tex_args="\\${escape}nonstopmode\ \\${escape}input"
    $verbose "Running $cmd ..."
    cmd="$tex $tex_args $filename_input"
    if $cmd >&5; then :; else
      echo "$0: $tex exited with bad status, quitting." >&2
      echo "$0: see $filename_noext.log for errors." >&2
      test "$clean" = t \
        && cp "$filename_noext.log" "$orig_pwd"
      exit 1
d273 50
a322 36


    # Decide if looping again is needed.
    finished=t

    # LaTeX (and the package changebar) report in the LOG file if it
    # should be rerun.  This is needed for files included from
    # subdirs, since texi2dvi does not try to compare xref files in
    # subdirs.  Performing xref files test is still good since LaTeX
    # does not report changes in xref files.
    if fgrep "Rerun to get" "$filename_noext.log" >/dev/null 2>&1; then
      finished=
    fi

    # Check if xref files changed.
    new_xref_files=`$get_xref_files "$filename_noext"`
    $verbose "Original xref files = `echo $orig_xref_files | sed 's|\./||g'`"
    $verbose "New xref files      = `echo $new_xref_files | sed 's|\./||g'`"

    # If old and new lists don't at least have the same file list,
    # then one file or another has definitely changed.
    test "x$orig_xref_files" != "x$new_xref_files" && finished=

    # File list is the same.  We must compare each file until we find
    # a difference.
    if test -n "$finished"; then
      for this_file in $new_xref_files; do
        $verbose "Comparing xref file `echo $this_file | sed 's|\./||g'` ..."
        # cmp -s returns nonzero exit status if files differ.
        if cmp -s "$this_file" "$tmpdir_bak/$this_file"; then :; else
          # We only need to keep comparing until we find one that
          # differs, because we'll have to run texindex & tex again no
          # matter how many more there might be.
          finished=
          $verbose "xref file `echo $this_file | sed 's|\./||g'` differed ..."
          test "$debug" = t && diff -c "$tmpdir_bak/$this_file" "$this_file"
d328 6
a333 2
    # If finished, exit the loop, else rerun the loop.
    test -n "$finished" && break
d337 1
a337 1
  # Copy the DVI (or PDF) file into the directory where the compilation
d343 2
a344 3
    $verbose "Copying $oformat file from `pwd` to $orig_pwd"
    cp -p "./$filename_noext.$oformat" "$orig_pwd"
    cd / # in case $orig_pwd is on a different drive (for DOS)
d348 10
a357 5
  # Remove temporary files.
  if test "x$debug" = "x"; then
    $verbose "Removing $tmpdir_src $tmpdir_xtr $tmpdir_bak ..."
    cd /
    rm -rf $tmpdir_src $tmpdir_xtr $tmpdir_bak
d362 1
a362 1
exit 0 # exit successfully, not however we ended the loop.
@


1.1.1.6
log
@TeXinfo 4.2, much more robust html (and other formats) output, and a few
features that new FSF programs will need (e.g., gcc snapshots).

looked at by fgs@@, thanks.
@
text
@d3 1
a3 1
# $Id: texi2dvi,v 0.51 2002/04/01 14:20:59 karl Exp $
d5 1
a5 2
# Copyright (C) 1992, 93, 94, 95, 96, 97, 98, 99, 2001, 02
# Free Software Foundation, Inc.
d29 1
a29 1
rcs_revision='$Revision: 0.51 $'
d32 1
a32 1
version="texi2dvi (GNU Texinfo 4.2) $rcs_version
d34 1
a34 1
Copyright (C) 2002 Free Software Foundation, Inc.
d49 16
a64 20
Operation modes:
  -b, --batch         no interaction
  -c, --clean         remove all auxiliary files
  -D, --debug         turn on shell debugging (set -x)
  -h, --help          display this help and exit successfully
  -o, --output=OFILE  leave output in OFILE (implies --clean);
                      Only one input FILE may be specified in this case
  -q, --quiet         no output unless errors (implies --batch)
  -s, --silent        same as --quiet
  -v, --version       display version information and exit successfully
  -V, --verbose       report on what is done

TeX tuning:
  -@@                   use @@input instead of \input; for preloaded Texinfo
  -e, --expand         force macro expansion using makeinfo
  -I DIR               search DIR for Texinfo files
  -l, --language=LANG  specify the LANG of FILE (LaTeX or Texinfo)
  -p, --pdf            use pdftex or pdflatex for processing
  -t, --texinfo=CMD    insert CMD after @@setfilename in copy of input file
                       multiple values accumulate
d71 1
a71 2
general questions and discussion to <help-texinfo@@gnu.org>.
Texinfo home page: http://www.gnu.org/software/texinfo/"
d76 1
a79 1
escape='\'
a80 1
miincludes=     # makeinfo include path
a81 2
oname=		# --output
quiet=          # by default let the tools' message be displayed
d83 1
d88 1
a146 7
    -o | --o*)
      shift
      clean=t
      case "$1" in
        /* | ?:/*) oname=$1;;
                *) oname="$orig_pwd/$1";;
      esac;;
d171 1
a171 2
case $# in
 0)
d175 1
a175 9
  ;;
 1) ;;
 *)
  if test -n "$oname"; then
    echo "$0: Can't use option \`--output' with more than one argument." >&2
    exit 2
  fi
  ;;
esac
d208 3
a210 9
/^@@html/,/^@@end html/{
  s/^/@@c (texi2dvi)/
}
/^@@ifhtml/,/^@@end ifhtml/{
  s/^/@@c (texi2dvi)/
}
/^@@ifnottex/,/^@@end ifnottex/{
  s/^/@@c (texi2dvi)/
}
d214 1
a214 2
  t
  s/^/@@c (texi2dvi)/
a215 2
s/^@@ifnotinfo/@@c texi2dvi@@ifnotinfo/
s/^@@end ifnotinfo/@@c texi2dvi@@end ifnotinfo/
d376 3
a378 3
        eval `cd $tmpdir >/dev/null &&
              $tex $txiversion_tex 2>/dev/null |
              sed -n 's/^.*\[\(.*\)version \(....\)-\(..\)-\(..\).*$/txiformat=\1 txiversion="\2\3\4"/p'`
d492 1
a493 1
    $verbose "Running $cmd ..."
d553 2
a554 7
    if test -n "$oname"; then
       dest=$oname
    else
       dest=$orig_pwd
    fi
    $verbose "Copying $oformat file from `pwd` to $dest"
    cp -p "./$filename_noext.$oformat" "$dest"
@


1.1.1.7
log
@import texinfo 4.8 into the tree.
(okay theo, kettenis)
@
text
@d3 1
a3 1
# $Id: texi2dvi,v 1.34 2004/12/01 18:35:36 karl Exp $
d5 2
a6 2
# Copyright (C) 1992, 1993, 1994, 1995, 1996, 1997, 1998, 1999, 2001,
# 2002, 2003, 2004 Free Software Foundation, Inc.
d23 1
a23 1
# Original author: Noah Friedman.
d30 1
a30 1
rcs_revision='$Revision: 1.34 $'
d33 1
a33 1
version="texi2dvi (GNU Texinfo 4.8) $rcs_version
d35 1
a35 1
Copyright (C) 2004 Free Software Foundation, Inc.
d64 1
a64 1
  -e, -E, --expand     force macro expansion using makeinfo
d68 2
a69 3
  -r, --recode         call recode before TeX to translate input characters
  -t, --command=CMD    insert CMD in copy of input file
   or --texinfo=CMD    multiple values accumulate
d72 2
a73 3
TEX (or PDFTEX), TEXINDEX, and THUMBPDF environment variables are used
to run those commands, if they are set.  Any CMD strings are added
after @@setfilename for Texinfo input, in the first line for LaTeX input.
d89 1
a89 1
oname=          # --output
a90 1
recode=false
d92 1
a92 2
textra=         # Extra TeX commands to insert in the input file.
textra_cmd=     # sed command to insert TEXTRA where appropriate
d94 2
a95 2
txincludes=     # TEXINPUTS extensions, with trailing colon
txiprereq=19990129 # minimum texinfo.tex version with macro expansion
d108 5
a112 33
# Pacify verbose cds.
CDPATH=${ZSH_VERSION+.}$path_sep

# In case someone crazy insists on using grep -E.
: ${EGREP=egrep}

# return true if program $1 is somewhere in PATH, else false.
#
findprog () {
  foundprog=false
  for dir in `echo $PATH | tr "$path_sep" " "`; do
    if test -x "$dir/$1"; then  # does anyone still need test -f?
      foundprog=true
      break
    fi
  done
  $foundprog
}

# Report an error and exit with failure.
fatal () {
  echo "$0: $*" >&2
  exit 1
}

# Save TEXINPUTS so we can construct a new TEXINPUTS path for each file.
# Likewise for bibtex and makeindex.
tex_envvars="BIBINPUTS BSTINPUTS INDEXSTYLE TEXINPUTS"
for var in $tex_envvars; do
  eval ${var}_orig=\$$var
  export $var
done

d142 2
a143 1
    -b | --b*) batch=true;;
d146 1
a146 1
    -e | -E | --e*) expand=t;;
d151 1
a151 1
      txincludes="$txincludes$1$path_sep"
d162 2
a163 4
    -q | -s | --q* | --s*) quiet=t; batch=true;;
    -r | --r*) recode=true;;
    -t | --tex* | --com* ) shift; textra="$textra\\
"`echo "$1" | sed 's/\\\\/\\\\\\\\/g'`;;
a199 33

# We can't do much without tex.
#
if findprog ${TEX:-tex}; then :; else cat <<EOM
You don't have a working TeX binary (${TEX:-tex}) installed anywhere in
your PATH, and texi2dvi cannot proceed without one.  If you want to use
this script, you'll need to install TeX (if you don't have it) or change
your PATH or TEX environment variable (if you do).  See the --help
output for more details.

For information about obtaining TeX, please see http://www.tug.org.  If
you happen to be using Debian, you can get it with this command:
  apt-get install tetex-bin
EOM
  exit 1
fi


# We want to use etex (or pdftex) if they are available, and the user
# didn't explicitly specify.  We don't check for elatex and pdfelatex
# because (as of 2003), the LaTeX team has asked that new distributions
# use etex by default anyway.
#
# End up with the TEX and PDFTEX variables set to what we are going to use.
if test -z "$TEX"; then
  if findprog etex; then TEX=etex; else TEX=tex; fi
fi
#
if test -z "$PDFTEX"; then
  if findprog pdfetex; then PDFTEX=pdfetex; else PDFTEX=pdftex; fi
fi


d209 1
a209 1
# cases, but improves the readability of the script.
d214 6
a219 7
# iftex sections only.  We want to remove non TeX sections, and comment
# (with `@@c texi2dvi') TeX sections so that makeinfo does not try to
# parse them.  Nevertheless, while commenting TeX sections, don't
# comment @@macro/@@end macro so that makeinfo does propagate them.
# Unfortunately makeinfo --iftex --no-ifinfo doesn't work well enough
# (yet), makeinfo can't parse the TeX commands, so work around with sed.
#
d231 6
d255 1
a255 1
# Compute the list of xref files.
d258 23
a280 23
get_xref_files ()
{
  # Get list of xref files (indexes, tables and lists).
  # Find all files having root filename with a two-letter extension,
  # saves the ones that are really Texinfo-related files.  .?o? catches
  # many files: .toc, .log, LaTeX tables and lists, FiXme's .lox, maybe more.
  for this_file in "$1".?o? "$1".aux "$1".?? "$1".idx; do
    # If file is empty, skip it.
    test -s "$this_file" || continue
    # If the file is not suitable to be an index or xref file, don't
    # process it.  It's suitable if the first character is a
    # backslash or right quote or at, as long as the first line isn't
    # \input texinfo.
    first_character=`sed -n '1s/^\(.\).*$/\1/p;q' $this_file`
    if (test "x$first_character" = "x\\" \
        && sed 1q $this_file | grep -v '^\\input *texinfo' >/dev/null) \
       || test "x$first_character" = "x'" \
       || test "x$first_character" = "x@@"; then
      xref_files="$xref_files ./$this_file"
    fi
  done
  echo "$xref_files"
}
d298 1
a298 6
if test "$debug" = t; then
  exec 6>&1
  set -x
else
  exec 6>/dev/null
fi
d308 1
a308 1
  echo "$command_line_filename" | $EGREP '^(/|[A-z]:/)' >&6 \
a341 4
  # _rcd.  The Texinfo file recoded in 7bit.
  tmpdir_rcd=$tmpdir/rcd
  filename_rcd=$tmpdir_rcd/$filename_noext.$ext

d347 1
a347 1
  mkdir $tmpdir_src $tmpdir_xtr $tmpdir_rcd $tmpdir_bak || exit 1
d349 3
a351 4
  # Source file might include additional sources.
  # We want `.:$orig_pwd' before anything else.  (We'll add `.:' later
  # after all other directories have been turned into absolute paths.)
  # `.' goes first to ensure that any old .aux, .cps,
d355 3
a357 52
  common="$orig_pwd$path_sep$filename_dir$path_sep$txincludes"
  for var in $tex_envvars; do
    eval ${var}="\$common\$${var}_orig"
    export $var
  done

  # Convert relative paths to absolute paths, so we can run in another
  # directory (e.g., in --clean mode, or during the macro-support detection.)
  #
  # Empty path components are meaningful to tex.  We rewrite them
  # as `EMPTY' so they don't get lost when we split on $path_sep.
  # Hopefully no one will have an actual directory named EMPTY.
  replace_empty="-e 's/^$path_sep/EMPTY$path_sep/g' \
                 -e 's/$path_sep\$/${path_sep}EMPTY/g' \
                 -e 's/$path_sep$path_sep/${path_sep}EMPTY:/g'"
   TEXINPUTS=`echo $TEXINPUTS  | eval sed $replace_empty`
  INDEXSTYLE=`echo $INDEXSTYLE | eval sed $replace_empty`
  save_IFS=$IFS
  IFS=$path_sep
  set x $TEXINPUTS; shift
  TEXINPUTS=.
  for dir
  do
    case $dir in
      EMPTY)
        TEXINPUTS=$TEXINPUTS$path_sep
        ;;
      [\\/]* | ?:[\\/]*)        # Absolute paths don't need to be expanded.
        TEXINPUTS=$TEXINPUTS$path_sep$dir
        ;;
      *)
        abs=`cd "$dir" && pwd` && TEXINPUTS=$TEXINPUTS$path_sep$abs
        ;;
    esac
  done
  set x $INDEXSTYLE; shift
  INDEXSTYLE=.
  for dir
  do
    case $dir in
      EMPTY)
        INDEXSTYLE=$INDEXSTYLE$path_sep
        ;;
      [\\/]* | ?:[\\/]*)        # Absolute paths don't need to be expansed.
        INDEXSTYLE=$INDEXSTYLE$path_sep$dir
        ;;
      *)
        abs=`cd "$dir" && pwd` && INDEXSTYLE=$INDEXSTYLE$path_sep$abs
        ;;
    esac
  done
  IFS=$save_IFS
d364 1
a364 1
  elif sed 1q "$command_line_filename" | grep 'input texinfo' >&6; then
a375 1
      language=latex
a378 1
      textra_cmd=1i
a383 1
      thumbpdf=${THUMBPDF:-thumbpdf}
a387 1
      language=texinfo
a389 1
      textra_cmd='/^@@setfilename/a'
d391 1
a391 7
        # MetaPost also uses the TEX environment variable.  If the user
        # has set TEX=latex for that reason, don't bomb out.
        if echo $TEX | grep 'latex$' >/dev/null; then
          tex=tex  # don't bother trying to find etex
        else
          tex=$TEX
        fi
d393 1
a393 1
        tex=$PDFTEX
d405 2
d408 3
a410 13
	(
           cd $tmpdir
	   echo '\input texinfo.tex @@bye' >txiversion.tex
	   # Be sure that if tex wants to fail, it is not interactive:
	   # close stdin.
           $tex txiversion.tex </dev/null
	) >$tmpdir/txiversion.out 2>$tmpdir/txiversion.err
	if test $? != 0; then
	  cat $tmpdir/txiversion.out
	  cat $tmpdir/txiversion.err >&2
	  fatal "texinfo.tex appears to be broken, quitting."
        fi
	eval `sed -n 's/^.*\[\(.*\)version \(....\)-\(..\)-\(..\).*$/txiformat=\1 txiversion="\2\3\4"/p' $tmpdir/txiversion.out`
d417 4
a420 2
        # As long as we had to run TeX, offer the user this convenience:
        test "$txiformat" = Texinfo && escape=@@
a421 1
      thumbpdf=${THUMBPDF:-thumbpdf}
a424 14
  # Go to $tmpdir to try --help, since old versions that don't accept
  # --help will generate a texput.log.
  tex_help=`cd $tmpdir >/dev/null && $tex --help </dev/null 2>&1`

  # If possible, make TeX report error locations in GNU format.
  tex_args=
  case $tex_help in
    *file-line-error*) tex_args="$tex_args --file-line-error";;
  esac

  # Tell TeX to be batch if requested.  (\batchmode does not show
  # terminal output at all, so we don't want that.)
  $batch && tex_args="$tex_args ${escape}nonstopmode ${escape}input"

d448 2
a449 2
    sed "$textra_cmd\\
$textra" "$filename_input" >"$filename_xtr"
a452 20
  # If this is a Texinfo file with a specified input encoding, and
  # recode is available, then recode to plain 7 bit Texinfo.
  if test $language = texinfo; then
    pgm='s/\(^\|.* \)@@documentencoding  *\([^ ][^ ]*\)\( .*\|$\)/\2/  
	t found                                                
	d                                                     
	:found                                               
	q'
    encoding=`sed -e "$pgm" "$filename_input"`
    if $recode && test -n "$encoding" && findprog recode; then
      $verbose "Recoding from $encoding to Texinfo."
      if recode "$encoding"..texinfo <"$filename_input" >"$filename_rcd" \
         && test -s "$filename_rcd"; then
        filename_input=$filename_rcd
      else
        $verbose "Recoding failed, using original input."
      fi
    fi
  fi

d460 1
a460 1
    orig_xref_files=`get_xref_files "$filename_noext"`
d491 1
a491 1
          >&6 2>&1; \
d494 4
a497 2
      $bibtex "$filename_noext" >&5 ||
        fatal "$bibtex exited with bad status, quitting."
d502 1
a502 5
    # before .aux and .?o?.  But don't really do <anything>o<anything>
    # -- don't match whitespace as <anything>.
    # Otherwise, if orig_xref_files contains something like
    #   foo.xo foo.whatever
    # the space after the o will get matched.
d505 1
a505 1
                        s!./$filename_noext\.[^ ]o[^ ]!!g;
d514 4
a517 2
      $texindex $index_files 2>&5 1>&2 ||
         fatal "$texindex exited with bad status, quitting."
d521 6
a526 3
    cmd="$tex $tex_args"
    $verbose "Running $cmd $filename_input ..."
    if $cmd "$filename_input" >&5; then :; else
d543 1
a543 1
    if grep "Rerun to get" "$filename_noext.log" >&6 2>&1; then
d548 1
a548 1
    new_xref_files=`get_xref_files "$filename_noext"`
d576 1
a576 22
  done # while :;

  # If we were using thumbpdf and producing PDF, then run thumbpdf
  # and TeX one last time.
  if test $oformat = pdf \
     && test -r "$filename_noext.log" \
     && grep 'thumbpdf\.sty'  "$filename_noext.log" >&6 2>&1; \
  then
    $verbose "Running $thumbpdf $filename_noext ..."
    $thumbpdf "$filename_noext" >&5 ||
      fatal "$thumbpdf exited with bad status, quitting."

    $verbose "Running $cmd $filename_input..."
    if $cmd "$filename_input" >&5; then :; else
      echo "$0: $tex exited with bad status, quitting." >&2
      echo "$0: see $filename_noext.log for errors." >&2
      test "$clean" = t \
	&& cp "$filename_noext.log" "$orig_pwd"
      exit 1
    fi
  fi

d604 1
a604 1
$verbose "$0: done."
@


