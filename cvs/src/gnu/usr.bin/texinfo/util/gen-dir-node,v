head	1.6;
access;
symbols
	OPENBSD_6_0:1.5.0.42
	OPENBSD_6_0_BASE:1.5
	OPENBSD_5_9:1.5.0.38
	OPENBSD_5_9_BASE:1.5
	OPENBSD_5_8:1.5.0.40
	OPENBSD_5_8_BASE:1.5
	OPENBSD_5_7:1.5.0.32
	OPENBSD_5_7_BASE:1.5
	OPENBSD_5_6:1.5.0.36
	OPENBSD_5_6_BASE:1.5
	OPENBSD_5_5:1.5.0.34
	OPENBSD_5_5_BASE:1.5
	OPENBSD_5_4:1.5.0.30
	OPENBSD_5_4_BASE:1.5
	OPENBSD_5_3:1.5.0.28
	OPENBSD_5_3_BASE:1.5
	OPENBSD_5_2:1.5.0.26
	OPENBSD_5_2_BASE:1.5
	OPENBSD_5_1_BASE:1.5
	OPENBSD_5_1:1.5.0.24
	OPENBSD_5_0:1.5.0.22
	OPENBSD_5_0_BASE:1.5
	OPENBSD_4_9:1.5.0.20
	OPENBSD_4_9_BASE:1.5
	OPENBSD_4_8:1.5.0.18
	OPENBSD_4_8_BASE:1.5
	OPENBSD_4_7:1.5.0.14
	OPENBSD_4_7_BASE:1.5
	OPENBSD_4_6:1.5.0.16
	OPENBSD_4_6_BASE:1.5
	OPENBSD_4_5:1.5.0.12
	OPENBSD_4_5_BASE:1.5
	OPENBSD_4_4:1.5.0.10
	OPENBSD_4_4_BASE:1.5
	OPENBSD_4_3:1.5.0.8
	OPENBSD_4_3_BASE:1.5
	OPENBSD_4_2:1.5.0.6
	OPENBSD_4_2_BASE:1.5
	OPENBSD_4_1:1.5.0.4
	OPENBSD_4_1_BASE:1.5
	OPENBSD_4_0:1.5.0.2
	OPENBSD_4_0_BASE:1.5
	TEXINFO_4_8:1.1.1.5
	OPENBSD_3_9:1.4.0.12
	OPENBSD_3_9_BASE:1.4
	OPENBSD_3_8:1.4.0.10
	OPENBSD_3_8_BASE:1.4
	OPENBSD_3_7:1.4.0.8
	OPENBSD_3_7_BASE:1.4
	OPENBSD_3_6:1.4.0.6
	OPENBSD_3_6_BASE:1.4
	OPENBSD_3_5:1.4.0.4
	OPENBSD_3_5_BASE:1.4
	OPENBSD_3_4:1.4.0.2
	OPENBSD_3_4_BASE:1.4
	OPENBSD_3_3:1.3.0.14
	OPENBSD_3_3_BASE:1.3
	OPENBSD_3_2:1.3.0.12
	OPENBSD_3_2_BASE:1.3
	TEXINFO_4_2:1.1.1.4
	OPENBSD_3_1:1.3.0.10
	OPENBSD_3_1_BASE:1.3
	OPENBSD_3_0:1.3.0.8
	OPENBSD_3_0_BASE:1.3
	OPENBSD_2_9:1.3.0.6
	OPENBSD_2_9_BASE:1.3
	OPENBSD_2_8:1.3.0.4
	OPENBSD_2_8_BASE:1.3
	OPENBSD_2_7:1.3.0.2
	OPENBSD_2_7_BASE:1.3
	TEXINFO_4_0:1.1.1.4
	OPENBSD_2_6:1.2.0.4
	OPENBSD_2_6_BASE:1.2
	OPENBSD_2_5:1.2.0.2
	OPENBSD_2_5_BASE:1.2
	TEXINFO_3_12:1.1.1.3
	OPENBSD_2_4:1.1.1.3.0.6
	OPENBSD_2_4_BASE:1.1.1.3
	OPENBSD_2_3:1.1.1.3.0.4
	OPENBSD_2_3_BASE:1.1.1.3
	OPENBSD_2_2:1.1.1.3.0.2
	OPENBSD_2_2_BASE:1.1.1.3
	TEXINFO_3_11:1.1.1.3
	OPENBSD_2_1:1.1.1.2.0.2
	OPENBSD_2_1_BASE:1.1.1.2
	TEXINFO_3_9:1.1.1.2
	OPENBSD_2_0:1.1.1.1.0.2
	OPENBSD_2_0_BASE:1.1.1.1
	TEXINFO_3_7:1.1.1.1
	TEXINFO_3_6:1.1.1.1
	FSF:1.1.1;
locks; strict;
comment	@# @;


1.6
date	2016.09.02.11.50.48;	author tb;	state Exp;
branches;
next	1.5;
commitid	VLPEvm2ELdG53VQc;

1.5
date	2006.07.17.16.12.36;	author espie;	state Exp;
branches;
next	1.4;

1.4
date	2003.09.09.15.40.25;	author david;	state Exp;
branches;
next	1.3;

1.3
date	2000.02.09.02.18.42;	author espie;	state Exp;
branches;
next	1.2;

1.2
date	99.01.11.16.38.15;	author espie;	state Exp;
branches;
next	1.1;

1.1
date	95.12.22.16.47.17;	author niklas;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	95.12.22.16.47.17;	author niklas;	state Exp;
branches;
next	1.1.1.2;

1.1.1.2
date	96.12.15.21.39.31;	author downsj;	state Exp;
branches;
next	1.1.1.3;

1.1.1.3
date	97.08.01.22.01.07;	author kstailey;	state Exp;
branches;
next	1.1.1.4;

1.1.1.4
date	2000.02.09.01.26.23;	author espie;	state Exp;
branches;
next	1.1.1.5;

1.1.1.5
date	2006.07.17.16.03.50;	author espie;	state Exp;
branches;
next	;


desc
@@


1.6
log
@Make build deterministic by removing a line that records the date of
generation. From daniel, ok tb
@
text
@#!/bin/sh
# $Id: gen-dir-node,v 1.5 2006/07/17 16:12:36 espie Exp $
# Generate the top-level Info node, given a directory of Info files
# and (optionally) a skeleton file.  The output will be suitable for a
# top-level dir file.  The skeleton file contains info topic names in the
# order they should appear in the output.  There are three special
# lines that alter the behavior: a line consisting of just "--" causes
# the next line to be echoed verbatim to the output.  A line
# containing just "%%" causes all the remaining filenames (wildcards
# allowed) in the rest of the file to be ignored.  A line containing
# just "!!" exits the script when reached (unless preceded by a line
# containing just "--").  Once the script reaches the end of the
# skeleton file, it goes through the remaining files in the directory
# in order, putting their entries at the end.  The script will use the
# ENTRY information in each info file if it exists.  Otherwise it will
# make a minimal entry.

# sent by Jeffrey Osier <jeffrey@@cygnus.com>, who thinks it came from
# zoo@@winternet.com (david d `zoo' zuhn)

# modified 7 April 1995 by Joe Harrington <jh@@tecate.gsfc.nasa.gov> to
# take special flags

INFODIR=$1
if [ $# = 2 ] ; then
  SKELETON=$2
else
  SKELETON=/dev/null
fi

skip=

if [ $# -gt 2 ] ; then
  echo usage: $0 info-directory [ skeleton-file ] 1>&2
  exit 1
elif [ -z "${INFODIR}" ] ; then
  INFODIR="%%DEFAULT_INFO_DIR%%"
else
  true
fi

if [ ! -d ${INFODIR} ] ; then
  echo "$0: first argument must specify a directory"
  exit 1
fi

### output the dir header
echo "-*- Text -*-"
echo "This file was generated automatically by $0."

cat << moobler
\$Id: gen-dir-node,v 1.5 2006/07/17 16:12:36 espie Exp $
This is the file .../info/dir, which contains the topmost node of the
Info hierarchy.  The first time you invoke Info you start off
looking at that node, which is (dir)Top.

File: dir	Node: Top	This is the top of the INFO tree

  This (the Directory node) gives a menu of major topics. 
  Typing "q" exits, "?" lists all Info commands, "d" returns here,
  "h" gives a primer for first-timers,
  "mEmacs<Return>" visits the Emacs topic, etc.

  In Emacs, you can click mouse button 2 on a menu item or cross reference
  to select it.

* Menu: The list of major topics begins on the next line.

moobler

### go through the list of files in the skeleton.  If an info file
### exists, grab the ENTRY information from it.  If an entry exists
### use it, otherwise create a minimal dir entry.
###
### Then remove that file from the list of existing files.  If any
### additional files remain (ones that don't have a skeleton entry), 
### then generate entries for those in the same way, putting the info for 
### those at the end....

infofiles=`(cd ${INFODIR}; /bin/ls | grep -v '\-[0-9]*$' | egrep -v '^dir$|^dir\.info$|^dir\.orig$')`

# echoing gets clobbered by backquotes; we do it the hard way...
lines=`wc $SKELETON | awk '{print $1}'`
line=1
while [ $lines -ge $line ] ; do
  # Read one line from the file.  This is so that we can echo lines with
  # whitespace and quoted characters in them.
  fileline=`awk NR==$line $SKELETON`

  # flag fancy features
  if [ ! -z "$echoline" ] ; then	# echo line
    echo "$fileline"
    fileline=
    echoline=
  elif [ "${fileline}" = "--" ] ; then	# should we echo the next line?
    echoline=1
  elif [ "${fileline}" = "%%" ] ; then	# eliminate remaining files from dir?
    skip=1
  elif [ "${fileline}" = "!!" ] ; then	# quit now
    exit 0
  fi

  # handle files if they exist
  for file in $fileline"" ; do	# expand wildcards ("" handles blank lines)

    fname=

    if [ -z "$echoline" ] && [ ! -z "$file" ] ; then
      # Find the file to operate upon.  Check both possible names.
      infoname=`echo $file | sed 's/\.info$//'`
      noext=
      ext=
      if [ -f ${INFODIR}/$infoname ] ; then
        noext=$infoname
      fi
      if [ -f ${INFODIR}/${infoname}.info ] ; then
        ext=${infoname}.info
      fi

      # If it exists with both names take what was said in the file.
      if [ ! -z "$ext" ] && [ ! -z "$noext" ]; then
        fname=$file
        warn="### Warning: $ext and $noext both exist!  Using ${file}. ###"
      elif [ ! -z "${noext}${ext}" ]; then
        # just take the name if it exists only once
        fname=${noext}${ext}
      fi

      # if we found something and aren't skipping, do the entry
      if [ ! -z "$fname" ] ; then
        if [ -z "$skip" ] ; then

          if [ ! -z "$warn" ] ; then	# issue any warning
	    echo $warn
	    warn=
          fi

          entry=`sed -e '1,/START-INFO-DIR-ENTRY/d' \
		     -e '/END-INFO-DIR-ENTRY/,$d' ${INFODIR}/$fname`
          if [ ! -z "${entry}" ] ; then
            echo "${entry}"
          else
            echo "* ${infoname}: (${infoname})."
          fi
        fi

        # remove the name from the directory listing
	infofiles=`echo "" ${infofiles} "" | sed -e "s/ ${fname} / /" -e "s/  / /g"`

      fi

    fi

  done

  line=`expr $line + 1`
done

if [ -z "${infofiles}" ] ; then
  exit 0
elif [ $lines -gt 0 ]; then
  echo
fi

# Sort remaining files by INFO-DIR-SECTION.
prevsect=
filesectdata=`(cd ${INFODIR}; \
	      fgrep -a INFO-DIR-SECTION /dev/null ${infofiles} | \
	      fgrep -v 'INFO-DIR-SECTION Miscellaneous' | \
	      sort -t: -k2 -k1 | tr ' ' '_')`
for sectdata in ${filesectdata}; do
  file=`echo ${sectdata} | cut -d: -f1`
  section=`sed -n -e 's/^INFO-DIR-SECTION //p' ${INFODIR}/${file}`
  infofiles=`echo "" ${infofiles} "" | sed -e "s/ ${file} / /" -e "s/  / /g"`

  if [ "${prevsect}" != "${section}" ] ; then
    if [ ! -z "${prevsect}" ] ; then
      echo ""
    fi
    echo "${section}"
    prevsect="${section}"
  fi

  infoname=`echo $file | sed 's/\.info$//'`
  entry=`sed -e '1,/START-INFO-DIR-ENTRY/d' \
	-e '/END-INFO-DIR-ENTRY/,$d' ${INFODIR}/${file}`
  if [ ! -z "${entry}" ] ; then
    echo "${entry}"
  elif [ ! -d "${INFODIR}/${file}" ] ; then
    echo "* ${infoname}: (${infoname})."
  fi
done

# Process miscellaneous files.
for file in ${infofiles}; do
  if [ ! -z "${prevsect}" ] ; then
    echo ""
    echo "Miscellaneous"
    prevsect=""
  fi

  infoname=`echo $file | sed 's/\.info$//'`
  entry=`sed -e '1,/START-INFO-DIR-ENTRY/d' \
	-e '/END-INFO-DIR-ENTRY/,$d' ${INFODIR}/${file}`

  if [ ! -z "${entry}" ] ; then
    echo "${entry}"
  elif [ ! -d "${INFODIR}/${file}" ] ; then
    echo "* ${infoname}: (${infoname})."
  fi
done
@


1.5
log
@conflict resolution
@
text
@d2 1
a2 1
# $Id: gen-dir-node,v 1.3 2004/04/11 17:56:47 karl Exp $
a49 2
echo "This version was generated on `date`"
echo "by `whoami`@@`hostname` for `(cd ${INFODIR}; pwd)`"
d52 1
a52 1
\$Id: gen-dir-node,v 1.3 2004/04/11 17:56:47 karl Exp $
@


1.4
log
@pass the -a flag to grep so that it doesn't treat some info files as binary
ok deraadt@@
@
text
@d2 1
a2 1
# $Id: gen-dir-node,v 1.3 2000/02/09 02:18:42 espie Exp $
d54 1
a54 1
\$Id: gen-dir-node,v 1.3 2000/02/09 02:18:42 espie Exp $
d110 1
a110 2
    if [ -z "$echoline" -a ! -z "$file" ] ; then

d123 1
a123 1
      if [ ! -z "$ext" -a ! -z "$noext" ]; then
d126 1
a126 1
      elif [ ! \( -z "$ext" -a -z "$noext" \) ]; then
@


1.3
log
@Merge conflicts, and a few details:
- Makefile.bsd-wrapper: man pages, disable NLS for now.
- doc/Makefile.in: install man pages manually, remove buggy targets that
would break `make clean'.
- makeinfo/Makefile.in: shell failure ??? rework problematic line.
- util/texindex.c: let maketempname create the file, remove race condition.
@
text
@d2 1
a2 1
# $Id: gen-dir-node,v 1.4 1998/08/11 21:41:15 karl Exp $
d54 1
a54 1
\$Id: gen-dir-node,v 1.4 1998/08/11 21:41:15 karl Exp $
d170 2
a171 1
filesectdata=`(cd ${INFODIR}; fgrep INFO-DIR-SECTION /dev/null ${infofiles} | \
@


1.2
log
@Upgrade to 3.12, merge with OpenBSD changes.
@
text
@d2 1
a2 1
# $Id: gen-dir-node,v 1.1 1997/05/22 22:02:43 karl Exp $
d36 2
d54 1
a54 1

d60 1
d62 6
a67 5
  Typing "d" returns here, "q" exits, "?" lists all INFO commands, "h" 
  gives a primer for first-timers, "mTexinfo<Return>" visits Texinfo topic,
  etc.
  Or click mouse button 2 on a menu item or cross reference to select it.
  --- PLEASE ADD DOCUMENTATION TO THIS TREE. (See INFO topic first.) ---
d82 1
a82 1
infofiles=`(cd ${INFODIR}; ls | egrep -v '\-|^dir$|^dir\.info$|^dir\.orig$')`
d146 1
a146 1
            echo "* ${infoname}: (${fname})."
d151 1
a151 3
        infofiles=`echo ${infofiles} | sed -e "s/ ${fname} / /" \
					 -e "s/^${fname} //" \
					 -e "s/ ${fname}$//"`
d164 1
a164 1
else
d168 29
d198 6
a203 4
  case $file in
    *.gz) zcat=zcat; file=`echo $file|sed 's/\.gz$//'`; gz=.gz;;
    *) zcat=cat; gz=;;
  esac
d205 2
a206 3
  entry=`$zcat ${INFODIR}/${file}$gz \
           |sed -e '1,/START-INFO-DIR-ENTRY/d' \
		-e '/END-INFO-DIR-ENTRY/,$d'`
d210 2
a211 2
  else
    echo "* ${infoname}: (${file})."
@


1.1
log
@Initial revision
@
text
@d2 1
a2 1

d5 1
a5 1
# dir.info file.  The skeleton file contains info topic names in the
d45 1
a45 1
### output the dir.info header
d47 1
a47 1
echo "This file was generated automatically by the gen-dir-node script."
d167 4
d172 3
a174 2
  entry=`sed -e '1,/START-INFO-DIR-ENTRY/d' \
	-e '/END-INFO-DIR-ENTRY/,$d' ${INFODIR}/${file}`
a181 1

@


1.1.1.1
log
@Import of texinfo-3.6 from FSF
@
text
@@


1.1.1.2
log
@Import of texinfo-3.9.
@
text
@d2 1
a2 1
# $Id: gen-dir-node,v 1.2 1996/10/03 18:49:48 karl Exp $
d5 1
a5 1
# top-level dir file.  The skeleton file contains info topic names in the
d45 1
a45 1
### output the dir header
d47 1
a47 1
echo "This file was generated automatically by $0."
d177 1
@


1.1.1.3
log
@Import of FSF texinfo 3.11
@
text
@d2 1
a2 1
# $Id: gen-dir-node,v 1.1 1997/05/22 22:02:43 karl Exp $
a166 4
  case $file in
    *.gz) zcat=zcat; file=`echo $file|sed 's/\.gz$//'`; gz=.gz;;
    *) zcat=cat; gz=;;
  esac
d168 2
a169 3
  entry=`$zcat ${INFODIR}/${file}$gz \
           |sed -e '1,/START-INFO-DIR-ENTRY/d' \
		-e '/END-INFO-DIR-ENTRY/,$d'`
@


1.1.1.4
log
@TexInfo 4.0. New manpages, can create html.
A bit more grumpy about bad texinfo, though.
@
text
@d2 1
a2 1
# $Id: gen-dir-node,v 1.4 1998/08/11 21:41:15 karl Exp $
a35 2
elif [ -z "${INFODIR}" ] ; then
  INFODIR="%%DEFAULT_INFO_DIR%%"
d52 1
a52 1
\$Id: gen-dir-node,v 1.4 1998/08/11 21:41:15 karl Exp $
a57 1

d59 5
a63 6
  Typing "q" exits, "?" lists all Info commands, "d" returns here,
  "h" gives a primer for first-timers,
  "mEmacs<Return>" visits the Emacs topic, etc.

  In Emacs, you can click mouse button 2 on a menu item or cross reference
  to select it.
d78 1
a78 1
infofiles=`(cd ${INFODIR}; /bin/ls | grep -v '\-[0-9]*$' | egrep -v '^dir$|^dir\.info$|^dir\.orig$')`
d142 1
a142 1
            echo "* ${infoname}: (${infoname})."
d147 3
a149 1
	infofiles=`echo "" ${infofiles} "" | sed -e "s/ ${fname} / /" -e "s/  / /g"`
d162 1
a162 1
elif [ $lines -gt 0 ]; then
a165 29
# Sort remaining files by INFO-DIR-SECTION.
prevsect=
filesectdata=`(cd ${INFODIR}; fgrep INFO-DIR-SECTION /dev/null ${infofiles} | \
	      fgrep -v 'INFO-DIR-SECTION Miscellaneous' | \
	      sort -t: -k2 -k1 | tr ' ' '_')`
for sectdata in ${filesectdata}; do
  file=`echo ${sectdata} | cut -d: -f1`
  section=`sed -n -e 's/^INFO-DIR-SECTION //p' ${INFODIR}/${file}`
  infofiles=`echo "" ${infofiles} "" | sed -e "s/ ${file} / /" -e "s/  / /g"`

  if [ "${prevsect}" != "${section}" ] ; then
    if [ ! -z "${prevsect}" ] ; then
      echo ""
    fi
    echo "${section}"
    prevsect="${section}"
  fi

  infoname=`echo $file | sed 's/\.info$//'`
  entry=`sed -e '1,/START-INFO-DIR-ENTRY/d' \
	-e '/END-INFO-DIR-ENTRY/,$d' ${INFODIR}/${file}`
  if [ ! -z "${entry}" ] ; then
    echo "${entry}"
  elif [ ! -d "${INFODIR}/${file}" ] ; then
    echo "* ${infoname}: (${infoname})."
  fi
done

# Process miscellaneous files.
d167 4
a170 6
  if [ ! -z "${prevsect}" ] ; then
    echo ""
    echo "Miscellaneous"
    prevsect=""
  fi

d172 3
a174 2
  entry=`sed -e '1,/START-INFO-DIR-ENTRY/d' \
	-e '/END-INFO-DIR-ENTRY/,$d' ${INFODIR}/${file}`
d178 2
a179 2
  elif [ ! -d "${INFODIR}/${file}" ] ; then
    echo "* ${infoname}: (${infoname})."
@


1.1.1.5
log
@import texinfo 4.8 into the tree.
(okay theo, kettenis)
@
text
@d2 1
a2 1
# $Id: gen-dir-node,v 1.3 2004/04/11 17:56:47 karl Exp $
d54 1
a54 1
\$Id: gen-dir-node,v 1.3 2004/04/11 17:56:47 karl Exp $
d110 2
a111 1
    if [ -z "$echoline" ] && [ ! -z "$file" ] ; then
d124 1
a124 1
      if [ ! -z "$ext" ] && [ ! -z "$noext" ]; then
d127 1
a127 1
      elif [ ! -z "${noext}${ext}" ]; then
@


