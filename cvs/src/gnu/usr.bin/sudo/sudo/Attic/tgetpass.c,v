head	1.15;
access;
symbols
	OPENBSD_2_6:1.14.0.4
	OPENBSD_2_6_BASE:1.14
	OPENBSD_2_5:1.14.0.2
	OPENBSD_2_5_BASE:1.14
	OPENBSD_2_4:1.10.0.2
	OPENBSD_2_4_BASE:1.10
	OPENBSD_2_3:1.8.0.2
	OPENBSD_2_3_BASE:1.8
	OPENBSD_2_2:1.3.0.4
	OPENBSD_2_2_BASE:1.3
	OPENBSD_2_1:1.3.0.2
	OPENBSD_2_1_BASE:1.3;
locks; strict;
comment	@ * @;


1.15
date	99.11.18.16.39.35;	author millert;	state dead;
branches;
next	1.14;

1.14
date	99.03.29.20.29.07;	author millert;	state Exp;
branches;
next	1.13;

1.13
date	99.02.19.04.32.51;	author millert;	state Exp;
branches;
next	1.12;

1.12
date	98.11.21.01.34.54;	author millert;	state Exp;
branches;
next	1.11;

1.11
date	98.11.13.22.44.34;	author millert;	state Exp;
branches;
next	1.10;

1.10
date	98.09.15.02.42.45;	author millert;	state Exp;
branches;
next	1.9;

1.9
date	98.06.24.16.25.17;	author millert;	state Exp;
branches;
next	1.8;

1.8
date	98.03.31.06.41.16;	author millert;	state Exp;
branches;
next	1.7;

1.7
date	98.02.06.19.02.55;	author millert;	state Exp;
branches;
next	1.6;

1.6
date	98.01.23.03.54.05;	author millert;	state Exp;
branches;
next	1.5;

1.5
date	98.01.13.05.30.31;	author millert;	state Exp;
branches;
next	1.4;

1.4
date	97.11.23.07.15.50;	author millert;	state Exp;
branches;
next	1.3;

1.3
date	97.02.21.17.10.08;	author millert;	state Exp;
branches;
next	1.2;

1.2
date	96.11.17.16.34.06;	author millert;	state Exp;
branches;
next	1.1;

1.1
date	96.10.14.05.14.56;	author millert;	state Exp;
branches;
next	;


desc
@@


1.15
log
@remove old GPL'd sudo
@
text
@/*	$OpenBSD: tgetpass.c,v 1.14 1999/03/29 20:29:07 millert Exp $	*/

/*
 *  CU sudo version 1.5.9
 *  Copyright (c) 1996, 1998, 1999 Todd C. Miller <Todd.Miller@@courtesan.com>
 *
 *  This program is free software; you can redistribute it and/or modify
 *  it under the terms of the GNU General Public License as published by
 *  the Free Software Foundation; either version 1, or (at your option)
 *  any later version.
 *
 *  This program is distributed in the hope that it will be useful,
 *  but WITHOUT ANY WARRANTY; without even the implied warranty of
 *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 *  GNU General Public License for more details.
 *
 *  You should have received a copy of the GNU General Public License
 *  along with this program; if not, write to the Free Software
 *  Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.
 *
 *  Please send bugs, changes, problems to sudo-bugs@@courtesan.com
 *
 *******************************************************************
 *
 *  This module contains tgetpass(), getpass(3) with a timeout.
 *  It should work on any OS that supports sgtty (4BSD), termio (SYSV),
 *  or termios (POSIX) line disciplines.
 *
 *  Todd C. Miller  Sun Jun  5 17:22:31 MDT 1994
 */

#include "config.h"

#include <stdio.h>
#ifdef STDC_HEADERS
#include <stdlib.h>
#endif /* STDC_HEADERS */
#ifdef HAVE_UNISTD_H
#include <unistd.h>
#endif /* HAVE_UNISTD_H */
#ifdef HAVE_STRING_H
#include <string.h>
#endif /* HAVE_STRING_H */
#ifdef HAVE_STRINGS_H
#include <strings.h>
#endif /* HAVE_STRINGS_H */
#include <limits.h>
#include <pwd.h>
#include <sys/param.h>
#include <sys/types.h>
#ifdef HAVE_SYS_BSDTYPES_H
#include <sys/bsdtypes.h>
#endif /* HAVE_SYS_BSDTYPES_H */
#ifdef HAVE_SYS_SELECT_H
#include <sys/select.h>
#endif /* HAVE_SYS_SELECT_H */
#include <sys/time.h>
#include <errno.h>
#include <signal.h>
#include <fcntl.h>
#ifdef HAVE_TERMIOS_H
#include <termios.h>
#else
#ifdef HAVE_TERMIO_H
#include <termio.h>
#else
#include <sgtty.h>
#include <sys/ioctl.h>
#endif /* HAVE_TERMIO_H */
#endif /* HAVE_TERMIOS_H */
#ifdef HAVE_GETPRPWNAM
#  ifdef __hpux
#    include <hpsecurity.h>
#  else
#    include <sys/security.h>
#  endif /* __hpux */
#  include <prot.h>			/* for AUTH_MAX_PASSWD_LENGTH */
#endif /* HAVE_GETPRPWNAM */

#include <pathnames.h>
#include "compat.h"

#ifndef TCSASOFT
#define TCSASOFT	0
#endif /* TCSASOFT */

#ifndef lint
static const char rcsid[] = "$Sudo: tgetpass.c,v 1.76 1999/03/29 04:05:13 millert Exp $";
#endif /* lint */


/******************************************************************
 *
 *  tgetpass()
 *
 *  this function prints a prompt and gets a password from /dev/tty
 *  or stdin.  Echo is turned off (if possible) during password entry
 *  and input will time out based on the value of timeout.
 */

char * tgetpass(prompt, timeout)
    const char *prompt;
    int timeout;
{
#ifdef HAVE_TERMIOS_H
    struct termios term;
#else
#ifdef HAVE_TERMIO_H
    struct termio term;
#else
    struct sgttyb ttyb;
#endif /* HAVE_TERMIO_H */
#endif /* HAVE_TERMIOS_H */
#ifdef POSIX_SIGNALS
    sigset_t oldmask;
    sigset_t mask;
#else
    int oldmask;
#endif /* POSIX_SIGNALS */
    int n, echo;
    FILE *input, *output;
    static char buf[_PASSWD_LEN + 1];
    fd_set *readfds;
    struct timeval tv;

    /*
     * mask out SIGINT and SIGTSTP, should probably just catch and deal.
     */
#ifdef POSIX_SIGNALS
    (void) sigemptyset(&mask);
    (void) sigaddset(&mask, SIGINT);
    (void) sigaddset(&mask, SIGTSTP);
    (void) sigprocmask(SIG_BLOCK, &mask, &oldmask);
#else
    oldmask = sigblock(sigmask(SIGINT)|sigmask(SIGTSTP));
#endif

    /*
     * open /dev/tty for reading/writing if possible or use
     * stdin and stderr instead.
     */
    if ((input = fopen(_PATH_TTY, "r+")) == NULL) {
	input = stdin;
	output = stderr;
    } else {
	output = input;
	setbuf(output, NULL);
    }

    /* print the prompt */
    if (prompt)
	fputs(prompt, output);

    /* rewind if necesary */
    if (input == output) {
	(void) fflush(output);
	(void) rewind(output);
    }

    /*
     * turn off echo
     */
#ifdef HAVE_TERMIOS_H
    (void) tcgetattr(fileno(input), &term);
    if ((echo = (term.c_lflag & ECHO))) {
	term.c_lflag &= ~ECHO;
	(void) tcsetattr(fileno(input), TCSAFLUSH|TCSASOFT, &term);
    }
#else
#ifdef HAVE_TERMIO_H
    (void) ioctl(fileno(input), TCGETA, &term);
    if ((echo = (term.c_lflag & ECHO))) {
	term.c_lflag &= ~ECHO;
	(void) ioctl(fileno(input), TCSETA, &term);
    }
#else
    (void) ioctl(fileno(input), TIOCGETP, &ttyb);
    if ((echo = (ttyb.sg_flags & ECHO))) {
	ttyb.sg_flags &= ~ECHO;
	(void) ioctl(fileno(input), TIOCSETP, &ttyb);
    }
#endif /* HAVE_TERMIO_H */
#endif /* HAVE_TERMIOS_H */

    /*
     * Timeout of <= 0 means no timeout
     */
    if (timeout > 0) {
	/* setup for select(2) */
	n = howmany(fileno(input) + 1, NFDBITS) * sizeof(fd_mask);
	if ((readfds = (fd_set *) malloc(n)) == NULL) {
	    (void) fprintf(stderr, "Cannot allocate memory: ");
	    perror("");
	    return(NULL);
	}
	(void) memset((VOID *)readfds, 0, n);
	FD_SET(fileno(input), readfds);

	/* set timeout for select */
	tv.tv_sec = timeout;
	tv.tv_usec = 0;

	/*
	 * get password or return empty string if nothing to read by timeout
	 */
	buf[0] = '\0';
	while ((n = select(fileno(input) + 1, readfds, 0, 0, &tv)) == -1 &&
	    errno == EINTR)
	    ;
	if (n != 0 && fgets(buf, sizeof(buf), input)) {
	    n = strlen(buf);
	    if (buf[n - 1] == '\n')
		buf[n - 1] = '\0';
	}
	(void) free(readfds);
    } else {
	buf[0] = '\0';
	if (fgets(buf, sizeof(buf), input)) {
	    n = strlen(buf);
	    if (buf[n - 1] == '\n')
		buf[n - 1] = '\0';
	}
    }

     /* turn on echo */
#ifdef HAVE_TERMIOS_H
    if (echo) {
	term.c_lflag |= ECHO;
	(void) tcsetattr(fileno(input), TCSAFLUSH|TCSASOFT, &term);
    }
#else
#ifdef HAVE_TERMIO_H
    if (echo) {
	term.c_lflag |= ECHO;
	(void) ioctl(fileno(input), TCSETA, &term);
    }
#else
    if (echo) {
	ttyb.sg_flags |= ECHO;
	(void) ioctl(fileno(input), TIOCSETP, &ttyb);
    }
#endif /* HAVE_TERMIO_H */
#endif /* HAVE_TERMIOS_H */

    /* rewind if necesary */
    if (input == output) {
	(void) fflush(output);
	(void) rewind(output);
    }

    /* print a newline since echo is turned off */
    (void) fputc('\n', output);

    /* restore old signal mask */
#ifdef POSIX_SIGNALS
    (void) sigprocmask(SIG_SETMASK, &oldmask, NULL);
#else
    (void) sigsetmask(oldmask);
#endif

    /* close /dev/tty if that's what we opened */
    if (input != stdin)
	(void) fclose(input);

    return(buf);
}
@


1.14
log
@sudo 1.5.9--fixes some parser bugs
@
text
@d1 1
a1 1
/*	$OpenBSD$	*/
@


1.13
log
@sudo 1.5.8
@
text
@d4 1
a4 1
 *  CU sudo version 1.5.8
d88 1
a88 1
static const char rcsid[] = "$Sudo: tgetpass.c,v 1.75 1999/02/03 04:32:18 millert Exp $";
@


1.12
log
@sudo 1.5.7
@
text
@d4 2
a5 1
 *  CU sudo version 1.5.7
d88 1
a88 1
static const char rcsid[] = "$From: tgetpass.c,v 1.72 1998/11/18 04:16:13 millert Exp $";
@


1.11
log
@update to sudo 1.5.6p6
@
text
@d1 1
a1 1
/*	$OpenBSD: tgetpass.c,v 1.10 1998/09/15 02:42:45 millert Exp $	*/
d4 1
a4 1
 *  CU sudo version 1.5.6
a30 4
#ifndef lint
static char rcsid[] = "$From: tgetpass.c,v 1.63 1998/09/09 00:43:49 millert Exp $";
#endif /* lint */

d70 1
a70 1
#if (SHADOW_TYPE == SPW_SECUREWARE)
d75 3
a77 3
#  endif /* __hpux */ 
#  include <prot.h>
#endif /* SPW_SECUREWARE */
d86 4
d100 1
a100 1
char * tgetpass(prompt, timeout, user, host)
a102 2
    char *user;
    char *host;
a123 1
    char *p;
d149 3
a151 22
    /*
     * print the prompt
     */
    if (prompt) {
	p = (char *) prompt;
	do {
	    /* expand %u -> username, %h -> host */
	    switch (*p) {
		case '%':   if (user && *(p+1) == 'u') {
				(void) fputs(user, output);
				p++;
				break;
			    } else if (host && *(p+1) == 'h') {
				(void) fputs(host, output);
				p++;
				break;
			    }

		default:    (void) fputc(*p, output);
	    }
	} while (*(++p));
    }
@


1.10
log
@sudo 1.5.6
@
text
@d1 1
a1 1
/*	$OpenBSD: tgetpass.c,v 1.9 1998/06/24 16:25:17 millert Exp $	*/
d61 1
d149 1
d228 4
a231 2
	if (select(fileno(input) + 1, readfds, 0, 0, &tv) > 0 &&
	    fgets(buf, sizeof(buf), input)) {
@


1.9
log
@include stdlib.h for malloc proto; noted by Theo
@
text
@d1 1
a1 1
/*	$OpenBSD: tgetpass.c,v 1.8 1998/03/31 06:41:16 millert Exp $	*/
d4 1
a4 1
 *  CU sudo version 1.5.5
d32 1
a32 1
static char rcsid[] = "Id: tgetpass.c,v 1.60 1998/03/31 05:05:48 millert Exp $";
d52 1
@


1.8
log
@sudo 1.5.5
@
text
@d1 1
a1 1
/*	$OpenBSD$	*/
d38 3
@


1.7
log
@Remove bogus flush of stderr
Spew prompt before turning off echo.  Seems to fix a weird problem where
if sudo complained about a bogus stamp file the user would sometimes
not have a chance to enter a password.
@
text
@d1 1
a1 1
/*	$OpenBSD: tgetpass.c,v 1.6 1998/01/23 03:54:05 millert Exp $	*/
d4 1
a4 1
 *  CU sudo version 1.5.4
d32 1
a32 1
static char rcsid[] = "Id: tgetpass.c,v 1.52 1998/01/13 04:48:42 millert Exp $";
@


1.6
log
@Fix usage of select(2) to deal correctly with a high-numbered fd.
This change will be in sudo 1.5.5 but you saw it here first...
@
text
@d1 1
a1 1
/*	$OpenBSD: tgetpass.c,v 1.5 1998/01/13 05:30:31 millert Exp $	*/
a141 1
	(void) fflush(output);
d147 1
a147 1
     * turn off echo
a148 23
#ifdef HAVE_TERMIOS_H
    (void) tcgetattr(fileno(input), &term);
    if ((echo = (term.c_lflag & ECHO))) {
	term.c_lflag &= ~ECHO;
	(void) tcsetattr(fileno(input), TCSAFLUSH|TCSASOFT, &term);
    }
#else
#ifdef HAVE_TERMIO_H
    (void) ioctl(fileno(input), TCGETA, &term);
    if ((echo = (term.c_lflag & ECHO))) {
	term.c_lflag &= ~ECHO;
	(void) ioctl(fileno(input), TCSETA, &term);
    }
#else
    (void) ioctl(fileno(input), TIOCGETP, &ttyb);
    if ((echo = (ttyb.sg_flags & ECHO))) {
	ttyb.sg_flags &= ~ECHO;
	(void) ioctl(fileno(input), TIOCSETP, &ttyb);
    }
#endif /* HAVE_TERMIO_H */
#endif /* HAVE_TERMIOS_H */

    /* print the prompt */
d174 25
@


1.5
log
@sudo 1.5.4
@
text
@d1 1
a1 1
/*	$OpenBSD$	*/
d119 1
a119 1
    fd_set readfds;
d204 8
a211 2
	FD_ZERO(&readfds);
	FD_SET(fileno(input), &readfds);
d221 1
a221 1
	if (select(fileno(input) + 1, &readfds, 0, 0, &tv) > 0 &&
d227 1
@


1.4
log
@OpenBSD tags (and preserve sudo tags)
updates from my sudo source tree:
    logging.c: deal with maxfilelen < 0 case
    sudo.c: correct error message if mode/owner wrong and not statable by owner
    compat.h: fix seteuid macro
@
text
@d4 1
a4 1
 *  CU sudo version 1.5.3
d32 1
a32 1
static char rcsid[] = "Id: tgetpass.c,v 1.50 1996/11/14 02:37:16 millert Exp millert $";
@


1.3
log
@FreeBSD PR ports/2766 (Patch from Marc Slemko marcs@@znep.com):
    Don't pass getdtablesize() as first arg to select(2).  No need
    to do this since we only select on one fd--use (fd+1) as nfds.
    This fixes the problem with fdesc as well (though that is really
    an fdesc bug).  Fix will be in sudo 1.5.4.
@
text
@d1 2
d32 1
a32 1
static char rcsid[] = "$Id: tgetpass.c,v 1.50 1996/11/14 02:37:16 millert Exp $";
@


1.2
log
@Updated to sudo 1.5.3
@
text
@a208 7
	/* how many file descriptors may we have? */
#ifdef HAVE_SYSCONF
	n = sysconf(_SC_OPEN_MAX);
#else
	n = getdtablesize();
#endif /* HAVE_SYSCONF */

d213 2
a214 1
	if (select(n, &readfds, 0, 0, &tv) > 0 && fgets(buf, sizeof(buf), input)) {
@


1.1
log
@sudo 1.5.2
@
text
@d2 1
a2 1
 *  CU sudo version 1.5.2
d30 1
a30 1
static char rcsid[] = "$Id: tgetpass.c,v 1.49 1996/10/08 22:54:49 millert Exp $";
@
