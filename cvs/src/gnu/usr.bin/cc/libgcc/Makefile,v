head	1.29;
access;
symbols
	OPENBSD_6_2_BASE:1.29
	OPENBSD_6_1:1.29.0.4
	OPENBSD_6_1_BASE:1.29
	OPENBSD_6_0:1.27.0.4
	OPENBSD_6_0_BASE:1.27
	OPENBSD_5_9:1.27.0.2
	OPENBSD_5_9_BASE:1.27
	OPENBSD_5_8:1.26.0.8
	OPENBSD_5_8_BASE:1.26
	OPENBSD_5_7:1.26.0.2
	OPENBSD_5_7_BASE:1.26
	OPENBSD_5_6:1.26.0.4
	OPENBSD_5_6_BASE:1.26
	OPENBSD_5_5:1.25.0.6
	OPENBSD_5_5_BASE:1.25
	OPENBSD_5_4:1.25.0.2
	OPENBSD_5_4_BASE:1.25
	OPENBSD_5_3:1.24.0.4
	OPENBSD_5_3_BASE:1.24
	OPENBSD_5_2:1.24.0.2
	OPENBSD_5_2_BASE:1.24
	OPENBSD_5_1_BASE:1.20
	OPENBSD_5_1:1.20.0.2
	OPENBSD_5_0:1.18.0.2
	OPENBSD_5_0_BASE:1.18
	OPENBSD_4_9:1.17.0.2
	OPENBSD_4_9_BASE:1.17
	OPENBSD_4_8:1.12.0.2
	OPENBSD_4_8_BASE:1.12
	OPENBSD_4_7:1.2.0.2
	OPENBSD_4_7_BASE:1.2
	robert_20091015:1.1.1.1
	robert:1.1.1;
locks; strict;
comment	@# @;


1.29
date	2016.09.01.11.03.09;	author patrick;	state Exp;
branches;
next	1.28;
commitid	Td6N3CR7rD3d852C;

1.28
date	2016.09.01.10.40.38;	author tedu;	state Exp;
branches;
next	1.27;
commitid	Dg08U5pLI3H9BJfE;

1.27
date	2015.12.18.16.44.03;	author visa;	state Exp;
branches;
next	1.26;
commitid	okz48LAKQi8fgI2k;

1.26
date	2014.04.08.23.18.21;	author martynas;	state Exp;
branches;
next	1.25;

1.25
date	2013.05.08.15.30.38;	author miod;	state Exp;
branches;
next	1.24;

1.24
date	2012.05.04.17.50.41;	author kettenis;	state Exp;
branches;
next	1.23;

1.23
date	2012.04.17.11.09.16;	author miod;	state Exp;
branches;
next	1.22;

1.22
date	2012.04.12.11.28.32;	author jsg;	state Exp;
branches;
next	1.21;

1.21
date	2012.04.12.11.18.29;	author jsg;	state Exp;
branches;
next	1.20;

1.20
date	2011.09.22.20.57.20;	author kettenis;	state Exp;
branches;
next	1.19;

1.19
date	2011.09.18.09.10.30;	author kettenis;	state Exp;
branches;
next	1.18;

1.18
date	2011.08.04.14.46.58;	author kettenis;	state Exp;
branches;
next	1.17;

1.17
date	2010.10.23.09.46.30;	author miod;	state Exp;
branches;
next	1.16;

1.16
date	2010.09.25.17.44.34;	author drahn;	state Exp;
branches;
next	1.15;

1.15
date	2010.09.11.11.52.39;	author kettenis;	state Exp;
branches;
next	1.14;

1.14
date	2010.09.10.16.20.11;	author kettenis;	state Exp;
branches;
next	1.13;

1.13
date	2010.09.09.19.16.50;	author jsg;	state Exp;
branches;
next	1.12;

1.12
date	2010.08.01.21.23.02;	author kettenis;	state Exp;
branches;
next	1.11;

1.11
date	2010.05.07.18.47.29;	author kettenis;	state Exp;
branches;
next	1.10;

1.10
date	2010.05.05.21.10.27;	author robert;	state Exp;
branches;
next	1.9;

1.9
date	2010.05.04.19.15.03;	author naddy;	state Exp;
branches;
next	1.8;

1.8
date	2010.05.04.18.37.00;	author naddy;	state Exp;
branches;
next	1.7;

1.7
date	2010.05.02.23.34.21;	author drahn;	state Exp;
branches;
next	1.6;

1.6
date	2010.05.02.10.05.22;	author kettenis;	state Exp;
branches;
next	1.5;

1.5
date	2010.04.29.14.26.46;	author drahn;	state Exp;
branches;
next	1.4;

1.4
date	2010.04.29.03.41.51;	author marco;	state Exp;
branches;
next	1.3;

1.3
date	2010.04.25.21.04.27;	author kettenis;	state Exp;
branches;
next	1.2;

1.2
date	2009.11.17.18.53.43;	author robert;	state Exp;
branches;
next	1.1;

1.1
date	2009.10.15.20.50.19;	author robert;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	2009.10.15.20.50.19;	author robert;	state Exp;
branches;
next	;


desc
@@


1.29
log
@Switch OpenBSD/armv7 to ARM EABI (soft-float).  This is a complete ABI
break which cannot be easily crossed.

ok kettenis@@ jsg@@
@
text
@# $FreeBSD: src/gnu/lib/libgcc/Makefile,v 1.58.8.1 2009/04/15 03:14:26 kensmith Exp $
# $OpenBSD: Makefile,v 1.28 2016/09/01 10:40:38 tedu Exp $

.include <bsd.own.mk>

GCCLIB= ${.CURDIR}/../../../gcc
GCCDIR= ${GCCLIB}/gcc

.include "../Makefile.tgt"

.if defined(CROSSDIR)
LD=${CROSSDIR}/usr/${GCC_TARGET}/bin/ld
RANLIB=${CROSSDIR}/usr/${GCC_TARGET}/bin/ranlib
.endif

.if defined(CROSS_TARGET)
#Building cc for target, CC should already be the cross compiler
.elif ${.OBJDIR} != ${.CURDIR}
CC=${.OBJDIR}/../cc/cc -B ${.OBJDIR}/../cc1
.else
CC=${.CURDIR}/../cc/cc -B ${.CURDIR}/../cc1
.endif

.include "${.CURDIR}/../Makefile.ver"

LIB=		gcc
LIBDIR=		/usr/lib/gcc-lib/${GCC_TARGET}/${BASEVER}

NOPROFILE=	Yes
NOPIC=		Yes

.include "${.CURDIR}/../Makefile.tgt"

.PATH: ${GCCDIR}/config/${GCC_CPU} ${GCCDIR}/config ${GCCDIR}

CFLAGS+=	-DIN_GCC -DIN_LIBGCC2 -D__GCC_FLOAT_NOT_NEEDED \
		-DHAVE_GTHR_DEFAULT \
		-I${GCCLIB}/include \
		-I${GCCDIR}/config -I${GCCDIR} -I. \
		-I${.CURDIR}/../cc_tools \
		-fno-stack-protector

LDFLAGS+=	-nodefaultlibs
LDADD+=		-lc

OBJS=		# added to below in various ways depending on TARGET_ARCH

#---------------------------------------------------------------------------
#
# When upgrading GCC, get the following defintions straight from Makefile.in
#
# Library members defined in libgcc2.c.
LIB2FUNCS= _muldi3 _negdi2 _lshrdi3 _ashldi3 _ashrdi3 \
	_cmpdi2 _ucmpdi2 _clear_cache \
	_enable_execute_stack _trampoline __main _absvsi2 _absvdi2 _addvsi3 \
	_addvdi3 _subvsi3 _subvdi3 _mulvsi3 _mulvdi3 _negvsi2 _negvdi2 _ctors \
	_ffssi2 _ffsdi2 _clz _clzsi2 _clzdi2 _ctzsi2 _ctzdi2 _popcount_tab \
	_popcountsi2 _popcountdi2 _paritysi2 _paritydi2 _powisf2 _powidf2 \
	_powixf2 _powitf2 _mulsc3 _muldc3 _mulxc3 _multc3 _divsc3 _divdc3 \
	_divxc3 _divtc3

# The floating-point conversion routines that involve a single-word integer.
.for mode in sf df xf
SWFLOATFUNCS+= _fixuns${mode}si
.endfor

# Likewise double-word routines.
.for mode in sf df xf tf
DWFLOATFUNCS+= _fix${mode}di _fixuns${mode}di
DWFLOATFUNCS+= _floatdi${mode} _floatundi${mode}
.endfor

LIB2ADD = $(LIB2FUNCS_EXTRA)
LIB2ADD_ST = $(LIB2FUNCS_STATIC_EXTRA)

# Additional sources to handle exceptions; overridden by targets as needed.
LIB2ADDEH = unwind-dw2.c unwind-sjlj.c gthr-gnat.c \
	unwind-c.c unwind-dw2-fde-openbsd.c
LIB2ADDEHSTATIC = $(LIB2ADDEH)
LIB2ADDEHSHARED = $(LIB2ADDEH)

# List of extra C and assembler files to add to static and shared libgcc2.
# Assembler files should have names ending in `.asm'.
LIB2FUNCS_EXTRA =

# List of extra C and assembler files to add to static libgcc2.
# Assembler files should have names ending in `.asm'.
LIB2FUNCS_STATIC_EXTRA =

# Defined in libgcc2.c, included only in the static library.
LIB2FUNCS_ST = _eprintf __gcc_bcmp

FPBIT_FUNCS = _pack_sf _unpack_sf _addsub_sf _mul_sf _div_sf \
    _fpcmp_parts_sf _compare_sf _eq_sf _ne_sf _gt_sf _ge_sf \
    _lt_sf _le_sf _unord_sf _si_to_sf _sf_to_si _negate_sf _make_sf \
    _sf_to_df _sf_to_tf _thenan_sf _sf_to_usi _usi_to_sf _sf_to_tf

DPBIT_FUNCS = _pack_df _unpack_df _addsub_df _mul_df _div_df \
    _fpcmp_parts_df _compare_df _eq_df _ne_df _gt_df _ge_df \
    _lt_df _le_df _unord_df _si_to_df _df_to_si _negate_df _make_df \
    _df_to_sf _df_to_tf _thenan_df _df_to_usi _usi_to_df

TPBIT_FUNCS = _pack_tf _unpack_tf _addsub_tf _mul_tf _div_tf \
    _fpcmp_parts_tf _compare_tf _eq_tf _ne_tf _gt_tf _ge_tf \
    _lt_tf _le_tf _unord_tf _si_to_tf _tf_to_si _negate_tf _make_tf \
    _tf_to_df _tf_to_sf _thenan_tf _tf_to_usi _usi_to_tf

# These might cause a divide overflow trap and so are compiled with
# unwinder info.
LIB2_DIVMOD_FUNCS = _divdi3 _moddi3 _udivdi3 _umoddi3 _udiv_w_sdiv _udivmoddi4

#-----------------------------------------------------------------------
#
#	Platform specific bits.
#	When upgrading GCC, get the following definitions from config/<cpu>/t-*
#
.if ${TARGET_ARCH} == "alpha"
CFLAGS+=	-mieee
LIB2FUNCS_EXTRA = qrnnd.asm
.endif

.if ${TARGET_ARCH} == "arm"
#	from config/arm/t-strongarm-elf
CFLAGS+=	-Dinhibit_libc -fno-inline
LIB1ASMSRC =	lib1funcs.asm
LIB1ASMFUNCS =  _dvmd_tls _bb_init_func
LIB2FUNCS_EXTRA = floatunsidf.c floatunsisf.c
LIB2ADDEH =	unwind-arm.c libunwind.S pr-support.c unwind-c.c

# Not now
#LIB1ASMFUNCS =  _udivsi3 _divsi3 _umodsi3 _modsi3 _dvmd_tls _bb_init_func
#LIB1ASMFUNCS+=	_call_via_rX _interwork_call_via_rX \
#	_lshrdi3 _ashrdi3 _ashldi3 \
#	_negdf2 _addsubdf3 _muldivdf3 _cmpdf2 _unorddf2 _fixdfsi _fixunsdfsi \
#	_truncdfsf2 _negsf2 _addsubsf3 _muldivsf3 _cmpsf2 _unordsf2 \
#	_fixsfsi _fixunssfsi _floatdidf _floatdisf
.endif

.if ${TARGET_ARCH} == "hppa"
CFLAGS+=	-fPIC -DELF=1 -DLINUX=1
LIB1ASMFUNCS =	_divI _divU _remI _remU _div_const _mulI _dyncall
LIB1ASMSRC =	pa/milli64.S
LIB2FUNCS_EXTRA = fptr.c
.endif

.if ${TARGET_ARCH} == "hppa64"
CFLAGS+=	-fPIC -Dpa64=1 -DELF=1
LIB1ASMFUNCS =	_divI _divU _remI _remU _div_const _mulI
LIB1ASMSRC =	pa/milli64.S
LIB2FUNCS_EXTRA = fptr.c
.endif

.if ${TARGET_ARCH} == "ia64"
LIB1ASMSRC =	ia64/lib1funcs.asm
LIB1ASMFUNCS =	__divxf3 __divdf3 __divsf3 \
	__divdi3 __moddi3 __udivdi3 __umoddi3 \
	__divsi3 __modsi3 __udivsi3 __umodsi3 __save_stack_nonlocal \
	__nonlocal_goto __restore_stack_nonlocal __trampoline \
	_fixtfdi _fixunstfdi _floatditf
LIB2ADDEH = unwind-ia64.c unwind-sjlj.c unwind-c.c
.endif

.if ${TARGET_ARCH} == "mips64" || ${TARGET_ARCH} == "mips64el"
LIB2FUNCS_EXTRA = sync.S
.endif

.if ${TARGET_ARCH} == "sh"
CFLAGS+=	-fpic -DNO_FPSCR_VALUES
LIB1ASMSRC = sh/lib1funcs.asm
LIB1ASMFUNCS = _ashiftrt _ashiftrt_n _ashiftlt _lshiftrt _movmem \
  _movmem_i4 _mulsi3 _sdivsi3 _sdivsi3_i4 _udivsi3 _udivsi3_i4 _set_fpscr \
  _udiv_qrnnd_16 _ic_invalidate _ic_invalidate_array
.endif

.if ${TARGET_ARCH} == "powerpc"
#	from config/rs6000/t-ppccomm
LIB2FUNCS_EXTRA = tramp.asm darwin-ldouble.c
LIB2FUNCS_STATIC_EXTRA = eabi.asm
.endif

#-----------------------------------------------------------------------

# Remove any objects from LIB2FUNCS and LIB2_DIVMOD_FUNCS that are
# defined as optimized assembly code in LIB1ASMFUNCS.
.if defined(LIB1ASMFUNCS)
.for sym in ${LIB1ASMFUNCS}
LIB2FUNCS:=	${LIB2FUNCS:S/${sym}//g}
LIB2_DIVMOD_FUNCS:= ${LIB2_DIVMOD_FUNCS:S/${sym}//g}
.endfor
.endif

COMMONHDRS=	tm.h tconfig.h options.h unwind.h gthr-default.h

#-----------------------------------------------------------------------
#
# Helpful shortcuts for compiler invocations.
#
#HIDE =  -fvisibility=hidden -DHIDE_EXPORTS
CC_T =	${CC} -c ${CFLAGS} ${HIDE} -fPIC
CC_P =	${CC} -c ${CFLAGS} ${HIDE} -p -fPIC
CC_S =	${CC} -c ${CFLAGS} ${PICFLAG} -DSHARED

#-----------------------------------------------------------------------
#
# Functions from libgcc2.c
#
STD_CFLAGS =
DIV_CFLAGS =	-fexceptions -fnon-call-exceptions
SW_CFLAGS =
DW_CFLAGS =

STD_FUNCS =	${LIB2FUNCS}
DIV_FUNCS =	${LIB2_DIVMOD_FUNCS}
SI_FUNCS =	${SWFLOATFUNCS}
DI_FUNCS =	${DWFLOATFUNCS}

STD_CFILE =	libgcc2.c
DIV_CFILE =	libgcc2.c
SI_CFILE =	libgcc2.c
DI_CFILE =	libgcc2.c

OBJ_GRPS =	STD DIV SI DI

#-----------------------------------------------------------------------
#
# Floating point emulation functions
#
.if ${TARGET_ARCH} == "armNOT_YET" || ${TARGET_ARCH} == "m88k" || \
    ${TARGET_ARCH} == "mips64" || ${TARGET_ARCH} == "mips64el" || \
    ${TARGET_ARCH} == "powerpc" || \
    ${TARGET_ARCH} == "sparc64"

FPBIT_CFLAGS =	-DFINE_GRAINED_LIBRARIES -DFLOAT
DPBIT_CFLAGS =	-DFINE_GRAINED_LIBRARIES

.if ${TARGET_ARCH} == "mips64" || ${TARGET_ARCH} == "mips64el"
SI_CFLAGS +=	-DLIBGCC2_UNITS_PER_WORD=4
DI_CFLAGS +=	-DLIBGCC2_UNITS_PER_WORD=4

TI_FUNCS =	${DWFLOATFUNCS:S/di/ti/}
TI_CFILE =	libgcc2.c

FPBIT_CFLAGS +=	-DTMODES
DPBIT_CFLAGS +=	-DTMODES
.endif

.if ${TARGET_ARCH} == "mips64el"
FPBIT_CFLAGS +=	-DFLOAT_BIT_ORDER_MISMATCH
DPBIT_CFLAGS +=	-DFLOAT_BIT_ORDER_MISMATCH
.endif

FPBIT_CFILE =	config/fp-bit.c
DPBIT_CFILE =	config/fp-bit.c

OBJ_GRPS +=	FPBIT DPBIT
.endif

.if ${TARGET_ARCH} == "mips64" || ${TARGET_ARCH} == "mips64el"

TPBIT_CFLAGS =	-DFINE_GRAINED_LIBRARIES -DTFLOAT

.if ${TARGET_ARCH} == "mips64el"
TPBIT_CFLAGS +=	-DFLOAT_BIT_ORDER_MISMATCH
.endif

TPBIT_CFILE =	config/fp-bit.c

OBJ_GRPS +=	TPBIT
.endif

#-----------------------------------------------------------------------
#
# Generic build rules for object groups defined above
#
.for T in ${OBJ_GRPS}
${T}_OBJS_T =	${${T}_FUNCS:S/$/.o/}
${T}_OBJS_P =	${${T}_FUNCS:S/$/.po/}
${T}_OBJS_S =	${${T}_FUNCS:S/$/.So/}
OBJS +=		${${T}_FUNCS:S/$/.o/}

${${T}_OBJS_T}: ${${T}_CFILE} ${COMMONHDRS}
	${CC_T} ${${T}_CFLAGS} -DL${.PREFIX} -o ${.TARGET} ${.ALLSRC:M*.c}
${${T}_OBJS_P}: ${${T}_CFILE} ${COMMONHDRS}
	${CC_P} ${${T}_CFLAGS} -DL${.PREFIX} -o ${.TARGET} ${.ALLSRC:M*.c}
${${T}_OBJS_S}: ${${T}_CFILE} ${COMMONHDRS}
	${CC_S} ${${T}_CFLAGS} -DL${.PREFIX} -o ${.TARGET} ${.ALLSRC:M*.c}
.endfor

#-----------------------------------------------------------------------
#
# Special versions of the floating-point conversion routines.
#
.if !empty{TI_FUNCS}
TI_OBJS_T =	${TI_FUNCS:S/$/.o/}
OBJS +=		${TI_FUNCS:S/$/.o/}

${TI_OBJS_T}: ${TI_CFILE} ${COMMONHDRS}
	${CC_T} ${TI_CFLAGS} -DL${.PREFIX:S/ti/di/} -o ${.TARGET} ${.ALLSRC:M*.c}
${TI_OBJS_P}: ${TI_CFILE} ${COMMONHDRS}
	${CC_P} ${TI_CFLAGS} -DL${.PREFIX:S/ti/di/} -o ${.TARGET} ${.ALLSRC:M*.c}
${TI_OBJS_T}: ${TI_CFILE} ${COMMONHDRS}
	${CC_S} ${TI_CFLAGS} -DL${.PREFIX:S/ti/di/} -o ${.TARGET} ${.ALLSRC:M*.c}
.endif

#-----------------------------------------------------------------------
#
# Extra objects coming from separate files
#
.if !empty(LIB2ADD)
OBJS  +=	${LIB2ADD:R:S/$/.o/}
SOBJS +=	${LIB2ADD:R:S/$/.So/}
POBJS +=	${LIB2ADD:R:S/$/.po/}
.endif

#-----------------------------------------------------------------------
#
# Objects that should be in static library only.
#
SYMS_ST =	${LIB2FUNCS_ST}	${LIB2ADD_ST}
STAT_OBJS_T = 	${SYMS_ST:S/$/.o/}
STAT_OBJS_P = 	${SYMS_ST:S/$/.po/}
STATICOBJS  =	${SYMS_ST:S/$/.o/}

${STAT_OBJS_T}:	${STD_CFILE} ${COMMONHDRS}
	${CC_T} -DL${.PREFIX} -o ${.TARGET} ${.ALLSRC:M*.c}
${STAT_OBJS_P}:	${STD_CFILE} ${COMMONHDRS}
	${CC_P} -DL${.PREFIX} -o ${.TARGET} ${.ALLSRC:M*.c}

#-----------------------------------------------------------------------
#
# Assembler files.
#
.if defined(LIB1ASMSRC)
ASM_T =		${LIB1ASMFUNCS:S/$/.o/}
ASM_P =		${LIB1ASMFUNCS:S/$/.po/}
ASM_S =		${LIB1ASMFUNCS:S/$/.So/}
ASM_V =		${LIB1ASMFUNCS:S/$/.vis/}
OBJS +=		${LIB1ASMFUNCS:S/$/.o/}

${ASM_T}: ${LIB1ASMSRC} ${.PREFIX}.vis
	${CC} -x assembler-with-cpp -c ${CFLAGS} -DL${.PREFIX} \
	    -o ${.TARGET} -include ${.PREFIX}.vis ${.ALLSRC:N*.h:N*.vis}
${ASM_P}: ${LIB1ASMSRC} ${.PREFIX}.vis
	${CC} -x assembler-with-cpp -p -c ${CFLAGS} -DL${.PREFIX} \
	    -o ${.TARGET} -include ${.PREFIX}.vis ${.ALLSRC:N*.h:N*.vis}
${ASM_S}: ${LIB1ASMSRC}
	${CC} -x assembler-with-cpp -c ${PICFLAG} ${CFLAGS} -DL${.PREFIX} \
	    -o ${.TARGET} ${.ALLSRC:N*.h}
${ASM_V}: ${LIB1ASMSRC}
	${CC} -x assembler-with-cpp -c ${CFLAGS} -DL${.PREFIX} \
	    -o ${.PREFIX}.vo ${.ALLSRC:N*.h}
	( nm -pg ${.PREFIX}.vo | \
		awk 'NF == 3 && $$2 !~ /^[FUN]$$/ { print "\t.hidden ", $$3 }'\
	) > ${.TARGET}

CLEANFILES += ${ASM_V} ${ASM_V:R:S/$/.vo/}
.endif

#-----------------------------------------------------------------------
#
# Exception handling / unwinding support.
#
EH_OBJS_T = ${LIB2ADDEHSTATIC:R:S/$/.o/}
EH_OBJS_P = ${LIB2ADDEHSTATIC:R:S/$/.po/}
EH_OBJS_S = ${LIB2ADDEHSHARED:R:S/$/.So/}
EH_CFLAGS = -fexceptions
.if ${TARGET_ARCH} == "sh"
EH_CFLAGS+= -fno-stack-protector	# necessary for unwind-dw2.c
.endif
SOBJS   += ${EH_OBJS_S}
OBJS    += ${EH_OBJS_T}

.for _src in ${LIB2ADDEHSTATIC}
${_src:R:S/$/.o/}: ${_src} ${COMMONHDRS}
	${CC_T} ${EH_CFLAGS} -o ${.TARGET} ${.IMPSRC}
${_src:R:S/$/.po/}: ${_src} ${COMMONHDRS}
	${CC_P} ${EH_CFLAGS} -o ${.TARGET} ${.IMPSRC}
.endfor

#-----------------------------------------------------------------------
#
# Generated headers
#
${COMMONHDRS}: ${.CURDIR}/../cc_tools/Makefile
	${MAKE} -f ${.ALLSRC} MFILE=${.ALLSRC} GCCDIR=${GCCDIR} ${.TARGET}

CLEANFILES += ${COMMONHDRS}
CLEANFILES += cs-*.h option*

beforeinstall:
	${INSTALL} -d -o ${BINOWN} -g ${BINGRP} -m ${DIRMODE} \
		${DESTDIR}${LIBDIR}

.include <bsd.lib.mk>


.SUFFIXES: .vis .vo .asm

.if ${TARGET_ARCH} == "alpha" || ${TARGET_ARCH} == "powerpc"
.asm.o:
	${CC_T} ${CFLAGS} -xassembler-with-cpp -o ${.TARGET} ${.IMPSRC}
.endif
@


1.28
log
@remove three more sparc references noticed by jsg
@
text
@d2 1
a2 1
# $OpenBSD: Makefile,v 1.27 2015/12/18 16:44:03 visa Exp $
d128 1
@


1.27
log
@Add library-based __sync functions for mips64.

Help with testing and ok kettenis@@
@
text
@d2 1
a2 1
# $OpenBSD: Makefile,v 1.26 2014/04/08 23:18:21 martynas Exp $
d229 1
a229 1
    ${TARGET_ARCH} == "powerpc" || ${TARGET_ARCH} == "sparc" || \
@


1.26
log
@Build libgcc without SSP.  With the new SSP-strong heuristics,
_moddi3.o gets protected and landisk bootblocks got broken.
Fundamentally this causes a link dependency on libc that we'll not
always be able to satisfy.  Spotted by deraadt@@.
OK matthew@@, kettenis@@, guenther@@.
@
text
@d2 1
a2 1
# $OpenBSD: Makefile,v 1.25 2013/05/08 15:30:38 miod Exp $
d160 4
@


1.25
log
@A port of the current gcc 3.3.6 m88k backend to gcc 4.2.1.

Main features:
- md constraints rewritten in RTL
- md predicaties rewritten in RTL
- md va_arg switched to gimple
- abort() calls replaced with gcc_assert() or gcc_unreachable() for better
  diagnostics
- support for non-ELF systems completely removed

Missing:
- conversion of the pipeline information from define_function_unit to
  define_automata not done yet (thus pipeline information currently removed)

Known regressions against 3.3.6 so far:
- no stack protector support yet
- __builtin_setjmp doesn't restore the frame pointer correctly upon return
  from __builtin_longjmp
- at least one case of optimization error when delay slots are not disabled.
- libgcc is only built -fPIC, instead of static/fpic/fPIC.
@
text
@d2 1
a2 1
# $OpenBSD: Makefile,v 1.24 2012/05/04 17:50:41 kettenis Exp $
d40 2
a41 1
		-I${.CURDIR}/../cc_tools
@


1.24
log
@Add __ic_invalidate_array to libgcc on sh.

ok miod@@, jsg@@
@
text
@d2 1
a2 1
# $OpenBSD: Makefile,v 1.23 2012/04/17 11:09:16 miod Exp $
d222 4
a225 3
.if ${TARGET_ARCH} == "armNOT_YET" || ${TARGET_ARCH} == "mips64" || \
    ${TARGET_ARCH} == "mips64el" || ${TARGET_ARCH} == "powerpc" || \
    ${TARGET_ARCH} == "sparc" || ${TARGET_ARCH} == "sparc64"
@


1.23
log
@Explicitely request -fno-stack-protector on sh when building the unwinder,
for unwind-dw2.c fails to build otherwise.
@
text
@d2 1
a2 1
# $OpenBSD: Makefile,v 1.22 2012/04/12 11:28:32 jsg Exp $
d166 1
a166 1
  _udiv_qrnnd_16 _ic_invalidate
@


1.22
log
@the fpu control symbol on sh (__fpscr_values) suddenly becomes local
instead of global with gcc4 and this ends up breaking things in hard
to debug ways.  So move the definition to csu instead of libgcc.

ok miod@@
@
text
@d2 1
a2 1
# $OpenBSD: Makefile,v 1.21 2012/04/12 11:18:29 jsg Exp $
d360 3
@


1.21
log
@backout gcc revision 112331 "optimized integer divide for SH4"
so we can use the existing sh libkern functions.

ok miod@@
@
text
@d2 1
a2 1
# $OpenBSD: Makefile,v 1.20 2011/09/22 20:57:20 kettenis Exp $
d162 1
a162 1
CFLAGS+=	-fpic
@


1.20
log
@Add missing ia64 bits.
@
text
@d2 1
a2 1
# $OpenBSD: Makefile,v 1.19 2011/09/18 09:10:30 kettenis Exp $
d166 1
a166 2
  _div_table _udiv_qrnnd_16 \
  _ic_invalidate
@


1.19
log
@Override LIB2ADDEH on ia64.  Probably not quite right, but at least this makes
it possible to build a cross compiler, and we don't really care about
exception handling until we have a kernel to run C++ code on anyway.
@
text
@d2 1
a2 1
# $OpenBSD: Makefile,v 1.18 2011/08/04 14:46:58 kettenis Exp $
d152 6
@


1.18
log
@Add support for hppa64.

ok deraadt@@
@
text
@d2 1
a2 1
# $OpenBSD: Makefile,v 1.17 2010/10/23 09:46:30 miod Exp $
d149 4
@


1.17
log
@Pick correct ranlib to operate on libgcc.a when cross-compiling
@
text
@d2 1
a2 1
# $OpenBSD: Makefile,v 1.16 2010/09/25 17:44:34 drahn Exp $
d140 7
@


1.16
log
@GCC4 cross compilation support under OpenBSD.
@
text
@d2 1
a2 1
# $OpenBSD: Makefile,v 1.15 2010/09/11 11:52:39 kettenis Exp $
d13 1
@


1.15
log
@Make sure we build all the required integer-to-float and float-to-integer
functions that are needed on mips64.

ok miod@@
@
text
@d2 1
a2 1
# $OpenBSD: Makefile,v 1.14 2010/09/10 16:20:11 kettenis Exp $
d11 4
d17 1
a17 1
.elif exists(${.CURDIR}/../cc/obj)
@


1.14
log
@Add infrastructure to build GCC 4.2.1 for OpenBSD/mips64.  Only tested on
loongson (mips64el).

ok miod@@
@
text
@d2 1
a2 1
# $OpenBSD: Makefile,v 1.13 2010/09/09 19:16:50 jsg Exp $
d58 1
a58 1
LIB2FUNCS+= _fixuns${mode}si
d63 2
a64 2
LIB2FUNCS+= _fix${mode}di _fixuns${mode}di
LIB2FUNCS+= _floatdi${mode} _floatundi${mode}
d182 2
d187 2
d192 2
d195 1
a195 1
OBJ_GRPS =	STD DIV
d209 6
d260 16
@


1.13
log
@let gcc4 build on landisk
initial diff from jasper, finished by me with help from miod

ok jasper@@ miod@@ kettenis@@
@
text
@d2 1
a2 1
# $OpenBSD: Makefile,v 1.12 2010/08/01 21:23:02 kettenis Exp $
a84 2
# KAN: Excluded _sf_to_tf and _df_to_tf as TPBIT_FUNCS are not
# built on any of our platforms.
d90 1
a90 1
    _sf_to_df _thenan_sf _sf_to_usi _usi_to_sf
d95 1
a95 1
    _df_to_sf _thenan_df _df_to_usi _usi_to_df
d195 2
a196 1
.if ${TARGET_ARCH} == "armNOT_YET" || ${TARGET_ARCH} == "powerpc" || \
d202 10
d216 13
@


1.12
log
@Add infrastructure to buil GCC 4.2.1 on OpenBSD/sparc.
@
text
@d2 1
a2 1
# $OpenBSD: Makefile,v 1.11 2010/05/07 18:47:29 kettenis Exp $
d139 9
@


1.11
log
@Bring over changes from gcc3 (and gcc4 in ports) to make C++ exception
handling work with shared libraries.
@
text
@d2 1
a2 1
# $OpenBSD: Makefile,v 1.10 2010/05/05 21:10:27 robert Exp $
d189 1
a189 1
    ${TARGET_ARCH} == "sparc64"
@


1.10
log
@Compile the additional sources to handle exceptions
@
text
@d2 1
a2 1
# $OpenBSD: Makefile,v 1.9 2010/05/04 19:15:03 naddy Exp $
d72 1
a72 1
	unwind-c.c unwind-dw2-fde.c
d279 1
a279 1
EH_CFLAGS = -fexceptions -D__GLIBC__=3 -DElfW=__ElfN
@


1.9
log
@fix .asm handling on powerpc and unify with alpha; ok drahn@@
@
text
@d2 1
a2 1
# $OpenBSD: Makefile,v 1.8 2010/05/04 18:37:00 naddy Exp $
d72 1
a72 1
	unwind-c.c
d280 2
a281 1
SOBJS    += ${EH_OBJS_S}
@


1.8
log
@add infrastructure to build GCC 4.2.1 for OpenBSD/alpha; ok kettenis@@
@
text
@d2 1
a2 1
# $OpenBSD: Makefile,v 1.7 2010/05/02 23:34:21 drahn Exp $
d308 1
a308 1
.if ${TARGET_ARCH} == "alpha"
a310 4
.endif
.if ${TARGET_ARCH} == "powerpc"
.asm.o:
	${CC_T} ${${T}_CFLAGS} -xassembler-with-cpp -o ${.TARGET}  ${.ALLSRC:M*.asm}
@


1.7
log
@Use the newly built compiler for bootstrap purposes, more is needed for
actual cross support.
@
text
@d2 1
a2 1
# $OpenBSD: Makefile,v 1.6 2010/05/02 10:05:22 kettenis Exp $
d113 5
d308 4
@


1.6
log
@Add missing -fPIC or hppa.
@
text
@d2 1
a2 1
# $OpenBSD: Makefile,v 1.5 2010/04/29 14:26:46 drahn Exp $
d8 10
@


1.5
log
@Ignore file info on nm output when looking for global functions to hide.
'looks reasonable' kettenis@@
@
text
@d2 1
a2 1
# $OpenBSD: Makefile,v 1.4 2010/04/29 03:41:51 marco Exp $
d120 1
a120 1
CFLAGS+=	-DELF=1 -DLINUX=1
@


1.4
log
@Add the bits to compile a working powerpc kernel.  This is a work in
progress.

most of the smarts from drahn, ok drahn
@
text
@d2 1
a2 1
# $OpenBSD: Makefile,v 1.3 2010/04/25 21:04:27 kettenis Exp $
d251 1
a251 1
		awk 'NF == 3 && $$2 !~ /^[UN]$$/ { print "\t.hidden ", $$3 }'\
@


1.3
log
@Add infrastructure to build GCC 4.2.1 for OpenBSD/hppa.
@
text
@d2 1
a2 1
# $OpenBSD: Makefile,v 1.2 2009/11/17 18:53:43 robert Exp $
d290 7
a296 1
.SUFFIXES: .vis .vo
@


1.2
log
@make this build on sparc64
@
text
@d2 1
a2 1
# $OpenBSD: Makefile,v 1.1.1.1 2009/10/15 20:50:19 robert Exp $
d117 7
@


1.1
log
@Initial revision
@
text
@d2 1
a2 1
# $OpenBSD$
a122 6
.endif

.if ${TARGET_ARCH} == "sparc64"
#	from config/sparc/t-elf
LIB1ASMSRC =   lb1spc.asm
LIB1ASMFUNCS = _mulsi3 _divsi3 _modsi3
@


1.1.1.1
log
@Import a BSD make based infrastructure for building gcc, based on the
same solution from FreeBSD.
Don't even try to build it at the moment. This is commited so people can
work on it in tree.
@
text
@@
