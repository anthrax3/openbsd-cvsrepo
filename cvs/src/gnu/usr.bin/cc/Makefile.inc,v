head	1.7;
access;
symbols
	OPENBSD_6_2:1.7.0.4
	OPENBSD_6_2_BASE:1.7
	OPENBSD_6_1:1.6.0.20
	OPENBSD_6_1_BASE:1.6
	OPENBSD_6_0:1.6.0.16
	OPENBSD_6_0_BASE:1.6
	OPENBSD_5_9:1.6.0.12
	OPENBSD_5_9_BASE:1.6
	OPENBSD_5_8:1.6.0.14
	OPENBSD_5_8_BASE:1.6
	OPENBSD_5_7:1.6.0.6
	OPENBSD_5_7_BASE:1.6
	OPENBSD_5_6:1.6.0.10
	OPENBSD_5_6_BASE:1.6
	OPENBSD_5_5:1.6.0.8
	OPENBSD_5_5_BASE:1.6
	OPENBSD_5_4:1.6.0.4
	OPENBSD_5_4_BASE:1.6
	OPENBSD_5_3:1.6.0.2
	OPENBSD_5_3_BASE:1.6
	OPENBSD_5_2:1.4.0.6
	OPENBSD_5_2_BASE:1.4
	OPENBSD_5_1_BASE:1.4
	OPENBSD_5_1:1.4.0.4
	OPENBSD_5_0:1.4.0.2
	OPENBSD_5_0_BASE:1.4
	OPENBSD_4_9:1.3.0.2
	OPENBSD_4_9_BASE:1.3
	OPENBSD_4_8:1.2.0.4
	OPENBSD_4_8_BASE:1.2
	OPENBSD_4_7:1.2.0.2
	OPENBSD_4_7_BASE:1.2
	robert_20091015:1.1.1.1
	robert:1.1.1;
locks; strict;
comment	@# @;


1.7
date	2017.07.24.19.22.49;	author robert;	state Exp;
branches;
next	1.6;
commitid	UaRI0KjiFSBzsJzP;

1.6
date	2012.09.16.20.46.35;	author kettenis;	state Exp;
branches;
next	1.5;

1.5
date	2012.08.28.18.59.28;	author pascal;	state Exp;
branches;
next	1.4;

1.4
date	2011.03.06.20.18.22;	author guenther;	state Exp;
branches;
next	1.3;

1.3
date	2010.09.25.17.44.34;	author drahn;	state Exp;
branches;
next	1.2;

1.2
date	2009.10.15.23.18.30;	author robert;	state Exp;
branches;
next	1.1;

1.1
date	2009.10.15.20.50.19;	author robert;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	2009.10.15.20.50.19;	author robert;	state Exp;
branches;
next	;


desc
@@


1.7
log
@install gcc, g++ as gcc and g++ instead of cc, c++ and create links
to the latter on non-clang architectures and make sure we build gcc
with itself because clang won't be able to build it

ok naddy@@
@
text
@# $FreeBSD: src/gnu/usr.bin/cc/Makefile.inc,v 1.66.8.1 2009/04/15 03:14:26 kensmith Exp $
# $OpenBSD: Makefile.inc,v 1.6 2012/09/16 20:46:35 kettenis Exp $

.include "../Makefile.inc"

.if ${COMPILER_VERSION:L} == "clang"
CC=	gcc
CXX=	g++
.endif

# Sometimes this is .include'd several times...
.if !defined(__CC_MAKEFILE_INC__)
__CC_MAKEFILE_INC__= ${MFILE}

.if defined(CROSSDIR)
TOOLS_PREFIX=${CROSSDIR}
.endif

GCCLIB= ${.CURDIR}/../../../gcc
GCCDIR=	${GCCLIB}/gcc

.include "Makefile.tgt"

# Machine description.
MD_FILE=	${GCCDIR}/config/${GCC_CPU}/${GCC_CPU}.md
GCC_TARGET=	${TARGET_ARCH}-unknown-openbsd${OSREV}

NOPIE=		Yes

CFLAGS+=	-DIN_GCC -DHAVE_CONFIG_H
CFLAGS+=	-DPREFIX=\"${TOOLS_PREFIX}/usr\"
#CFLAGS+=	-DWANT_COMPILER_INVARIANTS
CFLAGS+=	${PIE_DEFAULT}

# If building 64-bit longs for the i386, "_LARGE_LONG" should also be defined
# to get the proper sizes in limits.h
.if defined(LONG_TYPE_SIZE)
CFLAGS+=	-DLONG_TYPE_SIZE=${LONG_TYPE_SIZE}
.endif

.if ${TARGET_ARCH} != ${MACHINE_ARCH}
CFLAGS+=	-DCROSS_COMPILE
.endif

.if defined(WANT_FORCE_OPTIMIZATION_DOWNGRADE)
CFLAGS+= -DFORCE_OPTIMIZATION_DOWNGRADE=${WANT_FORCE_OPTIMIZATION_DOWNGRADE}
.endif

.if exists(${.OBJDIR}/../cc_tools)
CFLAGS+=	-I${.OBJDIR}/../cc_tools
.endif
CFLAGS+=	-I${.CURDIR}/../cc_tools
# This must go after the -I for cc_tools to resolve ambiguities for hash.h
# correctly.
CFLAGS+=	-I${GCCDIR} -I${GCCDIR}/config

CFLAGS+=	-I${GCCLIB}/include
CFLAGS+=	-I${GCCLIB}/libcpp/include
CFLAGS+=	-I${GCCLIB}/libdecnumber

.if exists(${.OBJDIR}/../cc_int)
LIBBACKEND=	${.OBJDIR}/../cc_int/libbackend.a
.else
LIBBACKEND=	${.CURDIR}/../cc_int/libbackend.a
.endif

LIBIBERTY=	/usr/lib/libiberty.a

.if exists(${.OBJDIR}/../libcpp)
LIBCPP=		${.OBJDIR}/../libcpp/libcpp.a
.else
LIBCPP=		${.CURDIR}/../libcpp/libcpp.a
.endif

.if exists(${.OBJDIR}/../libdecnumber)
LIBDECNUMBER=	${.OBJDIR}/../libdecnumber/libdecnumber.a
.else
LIBDECNUMBER=	${.CURDIR}/../libdecnumber/libdecnumber.a
.endif

.endif # !__CC_MAKEFILE_INC__
@


1.6
log
@Build gcc as non-PIE.  PIE breaks precompiled headers and causes a serious
performance hit on some architectures (almost 20% on hppa, more than 25% on
sparc64).  And there are no real benefits associated with ASLR for a compiler.

ok deraadt@@
@
text
@d2 1
a2 1
# $OpenBSD: Makefile.inc,v 1.5 2012/08/28 18:59:28 pascal Exp $
d5 5
@


1.5
log
@Add support for PIE-by-default in both ld and gcc.  This is a completely
different approach than the one taken in kurt@@'s original diff, but deemed
better after discussion and diff exchange with kettenis@@ and matthew@@.

Lots of feedback by kettenis@@ and matthew@@, prodding and encouragement by
deraadt@@.

ok kettenis@@ matthew@@
@
text
@d2 1
a2 1
# $OpenBSD: Makefile.inc,v 1.4 2011/03/06 20:18:22 guenther Exp $
d22 2
@


1.4
log
@Tweak definition and some uses of PREFIX macro to avoid including
doubled slashes in compiled in paths.

ok deraadt@@, cross-compilation testing and ok drahn@@
@
text
@d2 1
a2 1
# $OpenBSD: Makefile.inc,v 1.3 2010/09/25 17:44:34 drahn Exp $
d26 1
@


1.3
log
@GCC4 cross compilation support under OpenBSD.
@
text
@d2 1
a2 1
# $OpenBSD: Makefile.inc,v 1.2 2009/10/15 23:18:30 robert Exp $
d24 1
a24 1
CFLAGS+=	-DPREFIX=\"${TOOLS_PREFIX}/usr/\"
@


1.2
log
@Makefile.inc also has to be included from here
@
text
@d2 1
a2 1
# $OpenBSD: Makefile.inc,v 1.1.1.1 2009/10/15 20:50:19 robert Exp $
d10 4
d24 1
a24 1
CFLAGS+=	-DPREFIX=\"${TOOLS_PREFIX}/usr\"
@


1.1
log
@Initial revision
@
text
@d2 3
a4 1
# $OpenBSD$
@


1.1.1.1
log
@Import a BSD make based infrastructure for building gcc, based on the
same solution from FreeBSD.
Don't even try to build it at the moment. This is commited so people can
work on it in tree.
@
text
@@
