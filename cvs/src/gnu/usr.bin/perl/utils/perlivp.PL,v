head	1.2;
access;
symbols
	OPENBSD_6_2:1.2.0.8
	OPENBSD_6_2_BASE:1.2
	PERL_5_24_2:1.1.1.9
	OPENBSD_6_1:1.2.0.6
	OPENBSD_6_1_BASE:1.2
	OPENBSD_6_0:1.2.0.4
	OPENBSD_6_0_BASE:1.2
	OPENBSD_5_9:1.1.1.8.0.10
	OPENBSD_5_9_BASE:1.1.1.8
	OPENBSD_5_8:1.1.1.8.0.12
	OPENBSD_5_8_BASE:1.1.1.8
	PERL_5_20_2:1.1.1.8
	OPENBSD_5_7:1.1.1.8.0.4
	OPENBSD_5_7_BASE:1.1.1.8
	PERL_5_20_1:1.1.1.8
	OPENBSD_5_6:1.1.1.8.0.8
	OPENBSD_5_6_BASE:1.1.1.8
	PERL_5_18_2:1.1.1.8
	PERL:1.1.1
	OPENBSD_5_5:1.1.1.8.0.6
	OPENBSD_5_5_BASE:1.1.1.8
	OPENBSD_5_4:1.1.1.8.0.2
	OPENBSD_5_4_BASE:1.1.1.8
	PERL_5_16_3:1.1.1.8
	OPENBSD_5_3:1.1.1.7.0.10
	OPENBSD_5_3_BASE:1.1.1.7
	OPENBSD_5_2:1.1.1.7.0.8
	OPENBSD_5_2_BASE:1.1.1.7
	OPENBSD_5_1_BASE:1.1.1.7
	OPENBSD_5_1:1.1.1.7.0.6
	OPENBSD_5_0:1.1.1.7.0.4
	OPENBSD_5_0_BASE:1.1.1.7
	OPENBSD_4_9:1.1.1.7.0.2
	OPENBSD_4_9_BASE:1.1.1.7
	PERL_5_12_2:1.1.1.7
	OPENBSD_4_8:1.1.1.6.0.4
	OPENBSD_4_8_BASE:1.1.1.6
	OPENBSD_4_7:1.1.1.6.0.2
	OPENBSD_4_7_BASE:1.1.1.6
	PERL_5_10_1:1.1.1.6
	OPENBSD_4_6:1.1.1.5.0.6
	OPENBSD_4_6_BASE:1.1.1.5
	OPENBSD_4_5:1.1.1.5.0.2
	OPENBSD_4_5_BASE:1.1.1.5
	PERL_5_10_0:1.1.1.5
	OPENBSD_4_4:1.1.1.4.0.10
	OPENBSD_4_4_BASE:1.1.1.4
	OPENBSD_4_3:1.1.1.4.0.8
	OPENBSD_4_3_BASE:1.1.1.4
	OPENBSD_4_2:1.1.1.4.0.6
	OPENBSD_4_2_BASE:1.1.1.4
	OPENBSD_4_1:1.1.1.4.0.4
	OPENBSD_4_1_BASE:1.1.1.4
	OPENBSD_4_0:1.1.1.4.0.2
	OPENBSD_4_0_BASE:1.1.1.4
	PERL_5_8_8:1.1.1.4
	OPENBSD_3_9:1.1.1.3.0.8
	OPENBSD_3_9_BASE:1.1.1.3
	OPENBSD_3_8:1.1.1.3.0.6
	OPENBSD_3_8_BASE:1.1.1.3
	OPENBSD_3_7:1.1.1.3.0.4
	OPENBSD_3_7_BASE:1.1.1.3
	PERL_5_8_6:1.1.1.3
	OPENBSD_3_6:1.1.1.3.0.2
	OPENBSD_3_6_BASE:1.1.1.3
	PERL_5_8_5:1.1.1.3
	PERL_5_8_3:1.1.1.2
	OPENBSD_3_5:1.1.1.2.0.2
	OPENBSD_3_5_BASE:1.1.1.2
	PERL_5_8_2:1.1.1.2
	OPENBSD_3_4:1.1.1.1.0.4
	OPENBSD_3_4_BASE:1.1.1.1
	OPENBSD_3_3:1.1.1.1.0.2
	OPENBSD_3_3_BASE:1.1.1.1
	PERL_5_8_0:1.1.1.1
	CPAN:1.1.1;
locks; strict;
comment	@# @;
expand	@o@;


1.2
date	2016.07.25.10.53.04;	author afresh1;	state Exp;
branches;
next	1.1;
commitid	FHUgABTHZQuYQh2B;

1.1
date	2002.10.27.22.15.11;	author millert;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	2002.10.27.22.15.11;	author millert;	state Exp;
branches;
next	1.1.1.2;

1.1.1.2
date	2003.12.03.02.44.34;	author millert;	state Exp;
branches;
next	1.1.1.3;

1.1.1.3
date	2004.08.09.17.48.38;	author millert;	state Exp;
branches;
next	1.1.1.4;

1.1.1.4
date	2006.03.28.18.49.50;	author millert;	state Exp;
branches;
next	1.1.1.5;

1.1.1.5
date	2008.09.29.17.19.03;	author millert;	state Exp;
branches;
next	1.1.1.6;

1.1.1.6
date	2009.10.12.18.10.47;	author millert;	state Exp;
branches;
next	1.1.1.7;

1.1.1.7
date	2010.09.24.14.49.14;	author millert;	state Exp;
branches;
next	1.1.1.8;

1.1.1.8
date	2013.03.25.20.09.40;	author sthen;	state Exp;
branches
	1.1.1.8.10.1
	1.1.1.8.12.1;
next	1.1.1.9;

1.1.1.9
date	2017.08.14.13.46.26;	author afresh1;	state Exp;
branches;
next	;
commitid	fAzrs78vdW2Yfc6A;

1.1.1.8.10.1
date	2016.08.05.01.01.40;	author afresh1;	state Exp;
branches;
next	;
commitid	HjAJx2yjL4A8HWon;

1.1.1.8.12.1
date	2016.08.05.01.00.56;	author afresh1;	state Exp;
branches;
next	;
commitid	wK3bUiy9jNch0Key;


desc
@@


1.2
log
@Patch perl CVE-2016-1238

The problem relates to Perl 5 ("perl") loading modules from the
includes directory array ("@@INC") in which the last element is the
current directory (".").  That means that, when "perl" wants to
load a module (during first compilation or during lazy loading of
a module in run-time), perl will look for the module in the current
directory at the end, since '.' is the last include directory in
its array of include directories to seek. The issue is with requiring
libraries that are in "." but are not otherwise installed.

The major problem with this behavior is that it unexpectedly puts
a user at risk whenever they execute any Perl scripts from a directory
that is writable by other accounts on the system. For instance, if
a user is logged in as root and changes directory into /tmp or an
account's home directory, it is possible to now run any shell
commands that are written in C, Python or Ruby without fear.

The same isn't true for any shell commands that are written in Perl,
since a significant proportion of Perl scripts will execute code
in the current working directory whenever they are run. For example,
if a user on a shared system creates the file /tmp/Pod/Perldoc/Toterm.pm,
and then I log in as root, change directory to /tmp, and run "perldoc
perlrun", it will execute the code they have placed in the file.


ok deraadt@@
@
text
@#!/usr/local/bin/perl

use Config;
use File::Basename;
use Cwd;

# List explicitly here the variables you want Configure to
# generate.  Metaconfig only looks for shell variables, so you
# have to mention them as if they were shell variables, not
# %Config entries:
#  $startperl
#  $perlpath
#  $eunicefix

# This forces PL files to create target in same directory as PL file.
# This is so that make depend always knows where to find PL derivatives.
my $origdir = cwd;
chdir dirname($0);
my $file = basename($0, '.PL');
$file .= '.com' if $^O eq 'VMS';

# Create output file.
open OUT,">$file" or die "Can't create $file: $!";

print "Extracting $file (with variable substitutions)\n";

# In this section, perl variables will be expanded during extraction.
# You can use $Config{...} to use Configure variables.

print OUT <<"!GROK!THIS!";
$Config{'startperl'}
    eval 'exec $Config{'perlpath'} -S \$0 \${1+"\$@@"}'
        if \$running_under_some_shell;
!GROK!THIS!

print OUT "\n# perlivp $^V\n";

# In the following, perl variables are not expanded during extraction.

print OUT <<'!NO!SUBS!';

BEGIN { pop @@INC if $INC[-1] eq '.' }

sub usage {
    warn "@@_\n" if @@_;
    print << "    EOUSAGE";
Usage:

    $0 [-p] [-v] | [-h]

    -p Print a preface before each test telling what it will test.
    -v Verbose mode in which extra information about test results
       is printed.  Test failures always print out some extra information
       regardless of whether or not this switch is set.
    -h Prints this help message.
    EOUSAGE
    exit;
}

use vars qw(%opt); # allow testing with older versions (do not use our)

@@opt{ qw/? H h P p V v/ } = qw(0 0 0 0 0 0 0);

while ($ARGV[0] =~ /^-/) {
    $ARGV[0] =~ s/^-//; 
    for my $flag (split(//,$ARGV[0])) {
        usage() if '?' =~ /\Q$flag/;
        usage() if 'h' =~ /\Q$flag/;
        usage() if 'H' =~ /\Q$flag/;
        usage("unknown flag: '$flag'") unless 'HhPpVv' =~ /\Q$flag/;
        warn "$0: '$flag' flag already set\n" if $opt{$flag}++;
    } 
    shift;
}

$opt{p}++ if $opt{P};
$opt{v}++ if $opt{V};

my $pass__total = 0;
my $error_total = 0;
my $tests_total = 0;

!NO!SUBS!

# We cannot merely check the variable '$^X' in general since on many 
# Unixes it is the basename rather than the full path to the perl binary.
my $perlpath = '';
if (defined($Config{'perlpath'})) { $perlpath = $Config{'perlpath'}; }

# The useithreads Config variable plays a role in whether or not
# threads and threads/shared work when C<use>d.  They apparently always
# get installed on systems that can run Configure.
my $useithreads = '';
if (defined($Config{'useithreads'})) { $useithreads = $Config{'useithreads'}; }

print OUT <<"!GROK!THIS!";
my \$perlpath = '$perlpath';
my \$useithreads = '$useithreads';
!GROK!THIS!

print OUT <<'!NO!SUBS!';

print "## Checking Perl binary via variable '\$perlpath' = $perlpath.\n" if $opt{'p'};

my $label = 'Executable perl binary';

if (-x $perlpath) {
    print "## Perl binary '$perlpath' appears executable.\n" if $opt{'v'};
    print "ok 1 $label\n";
    $pass__total++;
}
else {
    print "# Perl binary '$perlpath' does not appear executable.\n";
    print "not ok 1 $label\n";
    $error_total++;
}
$tests_total++;


print "## Checking Perl version via variable '\$]'.\n" if $opt{'p'};

!NO!SUBS!

print OUT <<"!GROK!THIS!";
my \$ivp_VERSION = "$]";

!GROK!THIS!
print OUT <<'!NO!SUBS!';

$label = 'Perl version correct';
if ($ivp_VERSION eq $]) {
    print "## Perl version '$]' appears installed as expected.\n" if $opt{'v'};
    print "ok 2 $label\n";
    $pass__total++;
}
else {
    print "# Perl version '$]' installed, expected $ivp_VERSION.\n";
    print "not ok 2 $label\n";
    $error_total++;
}
$tests_total++;

# We have the right perl and version, so now reset @@INC so we ignore
# PERL5LIB and '.'
{
    local $ENV{PERL5LIB};
    my $perl_V = qx($perlpath -V);
    $perl_V =~ s{.*\@@INC:\n}{}ms;
    @@INC = grep { length && $_ ne '.' } split ' ', $perl_V;
}

print "## Checking roots of the Perl library directory tree via variable '\@@INC'.\n" if $opt{'p'};

my $INC_total = 0;
my $INC_there = 0;
foreach (@@INC) {
    next if $_ eq '.'; # skip -d test here
    if (-d $_) {
        print "## Perl \@@INC directory '$_' exists.\n" if $opt{'v'};
        $INC_there++;
    }
    else {
        print "# Perl \@@INC directory '$_' does not appear to exist.\n";
    }
    $INC_total++;
}

$label = '@@INC directoreis exist';
if ($INC_total == $INC_there) {
    print "ok 3 $label\n";
    $pass__total++;
}
else {
    print "not ok 3 $label\n";
    $error_total++;
}
$tests_total++;


print "## Checking installations of modules necessary for ivp.\n" if $opt{'p'};

my $needed_total = 0;
my $needed_there = 0;
foreach (qw(Config.pm ExtUtils/Installed.pm)) {
    $@@ = undef;
    $needed_total++;
    eval "require \"$_\";";
    if (!$@@) {
        print "## Module '$_' appears to be installed.\n" if $opt{'v'};
        $needed_there++;
    }
    else {
        print "# Needed module '$_' does not appear to be properly installed.\n";
    }
    $@@ = undef;
}
$label = 'Modules needed for rest of perlivp exist';
if ($needed_total == $needed_there) {
    print "ok 4 $label\n";
    $pass__total++;
}
else {
    print "not ok 4 $label\n";
    $error_total++;
}
$tests_total++;


print "## Checking installations of extensions built with perl.\n" if $opt{'p'};

use Config;

my $extensions_total = 0;
my $extensions_there = 0;
if (defined($Config{'extensions'})) {
    my @@extensions = split(/\s+/,$Config{'extensions'});
    foreach (@@extensions) {
        next if ($_ eq '');
        if ( $useithreads !~ /define/i ) {
            next if ($_ eq 'threads');
            next if ($_ eq 'threads/shared');
        }
        # that's a distribution name, not a module name
        next if $_ eq 'IO/Compress';
        next if $_ eq 'Devel/DProf';
        next if $_ eq 'libnet';
        next if $_ eq 'Locale/Codes';
        next if $_ eq 'podlators';
        next if $_ eq 'perlfaq';
        # test modules
        next if $_ eq 'XS/APItest';
        next if $_ eq 'XS/Typemap';
           # VMS$ perl  -e "eval ""require \""Devel/DProf.pm\"";"" print $@@"
           # \NT> perl  -e "eval \"require 'Devel/DProf.pm'\"; print $@@"
           # DProf: run perl with -d to use DProf.
           # Compilation failed in require at (eval 1) line 1.
        eval " require \"$_.pm\"; ";
        if (!$@@) {
            print "## Module '$_' appears to be installed.\n" if $opt{'v'};
            $extensions_there++;
        }
        else {
            print "# Required module '$_' does not appear to be properly installed.\n";
            $@@ = undef;
        }
        $extensions_total++;
    }

    # A silly name for a module (that hopefully won't ever exist).
    # Note that this test serves more as a check of the validity of the
    # actual required module tests above.
    my $unnecessary = 'bLuRfle';

    if (!grep(/$unnecessary/, @@extensions)) {
        $@@ = undef;
        eval " require \"$unnecessary.pm\"; ";
        if ($@@) {
            print "## Unnecessary module '$unnecessary' does not appear to be installed.\n" if $opt{'v'};
        }
        else {
            print "# Unnecessary module '$unnecessary' appears to be installed.\n";
            $extensions_there++;
        }
    }
    $@@ = undef;
}
$label = 'All (and only) expected extensions installed';
if ($extensions_total == $extensions_there) {
    print "ok 5 $label\n";
    $pass__total++;
}
else {
    print "not ok 5 $label\n";
    $error_total++;
}
$tests_total++;


print "## Checking installations of later additional extensions.\n" if $opt{'p'};

use ExtUtils::Installed;

my $installed_total = 0;
my $installed_there = 0;
my $version_check = 0;
my $installed = ExtUtils::Installed -> new();
my @@modules = $installed -> modules();
my @@missing = ();
my $version = undef;
for (@@modules) {
    $installed_total++;
    # Consider it there if it contains one or more files,
    # and has zero missing files,
    # and has a defined version
    $version = undef;
    $version = $installed -> version($_);
    if ($version) {
        print "## $_; $version\n" if $opt{'v'};
        $version_check++;
    }
    else {
        print "# $_; NO VERSION\n" if $opt{'v'};
    }
    $version = undef;
    @@missing = ();
    @@missing = $installed -> validate($_);

    # .bs files are optional
    @@missing = grep { ! /\.bs$/ } @@missing;
    # man files are often compressed
    @@missing = grep { ! ( -s "$_.gz" || -s "$_.bz2" ) } @@missing;

    if ($#missing >= 0) {
        print "# file",+($#missing == 0) ? '' : 's'," missing from installation:\n";
        print '# ',join(' ',@@missing),"\n";
    }
    elsif ($#missing == -1) {
        $installed_there++;
    }
    @@missing = ();
}
$label = 'Module files correctly installed';
if (($installed_total == $installed_there) && 
    ($installed_total == $version_check)) {
    print "ok 6 $label\n";
    $pass__total++;
}
else {
    print "not ok 6 $label\n";
    $error_total++;
}
$tests_total++;

# Final report (rather than feed ousrselves to Test::Harness::runtests()
# we simply format some output on our own to keep things simple and
# easier to "fix" - at least for now.

if ($error_total == 0 && $tests_total) {
    print "All tests successful.\n";
} elsif ($tests_total==0){
        die "FAILED--no tests were run for some reason.\n";
} else {
    my $rate = 0.0;
    if ($tests_total > 0) { $rate = sprintf "%.2f", 100.0 * ($pass__total / $tests_total); }
    printf " %d/%d subtests failed, %.2f%% okay.\n",
                              $error_total, $tests_total, $rate;
}

=head1 NAME

perlivp - Perl Installation Verification Procedure

=head1 SYNOPSIS

B<perlivp> [B<-p>] [B<-v>] [B<-h>]

=head1 DESCRIPTION

The B<perlivp> program is set up at Perl source code build time to test the
Perl version it was built under.  It can be used after running:

    make install

(or your platform's equivalent procedure) to verify that B<perl> and its
libraries have been installed correctly.  A correct installation is verified
by output that looks like:

    ok 1
    ok 2

etc.

=head1 OPTIONS

=over 5

=item B<-h> help

Prints out a brief help message.

=item B<-p> print preface

Gives a description of each test prior to performing it.

=item B<-v> verbose

Gives more detailed information about each test, after it has been performed.
Note that any failed tests ought to print out some extra information whether
or not -v is thrown.

=back

=head1 DIAGNOSTICS

=over 4

=item * print "# Perl binary '$perlpath' does not appear executable.\n";

Likely to occur for a perl binary that was not properly installed.
Correct by conducting a proper installation.

=item * print "# Perl version '$]' installed, expected $ivp_VERSION.\n";

Likely to occur for a perl that was not properly installed.
Correct by conducting a proper installation.

=item * print "# Perl \@@INC directory '$_' does not appear to exist.\n";

Likely to occur for a perl library tree that was not properly installed.
Correct by conducting a proper installation.

=item * print "# Needed module '$_' does not appear to be properly installed.\n";

One of the two modules that is used by perlivp was not present in the 
installation.  This is a serious error since it adversely affects perlivp's
ability to function.  You may be able to correct this by performing a
proper perl installation.

=item * print "# Required module '$_' does not appear to be properly installed.\n";

An attempt to C<eval "require $module"> failed, even though the list of 
extensions indicated that it should succeed.  Correct by conducting a proper 
installation.

=item * print "# Unnecessary module 'bLuRfle' appears to be installed.\n";

This test not coming out ok could indicate that you have in fact installed 
a bLuRfle.pm module or that the C<eval " require \"$module_name.pm\"; ">
test may give misleading results with your installation of perl.  If yours
is the latter case then please let the author know.

=item * print "# file",+($#missing == 0) ? '' : 's'," missing from installation:\n";

One or more files turned up missing according to a run of 
C<ExtUtils::Installed -E<gt> validate()> over your installation.
Correct by conducting a proper installation.

=back

For further information on how to conduct a proper installation consult the 
INSTALL file that comes with the perl source and the README file for your 
platform.

=head1 AUTHOR

Peter Prymmer

=cut

!NO!SUBS!

close OUT or die "Can't close $file: $!";
chmod 0755, $file or die "Can't reset permissions for $file: $!\n";
exec("$Config{'eunicefix'} $file") if $Config{'eunicefix'} ne ':';
chdir $origdir;

@


1.1
log
@Initial revision
@
text
@d36 2
d42 1
a42 2
# perlivp V 0.02

d70 2
a71 2
        usage("unknown flag: `$flag'") unless 'HhPpVv' =~ /\Q$flag/;
        warn "$0: `$flag' flag already set\n" if $opt{$flag}++;
d85 1
a85 1
# We cannot merely check the variable `$^X' in general since on many 
a88 2
# Of course some platforms are distinct...
if ($^O eq 'VMS') { $perlpath = $^X; }
d103 3
a105 1
print "## Checking Perl binary via variable `\$perlpath' = $perlpath.\n" if $opt{'p'};
d108 2
a109 2
    print "## Perl binary `$perlpath' appears executable.\n" if $opt{'v'};
    print "ok 1\n";
d113 2
a114 2
    print "# Perl binary `$perlpath' does not appear executable.\n";
    print "not ok 1\n";
d120 1
a120 1
print "## Checking Perl version via variable `\$]'.\n" if $opt{'p'};
d125 1
a125 1
my \$ivp_VERSION = $];
d129 5
a133 3
if ($ivp_VERSION == $]) {
    print "## Perl version `$]' appears installed as expected.\n" if $opt{'v'};
    print "ok 2\n";
d137 2
a138 2
    print "# Perl version `$]' installed, expected $ivp_VERSION.\n";
    print "not ok 2\n";
d143 8
d152 1
a152 1
print "## Checking roots of the Perl library directory tree via variable `\@@INC'.\n" if $opt{'p'};
a157 4
    if ($^O eq 'MacOS') {
        next if $_ eq ':'; # skip -d test here
        next if $_ eq 'Dev:Pseudo:'; # why is this in @@INC?
    }
d159 1
a159 1
        print "## Perl \@@INC directory `$_' exists.\n" if $opt{'v'};
d163 1
a163 1
        print "# Perl \@@INC directory `$_' does not appear to exist.\n";
d167 2
d170 1
a170 1
    print "ok 3\n";
d174 1
a174 1
    print "not ok 3\n";
d189 1
a189 1
        print "## Module `$_' appears to be installed.\n" if $opt{'v'};
d193 1
a193 1
        print "# Needed module `$_' does not appear to be properly installed.\n";
d197 1
d199 1
a199 1
    print "ok 4\n";
d203 1
a203 1
    print "not ok 4\n";
d223 10
a232 1
        next if ($_ eq 'Devel/DProf'); 
d239 1
a239 1
            print "## Module `$_' appears to be installed.\n" if $opt{'v'};
d243 1
a243 1
            print "# Required module `$_' does not appear to be properly installed.\n";
d251 1
a251 1
    # actuall required module tests above.
d258 1
a258 1
            print "## Unnecessary module `$unnecessary' does not appear to be installed.\n" if $opt{'v'};
d261 1
a261 1
            print "# Unnecessary module `$unnecessary' appears to be installed.\n";
d267 1
d269 1
a269 1
    print "ok 5\n";
d273 1
a273 1
    print "not ok 5\n";
d307 6
d322 1
d325 1
a325 52
    print "ok 6\n";
    $pass__total++;
}
else {
    print "not ok 6\n";
    $error_total++;
}
$tests_total++;


print "## Checking installations of *.h -> *.ph header files.\n" if $opt{'p'};
my $ph_there = 0;
my $var = undef;
my $val = undef;
my $h_file = undef;
# Just about "any" C implementation ought to have a stdio.h (even if 
# Config.pm may not list a i_stdio var).
my @@ph_files = qw(stdio.ph);
# Add the ones that we know that perl thinks are there:
while (($var, $val) = each %Config) {
    if ($var =~ m/i_(.+)/ && $val eq 'define') {
        $h_file = $1;
	# Some header and symbol names don't match for hysterical raisins.
	$h_file = 'arpa/inet'    if $h_file eq 'arpainet';
	$h_file = 'netinet/in'   if $h_file eq 'niin';
	$h_file = 'netinet/tcp'  if $h_file eq 'netinettcp';
	$h_file = 'sys/resource' if $h_file eq 'sysresrc';
	$h_file = 'sys/select'   if $h_file eq 'sysselct';
	$h_file = 'sys/security' if $h_file eq 'syssecrt';
        $h_file = 'rpcsvc/dbm'   if $h_file eq 'rpcsvcdbm';
        # This ought to distinguish syslog from sys/syslog.
        # (NB syslog.ph is heavily used for the DBI pre-requisites).
        $h_file =~ s{^sys(\w.+)}{sys/$1} unless $h_file eq 'syslog';
        push(@@ph_files, "$h_file.ph");
    }
}
#foreach (qw(stdio.ph syslog.ph)) {
foreach (@@ph_files) {
    $@@ = undef;
    eval "require \"$_\";";
    if (!$@@) {
        print "## Perl header `$_' appears to be installed.\n" if $opt{'v'};
        $ph_there++;
    }
    else {
        print "# Perl header `$_' does not appear to be properly installed.\n";
    }
    $@@ = undef;
}

if (scalar(@@ph_files) == $ph_there) {
    print "ok 7\n";
d329 1
a329 1
    print "not ok 7\n";
d351 1
a351 1
B<perlivp> - Perl Installation Verification Procedure
d397 1
a397 1
=item * print "# Perl binary `$perlpath' does not appear executable.\n";
d402 1
a402 1
=item * print "# Perl version `$]' installed, expected $ivp_VERSION.\n";
d407 1
a407 1
=item * print "# Perl \@@INC directory `$_' does not appear to exist.\n";
d412 1
a412 1
=item * print "# Needed module `$_' does not appear to be properly installed.\n";
d419 1
a419 1
=item * print "# Required module `$_' does not appear to be properly installed.\n";
d425 1
a425 1
=item * print "# Unnecessary module `bLuRfle' appears to be installed.\n";
a436 5

=item * print "# Perl header `$_' does not appear to be properly installed.\n";

Correct by running B<h2ph> over your system's C header files.  If necessary, 
edit the resulting *.ph files to eliminate perl syntax errors.
@


1.1.1.1
log
@stock perl 5.8.0 from CPAN
@
text
@@


1.1.1.2
log
@perl 5.8.2 from CPAN
@
text
@d88 2
@


1.1.1.3
log
@Import of stock perl 5.8.5
@
text
@d126 1
a126 1
if ($ivp_VERSION eq $]) {
@


1.1.1.4
log
@perl 5.8.8 import
@
text
@d48 1
a48 1
    $0 [-a] [-p] [-v] | [-h]
a49 1
    -a Run all tests (default is to skip .ph tests)
d69 1
a69 1
        usage("unknown flag: `$flag'") unless 'HhPpVva' =~ /\Q$flag/;
a305 1
if ($opt{'a'}) {
a354 4
}
else {
    print "##  Skip checking of *.ph header files.\n" if $opt{'p'};
}
d373 1
a373 1
perlivp - Perl Installation Verification Procedure
d377 1
a377 1
B<perlivp> [B<-a>] [B<-p>] [B<-v>] [B<-h>]
a401 5

=item B<-a> run all tests

Normally tests for optional features are skipped.  With -a all tests
are executed.
@


1.1.1.5
log
@import perl 5.10.0 from CPAN
@
text
@a35 2
print OUT "\n# perlivp $^V\n";

d40 3
d123 1
a123 1
my \$ivp_VERSION = "$]";
d212 1
a212 6
	# that's a distribution name, not a module name
	next if /^IO_Compress_(?:Zlib|Base)$/;
        next if $_ eq 'Devel/DProf'; 
	# test modules
	next if $_ eq 'XS/APItest';
	next if $_ eq 'XS/Typemap';
a285 6

    # .bs files are optional
    @@missing = grep { ! /\.bs$/ } @@missing;
    # man files are often compressed
    @@missing = grep { ! ( -s "$_.gz" || -s "$_.bz2" ) } @@missing;

@


1.1.1.6
log
@import perl 5.10.1
@
text
@d211 2
a212 2
        # that's a distribution name, not a module name
        next if $_ eq 'IO/Compress';
d214 3
a216 3
        # test modules
        next if $_ eq 'XS/APItest';
        next if $_ eq 'XS/Typemap';
@


1.1.1.7
log
@Perl 5.12.2 from CPAN
@
text
@d213 1
a213 4
        next if $_ eq 'Devel/DProf';
        next if $_ eq 'libnet';
        next if $_ eq 'Locale/Codes';
        next if $_ eq 'podlators';
a215 1
        next if $_ eq 'XS/APItest/KeywordRPN';
@


1.1.1.8
log
@import perl 5.16.3 from CPAN - worked on by Andrew Fresh and myself
@
text
@d47 1
a47 1
    $0 [-p] [-v] | [-h]
d49 1
d69 2
a70 2
        usage("unknown flag: '$flag'") unless 'HhPpVv' =~ /\Q$flag/;
        warn "$0: '$flag' flag already set\n" if $opt{$flag}++;
d84 1
a84 1
# We cannot merely check the variable '$^X' in general since on many 
d102 1
a102 3
print "## Checking Perl binary via variable '\$perlpath' = $perlpath.\n" if $opt{'p'};

my $label = 'Executable perl binary';
d105 2
a106 2
    print "## Perl binary '$perlpath' appears executable.\n" if $opt{'v'};
    print "ok 1 $label\n";
d110 2
a111 2
    print "# Perl binary '$perlpath' does not appear executable.\n";
    print "not ok 1 $label\n";
d117 1
a117 1
print "## Checking Perl version via variable '\$]'.\n" if $opt{'p'};
a125 2

$label = 'Perl version correct';
d127 2
a128 2
    print "## Perl version '$]' appears installed as expected.\n" if $opt{'v'};
    print "ok 2 $label\n";
d132 2
a133 2
    print "# Perl version '$]' installed, expected $ivp_VERSION.\n";
    print "not ok 2 $label\n";
a137 8
# We have the right perl and version, so now reset @@INC so we ignore
# PERL5LIB and '.'
{
    local $ENV{PERL5LIB};
    my $perl_V = qx($perlpath -V);
    $perl_V =~ s{.*\@@INC:\n}{}ms;
    @@INC = grep { length && $_ ne '.' } split ' ', $perl_V;
}
d139 1
a139 1
print "## Checking roots of the Perl library directory tree via variable '\@@INC'.\n" if $opt{'p'};
d145 4
d150 1
a150 1
        print "## Perl \@@INC directory '$_' exists.\n" if $opt{'v'};
d154 1
a154 1
        print "# Perl \@@INC directory '$_' does not appear to exist.\n";
a157 2

$label = '@@INC directoreis exist';
d159 1
a159 1
    print "ok 3 $label\n";
d163 1
a163 1
    print "not ok 3 $label\n";
d178 1
a178 1
        print "## Module '$_' appears to be installed.\n" if $opt{'v'};
d182 1
a182 1
        print "# Needed module '$_' does not appear to be properly installed.\n";
a185 1
$label = 'Modules needed for rest of perlivp exist';
d187 1
a187 1
    print "ok 4 $label\n";
d191 1
a191 1
    print "not ok 4 $label\n";
a216 1
        next if $_ eq 'perlfaq';
d219 1
d227 1
a227 1
            print "## Module '$_' appears to be installed.\n" if $opt{'v'};
d231 1
a231 1
            print "# Required module '$_' does not appear to be properly installed.\n";
d239 1
a239 1
    # actual required module tests above.
d246 1
a246 1
            print "## Unnecessary module '$unnecessary' does not appear to be installed.\n" if $opt{'v'};
d249 1
a249 1
            print "# Unnecessary module '$unnecessary' appears to be installed.\n";
a254 1
$label = 'All (and only) expected extensions installed';
d256 1
a256 1
    print "ok 5 $label\n";
d260 1
a260 1
    print "not ok 5 $label\n";
a308 1
$label = 'Module files correctly installed';
d311 1
a311 1
    print "ok 6 $label\n";
d315 1
a315 1
    print "not ok 6 $label\n";
d320 56
d397 1
a397 1
B<perlivp> [B<-p>] [B<-v>] [B<-h>]
d423 5
d444 1
a444 1
=item * print "# Perl binary '$perlpath' does not appear executable.\n";
d449 1
a449 1
=item * print "# Perl version '$]' installed, expected $ivp_VERSION.\n";
d454 1
a454 1
=item * print "# Perl \@@INC directory '$_' does not appear to exist.\n";
d459 1
a459 1
=item * print "# Needed module '$_' does not appear to be properly installed.\n";
d466 1
a466 1
=item * print "# Required module '$_' does not appear to be properly installed.\n";
d472 1
a472 1
=item * print "# Unnecessary module 'bLuRfle' appears to be installed.\n";
d484 5
@


1.1.1.9
log
@Import perl-5.24.2
@
text
@a41 2
BEGIN { pop @@INC if $INC[-1] eq '.' }

@


1.1.1.8.10.1
log
@Patch perl CVE-2016-1238

The problem relates to Perl 5 ("perl") loading modules from the
includes directory array ("@@INC") in which the last element is the
current directory (".").  That means that, when "perl" wants to
load a module (during first compilation or during lazy loading of
a module in run-time), perl will look for the module in the current
directory at the end, since '.' is the last include directory in
its array of include directories to seek. The issue is with requiring
libraries that are in "." but are not otherwise installed.

The major problem with this behavior is that it unexpectedly puts
a user at risk whenever they execute any Perl scripts from a directory
that is writable by other accounts on the system. For instance, if
a user is logged in as root and changes directory into /tmp or an
account's home directory, it is possible to now run any shell
commands that are written in C, Python or Ruby without fear.

The same isn't true for any shell commands that are written in Perl,
since a significant proportion of Perl scripts will execute code
in the current working directory whenever they are run. For example,
if a user on a shared system creates the file /tmp/Pod/Perldoc/Toterm.pm,
and then I log in as root, change directory to /tmp, and run "perldoc
perlrun", it will execute the code they have placed in the file.
@
text
@a41 2
BEGIN { pop @@INC if $INC[-1] eq '.' }

@


1.1.1.8.12.1
log
@Patch perl CVE-2016-1238

The problem relates to Perl 5 ("perl") loading modules from the
includes directory array ("@@INC") in which the last element is the
current directory (".").  That means that, when "perl" wants to
load a module (during first compilation or during lazy loading of
a module in run-time), perl will look for the module in the current
directory at the end, since '.' is the last include directory in
its array of include directories to seek. The issue is with requiring
libraries that are in "." but are not otherwise installed.

The major problem with this behavior is that it unexpectedly puts
a user at risk whenever they execute any Perl scripts from a directory
that is writable by other accounts on the system. For instance, if
a user is logged in as root and changes directory into /tmp or an
account's home directory, it is possible to now run any shell
commands that are written in C, Python or Ruby without fear.

The same isn't true for any shell commands that are written in Perl,
since a significant proportion of Perl scripts will execute code
in the current working directory whenever they are run. For example,
if a user on a shared system creates the file /tmp/Pod/Perldoc/Toterm.pm,
and then I log in as root, change directory to /tmp, and run "perldoc
perlrun", it will execute the code they have placed in the file.
@
text
@a41 2
BEGIN { pop @@INC if $INC[-1] eq '.' }

@


