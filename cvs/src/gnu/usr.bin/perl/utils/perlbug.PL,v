head	1.22;
access;
symbols
	OPENBSD_6_1:1.22.0.4
	OPENBSD_6_1_BASE:1.22
	OPENBSD_6_0:1.20.0.4
	OPENBSD_6_0_BASE:1.20
	OPENBSD_5_9:1.19.0.2
	OPENBSD_5_9_BASE:1.19
	OPENBSD_5_8:1.19.0.4
	OPENBSD_5_8_BASE:1.19
	PERL_5_20_2:1.1.1.14
	OPENBSD_5_7:1.17.0.2
	OPENBSD_5_7_BASE:1.17
	PERL_5_20_1:1.1.1.14
	OPENBSD_5_6:1.15.0.4
	OPENBSD_5_6_BASE:1.15
	PERL_5_18_2:1.1.1.13
	PERL:1.1.1
	OPENBSD_5_5:1.14.0.6
	OPENBSD_5_5_BASE:1.14
	OPENBSD_5_4:1.14.0.2
	OPENBSD_5_4_BASE:1.14
	PERL_5_16_3:1.1.1.12
	OPENBSD_5_3:1.13.0.10
	OPENBSD_5_3_BASE:1.13
	OPENBSD_5_2:1.13.0.8
	OPENBSD_5_2_BASE:1.13
	OPENBSD_5_1_BASE:1.13
	OPENBSD_5_1:1.13.0.6
	OPENBSD_5_0:1.13.0.4
	OPENBSD_5_0_BASE:1.13
	OPENBSD_4_9:1.13.0.2
	OPENBSD_4_9_BASE:1.13
	PERL_5_12_2:1.1.1.11
	OPENBSD_4_8:1.12.0.4
	OPENBSD_4_8_BASE:1.12
	OPENBSD_4_7:1.12.0.2
	OPENBSD_4_7_BASE:1.12
	PERL_5_10_1:1.1.1.10
	OPENBSD_4_6:1.10.0.6
	OPENBSD_4_6_BASE:1.10
	OPENBSD_4_5:1.10.0.2
	OPENBSD_4_5_BASE:1.10
	PERL_5_10_0:1.1.1.9
	OPENBSD_4_4:1.9.0.10
	OPENBSD_4_4_BASE:1.9
	OPENBSD_4_3:1.9.0.8
	OPENBSD_4_3_BASE:1.9
	OPENBSD_4_2:1.9.0.6
	OPENBSD_4_2_BASE:1.9
	OPENBSD_4_1:1.9.0.4
	OPENBSD_4_1_BASE:1.9
	OPENBSD_4_0:1.9.0.2
	OPENBSD_4_0_BASE:1.9
	PERL_5_8_8:1.1.1.8
	OPENBSD_3_9:1.8.0.8
	OPENBSD_3_9_BASE:1.8
	OPENBSD_3_8:1.8.0.6
	OPENBSD_3_8_BASE:1.8
	OPENBSD_3_7:1.8.0.4
	OPENBSD_3_7_BASE:1.8
	PERL_5_8_6:1.1.1.7
	OPENBSD_3_6:1.8.0.2
	OPENBSD_3_6_BASE:1.8
	PERL_5_8_5:1.1.1.7
	PERL_5_8_3:1.1.1.6
	OPENBSD_3_5:1.7.0.2
	OPENBSD_3_5_BASE:1.7
	PERL_5_8_2:1.1.1.6
	OPENBSD_3_4:1.6.0.4
	OPENBSD_3_4_BASE:1.6
	OPENBSD_3_3:1.6.0.2
	OPENBSD_3_3_BASE:1.6
	PERL_5_8_0:1.1.1.5
	OPENBSD_3_2:1.5.0.6
	OPENBSD_3_2_BASE:1.5
	OPENBSD_3_1:1.5.0.4
	OPENBSD_3_1_BASE:1.5
	OPENBSD_3_0:1.5.0.2
	OPENBSD_3_0_BASE:1.5
	PERL_5_6_1:1.1.1.4
	OPENBSD_2_9:1.4.0.6
	OPENBSD_2_9_BASE:1.4
	OPENBSD_2_8:1.4.0.4
	OPENBSD_2_8_BASE:1.4
	OPENBSD_2_7:1.4.0.2
	OPENBSD_2_7_BASE:1.4
	PERL_5_6_0:1.1.1.3
	OPENBSD_2_6:1.3.0.2
	OPENBSD_2_6_BASE:1.3
	PERL_500503:1.1.1.2
	CPAN:1.1.1
	OPENBSD_2_5:1.2.0.6
	OPENBSD_2_5_BASE:1.2
	OPENBSD_2_4:1.2.0.4
	OPENBSD_2_4_BASE:1.2
	OPENBSD_2_3:1.2.0.2
	OPENBSD_2_3_BASE:1.2
	OPENBSD_2_2:1.1.1.1.0.6
	OPENBSD_2_2_BASE:1.1.1.1
	OPENBSD_2_1:1.1.1.1.0.4
	OPENBSD_2_1_BASE:1.1.1.1
	OPENBSD_2_0:1.1.1.1.0.2
	OPENBSD_2_0_BASE:1.1.1.1
	perl5003:1.1.1.1
	lwall:1.1.1;
locks; strict;
comment	@# @;
expand	@o@;


1.22
date	2017.02.05.00.33.41;	author afresh1;	state Exp;
branches;
next	1.21;
commitid	7JLVNm1wwPgqSqTa;

1.21
date	2017.02.05.00.32.21;	author afresh1;	state Exp;
branches;
next	1.20;
commitid	cxJ08BvJA9Pt2PTM;

1.20
date	2016.07.25.10.53.04;	author afresh1;	state Exp;
branches;
next	1.19;
commitid	FHUgABTHZQuYQh2B;

1.19
date	2015.04.25.19.26.23;	author afresh1;	state Exp;
branches
	1.19.2.1
	1.19.4.1;
next	1.18;
commitid	3qGYFVvfrExB70FB;

1.18
date	2015.04.25.19.14.49;	author afresh1;	state Exp;
branches;
next	1.17;
commitid	XRK22kO4se3v2i2I;

1.17
date	2014.11.17.21.01.01;	author afresh1;	state Exp;
branches;
next	1.16;
commitid	LnErp1MFKSuew5Fr;

1.16
date	2014.11.17.20.57.08;	author afresh1;	state Exp;
branches;
next	1.15;
commitid	QP75iYx42Uo7mMxO;

1.15
date	2014.03.24.15.05.33;	author afresh1;	state Exp;
branches;
next	1.14;

1.14
date	2013.03.25.20.41.00;	author sthen;	state Exp;
branches;
next	1.13;

1.13
date	2010.09.24.15.07.10;	author millert;	state Exp;
branches;
next	1.12;

1.12
date	2009.10.13.16.46.05;	author millert;	state Exp;
branches;
next	1.11;

1.11
date	2009.10.12.18.30.28;	author millert;	state Exp;
branches;
next	1.10;

1.10
date	2008.09.29.17.36.20;	author millert;	state Exp;
branches;
next	1.9;

1.9
date	2006.03.28.19.23.13;	author millert;	state Exp;
branches;
next	1.8;

1.8
date	2004.08.09.18.10.32;	author millert;	state Exp;
branches;
next	1.7;

1.7
date	2003.12.03.03.02.50;	author millert;	state Exp;
branches;
next	1.6;

1.6
date	2002.10.27.22.25.38;	author millert;	state Exp;
branches;
next	1.5;

1.5
date	2001.05.24.18.36.27;	author millert;	state Exp;
branches;
next	1.4;

1.4
date	2000.04.06.17.08.42;	author millert;	state Exp;
branches;
next	1.3;

1.3
date	99.04.29.22.52.43;	author millert;	state Exp;
branches;
next	1.2;

1.2
date	97.11.30.08.06.03;	author millert;	state Exp;
branches;
next	1.1;

1.1
date	96.08.19.10.13.25;	author downsj;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	96.08.19.10.13.25;	author downsj;	state Exp;
branches;
next	1.1.1.2;

1.1.1.2
date	99.04.29.22.41.57;	author millert;	state Exp;
branches;
next	1.1.1.3;

1.1.1.3
date	2000.04.06.16.10.57;	author millert;	state Exp;
branches;
next	1.1.1.4;

1.1.1.4
date	2001.05.24.18.26.12;	author millert;	state Exp;
branches;
next	1.1.1.5;

1.1.1.5
date	2002.10.27.22.15.11;	author millert;	state Exp;
branches;
next	1.1.1.6;

1.1.1.6
date	2003.12.03.02.44.34;	author millert;	state Exp;
branches;
next	1.1.1.7;

1.1.1.7
date	2004.08.09.17.48.38;	author millert;	state Exp;
branches;
next	1.1.1.8;

1.1.1.8
date	2006.03.28.18.49.50;	author millert;	state Exp;
branches;
next	1.1.1.9;

1.1.1.9
date	2008.09.29.17.19.03;	author millert;	state Exp;
branches;
next	1.1.1.10;

1.1.1.10
date	2009.10.12.18.10.47;	author millert;	state Exp;
branches;
next	1.1.1.11;

1.1.1.11
date	2010.09.24.14.49.14;	author millert;	state Exp;
branches;
next	1.1.1.12;

1.1.1.12
date	2013.03.25.20.09.39;	author sthen;	state Exp;
branches;
next	1.1.1.13;

1.1.1.13
date	2014.03.24.14.59.11;	author afresh1;	state Exp;
branches;
next	1.1.1.14;

1.1.1.14
date	2014.11.17.20.53.19;	author afresh1;	state Exp;
branches;
next	;
commitid	B31cAbBIXiCqnL97;

1.19.2.1
date	2016.08.05.01.01.40;	author afresh1;	state Exp;
branches;
next	;
commitid	HjAJx2yjL4A8HWon;

1.19.4.1
date	2016.08.05.01.00.56;	author afresh1;	state Exp;
branches;
next	;
commitid	wK3bUiy9jNch0Key;


desc
@@


1.22
log
@Apply local patches - perl-5.24.1
@
text
@#!/usr/local/bin/perl

use Config;
use File::Basename qw(&basename &dirname);
use Cwd;
use File::Spec::Functions;

# List explicitly here the variables you want Configure to
# generate.  Metaconfig only looks for shell variables, so you
# have to mention them as if they were shell variables, not
# %Config entries.  Thus you write
#  $startperl
# to ensure Configure will look for $Config{startperl}.
#  $perlpath

# This forces PL files to create target in same directory as PL file.
# This is so that make depend always knows where to find PL derivatives.
$origdir = cwd;
chdir dirname($0);
$file = basename($0, '.PL');
$file .= '.com' if $^O eq 'VMS';

open OUT, ">$file" or die "Can't create $file: $!";

# get patchlevel.h timestamp

-e catfile(updir, "patchlevel.h")
    or die "Can't find patchlevel.h: $!";

my $patchlevel_date = (stat _)[9];

# TO DO (perhaps): store/embed $Config::config_sh into perlbug. When perlbug is
# used, compare $Config::config_sh with the stored version. If they differ then
# append a list of individual differences to the bug report.


print "Extracting $file (with variable substitutions)\n";

# In this section, perl variables will be expanded during extraction.
# You can use $Config{...} to use Configure variables.

my $extract_version = sprintf("%vd", $^V);

print OUT <<"!GROK!THIS!";
$Config{startperl}
    eval 'exec $Config{perlpath} -S \$0 \${1+"\$@@"}'
	if \$running_under_some_shell;

my \$config_tag1 = '$extract_version - $Config{cf_time}';

my \$patchlevel_date = $patchlevel_date;
!GROK!THIS!

# In the following, perl variables are not expanded during extraction.

print OUT <<'!NO!SUBS!';
my @@patches = Config::local_patches();
my $patch_tags = join "", map /(\S+)/ ? "+$1 " : (), @@patches;

BEGIN { pop @@INC if $INC[-1] eq '.' }
use warnings;
use strict;
use Config;
use File::Spec;		# keep perlbug Perl 5.005 compatible
use Getopt::Std;
use File::Basename 'basename';

sub paraprint;

BEGIN {
    eval { require Mail::Send;};
    $::HaveSend = ($@@ eq "");
    eval { require Mail::Util; } ;
    $::HaveUtil = ($@@ eq "");
    # use secure tempfiles wherever possible
    eval { require File::Temp; };
    $::HaveTemp = ($@@ eq "");
    eval { require Module::CoreList; };
    $::HaveCoreList = ($@@ eq "");
};

my $Version = "1.40";

#TODO:
#       make sure failure (transmission-wise) of Mail::Send is accounted for.
#       (This may work now. Unsure of the original author's issue -JESSE 2008-06-08)
#       - Test -b option

my( $file, $usefile, $cc, $address, $bugaddress, $testaddress, $thanksaddress,
    $filename, $messageid, $domain, $subject, $from, $verbose, $ed, $outfile,
    $fh, $me, $body, $andcc, %REP, $ok, $thanks, $progname,
    $Is_MSWin32, $Is_Linux, $Is_VMS, $Is_OpenBSD,
    $report_about_module, $category, $severity,
    %opt, $have_attachment, $attachments, $has_patch, $mime_boundary
);

my $perl_version = $^V ? sprintf("%vd", $^V) : $];

my $config_tag2 = "$perl_version - $Config{cf_time}";

Init();

if ($opt{h}) { Help(); exit; }
if ($opt{d}) { Dump(*STDOUT); exit; }
if (!-t STDIN && !($ok and not $opt{n})) {
    paraprint <<"EOF";
Please use $progname interactively. If you want to
include a file, you can use the -f switch.
EOF
    die "\n";
}

Query();
Edit() unless $usefile || ($ok and not $opt{n});
NowWhat();
if ($outfile) {
    save_message_to_disk($outfile);
} else {
    Send();
    if ($thanks) {
	print "\nThank you for taking the time to send a thank-you message!\n\n";

	paraprint <<EOF
Please note that mailing lists are moderated, your message may take a while to
show up.
EOF
    } else {
	print "\nThank you for taking the time to file a bug report!\n\n";

	paraprint <<EOF
Please note that mailing lists are moderated, your message may take a while to
show up. If you do not receive an automated response acknowledging your message
within a few hours (check your SPAM folder and outgoing mail) please consider
sending an email directly from your mail client to perlbug\@@perl.org.
EOF
    }

}

exit;

sub ask_for_alternatives { # (category|severity)
    my $name = shift;
    my %alts = (
	'category' => {
	    'default' => 'core',
	    'ok'      => 'install',
	    # Inevitably some of these will end up in RT whatever we do:
	    'thanks'  => 'thanks',
	    'opts'    => [qw(core docs install library utilities)], # patch, notabug
	},
	'severity' => {
	    'default' => 'low',
	    'ok'      => 'none',
	    'thanks'  => 'none',
	    'opts'    => [qw(critical high medium low wishlist none)], # zero
	},
    );
    die "Invalid alternative ($name) requested\n" unless grep(/^$name$/, keys %alts);
    my $alt = "";
    my $what = $ok || $thanks;
    if ($what) {
	$alt = $alts{$name}{$what};
    } else {
 	my @@alts = @@{$alts{$name}{'opts'}};
    print "\n\n";
	paraprint <<EOF;
Please pick a $name from the following list:

    @@alts
EOF
	my $err = 0;
	do {
	    if ($err++ > 5) {
		die "Invalid $name: aborting.\n";
	    }
        $alt = _prompt('', "\u$name", $alts{$name}{'default'});
		$alt ||= $alts{$name}{'default'};
	} while !((($alt) = grep(/^$alt/i, @@alts)));
    }
    lc $alt;
}

sub Init {
    # -------- Setup --------

    $Is_MSWin32 = $^O eq 'MSWin32';
    $Is_VMS = $^O eq 'VMS';
    $Is_Linux = lc($^O) eq 'linux';
    $Is_OpenBSD = lc($^O) eq 'openbsd';

    if (!getopts("Adhva:s:b:f:F:r:e:SCc:to:n:T:p:", \%opt)) { Help(); exit; };

    # This comment is needed to notify metaconfig that we are
    # using the $perladmin, $cf_by, and $cf_time definitions.

    # -------- Configuration ---------

    # perlbug address
    $bugaddress = 'perlbug@@perl.org';

    # Test address
    $testaddress = 'perlbug-test@@perl.org';

    # Thanks address
    $thanksaddress = 'perl-thanks@@perl.org';

    if (basename ($0) =~ /^perlthanks/i) {
	# invoked as perlthanks
	$opt{T} = 1;
	$opt{C} = 1; # don't send a copy to the local admin
    }

    if ($opt{T}) {
	$thanks = 'thanks';
    }
    
    $progname = $thanks ? 'perlthanks' : 'perlbug';
    # Target address
    $address = $opt{a} || ($opt{t} ? $testaddress
			    : $thanks ? $thanksaddress : $bugaddress);

    # Users address, used in message and in From and Reply-To headers
    $from = $opt{r} || "";

    # Include verbose configuration information
    $verbose = $opt{v} || 0;

    # Subject of bug-report message
    $subject = $opt{s} || "";

    # Send a file
    $usefile = ($opt{f} || 0);

    # File to send as report
    $file = $opt{f} || "";

    # We have one or more attachments
    $have_attachment = ($opt{p} || 0);
    $mime_boundary = ('-' x 12) . "$Version.perlbug" if $have_attachment;

    # Comma-separated list of attachments
    $attachments = $opt{p} || "";
    $has_patch = 0; # TBD based on file type

    for my $attachment (split /\s*,\s*/, $attachments) {
        unless (-f $attachment && -r $attachment) {
            die "The attachment $attachment is not a readable file: $!\n";
        }
        $has_patch = 1 if $attachment =~ m/\.(patch|diff)$/;
    }

    # File to output to
    $outfile = $opt{F} || "";

    # Body of report
    $body = $opt{b} || "";
	
    # Editor
    $ed = $opt{e} || $ENV{VISUAL} || $ENV{EDITOR} || $ENV{EDIT}
	|| ($Is_VMS && "edit/tpu")
	|| ($Is_MSWin32 && "notepad")
	|| "vi";

    # Not OK - provide build failure template by finessing OK report
    if ($opt{n}) {
	if (substr($opt{n}, 0, 2) eq 'ok' )	{
	    $opt{o} = substr($opt{n}, 1);
	} else {
	    Help();
	    exit();
	}
    }

    # OK - send "OK" report for build on this system
    $ok = '';
    if ($opt{o}) {
	if ($opt{o} eq 'k' or $opt{o} eq 'kay') {
	    my $age = time - $patchlevel_date;
	    if ($opt{o} eq 'k' and $age > 60 * 24 * 60 * 60 ) {
		my $date = localtime $patchlevel_date;
		print <<"EOF";
"perlbug -ok" and "perlbug -nok" do not report on Perl versions which
are more than 60 days old.  This Perl version was constructed on
$date.  If you really want to report this, use
"perlbug -okay" or "perlbug -nokay".
EOF
		exit();
	    }
	    # force these options
	    unless ($opt{n}) {
		$opt{S} = 1; # don't prompt for send
		$opt{b} = 1; # we have a body
		$body = "Perl reported to build OK on this system.\n";
	    }
	    $opt{C} = 1; # don't send a copy to the local admin
	    $opt{s} = 1; # we have a subject line
	    $subject = ($opt{n} ? 'Not ' : '')
		    . "OK: perl $perl_version ${patch_tags}on"
		    ." $::Config{'archname'} $::Config{'osvers'} $subject";
	    $ok = 'ok';
	} else {
	    Help();
	    exit();
	}
    }

    # Possible administrator addresses, in order of confidence
    # (Note that cf_email is not mentioned to metaconfig, since
    # we don't really want it. We'll just take it if we have to.)
    #
    # This has to be after the $ok stuff above because of the way
    # that $opt{C} is forced.
    $cc = $opt{C} ? "" : (
	$opt{c} || $::Config{'perladmin'}
	|| $::Config{'cf_email'} || $::Config{'cf_by'}
    );

    if ($::HaveUtil) {
		$domain = Mail::Util::maildomain();
    } elsif ($Is_MSWin32) {
		$domain = $ENV{'USERDOMAIN'};
    } else {
		require Sys::Hostname;
		$domain = Sys::Hostname::hostname();
    }

    # Message-Id - rjsf
    $messageid = "<$::Config{'version'}_${$}_".time."\@@$domain>"; 

    # My username
    $me = $Is_MSWin32 ? $ENV{'USERNAME'}
	    : $^O eq 'os2' ? $ENV{'USER'} || $ENV{'LOGNAME'}
	    : eval { getpwuid($<) };	# May be missing

    $from = $::Config{'cf_email'}
       if !$from && $::Config{'cf_email'} && $::Config{'cf_by'} && $me &&
               ($me eq $::Config{'cf_by'});
} # sub Init

sub Query {
    # Explain what perlbug is
    unless ($ok) {
	if ($thanks) {
	    paraprint <<'EOF';
This program provides an easy way to send a thank-you message back to the
authors and maintainers of perl.

If you wish to submit a bug report, please run it without the -T flag.
EOF
	} else {
	    paraprint <<"EOF";
This program provides an easy way to create a message reporting a
bug in the core perl distribution (along with tests or patches)
to the volunteers who maintain perl at $address.  To send a thank-you
note to $thanksaddress instead of a bug report, please use the -T flag.

Please do not use $0 to send test messages, test whether perl
works, or to report bugs in perl modules from CPAN.

Suggestions for how to find help using Perl can be found at
http://perldoc.perl.org/perlcommunity.html
EOF
	}
    }

    # Prompt for subject of message, if needed
    
    if ($subject && TrivialSubject($subject)) {
	$subject = '';
    }

    unless ($subject) {
	    print 
"First of all, please provide a subject for the message.\n";
	if ( not $thanks)  {
	    paraprint <<EOF;
This should be a concise description of your bug or problem
which will help the volunteers working to improve perl to categorize
and resolve the issue.  Be as specific and descriptive as
you can. A subject like "perl bug" or "perl problem" will make it
much less likely that your issue gets the attention it deserves.
EOF
	}

	my $err = 0;
	do {
        $subject = _prompt('','Subject');
	    if ($err++ == 5) {
		if ($thanks) {
		    $subject = 'Thanks for Perl';
		} else {
		    die "Aborting.\n";
		}
	    }
	} while (TrivialSubject($subject));
    }
    $subject = '[PATCH] ' . $subject
        if $has_patch && ($subject !~ m/^\[PATCH/i);

    # Prompt for return address, if needed
    unless ($opt{r}) {
	# Try and guess return address
	my $guess;

	$guess = $ENV{'REPLY-TO'} || $ENV{'REPLYTO'} || $ENV{'EMAIL'}
	    || $from || '';

	unless ($guess) {
		# move $domain to where we can use it elsewhere	
        if ($domain) {
		if ($Is_VMS && !$::Config{'d_socket'}) {
		    $guess = "$domain\:\:$me";
		} else {
		    $guess = "$me\@@$domain" if $domain;
		}
	    }
	}

	if ($guess) {
	    unless ($ok) {
		paraprint <<EOF;
Perl's developers may need your email address to contact you for
further information about your issue or to inform you when it is
resolved.  If the default shown is not your email address, please
correct it.
EOF
	    }
	} else {
	    paraprint <<EOF;
Please enter your full internet email address so that Perl's
developers can contact you with questions about your issue or to
inform you that it has been resolved.
EOF
	}

	if ($ok && $guess) {
	    # use it
	    $from = $guess;
	} else {
	    # verify it
        $from = _prompt('','Your address',$guess);
	    $from = $guess if $from eq '';
	}
    }

    if ($from eq $cc or $me eq $cc) {
	# Try not to copy ourselves
	$cc = "yourself";
    }

    # Prompt for administrator address, unless an override was given
    if( !$opt{C} and !$opt{c} ) {
	my $description =  <<EOF;
$0 can send a copy of this report to your local perl
administrator.  If the address below is wrong, please correct it,
or enter 'none' or 'yourself' to not send a copy.
EOF
	my $entry = _prompt($description, "Local perl administrator", $cc);

	if ($entry ne "") {
	    $cc = $entry;
	    $cc = '' if $me eq $cc;
	}
    }

    $cc = '' if $cc =~ /^(none|yourself|me|myself|ourselves)$/i;
    if ($cc) { 
        $andcc = " and $cc" 
    } else {
        $andcc = ''
    }

    # Prompt for editor, if no override is given
editor:
    unless ($opt{e} || $opt{f} || $opt{b}) {

    my $description;

	chomp (my $common_end = <<"EOF");
You will probably want to use a text editor to enter the body of
your report. If "$ed" is the editor you want to use, then just press
Enter, otherwise type in the name of the editor you would like to
use.

If you have already composed the body of your report, you may enter
"file", and $0 will prompt you to enter the name of the file
containing your report.
EOF

	if ($thanks) {
	    $description = <<"EOF";
It's now time to compose your thank-you message.

Some information about your local perl configuration will automatically
be included at the end of your message, because we're curious about
the different ways that people build and use perl. If you'd rather
not share this information, you're welcome to delete it.

$common_end
EOF
	} else {
	    $description =  <<"EOF";
It's now time to compose your bug report. Try to make the report
concise but descriptive. Please include any detail which you think
might be relevant or might help the volunteers working to improve
perl. If you are reporting something that does not work as you think
it should, please try to include examples of the actual result and of
what you expected.

Some information about your local perl configuration will automatically
be included at the end of your report. If you are using an unusual
version of perl, it would be useful if you could confirm that you
can replicate the problem on a standard build of perl as well.

$common_end
EOF
	}

    my $entry = _prompt($description, "Editor", $ed);
	$usefile = 0;
	if ($entry eq "file") {
	    $usefile = 1;
	} elsif ($entry ne "") {
	    $ed = $entry;
	}
    }
    if ($::HaveCoreList && !$ok && !$thanks) {
	my $description =  <<EOF;
If your bug is about a Perl module rather than a core language
feature, please enter its name here. If it's not, just hit Enter
to skip this question.
EOF

    my $entry = '';
	while ($entry eq '') {
        $entry = _prompt($description, 'Module');
	    my $first_release = Module::CoreList->first_release($entry);
	    if ($entry and not $first_release) {
		paraprint <<EOF;
$entry is not a "core" Perl module. Please check that you entered
its name correctly. If it is correct, quit this program, try searching
for $entry on http://rt.cpan.org, and report your issue there.
EOF

            $entry = '';
	} elsif (my $bug_tracker = $Module::CoreList::bug_tracker{$entry}) {
		paraprint <<"EOF";
$entry included with core Perl is copied directly from the CPAN distribution.
Please report bugs in $entry directly to its maintainers using $bug_tracker
EOF
            $entry = '';
        } elsif ($entry) {
	        $category ||= 'library';
	        $report_about_module = $entry;
            last;
        } else {
            last;
        }
	}
    }

    # Prompt for category of bug
    $category ||= ask_for_alternatives('category');

    # Prompt for severity of bug
    $severity ||= ask_for_alternatives('severity');

    # Generate scratch file to edit report in
    $filename = filename();

    # Prompt for file to read report from, if needed
    if ($usefile and !$file) {
filename:
	my $description = <<EOF;
What is the name of the file that contains your report?
EOF
	my $entry = _prompt($description, "Filename");

	if ($entry eq "") {
	    paraprint <<EOF;
It seems you didn't enter a filename. Please choose to use a text
editor or enter a filename.
EOF
	    goto editor;
	}

	unless (-f $entry and -r $entry) {
	    paraprint <<EOF;
'$entry' doesn't seem to be a readable file.  You may have mistyped
its name or may not have permission to read it.

If you don't want to use a file as the content of your report, just
hit Enter and you'll be able to select a text editor instead.
EOF
	    goto filename;
	}
	$file = $entry;
    }

    # Generate report
    open(REP, '>:raw', $filename) or die "Unable to create report file '$filename': $!\n";
    binmode(REP, ':raw :crlf') if $Is_MSWin32;

    my $reptype = !$ok ? ($thanks ? 'thank-you' : 'bug')
	: $opt{n} ? "build failure" : "success";

    print REP <<EOF;
This is a $reptype report for perl from $from,
generated with the help of perlbug $Version running under perl $perl_version.

EOF

    if ($body) {
	print REP $body;
    } elsif ($usefile) {
	open(F, '<:raw', $file)
		or die "Unable to read report file from '$file': $!\n";
	binmode(F, ':raw :crlf') if $Is_MSWin32;
	while (<F>) {
	    print REP $_
	}
	close(F) or die "Error closing '$file': $!";
    } else {
	if ($thanks) {
	    print REP <<'EOF';

-----------------------------------------------------------------
[Please enter your thank-you message here]



[You're welcome to delete anything below this line]
-----------------------------------------------------------------
EOF
	} else {
	    print REP <<'EOF';

-----------------------------------------------------------------
[Please describe your issue here]



[Please do not change anything below this line]
-----------------------------------------------------------------
EOF
	}
    }
    Dump(*REP);
    close(REP) or die "Error closing report file: $!";

    # Set up an initial report fingerprint so we can compare it later
    _fingerprint_lines_in_report();

} # sub Query

sub Dump {
    local(*OUT) = @@_;

    # these won't have been set if run with -d
    $category ||= 'core';
    $severity ||= 'low';

    print OUT <<EFF;
---
Flags:
    category=$category
    severity=$severity
EFF

    if ($has_patch) {
        print OUT <<EFF;
    Type=Patch
    PatchStatus=HasPatch
EFF
    }

    if ($report_about_module ) { 
        print OUT <<EFF;
    module=$report_about_module
EFF
    }
    if ($opt{A}) {
	print OUT <<EFF;
    ack=no
EFF
    }
    print OUT <<EFF;
---
EFF
    print OUT "This perlbug was built using Perl $config_tag1\n",
	    "It is being executed now by  Perl $config_tag2.\n\n"
	if $config_tag2 ne $config_tag1;

    print OUT <<EOF;
Site configuration information for perl $perl_version:

EOF
    if ($::Config{cf_by} and $::Config{cf_time}) {
	print OUT "Configured by $::Config{cf_by} at $::Config{cf_time}.\n\n";
    }
    print OUT Config::myconfig;

    if (@@patches) {
	print OUT join "\n    ", "Locally applied patches:", @@patches;
	print OUT "\n";
    };

    print OUT <<EOF;

---
\@@INC for perl $perl_version:
EOF
    for my $i (@@INC) {
	print OUT "    $i\n";
    }

    print OUT <<EOF;

---
Environment for perl $perl_version:
EOF
    my @@env =
        qw(PATH LD_LIBRARY_PATH LANG PERL_BADLANG SHELL HOME LOGDIR LANGUAGE);
    push @@env, $Config{ldlibpthname} if $Config{ldlibpthname} ne '';
    push @@env, grep /^(?:PERL|LC_|LANG|CYGWIN)/, keys %ENV;
    my %env;
    @@env{@@env} = @@env;
    for my $env (sort keys %env) {
	print OUT "    $env",
		exists $ENV{$env} ? "=$ENV{$env}" : ' (unset)',
		"\n";
    }
    if ($verbose) {
	print OUT "\nComplete configuration data for perl $perl_version:\n\n";
	my $value;
	foreach (sort keys %::Config) {
	    $value = $::Config{$_};
	    $value = '' unless defined $value;
	    $value =~ s/'/\\'/g;
	    print OUT "$_='$value'\n";
	}
    }
} # sub Dump

sub Edit {
    # Edit the report
    if ($usefile || $body) {
	my $description = "Please make sure that the name of the editor you want to use is correct.";
	my $entry = _prompt($description, 'Editor', $ed);
	$ed = $entry unless $entry eq '';
    }

    _edit_file($ed);
}

sub _edit_file {
    my $editor = shift;

    my $report_written = 0;

    while ( !$report_written ) {
        my $exit_status = system("$editor $filename");
        if ($exit_status) {
            my $desc = <<EOF;
The editor you chose ('$editor') could not be run!

If you mistyped its name, please enter it now, otherwise just press Enter.
EOF
            my $entry = _prompt( $desc, 'Editor', $editor );
            if ( $entry ne "" ) {
                $editor = $entry;
                next;
            } else {
                paraprint <<EOF;
You may want to save your report to a file, so you can edit and
mail it later.
EOF
                return;
            }
        }
        return if ( $ok and not $opt{n} ) || $body;

        # Check that we have a report that has some, eh, report in it.

        unless ( _fingerprint_lines_in_report() ) {
            my $description = <<EOF;
It looks like you didn't enter a report. You may [r]etry your edit
or [c]ancel this report.
EOF
            my $action = _prompt( $description, "Action (Retry/Cancel) " );
            if ( $action =~ /^[re]/i ) {    # <R>etry <E>dit
                next;
            } elsif ( $action =~ /^[cq]/i ) {    # <C>ancel, <Q>uit
                Cancel();                        # cancel exits
            }
        }
        # Ok. the user did what they needed to;
        return;

    }
}


sub Cancel {
    1 while unlink($filename);  # remove all versions under VMS
    print "\nQuitting without sending your message.\n";
    exit(0);
}

sub NowWhat {
    # Report is done, prompt for further action
    if( !$opt{S} ) {
	while(1) {
	    my $menu = <<EOF;


You have finished composing your message. At this point, you have 
a few options. You can:

    * [Se]nd the message to $address$andcc, 
    * [D]isplay the message on the screen,
    * [R]e-edit the message
    * Display or change the message's [su]bject
    * Save the message to a [f]ile to mail at another time
    * [Q]uit without sending a message

EOF
      retry:
        print $menu;
	    my $action =  _prompt('', "Action (Send/Display/Edit/Subject/Save to File)");;
        print "\n";
	    if ($action =~ /^(f|sa)/i) { # <F>ile/<Sa>ve
            if ( SaveMessage() ) { exit }
	    } elsif ($action =~ /^(d|l|sh)/i ) { # <D>isplay, <L>ist, <Sh>ow
		# Display the message
		open(REP, '<:raw', $filename) or die "Couldn't open file '$filename': $!\n";
		binmode(REP, ':raw :crlf') if $Is_MSWin32;
		while (<REP>) { print $_ }
		close(REP) or die "Error closing report file '$filename': $!";
		if ($have_attachment) {
		    print "\n\n---\nAttachment(s):\n";
		    for my $att (split /\s*,\s*/, $attachments) { print "    $att\n"; }
		}
	    } elsif ($action =~ /^su/i) { # <Su>bject
		my $reply = _prompt( "Subject: $subject", "If the above subject is fine, press Enter. Otherwise, type a replacement now\nSubject");
		if ($reply ne '') {
		    unless (TrivialSubject($reply)) {
			$subject = $reply;
			print "Subject: $subject\n";
		    }
		}
	    } elsif ($action =~ /^se/i) { # <S>end
		# Send the message
		my $reply =  _prompt( "Are you certain you want to send this message?", 'Please type "yes" if you are','no');
		if ($reply =~ /^yes$/) {
		    last;
		} else {
		    paraprint <<EOF;
You didn't type "yes", so your message has not yet been sent.
EOF
		}
	    } elsif ($action =~ /^[er]/i) { # <E>dit, <R>e-edit
		# edit the message
		Edit();
	    } elsif ($action =~ /^[qc]/i) { # <C>ancel, <Q>uit
		Cancel();
	    } elsif ($action =~ /^s/i) {
		paraprint <<EOF;
The command you entered was ambiguous. Please type "send", "save" or "subject".
EOF
	    }
	}
    }
} # sub NowWhat

sub TrivialSubject {
    my $subject = shift;
    if ($subject =~
	/^(y(es)?|no?|help|perl( (bug|problem))?|bug|problem)$/i ||
	length($subject) < 4 ||
	$subject !~ /\s/) {
	print "\nThe subject you entered wasn't very descriptive. Please try again.\n\n";
        return 1;
    } else {
	return 0;
    }
}

sub SaveMessage {
    my $file_save = $outfile || "$progname.rep";
    my $file = _prompt( '', "Name of file to save message in", $file_save );
    save_message_to_disk($file) || return undef;
    print "\n";
    paraprint <<EOF;
A copy of your message has been saved in '$file' for you to
send to '$address' with your normal mail client.
EOF
}

sub Send {

    # Message has been accepted for transmission -- Send the message

    # on linux certain "mail" implementations won't accept the subject
    # as "~s subject" and thus the Subject header will be corrupted
    # so don't use Mail::Send to be safe
    eval {
        if ( $::HaveSend && !$Is_Linux && !$Is_OpenBSD ) {
            _send_message_mailsend();
        } elsif ($Is_VMS) {
            _send_message_vms();
        } else {
            _send_message_sendmail();
        }
    };

    if ( my $error = $@@ ) {
        paraprint <<EOF;
$0 has detected an error while trying to send your message: $error.

Your message may not have been sent. You will now have a chance to save a copy to disk.
EOF
        SaveMessage();
        return;
    }

    1 while unlink($filename);    # remove all versions under VMS
}    # sub Send

sub Help {
    print <<EOF;

This program is designed to help you generate and send bug reports
(and thank-you notes) about perl5 and the modules which ship with it.

In most cases, you can just run "$0" interactively from a command
line without any special arguments and follow the prompts.

Advanced usage:

$0  [-v] [-a address] [-s subject] [-b body | -f inpufile ] [ -F outputfile ]
    [-r returnaddress] [-e editor] [-c adminaddress | -C] [-S] [-t] [-h]
    [-p patchfile ]
$0  [-v] [-r returnaddress] [-A] [-ok | -okay | -nok | -nokay]


Options:

  -v    Include Verbose configuration data in the report
  -f    File containing the body of the report. Use this to
        quickly send a prepared message.
  -p    File containing a patch or other text attachment. Separate
        multiple files with commas.
  -F    File to output the resulting mail message to, instead of mailing.
  -S    Send without asking for confirmation.
  -a    Address to send the report to. Defaults to '$address'.
  -c    Address to send copy of report to. Defaults to '$cc'.
  -C    Don't send copy to administrator.
  -s    Subject to include with the message. You will be prompted
        if you don't supply one on the command line.
  -b    Body of the report. If not included on the command line, or
        in a file with -f, you will get a chance to edit the message.
  -r    Your return address. The program will ask you to confirm
        this if you don't give it here.
  -e    Editor to use.
  -t    Test mode. The target address defaults to '$testaddress'.
  -T    Thank-you mode. The target address defaults to '$thanksaddress'.
  -d    Data mode.  This prints out your configuration data, without mailing
        anything. You can use this with -v to get more complete data.
  -A    Don't send a bug received acknowledgement to the return address.
  -ok   Report successful build on this system to perl porters
        (use alone or with -v). Only use -ok if *everything* was ok:
        if there were *any* problems at all, use -nok.
  -okay As -ok but allow report from old builds.
  -nok  Report unsuccessful build on this system to perl porters
        (use alone or with -v). You must describe what went wrong
        in the body of the report which you will be asked to edit.
  -nokay As -nok but allow report from old builds.
  -h    Print this help message.

EOF
}

sub filename {
    if ($::HaveTemp) {
	# Good. Use a secure temp file
	my ($fh, $filename) = File::Temp::tempfile(UNLINK => 1);
	close($fh);
	return $filename;
    } else {
	# Bah. Fall back to doing things less securely.
	my $dir = File::Spec->tmpdir();
	$filename = "bugrep0$$";
	$filename++ while -e File::Spec->catfile($dir, $filename);
	$filename = File::Spec->catfile($dir, $filename);
    }
}

sub paraprint {
    my @@paragraphs = split /\n{2,}/, "@@_";
    for (@@paragraphs) {   # implicit local $_
	s/(\S)\s*\n/$1 /g;
	write;
	print "\n";
    }
}

sub _prompt {
    my ($explanation, $prompt, $default) = (@@_);
    if ($explanation) {
        print "\n\n";
        paraprint $explanation;
    }
    print $prompt. ($default ? " [$default]" :''). ": ";
	my $result = scalar(<>);
    chomp($result);
	$result =~ s/^\s*(.*?)\s*$/$1/s;
    if ($default && $result eq '') {
        return $default;
    } else {
        return $result;
    }
}

sub _build_header {
    my %attr = (@@_);

    my $head = '';
    for my $header (keys %attr) {
        $head .= "$header: ".$attr{$header}."\n";
    }
    return $head;
}

sub _message_headers {
    my %headers = ( To => $address, Subject => $subject );
    $headers{'Cc'}         = $cc        if ($cc);
    $headers{'Message-Id'} = $messageid if ($messageid);
    $headers{'Reply-To'}   = $from      if ($from);
    $headers{'From'}       = $from      if ($from);
    if ($have_attachment) {
        $headers{'MIME-Version'} = '1.0';
        $headers{'Content-Type'} = qq{multipart/mixed; boundary=\"$mime_boundary\"};
    }
    return \%headers;
}

sub _add_body_start {
    my $body_start = <<"BODY_START";
This is a multi-part message in MIME format.
--$mime_boundary
Content-Type: text/plain; format=fixed
Content-Transfer-Encoding: 8bit

BODY_START
    return $body_start;
}

sub _add_attachments {
    my $attach = '';
    for my $attachment (split /\s*,\s*/, $attachments) {
        my $attach_file = basename($attachment);
        $attach .= <<"ATTACHMENT";

--$mime_boundary
Content-Type: text/x-patch; name="$attach_file"
Content-Transfer-Encoding: 8bit
Content-Disposition: attachment; filename="$attach_file"

ATTACHMENT

        open my $attach_fh, '<:raw', $attachment
            or die "Couldn't open attachment '$attachment': $!\n";
        while (<$attach_fh>) { $attach .= $_; }
        close($attach_fh) or die "Error closing attachment '$attachment': $!";
    }

    $attach .= "\n--$mime_boundary--\n";
    return $attach;
}

sub build_complete_message {
    my $content = _build_header(%{_message_headers()}) . "\n\n";
    $content .= _add_body_start() if $have_attachment;
    open( REP, "<:raw", $filename ) or die "Couldn't open file '$filename': $!\n";
    binmode(REP, ':raw :crlf') if $Is_MSWin32;
    while (<REP>) { $content .= $_; }
    close(REP) or die "Error closing report file '$filename': $!";
    $content .= _add_attachments() if $have_attachment;
    return $content;
}

sub save_message_to_disk {
    my $file = shift;

        open OUTFILE, '>:raw', $file or do { warn  "Couldn't open '$file': $!\n"; return undef};
        binmode(OUTFILE, ':raw :crlf') if $Is_MSWin32;

        print OUTFILE build_complete_message();
        close(OUTFILE) or do { warn  "Error closing $file: $!"; return undef };
	    print "\nMessage saved.\n";
        return 1;
}

sub _send_message_vms {

    my $mail_from  = $from;
    my $rcpt_to_to = $address;
    my $rcpt_to_cc = $cc;

    map { $_ =~ s/^[^<]*<//;
          $_ =~ s/>[^>]*//; } ($mail_from, $rcpt_to_to, $rcpt_to_cc);

    if ( open my $sff_fh, '|-:raw', 'MCR TCPIP$SYSTEM:TCPIP$SMTP_SFF.EXE SYS$INPUT:' ) {
        print $sff_fh "MAIL FROM:<$mail_from>\n";
        print $sff_fh "RCPT TO:<$rcpt_to_to>\n";
        print $sff_fh "RCPT TO:<$rcpt_to_cc>\n" if $rcpt_to_cc;
        print $sff_fh "DATA\n";
        print $sff_fh build_complete_message();
        my $success = close $sff_fh;
        if ($success ) {
            print "\nMessage sent\n";
            return;
        }
    }
    die "Mail transport failed (leaving bug report in $filename): $^E\n";
}

sub _send_message_mailsend {
    my $msg = Mail::Send->new();
    my %headers = %{_message_headers()};
    for my $key ( keys %headers) {
        $msg->add($key => $headers{$key});
    }

    $fh = $msg->open;
    binmode($fh, ':raw');
    print $fh _add_body_start() if $have_attachment;
    open(REP, "<:raw", $filename) or die "Couldn't open '$filename': $!\n";
    binmode(REP, ':raw :crlf') if $Is_MSWin32;
    while (<REP>) { print $fh $_ }
    close(REP) or die "Error closing $filename: $!";
    print $fh _add_attachments() if $have_attachment;
    $fh->close or die "Error sending mail: $!";

    print "\nMessage sent.\n";
}

sub _probe_for_sendmail {
    my $sendmail = "";
    for (qw(/usr/lib/sendmail /usr/sbin/sendmail /usr/ucblib/sendmail)) {
        $sendmail = $_, last if -e $_;
    }
    if ( $^O eq 'os2' and $sendmail eq "" ) {
        my $path = $ENV{PATH};
        $path =~ s:\\:/:;
        my @@path = split /$Config{'path_sep'}/, $path;
        for (@@path) {
            $sendmail = "$_/sendmail",     last if -e "$_/sendmail";
            $sendmail = "$_/sendmail.exe", last if -e "$_/sendmail.exe";
        }
    }
    return $sendmail;
}

sub _send_message_sendmail {
    my $sendmail = _probe_for_sendmail();
    unless ($sendmail) {
        my $message_start = !$Is_Linux && !$Is_OpenBSD ? <<'EOT' : <<'EOT';
It appears that there is no program which looks like "sendmail" on
your system and that the Mail::Send library from CPAN isn't available.
EOT
It appears that there is no program which looks like "sendmail" on
your system.
EOT
        paraprint(<<"EOF"), die "\n";
$message_start
Because of this, there's no easy way to automatically send your
message.

A copy of your message has been saved in '$filename' for you to
send to '$address' with your normal mail client.
EOF
    }

    open( SENDMAIL, "|-:raw", $sendmail, "-t", "-oi", "-f", $from )
        || die "'|$sendmail -t -oi -f $from' failed: $!";
    print SENDMAIL build_complete_message();
    if ( close(SENDMAIL) ) {
        print "\nMessage sent\n";
    } else {
        warn "\nSendmail returned status '", $? >> 8, "'\n";
    }
}



# a strange way to check whether any significant editing
# has been done: check whether any new non-empty lines
# have been added.

sub _fingerprint_lines_in_report {
    my $new_lines = 0;
    # read in the report template once so that
    # we can track whether the user does any editing.
    # yes, *all* whitespace is ignored.

    open(REP, '<:raw', $filename) or die "Unable to open report file '$filename': $!\n";
    binmode(REP, ':raw :crlf') if $Is_MSWin32;
    while (my $line = <REP>) {
        $line =~ s/\s+//g;
        $new_lines++ if (!$REP{$line});

    }
    close(REP) or die "Error closing report file '$filename': $!";
    # returns the number of lines with content that wasn't there when last we looked
    return $new_lines;
}



format STDOUT =
^<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<< ~~
$_
.

__END__

=head1 NAME

perlbug - how to submit bug reports on Perl

=head1 SYNOPSIS

B<perlbug>

B<perlbug> S<[ B<-v> ]> S<[ B<-a> I<address> ]> S<[ B<-s> I<subject> ]>
S<[ B<-b> I<body> | B<-f> I<inputfile> ]> S<[ B<-F> I<outputfile> ]>
S<[ B<-r> I<returnaddress> ]>
S<[ B<-e> I<editor> ]> S<[ B<-c> I<adminaddress> | B<-C> ]>
S<[ B<-S> ]> S<[ B<-t> ]>  S<[ B<-d> ]>  S<[ B<-A> ]>  S<[ B<-h> ]> S<[ B<-T> ]>

B<perlbug> S<[ B<-v> ]> S<[ B<-r> I<returnaddress> ]>
 S<[ B<-A> ]> S<[ B<-ok> | B<-okay> | B<-nok> | B<-nokay> ]>

=head1 DESCRIPTION


This program is designed to help you generate and send bug reports
(and thank-you notes) about perl5 and the modules which ship with it.

In most cases, you can just run it interactively from a command
line without any special arguments and follow the prompts.

If you have found a bug with a non-standard port (one that was not
part of the I<standard distribution>), a binary distribution, or a
non-core module (such as Tk, DBI, etc), then please see the
documentation that came with that distribution to determine the
correct place to report bugs.

If you are unable to send your report using B<perlbug> (most likely
because your system doesn't have a way to send mail that perlbug
recognizes), you may be able to use this tool to compose your report
and save it to a file which you can then send to B<perlbug@@perl.org>
using your regular mail client.

In extreme cases, B<perlbug> may not work well enough on your system
to guide you through composing a bug report. In those cases, you
may be able to use B<perlbug -d> to get system configuration
information to include in a manually composed bug report to
B<perlbug@@perl.org>.


When reporting a bug, please run through this checklist:

=over 4

=item What version of Perl you are running?

Type C<perl -v> at the command line to find out.

=item Are you running the latest released version of perl?

Look at http://www.perl.org/ to find out.  If you are not using the
latest released version, please try to replicate your bug on the
latest stable release.

Note that reports about bugs in old versions of Perl, especially
those which indicate you haven't also tested the current stable
release of Perl, are likely to receive less attention from the
volunteers who build and maintain Perl than reports about bugs in
the current release.

This tool isn't appropriate for reporting bugs in any version
prior to Perl 5.0.

=item Are you sure what you have is a bug?

A significant number of the bug reports we get turn out to be
documented features in Perl.  Make sure the issue you've run into
isn't intentional by glancing through the documentation that comes
with the Perl distribution.

Given the sheer volume of Perl documentation, this isn't a trivial
undertaking, but if you can point to documentation that suggests
the behaviour you're seeing is I<wrong>, your issue is likely to
receive more attention. You may want to start with B<perldoc>
L<perltrap> for pointers to common traps that new (and experienced)
Perl programmers run into.

If you're unsure of the meaning of an error message you've run
across, B<perldoc> L<perldiag> for an explanation.  If the message
isn't in perldiag, it probably isn't generated by Perl.  You may
have luck consulting your operating system documentation instead.

If you are on a non-UNIX platform B<perldoc> L<perlport>, as some
features may be unimplemented or work differently.

You may be able to figure out what's going wrong using the Perl
debugger.  For information about how to use the debugger B<perldoc>
L<perldebug>.

=item Do you have a proper test case?

The easier it is to reproduce your bug, the more likely it will be
fixed -- if nobody can duplicate your problem, it probably won't be 
addressed.

A good test case has most of these attributes: short, simple code;
few dependencies on external commands, modules, or libraries; no
platform-dependent code (unless it's a platform-specific bug);
clear, simple documentation.

A good test case is almost always a good candidate to be included in
Perl's test suite.  If you have the time, consider writing your test case so
that it can be easily included into the standard test suite.

=item Have you included all relevant information?

Be sure to include the B<exact> error messages, if any.
"Perl gave an error" is not an exact error message.

If you get a core dump (or equivalent), you may use a debugger
(B<dbx>, B<gdb>, etc) to produce a stack trace to include in the bug
report.  

NOTE: unless your Perl has been compiled with debug info
(often B<-g>), the stack trace is likely to be somewhat hard to use
because it will most probably contain only the function names and not
their arguments.  If possible, recompile your Perl with debug info and
reproduce the crash and the stack trace.

=item Can you describe the bug in plain English?

The easier it is to understand a reproducible bug, the more likely
it will be fixed.  Any insight you can provide into the problem
will help a great deal.  In other words, try to analyze the problem
(to the extent you can) and report your discoveries.

=item Can you fix the bug yourself?

If so, that's great news; bug reports with patches are likely to
receive significantly more attention and interest than those without
patches.  Please attach your patch to the report using the C<-p> option.
When sending a patch, create it using C<git format-patch> if possible,
though a unified diff created with C<diff -pu> will do nearly as well.

Your patch may be returned with requests for changes, or requests for more
detailed explanations about your fix.

Here are a few hints for creating high-quality patches:

Make sure the patch is not reversed (the first argument to diff is
typically the original file, the second argument your changed file).
Make sure you test your patch by applying it with C<git am> or the
C<patch> program before you send it on its way.  Try to follow the
same style as the code you are trying to patch.  Make sure your patch
really does work (C<make test>, if the thing you're patching is covered
by Perl's test suite).

=item Can you use C<perlbug> to submit the report?

B<perlbug> will, amongst other things, ensure your report includes
crucial information about your version of perl.  If C<perlbug> is
unable to mail your report after you have typed it in, you may have
to compose the message yourself, add the output produced by C<perlbug
-d> and email it to B<perlbug@@perl.org>.  If, for some reason, you
cannot run C<perlbug> at all on your system, be sure to include the
entire output produced by running C<perl -V> (note the uppercase V).

Whether you use C<perlbug> or send the email manually, please make
your Subject line informative.  "a bug" is not informative.  Neither
is "perl crashes" nor is "HELP!!!".  These don't help.  A compact
description of what's wrong is fine.

=item Can you use C<perlbug> to submit a thank-you note?

Yes, you can do this by using the C<-T> option.
Thank-you notes are good. It makes people
smile. 

=back

Having done your bit, please be prepared to wait, to be told the
bug is in your code, or possibly to get no reply at all.  The
volunteers who maintain Perl are busy folks, so if your problem is
an obvious bug in your own code, is difficult to understand or is
a duplicate of an existing report, you may not receive a personal
reply.

If it is important to you that your bug be fixed, do monitor the
perl5-porters@@perl.org mailing list (mailing lists are moderated, your
message may take a while to show up) and the commit logs to development
versions of Perl, and encourage the maintainers with kind words or
offers of frosty beverages.  (Please do be kind to the maintainers.
Harassing or flaming them is likely to have the opposite effect of the
one you want.)

Feel free to update the ticket about your bug on http://rt.perl.org
if a new version of Perl is released and your bug is still present.

=head1 OPTIONS

=over 8

=item B<-a>

Address to send the report to.  Defaults to B<perlbug@@perl.org>.

=item B<-A>

Don't send a bug received acknowledgement to the reply address.
Generally it is only a sensible to use this option if you are a
perl maintainer actively watching perl porters for your message to
arrive.

=item B<-b>

Body of the report.  If not included on the command line, or
in a file with B<-f>, you will get a chance to edit the message.

=item B<-C>

Don't send copy to administrator.

=item B<-c>

Address to send copy of report to.  Defaults to the address of the
local perl administrator (recorded when perl was built).

=item B<-d>

Data mode (the default if you redirect or pipe output).  This prints out
your configuration data, without mailing anything.  You can use this
with B<-v> to get more complete data.

=item B<-e>

Editor to use.

=item B<-f>

File containing the body of the report.  Use this to quickly send a
prepared message.

=item B<-F>

File to output the results to instead of sending as an email. Useful
particularly when running perlbug on a machine with no direct internet
connection.

=item B<-h>

Prints a brief summary of the options.

=item B<-ok>

Report successful build on this system to perl porters. Forces B<-S>
and B<-C>. Forces and supplies values for B<-s> and B<-b>. Only
prompts for a return address if it cannot guess it (for use with
B<make>). Honors return address specified with B<-r>.  You can use this
with B<-v> to get more complete data.   Only makes a report if this
system is less than 60 days old.

=item B<-okay>

As B<-ok> except it will report on older systems.

=item B<-nok>

Report unsuccessful build on this system.  Forces B<-C>.  Forces and
supplies a value for B<-s>, then requires you to edit the report
and say what went wrong.  Alternatively, a prepared report may be
supplied using B<-f>.  Only prompts for a return address if it
cannot guess it (for use with B<make>). Honors return address
specified with B<-r>.  You can use this with B<-v> to get more
complete data.  Only makes a report if this system is less than 60
days old.

=item B<-nokay>

As B<-nok> except it will report on older systems.

=item B<-p>

The names of one or more patch files or other text attachments to be
included with the report.  Multiple files must be separated with commas.

=item B<-r>

Your return address.  The program will ask you to confirm its default
if you don't use this option.

=item B<-S>

Send without asking for confirmation.

=item B<-s>

Subject to include with the message.  You will be prompted if you don't
supply one on the command line.

=item B<-t>

Test mode.  The target address defaults to B<perlbug-test@@perl.org>.

=item B<-T>

Send a thank-you note instead of a bug report. 

=item B<-v>

Include verbose configuration data in the report.

=back

=head1 AUTHORS

Kenneth Albanowski (E<lt>kjahds@@kjahds.comE<gt>), subsequently
I<doc>tored by Gurusamy Sarathy (E<lt>gsar@@activestate.comE<gt>),
Tom Christiansen (E<lt>tchrist@@perl.comE<gt>), Nathan Torkington
(E<lt>gnat@@frii.comE<gt>), Charles F. Randall (E<lt>cfr@@pobox.comE<gt>),
Mike Guy (E<lt>mjtg@@cam.ac.ukE<gt>), Dominic Dunlop
(E<lt>domo@@computer.orgE<gt>), Hugo van der Sanden (E<lt>hv@@crypt.orgE<gt>),
Jarkko Hietaniemi (E<lt>jhi@@iki.fiE<gt>), Chris Nandor
(E<lt>pudge@@pobox.comE<gt>), Jon Orwant (E<lt>orwant@@media.mit.eduE<gt>,
Richard Foley (E<lt>richard.foley@@rfi.netE<gt>), Jesse Vincent
(E<lt>jesse@@bestpractical.comE<gt>), and Craig A. Berry (E<lt>craigberry@@mac.comE<gt>).

=head1 SEE ALSO

perl(1), perldebug(1), perldiag(1), perlport(1), perltrap(1),
diff(1), patch(1), dbx(1), gdb(1)

=head1 BUGS

None known (guess what must have been used to report them?)

=cut

!NO!SUBS!

close OUT or die "Can't close $file: $!";
chmod 0755, $file or die "Can't reset permissions for $file: $!\n";
exec("$Config{'eunicefix'} $file") if $Config{'eunicefix'} ne ':';
chdir $origdir;
@


1.21
log
@Fix merge issues, remove excess files - match perl-5.24.1 dist
@
text
@d349 1
a349 2
If you wish to submit a bug report, please run it without the -T flag
(or run the program perlbug rather than perlthanks)
d356 1
a356 1
note to $thanksaddress instead of a bug report, please run 'perlthanks'.
a1246 2
B<perlthanks>

d1399 2
a1400 2
Yes, you can do this by either using the C<-T> option, or by invoking
the program as C<perlthanks>. Thank-you notes are good. It makes people
@


1.20
log
@Patch perl CVE-2016-1238

The problem relates to Perl 5 ("perl") loading modules from the
includes directory array ("@@INC") in which the last element is the
current directory (".").  That means that, when "perl" wants to
load a module (during first compilation or during lazy loading of
a module in run-time), perl will look for the module in the current
directory at the end, since '.' is the last include directory in
its array of include directories to seek. The issue is with requiring
libraries that are in "." but are not otherwise installed.

The major problem with this behavior is that it unexpectedly puts
a user at risk whenever they execute any Perl scripts from a directory
that is writable by other accounts on the system. For instance, if
a user is logged in as root and changes directory into /tmp or an
account's home directory, it is possible to now run any shell
commands that are written in C, Python or Ruby without fear.

The same isn't true for any shell commands that are written in Perl,
since a significant proportion of Perl scripts will execute code
in the current working directory whenever they are run. For example,
if a user on a shared system creates the file /tmp/Pod/Perldoc/Toterm.pm,
and then I log in as root, change directory to /tmp, and run "perldoc
perlrun", it will execute the code they have placed in the file.


ok deraadt@@
@
text
@d349 2
a350 1
If you wish to submit a bug report, please run it without the -T flag.
d357 1
a357 1
note to $thanksaddress instead of a bug report, please use the -T flag.
d1248 2
d1402 2
a1403 2
Yes, you can do this by using the C<-T> option.
Thank-you notes are good. It makes people
@


1.19
log
@Apply local patches, remove excess files - perl-5.20.2
@
text
@d60 1
@


1.19.2.1
log
@Patch perl CVE-2016-1238

The problem relates to Perl 5 ("perl") loading modules from the
includes directory array ("@@INC") in which the last element is the
current directory (".").  That means that, when "perl" wants to
load a module (during first compilation or during lazy loading of
a module in run-time), perl will look for the module in the current
directory at the end, since '.' is the last include directory in
its array of include directories to seek. The issue is with requiring
libraries that are in "." but are not otherwise installed.

The major problem with this behavior is that it unexpectedly puts
a user at risk whenever they execute any Perl scripts from a directory
that is writable by other accounts on the system. For instance, if
a user is logged in as root and changes directory into /tmp or an
account's home directory, it is possible to now run any shell
commands that are written in C, Python or Ruby without fear.

The same isn't true for any shell commands that are written in Perl,
since a significant proportion of Perl scripts will execute code
in the current working directory whenever they are run. For example,
if a user on a shared system creates the file /tmp/Pod/Perldoc/Toterm.pm,
and then I log in as root, change directory to /tmp, and run "perldoc
perlrun", it will execute the code they have placed in the file.
@
text
@a59 1
BEGIN { pop @@INC if $INC[-1] eq '.' }
@


1.19.4.1
log
@Patch perl CVE-2016-1238

The problem relates to Perl 5 ("perl") loading modules from the
includes directory array ("@@INC") in which the last element is the
current directory (".").  That means that, when "perl" wants to
load a module (during first compilation or during lazy loading of
a module in run-time), perl will look for the module in the current
directory at the end, since '.' is the last include directory in
its array of include directories to seek. The issue is with requiring
libraries that are in "." but are not otherwise installed.

The major problem with this behavior is that it unexpectedly puts
a user at risk whenever they execute any Perl scripts from a directory
that is writable by other accounts on the system. For instance, if
a user is logged in as root and changes directory into /tmp or an
account's home directory, it is possible to now run any shell
commands that are written in C, Python or Ruby without fear.

The same isn't true for any shell commands that are written in Perl,
since a significant proportion of Perl scripts will execute code
in the current working directory whenever they are run. For example,
if a user on a shared system creates the file /tmp/Pod/Perldoc/Toterm.pm,
and then I log in as root, change directory to /tmp, and run "perldoc
perlrun", it will execute the code they have placed in the file.
@
text
@a59 1
BEGIN { pop @@INC if $INC[-1] eq '.' }
@


1.18
log
@Fix merge issues, remove excess files - match perl-5.20.2 dist
@
text
@d348 1
a348 2
If you wish to submit a bug report, please run it without the -T flag
(or run the program perlbug rather than perlthanks)
d355 1
a355 1
note to $thanksaddress instead of a bug report, please run 'perlthanks'.
a1245 2
B<perlthanks>

d1398 2
a1399 2
Yes, you can do this by either using the C<-T> option, or by invoking
the program as C<perlthanks>. Thank-you notes are good. It makes people
@


1.17
log
@Apply local patches to perl-5.20.1

ok deraadt@@ sthen@@ espie@@ miod@@
@
text
@d348 2
a349 1
If you wish to submit a bug report, please run it without the -T flag.
d356 1
a356 1
note to $thanksaddress instead of a bug report, please use the -T flag.
d1247 2
d1401 2
a1402 2
Yes, you can do this by using the C<-T> option.
Thank-you notes are good. It makes people
@


1.16
log
@Fix merge conflicts, remove extra files, match upstream perl-5.20.1

ok deraadt@@ sthen@@ espie@@ miod@@
@
text
@d348 1
a348 2
If you wish to submit a bug report, please run it without the -T flag
(or run the program perlbug rather than perlthanks)
d355 1
a355 1
note to $thanksaddress instead of a bug report, please run 'perlthanks'.
a1245 2
B<perlthanks>

d1398 2
a1399 2
Yes, you can do this by either using the C<-T> option, or by invoking
the program as C<perlthanks>. Thank-you notes are good. It makes people
@


1.15
log
@Merge perl-5.18.2 plus local patches, remove old files

OK espie@@ sthen@@ deraadt@@
@
text
@d25 1
a25 1
# extract patchlevel.h information
d27 2
a28 2
open PATCH_LEVEL, "<" . catfile(updir, "patchlevel.h")
    or die "Can't open patchlevel.h: $!";
d30 1
a30 1
my $patchlevel_date = (stat PATCH_LEVEL)[9];
d32 1
a32 26
while (<PATCH_LEVEL>) {
    last if $_ =~ /^\s*static\s+(?:const\s+)?char.*?local_patches\[\]\s*=\s*{\s*$/;
}

if (! defined($_)) {
    warn "Warning: local_patches section not found in patchlevel.h\n";
}

my @@patches;
while (<PATCH_LEVEL>) {
    last if /^\s*}/;
    next if /^\s*#/;  # preprocessor stuff
    next if /PERL_GIT_UNPUSHED_COMMITS/;    # XXX expand instead
    next if /"uncommitted-changes"/;        # XXX determine if active instead
    chomp;
    s/^\s+,?\s*"?//;
    s/"?\s*,?$//;
    s/(['\\])/\\$1/g;
    push @@patches, $_ unless $_ eq 'NULL';
}
my $patch_desc = "'" . join("',\n    '", @@patches) . "'";
my $patch_tags = join "", map /(\S+)/ ? "+$1 " : (), @@patches;

close(PATCH_LEVEL) or die "Error closing patchlevel.h: $!";

# TO DO (prehaps): store/embed $Config::config_sh into perlbug. When perlbug is
a51 4
my \$patch_tags = '$patch_tags';
my \@@patches = (
    $patch_desc
);
d57 2
d81 1
a81 1
my $Version = "1.39";
d93 1
a93 1
    %opt,
d121 5
d128 7
d136 1
d191 1
a191 1
    if (!getopts("Adhva:s:b:f:F:r:e:SCc:to:n:T", \%opt)) { Help(); exit; };
d237 15
d348 2
a349 1
If you wish to submit a bug report, please run it without the -T flag.
d356 1
a356 1
note to $thanksaddress instead of a bug report, please use the -T flag.
d398 2
d602 3
a604 1
    open(REP,">$filename") or die "Unable to create report file '$filename': $!\n";
d617 1
a617 1
	open(F, "<$file")
d619 1
d671 7
d837 2
a838 1
		open(REP, "<$filename") or die "Couldn't open file '$filename': $!\n";
d841 4
d944 1
d953 2
d1042 4
d1049 34
d1085 3
a1087 1
    open( REP, "<$filename" ) or die "Couldn't open file '$filename': $!\n";
d1090 1
d1097 3
a1099 1
	    open OUTFILE, ">$file" or do { warn  "Couldn't open '$file': $!\n"; return undef};
d1107 18
a1124 5
    if (   ( $address =~ /@@/ and $address !~ /^\w+%"/ )
        or ( $cc =~ /@@/ and $cc !~ /^\w+%"/ ) ) {
        my $prefix;
        foreach ( qw[ IN MX SMTP UCX PONY WINS ], '' ) {
            $prefix = "$_%", last if $ENV{"MAIL\$PROTOCOL_$_"};
a1125 9
        $address = qq[${prefix}"$address"] unless $address =~ /^\w+%"/;
        $cc = qq[${prefix}"$cc"] unless !$cc || $cc =~ /^\w+%"/;
    }
    $subject =~ s/"/""/g;
    $address =~ s/"/""/g;
    $cc      =~ s/"/""/g;
    my $sts = system(qq[mail/Subject="$subject" $filename. "$address","$cc"]);
    if ($sts) {
        die "Can't spawn off mail (leaving bug report in $filename): $sts";
d1127 1
d1138 4
a1141 1
    open(REP, "<$filename") or die "Couldn't open '$filename': $!\n";
d1144 1
d1187 1
a1187 1
    open( SENDMAIL, "|-", $sendmail, "-t", "-oi", "-f", $from )
d1209 2
a1210 1
    open(REP, "<$filename") or die "Unable to open report file '$filename': $!\n";
d1247 2
d1365 5
a1369 5
A bug report which I<includes a patch to fix it> will almost
definitely be fixed.  When sending a patch, please use the C<diff>
program with the C<-u> option to generate "unified" diff files.
Bug reports with patches are likely to receive significantly more
attention and interest than those without patches.
d1378 4
a1381 4
Make sure you test your patch by applying it with the C<patch>
program before you send it on its way.  Try to follow the same style
as the code you are trying to patch.  Make sure your patch really
does work (C<make test>, if the thing you're patching is covered
d1401 2
a1402 2
Yes, you can do this by either using the C<-T> option.
Thank-you notes are good. It makes people
d1415 2
a1416 1
perl5-porters@@perl.org mailing list and the commit logs to development
d1419 2
a1420 2
Harassing or flaming them is likely to have the opposite effect of
the one you want.)
d1507 5
d1550 2
a1551 2
Richard Foley (E<lt>richard.foley@@rfi.netE<gt>), and Jesse Vincent
(E<lt>jesse@@bestpractical.comE<gt>).
@


1.14
log
@merge/resolve conflicts
(some more to do after this one)
@
text
@d359 2
a360 2
For help using perl, try posting to the Usenet newsgroup 
comp.lang.perl.misc.
d1463 2
a1464 2
Mike Guy (E<lt>mjtg@@cam.a.ukE<gt>), Dominic Dunlop
(E<lt>domo@@computer.orgE<gt>), Hugo van der Sanden (E<lt>hv@@crypt.org<gt>),
d1468 1
a1468 1
(E<lt>jesse@@bestpractical.com<gt>).
@


1.13
log
@merge in perl 5.12.2 plus local changes
@
text
@a87 1
no warnings 'once'; # Eventually, the $::opt_ stuff should get cleaned up
a109 52
# Changed in 1.06 to skip Mail::Send and Mail::Util if not available.
# Changed in 1.07 to see more sendmail execs, and added pipe output.
# Changed in 1.08 to use correct address for sendmail.
# Changed in 1.09 to close the REP file before calling it up in the editor.
#                 Also removed some old comments duplicated elsewhere.
# Changed in 1.10 to run under VMS without Mail::Send; also fixed
#                 temp filename generation.
# Changed in 1.11 to clean up some text and removed Mail::Send deactivator.
# Changed in 1.12 to check for editor errors, make save/send distinction
#                 clearer and add $ENV{REPLYTO}.
# Changed in 1.13 to hopefully make it more difficult to accidentally
#                 send mail
# Changed in 1.14 to make the prompts a little more clear on providing
#                 helpful information. Also let file read fail gracefully.
# Changed in 1.15 to add warnings to stop people using perlbug for non-bugs.
#                 Also report selected environment variables.
# Changed in 1.16 to include @@INC, and allow user to re-edit if no changes.
# Changed in 1.17 Win32 support added.  GSAR 97-04-12
# Changed in 1.18 add '-ok' option for reporting build success. CFR 97-06-18
# Changed in 1.19 '-ok' default not '-v'
#                 add local patch information
#                 warn on '-ok' if this is an old system; add '-okay'
# Changed in 1.20 Added patchlevel.h reading and version/config checks
# Changed in 1.21 Added '-nok' for reporting build failure DFD 98-05-05
# Changed in 1.22 Heavy reformatting & minor bugfixes HVDS 98-05-10
# Changed in 1.23 Restore -ok(ay): say 'success'; don't prompt
# Changed in 1.24 Added '-F<file>' to save report HVDS 98-07-01
# Changed in 1.25 Warn on failure to open save file. HVDS 98-07-12
# Changed in 1.26 Don't require -t STDIN for -ok. HVDS 98-07-15
# Changed in 1.27 Added Mac OS and File::Spec support CNANDOR 99-07-27
# Changed in 1.28 Additional questions for Perlbugtron RFOLEY 20.03.2000
# Changed in 1.29 Perlbug(tron): auto(-ok), short prompts RFOLEY 05-05-2000
# Changed in 1.30 Added warnings on failure to open files MSTEVENS 13-07-2000
# Changed in 1.31 Add checks on close().Fix my $var unless. TJENNESS 26-07-2000
# Changed in 1.32 Use File::Spec->tmpdir TJENNESS 20-08-2000
# Changed in 1.33 Don't require -t STDOUT for -ok.
# Changed in 1.34 Added Message-Id RFOLEY 18-06-2002 
# Changed in 1.35 Use File::Temp (patch from Solar Designer) NWCLARK 28-02-2004
# Changed in 1.36 Initial Module::CoreList support Alexandr Ciornii 11-07-2007
# Changed in 1.37 Killed some string evals, rewrote most prose JESSE 2008-06-08
# Changed in 1.38 Actually enforce the CoreList check,
#                 Record the module the user enters if they do so
#                 Refactor prompts to use common code           JESSE 2008-06-08
# Changed in 1.39 Trap mail sending failures (simple ones) so   JESSE 2008-06-08
#                 users might be able to recover their bug reports
#                 Refactor mail sending routines
#                 Unify message building code
#                 Unify message header building
#                 Fix "module" prompting to not squish "category" prompting 
#                 use warnings; (except 'once' warnings)
#                 Unified report fingerprint/change detection code
#                 Removed some labeled 'gotos'
d118 1
a118 1
    $Is_MacOS, $Is_MSWin32, $Is_Linux, $Is_VMS, $Is_OpenBSD,
d120 1
a120 1

d129 3
a131 3
if ($::opt_h) { Help(); exit; }
if ($::opt_d) { Dump(*STDOUT); exit; }
if (!-t STDIN && !($ok and not $::opt_n)) {
d140 1
a140 1
Edit() unless $usefile || ($ok and not $::opt_n);
a203 5
    $Is_MacOS = $^O eq 'MacOS';

    @@ARGV = split m/\s+/,
        MacPerl::Ask('Provide command line args here (-h for help):')
        if $Is_MacOS && $MacPerl::Version =~ /App/;
d205 1
a205 1
    if (!getopts("Adhva:s:b:f:F:r:e:SCc:to:n:T")) { Help(); exit; };
d223 2
a224 2
	$::opt_T = 1;
	$::opt_C = 1; # don't send a copy to the local admin
d227 1
a227 1
    if ($::opt_T) {
d233 1
a233 1
    $address = $::opt_a || ($::opt_t ? $testaddress
d236 2
a237 2
    # Users address, used in message and in Reply-To header
    $from = $::opt_r || "";
d240 1
a240 1
    $verbose = $::opt_v || 0;
d243 1
a243 1
    $subject = $::opt_s || "";
d246 1
a246 1
    $usefile = ($::opt_f || 0);
d249 1
a249 1
    $file = $::opt_f || "";
d252 1
a252 1
    $outfile = $::opt_F || "";
d255 1
a255 1
    $body = $::opt_b || "";
d258 1
a258 1
    $ed = $::opt_e || $ENV{VISUAL} || $ENV{EDITOR} || $ENV{EDIT}
a260 1
	|| ($Is_MacOS && '')
d264 3
a266 3
    if ($::opt_n) {
	if (substr($::opt_n, 0, 2) eq 'ok' )	{
	    $::opt_o = substr($::opt_n, 1);
d275 2
a276 2
    if ($::opt_o) {
	if ($::opt_o eq 'k' or $::opt_o eq 'kay') {
d278 1
a278 1
	    if ($::opt_o eq 'k' and $age > 60 * 24 * 60 * 60 ) {
d289 3
a291 3
	    unless ($::opt_n) {
		$::opt_S = 1; # don't prompt for send
		$::opt_b = 1; # we have a body
d294 3
a296 3
	    $::opt_C = 1; # don't send a copy to the local admin
	    $::opt_s = 1; # we have a subject line
	    $subject = ($::opt_n ? 'Not ' : '')
d311 3
a313 3
    # that $::opt_C is forced.
    $cc = $::opt_C ? "" : (
	$::opt_c || $::Config{'perladmin'}
a331 1
	    : $Is_MacOS ? $ENV{'USER'}
d398 1
a398 1
    unless ($::opt_r) {
d402 2
a403 7
	$guess = $ENV{'REPLY-TO'} || $ENV{'REPLYTO'} || $from || '';
        if ($Is_MacOS) {
            require Mac::InternetConfig;
            $guess = $Mac::InternetConfig::InternetConfig{
                Mac::InternetConfig::kICEmail()
            };
        }
d449 1
a449 1
    if( !$::opt_C and !$::opt_c ) {
d472 1
a472 1
    unless ($::opt_e || $::opt_f || $::opt_b) {
d600 1
a600 1
	: $::opt_n ? "build failure" : "success";
d669 1
a669 1
    if ($::opt_A) {
d749 3
a751 8
        if ($Is_MacOS) {
            require ExtUtils::MakeMaker;
            ExtUtils::MM_MacOS::launch_file($filename);
            _prompt('', "Press Enter when done." );
        } else {    # we're not on oldschool mac os
            my $exit_status = system("$editor $filename");
            if ($exit_status) {
                my $desc = <<EOF;
d756 6
a761 6
                my $entry = _prompt( $desc, 'Editor', $editor );
                if ( $entry ne "" ) {
                    $editor = $entry;
                    next;
                } else {
                    paraprint <<EOF;
d765 1
a765 2
                    return;
                }
d768 1
a768 1
        return if ( $ok and not $::opt_n ) || $body;
d799 1
a799 1
    if( !$::opt_S ) {
d1019 1
d1113 2
a1114 2
    open( SENDMAIL, "|$sendmail -t -oi" )
        || die "'|$sendmail -t -oi' failed: $!";
d1220 1
a1220 1
This tool isn't apropriate for reporting bugs in any version
@


1.12
log
@No need for perlthanks binary when perlbug -T will do.
@
text
@d45 1
a45 1
    next if /PERL_GIT_UNCOMMITTED_CHANGES/; # XXX expand instead
d458 1
a458 1
    unless ($from) {
d462 1
a462 1
	$guess = $ENV{'REPLY-TO'} || $ENV{'REPLYTO'} || '';
d608 6
d718 4
d790 1
d878 1
a878 1
    * [Se]end the message to $address$andcc, 
d1141 1
a1141 1
    $fh->close;
d1166 1
a1166 1
        paraprint(<<"EOF"), die "\n";
d1169 6
@


1.11
log
@Merge in perl 5.10.1; part two
@
text
@d407 1
a407 2
If you wish to submit a bug report, please run it without the -T flag
(or run the program perlbug rather than perlthanks)
d414 1
a414 1
note to $thanksaddress instead of a bug report, please run 'perlthanks'.
a1224 2
B<perlthanks>

d1377 2
a1378 2
Yes, you can do this by either using the C<-T> option, or by invoking
the program as C<perlthanks>. Thank-you notes are good. It makes people
@


1.10
log
@fix conflicts and merge in local changes to perl 5.10.0
@
text
@d43 3
d87 3
d93 1
a93 1
use strict;
d98 1
a98 1
    eval "use Mail::Send;";
d100 1
a100 1
    eval "use Mail::Util;";
d103 1
a103 1
    eval "require File::Temp;";
d109 1
a109 1
my $Version = "1.36";
d150 16
a165 4

# TODO: - Allow the user to re-name the file on mail failure, and
#       make sure failure (transmission-wise) of Mail::Send is
#       accounted for.
d168 7
a174 4
my( $file, $usefile, $cc, $address, $perlbug, $testaddress, $filename, $messageid, $domain,
    $subject, $from, $verbose, $ed, $outfile, $Is_MacOS, $category, $severity,
    $fh, $me, $Is_MSWin32, $Is_Linux, $Is_VMS, $msg, $body, $andcc, %REP, $ok,
    $Is_OpenBSD);
d185 2
a186 2
    paraprint <<EOF;
Please use perlbug interactively. If you want to
d195 10
a204 1
Send();
d214 2
d221 1
d225 1
a225 1
    die "Invalid alternative($name) requested\n" unless grep(/^$name$/, keys %alts);
d227 3
a229 2
    if ($ok) {
	$alt = $alts{$name}{'ok'};
d232 1
d234 1
a234 1
Please pick a \u$name from the following:
a236 1

d243 2
a244 6
	    print "Please enter a \u$name [$alts{$name}{'default'}]: ";
	    $alt = <>;
	    chomp $alt;
	    if ($alt =~ /^\s*$/) {
		$alt = $alts{$name}{'default'};
	    }
d260 1
a260 1
        MacPerl::Ask('Provide command-line args here (-h for help):')
d263 1
a263 1
    if (!getopts("Adhva:s:b:f:F:r:e:SCc:to:n:")) { Help(); exit; };
d271 1
a271 1
    $perlbug = 'perlbug@@perl.org';
d276 14
d291 2
a292 1
    $address = $::opt_a || ($::opt_t ? $testaddress : $perlbug);
d333 1
a333 1
    $ok = 0;
d358 1
a358 1
	    $ok = 1;
d402 20
a421 11
	paraprint <<EOF;
This program provides an easy way to create a message reporting a bug
in perl, and e-mail it to $address.  It is *NOT* intended for
sending test messages or simply verifying that perl works, *NOR* is it
intended for reporting bugs in third-party perl modules.  It is *ONLY*
a means of reporting verifiable problems with the core perl distribution,
and any solutions to such problems, to the people who maintain perl.

If you're just looking for help with perl, try posting to the Usenet
newsgroup comp.lang.perl.misc.  If you're looking for help with using
perl with CGI, try posting to comp.infosystems.www.programming.cgi.
d423 1
d428 1
a428 1
    if (TrivialSubject($subject)) {
d433 9
a441 5
	paraprint <<EOF;
First of all, please provide a subject for the
message. It should be a concise description of
the bug or problem. "perl bug" or "perl problem"
is not a concise description.
d443 1
d447 1
a447 3
	    print "Subject: ";
	    $subject = <>;
	    chomp $subject;
d449 5
a453 1
		die "Aborting.\n";
d485 4
a488 2
Your e-mail address will be useful if you need to be contacted. If the
default shown is not your full internet e-mail address, please correct it.
d493 3
a495 2
So that you may be contacted if necessary, please enter
your full internet e-mail address here.
d504 1
a504 3
	    print "Your address [$guess]: ";
	    $from = <>;
	    chomp $from;
d516 6
a521 9
	paraprint <<EOF;
A copy of this report can be sent to your local
perl administrator. If the address is wrong, please
correct it, or enter 'none' or 'yourself' to not send
a copy.
EOF
	print "Local perl administrator [$cc]: ";
	my $entry = scalar <>;
	chomp $entry;
d530 5
a534 1
    $andcc = " and $cc" if $cc;
a538 25
	paraprint <<EOF;
Now you need to supply the bug report. Try to make
the report concise but descriptive. Include any
relevant detail. If you are reporting something
that does not work as you think it should, please
try to include example of both the actual
result, and what you expected.

Some information about your local
perl configuration will automatically be included
at the end of the report. If you are using any
unusual version of perl, please try and confirm
exactly which versions are relevant.

You will probably want to use an editor to enter
the report. If "$ed" is the editor you want
to use, then just press Enter, otherwise type in
the name of the editor you would like to use.

If you would like to use a prepared file, type
"file", and you will be asked for the filename.
EOF
	print "Editor [$ed]: ";
	my $entry =scalar <>;
	chomp $entry;
d540 43
d590 5
a594 4
    my $report_about_module = '';
    if ($::HaveCoreList) {
	paraprint <<EOF;
Is your report about a Perl module? If yes, enter its name. If not, skip.
d596 4
a599 7
	print "Module []: ";
	my $entry = scalar <>;
	$entry =~ s/^\s+//s;
	$entry =~ s/\s+$//s;
	if ($entry ne q{}) {
	    $category ||= 'library';
	    $report_about_module = $entry;
d601 1
a601 1
	    unless ($first_release) {
d603 3
a605 4
Module $entry is not a core module. Please check that
you entered its name correctly. If it is correct,
abort this program, try searching for $entry on
search.cpan.org, and report it there.
d607 9
a615 1
	    }
d631 1
a631 1
	paraprint <<EOF;
d634 1
a634 3
	print "Filename: ";
	my $entry = scalar <>;
	chomp $entry;
d638 2
a639 1
No filename? I'll let you go back and choose an editor again.
d646 5
a650 3
I'm sorry, but I can't read from `$entry'. Maybe you mistyped the name of
the file? If you don't want to send a file, just enter a blank line and you
can get back to the editor selection.
d658 3
a660 2
    open(REP,">$filename") or die "Unable to create report file `$filename': $!\n";
    my $reptype = !$ok ? "bug" : $::opt_n ? "build failure" : "success";
d672 1
a672 1
		or die "Unable to read report file from `$file': $!\n";
d676 1
a676 1
	close(F) or die "Error closing `$file': $!";
d678 2
a679 1
	print REP <<EOF;
d682 12
a693 1
[Please enter your report here]
d700 1
d705 3
a707 9
    # read in the report template once so that
    # we can track whether the user does any editing.
    # yes, *all* whitespace is ignored.
    open(REP, "<$filename") or die "Unable to open report file `$filename': $!\n";
    while (<REP>) {
	s/\s+//g;
	$REP{$_}++;
    }
    close(REP) or die "Error closing report file `$filename': $!";
d719 6
d790 2
a791 6
	paraprint <<EOF;
Please make sure that the name of the editor you want to use is correct.
EOF
	print "Editor [$ed]: ";
	my $entry =scalar <>;
	chomp $entry;
d795 37
a831 20
tryagain:
    my $sts;
    $sts = system("$ed $filename") unless $Is_MacOS;
    if ($Is_MacOS) {
        require ExtUtils::MakeMaker;
        ExtUtils::MM_MacOS::launch_file($filename);
        paraprint <<EOF;
Press Enter when done.
EOF
        scalar <>;
    }
    if ($sts) {
	paraprint <<EOF;
The editor you chose (`$ed') could apparently not be run!
Did you mistype the name of your editor? If so, please
correct it here, otherwise just press Enter.
EOF
	print "Editor [$ed]: ";
	my $entry =scalar <>;
	chomp $entry;
d833 14
a846 10
	if ($entry ne "") {
	    $ed = $entry;
	    goto tryagain;
	} else {
	    paraprint <<EOF;
You may want to save your report to a file, so you can edit and mail it
yourself.
EOF
	}
    }
a847 12
    return if ($ok and not $::opt_n) || $body;
    # Check that we have a report that has some, eh, report in it.
    my $unseen = 0;

    open(REP, "<$filename") or die "Couldn't open `$filename': $!\n";
    # a strange way to check whether any significant editing
    # have been done: check whether any new non-empty lines
    # have been added. Yes, the below code ignores *any* space
    # in *any* line.
    while (<REP>) {
	s/\s+//g;
	$unseen++ if $_ ne '' and not exists $REP{$_};
d849 1
a850 13
    while ($unseen == 0) {
	paraprint <<EOF;
I am sorry but it looks like you did not report anything.
EOF
	print "Action (Retry Edit/Cancel) ";
	my ($action) = scalar(<>);
	if ($action =~ /^[re]/i) { # <R>etry <E>dit
	    goto tryagain;
	} elsif ($action =~ /^[cq]/i) { # <C>ancel, <Q>uit
	    Cancel();
	}
    }
} # sub Edit
d854 1
a854 1
    print "\nCancelling.\n";
d862 13
a874 6
	    paraprint <<EOF;
Now that you have completed your report, would you like to send
the message to $address$andcc, display the message on
the screen, re-edit it, display/change the subject,
or cancel without sending anything?
You may also save the message as a file to mail at another time.
d877 3
a879 4
	    print "Action (Send/Display/Edit/Subject/Save to File): ";
	    my $action = scalar <>;
	    chomp $action;

d881 1
a881 22
		my $file_save = $outfile || "perlbug.rep";
		print "\n\nName of file to save message in [$file_save]: ";
		my $file = scalar <>;
		chomp $file;
		$file = $file_save if $file eq "";

		unless (open(FILE, ">$file")) {
		    print "\nError opening $file: $!\n\n";
		    goto retry;
		}
		open(REP, "<$filename") or die "Couldn't open file `$filename': $!\n";
		print FILE "To: $address\nSubject: $subject\n";
		print FILE "Cc: $cc\n" if $cc;
		print FILE "Reply-To: $from\n" if $from;
		print FILE "Message-Id: $messageid\n" if $messageid;
		print FILE "\n";
		while (<REP>) { print FILE }
		close(REP) or die "Error closing report file `$filename': $!";
		close(FILE) or die "Error closing $file: $!";

		print "\nMessage saved in `$file'.\n";
		exit;
d884 1
a884 1
		open(REP, "<$filename") or die "Couldn't open file `$filename': $!\n";
d886 1
a886 1
		close(REP) or die "Error closing report file `$filename': $!";
d888 1
a888 6
		print "Subject: $subject\n";
		print "If the above subject is fine, just press Enter.\n";
		print "If not, type in the new subject.\n";
		print "Subject: ";
		my $reply = scalar <STDIN>;
		chomp $reply;
d897 2
a898 5
		print "Are you certain you want to send this message?\n"
		    . 'Please type "yes" if you are: ';
		my $reply = scalar <STDIN>;
		chomp $reply;
		if ($reply eq "yes") {
d902 1
a902 3
That wasn't a clear "yes", so I won't send your message. If you are sure
your message should be sent, type in "yes" (without the quotes) at the
confirmation prompt.
d912 1
a912 1
I'm sorry, but I didn't understand that. Please type "send" or "save".
d925 1
a925 1
	print "\nThat doesn't look like a good subject.  Please be more verbose.\n\n";
d932 11
d944 1
a945 4
    if ($outfile) {
	open SENDMAIL, ">$outfile" or die "Couldn't open '$outfile': $!\n";
	goto sendout;
    }
d947 1
a947 1
    # on linux certain mail implementations won't accept the subject
d950 9
a958 44
    if ($::HaveSend && !$Is_Linux && !$Is_OpenBSD) {
	$msg = new Mail::Send Subject => $subject, To => $address;
	$msg->cc($cc) if $cc;
	$msg->add("Reply-To",$from) if $from;

	$fh = $msg->open;
	open(REP, "<$filename") or die "Couldn't open `$filename': $!\n";
	while (<REP>) { print $fh $_ }
	close(REP) or die "Error closing $filename: $!";
	$fh->close;

	print "\nMessage sent.\n";
    } elsif ($Is_VMS) {
	if ( ($address =~ /@@/ and $address !~ /^\w+%"/) or
	     ($cc      =~ /@@/ and $cc      !~ /^\w+%"/) ) {
	    my $prefix;
	    foreach (qw[ IN MX SMTP UCX PONY WINS ], '') {
		$prefix = "$_%", last if $ENV{"MAIL\$PROTOCOL_$_"};
	    }
	    $address = qq[${prefix}"$address"] unless $address =~ /^\w+%"/;
	    $cc = qq[${prefix}"$cc"] unless !$cc || $cc =~ /^\w+%"/;
	}
	$subject =~ s/"/""/g; $address =~ s/"/""/g; $cc =~ s/"/""/g;
	my $sts = system(qq[mail/Subject="$subject" $filename. "$address","$cc"]);
	if ($sts) {
	    die <<EOF;
Can't spawn off mail
	(leaving bug report in $filename): $sts
EOF
	}
    } else {
	my $sendmail = "";
	for (qw(/usr/lib/sendmail /usr/sbin/sendmail /usr/ucblib/sendmail)) {
	    $sendmail = $_, last if -e $_;
	}
	if ($^O eq 'os2' and $sendmail eq "") {
	    my $path = $ENV{PATH};
	    $path =~ s:\\:/: ;
	    my @@path = split /$Config{'path_sep'}/, $path;
	    for (@@path) {
		$sendmail = "$_/sendmail", last if -e "$_/sendmail";
		$sendmail = "$_/sendmail.exe", last if -e "$_/sendmail.exe";
	    }
	}
d960 3
a962 19
	paraprint(<<"EOF"), die "\n" if $sendmail eq "";
I am terribly sorry, but I cannot find sendmail, or a close equivalent, and
the perl package Mail::Send has not been installed, so I can't send your bug
report. We apologize for the inconvenience.

So you may attempt to find some way of sending your message, it has
been left in the file `$filename'.
EOF
	open(SENDMAIL, "|$sendmail -t -oi") || die "'|$sendmail -t -oi' failed: $!";
sendout:
	print SENDMAIL "To: $address\n";
	print SENDMAIL "Subject: $subject\n";
	print SENDMAIL "Cc: $cc\n" if $cc;
	print SENDMAIL "Reply-To: $from\n" if $from;
	print SENDMAIL "Message-Id: $messageid\n" if $messageid;
	print SENDMAIL "\n\n";
	open(REP, "<$filename") or die "Couldn't open `$filename': $!\n";
	while (<REP>) { print SENDMAIL $_ }
	close(REP) or die "Error closing $filename: $!";
d964 4
a967 5
	if (close(SENDMAIL)) {
	    printf "\nMessage %s.\n", $outfile ? "saved" : "sent";
	} else {
	    warn "\nSendmail returned status '", $? >> 8, "'\n";
	}
d969 3
a971 2
    1 while unlink($filename);  # remove all versions under VMS
} # sub Send
d976 7
a982 3
A program to help generate bug reports about perl5, and mail them.
It is designed to be used interactively. Normally no arguments will
be needed.
a983 1
Usage:
a987 1
Simplest usage:  run "$0", and follow the prompts.
d996 2
a997 2
  -a    Address to send the report to. Defaults to `$address'.
  -c    Address to send copy of report to. Defaults to `$cc'.
d1006 2
a1007 1
  -t    Test mode. The target address defaults to `$testaddress'.
a1040 1
    print "\n\n";
d1048 154
d1215 2
d1221 1
a1221 1
S<[ B<-S> ]> S<[ B<-t> ]>  S<[ B<-d> ]>  S<[ B<-A> ]>  S<[ B<-h> ]>
d1226 2
a1229 2
A program to help generate bug reports about perl or the modules that
come with it, and mail them.
d1231 5
a1235 13
If you have found a bug with a non-standard port (one that was not part
of the I<standard distribution>), a binary distribution, or a
non-standard module (such as Tk, CGI, etc), then please see the
documentation that came with that distribution to determine the correct
place to report bugs.

C<perlbug> is designed to be used interactively. Normally no arguments
will be needed.  Simply run it, and follow the prompts.

If you are unable to run B<perlbug> (most likely because you don't have
a working setup to send mail that perlbug recognizes), you may have to
compose your own report, and email it to B<perlbug@@perl.org>.  You might
find the B<-d> option useful to get summary information in that case.
d1237 20
a1256 2
In any case, when reporting a bug, please make sure you have run through
this checklist:
d1266 12
a1277 5
Look at http://www.perl.com/ to find out.  If it is not the latest
released version, get that one and see whether your bug has been
fixed.  Note that bug reports about old versions of Perl, especially
those prior to the 5.0 release, are likely to fall upon deaf ears.
You are on your own if you continue to use perl1 .. perl4.
d1281 16
a1296 12
A significant number of the bug reports we get turn out to be documented
features in Perl.  Make sure the behavior you are witnessing doesn't fall
under that category, by glancing through the documentation that comes
with Perl (we'll admit this is no mean task, given the sheer volume of
it all, but at least have a look at the sections that I<seem> relevant).

Be aware of the familiar traps that perl programmers of various hues
fall into.  See L<perltrap>.

Check in L<perldiag> to see what any Perl error message(s) mean.
If message isn't in perldiag, it probably isn't generated by Perl.
Consult your operating system documentation instead.
d1298 1
a1298 1
If you are on a non-UNIX platform check also L<perlport>, as some
d1301 3
a1303 2
Try to study the problem under the Perl debugger, if necessary.
See L<perldebug>.
d1308 2
a1309 8
fixed, because if no one can duplicate the problem, no one can fix it.
A good test case has most of these attributes: fewest possible number
of lines; few dependencies on external commands, modules, or
libraries; runs on most platforms unimpeded; and is self-documenting.

A good test case is almost always a good candidate to be on the perl
test suite.  If you have the time, consider making your test case so
that it will readily fit into the standard test suite.
d1311 13
a1323 2
Remember also to include the B<exact> error messages, if any.
"Perl complained something" is not an exact error message.
d1327 3
a1329 1
report.  NOTE: unless your Perl has been compiled with debug info
d1333 1
a1333 1
reproduce the dump and the stack trace.
d1337 4
a1340 4
The easier it is to understand a reproducible bug, the more likely it
will be fixed.  Anything you can provide by way of insight into the
problem helps a great deal.  In other words, try to analyze the
problem (to the extent you can) and report your discoveries.
d1345 6
a1350 6
definitely be fixed.  Use the C<diff> program to generate your patches
(C<diff> is being maintained by the GNU folks as part of the B<diffutils>
package, so you should be able to get it from any of the GNU software
repositories).  If you do submit a patch, the cool-dude counter at
perlbug@@perl.org will register you as a savior of the world.  Your
patch may be returned with requests for changes, or requests for more
d1353 9
a1361 9
Here are some clues for creating quality patches: Use the B<-c> or
B<-u> switches to the diff program (to create a so-called context or
unified diff).  Make sure the patch is not reversed (the first
argument to diff is typically the original file, the second argument
your changed file).  Make sure you test your patch by applying it with
the C<patch> program before you send it on its way.  Try to follow the
same style as the code you are trying to patch.  Make sure your patch
really does work (C<make test>, if the thing you're patching supports
it).
d1366 6
a1371 6
crucial information about your version of perl.  If C<perlbug> is unable
to mail your report after you have typed it in, you may have to compose
the message yourself, add the output produced by C<perlbug -d> and email
it to B<perlbug@@perl.org>.  If, for some reason, you cannot run
C<perlbug> at all on your system, be sure to include the entire output
produced by running C<perl -V> (note the uppercase V).
d1374 9
a1382 3
your Subject line informative.  "a bug" not informative.  Neither is
"perl crashes" nor "HELP!!!".  These don't help.
A compact description of what's wrong is fine.
d1386 7
a1392 4
Having done your bit, please be prepared to wait, to be told the bug
is in your code, or even to get no reply at all.  The Perl maintainers
are busy folks, so if your problem is a small one or if it is difficult
to understand or already known, they may not respond with a personal reply.
d1394 8
a1401 4
C<Changes> file in any development releases since the time you submitted
the bug, and encourage the maintainers with kind words (but never any
flames!).  Feel free to resend your bug report if the next released
version of perl comes out and your bug is still present.
d1503 4
d1515 6
a1520 6
Kenneth Albanowski (E<lt>kjahds@@kjahds.comE<gt>), subsequently I<doc>tored
by Gurusamy Sarathy (E<lt>gsar@@activestate.comE<gt>), Tom Christiansen
(E<lt>tchrist@@perl.comE<gt>), Nathan Torkington (E<lt>gnat@@frii.comE<gt>),
Charles F. Randall (E<lt>cfr@@pobox.comE<gt>), Mike Guy
(E<lt>mjtg@@cam.a.ukE<gt>), Dominic Dunlop (E<lt>domo@@computer.orgE<gt>),
Hugo van der Sanden (E<lt>hv@@crypt.org<gt>),
d1523 2
a1524 1
and Richard Foley (E<lt>richard@@rfi.netE<gt>).
@


1.9
log
@merge in perl 5.8.8
@
text
@a30 1
my $patchnum = "";
a32 1
    $patchnum = $1 if /#define PERL_PATCHNUM\s+(\d+)/;
a44 1
    s/"\s+STRINGIFY\(PERL_PATCHNUM\)/$patchnum"/;
d64 1
a64 1
my $extract_version = sprintf("v%vd", $^V);
d99 2
d103 1
a103 1
my $Version = "1.35";
d143 1
d155 1
a155 1
my $perl_version = $^V ? sprintf("v%vd", $^V) : $];
d506 23
@


1.8
log
@merge 5.8.5 into HEAD
remove now-unused files
crank libperl shared library major number
update Makefile.bsd-wrapper
tweak openbsd hints file for arm and m68k
@
text
@d31 1
d34 6
a39 1
    last if $_ =~ /^\s*static\s+char.*?local_patches\[\]\s*=\s*{\s*$/;
d47 1
@


1.7
log
@Resolve conflicts for perl 5.8.2, remove old files, and add OpenBSD-specific scaffolding
@
text
@d92 3
d97 1
a97 1
my $Version = "1.34";
d136 1
d965 12
a976 4
    my $dir = File::Spec->tmpdir();
    $filename = "bugrep0$$";
    $filename++ while -e File::Spec->catfile($dir, $filename);
    $filename = File::Spec->catfile($dir, $filename);
@


1.6
log
@Resolve conflicts, remove old files, merge local changes
@
text
@d141 2
a142 1
    $fh, $me, $Is_MSWin32, $Is_Linux, $Is_VMS, $msg, $body, $andcc, %REP, $ok);
d215 1
d838 1
a838 1
    if ($::HaveSend && !$Is_Linux) {
@


1.5
log
@merge in perl 5.6.1 with our local changes
@
text
@d94 1
a94 1
my $Version = "1.33";
d132 1
d139 1
a139 1
my( $file, $usefile, $cc, $address, $perlbug, $testaddress, $filename,
d141 1
a141 1
    $fh, $me, $Is_MSWin32, $Is_VMS, $msg, $body, $andcc, %REP, $ok);
d213 1
d231 1
a231 1
    $testaddress = 'perlbug-test@@perl.com';
d256 1
a256 1

d318 12
d359 5
a370 2
	print "Subject: ";
	$subject = <>;
d373 2
a374 2
	while ($subject !~ /\S/) {
	    print "\nPlease enter a subject: ";
d376 2
a377 1
	    if ($err++ > 5) {
d380 1
a380 2
	}
	chop $subject;
d397 2
a398 10
	    my $domain;
	    if ($::HaveUtil) {
		$domain = Mail::Util::maildomain();
	    } elsif ($Is_MSWin32) {
		$domain = $ENV{'USERDOMAIN'};
	    } else {
		require Sys::Hostname;
		$domain = Sys::Hostname::hostname();
	    }
	    if ($domain) {
d428 1
a428 1
	    chop $from;
d448 1
a448 1
	chop $entry;
d486 1
a486 1
	chop $entry;
d513 1
a513 1
	chop $entry;
d630 1
a630 1
    push @@env, grep /^(?:PERL|LC_|LANG)/, keys %ENV;
d657 1
a657 1
	chop $entry;
d680 1
a680 1
	chop $entry;
d734 2
a735 1
the screen, re-edit it, or cancel without sending anything?
d739 1
a739 1
	    print "Action (Send/Display/Edit/Cancel/Save to File): ";
d741 1
a741 1
	    chop $action;
d744 2
a745 1
		print "\n\nName of file to save message in [perlbug.rep]: ";
d747 2
a748 2
		chop $file;
		$file = "perlbug.rep" if $file eq "";
d758 1
d771 13
d789 1
a789 1
		chop $reply;
d813 13
d832 5
a836 1
    if ($::HaveSend) {
d895 1
d1138 1
a1138 1
Address to send the report to.  Defaults to `perlbug@@perl.org'.
d1230 1
a1230 1
Test mode.  The target address defaults to `perlbug-test@@perl.com'.
d1245 1
a1245 1
Hugo van der Sanden (E<lt>hv@@crypt0.demon.co.ukE<gt>),
@


1.4
log
@perl-5.6.0 + local changes
@
text
@d48 1
a48 1
close PATCH_LEVEL;
d94 1
a94 1
my $Version = "1.28";
d127 5
d139 1
a139 1
    $subject, $from, $verbose, $ed, $outfile, $Is_MacOS, $category, $severity, 
a156 1
if (!-t STDOUT && !$outfile) { Dump(*STDOUT); exit; }
d165 1
a165 1
sub ask_for_alternatives {
d167 13
a179 2
    my $default = shift;
    my @@alts = @@_;
d181 5
a185 1
    paraprint <<EOF;
d191 13
a203 13
    my $err = 0;
    my $joined_alts = join('|', @@alts);
    do {
	if ($err++ > 5) {
	    die "Invalid $name: aborting.\n";
	}
	print "Please enter a \u$name [$default]: ";
	$alt = <>;
	chomp $alt;
	if ($alt =~ /^\s*$/) {
	    $alt = $default;
	}
    } while ($alt !~ /^($joined_alts)$/i);
d218 1
a218 1
    if (!getopts("dhva:s:b:f:F:r:e:SCc:to:n:")) { Help(); exit; };
d226 1
a226 1
    $perlbug = 'perlbug@@perl.com';
a297 2
	    $category = "install";
	    $severity = "none";
d488 1
a488 3
    $category ||= ask_for_alternatives("category", "core",
				     qw(core docs install
					library utilities));
d491 1
a491 3
    $severity ||= ask_for_alternatives("severity", "low",
				       qw(critical high medium
					  low wishlist none));
d525 1
a525 1
    open(REP,">$filename");
d542 1
a542 1
	close(F);
d556 1
a556 1
    close(REP);
d561 1
a561 1
    open(REP, "<$filename");
d566 1
a566 1
    close(REP);
d577 7
d653 2
a654 1
    my $sts = system("$ed $filename") unless $Is_MacOS;
d688 1
a688 1
    open(REP, "<$filename");
d743 1
a743 1
		open(REP, "<$filename");
d749 2
a750 2
		close(REP);
		close(FILE);
d756 1
a756 1
		open(REP, "<$filename");
d758 1
a758 1
		close(REP);
d779 1
a779 1
	    } elsif ($action =~ /^s/) {
d800 1
a800 1
	open(REP, "<$filename");
d802 1
a802 1
	close(REP);
d847 1
a847 1
	open(SENDMAIL, "|$sendmail -t") || die "'|$sendmail -t' failed: $!";
d854 1
a854 1
	open(REP, "<$filename");
d856 1
a856 1
	close(REP);
d877 1
a877 1
$0  [-v] [-r returnaddress] [-ok | -okay | -nok | -nokay]
d899 1
a899 2
  -d    Data mode (the default if you redirect or pipe output.)
        This prints out your configuration data, without mailing
d901 1
d916 1
a916 4
    my $dir = $Is_VMS ? 'sys$scratch:'
	: ($Is_MSWin32 && $ENV{'TEMP'}) ? $ENV{'TEMP'}
        : $Is_MacOS ? $ENV{'TMPDIR'}
	: '/tmp';
a917 1
#    $dir .= "\\" if $Is_MSWin32 and $dir !~ m|[\\/]$|;
d949 1
a949 1
S<[ B<-S> ]> S<[ B<-t> ]>  S<[ B<-d> ]>  S<[ B<-h> ]>
d952 1
a952 1
S<[ B<-ok> | B<-okay> | B<-nok> | B<-nokay> ]>
d970 1
a970 1
compose your own report, and email it to B<perlbug@@perl.com>.  You might
d1048 1
a1048 1
perlbug@@perl.com will register you as a savior of the world.  Your
d1068 1
a1068 1
it to B<perlbug@@perl.com>.  If, for some reason, you cannot run
d1095 8
a1102 1
Address to send the report to.  Defaults to `perlbug@@perl.com'.
@


1.3
log
@perl5.005_03 (stock)
@
text
@d6 1
d27 2
a28 1
open PATCH_LEVEL, "<../patchlevel.h" or die "Can't open patchlevel.h: $!";
d40 2
a41 2
    s/^\s+,?"?//;
    s/"?,?$//;
d60 2
d67 1
a67 1
my \$config_tag1 = '$] - $Config{cf_time}';
d81 1
d94 1
a94 1
my $Version = "1.26";
d125 2
d134 1
a134 1
    $subject, $from, $verbose, $ed, $outfile,
d137 3
a139 1
my $config_tag2 = "$] - $Config{cf_time}";
d161 27
d193 5
d240 1
d277 1
a277 1
		    . "OK: perl $] ${patch_tags}on"
d279 2
d302 1
d355 7
d470 10
d517 1
a517 1
generated with the help of perlbug $Version running under perl $].
d559 8
a566 2
    print REP "\n---\n";
    print REP "This perlbug was built using Perl $config_tag1\n",
d571 1
a571 1
Site configuration information for perl $]:
d587 1
a587 1
\@@INC for perl $]:
d596 1
a596 1
Environment for perl $]:
d598 7
a604 4
    for my $env (sort
	(qw(PATH LD_LIBRARY_PATH LANG PERL_BADLANG SHELL HOME LOGDIR LANGUAGE),
	grep /^(?:PERL|LC_)/, keys %ENV)
    ) {
d610 1
a610 1
	print OUT "\nComplete configuration data for perl $]:\n\n";
d633 9
a641 1
    my $sts = system("$ed $filename");
d865 1
a865 1
  -F	File to output the resulting mail message to, instead of mailing.
d878 1
a878 1
  -d	Data mode (the default if you redirect or pipe output.)
d897 2
a898 1
	: '/tmp/';
d900 3
a902 3
    $dir .= "\\" if $Is_MSWin32 and $dir !~ m|[\\/]$|;
    $filename++ while -e "$dir$filename";
    $filename = "$dir$filename";
d961 1
a961 1
=item What version of perl you are running?
d969 1
a969 1
fixed.  Note that bug reports about old versions of perl, especially
d976 1
a976 1
features in perl.  Make sure the behavior you are witnessing doesn't fall
d978 1
a978 1
with perl (we'll admit this is no mean task, given the sheer volume of
d988 2
a989 2
If you are on a non-UNIX platform check also L<perlport>, some
features may not be implemented or work differently.
d991 1
a991 1
Try to study the problem under the perl debugger, if necessary.
d1013 1
a1013 1
because it will most probably contain only the function names, not
d1021 2
a1022 2
problem helps a great deal.  In other words, try to analyse the
problem to the extent you feel qualified and report your discoveries.
d1056 3
a1058 3
your subject informative.  "a bug" not informative.  Neither is "perl
crashes" nor "HELP!!!", these all are null information.  A compact
description of what's wrong is fine.
d1063 1
a1063 1
is in your code, or even to get no reply at all.  The perl maintainers
d1174 1
a1174 1
by Gurusamy Sarathy (E<lt>gsar@@umich.eduE<gt>), Tom Christiansen
d1178 4
a1181 2
Hugo van der Sanden (E<lt>hv@@crypt0.demon.co.ukE<gt>), and
Jarkko Hietaniemi (E<lt>jhi@@iki.fiE<gt>).
@


1.2
log
@perl 5.004_04
@
text
@d5 1
d17 1
d22 1
a22 1
open OUT,">$file" or die "Can't create $file: $!";
d32 1
a32 1
};
d42 3
a44 5
};
my $patch_desc = "'" . join("',\n\t'", @@patches) . "'";
my @@patch_tags = map { my $p=$_; $p=~s/\s.*//; $p } @@patches;
my $patch_tags = join " ", map { "+$_" } @@patch_tags;
$patch_tags .= " " if $patch_tags;
d68 1
a68 1
	$patch_desc
a77 9

BEGIN {
	eval "use Mail::Send;";
	$::HaveSend = ($@@ eq "");
	eval "use Mail::Util;";
	$::HaveUtil = ($@@ eq "");
};


d82 6
d89 1
a89 1
my($Version) = "1.20";
d114 6
d122 1
a122 1
#       make sure failure (transmission-wise) of Mail::Send is 
d127 1
a127 1
    $subject, $from, $verbose, $ed, 
d134 5
a138 7
if($::opt_h) { Help(); exit; }

if($::opt_d) { Dump(*STDOUT); exit; }

if(!-t STDIN) {
	paraprint <<EOF;
Please use perlbug interactively. If you want to 
d141 1
a141 1
	die "\n";
d143 1
a143 2

if(!-t STDOUT) { Dump(*STDOUT); exit; }
d146 1
a146 1
Edit() unless $usefile;
d153 38
a190 2
 
	# -------- Setup --------
d192 2
a193 2
	$Is_MSWin32 = $^O eq 'MSWin32';
	$Is_VMS = $^O eq 'VMS';
d195 5
a199 2
	getopts("dhva:s:b:f:r:e:SCc:to:");
	
d201 27
a227 54
	# This comment is needed to notify metaconfig that we are
	# using the $perladmin, $cf_by, and $cf_time definitions.


	# -------- Configuration ---------
	
	# perlbug address
	$perlbug = 'perlbug@@perl.com';

	
	# Test address
	$testaddress = 'perlbug-test@@perl.com';
	
	# Target address
	$address = $::opt_a || ($::opt_t ? $testaddress : $perlbug);

	# Users address, used in message and in Reply-To header
	$from = $::opt_r || "";

	# Include verbose configuration information
	$verbose = $::opt_v || 0;

	# Subject of bug-report message
	$subject = $::opt_s || "";

	# Send a file
	$usefile = ($::opt_f || 0);
	
	# File to send as report
	$file = $::opt_f || "";

	# Body of report
	$body = $::opt_b || "";

	# Editor
	$ed = (	$::opt_e || $ENV{VISUAL} || $ENV{EDITOR} || $ENV{EDIT} || 
		      ($Is_VMS ? "edit/tpu" : $Is_MSWin32 ? "notepad" : "vi")
	      );
	      
        # OK - send "OK" report for build on this system
        $ok = 0;
	if ( $::opt_o ) {
	    if ( $::opt_o eq 'k' or $::opt_o eq 'kay' ) {
                my $age = time - $patchlevel_date;
                if ( $::opt_o eq 'k' and $age > 60 * 24 * 60 * 60 ) {
                    my $date = localtime $patchlevel_date;
                    print <<"EOF";
\"perlbug -ok\" does not report on Perl versions which are more than
60 days old.  This Perl version was constructed on $date.
If you really want to report this, use \"perlbug -okay\".
EOF
                    exit();
                };
		# force these options
d229 2
a230 11
		$::opt_C = 1; # don't send a copy to the local admin
		$::opt_s = 1;
		$subject = "OK: perl $] ${patch_tags}on"
			  ." $::Config{'archname'} $::Config{'osvers'} $subject";
		$::opt_b = 1;
		$body    = "Perl reported to build OK on this system.\n";
		$ok = 1;
	    }
	    else {
		Help();
		exit();
d232 9
d242 1
a242 19
      
	# Possible administrator addresses, in order of confidence
	# (Note that cf_email is not mentioned to metaconfig, since
	# we don't really want it. We'll just take it if we have to.)
        #
        # This has to be after the $ok stuff above because of the way
        # that $::opt_C is forced.
	$cc = ($::opt_C ? "" : (
		$::opt_c || $::Config{perladmin} || $::Config{cf_email} || $::Config{cf_by}
		));
	
	# My username
	$me = ( $Is_MSWin32 
		? $ENV{'USERNAME'} 
		: ( $^O eq 'os2' 
		    ? $ENV{'USER'} || $ENV{'LOGNAME'} 
		    : eval { getpwuid($<) }) );	# May be missing

}
d244 20
d266 2
a267 3

	# Explain what perlbug is
    if ( ! $ok ) {
a278 1

d282 5
a286 6

	# Prompt for subject of message, if needed
	if(! $subject) {
		paraprint <<EOF;
First of all, please provide a subject for the 
message. It should be a concise description of 
d289 3
d293 7
a299 15
EOF
		print "Subject: ";
	
		$subject = <>;
		chop $subject;
	
		my($err)=0;
		while( $subject =~ /^\s*$/ ) {
			print "\nPlease enter a subject: ";
			$subject = <>;
			chop $subject;
			if($err++>5) {
				die "Aborting.\n";
			}
		}
d301 2
a302 1
	
d304 19
a322 10
	# Prompt for return address, if needed
	if( !$from) {

		# Try and guess return address
		my($domain);
		
		if($::HaveUtil) {
			$domain = Mail::Util::maildomain();
		} elsif ($Is_MSWin32) {
			$domain = $ENV{'USERDOMAIN'};
d324 1
a324 2
			require Sys::Hostname;
			$domain = Sys::Hostname::hostname();
d326 2
a327 19
	    
	    my($guess);
	                     
	        if( !$domain) {
	        	$guess = "";
	        } elsif ($Is_VMS && !$::Config{'d_socket'}) { 
	        	$guess = "$domain\:\:$me";
	        } else {
		    	$guess = "$me\@@$domain" if $domain;
		    	$guess = "$me\@@unknown.addresss" unless $domain;
			}
			
		$guess = $ENV{'REPLYTO'} if defined($ENV{'REPLYTO'});
		$guess = $ENV{"REPLY-TO"} if defined($ENV{'REPLY-TO'});
	
		if( $guess ) {
		    if ( ! $ok ) {
			paraprint <<EOF;

d329 3
a333 1

d335 4
a338 5
                    }
		} else {
			paraprint <<EOF;

So that you may be contacted if necessary, please enter 
a339 1

d341 1
a341 1
		}
d343 9
a351 24
		if ( $ok && $guess ne '' ) {
		    # use it
		    $from = $guess;
		}
		else {
		    # verify it
		    print "Your address [$guess]: ";
		    
		    $from = <>;
		    chop $from;
		    
		    if($from eq "") { $from = $guess }
		}
	
	}
	
	#if( $from =~ /^(.*)\@@(.*)$/ ) {
	#	$mailname = $1;
	#	$maildomain = $2;
	#}

	if( $from eq $cc or $me eq $cc ) {
		# Try not to copy ourselves
		$cc = "yourself";
d353 1
d355 4
d360 3
a362 5
	# Prompt for administrator address, unless an override was given
	if( !$::opt_C and !$::opt_c ) {
		paraprint <<EOF;


d364 1
a364 1
perl administrator. If the address is wrong, please 
a366 1

d368 7
a374 11

		print "Local perl administrator [$cc]: ";
	
		my($entry) = scalar(<>);
		chop $entry;
	
		if($entry ne "") {
			$cc = $entry;
			if($me eq $cc) { $cc = "" }
		}
	
d376 1
d378 2
a379 3
	if($cc =~ /^(none|yourself|me|myself|ourselves)$/i) { $cc = "" }

	$andcc = " and $cc" if $cc;
d381 1
d383 2
a384 6
	
	# Prompt for editor, if no override is given
	if(! $::opt_e and ! $::opt_f and ! $::opt_b) {
		paraprint <<EOF;


d386 1
a386 1
the report concise but descriptive. Include any 
d389 1
a389 1
try to include example of both the actual 
d393 1
a393 1
perl configuration will automatically be included 
a404 1

d406 9
a414 12

		print "Editor [$ed]: ";
	
		my($entry) =scalar(<>);
		chop $entry;
		
		$usefile = 0;
		if($entry eq "file") {
			$usefile = 1;
		} elsif($entry ne "") {
			$ed = $entry;
		} 
d416 1
d418 2
d421 2
a422 15
	# Generate scratch file to edit report in
	
	{
	my($dir) = ($Is_VMS ? 'sys$scratch:' :
		    (($Is_MSWin32 && $ENV{'TEMP'}) ? $ENV{'TEMP'} : '/tmp/'));
	$filename = "bugrep0$$";
	$dir .= "\\" if $Is_MSWin32 and $dir !~ m|[\\/]$|;
	$filename++ while -e "$dir$filename";
	$filename = "$dir$filename";
	}
	
	
	# Prompt for file to read report from, if needed
	
	if( $usefile and ! $file) {
d424 1
a424 2
		paraprint <<EOF;

d426 4
d431 3
d435 2
d438 2
a439 17
		print "Filename: ";
	
		my($entry) = scalar(<>);
		chop($entry);

		if($entry eq "") {
			paraprint <<EOF;
			
No filename? I'll let you go back and choose an editor again.			

EOF
			goto editor;
		}
		
		if(!-f $entry or !-r $entry) {
			paraprint <<EOF;
			
a442 1

d444 1
a444 4
			goto filename;
		}
		$file = $entry;

d446 2
d449 3
d453 1
a453 7
	# Generate report

	open(REP,">$filename");

	my $reptype = $ok ? "success" : "bug";

	print REP <<EOF;
d459 11
a469 10
	if($body) {
		print REP $body;
	} elsif($usefile) {
		open(F,"<$file") or die "Unable to read report file from `$file': $!\n";
		while(<F>) {
		print REP $_
		}
		close(F);
	} else {
		print REP <<EOF;
d479 3
a481 4
	}
	
	Dump(*REP);
	close(REP);
d483 10
a492 9
	# read in the report template once so that
	# we can track whether the user does any editing.
	# yes, *all* whitespace is ignored.
        open(REP, "<$filename");
        while (<REP>) {
		s/\s+//g;
		$REP{$_}++;
	}
	close(REP);
d494 2
a495 1
}
d497 4
a500 8
sub Dump {
	local(*OUT) = @@_;
	
	print REP "\n---\n";

	print REP "This perlbug was built using Perl $config_tag1\n",
		  "It is being executed now by  Perl $config_tag2.\n\n"
	    if $config_tag2 ne $config_tag1;
d502 1
a502 1
	print OUT <<EOF;
d506 4
d511 4
a514 5
	if( $::Config{cf_by} and $::Config{cf_time}) {
		print OUT "Configured by $::Config{cf_by} at $::Config{cf_time}.\n\n";
	}

	print OUT Config::myconfig;
d516 1
a516 6
	if (@@patches) {
		print OUT join "\n\t", "Locally applied patches:", @@patches;
                print OUT "\n";
        };

	print OUT <<EOF;
d521 3
a523 3
        for my $i (@@INC) {
	    print OUT "\t$i\n";
        }
d525 1
a525 1
	print OUT <<EOF;
d530 15
a544 8
        for my $env (sort
		     (qw(PATH LD_LIBRARY_PATH
			 LANG PERL_BADLANG
			 SHELL HOME LOGDIR),
		      grep { /^(?:PERL|LC_)/ } keys %ENV)) {
	    print OUT "    $env",
                      exists $ENV{$env} ? "=$ENV{$env}" : ' (unset)',
	              "\n";
d546 2
a547 10
	if($verbose) {
		print OUT "\nComplete configuration data for perl $]:\n\n";
		my($value);
		foreach (sort keys %::Config) {
			$value = $::Config{$_};
			$value =~ s/'/\\'/g;
			print OUT "$_='$value'\n";
		}
	}
}
d550 3
a552 6
	# Edit the report

	if($usefile) {
		$usefile = 0;
		paraprint <<EOF;

d554 6
a560 11
EOF
		print "Editor [$ed]: ";
		
		my($entry) =scalar(<>);
		chop $entry;
	
		if($entry ne "") {
			$ed = $entry;
		} 
	}
	
d562 3
a564 6
	if(!$usefile and !$body) {
		my $sts = system("$ed $filename");
		if($sts) {
			#print "\nUnable to run editor!\n";
			paraprint <<EOF;

d567 1
a567 2
correct it here, otherwise just press Enter. 

d569 9
a577 12
			print "Editor [$ed]: ";
		
			my($entry) =scalar(<>);
			chop $entry;
	
			if($entry ne "") {
				$ed = $entry;
				goto tryagain;
			} else {
			
			paraprint <<EOF;

a580 2
			}
		} 
d582 1
d584 13
a596 17
        return if $ok;
        # Check that we have a report that has some, eh, report in it.

        my $unseen = 0;

        open(REP, "<$filename");
	# a strange way to check whether any significant editing
	# have been done: check whether any new non-empty lines
	# have been added. Yes, the below code ignores *any* space
	# in *any* line.
        while (<REP>) {
	    s/\s+//g;
	    $unseen++ if ($_ ne '' and not exists $REP{$_});
	}

	while ($unseen == 0) {
	    paraprint <<EOF;
d598 2
a600 1

d602 9
a610 10
		print "Action (Retry Edit/Cancel) ";
		my ($action) = scalar(<>);
		if ($action =~ /^[re]/i) { # <R>etry <E>dit
			goto tryagain;
		} elsif ($action =~ /^[cq]/i) { # <C>ancel, <Q>uit
		        Cancel();
		}
        }

}
d619 6
a624 10

	# Report is done, prompt for further action
	if( !$::opt_S ) {
		while(1) {

			paraprint <<EOF;


Now that you have completed your report, would you like to send 
the message to $address$andcc, display the message on 
a626 1

d628 23
d652 17
a668 40
			print "Action (Send/Display/Edit/Cancel/Save to File): ";
			my($action) = scalar(<>);
			chop $action;

			if( $action =~ /^(f|sa)/i ) { # <F>ile/<Sa>ve
				print "\n\nName of file to save message in [perlbug.rep]: ";
				my($file) = scalar(<>);
				chop $file;
				if($file eq "") { $file = "perlbug.rep" }
			
				open(FILE,">$file");
				open(REP,"<$filename");
				print FILE "To: $address\nSubject: $subject\n";
				print FILE "Cc: $cc\n" if $cc;
				print FILE "Reply-To: $from\n" if $from;
				print FILE "\n";
				while(<REP>) { print FILE }
				close(REP);
				close(FILE);
	
				print "\nMessage saved in `$file'.\n";
				exit;

			} elsif( $action =~ /^(d|l|sh)/i ) { # <D>isplay, <L>ist, <Sh>ow
				# Display the message
				open(REP,"<$filename");
				while(<REP>) { print $_ }
				close(REP);
			} elsif( $action =~ /^se/i ) { # <S>end
				# Send the message
				print "\
Are you certain you want to send this message?
Please type \"yes\" if you are: ";
				my($reply) = scalar(<STDIN>);
				chop($reply);
				if( $reply eq "yes" ) {
					last;
				} else {
					paraprint <<EOF;

a671 1

d673 8
a680 11
					
				}
			} elsif( $action =~ /^[er]/i ) { # <E>dit, <R>e-edit
				# edit the message
				Edit();
				#system("$ed $filename");
			} elsif( $action =~ /^[qc]/i ) { # <C>ancel, <Q>uit
			        Cancel();
			} elsif( $action =~ /^s/ ) {
				paraprint <<EOF;

d683 1
a683 3
			}
		
		}
d685 2
a686 2
}

d689 15
d705 33
a737 10
	# Message has been accepted for transmission -- Send the message
	
	if($::HaveSend) {

		$msg = new Mail::Send Subject => $subject, To => $address;
	
		$msg->cc($cc) if $cc;
		$msg->add("Reply-To",$from) if $from;
	    
		$fh = $msg->open;
d739 1
a739 43
		open(REP,"<$filename");
		while(<REP>) { print $fh $_ }
		close(REP);
	
		$fh->close;  
	
		print "\nMessage sent.\n";
	} else {
		if ($Is_VMS) {
			if ( ($address =~ /@@/ and $address !~ /^\w+%"/) or
			     ($cc      =~ /@@/ and $cc      !~ /^\w+%"/) ){
				my($prefix);
				foreach (qw[ IN MX SMTP UCX PONY WINS ],'') {
					$prefix = "$_%",last if $ENV{"MAIL\$PROTOCOL_$_"};
				}
				$address = qq[${prefix}"$address"] unless $address =~ /^\w+%"/;
				$cc = qq[${prefix}"$cc"] unless !$cc || $cc =~ /^\w+%"/;
			}
			$subject =~ s/"/""/g; $address =~ s/"/""/g; $cc =~ s/"/""/g;
			my($sts) = system(qq[mail/Subject="$subject" $filename. "$address","$cc"]);
			if ($sts) { die "Can't spawn off mail\n\t(leaving bug report in $filename): $sts\n;" }
		} else {
			my($sendmail) = "";
			
			foreach (qw(/usr/lib/sendmail /usr/sbin/sendmail /usr/ucblib/sendmail))
			{
				$sendmail = $_, last if -e $_;
			}

			if ($^O eq 'os2' and $sendmail eq "") {
			  my $path = $ENV{PATH};
			  $path =~ s:\\:/: ;
			  my @@path = split /$Config{path_sep}/, $path;
			  for (@@path) {
			    $sendmail = "$_/sendmail", last 
			      if -e "$_/sendmail";
			    $sendmail = "$_/sendmail.exe", last 
			      if -e "$_/sendmail.exe";
			  }
			}
			
			paraprint(<<"EOF"), die "\n" if $sendmail eq "";
			
d746 11
d758 4
a761 19
EOF
			
			open(SENDMAIL,"|$sendmail -t") || die "'|$sendmail -t' failed: $|";
			print SENDMAIL "To: $address\n";
			print SENDMAIL "Subject: $subject\n";
			print SENDMAIL "Cc: $cc\n" if $cc;
			print SENDMAIL "Reply-To: $from\n" if $from;
			print SENDMAIL "\n\n";
			open(REP,"<$filename");
			while(<REP>) { print SENDMAIL $_ }
			close(REP);
			
			if (close(SENDMAIL)) {
			  print "\nMessage sent.\n";
			} else {
			  warn "\nSendmail returned status '",$?>>8,"'\n";
			}
		}
	
d763 3
a765 4

	1 while unlink($filename);  # remove all versions under VMS

}
d768 1
a768 1
	print <<EOF; 
d770 1
a770 1
A program to help generate bug reports about perl5, and mail them. 
d773 1
a773 1
	
d775 1
a775 1
$0  [-v] [-a address] [-s subject] [-b body | -f file ]
d777 2
a778 1
    
d784 1
a784 1
  -f    File containing the body of the report. Use this to 
d786 1
d791 1
a791 1
  -s    Subject to include with the message. You will be prompted 
d797 1
a797 1
  -e    Editor to use. 
d799 1
a799 1
  -d	Data mode (the default if you redirect or pipe output.) 
d803 2
a804 2
        (use alone or with -v). Only use -ok if *everything* was ok.
        If there were *any* problems at all then don't use -ok.
d806 6
a811 2
  -h    Print this help message. 
  
d815 10
d829 3
a831 3
    	s/(\S)\s*\n/$1 /g;
	    write;
	    print "\n";
a832 1
                       
a833 1
                            
d849 2
a850 1
S<[ B<-b> I<body> | B<-f> I<file> ]> S<[ B<-r> I<returnaddress> ]>
d854 2
a855 1
B<perlbug> S<[ B<-v> ]> S<[ B<-r> I<returnaddress> ]> S<[ B<-ok> | B<okay> ]>
d860 1
a860 1
come with it, and mail them. 
d904 7
d926 11
d975 5
d1022 1
a1022 1
Editor to use. 
d1029 6
d1052 15
d1096 4
a1099 2
Charles F. Randall (E<lt>cfr@@pobox.comE<gt>) and
Mike Guy (E<lt>mjtg@@cam.a.ukE<gt>).
d1103 2
a1104 1
perl(1), perldebug(1), perltrap(1), diff(1), patch(1)
d1117 1
a1117 1

@


1.1
log
@Initial revision
@
text
@d12 1
d16 3
a18 4
chdir(dirname($0));
($file = basename($0)) =~ s/\.PL$//;
$file =~ s/\.pl$//
	if ($^O eq 'VMS' or $^O eq 'os2');  # "case-forgiving"
d22 31
d59 11
a69 3
$Config{'startperl'}
    eval 'exec perl -S \$0 "\$@@"'
	if 0;
d92 1
a92 1
my($Version) = "1.13";
d106 11
d118 1
a118 1
# TODO: Allow the user to re-name the file on mail failure, and
d121 1
d123 1
a123 1
my( $file, $cc, $address, $perlbug, $testaddress, $filename,
d125 3
a127 1
    $fh, $me, $Is_VMS, $msg, $body, $andcc );
d133 2
d143 1
a143 1
if($::opt_d or !-t STDOUT) { Dump(*STDOUT); exit; }
d146 1
a146 1
Edit();
d156 1
d159 1
a159 1
	getopts("dhva:s:b:f:r:e:SCc:t");
d170 1
a177 7
	# Possible administrator addresses, in order of confidence
	# (Note that cf_email is not mentioned to metaconfig, since
	# we don't really want it. We'll just take it if we have to.)
	$cc = ($::opt_C ? "" : (
		$::opt_c || $::Config{perladmin} || $::Config{cf_email} || $::Config{cf_by}
		));
	
d187 3
d197 33
a229 4
	$ed = ($::opt_f ? "file" : (
			$::opt_e || $ENV{VISUAL} || $ENV{EDITOR} || $ENV{EDIT} || 
		      ($Is_VMS ? "edit/tpu" : "vi")
	      ));
d231 10
d242 5
a246 1
	$me = getpwuid($<);
d254 1
a254 1
	
d256 10
a265 3
This program allows you to create a bug report,
which will be sent as an e-mail message to $address
once you have filled in the report.
d268 1
d275 3
a277 2
message. It should be as a concise description of 
the bug as is possible.
d305 3
a307 1
		} elsif ($Is_VMS) {
a309 3
		} else {
			$domain = `hostname`.".".`domainname`;
			$domain =~ s/[\r\n]+//g;
d316 1
a316 1
	        } elsif ($Is_VMS && !$::Config{'d_has_sockets'}) { 
d327 1
d335 1
d344 14
a357 6
		print "Your address [$guess]: ";
	
		$from = <>;
		chop $from;
	
		if($from eq "") { $from = $guess }
d400 2
a401 1

d409 6
a414 1
relevant detail. Some information about your local
d416 3
a418 1
at the end of the report. 
d434 5
a438 2
	
		if($entry ne "") {
d447 2
a448 1
	my($dir) = $Is_VMS ? 'sys$scratch:' : '/tmp/';
d450 1
d458 2
a459 1
	if( $ed eq "file" and ! $file) {
a461 1

d471 9
d481 8
a488 2
			print "\n\nUnable to read from `$entry'.\nExiting.\n";
			exit;
d499 2
d502 1
a502 1
This is a bug report for perl from $from,
d509 2
a510 2
	} elsif($file) {
		open(F,"<$file") or die "Unable to read report file: $!\n";
d516 10
a525 1
		print REP "[Please enter your report here]\n";
d531 10
d546 1
a546 2
	print OUT <<EOF;

d548 3
d552 1
d563 28
d604 12
d617 9
a625 4
tryagain:	
	if(!$file and !$body) {
		my($sts) = system("$ed $filename");
		if( $Is_VMS ? !($sts & 1) : $sts ) {
d652 37
d744 9
d759 1
a759 3
				1 while unlink($filename);  # remove all versions under VMS
				print "\nCancelling.\n";
				exit(0);
d791 1
d805 1
a805 1
			if (!($sts & 1)) { die "Can't spawn off mail\n\t(leaving bug report in $filename): $sts\n;" }
d813 12
d826 1
a826 1
			paraprint <<"EOF" and die "\n" if $sendmail eq "";
d830 1
a830 1
report. We apologize for the inconveniencence.
d837 1
a837 1
			open(SENDMAIL,"|$sendmail -t");
d847 5
a851 1
			close(SENDMAIL);
a854 2
	
	print "\nMessage sent.\n";
d869 1
a869 1
    [-r returnaddress] [-e editor] [-c adminaddress | -C] [-S] [-t]
d893 5
d918 224
d1147 1
@


1.1.1.1
log
@Import of Perl 5.003 into the tree.  Makefile.bsd-wrapper and
config.sh.OpenBSD are the only local changes.
@
text
@@


1.1.1.2
log
@perl5.005_03
@
text
@a4 1
use Cwd;
a11 1
#  $perlpath
d15 4
a18 34
$origdir = cwd;
chdir dirname($0);
$file = basename($0, '.PL');
$file .= '.com' if $^O eq 'VMS';

open OUT, ">$file" or die "Can't create $file: $!";

# extract patchlevel.h information

open PATCH_LEVEL, "<../patchlevel.h" or die "Can't open patchlevel.h: $!";

my $patchlevel_date = (stat PATCH_LEVEL)[9];

while (<PATCH_LEVEL>) {
    last if $_ =~ /^\s*static\s+char.*?local_patches\[\]\s*=\s*{\s*$/;
}

my @@patches;
while (<PATCH_LEVEL>) {
    last if /^\s*}/;
    chomp;
    s/^\s+,?"?//;
    s/"?,?$//;
    s/(['\\])/\\$1/g;
    push @@patches, $_ unless $_ eq 'NULL';
}
my $patch_desc = "'" . join("',\n    '", @@patches) . "'";
my $patch_tags = join "", map /(\S+)/ ? "+$1 " : (), @@patches;

close PATCH_LEVEL;

# TO DO (prehaps): store/embed $Config::config_sh into perlbug. When perlbug is
# used, compare $Config::config_sh with the stored version. If they differ then
# append a list of individual differences to the bug report.
d20 1
d28 3
a30 11
$Config{startperl}
    eval 'exec $Config{perlpath} -S \$0 \${1+"\$@@"}'
	if \$running_under_some_shell;

my \$config_tag1 = '$] - $Config{cf_time}';

my \$patchlevel_date = $patchlevel_date;
my \$patch_tags = '$patch_tags';
my \@@patches = (
    $patch_desc
);
d39 9
a51 6
BEGIN {
    eval "use Mail::Send;";
    $::HaveSend = ($@@ eq "");
    eval "use Mail::Util;";
    $::HaveUtil = ($@@ eq "");
};
d53 1
a53 1
my $Version = "1.26";
a66 17
# Changed in 1.14 to make the prompts a little more clear on providing
#                 helpful information. Also let file read fail gracefully.
# Changed in 1.15 to add warnings to stop people using perlbug for non-bugs.
#                 Also report selected environment variables.
# Changed in 1.16 to include @@INC, and allow user to re-edit if no changes.
# Changed in 1.17 Win32 support added.  GSAR 97-04-12
# Changed in 1.18 add '-ok' option for reporting build success. CFR 97-06-18
# Changed in 1.19 '-ok' default not '-v'
#                 add local patch information
#                 warn on '-ok' if this is an old system; add '-okay'
# Changed in 1.20 Added patchlevel.h reading and version/config checks
# Changed in 1.21 Added '-nok' for reporting build failure DFD 98-05-05
# Changed in 1.22 Heavy reformatting & minor bugfixes HVDS 98-05-10
# Changed in 1.23 Restore -ok(ay): say 'success'; don't prompt
# Changed in 1.24 Added '-F<file>' to save report HVDS 98-07-01
# Changed in 1.25 Warn on failure to open save file. HVDS 98-07-12
# Changed in 1.26 Don't require -t STDIN for -ok. HVDS 98-07-15
d68 2
a69 2
# TODO: - Allow the user to re-name the file on mail failure, and
#       make sure failure (transmission-wise) of Mail::Send is
a70 1
#       - Test -b option
d72 3
a74 3
my( $file, $usefile, $cc, $address, $perlbug, $testaddress, $filename,
    $subject, $from, $verbose, $ed, $outfile,
    $fh, $me, $Is_MSWin32, $Is_VMS, $msg, $body, $andcc, %REP, $ok);
d76 1
a76 1
my $config_tag2 = "$] - $Config{cf_time}";
d78 1
a78 1
Init();
d80 3
a82 5
if ($::opt_h) { Help(); exit; }
if ($::opt_d) { Dump(*STDOUT); exit; }
if (!-t STDIN && !($ok and not $::opt_n)) {
    paraprint <<EOF;
Please use perlbug interactively. If you want to
d85 1
a85 1
    die "\n";
d87 2
a88 1
if (!-t STDOUT && !$outfile) { Dump(*STDOUT); exit; }
d91 1
a91 1
Edit() unless $usefile || ($ok and not $::opt_n);
d98 2
a99 1
    # -------- Setup --------
d101 1
a101 2
    $Is_MSWin32 = $^O eq 'MSWin32';
    $Is_VMS = $^O eq 'VMS';
d103 2
a104 1
    if (!getopts("dhva:s:b:f:F:r:e:SCc:to:n:")) { Help(); exit; };
d106 45
a150 2
    # This comment is needed to notify metaconfig that we are
    # using the $perladmin, $cf_by, and $cf_time definitions.
d152 1
a152 1
    # -------- Configuration ---------
a153 2
    # perlbug address
    $perlbug = 'perlbug@@perl.com';
d155 1
a155 2
    # Test address
    $testaddress = 'perlbug-test@@perl.com';
d157 6
a162 2
    # Target address
    $address = $::opt_a || ($::opt_t ? $testaddress : $perlbug);
d164 1
a164 2
    # Users address, used in message and in Reply-To header
    $from = $::opt_r || "";
a165 2
    # Include verbose configuration information
    $verbose = $::opt_v || 0;
d167 24
a190 2
    # Subject of bug-report message
    $subject = $::opt_s || "";
d192 2
a193 2
    # Send a file
    $usefile = ($::opt_f || 0);
d195 29
a223 2
    # File to send as report
    $file = $::opt_f || "";
a224 2
    # File to output to
    $outfile = $::opt_F || "";
d226 2
a227 2
    # Body of report
    $body = $::opt_b || "";
d229 3
a231 5
    # Editor
    $ed = $::opt_e || $ENV{VISUAL} || $ENV{EDITOR} || $ENV{EDIT}
	|| ($Is_VMS && "edit/tpu")
	|| ($Is_MSWin32 && "notepad")
	|| "vi";
d233 2
a234 9
    # Not OK - provide build failure template by finessing OK report
    if ($::opt_n) {
	if (substr($::opt_n, 0, 2) eq 'ok' )	{
	    $::opt_o = substr($::opt_n, 1);
	} else {
	    Help();
	    exit();
	}
    }
a235 12
    # OK - send "OK" report for build on this system
    $ok = 0;
    if ($::opt_o) {
	if ($::opt_o eq 'k' or $::opt_o eq 'kay') {
	    my $age = time - $patchlevel_date;
	    if ($::opt_o eq 'k' and $age > 60 * 24 * 60 * 60 ) {
		my $date = localtime $patchlevel_date;
		print <<"EOF";
"perlbug -ok" and "perlbug -nok" do not report on Perl versions which
are more than 60 days old.  This Perl version was constructed on
$date.  If you really want to report this, use
"perlbug -okay" or "perlbug -nokay".
d237 18
a254 17
		exit();
	    }
	    # force these options
	    unless ($::opt_n) {
		$::opt_S = 1; # don't prompt for send
		$::opt_b = 1; # we have a body
		$body = "Perl reported to build OK on this system.\n";
	    }
	    $::opt_C = 1; # don't send a copy to the local admin
	    $::opt_s = 1; # we have a subject line
	    $subject = ($::opt_n ? 'Not ' : '')
		    . "OK: perl $] ${patch_tags}on"
		    ." $::Config{'archname'} $::Config{'osvers'} $subject";
	    $ok = 1;
	} else {
	    Help();
	    exit();
a255 1
    }
a256 20
    # Possible administrator addresses, in order of confidence
    # (Note that cf_email is not mentioned to metaconfig, since
    # we don't really want it. We'll just take it if we have to.)
    #
    # This has to be after the $ok stuff above because of the way
    # that $::opt_C is forced.
    $cc = $::opt_C ? "" : (
	$::opt_c || $::Config{'perladmin'}
	|| $::Config{'cf_email'} || $::Config{'cf_by'}
    );

    # My username
    $me = $Is_MSWin32 ? $ENV{'USERNAME'}
	    : $^O eq 'os2' ? $ENV{'USER'} || $ENV{'LOGNAME'}
	    : eval { getpwuid($<) };	# May be missing

    $from = $::Config{'cf_email'}
       if !$from && $::Config{'cf_email'} && $::Config{'cf_by'} && $me &&
               ($me eq $::Config{'cf_by'});
} # sub Init
d258 9
a266 16
sub Query {
    # Explain what perlbug is
    unless ($ok) {
	paraprint <<EOF;
This program provides an easy way to create a message reporting a bug
in perl, and e-mail it to $address.  It is *NOT* intended for
sending test messages or simply verifying that perl works, *NOR* is it
intended for reporting bugs in third-party perl modules.  It is *ONLY*
a means of reporting verifiable problems with the core perl distribution,
and any solutions to such problems, to the people who maintain perl.

If you're just looking for help with perl, try posting to the Usenet
newsgroup comp.lang.perl.misc.  If you're looking for help with using
perl with CGI, try posting to comp.infosystems.www.programming.cgi.
EOF
    }
a267 7
    # Prompt for subject of message, if needed
    unless ($subject) {
	paraprint <<EOF;
First of all, please provide a subject for the
message. It should be a concise description of
the bug or problem. "perl bug" or "perl problem"
is not a concise description.
a268 13
	print "Subject: ";
	$subject = <>;

	my $err = 0;
	while ($subject !~ /\S/) {
	    print "\nPlease enter a subject: ";
	    $subject = <>;
	    if ($err++ > 5) {
		die "Aborting.\n";
	    }
	}
	chop $subject;
    }
d270 8
a277 21
    # Prompt for return address, if needed
    unless ($from) {
	# Try and guess return address
	my $guess;

	$guess = $ENV{'REPLY-TO'} || $ENV{'REPLYTO'} || '';
	unless ($guess) {
	    my $domain;
	    if ($::HaveUtil) {
		$domain = Mail::Util::maildomain();
	    } elsif ($Is_MSWin32) {
		$domain = $ENV{'USERDOMAIN'};
	    } else {
		require Sys::Hostname;
		$domain = Sys::Hostname::hostname();
	    }
	    if ($domain) {
		if ($Is_VMS && !$::Config{'d_socket'}) {
		    $guess = "$domain\:\:$me";
		} else {
		    $guess = "$me\@@$domain" if $domain;
d279 1
a279 1
	    }
d282 1
a282 13
	if ($guess) {
	    unless ($ok) {
		paraprint <<EOF;
Your e-mail address will be useful if you need to be contacted. If the
default shown is not your full internet e-mail address, please correct it.
EOF
	    }
	} else {
	    paraprint <<EOF;
So that you may be contacted if necessary, please enter
your full internet e-mail address here.
EOF
	}
d284 1
a284 11
	if ($ok && $guess) {
	    # use it
	    $from = $guess;
	} else {
	    # verify it
	    print "Your address [$guess]: ";
	    $from = <>;
	    chop $from;
	    $from = $guess if $from eq '';
	}
    }
a285 4
    if ($from eq $cc or $me eq $cc) {
	# Try not to copy ourselves
	$cc = "yourself";
    }
d287 3
a289 17
    # Prompt for administrator address, unless an override was given
    if( !$::opt_C and !$::opt_c ) {
	paraprint <<EOF;
A copy of this report can be sent to your local
perl administrator. If the address is wrong, please
correct it, or enter 'none' or 'yourself' to not send
a copy.
EOF
	print "Local perl administrator [$cc]: ";
	my $entry = scalar <>;
	chop $entry;

	if ($entry ne "") {
	    $cc = $entry;
	    $cc = '' if $me eq $cc;
	}
    }
a290 2
    $cc = '' if $cc =~ /^(none|yourself|me|myself|ourselves)$/i;
    $andcc = " and $cc" if $cc;
a291 4
    # Prompt for editor, if no override is given
editor:
    unless ($::opt_e || $::opt_f || $::opt_b) {
	paraprint <<EOF;
d293 4
a296 11
the report concise but descriptive. Include any
relevant detail. If you are reporting something
that does not work as you think it should, please
try to include example of both the actual
result, and what you expected.

Some information about your local
perl configuration will automatically be included
at the end of the report. If you are using any
unusual version of perl, please try and confirm
exactly which versions are relevant.
d305 1
d307 9
a315 9
	print "Editor [$ed]: ";
	my $entry =scalar <>;
	chop $entry;

	$usefile = 0;
	if ($entry eq "file") {
	    $usefile = 1;
	} elsif ($entry ne "") {
	    $ed = $entry;
a316 1
    }
a317 2
    # Generate scratch file to edit report in
    $filename = filename();
d319 16
a334 4
    # Prompt for file to read report from, if needed
    if ($usefile and !$file) {
filename:
	paraprint <<EOF;
d336 1
d338 12
a349 9
	print "Filename: ";
	my $entry = scalar <>;
	chop $entry;

	if ($entry eq "") {
	    paraprint <<EOF;
No filename? I'll let you go back and choose an editor again.
EOF
	    goto editor;
a351 10
	unless (-f $entry and -r $entry) {
	    paraprint <<EOF;
I'm sorry, but I can't read from `$entry'. Maybe you mistyped the name of
the file? If you don't want to send a file, just enter a blank line and you
can get back to the editor selection.
EOF
	    goto filename;
	}
	$file = $entry;
    }
d353 3
a355 3
    # Generate report
    open(REP,">$filename");
    my $reptype = !$ok ? "bug" : $::opt_n ? "build failure" : "success";
d357 2
a358 2
    print REP <<EOF;
This is a $reptype report for perl from $from,
d363 10
a372 7
    if ($body) {
	print REP $body;
    } elsif ($usefile) {
	open(F, "<$file")
		or die "Unable to read report file from `$file': $!\n";
	while (<F>) {
	    print REP $_
d374 3
a376 3
	close(F);
    } else {
	print REP <<EOF;
d378 1
a378 2
-----------------------------------------------------------------
[Please enter your report here]
d380 4
a385 25
[Please do not change anything below this line]
-----------------------------------------------------------------
EOF
    }
    Dump(*REP);
    close(REP);

    # read in the report template once so that
    # we can track whether the user does any editing.
    # yes, *all* whitespace is ignored.
    open(REP, "<$filename");
    while (<REP>) {
	s/\s+//g;
	$REP{$_}++;
    }
    close(REP);
} # sub Query

sub Dump {
    local(*OUT) = @@_;

    print REP "\n---\n";
    print REP "This perlbug was built using Perl $config_tag1\n",
	    "It is being executed now by  Perl $config_tag2.\n\n"
	if $config_tag2 ne $config_tag1;
a386 1
    print OUT <<EOF;
a389 4
    if ($::Config{cf_by} and $::Config{cf_time}) {
	print OUT "Configured by $::Config{cf_by} at $::Config{cf_time}.\n\n";
    }
    print OUT Config::myconfig;
d391 3
a393 4
    if (@@patches) {
	print OUT join "\n    ", "Locally applied patches:", @@patches;
	print OUT "\n";
    };
d395 1
a395 1
    print OUT <<EOF;
d397 8
a404 27
---
\@@INC for perl $]:
EOF
    for my $i (@@INC) {
	print OUT "    $i\n";
    }

    print OUT <<EOF;

---
Environment for perl $]:
EOF
    for my $env (sort
	(qw(PATH LD_LIBRARY_PATH LANG PERL_BADLANG SHELL HOME LOGDIR LANGUAGE),
	grep /^(?:PERL|LC_)/, keys %ENV)
    ) {
	print OUT "    $env",
		exists $ENV{$env} ? "=$ENV{$env}" : ' (unset)',
		"\n";
    }
    if ($verbose) {
	print OUT "\nComplete configuration data for perl $]:\n\n";
	my $value;
	foreach (sort keys %::Config) {
	    $value = $::Config{$_};
	    $value =~ s/'/\\'/g;
	    print OUT "$_='$value'\n";
d406 1
a406 2
    }
} # sub Dump
d409 8
a416 10
    # Edit the report
    if ($usefile || $body) {
	paraprint <<EOF;
Please make sure that the name of the editor you want to use is correct.
EOF
	print "Editor [$ed]: ";
	my $entry =scalar <>;
	chop $entry;
	$ed = $entry unless $entry eq '';
    }
a417 4
tryagain:
    my $sts = system("$ed $filename");
    if ($sts) {
	paraprint <<EOF;
d420 2
a421 1
correct it here, otherwise just press Enter.
d423 12
a434 9
	print "Editor [$ed]: ";
	my $entry =scalar <>;
	chop $entry;

	if ($entry ne "") {
	    $ed = $entry;
	    goto tryagain;
	} else {
	    paraprint <<EOF;
d438 2
d441 3
a443 1
    }
d445 3
a447 13
    return if ($ok and not $::opt_n) || $body;
    # Check that we have a report that has some, eh, report in it.
    my $unseen = 0;

    open(REP, "<$filename");
    # a strange way to check whether any significant editing
    # have been done: check whether any new non-empty lines
    # have been added. Yes, the below code ignores *any* space
    # in *any* line.
    while (<REP>) {
	s/\s+//g;
	$unseen++ if $_ ne '' and not exists $REP{$_};
    }
d449 1
a449 13
    while ($unseen == 0) {
	paraprint <<EOF;
I am sorry but it looks like you did not report anything.
EOF
	print "Action (Retry Edit/Cancel) ";
	my ($action) = scalar(<>);
	if ($action =~ /^[re]/i) { # <R>etry <E>dit
	    goto tryagain;
	} elsif ($action =~ /^[cq]/i) { # <C>ancel, <Q>uit
	    Cancel();
	}
    }
} # sub Edit
a450 5
sub Cancel {
    1 while unlink($filename);  # remove all versions under VMS
    print "\nCancelling.\n";
    exit(0);
}
d452 2
a453 7
sub NowWhat {
    # Report is done, prompt for further action
    if( !$::opt_S ) {
	while(1) {
	    paraprint <<EOF;
Now that you have completed your report, would you like to send
the message to $address$andcc, display the message on
d456 1
a457 23
      retry:
	    print "Action (Send/Display/Edit/Cancel/Save to File): ";
	    my $action = scalar <>;
	    chop $action;

	    if ($action =~ /^(f|sa)/i) { # <F>ile/<Sa>ve
		print "\n\nName of file to save message in [perlbug.rep]: ";
		my $file = scalar <>;
		chop $file;
		$file = "perlbug.rep" if $file eq "";

		unless (open(FILE, ">$file")) {
		    print "\nError opening $file: $!\n\n";
		    goto retry;
		}
		open(REP, "<$filename");
		print FILE "To: $address\nSubject: $subject\n";
		print FILE "Cc: $cc\n" if $cc;
		print FILE "Reply-To: $from\n" if $from;
		print FILE "\n";
		while (<REP>) { print FILE }
		close(REP);
		close(FILE);
d459 50
a508 20
		print "\nMessage saved in `$file'.\n";
		exit;
	    } elsif ($action =~ /^(d|l|sh)/i ) { # <D>isplay, <L>ist, <Sh>ow
		# Display the message
		open(REP, "<$filename");
		while (<REP>) { print $_ }
		close(REP);
	    } elsif ($action =~ /^se/i) { # <S>end
		# Send the message
		print "Are you certain you want to send this message?\n"
		    . 'Please type "yes" if you are: ';
		my $reply = scalar <STDIN>;
		chop $reply;
		if ($reply eq "yes") {
		    last;
		} else {
		    paraprint <<EOF;
That wasn't a clear "yes", so I won't send your message. If you are sure
your message should be sent, type in "yes" (without the quotes) at the
confirmation prompt.
d510 2
a512 10
	    } elsif ($action =~ /^[er]/i) { # <E>dit, <R>e-edit
		# edit the message
		Edit();
	    } elsif ($action =~ /^[qc]/i) { # <C>ancel, <Q>uit
		Cancel();
	    } elsif ($action =~ /^s/) {
		paraprint <<EOF;
I'm sorry, but I didn't understand that. Please type "send" or "save".
EOF
	    }
d514 2
a515 2
    }
} # sub NowWhat
a517 15
    # Message has been accepted for transmission -- Send the message
    if ($outfile) {
	open SENDMAIL, ">$outfile" or die "Couldn't open '$outfile': $!\n";
	goto sendout;
    }
    if ($::HaveSend) {
	$msg = new Mail::Send Subject => $subject, To => $address;
	$msg->cc($cc) if $cc;
	$msg->add("Reply-To",$from) if $from;

	$fh = $msg->open;
	open(REP, "<$filename");
	while (<REP>) { print $fh $_ }
	close(REP);
	$fh->close;
d519 10
a528 33
	print "\nMessage sent.\n";
    } elsif ($Is_VMS) {
	if ( ($address =~ /@@/ and $address !~ /^\w+%"/) or
	     ($cc      =~ /@@/ and $cc      !~ /^\w+%"/) ) {
	    my $prefix;
	    foreach (qw[ IN MX SMTP UCX PONY WINS ], '') {
		$prefix = "$_%", last if $ENV{"MAIL\$PROTOCOL_$_"};
	    }
	    $address = qq[${prefix}"$address"] unless $address =~ /^\w+%"/;
	    $cc = qq[${prefix}"$cc"] unless !$cc || $cc =~ /^\w+%"/;
	}
	$subject =~ s/"/""/g; $address =~ s/"/""/g; $cc =~ s/"/""/g;
	my $sts = system(qq[mail/Subject="$subject" $filename. "$address","$cc"]);
	if ($sts) {
	    die <<EOF;
Can't spawn off mail
	(leaving bug report in $filename): $sts
EOF
	}
    } else {
	my $sendmail = "";
	for (qw(/usr/lib/sendmail /usr/sbin/sendmail /usr/ucblib/sendmail)) {
	    $sendmail = $_, last if -e $_;
	}
	if ($^O eq 'os2' and $sendmail eq "") {
	    my $path = $ENV{PATH};
	    $path =~ s:\\:/: ;
	    my @@path = split /$Config{'path_sep'}/, $path;
	    for (@@path) {
		$sendmail = "$_/sendmail", last if -e "$_/sendmail";
		$sendmail = "$_/sendmail.exe", last if -e "$_/sendmail.exe";
	    }
	}
d530 30
a559 1
	paraprint(<<"EOF"), die "\n" if $sendmail eq "";
d562 1
a562 1
report. We apologize for the inconvenience.
d566 1
d568 19
a586 10
	open(SENDMAIL, "|$sendmail -t") || die "'|$sendmail -t' failed: $!";
sendout:
	print SENDMAIL "To: $address\n";
	print SENDMAIL "Subject: $subject\n";
	print SENDMAIL "Cc: $cc\n" if $cc;
	print SENDMAIL "Reply-To: $from\n" if $from;
	print SENDMAIL "\n\n";
	open(REP, "<$filename");
	while (<REP>) { print SENDMAIL $_ }
	close(REP);
d588 1
a588 8
	if (close(SENDMAIL)) {
	    printf "\nMessage %s.\n", $outfile ? "saved" : "sent";
	} else {
	    warn "\nSendmail returned status '", $? >> 8, "'\n";
	}
    }
    1 while unlink($filename);  # remove all versions under VMS
} # sub Send
d591 1
a591 1
    print <<EOF;
d593 1
a593 1
A program to help generate bug reports about perl5, and mail them.
d596 1
a596 1

d598 3
a600 4
$0  [-v] [-a address] [-s subject] [-b body | -f inpufile ] [ -F outputfile ]
    [-r returnaddress] [-e editor] [-c adminaddress | -C] [-S] [-t] [-h]
$0  [-v] [-r returnaddress] [-ok | -okay | -nok | -nokay]

d606 1
a606 1
  -f    File containing the body of the report. Use this to
a607 1
  -F	File to output the resulting mail message to, instead of mailing.
d612 1
a612 1
  -s    Subject to include with the message. You will be prompted
d618 1
a618 1
  -e    Editor to use.
d620 1
a620 1
  -d	Data mode (the default if you redirect or pipe output.)
d623 1
a623 10
  -ok   Report successful build on this system to perl porters
        (use alone or with -v). Only use -ok if *everything* was ok:
        if there were *any* problems at all, use -nok.
  -okay As -ok but allow report from old builds.
  -nok  Report unsuccessful build on this system to perl porters
        (use alone or with -v). You must describe what went wrong
        in the body of the report which you will be asked to edit.
  -nokay As -nok but allow report from old builds.
  -h    Print this help message.

a626 10
sub filename {
    my $dir = $Is_VMS ? 'sys$scratch:'
	: ($Is_MSWin32 && $ENV{'TEMP'}) ? $ENV{'TEMP'}
	: '/tmp/';
    $filename = "bugrep0$$";
    $dir .= "\\" if $Is_MSWin32 and $dir !~ m|[\\/]$|;
    $filename++ while -e "$dir$filename";
    $filename = "$dir$filename";
}

d631 3
a633 3
	s/(\S)\s*\n/$1 /g;
	write;
	print "\n";
d635 1
d637 1
a642 273

__END__

=head1 NAME

perlbug - how to submit bug reports on Perl

=head1 SYNOPSIS

B<perlbug> S<[ B<-v> ]> S<[ B<-a> I<address> ]> S<[ B<-s> I<subject> ]>
S<[ B<-b> I<body> | B<-f> I<inputfile> ]> S<[ B<-F> I<outputfile> ]>
S<[ B<-r> I<returnaddress> ]>
S<[ B<-e> I<editor> ]> S<[ B<-c> I<adminaddress> | B<-C> ]>
S<[ B<-S> ]> S<[ B<-t> ]>  S<[ B<-d> ]>  S<[ B<-h> ]>

B<perlbug> S<[ B<-v> ]> S<[ B<-r> I<returnaddress> ]>
S<[ B<-ok> | B<-okay> | B<-nok> | B<-nokay> ]>

=head1 DESCRIPTION

A program to help generate bug reports about perl or the modules that
come with it, and mail them.

If you have found a bug with a non-standard port (one that was not part
of the I<standard distribution>), a binary distribution, or a
non-standard module (such as Tk, CGI, etc), then please see the
documentation that came with that distribution to determine the correct
place to report bugs.

C<perlbug> is designed to be used interactively. Normally no arguments
will be needed.  Simply run it, and follow the prompts.

If you are unable to run B<perlbug> (most likely because you don't have
a working setup to send mail that perlbug recognizes), you may have to
compose your own report, and email it to B<perlbug@@perl.com>.  You might
find the B<-d> option useful to get summary information in that case.

In any case, when reporting a bug, please make sure you have run through
this checklist:

=over 4

=item What version of perl you are running?

Type C<perl -v> at the command line to find out.

=item Are you running the latest released version of perl?

Look at http://www.perl.com/ to find out.  If it is not the latest
released version, get that one and see whether your bug has been
fixed.  Note that bug reports about old versions of perl, especially
those prior to the 5.0 release, are likely to fall upon deaf ears.
You are on your own if you continue to use perl1 .. perl4.

=item Are you sure what you have is a bug?

A significant number of the bug reports we get turn out to be documented
features in perl.  Make sure the behavior you are witnessing doesn't fall
under that category, by glancing through the documentation that comes
with perl (we'll admit this is no mean task, given the sheer volume of
it all, but at least have a look at the sections that I<seem> relevant).

Be aware of the familiar traps that perl programmers of various hues
fall into.  See L<perltrap>.

Check in L<perldiag> to see what any Perl error message(s) mean.
If message isn't in perldiag, it probably isn't generated by Perl.
Consult your operating system documentation instead.

If you are on a non-UNIX platform check also L<perlport>, some
features may not be implemented or work differently.

Try to study the problem under the perl debugger, if necessary.
See L<perldebug>.

=item Do you have a proper test case?

The easier it is to reproduce your bug, the more likely it will be
fixed, because if no one can duplicate the problem, no one can fix it.
A good test case has most of these attributes: fewest possible number
of lines; few dependencies on external commands, modules, or
libraries; runs on most platforms unimpeded; and is self-documenting.

A good test case is almost always a good candidate to be on the perl
test suite.  If you have the time, consider making your test case so
that it will readily fit into the standard test suite.

Remember also to include the B<exact> error messages, if any.
"Perl complained something" is not an exact error message.

If you get a core dump (or equivalent), you may use a debugger
(B<dbx>, B<gdb>, etc) to produce a stack trace to include in the bug
report.  NOTE: unless your Perl has been compiled with debug info
(often B<-g>), the stack trace is likely to be somewhat hard to use
because it will most probably contain only the function names, not
their arguments.  If possible, recompile your Perl with debug info and
reproduce the dump and the stack trace.

=item Can you describe the bug in plain English?

The easier it is to understand a reproducible bug, the more likely it
will be fixed.  Anything you can provide by way of insight into the
problem helps a great deal.  In other words, try to analyse the
problem to the extent you feel qualified and report your discoveries.

=item Can you fix the bug yourself?

A bug report which I<includes a patch to fix it> will almost
definitely be fixed.  Use the C<diff> program to generate your patches
(C<diff> is being maintained by the GNU folks as part of the B<diffutils>
package, so you should be able to get it from any of the GNU software
repositories).  If you do submit a patch, the cool-dude counter at
perlbug@@perl.com will register you as a savior of the world.  Your
patch may be returned with requests for changes, or requests for more
detailed explanations about your fix.

Here are some clues for creating quality patches: Use the B<-c> or
B<-u> switches to the diff program (to create a so-called context or
unified diff).  Make sure the patch is not reversed (the first
argument to diff is typically the original file, the second argument
your changed file).  Make sure you test your patch by applying it with
the C<patch> program before you send it on its way.  Try to follow the
same style as the code you are trying to patch.  Make sure your patch
really does work (C<make test>, if the thing you're patching supports
it).

=item Can you use C<perlbug> to submit the report?

B<perlbug> will, amongst other things, ensure your report includes
crucial information about your version of perl.  If C<perlbug> is unable
to mail your report after you have typed it in, you may have to compose
the message yourself, add the output produced by C<perlbug -d> and email
it to B<perlbug@@perl.com>.  If, for some reason, you cannot run
C<perlbug> at all on your system, be sure to include the entire output
produced by running C<perl -V> (note the uppercase V).

Whether you use C<perlbug> or send the email manually, please make
your subject informative.  "a bug" not informative.  Neither is "perl
crashes" nor "HELP!!!", these all are null information.  A compact
description of what's wrong is fine.

=back

Having done your bit, please be prepared to wait, to be told the bug
is in your code, or even to get no reply at all.  The perl maintainers
are busy folks, so if your problem is a small one or if it is difficult
to understand or already known, they may not respond with a personal reply.
If it is important to you that your bug be fixed, do monitor the
C<Changes> file in any development releases since the time you submitted
the bug, and encourage the maintainers with kind words (but never any
flames!).  Feel free to resend your bug report if the next released
version of perl comes out and your bug is still present.

=head1 OPTIONS

=over 8

=item B<-a>

Address to send the report to.  Defaults to `perlbug@@perl.com'.

=item B<-b>

Body of the report.  If not included on the command line, or
in a file with B<-f>, you will get a chance to edit the message.

=item B<-C>

Don't send copy to administrator.

=item B<-c>

Address to send copy of report to.  Defaults to the address of the
local perl administrator (recorded when perl was built).

=item B<-d>

Data mode (the default if you redirect or pipe output).  This prints out
your configuration data, without mailing anything.  You can use this
with B<-v> to get more complete data.

=item B<-e>

Editor to use.

=item B<-f>

File containing the body of the report.  Use this to quickly send a
prepared message.

=item B<-F>

File to output the results to instead of sending as an email. Useful
particularly when running perlbug on a machine with no direct internet
connection.

=item B<-h>

Prints a brief summary of the options.

=item B<-ok>

Report successful build on this system to perl porters. Forces B<-S>
and B<-C>. Forces and supplies values for B<-s> and B<-b>. Only
prompts for a return address if it cannot guess it (for use with
B<make>). Honors return address specified with B<-r>.  You can use this
with B<-v> to get more complete data.   Only makes a report if this
system is less than 60 days old.

=item B<-okay>

As B<-ok> except it will report on older systems.

=item B<-nok>

Report unsuccessful build on this system.  Forces B<-C>.  Forces and
supplies a value for B<-s>, then requires you to edit the report
and say what went wrong.  Alternatively, a prepared report may be
supplied using B<-f>.  Only prompts for a return address if it
cannot guess it (for use with B<make>). Honors return address
specified with B<-r>.  You can use this with B<-v> to get more
complete data.  Only makes a report if this system is less than 60
days old.

=item B<-nokay>

As B<-nok> except it will report on older systems.

=item B<-r>

Your return address.  The program will ask you to confirm its default
if you don't use this option.

=item B<-S>

Send without asking for confirmation.

=item B<-s>

Subject to include with the message.  You will be prompted if you don't
supply one on the command line.

=item B<-t>

Test mode.  The target address defaults to `perlbug-test@@perl.com'.

=item B<-v>

Include verbose configuration data in the report.

=back

=head1 AUTHORS

Kenneth Albanowski (E<lt>kjahds@@kjahds.comE<gt>), subsequently I<doc>tored
by Gurusamy Sarathy (E<lt>gsar@@umich.eduE<gt>), Tom Christiansen
(E<lt>tchrist@@perl.comE<gt>), Nathan Torkington (E<lt>gnat@@frii.comE<gt>),
Charles F. Randall (E<lt>cfr@@pobox.comE<gt>), Mike Guy
(E<lt>mjtg@@cam.a.ukE<gt>), Dominic Dunlop (E<lt>domo@@computer.orgE<gt>),
Hugo van der Sanden (E<lt>hv@@crypt0.demon.co.ukE<gt>), and
Jarkko Hietaniemi (E<lt>jhi@@iki.fiE<gt>).

=head1 SEE ALSO

perl(1), perldebug(1), perldiag(1), perlport(1), perltrap(1),
diff(1), patch(1), dbx(1), gdb(1)

=head1 BUGS

None known (guess what must have been used to report them?)

=cut

a647 1
chdir $origdir;
@


1.1.1.3
log
@virgin perl 5.6.0
@
text
@a5 1
use File::Spec::Functions;
d26 1
a26 2
open PATCH_LEVEL, "<" . catfile(updir, "patchlevel.h")
    or die "Can't open patchlevel.h: $!";
d38 2
a39 2
    s/^\s+,?\s*"?//;
    s/"?\s*,?$//;
a57 2
my $extract_version = sprintf("v%vd", $^V);

d63 1
a63 1
my \$config_tag1 = '$extract_version - $Config{cf_time}';
a76 1
use File::Spec;		# keep perlbug Perl 5.005 compatible
d89 1
a89 1
my $Version = "1.28";
a119 2
# Changed in 1.27 Added Mac OS and File::Spec support CNANDOR 99-07-27
# Changed in 1.28 Additional questions for Perlbugtron RFOLEY 20.03.2000
d127 1
a127 1
    $subject, $from, $verbose, $ed, $outfile, $Is_MacOS, $category, $severity, 
d130 1
a130 3
my $perl_version = $^V ? sprintf("v%vd", $^V) : $];

my $config_tag2 = "$perl_version - $Config{cf_time}";
a151 27
sub ask_for_alternatives {
    my $name = shift;
    my $default = shift;
    my @@alts = @@_;
    my $alt = "";
    paraprint <<EOF;
Please pick a \u$name from the following:

    @@alts

EOF
    my $err = 0;
    my $joined_alts = join('|', @@alts);
    do {
	if ($err++ > 5) {
	    die "Invalid $name: aborting.\n";
	}
	print "Please enter a \u$name [$default]: ";
	$alt = <>;
	chomp $alt;
	if ($alt =~ /^\s*$/) {
	    $alt = $default;
	}
    } while ($alt !~ /^($joined_alts)$/i);
    lc $alt;
}

a156 5
    $Is_MacOS = $^O eq 'MacOS';

    @@ARGV = split m/\s+/,
        MacPerl::Ask('Provide command-line args here (-h for help):')
        if $Is_MacOS && $MacPerl::Version =~ /App/;
a198 1
	|| ($Is_MacOS && '')
d235 1
a235 1
		    . "OK: perl $perl_version ${patch_tags}on"
a236 2
	    $category = "install";
	    $severity = "none";
a257 1
	    : $Is_MacOS ? $ENV{'USER'}
a309 7
        if ($Is_MacOS) {
            require Mac::InternetConfig;
            $guess = $Mac::InternetConfig::InternetConfig{
                Mac::InternetConfig::kICEmail()
            };
        }

a417 10
    # Prompt for category of bug
    $category ||= ask_for_alternatives("category", "core",
				     qw(core docs install
					library utilities));

    # Prompt for severity of bug
    $severity ||= ask_for_alternatives("severity", "low",
				       qw(critical high medium
					  low wishlist none));

d455 1
a455 1
generated with the help of perlbug $Version running under perl $perl_version.
d497 2
a498 8
    print OUT <<EFF;
---
Flags:
    category=$category
    severity=$severity
---
EFF
    print OUT "This perlbug was built using Perl $config_tag1\n",
d503 1
a503 1
Site configuration information for perl $perl_version:
d519 1
a519 1
\@@INC for perl $perl_version:
d528 1
a528 1
Environment for perl $perl_version:
d530 4
a533 7
    my @@env =
        qw(PATH LD_LIBRARY_PATH LANG PERL_BADLANG SHELL HOME LOGDIR LANGUAGE);
    push @@env, $Config{ldlibpthname} if $Config{ldlibpthname} ne '';
    push @@env, grep /^(?:PERL|LC_|LANG)/, keys %ENV;
    my %env;
    @@env{@@env} = @@env;
    for my $env (sort keys %env) {
d539 1
a539 1
	print OUT "\nComplete configuration data for perl $perl_version:\n\n";
d562 1
a562 9
    my $sts = system("$ed $filename") unless $Is_MacOS;
    if ($Is_MacOS) {
        require ExtUtils::MakeMaker;
        ExtUtils::MM_MacOS::launch_file($filename);
        paraprint <<EOF;
Press Enter when done.
EOF
        scalar <>;
    }
d786 1
a786 1
  -F    File to output the resulting mail message to, instead of mailing.
d799 1
a799 1
  -d    Data mode (the default if you redirect or pipe output.)
d818 1
a818 2
        : $Is_MacOS ? $ENV{'TMPDIR'}
	: '/tmp';
d820 3
a822 3
#    $dir .= "\\" if $Is_MSWin32 and $dir !~ m|[\\/]$|;
    $filename++ while -e File::Spec->catfile($dir, $filename);
    $filename = File::Spec->catfile($dir, $filename);
d881 1
a881 1
=item What version of Perl you are running?
d889 1
a889 1
fixed.  Note that bug reports about old versions of Perl, especially
d896 1
a896 1
features in Perl.  Make sure the behavior you are witnessing doesn't fall
d898 1
a898 1
with Perl (we'll admit this is no mean task, given the sheer volume of
d908 2
a909 2
If you are on a non-UNIX platform check also L<perlport>, as some
features may be unimplemented or work differently.
d911 1
a911 1
Try to study the problem under the Perl debugger, if necessary.
d933 1
a933 1
because it will most probably contain only the function names and not
d941 2
a942 2
problem helps a great deal.  In other words, try to analyze the
problem (to the extent you can) and report your discoveries.
d976 3
a978 3
your Subject line informative.  "a bug" not informative.  Neither is
"perl crashes" nor "HELP!!!".  These don't help.
A compact description of what's wrong is fine.
d983 1
a983 1
is in your code, or even to get no reply at all.  The Perl maintainers
d1094 1
a1094 1
by Gurusamy Sarathy (E<lt>gsar@@activestate.comE<gt>), Tom Christiansen
d1098 2
a1099 4
Hugo van der Sanden (E<lt>hv@@crypt0.demon.co.ukE<gt>),
Jarkko Hietaniemi (E<lt>jhi@@iki.fiE<gt>), Chris Nandor
(E<lt>pudge@@pobox.comE<gt>), Jon Orwant (E<lt>orwant@@media.mit.eduE<gt>,
and Richard Foley (E<lt>richard@@rfi.netE<gt>).
@


1.1.1.4
log
@stock perl 5.6.1
@
text
@d48 1
a48 1
close(PATCH_LEVEL) or die "Error closing patchlevel.h: $!";
d94 1
a94 1
my $Version = "1.33";
a126 5
# Changed in 1.29 Perlbug(tron): auto(-ok), short prompts RFOLEY 05-05-2000
# Changed in 1.30 Added warnings on failure to open files MSTEVENS 13-07-2000
# Changed in 1.31 Add checks on close().Fix my $var unless. TJENNESS 26-07-2000
# Changed in 1.32 Use File::Spec->tmpdir TJENNESS 20-08-2000
# Changed in 1.33 Don't require -t STDOUT for -ok.
d134 1
a134 1
    $subject, $from, $verbose, $ed, $outfile, $Is_MacOS, $category, $severity,
d152 1
d161 1
a161 1
sub ask_for_alternatives { # (category|severity)
d163 2
a164 13
    my %alts = (
	'category' => {
	    'default' => 'core',
	    'ok'      => 'install',
	    'opts'    => [qw(core docs install library utilities)], # patch, notabug
	},
	'severity' => {
	    'default' => 'low',
	    'ok'      => 'none',
	    'opts'    => [qw(critical high medium low wishlist none)], # zero
	},
    );
    die "Invalid alternative($name) requested\n" unless grep(/^$name$/, keys %alts);
d166 1
a166 5
    if ($ok) {
	$alt = $alts{$name}{'ok'};
    } else {
 	my @@alts = @@{$alts{$name}{'opts'}};
	paraprint <<EOF;
d172 13
a184 13
	my $err = 0;
	do {
	    if ($err++ > 5) {
		die "Invalid $name: aborting.\n";
	    }
	    print "Please enter a \u$name [$alts{$name}{'default'}]: ";
	    $alt = <>;
	    chomp $alt;
	    if ($alt =~ /^\s*$/) {
		$alt = $alts{$name}{'default'};
	    }
	} while !((($alt) = grep(/^$alt/i, @@alts)));
    }
d199 1
a199 1
    if (!getopts("Adhva:s:b:f:F:r:e:SCc:to:n:")) { Help(); exit; };
d207 1
a207 1
    $perlbug = 'perlbug@@perl.org';
d279 2
d471 3
a473 1
    $category ||= ask_for_alternatives('category');
d476 3
a478 1
    $severity ||= ask_for_alternatives('severity');
d512 1
a512 1
    open(REP,">$filename") or die "Unable to create report file `$filename': $!\n";
d529 1
a529 1
	close(F) or die "Error closing `$file': $!";
d543 1
a543 1
    close(REP) or die "Error closing report file: $!";
d548 1
a548 1
    open(REP, "<$filename") or die "Unable to open report file `$filename': $!\n";
d553 1
a553 1
    close(REP) or die "Error closing report file `$filename': $!";
a563 7
EFF
    if ($::opt_A) {
	print OUT <<EFF;
    ack=no
EFF
    }
    print OUT <<EFF;
d633 1
a633 2
    my $sts;
    $sts = system("$ed $filename") unless $Is_MacOS;
d667 1
a667 1
    open(REP, "<$filename") or die "Couldn't open `$filename': $!\n";
d722 1
a722 1
		open(REP, "<$filename") or die "Couldn't open file `$filename': $!\n";
d728 2
a729 2
		close(REP) or die "Error closing report file `$filename': $!";
		close(FILE) or die "Error closing $file: $!";
d735 1
a735 1
		open(REP, "<$filename") or die "Couldn't open file `$filename': $!\n";
d737 1
a737 1
		close(REP) or die "Error closing report file `$filename': $!";
d758 1
a758 1
	    } elsif ($action =~ /^s/i) {
d779 1
a779 1
	open(REP, "<$filename") or die "Couldn't open `$filename': $!\n";
d781 1
a781 1
	close(REP) or die "Error closing $filename: $!";
d826 1
a826 1
	open(SENDMAIL, "|$sendmail -t -oi") || die "'|$sendmail -t -oi' failed: $!";
d833 1
a833 1
	open(REP, "<$filename") or die "Couldn't open `$filename': $!\n";
d835 1
a835 1
	close(REP) or die "Error closing $filename: $!";
d856 1
a856 1
$0  [-v] [-r returnaddress] [-A] [-ok | -okay | -nok | -nokay]
d878 2
a879 1
  -d    Data mode.  This prints out your configuration data, without mailing
a880 1
  -A    Don't send a bug received acknowledgement to the return address.
d895 4
a898 1
    my $dir = File::Spec->tmpdir();
d900 1
d932 1
a932 1
S<[ B<-S> ]> S<[ B<-t> ]>  S<[ B<-d> ]>  S<[ B<-A> ]>  S<[ B<-h> ]>
d935 1
a935 1
 S<[ B<-A> ]> S<[ B<-ok> | B<-okay> | B<-nok> | B<-nokay> ]>
d953 1
a953 1
compose your own report, and email it to B<perlbug@@perl.org>.  You might
d1031 1
a1031 1
perlbug@@perl.org will register you as a savior of the world.  Your
d1051 1
a1051 1
it to B<perlbug@@perl.org>.  If, for some reason, you cannot run
d1078 1
a1078 8
Address to send the report to.  Defaults to `perlbug@@perl.org'.

=item B<-A>

Don't send a bug received acknowledgement to the reply address.
Generally it is only a sensible to use this option if you are a
perl maintainer actively watching perl porters for your message to
arrive.
@


1.1.1.5
log
@stock perl 5.8.0 from CPAN
@
text
@d94 1
a94 1
my $Version = "1.34";
a131 1
# Changed in 1.34 Added Message-Id RFOLEY 18-06-2002 
d138 1
a138 1
my( $file, $usefile, $cc, $address, $perlbug, $testaddress, $filename, $messageid, $domain,
d140 1
a140 1
    $fh, $me, $Is_MSWin32, $Is_Linux, $Is_VMS, $msg, $body, $andcc, %REP, $ok);
a211 1
    $Is_Linux = lc($^O) eq 'linux';
d229 1
a229 1
    $testaddress = 'perlbug-test@@perl.org';
d254 1
a254 1
	
a315 12
    if ($::HaveUtil) {
		$domain = Mail::Util::maildomain();
    } elsif ($Is_MSWin32) {
		$domain = $ENV{'USERDOMAIN'};
    } else {
		require Sys::Hostname;
		$domain = Sys::Hostname::hostname();
    }

    # Message-Id - rjsf
    $messageid = "<$::Config{'version'}_${$}_".time."\@@$domain>"; 

a344 5
    
    if (TrivialSubject($subject)) {
	$subject = '';
    }

d352 2
d356 2
a357 2
	do {
	    print "Subject: ";
d359 1
a359 2
	    chomp $subject;
	    if ($err++ == 5) {
d362 2
a363 1
	} while (TrivialSubject($subject));
d380 10
a389 2
		# move $domain to where we can use it elsewhere	
        if ($domain) {
d419 1
a419 1
	    chomp $from;
d439 1
a439 1
	chomp $entry;
d477 1
a477 1
	chomp $entry;
d504 1
a504 1
	chomp $entry;
d621 1
a621 1
    push @@env, grep /^(?:PERL|LC_|LANG|CYGWIN)/, keys %ENV;
d648 1
a648 1
	chomp $entry;
d671 1
a671 1
	chomp $entry;
d725 1
a725 2
the screen, re-edit it, display/change the subject,
or cancel without sending anything?
d729 1
a729 1
	    print "Action (Send/Display/Edit/Subject/Save to File): ";
d731 1
a731 1
	    chomp $action;
d734 1
a734 2
		my $file_save = $outfile || "perlbug.rep";
		print "\n\nName of file to save message in [$file_save]: ";
d736 2
a737 2
		chomp $file;
		$file = $file_save if $file eq "";
a746 1
		print FILE "Message-Id: $messageid\n" if $messageid;
a758 13
	    } elsif ($action =~ /^su/i) { # <Su>bject
		print "Subject: $subject\n";
		print "If the above subject is fine, just press Enter.\n";
		print "If not, type in the new subject.\n";
		print "Subject: ";
		my $reply = scalar <STDIN>;
		chomp $reply;
		if ($reply ne '') {
		    unless (TrivialSubject($reply)) {
			$subject = $reply;
			print "Subject: $subject\n";
		    }
		}
d764 1
a764 1
		chomp $reply;
a787 13
sub TrivialSubject {
    my $subject = shift;
    if ($subject =~
	/^(y(es)?|no?|help|perl( (bug|problem))?|bug|problem)$/i ||
	length($subject) < 4 ||
	$subject !~ /\s/) {
	print "\nThat doesn't look like a good subject.  Please be more verbose.\n\n";
        return 1;
    } else {
	return 0;
    }
}

d794 1
a794 5

    # on linux certain mail implementations won't accept the subject
    # as "~s subject" and thus the Subject header will be corrupted
    # so don't use Mail::Send to be safe
    if ($::HaveSend && !$Is_Linux) {
a852 1
	print SENDMAIL "Message-Id: $messageid\n" if $messageid;
d1095 1
a1095 1
Address to send the report to.  Defaults to B<perlbug@@perl.org>.
d1187 1
a1187 1
Test mode.  The target address defaults to B<perlbug-test@@perl.org>.
d1202 1
a1202 1
Hugo van der Sanden (E<lt>hv@@crypt.org<gt>),
@


1.1.1.6
log
@perl 5.8.2 from CPAN
@
text
@d141 1
a141 2
    $fh, $me, $Is_MSWin32, $Is_Linux, $Is_VMS, $msg, $body, $andcc, %REP, $ok,
    $Is_OpenBSD);
a213 1
    $Is_OpenBSD = lc($^O) eq 'openbsd';
d836 1
a836 1
    if ($::HaveSend && !$Is_Linux && !$Is_OpenBSD) {
@


1.1.1.7
log
@Import of stock perl 5.8.5
@
text
@a91 3
    # use secure tempfiles wherever possible
    eval "require File::Temp;";
    $::HaveTemp = ($@@ eq "");
d94 1
a94 1
my $Version = "1.35";
a132 1
# Changed in 1.35 Use File::Temp (patch from Solar Designer) NWCLARK 28-02-2004
d961 4
a964 12
    if ($::HaveTemp) {
	# Good. Use a secure temp file
	my ($fh, $filename) = File::Temp::tempfile(UNLINK => 1);
	close($fh);
	return $filename;
    } else {
	# Bah. Fall back to doing things less securely.
	my $dir = File::Spec->tmpdir();
	$filename = "bugrep0$$";
	$filename++ while -e File::Spec->catfile($dir, $filename);
	$filename = File::Spec->catfile($dir, $filename);
    }
@


1.1.1.8
log
@perl 5.8.8 import
@
text
@a30 1
my $patchnum = "";
d33 1
a33 6
    $patchnum = $1 if /#define PERL_PATCHNUM\s+(\d+)/;
    last if $_ =~ /^\s*static\s+(?:const\s+)?char.*?local_patches\[\]\s*=\s*{\s*$/;
}

if (! defined($_)) {
    warn "Warning: local_patches section not found in patchlevel.h\n";
a40 1
    s/"\s+STRINGIFY\(PERL_PATCHNUM\)/$patchnum"/;
@


1.1.1.9
log
@import perl 5.10.0 from CPAN
@
text
@d31 1
d34 1
d47 1
d67 1
a67 1
my $extract_version = sprintf("%vd", $^V);
a101 2
    eval { require Module::CoreList; };
    $::HaveCoreList = ($@@ eq "");
d104 1
a104 1
my $Version = "1.36";
a143 1
# Changed in 1.36 Initial Module::CoreList support Alexandr Ciornii 11-07-2007
d155 1
a155 1
my $perl_version = $^V ? sprintf("%vd", $^V) : $];
a505 23
	}
    }
    my $report_about_module = '';
    if ($::HaveCoreList) {
	paraprint <<EOF;
Is your report about a Perl module? If yes, enter its name. If not, skip.
EOF
	print "Module []: ";
	my $entry = scalar <>;
	$entry =~ s/^\s+//s;
	$entry =~ s/\s+$//s;
	if ($entry ne q{}) {
	    $category ||= 'library';
	    $report_about_module = $entry;
	    my $first_release = Module::CoreList->first_release($entry);
	    unless ($first_release) {
		paraprint <<EOF;
Module $entry is not a core module. Please check that
you entered its name correctly. If it is correct,
abort this program, try searching for $entry on
search.cpan.org, and report it there.
EOF
	    }
@


1.1.1.10
log
@import perl 5.10.1
@
text
@a42 3
    next if /^\s*#/;  # preprocessor stuff
    next if /PERL_GIT_UNPUSHED_COMMITS/;    # XXX expand instead
    next if /PERL_GIT_UNCOMMITTED_CHANGES/; # XXX expand instead
a83 3
use warnings;
no warnings 'once'; # Eventually, the $::opt_ stuff should get cleaned up
use strict;
d87 1
a87 1
use File::Basename 'basename';
d92 1
a92 1
    eval { require Mail::Send;};
d94 1
a94 1
    eval { require Mail::Util; } ;
d97 1
a97 1
    eval { require File::Temp; };
d103 1
a103 1
my $Version = "1.39";
d144 4
a147 16
# Changed in 1.37 Killed some string evals, rewrote most prose JESSE 2008-06-08
# Changed in 1.38 Actually enforce the CoreList check,
#                 Record the module the user enters if they do so
#                 Refactor prompts to use common code           JESSE 2008-06-08
# Changed in 1.39 Trap mail sending failures (simple ones) so   JESSE 2008-06-08
#                 users might be able to recover their bug reports
#                 Refactor mail sending routines
#                 Unify message building code
#                 Unify message header building
#                 Fix "module" prompting to not squish "category" prompting 
#                 use warnings; (except 'once' warnings)
#                 Unified report fingerprint/change detection code
#                 Removed some labeled 'gotos'
#TODO:
#       make sure failure (transmission-wise) of Mail::Send is accounted for.
#       (This may work now. Unsure of the original author's issue -JESSE 2008-06-08)
d150 4
a153 7
my( $file, $usefile, $cc, $address, $bugaddress, $testaddress, $thanksaddress,
    $filename, $messageid, $domain, $subject, $from, $verbose, $ed, $outfile,
    $fh, $me, $body, $andcc, %REP, $ok, $thanks, $progname,
    $Is_MacOS, $Is_MSWin32, $Is_Linux, $Is_VMS, $Is_OpenBSD,
    $report_about_module, $category, $severity,

);
d164 2
a165 2
    paraprint <<"EOF";
Please use $progname interactively. If you want to
d174 1
a174 10
if ($outfile) {
    save_message_to_disk($outfile);
} else {
    Send();
    if ($thanks) {
	print "\nThank you for taking the time to send a thank-you message!\n\n";
    } else {
	print "\nThank you for taking the time to file a bug report!\n\n";
    }
}
a183 2
	    # Inevitably some of these will end up in RT whatever we do:
	    'thanks'  => 'thanks',
a188 1
	    'thanks'  => 'none',
d192 1
a192 1
    die "Invalid alternative ($name) requested\n" unless grep(/^$name$/, keys %alts);
d194 2
a195 3
    my $what = $ok || $thanks;
    if ($what) {
	$alt = $alts{$name}{$what};
a197 1
    print "\n\n";
d199 1
a199 1
Please pick a $name from the following list:
d202 1
d209 6
a214 2
        $alt = _prompt('', "\u$name", $alts{$name}{'default'});
		$alt ||= $alts{$name}{'default'};
d230 1
a230 1
        MacPerl::Ask('Provide command line args here (-h for help):')
d233 1
a233 1
    if (!getopts("Adhva:s:b:f:F:r:e:SCc:to:n:T")) { Help(); exit; };
d241 1
a241 1
    $bugaddress = 'perlbug@@perl.org';
a245 14
    # Thanks address
    $thanksaddress = 'perl-thanks@@perl.org';

    if (basename ($0) =~ /^perlthanks/i) {
	# invoked as perlthanks
	$::opt_T = 1;
	$::opt_C = 1; # don't send a copy to the local admin
    }

    if ($::opt_T) {
	$thanks = 'thanks';
    }
    
    $progname = $thanks ? 'perlthanks' : 'perlbug';
d247 1
a247 2
    $address = $::opt_a || ($::opt_t ? $testaddress
			    : $thanks ? $thanksaddress : $bugaddress);
d288 1
a288 1
    $ok = '';
d313 1
a313 1
	    $ok = 'ok';
d357 11
a367 7
	if ($thanks) {
	    paraprint <<'EOF';
This program provides an easy way to send a thank-you message back to the
authors and maintainers of perl.

If you wish to submit a bug report, please run it without the -T flag
(or run the program perlbug rather than perlthanks)
a368 14
	} else {
	    paraprint <<"EOF";
This program provides an easy way to create a message reporting a
bug in the core perl distribution (along with tests or patches)
to the volunteers who maintain perl at $address.  To send a thank-you
note to $thanksaddress instead of a bug report, please run 'perlthanks'.

Please do not use $0 to send test messages, test whether perl
works, or to report bugs in perl modules from CPAN.

For help using perl, try posting to the Usenet newsgroup 
comp.lang.perl.misc.
EOF
	}
d373 1
a373 1
    if ($subject && TrivialSubject($subject)) {
d378 5
a382 9
	    print 
"First of all, please provide a subject for the message.\n";
	if ( not $thanks)  {
	    paraprint <<EOF;
This should be a concise description of your bug or problem
which will help the volunteers working to improve perl to categorize
and resolve the issue.  Be as specific and descriptive as
you can. A subject like "perl bug" or "perl problem" will make it
much less likely that your issue gets the attention it deserves.
a383 1
	}
d387 3
a389 1
        $subject = _prompt('','Subject');
d391 1
a391 5
		if ($thanks) {
		    $subject = 'Thanks for Perl';
		} else {
		    die "Aborting.\n";
		}
d423 2
a424 4
Perl's developers may need your email address to contact you for
further information about your issue or to inform you when it is
resolved.  If the default shown is not your email address, please
correct it.
d429 2
a430 3
Please enter your full internet email address so that Perl's
developers can contact you with questions about your issue or to
inform you that it has been resolved.
d439 3
a441 1
        $from = _prompt('','Your address',$guess);
d453 9
a461 6
	my $description =  <<EOF;
$0 can send a copy of this report to your local perl
administrator.  If the address below is wrong, please correct it,
or enter 'none' or 'yourself' to not send a copy.
EOF
	my $entry = _prompt($description, "Local perl administrator", $cc);
d470 1
a470 5
    if ($cc) { 
        $andcc = " and $cc" 
    } else {
        $andcc = ''
    }
d475 25
a500 43
    my $description;

	chomp (my $common_end = <<"EOF");
You will probably want to use a text editor to enter the body of
your report. If "$ed" is the editor you want to use, then just press
Enter, otherwise type in the name of the editor you would like to
use.

If you have already composed the body of your report, you may enter
"file", and $0 will prompt you to enter the name of the file
containing your report.
EOF

	if ($thanks) {
	    $description = <<"EOF";
It's now time to compose your thank-you message.

Some information about your local perl configuration will automatically
be included at the end of your message, because we're curious about
the different ways that people build and use perl. If you'd rather
not share this information, you're welcome to delete it.

$common_end
EOF
	} else {
	    $description =  <<"EOF";
It's now time to compose your bug report. Try to make the report
concise but descriptive. Please include any detail which you think
might be relevant or might help the volunteers working to improve
perl. If you are reporting something that does not work as you think
it should, please try to include examples of the actual result and of
what you expected.

Some information about your local perl configuration will automatically
be included at the end of your report. If you are using an unusual
version of perl, it would be useful if you could confirm that you
can replicate the problem on a standard build of perl as well.

$common_end
EOF
	}

    my $entry = _prompt($description, "Editor", $ed);
d508 4
a511 5
    if ($::HaveCoreList && !$ok && !$thanks) {
	my $description =  <<EOF;
If your bug is about a Perl module rather than a core language
feature, please enter its name here. If it's not, just hit Enter
to skip this question.
d513 7
a519 4

    my $entry = '';
	while ($entry eq '') {
        $entry = _prompt($description, 'Module');
d521 1
a521 1
	    if ($entry and not $first_release) {
d523 4
a526 3
$entry is not a "core" Perl module. Please check that you entered
its name correctly. If it is correct, quit this program, try searching
for $entry on http://rt.cpan.org, and report your issue there.
d528 1
a528 9

            $entry = '';
        } elsif ($entry) {
	        $category ||= 'library';
	        $report_about_module = $entry;
            last;
        } else {
            last;
        }
d544 1
a544 1
	my $description = <<EOF;
d547 3
a549 1
	my $entry = _prompt($description, "Filename");
d553 1
a553 2
It seems you didn't enter a filename. Please choose to use a text
editor or enter a filename.
d560 3
a562 5
'$entry' doesn't seem to be a readable file.  You may have mistyped
its name or may not have permission to read it.

If you don't want to use a file as the content of your report, just
hit Enter and you'll be able to select a text editor instead.
d570 2
a571 3
    open(REP,">$filename") or die "Unable to create report file '$filename': $!\n";
    my $reptype = !$ok ? ($thanks ? 'thank-you' : 'bug')
	: $::opt_n ? "build failure" : "success";
d583 1
a583 1
		or die "Unable to read report file from '$file': $!\n";
d587 1
a587 1
	close(F) or die "Error closing '$file': $!";
d589 1
a589 2
	if ($thanks) {
	    print REP <<'EOF';
d592 1
a592 12
[Please enter your thank-you message here]



[You're welcome to delete anything below this line]
-----------------------------------------------------------------
EOF
	} else {
	    print REP <<'EOF';

-----------------------------------------------------------------
[Please describe your issue here]
a598 1
	}
d603 9
a611 3
    # Set up an initial report fingerprint so we can compare it later
    _fingerprint_lines_in_report();

a622 6

    if ($report_about_module ) { 
        print OUT <<EFF;
    module=$report_about_module
EFF
    }
d688 6
a693 2
	my $description = "Please make sure that the name of the editor you want to use is correct.";
	my $entry = _prompt($description, 'Editor', $ed);
d697 20
a716 2
    _edit_file($ed);
}
d718 10
a727 2
sub _edit_file {
    my $editor = shift;
d729 13
a741 46
    my $report_written = 0;

    while ( !$report_written ) {
        if ($Is_MacOS) {
            require ExtUtils::MakeMaker;
            ExtUtils::MM_MacOS::launch_file($filename);
            _prompt('', "Press Enter when done." );
        } else {    # we're not on oldschool mac os
            my $exit_status = system("$editor $filename");
            if ($exit_status) {
                my $desc = <<EOF;
The editor you chose ('$editor') could not be run!

If you mistyped its name, please enter it now, otherwise just press Enter.
EOF
                my $entry = _prompt( $desc, 'Editor', $editor );
                if ( $entry ne "" ) {
                    $editor = $entry;
                    next;
                } else {
                    paraprint <<EOF;
You may want to save your report to a file, so you can edit and
mail it later.
EOF
                    return;
                }
            }
        }
        return if ( $ok and not $::opt_n ) || $body;

        # Check that we have a report that has some, eh, report in it.

        unless ( _fingerprint_lines_in_report() ) {
            my $description = <<EOF;
It looks like you didn't enter a report. You may [r]etry your edit
or [c]ancel this report.
EOF
            my $action = _prompt( $description, "Action (Retry/Cancel) " );
            if ( $action =~ /^[re]/i ) {    # <R>etry <E>dit
                next;
            } elsif ( $action =~ /^[cq]/i ) {    # <C>ancel, <Q>uit
                Cancel();                        # cancel exits
            }
        }
        # Ok. the user did what they needed to;
        return;
d743 11
d755 1
a755 2
}

d759 1
a759 1
    print "\nQuitting without sending your message.\n";
d767 6
a772 13
	    my $menu = <<EOF;


You have finished composing your message. At this point, you have 
a few options. You can:

    * [Se]end the message to $address$andcc, 
    * [D]isplay the message on the screen,
    * [R]e-edit the message
    * Display or change the message's [su]bject
    * Save the message to a [f]ile to mail at another time
    * [Q]uit without sending a message

d775 4
a778 3
        print $menu;
	    my $action =  _prompt('', "Action (Send/Display/Edit/Subject/Save to File)");;
        print "\n";
d780 22
a801 1
            if ( SaveMessage() ) { exit }
d804 1
a804 1
		open(REP, "<$filename") or die "Couldn't open file '$filename': $!\n";
d806 1
a806 1
		close(REP) or die "Error closing report file '$filename': $!";
d808 6
a813 1
		my $reply = _prompt( "Subject: $subject", "If the above subject is fine, press Enter. Otherwise, type a replacement now\nSubject");
d822 5
a826 2
		my $reply =  _prompt( "Are you certain you want to send this message?", 'Please type "yes" if you are','no');
		if ($reply =~ /^yes$/) {
d830 3
a832 1
You didn't type "yes", so your message has not yet been sent.
d842 1
a842 1
The command you entered was ambiguous. Please type "send", "save" or "subject".
d855 1
a855 1
	print "\nThe subject you entered wasn't very descriptive. Please try again.\n\n";
a861 11
sub SaveMessage {
    my $file_save = $outfile || "$progname.rep";
    my $file = _prompt( '', "Name of file to save message in", $file_save );
    save_message_to_disk($file) || return undef;
    print "\n";
    paraprint <<EOF;
A copy of your message has been saved in '$file' for you to
send to '$address' with your normal mail client.
EOF
}

a862 1

d864 4
d869 1
a869 1
    # on linux certain "mail" implementations won't accept the subject
d872 44
a915 9
    eval {
        if ( $::HaveSend && !$Is_Linux && !$Is_OpenBSD ) {
            _send_message_mailsend();
        } elsif ($Is_VMS) {
            _send_message_vms();
        } else {
            _send_message_sendmail();
        }
    };
d917 19
a935 3
    if ( my $error = $@@ ) {
        paraprint <<EOF;
$0 has detected an error while trying to send your message: $error.
d937 5
a941 4
Your message may not have been sent. You will now have a chance to save a copy to disk.
EOF
        SaveMessage();
        return;
d943 2
a944 3

    1 while unlink($filename);    # remove all versions under VMS
}    # sub Send
d949 3
a951 7
This program is designed to help you generate and send bug reports
(and thank-you notes) about perl5 and the modules which ship with it.

In most cases, you can just run "$0" interactively from a command
line without any special arguments and follow the prompts.

Advanced usage:
d953 1
d958 1
d967 2
a968 2
  -a    Address to send the report to. Defaults to '$address'.
  -c    Address to send copy of report to. Defaults to '$cc'.
d977 1
a977 2
  -t    Test mode. The target address defaults to '$testaddress'.
  -T    Thank-you mode. The target address defaults to '$thanksaddress'.
d1011 1
a1018 154
sub _prompt {
    my ($explanation, $prompt, $default) = (@@_);
    if ($explanation) {
        print "\n\n";
        paraprint $explanation;
    }
    print $prompt. ($default ? " [$default]" :''). ": ";
	my $result = scalar(<>);
    chomp($result);
	$result =~ s/^\s*(.*?)\s*$/$1/s;
    if ($default && $result eq '') {
        return $default;
    } else {
        return $result;
    }
}

sub _build_header {
    my %attr = (@@_);

    my $head = '';
    for my $header (keys %attr) {
        $head .= "$header: ".$attr{$header}."\n";
    }
    return $head;
}

sub _message_headers {
    my %headers = ( To => $address, Subject => $subject );
    $headers{'Cc'}         = $cc        if ($cc);
    $headers{'Message-Id'} = $messageid if ($messageid);
    $headers{'Reply-To'}   = $from      if ($from);
    return \%headers;
}

sub build_complete_message {
    my $content = _build_header(%{_message_headers()}) . "\n\n";
    open( REP, "<$filename" ) or die "Couldn't open file '$filename': $!\n";
    while (<REP>) { $content .= $_; }
    close(REP) or die "Error closing report file '$filename': $!";
    return $content;
}

sub save_message_to_disk {
    my $file = shift;

	    open OUTFILE, ">$file" or do { warn  "Couldn't open '$file': $!\n"; return undef};
        print OUTFILE build_complete_message();
        close(OUTFILE) or do { warn  "Error closing $file: $!"; return undef };
	    print "\nMessage saved.\n";
        return 1;
}

sub _send_message_vms {
    if (   ( $address =~ /@@/ and $address !~ /^\w+%"/ )
        or ( $cc =~ /@@/ and $cc !~ /^\w+%"/ ) ) {
        my $prefix;
        foreach ( qw[ IN MX SMTP UCX PONY WINS ], '' ) {
            $prefix = "$_%", last if $ENV{"MAIL\$PROTOCOL_$_"};
        }
        $address = qq[${prefix}"$address"] unless $address =~ /^\w+%"/;
        $cc = qq[${prefix}"$cc"] unless !$cc || $cc =~ /^\w+%"/;
    }
    $subject =~ s/"/""/g;
    $address =~ s/"/""/g;
    $cc      =~ s/"/""/g;
    my $sts = system(qq[mail/Subject="$subject" $filename. "$address","$cc"]);
    if ($sts) {
        die "Can't spawn off mail (leaving bug report in $filename): $sts";
    }
}

sub _send_message_mailsend {
    my $msg = Mail::Send->new();
    my %headers = %{_message_headers()};
    for my $key ( keys %headers) {
        $msg->add($key => $headers{$key});
    }

    $fh = $msg->open;
    open(REP, "<$filename") or die "Couldn't open '$filename': $!\n";
    while (<REP>) { print $fh $_ }
    close(REP) or die "Error closing $filename: $!";
    $fh->close;

    print "\nMessage sent.\n";
}

sub _probe_for_sendmail {
    my $sendmail = "";
    for (qw(/usr/lib/sendmail /usr/sbin/sendmail /usr/ucblib/sendmail)) {
        $sendmail = $_, last if -e $_;
    }
    if ( $^O eq 'os2' and $sendmail eq "" ) {
        my $path = $ENV{PATH};
        $path =~ s:\\:/:;
        my @@path = split /$Config{'path_sep'}/, $path;
        for (@@path) {
            $sendmail = "$_/sendmail",     last if -e "$_/sendmail";
            $sendmail = "$_/sendmail.exe", last if -e "$_/sendmail.exe";
        }
    }
    return $sendmail;
}

sub _send_message_sendmail {
    my $sendmail = _probe_for_sendmail();
    unless ($sendmail) {
        paraprint(<<"EOF"), die "\n";
It appears that there is no program which looks like "sendmail" on
your system and that the Mail::Send library from CPAN isn't available.
Because of this, there's no easy way to automatically send your
message.

A copy of your message has been saved in '$filename' for you to
send to '$address' with your normal mail client.
EOF
    }

    open( SENDMAIL, "|$sendmail -t -oi" )
        || die "'|$sendmail -t -oi' failed: $!";
    print SENDMAIL build_complete_message();
    if ( close(SENDMAIL) ) {
        print "\nMessage sent\n";
    } else {
        warn "\nSendmail returned status '", $? >> 8, "'\n";
    }
}



# a strange way to check whether any significant editing
# has been done: check whether any new non-empty lines
# have been added.

sub _fingerprint_lines_in_report {
    my $new_lines = 0;
    # read in the report template once so that
    # we can track whether the user does any editing.
    # yes, *all* whitespace is ignored.

    open(REP, "<$filename") or die "Unable to open report file '$filename': $!\n";
    while (my $line = <REP>) {
        $line =~ s/\s+//g;
        $new_lines++ if (!$REP{$line});

    }
    close(REP) or die "Error closing report file '$filename': $!";
    # returns the number of lines with content that wasn't there when last we looked
    return $new_lines;
}



a1031 2
B<perlbug>

d1036 1
a1036 1
S<[ B<-S> ]> S<[ B<-t> ]>  S<[ B<-d> ]>  S<[ B<-A> ]>  S<[ B<-h> ]> S<[ B<-T> ]>
a1040 2
B<perlthanks>

d1043 2
d1046 13
a1058 5
This program is designed to help you generate and send bug reports
(and thank-you notes) about perl5 and the modules which ship with it.

In most cases, you can just run it interactively from a command
line without any special arguments and follow the prompts.
d1060 2
a1061 20
If you have found a bug with a non-standard port (one that was not
part of the I<standard distribution>), a binary distribution, or a
non-core module (such as Tk, DBI, etc), then please see the
documentation that came with that distribution to determine the
correct place to report bugs.

If you are unable to send your report using B<perlbug> (most likely
because your system doesn't have a way to send mail that perlbug
recognizes), you may be able to use this tool to compose your report
and save it to a file which you can then send to B<perlbug@@perl.org>
using your regular mail client.

In extreme cases, B<perlbug> may not work well enough on your system
to guide you through composing a bug report. In those cases, you
may be able to use B<perlbug -d> to get system configuration
information to include in a manually composed bug report to
B<perlbug@@perl.org>.


When reporting a bug, please run through this checklist:
d1071 5
a1075 12
Look at http://www.perl.org/ to find out.  If you are not using the
latest released version, please try to replicate your bug on the
latest stable release.

Note that reports about bugs in old versions of Perl, especially
those which indicate you haven't also tested the current stable
release of Perl, are likely to receive less attention from the
volunteers who build and maintain Perl than reports about bugs in
the current release.

This tool isn't apropriate for reporting bugs in any version
prior to Perl 5.0.
d1079 12
a1090 16
A significant number of the bug reports we get turn out to be
documented features in Perl.  Make sure the issue you've run into
isn't intentional by glancing through the documentation that comes
with the Perl distribution.

Given the sheer volume of Perl documentation, this isn't a trivial
undertaking, but if you can point to documentation that suggests
the behaviour you're seeing is I<wrong>, your issue is likely to
receive more attention. You may want to start with B<perldoc>
L<perltrap> for pointers to common traps that new (and experienced)
Perl programmers run into.

If you're unsure of the meaning of an error message you've run
across, B<perldoc> L<perldiag> for an explanation.  If the message
isn't in perldiag, it probably isn't generated by Perl.  You may
have luck consulting your operating system documentation instead.
d1092 1
a1092 1
If you are on a non-UNIX platform B<perldoc> L<perlport>, as some
d1095 2
a1096 3
You may be able to figure out what's going wrong using the Perl
debugger.  For information about how to use the debugger B<perldoc>
L<perldebug>.
d1101 8
a1108 2
fixed -- if nobody can duplicate your problem, it probably won't be 
addressed.
d1110 2
a1111 13
A good test case has most of these attributes: short, simple code;
few dependencies on external commands, modules, or libraries; no
platform-dependent code (unless it's a platform-specific bug);
clear, simple documentation.

A good test case is almost always a good candidate to be included in
Perl's test suite.  If you have the time, consider writing your test case so
that it can be easily included into the standard test suite.

=item Have you included all relevant information?

Be sure to include the B<exact> error messages, if any.
"Perl gave an error" is not an exact error message.
d1115 1
a1115 3
report.  

NOTE: unless your Perl has been compiled with debug info
d1119 1
a1119 1
reproduce the crash and the stack trace.
d1123 4
a1126 4
The easier it is to understand a reproducible bug, the more likely
it will be fixed.  Any insight you can provide into the problem
will help a great deal.  In other words, try to analyze the problem
(to the extent you can) and report your discoveries.
d1131 6
a1136 6
definitely be fixed.  When sending a patch, please use the C<diff>
program with the C<-u> option to generate "unified" diff files.
Bug reports with patches are likely to receive significantly more
attention and interest than those without patches.

Your patch may be returned with requests for changes, or requests for more
d1139 9
a1147 9
Here are a few hints for creating high-quality patches:

Make sure the patch is not reversed (the first argument to diff is
typically the original file, the second argument your changed file).
Make sure you test your patch by applying it with the C<patch>
program before you send it on its way.  Try to follow the same style
as the code you are trying to patch.  Make sure your patch really
does work (C<make test>, if the thing you're patching is covered
by Perl's test suite).
d1152 6
a1157 6
crucial information about your version of perl.  If C<perlbug> is
unable to mail your report after you have typed it in, you may have
to compose the message yourself, add the output produced by C<perlbug
-d> and email it to B<perlbug@@perl.org>.  If, for some reason, you
cannot run C<perlbug> at all on your system, be sure to include the
entire output produced by running C<perl -V> (note the uppercase V).
d1160 3
a1162 9
your Subject line informative.  "a bug" is not informative.  Neither
is "perl crashes" nor is "HELP!!!".  These don't help.  A compact
description of what's wrong is fine.

=item Can you use C<perlbug> to submit a thank-you note?

Yes, you can do this by either using the C<-T> option, or by invoking
the program as C<perlthanks>. Thank-you notes are good. It makes people
smile. 
d1166 4
a1169 7
Having done your bit, please be prepared to wait, to be told the
bug is in your code, or possibly to get no reply at all.  The
volunteers who maintain Perl are busy folks, so if your problem is
an obvious bug in your own code, is difficult to understand or is
a duplicate of an existing report, you may not receive a personal
reply.

d1171 4
a1174 8
perl5-porters@@perl.org mailing list and the commit logs to development
versions of Perl, and encourage the maintainers with kind words or
offers of frosty beverages.  (Please do be kind to the maintainers.
Harassing or flaming them is likely to have the opposite effect of
the one you want.)

Feel free to update the ticket about your bug on http://rt.perl.org
if a new version of Perl is released and your bug is still present.
a1275 4
=item B<-T>

Send a thank-you note instead of a bug report. 

d1284 6
a1289 6
Kenneth Albanowski (E<lt>kjahds@@kjahds.comE<gt>), subsequently
I<doc>tored by Gurusamy Sarathy (E<lt>gsar@@activestate.comE<gt>),
Tom Christiansen (E<lt>tchrist@@perl.comE<gt>), Nathan Torkington
(E<lt>gnat@@frii.comE<gt>), Charles F. Randall (E<lt>cfr@@pobox.comE<gt>),
Mike Guy (E<lt>mjtg@@cam.a.ukE<gt>), Dominic Dunlop
(E<lt>domo@@computer.orgE<gt>), Hugo van der Sanden (E<lt>hv@@crypt.org<gt>),
d1292 1
a1292 2
Richard Foley (E<lt>richard.foley@@rfi.netE<gt>), and Jesse Vincent
(E<lt>jesse@@bestpractical.com<gt>).
@


1.1.1.11
log
@Perl 5.12.2 from CPAN
@
text
@d45 1
a45 1
    next if /"uncommitted-changes"/;        # XXX determine if active instead
d459 1
a459 1
    unless ($::opt_r) {
d463 1
a463 1
	$guess = $ENV{'REPLY-TO'} || $ENV{'REPLYTO'} || $from || '';
a608 6
	} elsif (my $bug_tracker = $Module::CoreList::bug_tracker{$entry}) {
		paraprint <<"EOF";
$entry included with core Perl is copied directly from the CPAN distribution.
Please report bugs in $entry directly to its maintainers using $bug_tracker
EOF
            $entry = '';
a712 4
    # these won't have been set if run with -d
    $category ||= 'core';
    $severity ||= 'low';

a780 1
	    $value = '' unless defined $value;
d868 1
a868 1
    * [Se]nd the message to $address$andcc, 
d1131 1
a1131 1
    $fh->close or die "Error sending mail: $!";
d1156 1
a1156 1
        my $message_start = !$Is_Linux && !$Is_OpenBSD ? <<'EOT' : <<'EOT';
a1158 6
EOT
It appears that there is no program which looks like "sendmail" on
your system.
EOT
        paraprint(<<"EOF"), die "\n";
$message_start
@


1.1.1.12
log
@import perl 5.16.3 from CPAN - worked on by Andrew Fresh and myself
@
text
@d88 1
d111 52
d171 1
a171 1
    $Is_MSWin32, $Is_Linux, $Is_VMS, $Is_OpenBSD,
d173 1
a173 1
    %opt,
d182 3
a184 3
if ($opt{h}) { Help(); exit; }
if ($opt{d}) { Dump(*STDOUT); exit; }
if (!-t STDIN && !($ok and not $opt{n})) {
d193 1
a193 1
Edit() unless $usefile || ($ok and not $opt{n});
d257 5
d263 1
a263 1
    if (!getopts("Adhva:s:b:f:F:r:e:SCc:to:n:T", \%opt)) { Help(); exit; };
d281 2
a282 2
	$opt{T} = 1;
	$opt{C} = 1; # don't send a copy to the local admin
d285 1
a285 1
    if ($opt{T}) {
d291 1
a291 1
    $address = $opt{a} || ($opt{t} ? $testaddress
d294 2
a295 2
    # Users address, used in message and in From and Reply-To headers
    $from = $opt{r} || "";
d298 1
a298 1
    $verbose = $opt{v} || 0;
d301 1
a301 1
    $subject = $opt{s} || "";
d304 1
a304 1
    $usefile = ($opt{f} || 0);
d307 1
a307 1
    $file = $opt{f} || "";
d310 1
a310 1
    $outfile = $opt{F} || "";
d313 1
a313 1
    $body = $opt{b} || "";
d316 1
a316 1
    $ed = $opt{e} || $ENV{VISUAL} || $ENV{EDITOR} || $ENV{EDIT}
d319 1
d323 3
a325 3
    if ($opt{n}) {
	if (substr($opt{n}, 0, 2) eq 'ok' )	{
	    $opt{o} = substr($opt{n}, 1);
d334 2
a335 2
    if ($opt{o}) {
	if ($opt{o} eq 'k' or $opt{o} eq 'kay') {
d337 1
a337 1
	    if ($opt{o} eq 'k' and $age > 60 * 24 * 60 * 60 ) {
d348 3
a350 3
	    unless ($opt{n}) {
		$opt{S} = 1; # don't prompt for send
		$opt{b} = 1; # we have a body
d353 3
a355 3
	    $opt{C} = 1; # don't send a copy to the local admin
	    $opt{s} = 1; # we have a subject line
	    $subject = ($opt{n} ? 'Not ' : '')
d370 3
a372 3
    # that $opt{C} is forced.
    $cc = $opt{C} ? "" : (
	$opt{c} || $::Config{'perladmin'}
d391 1
d459 1
a459 1
    unless ($opt{r}) {
d463 7
a469 2
	$guess = $ENV{'REPLY-TO'} || $ENV{'REPLYTO'} || $ENV{'EMAIL'}
	    || $from || '';
d515 1
a515 1
    if( !$opt{C} and !$opt{c} ) {
d538 1
a538 1
    unless ($opt{e} || $opt{f} || $opt{b}) {
d666 1
a666 1
	: $opt{n} ? "build failure" : "success";
d735 1
a735 1
    if ($opt{A}) {
d815 8
a822 3
        my $exit_status = system("$editor $filename");
        if ($exit_status) {
            my $desc = <<EOF;
d827 6
a832 6
            my $entry = _prompt( $desc, 'Editor', $editor );
            if ( $entry ne "" ) {
                $editor = $entry;
                next;
            } else {
                paraprint <<EOF;
d836 2
a837 1
                return;
d840 1
a840 1
        return if ( $ok and not $opt{n} ) || $body;
d871 1
a871 1
    if( !$opt{S} ) {
a1090 1
    $headers{'From'}       = $from      if ($from);
d1184 2
a1185 2
    open( SENDMAIL, "|-", $sendmail, "-t", "-oi", "-f", $from )
        || die "'|$sendmail -t -oi -f $from' failed: $!";
d1293 1
a1293 1
This tool isn't appropriate for reporting bugs in any version
@


1.1.1.13
log
@Import perl-5.18.2

OK espie@@ sthen@@ deraadt@@
@
text
@d360 2
a361 2
Suggestions for how to find help using Perl can be found at
http://perldoc.perl.org/perlcommunity.html
d1466 2
a1467 2
Mike Guy (E<lt>mjtg@@cam.ac.ukE<gt>), Dominic Dunlop
(E<lt>domo@@computer.orgE<gt>), Hugo van der Sanden (E<lt>hv@@crypt.orgE<gt>),
d1471 1
a1471 1
(E<lt>jesse@@bestpractical.comE<gt>).
@


1.1.1.14
log
@Import perl-5.20.1
@
text
@d25 1
a25 1
# get patchlevel.h timestamp
d27 2
a28 2
-e catfile(updir, "patchlevel.h")
    or die "Can't find patchlevel.h: $!";
d30 1
a30 1
my $patchlevel_date = (stat _)[9];
d32 26
a57 1
# TO DO (perhaps): store/embed $Config::config_sh into perlbug. When perlbug is
d77 4
a85 2
my @@patches = Config::local_patches();
my $patch_tags = join "", map /(\S+)/ ? "+$1 " : (), @@patches;
d108 1
a108 1
my $Version = "1.40";
d120 1
a120 1
    %opt, $have_attachment, $attachments, $has_patch, $mime_boundary
a147 5

	paraprint <<EOF
Please note that mailing lists are moderated, your message may take a while to
show up.
EOF
a149 7

	paraprint <<EOF
Please note that mailing lists are moderated, your message may take a while to
show up. If you do not receive an automated response acknowledging your message
within a few hours (check your SPAM folder and outgoing mail) please consider
sending an email directly from your mail client to perlbug\@@perl.org.
EOF
a150 1

d205 1
a205 1
    if (!getopts("Adhva:s:b:f:F:r:e:SCc:to:n:T:p:", \%opt)) { Help(); exit; };
a250 15
    # We have one or more attachments
    $have_attachment = ($opt{p} || 0);
    $mime_boundary = ('-' x 12) . "$Version.perlbug" if $have_attachment;

    # Comma-separated list of attachments
    $attachments = $opt{p} || "";
    $has_patch = 0; # TBD based on file type

    for my $attachment (split /\s*,\s*/, $attachments) {
        unless (-f $attachment && -r $attachment) {
            die "The attachment $attachment is not a readable file: $!\n";
        }
        $has_patch = 1 if $attachment =~ m/\.(patch|diff)$/;
    }

a396 2
    $subject = '[PATCH] ' . $subject
        if $has_patch && ($subject !~ m/^\[PATCH/i);
d599 1
a599 3
    open(REP, '>:raw', $filename) or die "Unable to create report file '$filename': $!\n";
    binmode(REP, ':raw :crlf') if $Is_MSWin32;

d612 1
a612 1
	open(F, '<:raw', $file)
a613 1
	binmode(F, ':raw :crlf') if $Is_MSWin32;
a664 7
    if ($has_patch) {
        print OUT <<EFF;
    Type=Patch
    PatchStatus=HasPatch
EFF
    }

d824 1
a824 2
		open(REP, '<:raw', $filename) or die "Couldn't open file '$filename': $!\n";
		binmode(REP, ':raw :crlf') if $Is_MSWin32;
a826 4
		if ($have_attachment) {
		    print "\n\n---\nAttachment(s):\n";
		    for my $att (split /\s*,\s*/, $attachments) { print "    $att\n"; }
		}
a925 1
    [-p patchfile ]
a933 2
  -p    File containing a patch or other text attachment. Separate
        multiple files with commas.
a1020 4
    if ($have_attachment) {
        $headers{'MIME-Version'} = '1.0';
        $headers{'Content-Type'} = qq{multipart/mixed; boundary=\"$mime_boundary\"};
    }
a1023 34
sub _add_body_start {
    my $body_start = <<"BODY_START";
This is a multi-part message in MIME format.
--$mime_boundary
Content-Type: text/plain; format=fixed
Content-Transfer-Encoding: 8bit

BODY_START
    return $body_start;
}

sub _add_attachments {
    my $attach = '';
    for my $attachment (split /\s*,\s*/, $attachments) {
        my $attach_file = basename($attachment);
        $attach .= <<"ATTACHMENT";

--$mime_boundary
Content-Type: text/x-patch; name="$attach_file"
Content-Transfer-Encoding: 8bit
Content-Disposition: attachment; filename="$attach_file"

ATTACHMENT

        open my $attach_fh, '<:raw', $attachment
            or die "Couldn't open attachment '$attachment': $!\n";
        while (<$attach_fh>) { $attach .= $_; }
        close($attach_fh) or die "Error closing attachment '$attachment': $!";
    }

    $attach .= "\n--$mime_boundary--\n";
    return $attach;
}

d1026 1
a1026 3
    $content .= _add_body_start() if $have_attachment;
    open( REP, "<:raw", $filename ) or die "Couldn't open file '$filename': $!\n";
    binmode(REP, ':raw :crlf') if $Is_MSWin32;
a1028 1
    $content .= _add_attachments() if $have_attachment;
d1035 1
a1035 3
        open OUTFILE, '>:raw', $file or do { warn  "Couldn't open '$file': $!\n"; return undef};
        binmode(OUTFILE, ':raw :crlf') if $Is_MSWin32;

d1043 5
a1047 18

    my $mail_from  = $from;
    my $rcpt_to_to = $address;
    my $rcpt_to_cc = $cc;

    map { $_ =~ s/^[^<]*<//;
          $_ =~ s/>[^>]*//; } ($mail_from, $rcpt_to_to, $rcpt_to_cc);

    if ( open my $sff_fh, '|-:raw', 'MCR TCPIP$SYSTEM:TCPIP$SMTP_SFF.EXE SYS$INPUT:' ) {
        print $sff_fh "MAIL FROM:<$mail_from>\n";
        print $sff_fh "RCPT TO:<$rcpt_to_to>\n";
        print $sff_fh "RCPT TO:<$rcpt_to_cc>\n" if $rcpt_to_cc;
        print $sff_fh "DATA\n";
        print $sff_fh build_complete_message();
        my $success = close $sff_fh;
        if ($success ) {
            print "\nMessage sent\n";
            return;
d1049 9
a1058 1
    die "Mail transport failed (leaving bug report in $filename): $^E\n";
d1069 1
a1069 4
    binmode($fh, ':raw');
    print $fh _add_body_start() if $have_attachment;
    open(REP, "<:raw", $filename) or die "Couldn't open '$filename': $!\n";
    binmode(REP, ':raw :crlf') if $Is_MSWin32;
a1071 1
    print $fh _add_attachments() if $have_attachment;
d1114 1
a1114 1
    open( SENDMAIL, "|-:raw", $sendmail, "-t", "-oi", "-f", $from )
d1136 1
a1136 2
    open(REP, '<:raw', $filename) or die "Unable to open report file '$filename': $!\n";
    binmode(REP, ':raw :crlf') if $Is_MSWin32;
d1291 5
a1295 5
If so, that's great news; bug reports with patches are likely to
receive significantly more attention and interest than those without
patches.  Please attach your patch to the report using the C<-p> option.
When sending a patch, create it using C<git format-patch> if possible,
though a unified diff created with C<diff -pu> will do nearly as well.
d1304 4
a1307 4
Make sure you test your patch by applying it with C<git am> or the
C<patch> program before you send it on its way.  Try to follow the
same style as the code you are trying to patch.  Make sure your patch
really does work (C<make test>, if the thing you're patching is covered
d1341 1
a1341 2
perl5-porters@@perl.org mailing list (mailing lists are moderated, your
message may take a while to show up) and the commit logs to development
d1344 2
a1345 2
Harassing or flaming them is likely to have the opposite effect of the
one you want.)
a1431 5
=item B<-p>

The names of one or more patch files or other text attachments to be
included with the report.  Multiple files must be separated with commas.

d1470 2
a1471 2
Richard Foley (E<lt>richard.foley@@rfi.netE<gt>), Jesse Vincent
(E<lt>jesse@@bestpractical.comE<gt>), and Craig A. Berry (E<lt>craigberry@@mac.comE<gt>).
@


