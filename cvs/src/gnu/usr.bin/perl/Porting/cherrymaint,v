head	1.1;
branch	1.1.1;
access;
symbols
	OPENBSD_6_1_BASE:1.1.1.2
	OPENBSD_6_0:1.1.1.2.0.10
	OPENBSD_6_0_BASE:1.1.1.2
	OPENBSD_5_9:1.1.1.2.0.4
	OPENBSD_5_9_BASE:1.1.1.2
	OPENBSD_5_8:1.1.1.2.0.6
	OPENBSD_5_8_BASE:1.1.1.2
	PERL_5_20_2:1.1.1.2
	OPENBSD_5_7:1.1.1.2.0.2
	OPENBSD_5_7_BASE:1.1.1.2
	PERL_5_20_1:1.1.1.2
	OPENBSD_5_6:1.1.1.1.0.8
	OPENBSD_5_6_BASE:1.1.1.1
	PERL_5_18_2:1.1.1.1
	PERL:1.1.1
	OPENBSD_5_5:1.1.1.1.0.6
	OPENBSD_5_5_BASE:1.1.1.1
	OPENBSD_5_4:1.1.1.1.0.2
	OPENBSD_5_4_BASE:1.1.1.1
	PERL_5_16_3:1.1.1.1
	CPAN:1.1.1;
locks; strict;
comment	@# @;
expand	@o@;


1.1
date	2013.03.25.20.09.28;	author sthen;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	2013.03.25.20.09.28;	author sthen;	state Exp;
branches;
next	1.1.1.2;

1.1.1.2
date	2014.11.17.20.53.16;	author afresh1;	state Exp;
branches;
next	;
commitid	B31cAbBIXiCqnL97;


desc
@@


1.1
log
@Initial revision
@
text
@#!/usr/bin/env perl
use 5.010;
use strict;
use warnings;
use File::Basename;
use Getopt::Long;
require LWP::UserAgent;

my %votemap = (
  'unexamined' => 0,
  'rejected'   => 1,
  'vote'       => 4,
  'picked'     => 5,
);


chomp(my $git_addr = `git config --get cherrymaint.address`);
my $addr = length $git_addr ? $git_addr : 'localhost:3000';

# Usage
my $program = basename $0;
my $usage = << "HERE";
Usage: $program [--address address] [ACTION] [COMMIT]

  ACTIONS: (default is 'vote' if omitted)

HERE
$usage .= join( "\n", map { "    --$_" } (sort keys %votemap), 'help' );
$usage .= "\n" . << "HERE";

  COMMIT: a git revision ID (SHA1 or symbolic reference like HEAD)

  You must first tunnel $addr to perl5.git.perl.org:3000? E.g.
  \$ ssh -C -L${\ join q{:} => reverse split /:/, $addr}:3000 perl5.git.perl.org

HERE

die $usage if grep { /^(--help|-h)$/ } @@ARGV;

# Determine action
my %opt = (address => \$addr);
GetOptions( \%opt, 'address=s', keys %votemap ) or die $usage;

if ( keys(%opt) > 2 ) {
  die "Error: cherrymaint takes only one action argument\n\n$usage"
}

my ($action) = grep { exists $votemap{$_} } keys %opt;
$action ||= 'vote';

# Determine commit SHA1
my $commit = shift @@ARGV;

unless ( defined $commit ) {
  die "Error: cherrymaint requires an explicit commit ID\n\n$usage"
}

my $short_id = qx/git rev-parse --short $commit/;
if ( $? ) {
  die "Error: couldn't get git commit SHA1 from '$commit'\n";
}
chomp $short_id;

# Confirm actions
unless ( $action eq 'vote' ) {
  say "Are you sure you want to mark $short_id as $action? (y/n)";
  my $ans = <STDIN>;
  exit 0 unless $ans =~ /^y/i;
}

# Send the action to cherrymaint
my $n = $votemap{$action};
my $url = "http://$addr/mark?commit=${short_id}&value=${n}";

my $ua = LWP::UserAgent->new(
  agent => 'Porting/cherrymaint ',
  timeout => 30,
  env_proxy => 1,
);

my $response = $ua->get($url);

if ($response->is_success) {
    say "Done.";
}
else {
    die $response->status_line . << "HERE";

Have you remembered to tunnel $addr to perl5.git.perl.org:3000? E.g.
  \$ ssh -C -L${\ join q{:} => reverse split /:/, $addr}:3000 perl5.git.perl.org

Or maybe you created a different tunnel? You can specify the address to use
either on the command line with --address, or by doing
  \$ git config cherrymaint.address host:port

HERE

# Note that you can vote through your browser by pointing it at the the local
# end of the tunnel.  For example, L<http://localhost:3000/> if you went with
# the suggested default values
}

exit 0;
@


1.1.1.1
log
@import perl 5.16.3 from CPAN - worked on by Andrew Fresh and myself
@
text
@@


1.1.1.2
log
@Import perl-5.20.1
@
text
@d98 1
a98 1
# Note that you can vote through your browser by pointing it at the local
@

