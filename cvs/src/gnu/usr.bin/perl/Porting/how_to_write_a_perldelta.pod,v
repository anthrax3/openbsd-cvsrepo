head	1.2;
access;
symbols
	OPENBSD_6_2:1.2.0.2
	OPENBSD_6_2_BASE:1.2
	PERL_5_24_2:1.1.1.5
	OPENBSD_6_1:1.2.0.4
	OPENBSD_6_1_BASE:1.2
	OPENBSD_6_0:1.1.1.4.0.10
	OPENBSD_6_0_BASE:1.1.1.4
	OPENBSD_5_9:1.1.1.4.0.4
	OPENBSD_5_9_BASE:1.1.1.4
	OPENBSD_5_8:1.1.1.4.0.6
	OPENBSD_5_8_BASE:1.1.1.4
	PERL_5_20_2:1.1.1.4
	OPENBSD_5_7:1.1.1.4.0.2
	OPENBSD_5_7_BASE:1.1.1.4
	PERL_5_20_1:1.1.1.4
	OPENBSD_5_6:1.1.1.3.0.8
	OPENBSD_5_6_BASE:1.1.1.3
	PERL_5_18_2:1.1.1.3
	PERL:1.1.1
	OPENBSD_5_5:1.1.1.3.0.6
	OPENBSD_5_5_BASE:1.1.1.3
	OPENBSD_5_4:1.1.1.3.0.2
	OPENBSD_5_4_BASE:1.1.1.3
	PERL_5_16_3:1.1.1.3
	OPENBSD_5_3:1.1.1.2.0.10
	OPENBSD_5_3_BASE:1.1.1.2
	OPENBSD_5_2:1.1.1.2.0.8
	OPENBSD_5_2_BASE:1.1.1.2
	OPENBSD_5_1_BASE:1.1.1.2
	OPENBSD_5_1:1.1.1.2.0.6
	OPENBSD_5_0:1.1.1.2.0.4
	OPENBSD_5_0_BASE:1.1.1.2
	OPENBSD_4_9:1.1.1.2.0.2
	OPENBSD_4_9_BASE:1.1.1.2
	PERL_5_12_2:1.1.1.2
	OPENBSD_4_8:1.1.1.1.0.4
	OPENBSD_4_8_BASE:1.1.1.1
	OPENBSD_4_7:1.1.1.1.0.2
	OPENBSD_4_7_BASE:1.1.1.1
	PERL_5_10_1:1.1.1.1
	CPAN:1.1.1;
locks; strict;
comment	@# @;
expand	@o@;


1.2
date	2017.02.05.00.31.54;	author afresh1;	state Exp;
branches;
next	1.1;
commitid	cxJ08BvJA9Pt2PTM;

1.1
date	2009.10.12.18.10.46;	author millert;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	2009.10.12.18.10.46;	author millert;	state Exp;
branches;
next	1.1.1.2;

1.1.1.2
date	2010.09.24.14.49.21;	author millert;	state Exp;
branches;
next	1.1.1.3;

1.1.1.3
date	2013.03.25.20.09.30;	author sthen;	state Exp;
branches;
next	1.1.1.4;

1.1.1.4
date	2014.11.17.20.53.16;	author afresh1;	state Exp;
branches;
next	1.1.1.5;
commitid	B31cAbBIXiCqnL97;

1.1.1.5
date	2017.08.14.13.46.22;	author afresh1;	state Exp;
branches;
next	;
commitid	fAzrs78vdW2Yfc6A;


desc
@@


1.2
log
@Fix merge issues, remove excess files - match perl-5.24.1 dist
@
text
@=head1 NAME

how_to_write_a_perldelta - How to write a perldelta

=head2 Description

This is intended as a guide for how to write a perldelta. There has never
been a formal specification - the working rule is "fake up a document that
looks something close to the existing perldeltas". So if it's unclear how
to do something, see if it's been done before, and if the approach works
there, steal it.

=head2 Template

Note there is a file F<Porting/perldelta_template.pod> which contains a
skeleton version of a perldelta.pod file, which should normally be copied
in at the start of a new release.

=head2 Style

Pod is more a physical markup language, rather than a logical markup language.
Despite that it has some built in conventions. B<Stick to them>:

=over 4

=item * C<FE<lt>E<gt>> is for File

=item * C<CE<lt>E<gt>> is for Code

=item * C<LE<lt>E<gt>> is for Link

=back

Whilst modules could also be links, usually in the context of the perldelta
the reference is to code C<use>ing them, rather than something within their
documentation.

Be consistent in how bugs are referenced. One style is

=over 4

=item rt.perl.org

C<perl #43010> inline, but enclose in square brackets after a sentence.
C<[perl #43010]>.  This mirrors how rt.perl.org subject lines appear.

=item rt.cpan.org

C<rt.cpan.org #43010> inline, but enclose in square brackets after a sentence.
C<[rt.cpan.org #43010]>.  This mirrors how rt.cpan.org subject lines appear.

=item ActiveState

C<http://bugs.activestate.com/show_bug.cgi?id=72443>

=item Debian

C<Debian bug #379463>

=back

=head2 Copy editing

Be consistent.

In a list, either make every item a note, or a full sentence. Either end
every item with a full stop, or ensure that no item ends with one. I<regex>
B<xor> I<regexp> - choose exactly one, and stick to it.

=head2 Sections

Historically, the perldelta has consisted of a sequence of C<=head1>
sections, usually in the same order. Un-needed sections are deleted,
and if something doesn't fit nicely into the existing sections, a new
more appropriate section is created.

=over

=item NAME

Follows this formula:

    perl5104delta - what is new for perl v5.10.4

=item DESCRIPTION

For a release on a stable branch, follows this formula:

    This document describes differences between the 5.10.3 release
    and the 5.10.4 release.

For the start of a new stable branch, follows this formula:

    This document describes differences between the 5.12.0 release
    and the 5.10.0 release.

Clearly this sets the scope of which changes are to be summarised in the rest
of the document.

=item Notice

There was a I<Notice> section in L<perl589delta>, to carry an important
notice.

=item Incompatible Changes

For a release on a stable branch, this section aspires to be

    There are no changes intentionally incompatible with 5.10.3.
    If any exist, they are bugs and reports are welcome.

=item Core Enhancements

New core language features go here. Summarise user-visible core language
enhancements. Particularly prominent performance optimisations could go
here, but most should go in the L</Performance Enhancements> section.

Feature inside modules (pure-Perl and XS) go in L</Modules and Pragmata>

=item New Platforms

List any platforms that this version of perl compiles on, that previous
versions did not. These will either be enabled by new files in the F<hints/>
directories, or new subdirectories and F<README> files at the top level of the
source tree.

=item Modules and Pragmata

All changes to installed files in F<cpan/>, F<dist/>, F<ext/> and F<lib/> go
here, in a list ordered by distribution name. Minimally it should be the
module version, but it's more useful to the end user to give a paragraph's
summary of the module's changes. In an ideal world, dual-life modules would
have a F<Changes> file that could be cribbed.

Whilst this section could be built by incrementally working through change
descriptions applying to files, this is prone to error. It's better to
collate changes by module, and then summarise all changes to a module as a
group.

If Module::CoreList has been updated, then F<Porting/corelist-perldelta.pl>
will automatically update two sections in F<perldelta>:

    * New Modules and Pragmata
    * Updated Modules and Pragmata

(Currently, it does not update the Removed Modules and Pragmata section.)

Each section will have stub entries following a template like this:

    =item C<less>

    Upgraded from version 0.01 to 0.02

It does not include modules listed in F<Porting/Maintainers.pl> under
C<_PERLLIB>, but it's a start.  Where relevant, a summary of changes can be
added by hand.

A more adventurous enhancement would be to automate grabbing
the changelogs for dual lived modules. For each of them, grab the relevant
changes files from CPAN for the old and new versions, and if the old one is
a strict subset of the new one, use the extra lines as a basis for summarising.

(And if not, experiment with using F<git> to get the relevant part of changelog
for the particular file in core.)

=item Utility Changes

Changes to installed programs such as F<perlbug> and F<xsubpp> go here. Most
of these are built within the directory F<utils>.

=item New Documentation

Changes which create B<new> files in F<pod/> go here.

B<FIXME> - this could be automated, at least as far as generating a first
draft.

=over

=item 1

Start with a clean exploded tarball of the previous release, and a clean
checkout of the branch in question

=item 2

Take the F<MANIFEST> file of each

=item 3

Search for lines matching C<m!^pod/.*\.pod!>

=item 4

Diff them

=item 5

Explode if anyone deleted documentation. [No idea what the policy on that is
yet]

=item 6

For each file only in the newer F<MANIFEST>

=over

=item 1

Use F<git> to determine its Author

=item 2

Open the pod file itself

=item 3

Grab the description section

=item 4

Write out a block of text starting roughly

    L<perlfoo>, by A. U. Thor, provides @@description

=back

=back

=item Changes to Existing Documentation

Changes which significantly change existing files in F<pod/> go here.
Any changes to F<pod/perldiag.pod> should go in
L</New or Changed Diagnostics>.

=item Performance Enhancements

Changes which enhance performance without changing behaviour go here. There
may well be none in a stable release.

=item Installation and Configuration Improvements

Changes to F<Configure>, F<installperl>, F<installman>, and analogous tools
go here.

=item Selected Bug Fixes

Important bug fixes in the core language are summarised here.
Bug fixes in files in F<ext/> and F<lib/> are best summarised in
L</Modules and Pragmata>.

=item New or Changed Diagnostics

New or changed warnings emitted by the core's C<C> code go here.

=item Changed Internals

Changes which affect the interface available to C<XS> code go here.

=item New Tests

Changes which create B<new> files in F<t/> go here. Changes to existing files
in F<t/> aren't worth summarising, although the bugs that they represent
may be.

Autogenerate this section by running something like this:

 # perl newtests-perldelta.pl v5.11.1 HEAD

=item Known Problems

Descriptions of platform agnostic bugs we know we can't fix go here. Any
tests that had to be C<TODO>ed for the release would be noted here, unless
they were specific to a particular platform (see below).

=item Deprecations

Add any new known deprecations here.

=item Platform Specific Notes

Any changes specific to a particular platform. VMS and Win32 are the usual
stars here. It's probably best to group changes under the same section layout
as the main perldelta.

=item Obituary

If any significant core contributor has died, we've added a short obituary
here.

=item Acknowledgements

Generate this with:

  perl Porting/acknowledgements.pl v5.15.0..HEAD

=item Reporting Bugs

This doesn't usually need to be changed from the previous perldelta.

=item SEE ALSO

This doesn't usually need to be changed from the previous perldelta.

=back
@


1.1
log
@Initial revision
@
text
@d1 5
a5 1
=head1 How to write a perldelta
d10 1
a10 1
do to do something, see if it's been done before, and if the approach works
d13 6
d44 7
a50 2
C<RT #43010> inline, but enclose in square brackets after a sentence.
C<[RT #43010]>
d89 2
a90 2
    This document describes differences between the 5.10.3 release and
    the 5.10.4 release.
d94 2
a95 2
    This document describes differences between the 5.12.0 release and
    the 5.10.0 release.
d109 2
a110 2
    There are no changes intentionally incompatible with 5.10.3. If any exist,
    they are bugs and reports are welcome.
d129 5
a133 5
All changes to installed files in F<ext/> and F<lib/> go here, in a list
ordered by distribution name. Minimally it should be the module version,
but it's more useful to the end user to give a paragraph's summary of the
module's changes. In an ideal world, dual-life modules would have a
F<Changes> file that could be cribbed.
d137 28
a164 3
collate changes to F<ext/> and F<lib/> by module, and then summarise all
changes to a module as a group. This can be done by partitioning directories
within F<ext/> and F<lib/> to a number of people.
d169 1
a169 1
of these are built within the directories F<utils> and F<x2p>.
d175 55
d266 4
d293 3
a295 1
The list of people to thank goes here.
@


1.1.1.1
log
@import perl 5.10.1
@
text
@@


1.1.1.2
log
@Perl 5.12.2 from CPAN
@
text
@a8 6
=head2 Template

Note there is a file F<Porting/perldelta_template> which contains a
skeleton version of a perldelta.pod file, which should normally be copied
in at the start of a new release.

a125 42
B<FIXME> - this could be automated better

If Module::CoreList has been updated, then F<Porting/corelist-perldelta.pl>
will automatically print out several sections if relevent that can be
pasted into F<perldelta>:

    * New Modules and Pragmata
    * Pragmata Changes
    * Updated Modules
    * Removed Modules and Pragmata

Each section will have stub entries following a template like this:

    =item C<less>

    Upgraded from version 0.01 to 0.02

It does not include modules listed in F<Porting/Maintainers.pl> under
C<_PERLLIB>, but it's a start.  Where relevent, a summary of changes can be
added by hand.

A more adventurous enhancement would be to automate grabbing
the changelogs for dual lived modules. For each of them, grab the relevant
changes files from CPAN for the old and new versions, and if the old one is
a strict subset of the new one, splice the extra lines right into the output,
as a basis for summarising.

(And if not, experiment with using F<git> to get the relevant part of changelog
for the particular file in core)

These could also be enhanced further by using a Pod parser module to produce
a parse tree of F<perl${whatever}delta.pod>, and splicing in the updates
correctly without throwing existing entries away.

If you think that's nuts, take a look at what F<pod/buildtoc> already does to
splice into existing Makefiles on various platforms:

http://perl5.git.perl.org/perl.git/blob/blead:/pod/buildtoc#l498

Perl is this really powerful language for text manipulation. And fun to
play with. We need to get that message out. :-)

a134 55
B<FIXME> - this could be automated, at least as far as generating a first
draft.

=over

=item 1

Start with a clean exploded tarball of the previous release, and a clean
checkout of the branch in question

=item 2

Take the F<MANIFEST> file of each

=item 3

Search for lines matching C<m!^pod/.*\.pod!>

=item 4

Diff them

=item 5

Explode if anyone deleted documentation. [No idea what the policy on that is
yet]

=item 6

For each file only in the newer F<MANIFEST>

=over

=item 1

Use F<git> to determine its Author

=item 2

Open the pod file itself

=item 3

Grab the description section

=item 4

Write out a block of text starting roughly

    L<perlfoo>, by A. U. Thor, provides @@description

=back

=back

a170 4
Autogenerate this section by running something like this:

 # perl newtests-perldelta.pl v5.11.1 HEAD

a194 8

You can find the list of committers and authors by:

  % git log --pretty='format:%an' v5.11.1..HEAD | sort | uniq

And how many files where changed by:

  % git diff --stat=200,200 v5.11.1..HEAD
@


1.1.1.3
log
@import perl 5.16.3 from CPAN - worked on by Andrew Fresh and myself
@
text
@d6 1
a6 1
to do something, see if it's been done before, and if the approach works
d11 1
a11 1
Note there is a file F<Porting/perldelta_template.pod> which contains a
d40 2
a41 7
C<perl #43010> inline, but enclose in square brackets after a sentence.
C<[perl #43010]>.  This mirrors how rt.perl.org subject lines appear.

=item rt.cpan.org

C<rt.cpan.org #43010> inline, but enclose in square brackets after a sentence.
C<[rt.cpan.org #43010]>.  This mirrors how rt.cpan.org subject lines appear.
d135 1
a135 1
will automatically print out several sections if relevant that can be
d150 1
a150 1
C<_PERLLIB>, but it's a start.  Where relevant, a summary of changes can be
d301 7
a307 1
Generate this with:
d309 1
a309 1
  perl Porting/acknowledgements.pl v5.15.0..HEAD
@


1.1.1.4
log
@Import perl-5.20.1
@
text
@d1 1
a1 5
=head1 NAME

how_to_write_a_perldelta - How to write a perldelta

=head2 Description
d85 2
a86 2
    This document describes differences between the 5.10.3 release
    and the 5.10.4 release.
d90 2
a91 2
    This document describes differences between the 5.12.0 release
    and the 5.10.0 release.
d105 2
a106 2
    There are no changes intentionally incompatible with 5.10.3.
    If any exist, they are bugs and reports are welcome.
d125 5
a129 5
All changes to installed files in F<cpan/>, F<dist/>, F<ext/> and F<lib/> go
here, in a list ordered by distribution name. Minimally it should be the
module version, but it's more useful to the end user to give a paragraph's
summary of the module's changes. In an ideal world, dual-life modules would
have a F<Changes> file that could be cribbed.
d133 5
a137 2
collate changes by module, and then summarise all changes to a module as a
group.
d140 2
a141 1
will automatically update two sections in F<perldelta>:
d144 3
a146 3
    * Updated Modules and Pragmata

(Currently, it does not update the Removed Modules and Pragmata section.)
d161 2
a162 1
a strict subset of the new one, use the extra lines as a basis for summarising.
d165 13
a177 1
for the particular file in core.)
@


1.1.1.5
log
@Import perl-5.24.2
@
text
@d169 1
a169 1
of these are built within the directory F<utils>.
@


