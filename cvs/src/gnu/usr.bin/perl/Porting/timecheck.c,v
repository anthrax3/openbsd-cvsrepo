head	1.1;
branch	1.1.1;
access;
symbols
	OPENBSD_6_2:1.1.1.1.0.34
	OPENBSD_6_2_BASE:1.1.1.1
	PERL_5_24_2:1.1.1.1
	OPENBSD_6_1:1.1.1.1.0.32
	OPENBSD_6_1_BASE:1.1.1.1
	OPENBSD_6_0:1.1.1.1.0.30
	OPENBSD_6_0_BASE:1.1.1.1
	OPENBSD_5_9:1.1.1.1.0.24
	OPENBSD_5_9_BASE:1.1.1.1
	OPENBSD_5_8:1.1.1.1.0.26
	OPENBSD_5_8_BASE:1.1.1.1
	PERL_5_20_2:1.1.1.1
	OPENBSD_5_7:1.1.1.1.0.18
	OPENBSD_5_7_BASE:1.1.1.1
	PERL_5_20_1:1.1.1.1
	OPENBSD_5_6:1.1.1.1.0.22
	OPENBSD_5_6_BASE:1.1.1.1
	PERL_5_18_2:1.1.1.1
	PERL:1.1.1
	OPENBSD_5_5:1.1.1.1.0.20
	OPENBSD_5_5_BASE:1.1.1.1
	OPENBSD_5_4:1.1.1.1.0.16
	OPENBSD_5_4_BASE:1.1.1.1
	PERL_5_16_3:1.1.1.1
	OPENBSD_5_3:1.1.1.1.0.14
	OPENBSD_5_3_BASE:1.1.1.1
	OPENBSD_5_2:1.1.1.1.0.12
	OPENBSD_5_2_BASE:1.1.1.1
	OPENBSD_5_1_BASE:1.1.1.1
	OPENBSD_5_1:1.1.1.1.0.10
	OPENBSD_5_0:1.1.1.1.0.8
	OPENBSD_5_0_BASE:1.1.1.1
	OPENBSD_4_9:1.1.1.1.0.6
	OPENBSD_4_9_BASE:1.1.1.1
	PERL_5_12_2:1.1.1.1
	OPENBSD_4_8:1.1.1.1.0.4
	OPENBSD_4_8_BASE:1.1.1.1
	OPENBSD_4_7:1.1.1.1.0.2
	OPENBSD_4_7_BASE:1.1.1.1
	PERL_5_10_1:1.1.1.1
	CPAN:1.1.1;
locks; strict;
comment	@ * @;
expand	@o@;


1.1
date	2009.10.12.18.10.45;	author millert;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	2009.10.12.18.10.45;	author millert;	state Exp;
branches;
next	;


desc
@@


1.1
log
@Initial revision
@
text
@/* A helper tool for perl's 2038 support.
 *	See Porting/README.y2038 for details
 */

#include <sys/types.h>
#include <stdio.h>
#include <time.h>
#include <errno.h>
#include <values.h>

int opt_v = 0;
int i;
struct tm *tmp;
time_t pt, pt_max, pt_min;

static char hexbuf[80];
char *hex (time_t t)
{
    if ((long long)t < 0)
	sprintf (hexbuf, " -0x%016lx", -t);
    else
	sprintf (hexbuf, "  0x%016lx",  t);
    return (hexbuf);
    } /* hex */

void gm_check (time_t t, int min_year, int max_year)
{
    tmp = gmtime (&t);
    if ( tmp == NULL ||
	/* Check tm_year overflow */
	 tmp->tm_year < min_year || tmp->tm_year > max_year) {
	if (opt_v)
	    fprintf (stderr, "gmtime (%ld) failed with errno %d\n", t, errno);
	}
    else {
	if (opt_v)
	    fprintf (stderr, "%3d:%s: %12ld-%02d-%02d %02d:%02d:%02d\n",
		i, hex (t),
		tmp->tm_year + 1900, tmp->tm_mon + 1, tmp->tm_mday,
		tmp->tm_hour, tmp->tm_min, tmp->tm_sec);
	pt = t;
	}
    } /* gm_check */

int check_gm_max ()
{
    tmp = NULL;
    pt  = 0;
    if (tmp == NULL || tmp->tm_year < 0) {
	for (i = 63; i >= 0; i--) {
	    time_t x = pt | ((time_t)1 << i);
	    if (x < 0 || x < pt) continue;
	    gm_check (x, 69, 0x7fffffff);
	    }
	}
    pt_max = pt;
    return (0);
    } /* check_gm_max */

int check_gm_min ()
{
    tmp = NULL;
    pt  = 0;
    if (tmp == NULL) {
	for (i = 36; i >= 0; i--) {
	    time_t x = pt - ((time_t)1 << i);
	    if (x > 0) continue;
	    gm_check (x, -1900, 70);
	    }
	}
    pt_min = pt;
    return (0);
    } /* check_gm_min */

void lt_check (time_t t, int min_year, int max_year)
{
    if (sizeof (time_t) > 4 && t > 0x7ffffffffffff000LL)
	tmp = NULL;
    else
	tmp = localtime (&t);
    if ( tmp == NULL ||
	/* Check tm_year overflow */
	 tmp->tm_year < min_year || tmp->tm_year > max_year) {
	if (opt_v)
	    fprintf (stderr, "localtime (%ld) failed with errno %d\n", t, errno);
	}
    else {
	if (opt_v)
	    fprintf (stderr, "%3d:%s: %12ld-%02d-%02d %02d:%02d:%02d\n",
		i, hex (t),
		tmp->tm_year + 1900, tmp->tm_mon + 1, tmp->tm_mday,
		tmp->tm_hour, tmp->tm_min, tmp->tm_sec);
	pt = t;
	}
    } /* lt_check */

int check_lt_max ()
{
    tmp = NULL;
    pt  = 0;
    if (tmp == NULL || tmp->tm_year < 0) {
	for (i = 63; i >= 0; i--) {
	    time_t x = pt | ((time_t)1 << i);
	    if (x < 0 || x < pt) continue;
	    lt_check (x, 69, 0x7fffffff);
	    }
	}
    pt_max = pt;
    return (0);
    } /* check_lt_max */

int check_lt_min ()
{
    tmp = NULL;
    pt  = 0;
    if (tmp == NULL) {
	for (i = 36; i >= 0; i--) {
	    time_t x = pt - ((time_t)1 << i);
	    if (x > 0) continue;
	    lt_check (x, -1900, 70);
	    }
	}
    pt_min = pt;
    return (0);
    } /* check_lt_min */

int main (int argc, char *argv[])
{
    time_t gm_max, gm_min, lt_max, lt_min;
    if (argc > 1 && strcmp (argv[1], "-v") == 0) opt_v++;

    check_gm_max (); gm_max = pt_max;
    check_gm_min (); gm_min = pt_min;
    check_lt_max (); lt_max = pt_max;
    check_lt_min (); lt_min = pt_min;

    opt_v++;
    printf ("======================\n");
    printf ("Sizeof time_t = %ld\n", (i = sizeof (time_t)));
    printf ("gmtime () boundaries:\n");
    gm_check (gm_max,    69, 0x7fffffff);
    gm_check (gm_min, -1900,         70);
    printf ("localtime () boundaries:\n");
    lt_check (lt_max,    69, 0x7fffffff);
    lt_check (lt_min, -1900,         70);
    printf ("Configure variables:\n");
    printf ("sGMTIME_max='%ld'\n",    gm_max);
    printf ("sGMTIME_min='%ld'\n",    gm_min);
    printf ("sLOCALTIME_max='%ld'\n", lt_max);
    printf ("sLOCALTIME_min='%ld'\n", lt_min);
    return (0);
    } /* main */
@


1.1.1.1
log
@import perl 5.10.1
@
text
@@
