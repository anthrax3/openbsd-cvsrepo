head	1.3;
access;
symbols
	OPENBSD_6_2:1.3.0.2
	OPENBSD_6_2_BASE:1.3
	PERL_5_24_2:1.1.1.8
	OPENBSD_6_1:1.3.0.4
	OPENBSD_6_1_BASE:1.3
	OPENBSD_6_0:1.2.0.4
	OPENBSD_6_0_BASE:1.2
	OPENBSD_5_9:1.1.1.7.0.2
	OPENBSD_5_9_BASE:1.1.1.7
	OPENBSD_5_8:1.1.1.7.0.4
	OPENBSD_5_8_BASE:1.1.1.7
	PERL_5_20_2:1.1.1.7
	OPENBSD_5_7:1.1.1.6.0.2
	OPENBSD_5_7_BASE:1.1.1.6
	PERL_5_20_1:1.1.1.6
	OPENBSD_5_6:1.1.1.5.0.4
	OPENBSD_5_6_BASE:1.1.1.5
	PERL_5_18_2:1.1.1.5
	PERL:1.1.1
	OPENBSD_5_5:1.1.1.4.0.6
	OPENBSD_5_5_BASE:1.1.1.4
	OPENBSD_5_4:1.1.1.4.0.2
	OPENBSD_5_4_BASE:1.1.1.4
	PERL_5_16_3:1.1.1.4
	OPENBSD_5_3:1.1.1.3.0.10
	OPENBSD_5_3_BASE:1.1.1.3
	OPENBSD_5_2:1.1.1.3.0.8
	OPENBSD_5_2_BASE:1.1.1.3
	OPENBSD_5_1_BASE:1.1.1.3
	OPENBSD_5_1:1.1.1.3.0.6
	OPENBSD_5_0:1.1.1.3.0.4
	OPENBSD_5_0_BASE:1.1.1.3
	OPENBSD_4_9:1.1.1.3.0.2
	OPENBSD_4_9_BASE:1.1.1.3
	PERL_5_12_2:1.1.1.3
	OPENBSD_4_8:1.1.1.2.0.4
	OPENBSD_4_8_BASE:1.1.1.2
	OPENBSD_4_7:1.1.1.2.0.2
	OPENBSD_4_7_BASE:1.1.1.2
	PERL_5_10_1:1.1.1.2
	OPENBSD_4_6:1.1.1.1.0.26
	OPENBSD_4_6_BASE:1.1.1.1
	OPENBSD_4_5:1.1.1.1.0.22
	OPENBSD_4_5_BASE:1.1.1.1
	PERL_5_10_0:1.1.1.1
	OPENBSD_4_4:1.1.1.1.0.20
	OPENBSD_4_4_BASE:1.1.1.1
	OPENBSD_4_3:1.1.1.1.0.18
	OPENBSD_4_3_BASE:1.1.1.1
	OPENBSD_4_2:1.1.1.1.0.16
	OPENBSD_4_2_BASE:1.1.1.1
	OPENBSD_4_1:1.1.1.1.0.14
	OPENBSD_4_1_BASE:1.1.1.1
	OPENBSD_4_0:1.1.1.1.0.12
	OPENBSD_4_0_BASE:1.1.1.1
	PERL_5_8_8:1.1.1.1
	OPENBSD_3_9:1.1.1.1.0.10
	OPENBSD_3_9_BASE:1.1.1.1
	OPENBSD_3_8:1.1.1.1.0.8
	OPENBSD_3_8_BASE:1.1.1.1
	OPENBSD_3_7:1.1.1.1.0.6
	OPENBSD_3_7_BASE:1.1.1.1
	PERL_5_8_6:1.1.1.1
	OPENBSD_3_6:1.1.1.1.0.4
	OPENBSD_3_6_BASE:1.1.1.1
	PERL_5_8_5:1.1.1.1
	PERL_5_8_3:1.1.1.1
	OPENBSD_3_5:1.1.1.1.0.2
	OPENBSD_3_5_BASE:1.1.1.1
	PERL_5_8_2:1.1.1.1
	CPAN:1.1.1;
locks; strict;
comment	@# @;
expand	@o@;


1.3
date	2017.02.05.00.31.54;	author afresh1;	state Exp;
branches;
next	1.2;
commitid	cxJ08BvJA9Pt2PTM;

1.2
date	2016.07.03.01.07.56;	author afresh1;	state Exp;
branches;
next	1.1;
commitid	GzHqjSTnBjdF7Wcw;

1.1
date	2003.12.03.02.44.28;	author millert;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	2003.12.03.02.44.28;	author millert;	state Exp;
branches;
next	1.1.1.2;

1.1.1.2
date	2009.10.12.18.10.46;	author millert;	state Exp;
branches;
next	1.1.1.3;

1.1.1.3
date	2010.09.24.14.49.21;	author millert;	state Exp;
branches;
next	1.1.1.4;

1.1.1.4
date	2013.03.25.20.09.28;	author sthen;	state Exp;
branches;
next	1.1.1.5;

1.1.1.5
date	2014.03.24.14.59.08;	author afresh1;	state Exp;
branches;
next	1.1.1.6;

1.1.1.6
date	2014.11.17.20.53.16;	author afresh1;	state Exp;
branches;
next	1.1.1.7;
commitid	B31cAbBIXiCqnL97;

1.1.1.7
date	2015.04.25.19.10.45;	author afresh1;	state Exp;
branches;
next	1.1.1.8;
commitid	Wpcs5S8qILgEZC7F;

1.1.1.8
date	2017.08.14.13.46.21;	author afresh1;	state Exp;
branches;
next	;
commitid	fAzrs78vdW2Yfc6A;


desc
@@


1.3
log
@Fix merge issues, remove excess files - match perl-5.24.1 dist
@
text
@#!/usr/bin/perl -w

#
# cmpVERSION - compare the current Perl source tree and a given tag
# for modules that have identical version numbers but different contents.
#
# with -d option, output the diffs too
# with -x option, exclude files from modules where blead is not upstream
#
# (after all, there are tools like core-cpan-diff that can already deal with
# them)
#
# Original by slaven@@rezic.de, modified by jhi and matt.w.johnson@@gmail.com.
# Adaptation to produce TAP by Abigail, folded back into this file by Nicholas

use strict;
use 5.006;

use ExtUtils::MakeMaker;
use File::Spec::Functions qw(devnull);
use Getopt::Long;

my ($diffs, $exclude_upstream, $tag_to_compare, $tap);
unless (GetOptions('diffs' => \$diffs,
		   'exclude|x' => \$exclude_upstream,
		   'tag=s' => \$tag_to_compare,
		   'tap' => \$tap,
		   ) && @@ARGV == 0) {
    die "usage: $0 [ -d -x --tag TAG --tap]";
}

die "$0: This does not look like a Perl directory\n"
    unless -f "perl.h" && -d "Porting";
die "$0: 'This is a Perl directory but does not look like Git working directory\n"
    unless (-d ".git" || (exists $ENV{GIT_DIR} && -d $ENV{GIT_DIR}));

my $null = devnull();

unless (defined $tag_to_compare) {
    my $check = 'HEAD';
    while(1) {
        $check = `git describe --abbrev=0 $check 2>$null`;
        chomp $check;
        last unless $check =~ /-RC/;
        $check .= '~1';
    }
    $tag_to_compare = $check;
    # Thanks to David Golden for this suggestion.

}

unless (length $tag_to_compare) {
    die "$0: Git found, but no Git tags found\n"
	unless $tap;
    print "1..0 # SKIP: Git found, but no Git tags found\n";
    exit 0;
}

my $tag_exists = `git --no-pager tag -l $tag_to_compare 2>$null`;
chomp $tag_exists;

unless ($tag_exists eq $tag_to_compare) {
    die "$0: '$tag_to_compare' is not a known Git tag\n" unless $tap;
    print "1..0 # SKIP: '$tag_to_compare' is not a known Git tag\n";
    exit 0;
}

my %upstream_files;
if ($exclude_upstream) {
    unshift @@INC, 'Porting';
    require Maintainers;

    for my $m (grep {!defined $Maintainers::Modules{$_}{UPSTREAM}
			 or $Maintainers::Modules{$_}{UPSTREAM} ne 'blead'}
	       keys %Maintainers::Modules) {
	$upstream_files{$_} = 1 for Maintainers::get_module_files($m);
    }
}

# Files to skip from the check for one reason or another,
# usually because they pull in their version from some other file.
my %skip;
@@skip{
    'cpan/ExtUtils-MakeMaker/t/lib/MakeMaker/Test/Setup/BFD.pm', # just a test module
    'cpan/ExtUtils-MakeMaker/t/lib/MakeMaker/Test/Setup/XS.pm',  # just a test module
    'cpan/Math-BigInt/t/Math/BigFloat/Subclass.pm', # just a test module
    'cpan/Math-BigInt/t/Math/BigInt/BareCalc.pm',   # just a test module
    'cpan/Math-BigInt/t/Math/BigInt/Scalar.pm',     # just a test module
    'cpan/Math-BigInt/t/Math/BigInt/Subclass.pm',   # just a test module
    'cpan/Math-BigRat/t/Math/BigRat/Test.pm',       # just a test module
    'cpan/podlators/t/lib/Test/Podlators.pm',       # just a test module
    'cpan/podlators/t/lib/Test/RRA.pm',             # just a test module
    'cpan/podlators/t/lib/Test/RRA/Config.pm',      # just a test module
    'cpan/version/t/coretests.pm', # just a test module
    'dist/Attribute-Handlers/demo/MyClass.pm', # it's just demonstration code
    'dist/Exporter/lib/Exporter/Heavy.pm',
    'lib/Carp/Heavy.pm',
    'lib/Config.pm',		# no version number but contents will vary
    'win32/FindExt.pm',
} = ();

# Files to skip just for particular version(s),
# usually due to some # mix-up

my %skip_versions = (
	   # 'some/sample/file.pm' => [ '1.23', '1.24' ],
	  );

my $skip_dirs = qr|^t/lib|;

sub pm_file_from_xs {
    my $xs = shift;

    foreach my $try (sub {
			 # First try a .pm at the same level as the .xs file
			 # with the same basename
			 return shift =~ s/\.xs\z//r;
		     },
		     sub {
			 # Try for a (different) .pm at the same level, based
			 # on the directory name:
			 my ($path) = shift =~ m!^(.*)/!;
			 my ($last) = $path =~ m!([^-/]+)\z!;
			 return "$path/$last";
		     },
		     sub {
			 # Try to work out the extension's full package, and
			 # look for a .pm in lib/ based on that:
			 my ($path) = shift =~ m!^(.*)/!;
			 my ($last) = $path =~ m!([^/]+)\z!;
			 $last = 'List-Util' if $last eq 'Scalar-List-Utils';
			 $last =~ tr !-!/!;
			 return "$path/lib/$last";
		     }) {
	# For all cases, first look to see if the .pm file is generated.
	my $base = $try->($xs);
	return "${base}_pm.PL" if -f "${base}_pm.PL";
	return "${base}.pm" if -f "${base}.pm";
    }

    die "No idea which .pm file corresponds to '$xs', so aborting";
}

# Key is the .pm file from which we check the version.
# Value is a reference to an array of files to check for differences
# The trivial case is a pure perl module, where the array holds one element,
# the perl module's file. The "fun" comes with XS modules, and the real fun
# with XS modules with more than one XS file, and "interesting" layouts.

my %module_diffs;

foreach (`git --no-pager diff --name-only $tag_to_compare --diff-filter=ACMRTUXB`) {
    chomp;
    next unless m/^(.*)\//;
    my $this_dir = $1;
    next if $this_dir =~ $skip_dirs || exists $skip{$_};
    next if exists $upstream_files{$_};
    if (/\.pm\z/ || m|^lib/.*\.pl\z| || /_pm\.PL\z/) {
	push @@{$module_diffs{$_}}, $_;
    } elsif (/\.xs\z/ && !/\bt\b/) {
	push @@{$module_diffs{pm_file_from_xs($_)}}, $_;
    }
}

unless (%module_diffs) {
    print "1..1\nok 1 - No difference found\n" if $tap;
    exit;
}

printf "1..%d\n" => scalar keys %module_diffs if $tap;

my $count;
my $diff_cmd = "git --no-pager diff $tag_to_compare ";
my $q = ($^O eq 'MSWin32' || $^O eq 'NetWare' || $^O eq 'VMS') ? '"' : "'";
my (@@diff);

foreach my $pm_file (sort keys %module_diffs) {
    # git has already told us that the files differ, so no need to grab each as
    # a blob from git, and do the comparison ourselves.
    my $pm_version = eval {MM->parse_version($pm_file)};
    my $orig_pm_content = get_file_from_git($pm_file, $tag_to_compare);
    my $orig_pm_version = eval {MM->parse_version(\$orig_pm_content)};
    ++$count;

    if (!defined $orig_pm_version || $orig_pm_version eq 'undef') { # sigh
        print "ok $count - SKIP Can't parse \$VERSION in $pm_file\n"
          if $tap;
    } elsif (!defined $pm_version || $pm_version eq 'undef') {
        my $nok = "not ok $count - in $pm_file version was $orig_pm_version, now unparsable\n";
        print $nok if $tap;
        print STDERR "# $nok\n";
    } elsif ($pm_version ne $orig_pm_version) { # good
        print "ok $count - $pm_file\n" if $tap;
    } else {
	if ($tap) {
	    foreach (sort @@{$module_diffs{$pm_file}}) {
		print "# $_" for `$diff_cmd $q$_$q`;
	    }
	    if (exists $skip_versions{$pm_file}
		and grep $pm_version eq $_, @@{$skip_versions{$pm_file}}) {
		print "ok $count - SKIP $pm_file version $pm_version\n";
	    } else {
		my $nok = "not ok $count - $pm_file version $pm_version\n";
		print $nok;
		print STDERR "# $nok";
	    }
	} else {
	    push @@diff, @@{$module_diffs{$pm_file}};
	    print "$pm_file version $pm_version\n";
	}
    }
}

sub get_file_from_git {
    my ($file, $tag) = @@_;
    local $/;

    use open IN => ':raw';
    return scalar `git --no-pager show $tag:$file 2>$null`;
}

if ($diffs) {
    for (sort @@diff) {
	print "\n";
	system "$diff_cmd $q$_$q";
    }
}
@


1.2
log
@Update to perl 5.20.3

OK bluhm@@
@
text
@d86 9
a94 5
    'cpan/Module-Build/t/lib/DistGen.pm', # just a test module
    'cpan/Module-Build/t/lib/MBTest.pm',  # just a test module
    'cpan/Module-Metadata/t/lib/DistGen.pm',    # just a test module
    'cpan/Module-Metadata/t/lib/MBTest.pm',     # just a test module
    'cpan/Module-Metadata/t/lib/Tie/CPHash.pm', # just a test module
a106 1
	   'dist/threads/lib/threads.pm' => [ '1.83' ],
d189 3
a191 1
        print "not ok $count - in $pm_file version was $orig_pm_version, now unparsable\n" if $tap;
d203 3
a205 1
		print "not ok $count - $pm_file version $pm_version\n";
@


1.1
log
@Initial revision
@
text
@d4 2
a5 2
# cmpVERSION - compare two Perl source trees for modules
# that have identical version numbers but different contents.
d7 2
a8 1
# Original by slaven@@rezic.de, modified by jhi.
d10 5
d17 1
d20 31
a50 3
use File::Compare;
use File::Find;
use File::Spec::Functions qw(rel2abs abs2rel catfile catdir curdir);
d52 5
a56 3
for (@@ARGV[0, 1]) {
    die "$0: '$_' does not look like Perl directory\n"
	unless -f catfile($_, "perl.h") && -d catdir($_, "Porting");
d59 20
a78 2
my $dir2 = rel2abs($ARGV[1]);
chdir $ARGV[0] or die "$0: chdir '$ARGV[0]' failed: $!\n";
d83 78
a160 1
@@skip{'./lib/Exporter/Heavy.pm'} = ();
d162 6
a167 23
my @@wanted;
find(
     sub { /\.pm$/ &&
	       ! exists $skip{$File::Find::name}
	       &&
	       do { my $file2 =
			catfile(catdir($dir2, $File::Find::dir), $_);
		    (my $xs_file1 = $_)     =~ s/\.pm$/.xs/;
		    (my $xs_file2 = $file2) =~ s/\.pm$/.xs/;
		    if (-e $xs_file1 && -e $xs_file2) {
			return if compare($_, $file2) == 0 &&
			          compare($xs_file1, $xs_file2) == 0;
		    } else {
			return if compare($_, $file2) == 0;
		    }
		    my $version1 = eval {MM->parse_version($_)};
		    my $version2 = eval {MM->parse_version($file2)};
		    push @@wanted, $File::Find::name
			if defined $version1 &&
			   defined $version2 &&
                           $version1 eq $version2
		} }, curdir);
print map { $_, "\n" } sort @@wanted;
d169 52
@


1.1.1.1
log
@perl 5.8.2 from CPAN
@
text
@@


1.1.1.2
log
@import perl 5.10.1
@
text
@a6 5
# with -d option, output the diffs too
# with -x option, exclude dual-life modules (after all, there are tools
#                 like core-cpan-diff that can already deal with them)
#                 With this option, one od the directories must be '.'.
#
a15 14
use Getopt::Std;

use lib 'Porting';
use Maintainers;

sub usage {
die <<'EOF';
usage: $0 [ -d -x ] source_dir1 source_dir2
EOF
}

my %opts;
getopts('dx', \%opts) or usage;
@@ARGV == 2 or usage;
a21 12
my %dual_files;
if ($opts{x}) {
    die "With -x, one of the directories must be '.'\n"
	unless $ARGV[0] eq '.' or  $ARGV[1] eq '.';
    for my $m (grep $Maintainers::Modules{$_}{CPAN},
				keys %Maintainers::Modules)
    {

	$dual_files{"./$_"} = 1 for Maintainers::get_module_files($m);
    }
}

d28 1
a28 7
@@skip{
    './lib/Carp/Heavy.pm',
    './lib/Config.pm',		# no version number but contents will vary
    './lib/Exporter/Heavy.pm',
    './win32/FindExt.pm',
} = ();
my $skip_dirs = qr|^\./t/lib|;
a30 1
my @@diffs;
d33 1
a33 3
	       $File::Find::dir !~ $skip_dirs &&
	       ! exists $skip{$File::Find::name} &&
	       ! exists $dual_files{$File::Find::name}
a38 2
		    my $eq1 = compare($_, $file2) == 0;
		    my $eq2 = 1;
d40 4
a43 1
		        $eq2 = compare($xs_file1, $xs_file2) == 0;
a44 1
		    return if $eq1 && $eq2;
d47 4
a50 8
		    return unless
			defined $version1 &&
			defined $version2 &&
                        $version1 eq $version2;
		    push @@wanted, $File::Find::name;
		    push @@diffs, [ "$File::Find::dir/$_", $file2 ] unless $eq1;
		    push @@diffs, [ "$File::Find::dir/$xs_file1", $xs_file2 ]
								   unless $eq2;
d52 1
a52 8
for (sort @@wanted) {
    print "$_\n";
}
exit unless $opts{d};
for (sort { $a->[0] cmp $b->[0] } @@diffs) {
    print "\n";
    system "diff -du '$_->[0]' '$_->[1]'";
}
@


1.1.1.3
log
@Perl 5.12.2 from CPAN
@
text
@d10 1
a10 1
#                 With this option, one of the directories must be '.'.
@


1.1.1.4
log
@import perl 5.16.3 from CPAN - worked on by Andrew Fresh and myself
@
text
@d4 2
a5 2
# cmpVERSION - compare the current Perl source tree and a given tag
# for modules that have identical version numbers but different contents.
d8 3
a10 1
# with -x option, exclude files from modules where blead is not upstream
d12 1
a12 2
# (after all, there are tools like core-cpan-diff that can already deal with
# them)
a13 2
# Original by slaven@@rezic.de, modified by jhi and matt.w.johnson@@gmail.com.
# Adaptation to produce TAP by Abigail, folded back into this file by Nicholas
a15 1
use 5.006;
d18 30
a47 2
use File::Spec::Functions qw(devnull);
use Getopt::Long;
d49 2
a50 7
my ($diffs, $exclude_upstream, $tag_to_compare, $tap);
unless (GetOptions('diffs' => \$diffs,
		   'exclude|x' => \$exclude_upstream,
		   'tag=s' => \$tag_to_compare,
		   'tap' => \$tap,
		   ) && @@ARGV == 0) {
    die "usage: $0 [ -d -x --tag TAG --tap]";
d53 2
a54 34
die "$0: This does not look like a Perl directory\n"
    unless -f "perl.h" && -d "Porting";
die "$0: 'This is a Perl directory but does not look like Git working directory\n"
    unless -d ".git";

my $null = devnull();

unless (defined $tag_to_compare) {
    # Thanks to David Golden for this suggestion.

    $tag_to_compare = `git describe --abbrev=0`;
    chomp $tag_to_compare;
}

my $tag_exists = `git --no-pager tag -l $tag_to_compare 2>$null`;
chomp $tag_exists;

unless ($tag_exists eq $tag_to_compare) {
    die "$0: '$tag_to_compare' is not a known Git tag\n" unless $tap;
    print "1..0 # SKIP: '$tag_to_compare' is not a known Git tag\n";
    exit 0;
}

my %upstream_files;
if ($exclude_upstream) {
    unshift @@INC, 'Porting';
    require Maintainers;

    for my $m (grep {!defined $Maintainers::Modules{$_}{UPSTREAM}
			 or $Maintainers::Modules{$_}{UPSTREAM} ne 'blead'}
	       keys %Maintainers::Modules) {
	$upstream_files{$_} = 1 for Maintainers::get_module_files($m);
    }
}
d60 4
a63 4
    'lib/Carp/Heavy.pm',
    'lib/Config.pm',		# no version number but contents will vary
    'lib/Exporter/Heavy.pm',
    'win32/FindExt.pm',
d65 1
d67 36
a102 32
# Files to skip just for particular version(s),
# usually due to some # mix-up

my %skip_versions = (
	   # 'some/sample/file.pm' => [ '1.23', '1.24' ],
	   'dist/threads/lib/threads.pm' => [ '1.83' ],
	  );

my $skip_dirs = qr|^t/lib|;

sub pm_file_from_xs {
    my $xs = shift;

    # First try a .pm at the same level as the .xs file, with the same basename
    my $pm = $xs;
    $pm =~ s/xs\z/pm/;
    return $pm if -f $pm;

    # Try for a (different) .pm at the same level, based on the directory name:
    my ($path) = $xs =~ m!^(.*)/!;
    my ($last) = $path =~ m!([^-/]+)\z!;
    $pm = "$path/$last.pm";
    return $pm if -f $pm;

    # Try to work out the extension's full package, and look for a .pm in lib/
    # based on that:
    ($last) = $path =~ m!([^/]+)\z!;
    $last =~ tr !-!/!;
    $pm = "$path/lib/$last.pm";
    return $pm if -f $pm;

    die "No idea which .pm file corresponds to '$xs', so aborting";
a104 74
# Key is the .pm file from which we check the version.
# Value is a reference to an array of files to check for differences
# The trivial case is a pure perl module, where the array holds one element,
# the perl module's file. The "fun" comes with XS modules, and the real fun
# with XS modules with more than one XS file, and "interesting" layouts.

my %module_diffs;

foreach (`git --no-pager diff --name-only $tag_to_compare --diff-filter=ACMRTUXB`) {
    chomp;
    next unless m/^(.*)\//;
    my $this_dir = $1;
    next if $this_dir =~ $skip_dirs || exists $skip{$_};
    next if exists $upstream_files{$_};
    if (/\.pm\z/ || m|^lib/.*\.pl\z|) {
	push @@{$module_diffs{$_}}, $_;
    } elsif (/\.xs\z/ && !/\bt\b/) {
	push @@{$module_diffs{pm_file_from_xs($_)}}, $_;
    }
}

unless (%module_diffs) {
    print "1..1\nok 1 - No difference found\n" if $tap;
    exit;
}

printf "1..%d\n" => scalar keys %module_diffs if $tap;

my $count;
my $diff_cmd = "git --no-pager diff $tag_to_compare ";
my (@@diff);

foreach my $pm_file (sort keys %module_diffs) {
    # git has already told us that the files differ, so no need to grab each as
    # a blob from git, and do the comparison ourselves.
    my $pm_version = eval {MM->parse_version($pm_file)};
    my $orig_pm_content = get_file_from_git($pm_file, $tag_to_compare);
    my $orig_pm_version = eval {MM->parse_version(\$orig_pm_content)};
    
    if ((!defined $pm_version || !defined $orig_pm_version)
	|| ($pm_version eq 'undef' || $orig_pm_version eq 'undef') # sigh
	|| ($pm_version ne $orig_pm_version) # good
       ) {
        printf "ok %d - %s\n", ++$count, $pm_file if $tap;
    } else {
	if ($tap) {
	    foreach (sort @@{$module_diffs{$pm_file}}) {
		print "# $_" for `$diff_cmd '$_'`;
	    }
	    if (exists $skip_versions{$pm_file}
		and grep $pm_version eq $_, @@{$skip_versions{$pm_file}}) {
		printf "ok %d - SKIP $pm_file version $pm_version\n", ++$count;
	    } else {
		printf "not ok %d - %s\n", ++$count, $pm_file;
	    }
	} else {
	    push @@diff, @@{$module_diffs{$pm_file}};
	    print "$pm_file\n";
	}
    }
}

sub get_file_from_git {
    my ($file, $tag) = @@_;
    local $/;
    return scalar `git --no-pager show $tag:$file 2>$null`;
}

if ($diffs) {
    for (sort @@diff) {
	print "\n";
	system "$diff_cmd '$_'";
    }
}
@


1.1.1.5
log
@Import perl-5.18.2

OK espie@@ sthen@@ deraadt@@
@
text
@a39 8
    my $check = 'HEAD';
    while(1) {
        $check = `git describe --abbrev=0 $check 2>$null`;
        chomp $check;
        last unless $check =~ /-RC/;
        $check .= '^';
    }
    $tag_to_compare = $check;
d42 2
a43 7
}

unless (length $tag_to_compare) {
    die "$0: Git found, but no Git tags found\n"
	unless $tap;
    print "1..0 # SKIP: Git found, but no Git tags found\n";
    exit 0;
d90 17
a106 25
    foreach my $try (sub {
			 # First try a .pm at the same level as the .xs file
			 # with the same basename
			 return shift =~ s/\.xs\z//r;
		     },
		     sub {
			 # Try for a (different) .pm at the same level, based
			 # on the directory name:
			 my ($path) = shift =~ m!^(.*)/!;
			 my ($last) = $path =~ m!([^-/]+)\z!;
			 return "$path/$last";
		     },
		     sub {
			 # Try to work out the extension's full package, and
			 # look for a .pm in lib/ based on that:
			 my ($path) = shift =~ m!^(.*)/!;
			 my ($last) = $path =~ m!([^/]+)\z!;
			 $last =~ tr !-!/!;
			 return "$path/lib/$last";
		     }) {
	# For all cases, first look to see if the .pm file is generated.
	my $base = $try->($xs);
	return "${base}_pm.PL" if -f "${base}_pm.PL";
	return "${base}.pm" if -f "${base}.pm";
    }
d125 1
a125 1
    if (/\.pm\z/ || m|^lib/.*\.pl\z| || /_pm\.PL\z/) {
a140 1
my $q = ($^O eq 'MSWin32' || $^O eq 'NetWare' || $^O eq 'VMS') ? '"' : "'";
d149 6
a154 9
    ++$count;

    if (!defined $orig_pm_version || $orig_pm_version eq 'undef') { # sigh
        print "ok $count - SKIP Can't parse \$VERSION in $pm_file\n"
          if $tap;
    } elsif (!defined $pm_version || $pm_version eq 'undef') {
        print "not ok $count - in $pm_file version was $orig_pm_version, now unparsable\n" if $tap;
    } elsif ($pm_version ne $orig_pm_version) { # good
        print "ok $count - $pm_file\n" if $tap;
d158 1
a158 1
		print "# $_" for `$diff_cmd $q$_$q`;
d162 1
a162 1
		print "ok $count - SKIP $pm_file version $pm_version\n";
d164 1
a164 1
		print "not ok $count - $pm_file\n";
d182 1
a182 1
	system "$diff_cmd $q$_$q";
@


1.1.1.6
log
@Import perl-5.20.1
@
text
@d35 1
a35 1
    unless (-d ".git" || (exists $ENV{GIT_DIR} && -d $ENV{GIT_DIR}));
a83 4
    'cpan/ExtUtils-MakeMaker/t/lib/MakeMaker/Test/Setup/BFD.pm', # just a test module
    'cpan/ExtUtils-MakeMaker/t/lib/MakeMaker/Test/Setup/XS.pm',  # just a test module
    'dist/Attribute-Handlers/demo/MyClass.pm', # it's just demonstration code
    'dist/Exporter/lib/Exporter/Heavy.pm',
d86 1
a200 2

    use open IN => ':raw';
@


1.1.1.7
log
@Import perl-5.20.2
@
text
@a85 5
    'cpan/Module-Build/t/lib/DistGen.pm', # just a test module
    'cpan/Module-Build/t/lib/MBTest.pm',  # just a test module
    'cpan/Module-Metadata/t/lib/DistGen.pm',    # just a test module
    'cpan/Module-Metadata/t/lib/MBTest.pm',     # just a test module
    'cpan/Module-Metadata/t/lib/Tie/CPHash.pm', # just a test module
a122 1
			 $last = 'List-Util' if $last eq 'Scalar-List-Utils';
d192 1
a192 1
		print "not ok $count - $pm_file version $pm_version\n";
d196 1
a196 1
	    print "$pm_file version $pm_version\n";
@


1.1.1.8
log
@Import perl-5.24.2
@
text
@d45 1
a45 1
        $check .= '~1';
d86 5
a90 9
    'cpan/Math-BigInt/t/Math/BigFloat/Subclass.pm', # just a test module
    'cpan/Math-BigInt/t/Math/BigInt/BareCalc.pm',   # just a test module
    'cpan/Math-BigInt/t/Math/BigInt/Scalar.pm',     # just a test module
    'cpan/Math-BigInt/t/Math/BigInt/Subclass.pm',   # just a test module
    'cpan/Math-BigRat/t/Math/BigRat/Test.pm',       # just a test module
    'cpan/podlators/t/lib/Test/Podlators.pm',       # just a test module
    'cpan/podlators/t/lib/Test/RRA.pm',             # just a test module
    'cpan/podlators/t/lib/Test/RRA/Config.pm',      # just a test module
    'cpan/version/t/coretests.pm', # just a test module
d103 1
d186 1
a186 3
        my $nok = "not ok $count - in $pm_file version was $orig_pm_version, now unparsable\n";
        print $nok if $tap;
        print STDERR "# $nok\n";
d198 1
a198 3
		my $nok = "not ok $count - $pm_file version $pm_version\n";
		print $nok;
		print STDERR "# $nok";
@


