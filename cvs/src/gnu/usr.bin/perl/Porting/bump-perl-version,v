head	1.2;
access;
symbols
	OPENBSD_6_0:1.1.1.5.0.10
	OPENBSD_6_0_BASE:1.1.1.5
	OPENBSD_5_9:1.1.1.5.0.4
	OPENBSD_5_9_BASE:1.1.1.5
	OPENBSD_5_8:1.1.1.5.0.6
	OPENBSD_5_8_BASE:1.1.1.5
	PERL_5_20_2:1.1.1.5
	OPENBSD_5_7:1.1.1.5.0.2
	OPENBSD_5_7_BASE:1.1.1.5
	PERL_5_20_1:1.1.1.5
	OPENBSD_5_6:1.1.1.4.0.4
	OPENBSD_5_6_BASE:1.1.1.4
	PERL_5_18_2:1.1.1.4
	PERL:1.1.1
	OPENBSD_5_5:1.1.1.3.0.6
	OPENBSD_5_5_BASE:1.1.1.3
	OPENBSD_5_4:1.1.1.3.0.2
	OPENBSD_5_4_BASE:1.1.1.3
	PERL_5_16_3:1.1.1.3
	OPENBSD_5_3:1.1.1.2.0.10
	OPENBSD_5_3_BASE:1.1.1.2
	OPENBSD_5_2:1.1.1.2.0.8
	OPENBSD_5_2_BASE:1.1.1.2
	OPENBSD_5_1_BASE:1.1.1.2
	OPENBSD_5_1:1.1.1.2.0.6
	OPENBSD_5_0:1.1.1.2.0.4
	OPENBSD_5_0_BASE:1.1.1.2
	OPENBSD_4_9:1.1.1.2.0.2
	OPENBSD_4_9_BASE:1.1.1.2
	PERL_5_12_2:1.1.1.2
	OPENBSD_4_8:1.1.1.1.0.4
	OPENBSD_4_8_BASE:1.1.1.1
	OPENBSD_4_7:1.1.1.1.0.2
	OPENBSD_4_7_BASE:1.1.1.1
	PERL_5_10_1:1.1.1.1
	CPAN:1.1.1;
locks; strict;
comment	@# @;
expand	@o@;


1.2
date	2017.02.05.00.31.54;	author afresh1;	state Exp;
branches;
next	1.1;
commitid	cxJ08BvJA9Pt2PTM;

1.1
date	2009.10.12.18.10.46;	author millert;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	2009.10.12.18.10.46;	author millert;	state Exp;
branches;
next	1.1.1.2;

1.1.1.2
date	2010.09.24.14.49.20;	author millert;	state Exp;
branches;
next	1.1.1.3;

1.1.1.3
date	2013.03.25.20.09.28;	author sthen;	state Exp;
branches;
next	1.1.1.4;

1.1.1.4
date	2014.03.24.14.59.08;	author afresh1;	state Exp;
branches;
next	1.1.1.5;

1.1.1.5
date	2014.11.17.20.53.15;	author afresh1;	state Exp;
branches;
next	;
commitid	B31cAbBIXiCqnL97;


desc
@@


1.2
log
@Fix merge issues, remove excess files - match perl-5.24.1 dist
@
text
@#!/usr/bin/perl
#
# bump-perl-version, DAPM 14 Jul 2009
#
# A utility to find, and optionally bump, references to the perl version
# number in various files within the perl source
#
# It's designed to work in two phases. First, when run with -s (scan),
# it searches all the files in MANIFEST looking for strings that appear to
# match the current perl version (or which it knows are *supposed* to
# contain the current version), and produces a list of them to stdout,
# along with a suggested edit. For example:
#
#     $ Porting/bump-perl-version -s 5.10.0 5.10.1 > /tmp/scan
#     $ cat /tmp/scan
#     Porting/config.sh
#     
#     52: -archlib='/opt/perl/lib/5.10.0/i686-linux-64int'
#         +archlib='/opt/perl/lib/5.10.1/i686-linux-64int'
#     ....
#
# At this point there will be false positives. Edit the file to remove
# those changes you don't want made. Then in the second phase, feed that
# list in, and it will change those lines in the files:
#
#     $ Porting/bump-perl-version -u < /tmp/scan
#
# (so line 52 of Porting/config.sh is now updated)
#
# The -i option can be used to combine these two steps (if you prefer to make
# all of the changes at once and then edit the results via git).

# This utility 'knows' about certain files and formats, and so can spot
# 'hidden' version numbers, like PERL_SUBVERSION=9.
#
# A third variant makes use of this knowledge to check that all the things
# it knows about are at the current version:
#
#    $ Porting/bump-perl-version -c 5.10.0
#
# XXX this script hasn't been tested against a major version bump yet,
# eg 5.11.0 to 5.12.0; there may be things it missed - DAPM 14 Jul 09
#
# Note there are various files and directories that it skips; these are
# ones that are unlikely to contain anything needing bumping, but which
# will generate lots of false positives (eg pod/*). These are listed on
# STDERR as they are skipped.

use strict;
use warnings;
use autodie;
use Getopt::Std;
use ExtUtils::Manifest;


sub usage { die <<EOF }

@@_

usage: $0 -c <C.C.C>
          -s <C.C.C> <N.N.N>
	  -u
	  -i <C.C.C> <N.N.N>

    -c check files and warn if any known string values (eg
	PERL_SUBVERSION) don't match the specified version

    -s scan files and produce list of possible change lines to stdout

    -u read in the scan file from stdin, and change all the lines specified

    -i scan files and make changes inplace

    C.C.C the current perl version, eg 5.10.0
    N.N.N the new     perl version, eg 5.10.1
EOF

my %opts;
getopts('csui', \%opts) or usage;
if ($opts{u}) {
    @@ARGV == 0 or usage('no version version numbers should be specified');
    # fake to stop warnings when calculating $oldx etc
    @@ARGV = qw(99.99.99 99.99.99);
}
elsif ($opts{c}) {
    @@ARGV == 1 or usage('required one version number');
    push @@ARGV, $ARGV[0];
}
else {
    @@ARGV == 2 or usage('require two version numbers');
}
usage('only one of -c, -s, -u and -i') if keys %opts > 1;

my ($oldx, $oldy, $oldz) = $ARGV[0] =~ /^(\d+)\.(\d+)\.(\d+)$/
	or usage("bad version: $ARGV[0]");
my ($newx, $newy, $newz) = $ARGV[1] =~ /^(\d+)\.(\d+)\.(\d+)$/
	or usage("bad version: $ARGV[1]");

my $old_decimal = sprintf "%d.%03d%03d", $oldx, $oldy, $oldz; # 5.011001

# each entry is
#   0 a regexp that matches strings that might contain versions;
#   1 a sub that returns two strings based on $1 etc values:
#     * string containing captured values (for -c)
#     * a string containing the replacement value
#   2 what we expect the sub to return as its first arg; undef implies
#     don't match
#   3 a regex restricting which files this applies to (undef is all files)
#
# Note that @@maps entries are checks in order, and only the first to match
# is used.

my @@maps =  (
    [
	qr{^((?:api_)?version(?:=|\s+)'?) (\d+) ('?) (?!\.)}x,
	sub { $2, "$1$newy$3" },
	$oldy,
	qr/config/,
    ],
    [
	qr{^(subversion(?:=|\s+)'?) (\d+) ('?)  (?!\.)}x,
	sub { $2, "$1$newz$3" },
	$oldz,
	qr/config/,
    ],
    [
	qr{^(api_subversion(?:=|\s+)'?) (\d+) ('?)  (?!\.)}x,
	sub { $2, ($newy % 2) ? "$1$newz$3" : "${1}0$3" },
	($oldy % 2) ? $oldz : 0,
	qr/config/,
    ],
    [
	qr{^(api_versionstring(?:=|\s+)'?) ([\d\.]+) ('?) (?!\.)}x,
	sub { $2, ($newy % 2) ? "$1$newx.$newy.$newz$3": "$1$newx.$newy.0$3" },
	($oldy % 2) ? "$oldx.$oldy.$oldz" : "$oldx.$oldy.0",
	qr/config/,
    ],
    [
	qr{(version\s+'?) (\d+) ('?\s+subversion\s+'?) (\d+) ('?)  (?!\.)}x,
	sub { "$2-$4", "$1$newy$3$newz$5" },
	"$oldy-$oldz",
	qr/config/,
    ],
    [
	qr{\b (PERL_(?:API_)?VERSION(?:=|\s+)'?) (\d+) ('?)  (?!\.)}x,
	sub { $2, "$1$newy$3"},
	$oldy,
    ],
    [
	qr{\b (PERL_SUBVERSION(?:=|\s+)'?) (\d+) ('?)  (?!\.)}x,
	sub { $2, "$1$newz$3"},
	($oldy % 2) ? $oldz : 0,
    ],
    [
	qr{\b (PERL_API_SUBVERSION(?:=|\s+)'?) (\d+) ('?)  (?!\.)}x,
	sub { $2, ($newy % 2) ? "$1$newz$3" : "${1}0$3" },
	$oldz,
    ],
    # these two formats are in README.vms
    [
	qr{\b perl-(\d+\^\.\d+\^\.\d+) \b}x,
	sub { $1, "perl-$newx^.$newy^.$newz"},
	undef,
    ],
    [
	qr{\b ($oldx _ $oldy _$oldz) \b}x,
	sub { $1, ($newx . '_' . $newy . '_' . $newz)},
	undef,
    ],
    # 5.8.9
    [
	qr{ $oldx\.$oldy\.$oldz \b}x,
	sub {"", "$newx.$newy.$newz"},
	undef,
    ],

    # 5.008009
    [
	qr{ $old_decimal \b}x,
	sub {"", sprintf "%d.%03d%03d", $newx, $newy, $newz },
	undef,
    ],

    # perl511, perl511.dll, perl511.lib, perl511s.lib, libperl511.a
    [
	qr{\b ((?:lib)?) perl (\d\d\d) (s?) \b }x,
	sub {$2, "$1perl$newx$newy$3" },
	"$oldx$oldy",
	qr/win32|hints/,      # README.win32, win32/*, hints/*
    ],

    # microperl locations should be bumped for major versions
    [
        qr{(/)(\d\.\d{2})(["'/])},
        sub { $2, "$1$newx.$newy$3" },
        "$oldx.$oldy",
        qr/uconfig/,
    ],

    # win32/Makefile.ce
    [
        qr/(PV\s*=\s*)(\d\d{2})\b$/,
        sub { $2, "$1$newx$newy" },
        "$oldx$oldy",
        qr/Makefile\.ce/,
    ],
);


# files and dirs that we likely don't want to change version numbers on.

my %SKIP_FILES = map { ($_ => 1) } qw(
    Changes
    intrpvar.h
    MANIFEST
    Porting/Maintainers.pl
    Porting/acknowledgements.pl
    Porting/corelist-perldelta.pl
    Porting/epigraphs.pod
    Porting/how_to_write_a_perldelta.pod
    Porting/release_managers_guide.pod
    Porting/release_schedule.pod
    Porting/bump-perl-version
    pp_ctl.c
);
my @@SKIP_DIRS = qw(
    dist
    ext
    lib
    pod
    cpan
    t
);

my @@mani_files = sort keys %{ExtUtils::Manifest::maniread('MANIFEST')};
my %mani_files = map { ($_ => 1) } @@mani_files;
die "No entries found in MANIFEST; aborting\n" unless @@mani_files;

if ($opts{c} or $opts{s} or $opts{i}) {
    do_scan();
}
elsif ($opts{u}) {
    do_update();
}
else {
    usage('one of -c, -s or -u must be specified');
}
exit 0;




sub do_scan {
    for my $file (@@mani_files) {
	next if grep $file =~ m{^$_/}, @@SKIP_DIRS;
	if ($SKIP_FILES{$file}) {
	    warn "(skipping $file)\n";
	    next;
	}
	open my $fh, '<', $file;
	my $header = 0;
	my @@stat = stat $file;
	my $mode = $stat[2];
	my $file_changed = 0;
	my $new_contents = '';

	while (my $line = <$fh>) {
	    my $oldline = $line;
	    my $line_changed = 0;
	    for my $map (@@maps) {
		my ($pat, $sub, $expected, $file_pat) = @@$map;

		next if defined $file_pat and $file !~ $file_pat;
		next unless $line =~ $pat;
		my ($got, $replacement) = $sub->();

		if ($opts{c}) {
		    # only report unexpected 
		    next unless defined $expected and $got ne $expected;
		}
		$line =~ s/$pat/$replacement/
		    or die "Internal error: substitution failed: [$pat]\n";
		if ($line ne $oldline) {
	            $line_changed = 1;
		    last;
		}
	    }
	    $new_contents .= $line if $opts{i};
	    if ($line_changed) {
		$file_changed = 1;
		if ($opts{s}) {
		    print "\n$file\n" unless $header;
		    $header=1;
		    printf "\n%5d: -%s       +%s", $., $oldline, $line;
		}
	    }
	}
	if ($opts{i} && $file_changed) {
	    warn "Updating $file inplace\n";
	    open my $fh, '>', $file;
	    binmode $fh;
	    print $fh $new_contents;
	    close $fh;
	    chmod $mode & 0777, $file;
	}
    }
    warn "(skipped  $_/*)\n" for @@SKIP_DIRS;
}

sub do_update {

    my %changes;
    my $file;
    my $line;

    # read in config

    while (<STDIN>) {
	next unless /\S/;
	if (/^(\S+)$/) {
	    $file = $1;
	    die "No such file in MANIFEST: '$file'\n" unless $mani_files{$file};
	    die "file already seen; '$file'\n" if exists $changes{$file};
	    undef $line;
	}
	elsif (/^\s+(\d+): -(.*)/) {
	    my $old;
	    ($line, $old) = ($1,$2);
	    die "$.: old line without preceding filename\n"
			    unless defined $file;
	    die "Dup line number: $line\n" if exists $changes{$file}{$line};
	    $changes{$file}{$line}[0] = $old;
	}
	elsif (/^\s+\+(.*)/) {
	    my $new = $1;
	    die "$.: replacement line seen without old line\n" unless $line;
	    $changes{$file}{$line}[1] = $new;
	    undef $line;
	}
	else {
	    die "Unexpected line at ;line $.: $_\n";
	}
    }

    # suck in file contents to memory, then update that in-memory copy

    my %contents;
    for my $file (sort keys %changes) {
	open my $fh, '<', $file;
	binmode $fh;
	$contents{$file} = [ <$fh> ];
	chomp @@{$contents{$file}};
	close $fh;

	my $entries = $changes{$file};
	for my $line (keys %$entries) {
	    die "$file: no such line: $line\n"
		    unless defined $contents{$file}[$line-1];
	    if ($contents{$file}[$line-1] ne $entries->{$line}[0]) {
		die "$file: line mismatch at line $line:\n"
			. "File:   [$contents{$file}[$line-1]]\n"
			. "Config: [$entries->{$line}[0]]\n"
	    }
	    $contents{$file}[$line-1] = $entries->{$line}[1];
	}
    }

    # check the temp files don't already exist

    for my $file (sort keys %contents) {
	my $nfile = "$file-new";
	die "$nfile already exists in MANIFEST; aborting\n"
	    if $mani_files{$nfile};
    }

    # write out the new files

    for my $file (sort keys %contents) {
	my $nfile = "$file-new";
	open my $fh, '>', $nfile;
	binmode $fh;
	print $fh $_, "\n" for @@{$contents{$file}};
	close $fh;

	my @@stat = stat $file;
	my $mode = $stat[2];
	die "stat $file fgailed to give a mode!\n" unless defined $mode;
	chmod $mode & 0777, $nfile;
    }

    # and rename them

    for my $file (sort keys %contents) {
	my $nfile = "$file-new";
	warn "updating $file ...\n";
	rename $nfile, $file;
    }
}

@


1.1
log
@Initial revision
@
text
@d29 3
d46 1
a46 1
# will generate lots fo false positives (eg pod/*). These are listed on
d51 1
d63 1
d72 2
d79 1
a79 1
getopts('csu', \%opts) or usage;
d81 1
a81 1
    @@ARGV == 0 or usage('no version version numbers should be speciied');
d92 1
a92 1
usage('only one of -c, -s and -u') if keys %opts > 1;
d128 2
a129 2
	sub { $2, "${1}0$3" },
	0,
d134 2
a135 2
	sub { $2, "$1$newx.$newy.0$3" },
	"$oldx.$oldy.0",
d152 1
a152 1
	$oldz,
d156 2
a157 2
	sub { $2, "${1}0$3"},
	0,
d184 23
d214 1
d216 4
d222 1
a223 3
    Porting/mergelog
    Porting/mergelog-tool
    pod.lst
d227 1
d231 1
d239 1
a239 1
if ($opts{c} or $opts{s}) {
d246 1
a246 1
    usage('one of -c, -s or -u must be specifcied');
d255 1
a255 1
	next if grep $file =~ m{$_/}, @@SKIP_DIRS;
d260 1
a260 1
	open my $fh, '<', $file or die "Aborting: can't open $file: $!\n";
d262 4
d267 3
a269 1
	while (<$fh>) {
d274 1
a274 1
		next unless $_ =~ $pat;
d281 1
a281 2
		my $newstr = $_;
    		$newstr =~ s/$pat/$replacement/
d283 9
a291 1
		if ($_ ne $newstr) {
d294 1
a294 1
		    printf "\n%5d: -%s       +%s", $., $_, $newstr;
a295 1
		last;
d298 8
d329 1
a329 1
	    die "$.: old line without preceeding filename\n"
d349 2
a350 1
	open my $fh, '<', $file or die "open '$file': $!\n";
d353 1
a353 1
	close $fh or die "close: '$file': $!\n";
d380 2
a381 1
	open my $fh, '>', $nfile or die "create '$nfile' failed: $!\n";
d383 1
a383 1
	close $fh or die "failed to close $nfile; aborting: $!\n";
d385 1
a385 1
	my @@stat = stat $file or die "Can't stat $file: $!\n";
d388 1
a388 1
	chmod $mode & 0777, $nfile or die "chmod $nfile failed; aborting: $!\n";
d396 1
a396 1
	rename $nfile, $file or die "rename $nfile $file: $!\n";
@


1.1.1.1
log
@import perl 5.10.1
@
text
@@


1.1.1.2
log
@Perl 5.12.2 from CPAN
@
text
@a176 8
    # perl511, perl511.dll, perl511.lib, perl511s.lib, libperl511.a
    [
	qr{\b ((?:lib)?) perl (\d\d\d) (s?) \b }x,
	sub {$2, "$1perl$newx$newy$3" },
	"$oldx$oldy",
	qr/makedef|win32|hints/,      # makedef.pl, README.win32, win32/*, hints/*
    ],

a186 1
	Porting/release_schedule.pod
a294 1
	binmode $fh;
a324 1
	binmode $fh;
@


1.1.1.3
log
@import perl 5.16.3 from CPAN - worked on by Andrew Fresh and myself
@
text
@a47 1
use autodie;
a58 1
	  -i <C.C.C> <N.N.N>
a66 2
    -i scan files and make changes inplace

d72 1
a72 1
getopts('csui', \%opts) or usage;
d74 1
a74 1
    @@ARGV == 0 or usage('no version version numbers should be specified');
d85 1
a85 1
usage('only one of -c, -s, -u and -i') if keys %opts > 1;
d121 2
a122 2
	sub { $2, ($newy % 2) ? "$1$newz$3" : "${1}0$3" },
	($oldy % 2) ? $oldz : 0,
d127 2
a128 2
	sub { $2, ($newy % 2) ? "$1$newx.$newy.$newz$3": "$1$newx.$newy.0$3" },
	($oldy % 2) ? "$oldx.$oldy.$oldz" : "$oldx.$oldy.0",
d145 1
a145 1
	($oldy % 2) ? $oldz : 0,
d149 2
a150 2
	sub { $2, ($newy % 2) ? "$1$newz$3" : "${1}0$3" },
	$oldz,
d182 1
a182 17
	qr/win32|hints/,      # README.win32, win32/*, hints/*
    ],

    # microperl locations should be bumped for major versions
    [
        qr{(/)(\d\.\d{2})(["'/])},
        sub { $2, "$1$newx.$newy$3" },
        "$oldx.$oldy",
        qr/uconfig/,
    ],

    # rename perl-5^.15^.1.dirperl-5_15_1.dir in README.vms
    [
	qr{\sperl-(\d+)_(\d+)_(\d+)\.dir}x,
	sub { " perl-${1}_${2}_${3}.dir", " perl-${newx}_${newy}_${newz}.dir" },
	" perl-${oldx}_${oldy}_{$oldz}.dir",
	qr/README.vms/,
a192 3
    Porting/Maintainers.pl
    Porting/acknowledgements.pl
    Porting/epigraphs.pod
d195 1
a195 1
    Porting/release_schedule.pod
d197 3
a205 1
    cpan
d213 1
a213 1
if ($opts{c} or $opts{s} or $opts{i}) {
d220 1
a220 1
    usage('one of -c, -s or -u must be specified');
d234 1
a234 1
	open my $fh, '<', $file;
a235 4
	my @@stat = stat $file;
	my $mode = $stat[2];
	my $file_changed = 0;
	my $new_contents = '';
d237 1
a237 2
	while (my $line = <$fh>) {
	    my $oldline = $line;
d242 1
a242 1
		next unless $line =~ $pat;
d249 2
a250 1
		$line =~ s/$pat/$replacement/
d252 1
a252 5
	    }
	    $new_contents .= $line if $opts{i};
	    if ($line ne $oldline) {
		$file_changed = 1;
		if ($opts{s}) {
d255 1
a255 1
		    printf "\n%5d: -%s       +%s", $., $oldline, $line;
d257 1
a259 8
	if ($opts{i} && $file_changed) {
	    warn "Updating $file inplace\n";
	    open my $fh, '>', $file;
	    binmode $fh;
	    print $fh $new_contents;
	    close $fh;
	    chmod $mode & 0777, $file;
	}
d283 1
a283 1
	    die "$.: old line without preceding filename\n"
d303 1
a303 1
	open my $fh, '<', $file;
d307 1
a307 1
	close $fh;
d334 1
a334 1
	open my $fh, '>', $nfile;
d337 1
a337 1
	close $fh;
d339 1
a339 1
	my @@stat = stat $file;
d342 1
a342 1
	chmod $mode & 0777, $nfile;
d350 1
a350 1
	rename $nfile, $file;
@


1.1.1.4
log
@Import perl-5.18.2

OK espie@@ sthen@@ deraadt@@
@
text
@a28 3
#
# The -i option can be used to combine these two steps (if you prefer to make
# all of the changes at once and then edit the results via git).
d197 8
a214 1
    Porting/corelist-perldelta.pl
@


1.1.1.5
log
@Import perl-5.20.1
@
text
@d46 1
a46 1
# will generate lots of false positives (eg pod/*). These are listed on
a199 7
    # win32/Makefile.ce
    [
        qr/(PV\s*=\s*)(\d\d{2})\b$/,
        sub { $2, "$1$newx$newy" },
        "$oldx$oldy",
        qr/Makefile\.ce/,
    ],
@


