head	1.2;
access;
symbols
	OPENBSD_5_3:1.1.1.7.0.18
	OPENBSD_5_3_BASE:1.1.1.7
	OPENBSD_5_2:1.1.1.7.0.16
	OPENBSD_5_2_BASE:1.1.1.7
	OPENBSD_5_1_BASE:1.1.1.7
	OPENBSD_5_1:1.1.1.7.0.14
	OPENBSD_5_0:1.1.1.7.0.12
	OPENBSD_5_0_BASE:1.1.1.7
	OPENBSD_4_9:1.1.1.7.0.10
	OPENBSD_4_9_BASE:1.1.1.7
	PERL_5_12_2:1.1.1.7
	OPENBSD_4_8:1.1.1.7.0.8
	OPENBSD_4_8_BASE:1.1.1.7
	OPENBSD_4_7:1.1.1.7.0.4
	OPENBSD_4_7_BASE:1.1.1.7
	PERL_5_10_1:1.1.1.7
	OPENBSD_4_6:1.1.1.7.0.6
	OPENBSD_4_6_BASE:1.1.1.7
	OPENBSD_4_5:1.1.1.7.0.2
	OPENBSD_4_5_BASE:1.1.1.7
	PERL_5_10_0:1.1.1.7
	OPENBSD_4_4:1.1.1.6.0.10
	OPENBSD_4_4_BASE:1.1.1.6
	OPENBSD_4_3:1.1.1.6.0.8
	OPENBSD_4_3_BASE:1.1.1.6
	OPENBSD_4_2:1.1.1.6.0.6
	OPENBSD_4_2_BASE:1.1.1.6
	OPENBSD_4_1:1.1.1.6.0.4
	OPENBSD_4_1_BASE:1.1.1.6
	OPENBSD_4_0:1.1.1.6.0.2
	OPENBSD_4_0_BASE:1.1.1.6
	PERL_5_8_8:1.1.1.6
	OPENBSD_3_9:1.1.1.5.0.10
	OPENBSD_3_9_BASE:1.1.1.5
	OPENBSD_3_8:1.1.1.5.0.8
	OPENBSD_3_8_BASE:1.1.1.5
	OPENBSD_3_7:1.1.1.5.0.6
	OPENBSD_3_7_BASE:1.1.1.5
	PERL_5_8_6:1.1.1.5
	OPENBSD_3_6:1.1.1.5.0.4
	OPENBSD_3_6_BASE:1.1.1.5
	PERL_5_8_5:1.1.1.5
	PERL_5_8_3:1.1.1.5
	OPENBSD_3_5:1.1.1.5.0.2
	OPENBSD_3_5_BASE:1.1.1.5
	PERL_5_8_2:1.1.1.5
	OPENBSD_3_4:1.1.1.4.0.4
	OPENBSD_3_4_BASE:1.1.1.4
	OPENBSD_3_3:1.1.1.4.0.2
	OPENBSD_3_3_BASE:1.1.1.4
	PERL_5_8_0:1.1.1.4
	OPENBSD_3_2:1.1.1.3.0.6
	OPENBSD_3_2_BASE:1.1.1.3
	OPENBSD_3_1:1.1.1.3.0.4
	OPENBSD_3_1_BASE:1.1.1.3
	OPENBSD_3_0:1.1.1.3.0.2
	OPENBSD_3_0_BASE:1.1.1.3
	PERL_5_6_1:1.1.1.3
	OPENBSD_2_9:1.1.1.2.0.6
	OPENBSD_2_9_BASE:1.1.1.2
	OPENBSD_2_8:1.1.1.2.0.4
	OPENBSD_2_8_BASE:1.1.1.2
	OPENBSD_2_7:1.1.1.2.0.2
	OPENBSD_2_7_BASE:1.1.1.2
	PERL_5_6_0:1.1.1.2
	OPENBSD_2_6:1.1.1.1.0.2
	OPENBSD_2_6_BASE:1.1.1.1
	PERL_500503:1.1.1.1
	CPAN:1.1.1;
locks; strict;
comment	@# @;
expand	@o@;


1.2
date	2013.03.25.20.40.46;	author sthen;	state dead;
branches;
next	1.1;

1.1
date	99.04.29.22.38.13;	author millert;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	99.04.29.22.38.13;	author millert;	state Exp;
branches;
next	1.1.1.2;

1.1.1.2
date	2000.04.06.16.08.52;	author millert;	state Exp;
branches;
next	1.1.1.3;

1.1.1.3
date	2001.05.24.18.22.30;	author millert;	state Exp;
branches;
next	1.1.1.4;

1.1.1.4
date	2002.10.27.22.15.09;	author millert;	state Exp;
branches;
next	1.1.1.5;

1.1.1.5
date	2003.12.03.02.44.29;	author millert;	state Exp;
branches;
next	1.1.1.6;

1.1.1.6
date	2006.03.28.18.49.39;	author millert;	state Exp;
branches;
next	1.1.1.7;

1.1.1.7
date	2008.09.29.17.18.12;	author millert;	state Exp;
branches;
next	;


desc
@@


1.2
log
@merge/resolve conflicts
(some more to do after this one)
@
text
@#!/l/local/bin/perl -w
#
# Generate a nice changelist by querying perforce.
#
# Each change is described with the change number, description,
# which branch the change happened in, files modified,
# and who was responsible for entering the change.
#
# Can be called with a list of change numbers or a range of the
# form "12..42".  Changelog will be printed from highest number
# to lowest.
#
# Outputs the changelist to stdout.
#
# Gurusamy Sarathy <gsar@@umich.edu>
#

use Text::Wrap;

$0 =~ s|^.*/||;
unless (@@ARGV) {
    die <<USAGE;
        $0 [-p \$P4PORT] <change numbers or from..to>
USAGE
}

my @@changes;

my %editkind;
@@editkind{ qw(   add      edit    delete integrate   branch )}
         = qw(     +         !         -        !>       +> );

my $p4port = $ENV{P4PORT} || 'localhost:1666';

while (@@ARGV) {
    $_ = shift;
    if (/^(\d+)\.\.(\d+)$/) {
        push @@changes, $1 .. $2;
    }
    elsif (/^\d+$/) {
        push @@changes, $_;
    }
    elsif (/^-p(.*)$/) {
        $p4port = $1 || shift;
    }
    else {
        warn "Arguments must be change numbers, ignoring `$_'\n";
    }
}

@@changes = sort { $b <=> $a } @@changes;

my @@desc = `p4 -p $p4port describe -s @@changes`;
if ($?) {
    die "$0: `p4 -p $p4port describe -s @@changes` failed, status[$?]\n";
}
else {
    chomp @@desc;
    while (@@desc) {
	my ($change,$who,$date,$time,@@log,$branch,$file,$type,%files);
	$_ = shift @@desc;
	if (/^Change (\d+) by (\w+)\@@.+ on (\S+) (\S+)\s*$/) {
	    ($change, $who, $date, $time) = ($1,$2,$3,$4);
	    $_ = shift @@desc;  # get rid of empty line
	    while (@@desc) {
	        $_ = shift @@desc;
		last if /^Affected/;
		push @@log, $_;    
	    }
	    if (/^Affected/) {
		$_ = shift @@desc;  # get rid of empty line
		while ($_ = shift @@desc) {
		    last unless /^\.\.\./;
		    if (m{^\.\.\. //depot/(.*?perl|[^/]*)/([^#]+)#\d+ (\w+)\s*$}) {
			($branch,$file,$type) = ($1,$2,$3);
			$files{$branch} = {} unless exists $files{$branch};
			$files{$branch}{$type} = [] unless exists $files{$branch}{$type};
			push @@{$files{$branch}{$type}}, $file;
		    }
		    else {
			warn "Unknown line [$_], ignoring\n";
		    }
		}
	    }
	}
	next unless $change;
	print "_" x 76, "\n";
	printf <<EOT, $change, $who, $date, $time;
[%6s] By: %-25s             on %9s %9s
EOT
	print "        Log: ";
	my $i = 0;
	while (@@log) {
	    $_ = shift @@log;
	    s/^\s*//;
	    s/^\[.*\]\s*// unless $i ;
            # don't print last empty line
	    if ($_ or @@log) {
	        print "             " if $i++;
	        print "$_\n";
	    }
	}
	for my $branch (sort keys %files) {
	    printf "%11s: $branch\n", 'Branch';
	    for my $kind (sort keys %{$files{$branch}}) {
	        warn("### $kind ###\n"), next unless exists $editkind{$kind};
		my $files = $files{$branch}{$kind};
		# don't show large branches and integrations
		$files = ["($kind " . scalar(@@$files) . ' files)']
		    if (@@$files > 25
		        && ( $kind eq 'integrate' || $kind eq 'branch'));
	        print wrap(sprintf("%12s ", $editkind{$kind}),
			   sprintf("%12s ", $editkind{$kind}),
			   "@@$files\n");
            }
	}
    }
}
@


1.1
log
@Initial revision
@
text
@@


1.1.1.1
log
@perl5.005_03
@
text
@@


1.1.1.2
log
@virgin perl 5.6.0
@
text
@d15 1
a15 1
# Gurusamy Sarathy <gsar@@activestate.com>
d110 2
a111 3
		    if (@@$files > 25 && ($kind eq 'integrate'
		    			 || $kind eq 'branch'))
		       || @@$files > 100;
@


1.1.1.3
log
@stock perl 5.6.1
@
text
@d23 1
a23 1
        $0 [-p \$P4PORT] [-bi branch_include] [-be branch_exclude] <change numbers or from..to>
a34 5
my @@branch_include;
my @@branch_exclude;
my %branch_include;
my %branch_exclude;

a45 6
    elsif (/^-bi(.*)$/) {
        push @@branch_include, $1 || shift;
    }
    elsif (/^-be(.*)$/) {
        push @@branch_exclude, $1 || shift;
    }
a52 3
@@branch_include{@@branch_include} = @@branch_include if @@branch_include;
@@branch_exclude{@@branch_exclude} = @@branch_exclude if @@branch_exclude;

a60 2
	my $skip = 0;
        my $nbranch = 0;
a75 6
 		        $nbranch++;
		        if (exists $branch_exclude{$branch} or
			    @@branch_include and
			    not exists $branch_include{$branch}) {
			    $skip++;
			}
d86 1
a86 1
	next if not $change or $skip == $nbranch;
@


1.1.1.4
log
@stock perl 5.8.0 from CPAN
@
text
@d42 2
a43 2
    if (/^(\d+)\.\.(\d+)?$/) {
        push @@changes, $1 .. ($2 || (split(' ', `p4 changes -m 1`))[1]);
d108 1
a108 1
	next if ((not $change) or $skip);
@


1.1.1.5
log
@perl 5.8.2 from CPAN
@
text
@d1 1
a1 1
#!/usr/bin/perl -w
@


1.1.1.6
log
@perl 5.8.8 import
@
text
@a71 1
    tr/\r/\n/ foreach @@desc;
@


1.1.1.7
log
@import perl 5.10.0 from CPAN
@
text
@a18 1
use Text::Tabs;
d110 2
a111 2
	my $output = ("_" x 76) . "\n";
	$output .= sprintf <<EOT, $change, $who, $date, $time;
d114 1
a114 1
	$output .= "        Log: ";
d122 2
a123 2
	        $output .= "             " if $i++;
	        $output .= "$_\n";
d127 1
a127 1
	    $output .= sprintf "%11s: $branch\n", 'Branch';
d136 3
a138 3
	        $output .= wrap(sprintf("%12s ", $editkind{$kind}),
				sprintf("%12s ", $editkind{$kind}),
				"@@$files\n");
a140 1
	print unexpand($output);
@


