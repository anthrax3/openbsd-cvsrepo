head	1.21;
access;
symbols
	OPENBSD_6_2_BASE:1.21
	PERL_5_24_2:1.1.1.16
	OPENBSD_6_1:1.19.0.4
	OPENBSD_6_1_BASE:1.19
	OPENBSD_6_0:1.17.0.8
	OPENBSD_6_0_BASE:1.17
	OPENBSD_5_9:1.17.0.2
	OPENBSD_5_9_BASE:1.17
	OPENBSD_5_8:1.17.0.4
	OPENBSD_5_8_BASE:1.17
	PERL_5_20_2:1.1.1.15
	OPENBSD_5_7:1.15.0.2
	OPENBSD_5_7_BASE:1.15
	PERL_5_20_1:1.1.1.15
	OPENBSD_5_6:1.13.0.4
	OPENBSD_5_6_BASE:1.13
	PERL_5_18_2:1.1.1.14
	PERL:1.1.1
	OPENBSD_5_5:1.12.0.6
	OPENBSD_5_5_BASE:1.12
	OPENBSD_5_4:1.12.0.2
	OPENBSD_5_4_BASE:1.12
	PERL_5_16_3:1.1.1.13
	OPENBSD_5_3:1.11.0.10
	OPENBSD_5_3_BASE:1.11
	OPENBSD_5_2:1.11.0.8
	OPENBSD_5_2_BASE:1.11
	OPENBSD_5_1_BASE:1.11
	OPENBSD_5_1:1.11.0.6
	OPENBSD_5_0:1.11.0.4
	OPENBSD_5_0_BASE:1.11
	OPENBSD_4_9:1.11.0.2
	OPENBSD_4_9_BASE:1.11
	PERL_5_12_2:1.1.1.12
	OPENBSD_4_8:1.10.0.4
	OPENBSD_4_8_BASE:1.10
	OPENBSD_4_7:1.10.0.2
	OPENBSD_4_7_BASE:1.10
	PERL_5_10_1:1.1.1.11
	OPENBSD_4_6:1.9.0.6
	OPENBSD_4_6_BASE:1.9
	OPENBSD_4_5:1.9.0.2
	OPENBSD_4_5_BASE:1.9
	PERL_5_10_0:1.1.1.10
	OPENBSD_4_4:1.8.0.10
	OPENBSD_4_4_BASE:1.8
	OPENBSD_4_3:1.8.0.8
	OPENBSD_4_3_BASE:1.8
	OPENBSD_4_2:1.8.0.6
	OPENBSD_4_2_BASE:1.8
	OPENBSD_4_1:1.8.0.4
	OPENBSD_4_1_BASE:1.8
	OPENBSD_4_0:1.8.0.2
	OPENBSD_4_0_BASE:1.8
	PERL_5_8_8:1.1.1.9
	OPENBSD_3_9:1.7.0.8
	OPENBSD_3_9_BASE:1.7
	OPENBSD_3_8:1.7.0.6
	OPENBSD_3_8_BASE:1.7
	OPENBSD_3_7:1.7.0.4
	OPENBSD_3_7_BASE:1.7
	PERL_5_8_6:1.1.1.8
	OPENBSD_3_6:1.7.0.2
	OPENBSD_3_6_BASE:1.7
	PERL_5_8_5:1.1.1.7
	PERL_5_8_3:1.1.1.6
	OPENBSD_3_5:1.6.0.2
	OPENBSD_3_5_BASE:1.6
	PERL_5_8_2:1.1.1.5
	OPENBSD_3_4:1.5.0.4
	OPENBSD_3_4_BASE:1.5
	OPENBSD_3_3:1.5.0.2
	OPENBSD_3_3_BASE:1.5
	PERL_5_8_0:1.1.1.4
	OPENBSD_3_2:1.4.0.6
	OPENBSD_3_2_BASE:1.4
	OPENBSD_3_1:1.4.0.4
	OPENBSD_3_1_BASE:1.4
	OPENBSD_3_0:1.4.0.2
	OPENBSD_3_0_BASE:1.4
	PERL_5_6_1:1.1.1.3
	OPENBSD_2_9:1.3.0.6
	OPENBSD_2_9_BASE:1.3
	OPENBSD_2_8:1.3.0.4
	OPENBSD_2_8_BASE:1.3
	OPENBSD_2_7:1.3.0.2
	OPENBSD_2_7_BASE:1.3
	PERL_5_6_0:1.1.1.2
	OPENBSD_2_6:1.2.0.2
	OPENBSD_2_6_BASE:1.2
	PERL_500503:1.1.1.1
	CPAN:1.1.1
	OPENBSD_2_5:1.1.0.6
	OPENBSD_2_5_BASE:1.1
	OPENBSD_2_4:1.1.0.4
	OPENBSD_2_4_BASE:1.1
	OPENBSD_2_3:1.1.0.2
	OPENBSD_2_3_BASE:1.1;
locks; strict;
comment	@# @;
expand	@o@;


1.21
date	2017.08.14.13.49.43;	author afresh1;	state Exp;
branches;
next	1.20;
commitid	AOpGtCFzbfdujI88;

1.20
date	2017.08.14.13.48.46;	author afresh1;	state Exp;
branches;
next	1.19;
commitid	CrMEpTqBUsxCMTjx;

1.19
date	2017.02.05.00.33.39;	author afresh1;	state Exp;
branches;
next	1.18;
commitid	7JLVNm1wwPgqSqTa;

1.18
date	2017.02.05.00.31.54;	author afresh1;	state Exp;
branches;
next	1.17;
commitid	cxJ08BvJA9Pt2PTM;

1.17
date	2015.04.25.19.26.21;	author afresh1;	state Exp;
branches;
next	1.16;
commitid	3qGYFVvfrExB70FB;

1.16
date	2015.04.25.19.14.43;	author afresh1;	state Exp;
branches;
next	1.15;
commitid	XRK22kO4se3v2i2I;

1.15
date	2014.11.17.21.00.58;	author afresh1;	state Exp;
branches;
next	1.14;
commitid	LnErp1MFKSuew5Fr;

1.14
date	2014.11.17.20.56.55;	author afresh1;	state Exp;
branches;
next	1.13;
commitid	QP75iYx42Uo7mMxO;

1.13
date	2014.03.24.15.05.23;	author afresh1;	state Exp;
branches;
next	1.12;

1.12
date	2013.03.25.20.40.46;	author sthen;	state Exp;
branches;
next	1.11;

1.11
date	2010.09.24.15.06.44;	author millert;	state Exp;
branches;
next	1.10;

1.10
date	2009.10.12.18.24.22;	author millert;	state Exp;
branches;
next	1.9;

1.9
date	2008.09.29.17.36.01;	author millert;	state Exp;
branches;
next	1.8;

1.8
date	2006.03.28.19.23.01;	author millert;	state Exp;
branches;
next	1.7;

1.7
date	2004.04.07.21.33.01;	author millert;	state Exp;
branches;
next	1.6;

1.6
date	2003.12.03.03.02.26;	author millert;	state Exp;
branches;
next	1.5;

1.5
date	2002.10.27.22.25.20;	author millert;	state Exp;
branches;
next	1.4;

1.4
date	2001.05.24.18.35.02;	author millert;	state Exp;
branches;
next	1.3;

1.3
date	2000.04.06.17.04.38;	author millert;	state Exp;
branches;
next	1.2;

1.2
date	99.04.29.22.51.16;	author millert;	state Exp;
branches;
next	1.1;

1.1
date	97.11.30.07.49.31;	author millert;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	99.04.29.22.38.15;	author millert;	state Exp;
branches;
next	1.1.1.2;

1.1.1.2
date	2000.04.06.16.08.53;	author millert;	state Exp;
branches;
next	1.1.1.3;

1.1.1.3
date	2001.05.24.18.22.30;	author millert;	state Exp;
branches;
next	1.1.1.4;

1.1.1.4
date	2002.10.27.22.15.09;	author millert;	state Exp;
branches;
next	1.1.1.5;

1.1.1.5
date	2003.12.03.02.44.29;	author millert;	state Exp;
branches;
next	1.1.1.6;

1.1.1.6
date	2004.04.07.21.13.41;	author millert;	state Exp;
branches;
next	1.1.1.7;

1.1.1.7
date	2004.08.09.17.47.48;	author millert;	state Exp;
branches;
next	1.1.1.8;

1.1.1.8
date	2005.01.15.21.18.13;	author millert;	state Exp;
branches;
next	1.1.1.9;

1.1.1.9
date	2006.03.28.18.49.40;	author millert;	state Exp;
branches;
next	1.1.1.10;

1.1.1.10
date	2008.09.29.17.18.13;	author millert;	state Exp;
branches;
next	1.1.1.11;

1.1.1.11
date	2009.10.12.18.10.46;	author millert;	state Exp;
branches;
next	1.1.1.12;

1.1.1.12
date	2010.09.24.14.49.21;	author millert;	state Exp;
branches;
next	1.1.1.13;

1.1.1.13
date	2013.03.25.20.09.31;	author sthen;	state Exp;
branches;
next	1.1.1.14;

1.1.1.14
date	2014.03.24.14.59.09;	author afresh1;	state Exp;
branches;
next	1.1.1.15;

1.1.1.15
date	2014.11.17.20.53.16;	author afresh1;	state Exp;
branches;
next	1.1.1.16;
commitid	B31cAbBIXiCqnL97;

1.1.1.16
date	2017.08.14.13.46.22;	author afresh1;	state Exp;
branches;
next	;
commitid	fAzrs78vdW2Yfc6A;


desc
@perl 5.004_04
@


1.21
log
@Apply local patches - perl-5.24.2

OK bluhm@@, Reads ok sthen@@
@
text
@=head1 NAME

Pumpkin - Notes on handling the Perl Patch Pumpkin And Porting Perl

=head1 SYNOPSIS

There is no simple synopsis, yet.

=head1 DESCRIPTION

This document attempts to begin to describe some of the considerations
involved in patching, porting, and maintaining perl.

This document is still under construction, and still subject to
significant changes.  Still, I hope parts of it will be useful,
so I'm releasing it even though it's not done.

For the most part, it's a collection of anecdotal information that
already assumes some familiarity with the Perl sources.  I really need
an introductory section that describes the organization of the sources
and all the various auxiliary files that are part of the distribution.

=head1 Where Do I Get Perl Sources and Related Material?

The Comprehensive Perl Archive Network (or CPAN) is the place to go.
There are many mirrors, but the easiest thing to use is probably
http://www.cpan.org/README.html , which automatically points you to a
mirror site "close" to you.

=head2 Perl5-porters mailing list

The mailing list perl5-porters@@perl.org
is the main group working with the development of perl.  If you're
interested in all the latest developments, you should definitely
subscribe.  The list is high volume, but generally has a
fairly low noise level.

Subscribe by sending the message (in the body of your letter)

	subscribe perl5-porters

to perl5-porters-request@@perl.org .

Archives of the list are held at:

    http://www.xray.mpe.mpg.de/mailing-lists/perl5-porters/

=head1 How are Perl Releases Numbered?

Beginning with v5.6.0, even versions will stand for maintenance releases
and odd versions for development releases, i.e., v5.6.x for maintenance
releases, and v5.7.x for development releases.  Before v5.6.0, subversions
_01 through _49 were reserved for bug-fix maintenance releases, and
subversions _50 through _99 for unstable development versions.

For example, in v5.6.1, the revision number is 5, the version is 6,
and 1 is the subversion.

For compatibility with the older numbering scheme the composite floating
point version number continues to be available as the magic variable $],
and amounts to C<$revision + $version/1000 + $subversion/100000>.  This
can still be used in comparisons.

	print "You've got an old perl\n" if $] < 5.005_03;

In addition, the version is also available as a string in $^V.

	print "You've got a new perl\n" if $^V and $^V ge v5.6.0;

You can also require particular version (or later) with:

        use 5.006;

or using the new syntax available only from v5.6 onward:

	use v5.6.0;

At some point in the future, we may need to decide what to call the
next big revision.  In the .package file used by metaconfig to
generate Configure, there are two variables that might be relevant:
$baserev=5 and $package=perl5.

Perl releases produced by the members of perl5-porters are usually
available on CPAN in the F<src/5.0/maint> and F<src/5.0/devel>
directories.

=head2 Maintenance and Development Subversions

The first rule of maintenance work is "First, do no harm."

Trial releases of bug-fix maintenance releases are announced on
perl5-porters. Trial releases use the new subversion number (to avoid
testers installing it over the previous release) and include a 'local
patch' entry in F<patchlevel.h>. The distribution file contains the
string C<MAINT_TRIAL> to make clear that the file is not meant for
public consumption.

In general, the names of official distribution files for the public
always match the regular expression:

    ^perl\d+\.(\d+)\.\d+(-MAINT_TRIAL_\d+)\.tar\.gz$

C<$1> in the pattern is always an even number for maintenance
versions, and odd for developer releases.

In the past it has been observed that pumpkings tend to invent new
naming conventions on the fly. If you are a pumpking, before you
invent a new name for any of the three types of perl distributions,
please inform the guys from the CPAN who are doing indexing and
provide the trees of symlinks and the like. They will have to know
I<in advance> what you decide.

=head2 Why is it called the patch pumpkin?

Chip Salzenberg gets credit for that, with a nod to his cow orker,
David Croy.  We had passed around various names (baton, token, hot
potato) but none caught on.  Then, Chip asked:

[begin quote]

   Who has the patch pumpkin?

To explain:  David Croy once told me once that at a previous job,
there was one tape drive and multiple systems that used it for backups.
But instead of some high-tech exclusion software, they used a low-tech
method to prevent multiple simultaneous backups: a stuffed pumpkin.
No one was allowed to make backups unless they had the "backup pumpkin".

[end quote]

The name has stuck.

=head1 Philosophical Issues in Patching and Porting Perl

There are no absolute rules, but there are some general guidelines I
have tried to follow as I apply patches to the perl sources.
(This section is still under construction.)

=head2 Solve problems as generally as possible

Never implement a specific restricted solution to a problem when you
can solve the same problem in a more general, flexible way.

For example, for dynamic loading to work on some SVR4 systems, we had
to build a shared libperl.so library.  In order to build "FAT" binaries
on NeXT 4.0 systems, we had to build a special libperl library.  Rather
than continuing to build a contorted nest of special cases, I
generalized the process of building libperl so that NeXT and SVR4 users
could still get their work done, but others could build a shared
libperl if they wanted to as well.

Contain your changes carefully.  Assume nothing about other operating
systems, not even closely related ones.  Your changes must not affect
other platforms.

Spy shamelessly on how similar patching or porting issues have been
settled elsewhere.

If feasible, try to keep filenames 8.3-compliant to humor those poor
souls that get joy from running Perl under such dire limitations.
There's a script, F<check83.pl>, for keeping your nose 8.3-clean.
In a similar vein, do not create files or directories which differ only
in case (upper versus lower).

=head2 Seek consensus on major changes

If you are making big changes, don't do it in secret.  Discuss the
ideas in advance on perl5-porters.

=head2 Keep the documentation up-to-date

If your changes may affect how users use perl, then check to be sure
that the documentation is in sync with your changes.  Be sure to
check all the files F<pod/*.pod> and also the F<INSTALL> document.

Consider writing the appropriate documentation first and then
implementing your change to correspond to the documentation.

=head2 Avoid machine-specific #ifdef's

To the extent reasonable, try to avoid machine-specific #ifdef's in
the sources.  Instead, use feature-specific #ifdef's.  The reason is
that the machine-specific #ifdef's may not be valid across major
releases of the operating system.  Further, the feature-specific tests
may help out folks on another platform who have the same problem.

=head2 Machine-specific files

=over 4

=item source code

If you have many machine-specific #defines or #includes, consider
creating an "osish.h" (F<os2ish.h>, F<vmsish.h>, and so on) and including
that in F<perl.h>.  If you have several machine-specific files (function
emulations, function stubs, build utility wrappers) you may create a
separate subdirectory (djgpp, win32) and put the files in there.
Remember to update C<MANIFEST> when you add files.

If your system supports dynamic loading but none of the existing
methods at F<ext/DynaLoader/dl_*.xs> work for you, you must write
a new one.  Study the existing ones to see what kind of interface
you must supply.

=item build hints

There are two kinds of hints: hints for building Perl and hints for
extensions.   The former live in the C<hints> subdirectory, the latter
in C<ext/*/hints> subdirectories.

The top level hints are Bourne-shell scripts that set, modify and
unset appropriate Configure variables, based on the Configure command
line options and possibly existing config.sh and Policy.sh files from
previous Configure runs.

The extension hints are written in Perl (by the time they are used
miniperl has been built) and control the building of their respective
extensions.  They can be used to for example manipulate compilation
and linking flags.

=item build and installation Makefiles, scripts, and so forth

Sometimes you will also need to tweak the Perl build and installation
procedure itself, like for example F<Makefile.SH> and F<installperl>.
Tread very carefully, even more than usual.  Contain your changes
with utmost care.

=item test suite

Many of the tests in C<t> subdirectory assume machine-specific things
like existence of certain functions, something about filesystem
semantics, certain external utilities and their error messages.  Use
the C<$^O> and the C<Config> module (which contains the results of the
Configure run, in effect the C<config.sh> converted to Perl) to either
skip (preferably not) or customize (preferable) the tests for your
platform.

=item modules

Certain standard modules may need updating if your operating system
sports for example a native filesystem naming.  You may want to update
some or all of the modules File::Basename, File::Spec, File::Path, and
File::Copy to become aware of your native filesystem syntax and
peculiarities.

Remember to have a $VERSION in the modules.  You can use the
F<Porting/checkVERSION.pl> script for checking this.

=item documentation

If your operating system comes from outside UNIX you almost certainly
will have differences in the available operating system functionality
(missing system calls, different semantics, whatever).  Please
document these at F<pod/perlport.pod>.  If your operating system is
the first B<not> to have a system call also update the list of
"portability-bewares" at the beginning of F<pod/perlfunc.pod>.

A file called F<README.youros> at the top level that explains things
like how to install perl at this platform, where to get any possibly
required additional software, and for example what test suite errors
to expect, is nice too.  Such files are in the process of being written
in pod format and will eventually be renamed F<INSTALL.youros>.

You may also want to write a separate F<.pod> file for your operating
system to tell about existing mailing lists, os-specific modules,
documentation, whatever.  Please name these along the lines of
F<perl>I<youros>.pod.  [unfinished: where to put this file (the pod/
subdirectory, of course: but more importantly, which/what index files
should be updated?)]

=back

=head2 Allow for lots of testing

We should never release a main version without testing it as a
subversion first.

=head2 Test popular applications and modules.

We should never release a main version without testing whether or not
it breaks various popular modules and applications.  A partial list of
such things would include majordomo, metaconfig, apache, Tk, CGI,
libnet, and libwww, to name just a few.  Of course it's quite possible
that some of those things will be just plain broken and need to be fixed,
but, in general, we ought to try to avoid breaking widely-installed
things.

=head2 Automated generation of derivative files

The F<embed.h>, F<keywords.h>, F<opcode.h>, F<regcharclass.h>,
F<l1_char_class_tab.h>, and F<perltoc.pod> files
are all automatically generated by perl scripts.  In general, don't
patch these directly; patch the data files instead.

F<Configure> and F<config_h.SH> are also automatically generated by
B<metaconfig>.  In general, you should patch the metaconfig units
instead of patching these files directly.  However, very minor changes
to F<Configure> may be made in between major sync-ups with the
metaconfig units, which tends to be complicated operations.  But be
careful, this can quickly spiral out of control.  Running metaconfig
is not really hard.

Also F<Makefile> is automatically produced from F<Makefile.SH>.
In general, look out for all F<*.SH> files.

Finally, the sample files in the F<Porting/> subdirectory are
generated automatically by the script F<U/mksample> included 
with the metaconfig units.  See L<"run metaconfig"> below for
information on obtaining the metaconfig units.

=head1 How to Make a Distribution

This section has now been expanded and moved into its own file,
F<Porting/release_managers_guide.pod>.

I've kept some of the subsections here for now, as they don't directly
relate to building a release any more, but still contain what might be
useful information - DAPM 7/2009.

=head2 run metaconfig

If you need to make changes to Configure or config_h.SH, it may be best to
change the appropriate metaconfig units instead, and regenerate Configure.

	metaconfig -m

will regenerate F<Configure> and F<config_h.SH>.  Much more information
on obtaining and running metaconfig is in the F<U/README> file
that comes with Perl's metaconfig units.

Since metaconfig is hard to change, running correction scripts after
this generation is sometimes needed. Configure gained complexity over
time, and the order in which config_h.SH is generated can cause havoc
when compiling perl. Therefor, you need to run Porting/config_h.pl
after that generation. All that and more is described in the README
files that come with the metaunits.

Perl's metaconfig units should be available on CPAN.  A set of units
that will work with perl5.9.x is in a file with a name similar to
F<mc_units-20070423.tgz> under L<http://www.cpan.org/authors/id/H/HM/HMBRAND/>.
The mc_units tar file should be unpacked in your main perl source directory.
Note: those units were for use with 5.9.x.  There may have been changes since
then.  Check for later versions or contact perl5-porters@@perl.org to obtain a
pointer to the current version.

Alternatively, do consider if the F<*ish.h> files or the hint files might be
a better place for your changes.

=head2 MANIFEST

If you are using metaconfig to regenerate Configure, then you should note
that metaconfig actually uses MANIFEST.new, so you want to be sure
MANIFEST.new is up-to-date too.  I haven't found the MANIFEST/MANIFEST.new
distinction particularly useful, but that's probably because I still haven't
learned how to use the full suite of tools in the dist distribution.


=head2 Run Configure

This will build a config.sh and config.h.  You can skip this if you haven't
changed Configure or config_h.SH at all.  I use the following command

    sh Configure -Dprefix=/opt/perl -Doptimize=-O -Dusethreads \
	-Dcf_by='yourname' \
	-Dcf_email='yourname@@yourhost.yourplace.com' \
	-Dperladmin='yourname@@yourhost.yourplace.com' \
	-Dmydomain='.yourplace.com' \
	-Dmyhostname='yourhost' \
	-des

=head2 Update Porting/config.sh and Porting/config_H

[XXX 
This section needs revision.  We're currently working on easing
the task of keeping the vms, win32, and plan9 config.sh info
up-to-date.  The plan is to use keep up-to-date 'canned' config.sh
files in the appropriate subdirectories and then generate 'canned'
config.h files for vms, win32, etc. from the generic config.sh file.
This is to ease maintenance.  When Configure gets updated, the parts
sometimes get scrambled around, and the changes in config_H can
sometimes be very hard to follow.  config.sh, on the other hand, can
safely be sorted, so it's easy to track (typically very small) changes
to config.sh and then propagate them to a canned 'config.h' by any
number of means, including a perl script in win32/ or carrying 
F<config.sh> and F<config_h.SH> to a Unix system and running sh
config_h.SH.)  Vms uses F<configure.com> to generate its own F<config.sh>
and F<config.h>.  If you want to add a new variable to F<config.sh> check
with vms folk how to add it to configure.com too.
XXX]

The F<Porting/config.sh> and F<Porting/config_H> files are provided to
help those folks who can't run Configure.  It is important to keep
them up-to-date.  If you have changed F<config_h.SH>, those changes must
be reflected in config_H as well.  (The name config_H was chosen to
distinguish the file from config.h even on case-insensitive file systems.)
Simply edit the existing config_H file; keep the first few explanatory
lines and then copy your new config.h below.

It may also be necessary to update win32/config.?c, and
F<plan9/config.plan9>, though you should be quite careful in doing so if
you are not familiar with those systems.  You might want to issue your
patch with a promise to quickly issue a follow-up that handles those
directories.

=head2 make regen_perly

If F<perly.y> has been edited, it is necessary to run this target to rebuild
F<perly.h>, F<perly.act> and F<perly.tab>. In fact this target just runs the Perl
script F<regen_perly.pl>. Note that F<perly.c> is I<not> rebuilt; this is just a
plain static file now. 

This target relies on you having Bison installed on your system. Running
the target will tell you if you haven't got the right version, and if so,
where to get the right one. Or if you prefer, you could hack
F<regen_perly.pl> to work with your version of Bison. The important things
are that the regexes can still extract out the right chunks of the Bison
output into F<perly.act> and F<perly.tab>, and that the contents of those two
files, plus F<perly.h>, are functionally equivalent to those produced by the
supported version of Bison.

Note that in the old days, you had to do C<make run_byacc> instead.

=head2 make regen_all

This target takes care of the regen_headers target.
(It used to also call the regen_pods target, but that has been eliminated.)

=head2 make regen_headers

The F<embed.h>, F<keywords.h>, and F<opcode.h> files are all automatically
generated by perl scripts.  Since the user isn't guaranteed to have a
working perl, we can't require the user to generate them.  Hence you have
to, if you're making a distribution.

I used to include rules like the following in the makefile:

    # The following three header files are generated automatically
    # The correct versions should be already supplied with the perl kit,
    # in case you don't have perl or 'sh' available.
    # The - is to ignore error return codes in case you have the source
    # installed read-only or you don't have perl yet.
    keywords.h: keywords.pl
	    @@echo "Don't worry if this fails."
	    - perl keywords.pl


However, I got B<lots> of mail consisting of people worrying because the
command failed.  I eventually decided that I would save myself time
and effort by manually running C<make regen_headers> myself rather
than answering all the questions and complaints about the failing
command.

=head2 globvar.sym, and perlio.sym

Make sure these files are up-to-date.  Read the comments in these
files and in F<perl_exp.SH> to see what to do.

=head2 Binary compatibility

If you do change F<embed.fnc> think carefully about
what you are doing.  To the extent reasonable, we'd like to maintain
source and binary compatibility with older releases of perl.  That way,
extensions built under one version of perl will continue to work with
new versions of perl.

Of course, some incompatible changes may well be necessary.  I'm just
suggesting that we not make any such changes without thinking carefully
about them first.  If possible, we should provide
backwards-compatibility stubs.  There's a lot of XS code out there.
Let's not force people to keep changing it.

=head2 PPPort

F<cpan/Devel-PPPort/PPPort.pm> needs to be synchronized to include all
new macros added to .h files (normally F<perl.h> and F<XSUB.h>, but others
as well). Since chances are that when a new macro is added the
committer will forget to update F<PPPort.pm>, it's the best to diff for
changes in .h files when making a new release and making sure that
F<PPPort.pm> contains them all.

The pumpking can delegate the synchronization responsibility to anybody
else, but the release process is the only place where we can make sure
that no new macros fell through the cracks.


=head2 Todo

The F<Porting/todo.pod> file contains a roughly-categorized unordered
list of aspects of Perl that could use enhancement, features that could
be added, areas that could be cleaned up, and so on.  During your term
as pumpkin-holder, you will probably address some of these issues, and
perhaps identify others which, while you decide not to address them this
time around, may be tackled in the future.  Update the file to reflect
the situation as it stands when you hand over the pumpkin.

You might like, early in your pumpkin-holding career, to see if you
can find champions for particular issues on the to-do list: an issue
owned is an issue more likely to be resolved.

There are also some more porting-specific L</Todo> items later in this
file.

=head2 OS/2-specific updates

In the os2 directory is F<diff.configure>, a set of OS/2-specific
diffs against B<Configure>.  If you make changes to Configure, you may
want to consider regenerating this diff file to save trouble for the
OS/2 maintainer.

You can also consider the OS/2 diffs as reminders of portability
things that need to be fixed in Configure.

=head2 VMS-specific updates

The Perl revision number appears as "perl5" in F<configure.com>.
It is courteous to update that if necessary.


=head2 Making a new patch

I find the F<makepatch> utility quite handy for making patches.
You can obtain it from any CPAN archive under
L<http://www.cpan.org/authors/Johan_Vromans/>.  There are a couple
of differences between my version and the standard one. I have mine do
a

	# Print a reassuring "End of Patch" note so people won't
	# wonder if their mailer truncated patches.
	print "\n\nEnd of Patch.\n";

at the end.  That's because I used to get questions from people asking
if their mail was truncated.

It also writes Index: lines which include the new directory prefix
(change Index: print, approx line 294 or 310 depending on the version,
to read:  print PATCH ("Index: $newdir$new\n");).  That helps patches
work with more POSIX conformant patch programs.

Here's how I generate a new patch.  I'll use the hypothetical
5.004_07 to 5.004_08 patch as an example.

	# unpack perl5.004_07/
	gzip -d -c perl5.004_07.tar.gz | tar -xf -
	# unpack perl5.004_08/
	gzip -d -c perl5.004_08.tar.gz | tar -xf -
	makepatch perl5.004_07 perl5.004_08 > perl5.004_08.pat

Makepatch will automatically generate appropriate B<rm> commands to remove
deleted files.  Unfortunately, it will not correctly set permissions
for newly created files, so you may have to do so manually.  For example,
patch 5.003_04 created a new test F<t/op/gv.t> which needs to be executable,
so at the top of the patch, I inserted the following lines:

	# Make a new test
	touch t/op/gv.t
	chmod +x t/opt/gv.t

Now, of course, my patch is now wrong because makepatch didn't know I
was going to do that command, and it patched against /dev/null.

So, what I do is sort out all such shell commands that need to be in the
patch (including possible mv-ing of files, if needed) and put that in the
shell commands at the top of the patch.  Next, I delete all the patch parts
of perl5.004_08.pat, leaving just the shell commands.  Then, I do the
following:

	cd perl5.004_07
	sh ../perl5.004_08.pat
	cd ..
	makepatch perl5.004_07 perl5.004_08 >> perl5.004_08.pat

(Note the append to preserve my shell commands.)
Now, my patch will line up with what the end users are going to do.

=head2 Testing your patch

It seems obvious, but be sure to test your patch.  That is, verify that
it produces exactly the same thing as your full distribution.

	rm -rf perl5.004_07
	gzip -d -c perl5.004_07.tar.gz | tar -xf -
	cd perl5.004_07
	sh ../perl5.004_08.pat
	patch -p1 -N < ../perl5.004_08.pat
	cd ..
	gdiff -r perl5.004_07 perl5.004_08

where B<gdiff> is GNU diff.  Other diff's may also do recursive checking.

=head2 More testing

Again, it's obvious, but you should test your new version as widely as you
can.  You can be sure you'll hear about it quickly if your version doesn't
work on both ANSI and pre-ANSI compilers, and on common systems such as
SunOS 4.1.[34], Solaris, and Linux.

If your changes include conditional code, try to test the different
branches as thoroughly as you can.  For example, if your system
supports dynamic loading, you can also test static loading with

	sh Configure -Uusedl

You can also hand-tweak your config.h to try out different #ifdef
branches.

=head2 Other tests

=over 4

=item gcc -ansi -pedantic

Configure -Dgccansipedantic [ -Dcc=gcc ] will enable (via the cflags script,
not $Config{ccflags}) the gcc strict ANSI C flags -ansi and -pedantic for
the compilation of the core files on platforms where it knows it can
do so (like Linux, see cflags.SH for the full list), and on some
platforms only one (Solaris can do only -pedantic, not -ansi).
The flag -DPERL_GCC_PEDANTIC also gets added, since gcc does not add
any internal cpp flag to signify that -pedantic is being used, as it
does for -ansi (__STRICT_ANSI__).

Note that the -ansi and -pedantic are enabled only for version 3 (and
later) of gcc, since even gcc version 2.95.4 finds lots of seemingly
false "value computed not used" errors from Perl.

The -ansi and -pedantic are useful in catching at least the following
nonportable practices:

=over 4

=item *

gcc-specific extensions

=item *

lvalue casts

=item *

// C++ comments

=item *

enum trailing commas

=back

The -Dgccansipedantic should be used only when cleaning up the code,
not for production builds, since otherwise gcc cannot inline certain
things.

=back

=head1 Common Gotchas

=over 4

=item Probably Prefer POSIX

It's often the case that you'll need to choose whether to do
something the BSD-ish way or the POSIX-ish way.  It's usually not
a big problem when the two systems use different names for similar
functions, such as memcmp() and bcmp().  The perl.h header file
handles these by appropriate #defines, selecting the POSIX mem*()
functions if available, but falling back on the b*() functions, if
need be.

More serious is the case where some brilliant person decided to
use the same function name but give it a different meaning or
calling sequence :-).  getpgrp() and setpgrp() come to mind.
These are a real problem on systems that aim for conformance to
one standard (e.g. POSIX), but still try to support the other way
of doing things (e.g. BSD).  My general advice (still not really
implemented in the source) is to do something like the following.
Suppose there are two alternative versions, fooPOSIX() and
fooBSD().

    #ifdef HAS_FOOPOSIX
	/* use fooPOSIX(); */
    #else
    #  ifdef HAS_FOOBSD
	/* try to emulate fooPOSIX() with fooBSD();
	   perhaps with the following:  */
    #    define fooPOSIX fooBSD
    #  else
    #  /* Uh, oh.  We have to supply our own. */
    #    define fooPOSIX Perl_fooPOSIX
    #  endif
    #endif

=item Think positively

If you need to add an #ifdef test, it is usually easier to follow if you
think positively, e.g.

	#ifdef HAS_NEATO_FEATURE
	    /* use neato feature */
	#else
	    /* use some fallback mechanism */
	#endif

rather than the more impenetrable

	#ifndef MISSING_NEATO_FEATURE
	    /* Not missing it, so we must have it, so use it */
	#else
	    /* Are missing it, so fall back on something else. */
	#endif

Of course for this toy example, there's not much difference.  But when
the #ifdef's start spanning a couple of screen fulls, and the #else's
are marked something like

	#else /* !MISSING_NEATO_FEATURE */

I find it easy to get lost.

=item Providing Missing Functions -- Problem

Not all systems have all the neat functions you might want or need, so
you might decide to be helpful and provide an emulation.  This is
sound in theory and very kind of you, but please be careful about what
you name the function.  Let me use the C<pause()> function as an
illustration.

Perl5.003 has the following in F<perl.h>

    #ifndef HAS_PAUSE
    #define pause() sleep((32767<<16)+32767)
    #endif

Configure sets HAS_PAUSE if the system has the pause() function, so
this #define only kicks in if the pause() function is missing.
Nice idea, right?

Unfortunately, some systems apparently have a prototype for pause()
in F<unistd.h>, but don't actually have the function in the library.
(Or maybe they do have it in a library we're not using.)

Thus, the compiler sees something like

    extern int pause(void);
    /* . . . */
    #define pause() sleep((32767<<16)+32767)

and dies with an error message.  (Some compilers don't mind this;
others apparently do.)

To work around this, 5.003_03 and later have the following in perl.h:

    /* Some unistd.h's give a prototype for pause() even though
       HAS_PAUSE ends up undefined.  This causes the #define
       below to be rejected by the compiler.  Sigh.
    */
    #ifdef HAS_PAUSE
    #  define Pause	pause
    #else
    #  define Pause() sleep((32767<<16)+32767)
    #endif

This works.

The curious reader may wonder why I didn't do the following in
F<util.c> instead:

    #ifndef HAS_PAUSE
    void pause()
    {
    sleep((32767<<16)+32767);
    }
    #endif

That is, since the function is missing, just provide it.
Then things would probably be been alright, it would seem.

Well, almost.  It could be made to work.  The problem arises from the
conflicting needs of dynamic loading and namespace protection.

For dynamic loading to work on AIX (and VMS) we need to provide a list
of symbols to be exported.  This is done by the script F<perl_exp.SH>,
which reads F<embed.fnc>.  Thus, the C<pause>
symbol would have to be added to F<embed.fnc>  So far, so good.

On the other hand, one of the goals of Perl5 is to make it easy to
either extend or embed perl and link it with other libraries.  This
means we have to be careful to keep the visible namespace "clean".
That is, we don't want perl's global variables to conflict with
those in the other application library.  Although this work is still
in progress, the way it is currently done is via the F<embed.h> file.
This file is built from the F<embed.fnc> file,
since those files already list the globally visible symbols.  If we
had added C<pause> to F<embed.fnc>, then F<embed.h> would contain the
line

    #define pause	Perl_pause

and calls to C<pause> in the perl sources would now point to
C<Perl_pause>.  Now, when B<ld> is run to build the F<perl> executable,
it will go looking for C<perl_pause>, which probably won't exist in any
of the standard libraries.  Thus the build of perl will fail.

Those systems where C<HAS_PAUSE> is not defined would be ok, however,
since they would get a C<Perl_pause> function in util.c.  The rest of
the world would be in trouble.

And yes, this scenario has happened.  On SCO, the function C<chsize>
is available.  (I think it's in F<-lx>, the Xenix compatibility
library.)  Since the perl4 days (and possibly before), Perl has
included a C<chsize> function that gets called something akin to

    #ifndef HAS_CHSIZE
    I32 chsize(fd, length)
    /*  . . . */
    #endif

When 5.003 added

    #define chsize	Perl_chsize

to F<embed.h>, the compile started failing on SCO systems.

The "fix" is to give the function a different name.  The one
implemented in 5.003_05 isn't optimal, but here's what was done:

    #ifdef HAS_CHSIZE
    # ifdef my_chsize      /* Probably #defined to Perl_my_chsize */
    #   undef my_chsize    /* in embed.h */
    # endif
    # define my_chsize chsize
    #endif

My explanatory comment in patch 5.003_05 said:

    Undef and then re-define my_chsize from Perl_my_chsize to
    just plain chsize if this system HAS_CHSIZE.  This probably only
    applies to SCO.  This shows the perils of having internal
    functions with the same name as external library functions :-).

Now, we can safely put C<my_chsize> in C<embed.fnc>, export it, and
hide it with F<embed.h>.

To be consistent with what I did for C<pause>, I probably should have
called the new function C<Chsize>, rather than C<my_chsize>.
However, the perl sources are quite inconsistent on this (Consider
New, Mymalloc, and Myremalloc, to name just a few.)

There is a problem with this fix, however, in that C<Perl_chsize>
was available as a F<libperl.a> library function in 5.003, but it
isn't available any more (as of 5.003_07).  This means that we've
broken binary compatibility.  This is not good.

=item Providing missing functions -- some ideas

We currently don't have a standard way of handling such missing
function names.  Right now, I'm effectively thinking aloud about a
solution.  Some day, I'll try to formally propose a solution.

Part of the problem is that we want to have some functions listed as
exported but not have their names mangled by embed.h or possibly
conflict with names in standard system headers.  We actually already
have such a list at the end of F<perl_exp.SH> (though that list is
out-of-date):

    # extra globals not included above.
    cat <<END >> perl.exp
    perl_init_ext
    perl_init_fold
    perl_init_i18nl14n
    perl_alloc
    perl_construct
    perl_destruct
    perl_free
    perl_parse
    perl_run
    perl_get_sv
    perl_get_av
    perl_get_hv
    perl_get_cv
    perl_call_argv
    perl_call_pv
    perl_call_method
    perl_call_sv
    perl_requirepv
    safecalloc
    safemalloc
    saferealloc
    safefree

This still needs much thought, but I'm inclined to think that one
possible solution is to prefix all such functions with C<perl_> in the
source and list them along with the other C<perl_*> functions in
F<perl_exp.SH>.

Thus, for C<chsize>, we'd do something like the following:

    /* in perl.h */
    #ifdef HAS_CHSIZE
    #  define perl_chsize chsize
    #endif

then in some file (e.g. F<util.c> or F<doio.c>) do

    #ifndef HAS_CHSIZE
    I32 perl_chsize(fd, length)
    /* implement the function here . . . */
    #endif

Alternatively, we could just always use C<chsize> everywhere and move
C<chsize> from F<embed.fnc> to the end of F<perl_exp.SH>.  That would
probably be fine as long as our C<chsize> function agreed with all the
C<chsize> function prototypes in the various systems we'll be using.
As long as the prototypes in actual use don't vary that much, this is
probably a good alternative.  (As a counter-example, note how Configure
and perl have to go through hoops to find and use get Malloc_t and
Free_t for C<malloc> and C<free>.)

At the moment, this latter option is what I tend to prefer.

=item All the world's a VAX

Sorry, showing my age:-).  Still, all the world is not BSD 4.[34],
SVR4, or POSIX.  Be aware that SVR3-derived systems are still quite
common (do you have any idea how many systems run SCO?)  If you don't
have a bunch of v7 manuals handy, the metaconfig units (by default
installed in F</usr/local/lib/dist/U>) are a good resource to look at
for portability.

=back

=head1 Miscellaneous Topics

=head2 Autoconf

Why does perl use a metaconfig-generated Configure script instead of an
autoconf-generated configure script?

Metaconfig and autoconf are two tools with very similar purposes.
Metaconfig is actually the older of the two, and was originally written
by Larry Wall, while autoconf is probably now used in a wider variety of
packages.  The autoconf info file discusses the history of autoconf and
how it came to be.  The curious reader is referred there for further
information.

Overall, both tools are quite good, I think, and the choice of which one
to use could be argued either way.  In March, 1994, when I was just
starting to work on Configure support for Perl5, I considered both
autoconf and metaconfig, and eventually decided to use metaconfig for the
following reasons:

=over 4

=item Compatibility with Perl4

Perl4 used metaconfig, so many of the #ifdef's were already set up for
metaconfig.  Of course metaconfig had evolved some since Perl4's days,
but not so much that it posed any serious problems.

=item Metaconfig worked for me

My system at the time was Interactive 2.2, an SVR3.2/386 derivative that
also had some POSIX support.  Metaconfig-generated Configure scripts
worked fine for me on that system.  On the other hand, autoconf-generated
scripts usually didn't.  (They did come quite close, though, in some
cases.)  At the time, I actually fetched a large number of GNU packages
and checked.  Not a single one configured and compiled correctly
out-of-the-box with the system's cc compiler.

=item Configure can be interactive

With both autoconf and metaconfig, if the script works, everything is
fine.  However, one of my main problems with autoconf-generated scripts
was that if it guessed wrong about something, it could be B<very> hard to
go back and fix it.  For example, autoconf always insisted on passing the
-Xp flag to cc (to turn on POSIX behavior), even when that wasn't what I
wanted or needed for that package.  There was no way short of editing the
configure script to turn this off.  You couldn't just edit the resulting
Makefile at the end because the -Xp flag influenced a number of other
configure tests.

Metaconfig's Configure scripts, on the other hand, can be interactive.
Thus if Configure is guessing things incorrectly, you can go back and fix
them.  This isn't as important now as it was when we were actively
developing Configure support for new features such as dynamic loading,
but it's still useful occasionally.

=item GPL

At the time, autoconf-generated scripts were covered under the GNU Public
License, and hence weren't suitable for inclusion with Perl, which has a
different licensing policy.  (Autoconf's licensing has since changed.)

=item Modularity

Metaconfig builds up Configure from a collection of discrete pieces
called "units".  You can override the standard behavior by supplying your
own unit.  With autoconf, you have to patch the standard files instead.
I find the metaconfig "unit" method easier to work with.  Others
may find metaconfig's units clumsy to work with.

=back

=head2 Why isn't there a directory to override Perl's library?

Mainly because no one's gotten around to making one.  Note that
"making one"  involves changing perl.c, Configure, config_h.SH (and
associated files, see above), and I<documenting> it all in the
INSTALL file.

Apparently, most folks who want to override one of the standard library
files simply do it by overwriting the standard library files.

=head2 APPLLIB

In the perl.c sources, you'll find an undocumented APPLLIB_EXP
variable, sort of like PRIVLIB_EXP and ARCHLIB_EXP (which are
documented in config_h.SH).  Here's what APPLLIB_EXP is for, from
a mail message from Larry:

    The main intent of APPLLIB_EXP is for folks who want to send out a
    version of Perl embedded in their product.  They would set the
    symbol to be the name of the library containing the files needed
    to run or to support their particular application.  This works at
    the "override" level to make sure they get their own versions of
    any library code that they absolutely must have configuration
    control over.

    As such, I don't see any conflict with a sysadmin using it for a
    override-ish sort of thing, when installing a generic Perl.  It
    should probably have been named something to do with overriding
    though.  Since it's undocumented we could still change it...  :-)

Given that it's already there, you can use it to override distribution modules.
One way to do that is to add

	ccflags="$ccflags -DAPPLLIB_EXP=\"/my/override\""

to your config.over file.  (You have to be particularly careful to get the
double quotes in.  APPLLIB_EXP must be a valid C string.  It might
actually be easier to just #define it yourself in perl.c.)

Then perl.c will put /my/override ahead of ARCHLIB and PRIVLIB.  Perl will
also search architecture-specific and version-specific subdirectories of
APPLLIB_EXP.

=head2 Shared libperl.so location

Why isn't the shared libperl.so installed in /usr/lib/ along
with "all the other" shared libraries?  Instead, it is installed
in $archlib, which is typically something like

	/usr/local/lib/perl5/archname/5.00404

and is architecture- and version-specific.

The basic reason why a shared libperl.so gets put in $archlib is so that
you can have more than one version of perl on the system at the same time,
and have each refer to its own libperl.so.

Three examples might help.  All of these work now; none would work if you
put libperl.so in /usr/lib.

=over

=item 1.

Suppose you want to have both threaded and non-threaded perl versions
around.  Configure will name both perl libraries "libperl.so" (so that
you can link to them with -lperl).  The perl binaries tell them apart
by having looking in the appropriate $archlib directories.

=item 2.

Suppose you have perl5.004_04 installed and you want to try to compile
it again, perhaps with different options or after applying a patch.
If you already have libperl.so installed in /usr/lib/, then it may be
either difficult or impossible to get ld.so to find the new libperl.so
that you're trying to build.  If, instead, libperl.so is tucked away in
$archlib, then you can always just change $archlib in the current perl
you're trying to build so that ld.so won't find your old libperl.so.
(The INSTALL file suggests you do this when building a debugging perl.)

=item 3.

The shared perl library is not a "well-behaved" shared library with
proper major and minor version numbers, so you can't necessarily
have perl5.004_04 and perl5.004_05 installed simultaneously.  Suppose
perl5.004_04 were to install /usr/lib/libperl.so.4.4, and perl5.004_05
were to install /usr/lib/libperl.so.4.5.  Now, when you try to run
perl5.004_04, ld.so might try to load libperl.so.4.5, since it has
the right "major version" number.  If this works at all, it almost
certainly defeats the reason for keeping perl5.004_04 around.  Worse,
with development subversions, you certainly can't guarantee that
libperl.so.4.4 and libperl.so.4.55 will be compatible.

Anyway, all this leads to quite obscure failures that are sure to drive
casual users crazy.  Even experienced users will get confused :-).  Upon
reflection, I'd say leave libperl.so in $archlib.

=back

=head2 Indentation style

Over the years Perl has become a mishmash of
various indentation styles, but the original "Larry style" can
probably be restored with (GNU) indent somewhat like this:

    indent -kr -nce -psl -sc

A more ambitious solution would also specify a list of Perl specific
types with -TSV -TAV -THV .. -TMAGIC -TPerlIO ... but that list would
be quite ungainly.  Also note that GNU indent also doesn't do aligning
of consecutive assignments, which would truly wreck the layout in
places like sv.c:Perl_sv_upgrade() or sv.c:Perl_clone_using().
Similarly nicely aligned &&s, ||s and ==s would not be respected.

=head1 Upload Your Work to CPAN

You can upload your work to CPAN if you have a CPAN id.  Check out
L<http://www.cpan.org/modules/04pause.html> for information on
_PAUSE_, the Perl Author's Upload Server.

I typically upload both the patch file, e.g. F<perl5.004_08.pat.gz>
and the full tar file, e.g. F<perl5.004_08.tar.gz>.

If you want your patch to appear in the F<src/5.0/unsupported>
directory on CPAN, send e-mail to the CPAN master librarian.  (Check
out http://www.cpan.org/CPAN.html ).

=head1 Help Save the World

You should definitely announce your patch on the perl5-porters list.
You should also consider announcing your patch on
comp.lang.perl.announce, though you should make it quite clear that a
subversion is not a production release, and be prepared to deal with
people who will not read your disclaimer.

=head1 Todo

Here, in no particular order, are some Configure and build-related
items that merit consideration.  This list isn't exhaustive, it's just
what I came up with off the top of my head.

=head2 Adding missing library functions to Perl

The perl Configure script automatically determines which headers and
functions you have available on your system and arranges for them to be
included in the compilation and linking process.  Occasionally, when porting
perl to an operating system for the first time, you may find that the
operating system is missing a key function.  While perl may still build
without this function, no perl program will be able to reference the missing
function.  You may be able to write the missing function yourself, or you
may be able to find the missing function in the distribution files for
another software package.  In this case, you need to instruct the perl
configure-and-build process to use your function.  Perform these steps.

=over 3

=item *

Code and test the function you wish to add.  Test it carefully; you will
have a much easier time debugging your code independently than when it is a
part of perl.

=item *

Here is an implementation of the POSIX truncate function for an operating
system (VOS) that does not supply one, but which does supply the ftruncate()
function.

  /* Beginning of modification history */
  /* Written 02-01-02 by Nick Ing-Simmons (nick@@ing-simmons.net) */
  /* End of modification history */

  /* VOS doesn't supply a truncate function, so we build one up
     from the available POSIX functions.  */

  #include <fcntl.h>
  #include <sys/types.h>
  #include <unistd.h>

  int
  truncate(const char *path, off_t len)
  {
   int fd = open(path,O_WRONLY);
   int code = -1;
   if (fd >= 0) {
     code = ftruncate(fd,len);
     close(fd);
   }
   return code;
  }

Place this file into a subdirectory that has the same name as the operating
system. This file is named perl/vos/vos.c

=item *

If your operating system has a hints file (in perl/hints/XXX.sh for an
operating system named XXX), then start with it.  If your operating system
has no hints file, then create one.  You can use a hints file for a similar
operating system, if one exists, as a template.

=item *

Add lines like the following to your hints file. The first line
(d_truncate="define") instructs Configure that the truncate() function
exists. The second line (archobjs="vos.o") instructs the makefiles that the
perl executable depends on the existence of a file named "vos.o".  (Make
will automatically look for "vos.c" and compile it with the same options as
the perl source code).  The final line ("test -h...") adds a symbolic link
to the top-level directory so that make can find vos.c.  Of course, you
should use your own operating system name for the source file of extensions,
not "vos.c".

  # VOS does not have truncate() but we supply one in vos.c
  d_truncate="define"
  archobjs="vos.o"

  # Help gmake find vos.c
  test -h vos.c || ln -s vos/vos.c vos.c

The hints file is a series of shell commands that are run in the top-level
directory (the "perl" directory).  Thus, these commands are simply executed
by Configure at an appropriate place during its execution.

=item *

At this point, you can run the Configure script and rebuild perl.  Carefully
test the newly-built perl to ensure that normal paths, and error paths,
behave as you expect.

=back

=head2 Good ideas waiting for round tuits

=over 4

=item Configure -Dsrc=/blah/blah

We should be able to emulate B<configure --srcdir>.  Tom Tromey
tromey@@creche.cygnus.com has submitted some patches to
the dist-users mailing list along these lines.  They have been folded
back into the main distribution, but various parts of the perl
Configure/build/install process still assume src='.'.

=item Hint file fixes

Various hint files work around Configure problems.  We ought to fix
Configure so that most of them aren't needed.

=item Hint file information

Some of the hint file information (particularly dynamic loading stuff)
ought to be fed back into the main metaconfig distribution.

=back

=head2 Probably good ideas waiting for round tuits

=over 4

=item GNU configure --options

I've received sensible suggestions for --exec_prefix and other
GNU configure --options.  It's not always obvious exactly what is
intended, but this merits investigation.

=item Try gcc if cc fails

Currently, we just give up.

=item bypassing safe*alloc wrappers

On some systems, it may be safe to call the system malloc directly
without going through the util.c safe* layers.  (Such systems would
accept free(0), for example.)  This might be a time-saver for systems
that already have a good malloc.  (Recent Linux libc's apparently have
a nice malloc that is well-tuned for the system.)

=back

=head2 Vague possibilities

=over 4

=item gconvert replacement

Maybe include a replacement function that doesn't lose data in rare
cases of coercion between string and numerical values.

=item Improve makedepend

The current makedepend process is clunky and annoyingly slow, but it
works for most folks.  Alas, it assumes that there is a filename
$firstmakefile that the B<make> command will try to use before it uses
F<Makefile>.  Such may not be the case for all B<make> commands,
particularly those on non-Unix systems.

Probably some variant of the BSD F<.depend> file will be useful.
We ought to check how other packages do this, if they do it at all.
We could probably pre-generate the dependencies (with the exception of
malloc.o, which could probably be determined at F<Makefile.SH>
extraction time.

=item GNU Makefile standard targets

GNU software generally has standardized Makefile targets.  Unless we
have good reason to do otherwise, I see no reason not to support them.

=item File locking

Somehow, straighten out, document, and implement lockf(), flock(),
and/or fcntl() file locking.  It's a mess.  See $d_fcntl_can_lock
in recent config.sh files though.

=back

=head2 Copyright Issues

The following is based on the consensus of a couple of IPR lawyers,
but it is of course not a legally binding statement, just a common
sense summary.

=over 4

=item *

Tacking on copyright statements is unnecessary to begin with because
of the Berne convention.  But assuming you want to go ahead...

=item *

The right form of a copyright statement is

	Copyright (C) Year, Year, ... by Someone

The (C) is not required everywhere but it doesn't hurt and in certain
jurisdictions it is required, so let's leave it in.  (Yes, it's true
that in some jurisdictions the "(C)" is not legally binding, one should
use the true ringed-C.  But we don't have that character available for
Perl's source code.)

The years must be listed out separately.  Year-Year is not correct.
Only the years when the piece has changed 'significantly' may be added.

=item *

One cannot give away one's copyright trivially.  One can give one's
copyright away by using public domain, but even that requires a little
bit more than just saying 'this is in public domain'.  (What it
exactly requires depends on your jurisdiction.)  But barring public
domain, one cannot "transfer" one's copyright to another person or
entity.  In the context of software, it means that contributors cannot
give away their copyright or "transfer" it to the "owner" of the software.

Also remember that in many cases if you are employed by someone,
your work may be copyrighted to your employer, even when you are
contributing on your own time (this all depends on too many things
to list here).  But the bottom line is that you definitely can't give
away a copyright you may not even have.

What is possible, however, is that the software can simply state

	Copyright (C) Year, Year, ... by Someone and others

and then list the "others" somewhere in the distribution.
And this is exactly what Perl does.  (The "somewhere" is
AUTHORS and the Changes* files.)

=item *

Split files, merged files, and generated files are problematic.
The rule of thumb: in split files, copy the copyright years of
the original file to all the new files; in merged files make
an union of the copyright years of all the old files; in generated
files propagate the copyright years of the generating file(s).

=item *

The files of Perl source code distribution do carry a lot of
copyrights, by various people.  (There are many copyrights embedded in
perl.c, for example.)  The most straightforward thing for pumpkings to
do is to simply update Larry's copyrights at the beginning of the
*.[hcy], *.pl, and README files, and leave all other
copyrights alone.  Doing more than that requires quite a bit of tracking. 

=back

=head1 AUTHORS

Original author:  Andy Dougherty doughera@@lafayette.edu .
Additions by Chip Salzenberg chip@@perl.com and 
Tim Bunce Tim.Bunce@@ig.co.uk .

All opinions expressed herein are those of the authorZ<>(s).

=head1 LAST MODIFIED

2009-07-08-01 Jesse Vincent
@


1.20
log
@Fix merge issues, remove excess files - match perl-5.24.2 dist

OK bluhm@@, Reads ok sthen@@
@
text
@d543 1
a543 1
	gzip -d -c perl5.004_07.tar.gz | tar -xof -
d545 1
a545 1
	gzip -d -c perl5.004_08.tar.gz | tar -xof -
@


1.19
log
@Apply local patches - perl-5.24.1
@
text
@d543 1
a543 1
	gzip -d -c perl5.004_07.tar.gz | tar -xf -
d545 1
a545 1
	gzip -d -c perl5.004_08.tar.gz | tar -xf -
@


1.18
log
@Fix merge issues, remove excess files - match perl-5.24.1 dist
@
text
@d543 1
a543 1
	gzip -d -c perl5.004_07.tar.gz | tar -xof -
d545 1
a545 1
	gzip -d -c perl5.004_08.tar.gz | tar -xof -
@


1.17
log
@Apply local patches, remove excess files - perl-5.20.2
@
text
@d543 1
a543 1
	gzip -d -c perl5.004_07.tar.gz | tar -xf -
d545 1
a545 1
	gzip -d -c perl5.004_08.tar.gz | tar -xf -
a1267 6
=item make clean

Currently, B<make clean> isn't all that useful, though
B<make realclean> and B<make distclean> are.  This needs a bit of
thought and documentation before it gets cleaned up.

d1384 1
a1384 1
*.[hcy], x2p/*.[hcy], *.pl, and README files, and leave all other
@


1.16
log
@Fix merge issues, remove excess files - match perl-5.20.2 dist
@
text
@d543 1
a543 1
	gzip -d -c perl5.004_07.tar.gz | tar -xof -
d545 1
a545 1
	gzip -d -c perl5.004_08.tar.gz | tar -xof -
@


1.15
log
@Apply local patches to perl-5.20.1

ok deraadt@@ sthen@@ espie@@ miod@@
@
text
@d543 1
a543 1
	gzip -d -c perl5.004_07.tar.gz | tar -xf -
d545 1
a545 1
	gzip -d -c perl5.004_08.tar.gz | tar -xf -
@


1.14
log
@Fix merge conflicts, remove extra files, match upstream perl-5.20.1

ok deraadt@@ sthen@@ espie@@ miod@@
@
text
@d543 1
a543 1
	gzip -d -c perl5.004_07.tar.gz | tar -xof -
d545 1
a545 1
	gzip -d -c perl5.004_08.tar.gz | tar -xof -
@


1.13
log
@Merge perl-5.18.2 plus local patches, remove old files

OK espie@@ sthen@@ deraadt@@
@
text
@d543 1
a543 1
	gzip -d -c perl5.004_07.tar.gz | tar -xf -
d545 1
a545 1
	gzip -d -c perl5.004_08.tar.gz | tar -xf -
a653 36
=head1 Running Purify

Purify is a commercial tool that is helpful in identifying memory
overruns, wild pointers, memory leaks and other such badness.  Perl
must be compiled in a specific way for optimal testing with Purify.

Use the following commands to test perl with Purify:

	sh Configure -des -Doptimize=-g -Uusemymalloc -Dusemultiplicity \
	    -Accflags=-DPURIFY
	setenv PURIFYOPTIONS "-chain-length=25"
	make all pureperl
	cd t
	ln -s ../pureperl perl
	setenv PERL_DESTRUCT_LEVEL 2
	./perl TEST

Disabling Perl's malloc allows Purify to monitor allocations and leaks
more closely; using Perl's malloc will make Purify report most leaks
in the "potential" leaks category.  Enabling the multiplicity option
allows perl to clean up thoroughly when the interpreter shuts down, which
reduces the number of bogus leak reports from Purify.  The -DPURIFY
enables any Purify-specific debugging code in the sources.

Purify outputs messages in "Viewer" windows by default.  If you don't have
a windowing environment or if you simply want the Purify output to
unobtrusively go to a log file instead of to the interactive window,
use the following options instead:

	setenv PURIFYOPTIONS "-chain-length=25 -windows=no -log-file=perl.log \
	    -append-logfile=yes"

The only currently known leaks happen when there are compile-time errors
within eval or require.  (Fixing these is non-trivial, unfortunately, but
they must be fixed eventually.)

d826 2
a827 2
    # ifdef my_chsize  /* Probably #defined to Perl_my_chsize in embed.h */
    #   undef my_chsize
d834 4
a837 4
     Undef and then re-define my_chsize from Perl_my_chsize to
     just plain chsize if this system HAS_CHSIZE.  This probably only
     applies to SCO.  This shows the perils of having internal
     functions with the same name as external library functions :-).
d1020 6
a1025 5
    version of Perl embedded in their product.  They would set the symbol
    to be the name of the library containing the files needed to run or to
    support their particular application.  This works at the "override"
    level to make sure they get their own versions of any library code that
    they absolutely must have configuration control over.
d1028 3
a1030 3
    override-ish sort of thing, when installing a generic Perl.  It should
    probably have been named something to do with overriding though.  Since
    it's undocumented we could still change it...  :-)
@


1.12
log
@merge/resolve conflicts
(some more to do after this one)
@
text
@d1208 1
a1208 1
  
d1211 1
a1211 1
  
d1215 1
a1215 1
  
d1253 1
a1253 1
  
@


1.11
log
@merge in perl 5.12.2 plus local changes
@
text
@d94 1
a94 1
patch' entry in patchlevel.h. The distribution file contains the
d161 1
a161 1
There's a script, check83.pl, for keeping your nose 8.3-clean.
d194 2
a195 2
creating an "osish.h" (os2ish.h, vmsish.h, and so on) and including
that in perl.h.  If you have several machine-specific files (function
d247 1
a247 1
Porting/checkVERSION.pl script for checking this.
d290 2
a291 1
The F<embed.h>, F<keywords.h>, F<opcode.h>, and F<perltoc.pod> files
d316 2
a317 2
I've kept some of the subsections here for now, as they don't  direclty
eleate to building a release any more, but still contain what might be
d327 1
a327 1
will regenerate Configure and config_h.SH.  Much more information
d340 1
a340 1
F<mc_units-20070423.tgz> under http://www.cpan.org/authors/id/H/HM/HMBRAND/ .
d385 3
a387 3
config.sh and config_h.SH to a Unix system and running sh
config_h.SH.)  Vms uses configure.com to generate its own config.sh
and config.h.  If you want to add a new variable to config.sh check
d391 1
a391 1
The Porting/config.sh and Porting/config_H files are provided to
d393 1
a393 1
them up-to-date.  If you have changed config_h.SH, those changes must
d400 1
a400 1
plan9/config.plan9, though you should be quite careful in doing so if
d407 3
a409 3
If perly.y has been edited, it is necessary to run this target to rebuild
perly.h, perly.act and perly.tab. In fact this target just runs the Perl
script regen_perly.pl. Note that perly.c is I<not> rebuilt; this is just a
d415 1
a415 1
regen_perly.pl to work with your version of Bison. The important things
d417 2
a418 2
output into perly.act and perly.tab, and that the contents of those two
files, plus perly.h, are functionally equivalent to those produced by the
d453 1
a453 1
=head2 global.sym, interp.sym and perlio.sym
d456 1
a456 1
files and in perl_exp.SH to see what to do.
d460 1
a460 1
If you do change F<global.sym> or F<interp.sym>, think carefully about
d475 1
a475 1
new macros added to .h files (normally perl.h and XSUB.h, but others
d488 1
a488 1
The F<pod/perltodo.pod> file contains a roughly-categorized unordered
d515 1
a515 1
The Perl revision number appears as "perl5" in configure.com.
d523 1
a523 1
http://www.cpan.org/authors/Johan_Vromans/ .  There are a couple
d817 2
a818 2
which reads F<global.sym> and F<interp.sym>.  Thus, the C<pause>
symbol would have to be added to F<global.sym>  So far, so good.
d826 1
a826 1
This file is built from the F<global.sym> and F<interp.sym> files,
d828 1
a828 1
had added C<pause> to global.sym, then F<embed.h> would contain the
d875 1
a875 1
Now, we can safely put C<my_chsize> in F<global.sym>, export it, and
d945 1
a945 1
C<chsize> from F<global.sym> to the end of F<perl_exp.SH>.  That would
d1071 1
a1071 1
	
d1127 1
a1127 1
with development subversions, you certaily can't guarantee that
d1154 1
a1154 1
http://www.cpan.org/modules/04pause.html for information on
@


1.10
log
@Merge in perl 5.10.1
@
text
@d473 1
a473 1
F<ext/Devel-PPPort/PPPort.pm> needs to be synchronized to include all
@


1.9
log
@fix conflicts and merge in local changes to perl 5.10.0
@
text
@d312 2
a313 3
There really ought to be a 'make dist' target, but there isn't.
The 'dist' suite of tools also contains a number of tools that I haven't
learned how to use yet.  Some of them may make this all a bit easier.
d315 3
a317 41
Here are the steps I go through to prepare a patch & distribution.

Lots of it could doubtless be automated but isn't.  The Porting/makerel
(make release) perl script does now help automate some parts of it.

=head2 Announce your intentions

First, you should volunteer out loud to take the patch pumpkin.  It's
generally counter-productive to have multiple people working in secret
on the same thing.

At the same time, announce what you plan to do with the patch pumpkin,
to allow folks a chance to object or suggest alternatives, or do it for
you.  Naturally, the patch pumpkin holder ought to incorporate various
bug fixes and documentation improvements that are posted while he or
she has the pumpkin, but there might also be larger issues at stake.

One of the precepts of the subversion idea is that we shouldn't give
the patch pumpkin to anyone unless we have some idea what he or she
is going to do with it.

=head2 refresh pod/perltoc.pod

Presumably, you have done a full C<make> in your working source
directory.  Before you C<make spotless> (if you do), and if you have
changed any documentation in any module or pod file, change to the
F<pod> directory and run C<make toc>.

=head2 run installhtml to check the validity of the pod files

=head2 update patchlevel.h

Don't be shy about using the subversion number, even for a relatively
modest patch.  We've never even come close to using all 99 subversions,
and it's better to have a distinctive number for your patch.  If you
need feedback on your patch, go ahead and issue it and promise to
incorporate that feedback quickly (e.g. within 1 week) and send out a
second patch.

If you update the subversion number, you may need to change the version
number near the top of the F<Changes> file.
a349 10
Make sure the MANIFEST is up-to-date.  You can use dist's B<manicheck>
program for this.  You can also use

    perl -w -MExtUtils::Manifest=fullcheck -e fullcheck

Both commands will also list extra files in the directory that are not
listed in MANIFEST.

The MANIFEST is normally sorted.

a355 35
=head2 Check permissions

All the tests in the t/ directory ought to be executable.  The
main makefile used to do a 'chmod t/*/*.t', but that resulted in
a self-modifying distribution--something some users would strongly
prefer to avoid.  The F<t/TEST> script will check for this
and do the chmod if needed, but the tests still ought to be
executable.

In all, the following files should probably be executable:

    Configure
    configpm
    configure.gnu
    embed.pl
    installperl
    installman
    keywords.pl
    myconfig
    opcode.pl
    t/TEST
    t/*/*.t
    *.SH
    vms/ext/Stdio/test.pl
    vms/ext/filespec.t
    x2p/*.SH

Other things ought to be readable, at least :-).

Probably, the permissions for the files could be encoded in MANIFEST
somehow, but I'm reluctant to change MANIFEST itself because that
could break old scripts that use MANIFEST.

I seem to recall that some SVR3 systems kept some sort of file that listed
permissions for system files; something like that might be appropriate.
d424 2
a425 1
This target takes care of the regen_headers, and regen_pods targets.
a451 4
=head2 make regen_pods

Will run `make regen_pods` in the pod directory for indexing. 

d473 1
a473 1
F<ext/Devel/PPPort/PPPort.pm> needs to be synchronized to include all
a483 24
=head2 Changes

Be sure to update the F<Changes> file.  Try to include both an overall
summary as well as detailed descriptions of the changes.  Your
audience will include other developers and users, so describe
user-visible changes (if any) in terms they will understand, not in
code like "initialize foo variable in bar function".

There are differing opinions on whether the detailed descriptions
ought to go in the Changes file or whether they ought to be available
separately in the patch file (or both).  There is no disagreement that
detailed descriptions ought to be easily available somewhere.

If you update the subversion number in F<patchlevel.h>, you may need
to change the version number near the top of the F<Changes> file.

=head2 Bumping perl's version

If you bump perl's version, you will need to update a few things:
the L<perlhist> manpage for the date of release, the version number and
perldelta reference in the top level F<README> (and maybe the copyright
year too), the F<META.yml> file (generated via F<Porting/makemeta>, be
sure to run it with the current bleadperl), and the meta-info about
dual-lived modules in Module::Corelist (F<Porting/corelist.pl> does that).
a516 13
=head2 Making the new distribution

Suppose, for example, that you want to make version 5.004_08.  Then you can
do something like the following

	mkdir ../perl5.004_08
	awk '{print $1}' MANIFEST | cpio -pdm ../perl5.004_08
	cd ../
	tar cf perl5.004_08.tar perl5.004_08
	gzip --best perl5.004_08.tar

These steps, with extra checks, are automated by the Porting/makerel
script.
a1325 4
=item MacPerl

Get some of the Macintosh stuff folded back into the main distribution.

d1439 1
a1439 2
27-04-2007 H.Merijn Brand
$Id: pumpkin.pod,v 1.23 2000/01/13 19:45:13 doughera Released $
@


1.8
log
@merge in perl 5.8.8
@
text
@d367 15
a381 7
that comes with Perl's metaconfig units.  Perl's metaconfig units
should be available on CPAN.  A set of units that will work with
perl5.005 is in the file F<mc_units-5.005_00-01.tar.gz> under
http://www.cpan.org/authors/id/ANDYD/ .  The mc_units tar file
should be unpacked in your main perl source directory.  Note: those
units were for use with 5.005.  There may have been changes since then.
Check for later versions or contact perl5-porters@@perl.org to obtain a
d384 2
a385 2
Alternatively, do consider if the F<*ish.h> files might be a better
place for your changes.
a424 1
    perly.fixer
d488 1
a488 29
=head2 make run_byacc

If you have byacc-1.8.2 (available from CPAN as
http://www.cpan.org/src/misc/perl-byacc1.8.2.tar.gz), and if there have
been changes to F<perly.y>, you can regenerate the F<perly.c> file.  The
run_byacc makefile target does this by running byacc and then applying
some patches so that byacc dynamically allocates space, rather than
having fixed limits.  This patch is handled by the F<perly.fixer>
script.  Depending on the nature of the changes to F<perly.y>, you may
or may not have to hand-edit the patch to apply correctly.  If you do,
you should include the edited patch in the new distribution.  (If you
have byacc-1.9, the patch won't apply cleanly, notably changes to the printf
output statements.  F<perly.fixer> could be fixed to detect this.)

If C<perly.c> or C<perly.h> changes, make sure you run C<perl vms/vms_yfix.pl> 
to update the corresponding VMS files.  The run_byacc target in the Unix
Makefile takes care of this.  See also L<VMS-specific updates>.

Some additional notes from Larry on this:

Don't forget to regenerate perly_c.diff.

    byacc -d perly.y
    mv y.tab.c perly.c
    patch perly.c <perly_c.diff
    # manually apply any failed hunks
    diff -u perly.c.orig perly.c >perly_c.diff

One chunk of lines that often fails begins with
d490 13
a502 1
    #line 29 "perly.y"
d504 1
a504 8
and ends one line before

    #define YYERRCODE 256

This only happens when you add or remove a token type.  I suppose this
could be automated, but it doesn't happen very often nowadays.

Larry
d508 1
a508 2
This target takes care of the PERLYVMS, regen_headers, and regen_pods
targets.
d587 9
a624 4
If you have changed F<perly.y> or F<perly.c>, then you most probably want
to update F<vms/perly_{h,c}.vms> by running C<perl vms/vms_yfix.pl>, or
by running `make regen_all` which will run that script for you.

d729 1
a729 14
=over 4

=item CHECK_FORMAT

If you have gcc, you can test the correct use of printf-style
arguments.  Run C<Configure> with S<-Dccflags='-DCHECK_FORMAT
-Wformat'> (and S<-Dcc=gcc>, if you are not on a system where C<cc>
is C<gcc>) and run C<make>.  The compiler will produce warnings of
incorrect use of format arguments.  

As of perl 5.8.7, CHECK_FORMAT changes perl-defined formats
to obscure (but standard) formats, and then traps the obscure
format.  The resulting perl executable operates properly but 
you should not use the executable produced by this process.
a732 22
=item *
 
A more accurate approach is the following commands:

    make clean
    make all OPTIMIZE='-DCHECK_FORMAT -Wformat' >& make.log  
    perl -nwe 'print if /^\S+:/ and not /^make\b/' make.log

=item *

A more thorough approach to compiler warnings is

    make clean
    make miniperl OPTIMIZE=-O\ -DCHECK_FORMAT >& make.log
    make all OPTIMIZE=-O\ -DCHECK_FORMAT\ -Wall\ -Wno-unused\
			    -Wno-uninitialized >>& make.log
    perl -nwe 'print if /^\S+:/ and not /^make\b/' make.log

=back

(-Wformat support by Robin Barker.)

d1567 2
a1568 1
$Id: pumpkin.pod,v 1.7 2004/04/07 21:33:01 millert Exp $
@


1.7
log
@merge local changes into perl-5.8.3
@
text
@d459 1
a459 1
to config.sh and then propoagate them to a canned 'config.h' by any
d615 1
a615 1
can find champions for partiticular issues on the to-do list: an issue
a740 2
=head2 Other tests

d749 1
a749 3
incorrect use of format arguments.  CHECK_FORMAT changes perl-defined
formats to common formats, so DO NOT USE the executable produced by
this process.
d751 4
a754 1
A more accurate approach is the following commands:
d759 2
a760 2

build miniperl with -DCHECK_FORMAT 
d763 2
a764 1
    make miniperl OPTIMIZE=-DCHECK_FORMAT >& mini.log	
d768 1
a768 10
build a clean miniperl,
and build everything else from that with -DCHECK_FORMAT

    make clean
    make miniperl	
    make all OPTIMIZE='-DCHECK_FORMAT -Wformat' >& make.log  
		
=item *

clean up, and print warnings from the log files
d771 4
a774 2
    perl -nwe 'print if /^\S+:/ and not /^make\b/' \
	mini.log make.log
d860 1
a860 1
=head1 Common Gotcha's
a863 32
=item #elif

The '#elif' preprocessor directive is not understood on all systems.
Specifically, I know that Pyramids don't understand it.  Thus instead of the
simple

	#if defined(I_FOO)
	#  include <foo.h>
	#elif defined(I_BAR)
	#  include <bar.h>
	#else
	#  include <fubar.h>
	#endif

You have to do the more Byzantine

	#if defined(I_FOO)
	#  include <foo.h>
	#else
	#  if defined(I_BAR)
	#    include <bar.h>
	#  else
	#    include <fubar.h>
	#  endif
	#endif

Incidentally, whitespace between the leading '#' and the preprocessor
command is not guaranteed, but is very portable and you may use it freely.
I think it makes things a bit more readable, especially once things get
rather deeply nested.  I also think that things should almost never get
too deeply nested,  so it ought to be a moot point :-)

d1614 1
a1614 1
$Id: pumpkin.pod,v 1.6 2003/12/03 03:02:26 millert Exp $
@


1.6
log
@Resolve conflicts for perl 5.8.2, remove old files, and add OpenBSD-specific scaffolding
@
text
@d491 3
a493 5
you should include the edited patch in the new distribution.  If you
have byacc-1.9, the patch won't apply cleanly.  Changes to the printf
output statements mean the patch won't apply cleanly.  Long ago I
started to fix F<perly.fixer> to detect this, but I never completed the
task.
d496 2
a497 3
to update the corresponding VMS files.  This could be taken care of by 
the regen_all target in the Unix Makefile.  See also 
L<VMS-specific updates>.
d507 1
a507 1
    diff -c perly.c.orig perly.c >perly_c.diff
d575 13
d1653 1
a1653 1
$Id: pumpkin.pod,v 1.23 2000/01/13 19:45:13 doughera Released $
@


1.5
log
@Resolve conflicts, remove old files, merge local changes
@
text
@d46 1
a46 1
    http://www.rosat.mpe-garching.mpg.de/mailing-lists/perl-porters/
d106 1
a106 1
In the past it has been observed that pumkings tend to invent new
d162 2
d483 3
a485 2
If you have byacc-1.8.2 (available from CPAN), and if there have been
changes to F<perly.y>, you can regenerate the F<perly.c> file.  The
d596 7
a602 7
The F<Todo> file contains a roughly-catgorized unordered list of
aspects of Perl that could use enhancement, features that could be
added, areas that could be cleaned up, and so on.  During your term as
pumpkin-holder, you will probably address some of these issues, and
perhaps identify others which, while you decide not to address them
this time around, may be tackled in the future.  Update the file
reflect the situation as it stands when you hand over the pumpkin.
d608 1
a608 1
There are also some more porting-specific L<Todo> items later in this
d668 1
a668 1
	gzip -d -c perl5.004_07.tar.gz | tar -xof -
d670 1
a670 1
	gzip -d -c perl5.004_08.tar.gz | tar -xof -
d737 7
a743 5
To test the correct use of printf-style arguments, C<Configure> with
S<-Dccflags='-DCHECK_FORMAT -Wformat'> and run C<make>.  The compiler
will produce warning of incorrect use of format arguments.  CHECK_FORMAT
changes perl-defined formats to common formats, so DO NOT USE the executable
produced by this process. 
d777 42
d1266 2
a1267 4
Given that it's already there, you can use it to override
distribution modules.  If you do

	sh Configure -Dccflags='-DAPPLLIB_EXP=/my/override'
d1269 9
a1277 1
then perl.c will put /my/override ahead of ARCHLIB and PRIVLIB.
d1333 3
a1335 1
=item 4.
d1337 1
a1337 1
Indentation style: over the years Perl has become a mishmash of
a1349 2
=back

d1562 71
d1635 1
a1635 1
Original author:  Andy Dougherty doughera@@lafcol.lafayette.edu .
@


1.4
log
@merge in perl 5.6.1 with our local changes
@
text
@d3 1
a3 1
Pumpkin - Notes on handling the Perl Patch Pumpkin
d27 1
a27 1
http://www.perl.com/CPAN/README.html , which automatically points you to a
d161 1
d244 3
d353 3
d368 1
a368 1
http://www.perl.com/CPAN/authors/id/ANDYD/ .  The mc_units tar file
d507 1
a507 1
    diff -c2 perly.c.orig perly.c >perly_c.diff
d588 3
d645 1
a645 1
http://www.perl.com/CPAN/authors/Johan_Vromans/ .  There are a couple
d742 6
a747 5
    sh Configure -des -Dccflags=-Wformat ...
    make miniperl		# without -DCHECK_FORMAT
    perl -i.orig -pwe 's/-Wformat/-DCHECK_FORMAT $&/' config.sh
    sh Configure -S
    make >& make.log		# build from correct miniperl
d749 7
a755 2
    make miniperl >& mini.log	# build miniperl with -DCHECK_FORMAT 
    perl -nwe 'print if /^\S+:/ and not /^make\b/' mini.log make.log
d757 12
d788 1
a788 1
	setenv PERL_DESTRUCT_LEVEL 5
d1148 1
a1148 1
My system at the time was Interactive 2.2, a SVR3.2/386 derivative that
d1280 15
d1300 1
a1300 1
http://www.perl.com/CPAN/modules/04pause.html for information on
d1308 1
a1308 1
out http://www.perl.com/CPAN/CPAN.html ).
d1323 91
@


1.3
log
@perl-5.6.0 + local changes
@
text
@d61 1
a61 1
and amounts to C<$revision + $version/1000 + $subversion/1000000>.  This
d213 1
a213 1
The extension hints are written Perl (by the time they are used
d255 2
a256 1
to expect, is nice too.
d453 3
a455 1
config_h.SH.)
d466 1
a466 1
It may also be necessary to update win32/config.?c, vms/config.vms and
d487 4
a490 2
If C<perly.c> changes, make sure you run C<perl vms/vms_yfix.pl> to
update the corresponding VMS files.  See L<VMS-specific updates>.
d515 5
d545 4
d558 1
a558 1
souce and binary compatibility with older releases of perl.  That way,
d611 2
a612 1
to update F<vms/perly_{h,c}.vms> by running C<perl vms/vms_yfix.pl>.
d614 2
a615 3
The Perl version number appears in several places under F<vms>.
It is courteous to update these versions.  For example, if you are
making 5.004_42, replace "5.00441" with "5.00442".
d718 28
d1370 2
a1371 1
and/or fcntl() file locking.  It's a mess.
@


1.2
log
@perl5.005_03 (stock)
@
text
@d11 2
a12 2
This document attempts to begin to describe some of the
considerations involved in patching and maintaining perl.
d50 5
a54 6
Perl version numbers are floating point numbers, such as 5.004.
(Observations about the imprecision of floating point numbers for
representing reality probably have more relevance than you might
imagine :-) The major version number is 5 and the '004' is the
patchlevel.  (Questions such as whether or not '004' is really a minor
version number can safely be ignored.:)
d56 2
a57 2
The version number is available as the magic variable $],
and can be used in comparisons, e.g.
d59 4
a62 1
	print "You've got an old perl\n" if $] < 5.002;
d64 1
a64 1
You can also require particular version (or later) with
d66 1
a66 1
	use 5.002;
d68 1
a68 7
At some point in the future, we may need to decide what to call the
next big revision.  In the .package file used by metaconfig to
generate Configure, there are two variables that might be relevant:
$baserev=5.0 and $package=perl5.   At various times, I have suggested
we might change them to $baserev=5.1 and $package=perl5.1 if want
to signify a fairly major update.  Or, we might want to jump to perl6.
Let's worry about that problem when we get there.
d70 1
a70 1
=head2 Subversions
d72 1
a72 8
In addition, there may be "developer" sub-versions available.  These
are not official releases.  They may contain unstable experimental
features, and are subject to rapid change.  Such developer
sub-versions are numbered with sub-version numbers.  For example,
version 5.003_04 is the 4'th developer version built on top of
5.003.  It might include the _01, _02, and _03 changes, but it
also might not.  Sub-versions are allowed to be subversive. (But see
the next section for recent changes.)
d74 1
a74 2
These sub-versions can also be used as floating point numbers, so
you can do things such as
d76 1
a76 1
	print "You've got an unstable perl\n" if $] == 5.00303;
d78 4
a81 1
You can also require particular version (or later) with
d83 3
a85 4
	use 5.003_03;    # the "_" is optional

Sub-versions produced by the members of perl5-porters are usually
available on CPAN in the F<src/5.0/unsupported> directory.
d89 1
a89 8
As an experiment, starting with version 5.004, subversions _01 through
_49 will be reserved for bug-fix maintenance releases, and subversions
_50 through _99 will be available for unstable development versions.

The separate bug-fix track is being established to allow us an easy
way to distribute important bug fixes without waiting for the
developers to untangle all the other problems in the current
developer's release.
d94 18
a111 26
patch' entry in patchlevel.h.

Watch for announcements of maintenance subversions in
comp.lang.perl.announce.

The first rule of maintenance work is "First, do no harm."

=head2 Why such a complicated scheme?

Two reasons, really.  At least.

First, we need some way to identify and release collections of patches
that are known to have new features that need testing and exploration.  The
subversion scheme does that nicely while fitting into the
C<use 5.004;> mold.

Second, since most of the folks who help maintain perl do so on a
free-time voluntary basis, perl development does not proceed at a
precise pace, though it always seems to be moving ahead quickly.
We needed some way to pass around the "patch pumpkin" to allow
different people chances to work on different aspects of the
distribution without getting in each other's way.  It wouldn't be
constructive to have multiple people working on incompatible
implementations of the same idea.  Instead what was needed was
some kind of "baton" or "token" to pass around so everyone knew
whose turn was next.
d133 1
a133 1
=head1 Philosophical Issues in Patching Perl
d152 10
d184 82
d281 1
a281 1
=head2 Automate generation of derivative files
d289 8
a296 5
instead of patching these files directly.  However, very minor changes to
F<Configure> may be made in between major sync-ups with the metaconfig
units, which tends to be complicated operations.  But be careful, this
can quickly spiral out of control.  Running metaconfig is not really
hard.
d484 3
d596 2
a597 2
If you have changed F<perly.y>, then you may want to update
F<vms/perly_{h,c}.vms> by running C<perl vms/vms_yfix.pl>.
d704 36
a1119 27
=head2 @@INC search order

By default, the list of perl library directories in @@INC is the
following:

    $archlib
    $privlib
    $sitearch
    $sitelib

Specifically, on my Solaris/x86 system, I run
B<sh Configure -Dprefix=/opt/perl> and I have the following
directories:

    /opt/perl/lib/i86pc-solaris/5.00307
    /opt/perl/lib
    /opt/perl/lib/site_perl/i86pc-solaris
    /opt/perl/lib/site_perl

That is, perl's directories come first, followed by the site-specific
directories.

The site libraries come second to support the usage of extensions
across perl versions.  Read the relevant section in F<INSTALL> for
more information.  If we ever make $sitearch version-specific, this
topic could be revisited.

a1242 12
=item installprefix

I think we ought to support

    Configure -Dinstallprefix=/blah/blah

Currently, we support B<-Dprefix=/blah/blah>, but the changing the install
location has to be handled by something like the F<config.over> trick
described in F<INSTALL>.  AFS users also are treated specially.
We should probably duplicate the metaconfig prefix stuff for an
install prefix.

a1250 10
=item Directory for vendor-supplied modules?

If a vendor supplies perl, but wants to leave $siteperl and $sitearch
for the local user to use, where should the vendor put vendor-supplied
modules (such as Tk.so?)  If the vendor puts them in $archlib, then
they need to be updated each time the perl version is updated.
Perhaps we need a set of libries $vendorperl and $vendorarch that
track $apiversion (like the $sitexxx directories do) rather than
just $version (like the main perl directory).

a1260 41
=item Catch GNU Libc "Stub" functions

Some functions (such as lchown()) are present in libc, but are
unimplmented.  That is, they always fail and set errno=ENOSYS.

Thomas Bushnell provided the following sample code and the explanation
that follows:

    /* System header to define __stub macros and hopefully few prototypes,
	which can conflict with char FOO(); below.  */
    #include <assert.h>
    /* Override any gcc2 internal prototype to avoid an error.  */
    /* We use char because int might match the return type of a gcc2
	builtin and then its argument prototype would still apply.  */
    char FOO();

    int main() {

    /* The GNU C library defines this for functions which it implements
	to always fail with ENOSYS.  Some functions are actually named
	something starting with __ and the normal name is an alias.  */
    #if defined (__stub_FOO) || defined (__stub___FOO)
    choke me
    #else
    FOO();
    #endif

    ; return 0; }

The choice of <assert.h> is essentially arbitrary.  The GNU libc
macros are found in <gnu/stubs.h>.  You can include that file instead
of <assert.h> (which itself includes <gnu/stubs.h>) if you test for
its existence first.  <assert.h> is assumed to exist on every system,
which is why it's used here.  Any GNU libc header file will include
the stubs macros.  If either __stub_NAME or __stub___NAME is defined,
then the function doesn't actually exist.  Tests using <assert.h> work
on every system around.

The declaration of FOO is there to override builtin prototypes for
ANSI C functions.

d1342 1
a1342 1
$Id: pumpkin.pod,v 1.22 1998/07/22 16:33:55 doughera Released $
@


1.1
log
@perl 5.004_04
@
text
@d116 2
d222 1
a222 1
instead of patching these files directly.  However, minor changes to
d224 8
a231 1
units, which tends to be complicated operations.
d285 10
a294 10
will regenerate Configure and config_h.SH.  More information on
obtaining and running metaconfig is in the F<U/README> file that comes
with Perl's metaconfig units.  Perl's metaconfig units should be
available the same place you found this file.  On CPAN, look under my
directory F<authors/id/ANDYD/> for a file such as F<5.003_07-02.U.tar.gz>.
That file should be unpacked in your main perl source directory.  It
contains the files needed to run B<metaconfig> to reproduce Perl's
Configure script.  (Those units are for 5.003_07.  There have been
changes since then; please contact me if you want more recent
versions, and I will try to point you in the right direction.)
d309 1
a309 11
The MANIFEST is normally sorted, with one exception.  Perl includes
both a F<Configure> script and a F<configure> script.  The
F<configure> script is a front-end to the main F<Configure>, but
is there to aid folks who use autoconf-generated F<configure> files
for other software.  The problem is that F<Configure> and F<configure>
are the same on case-insensitive file systems, so I deliberately put
F<configure> first in the MANIFEST so that the extraction of
F<Configure> will overwrite F<configure> and leave you with the
correct script.  (The F<configure> script must also have write
permission for this to work, so it's the only file in the distribution
I normally have with write permission.)
d322 3
a324 2
prefer to avoid.  Probably, the F<t/TEST> script should check for this
and do the chmod if needed, but it doesn't currently.
d330 1
a330 1
    configure
a342 1
    vms/fndvers.com
d357 1
a357 3
changed Configure or config_h.SH at all.

=head2 Update config_H
d359 33
a391 6
The config_H file is provided to help those folks who can't run Configure.
It is important to keep it up-to-date.  If you have changed config_h.SH,
those changes must be reflected in config_H as well.  (The name config_H was
chosen to distinguish the file from config.h even on case-insensitive file
systems.)  Simply edit the existing config_H file; keep the first few
explanatory lines and then copy your new config.h below.
d393 1
a393 1
It may also be necessary to update vms/config.vms and
d416 1
a416 1
Don't forget to regenerate perly.c.diff.
d420 1
a420 1
    patch perly.c <perly.c.diff
d422 1
a422 1
    diff -c2 perly.c.orig perly.c >perly.c.diff
d494 17
d1074 56
d1173 1
a1173 1
=item Configure -Dsrcdir=/blah/blah
d1177 13
a1189 2
the dist-users mailing list along these lines.  Eventually, they ought
to get folded back into the main distribution.
d1201 41
a1286 6
=item long long

Can we support C<long long> on systems where C<long long> is larger
than what we've been using for C<IV>?  What if you can't C<sprintf>
a C<long long>?

d1323 1
a1323 1
$Id: pumpkin.pod,v 1.13 1997/08/28 18:26:40 doughera Released $
@


1.1.1.1
log
@perl5.005_03
@
text
@a115 2
The first rule of maintenance work is "First, do no harm."

d220 1
a220 1
instead of patching these files directly.  However, very minor changes to
d222 1
a222 8
units, which tends to be complicated operations.  But be careful, this
can quickly spiral out of control.  Running metaconfig is not really
hard.

Finally, the sample files in the F<Porting/> subdirectory are
generated automatically by the script F<U/mksample> included 
with the metaconfig units.  See L<"run metaconfig"> below for
information on obtaining the metaconfig units.
d276 10
a285 10
will regenerate Configure and config_h.SH.  Much more information
on obtaining and running metaconfig is in the F<U/README> file
that comes with Perl's metaconfig units.  Perl's metaconfig units
should be available on CPAN.  A set of units that will work with
perl5.005 is in the file F<mc_units-5.005_00-01.tar.gz> under
http://www.perl.com/CPAN/authors/id/ANDYD/ .  The mc_units tar file
should be unpacked in your main perl source directory.  Note: those
units were for use with 5.005.  There may have been changes since then.
Check for later versions or contact perl5-porters@@perl.org to obtain a
pointer to the current version.
d300 11
a310 1
The MANIFEST is normally sorted.
d323 2
a324 3
prefer to avoid.  The F<t/TEST> script will check for this
and do the chmod if needed, but the tests still ought to be
executable.
d330 1
a330 1
    configure.gnu
d343 1
d358 3
a360 1
changed Configure or config_h.SH at all.  I use the following command
d362 6
a367 33
    sh Configure -Dprefix=/opt/perl -Doptimize=-O -Dusethreads \
	-Dcf_by='yourname' \
	-Dcf_email='yourname@@yourhost.yourplace.com' \
	-Dperladmin='yourname@@yourhost.yourplace.com' \
	-Dmydomain='.yourplace.com' \
	-Dmyhostname='yourhost' \
	-des

=head2 Update Porting/config.sh and Porting/config_H

[XXX 
This section needs revision.  We're currently working on easing
the task of keeping the vms, win32, and plan9 config.sh info
up-to-date.  The plan is to use keep up-to-date 'canned' config.sh
files in the appropriate subdirectories and then generate 'canned'
config.h files for vms, win32, etc. from the generic config.sh file.
This is to ease maintenance.  When Configure gets updated, the parts
sometimes get scrambled around, and the changes in config_H can
sometimes be very hard to follow.  config.sh, on the other hand, can
safely be sorted, so it's easy to track (typically very small) changes
to config.sh and then propoagate them to a canned 'config.h' by any
number of means, including a perl script in win32/ or carrying 
config.sh and config_h.SH to a Unix system and running sh
config_h.SH.)
XXX]

The Porting/config.sh and Porting/config_H files are provided to
help those folks who can't run Configure.  It is important to keep
them up-to-date.  If you have changed config_h.SH, those changes must
be reflected in config_H as well.  (The name config_H was chosen to
distinguish the file from config.h even on case-insensitive file systems.)
Simply edit the existing config_H file; keep the first few explanatory
lines and then copy your new config.h below.
d369 1
a369 1
It may also be necessary to update win32/config.?c, vms/config.vms and
d392 1
a392 1
Don't forget to regenerate perly_c.diff.
d396 1
a396 1
    patch perly.c <perly_c.diff
d398 1
a398 1
    diff -c2 perly.c.orig perly.c >perly_c.diff
a469 17
=head2 Todo

The F<Todo> file contains a roughly-catgorized unordered list of
aspects of Perl that could use enhancement, features that could be
added, areas that could be cleaned up, and so on.  During your term as
pumpkin-holder, you will probably address some of these issues, and
perhaps identify others which, while you decide not to address them
this time around, may be tackled in the future.  Update the file
reflect the situation as it stands when you hand over the pumpkin.

You might like, early in your pumpkin-holding career, to see if you
can find champions for partiticular issues on the to-do list: an issue
owned is an issue more likely to be resolved.

There are also some more porting-specific L<Todo> items later in this
file.

a1032 56
=head2 Shared libperl.so location

Why isn't the shared libperl.so installed in /usr/lib/ along
with "all the other" shared libraries?  Instead, it is installed
in $archlib, which is typically something like

	/usr/local/lib/perl5/archname/5.00404

and is architecture- and version-specific.

The basic reason why a shared libperl.so gets put in $archlib is so that
you can have more than one version of perl on the system at the same time,
and have each refer to its own libperl.so.

Three examples might help.  All of these work now; none would work if you
put libperl.so in /usr/lib.

=over

=item 1.

Suppose you want to have both threaded and non-threaded perl versions
around.  Configure will name both perl libraries "libperl.so" (so that
you can link to them with -lperl).  The perl binaries tell them apart
by having looking in the appropriate $archlib directories.

=item 2.

Suppose you have perl5.004_04 installed and you want to try to compile
it again, perhaps with different options or after applying a patch.
If you already have libperl.so installed in /usr/lib/, then it may be
either difficult or impossible to get ld.so to find the new libperl.so
that you're trying to build.  If, instead, libperl.so is tucked away in
$archlib, then you can always just change $archlib in the current perl
you're trying to build so that ld.so won't find your old libperl.so.
(The INSTALL file suggests you do this when building a debugging perl.)

=item 3.

The shared perl library is not a "well-behaved" shared library with
proper major and minor version numbers, so you can't necessarily
have perl5.004_04 and perl5.004_05 installed simultaneously.  Suppose
perl5.004_04 were to install /usr/lib/libperl.so.4.4, and perl5.004_05
were to install /usr/lib/libperl.so.4.5.  Now, when you try to run
perl5.004_04, ld.so might try to load libperl.so.4.5, since it has
the right "major version" number.  If this works at all, it almost
certainly defeats the reason for keeping perl5.004_04 around.  Worse,
with development subversions, you certaily can't guarantee that
libperl.so.4.4 and libperl.so.4.55 will be compatible.

Anyway, all this leads to quite obscure failures that are sure to drive
casual users crazy.  Even experienced users will get confused :-).  Upon
reflection, I'd say leave libperl.so in $archlib.

=back

d1076 1
a1076 1
=item Configure -Dsrc=/blah/blah
d1080 2
a1081 13
the dist-users mailing list along these lines.  They have been folded
back into the main distribution, but various parts of the perl
Configure/build/install process still assume src='.'.

=item Directory for vendor-supplied modules?

If a vendor supplies perl, but wants to leave $siteperl and $sitearch
for the local user to use, where should the vendor put vendor-supplied
modules (such as Tk.so?)  If the vendor puts them in $archlib, then
they need to be updated each time the perl version is updated.
Perhaps we need a set of libries $vendorperl and $vendorarch that
track $apiversion (like the $sitexxx directories do) rather than
just $version (like the main perl directory).
a1092 41
=item Catch GNU Libc "Stub" functions

Some functions (such as lchown()) are present in libc, but are
unimplmented.  That is, they always fail and set errno=ENOSYS.

Thomas Bushnell provided the following sample code and the explanation
that follows:

    /* System header to define __stub macros and hopefully few prototypes,
	which can conflict with char FOO(); below.  */
    #include <assert.h>
    /* Override any gcc2 internal prototype to avoid an error.  */
    /* We use char because int might match the return type of a gcc2
	builtin and then its argument prototype would still apply.  */
    char FOO();

    int main() {

    /* The GNU C library defines this for functions which it implements
	to always fail with ENOSYS.  Some functions are actually named
	something starting with __ and the normal name is an alias.  */
    #if defined (__stub_FOO) || defined (__stub___FOO)
    choke me
    #else
    FOO();
    #endif

    ; return 0; }

The choice of <assert.h> is essentially arbitrary.  The GNU libc
macros are found in <gnu/stubs.h>.  You can include that file instead
of <assert.h> (which itself includes <gnu/stubs.h>) if you test for
its existence first.  <assert.h> is assumed to exist on every system,
which is why it's used here.  Any GNU libc header file will include
the stubs macros.  If either __stub_NAME or __stub___NAME is defined,
then the function doesn't actually exist.  Tests using <assert.h> work
on every system around.

The declaration of FOO is there to override builtin prototypes for
ANSI C functions.

d1138 6
d1180 1
a1180 1
$Id: pumpkin.pod,v 1.22 1998/07/22 16:33:55 doughera Released $
@


1.1.1.2
log
@virgin perl 5.6.0
@
text
@d11 2
a12 2
This document attempts to begin to describe some of the considerations
involved in patching, porting, and maintaining perl.
d50 6
a55 5
Beginning with v5.6.0, even versions will stand for maintenance releases
and odd versions for development releases, i.e., v5.6.x for maintenance
releases, and v5.7.x for development releases.  Before v5.6.0, subversions
_01 through _49 were reserved for bug-fix maintenance releases, and
subversions _50 through _99 for unstable development versions.
d57 2
a58 2
For example, in v5.6.1, the revision number is 5, the version is 6,
and 1 is the subversion.
d60 1
a60 4
For compatibility with the older numbering scheme the composite floating
point version number continues to be available as the magic variable $],
and amounts to C<$revision + $version/1000 + $subversion/1000000>.  This
can still be used in comparisons.
d62 1
a62 1
	print "You've got an old perl\n" if $] < 5.005_03;
d64 1
a64 1
In addition, the version is also available as a string in $^V.
d66 9
a74 1
	print "You've got a new perl\n" if $^V and $^V ge v5.6.0;
d76 8
a83 1
You can also require particular version (or later) with:
d85 2
a86 1
        use 5.006;
d88 1
a88 1
or using the new syntax available only from v5.6 onward:
d90 1
a90 1
	use v5.6.0;
d92 1
a92 4
At some point in the future, we may need to decide what to call the
next big revision.  In the .package file used by metaconfig to
generate Configure, there are two variables that might be relevant:
$baserev=5 and $package=perl5.
d94 2
a95 3
Perl releases produced by the members of perl5-porters are usually
available on CPAN in the F<src/5.0/maint> and F<src/5.0/devel>
directories.
d99 8
a106 1
The first rule of maintenance work is "First, do no harm."
d111 26
a136 18
patch' entry in patchlevel.h. The distribution file contains the
string C<MAINT_TRIAL> to make clear that the file is not meant for
public consumption.

In general, the names of official distribution files for the public
always match the regular expression:

    ^perl\d+\.(\d+)\.\d+(-MAINT_TRIAL_\d+)\.tar\.gz$

C<$1> in the pattern is always an even number for maintenance
versions, and odd for developer releases.

In the past it has been observed that pumkings tend to invent new
naming conventions on the fly. If you are a pumpking, before you
invent a new name for any of the three types of perl distributions,
please inform the guys from the CPAN who are doing indexing and
provide the trees of symlinks and the like. They will have to know
I<in advance> what you decide.
d158 1
a158 1
=head1 Philosophical Issues in Patching and Porting Perl
a176 10
Contain your changes carefully.  Assume nothing about other operating
systems, not even closely related ones.  Your changes must not affect
other platforms.

Spy shamelessly on how similar patching or porting issues have been
settled elsewhere.

If feasible, try to keep filenames 8.3-compliant to humor those poor
souls that get joy from running Perl under such dire limitations.

a198 82
=head2 Machine-specific files

=over 4

=item source code

If you have many machine-specific #defines or #includes, consider
creating an "osish.h" (os2ish.h, vmsish.h, and so on) and including
that in perl.h.  If you have several machine-specific files (function
emulations, function stubs, build utility wrappers) you may create a
separate subdirectory (djgpp, win32) and put the files in there.
Remember to update C<MANIFEST> when you add files.

If your system supports dynamic loading but none of the existing
methods at F<ext/DynaLoader/dl_*.xs> work for you, you must write
a new one.  Study the existing ones to see what kind of interface
you must supply.

=item build hints

There are two kinds of hints: hints for building Perl and hints for
extensions.   The former live in the C<hints> subdirectory, the latter
in C<ext/*/hints> subdirectories.

The top level hints are Bourne-shell scripts that set, modify and
unset appropriate Configure variables, based on the Configure command
line options and possibly existing config.sh and Policy.sh files from
previous Configure runs.

The extension hints are written Perl (by the time they are used
miniperl has been built) and control the building of their respective
extensions.  They can be used to for example manipulate compilation
and linking flags.

=item build and installation Makefiles, scripts, and so forth

Sometimes you will also need to tweak the Perl build and installation
procedure itself, like for example F<Makefile.SH> and F<installperl>.
Tread very carefully, even more than usual.  Contain your changes
with utmost care.

=item test suite

Many of the tests in C<t> subdirectory assume machine-specific things
like existence of certain functions, something about filesystem
semantics, certain external utilities and their error messages.  Use
the C<$^O> and the C<Config> module (which contains the results of the
Configure run, in effect the C<config.sh> converted to Perl) to either
skip (preferably not) or customize (preferable) the tests for your
platform.

=item modules

Certain standard modules may need updating if your operating system
sports for example a native filesystem naming.  You may want to update
some or all of the modules File::Basename, File::Spec, File::Path, and
File::Copy to become aware of your native filesystem syntax and
peculiarities.

=item documentation

If your operating system comes from outside UNIX you almost certainly
will have differences in the available operating system functionality
(missing system calls, different semantics, whatever).  Please
document these at F<pod/perlport.pod>.  If your operating system is
the first B<not> to have a system call also update the list of
"portability-bewares" at the beginning of F<pod/perlfunc.pod>.

A file called F<README.youros> at the top level that explains things
like how to install perl at this platform, where to get any possibly
required additional software, and for example what test suite errors
to expect, is nice too.

You may also want to write a separate F<.pod> file for your operating
system to tell about existing mailing lists, os-specific modules,
documentation, whatever.  Please name these along the lines of
F<perl>I<youros>.pod.  [unfinished: where to put this file (the pod/
subdirectory, of course: but more importantly, which/what index files
should be updated?)]

=back

d214 1
a214 1
=head2 Automated generation of derivative files
d222 5
a226 8
instead of patching these files directly.  However, very minor changes
to F<Configure> may be made in between major sync-ups with the
metaconfig units, which tends to be complicated operations.  But be
careful, this can quickly spiral out of control.  Running metaconfig
is not really hard.

Also F<Makefile> is automatically produced from F<Makefile.SH>.
In general, look out for all F<*.SH> files.
a413 3
If C<perly.c> changes, make sure you run C<perl vms/vms_yfix.pl> to
update the corresponding VMS files.  See L<VMS-specific updates>.

d523 2
a524 2
If you have changed F<perly.y> or F<perly.c>, then you most probably want
to update F<vms/perly_{h,c}.vms> by running C<perl vms/vms_yfix.pl>.
a630 36
=head1 Running Purify

Purify is a commercial tool that is helpful in identifying memory
overruns, wild pointers, memory leaks and other such badness.  Perl
must be compiled in a specific way for optimal testing with Purify.

Use the following commands to test perl with Purify:

	sh Configure -des -Doptimize=-g -Uusemymalloc -Dusemultiplicity \
	    -Accflags=-DPURIFY
	setenv PURIFYOPTIONS "-chain-length=25"
	make all pureperl
	cd t
	ln -s ../pureperl perl
	setenv PERL_DESTRUCT_LEVEL 5
	./perl TEST

Disabling Perl's malloc allows Purify to monitor allocations and leaks
more closely; using Perl's malloc will make Purify report most leaks
in the "potential" leaks category.  Enabling the multiplicity option
allows perl to clean up thoroughly when the interpreter shuts down, which
reduces the number of bogus leak reports from Purify.  The -DPURIFY
enables any Purify-specific debugging code in the sources.

Purify outputs messages in "Viewer" windows by default.  If you don't have
a windowing environment or if you simply want the Purify output to
unobtrusively go to a log file instead of to the interactive window,
use the following options instead:

	setenv PURIFYOPTIONS "-chain-length=25 -windows=no -log-file=perl.log \
	    -append-logfile=yes"

The only currently known leaks happen when there are compile-time errors
within eval or require.  (Fixing these is non-trivial, unfortunately, but
they must be fixed eventually.)

d1011 27
d1161 12
d1181 10
d1201 41
d1323 1
a1323 1
$Id: pumpkin.pod,v 1.23 2000/01/13 19:45:13 doughera Released $
@


1.1.1.3
log
@stock perl 5.6.1
@
text
@d61 1
a61 1
and amounts to C<$revision + $version/1000 + $subversion/100000>.  This
d213 1
a213 1
The extension hints are written in Perl (by the time they are used
d255 1
a255 2
to expect, is nice too.  Such files are in the process of being written
in pod format and will eventually be renamed F<INSTALL.youros>.
d452 1
a452 3
config_h.SH.)  Vms uses configure.com to generate its own config.sh
and config.h.  If you want to add a new variable to config.sh check
with vms folk how to add it to configure.com too.
d463 1
a463 1
It may also be necessary to update win32/config.?c, and
d484 2
a485 4
If C<perly.c> or C<perly.h> changes, make sure you run C<perl vms/vms_yfix.pl> 
to update the corresponding VMS files.  This could be taken care of by 
the regen_all target in the Unix Makefile.  See also 
L<VMS-specific updates>.
a509 5
=head2 make regen_all

This target takes care of the PERLYVMS, regen_headers, and regen_pods
targets.

a534 4
=head2 make regen_pods

Will run `make regen_pods` in the pod directory for indexing. 

d544 1
a544 1
source and binary compatibility with older releases of perl.  That way,
d597 1
a597 2
to update F<vms/perly_{h,c}.vms> by running C<perl vms/vms_yfix.pl>, or
by running `make regen_all` which will run that script for you.
d599 3
a601 2
The Perl revision number appears as "perl5" in configure.com.
It is courteous to update that if necessary.
a703 28
=head2 Other tests

=over 4

=item CHECK_FORMAT

To test the correct use of printf-style arguments, C<Configure> with
S<-Dccflags='-DCHECK_FORMAT -Wformat'> and run C<make>.  The compiler
will produce warning of incorrect use of format arguments.  CHECK_FORMAT
changes perl-defined formats to common formats, so DO NOT USE the executable
produced by this process. 

A more accurate approach is the following commands:

    sh Configure -des -Dccflags=-Wformat ...
    make miniperl		# without -DCHECK_FORMAT
    perl -i.orig -pwe 's/-Wformat/-DCHECK_FORMAT $&/' config.sh
    sh Configure -S
    make >& make.log		# build from correct miniperl
    make clean
    make miniperl >& mini.log	# build miniperl with -DCHECK_FORMAT 
    perl -nwe 'print if /^\S+:/ and not /^make\b/' mini.log make.log
    make clean

(-Wformat support by Robin Barker.)

=back

d1328 1
a1328 2
and/or fcntl() file locking.  It's a mess.  See $d_fcntl_can_lock
in recent config.sh files though.
@


1.1.1.4
log
@stock perl 5.8.0 from CPAN
@
text
@d3 1
a3 1
Pumpkin - Notes on handling the Perl Patch Pumpkin And Porting Perl
d27 1
a27 1
http://www.cpan.org/README.html , which automatically points you to a
a160 1
There's a script, check83.pl, for keeping your nose 8.3-clean.
a242 3
Remember to have a $VERSION in the modules.  You can use the
Porting/checkVERSION.pl script for checking this.

a348 3
If you update the subversion number, you may need to change the version
number near the top of the F<Changes> file.

d361 1
a361 1
http://www.cpan.org/authors/id/ANDYD/ .  The mc_units tar file
d500 1
a500 1
    diff -c perly.c.orig perly.c >perly_c.diff
a580 3
If you update the subversion number in F<patchlevel.h>, you may need
to change the version number near the top of the F<Changes> file.

d635 1
a635 1
http://www.cpan.org/authors/Johan_Vromans/ .  There are a couple
d732 5
a736 6
=over 4

=item *

build miniperl with -DCHECK_FORMAT 

d738 2
a739 7
    make miniperl OPTIMIZE=-DCHECK_FORMAT >& mini.log	

=item *

build a clean miniperl,
and build everything else from that with -DCHECK_FORMAT

a740 12
    make miniperl	
    make all OPTIMIZE='-DCHECK_FORMAT -Wformat' >& make.log  
		
=item *

clean up, and print warnings from the log files

    make clean
    perl -nwe 'print if /^\S+:/ and not /^make\b/' \
	mini.log make.log

=back
d760 1
a760 1
	setenv PERL_DESTRUCT_LEVEL 2
d1120 1
a1120 1
My system at the time was Interactive 2.2, an SVR3.2/386 derivative that
a1251 15
=item 4.

Indentation style: over the years Perl has become a mishmash of
various indentation styles, but the original "Larry style" can
probably be restored with (GNU) indent somewhat like this:

    indent -kr -nce -psl -sc

A more ambitious solution would also specify a list of Perl specific
types with -TSV -TAV -THV .. -TMAGIC -TPerlIO ... but that list would
be quite ungainly.  Also note that GNU indent also doesn't do aligning
of consecutive assignments, which would truly wreck the layout in
places like sv.c:Perl_sv_upgrade() or sv.c:Perl_clone_using().
Similarly nicely aligned &&s, ||s and ==s would not be respected.

d1257 1
a1257 1
http://www.cpan.org/modules/04pause.html for information on
d1265 1
a1265 1
out http://www.cpan.org/CPAN.html ).
a1279 91

=head2 Adding missing library functions to Perl

The perl Configure script automatically determines which headers and
functions you have available on your system and arranges for them to be
included in the compilation and linking process.  Occasionally, when porting
perl to an operating system for the first time, you may find that the
operating system is missing a key function.  While perl may still build
without this function, no perl program will be able to reference the missing
function.  You may be able to write the missing function yourself, or you
may be able to find the missing function in the distribution files for
another software package.  In this case, you need to instruct the perl
configure-and-build process to use your function.  Perform these steps.

=over 3

=item *

Code and test the function you wish to add.  Test it carefully; you will
have a much easier time debugging your code independently than when it is a
part of perl.

=item *

Here is an implementation of the POSIX truncate function for an operating
system (VOS) that does not supply one, but which does supply the ftruncate()
function.

  /* Beginning of modification history */
  /* Written 02-01-02 by Nick Ing-Simmons (nick@@ing-simmons.net) */
  /* End of modification history */
  
  /* VOS doesn't supply a truncate function, so we build one up
     from the available POSIX functions.  */
  
  #include <fcntl.h>
  #include <sys/types.h>
  #include <unistd.h>
  
  int
  truncate(const char *path, off_t len)
  {
   int fd = open(path,O_WRONLY);
   int code = -1;
   if (fd >= 0) {
     code = ftruncate(fd,len);
     close(fd);
   }
   return code;
  }

Place this file into a subdirectory that has the same name as the operating
system. This file is named perl/vos/vos.c

=item *

If your operating system has a hints file (in perl/hints/XXX.sh for an
operating system named XXX), then start with it.  If your operating system
has no hints file, then create one.  You can use a hints file for a similar
operating system, if one exists, as a template.

=item *

Add lines like the following to your hints file. The first line
(d_truncate="define") instructs Configure that the truncate() function
exists. The second line (archobjs="vos.o") instructs the makefiles that the
perl executable depends on the existence of a file named "vos.o".  (Make
will automatically look for "vos.c" and compile it with the same options as
the perl source code).  The final line ("test -h...") adds a symbolic link
to the top-level directory so that make can find vos.c.  Of course, you
should use your own operating system name for the source file of extensions,
not "vos.c".

  # VOS does not have truncate() but we supply one in vos.c
  d_truncate="define"
  archobjs="vos.o"
  
  # Help gmake find vos.c
  test -h vos.c || ln -s vos/vos.c vos.c

The hints file is a series of shell commands that are run in the top-level
directory (the "perl" directory).  Thus, these commands are simply executed
by Configure at an appropriate place during its execution.

=item *

At this point, you can run the Configure script and rebuild perl.  Carefully
test the newly-built perl to ensure that normal paths, and error paths,
behave as you expect.

=back
@


1.1.1.5
log
@perl 5.8.2 from CPAN
@
text
@d46 1
a46 1
    http://www.xray.mpe.mpg.de/mailing-lists/perl5-porters/
d106 1
a106 1
In the past it has been observed that pumpkings tend to invent new
a161 2
In a similar vein, do not create files or directories which differ only
in case (upper versus lower).
d481 2
a482 3
If you have byacc-1.8.2 (available from CPAN as
http://www.cpan.org/src/misc/perl-byacc1.8.2.tar.gz), and if there have
been changes to F<perly.y>, you can regenerate the F<perly.c> file.  The
d593 7
a599 7
The F<pod/perltodo.pod> file contains a roughly-categorized unordered
list of aspects of Perl that could use enhancement, features that could
be added, areas that could be cleaned up, and so on.  During your term
as pumpkin-holder, you will probably address some of these issues, and
perhaps identify others which, while you decide not to address them this
time around, may be tackled in the future.  Update the file to reflect
the situation as it stands when you hand over the pumpkin.
d605 1
a605 1
There are also some more porting-specific L</Todo> items later in this
d734 5
a738 7
If you have gcc, you can test the correct use of printf-style
arguments.  Run C<Configure> with S<-Dccflags='-DCHECK_FORMAT
-Wformat'> (and S<-Dcc=gcc>, if you are not on a system where C<cc>
is C<gcc>) and run C<make>.  The compiler will produce warnings of
incorrect use of format arguments.  CHECK_FORMAT changes perl-defined
formats to common formats, so DO NOT USE the executable produced by
this process.
a771 42
=item gcc -ansi -pedantic

Configure -Dgccansipedantic [ -Dcc=gcc ] will enable (via the cflags script,
not $Config{ccflags}) the gcc strict ANSI C flags -ansi and -pedantic for
the compilation of the core files on platforms where it knows it can
do so (like Linux, see cflags.SH for the full list), and on some
platforms only one (Solaris can do only -pedantic, not -ansi).
The flag -DPERL_GCC_PEDANTIC also gets added, since gcc does not add
any internal cpp flag to signify that -pedantic is being used, as it
does for -ansi (__STRICT_ANSI__).

Note that the -ansi and -pedantic are enabled only for version 3 (and
later) of gcc, since even gcc version 2.95.4 finds lots of seemingly
false "value computed not used" errors from Perl.

The -ansi and -pedantic are useful in catching at least the following
nonportable practices:

=over 4

=item *

gcc-specific extensions

=item *

lvalue casts

=item *

// C++ comments

=item *

enum trailing commas

=back

The -Dgccansipedantic should be used only when cleaning up the code,
not for production builds, since otherwise gcc cannot inline certain
things.

d1219 4
a1222 2
Given that it's already there, you can use it to override distribution modules.
One way to do that is to add
d1224 1
a1224 9
	ccflags="$ccflags -DAPPLLIB_EXP=\"/my/override\""
	
to your config.over file.  (You have to be particularly careful to get the
double quotes in.  APPLLIB_EXP must be a valid C string.  It might
actually be easier to just #define it yourself in perl.c.)

Then perl.c will put /my/override ahead of ARCHLIB and PRIVLIB.  Perl will
also search architecture-specific and version-specific subdirectories of
APPLLIB_EXP.
d1280 1
a1280 3
=back

=head2 Indentation style
d1282 1
a1282 1
Over the years Perl has become a mishmash of
d1295 2
a1508 71
=head2 Copyright Issues

The following is based on the consensus of a couple of IPR lawyers,
but it is of course not a legally binding statement, just a common
sense summary.

=over 4

=item *

Tacking on copyright statements is unnecessary to begin with because
of the Berne convention.  But assuming you want to go ahead...

=item *

The right form of a copyright statement is

	Copyright (C) Year, Year, ... by Someone

The (C) is not required everywhere but it doesn't hurt and in certain
jurisdictions it is required, so let's leave it in.  (Yes, it's true
that in some jurisdictions the "(C)" is not legally binding, one should
use the true ringed-C.  But we don't have that character available for
Perl's source code.)

The years must be listed out separately.  Year-Year is not correct.
Only the years when the piece has changed 'significantly' may be added.

=item *

One cannot give away one's copyright trivially.  One can give one's
copyright away by using public domain, but even that requires a little
bit more than just saying 'this is in public domain'.  (What it
exactly requires depends on your jurisdiction.)  But barring public
domain, one cannot "transfer" one's copyright to another person or
entity.  In the context of software, it means that contributors cannot
give away their copyright or "transfer" it to the "owner" of the software.

Also remember that in many cases if you are employed by someone,
your work may be copyrighted to your employer, even when you are
contributing on your own time (this all depends on too many things
to list here).  But the bottom line is that you definitely can't give
away a copyright you may not even have.

What is possible, however, is that the software can simply state

	Copyright (C) Year, Year, ... by Someone and others

and then list the "others" somewhere in the distribution.
And this is exactly what Perl does.  (The "somewhere" is
AUTHORS and the Changes* files.)

=item *

Split files, merged files, and generated files are problematic.
The rule of thumb: in split files, copy the copyright years of
the original file to all the new files; in merged files make
an union of the copyright years of all the old files; in generated
files propagate the copyright years of the generating file(s).

=item *

The files of Perl source code distribution do carry a lot of
copyrights, by various people.  (There are many copyrights embedded in
perl.c, for example.)  The most straightforward thing for pumpkings to
do is to simply update Larry's copyrights at the beginning of the
*.[hcy], x2p/*.[hcy], *.pl, and README files, and leave all other
copyrights alone.  Doing more than that requires quite a bit of tracking. 

=back

d1511 1
a1511 1
Original author:  Andy Dougherty doughera@@lafayette.edu .
@


1.1.1.6
log
@perl 5.8.3 from CPAN
@
text
@d491 5
a495 3
you should include the edited patch in the new distribution.  (If you
have byacc-1.9, the patch won't apply cleanly, notably changes to the printf
output statements.  F<perly.fixer> could be fixed to detect this.)
d498 3
a500 2
to update the corresponding VMS files.  The run_byacc target in the Unix
Makefile takes care of this.  See also L<VMS-specific updates>.
d510 1
a510 1
    diff -u perly.c.orig perly.c >perly_c.diff
a576 13

=head2 PPPort

F<ext/Devel/PPPort/PPPort.pm> needs to be synchronized to include all
new macros added to .h files (normally perl.h and XSUB.h, but others
as well). Since chances are that when a new macro is added the
committer will forget to update F<PPPort.pm>, it's the best to diff for
changes in .h files when making a new release and making sure that
F<PPPort.pm> contains them all.

The pumpking can delegate the synchronization responsibility to anybody
else, but the release process is the only place where we can make sure
that no new macros fell through the cracks.
@


1.1.1.7
log
@Import of stock perl 5.8.5
@
text
@d678 1
a678 1
	gzip -d -c perl5.004_07.tar.gz | tar -xf -
d680 1
a680 1
	gzip -d -c perl5.004_08.tar.gz | tar -xf -
d1653 1
a1653 1
$Id: pumpkin.pod,v 1.7 2004/04/07 21:33:01 millert Exp $
@


1.1.1.8
log
@perl 5.8.6 from CPAN
@
text
@d678 1
a678 1
	gzip -d -c perl5.004_07.tar.gz | tar -xof -
d680 1
a680 1
	gzip -d -c perl5.004_08.tar.gz | tar -xof -
d1653 1
a1653 1
$Id: pumpkin.pod,v 1.23 2000/01/13 19:45:13 doughera Released $
@


1.1.1.9
log
@perl 5.8.8 import
@
text
@d459 1
a459 1
to config.sh and then propagate them to a canned 'config.h' by any
d615 1
a615 1
can find champions for particular issues on the to-do list: an issue
d741 2
d751 3
a753 1
incorrect use of format arguments.  
d755 1
a755 4
As of perl 5.8.7, CHECK_FORMAT changes perl-defined formats
to obscure (but standard) formats, and then traps the obscure
format.  The resulting perl executable operates properly but 
you should not use the executable produced by this process.
d760 10
a769 2
 
A more accurate approach is the following commands:
d772 1
d774 1
a774 2
    perl -nwe 'print if /^\S+:/ and not /^make\b/' make.log

d777 1
a777 1
A more thorough approach to compiler warnings is
d780 2
a781 4
    make miniperl OPTIMIZE=-O\ -DCHECK_FORMAT >& make.log
    make all OPTIMIZE=-O\ -DCHECK_FORMAT\ -Wall\ -Wno-unused\
			    -Wno-uninitialized >>& make.log
    perl -nwe 'print if /^\S+:/ and not /^make\b/' make.log
d867 1
a867 1
=head1 Common Gotchas
d870 32
@


1.1.1.10
log
@import perl 5.10.0 from CPAN
@
text
@d367 7
a373 15
that comes with Perl's metaconfig units.

Since metaconfig is hard to change, running correction scripts after
this generation is sometimes needed. Configure gained complexity over
time, and the order in which config_h.SH is generated can cause havoc
when compiling perl. Therefor, you need to run Porting/config_h.pl
after that generation. All that and more is described in the README
files that come with the metaunits.

Perl's metaconfig units should be available on CPAN.  A set of units
that will work with perl5.9.x is in a file with a name similar to
F<mc_units-20070423.tgz> under http://www.cpan.org/authors/id/H/HM/HMBRAND/ .
The mc_units tar file should be unpacked in your main perl source directory.
Note: those units were for use with 5.9.x.  There may have been changes since
then.  Check for later versions or contact perl5-porters@@perl.org to obtain a
d376 2
a377 2
Alternatively, do consider if the F<*ish.h> files or the hint files might be
a better place for your changes.
d417 1
d481 29
a509 1
=head2 make regen_perly
d511 1
a511 13
If perly.y has been edited, it is necessary to run this target to rebuild
perly.h, perly.act and perly.tab. In fact this target just runs the Perl
script regen_perly.pl. Note that perly.c is I<not> rebuilt; this is just a
plain static file now. 

This target relies on you having Bison installed on your system. Running
the target will tell you if you haven't got the right version, and if so,
where to get the right one. Or if you prefer, you could hack
regen_perly.pl to work with your version of Bison. The important things
are that the regexes can still extract out the right chunks of the Bison
output into perly.act and perly.tab, and that the contents of those two
files, plus perly.h, are functionally equivalent to those produced by the
supported version of Bison.
d513 8
a520 1
Note that in the old days, you had to do C<make run_byacc> instead.
d524 2
a525 1
This target takes care of the regen_headers, and regen_pods targets.
a603 9
=head2 Bumping perl's version

If you bump perl's version, you will need to update a few things:
the L<perlhist> manpage for the date of release, the version number and
perldelta reference in the top level F<README> (and maybe the copyright
year too), the F<META.yml> file (generated via F<Porting/makemeta>, be
sure to run it with the current bleadperl), and the meta-info about
dual-lived modules in Module::Corelist (F<Porting/corelist.pl> does that).

d633 4
d741 14
a754 1
=head2 Other tests
d758 22
a1613 1
27-04-2007 H.Merijn Brand
@


1.1.1.11
log
@import perl 5.10.1
@
text
@d312 3
a314 2
This section has now been expanded and moved into its own file,
F<Porting/release_managers_guide.pod>.
d316 41
a356 3
I've kept some of the subsections here for now, as they don't  direclty
eleate to building a release any more, but still contain what might be
useful information - DAPM 7/2009.
d389 10
d405 35
d508 1
a508 2
This target takes care of the regen_headers target.
(It used to also call the regen_pods target, but that has been eliminated.)
d535 4
d560 1
a560 1
F<ext/Devel-PPPort/PPPort.pm> needs to be synchronized to include all
d571 24
d628 13
d1450 4
d1567 2
a1568 1
2009-07-08-01 Jesse Vincent
@


1.1.1.12
log
@Perl 5.12.2 from CPAN
@
text
@d473 1
a473 1
F<cpan/Devel-PPPort/PPPort.pm> needs to be synchronized to include all
@


1.1.1.13
log
@import perl 5.16.3 from CPAN - worked on by Andrew Fresh and myself
@
text
@d94 1
a94 1
patch' entry in F<patchlevel.h>. The distribution file contains the
d161 1
a161 1
There's a script, F<check83.pl>, for keeping your nose 8.3-clean.
d194 2
a195 2
creating an "osish.h" (F<os2ish.h>, F<vmsish.h>, and so on) and including
that in F<perl.h>.  If you have several machine-specific files (function
d247 1
a247 1
F<Porting/checkVERSION.pl> script for checking this.
d290 1
a290 2
The F<embed.h>, F<keywords.h>, F<opcode.h>, F<regcharclass.h>,
F<l1_char_class_tab.h>, and F<perltoc.pod> files
d315 2
a316 2
I've kept some of the subsections here for now, as they don't directly
relate to building a release any more, but still contain what might be
d326 1
a326 1
will regenerate F<Configure> and F<config_h.SH>.  Much more information
d339 1
a339 1
F<mc_units-20070423.tgz> under L<http://www.cpan.org/authors/id/H/HM/HMBRAND/>.
d384 3
a386 3
F<config.sh> and F<config_h.SH> to a Unix system and running sh
config_h.SH.)  Vms uses F<configure.com> to generate its own F<config.sh>
and F<config.h>.  If you want to add a new variable to F<config.sh> check
d390 1
a390 1
The F<Porting/config.sh> and F<Porting/config_H> files are provided to
d392 1
a392 1
them up-to-date.  If you have changed F<config_h.SH>, those changes must
d399 1
a399 1
F<plan9/config.plan9>, though you should be quite careful in doing so if
d406 3
a408 3
If F<perly.y> has been edited, it is necessary to run this target to rebuild
F<perly.h>, F<perly.act> and F<perly.tab>. In fact this target just runs the Perl
script F<regen_perly.pl>. Note that F<perly.c> is I<not> rebuilt; this is just a
d414 1
a414 1
F<regen_perly.pl> to work with your version of Bison. The important things
d416 2
a417 2
output into F<perly.act> and F<perly.tab>, and that the contents of those two
files, plus F<perly.h>, are functionally equivalent to those produced by the
d452 1
a452 1
=head2 globvar.sym, and perlio.sym
d455 1
a455 1
files and in F<perl_exp.SH> to see what to do.
d459 1
a459 1
If you do change F<embed.fnc> think carefully about
d474 1
a474 1
new macros added to .h files (normally F<perl.h> and F<XSUB.h>, but others
d487 1
a487 1
The F<Porting/todo.pod> file contains a roughly-categorized unordered
d514 1
a514 1
The Perl revision number appears as "perl5" in F<configure.com>.
d522 1
a522 1
L<http://www.cpan.org/authors/Johan_Vromans/>.  There are a couple
d816 2
a817 2
which reads F<embed.fnc>.  Thus, the C<pause>
symbol would have to be added to F<embed.fnc>  So far, so good.
d825 1
a825 1
This file is built from the F<embed.fnc> file,
d827 1
a827 1
had added C<pause> to F<embed.fnc>, then F<embed.h> would contain the
d874 1
a874 1
Now, we can safely put C<my_chsize> in C<embed.fnc>, export it, and
d944 1
a944 1
C<chsize> from F<embed.fnc> to the end of F<perl_exp.SH>.  That would
d1070 1
a1070 1

d1126 1
a1126 1
with development subversions, you certainly can't guarantee that
d1153 1
a1153 1
L<http://www.cpan.org/modules/04pause.html> for information on
@


1.1.1.14
log
@Import perl-5.18.2

OK espie@@ sthen@@ deraadt@@
@
text
@d1208 1
a1208 1

d1211 1
a1211 1

d1215 1
a1215 1

d1253 1
a1253 1

@


1.1.1.15
log
@Import perl-5.20.1
@
text
@d654 36
d862 2
a863 2
    # ifdef my_chsize      /* Probably #defined to Perl_my_chsize */
    #   undef my_chsize    /* in embed.h */
d870 4
a873 4
    Undef and then re-define my_chsize from Perl_my_chsize to
    just plain chsize if this system HAS_CHSIZE.  This probably only
    applies to SCO.  This shows the perils of having internal
    functions with the same name as external library functions :-).
d1056 5
a1060 6
    version of Perl embedded in their product.  They would set the
    symbol to be the name of the library containing the files needed
    to run or to support their particular application.  This works at
    the "override" level to make sure they get their own versions of
    any library code that they absolutely must have configuration
    control over.
d1063 3
a1065 3
    override-ish sort of thing, when installing a generic Perl.  It
    should probably have been named something to do with overriding
    though.  Since it's undocumented we could still change it...  :-)
@


1.1.1.16
log
@Import perl-5.24.2
@
text
@d1268 6
d1390 1
a1390 1
*.[hcy], *.pl, and README files, and leave all other
@


