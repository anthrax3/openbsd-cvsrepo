head	1.2;
access;
symbols
	OPENBSD_6_0:1.1.1.5.0.12
	OPENBSD_6_0_BASE:1.1.1.5
	OPENBSD_5_9:1.1.1.5.0.6
	OPENBSD_5_9_BASE:1.1.1.5
	OPENBSD_5_8:1.1.1.5.0.8
	OPENBSD_5_8_BASE:1.1.1.5
	PERL_5_20_2:1.1.1.5
	OPENBSD_5_7:1.1.1.5.0.2
	OPENBSD_5_7_BASE:1.1.1.5
	PERL_5_20_1:1.1.1.5
	OPENBSD_5_6:1.1.1.5.0.4
	OPENBSD_5_6_BASE:1.1.1.5
	PERL_5_18_2:1.1.1.5
	PERL:1.1.1
	OPENBSD_5_5:1.1.1.4.0.6
	OPENBSD_5_5_BASE:1.1.1.4
	OPENBSD_5_4:1.1.1.4.0.2
	OPENBSD_5_4_BASE:1.1.1.4
	PERL_5_16_3:1.1.1.4
	OPENBSD_5_3:1.1.1.3.0.14
	OPENBSD_5_3_BASE:1.1.1.3
	OPENBSD_5_2:1.1.1.3.0.12
	OPENBSD_5_2_BASE:1.1.1.3
	OPENBSD_5_1_BASE:1.1.1.3
	OPENBSD_5_1:1.1.1.3.0.10
	OPENBSD_5_0:1.1.1.3.0.8
	OPENBSD_5_0_BASE:1.1.1.3
	OPENBSD_4_9:1.1.1.3.0.6
	OPENBSD_4_9_BASE:1.1.1.3
	PERL_5_12_2:1.1.1.3
	OPENBSD_4_8:1.1.1.3.0.4
	OPENBSD_4_8_BASE:1.1.1.3
	OPENBSD_4_7:1.1.1.3.0.2
	OPENBSD_4_7_BASE:1.1.1.3
	PERL_5_10_1:1.1.1.3
	OPENBSD_4_6:1.1.1.2.0.6
	OPENBSD_4_6_BASE:1.1.1.2
	OPENBSD_4_5:1.1.1.2.0.2
	OPENBSD_4_5_BASE:1.1.1.2
	PERL_5_10_0:1.1.1.2
	OPENBSD_4_4:1.1.1.1.0.10
	OPENBSD_4_4_BASE:1.1.1.1
	OPENBSD_4_3:1.1.1.1.0.8
	OPENBSD_4_3_BASE:1.1.1.1
	OPENBSD_4_2:1.1.1.1.0.6
	OPENBSD_4_2_BASE:1.1.1.1
	OPENBSD_4_1:1.1.1.1.0.4
	OPENBSD_4_1_BASE:1.1.1.1
	OPENBSD_4_0:1.1.1.1.0.2
	OPENBSD_4_0_BASE:1.1.1.1
	PERL_5_8_8:1.1.1.1
	CPAN:1.1.1;
locks; strict;
comment	@# @;
expand	@o@;


1.2
date	2017.02.05.00.31.54;	author afresh1;	state Exp;
branches;
next	1.1;
commitid	cxJ08BvJA9Pt2PTM;

1.1
date	2006.03.28.18.49.38;	author millert;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	2006.03.28.18.49.38;	author millert;	state Exp;
branches;
next	1.1.1.2;

1.1.1.2
date	2008.09.29.17.18.12;	author millert;	state Exp;
branches;
next	1.1.1.3;

1.1.1.3
date	2009.10.12.18.10.46;	author millert;	state Exp;
branches;
next	1.1.1.4;

1.1.1.4
date	2013.03.25.20.09.28;	author sthen;	state Exp;
branches;
next	1.1.1.5;

1.1.1.5
date	2014.03.24.14.59.08;	author afresh1;	state Exp;
branches;
next	;


desc
@@


1.2
log
@Fix merge issues, remove excess files - match perl-5.24.1 dist
@
text
@#!/usr/bin/perl

# Check that the various config.sh-clones have (at least) all the
# same symbols as the top-level config_h.SH so that the (potentially)
# needed symbols are not lagging after how Configure thinks the world
# is laid out.
#
# VMS is probably not handled properly here, due to their own
# rather elaborate DCL scripting.
#

use strict;
use warnings;
use autodie;

sub usage
{
    my $err = shift and select STDERR;
    print "usage: $0 [--list] [--regen] [--default=value]\n";
    exit $err;
    } # usage

use Getopt::Long;
my $opt_l = 0;
my $opt_r = 0;
my $default;
my $tap = 0;
my $test;
GetOptions (
    "help|?"	=> sub { usage (0); },
    "l|list!"	=> \$opt_l,
    "regen"	=> \$opt_r,
    "default=s" => \$default,
    "tap"	=> \$tap,
    ) or usage (1);

$default and $default =~ s/^'(.*)'$/$1/; # Will be quoted on generation

require 'regen/regen_lib.pl' if $opt_r;

my $MASTER_CFG = "config_h.SH";
# Inclusive bounds on the main part of the file, $section == 1 below:
my $first = qr/^Author=/;
my $last = qr/^zip=/;

my @@CFG = (
	   # we check from MANIFEST whether they are expected to be present.
	   # We can't base our check on $], because that's the version of the
	   # perl that we are running, not the version of the source tree.
	   "Cross/config.sh-arm-linux",
	   "NetWare/config.wc",
	   "symbian/config.sh",
	   "uconfig.sh",
	   "uconfig64.sh",
	   "plan9/config_sh.sample",
	   "win32/config.gc",
	   "win32/config.vc",
	   "win32/config.ce",
	   "configure.com",
	   "Porting/config.sh",
	  );

my @@MASTER_CFG;
{
    my %seen;
    open my $fh, '<', $MASTER_CFG;
    while (<$fh>) {
	while (/[^\\]\$([a-z]\w+)/g) {
	    my $v = $1;
	    next if $v =~ /^(CONFIG_H|CONFIG_SH)$/;
	    $seen{$v}++;
	}
    }
    close $fh;
    @@MASTER_CFG = sort keys %seen;
}

my %MANIFEST;

{
    open my $fh, '<', 'MANIFEST';
    while (<$fh>) {
	$MANIFEST{$1}++ if /^(.+?)\t/;
    }
    close $fh;
}

printf "1..%d\n", 2 * @@CFG if $tap;

for my $cfg (sort @@CFG) {
    unless (exists $MANIFEST{$cfg}) {
	print STDERR "[skipping not-expected '$cfg']\n";
	next;
    }
    my %cfg;
    my $section = 0;
    my @@lines;

    open my $fh, '<', $cfg;

    if ($cfg eq 'configure.com') {
	++$cfg{startperl}; # Cheat.

	while (<$fh>) {
	    next if /^\#/ || /^\s*$/ || /^\:/;
	    s/(\s*!.*|\s*)$//; # remove trailing comments or whitespace
	    ++$cfg{$1} if /^\$\s+WC "(\w+)='(?:.*)'"$/;
	}
    } else {
	while (<$fh>) {
	    if ($_ =~ $first) {
		die "$cfg:$.:section=$section:$_" unless $section == 0;
		$section = 1;
	    }
	    push @@{$lines[$section]}, $_;
	    next if /^\#/ || /^\s*$/ || /^\:/;
	    if ($_ =~ $last) {
		die "$cfg:$.:section=$section:$_" unless $section == 1;
		$section = 2;
	    }
	    # foo='bar'
	    # foo=bar
	    # (optionally with a trailing comment)
	    if (/^(\w+)=(?:'.*'|[^'].*)(?: #.*)?$/) {
		++$cfg{$1};
	    } else {
		warn "$cfg:$.:$_";
	    }
	}
    }
    close $fh;

    ++$test;
    my $missing;
    if ($cfg eq 'configure.com') {
	print "ok $test # skip $cfg doesn't need to be sorted\n"
	    if $tap;
    } elsif (join("", @@{$lines[1]}) eq join("", sort @@{$lines[1]})) {
	print "ok $test - $cfg sorted\n"
	    if $tap;
    } elsif ($tap) {
	print "not ok $test - $cfg is not sorted\n";
    } elsif ($opt_r || $opt_l) {
	# A reference to an empty array is true, hence this flags the
	# file for later attention by --regen and --list, even if
	# nothing is missing. Actual sort and output are done later.
	$missing = [];
    } else {
	print "$cfg: unsorted\n"
    }

    for my $v (@@MASTER_CFG) {
	# This only creates a reference in $missing if something is missing:
	push @@$missing, $v unless exists $cfg{$v};
    }

    ++$test;
    if ($missing) {
	if ($tap) {
	    print "not ok $test - $cfg missing keys @@$missing\n";
	} elsif ($opt_l) {
	    # print the name once, however many problems
	    print "$cfg\n";
	} elsif ($opt_r && $cfg ne 'configure.com') {
	    if (defined $default) {
		push @@{$lines[1]}, map {"$_='$default'\n"} @@$missing;
	    } else {
		print "$cfg: missing '$_', use --default to add it\n"
		    foreach @@$missing;
	    }

	    @@{$lines[1]} = sort @@{$lines[1]};
	    my $fh = open_new($cfg);
	    print $fh @@{$_} foreach @@lines;
	    close_and_rename($fh);
	} else {
	    print "$cfg: missing '$_'\n" foreach @@$missing;
	}
    } elsif ($tap) {
	print "ok $test - $cfg has no missing keys\n";
    }
}
@


1.1
log
@Initial revision
@
text
@d1 1
a1 1
#!/usr/bin/perl -w
a2 1
#
d8 2
a9 1
# VMS is not handled here, due to their own rather elaborate DCL scripting.
d13 27
d42 3
a44 1
my %MASTER_CFG;
a46 1
	   # This list contains both 5.8.x and 5.9.x files,
d48 2
a50 1
	   "epoc/config.sh",
d54 1
a55 3
	   "vos/config.alpha.def",
	   "vos/config.ga.def",
	   "win32/config.bc",
d58 3
a60 2
	   "win32/config.vc64",
	   "wince/config.ce",
d63 9
a71 6
sub read_file {
    my ($fn, $sub) = @@_;
    if (open(my $fh, $fn)) {
	local $_;
	while (<$fh>) {
	    &$sub;
a72 2
    } else {
	die "$0: Failed to open '$fn' for reading: $!\n";
d74 2
d78 6
a83 9
sub config_h_SH_reader {
    my $cfg = shift;
    return sub {
	return if 1../^echo \"Extracting \$CONFIG_H/;
	while (/[^\\]\$(\w+)/g) {
	    my $v = $1;
	    next if $v =~ /^(CONFIG_H|CONFIG_SH)$/;
	    $cfg->{$v}++;
	}
d85 1
d88 1
a88 2
read_file($MASTER_CFG,
	  config_h_SH_reader(\%MASTER_CFG));
d90 13
a102 1
my %MANIFEST;
d104 28
a131 4
read_file("MANIFEST",
	  sub {
	      $MANIFEST{$1}++ if /^(.+?)\t/;
	  });
d133 18
a150 1
my @@MASTER_CFG = sort keys %MASTER_CFG;
a151 2
sub check_cfg {
    my ($fn, $cfg) = @@_;
d153 2
a154 1
	print "$fn: missing '$v'\n" unless exists $cfg->{$v};
a155 1
}
d157 24
a180 4
for my $cfg (@@CFG) {
    unless (exists $MANIFEST{$cfg}) {
	print "[skipping not-expected '$cfg']\n";
	next;
a181 18
    my %cfg;
    read_file($cfg,
	      sub {
		  return if /^\#/ || /^\s*$/;
		  # foo='bar'
		  # foo=bar
		  # $foo='bar' # VOS 5.8.x specialty
		  # $foo=bar   # VOS 5.8.x specialty
		  if (/^\$?(\w+)='(.*)'$/) {
		      $cfg{$1}++;
		  }
		  elsif (/^\$?(\w+)=(.*)$/) {
		      $cfg{$1}++;
		  } else {
		      warn "$cfg:$.:$_";
		  }
	      });
    check_cfg($cfg, \%cfg);
@


1.1.1.1
log
@perl 5.8.8 import
@
text
@@


1.1.1.2
log
@import perl 5.10.0 from CPAN
@
text
@d9 1
a9 2
# VMS is probably not handled properly here, due to their own
# rather elaborate DCL scripting.
a19 2
	   # We can't base our check on $], because that's the version of the
	   # perl that we are running, not the version of the source tree.
d32 1
a32 2
	   "win32/config.ce",
	   "configure.com",
d50 2
a51 1
	while (/[^\\]\$([a-z]\w+)/g) {
a86 4
		  if ($cfg eq 'configure.com') {
		      s/(\s*!.*|\s*)$//; # remove trailing comments or whitespace
		      return if ! /^\$\s+WC "(\w+)='(.*)'"$/;
		  }
a95 3
		  }
		  elsif (/^\$\s+WC "(\w+)='(.*)'"$/) {
		      $cfg{$1}++;
a99 3
    if ($cfg eq 'configure.com') {
	$cfg{startperl}++; # Cheat.
    }
@


1.1.1.3
log
@import perl 5.10.1
@
text
@a36 1
	   "Porting/config.sh",
d83 1
a83 1
	print STDERR "[skipping not-expected '$cfg']\n";
d89 1
a89 1
		  return if /^\#/ || /^\s*$/ || /^\:/;
@


1.1.1.4
log
@import perl 5.16.3 from CPAN - worked on by Andrew Fresh and myself
@
text
@d1 1
a1 1
#!/usr/bin/perl
d3 1
a13 25
use warnings;
use autodie;

sub usage
{
    my $err = shift and select STDERR;
    print "usage: $0 [--list] [--regen] [--default=value]\n";
    exit $err;
    } # usage

use Getopt::Long;
my $opt_l = 0;
my $opt_r = 0;
my $default;
my $tap = 0;
my $test;
GetOptions (
    "help|?"	=> sub { usage (0); },
    "l|list!"	=> \$opt_l,
    "regen"	=> \$opt_r,
    "default=s" => \$default,
    "tap"	=> \$tap,
    ) or usage (1);

require 'regen/regen_lib.pl' if $opt_r;
d16 1
a16 3
# Inclusive bounds on the main part of the file, $section == 1 below:
my $first = qr/^Author=/;
my $last = qr/^zip=/;
d19 1
a27 1
	   "uconfig64.sh",
d29 3
a32 2
	   "win32/config.gc64",
	   "win32/config.gc64nox",
d40 15
a54 5
my @@MASTER_CFG;
{
    my %seen;
    open my $fh, '<', $MASTER_CFG;
    while (<$fh>) {
d58 1
a58 1
	    $seen{$v}++;
a60 2
    close $fh;
    @@MASTER_CFG = sort keys %seen;
d63 3
d68 11
a78 4
{
    open my $fh, '<', 'MANIFEST';
    while (<$fh>) {
	$MANIFEST{$1}++ if /^(.+?)\t/;
a79 1
    close $fh;
d82 1
a82 3
printf "1..%d\n", 2 * @@CFG if $tap;

for my $cfg (sort @@CFG) {
d88 23
a110 5
    my $section = 0;
    my @@lines;

    open my $fh, '<', $cfg;

d112 1
a112 79
	++$cfg{startperl}; # Cheat.

	while (<$fh>) {
	    next if /^\#/ || /^\s*$/ || /^\:/;
	    s/(\s*!.*|\s*)$//; # remove trailing comments or whitespace
	    ++$cfg{$1} if /^\$\s+WC "(\w+)='(?:.*)'"$/;
	}
    } else {
	while (<$fh>) {
	    if ($_ =~ $first) {
		die "$cfg:$.:section=$section:$_" unless $section == 0;
		$section = 1;
	    }
	    push @@{$lines[$section]}, $_;
	    next if /^\#/ || /^\s*$/ || /^\:/;
	    if ($_ =~ $last) {
		die "$cfg:$.:section=$section:$_" unless $section == 1;
		$section = 2;
	    }
	    # foo='bar'
	    # foo=bar
	    # (optionally with a trailing comment)
	    if (/^(\w+)=(?:'.*'|[^'].*)(?: #.*)?$/) {
		++$cfg{$1};
	    } else {
		warn "$cfg:$.:$_";
	    }
	}
    }
    close $fh;

    ++$test;
    my $missing;
    if ($cfg eq 'configure.com') {
	print "ok $test # skip $cfg doesn't need to be sorted\n"
	    if $tap;
    } elsif (join("", @@{$lines[1]}) eq join("", sort @@{$lines[1]})) {
	print "ok $test - $cfg sorted\n"
	    if $tap;
    } elsif ($tap) {
	print "not ok $test - $cfg is not sorted\n";
    } elsif ($opt_r || $opt_l) {
	# A reference to an empty array is true, hence this flags the
	# file for later attention by --regen and --list, even if
	# nothing is missing. Actual sort and output are done later.
	$missing = [];
    } else {
	print "$cfg: unsorted\n"
    }

    for my $v (@@MASTER_CFG) {
	# This only creates a reference in $missing if something is missing:
	push @@$missing, $v unless exists $cfg{$v};
    }

    ++$test;
    if ($missing) {
	if ($tap) {
	    print "not ok $test - $cfg missing keys @@$missing\n";
	} elsif ($opt_l) {
	    # print the name once, however many problems
	    print "$cfg\n";
	} elsif ($opt_r && $cfg ne 'configure.com') {
	    if (defined $default) {
		push @@{$lines[1]}, map {"$_='$default'\n"} @@$missing;
	    } else {
		print "$cfg: missing '$_', use --default to add it\n"
		    foreach @@$missing;
	    }

	    @@{$lines[1]} = sort @@{$lines[1]};
	    my $fh = open_new($cfg);
	    print $fh @@{$_} foreach @@lines;
	    close_and_rename($fh);
	} else {
	    print "$cfg: missing '$_'\n" foreach @@$missing;
	}
    } elsif ($tap) {
	print "ok $test - $cfg has no missing keys\n";
d114 1
@


1.1.1.5
log
@Import perl-5.18.2

OK espie@@ sthen@@ deraadt@@
@
text
@d49 1
d56 2
d59 1
@


