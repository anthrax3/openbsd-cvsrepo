head	1.1;
branch	1.1.1;
access;
symbols
	OPENBSD_6_1:1.1.1.3.0.24
	OPENBSD_6_1_BASE:1.1.1.3
	OPENBSD_6_0:1.1.1.3.0.26
	OPENBSD_6_0_BASE:1.1.1.3
	OPENBSD_5_9:1.1.1.3.0.20
	OPENBSD_5_9_BASE:1.1.1.3
	OPENBSD_5_8:1.1.1.3.0.22
	OPENBSD_5_8_BASE:1.1.1.3
	PERL_5_20_2:1.1.1.3
	OPENBSD_5_7:1.1.1.3.0.14
	OPENBSD_5_7_BASE:1.1.1.3
	PERL_5_20_1:1.1.1.3
	OPENBSD_5_6:1.1.1.3.0.18
	OPENBSD_5_6_BASE:1.1.1.3
	PERL_5_18_2:1.1.1.3
	PERL:1.1.1
	OPENBSD_5_5:1.1.1.3.0.16
	OPENBSD_5_5_BASE:1.1.1.3
	OPENBSD_5_4:1.1.1.3.0.12
	OPENBSD_5_4_BASE:1.1.1.3
	PERL_5_16_3:1.1.1.3
	OPENBSD_5_3:1.1.1.3.0.10
	OPENBSD_5_3_BASE:1.1.1.3
	OPENBSD_5_2:1.1.1.3.0.8
	OPENBSD_5_2_BASE:1.1.1.3
	OPENBSD_5_1_BASE:1.1.1.3
	OPENBSD_5_1:1.1.1.3.0.6
	OPENBSD_5_0:1.1.1.3.0.4
	OPENBSD_5_0_BASE:1.1.1.3
	OPENBSD_4_9:1.1.1.3.0.2
	OPENBSD_4_9_BASE:1.1.1.3
	PERL_5_12_2:1.1.1.3
	OPENBSD_4_8:1.1.1.2.0.4
	OPENBSD_4_8_BASE:1.1.1.2
	OPENBSD_4_7:1.1.1.2.0.2
	OPENBSD_4_7_BASE:1.1.1.2
	PERL_5_10_1:1.1.1.2
	OPENBSD_4_6:1.1.1.1.0.26
	OPENBSD_4_6_BASE:1.1.1.1
	OPENBSD_4_5:1.1.1.1.0.22
	OPENBSD_4_5_BASE:1.1.1.1
	PERL_5_10_0:1.1.1.1
	OPENBSD_4_4:1.1.1.1.0.20
	OPENBSD_4_4_BASE:1.1.1.1
	OPENBSD_4_3:1.1.1.1.0.18
	OPENBSD_4_3_BASE:1.1.1.1
	OPENBSD_4_2:1.1.1.1.0.16
	OPENBSD_4_2_BASE:1.1.1.1
	OPENBSD_4_1:1.1.1.1.0.14
	OPENBSD_4_1_BASE:1.1.1.1
	OPENBSD_4_0:1.1.1.1.0.12
	OPENBSD_4_0_BASE:1.1.1.1
	PERL_5_8_8:1.1.1.1
	OPENBSD_3_9:1.1.1.1.0.10
	OPENBSD_3_9_BASE:1.1.1.1
	OPENBSD_3_8:1.1.1.1.0.8
	OPENBSD_3_8_BASE:1.1.1.1
	OPENBSD_3_7:1.1.1.1.0.6
	OPENBSD_3_7_BASE:1.1.1.1
	PERL_5_8_6:1.1.1.1
	OPENBSD_3_6:1.1.1.1.0.4
	OPENBSD_3_6_BASE:1.1.1.1
	PERL_5_8_5:1.1.1.1
	PERL_5_8_3:1.1.1.1
	OPENBSD_3_5:1.1.1.1.0.2
	OPENBSD_3_5_BASE:1.1.1.1
	PERL_5_8_2:1.1.1.1
	CPAN:1.1.1;
locks; strict;
comment	@# @;
expand	@o@;


1.1
date	2003.12.03.02.44.29;	author millert;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	2003.12.03.02.44.29;	author millert;	state Exp;
branches;
next	1.1.1.2;

1.1.1.2
date	2009.10.12.18.10.46;	author millert;	state Exp;
branches;
next	1.1.1.3;

1.1.1.3
date	2010.09.24.14.49.20;	author millert;	state Exp;
branches;
next	;


desc
@@


1.1
log
@Initial revision
@
text
@#!/usr/bin/perl -ws

#
# manicheck - check files against the MANIFEST
#
# Without options prints out (possibly) two lines:
#
# extra: a b c
# missing: d
#
# With option -x prints out only the missing files (and without the "extra: ")
# With option -m prints out only the extra files (and without the "missing: ")
#

BEGIN {
  $SIG{__WARN__} = sub {
    help() if $_[0] =~ /"main::\w" used only once: possible typo at /;
  };
}

use strict;

sub help {
  die <<EOF;
$0: Usage: $0 [-x|-m|-l|-h]
-x show only the extra files
-m show only the missing files
-l show the files one per line instead of one line
-h show only this help
EOF
}

use vars qw($x $m $l $h);

help() if $h;

open(MANIFEST, "MANIFEST") or die "MANIFEST: $!";

my %mani;
my %mand = qw(. 1);
use File::Basename qw(dirname);

while (<MANIFEST>) {
  if (/^(\S+)\t+(.+)$/) {
    $mani{$1}++;
    my $d = dirname($1);
    while($d ne '.') {
	$mand{$d}++;
	$d = dirname($d);
    }
  } else {
    warn "MANIFEST:$.:$_";
  }
}

close(MANIFEST);

my %find;
use File::Find;
find(sub {
       my $n = $File::Find::name;
       $n =~ s:^\./::;
       $find{$n}++;
     }, '.' );

my @@xtra;
my @@miss;

for (sort keys %find) {
  push @@xtra, $_ unless $mani{$_} || $mand{$_};
}

for (sort keys %mani) {
  push @@miss, $_ unless $find{$_};
}

$" = "\n" if $l;

unshift @@xtra, "extra:"   if @@xtra;
unshift @@miss, "missing:" if @@miss;

print "@@xtra\n", if @@xtra && !$m;
print "@@miss\n"  if @@miss && !$x;

exit 0;

@


1.1.1.1
log
@perl 5.8.2 from CPAN
@
text
@@


1.1.1.2
log
@import perl 5.10.1
@
text
@d1 1
a1 1
#!/usr/bin/perl
d3 17
a19 3
# output a list of:
#  a) files listed in MANIFEST which don't exist
#  b) files which exist but which aren't in MANIFEST
d22 37
a58 1
use warnings;
d60 12
d73 2
a74 5
open my $fh, 'MANIFEST' or die "Can't read MANIFEST: $!\n";
my @@files = map { (split)[0] } <$fh>;
close $fh;
for (@@files) {
    print "$_ from MANIFEST doesn't exist\n" if ! -f;
d76 10
a85 10
my %files = map { $_ => 1 } @@files;
find {
    wanted => sub {
        my $x = $File::Find::name; $x =~ s/^..//;
        return if -d;
	return if $_ eq '.gitignore';
	return if $x =~ /^\.git\b/;
        print "$File::Find::name not in MANIFEST\n" if !$files{$x};
    },
}, ".";
@


1.1.1.3
log
@Perl 5.12.2 from CPAN
@
text
@d22 3
a24 3
        return if $_ eq '.gitignore';
        return if $x =~ /^\.git\b/;
        print "$x\t\tnot in MANIFEST\n" if !$files{$x};
@


