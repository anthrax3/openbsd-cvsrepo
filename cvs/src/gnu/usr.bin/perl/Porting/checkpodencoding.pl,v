head	1.1;
branch	1.1.1;
access;
symbols
	OPENBSD_6_1_BASE:1.1.1.3
	OPENBSD_6_0:1.1.1.3.0.10
	OPENBSD_6_0_BASE:1.1.1.3
	OPENBSD_5_9:1.1.1.3.0.4
	OPENBSD_5_9_BASE:1.1.1.3
	OPENBSD_5_8:1.1.1.3.0.6
	OPENBSD_5_8_BASE:1.1.1.3
	PERL_5_20_2:1.1.1.3
	OPENBSD_5_7:1.1.1.3.0.2
	OPENBSD_5_7_BASE:1.1.1.3
	PERL_5_20_1:1.1.1.3
	OPENBSD_5_6:1.1.1.2.0.4
	OPENBSD_5_6_BASE:1.1.1.2
	PERL_5_18_2:1.1.1.2
	PERL:1.1.1
	OPENBSD_5_5:1.1.1.1.0.6
	OPENBSD_5_5_BASE:1.1.1.1
	OPENBSD_5_4:1.1.1.1.0.2
	OPENBSD_5_4_BASE:1.1.1.1
	PERL_5_16_3:1.1.1.1
	CPAN:1.1.1;
locks; strict;
comment	@# @;
expand	@o@;


1.1
date	2013.03.25.20.09.28;	author sthen;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	2013.03.25.20.09.28;	author sthen;	state Exp;
branches;
next	1.1.1.2;

1.1.1.2
date	2014.03.24.14.59.08;	author afresh1;	state Exp;
branches;
next	1.1.1.3;

1.1.1.3
date	2014.11.17.20.53.16;	author afresh1;	state Exp;
branches;
next	;
commitid	B31cAbBIXiCqnL97;


desc
@@


1.1
log
@Initial revision
@
text
@#!/usr/bin/env perl
use 5.010;
use open qw< :encoding(utf8) :std >;
use autodie;
use strict;
use File::Find;
use Encode::Guess;

# Check if POD files contain non-ASCII without specifying
# =encoding. Run it as:

## perl Porting/checkpodencoding.pl

find(
    {
        wanted => \&finder,
        no_chdir => 1,
    },
    '.'
);

sub finder {
    my $file = $_;

    return if -B $file;

    open my $fh, '<', $file;

    #say STDERR "Checking $file";

    next if
        # Test cases
        $file ~~ m[Pod-Simple/t];

    my ($in_pod, $has_encoding, @@non_ascii);

    FILE: while (my $line = <$fh>) {
        chomp $line;
        if ($line ~~ /^=[a-z]+/) {
            $in_pod = 1;
        }

        if ($in_pod) {
            if ($line ~~ /^=encoding (\S+)/) {
                $has_encoding = 1;
                last FILE;
            } elsif ($line ~~ /[^[:ascii:]]/) {
                my $encoding = guess_encoding($line);
                push @@non_ascii => {
                    num => $.,
                    line => $line,
                    encoding => (ref $encoding ? "$encoding->{Name}?" : 'unknown!'),
                };
            }
        }

        if ($line ~~ /^=cut/) {
            $in_pod = 0;
        }
    }

    if (@@non_ascii and not $has_encoding) {
        say "$file:";
        $DB::single = 1;
        for (@@non_ascii) {
            say "    $_->{num} ($_->{encoding}): $_->{line}";
        }
    }
}
@


1.1.1.1
log
@import perl 5.16.3 from CPAN - worked on by Andrew Fresh and myself
@
text
@@


1.1.1.2
log
@Import perl-5.18.2

OK espie@@ sthen@@ deraadt@@
@
text
@d33 1
a33 1
        $file =~ m[Pod-Simple/t];
d39 1
a39 1
        if ($line =~ /^=[a-z]+/) {
d44 1
a44 1
            if ($line =~ /^=encoding (\S+)/) {
d47 1
a47 1
            } elsif ($line =~ /[^[:ascii:]]/) {
d57 1
a57 1
        if ($line =~ /^=cut/) {
@


1.1.1.3
log
@Import perl-5.20.1
@
text
@d25 1
a25 1
    return if -d $file or -B $file;
@


