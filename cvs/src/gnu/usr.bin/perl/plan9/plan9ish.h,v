head	1.6;
access;
symbols
	OPENBSD_6_2_BASE:1.6
	PERL_5_24_2:1.1.1.5
	OPENBSD_6_1:1.6.0.36
	OPENBSD_6_1_BASE:1.6
	OPENBSD_6_0:1.6.0.34
	OPENBSD_6_0_BASE:1.6
	OPENBSD_5_9:1.6.0.28
	OPENBSD_5_9_BASE:1.6
	OPENBSD_5_8:1.6.0.30
	OPENBSD_5_8_BASE:1.6
	PERL_5_20_2:1.1.1.5
	OPENBSD_5_7:1.6.0.22
	OPENBSD_5_7_BASE:1.6
	PERL_5_20_1:1.1.1.5
	OPENBSD_5_6:1.6.0.26
	OPENBSD_5_6_BASE:1.6
	PERL_5_18_2:1.1.1.5
	PERL:1.1.1
	OPENBSD_5_5:1.6.0.24
	OPENBSD_5_5_BASE:1.6
	OPENBSD_5_4:1.6.0.20
	OPENBSD_5_4_BASE:1.6
	PERL_5_16_3:1.1.1.5
	OPENBSD_5_3:1.6.0.18
	OPENBSD_5_3_BASE:1.6
	OPENBSD_5_2:1.6.0.16
	OPENBSD_5_2_BASE:1.6
	OPENBSD_5_1_BASE:1.6
	OPENBSD_5_1:1.6.0.14
	OPENBSD_5_0:1.6.0.12
	OPENBSD_5_0_BASE:1.6
	OPENBSD_4_9:1.6.0.10
	OPENBSD_4_9_BASE:1.6
	PERL_5_12_2:1.1.1.5
	OPENBSD_4_8:1.6.0.8
	OPENBSD_4_8_BASE:1.6
	OPENBSD_4_7:1.6.0.4
	OPENBSD_4_7_BASE:1.6
	PERL_5_10_1:1.1.1.5
	OPENBSD_4_6:1.6.0.6
	OPENBSD_4_6_BASE:1.6
	OPENBSD_4_5:1.6.0.2
	OPENBSD_4_5_BASE:1.6
	PERL_5_10_0:1.1.1.5
	OPENBSD_4_4:1.5.0.18
	OPENBSD_4_4_BASE:1.5
	OPENBSD_4_3:1.5.0.16
	OPENBSD_4_3_BASE:1.5
	OPENBSD_4_2:1.5.0.14
	OPENBSD_4_2_BASE:1.5
	OPENBSD_4_1:1.5.0.12
	OPENBSD_4_1_BASE:1.5
	OPENBSD_4_0:1.5.0.10
	OPENBSD_4_0_BASE:1.5
	PERL_5_8_8:1.1.1.4
	OPENBSD_3_9:1.5.0.8
	OPENBSD_3_9_BASE:1.5
	OPENBSD_3_8:1.5.0.6
	OPENBSD_3_8_BASE:1.5
	OPENBSD_3_7:1.5.0.4
	OPENBSD_3_7_BASE:1.5
	PERL_5_8_6:1.1.1.4
	OPENBSD_3_6:1.5.0.2
	OPENBSD_3_6_BASE:1.5
	PERL_5_8_5:1.1.1.4
	PERL_5_8_3:1.1.1.4
	OPENBSD_3_5:1.4.0.2
	OPENBSD_3_5_BASE:1.4
	PERL_5_8_2:1.1.1.3
	OPENBSD_3_4:1.3.0.16
	OPENBSD_3_4_BASE:1.3
	OPENBSD_3_3:1.3.0.14
	OPENBSD_3_3_BASE:1.3
	PERL_5_8_0:1.1.1.2
	OPENBSD_3_2:1.3.0.12
	OPENBSD_3_2_BASE:1.3
	OPENBSD_3_1:1.3.0.10
	OPENBSD_3_1_BASE:1.3
	OPENBSD_3_0:1.3.0.8
	OPENBSD_3_0_BASE:1.3
	PERL_5_6_1:1.1.1.2
	OPENBSD_2_9:1.3.0.6
	OPENBSD_2_9_BASE:1.3
	OPENBSD_2_8:1.3.0.4
	OPENBSD_2_8_BASE:1.3
	OPENBSD_2_7:1.3.0.2
	OPENBSD_2_7_BASE:1.3
	PERL_5_6_0:1.1.1.2
	OPENBSD_2_6:1.2.0.2
	OPENBSD_2_6_BASE:1.2
	PERL_500503:1.1.1.1
	CPAN:1.1.1
	OPENBSD_2_5:1.1.0.6
	OPENBSD_2_5_BASE:1.1
	OPENBSD_2_4:1.1.0.4
	OPENBSD_2_4_BASE:1.1
	OPENBSD_2_3:1.1.0.2
	OPENBSD_2_3_BASE:1.1;
locks; strict;
comment	@ * @;
expand	@o@;


1.6
date	2008.09.29.17.36.15;	author millert;	state Exp;
branches;
next	1.5;

1.5
date	2004.04.07.21.33.07;	author millert;	state Exp;
branches;
next	1.4;

1.4
date	2003.12.03.03.02.43;	author millert;	state Exp;
branches;
next	1.3;

1.3
date	2000.04.06.17.07.16;	author millert;	state Exp;
branches;
next	1.2;

1.2
date	99.04.29.22.52.06;	author millert;	state Exp;
branches;
next	1.1;

1.1
date	97.11.30.07.58.53;	author millert;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	99.04.29.22.41.11;	author millert;	state Exp;
branches;
next	1.1.1.2;

1.1.1.2
date	2000.04.06.16.10.19;	author millert;	state Exp;
branches;
next	1.1.1.3;

1.1.1.3
date	2003.12.03.02.44.19;	author millert;	state Exp;
branches;
next	1.1.1.4;

1.1.1.4
date	2004.04.07.21.13.31;	author millert;	state Exp;
branches;
next	1.1.1.5;

1.1.1.5
date	2008.09.29.17.18.50;	author millert;	state Exp;
branches;
next	;


desc
@@


1.6
log
@fix conflicts and merge in local changes to perl 5.10.0
@
text
@#ifndef __PLAN9ISH_H__
#define __PLAN9ISH_H__

/*
 * The following symbols are defined if your operating system supports
 * functions by that name.  All Unixes I know of support them, thus they
 * are not checked by the configuration script, but are directly defined
 * here.
 */

/* HAS_IOCTL:
 *	This symbol, if defined, indicates that the ioctl() routine is
 *	available to set I/O characteristics
 */
#define	HAS_IOCTL		/**/
 
/* HAS_UTIME:
 *	This symbol, if defined, indicates that the routine utime() is
 *	available to update the access and modification times of files.
 */
#define HAS_UTIME		/**/

/* HAS_GROUP
 *	This symbol, if defined, indicates that the getgrnam() and
 *	getgrgid() routines are available to get group entries.
 *	The getgrent() has a separate definition, HAS_GETGRENT.
 */
/*#define HAS_GROUP		/**/

/* HAS_PASSWD
 *	This symbol, if defined, indicates that the getpwnam() and
 *	getpwuid() routines are available to get password entries.
 *	The getpwent() has a separate definition, HAS_GETPWENT.
 */
/*#define HAS_PASSWD		/**/

#define HAS_KILL
#define HAS_WAIT
  
/* UNLINK_ALL_VERSIONS:
 *	This symbol, if defined, indicates that the program should arrange
 *	to remove all versions of a file if unlink() is called.  This is
 *	probably only relevant for VMS.
 */
/* #define UNLINK_ALL_VERSIONS		/**/

/* PLAN9:
 *	This symbol, if defined, indicates that the program is running under
 *	Plan 9.  
 */
#ifndef PLAN9
#define PLAN9		/**/
#endif

/* USEMYBINMODE
 *	This symbol, if defined, indicates that the program should
 *	use the routine my_binmode(FILE *fp, char iotype, int mode) to insure
 *	that a file is in "binary" mode -- that is, that no translation
 *	of bytes occurs on read or write operations.
 */
#undef USEMYBINMODE

/* Stat_t:
 *	This symbol holds the type used to declare buffers for information
 *	returned by stat().  It's usually just struct stat.  It may be necessary
 *	to include <sys/stat.h> and <sys/types.h> to get any typedef'ed
 *	information.
 */
#define Stat_t struct stat

/* USE_STAT_RDEV:
*	This symbol is defined if this system has a stat structure declaring
*	st_rdev
*/
#undef USE_STAT_RDEV		/**/

/* ACME_MESS:
 *	This symbol, if defined, indicates that error messages should be 
 *	should be generated in a format that allows the use of the Acme
 *	GUI/editor's autofind feature.
 */
#define ACME_MESS	/**/

/* ALTERNATE_SHEBANG:
 *	This symbol, if defined, contains a "magic" string which may be used
 *	as the first line of a Perl program designed to be executed directly
 *	by name, instead of the standard Unix #!.  If ALTERNATE_SHEBANG
 *	begins with a character other then #, then Perl will only treat
 *	it as a command line if if finds the string "perl" in the first
 *	word; otherwise it's treated as the first line of code in the script.
 *	(IOW, Perl won't hand off to another interpreter via an alternate
 *	shebang sequence that might be legal Perl code.)
 */
/* #define ALTERNATE_SHEBANG "#!" / **/

#include <signal.h>

#ifndef SIGABRT
#    define SIGABRT SIGILL
#endif
#ifndef SIGILL
#    define SIGILL 6         /* blech */
#endif
#define ABORT() kill(PerlProc_getpid(),SIGABRT);

#define BIT_BUCKET "/dev/null"
#define PERL_SYS_INIT_BODY(c,v)				    \
	MALLOC_CHECK_TAINT2(*c,*v) PERLIO_INIT; MALLOC_INIT
#define dXSUB_SYS
#define PERL_SYS_TERM_BODY()	PERLIO_TERM; MALLOC_TERM

/*
 * fwrite1() should be a routine with the same calling sequence as fwrite(),
 * but which outputs all of the bytes requested as a single stream (unlike
 * fwrite() itself, which on some systems outputs several distinct records
 * if the number_of_items parameter is >1).
 */
#define fwrite1 fwrite

#define Stat(fname,bufptr) stat((fname),(bufptr))
#define Fstat(fd,bufptr)   fstat((fd),(bufptr))
#define Fflush(fp)         fflush(fp)
#define Mkdir(path,mode)   mkdir((path),(mode))

/* getenv related stuff */
#define my_getenv(var) getenv(var)
/* Plan 9 prefers getenv("home") to getenv("HOME")
#define HOME home

/* For use by POSIX.xs */
extern int tcsendbreak(int, int);

#define CONDOP_SIZE 4 /* The Plan 9 compiler cannot return quads from ?: */

#undef HAS_SYMLINK	/* Plan 9 doesn't really have these. */
#undef HAS_LSTAT
#undef HAS_READLINK

#endif /* __PLAN9ISH_H__ */
@


1.5
log
@merge local changes into perl-5.8.3
@
text
@d107 2
a108 1
#define PERL_SYS_INIT(c,v)	MALLOC_CHECK_TAINT2(*c,*v) MALLOC_INIT
d110 1
a110 1
#define PERL_SYS_TERM()		MALLOC_TERM
@


1.4
log
@Resolve conflicts for perl 5.8.2, remove old files, and add OpenBSD-specific scaffolding
@
text
@d96 1
a96 3
#if !defined(NSIG) || defined(M_UNIX) || defined(M_XENIX)
# include <signal.h>
#endif
@


1.3
log
@perl-5.6.0 + local changes
@
text
@d109 1
a109 1
#define PERL_SYS_INIT(c,v)	MALLOC_INIT
d133 6
@


1.2
log
@perl5.005_03 (stock)
@
text
@d57 1
a57 1
 *	use the routine my_binmode(FILE *fp, char iotype) to insure
d106 1
a106 1
#define ABORT() kill(getpid(),SIGABRT);
@


1.1
log
@perl 5.004_04
@
text
@d24 3
a26 3
 *	This symbol, if defined, indicates that the getgrnam(),
 *	getgrgid(), and getgrent() routines are available to 
 *	get group entries.
d31 3
a33 3
 *	This symbol, if defined, indicates that the getpwnam(),
 *	getpwuid(), and getpwent() routines are available to 
 *	get password entries.
d63 8
d109 1
a109 1
#define PERL_SYS_INIT(c,v)
d111 1
a111 1
#define PERL_SYS_TERM()
@


1.1.1.1
log
@perl5.005_03
@
text
@d24 3
a26 3
 *	This symbol, if defined, indicates that the getgrnam() and
 *	getgrgid() routines are available to get group entries.
 *	The getgrent() has a separate definition, HAS_GETGRENT.
d31 3
a33 3
 *	This symbol, if defined, indicates that the getpwnam() and
 *	getpwuid() routines are available to get password entries.
 *	The getpwent() has a separate definition, HAS_GETPWENT.
a62 8
/* Stat_t:
 *	This symbol holds the type used to declare buffers for information
 *	returned by stat().  It's usually just struct stat.  It may be necessary
 *	to include <sys/stat.h> and <sys/types.h> to get any typedef'ed
 *	information.
 */
#define Stat_t struct stat

d101 1
a101 1
#define PERL_SYS_INIT(c,v)	MALLOC_INIT
d103 1
a103 1
#define PERL_SYS_TERM()		MALLOC_TERM
@


1.1.1.2
log
@virgin perl 5.6.0
@
text
@d57 1
a57 1
 *	use the routine my_binmode(FILE *fp, char iotype, int mode) to insure
d106 1
a106 1
#define ABORT() kill(PerlProc_getpid(),SIGABRT);
@


1.1.1.3
log
@perl 5.8.2 from CPAN
@
text
@d109 1
a109 1
#define PERL_SYS_INIT(c,v)	MALLOC_CHECK_TAINT2(*c,*v) MALLOC_INIT
a132 6

#define CONDOP_SIZE 4 /* The Plan 9 compiler cannot return quads from ?: */

#undef HAS_SYMLINK	/* Plan 9 doesn't really have these. */
#undef HAS_LSTAT
#undef HAS_READLINK
@


1.1.1.4
log
@perl 5.8.3 from CPAN
@
text
@d96 3
a98 1
#include <signal.h>
@


1.1.1.5
log
@import perl 5.10.0 from CPAN
@
text
@d107 1
a107 2
#define PERL_SYS_INIT_BODY(c,v)				    \
	MALLOC_CHECK_TAINT2(*c,*v) PERLIO_INIT; MALLOC_INIT
d109 1
a109 1
#define PERL_SYS_TERM_BODY()	PERLIO_TERM; MALLOC_TERM
@


