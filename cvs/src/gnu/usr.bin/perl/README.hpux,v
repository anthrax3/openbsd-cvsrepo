head	1.2;
access;
symbols
	OPENBSD_6_1_BASE:1.2
	OPENBSD_6_0:1.1.1.12.0.12
	OPENBSD_6_0_BASE:1.1.1.12
	OPENBSD_5_9:1.1.1.12.0.6
	OPENBSD_5_9_BASE:1.1.1.12
	OPENBSD_5_8:1.1.1.12.0.8
	OPENBSD_5_8_BASE:1.1.1.12
	PERL_5_20_2:1.1.1.12
	OPENBSD_5_7:1.1.1.12.0.2
	OPENBSD_5_7_BASE:1.1.1.12
	PERL_5_20_1:1.1.1.12
	OPENBSD_5_6:1.1.1.12.0.4
	OPENBSD_5_6_BASE:1.1.1.12
	PERL_5_18_2:1.1.1.12
	PERL:1.1.1
	OPENBSD_5_5:1.1.1.11.0.6
	OPENBSD_5_5_BASE:1.1.1.11
	OPENBSD_5_4:1.1.1.11.0.2
	OPENBSD_5_4_BASE:1.1.1.11
	PERL_5_16_3:1.1.1.11
	OPENBSD_5_3:1.1.1.10.0.10
	OPENBSD_5_3_BASE:1.1.1.10
	OPENBSD_5_2:1.1.1.10.0.8
	OPENBSD_5_2_BASE:1.1.1.10
	OPENBSD_5_1_BASE:1.1.1.10
	OPENBSD_5_1:1.1.1.10.0.6
	OPENBSD_5_0:1.1.1.10.0.4
	OPENBSD_5_0_BASE:1.1.1.10
	OPENBSD_4_9:1.1.1.10.0.2
	OPENBSD_4_9_BASE:1.1.1.10
	PERL_5_12_2:1.1.1.10
	OPENBSD_4_8:1.1.1.9.0.4
	OPENBSD_4_8_BASE:1.1.1.9
	OPENBSD_4_7:1.1.1.9.0.2
	OPENBSD_4_7_BASE:1.1.1.9
	PERL_5_10_1:1.1.1.9
	OPENBSD_4_6:1.1.1.8.0.6
	OPENBSD_4_6_BASE:1.1.1.8
	OPENBSD_4_5:1.1.1.8.0.2
	OPENBSD_4_5_BASE:1.1.1.8
	PERL_5_10_0:1.1.1.8
	OPENBSD_4_4:1.1.1.7.0.10
	OPENBSD_4_4_BASE:1.1.1.7
	OPENBSD_4_3:1.1.1.7.0.8
	OPENBSD_4_3_BASE:1.1.1.7
	OPENBSD_4_2:1.1.1.7.0.6
	OPENBSD_4_2_BASE:1.1.1.7
	OPENBSD_4_1:1.1.1.7.0.4
	OPENBSD_4_1_BASE:1.1.1.7
	OPENBSD_4_0:1.1.1.7.0.2
	OPENBSD_4_0_BASE:1.1.1.7
	PERL_5_8_8:1.1.1.7
	OPENBSD_3_9:1.1.1.6.0.6
	OPENBSD_3_9_BASE:1.1.1.6
	OPENBSD_3_8:1.1.1.6.0.4
	OPENBSD_3_8_BASE:1.1.1.6
	OPENBSD_3_7:1.1.1.6.0.2
	OPENBSD_3_7_BASE:1.1.1.6
	PERL_5_8_6:1.1.1.6
	OPENBSD_3_6:1.1.1.5.0.2
	OPENBSD_3_6_BASE:1.1.1.5
	PERL_5_8_5:1.1.1.5
	PERL_5_8_3:1.1.1.4
	OPENBSD_3_5:1.1.1.4.0.2
	OPENBSD_3_5_BASE:1.1.1.4
	PERL_5_8_2:1.1.1.4
	OPENBSD_3_4:1.1.1.3.0.4
	OPENBSD_3_4_BASE:1.1.1.3
	OPENBSD_3_3:1.1.1.3.0.2
	OPENBSD_3_3_BASE:1.1.1.3
	PERL_5_8_0:1.1.1.3
	OPENBSD_3_2:1.1.1.2.0.6
	OPENBSD_3_2_BASE:1.1.1.2
	OPENBSD_3_1:1.1.1.2.0.4
	OPENBSD_3_1_BASE:1.1.1.2
	OPENBSD_3_0:1.1.1.2.0.2
	OPENBSD_3_0_BASE:1.1.1.2
	PERL_5_6_1:1.1.1.2
	OPENBSD_2_9:1.1.1.1.0.8
	OPENBSD_2_9_BASE:1.1.1.1
	OPENBSD_2_8:1.1.1.1.0.6
	OPENBSD_2_8_BASE:1.1.1.1
	OPENBSD_2_7:1.1.1.1.0.4
	OPENBSD_2_7_BASE:1.1.1.1
	PERL_5_6_0:1.1.1.1
	OPENBSD_2_6:1.1.1.1.0.2
	OPENBSD_2_6_BASE:1.1.1.1
	PERL_500503:1.1.1.1
	CPAN:1.1.1;
locks; strict;
comment	@# @;
expand	@o@;


1.2
date	2017.02.05.00.31.52;	author afresh1;	state Exp;
branches;
next	1.1;
commitid	cxJ08BvJA9Pt2PTM;

1.1
date	99.04.29.22.36.56;	author millert;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	99.04.29.22.36.56;	author millert;	state Exp;
branches;
next	1.1.1.2;

1.1.1.2
date	2001.05.24.18.21.52;	author millert;	state Exp;
branches;
next	1.1.1.3;

1.1.1.3
date	2002.10.27.22.14.50;	author millert;	state Exp;
branches;
next	1.1.1.4;

1.1.1.4
date	2003.12.03.02.43.35;	author millert;	state Exp;
branches;
next	1.1.1.5;

1.1.1.5
date	2004.08.09.17.45.36;	author millert;	state Exp;
branches;
next	1.1.1.6;

1.1.1.6
date	2005.01.15.21.16.34;	author millert;	state Exp;
branches;
next	1.1.1.7;

1.1.1.7
date	2006.03.28.18.47.40;	author millert;	state Exp;
branches;
next	1.1.1.8;

1.1.1.8
date	2008.09.29.17.18.03;	author millert;	state Exp;
branches;
next	1.1.1.9;

1.1.1.9
date	2009.10.12.18.10.28;	author millert;	state Exp;
branches;
next	1.1.1.10;

1.1.1.10
date	2010.09.24.14.48.32;	author millert;	state Exp;
branches;
next	1.1.1.11;

1.1.1.11
date	2013.03.25.20.06.36;	author sthen;	state Exp;
branches;
next	1.1.1.12;

1.1.1.12
date	2014.03.24.14.58.47;	author afresh1;	state Exp;
branches;
next	;


desc
@@


1.2
log
@Fix merge issues, remove excess files - match perl-5.24.1 dist
@
text
@If you read this file _as_is_, just ignore the funny characters you see.
It is written in the POD format (see pod/perlpod.pod) which is specially
designed to be readable as is.

=head1 NAME

perlhpux - Perl version 5 on Hewlett-Packard Unix (HP-UX) systems

=head1 DESCRIPTION

This document describes various features of HP's Unix operating system
(HP-UX) that will affect how Perl version 5 (hereafter just Perl) is
compiled and/or runs.

=head2 Using perl as shipped with HP-UX

Application release September 2001, HP-UX 11.00 is the first to ship
with Perl. By the time it was perl-5.6.1 in /opt/perl. The first
occurrence is on CD 5012-7954 and can be installed using

  swinstall -s /cdrom perl

assuming you have mounted that CD on /cdrom.

That build was a portable hppa-1.1 multithread build that supports large
files compiled with gcc-2.9-hppa-991112.

If you perform a new installation, then (a newer) Perl will be installed
automatically.  Pre-installed HP-UX systems now have more recent versions
of Perl and the updated modules.

The official (threaded) builds from HP, as they are shipped on the
Application DVD/CD's are available on
L<http://www.software.hp.com/portal/swdepot/displayProductInfo.do?productNumber=PERL>
for both PA-RISC and IPF (Itanium Processor Family). They are built
with the HP ANSI-C compiler. Up till 5.8.8 that was done by ActiveState.

To see what version is included on the DVD (assumed here to be mounted
on /cdrom), issue this command:

  # swlist -s /cdrom perl
  # perl           D.5.8.8.B  5.8.8 Perl Programming Language
    perl.Perl5-32  D.5.8.8.B  32-bit 5.8.8 Perl Programming Language
                                           with Extensions
    perl.Perl5-64  D.5.8.8.B  64-bit 5.8.8 Perl Programming Language
                                           with Extensions

To see what is installed on your system:

  # swlist -R perl
  # perl                    E.5.8.8.J  Perl Programming Language
  # perl.Perl5-32           E.5.8.8.J  32-bit Perl Programming Language
                                       with Extensions
    perl.Perl5-32.PERL-MAN  E.5.8.8.J  32-bit Perl Man Pages for IA
    perl.Perl5-32.PERL-RUN  E.5.8.8.J  32-bit Perl Binaries for IA
  # perl.Perl5-64           E.5.8.8.J  64-bit Perl Programming Language
                                       with Extensions
    perl.Perl5-64.PERL-MAN  E.5.8.8.J  64-bit Perl Man Pages for IA
    perl.Perl5-64.PERL-RUN  E.5.8.8.J  64-bit Perl Binaries for IA

=head2 Using perl from HP's porting centre

HP porting centre tries to keep up with customer demand and release
updates from the Open Source community. Having precompiled Perl binaries
available is obvious, though "up-to-date" is something relative. At the
moment of writing only perl-5.10.1 was available (with 5.16.3 being the
latest stable release from the porters point of view).

The HP porting centres are limited in what systems they are allowed
to port to and they usually choose the two most recent OS versions
available.

HP has asked the porting centre to move Open Source binaries
from /opt to /usr/local, so binaries produced since the start
of July 2002 are located in /usr/local.

One of HP porting centres URL's is L<http://hpux.connect.org.uk/>
The port currently available is built with GNU gcc.

=head2 Other prebuilt perl binaries

To get even more recent perl depots for the whole range of HP-UX, visit
H.Merijn Brand's site at L<http://mirrors.develooper.com/hpux/#Perl>.
Carefully read the notes to see if the available versions suit your needs.

=head2 Compiling Perl 5 on HP-UX

When compiling Perl, you must use an ANSI C compiler.  The C compiler
that ships with all HP-UX systems is a K&R compiler that should only be
used to build new kernels.

Perl can be compiled with either HP's ANSI C compiler or with gcc.  The
former is recommended, as not only can it compile Perl with no
difficulty, but also can take advantage of features listed later that
require the use of HP compiler-specific command-line flags.

If you decide to use gcc, make sure your installation is recent and
complete, and be sure to read the Perl INSTALL file for more gcc-specific
details.

=head2 PA-RISC

HP's HP9000 Unix systems run on HP's own Precision Architecture
(PA-RISC) chip.  HP-UX used to run on the Motorola MC68000 family of
chips, but any machine with this chip in it is quite obsolete and this
document will not attempt to address issues for compiling Perl on the
Motorola chipset.

The version of PA-RISC at the time of this document's last update is 2.0,
which is also the last there will be. HP PA-RISC systems are usually
referred to with model description "HP 9000". The last CPU in this series
is the PA-8900.  Support for PA-RISC architectured machines officially
ends as shown in the following table:

   PA-RISC End-of-Life Roadmap
 +--------+----------------+----------------+-----------------+
 | HP9000 | Superdome      | PA-8700        | Spring 2011     |
 | 4-128  |                | PA-8800/sx1000 | Summer 2012     |
 | cores  |                | PA-8900/sx1000 | 2014            |
 |        |                | PA-8900/sx2000 | 2015            |
 +--------+----------------+----------------+-----------------+
 | HP9000 | rp7410, rp8400 | PA-8700        | Spring 2011     |
 | 2-32   | rp7420, rp8420 | PA-8800/sx1000 | 2012            |
 | cores  | rp7440, rp8440 | PA-8900/sx1000 | Autumn 2013     |
 |        |                | PA-8900/sx2000 | 2015            |
 +--------+----------------+----------------+-----------------+
 | HP9000 | rp44x0         | PA-8700        | Spring 2011     |
 | 1-8    |                | PA-8800/rp44x0 | 2012            |
 | cores  |                | PA-8900/rp44x0 | 2014            |
 +--------+----------------+----------------+-----------------+
 | HP9000 | rp34x0         | PA-8700        | Spring 2011     |
 | 1-4    |                | PA-8800/rp34x0 | 2012            |
 | cores  |                | PA-8900/rp34x0 | 2014            |
 +--------+----------------+----------------+-----------------+

From L<http://www.hp.com/products1/evolution/9000/faqs.html>

 The last order date for HP 9000 systems was December 31, 2008.

A complete list of models at the time the OS was built is in the file
/usr/sam/lib/mo/sched.models. The first column corresponds to the last
part of the output of the "model" command.  The second column is the
PA-RISC version and the third column is the exact chip type used.
(Start browsing at the bottom to prevent confusion ;-)

  # model
  9000/800/L1000-44
  # grep L1000-44 /usr/sam/lib/mo/sched.models
  L1000-44        2.0     PA8500

=head2 Portability Between PA-RISC Versions

An executable compiled on a PA-RISC 2.0 platform will not execute on a
PA-RISC 1.1 platform, even if they are running the same version of
HP-UX.  If you are building Perl on a PA-RISC 2.0 platform and want that
Perl to also run on a PA-RISC 1.1, the compiler flags +DAportable and
+DS32 should be used.

It is no longer possible to compile PA-RISC 1.0 executables on either
the PA-RISC 1.1 or 2.0 platforms.  The command-line flags are accepted,
but the resulting executable will not run when transferred to a PA-RISC
1.0 system.

=head2 PA-RISC 1.0

The original version of PA-RISC, HP no longer sells any system with this chip.

The following systems contained PA-RISC 1.0 chips:

  600, 635, 645, 808, 815, 822, 825, 832, 834, 835, 840, 842, 845, 850,
  852, 855, 860, 865, 870, 890

=head2 PA-RISC 1.1

An upgrade to the PA-RISC design, it shipped for many years in many different
system.

The following systems contain with PA-RISC 1.1 chips:

  705, 710, 712, 715, 720, 722, 725, 728, 730, 735, 742, 743, 744, 745,
  747, 750, 755, 770, 777, 778, 779, 800, 801, 803, 806, 807, 809, 811,
  813, 816, 817, 819, 821, 826, 827, 829, 831, 837, 839, 841, 847, 849,
  851, 856, 857, 859, 867, 869, 877, 887, 891, 892, 897, A180, A180C,
  B115, B120, B132L, B132L+, B160L, B180L, C100, C110, C115, C120,
  C160L, D200, D210, D220, D230, D250, D260, D310, D320, D330, D350,
  D360, D410, DX0, DX5, DXO, E25, E35, E45, E55, F10, F20, F30, G30,
  G40, G50, G60, G70, H20, H30, H40, H50, H60, H70, I30, I40, I50, I60,
  I70, J200, J210, J210XC, K100, K200, K210, K220, K230, K400, K410,
  K420, S700i, S715, S744, S760, T500, T520

=head2 PA-RISC 2.0

The most recent upgrade to the PA-RISC design, it added support for
64-bit integer data.

As of the date of this document's last update, the following systems
contain PA-RISC 2.0 chips:

  700, 780, 781, 782, 783, 785, 802, 804, 810, 820, 861, 871, 879, 889,
  893, 895, 896, 898, 899, A400, A500, B1000, B2000, C130, C140, C160,
  C180, C180+, C180-XP, C200+, C400+, C3000, C360, C3600, CB260, D270,
  D280, D370, D380, D390, D650, J220, J2240, J280, J282, J400, J410,
  J5000, J5500XM, J5600, J7000, J7600, K250, K260, K260-EG, K270, K360,
  K370, K380, K450, K460, K460-EG, K460-XP, K470, K570, K580, L1000,
  L2000, L3000, N4000, R380, R390, SD16000, SD32000, SD64000, T540,
  T600, V2000, V2200, V2250, V2500, V2600

Just before HP took over Compaq, some systems were renamed. the link
that contained the explanation is dead, so here's a short summary:

  HP 9000 A-Class servers, now renamed HP Server rp2400 series.
  HP 9000 L-Class servers, now renamed HP Server rp5400 series.
  HP 9000 N-Class servers, now renamed HP Server rp7400.

  rp2400, rp2405, rp2430, rp2450, rp2470, rp3410, rp3440, rp4410,
  rp4440, rp5400, rp5405, rp5430, rp5450, rp5470, rp7400, rp7405,
  rp7410, rp7420, rp7440, rp8400, rp8420, rp8440, Superdome

The current naming convention is:

  aadddd
  ||||`+- 00 - 99 relative capacity & newness (upgrades, etc.)
  |||`--- unique number for each architecture to ensure different
  |||     systems do not have the same numbering across
  |||     architectures
  ||`---- 1 - 9 identifies family and/or relative positioning
  ||
  |`----- c = ia32 (cisc)
  |       p = pa-risc
  |       x = ia-64 (Itanium & Itanium 2)
  |       h = housing
  `------ t = tower
          r = rack optimized
          s = super scalable
          b = blade
          sa = appliance

=head2 Itanium Processor Family (IPF) and HP-UX

HP-UX also runs on the new Itanium processor.  This requires the use
of a different version of HP-UX (currently 11.23 or 11i v2), and with
the exception of a few differences detailed below and in later sections,
Perl should compile with no problems.

Although PA-RISC binaries can run on Itanium systems, you should not
attempt to use a PA-RISC version of Perl on an Itanium system.  This is
because shared libraries created on an Itanium system cannot be loaded
while running a PA-RISC executable.

HP Itanium 2 systems are usually referred to with model description
"HP Integrity".

=head2 Itanium, Itanium 2 & Madison 6

HP also ships servers with the 128-bit Itanium processor(s). The cx26x0
is told to have Madison 6. As of the date of this document's last update,
the following systems contain Itanium or Itanium 2 chips (this is likely
to be out of date):

  BL60p, BL860c, BL870c, BL890c, cx2600, cx2620, rx1600, rx1620, rx2600,
  rx2600hptc, rx2620, rx2660, rx2800, rx3600, rx4610, rx4640, rx5670,
  rx6600, rx7420, rx7620, rx7640, rx8420, rx8620, rx8640, rx9610,
  sx1000, sx2000

To see all about your machine, type

  # model
  ia64 hp server rx2600
  # /usr/contrib/bin/machinfo

=head2 HP-UX versions

Not all architectures (PA = PA-RISC, IPF = Itanium Processor Family)
support all versions of HP-UX, here is a short list

  HP-UX version  Kernel  Architecture End-of-factory support
  -------------  ------  ------------ ----------------------------------
  10.20          32 bit  PA           30-Jun-2003
  11.00          32/64   PA           31-Dec-2006
  11.11  11i v1  32/64   PA           31-Dec-2015
  11.22  11i v2     64        IPF     30-Apr-2004
  11.23  11i v2     64   PA & IPF     31-Dec-2015
  11.31  11i v3     64   PA & IPF     31-Dec-2020 (PA) 31-Dec-2022 (IPF)

See for the full list of hardware/OS support and expected end-of-life
L<http://www.hp.com/go/hpuxservermatrix>

=head2 Building Dynamic Extensions on HP-UX

HP-UX supports dynamically loadable libraries (shared libraries).
Shared libraries end with the suffix .sl.  On Itanium systems,
they end with the suffix .so.

Shared libraries created on a platform using a particular PA-RISC
version are not usable on platforms using an earlier PA-RISC version by
default.  However, this backwards compatibility may be enabled using the
same +DAportable compiler flag (with the same PA-RISC 1.0 caveat
mentioned above).

Shared libraries created on an Itanium platform cannot be loaded on
a PA-RISC platform.  Shared libraries created on a PA-RISC platform
can only be loaded on an Itanium platform if it is a PA-RISC executable
that is attempting to load the PA-RISC library.  A PA-RISC shared
library cannot be loaded into an Itanium executable nor vice-versa.

To create a shared library, the following steps must be performed:

  1. Compile source modules with +z or +Z flag to create a .o module
     which contains Position-Independent Code (PIC).  The linker will
     tell you in the next step if +Z was needed.
     (For gcc, the appropriate flag is -fpic or -fPIC.)

  2. Link the shared library using the -b flag.  If the code calls
     any functions in other system libraries (e.g., libm), it must
     be included on this line.

(Note that these steps are usually handled automatically by the extension's
Makefile).

If these dependent libraries are not listed at shared library creation
time, you will get fatal "Unresolved symbol" errors at run time when the
library is loaded.

You may create a shared library that refers to another library, which
may be either an archive library or a shared library.  If this second
library is a shared library, this is called a "dependent library".  The
dependent library's name is recorded in the main shared library, but it
is not linked into the shared library.  Instead, it is loaded when the
main shared library is loaded.  This can cause problems if you build an
extension on one system and move it to another system where the
libraries may not be located in the same place as on the first system.

If the referred library is an archive library, then it is treated as a
simple collection of .o modules (all of which must contain PIC).  These
modules are then linked into the shared library.

Note that it is okay to create a library which contains a dependent
library that is already linked into perl.

Some extensions, like DB_File and Compress::Zlib use/require prebuilt
libraries for the perl extensions/modules to work. If these libraries
are built using the default configuration, it might happen that you
run into an error like "invalid loader fixup" during load phase.
HP is aware of this problem.  Search the HP-UX cxx-dev forums for
discussions about the subject.  The short answer is that B<everything>
(all libraries, everything) must be compiled with C<+z> or C<+Z> to be
PIC (position independent code).  (For gcc, that would be
C<-fpic> or C<-fPIC>).  In HP-UX 11.00 or newer the linker
error message should tell the name of the offending object file.

A more general approach is to intervene manually, as with an example for
the DB_File module, which requires SleepyCat's libdb.sl:

  # cd .../db-3.2.9/build_unix
  # vi Makefile
  ... add +Z to all cflags to create shared objects
  CFLAGS=         -c $(CPPFLAGS) +Z -Ae +O2 +Onolimit \
                  -I/usr/local/include -I/usr/include/X11R6
  CXXFLAGS=       -c $(CPPFLAGS) +Z -Ae +O2 +Onolimit \
                  -I/usr/local/include -I/usr/include/X11R6

  # make clean
  # make
  # mkdir tmp
  # cd tmp
  # ar x ../libdb.a
  # ld -b -o libdb-3.2.sl *.o
  # mv libdb-3.2.sl /usr/local/lib
  # rm *.o
  # cd /usr/local/lib
  # rm -f libdb.sl
  # ln -s libdb-3.2.sl libdb.sl

  # cd .../DB_File-1.76
  # make distclean
  # perl Makefile.PL
  # make
  # make test
  # make install

As of db-4.2.x it is no longer needed to do this by hand. Sleepycat
has changed the configuration process to add +z on HP-UX automatically.

  # cd .../db-4.2.25/build_unix
  # env CFLAGS=+DD64 LDFLAGS=+DD64 ../dist/configure

should work to generate 64bit shared libraries for HP-UX 11.00 and 11i.

It is no longer possible to link PA-RISC 1.0 shared libraries (even
though the command-line flags are still present).

PA-RISC and Itanium object files are not interchangeable.  Although
you may be able to use ar to create an archive library of PA-RISC
object files on an Itanium system, you cannot link against it using
an Itanium link editor.

=head2 The HP ANSI C Compiler

When using this compiler to build Perl, you should make sure that the
flag -Aa is added to the cpprun and cppstdin variables in the config.sh
file (though see the section on 64-bit perl below). If you are using a
recent version of the Perl distribution, these flags are set automatically.

Even though HP-UX 10.20 and 11.00 are not actively maintained by HP
anymore, updates for the HP ANSI C compiler are still available from
time to time, and it might be advisable to see if updates are applicable.
At the moment of writing, the latests available patches for 11.00 that
should be applied are PHSS_35098, PHSS_35175, PHSS_35100, PHSS_33036,
and PHSS_33902). If you have a SUM account, you can use it to search
for updates/patches. Enter "ANSI" as keyword.

=head2 The GNU C Compiler

When you are going to use the GNU C compiler (gcc), and you don't have
gcc yet, you can either build it yourself from the sources (available
from e.g. L<http://gcc.gnu.org/mirrors.html>) or fetch
a prebuilt binary from the HP porting center
at L<http://hpux.connect.org.uk/hppd/cgi-bin/search?term=gcc&Search=Search>
or from the DSPP (you need to be a member) at
L<http://h21007.www2.hp.com/portal/site/dspp/menuitem.863c3e4cbcdc3f3515b49c108973a801?ciid=2a08725cc2f02110725cc2f02110275d6e10RCRD&jumpid=reg_r1002_usen_c-001_title_r0001>
(Browse through the list, because there are often multiple versions of
the same package available).

Most mentioned distributions are depots. H.Merijn Brand has made prebuilt
gcc binaries available on L<http://mirrors.develooper.com/hpux/> and/or
L<http://www.cmve.net/~merijn/> for HP-UX 10.20 (only 32bit), HP-UX 11.00,
HP-UX 11.11 (HP-UX 11i v1), and HP-UX 11.23 (HP-UX 11i v2 PA-RISC) in both
32- and 64-bit versions. For HP-UX 11.23 IPF and HP-UX 11.31 IPF depots are
available too. The IPF versions do not need two versions of GNU gcc.

On PA-RISC you need a different compiler for 32-bit applications and for
64-bit applications. On PA-RISC, 32-bit objects and 64-bit objects do
not mix. Period. There is no different behaviour for HP C-ANSI-C or GNU
gcc. So if you require your perl binary to use 64-bit libraries, like
Oracle-64bit, you MUST build a 64-bit perl.

Building a 64-bit capable gcc on PA-RISC from source is possible only when
you have the HP C-ANSI C compiler or an already working 64-bit binary of
gcc available. Best performance for perl is achieved with HP's native
compiler.

=head2 Using Large Files with Perl on HP-UX

Beginning with HP-UX version 10.20, files larger than 2GB (2^31 bytes)
may be created and manipulated.  Three separate methods of doing this
are available.  Of these methods, the best method for Perl is to compile
using the -Duselargefiles flag to Configure.  This causes Perl to be
compiled using structures and functions in which these are 64 bits wide,
rather than 32 bits wide.  (Note that this will only work with HP's ANSI
C compiler.  If you want to compile Perl using gcc, you will have to get
a version of the compiler that supports 64-bit operations. See above for
where to find it.)

There are some drawbacks to this approach.  One is that any extension
which calls any file-manipulating C function will need to be recompiled
(just follow the usual "perl Makefile.PL; make; make test; make install"
procedure).

The list of functions that will need to recompiled is:
  creat,          fgetpos,        fopen,
  freopen,        fsetpos,        fstat,
  fstatvfs,       fstatvfsdev,    ftruncate,
  ftw,            lockf,          lseek,
  lstat,          mmap,           nftw,
  open,           prealloc,       stat,
  statvfs,        statvfsdev,     tmpfile,
  truncate,       getrlimit,      setrlimit

Another drawback is only valid for Perl versions before 5.6.0.  This
drawback is that the seek and tell functions (both the builtin version
and POSIX module version) will not perform correctly.

It is strongly recommended that you use this flag when you run
Configure.  If you do not do this, but later answer the question about
large files when Configure asks you, you may get a configuration that
cannot be compiled, or that does not function as expected.

=head2 Threaded Perl on HP-UX

It is possible to compile a version of threaded Perl on any version of
HP-UX before 10.30, but it is strongly suggested that you be running on
HP-UX 11.00 at least.

To compile Perl with threads, add -Dusethreads to the arguments of
Configure.  Verify that the -D_POSIX_C_SOURCE=199506L compiler flag is
automatically added to the list of flags.  Also make sure that -lpthread
is listed before -lc in the list of libraries to link Perl with. The
hints provided for HP-UX during Configure will try very hard to get
this right for you.

HP-UX versions before 10.30 require a separate installation of a POSIX
threads library package. Two examples are the HP DCE package, available
on "HP-UX Hardware Extensions 3.0, Install and Core OS, Release 10.20,
April 1999 (B3920-13941)" or the Freely available PTH package, available
on H.Merijn's site (L<http://mirrors.develooper.com/hpux/>). The use of PTH
will be unsupported in perl-5.12 and up and is rather buggy in 5.11.x.

If you are going to use the HP DCE package, the library used for threading
is /usr/lib/libcma.sl, but there have been multiple updates of that
library over time. Perl will build with the first version, but it
will not pass the test suite. Older Oracle versions might be a compelling
reason not to update that library, otherwise please find a newer version
in one of the following patches: PHSS_19739, PHSS_20608, or PHSS_23672

reformatted output:

  d3:/usr/lib 106 > what libcma-*.1
  libcma-00000.1:
     HP DCE/9000 1.5               Module: libcma.sl (Export)
                                   Date: Apr 29 1996 22:11:24
  libcma-19739.1:
     HP DCE/9000 1.5 PHSS_19739-40 Module: libcma.sl (Export)
                                   Date: Sep  4 1999 01:59:07
  libcma-20608.1:
     HP DCE/9000 1.5 PHSS_20608    Module: libcma.1 (Export)
                                   Date: Dec  8 1999 18:41:23
  libcma-23672.1:
     HP DCE/9000 1.5 PHSS_23672    Module: libcma.1 (Export)
                                   Date: Apr  9 2001 10:01:06
  d3:/usr/lib 107 >

If you choose for the PTH package, use swinstall to install pth in
the default location (/opt/pth), and then make symbolic links to the
libraries from /usr/lib

  # cd /usr/lib
  # ln -s /opt/pth/lib/libpth* .

For building perl to support Oracle, it needs to be linked with libcl
and libpthread. So even if your perl is an unthreaded build, these
libraries might be required. See "Oracle on HP-UX" below.

=head2 64-bit Perl on HP-UX

Beginning with HP-UX 11.00, programs compiled under HP-UX can take
advantage of the LP64 programming environment (LP64 means Longs and
Pointers are 64 bits wide), in which scalar variables will be able
to hold numbers larger than 2^32 with complete precision.  Perl has
proven to be consistent and reliable in 64bit mode since 5.8.1 on
all HP-UX 11.xx.

As of the date of this document, Perl is fully 64-bit compliant on
HP-UX 11.00 and up for both cc- and gcc builds. If you are about to
build a 64-bit perl with GNU gcc, please read the gcc section carefully.

Should a user have the need for compiling Perl in the LP64 environment,
use the -Duse64bitall flag to Configure.  This will force Perl to be
compiled in a pure LP64 environment (with the +DD64 flag for HP C-ANSI-C,
with no additional options for GNU gcc 64-bit on PA-RISC, and with
-mlp64 for GNU gcc on Itanium).
If you want to compile Perl using gcc, you will have to get a version of
the compiler that supports 64-bit operations.)

You can also use the -Duse64bitint flag to Configure.  Although there
are some minor differences between compiling Perl with this flag versus
the -Duse64bitall flag, they should not be noticeable from a Perl user's
perspective. When configuring -Duse64bitint using a 64bit gcc on a
pa-risc architecture, -Duse64bitint is silently promoted to -Duse64bitall.

In both cases, it is strongly recommended that you use these flags when
you run Configure.  If you do not use do this, but later answer the
questions about 64-bit numbers when Configure asks you, you may get a
configuration that cannot be compiled, or that does not function as
expected.

=head2 Oracle on HP-UX

Using perl to connect to Oracle databases through DBI and DBD::Oracle
has caused a lot of people many headaches. Read README.hpux in the
DBD::Oracle for much more information. The reason to mention it here
is that Oracle requires a perl built with libcl and libpthread, the
latter even when perl is build without threads. Building perl using
all defaults, but still enabling to build DBD::Oracle later on can be
achieved using

  Configure -A prepend:libswanted='cl pthread ' ...

Do not forget the space before the trailing quote.

Also note that this does not (yet) work with all configurations,
it is known to fail with 64-bit versions of GCC.

=head2 GDBM and Threads on HP-UX

If you attempt to compile Perl with (POSIX) threads on an 11.X system
and also link in the GDBM library, then Perl will immediately core dump
when it starts up.  The only workaround at this point is to relink the
GDBM library under 11.X, then relink it into Perl.

the error might show something like:

Pthread internal error: message: __libc_reinit() failed, file: ../pthreads/pthread.c, line: 1096
Return Pointer is 0xc082bf33
sh: 5345 Quit(coredump)

and Configure will give up.

=head2 NFS filesystems and utime(2) on HP-UX

If you are compiling Perl on a remotely-mounted NFS filesystem, the test
io/fs.t may fail on test #18.  This appears to be a bug in HP-UX and no
fix is currently available.

=head2 HP-UX Kernel Parameters (maxdsiz) for Compiling Perl

By default, HP-UX comes configured with a maximum data segment size of
64MB.  This is too small to correctly compile Perl with the maximum
optimization levels.  You can increase the size of the maxdsiz kernel
parameter through the use of SAM.

When using the GUI version of SAM, click on the Kernel Configuration
icon, then the Configurable Parameters icon.  Scroll down and select
the maxdsiz line.  From the Actions menu, select the Modify Configurable
Parameter item.  Insert the new formula into the Formula/Value box.
Then follow the instructions to rebuild your kernel and reboot your
system.

In general, a value of 256MB (or "256*1024*1024") is sufficient for
Perl to compile at maximum optimization.

=head1 nss_delete core dump from op/pwent or op/grent

You may get a bus error core dump from the op/pwent or op/grent
tests. If compiled with -g you will see a stack trace much like
the following:

  #0  0xc004216c in  () from /usr/lib/libc.2
  #1  0xc00d7550 in __nss_src_state_destr () from /usr/lib/libc.2
  #2  0xc00d7768 in __nss_src_state_destr () from /usr/lib/libc.2
  #3  0xc00d78a8 in nss_delete () from /usr/lib/libc.2
  #4  0xc01126d8 in endpwent () from /usr/lib/libc.2
  #5  0xd1950 in Perl_pp_epwent () from ./perl
  #6  0x94d3c in Perl_runops_standard () from ./perl
  #7  0x23728 in S_run_body () from ./perl
  #8  0x23428 in perl_run () from ./perl
  #9  0x2005c in main () from ./perl

The key here is the C<nss_delete> call.  One workaround for this
bug seems to be to create add to the file F</etc/nsswitch.conf>
(at least) the following lines

  group: files
  passwd: files

Whether you are using NIS does not matter.  Amazingly enough,
the same bug also affects Solaris.

=head1 error: pasting ")" and "l" does not give a valid preprocessing token

There seems to be a broken system header file in HP-UX 11.00 that
breaks perl building in 32bit mode with GNU gcc-4.x causing this
error. The same file for HP-UX 11.11 (even though the file is older)
does not show this failure, and has the correct definition, so the
best fix is to patch the header to match:

 --- /usr/include/inttypes.h  2001-04-20 18:42:14 +0200
 +++ /usr/include/inttypes.h  2000-11-14 09:00:00 +0200
 @@@@ -72,7 +72,7 @@@@
  #define UINT32_C(__c)                   __CONCAT_U__(__c)
  #else /* __LP64 */
  #define INT32_C(__c)                    __CONCAT__(__c,l)
 -#define UINT32_C(__c)                   __CONCAT__(__CONCAT_U__(__c),l)
 +#define UINT32_C(__c)                   __CONCAT__(__c,ul)
  #endif /* __LP64 */

  #define INT64_C(__c)                    __CONCAT_L__(__c,l)

=head1 Redeclaration of "sendpath" with a different storage class specifier

The following compilation warnings may happen in HP-UX releases
earlier than 11.31 but are harmless:

 cc: "/usr/include/sys/socket.h", line 535: warning 562:
    Redeclaration of "sendfile" with a different storage class
    specifier: "sendfile" will have internal linkage.
 cc: "/usr/include/sys/socket.h", line 536: warning 562:
    Redeclaration of "sendpath" with a different storage class
    specifier: "sendpath" will have internal linkage.

They seem to be caused by broken system header files, and also other
open source projects are seeing them.  The following HP-UX patches
should make the warnings go away:

  CR JAGae12001: PHNE_27063
  Warning 562 on sys/socket.h due to redeclaration of prototypes

  CR JAGae16787:
  Warning 562 from socket.h sendpath/sendfile -D_FILEFFSET_BITS=64

  CR JAGae73470 (11.23)
  ER: Compiling socket.h with cc -D_FILEFFSET_BITS=64 warning 267/562

=head1 Miscellaneous

HP-UX 11 Y2K patch "Y2K-1100 B.11.00.B0125 HP-UX Core OS Year 2000
Patch Bundle" has been reported to break the io/fs test #18 which
tests whether utime() can change timestamps.  The Y2K patch seems to
break utime() so that over NFS the timestamps do not get changed
(on local filesystems utime() still works). This has probably been
fixed on your system by now.

=head1 AUTHOR

H.Merijn Brand <h.m.brand@@xs4all.nl>
Jeff Okamoto <okamoto@@corp.hp.com>

With much assistance regarding shared libraries from Marc Sabatella.

=cut
@


1.1
log
@Initial revision
@
text
@d1 3
a3 3
If you read this file _as_is_, just ignore the funny characters you
see. It is written in the POD format (see pod/perlpod.pod) which is
specially designed to be readable as is.
d7 1
a7 1
README.hpux - Perl version 5 on Hewlett-Packard Unix (HP-UX) systems
d11 74
a84 3
This document describes various features of HP's Unix operating system (HP-UX)
that will affect how Perl version 5 (hereafter just Perl) is compiled and/or
runs.
d88 3
a90 3
When compiling Perl, the use of an ANSI C compiler is highly recommended.
The C compiler that ships with all HP-UX systems is a K&R compiler that
should only be used to build new kernels.
d93 7
a99 3
former is recommended, as not only can it compile Perl with no difficulty,
but also can take advantage of features listed later that require the use
of HP compiler-specific command-line flags.
d101 36
a136 2
If you decide to use gcc, make sure your installation is recent and complete,
and be sure to read the Perl README file for more gcc-specific details.
d138 12
a149 1
=head2 PA-RISC
d151 1
a151 4
HP's current Unix systems run on its own Precision Architecture (PA-RISC) chip.
HP-UX used to run on the Motorola MC68000 family of chips, but any machine with
this chip in it is quite obsolete and this document will not attempt to address
issues for compiling Perl on the Motorola chipset.
d153 10
a162 2
The most recent version of PA-RISC at the time of this document's last update
is 2.0.
d168 1
a168 1
The following systems contain PA-RISC 1.0 chips:
d170 2
a171 2
    600, 635, 645, 800, 808, 815, 822, 825, 832, 834, 835, 840,
    842, 845, 850, 852, 855, 860, 865, 870, 890
d180 10
a189 7
    705, 710, 712, 715, 720, 722, 725, 728, 730, 735, 743, 745, 747, 750,
    755, 770, 807S, 817S, 827S, 837S, 847S, 857S, 867S, 877S, 887S, 897S,
    D200, D210, D220, D230, D250, D260, D310, D320, D330, D350, D360, D400,
    E25, E35, E45, E55, F10, F20, F30, G30, G40, G50, G60, G70, H30, H40,
    H50, H60, H70, I30, I40, I50, I60, I70, K100, K200, K210, K220, K400,
    K410, K420, T500, T520

d193 2
a194 15
The most recent upgrade to the PA-RISC design, it added support for 64-bit
integer data.

The following systems contain PA-RISC 2.0 chips (this is very likely to be
out of date):

    D270, D280, D370, D380, K250, K260, K370, K380, K450, K460, K570, K580,
    T600, V2200

A complete list of models at the time the OS was built is in the file
/opt/langtools/lib/sched.models.
The first column corresponds to the output of the "uname -m" command
(without the leading "9000/").
The second column is the PA-RISC version
and the third column is the exact chip type used.
d196 2
a197 1
=head2 Portability Between PA-RISC Versions
d199 85
a283 5
An executable compiled on a PA-RISC 2.0 platform will not execute on a
PA-RISC 1.1 platform, even if they are running the same version of HP-UX.
If you are building Perl on a PA-RISC 2.0 platform and want that Perl to
to also run on a PA-RISC 1.1, the compiler flags +DAportable and +DS32
should be used.
d285 2
a286 2
It is no longer possible to compile PA-RISC 1.0 executables on either the
PA-RISC 1.1 or 2.0 platforms.
d291 2
a292 1
Shared libraries end with the suffix .sl.
d294 11
a304 4
Shared libraries created on a platform using a particular PA-RISC version
are not usable on platforms using an earlier PA-RISC version by default.
However, this backwards compatibility may be enabled using the same
+DAportable compiler flag (with the same PA-RISC 1.0 caveat mentioned above).
d308 8
a315 7
    1. Compile source modules with +z or +Z flag to create a .o module
       which contains Position-Independent Code (PIC).  The linker will
       tell you in the next step if +Z was needed.

    2. Link the shared library using the -b flag.  If the code calls
       any functions in other system libraries (e.g., libm), it must
       be included on this line.
d324 8
a331 6
You may create a shared library that referers to another library, which
may be either an archive library or a shared library.  If it is a
shared library, this is called a "dependent library".
The dependent library's name is recorded in the main shared library,
but it is not linked into the shared library.
Instead, it is loaded when the main shared library is loaded.
d337 2
a338 2
Note that it is okay to create a library which contains a dependent library
that is already linked into perl.
d340 56
a395 1
It is no longer possible to link PA-RISC 1.0 shared libraries.
d399 60
a458 23
When using this compiler to build Perl, you should make sure that
the flag -Aa is added to the cpprun and cppstdin variables in the
config.sh file.

=head2 Using Large Files with Perl

Beginning with HP-UX version 10.20, files larger than 2GB (2^31) may be
created and manipulated.
Three separate methods of doing this are available.
Of these methods,
the best method for Perl is to compile using the -D_FILE_OFFSET_BITS=64
compiler flag.
This causes Perl to be compiled using structures and functions in which
these are 64 bits wide, rather than 32 bits wide.

There are only two drawbacks to this approach:
the first is that the seek and tell functions (both the builtin version
and the POSIX module's version) will not correctly
function for these large files
(the offset arguments in seek and tell are implemented as type long).
The second is that any extension which calls any file-manipulating C function
will need to be recompiled using the above-mentioned -D_FILE_OFFSET_BITS=64
flag.
d460 17
a476 8
creat,		fgetpos,	fopen,
freopen,	fsetpos,	fstat,
fstatvfs,	fstatvfsdev,	ftruncate,
ftw,		lockf,		lseek,
lstat,		mmap,		nftw,
open,		prealloc,	stat,
statvfs,	statvfsdev,	tmpfile,
truncate,	getrlimit,	setrlimit
d478 1
a478 1
=head2 Threaded Perl
d480 2
a481 2
It is impossible to compile a version of threaded Perl on any version of
HP-UX before 10.30, and it is strongly suggested that you be running on
d484 111
a594 4
To compile Perl with thread, add -Dusethreads to the arguments of Configure.
Ensure that the -D_POSIX_C_SOURCE=199506L compiler flag is automatically
added to the list of flags.  Also make sure that -lpthread is listed before
-lc in the list of libraries to link Perl with.
d596 1
a596 1
As of the date of this document, Perl threads are not fully supported on HP-UX.
d598 1
a598 1
=head2 64-bit Perl
d600 3
a602 3
Beginning with HP-UX 11.00, programs compiled under HP-UX can take advantage
of the LP64 programming environment (LP64 means Longs and Pointers are 64 bits
wide).
d604 1
a604 3
Work is being performed on Perl to make it 64-bit compliant on all versions
of Unix.  Once this is complete, scalar variables will be able to hold
numbers larger than 2^32 with complete precision.
d606 11
a616 1
As of the date of this document, Perl is not 64-bit compliant on HP-UX.
d618 2
a619 4
Should a user wish to experiment with compiling Perl in the LP64 environment,
the following steps must be taken: libraries must be searched only within
/lib/pa20_64, the compiler flag +DD64 must be used, and the C library is
now located at /lib/pa20_64/libc.sl.
d621 1
a621 2
On the brighter side, the large file problem goes away, as longs are now
64 bits wide.
d623 78
a700 12
=head2 GDBM and Threads

If you attempt to compile Perl with threads on an 11.X system and also link
in the GDBM library, then Perl will immediately core dump when it starts up.
The only workaround at this point is to relink the GDBM library under 11.X,
then relink it into Perl.

=head2 NFS filesystems and utime(2)

If you are compiling Perl on a remotely-mounted NFS filesystem, the test
io/fs.t may fail on test #18.
This appears to be a bug in HP-UX and no fix is currently available.
d704 1
a707 4

=head1 DATE

Version 0.2: 1999/03/01
@


1.1.1.1
log
@perl5.005_03
@
text
@@


1.1.1.2
log
@stock perl 5.6.1
@
text
@d1 3
a3 3
If you read this file _as_is_, just ignore the funny characters you see.
It is written in the POD format (see pod/perlpod.pod) which is specially
designed to be readable as is.
d11 3
a13 3
This document describes various features of HP's Unix operating system
(HP-UX) that will affect how Perl version 5 (hereafter just Perl) is
compiled and/or runs.
d17 3
a19 3
When compiling Perl, you must use an ANSI C compiler.  The C compiler
that ships with all HP-UX systems is a K&R compiler that should only be
used to build new kernels.
d22 6
a27 7
former is recommended, as not only can it compile Perl with no
difficulty, but also can take advantage of features listed later that
require the use of HP compiler-specific command-line flags.

If you decide to use gcc, make sure your installation is recent and
complete, and be sure to read the Perl README file for more gcc-specific
details.
d31 4
a34 5
HP's current Unix systems run on its own Precision Architecture
(PA-RISC) chip.  HP-UX used to run on the Motorola MC68000 family of
chips, but any machine with this chip in it is quite obsolete and this
document will not attempt to address issues for compiling Perl on the
Motorola chipset.
d36 2
a37 2
The most recent version of PA-RISC at the time of this document's last
update is 2.0.
d45 2
a46 2
    600, 635, 645, 808, 815, 822, 825, 832, 834, 835, 840, 842, 845, 850, 852,
    855, 860, 865, 870, 890
d55 7
a61 9
    705, 710, 712, 715, 720, 722, 725, 728, 730, 735, 742, 743, 745, 747, 750,
    755, 770, 777, 778, 779, 800, 801, 803, 806, 807, 809, 811, 813, 816, 817,
    819, 821, 826, 827, 829, 831, 837, 839, 841, 847, 849, 851, 856, 857, 859,
    867, 869, 877, 887, 891, 892, 897, A180, A180C, B115, B120, B132L, B132L+,
    B160L, B180L, C100, C110, C115, C120, C160L, D200, D210, D220, D230, D250,
    D260, D310, D320, D330, D350, D360, D410, DX0, DX5, DZO, E25, E35, E45,
    E55, F10, F20, F30, G30, G40, G50, G60, G70, H20, H30, H40, H50, H60, H70,
    I30, I40, I50, I60, I70, J200, J210, J210XC, K100, K200, K210, K220, K230,
    K400, K410, K420, S700i, S715, S724, S760, T500, T520
d65 2
a66 2
The most recent upgrade to the PA-RISC design, it added support for
64-bit integer data.
d68 2
a69 2
As of the date of this document's last update, the following systems
contain PA-RISC 2.0 chips (this is very likely to be out of date):
d71 2
a72 6
    700, 780, 781, 782, 783, 785, 802, 804, 810, 820, 861, 871, 879, 889, 893,
    895, 896, 898, 899, B1000, C130, C140, C160, C180, C180+, C180-XP, C200+,
    C400+, C3000, C360, CB260, D270, D280, D370, D380, D390, D650, J220, J2240,
    J280, J282, J400, J410, J5000, J7000, K250, K260, K260-EG, K270, K360,
    K370, K380, K450, K460, K460-EG, K460-XP, K470, K570, K580, L1000, L2000,
    N4000, R380, R390, T540, T600, V2000, V2200, V2250, V2500
d75 5
a79 4
/opt/langtools/lib/sched.models.  The first column corresponds to the
output of the "uname -m" command (without the leading "9000/").  The
second column is the PA-RISC version and the third column is the exact
chip type used.
d84 4
a87 4
PA-RISC 1.1 platform, even if they are running the same version of
HP-UX.  If you are building Perl on a PA-RISC 2.0 platform and want that
Perl to to also run on a PA-RISC 1.1, the compiler flags +DAportable and
+DS32 should be used.
d89 2
a90 2
It is no longer possible to compile PA-RISC 1.0 executables on either
the PA-RISC 1.1 or 2.0 platforms.
d97 4
a100 5
Shared libraries created on a platform using a particular PA-RISC
version are not usable on platforms using an earlier PA-RISC version by
default.  However, this backwards compatibility may be enabled using the
same +DAportable compiler flag (with the same PA-RISC 1.0 caveat
mentioned above).
d119 6
a124 8
You may create a shared library that refers to another library, which
may be either an archive library or a shared library.  If this second
library is a shared library, this is called a "dependent library".  The
dependent library's name is recorded in the main shared library, but it
is not linked into the shared library.  Instead, it is loaded when the
main shared library is loaded.  This can cause problems if you build an
extension on one system and move it to another system where the
libraries may not be located in the same place as on the first system.
d130 2
a131 2
Note that it is okay to create a library which contains a dependent
library that is already linked into perl.
d137 3
a139 3
When using this compiler to build Perl, you should make sure that the
flag -Aa is added to the cpprun and cppstdin variables in the config.sh
file (though see the section on 64-bit perl below).
d143 17
a159 14
Beginning with HP-UX version 10.20, files larger than 2GB (2^31 bytes)
may be created and manipulated.  Three separate methods of doing this
are available.  Of these methods, the best method for Perl is to compile
using the -Duselargefiles flag to Configure.  This causes Perl to be
compiled using structures and functions in which these are 64 bits wide,
rather than 32 bits wide.  (Note that this will only work with HP's ANSI
C compiler.  If you want to compile Perl using gcc, you will have to get
a version of the compiler that support 64-bit operations.)

There are some drawbacks to this approach.  One is that any extension
which calls any file-manipulating C function will need to be recompiled
(just follow the usual "perl Makefile.PL; make; make test; make install"
procedure).

a169 9
Another drawback is only valid for Perl versions before 5.6.0.  This
drawback is that the seek and tell functions (both the builtin version
and POSIX module version) will not perform correctly.

It is strongly recommended that you use this flag when you run
Configure.  If you do not do this, but later answer the question about
large files when Configure asks you, you may get a configuration that
cannot be compiled, or that does not function as expected.

d172 2
a173 2
It is possible to compile a version of threaded Perl on any version of
HP-UX before 10.30, but it is strongly suggested that you be running on
d176 6
a181 14
To compile Perl with threads, add -Dusethreads to the arguments of
Configure.  Verify that the -D_POSIX_C_SOURCE=199506L compiler flag is
automatically added to the list of flags.  Also make sure that -lpthread
is listed before -lc in the list of libraries to link Perl with.

As of the date of this document, Perl threads are not fully supported on
HP-UX.

HP-UX versions before 10.30 require a seperate installation of a POSIX
threads library package. Two examples are the HP DCE package, available
on "HP-UX Hardware Extensions 3.0, Install and Core OS, Release 10.20,
April 1999 (B3920-13941)" or the Freely available PTH package, available
though worldwide HP-UX mirrors of precompiled packages
(e.g. http://hpux.tn.tudelft.nl/hppd/hpux/alpha.html)
d185 7
a191 7
Beginning with HP-UX 11.00, programs compiled under HP-UX can take
advantage of the LP64 programming environment (LP64 means Longs and
Pointers are 64 bits wide).

Work is being performed on Perl to make it 64-bit compliant on all
versions of Unix.  Once this is complete, scalar variables will be able
to hold numbers larger than 2^32 with complete precision.
d195 7
a201 18
Should a user wish to experiment with compiling Perl in the LP64
environment, use the -Duse64bitall flag to Configure.  This will force
Perl to be compiled in a pure LP64 environment (via the +DD64 flag).

You can also use the -Duse64bitint flag to Configure.  Although there
are some minor differences between compiling Perl with this flag versus
the -Duse64bitall flag, they should not be noticeable from a Perl user's
perspective.

In both cases, it is strongly recommended that you use these flags when
you run Configure.  If you do not use do this, but later answer the
questions about 64-bit numbers when Configure asks you, you may get a
configuration that cannot be compiled, or that does not function as
expected.

(Note that these Configure flags will only work with HP's ANSI C
compiler.  If you want to compile Perl using gcc, you will have to get a
version of the compiler that support 64-bit operations.)
d205 4
a208 4
If you attempt to compile Perl with threads on an 11.X system and also
link in the GDBM library, then Perl will immediately core dump when it
starts up.  The only workaround at this point is to relink the GDBM
library under 11.X, then relink it into Perl.
d213 2
a214 21
io/fs.t may fail on test #18.  This appears to be a bug in HP-UX and no
fix is currently available.

=head2 perl -P and //

In HP-UX Perl is compiled with flags that will cause problems if the
-P flag of Perl (preprocess Perl code with the C preprocessor before
perl sees it) is used.  The problem is that C<//>, being a C++-style
until-end-of-line comment, will disappear along with the remainder
of the line.  This means that common Perl constructs like

    s/foo//;

will turn into illegal code

    s/foo

The workaround is to use some other quoting separator than C<"/">,
like for example C<"!">:

    s!foo!!;
d224 1
a224 1
Version 0.6.2: 2001-02-02
@


1.1.1.3
log
@stock perl 5.8.0 from CPAN
@
text
@a14 26
=head2 Using perl as shipped with HP-UX

As of application release September 2001, HP-UX 11.00 is shipped with
perl-5.6.1 in /opt/perl. The first occurrence is on CD 5012-7954 and
can be installed using

    swinstall -s /cdrom perl

assuming you have mounted that CD on /cdrom. In this version the
following modules are installed:

    ActivePerl::DocTools-0.04   HTML::Parser-3.19   XML::DOM-1.25
    Archive::Tar-0.072          HTML::Tagset-3.03   XML::Parser-2.27
    Compress::Zlib-1.08         MIME::Base64-2.11   XML::Simple-1.05
    Convert::ASN1-0.10          Net-1.07            XML::XPath-1.09
    Digest::MD5-2.11            PPM-2.1.5           XML::XSLT-0.32
    File::CounterFile-0.12      SOAP::Lite-0.46     libwww-perl-5.51
    Font::AFM-1.18              Storable-1.011      libxml-perl-0.07
    HTML-Tree-3.11              URI-1.11            perl-ldap-0.23

The build is a portable hppa-1.1 multithread build that supports large
files compiled with gcc-2.9-hppa-991112

If you perform a new installation, then Perl will be installed
automatically.

d45 1
a45 1
The following systems contained PA-RISC 1.0 chips:
d47 2
a48 2
    600, 635, 645, 808, 815, 822, 825, 832, 834, 835, 840, 842, 845, 850,
    852, 855, 860, 865, 870, 890
d57 9
a65 10
    705, 710, 712, 715, 720, 722, 725, 728, 730, 735, 742, 743, 744, 745,
    747, 750, 755, 770, 777, 778, 779, 800, 801, 803, 806, 807, 809, 811,
    813, 816, 817, 819, 821, 826, 827, 829, 831, 837, 839, 841, 847, 849,
    851, 856, 857, 859, 867, 869, 877, 887, 891, 892, 897, A180, A180C,
    B115, B120, B132L, B132L+, B160L, B180L, C100, C110, C115, C120,
    C160L, D200, D210, D220, D230, D250, D260, D310, D320, D330, D350,
    D360, D410, DX0, DX5, DXO, E25, E35, E45, E55, F10, F20, F30, G30,
    G40, G50, G60, G70, H20, H30, H40, H50, H60, H70, I30, I40, I50, I60,
    I70, J200, J210, J210XC, K100, K200, K210, K220, K230, K400, K410,
    K420, S700i, S715, S744, S760, T500, T520
d73 1
a73 17
contain PA-RISC 2.0 chips:

    700, 780, 781, 782, 783, 785, 802, 804, 810, 820, 861, 871, 879, 889,
    893, 895, 896, 898, 899, A400, A500, B1000, B2000, C130, C140, C160,
    C180, C180+, C180-XP, C200+, C400+, C3000, C360, C3600, CB260, D270,
    D280, D370, D380, D390, D650, J220, J2240, J280, J282, J400, J410,
    J5000, J5500XM, J5600, J7000, J7600, K250, K260, K260-EG, K270, K360,
    K370, K380, K450, K460, K460-EG, K460-XP, K470, K570, K580, L1000,
    L2000, L3000, N4000, R380, R390, RP2400, RP2430, RP2450, RP2470,
    RP5400, RP5430, RP5450, RP5470, RP7400, RP7410, RP8400, SD16000,
    SD32000, SD64000, T540, T600, V2000, V2200, V2250, V2500, V2600

=head2 Itanium

HP also ships servers with the 128-bit Itanium processor(s). As of the
date of this document's last update, the following systems contain
Itanium chips (this is very likely to be out of date):
d75 6
a80 1
    RX4610, RX9610
d86 1
a86 1
chip type used. (Start browsing at the bottom to prevent confusion ;-)
d93 1
a93 1
Perl to also run on a PA-RISC 1.1, the compiler flags +DAportable and
d97 1
a97 15
the PA-RISC 1.1 or 2.0 platforms.  The command-line flags are accepted,
but the resulting executable will not run when transferred to a PA-RISC
1.0 system.

=head2 Itanium Processor Family and HP-UX

HP-UX also runs on the new Itanium processor.  This requires the use
of a different version of HP-UX (currently 11.20), and with the exception
of a few differences detailed below and in later sections, Perl should
compile with no problems.

Although PA-RISC binaries can run on Itanium systems, you should not
attempt to use a PA-RISC version of Perl on an Itanium system.  This is
because shared libraries created on an Itanium system cannot be loaded
while running a PA-RISC executable.
d102 1
a102 2
Shared libraries end with the suffix .sl.  On Itanium systems,
they end with the suffix .so.
a109 6
Shared libraries created on an Itanium platform cannot be loaded on
a PA-RISC platform.  Shared libraries created on a PA-RISC platform
can only be loaded on an Itanium platform if it is a PA-RISC executable
that is attempting to load the PA-RISC library.  A PA-RISC shared
library cannot be loaded into an Itanium executable nor vice-versa.

d143 1
a143 47
Some extensions, like DB_File and Compress::Zlib use/require prebuilt
libraries for the perl extensions/modules to work. If these libraries
are built using the default configuration, it might happen that you
run into an error like "invalid loader fixup" during load phase.
HP is aware of this problem.  Search the HP-UX cxx-dev forums for
discussions about the subject.  The short answer is that B<everything>
(all libraries, everything) must be compiled with C<+z> or C<+Z> to be
PIC (position independent code).  In HP-UX 11.00 or newer the linker
error message should tell the name of the offending object file.

A more general approach is to intervene manually, as with an example for
the DB_File module, which requires SleepyCat's libdb.sl:

    # cd .../db-3.2.9/build_unix
    # vi Makefile
    ... add +Z to all cflags to create shared objects
    CFLAGS=         -c $(CPPFLAGS) +Z -Ae +O2 +Onolimit \
		    -I/usr/local/include -I/usr/include/X11R6
    CXXFLAGS=       -c $(CPPFLAGS) +Z -Ae +O2 +Onolimit \
		    -I/usr/local/include -I/usr/include/X11R6

    # make clean
    # make
    # mkdir tmp
    # cd tmp
    # ar x ../libdb.a
    # ld -b -o libdb-3.2.sl *.o
    # mv libdb-3.2.sl /usr/local/lib
    # rm *.o
    # cd /usr/local/lib
    # rm -f libdb.sl
    # ln -s libdb-3.2.sl libdb.sl

    # cd .../DB_File-1.76
    # make distclean
    # perl Makefile.PL
    # make
    # make test
    # make install

It is no longer possible to link PA-RISC 1.0 shared libraries (even
though the command-line flags are still present).

PA-RISC and Itanium object files are not interchangeable.  Although
you may be able to use ar to create an archive library of PA-RISC
object files on an Itanium system, you cannot link against it using
an Itanium link editor.
d149 1
a149 2
file (though see the section on 64-bit perl below). If you are using a
recent version of the Perl distribution, these flags are set automatically.
d151 1
a151 17
=head2 The GNU C Compiler

When you are going to use the GNU C compiler (gcc), and you don't have
gcc yet, you can either build it yourself from the sources (available
from e.g. http://www.gnu.ai.mit.edu/software/gcc/releases.html) or fetch
a prebuilt binary from the HP porting center. There are two places where
gcc prebuilds can be fetched the first and best (for HP-UX 11 only) is
http://h21007.www2.hp.com/dspp/tech/tech_TechSoftwareDetailPage_IDX/1,1703,547,00.html
the second is http://hpux.cs.utah.edu/hppd/hpux/Gnu/ where you can also
find the GNU binutils package. (Browse through the list, because there
are often multiple versions of the same package available).

Building a 64bit capable gcc from source is possible only when you have
the HP C-ANSI C compiler available, which you should use anyway when
building perl.

=head2 Using Large Files with Perl on HP-UX
d160 1
a160 2
a version of the compiler that support 64-bit operations. See above for
where to find it.)
d186 1
a186 1
=head2 Threaded Perl on HP-UX
d195 4
a198 3
is listed before -lc in the list of libraries to link Perl with. The
hints provided for HP-UX during Configure will try very hard to get
this right for you.
d200 1
a200 1
HP-UX versions before 10.30 require a separate installation of a POSIX
d205 1
a205 1
(e.g. http://hpux.tn.tudelft.nl/hppd/hpux/)
d207 1
a207 26
If you are going to use the HP DCE package, the library used for threading
is /usr/lib/libcma.sl, but there have been multiple updates of that
library over time. Perl will build with the first version, but it
will not pass the test suite. Older Oracle versions might be a compelling
reason not to update that library, otherwise please find a newer version
in one of the following patches: PHSS_19739, PHSS_20608, or PHSS_23672

reformatted output:

  d3:/usr/lib 106 > what libcma-*.1
  libcma-00000.1:
     HP DCE/9000 1.5               Module: libcma.sl (Export)
                                   Date: Apr 29 1996 22:11:24
  libcma-19739.1:
     HP DCE/9000 1.5 PHSS_19739-40 Module: libcma.sl (Export)
                                   Date: Sep  4 1999 01:59:07
  libcma-20608.1:
     HP DCE/9000 1.5 PHSS_20608    Module: libcma.1 (Export)
                                   Date: Dec  8 1999 18:41:23
  libcma-23672.1:
     HP DCE/9000 1.5 PHSS_23672    Module: libcma.1 (Export)
                                   Date: Apr  9 2001 10:01:06
  d3:/usr/lib 107 >


=head2 64-bit Perl on HP-UX
d238 1
a238 18
=head2 Oracle on HP-UX

Using perl to connect to Oracle databases through DBI and DBD::Oracle
has caused a lot of people many headaches. Read README.hpux in the
DBD::Oracle for much more information. The reason to mention it here
is that Oracle requires a perl built with libcl and libpthread, the
latter even when perl is build without threads. Building perl using
all defaults, but still enabling to build DBD::Oracle later on can be
achieved using

  Configure -A prepend:libswanted='cl pthread ' ...

Do not forget the space before the trailing quote.

Also note that this does not (yet) work with all configurations,
it is known to fail with 64bit versions of GCC.

=head2 GDBM and Threads on HP-UX
d245 1
a245 1
=head2 NFS filesystems and utime(2) on HP-UX
d251 1
a251 1
=head2 perl -P and // and HP-UX
a269 44
=head2 HP-UX Kernel Parameters (maxdsiz) for Compiling Perl

By default, HP-UX comes configured with a maximum data segment size of
64MB.  This is too small to correctly compile Perl with the maximum
optimization levels.  You can increase the size of the maxdsiz kernel
parameter through the use of SAM.

When using the GUI version of SAM, click on the Kernel Configuration
icon, then the Configurable Parameters icon.  Scroll down and select
the maxdsiz line.  From the Actions menu, select the Modify Configurable
Parameter item.  Insert the new formula into the Formula/Value box.
Then follow the instructions to rebuild your kernel and reboot your
system.

In general, a value of 256MB (or "256*1024*1024") is sufficient for
Perl to compile at maximum optimization.

=head1 nss_delete core dump from op/pwent or op/grent

You may get a bus error core dump from the op/pwent or op/grent
tests. If compiled with -g you will see a stack trace much like
the following:

  #0  0xc004216c in  () from /usr/lib/libc.2
  #1  0xc00d7550 in __nss_src_state_destr () from /usr/lib/libc.2
  #2  0xc00d7768 in __nss_src_state_destr () from /usr/lib/libc.2
  #3  0xc00d78a8 in nss_delete () from /usr/lib/libc.2 
  #4  0xc01126d8 in endpwent () from /usr/lib/libc.2 
  #5  0xd1950 in Perl_pp_epwent () from ./perl
  #6  0x94d3c in Perl_runops_standard () from ./perl
  #7  0x23728 in S_run_body () from ./perl
  #8  0x23428 in perl_run () from ./perl
  #9  0x2005c in main () from ./perl

The key here is the C<nss_delete> call.  One workaround for this
bug seems to be to create add to the file F</etc/nsswitch.conf>
(at least) the following lines

  group: files 
  passwd: files

Whether you are using NIS does not matter.  Amazingly enough,
the same bug affects also Solaris.

a272 1
H.Merijn Brand <h.m.brand@@hccnet.nl>
d278 1
a278 1
Version 0.6.6: 2002-05-30
@


1.1.1.4
log
@perl 5.8.2 from CPAN
@
text
@a40 18
=head2 Using perl from HP's porting centre

HP porting centre tries very hard to keep up with customer demand and
release updates from the Open Source community. Having precompiled
Perl binaries available is obvious.

The HP porting centres are limited in what systems they are allowed
to port to and they usually choose the two most recent OS versions
available. This means that at the moment of writing, there are only
HPUX-11.00 and 11-20/22 (IA64) ports available on the porting centres.

HP has asked the porting centre to move Open Source binaries
from /opt to /usr/local, so binaries produced since the start
of July 2002 are located in /usr/local.

One of HP porting centres URL's is http://hpux.connect.org.uk/
The port currently available is built with GNU gcc.

d53 1
a53 1
complete, and be sure to read the Perl INSTALL file for more gcc-specific
a66 11
A complete list of models at the time the OS was built is in the file
/usr/sam/lib/mo/sched.models. The first column corresponds to the last
part of the output of the "model" command.  The second column is the
PA-RISC version and the third column is the exact chip type used.
(Start browsing at the bottom to prevent confusion ;-)

    # model
    9000/800/L1000-44
    # grep L1000-44 /usr/sam/lib/mo/sched.models
    L1000-44        2.0     PA8500

d108 3
a110 12
    L2000, L3000, N4000, R380, R390, RP2400, RP2405, RP2430, RP2450,
    RP2470, RP5400, RP5405, RP5430, RP5450, RP5470, RP7400, RP7405,
    RP7410, RP8400, SD16000, SD32000, SD64000, T540, T600, V2000, V2200,
    V2250, V2500, V2600

Just before HP took over Compaq, some systems were renamed. Visit
http://www.hp.com/products1/servers/server_names.html to see what
the changes are, or will be.

    HP 9000 A-Class servers, now renamed HP Server rp2400 series.
    HP 9000 L-Class servers, now renamed HP Server rp5400 series.
    HP 9000 N-Class servers, now renamed HP Server rp7400.
d118 7
a124 1
    RX2600, RX4610, RX5670, RX9610
a173 1
       (For gcc, the appropriate flag is -fpic or -fPIC.)
d209 1
a209 2
PIC (position independent code).  (For gcc, that would be
C<-fpic> or C<-fPIC>).  In HP-UX 11.00 or newer the linker
d263 1
a263 1
gcc prebuilds can be fetched; the first and best (for HP-UX 11 only) is
a268 7
Above mentioned distributions are depots. H.Merijn Brand has made prebuilt
gcc binaries available on https://www.beepz.com/personal/merijn/ and/or
http://www.cmve.net/~merijn/ for HP-UX 10.20 and HP-UX 11.00 in both 32-
and 64-bit versions. Most likely 11i will be available soon. These are
bzipped tar archives that also include recent GNU binutils and GNU gdb.
Read the instructions on that page to rebuild gcc using itself.

d282 1
a282 1
a version of the compiler that supports 64-bit operations. See above for
d364 1
a364 2
As of the date of this document, Perl is fully 64-bit compliant on
HP-UX 11.00 and up for both ccc- and gcc builds.
a368 3
(Note that these flags will only work with HP's ANSI C compiler.  If
you want to compile Perl using gcc, you will have to get a version of
the compiler that supports 64-bit operations.)
d381 4
d460 2
a461 2
  #3  0xc00d78a8 in nss_delete () from /usr/lib/libc.2
  #4  0xc01126d8 in endpwent () from /usr/lib/libc.2
d472 1
a472 1
  group: files
d476 1
a476 1
the same bug also affects Solaris.
d487 1
a487 1
Version 0.6.7: 2002-09-05
@


1.1.1.5
log
@Import of stock perl 5.8.5
@
text
@d137 8
a144 5
    L2000, L3000, N4000, R380, R390, SD16000, SD32000, SD64000, T540,
    T600, V2000, V2200, V2250, V2500, V2600

Just before HP took over Compaq, some systems were renamed. the link
that contained the explanation is dead, so here's a short summary:
d150 1
a150 24
    rp2400, rp2405, rp2430, rp2450, rp2470, rp3410, rp3440, rp5400,
    rp5405, rp5430, rp5450, rp5470, rp7400, rp7405, rp7410, rp7420,
    rp8400, rp8420, Superdome

The current naming convention is:

    aadddd
    ||||`+- 00 - 99 relative capacity & newness (upgrades, etc.)
    |||`--- unique number for each architecture to ensure different
    |||     systems do not have the same numbering across
    |||     architectures
    ||`---- 1 - 9 identifies family and/or relative positioning
    ||
    |`----- c = ia32 (cisc)
    |       p = pa-risc
    |       x = ia-64 (Itanium & Itanium 2)
    |       h = housing
    `------ t = tower
            r = rack optimized
            s = super scalable
            b = blade
            sa = appliance

=head2 Itanium & Itanium 2
d154 1
a154 6
Itanium or Itanium 2 chips (this is very likely to be out of date):

    rx1600, rx2600, rx2600hptc, rx4610, rx4640, rx5670, rx7620, rx8620,
    rx9610

To see all about your machine, type
d156 1
a156 3
    # model
    ia64 hp server rx2600
    # /usr/contrib/bin/machinfo
d174 3
a176 3
of a different version of HP-UX (currently 11.23 or 11i v1.6), and with
the exception of a few differences detailed below and in later sections,
Perl should compile with no problems.
d304 9
a312 16
gcc binaries available on http://mirrors.develooper.com/hpux/ and/or
http://www.cmve.net/~merijn/ for HP-UX 10.20, HP-UX 11.00, and HP-UX 11.11
(HP-UX 11i) in both 32- and 64-bit versions. These are bzipped tar archives
that also include recent GNU binutils and GNU gdb.  Read the instructions
on that page to rebuild gcc using itself.

On PA-RISC you need a different compiler for 32-bit applications and for
64-bit applications. On PA-RISC, 32-bit objects and 64-bit objects do
not mix. period. There is no different behaviour for HP C-ANSI-C or GNU
gcc. So if you require your perl binary to use 64-bit libraries, like
Oracle-64bit, you MUST build a 64-bit perl.

Building a 64-bit capable gcc on PA-RISC from source is possible only when
you have the HP C-ANSI C compiler or an already working 64-bit binary of
gcc available. Best performance for perl is achieved with HP's native
compiler.
d406 1
a406 2
HP-UX 11.00 and up for both cc- and gcc builds. If you are about to
build a 64-bit perl with GNU gcc, please read the gcc section carefully.
d410 3
a412 4
Perl to be compiled in a pure LP64 environment (with the +DD64 flag for
HP C-ANSI-C, with no additional options for GNU gcc 64-bit on PA-RISC,
and with -mlp64 for GNU gcc on Itanium).
If you want to compile Perl using gcc, you will have to get a version of
d441 1
a441 1
it is known to fail with 64-bit versions of GCC.
d458 1
a458 1
If HP-UX Perl is compiled with flags that will cause problems if the
d528 1
a528 1
Version 0.7.0: 2004-06-09
@


1.1.1.6
log
@perl 5.8.6 from CPAN
@
text
@d21 1
a21 1
  swinstall -s /cdrom perl
d26 8
a33 8
  ActivePerl::DocTools-0.04   HTML::Parser-3.19   XML::DOM-1.25
  Archive::Tar-0.072          HTML::Tagset-3.03   XML::Parser-2.27
  Compress::Zlib-1.08         MIME::Base64-2.11   XML::Simple-1.05
  Convert::ASN1-0.10          Net-1.07            XML::XPath-1.09
  Digest::MD5-2.11            PPM-2.1.5           XML::XSLT-0.32
  File::CounterFile-0.12      SOAP::Lite-0.46     libwww-perl-5.51
  Font::AFM-1.18              Storable-1.011      libxml-perl-0.07
  HTML-Tree-3.11              URI-1.11            perl-ldap-0.23
d91 4
a94 17
  # model
  9000/800/L1000-44
  # grep L1000-44 /usr/sam/lib/mo/sched.models
  L1000-44        2.0     PA8500

=head2 Portability Between PA-RISC Versions

An executable compiled on a PA-RISC 2.0 platform will not execute on a
PA-RISC 1.1 platform, even if they are running the same version of
HP-UX.  If you are building Perl on a PA-RISC 2.0 platform and want that
Perl to also run on a PA-RISC 1.1, the compiler flags +DAportable and
+DS32 should be used.

It is no longer possible to compile PA-RISC 1.0 executables on either
the PA-RISC 1.1 or 2.0 platforms.  The command-line flags are accepted,
but the resulting executable will not run when transferred to a PA-RISC
1.0 system.
d102 2
a103 2
  600, 635, 645, 808, 815, 822, 825, 832, 834, 835, 840, 842, 845, 850,
  852, 855, 860, 865, 870, 890
d112 10
a121 10
  705, 710, 712, 715, 720, 722, 725, 728, 730, 735, 742, 743, 744, 745,
  747, 750, 755, 770, 777, 778, 779, 800, 801, 803, 806, 807, 809, 811,
  813, 816, 817, 819, 821, 826, 827, 829, 831, 837, 839, 841, 847, 849,
  851, 856, 857, 859, 867, 869, 877, 887, 891, 892, 897, A180, A180C,
  B115, B120, B132L, B132L+, B160L, B180L, C100, C110, C115, C120,
  C160L, D200, D210, D220, D230, D250, D260, D310, D320, D330, D350,
  D360, D410, DX0, DX5, DXO, E25, E35, E45, E55, F10, F20, F30, G30,
  G40, G50, G60, G70, H20, H30, H40, H50, H60, H70, I30, I40, I50, I60,
  I70, J200, J210, J210XC, K100, K200, K210, K220, K230, K400, K410,
  K420, S700i, S715, S744, S760, T500, T520
d131 8
a138 8
  700, 780, 781, 782, 783, 785, 802, 804, 810, 820, 861, 871, 879, 889,
  893, 895, 896, 898, 899, A400, A500, B1000, B2000, C130, C140, C160,
  C180, C180+, C180-XP, C200+, C400+, C3000, C360, C3600, CB260, D270,
  D280, D370, D380, D390, D650, J220, J2240, J280, J282, J400, J410,
  J5000, J5500XM, J5600, J7000, J7600, K250, K260, K260-EG, K270, K360,
  K370, K380, K450, K460, K460-EG, K460-XP, K470, K570, K580, L1000,
  L2000, L3000, N4000, R380, R390, SD16000, SD32000, SD64000, T540,
  T600, V2000, V2200, V2250, V2500, V2600
d143 7
a149 7
  HP 9000 A-Class servers, now renamed HP Server rp2400 series.
  HP 9000 L-Class servers, now renamed HP Server rp5400 series.
  HP 9000 N-Class servers, now renamed HP Server rp7400.

  rp2400, rp2405, rp2430, rp2450, rp2470, rp3410, rp3440, rp4440,
  rp5400, rp5405, rp5430, rp5450, rp5470, rp7400, rp7405, rp7410,
  rp7420, rp8400, rp8420, Superdome
d153 44
a196 16
  aadddd
  ||||`+- 00 - 99 relative capacity & newness (upgrades, etc.)
  |||`--- unique number for each architecture to ensure different
  |||     systems do not have the same numbering across
  |||     architectures
  ||`---- 1 - 9 identifies family and/or relative positioning
  ||
  |`----- c = ia32 (cisc)
  |       p = pa-risc
  |       x = ia-64 (Itanium & Itanium 2)
  |       h = housing
  `------ t = tower
          r = rack optimized
          s = super scalable
          b = blade
          sa = appliance
a209 15
=head2 Itanium & Itanium 2

HP also ships servers with the 128-bit Itanium processor(s). As of the
date of this document's last update, the following systems contain
Itanium or Itanium 2 chips (this is very likely to be out of date):

  rx1600, rx2600, rx2600hptc, rx4610, rx4640, rx5670, rx7620, rx8620,
  rx9610

To see all about your machine, type

  # model
  ia64 hp server rx2600
  # /usr/contrib/bin/machinfo

d230 8
a237 8
  1. Compile source modules with +z or +Z flag to create a .o module
     which contains Position-Independent Code (PIC).  The linker will
     tell you in the next step if +Z was needed.
     (For gcc, the appropriate flag is -fpic or -fPIC.)

  2. Link the shared library using the -b flag.  If the code calls
     any functions in other system libraries (e.g., libm), it must
     be included on this line.
d276 26
a301 34
  # cd .../db-3.2.9/build_unix
  # vi Makefile
  ... add +Z to all cflags to create shared objects
  CFLAGS=         -c $(CPPFLAGS) +Z -Ae +O2 +Onolimit \
		  -I/usr/local/include -I/usr/include/X11R6
  CXXFLAGS=       -c $(CPPFLAGS) +Z -Ae +O2 +Onolimit \
		  -I/usr/local/include -I/usr/include/X11R6

  # make clean
  # make
  # mkdir tmp
  # cd tmp
  # ar x ../libdb.a
  # ld -b -o libdb-3.2.sl *.o
  # mv libdb-3.2.sl /usr/local/lib
  # rm *.o
  # cd /usr/local/lib
  # rm -f libdb.sl
  # ln -s libdb-3.2.sl libdb.sl

  # cd .../DB_File-1.76
  # make distclean
  # perl Makefile.PL
  # make
  # make test
  # make install

As of db-4.2.x it is no longer needed to do this by hand. Sleepycat
has changed the configuration process to add +z on HP-UX automatically.

  # cd .../db-4.2.25/build_unix
  # env CFLAGS=+DA2.0w LDFLAGS=+DA2.0w ../dist/configure

should work to generate 64bit shared libraries for HP-UX 11.00 and 11i.
d500 1
a500 1
  s/foo//;
d504 1
a504 1
  s/foo
d509 1
a509 1
  s!foo!!;
d564 1
a564 1
Version 0.7.1: 2004-10-08
@


1.1.1.7
log
@perl 5.8.8 import
@
text
@d17 3
a19 3
Application release September 2001, HP-UX 11.00 is the first to ship
with Perl. By the time it was perl-5.6.1 in /opt/perl. The first
occurrence is on CD 5012-7954 and can be installed using
d24 1
a24 1
following modules were installed:
d35 1
a35 1
The build was a portable hppa-1.1 multithread build that supports large
a40 3
More recent (preinstalled) HP-UX systems have more recent versions of
Perl and the updated modules.

d50 1
a50 2
HP-UX 11.11 (pa-risc 2.0) and HP-UX 11.23 (Itanium 2) ports available
on the porting centres.
d83 1
a83 2
update is 2.0. HP PA-RISC systems are usually refered to with model
description "HP 9000".
d160 3
a162 3
  rp2400, rp2405, rp2430, rp2450, rp2470, rp3410, rp3440, rp4410,
  rp4440, rp5400, rp5405, rp5430, rp5450, rp5470, rp7400, rp7405,
  rp7410, rp7420, rp8400, rp8420, Superdome
d186 1
a186 1
of a different version of HP-UX (currently 11.23 or 11i v2), and with
a194 3
HP Itanium 2 systems are usually refered to with model description
"HP Integrity".

d201 2
a202 2
  BL60p, rx1600, rx1620, rx2600, rx2600hptc, rx2620, rx4610, rx4640,
  rx5670, rx7620, rx8620, rx9610
d347 1
a347 1
not mix. Period. There is no different behaviour for HP C-ANSI-C or GNU
d409 2
a410 1
on H.Merijn's site (http://mirrors.develooper.com/hpux/).
a435 10
If you choose for the PTH package, use swinstall to install pth in
the default location (/opt/pth), and then make symbolic links to the
libraries from /usr/lib

  # cd /usr/lib
  # ln -s /opt/pth/lib/libpth* .

For building perl to support Oracle, it needs to be linked with libcl
and libpthread. So even if your perl is an unthreaded build, these
libraries might be required. See "Oracle on HP-UX" below.
d441 5
a445 4
Pointers are 64 bits wide), in which scalar variables will be able
to hold numbers larger than 2^32 with complete precision.  Perl has
proven to be consistent and reliable in 64bit mode since 5.8.1 on
all HP-UX 11.xx.
d451 5
a455 5
Should a user have the need for compiling Perl in the LP64 environment,
use the -Duse64bitall flag to Configure.  This will force Perl to be
compiled in a pure LP64 environment (with the +DD64 flag for HP C-ANSI-C,
with no additional options for GNU gcc 64-bit on PA-RISC, and with
-mlp64 for GNU gcc on Itanium).
d462 1
a462 2
perspective. When configuring -Duse64bitint using a 64bit gcc on a
pa-risc architecture, -Duse64bitint is silently promoted to -Duse64bitall.
d566 1
a566 1
H.Merijn Brand <h.m.brand@@xs4all.nl>
d572 1
a572 1
Version 0.7.6: 2005-12-20
@


1.1.1.8
log
@import perl 5.10.0 from CPAN
@
text
@d35 2
a36 2
That build was a portable hppa-1.1 multithread build that supports large
files compiled with gcc-2.9-hppa-991112.
d38 5
a42 9
If you perform a new installation, then (a newer) Perl will be installed
automatically.  Preinstalled HP-UX systems now slao have more recent versions
of Perl and the updated modules.

The official (threaded) builds from HP, as they are shipped on the
Application DVD/CD's are available on
http://www.software.hp.com/cgi-bin/swdepot_parser.cgi/cgi/displayProductInfo.pl?productNumber=PERL
for both PA-RISC and IPF (Itanium Processor Family). They are built
with the HP ANSI-C compiler.
d80 1
a80 1
HP's HP9000 Unix systems run on HP's own Precision Architecture
d88 1
a88 24
description "HP 9000". The last CPU in this series is the PA-8900.
Support for PA-RISC architectured machines officially ends as shown
in the following table:

   PA-RISC End-of-Life Roadmap
 +--------+----------------+----------------+-----------------+
 | HP9000 | Superdome      | PA-8700        | Spring 2011     |
 | 4-128  |                | PA-8800/sx1000 | Summer 2012     |
 | cores  |                | PA-8900/sx1000 | 2014            |
 |        |                | PA-8900/sx2000 | 2015            |
 +--------+----------------+----------------+-----------------+
 | HP9000 | rp7410, rp8400 | PA-8700        | Spring 2011     |
 | 2-32   | rp7420, rp8420 | PA-8800/sx1000 | 2012            |
 | cores  | rp7440, rp8440 | PA-8900/sx1000 | Autumn 2013     |
 |        |                | PA-8900/sx2000 | 2015            |
 +--------+----------------+----------------+-----------------+
 | HP9000 | rp44x0         | PA-8700        | Spring 2011     |
 | 1-8    |                | PA-8800/rp44x0 | 2012            |
 | cores  |                | PA-8900/rp44x0 | 2014            |
 +--------+----------------+----------------+-----------------+
 | HP9000 | rp34x0         | PA-8700        | Spring 2011     |
 | 1-4    |                | PA-8800/rp34x0 | 2012            |
 | cores  |                | PA-8900/rp34x0 | 2014            |
 +--------+----------------+----------------+-----------------+
d167 1
a167 1
  rp7410, rp7420, rp7440, rp8400, rp8420, rp8440, Superdome
d188 1
a188 1
=head2 Itanium Processor Family (IPF) and HP-UX
d203 5
a207 1
=head2 Itanium, Itanium 2 & Madison 6
d209 2
a210 8
HP also ships servers with the 128-bit Itanium processor(s). The cx26x0
is told to have Madison 6. As of the date of this document's last update,
the following systems contain Itanium or Itanium 2 chips (this is likely
to be out of date):

  BL60p, BL860c, cx2600, cx2620, rx1600, rx1620, rx2600, rx2600hptc,
  rx2620, rx2660, rx3600, rx4610, rx4640, rx5670, rx6600, rx7420,
  rx7620, rx7640, rx8420, rx8620, rx8640, rx9610, sx1000, sx2000
d288 1
a288 1
                  -I/usr/local/include -I/usr/include/X11R6
d290 1
a290 1
                  -I/usr/local/include -I/usr/include/X11R6
d315 1
a315 1
  # env CFLAGS=+DD64 LDFLAGS=+DD64 ../dist/configure
a333 8
Even though HP-UX 10.20 and 11.00 are not actively maintained by HP
anymore, updates for the HP ANSI C compiler are still available from
time to time, and it might be advisable to see if updates are applicable.
At the moment of writing, the latests available patches for 11.00 that
should be applied are PHSS_35098, PHSS_35175, PHSS_35100, PHSS_33036,
and PHSS_33902). If you have a SUM account, you can use it to search
for updates/patches. Enter "ANSI" as keyword.

d382 8
a389 8
  creat,          fgetpos,        fopen,
  freopen,        fsetpos,        fstat,
  fstatvfs,       fstatvfsdev,    ftruncate,
  ftw,            lockf,          lseek,
  lstat,          mmap,           nftw,
  open,           prealloc,       stat,
  statvfs,        statvfsdev,     tmpfile,
  truncate,       getrlimit,      setrlimit
d506 4
a509 12
If you attempt to compile Perl with (POSIX) threads on an 11.X system
and also link in the GDBM library, then Perl will immediately core dump
when it starts up.  The only workaround at this point is to relink the
GDBM library under 11.X, then relink it into Perl.

the error might show something like:

Pthread internal error: message: __libc_reinit() failed, file: ../pthreads/pthread.c, line: 1096
Return Pointer is 0xc082bf33
sh: 5345 Quit(coredump)

and Configure will give up.
a579 9
=head1 Miscellaneous

HP-UX 11 Y2K patch "Y2K-1100 B.11.00.B0125 HP-UX Core OS Year 2000
Patch Bundle" has been reported to break the io/fs test #18 which
tests whether utime() can change timestamps.  The Y2K patch seems to
break utime() so that over NFS the timestamps do not get changed
(on local filesystems utime() still works). This has probably been
fixed on your system by now.

d582 1
a583 1
Jeff Okamoto <okamoto@@corp.hp.com>
d589 1
a589 1
Version 0.8.0: 2007-09-09
@


1.1.1.9
log
@import perl 5.10.1
@
text
@d46 1
a46 9
with the HP ANSI-C compiler by ActiveState.

To see what version is included on the DVD (assumed here to be mounted
on /cdrom), issue this command:

  # swlist -s /cdrom perl
  # perl           D.5.8.8.B  5.8.8 Perl Programming Language
    perl.Perl5-32  D.5.8.8.B  32-bit 5.8.8 Perl Programming Language with Extensions
    perl.Perl5-64  D.5.8.8.B  64-bit 5.8.8 Perl Programming Language with Extensions
d90 5
a94 5
The version of PA-RISC at the time of this document's last update is 2.0,
which is also the last there will be. HP PA-RISC systems are usually
refered to with model description "HP 9000". The last CPU in this series
is the PA-8900.  Support for PA-RISC architectured machines officially
ends as shown in the following table:
a116 7
From http://www.hp.com/products1/evolution/9000/eol_announcement.html:

 The last order date for HP9000 PA-RISC systems is planned for
 December 31, 2008 and ship date of April 1, 2009. Operating system
 releases for HP-UX will continue shipping past the HP9000 systems
 last order date.

d237 3
a239 4
  BL60p, BL860c, BL870c, cx2600, cx2620, rx1600, rx1620, rx2600,
  rx2600hptc, rx2620, rx2660, rx3600, rx4610, rx4640, rx5670,
  rx6600, rx7420, rx7620, rx7640, rx8420, rx8620, rx8640, rx9610,
  sx1000, sx2000
a246 17
=head2 HP-UX versions

Not all architectures (PA = PA-RISC, IPF = Itanium Processor Family)
support all versions of HP-UX, here is a short list

  HP-UX version  Kernel  Architecture
  -------------  ------  ------------
  10.20          32 bit  PA
  11.00          32/64   PA
  11.11  11i v1  32/64   PA
  11.22  11i v2     64        IPF
  11.23  11i v2     64   PA & IPF
  11.31  11i v3     64   PA & IPF

See for the full list of hardware/OS support and expected end-of-life
http://www.hp.com/go/hpuxservermatrix

d385 4
a388 5
http://www.cmve.net/~merijn/ for HP-UX 10.20, HP-UX 11.00, HP-UX 11.11
(HP-UX 11i v1), and HP-UX 11.23 (HP-UX 11i v2) in both 32- and 64-bit
versions. These are bzipped tar archives that also include recent GNU
binutils and GNU gdb.  Read the instructions on that page to rebuild gcc
using itself.
d643 1
a643 1
Version 0.8.3: 2008-06-24
@


1.1.1.10
log
@Perl 5.12.2 from CPAN
@
text
@d44 1
a44 1
http://www.software.hp.com/portal/swdepot/displayProductInfo.do?productNumber=PERL
d46 1
a46 1
with the HP ANSI-C compiler. Up till 5.8.8 that was done by ActiveState.
d125 1
a125 1
From http://www.hp.com/products1/evolution/9000/faqs.html
d127 4
a130 1
 The last order date for HP 9000 systems was December 31, 2008.
d409 2
a410 2
a prebuilt binary from the HP porting center. gcc prebuilds can be
fetched from
d412 3
a414 2
(Browse through the list, because there are often multiple versions of
the same package available).
d488 1
a488 2
on H.Merijn's site (http://mirrors.develooper.com/hpux/). The use of PTH
will be unsupported in perl-5.12 and up and is rather buggy in 5.11.x.
d595 19
@


1.1.1.11
log
@import perl 5.16.3 from CPAN - worked on by Andrew Fresh and myself
@
text
@d7 1
a7 1
perlhpux - Perl version 5 on Hewlett-Packard Unix (HP-UX) systems
d44 1
a44 1
L<http://www.software.hp.com/portal/swdepot/displayProductInfo.do?productNumber=PERL>
d72 1
a72 1
One of HP porting centres URL's is L<http://hpux.connect.org.uk/>
d125 1
a125 1
From L<http://www.hp.com/products1/evolution/9000/faqs.html>
d275 1
a275 1
L<http://www.hp.com/go/hpuxservermatrix>
d405 1
a405 1
from e.g. L<http://gcc.gnu.org/mirrors.html>) or fetch
d408 1
a408 1
L<http://h21007.www2.hp.com/dspp/tech/tech_TechSoftwareDetailPage_IDX/1,1703,547,00.html>
d413 2
a414 2
gcc binaries available on L<http://mirrors.develooper.com/hpux/> and/or
L<http://www.cmve.net/~merijn/> for HP-UX 10.20, HP-UX 11.00, HP-UX 11.11
d484 1
a484 1
on H.Merijn's site (L<http://mirrors.develooper.com/hpux/>). The use of PTH
a636 21
=head1 error: pasting ")" and "l" does not give a valid preprocessing token

There seems to be a broken system header file in HP-UX 11.00 that
breaks perl building in 32bit mode with GNU gcc-4.x causing this
error. The same file for HP-UX 11.11 (even though the file is older)
does not show this failure, and has the correct definition, so the
best fix is to patch the header to match:

 --- /usr/include/inttypes.h  2001-04-20 18:42:14 +0200
 +++ /usr/include/inttypes.h  2000-11-14 09:00:00 +0200
 @@@@ -72,7 +72,7 @@@@
  #define UINT32_C(__c)                   __CONCAT_U__(__c)
  #else /* __LP64 */
  #define INT32_C(__c)                    __CONCAT__(__c,l)
 -#define UINT32_C(__c)                   __CONCAT__(__CONCAT_U__(__c),l)
 +#define UINT32_C(__c)                   __CONCAT__(__c,ul)
  #endif /* __LP64 */

  #define INT64_C(__c)                    __CONCAT_L__(__c,l)


d652 4
@


1.1.1.12
log
@Import perl-5.18.2

OK espie@@ sthen@@ deraadt@@
@
text
@d23 11
a33 1
assuming you have mounted that CD on /cdrom.
d39 1
a39 1
automatically.  Pre-installed HP-UX systems now have more recent versions
a55 11
To see what is installed on your system:

  # swlist -R perl
  # perl                    E.5.8.8.J  Perl Programming Language
  # perl.Perl5-32           E.5.8.8.J  32-bit Perl Programming Language with Extensions
    perl.Perl5-32.PERL-MAN  E.5.8.8.J  32-bit Perl Man Pages for IA
    perl.Perl5-32.PERL-RUN  E.5.8.8.J  32-bit Perl Binaries for IA
  # perl.Perl5-64           E.5.8.8.J  64-bit Perl Programming Language with Extensions
    perl.Perl5-64.PERL-MAN  E.5.8.8.J  64-bit Perl Man Pages for IA
    perl.Perl5-64.PERL-RUN  E.5.8.8.J  64-bit Perl Binaries for IA

d58 3
a60 5
HP porting centre tries to keep up with customer demand and release
updates from the Open Source community. Having precompiled Perl binaries
available is obvious, though "up-to-date" is something relative. At the
moment of writing only perl-5.10.1 was available (with 5.16.3 being the
latest stable release from the porters point of view).
d64 3
a66 1
available.
a74 6
=head2 Other prebuilt perl binaries

To get even more recent perl depots for the whole range of HP-UX, visit
H.Merijn Brand's site at L<http://mirrors.develooper.com/hpux/#Perl>.
Carefully read the notes to see if the available versions suit your needs.

d249 2
a250 2
  BL60p, BL860c, BL870c, BL890c, cx2600, cx2620, rx1600, rx1620, rx2600,
  rx2600hptc, rx2620, rx2660, rx2800, rx3600, rx4610, rx4640, rx5670,
d265 8
a272 8
  HP-UX version  Kernel  Architecture End-of-factory support
  -------------  ------  ------------ ----------------------------------
  10.20          32 bit  PA           30-Jun-2003
  11.00          32/64   PA           31-Dec-2006
  11.11  11i v1  32/64   PA           31-Dec-2015
  11.22  11i v2     64        IPF     30-Apr-2004
  11.23  11i v2     64   PA & IPF     31-Dec-2015
  11.31  11i v3     64   PA & IPF     31-Dec-2020 (PA) 31-Dec-2022 (IPF)
d406 3
a408 4
a prebuilt binary from the HP porting center
at L<http://hpux.connect.org.uk/hppd/cgi-bin/search?term=gcc&Search=Search>
or from the DSPP (you need to be a member) at
L<http://h21007.www2.hp.com/portal/site/dspp/menuitem.863c3e4cbcdc3f3515b49c108973a801?ciid=2a08725cc2f02110725cc2f02110275d6e10RCRD&jumpid=reg_r1002_usen_c-001_title_r0001>
d412 1
a412 1
Most mentioned distributions are depots. H.Merijn Brand has made prebuilt
d414 5
a418 4
L<http://www.cmve.net/~merijn/> for HP-UX 10.20 (only 32bit), HP-UX 11.00,
HP-UX 11.11 (HP-UX 11i v1), and HP-UX 11.23 (HP-UX 11i v2 PA-RISC) in both
32- and 64-bit versions. For HP-UX 11.23 IPF and HP-UX 11.31 IPF depots are
available too. The IPF versions do not need two versions of GNU gcc.
@


