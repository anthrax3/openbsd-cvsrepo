head	1.1;
branch	1.1.1;
access;
symbols
	OPENBSD_6_1:1.1.1.1.0.36
	OPENBSD_6_1_BASE:1.1.1.1
	OPENBSD_6_0:1.1.1.1.0.34
	OPENBSD_6_0_BASE:1.1.1.1
	OPENBSD_5_9:1.1.1.1.0.28
	OPENBSD_5_9_BASE:1.1.1.1
	OPENBSD_5_8:1.1.1.1.0.30
	OPENBSD_5_8_BASE:1.1.1.1
	PERL_5_20_2:1.1.1.1
	OPENBSD_5_7:1.1.1.1.0.22
	OPENBSD_5_7_BASE:1.1.1.1
	PERL_5_20_1:1.1.1.1
	OPENBSD_5_6:1.1.1.1.0.26
	OPENBSD_5_6_BASE:1.1.1.1
	PERL_5_18_2:1.1.1.1
	PERL:1.1.1
	OPENBSD_5_5:1.1.1.1.0.24
	OPENBSD_5_5_BASE:1.1.1.1
	OPENBSD_5_4:1.1.1.1.0.20
	OPENBSD_5_4_BASE:1.1.1.1
	PERL_5_16_3:1.1.1.1
	OPENBSD_5_3:1.1.1.1.0.18
	OPENBSD_5_3_BASE:1.1.1.1
	OPENBSD_5_2:1.1.1.1.0.16
	OPENBSD_5_2_BASE:1.1.1.1
	OPENBSD_5_1_BASE:1.1.1.1
	OPENBSD_5_1:1.1.1.1.0.14
	OPENBSD_5_0:1.1.1.1.0.12
	OPENBSD_5_0_BASE:1.1.1.1
	OPENBSD_4_9:1.1.1.1.0.10
	OPENBSD_4_9_BASE:1.1.1.1
	PERL_5_12_2:1.1.1.1
	OPENBSD_4_8:1.1.1.1.0.8
	OPENBSD_4_8_BASE:1.1.1.1
	OPENBSD_4_7:1.1.1.1.0.4
	OPENBSD_4_7_BASE:1.1.1.1
	PERL_5_10_1:1.1.1.1
	OPENBSD_4_6:1.1.1.1.0.6
	OPENBSD_4_6_BASE:1.1.1.1
	OPENBSD_4_5:1.1.1.1.0.2
	OPENBSD_4_5_BASE:1.1.1.1
	PERL_5_10_0:1.1.1.1
	CPAN:1.1.1;
locks; strict;
comment	@# @;
expand	@o@;


1.1
date	2008.09.29.17.18.31;	author millert;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	2008.09.29.17.18.31;	author millert;	state Exp;
branches;
next	;


desc
@@


1.1
log
@Initial revision
@
text
@use strict;
use warnings;

BEGIN {
    chdir 't' if -d 't';
    @@INC = '../lib';

    use Config;
    if (! $Config{usethreads}) {
        print("1..0 # Skip: No threads\n");
        exit(0);
    }
}

use Thread qw(:DEFAULT async yield);

use Test::More tests => 13;

my $lock;
{
    no warnings 'once';
    if ($threads::shared::threads_shared) {
        &threads::shared::share(\$lock);
    }
}


BASIC:
{
    sub thr_sub
    {
        lock($lock);
        my $self = Thread->self;
        return $self->tid;
    }

    my $thr;
    {
        lock($lock);

        $thr = Thread->new(\&thr_sub);

        isa_ok($thr, 'Thread');

        ok(! $thr->done(), 'Thread running');
        is($thr->tid, 1, "thread's tid");

        my ($thr2) = Thread->list;
        ok($thr2->equal($thr), '->list returned thread');
    }
    yield();
    sleep(1);

    ok($thr->done(), 'Thread done');
    is($thr->join(), 1, "->join returned thread's tid");
}

ASYNC:
{
    my $thr = async { Thread->self->tid; };
    isa_ok($thr, 'Thread');
    is($thr->tid, 2, "async thread's tid");
    is($thr->join, 2, "->join on async returned tid");
}

COND_:
{
    sub thr_wait
    {
        lock($lock);
        cond_wait($lock);
        return Thread->self->tid;
    }

    my $thr;
    {
        lock($lock);
        $thr = Thread->new(\&thr_wait);
        isa_ok($thr, 'Thread');
        ok(! $thr->done(), 'Thread running');
    }
    yield();
    sleep(1);

    {
        lock($lock);
        cond_signal($lock);
    }
    yield();
    sleep(1);

    ok($thr->done(), 'Thread done');
    is($thr->join(), 3, "->join returned thread's tid");
}

# EOF
@


1.1.1.1
log
@import perl 5.10.0 from CPAN
@
text
@@
