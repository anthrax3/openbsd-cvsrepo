head	1.1;
branch	1.1.1;
access;
symbols
	OPENBSD_6_0:1.1.1.1.0.58
	OPENBSD_6_0_BASE:1.1.1.1
	OPENBSD_5_9:1.1.1.1.0.52
	OPENBSD_5_9_BASE:1.1.1.1
	OPENBSD_5_8:1.1.1.1.0.54
	OPENBSD_5_8_BASE:1.1.1.1
	PERL_5_20_2:1.1.1.1
	OPENBSD_5_7:1.1.1.1.0.46
	OPENBSD_5_7_BASE:1.1.1.1
	PERL_5_20_1:1.1.1.1
	OPENBSD_5_6:1.1.1.1.0.50
	OPENBSD_5_6_BASE:1.1.1.1
	PERL_5_18_2:1.1.1.1
	PERL:1.1.1
	OPENBSD_5_5:1.1.1.1.0.48
	OPENBSD_5_5_BASE:1.1.1.1
	OPENBSD_5_4:1.1.1.1.0.44
	OPENBSD_5_4_BASE:1.1.1.1
	PERL_5_16_3:1.1.1.1
	OPENBSD_5_3:1.1.1.1.0.42
	OPENBSD_5_3_BASE:1.1.1.1
	OPENBSD_5_2:1.1.1.1.0.40
	OPENBSD_5_2_BASE:1.1.1.1
	OPENBSD_5_1_BASE:1.1.1.1
	OPENBSD_5_1:1.1.1.1.0.38
	OPENBSD_5_0:1.1.1.1.0.36
	OPENBSD_5_0_BASE:1.1.1.1
	OPENBSD_4_9:1.1.1.1.0.34
	OPENBSD_4_9_BASE:1.1.1.1
	PERL_5_12_2:1.1.1.1
	OPENBSD_4_8:1.1.1.1.0.32
	OPENBSD_4_8_BASE:1.1.1.1
	OPENBSD_4_7:1.1.1.1.0.28
	OPENBSD_4_7_BASE:1.1.1.1
	PERL_5_10_1:1.1.1.1
	OPENBSD_4_6:1.1.1.1.0.30
	OPENBSD_4_6_BASE:1.1.1.1
	OPENBSD_4_5:1.1.1.1.0.26
	OPENBSD_4_5_BASE:1.1.1.1
	PERL_5_10_0:1.1.1.1
	OPENBSD_4_4:1.1.1.1.0.24
	OPENBSD_4_4_BASE:1.1.1.1
	OPENBSD_4_3:1.1.1.1.0.22
	OPENBSD_4_3_BASE:1.1.1.1
	OPENBSD_4_2:1.1.1.1.0.20
	OPENBSD_4_2_BASE:1.1.1.1
	OPENBSD_4_1:1.1.1.1.0.18
	OPENBSD_4_1_BASE:1.1.1.1
	OPENBSD_4_0:1.1.1.1.0.16
	OPENBSD_4_0_BASE:1.1.1.1
	PERL_5_8_8:1.1.1.1
	OPENBSD_3_9:1.1.1.1.0.14
	OPENBSD_3_9_BASE:1.1.1.1
	OPENBSD_3_8:1.1.1.1.0.12
	OPENBSD_3_8_BASE:1.1.1.1
	OPENBSD_3_7:1.1.1.1.0.10
	OPENBSD_3_7_BASE:1.1.1.1
	PERL_5_8_6:1.1.1.1
	OPENBSD_3_6:1.1.1.1.0.8
	OPENBSD_3_6_BASE:1.1.1.1
	PERL_5_8_5:1.1.1.1
	PERL_5_8_3:1.1.1.1
	OPENBSD_3_5:1.1.1.1.0.6
	OPENBSD_3_5_BASE:1.1.1.1
	PERL_5_8_2:1.1.1.1
	OPENBSD_3_4:1.1.1.1.0.4
	OPENBSD_3_4_BASE:1.1.1.1
	OPENBSD_3_3:1.1.1.1.0.2
	OPENBSD_3_3_BASE:1.1.1.1
	PERL_5_8_0:1.1.1.1
	CPAN:1.1.1;
locks; strict;
comment	@# @;
expand	@o@;


1.1
date	2002.10.27.22.14.58;	author millert;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	2002.10.27.22.14.58;	author millert;	state Exp;
branches;
next	;


desc
@@


1.1
log
@Initial revision
@
text
@#!./perl 

BEGIN {
    chdir 't' if -d 't';
    @@INC = '../lib';
    $ENV{PERL5LIB} = '../lib';
}

$| = 1;

print "1..27\n";

# catch "used once" warnings
my @@warns;
BEGIN { $SIG{__WARN__} = sub { push @@warns, @@_ }; $^W = 1 };

%x = ();
$y = 3;
@@z = ();
$X::x = 13;

use vars qw($p @@q %r *s &t $X::p);

my $e = !(grep /^Name "X::x" used only once: possible typo/, @@warns) && 'not ';
print "${e}ok 1\n";
$e = !(grep /^Name "main::x" used only once: possible typo/, @@warns) && 'not ';
print "${e}ok 2\n";
$e = !(grep /^Name "main::y" used only once: possible typo/, @@warns) && 'not ';
print "${e}ok 3\n";
$e = !(grep /^Name "main::z" used only once: possible typo/, @@warns) && 'not ';
print "${e}ok 4\n";
($e, @@warns) = @@warns != 4 && 'not ';
print "${e}ok 5\n";

# this is inside eval() to avoid creation of symbol table entries and
# to avoid "used once" warnings
eval <<'EOE';
$e = ! $main::{p} && 'not ';
print "${e}ok 6\n";
$e = ! *q{ARRAY} && 'not ';
print "${e}ok 7\n";
$e = ! *r{HASH} && 'not ';
print "${e}ok 8\n";
$e = ! $main::{s} && 'not ';
print "${e}ok 9\n";
$e = ! *t{CODE} && 'not ';
print "${e}ok 10\n";
$e = defined $X::{q} && 'not ';
print "${e}ok 11\n";
$e = ! $X::{p} && 'not ';
print "${e}ok 12\n";
EOE
$e = $@@ && 'not ';
print "${e}ok 13\n";

eval q{use vars qw(@@X::y !abc); $e = ! *X::y{ARRAY} && 'not '};
print "${e}ok 14\n";
$e = $@@ !~ /^'!abc' is not a valid variable name/ && 'not ';
print "${e}ok 15\n";

eval 'use vars qw($x[3])';
$e = $@@ !~ /^Can't declare individual elements of hash or array/ && 'not ';
print "${e}ok 16\n";

{ local $^W;
  eval 'use vars qw($!)';
  ($e, @@warns) = ($@@ || @@warns) ? 'not ' : '';
  print "${e}ok 17\n";
};

# NB the next test only works because vars.pm has already been loaded
eval 'use warnings "vars"; use vars qw($!)';
$e = ($@@ || (shift(@@warns)||'') !~ /^No need to declare built-in vars/)
			&& 'not ';
print "${e}ok 18\n";

no strict 'vars';
eval 'use vars qw(@@x%%)';
$e = $@@ && 'not ';
print "${e}ok 19\n";
$e = ! *{'x%%'}{ARRAY} && 'not ';
print "${e}ok 20\n";
eval '$u = 3; @@v = (); %w = ()';
$e = $@@ && 'not ';
print "${e}ok 21\n";

use strict 'vars';
eval 'use vars qw(@@y%%)';
$e = $@@ !~ /^'\@@y%%' is not a valid variable name under strict vars/ && 'not ';
print "${e}ok 22\n";
$e = *{'y%%'}{ARRAY} && 'not ';
print "${e}ok 23\n";
eval '$u = 3; @@v = (); %w = ()';
my @@errs = split /\n/, $@@;
$e = @@errs != 3 && 'not ';
print "${e}ok 24\n";
$e = !(grep(/^Global symbol "\$u" requires explicit package name/, @@errs))
			&& 'not ';
print "${e}ok 25\n";
$e = !(grep(/^Global symbol "\@@v" requires explicit package name/, @@errs))
			&& 'not ';
print "${e}ok 26\n";
$e = !(grep(/^Global symbol "\%w" requires explicit package name/, @@errs))
			&& 'not ';
print "${e}ok 27\n";
@


1.1.1.1
log
@stock perl 5.8.0 from CPAN
@
text
@@
