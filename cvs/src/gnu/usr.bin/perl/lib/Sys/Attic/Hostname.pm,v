head	1.3;
access;
symbols
	OPENBSD_2_6:1.2.0.8
	OPENBSD_2_6_BASE:1.2
	PERL_500503:1.1.1.2
	CPAN:1.1.1
	OPENBSD_2_5:1.2.0.6
	OPENBSD_2_5_BASE:1.2
	OPENBSD_2_4:1.2.0.4
	OPENBSD_2_4_BASE:1.2
	OPENBSD_2_3:1.2.0.2
	OPENBSD_2_3_BASE:1.2
	OPENBSD_2_2:1.1.1.1.0.6
	OPENBSD_2_2_BASE:1.1.1.1
	OPENBSD_2_1:1.1.1.1.0.4
	OPENBSD_2_1_BASE:1.1.1.1
	OPENBSD_2_0:1.1.1.1.0.2
	OPENBSD_2_0_BASE:1.1.1.1
	perl5003:1.1.1.1
	lwall:1.1.1;
locks; strict;
comment	@# @;


1.3
date	2000.04.06.17.06.50;	author millert;	state dead;
branches;
next	1.2;

1.2
date	97.11.30.07.57.57;	author millert;	state Exp;
branches;
next	1.1;

1.1
date	96.08.19.10.12.48;	author downsj;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	96.08.19.10.12.48;	author downsj;	state Exp;
branches;
next	1.1.1.2;

1.1.1.2
date	99.04.29.22.40.17;	author millert;	state Exp;
branches;
next	;


desc
@@


1.3
log
@perl-5.6.0 + local changes
@
text
@package Sys::Hostname;

use Carp;
require Exporter;
@@ISA = qw(Exporter);
@@EXPORT = qw(hostname);

=head1 NAME

Sys::Hostname - Try every conceivable way to get hostname

=head1 SYNOPSIS

    use Sys::Hostname;
    $host = hostname;

=head1 DESCRIPTION

Attempts several methods of getting the system hostname and
then caches the result.  It tries C<syscall(SYS_gethostname)>,
C<`hostname`>, C<`uname -n`>, and the file F</com/host>.
If all that fails it C<croak>s.

All nulls, returns, and newlines are removed from the result.

=head1 AUTHOR

David Sundstrom E<lt>F<sunds@@asictest.sc.ti.com>E<gt>

Texas Instruments

=cut

sub hostname {

  # method 1 - we already know it
  return $host if defined $host;

  if ($^O eq 'VMS') {

    # method 2 - no sockets ==> return DECnet node name
    eval { local $SIG{__DIE__}; $host = (gethostbyname('me'))[0] };
    if ($@@) { return $host = $ENV{'SYS$NODE'}; }

    # method 3 - has someone else done the job already?  It's common for the
    #    TCP/IP stack to advertise the hostname via a logical name.  (Are
    #    there any other logicals which TCP/IP stacks use for the host name?)
    $host = $ENV{'ARPANET_HOST_NAME'}  || $ENV{'INTERNET_HOST_NAME'} ||
            $ENV{'MULTINET_HOST_NAME'} || $ENV{'UCX$INET_HOST'}      ||
            $ENV{'TCPWARE_DOMAINNAME'} || $ENV{'NEWS_ADDRESS'};
    return $host if $host;

    # method 4 - does hostname happen to work?
    my($rslt) = `hostname`;
    if ($rslt !~ /IVVERB/) { ($host) = $rslt =~ /^(\S+)/; }
    return $host if $host;

    # rats!
    $host = '';
    Carp::croak "Cannot get host name of local machine";  

  }
  elsif ($^O eq 'MSWin32') {
    ($host) = gethostbyname('localhost');
    chomp($host = `hostname 2> NUL`) unless defined $host;
    return $host;
  }
  else {  # Unix

    # method 2 - syscall is preferred since it avoids tainting problems
    eval {
	local $SIG{__DIE__};
	{
	    package main;
	    require "syscall.ph";
	}
	$host = "\0" x 65; ## preload scalar
	syscall(&main::SYS_gethostname, $host, 65) == 0;
    }

    # method 2a - syscall using systeminfo instead of gethostname
    #           -- needed on systems like Solaris
    || eval {
	local $SIG{__DIE__};
	{
	    package main;
	    require "sys/syscall.ph";
	    require "sys/systeminfo.ph";
	}
	$host = "\0" x 65; ## preload scalar
	syscall(&main::SYS_systeminfo, &main::SI_HOSTNAME, $host, 65) != -1;
    }

    # method 3 - trusty old hostname command
    || eval {
	local $SIG{__DIE__};
	$host = `(hostname) 2>/dev/null`; # bsdish
    }

    # method 4 - sysV uname command (may truncate)
    || eval {
	local $SIG{__DIE__};
	$host = `uname -n 2>/dev/null`; ## sysVish
    }

    # method 5 - Apollo pre-SR10
    || eval {
	local $SIG{__DIE__};
	($host,$a,$b,$c,$d)=split(/[:\. ]/,`/com/host`,6);
    }

    # bummer
    || Carp::croak "Cannot get host name of local machine";  

    # remove garbage 
    $host =~ tr/\0\r\n//d;
    $host;
  }
}

1;
@


1.2
log
@perl 5.004_04
@
text
@@


1.1
log
@Initial revision
@
text
@d28 1
a28 1
David Sundstrom <sunds@@asictest.sc.ti.com>
d42 1
a42 1
    eval {gethostbyname('me')};
d63 5
d72 1
d81 13
d96 1
d102 1
d108 1
@


1.1.1.1
log
@Import of Perl 5.003 into the tree.  Makefile.bsd-wrapper and
config.sh.OpenBSD are the only local changes.
@
text
@@


1.1.1.2
log
@perl5.005_03
@
text
@d28 1
a28 1
David Sundstrom E<lt>F<sunds@@asictest.sc.ti.com>E<gt>
d42 1
a42 1
    eval { local $SIG{__DIE__}; $host = (gethostbyname('me'))[0] };
a62 5
  elsif ($^O eq 'MSWin32') {
    ($host) = gethostbyname('localhost');
    chomp($host = `hostname 2> NUL`) unless defined $host;
    return $host;
  }
a66 1
	local $SIG{__DIE__};
a74 13
    # method 2a - syscall using systeminfo instead of gethostname
    #           -- needed on systems like Solaris
    || eval {
	local $SIG{__DIE__};
	{
	    package main;
	    require "sys/syscall.ph";
	    require "sys/systeminfo.ph";
	}
	$host = "\0" x 65; ## preload scalar
	syscall(&main::SYS_systeminfo, &main::SI_HOSTNAME, $host, 65) != -1;
    }

a76 1
	local $SIG{__DIE__};
a81 1
	local $SIG{__DIE__};
a86 1
	local $SIG{__DIE__};
@

