head	1.2;
access;
symbols
	OPENBSD_6_1:1.2.0.4
	OPENBSD_6_1_BASE:1.2
	OPENBSD_6_0:1.1.1.5.0.10
	OPENBSD_6_0_BASE:1.1.1.5
	OPENBSD_5_9:1.1.1.5.0.4
	OPENBSD_5_9_BASE:1.1.1.5
	OPENBSD_5_8:1.1.1.5.0.6
	OPENBSD_5_8_BASE:1.1.1.5
	PERL_5_20_2:1.1.1.5
	OPENBSD_5_7:1.1.1.5.0.2
	OPENBSD_5_7_BASE:1.1.1.5
	PERL_5_20_1:1.1.1.5
	OPENBSD_5_6:1.1.1.4.0.26
	OPENBSD_5_6_BASE:1.1.1.4
	PERL_5_18_2:1.1.1.4
	PERL:1.1.1
	OPENBSD_5_5:1.1.1.4.0.24
	OPENBSD_5_5_BASE:1.1.1.4
	OPENBSD_5_4:1.1.1.4.0.20
	OPENBSD_5_4_BASE:1.1.1.4
	PERL_5_16_3:1.1.1.4
	OPENBSD_5_3:1.1.1.4.0.18
	OPENBSD_5_3_BASE:1.1.1.4
	OPENBSD_5_2:1.1.1.4.0.16
	OPENBSD_5_2_BASE:1.1.1.4
	OPENBSD_5_1_BASE:1.1.1.4
	OPENBSD_5_1:1.1.1.4.0.14
	OPENBSD_5_0:1.1.1.4.0.12
	OPENBSD_5_0_BASE:1.1.1.4
	OPENBSD_4_9:1.1.1.4.0.10
	OPENBSD_4_9_BASE:1.1.1.4
	PERL_5_12_2:1.1.1.4
	OPENBSD_4_8:1.1.1.4.0.8
	OPENBSD_4_8_BASE:1.1.1.4
	OPENBSD_4_7:1.1.1.4.0.4
	OPENBSD_4_7_BASE:1.1.1.4
	PERL_5_10_1:1.1.1.4
	OPENBSD_4_6:1.1.1.4.0.6
	OPENBSD_4_6_BASE:1.1.1.4
	OPENBSD_4_5:1.1.1.4.0.2
	OPENBSD_4_5_BASE:1.1.1.4
	PERL_5_10_0:1.1.1.4
	OPENBSD_4_4:1.1.1.3.0.10
	OPENBSD_4_4_BASE:1.1.1.3
	OPENBSD_4_3:1.1.1.3.0.8
	OPENBSD_4_3_BASE:1.1.1.3
	OPENBSD_4_2:1.1.1.3.0.6
	OPENBSD_4_2_BASE:1.1.1.3
	OPENBSD_4_1:1.1.1.3.0.4
	OPENBSD_4_1_BASE:1.1.1.3
	OPENBSD_4_0:1.1.1.3.0.2
	OPENBSD_4_0_BASE:1.1.1.3
	PERL_5_8_8:1.1.1.3
	OPENBSD_3_9:1.1.1.2.0.10
	OPENBSD_3_9_BASE:1.1.1.2
	OPENBSD_3_8:1.1.1.2.0.8
	OPENBSD_3_8_BASE:1.1.1.2
	OPENBSD_3_7:1.1.1.2.0.6
	OPENBSD_3_7_BASE:1.1.1.2
	PERL_5_8_6:1.1.1.2
	OPENBSD_3_6:1.1.1.2.0.4
	OPENBSD_3_6_BASE:1.1.1.2
	PERL_5_8_5:1.1.1.2
	PERL_5_8_3:1.1.1.2
	OPENBSD_3_5:1.1.1.2.0.2
	OPENBSD_3_5_BASE:1.1.1.2
	PERL_5_8_2:1.1.1.2
	OPENBSD_3_4:1.1.1.1.0.4
	OPENBSD_3_4_BASE:1.1.1.1
	OPENBSD_3_3:1.1.1.1.0.2
	OPENBSD_3_3_BASE:1.1.1.1
	PERL_5_8_0:1.1.1.1
	CPAN:1.1.1;
locks; strict;
comment	@# @;
expand	@o@;


1.2
date	2017.02.05.00.32.15;	author afresh1;	state Exp;
branches;
next	1.1;
commitid	cxJ08BvJA9Pt2PTM;

1.1
date	2002.10.27.22.14.57;	author millert;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	2002.10.27.22.14.57;	author millert;	state Exp;
branches;
next	1.1.1.2;

1.1.1.2
date	2003.12.03.02.43.57;	author millert;	state Exp;
branches;
next	1.1.1.3;

1.1.1.3
date	2006.03.28.18.48.31;	author millert;	state Exp;
branches;
next	1.1.1.4;

1.1.1.4
date	2008.09.29.17.18.30;	author millert;	state Exp;
branches;
next	1.1.1.5;

1.1.1.5
date	2014.11.17.20.53.07;	author afresh1;	state Exp;
branches;
next	;
commitid	B31cAbBIXiCqnL97;


desc
@@


1.2
log
@Fix merge issues, remove excess files - match perl-5.24.1 dist
@
text
@
BEGIN {
    chdir 't' if -d 't';
    @@INC = '../lib';
    require './test.pl';
}

plan tests => 24;

my $a = chr(0x100);

is(ord($a), 0x100, "ord sanity check");
is(length($a), 1,  "length sanity check");
is(substr($a, 0, 1), "\x{100}",  "substr sanity check");
is(index($a, "\x{100}"),  0, "index sanity check");
is(rindex($a, "\x{100}"), 0, "rindex sanity check");
is(bytes::length($a), 2,  "bytes::length sanity check");
is(bytes::chr(0x100), chr(0),  "bytes::chr sanity check");

{
    use bytes;
    my $b = chr(0x100); # affected by 'use bytes'
    is(ord($b), 0, "chr truncates under use bytes");
    is(length($b), 1, "length truncated under use bytes");
    is(bytes::ord($b), 0, "bytes::ord truncated under use bytes");
    is(bytes::length($b), 1, "bytes::length truncated under use bytes");
    is(bytes::substr($b, 0, 1), "\0", "bytes::substr truncated under use bytes");
}

my $c = chr(0x100);
my $c2 = chr(0x2c7); # a unicode character that doesn't fold
utf8::encode(my $c2_utf8 = $c2);

{
    use bytes;
    if ($::IS_EBCDIC) { # EBCDIC?
	is(ord($c), 0x8c, "ord under use bytes looks at the 1st byte");
    } else {
	is(ord($c), 0xc4, "ord under use bytes looks at the 1st byte");
    }
    is(length($c), 2, "length under use bytes looks at bytes");
    is(bytes::length($c), 2, "bytes::length under use bytes looks at bytes");
    if ($::IS_EBCDIC) { # EBCDIC?
	is(bytes::ord($c), 0x8c, "bytes::ord under use bytes looks at the 1st byte");
    } else {
	is(bytes::ord($c), 0xc4, "bytes::ord under use bytes looks at the 1st byte");
    }
    # In z/OS \x41,\x8c are the codepoints corresponding to \x80,\xc4 respectively under ASCII platform
    if ($::IS_EBCDIC) { # EBCDIC?
        is(bytes::substr($c, 0, 1), "\x8c", "bytes::substr under use bytes looks at bytes");
        is(bytes::index($c, "\x41"), 1, "bytes::index under use bytes looks at bytes");
        is(bytes::rindex($c, "\x8c"), 0, "bytes::rindex under use bytes looks at bytes");

    }
    else{
        is(bytes::substr($c, 0, 1), "\xc4", "bytes::substr under use bytes looks at bytes");
        is(bytes::index($c, "\x80"), 1, "bytes::index under use bytes looks at bytes");
        is(bytes::rindex($c, "\xc4"), 0, "bytes::rindex under use bytes looks at bytes");
    }
    
    # [perl #117355] [lu]cfirst don't respect 'use bytes'
    # and if there's other tests for lc/uc under bytes I didn't find them
    is(lc($c2), $c2_utf8, "lc under use bytes returns bytes");
    is(uc($c2), $c2_utf8, "uc under use bytes returns bytes");
    is(lcfirst($c2), $c2_utf8, "lcfirst under use bytes returns bytes");
    is(ucfirst($c2), $c2_utf8, "unfirst under use bytes returns bytes");
}

{
    fresh_perl_like ('use bytes; bytes::moo()',
		     qr/Undefined subroutine bytes::moo/, {stderr=>1},
		    "Check Carp is loaded for AUTOLOADing errors")
}
@


1.1
log
@Initial revision
@
text
@d1 1
d5 1
d8 1
a8 1
print "1..6\n";
d10 1
a10 1
my $a = chr(0x0100);
d12 7
a18 2
print ord($a)     == 0x100 ? "ok 1\n" : "not ok 1\n";
print length($a)  ==     1 ? "ok 2\n" : "not ok 2\n";
d22 6
a27 2
    my $b = chr(0x0100);
    print ord($b) ==     0 ? "ok 3\n" : "not ok 3\n";
d30 3
a32 3
my $c = chr(0x0100);

print ord($c)     == 0x100 ? "ok 4\n" : "not ok 4\n";
d36 2
a37 2
    if (ord('A') == 193) {
	print ord($c) == 0x8c ? "ok 5\n" : "not ok 5\n";
d39 1
a39 1
	print ord($c) == 0xc4 ? "ok 5\n" : "not ok 5\n";
d41 26
a66 1
    print length($c) == 2 ? "ok 6\n" : "not ok 6\n";
d69 5
@


1.1.1.1
log
@stock perl 5.8.0 from CPAN
@
text
@@


1.1.1.2
log
@perl 5.8.2 from CPAN
@
text
@a3 1
    require './test.pl';
d6 1
a6 1
plan tests => 19;
d8 1
a8 1
my $a = chr(0x100);
d10 2
a11 7
is(ord($a), 0x100, "ord sanity check");
is(length($a), 1,  "length sanity check");
is(substr($a, 0, 1), "\x{100}",  "substr sanity check");
is(index($a, "\x{100}"),  0, "index sanity check");
is(rindex($a, "\x{100}"), 0, "rindex sanity check");
is(bytes::length($a), 2,  "bytes::length sanity check");
is(bytes::chr(0x100), chr(0),  "bytes::chr sanity check");
d15 2
a16 6
    my $b = chr(0x100); # affected by 'use bytes'
    is(ord($b), 0, "chr truncates under use bytes");
    is(length($b), 1, "length truncated under use bytes");
    is(bytes::ord($b), 0, "bytes::ord truncated under use bytes");
    is(bytes::length($b), 1, "bytes::length truncated under use bytes");
    is(bytes::substr($b, 0, 1), "\0", "bytes::substr truncated under use bytes");
d19 3
a21 1
my $c = chr(0x100);
d25 2
a26 9
    if (ord('A') == 193) { # EBCDIC?
	is(ord($c), 0x8c, "ord under use bytes looks at the 1st byte");
    } else {
	is(ord($c), 0xc4, "ord under use bytes looks at the 1st byte");
    }
    is(length($c), 2, "length under use bytes looks at bytes");
    is(bytes::length($c), 2, "bytes::length under use bytes looks at bytes");
    if (ord('A') == 193) { # EBCDIC?
	is(bytes::ord($c), 0x8c, "bytes::ord under use bytes looks at the 1st byte");
d28 1
a28 1
	is(bytes::ord($c), 0xc4, "bytes::ord under use bytes looks at the 1st byte");
d30 1
a30 3
    is(bytes::substr($c, 0, 1), "\xc4", "bytes::substr under use bytes looks at bytes");
    is(bytes::index($c, "\x80"), 1, "bytes::index under use bytes looks at bytes");
    is(bytes::rindex($c, "\xc4"), 0, "bytes::rindex under use bytes looks at bytes");
d32 1
@


1.1.1.3
log
@perl 5.8.8 import
@
text
@d7 1
a7 1
plan tests => 20;
a47 6
}

{
    fresh_perl_like ('use bytes; bytes::moo()',
		     qr/Undefined subroutine bytes::moo/, {stderr=>1},
		    "Check Carp is loaded for AUTOLOADing errors")
@


1.1.1.4
log
@import perl 5.10.0 from CPAN
@
text
@a0 1

d45 3
a47 13
    # In z/OS \x41,\x8c are the codepoints corresponding to \x80,\xc4 respectively under ASCII platform
    if (ord('A') == 193) { # EBCDIC?
        is(bytes::substr($c, 0, 1), "\x8c", "bytes::substr under use bytes looks at bytes");
        is(bytes::index($c, "\x41"), 1, "bytes::index under use bytes looks at bytes");
        is(bytes::rindex($c, "\x8c"), 0, "bytes::rindex under use bytes looks at bytes");

    }
    else{
        is(bytes::substr($c, 0, 1), "\xc4", "bytes::substr under use bytes looks at bytes");
        is(bytes::index($c, "\x80"), 1, "bytes::index under use bytes looks at bytes");
        is(bytes::rindex($c, "\xc4"), 0, "bytes::rindex under use bytes looks at bytes");
    }
    
@


1.1.1.5
log
@Import perl-5.20.1
@
text
@d8 1
a8 1
plan tests => 24;
a30 2
my $c2 = chr(0x2c7); # a unicode character that doesn't fold
utf8::encode(my $c2_utf8 = $c2);
a58 6
    # [perl #117355] [lu]cfirst don't respect 'use bytes'
    # and if there's other tests for lc/uc under bytes I didn't find them
    is(lc($c2), $c2_utf8, "lc under use bytes returns bytes");
    is(uc($c2), $c2_utf8, "uc under use bytes returns bytes");
    is(lcfirst($c2), $c2_utf8, "lcfirst under use bytes returns bytes");
    is(ucfirst($c2), $c2_utf8, "unfirst under use bytes returns bytes");
@


