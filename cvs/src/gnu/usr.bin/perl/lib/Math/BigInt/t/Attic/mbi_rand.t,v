head	1.2;
access;
symbols
	OPENBSD_4_8:1.1.1.4.0.8
	OPENBSD_4_8_BASE:1.1.1.4
	OPENBSD_4_7:1.1.1.4.0.4
	OPENBSD_4_7_BASE:1.1.1.4
	PERL_5_10_1:1.1.1.4
	OPENBSD_4_6:1.1.1.4.0.6
	OPENBSD_4_6_BASE:1.1.1.4
	OPENBSD_4_5:1.1.1.4.0.2
	OPENBSD_4_5_BASE:1.1.1.4
	PERL_5_10_0:1.1.1.4
	OPENBSD_4_4:1.1.1.3.0.10
	OPENBSD_4_4_BASE:1.1.1.3
	OPENBSD_4_3:1.1.1.3.0.8
	OPENBSD_4_3_BASE:1.1.1.3
	OPENBSD_4_2:1.1.1.3.0.6
	OPENBSD_4_2_BASE:1.1.1.3
	OPENBSD_4_1:1.1.1.3.0.4
	OPENBSD_4_1_BASE:1.1.1.3
	OPENBSD_4_0:1.1.1.3.0.2
	OPENBSD_4_0_BASE:1.1.1.3
	PERL_5_8_8:1.1.1.3
	OPENBSD_3_9:1.1.1.2.0.10
	OPENBSD_3_9_BASE:1.1.1.2
	OPENBSD_3_8:1.1.1.2.0.8
	OPENBSD_3_8_BASE:1.1.1.2
	OPENBSD_3_7:1.1.1.2.0.6
	OPENBSD_3_7_BASE:1.1.1.2
	PERL_5_8_6:1.1.1.2
	OPENBSD_3_6:1.1.1.2.0.4
	OPENBSD_3_6_BASE:1.1.1.2
	PERL_5_8_5:1.1.1.2
	PERL_5_8_3:1.1.1.2
	OPENBSD_3_5:1.1.1.2.0.2
	OPENBSD_3_5_BASE:1.1.1.2
	PERL_5_8_2:1.1.1.2
	OPENBSD_3_4:1.1.1.1.0.4
	OPENBSD_3_4_BASE:1.1.1.1
	OPENBSD_3_3:1.1.1.1.0.2
	OPENBSD_3_3_BASE:1.1.1.1
	PERL_5_8_0:1.1.1.1
	CPAN:1.1.1;
locks; strict;
comment	@# @;
expand	@o@;


1.2
date	2010.09.24.14.59.42;	author millert;	state dead;
branches;
next	1.1;

1.1
date	2002.10.27.22.15.00;	author millert;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	2002.10.27.22.15.00;	author millert;	state Exp;
branches;
next	1.1.1.2;

1.1.1.2
date	2003.12.03.02.44.06;	author millert;	state Exp;
branches;
next	1.1.1.3;

1.1.1.3
date	2006.03.28.18.48.52;	author millert;	state Exp;
branches;
next	1.1.1.4;

1.1.1.4
date	2008.09.29.17.18.38;	author millert;	state Exp;
branches;
next	;


desc
@@


1.2
log
@remove files no longer in perl 5.12.2 (or that have moved)
@
text
@#!/usr/bin/perl -w

use Test;
use strict;

my $count;
  
BEGIN
  {
  $| = 1;
  if ($^O eq 'os390') { print "1..0\n"; exit(0) } # test takes too long there
  unshift @@INC, '../lib'; # for running manually
  my $location = $0; $location =~ s/mbi_rand.t//;
  unshift @@INC, $location; # to locate the testing files
  chdir 't' if -d 't';
  $count = 128;
  plan tests => $count*2;
  }

use Math::BigInt;
my $c = 'Math::BigInt';

my $length = 128;

# If you get a failure here, please re-run the test with the printed seed
# value as input: perl t/mbi_rand.t seed

my $seed = ($#ARGV == 0) ? $ARGV[0] : int(rand(65537));
print "# seed: $seed\n"; srand($seed);

my ($A,$B,$As,$Bs,$ADB,$AMB,$la,$lb);
my $two = Math::BigInt->new(2);
for (my $i = 0; $i < $count; $i++)
  {
  # length of A and B
  $la = int(rand($length)+1); $lb = int(rand($length)+1);
  $As = ''; $Bs = '';
  # we create the numbers from "patterns", e.g. get a random number and a
  # random count and string them together. This means things like
  # "100000999999999999911122222222" are much more likely. If we just strung
  # together digits, we would end up with "1272398823211223" etc.
  while (length($As) < $la) { $As .= int(rand(100)) x int(rand(16)); }
  while (length($Bs) < $lb) { $Bs .= int(rand(100)) x int(rand(16)); }
  $As =~ s/^0+//; $Bs =~ s/^0+//; 
  $As = $As || '0'; $Bs = $Bs || '0';
  # print "# As $As\n# Bs $Bs\n";
  $A = $c->new($As); $B = $c->new($Bs);
  # print "# A $A\n# B $B\n";
  if ($A->is_zero() || $B->is_zero())
    {
    ok (1,1); ok (1,1); next;
    }
  # check that int(A/B)*B + A % B == A holds for all inputs
  # $X = ($A/$B)*$B + 2 * ($A % $B) - ($A % $B);
  ($ADB,$AMB) = $A->copy()->bdiv($B);
  print "# ". join(' ',Math::BigInt::Calc->_base_len()),"\n"
   unless ok ($ADB*$B+$two*$AMB-$AMB,$As);
  # swap 'em and try this, too
  # $X = ($B/$A)*$A + $B % $A;
  ($ADB,$AMB) = $B->copy()->bdiv($A);
  print "# ". join(' ',Math::BigInt::Calc->_base_len()),"\n"
   unless ok ($ADB*$A+$two*$AMB-$AMB,$Bs);
  }

@


1.1
log
@Initial revision
@
text
@@


1.1.1.1
log
@stock perl 5.8.0 from CPAN
@
text
@@


1.1.1.2
log
@perl 5.8.2 from CPAN
@
text
@d17 1
a17 1
  plan tests => $count*4;
d26 1
a26 1
# value as input "perl t/mbi_rand.t seed" and send me the output
d28 1
a28 1
my $seed = ($#ARGV == 0) ? $ARGV[0] : int(rand(1165537));
a37 1

d41 1
a41 2
  # together digits, we would end up with "1272398823211223" etc. It also means
  # that we get more frequently equal numbers or other special cases.
a43 1

d51 1
a51 1
    for (1..4) { ok (1,1); } next;
a52 1

a53 1

a54 1

d56 1
a56 4
#  print "# ($A / $B, $A % $B ) = $ADB $AMB\n";

  print "# seed $seed, ". join(' ',Math::BigInt::Calc->_base_len()),"\n".
        "# tried $ADB * $B + $two*$AMB - $AMB\n"
a57 2
  print "# seed: $seed, \$ADB * \$B / \$B = ", $ADB * $B / $B, " != $ADB (\$B=$B)\n"
   unless ok ($ADB*$B/$B,$ADB);
d61 1
a61 3
  #print "check: $ADB $AMB";
  print "# seed $seed, ". join(' ',Math::BigInt::Calc->_base_len()),"\n".
        "# tried $ADB * $A + $two*$AMB - $AMB\n"
a62 4
#  print " +$two * $AMB = ",$ADB * $A + $two * $AMB,"\n";
#  print " -$AMB = ",$ADB * $A + $two * $AMB - $AMB,"\n";
  print "# seed $seed, \$ADB * \$A / \$A = ", $ADB * $A / $A, " != $ADB (\$A=$A)\n"
   unless ok ($ADB*$A/$A,$ADB);
@


1.1.1.3
log
@perl 5.8.8 import
@
text
@a30 6
print "# lib: ", Math::BigInt->config()->{lib},"\n";
if (Math::BigInt->config()->{lib} =~ /::Calc/)
  {
  print "# base len: ", scalar Math::BigInt::Calc->_base_len(),"\n";
  }

d49 1
a49 1
#  print "# As $As\n# Bs $Bs\n";
d51 1
a51 1
  print "# A $A\n# B $B\n";
d62 1
a62 1
  print "# ($A / $B, $A % $B ) = $ADB $AMB\n";
d67 2
a68 8
  if (ok ($ADB*$B/$B,$ADB))
    {
    print "# seed: $seed, \$ADB * \$B / \$B = ", $ADB * $B / $B, " != $ADB (\$B=$B)\n";
    if (Math::BigInt->config()->{lib} =~ /::Calc/)
      {
      print "# ADB->[-1]: ", $ADB->{value}->[-1], " B->[-1]: ", $B->{value}->[-1],"\n";
      }
    }
d72 1
a72 1
  # print "check: $ADB $AMB";
d76 2
a77 2
  print "# +$two * $AMB = ",$ADB * $A + $two * $AMB,"\n";
  print "# -$AMB = ",$ADB * $A + $two * $AMB - $AMB,"\n";
@


1.1.1.4
log
@import perl 5.10.0 from CPAN
@
text
@d3 1
a3 1
use Test::More;
d60 1
a60 1
    for (1..4) { is (1,1, 'skipped this test'); } next;
d72 2
a73 2
   unless is ($ADB*$B+$two*$AMB-$AMB,$As, "ADB * B + 2 * AMB - AMB == A");
  if (is ($ADB*$B/$B,$ADB, "ADB * B / B == ADB"))
d87 1
a87 1
   unless is ($ADB*$A+$two*$AMB-$AMB,$Bs, "ADB * A + 2 * AMB - AMB == B");
d91 1
a91 1
   unless is ($ADB*$A/$A,$ADB, "ADB * A/A == ADB");
@


