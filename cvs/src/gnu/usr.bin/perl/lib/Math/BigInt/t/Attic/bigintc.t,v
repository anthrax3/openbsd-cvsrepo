head	1.2;
access;
symbols
	OPENBSD_4_8:1.1.1.5.0.8
	OPENBSD_4_8_BASE:1.1.1.5
	OPENBSD_4_7:1.1.1.5.0.4
	OPENBSD_4_7_BASE:1.1.1.5
	PERL_5_10_1:1.1.1.5
	OPENBSD_4_6:1.1.1.5.0.6
	OPENBSD_4_6_BASE:1.1.1.5
	OPENBSD_4_5:1.1.1.5.0.2
	OPENBSD_4_5_BASE:1.1.1.5
	PERL_5_10_0:1.1.1.5
	OPENBSD_4_4:1.1.1.4.0.18
	OPENBSD_4_4_BASE:1.1.1.4
	OPENBSD_4_3:1.1.1.4.0.16
	OPENBSD_4_3_BASE:1.1.1.4
	OPENBSD_4_2:1.1.1.4.0.14
	OPENBSD_4_2_BASE:1.1.1.4
	OPENBSD_4_1:1.1.1.4.0.12
	OPENBSD_4_1_BASE:1.1.1.4
	OPENBSD_4_0:1.1.1.4.0.10
	OPENBSD_4_0_BASE:1.1.1.4
	PERL_5_8_8:1.1.1.4
	OPENBSD_3_9:1.1.1.4.0.8
	OPENBSD_3_9_BASE:1.1.1.4
	OPENBSD_3_8:1.1.1.4.0.6
	OPENBSD_3_8_BASE:1.1.1.4
	OPENBSD_3_7:1.1.1.4.0.4
	OPENBSD_3_7_BASE:1.1.1.4
	PERL_5_8_6:1.1.1.4
	OPENBSD_3_6:1.1.1.4.0.2
	OPENBSD_3_6_BASE:1.1.1.4
	PERL_5_8_5:1.1.1.4
	PERL_5_8_3:1.1.1.3
	OPENBSD_3_5:1.1.1.2.0.2
	OPENBSD_3_5_BASE:1.1.1.2
	PERL_5_8_2:1.1.1.2
	OPENBSD_3_4:1.1.1.1.0.4
	OPENBSD_3_4_BASE:1.1.1.1
	OPENBSD_3_3:1.1.1.1.0.2
	OPENBSD_3_3_BASE:1.1.1.1
	PERL_5_8_0:1.1.1.1
	CPAN:1.1.1;
locks; strict;
comment	@# @;
expand	@o@;


1.2
date	2010.09.24.14.59.42;	author millert;	state dead;
branches;
next	1.1;

1.1
date	2002.10.27.22.15.00;	author millert;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	2002.10.27.22.15.00;	author millert;	state Exp;
branches;
next	1.1.1.2;

1.1.1.2
date	2003.12.03.02.44.06;	author millert;	state Exp;
branches;
next	1.1.1.3;

1.1.1.3
date	2004.04.07.21.13.20;	author millert;	state Exp;
branches;
next	1.1.1.4;

1.1.1.4
date	2004.08.09.17.47.18;	author millert;	state Exp;
branches;
next	1.1.1.5;

1.1.1.5
date	2008.09.29.17.18.38;	author millert;	state Exp;
branches;
next	;


desc
@@


1.2
log
@remove files no longer in perl 5.12.2 (or that have moved)
@
text
@#!/usr/bin/perl -w

use strict;
use Test;

BEGIN 
  {
  $| = 1;
  chdir 't' if -d 't';
  unshift @@INC, '../lib'; # for running manually
  }

use Math::BigInt::Calc;

BEGIN
  {
  my $additional = 0;
  $additional = 27 if $Math::BigInt::Calc::VERSION > 0.18;
  plan tests => 80 + $additional;
  }

# testing of Math::BigInt::Calc, primarily for interface/api and not for the
# math functionality

my $C = 'Math::BigInt::Calc';	# pass classname to sub's

# _new and _str
my $x = $C->_new(\"123"); my $y = $C->_new(\"321");
ok (ref($x),'ARRAY'); ok (${$C->_str($x)},123); ok (${$C->_str($y)},321);

###############################################################################
# _add, _sub, _mul, _div
ok (${$C->_str($C->_add($x,$y))},444);
ok (${$C->_str($C->_sub($x,$y))},123);
ok (${$C->_str($C->_mul($x,$y))},39483);
ok (${$C->_str($C->_div($x,$y))},123);

###############################################################################
# check that mul/div doesn't change $y
# and returns the same reference, not something new
ok (${$C->_str($C->_mul($x,$y))},39483);
ok (${$C->_str($x)},39483); ok (${$C->_str($y)},321);

ok (${$C->_str($C->_div($x,$y))},123);
ok (${$C->_str($x)},123); ok (${$C->_str($y)},321);

$x = $C->_new(\"39483");
my ($x1,$r1) = $C->_div($x,$y);
ok ("$x1","$x");
$C->_inc($x1);
ok ("$x1","$x");
ok (${$C->_str($r1)},'0');

$x = $C->_new(\"39483");	# reset

###############################################################################
my $z = $C->_new(\"2");
ok (${$C->_str($C->_add($x,$z))},39485);
my ($re,$rr) = $C->_div($x,$y);

ok (${$C->_str($re)},123); ok (${$C->_str($rr)},2);

# is_zero, _is_one, _one, _zero
ok ($C->_is_zero($x),0);
ok ($C->_is_one($x),0);

ok ($C->_is_one($C->_one()),1); ok ($C->_is_one($C->_zero()),0);
ok ($C->_is_zero($C->_zero()),1); ok ($C->_is_zero($C->_one()),0);

# is_odd, is_even
ok ($C->_is_odd($C->_one()),1); ok ($C->_is_odd($C->_zero()),0);
ok ($C->_is_even($C->_one()),0); ok ($C->_is_even($C->_zero()),1);

# _digit
$x = $C->_new(\"123456789");
ok ($C->_digit($x,0),9);
ok ($C->_digit($x,1),8);
ok ($C->_digit($x,2),7);
ok ($C->_digit($x,-1),1);
ok ($C->_digit($x,-2),2);
ok ($C->_digit($x,-3),3);

# _copy
$x = $C->_new(\"12356");
ok (${$C->_str($C->_copy($x))},12356);

# _zeros
$x = $C->_new(\"1256000000"); ok ($C->_zeros($x),6);
$x = $C->_new(\"152"); ok ($C->_zeros($x),0);
$x = $C->_new(\"123000"); ok ($C->_zeros($x),3); 

# _lsft, _rsft
$x = $C->_new(\"10"); $y = $C->_new(\"3"); 
ok (${$C->_str($C->_lsft($x,$y,10))},10000);
$x = $C->_new(\"20"); $y = $C->_new(\"3"); 
ok (${$C->_str($C->_lsft($x,$y,10))},20000);

$x = $C->_new(\"128"); $y = $C->_new(\"4");
ok (${$C->_str($C->_lsft($x,$y,2))}, 128 << 4);

$x = $C->_new(\"1000"); $y = $C->_new(\"3"); 
ok (${$C->_str($C->_rsft($x,$y,10))},1);
$x = $C->_new(\"20000"); $y = $C->_new(\"3"); 
ok (${$C->_str($C->_rsft($x,$y,10))},20);
$x = $C->_new(\"256"); $y = $C->_new(\"4");
ok (${$C->_str($C->_rsft($x,$y,2))},256 >> 4);

# _acmp
$x = $C->_new(\"123456789");
$y = $C->_new(\"987654321");
ok ($C->_acmp($x,$y),-1);
ok ($C->_acmp($y,$x),1);
ok ($C->_acmp($x,$x),0);
ok ($C->_acmp($y,$y),0);

# _div
$x = $C->_new(\"3333"); $y = $C->_new(\"1111");
ok (${$C->_str(scalar $C->_div($x,$y))},3);
$x = $C->_new(\"33333"); $y = $C->_new(\"1111"); ($x,$y) = $C->_div($x,$y);
ok (${$C->_str($x)},30); ok (${$C->_str($y)},3);
$x = $C->_new(\"123"); $y = $C->_new(\"1111"); 
($x,$y) = $C->_div($x,$y); ok (${$C->_str($x)},0); ok (${$C->_str($y)},123);

# _num
$x = $C->_new(\"12345"); $x = $C->_num($x); ok (ref($x)||'',''); ok ($x,12345);

# _sqrt
$x = $C->_new(\"144"); ok (${$C->_str($C->_sqrt($x))},'12');

# _fac
$x = $C->_new(\"0"); ok (${$C->_str($C->_fac($x))},'1');
$x = $C->_new(\"1"); ok (${$C->_str($C->_fac($x))},'1');
$x = $C->_new(\"2"); ok (${$C->_str($C->_fac($x))},'2');
$x = $C->_new(\"3"); ok (${$C->_str($C->_fac($x))},'6');
$x = $C->_new(\"4"); ok (${$C->_str($C->_fac($x))},'24');
$x = $C->_new(\"5"); ok (${$C->_str($C->_fac($x))},'120');
$x = $C->_new(\"10"); ok (${$C->_str($C->_fac($x))},'3628800');
$x = $C->_new(\"11"); ok (${$C->_str($C->_fac($x))},'39916800');

# _inc
$x = $C->_new(\"1000"); $C->_inc($x); ok (${$C->_str($x)},'1001');
$C->_dec($x); ok (${$C->_str($x)},'1000');

my $BL = Math::BigInt::Calc::_base_len();
$x = '1' . '0' x $BL;
$z = '1' . '0' x ($BL-1); $z .= '1';
$x = $C->_new(\$x); $C->_inc($x); ok (${$C->_str($x)},$z);

$x = '1' . '0' x $BL; $z = '9' x $BL;
$x = $C->_new(\$x); $C->_dec($x); ok (${$C->_str($x)},$z);

# should not happen:
# $x = $C->_new(\"-2"); $y = $C->_new(\"4"); ok ($C->_acmp($x,$y),-1);

# _mod
$x = $C->_new(\"1000"); $y = $C->_new(\"3");
ok (${$C->_str(scalar $C->_mod($x,$y))},1);
$x = $C->_new(\"1000"); $y = $C->_new(\"2");
ok (${$C->_str(scalar $C->_mod($x,$y))},0);

# _and, _or, _xor
$x = $C->_new(\"5"); $y = $C->_new(\"2");
ok (${$C->_str(scalar $C->_xor($x,$y))},7);
$x = $C->_new(\"5"); $y = $C->_new(\"2");
ok (${$C->_str(scalar $C->_or($x,$y))},7);
$x = $C->_new(\"5"); $y = $C->_new(\"3");
ok (${$C->_str(scalar $C->_and($x,$y))},1);

# _from_hex, _from_bin
ok (${$C->_str(scalar $C->_from_hex(\"0xFf"))},255);
ok (${$C->_str(scalar $C->_from_bin(\"0b10101011"))},160+11);

# _as_hex, _as_bin
ok (${$C->_str(scalar $C->_from_hex( $C->_as_hex( $C->_new(\"128"))))}, 128);
ok (${$C->_str(scalar $C->_from_bin( $C->_as_bin( $C->_new(\"128"))))}, 128);

# _check
$x = $C->_new(\"123456789");
ok ($C->_check($x),0);
ok ($C->_check(123),'123 is not a reference');

###############################################################################
# _to_large and _to_small (last since they toy with BASE_LEN etc)

exit if $Math::BigInt::Calc::VERSION < 0.19;

$C->_base_len(5,7); $x = [ qw/67890 12345 67890 12345/ ]; $C->_to_large($x);
ok (@@$x,3);
ok ($x->[0], '4567890'); ok ($x->[1], '7890123'); ok ($x->[2], '123456');

$C->_base_len(5,7); $x = [ qw/54321 54321 54321 54321/ ]; $C->_to_large($x);
ok (@@$x,3);
ok ($x->[0], '2154321'); ok ($x->[1], '4321543'); ok ($x->[2], '543215');

$C->_base_len(6,7); $x = [ qw/654321 654321 654321 654321/ ];
$C->_to_large($x); ok (@@$x,4);
ok ($x->[0], '1654321'); ok ($x->[1], '2165432');
ok ($x->[2], '3216543'); ok ($x->[3], '654');

$C->_base_len(5,7); $C->_to_small($x); ok (@@$x,5);
ok ($x->[0], '54321'); ok ($x->[1], '43216');
ok ($x->[2], '32165'); ok ($x->[3], '21654');
ok ($x->[4], '6543');

$C->_base_len(7,10); $x = [ qw/0000000 0000000 9999990 9999999/ ];
$C->_to_large($x); ok (@@$x,3);
ok ($x->[0], '0000000000'); ok ($x->[1], '9999900000');
ok ($x->[2], '99999999');

$C->_base_len(7,10); $x = [ qw/0000000 0000000 9999990 9999999 99/ ];
$C->_to_large($x); ok (@@$x,3);
ok ($x->[0], '0000000000'); ok ($x->[1], '9999900000');
ok ($x->[2], '9999999999');

# done

1;

@


1.1
log
@Initial revision
@
text
@@


1.1.1.1
log
@stock perl 5.8.0 from CPAN
@
text
@@


1.1.1.2
log
@perl 5.8.2 from CPAN
@
text
@d10 1
a10 1
  unshift @@INC, '../lib';		# for running manually
d17 3
a19 1
  plan tests => 258;
d22 2
a23 1
# testing of Math::BigInt::Calc
d25 1
a25 1
my $C = 'Math::BigInt::Calc';		# pass classname to sub's
d64 2
a65 2
ok ($C->_is_zero($x)||0,0);
ok ($C->_is_one($x)||0,0);
d67 2
a68 13
ok (${$C->_str($C->_zero())},"0");
ok (${$C->_str($C->_one())},"1");

# _two() (only used internally)
ok (${$C->_str($C->_two())},"2");

ok ($C->_is_one($C->_one()),1);

ok ($C->_is_one($C->_zero()) || 0,0);

ok ($C->_is_zero($C->_zero()),1);

ok ($C->_is_zero($C->_one()) || 0,0);
d71 2
a72 30
ok ($C->_is_odd($C->_one()),1); ok ($C->_is_odd($C->_zero())||0,0);
ok ($C->_is_even($C->_one()) || 0,0); ok ($C->_is_even($C->_zero()),1);

# _len
$x = $C->_new(\"1"); ok ($C->_len($x),1);
$x = $C->_new(\"12"); ok ($C->_len($x),2);
$x = $C->_new(\"123"); ok ($C->_len($x),3);
$x = $C->_new(\"1234"); ok ($C->_len($x),4);
$x = $C->_new(\"12345"); ok ($C->_len($x),5);
$x = $C->_new(\"123456"); ok ($C->_len($x),6);
$x = $C->_new(\"1234567"); ok ($C->_len($x),7);
$x = $C->_new(\"12345678"); ok ($C->_len($x),8);
$x = $C->_new(\"123456789"); ok ($C->_len($x),9);

$x = $C->_new(\"8"); ok ($C->_len($x),1);
$x = $C->_new(\"21"); ok ($C->_len($x),2);
$x = $C->_new(\"321"); ok ($C->_len($x),3);
$x = $C->_new(\"4321"); ok ($C->_len($x),4);
$x = $C->_new(\"54321"); ok ($C->_len($x),5);
$x = $C->_new(\"654321"); ok ($C->_len($x),6);
$x = $C->_new(\"7654321"); ok ($C->_len($x),7);
$x = $C->_new(\"87654321"); ok ($C->_len($x),8);
$x = $C->_new(\"987654321"); ok ($C->_len($x),9);

for (my $i = 1; $i < 9; $i++)
  {
  my $a = "$i" . '0' x ($i-1);
  $x = $C->_new(\$a); 
  print "# Tried len '$a'\n" unless ok ($C->_len($x),$i);
  }
d84 2
a85 6
foreach (qw/ 1 12 123 1234 12345 123456 1234567 12345678 123456789/)
  {
  $x = $C->_new(\"$_");
  ok (${$C->_str($C->_copy($x))},"$_");
  ok (${$C->_str($x)},"$_");		# did _copy destroy original x?
  }
a107 4
$x = $C->_new(\"6411906467305339182857313397200584952398");
$y = $C->_new(\"45");
ok (${$C->_str($C->_rsft($x,$y,10))},0);

a115 21
$x = $C->_new(\"1234567890123456789");
$y = $C->_new(\"987654321012345678");
ok ($C->_acmp($x,$y),1);
ok ($C->_acmp($y,$x),-1);
ok ($C->_acmp($x,$x),0);
ok ($C->_acmp($y,$y),0);

$x = $C->_new(\"1234");
$y = $C->_new(\"987654321012345678");
ok ($C->_acmp($x,$y),-1);
ok ($C->_acmp($y,$x),1);
ok ($C->_acmp($x,$x),0);
ok ($C->_acmp($y,$y),0);

# _modinv
$x = $C->_new(\"8");
$y = $C->_new(\"5033");
my ($xmod,$sign) = $C->_modinv($x,$y);
ok (${$C->_str($xmod)},'629');		# -629 % 5033 == 4404
ok ($sign, '-');

d125 1
a125 6
foreach (qw/1 12 123 1234 12345 1234567 12345678 123456789 1234567890/)
  {
  $x = $C->_new(\"$_"); 
  ok (ref($x)||'','ARRAY'); ok (${$C->_str($x)},"$_");
  $x = $C->_num($x); ok (ref($x)||'',''); ok ($x,$_);
  }
a128 7
$x = $C->_new(\"144000000000000"); ok (${$C->_str($C->_sqrt($x))},'12000000');

# _root
$x = $C->_new(\"81"); my $n = $C->_new(\"3"); 	# 4*4*4 = 64, 5*5*5 = 125
ok (${$C->_str($C->_root($x,$n))},'4');	# 4.xx => 4.0
$x = $C->_new(\"81"); $n = $C->_new(\"4"); 	# 3*3*3*3 == 81
ok (${$C->_str($C->_root($x,$n))},'3');
a138 25
$x = $C->_new(\"12"); ok (${$C->_str($C->_fac($x))},'479001600');

##############################################################################
# _inc and _dec
foreach (qw/1 11 121 1231 12341 1234561 12345671 123456781 1234567891/)
  {
  $x = $C->_new(\"$_"); $C->_inc($x);
  print "# \$x = ",${$C->_str($x)},"\n"
   unless ok (${$C->_str($x)},substr($_,0,length($_)-1) . '2');
  $C->_dec($x); ok (${$C->_str($x)},$_);
  }
foreach (qw/19 119 1219 12319 1234519 12345619 123456719 1234567819/)
  {
  $x = $C->_new(\"$_"); $C->_inc($x);
  print "# \$x = ",${$C->_str($x)},"\n"
   unless ok (${$C->_str($x)},substr($_,0,length($_)-2) . '20');
  $C->_dec($x); ok (${$C->_str($x)},$_);
  }
foreach (qw/999 9999 99999 9999999 99999999 999999999 9999999999 99999999999/)
  {
  $x = $C->_new(\"$_"); $C->_inc($x);
  print "# \$x = ",${$C->_str($x)},"\n"
   unless ok (${$C->_str($x)}, '1' . '0' x (length($_)));
  $C->_dec($x); ok (${$C->_str($x)},$_);
  }
d140 1
d144 1
a144 6
my $BL;
{
  no strict 'refs';
  $BL = &{"$C"."::_base_len"}();
}

a154 1
###############################################################################
a175 6
ok (${$C->_str(scalar $C->_from_hex( $C->_as_hex( $C->_new(\"0"))))}, 0);
ok (${$C->_str(scalar $C->_from_bin( $C->_as_bin( $C->_new(\"0"))))}, 0);
ok ( ${$C->_as_hex( $C->_new(\"0"))}, '0x0');
ok ( ${$C->_as_bin( $C->_new(\"0"))}, '0b0');
ok ( ${$C->_as_hex( $C->_new(\"12"))}, '0xc');
ok ( ${$C->_as_bin( $C->_new(\"12"))}, '0b1100');
d183 3
a185 1
# __strip_zeros
d187 27
a213 27
{
  no strict 'refs';
  # correct empty arrays
  $x = &{$C."::__strip_zeros"}([]); ok (@@$x,1); ok ($x->[0],0);
  # don't strip single elements
  $x = &{$C."::__strip_zeros"}([0]); ok (@@$x,1); ok ($x->[0],0);
  $x = &{$C."::__strip_zeros"}([1]); ok (@@$x,1); ok ($x->[0],1);
  # don't strip non-zero elements
  $x = &{$C."::__strip_zeros"}([0,1]);
  ok (@@$x,2); ok ($x->[0],0); ok ($x->[1],1);
  $x = &{$C."::__strip_zeros"}([0,1,2]);
  ok (@@$x,3); ok ($x->[0],0); ok ($x->[1],1); ok ($x->[2],2);

  # but strip leading zeros
  $x = &{$C."::__strip_zeros"}([0,1,2,0]);
  ok (@@$x,3); ok ($x->[0],0); ok ($x->[1],1); ok ($x->[2],2);

  $x = &{$C."::__strip_zeros"}([0,1,2,0,0]);
  ok (@@$x,3); ok ($x->[0],0); ok ($x->[1],1); ok ($x->[2],2);

  $x = &{$C."::__strip_zeros"}([0,1,2,0,0,0]);
  ok (@@$x,3); ok ($x->[0],0); ok ($x->[1],1); ok ($x->[2],2);

  # collapse multiple zeros
  $x = &{$C."::__strip_zeros"}([0,0,0,0]);
  ok (@@$x,1); ok ($x->[0],0);
}
@


1.1.1.3
log
@perl 5.8.3 from CPAN
@
text
@d17 1
a17 1
  plan tests => 300;
a19 9
my ($BASE_LEN, $AND_BITS, $XOR_BITS, $OR_BITS, $BASE_LEN_SMALL, $MAX_VAL) =
  Math::BigInt::Calc->_base_len();

print "# BASE_LEN = $BASE_LEN\n";
print "# MAX_VAL = $MAX_VAL\n";
print "# AND_BITS = $AND_BITS\n";
print "# XOR_BITS = $XOR_BITS\n";
print "# IOR_BITS = $OR_BITS\n";

a158 10
$x = $C->_new(\"12");
$y = $C->_new(\"12");
ok ($C->_acmp($x,$y),0);
$x = $C->_new(\"21");
ok ($C->_acmp($x,$y),1);
ok ($C->_acmp($y,$x),-1);
$x = $C->_new(\"123456789");
$y = $C->_new(\"1987654321");
ok ($C->_acmp($x,$y),-1);
ok ($C->_acmp($y,$x),+1);
a206 58
# _pow (and _root)
$x = $C->_new(\"0"); $n = $C->_new(\"3"); 	# 0 ** y => 0
ok (${$C->_str($C->_pow($x,$n))}, 0);
$x = $C->_new(\"3"); $n = $C->_new(\"0"); 	# x ** 0 => 1
ok (${$C->_str($C->_pow($x,$n))}, 1);
$x = $C->_new(\"1"); $n = $C->_new(\"3"); 	# 1 ** y => 1
ok (${$C->_str($C->_pow($x,$n))}, 1);
$x = $C->_new(\"5"); $n = $C->_new(\"1"); 	# x ** 1 => x
ok (${$C->_str($C->_pow($x,$n))}, 5);

$x = $C->_new(\"81"); $n = $C->_new(\"3"); 	# 81 ** 3 == 531441 
ok (${$C->_str($C->_pow($x,$n))},81 ** 3);

ok (${$C->_str($C->_root($x,$n))},81);

$x = $C->_new(\"81");
ok (${$C->_str($C->_pow($x,$n))},81 ** 3);
ok (${$C->_str($C->_pow($x,$n))},'150094635296999121'); # 531441 ** 3 ==

ok (${$C->_str($C->_root($x,$n))},'531441');
ok (${$C->_str($C->_root($x,$n))},'81');

$x = $C->_new(\"81"); $n = $C->_new(\"14"); 	
ok (${$C->_str($C->_pow($x,$n))},'523347633027360537213511521');
ok (${$C->_str($C->_root($x,$n))},'81');

$x = $C->_new(\"523347633027360537213511520");
ok (${$C->_str($C->_root($x,$n))},'80');

$x = $C->_new(\"523347633027360537213511522");
ok (${$C->_str($C->_root($x,$n))},'81');

my $res = [ qw/ 9 31 99 316 999 3162 9999/ ];

# 99 ** 2 = 9801, 999 ** 2 = 998001 etc
for my $i (2 .. 9)
  {
  $x = '9' x $i; $x = $C->_new(\$x);
  $n = $C->_new(\"2");
  my $rc = '9' x ($i-1). '8' . '0' x ($i-1) . '1';
  print "# _pow( ", '9' x $i, ", 2) \n" unless
   ok (${$C->_str($C->_pow($x,$n))},$rc);
 
  if ($i <= 7)
    {
    $x = '9' x $i; $x = $C->_new(\$x);
    $n = '9' x $i; $n = $C->_new(\$n);
    print "# _root( ", '9' x $i, ", ", 9 x $i, ") \n" unless
     ok (${$C->_str($C->_root($x,$n))},'1');

    $x = '9' x $i; $x = $C->_new(\$x);
    $n = $C->_new(\"2");
    print "# _root( ", '9' x $i, ", ", 9 x $i, ") \n" unless
     ok (${$C->_str($C->_root($x,$n))}, $res->[$i-2]);
    }
  }

##############################################################################
a216 5
$x = $C->_new(\"13"); ok (${$C->_str($C->_fac($x))},'6227020800');

# test that _fac modifes $x in place for small arguments
$x = $C->_new(\"3"); $C->_fac($x); ok (${$C->_str($x)},'6');
$x = $C->_new(\"13"); $C->_fac($x); ok (${$C->_str($x)},'6227020800');
@


1.1.1.4
log
@Import of stock perl 5.8.5
@
text
@a10 1
  plan tests => 308;
d15 5
d34 2
a35 2
my $x = $C->_new("123"); my $y = $C->_new("321");
ok (ref($x),'ARRAY'); ok ($C->_str($x),123); ok ($C->_str($y),321);
d39 4
a42 4
ok ($C->_str($C->_add($x,$y)),444);
ok ($C->_str($C->_sub($x,$y)),123);
ok ($C->_str($C->_mul($x,$y)),39483);
ok ($C->_str($C->_div($x,$y)),123);
d47 2
a48 2
ok ($C->_str($C->_mul($x,$y)),39483);
ok ($C->_str($x),39483); ok ($C->_str($y),321);
d50 2
a51 2
ok ($C->_str($C->_div($x,$y)),123);
ok ($C->_str($x),123); ok ($C->_str($y),321);
d53 1
a53 1
$x = $C->_new("39483");
d58 1
a58 1
ok ($C->_str($r1),'0');
d60 1
a60 1
$x = $C->_new("39483");	# reset
d63 2
a64 2
my $z = $C->_new("2");
ok ($C->_str($C->_add($x,$z)),39485);
d67 1
a67 1
ok ($C->_str($re),123); ok ($C->_str($rr),2);
d73 2
a74 2
ok ($C->_str($C->_zero()),"0");
ok ($C->_str($C->_one()),"1");
d76 2
a77 7
# _two() and _ten()
ok ($C->_str($C->_two()),"2");
ok ($C->_str($C->_ten()),"10");
ok ($C->_is_ten($C->_two()),0);
ok ($C->_is_two($C->_two()),1);
ok ($C->_is_ten($C->_ten()),1);
ok ($C->_is_two($C->_ten()),0);
a79 2
ok ($C->_is_one($C->_two()),0);
ok ($C->_is_one($C->_ten()),0);
d92 19
a110 19
$x = $C->_new("1"); ok ($C->_len($x),1);
$x = $C->_new("12"); ok ($C->_len($x),2);
$x = $C->_new("123"); ok ($C->_len($x),3);
$x = $C->_new("1234"); ok ($C->_len($x),4);
$x = $C->_new("12345"); ok ($C->_len($x),5);
$x = $C->_new("123456"); ok ($C->_len($x),6);
$x = $C->_new("1234567"); ok ($C->_len($x),7);
$x = $C->_new("12345678"); ok ($C->_len($x),8);
$x = $C->_new("123456789"); ok ($C->_len($x),9);

$x = $C->_new("8"); ok ($C->_len($x),1);
$x = $C->_new("21"); ok ($C->_len($x),2);
$x = $C->_new("321"); ok ($C->_len($x),3);
$x = $C->_new("4321"); ok ($C->_len($x),4);
$x = $C->_new("54321"); ok ($C->_len($x),5);
$x = $C->_new("654321"); ok ($C->_len($x),6);
$x = $C->_new("7654321"); ok ($C->_len($x),7);
$x = $C->_new("87654321"); ok ($C->_len($x),8);
$x = $C->_new("987654321"); ok ($C->_len($x),9);
d115 1
a115 1
  $x = $C->_new($a); 
d120 1
a120 1
$x = $C->_new("123456789");
d131 3
a133 3
  $x = $C->_new("$_");
  ok ($C->_str($C->_copy($x)),"$_");
  ok ($C->_str($x),"$_");		# did _copy destroy original x?
d137 3
a139 4
$x = $C->_new("1256000000"); ok ($C->_zeros($x),6);
$x = $C->_new("152"); ok ($C->_zeros($x),0);
$x = $C->_new("123000"); ok ($C->_zeros($x),3); 
$x = $C->_new("0"); ok ($C->_zeros($x),0); 
d142 18
a159 18
$x = $C->_new("10"); $y = $C->_new("3"); 
ok ($C->_str($C->_lsft($x,$y,10)),10000);
$x = $C->_new("20"); $y = $C->_new("3"); 
ok ($C->_str($C->_lsft($x,$y,10)),20000);

$x = $C->_new("128"); $y = $C->_new("4");
ok ($C->_str($C->_lsft($x,$y,2)), 128 << 4);

$x = $C->_new("1000"); $y = $C->_new("3"); 
ok ($C->_str($C->_rsft($x,$y,10)),1);
$x = $C->_new("20000"); $y = $C->_new("3"); 
ok ($C->_str($C->_rsft($x,$y,10)),20);
$x = $C->_new("256"); $y = $C->_new("4");
ok ($C->_str($C->_rsft($x,$y,2)),256 >> 4);

$x = $C->_new("6411906467305339182857313397200584952398");
$y = $C->_new("45");
ok ($C->_str($C->_rsft($x,$y,10)),0);
d162 2
a163 2
$x = $C->_new("123456789");
$y = $C->_new("987654321");
d168 2
a169 2
$x = $C->_new("12");
$y = $C->_new("12");
d171 1
a171 1
$x = $C->_new("21");
d174 2
a175 2
$x = $C->_new("123456789");
$y = $C->_new("1987654321");
d179 2
a180 2
$x = $C->_new("1234567890123456789");
$y = $C->_new("987654321012345678");
d186 2
a187 2
$x = $C->_new("1234");
$y = $C->_new("987654321012345678");
d194 2
a195 2
$x = $C->_new("8");
$y = $C->_new("5033");
d197 1
a197 1
ok ($C->_str($xmod),'629');		# -629 % 5033 == 4404
d201 6
a206 6
$x = $C->_new("3333"); $y = $C->_new("1111");
ok ($C->_str(scalar $C->_div($x,$y)),3);
$x = $C->_new("33333"); $y = $C->_new("1111"); ($x,$y) = $C->_div($x,$y);
ok ($C->_str($x),30); ok ($C->_str($y),3);
$x = $C->_new("123"); $y = $C->_new("1111"); 
($x,$y) = $C->_div($x,$y); ok ($C->_str($x),0); ok ($C->_str($y),123);
d211 2
a212 2
  $x = $C->_new("$_"); 
  ok (ref($x)||'','ARRAY'); ok ($C->_str($x),"$_");
d217 2
a218 2
$x = $C->_new("144"); ok ($C->_str($C->_sqrt($x)),'12');
$x = $C->_new("144000000000000"); ok ($C->_str($C->_sqrt($x)),'12000000');
d221 4
a224 4
$x = $C->_new("81"); my $n = $C->_new("3"); 	# 4*4*4 = 64, 5*5*5 = 125
ok ($C->_str($C->_root($x,$n)),'4');	# 4.xx => 4.0
$x = $C->_new("81"); $n = $C->_new("4"); 	# 3*3*3*3 == 81
ok ($C->_str($C->_root($x,$n)),'3');
d227 24
a250 24
$x = $C->_new("0"); $n = $C->_new("3"); 	# 0 ** y => 0
ok ($C->_str($C->_pow($x,$n)), 0);
$x = $C->_new("3"); $n = $C->_new("0"); 	# x ** 0 => 1
ok ($C->_str($C->_pow($x,$n)), 1);
$x = $C->_new("1"); $n = $C->_new("3"); 	# 1 ** y => 1
ok ($C->_str($C->_pow($x,$n)), 1);
$x = $C->_new("5"); $n = $C->_new("1"); 	# x ** 1 => x
ok ($C->_str($C->_pow($x,$n)), 5);

$x = $C->_new("81"); $n = $C->_new("3"); 	# 81 ** 3 == 531441 
ok ($C->_str($C->_pow($x,$n)),81 ** 3);

ok ($C->_str($C->_root($x,$n)),81);

$x = $C->_new("81");
ok ($C->_str($C->_pow($x,$n)),81 ** 3);
ok ($C->_str($C->_pow($x,$n)),'150094635296999121'); # 531441 ** 3 ==

ok ($C->_str($C->_root($x,$n)),'531441');
ok ($C->_str($C->_root($x,$n)),'81');

$x = $C->_new("81"); $n = $C->_new("14"); 	
ok ($C->_str($C->_pow($x,$n)),'523347633027360537213511521');
ok ($C->_str($C->_root($x,$n)),'81');
d252 2
a253 2
$x = $C->_new("523347633027360537213511520");
ok ($C->_str($C->_root($x,$n)),'80');
d255 2
a256 2
$x = $C->_new("523347633027360537213511522");
ok ($C->_str($C->_root($x,$n)),'81');
d263 2
a264 2
  $x = '9' x $i; $x = $C->_new($x);
  $n = $C->_new("2");
d267 1
a267 1
   ok ($C->_str($C->_pow($x,$n)),$rc);
d271 2
a272 2
    $x = '9' x $i; $x = $C->_new($x);
    $n = '9' x $i; $n = $C->_new($n);
d274 1
a274 1
     ok ($C->_str($C->_root($x,$n)),'1');
d276 2
a277 2
    $x = '9' x $i; $x = $C->_new($x);
    $n = $C->_new("2");
d279 1
a279 1
     ok ($C->_str($C->_root($x,$n)), $res->[$i-2]);
d285 10
a294 10
$x = $C->_new("0"); ok ($C->_str($C->_fac($x)),'1');
$x = $C->_new("1"); ok ($C->_str($C->_fac($x)),'1');
$x = $C->_new("2"); ok ($C->_str($C->_fac($x)),'2');
$x = $C->_new("3"); ok ($C->_str($C->_fac($x)),'6');
$x = $C->_new("4"); ok ($C->_str($C->_fac($x)),'24');
$x = $C->_new("5"); ok ($C->_str($C->_fac($x)),'120');
$x = $C->_new("10"); ok ($C->_str($C->_fac($x)),'3628800');
$x = $C->_new("11"); ok ($C->_str($C->_fac($x)),'39916800');
$x = $C->_new("12"); ok ($C->_str($C->_fac($x)),'479001600');
$x = $C->_new("13"); ok ($C->_str($C->_fac($x)),'6227020800');
d297 2
a298 2
$x = $C->_new("3"); $C->_fac($x); ok ($C->_str($x),'6');
$x = $C->_new("13"); $C->_fac($x); ok ($C->_str($x),'6227020800');
d304 4
a307 4
  $x = $C->_new("$_"); $C->_inc($x);
  print "# \$x = ",$C->_str($x),"\n"
   unless ok ($C->_str($x),substr($_,0,length($_)-1) . '2');
  $C->_dec($x); ok ($C->_str($x),$_);
d311 4
a314 4
  $x = $C->_new("$_"); $C->_inc($x);
  print "# \$x = ",$C->_str($x),"\n"
   unless ok ($C->_str($x),substr($_,0,length($_)-2) . '20');
  $C->_dec($x); ok ($C->_str($x),$_);
d318 4
a321 4
  $x = $C->_new("$_"); $C->_inc($x);
  print "# \$x = ",$C->_str($x),"\n"
   unless ok ($C->_str($x), '1' . '0' x (length($_)));
  $C->_dec($x); ok ($C->_str($x),$_);
d324 2
a325 2
$x = $C->_new("1000"); $C->_inc($x); ok ($C->_str($x),'1001');
$C->_dec($x); ok ($C->_str($x),'1000');
d335 1
a335 1
$x = $C->_new($x); $C->_inc($x); ok ($C->_str($x),$z);
d338 1
a338 1
$x = $C->_new($x); $C->_dec($x); ok ($C->_str($x),$z);
d341 1
a341 1
# $x = $C->_new("-2"); $y = $C->_new("4"); ok ($C->_acmp($x,$y),-1);
d345 4
a348 4
$x = $C->_new("1000"); $y = $C->_new("3");
ok ($C->_str(scalar $C->_mod($x,$y)),1);
$x = $C->_new("1000"); $y = $C->_new("2");
ok ($C->_str(scalar $C->_mod($x,$y)),0);
d351 6
a356 6
$x = $C->_new("5"); $y = $C->_new("2");
ok ($C->_str(scalar $C->_xor($x,$y)),7);
$x = $C->_new("5"); $y = $C->_new("2");
ok ($C->_str(scalar $C->_or($x,$y)),7);
$x = $C->_new("5"); $y = $C->_new("3");
ok ($C->_str(scalar $C->_and($x,$y)),1);
d359 2
a360 2
ok ($C->_str( $C->_from_hex("0xFf")),255);
ok ($C->_str( $C->_from_bin("0b10101011")),160+11);
d363 8
a370 8
ok ($C->_str( $C->_from_hex( $C->_as_hex( $C->_new("128")))), 128);
ok ($C->_str( $C->_from_bin( $C->_as_bin( $C->_new("128")))), 128);
ok ($C->_str( $C->_from_hex( $C->_as_hex( $C->_new("0")))), 0);
ok ($C->_str( $C->_from_bin( $C->_as_bin( $C->_new("0")))), 0);
ok ($C->_as_hex( $C->_new("0")), '0x0');
ok ($C->_as_bin( $C->_new("0")), '0b0');
ok ($C->_as_hex( $C->_new("12")), '0xc');
ok ($C->_as_bin( $C->_new("12")), '0b1100');
d373 1
a373 1
$x = $C->_new("123456789");
@


1.1.1.5
log
@import perl 5.10.0 from CPAN
@
text
@d11 1
a11 6
  if ($^O eq 'unicos')			# the tests hang under "unicos"
    {
    print "1..0\n";
    exit(0);
    }
  plan tests => 375;
d95 21
a115 1
for my $method (qw/_alen _len/)
d117 3
a119 36
  $x = $C->_new("1"); ok ($C->$method($x),1);
  $x = $C->_new("12"); ok ($C->$method($x),2);
  $x = $C->_new("123"); ok ($C->$method($x),3);
  $x = $C->_new("1234"); ok ($C->$method($x),4);
  $x = $C->_new("12345"); ok ($C->$method($x),5);
  $x = $C->_new("123456"); ok ($C->$method($x),6);
  $x = $C->_new("1234567"); ok ($C->$method($x),7);
  $x = $C->_new("12345678"); ok ($C->$method($x),8);
  $x = $C->_new("123456789"); ok ($C->$method($x),9);

  $x = $C->_new("8"); ok ($C->$method($x),1);
  $x = $C->_new("21"); ok ($C->$method($x),2);
  $x = $C->_new("321"); ok ($C->$method($x),3);
  $x = $C->_new("4321"); ok ($C->$method($x),4);
  $x = $C->_new("54321"); ok ($C->$method($x),5);
  $x = $C->_new("654321"); ok ($C->$method($x),6);
  $x = $C->_new("7654321"); ok ($C->$method($x),7);
  $x = $C->_new("87654321"); ok ($C->$method($x),8);
  $x = $C->_new("987654321"); ok ($C->$method($x),9);

  $x = $C->_new("0"); ok ($C->$method($x),1);
  $x = $C->_new("20"); ok ($C->$method($x),2);
  $x = $C->_new("320"); ok ($C->$method($x),3);
  $x = $C->_new("4320"); ok ($C->$method($x),4);
  $x = $C->_new("54320"); ok ($C->$method($x),5);
  $x = $C->_new("654320"); ok ($C->$method($x),6);
  $x = $C->_new("7654320"); ok ($C->$method($x),7);
  $x = $C->_new("87654320"); ok ($C->$method($x),8);
  $x = $C->_new("987654320"); ok ($C->$method($x),9);

  for (my $i = 1; $i < 9; $i++)
    {
    my $a = "$i" . '0' x ($i-1);
    $x = $C->_new($a); 
    print "# Tried len '$a'\n" unless ok ($C->_len($x),$i);
    }
d262 1
a262 1
my $res = [ qw/9 31 99 316 999 3162 9999 31622 99999/ ];
d273 1
a273 2
  # if $i > $BASE_LEN, the test takes a really long time:
  if ($i <= $BASE_LEN)
a276 1
    print "# _root( ", '9' x $i, ", ", 9 x $i, ") \n";
d282 1
a282 1
    print "# BASE_LEN $BASE_LEN _root( ", '9' x $i, ", ", 9 x $i, ") \n" unless
a284 5
  else
    {
    ok ("skipped $i", "skipped $i");
    ok ("skipped $i", "skipped $i");
    } 
d362 1
a362 1
# _from_hex, _from_bin, _from_oct
a364 4
ok ($C->_str( $C->_from_oct("0100")), 8*8);
ok ($C->_str( $C->_from_oct("01000")), 8*8*8);
ok ($C->_str( $C->_from_oct("010001")), 8*8*8*8+1);
ok ($C->_str( $C->_from_oct("010007")), 8*8*8*8+7);
d366 1
a366 1
# _as_hex, _as_bin, as_oct
a368 10
ok ($C->_str( $C->_from_oct( $C->_as_oct( $C->_new("128")))), 128);

ok ($C->_str( $C->_from_oct( $C->_as_oct( $C->_new("123456")))), 123456);
ok ($C->_str( $C->_from_oct( $C->_as_oct( $C->_new("123456789")))), "123456789");
ok ($C->_str( $C->_from_oct( $C->_as_oct( $C->_new("1234567890123")))), "1234567890123");

my $long = '123456789012345678901234567890';
ok ($C->_str( $C->_from_hex( $C->_as_hex( $C->_new($long)))), $long);
ok ($C->_str( $C->_from_bin( $C->_as_bin( $C->_new($long)))), $long);
ok ($C->_str( $C->_from_oct( $C->_as_oct( $C->_new($long)))), $long);
a370 1
ok ($C->_str( $C->_from_oct( $C->_as_oct( $C->_new("0")))), 0);
a372 1
ok ($C->_as_oct( $C->_new("0")), '00');
a374 8
ok ($C->_as_oct( $C->_new("64")), '0100');

# _1ex
ok ($C->_str($C->_1ex(0)), "1");
ok ($C->_str($C->_1ex(1)), "10");
ok ($C->_str($C->_1ex(2)), "100");
ok ($C->_str($C->_1ex(12)), "1000000000000");
ok ($C->_str($C->_1ex(16)), "10000000000000000");
@


