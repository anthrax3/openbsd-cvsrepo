head	1.2;
access;
symbols
	OPENBSD_4_8:1.1.1.5.0.4
	OPENBSD_4_8_BASE:1.1.1.5
	OPENBSD_4_7:1.1.1.5.0.2
	OPENBSD_4_7_BASE:1.1.1.5
	PERL_5_10_1:1.1.1.5
	OPENBSD_4_6:1.1.1.4.0.6
	OPENBSD_4_6_BASE:1.1.1.4
	OPENBSD_4_5:1.1.1.4.0.2
	OPENBSD_4_5_BASE:1.1.1.4
	PERL_5_10_0:1.1.1.4
	OPENBSD_4_4:1.1.1.3.0.10
	OPENBSD_4_4_BASE:1.1.1.3
	OPENBSD_4_3:1.1.1.3.0.8
	OPENBSD_4_3_BASE:1.1.1.3
	OPENBSD_4_2:1.1.1.3.0.6
	OPENBSD_4_2_BASE:1.1.1.3
	OPENBSD_4_1:1.1.1.3.0.4
	OPENBSD_4_1_BASE:1.1.1.3
	OPENBSD_4_0:1.1.1.3.0.2
	OPENBSD_4_0_BASE:1.1.1.3
	PERL_5_8_8:1.1.1.3
	OPENBSD_3_9:1.1.1.2.0.10
	OPENBSD_3_9_BASE:1.1.1.2
	OPENBSD_3_8:1.1.1.2.0.8
	OPENBSD_3_8_BASE:1.1.1.2
	OPENBSD_3_7:1.1.1.2.0.6
	OPENBSD_3_7_BASE:1.1.1.2
	PERL_5_8_6:1.1.1.2
	OPENBSD_3_6:1.1.1.2.0.4
	OPENBSD_3_6_BASE:1.1.1.2
	PERL_5_8_5:1.1.1.2
	PERL_5_8_3:1.1.1.2
	OPENBSD_3_5:1.1.1.2.0.2
	OPENBSD_3_5_BASE:1.1.1.2
	PERL_5_8_2:1.1.1.2
	OPENBSD_3_4:1.1.1.1.0.4
	OPENBSD_3_4_BASE:1.1.1.1
	OPENBSD_3_3:1.1.1.1.0.2
	OPENBSD_3_3_BASE:1.1.1.1
	PERL_5_8_0:1.1.1.1
	CPAN:1.1.1;
locks; strict;
comment	@# @;
expand	@o@;


1.2
date	2010.09.24.14.59.42;	author millert;	state dead;
branches;
next	1.1;

1.1
date	2002.10.27.22.15.00;	author millert;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	2002.10.27.22.15.00;	author millert;	state Exp;
branches;
next	1.1.1.2;

1.1.1.2
date	2003.12.03.02.44.06;	author millert;	state Exp;
branches;
next	1.1.1.3;

1.1.1.3
date	2006.03.28.18.48.51;	author millert;	state Exp;
branches;
next	1.1.1.4;

1.1.1.4
date	2008.09.29.17.18.38;	author millert;	state Exp;
branches;
next	1.1.1.5;

1.1.1.5
date	2009.10.12.18.10.53;	author millert;	state Exp;
branches;
next	;


desc
@@


1.2
log
@remove files no longer in perl 5.12.2 (or that have moved)
@
text
@#!./perl 

#
# Regression tests for the Math::Trig package
#
# The tests are quite modest as the Math::Complex tests exercise
# these quite vigorously.
# 
# -- Jarkko Hietaniemi, April 1997

BEGIN {
    chdir 't' if -d 't';
    @@INC = '../lib';
}

use Math::Trig;

use strict;

use vars qw($x $y $z);

my $eps = 1e-11;

if ($^O eq 'unicos') { # See lib/Math/Complex.pm and t/lib/complex.t.
    $eps = 1e-10;
}

sub near ($$;$) {
    my $e = defined $_[2] ? $_[2] : $eps;
    $_[1] ? (abs($_[0]/$_[1] - 1) < $e) : abs($_[0]) < $e;
}

print "1..26\n";

$x = 0.9;
print 'not ' unless (near(tan($x), sin($x) / cos($x)));
print "ok 1\n";

print 'not ' unless (near(sinh(2), 3.62686040784702));
print "ok 2\n";

print 'not ' unless (near(acsch(0.1), 2.99822295029797));
print "ok 3\n";

$x = asin(2);
print 'not ' unless (ref $x eq 'Math::Complex');
print "ok 4\n";

# avoid using Math::Complex here
$x =~ /^([^-]+)(-[^i]+)i$/;
($y, $z) = ($1, $2);
print 'not ' unless (near($y,  1.5707963267949) and
		     near($z, -1.31695789692482));
print "ok 5\n";

print 'not ' unless (near(deg2rad(90), pi/2));
print "ok 6\n";

print 'not ' unless (near(rad2deg(pi), 180));
print "ok 7\n";

use Math::Trig ':radial';

{
    my ($r,$t,$z) = cartesian_to_cylindrical(1,1,1);

    print 'not ' unless (near($r, sqrt(2)))     and
	                (near($t, deg2rad(45))) and
			(near($z, 1));
    print "ok 8\n";

    ($x,$y,$z) = cylindrical_to_cartesian($r, $t, $z);

    print 'not ' unless (near($x, 1)) and
	                (near($y, 1)) and
			(near($z, 1));
    print "ok 9\n";

    ($r,$t,$z) = cartesian_to_cylindrical(1,1,0);

    print 'not ' unless (near($r, sqrt(2)))     and
	                (near($t, deg2rad(45))) and
			(near($z, 0));
    print "ok 10\n";

    ($x,$y,$z) = cylindrical_to_cartesian($r, $t, $z);

    print 'not ' unless (near($x, 1)) and
	                (near($y, 1)) and
			(near($z, 0));
    print "ok 11\n";
}

{
    my ($r,$t,$f) = cartesian_to_spherical(1,1,1);

    print 'not ' unless (near($r, sqrt(3)))     and
	                (near($t, deg2rad(45))) and
			(near($f, atan2(sqrt(2), 1)));
    print "ok 12\n";

    ($x,$y,$z) = spherical_to_cartesian($r, $t, $f);

    print 'not ' unless (near($x, 1)) and
	                (near($y, 1)) and
			(near($z, 1));
    print "ok 13\n";

    ($r,$t,$f) = cartesian_to_spherical(1,1,0);

    print 'not ' unless (near($r, sqrt(2)))     and
	                (near($t, deg2rad(45))) and
			(near($f, deg2rad(90)));
    print "ok 14\n";

    ($x,$y,$z) = spherical_to_cartesian($r, $t, $f);

    print 'not ' unless (near($x, 1)) and
	                (near($y, 1)) and
			(near($z, 0));
    print "ok 15\n";
}

{
    my ($r,$t,$z) = cylindrical_to_spherical(spherical_to_cylindrical(1,1,1));

    print 'not ' unless (near($r, 1)) and
	                (near($t, 1)) and
			(near($z, 1));
    print "ok 16\n";

    ($r,$t,$z) = spherical_to_cylindrical(cylindrical_to_spherical(1,1,1));

    print 'not ' unless (near($r, 1)) and
	                (near($t, 1)) and
			(near($z, 1));
    print "ok 17\n";
}

{
    use Math::Trig 'great_circle_distance';

    print 'not '
	unless (near(great_circle_distance(0, 0, 0, pi/2), pi/2));
    print "ok 18\n";

    print 'not '
	unless (near(great_circle_distance(0, 0, pi, pi), pi));
    print "ok 19\n";

    # London to Tokyo.
    my @@L = (deg2rad(-0.5), deg2rad(90 - 51.3));
    my @@T = (deg2rad(139.8),deg2rad(90 - 35.7));

    my $km = great_circle_distance(@@L, @@T, 6378);

    print 'not ' unless (near($km, 9605.26637021388));
    print "ok 20\n";
}

{
    my $R2D = 57.295779513082320876798154814169;

    sub frac { $_[0] - int($_[0]) }

    my $lotta_radians = deg2rad(1E+20, 1);
    print "not " unless near($lotta_radians,  1E+20/$R2D);
    print "ok 21\n";

    my $negat_degrees = rad2deg(-1E20, 1);
    print "not " unless near($negat_degrees, -1E+20*$R2D);
    print "ok 22\n";

    my $posit_degrees = rad2deg(-10000, 1);
    print "not " unless near($posit_degrees, -10000*$R2D);
    print "ok 23\n";
}

{
    use Math::Trig 'great_circle_direction';

    print 'not '
	unless (near(great_circle_direction(0, 0, 0, pi/2), pi));
    print "ok 24\n";

# Retired test: Relies on atan(0, 0), which is not portable.
#    print 'not '
#	unless (near(great_circle_direction(0, 0, pi, pi), -pi()/2));
    print "ok 25\n";

    # London to Tokyo.
    my @@L = (deg2rad(-0.5), deg2rad(90 - 51.3));
    my @@T = (deg2rad(139.8),deg2rad(90 - 35.7));

    my $rad = great_circle_direction(@@L, @@T);

    print 'not ' unless (near($rad, -0.546644569997376));
    print "ok 26\n";
}

# eof
@


1.1
log
@Initial revision
@
text
@@


1.1.1.1
log
@stock perl 5.8.0 from CPAN
@
text
@@


1.1.1.2
log
@perl 5.8.2 from CPAN
@
text
@a29 1
    print "# near? $_[0] $_[1] $e\n";
d33 1
a33 1
print "1..29\n";
d191 3
a193 4
    my @@London  = (deg2rad(  -0.167), deg2rad(90 - 51.3));
    my @@Tokyo   = (deg2rad( 139.5),   deg2rad(90 - 35.7));
    my @@Berlin  = (deg2rad ( 13.417), deg2rad(90 - 52.533));
    my @@Paris   = (deg2rad (  2.333), deg2rad(90 - 48.867));
d195 3
a197 4
    print 'not '
	unless (near(rad2deg(great_circle_direction(@@London, @@Tokyo)),
		     31.791945393073));
    
a198 14
    print 'not '
	unless (near(rad2deg(great_circle_direction(@@Tokyo, @@London)),
		     336.069766430326));
    print "ok 27\n";

    print 'not '
	unless (near(rad2deg(great_circle_direction(@@Berlin, @@Paris)),
		     246.800348034667));
    
    print "ok 28\n";
    print 'not '
	unless (near(rad2deg(great_circle_direction(@@Paris, @@Berlin)),
		     58.2079877553156));
    print "ok 29\n";
@


1.1.1.3
log
@perl 5.8.8 import
@
text
@d6 2
a7 2
# The tests here are quite modest as the Math::Complex tests exercise
# these interfaces quite vigorously.
d12 2
a13 4
    if ($ENV{PERL_CORE}) {
	chdir 't' if -d 't';
	@@INC = '../lib';
    }
d16 1
a16 3
use Math::Trig 1.03;

my $pip2 = pi / 2;
d34 1
a34 1
print "1..49\n";
d187 1
a187 1
# Retired test: Relies on atan2(0, 0), which is not portable.
d200 1
a201 1

a211 1

a215 96

    use Math::Trig 'great_circle_bearing';

    print 'not '
	unless (near(rad2deg(great_circle_bearing(@@Paris, @@Berlin)),
		     58.2079877553156));
    print "ok 30\n";

    use Math::Trig 'great_circle_waypoint';
    use Math::Trig 'great_circle_midpoint';

    my ($lon, $lat);

    ($lon, $lat) = great_circle_waypoint(@@London, @@Tokyo, 0.0);

    print 'not ' unless (near($lon, $London[0]));
    print "ok 31\n";

    print 'not ' unless (near($lat, $pip2 - $London[1]));
    print "ok 32\n";

    ($lon, $lat) = great_circle_waypoint(@@London, @@Tokyo, 1.0);

    print 'not ' unless (near($lon, $Tokyo[0]));
    print "ok 33\n";

    print 'not ' unless (near($lat, $pip2 - $Tokyo[1]));
    print "ok 34\n";

    ($lon, $lat) = great_circle_waypoint(@@London, @@Tokyo, 0.5);

    print 'not ' unless (near($lon, 1.55609593577679)); # 89.1577 E
    print "ok 35\n";

    print 'not ' unless (near($lat, 1.20296099733328)); # 68.9246 N
    print "ok 36\n";

    ($lon, $lat) = great_circle_midpoint(@@London, @@Tokyo);

    print 'not ' unless (near($lon, 1.55609593577679)); # 89.1577 E
    print "ok 37\n";

    print 'not ' unless (near($lat, 1.20296099733328)); # 68.9246 N
    print "ok 38\n";

    ($lon, $lat) = great_circle_waypoint(@@London, @@Tokyo, 0.25);

    print 'not ' unless (near($lon, 0.516073562850837)); # 29.5688 E
    print "ok 39\n";

    print 'not ' unless (near($lat, 1.170565013391510)); # 67.0684 N
    print "ok 40\n";
    ($lon, $lat) = great_circle_waypoint(@@London, @@Tokyo, 0.75);

    print 'not ' unless (near($lon, 2.17494903805952)); # 124.6154 E
    print "ok 41\n";

    print 'not ' unless (near($lat, 0.952987032741305)); # 54.6021 N
    print "ok 42\n";

    use Math::Trig 'great_circle_destination';

    my $dir1 = great_circle_direction(@@London, @@Tokyo);
    my $dst1 = great_circle_distance(@@London,  @@Tokyo);

    ($lon, $lat) = great_circle_destination(@@London, $dir1, $dst1);

    print 'not ' unless (near($lon, $Tokyo[0]));
    print "ok 43\n";

    print 'not ' unless (near($lat, $pip2 - $Tokyo[1]));
    print "ok 44\n";

    my $dir2 = great_circle_direction(@@Tokyo, @@London);
    my $dst2 = great_circle_distance(@@Tokyo,  @@London);

    ($lon, $lat) = great_circle_destination(@@Tokyo, $dir2, $dst2);

    print 'not ' unless (near($lon, $London[0]));
    print "ok 45\n";

    print 'not ' unless (near($lat, $pip2 - $London[1]));
    print "ok 46\n";

    my $dir3 = (great_circle_destination(@@London, $dir1, $dst1))[2];

    print 'not ' unless (near($dir3, 2.69379263839118)); # about 154.343 deg
    print "ok 47\n";

    my $dir4 = (great_circle_destination(@@Tokyo,  $dir2, $dst2))[2];

    print 'not ' unless (near($dir4, 3.6993902625701)); # about 211.959 deg
    print "ok 48\n";

    print 'not ' unless (near($dst1, $dst2));
    print "ok 49\n";
@


1.1.1.4
log
@import perl 5.10.0 from CPAN
@
text
@a17 13
BEGIN {
    eval { require Test::More };
    if ($@@) {
	# We are willing to lose testing in e.g. 5.00504.
	print "1..0 # No Test::More, skipping\n";
	exit(0);
    } else {
	import Test::More;
    }
}

plan(tests => 69);

d34 2
a35 3
    my $d = $_[1] ? abs($_[0]/$_[1] - 1) : abs($_[0]);
    print "# near? $_[0] $_[1] : $d : $e\n";
    $_[1] ? ($d < $e) : abs($_[0]) < $e;
d38 2
d41 2
a42 1
ok(near(tan($x), sin($x) / cos($x)));
d44 2
a45 1
ok(near(sinh(2), 3.62686040784702));
d47 2
a48 1
ok(near(acsch(0.1), 2.99822295029797));
d51 2
a52 1
is(ref $x, 'Math::Complex');
d57 3
a59 2
ok(near($y,  1.5707963267949));
ok(near($z, -1.31695789692482));
d61 2
a62 1
ok(near(deg2rad(90), pi/2));
d64 2
a65 1
ok(near(rad2deg(pi), 180));
d72 4
a75 3
    ok(near($r, sqrt(2)));
    ok(near($t, deg2rad(45)));
    ok(near($z, 1));
d79 4
a82 3
    ok(near($x, 1));
    ok(near($y, 1));
    ok(near($z, 1));
d86 4
a89 3
    ok(near($r, sqrt(2)));
    ok(near($t, deg2rad(45)));
    ok(near($z, 0));
d93 4
a96 3
    ok(near($x, 1));
    ok(near($y, 1));
    ok(near($z, 0));
d102 4
a105 3
    ok(near($r, sqrt(3)));
    ok(near($t, deg2rad(45)));
    ok(near($f, atan2(sqrt(2), 1)));
d109 5
a113 4
    ok(near($x, 1));
    ok(near($y, 1));
    ok(near($z, 1));
       
d116 4
a119 3
    ok(near($r, sqrt(2)));
    ok(near($t, deg2rad(45)));
    ok(near($f, deg2rad(90)));
d123 4
a126 3
    ok(near($x, 1));
    ok(near($y, 1));
    ok(near($z, 0));
d132 4
a135 3
    ok(near($r, 1));
    ok(near($t, 1));
    ok(near($z, 1));
d139 4
a142 3
    ok(near($r, 1));
    ok(near($t, 1));
    ok(near($z, 1));
d148 7
a154 3
    ok(near(great_circle_distance(0, 0, 0, pi/2), pi/2));

    ok(near(great_circle_distance(0, 0, pi, pi), pi));
d162 2
a163 1
    ok(near($km, 9605.26637021388));
d172 2
a173 1
    ok(near($lotta_radians,  1E+20/$R2D));
d176 2
a177 1
    ok(near($negat_degrees, -1E+20*$R2D));
d180 2
a181 1
    ok(near($posit_degrees, -10000*$R2D));
d187 3
a189 1
    ok(near(great_circle_direction(0, 0, 0, pi/2), pi));
d192 3
a194 1
#	ok(near(great_circle_direction(0, 0, pi, pi), -pi()/2));
d201 15
a215 2
    ok(near(rad2deg(great_circle_direction(@@London, @@Tokyo)),
	    31.791945393073));
d217 4
a220 8
    ok(near(rad2deg(great_circle_direction(@@Tokyo, @@London)),
	    336.069766430326));

    ok(near(rad2deg(great_circle_direction(@@Berlin, @@Paris)),
	    246.800348034667));
    
    ok(near(rad2deg(great_circle_direction(@@Paris, @@Berlin)),
	    58.2079877553156));
d224 4
a227 2
    ok(near(rad2deg(great_circle_bearing(@@Paris, @@Berlin)),
	    58.2079877553156));
d236 2
a237 1
    ok(near($lon, $London[0]));
d239 2
a240 1
    ok(near($lat, $London[1]));
d244 2
a245 1
    ok(near($lon, $Tokyo[0]));
d247 2
a248 1
    ok(near($lat, $Tokyo[1]));
d252 2
a253 1
    ok(near($lon, 1.55609593577679)); # 89.16 E
d255 2
a256 1
    ok(near($lat, 0.36783532946162)); # 68.93 N
d260 2
a261 1
    ok(near($lon, 1.55609593577679)); # 89.16 E
d263 2
a264 1
    ok(near($lat, 0.367835329461615)); # 68.93 N
d268 2
a269 3
    ok(near($lon, 0.516073562850837)); # 29.57 E

    ok(near($lat, 0.400231313403387)); # 67.07 N
d271 2
d275 2
a276 1
    ok(near($lon, 2.17494903805952)); # 124.62 E
d278 2
a279 1
    ok(near($lat, 0.617809294053591)); # 54.60 N
d288 2
a289 1
    ok(near($lon, $Tokyo[0]));
d291 2
a292 1
    ok(near($lat, $pip2 - $Tokyo[1]));
d299 2
a300 1
    ok(near($lon, $London[0]));
d302 2
a303 1
    ok(near($lat, $pip2 - $London[1]));
d307 2
a308 1
    ok(near($dir3, 2.69379263839118)); # about 154.343 deg
d312 2
a313 1
    ok(near($dir4, 3.6993902625701)); # about 211.959 deg
d315 2
a316 1
    ok(near($dst1, $dst2));
@


1.1.1.5
log
@import perl 5.10.1
@
text
@d29 1
a29 1
plan(tests => 153);
d31 1
a31 2
use Math::Trig 1.18;
use Math::Trig 1.18 qw(:pi Inf);
a51 36
print "# Sanity checks\n";

ok(near(sin(1), 0.841470984807897));
ok(near(cos(1), 0.54030230586814));
ok(near(tan(1), 1.5574077246549));

ok(near(sec(1), 1.85081571768093));
ok(near(csc(1), 1.18839510577812));
ok(near(cot(1), 0.642092615934331));

ok(near(asin(1), 1.5707963267949));
ok(near(acos(1), 0));
ok(near(atan(1), 0.785398163397448));

ok(near(asec(1), 0));
ok(near(acsc(1), 1.5707963267949));
ok(near(acot(1), 0.785398163397448));

ok(near(sinh(1), 1.1752011936438));
ok(near(cosh(1), 1.54308063481524));
ok(near(tanh(1), 0.761594155955765));

ok(near(sech(1), 0.648054273663885));
ok(near(csch(1), 0.850918128239322));
ok(near(coth(1), 1.31303528549933));

ok(near(asinh(1), 0.881373587019543));
ok(near(acosh(1), 0));
ok(near(atanh(0.9), 1.47221948958322)); # atanh(1.0) would be an error.

ok(near(asech(0.9), 0.467145308103262));
ok(near(acsch(2), 0.481211825059603));
ok(near(acoth(2), 0.549306144334055));

print "# Basics\n";

d148 2
a149 2
    my @@L = (deg2rad(-0.5),  deg2rad(90 - 51.3));
    my @@T = (deg2rad(139.8), deg2rad(90 - 35.7));
a271 83

print "# Infinity\n";

my $BigDouble = 1e40;

# E.g. netbsd-alpha core dumps on Inf arith without this.
local $SIG{FPE} = sub { };

ok(Inf() > $BigDouble);  # This passes in netbsd-alpha.
ok(Inf() + $BigDouble > $BigDouble); # This coredumps in netbsd-alpha.
ok(Inf() + $BigDouble == Inf());
ok(Inf() - $BigDouble > $BigDouble);
ok(Inf() - $BigDouble == Inf());
ok(Inf() * $BigDouble > $BigDouble);
ok(Inf() * $BigDouble == Inf());
ok(Inf() / $BigDouble > $BigDouble);
ok(Inf() / $BigDouble == Inf());

ok(-Inf() < -$BigDouble);
ok(-Inf() + $BigDouble < $BigDouble);
ok(-Inf() + $BigDouble == -Inf());
ok(-Inf() - $BigDouble < -$BigDouble);
ok(-Inf() - $BigDouble == -Inf());
ok(-Inf() * $BigDouble < -$BigDouble);
ok(-Inf() * $BigDouble == -Inf());
ok(-Inf() / $BigDouble < -$BigDouble);
ok(-Inf() / $BigDouble == -Inf());

print "# sinh/sech/cosh/csch/tanh/coth unto infinity\n";

ok(near(sinh(100), 1.3441e+43, 1e-3));
ok(near(sech(100), 7.4402e-44, 1e-3));
ok(near(cosh(100), 1.3441e+43, 1e-3));
ok(near(csch(100), 7.4402e-44, 1e-3));
ok(near(tanh(100), 1));
ok(near(coth(100), 1));

ok(near(sinh(-100), -1.3441e+43, 1e-3));
ok(near(sech(-100),  7.4402e-44, 1e-3));
ok(near(cosh(-100),  1.3441e+43, 1e-3));
ok(near(csch(-100), -7.4402e-44, 1e-3));
ok(near(tanh(-100), -1));
ok(near(coth(-100), -1));

cmp_ok(sinh(1e5), '==', Inf());
cmp_ok(sech(1e5), '==', 0);
cmp_ok(cosh(1e5), '==', Inf());
cmp_ok(csch(1e5), '==', 0);
cmp_ok(tanh(1e5), '==', 1);
cmp_ok(coth(1e5), '==', 1);

cmp_ok(sinh(-1e5), '==', -Inf());
cmp_ok(sech(-1e5), '==', 0);
cmp_ok(cosh(-1e5), '==', Inf());
cmp_ok(csch(-1e5), '==', 0);
cmp_ok(tanh(-1e5), '==', -1);
cmp_ok(coth(-1e5), '==', -1);

print "# great_circle_distance with small angles\n";

for my $e (qw(1e-2 1e-3 1e-4 1e-5)) {
    # Can't assume == 0 because of floating point fuzz,
    # but let's hope for at least < $e.
    cmp_ok(great_circle_distance(0, $e, 0, $e), '<', $e);
}

print "# asin_real, acos_real\n";

is(acos_real(-2.0), pi);
is(acos_real(-1.0), pi);
is(acos_real(-0.5), acos(-0.5));
is(acos_real( 0.0), acos( 0.0));
is(acos_real( 0.5), acos( 0.5));
is(acos_real( 1.0), 0);
is(acos_real( 2.0), 0);

is(asin_real(-2.0), -&pip2);
is(asin_real(-1.0), -&pip2);
is(asin_real(-0.5), asin(-0.5));
is(asin_real( 0.0), asin( 0.0));
is(asin_real( 0.5), asin( 0.5));
is(asin_real( 1.0),  pip2);
is(asin_real( 2.0),  pip2);
@


