head	1.9;
access;
symbols
	OPENBSD_6_1:1.9.0.10
	OPENBSD_6_1_BASE:1.9
	OPENBSD_6_0:1.9.0.12
	OPENBSD_6_0_BASE:1.9
	OPENBSD_5_9:1.9.0.6
	OPENBSD_5_9_BASE:1.9
	OPENBSD_5_8:1.9.0.8
	OPENBSD_5_8_BASE:1.9
	PERL_5_20_2:1.1.1.7
	OPENBSD_5_7:1.9.0.2
	OPENBSD_5_7_BASE:1.9
	PERL_5_20_1:1.1.1.7
	OPENBSD_5_6:1.9.0.4
	OPENBSD_5_6_BASE:1.9
	PERL_5_18_2:1.1.1.7
	PERL:1.1.1
	OPENBSD_5_5:1.8.0.6
	OPENBSD_5_5_BASE:1.8
	OPENBSD_5_4:1.8.0.2
	OPENBSD_5_4_BASE:1.8
	PERL_5_16_3:1.1.1.6
	OPENBSD_5_3:1.7.0.42
	OPENBSD_5_3_BASE:1.7
	OPENBSD_5_2:1.7.0.40
	OPENBSD_5_2_BASE:1.7
	OPENBSD_5_1_BASE:1.7
	OPENBSD_5_1:1.7.0.38
	OPENBSD_5_0:1.7.0.36
	OPENBSD_5_0_BASE:1.7
	OPENBSD_4_9:1.7.0.34
	OPENBSD_4_9_BASE:1.7
	PERL_5_12_2:1.1.1.5
	OPENBSD_4_8:1.7.0.32
	OPENBSD_4_8_BASE:1.7
	OPENBSD_4_7:1.7.0.28
	OPENBSD_4_7_BASE:1.7
	PERL_5_10_1:1.1.1.5
	OPENBSD_4_6:1.7.0.30
	OPENBSD_4_6_BASE:1.7
	OPENBSD_4_5:1.7.0.26
	OPENBSD_4_5_BASE:1.7
	PERL_5_10_0:1.1.1.5
	OPENBSD_4_4:1.7.0.24
	OPENBSD_4_4_BASE:1.7
	OPENBSD_4_3:1.7.0.22
	OPENBSD_4_3_BASE:1.7
	OPENBSD_4_2:1.7.0.20
	OPENBSD_4_2_BASE:1.7
	OPENBSD_4_1:1.7.0.18
	OPENBSD_4_1_BASE:1.7
	OPENBSD_4_0:1.7.0.16
	OPENBSD_4_0_BASE:1.7
	PERL_5_8_8:1.1.1.5
	OPENBSD_3_9:1.7.0.14
	OPENBSD_3_9_BASE:1.7
	OPENBSD_3_8:1.7.0.12
	OPENBSD_3_8_BASE:1.7
	OPENBSD_3_7:1.7.0.10
	OPENBSD_3_7_BASE:1.7
	PERL_5_8_6:1.1.1.5
	OPENBSD_3_6:1.7.0.8
	OPENBSD_3_6_BASE:1.7
	PERL_5_8_5:1.1.1.5
	PERL_5_8_3:1.1.1.5
	OPENBSD_3_5:1.7.0.6
	OPENBSD_3_5_BASE:1.7
	PERL_5_8_2:1.1.1.5
	OPENBSD_3_4:1.7.0.4
	OPENBSD_3_4_BASE:1.7
	OPENBSD_3_3:1.7.0.2
	OPENBSD_3_3_BASE:1.7
	PERL_5_8_0:1.1.1.5
	OPENBSD_3_2:1.6.0.6
	OPENBSD_3_2_BASE:1.6
	OPENBSD_3_1:1.6.0.4
	OPENBSD_3_1_BASE:1.6
	OPENBSD_3_0:1.6.0.2
	OPENBSD_3_0_BASE:1.6
	PERL_5_6_1:1.1.1.4
	OPENBSD_2_9:1.5.0.6
	OPENBSD_2_9_BASE:1.5
	OPENBSD_2_8:1.5.0.4
	OPENBSD_2_8_BASE:1.5
	OPENBSD_2_7:1.5.0.2
	OPENBSD_2_7_BASE:1.5
	PERL_5_6_0:1.1.1.3
	OPENBSD_2_6:1.3.0.2
	OPENBSD_2_6_BASE:1.3
	PERL_500503:1.1.1.2
	CPAN:1.1.1
	OPENBSD_2_5:1.2.0.6
	OPENBSD_2_5_BASE:1.2
	OPENBSD_2_4:1.2.0.4
	OPENBSD_2_4_BASE:1.2
	OPENBSD_2_3:1.2.0.2
	OPENBSD_2_3_BASE:1.2
	OPENBSD_2_2:1.1.1.1.0.6
	OPENBSD_2_2_BASE:1.1.1.1
	OPENBSD_2_1:1.1.1.1.0.4
	OPENBSD_2_1_BASE:1.1.1.1
	OPENBSD_2_0:1.1.1.1.0.2
	OPENBSD_2_0_BASE:1.1.1.1
	perl5003:1.1.1.1
	lwall:1.1.1;
locks; strict;
comment	@# @;
expand	@o@;


1.9
date	2014.03.24.15.05.27;	author afresh1;	state Exp;
branches;
next	1.8;

1.8
date	2013.03.25.20.40.55;	author sthen;	state Exp;
branches;
next	1.7;

1.7
date	2002.10.27.22.25.26;	author millert;	state Exp;
branches;
next	1.6;

1.6
date	2001.05.24.18.35.26;	author millert;	state Exp;
branches;
next	1.5;

1.5
date	2000.04.30.04.41.29;	author millert;	state Exp;
branches;
next	1.4;

1.4
date	2000.04.06.17.06.18;	author millert;	state Exp;
branches;
next	1.3;

1.3
date	99.04.29.22.51.48;	author millert;	state Exp;
branches;
next	1.2;

1.2
date	97.11.30.07.57.13;	author millert;	state Exp;
branches;
next	1.1;

1.1
date	96.08.19.10.12.38;	author downsj;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	96.08.19.10.12.38;	author downsj;	state Exp;
branches;
next	1.1.1.2;

1.1.1.2
date	99.04.29.22.39.59;	author millert;	state Exp;
branches;
next	1.1.1.3;

1.1.1.3
date	2000.04.06.16.09.39;	author millert;	state Exp;
branches;
next	1.1.1.4;

1.1.1.4
date	2001.05.24.18.23.25;	author millert;	state Exp;
branches;
next	1.1.1.5;

1.1.1.5
date	2002.10.27.22.14.58;	author millert;	state Exp;
branches;
next	1.1.1.6;

1.1.1.6
date	2013.03.25.20.08.53;	author sthen;	state Exp;
branches;
next	1.1.1.7;

1.1.1.7
date	2014.03.24.14.59.03;	author afresh1;	state Exp;
branches;
next	;


desc
@@


1.9
log
@Merge perl-5.18.2 plus local patches, remove old files

OK espie@@ sthen@@ deraadt@@
@
text
@package vars;

use 5.006;

our $VERSION = '1.03';

use warnings::register;
use strict qw(vars subs);

sub import {
    my $callpack = caller;
    my (undef, @@imports) = @@_;
    my ($sym, $ch);
    foreach (@@imports) {
        if (($ch, $sym) = /^([\$\@@\%\*\&])(.+)/) {
	    if ($sym =~ /\W/) {
		# time for a more-detailed check-up
		if ($sym =~ /^\w+[[{].*[]}]$/) {
		    require Carp;
		    Carp::croak("Can't declare individual elements of hash or array");
		} elsif (warnings::enabled() and length($sym) == 1 and $sym !~ tr/a-zA-Z//) {
		    warnings::warn("No need to declare built-in vars");
		} elsif  (($^H &= strict::bits('vars'))) {
		    require Carp;
		    Carp::croak("'$_' is not a valid variable name under strict vars");
		}
	    }
	    $sym = "${callpack}::$sym" unless $sym =~ /::/;
	    *$sym =
		(  $ch eq "\$" ? \$$sym
		 : $ch eq "\@@" ? \@@$sym
		 : $ch eq "\%" ? \%$sym
		 : $ch eq "\*" ? \*$sym
		 : $ch eq "\&" ? \&$sym 
		 : do {
		     require Carp;
		     Carp::croak("'$_' is not a valid variable name");
		 });
	} else {
	    require Carp;
	    Carp::croak("'$_' is not a valid variable name");
	}
    }
};

1;
__END__

=head1 NAME

vars - Perl pragma to predeclare global variable names

=head1 SYNOPSIS

    use vars qw($frob @@mung %seen);

=head1 DESCRIPTION

NOTE: For use with variables in the current package for a single scope, the
functionality provided by this pragma has been superseded by C<our>
declarations, available in Perl v5.6.0 or later, and use of this pragma is
discouraged.  See L<perlfunc/our>.

This will predeclare all the variables whose names are 
in the list, allowing you to use them under "use strict", and
disabling any typo warnings.

Unlike pragmas that affect the C<$^H> hints variable, the C<use vars> and
C<use subs> declarations are not BLOCK-scoped.  They are thus effective
for the entire file in which they appear.  You may not rescind such
declarations with C<no vars> or C<no subs>.

Packages such as the B<AutoLoader> and B<SelfLoader> that delay
loading of subroutines within packages can create problems with
package lexicals defined using C<my()>. While the B<vars> pragma
cannot duplicate the effect of package lexicals (total transparency
outside of the package), it can act as an acceptable substitute by
pre-declaring global symbols, ensuring their availability to the
later-loaded routines.

See L<perlmodlib/Pragmatic Modules>.

=cut
@


1.8
log
@merge/resolve conflicts
(some more to do after this one)
@
text
@d5 1
a5 1
our $VERSION = '1.02';
d51 1
a51 1
vars - Perl pragma to predeclare global variable names (obsolete)
d59 4
a62 3
NOTE: For variables in the current package, the functionality provided
by this pragma has been superseded by C<our> declarations, available
in Perl v5.6.0 or later.  See L<perlfunc/our>.
@


1.7
log
@Resolve conflicts, remove old files, merge local changes
@
text
@d5 1
a5 1
our $VERSION = '1.01';
d12 1
a12 1
    my ($pack, @@imports) = @@_;
@


1.6
log
@merge in perl 5.6.1 with our local changes
@
text
@d3 1
a3 1
require 5.002;
d5 1
a5 6
# The following require can't be removed during maintenance
# releases, sadly, because of the risk of buggy code that does
# require Carp; Carp::croak "..."; without brackets dying
# if Carp hasn't been loaded in earlier compile time. :-(
# We'll let those bugs get found on the development track.
require Carp if $] < 5.00450;
d8 1
a8 1
require strict;
d12 15
a26 15
    my ($pack, @@imports, $sym, $ch) = @@_;
    foreach $sym (@@imports) {
        ($ch, $sym) = unpack('a1a*', $sym);
	if ($sym =~ tr/A-Za-z_0-9//c) {
	    # time for a more-detailed check-up
	    if ($sym =~ /::/) {
		require Carp;
		Carp::croak("Can't declare another package's variables");
	    } elsif ($sym =~ /^\w+[[{].*[]}]$/) {
		require Carp;
		Carp::croak("Can't declare individual elements of hash or array");
	    } elsif (warnings::enabled() and length($sym) == 1 and $sym !~ tr/a-zA-Z//) {
		warnings::warn("No need to declare built-in vars");
            } elsif  ( $^H &= strict::bits('vars') ) {
              Carp::croak("'$ch$sym' is not a valid variable name under strict vars");
d28 14
a42 10
        *{"${callpack}::$sym"} =
          (  $ch eq "\$" ? \$   {"${callpack}::$sym"}
           : $ch eq "\@@" ? \@@   {"${callpack}::$sym"}
           : $ch eq "\%" ? \%   {"${callpack}::$sym"}
           : $ch eq "\*" ? \*   {"${callpack}::$sym"}
           : $ch eq "\&" ? \&   {"${callpack}::$sym"}
           : do {
		require Carp;
		Carp::croak("'$ch$sym' is not a valid variable name");
	     });
d59 3
a61 3
NOTE: The functionality provided by this pragma has been superseded
by C<our> declarations, available in Perl v5.6.0 or later.  See
L<perlfunc/our>.
@


1.5
log
@Change 5948 by gsar@@auger on 2000/04/25 18:21:57
typo in vars.pm that leads to cryptic message
(from Piotr Piatkowski <kompas@@kompas.usr.onet.pl>)
@
text
@d13 1
d30 2
@


1.4
log
@perl-5.6.0 + local changes
@
text
@d11 2
a12 1
use warnings::register();
@


1.3
log
@perl5.005_03 (stock)
@
text
@d11 1
d18 1
a18 1
	if ($sym =~ tr/A-Za-Z_0-9//c) {
d26 2
a27 3
	    } elsif ($^W and length($sym) == 1 and $sym !~ tr/a-zA-Z//) {
		require Carp;
		Carp::carp("No need to declare built-in vars");
d48 1
a48 1
vars - Perl pragma to predeclare global variable names
d55 4
@


1.2
log
@perl 5.004_04
@
text
@d16 13
a28 3
	if ($sym =~ /::/) {
	    require Carp;
	    Carp::croak("Can't declare another package's variables");
a29 1
        ($ch, $sym) = unpack('a1a*', $sym);
d38 1
a38 1
		Carp::croak("'$ch$sym' is not a valid variable name\n");
d73 1
a73 1
See L<perlmod/Pragmatic Modules>.
@


1.1
log
@Initial revision
@
text
@d3 34
d51 13
a66 20
require 5.000;
use Carp;

sub import {
    my $callpack = caller;
    my ($pack, @@imports, $sym, $ch) = @@_;
    foreach $sym (@@imports) {
	croak "Can't declare another package's variables" if $sym =~ /::/;
        ($ch, $sym) = unpack('a1a*', $sym);
        *{"${callpack}::$sym"} =
          (  $ch eq "\$" ? \$   {"${callpack}::$sym"}
           : $ch eq "\@@" ? \@@   {"${callpack}::$sym"}
           : $ch eq "\%" ? \%   {"${callpack}::$sym"}
           : $ch eq "\*" ? \*   {"${callpack}::$sym"}
           : $ch eq "\&" ? \&   {"${callpack}::$sym"}
           : croak "'$ch$sym' is not a valid variable name\n");
    }
};

1;
@


1.1.1.1
log
@Import of Perl 5.003 into the tree.  Makefile.bsd-wrapper and
config.sh.OpenBSD are the only local changes.
@
text
@@


1.1.1.2
log
@perl5.005_03
@
text
@d3 1
a3 1
require 5.002;
d5 17
a21 6
# The following require can't be removed during maintenance
# releases, sadly, because of the risk of buggy code that does
# require Carp; Carp::croak "..."; without brackets dying
# if Carp hasn't been loaded in earlier compile time. :-(
# We'll let those bugs get found on the development track.
require Carp if $] < 5.00450;
d27 1
a28 13
	if ($sym =~ tr/A-Za-Z_0-9//c) {
	    # time for a more-detailed check-up
	    if ($sym =~ /::/) {
		require Carp;
		Carp::croak("Can't declare another package's variables");
	    } elsif ($sym =~ /^\w+[[{].*[]}]$/) {
		require Carp;
		Carp::croak("Can't declare individual elements of hash or array");
	    } elsif ($^W and length($sym) == 1 and $sym !~ tr/a-zA-Z//) {
		require Carp;
		Carp::carp("No need to declare built-in vars");
	    }
	}
d35 1
a35 4
           : do {
		require Carp;
		Carp::croak("'$ch$sym' is not a valid variable name");
	     });
a39 32
__END__

=head1 NAME

vars - Perl pragma to predeclare global variable names

=head1 SYNOPSIS

    use vars qw($frob @@mung %seen);

=head1 DESCRIPTION

This will predeclare all the variables whose names are 
in the list, allowing you to use them under "use strict", and
disabling any typo warnings.

Unlike pragmas that affect the C<$^H> hints variable, the C<use vars> and
C<use subs> declarations are not BLOCK-scoped.  They are thus effective
for the entire file in which they appear.  You may not rescind such
declarations with C<no vars> or C<no subs>.

Packages such as the B<AutoLoader> and B<SelfLoader> that delay
loading of subroutines within packages can create problems with
package lexicals defined using C<my()>. While the B<vars> pragma
cannot duplicate the effect of package lexicals (total transparency
outside of the package), it can act as an acceptable substitute by
pre-declaring global symbols, ensuring their availability to the
later-loaded routines.

See L<perlmodlib/Pragmatic Modules>.

=cut
@


1.1.1.3
log
@virgin perl 5.6.0
@
text
@a10 1
use warnings::register();
d17 1
a17 1
	if ($sym =~ tr/A-Za-z_0-9//c) {
d25 3
a27 2
	    } elsif (warnings::enabled() and length($sym) == 1 and $sym !~ tr/a-zA-Z//) {
		warnings::warn("No need to declare built-in vars");
d48 1
a48 1
vars - Perl pragma to predeclare global variable names (obsolete)
a54 4

NOTE: The functionality provided by this pragma has been superseded
by C<our> declarations, available in Perl v5.6.0 or later.  See
L<perlfunc/our>.
@


1.1.1.4
log
@stock perl 5.6.1
@
text
@d11 1
a11 3

use warnings::register;
require strict;
a27 2
            } elsif  ( $^H &= strict::bits('vars') ) {
              Carp::croak("'$ch$sym' is not a valid variable name under strict vars");
@


1.1.1.5
log
@stock perl 5.8.0 from CPAN
@
text
@d3 1
a3 1
use 5.006;
d5 6
a10 1
our $VERSION = '1.01';
d13 1
a13 1
use strict qw(vars subs);
d17 15
a31 15
    my ($pack, @@imports) = @@_;
    my ($sym, $ch);
    foreach (@@imports) {
        if (($ch, $sym) = /^([\$\@@\%\*\&])(.+)/) {
	    if ($sym =~ /\W/) {
		# time for a more-detailed check-up
		if ($sym =~ /^\w+[[{].*[]}]$/) {
		    require Carp;
		    Carp::croak("Can't declare individual elements of hash or array");
		} elsif (warnings::enabled() and length($sym) == 1 and $sym !~ tr/a-zA-Z//) {
		    warnings::warn("No need to declare built-in vars");
		} elsif  (($^H &= strict::bits('vars'))) {
		    require Carp;
		    Carp::croak("'$_' is not a valid variable name under strict vars");
		}
a32 14
	    $sym = "${callpack}::$sym" unless $sym =~ /::/;
	    *$sym =
		(  $ch eq "\$" ? \$$sym
		 : $ch eq "\@@" ? \@@$sym
		 : $ch eq "\%" ? \%$sym
		 : $ch eq "\*" ? \*$sym
		 : $ch eq "\&" ? \&$sym 
		 : do {
		     require Carp;
		     Carp::croak("'$_' is not a valid variable name");
		 });
	} else {
	    require Carp;
	    Carp::croak("'$_' is not a valid variable name");
d34 10
d60 3
a62 3
NOTE: For variables in the current package, the functionality provided
by this pragma has been superseded by C<our> declarations, available
in Perl v5.6.0 or later.  See L<perlfunc/our>.
@


1.1.1.6
log
@import perl 5.16.3 from CPAN - worked on by Andrew Fresh and myself
@
text
@d5 1
a5 1
our $VERSION = '1.02';
d12 1
a12 1
    my (undef, @@imports) = @@_;
@


1.1.1.7
log
@Import perl-5.18.2

OK espie@@ sthen@@ deraadt@@
@
text
@d5 1
a5 1
our $VERSION = '1.03';
d51 1
a51 1
vars - Perl pragma to predeclare global variable names
d59 3
a61 4
NOTE: For use with variables in the current package for a single scope, the
functionality provided by this pragma has been superseded by C<our>
declarations, available in Perl v5.6.0 or later, and use of this pragma is
discouraged.  See L<perlfunc/our>.
@


