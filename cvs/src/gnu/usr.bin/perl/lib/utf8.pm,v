head	1.2;
access;
symbols
	OPENBSD_6_0:1.1.1.11.0.10
	OPENBSD_6_0_BASE:1.1.1.11
	OPENBSD_5_9:1.1.1.11.0.4
	OPENBSD_5_9_BASE:1.1.1.11
	OPENBSD_5_8:1.1.1.11.0.6
	OPENBSD_5_8_BASE:1.1.1.11
	PERL_5_20_2:1.1.1.11
	OPENBSD_5_7:1.1.1.11.0.2
	OPENBSD_5_7_BASE:1.1.1.11
	PERL_5_20_1:1.1.1.11
	OPENBSD_5_6:1.1.1.10.0.4
	OPENBSD_5_6_BASE:1.1.1.10
	PERL_5_18_2:1.1.1.10
	PERL:1.1.1
	OPENBSD_5_5:1.1.1.9.0.6
	OPENBSD_5_5_BASE:1.1.1.9
	OPENBSD_5_4:1.1.1.9.0.2
	OPENBSD_5_4_BASE:1.1.1.9
	PERL_5_16_3:1.1.1.9
	OPENBSD_5_3:1.1.1.8.0.10
	OPENBSD_5_3_BASE:1.1.1.8
	OPENBSD_5_2:1.1.1.8.0.8
	OPENBSD_5_2_BASE:1.1.1.8
	OPENBSD_5_1_BASE:1.1.1.8
	OPENBSD_5_1:1.1.1.8.0.6
	OPENBSD_5_0:1.1.1.8.0.4
	OPENBSD_5_0_BASE:1.1.1.8
	OPENBSD_4_9:1.1.1.8.0.2
	OPENBSD_4_9_BASE:1.1.1.8
	PERL_5_12_2:1.1.1.8
	OPENBSD_4_8:1.1.1.7.0.8
	OPENBSD_4_8_BASE:1.1.1.7
	OPENBSD_4_7:1.1.1.7.0.4
	OPENBSD_4_7_BASE:1.1.1.7
	PERL_5_10_1:1.1.1.7
	OPENBSD_4_6:1.1.1.7.0.6
	OPENBSD_4_6_BASE:1.1.1.7
	OPENBSD_4_5:1.1.1.7.0.2
	OPENBSD_4_5_BASE:1.1.1.7
	PERL_5_10_0:1.1.1.7
	OPENBSD_4_4:1.1.1.6.0.10
	OPENBSD_4_4_BASE:1.1.1.6
	OPENBSD_4_3:1.1.1.6.0.8
	OPENBSD_4_3_BASE:1.1.1.6
	OPENBSD_4_2:1.1.1.6.0.6
	OPENBSD_4_2_BASE:1.1.1.6
	OPENBSD_4_1:1.1.1.6.0.4
	OPENBSD_4_1_BASE:1.1.1.6
	OPENBSD_4_0:1.1.1.6.0.2
	OPENBSD_4_0_BASE:1.1.1.6
	PERL_5_8_8:1.1.1.6
	OPENBSD_3_9:1.1.1.5.0.8
	OPENBSD_3_9_BASE:1.1.1.5
	OPENBSD_3_8:1.1.1.5.0.6
	OPENBSD_3_8_BASE:1.1.1.5
	OPENBSD_3_7:1.1.1.5.0.4
	OPENBSD_3_7_BASE:1.1.1.5
	PERL_5_8_6:1.1.1.5
	OPENBSD_3_6:1.1.1.5.0.2
	OPENBSD_3_6_BASE:1.1.1.5
	PERL_5_8_5:1.1.1.5
	PERL_5_8_3:1.1.1.4
	OPENBSD_3_5:1.1.1.4.0.2
	OPENBSD_3_5_BASE:1.1.1.4
	PERL_5_8_2:1.1.1.4
	OPENBSD_3_4:1.1.1.3.0.4
	OPENBSD_3_4_BASE:1.1.1.3
	OPENBSD_3_3:1.1.1.3.0.2
	OPENBSD_3_3_BASE:1.1.1.3
	PERL_5_8_0:1.1.1.3
	OPENBSD_3_2:1.1.1.2.0.6
	OPENBSD_3_2_BASE:1.1.1.2
	OPENBSD_3_1:1.1.1.2.0.4
	OPENBSD_3_1_BASE:1.1.1.2
	OPENBSD_3_0:1.1.1.2.0.2
	OPENBSD_3_0_BASE:1.1.1.2
	PERL_5_6_1:1.1.1.2
	OPENBSD_2_9:1.1.1.1.0.6
	OPENBSD_2_9_BASE:1.1.1.1
	OPENBSD_2_8:1.1.1.1.0.4
	OPENBSD_2_8_BASE:1.1.1.1
	OPENBSD_2_7:1.1.1.1.0.2
	OPENBSD_2_7_BASE:1.1.1.1
	PERL_5_6_0:1.1.1.1
	CPAN:1.1.1;
locks; strict;
comment	@# @;
expand	@o@;


1.2
date	2017.02.05.00.32.15;	author afresh1;	state Exp;
branches;
next	1.1;
commitid	cxJ08BvJA9Pt2PTM;

1.1
date	2000.04.06.16.09.39;	author millert;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	2000.04.06.16.09.39;	author millert;	state Exp;
branches;
next	1.1.1.2;

1.1.1.2
date	2001.05.24.18.23.24;	author millert;	state Exp;
branches;
next	1.1.1.3;

1.1.1.3
date	2002.10.27.22.14.58;	author millert;	state Exp;
branches;
next	1.1.1.4;

1.1.1.4
date	2003.12.03.02.44.00;	author millert;	state Exp;
branches;
next	1.1.1.5;

1.1.1.5
date	2004.08.09.17.46.45;	author millert;	state Exp;
branches;
next	1.1.1.6;

1.1.1.6
date	2006.03.28.18.48.39;	author millert;	state Exp;
branches;
next	1.1.1.7;

1.1.1.7
date	2008.09.29.17.18.31;	author millert;	state Exp;
branches;
next	1.1.1.8;

1.1.1.8
date	2010.09.24.14.48.37;	author millert;	state Exp;
branches;
next	1.1.1.9;

1.1.1.9
date	2013.03.25.20.08.53;	author sthen;	state Exp;
branches;
next	1.1.1.10;

1.1.1.10
date	2014.03.24.14.59.03;	author afresh1;	state Exp;
branches;
next	1.1.1.11;

1.1.1.11
date	2014.11.17.20.53.08;	author afresh1;	state Exp;
branches;
next	;
commitid	B31cAbBIXiCqnL97;


desc
@@


1.2
log
@Fix merge issues, remove excess files - match perl-5.24.1 dist
@
text
@package utf8;

$utf8::hint_bits = 0x00800000;

our $VERSION = '1.19';

sub import {
    $^H |= $utf8::hint_bits;
}

sub unimport {
    $^H &= ~$utf8::hint_bits;
}

sub AUTOLOAD {
    require "utf8_heavy.pl";
    goto &$AUTOLOAD if defined &$AUTOLOAD;
    require Carp;
    Carp::croak("Undefined subroutine $AUTOLOAD called");
}

1;
__END__

=head1 NAME

utf8 - Perl pragma to enable/disable UTF-8 (or UTF-EBCDIC) in source code

=head1 SYNOPSIS

 use utf8;
 no utf8;

 # Convert the internal representation of a Perl scalar to/from UTF-8.

 $num_octets = utf8::upgrade($string);
 $success    = utf8::downgrade($string[, $fail_ok]);

 # Change each character of a Perl scalar to/from a series of
 # characters that represent the UTF-8 bytes of each original character.

 utf8::encode($string);  # "\x{100}"  becomes "\xc4\x80"
 utf8::decode($string);  # "\xc4\x80" becomes "\x{100}"

 # Convert a code point from the platform native character set to
 # Unicode, and vice-versa.
 $unicode = utf8::native_to_unicode(ord('A')); # returns 65 on both
                                               # ASCII and EBCDIC
                                               # platforms
 $native = utf8::unicode_to_native(65);        # returns 65 on ASCII
                                               # platforms; 193 on
                                               # EBCDIC

 $flag = utf8::is_utf8($string); # since Perl 5.8.1
 $flag = utf8::valid($string);

=head1 DESCRIPTION

The C<use utf8> pragma tells the Perl parser to allow UTF-8 in the
program text in the current lexical scope.  The C<no utf8> pragma tells Perl
to switch back to treating the source text as literal bytes in the current
lexical scope.  (On EBCDIC platforms, technically it is allowing UTF-EBCDIC,
and not UTF-8, but this distinction is academic, so in this document the term
UTF-8 is used to mean both).

B<Do not use this pragma for anything else than telling Perl that your
script is written in UTF-8.> The utility functions described below are
directly usable without C<use utf8;>.

Because it is not possible to reliably tell UTF-8 from native 8 bit
encodings, you need either a Byte Order Mark at the beginning of your
source code, or C<use utf8;>, to instruct perl.

When UTF-8 becomes the standard source format, this pragma will
effectively become a no-op.

See also the effects of the C<-C> switch and its cousin, the
C<PERL_UNICODE> environment variable, in L<perlrun>.

Enabling the C<utf8> pragma has the following effect:

=over 4

=item *

Bytes in the source text that are not in the ASCII character set will be
treated as being part of a literal UTF-8 sequence.  This includes most
literals such as identifier names, string constants, and constant
regular expression patterns.

=back

Note that if you have non-ASCII, non-UTF-8 bytes in your script (for example
embedded Latin-1 in your string literals), C<use utf8> will be unhappy.  If
you want to have such bytes under C<use utf8>, you can disable this pragma
until the end the block (or file, if at top level) by C<no utf8;>.

=head2 Utility functions

The following functions are defined in the C<utf8::> package by the
Perl core.  You do not need to say C<use utf8> to use these and in fact
you should not say that unless you really want to have UTF-8 source code.

=over 4

=item * C<$num_octets = utf8::upgrade($string)>

(Since Perl v5.8.0)
Converts in-place the internal representation of the string from an octet
sequence in the native encoding (Latin-1 or EBCDIC) to UTF-8. The
logical character sequence itself is unchanged.  If I<$string> is already
stored as UTF-8, then this is a no-op. Returns the
number of octets necessary to represent the string as UTF-8.  Can be
used to make sure that the UTF-8 flag is on, so that C<\w> or C<lc()>
work as Unicode on strings containing non-ASCII characters whose code points
are below 256.

B<Note that this function does not handle arbitrary encodings>;
use L<Encode> instead.

=item * C<$success = utf8::downgrade($string[, $fail_ok])>

(Since Perl v5.8.0)
Converts in-place the internal representation of the string from
UTF-8 to the equivalent octet sequence in the native encoding (Latin-1
or EBCDIC). The logical character sequence itself is unchanged. If
I<$string> is already stored as native 8 bit, then this is a no-op.  Can
be used to
make sure that the UTF-8 flag is off, e.g. when you want to make sure
that the substr() or length() function works with the usually faster
byte algorithm.

Fails if the original UTF-8 sequence cannot be represented in the
native 8 bit encoding. On failure dies or, if the value of I<$fail_ok> is
true, returns false. 

Returns true on success.

B<Note that this function does not handle arbitrary encodings>;
use L<Encode> instead.

=item * C<utf8::encode($string)>

(Since Perl v5.8.0)
Converts in-place the character sequence to the corresponding octet
sequence in UTF-8. That is, every (possibly wide) character gets
replaced with a sequence of one or more characters that represent the
individual UTF-8 bytes of the character.  The UTF8 flag is turned off.
Returns nothing.

 my $a = "\x{100}"; # $a contains one character, with ord 0x100
 utf8::encode($a);  # $a contains two characters, with ords (on
                    # ASCII platforms) 0xc4 and 0x80.  On EBCDIC
                    # 1047, this would instead be 0x8C and 0x41.

B<Note that this function does not handle arbitrary encodings>;
use L<Encode> instead.

=item * C<$success = utf8::decode($string)>

(Since Perl v5.8.0)
Attempts to convert in-place the octet sequence encoded as UTF-8 to the
corresponding character sequence. That is, it replaces each sequence of
characters in the string whose ords represent a valid UTF-8 byte
sequence, with the corresponding single character.  The UTF-8 flag is
turned on only if the source string contains multiple-byte UTF-8
characters.  If I<$string> is invalid as UTF-8, returns false;
otherwise returns true.

 my $a = "\xc4\x80"; # $a contains two characters, with ords
                     # 0xc4 and 0x80
 utf8::decode($a);   # On ASCII platforms, $a contains one char,
                     # with ord 0x100.   Since these bytes aren't
                     # legal UTF-EBCDIC, on EBCDIC platforms, $a is
                     # unchanged and the function returns FALSE.

B<Note that this function does not handle arbitrary encodings>;
use L<Encode> instead.

=item * C<$unicode = utf8::native_to_unicode($code_point)>

(Since Perl v5.8.0)
This takes an unsigned integer (which represents the ordinal number of a
character (or a code point) on the platform the program is being run on) and
returns its Unicode equivalent value.  Since ASCII platforms natively use the
Unicode code points, this function returns its input on them.  On EBCDIC
platforms it converts from EBCDIC to Unicode.

A meaningless value will currently be returned if the input is not an unsigned
integer.

Since Perl v5.22.0, calls to this function are optimized out on ASCII
platforms, so there is no performance hit in using it there.

=item * C<$native = utf8::unicode_to_native($code_point)>

(Since Perl v5.8.0)
This is the inverse of C<utf8::native_to_unicode()>, converting the other
direction.  Again, on ASCII platforms, this returns its input, but on EBCDIC
platforms it will find the native platform code point, given any Unicode one.

A meaningless value will currently be returned if the input is not an unsigned
integer.

Since Perl v5.22.0, calls to this function are optimized out on ASCII
platforms, so there is no performance hit in using it there.

=item * C<$flag = utf8::is_utf8($string)>

(Since Perl 5.8.1)  Test whether I<$string> is marked internally as encoded in
UTF-8.  Functionally the same as C<Encode::is_utf8()>.

=item * C<$flag = utf8::valid($string)>

[INTERNAL] Test whether I<$string> is in a consistent state regarding
UTF-8.  Will return true if it is well-formed UTF-8 and has the UTF-8 flag
on B<or> if I<$string> is held as bytes (both these states are 'consistent').
Main reason for this routine is to allow Perl's test suite to check
that operations have left strings in a consistent state.  You most
probably want to use C<utf8::is_utf8()> instead.

=back

C<utf8::encode> is like C<utf8::upgrade>, but the UTF8 flag is
cleared.  See L<perlunicode>, and the C API
functions C<L<sv_utf8_upgrade|perlapi/sv_utf8_upgrade>>,
C<L<perlapi/sv_utf8_downgrade>>, C<L<perlapi/sv_utf8_encode>>,
and C<L<perlapi/sv_utf8_decode>>, which are wrapped by the Perl functions
C<utf8::upgrade>, C<utf8::downgrade>, C<utf8::encode> and
C<utf8::decode>.  Also, the functions C<utf8::is_utf8>, C<utf8::valid>,
C<utf8::encode>, C<utf8::decode>, C<utf8::upgrade>, and C<utf8::downgrade> are
actually internal, and thus always available, without a C<require utf8>
statement.

=head1 BUGS

Some filesystems may not support UTF-8 file names, or they may be supported
incompatibly with Perl.  Therefore UTF-8 names that are visible to the
filesystem, such as module names may not work.

=head1 SEE ALSO

L<perlunitut>, L<perluniintro>, L<perlrun>, L<bytes>, L<perlunicode>

=cut
@


1.1
log
@Initial revision
@
text
@d5 2
a8 1
    $enc{caller()} = $_[1] if $_[1];
d17 3
a19 1
    goto &$AUTOLOAD;
d27 1
a27 1
utf8 - Perl pragma to enable/disable UTF-8 in source code
d31 25
a55 2
    use utf8;
    no utf8;
d59 14
a72 2
WARNING: The implementation of Unicode support in Perl is incomplete.
See L<perlunicode> for the exact details.
a73 10
The C<use utf8> pragma tells the Perl parser to allow UTF-8 in the
program text in the current lexical scope.  The C<no utf8> pragma
tells Perl to switch back to treating the source text as literal
bytes in the current lexical scope.

This pragma is primarily a compatibility device.  Perl versions
earlier than 5.6 allowed arbitrary bytes in source code, whereas
in future we would like to standardize on the UTF-8 encoding for
source text.  Until UTF-8 becomes the default format for source
text, this pragma should be used to recognize UTF-8 in the source.
d77 2
a78 1
Enabling the C<utf8> pragma has the following effects:
d80 1
a80 3
=over

=item *
d82 1
a82 4
Bytes in the source text that have their high-bit set will be treated
as being part of a literal UTF-8 character.  This includes most literals
such as identifiers, string constants, constant regular expression patterns
and package names.
d86 154
a239 10
In the absence of inputs marked as UTF-8, regular expressions within the
scope of this pragma will default to using character semantics instead
of byte semantics.

    @@bytes_or_chars = split //, $data;	# may split to bytes if data
					# $data isn't UTF-8
    {
	use utf8;			# force char semantics
	@@chars = split //, $data;	# splits characters
    }
d243 1
a243 1
L<perlunicode>, L<bytes>
@


1.1.1.1
log
@virgin perl 5.6.0
@
text
@@


1.1.1.2
log
@stock perl 5.6.1
@
text
@a2 2
if (ord('A') != 193) { # make things more pragmatic for EBCDIC folk

d16 1
a16 4
    goto &$AUTOLOAD if defined &$AUTOLOAD;
    Carp::croak("Undefined subroutine $AUTOLOAD called");
}

d47 1
a47 3
effectively become a no-op.  This pragma already is a no-op on
EBCDIC platforms (where it is alright to code perl in EBCDIC 
rather than UTF-8).
@


1.1.1.3
log
@stock perl 5.8.0 from CPAN
@
text
@d3 2
a6 2
our $VERSION = '1.00';

d22 2
d29 1
a29 1
utf8 - Perl pragma to enable/disable UTF-8 (or UTF-EBCDIC) in source code
d38 3
d42 3
a44 3
program text in the current lexical scope (allow UTF-EBCDIC on EBCDIC based
platforms).  The C<no utf8> pragma tells Perl to switch back to treating
the source text as literal bytes in the current lexical scope.
d52 3
a54 3
effectively become a no-op.  For convenience in what follows the
term I<UTF-X> is used to refer to UTF-8 on ASCII and ISO Latin based
platforms and UTF-EBCDIC on EBCDIC based platforms.
d56 1
a56 1
Enabling the C<utf8> pragma has the following effect:
d58 1
a58 1
=over 4
d63 16
a78 89
as being part of a literal UTF-8 character.  This includes most
literals such as identifier names, string constants, and constant
regular expression patterns.

On EBCDIC platforms characters in the Latin 1 character set are
treated as being part of a literal UTF-EBCDIC character.

=back

Note that if you have bytes with the eighth bit on in your script
(for example embedded Latin-1 in your string literals), C<use utf8>
will be unhappy since the bytes are most probably not well-formed
UTF-8.  If you want to have such bytes and use utf8, you can disable
utf8 until the end the block (or file, if at top level) by C<no utf8;>.

=head2 Utility functions

The following functions are defined in the C<utf8::> package by the perl core.

=over 4

=item * $num_octets = utf8::upgrade($string);

Converts (in-place) internal representation of string to Perl's internal
I<UTF-X> form.  Returns the number of octets necessary to represent
the string as I<UTF-X>.  Can be used to make sure that the
UTF-8 flag is on, so that C<\w> or C<lc()> work as expected on strings
containing characters in the range 0x80-0xFF.  Note that this should
not be used to convert
a legacy byte encoding to Unicode: use Encode for that.  Affected
by the encoding pragma.

=item * utf8::downgrade($string[, FAIL_OK])

Converts (in-place) internal representation of string to be un-encoded
bytes.  Returns true on success. On failure dies or, if the value of
FAIL_OK is true, returns false.  Can be used to make sure that the
UTF-8 flag is off, e.g. when you want to make sure that the substr()
or length() function works with the usually faster byte algorithm.
Note that this should not be used to convert Unicode back to a legacy
byte encoding: use Encode for that.  B<Not> affected by the encoding
pragma.

=item * utf8::encode($string)

Converts (in-place) I<$string> from logical characters to octet
sequence representing it in Perl's I<UTF-X> encoding. Same as
Encode::encode_utf8(). Note that this should not be used to convert
a legacy byte encoding to Unicode: use Encode for that.

=item * $flag = utf8::decode($string)

Attempts to convert I<$string> in-place from Perl's I<UTF-X> encoding
into logical characters. Same as Encode::decode_utf8(). Note that this
should not be used to convert Unicode back to a legacy byte encoding:
use Encode for that.

=item * $flag = utf8::valid(STRING)

[INTERNAL] Test whether STRING is in a consistent state.  Will return
true if string is held as bytes, or is well-formed UTF-8 and has the
UTF-8 flag on.  Main reason for this routine is to allow Perl's
testsuite to check that operations have left strings in a consistent
state.

=back

C<utf8::encode> is like C<utf8::upgrade>, but the UTF8 flag is
cleared.  See L<perlunicode> for more on the UTF8 flag and the C API
functions C<sv_utf8_upgrade>, C<sv_utf8_downgrade>, C<sv_utf8_encode>,
and C<sv_utf8_decode>, which are wrapped by the Perl functions
C<utf8::upgrade>, C<utf8::downgrade>, C<utf8::encode> and
C<utf8::decode>.  Note that in the Perl 5.8.0 implementation the
functions utf8::valid, utf8::encode, utf8::decode, utf8::upgrade,
and utf8::downgrade are always available, without a C<require utf8>
statement-- this may change in future releases.

=head1 BUGS

One can have Unicode in identifier names, but not in package/class or
subroutine names.  While some limited functionality towards this does
exist as of Perl 5.8.0, that is more accidental than designed; use of
Unicode for the said purposes is unsupported.

One reason of this unfinishedness is its (currently) inherent
unportability: since both package names and subroutine names may need
to be mapped to file and directory names, the Unicode capability of
the filesystem becomes important-- and there unfortunately aren't
portable answers.
@


1.1.1.4
log
@perl 5.8.2 from CPAN
@
text
@d5 1
a5 1
our $VERSION = '1.02';
a33 9
    $num_octets = utf8::upgrade($string);
    $success    = utf8::downgrade($string[, FAIL_OK]);

    utf8::encode($string);
    utf8::decode($string);

    $flag = utf8::is_utf8(STRING); # since Perl 5.8.1
    $flag = utf8::valid(STRING);

d44 6
a49 16
source text.

B<Do not use this pragma for anything else than telling Perl that your
script is written in UTF-8.> The utility functions described below are
useful for their own purposes, but they are not really part of the
"pragmatic" effect.

Until UTF-8 becomes the default format for source text, either this
pragma or the L</encoding> pragma should be used to recognize UTF-8
in the source.  When UTF-8 becomes the standard source format, this
pragma will effectively become a no-op.  For convenience in what
follows the term I<UTF-X> is used to refer to UTF-8 on ASCII and ISO
Latin based platforms and UTF-EBCDIC on EBCDIC based platforms.

See also the effects of the C<-C> switch and its cousin, the
C<$ENV{PERL_UNICODE}>, in L<perlrun>.
a72 12
If you want to automatically upgrade your 8-bit legacy bytes to UTF-8,
use the L</encoding> pragma instead of this pragma.  For example, if
you want to implicitly upgrade your ISO 8859-1 (Latin-1) bytes to UTF-8
as used in e.g. C<chr()> and C<\x{...}>, try this:

    use encoding "latin-1";
    my $c = chr(0xc4);
    my $x = "\x{c5}";

In case you are wondering: yes, C<use encoding 'utf8';> works much
the same as C<use utf8;>.

d75 1
a75 3
The following functions are defined in the C<utf8::> package by the
Perl core.  You do not need to say C<use utf8> to use these and in fact
you should not say that  unless you really want to have UTF-8 source code.
d79 1
a79 1
=item * $num_octets = utf8::upgrade($string)
d81 3
a83 3
Converts (in-place) internal representation of string to Perl's
internal I<UTF-X> form.  Returns the number of octets necessary to
represent the string as I<UTF-X>.  Can be used to make sure that the
d85 4
a88 4
containing characters in the range 0x80-0xFF (oon ASCII and
derivatives).  Note that this should not be used to convert a legacy
byte encoding to Unicode: use Encode for that.  Affected by the
encoding pragma.
d90 1
a90 1
=item * $success = utf8::downgrade($string[, FAIL_OK])
d104 3
a106 4
sequence representing it in Perl's I<UTF-X> encoding.  Returns
nothing.  Same as Encode::encode_utf8(). Note that this should not be
used to convert a legacy byte encoding to Unicode: use Encode for
that.
d108 1
a108 1
=item * utf8::decode($string)
d111 3
a113 8
into logical characters. Returns nothing.  Same as Encode::decode_utf8().
Note that this should not be used to convert Unicode back to a legacy
byte encoding: use Encode for that.

=item * $flag = utf8::is_utf8(STRING)

(Since Perl 5.8.1)  Test whether STRING is in UTF-8.  Functionally
the same as Encode::is_utf8().
d117 5
a121 6
[INTERNAL] Test whether STRING is in a consistent state regarding
UTF-8.  Will return true is well-formed UTF-8 and has the UTF-8 flag
on B<or> if string is held as bytes (both these states are 'consistent').
Main reason for this routine is to allow Perl's testsuite to check
that operations have left strings in a consistent state.  You most
probably want to use utf8::is_utf8() instead.
d130 4
a133 4
C<utf8::decode>.  Note that in the Perl 5.8.0 and 5.8.1 implementation
the functions utf8::is_utf8, utf8::valid, utf8::encode, utf8::decode,
utf8::upgrade, and utf8::downgrade are always available, without a
C<require utf8> statement-- this may change in future releases.
d150 1
a150 1
L<perluniintro>, L<encoding>, L<perlrun>, L<bytes>, L<perlunicode>
@


1.1.1.5
log
@Import of stock perl 5.8.5
@
text
@d5 1
a5 1
our $VERSION = '1.04';
a33 1
    # Convert a Perl scalar to/from UTF-8.
a36 1
    # Change the native bytes of a Perl scalar to/from UTF-8 bytes.
d114 8
a121 13
Converts in-place the octet sequence in the native encoding
(Latin-1 or EBCDIC) to the equivalent character sequence in I<UTF-X>.
I<$string> already encoded as characters does no harm.
Returns the number of octets necessary to represent the string as I<UTF-X>.
Can be used to make sure that the UTF-8 flag is on,
so that C<\w> or C<lc()> work as Unicode on strings
containing characters in the range 0x80-0xFF (on ASCII and
derivatives).

B<Note that this function does not handle arbitrary encodings.>
Therefore I<Encode.pm> is recommended for the general purposes.

Affected by the encoding pragma.
d125 8
a132 16
Converts in-place the character sequence in I<UTF-X>
to the equivalent octet sequence in the native encoding (Latin-1 or EBCDIC).
I<$string> already encoded as octets does no harm.
Returns true on success. On failure dies or, if the value of
C<FAIL_OK> is true, returns false.
Can be used to make sure that the UTF-8 flag is off,
e.g. when you want to make sure that the substr() or length() function
works with the usually faster byte algorithm.

B<Note that this function does not handle arbitrary encodings.>
Therefore I<Encode.pm> is recommended for the general purposes.

B<Not> affected by the encoding pragma.

B<NOTE:> this function is experimental and may change
or be removed without notice.
d136 5
a140 5
Converts in-place the character sequence to the corresponding octet sequence
in I<UTF-X>.  The UTF-8 flag is turned off.  Returns nothing.

B<Note that this function does not handle arbitrary encodings.>
Therefore I<Encode.pm> is recommended for the general purposes.
d144 4
a147 10
Attempts to convert in-place the octet sequence in I<UTF-X>
to the corresponding character sequence.  The UTF-8 flag is turned on
only if the source string contains multiple-byte I<UTF-X> characters.
If I<$string> is invalid as I<UTF-X>, returns false; otherwise returns true.

B<Note that this function does not handle arbitrary encodings.>
Therefore I<Encode.pm> is recommended for the general purposes.

B<NOTE:> this function is experimental and may change
or be removed without notice.
@


1.1.1.6
log
@perl 5.8.8 import
@
text
@d5 1
a5 1
our $VERSION = '1.06';
a18 1
    require Carp;
d63 1
a63 1
pragma or the L<encoding> pragma should be used to recognize UTF-8
d95 1
a95 1
use the L<encoding> pragma instead of this pragma.  For example, if
@


1.1.1.7
log
@import perl 5.10.0 from CPAN
@
text
@d5 1
a5 1
our $VERSION = '1.07';
d53 5
d60 2
a61 1
directly usable without C<use utf8;>.
d63 6
a68 8
Because it is not possible to reliably tell UTF-8 from native 8 bit
encodings, you need either a Byte Order Mark at the beginning of your
source code, or C<use utf8;>, to instruct perl.

When UTF-8 becomes the standard source format, this pragma will
effectively become a no-op.  For convenience in what follows the term
I<UTF-X> is used to refer to UTF-8 on ASCII and ISO Latin based
platforms and UTF-EBCDIC on EBCDIC based platforms.
d80 1
a80 1
as being part of a literal UTF-X sequence.  This includes most
d92 14
a105 3
UTF-X.  If you want to have such bytes under C<use utf8>, you can disable
this pragma until the end the block (or file, if at top level) by
C<no utf8;>.
d117 1
a117 1
Converts in-place the internal octet sequence in the native encoding
d119 6
a124 5
I<$string> already encoded as characters does no harm.  Returns the
number of octets necessary to represent the string as I<UTF-X>.  Can be
used to make sure that the UTF-8 flag is on, so that C<\w> or C<lc()>
work as Unicode on strings containing characters in the range 0x80-0xFF
(on ASCII and derivatives).
d127 3
a129 2
Therefore Encode is recommended for the general purposes; see also
L<Encode>.
d133 8
a140 10
Converts in-place the internal octet sequence in I<UTF-X> to the
equivalent octet sequence in the native encoding (Latin-1 or EBCDIC).
I<$string> already encoded as native 8 bit does no harm.  Can be used to
make sure that the UTF-8 flag is off, e.g. when you want to make sure
that the substr() or length() function works with the usually faster
byte algorithm.

Fails if the original I<UTF-X> sequence cannot be represented in the
native 8 bit encoding. On failure dies or, if the value of C<FAIL_OK> is
true, returns false. 
d142 4
a145 1
Returns true on success.
d147 2
a148 3
B<Note that this function does not handle arbitrary encodings.>
Therefore Encode is recommended for the general purposes; see also
L<Encode>.
d152 2
a153 3
Converts in-place the character sequence to the corresponding octet
sequence in I<UTF-X>.  The UTF8 flag is turned off, so that after this
operation, the string is a byte string.  Returns nothing.
d156 1
a156 2
Therefore Encode is recommended for the general purposes; see also
L<Encode>.
d158 1
a158 1
=item * $success = utf8::decode($string)
d160 4
a163 5
Attempts to convert in-place the octet sequence in I<UTF-X> to the
corresponding character sequence.  The UTF-8 flag is turned on only if
the source string contains multiple-byte I<UTF-X> characters.  If
I<$string> is invalid as I<UTF-X>, returns false; otherwise returns
true.
d166 4
a169 2
Therefore Encode is recommended for the general purposes; see also
L<Encode>.
d173 2
a174 2
(Since Perl 5.8.1)  Test whether STRING is in UTF-8 internally.
Functionally the same as Encode::is_utf8().
d192 4
a195 4
C<utf8::decode>.  Also, the functions utf8::is_utf8, utf8::valid,
utf8::encode, utf8::decode, utf8::upgrade, and utf8::downgrade are
actually internal, and thus always available, without a C<require utf8>
statement.
d212 1
a212 1
L<perlunitut>, L<perluniintro>, L<perlrun>, L<bytes>, L<perlunicode>
@


1.1.1.8
log
@Perl 5.12.2 from CPAN
@
text
@d5 1
a5 1
our $VERSION = '1.08';
d35 1
a35 2
    # Convert the internal representation of a Perl scalar to/from UTF-8.

d39 3
a41 5
    # Change each character of a Perl scalar to/from a series of
    # characters that represent the UTF-8 bytes of each original character.

    utf8::encode($string);  # "\x{100}"  becomes "\xc4\x80"
    utf8::decode($string);  # "\xc4\x80" becomes "\x{100}"
d102 3
a104 4
Converts in-place the internal representation of the string from an octet
sequence in the native encoding (Latin-1 or EBCDIC) to I<UTF-X>. The
logical character sequence itself is unchanged.  If I<$string> is already
stored as I<UTF-X>, then this is a no-op. Returns the
d116 3
a118 5
Converts in-place the the internal representation of the string from
I<UTF-X> to the equivalent octet sequence in the native encoding (Latin-1
or EBCDIC). The logical character sequence itself is unchanged. If
I<$string> is already stored as native 8 bit, then this is a no-op.  Can
be used to
d136 2
a137 7
sequence in I<UTF-X>. That is, every (possibly wide) character gets
replaced with a sequence of one or more characters that represent the
individual I<UTF-X> bytes of the character.  The UTF8 flag is turned off.
Returns nothing.

    my $a = "\x{100}"; # $a contains one character, with ord 0x100
    utf8::encode($a);  # $a contains two characters, with ords 0xc4 and 0x80
d146 4
a149 9
corresponding character sequence. That is, it replaces each sequence of
characters in the string whose ords represent a valid UTF-X byte
sequence, with the corresponding single character.  The UTF-8 flag is
turned on only if the source string contains multiple-byte I<UTF-X>
characters.  If I<$string> is invalid as I<UTF-X>, returns false;
otherwise returns true.

    my $a = "\xc4\x80"; # $a contains two characters, with ords 0xc4 and 0x80
    utf8::decode($a);   # $a contains one character, with ord 0x100
@


1.1.1.9
log
@import perl 5.16.3 from CPAN - worked on by Andrew Fresh and myself
@
text
@d5 1
a5 1
our $VERSION = '1.09';
d120 1
a120 1
Converts in-place the internal representation of the string from
@


1.1.1.10
log
@Import perl-5.18.2

OK espie@@ sthen@@ deraadt@@
@
text
@d5 1
a5 1
our $VERSION = '1.10';
d173 1
a173 1
(Since Perl 5.8.1)  Test whether STRING is encoded internally in UTF-8.
d179 2
a180 2
UTF-8.  Will return true if it is well-formed UTF-8 and has the UTF-8 flag
on B<or> if STRING is held as bytes (both these states are 'consistent').
@


1.1.1.11
log
@Import perl-5.20.1
@
text
@d5 1
a5 1
our $VERSION = '1.13_01';
d9 1
d32 2
a33 2
 use utf8;
 no utf8;
d35 1
a35 1
 # Convert the internal representation of a Perl scalar to/from UTF-8.
d37 2
a38 2
 $num_octets = utf8::upgrade($string);
 $success    = utf8::downgrade($string[, $fail_ok]);
d40 2
a41 2
 # Change each character of a Perl scalar to/from a series of
 # characters that represent the UTF-8 bytes of each original character.
d43 2
a44 2
 utf8::encode($string);  # "\x{100}"  becomes "\xc4\x80"
 utf8::decode($string);  # "\xc4\x80" becomes "\x{100}"
d46 2
a47 2
 $flag = utf8::is_utf8($string); # since Perl 5.8.1
 $flag = utf8::valid($string);
d99 1
a99 1
you should not say that unless you really want to have UTF-8 source code.
d103 1
a103 1
=item * C<$num_octets = utf8::upgrade($string)>
d118 1
a118 1
=item * C<$success = utf8::downgrade($string[, $fail_ok])>
d130 1
a130 1
native 8 bit encoding. On failure dies or, if the value of I<$fail_ok> is
d139 1
a139 1
=item * C<utf8::encode($string)>
d147 2
a148 3
 my $a = "\x{100}"; # $a contains one character, with ord 0x100
 utf8::encode($a);  # $a contains two characters, with ords 0xc4 and
                    # 0x80
d154 1
a154 1
=item * C<$success = utf8::decode($string)>
d156 1
a156 1
Attempts to convert in-place the octet sequence encoded as I<UTF-X> to the
d164 1
a164 2
    my $a = "\xc4\x80"; # $a contains two characters, with ords
                        # 0xc4 and 0x80
d171 1
a171 1
=item * C<$flag = utf8::is_utf8($string)>
d173 2
a174 2
(Since Perl 5.8.1)  Test whether I<$string> is marked internally as encoded in
UTF-8.  Functionally the same as Encode::is_utf8().
d176 1
a176 1
=item * C<$flag = utf8::valid($string)>
d178 1
a178 1
[INTERNAL] Test whether I<$string> is in a consistent state regarding
d180 2
a181 2
on B<or> if I<$string> is held as bytes (both these states are 'consistent').
Main reason for this routine is to allow Perl's test suite to check
@


