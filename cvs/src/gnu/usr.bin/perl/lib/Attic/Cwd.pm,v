head	1.14;
access;
symbols
	OPENBSD_4_8:1.13.0.4
	OPENBSD_4_8_BASE:1.13
	OPENBSD_4_7:1.13.0.2
	OPENBSD_4_7_BASE:1.13
	PERL_5_10_1:1.1.1.12
	OPENBSD_4_6:1.12.0.6
	OPENBSD_4_6_BASE:1.12
	OPENBSD_4_5:1.12.0.2
	OPENBSD_4_5_BASE:1.12
	PERL_5_10_0:1.1.1.11
	OPENBSD_4_4:1.11.0.10
	OPENBSD_4_4_BASE:1.11
	OPENBSD_4_3:1.11.0.8
	OPENBSD_4_3_BASE:1.11
	OPENBSD_4_2:1.11.0.6
	OPENBSD_4_2_BASE:1.11
	OPENBSD_4_1:1.11.0.4
	OPENBSD_4_1_BASE:1.11
	OPENBSD_4_0:1.11.0.2
	OPENBSD_4_0_BASE:1.11
	PERL_5_8_8:1.1.1.10
	OPENBSD_3_9:1.10.0.6
	OPENBSD_3_9_BASE:1.10
	OPENBSD_3_8:1.10.0.4
	OPENBSD_3_8_BASE:1.10
	OPENBSD_3_7:1.10.0.2
	OPENBSD_3_7_BASE:1.10
	PERL_5_8_6:1.1.1.9
	OPENBSD_3_6:1.9.0.2
	OPENBSD_3_6_BASE:1.9
	PERL_5_8_5:1.1.1.8
	PERL_5_8_3:1.1.1.7
	OPENBSD_3_5:1.7.0.2
	OPENBSD_3_5_BASE:1.7
	PERL_5_8_2:1.1.1.6
	OPENBSD_3_4:1.6.0.4
	OPENBSD_3_4_BASE:1.6
	OPENBSD_3_3:1.6.0.2
	OPENBSD_3_3_BASE:1.6
	PERL_5_8_0:1.1.1.5
	OPENBSD_3_2:1.5.0.6
	OPENBSD_3_2_BASE:1.5
	OPENBSD_3_1:1.5.0.4
	OPENBSD_3_1_BASE:1.5
	OPENBSD_3_0:1.5.0.2
	OPENBSD_3_0_BASE:1.5
	PERL_5_6_1:1.1.1.4
	OPENBSD_2_9:1.4.0.6
	OPENBSD_2_9_BASE:1.4
	OPENBSD_2_8:1.4.0.4
	OPENBSD_2_8_BASE:1.4
	OPENBSD_2_7:1.4.0.2
	OPENBSD_2_7_BASE:1.4
	PERL_5_6_0:1.1.1.3
	OPENBSD_2_6:1.3.0.2
	OPENBSD_2_6_BASE:1.3
	PERL_500503:1.1.1.2
	CPAN:1.1.1
	OPENBSD_2_5:1.2.0.6
	OPENBSD_2_5_BASE:1.2
	OPENBSD_2_4:1.2.0.4
	OPENBSD_2_4_BASE:1.2
	OPENBSD_2_3:1.2.0.2
	OPENBSD_2_3_BASE:1.2
	OPENBSD_2_2:1.1.1.1.0.6
	OPENBSD_2_2_BASE:1.1.1.1
	OPENBSD_2_1:1.1.1.1.0.4
	OPENBSD_2_1_BASE:1.1.1.1
	OPENBSD_2_0:1.1.1.1.0.2
	OPENBSD_2_0_BASE:1.1.1.1
	perl5003:1.1.1.1
	lwall:1.1.1;
locks; strict;
comment	@# @;


1.14
date	2010.09.24.14.59.33;	author millert;	state dead;
branches;
next	1.13;

1.13
date	2009.10.12.18.24.37;	author millert;	state Exp;
branches;
next	1.12;

1.12
date	2008.09.29.17.36.09;	author millert;	state Exp;
branches;
next	1.11;

1.11
date	2006.03.28.19.23.05;	author millert;	state Exp;
branches;
next	1.10;

1.10
date	2005.01.15.21.30.31;	author millert;	state Exp;
branches;
next	1.9;

1.9
date	2004.08.09.18.09.28;	author millert;	state Exp;
branches;
next	1.8;

1.8
date	2004.04.07.21.33.04;	author millert;	state Exp;
branches;
next	1.7;

1.7
date	2003.12.03.03.02.35;	author millert;	state Exp;
branches;
next	1.6;

1.6
date	2002.10.27.22.25.25;	author millert;	state Exp;
branches;
next	1.5;

1.5
date	2001.05.24.18.35.23;	author millert;	state Exp;
branches;
next	1.4;

1.4
date	2000.04.06.17.06.04;	author millert;	state Exp;
branches;
next	1.3;

1.3
date	99.04.29.22.51.44;	author millert;	state Exp;
branches;
next	1.2;

1.2
date	97.11.30.07.56.40;	author millert;	state Exp;
branches;
next	1.1;

1.1
date	96.08.19.10.12.29;	author downsj;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	96.08.19.10.12.29;	author downsj;	state Exp;
branches;
next	1.1.1.2;

1.1.1.2
date	99.04.29.22.39.45;	author millert;	state Exp;
branches;
next	1.1.1.3;

1.1.1.3
date	2000.04.06.16.09.34;	author millert;	state Exp;
branches;
next	1.1.1.4;

1.1.1.4
date	2001.05.24.18.23.16;	author millert;	state Exp;
branches;
next	1.1.1.5;

1.1.1.5
date	2002.10.27.22.14.58;	author millert;	state Exp;
branches;
next	1.1.1.6;

1.1.1.6
date	2003.12.03.02.43.58;	author millert;	state Exp;
branches;
next	1.1.1.7;

1.1.1.7
date	2004.04.07.21.13.13;	author millert;	state Exp;
branches;
next	1.1.1.8;

1.1.1.8
date	2004.08.09.17.46.40;	author millert;	state Exp;
branches;
next	1.1.1.9;

1.1.1.9
date	2005.01.15.21.17.08;	author millert;	state Exp;
branches;
next	1.1.1.10;

1.1.1.10
date	2006.03.28.18.48.34;	author millert;	state Exp;
branches;
next	1.1.1.11;

1.1.1.11
date	2008.09.29.17.18.29;	author millert;	state Exp;
branches;
next	1.1.1.12;

1.1.1.12
date	2009.10.12.18.10.50;	author millert;	state Exp;
branches;
next	;


desc
@@


1.14
log
@remove files no longer in perl 5.12.2 (or that have moved)
@
text
@package Cwd;

=head1 NAME

Cwd - get pathname of current working directory

=head1 SYNOPSIS

    use Cwd;
    my $dir = getcwd;

    use Cwd 'abs_path';
    my $abs_path = abs_path($file);

=head1 DESCRIPTION

This module provides functions for determining the pathname of the
current working directory.  It is recommended that getcwd (or another
*cwd() function) be used in I<all> code to ensure portability.

By default, it exports the functions cwd(), getcwd(), fastcwd(), and
fastgetcwd() (and, on Win32, getdcwd()) into the caller's namespace.  


=head2 getcwd and friends

Each of these functions are called without arguments and return the
absolute path of the current working directory.

=over 4

=item getcwd

    my $cwd = getcwd();

Returns the current working directory.

Exposes the POSIX function getcwd(3) or re-implements it if it's not
available.

=item cwd

    my $cwd = cwd();

The cwd() is the most natural form for the current architecture. For
most systems it is identical to `pwd` (but without the trailing line
terminator).

=item fastcwd

    my $cwd = fastcwd();

A more dangerous version of getcwd(), but potentially faster.

It might conceivably chdir() you out of a directory that it can't
chdir() you back into.  If fastcwd encounters a problem it will return
undef but will probably leave you in a different directory.  For a
measure of extra security, if everything appears to have worked, the
fastcwd() function will check that it leaves you in the same directory
that it started in. If it has changed it will C<die> with the message
"Unstable directory path, current directory changed
unexpectedly". That should never happen.

=item fastgetcwd

  my $cwd = fastgetcwd();

The fastgetcwd() function is provided as a synonym for cwd().

=item getdcwd

    my $cwd = getdcwd();
    my $cwd = getdcwd('C:');

The getdcwd() function is also provided on Win32 to get the current working
directory on the specified drive, since Windows maintains a separate current
working directory for each drive.  If no drive is specified then the current
drive is assumed.

This function simply calls the Microsoft C library _getdcwd() function.

=back


=head2 abs_path and friends

These functions are exported only on request.  They each take a single
argument and return the absolute pathname for it.  If no argument is
given they'll use the current working directory.

=over 4

=item abs_path

  my $abs_path = abs_path($file);

Uses the same algorithm as getcwd().  Symbolic links and relative-path
components ("." and "..") are resolved to return the canonical
pathname, just like realpath(3).

=item realpath

  my $abs_path = realpath($file);

A synonym for abs_path().

=item fast_abs_path

  my $abs_path = fast_abs_path($file);

A more dangerous, but potentially faster version of abs_path.

=back

=head2 $ENV{PWD}

If you ask to override your chdir() built-in function, 

  use Cwd qw(chdir);

then your PWD environment variable will be kept up to date.  Note that
it will only be kept up to date if all packages which use chdir import
it from Cwd.


=head1 NOTES

=over 4

=item *

Since the path seperators are different on some operating systems ('/'
on Unix, ':' on MacPerl, etc...) we recommend you use the File::Spec
modules wherever portability is a concern.

=item *

Actually, on Mac OS, the C<getcwd()>, C<fastgetcwd()> and C<fastcwd()>
functions  are all aliases for the C<cwd()> function, which, on Mac OS,
calls `pwd`. Likewise, the C<abs_path()> function is an alias for
C<fast_abs_path()>.

=back

=head1 AUTHOR

Originally by the perl5-porters.

Maintained by Ken Williams <KWILLIAMS@@cpan.org>

=head1 COPYRIGHT

Copyright (c) 2004 by the Perl 5 Porters.  All rights reserved.

This program is free software; you can redistribute it and/or modify
it under the same terms as Perl itself.

Portions of the C code in this library are copyright (c) 1994 by the
Regents of the University of California.  All rights reserved.  The
license on this code is compatible with the licensing of the rest of
the distribution - please see the source code in F<Cwd.xs> for the
details.

=head1 SEE ALSO

L<File::chdir>

=cut

use strict;
use Exporter;
use vars qw(@@ISA @@EXPORT @@EXPORT_OK $VERSION);

$VERSION = '3.30';
my $xs_version = $VERSION;
$VERSION = eval $VERSION;

@@ISA = qw/ Exporter /;
@@EXPORT = qw(cwd getcwd fastcwd fastgetcwd);
push @@EXPORT, qw(getdcwd) if $^O eq 'MSWin32';
@@EXPORT_OK = qw(chdir abs_path fast_abs_path realpath fast_realpath);

# sys_cwd may keep the builtin command

# All the functionality of this module may provided by builtins,
# there is no sense to process the rest of the file.
# The best choice may be to have this in BEGIN, but how to return from BEGIN?

if ($^O eq 'os2') {
    local $^W = 0;

    *cwd                = defined &sys_cwd ? \&sys_cwd : \&_os2_cwd;
    *getcwd             = \&cwd;
    *fastgetcwd         = \&cwd;
    *fastcwd            = \&cwd;

    *fast_abs_path      = \&sys_abspath if defined &sys_abspath;
    *abs_path           = \&fast_abs_path;
    *realpath           = \&fast_abs_path;
    *fast_realpath      = \&fast_abs_path;

    return 1;
}

# Need to look up the feature settings on VMS.  The preferred way is to use the
# VMS::Feature module, but that may not be available to dual life modules.

my $use_vms_feature;
BEGIN {
    if ($^O eq 'VMS') {
        if (eval { local $SIG{__DIE__}; require VMS::Feature; }) {
            $use_vms_feature = 1;
        }
    }
}

# Need to look up the UNIX report mode.  This may become a dynamic mode
# in the future.
sub _vms_unix_rpt {
    my $unix_rpt;
    if ($use_vms_feature) {
        $unix_rpt = VMS::Feature::current("filename_unix_report");
    } else {
        my $env_unix_rpt = $ENV{'DECC$FILENAME_UNIX_REPORT'} || '';
        $unix_rpt = $env_unix_rpt =~ /^[ET1]/i; 
    }
    return $unix_rpt;
}

# Need to look up the EFS character set mode.  This may become a dynamic
# mode in the future.
sub _vms_efs {
    my $efs;
    if ($use_vms_feature) {
        $efs = VMS::Feature::current("efs_charset");
    } else {
        my $env_efs = $ENV{'DECC$EFS_CHARSET'} || '';
        $efs = $env_efs =~ /^[ET1]/i; 
    }
    return $efs;
}


# If loading the XS stuff doesn't work, we can fall back to pure perl
eval {
  if ( $] >= 5.006 ) {
    require XSLoader;
    XSLoader::load( __PACKAGE__, $xs_version);
  } else {
    require DynaLoader;
    push @@ISA, 'DynaLoader';
    __PACKAGE__->bootstrap( $xs_version );
  }
};

# Must be after the DynaLoader stuff:
$VERSION = eval $VERSION;

# Big nasty table of function aliases
my %METHOD_MAP =
  (
   VMS =>
   {
    cwd			=> '_vms_cwd',
    getcwd		=> '_vms_cwd',
    fastcwd		=> '_vms_cwd',
    fastgetcwd		=> '_vms_cwd',
    abs_path		=> '_vms_abs_path',
    fast_abs_path	=> '_vms_abs_path',
   },

   MSWin32 =>
   {
    # We assume that &_NT_cwd is defined as an XSUB or in the core.
    cwd			=> '_NT_cwd',
    getcwd		=> '_NT_cwd',
    fastcwd		=> '_NT_cwd',
    fastgetcwd		=> '_NT_cwd',
    abs_path		=> 'fast_abs_path',
    realpath		=> 'fast_abs_path',
   },

   dos => 
   {
    cwd			=> '_dos_cwd',
    getcwd		=> '_dos_cwd',
    fastgetcwd		=> '_dos_cwd',
    fastcwd		=> '_dos_cwd',
    abs_path		=> 'fast_abs_path',
   },

   # QNX4.  QNX6 has a $os of 'nto'.
   qnx =>
   {
    cwd			=> '_qnx_cwd',
    getcwd		=> '_qnx_cwd',
    fastgetcwd		=> '_qnx_cwd',
    fastcwd		=> '_qnx_cwd',
    abs_path		=> '_qnx_abs_path',
    fast_abs_path	=> '_qnx_abs_path',
   },

   cygwin =>
   {
    getcwd		=> 'cwd',
    fastgetcwd		=> 'cwd',
    fastcwd		=> 'cwd',
    abs_path		=> 'fast_abs_path',
    realpath		=> 'fast_abs_path',
   },

   epoc =>
   {
    cwd			=> '_epoc_cwd',
    getcwd	        => '_epoc_cwd',
    fastgetcwd		=> '_epoc_cwd',
    fastcwd		=> '_epoc_cwd',
    abs_path		=> 'fast_abs_path',
   },

   MacOS =>
   {
    getcwd		=> 'cwd',
    fastgetcwd		=> 'cwd',
    fastcwd		=> 'cwd',
    abs_path		=> 'fast_abs_path',
   },
  );

$METHOD_MAP{NT} = $METHOD_MAP{MSWin32};


# Find the pwd command in the expected locations.  We assume these
# are safe.  This prevents _backtick_pwd() consulting $ENV{PATH}
# so everything works under taint mode.
my $pwd_cmd;
foreach my $try ('/bin/pwd',
		 '/usr/bin/pwd',
		 '/QOpenSys/bin/pwd', # OS/400 PASE.
		) {

    if( -x $try ) {
        $pwd_cmd = $try;
        last;
    }
}
my $found_pwd_cmd = defined($pwd_cmd);
unless ($pwd_cmd) {
    # Isn't this wrong?  _backtick_pwd() will fail if somenone has
    # pwd in their path but it is not /bin/pwd or /usr/bin/pwd?
    # See [perl #16774]. --jhi
    $pwd_cmd = 'pwd';
}

# Lazy-load Carp
sub _carp  { require Carp; Carp::carp(@@_)  }
sub _croak { require Carp; Carp::croak(@@_) }

# The 'natural and safe form' for UNIX (pwd may be setuid root)
sub _backtick_pwd {
    # Localize %ENV entries in a way that won't create new hash keys
    my @@localize = grep exists $ENV{$_}, qw(PATH IFS CDPATH ENV BASH_ENV);
    local @@ENV{@@localize};
    
    my $cwd = `$pwd_cmd`;
    # Belt-and-suspenders in case someone said "undef $/".
    local $/ = "\n";
    # `pwd` may fail e.g. if the disk is full
    chomp($cwd) if defined $cwd;
    $cwd;
}

# Since some ports may predefine cwd internally (e.g., NT)
# we take care not to override an existing definition for cwd().

unless ($METHOD_MAP{$^O}{cwd} or defined &cwd) {
    # The pwd command is not available in some chroot(2)'ed environments
    my $sep = $Config::Config{path_sep} || ':';
    my $os = $^O;  # Protect $^O from tainting


    # Try again to find a pwd, this time searching the whole PATH.
    if (defined $ENV{PATH} and $os ne 'MSWin32') {  # no pwd on Windows
	my @@candidates = split($sep, $ENV{PATH});
	while (!$found_pwd_cmd and @@candidates) {
	    my $candidate = shift @@candidates;
	    $found_pwd_cmd = 1 if -x "$candidate/pwd";
	}
    }

    # MacOS has some special magic to make `pwd` work.
    if( $os eq 'MacOS' || $found_pwd_cmd )
    {
	*cwd = \&_backtick_pwd;
    }
    else {
	*cwd = \&getcwd;
    }
}

if ($^O eq 'cygwin') {
  # We need to make sure cwd() is called with no args, because it's
  # got an arg-less prototype and will die if args are present.
  local $^W = 0;
  my $orig_cwd = \&cwd;
  *cwd = sub { &$orig_cwd() }
}


# set a reasonable (and very safe) default for fastgetcwd, in case it
# isn't redefined later (20001212 rspier)
*fastgetcwd = \&cwd;

# A non-XS version of getcwd() - also used to bootstrap the perl build
# process, when miniperl is running and no XS loading happens.
sub _perl_getcwd
{
    abs_path('.');
}

# By John Bazik
#
# Usage: $cwd = &fastcwd;
#
# This is a faster version of getcwd.  It's also more dangerous because
# you might chdir out of a directory that you can't chdir back into.
    
sub fastcwd_ {
    my($odev, $oino, $cdev, $cino, $tdev, $tino);
    my(@@path, $path);
    local(*DIR);

    my($orig_cdev, $orig_cino) = stat('.');
    ($cdev, $cino) = ($orig_cdev, $orig_cino);
    for (;;) {
	my $direntry;
	($odev, $oino) = ($cdev, $cino);
	CORE::chdir('..') || return undef;
	($cdev, $cino) = stat('.');
	last if $odev == $cdev && $oino == $cino;
	opendir(DIR, '.') || return undef;
	for (;;) {
	    $direntry = readdir(DIR);
	    last unless defined $direntry;
	    next if $direntry eq '.';
	    next if $direntry eq '..';

	    ($tdev, $tino) = lstat($direntry);
	    last unless $tdev != $odev || $tino != $oino;
	}
	closedir(DIR);
	return undef unless defined $direntry; # should never happen
	unshift(@@path, $direntry);
    }
    $path = '/' . join('/', @@path);
    if ($^O eq 'apollo') { $path = "/".$path; }
    # At this point $path may be tainted (if tainting) and chdir would fail.
    # Untaint it then check that we landed where we started.
    $path =~ /^(.*)\z/s		# untaint
	&& CORE::chdir($1) or return undef;
    ($cdev, $cino) = stat('.');
    die "Unstable directory path, current directory changed unexpectedly"
	if $cdev != $orig_cdev || $cino != $orig_cino;
    $path;
}
if (not defined &fastcwd) { *fastcwd = \&fastcwd_ }


# Keeps track of current working directory in PWD environment var
# Usage:
#	use Cwd 'chdir';
#	chdir $newdir;

my $chdir_init = 0;

sub chdir_init {
    if ($ENV{'PWD'} and $^O ne 'os2' and $^O ne 'dos' and $^O ne 'MSWin32') {
	my($dd,$di) = stat('.');
	my($pd,$pi) = stat($ENV{'PWD'});
	if (!defined $dd or !defined $pd or $di != $pi or $dd != $pd) {
	    $ENV{'PWD'} = cwd();
	}
    }
    else {
	my $wd = cwd();
	$wd = Win32::GetFullPathName($wd) if $^O eq 'MSWin32';
	$ENV{'PWD'} = $wd;
    }
    # Strip an automounter prefix (where /tmp_mnt/foo/bar == /foo/bar)
    if ($^O ne 'MSWin32' and $ENV{'PWD'} =~ m|(/[^/]+(/[^/]+/[^/]+))(.*)|s) {
	my($pd,$pi) = stat($2);
	my($dd,$di) = stat($1);
	if (defined $pd and defined $dd and $di == $pi and $dd == $pd) {
	    $ENV{'PWD'}="$2$3";
	}
    }
    $chdir_init = 1;
}

sub chdir {
    my $newdir = @@_ ? shift : '';	# allow for no arg (chdir to HOME dir)
    $newdir =~ s|///*|/|g unless $^O eq 'MSWin32';
    chdir_init() unless $chdir_init;
    my $newpwd;
    if ($^O eq 'MSWin32') {
	# get the full path name *before* the chdir()
	$newpwd = Win32::GetFullPathName($newdir);
    }

    return 0 unless CORE::chdir $newdir;

    if ($^O eq 'VMS') {
	return $ENV{'PWD'} = $ENV{'DEFAULT'}
    }
    elsif ($^O eq 'MacOS') {
	return $ENV{'PWD'} = cwd();
    }
    elsif ($^O eq 'MSWin32') {
	$ENV{'PWD'} = $newpwd;
	return 1;
    }

    if (ref $newdir eq 'GLOB') { # in case a file/dir handle is passed in
	$ENV{'PWD'} = cwd();
    } elsif ($newdir =~ m#^/#s) {
	$ENV{'PWD'} = $newdir;
    } else {
	my @@curdir = split(m#/#,$ENV{'PWD'});
	@@curdir = ('') unless @@curdir;
	my $component;
	foreach $component (split(m#/#, $newdir)) {
	    next if $component eq '.';
	    pop(@@curdir),next if $component eq '..';
	    push(@@curdir,$component);
	}
	$ENV{'PWD'} = join('/',@@curdir) || '/';
    }
    1;
}


sub _perl_abs_path
{
    my $start = @@_ ? shift : '.';
    my($dotdots, $cwd, @@pst, @@cst, $dir, @@tst);

    unless (@@cst = stat( $start ))
    {
	_carp("stat($start): $!");
	return '';
    }

    unless (-d _) {
        # Make sure we can be invoked on plain files, not just directories.
        # NOTE that this routine assumes that '/' is the only directory separator.
	
        my ($dir, $file) = $start =~ m{^(.*)/(.+)$}
	    or return cwd() . '/' . $start;
	
	# Can't use "-l _" here, because the previous stat was a stat(), not an lstat().
	if (-l $start) {
	    my $link_target = readlink($start);
	    die "Can't resolve link $start: $!" unless defined $link_target;
	    
	    require File::Spec;
            $link_target = $dir . '/' . $link_target
                unless File::Spec->file_name_is_absolute($link_target);
	    
	    return abs_path($link_target);
	}
	
	return $dir ? abs_path($dir) . "/$file" : "/$file";
    }

    $cwd = '';
    $dotdots = $start;
    do
    {
	$dotdots .= '/..';
	@@pst = @@cst;
	local *PARENT;
	unless (opendir(PARENT, $dotdots))
	{
	    # probably a permissions issue.  Try the native command.
	    return File::Spec->rel2abs( $start, _backtick_pwd() );
	}
	unless (@@cst = stat($dotdots))
	{
	    _carp("stat($dotdots): $!");
	    closedir(PARENT);
	    return '';
	}
	if ($pst[0] == $cst[0] && $pst[1] == $cst[1])
	{
	    $dir = undef;
	}
	else
	{
	    do
	    {
		unless (defined ($dir = readdir(PARENT)))
	        {
		    _carp("readdir($dotdots): $!");
		    closedir(PARENT);
		    return '';
		}
		$tst[0] = $pst[0]+1 unless (@@tst = lstat("$dotdots/$dir"))
	    }
	    while ($dir eq '.' || $dir eq '..' || $tst[0] != $pst[0] ||
		   $tst[1] != $pst[1]);
	}
	$cwd = (defined $dir ? "$dir" : "" ) . "/$cwd" ;
	closedir(PARENT);
    } while (defined $dir);
    chop($cwd) unless $cwd eq '/'; # drop the trailing /
    $cwd;
}


my $Curdir;
sub fast_abs_path {
    local $ENV{PWD} = $ENV{PWD} || ''; # Guard against clobberage
    my $cwd = getcwd();
    require File::Spec;
    my $path = @@_ ? shift : ($Curdir ||= File::Spec->curdir);

    # Detaint else we'll explode in taint mode.  This is safe because
    # we're not doing anything dangerous with it.
    ($path) = $path =~ /(.*)/;
    ($cwd)  = $cwd  =~ /(.*)/;

    unless (-e $path) {
 	_croak("$path: No such file or directory");
    }

    unless (-d _) {
        # Make sure we can be invoked on plain files, not just directories.
	
	my ($vol, $dir, $file) = File::Spec->splitpath($path);
	return File::Spec->catfile($cwd, $path) unless length $dir;

	if (-l $path) {
	    my $link_target = readlink($path);
	    die "Can't resolve link $path: $!" unless defined $link_target;
	    
	    $link_target = File::Spec->catpath($vol, $dir, $link_target)
                unless File::Spec->file_name_is_absolute($link_target);
	    
	    return fast_abs_path($link_target);
	}
	
	return $dir eq File::Spec->rootdir
	  ? File::Spec->catpath($vol, $dir, $file)
	  : fast_abs_path(File::Spec->catpath($vol, $dir, '')) . '/' . $file;
    }

    if (!CORE::chdir($path)) {
 	_croak("Cannot chdir to $path: $!");
    }
    my $realpath = getcwd();
    if (! ((-d $cwd) && (CORE::chdir($cwd)))) {
 	_croak("Cannot chdir back to $cwd: $!");
    }
    $realpath;
}

# added function alias to follow principle of least surprise
# based on previous aliasing.  --tchrist 27-Jan-00
*fast_realpath = \&fast_abs_path;


# --- PORTING SECTION ---

# VMS: $ENV{'DEFAULT'} points to default directory at all times
# 06-Mar-1996  Charles Bailey  bailey@@newman.upenn.edu
# Note: Use of Cwd::chdir() causes the logical name PWD to be defined
#   in the process logical name table as the default device and directory
#   seen by Perl. This may not be the same as the default device
#   and directory seen by DCL after Perl exits, since the effects
#   the CRTL chdir() function persist only until Perl exits.

sub _vms_cwd {
    return $ENV{'DEFAULT'};
}

sub _vms_abs_path {
    return $ENV{'DEFAULT'} unless @@_;
    my $path = shift;

    my $efs = _vms_efs;
    my $unix_rpt = _vms_unix_rpt;

    if (defined &VMS::Filespec::vmsrealpath) {
        my $path_unix = 0;
        my $path_vms = 0;

        $path_unix = 1 if ($path =~ m#(?<=\^)/#);
        $path_unix = 1 if ($path =~ /^\.\.?$/);
        $path_vms = 1 if ($path =~ m#[\[<\]]#);
        $path_vms = 1 if ($path =~ /^--?$/);

        my $unix_mode = $path_unix;
        if ($efs) {
            # In case of a tie, the Unix report mode decides.
            if ($path_vms == $path_unix) {
                $unix_mode = $unix_rpt;
            } else {
                $unix_mode = 0 if $path_vms;
            }
        }

        if ($unix_mode) {
            # Unix format
            return VMS::Filespec::unixrealpath($path);
        }

	# VMS format

	my $new_path = VMS::Filespec::vmsrealpath($path);

	# Perl expects directories to be in directory format
	$new_path = VMS::Filespec::pathify($new_path) if -d $path;
	return $new_path;
    }

    # Fallback to older algorithm if correct ones are not
    # available.

    if (-l $path) {
        my $link_target = readlink($path);
        die "Can't resolve link $path: $!" unless defined $link_target;

        return _vms_abs_path($link_target);
    }

    # may need to turn foo.dir into [.foo]
    my $pathified = VMS::Filespec::pathify($path);
    $path = $pathified if defined $pathified;
	
    return VMS::Filespec::rmsexpand($path);
}

sub _os2_cwd {
    $ENV{'PWD'} = `cmd /c cd`;
    chomp $ENV{'PWD'};
    $ENV{'PWD'} =~ s:\\:/:g ;
    return $ENV{'PWD'};
}

sub _win32_cwd {
    if (defined &DynaLoader::boot_DynaLoader) {
	$ENV{'PWD'} = Win32::GetCwd();
    }
    else { # miniperl
	chomp($ENV{'PWD'} = `cd`);
    }
    $ENV{'PWD'} =~ s:\\:/:g ;
    return $ENV{'PWD'};
}

*_NT_cwd = defined &Win32::GetCwd ? \&_win32_cwd : \&_os2_cwd;

sub _dos_cwd {
    if (!defined &Dos::GetCwd) {
        $ENV{'PWD'} = `command /c cd`;
        chomp $ENV{'PWD'};
        $ENV{'PWD'} =~ s:\\:/:g ;
    } else {
        $ENV{'PWD'} = Dos::GetCwd();
    }
    return $ENV{'PWD'};
}

sub _qnx_cwd {
	local $ENV{PATH} = '';
	local $ENV{CDPATH} = '';
	local $ENV{ENV} = '';
    $ENV{'PWD'} = `/usr/bin/fullpath -t`;
    chomp $ENV{'PWD'};
    return $ENV{'PWD'};
}

sub _qnx_abs_path {
	local $ENV{PATH} = '';
	local $ENV{CDPATH} = '';
	local $ENV{ENV} = '';
    my $path = @@_ ? shift : '.';
    local *REALPATH;

    defined( open(REALPATH, '-|') || exec '/usr/bin/fullpath', '-t', $path ) or
      die "Can't open /usr/bin/fullpath: $!";
    my $realpath = <REALPATH>;
    close REALPATH;
    chomp $realpath;
    return $realpath;
}

sub _epoc_cwd {
    $ENV{'PWD'} = EPOC::getcwd();
    return $ENV{'PWD'};
}


# Now that all the base-level functions are set up, alias the
# user-level functions to the right places

if (exists $METHOD_MAP{$^O}) {
  my $map = $METHOD_MAP{$^O};
  foreach my $name (keys %$map) {
    local $^W = 0;  # assignments trigger 'subroutine redefined' warning
    no strict 'refs';
    *{$name} = \&{$map->{$name}};
  }
}

# In case the XS version doesn't load.
*abs_path = \&_perl_abs_path unless defined &abs_path;
*getcwd = \&_perl_getcwd unless defined &getcwd;

# added function alias for those of us more
# used to the libc function.  --tchrist 27-Jan-00
*realpath = \&abs_path;

1;
@


1.13
log
@Merge in perl 5.10.1
@
text
@@


1.12
log
@fix conflicts and merge in local changes to perl 5.10.0
@
text
@d174 3
a176 1
$VERSION = '3.2501';
d205 39
d248 1
a248 1
    XSLoader::load( __PACKAGE__, $VERSION );
d252 1
a252 1
    __PACKAGE__->bootstrap( $VERSION );
d292 1
a330 1
$METHOD_MAP{nto} = $METHOD_MAP{qnx};
d584 2
a585 2
	    _carp("opendir($dotdots): $!");
	    return '';
d690 39
d732 1
a732 1
	    
@


1.11
log
@merge in perl 5.8.8
@
text
@d38 2
a39 1
Re-implements the getcwd(3) (or getwd(3)) functions in Perl.
d174 1
a174 1
$VERSION = '3.12';
d306 1
d339 13
a351 3
    if( $os eq 'MacOS' || (defined $ENV{PATH} &&
			   $os ne 'MSWin32' &&  # no pwd on Windows
			   grep { -x "$_/pwd" } split($sep, $ENV{PATH})) )
d360 9
d373 3
a375 5
# By Brandon S. Allbery
#
# Usage: $cwd = getcwd();

sub getcwd
a379 1

d482 3
a484 1
    if ($newdir =~ m#^/#s) {
d647 8
d657 3
a659 3
    my $path = VMS::Filespec::pathify($_[0]);
    $path = $_[0] unless defined $path;

d671 6
a676 1
    $ENV{'PWD'} = Win32::GetCwd();
d738 1
@


1.10
log
@sync in-tree perl with 5.8.6
@
text
@a1 1
$VERSION = $VERSION = '3.01';
d150 13
d171 3
a173 1
use vars qw(@@ISA @@EXPORT @@EXPORT_OK);
d202 1
d204 1
d206 6
a211 2
    local $^W = 0;
    XSLoader::load('Cwd');
d214 3
d318 4
a321 1
    local @@ENV{qw(PATH IFS CDPATH ENV BASH_ENV)};
d336 3
a338 1
    if( $^O eq 'MacOS' || (defined $ENV{PATH} &&
d369 1
a369 1
sub fastcwd {
d407 1
d481 1
a481 3
# In case the XS version doesn't load.
*abs_path = \&_perl_abs_path unless defined &abs_path;
sub _perl_abs_path(;$)
d511 1
a511 1
	return abs_path($dir) . '/' . $file;
a558 4
# added function alias for those of us more
# used to the libc function.  --tchrist 27-Jan-00
*realpath = \&abs_path;

d561 1
d591 3
a593 1
	return fast_abs_path(File::Spec->catpath($vol, $dir, '')) . '/' . $file;
d648 1
a648 4
*_NT_cwd = \&_win32_cwd if (!defined &_NT_cwd && 
                            defined &Win32::GetCwd);

*_NT_cwd = \&_os2_cwd unless defined &_NT_cwd;
d677 1
a677 1
    open(REALPATH, '-|', '/usr/bin/fullpath', '-t', $path) or
d697 1
a697 1
    no warnings;	# assignments trigger 'subroutine redefined' warning
d703 6
@


1.9
log
@merge 5.8.5 into HEAD
remove now-unused files
crank libperl shared library major number
update Makefile.bsd-wrapper
tweak openbsd hints file for arm and m68k
@
text
@d2 1
a2 1
$VERSION = $VERSION = '2.19';
d472 2
a473 1
	if (-l _) {
@


1.8
log
@merge local changes into perl-5.8.3
@
text
@d2 1
d23 1
a23 1
fastgetcwd() into the caller's namespace.  
d70 12
d145 6
d159 1
a159 3
use vars qw($VERSION @@ISA @@EXPORT @@EXPORT_OK);

$VERSION = '2.12';
d163 1
d194 73
d272 5
a276 1
foreach my $try (qw(/bin/pwd /usr/bin/pwd)) {
d283 4
a286 8
    if (-x '/QOpenSys/bin/pwd') { # OS/400 PASE.
        $pwd_cmd = '/QOpenSys/bin/pwd' ;
    } else {
        # Isn't this wrong?  _backtick_pwd() will fail if somenone has
        # pwd in their path but it is not /bin/pwd or /usr/bin/pwd?
        # See [perl #16774]. --jhi
        $pwd_cmd = 'pwd';
    }
d307 1
a307 1
unless(defined &cwd) {
d309 3
a311 2
    if( $^O eq 'MacOS' || (defined $ENV{PATH} && 
                           grep { -x "$_/pwd" } split(':', $ENV{PATH})) ) 
d454 1
a454 1
sub _perl_abs_path
d464 22
d546 23
d600 2
d603 2
a604 4
    if (! defined $path)
	{
	_croak("Invalid path name $_[0]")
	}
d666 7
a672 1
{
d674 3
a676 53

    if ($^O eq 'VMS') {
        *cwd		= \&_vms_cwd;
        *getcwd		= \&_vms_cwd;
        *fastcwd	= \&_vms_cwd;
        *fastgetcwd	= \&_vms_cwd;
        *abs_path	= \&_vms_abs_path;
        *fast_abs_path	= \&_vms_abs_path;
    }
    elsif ($^O eq 'NT' or $^O eq 'MSWin32') {
        # We assume that &_NT_cwd is defined as an XSUB or in the core.
        *cwd		= \&_NT_cwd;
        *getcwd		= \&_NT_cwd;
        *fastcwd	= \&_NT_cwd;
        *fastgetcwd	= \&_NT_cwd;
        *abs_path	= \&fast_abs_path;
        *realpath   = \&fast_abs_path;
    }
    elsif ($^O eq 'dos') {
        *cwd		= \&_dos_cwd;
        *getcwd		= \&_dos_cwd;
        *fastgetcwd	= \&_dos_cwd;
        *fastcwd	= \&_dos_cwd;
        *abs_path	= \&fast_abs_path;
    }
    elsif ($^O =~ m/^(?:qnx|nto)$/ ) {
        *cwd		= \&_qnx_cwd;
        *getcwd		= \&_qnx_cwd;
        *fastgetcwd	= \&_qnx_cwd;
        *fastcwd	= \&_qnx_cwd;
        *abs_path	= \&_qnx_abs_path;
        *fast_abs_path	= \&_qnx_abs_path;
    }
    elsif ($^O eq 'cygwin') {
        *getcwd	= \&cwd;
        *fastgetcwd	= \&cwd;
        *fastcwd	= \&cwd;
        *abs_path	= \&fast_abs_path;
        *realpath	= \&abs_path;
    }
    elsif ($^O eq 'epoc') {
        *cwd            = \&_epoc_cwd;
        *getcwd	        = \&_epoc_cwd;
        *fastgetcwd	= \&_epoc_cwd;
        *fastcwd	= \&_epoc_cwd;
        *abs_path	= \&fast_abs_path;
    }
    elsif ($^O eq 'MacOS') {
    	*getcwd     = \&cwd;
    	*fastgetcwd = \&cwd;
    	*fastcwd    = \&cwd;
    	*abs_path   = \&fast_abs_path;
    }
@


1.7
log
@Resolve conflicts for perl 5.8.2, remove old files, and add OpenBSD-specific scaffolding
@
text
@a1 1
use 5.006;
d139 2
d142 1
a142 1
our $VERSION = '2.08';
d144 3
a146 3
use base qw/ Exporter /;
our @@EXPORT = qw(cwd getcwd fastcwd fastgetcwd);
our @@EXPORT_OK = qw(chdir abs_path fast_abs_path realpath fast_realpath);
d154 1
a154 1
if ($^O eq 'os2' && defined &sys_cwd && defined &sys_abspath) {
d156 11
a166 8
    *cwd		= \&sys_cwd;
    *getcwd		= \&cwd;
    *fastgetcwd		= \&cwd;
    *fastcwd		= \&cwd;
    *abs_path		= \&sys_abspath;
    *fast_abs_path	= \&abs_path;
    *realpath		= \&abs_path;
    *fast_realpath	= \&abs_path;
d198 4
d369 1
a369 2
	require Carp;
	Carp::carp ("stat($start): $!");
d381 1
a381 2
	    require Carp;
	    Carp::carp ("opendir($dotdots): $!");
d386 1
a386 2
	    require Carp;
	    Carp::carp ("stat($dotdots): $!");
d400 1
a400 2
		    require Carp;
		    Carp::carp ("readdir($dotdots): $!");
d433 1
a433 2
 	require Carp;
 	Carp::croak ("Cannot chdir to $path: $!");
d437 1
a437 2
 	require Carp;
 	Carp::croak ("Cannot chdir back to $cwd: $!");
d466 1
a466 2
	require Carp;
	Carp::croak("Invalid path name $_[0]")
a548 8
    elsif ($^O eq 'os2') {
        # sys_cwd may keep the builtin command
        *cwd		= defined &sys_cwd ? \&sys_cwd : \&_os2_cwd;
        *getcwd		= \&cwd;
        *fastgetcwd	= \&cwd;
        *fastcwd	= \&cwd;
        *abs_path	= \&fast_abs_path;
    }
d569 1
@


1.6
log
@Resolve conflicts, remove old files, merge local changes
@
text
@a40 2
Taint-safe.

a48 2
Taint-safe.

d76 2
a77 1
argument and return the absolute pathname for it.
a88 2
Taint-safe.

a94 2
Taint-safe.

a100 3
This function is B<Not> taint-safe : you can't use it in programs
that work under taint mode.

d141 1
a141 3
use Carp;

our $VERSION = '2.06';
d168 1
a168 1
    undef *Cwd::fastcwd; # avoid redefinition warning
d183 10
a192 1
$pwd_cmd ||= 'pwd';
d361 2
a362 1
	carp "stat($start): $!";
d371 1
d374 2
a375 1
	    carp "opendir($dotdots): $!";
d380 2
a381 1
	    carp "stat($dotdots): $!";
d395 2
a396 1
		    carp "readdir($dotdots): $!";
d417 1
d421 11
a431 2
    my $path = @@_ ? shift : File::Spec->curdir;
    CORE::chdir($path) || croak "Cannot chdir to $path: $!";
d433 4
a436 2
    -d $cwd && CORE::chdir($cwd) ||
	croak "Cannot chdir back to $cwd: $!";
d462 5
a466 1
    croak("Invalid path name $_[0]") unless defined $path;
d472 1
a472 1
    chop $ENV{'PWD'};
d491 1
a491 1
        chop $ENV{'PWD'};
d504 1
a504 1
    chop $ENV{'PWD'};
d513 7
a519 2
    my $realpath=`/usr/bin/fullpath -t $path`;
    chop $realpath;
@


1.5
log
@merge in perl 5.6.1 with our local changes
@
text
@d2 1
a2 1
require 5.000;
d11 1
a11 1
    $dir = cwd;
d13 37
a49 2
    use Cwd;
    $dir = getcwd;
d51 1
a51 2
    use Cwd;
    $dir = fastcwd;
d53 1
a53 2
    use Cwd;
    $dir = fastgetcwd;
d55 1
a55 3
    use Cwd 'chdir';
    chdir "/tmp";
    print $ENV{'PWD'};
d57 1
a57 2
    use Cwd 'abs_path';	    # aka realpath()
    print abs_path($ENV{'PWD'});
d59 8
a66 2
    use Cwd 'fast_abs_path';
    print fast_abs_path($ENV{'PWD'});
d68 1
a68 1
=head1 DESCRIPTION
d70 1
a70 24
This module provides functions for determining the pathname of the
current working directory.  By default, it exports the functions
cwd(), getcwd(), fastcwd(), and fastgetcwd() into the caller's
namespace.  Each of these functions are called without arguments and
return the absolute path of the current working directory.  It is
recommended that cwd (or another *cwd() function) be used in I<all>
code to ensure portability.

The cwd() is the most natural and safe form for the current
architecture. For most systems it is identical to `pwd` (but without
the trailing line terminator).

The getcwd() function re-implements the getcwd(3) (or getwd(3)) functions
in Perl.

The fastcwd() function looks the same as getcwd(), but runs faster.
It's also more dangerous because it might conceivably chdir() you out
of a directory that it can't chdir() you back into.  If fastcwd
encounters a problem it will return undef but will probably leave you
in a different directory.  For a measure of extra security, if
everything appears to have worked, the fastcwd() function will check
that it leaves you in the same directory that it started in. If it has
changed it will C<die> with the message "Unstable directory path,
current directory changed unexpectedly". That should never happen.
d74 72
a145 14
The abs_path() function takes a single argument and returns the
absolute pathname for that argument.  It uses the same algorithm as
getcwd().  (Actually, getcwd() is abs_path("."))  Symbolic links and
relative-path components ("." and "..") are resolved to return the
canonical pathname, just like realpath(3).  This function is also
callable as realpath().

The fast_abs_path() function looks the same as abs_path() but runs
faster and, like fastcwd(), is more dangerous.

If you ask to override your chdir() built-in function, then your PWD
environment variable will be kept up to date.  (See
L<perlsub/Overriding Builtin Functions>.) Note that it will only be
kept up to date if all packages which use chdir import it from Cwd.
d153 1
a153 1
our $VERSION = '2.04';
d159 37
a197 1

d199 4
a202 1
    my $cwd = `pwd`;
d213 3
a215 1
    if($^O eq 'MacOS' || grep { -x "$_/pwd" } split(':', $ENV{PATH})) {
d236 1
d274 3
a276 3
    # To be more useful we untaint it then check that we landed where we started.
    $path = $1 if $path =~ /^(.*)\z/s;	# untaint
    CORE::chdir($path) || return undef;
a353 3
# Taken from Cwd.pm It is really getcwd with an optional
# parameter instead of '.'
#
d355 3
a357 1
sub abs_path
d410 1
d417 3
a419 2
    my $path = @@_ ? shift : '.';
    CORE::chdir($path) || croak "Cannot chdir to $path:$!";
d421 2
a422 1
    CORE::chdir($cwd)  || croak "Cannot chdir back to $cwd:$!";
d482 3
d491 3
d523 1
d540 1
a540 1
    elsif ($^O eq 'qnx') {
a568 1
# package main; eval join('',<DATA>) || die $@@;	# quick test
a570 7

__END__
BEGIN { import Cwd qw(:DEFAULT chdir); }
print join("\n", cwd, getcwd, fastcwd, "");
chdir('..');
print join("\n", cwd, getcwd, fastcwd, "");
print "$ENV{PWD}\n";
@


1.4
log
@perl-5.6.0 + local changes
@
text
@d6 1
a6 1
getcwd - get pathname of current working directory
d17 3
d34 12
a48 7
The abs_path() function takes a single argument and returns the
absolute pathname for that argument.  It uses the same algorithm
as getcwd().  (Actually, getcwd() is abs_path("."))  Symbolic links
and relative-path components ("." and "..") are resolved to return
the canonical pathname, just like realpath(3).  Also callable as
realpath().

d59 1
a59 2
The fast_abs_path() function looks the same as abs_path(), but runs faster.
And like fastcwd() is more dangerous.
d61 6
a66 4
The cwd() function looks the same as getcwd and fastgetcwd but is
implemented using the most natural and safe form for the current
architecture. For most systems it is identical to `pwd` (but without
the trailing line terminator).
d68 2
a69 2
It is recommended that cwd (or another *cwd() function) is used in
I<all> code to ensure portability.
d78 1
a78 1
## use strict;
d82 1
a82 1
$VERSION = '2.02';
d84 3
a86 4
require Exporter;
@@ISA = qw(Exporter);
@@EXPORT = qw(cwd getcwd fastcwd fastgetcwd);
@@EXPORT_OK = qw(chdir abs_path fast_abs_path realpath fast_realpath);
d92 3
a94 2
    my $cwd;
    chop($cwd = `pwd`);
d101 9
a109 1
*cwd = \&_backtick_pwd unless defined &cwd;
d111 3
d179 1
a179 1
    if ($ENV{'PWD'} and $^O ne 'os2' and $^O ne 'dos') {
d187 3
a189 1
	$ENV{'PWD'} = cwd();
d192 1
a192 1
    if ($ENV{'PWD'} =~ m|(/[^/]+(/[^/]+/[^/]+))(.*)|s) {
d203 2
a204 2
    my $newdir = shift || '';	# allow for no arg (chdir to HOME dir)
    $newdir =~ s|///*|/|g;
d206 6
d213 11
a223 1
    if ($^O eq 'VMS') { return $ENV{'PWD'} = $ENV{'DEFAULT'} }
d304 1
a304 1
    my $path = shift || '.';
d373 1
a373 1
    my $path = shift || '.';
d379 5
d431 13
@


1.3
log
@perl5.005_03 (stock)
@
text
@d23 1
a23 1
    use Cwd 'abs_path';
d35 5
a39 2
absolute pathname for that argument. It uses the same algorithm as
getcwd(). (actually getcwd() is abs_path("."))
d73 1
a73 1
$VERSION = '2.01';
d78 1
a78 1
@@EXPORT_OK = qw(chdir abs_path fast_abs_path);
a110 3
# List of metachars taken from do_exec() in doio.c
my $quoted_shell_meta = quotemeta('$&*(){}[]";\\|?<>~`'."'\n");

d139 1
d142 1
a142 1
    $path = $1 if $path =~ /^(.*)$/;	# untaint
d170 1
a170 1
    if ($ENV{'PWD'} =~ m|(/[^/]+(/[^/]+/[^/]+))(.*)|) {
d187 1
a187 1
    if ($newdir =~ m#^/#) {
d260 4
d273 4
d342 1
a342 1
    local $^W = 0;	# assignments trigger 'subroutine redefined' warning
d382 6
@


1.2
log
@perl 5.004_04
@
text
@d23 6
d34 4
d48 3
d70 1
a70 1
$VERSION = '2.00';
d98 1
a98 56
    my($dotdots, $cwd, @@pst, @@cst, $dir, @@tst);

    unless (@@cst = stat('.'))
    {
	warn "stat(.): $!";
	return '';
    }
    $cwd = '';
    $dotdots = '';
    do
    {
	$dotdots .= '/' if $dotdots;
	$dotdots .= '..';
	@@pst = @@cst;
	unless (opendir(PARENT, $dotdots))
	{
	    warn "opendir($dotdots): $!";
	    return '';
	}
	unless (@@cst = stat($dotdots))
	{
	    warn "stat($dotdots): $!";
	    closedir(PARENT);
	    return '';
	}
	if ($pst[0] == $cst[0] && $pst[1] == $cst[1])
	{
	    $dir = undef;
	}
	else
	{
	    do
	    {
		unless (defined ($dir = readdir(PARENT)))
	        {
		    warn "readdir($dotdots): $!";
		    closedir(PARENT);
		    return '';
		}
		unless (@@tst = lstat("$dotdots/$dir"))
		{
		    # warn "lstat($dotdots/$dir): $!";
		    # Just because you can't lstat this directory
		    # doesn't mean you'll never find the right one.
		    # closedir(PARENT);
		    # return '';
		}
	    }
	    while ($dir eq '.' || $dir eq '..' || $tst[0] != $pst[0] ||
		   $tst[1] != $pst[1]);
	}
	$cwd = (defined $dir ? "$dir" : "" ) . "/$cwd" ;
	closedir(PARENT);
    } while (defined $dir);
    chop($cwd) unless $cwd eq '/'; # drop the trailing /
    $cwd;
a100 2


d121 1
a121 1
	chdir('..') || return undef;
d142 1
a142 1
    chdir($path) || return undef;
d158 1
a158 1
    if ($ENV{'PWD'} and $^O ne 'os2' and $^O ne 'msdos') {
d208 1
a208 1
    my $start = shift || '.';
d235 1
a235 1
	    $dir = '';
d252 1
a252 1
	$cwd = "$dir/$cwd";
d254 2
a255 2
    } while ($dir);
    chop($cwd); # drop the trailing /
d262 1
a262 1
    chdir($path) || croak "Cannot chdir to $path:$!";
d264 1
a264 1
    chdir($cwd)  || croak "Cannot chdir back to $cwd:$!";
d272 1
a272 1
# 06-Mar-1996  Charles Bailey  bailey@@genetics.upenn.edu
d298 1
a298 1
    $ENV{'PWD'} = Win32::GetCurrentDirectory();
d304 1
a304 1
                            defined &Win32::GetCurrentDirectory);
d308 13
a320 2
sub _msdos_cwd {
    $ENV{'PWD'} = `command /c cd`;
a321 1
    $ENV{'PWD'} =~ s:\\:/:g ;
d325 7
d359 5
a363 5
    elsif ($^O eq 'msdos') {
        *cwd		= \&_msdos_cwd;
        *getcwd		= \&_msdos_cwd;
        *fastgetcwd	= \&_msdos_cwd;
        *fastcwd	= \&_msdos_cwd;
d365 8
@


1.1
log
@Initial revision
@
text
@a2 1
require Exporter;
d29 8
a36 2
It's also more dangerous because you might conceivably chdir() out of a
directory that you can't chdir() back into.
d41 4
a44 2
the trailing line terminator). It is recommended that cwd (or another
*cwd() function) is used in I<all> code to ensure portability.
d48 2
a49 2
L<perlsub/Overriding builtin functions>.) Note that it will only be
kept up to date it all packages which use chdir import it from Cwd.
d53 7
d62 1
a62 1
@@EXPORT_OK = qw(chdir);
a63 1
# use strict;
d65 3
a67 1
sub _backtick_pwd {  # The 'natural and safe form' for UNIX (pwd may be setuid root)
d71 1
a71 1
} 
d112 1
a112 1
	    $dir = '';
d126 1
a126 1
		    warn "lstat($dotdots/$dir): $!";
d136 1
a136 1
	$cwd = "$dir/$cwd";
d138 2
a139 2
    } while ($dir);
    chop($cwd); # drop the trailing /
d151 3
d160 2
a161 1
    ($cdev, $cino) = stat('.');
d165 1
a165 1
	chdir('..');
d168 1
a168 1
	opendir(DIR, '.');
d171 1
a174 1
	    last unless defined $direntry;
d179 1
d182 8
a189 1
    chdir($path = '/' . join('/', @@path));
d202 1
a202 1
    if ($ENV{'PWD'} and $^O ne 'os2') {
d246 66
d318 2
a319 2
#   in the process logical name table as the default device and directory 
#   seen by Perl. This may not be the same as the default device 
d324 1
a324 1
    return $ENV{'DEFAULT'}
d326 8
d341 52
a392 19
my($oldw) = $^W;
$^W = 0;  # assignments trigger 'subroutine redefined' warning
if ($^O eq 'VMS') {

    *cwd        = \&_vms_cwd;
    *getcwd     = \&_vms_cwd;
    *fastcwd    = \&_vms_cwd;
    *fastgetcwd = \&_vms_cwd;
}
elsif ($^O eq 'NT') {

    *getcwd     = \&cwd;
    *fastgetcwd = \&cwd;
}
elsif ($^O eq 'os2') {
    *cwd     = \&_os2_cwd;
    *getcwd     = \&_os2_cwd;
    *fastgetcwd = \&_os2_cwd;
    *fastcwd = \&_os2_cwd;
a393 1
$^W = $oldw;
@


1.1.1.1
log
@Import of Perl 5.003 into the tree.  Makefile.bsd-wrapper and
config.sh.OpenBSD are the only local changes.
@
text
@@


1.1.1.2
log
@perl5.005_03
@
text
@d3 1
a23 6
    use Cwd 'abs_path';
    print abs_path($ENV{'PWD'});

    use Cwd 'fast_abs_path';
    print fast_abs_path($ENV{'PWD'});

a28 4
The abs_path() function takes a single argument and returns the
absolute pathname for that argument. It uses the same algorithm as
getcwd(). (actually getcwd() is abs_path("."))

d30 2
a31 11
It's also more dangerous because it might conceivably chdir() you out
of a directory that it can't chdir() you back into.  If fastcwd
encounters a problem it will return undef but will probably leave you
in a different directory.  For a measure of extra security, if
everything appears to have worked, the fastcwd() function will check
that it leaves you in the same directory that it started in. If it has
changed it will C<die> with the message "Unstable directory path,
current directory changed unexpectedly". That should never happen.

The fast_abs_path() function looks the same as abs_path(), but runs faster.
And like fastcwd() is more dangerous.
d36 2
a37 4
the trailing line terminator).

It is recommended that cwd (or another *cwd() function) is used in
I<all> code to ensure portability.
d41 2
a42 2
L<perlsub/Overriding Builtin Functions>.) Note that it will only be
kept up to date if all packages which use chdir import it from Cwd.
a45 7
## use strict;

use Carp;

$VERSION = '2.01';

require Exporter;
d48 1
a48 1
@@EXPORT_OK = qw(chdir abs_path fast_abs_path);
d50 1
d52 1
a52 3
# The 'natural and safe form' for UNIX (pwd may be setuid root)

sub _backtick_pwd {
d56 1
a56 1
}
d70 56
a125 1
    abs_path('.');
d128 2
a135 3
    
# List of metachars taken from do_exec() in doio.c
my $quoted_shell_meta = quotemeta('$&*(){}[]";\\|?<>~`'."'\n");
d142 1
a142 2
    my($orig_cdev, $orig_cino) = stat('.');
    ($cdev, $cino) = ($orig_cdev, $orig_cino);
d146 1
a146 1
	CORE::chdir('..') || return undef;
d149 1
a149 1
	opendir(DIR, '.') || return undef;
a151 1
	    last unless defined $direntry;
d155 1
a159 1
	return undef unless defined $direntry; # should never happen
d162 1
a162 8
    $path = '/' . join('/', @@path);
    # At this point $path may be tainted (if tainting) and chdir would fail.
    # To be more useful we untaint it then check that we landed where we started.
    $path = $1 if $path =~ /^(.*)$/;	# untaint
    CORE::chdir($path) || return undef;
    ($cdev, $cino) = stat('.');
    die "Unstable directory path, current directory changed unexpectedly"
	if $cdev != $orig_cdev || $cino != $orig_cino;
d175 1
a175 1
    if ($ENV{'PWD'} and $^O ne 'os2' and $^O ne 'dos') {
a218 66
# Taken from Cwd.pm It is really getcwd with an optional
# parameter instead of '.'
#

sub abs_path
{
    my $start = @@_ ? shift : '.';
    my($dotdots, $cwd, @@pst, @@cst, $dir, @@tst);

    unless (@@cst = stat( $start ))
    {
	carp "stat($start): $!";
	return '';
    }
    $cwd = '';
    $dotdots = $start;
    do
    {
	$dotdots .= '/..';
	@@pst = @@cst;
	unless (opendir(PARENT, $dotdots))
	{
	    carp "opendir($dotdots): $!";
	    return '';
	}
	unless (@@cst = stat($dotdots))
	{
	    carp "stat($dotdots): $!";
	    closedir(PARENT);
	    return '';
	}
	if ($pst[0] == $cst[0] && $pst[1] == $cst[1])
	{
	    $dir = undef;
	}
	else
	{
	    do
	    {
		unless (defined ($dir = readdir(PARENT)))
	        {
		    carp "readdir($dotdots): $!";
		    closedir(PARENT);
		    return '';
		}
		$tst[0] = $pst[0]+1 unless (@@tst = lstat("$dotdots/$dir"))
	    }
	    while ($dir eq '.' || $dir eq '..' || $tst[0] != $pst[0] ||
		   $tst[1] != $pst[1]);
	}
	$cwd = (defined $dir ? "$dir" : "" ) . "/$cwd" ;
	closedir(PARENT);
    } while (defined $dir);
    chop($cwd) unless $cwd eq '/'; # drop the trailing /
    $cwd;
}

sub fast_abs_path {
    my $cwd = getcwd();
    my $path = shift || '.';
    CORE::chdir($path) || croak "Cannot chdir to $path:$!";
    my $realpath = getcwd();
    CORE::chdir($cwd)  || croak "Cannot chdir back to $cwd:$!";
    $realpath;
}

d223 1
a223 1
# 06-Mar-1996  Charles Bailey  bailey@@newman.upenn.edu
d225 2
a226 2
#   in the process logical name table as the default device and directory
#   seen by Perl. This may not be the same as the default device
d231 1
a231 1
    return $ENV{'DEFAULT'};
a232 8

sub _vms_abs_path {
    return $ENV{'DEFAULT'} unless @@_;
    my $path = VMS::Filespec::pathify($_[0]);
    croak("Invalid path name $_[0]") unless defined $path;
    return VMS::Filespec::rmsexpand($path);
}

d240 19
a258 77
sub _win32_cwd {
    $ENV{'PWD'} = Win32::GetCwd();
    $ENV{'PWD'} =~ s:\\:/:g ;
    return $ENV{'PWD'};
}

*_NT_cwd = \&_win32_cwd if (!defined &_NT_cwd && 
                            defined &Win32::GetCwd);

*_NT_cwd = \&_os2_cwd unless defined &_NT_cwd;

sub _dos_cwd {
    if (!defined &Dos::GetCwd) {
        $ENV{'PWD'} = `command /c cd`;
        chop $ENV{'PWD'};
        $ENV{'PWD'} =~ s:\\:/:g ;
    } else {
        $ENV{'PWD'} = Dos::GetCwd();
    }
    return $ENV{'PWD'};
}

sub _qnx_cwd {
    $ENV{'PWD'} = `/usr/bin/fullpath -t`;
    chop $ENV{'PWD'};
    return $ENV{'PWD'};
}

sub _qnx_abs_path {
    my $path = shift || '.';
    my $realpath=`/usr/bin/fullpath -t $path`;
    chop $realpath;
    return $realpath;
}

{
    local $^W = 0;	# assignments trigger 'subroutine redefined' warning

    if ($^O eq 'VMS') {
        *cwd		= \&_vms_cwd;
        *getcwd		= \&_vms_cwd;
        *fastcwd	= \&_vms_cwd;
        *fastgetcwd	= \&_vms_cwd;
        *abs_path	= \&_vms_abs_path;
        *fast_abs_path	= \&_vms_abs_path;
    }
    elsif ($^O eq 'NT' or $^O eq 'MSWin32') {
        # We assume that &_NT_cwd is defined as an XSUB or in the core.
        *cwd		= \&_NT_cwd;
        *getcwd		= \&_NT_cwd;
        *fastcwd	= \&_NT_cwd;
        *fastgetcwd	= \&_NT_cwd;
        *abs_path	= \&fast_abs_path;
    }
    elsif ($^O eq 'os2') {
        # sys_cwd may keep the builtin command
        *cwd		= defined &sys_cwd ? \&sys_cwd : \&_os2_cwd;
        *getcwd		= \&cwd;
        *fastgetcwd	= \&cwd;
        *fastcwd	= \&cwd;
        *abs_path	= \&fast_abs_path;
    }
    elsif ($^O eq 'dos') {
        *cwd		= \&_dos_cwd;
        *getcwd		= \&_dos_cwd;
        *fastgetcwd	= \&_dos_cwd;
        *fastcwd	= \&_dos_cwd;
        *abs_path	= \&fast_abs_path;
    }
    elsif ($^O eq 'qnx') {
        *cwd		= \&_qnx_cwd;
        *getcwd		= \&_qnx_cwd;
        *fastgetcwd	= \&_qnx_cwd;
        *fastcwd	= \&_qnx_cwd;
        *abs_path	= \&_qnx_abs_path;
        *fast_abs_path	= \&_qnx_abs_path;
    }
d260 1
@


1.1.1.3
log
@virgin perl 5.6.0
@
text
@d23 1
a23 1
    use Cwd 'abs_path';	    # aka realpath()
d35 2
a36 5
absolute pathname for that argument.  It uses the same algorithm
as getcwd().  (Actually, getcwd() is abs_path("."))  Symbolic links
and relative-path components ("." and "..") are resolved to return
the canonical pathname, just like realpath(3).  Also callable as
realpath().
d70 1
a70 1
$VERSION = '2.02';
d75 1
a75 1
@@EXPORT_OK = qw(chdir abs_path fast_abs_path realpath fast_realpath);
d108 3
a138 1
    if ($^O eq 'apollo') { $path = "/".$path; }
d141 1
a141 1
    $path = $1 if $path =~ /^(.*)\z/s;	# untaint
d169 1
a169 1
    if ($ENV{'PWD'} =~ m|(/[^/]+(/[^/]+/[^/]+))(.*)|s) {
d186 1
a186 1
    if ($newdir =~ m#^/#s) {
a258 4
# added function alias for those of us more
# used to the libc function.  --tchrist 27-Jan-00
*realpath = \&abs_path;

a267 4
# added function alias to follow principle of least surprise
# based on previous aliasing.  --tchrist 27-Jan-00
*fast_realpath = \&fast_abs_path;

d333 1
a333 1
    no warnings;	# assignments trigger 'subroutine redefined' warning
a372 6
    }
    elsif ($^O eq 'cygwin') {
        *getcwd	= \&cwd;
        *fastgetcwd	= \&cwd;
        *fastcwd	= \&cwd;
        *abs_path	= \&fast_abs_path;
@


1.1.1.4
log
@stock perl 5.6.1
@
text
@d6 1
a6 1
Cwd - get pathname of current working directory
a16 3
    $dir = fastcwd;

    use Cwd;
a30 12
This module provides functions for determining the pathname of the
current working directory.  By default, it exports the functions
cwd(), getcwd(), fastcwd(), and fastgetcwd() into the caller's
namespace.  Each of these functions are called without arguments and
return the absolute path of the current working directory.  It is
recommended that cwd (or another *cwd() function) be used in I<all>
code to ensure portability.

The cwd() is the most natural and safe form for the current
architecture. For most systems it is identical to `pwd` (but without
the trailing line terminator).

d34 7
d51 2
a52 1
The fastgetcwd() function is provided as a synonym for cwd().
d54 4
a57 6
The abs_path() function takes a single argument and returns the
absolute pathname for that argument.  It uses the same algorithm as
getcwd().  (Actually, getcwd() is abs_path("."))  Symbolic links and
relative-path components ("." and "..") are resolved to return the
canonical pathname, just like realpath(3).  This function is also
callable as realpath().
d59 2
a60 2
The fast_abs_path() function looks the same as abs_path() but runs
faster and, like fastcwd(), is more dangerous.
d69 1
a69 1
use strict;
d73 1
a73 1
our $VERSION = '2.04';
d75 4
a78 3
use base qw/ Exporter /;
our @@EXPORT = qw(cwd getcwd fastcwd fastgetcwd);
our @@EXPORT_OK = qw(chdir abs_path fast_abs_path realpath fast_realpath);
d84 2
a85 3
    my $cwd = `pwd`;
    # `pwd` may fail e.g. if the disk is full
    chomp($cwd) if defined $cwd;
d92 1
a92 9
unless(defined &cwd) {
    # The pwd command is not available in some chroot(2)'ed environments
    if($^O eq 'MacOS' || grep { -x "$_/pwd" } split(':', $ENV{PATH})) {
	*cwd = \&_backtick_pwd;
    }
    else {
	*cwd = \&getcwd;
    }
}
a93 3
# set a reasonable (and very safe) default for fastgetcwd, in case it
# isn't redefined later (20001212 rspier)
*fastgetcwd = \&cwd;
d159 1
a159 1
    if ($ENV{'PWD'} and $^O ne 'os2' and $^O ne 'dos' and $^O ne 'MSWin32') {
d167 1
a167 3
	my $wd = cwd();
	$wd = Win32::GetFullPathName($wd) if $^O eq 'MSWin32';
	$ENV{'PWD'} = $wd;
d170 1
a170 1
    if ($^O ne 'MSWin32' and $ENV{'PWD'} =~ m|(/[^/]+(/[^/]+/[^/]+))(.*)|s) {
d181 2
a182 2
    my $newdir = @@_ ? shift : '';	# allow for no arg (chdir to HOME dir)
    $newdir =~ s|///*|/|g unless $^O eq 'MSWin32';
a183 6
    my $newpwd;
    if ($^O eq 'MSWin32') {
	# get the full path name *before* the chdir()
	$newpwd = Win32::GetFullPathName($newdir);
    }

d185 1
a185 11

    if ($^O eq 'VMS') {
	return $ENV{'PWD'} = $ENV{'DEFAULT'}
    }
    elsif ($^O eq 'MacOS') {
	return $ENV{'PWD'} = cwd();
    }
    elsif ($^O eq 'MSWin32') {
	$ENV{'PWD'} = $newpwd;
	return 1;
    }
d266 1
a266 1
    my $path = @@_ ? shift : '.';
d335 1
a335 1
    my $path = @@_ ? shift : '.';
a340 5
sub _epoc_cwd {
    $ENV{'PWD'} = EPOC::getcwd();
    return $ENV{'PWD'};
}

a387 13
    }
    elsif ($^O eq 'epoc') {
        *cwd            = \&_epoc_cwd;
        *getcwd	        = \&_epoc_cwd;
        *fastgetcwd	= \&_epoc_cwd;
        *fastcwd	= \&_epoc_cwd;
        *abs_path	= \&fast_abs_path;
    }
    elsif ($^O eq 'MacOS') {
    	*getcwd     = \&cwd;
    	*fastgetcwd = \&cwd;
    	*fastcwd    = \&cwd;
    	*abs_path   = \&fast_abs_path;
@


1.1.1.5
log
@stock perl 5.8.0 from CPAN
@
text
@d2 1
a2 1
use 5.006;
d11 1
a11 1
    my $dir = getcwd;
d13 2
a14 2
    use Cwd 'abs_path';
    my $abs_path = abs_path($file);
d16 2
a17 1
=head1 DESCRIPTION
d19 2
a20 3
This module provides functions for determining the pathname of the
current working directory.  It is recommended that getcwd (or another
*cwd() function) be used in I<all> code to ensure portability.
d22 3
a24 2
By default, it exports the functions cwd(), getcwd(), fastcwd(), and
fastgetcwd() into the caller's namespace.  
d26 2
d29 2
a30 1
=head2 getcwd and friends
d32 1
a32 2
Each of these functions are called without arguments and return the
absolute path of the current working directory.
d34 24
a57 40
=over 4

=item getcwd

    my $cwd = getcwd();

Returns the current working directory.

Re-implements the getcwd(3) (or getwd(3)) functions in Perl.

Taint-safe.

=item cwd

    my $cwd = cwd();

The cwd() is the most natural form for the current architecture. For
most systems it is identical to `pwd` (but without the trailing line
terminator).

Taint-safe.

=item fastcwd

    my $cwd = fastcwd();

A more dangerous version of getcwd(), but potentially faster.

It might conceivably chdir() you out of a directory that it can't
chdir() you back into.  If fastcwd encounters a problem it will return
undef but will probably leave you in a different directory.  For a
measure of extra security, if everything appears to have worked, the
fastcwd() function will check that it leaves you in the same directory
that it started in. If it has changed it will C<die> with the message
"Unstable directory path, current directory changed
unexpectedly". That should never happen.

=item fastgetcwd

  my $cwd = fastgetcwd();
d61 14
a74 72
=back


=head2 abs_path and friends

These functions are exported only on request.  They each take a single
argument and return the absolute pathname for it.

=over 4

=item abs_path

  my $abs_path = abs_path($file);

Uses the same algorithm as getcwd().  Symbolic links and relative-path
components ("." and "..") are resolved to return the canonical
pathname, just like realpath(3).

Taint-safe.

=item realpath

  my $abs_path = realpath($file);

A synonym for abs_path().

Taint-safe.

=item fast_abs_path

  my $abs_path = fast_abs_path($file);

A more dangerous, but potentially faster version of abs_path.

This function is B<Not> taint-safe : you can't use it in programs
that work under taint mode.

=back

=head2 $ENV{PWD}

If you ask to override your chdir() built-in function, 

  use Cwd qw(chdir);

then your PWD environment variable will be kept up to date.  Note that
it will only be kept up to date if all packages which use chdir import
it from Cwd.


=head1 NOTES

=over 4

=item *

Since the path seperators are different on some operating systems ('/'
on Unix, ':' on MacPerl, etc...) we recommend you use the File::Spec
modules wherever portability is a concern.

=item *

Actually, on Mac OS, the C<getcwd()>, C<fastgetcwd()> and C<fastcwd()>
functions  are all aliases for the C<cwd()> function, which, on Mac OS,
calls `pwd`. Likewise, the C<abs_path()> function is an alias for
C<fast_abs_path()>.

=back

=head1 SEE ALSO

L<File::chdir>
d82 1
a82 1
our $VERSION = '2.06';
a87 1
# sys_cwd may keep the builtin command
d89 1
a89 35
# All the functionality of this module may provided by builtins,
# there is no sense to process the rest of the file.
# The best choice may be to have this in BEGIN, but how to return from BEGIN?

if ($^O eq 'os2' && defined &sys_cwd && defined &sys_abspath) {
    local $^W = 0;
    *cwd		= \&sys_cwd;
    *getcwd		= \&cwd;
    *fastgetcwd		= \&cwd;
    *fastcwd		= \&cwd;
    *abs_path		= \&sys_abspath;
    *fast_abs_path	= \&abs_path;
    *realpath		= \&abs_path;
    *fast_realpath	= \&abs_path;
    return 1;
}

eval {
    require XSLoader;
    undef *Cwd::fastcwd; # avoid redefinition warning
    XSLoader::load('Cwd');
};


# Find the pwd command in the expected locations.  We assume these
# are safe.  This prevents _backtick_pwd() consulting $ENV{PATH}
# so everything works under taint mode.
my $pwd_cmd;
foreach my $try (qw(/bin/pwd /usr/bin/pwd)) {
    if( -x $try ) {
        $pwd_cmd = $try;
        last;
    }
}
$pwd_cmd ||= 'pwd';
a90 1
# The 'natural and safe form' for UNIX (pwd may be setuid root)
d92 1
a92 4
    local @@ENV{qw(PATH IFS CDPATH ENV BASH_ENV)};
    my $cwd = `$pwd_cmd`;
    # Belt-and-suspenders in case someone said "undef $/".
    local $/ = "\n";
d103 1
a103 3
    if( $^O eq 'MacOS' || (defined $ENV{PATH} && 
                           grep { -x "$_/pwd" } split(':', $ENV{PATH})) ) 
    {
a123 1

d161 3
a163 3
    # Untaint it then check that we landed where we started.
    $path =~ /^(.*)\z/s		# untaint
	&& CORE::chdir($1) or return undef;
d241 3
d245 1
a245 3
# In case the XS version doesn't load.
*abs_path = \&_perl_abs_path unless defined &abs_path;
sub _perl_abs_path
a297 1

d304 2
a305 3
    require File::Spec;
    my $path = @@_ ? shift : File::Spec->curdir;
    CORE::chdir($path) || croak "Cannot chdir to $path: $!";
d307 1
a307 2
    -d $cwd && CORE::chdir($cwd) ||
	croak "Cannot chdir back to $cwd: $!";
a366 3
	local $ENV{PATH} = '';
	local $ENV{CDPATH} = '';
	local $ENV{ENV} = '';
a372 3
	local $ENV{PATH} = '';
	local $ENV{CDPATH} = '';
	local $ENV{ENV} = '';
a401 1
        *realpath   = \&fast_abs_path;
d418 1
a418 1
    elsif ($^O =~ m/^(?:qnx|nto)$/ ) {
d447 1
d450 7
@


1.1.1.6
log
@perl 5.8.2 from CPAN
@
text
@d41 2
d51 2
d80 1
a80 2
argument and return the absolute pathname for it.  If no argument is
given they'll use the current working directory.
d92 2
d100 2
d108 3
d151 3
a153 1
our $VERSION = '2.08';
d180 1
a180 1
    local $^W = 0;
d195 1
a195 10
unless ($pwd_cmd) {
    if (-x '/QOpenSys/bin/pwd') { # OS/400 PASE.
        $pwd_cmd = '/QOpenSys/bin/pwd' ;
    } else {
        # Isn't this wrong?  _backtick_pwd() will fail if somenone has
        # pwd in their path but it is not /bin/pwd or /usr/bin/pwd?
        # See [perl #16774]. --jhi
        $pwd_cmd = 'pwd';
    }
}
d364 1
a364 2
	require Carp;
	Carp::carp ("stat($start): $!");
a372 1
	local *PARENT;
d375 1
a375 2
	    require Carp;
	    Carp::carp ("opendir($dotdots): $!");
d380 1
a380 2
	    require Carp;
	    Carp::carp ("stat($dotdots): $!");
d394 1
a394 2
		    require Carp;
		    Carp::carp ("readdir($dotdots): $!");
a414 1
my $Curdir;
d418 2
a419 11
    my $path = @@_ ? shift : ($Curdir ||= File::Spec->curdir);

    # Detaint else we'll explode in taint mode.  This is safe because
    # we're not doing anything dangerous with it.
    ($path) = $path =~ /(.*)/;
    ($cwd)  = $cwd  =~ /(.*)/;

    if (!CORE::chdir($path)) {
 	require Carp;
 	Carp::croak ("Cannot chdir to $path: $!");
    }
d421 2
a422 4
    if (! ((-d $cwd) && (CORE::chdir($cwd)))) {
 	require Carp;
 	Carp::croak ("Cannot chdir back to $cwd: $!");
    }
d448 1
a448 5
    if (! defined $path)
	{
	require Carp;
	Carp::croak("Invalid path name $_[0]")
	}
d454 1
a454 1
    chomp $ENV{'PWD'};
d473 1
a473 1
        chomp $ENV{'PWD'};
d486 1
a486 1
    chomp $ENV{'PWD'};
d495 2
a496 7
    local *REALPATH;

    open(REALPATH, '-|', '/usr/bin/fullpath', '-t', $path) or
      die "Can't open /usr/bin/fullpath: $!";
    my $realpath = <REALPATH>;
    close REALPATH;
    chomp $realpath;
@


1.1.1.7
log
@perl 5.8.3 from CPAN
@
text
@d2 1
a139 2
use Exporter;
use vars qw($VERSION @@ISA @@EXPORT @@EXPORT_OK);
d141 1
a141 1
$VERSION = '2.12';
d143 3
a145 3
@@ISA = qw/ Exporter /;
@@EXPORT = qw(cwd getcwd fastcwd fastgetcwd);
@@EXPORT_OK = qw(chdir abs_path fast_abs_path realpath fast_realpath);
d153 1
a153 1
if ($^O eq 'os2') {
d155 8
a162 11

    *cwd                = defined &sys_cwd ? \&sys_cwd : \&_os2_cwd;
    *getcwd             = \&cwd;
    *fastgetcwd         = \&cwd;
    *fastcwd            = \&cwd;

    *fast_abs_path      = \&sys_abspath if defined &sys_abspath;
    *abs_path           = \&fast_abs_path;
    *realpath           = \&fast_abs_path;
    *fast_realpath      = \&fast_abs_path;

a193 4
# Lazy-load Carp
sub _carp  { require Carp; Carp::carp(@@_)  }
sub _croak { require Carp; Carp::croak(@@_) }

d361 2
a362 1
	_carp("stat($start): $!");
d374 2
a375 1
	    _carp("opendir($dotdots): $!");
d380 2
a381 1
	    _carp("stat($dotdots): $!");
d395 2
a396 1
		    _carp("readdir($dotdots): $!");
d429 2
a430 1
 	_croak("Cannot chdir to $path: $!");
d434 2
a435 1
 	_croak("Cannot chdir back to $cwd: $!");
d464 2
a465 1
	_croak("Invalid path name $_[0]")
d548 8
a575 1
        *realpath	= \&abs_path;
@


1.1.1.8
log
@Import of stock perl 5.8.5
@
text
@a1 1
$VERSION = $VERSION = '2.19';
d22 1
a22 1
fastgetcwd() (and, on Win32, getdcwd()) into the caller's namespace.  
a68 12
=item getdcwd

    my $cwd = getdcwd();
    my $cwd = getdcwd('C:');

The getdcwd() function is also provided on Win32 to get the current working
directory on the specified drive, since Windows maintains a separate current
working directory for each drive.  If no drive is specified then the current
drive is assumed.

This function simply calls the Microsoft C library _getdcwd() function.

a131 6
=head1 AUTHOR

Originally by the perl5-porters.

Maintained by Ken Williams <KWILLIAMS@@cpan.org>

d140 3
a142 1
use vars qw(@@ISA @@EXPORT @@EXPORT_OK);
a145 1
push @@EXPORT, qw(getdcwd) if $^O eq 'MSWin32';
a175 73
# Big nasty table of function aliases
my %METHOD_MAP =
  (
   VMS =>
   {
    cwd			=> '_vms_cwd',
    getcwd		=> '_vms_cwd',
    fastcwd		=> '_vms_cwd',
    fastgetcwd		=> '_vms_cwd',
    abs_path		=> '_vms_abs_path',
    fast_abs_path	=> '_vms_abs_path',
   },

   MSWin32 =>
   {
    # We assume that &_NT_cwd is defined as an XSUB or in the core.
    cwd			=> '_NT_cwd',
    getcwd		=> '_NT_cwd',
    fastcwd		=> '_NT_cwd',
    fastgetcwd		=> '_NT_cwd',
    abs_path		=> 'fast_abs_path',
    realpath		=> 'fast_abs_path',
   },

   dos => 
   {
    cwd			=> '_dos_cwd',
    getcwd		=> '_dos_cwd',
    fastgetcwd		=> '_dos_cwd',
    fastcwd		=> '_dos_cwd',
    abs_path		=> 'fast_abs_path',
   },

   qnx =>
   {
    cwd			=> '_qnx_cwd',
    getcwd		=> '_qnx_cwd',
    fastgetcwd		=> '_qnx_cwd',
    fastcwd		=> '_qnx_cwd',
    abs_path		=> '_qnx_abs_path',
    fast_abs_path	=> '_qnx_abs_path',
   },

   cygwin =>
   {
    getcwd		=> 'cwd',
    fastgetcwd		=> 'cwd',
    fastcwd		=> 'cwd',
    abs_path		=> 'fast_abs_path',
    realpath		=> 'fast_abs_path',
   },

   epoc =>
   {
    cwd			=> '_epoc_cwd',
    getcwd	        => '_epoc_cwd',
    fastgetcwd		=> '_epoc_cwd',
    fastcwd		=> '_epoc_cwd',
    abs_path		=> 'fast_abs_path',
   },

   MacOS =>
   {
    getcwd		=> 'cwd',
    fastgetcwd		=> 'cwd',
    fastcwd		=> 'cwd',
    abs_path		=> 'fast_abs_path',
   },
  );

$METHOD_MAP{NT} = $METHOD_MAP{MSWin32};
$METHOD_MAP{nto} = $METHOD_MAP{qnx};

d181 1
a181 5
foreach my $try ('/bin/pwd',
		 '/usr/bin/pwd',
		 '/QOpenSys/bin/pwd', # OS/400 PASE.
		) {

d188 8
a195 4
    # Isn't this wrong?  _backtick_pwd() will fail if somenone has
    # pwd in their path but it is not /bin/pwd or /usr/bin/pwd?
    # See [perl #16774]. --jhi
    $pwd_cmd = 'pwd';
d216 1
a216 1
unless ($METHOD_MAP{$^O}{cwd} or defined &cwd) {
d218 2
a219 3
    my $sep = $Config::Config{path_sep} || ':';
    if( $^O eq 'MacOS' || (defined $ENV{PATH} &&
			   grep { -x "$_/pwd" } split($sep, $ENV{PATH})) )
d362 1
a362 1
sub _perl_abs_path(;$)
a371 22

    unless (-d _) {
        # Make sure we can be invoked on plain files, not just directories.
        # NOTE that this routine assumes that '/' is the only directory separator.
	
        my ($dir, $file) = $start =~ m{^(.*)/(.+)$}
	    or return cwd() . '/' . $start;
	
	if (-l _) {
	    my $link_target = readlink($start);
	    die "Can't resolve link $start: $!" unless defined $link_target;
	    
	    require File::Spec;
            $link_target = $dir . '/' . $link_target
                unless File::Spec->file_name_is_absolute($link_target);
	    
	    return abs_path($link_target);
	}
	
	return abs_path($dir) . '/' . $file;
    }

a431 23
    unless (-e $path) {
 	_croak("$path: No such file or directory");
    }

    unless (-d _) {
        # Make sure we can be invoked on plain files, not just directories.
	
	my ($vol, $dir, $file) = File::Spec->splitpath($path);
	return File::Spec->catfile($cwd, $path) unless length $dir;

	if (-l $path) {
	    my $link_target = readlink($path);
	    die "Can't resolve link $path: $!" unless defined $link_target;
	    
	    $link_target = File::Spec->catpath($vol, $dir, $link_target)
                unless File::Spec->file_name_is_absolute($link_target);
	    
	    return fast_abs_path($link_target);
	}
	
	return fast_abs_path(File::Spec->catpath($vol, $dir, '')) . '/' . $file;
    }

a462 2

    # may need to turn foo.dir into [.foo]
d464 4
a467 2
    $path = $_[0] unless defined $path;

d529 2
d532 52
a583 10
# Now that all the base-level functions are set up, alias the
# user-level functions to the right places

if (exists $METHOD_MAP{$^O}) {
  my $map = $METHOD_MAP{$^O};
  foreach my $name (keys %$map) {
    no warnings;	# assignments trigger 'subroutine redefined' warning
    no strict 'refs';
    *{$name} = \&{$map->{$name}};
  }
@


1.1.1.9
log
@perl 5.8.6 from CPAN
@
text
@d2 1
a2 1
$VERSION = $VERSION = '3.01';
d472 1
a472 2
	# Can't use "-l _" here, because the previous stat was a stat(), not an lstat().
	if (-l $start) {
@


1.1.1.10
log
@perl 5.8.8 import
@
text
@d2 1
a150 13
=head1 COPYRIGHT

Copyright (c) 2004 by the Perl 5 Porters.  All rights reserved.

This program is free software; you can redistribute it and/or modify
it under the same terms as Perl itself.

Portions of the C code in this library are copyright (c) 1994 by the
Regents of the University of California.  All rights reserved.  The
license on this code is compatible with the licensing of the rest of
the distribution - please see the source code in F<Cwd.xs> for the
details.

d159 1
a159 3
use vars qw(@@ISA @@EXPORT @@EXPORT_OK $VERSION);

$VERSION = '3.12';
a187 1
# If loading the XS stuff doesn't work, we can fall back to pure perl
a188 1
  if ( $] >= 5.006 ) {
d190 2
a191 6
    XSLoader::load( __PACKAGE__, $VERSION );
  } else {
    require DynaLoader;
    push @@ISA, 'DynaLoader';
    __PACKAGE__->bootstrap( $VERSION );
  }
a193 3
# Must be after the DynaLoader stuff:
$VERSION = eval $VERSION;

d295 1
a295 4
    # Localize %ENV entries in a way that won't create new hash keys
    my @@localize = grep exists $ENV{$_}, qw(PATH IFS CDPATH ENV BASH_ENV);
    local @@ENV{@@localize};
    
d310 1
a310 3
    my $os = $^O;  # Protect $^O from tainting
    if( $os eq 'MacOS' || (defined $ENV{PATH} &&
			   $os ne 'MSWin32' &&  # no pwd on Windows
d341 1
a341 1
sub fastcwd_ {
a378 1
if (not defined &fastcwd) { *fastcwd = \&fastcwd_ }
d452 3
a454 1
sub _perl_abs_path
d484 1
a484 1
	return $dir ? abs_path($dir) . "/$file" : "/$file";
d532 4
a537 1
    local $ENV{PWD} = $ENV{PWD} || ''; # Guard against clobberage
d567 1
a567 3
	return $dir eq File::Spec->rootdir
	  ? File::Spec->catpath($vol, $dir, $file)
	  : fast_abs_path(File::Spec->catpath($vol, $dir, '')) . '/' . $file;
d622 4
a625 1
*_NT_cwd = defined &Win32::GetCwd ? \&_win32_cwd : \&_os2_cwd;
d654 1
a654 1
    defined( open(REALPATH, '-|') || exec '/usr/bin/fullpath', '-t', $path ) or
d674 1
a674 1
    local $^W = 0;  # assignments trigger 'subroutine redefined' warning
a679 6
# In case the XS version doesn't load.
*abs_path = \&_perl_abs_path unless defined &abs_path;

# added function alias for those of us more
# used to the libc function.  --tchrist 27-Jan-00
*realpath = \&abs_path;
@


1.1.1.11
log
@import perl 5.10.0 from CPAN
@
text
@d38 1
a38 2
Exposes the POSIX function getcwd(3) or re-implements it if it's not
available.
d173 1
a173 1
$VERSION = '3.2501';
a304 1
my $found_pwd_cmd = defined($pwd_cmd);
d337 3
a339 13


    # Try again to find a pwd, this time searching the whole PATH.
    if (defined $ENV{PATH} and $os ne 'MSWin32') {  # no pwd on Windows
	my @@candidates = split($sep, $ENV{PATH});
	while (!$found_pwd_cmd and @@candidates) {
	    my $candidate = shift @@candidates;
	    $found_pwd_cmd = 1 if -x "$candidate/pwd";
	}
    }

    # MacOS has some special magic to make `pwd` work.
    if( $os eq 'MacOS' || $found_pwd_cmd )
a347 9
if ($^O eq 'cygwin') {
  # We need to make sure cwd() is called with no args, because it's
  # got an arg-less prototype and will die if args are present.
  local $^W = 0;
  my $orig_cwd = \&cwd;
  *cwd = sub { &$orig_cwd() }
}


d352 5
a356 3
# A non-XS version of getcwd() - also used to bootstrap the perl build
# process, when miniperl is running and no XS loading happens.
sub _perl_getcwd
d361 1
d464 1
a464 3
    if (ref $newdir eq 'GLOB') { # in case a file/dir handle is passed in
	$ENV{'PWD'} = cwd();
    } elsif ($newdir =~ m#^/#s) {
a626 1
    my $path = shift;
d628 3
a630 6
    if (-l $path) {
        my $link_target = readlink($path);
        die "Can't resolve link $path: $!" unless defined $link_target;
	    
        return _vms_abs_path($link_target);
    }
a631 4
    # may need to turn foo.dir into [.foo]
    my $pathified = VMS::Filespec::pathify($path);
    $path = $pathified if defined $pathified;
	
d643 1
a643 6
    if (defined &DynaLoader::boot_DynaLoader) {
	$ENV{'PWD'} = Win32::GetCwd();
    }
    else { # miniperl
	chomp($ENV{'PWD'} = `cd`);
    }
a704 1
*getcwd = \&_perl_getcwd unless defined &getcwd;
@


1.1.1.12
log
@import perl 5.10.1
@
text
@d174 1
a174 3
$VERSION = '3.30';
my $xs_version = $VERSION;
$VERSION = eval $VERSION;
a202 39
# Need to look up the feature settings on VMS.  The preferred way is to use the
# VMS::Feature module, but that may not be available to dual life modules.

my $use_vms_feature;
BEGIN {
    if ($^O eq 'VMS') {
        if (eval { local $SIG{__DIE__}; require VMS::Feature; }) {
            $use_vms_feature = 1;
        }
    }
}

# Need to look up the UNIX report mode.  This may become a dynamic mode
# in the future.
sub _vms_unix_rpt {
    my $unix_rpt;
    if ($use_vms_feature) {
        $unix_rpt = VMS::Feature::current("filename_unix_report");
    } else {
        my $env_unix_rpt = $ENV{'DECC$FILENAME_UNIX_REPORT'} || '';
        $unix_rpt = $env_unix_rpt =~ /^[ET1]/i; 
    }
    return $unix_rpt;
}

# Need to look up the EFS character set mode.  This may become a dynamic
# mode in the future.
sub _vms_efs {
    my $efs;
    if ($use_vms_feature) {
        $efs = VMS::Feature::current("efs_charset");
    } else {
        my $env_efs = $ENV{'DECC$EFS_CHARSET'} || '';
        $efs = $env_efs =~ /^[ET1]/i; 
    }
    return $efs;
}


d207 1
a207 1
    XSLoader::load( __PACKAGE__, $xs_version);
d211 1
a211 1
    __PACKAGE__->bootstrap( $xs_version );
a250 1
   # QNX4.  QNX6 has a $os of 'nto'.
d289 1
d543 2
a544 2
	    # probably a permissions issue.  Try the native command.
	    return File::Spec->rel2abs( $start, _backtick_pwd() );
a648 39
    my $efs = _vms_efs;
    my $unix_rpt = _vms_unix_rpt;

    if (defined &VMS::Filespec::vmsrealpath) {
        my $path_unix = 0;
        my $path_vms = 0;

        $path_unix = 1 if ($path =~ m#(?<=\^)/#);
        $path_unix = 1 if ($path =~ /^\.\.?$/);
        $path_vms = 1 if ($path =~ m#[\[<\]]#);
        $path_vms = 1 if ($path =~ /^--?$/);

        my $unix_mode = $path_unix;
        if ($efs) {
            # In case of a tie, the Unix report mode decides.
            if ($path_vms == $path_unix) {
                $unix_mode = $unix_rpt;
            } else {
                $unix_mode = 0 if $path_vms;
            }
        }

        if ($unix_mode) {
            # Unix format
            return VMS::Filespec::unixrealpath($path);
        }

	# VMS format

	my $new_path = VMS::Filespec::vmsrealpath($path);

	# Perl expects directories to be in directory format
	$new_path = VMS::Filespec::pathify($new_path) if -d $path;
	return $new_path;
    }

    # Fallback to older algorithm if correct ones are not
    # available.

d652 1
a652 1

@


