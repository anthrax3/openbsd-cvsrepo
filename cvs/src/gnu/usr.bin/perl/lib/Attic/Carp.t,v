head	1.2;
access;
symbols
	OPENBSD_5_3:1.1.1.6.0.10
	OPENBSD_5_3_BASE:1.1.1.6
	OPENBSD_5_2:1.1.1.6.0.8
	OPENBSD_5_2_BASE:1.1.1.6
	OPENBSD_5_1_BASE:1.1.1.6
	OPENBSD_5_1:1.1.1.6.0.6
	OPENBSD_5_0:1.1.1.6.0.4
	OPENBSD_5_0_BASE:1.1.1.6
	OPENBSD_4_9:1.1.1.6.0.2
	OPENBSD_4_9_BASE:1.1.1.6
	PERL_5_12_2:1.1.1.6
	OPENBSD_4_8:1.1.1.5.0.8
	OPENBSD_4_8_BASE:1.1.1.5
	OPENBSD_4_7:1.1.1.5.0.4
	OPENBSD_4_7_BASE:1.1.1.5
	PERL_5_10_1:1.1.1.5
	OPENBSD_4_6:1.1.1.5.0.6
	OPENBSD_4_6_BASE:1.1.1.5
	OPENBSD_4_5:1.1.1.5.0.2
	OPENBSD_4_5_BASE:1.1.1.5
	PERL_5_10_0:1.1.1.5
	OPENBSD_4_4:1.1.1.4.0.10
	OPENBSD_4_4_BASE:1.1.1.4
	OPENBSD_4_3:1.1.1.4.0.8
	OPENBSD_4_3_BASE:1.1.1.4
	OPENBSD_4_2:1.1.1.4.0.6
	OPENBSD_4_2_BASE:1.1.1.4
	OPENBSD_4_1:1.1.1.4.0.4
	OPENBSD_4_1_BASE:1.1.1.4
	OPENBSD_4_0:1.1.1.4.0.2
	OPENBSD_4_0_BASE:1.1.1.4
	PERL_5_8_8:1.1.1.4
	OPENBSD_3_9:1.1.1.3.0.6
	OPENBSD_3_9_BASE:1.1.1.3
	OPENBSD_3_8:1.1.1.3.0.4
	OPENBSD_3_8_BASE:1.1.1.3
	OPENBSD_3_7:1.1.1.3.0.2
	OPENBSD_3_7_BASE:1.1.1.3
	PERL_5_8_6:1.1.1.3
	OPENBSD_3_6:1.1.1.2.0.2
	OPENBSD_3_6_BASE:1.1.1.2
	PERL_5_8_5:1.1.1.2
	PERL_5_8_3:1.1.1.1
	OPENBSD_3_5:1.1.1.1.0.6
	OPENBSD_3_5_BASE:1.1.1.1
	PERL_5_8_2:1.1.1.1
	OPENBSD_3_4:1.1.1.1.0.4
	OPENBSD_3_4_BASE:1.1.1.1
	OPENBSD_3_3:1.1.1.1.0.2
	OPENBSD_3_3_BASE:1.1.1.1
	PERL_5_8_0:1.1.1.1
	CPAN:1.1.1;
locks; strict;
comment	@# @;
expand	@o@;


1.2
date	2013.03.25.20.40.55;	author sthen;	state dead;
branches;
next	1.1;

1.1
date	2002.10.27.22.14.57;	author millert;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	2002.10.27.22.14.57;	author millert;	state Exp;
branches;
next	1.1.1.2;

1.1.1.2
date	2004.08.09.17.46.40;	author millert;	state Exp;
branches;
next	1.1.1.3;

1.1.1.3
date	2005.01.15.21.17.06;	author millert;	state Exp;
branches;
next	1.1.1.4;

1.1.1.4
date	2006.03.28.18.48.31;	author millert;	state Exp;
branches;
next	1.1.1.5;

1.1.1.5
date	2008.09.29.17.18.29;	author millert;	state Exp;
branches;
next	1.1.1.6;

1.1.1.6
date	2010.09.24.14.48.35;	author millert;	state Exp;
branches;
next	;


desc
@@


1.2
log
@merge/resolve conflicts
(some more to do after this one)
@
text
@BEGIN {
	chdir 't' if -d 't';
	@@INC = '../lib';
}

use Carp qw(carp cluck croak confess);

print "1..9\n";

print "ok 1\n";

$SIG{__WARN__} = sub {
    print "ok $1\n"
	if $_[0] =~ m!ok (\d+)$! };

carp  "ok 2\n";
	
$SIG{__WARN__} = sub {
    print "ok $1\n"
	if $_[0] =~ m!(\d+) at .+\b(?i:carp\.t) line \d+$! };

carp 3;

sub sub_4 {

$SIG{__WARN__} = sub {
    print "ok $1\n"
	if $_[0] =~ m!^(\d+) at .+\b(?i:carp\.t) line \d+\n\tmain::sub_4\(\) called at .+\b(?i:carp\.t) line \d+$! };

cluck 4;

}

sub_4;

$SIG{__DIE__} = sub {
    print "ok $1\n"
	if $_[0] =~ m!^(\d+) at .+\b(?i:carp\.t) line \d+\n\teval \Q{...}\E called at .+\b(?i:carp\.t) line \d+$! };

eval { croak 5 };

sub sub_6 {
    $SIG{__DIE__} = sub {
	print "ok $1\n"
	    if $_[0] =~ m!^(\d+) at .+\b(?i:carp\.t) line \d+\n\teval \Q{...}\E called at .+\b(?i:carp\.t) line \d+\n\tmain::sub_6\(\) called at .+\b(?i:carp\.t) line \d+$! };

    eval { confess 6 };
}

sub_6;

print "ok 7\n";

# test for caller_info API
my $eval = "use Carp::Heavy; return Carp::caller_info(0);";
my %info = eval($eval);
print "not " if ($info{sub_name} ne "eval '$eval'");
print "ok 8\n";

# test for '...::CARP_NOT used only once' warning from Carp::Heavy
my $warning;
eval {
    BEGIN {
	$^W = 1;
	$SIG{__WARN__} =
	    sub { if( defined $^S ){ warn $_[0] } else { $warning = $_[0] } }
    }
    package Z; 
    BEGIN { eval { Carp::croak() } }
};
print $warning ? "not ok 9\n#$warning" : "ok 9\n";
@


1.1
log
@Initial revision
@
text
@@


1.1.1.1
log
@stock perl 5.8.0 from CPAN
@
text
@@


1.1.1.2
log
@Import of stock perl 5.8.5
@
text
@d14 1
a14 1
	if $_[0] =~ m!ok (\d+)\n at .+\b(?i:carp\.t) line \d+$! };
@


1.1.1.3
log
@perl 5.8.6 from CPAN
@
text
@a3 1
	require './test.pl';
d8 1
a8 1
plan tests => 19;
d10 1
a10 1
ok 1;
d12 3
a14 2
{ local $SIG{__WARN__} = sub {
    like $_[0], qr/ok (\d+)\n at.+\b(?i:carp\.t) line \d+$/, 'ok 2\n' };
d16 5
a20 1
  carp  "ok 2\n";
d22 1
a22 8
}

{ local $SIG{__WARN__} = sub {
    like $_[0], qr/(\d+) at.+\b(?i:carp\.t) line \d+$/, 'carp 3' };

  carp 3;

}
d26 3
a28 2
local $SIG{__WARN__} = sub {
    like $_[0], qr/^(\d+) at.+\b(?i:carp\.t) line \d+\n\tmain::sub_4\(\) called at.+\b(?i:carp\.t) line \d+$/, 'cluck 4' };
d36 3
a38 2
{ local $SIG{__DIE__} = sub {
    like $_[0], qr/^(\d+) at.+\b(?i:carp\.t) line \d+\n\teval \Q{...}\E called at.+\b(?i:carp\.t) line \d+$/, 'croak 5' };
d40 1
a40 2
  eval { croak 5 };
}
d43 3
a45 2
    local $SIG{__DIE__} = sub {
	like $_[0], qr/^(\d+) at.+\b(?i:carp\.t) line \d+\n\teval \Q{...}\E called at.+\b(?i:carp\.t) line \d+\n\tmain::sub_6\(\) called at.+\b(?i:carp\.t) line \d+$/, 'confess 6' };
d52 1
a52 1
ok(1);
d57 2
a58 1
is($info{sub_name}, "eval '$eval'", 'caller_info API');
d65 1
a65 1
	local $SIG{__WARN__} =
d68 1
a68 1
    package Z;
d71 1
a71 87
ok !$warning, q/'...::CARP_NOT used only once' warning from Carp::Heavy/;


# tests for global variables
sub x { carp @@_ }
sub w { cluck @@_ }

# $Carp::Verbose;
{   my $aref = [
        qr/t at \S*(?i:carp.t) line \d+/,
        qr/t at \S*(?i:carp.t) line \d+\n\s*main::x\('t'\) called at \S*(?i:carp.t) line \d+/
    ];
    my $i = 0;

    for my $re (@@$aref) {
        local $Carp::Verbose = $i++;
        local $SIG{__WARN__} = sub {
            like $_[0], $re, 'Verbose';
	};
        package Z;
        main::x('t');
    }
}

# $Carp::MaxEvalLen
{   my $test_num = 1;
    for(0,4) {
        my $txt = "Carp::cluck($test_num)";
        local $Carp::MaxEvalLen = $_;
        local $SIG{__WARN__} = sub {
	    "@@_"=~/'(.+?)(?:\n|')/s;
            is length($1), length($_?substr($txt,0,$_):substr($txt,0)), 'MaxEvalLen';
	};
        eval "$txt"; $test_num++;
    }
}

# $Carp::MaxArgLen
{
    for(0,4) {
        my $arg = 'testtest';
        local $Carp::MaxArgLen = $_;
        local $SIG{__WARN__} = sub {
	    "@@_"=~/'(.+?)'/;
	    is length($1), length($_?substr($arg,0,$_):substr($arg,0)), 'MaxArgLen';
	};

        package Z;
        main::w($arg);
    }
}

# $Carp::MaxArgNums
{   my $i = 0;
    my $aref = [
        qr/1234 at \S*(?i:carp.t) line \d+\n\s*main::w\(1, 2, 3, 4\) called at \S*(?i:carp.t) line \d+/,
        qr/1234 at \S*(?i:carp.t) line \d+\n\s*main::w\(1, 2, \.\.\.\) called at \S*(?i:carp.t) line \d+/,
    ];

    for(@@$aref) {
        local $Carp::MaxArgNums = $i++;
        local $SIG{__WARN__} = sub {
	    like "@@_", $_, 'MaxArgNums';
	};

        package Z;
        main::w(1..4);
    }
}

# $Carp::CarpLevel
{   my $i = 0;
    my $aref = [
        qr/1 at \S*(?i:carp.t) line \d+\n\s*main::w\(1\) called at \S*(?i:carp.t) line \d+/,
        qr/1 at \S*(?i:carp.t) line \d+$/,
    ];

    for (@@$aref) {
        local $Carp::CarpLevel = $i++;
        local $SIG{__WARN__} = sub {
	    like "@@_", $_, 'CarpLevel';
	};

        package Z;
        main::w(1);
    }
}
@


1.1.1.4
log
@perl 5.8.8 import
@
text
@a6 2
my $Is_VMS = $^O eq 'VMS';

d9 1
a9 1
plan tests => 21;
a156 16
}


{
    local $TODO = "VMS exit status semantics don't work this way" if $Is_VMS;

    # Check that croak() and confess() don't clobber $!
    runperl(prog => 'use Carp; $@@=q{Phooey}; $!=42; croak(q{Dead})', 
	    stderr => 1);

    is($?>>8, 42, 'croak() doesn\'t clobber $!');

    runperl(prog => 'use Carp; $@@=q{Phooey}; $!=42; confess(q{Dead})', 
	    stderr => 1);

    is($?>>8, 42, 'confess() doesn\'t clobber $!');
@


1.1.1.5
log
@import perl 5.10.0 from CPAN
@
text
@d11 1
a11 1
plan tests => 37;
a74 81
# Test the location of error messages.
like(A::short(), qr/^Error at C/, "Short messages skip carped package");

{
    local @@C::ISA = "D";
    like(A::short(), qr/^Error at B/, "Short messages skip inheritance");
}

{
    local @@D::ISA = "C";
    like(A::short(), qr/^Error at B/, "Short messages skip inheritance");
}

{
    local @@D::ISA = "B";
    local @@B::ISA = "C";
    like(A::short(), qr/^Error at A/, "Inheritance is transitive");
}

{
    local @@B::ISA = "D";
    local @@C::ISA = "B";
    like(A::short(), qr/^Error at A/, "Inheritance is transitive");
}

{
    local @@C::CARP_NOT = "D";
    like(A::short(), qr/^Error at B/, "Short messages see \@@CARP_NOT");
}

{
    local @@D::CARP_NOT = "C";
    like(A::short(), qr/^Error at B/, "Short messages see \@@CARP_NOT");
}

{
    local @@D::CARP_NOT = "B";
    local @@B::CARP_NOT = "C";
    like(A::short(), qr/^Error at A/, "\@@CARP_NOT is transitive");
}

{
    local @@B::CARP_NOT = "D";
    local @@C::CARP_NOT = "B";
    like(A::short(), qr/^Error at A/, "\@@CARP_NOT is transitive");
}

{
    local @@D::ISA = "C";
    local @@D::CARP_NOT = "B";
    like(A::short(), qr/^Error at C/, "\@@CARP_NOT overrides inheritance");
}

{
    local @@D::ISA = "B";
    local @@D::CARP_NOT = "C";
    like(A::short(), qr/^Error at B/, "\@@CARP_NOT overrides inheritance");
}

# %Carp::Internal
{
    local $Carp::Internal{C} = 1;
    like(A::short(), qr/^Error at B/, "Short doesn't report Internal");
}

{
    local $Carp::Internal{D} = 1;
    like(A::long(), qr/^Error at C/, "Long doesn't report Internal");
}

# %Carp::CarpInternal
{
    local $Carp::CarpInternal{D} = 1;
    like(A::short(), qr/^Error at B/
      , "Short doesn't report calls to CarpInternal");
}

{
    local $Carp::CarpInternal{D} = 1;
    like(A::long(), qr/^Error at C/, "Long doesn't report CarpInternal");
}
d161 1
a174 54
}

# undef used to be incorrectly reported as the string "undef"
sub cluck_undef {

local $SIG{__WARN__} = sub {
    like $_[0], qr/^Bang! at.+\b(?i:carp\.t) line \d+\n\tmain::cluck_undef\(0, 'undef', 2, undef, 4\) called at.+\b(?i:carp\.t) line \d+$/, "cluck doesn't quote undef" };

cluck "Bang!"

}

cluck_undef (0, "undef", 2, undef, 4);

# line 1 "A"
package A;
sub short {
    B::short();
}

sub long {
    B::long();
}

# line 1 "B"
package B;
sub short {
    C::short();
}

sub long {
    C::long();
}

# line 1 "C"
package C;
sub short {
    D::short();
}

sub long {
    D::long();
}

# line 1 "D"
package D;
sub short {
    eval{ Carp::croak("Error") };
    return $@@;
}

sub long {
    eval{ Carp::confess("Error") };
    return $@@;
@


1.1.1.6
log
@Perl 5.12.2 from CPAN
@
text
@a6 3
use warnings;
no warnings "once";

d11 1
a11 1
plan tests => 49;
d58 1
a58 1
my $eval = "use Carp; return Carp::caller_info(0);";
d62 1
a62 1
# test for '...::CARP_NOT used only once' warning from Carp
d66 1
d73 1
a73 1
ok !$warning, q/'...::CARP_NOT used only once' warning from Carp/;
a267 35

# check that Carp respects CORE::GLOBAL::caller override after Carp
# has been compiled
for my $proper_job (0, 1) {
    print '# ', ($proper_job ? '' : 'Not '), "setting \@@DB::args in caller override\n";
    my $accum = '';
    local *CORE::GLOBAL::caller = sub {
        local *__ANON__="fakecaller";
        my @@c=CORE::caller(@@_);
        $c[0] ||= 'undef';
        $accum .= "@@c[0..3]\n";
        if ($proper_job && CORE::caller() eq 'DB') {
            package DB;
            return CORE::caller(($_[0]||0)+1);
        } else {
            return CORE::caller(($_[0]||0)+1);
        }
    };
    eval "scalar caller()";
    like( $accum, qr/main::fakecaller/, "test CORE::GLOBAL::caller override in eval");
    $accum = '';
    my $got = A::long(42);
    like( $accum, qr/main::fakecaller/, "test CORE::GLOBAL::caller override in Carp");
    my $package = 'A';
    my $warning = $proper_job ? ''
	: "\Q** Incomplete caller override detected; \@@DB::args were not set **\E";
    for (0..2) {
	my $previous_package = $package;
	++$package;
	like( $got, qr/${package}::long\($warning\) called at $previous_package line 7/, "Correct arguments for $package" );
    }
    my $arg = $proper_job ? 42 : $warning;
    like( $got, qr!A::long\($arg\) called at.+\b(?i:carp\.t) line \d+!,
	  'Correct arguments for A' );
}
@


