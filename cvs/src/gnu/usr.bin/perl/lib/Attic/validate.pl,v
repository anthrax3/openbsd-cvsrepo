head	1.9;
access;
symbols
	OPENBSD_5_3:1.8.0.18
	OPENBSD_5_3_BASE:1.8
	OPENBSD_5_2:1.8.0.16
	OPENBSD_5_2_BASE:1.8
	OPENBSD_5_1_BASE:1.8
	OPENBSD_5_1:1.8.0.14
	OPENBSD_5_0:1.8.0.12
	OPENBSD_5_0_BASE:1.8
	OPENBSD_4_9:1.8.0.10
	OPENBSD_4_9_BASE:1.8
	PERL_5_12_2:1.1.1.5
	OPENBSD_4_8:1.8.0.8
	OPENBSD_4_8_BASE:1.8
	OPENBSD_4_7:1.8.0.4
	OPENBSD_4_7_BASE:1.8
	PERL_5_10_1:1.1.1.5
	OPENBSD_4_6:1.8.0.6
	OPENBSD_4_6_BASE:1.8
	OPENBSD_4_5:1.8.0.2
	OPENBSD_4_5_BASE:1.8
	PERL_5_10_0:1.1.1.5
	OPENBSD_4_4:1.7.0.20
	OPENBSD_4_4_BASE:1.7
	OPENBSD_4_3:1.7.0.18
	OPENBSD_4_3_BASE:1.7
	OPENBSD_4_2:1.7.0.16
	OPENBSD_4_2_BASE:1.7
	OPENBSD_4_1:1.7.0.14
	OPENBSD_4_1_BASE:1.7
	OPENBSD_4_0:1.7.0.12
	OPENBSD_4_0_BASE:1.7
	PERL_5_8_8:1.1.1.4
	OPENBSD_3_9:1.7.0.10
	OPENBSD_3_9_BASE:1.7
	OPENBSD_3_8:1.7.0.8
	OPENBSD_3_8_BASE:1.7
	OPENBSD_3_7:1.7.0.6
	OPENBSD_3_7_BASE:1.7
	PERL_5_8_6:1.1.1.4
	OPENBSD_3_6:1.7.0.4
	OPENBSD_3_6_BASE:1.7
	PERL_5_8_5:1.1.1.3
	PERL_5_8_3:1.1.1.2
	OPENBSD_3_5:1.7.0.2
	OPENBSD_3_5_BASE:1.7
	PERL_5_8_2:1.1.1.2
	OPENBSD_3_4:1.6.0.4
	OPENBSD_3_4_BASE:1.6
	OPENBSD_3_3:1.6.0.2
	OPENBSD_3_3_BASE:1.6
	PERL_5_8_0:1.1.1.2
	OPENBSD_3_2:1.5.0.6
	OPENBSD_3_2_BASE:1.5
	OPENBSD_3_1:1.5.0.4
	OPENBSD_3_1_BASE:1.5
	OPENBSD_3_0:1.5.0.2
	OPENBSD_3_0_BASE:1.5
	PERL_5_6_1:1.1.1.2
	OPENBSD_2_9:1.4.0.6
	OPENBSD_2_9_BASE:1.4
	OPENBSD_2_8:1.4.0.4
	OPENBSD_2_8_BASE:1.4
	OPENBSD_2_7:1.4.0.2
	OPENBSD_2_7_BASE:1.4
	PERL_5_6_0:1.1.1.2
	OPENBSD_2_6:1.3.0.2
	OPENBSD_2_6_BASE:1.3
	PERL_500503:1.1.1.2
	CPAN:1.1.1
	OPENBSD_2_5:1.2.0.6
	OPENBSD_2_5_BASE:1.2
	OPENBSD_2_4:1.2.0.4
	OPENBSD_2_4_BASE:1.2
	OPENBSD_2_3:1.2.0.2
	OPENBSD_2_3_BASE:1.2
	OPENBSD_2_2:1.1.1.1.0.6
	OPENBSD_2_2_BASE:1.1.1.1
	OPENBSD_2_1:1.1.1.1.0.4
	OPENBSD_2_1_BASE:1.1.1.1
	OPENBSD_2_0:1.1.1.1.0.2
	OPENBSD_2_0_BASE:1.1.1.1
	perl5003:1.1.1.1
	lwall:1.1.1;
locks; strict;
comment	@# @;
expand	@o@;


1.9
date	2013.03.25.20.40.55;	author sthen;	state dead;
branches;
next	1.8;

1.8
date	2008.09.29.17.36.10;	author millert;	state Exp;
branches;
next	1.7;

1.7
date	2003.12.03.03.02.36;	author millert;	state Exp;
branches;
next	1.6;

1.6
date	2002.10.27.22.25.26;	author millert;	state Exp;
branches;
next	1.5;

1.5
date	2001.05.24.18.35.26;	author millert;	state Exp;
branches;
next	1.4;

1.4
date	2000.04.06.17.06.18;	author millert;	state Exp;
branches;
next	1.3;

1.3
date	99.04.29.22.51.48;	author millert;	state Exp;
branches;
next	1.2;

1.2
date	97.11.30.07.57.13;	author millert;	state Exp;
branches;
next	1.1;

1.1
date	96.08.19.10.12.38;	author downsj;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	96.08.19.10.12.38;	author downsj;	state Exp;
branches;
next	1.1.1.2;

1.1.1.2
date	99.04.29.22.39.58;	author millert;	state Exp;
branches;
next	1.1.1.3;

1.1.1.3
date	2004.08.09.17.46.45;	author millert;	state Exp;
branches;
next	1.1.1.4;

1.1.1.4
date	2005.01.15.21.17.12;	author millert;	state Exp;
branches;
next	1.1.1.5;

1.1.1.5
date	2008.09.29.17.18.31;	author millert;	state Exp;
branches;
next	;


desc
@@


1.9
log
@merge/resolve conflicts
(some more to do after this one)
@
text
@;# The validate routine takes a single multiline string consisting of
;# lines containing a filename plus a file test to try on it.  (The
;# file test may also be a 'cd', causing subsequent relative filenames
;# to be interpreted relative to that directory.)  After the file test
;# you may put '|| die' to make it a fatal error if the file test fails.
;# The default is '|| warn'.  The file test may optionally have a ! prepended
;# to test for the opposite condition.  If you do a cd and then list some
;# relative filenames, you may want to indent them slightly for readability.
;# If you supply your own "die" or "warn" message, you can use $file to
;# interpolate the filename.

;# Filetests may be bunched:  -rwx tests for all of -r, -w and -x.
;# Only the first failed test of the bunch will produce a warning.

;# The routine returns the number of warnings issued.

;# Usage:
;#	require "validate.pl";
;#	$warnings += do validate('
;#	/vmunix			-e || die
;#	/boot			-e || die
;#	/bin			cd
;#	    csh			-ex
;#	    csh			!-ug
;#	    sh			-ex
;#	    sh			!-ug
;#	/usr			-d || warn "What happened to $file?\n"
;#	');

sub validate {
    local($file,$test,$warnings,$oldwarnings);
    foreach $check (split(/\n/,$_[0])) {
	next if $check =~ /^#/;
	next if $check =~ /^$/;
	($file,$test) = split(' ',$check,2);
	if ($test =~ s/^(!?-)(\w{2,}\b)/$1Z/) {
	    $testlist = $2;
	    @@testlist = split(//,$testlist);
	}
	else {
	    @@testlist = ('Z');
	}
	$oldwarnings = $warnings;
	foreach $one (@@testlist) {
	    $this = $test;
	    $this =~ s/(-\w\b)/$1 \$file/g;
	    $this =~ s/-Z/-$one/;
	    $this .= ' || warn' unless $this =~ /\|\|/;
	    $this =~ s/^(.*\S)\s*\|\|\s*(die|warn)$/$1 || do valmess('$2','$1')/;
	    $this =~ s/\bcd\b/chdir (\$cwd = \$file)/g;
	    eval $this;
	    last if $warnings > $oldwarnings;
	}
    }
    $warnings;
}

sub valmess {
    local($disposition,$this) = @@_;
    $file = $cwd . '/' . $file unless $file =~ m|^/|;
    if ($this =~ /^(!?)-(\w)\s+\$file\s*$/) {
	$neg = $1;
	$tmp = $2;
	$tmp eq 'r' && ($mess = "$file is not readable by uid $>.");
	$tmp eq 'w' && ($mess = "$file is not writable by uid $>.");
	$tmp eq 'x' && ($mess = "$file is not executable by uid $>.");
	$tmp eq 'o' && ($mess = "$file is not owned by uid $>.");
	$tmp eq 'R' && ($mess = "$file is not readable by you.");
	$tmp eq 'W' && ($mess = "$file is not writable by you.");
	$tmp eq 'X' && ($mess = "$file is not executable by you.");
	$tmp eq 'O' && ($mess = "$file is not owned by you.");
	$tmp eq 'e' && ($mess = "$file does not exist.");
	$tmp eq 'z' && ($mess = "$file does not have zero size.");
	$tmp eq 's' && ($mess = "$file does not have non-zero size.");
	$tmp eq 'f' && ($mess = "$file is not a plain file.");
	$tmp eq 'd' && ($mess = "$file is not a directory.");
	$tmp eq 'l' && ($mess = "$file is not a symbolic link.");
	$tmp eq 'p' && ($mess = "$file is not a named pipe (FIFO).");
	$tmp eq 'S' && ($mess = "$file is not a socket.");
	$tmp eq 'b' && ($mess = "$file is not a block special file.");
	$tmp eq 'c' && ($mess = "$file is not a character special file.");
	$tmp eq 'u' && ($mess = "$file does not have the setuid bit set.");
	$tmp eq 'g' && ($mess = "$file does not have the setgid bit set.");
	$tmp eq 'k' && ($mess = "$file does not have the sticky bit set.");
	$tmp eq 'T' && ($mess = "$file is not a text file.");
	$tmp eq 'B' && ($mess = "$file is not a binary file.");
	if ($neg eq '!') {
	    $mess =~ s/ is not / should not be / ||
	    $mess =~ s/ does not / should not / ||
	    $mess =~ s/ not / /;
	}
	print STDERR $mess,"\n";
    }
    else {
	$this =~ s/\$file/'$file'/g;
	print STDERR "Can't do $this.\n";
    }
    if ($disposition eq 'die') { exit 1; }
    ++$warnings;
}

1;
@


1.8
log
@fix conflicts and merge in local changes to perl 5.10.0
@
text
@@


1.7
log
@Resolve conflicts for perl 5.8.2, remove old files, and add OpenBSD-specific scaffolding
@
text
@a0 2
;# $RCSfile: validate.pl,v $$Revision: 4.1 $$Date: 92/08/07 18:24:19 $

@


1.6
log
@Resolve conflicts, remove old files, merge local changes
@
text
@@


1.5
log
@merge in perl 5.6.1 with our local changes
@
text
@@


1.4
log
@perl-5.6.0 + local changes
@
text
@@


1.3
log
@perl5.005_03 (stock)
@
text
@@


1.2
log
@perl 5.004_04
@
text
@@


1.1
log
@Initial revision
@
text
@d94 1
a94 1
	print stderr $mess,"\n";
d98 1
a98 1
	print stderr "Can't do $this.\n";
@


1.1.1.1
log
@Import of Perl 5.003 into the tree.  Makefile.bsd-wrapper and
config.sh.OpenBSD are the only local changes.
@
text
@@


1.1.1.2
log
@perl5.005_03
@
text
@d94 1
a94 1
	print STDERR $mess,"\n";
d98 1
a98 1
	print STDERR "Can't do $this.\n";
@


1.1.1.3
log
@Import of stock perl 5.8.5
@
text
@d1 1
a1 1
;# $RCSfile: validate.pl,v $$Revision: 1.7 $$Date: 2003/12/03 03:02:36 $
@


1.1.1.4
log
@perl 5.8.6 from CPAN
@
text
@d1 1
a1 1
;# $RCSfile: validate.pl,v $$Revision: 4.1 $$Date: 92/08/07 18:24:19 $
@


1.1.1.5
log
@import perl 5.10.0 from CPAN
@
text
@d1 2
@


