head	1.4;
access;
symbols
	OPENBSD_5_3:1.3.0.10
	OPENBSD_5_3_BASE:1.3
	OPENBSD_5_2:1.3.0.8
	OPENBSD_5_2_BASE:1.3
	OPENBSD_5_1_BASE:1.3
	OPENBSD_5_1:1.3.0.6
	OPENBSD_5_0:1.3.0.4
	OPENBSD_5_0_BASE:1.3
	OPENBSD_4_9:1.3.0.2
	OPENBSD_4_9_BASE:1.3
	PERL_5_12_2:1.1.1.3
	OPENBSD_4_8:1.2.0.52
	OPENBSD_4_8_BASE:1.2
	OPENBSD_4_7:1.2.0.48
	OPENBSD_4_7_BASE:1.2
	PERL_5_10_1:1.1.1.2
	OPENBSD_4_6:1.2.0.50
	OPENBSD_4_6_BASE:1.2
	OPENBSD_4_5:1.2.0.46
	OPENBSD_4_5_BASE:1.2
	PERL_5_10_0:1.1.1.2
	OPENBSD_4_4:1.2.0.44
	OPENBSD_4_4_BASE:1.2
	OPENBSD_4_3:1.2.0.42
	OPENBSD_4_3_BASE:1.2
	OPENBSD_4_2:1.2.0.40
	OPENBSD_4_2_BASE:1.2
	OPENBSD_4_1:1.2.0.38
	OPENBSD_4_1_BASE:1.2
	OPENBSD_4_0:1.2.0.36
	OPENBSD_4_0_BASE:1.2
	PERL_5_8_8:1.1.1.2
	OPENBSD_3_9:1.2.0.34
	OPENBSD_3_9_BASE:1.2
	OPENBSD_3_8:1.2.0.32
	OPENBSD_3_8_BASE:1.2
	OPENBSD_3_7:1.2.0.30
	OPENBSD_3_7_BASE:1.2
	PERL_5_8_6:1.1.1.2
	OPENBSD_3_6:1.2.0.28
	OPENBSD_3_6_BASE:1.2
	PERL_5_8_5:1.1.1.2
	PERL_5_8_3:1.1.1.2
	OPENBSD_3_5:1.2.0.26
	OPENBSD_3_5_BASE:1.2
	PERL_5_8_2:1.1.1.2
	OPENBSD_3_4:1.2.0.24
	OPENBSD_3_4_BASE:1.2
	OPENBSD_3_3:1.2.0.22
	OPENBSD_3_3_BASE:1.2
	PERL_5_8_0:1.1.1.2
	OPENBSD_3_2:1.2.0.20
	OPENBSD_3_2_BASE:1.2
	OPENBSD_3_1:1.2.0.18
	OPENBSD_3_1_BASE:1.2
	OPENBSD_3_0:1.2.0.16
	OPENBSD_3_0_BASE:1.2
	PERL_5_6_1:1.1.1.2
	OPENBSD_2_9:1.2.0.14
	OPENBSD_2_9_BASE:1.2
	OPENBSD_2_8:1.2.0.12
	OPENBSD_2_8_BASE:1.2
	OPENBSD_2_7:1.2.0.10
	OPENBSD_2_7_BASE:1.2
	PERL_5_6_0:1.1.1.2
	OPENBSD_2_6:1.2.0.8
	OPENBSD_2_6_BASE:1.2
	PERL_500503:1.1.1.2
	CPAN:1.1.1
	OPENBSD_2_5:1.2.0.6
	OPENBSD_2_5_BASE:1.2
	OPENBSD_2_4:1.2.0.4
	OPENBSD_2_4_BASE:1.2
	OPENBSD_2_3:1.2.0.2
	OPENBSD_2_3_BASE:1.2
	OPENBSD_2_2:1.1.1.1.0.6
	OPENBSD_2_2_BASE:1.1.1.1
	OPENBSD_2_1:1.1.1.1.0.4
	OPENBSD_2_1_BASE:1.1.1.1
	OPENBSD_2_0:1.1.1.1.0.2
	OPENBSD_2_0_BASE:1.1.1.1
	perl5003:1.1.1.1
	lwall:1.1.1;
locks; strict;
comment	@# @;
expand	@o@;


1.4
date	2013.03.25.20.40.55;	author sthen;	state dead;
branches;
next	1.3;

1.3
date	2010.09.24.15.07.01;	author millert;	state Exp;
branches;
next	1.2;

1.2
date	97.11.30.07.57.12;	author millert;	state Exp;
branches;
next	1.1;

1.1
date	96.08.19.10.12.38;	author downsj;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	96.08.19.10.12.38;	author downsj;	state Exp;
branches;
next	1.1.1.2;

1.1.1.2
date	99.04.29.22.39.58;	author millert;	state Exp;
branches;
next	1.1.1.3;

1.1.1.3
date	2010.09.24.14.48.37;	author millert;	state Exp;
branches;
next	;


desc
@@


1.4
log
@merge/resolve conflicts
(some more to do after this one)
@
text
@;# timelocal.pl
;#
;# Usage:
;#	$time = timelocal($sec,$min,$hours,$mday,$mon,$year);
;#	$time = timegm($sec,$min,$hours,$mday,$mon,$year);

;# This file has been superseded by the Time::Local library module.
;# It is implemented as a call to that module for backwards compatibility
;# with code written for perl4; new code should use Time::Local directly.
;# This legacy library is deprecated and will be removed in a future
;# release of perl.

;# The current implementation shares with the original the questionable
;# behavior of defining the timelocal() and timegm() functions in the
;# namespace of whatever package was current when the first instance of
;# C<require 'timelocal.pl';> was executed in a program.

use Time::Local;

*timelocal::cheat = \&Time::Local::cheat;

@


1.3
log
@merge in perl 5.12.2 plus local changes
@
text
@@


1.2
log
@perl 5.004_04
@
text
@d10 2
d21 1
@


1.1
log
@Initial revision
@
text
@d7 8
a14 10
;# These routines are quite efficient and yet are always guaranteed to agree
;# with localtime() and gmtime().  We manage this by caching the start times
;# of any months we've seen before.  If we know the start time of the month,
;# we can always calculate any time within the month.  The start times
;# themselves are guessed by successive approximation starting at the
;# current time, since most dates seen in practice are close to the
;# current date.  Unlike algorithms that do a binary search (calling gmtime
;# once for each bit of the time value, resulting in 32 calls), this algorithm
;# calls it at most 6 times, and usually only once or twice.  If you hit
;# the month cache, of course, it doesn't call it at all.
d16 1
a16 5
;# timelocal is implemented using the same cache.  We just assume that we're
;# translating a GMT time, and then fudge it when we're done for the timezone
;# and daylight savings arguments.  The timezone is determined by examining
;# the result of localtime(0) when the package is initialized.  The daylight
;# savings offset is currently assumed to be one hour.
d18 1
a18 86
;# Both routines return -1 if the integer limit is hit. I.e. for dates
;# after the 1st of January, 2038 on most machines.

CONFIG: {
    package timelocal;
    
    local($[) = 0;
    @@epoch = localtime(0);
    $tzmin = $epoch[2] * 60 + $epoch[1];	# minutes east of GMT
    if ($tzmin > 0) {
	$tzmin = 24 * 60 - $tzmin;		# minutes west of GMT
	$tzmin -= 24 * 60 if $epoch[5] == 70;	# account for the date line
    }

    $SEC = 1;
    $MIN = 60 * $SEC;
    $HR = 60 * $MIN;
    $DAYS = 24 * $HR;
    $YearFix = ((gmtime(946684800))[5] == 100) ? 100 : 0;
    1;
}

sub timegm {
    package timelocal;

    local($[) = 0;
    $ym = pack(C2, @@_[5,4]);
    $cheat = $cheat{$ym} || &cheat;
    return -1 if $cheat<0;
    $cheat + $_[0] * $SEC + $_[1] * $MIN + $_[2] * $HR + ($_[3]-1) * $DAYS;
}

sub timelocal {
    package timelocal;

    local($[) = 0;
    $time = &main'timegm + $tzmin*$MIN;
    return -1 if $cheat<0;
    @@test = localtime($time);
    $time -= $HR if $test[2] != $_[2];
    $time;
}

package timelocal;

sub cheat {
    $year = $_[5];
    $month = $_[4];
    die "Month out of range 0..11 in timelocal.pl\n" 
	if $month > 11 || $month < 0;
    die "Day out of range 1..31 in timelocal.pl\n" 
	if $_[3] > 31 || $_[3] < 1;
    die "Hour out of range 0..23 in timelocal.pl\n"
	if $_[2] > 23 || $_[2] < 0;
    die "Minute out of range 0..59 in timelocal.pl\n"
	if $_[1] > 59 || $_[1] < 0;
    die "Second out of range 0..59 in timelocal.pl\n"
	if $_[0] > 59 || $_[0] < 0;
    $guess = $^T;
    @@g = gmtime($guess);
    $year += $YearFix if $year < $epoch[5];
    $lastguess = "";
    while ($diff = $year - $g[5]) {
	$guess += $diff * (363 * $DAYS);
	@@g = gmtime($guess);
	if (($thisguess = "@@g") eq $lastguess){
	    return -1; #date beyond this machine's integer limit
	}
	$lastguess = $thisguess;
    }
    while ($diff = $month - $g[4]) {
	$guess += $diff * (27 * $DAYS);
	@@g = gmtime($guess);
	if (($thisguess = "@@g") eq $lastguess){
	    return -1; #date beyond this machine's integer limit
	}
	$lastguess = $thisguess;
    }
    @@gfake = gmtime($guess-1); #still being sceptic
    if ("@@gfake" eq $lastguess){
	return -1; #date beyond this machine's integer limit
    }
    $g[3]--;
    $guess -= $g[0] * $SEC + $g[1] * $MIN + $g[2] * $HR + $g[3] * $DAYS;
    $cheat{$ym} = $guess;
}
@


1.1.1.1
log
@Import of Perl 5.003 into the tree.  Makefile.bsd-wrapper and
config.sh.OpenBSD are the only local changes.
@
text
@@


1.1.1.2
log
@perl5.005_03
@
text
@d7 10
a16 8
;# This file has been superseded by the Time::Local library module.
;# It is implemented as a call to that module for backwards compatibility
;# with code written for perl4; new code should use Time::Local directly.

;# The current implementation shares with the original the questionable
;# behavior of defining the timelocal() and timegm() functions in the
;# namespace of whatever package was current when the first instance of
;# C<require 'timelocal.pl';> was executed in a program.
d18 5
a22 1
use Time::Local;
d24 86
a109 1
*timelocal::cheat = \&Time::Local::cheat;
@


1.1.1.3
log
@Perl 5.12.2 from CPAN
@
text
@a9 2
;# This legacy library is deprecated and will be removed in a future
;# release of perl.
a18 1

@


