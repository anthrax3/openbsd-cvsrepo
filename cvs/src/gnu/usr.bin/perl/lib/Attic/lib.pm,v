head	1.6;
access;
symbols
	OPENBSD_3_2:1.5.0.6
	OPENBSD_3_2_BASE:1.5
	OPENBSD_3_1:1.5.0.4
	OPENBSD_3_1_BASE:1.5
	OPENBSD_3_0:1.5.0.2
	OPENBSD_3_0_BASE:1.5
	PERL_5_6_1:1.1.1.4
	OPENBSD_2_9:1.4.0.6
	OPENBSD_2_9_BASE:1.4
	OPENBSD_2_8:1.4.0.4
	OPENBSD_2_8_BASE:1.4
	OPENBSD_2_7:1.4.0.2
	OPENBSD_2_7_BASE:1.4
	PERL_5_6_0:1.1.1.3
	OPENBSD_2_6:1.3.0.2
	OPENBSD_2_6_BASE:1.3
	PERL_500503:1.1.1.2
	CPAN:1.1.1
	OPENBSD_2_5:1.2.0.6
	OPENBSD_2_5_BASE:1.2
	OPENBSD_2_4:1.2.0.4
	OPENBSD_2_4_BASE:1.2
	OPENBSD_2_3:1.2.0.2
	OPENBSD_2_3_BASE:1.2
	OPENBSD_2_2:1.1.1.1.0.6
	OPENBSD_2_2_BASE:1.1.1.1
	OPENBSD_2_1:1.1.1.1.0.4
	OPENBSD_2_1_BASE:1.1.1.1
	OPENBSD_2_0:1.1.1.1.0.2
	OPENBSD_2_0_BASE:1.1.1.1
	perl5003:1.1.1.1
	lwall:1.1.1;
locks; strict;
comment	@# @;


1.6
date	2002.10.27.22.25.26;	author millert;	state dead;
branches;
next	1.5;

1.5
date	2001.05.24.18.35.25;	author millert;	state Exp;
branches;
next	1.4;

1.4
date	2000.04.06.17.06.12;	author millert;	state Exp;
branches;
next	1.3;

1.3
date	99.04.29.22.51.47;	author millert;	state Exp;
branches;
next	1.2;

1.2
date	97.11.30.07.57.01;	author millert;	state Exp;
branches;
next	1.1;

1.1
date	96.08.19.10.12.35;	author downsj;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	96.08.19.10.12.35;	author downsj;	state Exp;
branches;
next	1.1.1.2;

1.1.1.2
date	99.04.29.22.39.54;	author millert;	state Exp;
branches;
next	1.1.1.3;

1.1.1.3
date	2000.04.06.16.09.38;	author millert;	state Exp;
branches;
next	1.1.1.4;

1.1.1.4
date	2001.05.24.18.23.22;	author millert;	state Exp;
branches;
next	;


desc
@@


1.6
log
@Resolve conflicts, remove old files, merge local changes
@
text
@package lib;

use 5.005_64;
use Config;

my $archname = defined($Config{'archname'}) ? $Config{'archname'} : '';
my $ver = defined($Config{'version'}) ? $Config{'version'} : '';
my @@inc_version_list = defined($Config{'inc_version_list'}) ?
   reverse split / /, $Config{'inc_version_list'} : ();

our @@ORIG_INC = @@INC;	# take a handy copy of 'original' value
our $VERSION = '0.5564';

sub import {
    shift;

    my %names;
    foreach (reverse @@_) {
	if ($_ eq '') {
	    require Carp;
	    Carp::carp("Empty compile time value given to use lib");
	}
	if (-e && ! -d _) {
	    require Carp;
	    Carp::carp("Parameter to use lib must be directory, not file");
	}
	unshift(@@INC, $_);
        # Add any previous version directories we found at configure time
        foreach my $incver (@@inc_version_list)
        {
            unshift(@@INC, "$_/$incver") if -d "$_/$incver";
        }
	# Put a corresponding archlib directory infront of $_ if it
	# looks like $_ has an archlib directory below it.
	unshift(@@INC, "$_/$archname") if -d "$_/$archname/auto";
	unshift(@@INC, "$_/$ver") if -d "$_/$ver";
	unshift(@@INC, "$_/$ver/$archname") if -d "$_/$ver/$archname";
    }

    # remove trailing duplicates
    @@INC = grep { ++$names{$_} == 1 } @@INC;
    return;
}


sub unimport {
    shift;

    my %names;
    foreach (@@_) {
	++$names{$_};
	++$names{"$_/$archname"} if -d "$_/$archname/auto";
	++$names{"$_/$ver"} if -d "$_/$ver";
	++$names{"$_/$ver/$archname"} if -d "$_/$ver/$archname";
    }

    # Remove ALL instances of each named directory.
    @@INC = grep { !exists $names{$_} } @@INC;
    return;
}

1;
__END__

=head1 NAME

lib - manipulate @@INC at compile time

=head1 SYNOPSIS

    use lib LIST;

    no lib LIST;

=head1 DESCRIPTION

This is a small simple module which simplifies the manipulation of @@INC
at compile time.

It is typically used to add extra directories to perl's search path so
that later C<use> or C<require> statements will find modules which are
not located on perl's default search path.

=head2 Adding directories to @@INC

The parameters to C<use lib> are added to the start of the perl search
path. Saying

    use lib LIST;

is I<almost> the same as saying

    BEGIN { unshift(@@INC, LIST) }

For each directory in LIST (called $dir here) the lib module also
checks to see if a directory called $dir/$archname/auto exists.
If so the $dir/$archname directory is assumed to be a corresponding
architecture specific directory and is added to @@INC in front of $dir.

To avoid memory leaks, all trailing duplicate entries in @@INC are
removed.

=head2 Deleting directories from @@INC

You should normally only add directories to @@INC.  If you need to
delete directories from @@INC take care to only delete those which you
added yourself or which you are certain are not needed by other modules
in your script.  Other modules may have added directories which they
need for correct operation.

The C<no lib> statement deletes all instances of each named directory
from @@INC.

For each directory in LIST (called $dir here) the lib module also
checks to see if a directory called $dir/$archname/auto exists.
If so the $dir/$archname directory is assumed to be a corresponding
architecture specific directory and is also deleted from @@INC.

=head2 Restoring original @@INC

When the lib module is first loaded it records the current value of @@INC
in an array C<@@lib::ORIG_INC>. To restore @@INC to that value you
can say

    @@INC = @@lib::ORIG_INC;


=head1 SEE ALSO

FindBin - optional module which deals with paths relative to the source file.

=head1 AUTHOR

Tim Bunce, 2nd June 1995.

=cut
@


1.5
log
@merge in perl 5.6.1 with our local changes
@
text
@@


1.4
log
@perl-5.6.0 + local changes
@
text
@d35 1
d53 2
@


1.3
log
@perl5.005_03 (stock)
@
text
@d3 1
a3 1
use vars qw(@@ORIG_INC);
d6 4
a9 3
my $archname = $Config{'archname'};

@@ORIG_INC = @@INC;	# take a handy copy of 'original' value
d11 2
d16 2
a18 2
	## Ignore this if not defined.
	next unless defined($_);
a21 1
							# at foo.pl line ...
d28 5
d35 2
a36 4
	if (-d "$_/$archname") {
	    unshift(@@INC, "$_/$archname")    if -d "$_/$archname/auto";
	    unshift(@@INC, "$_/$archname/$]") if -d "$_/$archname/$]/auto";
	}
d38 4
a46 1
    my $mode = shift if $_[0] =~ m/^:[A-Z]+/;
d49 1
a49 1
    foreach(@@_) {
d54 3
a56 7
    if ($mode and $mode eq ':ALL') {
	# Remove ALL instances of each named directory.
	@@INC = grep { !exists $names{$_} } @@INC;
    } else {
	# Remove INITIAL instance(s) of each named directory.
	@@INC = grep { --$names{$_} < 0   } @@INC;
    }
d81 1
a81 1
=head2 ADDING DIRECTORIES TO @@INC
d97 2
a98 2
If LIST includes both $dir and $dir/$archname then $dir/$archname will
be added to @@INC twice (if $dir/$archname/auto exists).
d100 1
a100 1
=head2 DELETING DIRECTORIES FROM @@INC
d108 2
a109 8
By default the C<no lib> statement deletes the I<first> instance of
each named directory from @@INC.  To delete multiple instances of the
same name from @@INC you can specify the name multiple times.

To delete I<all> instances of I<all> the specified names from @@INC you can
specify ':ALL' as the first parameter of C<no lib>. For example:

    no lib qw(:ALL .);
d116 1
a116 4
If LIST includes both $dir and $dir/$archname then $dir/$archname will
be deleted from @@INC twice (if $dir/$archname/auto exists).

=head2 RESTORING ORIGINAL @@INC
a133 1

@


1.2
log
@perl 5.004_04
@
text
@d21 4
@


1.1
log
@Initial revision
@
text
@d3 1
a7 1
@@ORIG_INC = ();		# (avoid typo warning)
d14 7
d24 4
a27 1
	unshift(@@INC, "$_/$archname") if -d "$_/$archname/auto";
a72 1

a91 1

a116 1

d128 1
a128 1
AddINC - optional module which deals with paths relative to the source file.
@


1.1.1.1
log
@Import of Perl 5.003 into the tree.  Makefile.bsd-wrapper and
config.sh.OpenBSD are the only local changes.
@
text
@@


1.1.1.2
log
@perl5.005_03
@
text
@a2 1
use vars qw(@@ORIG_INC);
d7 1
a13 11
	## Ignore this if not defined.
	next unless defined($_);
	if ($_ eq '') {
	    require Carp;
	    Carp::carp("Empty compile time value given to use lib");
							# at foo.pl line ...
	}
	if (-e && ! -d _) {
	    require Carp;
	    Carp::carp("Parameter to use lib must be directory, not file");
	}
d17 1
a17 4
	if (-d "$_/$archname") {
	    unshift(@@INC, "$_/$archname")    if -d "$_/$archname/auto";
	    unshift(@@INC, "$_/$archname/$]") if -d "$_/$archname/$]/auto";
	}
d63 1
d83 1
d109 1
d121 1
a121 1
FindBin - optional module which deals with paths relative to the source file.
@


1.1.1.3
log
@virgin perl 5.6.0
@
text
@d3 1
a3 1
use 5.005_64;
d6 3
a8 4
my $archname = defined($Config{'archname'}) ? $Config{'archname'} : '';
my $ver = defined($Config{'version'}) ? $Config{'version'} : '';
my @@inc_version_list = defined($Config{'inc_version_list'}) ?
   reverse split / /, $Config{'inc_version_list'} : ();
a9 2
our @@ORIG_INC = @@INC;	# take a handy copy of 'original' value
our $VERSION = '0.5564';
a12 2

    my %names;
d14 2
d19 1
a25 5
        # Add any previous version directories we found at configure time
        foreach my $incver (@@inc_version_list)
        {
            unshift(@@INC, "$_/$incver") if -d "$_/$incver";
        }
d28 4
a31 2
	unshift(@@INC, "$_/$ver") if -d "$_/$ver";
	unshift(@@INC, "$_/$ver/$archname") if -d "$_/$ver/$archname";
a32 4

    # remove trailing duplicates
    @@INC = grep { ++$names{$_} == 1 } @@INC;
    return;
d38 1
d41 1
a41 1
    foreach (@@_) {
d46 7
a52 3
    # Remove ALL instances of each named directory.
    @@INC = grep { !exists $names{$_} } @@INC;
    return;
d77 1
a77 1
=head2 Adding directories to @@INC
d93 2
a94 2
To avoid memory leaks, all trailing duplicate entries in @@INC are
removed.
d96 1
a96 1
=head2 Deleting directories from @@INC
d104 8
a111 2
The C<no lib> statement deletes all instances of each named directory
from @@INC.
d118 4
a121 1
=head2 Restoring original @@INC
d139 1
@


1.1.1.4
log
@stock perl 5.6.1
@
text
@a34 1
	unshift(@@INC, "$_/$archname") if -d "$_/$archname/auto";
a51 2
	++$names{"$_/$ver"} if -d "$_/$ver";
	++$names{"$_/$ver/$archname"} if -d "$_/$ver/$archname";
@


