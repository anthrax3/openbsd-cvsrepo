head	1.2;
access;
symbols
	OPENBSD_4_8:1.1.1.3.0.8
	OPENBSD_4_8_BASE:1.1.1.3
	OPENBSD_4_7:1.1.1.3.0.4
	OPENBSD_4_7_BASE:1.1.1.3
	PERL_5_10_1:1.1.1.3
	OPENBSD_4_6:1.1.1.3.0.6
	OPENBSD_4_6_BASE:1.1.1.3
	OPENBSD_4_5:1.1.1.3.0.2
	OPENBSD_4_5_BASE:1.1.1.3
	PERL_5_10_0:1.1.1.3
	OPENBSD_4_4:1.1.1.2.0.18
	OPENBSD_4_4_BASE:1.1.1.2
	OPENBSD_4_3:1.1.1.2.0.16
	OPENBSD_4_3_BASE:1.1.1.2
	OPENBSD_4_2:1.1.1.2.0.14
	OPENBSD_4_2_BASE:1.1.1.2
	OPENBSD_4_1:1.1.1.2.0.12
	OPENBSD_4_1_BASE:1.1.1.2
	OPENBSD_4_0:1.1.1.2.0.10
	OPENBSD_4_0_BASE:1.1.1.2
	PERL_5_8_8:1.1.1.2
	OPENBSD_3_9:1.1.1.2.0.8
	OPENBSD_3_9_BASE:1.1.1.2
	OPENBSD_3_8:1.1.1.2.0.6
	OPENBSD_3_8_BASE:1.1.1.2
	OPENBSD_3_7:1.1.1.2.0.4
	OPENBSD_3_7_BASE:1.1.1.2
	PERL_5_8_6:1.1.1.2
	OPENBSD_3_6:1.1.1.2.0.2
	OPENBSD_3_6_BASE:1.1.1.2
	PERL_5_8_5:1.1.1.2
	PERL_5_8_3:1.1.1.1
	OPENBSD_3_5:1.1.1.1.0.6
	OPENBSD_3_5_BASE:1.1.1.1
	PERL_5_8_2:1.1.1.1
	OPENBSD_3_4:1.1.1.1.0.4
	OPENBSD_3_4_BASE:1.1.1.1
	OPENBSD_3_3:1.1.1.1.0.2
	OPENBSD_3_3_BASE:1.1.1.1
	PERL_5_8_0:1.1.1.1
	CPAN:1.1.1;
locks; strict;
comment	@# @;
expand	@o@;


1.2
date	2010.09.24.14.59.33;	author millert;	state dead;
branches;
next	1.1;

1.1
date	2002.10.27.22.14.57;	author millert;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	2002.10.27.22.14.57;	author millert;	state Exp;
branches;
next	1.1.1.2;

1.1.1.2
date	2004.08.09.17.46.42;	author millert;	state Exp;
branches;
next	1.1.1.3;

1.1.1.3
date	2008.09.29.17.18.30;	author millert;	state Exp;
branches;
next	;


desc
@@


1.2
log
@remove files no longer in perl 5.12.2 (or that have moved)
@
text
@#!./perl

BEGIN {
    chdir 't' if -d 't';
    @@INC = '../lib';
}

use Test;
BEGIN { plan tests => 10; }

BEGIN {
    require autouse;
    eval {
        "autouse"->import('List::Util' => 'List::Util::first(&@@)');
    };
    ok( !$@@ );

    eval {
        "autouse"->import('List::Util' => 'Foo::min');
    };
    ok( $@@, qr/^autouse into different package attempted/ );

    "autouse"->import('List::Util' => qw(max first(&@@)));
}

my @@a = (1,2,3,4,5.5);
ok( max(@@a), 5.5);


# first() has a prototype of &@@.  Make sure that's preserved.
ok( (first { $_ > 3 } @@a), 4);


# Example from the docs.
use autouse 'Carp' => qw(carp croak);

{
    my @@warning;
    local $SIG{__WARN__} = sub { push @@warning, @@_ };
    carp "this carp was predeclared and autoused\n";
    ok( scalar @@warning, 1 );
    ok( $warning[0], "this carp was predeclared and autoused\n" );

    eval { croak "It is but a scratch!" };
    ok( $@@, qr/^It is but a scratch!/);
}


# Test that autouse's lazy module loading works.  We assume that nothing
# involved in this test uses Text::Soundex, which is pretty safe.
use autouse 'Text::Soundex' => qw(soundex);

my $mod_file = 'Text/Soundex.pm'; # just fine and portable for %INC
ok( !exists $INC{$mod_file} );
ok( soundex('Basset'), 'B230' );
ok( exists $INC{$mod_file} );

@


1.1
log
@Initial revision
@
text
@@


1.1.1.1
log
@stock perl 5.8.0 from CPAN
@
text
@@


1.1.1.2
log
@Import of stock perl 5.8.5
@
text
@a5 5
    require Config;
    if (($Config::Config{'extensions'} !~ m!\bList/Util\b!) ){
	print "1..0 # Skip -- Perl configured without List::Util module\n";
	exit 0;
    }
d42 1
a42 1
    ok( $warning[0], qr/^this carp was predeclared and autoused\n/ );
@


1.1.1.3
log
@import perl 5.10.0 from CPAN
@
text
@d14 1
a14 1
BEGIN { plan tests => 12; }
d54 3
a56 2
# Test that autouse's lazy module loading works.
use autouse 'Errno' => qw(EPERM);
d58 1
a58 1
my $mod_file = 'Errno.pm';   # just fine and portable for %INC
d60 1
a60 1
ok( EPERM ); # test if non-zero
a62 10
use autouse Env => "something";
eval { something() };
ok( $@@, qr/^\Qautoused module Env has unique import() method/ );

# Check that UNIVERSAL.pm doesn't interfere with modules that don't use
# Exporter and have no import() of their own.
require UNIVERSAL;
autouse->import("Class::ISA" => 'self_and_super_versions');
my %versions = self_and_super_versions("Class::ISA");
ok( $versions{"Class::ISA"}, $Class::ISA::VERSION );
@


