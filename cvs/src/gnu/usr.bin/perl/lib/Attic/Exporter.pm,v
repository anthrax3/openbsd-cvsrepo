head	1.13;
access;
symbols
	OPENBSD_5_6:1.12.0.4
	OPENBSD_5_6_BASE:1.12
	PERL_5_18_2:1.1.1.12
	PERL:1.1.1
	OPENBSD_5_5:1.11.0.6
	OPENBSD_5_5_BASE:1.11
	OPENBSD_5_4:1.11.0.2
	OPENBSD_5_4_BASE:1.11
	PERL_5_16_3:1.1.1.11
	OPENBSD_5_3:1.10.0.10
	OPENBSD_5_3_BASE:1.10
	OPENBSD_5_2:1.10.0.8
	OPENBSD_5_2_BASE:1.10
	OPENBSD_5_1_BASE:1.10
	OPENBSD_5_1:1.10.0.6
	OPENBSD_5_0:1.10.0.4
	OPENBSD_5_0_BASE:1.10
	OPENBSD_4_9:1.10.0.2
	OPENBSD_4_9_BASE:1.10
	PERL_5_12_2:1.1.1.10
	OPENBSD_4_8:1.9.0.4
	OPENBSD_4_8_BASE:1.9
	OPENBSD_4_7:1.9.0.2
	OPENBSD_4_7_BASE:1.9
	PERL_5_10_1:1.1.1.9
	OPENBSD_4_6:1.8.0.6
	OPENBSD_4_6_BASE:1.8
	OPENBSD_4_5:1.8.0.2
	OPENBSD_4_5_BASE:1.8
	PERL_5_10_0:1.1.1.8
	OPENBSD_4_4:1.7.0.18
	OPENBSD_4_4_BASE:1.7
	OPENBSD_4_3:1.7.0.16
	OPENBSD_4_3_BASE:1.7
	OPENBSD_4_2:1.7.0.14
	OPENBSD_4_2_BASE:1.7
	OPENBSD_4_1:1.7.0.12
	OPENBSD_4_1_BASE:1.7
	OPENBSD_4_0:1.7.0.10
	OPENBSD_4_0_BASE:1.7
	PERL_5_8_8:1.1.1.7
	OPENBSD_3_9:1.7.0.8
	OPENBSD_3_9_BASE:1.7
	OPENBSD_3_8:1.7.0.6
	OPENBSD_3_8_BASE:1.7
	OPENBSD_3_7:1.7.0.4
	OPENBSD_3_7_BASE:1.7
	PERL_5_8_6:1.1.1.7
	OPENBSD_3_6:1.7.0.2
	OPENBSD_3_6_BASE:1.7
	PERL_5_8_5:1.1.1.7
	PERL_5_8_3:1.1.1.6
	OPENBSD_3_5:1.5.0.2
	OPENBSD_3_5_BASE:1.5
	PERL_5_8_2:1.1.1.5
	OPENBSD_3_4:1.4.0.4
	OPENBSD_3_4_BASE:1.4
	OPENBSD_3_3:1.4.0.2
	OPENBSD_3_3_BASE:1.4
	PERL_5_8_0:1.1.1.4
	OPENBSD_3_2:1.3.0.12
	OPENBSD_3_2_BASE:1.3
	OPENBSD_3_1:1.3.0.10
	OPENBSD_3_1_BASE:1.3
	OPENBSD_3_0:1.3.0.8
	OPENBSD_3_0_BASE:1.3
	PERL_5_6_1:1.1.1.3
	OPENBSD_2_9:1.3.0.6
	OPENBSD_2_9_BASE:1.3
	OPENBSD_2_8:1.3.0.4
	OPENBSD_2_8_BASE:1.3
	OPENBSD_2_7:1.3.0.2
	OPENBSD_2_7_BASE:1.3
	PERL_5_6_0:1.1.1.3
	OPENBSD_2_6:1.2.0.8
	OPENBSD_2_6_BASE:1.2
	PERL_500503:1.1.1.2
	CPAN:1.1.1
	OPENBSD_2_5:1.2.0.6
	OPENBSD_2_5_BASE:1.2
	OPENBSD_2_4:1.2.0.4
	OPENBSD_2_4_BASE:1.2
	OPENBSD_2_3:1.2.0.2
	OPENBSD_2_3_BASE:1.2
	OPENBSD_2_2:1.1.1.1.0.6
	OPENBSD_2_2_BASE:1.1.1.1
	OPENBSD_2_1:1.1.1.1.0.4
	OPENBSD_2_1_BASE:1.1.1.1
	OPENBSD_2_0:1.1.1.1.0.2
	OPENBSD_2_0_BASE:1.1.1.1
	perl5003:1.1.1.1
	lwall:1.1.1;
locks; strict;
comment	@# @;
expand	@o@;


1.13
date	2014.11.17.20.57.06;	author afresh1;	state dead;
branches;
next	1.12;
commitid	QP75iYx42Uo7mMxO;

1.12
date	2014.03.24.15.05.27;	author afresh1;	state Exp;
branches;
next	1.11;

1.11
date	2013.03.25.20.40.55;	author sthen;	state Exp;
branches;
next	1.10;

1.10
date	2010.09.24.15.06.58;	author millert;	state Exp;
branches;
next	1.9;

1.9
date	2009.10.12.18.24.38;	author millert;	state Exp;
branches;
next	1.8;

1.8
date	2008.09.29.17.36.09;	author millert;	state Exp;
branches;
next	1.7;

1.7
date	2004.08.09.18.09.28;	author millert;	state Exp;
branches;
next	1.6;

1.6
date	2004.04.07.21.33.04;	author millert;	state Exp;
branches;
next	1.5;

1.5
date	2003.12.03.03.02.35;	author millert;	state Exp;
branches;
next	1.4;

1.4
date	2002.10.27.22.25.25;	author millert;	state Exp;
branches;
next	1.3;

1.3
date	2000.04.06.17.06.05;	author millert;	state Exp;
branches;
next	1.2;

1.2
date	97.11.30.07.56.42;	author millert;	state Exp;
branches;
next	1.1;

1.1
date	96.08.19.10.12.30;	author downsj;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	96.08.19.10.12.30;	author downsj;	state Exp;
branches;
next	1.1.1.2;

1.1.1.2
date	99.04.29.22.39.47;	author millert;	state Exp;
branches;
next	1.1.1.3;

1.1.1.3
date	2000.04.06.16.09.35;	author millert;	state Exp;
branches;
next	1.1.1.4;

1.1.1.4
date	2002.10.27.22.14.58;	author millert;	state Exp;
branches;
next	1.1.1.5;

1.1.1.5
date	2003.12.03.02.43.58;	author millert;	state Exp;
branches;
next	1.1.1.6;

1.1.1.6
date	2004.04.07.21.13.13;	author millert;	state Exp;
branches;
next	1.1.1.7;

1.1.1.7
date	2004.08.09.17.46.40;	author millert;	state Exp;
branches;
next	1.1.1.8;

1.1.1.8
date	2008.09.29.17.18.29;	author millert;	state Exp;
branches;
next	1.1.1.9;

1.1.1.9
date	2009.10.12.18.10.49;	author millert;	state Exp;
branches;
next	1.1.1.10;

1.1.1.10
date	2010.09.24.14.48.36;	author millert;	state Exp;
branches;
next	1.1.1.11;

1.1.1.11
date	2013.03.25.20.08.52;	author sthen;	state Exp;
branches;
next	1.1.1.12;

1.1.1.12
date	2014.03.24.14.59.03;	author afresh1;	state Exp;
branches;
next	;


desc
@@


1.13
log
@Fix merge conflicts, remove extra files, match upstream perl-5.20.1

ok deraadt@@ sthen@@ espie@@ miod@@
@
text
@package Exporter;

require 5.006;

# Be lean.
#use strict;
#no strict 'refs';

our $Debug = 0;
our $ExportLevel = 0;
our $Verbose ||= 0;
our $VERSION = '5.68';
our (%Cache);

sub as_heavy {
  require Exporter::Heavy;
  # Unfortunately, this does not work if the caller is aliased as *name = \&foo
  # Thus the need to create a lot of identical subroutines
  my $c = (caller(1))[3];
  $c =~ s/.*:://;
  \&{"Exporter::Heavy::heavy_$c"};
}

sub export {
  goto &{as_heavy()};
}

sub import {
  my $pkg = shift;
  my $callpkg = caller($ExportLevel);

  if ($pkg eq "Exporter" and @@_ and $_[0] eq "import") {
    *{$callpkg."::import"} = \&import;
    return;
  }

  # We *need* to treat @@{"$pkg\::EXPORT_FAIL"} since Carp uses it :-(
  my $exports = \@@{"$pkg\::EXPORT"};
  # But, avoid creating things if they don't exist, which saves a couple of
  # hundred bytes per package processed.
  my $fail = ${$pkg . '::'}{EXPORT_FAIL} && \@@{"$pkg\::EXPORT_FAIL"};
  return export $pkg, $callpkg, @@_
    if $Verbose or $Debug or $fail && @@$fail > 1;
  my $export_cache = ($Cache{$pkg} ||= {});
  my $args = @@_ or @@_ = @@$exports;

  if ($args and not %$export_cache) {
    s/^&//, $export_cache->{$_} = 1
      foreach (@@$exports, @@{"$pkg\::EXPORT_OK"});
  }
  my $heavy;
  # Try very hard not to use {} and hence have to  enter scope on the foreach
  # We bomb out of the loop with last as soon as heavy is set.
  if ($args or $fail) {
    ($heavy = (/\W/ or $args and not exists $export_cache->{$_}
               or $fail and @@$fail and $_ eq $fail->[0])) and last
                 foreach (@@_);
  } else {
    ($heavy = /\W/) and last
      foreach (@@_);
  }
  return export $pkg, $callpkg, ($args ? @@_ : ()) if $heavy;
  local $SIG{__WARN__} = 
	sub {require Carp; &Carp::carp} if not $SIG{__WARN__};
  # shortcut for the common case of no type character
  *{"$callpkg\::$_"} = \&{"$pkg\::$_"} foreach @@_;
}

# Default methods

sub export_fail {
    my $self = shift;
    @@_;
}

# Unfortunately, caller(1)[3] "does not work" if the caller is aliased as
# *name = \&foo.  Thus the need to create a lot of identical subroutines
# Otherwise we could have aliased them to export().

sub export_to_level {
  goto &{as_heavy()};
}

sub export_tags {
  goto &{as_heavy()};
}

sub export_ok_tags {
  goto &{as_heavy()};
}

sub require_version {
  goto &{as_heavy()};
}

1;
__END__

=head1 NAME

Exporter - Implements default import method for modules

=head1 SYNOPSIS

In module F<YourModule.pm>:

  package YourModule;
  require Exporter;
  @@ISA = qw(Exporter);
  @@EXPORT_OK = qw(munge frobnicate);  # symbols to export on request

or

  package YourModule;
  use Exporter 'import'; # gives you Exporter's import() method directly
  @@EXPORT_OK = qw(munge frobnicate);  # symbols to export on request

In other files which wish to use C<YourModule>:

  use YourModule qw(frobnicate);      # import listed symbols
  frobnicate ($left, $right)          # calls YourModule::frobnicate

Take a look at L</Good Practices> for some variants
you will like to use in modern Perl code.

=head1 DESCRIPTION

The Exporter module implements an C<import> method which allows a module
to export functions and variables to its users' namespaces.  Many modules
use Exporter rather than implementing their own C<import> method because
Exporter provides a highly flexible interface, with an implementation optimised
for the common case.

Perl automatically calls the C<import> method when processing a
C<use> statement for a module.  Modules and C<use> are documented
in L<perlfunc> and L<perlmod>.  Understanding the concept of
modules and how the C<use> statement operates is important to
understanding the Exporter.

=head2 How to Export

The arrays C<@@EXPORT> and C<@@EXPORT_OK> in a module hold lists of
symbols that are going to be exported into the users name space by
default, or which they can request to be exported, respectively.  The
symbols can represent functions, scalars, arrays, hashes, or typeglobs.
The symbols must be given by full name with the exception that the
ampersand in front of a function is optional, e.g.

    @@EXPORT    = qw(afunc $scalar @@array);   # afunc is a function
    @@EXPORT_OK = qw(&bfunc %hash *typeglob); # explicit prefix on &bfunc

If you are only exporting function names it is recommended to omit the
ampersand, as the implementation is faster this way.

=head2 Selecting What to Export

Do B<not> export method names!

Do B<not> export anything else by default without a good reason!

Exports pollute the namespace of the module user.  If you must export
try to use C<@@EXPORT_OK> in preference to C<@@EXPORT> and avoid short or
common symbol names to reduce the risk of name clashes.

Generally anything not exported is still accessible from outside the
module using the C<YourModule::item_name> (or C<< $blessed_ref->method >>)
syntax.  By convention you can use a leading underscore on names to
informally indicate that they are 'internal' and not for public use.

(It is actually possible to get private functions by saying:

  my $subref = sub { ... };
  $subref->(@@args);            # Call it as a function
  $obj->$subref(@@args);        # Use it as a method

However if you use them for methods it is up to you to figure out
how to make inheritance work.)

As a general rule, if the module is trying to be object oriented
then export nothing.  If it's just a collection of functions then
C<@@EXPORT_OK> anything but use C<@@EXPORT> with caution.  For function and
method names use barewords in preference to names prefixed with
ampersands for the export lists.

Other module design guidelines can be found in L<perlmod>.

=head2 How to Import

In other files which wish to use your module there are three basic ways for
them to load your module and import its symbols:

=over 4

=item C<use YourModule;>

This imports all the symbols from YourModule's C<@@EXPORT> into the namespace
of the C<use> statement.

=item C<use YourModule ();>

This causes perl to load your module but does not import any symbols.

=item C<use YourModule qw(...);>

This imports only the symbols listed by the caller into their namespace.
All listed symbols must be in your C<@@EXPORT> or C<@@EXPORT_OK>, else an error
occurs.  The advanced export features of Exporter are accessed like this,
but with list entries that are syntactically distinct from symbol names.

=back

Unless you want to use its advanced features, this is probably all you
need to know to use Exporter.

=head1 Advanced Features

=head2 Specialised Import Lists

If any of the entries in an import list begins with !, : or / then
the list is treated as a series of specifications which either add to
or delete from the list of names to import.  They are processed left to
right. Specifications are in the form:

    [!]name         This name only
    [!]:DEFAULT     All names in @@EXPORT
    [!]:tag         All names in $EXPORT_TAGS{tag} anonymous list
    [!]/pattern/    All names in @@EXPORT and @@EXPORT_OK which match

A leading ! indicates that matching names should be deleted from the
list of names to import.  If the first specification is a deletion it
is treated as though preceded by :DEFAULT.  If you just want to import
extra names in addition to the default set you will still need to
include :DEFAULT explicitly.

e.g., F<Module.pm> defines:

    @@EXPORT      = qw(A1 A2 A3 A4 A5);
    @@EXPORT_OK   = qw(B1 B2 B3 B4 B5);
    %EXPORT_TAGS = (T1 => [qw(A1 A2 B1 B2)], T2 => [qw(A1 A2 B3 B4)]);

Note that you cannot use tags in @@EXPORT or @@EXPORT_OK.

Names in EXPORT_TAGS must also appear in @@EXPORT or @@EXPORT_OK.

An application using Module can say something like:

    use Module qw(:DEFAULT :T2 !B3 A3);

Other examples include:

    use Socket qw(!/^[AP]F_/ !SOMAXCONN !SOL_SOCKET);
    use POSIX  qw(:errno_h :termios_h !TCSADRAIN !/^EXIT/);

Remember that most patterns (using //) will need to be anchored
with a leading ^, e.g., C</^EXIT/> rather than C</EXIT/>.

You can say C<BEGIN { $Exporter::Verbose=1 }> to see how the
specifications are being processed and what is actually being imported
into modules.

=head2 Exporting Without Using Exporter's import Method

Exporter has a special method, 'export_to_level' which is used in situations
where you can't directly call Exporter's
import method.  The export_to_level
method looks like:

    MyPackage->export_to_level(
	$where_to_export, $package, @@what_to_export
    );

where C<$where_to_export> is an integer telling how far up the calling stack
to export your symbols, and C<@@what_to_export> is an array telling what
symbols *to* export (usually this is C<@@_>).  The C<$package> argument is
currently unused.

For example, suppose that you have a module, A, which already has an
import function:

    package A;

    @@ISA = qw(Exporter);
    @@EXPORT_OK = qw ($b);

    sub import
    {
	$A::b = 1;     # not a very useful import method
    }

and you want to Export symbol C<$A::b> back to the module that called 
package A.  Since Exporter relies on the import method to work, via 
inheritance, as it stands Exporter::import() will never get called. 
Instead, say the following:

    package A;
    @@ISA = qw(Exporter);
    @@EXPORT_OK = qw ($b);

    sub import
    {
	$A::b = 1;
	A->export_to_level(1, @@_);
    }

This will export the symbols one level 'above' the current package - ie: to 
the program or module that used package A. 

Note: Be careful not to modify C<@@_> at all before you call export_to_level
- or people using your package will get very unexplained results!

=head2 Exporting Without Inheriting from Exporter

By including Exporter in your C<@@ISA> you inherit an Exporter's import() method
but you also inherit several other helper methods which you probably don't
want.  To avoid this you can do

  package YourModule;
  use Exporter qw( import );

which will export Exporter's own import() method into YourModule.
Everything will work as before but you won't need to include Exporter in
C<@@YourModule::ISA>.

Note: This feature was introduced in version 5.57
of Exporter, released with perl 5.8.3.

=head2 Module Version Checking

The Exporter module will convert an attempt to import a number from a
module into a call to C<< $module_name->VERSION($value) >>.  This can
be used to validate that the version of the module being used is
greater than or equal to the required version.

For historical reasons, Exporter supplies a C<require_version> method that
simply delegates to C<VERSION>.  Originally, before C<UNIVERSAL::VERSION>
existed, Exporter would call C<require_version>.

Since the C<UNIVERSAL::VERSION> method treats the C<$VERSION> number as
a simple numeric value it will regard version 1.10 as lower than
1.9.  For this reason it is strongly recommended that you use numbers
with at least two decimal places, e.g., 1.09.

=head2 Managing Unknown Symbols

In some situations you may want to prevent certain symbols from being
exported.  Typically this applies to extensions which have functions
or constants that may not exist on some systems.

The names of any symbols that cannot be exported should be listed
in the C<@@EXPORT_FAIL> array.

If a module attempts to import any of these symbols the Exporter
will give the module an opportunity to handle the situation before
generating an error.  The Exporter will call an export_fail method
with a list of the failed symbols:

  @@failed_symbols = $module_name->export_fail(@@failed_symbols);

If the C<export_fail> method returns an empty list then no error is
recorded and all the requested symbols are exported.  If the returned
list is not empty then an error is generated for each symbol and the
export fails.  The Exporter provides a default C<export_fail> method which
simply returns the list unchanged.

Uses for the C<export_fail> method include giving better error messages
for some symbols and performing lazy architectural checks (put more
symbols into C<@@EXPORT_FAIL> by default and then take them out if someone
actually tries to use them and an expensive check shows that they are
usable on that platform).

=head2 Tag Handling Utility Functions

Since the symbols listed within C<%EXPORT_TAGS> must also appear in either
C<@@EXPORT> or C<@@EXPORT_OK>, two utility functions are provided which allow
you to easily add tagged sets of symbols to C<@@EXPORT> or C<@@EXPORT_OK>:

  %EXPORT_TAGS = (foo => [qw(aa bb cc)], bar => [qw(aa cc dd)]);

  Exporter::export_tags('foo');     # add aa, bb and cc to @@EXPORT
  Exporter::export_ok_tags('bar');  # add aa, cc and dd to @@EXPORT_OK

Any names which are not tags are added to C<@@EXPORT> or C<@@EXPORT_OK>
unchanged but will trigger a warning (with C<-w>) to avoid misspelt tags
names being silently added to C<@@EXPORT> or C<@@EXPORT_OK>.  Future versions
may make this a fatal error.

=head2 Generating Combined Tags

If several symbol categories exist in C<%EXPORT_TAGS>, it's usually
useful to create the utility ":all" to simplify "use" statements.

The simplest way to do this is:

  %EXPORT_TAGS = (foo => [qw(aa bb cc)], bar => [qw(aa cc dd)]);

  # add all the other ":class" tags to the ":all" class,
  # deleting duplicates
  {
    my %seen;

    push @@{$EXPORT_TAGS{all}},
      grep {!$seen{$_}++} @@{$EXPORT_TAGS{$_}} foreach keys %EXPORT_TAGS;
  }

F<CGI.pm> creates an ":all" tag which contains some (but not really
all) of its categories.  That could be done with one small
change:

  # add some of the other ":class" tags to the ":all" class,
  # deleting duplicates
  {
    my %seen;

    push @@{$EXPORT_TAGS{all}},
      grep {!$seen{$_}++} @@{$EXPORT_TAGS{$_}}
        foreach qw/html2 html3 netscape form cgi internal/;
  }

Note that the tag names in C<%EXPORT_TAGS> don't have the leading ':'.

=head2 C<AUTOLOAD>ed Constants

Many modules make use of C<AUTOLOAD>ing for constant subroutines to
avoid having to compile and waste memory on rarely used values (see
L<perlsub> for details on constant subroutines).  Calls to such
constant subroutines are not optimized away at compile time because
they can't be checked at compile time for constancy.

Even if a prototype is available at compile time, the body of the
subroutine is not (it hasn't been C<AUTOLOAD>ed yet).  perl needs to
examine both the C<()> prototype and the body of a subroutine at
compile time to detect that it can safely replace calls to that
subroutine with the constant value.

A workaround for this is to call the constants once in a C<BEGIN> block:

   package My ;

   use Socket ;

   foo( SO_LINGER );  ## SO_LINGER NOT optimized away; called at runtime
   BEGIN { SO_LINGER }
   foo( SO_LINGER );  ## SO_LINGER optimized away at compile time.

This forces the C<AUTOLOAD> for C<SO_LINGER> to take place before
SO_LINGER is encountered later in C<My> package.

If you are writing a package that C<AUTOLOAD>s, consider forcing
an C<AUTOLOAD> for any constants explicitly imported by other packages
or which are usually used when your package is C<use>d.

=head1 Good Practices

=head2 Declaring C<@@EXPORT_OK> and Friends

When using C<Exporter> with the standard C<strict> and C<warnings>
pragmas, the C<our> keyword is needed to declare the package
variables C<@@EXPORT_OK>, C<@@EXPORT>, C<@@ISA>, etc.

  our @@ISA = qw(Exporter);
  our @@EXPORT_OK = qw(munge frobnicate);

If backward compatibility for Perls under 5.6 is important,
one must write instead a C<use vars> statement.

  use vars qw(@@ISA @@EXPORT_OK);
  @@ISA = qw(Exporter);
  @@EXPORT_OK = qw(munge frobnicate);

=head2 Playing Safe

There are some caveats with the use of runtime statements
like C<require Exporter> and the assignment to package
variables, which can very subtle for the unaware programmer.
This may happen for instance with mutually recursive
modules, which are affected by the time the relevant
constructions are executed.

The ideal (but a bit ugly) way to never have to think
about that is to use C<BEGIN> blocks.  So the first part
of the L</SYNOPSIS> code could be rewritten as:

  package YourModule;

  use strict;
  use warnings;

  our (@@ISA, @@EXPORT_OK);
  BEGIN {
     require Exporter;
     @@ISA = qw(Exporter);
     @@EXPORT_OK = qw(munge frobnicate);  # symbols to export on request
  }

The C<BEGIN> will assure that the loading of F<Exporter.pm>
and the assignments to C<@@ISA> and C<@@EXPORT_OK> happen
immediately, leaving no room for something to get awry
or just plain wrong.

With respect to loading C<Exporter> and inheriting, there
are alternatives with the use of modules like C<base> and C<parent>.

  use base qw( Exporter );
  # or
  use parent qw( Exporter );

Any of these statements are nice replacements for
C<BEGIN { require Exporter; @@ISA = qw(Exporter); }>
with the same compile-time effect.  The basic difference
is that C<base> code interacts with declared C<fields>
while C<parent> is a streamlined version of the older
C<base> code to just establish the IS-A relationship.

For more details, see the documentation and code of
L<base> and L<parent>.

Another thorough remedy to that runtime
vs. compile-time trap is to use L<Exporter::Easy>,
which is a wrapper of Exporter that allows all
boilerplate code at a single gulp in the
use statement.

   use Exporter::Easy (
       OK => [ qw(munge frobnicate) ],
   );
   # @@ISA setup is automatic
   # all assignments happen at compile time

=head2 What Not to Export

You have been warned already in L</Selecting What to Export>
to not export:

=over 4

=item *

method names (because you don't need to
and that's likely to not do what you want),

=item *

anything by default (because you don't want to surprise your users...
badly)

=item *

anything you don't need to (because less is more)

=back

There's one more item to add to this list.  Do B<not>
export variable names.  Just because C<Exporter> lets you
do that, it does not mean you should.

  @@EXPORT_OK = qw( $svar @@avar %hvar ); # DON'T!

Exporting variables is not a good idea.  They can
change under the hood, provoking horrible
effects at-a-distance, that are too hard to track
and to fix.  Trust me: they are not worth it.

To provide the capability to set/get class-wide
settings, it is best instead to provide accessors
as subroutines or class methods instead.

=head1 SEE ALSO

C<Exporter> is definitely not the only module with
symbol exporter capabilities.  At CPAN, you may find
a bunch of them.  Some are lighter.  Some
provide improved APIs and features.  Peek the one
that fits your needs.  The following is
a sample list of such modules.

    Exporter::Easy
    Exporter::Lite
    Exporter::Renaming
    Exporter::Tidy
    Sub::Exporter / Sub::Installer
    Perl6::Export / Perl6::Export::Attrs

=head1 LICENSE

This library is free software.  You can redistribute it
and/or modify it under the same terms as Perl itself.

=cut



@


1.12
log
@Merge perl-5.18.2 plus local patches, remove old files

OK espie@@ sthen@@ deraadt@@
@
text
@@


1.11
log
@merge/resolve conflicts
(some more to do after this one)
@
text
@d12 1
a12 1
our $VERSION = '5.66';
d129 1
a129 1
to export functions and variables to its users' namespaces. Many modules
d135 2
a136 2
C<use> statement for a module. Modules and C<use> are documented
in L<perlfunc> and L<perlmod>. Understanding the concept of
d155 1
a155 1
=head2 Selecting What To Export
d180 2
a181 2
then export nothing. If it's just a collection of functions then
C<@@EXPORT_OK> anything but use C<@@EXPORT> with caution. For function and
d207 1
a207 1
occurs. The advanced export features of Exporter are accessed like this,
d215 1
a215 1
=head1 Advanced features
d221 1
a221 1
or delete from the list of names to import. They are processed left to
d231 1
a231 1
is treated as though preceded by :DEFAULT. If you just want to import
d241 3
a243 2
    Note that you cannot use tags in @@EXPORT or @@EXPORT_OK.
    Names in EXPORT_TAGS must also appear in @@EXPORT or @@EXPORT_OK.
d261 1
a261 1
=head2 Exporting without using Exporter's import method
d264 2
a265 1
where you can't directly call Exporter's import method. The export_to_level
d268 3
a270 1
    MyPackage->export_to_level($where_to_export, $package, @@what_to_export);
d291 1
a291 1
package A. Since Exporter relies on the import method to work, via 
d311 1
a311 1
=head2 Exporting without inheriting from Exporter
d315 1
a315 1
want. To avoid this you can do
d330 1
a330 1
module into a call to C<< $module_name->require_version($value) >>. This can
d334 3
a336 2
The Exporter module supplies a default C<require_version> method which
checks the value of C<$VERSION> in the exporting module.
d338 1
a338 1
Since the default C<require_version> method treats the C<$VERSION> number as
d340 1
a340 1
1.9. For this reason it is strongly recommended that you use numbers
d346 1
a346 1
exported. Typically this applies to extensions which have functions
d354 1
a354 1
generating an error. The Exporter will call an export_fail method
d360 1
a360 1
recorded and all the requested symbols are exported. If the returned
d362 1
a362 1
export fails. The Exporter provides a default C<export_fail> method which
d384 1
a384 1
names being silently added to C<@@EXPORT> or C<@@EXPORT_OK>. Future versions
d387 1
a387 1
=head2 Generating combined tags
d430 1
a430 1
subroutine is not (it hasn't been C<AUTOLOAD>ed yet). perl needs to
d441 1
a441 1
   foo( SO_LINGER );     ## SO_LINGER NOT optimized away; called at runtime
d443 1
a443 1
   foo( SO_LINGER );     ## SO_LINGER optimized away at compile time.
d480 1
a480 1
about that is to use C<BEGIN> blocks. So the first part
d509 1
a509 1
with the same compile-time effect. The basic difference
d517 2
a518 2
Another thorough remedy to that runtime vs. 
compile-time trap is to use L<Exporter::Easy>,
d529 1
a529 1
=head2 What not to Export
d531 1
a531 1
You have been warned already in L</Selecting What To Export>
d552 2
a553 2
There's one more item to add to this list. Do B<not>
export variable names. Just because C<Exporter> lets you
d558 1
a558 1
Exporting variables is not a good idea. They can
d561 1
a561 1
and to fix. Trust me: they are not worth it.
d570 4
a573 4
symbol exporter capabilities. At CPAN, you may find
a bunch of them. Some are lighter. Some
provide improved APIs and features. Peek the one
that fits your needs. The following is
d585 1
a585 1
This library is free software. You can redistribute it
@


1.10
log
@merge in perl 5.12.2 plus local changes
@
text
@d12 1
a12 1
our $VERSION = '5.64_01';
d38 4
a41 1
  my($exports, $fail) = (\@@{"$pkg\::EXPORT"}, \@@{"$pkg\::EXPORT_FAIL"});
d43 1
a43 1
    if $Verbose or $Debug or @@$fail > 1;
a46 1
  local $_;
d56 1
a56 1
               or @@$fail and $_ eq $fail->[0])) and last
d64 1
a64 1
	sub {require Carp; &Carp::carp};
@


1.9
log
@Merge in perl 5.10.1
@
text
@d12 1
a12 1
our $VERSION = '5.63';
a13 3

# Carp 1.05+ does this now for us, but we may be running with an old Carp
$Carp::Internal{Exporter}++;
@


1.8
log
@fix conflicts and merge in local changes to perl 5.10.0
@
text
@d12 1
a12 1
our $VERSION = '5.62';
d14 3
a16 2
# Carp does this now for us, so we can finally live w/o Carp
#$Carp::Internal{Exporter} = 1;
d106 1
a106 1
In module YourModule.pm:
d119 1
a119 1
In other files which wish to use YourModule:
d121 1
a121 1
  use ModuleName qw(frobnicate);      # import listed symbols
d163 1
a163 1
try to use @@EXPORT_OK in preference to @@EXPORT and avoid short or
d167 1
a167 1
module using the ModuleName::item_name (or $blessed_ref-E<gt>method)
d182 1
a182 1
@@EXPORT_OK anything but use @@EXPORT with caution. For function and
d195 1
a195 1
=item C<use ModuleName;>
d197 1
a197 1
This imports all the symbols from ModuleName's @@EXPORT into the namespace
d200 1
a200 1
=item C<use ModuleName ();>
d204 1
a204 1
=item C<use ModuleName qw(...);>
d207 1
a207 1
All listed symbols must be in your @@EXPORT or @@EXPORT_OK, else an error
d236 1
a236 1
e.g., Module.pm defines:
d269 3
a271 3
where $where_to_export is an integer telling how far up the calling stack
to export your symbols, and @@what_to_export is an array telling what
symbols *to* export (usually this is @@_).  The $package argument is
d287 1
a287 1
and you want to Export symbol $A::b back to the module that called 
d310 1
a310 1
By including Exporter in your @@ISA you inherit an Exporter's import() method
d319 1
a319 1
@@YourModule::ISA.
d327 1
a327 1
module into a call to $module_name-E<gt>require_version($value). This can
d331 2
a332 2
The Exporter module supplies a default require_version method which
checks the value of $VERSION in the exporting module.
d334 1
a334 1
Since the default require_version method treats the $VERSION number as
d355 1
a355 1
If the export_fail method returns an empty list then no error is
d358 1
a358 1
export fails. The Exporter provides a default export_fail method which
d361 1
a361 1
Uses for the export_fail method include giving better error messages
d363 1
a363 1
symbols into @@EXPORT_FAIL by default and then take them out if someone
d369 3
a371 3
Since the symbols listed within %EXPORT_TAGS must also appear in either
@@EXPORT or @@EXPORT_OK, two utility functions are provided which allow
you to easily add tagged sets of symbols to @@EXPORT or @@EXPORT_OK:
d378 1
a378 1
Any names which are not tags are added to @@EXPORT or @@EXPORT_OK
d380 1
a380 1
names being silently added to @@EXPORT or @@EXPORT_OK. Future versions
d385 1
a385 1
If several symbol categories exist in %EXPORT_TAGS, it's usually
d401 1
a401 1
CGI.pm creates an ":all" tag which contains some (but not really
d415 1
a415 1
Note that the tag names in %EXPORT_TAGS don't have the leading ':'.
d585 3
@


1.7
log
@merge 5.8.5 into HEAD
remove now-unused files
crank libperl shared library major number
update Makefile.bsd-wrapper
tweak openbsd hints file for arm and m68k
@
text
@d12 1
a12 1
our $VERSION = '5.58';
d14 2
a15 1
$Carp::Internal{Exporter} = 1;
d123 3
d320 3
d446 136
@


1.6
log
@merge local changes into perl-5.8.3
@
text
@d12 1
a12 1
our $VERSION = '5.57';
d215 3
a217 3
If the first entry in an import list begins with !, : or / then the
list is treated as a series of specifications which either add to or
delete from the list of names to import. They are processed left to
@


1.5
log
@Resolve conflicts for perl 5.8.2, remove old files, and add OpenBSD-specific scaffolding
@
text
@d12 1
a12 1
our $VERSION = '5.567';
d33 5
d111 6
d300 1
a300 1
Note: Be careful not to modify '@@_' at all before you call export_to_level
d303 12
@


1.4
log
@Resolve conflicts, remove old files, merge local changes
@
text
@d12 2
a13 1
our $VERSION = '5.566';
d34 1
a34 2
  my($exports, $export_cache, $fail)
    = (\@@{"$pkg\::EXPORT"}, \%{"$pkg\::EXPORT"}, \@@{"$pkg\::EXPORT_FAIL"});
d37 1
@


1.3
log
@perl-5.6.0 + local changes
@
text
@d3 1
a3 1
require 5.001;
d5 9
a13 3
$ExportLevel = 0;
$Verbose ||= 0;
$VERSION = '5.562';
d15 1
a15 1
sub export_to_level {
d17 5
a21 1
  goto &heavy_export_to_level;
d25 1
a25 12
  require Exporter::Heavy;
  goto &heavy_export;
}

sub export_tags {
  require Exporter::Heavy;
  _push_tags((caller)[0], "EXPORT",    \@@_);
}

sub export_ok_tags {
  require Exporter::Heavy;
  _push_tags((caller)[0], "EXPORT_OK", \@@_);
d31 1
a31 1
  *exports = *{"$pkg\::EXPORT"};
d33 2
a34 1
  *fail = *{"$pkg\::EXPORT_FAIL"};
d36 7
a42 8
    if $Verbose or $Debug or @@fail > 1;
  my $args = @@_ or @@_ = @@exports;
  
  if ($args and not %exports) {
    foreach my $sym (@@exports, @@{"$pkg\::EXPORT_OK"}) {
      $sym =~ s/^&//;
      $exports{$sym} = 1;
    }
d44 10
a53 6
  if ($Verbose or $Debug 
      or grep {/\W/ or $args and not exists $exports{$_}
	       or @@fail and $_ eq $fail[0]
	       or (@@{"$pkg\::EXPORT_OK"} 
		   and $_ eq ${"$pkg\::EXPORT_OK"}[0])} @@_) {
    return export $pkg, $callpkg, ($args ? @@_ : ());
d55 1
a55 1
  #local $SIG{__WARN__} = sub {require Carp; goto &Carp::carp};
d57 3
a59 5
	sub {require Carp; local $Carp::CarpLevel = 1; &Carp::carp};
  foreach $sym (@@_) {
    # shortcut for the common case of no type character
    *{"$callpkg\::$sym"} = \&{"$pkg\::$sym"};
  }
d62 1
a62 1
1;
a63 11
# A simple self test harness. Change 'require Carp' to 'use Carp ()' for testing.
# package main; eval(join('',<DATA>)) or die $@@ unless caller;
__END__
package Test;
$INC{'Exporter.pm'} = 1;
@@ISA = qw(Exporter);
@@EXPORT      = qw(A1 A2 A3 A4 A5);
@@EXPORT_OK   = qw(B1 B2 B3 B4 B5);
%EXPORT_TAGS = (T1=>[qw(A1 A2 B1 B2)], T2=>[qw(A1 A2 B3 B4)], T3=>[qw(X3)]);
@@EXPORT_FAIL = qw(B4);
Exporter::export_ok_tags('T3', 'unknown_tag');
d65 22
a86 1
    map { "Test::$_" } @@_	# edit symbols just as an example
a88 7
package main;
$Exporter::Verbose = 1;
#import Test;
#import Test qw(X3);		# export ok via export_ok_tags()
#import Test qw(:T1 !A2 /5/ !/3/ B5);
import Test qw(:T2 !B4);
import Test qw(:T2);		# should fail
d90 1
d98 1
a98 1
In module ModuleName.pm:
d100 1
a100 1
  package ModuleName;
d103 1
d105 1
a105 7
  @@EXPORT = qw(...);            # symbols to export by default
  @@EXPORT_OK = qw(...);         # symbols to export on request
  %EXPORT_TAGS = tag => [...];  # define names for sets of symbols

In other files which wish to use ModuleName:

  use ModuleName;               # import default symbols into my package
d107 2
a108 3
  use ModuleName qw(...);       # import listed symbols into my package

  use ModuleName ();            # do not import any symbols
d112 5
a116 2
The Exporter module implements a default C<import> method which
many modules choose to inherit rather than implement their own.
d136 3
d157 2
a158 1
  &$subref;
d160 2
a161 2
But there's no way to call that directly as a method, since a method
must have a name in the symbol table.)
d165 3
a167 1
@@EXPORT_OK anything but use @@EXPORT with caution.
d171 30
d244 1
a244 1
=head2 Exporting without using Export's import method
d247 1
a247 1
where you can't directly call Export's import method. The export_to_level
d250 1
a250 1
MyPackage->export_to_level($where_to_export, $package, @@what_to_export);
d260 1
a260 1
package A;
d262 2
a263 2
@@ISA = qw(Exporter);
@@EXPORT_OK = qw ($b);
d265 4
a268 4
sub import
{
    $A::b = 1;     # not a very useful import method
}
d275 9
a283 9
package A;
@@ISA = qw(Exporter);
@@EXPORT_OK = qw ($b);

sub import
{
    $A::b = 1;
    A->export_to_level(1, @@_);
}
d350 65
@


1.2
log
@perl 5.004_04
@
text
@a4 5
#
# We go to a lot of trouble not to 'require Carp' at file scope,
#  because Carp requires Exporter, and something has to give.
#

d6 2
a7 143
$Verbose = 0 unless $Verbose;

sub export {

    # First make import warnings look like they're coming from the "use".
    local $SIG{__WARN__} = sub {
	my $text = shift;
	if ($text =~ s/ at \S*Exporter.pm line \d+.*\n//) {
	    require Carp;
	    local $Carp::CarpLevel = 1;	# ignore package calling us too.
	    Carp::carp($text);
	}
	else {
	    warn $text;
	}
    };
    local $SIG{__DIE__} = sub {
	require Carp;
	local $Carp::CarpLevel = 1;	# ignore package calling us too.
	Carp::croak("$_[0]Illegal null symbol in \@@${1}::EXPORT")
	    if $_[0] =~ /^Unable to create sub named "(.*?)::"/;
    };

    my($pkg, $callpkg, @@imports) = @@_;
    my($type, $sym, $oops);
    *exports = *{"${pkg}::EXPORT"};

    if (@@imports) {
	if (!%exports) {
	    grep(s/^&//, @@exports);
	    @@exports{@@exports} = (1) x @@exports;
	    my $ok = \@@{"${pkg}::EXPORT_OK"};
	    if (@@$ok) {
		grep(s/^&//, @@$ok);
		@@exports{@@$ok} = (1) x @@$ok;
	    }
	}

	if ($imports[0] =~ m#^[/!:]#){
	    my $tagsref = \%{"${pkg}::EXPORT_TAGS"};
	    my $tagdata;
	    my %imports;
	    my($remove, $spec, @@names, @@allexports);
	    # negated first item implies starting with default set:
	    unshift @@imports, ':DEFAULT' if $imports[0] =~ m/^!/;
	    foreach $spec (@@imports){
		$remove = $spec =~ s/^!//;

		if ($spec =~ s/^://){
		    if ($spec eq 'DEFAULT'){
			@@names = @@exports;
		    }
		    elsif ($tagdata = $tagsref->{$spec}) {
			@@names = @@$tagdata;
		    }
		    else {
			warn qq["$spec" is not defined in %${pkg}::EXPORT_TAGS];
			++$oops;
			next;
		    }
		}
		elsif ($spec =~ m:^/(.*)/$:){
		    my $patn = $1;
		    @@allexports = keys %exports unless @@allexports; # only do keys once
		    @@names = grep(/$patn/, @@allexports); # not anchored by default
		}
		else {
		    @@names = ($spec); # is a normal symbol name
		}

		warn "Import ".($remove ? "del":"add").": @@names "
		    if $Verbose;

		if ($remove) {
		   foreach $sym (@@names) { delete $imports{$sym} } 
		}
		else {
		    @@imports{@@names} = (1) x @@names;
		}
	    }
	    @@imports = keys %imports;
	}

	foreach $sym (@@imports) {
	    if (!$exports{$sym}) {
		if ($sym =~ m/^\d/) {
		    $pkg->require_version($sym);
		    # If the version number was the only thing specified
		    # then we should act as if nothing was specified:
		    if (@@imports == 1) {
			@@imports = @@exports;
			last;
		    }
		    # We need a way to emulate 'use Foo ()' but still
		    # allow an easy version check: "use Foo 1.23, ''";
		    if (@@imports == 2 and !$imports[1]) {
			@@imports = ();
			last;
		    }
		} elsif ($sym !~ s/^&// || !$exports{$sym}) {
                    require Carp;
		    Carp::carp(qq["$sym" is not exported by the $pkg module]);
		    $oops++;
		}
	    }
	}
	if ($oops) {
	    require Carp;
	    Carp::croak("Can't continue after import errors");
	}
    }
    else {
	@@imports = @@exports;
    }

    *fail = *{"${pkg}::EXPORT_FAIL"};
    if (@@fail) {
	if (!%fail) {
	    # Build cache of symbols. Optimise the lookup by adding
	    # barewords twice... both with and without a leading &.
	    # (Technique could be applied to %exports cache at cost of memory)
	    my @@expanded = map { /^\w/ ? ($_, '&'.$_) : $_ } @@fail;
	    warn "${pkg}::EXPORT_FAIL cached: @@expanded" if $Verbose;
	    @@fail{@@expanded} = (1) x @@expanded;
	}
	my @@failed;
	foreach $sym (@@imports) { push(@@failed, $sym) if $fail{$sym} }
	if (@@failed) {
	    @@failed = $pkg->export_fail(@@failed);
	    foreach $sym (@@failed) {
                require Carp;
		Carp::carp(qq["$sym" is not implemented by the $pkg module ],
			"on this architecture");
	    }
	    if (@@failed) {
		require Carp;
		Carp::croak("Can't continue after import errors");
	    }
	}
    }

    warn "Importing into $callpkg from $pkg: ",
		join(", ",sort @@imports) if $Verbose;
d9 3
a11 13
    foreach $sym (@@imports) {
	# shortcut for the common case of no type character
	(*{"${callpkg}::$sym"} = \&{"${pkg}::$sym"}, next)
	    unless $sym =~ s/^(\W)//;
	$type = $1;
	*{"${callpkg}::$sym"} =
	    $type eq '&' ? \&{"${pkg}::$sym"} :
	    $type eq '$' ? \${"${pkg}::$sym"} :
	    $type eq '@@' ? \@@{"${pkg}::$sym"} :
	    $type eq '%' ? \%{"${pkg}::$sym"} :
	    $type eq '*' ?  *{"${pkg}::$sym"} :
	    do { require Carp; Carp::croak("Can't export symbol: $type$sym") };
    }
d14 3
a16 7
sub export_to_level
{
      my $pkg = shift;
      my ($level, $junk) = (shift, shift);  # need to get rid of first arg
                                            # we know it already.
      my $callpkg = caller($level);
      $pkg->export($callpkg, @@_);
d19 3
a21 4
sub import {
    my $pkg = shift;
    my $callpkg = caller($ExportLevel);
    export $pkg, $callpkg, @@_;
d24 3
a26 16


# Utility functions

sub _push_tags {
    my($pkg, $var, $syms) = @@_;
    my $nontag;
    *export_tags = \%{"${pkg}::EXPORT_TAGS"};
    push(@@{"${pkg}::$var"},
	map { $export_tags{$_} ? @@{$export_tags{$_}} : scalar(++$nontag,$_) }
		(@@$syms) ? @@$syms : keys %export_tags);
    if ($nontag and $^W) {
	# This may change to a die one day
	require Carp;
	Carp::carp("Some names are not tags");
    }
d29 30
a58 23
sub export_tags    { _push_tags((caller)[0], "EXPORT",    \@@_) }
sub export_ok_tags { _push_tags((caller)[0], "EXPORT_OK", \@@_) }


# Default methods

sub export_fail {
    my $self = shift;
    @@_;
}

sub require_version {
    my($self, $wanted) = @@_;
    my $pkg = ref $self || $self;
    my $version = ${"${pkg}::VERSION"};
    if (!$version or $version < $wanted) {
	$version ||= "(undef)";
	my $file = $INC{"$pkg.pm"};
	$file &&= " ($file)";
	require Carp;
	Carp::croak("$pkg $wanted required--this is only version $version$file")
    }
    $version;
d122 12
d212 1
a212 1
MyPackage->export_to_level($where_to_export, @@what_to_export);
d216 2
a217 1
symbols *to* export (usually this is @@_).
@


1.1
log
@Initial revision
@
text
@d5 5
a12 2
require Carp;

d18 8
a25 3
	$text =~ s/ at \S*Exporter.pm line \d+.*\n//;
	local $Carp::CarpLevel = 1;	# ignore package calling us too.
	Carp::carp($text);
d28 2
d104 6
d111 2
a112 1
		    warn qq["$sym" is not exported by the $pkg module];
d117 4
a120 1
	Carp::croak("Can't continue after import errors") if $oops;
d141 7
a147 2
		warn qq["$sym" is not implemented by the $pkg module ],
			"on this architecture";
a148 1
	    Carp::croak("Can't continue after import errors") if @@failed;
d166 1
a166 1
		Carp::croak("Can't export symbol: $type$sym");
d170 9
d186 1
d196 5
a200 2
    # This may change to a die one day
    Carp::carp("Some names are not tags") if $nontag and $^W;
d210 1
d217 8
a224 3
    my $version = ${"${pkg}::VERSION"} || "(undef)";
    Carp::croak("$pkg $wanted required--this is only version $version")
		if $version < $wanted;
d281 1
a281 1
many modules choose inherit rather than implement their own.
d300 1
a300 1
module using the ModuleName::item_name (or $blessed_ref->method)
d361 47
d411 1
a411 1
module into a call to $module_name->require_version($value). This can
d432 1
a432 1
If a module attempts to import any of these symbols the Exporter will
@


1.1.1.1
log
@Import of Perl 5.003 into the tree.  Makefile.bsd-wrapper and
config.sh.OpenBSD are the only local changes.
@
text
@@


1.1.1.2
log
@perl5.005_03
@
text
@a4 5
#
# We go to a lot of trouble not to 'require Carp' at file scope,
#  because Carp requires Exporter, and something has to give.
#

d8 2
d15 3
a17 8
	if ($text =~ s/ at \S*Exporter.pm line \d+.*\n//) {
	    require Carp;
	    local $Carp::CarpLevel = 1;	# ignore package calling us too.
	    Carp::carp($text);
	}
	else {
	    warn $text;
	}
a19 2
	require Carp;
	local $Carp::CarpLevel = 1;	# ignore package calling us too.
a93 6
		    # We need a way to emulate 'use Foo ()' but still
		    # allow an easy version check: "use Foo 1.23, ''";
		    if (@@imports == 2 and !$imports[1]) {
			@@imports = ();
			last;
		    }
d95 1
a95 2
                    require Carp;
		    Carp::carp(qq["$sym" is not exported by the $pkg module]);
d100 1
a100 4
	if ($oops) {
	    require Carp;
	    Carp::croak("Can't continue after import errors");
	}
d121 2
a122 7
                require Carp;
		Carp::carp(qq["$sym" is not implemented by the $pkg module ],
			"on this architecture");
	    }
	    if (@@failed) {
		require Carp;
		Carp::croak("Can't continue after import errors");
d124 1
d142 1
a142 1
	    do { require Carp; Carp::croak("Can't export symbol: $type$sym") };
a145 9
sub export_to_level
{
      my $pkg = shift;
      my ($level, $junk) = (shift, shift);  # need to get rid of first arg
                                            # we know it already.
      my $callpkg = caller($level);
      $pkg->export($callpkg, @@_);
}

a152 1

d162 2
a163 5
    if ($nontag and $^W) {
	# This may change to a die one day
	require Carp;
	Carp::carp("Some names are not tags");
    }
a172 1
    my $self = shift;
d179 3
a181 8
    my $version = ${"${pkg}::VERSION"};
    if (!$version or $version < $wanted) {
	$version ||= "(undef)";
	my $file = $INC{"$pkg.pm"};
	$file &&= " ($file)";
	require Carp;
	Carp::croak("$pkg $wanted required--this is only version $version$file")
    }
d238 1
a238 1
many modules choose to inherit rather than implement their own.
d257 1
a257 1
module using the ModuleName::item_name (or $blessed_ref-E<gt>method)
a317 47
=head2 Exporting without using Export's import method

Exporter has a special method, 'export_to_level' which is used in situations
where you can't directly call Export's import method. The export_to_level
method looks like:

MyPackage->export_to_level($where_to_export, @@what_to_export);

where $where_to_export is an integer telling how far up the calling stack
to export your symbols, and @@what_to_export is an array telling what
symbols *to* export (usually this is @@_).

For example, suppose that you have a module, A, which already has an
import function:

package A;

@@ISA = qw(Exporter);
@@EXPORT_OK = qw ($b);

sub import
{
    $A::b = 1;     # not a very useful import method
}

and you want to Export symbol $A::b back to the module that called 
package A. Since Exporter relies on the import method to work, via 
inheritance, as it stands Exporter::import() will never get called. 
Instead, say the following:

package A;
@@ISA = qw(Exporter);
@@EXPORT_OK = qw ($b);

sub import
{
    $A::b = 1;
    A->export_to_level(1, @@_);
}

This will export the symbols one level 'above' the current package - ie: to 
the program or module that used package A. 

Note: Be careful not to modify '@@_' at all before you call export_to_level
- or people using your package will get very unexplained results!


d321 1
a321 1
module into a call to $module_name-E<gt>require_version($value). This can
d342 1
a342 1
If a module attempts to import any of these symbols the Exporter
@


1.1.1.3
log
@virgin perl 5.6.0
@
text
@d5 5
d11 143
a153 2
$Verbose ||= 0;
$VERSION = '5.562';
d155 13
a167 3
sub export_to_level {
  require Exporter::Heavy;
  goto &heavy_export_to_level;
d170 7
a176 3
sub export {
  require Exporter::Heavy;
  goto &heavy_export;
d179 4
a182 3
sub export_tags {
  require Exporter::Heavy;
  _push_tags((caller)[0], "EXPORT",    \@@_);
d185 16
a200 3
sub export_ok_tags {
  require Exporter::Heavy;
  _push_tags((caller)[0], "EXPORT_OK", \@@_);
d203 23
a225 30
sub import {
  my $pkg = shift;
  my $callpkg = caller($ExportLevel);
  *exports = *{"$pkg\::EXPORT"};
  # We *need* to treat @@{"$pkg\::EXPORT_FAIL"} since Carp uses it :-(
  *fail = *{"$pkg\::EXPORT_FAIL"};
  return export $pkg, $callpkg, @@_
    if $Verbose or $Debug or @@fail > 1;
  my $args = @@_ or @@_ = @@exports;
  
  if ($args and not %exports) {
    foreach my $sym (@@exports, @@{"$pkg\::EXPORT_OK"}) {
      $sym =~ s/^&//;
      $exports{$sym} = 1;
    }
  }
  if ($Verbose or $Debug 
      or grep {/\W/ or $args and not exists $exports{$_}
	       or @@fail and $_ eq $fail[0]
	       or (@@{"$pkg\::EXPORT_OK"} 
		   and $_ eq ${"$pkg\::EXPORT_OK"}[0])} @@_) {
    return export $pkg, $callpkg, ($args ? @@_ : ());
  }
  #local $SIG{__WARN__} = sub {require Carp; goto &Carp::carp};
  local $SIG{__WARN__} = 
	sub {require Carp; local $Carp::CarpLevel = 1; &Carp::carp};
  foreach $sym (@@_) {
    # shortcut for the common case of no type character
    *{"$callpkg\::$sym"} = \&{"$pkg\::$sym"};
  }
a288 12
=head2 How to Export

The arrays C<@@EXPORT> and C<@@EXPORT_OK> in a module hold lists of
symbols that are going to be exported into the users name space by
default, or which they can request to be exported, respectively.  The
symbols can represent functions, scalars, arrays, hashes, or typeglobs.
The symbols must be given by full name with the exception that the
ampersand in front of a function is optional, e.g.

    @@EXPORT    = qw(afunc $scalar @@array);   # afunc is a function
    @@EXPORT_OK = qw(&bfunc %hash *typeglob); # explicit prefix on &bfunc

d367 1
a367 1
MyPackage->export_to_level($where_to_export, $package, @@what_to_export);
d371 1
a371 2
symbols *to* export (usually this is @@_).  The $package argument is
currently unused.
@


1.1.1.4
log
@stock perl 5.8.0 from CPAN
@
text
@d3 1
a3 1
require 5.006;
d5 3
a7 9
# Be lean.
#use strict;
#no strict 'refs';

our $Debug = 0;
our $ExportLevel = 0;
our $Verbose ||= 0;
our $VERSION = '5.566';
$Carp::Internal{Exporter} = 1;
d9 1
a9 1
sub as_heavy {
d11 1
a11 5
  # Unfortunately, this does not work if the caller is aliased as *name = \&foo
  # Thus the need to create a lot of identical subroutines
  my $c = (caller(1))[3];
  $c =~ s/.*:://;
  \&{"Exporter::Heavy::heavy_$c"};
d15 12
a26 1
  goto &{as_heavy()};
d32 1
a32 1

d34 1
a34 2
  my($exports, $export_cache, $fail)
    = (\@@{"$pkg\::EXPORT"}, \%{"$pkg\::EXPORT"}, \@@{"$pkg\::EXPORT_FAIL"});
d36 8
a43 7
    if $Verbose or $Debug or @@$fail > 1;
  my $args = @@_ or @@_ = @@$exports;

  local $_;
  if ($args and not %$export_cache) {
    s/^&//, $export_cache->{$_} = 1
      foreach (@@$exports, @@{"$pkg\::EXPORT_OK"});
d45 6
a50 10
  my $heavy;
  # Try very hard not to use {} and hence have to  enter scope on the foreach
  # We bomb out of the loop with last as soon as heavy is set.
  if ($args or $fail) {
    ($heavy = (/\W/ or $args and not exists $export_cache->{$_}
               or @@$fail and $_ eq $fail->[0])) and last
                 foreach (@@_);
  } else {
    ($heavy = /\W/) and last
      foreach (@@_);
d52 1
a52 1
  return export $pkg, $callpkg, ($args ? @@_ : ()) if $heavy;
d54 5
a58 3
	sub {require Carp; &Carp::carp};
  # shortcut for the common case of no type character
  *{"$callpkg\::$_"} = \&{"$pkg\::$_"} foreach @@_;
d61 1
a61 1
# Default methods
d63 11
d75 1
a75 22
    my $self = shift;
    @@_;
}

# Unfortunately, caller(1)[3] "does not work" if the caller is aliased as
# *name = \&foo.  Thus the need to create a lot of identical subroutines
# Otherwise we could have aliased them to export().

sub export_to_level {
  goto &{as_heavy()};
}

sub export_tags {
  goto &{as_heavy()};
}

sub export_ok_tags {
  goto &{as_heavy()};
}

sub require_version {
  goto &{as_heavy()};
d78 7
a85 1
__END__
d93 1
a93 1
In module YourModule.pm:
d95 1
a95 1
  package YourModule;
a97 1
  @@EXPORT_OK = qw(munge frobnicate);  # symbols to export on request
d99 7
a105 1
In other files which wish to use YourModule:
d107 3
a109 2
  use ModuleName qw(frobnicate);      # import listed symbols
  frobnicate ($left, $right)          # calls YourModule::frobnicate
d113 2
a114 5
The Exporter module implements an C<import> method which allows a module
to export functions and variables to its users' namespaces. Many modules
use Exporter rather than implementing their own C<import> method because
Exporter provides a highly flexible interface, with an implementation optimised
for the common case.
a133 3
If you are only exporting function names it is recommended to omit the
ampersand, as the implementation is faster this way.

d152 1
a152 2
  $subref->(@@args);            # Call it as a function
  $obj->$subref(@@args);        # Use it as a method
d154 2
a155 2
However if you use them for methods it is up to you to figure out
how to make inheritance work.)
d159 1
a159 3
@@EXPORT_OK anything but use @@EXPORT with caution. For function and
method names use barewords in preference to names prefixed with
ampersands for the export lists.
a162 30
=head2 How to Import

In other files which wish to use your module there are three basic ways for
them to load your module and import its symbols:

=over 4

=item C<use ModuleName;>

This imports all the symbols from ModuleName's @@EXPORT into the namespace
of the C<use> statement.

=item C<use ModuleName ();>

This causes perl to load your module but does not import any symbols.

=item C<use ModuleName qw(...);>

This imports only the symbols listed by the caller into their namespace.
All listed symbols must be in your @@EXPORT or @@EXPORT_OK, else an error
occurs. The advanced export features of Exporter are accessed like this,
but with list entries that are syntactically distinct from symbol names.

=back

Unless you want to use its advanced features, this is probably all you
need to know to use Exporter.

=head1 Advanced features

d206 1
a206 1
=head2 Exporting without using Exporter's import method
d209 1
a209 1
where you can't directly call Exporter's import method. The export_to_level
d212 1
a212 1
    MyPackage->export_to_level($where_to_export, $package, @@what_to_export);
d222 1
a222 1
    package A;
d224 2
a225 2
    @@ISA = qw(Exporter);
    @@EXPORT_OK = qw ($b);
d227 4
a230 4
    sub import
    {
	$A::b = 1;     # not a very useful import method
    }
d237 9
a245 9
    package A;
    @@ISA = qw(Exporter);
    @@EXPORT_OK = qw ($b);

    sub import
    {
	$A::b = 1;
	A->export_to_level(1, @@_);
    }
a311 65

=head2 Generating combined tags

If several symbol categories exist in %EXPORT_TAGS, it's usually
useful to create the utility ":all" to simplify "use" statements.

The simplest way to do this is:

  %EXPORT_TAGS = (foo => [qw(aa bb cc)], bar => [qw(aa cc dd)]);

  # add all the other ":class" tags to the ":all" class,
  # deleting duplicates
  {
    my %seen;

    push @@{$EXPORT_TAGS{all}},
      grep {!$seen{$_}++} @@{$EXPORT_TAGS{$_}} foreach keys %EXPORT_TAGS;
  }

CGI.pm creates an ":all" tag which contains some (but not really
all) of its categories.  That could be done with one small
change:

  # add some of the other ":class" tags to the ":all" class,
  # deleting duplicates
  {
    my %seen;

    push @@{$EXPORT_TAGS{all}},
      grep {!$seen{$_}++} @@{$EXPORT_TAGS{$_}}
        foreach qw/html2 html3 netscape form cgi internal/;
  }

Note that the tag names in %EXPORT_TAGS don't have the leading ':'.

=head2 C<AUTOLOAD>ed Constants

Many modules make use of C<AUTOLOAD>ing for constant subroutines to
avoid having to compile and waste memory on rarely used values (see
L<perlsub> for details on constant subroutines).  Calls to such
constant subroutines are not optimized away at compile time because
they can't be checked at compile time for constancy.

Even if a prototype is available at compile time, the body of the
subroutine is not (it hasn't been C<AUTOLOAD>ed yet). perl needs to
examine both the C<()> prototype and the body of a subroutine at
compile time to detect that it can safely replace calls to that
subroutine with the constant value.

A workaround for this is to call the constants once in a C<BEGIN> block:

   package My ;

   use Socket ;

   foo( SO_LINGER );     ## SO_LINGER NOT optimized away; called at runtime
   BEGIN { SO_LINGER }
   foo( SO_LINGER );     ## SO_LINGER optimized away at compile time.

This forces the C<AUTOLOAD> for C<SO_LINGER> to take place before
SO_LINGER is encountered later in C<My> package.

If you are writing a package that C<AUTOLOAD>s, consider forcing
an C<AUTOLOAD> for any constants explicitly imported by other packages
or which are usually used when your package is C<use>d.
@


1.1.1.5
log
@perl 5.8.2 from CPAN
@
text
@d12 1
a12 2
our $VERSION = '5.567';
our (%Cache);
d33 2
a34 1
  my($exports, $fail) = (\@@{"$pkg\::EXPORT"}, \@@{"$pkg\::EXPORT_FAIL"});
a36 1
  my $export_cache = ($Cache{$pkg} ||= {});
@


1.1.1.6
log
@perl 5.8.3 from CPAN
@
text
@d12 1
a12 1
our $VERSION = '5.57';
a32 5
  if ($pkg eq "Exporter" and @@_ and $_[0] eq "import") {
    *{$callpkg."::import"} = \&import;
    return;
  }

a105 6
or

  package YourModule;
  use Exporter 'import'; # gives you Exporter's import() method directly
  @@EXPORT_OK = qw(munge frobnicate);  # symbols to export on request

d289 1
a289 1
Note: Be careful not to modify C<@@_> at all before you call export_to_level
a291 12
=head2 Exporting without inheriting from Exporter

By including Exporter in your @@ISA you inherit an Exporter's import() method
but you also inherit several other helper methods which you probably don't
want. To avoid this you can do

  package YourModule;
  use Exporter qw( import );

which will export Exporter's own import() method into YourModule.
Everything will work as before but you won't need to include Exporter in
@@YourModule::ISA.
@


1.1.1.7
log
@Import of stock perl 5.8.5
@
text
@d12 1
a12 1
our $VERSION = '5.58';
d215 3
a217 3
If any of the entries in an import list begins with !, : or / then
the list is treated as a series of specifications which either add to
or delete from the list of names to import. They are processed left to
@


1.1.1.8
log
@import perl 5.10.0 from CPAN
@
text
@d12 1
a12 1
our $VERSION = '5.62';
d14 1
a14 2
# Carp does this now for us, so we can finally live w/o Carp
#$Carp::Internal{Exporter} = 1;
a121 3
Take a look at L</Good Practices> for some variants
you will like to use in modern Perl code.

a315 3
Note: This feature was introduced in version 5.57
of Exporter, released with perl 5.8.3.

a438 136

=head1 Good Practices

=head2 Declaring C<@@EXPORT_OK> and Friends

When using C<Exporter> with the standard C<strict> and C<warnings>
pragmas, the C<our> keyword is needed to declare the package
variables C<@@EXPORT_OK>, C<@@EXPORT>, C<@@ISA>, etc.

  our @@ISA = qw(Exporter);
  our @@EXPORT_OK = qw(munge frobnicate);

If backward compatibility for Perls under 5.6 is important,
one must write instead a C<use vars> statement.

  use vars qw(@@ISA @@EXPORT_OK);
  @@ISA = qw(Exporter);
  @@EXPORT_OK = qw(munge frobnicate);

=head2 Playing Safe

There are some caveats with the use of runtime statements
like C<require Exporter> and the assignment to package
variables, which can very subtle for the unaware programmer.
This may happen for instance with mutually recursive
modules, which are affected by the time the relevant
constructions are executed.

The ideal (but a bit ugly) way to never have to think
about that is to use C<BEGIN> blocks. So the first part
of the L</SYNOPSIS> code could be rewritten as:

  package YourModule;

  use strict;
  use warnings;

  our (@@ISA, @@EXPORT_OK);
  BEGIN {
     require Exporter;
     @@ISA = qw(Exporter);
     @@EXPORT_OK = qw(munge frobnicate);  # symbols to export on request
  }

The C<BEGIN> will assure that the loading of F<Exporter.pm>
and the assignments to C<@@ISA> and C<@@EXPORT_OK> happen
immediately, leaving no room for something to get awry
or just plain wrong.

With respect to loading C<Exporter> and inheriting, there
are alternatives with the use of modules like C<base> and C<parent>.

  use base qw( Exporter );
  # or
  use parent qw( Exporter );

Any of these statements are nice replacements for
C<BEGIN { require Exporter; @@ISA = qw(Exporter); }>
with the same compile-time effect. The basic difference
is that C<base> code interacts with declared C<fields>
while C<parent> is a streamlined version of the older
C<base> code to just establish the IS-A relationship.

For more details, see the documentation and code of
L<base> and L<parent>.

Another thorough remedy to that runtime vs. 
compile-time trap is to use L<Exporter::Easy>,
which is a wrapper of Exporter that allows all
boilerplate code at a single gulp in the
use statement.

   use Exporter::Easy (
       OK => [ qw(munge frobnicate) ],
   );
   # @@ISA setup is automatic
   # all assignments happen at compile time

=head2 What not to Export

You have been warned already in L</Selecting What To Export>
to not export:

=over 4

=item *

method names (because you don't need to
and that's likely to not do what you want),

=item *

anything by default (because you don't want to surprise your users...
badly)

=item *

anything you don't need to (because less is more)

=back

There's one more item to add to this list. Do B<not>
export variable names. Just because C<Exporter> lets you
do that, it does not mean you should.

  @@EXPORT_OK = qw( $svar @@avar %hvar ); # DON'T!

Exporting variables is not a good idea. They can
change under the hood, provoking horrible
effects at-a-distance, that are too hard to track
and to fix. Trust me: they are not worth it.

To provide the capability to set/get class-wide
settings, it is best instead to provide accessors
as subroutines or class methods instead.

=head1 SEE ALSO

C<Exporter> is definitely not the only module with
symbol exporter capabilities. At CPAN, you may find
a bunch of them. Some are lighter. Some
provide improved APIs and features. Peek the one
that fits your needs. The following is
a sample list of such modules.

    Exporter::Easy
    Exporter::Lite
    Exporter::Renaming
    Exporter::Tidy
    Sub::Exporter / Sub::Installer
    Perl6::Export / Perl6::Export::Attrs

=head1 LICENSE

This library is free software. You can redistribute it
and/or modify it under the same terms as Perl itself.
@


1.1.1.9
log
@import perl 5.10.1
@
text
@d12 1
a12 1
our $VERSION = '5.63';
d14 2
a15 3

# Carp 1.05+ does this now for us, but we may be running with an old Carp
$Carp::Internal{Exporter}++;
d105 1
a105 1
In module F<YourModule.pm>:
d118 1
a118 1
In other files which wish to use C<YourModule>:
d120 1
a120 1
  use YourModule qw(frobnicate);      # import listed symbols
d162 1
a162 1
try to use C<@@EXPORT_OK> in preference to C<@@EXPORT> and avoid short or
d166 1
a166 1
module using the C<YourModule::item_name> (or C<< $blessed_ref->method >>)
d181 1
a181 1
C<@@EXPORT_OK> anything but use C<@@EXPORT> with caution. For function and
d194 1
a194 1
=item C<use YourModule;>
d196 1
a196 1
This imports all the symbols from YourModule's C<@@EXPORT> into the namespace
d199 1
a199 1
=item C<use YourModule ();>
d203 1
a203 1
=item C<use YourModule qw(...);>
d206 1
a206 1
All listed symbols must be in your C<@@EXPORT> or C<@@EXPORT_OK>, else an error
d235 1
a235 1
e.g., F<Module.pm> defines:
d268 3
a270 3
where C<$where_to_export> is an integer telling how far up the calling stack
to export your symbols, and C<@@what_to_export> is an array telling what
symbols *to* export (usually this is C<@@_>).  The C<$package> argument is
d286 1
a286 1
and you want to Export symbol C<$A::b> back to the module that called 
d309 1
a309 1
By including Exporter in your C<@@ISA> you inherit an Exporter's import() method
d318 1
a318 1
C<@@YourModule::ISA>.
d326 1
a326 1
module into a call to C<< $module_name->require_version($value) >>. This can
d330 2
a331 2
The Exporter module supplies a default C<require_version> method which
checks the value of C<$VERSION> in the exporting module.
d333 1
a333 1
Since the default C<require_version> method treats the C<$VERSION> number as
d354 1
a354 1
If the C<export_fail> method returns an empty list then no error is
d357 1
a357 1
export fails. The Exporter provides a default C<export_fail> method which
d360 1
a360 1
Uses for the C<export_fail> method include giving better error messages
d362 1
a362 1
symbols into C<@@EXPORT_FAIL> by default and then take them out if someone
d368 3
a370 3
Since the symbols listed within C<%EXPORT_TAGS> must also appear in either
C<@@EXPORT> or C<@@EXPORT_OK>, two utility functions are provided which allow
you to easily add tagged sets of symbols to C<@@EXPORT> or C<@@EXPORT_OK>:
d377 1
a377 1
Any names which are not tags are added to C<@@EXPORT> or C<@@EXPORT_OK>
d379 1
a379 1
names being silently added to C<@@EXPORT> or C<@@EXPORT_OK>. Future versions
d384 1
a384 1
If several symbol categories exist in C<%EXPORT_TAGS>, it's usually
d400 1
a400 1
F<CGI.pm> creates an ":all" tag which contains some (but not really
d414 1
a414 1
Note that the tag names in C<%EXPORT_TAGS> don't have the leading ':'.
a583 3



@


1.1.1.10
log
@Perl 5.12.2 from CPAN
@
text
@d12 1
a12 1
our $VERSION = '5.64_01';
d14 3
@


1.1.1.11
log
@import perl 5.16.3 from CPAN - worked on by Andrew Fresh and myself
@
text
@d12 1
a12 1
our $VERSION = '5.66';
d38 1
a38 4
  my $exports = \@@{"$pkg\::EXPORT"};
  # But, avoid creating things if they don't exist, which saves a couple of
  # hundred bytes per package processed.
  my $fail = ${$pkg . '::'}{EXPORT_FAIL} && \@@{"$pkg\::EXPORT_FAIL"};
d40 1
a40 1
    if $Verbose or $Debug or $fail && @@$fail > 1;
d44 1
d54 1
a54 1
               or $fail and @@$fail and $_ eq $fail->[0])) and last
d62 1
a62 1
	sub {require Carp; &Carp::carp} if not $SIG{__WARN__};
@


1.1.1.12
log
@Import perl-5.18.2

OK espie@@ sthen@@ deraadt@@
@
text
@d12 1
a12 1
our $VERSION = '5.68';
d129 1
a129 1
to export functions and variables to its users' namespaces.  Many modules
d135 2
a136 2
C<use> statement for a module.  Modules and C<use> are documented
in L<perlfunc> and L<perlmod>.  Understanding the concept of
d155 1
a155 1
=head2 Selecting What to Export
d180 2
a181 2
then export nothing.  If it's just a collection of functions then
C<@@EXPORT_OK> anything but use C<@@EXPORT> with caution.  For function and
d207 1
a207 1
occurs.  The advanced export features of Exporter are accessed like this,
d215 1
a215 1
=head1 Advanced Features
d221 1
a221 1
or delete from the list of names to import.  They are processed left to
d231 1
a231 1
is treated as though preceded by :DEFAULT.  If you just want to import
d241 2
a242 3
Note that you cannot use tags in @@EXPORT or @@EXPORT_OK.

Names in EXPORT_TAGS must also appear in @@EXPORT or @@EXPORT_OK.
d260 1
a260 1
=head2 Exporting Without Using Exporter's import Method
d263 1
a263 2
where you can't directly call Exporter's
import method.  The export_to_level
d266 1
a266 3
    MyPackage->export_to_level(
	$where_to_export, $package, @@what_to_export
    );
d287 1
a287 1
package A.  Since Exporter relies on the import method to work, via 
d307 1
a307 1
=head2 Exporting Without Inheriting from Exporter
d311 1
a311 1
want.  To avoid this you can do
d326 1
a326 1
module into a call to C<< $module_name->VERSION($value) >>.  This can
d330 2
a331 3
For historical reasons, Exporter supplies a C<require_version> method that
simply delegates to C<VERSION>.  Originally, before C<UNIVERSAL::VERSION>
existed, Exporter would call C<require_version>.
d333 1
a333 1
Since the C<UNIVERSAL::VERSION> method treats the C<$VERSION> number as
d335 1
a335 1
1.9.  For this reason it is strongly recommended that you use numbers
d341 1
a341 1
exported.  Typically this applies to extensions which have functions
d349 1
a349 1
generating an error.  The Exporter will call an export_fail method
d355 1
a355 1
recorded and all the requested symbols are exported.  If the returned
d357 1
a357 1
export fails.  The Exporter provides a default C<export_fail> method which
d379 1
a379 1
names being silently added to C<@@EXPORT> or C<@@EXPORT_OK>.  Future versions
d382 1
a382 1
=head2 Generating Combined Tags
d425 1
a425 1
subroutine is not (it hasn't been C<AUTOLOAD>ed yet).  perl needs to
d436 1
a436 1
   foo( SO_LINGER );  ## SO_LINGER NOT optimized away; called at runtime
d438 1
a438 1
   foo( SO_LINGER );  ## SO_LINGER optimized away at compile time.
d475 1
a475 1
about that is to use C<BEGIN> blocks.  So the first part
d504 1
a504 1
with the same compile-time effect.  The basic difference
d512 2
a513 2
Another thorough remedy to that runtime
vs. compile-time trap is to use L<Exporter::Easy>,
d524 1
a524 1
=head2 What Not to Export
d526 1
a526 1
You have been warned already in L</Selecting What to Export>
d547 2
a548 2
There's one more item to add to this list.  Do B<not>
export variable names.  Just because C<Exporter> lets you
d553 1
a553 1
Exporting variables is not a good idea.  They can
d556 1
a556 1
and to fix.  Trust me: they are not worth it.
d565 4
a568 4
symbol exporter capabilities.  At CPAN, you may find
a bunch of them.  Some are lighter.  Some
provide improved APIs and features.  Peek the one
that fits your needs.  The following is
d580 1
a580 1
This library is free software.  You can redistribute it
@


