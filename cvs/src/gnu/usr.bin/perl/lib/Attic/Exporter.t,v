head	1.2;
access;
symbols
	OPENBSD_5_6:1.1.1.7.0.8
	OPENBSD_5_6_BASE:1.1.1.7
	PERL_5_18_2:1.1.1.7
	PERL:1.1.1
	OPENBSD_5_5:1.1.1.7.0.6
	OPENBSD_5_5_BASE:1.1.1.7
	OPENBSD_5_4:1.1.1.7.0.2
	OPENBSD_5_4_BASE:1.1.1.7
	PERL_5_16_3:1.1.1.7
	OPENBSD_5_3:1.1.1.6.0.10
	OPENBSD_5_3_BASE:1.1.1.6
	OPENBSD_5_2:1.1.1.6.0.8
	OPENBSD_5_2_BASE:1.1.1.6
	OPENBSD_5_1_BASE:1.1.1.6
	OPENBSD_5_1:1.1.1.6.0.6
	OPENBSD_5_0:1.1.1.6.0.4
	OPENBSD_5_0_BASE:1.1.1.6
	OPENBSD_4_9:1.1.1.6.0.2
	OPENBSD_4_9_BASE:1.1.1.6
	PERL_5_12_2:1.1.1.6
	OPENBSD_4_8:1.1.1.5.0.4
	OPENBSD_4_8_BASE:1.1.1.5
	OPENBSD_4_7:1.1.1.5.0.2
	OPENBSD_4_7_BASE:1.1.1.5
	PERL_5_10_1:1.1.1.5
	OPENBSD_4_6:1.1.1.4.0.6
	OPENBSD_4_6_BASE:1.1.1.4
	OPENBSD_4_5:1.1.1.4.0.2
	OPENBSD_4_5_BASE:1.1.1.4
	PERL_5_10_0:1.1.1.4
	OPENBSD_4_4:1.1.1.3.0.18
	OPENBSD_4_4_BASE:1.1.1.3
	OPENBSD_4_3:1.1.1.3.0.16
	OPENBSD_4_3_BASE:1.1.1.3
	OPENBSD_4_2:1.1.1.3.0.14
	OPENBSD_4_2_BASE:1.1.1.3
	OPENBSD_4_1:1.1.1.3.0.12
	OPENBSD_4_1_BASE:1.1.1.3
	OPENBSD_4_0:1.1.1.3.0.10
	OPENBSD_4_0_BASE:1.1.1.3
	PERL_5_8_8:1.1.1.3
	OPENBSD_3_9:1.1.1.3.0.8
	OPENBSD_3_9_BASE:1.1.1.3
	OPENBSD_3_8:1.1.1.3.0.6
	OPENBSD_3_8_BASE:1.1.1.3
	OPENBSD_3_7:1.1.1.3.0.4
	OPENBSD_3_7_BASE:1.1.1.3
	PERL_5_8_6:1.1.1.3
	OPENBSD_3_6:1.1.1.3.0.2
	OPENBSD_3_6_BASE:1.1.1.3
	PERL_5_8_5:1.1.1.3
	PERL_5_8_3:1.1.1.3
	OPENBSD_3_5:1.1.1.2.0.2
	OPENBSD_3_5_BASE:1.1.1.2
	PERL_5_8_2:1.1.1.2
	OPENBSD_3_4:1.1.1.1.0.4
	OPENBSD_3_4_BASE:1.1.1.1
	OPENBSD_3_3:1.1.1.1.0.2
	OPENBSD_3_3_BASE:1.1.1.1
	PERL_5_8_0:1.1.1.1
	CPAN:1.1.1;
locks; strict;
comment	@# @;
expand	@o@;


1.2
date	2014.11.17.20.57.06;	author afresh1;	state dead;
branches;
next	1.1;
commitid	QP75iYx42Uo7mMxO;

1.1
date	2002.10.27.22.14.58;	author millert;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	2002.10.27.22.14.58;	author millert;	state Exp;
branches;
next	1.1.1.2;

1.1.1.2
date	2003.12.03.02.43.58;	author millert;	state Exp;
branches;
next	1.1.1.3;

1.1.1.3
date	2004.04.07.21.13.13;	author millert;	state Exp;
branches;
next	1.1.1.4;

1.1.1.4
date	2008.09.29.17.18.29;	author millert;	state Exp;
branches;
next	1.1.1.5;

1.1.1.5
date	2009.10.12.18.10.49;	author millert;	state Exp;
branches;
next	1.1.1.6;

1.1.1.6
date	2010.09.24.14.48.38;	author millert;	state Exp;
branches;
next	1.1.1.7;

1.1.1.7
date	2013.03.25.20.08.52;	author sthen;	state Exp;
branches;
next	;


desc
@@


1.2
log
@Fix merge conflicts, remove extra files, match upstream perl-5.20.1

ok deraadt@@ sthen@@ espie@@ miod@@
@
text
@#!./perl

BEGIN {
    chdir 't' if -d 't';
    @@INC = '../lib';
}

# Can't use Test::Simple/More, they depend on Exporter.
my $test = 1;
sub ok ($;$) {
    my($ok, $name) = @@_;

    # You have to do it this way or VMS will get confused.
    printf "%sok %d%s\n", ($ok ? '' : 'not '), $test,
      (defined $name ? " - $name" : '');

    printf "# Failed test at line %d\n", (caller)[2] unless $ok;
    
    $test++;
    return $ok;
}


print "1..24\n";
require Exporter;
ok( 1, 'Exporter compiled' );


BEGIN {
    # Methods which Exporter says it implements.
    @@Exporter_Methods = qw(import
                           export_to_level
                           require_version
                           export_fail
                          );
}


package Testing;
require Exporter;
@@ISA = qw(Exporter);

# Make sure Testing can do everything its supposed to.
foreach my $meth (@@::Exporter_Methods) {
    ::ok( Testing->can($meth), "subclass can $meth()" );
}

%EXPORT_TAGS = (
                This => [qw(stuff %left)],
                That => [qw(Above the @@wailing)],
                tray => [qw(Fasten $seatbelt)],
               );
@@EXPORT    = qw(lifejacket is);
@@EXPORT_OK = qw(under &your $seat);
$VERSION = '1.05';

::ok( Testing->require_version(1.05),   'require_version()' );
eval { Testing->require_version(1.11); 1 };
::ok( $@@,                               'require_version() fail' );
::ok( Testing->require_version(0),      'require_version(0)' );

sub lifejacket  { 'lifejacket'  }
sub stuff       { 'stuff'       }
sub Above       { 'Above'       }
sub the         { 'the'         }
sub Fasten      { 'Fasten'      }
sub your        { 'your'        }
sub under       { 'under'       }
use vars qw($seatbelt $seat @@wailing %left);
$seatbelt = 'seatbelt';
$seat     = 'seat';
@@wailing = qw(AHHHHHH);
%left = ( left => "right" );

BEGIN {*is = \&Is};
sub Is { 'Is' };

Exporter::export_ok_tags;

my %tags     = map { $_ => 1 } map { @@$_ } values %EXPORT_TAGS;
my %exportok = map { $_ => 1 } @@EXPORT_OK;
my $ok = 1;
foreach my $tag (keys %tags) {
    $ok = exists $exportok{$tag};
}
::ok( $ok, 'export_ok_tags()' );


package Foo;
Testing->import;

::ok( defined &lifejacket,      'simple import' );

my $got = eval {&lifejacket};
::ok ( $@@ eq "", 'check we can call the imported subroutine')
  or print STDERR "# \$\@@ is $@@\n";
::ok ( $got eq 'lifejacket', 'and that it gave the correct result')
  or print STDERR "# expected 'lifejacket', got " .
  (defined $got ? "'$got'" : "undef") . "\n";

# The string eval is important. It stops $Foo::{is} existing when
# Testing->import is called.
::ok( eval "defined &is",
      "Import a subroutine where exporter must create the typeglob" );
my $got = eval "&is";
::ok ( $@@ eq "", 'check we can call the imported autoloaded subroutine')
  or chomp ($@@), print STDERR "# \$\@@ is $@@\n";
::ok ( $got eq 'Is', 'and that it gave the correct result')
  or print STDERR "# expected 'Is', got " .
  (defined $got ? "'$got'" : "undef") . "\n";


package Bar;
my @@imports = qw($seatbelt &Above stuff @@wailing %left);
Testing->import(@@imports);

::ok( (!grep { eval "!defined $_" } map({ /^\w/ ? "&$_" : $_ } @@imports)),
      'import by symbols' );


package Yar;
my @@tags = qw(:This :tray);
Testing->import(@@tags);

::ok( (!grep { eval "!defined $_" } map { /^\w/ ? "&$_" : $_ }
             map { @@$_ } @@{$Testing::EXPORT_TAGS{@@tags}}),
      'import by tags' );


package Arrr;
Testing->import(qw(!lifejacket));

::ok( !defined &lifejacket,     'deny import by !' );


package Mars;
Testing->import('/e/');

::ok( (!grep { eval "!defined $_" } map { /^\w/ ? "&$_" : $_ }
            grep { /e/ } @@Testing::EXPORT, @@Testing::EXPORT_OK),
      'import by regex');


package Venus;
Testing->import('!/e/');

::ok( (!grep { eval "defined $_" } map { /^\w/ ? "&$_" : $_ }
            grep { /e/ } @@Testing::EXPORT, @@Testing::EXPORT_OK),
      'deny import by regex');
::ok( !defined &lifejacket, 'further denial' );


package More::Testing;
@@ISA = qw(Exporter);
$VERSION = 0;
eval { More::Testing->require_version(0); 1 };
::ok(!$@@,       'require_version(0) and $VERSION = 0');


package Yet::More::Testing;
@@ISA = qw(Exporter);
$VERSION = 0;
eval { Yet::More::Testing->require_version(10); 1 };
::ok($@@ !~ /\(undef\)/,       'require_version(10) and $VERSION = 0');


my $warnings;
BEGIN {
    $SIG{__WARN__} = sub { $warnings = join '', @@_ };
    package Testing::Unused::Vars;
    @@ISA = qw(Exporter);
    @@EXPORT = qw(this $TODO that);

    package Foo;
    Testing::Unused::Vars->import;
}

::ok( !$warnings, 'Unused variables can be exported without warning' ) ||
  print "# $warnings\n";

@


1.1
log
@Initial revision
@
text
@@


1.1.1.1
log
@stock perl 5.8.0 from CPAN
@
text
@@


1.1.1.2
log
@perl 5.8.2 from CPAN
@
text
@d24 1
a24 1
print "1..26\n";
a180 18
package Moving::Target;
@@ISA = qw(Exporter);
@@EXPORT_OK = qw (foo);

sub foo {"foo"};
sub bar {"bar"};

package Moving::Target::Test;

Moving::Target->import (foo);

::ok (foo eq "foo", "imported foo before EXPORT_OK changed");

push @@Moving::Target::EXPORT_OK, 'bar';

Moving::Target->import (bar);

::ok (bar eq "bar", "imported bar after EXPORT_OK changed");
@


1.1.1.3
log
@perl 5.8.3 from CPAN
@
text
@d24 1
a24 1
print "1..28\n";
a198 18

package The::Import;

use Exporter 'import';

eval { import() };
::ok(\&import == \&Exporter::import, "imported the import routine");

@@EXPORT = qw( wibble );
sub wibble {return "wobble"};

package Use::The::Import;

The::Import->import;

my $val = eval { wibble() };
::ok($val eq "wobble", "exported importer worked");

@


1.1.1.4
log
@import perl 5.10.0 from CPAN
@
text
@d1 1
a1 1
#!perl -w
d4 2
a5 4
   if( $ENV{PERL_CORE} ) {
        chdir 't' if -d 't';
        @@INC = '../lib';
    }
d9 1
a9 1
my $test;
d24 3
a26 6
BEGIN {
    $test = 1;
    print "1..28\n";
    require Exporter;
    ok( 1, 'Exporter compiled' );
}
d78 1
a78 1
Exporter::export_ok_tags();
d105 1
a105 1
$got = eval "&is";
d169 1
a169 1
    local $SIG{__WARN__} = sub { $warnings = join '', @@_ };
d185 2
a186 2
sub foo {"This is foo"};
sub bar {"This is bar"};
d190 1
a190 1
Moving::Target->import ('foo');
d192 1
a192 1
::ok (foo() eq "This is foo", "imported foo before EXPORT_OK changed");
d196 1
a196 1
Moving::Target->import ('bar');
d198 1
a198 1
::ok (bar() eq "This is bar", "imported bar after EXPORT_OK changed");
d204 1
@


1.1.1.5
log
@import perl 5.10.1
@
text
@d28 1
a28 1
    print "1..30\n";
a219 5

# Check that Carp recognizes Exporter as internal to Perl 
require Carp;
::ok($Carp::Internal{Exporter}, "Carp recognizes Exporter");
::ok($Carp::Internal{'Exporter::Heavy'}, "Carp recognizes Exporter::Heavy");
@


1.1.1.6
log
@Perl 5.12.2 from CPAN
@
text
@d122 2
a123 4
::ok( (! grep { my ($s, $n) = @@$_; eval "\\$s$n != \\${s}Testing::$n" }
         map  { /^(\W)(\w+)/ ? [$1, $2] : ['&', $_] }
            @@imports),
    'import by symbols' );
d130 3
a132 5
::ok( (! grep { my ($s, $n) = @@$_; eval "\\$s$n != \\${s}Testing::$n" }
         map  { /^(\W)(\w+)/ ? [$1, $2] : ['&', $_] }
         map  { @@$_ }
            @@{$Testing::EXPORT_TAGS{@@tags}}),
    'import by tags' );
d144 3
a146 5
::ok( (! grep { my ($s, $n) = @@$_; eval "\\$s$n != \\${s}Testing::$n" }
         map  { /^(\W)(\w+)/ ? [$1, $2] : ['&', $_] }
         grep { /e/ }
            @@Testing::EXPORT, @@Testing::EXPORT_OK),
    'import by regex');
d152 3
a154 6
::ok( (! grep { my ($s, $n) = @@$_; eval "\\$s$n == \\${s}Testing::$n" }
         map  { /^(\W)(\w+)/ ? [$1, $2] : ['&', $_] }
         grep { /e/ }
            @@Testing::EXPORT, @@Testing::EXPORT_OK),
    'deny import by regex');

a222 1
eval { Carp::croak() };
@


1.1.1.7
log
@import perl 5.16.3 from CPAN - worked on by Andrew Fresh and myself
@
text
@d28 1
a28 1
    print "1..31\n";
a235 17
package Exporter::for::Tied::_;

@@ISA = 'Exporter';
@@EXPORT = 'foo';

package Tied::_;

sub TIESCALAR{bless[]}
# no tie methods!

{
 tie my $t, __PACKAGE__;
 for($t) { # $_ is now tied
  import Exporter::for::Tied::_;
 }
}
::ok(1, 'import with tied $_');
@


