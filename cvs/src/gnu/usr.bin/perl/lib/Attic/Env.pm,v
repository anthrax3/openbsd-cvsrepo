head	1.7;
access;
symbols
	OPENBSD_5_3:1.6.0.10
	OPENBSD_5_3_BASE:1.6
	OPENBSD_5_2:1.6.0.8
	OPENBSD_5_2_BASE:1.6
	OPENBSD_5_1_BASE:1.6
	OPENBSD_5_1:1.6.0.6
	OPENBSD_5_0:1.6.0.4
	OPENBSD_5_0_BASE:1.6
	OPENBSD_4_9:1.6.0.2
	OPENBSD_4_9_BASE:1.6
	PERL_5_12_2:1.1.1.5
	OPENBSD_4_8:1.5.0.32
	OPENBSD_4_8_BASE:1.5
	OPENBSD_4_7:1.5.0.28
	OPENBSD_4_7_BASE:1.5
	PERL_5_10_1:1.1.1.4
	OPENBSD_4_6:1.5.0.30
	OPENBSD_4_6_BASE:1.5
	OPENBSD_4_5:1.5.0.26
	OPENBSD_4_5_BASE:1.5
	PERL_5_10_0:1.1.1.4
	OPENBSD_4_4:1.5.0.24
	OPENBSD_4_4_BASE:1.5
	OPENBSD_4_3:1.5.0.22
	OPENBSD_4_3_BASE:1.5
	OPENBSD_4_2:1.5.0.20
	OPENBSD_4_2_BASE:1.5
	OPENBSD_4_1:1.5.0.18
	OPENBSD_4_1_BASE:1.5
	OPENBSD_4_0:1.5.0.16
	OPENBSD_4_0_BASE:1.5
	PERL_5_8_8:1.1.1.4
	OPENBSD_3_9:1.5.0.14
	OPENBSD_3_9_BASE:1.5
	OPENBSD_3_8:1.5.0.12
	OPENBSD_3_8_BASE:1.5
	OPENBSD_3_7:1.5.0.10
	OPENBSD_3_7_BASE:1.5
	PERL_5_8_6:1.1.1.4
	OPENBSD_3_6:1.5.0.8
	OPENBSD_3_6_BASE:1.5
	PERL_5_8_5:1.1.1.4
	PERL_5_8_3:1.1.1.4
	OPENBSD_3_5:1.5.0.6
	OPENBSD_3_5_BASE:1.5
	PERL_5_8_2:1.1.1.4
	OPENBSD_3_4:1.5.0.4
	OPENBSD_3_4_BASE:1.5
	OPENBSD_3_3:1.5.0.2
	OPENBSD_3_3_BASE:1.5
	PERL_5_8_0:1.1.1.4
	OPENBSD_3_2:1.4.0.12
	OPENBSD_3_2_BASE:1.4
	OPENBSD_3_1:1.4.0.10
	OPENBSD_3_1_BASE:1.4
	OPENBSD_3_0:1.4.0.8
	OPENBSD_3_0_BASE:1.4
	PERL_5_6_1:1.1.1.3
	OPENBSD_2_9:1.4.0.6
	OPENBSD_2_9_BASE:1.4
	OPENBSD_2_8:1.4.0.4
	OPENBSD_2_8_BASE:1.4
	OPENBSD_2_7:1.4.0.2
	OPENBSD_2_7_BASE:1.4
	PERL_5_6_0:1.1.1.3
	OPENBSD_2_6:1.3.0.2
	OPENBSD_2_6_BASE:1.3
	PERL_500503:1.1.1.2
	CPAN:1.1.1
	OPENBSD_2_5:1.2.0.6
	OPENBSD_2_5_BASE:1.2
	OPENBSD_2_4:1.2.0.4
	OPENBSD_2_4_BASE:1.2
	OPENBSD_2_3:1.2.0.2
	OPENBSD_2_3_BASE:1.2
	OPENBSD_2_2:1.1.1.1.0.6
	OPENBSD_2_2_BASE:1.1.1.1
	OPENBSD_2_1:1.1.1.1.0.4
	OPENBSD_2_1_BASE:1.1.1.1
	OPENBSD_2_0:1.1.1.1.0.2
	OPENBSD_2_0_BASE:1.1.1.1
	perl5003:1.1.1.1
	lwall:1.1.1;
locks; strict;
comment	@# @;
expand	@o@;


1.7
date	2013.03.25.20.40.55;	author sthen;	state dead;
branches;
next	1.6;

1.6
date	2010.09.24.15.06.58;	author millert;	state Exp;
branches;
next	1.5;

1.5
date	2002.10.27.22.25.25;	author millert;	state Exp;
branches;
next	1.4;

1.4
date	2000.04.06.17.06.05;	author millert;	state Exp;
branches;
next	1.3;

1.3
date	99.04.29.22.51.44;	author millert;	state Exp;
branches;
next	1.2;

1.2
date	97.11.30.07.56.41;	author millert;	state Exp;
branches;
next	1.1;

1.1
date	96.08.19.10.12.30;	author downsj;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	96.08.19.10.12.30;	author downsj;	state Exp;
branches;
next	1.1.1.2;

1.1.1.2
date	99.04.29.22.39.46;	author millert;	state Exp;
branches;
next	1.1.1.3;

1.1.1.3
date	2000.04.06.16.09.35;	author millert;	state Exp;
branches;
next	1.1.1.4;

1.1.1.4
date	2002.10.27.22.14.58;	author millert;	state Exp;
branches;
next	1.1.1.5;

1.1.1.5
date	2010.09.24.14.48.37;	author millert;	state Exp;
branches;
next	;


desc
@@


1.7
log
@merge/resolve conflicts
(some more to do after this one)
@
text
@package Env;

our $VERSION = '1.01';

=head1 NAME

Env - perl module that imports environment variables as scalars or arrays

=head1 SYNOPSIS

    use Env;
    use Env qw(PATH HOME TERM);
    use Env qw($SHELL @@LD_LIBRARY_PATH);

=head1 DESCRIPTION

Perl maintains environment variables in a special hash named C<%ENV>.  For
when this access method is inconvenient, the Perl module C<Env> allows
environment variables to be treated as scalar or array variables.

The C<Env::import()> function ties environment variables with suitable
names to global Perl variables with the same names.  By default it
ties all existing environment variables (C<keys %ENV>) to scalars.  If
the C<import> function receives arguments, it takes them to be a list of
variables to tie; it's okay if they don't yet exist. The scalar type
prefix '$' is inferred for any element of this list not prefixed by '$'
or '@@'. Arrays are implemented in terms of C<split> and C<join>, using
C<$Config::Config{path_sep}> as the delimiter.

After an environment variable is tied, merely use it like a normal variable.
You may access its value 

    @@path = split(/:/, $PATH);
    print join("\n", @@LD_LIBRARY_PATH), "\n";

or modify it

    $PATH .= ":.";
    push @@LD_LIBRARY_PATH, $dir;

however you'd like. Bear in mind, however, that each access to a tied array
variable requires splitting the environment variable's string anew.

The code:

    use Env qw(@@PATH);
    push @@PATH, '.';

is equivalent to:

    use Env qw(PATH);
    $PATH .= ":.";

except that if C<$ENV{PATH}> started out empty, the second approach leaves
it with the (odd) value "C<:.>", but the first approach leaves it with "C<.>".

To remove a tied environment variable from
the environment, assign it the undefined value

    undef $PATH;
    undef @@LD_LIBRARY_PATH;

=head1 LIMITATIONS

On VMS systems, arrays tied to environment variables are read-only. Attempting
to change anything will cause a warning.

=head1 AUTHOR

Chip Salzenberg E<lt>F<chip@@fin.uucp>E<gt>
and
Gregor N. Purdy E<lt>F<gregor@@focusresearch.com>E<gt>

=cut

sub import {
    my ($callpack) = caller(0);
    my $pack = shift;
    my @@vars = grep /^[\$\@@]?[A-Za-z_]\w*$/, (@@_ ? @@_ : keys(%ENV));
    return unless @@vars;

    @@vars = map { m/^[\$\@@]/ ? $_ : '$'.$_ } @@vars;

    eval "package $callpack; use vars qw(" . join(' ', @@vars) . ")";
    die $@@ if $@@;
    foreach (@@vars) {
	my ($type, $name) = m/^([\$\@@])(.*)$/;
	if ($type eq '$') {
	    tie ${"${callpack}::$name"}, Env, $name;
	} else {
	    if ($^O eq 'VMS') {
		tie @@{"${callpack}::$name"}, Env::Array::VMS, $name;
	    } else {
		tie @@{"${callpack}::$name"}, Env::Array, $name;
	    }
	}
    }
}

sub TIESCALAR {
    bless \($_[1]);
}

sub FETCH {
    my ($self) = @@_;
    $ENV{$$self};
}

sub STORE {
    my ($self, $value) = @@_;
    if (defined($value)) {
	$ENV{$$self} = $value;
    } else {
	delete $ENV{$$self};
    }
}

######################################################################

package Env::Array;
 
use Config;
use Tie::Array;

@@ISA = qw(Tie::Array);

my $sep = $Config::Config{path_sep};

sub TIEARRAY {
    bless \($_[1]);
}

sub FETCHSIZE {
    my ($self) = @@_;
    return 1 + scalar(() = $ENV{$$self} =~ /\Q$sep\E/g);
}

sub STORESIZE {
    my ($self, $size) = @@_;
    my @@temp = split($sep, $ENV{$$self});
    $#temp = $size - 1;
    $ENV{$$self} = join($sep, @@temp);
}

sub CLEAR {
    my ($self) = @@_;
    $ENV{$$self} = '';
}

sub FETCH {
    my ($self, $index) = @@_;
    return (split($sep, $ENV{$$self}))[$index];
}

sub STORE {
    my ($self, $index, $value) = @@_;
    my @@temp = split($sep, $ENV{$$self});
    $temp[$index] = $value;
    $ENV{$$self} = join($sep, @@temp);
    return $value;
}

sub EXISTS {
    my ($self, $index) = @@_;
    return $index < $self->FETCHSIZE;
}

sub DELETE {
    my ($self, $index) = @@_;
    my @@temp = split($sep, $ENV{$$self});
    my $value = splice(@@temp, $index, 1, ());
    $ENV{$$self} = join($sep, @@temp);
    return $value;
}

sub PUSH {
    my $self = shift;
    my @@temp = split($sep, $ENV{$$self});
    push @@temp, @@_;
    $ENV{$$self} = join($sep, @@temp);
    return scalar(@@temp);
}

sub POP {
    my ($self) = @@_;
    my @@temp = split($sep, $ENV{$$self});
    my $result = pop @@temp;
    $ENV{$$self} = join($sep, @@temp);
    return $result;
}

sub UNSHIFT {
    my $self = shift;
    my @@temp = split($sep, $ENV{$$self});
    my $result = unshift @@temp, @@_;
    $ENV{$$self} = join($sep, @@temp);
    return $result;
}

sub SHIFT {
    my ($self) = @@_;
    my @@temp = split($sep, $ENV{$$self});
    my $result = shift @@temp;
    $ENV{$$self} = join($sep, @@temp);
    return $result;
}

sub SPLICE {
    my $self = shift;
    my $offset = shift;
    my $length = shift;
    my @@temp = split($sep, $ENV{$$self});
    if (wantarray) {
	my @@result = splice @@temp, $self, $offset, $length, @@_;
	$ENV{$$self} = join($sep, @@temp);
	return @@result;
    } else {
	my $result = scalar splice @@temp, $offset, $length, @@_;
	$ENV{$$self} = join($sep, @@temp);
	return $result;
    }
}

######################################################################

package Env::Array::VMS;
use Tie::Array;

@@ISA = qw(Tie::Array);
 
sub TIEARRAY {
    bless \($_[1]);
}

sub FETCHSIZE {
    my ($self) = @@_;
    my $i = 0;
    while ($i < 127 and defined $ENV{$$self . ';' . $i}) { $i++; };
    return $i;
}

sub FETCH {
    my ($self, $index) = @@_;
    return $ENV{$$self . ';' . $index};
}

sub EXISTS {
    my ($self, $index) = @@_;
    return $index < $self->FETCHSIZE;
}

sub DELETE { }

1;
@


1.6
log
@merge in perl 5.12.2 plus local changes
@
text
@@


1.5
log
@Resolve conflicts, remove old files, merge local changes
@
text
@d3 1
a3 1
our $VERSION = '1.00';
d135 1
a135 2
    my @@temp = split($sep, $ENV{$$self});
    return scalar(@@temp);
d163 13
d246 7
@


1.4
log
@perl-5.6.0 + local changes
@
text
@d3 2
@


1.3
log
@perl5.005_03 (stock)
@
text
@d5 1
a5 1
Env - perl module that imports environment variables
d11 1
d15 1
a15 1
Perl maintains environment variables in a pseudo-hash named %ENV.  For
d17 1
a17 1
environment variables to be treated as simple variables.
d19 1
a19 1
The Env::import() function ties environment variables with suitable
d21 6
a26 3
does so with all existing environment variables (C<keys %ENV>).  If
the import function receives arguments, it takes them to be a list of
environment variables to tie; it's okay if they don't yet exist.
d32 1
d37 17
a54 1
however you'd like.
d59 6
d69 2
d77 1
a77 1
    my @@vars = grep /^[A-Za-z_]\w*$/, (@@_ ? @@_ : keys(%ENV));
d80 3
a82 2
    eval "package $callpack; use vars qw("
	 . join(' ', map { '$'.$_ } @@vars) . ")";
d85 10
a94 1
	tie ${"${callpack}::$_"}, Env, $_;
d114 117
@


1.2
log
@perl 5.004_04
@
text
@d48 1
a48 1
    my @@vars = @@_ ? @@_ : keys(%ENV);
d55 1
a55 1
	tie ${"${callpack}::$_"}, Env, $_ if /^[A-Za-z_]\w*$/;
@


1.1
log
@Initial revision
@
text
@d14 3
a16 4
Perl maintains environment variables in a pseudo-associative-array
named %ENV.  For when this access method is inconvenient, the Perl
module C<Env> allows environment variables to be treated as simple
variables.
d41 1
a41 1
Chip Salzenberg <chip@@fin.uucp>
d49 1
d51 3
@


1.1.1.1
log
@Import of Perl 5.003 into the tree.  Makefile.bsd-wrapper and
config.sh.OpenBSD are the only local changes.
@
text
@@


1.1.1.2
log
@perl5.005_03
@
text
@d14 4
a17 3
Perl maintains environment variables in a pseudo-hash named %ENV.  For
when this access method is inconvenient, the Perl module C<Env> allows
environment variables to be treated as simple variables.
d42 1
a42 1
Chip Salzenberg E<lt>F<chip@@fin.uucp>E<gt>
d49 1
a49 2
    my @@vars = grep /^[A-Za-z_]\w*$/, (@@_ ? @@_ : keys(%ENV));
    return unless @@vars;
a50 3
    eval "package $callpack; use vars qw("
	 . join(' ', map { '$'.$_ } @@vars) . ")";
    die $@@ if $@@;
d52 1
a52 1
	tie ${"${callpack}::$_"}, Env, $_;
@


1.1.1.3
log
@virgin perl 5.6.0
@
text
@d5 1
a5 1
Env - perl module that imports environment variables as scalars or arrays
a10 1
    use Env qw($SHELL @@LD_LIBRARY_PATH);
d14 1
a14 1
Perl maintains environment variables in a special hash named C<%ENV>.  For
d16 1
a16 1
environment variables to be treated as scalar or array variables.
d18 1
a18 1
The C<Env::import()> function ties environment variables with suitable
d20 3
a22 6
ties all existing environment variables (C<keys %ENV>) to scalars.  If
the C<import> function receives arguments, it takes them to be a list of
variables to tie; it's okay if they don't yet exist. The scalar type
prefix '$' is inferred for any element of this list not prefixed by '$'
or '@@'. Arrays are implemented in terms of C<split> and C<join>, using
C<$Config::Config{path_sep}> as the delimiter.
a27 1
    print join("\n", @@LD_LIBRARY_PATH), "\n";
a31 17
    push @@LD_LIBRARY_PATH, $dir;

however you'd like. Bear in mind, however, that each access to a tied array
variable requires splitting the environment variable's string anew.

The code:

    use Env qw(@@PATH);
    push @@PATH, '.';

is equivalent to:

    use Env qw(PATH);
    $PATH .= ":.";

except that if C<$ENV{PATH}> started out empty, the second approach leaves
it with the (odd) value "C<:.>", but the first approach leaves it with "C<.>".
d33 1
a37 6
    undef @@LD_LIBRARY_PATH;

=head1 LIMITATIONS

On VMS systems, arrays tied to environment variables are read-only. Attempting
to change anything will cause a warning.
a41 2
and
Gregor N. Purdy E<lt>F<gregor@@focusresearch.com>E<gt>
d48 1
a48 1
    my @@vars = grep /^[\$\@@]?[A-Za-z_]\w*$/, (@@_ ? @@_ : keys(%ENV));
d51 2
a52 3
    @@vars = map { m/^[\$\@@]/ ? $_ : '$'.$_ } @@vars;

    eval "package $callpack; use vars qw(" . join(' ', @@vars) . ")";
d55 1
a55 10
	my ($type, $name) = m/^([\$\@@])(.*)$/;
	if ($type eq '$') {
	    tie ${"${callpack}::$name"}, Env, $name;
	} else {
	    if ($^O eq 'VMS') {
		tie @@{"${callpack}::$name"}, Env::Array::VMS, $name;
	    } else {
		tie @@{"${callpack}::$name"}, Env::Array, $name;
	    }
	}
a74 117
}

######################################################################

package Env::Array;
 
use Config;
use Tie::Array;

@@ISA = qw(Tie::Array);

my $sep = $Config::Config{path_sep};

sub TIEARRAY {
    bless \($_[1]);
}

sub FETCHSIZE {
    my ($self) = @@_;
    my @@temp = split($sep, $ENV{$$self});
    return scalar(@@temp);
}

sub STORESIZE {
    my ($self, $size) = @@_;
    my @@temp = split($sep, $ENV{$$self});
    $#temp = $size - 1;
    $ENV{$$self} = join($sep, @@temp);
}

sub CLEAR {
    my ($self) = @@_;
    $ENV{$$self} = '';
}

sub FETCH {
    my ($self, $index) = @@_;
    return (split($sep, $ENV{$$self}))[$index];
}

sub STORE {
    my ($self, $index, $value) = @@_;
    my @@temp = split($sep, $ENV{$$self});
    $temp[$index] = $value;
    $ENV{$$self} = join($sep, @@temp);
    return $value;
}

sub PUSH {
    my $self = shift;
    my @@temp = split($sep, $ENV{$$self});
    push @@temp, @@_;
    $ENV{$$self} = join($sep, @@temp);
    return scalar(@@temp);
}

sub POP {
    my ($self) = @@_;
    my @@temp = split($sep, $ENV{$$self});
    my $result = pop @@temp;
    $ENV{$$self} = join($sep, @@temp);
    return $result;
}

sub UNSHIFT {
    my $self = shift;
    my @@temp = split($sep, $ENV{$$self});
    my $result = unshift @@temp, @@_;
    $ENV{$$self} = join($sep, @@temp);
    return $result;
}

sub SHIFT {
    my ($self) = @@_;
    my @@temp = split($sep, $ENV{$$self});
    my $result = shift @@temp;
    $ENV{$$self} = join($sep, @@temp);
    return $result;
}

sub SPLICE {
    my $self = shift;
    my $offset = shift;
    my $length = shift;
    my @@temp = split($sep, $ENV{$$self});
    if (wantarray) {
	my @@result = splice @@temp, $self, $offset, $length, @@_;
	$ENV{$$self} = join($sep, @@temp);
	return @@result;
    } else {
	my $result = scalar splice @@temp, $offset, $length, @@_;
	$ENV{$$self} = join($sep, @@temp);
	return $result;
    }
}

######################################################################

package Env::Array::VMS;
use Tie::Array;

@@ISA = qw(Tie::Array);
 
sub TIEARRAY {
    bless \($_[1]);
}

sub FETCHSIZE {
    my ($self) = @@_;
    my $i = 0;
    while ($i < 127 and defined $ENV{$$self . ';' . $i}) { $i++; };
    return $i;
}

sub FETCH {
    my ($self, $index) = @@_;
    return $ENV{$$self . ';' . $index};
@


1.1.1.4
log
@stock perl 5.8.0 from CPAN
@
text
@a2 2
our $VERSION = '1.00';

@


1.1.1.5
log
@Perl 5.12.2 from CPAN
@
text
@d3 1
a3 1
our $VERSION = '1.01';
d135 2
a136 1
    return 1 + scalar(() = $ENV{$$self} =~ /\Q$sep\E/g);
a163 13
sub EXISTS {
    my ($self, $index) = @@_;
    return $index < $self->FETCHSIZE;
}

sub DELETE {
    my ($self, $index) = @@_;
    my @@temp = split($sep, $ENV{$$self});
    my $value = splice(@@temp, $index, 1, ());
    $ENV{$$self} = join($sep, @@temp);
    return $value;
}

a233 7

sub EXISTS {
    my ($self, $index) = @@_;
    return $index < $self->FETCHSIZE;
}

sub DELETE { }
@


