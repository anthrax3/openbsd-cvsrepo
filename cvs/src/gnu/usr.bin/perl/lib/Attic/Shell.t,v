head	1.2;
access;
symbols
	OPENBSD_4_8:1.1.1.4.0.4
	OPENBSD_4_8_BASE:1.1.1.4
	OPENBSD_4_7:1.1.1.4.0.2
	OPENBSD_4_7_BASE:1.1.1.4
	PERL_5_10_1:1.1.1.4
	OPENBSD_4_6:1.1.1.3.0.6
	OPENBSD_4_6_BASE:1.1.1.3
	OPENBSD_4_5:1.1.1.3.0.2
	OPENBSD_4_5_BASE:1.1.1.3
	PERL_5_10_0:1.1.1.3
	OPENBSD_4_4:1.1.1.2.0.20
	OPENBSD_4_4_BASE:1.1.1.2
	OPENBSD_4_3:1.1.1.2.0.18
	OPENBSD_4_3_BASE:1.1.1.2
	OPENBSD_4_2:1.1.1.2.0.16
	OPENBSD_4_2_BASE:1.1.1.2
	OPENBSD_4_1:1.1.1.2.0.14
	OPENBSD_4_1_BASE:1.1.1.2
	OPENBSD_4_0:1.1.1.2.0.12
	OPENBSD_4_0_BASE:1.1.1.2
	PERL_5_8_8:1.1.1.2
	OPENBSD_3_9:1.1.1.2.0.10
	OPENBSD_3_9_BASE:1.1.1.2
	OPENBSD_3_8:1.1.1.2.0.8
	OPENBSD_3_8_BASE:1.1.1.2
	OPENBSD_3_7:1.1.1.2.0.6
	OPENBSD_3_7_BASE:1.1.1.2
	PERL_5_8_6:1.1.1.2
	OPENBSD_3_6:1.1.1.2.0.4
	OPENBSD_3_6_BASE:1.1.1.2
	PERL_5_8_5:1.1.1.2
	PERL_5_8_3:1.1.1.2
	OPENBSD_3_5:1.1.1.2.0.2
	OPENBSD_3_5_BASE:1.1.1.2
	PERL_5_8_2:1.1.1.2
	OPENBSD_3_4:1.1.1.1.0.4
	OPENBSD_3_4_BASE:1.1.1.1
	OPENBSD_3_3:1.1.1.1.0.2
	OPENBSD_3_3_BASE:1.1.1.1
	PERL_5_8_0:1.1.1.1
	CPAN:1.1.1;
locks; strict;
comment	@# @;
expand	@o@;


1.2
date	2010.09.24.14.59.33;	author millert;	state dead;
branches;
next	1.1;

1.1
date	2002.10.27.22.14.58;	author millert;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	2002.10.27.22.14.58;	author millert;	state Exp;
branches;
next	1.1.1.2;

1.1.1.2
date	2003.12.03.02.43.59;	author millert;	state Exp;
branches;
next	1.1.1.3;

1.1.1.3
date	2008.09.29.17.18.29;	author millert;	state Exp;
branches;
next	1.1.1.4;

1.1.1.4
date	2009.10.12.18.10.49;	author millert;	state Exp;
branches;
next	;


desc
@@


1.2
log
@remove files no longer in perl 5.12.2 (or that have moved)
@
text
@#!./perl

BEGIN {
    chdir 't' if -d 't';
    @@INC = '../lib';
}

use Test::More tests => 4;

BEGIN { use_ok('Shell'); }

my $Is_VMS     = $^O eq 'VMS';
my $Is_MSWin32 = $^O eq 'MSWin32';
my $Is_NetWare = $^O eq 'NetWare';

$Shell::capture_stderr = 1; #

# Now test that that works ..

my $tmpfile = 'sht0001';

while ( -f $tmpfile )
{
  $tmpfile++;
}

END { -f $tmpfile && (open STDERR, '>&SAVERR' and unlink $tmpfile) };



open(SAVERR,">&STDERR") ;
open(STDERR, ">$tmpfile");

xXx();  # Ok someone could have a program called this :(

# On os2 the warning is on by default...
ok( ($^O eq 'os2' xor !(-s $tmpfile)) ,'$Shell::capture_stderr');

$Shell::capture_stderr = 0; #

# someone will have to fill in the blanks for other platforms

if ( $Is_VMS )
{
    ok(directory(),'Execute command');
    my @@files = directory('*.*');
    ok(@@files,'Quoted arguments');
}
elsif( $Is_MSWin32 )
{
  ok(dir(),'Execute command');

  my @@files = dir('*.*');

  ok(@@files, 'Quoted arguments');
}
else
{
  ok(ls(),'Execute command');

  my @@files = ls('*');

  ok(@@files,'Quoted arguments');

}
open(STDERR,">&SAVERR") ;
@


1.1
log
@Initial revision
@
text
@@


1.1.1.1
log
@stock perl 5.8.0 from CPAN
@
text
@@


1.1.1.2
log
@perl 5.8.2 from CPAN
@
text
@d8 1
a8 1
use Test::More tests => 7;
a11 3
my $so = Shell->new;
ok($so, 'Shell->new');

d16 1
a16 1
$Shell::capture_stderr = 1;
d21 4
a24 2
while ( -f $tmpfile ) {
    $tmpfile++;
d26 2
a27 1
END { -f $tmpfile && (open STDERR, '>&SAVERR' and unlink $tmpfile) }
d30 2
a31 1
open(SAVERR, ">&STDERR");
d34 1
a34 1
xXx_not_there();  # Ok someone could have a program called this :(
d37 1
a37 1
ok(($^O eq 'os2' xor !(-s $tmpfile)), '$Shell::capture_stderr');
d39 1
a39 1
$Shell::capture_stderr = 0;
d43 3
a45 2
if ($Is_VMS) {
    ok(directory(), 'Execute command');
d47 15
a61 1
    ok(@@files, 'Quoted arguments');
d63 1
a63 19
    ok(eq_array(\@@files, [$so->directory('*.*')]), 'object method');
    eval { $so->directory };
    ok(!$@@, '2 methods calls');
} elsif ($Is_MSWin32) {
    ok(dir(), 'Execute command');
    my @@files = dir('*.*');
    ok(@@files, 'Quoted arguments');

    ok(eq_array(\@@files, [$so->dir('*.*')]), 'object method');
    eval { $so->dir };
    ok(!$@@, '2 methods calls');
} else {
    ok(ls(), 'Execute command');
    my @@files = ls('*');
    ok(@@files, 'Quoted arguments');

    ok(eq_array(\@@files, [$so->ls('*')]), 'object method');
    eval { $so->ls };
    ok(!$@@, '2 methods calls');
d66 1
a66 1
open(STDERR, ">&SAVERR") ;
@


1.1.1.3
log
@import perl 5.10.0 from CPAN
@
text
@d4 2
a5 4
    if( $ENV{PERL_CORE} ) {
        chdir 't' if -d 't';
        @@INC = '../lib';
    }
a28 2
no warnings 'once'; 
# no false warning about   Name "main::SAVERR" used only once: possible typo
@


1.1.1.4
log
@import perl 5.10.1
@
text
@a43 8
# Trying to do two repeated C<ls>s in t in core and expecting the same output
# is a race condition when tests are running in parallel, and using it as a
# temporary directory. So go somewhere quieter.
if ($ENV{PERL_CORE} && -d 'uni') {
  chdir 'uni';
  $chdir++;
}

a72 4

if ($chdir) {
  chdir "..";
}
@


