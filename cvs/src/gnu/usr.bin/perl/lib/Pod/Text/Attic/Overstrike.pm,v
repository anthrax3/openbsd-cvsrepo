head	1.7;
access;
symbols
	OPENBSD_4_8:1.6.0.4
	OPENBSD_4_8_BASE:1.6
	OPENBSD_4_7:1.6.0.2
	OPENBSD_4_7_BASE:1.6
	PERL_5_10_1:1.1.1.7
	OPENBSD_4_6:1.5.0.6
	OPENBSD_4_6_BASE:1.5
	OPENBSD_4_5:1.5.0.2
	OPENBSD_4_5_BASE:1.5
	PERL_5_10_0:1.1.1.6
	OPENBSD_4_4:1.4.0.20
	OPENBSD_4_4_BASE:1.4
	OPENBSD_4_3:1.4.0.18
	OPENBSD_4_3_BASE:1.4
	OPENBSD_4_2:1.4.0.16
	OPENBSD_4_2_BASE:1.4
	OPENBSD_4_1:1.4.0.14
	OPENBSD_4_1_BASE:1.4
	OPENBSD_4_0:1.4.0.12
	OPENBSD_4_0_BASE:1.4
	PERL_5_8_8:1.1.1.5
	OPENBSD_3_9:1.4.0.10
	OPENBSD_3_9_BASE:1.4
	OPENBSD_3_8:1.4.0.8
	OPENBSD_3_8_BASE:1.4
	OPENBSD_3_7:1.4.0.6
	OPENBSD_3_7_BASE:1.4
	PERL_5_8_6:1.1.1.5
	OPENBSD_3_6:1.4.0.4
	OPENBSD_3_6_BASE:1.4
	PERL_5_8_5:1.1.1.4
	PERL_5_8_3:1.1.1.3
	OPENBSD_3_5:1.4.0.2
	OPENBSD_3_5_BASE:1.4
	PERL_5_8_2:1.1.1.3
	OPENBSD_3_4:1.3.0.4
	OPENBSD_3_4_BASE:1.3
	OPENBSD_3_3:1.3.0.2
	OPENBSD_3_3_BASE:1.3
	PERL_5_8_0:1.1.1.2
	OPENBSD_3_2:1.2.0.6
	OPENBSD_3_2_BASE:1.2
	OPENBSD_3_1:1.2.0.4
	OPENBSD_3_1_BASE:1.2
	OPENBSD_3_0:1.2.0.2
	OPENBSD_3_0_BASE:1.2
	PERL_5_6_1:1.1.1.1
	CPAN:1.1.1;
locks; strict;
comment	@# @;


1.7
date	2010.09.24.14.59.50;	author millert;	state dead;
branches;
next	1.6;

1.6
date	2009.10.12.18.24.42;	author millert;	state Exp;
branches;
next	1.5;

1.5
date	2008.09.29.17.36.14;	author millert;	state Exp;
branches;
next	1.4;

1.4
date	2003.12.03.03.02.40;	author millert;	state Exp;
branches;
next	1.3;

1.3
date	2002.10.27.22.25.27;	author millert;	state Exp;
branches;
next	1.2;

1.2
date	2001.05.24.18.35.36;	author millert;	state Exp;
branches;
next	1.1;

1.1
date	2001.05.24.18.23.37;	author millert;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	2001.05.24.18.23.37;	author millert;	state Exp;
branches;
next	1.1.1.2;

1.1.1.2
date	2002.10.27.22.15.01;	author millert;	state Exp;
branches;
next	1.1.1.3;

1.1.1.3
date	2003.12.03.02.44.08;	author millert;	state Exp;
branches;
next	1.1.1.4;

1.1.1.4
date	2004.08.09.17.47.21;	author millert;	state Exp;
branches;
next	1.1.1.5;

1.1.1.5
date	2005.01.15.21.17.29;	author millert;	state Exp;
branches;
next	1.1.1.6;

1.1.1.6
date	2008.09.29.17.18.42;	author millert;	state Exp;
branches;
next	1.1.1.7;

1.1.1.7
date	2009.10.12.18.11.05;	author millert;	state Exp;
branches;
next	;


desc
@@


1.7
log
@remove files no longer in perl 5.12.2 (or that have moved)
@
text
@# Pod::Text::Overstrike -- Convert POD data to formatted overstrike text
#
# Created by Joe Smith <Joe.Smith@@inwap.com> 30-Nov-2000
#   (based on Pod::Text::Color by Russ Allbery <rra@@stanford.edu>)
# Copyright 2000 Joe Smith <Joe.Smith@@inwap.com>.
# Copyright 2001, 2004, 2008 Russ Allbery <rra@@stanford.edu>.
#
# This program is free software; you may redistribute it and/or modify it
# under the same terms as Perl itself.
#
# This was written because the output from:
#
#     pod2text Text.pm > plain.txt; less plain.txt
#
# is not as rich as the output from
#
#     pod2man Text.pm | nroff -man > fancy.txt; less fancy.txt
#
# and because both Pod::Text::Color and Pod::Text::Termcap are not device
# independent.

##############################################################################
# Modules and declarations
##############################################################################

package Pod::Text::Overstrike;

require 5.004;

use Pod::Text ();

use strict;
use vars qw(@@ISA $VERSION);

@@ISA = qw(Pod::Text);

$VERSION = '2.03';

##############################################################################
# Overrides
##############################################################################

# Make level one headings bold, overridding any existing formatting.
sub cmd_head1 {
    my ($self, $attrs, $text) = @@_;
    $text =~ s/\s+$//;
    $text = $self->strip_format ($text);
    $text =~ s/(.)/$1\b$1/g;
    return $self->SUPER::cmd_head1 ($attrs, $text);
}

# Make level two headings bold, overriding any existing formatting.
sub cmd_head2 {
    my ($self, $attrs, $text) = @@_;
    $text =~ s/\s+$//;
    $text = $self->strip_format ($text);
    $text =~ s/(.)/$1\b$1/g;
    return $self->SUPER::cmd_head2 ($attrs, $text);
}

# Make level three headings underscored, overriding any existing formatting.
sub cmd_head3 {
    my ($self, $attrs, $text) = @@_;
    $text =~ s/\s+$//;
    $text = $self->strip_format ($text);
    $text =~ s/(.)/_\b$1/g;
    return $self->SUPER::cmd_head3 ($attrs, $text);
}

# Level four headings look like level three headings.
sub cmd_head4 {
    my ($self, $attrs, $text) = @@_;
    $text =~ s/\s+$//;
    $text = $self->strip_format ($text);
    $text =~ s/(.)/_\b$1/g;
    return $self->SUPER::cmd_head4 ($attrs, $text);
}

# The common code for handling all headers.  We have to override to avoid
# interpolating twice and because we don't want to honor alt.
sub heading {
    my ($self, $text, $indent, $marker) = @@_;
    $self->item ("\n\n") if defined $$self{ITEM};
    $text .= "\n" if $$self{opt_loose};
    my $margin = ' ' x ($$self{opt_margin} + $indent);
    $self->output ($margin . $text . "\n");
    return '';
}

# Fix the various formatting codes.
sub cmd_b { local $_ = $_[0]->strip_format ($_[2]); s/(.)/$1\b$1/g; $_ }
sub cmd_f { local $_ = $_[0]->strip_format ($_[2]); s/(.)/_\b$1/g; $_ }
sub cmd_i { local $_ = $_[0]->strip_format ($_[2]); s/(.)/_\b$1/g; $_ }

# Output any included code in bold.
sub output_code {
    my ($self, $code) = @@_;
    $code =~ s/(.)/$1\b$1/g;
    $self->output ($code);
}

# We unfortunately have to override the wrapping code here, since the normal
# wrapping code gets really confused by all the backspaces.
sub wrap {
    my $self = shift;
    local $_ = shift;
    my $output = '';
    my $spaces = ' ' x $$self{MARGIN};
    my $width = $$self{opt_width} - $$self{MARGIN};
    while (length > $width) {
        # This regex represents a single character, that's possibly underlined
        # or in bold (in which case, it's three characters; the character, a
        # backspace, and a character).  Use [^\n] rather than . to protect
        # against odd settings of $*.
        my $char = '(?:[^\n][\b])?[^\n]';
        if (s/^((?>$char){0,$width})(?:\Z|\s+)//) {
            $output .= $spaces . $1 . "\n";
        } else {
            last;
        }
    }
    $output .= $spaces . $_;
    $output =~ s/\s+$/\n\n/;
    return $output;
}

##############################################################################
# Utility functions
##############################################################################

# Strip all of the formatting from a provided string, returning the stripped
# version.
sub strip_format {
    my ($self, $text) = @@_;
    $text =~ s/(.)[\b]\1/$1/g;
    $text =~ s/_[\b]//g;
    return $text;
}

##############################################################################
# Module return value and documentation
##############################################################################

1;
__END__

=head1 NAME

=for stopwords
overstrike

Pod::Text::Overstrike - Convert POD data to formatted overstrike text

=for stopwords
overstruck Overstruck Allbery terminal's

=head1 SYNOPSIS

    use Pod::Text::Overstrike;
    my $parser = Pod::Text::Overstrike->new (sentence => 0, width => 78);

    # Read POD from STDIN and write to STDOUT.
    $parser->parse_from_filehandle;

    # Read POD from file.pod and write to file.txt.
    $parser->parse_from_file ('file.pod', 'file.txt');

=head1 DESCRIPTION

Pod::Text::Overstrike is a simple subclass of Pod::Text that highlights
output text using overstrike sequences, in a manner similar to nroff.
Characters in bold text are overstruck (character, backspace, character)
and characters in underlined text are converted to overstruck underscores
(underscore, backspace, character).  This format was originally designed
for hard-copy terminals and/or line printers, yet is readable on soft-copy
(CRT) terminals.

Overstruck text is best viewed by page-at-a-time programs that take
advantage of the terminal's B<stand-out> and I<underline> capabilities, such
as the less program on Unix.

Apart from the overstrike, it in all ways functions like Pod::Text.  See
L<Pod::Text> for details and available options.

=head1 BUGS

Currently, the outermost formatting instruction wins, so for example
underlined text inside a region of bold text is displayed as simply bold.
There may be some better approach possible.

=head1 SEE ALSO

L<Pod::Text>, L<Pod::Simple>

The current version of this module is always available from its web site at
L<http://www.eyrie.org/~eagle/software/podlators/>.  It is also part of the
Perl core distribution as of 5.6.0.

=head1 AUTHOR

Joe Smith <Joe.Smith@@inwap.com>, using the framework created by Russ Allbery
<rra@@stanford.edu>.

=head1 COPYRIGHT AND LICENSE

Copyright 2000 by Joe Smith <Joe.Smith@@inwap.com>.
Copyright 2001, 2004 by Russ Allbery <rra@@stanford.edu>.

This program is free software; you may redistribute it and/or modify it
under the same terms as Perl itself.

=cut
@


1.6
log
@Merge in perl 5.10.1
@
text
@@


1.5
log
@fix conflicts and merge in local changes to perl 5.10.0
@
text
@a1 1
# $Id: Overstrike.pm,v 2.0 2004/06/09 04:51:20 eagle Exp $
d5 2
d37 1
a37 4
# Don't use the CVS revision as the version, since this module is also in Perl
# core and too many things could munge CVS magic revision strings.  This
# number should ideally be the same as the CVS revision in podlators, however.
$VERSION = 2.00;
d149 3
d154 3
d172 5
a176 5
Characters in bold text are overstruck (character, backspace, character) and
characters in underlined text are converted to overstruck underscores
(underscore, backspace, character).  This format was originally designed for
hardcopy terminals and/or lineprinters, yet is readable on softcopy (CRT)
terminals.
@


1.4
log
@Resolve conflicts for perl 5.8.2, remove old files, and add OpenBSD-specific scaffolding
@
text
@d2 1
a2 1
# $Id: Overstrike.pm,v 1.10 2002/08/04 03:35:01 eagle Exp $
d39 1
a39 2
$VERSION = 1.10;

d47 1
a47 1
    my ($self, $text, $line) = @@_;
d49 1
a49 1
    $text = $self->strip_format ($self->interpolate ($text, $line));
d51 1
a51 1
    $self->SUPER::cmd_head1 ($text);
d56 1
a56 1
    my ($self, $text, $line) = @@_;
d58 1
a58 1
    $text = $self->strip_format ($self->interpolate ($text, $line));
d60 1
a60 1
    $self->SUPER::cmd_head2 ($text);
d65 1
a65 1
    my ($self, $text, $line) = @@_;
d67 1
a67 1
    $text = $self->strip_format ($self->interpolate ($text, $line));
d69 1
a69 1
    $self->SUPER::cmd_head3 ($text);
d74 1
a74 1
    my ($self, $text, $line) = @@_;
d76 1
a76 1
    $text = $self->strip_format ($self->interpolate ($text, $line));
d78 1
a78 1
    $self->SUPER::cmd_head4 ($text);
d84 1
a84 1
    my ($self, $text, $line, $indent, $marker) = @@_;
d86 2
a87 2
    $text .= "\n" if $$self{loose};
    my $margin = ' ' x ($$self{margin} + $indent);
d89 1
d93 3
a95 3
sub seq_b { local $_ = strip_format (@@_); s/(.)/$1\b$1/g; $_ }
sub seq_f { local $_ = strip_format (@@_); s/(.)/_\b$1/g; $_ }
sub seq_i { local $_ = strip_format (@@_); s/(.)/_\b$1/g; $_ }
d111 1
a111 1
    my $width = $$self{width} - $$self{MARGIN};
d126 1
a126 1
    $output;
d189 1
a189 1
L<Pod::Text>, L<Pod::Parser>
d203 1
a203 1
Copyright 2001 by Russ Allbery <rra@@stanford.edu>.
@


1.3
log
@Resolve conflicts, remove old files, merge local changes
@
text
@d2 1
a2 1
# $Id: Overstrike.pm,v 1.9 2002/07/15 05:46:00 eagle Exp $
d39 1
a39 1
$VERSION = 1.09;
d88 2
a89 1
    $self->output (' ' x $indent . $text . "\n");
@


1.2
log
@merge in perl 5.6.1 with our local changes
@
text
@d2 1
a2 1
# $Id: Overstrike.pm,v 1.1 2000/12/25 12:51:23 eagle Exp $
d7 1
a7 1
# This program is free software; you can redistribute it and/or modify it
d21 1
a21 1
############################################################################
d23 1
a23 1
############################################################################
d36 4
a39 5
# Don't use the CVS revision as the version, since this module is also in
# Perl core and too many things could munge CVS magic revision strings.
# This number should ideally be the same as the CVS revision in podlators,
# however.
$VERSION = 1.01;
d42 1
a42 1
############################################################################
d44 1
a44 1
############################################################################
d48 5
a52 7
    my $self = shift;
    local $_ = shift;
    s/\s+$//;
    s/(.)\cH\1//g;
    s/_\cH//g;
    s/(.)/$1\b$1/g;
    $self->SUPER::cmd_head1 ($_);
d57 5
a61 7
    my $self = shift;
    local $_ = shift;
    s/\s+$//;
    s/(.)\cH\1//g;
    s/_\cH//g;
    s/(.)/$1\b$1/g;
    $self->SUPER::cmd_head2 ($_);
d66 23
a88 7
    my $self = shift;
    local $_ = shift;
    s/\s+$//;
    s/(.)\cH\1//g;
    s/_\cH//g;
    s/(.)/_\b$1/g;
    $self->SUPER::cmd_head3 ($_);
d91 11
a101 4
# Fix the various interior sequences.
sub seq_b { local $_ = $_[1]; s/(.)\cH\1//g; s/_\cH//g; s/(.)/$1\b$1/g; $_ }
sub seq_f { local $_ = $_[1]; s/(.)\cH\1//g; s/_\cH//g; s/(.)/_\b$1/g; $_ }
sub seq_i { local $_ = $_[1]; s/(.)\cH\1//g; s/_\cH//g; s/(.)/_\b$1/g; $_ }
d104 1
a104 1
# wrapping code gets really confused by all the escape sequences.
d112 6
a117 2
        if (s/^((?:(?:[^\n]\cH)?[^\n]){0,$width})\s+//
            || s/^((?:(?:[^\n]\cH)?[^\n]){$width})//) {
d128 14
a141 1
############################################################################
d143 1
a143 1
############################################################################
d188 5
a192 1
L<Pod::Text|Pod::Text>, L<Pod::Parser|Pod::Parser>
d196 10
a205 2
Joe Smith E<lt>Joe.Smith@@inwap.comE<gt>, using the framework created by Russ
Allbery E<lt>rra@@stanford.eduE<gt>.
@


1.1
log
@Initial revision
@
text
@@


1.1.1.1
log
@stock perl 5.6.1
@
text
@@


1.1.1.2
log
@stock perl 5.8.0 from CPAN
@
text
@d2 1
a2 1
# $Id: Overstrike.pm,v 1.9 2002/07/15 05:46:00 eagle Exp $
d7 1
a7 1
# This program is free software; you may redistribute it and/or modify it
d21 1
a21 1
##############################################################################
d23 1
a23 1
##############################################################################
d36 5
a40 4
# Don't use the CVS revision as the version, since this module is also in Perl
# core and too many things could munge CVS magic revision strings.  This
# number should ideally be the same as the CVS revision in podlators, however.
$VERSION = 1.09;
d43 1
a43 1
##############################################################################
d45 1
a45 1
##############################################################################
d49 7
a55 5
    my ($self, $text, $line) = @@_;
    $text =~ s/\s+$//;
    $text = $self->strip_format ($self->interpolate ($text, $line));
    $text =~ s/(.)/$1\b$1/g;
    $self->SUPER::cmd_head1 ($text);
d60 7
a66 5
    my ($self, $text, $line) = @@_;
    $text =~ s/\s+$//;
    $text = $self->strip_format ($self->interpolate ($text, $line));
    $text =~ s/(.)/$1\b$1/g;
    $self->SUPER::cmd_head2 ($text);
d71 7
a77 14
    my ($self, $text, $line) = @@_;
    $text =~ s/\s+$//;
    $text = $self->strip_format ($self->interpolate ($text, $line));
    $text =~ s/(.)/_\b$1/g;
    $self->SUPER::cmd_head3 ($text);
}

# Level four headings look like level three headings.
sub cmd_head4 {
    my ($self, $text, $line) = @@_;
    $text =~ s/\s+$//;
    $text = $self->strip_format ($self->interpolate ($text, $line));
    $text =~ s/(.)/_\b$1/g;
    $self->SUPER::cmd_head4 ($text);
d80 4
a83 20
# The common code for handling all headers.  We have to override to avoid
# interpolating twice and because we don't want to honor alt.
sub heading {
    my ($self, $text, $line, $indent, $marker) = @@_;
    $self->item ("\n\n") if defined $$self{ITEM};
    $text .= "\n" if $$self{loose};
    $self->output (' ' x $indent . $text . "\n");
}

# Fix the various formatting codes.
sub seq_b { local $_ = strip_format (@@_); s/(.)/$1\b$1/g; $_ }
sub seq_f { local $_ = strip_format (@@_); s/(.)/_\b$1/g; $_ }
sub seq_i { local $_ = strip_format (@@_); s/(.)/_\b$1/g; $_ }

# Output any included code in bold.
sub output_code {
    my ($self, $code) = @@_;
    $code =~ s/(.)/$1\b$1/g;
    $self->output ($code);
}
d86 1
a86 1
# wrapping code gets really confused by all the backspaces.
d94 2
a95 6
        # This regex represents a single character, that's possibly underlined
        # or in bold (in which case, it's three characters; the character, a
        # backspace, and a character).  Use [^\n] rather than . to protect
        # against odd settings of $*.
        my $char = '(?:[^\n][\b])?[^\n]';
        if (s/^((?>$char){0,$width})(?:\Z|\s+)//) {
d106 1
a106 14
##############################################################################
# Utility functions
##############################################################################

# Strip all of the formatting from a provided string, returning the stripped
# version.
sub strip_format {
    my ($self, $text) = @@_;
    $text =~ s/(.)[\b]\1/$1/g;
    $text =~ s/_[\b]//g;
    return $text;
}

##############################################################################
d108 1
a108 1
##############################################################################
d153 1
a153 5
L<Pod::Text>, L<Pod::Parser>

The current version of this module is always available from its web site at
L<http://www.eyrie.org/~eagle/software/podlators/>.  It is also part of the
Perl core distribution as of 5.6.0.
d157 2
a158 10
Joe Smith <Joe.Smith@@inwap.com>, using the framework created by Russ Allbery
<rra@@stanford.edu>.

=head1 COPYRIGHT AND LICENSE

Copyright 2000 by Joe Smith <Joe.Smith@@inwap.com>.
Copyright 2001 by Russ Allbery <rra@@stanford.edu>.

This program is free software; you may redistribute it and/or modify it
under the same terms as Perl itself.
@


1.1.1.3
log
@perl 5.8.2 from CPAN
@
text
@d2 1
a2 1
# $Id: Overstrike.pm,v 1.10 2002/08/04 03:35:01 eagle Exp $
d39 1
a39 1
$VERSION = 1.10;
d88 1
a88 2
    my $margin = ' ' x ($$self{margin} + $indent);
    $self->output ($margin . $text . "\n");
@


1.1.1.4
log
@Import of stock perl 5.8.5
@
text
@d2 1
a2 1
# $Id: Overstrike.pm,v 1.4 2003/12/03 03:02:40 millert Exp $
@


1.1.1.5
log
@perl 5.8.6 from CPAN
@
text
@d2 1
a2 1
# $Id: Overstrike.pm,v 1.10 2002/08/04 03:35:01 eagle Exp $
@


1.1.1.6
log
@import perl 5.10.0 from CPAN
@
text
@d2 1
a2 1
# $Id: Overstrike.pm,v 2.0 2004/06/09 04:51:20 eagle Exp $
d39 2
a40 1
$VERSION = 2.00;
d48 1
a48 1
    my ($self, $attrs, $text) = @@_;
d50 1
a50 1
    $text = $self->strip_format ($text);
d52 1
a52 1
    return $self->SUPER::cmd_head1 ($attrs, $text);
d57 1
a57 1
    my ($self, $attrs, $text) = @@_;
d59 1
a59 1
    $text = $self->strip_format ($text);
d61 1
a61 1
    return $self->SUPER::cmd_head2 ($attrs, $text);
d66 1
a66 1
    my ($self, $attrs, $text) = @@_;
d68 1
a68 1
    $text = $self->strip_format ($text);
d70 1
a70 1
    return $self->SUPER::cmd_head3 ($attrs, $text);
d75 1
a75 1
    my ($self, $attrs, $text) = @@_;
d77 1
a77 1
    $text = $self->strip_format ($text);
d79 1
a79 1
    return $self->SUPER::cmd_head4 ($attrs, $text);
d85 1
a85 1
    my ($self, $text, $indent, $marker) = @@_;
d87 2
a88 2
    $text .= "\n" if $$self{opt_loose};
    my $margin = ' ' x ($$self{opt_margin} + $indent);
a89 1
    return '';
d93 3
a95 3
sub cmd_b { local $_ = $_[0]->strip_format ($_[2]); s/(.)/$1\b$1/g; $_ }
sub cmd_f { local $_ = $_[0]->strip_format ($_[2]); s/(.)/_\b$1/g; $_ }
sub cmd_i { local $_ = $_[0]->strip_format ($_[2]); s/(.)/_\b$1/g; $_ }
d111 1
a111 1
    my $width = $$self{opt_width} - $$self{MARGIN};
d126 1
a126 1
    return $output;
d189 1
a189 1
L<Pod::Text>, L<Pod::Simple>
d203 1
a203 1
Copyright 2001, 2004 by Russ Allbery <rra@@stanford.edu>.
@


1.1.1.7
log
@import perl 5.10.1
@
text
@d2 1
a5 2
# Copyright 2000 Joe Smith <Joe.Smith@@inwap.com>.
# Copyright 2001, 2004, 2008 Russ Allbery <rra@@stanford.edu>.
d36 4
a39 1
$VERSION = '2.03';
a150 3
=for stopwords
overstrike

a152 3
=for stopwords
overstruck Overstruck Allbery terminal's

d168 5
a172 5
Characters in bold text are overstruck (character, backspace, character)
and characters in underlined text are converted to overstruck underscores
(underscore, backspace, character).  This format was originally designed
for hard-copy terminals and/or line printers, yet is readable on soft-copy
(CRT) terminals.
@


