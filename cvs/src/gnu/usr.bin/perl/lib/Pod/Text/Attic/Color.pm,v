head	1.8;
access;
symbols
	OPENBSD_4_8:1.7.0.4
	OPENBSD_4_8_BASE:1.7
	OPENBSD_4_7:1.7.0.2
	OPENBSD_4_7_BASE:1.7
	PERL_5_10_1:1.1.1.7
	OPENBSD_4_6:1.6.0.6
	OPENBSD_4_6_BASE:1.6
	OPENBSD_4_5:1.6.0.2
	OPENBSD_4_5_BASE:1.6
	PERL_5_10_0:1.1.1.6
	OPENBSD_4_4:1.5.0.20
	OPENBSD_4_4_BASE:1.5
	OPENBSD_4_3:1.5.0.18
	OPENBSD_4_3_BASE:1.5
	OPENBSD_4_2:1.5.0.16
	OPENBSD_4_2_BASE:1.5
	OPENBSD_4_1:1.5.0.14
	OPENBSD_4_1_BASE:1.5
	OPENBSD_4_0:1.5.0.12
	OPENBSD_4_0_BASE:1.5
	PERL_5_8_8:1.1.1.5
	OPENBSD_3_9:1.5.0.10
	OPENBSD_3_9_BASE:1.5
	OPENBSD_3_8:1.5.0.8
	OPENBSD_3_8_BASE:1.5
	OPENBSD_3_7:1.5.0.6
	OPENBSD_3_7_BASE:1.5
	PERL_5_8_6:1.1.1.5
	OPENBSD_3_6:1.5.0.4
	OPENBSD_3_6_BASE:1.5
	PERL_5_8_5:1.1.1.4
	PERL_5_8_3:1.1.1.3
	OPENBSD_3_5:1.5.0.2
	OPENBSD_3_5_BASE:1.5
	PERL_5_8_2:1.1.1.3
	OPENBSD_3_4:1.4.0.4
	OPENBSD_3_4_BASE:1.4
	OPENBSD_3_3:1.4.0.2
	OPENBSD_3_3_BASE:1.4
	PERL_5_8_0:1.1.1.3
	OPENBSD_3_2:1.3.0.6
	OPENBSD_3_2_BASE:1.3
	OPENBSD_3_1:1.3.0.4
	OPENBSD_3_1_BASE:1.3
	OPENBSD_3_0:1.3.0.2
	OPENBSD_3_0_BASE:1.3
	PERL_5_6_1:1.1.1.2
	OPENBSD_2_9:1.2.0.6
	OPENBSD_2_9_BASE:1.2
	OPENBSD_2_8:1.2.0.4
	OPENBSD_2_8_BASE:1.2
	OPENBSD_2_7:1.2.0.2
	OPENBSD_2_7_BASE:1.2
	PERL_5_6_0:1.1.1.1
	CPAN:1.1.1;
locks; strict;
comment	@# @;


1.8
date	2010.09.24.14.59.50;	author millert;	state dead;
branches;
next	1.7;

1.7
date	2009.10.12.18.24.42;	author millert;	state Exp;
branches;
next	1.6;

1.6
date	2008.09.29.17.36.14;	author millert;	state Exp;
branches;
next	1.5;

1.5
date	2003.12.03.03.02.40;	author millert;	state Exp;
branches;
next	1.4;

1.4
date	2002.10.27.22.25.27;	author millert;	state Exp;
branches;
next	1.3;

1.3
date	2001.05.24.18.35.36;	author millert;	state Exp;
branches;
next	1.2;

1.2
date	2000.04.06.17.06.49;	author millert;	state Exp;
branches;
next	1.1;

1.1
date	2000.04.06.16.09.48;	author millert;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	2000.04.06.16.09.48;	author millert;	state Exp;
branches;
next	1.1.1.2;

1.1.1.2
date	2001.05.24.18.23.37;	author millert;	state Exp;
branches;
next	1.1.1.3;

1.1.1.3
date	2002.10.27.22.15.01;	author millert;	state Exp;
branches;
next	1.1.1.4;

1.1.1.4
date	2004.08.09.17.47.21;	author millert;	state Exp;
branches;
next	1.1.1.5;

1.1.1.5
date	2005.01.15.21.17.29;	author millert;	state Exp;
branches;
next	1.1.1.6;

1.1.1.6
date	2008.09.29.17.18.42;	author millert;	state Exp;
branches;
next	1.1.1.7;

1.1.1.7
date	2009.10.12.18.11.05;	author millert;	state Exp;
branches;
next	;


desc
@@


1.8
log
@remove files no longer in perl 5.12.2 (or that have moved)
@
text
@# Pod::Text::Color -- Convert POD data to formatted color ASCII text
#
# Copyright 1999, 2001, 2004, 2006, 2008 Russ Allbery <rra@@stanford.edu>
#
# This program is free software; you may redistribute it and/or modify it
# under the same terms as Perl itself.
#
# This is just a basic proof of concept.  It should later be modified to make
# better use of color, take options changing what colors are used for what
# text, and the like.

##############################################################################
# Modules and declarations
##############################################################################

package Pod::Text::Color;

require 5.004;

use Pod::Text ();
use Term::ANSIColor qw(colored);

use strict;
use vars qw(@@ISA $VERSION);

@@ISA = qw(Pod::Text);

$VERSION = '2.05';

##############################################################################
# Overrides
##############################################################################

# Make level one headings bold.
sub cmd_head1 {
    my ($self, $attrs, $text) = @@_;
    $text =~ s/\s+$//;
    $self->SUPER::cmd_head1 ($attrs, colored ($text, 'bold'));
}

# Make level two headings bold.
sub cmd_head2 {
    my ($self, $attrs, $text) = @@_;
    $text =~ s/\s+$//;
    $self->SUPER::cmd_head2 ($attrs, colored ($text, 'bold'));
}

# Fix the various formatting codes.
sub cmd_b { return colored ($_[2], 'bold')   }
sub cmd_f { return colored ($_[2], 'cyan')   }
sub cmd_i { return colored ($_[2], 'yellow') }

# Output any included code in green.
sub output_code {
    my ($self, $code) = @@_;
    $code = colored ($code, 'green');
    $self->output ($code);
}

# We unfortunately have to override the wrapping code here, since the normal
# wrapping code gets really confused by all the escape sequences.
sub wrap {
    my $self = shift;
    local $_ = shift;
    my $output = '';
    my $spaces = ' ' x $$self{MARGIN};
    my $width = $$self{opt_width} - $$self{MARGIN};

    # We have to do $shortchar and $longchar in variables because the
    # construct ${char}{0,$width} didn't do the right thing until Perl 5.8.x.
    my $char = '(?:(?:\e\[[\d;]+m)*[^\n])';
    my $shortchar = $char . "{0,$width}";
    my $longchar = $char . "{$width}";
    while (length > $width) {
        if (s/^($shortchar)\s+// || s/^($longchar)//) {
            $output .= $spaces . $1 . "\n";
        } else {
            last;
        }
    }
    $output .= $spaces . $_;
    $output =~ s/\s+$/\n\n/;
    $output;
}

##############################################################################
# Module return value and documentation
##############################################################################

1;
__END__

=head1 NAME

Pod::Text::Color - Convert POD data to formatted color ASCII text

=for stopwords
Allbery

=head1 SYNOPSIS

    use Pod::Text::Color;
    my $parser = Pod::Text::Color->new (sentence => 0, width => 78);

    # Read POD from STDIN and write to STDOUT.
    $parser->parse_from_filehandle;

    # Read POD from file.pod and write to file.txt.
    $parser->parse_from_file ('file.pod', 'file.txt');

=head1 DESCRIPTION

Pod::Text::Color is a simple subclass of Pod::Text that highlights output
text using ANSI color escape sequences.  Apart from the color, it in all
ways functions like Pod::Text.  See L<Pod::Text> for details and available
options.

Term::ANSIColor is used to get colors and therefore must be installed to use
this module.

=head1 BUGS

This is just a basic proof of concept.  It should be seriously expanded to
support configurable coloration via options passed to the constructor, and
B<pod2text> should be taught about those.

=head1 SEE ALSO

L<Pod::Text>, L<Pod::Simple>

The current version of this module is always available from its web site at
L<http://www.eyrie.org/~eagle/software/podlators/>.  It is also part of the
Perl core distribution as of 5.6.0.

=head1 AUTHOR

Russ Allbery <rra@@stanford.edu>.

=head1 COPYRIGHT AND LICENSE

Copyright 1999, 2001, 2004, 2006, 2008 Russ Allbery <rra@@stanford.edu>.

This program is free software; you may redistribute it and/or modify it
under the same terms as Perl itself.

=cut
@


1.7
log
@Merge in perl 5.10.1
@
text
@@


1.6
log
@fix conflicts and merge in local changes to perl 5.10.0
@
text
@a1 1
# $Id: Color.pm,v 2.3 2006-01-25 23:56:54 eagle Exp $
d3 1
a3 1
# Copyright 1999, 2001, 2004, 2006 by Russ Allbery <rra@@stanford.edu>
d28 1
a28 4
# Don't use the CVS revision as the version, since this module is also in Perl
# core and too many things could munge CVS magic revision strings.  This
# number should ideally be the same as the CVS revision in podlators, however.
$VERSION = 2.03;
d97 3
d141 1
a141 1
Copyright 1999, 2001, 2004, 2006 by Russ Allbery <rra@@stanford.edu>.
@


1.5
log
@Resolve conflicts for perl 5.8.2, remove old files, and add OpenBSD-specific scaffolding
@
text
@d2 1
a2 1
# $Id: Color.pm,v 1.4 2002/07/15 05:46:00 eagle Exp $
d4 1
a4 1
# Copyright 1999, 2001 by Russ Allbery <rra@@stanford.edu>
d32 1
a32 2
$VERSION = 1.04;

d40 3
a42 4
    my $self = shift;
    local $_ = shift;
    s/\s+$//;
    $self->SUPER::cmd_head1 (colored ($_, 'bold'));
d47 3
a49 4
    my $self = shift;
    local $_ = shift;
    s/\s+$//;
    $self->SUPER::cmd_head2 (colored ($_, 'bold'));
d53 3
a55 3
sub seq_b { return colored ($_[1], 'bold')   }
sub seq_f { return colored ($_[1], 'cyan')   }
sub seq_i { return colored ($_[1], 'yellow') }
d71 7
a77 1
    my $width = $$self{width} - $$self{MARGIN};
d79 1
a79 2
        if (s/^((?:(?:\e\[[\d;]+m)?[^\n]){0,$width})\s+//
            || s/^((?:(?:\e\[[\d;]+m)?[^\n]){$width})//) {
d130 1
a130 1
L<Pod::Text>, L<Pod::Parser>
d142 1
a142 1
Copyright 1999, 2001 by Russ Allbery <rra@@stanford.edu>.
@


1.4
log
@Resolve conflicts, remove old files, merge local changes
@
text
@@


1.3
log
@merge in perl 5.6.1 with our local changes
@
text
@d2 1
a2 1
# $Id: Color.pm,v 0.6 2000/12/25 12:52:39 eagle Exp $
d4 1
a4 1
# Copyright 1999 by Russ Allbery <rra@@stanford.edu>
d6 1
a6 1
# This program is free software; you can redistribute it and/or modify it
d9 3
a11 3
# This is just a basic proof of concept.  It should later be modified to
# make better use of color, take options changing what colors are used for
# what text, and the like.
d13 1
a13 1
############################################################################
d15 1
a15 1
############################################################################
d29 4
a32 5
# Don't use the CVS revision as the version, since this module is also in
# Perl core and too many things could munge CVS magic revision strings.
# This number should ideally be the same as the CVS revision in podlators,
# however.
$VERSION = 0.06;
d35 1
a35 1
############################################################################
d37 1
a37 1
############################################################################
d55 1
a55 1
# Fix the various interior sequences.
d60 7
d88 1
a88 1
############################################################################
d90 1
a90 1
############################################################################
d128 5
a132 1
L<Pod::Text|Pod::Text>, L<Pod::Parser|Pod::Parser>
d136 8
a143 1
Russ Allbery E<lt>rra@@stanford.eduE<gt>.
@


1.2
log
@perl-5.6.0 + local changes
@
text
@d2 1
a2 1
# $Id: Color.pm,v 0.5 1999/09/20 10:15:16 eagle Exp $
d29 5
a33 2
# Use the CVS revision of this file as its version number.
($VERSION = (split (' ', q$Revision: 0.5 $ ))[1]) =~ s/\.(\d)$/.0$1/;
@


1.1
log
@Initial revision
@
text
@@


1.1.1.1
log
@virgin perl 5.6.0
@
text
@@


1.1.1.2
log
@stock perl 5.6.1
@
text
@d2 1
a2 1
# $Id: Color.pm,v 0.6 2000/12/25 12:52:39 eagle Exp $
d29 2
a30 5
# Don't use the CVS revision as the version, since this module is also in
# Perl core and too many things could munge CVS magic revision strings.
# This number should ideally be the same as the CVS revision in podlators,
# however.
$VERSION = 0.06;
@


1.1.1.3
log
@stock perl 5.8.0 from CPAN
@
text
@d2 1
a2 1
# $Id: Color.pm,v 1.4 2002/07/15 05:46:00 eagle Exp $
d4 1
a4 1
# Copyright 1999, 2001 by Russ Allbery <rra@@stanford.edu>
d6 1
a6 1
# This program is free software; you may redistribute it and/or modify it
d9 3
a11 3
# This is just a basic proof of concept.  It should later be modified to make
# better use of color, take options changing what colors are used for what
# text, and the like.
d13 1
a13 1
##############################################################################
d15 1
a15 1
##############################################################################
d29 5
a33 4
# Don't use the CVS revision as the version, since this module is also in Perl
# core and too many things could munge CVS magic revision strings.  This
# number should ideally be the same as the CVS revision in podlators, however.
$VERSION = 1.04;
d36 1
a36 1
##############################################################################
d38 1
a38 1
##############################################################################
d56 1
a56 1
# Fix the various formatting codes.
a60 7
# Output any included code in green.
sub output_code {
    my ($self, $code) = @@_;
    $code = colored ($code, 'green');
    $self->output ($code);
}

d82 1
a82 1
##############################################################################
d84 1
a84 1
##############################################################################
d122 1
a122 5
L<Pod::Text>, L<Pod::Parser>

The current version of this module is always available from its web site at
L<http://www.eyrie.org/~eagle/software/podlators/>.  It is also part of the
Perl core distribution as of 5.6.0.
d126 1
a126 8
Russ Allbery <rra@@stanford.edu>.

=head1 COPYRIGHT AND LICENSE

Copyright 1999, 2001 by Russ Allbery <rra@@stanford.edu>.

This program is free software; you may redistribute it and/or modify it
under the same terms as Perl itself.
@


1.1.1.4
log
@Import of stock perl 5.8.5
@
text
@d2 1
a2 1
# $Id: Color.pm,v 1.5 2003/12/03 03:02:40 millert Exp $
@


1.1.1.5
log
@perl 5.8.6 from CPAN
@
text
@d2 1
a2 1
# $Id: Color.pm,v 1.4 2002/07/15 05:46:00 eagle Exp $
@


1.1.1.6
log
@import perl 5.10.0 from CPAN
@
text
@d2 1
a2 1
# $Id: Color.pm,v 2.3 2006-01-25 23:56:54 eagle Exp $
d4 1
a4 1
# Copyright 1999, 2001, 2004, 2006 by Russ Allbery <rra@@stanford.edu>
d32 2
a33 1
$VERSION = 2.03;
d41 4
a44 3
    my ($self, $attrs, $text) = @@_;
    $text =~ s/\s+$//;
    $self->SUPER::cmd_head1 ($attrs, colored ($text, 'bold'));
d49 4
a52 3
    my ($self, $attrs, $text) = @@_;
    $text =~ s/\s+$//;
    $self->SUPER::cmd_head2 ($attrs, colored ($text, 'bold'));
d56 3
a58 3
sub cmd_b { return colored ($_[2], 'bold')   }
sub cmd_f { return colored ($_[2], 'cyan')   }
sub cmd_i { return colored ($_[2], 'yellow') }
d74 1
a74 7
    my $width = $$self{opt_width} - $$self{MARGIN};

    # We have to do $shortchar and $longchar in variables because the
    # construct ${char}{0,$width} didn't do the right thing until Perl 5.8.x.
    my $char = '(?:(?:\e\[[\d;]+m)*[^\n])';
    my $shortchar = $char . "{0,$width}";
    my $longchar = $char . "{$width}";
d76 2
a77 1
        if (s/^($shortchar)\s+// || s/^($longchar)//) {
d128 1
a128 1
L<Pod::Text>, L<Pod::Simple>
d140 1
a140 1
Copyright 1999, 2001, 2004, 2006 by Russ Allbery <rra@@stanford.edu>.
@


1.1.1.7
log
@import perl 5.10.1
@
text
@d2 1
d4 1
a4 1
# Copyright 1999, 2001, 2004, 2006, 2008 Russ Allbery <rra@@stanford.edu>
d29 4
a32 1
$VERSION = '2.05';
a100 3
=for stopwords
Allbery

d142 1
a142 1
Copyright 1999, 2001, 2004, 2006, 2008 Russ Allbery <rra@@stanford.edu>.
@


