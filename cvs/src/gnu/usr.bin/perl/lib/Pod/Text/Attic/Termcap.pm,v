head	1.8;
access;
symbols
	OPENBSD_4_8:1.7.0.4
	OPENBSD_4_8_BASE:1.7
	OPENBSD_4_7:1.7.0.2
	OPENBSD_4_7_BASE:1.7
	PERL_5_10_1:1.1.1.8
	OPENBSD_4_6:1.6.0.6
	OPENBSD_4_6_BASE:1.6
	OPENBSD_4_5:1.6.0.2
	OPENBSD_4_5_BASE:1.6
	PERL_5_10_0:1.1.1.7
	OPENBSD_4_4:1.5.0.20
	OPENBSD_4_4_BASE:1.5
	OPENBSD_4_3:1.5.0.18
	OPENBSD_4_3_BASE:1.5
	OPENBSD_4_2:1.5.0.16
	OPENBSD_4_2_BASE:1.5
	OPENBSD_4_1:1.5.0.14
	OPENBSD_4_1_BASE:1.5
	OPENBSD_4_0:1.5.0.12
	OPENBSD_4_0_BASE:1.5
	PERL_5_8_8:1.1.1.6
	OPENBSD_3_9:1.5.0.10
	OPENBSD_3_9_BASE:1.5
	OPENBSD_3_8:1.5.0.8
	OPENBSD_3_8_BASE:1.5
	OPENBSD_3_7:1.5.0.6
	OPENBSD_3_7_BASE:1.5
	PERL_5_8_6:1.1.1.6
	OPENBSD_3_6:1.5.0.4
	OPENBSD_3_6_BASE:1.5
	PERL_5_8_5:1.1.1.5
	PERL_5_8_3:1.1.1.4
	OPENBSD_3_5:1.5.0.2
	OPENBSD_3_5_BASE:1.5
	PERL_5_8_2:1.1.1.4
	OPENBSD_3_4:1.4.0.4
	OPENBSD_3_4_BASE:1.4
	OPENBSD_3_3:1.4.0.2
	OPENBSD_3_3_BASE:1.4
	PERL_5_8_0:1.1.1.3
	OPENBSD_3_2:1.3.0.6
	OPENBSD_3_2_BASE:1.3
	OPENBSD_3_1:1.3.0.4
	OPENBSD_3_1_BASE:1.3
	OPENBSD_3_0:1.3.0.2
	OPENBSD_3_0_BASE:1.3
	PERL_5_6_1:1.1.1.2
	OPENBSD_2_9:1.2.0.6
	OPENBSD_2_9_BASE:1.2
	OPENBSD_2_8:1.2.0.4
	OPENBSD_2_8_BASE:1.2
	OPENBSD_2_7:1.2.0.2
	OPENBSD_2_7_BASE:1.2
	PERL_5_6_0:1.1.1.1
	CPAN:1.1.1;
locks; strict;
comment	@# @;


1.8
date	2010.09.24.14.59.50;	author millert;	state dead;
branches;
next	1.7;

1.7
date	2009.10.12.18.24.42;	author millert;	state Exp;
branches;
next	1.6;

1.6
date	2008.09.29.17.36.14;	author millert;	state Exp;
branches;
next	1.5;

1.5
date	2003.12.03.03.02.40;	author millert;	state Exp;
branches;
next	1.4;

1.4
date	2002.10.27.22.25.27;	author millert;	state Exp;
branches;
next	1.3;

1.3
date	2001.05.24.18.35.36;	author millert;	state Exp;
branches;
next	1.2;

1.2
date	2000.04.06.17.06.49;	author millert;	state Exp;
branches;
next	1.1;

1.1
date	2000.04.06.16.09.48;	author millert;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	2000.04.06.16.09.48;	author millert;	state Exp;
branches;
next	1.1.1.2;

1.1.1.2
date	2001.05.24.18.23.37;	author millert;	state Exp;
branches;
next	1.1.1.3;

1.1.1.3
date	2002.10.27.22.15.01;	author millert;	state Exp;
branches;
next	1.1.1.4;

1.1.1.4
date	2003.12.03.02.44.08;	author millert;	state Exp;
branches;
next	1.1.1.5;

1.1.1.5
date	2004.08.09.17.47.21;	author millert;	state Exp;
branches;
next	1.1.1.6;

1.1.1.6
date	2005.01.15.21.17.29;	author millert;	state Exp;
branches;
next	1.1.1.7;

1.1.1.7
date	2008.09.29.17.18.42;	author millert;	state Exp;
branches;
next	1.1.1.8;

1.1.1.8
date	2009.10.12.18.11.05;	author millert;	state Exp;
branches;
next	;


desc
@@


1.8
log
@remove files no longer in perl 5.12.2 (or that have moved)
@
text
@# Pod::Text::Termcap -- Convert POD data to ASCII text with format escapes.
#
# Copyright 1999, 2001, 2002, 2004, 2006, 2008 Russ Allbery <rra@@stanford.edu>
#
# This program is free software; you may redistribute it and/or modify it
# under the same terms as Perl itself.
#
# This is a simple subclass of Pod::Text that overrides a few key methods to
# output the right termcap escape sequences for formatted text on the current
# terminal type.

##############################################################################
# Modules and declarations
##############################################################################

package Pod::Text::Termcap;

require 5.004;

use Pod::Text ();
use POSIX ();
use Term::Cap;

use strict;
use vars qw(@@ISA $VERSION);

@@ISA = qw(Pod::Text);

$VERSION = '2.05';

##############################################################################
# Overrides
##############################################################################

# In the initialization method, grab our terminal characteristics as well as
# do all the stuff we normally do.
sub new {
    my ($self, @@args) = @@_;
    my ($ospeed, $term, $termios);
    $self = $self->SUPER::new (@@args);

    # $ENV{HOME} is usually not set on Windows.  The default Term::Cap path
    # may not work on Solaris.
    my $home = exists $ENV{HOME} ? "$ENV{HOME}/.termcap:" : '';
    $ENV{TERMPATH} = $home . '/etc/termcap:/usr/share/misc/termcap'
                           . ':/usr/share/lib/termcap';

    # Fall back on a hard-coded terminal speed if POSIX::Termios isn't
    # available (such as on VMS).
    eval { $termios = POSIX::Termios->new };
    if ($@@) {
        $ospeed = 9600;
    } else {
        $termios->getattr;
        $ospeed = $termios->getospeed || 9600;
    }

    # Fall back on the ANSI escape sequences if Term::Cap doesn't work.
    eval { $term = Tgetent Term::Cap { TERM => undef, OSPEED => $ospeed } };
    $$self{BOLD} = $$term{_md} || "\e[1m";
    $$self{UNDL} = $$term{_us} || "\e[4m";
    $$self{NORM} = $$term{_me} || "\e[m";

    unless (defined $$self{width}) {
        $$self{opt_width} = $ENV{COLUMNS} || $$term{_co} || 80;
        $$self{opt_width} -= 2;
    }

    return $self;
}

# Make level one headings bold.
sub cmd_head1 {
    my ($self, $attrs, $text) = @@_;
    $text =~ s/\s+$//;
    $self->SUPER::cmd_head1 ($attrs, "$$self{BOLD}$text$$self{NORM}");
}

# Make level two headings bold.
sub cmd_head2 {
    my ($self, $attrs, $text) = @@_;
    $text =~ s/\s+$//;
    $self->SUPER::cmd_head2 ($attrs, "$$self{BOLD}$text$$self{NORM}");
}

# Fix up B<> and I<>.  Note that we intentionally don't do F<>.
sub cmd_b { my $self = shift; return "$$self{BOLD}$_[1]$$self{NORM}" }
sub cmd_i { my $self = shift; return "$$self{UNDL}$_[1]$$self{NORM}" }

# Output any included code in bold.
sub output_code {
    my ($self, $code) = @@_;
    $self->output ($$self{BOLD} . $code . $$self{NORM});
}

# Override the wrapping code to igore the special sequences.
sub wrap {
    my $self = shift;
    local $_ = shift;
    my $output = '';
    my $spaces = ' ' x $$self{MARGIN};
    my $width = $$self{opt_width} - $$self{MARGIN};

    # $codes matches a single special sequence.  $char matches any number of
    # special sequences preceeding a single character other than a newline.
    # We have to do $shortchar and $longchar in variables because the
    # construct ${char}{0,$width} didn't do the right thing until Perl 5.8.x.
    my $codes = "(?:\Q$$self{BOLD}\E|\Q$$self{UNDL}\E|\Q$$self{NORM}\E)";
    my $char = "(?:$codes*[^\\n])";
    my $shortchar = $char . "{0,$width}";
    my $longchar = $char . "{$width}";
    while (length > $width) {
        if (s/^($shortchar)\s+// || s/^($longchar)//) {
            $output .= $spaces . $1 . "\n";
        } else {
            last;
        }
    }
    $output .= $spaces . $_;
    $output =~ s/\s+$/\n\n/;
    return $output;
}

##############################################################################
# Module return value and documentation
##############################################################################

1;
__END__

=head1 NAME

Pod::Text::Termcap - Convert POD data to ASCII text with format escapes

=for stopwords
ECMA-48 VT100 Allbery

=head1 SYNOPSIS

    use Pod::Text::Termcap;
    my $parser = Pod::Text::Termcap->new (sentence => 0, width => 78);

    # Read POD from STDIN and write to STDOUT.
    $parser->parse_from_filehandle;

    # Read POD from file.pod and write to file.txt.
    $parser->parse_from_file ('file.pod', 'file.txt');

=head1 DESCRIPTION

Pod::Text::Termcap is a simple subclass of Pod::Text that highlights output
text using the correct termcap escape sequences for the current terminal.
Apart from the format codes, it in all ways functions like Pod::Text.  See
L<Pod::Text> for details and available options.

=head1 NOTES

This module uses Term::Cap to retrieve the formatting escape sequences for
the current terminal, and falls back on the ECMA-48 (the same in this
regard as ANSI X3.64 and ISO 6429, the escape codes also used by DEC VT100
terminals) if the bold, underline, and reset codes aren't set in the
termcap information.

=head1 SEE ALSO

L<Pod::Text>, L<Pod::Simple>, L<Term::Cap>

The current version of this module is always available from its web site at
L<http://www.eyrie.org/~eagle/software/podlators/>.  It is also part of the
Perl core distribution as of 5.6.0.

=head1 AUTHOR

Russ Allbery <rra@@stanford.edu>.

=head1 COPYRIGHT AND LICENSE

Copyright 1999, 2001, 2002, 2004, 2006, 2008 Russ Allbery
<rra@@stanford.edu>.

This program is free software; you may redistribute it and/or modify it
under the same terms as Perl itself.

=cut
@


1.7
log
@Merge in perl 5.10.1
@
text
@@


1.6
log
@fix conflicts and merge in local changes to perl 5.10.0
@
text
@a1 1
# $Id: Termcap.pm,v 2.3 2006-01-25 23:56:54 eagle Exp $
d3 1
a3 1
# Copyright 1999, 2001, 2002, 2004, 2006 by Russ Allbery <rra@@stanford.edu>
d29 1
a29 4
# Don't use the CVS revision as the version, since this module is also in Perl
# core and too many things could munge CVS magic revision strings.  This
# number should ideally be the same as the CVS revision in podlators, however.
$VERSION = 2.03;
d135 3
d178 2
a179 1
Copyright 1999, 2001, 2002, 2004, 2006 by Russ Allbery <rra@@stanford.edu>.
@


1.5
log
@Resolve conflicts for perl 5.8.2, remove old files, and add OpenBSD-specific scaffolding
@
text
@d2 1
a2 1
# $Id: Termcap.pm,v 1.11 2003/07/09 21:52:30 eagle Exp $
d4 1
a4 1
# Copyright 1999, 2001, 2002 by Russ Allbery <rra@@stanford.edu>
d33 1
a33 2
$VERSION = 1.11;

d41 2
a42 2
sub initialize {
    my $self = shift;
d44 1
d69 2
a70 2
        $$self{width} = $ENV{COLUMNS} || $$term{_co} || 80;
        $$self{width} -= 2;
d73 1
a73 1
    $self->SUPER::initialize;
d78 3
a80 4
    my $self = shift;
    local $_ = shift;
    s/\s+$//;
    $self->SUPER::cmd_head1 ("$$self{BOLD}$_$$self{NORM}");
d85 3
a87 4
    my $self = shift;
    local $_ = shift;
    s/\s+$//;
    $self->SUPER::cmd_head2 ("$$self{BOLD}$_$$self{NORM}");
d91 2
a92 2
sub seq_b { my $self = shift; return "$$self{BOLD}$_[0]$$self{NORM}" }
sub seq_i { my $self = shift; return "$$self{UNDL}$_[0]$$self{NORM}" }
d106 10
a115 2
    my $width = $$self{width} - $$self{MARGIN};
    my $code = "(?:\Q$$self{BOLD}\E|\Q$$self{UNDL}\E|\Q$$self{NORM}\E)";
d117 1
a117 2
        if (s/^((?:$code?[^\n]){0,$width})\s+//
            || s/^((?:$code?[^\n]){$width})//) {
d125 1
a125 1
    $output;
a127 1

d167 1
a167 1
L<Pod::Text>, L<Pod::Parser>, L<Term::Cap>
d179 1
a179 1
Copyright 1999, 2001, 2002 by Russ Allbery <rra@@stanford.edu>.
@


1.4
log
@Resolve conflicts, remove old files, merge local changes
@
text
@d2 1
a2 1
# $Id: Termcap.pm,v 1.10 2002/07/15 05:46:00 eagle Exp $
d33 1
a33 1
$VERSION = 1.10;
d46 5
a50 3
    # The default Term::Cap path won't work on Solaris.
    $ENV{TERMPATH} = "$ENV{HOME}/.termcap:/etc/termcap"
        . ":/usr/share/misc/termcap:/usr/share/lib/termcap";
@


1.3
log
@merge in perl 5.6.1 with our local changes
@
text
@d2 1
a2 1
# $Id: Termcap.pm,v 1.0 2000/12/25 12:52:48 eagle Exp $
d4 1
a4 1
# Copyright 1999 by Russ Allbery <rra@@stanford.edu>
d6 1
a6 1
# This program is free software; you can redistribute it and/or modify it
d10 2
a11 2
# output the right termcap escape sequences for formatted text on the
# current terminal type.
d13 1
a13 1
############################################################################
d15 1
a15 1
############################################################################
d30 4
a33 5
# Don't use the CVS revision as the version, since this module is also in
# Perl core and too many things could munge CVS magic revision strings.
# This number should ideally be the same as the CVS revision in podlators,
# however.
$VERSION = 1.00;
d36 1
a36 1
############################################################################
d38 1
a38 1
############################################################################
d44 1
d50 15
a64 7
    my $termios = POSIX::Termios->new;
    $termios->getattr;
    my $ospeed = $termios->getospeed;
    my $term = Tgetent Term::Cap { TERM => undef, OSPEED => $ospeed };
    $$self{BOLD} = $$term{_md} or die 'BOLD';
    $$self{UNDL} = $$term{_us} or die 'UNDL';
    $$self{NORM} = $$term{_me} or die 'NORM';
d67 1
a67 1
        $$self{width} = $ENV{COLUMNS} || $$term{_co} || 78;
d94 6
d122 1
a122 1
############################################################################
d124 1
a124 1
############################################################################
d131 1
a131 1
Pod::Text::Color - Convert POD data to ASCII text with format escapes
d151 8
d161 5
a165 1
L<Pod::Text|Pod::Text>, L<Pod::Parser|Pod::Parser>
d169 8
a176 1
Russ Allbery E<lt>rra@@stanford.eduE<gt>.
@


1.2
log
@perl-5.6.0 + local changes
@
text
@d2 1
a2 1
# $Id: Termcap.pm,v 0.4 1999/09/20 10:17:45 eagle Exp $
d30 5
a34 2
# Use the CVS revision of this file as its version number.
($VERSION = (split (' ', q$Revision: 0.4 $ ))[1]) =~ s/\.(\d)$/.0$1/;
@


1.1
log
@Initial revision
@
text
@@


1.1.1.1
log
@virgin perl 5.6.0
@
text
@@


1.1.1.2
log
@stock perl 5.6.1
@
text
@d2 1
a2 1
# $Id: Termcap.pm,v 1.0 2000/12/25 12:52:48 eagle Exp $
d30 2
a31 5
# Don't use the CVS revision as the version, since this module is also in
# Perl core and too many things could munge CVS magic revision strings.
# This number should ideally be the same as the CVS revision in podlators,
# however.
$VERSION = 1.00;
@


1.1.1.3
log
@stock perl 5.8.0 from CPAN
@
text
@d2 1
a2 1
# $Id: Termcap.pm,v 1.10 2002/07/15 05:46:00 eagle Exp $
d4 1
a4 1
# Copyright 1999, 2001, 2002 by Russ Allbery <rra@@stanford.edu>
d6 1
a6 1
# This program is free software; you may redistribute it and/or modify it
d10 2
a11 2
# output the right termcap escape sequences for formatted text on the current
# terminal type.
d13 1
a13 1
##############################################################################
d15 1
a15 1
##############################################################################
d30 5
a34 4
# Don't use the CVS revision as the version, since this module is also in Perl
# core and too many things could munge CVS magic revision strings.  This
# number should ideally be the same as the CVS revision in podlators, however.
$VERSION = 1.10;
d37 1
a37 1
##############################################################################
d39 1
a39 1
##############################################################################
a44 1
    my ($ospeed, $term, $termios);
d50 7
a56 15
    # Fall back on a hard-coded terminal speed if POSIX::Termios isn't
    # available (such as on VMS).
    eval { $termios = POSIX::Termios->new };
    if ($@@) {
        $ospeed = 9600;
    } else {
        $termios->getattr;
        $ospeed = $termios->getospeed || 9600;
    }

    # Fall back on the ANSI escape sequences if Term::Cap doesn't work.
    eval { $term = Tgetent Term::Cap { TERM => undef, OSPEED => $ospeed } };
    $$self{BOLD} = $$term{_md} || "\e[1m";
    $$self{UNDL} = $$term{_us} || "\e[4m";
    $$self{NORM} = $$term{_me} || "\e[m";
d59 1
a59 1
        $$self{width} = $ENV{COLUMNS} || $$term{_co} || 80;
a85 6
# Output any included code in bold.
sub output_code {
    my ($self, $code) = @@_;
    $self->output ($$self{BOLD} . $code . $$self{NORM});
}

d108 1
a108 1
##############################################################################
d110 1
a110 1
##############################################################################
d117 1
a117 1
Pod::Text::Termcap - Convert POD data to ASCII text with format escapes
a136 8
=head1 NOTES

This module uses Term::Cap to retrieve the formatting escape sequences for
the current terminal, and falls back on the ECMA-48 (the same in this
regard as ANSI X3.64 and ISO 6429, the escape codes also used by DEC VT100
terminals) if the bold, underline, and reset codes aren't set in the
termcap information.

d139 1
a139 5
L<Pod::Text>, L<Pod::Parser>, L<Term::Cap>

The current version of this module is always available from its web site at
L<http://www.eyrie.org/~eagle/software/podlators/>.  It is also part of the
Perl core distribution as of 5.6.0.
d143 1
a143 8
Russ Allbery <rra@@stanford.edu>.

=head1 COPYRIGHT AND LICENSE

Copyright 1999, 2001, 2002 by Russ Allbery <rra@@stanford.edu>.

This program is free software; you may redistribute it and/or modify it
under the same terms as Perl itself.
@


1.1.1.4
log
@perl 5.8.2 from CPAN
@
text
@d2 1
a2 1
# $Id: Termcap.pm,v 1.11 2003/07/09 21:52:30 eagle Exp $
d33 1
a33 1
$VERSION = 1.11;
d46 3
a48 5
    # $ENV{HOME} is usually not set on Windows.  The default Term::Cap path
    # may not work on Solaris.
    my $home = exists $ENV{HOME} ? "$ENV{HOME}/.termcap:" : '';
    $ENV{TERMPATH} = $home . '/etc/termcap:/usr/share/misc/termcap'
                           . ':/usr/share/lib/termcap';
@


1.1.1.5
log
@Import of stock perl 5.8.5
@
text
@d2 1
a2 1
# $Id: Termcap.pm,v 1.5 2003/12/03 03:02:40 millert Exp $
@


1.1.1.6
log
@perl 5.8.6 from CPAN
@
text
@d2 1
a2 1
# $Id: Termcap.pm,v 1.11 2003/07/09 21:52:30 eagle Exp $
@


1.1.1.7
log
@import perl 5.10.0 from CPAN
@
text
@d2 1
a2 1
# $Id: Termcap.pm,v 2.3 2006-01-25 23:56:54 eagle Exp $
d4 1
a4 1
# Copyright 1999, 2001, 2002, 2004, 2006 by Russ Allbery <rra@@stanford.edu>
d33 2
a34 1
$VERSION = 2.03;
d42 2
a43 2
sub new {
    my ($self, @@args) = @@_;
a44 1
    $self = $self->SUPER::new (@@args);
d69 2
a70 2
        $$self{opt_width} = $ENV{COLUMNS} || $$term{_co} || 80;
        $$self{opt_width} -= 2;
d73 1
a73 1
    return $self;
d78 4
a81 3
    my ($self, $attrs, $text) = @@_;
    $text =~ s/\s+$//;
    $self->SUPER::cmd_head1 ($attrs, "$$self{BOLD}$text$$self{NORM}");
d86 4
a89 3
    my ($self, $attrs, $text) = @@_;
    $text =~ s/\s+$//;
    $self->SUPER::cmd_head2 ($attrs, "$$self{BOLD}$text$$self{NORM}");
d93 2
a94 2
sub cmd_b { my $self = shift; return "$$self{BOLD}$_[1]$$self{NORM}" }
sub cmd_i { my $self = shift; return "$$self{UNDL}$_[1]$$self{NORM}" }
d108 2
a109 10
    my $width = $$self{opt_width} - $$self{MARGIN};

    # $codes matches a single special sequence.  $char matches any number of
    # special sequences preceeding a single character other than a newline.
    # We have to do $shortchar and $longchar in variables because the
    # construct ${char}{0,$width} didn't do the right thing until Perl 5.8.x.
    my $codes = "(?:\Q$$self{BOLD}\E|\Q$$self{UNDL}\E|\Q$$self{NORM}\E)";
    my $char = "(?:$codes*[^\\n])";
    my $shortchar = $char . "{0,$width}";
    my $longchar = $char . "{$width}";
d111 2
a112 1
        if (s/^($shortchar)\s+// || s/^($longchar)//) {
d120 1
a120 1
    return $output;
d123 1
d163 1
a163 1
L<Pod::Text>, L<Pod::Simple>, L<Term::Cap>
d175 1
a175 1
Copyright 1999, 2001, 2002, 2004, 2006 by Russ Allbery <rra@@stanford.edu>.
@


1.1.1.8
log
@import perl 5.10.1
@
text
@d2 1
d4 1
a4 1
# Copyright 1999, 2001, 2002, 2004, 2006, 2008 Russ Allbery <rra@@stanford.edu>
d30 4
a33 1
$VERSION = '2.05';
a138 3
=for stopwords
ECMA-48 VT100 Allbery

d179 1
a179 2
Copyright 1999, 2001, 2002, 2004, 2006, 2008 Russ Allbery
<rra@@stanford.edu>.
@


