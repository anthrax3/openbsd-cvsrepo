head	1.2;
access;
symbols
	OPENBSD_4_8:1.1.1.2.0.4
	OPENBSD_4_8_BASE:1.1.1.2
	OPENBSD_4_7:1.1.1.2.0.2
	OPENBSD_4_7_BASE:1.1.1.2
	PERL_5_10_1:1.1.1.2
	OPENBSD_4_6:1.1.1.1.0.30
	OPENBSD_4_6_BASE:1.1.1.1
	OPENBSD_4_5:1.1.1.1.0.26
	OPENBSD_4_5_BASE:1.1.1.1
	PERL_5_10_0:1.1.1.1
	OPENBSD_4_4:1.1.1.1.0.24
	OPENBSD_4_4_BASE:1.1.1.1
	OPENBSD_4_3:1.1.1.1.0.22
	OPENBSD_4_3_BASE:1.1.1.1
	OPENBSD_4_2:1.1.1.1.0.20
	OPENBSD_4_2_BASE:1.1.1.1
	OPENBSD_4_1:1.1.1.1.0.18
	OPENBSD_4_1_BASE:1.1.1.1
	OPENBSD_4_0:1.1.1.1.0.16
	OPENBSD_4_0_BASE:1.1.1.1
	PERL_5_8_8:1.1.1.1
	OPENBSD_3_9:1.1.1.1.0.14
	OPENBSD_3_9_BASE:1.1.1.1
	OPENBSD_3_8:1.1.1.1.0.12
	OPENBSD_3_8_BASE:1.1.1.1
	OPENBSD_3_7:1.1.1.1.0.10
	OPENBSD_3_7_BASE:1.1.1.1
	PERL_5_8_6:1.1.1.1
	OPENBSD_3_6:1.1.1.1.0.8
	OPENBSD_3_6_BASE:1.1.1.1
	PERL_5_8_5:1.1.1.1
	PERL_5_8_3:1.1.1.1
	OPENBSD_3_5:1.1.1.1.0.6
	OPENBSD_3_5_BASE:1.1.1.1
	PERL_5_8_2:1.1.1.1
	OPENBSD_3_4:1.1.1.1.0.4
	OPENBSD_3_4_BASE:1.1.1.1
	OPENBSD_3_3:1.1.1.1.0.2
	OPENBSD_3_3_BASE:1.1.1.1
	PERL_5_8_0:1.1.1.1
	CPAN:1.1.1;
locks; strict;
comment	@# @;
expand	@o@;


1.2
date	2010.09.24.14.59.50;	author millert;	state dead;
branches;
next	1.1;

1.1
date	2002.10.27.22.15.01;	author millert;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	2002.10.27.22.15.01;	author millert;	state Exp;
branches;
next	1.1.1.2;

1.1.1.2
date	2009.10.12.18.11.06;	author millert;	state Exp;
branches;
next	;


desc
@@


1.2
log
@remove files no longer in perl 5.12.2 (or that have moved)
@
text
@#!/usr/bin/perl -w
# $Id: parselink.t,v 1.1 2001/11/23 10:09:06 eagle Exp $
#
# parselink.t -- Tests for Pod::ParseLink.
#
# Copyright 2001 by Russ Allbery <rra@@stanford.edu>
#
# This program is free software; you may redistribute it and/or modify it
# under the same terms as Perl itself.

# The format of each entry in this array is the L<> text followed by the
# five-element parse returned by parselink.  When adding a new test, also
# increment the test count in the BEGIN block below.  We don't use any of the
# fancy test modules intentionally for backward compatibility to older
# versions of Perl.
@@TESTS = (
    [ 'foo',
      undef, 'foo', 'foo', undef, 'pod' ],

    [ 'foo|bar',
      'foo', 'foo', 'bar', undef, 'pod' ],

    [ 'foo/bar',
      undef, '"bar" in foo', 'foo', 'bar', 'pod' ],

    [ 'foo/"baz boo"',
      undef, '"baz boo" in foo', 'foo', 'baz boo', 'pod' ],

    [ '/bar',
      undef, '"bar"', undef, 'bar', 'pod' ],

    [ '/"baz boo"',
      undef, '"baz boo"', undef, 'baz boo', 'pod' ],

    [ '/baz boo',
      undef, '"baz boo"', undef, 'baz boo', 'pod' ],

    [ 'foo bar/baz boo',
      undef, '"baz boo" in foo bar', 'foo bar', 'baz boo', 'pod' ],

    [ 'foo bar  /  baz boo',
      undef, '"baz boo" in foo bar', 'foo bar', 'baz boo', 'pod' ],

    [ "foo\nbar\nbaz\n/\nboo",
      undef, '"boo" in foo bar baz', 'foo bar baz', 'boo', 'pod' ],

    [ 'anchor|name/section',
      'anchor', 'anchor', 'name', 'section', 'pod' ],

    [ '"boo var baz"',
      undef, '"boo var baz"', undef, 'boo var baz', 'pod' ],

    [ 'bar baz',
      undef, '"bar baz"', undef, 'bar baz', 'pod' ],

    [ '"boo bar baz / baz boo"',
      undef, '"boo bar baz / baz boo"', undef, 'boo bar baz / baz boo',
      'pod' ],

    [ 'fooZ<>bar',
      undef, 'fooZ<>bar', 'fooZ<>bar', undef, 'pod' ],

    [ 'Testing I<italics>|foo/bar',
      'Testing I<italics>', 'Testing I<italics>', 'foo', 'bar', 'pod' ],

    [ 'foo/I<Italic> text',
      undef, '"I<Italic> text" in foo', 'foo', 'I<Italic> text', 'pod' ],

    [ 'fooE<verbar>barZ<>/Section C<with> I<B<other> markup',
      undef, '"Section C<with> I<B<other> markup" in fooE<verbar>barZ<>',
      'fooE<verbar>barZ<>', 'Section C<with> I<B<other> markup', 'pod' ],

    [ 'Nested L<http://www.perl.org/>|fooE<sol>bar',
      'Nested L<http://www.perl.org/>', 'Nested L<http://www.perl.org/>',
      'fooE<sol>bar', undef, 'pod' ],

    [ 'ls(1)',
      undef, 'ls(1)', 'ls(1)', undef, 'man' ],

    [ '  perlfunc(1)/open  ',
      undef, '"open" in perlfunc(1)', 'perlfunc(1)', 'open', 'man' ],

    [ 'some manual page|perl(1)',
      'some manual page', 'some manual page', 'perl(1)', undef, 'man' ],

    [ 'http://www.perl.org/',
      undef, 'http://www.perl.org/', 'http://www.perl.org/', undef, 'url' ],

    [ 'news:yld72axzc8.fsf@@windlord.stanford.edu',
      undef, 'news:yld72axzc8.fsf@@windlord.stanford.edu',
      'news:yld72axzc8.fsf@@windlord.stanford.edu', undef, 'url' ]
);

BEGIN {
    chdir 't' if -d 't';
    unshift (@@INC, '../blib/lib');
    $| = 1;
    print "1..25\n";
}

END {
    print "not ok 1\n" unless $loaded;
}

use Pod::ParseLink;
$loaded = 1;
print "ok 1\n";

# Used for reporting test failures.
my @@names = qw(text inferred name section type);

my $n = 2;
for (@@TESTS) {
    my @@expected = @@$_;
    my $link = shift @@expected;
    my @@results = parselink ($link);
    my $okay = 1;
    for (0..4) {
        # Make sure to check undef explicitly; we don't want undef to match
        # the empty string because they're semantically different.
        unless ((!defined ($results[$_]) && !defined ($expected[$_]))
                || (defined ($results[$_]) && defined ($expected[$_])
                    && $results[$_] eq $expected[$_])) {
            print "not ok $n\n" if $okay;
            print "# Incorrect $names[$_]:\n";
            print "#   expected: $expected[$_]\n";
            print "#       seen: $results[$_]\n";
            $okay = 0;
        }
    }
    print "ok $n\n" if $okay;
    $n++;
}
@


1.1
log
@Initial revision
@
text
@@


1.1.1.1
log
@stock perl 5.8.0 from CPAN
@
text
@@


1.1.1.2
log
@import perl 5.10.1
@
text
@d2 1
@

