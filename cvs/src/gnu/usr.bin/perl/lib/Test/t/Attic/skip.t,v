head	1.4;
access;
symbols
	OPENBSD_4_8:1.3.0.4
	OPENBSD_4_8_BASE:1.3
	OPENBSD_4_7:1.3.0.2
	OPENBSD_4_7_BASE:1.3
	PERL_5_10_1:1.1.1.1
	OPENBSD_4_6:1.2.0.4
	OPENBSD_4_6_BASE:1.2
	OPENBSD_4_5:1.1.1.1.0.26
	OPENBSD_4_5_BASE:1.1.1.1
	PERL_5_10_0:1.1.1.1
	OPENBSD_4_4:1.1.1.1.0.24
	OPENBSD_4_4_BASE:1.1.1.1
	OPENBSD_4_3:1.1.1.1.0.22
	OPENBSD_4_3_BASE:1.1.1.1
	OPENBSD_4_2:1.1.1.1.0.20
	OPENBSD_4_2_BASE:1.1.1.1
	OPENBSD_4_1:1.1.1.1.0.18
	OPENBSD_4_1_BASE:1.1.1.1
	OPENBSD_4_0:1.1.1.1.0.16
	OPENBSD_4_0_BASE:1.1.1.1
	PERL_5_8_8:1.1.1.1
	OPENBSD_3_9:1.1.1.1.0.14
	OPENBSD_3_9_BASE:1.1.1.1
	OPENBSD_3_8:1.1.1.1.0.12
	OPENBSD_3_8_BASE:1.1.1.1
	OPENBSD_3_7:1.1.1.1.0.10
	OPENBSD_3_7_BASE:1.1.1.1
	PERL_5_8_6:1.1.1.1
	OPENBSD_3_6:1.1.1.1.0.8
	OPENBSD_3_6_BASE:1.1.1.1
	PERL_5_8_5:1.1.1.1
	PERL_5_8_3:1.1.1.1
	OPENBSD_3_5:1.1.1.1.0.6
	OPENBSD_3_5_BASE:1.1.1.1
	PERL_5_8_2:1.1.1.1
	OPENBSD_3_4:1.1.1.1.0.4
	OPENBSD_3_4_BASE:1.1.1.1
	OPENBSD_3_3:1.1.1.1.0.2
	OPENBSD_3_3_BASE:1.1.1.1
	PERL_5_8_0:1.1.1.1
	CPAN:1.1.1;
locks; strict;
comment	@# @;
expand	@o@;


1.4
date	2010.09.24.14.59.52;	author millert;	state dead;
branches;
next	1.3;

1.3
date	2009.10.12.18.24.44;	author millert;	state Exp;
branches;
next	1.2;

1.2
date	2009.05.13.17.10.14;	author jasper;	state Exp;
branches;
next	1.1;

1.1
date	2002.10.27.22.15.01;	author millert;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	2002.10.27.22.15.01;	author millert;	state Exp;
branches;
next	;


desc
@@


1.4
log
@remove files no longer in perl 5.12.2 (or that have moved)
@
text
@# -*-perl-*-
use strict;
use Test qw($TESTOUT $TESTERR $ntest plan ok skip); 
plan tests => 6;

open F, ">skips" or die "open skips: $!";
$TESTOUT = *F{IO};
$TESTERR = *F{IO};

skip(1, 0);  #should skip

my $skipped=1;
skip('hop', sub { $skipped = 0 });
skip(sub {'jump'}, sub { $skipped = 0 });
skip('skipping stones is more fun', sub { $skipped = 0 });

close F;

$TESTOUT = *STDOUT{IO};
$TESTERR = *STDERR{IO};
$ntest = 1;
open F, "skips" or die "open skips: $!";

ok $skipped, 1, 'not skipped?';

my @@T = <F>;
chop @@T;
my @@expect = split /\n+/, join('',<DATA>);
ok @@T, 4;
for (my $x=0; $x < @@T; $x++) {
    ok $T[$x], $expect[$x];
}

END { close F; unlink "skips" }

__DATA__
ok 1 # skip

ok 2 # skip hop

ok 3 # skip jump

ok 4 # skip skipping stones is more fun
@


1.3
log
@Merge in perl 5.10.1
@
text
@@


1.2
log
@update Test::Simple to version 0.86

tested in multiple builds on multiple arches by me
ok millert@@, simon@@
@
text
@d1 4
a4 1
#!perl -w
d6 3
a8 12
BEGIN {
    if( $ENV{PERL_CORE} ) {
        chdir 't';
        @@INC = '../lib';
    }
}

use Test::More tests => 17;

# If we skip with the same name, Test::Harness will report it back and
# we won't get lots of false bug reports.
my $Why = "Just testing the skip interface.";
d10 1
a10 3
SKIP: {
    skip $Why, 2 
      unless Pigs->can('fly');
d12 4
a15 2
    my $pig = Pigs->new;
    $pig->takeoff;
d17 1
a17 3
    ok( $pig->altitude > 0,         'Pig is airborne' );
    ok( $pig->airspeed > 0,         '  and moving'    );
}
d19 4
d24 1
a24 2
SKIP: {
    skip "We're not skipping", 2 if 0;
d26 6
a31 2
    pass("Inside skip block");
    pass("Another inside");
d34 1
d36 2
a37 8
SKIP: {
    skip "Again, not skipping", 2 if 0;

    my($pack, $file, $line) = caller;
    is( $pack || '', '',      'calling package not interfered with' );
    is( $file || '', '',      '  or file' );
    is( $line || '', '',      '  or line' );
}
d39 1
d41 1
a41 24
SKIP: {
    skip $Why, 2 if 1;

    die "A horrible death";
    fail("Deliberate failure");
    fail("And again");
}


{
    my $warning;
    local $SIG{__WARN__} = sub { $warning = join "", @@_ };
    SKIP: {
        # perl gets the line number a little wrong on the first
        # statement inside a block.
        1 == 1;
#line 56
        skip $Why;
        fail("So very failed");
    }
    is( $warning, "skip() needs to know \$how_many tests are in the ".
                  "block at $0 line 56\n",
        'skip without $how_many warning' );
}
d43 1
a43 28

SKIP: {
    skip "Not skipping here.", 4 if 0;

    pass("This is supposed to run");

    # Testing out nested skips.
    SKIP: {
        skip $Why, 2;
        fail("AHHH!");
        fail("You're a failure");
    }

    pass("This is supposed to run, too");
}

{
    my $warning = '';
    local $SIG{__WARN__} = sub { $warning .= join "", @@_ };

    SKIP: {
        skip 1, "This is backwards" if 1;

        pass "This does not run";
    }

    like $warning, '/^skip\(\) was passed a non-numeric number of tests/';
}
@


1.1
log
@Initial revision
@
text
@d1 1
a1 4
# -*-perl-*-
use strict;
use Test qw($TESTOUT $TESTERR $ntest plan ok skip); 
plan tests => 6;
d3 12
a14 3
open F, ">skips" or die "open skips: $!";
$TESTOUT = *F{IO};
$TESTERR = *F{IO};
d16 3
a18 1
skip(1, 0);  #should skip
d20 2
a21 4
my $skipped=1;
skip('hop', sub { $skipped = 0 });
skip(sub {'jump'}, sub { $skipped = 0 });
skip('skipping stones is more fun', sub { $skipped = 0 });
d23 3
a25 1
close F;
a26 4
$TESTOUT = *STDOUT{IO};
$TESTERR = *STDERR{IO};
$ntest = 1;
open F, "skips" or die "open skips: $!";
d28 2
a29 1
ok $skipped, 1, 'not skipped?';
d31 2
a32 6
my @@T = <F>;
chop @@T;
my @@expect = split /\n+/, join('',<DATA>);
ok @@T, 4;
for (my $x=0; $x < @@T; $x++) {
    ok $T[$x], $expect[$x];
a34 1
END { close F; unlink "skips" }
d36 8
a43 2
__DATA__
ok 1 # skip
a44 1
ok 2 # skip hop
d46 24
a69 1
ok 3 # skip jump
d71 28
a98 1
ok 4 # skip skipping stones is more fun
@


1.1.1.1
log
@stock perl 5.8.0 from CPAN
@
text
@@
