head	1.4;
access;
symbols
	OPENBSD_4_8:1.3.0.4
	OPENBSD_4_8_BASE:1.3
	OPENBSD_4_7:1.3.0.2
	OPENBSD_4_7_BASE:1.3
	PERL_5_10_1:1.1.1.4
	OPENBSD_4_6:1.2.0.4
	OPENBSD_4_6_BASE:1.2
	OPENBSD_4_5:1.1.1.3.0.2
	OPENBSD_4_5_BASE:1.1.1.3
	PERL_5_10_0:1.1.1.3
	OPENBSD_4_4:1.1.1.2.0.10
	OPENBSD_4_4_BASE:1.1.1.2
	OPENBSD_4_3:1.1.1.2.0.8
	OPENBSD_4_3_BASE:1.1.1.2
	OPENBSD_4_2:1.1.1.2.0.6
	OPENBSD_4_2_BASE:1.1.1.2
	OPENBSD_4_1:1.1.1.2.0.4
	OPENBSD_4_1_BASE:1.1.1.2
	OPENBSD_4_0:1.1.1.2.0.2
	OPENBSD_4_0_BASE:1.1.1.2
	PERL_5_8_8:1.1.1.2
	OPENBSD_3_9:1.1.1.1.0.14
	OPENBSD_3_9_BASE:1.1.1.1
	OPENBSD_3_8:1.1.1.1.0.12
	OPENBSD_3_8_BASE:1.1.1.1
	OPENBSD_3_7:1.1.1.1.0.10
	OPENBSD_3_7_BASE:1.1.1.1
	PERL_5_8_6:1.1.1.1
	OPENBSD_3_6:1.1.1.1.0.8
	OPENBSD_3_6_BASE:1.1.1.1
	PERL_5_8_5:1.1.1.1
	PERL_5_8_3:1.1.1.1
	OPENBSD_3_5:1.1.1.1.0.6
	OPENBSD_3_5_BASE:1.1.1.1
	PERL_5_8_2:1.1.1.1
	OPENBSD_3_4:1.1.1.1.0.4
	OPENBSD_3_4_BASE:1.1.1.1
	OPENBSD_3_3:1.1.1.1.0.2
	OPENBSD_3_3_BASE:1.1.1.1
	PERL_5_8_0:1.1.1.1
	CPAN:1.1.1;
locks; strict;
comment	@# @;
expand	@o@;


1.4
date	2010.09.24.14.59.51;	author millert;	state dead;
branches;
next	1.3;

1.3
date	2009.10.12.18.24.43;	author millert;	state Exp;
branches;
next	1.2;

1.2
date	2009.05.16.21.42.57;	author simon;	state Exp;
branches;
next	1.1;

1.1
date	2002.10.27.22.15.01;	author millert;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	2002.10.27.22.15.01;	author millert;	state Exp;
branches;
next	1.1.1.2;

1.1.1.2
date	2006.03.28.18.48.59;	author millert;	state Exp;
branches;
next	1.1.1.3;

1.1.1.3
date	2008.09.29.17.18.43;	author millert;	state Exp;
branches;
next	1.1.1.4;

1.1.1.4
date	2009.10.12.18.10.56;	author millert;	state Exp;
branches;
next	;


desc
@@


1.4
log
@remove files no longer in perl 5.12.2 (or that have moved)
@
text
@#!perl -w

BEGIN {
    if( $ENV{PERL_CORE} ) {
        chdir 't';
        @@INC = ('../lib', 'lib');
    }
    else {
        unshift @@INC, 't/lib';
    }
}

use strict;

require Test::Simple::Catch;
my($out, $err) = Test::Simple::Catch::caught();
local $ENV{HARNESS_ACTIVE} = 0;


# Can't use Test.pm, that's a 5.005 thing.
package My::Test;

# This has to be a require or else the END block below runs before
# Test::Builder's own and the ending diagnostics don't come out right.
require Test::Builder;
my $TB = Test::Builder->create;
$TB->plan(tests => 78);

sub like ($$;$) {
    $TB->like(@@_);
}

sub is ($$;$) {
    $TB->is_eq(@@_);
}

sub main::out_ok ($$) {
    $TB->is_eq( $out->read, shift );
    $TB->is_eq( $err->read, shift );
}

sub main::out_like ($$) {
    my($output, $failure) = @@_;

    $TB->like( $out->read, qr/$output/ );
    $TB->like( $err->read, qr/$failure/ );
}


package main;

require Test::More;
our $TODO;
my $Total = 37;
Test::More->import(tests => $Total);
$out->read;  # clear the plan from $out

# This should all work in the presence of a __DIE__ handler.
local $SIG{__DIE__} = sub { $TB->ok(0, "DIE handler called: ".join "", @@_); };


my $tb = Test::More->builder;
$tb->use_numbers(0);

my $Filename = quotemeta $0;


#line 38
ok( 0, 'failing' );
out_ok( <<OUT, <<ERR );
not ok - failing
OUT
#   Failed test 'failing'
#   at $0 line 38.
ERR


#line 40
is( "foo", "bar", 'foo is bar?');
out_ok( <<OUT, <<ERR );
not ok - foo is bar?
OUT
#   Failed test 'foo is bar?'
#   at $0 line 40.
#          got: 'foo'
#     expected: 'bar'
ERR

#line 89
is( undef, '',    'undef is empty string?');
out_ok( <<OUT, <<ERR );
not ok - undef is empty string?
OUT
#   Failed test 'undef is empty string?'
#   at $0 line 89.
#          got: undef
#     expected: ''
ERR

#line 99
is( undef, 0,     'undef is 0?');
out_ok( <<OUT, <<ERR );
not ok - undef is 0?
OUT
#   Failed test 'undef is 0?'
#   at $0 line 99.
#          got: undef
#     expected: '0'
ERR

#line 110
is( '',    0,     'empty string is 0?' );
out_ok( <<OUT, <<ERR );
not ok - empty string is 0?
OUT
#   Failed test 'empty string is 0?'
#   at $0 line 110.
#          got: ''
#     expected: '0'
ERR

#line 121
isnt("foo", "foo", 'foo isnt foo?' );
out_ok( <<OUT, <<ERR );
not ok - foo isnt foo?
OUT
#   Failed test 'foo isnt foo?'
#   at $0 line 121.
#          got: 'foo'
#     expected: anything else
ERR

#line 132
isn't("foo", "foo",'foo isn\'t foo?' );
out_ok( <<OUT, <<ERR );
not ok - foo isn't foo?
OUT
#   Failed test 'foo isn\'t foo?'
#   at $0 line 132.
#          got: 'foo'
#     expected: anything else
ERR

#line 143
isnt(undef, undef, 'undef isnt undef?');
out_ok( <<OUT, <<ERR );
not ok - undef isnt undef?
OUT
#   Failed test 'undef isnt undef?'
#   at $0 line 143.
#          got: undef
#     expected: anything else
ERR

#line 154
like( "foo", '/that/',  'is foo like that' );
out_ok( <<OUT, <<ERR );
not ok - is foo like that
OUT
#   Failed test 'is foo like that'
#   at $0 line 154.
#                   'foo'
#     doesn't match '/that/'
ERR

#line 165
unlike( "foo", '/foo/', 'is foo unlike foo' );
out_ok( <<OUT, <<ERR );
not ok - is foo unlike foo
OUT
#   Failed test 'is foo unlike foo'
#   at $0 line 165.
#                   'foo'
#           matches '/foo/'
ERR

# Nick Clark found this was a bug.  Fixed in 0.40.
# line 177
like( "bug", '/(%)/',   'regex with % in it' );
out_ok( <<OUT, <<ERR );
not ok - regex with % in it
OUT
#   Failed test 'regex with % in it'
#   at $0 line 177.
#                   'bug'
#     doesn't match '/(%)/'
ERR

#line 188
fail('fail()');
out_ok( <<OUT, <<ERR );
not ok - fail()
OUT
#   Failed test 'fail()'
#   at $0 line 188.
ERR

#line 197
can_ok('Mooble::Hooble::Yooble', qw(this that));
out_ok( <<OUT, <<ERR );
not ok - Mooble::Hooble::Yooble->can(...)
OUT
#   Failed test 'Mooble::Hooble::Yooble->can(...)'
#   at $0 line 197.
#     Mooble::Hooble::Yooble->can('this') failed
#     Mooble::Hooble::Yooble->can('that') failed
ERR

#line 208
can_ok('Mooble::Hooble::Yooble', ());
out_ok( <<OUT, <<ERR );
not ok - Mooble::Hooble::Yooble->can(...)
OUT
#   Failed test 'Mooble::Hooble::Yooble->can(...)'
#   at $0 line 208.
#     can_ok() called with no methods
ERR

#line 218
can_ok(undef, undef);
out_ok( <<OUT, <<ERR );
not ok - ->can(...)
OUT
#   Failed test '->can(...)'
#   at $0 line 218.
#     can_ok() called with empty class or reference
ERR

#line 228
can_ok([], "foo");
out_ok( <<OUT, <<ERR );
not ok - ARRAY->can('foo')
OUT
#   Failed test 'ARRAY->can('foo')'
#   at $0 line 228.
#     ARRAY->can('foo') failed
ERR

#line 238
isa_ok(bless([], "Foo"), "Wibble");
out_ok( <<OUT, <<ERR );
not ok - The object isa Wibble
OUT
#   Failed test 'The object isa Wibble'
#   at $0 line 238.
#     The object isn't a 'Wibble' it's a 'Foo'
ERR

#line 248
isa_ok(42,    "Wibble", "My Wibble");
out_ok( <<OUT, <<ERR );
not ok - My Wibble isa Wibble
OUT
#   Failed test 'My Wibble isa Wibble'
#   at $0 line 248.
#     My Wibble isn't a class or reference
ERR

#line 258
isa_ok(undef, "Wibble", "Another Wibble");
out_ok( <<OUT, <<ERR );
not ok - Another Wibble isa Wibble
OUT
#   Failed test 'Another Wibble isa Wibble'
#   at $0 line 258.
#     Another Wibble isn't defined
ERR

#line 268
isa_ok([],    "HASH");
out_ok( <<OUT, <<ERR );
not ok - The reference isa HASH
OUT
#   Failed test 'The reference isa HASH'
#   at $0 line 268.
#     The reference isn't a 'HASH' it's a 'ARRAY'
ERR

#line 278
new_ok(undef);
out_like( <<OUT, <<ERR );
not ok - new\\(\\) died
OUT
#   Failed test 'new\\(\\) died'
#   at $Filename line 278.
#     Error was:  Can't call method "new" on an undefined value at .*
ERR

#line 288
new_ok( "Does::Not::Exist" );
out_like( <<OUT, <<ERR );
not ok - new\\(\\) died
OUT
#   Failed test 'new\\(\\) died'
#   at $Filename line 288.
#     Error was:  Can't locate object method "new" via package "Does::Not::Exist" .*
ERR


{ package Foo; sub new { } }
{ package Bar; sub new { {} } }
{ package Baz; sub new { bless {}, "Wibble" } }

#line 303
new_ok( "Foo" );
out_ok( <<OUT, <<ERR );
not ok - The object isa Foo
OUT
#   Failed test 'The object isa Foo'
#   at $0 line 303.
#     The object isn't defined
ERR

# line 313
new_ok( "Bar" );
out_ok( <<OUT, <<ERR );
not ok - The object isa Bar
OUT
#   Failed test 'The object isa Bar'
#   at $0 line 313.
#     The object isn't a 'Bar' it's a 'HASH'
ERR

#line 323
new_ok( "Baz" );
out_ok( <<OUT, <<ERR );
not ok - The object isa Baz
OUT
#   Failed test 'The object isa Baz'
#   at $0 line 323.
#     The object isn't a 'Baz' it's a 'Wibble'
ERR

#line 333
new_ok( "Baz", [], "no args" );
out_ok( <<OUT, <<ERR );
not ok - no args isa Baz
OUT
#   Failed test 'no args isa Baz'
#   at $0 line 333.
#     no args isn't a 'Baz' it's a 'Wibble'
ERR

#line 343
cmp_ok( 'foo', 'eq', 'bar', 'cmp_ok eq' );
out_ok( <<OUT, <<ERR );
not ok - cmp_ok eq
OUT
#   Failed test 'cmp_ok eq'
#   at $0 line 343.
#          got: 'foo'
#     expected: 'bar'
ERR

#line 354
cmp_ok( 42.1,  '==', 23,  , '       ==' );
out_ok( <<OUT, <<ERR );
not ok -        ==
OUT
#   Failed test '       =='
#   at $0 line 354.
#          got: 42.1
#     expected: 23
ERR

#line 365
cmp_ok( 42,    '!=', 42   , '       !=' );
out_ok( <<OUT, <<ERR );
not ok -        !=
OUT
#   Failed test '       !='
#   at $0 line 365.
#          got: 42
#     expected: anything else
ERR

#line 376
cmp_ok( 1,     '&&', 0    , '       &&' );
out_ok( <<OUT, <<ERR );
not ok -        &&
OUT
#   Failed test '       &&'
#   at $0 line 376.
#     '1'
#         &&
#     '0'
ERR

# line 388
cmp_ok( 42,    'eq', "foo", '       eq with numbers' );
out_ok( <<OUT, <<ERR );
not ok -        eq with numbers
OUT
#   Failed test '       eq with numbers'
#   at $0 line 388.
#          got: '42'
#     expected: 'foo'
ERR

{
    my $warnings = '';
    local $SIG{__WARN__} = sub { $warnings .= join '', @@_ };

# line 404
    cmp_ok( 42,    '==', "foo", '       == with strings' );
    out_ok( <<OUT, <<ERR );
not ok -        == with strings
OUT
#   Failed test '       == with strings'
#   at $0 line 404.
#          got: 42
#     expected: foo
ERR
    My::Test::like(
        $warnings,
        qr/^Argument "foo" isn't numeric in .* at cmp_ok \[from $Filename line 404\] line 1\.\n$/
    );
    $warnings = '';
}


{
    my $warnings = '';
    local $SIG{__WARN__} = sub { $warnings .= join '', @@_ };

#line 426
    cmp_ok( undef, "ne", "", "undef ne empty string" );

    $TB->is_eq( $out->read, <<OUT );
not ok - undef ne empty string
OUT

    TODO: {
        local $::TODO = 'cmp_ok() gives the wrong "expected" for undef';

        $TB->is_eq( $err->read, <<ERR );
#   Failed test 'undef ne empty string'
#   at $0 line 426.
#          got: undef
#     expected: ''
ERR
    }

    My::Test::like(
        $warnings,
        qr/^Use of uninitialized value.* in string ne at cmp_ok \[from $Filename line 426\] line 1\.\n\z/
    );
}


# generate a $!, it changes its value by context.
-e "wibblehibble";
my $Errno_Number = $!+0;
my $Errno_String = $!.'';
#line 425
cmp_ok( $!,    'eq', '',    '       eq with stringified errno' );
out_ok( <<OUT, <<ERR );
not ok -        eq with stringified errno
OUT
#   Failed test '       eq with stringified errno'
#   at $0 line 425.
#          got: '$Errno_String'
#     expected: ''
ERR

#line 436
cmp_ok( $!,    '==', -1,    '       eq with numerified errno' );
out_ok( <<OUT, <<ERR );
not ok -        eq with numerified errno
OUT
#   Failed test '       eq with numerified errno'
#   at $0 line 436.
#          got: $Errno_Number
#     expected: -1
ERR

#line 447
use_ok('Hooble::mooble::yooble');
my $more_err_re = <<ERR;
#   Failed test 'use Hooble::mooble::yooble;'
#   at $Filename line 447\\.
#     Tried to use 'Hooble::mooble::yooble'.
#     Error:  Can't locate Hooble.* in \\\@@INC .*
ERR
out_like(
    qr/^\Qnot ok - use Hooble::mooble::yooble;\E\n\z/,
    qr/^$more_err_re/
);

#line 460
require_ok('ALL::YOUR::BASE::ARE::BELONG::TO::US::wibble');
$more_err_re = <<ERR;
#   Failed test 'require ALL::YOUR::BASE::ARE::BELONG::TO::US::wibble;'
#   at $Filename line 460\\.
#     Tried to require 'ALL::YOUR::BASE::ARE::BELONG::TO::US::wibble'.
#     Error:  Can't locate ALL.* in \\\@@INC .*
ERR
out_like(
    qr/^\Qnot ok - require ALL::YOUR::BASE::ARE::BELONG::TO::US::wibble;\E\n\z/,
    qr/^$more_err_re/
);


END {
    out_like( <<OUT, <<ERR );
OUT
# Looks like you failed $Total tests of $Total.
ERR

    exit(0);
}
@


1.3
log
@Merge in perl 5.10.1
@
text
@@


1.2
log
@relocate / fix Test::Simple tests

ok millert@@
@
text
@a1 1
# $Id$
d27 1
a27 1
$TB->plan(tests => 23);
d37 3
a39 5
sub main::err_ok ($) {
    my($expect) = @@_;
    my $got = $err->read;

    return $TB->is_eq( $got, $expect );
d42 2
a43 3
sub main::err_like ($) {
    my($expect) = @@_;
    my $got = $err->read;
d45 2
a46 1
    return $TB->like( $got, qr/$expect/ );
d53 2
a54 1
my $Total = 36;
d56 1
d67 1
a67 1
# Preserve the line numbers.
d70 3
a72 1
err_ok( <<ERR );
d77 1
d80 3
a82 4
is( undef, '',    'undef is empty string?');
is( undef, 0,     'undef is 0?');
is( '',    0,     'empty string is 0?' );
err_ok( <<ERR );
d87 7
d95 1
a95 1
#   at $0 line 41.
d98 7
d106 1
a106 1
#   at $0 line 42.
d109 7
d117 1
a117 1
#   at $0 line 43.
d122 1
a122 1
#line 45
d124 3
a126 3
isn't("foo", "foo",'foo isn\'t foo?' );
isnt(undef, undef, 'undef isnt undef?');
err_ok( <<ERR );
d128 1
a128 1
#   at $0 line 45.
d131 7
d139 1
a139 1
#   at $0 line 46.
d142 7
d150 1
a150 1
#   at $0 line 47.
d155 1
a155 1
#line 48
d157 3
a159 2
unlike( "foo", '/foo/', 'is foo unlike foo' );
err_ok( <<ERR );
d161 1
a161 1
#   at $0 line 48.
d164 7
d172 1
a172 1
#   at $0 line 49.
d178 1
a178 1
# line 60
d180 3
a182 1
err_ok( <<ERR );
d184 1
a184 1
#   at $0 line 60.
d189 1
a189 1
#line 67
d191 3
a193 1
err_ok( <<ERR );
d195 1
a195 1
#   at $0 line 67.
d198 1
a198 1
#line 52
d200 3
a202 4
can_ok('Mooble::Hooble::Yooble', ());
can_ok(undef, undef);
can_ok([], "foo");
err_ok( <<ERR );
d204 1
a204 1
#   at $0 line 52.
d207 7
d215 1
a215 1
#   at $0 line 53.
d217 7
d225 1
a225 1
#   at $0 line 54.
d227 7
d235 1
a235 1
#   at $0 line 55.
d239 1
a239 1
#line 55
d241 3
a243 4
isa_ok(42,    "Wibble", "My Wibble");
isa_ok(undef, "Wibble", "Another Wibble");
isa_ok([],    "HASH");
err_ok( <<ERR );
d245 1
a245 1
#   at $0 line 55.
d247 7
d255 9
a263 2
#   at $0 line 56.
#     My Wibble isn't a reference
d265 1
a265 1
#   at $0 line 57.
a266 3
#   Failed test 'The object isa HASH'
#   at $0 line 58.
#     The object isn't a 'HASH' it's a 'ARRAY'
d269 9
d279 1
a279 1
#line 188
d281 3
a283 1
err_like( <<ERR );
d285 1
a285 1
#   at $Filename line 188.
d289 1
a289 1
#line 211
d291 3
a293 1
err_like( <<ERR );
d295 1
a295 1
#   at $Filename line 211.
d299 1
d304 1
a304 1
#line 219
d306 3
a308 1
err_ok( <<ERR );
d310 1
a310 1
#   at $0 line 219.
d314 1
a314 1
# line 231
d316 3
a318 1
err_ok( <<ERR );
d320 1
a320 1
#   at $0 line 231.
d324 1
a324 1
#line 239
d326 3
a328 1
err_ok( <<ERR );
d330 1
a330 1
#   at $0 line 239.
d334 1
a334 1
#line 247
d336 3
a338 1
err_ok( <<ERR );
d340 1
a340 1
#   at $0 line 247.
d344 1
a344 2

#line 68
d346 3
a348 4
cmp_ok( 42.1,  '==', 23,  , '       ==' );
cmp_ok( 42,    '!=', 42   , '       !=' );
cmp_ok( 1,     '&&', 0    , '       &&' );
err_ok( <<ERR );
d350 1
a350 1
#   at $0 line 68.
d353 7
d361 1
a361 1
#   at $0 line 69.
d364 7
d372 1
a372 1
#   at $0 line 70.
d375 7
d383 1
a383 1
#   at $0 line 71.
d389 1
a389 2

# line 196
d391 3
a393 1
err_ok( <<ERR );
d395 1
a395 1
#   at $0 line 196.
a399 1

d401 1
a401 1
    my $warnings;
d404 1
a404 1
# line 211
d406 3
a408 1
    err_ok( <<ERR );
d410 1
a410 1
#   at $0 line 211.
d414 6
a419 2
    My::Test::like $warnings,
     qr/^Argument "foo" isn't numeric in .* at cmp_ok \[from $Filename line 211\] line 1\.\n$/;
d421 27
d455 1
a455 1
#line 80
d457 3
a459 2
cmp_ok( $!,    '==', -1,    '       eq with numerified errno' );
err_ok( <<ERR );
d461 1
a461 1
#   at $0 line 80.
d464 7
d472 1
a472 1
#   at $0 line 81.
d477 1
a477 1
#line 84
a478 1

d481 1
a481 1
#   at $Filename line 84\\.
d485 4
d490 1
a490 4
My::Test::like($err->read, "/^$more_err_re/");


#line 85
d494 1
a494 1
#   at $Filename line 85\\.
d498 4
a501 2

My::Test::like($err->read, "/^$more_err_re/");
a503 1
#line 88
d505 1
a505 38
    $TB->is_eq($$out, <<OUT, 'failing output');
1..$Total
not ok - failing
not ok - foo is bar?
not ok - undef is empty string?
not ok - undef is 0?
not ok - empty string is 0?
not ok - foo isnt foo?
not ok - foo isn't foo?
not ok - undef isnt undef?
not ok - is foo like that
not ok - is foo unlike foo
not ok - regex with % in it
not ok - fail()
not ok - Mooble::Hooble::Yooble->can(...)
not ok - Mooble::Hooble::Yooble->can(...)
not ok - ->can(...)
not ok - ARRAY->can('foo')
not ok - The object isa Wibble
not ok - My Wibble isa Wibble
not ok - Another Wibble isa Wibble
not ok - The object isa HASH
not ok - new() died
not ok - new() died
not ok - The object isa Foo
not ok - The object isa Bar
not ok - The object isa Baz
not ok - no args isa Baz
not ok - cmp_ok eq
not ok -        ==
not ok -        !=
not ok -        &&
not ok -        eq with numbers
not ok -        == with strings
not ok -        eq with stringified errno
not ok -        eq with numerified errno
not ok - use Hooble::mooble::yooble;
not ok - require ALL::YOUR::BASE::ARE::BELONG::TO::US::wibble;
a506 2

err_ok( <<ERR );
@


1.1
log
@Initial revision
@
text
@d2 1
d18 1
d24 5
a28 1
print "1..2\n";
d30 3
a32 11
my $test_num = 1;
# Utility testing functions.
sub ok ($;$) {
    my($test, $name) = @@_;
    my $ok = '';
    $ok .= "not " unless $test;
    $ok .= "ok $test_num";
    $ok .= " - $name" if defined $name;
    $ok .= "\n";
    print $ok;
    $test_num++;
d34 16
a49 1
    return $test;
d56 1
a56 1
my $Total = 28;
d59 9
d71 4
d81 18
d100 1
d103 15
d119 1
d122 10
d134 1
d136 6
d143 1
d145 4
d153 17
d171 1
d176 68
d250 3
a252 52
cmp_ok( 42,    '==', "foo", '       == with strings' );
cmp_ok( 42,    'eq', "foo", '       eq with numbers' );
cmp_ok( undef, 'eq', 'foo', '       eq with undef' );

# generate a $!, it changes its value by context.
-e "wibblehibble";
my $Errno_Number = $!+0;
my $Errno_String = $!.'';
cmp_ok( $!,    'eq', '',    '       eq with stringified errno' );
cmp_ok( $!,    '==', -1,    '       eq with numerified errno' );

#line 84
use_ok('Hooble::mooble::yooble');
require_ok('ALL::YOUR::BASE::ARE::BELONG::TO::US::wibble');

#line 88
END {
    My::Test::ok($$out eq <<OUT, 'failing output');
1..$Total
not ok 1 - failing
not ok 2 - foo is bar?
not ok 3 - undef is empty string?
not ok 4 - undef is 0?
not ok 5 - empty string is 0?
not ok 6 - foo isnt foo?
not ok 7 - foo isn't foo?
not ok 8 - is foo like that
not ok 9 - is foo unlike foo
not ok 10 - regex with % in it
not ok 11 - fail()
not ok 12 - Mooble::Hooble::Yooble->can(...)
not ok 13 - Mooble::Hooble::Yooble->can(...)
not ok 14 - The object isa Wibble
not ok 15 - My Wibble isa Wibble
not ok 16 - Another Wibble isa Wibble
not ok 17 - The object isa HASH
not ok 18 - cmp_ok eq
not ok 19 -        ==
not ok 20 -        !=
not ok 21 -        &&
not ok 22 -        == with strings
not ok 23 -        eq with numbers
not ok 24 -        eq with undef
not ok 25 -        eq with stringified errno
not ok 26 -        eq with numerified errno
not ok 27 - use Hooble::mooble::yooble;
not ok 28 - require ALL::YOUR::BASE::ARE::BELONG::TO::US::wibble;
OUT

    my $err_re = <<ERR;
#     Failed test ($0 at line 38)
#     Failed test ($0 at line 40)
d255 2
a256 44
#     Failed test ($0 at line 41)
#          got: undef
#     expected: ''
#     Failed test ($0 at line 42)
#          got: undef
#     expected: '0'
#     Failed test ($0 at line 43)
#          got: ''
#     expected: '0'
#     Failed test ($0 at line 45)
#     'foo'
#         ne
#     'foo'
#     Failed test ($0 at line 46)
#     'foo'
#         ne
#     'foo'
#     Failed test ($0 at line 48)
#                   'foo'
#     doesn't match '/that/'
#     Failed test ($0 at line 49)
#                   'foo'
#           matches '/foo/'
#     Failed test ($0 at line 52)
#                   'bug'
#     doesn't match '/(%)/'
#     Failed test ($0 at line 54)
#     Failed test ($0 at line 52)
#     Mooble::Hooble::Yooble->can('this') failed
#     Mooble::Hooble::Yooble->can('that') failed
#     Failed test ($0 at line 53)
#     can_ok() called with no methods
#     Failed test ($0 at line 55)
#     The object isn't a 'Wibble' it's a 'Foo'
#     Failed test ($0 at line 56)
#     My Wibble isn't a reference
#     Failed test ($0 at line 57)
#     Another Wibble isn't defined
#     Failed test ($0 at line 58)
#     The object isn't a 'HASH' it's a 'ARRAY'
#     Failed test ($0 at line 68)
#          got: 'foo'
#     expected: 'bar'
#     Failed test ($0 at line 69)
d259 6
a264 5
#     Failed test ($0 at line 70)
#     '42'
#         !=
#     '42'
#     Failed test ($0 at line 71)
d268 8
a275 4
#     Failed test ($0 at line 72)
#          got: 42
#     expected: 0
#     Failed test ($0 at line 73)
d278 31
a308 4
#     Failed test ($0 at line 74)
#          got: undef
#     expected: 'foo'
#     Failed test ($0 at line 80)
d311 2
a312 1
#     Failed test ($0 at line 81)
d317 6
a322 3
   my $filename = quotemeta $0;
   my $more_err_re = <<ERR;
#     Failed test \\($filename at line 84\\)
d325 10
a334 1
#     Failed test \\($filename at line 85\\)
d337 48
a386 5

    unless( My::Test::ok($$err =~ /^\Q$err_re\E$more_err_re$/, 
                         'failing errors') ) {
        print $$err;
    }
@


1.1.1.1
log
@stock perl 5.8.0 from CPAN
@
text
@@


1.1.1.2
log
@perl 5.8.8 import
@
text
@a16 1
local $ENV{HARNESS_ACTIVE} = 0;
d22 1
a22 5
# This has to be a require or else the END block below runs before
# Test::Builder's own and the ending diagnostics don't come out right.
require Test::Builder;
my $TB = Test::Builder->create;
$TB->plan(tests => 17);
d24 11
a34 11
sub like ($$;$) {
    $TB->like(@@_);
}

sub is ($$;$) {
    $TB->is_eq(@@_);
}

sub main::err_ok ($) {
    my($expect) = @@_;
    my $got = $err->read;
d36 1
a36 1
    return $TB->is_eq( $got, $expect );
a45 5
my $tb = Test::More->builder;
$tb->use_numbers(0);

my $Filename = quotemeta $0;

a48 4
err_ok( <<ERR );
#   Failed test 'failing'
#   in $0 at line 38.
ERR
d55 78
a132 3
err_ok( <<ERR );
#   Failed test 'foo is bar?'
#   in $0 at line 40.
d135 1
a135 2
#   Failed test 'undef is empty string?'
#   in $0 at line 41.
d138 1
a138 2
#   Failed test 'undef is 0?'
#   in $0 at line 42.
d141 1
a141 2
#   Failed test 'empty string is 0?'
#   in $0 at line 43.
d144 1
a144 9
ERR

#line 45
isnt("foo", "foo", 'foo isnt foo?' );
isn't("foo", "foo",'foo isn\'t foo?' );
isnt(undef, undef, 'undef isnt undef?');
err_ok( <<ERR );
#   Failed test 'foo isnt foo?'
#   in $0 at line 45.
d148 1
a148 2
#   Failed test 'foo isn\'t foo?'
#   in $0 at line 46.
d152 1
a152 13
#   Failed test 'undef isnt undef?'
#   in $0 at line 47.
#     undef
#         ne
#     undef
ERR

#line 48
like( "foo", '/that/',  'is foo like that' );
unlike( "foo", '/foo/', 'is foo unlike foo' );
err_ok( <<ERR );
#   Failed test 'is foo like that'
#   in $0 at line 48.
d155 1
a155 2
#   Failed test 'is foo unlike foo'
#   in $0 at line 49.
d158 1
a158 8
ERR

# Nick Clark found this was a bug.  Fixed in 0.40.
# line 60
like( "bug", '/(%)/',   'regex with % in it' );
err_ok( <<ERR );
#   Failed test 'regex with % in it'
#   in $0 at line 60.
d161 2
a162 15
ERR

#line 67
fail('fail()');
err_ok( <<ERR );
#   Failed test 'fail()'
#   in $0 at line 67.
ERR

#line 52
can_ok('Mooble::Hooble::Yooble', qw(this that));
can_ok('Mooble::Hooble::Yooble', ());
err_ok( <<ERR );
#   Failed test 'Mooble::Hooble::Yooble->can(...)'
#   in $0 at line 52.
d165 1
a165 2
#   Failed test 'Mooble::Hooble::Yooble->can(...)'
#   in $0 at line 53.
d167 1
a167 10
ERR

#line 55
isa_ok(bless([], "Foo"), "Wibble");
isa_ok(42,    "Wibble", "My Wibble");
isa_ok(undef, "Wibble", "Another Wibble");
isa_ok([],    "HASH");
err_ok( <<ERR );
#   Failed test 'The object isa Wibble'
#   in $0 at line 55.
d169 1
a169 2
#   Failed test 'My Wibble isa Wibble'
#   in $0 at line 56.
d171 1
a171 2
#   Failed test 'Another Wibble isa Wibble'
#   in $0 at line 57.
d173 1
a173 2
#   Failed test 'The object isa HASH'
#   in $0 at line 58.
d175 1
a175 10
ERR

#line 68
cmp_ok( 'foo', 'eq', 'bar', 'cmp_ok eq' );
cmp_ok( 42.1,  '==', 23,  , '       ==' );
cmp_ok( 42,    '!=', 42   , '       !=' );
cmp_ok( 1,     '&&', 0    , '       &&' );
err_ok( <<ERR );
#   Failed test 'cmp_ok eq'
#   in $0 at line 68.
d178 1
a178 2
#   Failed test '       =='
#   in $0 at line 69.
d181 1
a181 2
#   Failed test '       !='
#   in $0 at line 70.
d185 1
a185 2
#   Failed test '       &&'
#   in $0 at line 71.
d189 4
a192 8
ERR


# line 196
cmp_ok( 42,    'eq', "foo", '       eq with numbers' );
err_ok( <<ERR );
#   Failed test '       eq with numbers'
#   in $0 at line 196.
d195 4
a198 31
ERR


{
    my $warnings;
    local $SIG{__WARN__} = sub { $warnings .= join '', @@_ };

# line 211
    cmp_ok( 42,    '==', "foo", '       == with strings' );
    err_ok( <<ERR );
#   Failed test '       == with strings'
#   in $0 at line 211.
#          got: 42
#     expected: foo
ERR
    My::Test::like $warnings,
     qq[/^Argument "foo" isn't numeric in .* at $Filename line 211\\\.\n\$/];

}


# generate a $!, it changes its value by context.
-e "wibblehibble";
my $Errno_Number = $!+0;
my $Errno_String = $!.'';
#line 80
cmp_ok( $!,    'eq', '',    '       eq with stringified errno' );
cmp_ok( $!,    '==', -1,    '       eq with numerified errno' );
err_ok( <<ERR );
#   Failed test '       eq with stringified errno'
#   in $0 at line 80.
d201 1
a201 2
#   Failed test '       eq with numerified errno'
#   in $0 at line 81.
d206 3
a208 6
#line 84
use_ok('Hooble::mooble::yooble');

my $more_err_re = <<ERR;
#   Failed test 'use Hooble::mooble::yooble;'
#   in $Filename at line 84\\.
d211 1
a211 11
# BEGIN failed--compilation aborted at $Filename line 84.
ERR

My::Test::like($err->read, "/^$more_err_re/");


#line 85
require_ok('ALL::YOUR::BASE::ARE::BELONG::TO::US::wibble');
$more_err_re = <<ERR;
#   Failed test 'require ALL::YOUR::BASE::ARE::BELONG::TO::US::wibble;'
#   in $Filename at line 85\\.
d214 1
d217 4
a220 40
My::Test::like($err->read, "/^$more_err_re/");


#line 88
END {
    $TB->is_eq($$out, <<OUT, 'failing output');
1..$Total
not ok - failing
not ok - foo is bar?
not ok - undef is empty string?
not ok - undef is 0?
not ok - empty string is 0?
not ok - foo isnt foo?
not ok - foo isn't foo?
not ok - undef isnt undef?
not ok - is foo like that
not ok - is foo unlike foo
not ok - regex with % in it
not ok - fail()
not ok - Mooble::Hooble::Yooble->can(...)
not ok - Mooble::Hooble::Yooble->can(...)
not ok - The object isa Wibble
not ok - My Wibble isa Wibble
not ok - Another Wibble isa Wibble
not ok - The object isa HASH
not ok - cmp_ok eq
not ok -        ==
not ok -        !=
not ok -        &&
not ok -        eq with numbers
not ok -        == with strings
not ok -        eq with stringified errno
not ok -        eq with numerified errno
not ok - use Hooble::mooble::yooble;
not ok - require ALL::YOUR::BASE::ARE::BELONG::TO::US::wibble;
OUT

err_ok( <<ERR );
# Looks like you failed $Total tests of $Total.
ERR
@


1.1.1.3
log
@import perl 5.10.0 from CPAN
@
text
@d48 1
a48 1
my $Total = 30;
a50 4
# This should all work in the presence of a __DIE__ handler.
local $SIG{__DIE__} = sub { $TB->ok(0, "DIE handler called: ".join "", @@_); };


d61 1
a61 1
#   at $0 line 38.
d71 1
a71 1
#   at $0 line 40.
d75 1
a75 1
#   at $0 line 41.
d79 1
a79 1
#   at $0 line 42.
d83 1
a83 1
#   at $0 line 43.
d94 1
a94 1
#   at $0 line 45.
d99 1
a99 1
#   at $0 line 46.
d104 1
a104 1
#   at $0 line 47.
d115 1
a115 1
#   at $0 line 48.
d119 1
a119 1
#   at $0 line 49.
d129 1
a129 1
#   at $0 line 60.
d138 1
a138 1
#   at $0 line 67.
a143 2
can_ok(undef, undef);
can_ok([], "foo");
d146 1
a146 1
#   at $0 line 52.
d150 1
a150 1
#   at $0 line 53.
a151 6
#   Failed test '->can(...)'
#   at $0 line 54.
#     can_ok() called with empty class or reference
#   Failed test 'ARRAY->can('foo')'
#   at $0 line 55.
#     ARRAY->can('foo') failed
d161 1
a161 1
#   at $0 line 55.
d164 1
a164 1
#   at $0 line 56.
d167 1
a167 1
#   at $0 line 57.
d170 1
a170 1
#   at $0 line 58.
d181 1
a181 1
#   at $0 line 68.
d185 1
a185 1
#   at $0 line 69.
d189 1
a189 1
#   at $0 line 70.
d194 1
a194 1
#   at $0 line 71.
d205 1
a205 1
#   at $0 line 196.
d219 1
a219 1
#   at $0 line 211.
d238 1
a238 1
#   at $0 line 80.
d242 1
a242 1
#   at $0 line 81.
d252 1
a252 1
#   at $Filename line 84\\.
d255 1
d265 1
a265 1
#   at $Filename line 85\\.
a290 2
not ok - ->can(...)
not ok - ARRAY->can('foo')
@


1.1.1.4
log
@import perl 5.10.1
@
text
@d27 1
a27 1
$TB->plan(tests => 78);
d37 3
a39 7
sub main::out_ok ($$) {
    $TB->is_eq( $out->read, shift );
    $TB->is_eq( $err->read, shift );
}

sub main::out_like ($$) {
    my($output, $failure) = @@_;
d41 1
a41 2
    $TB->like( $out->read, qr/$output/ );
    $TB->like( $err->read, qr/$failure/ );
d48 1
a48 2
our $TODO;
my $Total = 37;
a49 1
$out->read;  # clear the plan from $out
d60 1
a60 1

d63 1
a63 3
out_ok( <<OUT, <<ERR );
not ok - failing
OUT
a67 1

d70 4
a73 3
out_ok( <<OUT, <<ERR );
not ok - foo is bar?
OUT
a77 7
ERR

#line 89
is( undef, '',    'undef is empty string?');
out_ok( <<OUT, <<ERR );
not ok - undef is empty string?
OUT
d79 1
a79 1
#   at $0 line 89.
a81 7
ERR

#line 99
is( undef, 0,     'undef is 0?');
out_ok( <<OUT, <<ERR );
not ok - undef is 0?
OUT
d83 1
a83 1
#   at $0 line 99.
a85 7
ERR

#line 110
is( '',    0,     'empty string is 0?' );
out_ok( <<OUT, <<ERR );
not ok - empty string is 0?
OUT
d87 1
a87 1
#   at $0 line 110.
d92 1
a92 1
#line 121
d94 3
a96 3
out_ok( <<OUT, <<ERR );
not ok - foo isnt foo?
OUT
d98 4
a101 10
#   at $0 line 121.
#          got: 'foo'
#     expected: anything else
ERR

#line 132
isn't("foo", "foo",'foo isn\'t foo?' );
out_ok( <<OUT, <<ERR );
not ok - foo isn't foo?
OUT
d103 4
a106 10
#   at $0 line 132.
#          got: 'foo'
#     expected: anything else
ERR

#line 143
isnt(undef, undef, 'undef isnt undef?');
out_ok( <<OUT, <<ERR );
not ok - undef isnt undef?
OUT
d108 4
a111 3
#   at $0 line 143.
#          got: undef
#     expected: anything else
d114 1
a114 1
#line 154
d116 2
a117 3
out_ok( <<OUT, <<ERR );
not ok - is foo like that
OUT
d119 1
a119 1
#   at $0 line 154.
a121 7
ERR

#line 165
unlike( "foo", '/foo/', 'is foo unlike foo' );
out_ok( <<OUT, <<ERR );
not ok - is foo unlike foo
OUT
d123 1
a123 1
#   at $0 line 165.
d129 1
a129 1
# line 177
d131 1
a131 3
out_ok( <<OUT, <<ERR );
not ok - regex with % in it
OUT
d133 1
a133 1
#   at $0 line 177.
d138 1
a138 1
#line 188
d140 1
a140 3
out_ok( <<OUT, <<ERR );
not ok - fail()
OUT
d142 1
a142 1
#   at $0 line 188.
d145 1
a145 1
#line 197
d147 4
a150 3
out_ok( <<OUT, <<ERR );
not ok - Mooble::Hooble::Yooble->can(...)
OUT
d152 1
a152 1
#   at $0 line 197.
a154 7
ERR

#line 208
can_ok('Mooble::Hooble::Yooble', ());
out_ok( <<OUT, <<ERR );
not ok - Mooble::Hooble::Yooble->can(...)
OUT
d156 1
a156 1
#   at $0 line 208.
a157 7
ERR

#line 218
can_ok(undef, undef);
out_ok( <<OUT, <<ERR );
not ok - ->can(...)
OUT
d159 1
a159 1
#   at $0 line 218.
a160 7
ERR

#line 228
can_ok([], "foo");
out_ok( <<OUT, <<ERR );
not ok - ARRAY->can('foo')
OUT
d162 1
a162 1
#   at $0 line 228.
d166 1
a166 1
#line 238
d168 4
a171 3
out_ok( <<OUT, <<ERR );
not ok - The object isa Wibble
OUT
d173 1
a173 1
#   at $0 line 238.
a174 7
ERR

#line 248
isa_ok(42,    "Wibble", "My Wibble");
out_ok( <<OUT, <<ERR );
not ok - My Wibble isa Wibble
OUT
d176 2
a177 9
#   at $0 line 248.
#     My Wibble isn't a class or reference
ERR

#line 258
isa_ok(undef, "Wibble", "Another Wibble");
out_ok( <<OUT, <<ERR );
not ok - Another Wibble isa Wibble
OUT
d179 1
a179 1
#   at $0 line 258.
d181 3
d186 1
a186 76
#line 268
isa_ok([],    "HASH");
out_ok( <<OUT, <<ERR );
not ok - The reference isa HASH
OUT
#   Failed test 'The reference isa HASH'
#   at $0 line 268.
#     The reference isn't a 'HASH' it's a 'ARRAY'
ERR

#line 278
new_ok(undef);
out_like( <<OUT, <<ERR );
not ok - new\\(\\) died
OUT
#   Failed test 'new\\(\\) died'
#   at $Filename line 278.
#     Error was:  Can't call method "new" on an undefined value at .*
ERR

#line 288
new_ok( "Does::Not::Exist" );
out_like( <<OUT, <<ERR );
not ok - new\\(\\) died
OUT
#   Failed test 'new\\(\\) died'
#   at $Filename line 288.
#     Error was:  Can't locate object method "new" via package "Does::Not::Exist" .*
ERR


{ package Foo; sub new { } }
{ package Bar; sub new { {} } }
{ package Baz; sub new { bless {}, "Wibble" } }

#line 303
new_ok( "Foo" );
out_ok( <<OUT, <<ERR );
not ok - The object isa Foo
OUT
#   Failed test 'The object isa Foo'
#   at $0 line 303.
#     The object isn't defined
ERR

# line 313
new_ok( "Bar" );
out_ok( <<OUT, <<ERR );
not ok - The object isa Bar
OUT
#   Failed test 'The object isa Bar'
#   at $0 line 313.
#     The object isn't a 'Bar' it's a 'HASH'
ERR

#line 323
new_ok( "Baz" );
out_ok( <<OUT, <<ERR );
not ok - The object isa Baz
OUT
#   Failed test 'The object isa Baz'
#   at $0 line 323.
#     The object isn't a 'Baz' it's a 'Wibble'
ERR

#line 333
new_ok( "Baz", [], "no args" );
out_ok( <<OUT, <<ERR );
not ok - no args isa Baz
OUT
#   Failed test 'no args isa Baz'
#   at $0 line 333.
#     no args isn't a 'Baz' it's a 'Wibble'
ERR

#line 343
d188 4
a191 3
out_ok( <<OUT, <<ERR );
not ok - cmp_ok eq
OUT
d193 1
a193 1
#   at $0 line 343.
a195 7
ERR

#line 354
cmp_ok( 42.1,  '==', 23,  , '       ==' );
out_ok( <<OUT, <<ERR );
not ok -        ==
OUT
d197 1
a197 1
#   at $0 line 354.
a199 7
ERR

#line 365
cmp_ok( 42,    '!=', 42   , '       !=' );
out_ok( <<OUT, <<ERR );
not ok -        !=
OUT
d201 4
a204 10
#   at $0 line 365.
#          got: 42
#     expected: anything else
ERR

#line 376
cmp_ok( 1,     '&&', 0    , '       &&' );
out_ok( <<OUT, <<ERR );
not ok -        &&
OUT
d206 1
a206 1
#   at $0 line 376.
d212 2
a213 1
# line 388
d215 1
a215 3
out_ok( <<OUT, <<ERR );
not ok -        eq with numbers
OUT
d217 1
a217 1
#   at $0 line 388.
d222 1
d224 1
a224 1
    my $warnings = '';
d227 1
a227 1
# line 404
d229 1
a229 3
    out_ok( <<OUT, <<ERR );
not ok -        == with strings
OUT
d231 1
a231 1
#   at $0 line 404.
d235 2
a236 11
    My::Test::like(
        $warnings,
        qr/^Argument "foo" isn't numeric in .* at cmp_ok \[from $Filename line 404\] line 1\.\n$/
    );
    $warnings = '';
}


{
    my $warnings = '';
    local $SIG{__WARN__} = sub { $warnings .= join '', @@_ };
a237 22
#line 426
    cmp_ok( undef, "ne", "", "undef ne empty string" );

    $TB->is_eq( $out->read, <<OUT );
not ok - undef ne empty string
OUT

    TODO: {
        local $::TODO = 'cmp_ok() gives the wrong "expected" for undef';

        $TB->is_eq( $err->read, <<ERR );
#   Failed test 'undef ne empty string'
#   at $0 line 426.
#          got: undef
#     expected: ''
ERR
    }

    My::Test::like(
        $warnings,
        qr/^Use of uninitialized value.* in string ne at cmp_ok \[from $Filename line 426\] line 1\.\n\z/
    );
d245 1
a245 1
#line 425
d247 2
a248 3
out_ok( <<OUT, <<ERR );
not ok -        eq with stringified errno
OUT
d250 1
a250 1
#   at $0 line 425.
a252 7
ERR

#line 436
cmp_ok( $!,    '==', -1,    '       eq with numerified errno' );
out_ok( <<OUT, <<ERR );
not ok -        eq with numerified errno
OUT
d254 1
a254 1
#   at $0 line 436.
d259 1
a259 1
#line 447
d261 1
d264 1
a264 1
#   at $Filename line 447\\.
a267 4
out_like(
    qr/^\Qnot ok - use Hooble::mooble::yooble;\E\n\z/,
    qr/^$more_err_re/
);
d269 4
a272 1
#line 460
d276 1
a276 1
#   at $Filename line 460\\.
d280 2
a281 4
out_like(
    qr/^\Qnot ok - require ALL::YOUR::BASE::ARE::BELONG::TO::US::wibble;\E\n\z/,
    qr/^$more_err_re/
);
d284 1
d286 32
a317 1
    out_like( <<OUT, <<ERR );
d319 2
@


