head	1.4;
access;
symbols
	OPENBSD_4_8:1.3.0.4
	OPENBSD_4_8_BASE:1.3
	OPENBSD_4_7:1.3.0.2
	OPENBSD_4_7_BASE:1.3
	PERL_5_10_1:1.1.1.2
	OPENBSD_4_6:1.2.0.4
	OPENBSD_4_6_BASE:1.2
	OPENBSD_4_5:1.1.1.1.0.2
	OPENBSD_4_5_BASE:1.1.1.1
	PERL_5_10_0:1.1.1.1
	CPAN:1.1.1;
locks; strict;
comment	@# @;
expand	@o@;


1.4
date	2010.09.24.14.59.51;	author millert;	state dead;
branches;
next	1.3;

1.3
date	2009.10.12.18.24.43;	author millert;	state Exp;
branches;
next	1.2;

1.2
date	2009.05.16.21.42.57;	author simon;	state Exp;
branches;
next	1.1;

1.1
date	2008.09.29.17.18.43;	author millert;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	2008.09.29.17.18.43;	author millert;	state Exp;
branches;
next	1.1.1.2;

1.1.1.2
date	2009.10.12.18.10.56;	author millert;	state Exp;
branches;
next	;


desc
@@


1.4
log
@remove files no longer in perl 5.12.2 (or that have moved)
@
text
@#!/usr/bin/perl -w

BEGIN {
    if( $ENV{PERL_CORE} ) {
        chdir 't';
        @@INC = ('../lib', 'lib', '../lib/Test/Simple/t/lib');
    }
    else {
        unshift @@INC, 't/lib';
    }
}

use strict;

require Test::Simple::Catch;
my($out, $err) = Test::Simple::Catch::caught();
local $ENV{HARNESS_ACTIVE} = 0;

require Test::Builder;
my $TB = Test::Builder->create;
$TB->level(0);

sub try_cmp_ok {
    my($left, $cmp, $right) = @@_;
    
    my %expect;
    $expect{ok}    = eval "\$left $cmp \$right";
    $expect{error} = $@@;
    $expect{error} =~ s/ at .*\n?//;

    local $Test::Builder::Level = $Test::Builder::Level + 1;
    my $ok = cmp_ok($left, $cmp, $right, "cmp_ok");
    $TB->is_num(!!$ok, !!$expect{ok}, "  right return");
    
    my $diag = $err->read;
    if( !$ok and $expect{error} ) {
        $diag =~ s/^# //mg;
        $TB->like( $diag, qr/\Q$expect{error}\E/, "  expected error" );
    }
    elsif( $ok ) {
        $TB->is_eq( $diag, '', "  passed without diagnostic" );
    }
    else {
        $TB->ok(1, "  failed without diagnostic");
    }
}


use Test::More;
Test::More->builder->no_ending(1);

require MyOverload;
my $cmp = Overloaded::Compare->new("foo", 42);
my $ify = Overloaded::Ify->new("bar", 23);

my @@Tests = (
    [1, '==', 1],
    [1, '==', 2],
    ["a", "eq", "b"],
    ["a", "eq", "a"],
    [1, "+", 1],
    [1, "-", 1],

    [$cmp, '==', 42],
    [$cmp, 'eq', "foo"],
    [$ify, 'eq', "bar"],
    [$ify, "==", 23],
);

plan tests => scalar @@Tests;
$TB->plan(tests => @@Tests * 2);

for my $test (@@Tests) {
    try_cmp_ok(@@$test);
}
@


1.3
log
@Merge in perl 5.10.1
@
text
@@


1.2
log
@relocate / fix Test::Simple tests

ok millert@@
@
text
@a1 1
# $Id$
@


1.1
log
@Initial revision
@
text
@d2 1
d7 1
a7 1
        @@INC = ('../lib', 'lib');
d33 2
a34 2
    my $ok = cmp_ok($left, $cmp, $right);
    $TB->is_num(!!$ok, !!$expect{ok});
d39 1
a39 1
        $TB->like( $diag, "/\Q$expect{error}\E/" );
d42 1
a42 1
        $TB->is_eq( $diag, '' );
d45 1
a45 1
        $TB->ok(1);
d53 4
d64 5
a69 16

# These don't work yet.
if( 0 ) {
#if( eval { require overload } ) {
    require MyOverload;
    
    my $cmp = Overloaded::Compare->new("foo", 42);
    my $ify = Overloaded::Ify->new("bar", 23);
    
    push @@Tests, (
        [$cmp, '==', 42],
        [$cmp, 'eq', "foo"],
        [$ify, 'eq', "bar"],
        [$ify, "==", 23],
    );
}
@


1.1.1.1
log
@import perl 5.10.0 from CPAN
@
text
@@


1.1.1.2
log
@import perl 5.10.1
@
text
@d6 1
a6 1
        @@INC = ('../lib', 'lib', '../lib/Test/Simple/t/lib');
d32 2
a33 2
    my $ok = cmp_ok($left, $cmp, $right, "cmp_ok");
    $TB->is_num(!!$ok, !!$expect{ok}, "  right return");
d38 1
a38 1
        $TB->like( $diag, qr/\Q$expect{error}\E/, "  expected error" );
d41 1
a41 1
        $TB->is_eq( $diag, '', "  passed without diagnostic" );
d44 1
a44 1
        $TB->ok(1, "  failed without diagnostic");
a51 4
require MyOverload;
my $cmp = Overloaded::Compare->new("foo", 42);
my $ify = Overloaded::Ify->new("bar", 23);

d59 1
d61 15
a75 5
    [$cmp, '==', 42],
    [$cmp, 'eq', "foo"],
    [$ify, 'eq', "bar"],
    [$ify, "==", 23],
);
@

