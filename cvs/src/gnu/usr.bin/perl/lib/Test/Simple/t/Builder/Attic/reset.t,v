head	1.3;
access;
symbols
	OPENBSD_4_8:1.2.0.4
	OPENBSD_4_8_BASE:1.2
	OPENBSD_4_7:1.2.0.2
	OPENBSD_4_7_BASE:1.2
	PERL_5_10_1:1.1.1.1
	CPAN:1.1.1
	OPENBSD_4_6:1.1.0.4
	OPENBSD_4_6_BASE:1.1;
locks; strict;
comment	@# @;


1.3
date	2010.09.24.14.59.52;	author millert;	state dead;
branches;
next	1.2;

1.2
date	2009.10.12.18.24.44;	author millert;	state Exp;
branches;
next	1.1;

1.1
date	2009.05.16.21.42.58;	author simon;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	2009.10.12.18.10.56;	author millert;	state Exp;
branches;
next	;


desc
@@


1.3
log
@remove files no longer in perl 5.12.2 (or that have moved)
@
text
@#!/usr/bin/perl -w

# Test Test::Builder->reset;

BEGIN {
    if( $ENV{PERL_CORE} ) {
        chdir 't';
        @@INC = ('../lib', 'lib');
    }
    else {
        unshift @@INC, 't/lib';
    }
}
chdir 't';


use Test::Builder;
my $Test = Test::Builder->new;
my $tb = Test::Builder->create;

# We'll need this later to know the outputs were reset
my %Original_Output;
$Original_Output{$_} = $tb->$_ for qw(output failure_output todo_output);

# Alter the state of Test::Builder as much as possible.
my $output = '';
$tb->output(\$output);
$tb->failure_output(\$output);
$tb->todo_output(\$output);

$tb->plan(tests => 14);
$tb->level(0);

$tb->ok(1, "Running a test to alter TB's state");

# This won't print since we just sent output off to oblivion.
$tb->ok(0, "And a failure for fun");

$Test::Builder::Level = 3;

$tb->exported_to('Foofer');

$tb->use_numbers(0);
$tb->no_header(1);
$tb->no_ending(1);


# Now reset it.
$tb->reset;


$Test->ok( !defined $tb->exported_to, 'exported_to' );
$Test->is_eq( $tb->expected_tests, 0, 'expected_tests' );
$Test->is_eq( $tb->level,          1, 'level' );
$Test->is_eq( $tb->use_numbers,    1, 'use_numbers' );
$Test->is_eq( $tb->no_header,      0, 'no_header' );
$Test->is_eq( $tb->no_ending,      0, 'no_ending' );
$Test->is_eq( $tb->current_test,   0, 'current_test' );
$Test->is_eq( scalar $tb->summary, 0, 'summary' );
$Test->is_eq( scalar $tb->details, 0, 'details' );
$Test->is_eq( fileno $tb->output,
              fileno $Original_Output{output},         'output' );
$Test->is_eq( fileno $tb->failure_output,
              fileno $Original_Output{failure_output}, 'failure_output' );
$Test->is_eq( fileno $tb->todo_output,
              fileno $Original_Output{todo_output},    'todo_output' );

$tb->current_test(12);
$tb->level(0);
$tb->ok(1, 'final test to make sure output was reset');

$Test->current_test(13);
$Test->done_testing(13);
@


1.2
log
@Merge in perl 5.10.1
@
text
@@


1.1
log
@relocate / fix Test::Simple tests

ok millert@@
@
text
@a1 1
# $Id$
d18 2
a19 1
my $tb = Test::Builder->new;
d21 1
d25 5
a33 1
# Alter the state of Test::Builder as much as possible.
a35 7
my $tmpfile = 'foo.tmp';

$tb->output($tmpfile);
$tb->failure_output($tmpfile);
$tb->todo_output($tmpfile);
END { 1 while unlink $tmpfile }

a50 14
my $test_num = 2;   # since we already printed 1
# Utility testing functions.
sub ok ($;$) {
    my($test, $name) = @@_;
    my $ok = '';
    $ok .= "not " unless $test;
    $ok .= "ok $test_num";
    $ok .= " - $name" if defined $name;
    $ok .= "\n";
    print $ok;
    $test_num++;

    return $test;
}
d52 15
d68 1
a68 20
ok( !defined $tb->exported_to,          'exported_to' );
ok( $tb->expected_tests == 0,           'expected_tests' );
ok( $tb->level          == 1,           'level' );
ok( $tb->use_numbers    == 1,           'use_numbers' );
ok( $tb->no_header      == 0,           'no_header' );
ok( $tb->no_ending      == 0,           'no_ending' );
ok( fileno $tb->output         == fileno $Original_Output{output},    
                                        'output' );
ok( fileno $tb->failure_output == fileno $Original_Output{failure_output},    
                                        'failure_output' );
ok( fileno $tb->todo_output    == fileno $Original_Output{todo_output},
                                        'todo_output' );
ok( $tb->current_test   == 0,           'current_test' );
ok( $tb->summary        == 0,           'summary' );
ok( $tb->details        == 0,           'details' );

$tb->no_ending(1);
$tb->no_header(1);
$tb->plan(tests => 14);
$tb->current_test(13);
d71 3
@


1.1.1.1
log
@import perl 5.10.1
@
text
@d2 1
d19 1
a19 2
my $Test = Test::Builder->new;
my $tb = Test::Builder->create;
a20 1
# We'll need this later to know the outputs were reset
a23 5
# Alter the state of Test::Builder as much as possible.
my $output = '';
$tb->output(\$output);
$tb->failure_output(\$output);
$tb->todo_output(\$output);
d28 1
d31 7
d53 14
a67 15
$Test->ok( !defined $tb->exported_to, 'exported_to' );
$Test->is_eq( $tb->expected_tests, 0, 'expected_tests' );
$Test->is_eq( $tb->level,          1, 'level' );
$Test->is_eq( $tb->use_numbers,    1, 'use_numbers' );
$Test->is_eq( $tb->no_header,      0, 'no_header' );
$Test->is_eq( $tb->no_ending,      0, 'no_ending' );
$Test->is_eq( $tb->current_test,   0, 'current_test' );
$Test->is_eq( scalar $tb->summary, 0, 'summary' );
$Test->is_eq( scalar $tb->details, 0, 'details' );
$Test->is_eq( fileno $tb->output,
              fileno $Original_Output{output},         'output' );
$Test->is_eq( fileno $tb->failure_output,
              fileno $Original_Output{failure_output}, 'failure_output' );
$Test->is_eq( fileno $tb->todo_output,
              fileno $Original_Output{todo_output},    'todo_output' );
d69 20
a88 1
$tb->current_test(12);
a90 3

$Test->current_test(13);
$Test->done_testing(13);
@

