head	1.4;
access;
symbols
	OPENBSD_4_8:1.3.0.4
	OPENBSD_4_8_BASE:1.3
	OPENBSD_4_7:1.3.0.2
	OPENBSD_4_7_BASE:1.3
	PERL_5_10_1:1.1.1.3
	OPENBSD_4_6:1.2.0.4
	OPENBSD_4_6_BASE:1.2
	OPENBSD_4_5:1.1.1.2.0.2
	OPENBSD_4_5_BASE:1.1.1.2
	PERL_5_10_0:1.1.1.2
	OPENBSD_4_4:1.1.1.1.0.24
	OPENBSD_4_4_BASE:1.1.1.1
	OPENBSD_4_3:1.1.1.1.0.22
	OPENBSD_4_3_BASE:1.1.1.1
	OPENBSD_4_2:1.1.1.1.0.20
	OPENBSD_4_2_BASE:1.1.1.1
	OPENBSD_4_1:1.1.1.1.0.18
	OPENBSD_4_1_BASE:1.1.1.1
	OPENBSD_4_0:1.1.1.1.0.16
	OPENBSD_4_0_BASE:1.1.1.1
	PERL_5_8_8:1.1.1.1
	OPENBSD_3_9:1.1.1.1.0.14
	OPENBSD_3_9_BASE:1.1.1.1
	OPENBSD_3_8:1.1.1.1.0.12
	OPENBSD_3_8_BASE:1.1.1.1
	OPENBSD_3_7:1.1.1.1.0.10
	OPENBSD_3_7_BASE:1.1.1.1
	PERL_5_8_6:1.1.1.1
	OPENBSD_3_6:1.1.1.1.0.8
	OPENBSD_3_6_BASE:1.1.1.1
	PERL_5_8_5:1.1.1.1
	PERL_5_8_3:1.1.1.1
	OPENBSD_3_5:1.1.1.1.0.6
	OPENBSD_3_5_BASE:1.1.1.1
	PERL_5_8_2:1.1.1.1
	OPENBSD_3_4:1.1.1.1.0.4
	OPENBSD_3_4_BASE:1.1.1.1
	OPENBSD_3_3:1.1.1.1.0.2
	OPENBSD_3_3_BASE:1.1.1.1
	PERL_5_8_0:1.1.1.1
	CPAN:1.1.1;
locks; strict;
comment	@# @;
expand	@o@;


1.4
date	2010.09.24.14.59.51;	author millert;	state dead;
branches;
next	1.3;

1.3
date	2009.10.12.18.24.43;	author millert;	state Exp;
branches;
next	1.2;

1.2
date	2009.05.16.21.42.57;	author simon;	state Exp;
branches;
next	1.1;

1.1
date	2002.10.27.22.15.01;	author millert;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	2002.10.27.22.15.01;	author millert;	state Exp;
branches;
next	1.1.1.2;

1.1.1.2
date	2008.09.29.17.18.43;	author millert;	state Exp;
branches;
next	1.1.1.3;

1.1.1.3
date	2009.10.12.18.10.56;	author millert;	state Exp;
branches;
next	;


desc
@@


1.4
log
@remove files no longer in perl 5.12.2 (or that have moved)
@
text
@#!/usr/bin/perl -w

BEGIN {
    if( $ENV{PERL_CORE} ) {
        chdir 't';
        @@INC = ('../lib', 'lib');
    }
    else {
        unshift @@INC, 't/lib';
    }
}

use Test::More tests => 7;

my $tb = Test::Builder->create;

#line 20
ok !eval { $tb->plan(tests => undef) };
is($@@, "Got an undefined number of tests at $0 line 20.\n");

#line 24
ok !eval { $tb->plan(tests => 0) };
is($@@, "You said to run 0 tests at $0 line 24.\n");

{
    my $warning = '';
    local $SIG{__WARN__} = sub { $warning .= join '', @@_ };

#line 31
    ok $tb->plan(no_plan => 1);
    is( $warning, "no_plan takes no arguments at $0 line 31.\n" );
    is $tb->has_plan, 'no_plan';
}
@


1.3
log
@Merge in perl 5.10.1
@
text
@@


1.2
log
@relocate / fix Test::Simple tests

ok millert@@
@
text
@a1 1
# $Id$
d13 1
a13 1
use Test::More tests => 9;
a15 1
$tb->level(0);
a24 4
#line 28
ok !eval { $tb->ok(1) };
is( $@@, "You tried to run a test without a plan at $0 line 28.\n");

d29 1
a29 1
#line 36
d31 1
a31 1
    is( $warning, "no_plan takes no arguments at $0 line 36.\n" );
@


1.1
log
@Initial revision
@
text
@d1 3
d14 1
a14 55
# Can't use Test.pm, that's a 5.005 thing.
package My::Test;

print "1..12\n";

my $test_num = 1;
# Utility testing functions.
sub ok ($;$) {
    my($test, $name) = @@_;
    my $ok = '';
    $ok .= "not " unless $test;
    $ok .= "ok $test_num";
    $ok .= " - $name" if defined $name;
    $ok .= "\n";
    print $ok;
    $test_num++;
}


package main;

require Test::Simple;

require Test::Simple::Catch;
my($out, $err) = Test::Simple::Catch::caught();

eval {
    Test::Simple->import;
};

My::Test::ok($$out eq '');
My::Test::ok($$err eq '');
My::Test::ok($@@    eq '');

eval {
    Test::Simple->import(tests => undef);
};

My::Test::ok($$out eq '');
My::Test::ok($$err eq '');
My::Test::ok($@@ =~ /Got an undefined number of tests/);

eval {
    Test::Simple->import(tests => 0);
};

My::Test::ok($$out eq '');
My::Test::ok($$err eq '');
My::Test::ok($@@ =~ /You said to run 0 tests!/);

eval {
    Test::Simple::ok(1);
};
My::Test::ok( $@@ =~ /You tried to run a test without a plan!/);

d16 2
a17 3
END {
    My::Test::ok($$out eq '');
    My::Test::ok($$err eq "");
d19 20
a38 2
    # Prevent Test::Simple from exiting with non zero.
    exit 0;
@


1.1.1.1
log
@stock perl 5.8.0 from CPAN
@
text
@@


1.1.1.2
log
@import perl 5.10.0 from CPAN
@
text
@a0 2
#!/usr/bin/perl -w

d11 29
a39 1
use Test::More tests => 6;
d41 3
a43 2
my $tb = Test::Builder->create;
$tb->level(0);
d45 29
a73 11
#line 19
ok !eval { $tb->plan(tests => undef) };
is($@@, "Got an undefined number of tests at $0 line 19.\n");

#line 23
ok !eval { $tb->plan(tests => 0) };
is($@@, "You said to run 0 tests at $0 line 23.\n");

#line 27
ok !eval { $tb->ok(1) };
is( $@@, "You tried to run a test without a plan at $0 line 27.\n");
@


1.1.1.3
log
@import perl 5.10.1
@
text
@d13 1
a13 1
use Test::More tests => 7;
d16 1
d18 1
a18 1
#line 20
d20 1
a20 1
is($@@, "Got an undefined number of tests at $0 line 20.\n");
d22 1
a22 1
#line 24
d24 1
a24 1
is($@@, "You said to run 0 tests at $0 line 24.\n");
d26 3
a28 9
{
    my $warning = '';
    local $SIG{__WARN__} = sub { $warning .= join '', @@_ };

#line 31
    ok $tb->plan(no_plan => 1);
    is( $warning, "no_plan takes no arguments at $0 line 31.\n" );
    is $tb->has_plan, 'no_plan';
}
@


