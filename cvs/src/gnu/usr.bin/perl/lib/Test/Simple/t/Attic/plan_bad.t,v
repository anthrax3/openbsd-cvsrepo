head	1.4;
access;
symbols
	OPENBSD_4_8:1.3.0.4
	OPENBSD_4_8_BASE:1.3
	OPENBSD_4_7:1.3.0.2
	OPENBSD_4_7_BASE:1.3
	PERL_5_10_1:1.1.1.3
	OPENBSD_4_6:1.2.0.4
	OPENBSD_4_6_BASE:1.2
	OPENBSD_4_5:1.1.1.2.0.2
	OPENBSD_4_5_BASE:1.1.1.2
	PERL_5_10_0:1.1.1.2
	OPENBSD_4_4:1.1.1.1.0.10
	OPENBSD_4_4_BASE:1.1.1.1
	OPENBSD_4_3:1.1.1.1.0.8
	OPENBSD_4_3_BASE:1.1.1.1
	OPENBSD_4_2:1.1.1.1.0.6
	OPENBSD_4_2_BASE:1.1.1.1
	OPENBSD_4_1:1.1.1.1.0.4
	OPENBSD_4_1_BASE:1.1.1.1
	OPENBSD_4_0:1.1.1.1.0.2
	OPENBSD_4_0_BASE:1.1.1.1
	PERL_5_8_8:1.1.1.1
	CPAN:1.1.1;
locks; strict;
comment	@# @;


1.4
date	2010.09.24.14.59.51;	author millert;	state dead;
branches;
next	1.3;

1.3
date	2009.10.12.18.24.43;	author millert;	state Exp;
branches;
next	1.2;

1.2
date	2009.05.16.21.42.57;	author simon;	state Exp;
branches;
next	1.1;

1.1
date	2006.03.28.18.48.59;	author millert;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	2006.03.28.18.48.59;	author millert;	state Exp;
branches;
next	1.1.1.2;

1.1.1.2
date	2008.09.29.17.18.43;	author millert;	state Exp;
branches;
next	1.1.1.3;

1.1.1.3
date	2009.10.12.18.10.56;	author millert;	state Exp;
branches;
next	;


desc
@@


1.4
log
@remove files no longer in perl 5.12.2 (or that have moved)
@
text
@#!/usr/bin/perl -w

BEGIN {
    if( $ENV{PERL_CORE} ) {
        chdir 't';
        @@INC = '../lib';
    }
}


use Test::More tests => 12;
use Test::Builder;
my $tb = Test::Builder->create;
$tb->level(0);

ok !eval { $tb->plan( tests => 'no_plan' ); };
is $@@, sprintf "Number of tests must be a positive integer.  You gave it 'no_plan' at %s line %d.\n", $0, __LINE__ - 1;

my $foo = [];
my @@foo = ($foo, 2, 3);
ok !eval { $tb->plan( tests => @@foo ) };
is $@@, sprintf "Number of tests must be a positive integer.  You gave it '$foo' at %s line %d.\n", $0, __LINE__ - 1;

ok !eval { $tb->plan( tests => 9.99 ) };
is $@@, sprintf "Number of tests must be a positive integer.  You gave it '9.99' at %s line %d.\n", $0, __LINE__ - 1;

#line 25
ok !eval { $tb->plan( tests => -1 ) };
is $@@, "Number of tests must be a positive integer.  You gave it '-1' at $0 line 25.\n";

#line 29
ok !eval { $tb->plan( tests => '' ) };
is $@@, "You said to run 0 tests at $0 line 29.\n";

#line 33
ok !eval { $tb->plan( 'wibble' ) };
is $@@, "plan() doesn't understand wibble at $0 line 33.\n";
@


1.3
log
@Merge in perl 5.10.1
@
text
@@


1.2
log
@relocate / fix Test::Simple tests

ok millert@@
@
text
@a1 1
# $Id$
@


1.1
log
@Initial revision
@
text
@d2 1
d12 4
a15 2
# Can't use Test.pm, that's a 5.005 thing.
package My::Test;
d17 2
a18 42
print "1..7\n";

my $test_num = 1;
# Utility testing functions.
sub ok ($;$) {
    my($test, $name) = @@_;
    my $ok = '';
    $ok .= "not " unless $test;
    $ok .= "ok $test_num";
    $ok .= " - $name" if defined $name;
    $ok .= "\n";
    print $ok;
    $test_num++;

    return $test;
}


sub is ($$;$) {
    my($this, $that, $name) = @@_;
    my $test = $this eq $that;
    my $ok = '';
    $ok .= "not " unless $test;
    $ok .= "ok $test_num";
    $ok .= " - $name" if defined $name;
    $ok .= "\n";
    print $ok;

    unless( $test ) {
        print "# got      \n$this";
        print "# expected \n$that";
    }
    $test_num++;

    return $test;
}


use Test::More import => ['plan'];

ok !eval { plan tests => 'no_plan'; };
is $@@, "Number of tests must be a postive integer.  You gave it 'no_plan'.\n";
d22 5
a26 2
ok !eval { plan tests => @@foo };
is $@@, "Number of tests must be a postive integer.  You gave it '$foo'.\n";
d28 11
a38 3
ok !eval { plan tests => 0 };
ok !eval { plan tests => -1 };
ok !eval { plan tests => '' };
@


1.1.1.1
log
@perl 5.8.8 import
@
text
@@


1.1.1.2
log
@import perl 5.10.0 from CPAN
@
text
@d11 2
a12 4
use Test::More tests => 10;
use Test::Builder;
my $tb = Test::Builder->create;
$tb->level(0);
d14 42
a55 2
ok !eval { $tb->plan( tests => 'no_plan' ); };
is $@@, sprintf "Number of tests must be a positive integer.  You gave it 'no_plan' at %s line %d.\n", $0, __LINE__ - 1;
d59 2
a60 2
ok !eval { $tb->plan( tests => @@foo ) };
is $@@, sprintf "Number of tests must be a positive integer.  You gave it '$foo' at %s line %d.\n", $0, __LINE__ - 1;
d62 3
a64 11
#line 25
ok !eval { $tb->plan( tests => -1 ) };
is $@@, "Number of tests must be a positive integer.  You gave it '-1' at $0 line 25.\n";

#line 29
ok !eval { $tb->plan( tests => '' ) };
is $@@, "You said to run 0 tests at $0 line 29.\n";

#line 33
ok !eval { $tb->plan( 'wibble' ) };
is $@@, "plan() doesn't understand wibble at $0 line 33.\n";
@


1.1.1.3
log
@import perl 5.10.1
@
text
@d11 1
a11 1
use Test::More tests => 12;
a22 3

ok !eval { $tb->plan( tests => 9.99 ) };
is $@@, sprintf "Number of tests must be a positive integer.  You gave it '9.99' at %s line %d.\n", $0, __LINE__ - 1;
@


