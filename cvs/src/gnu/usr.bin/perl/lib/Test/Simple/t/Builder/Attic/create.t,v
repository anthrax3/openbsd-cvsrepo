head	1.3;
access;
symbols
	OPENBSD_4_8:1.2.0.4
	OPENBSD_4_8_BASE:1.2
	OPENBSD_4_7:1.2.0.2
	OPENBSD_4_7_BASE:1.2
	PERL_5_10_1:1.1.1.1
	CPAN:1.1.1
	OPENBSD_4_6:1.1.0.4
	OPENBSD_4_6_BASE:1.1;
locks; strict;
comment	@# @;


1.3
date	2010.09.24.14.59.52;	author millert;	state dead;
branches;
next	1.2;

1.2
date	2009.10.12.18.24.44;	author millert;	state Exp;
branches;
next	1.1;

1.1
date	2009.05.16.21.42.57;	author simon;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	2009.10.12.18.10.57;	author millert;	state Exp;
branches;
next	;


desc
@@


1.3
log
@remove files no longer in perl 5.12.2 (or that have moved)
@
text
@#!/usr/bin/perl -w

#!perl -w

BEGIN {
    if( $ENV{PERL_CORE} ) {
        chdir 't';
        @@INC = ('../lib', 'lib');
    }
    else {
        unshift @@INC, 't/lib';
    }
}

use Test::More tests => 7;
use Test::Builder;
use Test::Builder::NoOutput;

my $more_tb = Test::More->builder;
isa_ok $more_tb, 'Test::Builder';

is $more_tb, Test::More->builder, 'create does not interfere with ->builder';
is $more_tb, Test::Builder->new,  '       does not interfere with ->new';

{
    my $new_tb = Test::Builder::NoOutput->create;

    isa_ok $new_tb,  'Test::Builder';
    isnt $more_tb, $new_tb, 'Test::Builder->create makes a new object';

    $new_tb->plan(tests => 1);
    $new_tb->ok(1, "a test");

    is $new_tb->read, <<'OUT';
1..1
ok 1 - a test
OUT
}

pass("Changing output() of new TB doesn't interfere with singleton");
@


1.2
log
@Merge in perl 5.10.1
@
text
@@


1.1
log
@relocate / fix Test::Simple tests

ok millert@@
@
text
@a1 1
# $Id$
d15 1
a15 1
use Test::More tests => 8;
d17 1
d26 1
a26 1
    my $new_tb  = Test::Builder->create;
a30 3
    $new_tb->output("some_file");
    END { 1 while unlink "some_file" }

d32 1
a32 4
    $new_tb->ok(1);
}

pass("Changing output() of new TB doesn't interfere with singleton");
d34 1
a34 2
ok open FILE, "some_file";
is join("", <FILE>), <<OUT;
d36 1
a36 1
ok 1
d38 1
d40 1
a40 1
close FILE;
@


1.1.1.1
log
@import perl 5.10.1
@
text
@d2 1
d16 1
a16 1
use Test::More tests => 7;
a17 1
use Test::Builder::NoOutput;
d26 1
a26 1
    my $new_tb = Test::Builder::NoOutput->create;
d31 3
d35 4
a38 1
    $new_tb->ok(1, "a test");
d40 2
a41 1
    is $new_tb->read, <<'OUT';
d43 1
a43 1
ok 1 - a test
a44 1
}
d46 1
a46 1
pass("Changing output() of new TB doesn't interfere with singleton");
@

