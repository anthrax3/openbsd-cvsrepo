head	1.4;
access;
symbols
	OPENBSD_4_8:1.3.0.4
	OPENBSD_4_8_BASE:1.3
	OPENBSD_4_7:1.3.0.2
	OPENBSD_4_7_BASE:1.3
	PERL_5_10_1:1.1.1.4
	OPENBSD_4_6:1.2.0.4
	OPENBSD_4_6_BASE:1.2
	OPENBSD_4_5:1.1.1.3.0.2
	OPENBSD_4_5_BASE:1.1.1.3
	PERL_5_10_0:1.1.1.3
	OPENBSD_4_4:1.1.1.2.0.10
	OPENBSD_4_4_BASE:1.1.1.2
	OPENBSD_4_3:1.1.1.2.0.8
	OPENBSD_4_3_BASE:1.1.1.2
	OPENBSD_4_2:1.1.1.2.0.6
	OPENBSD_4_2_BASE:1.1.1.2
	OPENBSD_4_1:1.1.1.2.0.4
	OPENBSD_4_1_BASE:1.1.1.2
	OPENBSD_4_0:1.1.1.2.0.2
	OPENBSD_4_0_BASE:1.1.1.2
	PERL_5_8_8:1.1.1.2
	OPENBSD_3_9:1.1.1.1.0.14
	OPENBSD_3_9_BASE:1.1.1.1
	OPENBSD_3_8:1.1.1.1.0.12
	OPENBSD_3_8_BASE:1.1.1.1
	OPENBSD_3_7:1.1.1.1.0.10
	OPENBSD_3_7_BASE:1.1.1.1
	PERL_5_8_6:1.1.1.1
	OPENBSD_3_6:1.1.1.1.0.8
	OPENBSD_3_6_BASE:1.1.1.1
	PERL_5_8_5:1.1.1.1
	PERL_5_8_3:1.1.1.1
	OPENBSD_3_5:1.1.1.1.0.6
	OPENBSD_3_5_BASE:1.1.1.1
	PERL_5_8_2:1.1.1.1
	OPENBSD_3_4:1.1.1.1.0.4
	OPENBSD_3_4_BASE:1.1.1.1
	OPENBSD_3_3:1.1.1.1.0.2
	OPENBSD_3_3_BASE:1.1.1.1
	PERL_5_8_0:1.1.1.1
	CPAN:1.1.1;
locks; strict;
comment	@# @;
expand	@o@;


1.4
date	2010.09.24.14.59.51;	author millert;	state dead;
branches;
next	1.3;

1.3
date	2009.10.12.18.24.43;	author millert;	state Exp;
branches;
next	1.2;

1.2
date	2009.05.16.21.42.57;	author simon;	state Exp;
branches;
next	1.1;

1.1
date	2002.10.27.22.15.01;	author millert;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	2002.10.27.22.15.01;	author millert;	state Exp;
branches;
next	1.1.1.2;

1.1.1.2
date	2006.03.28.18.48.59;	author millert;	state Exp;
branches;
next	1.1.1.3;

1.1.1.3
date	2008.09.29.17.18.43;	author millert;	state Exp;
branches;
next	1.1.1.4;

1.1.1.4
date	2009.10.12.18.10.56;	author millert;	state Exp;
branches;
next	;


desc
@@


1.4
log
@remove files no longer in perl 5.12.2 (or that have moved)
@
text
@#!perl -w

BEGIN {
    if( $ENV{PERL_CORE} ) {
        chdir 't';
        @@INC = ('../lib', 'lib');
    }
    else {
        unshift @@INC, 't/lib';
    }
}


# Turn on threads here, if available, since this test tends to find
# lots of threading bugs.
use Config;
BEGIN {
    if( $] >= 5.008001 && $Config{useithreads} ) {
        require threads;
        'threads'->import;
    }
}


use strict;

use Test::Builder::NoOutput;
use Test::More tests => 7;

my $test = Test::Builder::NoOutput->create;

# Test diag() goes to todo_output() in a todo test.
{
    $test->todo_start();

    $test->diag("a single line");
    is( $test->read('todo'), <<'DIAG',   'diag() with todo_output set' );
# a single line
DIAG

    my $ret = $test->diag("multiple\n", "lines");
    is( $test->read('todo'), <<'DIAG',   '  multi line' );
# multiple
# lines
DIAG
    ok( !$ret, 'diag returns false' );

    $test->todo_end();
}


# Test diagnostic formatting
{
    $test->diag("# foo");
    is( $test->read('err'), "# # foo\n", "diag() adds # even if there's one already" );

    $test->diag("foo\n\nbar");
    is( $test->read('err'), <<'DIAG', "  blank lines get escaped" );
# foo
# 
# bar
DIAG

    $test->diag("foo\n\nbar\n\n");
    is( $test->read('err'), <<'DIAG', "  even at the end" );
# foo
# 
# bar
# 
DIAG
}


# [rt.cpan.org 8392] diag(@@list) emulates print
{
    $test->diag(qw(one two));

    is( $test->read('err'), <<'DIAG' );
# onetwo
DIAG
}
@


1.3
log
@Merge in perl 5.10.1
@
text
@@


1.2
log
@relocate / fix Test::Simple tests

ok millert@@
@
text
@a1 1
# $Id$
d27 1
d30 1
a30 6
my $test = Test::Builder->create;

# now make a filehandle where we can send data
use TieOut;
my $output = tie *FAKEOUT, 'TieOut';

a34 1
    $test->todo_output(\*FAKEOUT);
d37 1
a37 1
    is( $output->read, <<'DIAG',   'diag() with todo_output set' );
d42 1
a42 1
    is( $output->read, <<'DIAG',   '  multi line' );
a50 2
$test->reset_outputs();

a52 1
$test->failure_output(\*FAKEOUT);
d55 1
a55 1
    is( $output->read, "# # foo\n", "diag() adds # even if there's one already" );
d58 1
a58 1
    is( $output->read, <<'DIAG', "  blank lines get escaped" );
a63 1

d65 1
a65 1
    is( $output->read, <<'DIAG', "  even at the end" );
d74 1
a74 1
# [rt.cpan.org 8392]
d77 2
a78 2
}
is( $output->read, <<'DIAG' );
d81 1
@


1.1
log
@Initial revision
@
text
@d2 1
d7 4
a10 1
        @@INC = '../lib';
d14 12
d30 1
a30 1
my $Test = Test::More->builder;
d33 2
a34 2
my $output;
tie *FAKEOUT, 'FakeOut', \$output;
d36 2
a37 4
# force diagnostic output to a filehandle, glad I added this to
# Test::Builder :)
my @@lines;
my $ret;
d39 2
a40 2
    local $TODO = 1;
    $Test->todo_output(\*FAKEOUT);
d42 11
a52 1
    diag("a single line");
d54 2
a55 2
    push @@lines, $output;
    $output = '';
d57 1
a57 3
    $ret = diag("multiple\n", "lines");
    push @@lines, split(/\n/, $output);
}
a58 5
is( @@lines, 3,              'diag() should send messages to its filehandle' );
like( $lines[0], '/^#\s+/', '    should add comment mark to all lines' );
is( $lines[0], "# a single line\n",   '    should send exact message' );
is( $output, "# multiple\n# lines\n", '    should append multi messages');
ok( !$ret, 'diag returns false' );
d60 2
d63 18
a80 3
    $Test->failure_output(\*FAKEOUT);
    $output = '';
    $ret = diag("# foo");
a81 3
$Test->failure_output(\*STDERR);
is( $output, "# # foo\n",   "diag() adds a # even if there's one already" );
ok( !$ret,  'diag returns false' );
a82 1
package FakeOut;
d84 3
a86 7
sub TIEHANDLE {
	bless( $_[1], $_[0] );
}

sub PRINT {
	my $self = shift;
	$$self .= join('', @@_);
d88 3
@


1.1.1.1
log
@stock perl 5.8.0 from CPAN
@
text
@@


1.1.1.2
log
@perl 5.8.8 import
@
text
@d6 1
a6 4
        @@INC = ('../lib', 'lib');
    }
    else {
        unshift @@INC, 't/lib';
a9 12

# Turn on threads here, if available, since this test tends to find
# lots of threading bugs.
use Config;
BEGIN {
    if( $] >= 5.008 && $Config{useithreads} ) {
        require threads;
        'threads'->import;
    }
}


d12 1
a12 1
use Test::More tests => 5;
d17 2
a18 2
use TieOut;
my $output = tie *FAKEOUT, 'TieOut';
d22 1
d30 3
d34 1
d37 4
a40 6
is( $output->read, <<'DIAG',   'diag() with todo_output set' );
# a single line
# multiple
# lines
DIAG

d45 1
d49 1
a49 1
is( $output->read, "# # foo\n", "diag() adds # even if there's one already" );
d52 5
d58 3
a60 4
# [rt.cpan.org 8392]
{
    $Test->failure_output(\*FAKEOUT);
    diag(qw(one two));
a61 4
$Test->failure_output(\*STDERR);
is( $output->read, <<'DIAG' );
# onetwo
DIAG
@


1.1.1.3
log
@import perl 5.10.0 from CPAN
@
text
@d18 1
a18 1
    if( $] >= 5.008001 && $Config{useithreads} ) {
@


1.1.1.4
log
@import perl 5.10.1
@
text
@d27 1
a27 2
use Test::Builder::NoOutput;
use Test::More tests => 7;
d29 1
a29 1
my $test = Test::Builder::NoOutput->create;
d31 7
a37 1
# Test diag() goes to todo_output() in a todo test.
d39 7
a45 1
    $test->todo_start();
d47 1
a47 2
    $test->diag("a single line");
    is( $test->read('todo'), <<'DIAG',   'diag() with todo_output set' );
a48 4
DIAG

    my $ret = $test->diag("multiple\n", "lines");
    is( $test->read('todo'), <<'DIAG',   '  multi line' );
a51 4
    ok( !$ret, 'diag returns false' );

    $test->todo_end();
}
d53 1
a54 1
# Test diagnostic formatting
d56 2
a57 17
    $test->diag("# foo");
    is( $test->read('err'), "# # foo\n", "diag() adds # even if there's one already" );

    $test->diag("foo\n\nbar");
    is( $test->read('err'), <<'DIAG', "  blank lines get escaped" );
# foo
# 
# bar
DIAG

    $test->diag("foo\n\nbar\n\n");
    is( $test->read('err'), <<'DIAG', "  even at the end" );
# foo
# 
# bar
# 
DIAG
d59 3
d64 1
a64 1
# [rt.cpan.org 8392] diag(@@list) emulates print
d66 5
a70 3
    $test->diag(qw(one two));

    is( $test->read('err'), <<'DIAG' );
a72 1
}
@


