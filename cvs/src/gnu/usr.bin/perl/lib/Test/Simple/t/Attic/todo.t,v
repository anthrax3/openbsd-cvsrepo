head	1.4;
access;
symbols
	OPENBSD_4_8:1.3.0.4
	OPENBSD_4_8_BASE:1.3
	OPENBSD_4_7:1.3.0.2
	OPENBSD_4_7_BASE:1.3
	PERL_5_10_1:1.1.1.3
	OPENBSD_4_6:1.2.0.4
	OPENBSD_4_6_BASE:1.2
	OPENBSD_4_5:1.1.1.2.0.12
	OPENBSD_4_5_BASE:1.1.1.2
	PERL_5_10_0:1.1.1.2
	OPENBSD_4_4:1.1.1.2.0.10
	OPENBSD_4_4_BASE:1.1.1.2
	OPENBSD_4_3:1.1.1.2.0.8
	OPENBSD_4_3_BASE:1.1.1.2
	OPENBSD_4_2:1.1.1.2.0.6
	OPENBSD_4_2_BASE:1.1.1.2
	OPENBSD_4_1:1.1.1.2.0.4
	OPENBSD_4_1_BASE:1.1.1.2
	OPENBSD_4_0:1.1.1.2.0.2
	OPENBSD_4_0_BASE:1.1.1.2
	PERL_5_8_8:1.1.1.2
	OPENBSD_3_9:1.1.1.1.0.14
	OPENBSD_3_9_BASE:1.1.1.1
	OPENBSD_3_8:1.1.1.1.0.12
	OPENBSD_3_8_BASE:1.1.1.1
	OPENBSD_3_7:1.1.1.1.0.10
	OPENBSD_3_7_BASE:1.1.1.1
	PERL_5_8_6:1.1.1.1
	OPENBSD_3_6:1.1.1.1.0.8
	OPENBSD_3_6_BASE:1.1.1.1
	PERL_5_8_5:1.1.1.1
	PERL_5_8_3:1.1.1.1
	OPENBSD_3_5:1.1.1.1.0.6
	OPENBSD_3_5_BASE:1.1.1.1
	PERL_5_8_2:1.1.1.1
	OPENBSD_3_4:1.1.1.1.0.4
	OPENBSD_3_4_BASE:1.1.1.1
	OPENBSD_3_3:1.1.1.1.0.2
	OPENBSD_3_3_BASE:1.1.1.1
	PERL_5_8_0:1.1.1.1
	CPAN:1.1.1;
locks; strict;
comment	@# @;
expand	@o@;


1.4
date	2010.09.24.14.59.52;	author millert;	state dead;
branches;
next	1.3;

1.3
date	2009.10.12.18.24.43;	author millert;	state Exp;
branches;
next	1.2;

1.2
date	2009.05.16.21.42.57;	author simon;	state Exp;
branches;
next	1.1;

1.1
date	2002.10.27.22.15.01;	author millert;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	2002.10.27.22.15.01;	author millert;	state Exp;
branches;
next	1.1.1.2;

1.1.1.2
date	2006.03.28.18.48.59;	author millert;	state Exp;
branches;
next	1.1.1.3;

1.1.1.3
date	2009.10.12.18.10.56;	author millert;	state Exp;
branches;
next	;


desc
@@


1.4
log
@remove files no longer in perl 5.12.2 (or that have moved)
@
text
@#!perl -w

BEGIN {
    if( $ENV{PERL_CORE} ) {
        chdir 't';
        @@INC = '../lib';
    }
}

use Test::More;

plan tests => 36;


$Why = 'Just testing the todo interface.';

my $is_todo;
TODO: {
    local $TODO = $Why;

    fail("Expected failure");
    fail("Another expected failure");

    $is_todo = Test::More->builder->todo;
}

pass("This is not todo");
ok( $is_todo, 'TB->todo' );


TODO: {
    local $TODO = $Why;

    fail("Yet another failure");
}

pass("This is still not todo");


TODO: {
    local $TODO = "testing that error messages don't leak out of todo";

    ok( 'this' eq 'that',   'ok' );

    like( 'this', qr/that/, 'like' );
    is(   'this', 'that',   'is' );
    isnt( 'this', 'this',   'isnt' );

    can_ok('Fooble', 'yarble');
    isa_ok('Fooble', 'yarble');
    use_ok('Fooble');
    require_ok('Fooble');
}


TODO: {
    todo_skip "Just testing todo_skip", 2;

    fail("Just testing todo");
    die "todo_skip should prevent this";
    pass("Again");
}


{
    my $warning;
    local $SIG{__WARN__} = sub { $warning = join "", @@_ };
    TODO: {
        # perl gets the line number a little wrong on the first
        # statement inside a block.
        1 == 1;
#line 74
        todo_skip "Just testing todo_skip";
        fail("So very failed");
    }
    is( $warning, "todo_skip() needs to know \$how_many tests are in the ".
                  "block at $0 line 74\n",
        'todo_skip without $how_many warning' );
}

my $builder = Test::More->builder;
my $exported_to = $builder->exported_to;
TODO: {
    $builder->exported_to("Wibble");
    
    local $TODO = "testing \$TODO with an incorrect exported_to()";
    
    fail("Just testing todo");
}

$builder->exported_to($exported_to);

$builder->todo_start('Expected failures');
fail('Testing todo_start()');
ok 0, 'Testing todo_start() with more than one failure';
$is_todo = $builder->todo;
$builder->todo_end;
is $is_todo, 'Expected failures',
  'todo_start should have the correct TODO message';
ok 1, 'todo_end() should not leak TODO behavior';

my @@nested_todo;
my ( $level1, $level2 ) = ( 'failure level 1', 'failure_level 2' );
TODO: {
    local $TODO = 'Nesting TODO';
    fail('fail 1');

    $builder->todo_start($level1);
    fail('fail 2');

    push @@nested_todo => $builder->todo;
    $builder->todo_start($level2);
    fail('fail 3');

    push @@nested_todo => $builder->todo;
    $builder->todo_end;
    fail('fail 4');

    push @@nested_todo => $builder->todo;
    $builder->todo_end;
    $is_todo = $builder->todo;
    fail('fail 4');
}
is_deeply \@@nested_todo, [ $level1, $level2, $level1 ],
  'Nested TODO message should be correct';
is $is_todo, 'Nesting TODO',
  '... and original TODO message should be correct';

{
    $builder->todo_start;
    fail("testing todo_start() with no message");
    my $reason  = $builder->todo;
    my $in_todo = $builder->in_todo;
    $builder->todo_end;

    is $reason, '', "  todo() reports no reason";
    ok $in_todo,    "  but we're in_todo()";
}

eval {
    $builder->todo_end;
};
is $@@, sprintf "todo_end() called without todo_start() at %s line %d.\n", $0, __LINE__ - 2;


{
    my($reason, $in_todo);

    TODO: {
        local $TODO = '';
        $reason  = $builder->todo;
        $in_todo = $builder->in_todo;
    }

    is $reason, '';
    ok !$in_todo, '$TODO = "" is not considered TODO';
}
@


1.3
log
@Merge in perl 5.10.1
@
text
@@


1.2
log
@relocate / fix Test::Simple tests

ok millert@@
@
text
@a1 1
# $Id$
d45 1
a45 1
    like( 'this', '/that/', 'like' );
@


1.1
log
@Initial revision
@
text
@d2 1
d11 3
a13 3
BEGIN {
    require Test::Harness;
    use Test::More;
a14 7
    if( $Test::Harness::VERSION < 1.23 ) {
        plan skip_all => 'Need Test::Harness 1.23 or up';
    }
    else {
        plan tests => 15;
    }
}
d18 1
d24 2
a27 1

d29 1
d63 95
@


1.1.1.1
log
@stock perl 5.8.0 from CPAN
@
text
@@


1.1.1.2
log
@perl 5.8.8 import
@
text
@d10 3
a12 3
use Test::More;

plan tests => 18;
d14 7
a23 1
my $is_todo;
d29 1
a30 2
    $is_todo = Test::More->builder->todo;
}
a32 1
ok( $is_todo, 'TB->todo' );
a65 17
}


{
    my $warning;
    local $SIG{__WARN__} = sub { $warning = join "", @@_ };
    TODO: {
        # perl gets the line number a little wrong on the first
        # statement inside a block.
        1 == 1;
#line 82
        todo_skip "Just testing todo_skip";
        fail("So very failed");
    }
    is( $warning, "todo_skip() needs to know \$how_many tests are in the ".
                  "block at $0 line 82\n",
        'todo_skip without $how_many warning' );
@


1.1.1.3
log
@import perl 5.10.1
@
text
@d12 1
a12 1
plan tests => 36;
d45 1
a45 1
    like( 'this', qr/that/, 'like' );
d72 1
a72 1
#line 74
d77 1
a77 1
                  "block at $0 line 74\n",
a78 78
}

my $builder = Test::More->builder;
my $exported_to = $builder->exported_to;
TODO: {
    $builder->exported_to("Wibble");
    
    local $TODO = "testing \$TODO with an incorrect exported_to()";
    
    fail("Just testing todo");
}

$builder->exported_to($exported_to);

$builder->todo_start('Expected failures');
fail('Testing todo_start()');
ok 0, 'Testing todo_start() with more than one failure';
$is_todo = $builder->todo;
$builder->todo_end;
is $is_todo, 'Expected failures',
  'todo_start should have the correct TODO message';
ok 1, 'todo_end() should not leak TODO behavior';

my @@nested_todo;
my ( $level1, $level2 ) = ( 'failure level 1', 'failure_level 2' );
TODO: {
    local $TODO = 'Nesting TODO';
    fail('fail 1');

    $builder->todo_start($level1);
    fail('fail 2');

    push @@nested_todo => $builder->todo;
    $builder->todo_start($level2);
    fail('fail 3');

    push @@nested_todo => $builder->todo;
    $builder->todo_end;
    fail('fail 4');

    push @@nested_todo => $builder->todo;
    $builder->todo_end;
    $is_todo = $builder->todo;
    fail('fail 4');
}
is_deeply \@@nested_todo, [ $level1, $level2, $level1 ],
  'Nested TODO message should be correct';
is $is_todo, 'Nesting TODO',
  '... and original TODO message should be correct';

{
    $builder->todo_start;
    fail("testing todo_start() with no message");
    my $reason  = $builder->todo;
    my $in_todo = $builder->in_todo;
    $builder->todo_end;

    is $reason, '', "  todo() reports no reason";
    ok $in_todo,    "  but we're in_todo()";
}

eval {
    $builder->todo_end;
};
is $@@, sprintf "todo_end() called without todo_start() at %s line %d.\n", $0, __LINE__ - 2;


{
    my($reason, $in_todo);

    TODO: {
        local $TODO = '';
        $reason  = $builder->todo;
        $in_todo = $builder->in_todo;
    }

    is $reason, '';
    ok !$in_todo, '$TODO = "" is not considered TODO';
@


