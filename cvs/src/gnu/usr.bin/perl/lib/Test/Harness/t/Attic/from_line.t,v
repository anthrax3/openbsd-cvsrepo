head	1.2;
access;
symbols
	OPENBSD_4_6:1.1.1.1.0.16
	OPENBSD_4_6_BASE:1.1.1.1
	OPENBSD_4_5:1.1.1.1.0.12
	OPENBSD_4_5_BASE:1.1.1.1
	PERL_5_10_0:1.1.1.1
	OPENBSD_4_4:1.1.1.1.0.10
	OPENBSD_4_4_BASE:1.1.1.1
	OPENBSD_4_3:1.1.1.1.0.8
	OPENBSD_4_3_BASE:1.1.1.1
	OPENBSD_4_2:1.1.1.1.0.6
	OPENBSD_4_2_BASE:1.1.1.1
	OPENBSD_4_1:1.1.1.1.0.4
	OPENBSD_4_1_BASE:1.1.1.1
	OPENBSD_4_0:1.1.1.1.0.2
	OPENBSD_4_0_BASE:1.1.1.1
	PERL_5_8_8:1.1.1.1
	CPAN:1.1.1;
locks; strict;
comment	@# @;


1.2
date	2009.10.12.18.24.43;	author millert;	state dead;
branches;
next	1.1;

1.1
date	2006.03.28.18.48.58;	author millert;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	2006.03.28.18.48.58;	author millert;	state Exp;
branches;
next	;


desc
@@


1.2
log
@Merge in perl 5.10.1
@
text
@#!perl -Tw

BEGIN {
    if ( $ENV{PERL_CORE} ) {
        chdir 't';
        @@INC = '../lib';
    }
    else {
        unshift @@INC, 't/lib';
    }
}

use strict;
use Test::More tests => 23;

BEGIN {
    use_ok( 'Test::Harness::Point' );
}

BASIC_OK: {
    my $line = "ok 14 - Blah blah";
    my $point = Test::Harness::Point->from_test_line( $line );
    isa_ok( $point, 'Test::Harness::Point', 'BASIC_OK' );
    is( $point->number, 14 );
    ok( $point->ok );
    is( $point->description, 'Blah blah' );
}

BASIC_NOT_OK: {
    my $line = "not ok 267   Yada";
    my $point = Test::Harness::Point->from_test_line( $line );
    isa_ok( $point, 'Test::Harness::Point', 'BASIC_NOT_OK' );
    is( $point->number, 267 );
    ok( !$point->ok );
    is( $point->description, 'Yada' );
}

CRAP: {
    my $point = Test::Harness::Point->from_test_line( 'ok14 - Blah' );
    ok( !defined $point, 'CRAP 1' );

    $point = Test::Harness::Point->from_test_line( 'notok 14' );
    ok( !defined $point, 'CRAP 2' );
}

PARSE_TODO: {
    my $point = Test::Harness::Point->from_test_line( 'not ok 14 - Calculate sqrt(-1) # TODO Still too rational' );
    isa_ok( $point, 'Test::Harness::Point', 'PARSE_TODO' );
    is( $point->description, 'Calculate sqrt(-1)' );
    is( $point->directive_type, 'todo' );
    is( $point->directive_reason, 'Still too rational' );
    ok( !$point->is_skip );
    ok( $point->is_todo );
}

PARSE_SKIP: {
    my $point = Test::Harness::Point->from_test_line( 'ok 14 # skip Not on bucket #6' );
    isa_ok( $point, 'Test::Harness::Point', 'PARSE_SKIP' );
    is( $point->description, '' );
    is( $point->directive_type, 'skip' );
    is( $point->directive_reason, 'Not on bucket #6' );
    ok( $point->is_skip );
    ok( !$point->is_todo );
}
@


1.1
log
@Initial revision
@
text
@@


1.1.1.1
log
@perl 5.8.8 import
@
text
@@
