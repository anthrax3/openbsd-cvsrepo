head	1.2;
access;
symbols
	OPENBSD_4_6:1.1.1.4.0.6
	OPENBSD_4_6_BASE:1.1.1.4
	OPENBSD_4_5:1.1.1.4.0.2
	OPENBSD_4_5_BASE:1.1.1.4
	PERL_5_10_0:1.1.1.4
	OPENBSD_4_4:1.1.1.3.0.10
	OPENBSD_4_4_BASE:1.1.1.3
	OPENBSD_4_3:1.1.1.3.0.8
	OPENBSD_4_3_BASE:1.1.1.3
	OPENBSD_4_2:1.1.1.3.0.6
	OPENBSD_4_2_BASE:1.1.1.3
	OPENBSD_4_1:1.1.1.3.0.4
	OPENBSD_4_1_BASE:1.1.1.3
	OPENBSD_4_0:1.1.1.3.0.2
	OPENBSD_4_0_BASE:1.1.1.3
	PERL_5_8_8:1.1.1.3
	OPENBSD_3_9:1.1.1.2.0.8
	OPENBSD_3_9_BASE:1.1.1.2
	OPENBSD_3_8:1.1.1.2.0.6
	OPENBSD_3_8_BASE:1.1.1.2
	OPENBSD_3_7:1.1.1.2.0.4
	OPENBSD_3_7_BASE:1.1.1.2
	PERL_5_8_6:1.1.1.2
	OPENBSD_3_6:1.1.1.2.0.2
	OPENBSD_3_6_BASE:1.1.1.2
	PERL_5_8_5:1.1.1.2
	PERL_5_8_3:1.1.1.1
	CPAN:1.1.1;
locks; strict;
comment	@# @;


1.2
date	2009.10.12.18.24.43;	author millert;	state dead;
branches;
next	1.1;

1.1
date	2004.04.07.21.13.22;	author millert;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	2004.04.07.21.13.22;	author millert;	state Exp;
branches;
next	1.1.1.2;

1.1.1.2
date	2004.08.09.17.47.23;	author millert;	state Exp;
branches;
next	1.1.1.3;

1.1.1.3
date	2006.03.28.18.48.59;	author millert;	state Exp;
branches;
next	1.1.1.4;

1.1.1.4
date	2008.09.29.17.18.43;	author millert;	state Exp;
branches;
next	;


desc
@@


1.2
log
@Merge in perl 5.10.1
@
text
@BEGIN {
    if( $ENV{PERL_CORE} ) {
        chdir 't';
        @@INC = ('../lib', 'lib');
    }
    else {
        unshift @@INC, 't/lib';
    }
}

use strict;
use File::Spec;
use Test::More;
plan skip_all => "Not adapted to perl core" if $ENV{PERL_CORE};
plan skip_all => "Not installing prove" if -e "t/SKIP-PROVE";

plan tests => 5;

my $blib = File::Spec->catfile( File::Spec->curdir, "blib" );
my $blib_lib = File::Spec->catfile( $blib, "lib" );
my $blib_arch = File::Spec->catfile( $blib, "arch" );
my $prove = File::Spec->catfile( $blib, "script", "prove" );

CAPITAL_TAINT: {
    local $ENV{PROVE_SWITCHES};
    local $/ = undef;

    my @@actual = qx/$prove -Ifirst -D -I second -Ithird -Tvdb/;
    my @@expected = ( "# \$Test::Harness::Switches: -T -I$blib_arch -I$blib_lib -Ifirst -Isecond -Ithird\n" );
    array_match_ok( \@@actual, \@@expected, "Capital taint flags OK" );
}

LOWERCASE_TAINT: {
    local $ENV{PROVE_SWITCHES};
    local $/ = undef;

    my @@actual = qx/$prove -dD -Ifirst -I second -t -Ithird -vb/;
    my @@expected = ( "# \$Test::Harness::Switches: -t -I$blib_arch -I$blib_lib -Ifirst -Isecond -Ithird\n" );
    array_match_ok( \@@actual, \@@expected, "Lowercase taint OK" );
}

PROVE_SWITCHES: {
    local $ENV{PROVE_SWITCHES} = "-dvb -I fark";
    local $/ = undef;

    my @@actual = qx/$prove -Ibork -Dd/;
    my @@expected = ( "# \$Test::Harness::Switches: -I$blib_arch -I$blib_lib -Ifark -Ibork\n" );
    array_match_ok( \@@actual, \@@expected, "PROVE_SWITCHES OK" );
}

PROVE_SWITCHES_L: {
    local $/ = undef;

    my @@actual = qx/$prove -l -Ibongo -Dd/;
    my @@expected = ( "# \$Test::Harness::Switches: -Ilib -Ibongo\n" );
    array_match_ok( \@@actual, \@@expected, "PROVE_SWITCHES OK" );
}

PROVE_SWITCHES_LB: {
    local $/ = undef;

    my @@actual = qx/$prove -lb -Dd/;
    my @@expected = ( "# \$Test::Harness::Switches: -Ilib -I$blib_arch -I$blib_lib\n" );
    array_match_ok( \@@actual, \@@expected, "PROVE_SWITCHES OK" );
}


sub array_match_ok {
    my $actual = shift;
    my $expected = shift;
    my $message = shift;
    my $n = 0;

    my @@actual = @@$actual;
    my @@expected = @@$expected;

    while ( @@actual && @@expected ) {
	return ok( 0, "Differs at element $n: $message" ) if shift @@actual ne shift @@expected;
	++$n;
    }
    return ok( 0, "Too many actual: $message" ) if @@actual;
    return ok( 0, "Too many expected: $message" ) if @@expected;

    return ok( 1, $message );
}
@


1.1
log
@Initial revision
@
text
@@


1.1.1.1
log
@perl 5.8.3 from CPAN
@
text
@@


1.1.1.2
log
@Import of stock perl 5.8.5
@
text
@d30 1
a30 1
    is_deeply( \@@actual, \@@expected, "Capital taint flags OK" );
d39 1
a39 1
    is_deeply( \@@actual, \@@expected, "Lowercase taint OK" );
d48 1
a48 1
    is_deeply( \@@actual, \@@expected, "PROVE_SWITCHES OK" );
d56 1
a56 1
    is_deeply( \@@actual, \@@expected, "PROVE_SWITCHES OK" );
d64 21
a84 1
    is_deeply( \@@actual, \@@expected, "PROVE_SWITCHES OK" );
@


1.1.1.3
log
@perl 5.8.8 import
@
text
@a16 4
# Work around a Cygwin bug.  Remove this if Perl bug 30952 ever gets fixed.
# http://rt.perl.org/rt3/Ticket/Display.html?id=30952.
plan skip_all => "Skipping because of a Cygwin bug" if ( $^O =~ /cygwin/i );

@


1.1.1.4
log
@import perl 5.10.0 from CPAN
@
text
@d17 5
a21 1
plan tests => 8;
a26 1
$prove = "$^X $prove";
d30 1
d39 1
d48 1
d56 2
d64 2
a68 12
}

PROVE_VERSION: {
    # This also checks that the prove $VERSION is in sync with Test::Harness's $VERSION
    local $/ = undef;

    use_ok( 'Test::Harness' );

    my $thv = $Test::Harness::VERSION;
    my @@actual = qx/$prove --version/;
    is( scalar @@actual, 1, 'Only 1 line returned' );
    like( $actual[0], qq{/^\Qprove v$thv, using Test::Harness v$thv and Perl v5\E/} );
@


