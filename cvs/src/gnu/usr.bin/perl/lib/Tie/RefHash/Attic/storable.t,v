head	1.2;
access;
symbols
	OPENBSD_4_8:1.1.1.1.0.8
	OPENBSD_4_8_BASE:1.1.1.1
	OPENBSD_4_7:1.1.1.1.0.4
	OPENBSD_4_7_BASE:1.1.1.1
	PERL_5_10_1:1.1.1.1
	OPENBSD_4_6:1.1.1.1.0.6
	OPENBSD_4_6_BASE:1.1.1.1
	OPENBSD_4_5:1.1.1.1.0.2
	OPENBSD_4_5_BASE:1.1.1.1
	PERL_5_10_0:1.1.1.1
	CPAN:1.1.1;
locks; strict;
comment	@# @;
expand	@o@;


1.2
date	2010.09.24.14.59.55;	author millert;	state dead;
branches;
next	1.1;

1.1
date	2008.09.29.17.18.44;	author millert;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	2008.09.29.17.18.44;	author millert;	state Exp;
branches;
next	;


desc
@@


1.2
log
@remove files no longer in perl 5.12.2 (or that have moved)
@
text
@#!/usr/bin/perl -T -w

BEGIN {
    if( $ENV{PERL_CORE} ) {
        chdir 't';
        @@INC = '../lib';
    }
}

BEGIN {
  unless ( eval { require Storable; 1 } ){
    print "1..0 # Skip -- Storable is not available\n";
    exit 0;
  }
}

use strict;

use Tie::RefHash;

use Storable qw/dclone nfreeze thaw/;

$\ = "\n";
print "1..24";

sub ok ($$) {
    print ( ( $_[0] ? "" : "not " ), "ok - $_[1]" );
}

sub is ($$$) {
    print ( ( ( $_[0] eq $_[1] ) ? "" : "not "), "ok - $_[2]" );
}

sub isa_ok ($$) {
    ok( eval { $_[0]->isa($_[1]) }, "the object isa $_[1]");
}

tie my %hash, "Tie::RefHash";

my $key = { foo => 1 };
$hash{$key} = "value";
$hash{non_ref} = "other";

foreach my $clone ( \%hash, dclone(\%hash), thaw(nfreeze(\%hash)) ){

  ok( tied(%$clone), "copy is tied");
  isa_ok( tied(%$clone), "Tie::RefHash" );

  my @@keys = keys %$clone;
  is( scalar(@@keys), 2, "one key in clone");
  my $key = ref($keys[0]) ? shift @@keys : pop @@keys;
  my $reg = $keys[0];

  ok( ref($key), "key is a ref after clone" );
  is( $key->{foo}, 1, "key serialized ok");

  is( $clone->{$key}, "value", "and is still pointing at the same value" );

  ok( !ref($reg), "regular key is non ref" );
  is( $clone->{$reg}, "other", "and is also a valid key" );
}


@


1.1
log
@Initial revision
@
text
@@


1.1.1.1
log
@import perl 5.10.0 from CPAN
@
text
@@
