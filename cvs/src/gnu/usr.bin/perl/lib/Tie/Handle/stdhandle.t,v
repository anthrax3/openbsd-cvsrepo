head	1.1;
branch	1.1.1;
access;
symbols
	OPENBSD_6_1_BASE:1.1.1.4
	OPENBSD_6_0:1.1.1.4.0.10
	OPENBSD_6_0_BASE:1.1.1.4
	OPENBSD_5_9:1.1.1.4.0.4
	OPENBSD_5_9_BASE:1.1.1.4
	OPENBSD_5_8:1.1.1.4.0.6
	OPENBSD_5_8_BASE:1.1.1.4
	PERL_5_20_2:1.1.1.4
	OPENBSD_5_7:1.1.1.4.0.2
	OPENBSD_5_7_BASE:1.1.1.4
	PERL_5_20_1:1.1.1.4
	OPENBSD_5_6:1.1.1.3.0.4
	OPENBSD_5_6_BASE:1.1.1.3
	PERL_5_18_2:1.1.1.3
	PERL:1.1.1
	OPENBSD_5_5:1.1.1.2.0.24
	OPENBSD_5_5_BASE:1.1.1.2
	OPENBSD_5_4:1.1.1.2.0.20
	OPENBSD_5_4_BASE:1.1.1.2
	PERL_5_16_3:1.1.1.2
	OPENBSD_5_3:1.1.1.2.0.18
	OPENBSD_5_3_BASE:1.1.1.2
	OPENBSD_5_2:1.1.1.2.0.16
	OPENBSD_5_2_BASE:1.1.1.2
	OPENBSD_5_1_BASE:1.1.1.2
	OPENBSD_5_1:1.1.1.2.0.14
	OPENBSD_5_0:1.1.1.2.0.12
	OPENBSD_5_0_BASE:1.1.1.2
	OPENBSD_4_9:1.1.1.2.0.10
	OPENBSD_4_9_BASE:1.1.1.2
	PERL_5_12_2:1.1.1.2
	OPENBSD_4_8:1.1.1.2.0.8
	OPENBSD_4_8_BASE:1.1.1.2
	OPENBSD_4_7:1.1.1.2.0.4
	OPENBSD_4_7_BASE:1.1.1.2
	PERL_5_10_1:1.1.1.2
	OPENBSD_4_6:1.1.1.2.0.6
	OPENBSD_4_6_BASE:1.1.1.2
	OPENBSD_4_5:1.1.1.2.0.2
	OPENBSD_4_5_BASE:1.1.1.2
	PERL_5_10_0:1.1.1.2
	OPENBSD_4_4:1.1.1.1.0.24
	OPENBSD_4_4_BASE:1.1.1.1
	OPENBSD_4_3:1.1.1.1.0.22
	OPENBSD_4_3_BASE:1.1.1.1
	OPENBSD_4_2:1.1.1.1.0.20
	OPENBSD_4_2_BASE:1.1.1.1
	OPENBSD_4_1:1.1.1.1.0.18
	OPENBSD_4_1_BASE:1.1.1.1
	OPENBSD_4_0:1.1.1.1.0.16
	OPENBSD_4_0_BASE:1.1.1.1
	PERL_5_8_8:1.1.1.1
	OPENBSD_3_9:1.1.1.1.0.14
	OPENBSD_3_9_BASE:1.1.1.1
	OPENBSD_3_8:1.1.1.1.0.12
	OPENBSD_3_8_BASE:1.1.1.1
	OPENBSD_3_7:1.1.1.1.0.10
	OPENBSD_3_7_BASE:1.1.1.1
	PERL_5_8_6:1.1.1.1
	OPENBSD_3_6:1.1.1.1.0.8
	OPENBSD_3_6_BASE:1.1.1.1
	PERL_5_8_5:1.1.1.1
	PERL_5_8_3:1.1.1.1
	OPENBSD_3_5:1.1.1.1.0.6
	OPENBSD_3_5_BASE:1.1.1.1
	PERL_5_8_2:1.1.1.1
	OPENBSD_3_4:1.1.1.1.0.4
	OPENBSD_3_4_BASE:1.1.1.1
	OPENBSD_3_3:1.1.1.1.0.2
	OPENBSD_3_3_BASE:1.1.1.1
	PERL_5_8_0:1.1.1.1
	CPAN:1.1.1;
locks; strict;
comment	@# @;
expand	@o@;


1.1
date	2002.10.27.22.15.02;	author millert;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	2002.10.27.22.15.02;	author millert;	state Exp;
branches;
next	1.1.1.2;

1.1.1.2
date	2008.09.29.17.18.44;	author millert;	state Exp;
branches;
next	1.1.1.3;

1.1.1.3
date	2014.03.24.14.59.04;	author afresh1;	state Exp;
branches;
next	1.1.1.4;

1.1.1.4
date	2014.11.17.20.53.09;	author afresh1;	state Exp;
branches;
next	;
commitid	B31cAbBIXiCqnL97;


desc
@@


1.1
log
@Initial revision
@
text
@#!./perl

BEGIN {
    chdir 't' if -d 't';
    @@INC = '../lib';
}

use Tie::Handle;
tie *tst,Tie::StdHandle;

$f = 'tst';

print "1..13\n";

# my $file tests

unlink("afile.new") if -f "afile";
print "$!\nnot " unless open($f,"+>afile") && open($f, "+<", "afile");
print "ok 1\n";
print "$!\nnot " unless binmode($f);
print "ok 2\n";
print "not " unless -f "afile";
print "ok 3\n";
print "not " unless print $f "SomeData\n";
print "ok 4\n";
print "not " unless tell($f) == 9;
print "ok 5\n";
print "not " unless printf $f "Some %d value\n",1234;
print "ok 6\n";
print "not " unless seek($f,0,0);
print "ok 7\n";
$b = <$f>;
print "not " unless $b eq "SomeData\n";
print "ok 8\n";
print "not " if eof($f);
print "ok 9\n";
read($f,($b=''),4);
print "'$b' not " unless $b eq 'Some';
print "ok 10\n";
print "not " unless getc($f) eq ' ';
print "ok 11\n";
$b = <$f>;
print "not " unless eof($f);
print "ok 12\n";
print "not " unless close($f);
print "ok 13\n";
unlink("afile");
@


1.1.1.1
log
@stock perl 5.8.0 from CPAN
@
text
@@


1.1.1.2
log
@import perl 5.10.0 from CPAN
@
text
@d8 1
a8 1
use Tie::StdHandle;
@


1.1.1.3
log
@Import perl-5.18.2

OK espie@@ sthen@@ deraadt@@
@
text
@d13 1
a13 1
print "1..14\n";
d45 1
a45 3
seek($f,0,0);
read($f,($b='scrinches'),4,4); # with offset
print "'$b' not " unless $b eq 'scriSome';
a46 2
print "not " unless close($f);
print "ok 14\n";
@


1.1.1.4
log
@Import perl-5.20.1
@
text
@d8 1
a8 4
use Test::More tests => 27;

use_ok('Tie::StdHandle');

d13 1
a13 19
unlink("afile") if -f "afile";

ok(open($f,"+>afile"), "open +>afile");
ok(open($f, "+<", "afile"), "open +<, afile");
ok(binmode($f), "binmode")
    or diag("binmode: $!\n");

ok(-f "afile", "-f afile");

# write some lines

ok(print($f "SomeData\n"), "print SomeData");    # line 1
is(tell($f), 9, "tell");
ok(printf($f "Some %d value\n",1234), "printf"); # line 2
ok(print($f "ABCDEF\n"), "print ABCDEF");        # line 3
{
    local $\ = "X\n";
    ok(print($f "rhubarb"), "print rhubarb");    # line 4
}
d15 1
a15 1
ok(syswrite($f, "123456789\n", 3, 7), "syswrite");# line 5
d17 15
a31 6
# read some lines back

ok(seek($f,0,0), "seek");

# line 1
#
d33 9
a41 8
is($b, "SomeData\n", "b eq SomeData");
ok(!eof($f), "!eof");

#line 2

is(read($f,($b=''),4), 4, "read(4)");
is($b, 'Some', "b eq Some");
is(getc($f), ' ', "getc");
d43 8
a50 24
is($b, "1234 value\n", "b eq 1234 value");
ok(!eof($f), "eof");

# line 3

is(read($f,($b='scrinches'),4,4), 4, "read(4,4)"); # with offset
is($b, 'scriABCD', "b eq scriABCD");
$b = <$f>;
is($b, "EF\n", "EF");
ok(!eof($f), "eof");

# line 4

$b = <$f>;
is($b, "rhubarbX\n", "b eq rhubarbX");

# line 5

$b = <$f>;
is($b, "89\n", "b eq 89");

ok(eof($f), "eof");
ok(close($f), "close");

@


