head	1.2;
access;
symbols
	OPENBSD_6_2_BASE:1.2
	PERL_5_24_2:1.1.1.7
	OPENBSD_6_1:1.2.0.4
	OPENBSD_6_1_BASE:1.2
	OPENBSD_6_0:1.1.1.6.0.16
	OPENBSD_6_0_BASE:1.1.1.6
	OPENBSD_5_9:1.1.1.6.0.10
	OPENBSD_5_9_BASE:1.1.1.6
	OPENBSD_5_8:1.1.1.6.0.12
	OPENBSD_5_8_BASE:1.1.1.6
	PERL_5_20_2:1.1.1.6
	OPENBSD_5_7:1.1.1.6.0.4
	OPENBSD_5_7_BASE:1.1.1.6
	PERL_5_20_1:1.1.1.6
	OPENBSD_5_6:1.1.1.6.0.8
	OPENBSD_5_6_BASE:1.1.1.6
	PERL_5_18_2:1.1.1.6
	PERL:1.1.1
	OPENBSD_5_5:1.1.1.6.0.6
	OPENBSD_5_5_BASE:1.1.1.6
	OPENBSD_5_4:1.1.1.6.0.2
	OPENBSD_5_4_BASE:1.1.1.6
	PERL_5_16_3:1.1.1.6
	OPENBSD_5_3:1.1.1.5.0.10
	OPENBSD_5_3_BASE:1.1.1.5
	OPENBSD_5_2:1.1.1.5.0.8
	OPENBSD_5_2_BASE:1.1.1.5
	OPENBSD_5_1_BASE:1.1.1.5
	OPENBSD_5_1:1.1.1.5.0.6
	OPENBSD_5_0:1.1.1.5.0.4
	OPENBSD_5_0_BASE:1.1.1.5
	OPENBSD_4_9:1.1.1.5.0.2
	OPENBSD_4_9_BASE:1.1.1.5
	PERL_5_12_2:1.1.1.5
	OPENBSD_4_8:1.1.1.4.0.4
	OPENBSD_4_8_BASE:1.1.1.4
	OPENBSD_4_7:1.1.1.4.0.2
	OPENBSD_4_7_BASE:1.1.1.4
	PERL_5_10_1:1.1.1.4
	OPENBSD_4_6:1.1.1.3.0.6
	OPENBSD_4_6_BASE:1.1.1.3
	OPENBSD_4_5:1.1.1.3.0.2
	OPENBSD_4_5_BASE:1.1.1.3
	PERL_5_10_0:1.1.1.3
	OPENBSD_4_4:1.1.1.2.0.20
	OPENBSD_4_4_BASE:1.1.1.2
	OPENBSD_4_3:1.1.1.2.0.18
	OPENBSD_4_3_BASE:1.1.1.2
	OPENBSD_4_2:1.1.1.2.0.16
	OPENBSD_4_2_BASE:1.1.1.2
	OPENBSD_4_1:1.1.1.2.0.14
	OPENBSD_4_1_BASE:1.1.1.2
	OPENBSD_4_0:1.1.1.2.0.12
	OPENBSD_4_0_BASE:1.1.1.2
	PERL_5_8_8:1.1.1.2
	OPENBSD_3_9:1.1.1.2.0.10
	OPENBSD_3_9_BASE:1.1.1.2
	OPENBSD_3_8:1.1.1.2.0.8
	OPENBSD_3_8_BASE:1.1.1.2
	OPENBSD_3_7:1.1.1.2.0.6
	OPENBSD_3_7_BASE:1.1.1.2
	PERL_5_8_6:1.1.1.2
	OPENBSD_3_6:1.1.1.2.0.4
	OPENBSD_3_6_BASE:1.1.1.2
	PERL_5_8_5:1.1.1.2
	PERL_5_8_3:1.1.1.2
	OPENBSD_3_5:1.1.1.2.0.2
	OPENBSD_3_5_BASE:1.1.1.2
	PERL_5_8_2:1.1.1.2
	OPENBSD_3_4:1.1.1.1.0.4
	OPENBSD_3_4_BASE:1.1.1.1
	OPENBSD_3_3:1.1.1.1.0.2
	OPENBSD_3_3_BASE:1.1.1.1
	PERL_5_8_0:1.1.1.1
	CPAN:1.1.1;
locks; strict;
comment	@# @;
expand	@o@;


1.2
date	2017.02.05.00.32.15;	author afresh1;	state Exp;
branches;
next	1.1;
commitid	cxJ08BvJA9Pt2PTM;

1.1
date	2002.10.27.22.14.58;	author millert;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	2002.10.27.22.14.58;	author millert;	state Exp;
branches;
next	1.1.1.2;

1.1.1.2
date	2003.12.03.02.44.00;	author millert;	state Exp;
branches;
next	1.1.1.3;

1.1.1.3
date	2008.09.29.17.18.31;	author millert;	state Exp;
branches;
next	1.1.1.4;

1.1.1.4
date	2009.10.12.18.10.48;	author millert;	state Exp;
branches;
next	1.1.1.5;

1.1.1.5
date	2010.09.24.14.48.35;	author millert;	state Exp;
branches;
next	1.1.1.6;

1.1.1.6
date	2013.03.25.20.08.53;	author sthen;	state Exp;
branches;
next	1.1.1.7;

1.1.1.7
date	2017.08.14.13.46.14;	author afresh1;	state Exp;
branches;
next	;
commitid	fAzrs78vdW2Yfc6A;


desc
@@


1.2
log
@Fix merge issues, remove excess files - match perl-5.24.1 dist
@
text
@#!./perl

chdir 't' if -d 't';
@@INC = '../lib';

our $local_tests = 6;
require "../t/lib/common.pl";

eval qq(use strict 'garbage');
like($@@, qr/^Unknown 'strict' tag\(s\) 'garbage'/);

eval qq(no strict 'garbage');
like($@@, qr/^Unknown 'strict' tag\(s\) 'garbage'/);

eval qq(use strict qw(foo bar));
like($@@, qr/^Unknown 'strict' tag\(s\) 'foo bar'/);

eval qq(no strict qw(foo bar));
like($@@, qr/^Unknown 'strict' tag\(s\) 'foo bar'/);

eval 'use v5.12; use v5.10; ${"c"}';
is($@@, '', 'use v5.10 disables implicit strict refs');

eval 'use strict; use v5.10; ${"c"}';
like($@@,
    qr/^Can't use string \("c"\) as a SCALAR ref while "strict refs" in use/,
    "use v5.10 doesn't disable explicit strict ref");
@


1.1
log
@Initial revision
@
text
@d1 1
a1 1
#!./perl 
d3 25
a27 98
BEGIN {
    chdir 't' if -d 't';
    @@INC = '../lib';
    $ENV{PERL5LIB} = '../lib';
}

$| = 1;

my $Is_VMS = $^O eq 'VMS';
my $Is_MSWin32 = $^O eq 'MSWin32';
my $Is_NetWare = $^O eq 'NetWare';
my $tmpfile = "tmp0000";
my $i = 0 ;
1 while -e ++$tmpfile;
END { if ($tmpfile) { 1 while unlink $tmpfile; } }

my @@prgs = () ;

foreach (sort glob($^O eq 'MacOS' ? ":lib:strict:*" : "lib/strict/*")) {

    next if /(~|\.orig|,v)$/;

    open F, "<$_" or die "Cannot open $_: $!\n" ;
    while (<F>) {
	last if /^__END__/ ;
    }

    {
        local $/ = undef;
        @@prgs = (@@prgs, split "\n########\n", <F>) ;
    }
    close F or die "Could not close: $!" ;
}

undef $/;

print "1..", scalar @@prgs, "\n";
 
 
for (@@prgs){
    my $switch = "";
    my @@temps = () ;
    if (s/^\s*-\w+//){
        $switch = $&;
    }
    my($prog,$expected) = split(/\nEXPECT\n/, $_);
    if ( $prog =~ /--FILE--/) {
        my(@@files) = split(/\n--FILE--\s*([^\s\n]*)\s*\n/, $prog) ;
	shift @@files ;
	die "Internal error test $i didn't split into pairs, got " . 
		scalar(@@files) . "[" . join("%%%%", @@files) ."]\n"
	    if @@files % 2 ;
	while (@@files > 2) {
	    my $filename = shift @@files ;
	    my $code = shift @@files ;
	    $code =~ s|\./abc|:abc|g if $^O eq 'MacOS';
    	    push @@temps, $filename ;
	    open F, ">$filename" or die "Cannot open $filename: $!\n" ;
	    print F $code ;
	    close F or die "Could not close: $!" ;
	}
	shift @@files ;
	$prog = shift @@files ;
	$prog =~ s|\./abc|:abc|g if $^O eq 'MacOS';
    }
    open TEST, ">$tmpfile" or die "Could not open: $!";
    print TEST $prog,"\n";
    close TEST or die "Could not close: $!";
    my $results = $Is_MSWin32 ?
	              `.\\perl -I../lib $switch $tmpfile 2>&1` :
                  $^O eq 'NetWare' ?
		      `perl -I../lib $switch $tmpfile 2>&1` :
                  $^O eq 'MacOS' ?
		      `$^X -I::lib -MMac::err=unix $switch $tmpfile` :
                  `./perl $switch $tmpfile 2>&1`;
    my $status = $?;
    $results =~ s/\n+$//;
    # allow expected output to be written as if $prog is on STDIN
    $results =~ s/tmp\d+/-/g;
    $results =~ s/\n%[A-Z]+-[SIWEF]-.*$// if $Is_VMS;  # clip off DCL status msg
    $expected =~ s/\n+$//;
    $expected =~ s|(\./)?abc\.pm|:abc.pm|g if $^O eq 'MacOS';
    $expected =~ s|./abc|:abc|g if $^O eq 'MacOS';
    my $prefix = ($results =~ s/^PREFIX\n//) ;
    if ( $results =~ s/^SKIPPED\n//) {
	print "$results\n" ;
    }
    elsif (($prefix and $results !~ /^\Q$expected/) or
	   (!$prefix and $results ne $expected)){
        print STDERR "PROG: $switch\n$prog\n";
        print STDERR "EXPECTED:\n$expected\n";
        print STDERR "GOT:\n$results\n";
        print "not ";
    }
    print "ok ", ++$i, "\n";
    foreach (@@temps) 
	{ unlink $_ if $_ } 
}
@


1.1.1.1
log
@stock perl 5.8.0 from CPAN
@
text
@@


1.1.1.2
log
@perl 5.8.2 from CPAN
@
text
@d23 1
a23 1
    next if -d || /(~|\.orig|,v)$/;
d39 1
a39 1
print "1.." . (@@prgs + 4) . "\n";
d97 1
a97 1
    print "ok " . ++$i . "\n";
a100 16

eval qq(use strict 'garbage');
print +($@@ =~ /^Unknown 'strict' tag\(s\) 'garbage'/)
	? "ok ".++$i."\n" : "not ok ".++$i."\t# $@@";

eval qq(no strict 'garbage');
print +($@@ =~ /^Unknown 'strict' tag\(s\) 'garbage'/)
	? "ok ".++$i."\n" : "not ok ".++$i."\t# $@@";

eval qq(use strict qw(foo bar));
print +($@@ =~ /^Unknown 'strict' tag\(s\) 'foo bar'/)
	? "ok ".++$i."\n" : "not ok ".++$i."\t# $@@";

eval qq(no strict qw(foo bar));
print +($@@ =~ /^Unknown 'strict' tag\(s\) 'foo bar'/)
	? "ok ".++$i."\n" : "not ok ".++$i."\t# $@@";
@


1.1.1.3
log
@import perl 5.10.0 from CPAN
@
text
@d77 1
a77 1
                  `$^X $switch $tmpfile 2>&1`;
@


1.1.1.4
log
@import perl 5.10.1
@
text
@a6 1
    require './test.pl';
d14 1
d16 2
a67 1
    my $tmpfile = tempfile();
d81 1
a81 1
    $results =~ s/tmp\d+[A-Z][A-Z]?/-/g;
@


1.1.1.5
log
@Perl 5.12.2 from CPAN
@
text
@d19 1
a19 1
foreach (sort glob("lib/strict/*")) {
d56 1
d64 1
d74 2
d83 2
a85 1
    my $TODO = $prog =~ m/^#\s*TODO:/;
d91 3
a93 5
        if (! $TODO) {
            print STDERR "PROG: $switch\n$prog\n";
            print STDERR "EXPECTED:\n$expected\n";
            print STDERR "GOT:\n$results\n";
        }
d96 1
a96 1
    print "ok " . ++$i . ($TODO ? " # TODO" : "") . "\n";
@


1.1.1.6
log
@import perl 5.16.3 from CPAN - worked on by Andrew Fresh and myself
@
text
@d1 1
a1 1
#!./perl
d3 94
a96 5
chdir 't' if -d 't';
@@INC = '../lib';

our $local_tests = 4;
require "../t/lib/common.pl";
d99 2
a100 1
like($@@, qr/^Unknown 'strict' tag\(s\) 'garbage'/);
d103 2
a104 1
like($@@, qr/^Unknown 'strict' tag\(s\) 'garbage'/);
d107 2
a108 1
like($@@, qr/^Unknown 'strict' tag\(s\) 'foo bar'/);
d111 2
a112 1
like($@@, qr/^Unknown 'strict' tag\(s\) 'foo bar'/);
@


1.1.1.7
log
@Import perl-5.24.2
@
text
@d6 1
a6 1
our $local_tests = 6;
a19 8

eval 'use v5.12; use v5.10; ${"c"}';
is($@@, '', 'use v5.10 disables implicit strict refs');

eval 'use strict; use v5.10; ${"c"}';
like($@@,
    qr/^Can't use string \("c"\) as a SCALAR ref while "strict refs" in use/,
    "use v5.10 doesn't disable explicit strict ref");
@


