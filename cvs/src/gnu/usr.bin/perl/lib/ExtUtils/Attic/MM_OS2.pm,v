head	1.11;
access;
symbols
	OPENBSD_4_8:1.10.0.4
	OPENBSD_4_8_BASE:1.10
	OPENBSD_4_7:1.10.0.2
	OPENBSD_4_7_BASE:1.10
	PERL_5_10_1:1.1.1.9
	OPENBSD_4_6:1.9.0.6
	OPENBSD_4_6_BASE:1.9
	OPENBSD_4_5:1.9.0.2
	OPENBSD_4_5_BASE:1.9
	PERL_5_10_0:1.1.1.8
	OPENBSD_4_4:1.8.0.10
	OPENBSD_4_4_BASE:1.8
	OPENBSD_4_3:1.8.0.8
	OPENBSD_4_3_BASE:1.8
	OPENBSD_4_2:1.8.0.6
	OPENBSD_4_2_BASE:1.8
	OPENBSD_4_1:1.8.0.4
	OPENBSD_4_1_BASE:1.8
	OPENBSD_4_0:1.8.0.2
	OPENBSD_4_0_BASE:1.8
	PERL_5_8_8:1.1.1.7
	OPENBSD_3_9:1.7.0.10
	OPENBSD_3_9_BASE:1.7
	OPENBSD_3_8:1.7.0.8
	OPENBSD_3_8_BASE:1.7
	OPENBSD_3_7:1.7.0.6
	OPENBSD_3_7_BASE:1.7
	PERL_5_8_6:1.1.1.6
	OPENBSD_3_6:1.7.0.4
	OPENBSD_3_6_BASE:1.7
	PERL_5_8_5:1.1.1.6
	PERL_5_8_3:1.1.1.6
	OPENBSD_3_5:1.7.0.2
	OPENBSD_3_5_BASE:1.7
	PERL_5_8_2:1.1.1.6
	OPENBSD_3_4:1.6.0.4
	OPENBSD_3_4_BASE:1.6
	OPENBSD_3_3:1.6.0.2
	OPENBSD_3_3_BASE:1.6
	PERL_5_8_0:1.1.1.5
	OPENBSD_3_2:1.5.0.6
	OPENBSD_3_2_BASE:1.5
	OPENBSD_3_1:1.5.0.4
	OPENBSD_3_1_BASE:1.5
	OPENBSD_3_0:1.5.0.2
	OPENBSD_3_0_BASE:1.5
	PERL_5_6_1:1.1.1.4
	OPENBSD_2_9:1.4.0.6
	OPENBSD_2_9_BASE:1.4
	OPENBSD_2_8:1.4.0.4
	OPENBSD_2_8_BASE:1.4
	OPENBSD_2_7:1.4.0.2
	OPENBSD_2_7_BASE:1.4
	PERL_5_6_0:1.1.1.3
	OPENBSD_2_6:1.3.0.2
	OPENBSD_2_6_BASE:1.3
	PERL_500503:1.1.1.2
	CPAN:1.1.1
	OPENBSD_2_5:1.2.0.6
	OPENBSD_2_5_BASE:1.2
	OPENBSD_2_4:1.2.0.4
	OPENBSD_2_4_BASE:1.2
	OPENBSD_2_3:1.2.0.2
	OPENBSD_2_3_BASE:1.2
	OPENBSD_2_2:1.1.1.1.0.6
	OPENBSD_2_2_BASE:1.1.1.1
	OPENBSD_2_1:1.1.1.1.0.4
	OPENBSD_2_1_BASE:1.1.1.1
	OPENBSD_2_0:1.1.1.1.0.2
	OPENBSD_2_0_BASE:1.1.1.1
	perl5003:1.1.1.1
	lwall:1.1.1;
locks; strict;
comment	@# @;


1.11
date	2010.09.24.14.59.38;	author millert;	state dead;
branches;
next	1.10;

1.10
date	2009.10.12.18.24.40;	author millert;	state Exp;
branches;
next	1.9;

1.9
date	2008.09.29.17.36.11;	author millert;	state Exp;
branches;
next	1.8;

1.8
date	2006.03.28.19.23.06;	author millert;	state Exp;
branches;
next	1.7;

1.7
date	2003.12.03.03.02.37;	author millert;	state Exp;
branches;
next	1.6;

1.6
date	2002.10.27.22.25.26;	author millert;	state Exp;
branches;
next	1.5;

1.5
date	2001.05.24.18.35.29;	author millert;	state Exp;
branches;
next	1.4;

1.4
date	2000.04.06.17.06.28;	author millert;	state Exp;
branches;
next	1.3;

1.3
date	99.04.29.22.51.51;	author millert;	state Exp;
branches;
next	1.2;

1.2
date	97.11.30.07.57.25;	author millert;	state Exp;
branches;
next	1.1;

1.1
date	96.08.19.10.12.39;	author downsj;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	96.08.19.10.12.39;	author downsj;	state Exp;
branches;
next	1.1.1.2;

1.1.1.2
date	99.04.29.22.40.02;	author millert;	state Exp;
branches;
next	1.1.1.3;

1.1.1.3
date	2000.04.06.16.09.42;	author millert;	state Exp;
branches;
next	1.1.1.4;

1.1.1.4
date	2001.05.24.18.23.27;	author millert;	state Exp;
branches;
next	1.1.1.5;

1.1.1.5
date	2002.10.27.22.14.59;	author millert;	state Exp;
branches;
next	1.1.1.6;

1.1.1.6
date	2003.12.03.02.44.02;	author millert;	state Exp;
branches;
next	1.1.1.7;

1.1.1.7
date	2006.03.28.18.48.43;	author millert;	state Exp;
branches;
next	1.1.1.8;

1.1.1.8
date	2008.09.29.17.18.32;	author millert;	state Exp;
branches;
next	1.1.1.9;

1.1.1.9
date	2009.10.12.18.10.50;	author millert;	state Exp;
branches;
next	;


desc
@@


1.11
log
@remove files no longer in perl 5.12.2 (or that have moved)
@
text
@package ExtUtils::MM_OS2;

use strict;

use ExtUtils::MakeMaker qw(neatvalue);
use File::Spec;

our $VERSION = '6.55_02';

require ExtUtils::MM_Any;
require ExtUtils::MM_Unix;
our @@ISA = qw(ExtUtils::MM_Any ExtUtils::MM_Unix);

=pod

=head1 NAME

ExtUtils::MM_OS2 - methods to override UN*X behaviour in ExtUtils::MakeMaker

=head1 SYNOPSIS

 use ExtUtils::MM_OS2; # Done internally by ExtUtils::MakeMaker if needed

=head1 DESCRIPTION

See ExtUtils::MM_Unix for a documentation of the methods provided
there. This package overrides the implementation of these methods, not
the semantics.

=head1 METHODS

=over 4

=item init_dist

Define TO_UNIX to convert OS2 linefeeds to Unix style.

=cut

sub init_dist {
    my($self) = @@_;

    $self->{TO_UNIX} ||= <<'MAKE_TEXT';
$(NOECHO) $(TEST_F) tmp.zip && $(RM_F) tmp.zip; $(ZIP) -ll -mr tmp.zip $(DISTVNAME) && unzip -o tmp.zip && $(RM_F) tmp.zip
MAKE_TEXT

    $self->SUPER::init_dist;
}

sub dlsyms {
    my($self,%attribs) = @@_;

    my($funcs) = $attribs{DL_FUNCS} || $self->{DL_FUNCS} || {};
    my($vars)  = $attribs{DL_VARS} || $self->{DL_VARS} || [];
    my($funclist) = $attribs{FUNCLIST} || $self->{FUNCLIST} || [];
    my($imports)  = $attribs{IMPORTS} || $self->{IMPORTS} || {};
    my(@@m);
    (my $boot = $self->{NAME}) =~ s/:/_/g;

    if (not $self->{SKIPHASH}{'dynamic'}) {
	push(@@m,"
$self->{BASEEXT}.def: Makefile.PL
",
     '	$(PERL) "-I$(PERL_ARCHLIB)" "-I$(PERL_LIB)" -e \'use ExtUtils::Mksymlists; \\
     Mksymlists("NAME" => "$(NAME)", "DLBASE" => "$(DLBASE)", ',
     '"VERSION" => "$(VERSION)", "DISTNAME" => "$(DISTNAME)", ',
     '"INSTALLDIRS" => "$(INSTALLDIRS)", ',
     '"DL_FUNCS" => ',neatvalue($funcs),
     ', "FUNCLIST" => ',neatvalue($funclist),
     ', "IMPORTS" => ',neatvalue($imports),
     ', "DL_VARS" => ', neatvalue($vars), ');\'
');
    }
    if ($self->{IMPORTS} && %{$self->{IMPORTS}}) {
	# Make import files (needed for static build)
	-d 'tmp_imp' or mkdir 'tmp_imp', 0777 or die "Can't mkdir tmp_imp";
	open my $imp, '>', 'tmpimp.imp' or die "Can't open tmpimp.imp";
	while (my($name, $exp) = each %{$self->{IMPORTS}}) {
	    my ($lib, $id) = ($exp =~ /(.*)\.(.*)/) or die "Malformed IMPORT `$exp'";
	    print $imp "$name $lib $id ?\n";
	}
	close $imp or die "Can't close tmpimp.imp";
	# print "emximp -o tmpimp$Config::Config{lib_ext} tmpimp.imp\n";
	system "emximp -o tmpimp$Config::Config{lib_ext} tmpimp.imp" 
	    and die "Cannot make import library: $!, \$?=$?";
	unlink <tmp_imp/*>;
	system "cd tmp_imp; $Config::Config{ar} x ../tmpimp$Config::Config{lib_ext}" 
	    and die "Cannot extract import objects: $!, \$?=$?";      
    }
    join('',@@m);
}

sub static_lib {
    my($self) = @@_;
    my $old = $self->ExtUtils::MM_Unix::static_lib();
    return $old unless $self->{IMPORTS} && %{$self->{IMPORTS}};
    
    my @@chunks = split /\n{2,}/, $old;
    shift @@chunks unless length $chunks[0]; # Empty lines at the start
    $chunks[0] .= <<'EOC';

	$(AR) $(AR_STATIC_ARGS) $@@ tmp_imp/* && $(RANLIB) $@@
EOC
    return join "\n\n". '', @@chunks;
}

sub replace_manpage_separator {
    my($self,$man) = @@_;
    $man =~ s,/+,.,g;
    $man;
}

sub maybe_command {
    my($self,$file) = @@_;
    $file =~ s,[/\\]+,/,g;
    return $file if -x $file && ! -d _;
    return "$file.exe" if -x "$file.exe" && ! -d _;
    return "$file.cmd" if -x "$file.cmd" && ! -d _;
    return;
}

=item init_linker

=cut

sub init_linker {
    my $self = shift;

    $self->{PERL_ARCHIVE} = "\$(PERL_INC)/libperl\$(LIB_EXT)";

    $self->{PERL_ARCHIVE_AFTER} = $OS2::is_aout
      ? ''
      : '$(PERL_INC)/libperl_override$(LIB_EXT)';
    $self->{EXPORT_LIST} = '$(BASEEXT).def';
}

=item os_flavor

OS/2 is OS/2

=cut

sub os_flavor {
    return('OS/2');
}

=back

=cut

1;
@


1.10
log
@Merge in perl 5.10.1
@
text
@@


1.9
log
@fix conflicts and merge in local changes to perl 5.10.0
@
text
@a3 1
use vars qw($VERSION @@ISA);
d8 1
a8 1
$VERSION = '6.42';
d12 1
a12 1
@@ISA = qw(ExtUtils::MM_Any ExtUtils::MM_Unix);
d77 2
a78 3
	open IMP, '>tmpimp.imp' or die "Can't open tmpimp.imp";
	my ($name, $exp);
	while (($name, $exp)= each %{$self->{IMPORTS}}) {
d80 1
a80 1
	    print IMP "$name $lib $id ?\n";
d82 1
a82 1
	close IMP or die "Can't close tmpimp.imp";
@


1.8
log
@merge in perl 5.8.8
@
text
@d9 1
a9 1
$VERSION = '1.05';
@


1.7
log
@Resolve conflicts for perl 5.8.2, remove old files, and add OpenBSD-specific scaffolding
@
text
@d9 1
a9 1
$VERSION = '1.04';
d35 1
a35 1
=item init_dist (o)
@


1.6
log
@Resolve conflicts, remove old files, merge local changes
@
text
@d9 1
a9 1
$VERSION = '1.03';
d35 4
d41 2
a42 2
sub dist {
    my($self, %attribs) = @@_;
d44 2
a45 2
    $attribs{TO_UNIX} ||= sprintf <<'MAKE_TEXT', $self->{NOECHO};
%s$(TEST_F) tmp.zip && $(RM) tmp.zip; $(ZIP) -ll -mr tmp.zip $(DISTVNAME) && unzip -o tmp.zip && $(RM) tmp.zip
d48 1
a48 1
    return $self->SUPER::dist(%attribs);
d124 1
a124 3
sub perl_archive {
    return "\$(PERL_INC)/libperl\$(LIB_EXT)";
}
d126 1
a126 1
=item perl_archive_after
d128 2
a129 5
This is an internal method that returns path to a library which
should be put on the linker command line I<after> the external libraries
to be linked to dynamic extensions.  This may be needed if the linker
is one-pass, and Perl includes some overrides for C RTL functions,
such as malloc().
d131 1
a131 1
=cut 
d133 4
a136 4
sub perl_archive_after
{
 return "\$(PERL_INC)/libperl_override\$(LIB_EXT)" unless $OS2::is_aout;
 return "";
d139 1
a139 5
sub export_list
{
 my ($self) = @@_;
 return "$self->{BASEEXT}.def";
}
d141 1
a141 1
1;
d143 1
a143 1
__END__
d145 3
a147 1
=pod
d152 2
@


1.5
log
@merge in perl 5.6.1 with our local changes
@
text
@d3 2
a4 4
#use Config;
#use Cwd;
#use File::Basename;
require Exporter;
d6 2
a7 2
Exporter::import('ExtUtils::MakeMaker',
       qw( $Verbose &neatvalue));
d9 37
a45 1
unshift @@MM::ISA, 'ExtUtils::MM_OS2';
d71 1
a71 1
    if (%{$self->{IMPORTS}}) {
d94 1
a94 1
    return $old unless %{$self->{IMPORTS}};
d120 2
a121 8
sub file_name_is_absolute {
    my($self,$file) = @@_;
    $file =~ m{^([a-z]:)?[\\/]}i ;
}

sub perl_archive
{
 return "\$(PERL_INC)/libperl\$(LIB_EXT)";
d147 1
d150 1
a150 7
=head1 NAME

ExtUtils::MM_OS2 - methods to override UN*X behaviour in ExtUtils::MakeMaker

=head1 SYNOPSIS

 use ExtUtils::MM_OS2; # Done internally by ExtUtils::MakeMaker if needed
d152 1
a152 5
=head1 DESCRIPTION

See ExtUtils::MM_Unix for a documentation of the methods provided
there. This package overrides the implementation of these methods, not
the semantics.
d154 1
@


1.4
log
@perl-5.6.0 + local changes
@
text
@d96 16
@


1.3
log
@perl5.005_03 (stock)
@
text
@d28 4
a31 3
     Mksymlists("NAME" => "', $self->{NAME},
     '", "DLBASE" => "',$self->{DLBASE},
     '", "DL_FUNCS" => ',neatvalue($funcs),
d34 1
a34 2
     ', "VERSION" => "',$self->{VERSION},
     '", "DL_VARS" => ', neatvalue($vars), ');\'
@


1.2
log
@perl 5.004_04
@
text
@a10 1
$ENV{EMXSHELL} = 'sh'; # to run `commands`
d18 1
d31 1
d33 2
a34 1
     ', "DL_VARS" => ', neatvalue($vars), ');\'
d37 17
d57 14
d79 1
@


1.1
log
@Initial revision
@
text
@d57 11
@


1.1.1.1
log
@Import of Perl 5.003 into the tree.  Makefile.bsd-wrapper and
config.sh.OpenBSD are the only local changes.
@
text
@@


1.1.1.2
log
@perl5.005_03
@
text
@d11 1
a18 1
    my($funclist) = $attribs{FUNCLIST} || $self->{FUNCLIST} || [];
a30 1
     ', "FUNCLIST" => ',neatvalue($funclist),
d32 1
a32 2
     ', "VERSION" => "',$self->{VERSION},
     '", "DL_VARS" => ', neatvalue($vars), ');\'
a34 17
    if (%{$self->{IMPORTS}}) {
	# Make import files (needed for static build)
	-d 'tmp_imp' or mkdir 'tmp_imp', 0777 or die "Can't mkdir tmp_imp";
	open IMP, '>tmpimp.imp' or die "Can't open tmpimp.imp";
	my ($name, $exp);
	while (($name, $exp)= each %{$self->{IMPORTS}}) {
	    my ($lib, $id) = ($exp =~ /(.*)\.(.*)/) or die "Malformed IMPORT `$exp'";
	    print IMP "$name $lib $id ?\n";
	}
	close IMP or die "Can't close tmpimp.imp";
	# print "emximp -o tmpimp$Config::Config{lib_ext} tmpimp.imp\n";
	system "emximp -o tmpimp$Config::Config{lib_ext} tmpimp.imp" 
	    and die "Cannot make import library: $!, \$?=$?";
	unlink <tmp_imp/*>;
	system "cd tmp_imp; $Config::Config{ar} x ../tmpimp$Config::Config{lib_ext}" 
	    and die "Cannot extract import objects: $!, \$?=$?";      
    }
a37 14
sub static_lib {
    my($self) = @@_;
    my $old = $self->ExtUtils::MM_Unix::static_lib();
    return $old unless %{$self->{IMPORTS}};
    
    my @@chunks = split /\n{2,}/, $old;
    shift @@chunks unless length $chunks[0]; # Empty lines at the start
    $chunks[0] .= <<'EOC';

	$(AR) $(AR_STATIC_ARGS) $@@ tmp_imp/* && $(RANLIB) $@@
EOC
    return join "\n\n". '', @@chunks;
}

a45 1
    $file =~ s,[/\\]+,/,g;
a54 11
}

sub perl_archive
{
 return "\$(PERL_INC)/libperl\$(LIB_EXT)";
}

sub export_list
{
 my ($self) = @@_;
 return "$self->{BASEEXT}.def";
@


1.1.1.3
log
@virgin perl 5.6.0
@
text
@d28 3
a30 4
     Mksymlists("NAME" => "$(NAME)", "DLBASE" => "$(DLBASE)", ',
     '"VERSION" => "$(VERSION)", "DISTNAME" => "$(DISTNAME)", ',
     '"INSTALLDIRS" => "$(INSTALLDIRS)", ',
     '"DL_FUNCS" => ',neatvalue($funcs),
d33 2
a34 1
     ', "DL_VARS" => ', neatvalue($vars), ');\'
@


1.1.1.4
log
@stock perl 5.6.1
@
text
@a95 16
=item perl_archive_after

This is an internal method that returns path to a library which
should be put on the linker command line I<after> the external libraries
to be linked to dynamic extensions.  This may be needed if the linker
is one-pass, and Perl includes some overrides for C RTL functions,
such as malloc().

=cut 

sub perl_archive_after
{
 return "\$(PERL_INC)/libperl_override\$(LIB_EXT)" unless $OS2::is_aout;
 return "";
}

@


1.1.1.5
log
@stock perl 5.8.0 from CPAN
@
text
@d3 4
a6 2
use strict;
use vars qw($VERSION @@ISA);
d8 2
a9 2
use ExtUtils::MakeMaker qw(neatvalue);
use File::Spec;
d11 1
a11 37
$VERSION = '1.03';

require ExtUtils::MM_Any;
require ExtUtils::MM_Unix;
@@ISA = qw(ExtUtils::MM_Any ExtUtils::MM_Unix);

=pod

=head1 NAME

ExtUtils::MM_OS2 - methods to override UN*X behaviour in ExtUtils::MakeMaker

=head1 SYNOPSIS

 use ExtUtils::MM_OS2; # Done internally by ExtUtils::MakeMaker if needed

=head1 DESCRIPTION

See ExtUtils::MM_Unix for a documentation of the methods provided
there. This package overrides the implementation of these methods, not
the semantics.

=head1 METHODS

=over 4

=cut

sub dist {
    my($self, %attribs) = @@_;

    $attribs{TO_UNIX} ||= sprintf <<'MAKE_TEXT', $self->{NOECHO};
%s$(TEST_F) tmp.zip && $(RM) tmp.zip; $(ZIP) -ll -mr tmp.zip $(DISTVNAME) && unzip -o tmp.zip && $(RM) tmp.zip
MAKE_TEXT

    return $self->SUPER::dist(%attribs);
}
d37 1
a37 1
    if ($self->{IMPORTS} && %{$self->{IMPORTS}}) {
d60 1
a60 1
    return $old unless $self->{IMPORTS} && %{$self->{IMPORTS}};
d86 8
a93 2
sub perl_archive {
    return "\$(PERL_INC)/libperl\$(LIB_EXT)";
d119 3
d123 5
a127 1
__END__
d129 1
a129 1
=pod
d131 3
a133 1
=back
a134 1
=cut
@


1.1.1.6
log
@perl 5.8.2 from CPAN
@
text
@d9 1
a9 1
$VERSION = '1.04';
a34 4
=item init_dist (o)

Define TO_UNIX to convert OS2 linefeeds to Unix style.

d37 2
a38 2
sub init_dist {
    my($self) = @@_;
d40 2
a41 2
    $self->{TO_UNIX} ||= <<'MAKE_TEXT';
$(NOECHO) $(TEST_F) tmp.zip && $(RM_F) tmp.zip; $(ZIP) -ll -mr tmp.zip $(DISTVNAME) && unzip -o tmp.zip && $(RM_F) tmp.zip
d44 1
a44 1
    $self->SUPER::init_dist;
d120 3
a122 1
=item init_linker
d124 1
a124 1
=cut
d126 5
a130 2
sub init_linker {
    my $self = shift;
d132 1
a132 1
    $self->{PERL_ARCHIVE} = "\$(PERL_INC)/libperl\$(LIB_EXT)";
d134 4
a137 4
    $self->{PERL_ARCHIVE_AFTER} = $OS2::is_aout
      ? ''
      : '$(PERL_INC)/libperl_override$(LIB_EXT)';
    $self->{EXPORT_LIST} = '$(BASEEXT).def';
d140 5
a144 1
=item os_flavor
d146 1
a146 1
OS/2 is OS/2
d148 1
a148 1
=cut
d150 1
a150 3
sub os_flavor {
    return('OS/2');
}
a154 2

1;
@


1.1.1.7
log
@perl 5.8.8 import
@
text
@d9 1
a9 1
$VERSION = '1.05';
d35 1
a35 1
=item init_dist
@


1.1.1.8
log
@import perl 5.10.0 from CPAN
@
text
@d9 1
a9 1
$VERSION = '6.42';
@


1.1.1.9
log
@import perl 5.10.1
@
text
@d4 1
d9 1
a9 1
our $VERSION = '6.55_02';
d13 1
a13 1
our @@ISA = qw(ExtUtils::MM_Any ExtUtils::MM_Unix);
d78 3
a80 2
	open my $imp, '>', 'tmpimp.imp' or die "Can't open tmpimp.imp";
	while (my($name, $exp) = each %{$self->{IMPORTS}}) {
d82 1
a82 1
	    print $imp "$name $lib $id ?\n";
d84 1
a84 1
	close $imp or die "Can't close tmpimp.imp";
@


