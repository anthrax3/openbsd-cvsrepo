head	1.11;
access;
symbols
	OPENBSD_4_8:1.10.0.4
	OPENBSD_4_8_BASE:1.10
	OPENBSD_4_7:1.10.0.2
	OPENBSD_4_7_BASE:1.10
	PERL_5_10_1:1.1.1.11
	OPENBSD_4_6:1.9.0.6
	OPENBSD_4_6_BASE:1.9
	OPENBSD_4_5:1.9.0.2
	OPENBSD_4_5_BASE:1.9
	PERL_5_10_0:1.1.1.10
	OPENBSD_4_4:1.8.0.10
	OPENBSD_4_4_BASE:1.8
	OPENBSD_4_3:1.8.0.8
	OPENBSD_4_3_BASE:1.8
	OPENBSD_4_2:1.8.0.6
	OPENBSD_4_2_BASE:1.8
	OPENBSD_4_1:1.8.0.4
	OPENBSD_4_1_BASE:1.8
	OPENBSD_4_0:1.8.0.2
	OPENBSD_4_0_BASE:1.8
	PERL_5_8_8:1.1.1.9
	OPENBSD_3_9:1.7.0.10
	OPENBSD_3_9_BASE:1.7
	OPENBSD_3_8:1.7.0.8
	OPENBSD_3_8_BASE:1.7
	OPENBSD_3_7:1.7.0.6
	OPENBSD_3_7_BASE:1.7
	PERL_5_8_6:1.1.1.8
	OPENBSD_3_6:1.7.0.4
	OPENBSD_3_6_BASE:1.7
	PERL_5_8_5:1.1.1.7
	PERL_5_8_3:1.1.1.6
	OPENBSD_3_5:1.7.0.2
	OPENBSD_3_5_BASE:1.7
	PERL_5_8_2:1.1.1.6
	OPENBSD_3_4:1.6.0.4
	OPENBSD_3_4_BASE:1.6
	OPENBSD_3_3:1.6.0.2
	OPENBSD_3_3_BASE:1.6
	PERL_5_8_0:1.1.1.5
	OPENBSD_3_2:1.5.0.6
	OPENBSD_3_2_BASE:1.5
	OPENBSD_3_1:1.5.0.4
	OPENBSD_3_1_BASE:1.5
	OPENBSD_3_0:1.5.0.2
	OPENBSD_3_0_BASE:1.5
	PERL_5_6_1:1.1.1.4
	OPENBSD_2_9:1.4.0.6
	OPENBSD_2_9_BASE:1.4
	OPENBSD_2_8:1.4.0.4
	OPENBSD_2_8_BASE:1.4
	OPENBSD_2_7:1.4.0.2
	OPENBSD_2_7_BASE:1.4
	PERL_5_6_0:1.1.1.3
	OPENBSD_2_6:1.3.0.2
	OPENBSD_2_6_BASE:1.3
	PERL_500503:1.1.1.2
	CPAN:1.1.1
	OPENBSD_2_5:1.2.0.6
	OPENBSD_2_5_BASE:1.2
	OPENBSD_2_4:1.2.0.4
	OPENBSD_2_4_BASE:1.2
	OPENBSD_2_3:1.2.0.2
	OPENBSD_2_3_BASE:1.2
	OPENBSD_2_2:1.1.1.1.0.6
	OPENBSD_2_2_BASE:1.1.1.1
	OPENBSD_2_1:1.1.1.1.0.4
	OPENBSD_2_1_BASE:1.1.1.1
	OPENBSD_2_0:1.1.1.1.0.2
	OPENBSD_2_0_BASE:1.1.1.1
	perl5003:1.1.1.1
	lwall:1.1.1;
locks; strict;
comment	@# @;


1.11
date	2010.09.24.14.59.38;	author millert;	state dead;
branches;
next	1.10;

1.10
date	2009.10.12.18.24.40;	author millert;	state Exp;
branches;
next	1.9;

1.9
date	2008.09.29.17.36.11;	author millert;	state Exp;
branches;
next	1.8;

1.8
date	2006.03.28.19.23.06;	author millert;	state Exp;
branches;
next	1.7;

1.7
date	2003.12.03.03.02.37;	author millert;	state Exp;
branches;
next	1.6;

1.6
date	2002.10.27.22.25.26;	author millert;	state Exp;
branches;
next	1.5;

1.5
date	2001.05.24.18.35.30;	author millert;	state Exp;
branches;
next	1.4;

1.4
date	2000.04.06.17.06.31;	author millert;	state Exp;
branches;
next	1.3;

1.3
date	99.04.29.22.51.52;	author millert;	state Exp;
branches;
next	1.2;

1.2
date	97.11.30.07.57.29;	author millert;	state Exp;
branches;
next	1.1;

1.1
date	96.08.19.10.12.41;	author downsj;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	96.08.19.10.12.41;	author downsj;	state Exp;
branches;
next	1.1.1.2;

1.1.1.2
date	99.04.29.22.40.06;	author millert;	state Exp;
branches;
next	1.1.1.3;

1.1.1.3
date	2000.04.06.16.09.42;	author millert;	state Exp;
branches;
next	1.1.1.4;

1.1.1.4
date	2001.05.24.18.23.28;	author millert;	state Exp;
branches;
next	1.1.1.5;

1.1.1.5
date	2002.10.27.22.14.59;	author millert;	state Exp;
branches;
next	1.1.1.6;

1.1.1.6
date	2003.12.03.02.44.02;	author millert;	state Exp;
branches;
next	1.1.1.7;

1.1.1.7
date	2004.08.09.17.46.50;	author millert;	state Exp;
branches;
next	1.1.1.8;

1.1.1.8
date	2005.01.15.21.17.15;	author millert;	state Exp;
branches;
next	1.1.1.9;

1.1.1.9
date	2006.03.28.18.48.42;	author millert;	state Exp;
branches;
next	1.1.1.10;

1.1.1.10
date	2008.09.29.17.18.33;	author millert;	state Exp;
branches;
next	1.1.1.11;

1.1.1.11
date	2009.10.12.18.10.50;	author millert;	state Exp;
branches;
next	;


desc
@@


1.11
log
@remove files no longer in perl 5.12.2 (or that have moved)
@
text
@# $Id: MakeMaker.pm,v 1.10 2009/10/12 18:24:40 millert Exp $
package ExtUtils::MakeMaker;

use strict;

BEGIN {require 5.006;}

require Exporter;
use ExtUtils::MakeMaker::Config;
use Carp ();
use File::Path;

our $Verbose = 0;       # exported
our @@Parent;            # needs to be localized
our @@Get_from_Config;   # referenced by MM_Unix
our @@MM_Sections;
our @@Overridable;
my @@Prepend_parent;
my %Recognized_Att_Keys;

our $VERSION = '6.55_02';

# Emulate something resembling CVS $Revision: 1.10 $
(our $Revision = $VERSION) =~ s{_}{};
$Revision = int $Revision * 10000;

our $Filename = __FILE__;   # referenced outside MakeMaker

our @@ISA = qw(Exporter);
our @@EXPORT    = qw(&WriteMakefile &writeMakefile $Verbose &prompt);
our @@EXPORT_OK = qw($VERSION &neatvalue &mkbootstrap &mksymlists
                    &WriteEmptyMakefile);

# These will go away once the last of the Win32 & VMS specific code is 
# purged.
my $Is_VMS     = $^O eq 'VMS';
my $Is_Win32   = $^O eq 'MSWin32';

full_setup();

require ExtUtils::MM;  # Things like CPAN assume loading ExtUtils::MakeMaker
                       # will give them MM.

require ExtUtils::MY;  # XXX pre-5.8 versions of ExtUtils::Embed expect
                       # loading ExtUtils::MakeMaker will give them MY.
                       # This will go when Embed is its own CPAN module.


sub WriteMakefile {
    Carp::croak "WriteMakefile: Need even number of args" if @@_ % 2;

    require ExtUtils::MY;
    my %att = @@_;

    _verify_att(\%att);

    my $mm = MM->new(\%att);
    $mm->flush;

    return $mm;
}


# Basic signatures of the attributes WriteMakefile takes.  Each is the
# reference type.  Empty value indicate it takes a non-reference
# scalar.
my %Att_Sigs;
my %Special_Sigs = (
 C                  => 'ARRAY',
 CONFIG             => 'ARRAY',
 CONFIGURE          => 'CODE',
 DIR                => 'ARRAY',
 DL_FUNCS           => 'HASH',
 DL_VARS            => 'ARRAY',
 EXCLUDE_EXT        => 'ARRAY',
 EXE_FILES          => 'ARRAY',
 FUNCLIST           => 'ARRAY',
 H                  => 'ARRAY',
 IMPORTS            => 'HASH',
 INCLUDE_EXT        => 'ARRAY',
 LIBS               => ['ARRAY',''],
 MAN1PODS           => 'HASH',
 MAN3PODS           => 'HASH',
 META_ADD           => 'HASH',
 META_MERGE         => 'HASH',
 PL_FILES           => 'HASH',
 PM                 => 'HASH',
 PMLIBDIRS          => 'ARRAY',
 PMLIBPARENTDIRS    => 'ARRAY',
 PREREQ_PM          => 'HASH',
 BUILD_REQUIRES     => 'HASH',
 CONFIGURE_REQUIRES => 'HASH',
 SKIP               => 'ARRAY',
 TYPEMAPS           => 'ARRAY',
 XS                 => 'HASH',
 VERSION            => ['version',''],
 _KEEP_AFTER_FLUSH  => '',

 clean      => 'HASH',
 depend     => 'HASH',
 dist       => 'HASH',
 dynamic_lib=> 'HASH',
 linkext    => 'HASH',
 macro      => 'HASH',
 postamble  => 'HASH',
 realclean  => 'HASH',
 test       => 'HASH',
 tool_autosplit => 'HASH',
);

@@Att_Sigs{keys %Recognized_Att_Keys} = ('') x keys %Recognized_Att_Keys;
@@Att_Sigs{keys %Special_Sigs} = values %Special_Sigs;


sub _verify_att {
    my($att) = @@_;

    while( my($key, $val) = each %$att ) {
        my $sig = $Att_Sigs{$key};
        unless( defined $sig ) {
            warn "WARNING: $key is not a known parameter.\n";
            next;
        }

        my @@sigs   = ref $sig ? @@$sig : $sig;
        my $given  = ref $val;
        unless( grep { _is_of_type($val, $_) } @@sigs ) {
            my $takes = join " or ", map { _format_att($_) } @@sigs;

            my $has = _format_att($given);
            warn "WARNING: $key takes a $takes not a $has.\n".
                 "         Please inform the author.\n";
        }
    }
}


# Check if a given thing is a reference or instance of $type
sub _is_of_type {
    my($thing, $type) = @@_;

    return 1 if ref $thing eq $type;

    local $SIG{__DIE__};
    return 1 if eval{ $thing->isa($type) };

    return 0;
}


sub _format_att {
    my $given = shift;
    
    return $given eq ''        ? "string/number"
         : uc $given eq $given ? "$given reference"
         :                       "$given object"
         ;
}


sub prompt ($;$) {  ## no critic
    my($mess, $def) = @@_;
    Carp::confess("prompt function called without an argument") 
        unless defined $mess;

    my $isa_tty = -t STDIN && (-t STDOUT || !(-f STDOUT || -c STDOUT)) ;

    my $dispdef = defined $def ? "[$def] " : " ";
    $def = defined $def ? $def : "";

    local $|=1;
    local $\;
    print "$mess $dispdef";

    my $ans;
    if ($ENV{PERL_MM_USE_DEFAULT} || (!$isa_tty && eof STDIN)) {
        print "$def\n";
    }
    else {
        $ans = <STDIN>;
        if( defined $ans ) {
            chomp $ans;
        }
        else { # user hit ctrl-D
            print "\n";
        }
    }

    return (!defined $ans || $ans eq '') ? $def : $ans;
}

sub eval_in_subdirs {
    my($self) = @@_;
    use Cwd qw(cwd abs_path);
    my $pwd = cwd() || die "Can't figure out your cwd!";

    local @@INC = map eval {abs_path($_) if -e} || $_, @@INC;
    push @@INC, '.';     # '.' has to always be at the end of @@INC

    foreach my $dir (@@{$self->{DIR}}){
        my($abs) = $self->catdir($pwd,$dir);
        eval { $self->eval_in_x($abs); };
        last if $@@;
    }
    chdir $pwd;
    die $@@ if $@@;
}

sub eval_in_x {
    my($self,$dir) = @@_;
    chdir $dir or Carp::carp("Couldn't change to directory $dir: $!");

    {
        package main;
        do './Makefile.PL';
    };
    if ($@@) {
#         if ($@@ =~ /prerequisites/) {
#             die "MakeMaker WARNING: $@@";
#         } else {
#             warn "WARNING from evaluation of $dir/Makefile.PL: $@@";
#         }
        die "ERROR from evaluation of $dir/Makefile.PL: $@@";
    }
}


# package name for the classes into which the first object will be blessed
my $PACKNAME = 'PACK000';

sub full_setup {
    $Verbose ||= 0;

    my @@attrib_help = qw/

    AUTHOR ABSTRACT ABSTRACT_FROM BINARY_LOCATION
    C CAPI CCFLAGS CONFIG CONFIGURE DEFINE DIR DISTNAME DISTVNAME
    DL_FUNCS DL_VARS
    EXCLUDE_EXT EXE_FILES FIRST_MAKEFILE
    FULLPERL FULLPERLRUN FULLPERLRUNINST
    FUNCLIST H IMPORTS

    INST_ARCHLIB INST_SCRIPT INST_BIN INST_LIB INST_MAN1DIR INST_MAN3DIR
    INSTALLDIRS
    DESTDIR PREFIX INSTALL_BASE
    PERLPREFIX      SITEPREFIX      VENDORPREFIX
    INSTALLPRIVLIB  INSTALLSITELIB  INSTALLVENDORLIB
    INSTALLARCHLIB  INSTALLSITEARCH INSTALLVENDORARCH
    INSTALLBIN      INSTALLSITEBIN  INSTALLVENDORBIN
    INSTALLMAN1DIR          INSTALLMAN3DIR
    INSTALLSITEMAN1DIR      INSTALLSITEMAN3DIR
    INSTALLVENDORMAN1DIR    INSTALLVENDORMAN3DIR
    INSTALLSCRIPT   INSTALLSITESCRIPT  INSTALLVENDORSCRIPT
    PERL_LIB        PERL_ARCHLIB 
    SITELIBEXP      SITEARCHEXP 

    INC INCLUDE_EXT LDFROM LIB LIBPERL_A LIBS LICENSE
    LINKTYPE MAKE MAKEAPERL MAKEFILE MAKEFILE_OLD MAN1PODS MAN3PODS MAP_TARGET
    META_ADD META_MERGE MIN_PERL_VERSION BUILD_REQUIRES CONFIGURE_REQUIRES
    MYEXTLIB NAME NEEDS_LINKING NOECHO NO_META NORECURS NO_VC OBJECT OPTIMIZE 
    PERL_MALLOC_OK PERL PERLMAINCC PERLRUN PERLRUNINST PERL_CORE
    PERL_SRC PERM_DIR PERM_RW PERM_RWX
    PL_FILES PM PM_FILTER PMLIBDIRS PMLIBPARENTDIRS POLLUTE PPM_INSTALL_EXEC
    PPM_INSTALL_SCRIPT PREREQ_FATAL PREREQ_PM PREREQ_PRINT PRINT_PREREQ
    SIGN SKIP TYPEMAPS VERSION VERSION_FROM XS XSOPT XSPROTOARG
    XS_VERSION clean depend dist dynamic_lib linkext macro realclean
    tool_autosplit

    MACPERL_SRC MACPERL_LIB MACLIBS_68K MACLIBS_PPC MACLIBS_SC MACLIBS_MRC
    MACLIBS_ALL_68K MACLIBS_ALL_PPC MACLIBS_SHARED
        /;

    # IMPORTS is used under OS/2 and Win32

    # @@Overridable is close to @@MM_Sections but not identical.  The
    # order is important. Many subroutines declare macros. These
    # depend on each other. Let's try to collect the macros up front,
    # then pasthru, then the rules.

    # MM_Sections are the sections we have to call explicitly
    # in Overridable we have subroutines that are used indirectly


    @@MM_Sections = 
        qw(

 post_initialize const_config constants platform_constants 
 tool_autosplit tool_xsubpp tools_other 

 makemakerdflt

 dist macro depend cflags const_loadlibs const_cccmd
 post_constants

 pasthru

 special_targets
 c_o xs_c xs_o
 top_targets blibdirs linkext dlsyms dynamic dynamic_bs
 dynamic_lib static static_lib manifypods processPL
 installbin subdirs
 clean_subdirs clean realclean_subdirs realclean 
 metafile signature
 dist_basics dist_core distdir dist_test dist_ci distmeta distsignature
 install force perldepend makefile staticmake test ppd

          ); # loses section ordering

    @@Overridable = @@MM_Sections;
    push @@Overridable, qw[

 libscan makeaperl needs_linking
 subdir_x test_via_harness test_via_script 

 init_VERSION init_dist init_INST init_INSTALL init_DEST init_dirscan
 init_PM init_MANPODS init_xs init_PERL init_DIRFILESEP init_linker
                         ];

    push @@MM_Sections, qw[

 pm_to_blib selfdocument

                         ];

    # Postamble needs to be the last that was always the case
    push @@MM_Sections, "postamble";
    push @@Overridable, "postamble";

    # All sections are valid keys.
    @@Recognized_Att_Keys{@@MM_Sections} = (1) x @@MM_Sections;

    # we will use all these variables in the Makefile
    @@Get_from_Config = 
        qw(
           ar cc cccdlflags ccdlflags dlext dlsrc exe_ext full_ar ld 
           lddlflags ldflags libc lib_ext obj_ext osname osvers ranlib 
           sitelibexp sitearchexp so
          );

    # 5.5.3 doesn't have any concept of vendor libs
    push @@Get_from_Config, qw( vendorarchexp vendorlibexp ) if $] >= 5.006;

    foreach my $item (@@attrib_help){
        $Recognized_Att_Keys{$item} = 1;
    }
    foreach my $item (@@Get_from_Config) {
        $Recognized_Att_Keys{uc $item} = $Config{$item};
        print "Attribute '\U$item\E' => '$Config{$item}'\n"
            if ($Verbose >= 2);
    }

    #
    # When we eval a Makefile.PL in a subdirectory, that one will ask
    # us (the parent) for the values and will prepend "..", so that
    # all files to be installed end up below OUR ./blib
    #
    @@Prepend_parent = qw(
           INST_BIN INST_LIB INST_ARCHLIB INST_SCRIPT
           MAP_TARGET INST_MAN1DIR INST_MAN3DIR PERL_SRC
           PERL FULLPERL
    );
}

sub writeMakefile {
    die <<END;

The extension you are trying to build apparently is rather old and
most probably outdated. We detect that from the fact, that a
subroutine "writeMakefile" is called, and this subroutine is not
supported anymore since about October 1994.

Please contact the author or look into CPAN (details about CPAN can be
found in the FAQ and at http:/www.perl.com) for a more recent version
of the extension. If you're really desperate, you can try to change
the subroutine name from writeMakefile to WriteMakefile and rerun
'perl Makefile.PL', but you're most probably left alone, when you do
so.

The MakeMaker team

END
}

sub new {
    my($class,$self) = @@_;
    my($key);

    # Store the original args passed to WriteMakefile()
    foreach my $k (keys %$self) {
        $self->{ARGS}{$k} = $self->{$k};
    }

    $self = {} unless defined $self;

    $self->{PREREQ_PM}      ||= {};
    $self->{BUILD_REQUIRES} ||= {};

    # Temporarily bless it into MM so it can be used as an
    # object.  It will be blessed into a temp package later.
    bless $self, "MM";

    if ("@@ARGV" =~ /\bPREREQ_PRINT\b/) {
        $self->_PREREQ_PRINT;
    }

    # PRINT_PREREQ is RedHatism.
    if ("@@ARGV" =~ /\bPRINT_PREREQ\b/) {
        $self->_PRINT_PREREQ;
   }

    print STDOUT "MakeMaker (v$VERSION)\n" if $Verbose;
    if (-f "MANIFEST" && ! -f "Makefile"){
        check_manifest();
    }

    check_hints($self);

    # Translate X.Y.Z to X.00Y00Z
    if( defined $self->{MIN_PERL_VERSION} ) {
        $self->{MIN_PERL_VERSION} =~ s{ ^ (\d+) \. (\d+) \. (\d+) $ }
                                      {sprintf "%d.%03d%03d", $1, $2, $3}ex;
    }

    my $perl_version_ok = eval {
        local $SIG{__WARN__} = sub { 
            # simulate "use warnings FATAL => 'all'" for vintage perls
            die @@_;
        };
        !$self->{MIN_PERL_VERSION} or $self->{MIN_PERL_VERSION} <= $]
    };
    if (!$perl_version_ok) {
        if (!defined $perl_version_ok) {
            warn <<'END';
Warning: MIN_PERL_VERSION is not in a recognized format.
Recommended is a quoted numerical value like '5.005' or '5.008001'.
END
        }
        elsif ($self->{PREREQ_FATAL}) {
            die sprintf <<"END", $self->{MIN_PERL_VERSION}, $];
MakeMaker FATAL: perl version too low for this distribution.
Required is %s. We run %s.
END
        }
        else {
            warn sprintf
                "Warning: Perl version %s or higher required. We run %s.\n",
                $self->{MIN_PERL_VERSION}, $];
        }
    }

    my %configure_att;         # record &{$self->{CONFIGURE}} attributes
    my(%initial_att) = %$self; # record initial attributes

    my(%unsatisfied) = ();
    my $prereqs = $self->_all_prereqs;
    foreach my $prereq (sort keys %$prereqs) {
        my $required_version = $prereqs->{$prereq};

        my $installed_file = MM->_installed_file_for_module($prereq);
        my $pr_version = 0;
        $pr_version = MM->parse_version($installed_file) if $installed_file;
        $pr_version = 0 if $pr_version eq 'undef';

        # convert X.Y_Z alpha version #s to X.YZ for easier comparisons
        $pr_version =~ s/(\d+)\.(\d+)_(\d+)/$1.$2$3/;

        if (!$installed_file) {
            warn sprintf "Warning: prerequisite %s %s not found.\n", 
              $prereq, $required_version
                   unless $self->{PREREQ_FATAL};

            $unsatisfied{$prereq} = 'not installed';
        }
        elsif ($pr_version < $required_version ){
            warn sprintf "Warning: prerequisite %s %s not found. We have %s.\n",
              $prereq, $required_version, ($pr_version || 'unknown version') 
                  unless $self->{PREREQ_FATAL};

            $unsatisfied{$prereq} = $required_version ? $required_version : 'unknown version' ;
        }
    }

    if (%unsatisfied && $self->{PREREQ_FATAL}){
        my $failedprereqs = join "\n", map {"    $_ $unsatisfied{$_}"} 
                            sort { $a cmp $b } keys %unsatisfied;
        die <<"END";
MakeMaker FATAL: prerequisites not found.
$failedprereqs

Please install these modules first and rerun 'perl Makefile.PL'.
END
    }
    
    if (defined $self->{CONFIGURE}) {
        if (ref $self->{CONFIGURE} eq 'CODE') {
            %configure_att = %{&{$self->{CONFIGURE}}};
            $self = { %$self, %configure_att };
        } else {
            Carp::croak "Attribute 'CONFIGURE' to WriteMakefile() not a code reference\n";
        }
    }

    # This is for old Makefiles written pre 5.00, will go away
    if ( Carp::longmess("") =~ /runsubdirpl/s ){
        Carp::carp("WARNING: Please rerun 'perl Makefile.PL' to regenerate your Makefiles\n");
    }

    my $newclass = ++$PACKNAME;
    local @@Parent = @@Parent;    # Protect against non-local exits
    {
        print "Blessing Object into class [$newclass]\n" if $Verbose>=2;
        mv_all_methods("MY",$newclass);
        bless $self, $newclass;
        push @@Parent, $self;
        require ExtUtils::MY;

        no strict 'refs';   ## no critic;
        @@{"$newclass\:\:ISA"} = 'MM';
    }

    if (defined $Parent[-2]){
        $self->{PARENT} = $Parent[-2];
        for my $key (@@Prepend_parent) {
            next unless defined $self->{PARENT}{$key};

            # Don't stomp on WriteMakefile() args.
            next if defined $self->{ARGS}{$key} and
                    $self->{ARGS}{$key} eq $self->{$key};

            $self->{$key} = $self->{PARENT}{$key};

            unless ($Is_VMS && $key =~ /PERL$/) {
                $self->{$key} = $self->catdir("..",$self->{$key})
                  unless $self->file_name_is_absolute($self->{$key});
            } else {
                # PERL or FULLPERL will be a command verb or even a
                # command with an argument instead of a full file
                # specification under VMS.  So, don't turn the command
                # into a filespec, but do add a level to the path of
                # the argument if not already absolute.
                my @@cmd = split /\s+/, $self->{$key};
                $cmd[1] = $self->catfile('[-]',$cmd[1])
                  unless (@@cmd < 2) || $self->file_name_is_absolute($cmd[1]);
                $self->{$key} = join(' ', @@cmd);
            }
        }
        if ($self->{PARENT}) {
            $self->{PARENT}->{CHILDREN}->{$newclass} = $self;
            foreach my $opt (qw(POLLUTE PERL_CORE LINKTYPE)) {
                if (exists $self->{PARENT}->{$opt}
                    and not exists $self->{$opt})
                    {
                        # inherit, but only if already unspecified
                        $self->{$opt} = $self->{PARENT}->{$opt};
                    }
            }
        }
        my @@fm = grep /^FIRST_MAKEFILE=/, @@ARGV;
        parse_args($self,@@fm) if @@fm;
    } else {
        parse_args($self,split(' ', $ENV{PERL_MM_OPT} || ''),@@ARGV);
    }


    $self->{NAME} ||= $self->guess_name;

    ($self->{NAME_SYM} = $self->{NAME}) =~ s/\W+/_/g;

    $self->init_MAKE;
    $self->init_main;
    $self->init_VERSION;
    $self->init_dist;
    $self->init_INST;
    $self->init_INSTALL;
    $self->init_DEST;
    $self->init_dirscan;
    $self->init_PM;
    $self->init_MANPODS;
    $self->init_xs;
    $self->init_PERL;
    $self->init_DIRFILESEP;
    $self->init_linker;
    $self->init_ABSTRACT;

    $self->arch_check(
        $INC{'Config.pm'},
        $self->catfile($Config{'archlibexp'}, "Config.pm")
    );

    $self->init_others();
    $self->init_platform();
    $self->init_PERM();
    my($argv) = neatvalue(\@@ARGV);
    $argv =~ s/^\[/(/;
    $argv =~ s/\]$/)/;

    push @@{$self->{RESULT}}, <<END;
# This Makefile is for the $self->{NAME} extension to perl.
#
# It was generated automatically by MakeMaker version
# $VERSION (Revision: $Revision) from the contents of
# Makefile.PL. Don't edit this file, edit Makefile.PL instead.
#
#       ANY CHANGES MADE HERE WILL BE LOST!
#
#   MakeMaker ARGV: $argv
#
END

    push @@{$self->{RESULT}}, $self->_MakeMaker_Parameters_section(\%initial_att);

    if (defined $self->{CONFIGURE}) {
       push @@{$self->{RESULT}}, <<END;

#   MakeMaker 'CONFIGURE' Parameters:
END
        if (scalar(keys %configure_att) > 0) {
            foreach my $key (sort keys %configure_att){
               next if $key eq 'ARGS';
               my($v) = neatvalue($configure_att{$key});
               $v =~ s/(CODE|HASH|ARRAY|SCALAR)\([\dxa-f]+\)/$1\(...\)/;
               $v =~ tr/\n/ /s;
               push @@{$self->{RESULT}}, "#     $key => $v";
            }
        }
        else
        {
           push @@{$self->{RESULT}}, "# no values returned";
        }
        undef %configure_att;  # free memory
    }

    # turn the SKIP array into a SKIPHASH hash
    for my $skip (@@{$self->{SKIP} || []}) {
        $self->{SKIPHASH}{$skip} = 1;
    }
    delete $self->{SKIP}; # free memory

    if ($self->{PARENT}) {
        for (qw/install dist dist_basics dist_core distdir dist_test dist_ci/) {
            $self->{SKIPHASH}{$_} = 1;
        }
    }

    # We run all the subdirectories now. They don't have much to query
    # from the parent, but the parent has to query them: if they need linking!
    unless ($self->{NORECURS}) {
        $self->eval_in_subdirs if @@{$self->{DIR}};
    }

    foreach my $section ( @@MM_Sections ){
        # Support for new foo_target() methods.
        my $method = $section;
        $method .= '_target' unless $self->can($method);

        print "Processing Makefile '$section' section\n" if ($Verbose >= 2);
        my($skipit) = $self->skipcheck($section);
        if ($skipit){
            push @@{$self->{RESULT}}, "\n# --- MakeMaker $section section $skipit.";
        } else {
            my(%a) = %{$self->{$section} || {}};
            push @@{$self->{RESULT}}, "\n# --- MakeMaker $section section:";
            push @@{$self->{RESULT}}, "# " . join ", ", %a if $Verbose && %a;
            push @@{$self->{RESULT}}, $self->maketext_filter(
                $self->$method( %a )
            );
        }
    }

    push @@{$self->{RESULT}}, "\n# End.";

    $self;
}

sub WriteEmptyMakefile {
    Carp::croak "WriteEmptyMakefile: Need an even number of args" if @@_ % 2;

    my %att = @@_;
    my $self = MM->new(\%att);
    
    my $new = $self->{MAKEFILE};
    my $old = $self->{MAKEFILE_OLD};
    if (-f $old) {
        _unlink($old) or warn "unlink $old: $!";
    }
    if ( -f $new ) {
        _rename($new, $old) or warn "rename $new => $old: $!"
    }
    open my $mfh, '>', $new or die "open $new for write: $!";
    print $mfh <<'EOP';
all :

clean :

install :

makemakerdflt :

test :

EOP
    close $mfh or die "close $new for write: $!";
}


=begin private

=head3 _installed_file_for_module

  my $file = MM->_installed_file_for_module($module);

Return the first installed .pm $file associated with the $module.  The
one which will show up when you C<use $module>.

$module is something like "strict" or "Test::More".

=end private

=cut

sub _installed_file_for_module {
    my $class  = shift;
    my $prereq = shift;

    my $file = "$prereq.pm";
    $file =~ s{::}{/}g;

    my $path;
    for my $dir (@@INC) {
        my $tmp = File::Spec->catfile($dir, $file);
        if ( -r $tmp ) {
            $path = $tmp;
            last;
        }
    }

    return $path;
}


# Extracted from MakeMaker->new so we can test it
sub _MakeMaker_Parameters_section {
    my $self = shift;
    my $att  = shift;

    my @@result = <<'END';
#   MakeMaker Parameters:
END

    # CPAN.pm takes prereqs from this field in 'Makefile'
    # and does not know about BUILD_REQUIRES
    if( $att->{PREREQ_PM} || $att->{BUILD_REQUIRES} ) {
        %{$att->{'PREREQ_PM'}} = (%{$att->{'PREREQ_PM'}||{}}, %{$att->{'BUILD_REQUIRES'}||{}});
    }

    foreach my $key (sort keys %$att){
        next if $key eq 'ARGS';

        my($v) = neatvalue($att->{$key});
        $v =~ s/(CODE|HASH|ARRAY|SCALAR)\([\dxa-f]+\)/$1\(...\)/;
        $v =~ tr/\n/ /s;
        push @@result, "#     $key => $v";
    }

    return @@result;
}


sub check_manifest {
    print STDOUT "Checking if your kit is complete...\n";
    require ExtUtils::Manifest;
    # avoid warning
    $ExtUtils::Manifest::Quiet = $ExtUtils::Manifest::Quiet = 1;
    my(@@missed) = ExtUtils::Manifest::manicheck();
    if (@@missed) {
        print STDOUT "Warning: the following files are missing in your kit:\n";
        print "\t", join "\n\t", @@missed;
        print STDOUT "\n";
        print STDOUT "Please inform the author.\n";
    } else {
        print STDOUT "Looks good\n";
    }
}

sub parse_args{
    my($self, @@args) = @@_;
    foreach (@@args) {
        unless (m/(.*?)=(.*)/) {
            ++$Verbose if m/^verb/;
            next;
        }
        my($name, $value) = ($1, $2);
        if ($value =~ m/^~(\w+)?/) { # tilde with optional username
            $value =~ s [^~(\w*)]
                [$1 ?
                 ((getpwnam($1))[7] || "~$1") :
                 (getpwuid($>))[7]
                 ]ex;
        }

        # Remember the original args passed it.  It will be useful later.
        $self->{ARGS}{uc $name} = $self->{uc $name} = $value;
    }

    # catch old-style 'potential_libs' and inform user how to 'upgrade'
    if (defined $self->{potential_libs}){
        my($msg)="'potential_libs' => '$self->{potential_libs}' should be";
        if ($self->{potential_libs}){
            print STDOUT "$msg changed to:\n\t'LIBS' => ['$self->{potential_libs}']\n";
        } else {
            print STDOUT "$msg deleted.\n";
        }
        $self->{LIBS} = [$self->{potential_libs}];
        delete $self->{potential_libs};
    }
    # catch old-style 'ARMAYBE' and inform user how to 'upgrade'
    if (defined $self->{ARMAYBE}){
        my($armaybe) = $self->{ARMAYBE};
        print STDOUT "ARMAYBE => '$armaybe' should be changed to:\n",
                        "\t'dynamic_lib' => {ARMAYBE => '$armaybe'}\n";
        my(%dl) = %{$self->{dynamic_lib} || {}};
        $self->{dynamic_lib} = { %dl, ARMAYBE => $armaybe};
        delete $self->{ARMAYBE};
    }
    if (defined $self->{LDTARGET}){
        print STDOUT "LDTARGET should be changed to LDFROM\n";
        $self->{LDFROM} = $self->{LDTARGET};
        delete $self->{LDTARGET};
    }
    # Turn a DIR argument on the command line into an array
    if (defined $self->{DIR} && ref \$self->{DIR} eq 'SCALAR') {
        # So they can choose from the command line, which extensions they want
        # the grep enables them to have some colons too much in case they
        # have to build a list with the shell
        $self->{DIR} = [grep $_, split ":", $self->{DIR}];
    }
    # Turn a INCLUDE_EXT argument on the command line into an array
    if (defined $self->{INCLUDE_EXT} && ref \$self->{INCLUDE_EXT} eq 'SCALAR') {
        $self->{INCLUDE_EXT} = [grep $_, split '\s+', $self->{INCLUDE_EXT}];
    }
    # Turn a EXCLUDE_EXT argument on the command line into an array
    if (defined $self->{EXCLUDE_EXT} && ref \$self->{EXCLUDE_EXT} eq 'SCALAR') {
        $self->{EXCLUDE_EXT} = [grep $_, split '\s+', $self->{EXCLUDE_EXT}];
    }

    foreach my $mmkey (sort keys %$self){
        next if $mmkey eq 'ARGS';
        print STDOUT "  $mmkey => ", neatvalue($self->{$mmkey}), "\n" if $Verbose;
        print STDOUT "'$mmkey' is not a known MakeMaker parameter name.\n"
            unless exists $Recognized_Att_Keys{$mmkey};
    }
    $| = 1 if $Verbose;
}

sub check_hints {
    my($self) = @@_;
    # We allow extension-specific hints files.

    require File::Spec;
    my $curdir = File::Spec->curdir;

    my $hint_dir = File::Spec->catdir($curdir, "hints");
    return unless -d $hint_dir;

    # First we look for the best hintsfile we have
    my($hint)="${^O}_$Config{osvers}";
    $hint =~ s/\./_/g;
    $hint =~ s/_$//;
    return unless $hint;

    # Also try without trailing minor version numbers.
    while (1) {
        last if -f File::Spec->catfile($hint_dir, "$hint.pl");  # found
    } continue {
        last unless $hint =~ s/_[^_]*$//; # nothing to cut off
    }
    my $hint_file = File::Spec->catfile($hint_dir, "$hint.pl");

    return unless -f $hint_file;    # really there

    _run_hintfile($self, $hint_file);
}

sub _run_hintfile {
    our $self;
    local($self) = shift;       # make $self available to the hint file.
    my($hint_file) = shift;

    local($@@, $!);
    print STDERR "Processing hints file $hint_file\n";

    # Just in case the ./ isn't on the hint file, which File::Spec can
    # often strip off, we bung the curdir into @@INC
    local @@INC = (File::Spec->curdir, @@INC);
    my $ret = do $hint_file;
    if( !defined $ret ) {
        my $error = $@@ || $!;
        print STDERR $error;
    }
}

sub mv_all_methods {
    my($from,$to) = @@_;

    # Here you see the *current* list of methods that are overridable
    # from Makefile.PL via MY:: subroutines. As of VERSION 5.07 I'm
    # still trying to reduce the list to some reasonable minimum --
    # because I want to make it easier for the user. A.K.

    local $SIG{__WARN__} = sub { 
        # can't use 'no warnings redefined', 5.6 only
        warn @@_ unless $_[0] =~ /^Subroutine .* redefined/ 
    };
    foreach my $method (@@Overridable) {

        # We cannot say "next" here. Nick might call MY->makeaperl
        # which isn't defined right now

        # Above statement was written at 4.23 time when Tk-b8 was
        # around. As Tk-b9 only builds with 5.002something and MM 5 is
        # standard, we try to enable the next line again. It was
        # commented out until MM 5.23

        next unless defined &{"${from}::$method"};

        {
            no strict 'refs';   ## no critic
            *{"${to}::$method"} = \&{"${from}::$method"};

            # If we delete a method, then it will be undefined and cannot
            # be called.  But as long as we have Makefile.PLs that rely on
            # %MY:: being intact, we have to fill the hole with an
            # inheriting method:

            {
                package MY;
                my $super = "SUPER::".$method;
                *{$method} = sub {
                    shift->$super(@@_);
                };
            }
        }
    }

    # We have to clean out %INC also, because the current directory is
    # changed frequently and Graham Barr prefers to get his version
    # out of a History.pl file which is "required" so woudn't get
    # loaded again in another extension requiring a History.pl

    # With perl5.002_01 the deletion of entries in %INC caused Tk-b11
    # to core dump in the middle of a require statement. The required
    # file was Tk/MMutil.pm.  The consequence is, we have to be
    # extremely careful when we try to give perl a reason to reload a
    # library with same name.  The workaround prefers to drop nothing
    # from %INC and teach the writers not to use such libraries.

#    my $inc;
#    foreach $inc (keys %INC) {
#       #warn "***$inc*** deleted";
#       delete $INC{$inc};
#    }
}

sub skipcheck {
    my($self) = shift;
    my($section) = @@_;
    if ($section eq 'dynamic') {
        print STDOUT "Warning (non-fatal): Target 'dynamic' depends on targets ",
        "in skipped section 'dynamic_bs'\n"
            if $self->{SKIPHASH}{dynamic_bs} && $Verbose;
        print STDOUT "Warning (non-fatal): Target 'dynamic' depends on targets ",
        "in skipped section 'dynamic_lib'\n"
            if $self->{SKIPHASH}{dynamic_lib} && $Verbose;
    }
    if ($section eq 'dynamic_lib') {
        print STDOUT "Warning (non-fatal): Target '\$(INST_DYNAMIC)' depends on ",
        "targets in skipped section 'dynamic_bs'\n"
            if $self->{SKIPHASH}{dynamic_bs} && $Verbose;
    }
    if ($section eq 'static') {
        print STDOUT "Warning (non-fatal): Target 'static' depends on targets ",
        "in skipped section 'static_lib'\n"
            if $self->{SKIPHASH}{static_lib} && $Verbose;
    }
    return 'skipped' if $self->{SKIPHASH}{$section};
    return '';
}

sub flush {
    my $self = shift;

    my $finalname = $self->{MAKEFILE};
    print STDOUT "Writing $finalname for $self->{NAME}\n";

    unlink($finalname, "MakeMaker.tmp", $Is_VMS ? 'Descrip.MMS' : ());
    open(my $fh,">", "MakeMaker.tmp")
        or die "Unable to open MakeMaker.tmp: $!";

    for my $chunk (@@{$self->{RESULT}}) {
        print $fh "$chunk\n";
    }

    close $fh;
    _rename("MakeMaker.tmp", $finalname) or
      warn "rename MakeMaker.tmp => $finalname: $!";
    chmod 0644, $finalname unless $Is_VMS;

    my %keep = map { ($_ => 1) } qw(NEEDS_LINKING HAS_LINK_CODE);

    if ($self->{PARENT} && !$self->{_KEEP_AFTER_FLUSH}) {
        foreach (keys %$self) { # safe memory
            delete $self->{$_} unless $keep{$_};
        }
    }

    system("$Config::Config{eunicefix} $finalname") unless $Config::Config{eunicefix} eq ":";
}


# This is a rename for OS's where the target must be unlinked first.
sub _rename {
    my($src, $dest) = @@_;
    chmod 0666, $dest;
    unlink $dest;
    return rename $src, $dest;
}

# This is an unlink for OS's where the target must be writable first.
sub _unlink {
    my @@files = @@_;
    chmod 0666, @@files;
    return unlink @@files;
}


# The following mkbootstrap() is only for installations that are calling
# the pre-4.1 mkbootstrap() from their old Makefiles. This MakeMaker
# writes Makefiles, that use ExtUtils::Mkbootstrap directly.
sub mkbootstrap {
    die <<END;
!!! Your Makefile has been built such a long time ago, !!!
!!! that is unlikely to work with current MakeMaker.   !!!
!!! Please rebuild your Makefile                       !!!
END
}

# Ditto for mksymlists() as of MakeMaker 5.17
sub mksymlists {
    die <<END;
!!! Your Makefile has been built such a long time ago, !!!
!!! that is unlikely to work with current MakeMaker.   !!!
!!! Please rebuild your Makefile                       !!!
END
}

sub neatvalue {
    my($v) = @@_;
    return "undef" unless defined $v;
    my($t) = ref $v;
    return "q[$v]" unless $t;
    if ($t eq 'ARRAY') {
        my(@@m, @@neat);
        push @@m, "[";
        foreach my $elem (@@$v) {
            push @@neat, "q[$elem]";
        }
        push @@m, join ", ", @@neat;
        push @@m, "]";
        return join "", @@m;
    }
    return "$v" unless $t eq 'HASH';
    my(@@m, $key, $val);
    while (($key,$val) = each %$v){
        last unless defined $key; # cautious programming in case (undef,undef) is true
        push(@@m,"$key=>".neatvalue($val)) ;
    }
    return "{ ".join(', ',@@m)." }";
}

sub selfdocument {
    my($self) = @@_;
    my(@@m);
    if ($Verbose){
        push @@m, "\n# Full list of MakeMaker attribute values:";
        foreach my $key (sort keys %$self){
            next if $key eq 'RESULT' || $key =~ /^[A-Z][a-z]/;
            my($v) = neatvalue($self->{$key});
            $v =~ s/(CODE|HASH|ARRAY|SCALAR)\([\dxa-f]+\)/$1\(...\)/;
            $v =~ tr/\n/ /s;
            push @@m, "# $key => $v";
        }
    }
    join "\n", @@m;
}

1;

__END__

=head1 NAME

ExtUtils::MakeMaker - Create a module Makefile

=head1 SYNOPSIS

  use ExtUtils::MakeMaker;

  WriteMakefile( ATTRIBUTE => VALUE [, ...] );

=head1 DESCRIPTION

This utility is designed to write a Makefile for an extension module
from a Makefile.PL. It is based on the Makefile.SH model provided by
Andy Dougherty and the perl5-porters.

It splits the task of generating the Makefile into several subroutines
that can be individually overridden.  Each subroutine returns the text
it wishes to have written to the Makefile.

MakeMaker is object oriented. Each directory below the current
directory that contains a Makefile.PL is treated as a separate
object. This makes it possible to write an unlimited number of
Makefiles with a single invocation of WriteMakefile().

=head2 How To Write A Makefile.PL

See ExtUtils::MakeMaker::Tutorial.

The long answer is the rest of the manpage :-)

=head2 Default Makefile Behaviour

The generated Makefile enables the user of the extension to invoke

  perl Makefile.PL # optionally "perl Makefile.PL verbose"
  make
  make test        # optionally set TEST_VERBOSE=1
  make install     # See below

The Makefile to be produced may be altered by adding arguments of the
form C<KEY=VALUE>. E.g.

  perl Makefile.PL INSTALL_BASE=~

Other interesting targets in the generated Makefile are

  make config     # to check if the Makefile is up-to-date
  make clean      # delete local temp files (Makefile gets renamed)
  make realclean  # delete derived files (including ./blib)
  make ci         # check in all the files in the MANIFEST file
  make dist       # see below the Distribution Support section

=head2 make test

MakeMaker checks for the existence of a file named F<test.pl> in the
current directory and if it exists it execute the script with the
proper set of perl C<-I> options.

MakeMaker also checks for any files matching glob("t/*.t"). It will
execute all matching files in alphabetical order via the
L<Test::Harness> module with the C<-I> switches set correctly.

If you'd like to see the raw output of your tests, set the
C<TEST_VERBOSE> variable to true.

  make test TEST_VERBOSE=1

=head2 make testdb

A useful variation of the above is the target C<testdb>. It runs the
test under the Perl debugger (see L<perldebug>). If the file
F<test.pl> exists in the current directory, it is used for the test.

If you want to debug some other testfile, set the C<TEST_FILE> variable
thusly:

  make testdb TEST_FILE=t/mytest.t

By default the debugger is called using C<-d> option to perl. If you
want to specify some other option, set the C<TESTDB_SW> variable:

  make testdb TESTDB_SW=-Dx

=head2 make install

make alone puts all relevant files into directories that are named by
the macros INST_LIB, INST_ARCHLIB, INST_SCRIPT, INST_MAN1DIR and
INST_MAN3DIR.  All these default to something below ./blib if you are
I<not> building below the perl source directory. If you I<are>
building below the perl source, INST_LIB and INST_ARCHLIB default to
../../lib, and INST_SCRIPT is not defined.

The I<install> target of the generated Makefile copies the files found
below each of the INST_* directories to their INSTALL*
counterparts. Which counterparts are chosen depends on the setting of
INSTALLDIRS according to the following table:

                                 INSTALLDIRS set to
                           perl        site          vendor

                 PERLPREFIX      SITEPREFIX          VENDORPREFIX
  INST_ARCHLIB   INSTALLARCHLIB  INSTALLSITEARCH     INSTALLVENDORARCH
  INST_LIB       INSTALLPRIVLIB  INSTALLSITELIB      INSTALLVENDORLIB
  INST_BIN       INSTALLBIN      INSTALLSITEBIN      INSTALLVENDORBIN
  INST_SCRIPT    INSTALLSCRIPT   INSTALLSITESCRIPT   INSTALLVENDORSCRIPT
  INST_MAN1DIR   INSTALLMAN1DIR  INSTALLSITEMAN1DIR  INSTALLVENDORMAN1DIR
  INST_MAN3DIR   INSTALLMAN3DIR  INSTALLSITEMAN3DIR  INSTALLVENDORMAN3DIR

The INSTALL... macros in turn default to their %Config
($Config{installprivlib}, $Config{installarchlib}, etc.) counterparts.

You can check the values of these variables on your system with

    perl '-V:install.*'

And to check the sequence in which the library directories are
searched by perl, run

    perl -le 'print join $/, @@INC'

Sometimes older versions of the module you're installing live in other
directories in @@INC.  Because Perl loads the first version of a module it 
finds, not the newest, you might accidentally get one of these older
versions even after installing a brand new version.  To delete I<all other
versions of the module you're installing> (not simply older ones) set the
C<UNINST> variable.

    make install UNINST=1


=head2 INSTALL_BASE

INSTALL_BASE can be passed into Makefile.PL to change where your
module will be installed.  INSTALL_BASE is more like what everyone
else calls "prefix" than PREFIX is.

To have everything installed in your home directory, do the following.

    # Unix users, INSTALL_BASE=~ works fine
    perl Makefile.PL INSTALL_BASE=/path/to/your/home/dir

Like PREFIX, it sets several INSTALL* attributes at once.  Unlike
PREFIX it is easy to predict where the module will end up.  The
installation pattern looks like this:

    INSTALLARCHLIB     INSTALL_BASE/lib/perl5/$Config{archname}
    INSTALLPRIVLIB     INSTALL_BASE/lib/perl5
    INSTALLBIN         INSTALL_BASE/bin
    INSTALLSCRIPT      INSTALL_BASE/bin
    INSTALLMAN1DIR     INSTALL_BASE/man/man1
    INSTALLMAN3DIR     INSTALL_BASE/man/man3

INSTALL_BASE in MakeMaker and C<--install_base> in Module::Build (as
of 0.28) install to the same location.  If you want MakeMaker and
Module::Build to install to the same location simply set INSTALL_BASE
and C<--install_base> to the same location.

INSTALL_BASE was added in 6.31.


=head2 PREFIX and LIB attribute

PREFIX and LIB can be used to set several INSTALL* attributes in one
go.  Here's an example for installing into your home directory.

    # Unix users, PREFIX=~ works fine
    perl Makefile.PL PREFIX=/path/to/your/home/dir

This will install all files in the module under your home directory,
with man pages and libraries going into an appropriate place (usually
~/man and ~/lib).  How the exact location is determined is complicated
and depends on how your Perl was configured.  INSTALL_BASE works more
like what other build systems call "prefix" than PREFIX and we
recommend you use that instead.

Another way to specify many INSTALL directories with a single
parameter is LIB.

    perl Makefile.PL LIB=~/lib

This will install the module's architecture-independent files into
~/lib, the architecture-dependent files into ~/lib/$archname.

Note, that in both cases the tilde expansion is done by MakeMaker, not
by perl by default, nor by make.

Conflicts between parameters LIB, PREFIX and the various INSTALL*
arguments are resolved so that:

=over 4

=item *

setting LIB overrides any setting of INSTALLPRIVLIB, INSTALLARCHLIB,
INSTALLSITELIB, INSTALLSITEARCH (and they are not affected by PREFIX);

=item *

without LIB, setting PREFIX replaces the initial C<$Config{prefix}>
part of those INSTALL* arguments, even if the latter are explicitly
set (but are set to still start with C<$Config{prefix}>).

=back

If the user has superuser privileges, and is not working on AFS or
relatives, then the defaults for INSTALLPRIVLIB, INSTALLARCHLIB,
INSTALLSCRIPT, etc. will be appropriate, and this incantation will be
the best:

    perl Makefile.PL; 
    make; 
    make test
    make install

make install per default writes some documentation of what has been
done into the file C<$(INSTALLARCHLIB)/perllocal.pod>. This feature
can be bypassed by calling make pure_install.

=head2 AFS users

will have to specify the installation directories as these most
probably have changed since perl itself has been installed. They will
have to do this by calling

    perl Makefile.PL INSTALLSITELIB=/afs/here/today \
        INSTALLSCRIPT=/afs/there/now INSTALLMAN3DIR=/afs/for/manpages
    make

Be careful to repeat this procedure every time you recompile an
extension, unless you are sure the AFS installation directories are
still valid.

=head2 Static Linking of a new Perl Binary

An extension that is built with the above steps is ready to use on
systems supporting dynamic loading. On systems that do not support
dynamic loading, any newly created extension has to be linked together
with the available resources. MakeMaker supports the linking process
by creating appropriate targets in the Makefile whenever an extension
is built. You can invoke the corresponding section of the makefile with

    make perl

That produces a new perl binary in the current directory with all
extensions linked in that can be found in INST_ARCHLIB, SITELIBEXP,
and PERL_ARCHLIB. To do that, MakeMaker writes a new Makefile, on
UNIX, this is called Makefile.aperl (may be system dependent). If you
want to force the creation of a new perl, it is recommended, that you
delete this Makefile.aperl, so the directories are searched-through
for linkable libraries again.

The binary can be installed into the directory where perl normally
resides on your machine with

    make inst_perl

To produce a perl binary with a different name than C<perl>, either say

    perl Makefile.PL MAP_TARGET=myperl
    make myperl
    make inst_perl

or say

    perl Makefile.PL
    make myperl MAP_TARGET=myperl
    make inst_perl MAP_TARGET=myperl

In any case you will be prompted with the correct invocation of the
C<inst_perl> target that installs the new binary into INSTALLBIN.

make inst_perl per default writes some documentation of what has been
done into the file C<$(INSTALLARCHLIB)/perllocal.pod>. This
can be bypassed by calling make pure_inst_perl.

Warning: the inst_perl: target will most probably overwrite your
existing perl binary. Use with care!

Sometimes you might want to build a statically linked perl although
your system supports dynamic loading. In this case you may explicitly
set the linktype with the invocation of the Makefile.PL or make:

    perl Makefile.PL LINKTYPE=static    # recommended

or

    make LINKTYPE=static                # works on most systems

=head2 Determination of Perl Library and Installation Locations

MakeMaker needs to know, or to guess, where certain things are
located.  Especially INST_LIB and INST_ARCHLIB (where to put the files
during the make(1) run), PERL_LIB and PERL_ARCHLIB (where to read
existing modules from), and PERL_INC (header files and C<libperl*.*>).

Extensions may be built either using the contents of the perl source
directory tree or from the installed perl library. The recommended way
is to build extensions after you have run 'make install' on perl
itself. You can do that in any directory on your hard disk that is not
below the perl source tree. The support for extensions below the ext
directory of the perl distribution is only good for the standard
extensions that come with perl.

If an extension is being built below the C<ext/> directory of the perl
source then MakeMaker will set PERL_SRC automatically (e.g.,
C<../..>).  If PERL_SRC is defined and the extension is recognized as
a standard extension, then other variables default to the following:

  PERL_INC     = PERL_SRC
  PERL_LIB     = PERL_SRC/lib
  PERL_ARCHLIB = PERL_SRC/lib
  INST_LIB     = PERL_LIB
  INST_ARCHLIB = PERL_ARCHLIB

If an extension is being built away from the perl source then MakeMaker
will leave PERL_SRC undefined and default to using the installed copy
of the perl library. The other variables default to the following:

  PERL_INC     = $archlibexp/CORE
  PERL_LIB     = $privlibexp
  PERL_ARCHLIB = $archlibexp
  INST_LIB     = ./blib/lib
  INST_ARCHLIB = ./blib/arch

If perl has not yet been installed then PERL_SRC can be defined on the
command line as shown in the previous section.


=head2 Which architecture dependent directory?

If you don't want to keep the defaults for the INSTALL* macros,
MakeMaker helps you to minimize the typing needed: the usual
relationship between INSTALLPRIVLIB and INSTALLARCHLIB is determined
by Configure at perl compilation time. MakeMaker supports the user who
sets INSTALLPRIVLIB. If INSTALLPRIVLIB is set, but INSTALLARCHLIB not,
then MakeMaker defaults the latter to be the same subdirectory of
INSTALLPRIVLIB as Configure decided for the counterparts in %Config ,
otherwise it defaults to INSTALLPRIVLIB. The same relationship holds
for INSTALLSITELIB and INSTALLSITEARCH.

MakeMaker gives you much more freedom than needed to configure
internal variables and get different results. It is worth to mention,
that make(1) also lets you configure most of the variables that are
used in the Makefile. But in the majority of situations this will not
be necessary, and should only be done if the author of a package
recommends it (or you know what you're doing).

=head2 Using Attributes and Parameters

The following attributes may be specified as arguments to WriteMakefile()
or as NAME=VALUE pairs on the command line.

=over 2

=item ABSTRACT

One line description of the module. Will be included in PPD file.

=item ABSTRACT_FROM

Name of the file that contains the package description. MakeMaker looks
for a line in the POD matching /^($package\s-\s)(.*)/. This is typically
the first line in the "=head1 NAME" section. $2 becomes the abstract.

=item AUTHOR

String containing name (and email address) of package author(s). Is used
in PPD (Perl Package Description) files for PPM (Perl Package Manager).

=item BINARY_LOCATION

Used when creating PPD files for binary packages.  It can be set to a
full or relative path or URL to the binary archive for a particular
architecture.  For example:

        perl Makefile.PL BINARY_LOCATION=x86/Agent.tar.gz

builds a PPD package that references a binary of the C<Agent> package,
located in the C<x86> directory relative to the PPD itself.

=item BUILD_REQUIRES

A hash of modules that are needed to build your module but not run it.

This will go into the C<build_requires> field of your F<META.yml>.

The format is the same as PREREQ_PM.

=item C

Ref to array of *.c file names. Initialised from a directory scan
and the values portion of the XS attribute hash. This is not
currently used by MakeMaker but may be handy in Makefile.PLs.

=item CCFLAGS

String that will be included in the compiler call command line between
the arguments INC and OPTIMIZE.

=item CONFIG

Arrayref. E.g. [qw(archname manext)] defines ARCHNAME & MANEXT from
config.sh. MakeMaker will add to CONFIG the following values anyway:
ar
cc
cccdlflags
ccdlflags
dlext
dlsrc
ld
lddlflags
ldflags
libc
lib_ext
obj_ext
ranlib
sitelibexp
sitearchexp
so

=item CONFIGURE

CODE reference. The subroutine should return a hash reference. The
hash may contain further attributes, e.g. {LIBS =E<gt> ...}, that have to
be determined by some evaluation method.

=item CONFIGURE_REQUIRES

A hash of modules that are required to run Makefile.PL itself, but not
to run your distribution.

This will go into the C<configure_requires> field of your F<META.yml>.

Defaults to C<{ "ExtUtils::MakeMaker" => 0 }>

The format is the same as PREREQ_PM.

=item DEFINE

Something like C<"-DHAVE_UNISTD_H">

=item DESTDIR

This is the root directory into which the code will be installed.  It
I<prepends itself to the normal prefix>.  For example, if your code
would normally go into F</usr/local/lib/perl> you could set DESTDIR=~/tmp/
and installation would go into F<~/tmp/usr/local/lib/perl>.

This is primarily of use for people who repackage Perl modules.

NOTE: Due to the nature of make, it is important that you put the trailing
slash on your DESTDIR.  F<~/tmp/> not F<~/tmp>.

=item DIR

Ref to array of subdirectories containing Makefile.PLs e.g. ['sdbm']
in ext/SDBM_File

=item DISTNAME

A safe filename for the package. 

Defaults to NAME above but with :: replaced with -.

For example, Foo::Bar becomes Foo-Bar.

=item DISTVNAME

Your name for distributing the package with the version number
included.  This is used by 'make dist' to name the resulting archive
file.

Defaults to DISTNAME-VERSION.

For example, version 1.04 of Foo::Bar becomes Foo-Bar-1.04.

On some OS's where . has special meaning VERSION_SYM may be used in
place of VERSION.

=item DL_FUNCS

Hashref of symbol names for routines to be made available as universal
symbols.  Each key/value pair consists of the package name and an
array of routine names in that package.  Used only under AIX, OS/2,
VMS and Win32 at present.  The routine names supplied will be expanded
in the same way as XSUB names are expanded by the XS() macro.
Defaults to

  {"$(NAME)" => ["boot_$(NAME)" ] }

e.g.

  {"RPC" => [qw( boot_rpcb rpcb_gettime getnetconfigent )],
   "NetconfigPtr" => [ 'DESTROY'] }

Please see the L<ExtUtils::Mksymlists> documentation for more information
about the DL_FUNCS, DL_VARS and FUNCLIST attributes.

=item DL_VARS

Array of symbol names for variables to be made available as universal symbols.
Used only under AIX, OS/2, VMS and Win32 at present.  Defaults to [].
(e.g. [ qw(Foo_version Foo_numstreams Foo_tree ) ])

=item EXCLUDE_EXT

Array of extension names to exclude when doing a static build.  This
is ignored if INCLUDE_EXT is present.  Consult INCLUDE_EXT for more
details.  (e.g.  [ qw( Socket POSIX ) ] )

This attribute may be most useful when specified as a string on the
command line:  perl Makefile.PL EXCLUDE_EXT='Socket Safe'

=item EXE_FILES

Ref to array of executable files. The files will be copied to the
INST_SCRIPT directory. Make realclean will delete them from there
again.

If your executables start with something like #!perl or
#!/usr/bin/perl MakeMaker will change this to the path of the perl
'Makefile.PL' was invoked with so the programs will be sure to run
properly even if perl is not in /usr/bin/perl.

=item FIRST_MAKEFILE

The name of the Makefile to be produced.  This is used for the second
Makefile that will be produced for the MAP_TARGET.

Defaults to 'Makefile' or 'Descrip.MMS' on VMS.

(Note: we couldn't use MAKEFILE because dmake uses this for something
else).

=item FULLPERL

Perl binary able to run this extension, load XS modules, etc...

=item FULLPERLRUN

Like PERLRUN, except it uses FULLPERL.

=item FULLPERLRUNINST

Like PERLRUNINST, except it uses FULLPERL.

=item FUNCLIST

This provides an alternate means to specify function names to be
exported from the extension.  Its value is a reference to an
array of function names to be exported by the extension.  These
names are passed through unaltered to the linker options file.

=item H

Ref to array of *.h file names. Similar to C.

=item IMPORTS

This attribute is used to specify names to be imported into the
extension. Takes a hash ref.

It is only used on OS/2 and Win32.

=item INC

Include file dirs eg: C<"-I/usr/5include -I/path/to/inc">

=item INCLUDE_EXT

Array of extension names to be included when doing a static build.
MakeMaker will normally build with all of the installed extensions when
doing a static build, and that is usually the desired behavior.  If
INCLUDE_EXT is present then MakeMaker will build only with those extensions
which are explicitly mentioned. (e.g.  [ qw( Socket POSIX ) ])

It is not necessary to mention DynaLoader or the current extension when
filling in INCLUDE_EXT.  If the INCLUDE_EXT is mentioned but is empty then
only DynaLoader and the current extension will be included in the build.

This attribute may be most useful when specified as a string on the
command line:  perl Makefile.PL INCLUDE_EXT='POSIX Socket Devel::Peek'

=item INSTALLARCHLIB

Used by 'make install', which copies files from INST_ARCHLIB to this
directory if INSTALLDIRS is set to perl.

=item INSTALLBIN

Directory to install binary files (e.g. tkperl) into if
INSTALLDIRS=perl.

=item INSTALLDIRS

Determines which of the sets of installation directories to choose:
perl, site or vendor.  Defaults to site.

=item INSTALLMAN1DIR

=item INSTALLMAN3DIR

These directories get the man pages at 'make install' time if
INSTALLDIRS=perl.  Defaults to $Config{installman*dir}.

If set to 'none', no man pages will be installed.

=item INSTALLPRIVLIB

Used by 'make install', which copies files from INST_LIB to this
directory if INSTALLDIRS is set to perl.

Defaults to $Config{installprivlib}.

=item INSTALLSCRIPT

Used by 'make install' which copies files from INST_SCRIPT to this
directory if INSTALLDIRS=perl.

=item INSTALLSITEARCH

Used by 'make install', which copies files from INST_ARCHLIB to this
directory if INSTALLDIRS is set to site (default).

=item INSTALLSITEBIN

Used by 'make install', which copies files from INST_BIN to this
directory if INSTALLDIRS is set to site (default).

=item INSTALLSITELIB

Used by 'make install', which copies files from INST_LIB to this
directory if INSTALLDIRS is set to site (default).

=item INSTALLSITEMAN1DIR

=item INSTALLSITEMAN3DIR

These directories get the man pages at 'make install' time if
INSTALLDIRS=site (default).  Defaults to 
$(SITEPREFIX)/man/man$(MAN*EXT).

If set to 'none', no man pages will be installed.

=item INSTALLSITESCRIPT

Used by 'make install' which copies files from INST_SCRIPT to this
directory if INSTALLDIRS is set to site (default).

=item INSTALLVENDORARCH

Used by 'make install', which copies files from INST_ARCHLIB to this
directory if INSTALLDIRS is set to vendor.

=item INSTALLVENDORBIN

Used by 'make install', which copies files from INST_BIN to this
directory if INSTALLDIRS is set to vendor.

=item INSTALLVENDORLIB

Used by 'make install', which copies files from INST_LIB to this
directory if INSTALLDIRS is set to vendor.

=item INSTALLVENDORMAN1DIR

=item INSTALLVENDORMAN3DIR

These directories get the man pages at 'make install' time if
INSTALLDIRS=vendor.  Defaults to $(VENDORPREFIX)/man/man$(MAN*EXT).

If set to 'none', no man pages will be installed.

=item INSTALLVENDORSCRIPT

Used by 'make install' which copies files from INST_SCRIPT to this
directory if INSTALLDIRS is set to vendor.

=item INST_ARCHLIB

Same as INST_LIB for architecture dependent files.

=item INST_BIN

Directory to put real binary files during 'make'. These will be copied
to INSTALLBIN during 'make install'

=item INST_LIB

Directory where we put library files of this extension while building
it.

=item INST_MAN1DIR

Directory to hold the man pages at 'make' time

=item INST_MAN3DIR

Directory to hold the man pages at 'make' time

=item INST_SCRIPT

Directory, where executable files should be installed during
'make'. Defaults to "./blib/script", just to have a dummy location during
testing. make install will copy the files in INST_SCRIPT to
INSTALLSCRIPT.

=item LD

Program to be used to link libraries for dynamic loading.

Defaults to $Config{ld}.

=item LDDLFLAGS

Any special flags that might need to be passed to ld to create a
shared library suitable for dynamic loading.  It is up to the makefile
to use it.  (See L<Config/lddlflags>)

Defaults to $Config{lddlflags}.

=item LDFROM

Defaults to "$(OBJECT)" and is used in the ld command to specify
what files to link/load from (also see dynamic_lib below for how to
specify ld flags)

=item LIB

LIB should only be set at C<perl Makefile.PL> time but is allowed as a
MakeMaker argument. It has the effect of setting both INSTALLPRIVLIB
and INSTALLSITELIB to that value regardless any explicit setting of
those arguments (or of PREFIX).  INSTALLARCHLIB and INSTALLSITEARCH
are set to the corresponding architecture subdirectory.

=item LIBPERL_A

The filename of the perllibrary that will be used together with this
extension. Defaults to libperl.a.

=item LIBS

An anonymous array of alternative library
specifications to be searched for (in order) until
at least one library is found. E.g.

  'LIBS' => ["-lgdbm", "-ldbm -lfoo", "-L/path -ldbm.nfs"]

Mind, that any element of the array
contains a complete set of arguments for the ld
command. So do not specify

  'LIBS' => ["-ltcl", "-ltk", "-lX11"]

See ODBM_File/Makefile.PL for an example, where an array is needed. If
you specify a scalar as in

  'LIBS' => "-ltcl -ltk -lX11"

MakeMaker will turn it into an array with one element.

=item LICENSE

The licensing terms of your distribution.  Generally its "perl" for the
same license as Perl itself.

See L<Module::Build::API> for the list of options.

Defaults to "unknown".

=item LINKTYPE

'static' or 'dynamic' (default unless usedl=undef in
config.sh). Should only be used to force static linking (also see
linkext below).

=item MAKE

Variant of make you intend to run the generated Makefile with.  This
parameter lets Makefile.PL know what make quirks to account for when
generating the Makefile.

MakeMaker also honors the MAKE environment variable.  This parameter
takes precedent.

Currently the only significant values are 'dmake' and 'nmake' for Windows
users.

Defaults to $Config{make}.

=item MAKEAPERL

Boolean which tells MakeMaker, that it should include the rules to
make a perl. This is handled automatically as a switch by
MakeMaker. The user normally does not need it.

=item MAKEFILE_OLD

When 'make clean' or similar is run, the $(FIRST_MAKEFILE) will be
backed up at this location.

Defaults to $(FIRST_MAKEFILE).old or $(FIRST_MAKEFILE)_old on VMS.

=item MAN1PODS

Hashref of pod-containing files. MakeMaker will default this to all
EXE_FILES files that include POD directives. The files listed
here will be converted to man pages and installed as was requested
at Configure time.

This hash should map POD files (or scripts containing POD) to the
man file names under the C<blib/man1/> directory, as in the following
example:

  MAN1PODS            => {
    'doc/command.pod'    => 'blib/man1/command.1',
    'scripts/script.pl'  => 'blib/man1/script.1',
  }

=item MAN3PODS

Hashref that assigns to *.pm and *.pod files the files into which the
manpages are to be written. MakeMaker parses all *.pod and *.pm files
for POD directives. Files that contain POD will be the default keys of
the MAN3PODS hashref. These will then be converted to man pages during
C<make> and will be installed during C<make install>.

Example similar to MAN1PODS.

=item MAP_TARGET

If it is intended, that a new perl binary be produced, this variable
may hold a name for that binary. Defaults to perl

=item META_ADD

=item META_MERGE

A hashrefs of items to add to the F<META.yml>.

They differ in how they behave if they have the same key as the
default metadata.  META_ADD will override the default value with it's
own.  META_MERGE will merge its value with the default.

Unless you want to override the defaults, prefer META_MERGE so as to
get the advantage of any future defaults.

=item MIN_PERL_VERSION

The minimum required version of Perl for this distribution.

Either 5.006001 or 5.6.1 format is acceptable.

=item MYEXTLIB

If the extension links to a library that it builds set this to the
name of the library (see SDBM_File)

=item NAME

Perl module name for this extension (DBD::Oracle). This will default
to the directory name but should be explicitly defined in the
Makefile.PL.

=item NEEDS_LINKING

MakeMaker will figure out if an extension contains linkable code
anywhere down the directory tree, and will set this variable
accordingly, but you can speed it up a very little bit if you define
this boolean variable yourself.

=item NOECHO

Command so make does not print the literal commands its running.

By setting it to an empty string you can generate a Makefile that
prints all commands. Mainly used in debugging MakeMaker itself.

Defaults to C<@@>.

=item NORECURS

Boolean.  Attribute to inhibit descending into subdirectories.

=item NO_META

When true, suppresses the generation and addition to the MANIFEST of
the META.yml module meta-data file during 'make distdir'.

Defaults to false.

=item NO_VC

In general, any generated Makefile checks for the current version of
MakeMaker and the version the Makefile was built under. If NO_VC is
set, the version check is neglected. Do not write this into your
Makefile.PL, use it interactively instead.

=item OBJECT

List of object files, defaults to '$(BASEEXT)$(OBJ_EXT)', but can be a long
string containing all object files, e.g. "tkpBind.o
tkpButton.o tkpCanvas.o"

(Where BASEEXT is the last component of NAME, and OBJ_EXT is $Config{obj_ext}.)

=item OPTIMIZE

Defaults to C<-O>. Set it to C<-g> to turn debugging on. The flag is
passed to subdirectory makes.

=item PERL

Perl binary for tasks that can be done by miniperl

=item PERL_CORE

Set only when MakeMaker is building the extensions of the Perl core
distribution.

=item PERLMAINCC

The call to the program that is able to compile perlmain.c. Defaults
to $(CC).

=item PERL_ARCHLIB

Same as for PERL_LIB, but for architecture dependent files.

Used only when MakeMaker is building the extensions of the Perl core
distribution (because normally $(PERL_ARCHLIB) is automatically in @@INC,
and adding it would get in the way of PERL5LIB).

=item PERL_LIB

Directory containing the Perl library to use.

Used only when MakeMaker is building the extensions of the Perl core
distribution (because normally $(PERL_LIB) is automatically in @@INC,
and adding it would get in the way of PERL5LIB).

=item PERL_MALLOC_OK

defaults to 0.  Should be set to TRUE if the extension can work with
the memory allocation routines substituted by the Perl malloc() subsystem.
This should be applicable to most extensions with exceptions of those

=over 4

=item *

with bugs in memory allocations which are caught by Perl's malloc();

=item *

which interact with the memory allocator in other ways than via
malloc(), realloc(), free(), calloc(), sbrk() and brk();

=item *

which rely on special alignment which is not provided by Perl's malloc().

=back

B<NOTE.>  Negligence to set this flag in I<any one> of loaded extension
nullifies many advantages of Perl's malloc(), such as better usage of
system resources, error detection, memory usage reporting, catchable failure
of memory allocations, etc.

=item PERLPREFIX

Directory under which core modules are to be installed.

Defaults to $Config{installprefixexp} falling back to
$Config{installprefix}, $Config{prefixexp} or $Config{prefix} should
$Config{installprefixexp} not exist.

Overridden by PREFIX.

=item PERLRUN

Use this instead of $(PERL) when you wish to run perl.  It will set up
extra necessary flags for you.

=item PERLRUNINST

Use this instead of $(PERL) when you wish to run perl to work with
modules.  It will add things like -I$(INST_ARCH) and other necessary
flags so perl can see the modules you're about to install.

=item PERL_SRC

Directory containing the Perl source code (use of this should be
avoided, it may be undefined)

=item PERM_DIR

Desired permission for directories. Defaults to C<755>.

=item PERM_RW

Desired permission for read/writable files. Defaults to C<644>.

=item PERM_RWX

Desired permission for executable files. Defaults to C<755>.

=item PL_FILES

MakeMaker can run programs to generate files for you at build time.
By default any file named *.PL (except Makefile.PL and Build.PL) in
the top level directory will be assumed to be a Perl program and run
passing its own basename in as an argument.  For example...

    perl foo.PL foo

This behavior can be overridden by supplying your own set of files to
search.  PL_FILES accepts a hash ref, the key being the file to run
and the value is passed in as the first argument when the PL file is run.

    PL_FILES => {'bin/foobar.PL' => 'bin/foobar'}

Would run bin/foobar.PL like this:

    perl bin/foobar.PL bin/foobar

If multiple files from one program are desired an array ref can be used.

    PL_FILES => {'bin/foobar.PL' => [qw(bin/foobar1 bin/foobar2)]}

In this case the program will be run multiple times using each target file.

    perl bin/foobar.PL bin/foobar1
    perl bin/foobar.PL bin/foobar2

PL files are normally run B<after> pm_to_blib and include INST_LIB and
INST_ARCH in its C<@@INC> so the just built modules can be
accessed... unless the PL file is making a module (or anything else in
PM) in which case it is run B<before> pm_to_blib and does not include
INST_LIB and INST_ARCH in its C<@@INC>.  This apparently odd behavior
is there for backwards compatibility (and its somewhat DWIM).


=item PM

Hashref of .pm files and *.pl files to be installed.  e.g.

  {'name_of_file.pm' => '$(INST_LIBDIR)/install_as.pm'}

By default this will include *.pm and *.pl and the files found in
the PMLIBDIRS directories.  Defining PM in the
Makefile.PL will override PMLIBDIRS.

=item PMLIBDIRS

Ref to array of subdirectories containing library files.  Defaults to
[ 'lib', $(BASEEXT) ]. The directories will be scanned and I<any> files
they contain will be installed in the corresponding location in the
library.  A libscan() method can be used to alter the behaviour.
Defining PM in the Makefile.PL will override PMLIBDIRS.

(Where BASEEXT is the last component of NAME.)

=item PM_FILTER

A filter program, in the traditional Unix sense (input from stdin, output
to stdout) that is passed on each .pm file during the build (in the
pm_to_blib() phase).  It is empty by default, meaning no filtering is done.

Great care is necessary when defining the command if quoting needs to be
done.  For instance, you would need to say:

  {'PM_FILTER' => 'grep -v \\"^\\#\\"'}

to remove all the leading comments on the fly during the build.  The
extra \\ are necessary, unfortunately, because this variable is interpolated
within the context of a Perl program built on the command line, and double
quotes are what is used with the -e switch to build that command line.  The
# is escaped for the Makefile, since what is going to be generated will then
be:

  PM_FILTER = grep -v \"^\#\"

Without the \\ before the #, we'd have the start of a Makefile comment,
and the macro would be incorrectly defined.

=item POLLUTE

Release 5.005 grandfathered old global symbol names by providing preprocessor
macros for extension source compatibility.  As of release 5.6, these
preprocessor definitions are not available by default.  The POLLUTE flag
specifies that the old names should still be defined:

  perl Makefile.PL POLLUTE=1

Please inform the module author if this is necessary to successfully install
a module under 5.6 or later.

=item PPM_INSTALL_EXEC

Name of the executable used to run C<PPM_INSTALL_SCRIPT> below. (e.g. perl)

=item PPM_INSTALL_SCRIPT

Name of the script that gets executed by the Perl Package Manager after
the installation of a package.

=item PREFIX

This overrides all the default install locations.  Man pages,
libraries, scripts, etc...  MakeMaker will try to make an educated
guess about where to place things under the new PREFIX based on your
Config defaults.  Failing that, it will fall back to a structure
which should be sensible for your platform.

If you specify LIB or any INSTALL* variables they will not be effected
by the PREFIX.

=item PREREQ_FATAL

Bool. If this parameter is true, failing to have the required modules
(or the right versions thereof) will be fatal. C<perl Makefile.PL>
will C<die> instead of simply informing the user of the missing dependencies.

It is I<extremely> rare to have to use C<PREREQ_FATAL>. Its use by module
authors is I<strongly discouraged> and should never be used lightly.
Module installation tools have ways of resolving umet dependencies but
to do that they need a F<Makefile>.  Using C<PREREQ_FATAL> breaks this.
That's bad.

The only situation where it is appropriate is when you have
dependencies that are indispensible to actually I<write> a
F<Makefile>. For example, MakeMaker's F<Makefile.PL> needs L<File::Spec>.
If its not available it cannot write the F<Makefile>.

Note: see L<Test::Harness> for a shortcut for stopping tests early
if you are missing dependencies and are afraid that users might
use your module with an incomplete environment.

=item PREREQ_PM

A hash of modules that are needed to run your module.  The keys are
the module names ie. Test::More, and the minimum version is the
value. If the required version number is 0 any version will do.

This will go into the C<requires> field of your F<META.yml>.

    PREREQ_PM => {
        # Require Test::More at least 0.47
        "Test::More" => "0.47",

        # Require any version of Acme::Buffy
        "Acme::Buffy" => 0,
    }

=item PREREQ_PRINT

Bool.  If this parameter is true, the prerequisites will be printed to
stdout and MakeMaker will exit.  The output format is an evalable hash
ref.

  $PREREQ_PM = {
                 'A::B' => Vers1,
                 'C::D' => Vers2,
                 ...
               };

If a distribution defines a minimal required perl version, this is
added to the output as an additional line of the form:

  $MIN_PERL_VERSION = '5.008001';

If BUILD_REQUIRES is not empty, it will be dumped as $BUILD_REQUIRES hasref.

=item PRINT_PREREQ

RedHatism for C<PREREQ_PRINT>.  The output format is different, though:

    perl(A::B)>=Vers1 perl(C::D)>=Vers2 ...

A minimal required perl version, if present, will look like this:

    perl(perl)>=5.008001

=item SITEPREFIX

Like PERLPREFIX, but only for the site install locations.

Defaults to $Config{siteprefixexp}.  Perls prior to 5.6.0 didn't have
an explicit siteprefix in the Config.  In those cases
$Config{installprefix} will be used.

Overridable by PREFIX

=item SIGN

When true, perform the generation and addition to the MANIFEST of the
SIGNATURE file in the distdir during 'make distdir', via 'cpansign
-s'.

Note that you need to install the Module::Signature module to
perform this operation.

Defaults to false.

=item SKIP

Arrayref. E.g. [qw(name1 name2)] skip (do not write) sections of the
Makefile. Caution! Do not use the SKIP attribute for the negligible
speedup. It may seriously damage the resulting Makefile. Only use it
if you really need it.

=item TYPEMAPS

Ref to array of typemap file names.  Use this when the typemaps are
in some directory other than the current directory or when they are
not named B<typemap>.  The last typemap in the list takes
precedence.  A typemap in the current directory has highest
precedence, even if it isn't listed in TYPEMAPS.  The default system
typemap has lowest precedence.

=item VENDORPREFIX

Like PERLPREFIX, but only for the vendor install locations.

Defaults to $Config{vendorprefixexp}.

Overridable by PREFIX

=item VERBINST

If true, make install will be verbose

=item VERSION

Your version number for distributing the package.  This defaults to
0.1.

=item VERSION_FROM

Instead of specifying the VERSION in the Makefile.PL you can let
MakeMaker parse a file to determine the version number. The parsing
routine requires that the file named by VERSION_FROM contains one
single line to compute the version number. The first line in the file
that contains the regular expression

    /([\$*])(([\w\:\']*)\bVERSION)\b.*\=/

will be evaluated with eval() and the value of the named variable
B<after> the eval() will be assigned to the VERSION attribute of the
MakeMaker object. The following lines will be parsed o.k.:

    $VERSION   = '1.00';
    *VERSION   = \'1.01';
    ($VERSION) = q$Revision: 1.10 $ =~ /(\d+)/g;
    $FOO::VERSION = '1.10';
    *FOO::VERSION = \'1.11';

but these will fail:

    # Bad
    my $VERSION         = '1.01';
    local $VERSION      = '1.02';
    local $FOO::VERSION = '1.30';

"Version strings" are incompatible should not be used.

    # Bad
    $VERSION = 1.2.3;
    $VERSION = v1.2.3;

L<version> objects are fine.  As of MakeMaker 6.35 version.pm will be
automatically loaded, but you must declare the dependency on version.pm.
For compatibility with older MakeMaker you should load on the same line 
as $VERSION is declared.

    # All on one line
    use version; our $VERSION = qv(1.2.3);

(Putting C<my> or C<local> on the preceding line will work o.k.)

The file named in VERSION_FROM is not added as a dependency to
Makefile. This is not really correct, but it would be a major pain
during development to have to rewrite the Makefile for any smallish
change in that file. If you want to make sure that the Makefile
contains the correct VERSION macro after any change of the file, you
would have to do something like

    depend => { Makefile => '$(VERSION_FROM)' }

See attribute C<depend> below.

=item VERSION_SYM

A sanitized VERSION with . replaced by _.  For places where . has
special meaning (some filesystems, RCS labels, etc...)

=item XS

Hashref of .xs files. MakeMaker will default this.  e.g.

  {'name_of_file.xs' => 'name_of_file.c'}

The .c files will automatically be included in the list of files
deleted by a make clean.

=item XSOPT

String of options to pass to xsubpp.  This might include C<-C++> or
C<-extern>.  Do not include typemaps here; the TYPEMAP parameter exists for
that purpose.

=item XSPROTOARG

May be set to an empty string, which is identical to C<-prototypes>, or
C<-noprototypes>. See the xsubpp documentation for details. MakeMaker
defaults to the empty string.

=item XS_VERSION

Your version number for the .xs file of this package.  This defaults
to the value of the VERSION attribute.

=back

=head2 Additional lowercase attributes

can be used to pass parameters to the methods which implement that
part of the Makefile.  Parameters are specified as a hash ref but are
passed to the method as a hash.

=over 2

=item clean

  {FILES => "*.xyz foo"}

=item depend

  {ANY_TARGET => ANY_DEPENDENCY, ...}

(ANY_TARGET must not be given a double-colon rule by MakeMaker.)

=item dist

  {TARFLAGS => 'cvfF', COMPRESS => 'gzip', SUFFIX => '.gz',
  SHAR => 'shar -m', DIST_CP => 'ln', ZIP => '/bin/zip',
  ZIPFLAGS => '-rl', DIST_DEFAULT => 'private tardist' }

If you specify COMPRESS, then SUFFIX should also be altered, as it is
needed to tell make the target file of the compression. Setting
DIST_CP to ln can be useful, if you need to preserve the timestamps on
your files. DIST_CP can take the values 'cp', which copies the file,
'ln', which links the file, and 'best' which copies symbolic links and
links the rest. Default is 'best'.

=item dynamic_lib

  {ARMAYBE => 'ar', OTHERLDFLAGS => '...', INST_DYNAMIC_DEP => '...'}

=item linkext

  {LINKTYPE => 'static', 'dynamic' or ''}

NB: Extensions that have nothing but *.pm files had to say

  {LINKTYPE => ''}

with Pre-5.0 MakeMakers. Since version 5.00 of MakeMaker such a line
can be deleted safely. MakeMaker recognizes when there's nothing to
be linked.

=item macro

  {ANY_MACRO => ANY_VALUE, ...}

=item postamble

Anything put here will be passed to MY::postamble() if you have one.

=item realclean

  {FILES => '$(INST_ARCHAUTODIR)/*.xyz'}

=item test

  {TESTS => 't/*.t'}

=item tool_autosplit

  {MAXLEN => 8}

=back

=head2 Overriding MakeMaker Methods

If you cannot achieve the desired Makefile behaviour by specifying
attributes you may define private subroutines in the Makefile.PL.
Each subroutine returns the text it wishes to have written to
the Makefile. To override a section of the Makefile you can
either say:

        sub MY::c_o { "new literal text" }

or you can edit the default by saying something like:

        package MY; # so that "SUPER" works right
        sub c_o {
            my $inherited = shift->SUPER::c_o(@@_);
            $inherited =~ s/old text/new text/;
            $inherited;
        }

If you are running experiments with embedding perl as a library into
other applications, you might find MakeMaker is not sufficient. You'd
better have a look at ExtUtils::Embed which is a collection of utilities
for embedding.

If you still need a different solution, try to develop another
subroutine that fits your needs and submit the diffs to
C<makemaker@@perl.org>

For a complete description of all MakeMaker methods see
L<ExtUtils::MM_Unix>.

Here is a simple example of how to add a new target to the generated
Makefile:

    sub MY::postamble {
        return <<'MAKE_FRAG';
    $(MYEXTLIB): sdbm/Makefile
            cd sdbm && $(MAKE) all

    MAKE_FRAG
    }

=head2 The End Of Cargo Cult Programming

WriteMakefile() now does some basic sanity checks on its parameters to
protect against typos and malformatted values.  This means some things
which happened to work in the past will now throw warnings and
possibly produce internal errors.

Some of the most common mistakes:

=over 2

=item C<< MAN3PODS => ' ' >>

This is commonly used to suppress the creation of man pages.  MAN3PODS
takes a hash ref not a string, but the above worked by accident in old
versions of MakeMaker.

The correct code is C<< MAN3PODS => { } >>.

=back


=head2 Hintsfile support

MakeMaker.pm uses the architecture specific information from
Config.pm. In addition it evaluates architecture specific hints files
in a C<hints/> directory. The hints files are expected to be named
like their counterparts in C<PERL_SRC/hints>, but with an C<.pl> file
name extension (eg. C<next_3_2.pl>). They are simply C<eval>ed by
MakeMaker within the WriteMakefile() subroutine, and can be used to
execute commands as well as to include special variables. The rules
which hintsfile is chosen are the same as in Configure.

The hintsfile is eval()ed immediately after the arguments given to
WriteMakefile are stuffed into a hash reference $self but before this
reference becomes blessed. So if you want to do the equivalent to
override or create an attribute you would say something like

    $self->{LIBS} = ['-ldbm -lucb -lc'];

=head2 Distribution Support

For authors of extensions MakeMaker provides several Makefile
targets. Most of the support comes from the ExtUtils::Manifest module,
where additional documentation can be found.

=over 4

=item    make distcheck

reports which files are below the build directory but not in the
MANIFEST file and vice versa. (See ExtUtils::Manifest::fullcheck() for
details)

=item    make skipcheck

reports which files are skipped due to the entries in the
C<MANIFEST.SKIP> file (See ExtUtils::Manifest::skipcheck() for
details)

=item    make distclean

does a realclean first and then the distcheck. Note that this is not
needed to build a new distribution as long as you are sure that the
MANIFEST file is ok.

=item    make manifest

rewrites the MANIFEST file, adding all remaining files found (See
ExtUtils::Manifest::mkmanifest() for details)

=item    make distdir

Copies all the files that are in the MANIFEST file to a newly created
directory with the name C<$(DISTNAME)-$(VERSION)>. If that directory
exists, it will be removed first.

Additionally, it will create a META.yml module meta-data file in the
distdir and add this to the distdir's MANIFEST.  You can shut this
behavior off with the NO_META flag.

=item   make disttest

Makes a distdir first, and runs a C<perl Makefile.PL>, a make, and
a make test in that directory.

=item    make tardist

First does a distdir. Then a command $(PREOP) which defaults to a null
command, followed by $(TO_UNIX), which defaults to a null command under
UNIX, and will convert files in distribution directory to UNIX format
otherwise. Next it runs C<tar> on that directory into a tarfile and
deletes the directory. Finishes with a command $(POSTOP) which
defaults to a null command.

=item    make dist

Defaults to $(DIST_DEFAULT) which in turn defaults to tardist.

=item    make uutardist

Runs a tardist first and uuencodes the tarfile.

=item    make shdist

First does a distdir. Then a command $(PREOP) which defaults to a null
command. Next it runs C<shar> on that directory into a sharfile and
deletes the intermediate directory again. Finishes with a command
$(POSTOP) which defaults to a null command.  Note: For shdist to work
properly a C<shar> program that can handle directories is mandatory.

=item    make zipdist

First does a distdir. Then a command $(PREOP) which defaults to a null
command. Runs C<$(ZIP) $(ZIPFLAGS)> on that directory into a
zipfile. Then deletes that directory. Finishes with a command
$(POSTOP) which defaults to a null command.

=item    make ci

Does a $(CI) and a $(RCS_LABEL) on all files in the MANIFEST file.

=back

Customization of the dist targets can be done by specifying a hash
reference to the dist attribute of the WriteMakefile call. The
following parameters are recognized:

    CI           ('ci -u')
    COMPRESS     ('gzip --best')
    POSTOP       ('@@ :')
    PREOP        ('@@ :')
    TO_UNIX      (depends on the system)
    RCS_LABEL    ('rcs -q -Nv$(VERSION_SYM):')
    SHAR         ('shar')
    SUFFIX       ('.gz')
    TAR          ('tar')
    TARFLAGS     ('cvf')
    ZIP          ('zip')
    ZIPFLAGS     ('-r')

An example:

    WriteMakefile(
        ...other options...
        dist => {
            COMPRESS => "bzip2",
            SUFFIX   => ".bz2"
        }
    );


=head2 Module Meta-Data

Long plaguing users of MakeMaker based modules has been the problem of
getting basic information about the module out of the sources
I<without> running the F<Makefile.PL> and doing a bunch of messy
heuristics on the resulting F<Makefile>.  To this end a simple module
meta-data file has been introduced, F<META.yml>.

F<META.yml> is a YAML document (see http://www.yaml.org) containing
basic information about the module (name, version, prerequisites...)
in an easy to read format.  The format is developed and defined by the
Module::Build developers (see 
http://module-build.sourceforge.net/META-spec.html)

MakeMaker will automatically generate a F<META.yml> file for you and
add it to your F<MANIFEST> as part of the 'distdir' target (and thus
the 'dist' target).  This is intended to seamlessly and rapidly
populate CPAN with module meta-data.  If you wish to shut this feature
off, set the C<NO_META> C<WriteMakefile()> flag to true.


=head2 Disabling an extension

If some events detected in F<Makefile.PL> imply that there is no way
to create the Module, but this is a normal state of things, then you
can create a F<Makefile> which does nothing, but succeeds on all the
"usual" build targets.  To do so, use

    use ExtUtils::MakeMaker qw(WriteEmptyMakefile);
    WriteEmptyMakefile();

instead of WriteMakefile().

This may be useful if other modules expect this module to be I<built>
OK, as opposed to I<work> OK (say, this system-dependent module builds
in a subdirectory of some other distribution, or is listed as a
dependency in a CPAN::Bundle, but the functionality is supported by
different means on the current architecture).

=head2 Other Handy Functions

=over 4

=item prompt

    my $value = prompt($message);
    my $value = prompt($message, $default);

The C<prompt()> function provides an easy way to request user input
used to write a makefile.  It displays the $message as a prompt for
input.  If a $default is provided it will be used as a default.  The
function returns the $value selected by the user.

If C<prompt()> detects that it is not running interactively and there
is nothing on STDIN or if the PERL_MM_USE_DEFAULT environment variable
is set to true, the $default will be used without prompting.  This
prevents automated processes from blocking on user input. 

If no $default is provided an empty string will be used instead.

=back


=head1 ENVIRONMENT

=over 4

=item PERL_MM_OPT

Command line options used by C<MakeMaker-E<gt>new()>, and thus by
C<WriteMakefile()>.  The string is split on whitespace, and the result
is processed before any actual command line arguments are processed.

=item PERL_MM_USE_DEFAULT

If set to a true value then MakeMaker's prompt function will
always return the default without waiting for user input.

=item PERL_CORE

Same as the PERL_CORE parameter.  The parameter overrides this.

=back

=head1 SEE ALSO

L<Module::Build> is a pure-Perl alternative to MakeMaker which does
not rely on make or any other external utility.  It is easier to
extend to suit your needs.

L<Module::Install> is a wrapper around MakeMaker which adds features
not normally available.

L<ExtUtils::ModuleMaker> and L<Module::Starter> are both modules to
help you setup your distribution.

=head1 AUTHORS

Andy Dougherty C<doughera@@lafayette.edu>, Andreas KE<ouml>nig
C<andreas.koenig@@mind.de>, Tim Bunce C<timb@@cpan.org>.  VMS
support by Charles Bailey C<bailey@@newman.upenn.edu>.  OS/2 support
by Ilya Zakharevich C<ilya@@math.ohio-state.edu>.

Currently maintained by Michael G Schwern C<schwern@@pobox.com>

Send patches and ideas to C<makemaker@@perl.org>.

Send bug reports via http://rt.cpan.org/.  Please send your
generated Makefile along with your report.

For more up-to-date information, see L<http://www.makemaker.org>.

=head1 LICENSE

This program is free software; you can redistribute it and/or 
modify it under the same terms as Perl itself.

See L<http://www.perl.com/perl/misc/Artistic.html>


=cut
@


1.10
log
@Merge in perl 5.10.1
@
text
@d1 1
a1 1
# $Id$
d23 1
a23 1
# Emulate something resembling CVS $Revision$
d2355 1
a2355 1
    ($VERSION) = q$Revision$ =~ /(\d+)/g;
@


1.9
log
@fix conflicts and merge in local changes to perl 5.10.0
@
text
@d1 1
a1 1
# $Id: /mirror/svn.schwern.org/CPAN/ExtUtils-MakeMaker/trunk/lib/ExtUtils/MakeMaker.pm 41145 2007-12-08T01:01:11.051959Z schwern  $
d4 3
a6 1
BEGIN {require 5.005_03;}
d13 20
a32 20
use vars qw(
            @@ISA @@EXPORT @@EXPORT_OK
            $VERSION $Verbose %Config
            @@Prepend_parent @@Parent
            %Recognized_Att_Keys @@Get_from_Config @@MM_Sections @@Overridable
            $Filename
           );

# Has to be on its own line with no $ after it to avoid being noticed by
# the version control system
use vars qw($Revision);
use strict;

$VERSION = '6.42';
($Revision) = q$Revision: 41145 $ =~ /Revision:\s+(\S+)/;

@@ISA = qw(Exporter);
@@EXPORT = qw(&WriteMakefile &writeMakefile $Verbose &prompt);
@@EXPORT_OK = qw($VERSION &neatvalue &mkbootstrap &mksymlists
                &WriteEmptyMakefile);
a38 4
# Our filename for diagnostic and debugging purposes.  More reliable
# than %INC (think caseless filesystems)
$Filename = __FILE__;

d46 1
a46 1
                       # This will go when Embed is it's own CPAN module.
d84 2
d91 2
d127 1
a127 1
        unless( grep { $given eq $_ || ($_ && eval{$val->isa($_)}) } @@sigs ) {
d138 13
d161 1
a161 1
sub prompt ($;$) {
d237 3
a239 2
    C CAPI CCFLAGS CONFIG CONFIGURE DEFINE DIR DISTNAME DL_FUNCS DL_VARS
    EXCLUDE_EXT EXE_FILES EXTRA_META FIRST_MAKEFILE
d258 2
a259 1
    LINKTYPE MAKE MAKEAPERL MAKEFILE MAKEFILE_OLD MAN1PODS MAN3PODS MAP_TARGET 
d262 1
a262 1
    PERL_SRC PERM_RW PERM_RWX
d312 1
a312 1
 libscan makeaperl needs_linking perm_rw perm_rwx
d393 9
d403 1
a403 3
        require Data::Dumper;
        print Data::Dumper->Dump([$self->{PREREQ_PM}], [qw(PREREQ_PM)]);
        exit 0;
d408 1
a408 3
        print join(" ", map { "perl($_)>=$self->{PREREQ_PM}->{$_} " } 
                        sort keys %{$self->{PREREQ_PM}}), "\n";
        exit 0;
d416 7
a422 1
    $self = {} unless (defined $self);
d424 26
a449 1
    check_hints($self);
d455 8
a462 8
    foreach my $prereq (sort keys %{$self->{PREREQ_PM}}) {
        # 5.8.0 has a bug with require Foo::Bar alone in an eval, so an
        # extra statement is a workaround.
        my $file = "$prereq.pm";
        $file =~ s{::}{/}g;
        eval { require $file };

        my $pr_version = $prereq->VERSION || 0;
d467 1
a467 1
        if ($@@) {
d469 1
a469 1
              $prereq, $self->{PREREQ_PM}{$prereq} 
d471 1
d473 2
a474 1
        } elsif ($pr_version < $self->{PREREQ_PM}->{$prereq} ){
d476 1
a476 2
              $prereq, $self->{PREREQ_PM}{$prereq}, 
                ($pr_version || 'unknown version') 
d478 2
a479 2
            $unsatisfied{$prereq} = $self->{PREREQ_PM}->{$prereq} ? 
              $self->{PREREQ_PM}->{$prereq} : 'unknown version' ;
d482 2
a483 2
    
     if (%unsatisfied && $self->{PREREQ_FATAL}){
a510 1
        no strict 'refs';
d516 2
d523 1
a523 2
        my $key;
        for $key (@@Prepend_parent) {
d585 4
a588 24
    if (! $self->{PERL_SRC} ) {
        require VMS::Filespec if $Is_VMS;
        my($pthinks) = $self->canonpath($INC{'Config.pm'});
        my($cthinks) = $self->catfile($Config{'archlibexp'},'Config.pm');
        $pthinks = VMS::Filespec::vmsify($pthinks) if $Is_VMS;
        if ($pthinks ne $cthinks &&
            !($Is_Win32 and lc($pthinks) eq lc($cthinks))) {
            print "Have $pthinks expected $cthinks\n";
            if ($Is_Win32) {
                $pthinks =~ s![/\\]Config\.pm$!!i; $pthinks =~ s!.*[/\\]!!;
            }
            else {
                $pthinks =~ s!/Config\.pm$!!; $pthinks =~ s!.*/!!;
            }
            print STDOUT <<END unless $self->{UNINSTALLED_PERL};
Your perl and your Config.pm seem to have different ideas about the 
architecture they are running on.
Perl thinks: [$pthinks]
Config says: [$Config{archname}]
This may or may not cause problems. Please check your installation of perl 
if you have problems building this extension.
END
        }
    }
a607 1
#   MakeMaker Parameters:
d610 1
a610 9
    foreach my $key (sort keys %initial_att){
        next if $key eq 'ARGS';

        my($v) = neatvalue($initial_att{$key});
        $v =~ s/(CODE|HASH|ARRAY|SCALAR)\([\dxa-f]+\)/$1\(...\)/;
        $v =~ tr/\n/ /s;
        push @@{$self->{RESULT}}, "#     $key => $v";
    }
    undef %initial_att;        # free memory
d634 1
a634 2
    my (%skip,$skip);
    for $skip (@@{$self->{SKIP} || []}) {
d689 2
a690 2
    open MF, '>'.$new or die "open $new for write: $!";
    print MF <<'EOP';
d702 1
a702 1
    close MF or die "close $new for write: $!";
d705 64
d885 1
a885 1
    no strict 'vars';
a903 2
    no strict 'refs';
    my($symtab) = \%{"${from}::"};
d926 3
a928 1
        *{"${to}::$method"} = \&{"${from}::$method"};
d930 13
a942 11
        # delete would do, if we were sure, nobody ever called
        # MY->makeaperl directly

        # delete $symtab->{$method};

        # If we delete a method, then it will be undefined and cannot
        # be called.  But as long as we have Makefile.PLs that rely on
        # %MY:: being intact, we have to fill the hole with an
        # inheriting method:

        eval "package MY; sub $method { shift->SUPER::$method(\@@_); }";
a990 2
    my($chunk);
    local *FH;
d996 2
a997 1
    open(FH,">MakeMaker.tmp") or die "Unable to open MakeMaker.tmp: $!";
d999 2
a1000 2
    for $chunk (@@{$self->{RESULT}}) {
        print FH "$chunk\n";
d1003 1
a1003 1
    close FH;
d1481 8
d1527 11
d1556 2
a1557 2
Ref to array of subdirectories containing Makefile.PLs e.g. [ 'sdbm'
] in ext/SDBM_File
d1777 1
a1777 1
directory if INSTALLDIRS is set to is set to vendor.
d1867 1
a1867 1
See L<Module::Build::Authoring> for the list of options.
d1911 9
d1928 2
d1935 19
d2096 4
a2102 1
See also L<MM_Unix/perm_rw>.
a2106 1
See also L<MM_Unix/perm_rwx>.
d2242 13
a2254 4
Hashref: Names of modules that need to be available to run this
extension (e.g. Fcntl for SDBM_File) are the keys of the hash and the
desired version is the value. If the required version number is 0, we
only check if any version is installed already.
d2262 12
a2273 5
$PREREQ_PM = {
               'A::B' => Vers1,
               'C::D' => Vers2,
               ...
             };
d2281 4
d2353 3
a2355 3
    $VERSION = '1.00';
    *VERSION = \'1.01';
    ($VERSION) = q$Revision: 41145 $ =~ /(\d+)/g;
a2357 1
    our $VERSION = 1.2.3;       # new for perl5.6.0
d2361 3
a2363 2
    my $VERSION = '1.01';
    local $VERSION = '1.02';
d2366 1
a2366 1
L<version> will be loaded, if available, so this will work.
d2368 8
a2375 5
    our $VERSION = qv(1.2.3);   # version.pm will be loaded if available

Its up to you to declare a dependency on C<version>.  Also note that this
feature was introduced in MakeMaker 6.35.  Earlier versions of MakeMaker
require this:
d2680 7
a2686 1
    WriteMakefile( 'dist' => { COMPRESS=>"bzip2", SUFFIX=>".bz2" })
@


1.8
log
@merge in perl 5.8.8
@
text
@d1 1
a1 1
# $Id: /local/schwern.org/CPAN/ExtUtils-MakeMaker/trunk/lib/ExtUtils/MakeMaker.pm 4535 2005-05-20T23:08:34.937906Z schwern  $
d13 1
a13 1
            $VERSION $Verbose %Config 
d15 1
a15 1
            %Recognized_Att_Keys @@Get_from_Config @@MM_Sections @@Overridable 
d24 2
a25 2
$VERSION = '6.30';
($Revision = q$Revision: 4535 $) =~ /Revision:\s+(\S+)/;
d29 2
a30 1
@@EXPORT_OK = qw($VERSION &neatvalue &mkbootstrap &mksymlists);
d71 24
a94 22
 C                  => 'array',
 CONFIG             => 'array',
 CONFIGURE          => 'code',
 DIR                => 'array',
 DL_FUNCS           => 'hash',
 DL_VARS            => 'array',
 EXCLUDE_EXT        => 'array',
 EXE_FILES          => 'array',
 FUNCLIST           => 'array',
 H                  => 'array',
 IMPORTS            => 'hash',
 INCLUDE_EXT        => 'array',
 LIBS               => ['array',''],
 MAN1PODS           => 'hash',
 MAN3PODS           => 'hash',
 PL_FILES           => 'hash',
 PM                 => 'hash',
 PMLIBDIRS          => 'array',
 PREREQ_PM          => 'hash',
 SKIP               => 'array',
 TYPEMAPS           => 'array',
 XS                 => 'hash',
d97 10
a106 10
 clean      => 'hash',
 depend     => 'hash',
 dist       => 'hash',
 dynamic_lib=> 'hash',
 linkext    => 'hash',
 macro      => 'hash',
 postamble  => 'hash',
 realclean  => 'hash',
 test       => 'hash',
 tool_autosplit => 'hash',
d124 5
a128 7
        my $given = lc ref $val;
        unless( grep $given eq $_, @@sigs ) {
            my $takes = join " or ", map { $_ ne '' ? "$_ reference"
                                                    : "string/number"
                                         } @@sigs;
            my $has   = $given ne '' ? "$given reference"
                                     : "string/number";
d135 11
d223 1
a223 1
    EXCLUDE_EXT EXE_FILES FIRST_MAKEFILE
d229 1
a229 1
    DESTDIR PREFIX INSTALLBASE
d237 1
a237 1
    INSTALLSCRIPT 
d241 2
a242 2
    INC INCLUDE_EXT LDFROM LIB LIBPERL_A LIBS
    LINKTYPE MAKEAPERL MAKEFILE MAKEFILE_OLD MAN1PODS MAN3PODS MAP_TARGET 
d246 1
a246 1
    PL_FILES PM PM_FILTER PMLIBDIRS POLLUTE PPM_INSTALL_EXEC
d296 4
a299 1
 subdir_x test_via_harness test_via_script init_PERL
d318 3
a320 3
           ar cc cccdlflags ccdlflags dlext dlsrc ld lddlflags ldflags libc
           lib_ext obj_ext osname osvers ranlib sitelibexp sitearchexp so
           exe_ext full_ar
d428 10
a437 5
    if (%unsatisfied && $self->{PREREQ_FATAL}){
        my $failedprereqs = join ', ', map {"$_ $unsatisfied{$_}"} 
                            keys %unsatisfied;
        die qq{MakeMaker FATAL: prerequisites not found ($failedprereqs)\n
               Please install these modules first and rerun 'perl Makefile.PL'.\n};
d439 1
a439 1

d495 1
a495 1
            foreach my $opt (qw(POLLUTE PERL_CORE)) {
d510 1
d515 1
d523 2
d529 1
d640 3
a642 1
            push @@{$self->{RESULT}}, $self->nicetext($self->$method( %a ));
d652 1
a652 1
    Carp::croak "WriteEmptyMakefile: Need even number of args" if @@_ % 2;
d656 5
a660 7
    if (-f $self->{MAKEFILE_OLD}) {
      _unlink($self->{MAKEFILE_OLD}) or 
        warn "unlink $self->{MAKEFILE_OLD}: $!";
    }
    if ( -f $self->{MAKEFILE} ) {
        _rename($self->{MAKEFILE}, $self->{MAKEFILE_OLD}) or
          warn "rename $self->{MAKEFILE} => $self->{MAKEFILE_OLD}: $!"
d662 4
a665 1
    open MF, '>'.$self->{MAKEFILE} or die "open $self->{MAKEFILE} for write: $!";
d667 1
a667 1
all:
d669 1
a669 1
clean:
d671 1
a671 1
install:
d673 1
a673 1
makemakerdflt:
d675 1
a675 1
test:
d678 1
a678 1
    close MF or die "close $self->{MAKEFILE} for write: $!";
a902 1
    print STDOUT "Writing $self->{MAKEFILE} for $self->{NAME}\n";
d904 4
a907 1
    unlink($self->{MAKEFILE}, "MakeMaker.tmp", $Is_VMS ? 'Descrip.MMS' : '');
a914 1
    my($finalname) = $self->{MAKEFILE};
d1054 1
a1054 1
  perl Makefile.PL PREFIX=~
d1116 1
a1116 1
  INST_SCRIPT    INSTALLSCRIPT   INSTALLSCRIPT       INSTALLSCRIPT
d1142 30
d1175 1
a1175 2
go. The quickest way to install a module in a non-standard place might
be
d1177 2
a1178 1
    perl Makefile.PL PREFIX=~
d1182 4
a1185 1
~/man and ~/lib).
d1610 1
a1610 1
directory.
d1637 5
d1666 5
d1754 9
d1769 14
d2035 1
a2035 1
to remove all the leading coments on the fly during the build.  The
d2082 2
a2083 5
(or the right versions thereof) will be fatal. perl Makefile.PL will die
with the proper message.

Note: see L<Test::Harness> for a shortcut for stopping tests early if
you are missing dependencies.
d2085 14
a2098 4
Do I<not> use this parameter for simple requirements, which could be resolved
at a later time, e.g. after an unsuccessful B<make test> of your module.

It is I<extremely> rare to have to use C<PREREQ_FATAL> at all!
d2195 1
a2195 1
    $VERSION = sprintf "%d.%03d", q$Revision: 4535 $ =~ /(\d+)/g;
d2198 1
a2198 1
    our $VERSION = 1.2.3;       # new for perl5.6.0 
d2206 11
d2277 1
a2277 1
  {ANY_TARGET => ANY_DEPENDECY, ...}
d2387 1
a2387 1
This is commonly used to supress the creation of man pages.  MAN3PODS
d2452 1
a2452 1
distdir and add this to the distdir's MANFIEST.  You can shut this
d2463 1
a2463 1
command, followed by $(TOUNIX), which defaults to a null command under
d2548 2
a2549 1
   ExtUtils::MakeMaker::WriteEmptyMakefile();
d2606 9
a2614 2
ExtUtils::MM_Unix, ExtUtils::Manifest ExtUtils::Install,
ExtUtils::Embed
@


1.7
log
@Resolve conflicts for perl 5.8.2, remove old files, and add OpenBSD-specific scaffolding
@
text
@d1 1
a5 3
$VERSION = '6.17';
($Revision) = q$Revision: 1.133 $ =~ /Revision:\s+(\S+)/;

d7 1
a7 1
use Config;
d13 1
a13 1
            $Revision $VERSION $Verbose %Config 
d18 4
d24 3
d175 2
a176 1
        $self->eval_in_x($abs);
d179 1
d217 1
a217 1
    DESTDIR PREFIX
d236 1
a236 1
    SKIP TYPEMAPS VERSION VERSION_FROM XS XSOPT XSPROTOARG
d270 1
a270 1
 top_targets linkext dlsyms dynamic dynamic_bs
d274 2
a275 2
 metafile metafile_addtomanifest
 dist_basics dist_core distdir dist_test dist_ci
d283 1
a283 1
 dir_target libscan makeaperl needs_linking perm_rw perm_rwx
d390 3
a392 1
        eval "require $prereq; 0";
d1025 1
a1025 1
  perl Makefile.PL PREFIX=/tmp/myperl5
d1103 9
d1376 2
a1377 2
would normally go into /usr/local/lib/perl you could set DESTDIR=/tmp/
and installation would go into /tmp/usr/local/lib/perl.
d1382 1
a1382 1
slash on your DESTDIR.  "/tmp/" not "/tmp".
d1875 32
a1906 10
Ref to hash of files to be processed as perl programs. MakeMaker
will default to any found *.PL file (except Makefile.PL) being keys
and the basename of the file being the value. E.g.

  {'foobar.PL' => 'foobar'}

The *.PL files are expected to produce output to the target files
themselves. If multiple files can be generated from the same *.PL
file then the value in the hash can be a reference to an array of
target file names. E.g.
a1907 1
  {'foobar.PL' => ['foobar1','foobar2']}
d2033 11
d2093 1
a2093 1
    $VERSION = sprintf "%d.%03d", q$Revision: 1.133 $ =~ /(\d+)/g;
d2245 1
a2245 1
F<makemaker@@perl.org>
d2272 1
a2272 1
=item C<<MAN3PODS => ' '>>
d2278 1
a2278 1
The correct code is C<<MAN3PODS => { }>>.
d2338 3
a2340 3
Additionally, it will create a META.yml module meta-data file and add
this to your MANFIEST.  You can shut this behavior off with the NO_META
flag.
d2484 4
d2497 4
a2500 4
Andy Dougherty <F<doughera@@lafayette.edu>>, Andreas KE<ouml>nig
<F<andreas.koenig@@mind.de>>, Tim Bunce <F<timb@@cpan.org>>.  VMS
support by Charles Bailey <F<bailey@@newman.upenn.edu>>.  OS/2 support
by Ilya Zakharevich <F<ilya@@math.ohio-state.edu>>.
d2502 1
a2502 1
Currently maintained by Michael G Schwern <F<schwern@@pobox.com>>
d2504 1
a2504 1
Send patches and ideas to <F<makemaker@@perl.org>>.
d2509 1
a2509 1
For more up-to-date information, see http://www.makemaker.org.
d2516 1
a2516 1
See F<http://www.perl.com/perl/misc/Artistic.html>
@


1.6
log
@Resolve conflicts, remove old files, merge local changes
@
text
@d5 2
a6 4
$VERSION = "6.03";
$Version_OK = "5.49";   # Makefiles older than $Version_OK will die
                        # (Will be checked from MakeMaker version 4.13 onwards)
($Revision = substr(q$Revision: 1.63 $, 10)) =~ s/\s+$//;
d11 1
d15 2
a16 2
            $ISA_TTY $Revision $VERSION $Verbose $Version_OK %Config 
            %Keep_after_flush %MM_Sections @@Prepend_parent
d18 1
a18 1
            @@Parent $PACKNAME
d31 4
d63 2
a64 6
my %Att_Sigs =
(
 ABSTRACT           => '',
 ABSTRACT_FROM      => '',
 AUTHOR             => '',
 BINARY_LOCATION    => '',
a65 1
 CCFLAGS            => '',
a67 1
 DEFINE             => '',
a68 1
 DISTNAME           => '',
a72 4
 FIRST_MAKEFILE     => '',
 FULLPERL           => '',
 FULLPERLRUN        => '',
 FULLPERLRUNINST    => '',
a75 1
 INC                => '',
a76 28
 INSTALLARCHLIB     => '',
 INSTALLBIN         => '',
 INSTALLDIRS        => '',
 INSTALLMAN1DIR     => '',
 INSTALLMAN3DIR     => '',
 INSTALLPRIVLIB     => '',
 INSTALLSCRIPT      => '',
 INSTALLSITEARCH    => '',
 INSTALLSITEBIN     => '',
 INSTALLSITELIB     => '',
 INSTALLSITEMAN1DIR => '',
 INSTALLSITEMAN3DIR => '',
 INSTALLVENDORARCH  => '',
 INSTALLVENDORBIN   => '',
 INSTALLVENDORLIB   => '',
 INSTALLVENDORMAN1DIR   => '',
 INSTALLVENDORMAN3DIR   => '',
 INST_ARCHLIB       => '',
 INST_BIN           => '',
 INST_LIB           => '',
 INST_MAN1DIR       => '',
 INST_MAN3DIR       => '',
 INST_SCRIPT        => '',
 _KEEP_AFTER_FLUSH  => '',
 LDDLFLAGS          => '',
 LDFROM             => '',
 LIB                => '',
 LIBPERL_A          => '',
a77 3
 LINKTYPE           => '',
 MAKEAPERL          => '',
 MAKEFILE           => '',
a79 20
 MAP_TARGET         => '',
 MYEXTLIB           => '',
 NAME               => '',
 NEEDS_LINKING      => '',
 NOECHO             => '',
 NORECURS           => '',
 NO_VC              => '',
 OBJECT             => '',
 OPTIMIZE           => '',
 PERL               => '',
 PERL_CORE          => '',
 PERLMAINCC         => '',
 PERL_ARCHLIB       => '',
 PERL_LIB           => '',
 PERL_MALLOC_OK     => '',
 PERLRUN            => '',
 PERLRUNINST        => '',
 PERL_SRC           => '',
 PERM_RW            => '',
 PERM_RWX           => '',
a82 6
 PM_FILTER          => '',
 POLLUTE            => '',
 PPM_INSTALL_EXEC   => '',
 PPM_INSTALL_SCRIPT => '',
 PREFIX             => '',
 PREREQ_FATAL       => '',
a83 3
 PREREQ_PRINT       => '',
 PRINT_PREREQ       => '',
 SITEPREFIX         => '',
a85 4
 VENDORPREFIX       => '',
 VERBINST           => '',
 VERSION            => '',
 VERSION_FROM       => '',
d87 1
a87 3
 XSOPT              => '',
 XSPROTOARG         => '',
 XS_VERSION         => '',
d95 1
d101 3
d130 1
a130 2
    my($mess,$def)=@@_;
    $ISA_TTY = -t STDIN && (-t STDOUT || !(-f STDOUT || -c STDOUT)) ;   # Pipe?
d133 3
d138 1
a138 1
    my $ans;
d142 6
a147 1
    if ($ISA_TTY && !$ENV{PERL_MM_USE_DEFAULT}) {
d156 1
a156 3
    else {
        print "$def\n";
    }
d193 4
a199 3
    # package name for the classes into which the first object will be blessed
    $PACKNAME = "PACK000";

d204 1
a204 1
    EXCLUDE_EXT EXE_FILES FIRST_MAKEFILE 
d207 1
d210 2
a211 1
    PREFIX          SITEPREFIX      VENDORPREFIX
d221 1
d223 3
a225 4
    LINKTYPE MAKEAPERL MAKEFILE MAN1PODS MAN3PODS MAP_TARGET MYEXTLIB
    PERL_MALLOC_OK
    NAME NEEDS_LINKING NOECHO NORECURS NO_VC OBJECT OPTIMIZE PERL PERLMAINCC
    PERLRUN PERLRUNINST PERL_CORE
d232 1
d251 6
a256 2
 post_initialize const_config constants tool_autosplit tool_xsubpp
 tools_other dist macro depend cflags const_loadlibs const_cccmd
d261 3
a263 1
 c_o xs_c xs_o top_targets linkext dlsyms dynamic dynamic_bs
d266 3
a268 1
 clean realclean dist_basics dist_core dist_dir dist_test dist_ci
d301 3
a322 5

    my @@keep = qw/
        NEEDS_LINKING HAS_LINK_CODE
        /;
    @@Keep_after_flush{@@keep} = (1) x @@keep;
d349 5
d357 1
d362 2
a363 1
        print join(" ", map { "perl($_)>=$self->{PREREQ_PM}->{$_} " } sort keys %{$self->{PREREQ_PM}}), "\n";
d381 3
a383 1
        eval "require $prereq";
d387 3
d442 5
d448 2
a449 1
            unless ($^O eq 'VMS' && $key =~ /PERL$/) {
d485 11
a495 1
    $self->init_main();
a521 1
    $self->init_dirscan();
d523 1
d544 2
d560 1
d582 1
a582 1
        for (qw/install dist dist_basics dist_core dist_dir dist_test dist_ci/) {
d594 4
d606 1
a606 1
            push @@{$self->{RESULT}}, $self->nicetext($self->$section( %a ));
d620 8
a627 7
    if (-f "$self->{MAKEFILE}.old") {
      chmod 0666, "$self->{MAKEFILE}.old";
      unlink "$self->{MAKEFILE}.old" or warn "unlink $self->{MAKEFILE}.old: $!";
    }
    rename $self->{MAKEFILE}, "$self->{MAKEFILE}.old"
      or warn "rename $self->{MAKEFILE} $self->{MAKEFILE}.old: $!"
        if -f $self->{MAKEFILE};
a663 1
            help(),exit 1 if m/^help$/;
d675 3
a677 1
        $self->{uc($name)} = $value;
d722 1
d734 5
a738 1
    return unless -d "hints";
d748 1
a748 1
        last if -f "hints/$hint.pl";      # found
d752 1
a752 1
    my $hint_file = "hints/$hint.pl";
d764 1
a764 1
    local $@@;
d766 8
a773 3
    my $ret = do "./$hint_file";
    unless( defined $ret ) {
        print STDERR $@@ if $@@;
d877 2
a878 1
    rename("MakeMaker.tmp", $finalname);
d881 2
d885 1
a885 1
            delete $self->{$_} unless $Keep_after_flush{$_};
d892 17
d975 1
a975 1
ExtUtils::MakeMaker - create an extension Makefile
d1000 1
a1000 18
The short answer is: Don't.

        Always begin with h2xs.
        Always begin with h2xs!
        ALWAYS BEGIN WITH H2XS!

even if you're not building around a header file, and even if you
don't have an XS component.

Run h2xs(1) before you start thinking about writing a module. For so
called pm-only modules that consist of C<*.pm> files only, h2xs has
the C<-X> switch. This will generate dummy files of all kinds that are
useful for the module developer.

The medium answer is:

    use ExtUtils::MakeMaker;
    WriteMakefile( NAME => "Foo::Bar" );
d1074 1
a1074 1
                 PREFIX          SITEPREFIX          VENDORPREFIX
d1354 12
d1373 18
a1390 2
Your name for distributing the package (by tar file). This defaults to
NAME above.
d1432 5
d1439 7
a1445 3
The name of the Makefile to be produced. Defaults to the contents of
MAKEFILE, but can be overridden. This is used for the second Makefile
that will be produced for the MAP_TARGET.
d1610 6
d1676 1
a1676 1
=item MAKEFILE
d1678 4
a1681 1
The name of the Makefile to be produced.
d1723 6
a1728 3
Defaults to C<@@>. By setting it to an empty string you can generate a
Makefile that echos all commands. Mainly used in debugging MakeMaker
itself.
d1734 7
d1819 10
a1944 2
Defaults to $Config{installprefixexp}.

d1969 2
a1970 1
stdout and MakeMaker will exit.  The output format is
d1986 1
a1986 1
Like PREFIX, but only for the site install locations.
d1988 5
a1992 3
Defaults to PREFIX (if set) or $Config{siteprefixexp}.  Perls prior to
5.6.0 didn't have an explicit siteprefix in the Config.  In those
cases $Config{installprefix} will be used.
d2012 3
a2014 1
Like PREFIX, but only for the vendor install locations.
d2016 1
a2016 1
Defaults to PREFIX (if set) or $Config{vendorprefixexp}
d2043 1
a2043 1
    ( $VERSION ) = '$Revision: 1.63 $ ' =~ /\$Revision:\s+([^\s]+)/;
d2067 5
d2103 2
a2104 1
part of the Makefile.
d2151 4
d2288 4
d2356 22
d2395 24
d2421 1
a2421 1
=over 8
d2456 8
@


1.5
log
@merge in perl 5.6.1 with our local changes
@
text
@a0 2
BEGIN {require 5.002;} # MakeMaker 5.17 was the last MakeMaker that was compatible with perl5.001m

d3 1
a3 5
$VERSION = "5.45";
$Version_OK = "5.17";	# Makefiles older than $Version_OK will die
			# (Will be checked from MakeMaker version 4.13 onwards)
($Revision = substr(q$Revision: 1.222 $, 10)) =~ s/\s+$//;

d5 4
a12 1
#use FileHandle ();
d15 7
a22 17
	    @@ISA @@EXPORT @@EXPORT_OK $AUTOLOAD
	    $ISA_TTY $Is_Mac $Is_OS2 $Is_VMS $Revision
	    $VERSION $Verbose $Version_OK %Config %Keep_after_flush
	    %MM_Sections %Prepend_dot_dot %Recognized_Att_Keys
	    @@Get_from_Config @@MM_Sections @@Overridable @@Parent

	   );
# use strict;

# &DynaLoader::mod2fname should be available to miniperl, thus 
# should be a pseudo-builtin (cmp. os2.c).
#eval {require DynaLoader;};

#
# Set up the inheritance before we pull in the MM_* packages, because they
# import variables and functions from here
#
d25 6
a30 1
@@EXPORT_OK = qw($VERSION &Version_check &neatvalue &mkbootstrap &mksymlists);
d32 8
a39 8
#
# Dummy package MM inherits actual methods from OS-specific
# default packages.  We use this intermediate package so
# MY::XYZ->func() can call MM->func() and get the proper
# default routine without having to know under what OS
# it's running.
#
@@MM::ISA = qw[ExtUtils::MM_Unix ExtUtils::Liblist::Kid ExtUtils::MakeMaker];
a40 11
#
# Setup dummy package:
# MY exists for overriding methods to be defined within
#
{
    package MY;
    @@MY::ISA = qw(MM);
###    sub AUTOLOAD { use Devel::Symdump; print Devel::Symdump->rnew->as_string; Carp::confess "hey why? $AUTOLOAD" }
    package MM;
    sub DESTROY {}
}
d42 2
a43 3
# "predeclare the package: we only load it via AUTOLOAD
# but we have already mentioned it in @@ISA
package ExtUtils::Liblist::Kid;
d45 2
a46 28
package ExtUtils::MakeMaker;
#
# Now we can pull in the friends
#
$Is_VMS   = $^O eq 'VMS';
$Is_OS2   = $^O eq 'os2';
$Is_Mac   = $^O eq 'MacOS';
$Is_Win32 = $^O eq 'MSWin32';
$Is_Cygwin= $^O eq 'cygwin';

require ExtUtils::MM_Unix;

if ($Is_VMS) {
    require ExtUtils::MM_VMS;
    require VMS::Filespec; # is a noop as long as we require it within MM_VMS
}
if ($Is_OS2) {
    require ExtUtils::MM_OS2;
}
if ($Is_Mac) {
    require ExtUtils::MM_MacOS;
}
if ($Is_Win32) {
    require ExtUtils::MM_Win32;
}
if ($Is_Cygwin) {
    require ExtUtils::MM_Cygwin;
}
d48 1
a48 1
full_setup();
d50 2
a51 15
# The use of the Version_check target has been dropped between perl
# 5.5.63 and 5.5.64. We must keep the subroutine for a while so that
# old Makefiles can satisfy the Version_check target.

sub Version_check {
    my($checkversion) = @@_;
    die "Your Makefile was built with ExtUtils::MakeMaker v $checkversion.
Current Version is $ExtUtils::MakeMaker::VERSION. There have been considerable
changes in the meantime.
Please rerun 'perl Makefile.PL' to regenerate the Makefile.\n"
    if $checkversion < $Version_OK;
    printf STDOUT "%s %s %s %s.\n", "Makefile built with ExtUtils::MakeMaker v",
    $checkversion, "Current Version is", $VERSION
	unless $checkversion == $VERSION;
}
d53 1
a53 5
sub warnhandler {
    $_[0] =~ /^Use of uninitialized value/ && return;
    $_[0] =~ /used only once/ && return;
    $_[0] =~ /^Subroutine\s+[\w:]+\s+redefined/ && return;
    warn @@_;
a55 3
sub WriteMakefile {
    Carp::croak "WriteMakefile: Need even number of args" if @@_ % 2;
    local $SIG{__WARN__} = \&warnhandler;
d57 141
a197 2
    my %att = @@_;
    MM->new(\%att)->flush;
d202 3
a204 2
    $ISA_TTY = -t STDIN && (-t STDOUT || !(-f STDOUT || -c STDOUT)) ;	# Pipe?
    Carp::confess("prompt function called without an argument") unless defined $mess;
d209 1
d211 11
a221 4
    if ($ISA_TTY) {
	chomp($ans = <STDIN>);
    } else {
	print "$def\n";
d223 1
a223 1
    return ($ans ne '') ? $ans : $def;
d228 9
a236 7
    my($dir);
    use Cwd 'cwd';
    my $pwd = cwd();

    foreach $dir (@@{$self->{DIR}}){
	my($abs) = $self->catdir($pwd,$dir);
	$self->eval_in_x($abs);
a242 1
    package main;
d244 5
a248 10
#    use FileHandle ();
#    my $fh = new FileHandle;
#    $fh->open("Makefile.PL") or Carp::carp("Couldn't open Makefile.PL in $dir");
    local *FH;
    open(FH,"Makefile.PL") or Carp::carp("Couldn't open Makefile.PL in $dir");
#    my $eval = join "", <$fh>;
    my $eval = join "", <FH>;
#    $fh->close;
    close FH;
    eval $eval;
d250 6
a255 6
# 	  if ($@@ =~ /prerequisites/) {
# 	      die "MakeMaker WARNING: $@@";
# 	  } else {
# 	      warn "WARNING from evaluation of $dir/Makefile.PL: $@@";
# 	  }
	warn "WARNING from evaluation of $dir/Makefile.PL: $@@";
d265 1
a265 1
    @@Attrib_help = qw/
d269 16
a284 8
    EXCLUDE_EXT EXE_FILES FIRST_MAKEFILE FULLPERL FUNCLIST H 
    HTMLLIBPODS HTMLSCRIPTPODS IMPORTS
    INC INCLUDE_EXT INSTALLARCHLIB INSTALLBIN INSTALLDIRS INSTALLHTMLPRIVLIBDIR
    INSTALLHTMLSCRIPTDIR INSTALLHTMLSITELIBDIR INSTALLMAN1DIR
    INSTALLMAN3DIR INSTALLPRIVLIB INSTALLSCRIPT INSTALLSITEARCH
    INSTALLSITELIB INST_ARCHLIB INST_BIN INST_EXE INST_LIB
    INST_HTMLLIBDIR INST_HTMLSCRIPTDIR
    INST_MAN1DIR INST_MAN3DIR INST_SCRIPT LDFROM LIB LIBPERL_A LIBS
d288 2
a289 1
    PERL_ARCHLIB PERL_LIB PERL_SRC PERM_RW PERM_RWX
d291 2
a292 2
	PPM_INSTALL_SCRIPT PREFIX
    PREREQ_PM SKIP TYPEMAPS VERSION VERSION_FROM XS XSOPT XSPROTOARG
a294 1

d297 1
a297 1
	/;
d311 1
a311 1
	qw(
d320 1
a320 1
 dynamic_lib static static_lib htmlifypods manifypods processPL
d325 1
a325 1
	  ); # loses section ordering
d331 2
a332 2
 subdir_x test_via_harness test_via_script
			 ];
d338 1
a338 1
			 ];
d349 13
a361 14
	qw(
	   ar cc cccdlflags ccdlflags dlext dlsrc ld lddlflags ldflags libc
	   lib_ext obj_ext osname osvers ranlib sitelibexp sitearchexp so
	   exe_ext full_ar
	  );

    my $item;
    foreach $item (@@Attrib_help){
	$Recognized_Att_Keys{$item} = 1;
    }
    foreach $item (@@Get_from_Config) {
	$Recognized_Att_Keys{uc $item} = $Config{$item};
	print "Attribute '\U$item\E' => '$Config{$item}'\n"
	    if ($Verbose >= 2);
d369 5
a373 8
    %Prepend_dot_dot = 
	qw(

	   INST_BIN 1 INST_EXE 1 INST_LIB 1 INST_ARCHLIB 1 INST_SCRIPT 1
	   MAP_TARGET 1 INST_HTMLLIBDIR 1 INST_HTMLSCRIPTDIR 1 
	   INST_MAN1DIR 1 INST_MAN3DIR 1 PERL_SRC 1 PERL 1 FULLPERL 1

	  );
d376 2
a377 2
	NEEDS_LINKING HAS_LINK_CODE
	/;
d401 1
a401 1
sub ExtUtils::MakeMaker::new {
d405 11
d418 1
a418 1
	check_manifest();
d425 1
d428 26
a453 34
    my($prereq);
    foreach $prereq (sort keys %{$self->{PREREQ_PM}}) {
	my $eval = "require $prereq";
	eval $eval;

	if ($@@) {
	    warn "Warning: prerequisite $prereq failed to load: $@@";
	}
	elsif ($prereq->VERSION < $self->{PREREQ_PM}->{$prereq} ){
	    warn "Warning: prerequisite $prereq $self->{PREREQ_PM}->{$prereq} not found";
# Why is/was this 'delete' here?  We need PREREQ_PM later to make PPDs.
#	} else {
#	    delete $self->{PREREQ_PM}{$prereq};
	}
    }
#    if (@@unsatisfied){
# 	  unless (defined $ExtUtils::MakeMaker::useCPAN) {
# 	      print qq{MakeMaker WARNING: prerequisites not found (@@unsatisfied)
# Please install these modules first and rerun 'perl Makefile.PL'.\n};
# 	      if ($ExtUtils::MakeMaker::hasCPAN) {
# 		  $ExtUtils::MakeMaker::useCPAN = prompt(qq{Should I try to use the CPAN module to fetch them for you?},"yes");
# 	      } else {
# 		  print qq{Hint: You may want to install the CPAN module to autofetch the needed modules\n};
# 		  $ExtUtils::MakeMaker::useCPAN=0;
# 	      }
# 	  }
# 	  if ($ExtUtils::MakeMaker::useCPAN) {
# 	      require CPAN;
# 	      CPAN->import(@@unsatisfied);
# 	  } else {
# 	      die qq{prerequisites not found (@@unsatisfied)};
# 	  }
#	warn qq{WARNING: prerequisites not found (@@unsatisfied)};
#    }
d456 6
a461 5
	if (ref $self->{CONFIGURE} eq 'CODE') {
	    $self = { %$self, %{&{$self->{CONFIGURE}}}};
	} else {
	    Carp::croak "Attribute 'CONFIGURE' to WriteMakefile() not a code reference\n";
	}
d466 1
a466 1
	Carp::carp("WARNING: Please rerun 'perl Makefile.PL' to regenerate your Makefiles\n");
d470 1
a470 1
    local @@Parent = @@Parent;	# Protect against non-local exits
d472 7
a478 6
#	no strict;
	print "Blessing Object into class [$newclass]\n" if $Verbose>=2;
	mv_all_methods("MY",$newclass);
	bless $self, $newclass;
	push @@Parent, $self;
	@@{"$newclass\:\:ISA"} = 'MM';
d482 33
a514 23
	$self->{PARENT} = $Parent[-2];
	my $key;
	for $key (keys %Prepend_dot_dot) {
	    next unless defined $self->{PARENT}{$key};
	    $self->{$key} = $self->{PARENT}{$key};
		# PERL and FULLPERL may be command verbs instead of full
		# file specifications under VMS.  If so, don't turn them
		# into a filespec.
	    $self->{$key} = $self->catdir("..",$self->{$key})
		unless $self->file_name_is_absolute($self->{$key})
		|| ($^O eq 'VMS' and ($key =~ /PERL$/ && $self->{$key} =~ /^[\w\-\$]+$/));
	}
	if ($self->{PARENT}) {
	    $self->{PARENT}->{CHILDREN}->{$newclass} = $self;
	    foreach my $opt (qw(CAPI POLLUTE)) {
		if (exists $self->{PARENT}->{$opt}
		    and not exists $self->{$opt})
		    {
			# inherit, but only if already unspecified
			$self->{$opt} = $self->{PARENT}->{$opt};
		    }
	    }
	}
d516 1
a516 1
	parse_args($self,split(' ', $ENV{PERL_MM_OPT} || ''),@@ARGV);
d526 6
a531 5
	my($pthinks) = $self->canonpath($INC{'Config.pm'});
	my($cthinks) = $self->catfile($Config{'archlibexp'},'Config.pm');
	$pthinks = VMS::Filespec::vmsify($pthinks) if $Is_VMS;
	if ($pthinks ne $cthinks &&
	    !($Is_Win32 and lc($pthinks) eq lc($cthinks))) {
d533 9
a541 9
	    if ($Is_Win32) {
		$pthinks =~ s![/\\]Config\.pm$!!i; $pthinks =~ s!.*[/\\]!!;
	    }
	    else {
		$pthinks =~ s!/Config\.pm$!!; $pthinks =~ s!.*/!!;
	    }
	    print STDOUT <<END unless $self->{UNINSTALLED_PERL};
Your perl and your Config.pm seem to have different ideas about the architecture
they are running on.
d544 2
a545 2
This may or may not cause problems. Please check your installation of perl if you
have problems building this extension.
d547 1
a547 1
	}
d552 1
d564 1
a564 1
#	ANY CHANGES MADE HERE WILL BE LOST!
d571 26
a596 5
    foreach $key (sort keys %initial_att){
	my($v) = neatvalue($initial_att{$key});
	$v =~ s/(CODE|HASH|ARRAY|SCALAR)\([\dxa-f]+\)/$1\(...\)/;
	$v =~ tr/\n/ /s;
	push @@{$self->{RESULT}}, "#	$key => $v";
d602 1
a602 1
	$self->{SKIPHASH}{$skip} = 1;
d607 3
a609 3
	for (qw/install dist dist_basics dist_core dist_dir dist_test dist_ci/) {
	    $self->{SKIPHASH}{$_} = 1;
	}
d615 1
a615 1
	$self->eval_in_subdirs if @@{$self->{DIR}};
d618 11
a628 12
    my $section;
    foreach $section ( @@MM_Sections ){
	print "Processing Makefile '$section' section\n" if ($Verbose >= 2);
	my($skipit) = $self->skipcheck($section);
	if ($skipit){
	    push @@{$self->{RESULT}}, "\n# --- MakeMaker $section section $skipit.";
	} else {
	    my(%a) = %{$self->{$section} || {}};
	    push @@{$self->{RESULT}}, "\n# --- MakeMaker $section section:";
	    push @@{$self->{RESULT}}, "# " . join ", ", %a if $Verbose && %a;
	    push @@{$self->{RESULT}}, $self->nicetext($self->$section( %a ));
	}
d637 13
a649 8
  if (-f 'Makefile.old') {
    chmod 0666, 'Makefile.old';
    unlink 'Makefile.old' or warn "unlink Makefile.old: $!";
  }
  rename 'Makefile', 'Makefile.old' or warn "rename Makefile Makefile.old: $!"
    if -f 'Makefile';
  open MF, '> Makefile' or die "open Makefile for write: $!";
  print MF <<'EOP';
d661 1
a661 1
  close MF or die "close Makefile for write: $!";
d667 8
a674 7
    $ExtUtils::Manifest::Quiet=$ExtUtils::Manifest::Quiet=1; #avoid warning
    my(@@missed)=ExtUtils::Manifest::manicheck();
    if (@@missed){
	print STDOUT "Warning: the following files are missing in your kit:\n";
	print "\t", join "\n\t", @@missed;
	print STDOUT "\n";
	print STDOUT "Please inform the author.\n";
d676 1
a676 1
	print STDOUT "Looks good\n";
d682 15
a696 15
    foreach (@@args){
	unless (m/(.*?)=(.*)/){
	    help(),exit 1 if m/^help$/;
	    ++$Verbose if m/^verb/;
	    next;
	}
	my($name, $value) = ($1, $2);
	if ($value =~ m/^~(\w+)?/){ # tilde with optional username
	    $value =~ s [^~(\w*)]
		[$1 ?
		 ((getpwnam($1))[7] || "~$1") :
		 (getpwuid($>))[7]
		 ]ex;
	}
	$self->{uc($name)} = $value;
d701 8
a708 8
	my($msg)="'potential_libs' => '$self->{potential_libs}' should be";
	if ($self->{potential_libs}){
	    print STDOUT "$msg changed to:\n\t'LIBS' => ['$self->{potential_libs}']\n";
	} else {
	    print STDOUT "$msg deleted.\n";
	}
	$self->{LIBS} = [$self->{potential_libs}];
	delete $self->{potential_libs};
d712 6
a717 6
	my($armaybe) = $self->{ARMAYBE};
	print STDOUT "ARMAYBE => '$armaybe' should be changed to:\n",
			"\t'dynamic_lib' => {ARMAYBE => '$armaybe'}\n";
	my(%dl) = %{$self->{dynamic_lib} || {}};
	$self->{dynamic_lib} = { %dl, ARMAYBE => $armaybe};
	delete $self->{ARMAYBE};
d720 3
a722 3
	print STDOUT "LDTARGET should be changed to LDFROM\n";
	$self->{LDFROM} = $self->{LDTARGET};
	delete $self->{LDTARGET};
d726 4
a729 4
	# So they can choose from the command line, which extensions they want
	# the grep enables them to have some colons too much in case they
	# have to build a list with the shell
	$self->{DIR} = [grep $_, split ":", $self->{DIR}];
d733 1
a733 1
	$self->{INCLUDE_EXT} = [grep $_, split '\s+', $self->{INCLUDE_EXT}];
d737 1
a737 1
	$self->{EXCLUDE_EXT} = [grep $_, split '\s+', $self->{EXCLUDE_EXT}];
d739 5
a743 5
    my $mmkey;
    foreach $mmkey (sort keys %$self){
	print STDOUT "	$mmkey => ", neatvalue($self->{$mmkey}), "\n" if $Verbose;
	print STDOUT "'$mmkey' is not a known MakeMaker parameter name.\n"
	    unless exists $Recognized_Att_Keys{$mmkey};
a754 1
    my(@@goodhints);
d762 1
a762 1
	last if -f "hints/$hint.pl";      # found
d764 1
a764 1
	last unless $hint =~ s/_[^_]*$//; # nothing to cut off
d766 6
a771 1
    return unless -f "hints/$hint.pl";    # really there
d773 11
a783 13
    # execute the hintsfile:
#    use FileHandle ();
#    my $fh = new FileHandle;
#    $fh->open("hints/$hint.pl");
    local *FH;
    open(FH,"hints/$hint.pl");
#    @@goodhints = <$fh>;
    @@goodhints = <FH>;
#    $fh->close;
    close FH;
    print STDOUT "Processing hints file hints/$hint.pl\n";
    eval join('',@@goodhints);
    print STDOUT $@@ if $@@;
d788 1
a788 1
    my($method);
a789 1
#    no strict;
d796 13
a808 1
    foreach $method (@@Overridable) {
d810 1
a810 2
	# We cannot say "next" here. Nick might call MY->makeaperl
	# which isn't defined right now
d812 1
a812 18
	# Above statement was written at 4.23 time when Tk-b8 was
	# around. As Tk-b9 only builds with 5.002something and MM 5 is
	# standard, we try to enable the next line again. It was
	# commented out until MM 5.23

	next unless defined &{"${from}::$method"};

	*{"${to}::$method"} = \&{"${from}::$method"};

	# delete would do, if we were sure, nobody ever called
	# MY->makeaperl directly
	
	# delete $symtab->{$method};
	
	# If we delete a method, then it will be undefined and cannot
	# be called.  But as long as we have Makefile.PLs that rely on
	# %MY:: being intact, we have to fill the hole with an
	# inheriting method:
d814 11
a824 1
	eval "package MY; sub $method { shift->SUPER::$method(\@@_); }";
d841 2
a842 2
#	#warn "***$inc*** deleted";
#	delete $INC{$inc};
d850 2
a851 2
	print STDOUT "Warning (non-fatal): Target 'dynamic' depends on targets ",
	"in skipped section 'dynamic_bs'\n"
d854 1
a854 1
	"in skipped section 'dynamic_lib'\n"
d859 1
a859 1
	"targets in skipped section 'dynamic_bs'\n"
d864 1
a864 1
	"in skipped section 'static_lib'\n"
a873 2
#    use FileHandle ();
#    my $fh = new FileHandle;
a877 1
#    $fh->open(">MakeMaker.tmp") or die "Unable to open MakeMaker.tmp: $!";
d881 1
a881 2
#	print $fh "$chunk\n";
	print FH "$chunk\n";
a883 1
#    $fh->close;
d889 4
a892 4
    if ($self->{PARENT}) {
	foreach (keys %$self) { # safe memory
	    delete $self->{$_} unless $Keep_after_flush{$_};
	}
d924 8
a931 8
	my(@@m, $elem, @@neat);
	push @@m, "[";
	foreach $elem (@@$v) {
	    push @@neat, "q[$elem]";
	}
	push @@m, join ", ", @@neat;
	push @@m, "]";
	return join "", @@m;
d936 2
a937 2
	last unless defined $key; # cautious programming in case (undef,undef) is true
	push(@@m,"$key=>".neatvalue($val)) ;
d946 8
a953 8
	push @@m, "\n# Full list of MakeMaker attribute values:";
	foreach $key (sort keys %$self){
	    next if $key eq 'RESULT' || $key =~ /^[A-Z][a-z]/;
	    my($v) = neatvalue($self->{$key});
	    $v =~ s/(CODE|HASH|ARRAY|SCALAR)\([\dxa-f]+\)/$1\(...\)/;
	    $v =~ tr/\n/ /s;
	    push @@m, "#	$key => $v";
	}
a957 1
package ExtUtils::MakeMaker;
d968 1
a968 5
C<use ExtUtils::MakeMaker;>

C<WriteMakefile( ATTRIBUTE =E<gt> VALUE [, ...] );>

which is really
d970 1
a970 1
C<MM-E<gt>new(\%att)-E<gt>flush;>
d983 1
a983 1
directory that contains a Makefile.PL. Is treated as a separate
d1035 2
a1036 3
current directory and if it exists it adds commands to the test target
of the generated Makefile that will execute the script with the proper
set of perl C<-I> options.
d1039 7
a1045 3
add commands to the test target of the generated Makefile that execute
all matching files via the L<Test::Harness> module with the C<-I>
switches set correctly.
d1053 1
a1053 1
If you want to debug some other testfile, set C<TEST_FILE> variable
d1059 1
a1059 1
want to specify some other option, set C<TESTDB_SW> variable:
d1066 5
a1070 6
the macros INST_LIB, INST_ARCHLIB, INST_SCRIPT, INST_HTMLLIBDIR,
INST_HTMLSCRIPTDIR, INST_MAN1DIR, and INST_MAN3DIR.  All these default
to something below ./blib if you are I<not> building below the perl
source directory. If you I<are> building below the perl source,
INST_LIB and INST_ARCHLIB default to ../../lib, and INST_SCRIPT is not
defined.
d1077 2
a1078 2
		       	         INSTALLDIRS set to
       	       	              perl   	          site
d1080 7
a1086 8
    INST_ARCHLIB	INSTALLARCHLIB        INSTALLSITEARCH
    INST_LIB		INSTALLPRIVLIB        INSTALLSITELIB
    INST_HTMLLIBDIR	INSTALLHTMLPRIVLIBDIR INSTALLHTMLSITELIBDIR
    INST_HTMLSCRIPTDIR            INSTALLHTMLSCRIPTDIR
    INST_BIN			  INSTALLBIN
    INST_SCRIPT                   INSTALLSCRIPT
    INST_MAN1DIR                  INSTALLMAN1DIR
    INST_MAN3DIR                  INSTALLMAN3DIR
d1107 1
a1107 1
    perl Makefile.PL LIB=~/lib
d1109 3
a1111 2
This will install the module's architecture-independent files into
~/lib, the architecture-dependent files into ~/lib/$archname.
d1114 1
a1114 1
parameter is PREFIX.
d1116 1
a1116 1
    perl Makefile.PL PREFIX=~
d1118 2
a1119 2
This will replace the string specified by C<$Config{prefix}> in all
C<$Config{install*}> values.
d1124 2
a1125 2
Conflicts between parameters LIB,
PREFIX and the various INSTALL* arguments are resolved so that:
d1142 8
a1149 6
If the user has superuser privileges, and is not working on AFS
or relatives, then the defaults for
INSTALLPRIVLIB, INSTALLARCHLIB, INSTALLSCRIPT, etc. will be appropriate,
and this incantation will be the best:

    perl Makefile.PL; make; make test
d1163 1
a1163 1
	INSTALLSCRIPT=/afs/there/now INSTALLMAN3DIR=/afs/for/manpages
d1182 1
a1182 1
extensions linked in that can be found in INST_ARCHLIB , SITELIBEXP,
d1287 2
a1288 2
The following attributes can be specified as arguments to WriteMakefile()
or as NAME=VALUE pairs on the command line:
d1313 1
a1313 1
	perl Makefile.PL BINARY_LOCATION=x86/Agent.tar.gz
a1323 11
=item CAPI

[This attribute is obsolete in Perl 5.6.  PERL_OBJECT builds are C-compatible
by default.]

Switch to force usage of the Perl C API even when compiling for PERL_OBJECT.

Note that this attribute is passed through to any recursive build,
but if and only if the submodule's Makefile.PL itself makes no mention
of the 'CAPI' attribute.

d1418 9
a1426 1
Perl binary able to run this extension.
a1438 14
=item HTMLLIBPODS

Hashref of .pm and .pod files.  MakeMaker will default this to all
 .pod and any .pm files that include POD directives.  The files listed
here will be converted to HTML format and installed as was requested
at Configure time.

=item HTMLSCRIPTPODS

Hashref of pod-containing files.  MakeMaker will default this to all
EXE_FILES files that include POD directives.  The files listed
here will be converted to HTML format and installed as was requested
at Configure time.

d1442 3
a1444 1
extension. It is only used on OS/2 and Win32.
d1472 2
a1473 1
Directory to install binary files (e.g. tkperl) into.
d1477 2
a1478 20
Determines which of the two sets of installation directories to
choose: installprivlib and installarchlib versus installsitelib and
installsitearch. The first pair is chosen with INSTALLDIRS=perl, the
second with INSTALLDIRS=site. Default is site.

=item INSTALLHTMLPRIVLIBDIR

This directory gets the HTML pages at 'make install' time. Defaults to
$Config{installhtmlprivlibdir}.

=item INSTALLHTMLSCRIPTDIR

This directory gets the HTML pages at 'make install' time. Defaults to
$Config{installhtmlscriptdir}.

=item INSTALLHTMLSITELIBDIR

This directory gets the HTML pages at 'make install' time. Defaults to
$Config{installhtmlsitelibdir}.

d1482 1
a1482 2
This directory gets the man pages at 'make install' time. Defaults to
$Config{installman1dir}.
d1484 2
a1485 1
=item INSTALLMAN3DIR
d1487 1
a1487 2
This directory gets the man pages at 'make install' time. Defaults to
$Config{installman3dir}.
d1494 2
d1506 5
d1516 16
a1531 1
=item INST_ARCHLIB
d1533 2
a1534 1
Same as INST_LIB for architecture dependent files.
d1536 1
a1536 1
=item INST_BIN
d1538 2
a1539 2
Directory to put real binary files during 'make'. These will be copied
to INSTALLBIN during 'make install'
d1541 1
a1541 1
=item INST_EXE
d1543 1
a1543 2
Old name for INST_SCRIPT. Deprecated. Please use INST_SCRIPT if you
need to use it.
d1545 2
a1546 1
=item INST_HTMLLIBDIR
d1548 1
a1548 1
Directory to hold the man pages in HTML format at 'make' time
d1550 1
a1550 1
=item INST_HTMLSCRIPTDIR
d1552 6
a1557 1
Directory to hold the man pages in HTML format at 'make' time
d1579 8
d1589 1
a1589 1
defaults to "$(OBJECT)" and is used in the ld command to specify
d1596 4
a1599 5
MakeMaker argument. It has the effect of
setting both INSTALLPRIVLIB and INSTALLSITELIB to that value regardless any
explicit setting of those arguments (or of PREFIX).  
INSTALLARCHLIB and INSTALLSITEARCH are set to the corresponding 
architecture subdirectory.
d1652 5
a1656 4
Hashref of .pm and .pod files. MakeMaker will default this to all
 .pod and any .pm files that include POD directives. The files listed
here will be converted to man pages and installed as was requested
at Configure time.
d1715 5
d1727 5
a1731 1
Same as below, but for architecture dependent files.
d1737 4
d1769 11
d1876 24
a1899 6
Can be used to set the three INSTALL* attributes in one go (except for
probably INSTALLMAN1DIR, if it is not below PREFIX according to
%Config).  They will have PREFIX as a common directory node and will
branch from that node into lib/, lib/ARCHNAME or whatever Configure
decided at the build time of your perl (unless you override one of
them, of course).
d1908 25
d1935 1
a1935 1
Arryref. E.g. [qw(name1 name2)] skip (do not write) sections of the
d1949 10
d1980 1
a1980 1
    ( $VERSION ) = '$Revision: 1.222 $ ' =~ /\$Revision:\s+([^\s]+)/;
d1983 1
a1983 1
    our $VERSION = 1.2.3;	# new for perl5.6.0 
d2100 1
a2100 1
Each subroutines returns the text it wishes to have written to
d2104 1
a2104 1
	sub MY::c_o { "new literal text" }
d2108 6
a2113 6
	sub MY::c_o {
	    package MY;	# so that "SUPER" works right
	    my $inherited = shift->SUPER::c_o(@@_);
	    $inherited =~ s/old text/new text/;
	    $inherited;
	}
d2122 1
a2122 1
F<perl5-porters@@perl.org> or F<comp.lang.perl.moderated> as appropriate.
d2124 2
a2125 1
For a complete description of all MakeMaker methods see L<ExtUtils::MM_Unix>.
d2131 1
a2131 1
	'
d2133 3
a2135 2
	    cd sdbm && $(MAKE) all
    ';
d2138 21
d2215 1
a2215 1
=item	make disttest
d2306 5
d2315 2
a2316 2
ExtUtils::MM_Unix, ExtUtils::Manifest, ExtUtils::testlib,
ExtUtils::Install, ExtUtils::Embed
d2320 13
a2332 6
Andy Dougherty <F<doughera@@lafcol.lafayette.edu>>, Andreas KE<ouml>nig
<F<A.Koenig@@franz.ww.TU-Berlin.DE>>, Tim Bunce <F<Tim.Bunce@@ig.co.uk>>.
VMS support by Charles Bailey <F<bailey@@newman.upenn.edu>>.  OS/2
support by Ilya Zakharevich <F<ilya@@math.ohio-state.edu>>.  Contact the
makemaker mailing list C<mailto:makemaker@@franz.ww.tu-berlin.de>, if
you have any questions.
@


1.4
log
@perl-5.6.0 + local changes
@
text
@d47 1
a47 1
@@MM::ISA = qw[ExtUtils::MM_Unix ExtUtils::Liblist ExtUtils::MakeMaker];
d63 1
a63 1
package ExtUtils::Liblist;
d85 1
a85 1
    require ExtUtils::MM_Mac;
d192 1
a192 1
    HTMLLIBPODS HTMLSCRIPTPOD IMPORTS
d203 2
a204 1
    PL_FILES PM PMLIBDIRS POLLUTE PPM_INSTALL_EXEC PPM_INSTALL_SCRIPT PREFIX
d208 3
a245 1

d988 1
a988 1
~/lib, the architecture-dependent files into ~/lib/$archname/auto.
d995 2
a996 2
This will replace the string specified by $Config{prefix} in all
$Config{install*} values.
d999 19
a1017 3
by perl by default, nor by make. Conflicts between parameters LIB,
PREFIX and the various INSTALL* arguments are resolved so that 
XXX
d1020 1
a1020 1
(Andrew File System) or relatives, then the defaults for
a1166 5
=item AUTHOR

String containing name (and email address) of package author(s). Is used
in PPD (Perl Package Description) files for PPM (Perl Package Manager).

d1177 5
a1430 5
=item INST_LIB

Directory where we put library files of this extension while building
it.

d1439 5
a1458 28
=item PERL_MALLOC_OK

defaults to 0.  Should be set to TRUE if the extension can work with
the memory allocation routines substituted by the Perl malloc() subsystem.
This should be applicable to most extensions with exceptions of those

=over

=item *

with bugs in memory allocations which are caught by Perl's malloc();

=item *

which interact with the memory allocator in other ways than via
malloc(), realloc(), free(), calloc(), sbrk() and brk();

=item *

which rely on special alignment which is not provided by Perl's malloc().

=back

B<NOTE.>  Negligence to set this flag in I<any one> of loaded extension
nullifies many advantages of Perl's malloc(), such as better usage of
system resources, error detection, memory usage reporting, catchable failure
of memory allocations, etc.

d1467 2
a1468 1
LIB can only be set at C<perl Makefile.PL> time. It has the effect of
d1470 3
d1576 2
d1594 1
a1594 1
Same as above for architecture dependent files.
d1600 28
d1676 25
d1778 1
d1786 2
d1841 2
@


1.3
log
@perl5.005_03 (stock)
@
text
@d5 1
a5 1
$VERSION = "5.4302";
d20 1
a20 1
	    $ISA_TTY $Is_Mac $Is_OS2 $Is_VMS $Revision $Setup_done
d73 1
d90 3
d94 1
a94 25
# The SelfLoader would bring a lot of overhead for MakeMaker, because
# we know for sure we will use most of the autoloaded functions once
# we have to use one of them. So we write our own loader

sub AUTOLOAD {
    my $code;
    if (defined fileno(DATA)) {
	my $fh = select DATA;
	my $o = $/;			# For future reads from the file.
	$/ = "\n__END__\n";
	$code = <DATA>;
	$/ = $o;
	select $fh;
	close DATA;
	eval $code;
	if ($@@) {
	    $@@ =~ s/ at .*\n//;
	    Carp::croak $@@;
	}
    } else {
	warn "AUTOLOAD called unexpectedly for $AUTOLOAD"; 
    }
    defined(&$AUTOLOAD) or die "Myloader inconsistency error";
    goto &$AUTOLOAD;
}
d96 3
a98 3
# The only subroutine we do not SelfLoad is Version_Check because it's
# called so often. Loading this minimum still requires 1.2 secs on my
# Indy :-(
a118 24
sub ExtUtils::MakeMaker::eval_in_subdirs ;
sub ExtUtils::MakeMaker::eval_in_x ;
sub ExtUtils::MakeMaker::full_setup ;
sub ExtUtils::MakeMaker::writeMakefile ;
sub ExtUtils::MakeMaker::new ;
sub ExtUtils::MakeMaker::check_manifest ;
sub ExtUtils::MakeMaker::parse_args ;
sub ExtUtils::MakeMaker::check_hints ;
sub ExtUtils::MakeMaker::mv_all_methods ;
sub ExtUtils::MakeMaker::skipcheck ;
sub ExtUtils::MakeMaker::flush ;
sub ExtUtils::MakeMaker::mkbootstrap ;
sub ExtUtils::MakeMaker::mksymlists ;
sub ExtUtils::MakeMaker::neatvalue ;
sub ExtUtils::MakeMaker::selfdocument ;
sub ExtUtils::MakeMaker::WriteMakefile ;
sub ExtUtils::MakeMaker::prompt ($;$) ;

1;

__DATA__

package ExtUtils::MakeMaker;

a122 4
    unless ($Setup_done++){
	full_setup();
	undef &ExtUtils::MakeMaker::full_setup; #safe memory
    }
a182 1
    $^W=1;
d191 4
a194 2
    EXCLUDE_EXT EXE_FILES FIRST_MAKEFILE FULLPERL FUNCLIST H IMPORTS
    INC INCLUDE_EXT INSTALLARCHLIB INSTALLBIN INSTALLDIRS INSTALLMAN1DIR
d197 1
d200 1
d203 1
a203 1
    PL_FILES PM PMLIBDIRS PPM_INSTALL_EXEC PPM_INSTALL_SCRIPT PREFIX
d230 2
a231 1
 dynamic_lib static static_lib manifypods processPL installbin subdirs
d262 2
a263 1
	   lib_ext obj_ext osname osvers ranlib sitelibexp sitearchexp so exe_ext
d284 3
a286 3
	   INST_BIN 1 INST_EXE 1 INST_LIB 1 INST_ARCHLIB 1 INST_SCRIPT
	   1 MAP_TARGET 1 INST_MAN1DIR 1 INST_MAN3DIR 1 PERL_SRC 1
	   PERL 1 FULLPERL 1
d333 1
a333 1
	my $eval = "use $prereq $self->{PREREQ_PM}->{$prereq}";
d335 5
a339 1
	if ($@@){
d405 7
a411 5
	    if (exists $self->{PARENT}->{CAPI}
		and not exists $self->{CAPI})
	    {
		# inherit, but only if already unspecified
		$self->{CAPI} = $self->{PARENT}->{CAPI};
d437 1
a437 1
	    print STDOUT <<END;
d939 6
a944 5
the macros INST_LIB, INST_ARCHLIB, INST_SCRIPT, INST_MAN1DIR, and
INST_MAN3DIR. All these default to something below ./blib if you are
I<not> building below the perl source directory. If you I<are>
building below the perl source, INST_LIB and INST_ARCHLIB default to
 ../../lib, and INST_SCRIPT is not defined.
d951 2
a952 2
		       	   INSTALLDIRS set to
       	       	        perl   	          site
d954 8
a961 6
    INST_ARCHLIB    INSTALLARCHLIB    INSTALLSITEARCH
    INST_LIB        INSTALLPRIVLIB    INSTALLSITELIB
    INST_BIN                  INSTALLBIN
    INST_SCRIPT              INSTALLSCRIPT
    INST_MAN1DIR             INSTALLMAN1DIR
    INST_MAN3DIR             INSTALLMAN3DIR
d1138 1
a1138 1
be necessary, and should only be done, if the author of a package
d1182 3
d1298 14
d1352 16
d1417 8
d1436 1
a1436 1
'make'. Defaults to "./blib/bin", just to have a dummy location during
d1440 28
d1553 1
a1553 1
MakeMaker will figure out, if an extension contains linkable code
d1555 1
a1555 1
accordingly, but you can speed it up a very little bit, if you define
d1570 1
a1570 1
In general any generated Makefile checks for the current version of
d1597 1
a1597 1
Same as above for architecture dependent files
d1651 12
d1691 2
a1692 2
Makefile. Caution! Do not use the SKIP attribute for the neglectible
speedup. It may seriously damage the resulting Makefile. Only use it,
d1815 1
a1815 1
can be deleted safely. MakeMaker recognizes, when there's nothing to
d1826 4
d1832 1
a1832 1
  {MAXLEN =E<gt> 8}
d1918 1
a1918 1
needed to build a new distribution as long as you are sure, that the
@


1.2
log
@perl 5.004_04
@
text
@d5 1
a5 1
$Version = $VERSION = "5.42";
d8 1
a8 1
($Revision = substr(q$Revision: 1.216 $, 10)) =~ s/\s+$//;
d38 1
a38 3
@@EXPORT_OK = qw($VERSION &Version_check &neatvalue &mkbootstrap &mksymlists
		$Version);
		# $Version in mixed case will go away!
d177 1
a177 1
    $ISA_TTY = -t STDIN && -t STDOUT ;
d182 2
a184 2
	local $|=1;
	print "$mess $dispdef";
d186 2
d189 1
a189 1
    return $ans || $def;
d238 4
a241 3
    C CCFLAGS CONFIG CONFIGURE DEFINE DIR DISTNAME DL_FUNCS DL_VARS
    EXE_FILES EXCLUDE_EXT INCLUDE_EXT NO_VC FIRST_MAKEFILE FULLPERL H
    INC INSTALLARCHLIB INSTALLBIN INSTALLDIRS INSTALLMAN1DIR
d244 1
a244 1
    INST_MAN1DIR INST_MAN3DIR INST_SCRIPT LDFROM LIBPERL_A LIB LIBS
d246 3
a248 2
    NAME NEEDS_LINKING NOECHO NORECURS OBJECT OPTIMIZE PERL PERLMAINCC
    PERL_ARCHLIB PERL_LIB PERL_SRC PL_FILES PM PMLIBDIRS PREFIX
a251 4

    IMPORTS

    installpm
d254 1
a254 3
    # IMPORTS is used under OS/2

    # ^^^ installpm is deprecated, will go about Summer 96
d277 1
a277 1
 install force perldepend makefile staticmake test
d284 2
a285 2
 dir_target libscan makeaperl needs_linking subdir_x test_via_harness
 test_via_script
d306 1
a306 1
	   lib_ext obj_ext ranlib sitelibexp sitearchexp so exe_ext
d380 3
a382 2
	} else {
	    delete $self->{PREREQ_PM}{$prereq};
d419 1
d442 9
a450 1
	$self->{PARENT}->{CHILDREN}->{$newclass} = $self if $self->{PARENT};
d452 1
a452 1
	parse_args($self,@@ARGV);
d487 3
d500 2
a545 1
    pop @@Parent;
d550 23
d1030 1
a1030 1
by perl by default, nor by make. Conflicts between parmeters LIB,
d1180 18
a1197 1
=cut
d1199 3
a1201 2
# The following "=item C" is used by the attrib_help routine
# likewise the "=back" below. So be careful when changing it!
d1203 4
a1206 1
=over 2
d1214 8
d1270 6
a1275 6
Hashref of symbol names for routines to be made available as
universal symbols.  Each key/value pair consists of the package name
and an array of routine names in that package.  Used only under AIX
(export lists) and VMS (linker options) at present.  The routine
names supplied will be expanded in the same way as XSUB names are
expanded by the XS() macro.  Defaults to
d1284 3
d1289 3
a1291 4
Array of symbol names for variables to be made available as
universal symbols.  Used only under AIX (export lists) and VMS
(linker options) at present.  Defaults to [].  (e.g. [ qw(
Foo_version Foo_numstreams Foo_tree ) ])
d1300 1
a1300 1
commandline:  perl Makefile.PL EXCLUDE_EXT='Socket Safe'
a1307 7
=item NO_VC

In general any generated Makefile checks for the current version of
MakeMaker and the version the Makefile was built under. If NO_VC is
set, the version check is neglected. Do not write this into your
Makefile.PL, use it interactively instead.

d1318 7
d1331 2
a1332 1
IMPORTS is only used on OS/2.
d1351 1
a1351 1
commandline:  perl Makefile.PL INCLUDE_EXT='POSIX Socket Devel::Peek'
d1389 1
a1389 1
=item INSTALLSITELIB
d1391 1
a1391 1
Used by 'make install', which copies files from INST_LIB to this
d1394 1
a1394 1
=item INSTALLSITEARCH
d1396 1
a1396 1
Used by 'make install', which copies files from INST_ARCHLIB to this
d1439 5
a1448 5
=item LIB

LIB can only be set at C<perl Makefile.PL> time. It has the effect of
setting both INSTALLPRIVLIB and INSTALLSITELIB to that value regardless any

d1533 7
d1573 10
d1592 5
a1596 1
themselves.
d1604 2
a1605 3
By default this will include *.pm and *.pl. If a lib directory
exists and is not listed in DIR (above) then any *.pm and *.pl files
it contains will also be included by default.  Defining PM in the
d1611 1
a1611 1
[ 'lib', $(BASEEXT) ]. The directories will be scanned and any files
d1616 9
d1678 1
a1678 1
    ( $VERSION ) = '$Revision: 1.216 $ ' =~ /\$Revision:\s+([^\s]+)/;
d1744 1
a1744 1
  {TARFLAGS => 'cvfF', COMPRESS => 'gzip', SUFFIX => 'gz',
a1758 4
=item installpm

Deprecated as of MakeMaker 5.23. See L<ExtUtils::MM_Unix/pm_to_blib>.

a1784 6
=cut

# bug in pod2html, so leave the =back

# Don't delete this cut, MM depends on it!

d1804 4
a1807 4
If you running experiments with embedding perl as a library into other
applications, you might find MakeMaker not sufficient. You'd better
have a look at ExtUtils::embed which is a collection of utilities for
embedding.
d1810 2
a1811 2
subroutine, that fits your needs and submit the diffs to
F<perl5-porters@@nicoh.com> or F<comp.lang.perl.misc> as appropriate.
d1929 1
a1929 1
    COMPRESS     ('compress')
d1935 1
a1935 1
    SUFFIX       ('Z')
d1943 30
a1972 1
    WriteMakefile( 'dist' => { COMPRESS=>"gzip", SUFFIX=>"gz" })
d1977 1
a1977 1
ExtUtils::Install, ExtUtils::embed
d1983 1
a1983 1
VMS support by Charles Bailey <F<bailey@@genetics.upenn.edu>>.  OS/2
@


1.1
log
@Initial revision
@
text
@d5 1
a5 1
$Version = $VERSION = "5.34";
d8 1
a8 1
($Revision = substr(q$Revision: 1.202 $, 10)) =~ s/\s+$//;
d28 3
a30 2
eval {require DynaLoader;};	# Get mod2fname, if defined. Will fail
                                # with miniperl.
d69 1
a69 1
# Now we can can pull in the friends
d71 4
a74 3
$Is_VMS = $^O eq 'VMS';
$Is_OS2 = $^O =~ m|^os/?2$|i;
$Is_Mac = $^O eq 'MacOS';
d88 3
d157 1
a157 1
sub ExtUtils::MakeMaker::prompt ;
d160 3
a162 1
#__DATA__
d238 3
a240 3
    C CONFIG CONFIGURE DEFINE DIR DISTNAME DL_FUNCS DL_VARS EXE_FILES
    EXCLUDE_EXT INCLUDE_EXT NO_VC FIRST_MAKEFILE FULLPERL H INC
    INSTALLARCHLIB INSTALLBIN INSTALLDIRS INSTALLMAN1DIR
d243 1
a243 1
    INST_MAN1DIR INST_MAN3DIR INST_SCRIPT LDFROM LIBPERL_A LIBS
d251 2
d254 1
d256 1
a256 1
	/;
d310 1
a310 1
	   lib_ext obj_ext ranlib sitelibexp sitearchexp so
a417 1
	#$self->{Correct_relativ_directories}++;
a418 2
    } else {
	$self->{Correct_relativ_directories}=0;
d421 1
a421 1
    my $class = ++$PACKNAME;
d424 3
a426 3
	print "Blessing Object into class [$class]\n" if $Verbose>=2;
	mv_all_methods("MY",$class);
	bless $self, $class;
d428 1
a428 1
	@@{"$class\:\:ISA"} = 'MM';
d437 3
d441 2
a442 1
		unless $self->file_name_is_absolute($self->{$key});
d444 1
a444 1
	$self->{PARENT}->{CHILDREN}->{$class} = $self if $self->{PARENT};
d456 2
a457 1
	my($pthinks) = $INC{'Config.pm'};
d459 9
a467 3
	if ($pthinks ne $self->catfile($Config{archlibexp},'Config.pm')){
	    $pthinks =~ s!/Config\.pm$!!;
	    $pthinks =~ s!.*/!!;
a570 5
	# This may go away, in mid 1996
	if ($self->{Correct_relativ_directories}){
	    $value = $self->catdir("..",$value)
		if $Prepend_dot_dot{$name} && ! $self->file_name_is_absolute($value);
	}
a572 2
    # This may go away, in mid 1996
    delete $self->{Correct_relativ_directories};
d869 13
a881 5
The short answer is: Don't. Run h2xs(1) before you start thinking
about writing a module. For so called pm-only modules that consist of
C<*.pm> files only, h2xs has the very useful C<-X> switch. This will
generate dummy files of all kinds that are useful for the module
developer.
d888 1
a888 1
The long answer is below.
d914 1
a914 1
MakeMaker checks for the existence of a file named "test.pl" in the
d924 16
d947 1
a947 1
../../lib, and INST_SCRIPT is not defined.
d969 1
a969 3
    perl -MConfig -le 'print join $/, map 
        sprintf("%20s: %s", $_, $Config{$_}),
        grep /^install/, keys %Config'
d977 7
a983 1
=head2 PREFIX attribute
d985 5
a989 2
The PREFIX attribute can be used to set the INSTALL* attributes in one
go. The quickest way to install a module in a non-standard place
d996 4
a999 2
Note, that the tilde expansion is done by MakeMaker, not by perl by
default, nor by make.
d1160 5
d1189 1
a1189 1
hash may contain further attributes, e.g. {LIBS => ...}, that have to
d1265 4
d1379 5
d1576 1
a1576 1
    /(\$[\w:]*\bVERSION)\b.*=/
d1583 2
a1584 1
    ( $VERSION ) = '$Revision: 1.201 $ ' =~ /\$Revision:\s+([^\s]+)/;
d1586 1
d1594 10
a1603 3
The file named in VERSION_FROM is added as a dependency to Makefile to
guarantee, that the Makefile contains the correct VERSION macro after
a change of the file.
d1714 2
a1715 1
            my($inherited) = shift->SUPER::c_o(@@_);
d1868 4
a1871 5
Andy Dougherty F<E<lt>doughera@@lafcol.lafayette.eduE<gt>>, Andreas
KE<ouml>nig F<E<lt>A.Koenig@@franz.ww.TU-Berlin.DEE<gt>>, Tim Bunce
F<E<lt>Tim.Bunce@@ig.co.ukE<gt>>.  VMS support by Charles Bailey
F<E<lt>bailey@@genetics.upenn.eduE<gt>>. OS/2 support by Ilya
Zakharevich F<E<lt>ilya@@math.ohio-state.eduE<gt>>. Contact the
@


1.1.1.1
log
@Import of Perl 5.003 into the tree.  Makefile.bsd-wrapper and
config.sh.OpenBSD are the only local changes.
@
text
@@


1.1.1.2
log
@perl5.005_03
@
text
@d5 1
a5 1
$VERSION = "5.4302";
d8 1
a8 1
($Revision = substr(q$Revision: 1.222 $, 10)) =~ s/\s+$//;
d28 2
a29 3
# &DynaLoader::mod2fname should be available to miniperl, thus 
# should be a pseudo-builtin (cmp. os2.c).
#eval {require DynaLoader;};
d37 3
a39 1
@@EXPORT_OK = qw($VERSION &Version_check &neatvalue &mkbootstrap &mksymlists);
d68 1
a68 1
# Now we can pull in the friends
d70 3
a72 4
$Is_VMS   = $^O eq 'VMS';
$Is_OS2   = $^O eq 'os2';
$Is_Mac   = $^O eq 'MacOS';
$Is_Win32 = $^O eq 'MSWin32';
a85 3
if ($Is_Win32) {
    require ExtUtils::MM_Win32;
}
d152 1
a152 1
sub ExtUtils::MakeMaker::prompt ($;$) ;
d155 1
a155 3

__DATA__

d172 1
a172 1
    $ISA_TTY = -t STDIN && (-t STDOUT || !(-f STDOUT || -c STDOUT)) ;	# Pipe?
a176 2
    local $|=1;
    print "$mess $dispdef";
d178 2
a180 2
    } else {
	print "$def\n";
d182 1
a182 1
    return ($ans ne '') ? $ans : $def;
d231 3
a233 4
    AUTHOR ABSTRACT ABSTRACT_FROM BINARY_LOCATION
    C CAPI CCFLAGS CONFIG CONFIGURE DEFINE DIR DISTNAME DL_FUNCS DL_VARS
    EXCLUDE_EXT EXE_FILES FIRST_MAKEFILE FULLPERL FUNCLIST H IMPORTS
    INC INCLUDE_EXT INSTALLARCHLIB INSTALLBIN INSTALLDIRS INSTALLMAN1DIR
d236 1
a236 1
    INST_MAN1DIR INST_MAN3DIR INST_SCRIPT LDFROM LIB LIBPERL_A LIBS
d238 2
a239 3
    NAME NEEDS_LINKING NOECHO NORECURS NO_VC OBJECT OPTIMIZE PERL PERLMAINCC
    PERL_ARCHLIB PERL_LIB PERL_SRC PERM_RW PERM_RWX
    PL_FILES PM PMLIBDIRS PPM_INSTALL_EXEC PPM_INSTALL_SCRIPT PREFIX
d243 3
d248 1
a248 1
    # IMPORTS is used under OS/2 and Win32
d271 1
a271 1
 install force perldepend makefile staticmake test ppd
d278 2
a279 2
 dir_target libscan makeaperl needs_linking perm_rw perm_rwx
 subdir_x test_via_harness test_via_script
d300 1
a300 1
	   lib_ext obj_ext osname osvers ranlib sitelibexp sitearchexp so exe_ext
d374 2
a375 3
# Why is/was this 'delete' here?  We need PREREQ_PM later to make PPDs.
#	} else {
#	    delete $self->{PREREQ_PM}{$prereq};
d408 1
d410 2
d414 1
a414 2
    my $newclass = ++$PACKNAME;
    local @@Parent = @@Parent;	# Protect against non-local exits
d417 3
a419 3
	print "Blessing Object into class [$newclass]\n" if $Verbose>=2;
	mv_all_methods("MY",$newclass);
	bless $self, $newclass;
d421 1
a421 1
	@@{"$newclass\:\:ISA"} = 'MM';
a429 3
		# PERL and FULLPERL may be command verbs instead of full
		# file specifications under VMS.  If so, don't turn them
		# into a filespec.
d431 1
a431 11
		unless $self->file_name_is_absolute($self->{$key})
		|| ($^O eq 'VMS' and ($key =~ /PERL$/ && $self->{$key} =~ /^[\w\-\$]+$/));
	}
	if ($self->{PARENT}) {
	    $self->{PARENT}->{CHILDREN}->{$newclass} = $self;
	    if (exists $self->{PARENT}->{CAPI}
		and not exists $self->{CAPI})
	    {
		# inherit, but only if already unspecified
		$self->{CAPI} = $self->{PARENT}->{CAPI};
	    }
d433 1
d435 1
a435 1
	parse_args($self,split(' ', $ENV{PERL_MM_OPT} || ''),@@ARGV);
d445 1
a445 2
	my($pthinks) = $self->canonpath($INC{'Config.pm'});
	my($cthinks) = $self->catfile($Config{'archlibexp'},'Config.pm');
d447 3
a449 9
	if ($pthinks ne $cthinks &&
	    !($Is_Win32 and lc($pthinks) eq lc($cthinks))) {
            print "Have $pthinks expected $cthinks\n";
	    if ($Is_Win32) {
		$pthinks =~ s![/\\]Config\.pm$!!i; $pthinks =~ s!.*[/\\]!!;
	    }
	    else {
		$pthinks =~ s!/Config\.pm$!!; $pthinks =~ s!.*/!!;
	    }
a462 3
    my($argv) = neatvalue(\@@ARGV);
    $argv =~ s/^\[/(/;
    $argv =~ s/\]$/)/;
a472 2
#   MakeMaker ARGV: $argv
#
d517 1
a521 23
sub WriteEmptyMakefile {
  if (-f 'Makefile.old') {
    chmod 0666, 'Makefile.old';
    unlink 'Makefile.old' or warn "unlink Makefile.old: $!";
  }
  rename 'Makefile', 'Makefile.old' or warn "rename Makefile Makefile.old: $!"
    if -f 'Makefile';
  open MF, '> Makefile' or die "open Makefile for write: $!";
  print MF <<'EOP';
all:

clean:

install:

makemakerdflt:

test:

EOP
  close MF or die "close Makefile for write: $!";
}

d553 5
d560 2
d858 5
a862 13
The short answer is: Don't.

        Always begin with h2xs.
        Always begin with h2xs!
        ALWAYS BEGIN WITH H2XS!

even if you're not building around a header file, and even if you
don't have an XS component.

Run h2xs(1) before you start thinking about writing a module. For so
called pm-only modules that consist of C<*.pm> files only, h2xs has
the C<-X> switch. This will generate dummy files of all kinds that are
useful for the module developer.
d869 1
a869 1
The long answer is the rest of the manpage :-)
d895 1
a895 1
MakeMaker checks for the existence of a file named F<test.pl> in the
a904 16
=head2 make testdb

A useful variation of the above is the target C<testdb>. It runs the
test under the Perl debugger (see L<perldebug>). If the file
F<test.pl> exists in the current directory, it is used for the test.

If you want to debug some other testfile, set C<TEST_FILE> variable
thusly:

  make testdb TEST_FILE=t/mytest.t

By default the debugger is called using C<-d> option to perl. If you
want to specify some other option, set C<TESTDB_SW> variable:

  make testdb TESTDB_SW=-Dx

d912 1
a912 1
 ../../lib, and INST_SCRIPT is not defined.
d934 3
a936 1
    perl '-V:install.*'
d944 1
a944 5
=head2 PREFIX and LIB attribute

PREFIX and LIB can be used to set several INSTALL* attributes in one
go. The quickest way to install a module in a non-standard place might
be
d946 2
a947 7
    perl Makefile.PL LIB=~/lib

This will install the module's architecture-independent files into
~/lib, the architecture-dependent files into ~/lib/$archname/auto.

Another way to specify many INSTALL directories with a single
parameter is PREFIX.
d954 2
a955 4
Note, that in both cases the tilde expansion is done by MakeMaker, not
by perl by default, nor by make. Conflicts between parameters LIB,
PREFIX and the various INSTALL* arguments are resolved so that 
XXX
d1103 1
a1103 3
=over 2

=item AUTHOR
d1105 2
a1106 2
String containing name (and email address) of package author(s). Is used
in PPD (Perl Package Description) files for PPM (Perl Package Manager).
d1108 1
a1108 20
=item ABSTRACT

One line description of the module. Will be included in PPD file.

=item ABSTRACT_FROM

Name of the file that contains the package description. MakeMaker looks
for a line in the POD matching /^($package\s-\s)(.*)/. This is typically
the first line in the "=head1 NAME" section. $2 becomes the abstract.

=item BINARY_LOCATION

Used when creating PPD files for binary packages.  It can be set to a
full or relative path or URL to the binary archive for a particular
architecture.  For example:

	perl Makefile.PL BINARY_LOCATION=x86/Agent.tar.gz

builds a PPD package that references a binary of the C<Agent> package,
located in the C<x86> directory relative to the PPD itself.
a1115 13
=item CAPI

Switch to force usage of the Perl C API even when compiling for PERL_OBJECT.

Note that this attribute is passed through to any recursive build,
but if and only if the submodule's Makefile.PL itself makes no mention
of the 'CAPI' attribute.

=item CCFLAGS

String that will be included in the compiler call command line between
the arguments INC and OPTIMIZE.

d1140 1
a1140 1
hash may contain further attributes, e.g. {LIBS =E<gt> ...}, that have to
d1159 6
a1164 6
Hashref of symbol names for routines to be made available as universal
symbols.  Each key/value pair consists of the package name and an
array of routine names in that package.  Used only under AIX, OS/2,
VMS and Win32 at present.  The routine names supplied will be expanded
in the same way as XSUB names are expanded by the XS() macro.
Defaults to
a1172 3
Please see the L<ExtUtils::Mksymlists> documentation for more information
about the DL_FUNCS, DL_VARS and FUNCLIST attributes.

d1175 4
a1178 3
Array of symbol names for variables to be made available as universal symbols.
Used only under AIX, OS/2, VMS and Win32 at present.  Defaults to [].
(e.g. [ qw(Foo_version Foo_numstreams Foo_tree ) ])
d1187 1
a1187 1
command line:  perl Makefile.PL EXCLUDE_EXT='Socket Safe'
d1195 7
a1211 7
=item FUNCLIST

This provides an alternate means to specify function names to be
exported from the extension.  Its value is a reference to an
array of function names to be exported by the extension.  These
names are passed through unaltered to the linker options file.

a1215 5
=item IMPORTS

This attribute is used to specify names to be imported into the
extension. It is only used on OS/2 and Win32.

d1233 1
a1233 1
command line:  perl Makefile.PL INCLUDE_EXT='POSIX Socket Devel::Peek'
d1271 1
a1271 1
=item INSTALLSITEARCH
d1273 1
a1273 1
Used by 'make install', which copies files from INST_ARCHLIB to this
d1276 1
a1276 1
=item INSTALLSITELIB
d1278 1
a1278 1
Used by 'make install', which copies files from INST_LIB to this
a1320 5
=item LIB

LIB can only be set at C<perl Makefile.PL> time. It has the effect of
setting both INSTALLPRIVLIB and INSTALLSITELIB to that value regardless any

a1409 7
=item NO_VC

In general any generated Makefile checks for the current version of
MakeMaker and the version the Makefile was built under. If NO_VC is
set, the version check is neglected. Do not write this into your
Makefile.PL, use it interactively instead.

a1442 10
=item PERM_RW

Desired permission for read/writable files. Defaults to C<644>.
See also L<MM_Unix/perm_rw>.

=item PERM_RWX

Desired permission for executable files. Defaults to C<755>.
See also L<MM_Unix/perm_rwx>.

d1452 1
a1452 5
themselves. If multiple files can be generated from the same *.PL
file then the value in the hash can be a reference to an array of
target file names. E.g.

  {'foobar.PL' => ['foobar1','foobar2']}
d1460 3
a1462 2
By default this will include *.pm and *.pl and the files found in
the PMLIBDIRS directories.  Defining PM in the
d1468 1
a1468 1
[ 'lib', $(BASEEXT) ]. The directories will be scanned and I<any> files
a1472 9
=item PPM_INSTALL_EXEC

Name of the executable used to run C<PPM_INSTALL_SCRIPT> below. (e.g. perl)

=item PPM_INSTALL_SCRIPT

Name of the script that gets executed by the Perl Package Manager after
the installation of a package.

d1518 1
a1518 1
    /([\$*])(([\w\:\']*)\bVERSION)\b.*\=/
d1525 1
a1525 2
    *VERSION = \'1.01';
    ( $VERSION ) = '$Revision: 1.222 $ ' =~ /\$Revision:\s+([^\s]+)/;
a1526 1
    *FOO::VERSION = \'1.11';
d1534 3
a1536 10
The file named in VERSION_FROM is not added as a dependency to
Makefile. This is not really correct, but it would be a major pain
during development to have to rewrite the Makefile for any smallish
change in that file. If you want to make sure that the Makefile
contains the correct VERSION macro after any change of the file, you
would have to do something like

    depend => { Makefile => '$(VERSION_FROM)' }

See attribute C<depend> below.
d1583 1
a1583 1
  {TARFLAGS => 'cvfF', COMPRESS => 'gzip', SUFFIX => '.gz',
d1598 4
d1628 6
d1647 1
a1647 2
	    package MY;	# so that "SUPER" works right
	    my $inherited = shift->SUPER::c_o(@@_);
d1652 4
a1655 4
If you are running experiments with embedding perl as a library into
other applications, you might find MakeMaker is not sufficient. You'd
better have a look at ExtUtils::Embed which is a collection of utilities
for embedding.
d1658 2
a1659 2
subroutine that fits your needs and submit the diffs to
F<perl5-porters@@perl.org> or F<comp.lang.perl.moderated> as appropriate.
d1777 1
a1777 1
    COMPRESS     ('gzip --best')
d1783 1
a1783 1
    SUFFIX       ('.gz')
d1791 1
a1791 30
    WriteMakefile( 'dist' => { COMPRESS=>"bzip2", SUFFIX=>".bz2" })

=head2 Disabling an extension

If some events detected in F<Makefile.PL> imply that there is no way
to create the Module, but this is a normal state of things, then you
can create a F<Makefile> which does nothing, but succeeds on all the
"usual" build targets.  To do so, use

   ExtUtils::MakeMaker::WriteEmptyMakefile();

instead of WriteMakefile().

This may be useful if other modules expect this module to be I<built>
OK, as opposed to I<work> OK (say, this system-dependent module builds
in a subdirectory of some other distribution, or is listed as a
dependency in a CPAN::Bundle, but the functionality is supported by
different means on the current architecture).

=head1 ENVIRONMENT

=over 8

=item PERL_MM_OPT

Command line options used by C<MakeMaker-E<gt>new()>, and thus by
C<WriteMakefile()>.  The string is split on whitespace, and the result
is processed before any actual command line arguments are processed.

=back
d1796 1
a1796 1
ExtUtils::Install, ExtUtils::Embed
d1800 5
a1804 4
Andy Dougherty <F<doughera@@lafcol.lafayette.edu>>, Andreas KE<ouml>nig
<F<A.Koenig@@franz.ww.TU-Berlin.DE>>, Tim Bunce <F<Tim.Bunce@@ig.co.uk>>.
VMS support by Charles Bailey <F<bailey@@newman.upenn.edu>>.  OS/2
support by Ilya Zakharevich <F<ilya@@math.ohio-state.edu>>.  Contact the
@


1.1.1.3
log
@virgin perl 5.6.0
@
text
@d5 1
a5 1
$VERSION = "5.45";
d20 1
a20 1
	    $ISA_TTY $Is_Mac $Is_OS2 $Is_VMS $Revision
a72 1
$Is_Cygwin= $^O eq 'cygwin';
d89 25
a113 2
if ($Is_Cygwin) {
    require ExtUtils::MM_Cygwin;
d116 3
a118 5
full_setup();

# The use of the Version_check target has been dropped between perl
# 5.5.63 and 5.5.64. We must keep the subroutine for a while so that
# old Makefiles can satisfy the Version_check target.
d139 24
d167 4
d231 1
d240 2
a241 4
    EXCLUDE_EXT EXE_FILES FIRST_MAKEFILE FULLPERL FUNCLIST H 
    HTMLLIBPODS HTMLSCRIPTPOD IMPORTS
    INC INCLUDE_EXT INSTALLARCHLIB INSTALLBIN INSTALLDIRS INSTALLHTMLPRIVLIBDIR
    INSTALLHTMLSCRIPTDIR INSTALLHTMLSITELIBDIR INSTALLMAN1DIR
a243 1
    INST_HTMLLIBDIR INST_HTMLSCRIPTDIR
a245 1
    PERL_MALLOC_OK
d248 1
a248 1
    PL_FILES PM PMLIBDIRS POLLUTE PPM_INSTALL_EXEC PPM_INSTALL_SCRIPT PREFIX
d275 1
a275 2
 dynamic_lib static static_lib htmlifypods manifypods processPL
 installbin subdirs
d306 1
a306 2
	   lib_ext obj_ext osname osvers ranlib sitelibexp sitearchexp so
	   exe_ext full_ar
d327 3
a329 3
	   INST_BIN 1 INST_EXE 1 INST_LIB 1 INST_ARCHLIB 1 INST_SCRIPT 1
	   MAP_TARGET 1 INST_HTMLLIBDIR 1 INST_HTMLSCRIPTDIR 1 
	   INST_MAN1DIR 1 INST_MAN3DIR 1 PERL_SRC 1 PERL 1 FULLPERL 1
d376 1
a376 1
	my $eval = "require $prereq";
d378 1
a378 5

	if ($@@) {
	    warn "Warning: prerequisite $prereq failed to load: $@@";
	}
	elsif ($prereq->VERSION < $self->{PREREQ_PM}->{$prereq} ){
d444 5
a448 7
	    foreach my $opt (qw(CAPI POLLUTE)) {
		if (exists $self->{PARENT}->{$opt}
		    and not exists $self->{$opt})
		    {
			# inherit, but only if already unspecified
			$self->{$opt} = $self->{PARENT}->{$opt};
		    }
d474 1
a474 1
	    print STDOUT <<END unless $self->{UNINSTALLED_PERL};
d976 5
a980 6
the macros INST_LIB, INST_ARCHLIB, INST_SCRIPT, INST_HTMLLIBDIR,
INST_HTMLSCRIPTDIR, INST_MAN1DIR, and INST_MAN3DIR.  All these default
to something below ./blib if you are I<not> building below the perl
source directory. If you I<are> building below the perl source,
INST_LIB and INST_ARCHLIB default to ../../lib, and INST_SCRIPT is not
defined.
d987 2
a988 2
		       	         INSTALLDIRS set to
       	       	              perl   	          site
d990 6
a995 8
    INST_ARCHLIB	INSTALLARCHLIB        INSTALLSITEARCH
    INST_LIB		INSTALLPRIVLIB        INSTALLSITELIB
    INST_HTMLLIBDIR	INSTALLHTMLPRIVLIBDIR INSTALLHTMLSITELIBDIR
    INST_HTMLSCRIPTDIR            INSTALLHTMLSCRIPTDIR
    INST_BIN			  INSTALLBIN
    INST_SCRIPT                   INSTALLSCRIPT
    INST_MAN1DIR                  INSTALLMAN1DIR
    INST_MAN3DIR                  INSTALLMAN3DIR
d1172 1
a1172 1
be necessary, and should only be done if the author of a package
a1215 3
[This attribute is obsolete in Perl 5.6.  PERL_OBJECT builds are C-compatible
by default.]

a1328 14
=item HTMLLIBPODS

Hashref of .pm and .pod files.  MakeMaker will default this to all
 .pod and any .pm files that include POD directives.  The files listed
here will be converted to HTML format and installed as was requested
at Configure time.

=item HTMLSCRIPTPODS

Hashref of pod-containing files.  MakeMaker will default this to all
EXE_FILES files that include POD directives.  The files listed
here will be converted to HTML format and installed as was requested
at Configure time.

a1368 16
=item INSTALLHTMLPRIVLIBDIR

This directory gets the HTML pages at 'make install' time. Defaults to
$Config{installhtmlprivlibdir}.

=item INSTALLHTMLSCRIPTDIR

This directory gets the HTML pages at 'make install' time. Defaults to
$Config{installhtmlscriptdir}.

=item INSTALLHTMLSITELIBDIR

This directory gets the HTML pages at 'make install' time. Defaults to
$Config{installhtmlsitelibdir}.


a1417 8
=item INST_HTMLLIBDIR

Directory to hold the man pages in HTML format at 'make' time

=item INST_HTMLSCRIPTDIR

Directory to hold the man pages in HTML format at 'make' time

d1429 1
a1429 1
'make'. Defaults to "./blib/script", just to have a dummy location during
a1432 28
=item PERL_MALLOC_OK

defaults to 0.  Should be set to TRUE if the extension can work with
the memory allocation routines substituted by the Perl malloc() subsystem.
This should be applicable to most extensions with exceptions of those

=over

=item *

with bugs in memory allocations which are caught by Perl's malloc();

=item *

which interact with the memory allocator in other ways than via
malloc(), realloc(), free(), calloc(), sbrk() and brk();

=item *

which rely on special alignment which is not provided by Perl's malloc().

=back

B<NOTE.>  Negligence to set this flag in I<any one> of loaded extension
nullifies many advantages of Perl's malloc(), such as better usage of
system resources, error detection, memory usage reporting, catchable failure
of memory allocations, etc.

d1518 1
a1518 1
MakeMaker will figure out if an extension contains linkable code
d1520 1
a1520 1
accordingly, but you can speed it up a very little bit if you define
d1535 1
a1535 1
In general, any generated Makefile checks for the current version of
d1562 1
a1562 1
Same as above for architecture dependent files.
a1615 12
=item POLLUTE

Release 5.005 grandfathered old global symbol names by providing preprocessor
macros for extension source compatibility.  As of release 5.6, these
preprocessor definitions are not available by default.  The POLLUTE flag
specifies that the old names should still be defined:

  perl Makefile.PL POLLUTE=1

Please inform the module author if this is necessary to successfully install
a module under 5.6 or later.

d1644 2
a1645 2
Makefile. Caution! Do not use the SKIP attribute for the negligible
speedup. It may seriously damage the resulting Makefile. Only use it
d1768 1
a1768 1
can be deleted safely. MakeMaker recognizes when there's nothing to
a1778 4
=item test

  {TESTS => 't/*.t'}

d1781 1
a1781 1
  {MAXLEN => 8}
d1867 1
a1867 1
needed to build a new distribution as long as you are sure that the
@


1.1.1.4
log
@stock perl 5.6.1
@
text
@d47 1
a47 1
@@MM::ISA = qw[ExtUtils::MM_Unix ExtUtils::Liblist::Kid ExtUtils::MakeMaker];
d63 1
a63 1
package ExtUtils::Liblist::Kid;
d85 1
a85 1
    require ExtUtils::MM_MacOS;
d192 1
a192 1
    HTMLLIBPODS HTMLSCRIPTPODS IMPORTS
d203 1
a203 2
    PL_FILES PM PM_FILTER PMLIBDIRS POLLUTE PPM_INSTALL_EXEC
	PPM_INSTALL_SCRIPT PREFIX
a206 3

    MACPERL_SRC MACPERL_LIB MACLIBS_68K MACLIBS_PPC MACLIBS_SC MACLIBS_MRC
    MACLIBS_ALL_68K MACLIBS_ALL_PPC MACLIBS_SHARED
d242 1
d985 1
a985 1
~/lib, the architecture-dependent files into ~/lib/$archname.
d992 2
a993 2
This will replace the string specified by C<$Config{prefix}> in all
C<$Config{install*}> values.
d996 3
a998 19
by perl by default, nor by make.

Conflicts between parameters LIB,
PREFIX and the various INSTALL* arguments are resolved so that:

=over 4

=item *

setting LIB overrides any setting of INSTALLPRIVLIB, INSTALLARCHLIB,
INSTALLSITELIB, INSTALLSITEARCH (and they are not affected by PREFIX);

=item *

without LIB, setting PREFIX replaces the initial C<$Config{prefix}>
part of those INSTALL* arguments, even if the latter are explicitly
set (but are set to still start with C<$Config{prefix}>).

=back
d1001 1
a1001 1
or relatives, then the defaults for
d1148 5
a1162 5
=item AUTHOR

String containing name (and email address) of package author(s). Is used
in PPD (Perl Package Description) files for PPM (Perl Package Manager).

d1412 5
a1424 5
=item INST_LIB

Directory where we put library files of this extension while building
it.

d1440 28
d1476 1
a1476 2
LIB should only be set at C<perl Makefile.PL> time but is allowed as a
MakeMaker argument. It has the effect of
a1477 3
explicit setting of those arguments (or of PREFIX).  
INSTALLARCHLIB and INSTALLSITEARCH are set to the corresponding 
architecture subdirectory.
a1580 2
(Where BASEEXT is the last component of NAME, and OBJ_EXT is $Config{obj_ext}.)

d1597 1
a1597 1
Same as below, but for architecture dependent files.
a1602 28
=item PERL_MALLOC_OK

defaults to 0.  Should be set to TRUE if the extension can work with
the memory allocation routines substituted by the Perl malloc() subsystem.
This should be applicable to most extensions with exceptions of those

=over 4

=item *

with bugs in memory allocations which are caught by Perl's malloc();

=item *

which interact with the memory allocator in other ways than via
malloc(), realloc(), free(), calloc(), sbrk() and brk();

=item *

which rely on special alignment which is not provided by Perl's malloc().

=back

B<NOTE.>  Negligence to set this flag in I<any one> of loaded extension
nullifies many advantages of Perl's malloc(), such as better usage of
system resources, error detection, memory usage reporting, catchable failure
of memory allocations, etc.

a1650 25
(Where BASEEXT is the last component of NAME.)

=item PM_FILTER

A filter program, in the traditional Unix sense (input from stdin, output
to stdout) that is passed on each .pm file during the build (in the
pm_to_blib() phase).  It is empty by default, meaning no filtering is done.

Great care is necessary when defining the command if quoting needs to be
done.  For instance, you would need to say:

  {'PM_FILTER' => 'grep -v \\"^\\#\\"'}

to remove all the leading coments on the fly during the build.  The
extra \\ are necessary, unfortunately, because this variable is interpolated
within the context of a Perl program built on the command line, and double
quotes are what is used with the -e switch to build that command line.  The
# is escaped for the Makefile, since what is going to be generated will then
be:

  PM_FILTER = grep -v \"^\#\"

Without the \\ before the #, we'd have the start of a Makefile comment,
and the macro would be incorrectly defined.

a1727 1
    our $VERSION = 1.2.3;	# new for perl5.6.0 
a1734 2
(Putting C<my> or C<local> on the preceding line will work o.k.)

a1787 2

(ANY_TARGET must not be given a double-colon rule by MakeMaker.)
@


1.1.1.5
log
@stock perl 5.8.0 from CPAN
@
text
@d1 2
d5 5
a9 1
BEGIN {require 5.005_03;}
a10 4
$VERSION = "6.03";
$Version_OK = "5.49";   # Makefiles older than $Version_OK will die
                        # (Will be checked from MakeMaker version 4.13 onwards)
($Revision = substr(q$Revision: 1.63 $, 10)) =~ s/\s+$//;
d15 1
a17 7
            @@ISA @@EXPORT @@EXPORT_OK
            $ISA_TTY $Revision $VERSION $Verbose $Version_OK %Config 
            %Keep_after_flush %MM_Sections @@Prepend_parent
            %Recognized_Att_Keys @@Get_from_Config @@MM_Sections @@Overridable 
            @@Parent $PACKNAME
           );
use strict;
d19 17
d38 22
a59 1
@@EXPORT_OK = qw($VERSION &neatvalue &mkbootstrap &mksymlists);
d61 32
a92 4
# These will go away once the last of the Win32 & VMS specific code is 
# purged.
my $Is_VMS     = $^O eq 'VMS';
my $Is_Win32   = $^O eq 'MSWin32';
d96 15
a110 6
require ExtUtils::MM;  # Things like CPAN assume loading ExtUtils::MakeMaker
                       # will give them MM.

require ExtUtils::MY;  # XXX pre-5.8 versions of ExtUtils::Embed expect
                       # loading ExtUtils::MakeMaker will give them MY.
                       # This will go when Embed is it's own CPAN module.
d112 6
d121 1
a122 1
    require ExtUtils::MY;
d124 1
a124 151

    _verify_att(\%att);

    my $mm = MM->new(\%att);
    $mm->flush;

    return $mm;
}


# Basic signatures of the attributes WriteMakefile takes.  Each is the
# reference type.  Empty value indicate it takes a non-reference
# scalar.
my %Att_Sigs =
(
 ABSTRACT           => '',
 ABSTRACT_FROM      => '',
 AUTHOR             => '',
 BINARY_LOCATION    => '',
 C                  => 'array',
 CCFLAGS            => '',
 CONFIG             => 'array',
 CONFIGURE          => 'code',
 DEFINE             => '',
 DIR                => 'array',
 DISTNAME           => '',
 DL_FUNCS           => 'hash',
 DL_VARS            => 'array',
 EXCLUDE_EXT        => 'array',
 EXE_FILES          => 'array',
 FIRST_MAKEFILE     => '',
 FULLPERL           => '',
 FULLPERLRUN        => '',
 FULLPERLRUNINST    => '',
 FUNCLIST           => 'array',
 H                  => 'array',
 IMPORTS            => 'hash',
 INC                => '',
 INCLUDE_EXT        => 'array',
 INSTALLARCHLIB     => '',
 INSTALLBIN         => '',
 INSTALLDIRS        => '',
 INSTALLMAN1DIR     => '',
 INSTALLMAN3DIR     => '',
 INSTALLPRIVLIB     => '',
 INSTALLSCRIPT      => '',
 INSTALLSITEARCH    => '',
 INSTALLSITEBIN     => '',
 INSTALLSITELIB     => '',
 INSTALLSITEMAN1DIR => '',
 INSTALLSITEMAN3DIR => '',
 INSTALLVENDORARCH  => '',
 INSTALLVENDORBIN   => '',
 INSTALLVENDORLIB   => '',
 INSTALLVENDORMAN1DIR   => '',
 INSTALLVENDORMAN3DIR   => '',
 INST_ARCHLIB       => '',
 INST_BIN           => '',
 INST_LIB           => '',
 INST_MAN1DIR       => '',
 INST_MAN3DIR       => '',
 INST_SCRIPT        => '',
 _KEEP_AFTER_FLUSH  => '',
 LDDLFLAGS          => '',
 LDFROM             => '',
 LIB                => '',
 LIBPERL_A          => '',
 LIBS               => ['array',''],
 LINKTYPE           => '',
 MAKEAPERL          => '',
 MAKEFILE           => '',
 MAN1PODS           => 'hash',
 MAN3PODS           => 'hash',
 MAP_TARGET         => '',
 MYEXTLIB           => '',
 NAME               => '',
 NEEDS_LINKING      => '',
 NOECHO             => '',
 NORECURS           => '',
 NO_VC              => '',
 OBJECT             => '',
 OPTIMIZE           => '',
 PERL               => '',
 PERL_CORE          => '',
 PERLMAINCC         => '',
 PERL_ARCHLIB       => '',
 PERL_LIB           => '',
 PERL_MALLOC_OK     => '',
 PERLRUN            => '',
 PERLRUNINST        => '',
 PERL_SRC           => '',
 PERM_RW            => '',
 PERM_RWX           => '',
 PL_FILES           => 'hash',
 PM                 => 'hash',
 PMLIBDIRS          => 'array',
 PM_FILTER          => '',
 POLLUTE            => '',
 PPM_INSTALL_EXEC   => '',
 PPM_INSTALL_SCRIPT => '',
 PREFIX             => '',
 PREREQ_FATAL       => '',
 PREREQ_PM          => 'hash',
 PREREQ_PRINT       => '',
 PRINT_PREREQ       => '',
 SITEPREFIX         => '',
 SKIP               => 'array',
 TYPEMAPS           => 'array',
 VENDORPREFIX       => '',
 VERBINST           => '',
 VERSION            => '',
 VERSION_FROM       => '',
 XS                 => 'hash',
 XSOPT              => '',
 XSPROTOARG         => '',
 XS_VERSION         => '',

 clean      => 'hash',
 depend     => 'hash',
 dist       => 'hash',
 dynamic_lib=> 'hash',
 linkext    => 'hash',
 macro      => 'hash',
 realclean  => 'hash',
 test       => 'hash',
 tool_autosplit => 'hash',
);


sub _verify_att {
    my($att) = @@_;

    while( my($key, $val) = each %$att ) {
        my $sig = $Att_Sigs{$key};
        unless( defined $sig ) {
            warn "WARNING: $key is not a known parameter.\n";
            next;
        }

        my @@sigs   = ref $sig ? @@$sig : $sig;
        my $given = lc ref $val;
        unless( grep $given eq $_, @@sigs ) {
            my $takes = join " or ", map { $_ ne '' ? "$_ reference"
                                                    : "string/number"
                                         } @@sigs;
            my $has   = $given ne '' ? "$given reference"
                                     : "string/number";
            warn "WARNING: $key takes a $takes not a $has.\n".
                 "         Please inform the author.\n";
        }
    }
d129 2
a130 3
    $ISA_TTY = -t STDIN && (-t STDOUT || !(-f STDOUT || -c STDOUT)) ;   # Pipe?
    Carp::confess("prompt function called without an argument") 
        unless defined $mess;
a134 1
    local $\;
d136 4
a139 8
    if ($ISA_TTY && !$ENV{PERL_MM_USE_DEFAULT}) {
        $ans = <STDIN>;
        if( defined $ans ) {
            chomp $ans;
        }
        else { # user hit ctrl-D
            print "\n";
        }
d141 1
a141 4
    else {
        print "$def\n";
    }
    return (!defined $ans || $ans eq '') ? $def : $ans;
d146 7
a152 9
    use Cwd qw(cwd abs_path);
    my $pwd = cwd() || die "Can't figure out your cwd!";

    local @@INC = map eval {abs_path($_) if -e} || $_, @@INC;
    push @@INC, '.';     # '.' has to always be at the end of @@INC

    foreach my $dir (@@{$self->{DIR}}){
        my($abs) = $self->catdir($pwd,$dir);
        $self->eval_in_x($abs);
d159 1
d161 10
a170 5

    {
        package main;
        do './Makefile.PL';
    };
d172 6
a177 6
#         if ($@@ =~ /prerequisites/) {
#             die "MakeMaker WARNING: $@@";
#         } else {
#             warn "WARNING from evaluation of $dir/Makefile.PL: $@@";
#         }
        die "ERROR from evaluation of $dir/Makefile.PL: $@@";
d187 1
a187 1
    my @@attrib_help = qw/
d191 8
a198 16
    EXCLUDE_EXT EXE_FILES FIRST_MAKEFILE 
    FULLPERL FULLPERLRUN FULLPERLRUNINST
    FUNCLIST H IMPORTS
    INST_ARCHLIB INST_SCRIPT INST_BIN INST_LIB INST_MAN1DIR INST_MAN3DIR
    INSTALLDIRS
    PREFIX          SITEPREFIX      VENDORPREFIX
    INSTALLPRIVLIB  INSTALLSITELIB  INSTALLVENDORLIB
    INSTALLARCHLIB  INSTALLSITEARCH INSTALLVENDORARCH
    INSTALLBIN      INSTALLSITEBIN  INSTALLVENDORBIN
    INSTALLMAN1DIR          INSTALLMAN3DIR
    INSTALLSITEMAN1DIR      INSTALLSITEMAN3DIR
    INSTALLVENDORMAN1DIR    INSTALLVENDORMAN3DIR
    INSTALLSCRIPT 
    PERL_LIB        PERL_ARCHLIB 
    SITELIBEXP      SITEARCHEXP 
    INC INCLUDE_EXT LDFROM LIB LIBPERL_A LIBS
d202 1
a202 2
    PERLRUN PERLRUNINST PERL_CORE
    PERL_SRC PERM_RW PERM_RWX
d204 2
a205 2
    PPM_INSTALL_SCRIPT PREREQ_FATAL PREREQ_PM PREREQ_PRINT PRINT_PREREQ
    SKIP TYPEMAPS VERSION VERSION_FROM XS XSOPT XSPROTOARG
d208 1
d211 1
a211 1
        /;
d225 1
a225 1
        qw(
d234 1
a234 1
 dynamic_lib static static_lib manifypods processPL
d239 1
a239 1
          ); # loses section ordering
d245 2
a246 2
 subdir_x test_via_harness test_via_script init_PERL
                         ];
d252 1
a252 1
                         ];
d263 14
a276 13
        qw(
           ar cc cccdlflags ccdlflags dlext dlsrc ld lddlflags ldflags libc
           lib_ext obj_ext osname osvers ranlib sitelibexp sitearchexp so
           exe_ext full_ar
          );

    foreach my $item (@@attrib_help){
        $Recognized_Att_Keys{$item} = 1;
    }
    foreach my $item (@@Get_from_Config) {
        $Recognized_Att_Keys{uc $item} = $Config{$item};
        print "Attribute '\U$item\E' => '$Config{$item}'\n"
            if ($Verbose >= 2);
d284 8
a291 5
    @@Prepend_parent = qw(
           INST_BIN INST_LIB INST_ARCHLIB INST_SCRIPT
           MAP_TARGET INST_MAN1DIR INST_MAN3DIR PERL_SRC
           PERL FULLPERL
    );
d294 2
a295 2
        NEEDS_LINKING HAS_LINK_CODE
        /;
d319 1
a319 1
sub new {
a322 11
    if ("@@ARGV" =~ /\bPREREQ_PRINT\b/) {
        require Data::Dumper;
        print Data::Dumper->Dump([$self->{PREREQ_PM}], [qw(PREREQ_PM)]);
    }

    # PRINT_PREREQ is RedHatism.
    if ("@@ARGV" =~ /\bPRINT_PREREQ\b/) {
        print join(" ", map { "perl($_)>=$self->{PREREQ_PM}->{$_} " } sort keys %{$self->{PREREQ_PM}}), "\n";
        exit 0;
   }

d325 1
a325 1
        check_manifest();
a331 1
    my %configure_att;         # record &{$self->{CONFIGURE}} attributes
d334 34
a367 26
    my(%unsatisfied) = ();
    foreach my $prereq (sort keys %{$self->{PREREQ_PM}}) {
        eval "require $prereq";

        my $pr_version = $prereq->VERSION || 0;

        if ($@@) {
            warn sprintf "Warning: prerequisite %s %s not found.\n", 
              $prereq, $self->{PREREQ_PM}{$prereq} 
                   unless $self->{PREREQ_FATAL};
            $unsatisfied{$prereq} = 'not installed';
        } elsif ($pr_version < $self->{PREREQ_PM}->{$prereq} ){
            warn sprintf "Warning: prerequisite %s %s not found. We have %s.\n",
              $prereq, $self->{PREREQ_PM}{$prereq}, 
                ($pr_version || 'unknown version') 
                  unless $self->{PREREQ_FATAL};
            $unsatisfied{$prereq} = $self->{PREREQ_PM}->{$prereq} ? 
              $self->{PREREQ_PM}->{$prereq} : 'unknown version' ;
        }
    }
    if (%unsatisfied && $self->{PREREQ_FATAL}){
        my $failedprereqs = join ', ', map {"$_ $unsatisfied{$_}"} 
                            keys %unsatisfied;
        die qq{MakeMaker FATAL: prerequisites not found ($failedprereqs)\n
               Please install these modules first and rerun 'perl Makefile.PL'.\n};
    }
d370 5
a374 6
        if (ref $self->{CONFIGURE} eq 'CODE') {
            %configure_att = %{&{$self->{CONFIGURE}}};
            $self = { %$self, %configure_att };
        } else {
            Carp::croak "Attribute 'CONFIGURE' to WriteMakefile() not a code reference\n";
        }
d379 1
a379 1
        Carp::carp("WARNING: Please rerun 'perl Makefile.PL' to regenerate your Makefiles\n");
d383 1
a383 1
    local @@Parent = @@Parent;    # Protect against non-local exits
d385 6
a390 7
        no strict 'refs';
        print "Blessing Object into class [$newclass]\n" if $Verbose>=2;
        mv_all_methods("MY",$newclass);
        bless $self, $newclass;
        push @@Parent, $self;
        require ExtUtils::MY;
        @@{"$newclass\:\:ISA"} = 'MM';
d394 23
a416 33
        $self->{PARENT} = $Parent[-2];
        my $key;
        for $key (@@Prepend_parent) {
            next unless defined $self->{PARENT}{$key};
            $self->{$key} = $self->{PARENT}{$key};
            unless ($^O eq 'VMS' && $key =~ /PERL$/) {
                $self->{$key} = $self->catdir("..",$self->{$key})
                  unless $self->file_name_is_absolute($self->{$key});
            } else {
                # PERL or FULLPERL will be a command verb or even a
                # command with an argument instead of a full file
                # specification under VMS.  So, don't turn the command
                # into a filespec, but do add a level to the path of
                # the argument if not already absolute.
                my @@cmd = split /\s+/, $self->{$key};
                $cmd[1] = $self->catfile('[-]',$cmd[1])
                  unless (@@cmd < 2) || $self->file_name_is_absolute($cmd[1]);
                $self->{$key} = join(' ', @@cmd);
            }
        }
        if ($self->{PARENT}) {
            $self->{PARENT}->{CHILDREN}->{$newclass} = $self;
            foreach my $opt (qw(POLLUTE PERL_CORE)) {
                if (exists $self->{PARENT}->{$opt}
                    and not exists $self->{$opt})
                    {
                        # inherit, but only if already unspecified
                        $self->{$opt} = $self->{PARENT}->{$opt};
                    }
            }
        }
        my @@fm = grep /^FIRST_MAKEFILE=/, @@ARGV;
        parse_args($self,@@fm) if @@fm;
d418 1
a418 1
        parse_args($self,split(' ', $ENV{PERL_MM_OPT} || ''),@@ARGV);
d428 5
a432 6
        require VMS::Filespec if $Is_VMS;
        my($pthinks) = $self->canonpath($INC{'Config.pm'});
        my($cthinks) = $self->catfile($Config{'archlibexp'},'Config.pm');
        $pthinks = VMS::Filespec::vmsify($pthinks) if $Is_VMS;
        if ($pthinks ne $cthinks &&
            !($Is_Win32 and lc($pthinks) eq lc($cthinks))) {
d434 9
a442 9
            if ($Is_Win32) {
                $pthinks =~ s![/\\]Config\.pm$!!i; $pthinks =~ s!.*[/\\]!!;
            }
            else {
                $pthinks =~ s!/Config\.pm$!!; $pthinks =~ s!.*/!!;
            }
            print STDOUT <<END unless $self->{UNINSTALLED_PERL};
Your perl and your Config.pm seem to have different ideas about the 
architecture they are running on.
d445 2
a446 2
This may or may not cause problems. Please check your installation of perl 
if you have problems building this extension.
d448 1
a448 1
        }
a452 1
    $self->init_PERM();
d464 1
a464 1
#       ANY CHANGES MADE HERE WILL BE LOST!
d471 5
a475 26
    foreach my $key (sort keys %initial_att){
        my($v) = neatvalue($initial_att{$key});
        $v =~ s/(CODE|HASH|ARRAY|SCALAR)\([\dxa-f]+\)/$1\(...\)/;
        $v =~ tr/\n/ /s;
        push @@{$self->{RESULT}}, "#     $key => $v";
    }
    undef %initial_att;        # free memory

    if (defined $self->{CONFIGURE}) {
       push @@{$self->{RESULT}}, <<END;

#   MakeMaker 'CONFIGURE' Parameters:
END
        if (scalar(keys %configure_att) > 0) {
            foreach my $key (sort keys %configure_att){
               my($v) = neatvalue($configure_att{$key});
               $v =~ s/(CODE|HASH|ARRAY|SCALAR)\([\dxa-f]+\)/$1\(...\)/;
               $v =~ tr/\n/ /s;
               push @@{$self->{RESULT}}, "#     $key => $v";
            }
        }
        else
        {
           push @@{$self->{RESULT}}, "# no values returned";
        }
        undef %configure_att;  # free memory
d481 1
a481 1
        $self->{SKIPHASH}{$skip} = 1;
d486 3
a488 3
        for (qw/install dist dist_basics dist_core dist_dir dist_test dist_ci/) {
            $self->{SKIPHASH}{$_} = 1;
        }
d494 1
a494 1
        $self->eval_in_subdirs if @@{$self->{DIR}};
d497 12
a508 11
    foreach my $section ( @@MM_Sections ){
        print "Processing Makefile '$section' section\n" if ($Verbose >= 2);
        my($skipit) = $self->skipcheck($section);
        if ($skipit){
            push @@{$self->{RESULT}}, "\n# --- MakeMaker $section section $skipit.";
        } else {
            my(%a) = %{$self->{$section} || {}};
            push @@{$self->{RESULT}}, "\n# --- MakeMaker $section section:";
            push @@{$self->{RESULT}}, "# " . join ", ", %a if $Verbose && %a;
            push @@{$self->{RESULT}}, $self->nicetext($self->$section( %a ));
        }
d517 8
a524 13
    Carp::croak "WriteEmptyMakefile: Need even number of args" if @@_ % 2;

    my %att = @@_;
    my $self = MM->new(\%att);
    if (-f "$self->{MAKEFILE}.old") {
      chmod 0666, "$self->{MAKEFILE}.old";
      unlink "$self->{MAKEFILE}.old" or warn "unlink $self->{MAKEFILE}.old: $!";
    }
    rename $self->{MAKEFILE}, "$self->{MAKEFILE}.old"
      or warn "rename $self->{MAKEFILE} $self->{MAKEFILE}.old: $!"
        if -f $self->{MAKEFILE};
    open MF, '>'.$self->{MAKEFILE} or die "open $self->{MAKEFILE} for write: $!";
    print MF <<'EOP';
d536 1
a536 1
    close MF or die "close $self->{MAKEFILE} for write: $!";
d542 7
a548 8
    # avoid warning
    $ExtUtils::Manifest::Quiet = $ExtUtils::Manifest::Quiet = 1;
    my(@@missed) = ExtUtils::Manifest::manicheck();
    if (@@missed) {
        print STDOUT "Warning: the following files are missing in your kit:\n";
        print "\t", join "\n\t", @@missed;
        print STDOUT "\n";
        print STDOUT "Please inform the author.\n";
d550 1
a550 1
        print STDOUT "Looks good\n";
d556 15
a570 15
    foreach (@@args) {
        unless (m/(.*?)=(.*)/) {
            help(),exit 1 if m/^help$/;
            ++$Verbose if m/^verb/;
            next;
        }
        my($name, $value) = ($1, $2);
        if ($value =~ m/^~(\w+)?/) { # tilde with optional username
            $value =~ s [^~(\w*)]
                [$1 ?
                 ((getpwnam($1))[7] || "~$1") :
                 (getpwuid($>))[7]
                 ]ex;
        }
        $self->{uc($name)} = $value;
d575 8
a582 8
        my($msg)="'potential_libs' => '$self->{potential_libs}' should be";
        if ($self->{potential_libs}){
            print STDOUT "$msg changed to:\n\t'LIBS' => ['$self->{potential_libs}']\n";
        } else {
            print STDOUT "$msg deleted.\n";
        }
        $self->{LIBS} = [$self->{potential_libs}];
        delete $self->{potential_libs};
d586 6
a591 6
        my($armaybe) = $self->{ARMAYBE};
        print STDOUT "ARMAYBE => '$armaybe' should be changed to:\n",
                        "\t'dynamic_lib' => {ARMAYBE => '$armaybe'}\n";
        my(%dl) = %{$self->{dynamic_lib} || {}};
        $self->{dynamic_lib} = { %dl, ARMAYBE => $armaybe};
        delete $self->{ARMAYBE};
d594 3
a596 3
        print STDOUT "LDTARGET should be changed to LDFROM\n";
        $self->{LDFROM} = $self->{LDTARGET};
        delete $self->{LDTARGET};
d600 4
a603 4
        # So they can choose from the command line, which extensions they want
        # the grep enables them to have some colons too much in case they
        # have to build a list with the shell
        $self->{DIR} = [grep $_, split ":", $self->{DIR}];
d607 1
a607 1
        $self->{INCLUDE_EXT} = [grep $_, split '\s+', $self->{INCLUDE_EXT}];
d611 1
a611 1
        $self->{EXCLUDE_EXT} = [grep $_, split '\s+', $self->{EXCLUDE_EXT}];
d613 5
a617 5

    foreach my $mmkey (sort keys %$self){
        print STDOUT "  $mmkey => ", neatvalue($self->{$mmkey}), "\n" if $Verbose;
        print STDOUT "'$mmkey' is not a known MakeMaker parameter name.\n"
            unless exists $Recognized_Att_Keys{$mmkey};
d629 1
d637 1
a637 1
        last if -f "hints/$hint.pl";      # found
d639 1
a639 1
        last unless $hint =~ s/_[^_]*$//; # nothing to cut off
d641 1
a641 1
    my $hint_file = "hints/$hint.pl";
d643 13
a655 16
    return unless -f $hint_file;    # really there

    _run_hintfile($self, $hint_file);
}

sub _run_hintfile {
    no strict 'vars';
    local($self) = shift;       # make $self available to the hint file.
    my($hint_file) = shift;

    local $@@;
    print STDERR "Processing hints file $hint_file\n";
    my $ret = do "./$hint_file";
    unless( defined $ret ) {
        print STDERR $@@ if $@@;
    }
d660 1
a660 1
    no strict 'refs';
d662 1
d669 1
a669 13
    local $SIG{__WARN__} = sub { 
        # can't use 'no warnings redefined', 5.6 only
        warn @@_ unless $_[0] =~ /^Subroutine .* redefined/ 
    };
    foreach my $method (@@Overridable) {

        # We cannot say "next" here. Nick might call MY->makeaperl
        # which isn't defined right now

        # Above statement was written at 4.23 time when Tk-b8 was
        # around. As Tk-b9 only builds with 5.002something and MM 5 is
        # standard, we try to enable the next line again. It was
        # commented out until MM 5.23
d671 2
a672 1
        next unless defined &{"${from}::$method"};
d674 18
a691 1
        *{"${to}::$method"} = \&{"${from}::$method"};
d693 1
a693 11
        # delete would do, if we were sure, nobody ever called
        # MY->makeaperl directly

        # delete $symtab->{$method};

        # If we delete a method, then it will be undefined and cannot
        # be called.  But as long as we have Makefile.PLs that rely on
        # %MY:: being intact, we have to fill the hole with an
        # inheriting method:

        eval "package MY; sub $method { shift->SUPER::$method(\@@_); }";
d710 2
a711 2
#       #warn "***$inc*** deleted";
#       delete $INC{$inc};
d719 2
a720 2
        print STDOUT "Warning (non-fatal): Target 'dynamic' depends on targets ",
        "in skipped section 'dynamic_bs'\n"
d723 1
a723 1
        "in skipped section 'dynamic_lib'\n"
d728 1
a728 1
        "targets in skipped section 'dynamic_bs'\n"
d733 1
a733 1
        "in skipped section 'static_lib'\n"
d743 2
d749 1
d753 2
a754 1
        print FH "$chunk\n";
d757 1
d763 4
a766 4
    if ($self->{PARENT} && !$self->{_KEEP_AFTER_FLUSH}) {
        foreach (keys %$self) { # safe memory
            delete $self->{$_} unless $Keep_after_flush{$_};
        }
d798 8
a805 8
        my(@@m, @@neat);
        push @@m, "[";
        foreach my $elem (@@$v) {
            push @@neat, "q[$elem]";
        }
        push @@m, join ", ", @@neat;
        push @@m, "]";
        return join "", @@m;
d810 2
a811 2
        last unless defined $key; # cautious programming in case (undef,undef) is true
        push(@@m,"$key=>".neatvalue($val)) ;
d820 8
a827 8
        push @@m, "\n# Full list of MakeMaker attribute values:";
        foreach my $key (sort keys %$self){
            next if $key eq 'RESULT' || $key =~ /^[A-Z][a-z]/;
            my($v) = neatvalue($self->{$key});
            $v =~ s/(CODE|HASH|ARRAY|SCALAR)\([\dxa-f]+\)/$1\(...\)/;
            $v =~ tr/\n/ /s;
            push @@m, "# $key => $v";
        }
d832 1
d843 5
a847 1
  use ExtUtils::MakeMaker;
d849 1
a849 1
  WriteMakefile( ATTRIBUTE => VALUE [, ...] );
d862 1
a862 1
directory that contains a Makefile.PL is treated as a separate
d914 3
a916 2
current directory and if it exists it execute the script with the
proper set of perl C<-I> options.
d919 3
a921 7
execute all matching files in alphabetical order via the
L<Test::Harness> module with the C<-I> switches set correctly.

If you'd like to see the raw output of your tests, set the
C<TEST_VERBOSE> variable to true.

  make test TEST_VERBOSE=1
d929 1
a929 1
If you want to debug some other testfile, set the C<TEST_FILE> variable
d935 1
a935 1
want to specify some other option, set the C<TESTDB_SW> variable:
d942 6
a947 5
the macros INST_LIB, INST_ARCHLIB, INST_SCRIPT, INST_MAN1DIR and
INST_MAN3DIR.  All these default to something below ./blib if you are
I<not> building below the perl source directory. If you I<are>
building below the perl source, INST_LIB and INST_ARCHLIB default to
../../lib, and INST_SCRIPT is not defined.
d954 2
a955 2
                                 INSTALLDIRS set to
                           perl        site          vendor
d957 8
a964 7
                 PREFIX          SITEPREFIX          VENDORPREFIX
  INST_ARCHLIB   INSTALLARCHLIB  INSTALLSITEARCH     INSTALLVENDORARCH
  INST_LIB       INSTALLPRIVLIB  INSTALLSITELIB      INSTALLVENDORLIB
  INST_BIN       INSTALLBIN      INSTALLSITEBIN      INSTALLVENDORBIN
  INST_SCRIPT    INSTALLSCRIPT   INSTALLSCRIPT       INSTALLSCRIPT
  INST_MAN1DIR   INSTALLMAN1DIR  INSTALLSITEMAN1DIR  INSTALLVENDORMAN1DIR
  INST_MAN3DIR   INSTALLMAN3DIR  INSTALLSITEMAN3DIR  INSTALLVENDORMAN3DIR
d985 1
a985 1
    perl Makefile.PL PREFIX=~
d987 2
a988 3
This will install all files in the module under your home directory,
with man pages and libraries going into an appropriate place (usually
~/man and ~/lib).
d991 1
a991 1
parameter is LIB.
d993 1
a993 1
    perl Makefile.PL LIB=~/lib
d995 2
a996 2
This will install the module's architecture-independent files into
~/lib, the architecture-dependent files into ~/lib/$archname.
d1001 2
a1002 2
Conflicts between parameters LIB, PREFIX and the various INSTALL*
arguments are resolved so that:
d1019 6
a1024 8
If the user has superuser privileges, and is not working on AFS or
relatives, then the defaults for INSTALLPRIVLIB, INSTALLARCHLIB,
INSTALLSCRIPT, etc. will be appropriate, and this incantation will be
the best:

    perl Makefile.PL; 
    make; 
    make test
d1038 1
a1038 1
        INSTALLSCRIPT=/afs/there/now INSTALLMAN3DIR=/afs/for/manpages
d1057 1
a1057 1
extensions linked in that can be found in INST_ARCHLIB, SITELIBEXP,
d1162 2
a1163 2
The following attributes may be specified as arguments to WriteMakefile()
or as NAME=VALUE pairs on the command line.
d1188 1
a1188 1
        perl Makefile.PL BINARY_LOCATION=x86/Agent.tar.gz
d1199 11
d1304 1
a1304 9
Perl binary able to run this extension, load XS modules, etc...

=item FULLPERLRUN

Like PERLRUN, except it uses FULLPERL.

=item FULLPERLRUNINST

Like PERLRUNINST, except it uses FULLPERL.
d1317 14
d1334 1
a1334 3
extension. Takes a hash ref.

It is only used on OS/2 and Win32.
d1362 1
a1362 2
Directory to install binary files (e.g. tkperl) into if
INSTALLDIRS=perl.
d1366 20
a1385 2
Determines which of the sets of installation directories to choose:
perl, site or vendor.  Defaults to site.
d1389 3
d1394 2
a1395 4
These directories get the man pages at 'make install' time if
INSTALLDIRS=perl.  Defaults to $Config{installman*dir}.

If set to 'none', no man pages will be installed.
a1401 2
Defaults to $Config{installprivlib}.

a1411 5
=item INSTALLSITEBIN

Used by 'make install', which copies files from INST_BIN to this
directory if INSTALLDIRS is set to site (default).

d1417 1
a1417 1
=item INSTALLSITEMAN1DIR
d1419 1
a1419 1
=item INSTALLSITEMAN3DIR
d1421 1
a1421 3
These directories get the man pages at 'make install' time if
INSTALLDIRS=site (default).  Defaults to 
$(SITEPREFIX)/man/man$(MAN*EXT).
d1423 2
a1424 8
If set to 'none', no man pages will be installed.

=item INSTALLVENDORARCH

Used by 'make install', which copies files from INST_ARCHLIB to this
directory if INSTALLDIRS is set to vendor.

=item INSTALLVENDORBIN
d1426 1
a1426 2
Used by 'make install', which copies files from INST_BIN to this
directory if INSTALLDIRS is set to vendor.
d1428 2
a1429 1
=item INSTALLVENDORLIB
d1431 1
a1431 6
Used by 'make install', which copies files from INST_LIB to this
directory if INSTALLDIRS is set to vendor.

=item INSTALLVENDORMAN1DIR

=item INSTALLVENDORMAN3DIR
d1433 1
a1433 2
These directories get the man pages at 'make install' time if
INSTALLDIRS=vendor.  Defaults to $(VENDORPREFIX)/man/man$(MAN*EXT).
d1435 1
a1435 1
If set to 'none', no man pages will be installed.
d1437 1
a1437 8
=item INST_ARCHLIB

Same as INST_LIB for architecture dependent files.

=item INST_BIN

Directory to put real binary files during 'make'. These will be copied
to INSTALLBIN during 'make install'
a1458 8
=item LDDLFLAGS

Any special flags that might need to be passed to ld to create a
shared library suitable for dynamic loading.  It is up to the makefile
to use it.  (See L<Config/lddlflags>)

Defaults to $Config{lddlflags}.

d1461 1
a1461 1
Defaults to "$(OBJECT)" and is used in the ld command to specify
d1468 5
a1472 4
MakeMaker argument. It has the effect of setting both INSTALLPRIVLIB
and INSTALLSITELIB to that value regardless any explicit setting of
those arguments (or of PREFIX).  INSTALLARCHLIB and INSTALLSITEARCH
are set to the corresponding architecture subdirectory.
d1525 4
a1528 5
Hashref that assigns to *.pm and *.pod files the files into which the
manpages are to be written. MakeMaker parses all *.pod and *.pm files
for POD directives. Files that contain POD will be the default keys of
the MAN3PODS hashref. These will then be converted to man pages during
C<make> and will be installed during C<make install>.
a1586 5
=item PERL_CORE

Set only when MakeMaker is building the extensions of the Perl core
distribution.

d1594 1
a1594 5
Same as for PERL_LIB, but for architecture dependent files.

Used only when MakeMaker is building the extensions of the Perl core
distribution (because normally $(PERL_ARCHLIB) is automatically in @@INC,
and adding it would get in the way of PERL5LIB).
a1599 4
Used only when MakeMaker is building the extensions of the Perl core
distribution (because normally $(PERL_LIB) is automatically in @@INC,
and adding it would get in the way of PERL5LIB).

a1627 11
=item PERLRUN

Use this instead of $(PERL) when you wish to run perl.  It will set up
extra necessary flags for you.

=item PERLRUNINST

Use this instead of $(PERL) when you wish to run perl to work with
modules.  It will add things like -I$(INST_ARCH) and other necessary
flags so perl can see the modules you're about to install.

d1724 6
a1729 24
This overrides all the default install locations.  Man pages,
libraries, scripts, etc...  MakeMaker will try to make an educated
guess about where to place things under the new PREFIX based on your
Config defaults.  Failing that, it will fall back to a structure
which should be sensible for your platform.

If you specify LIB or any INSTALL* variables they will not be effected
by the PREFIX.

Defaults to $Config{installprefixexp}.

=item PREREQ_FATAL

Bool. If this parameter is true, failing to have the required modules
(or the right versions thereof) will be fatal. perl Makefile.PL will die
with the proper message.

Note: see L<Test::Harness> for a shortcut for stopping tests early if
you are missing dependencies.

Do I<not> use this parameter for simple requirements, which could be resolved
at a later time, e.g. after an unsuccessful B<make test> of your module.

It is I<extremely> rare to have to use C<PREREQ_FATAL> at all!
a1737 25
=item PREREQ_PRINT

Bool.  If this parameter is true, the prerequisites will be printed to
stdout and MakeMaker will exit.  The output format is

$PREREQ_PM = {
               'A::B' => Vers1,
               'C::D' => Vers2,
               ...
             };

=item PRINT_PREREQ

RedHatism for C<PREREQ_PRINT>.  The output format is different, though:

    perl(A::B)>=Vers1 perl(C::D)>=Vers2 ...

=item SITEPREFIX

Like PREFIX, but only for the site install locations.

Defaults to PREFIX (if set) or $Config{siteprefixexp}.  Perls prior to
5.6.0 didn't have an explicit siteprefix in the Config.  In those
cases $Config{installprefix} will be used.

d1740 1
a1740 1
Arrayref. E.g. [qw(name1 name2)] skip (do not write) sections of the
a1753 10
=item VENDORPREFIX

Like PREFIX, but only for the vendor install locations.

Defaults to PREFIX (if set) or $Config{vendorprefixexp}

=item VERBINST

If true, make install will be verbose

d1775 1
a1775 1
    ( $VERSION ) = '$Revision: 1.63 $ ' =~ /\$Revision:\s+([^\s]+)/;
d1778 1
a1778 1
    our $VERSION = 1.2.3;       # new for perl5.6.0 
d1895 1
a1895 1
Each subroutine returns the text it wishes to have written to
d1899 1
a1899 1
        sub MY::c_o { "new literal text" }
d1903 6
a1908 6
        package MY; # so that "SUPER" works right
        sub c_o {
            my $inherited = shift->SUPER::c_o(@@_);
            $inherited =~ s/old text/new text/;
            $inherited;
        }
d1917 1
a1917 1
F<makemaker@@perl.org>
d1919 1
a1919 2
For a complete description of all MakeMaker methods see
L<ExtUtils::MM_Unix>.
d1925 1
a1925 1
        return <<'MAKE_FRAG';
d1927 2
a1928 3
            cd sdbm && $(MAKE) all

    MAKE_FRAG
a1930 21
=head2 The End Of Cargo Cult Programming

WriteMakefile() now does some basic sanity checks on its parameters to
protect against typos and malformatted values.  This means some things
which happened to work in the past will now throw warnings and
possibly produce internal errors.

Some of the most common mistakes:

=over 2

=item C<<MAN3PODS => ' '>>

This is commonly used to supress the creation of man pages.  MAN3PODS
takes a hash ref not a string, but the above worked by accident in old
versions of MakeMaker.

The correct code is C<<MAN3PODS => { }>>.

=back

d1987 1
a1987 1
=item   make disttest
a2077 5
=item PERL_MM_USE_DEFAULT

If set to a true value then MakeMaker's prompt function will
always return the default without waiting for user input.

d2082 2
a2083 2
ExtUtils::MM_Unix, ExtUtils::Manifest ExtUtils::Install,
ExtUtils::Embed
d2087 6
a2092 13
Andy Dougherty <F<doughera@@lafayette.edu>>, Andreas KE<ouml>nig
<F<andreas.koenig@@mind.de>>, Tim Bunce <F<timb@@cpan.org>>.  VMS
support by Charles Bailey <F<bailey@@newman.upenn.edu>>.  OS/2 support
by Ilya Zakharevich <F<ilya@@math.ohio-state.edu>>.

Currently maintained by Michael G Schwern <F<schwern@@pobox.com>>

Send patches and ideas to <F<makemaker@@perl.org>>.

Send bug reports via http://rt.cpan.org/.  Please send your
generated Makefile along with your report.

For more up-to-date information, see http://www.makemaker.org.
@


1.1.1.6
log
@perl 5.8.2 from CPAN
@
text
@d5 4
a8 2
$VERSION = '6.17';
($Revision) = q$Revision: 1.133 $ =~ /Revision:\s+(\S+)/;
a12 1
use File::Path;
d16 2
a17 2
            $Revision $VERSION $Verbose %Config 
            @@Prepend_parent @@Parent
d19 1
a19 1
            $Filename
a31 4
# Our filename for diagnostic and debugging purposes.  More reliable
# than %INC (think caseless filesystems)
$Filename = __FILE__;

d60 6
a65 2
my %Att_Sigs;
my %Special_Sigs = (
d67 1
d70 1
d72 1
d77 4
d84 1
d86 28
d115 3
d120 20
d143 6
d150 3
d155 4
d160 3
a162 1
 _KEEP_AFTER_FLUSH  => '',
a169 1
 postamble  => 'hash',
a174 3
@@Att_Sigs{keys %Recognized_Att_Keys} = ('') x keys %Recognized_Att_Keys;
@@Att_Sigs{keys %Special_Sigs} = values %Special_Sigs;

d201 2
a202 1
    my($mess, $def) = @@_;
a204 3

    my $isa_tty = -t STDIN && (-t STDOUT || !(-f STDOUT || -c STDOUT)) ;

d207 1
a207 1

d211 1
a211 6

    my $ans;
    if ($ENV{PERL_MM_USE_DEFAULT} || (!$isa_tty && eof STDIN)) {
        print "$def\n";
    }
    else {
d220 3
a222 1

a258 4

# package name for the classes into which the first object will be blessed
my $PACKNAME = 'PACK000';

d262 3
d269 1
a269 1
    EXCLUDE_EXT EXE_FILES FIRST_MAKEFILE
a271 1

d274 1
a274 2
    DESTDIR PREFIX
    PERLPREFIX      SITEPREFIX      VENDORPREFIX
a283 1

d285 4
a288 3
    LINKTYPE MAKEAPERL MAKEFILE MAKEFILE_OLD MAN1PODS MAN3PODS MAP_TARGET 
    MYEXTLIB NAME NEEDS_LINKING NOECHO NO_META NORECURS NO_VC OBJECT OPTIMIZE 
    PERL_MALLOC_OK PERL PERLMAINCC PERLRUN PERLRUNINST PERL_CORE
a294 1

d313 2
a314 6
 post_initialize const_config constants platform_constants 
 tool_autosplit tool_xsubpp tools_other 

 makemakerdflt

 dist macro depend cflags const_loadlibs const_cccmd
d319 1
a319 3
 special_targets
 c_o xs_c xs_o
 top_targets linkext dlsyms dynamic dynamic_bs
d322 1
a322 3
 clean_subdirs clean realclean_subdirs realclean 
 metafile metafile_addtomanifest
 dist_basics dist_core distdir dist_test dist_ci
a354 3
    # 5.5.3 doesn't have any concept of vendor libs
    push @@Get_from_Config, qw( vendorarchexp vendorlibexp ) if $] >= 5.006;

d374 5
a404 5
    # Store the original args passed to WriteMakefile()
    foreach my $k (keys %$self) {
        $self->{ARGS}{$k} = $self->{$k};
    }

a407 1
        exit 0;
d412 1
a412 2
        print join(" ", map { "perl($_)>=$self->{PREREQ_PM}->{$_} " } 
                        sort keys %{$self->{PREREQ_PM}}), "\n";
d430 1
a430 3
        # 5.8.0 has a bug with require Foo::Bar alone in an eval, so an
        # extra statement is a workaround.
        eval "require $prereq; 0";
a433 3
        # convert X.Y_Z alpha version #s to X.YZ for easier comparisons
        $pr_version =~ s/(\d+)\.(\d+)_(\d+)/$1.$2$3/;

a485 5

            # Don't stomp on WriteMakefile() args.
            next if defined $self->{ARGS}{$key} and
                    $self->{ARGS}{$key} eq $self->{$key};

d487 1
a487 2

            unless ($Is_VMS && $key =~ /PERL$/) {
d523 1
a523 11
    $self->init_main;
    $self->init_VERSION;
    $self->init_dist;
    $self->init_INST;
    $self->init_INSTALL;
    $self->init_DEST;
    $self->init_dirscan;
    $self->init_xs;
    $self->init_PERL;
    $self->init_DIRFILESEP;
    $self->init_linker;
d550 1
a551 1
    $self->init_platform();
a571 2
        next if $key eq 'ARGS';

a585 1
               next if $key eq 'ARGS';
d607 1
a607 1
        for (qw/install dist dist_basics dist_core distdir dist_test dist_ci/) {
a618 4
        # Support for new foo_target() methods.
        my $method = $section;
        $method .= '_target' unless $self->can($method);

d627 1
a627 1
            push @@{$self->{RESULT}}, $self->nicetext($self->$method( %a ));
d641 7
a647 8
    if (-f $self->{MAKEFILE_OLD}) {
      _unlink($self->{MAKEFILE_OLD}) or 
        warn "unlink $self->{MAKEFILE_OLD}: $!";
    }
    if ( -f $self->{MAKEFILE} ) {
        _rename($self->{MAKEFILE}, $self->{MAKEFILE_OLD}) or
          warn "rename $self->{MAKEFILE} => $self->{MAKEFILE_OLD}: $!"
    }
d684 1
d696 1
a696 3

        # Remember the original args passed it.  It will be useful later.
        $self->{ARGS}{uc $name} = $self->{uc $name} = $value;
a740 1
        next if $mmkey eq 'ARGS';
d752 1
a752 5
    require File::Spec;
    my $curdir = File::Spec->curdir;

    my $hint_dir = File::Spec->catdir($curdir, "hints");
    return unless -d $hint_dir;
d762 1
a762 1
        last if -f File::Spec->catfile($hint_dir, "$hint.pl");  # found
d766 1
a766 1
    my $hint_file = File::Spec->catfile($hint_dir, "$hint.pl");
d778 1
a778 1
    local($@@, $!);
d780 3
a782 8

    # Just in case the ./ isn't on the hint file, which File::Spec can
    # often strip off, we bung the curdir into @@INC
    local @@INC = (File::Spec->curdir, @@INC);
    my $ret = do $hint_file;
    if( !defined $ret ) {
        my $error = $@@ || $!;
        print STDERR $error;
d886 1
a886 2
    _rename("MakeMaker.tmp", $finalname) or
      warn "rename MakeMaker.tmp => $finalname: $!";
a888 2
    my %keep = map { ($_ => 1) } qw(NEEDS_LINKING HAS_LINK_CODE);

d891 1
a891 1
            delete $self->{$_} unless $keep{$_};
a897 17

# This is a rename for OS's where the target must be unlinked first.
sub _rename {
    my($src, $dest) = @@_;
    chmod 0666, $dest;
    unlink $dest;
    return rename $src, $dest;
}

# This is an unlink for OS's where the target must be writable first.
sub _unlink {
    my @@files = @@_;
    chmod 0666, @@files;
    return unlink @@files;
}


d964 1
a964 1
ExtUtils::MakeMaker - Create a module Makefile
d989 18
a1006 1
See ExtUtils::MakeMaker::Tutorial.
d1080 1
a1080 1
                 PERLPREFIX      SITEPREFIX          VENDORPREFIX
a1359 12
=item DESTDIR

This is the root directory into which the code will be installed.  It
I<prepends itself to the normal prefix>.  For example, if your code
would normally go into /usr/local/lib/perl you could set DESTDIR=/tmp/
and installation would go into /tmp/usr/local/lib/perl.

This is primarily of use for people who repackage Perl modules.

NOTE: Due to the nature of make, it is important that you put the trailing
slash on your DESTDIR.  "/tmp/" not "/tmp".

d1367 2
a1368 18
A safe filename for the package. 

Defaults to NAME above but with :: replaced with -.

For example, Foo::Bar becomes Foo-Bar.

=item DISTVNAME

Your name for distributing the package with the version number
included.  This is used by 'make dist' to name the resulting archive
file.

Defaults to DISTNAME-VERSION.

For example, version 1.04 of Foo::Bar becomes Foo-Bar-1.04.

On some OS's where . has special meaning VERSION_SYM may be used in
place of VERSION.
a1409 5
If your executables start with something like #!perl or
#!/usr/bin/perl MakeMaker will change this to the path of the perl
'Makefile.PL' was invoked with so the programs will be sure to run
properly even if perl is not in /usr/bin/perl.

d1412 3
a1414 7
The name of the Makefile to be produced.  This is used for the second
Makefile that will be produced for the MAP_TARGET.

Defaults to 'Makefile' or 'Descrip.MMS' on VMS.

(Note: we couldn't use MAKEFILE because dmake uses this for something
else).
a1578 6
=item LD

Program to be used to link libraries for dynamic loading.

Defaults to $Config{ld}.

d1639 1
a1639 1
=item MAKEFILE_OLD
d1641 1
a1641 4
When 'make clean' or similar is run, the $(FIRST_MAKEFILE) will be
backed up at this location.

Defaults to $(FIRST_MAKEFILE).old or $(FIRST_MAKEFILE)_old on VMS.
d1683 3
a1685 6
Command so make does not print the literal commands its running.

By setting it to an empty string you can generate a Makefile that
prints all commands. Mainly used in debugging MakeMaker itself.

Defaults to C<@@>.
a1690 7
=item NO_META

When true, suppresses the generation and addition to the MANIFEST of
the META.yml module meta-data file during 'make distdir'.

Defaults to false.

a1768 10
=item PERLPREFIX

Directory under which core modules are to be installed.

Defaults to $Config{installprefixexp} falling back to
$Config{installprefix}, $Config{prefixexp} or $Config{prefix} should
$Config{installprefixexp} not exist.

Overridden by PREFIX.

d1885 2
d1911 1
a1911 2
stdout and MakeMaker will exit.  The output format is an evalable hash
ref.
d1927 1
a1927 1
Like PERLPREFIX, but only for the site install locations.
d1929 3
a1931 5
Defaults to $Config{siteprefixexp}.  Perls prior to 5.6.0 didn't have
an explicit siteprefix in the Config.  In those cases
$Config{installprefix} will be used.

Overridable by PREFIX
d1951 1
a1951 3
Like PERLPREFIX, but only for the vendor install locations.

Defaults to $Config{vendorprefixexp}.
d1953 1
a1953 1
Overridable by PREFIX
d1980 1
a1980 1
    $VERSION = sprintf "%d.%03d", q$Revision: 1.133 $ =~ /(\d+)/g;
a2003 5
=item VERSION_SYM

A sanitized VERSION with . replaced by _.  For places where . has
special meaning (some filesystems, RCS labels, etc...)

d2035 1
a2035 2
part of the Makefile.  Parameters are specified as a hash ref but are
passed to the method as a hash.
a2081 4
=item postamble

Anything put here will be passed to MY::postamble() if you have one.

a2214 4
Additionally, it will create a META.yml module meta-data file and add
this to your MANFIEST.  You can shut this behavior off with the NO_META
flag.

a2278 22

=head2 Module Meta-Data

Long plaguing users of MakeMaker based modules has been the problem of
getting basic information about the module out of the sources
I<without> running the F<Makefile.PL> and doing a bunch of messy
heuristics on the resulting F<Makefile>.  To this end a simple module
meta-data file has been introduced, F<META.yml>.

F<META.yml> is a YAML document (see http://www.yaml.org) containing
basic information about the module (name, version, prerequisites...)
in an easy to read format.  The format is developed and defined by the
Module::Build developers (see 
http://module-build.sourceforge.net/META-spec.html)

MakeMaker will automatically generate a F<META.yml> file for you and
add it to your F<MANIFEST> as part of the 'distdir' target (and thus
the 'dist' target).  This is intended to seamlessly and rapidly
populate CPAN with module meta-data.  If you wish to shut this feature
off, set the C<NO_META> C<WriteMakefile()> flag to true.


a2295 24
=head2 Other Handy Functions

=over 4

=item prompt

    my $value = prompt($message);
    my $value = prompt($message, $default);

The C<prompt()> function provides an easy way to request user input
used to write a makefile.  It displays the $message as a prompt for
input.  If a $default is provided it will be used as a default.  The
function returns the $value selected by the user.

If C<prompt()> detects that it is not running interactively and there
is nothing on STDIN or if the PERL_MM_USE_DEFAULT environment variable
is set to true, the $default will be used without prompting.  This
prevents automated processes from blocking on user input. 

If no $default is provided an empty string will be used instead.

=back


d2298 1
a2298 1
=over 4
a2332 8

=head1 LICENSE

This program is free software; you can redistribute it and/or 
modify it under the same terms as Perl itself.

See F<http://www.perl.com/perl/misc/Artistic.html>

@


1.1.1.7
log
@Import of stock perl 5.8.5
@
text
@d6 1
a6 1
($Revision) = q$Revision: 1.7 $ =~ /Revision:\s+(\S+)/;
d2043 1
a2043 1
    $VERSION = sprintf "%d.%03d", q$Revision: 1.7 $ =~ /(\d+)/g;
@


1.1.1.8
log
@perl 5.8.6 from CPAN
@
text
@d6 1
a6 1
($Revision) = q$Revision: 1.133 $ =~ /Revision:\s+(\S+)/;
d2043 1
a2043 1
    $VERSION = sprintf "%d.%03d", q$Revision: 1.133 $ =~ /(\d+)/g;
@


1.1.1.9
log
@perl 5.8.8 import
@
text
@a0 1
# $Id: /local/schwern.org/CPAN/ExtUtils-MakeMaker/trunk/lib/ExtUtils/MakeMaker.pm 4535 2005-05-20T23:08:34.937906Z schwern  $
d5 3
d9 1
a9 1
use ExtUtils::MakeMaker::Config;
d15 1
a15 1
            $VERSION $Verbose %Config 
a19 4

# Has to be on its own line with no $ after it to avoid being noticed by
# the version control system
use vars qw($Revision);
a21 3
$VERSION = '6.30';
($Revision = q$Revision: 4535 $) =~ /Revision:\s+(\S+)/;

d170 1
a170 2
        eval { $self->eval_in_x($abs); };
        last if $@@;
a172 1
    die $@@ if $@@;
d210 1
a210 1
    DESTDIR PREFIX INSTALLBASE
d229 1
a229 1
    SIGN SKIP TYPEMAPS VERSION VERSION_FROM XS XSOPT XSPROTOARG
d263 1
a263 1
 top_targets blibdirs linkext dlsyms dynamic dynamic_bs
d267 2
a268 2
 metafile signature
 dist_basics dist_core distdir dist_test dist_ci distmeta distsignature
d276 1
a276 1
 libscan makeaperl needs_linking perm_rw perm_rwx
d383 1
a383 3
        my $file = "$prereq.pm";
        $file =~ s{::}{/}g;
        eval { require $file };
d1016 1
a1016 1
  perl Makefile.PL PREFIX=~
a1093 9
Sometimes older versions of the module you're installing live in other
directories in @@INC.  Because Perl loads the first version of a module it 
finds, not the newest, you might accidentally get one of these older
versions even after installing a brand new version.  To delete I<all other
versions of the module you're installing> (not simply older ones) set the
C<UNINST> variable.

    make install UNINST=1

d1358 2
a1359 2
would normally go into F</usr/local/lib/perl> you could set DESTDIR=~/tmp/
and installation would go into F<~/tmp/usr/local/lib/perl>.
d1364 1
a1364 1
slash on your DESTDIR.  F<~/tmp/> not F<~/tmp>.
d1857 10
a1866 32
MakeMaker can run programs to generate files for you at build time.
By default any file named *.PL (except Makefile.PL and Build.PL) in
the top level directory will be assumed to be a Perl program and run
passing its own basename in as an argument.  For example...

    perl foo.PL foo

This behavior can be overridden by supplying your own set of files to
search.  PL_FILES accepts a hash ref, the key being the file to run
and the value is passed in as the first argument when the PL file is run.

    PL_FILES => {'bin/foobar.PL' => 'bin/foobar'}

Would run bin/foobar.PL like this:

    perl bin/foobar.PL bin/foobar

If multiple files from one program are desired an array ref can be used.

    PL_FILES => {'bin/foobar.PL' => [qw(bin/foobar1 bin/foobar2)]}

In this case the program will be run multiple times using each target file.

    perl bin/foobar.PL bin/foobar1
    perl bin/foobar.PL bin/foobar2

PL files are normally run B<after> pm_to_blib and include INST_LIB and
INST_ARCH in its C<@@INC> so the just built modules can be
accessed... unless the PL file is making a module (or anything else in
PM) in which case it is run B<before> pm_to_blib and does not include
INST_LIB and INST_ARCH in its C<@@INC>.  This apparently odd behavior
is there for backwards compatibility (and its somewhat DWIM).
d1868 1
a1993 11
=item SIGN

When true, perform the generation and addition to the MANIFEST of the
SIGNATURE file in the distdir during 'make distdir', via 'cpansign
-s'.

Note that you need to install the Module::Signature module to
perform this operation.

Defaults to false.

d2043 1
a2043 1
    $VERSION = sprintf "%d.%03d", q$Revision: 4535 $ =~ /(\d+)/g;
d2195 1
a2195 1
C<makemaker@@perl.org>
d2222 1
a2222 1
=item C<< MAN3PODS => ' ' >>
d2228 1
a2228 1
The correct code is C<< MAN3PODS => { } >>.
d2288 3
a2290 3
Additionally, it will create a META.yml module meta-data file in the
distdir and add this to the distdir's MANFIEST.  You can shut this
behavior off with the NO_META flag.
a2433 4
=item PERL_CORE

Same as the PERL_CORE parameter.  The parameter overrides this.

d2443 4
a2446 4
Andy Dougherty C<doughera@@lafayette.edu>, Andreas KE<ouml>nig
C<andreas.koenig@@mind.de>, Tim Bunce C<timb@@cpan.org>.  VMS
support by Charles Bailey C<bailey@@newman.upenn.edu>.  OS/2 support
by Ilya Zakharevich C<ilya@@math.ohio-state.edu>.
d2448 1
a2448 1
Currently maintained by Michael G Schwern C<schwern@@pobox.com>
d2450 1
a2450 1
Send patches and ideas to C<makemaker@@perl.org>.
d2455 1
a2455 1
For more up-to-date information, see L<http://www.makemaker.org>.
d2462 1
a2462 1
See L<http://www.perl.com/perl/misc/Artistic.html>
@


1.1.1.10
log
@import perl 5.10.0 from CPAN
@
text
@d1 1
a1 1
# $Id: /mirror/svn.schwern.org/CPAN/ExtUtils-MakeMaker/trunk/lib/ExtUtils/MakeMaker.pm 41145 2007-12-08T01:01:11.051959Z schwern  $
d13 1
a13 1
            $VERSION $Verbose %Config
d15 1
a15 1
            %Recognized_Att_Keys @@Get_from_Config @@MM_Sections @@Overridable
d24 2
a25 2
$VERSION = '6.42';
($Revision) = q$Revision: 41145 $ =~ /Revision:\s+(\S+)/;
d29 1
a29 2
@@EXPORT_OK = qw($VERSION &neatvalue &mkbootstrap &mksymlists
                &WriteEmptyMakefile);
d70 22
a91 24
 C                  => 'ARRAY',
 CONFIG             => 'ARRAY',
 CONFIGURE          => 'CODE',
 DIR                => 'ARRAY',
 DL_FUNCS           => 'HASH',
 DL_VARS            => 'ARRAY',
 EXCLUDE_EXT        => 'ARRAY',
 EXE_FILES          => 'ARRAY',
 FUNCLIST           => 'ARRAY',
 H                  => 'ARRAY',
 IMPORTS            => 'HASH',
 INCLUDE_EXT        => 'ARRAY',
 LIBS               => ['ARRAY',''],
 MAN1PODS           => 'HASH',
 MAN3PODS           => 'HASH',
 PL_FILES           => 'HASH',
 PM                 => 'HASH',
 PMLIBDIRS          => 'ARRAY',
 PMLIBPARENTDIRS    => 'ARRAY',
 PREREQ_PM          => 'HASH',
 SKIP               => 'ARRAY',
 TYPEMAPS           => 'ARRAY',
 XS                 => 'HASH',
 VERSION            => ['version',''],
d94 10
a103 10
 clean      => 'HASH',
 depend     => 'HASH',
 dist       => 'HASH',
 dynamic_lib=> 'HASH',
 linkext    => 'HASH',
 macro      => 'HASH',
 postamble  => 'HASH',
 realclean  => 'HASH',
 test       => 'HASH',
 tool_autosplit => 'HASH',
d121 7
a127 5
        my $given  = ref $val;
        unless( grep { $given eq $_ || ($_ && eval{$val->isa($_)}) } @@sigs ) {
            my $takes = join " or ", map { _format_att($_) } @@sigs;

            my $has = _format_att($given);
a133 11

sub _format_att {
    my $given = shift;
    
    return $given eq ''        ? "string/number"
         : uc $given eq $given ? "$given reference"
         :                       "$given object"
         ;
}


d211 1
a211 1
    EXCLUDE_EXT EXE_FILES EXTRA_META FIRST_MAKEFILE
d217 1
a217 1
    DESTDIR PREFIX INSTALL_BASE
d225 1
a225 1
    INSTALLSCRIPT   INSTALLSITESCRIPT  INSTALLVENDORSCRIPT
d229 2
a230 2
    INC INCLUDE_EXT LDFROM LIB LIBPERL_A LIBS LICENSE
    LINKTYPE MAKE MAKEAPERL MAKEFILE MAKEFILE_OLD MAN1PODS MAN3PODS MAP_TARGET 
d234 1
a234 1
    PL_FILES PM PM_FILTER PMLIBDIRS PMLIBPARENTDIRS POLLUTE PPM_INSTALL_EXEC
d284 1
a284 4
 subdir_x test_via_harness test_via_script 

 init_VERSION init_dist init_INST init_INSTALL init_DEST init_dirscan
 init_PM init_MANPODS init_xs init_PERL init_DIRFILESEP init_linker
d303 3
a305 3
           ar cc cccdlflags ccdlflags dlext dlsrc exe_ext full_ar ld 
           lddlflags ldflags libc lib_ext obj_ext osname osvers ranlib 
           sitelibexp sitearchexp so
d413 6
a418 7
    
     if (%unsatisfied && $self->{PREREQ_FATAL}){
        my $failedprereqs = join "\n", map {"    $_ $unsatisfied{$_}"} 
                            sort { $a cmp $b } keys %unsatisfied;
        die <<"END";
MakeMaker FATAL: prerequisites not found.
$failedprereqs
a419 4
Please install these modules first and rerun 'perl Makefile.PL'.
END
    }
    
d475 1
a475 1
            foreach my $opt (qw(POLLUTE PERL_CORE LINKTYPE)) {
a489 1

a493 1
    $self->init_MAKE;
a500 2
    $self->init_PM;
    $self->init_MANPODS;
a504 1
    $self->init_ABSTRACT;
d615 1
a615 3
            push @@{$self->{RESULT}}, $self->maketext_filter(
                $self->$method( %a )
            );
d625 1
a625 1
    Carp::croak "WriteEmptyMakefile: Need an even number of args" if @@_ % 2;
d629 7
a635 5
    
    my $new = $self->{MAKEFILE};
    my $old = $self->{MAKEFILE_OLD};
    if (-f $old) {
        _unlink($old) or warn "unlink $old: $!";
d637 1
a637 4
    if ( -f $new ) {
        _rename($new, $old) or warn "rename $new => $old: $!"
    }
    open MF, '>'.$new or die "open $new for write: $!";
d639 1
a639 1
all :
d641 1
a641 1
clean :
d643 1
a643 1
install :
d645 1
a645 1
makemakerdflt :
d647 1
a647 1
test :
d650 1
a650 1
    close MF or die "close $new for write: $!";
d875 1
d877 1
a877 4
    my $finalname = $self->{MAKEFILE};
    print STDOUT "Writing $finalname for $self->{NAME}\n";

    unlink($finalname, "MakeMaker.tmp", $Is_VMS ? 'Descrip.MMS' : ());
d885 1
d1025 1
a1025 1
  perl Makefile.PL INSTALL_BASE=~
d1087 1
a1087 1
  INST_SCRIPT    INSTALLSCRIPT   INSTALLSITESCRIPT   INSTALLVENDORSCRIPT
a1112 30
=head2 INSTALL_BASE

INSTALL_BASE can be passed into Makefile.PL to change where your
module will be installed.  INSTALL_BASE is more like what everyone
else calls "prefix" than PREFIX is.

To have everything installed in your home directory, do the following.

    # Unix users, INSTALL_BASE=~ works fine
    perl Makefile.PL INSTALL_BASE=/path/to/your/home/dir

Like PREFIX, it sets several INSTALL* attributes at once.  Unlike
PREFIX it is easy to predict where the module will end up.  The
installation pattern looks like this:

    INSTALLARCHLIB     INSTALL_BASE/lib/perl5/$Config{archname}
    INSTALLPRIVLIB     INSTALL_BASE/lib/perl5
    INSTALLBIN         INSTALL_BASE/bin
    INSTALLSCRIPT      INSTALL_BASE/bin
    INSTALLMAN1DIR     INSTALL_BASE/man/man1
    INSTALLMAN3DIR     INSTALL_BASE/man/man3

INSTALL_BASE in MakeMaker and C<--install_base> in Module::Build (as
of 0.28) install to the same location.  If you want MakeMaker and
Module::Build to install to the same location simply set INSTALL_BASE
and C<--install_base> to the same location.

INSTALL_BASE was added in 6.31.


d1116 2
a1117 1
go.  Here's an example for installing into your home directory.
d1119 1
a1119 2
    # Unix users, PREFIX=~ works fine
    perl Makefile.PL PREFIX=/path/to/your/home/dir
d1123 1
a1123 4
~/man and ~/lib).  How the exact location is determined is complicated
and depends on how your Perl was configured.  INSTALL_BASE works more
like what other build systems call "prefix" than PREFIX and we
recommend you use that instead.
d1548 1
a1548 1
directory if INSTALLDIRS=perl.
a1574 5
=item INSTALLSITESCRIPT

Used by 'make install' which copies files from INST_SCRIPT to this
directory if INSTALLDIRS is set to site (default).

a1598 5
=item INSTALLVENDORSCRIPT

Used by 'make install' which copies files from INST_SCRIPT to this
directory if INSTALLDIRS is set to is set to vendor.

a1681 9
=item LICENSE

The licensing terms of your distribution.  Generally its "perl" for the
same license as Perl itself.

See L<Module::Build::Authoring> for the list of options.

Defaults to "unknown".

a1687 14
=item MAKE

Variant of make you intend to run the generated Makefile with.  This
parameter lets Makefile.PL know what make quirks to account for when
generating the Makefile.

MakeMaker also honors the MAKE environment variable.  This parameter
takes precedent.

Currently the only significant values are 'dmake' and 'nmake' for Windows
users.

Defaults to $Config{make}.

d1940 1
a1940 1
to remove all the leading comments on the fly during the build.  The
d1987 5
a1991 2
(or the right versions thereof) will be fatal. C<perl Makefile.PL>
will C<die> instead of simply informing the user of the missing dependencies.
d1993 4
a1996 14
It is I<extremely> rare to have to use C<PREREQ_FATAL>. Its use by module
authors is I<strongly discouraged> and should never be used lightly.
Module installation tools have ways of resolving umet dependencies but
to do that they need a F<Makefile>.  Using C<PREREQ_FATAL> breaks this.
That's bad.

The only situation where it is appropriate is when you have
dependencies that are indispensible to actually I<write> a
F<Makefile>. For example, MakeMaker's F<Makefile.PL> needs L<File::Spec>.
If its not available it cannot write the F<Makefile>.

Note: see L<Test::Harness> for a shortcut for stopping tests early
if you are missing dependencies and are afraid that users might
use your module with an incomplete environment.
d2093 1
a2093 1
    ($VERSION) = q$Revision: 41145 $ =~ /(\d+)/g;
d2096 1
a2096 1
    our $VERSION = 1.2.3;       # new for perl5.6.0
a2103 11
L<version> will be loaded, if available, so this will work.

    our $VERSION = qv(1.2.3);   # version.pm will be loaded if available

Its up to you to declare a dependency on C<version>.  Also note that this
feature was introduced in MakeMaker 6.35.  Earlier versions of MakeMaker
require this:

    # All on one line
    use version; our $VERSION = qv(1.2.3);

d2164 1
a2164 1
  {ANY_TARGET => ANY_DEPENDENCY, ...}
d2274 1
a2274 1
This is commonly used to suppress the creation of man pages.  MAN3PODS
d2339 1
a2339 1
distdir and add this to the distdir's MANIFEST.  You can shut this
d2350 1
a2350 1
command, followed by $(TO_UNIX), which defaults to a null command under
d2435 1
a2435 2
    use ExtUtils::MakeMaker qw(WriteEmptyMakefile);
    WriteEmptyMakefile();
d2492 2
a2493 9
L<Module::Build> is a pure-Perl alternative to MakeMaker which does
not rely on make or any other external utility.  It is easier to
extend to suit your needs.

L<Module::Install> is a wrapper around MakeMaker which adds features
not normally available.

L<ExtUtils::ModuleMaker> and L<Module::Starter> are both modules to
help you setup your distribution.
@


1.1.1.11
log
@import perl 5.10.1
@
text
@d1 1
a1 1
# $Id$
d4 1
a4 3
use strict;

BEGIN {require 5.006;}
d11 20
a30 20
our $Verbose = 0;       # exported
our @@Parent;            # needs to be localized
our @@Get_from_Config;   # referenced by MM_Unix
our @@MM_Sections;
our @@Overridable;
my @@Prepend_parent;
my %Recognized_Att_Keys;

our $VERSION = '6.55_02';

# Emulate something resembling CVS $Revision$
(our $Revision = $VERSION) =~ s{_}{};
$Revision = int $Revision * 10000;

our $Filename = __FILE__;   # referenced outside MakeMaker

our @@ISA = qw(Exporter);
our @@EXPORT    = qw(&WriteMakefile &writeMakefile $Verbose &prompt);
our @@EXPORT_OK = qw($VERSION &neatvalue &mkbootstrap &mksymlists
                    &WriteEmptyMakefile);
d37 4
d48 1
a48 1
                       # This will go when Embed is its own CPAN module.
a85 2
 META_ADD           => 'HASH',
 META_MERGE         => 'HASH',
a90 2
 BUILD_REQUIRES     => 'HASH',
 CONFIGURE_REQUIRES => 'HASH',
d125 1
a125 1
        unless( grep { _is_of_type($val, $_) } @@sigs ) {
a135 13
# Check if a given thing is a reference or instance of $type
sub _is_of_type {
    my($thing, $type) = @@_;

    return 1 if ref $thing eq $type;

    local $SIG{__DIE__};
    return 1 if eval{ $thing->isa($type) };

    return 0;
}


d146 1
a146 1
sub prompt ($;$) {  ## no critic
d222 2
a223 3
    C CAPI CCFLAGS CONFIG CONFIGURE DEFINE DIR DISTNAME DISTVNAME
    DL_FUNCS DL_VARS
    EXCLUDE_EXT EXE_FILES FIRST_MAKEFILE
d242 1
a242 2
    LINKTYPE MAKE MAKEAPERL MAKEFILE MAKEFILE_OLD MAN1PODS MAN3PODS MAP_TARGET
    META_ADD META_MERGE MIN_PERL_VERSION BUILD_REQUIRES CONFIGURE_REQUIRES
d245 1
a245 1
    PERL_SRC PERM_DIR PERM_RW PERM_RWX
d295 1
a295 1
 libscan makeaperl needs_linking
a375 9
    $self = {} unless defined $self;

    $self->{PREREQ_PM}      ||= {};
    $self->{BUILD_REQUIRES} ||= {};

    # Temporarily bless it into MM so it can be used as an
    # object.  It will be blessed into a temp package later.
    bless $self, "MM";

d377 3
a379 1
        $self->_PREREQ_PRINT;
d384 3
a386 1
        $self->_PRINT_PREREQ;
d394 2
a397 33
    # Translate X.Y.Z to X.00Y00Z
    if( defined $self->{MIN_PERL_VERSION} ) {
        $self->{MIN_PERL_VERSION} =~ s{ ^ (\d+) \. (\d+) \. (\d+) $ }
                                      {sprintf "%d.%03d%03d", $1, $2, $3}ex;
    }

    my $perl_version_ok = eval {
        local $SIG{__WARN__} = sub { 
            # simulate "use warnings FATAL => 'all'" for vintage perls
            die @@_;
        };
        !$self->{MIN_PERL_VERSION} or $self->{MIN_PERL_VERSION} <= $]
    };
    if (!$perl_version_ok) {
        if (!defined $perl_version_ok) {
            warn <<'END';
Warning: MIN_PERL_VERSION is not in a recognized format.
Recommended is a quoted numerical value like '5.005' or '5.008001'.
END
        }
        elsif ($self->{PREREQ_FATAL}) {
            die sprintf <<"END", $self->{MIN_PERL_VERSION}, $];
MakeMaker FATAL: perl version too low for this distribution.
Required is %s. We run %s.
END
        }
        else {
            warn sprintf
                "Warning: Perl version %s or higher required. We run %s.\n",
                $self->{MIN_PERL_VERSION}, $];
        }
    }

d402 8
a409 8
    my $prereqs = $self->_all_prereqs;
    foreach my $prereq (sort keys %$prereqs) {
        my $required_version = $prereqs->{$prereq};

        my $installed_file = MM->_installed_file_for_module($prereq);
        my $pr_version = 0;
        $pr_version = MM->parse_version($installed_file) if $installed_file;
        $pr_version = 0 if $pr_version eq 'undef';
d414 1
a414 1
        if (!$installed_file) {
d416 1
a416 1
              $prereq, $required_version
a417 1

d419 1
a419 2
        }
        elsif ($pr_version < $required_version ){
d421 2
a422 1
              $prereq, $required_version, ($pr_version || 'unknown version') 
d424 2
a425 2

            $unsatisfied{$prereq} = $required_version ? $required_version : 'unknown version' ;
d428 2
a429 2

    if (%unsatisfied && $self->{PREREQ_FATAL}){
d457 1
a462 2

        no strict 'refs';   ## no critic;
d468 2
a469 1
        for my $key (@@Prepend_parent) {
d531 24
a554 4
    $self->arch_check(
        $INC{'Config.pm'},
        $self->catfile($Config{'archlibexp'}, "Config.pm")
    );
d574 1
d577 9
a585 1
    push @@{$self->{RESULT}}, $self->_MakeMaker_Parameters_section(\%initial_att);
d609 2
a610 1
    for my $skip (@@{$self->{SKIP} || []}) {
d665 2
a666 2
    open my $mfh, '>', $new or die "open $new for write: $!";
    print $mfh <<'EOP';
d678 1
a678 1
    close $mfh or die "close $new for write: $!";
a680 64

=begin private

=head3 _installed_file_for_module

  my $file = MM->_installed_file_for_module($module);

Return the first installed .pm $file associated with the $module.  The
one which will show up when you C<use $module>.

$module is something like "strict" or "Test::More".

=end private

=cut

sub _installed_file_for_module {
    my $class  = shift;
    my $prereq = shift;

    my $file = "$prereq.pm";
    $file =~ s{::}{/}g;

    my $path;
    for my $dir (@@INC) {
        my $tmp = File::Spec->catfile($dir, $file);
        if ( -r $tmp ) {
            $path = $tmp;
            last;
        }
    }

    return $path;
}


# Extracted from MakeMaker->new so we can test it
sub _MakeMaker_Parameters_section {
    my $self = shift;
    my $att  = shift;

    my @@result = <<'END';
#   MakeMaker Parameters:
END

    # CPAN.pm takes prereqs from this field in 'Makefile'
    # and does not know about BUILD_REQUIRES
    if( $att->{PREREQ_PM} || $att->{BUILD_REQUIRES} ) {
        %{$att->{'PREREQ_PM'}} = (%{$att->{'PREREQ_PM'}||{}}, %{$att->{'BUILD_REQUIRES'}||{}});
    }

    foreach my $key (sort keys %$att){
        next if $key eq 'ARGS';

        my($v) = neatvalue($att->{$key});
        $v =~ s/(CODE|HASH|ARRAY|SCALAR)\([\dxa-f]+\)/$1\(...\)/;
        $v =~ tr/\n/ /s;
        push @@result, "#     $key => $v";
    }

    return @@result;
}


d797 1
a797 1
    our $self;
d816 2
d840 11
a850 3
        {
            no strict 'refs';   ## no critic
            *{"${to}::$method"} = \&{"${from}::$method"};
d852 1
a852 13
            # If we delete a method, then it will be undefined and cannot
            # be called.  But as long as we have Makefile.PLs that rely on
            # %MY:: being intact, we have to fill the hole with an
            # inheriting method:

            {
                package MY;
                my $super = "SUPER::".$method;
                *{$method} = sub {
                    shift->$super(@@_);
                };
            }
        }
d901 2
d908 1
a908 2
    open(my $fh,">", "MakeMaker.tmp")
        or die "Unable to open MakeMaker.tmp: $!";
d910 2
a911 2
    for my $chunk (@@{$self->{RESULT}}) {
        print $fh "$chunk\n";
d914 1
a914 1
    close $fh;
a1391 8
=item BUILD_REQUIRES

A hash of modules that are needed to build your module but not run it.

This will go into the C<build_requires> field of your F<META.yml>.

The format is the same as PREREQ_PM.

a1429 11
=item CONFIGURE_REQUIRES

A hash of modules that are required to run Makefile.PL itself, but not
to run your distribution.

This will go into the C<configure_requires> field of your F<META.yml>.

Defaults to C<{ "ExtUtils::MakeMaker" => 0 }>

The format is the same as PREREQ_PM.

d1448 2
a1449 2
Ref to array of subdirectories containing Makefile.PLs e.g. ['sdbm']
in ext/SDBM_File
d1669 1
a1669 1
directory if INSTALLDIRS is set to vendor.
d1759 1
a1759 1
See L<Module::Build::API> for the list of options.
a1802 9
This hash should map POD files (or scripts containing POD) to the
man file names under the C<blib/man1/> directory, as in the following
example:

  MAN1PODS            => {
    'doc/command.pod'    => 'blib/man1/command.1',
    'scripts/script.pl'  => 'blib/man1/script.1',
  }

a1810 2
Example similar to MAN1PODS.

a1815 19
=item META_ADD

=item META_MERGE

A hashrefs of items to add to the F<META.yml>.

They differ in how they behave if they have the same key as the
default metadata.  META_ADD will override the default value with it's
own.  META_MERGE will merge its value with the default.

Unless you want to override the defaults, prefer META_MERGE so as to
get the advantage of any future defaults.

=item MIN_PERL_VERSION

The minimum required version of Perl for this distribution.

Either 5.006001 or 5.6.1 format is acceptable.

a1957 4
=item PERM_DIR

Desired permission for directories. Defaults to C<755>.

d1961 1
d1966 1
d2102 4
a2105 13
A hash of modules that are needed to run your module.  The keys are
the module names ie. Test::More, and the minimum version is the
value. If the required version number is 0 any version will do.

This will go into the C<requires> field of your F<META.yml>.

    PREREQ_PM => {
        # Require Test::More at least 0.47
        "Test::More" => "0.47",

        # Require any version of Acme::Buffy
        "Acme::Buffy" => 0,
    }
d2113 5
a2117 12
  $PREREQ_PM = {
                 'A::B' => Vers1,
                 'C::D' => Vers2,
                 ...
               };

If a distribution defines a minimal required perl version, this is
added to the output as an additional line of the form:

  $MIN_PERL_VERSION = '5.008001';

If BUILD_REQUIRES is not empty, it will be dumped as $BUILD_REQUIRES hasref.
a2124 4
A minimal required perl version, if present, will look like this:

    perl(perl)>=5.008001

d2193 3
a2195 3
    $VERSION   = '1.00';
    *VERSION   = \'1.01';
    ($VERSION) = q$Revision$ =~ /(\d+)/g;
d2198 1
d2202 2
a2203 3
    # Bad
    my $VERSION         = '1.01';
    local $VERSION      = '1.02';
d2206 1
a2206 1
"Version strings" are incompatible should not be used.
d2208 5
a2212 8
    # Bad
    $VERSION = 1.2.3;
    $VERSION = v1.2.3;

L<version> objects are fine.  As of MakeMaker 6.35 version.pm will be
automatically loaded, but you must declare the dependency on version.pm.
For compatibility with older MakeMaker you should load on the same line 
as $VERSION is declared.
d2517 1
a2517 7
    WriteMakefile(
        ...other options...
        dist => {
            COMPRESS => "bzip2",
            SUFFIX   => ".bz2"
        }
    );
@


