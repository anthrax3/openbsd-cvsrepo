head	1.10;
access;
symbols
	OPENBSD_4_8:1.9.0.4
	OPENBSD_4_8_BASE:1.9
	OPENBSD_4_7:1.9.0.2
	OPENBSD_4_7_BASE:1.9
	PERL_5_10_1:1.1.1.8
	OPENBSD_4_6:1.8.0.6
	OPENBSD_4_6_BASE:1.8
	OPENBSD_4_5:1.8.0.2
	OPENBSD_4_5_BASE:1.8
	PERL_5_10_0:1.1.1.7
	OPENBSD_4_4:1.7.0.10
	OPENBSD_4_4_BASE:1.7
	OPENBSD_4_3:1.7.0.8
	OPENBSD_4_3_BASE:1.7
	OPENBSD_4_2:1.7.0.6
	OPENBSD_4_2_BASE:1.7
	OPENBSD_4_1:1.7.0.4
	OPENBSD_4_1_BASE:1.7
	OPENBSD_4_0:1.7.0.2
	OPENBSD_4_0_BASE:1.7
	PERL_5_8_8:1.1.1.6
	OPENBSD_3_9:1.6.0.10
	OPENBSD_3_9_BASE:1.6
	OPENBSD_3_8:1.6.0.8
	OPENBSD_3_8_BASE:1.6
	OPENBSD_3_7:1.6.0.6
	OPENBSD_3_7_BASE:1.6
	PERL_5_8_6:1.1.1.5
	OPENBSD_3_6:1.6.0.4
	OPENBSD_3_6_BASE:1.6
	PERL_5_8_5:1.1.1.5
	PERL_5_8_3:1.1.1.5
	OPENBSD_3_5:1.6.0.2
	OPENBSD_3_5_BASE:1.6
	PERL_5_8_2:1.1.1.5
	OPENBSD_3_4:1.5.0.4
	OPENBSD_3_4_BASE:1.5
	OPENBSD_3_3:1.5.0.2
	OPENBSD_3_3_BASE:1.5
	PERL_5_8_0:1.1.1.4
	OPENBSD_3_2:1.4.0.6
	OPENBSD_3_2_BASE:1.4
	OPENBSD_3_1:1.4.0.4
	OPENBSD_3_1_BASE:1.4
	OPENBSD_3_0:1.4.0.2
	OPENBSD_3_0_BASE:1.4
	PERL_5_6_1:1.1.1.3
	OPENBSD_2_9:1.3.0.6
	OPENBSD_2_9_BASE:1.3
	OPENBSD_2_8:1.3.0.4
	OPENBSD_2_8_BASE:1.3
	OPENBSD_2_7:1.3.0.2
	OPENBSD_2_7_BASE:1.3
	PERL_5_6_0:1.1.1.2
	OPENBSD_2_6:1.2.0.2
	OPENBSD_2_6_BASE:1.2
	PERL_500503:1.1.1.1
	CPAN:1.1.1
	OPENBSD_2_5:1.1.0.6
	OPENBSD_2_5_BASE:1.1
	OPENBSD_2_4:1.1.0.4
	OPENBSD_2_4_BASE:1.1
	OPENBSD_2_3:1.1.0.2
	OPENBSD_2_3_BASE:1.1;
locks; strict;
comment	@# @;


1.10
date	2010.09.24.14.59.38;	author millert;	state dead;
branches;
next	1.9;

1.9
date	2009.10.12.18.24.40;	author millert;	state Exp;
branches;
next	1.8;

1.8
date	2008.09.29.17.36.11;	author millert;	state Exp;
branches;
next	1.7;

1.7
date	2006.03.28.19.23.06;	author millert;	state Exp;
branches;
next	1.6;

1.6
date	2003.12.03.03.02.37;	author millert;	state Exp;
branches;
next	1.5;

1.5
date	2002.10.27.22.25.26;	author millert;	state Exp;
branches;
next	1.4;

1.4
date	2001.05.24.18.35.28;	author millert;	state Exp;
branches;
next	1.3;

1.3
date	2000.04.06.17.06.26;	author millert;	state Exp;
branches;
next	1.2;

1.2
date	99.04.29.22.51.50;	author millert;	state Exp;
branches;
next	1.1;

1.1
date	97.11.30.07.57.23;	author millert;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	99.04.29.22.40.01;	author millert;	state Exp;
branches;
next	1.1.1.2;

1.1.1.2
date	2000.04.06.16.09.41;	author millert;	state Exp;
branches;
next	1.1.1.3;

1.1.1.3
date	2001.05.24.18.23.26;	author millert;	state Exp;
branches;
next	1.1.1.4;

1.1.1.4
date	2002.10.27.22.14.59;	author millert;	state Exp;
branches;
next	1.1.1.5;

1.1.1.5
date	2003.12.03.02.44.02;	author millert;	state Exp;
branches;
next	1.1.1.6;

1.1.1.6
date	2006.03.28.18.48.42;	author millert;	state Exp;
branches;
next	1.1.1.7;

1.1.1.7
date	2008.09.29.17.18.32;	author millert;	state Exp;
branches;
next	1.1.1.8;

1.1.1.8
date	2009.10.12.18.10.50;	author millert;	state Exp;
branches;
next	;


desc
@perl 5.004_04
@


1.10
log
@remove files no longer in perl 5.12.2 (or that have moved)
@
text
@package ExtUtils::Command;

use 5.00503;
use strict;
use Carp;
use File::Copy;
use File::Compare;
use File::Basename;
use File::Path qw(rmtree);
require Exporter;
use vars qw(@@ISA @@EXPORT @@EXPORT_OK $VERSION);
@@ISA       = qw(Exporter);
@@EXPORT    = qw(cp rm_f rm_rf mv cat eqtime mkpath touch test_f test_d chmod
                dos2unix);
$VERSION = '1.16';

my $Is_VMS   = $^O eq 'VMS';
my $Is_VMS_mode = $Is_VMS;
my $Is_VMS_noefs = $Is_VMS;
my $Is_Win32 = $^O eq 'MSWin32';

if( $Is_VMS ) {
    my $vms_unix_rpt;
    my $vms_efs;
    my $vms_case;

    if (eval { local $SIG{__DIE__}; require VMS::Feature; }) {
        $vms_unix_rpt = VMS::Feature::current("filename_unix_report");
        $vms_efs = VMS::Feature::current("efs_charset");
        $vms_case = VMS::Feature::current("efs_case_preserve");
    } else {
        my $unix_rpt = $ENV{'DECC$FILENAME_UNIX_REPORT'} || '';
        my $efs_charset = $ENV{'DECC$EFS_CHARSET'} || '';
        my $efs_case = $ENV{'DECC$EFS_CASE_PRESERVE'} || '';
        $vms_unix_rpt = $unix_rpt =~ /^[ET1]/i; 
        $vms_efs = $efs_charset =~ /^[ET1]/i;
        $vms_case = $efs_case =~ /^[ET1]/i;
    }
    $Is_VMS_mode = 0 if $vms_unix_rpt;
    $Is_VMS_noefs = 0 if ($vms_efs);
}


=head1 NAME

ExtUtils::Command - utilities to replace common UNIX commands in Makefiles etc.

=head1 SYNOPSIS

  perl -MExtUtils::Command -e cat files... > destination
  perl -MExtUtils::Command -e mv source... destination
  perl -MExtUtils::Command -e cp source... destination
  perl -MExtUtils::Command -e touch files...
  perl -MExtUtils::Command -e rm_f files...
  perl -MExtUtils::Command -e rm_rf directories...
  perl -MExtUtils::Command -e mkpath directories...
  perl -MExtUtils::Command -e eqtime source destination
  perl -MExtUtils::Command -e test_f file
  perl -MExtUtils::Command -e test_d directory
  perl -MExtUtils::Command -e chmod mode files...
  ...

=head1 DESCRIPTION

The module is used to replace common UNIX commands.  In all cases the
functions work from @@ARGV rather than taking arguments.  This makes
them easier to deal with in Makefiles.  Call them like this:

  perl -MExtUtils::Command -e some_command some files to work on

and I<NOT> like this:

  perl -MExtUtils::Command -e 'some_command qw(some files to work on)'

For that use L<Shell::Command>.

Filenames with * and ? will be glob expanded.


=head2 FUNCTIONS

=over 4

=cut

# VMS uses % instead of ? to mean "one character"
my $wild_regex = $Is_VMS ? '*%' : '*?';
sub expand_wildcards
{
 @@ARGV = map(/[$wild_regex]/o ? glob($_) : $_,@@ARGV);
}


=item cat

    cat file ...

Concatenates all files mentioned on command line to STDOUT.

=cut 

sub cat ()
{
 expand_wildcards();
 print while (<>);
}

=item eqtime

    eqtime source destination

Sets modified time of destination to that of source.

=cut 

sub eqtime
{
 my ($src,$dst) = @@ARGV;
 local @@ARGV = ($dst);  touch();  # in case $dst doesn't exist
 utime((stat($src))[8,9],$dst);
}

=item rm_rf

    rm_rf files or directories ...

Removes files and directories - recursively (even if readonly)

=cut 

sub rm_rf
{
 expand_wildcards();
 rmtree([grep -e $_,@@ARGV],0,0);
}

=item rm_f

    rm_f file ...

Removes files (even if readonly)

=cut 

sub rm_f {
    expand_wildcards();

    foreach my $file (@@ARGV) {
        next unless -f $file;

        next if _unlink($file);

        chmod(0777, $file);

        next if _unlink($file);

        carp "Cannot delete $file: $!";
    }
}

sub _unlink {
    my $files_unlinked = 0;
    foreach my $file (@@_) {
        my $delete_count = 0;
        $delete_count++ while unlink $file;
        $files_unlinked++ if $delete_count;
    }
    return $files_unlinked;
}


=item touch

    touch file ...

Makes files exist, with current timestamp 

=cut 

sub touch {
    my $t    = time;
    expand_wildcards();
    foreach my $file (@@ARGV) {
        open(FILE,">>$file") || die "Cannot write $file:$!";
        close(FILE);
        utime($t,$t,$file);
    }
}

=item mv

    mv source_file destination_file
    mv source_file source_file destination_dir

Moves source to destination.  Multiple sources are allowed if
destination is an existing directory.

Returns true if all moves succeeded, false otherwise.

=cut 

sub mv {
    expand_wildcards();
    my @@src = @@ARGV;
    my $dst = pop @@src;

    croak("Too many arguments") if (@@src > 1 && ! -d $dst);

    my $nok = 0;
    foreach my $src (@@src) {
        $nok ||= !move($src,$dst);
    }
    return !$nok;
}

=item cp

    cp source_file destination_file
    cp source_file source_file destination_dir

Copies sources to the destination.  Multiple sources are allowed if
destination is an existing directory.

Returns true if all copies succeeded, false otherwise.

=cut

sub cp {
    expand_wildcards();
    my @@src = @@ARGV;
    my $dst = pop @@src;

    croak("Too many arguments") if (@@src > 1 && ! -d $dst);

    my $nok = 0;
    foreach my $src (@@src) {
        $nok ||= !copy($src,$dst);

        # Win32 does not update the mod time of a copied file, just the
        # created time which make does not look at.
        utime(time, time, $dst) if $Is_Win32;
    }
    return $nok;
}

=item chmod

    chmod mode files ...

Sets UNIX like permissions 'mode' on all the files.  e.g. 0666

=cut 

sub chmod {
    local @@ARGV = @@ARGV;
    my $mode = shift(@@ARGV);
    expand_wildcards();

    if( $Is_VMS_mode && $Is_VMS_noefs) {
        foreach my $idx (0..$#ARGV) {
            my $path = $ARGV[$idx];
            next unless -d $path;

            # chmod 0777, [.foo.bar] doesn't work on VMS, you have to do
            # chmod 0777, [.foo]bar.dir
            my @@dirs = File::Spec->splitdir( $path );
            $dirs[-1] .= '.dir';
            $path = File::Spec->catfile(@@dirs);

            $ARGV[$idx] = $path;
        }
    }

    chmod(oct $mode,@@ARGV) || die "Cannot chmod ".join(' ',$mode,@@ARGV).":$!";
}

=item mkpath

    mkpath directory ...

Creates directories, including any parent directories.

=cut 

sub mkpath
{
 expand_wildcards();
 File::Path::mkpath([@@ARGV],0,0777);
}

=item test_f

    test_f file

Tests if a file exists.  I<Exits> with 0 if it does, 1 if it does not (ie.
shell's idea of true and false).

=cut 

sub test_f
{
 exit(-f $ARGV[0] ? 0 : 1);
}

=item test_d

    test_d directory

Tests if a directory exists.  I<Exits> with 0 if it does, 1 if it does
not (ie. shell's idea of true and false).

=cut

sub test_d
{
 exit(-d $ARGV[0] ? 0 : 1);
}

=item dos2unix

    dos2unix files or dirs ...

Converts DOS and OS/2 linefeeds to Unix style recursively.

=cut

sub dos2unix {
    require File::Find;
    File::Find::find(sub {
        return if -d;
        return unless -w _;
        return unless -r _;
        return if -B _;

        local $\;

	my $orig = $_;
	my $temp = '.dos2unix_tmp';
	open ORIG, $_ or do { warn "dos2unix can't open $_: $!"; return };
	open TEMP, ">$temp" or 
	    do { warn "dos2unix can't create .dos2unix_tmp: $!"; return };
        while (my $line = <ORIG>) { 
            $line =~ s/\015\012/\012/g;
            print TEMP $line;
        }
	close ORIG;
	close TEMP;
	rename $temp, $orig;

    }, @@ARGV);
}

=back

=head1 SEE ALSO

Shell::Command which is these same functions but take arguments normally.


=head1 AUTHOR

Nick Ing-Simmons C<ni-s@@cpan.org>

Maintained by Michael G Schwern C<schwern@@pobox.com> within the
ExtUtils-MakeMaker package and, as a separate CPAN package, by
Randy Kobes C<r.kobes@@uwinnipeg.ca>.

=cut

@


1.9
log
@Merge in perl 5.10.1
@
text
@@


1.8
log
@fix conflicts and merge in local changes to perl 5.10.0
@
text
@d15 27
a41 1
$VERSION = '1.13';
a42 1
my $Is_VMS = $^O eq 'VMS';
d238 4
d259 1
a259 1
    if( $Is_VMS ) {
@


1.7
log
@merge in perl 5.8.8
@
text
@d13 1
a13 1
@@EXPORT    = qw(cp rm_f rm_rf mv cat eqtime mkpath touch test_f chmod 
d15 1
a15 1
$VERSION = '1.09';
d25 11
a35 10
  perl -MExtUtils::Command  -e cat files... > destination
  perl -MExtUtils::Command  -e mv source... destination
  perl -MExtUtils::Command  -e cp source... destination
  perl -MExtUtils::Command  -e touch files...
  perl -MExtUtils::Command  -e rm_f files...
  perl -MExtUtils::Command  -e rm_rf directories...
  perl -MExtUtils::Command  -e mkpath directories...
  perl -MExtUtils::Command  -e eqtime source destination
  perl -MExtUtils::Command  -e test_f file
  perl -MExtUtils::Command  -e chmod mode files...
d42 1
a42 1
them easier to deal with in Makefiles.
d46 1
a46 1
I<NOT>
d54 3
d266 2
a267 1
Tests if a file exists
d273 15
a287 1
 exit !-f $ARGV[0];
d326 1
a326 1
=head1 SEE ALSO 
d335 3
a337 1
Currently maintained by Michael G Schwern C<schwern@@pobox.com>.
@


1.6
log
@Resolve conflicts for perl 5.8.2, remove old files, and add OpenBSD-specific scaffolding
@
text
@d11 5
a15 4
use vars qw(@@ISA @@EXPORT $VERSION);
@@ISA     = qw(Exporter);
@@EXPORT  = qw(cp rm_f rm_rf mv cat eqtime mkpath touch test_f);
$VERSION = '1.05';
d25 11
a35 10
  perl -MExtUtils::Command       -e cat files... > destination
  perl -MExtUtils::Command       -e mv source... destination
  perl -MExtUtils::Command       -e cp source... destination
  perl -MExtUtils::Command       -e touch files...
  perl -MExtUtils::Command       -e rm_f files...
  perl -MExtUtils::Command       -e rm_rf directories...
  perl -MExtUtils::Command       -e mkpath directories...
  perl -MExtUtils::Command       -e eqtime source destination
  perl -MExtUtils::Command       -e test_f file
  perl -MExtUtils::Command=chmod -e chmod mode files...
d49 2
d65 3
a67 1
=item cat 
d79 3
a81 1
=item eqtime src dst
d83 1
a83 1
Sets modified time of dst to that of src
d94 1
a94 1
=item rm_rf files....
d96 3
a98 1
Removes directories - recursively (even if readonly)
d108 3
a110 1
=item rm_f files....
d116 24
a139 11
sub rm_f
{
 expand_wildcards();
 foreach (@@ARGV)
  {
   next unless -f $_;
   next if unlink($_);
   chmod(0777,$_);
   next if unlink($_);
   carp "Cannot delete $_:$!";
  }
d142 4
a145 1
=item touch files ...
d161 7
a167 1
=item mv source... destination
d169 1
a169 2
Moves source to destination.
Multiple sources are allowed if destination is an existing directory.
a173 1
    my $dst = pop(@@ARGV);
d175 8
a182 3
    croak("Too many arguments") if (@@ARGV > 1 && ! -d $dst);
    foreach my $src (@@ARGV) {
        move($src,$dst);
d184 1
d187 4
a190 1
=item cp source... destination
d192 4
a195 2
Copies source to destination.
Multiple sources are allowed if destination is an existing directory.
a199 1
    my $dst = pop(@@ARGV);
d201 8
a208 3
    croak("Too many arguments") if (@@ARGV > 1 && ! -d $dst);
    foreach my $src (@@ARGV) {
        copy($src,$dst);
d210 1
d213 3
a215 1
=item chmod mode files...
d222 1
d225 16
d244 1
a244 1
=item mkpath directory...
d246 3
a248 1
Creates directory, including any parent directories.
d258 3
a260 1
=item test_f file
d268 1
a268 1
 exit !-f shift(@@ARGV);
d271 3
d275 3
a277 2
1;
__END__ 
d279 22
a300 1
=back
d302 2
a303 1
=head1 BUGS
d305 1
a305 1
Should probably be Auto/Self loaded.
d309 2
a310 1
ExtUtils::MakeMaker, ExtUtils::MM_Unix, ExtUtils::MM_Win32
d314 3
a316 1
Nick Ing-Simmons <F<nick@@ni-s.u-net.com>>.
@


1.5
log
@Resolve conflicts, remove old files, merge local changes
@
text
@d14 1
a14 1
$VERSION = '1.04';
d24 10
a33 10
  perl -MExtUtils::Command -e cat files... > destination
  perl -MExtUtils::Command -e mv source... destination
  perl -MExtUtils::Command -e cp source... destination
  perl -MExtUtils::Command -e touch files...
  perl -MExtUtils::Command -e rm_f file...
  perl -MExtUtils::Command -e rm_rf directories...
  perl -MExtUtils::Command -e mkpath directories...
  perl -MExtUtils::Command -e eqtime source destination
  perl -MExtUtils::Command -e chmod mode files...
  perl -MExtUtils::Command -e test_f file
d60 1
d82 1
a82 2
 open(F,">$dst");
 close(F);
d123 8
a130 11
sub touch
{
 my $t    = time;
 expand_wildcards();
 while (@@ARGV)
  {
   my $file = shift(@@ARGV);
   open(FILE,">>$file") || die "Cannot write $file:$!";
   close(FILE);
   utime($t,$t,$file);
  }
d140 7
a146 10
sub mv
{
 my $dst = pop(@@ARGV);
 expand_wildcards();
 croak("Too many arguments") if (@@ARGV > 1 && ! -d $dst);
 while (@@ARGV)
  {
   my $src = shift(@@ARGV);
   move($src,$dst);
  }
d156 7
a162 10
sub cp
{
 my $dst = pop(@@ARGV);
 expand_wildcards();
 croak("Too many arguments") if (@@ARGV > 1 && ! -d $dst);
 while (@@ARGV)
  {
   my $src = shift(@@ARGV);
   copy($src,$dst);
  }
d167 1
a167 1
Sets UNIX like permissions 'mode' on all the files.
d171 4
a174 5
sub chmod
{
 my $mode = shift(@@ARGV);
 expand_wildcards();
 chmod($mode,@@ARGV) || die "Cannot chmod ".join(' ',$mode,@@ARGV).":$!";
@


1.4
log
@merge in perl 5.6.1 with our local changes
@
text
@d3 1
a3 1
use 5.005_64;
a4 1
# use AutoLoader;
d11 1
a11 1
our(@@ISA, @@EXPORT, $VERSION);
d14 3
a16 1
$VERSION = '1.01';
d37 11
a47 2
The module is used in the Win32 port to replace common UNIX commands.
Most commands are wrappers on generic modules File::Path and File::Basename.
d53 2
d57 1
a57 1
 @@ARGV = map(/[\*\?]/ ? glob($_) : $_,@@ARGV);
d86 1
a86 1
=item rm_f files....
d94 2
a95 1
 rmtree([grep -e $_,expand_wildcards()],0,0);
d106 2
a107 1
 foreach (expand_wildcards())
d109 1
a109 1
   next unless -f $_;        
d111 1
a111 1
   chmod(0777,$_);           
d125 1
a126 1
 my $t    = time;
d129 1
a129 1
   my $file = shift(@@ARGV);               
d150 1
a150 1
   my $src = shift(@@ARGV);               
d160 1
a160 1
=cut 
d169 1
a169 1
   my $src = shift(@@ARGV);               
d183 2
a184 1
 chmod($mode,expand_wildcards()) || die "Cannot chmod ".join(' ',$mode,@@ARGV).":$!";
d195 2
a196 1
 File::Path::mkpath([expand_wildcards()],0,0777);
@


1.3
log
@perl-5.6.0 + local changes
@
text
@d180 1
a180 1
 File::Path::mkpath([expand_wildcards()],1,0777);
@


1.2
log
@perl5.005_03 (stock)
@
text
@d2 2
d12 1
a12 1
use vars qw(@@ISA @@EXPORT $VERSION);
@


1.1
log
@perl 5.004_04
@
text
@d34 2
a35 2
The module is used in Win32 port to replace common UNIX commands.
Most commands are wrapers on generic modules File::Path and File::Basename.
d110 1
d116 1
d191 1
@


1.1.1.1
log
@perl5.005_03
@
text
@d34 2
a35 2
The module is used in the Win32 port to replace common UNIX commands.
Most commands are wrappers on generic modules File::Path and File::Basename.
a109 1
 my $t    = time;
a114 1
   utime($t,$t,$file);
a188 1

@


1.1.1.2
log
@virgin perl 5.6.0
@
text
@a1 2

use 5.005_64;
d10 1
a10 1
our(@@ISA, @@EXPORT, $VERSION);
@


1.1.1.3
log
@stock perl 5.6.1
@
text
@d180 1
a180 1
 File::Path::mkpath([expand_wildcards()],0,0777);
@


1.1.1.4
log
@stock perl 5.8.0 from CPAN
@
text
@d3 1
a3 1
use 5.00503;
d5 1
d12 1
a12 1
use vars qw(@@ISA @@EXPORT $VERSION);
d15 1
a15 3
$VERSION = '1.04';

my $Is_VMS = $^O eq 'VMS';
d36 2
a37 11
The module is used to replace common UNIX commands.  In all cases the
functions work from @@ARGV rather than taking arguments.  This makes
them easier to deal with in Makefiles.

  perl -MExtUtils::Command -e some_command some files to work on

I<NOT>

  perl -MExtUtils::Command -e 'some_command qw(some files to work on)'

Filenames with * and ? will be glob expanded.
a42 2
# VMS uses % instead of ? to mean "one character"
my $wild_regex = $Is_VMS ? '*%' : '*?';
d45 1
a45 1
 @@ARGV = map(/[$wild_regex]/o ? glob($_) : $_,@@ARGV);
d74 1
a74 1
=item rm_rf files....
d82 1
a82 2
 expand_wildcards();
 rmtree([grep -e $_,@@ARGV],0,0);
d93 1
a93 2
 expand_wildcards();
 foreach (@@ARGV)
d95 1
a95 1
   next unless -f $_;
d97 1
a97 1
   chmod(0777,$_);
d111 1
a112 1
 expand_wildcards();
d115 1
a115 1
   my $file = shift(@@ARGV);
d136 1
a136 1
   my $src = shift(@@ARGV);
d146 1
a146 1
=cut
d155 1
a155 1
   my $src = shift(@@ARGV);
d169 1
a169 2
 expand_wildcards();
 chmod($mode,@@ARGV) || die "Cannot chmod ".join(' ',$mode,@@ARGV).":$!";
d180 1
a180 2
 expand_wildcards();
 File::Path::mkpath([@@ARGV],0,0777);
@


1.1.1.5
log
@perl 5.8.2 from CPAN
@
text
@d14 1
a14 1
$VERSION = '1.05';
d24 10
a33 10
  perl -MExtUtils::Command       -e cat files... > destination
  perl -MExtUtils::Command       -e mv source... destination
  perl -MExtUtils::Command       -e cp source... destination
  perl -MExtUtils::Command       -e touch files...
  perl -MExtUtils::Command       -e rm_f files...
  perl -MExtUtils::Command       -e rm_rf directories...
  perl -MExtUtils::Command       -e mkpath directories...
  perl -MExtUtils::Command       -e eqtime source destination
  perl -MExtUtils::Command       -e test_f file
  perl -MExtUtils::Command=chmod -e chmod mode files...
a59 1

d81 2
a82 1
 local @@ARGV = ($dst);  touch();  # in case $dst doesn't exist
d123 11
a133 8
sub touch {
    my $t    = time;
    expand_wildcards();
    foreach my $file (@@ARGV) {
        open(FILE,">>$file") || die "Cannot write $file:$!";
        close(FILE);
        utime($t,$t,$file);
    }
d143 10
a152 7
sub mv {
    my $dst = pop(@@ARGV);
    expand_wildcards();
    croak("Too many arguments") if (@@ARGV > 1 && ! -d $dst);
    foreach my $src (@@ARGV) {
        move($src,$dst);
    }
d162 10
a171 7
sub cp {
    my $dst = pop(@@ARGV);
    expand_wildcards();
    croak("Too many arguments") if (@@ARGV > 1 && ! -d $dst);
    foreach my $src (@@ARGV) {
        copy($src,$dst);
    }
d176 1
a176 1
Sets UNIX like permissions 'mode' on all the files.  e.g. 0666
d180 5
a184 4
sub chmod {
    my $mode = shift(@@ARGV);
    expand_wildcards();
    chmod(oct $mode,@@ARGV) || die "Cannot chmod ".join(' ',$mode,@@ARGV).":$!";
@


1.1.1.6
log
@perl 5.8.8 import
@
text
@d11 4
a14 5
use vars qw(@@ISA @@EXPORT @@EXPORT_OK $VERSION);
@@ISA       = qw(Exporter);
@@EXPORT    = qw(cp rm_f rm_rf mv cat eqtime mkpath touch test_f chmod 
                dos2unix);
$VERSION = '1.09';
d24 10
a33 11
  perl -MExtUtils::Command  -e cat files... > destination
  perl -MExtUtils::Command  -e mv source... destination
  perl -MExtUtils::Command  -e cp source... destination
  perl -MExtUtils::Command  -e touch files...
  perl -MExtUtils::Command  -e rm_f files...
  perl -MExtUtils::Command  -e rm_rf directories...
  perl -MExtUtils::Command  -e mkpath directories...
  perl -MExtUtils::Command  -e eqtime source destination
  perl -MExtUtils::Command  -e test_f file
  perl -MExtUtils::Command  -e chmod mode files...
  ...
a46 2
For that use L<Shell::Command>.

d61 1
a61 3
=item cat

    cat file ...
d73 1
a73 3
=item eqtime

    eqtime source destination
d75 1
a75 1
Sets modified time of destination to that of source.
d86 1
a86 1
=item rm_rf
d88 1
a88 3
    rm_rf files or directories ...

Removes files and directories - recursively (even if readonly)
d98 1
a98 3
=item rm_f

    rm_f file ...
d104 11
a114 14
sub rm_f {
    expand_wildcards();

    foreach my $file (@@ARGV) {
        next unless -f $file;

        next if _unlink($file);

        chmod(0777, $file);

        next if _unlink($file);

        carp "Cannot delete $file: $!";
    }
d117 1
a117 14
sub _unlink {
    my $files_unlinked = 0;
    foreach my $file (@@_) {
        my $delete_count = 0;
        $delete_count++ while unlink $file;
        $files_unlinked++ if $delete_count;
    }
    return $files_unlinked;
}


=item touch

    touch file ...
d133 1
a133 7
=item mv

    mv source_file destination_file
    mv source_file source_file destination_dir

Moves source to destination.  Multiple sources are allowed if
destination is an existing directory.
d135 2
a136 1
Returns true if all moves succeeded, false otherwise.
d141 1
d143 3
a145 8
    my @@src = @@ARGV;
    my $dst = pop @@src;

    croak("Too many arguments") if (@@src > 1 && ! -d $dst);

    my $nok = 0;
    foreach my $src (@@src) {
        $nok ||= !move($src,$dst);
a146 1
    return !$nok;
d149 1
a149 4
=item cp

    cp source_file destination_file
    cp source_file source_file destination_dir
d151 2
a152 4
Copies sources to the destination.  Multiple sources are allowed if
destination is an existing directory.

Returns true if all copies succeeded, false otherwise.
d157 1
d159 3
a161 8
    my @@src = @@ARGV;
    my $dst = pop @@src;

    croak("Too many arguments") if (@@src > 1 && ! -d $dst);

    my $nok = 0;
    foreach my $src (@@src) {
        $nok ||= !copy($src,$dst);
a162 1
    return $nok;
d165 1
a165 3
=item chmod

    chmod mode files ...
a171 1
    local @@ARGV = @@ARGV;
a173 16

    if( $Is_VMS ) {
        foreach my $idx (0..$#ARGV) {
            my $path = $ARGV[$idx];
            next unless -d $path;

            # chmod 0777, [.foo.bar] doesn't work on VMS, you have to do
            # chmod 0777, [.foo]bar.dir
            my @@dirs = File::Spec->splitdir( $path );
            $dirs[-1] .= '.dir';
            $path = File::Spec->catfile(@@dirs);

            $ARGV[$idx] = $path;
        }
    }

d177 1
a177 1
=item mkpath
d179 1
a179 3
    mkpath directory ...

Creates directories, including any parent directories.
d189 1
a189 3
=item test_f

    test_f file
d197 1
a197 1
 exit !-f $ARGV[0];
a199 1
=item dos2unix
d201 2
a202 1
    dos2unix files or dirs ...
d204 1
a204 3
Converts DOS and OS/2 linefeeds to Unix style recursively.

=cut
d206 1
a206 22
sub dos2unix {
    require File::Find;
    File::Find::find(sub {
        return if -d;
        return unless -w _;
        return unless -r _;
        return if -B _;

        local $\;

	my $orig = $_;
	my $temp = '.dos2unix_tmp';
	open ORIG, $_ or do { warn "dos2unix can't open $_: $!"; return };
	open TEMP, ">$temp" or 
	    do { warn "dos2unix can't create .dos2unix_tmp: $!"; return };
        while (my $line = <ORIG>) { 
            $line =~ s/\015\012/\012/g;
            print TEMP $line;
        }
	close ORIG;
	close TEMP;
	rename $temp, $orig;
d208 1
a208 4
    }, @@ARGV);
}

=back
d212 1
a212 2
Shell::Command which is these same functions but take arguments normally.

d216 1
a216 3
Nick Ing-Simmons C<ni-s@@cpan.org>

Currently maintained by Michael G Schwern C<schwern@@pobox.com>.
@


1.1.1.7
log
@import perl 5.10.0 from CPAN
@
text
@d13 1
a13 1
@@EXPORT    = qw(cp rm_f rm_rf mv cat eqtime mkpath touch test_f test_d chmod
d15 1
a15 1
$VERSION = '1.13';
d25 10
a34 11
  perl -MExtUtils::Command -e cat files... > destination
  perl -MExtUtils::Command -e mv source... destination
  perl -MExtUtils::Command -e cp source... destination
  perl -MExtUtils::Command -e touch files...
  perl -MExtUtils::Command -e rm_f files...
  perl -MExtUtils::Command -e rm_rf directories...
  perl -MExtUtils::Command -e mkpath directories...
  perl -MExtUtils::Command -e eqtime source destination
  perl -MExtUtils::Command -e test_f file
  perl -MExtUtils::Command -e test_d directory
  perl -MExtUtils::Command -e chmod mode files...
d41 1
a41 1
them easier to deal with in Makefiles.  Call them like this:
d45 1
a45 1
and I<NOT> like this:
a52 3

=head2 FUNCTIONS

d262 1
a262 2
Tests if a file exists.  I<Exits> with 0 if it does, 1 if it does not (ie.
shell's idea of true and false).
d268 1
a268 15
 exit(-f $ARGV[0] ? 0 : 1);
}

=item test_d

    test_d directory

Tests if a directory exists.  I<Exits> with 0 if it does, 1 if it does
not (ie. shell's idea of true and false).

=cut

sub test_d
{
 exit(-d $ARGV[0] ? 0 : 1);
d307 1
a307 1
=head1 SEE ALSO
d316 1
a316 3
Maintained by Michael G Schwern C<schwern@@pobox.com> within the
ExtUtils-MakeMaker package and, as a separate CPAN package, by
Randy Kobes C<r.kobes@@uwinnipeg.ca>.
@


1.1.1.8
log
@import perl 5.10.1
@
text
@d15 1
a15 27
$VERSION = '1.16';

my $Is_VMS   = $^O eq 'VMS';
my $Is_VMS_mode = $Is_VMS;
my $Is_VMS_noefs = $Is_VMS;
my $Is_Win32 = $^O eq 'MSWin32';

if( $Is_VMS ) {
    my $vms_unix_rpt;
    my $vms_efs;
    my $vms_case;

    if (eval { local $SIG{__DIE__}; require VMS::Feature; }) {
        $vms_unix_rpt = VMS::Feature::current("filename_unix_report");
        $vms_efs = VMS::Feature::current("efs_charset");
        $vms_case = VMS::Feature::current("efs_case_preserve");
    } else {
        my $unix_rpt = $ENV{'DECC$FILENAME_UNIX_REPORT'} || '';
        my $efs_charset = $ENV{'DECC$EFS_CHARSET'} || '';
        my $efs_case = $ENV{'DECC$EFS_CASE_PRESERVE'} || '';
        $vms_unix_rpt = $unix_rpt =~ /^[ET1]/i; 
        $vms_efs = $efs_charset =~ /^[ET1]/i;
        $vms_case = $efs_case =~ /^[ET1]/i;
    }
    $Is_VMS_mode = 0 if $vms_unix_rpt;
    $Is_VMS_noefs = 0 if ($vms_efs);
}
d17 1
a212 4

        # Win32 does not update the mod time of a copied file, just the
        # created time which make does not look at.
        utime(time, time, $dst) if $Is_Win32;
d230 1
a230 1
    if( $Is_VMS_mode && $Is_VMS_noefs) {
@


