head	1.2;
access;
symbols
	OPENBSD_6_2:1.2.0.2
	OPENBSD_6_2_BASE:1.2
	PERL_5_24_2:1.1.1.9
	OPENBSD_6_1:1.2.0.4
	OPENBSD_6_1_BASE:1.2
	OPENBSD_6_0:1.1.1.8.0.10
	OPENBSD_6_0_BASE:1.1.1.8
	OPENBSD_5_9:1.1.1.8.0.4
	OPENBSD_5_9_BASE:1.1.1.8
	OPENBSD_5_8:1.1.1.8.0.6
	OPENBSD_5_8_BASE:1.1.1.8
	PERL_5_20_2:1.1.1.8
	OPENBSD_5_7:1.1.1.8.0.2
	OPENBSD_5_7_BASE:1.1.1.8
	PERL_5_20_1:1.1.1.8
	OPENBSD_5_6:1.1.1.7.0.4
	OPENBSD_5_6_BASE:1.1.1.7
	PERL_5_18_2:1.1.1.7
	PERL:1.1.1
	OPENBSD_5_5:1.1.1.6.0.6
	OPENBSD_5_5_BASE:1.1.1.6
	OPENBSD_5_4:1.1.1.6.0.2
	OPENBSD_5_4_BASE:1.1.1.6
	PERL_5_16_3:1.1.1.6
	OPENBSD_5_3:1.1.1.5.0.14
	OPENBSD_5_3_BASE:1.1.1.5
	OPENBSD_5_2:1.1.1.5.0.12
	OPENBSD_5_2_BASE:1.1.1.5
	OPENBSD_5_1_BASE:1.1.1.5
	OPENBSD_5_1:1.1.1.5.0.10
	OPENBSD_5_0:1.1.1.5.0.8
	OPENBSD_5_0_BASE:1.1.1.5
	OPENBSD_4_9:1.1.1.5.0.6
	OPENBSD_4_9_BASE:1.1.1.5
	PERL_5_12_2:1.1.1.5
	OPENBSD_4_8:1.1.1.5.0.4
	OPENBSD_4_8_BASE:1.1.1.5
	OPENBSD_4_7:1.1.1.5.0.2
	OPENBSD_4_7_BASE:1.1.1.5
	PERL_5_10_1:1.1.1.5
	OPENBSD_4_6:1.1.1.4.0.6
	OPENBSD_4_6_BASE:1.1.1.4
	OPENBSD_4_5:1.1.1.4.0.2
	OPENBSD_4_5_BASE:1.1.1.4
	PERL_5_10_0:1.1.1.4
	OPENBSD_4_4:1.1.1.3.0.10
	OPENBSD_4_4_BASE:1.1.1.3
	OPENBSD_4_3:1.1.1.3.0.8
	OPENBSD_4_3_BASE:1.1.1.3
	OPENBSD_4_2:1.1.1.3.0.6
	OPENBSD_4_2_BASE:1.1.1.3
	OPENBSD_4_1:1.1.1.3.0.4
	OPENBSD_4_1_BASE:1.1.1.3
	OPENBSD_4_0:1.1.1.3.0.2
	OPENBSD_4_0_BASE:1.1.1.3
	PERL_5_8_8:1.1.1.3
	OPENBSD_3_9:1.1.1.2.0.10
	OPENBSD_3_9_BASE:1.1.1.2
	OPENBSD_3_8:1.1.1.2.0.8
	OPENBSD_3_8_BASE:1.1.1.2
	OPENBSD_3_7:1.1.1.2.0.6
	OPENBSD_3_7_BASE:1.1.1.2
	PERL_5_8_6:1.1.1.2
	OPENBSD_3_6:1.1.1.2.0.4
	OPENBSD_3_6_BASE:1.1.1.2
	PERL_5_8_5:1.1.1.2
	PERL_5_8_3:1.1.1.2
	OPENBSD_3_5:1.1.1.2.0.2
	OPENBSD_3_5_BASE:1.1.1.2
	PERL_5_8_2:1.1.1.2
	OPENBSD_3_4:1.1.1.1.0.4
	OPENBSD_3_4_BASE:1.1.1.1
	OPENBSD_3_3:1.1.1.1.0.2
	OPENBSD_3_3_BASE:1.1.1.1
	PERL_5_8_0:1.1.1.1
	CPAN:1.1.1;
locks; strict;
comment	@# @;
expand	@o@;


1.2
date	2017.02.05.00.32.15;	author afresh1;	state Exp;
branches;
next	1.1;
commitid	cxJ08BvJA9Pt2PTM;

1.1
date	2002.10.27.22.14.59;	author millert;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	2002.10.27.22.14.59;	author millert;	state Exp;
branches;
next	1.1.1.2;

1.1.1.2
date	2003.12.03.02.44.03;	author millert;	state Exp;
branches;
next	1.1.1.3;

1.1.1.3
date	2006.03.28.18.48.45;	author millert;	state Exp;
branches;
next	1.1.1.4;

1.1.1.4
date	2008.09.29.17.18.34;	author millert;	state Exp;
branches;
next	1.1.1.5;

1.1.1.5
date	2009.10.12.18.10.51;	author millert;	state Exp;
branches;
next	1.1.1.6;

1.1.1.6
date	2013.03.25.20.08.54;	author sthen;	state Exp;
branches;
next	1.1.1.7;

1.1.1.7
date	2014.03.24.14.59.03;	author afresh1;	state Exp;
branches;
next	1.1.1.8;

1.1.1.8
date	2014.11.17.20.53.08;	author afresh1;	state Exp;
branches;
next	1.1.1.9;
commitid	B31cAbBIXiCqnL97;

1.1.1.9
date	2017.08.14.13.46.14;	author afresh1;	state Exp;
branches;
next	;
commitid	fAzrs78vdW2Yfc6A;


desc
@@


1.2
log
@Fix merge issues, remove excess files - match perl-5.24.1 dist
@
text
@#!/usr/bin/perl

BEGIN {
    if( $ENV{PERL_CORE} ) {
        chdir 't' if -d 't';
        @@INC = '../lib';
    }
}
chdir 't';

use Config;
use ExtUtils::Embed;
use File::Spec;
use IPC::Cmd qw(can_run);

my $cc = $Config{'cc'};
if ( $Config{usecrosscompile} && !can_run($cc) ) {
    print "1..0 # SKIP Cross-compiling and the target doesn't have $cc";
    exit;
}
open(my $fh,">embed_test.c") || die "Cannot open embed_test.c:$!";
print $fh <DATA>;
close($fh);

$| = 1;
print "1..10\n";

my $cl  = ($^O eq 'MSWin32' && $cc eq 'cl');
my $skip_exe = $^O eq 'os2' && $Config{ldflags} =~ /(?<!\S)-Zexe\b/;
my $exe = 'embed_test';
$exe .= $Config{'exe_ext'} unless $skip_exe;	# Linker will auto-append it
my $obj = 'embed_test' . $Config{'obj_ext'};
my $inc = File::Spec->updir;
my $lib = File::Spec->updir;
my $libperl_copied;
my $testlib;
my @@cmd;
my (@@cmd2) if $^O eq 'VMS';
# Don't use ccopts() here as we may want to overwrite an existing
# perl with a new one with inconsistent header files, meaning
# the usual value for perl_inc(), which is used by ccopts(),
# will be wrong.
if ($^O eq 'VMS') {
    push(@@cmd,$cc,"/Obj=$obj");
    my (@@incs) = ($inc);
    my $crazy = ccflags();
    if ($crazy =~ s#/inc[^=/]*=([\w\$\_\-\.\[\]\:]+)##i) {
        push(@@incs,$1);
    }
    if ($crazy =~ s/-I([a-zA-Z0-9\$\_\-\.\[\]\:]*)//) {
        push(@@incs,$1);
    }
    $crazy =~ s#/Obj[^=/]*=[\w\$\_\-\.\[\]\:]+##i;
    push(@@cmd,"/Include=(".join(',',@@incs).")");
    push(@@cmd,$crazy);
    push(@@cmd,"embed_test.c");

    push(@@cmd2,$Config{'ld'}, $Config{'ldflags'}, "/exe=$exe"); 
    push(@@cmd2,"$obj,[-]perlshr.opt/opt,[-]perlshr_attr.opt/opt");

} else {
   if ($cl) {
    push(@@cmd,$cc,"-Fe$exe");
   }
   else {
    push(@@cmd,$cc,'-o' => $exe);
   }
   if ($^O eq 'dec_osf' && !defined $Config{usedl}) {
       # The -non_shared is needed in case of -Uusedl or otherwise
       # the test application will try to use libperl.so
       # instead of libperl.a.
       push @@cmd, "-non_shared";
   }

   # XXX DAPM 12/2014: ExtUtils::Embed doesn't seem to provide API access
   # to $Config{optimize} and so compiles the test code without
   # optimisation on optimised perls. This causes the compiler to warn
   # when -D_FORTIFY_SOURCE is in force without -O. For now, just strip
   # the fortify on optimised builds to avoid the warning.
   my $ccflags =  ccflags();
   $ccflags =~ s/-D_FORTIFY_SOURCE=\d+// if $Config{optimize} =~ /-O/;

   push(@@cmd, "-I$inc", $ccflags, 'embed_test.c');
   if ($^O eq 'MSWin32') {
    $inc = File::Spec->catdir($inc,'win32');
    push(@@cmd,"-I$inc");
    $inc = File::Spec->catdir($inc,'include');
    push(@@cmd,"-I$inc");
    if ($cc eq 'cl') {
	push(@@cmd,'-link',"-libpath:$lib\\lib\\CORE",$Config{'libperl'},$Config{'libs'});
    }
    else {
	push(@@cmd,"-L$lib",$lib.'\lib\CORE\\'.$Config{'libperl'},$Config{'libc'});
    }
   }
   elsif ($^O eq 'os390' && $Config{usedl}) {
    push(@@cmd,"-L$lib", ldopts());
   } else { # Not MSWin32 or OS/390 (z/OS) dynamic.
    push(@@cmd,"-L$lib",'-lperl');
    local $SIG{__WARN__} = sub {
	warn $_[0] unless $_[0] =~ /No library found for .*perl/
    };
    push(@@cmd, '-Zlinker', '/PM:VIO')	# Otherwise puts a warning to STDOUT!
	if $^O eq 'os2' and $Config{ldflags} =~ /(?<!\S)-Zomf\b/;
    push(@@cmd,ldopts());
   }

   if ($^O eq 'aix') { # AIX needs an explicit symbol export list.
    my ($perl_exp) = grep { -f } qw(perl.exp ../perl.exp);
    die "where is perl.exp?\n" unless defined $perl_exp;
    for (@@cmd) {
        s!-bE:(\S+)!-bE:$perl_exp!;
    }
   }
   elsif ($^O eq 'cygwin') { # Cygwin needs no special treatment like below
       ;
   }
   elsif ($Config{'libperl'} !~ /\Alibperl\./) {
     # Everyone needs libperl copied if it's not found by '-lperl'.
     $testlib = $Config{'libperl'};
     my $srclib = $testlib;
     $testlib =~ s/.+(?=\.[^.]*)/libperl/;
     $testlib = File::Spec::->catfile($lib, $testlib);
     $srclib = File::Spec::->catfile($lib, $srclib);
     if (-f $srclib) {
       unlink $testlib if -f $testlib;
       my $ln_or_cp = $Config{'ln'} || $Config{'cp'};
       my $lncmd = "$ln_or_cp $srclib $testlib";
       #print "# $lncmd\n";
       $libperl_copied = 1	unless system($lncmd);
     }
   }
}
my $status;
# On OS/2 the linker will always emit an empty line to STDOUT; filter these
my $cmd = join ' ', @@cmd;
chomp($cmd); # where is the newline coming from? ldopts()?
print "# $cmd\n";
my @@out = `$cmd`;
$status = $?;
print "# $_\n" foreach @@out;

if ($^O eq 'VMS' && !$status) {
  print "# @@cmd2\n";
  $status = system(join(' ',@@cmd2));
}
print (($status? 'not ': '')."ok 1\n");

my $embed_test = File::Spec->catfile(File::Spec->curdir, $exe);
$embed_test = "run/nodebug $exe" if $^O eq 'VMS';
print "# embed_test = $embed_test\n";
$status = system($embed_test);
print (($status? 'not ':'')."ok 10 # system returned $status\n");
unlink($exe,"embed_test.c",$obj);
unlink("$exe.manifest") if $cl and $Config{'ccversion'} =~ /^(\d+)/ and $1 >= 14;
unlink("$exe$Config{exe_ext}") if $skip_exe;
unlink("embed_test.map","embed_test.lis") if $^O eq 'VMS';
unlink(glob("./*.dll")) if $^O eq 'cygwin';
unlink($testlib)	       if $libperl_copied;

# gcc -g -I.. -L../ -o perl_test perl_test.c -lperl `../perl -I../lib -MExtUtils::Embed -I../ -e ccflags -e ldopts`
__END__

/* perl_test.c */

#include <EXTERN.h>
#include <perl.h>

#define my_puts(a) if(puts(a) < 0) exit(666)

static const char * cmds [] = { "perl", "-e", "$|=1; print qq[ok 5\\n]; $SIG{__WARN__} = sub { print qq[ok 6\\n] if $_[0] =~ /Unexpected exit/; }; exit 5;", NULL };

#ifdef PERL_GLOBAL_STRUCT_PRIVATE
static struct perl_vars *my_plvarsp;
struct perl_vars* Perl_GetVarsPrivate(void) { return my_plvarsp; }
#endif

#ifdef NO_ENV_ARRAY_IN_MAIN
int main(int argc, char **argv) {
    char **env;
#else
int main(int argc, char **argv, char **env) {
#endif
    PerlInterpreter *my_perl;
#ifdef PERL_GLOBAL_STRUCT
    struct perl_vars *my_vars = init_global_struct();
#  ifdef PERL_GLOBAL_STRUCT_PRIVATE
    int veto;

    my_plvarsp = my_vars;
#  endif
#endif /* PERL_GLOBAL_STRUCT */

    (void)argc; /* PERL_SYS_INIT3 may #define away their use */
    (void)argv;
    PERL_SYS_INIT3(&argc, &argv, &env);

    my_perl = perl_alloc();

    my_puts("ok 2");

    perl_construct(my_perl);
    PL_exit_flags |= PERL_EXIT_WARN;

    my_puts("ok 3");

    perl_parse(my_perl, NULL, (sizeof(cmds)/sizeof(char *))-1, (char **)cmds, env);

    my_puts("ok 4");

    fflush(stdout);

    perl_run(my_perl);

    my_puts("ok 7");

    perl_destruct(my_perl);

    my_puts("ok 8");

    perl_free(my_perl);

    my_puts("ok 9");

    PERL_SYS_TERM();

#ifdef PERL_GLOBAL_STRUCT
#  ifdef PERL_GLOBAL_STRUCT_PRIVATE
    veto = my_plvarsp->Gveto_cleanup;
#  endif
    free_global_struct(my_vars);
#  ifdef PERL_GLOBAL_STRUCT_PRIVATE
    if (!veto)
        my_plvarsp = NULL;
    /* Remember, functions registered with atexit() can run after this point,
       and may access "global" variables, and hence end up calling
       Perl_GetVarsPrivate()  */
#endif
#endif /* PERL_GLOBAL_STRUCT */

    return 0;
}
@


1.1
log
@Initial revision
@
text
@d14 1
d16 5
d26 2
a27 2
print "1..9\n";
my $cc = $Config{'cc'};
a28 1
my $borl  = ($^O eq 'MSWin32' && $cc eq 'bcc32');
d39 4
a42 1

d46 1
a46 1
    my $crazy = ccopts();
a64 3
   elsif ($borl) {
    push(@@cmd,$cc,"-o$exe");
   }
d68 16
a83 1
   push(@@cmd,"-I$inc",ccopts(),'embed_test.c');
d90 1
a90 1
	push(@@cmd,'-link',"-libpath:$lib",$Config{'libperl'},$Config{'libs'});
d93 1
a93 1
	push(@@cmd,"-L$lib",File::Spec->catfile($lib,$Config{'libperl'}),$Config{'libc'});
d96 3
a98 1
   else { # Not MSWin32.
a106 3
   if ($borl) {
     @@cmd = ($cmd[0],(grep{/^-[LI]/}@@cmd[1..$#cmd]),(grep{!/^-[LI]/}@@cmd[1..$#cmd]));
   }
d115 2
a116 4
   elsif ($^O eq 'cygwin') { # Cygwin needs the shared libperl copied
     my $v_e_r_s = $Config{version};
     $v_e_r_s =~ tr/./_/;
     system("cp ../cygperl$v_e_r_s.dll ./");    # for test 1
d122 1
a122 1
     $testlib =~ s/^[^.]+/libperl/;
d145 1
a145 1
  $status = system(join(' ',@@cmd2)); 
d153 1
a153 1
print (($status? 'not ':'')."ok 9 # system returned $status\n");
d155 1
d161 1
a161 2
# gcc -g -I.. -L../ -o perl_test perl_test.c -lperl `../perl -I../lib -MExtUtils::Embed -I../ -e ccopts -e ldopts`

d171 26
a196 1
static char *cmds[] = { "perl","-e", "print qq[ok 5\\n]", NULL };
d198 1
a198 3
int main(int argc, char **argv, char **env)
{
    PerlInterpreter *my_perl = perl_alloc();
d203 1
d207 1
a207 1
    perl_parse(my_perl, NULL, (sizeof(cmds)/sizeof(char *))-1, cmds, env);
d215 1
a215 1
    my_puts("ok 6");
d219 1
a219 1
    my_puts("ok 7");
d223 17
a239 1
    my_puts("ok 8");
@


1.1.1.1
log
@stock perl 5.8.0 from CPAN
@
text
@@


1.1.1.2
log
@perl 5.8.2 from CPAN
@
text
@d105 1
a105 1
     $testlib =~ s/.+(?=\.[^.]*)/libperl/;
d154 1
a154 1
static char *cmds[] = { "perl","-e", "$|=1; print qq[ok 5\\n]", NULL };
d158 1
a158 5
    PerlInterpreter *my_perl;

    PERL_SYS_INIT3(&argc,&argv,&env);

    my_perl = perl_alloc();
a182 2

    PERL_SYS_TERM();
@


1.1.1.3
log
@perl 5.8.8 import
@
text
@a155 5
#ifdef PERL_GLOBAL_STRUCT_PRIVATE
static struct perl_vars *my_plvarsp;
struct perl_vars* Perl_GetVarsPrivate(void) { return my_plvarsp; }
#endif

a158 7
#ifdef PERL_GLOBAL_STRUCT
    dVAR;
    struct perl_vars *plvarsp = init_global_struct();
#  ifdef PERL_GLOBAL_STRUCT_PRIVATE
    my_vars = my_plvarsp = plvarsp;
#  endif
#endif /* PERL_GLOBAL_STRUCT */
a159 2
    (void)argc; /* PERL_SYS_INIT3 may #define away their use */
    (void)argv;
a184 4

#ifdef PERL_GLOBAL_STRUCT
    free_global_struct(plvarsp);
#endif /* PERL_GLOBAL_STRUCT */
@


1.1.1.4
log
@import perl 5.10.0 from CPAN
@
text
@d34 1
a34 4
# Don't use ccopts() here as we may want to overwrite an existing
# perl with a new one with inconsistent header files, meaning
# the usual value for perl_inc(), which is used by ccopts(),
# will be wrong.
d38 1
a38 1
    my $crazy = ccflags();
d63 1
a63 8
   if ($^O eq 'dec_osf' && !defined $Config{usedl}) {
       # The -non_shared is needed in case of -Uusedl or otherwise
       # the test application will try to use libperl.so
       # instead of libperl.a.
       push @@cmd, "-non_shared";
   }

   push(@@cmd,"-I$inc",ccflags(),'embed_test.c');
d76 1
a76 3
   elsif ($^O eq 'os390' && $Config{usedl}) {
    # Nothing for OS/390 (z/OS) dynamic.
   } else { # Not MSWin32 or OS/390 (z/OS) dynamic.
a137 1
unlink("$exe.manifest") if $cl and $Config{'ccversion'} =~ /^(\d+)/ and $1 >= 14;
d143 2
a144 1
# gcc -g -I.. -L../ -o perl_test perl_test.c -lperl `../perl -I../lib -MExtUtils::Embed -I../ -e ccflags -e ldopts`
a160 4
#ifdef NO_ENV_ARRAY_IN_MAIN
extern char **environ;
int main(int argc, char **argv)
#else
a161 1
#endif
a173 3
#ifdef NO_ENV_ARRAY_IN_MAIN
    PERL_SYS_INIT3(&argc,&argv,&environ);
#else
a174 1
#endif
a183 3
#ifdef NO_ENV_ARRAY_IN_MAIN
    perl_parse(my_perl, NULL, (sizeof(cmds)/sizeof(char *))-1, cmds, environ);
#else
a184 1
#endif
@


1.1.1.5
log
@import perl 5.10.1
@
text
@d108 4
a111 2
   elsif ($^O eq 'cygwin') { # Cygwin needs no special treatment like below
       ;
d140 1
a140 1
  $status = system(join(' ',@@cmd2));
d166 1
a166 1
static const char * cmds [] = { "perl", "-e", "$|=1; print qq[ok 5\\n]", NULL };
d174 2
a175 2
int main(int argc, char **argv) {
    char **env;
d177 1
a177 1
int main(int argc, char **argv, char **env) {
d179 1
d191 5
a195 1
    PERL_SYS_INIT3(&argc, &argv, &env);
d205 5
a209 1
    perl_parse(my_perl, NULL, (sizeof(cmds)/sizeof(char *))-1, (char **)cmds, env);
@


1.1.1.6
log
@import perl 5.16.3 from CPAN - worked on by Andrew Fresh and myself
@
text
@d23 1
d60 3
d96 3
@


1.1.1.7
log
@Import perl-5.18.2

OK espie@@ sthen@@ deraadt@@
@
text
@d207 4
a213 4

#ifdef PERL_GLOBAL_STRUCT
    free_global_struct(plvarsp);
#endif /* PERL_GLOBAL_STRUCT */
@


1.1.1.8
log
@Import perl-5.20.1
@
text
@a13 1
use IPC::Cmd qw(can_run);
a14 5
my $cc = $Config{'cc'};
if ( $Config{usecrosscompile} && !can_run($cc) ) {
    print "1..0 # SKIP Cross-compiling and the target doesn't have $cc";
    exit;
}
d20 2
a21 2
print "1..10\n";

d139 1
a139 1
print (($status? 'not ':'')."ok 10 # system returned $status\n");
d157 1
a157 1
static const char * cmds [] = { "perl", "-e", "$|=1; print qq[ok 5\\n]; $SIG{__WARN__} = sub { print qq[ok 6\\n] if $_[0] =~ /Unexpected exit/; }; exit 5;", NULL };
d172 2
a173 1
    struct perl_vars *my_vars = init_global_struct();
d175 1
a175 3
    int veto;

    my_plvarsp = my_vars;
a187 1
    PL_exit_flags |= PERL_EXIT_WARN;
d199 1
a199 1
    my_puts("ok 7");
d203 1
a203 1
    my_puts("ok 8");
d207 1
a207 1
    my_puts("ok 9");
d212 1
a212 11
#  ifdef PERL_GLOBAL_STRUCT_PRIVATE
    veto = my_plvarsp->Gveto_cleanup;
#  endif
    free_global_struct(my_vars);
#  ifdef PERL_GLOBAL_STRUCT_PRIVATE
    if (!veto)
        my_plvarsp = NULL;
    /* Remember, functions registered with atexit() can run after this point,
       and may access "global" variables, and hence end up calling
       Perl_GetVarsPrivate()  */
#endif
@


1.1.1.9
log
@Import perl-5.24.2
@
text
@d75 1
a75 9
   # XXX DAPM 12/2014: ExtUtils::Embed doesn't seem to provide API access
   # to $Config{optimize} and so compiles the test code without
   # optimisation on optimised perls. This causes the compiler to warn
   # when -D_FORTIFY_SOURCE is in force without -O. For now, just strip
   # the fortify on optimised builds to avoid the warning.
   my $ccflags =  ccflags();
   $ccflags =~ s/-D_FORTIFY_SOURCE=\d+// if $Config{optimize} =~ /-O/;

   push(@@cmd, "-I$inc", $ccflags, 'embed_test.c');
d82 1
a82 1
	push(@@cmd,'-link',"-libpath:$lib\\lib\\CORE",$Config{'libperl'},$Config{'libs'});
d85 1
a85 1
	push(@@cmd,"-L$lib",$lib.'\lib\CORE\\'.$Config{'libperl'},$Config{'libc'});
d89 1
a89 1
    push(@@cmd,"-L$lib", ldopts());
@


