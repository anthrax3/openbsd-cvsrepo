head	1.2;
access;
symbols
	OPENBSD_4_4:1.1.1.3.0.10
	OPENBSD_4_4_BASE:1.1.1.3
	OPENBSD_4_3:1.1.1.3.0.8
	OPENBSD_4_3_BASE:1.1.1.3
	OPENBSD_4_2:1.1.1.3.0.6
	OPENBSD_4_2_BASE:1.1.1.3
	OPENBSD_4_1:1.1.1.3.0.4
	OPENBSD_4_1_BASE:1.1.1.3
	OPENBSD_4_0:1.1.1.3.0.2
	OPENBSD_4_0_BASE:1.1.1.3
	PERL_5_8_8:1.1.1.3
	OPENBSD_3_9:1.1.1.2.0.10
	OPENBSD_3_9_BASE:1.1.1.2
	OPENBSD_3_8:1.1.1.2.0.8
	OPENBSD_3_8_BASE:1.1.1.2
	OPENBSD_3_7:1.1.1.2.0.6
	OPENBSD_3_7_BASE:1.1.1.2
	PERL_5_8_6:1.1.1.2
	OPENBSD_3_6:1.1.1.2.0.4
	OPENBSD_3_6_BASE:1.1.1.2
	PERL_5_8_5:1.1.1.2
	PERL_5_8_3:1.1.1.2
	OPENBSD_3_5:1.1.1.2.0.2
	OPENBSD_3_5_BASE:1.1.1.2
	PERL_5_8_2:1.1.1.2
	OPENBSD_3_4:1.1.1.1.0.4
	OPENBSD_3_4_BASE:1.1.1.1
	OPENBSD_3_3:1.1.1.1.0.2
	OPENBSD_3_3_BASE:1.1.1.1
	PERL_5_8_0:1.1.1.1
	CPAN:1.1.1;
locks; strict;
comment	@# @;
expand	@o@;


1.2
date	2008.09.29.17.36.12;	author millert;	state dead;
branches;
next	1.1;

1.1
date	2002.10.27.22.14.59;	author millert;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	2002.10.27.22.14.59;	author millert;	state Exp;
branches;
next	1.1.1.2;

1.1.1.2
date	2003.12.03.02.44.03;	author millert;	state Exp;
branches;
next	1.1.1.3;

1.1.1.3
date	2006.03.28.18.48.45;	author millert;	state Exp;
branches;
next	;


desc
@@


1.2
log
@fix conflicts and merge in local changes to perl 5.10.0
@
text
@#!/usr/bin/perl -w

BEGIN {
    if( $ENV{PERL_CORE} ) {
        chdir 't';
        @@INC = ('../lib', 'lib/');
    }
    else {
        unshift @@INC, 't/lib/';
    }
}
chdir 't';

BEGIN {
	1 while unlink 'ecmdfile';
	# forcibly remove ecmddir/temp2, but don't import mkpath
	use File::Path ();
	File::Path::rmtree( 'ecmddir' );
}

BEGIN {
	use Test::More tests => 24;
	use File::Spec;
}

{
	# bad neighbor, but test_f() uses exit()
    *CORE::GLOBAL::exit = '';   # quiet 'only once' warning.
	*CORE::GLOBAL::exit = sub { return @@_ };

	use_ok( 'ExtUtils::Command' );

	# get a file in the current directory, replace last char with wildcard 
	my $file;
	{
		local *DIR;
		opendir(DIR, File::Spec->curdir());
		while ($file = readdir(DIR)) {
			$file =~ s/\.\z// if $^O eq 'VMS';
			last if $file =~ /^\w/;
		}
	}


    # % means 'match one character' on VMS.  Everything else is ?
    my $match_char = $^O eq 'VMS' ? '%' : '?';
	($ARGV[0] = $file) =~ s/.\z/$match_char/;

	# this should find the file
	ExtUtils::Command::expand_wildcards();

	is( scalar @@ARGV, 1, 'found one file' );
	like( $ARGV[0], qr/$file/, 'expanded wildcard ? successfully' );

	# try it with the asterisk now
	($ARGV[0] = $file) =~ s/.{3}\z/\*/;
	ExtUtils::Command::expand_wildcards();

	ok( (grep { qr/$file/ } @@ARGV), 'expanded wildcard * successfully' );

	# concatenate this file with itself
	# be extra careful the regex doesn't match itself
    use TieOut;
	my $out = tie *STDOUT, 'TieOut';
	my $self = $0;
	unless (-f $self) {
	    my ($vol, $dirs, $file) = File::Spec->splitpath($self);
	    my @@dirs = File::Spec->splitdir($dirs);
	    unshift(@@dirs, File::Spec->updir);
	    $dirs = File::Spec->catdir(@@dirs);
	    $self = File::Spec->catpath($vol, $dirs, $file);
	}
	@@ARGV = ($self, $self);

	cat();
	is( scalar( $$out =~ s/use_ok\( 'ExtUtils::Command'//g), 2, 
		'concatenation worked' );

	# the truth value here is reversed -- Perl true is C false
	@@ARGV = ( 'ecmdfile' );
	ok( test_f(), 'testing non-existent file' );

	@@ARGV = ( 'ecmdfile' );
	cmp_ok( ! test_f(), '==', (-f 'ecmdfile'), 'testing non-existent file' );

	# these are destructive, have to keep setting @@ARGV
	@@ARGV = ( 'ecmdfile' );
	touch();

	@@ARGV = ( 'ecmdfile' );
	ok( test_f(), 'now creating that file' );

	@@ARGV = ( 'ecmdfile' );
	ok( -e $ARGV[0], 'created!' );

	my ($now) = time;
	utime ($now, $now, $ARGV[0]);
    sleep 2;

	# Just checking modify time stamp, access time stamp is set
	# to the beginning of the day in Win95.
    # There's a small chance of a 1 second flutter here.
    my $stamp = (stat($ARGV[0]))[9];
	cmp_ok( abs($now - $stamp), '<=', 1, 'checking modify time stamp' ) ||
      diag "mtime == $stamp, should be $now";

    SKIP: {
        if ($^O eq 'amigaos' || $^O eq 'os2' || $^O eq 'MSWin32' ||
            $^O eq 'NetWare' || $^O eq 'dos' || $^O eq 'cygwin'  ||
            $^O eq 'MacOS'
           ) {
            skip( "different file permission semantics on $^O", 3);
        }

        # change a file to execute-only
        @@ARGV = ( 0100, 'ecmdfile' );
        ExtUtils::Command::chmod();

        is( ((stat('ecmdfile'))[2] & 07777) & 0700,
            0100, 'change a file to execute-only' );

        # change a file to read-only
        @@ARGV = ( 0400, 'ecmdfile' );
        ExtUtils::Command::chmod();

        is( ((stat('ecmdfile'))[2] & 07777) & 0700,
            ($^O eq 'vos' ? 0500 : 0400), 'change a file to read-only' );

        # change a file to write-only
        @@ARGV = ( 0200, 'ecmdfile' );
        ExtUtils::Command::chmod();

        is( ((stat('ecmdfile'))[2] & 07777) & 0700,
            ($^O eq 'vos' ? 0700 : 0200), 'change a file to write-only' );
    }

    # change a file to read-write
	@@ARGV = ( 0600, 'ecmdfile' );
	ExtUtils::Command::chmod();

    is( ((stat('ecmdfile'))[2] & 07777) & 0700,
        ($^O eq 'vos' ? 0700 : 0600), 'change a file to read-write' );

	# mkpath
	@@ARGV = ( File::Spec->join( 'ecmddir', 'temp2' ) );
	ok( ! -e $ARGV[0], 'temp directory not there yet' );

	mkpath();
	ok( -e $ARGV[0], 'temp directory created' );

	# copy a file to a nested subdirectory
	unshift @@ARGV, 'ecmdfile';
	cp();

	ok( -e File::Spec->join( 'ecmddir', 'temp2', 'ecmdfile' ), 'copied okay' );

	# cp should croak if destination isn't directory (not a great warning)
	@@ARGV = ( 'ecmdfile' ) x 3;
	eval { cp() };

	like( $@@, qr/Too many arguments/, 'cp croaks on error' );

	# move a file to a subdirectory
	@@ARGV = ( 'ecmdfile', 'ecmddir' );
	mv();

	ok( ! -e 'ecmdfile', 'moved file away' );
	ok( -e File::Spec->join( 'ecmddir', 'ecmdfile' ), 'file in new location' );

	# mv should also croak with the same wacky warning
	@@ARGV = ( 'ecmdfile' ) x 3;

	eval { mv() };
	like( $@@, qr/Too many arguments/, 'mv croaks on error' );

	# remove some files
	my @@files = @@ARGV = ( File::Spec->catfile( 'ecmddir', 'ecmdfile' ),
	File::Spec->catfile( 'ecmddir', 'temp2', 'ecmdfile' ) );
	rm_f();

	ok( ! -e $_, "removed $_ successfully" ) for (@@ARGV);

	# rm_f dir
	@@ARGV = my $dir = File::Spec->catfile( 'ecmddir' );
	rm_rf();
	ok( ! -e $dir, "removed $dir successfully" );
}

END {
	1 while unlink 'ecmdfile';
	File::Path::rmtree( 'ecmddir' );
}
@


1.1
log
@Initial revision
@
text
@@


1.1.1.1
log
@stock perl 5.8.0 from CPAN
@
text
@@


1.1.1.2
log
@perl 5.8.2 from CPAN
@
text
@d15 4
a18 1
    $Testfile = 'testfile.foo';
d22 2
a23 4
    1 while unlink $Testfile, 'newfile';
    # forcibly remove ecmddir/temp2, but don't import mkpath
    use File::Path ();
    File::Path::rmtree( 'ecmddir' );
d26 32
a57 4
BEGIN {
    use Test::More tests => 26;
    use File::Spec;
}
d59 1
a59 6
BEGIN {
    # bad neighbor, but test_f() uses exit()
        *CORE::GLOBAL::exit = '';   # quiet 'only once' warning.
    *CORE::GLOBAL::exit = sub { return @@_ };
    use_ok( 'ExtUtils::Command' );
}
d61 2
a62 3
{
    # concatenate this file with itself
    # be extra careful the regex doesn't match itself
d64 25
a88 25
    my $out = tie *STDOUT, 'TieOut';
    my $self = $0;
    unless (-f $self) {
        my ($vol, $dirs, $file) = File::Spec->splitpath($self);
        my @@dirs = File::Spec->splitdir($dirs);
        unshift(@@dirs, File::Spec->updir);
        $dirs = File::Spec->catdir(@@dirs);
        $self = File::Spec->catpath($vol, $dirs, $file);
    }
    @@ARGV = ($self, $self);

    cat();
    is( scalar( $$out =~ s/use_ok\( 'ExtUtils::Command'//g), 2, 
        'concatenation worked' );

    # the truth value here is reversed -- Perl true is C false
    @@ARGV = ( $Testfile );
    ok( test_f(), 'testing non-existent file' );

    @@ARGV = ( $Testfile );
    cmp_ok( ! test_f(), '==', (-f $Testfile), 'testing non-existent file' );

    # these are destructive, have to keep setting @@ARGV
    @@ARGV = ( $Testfile );
    touch();
d90 2
a91 2
    @@ARGV = ( $Testfile );
    ok( test_f(), 'now creating that file' );
d93 2
a94 2
    @@ARGV = ( $Testfile );
    ok( -e $ARGV[0], 'created!' );
d96 2
a97 2
    my ($now) = time;
    utime ($now, $now, $ARGV[0]);
d100 2
a101 2
    # Just checking modify time stamp, access time stamp is set
    # to the beginning of the day in Win95.
d104 1
a104 1
    cmp_ok( abs($now - $stamp), '<=', 1, 'checking modify time stamp' ) ||
a106 21
    @@ARGV = qw(newfile);
    touch();

    my $new_stamp = (stat('newfile'))[9];
    cmp_ok( abs($new_stamp - $stamp), '>=', 2,  'newer file created' );

    @@ARGV = ('newfile', $Testfile);
    eqtime();

    $stamp = (stat($Testfile))[9];
    cmp_ok( abs($new_stamp - $stamp), '<=', 1, 'eqtime' );

    # eqtime use to clear the contents of the file being equalized!
    open(FILE, ">>$Testfile") || die $!;
    print FILE "Foo";
    close FILE;

    @@ARGV = ('newfile', $Testfile);
    eqtime();
    ok( -s $Testfile, "eqtime doesn't clear the file being equalized" );

d116 1
a116 1
        @@ARGV = ( '0100', $Testfile );
d119 1
a119 1
        is( ((stat($Testfile))[2] & 07777) & 0700,
d123 1
a123 1
        @@ARGV = ( '0400', $Testfile );
d126 1
a126 1
        is( ((stat($Testfile))[2] & 07777) & 0700,
d130 1
a130 1
        @@ARGV = ( '0200', $Testfile );
d133 1
a133 1
        is( ((stat($Testfile))[2] & 07777) & 0700,
d138 2
a139 2
    @@ARGV = ( '0600', $Testfile );
    ExtUtils::Command::chmod();
d141 1
a141 1
    is( ((stat($Testfile))[2] & 07777) & 0700,
d144 3
a146 6
    # mkpath
    @@ARGV = ( File::Spec->join( 'ecmddir', 'temp2' ) );
    ok( ! -e $ARGV[0], 'temp directory not there yet' );

    mkpath();
    ok( -e $ARGV[0], 'temp directory created' );
d148 2
a149 3
    # copy a file to a nested subdirectory
    unshift @@ARGV, $Testfile;
    cp();
d151 3
a153 1
    ok( -e File::Spec->join( 'ecmddir', 'temp2', $Testfile ), 'copied okay' );
d155 1
a155 3
    # cp should croak if destination isn't directory (not a great warning)
    @@ARGV = ( $Testfile ) x 3;
    eval { cp() };
d157 3
a159 1
    like( $@@, qr/Too many arguments/, 'cp croaks on error' );
d161 1
a161 3
    # move a file to a subdirectory
    @@ARGV = ( $Testfile, 'ecmddir' );
    mv();
d163 3
a165 2
    ok( ! -e $Testfile, 'moved file away' );
    ok( -e File::Spec->join( 'ecmddir', $Testfile ), 'file in new location' );
d167 2
a168 2
    # mv should also croak with the same wacky warning
    @@ARGV = ( $Testfile ) x 3;
d170 2
a171 2
    eval { mv() };
    like( $@@, qr/Too many arguments/, 'mv croaks on error' );
d173 2
a174 5
    # Test expand_wildcards()
    {
        my $file = $Testfile;
        @@ARGV = ();
        chdir 'ecmddir';
d176 4
a179 3
        # % means 'match one character' on VMS.  Everything else is ?
        my $match_char = $^O eq 'VMS' ? '%' : '?';
        ($ARGV[0] = $file) =~ s/.\z/$match_char/;
d181 1
a181 13
        # this should find the file
        ExtUtils::Command::expand_wildcards();

        is_deeply( \@@ARGV, [$file], 'expanded wildcard ? successfully' );

        # try it with the asterisk now
        ($ARGV[0] = $file) =~ s/.{3}\z/\*/;
        ExtUtils::Command::expand_wildcards();

        is_deeply( \@@ARGV, [$file], 'expanded wildcard * successfully' );

        chdir File::Spec->updir;
    }
d183 4
a186 11
    # remove some files
    my @@files = @@ARGV = ( File::Spec->catfile( 'ecmddir', $Testfile ),
    File::Spec->catfile( 'ecmddir', 'temp2', $Testfile ) );
    rm_f();

    ok( ! -e $_, "removed $_ successfully" ) for (@@ARGV);

    # rm_f dir
    @@ARGV = my $dir = File::Spec->catfile( 'ecmddir' );
    rm_rf();
    ok( ! -e $dir, "removed $dir successfully" );
d190 2
a191 2
    1 while unlink $Testfile, 'newfile';
    File::Path::rmtree( 'ecmddir' );
@


1.1.1.3
log
@perl 5.8.8 import
@
text
@d26 1
a26 1
    use Test::More tests => 38;
d61 1
a61 1
    cmp_ok( ! test_f(), '==', defined (-f $Testfile), 'testing non-existent file' );
a68 1
    is_deeply( \@@ARGV, [$Testfile], 'test_f preserves @@ARGV' );
a136 1
    my @@orig_argv = @@ARGV;
a137 1
    is_deeply( \@@ARGV, \@@orig_argv, 'chmod preserves @@ARGV' );
a141 39

    SKIP: {
        if ($^O eq 'amigaos' || $^O eq 'os2' || $^O eq 'MSWin32' ||
            $^O eq 'NetWare' || $^O eq 'dos' || $^O eq 'cygwin'  ||
            $^O eq 'MacOS'
           ) {
            skip( "different file permission semantics on $^O", 4);
        }

        @@ARGV = ('testdir');
        mkpath;
        ok( -e 'testdir' );

        # change a dir to execute-only
        @@ARGV = ( '0100', 'testdir' );
        ExtUtils::Command::chmod();

        is( ((stat('testdir'))[2] & 07777) & 0700,
            0100, 'change a dir to execute-only' );

        # change a dir to read-only
        @@ARGV = ( '0400', 'testdir' );
        ExtUtils::Command::chmod();

        is( ((stat('testdir'))[2] & 07777) & 0700,
            ($^O eq 'vos' ? 0500 : 0400), 'change a dir to read-only' );

        # change a dir to write-only
        @@ARGV = ( '0200', 'testdir' );
        ExtUtils::Command::chmod();

        is( ((stat('testdir'))[2] & 07777) & 0700,
            ($^O eq 'vos' ? 0700 : 0200), 'change a dir to write-only' );

        @@ARGV = ('testdir');
        rm_rf;
    }


a150 1
    @@orig_argv = @@ARGV;
a151 1
    is_deeply( \@@ARGV, \@@orig_argv, 'cp preserves @@ARGV' );
d163 1
a163 3
    @@orig_argv = @@ARGV;
    ok( mv() );
    is_deeply( \@@ARGV, \@@orig_argv, 'mv preserves @@ARGV' );
a210 27
{
    { local @@ARGV = 'd2utest'; mkpath; }
    open(FILE, '>d2utest/foo');
    print FILE "stuff\015\012and thing\015\012";
    close FILE;

    open(FILE, '>d2utest/bar');
    binmode(FILE);
    my $bin = "\c@@\c@@\c@@\c@@\c@@\c@@\cA\c@@\c@@\c@@\015\012".
              "\@@\c@@\cA\c@@\c@@\c@@8__LIN\015\012";
    print FILE $bin;
    close FILE;

    local @@ARGV = 'd2utest';
    ExtUtils::Command::dos2unix();

    open(FILE, 'd2utest/foo');
    is( join('', <FILE>), "stuff\012and thing\012", 'dos2unix' );
    close FILE;

    open(FILE, 'd2utest/bar');
    binmode(FILE);
    ok( -B 'd2utest/bar' );
    is( join('', <FILE>), $bin, 'dos2unix preserves binaries');
    close FILE;
}

a213 1
    File::Path::rmtree( 'd2utest' );
@


