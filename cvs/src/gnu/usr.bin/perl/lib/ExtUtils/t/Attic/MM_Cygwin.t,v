head	1.2;
access;
symbols
	OPENBSD_4_8:1.1.1.4.0.4
	OPENBSD_4_8_BASE:1.1.1.4
	OPENBSD_4_7:1.1.1.4.0.2
	OPENBSD_4_7_BASE:1.1.1.4
	PERL_5_10_1:1.1.1.4
	OPENBSD_4_6:1.1.1.3.0.16
	OPENBSD_4_6_BASE:1.1.1.3
	OPENBSD_4_5:1.1.1.3.0.12
	OPENBSD_4_5_BASE:1.1.1.3
	PERL_5_10_0:1.1.1.3
	OPENBSD_4_4:1.1.1.3.0.10
	OPENBSD_4_4_BASE:1.1.1.3
	OPENBSD_4_3:1.1.1.3.0.8
	OPENBSD_4_3_BASE:1.1.1.3
	OPENBSD_4_2:1.1.1.3.0.6
	OPENBSD_4_2_BASE:1.1.1.3
	OPENBSD_4_1:1.1.1.3.0.4
	OPENBSD_4_1_BASE:1.1.1.3
	OPENBSD_4_0:1.1.1.3.0.2
	OPENBSD_4_0_BASE:1.1.1.3
	PERL_5_8_8:1.1.1.3
	OPENBSD_3_9:1.1.1.2.0.10
	OPENBSD_3_9_BASE:1.1.1.2
	OPENBSD_3_8:1.1.1.2.0.8
	OPENBSD_3_8_BASE:1.1.1.2
	OPENBSD_3_7:1.1.1.2.0.6
	OPENBSD_3_7_BASE:1.1.1.2
	PERL_5_8_6:1.1.1.2
	OPENBSD_3_6:1.1.1.2.0.4
	OPENBSD_3_6_BASE:1.1.1.2
	PERL_5_8_5:1.1.1.2
	PERL_5_8_3:1.1.1.2
	OPENBSD_3_5:1.1.1.2.0.2
	OPENBSD_3_5_BASE:1.1.1.2
	PERL_5_8_2:1.1.1.2
	OPENBSD_3_4:1.1.1.1.0.4
	OPENBSD_3_4_BASE:1.1.1.1
	OPENBSD_3_3:1.1.1.1.0.2
	OPENBSD_3_3_BASE:1.1.1.1
	PERL_5_8_0:1.1.1.1
	CPAN:1.1.1;
locks; strict;
comment	@# @;
expand	@o@;


1.2
date	2010.09.24.14.59.39;	author millert;	state dead;
branches;
next	1.1;

1.1
date	2002.10.27.22.14.59;	author millert;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	2002.10.27.22.14.59;	author millert;	state Exp;
branches;
next	1.1.1.2;

1.1.1.2
date	2003.12.03.02.44.03;	author millert;	state Exp;
branches;
next	1.1.1.3;

1.1.1.3
date	2006.03.28.18.48.45;	author millert;	state Exp;
branches;
next	1.1.1.4;

1.1.1.4
date	2009.10.12.18.10.51;	author millert;	state Exp;
branches;
next	;


desc
@@


1.2
log
@remove files no longer in perl 5.12.2 (or that have moved)
@
text
@#!/usr/bin/perl

BEGIN {
    if( $ENV{PERL_CORE} ) {
        chdir 't' if -d 't';
        @@INC = '../lib';
    }
    else {
        unshift @@INC, 't/lib';
    }
}
chdir 't';

use Test::More;

BEGIN {
	if ($^O =~ /cygwin/i) {
		plan tests => 13;
	} else {
		plan skip_all => "This is not cygwin";
	}
}

use Config;
use File::Spec;
use ExtUtils::MM;

use_ok( 'ExtUtils::MM_Cygwin' );

# test canonpath
my $path = File::Spec->canonpath('/a/../../c');
is( MM->canonpath('/a/../../c'), $path,
	'canonpath() method should work just like the one in File::Spec' );

# test cflags, with the fake package below
my $args = bless({
	CFLAGS	=> 'fakeflags',
	CCFLAGS	=> '',
}, MM);

# with CFLAGS set, it should be returned
is( $args->cflags(), 'fakeflags',
	'cflags() should return CFLAGS member data, if set' );

delete $args->{CFLAGS};

# ExtUtils::MM_Cygwin::cflags() calls this, fake the output
{
    local $SIG{__WARN__} = sub { 
        # no warnings 'redefine';
        warn @@_ unless $_[0] =~ /^Subroutine .* redefined/;
    };
    sub ExtUtils::MM_Unix::cflags { return $_[1] };
}

# respects the config setting, should ignore whitespace around equal sign
my $ccflags = $Config{useshrplib} eq 'true' ? ' -DUSEIMPORTLIB' : '';
{
    local $args->{NEEDS_LINKING} = 1;
    $args->cflags(<<FLAGS);
OPTIMIZE = opt
PERLTYPE  =pt
FLAGS
}

like( $args->{CFLAGS}, qr/OPTIMIZE = opt/, '... should set OPTIMIZE' );
like( $args->{CFLAGS}, qr/PERLTYPE = pt/, '... should set PERLTYPE' );
like( $args->{CFLAGS}, qr/CCFLAGS = $ccflags/, '... should set CCFLAGS' );

# test manifypods
$args = bless({
	NOECHO => 'noecho',
	MAN3PODS => {},
	MAN1PODS => {},
    MAKEFILE => 'Makefile',
}, 'MM');
like( $args->manifypods(), qr/pure_all\n\tnoecho/,
	'manifypods() should return without PODS values set' );

$args->{MAN3PODS} = { foo => 1 };
my $out = tie *STDOUT, 'FakeOut';
{
    local $SIG{__WARN__} = sub {
        # no warnings 'redefine';
        warn @@_ unless $_[0] =~ /used only once/;
    };
    no warnings 'once';
    local *MM::perl_script = sub { return };
    my $res = $args->manifypods();
    like( $$out, qr/could not locate your pod2man/,
          '... should warn if pod2man cannot be located' );
    like( $res, qr/POD2MAN_EXE = -S pod2man/,
          '... should use default pod2man target' );
    like( $res, qr/pure_all.+foo/, '... should add MAN3PODS targets' );
}

SKIP: {
    skip "Only relevent in the core", 2 unless $ENV{PERL_CORE};
    $args->{PERL_SRC} = File::Spec->updir;
    $args->{MAN1PODS} = { bar => 1 };
    $$out = '';
    $res = $args->manifypods();
    is( $$out, '', '... should not warn if PERL_SRC provided' );
    like( $res, qr/bar \\\n\t1 \\\n\tfoo/,
          '... should join MAN1PODS and MAN3PODS');
}

# test perl_archive
my $libperl = $Config{libperl} || 'libperl.a';
$libperl =~ s/\.a/.dll.a/;
is( $args->perl_archive(), "\$(PERL_INC)/$libperl",
	'perl_archive() should respect libperl setting' );


package FakeOut;

sub TIEHANDLE {
	bless(\(my $scalar), $_[0]);
}

sub PRINT {
	my $self = shift;
	$$self .= shift;
}
@


1.1
log
@Initial revision
@
text
@@


1.1.1.1
log
@stock perl 5.8.0 from CPAN
@
text
@@


1.1.1.2
log
@perl 5.8.2 from CPAN
@
text
@a13 1
use strict;
d18 1
a18 1
		plan tests => 11;
d36 1
a36 1
my $MM = bless({
d39 1
a39 1
}, 'MM');
d42 1
a42 1
is( $MM->cflags(), 'fakeflags',
d45 1
a45 1
delete $MM->{CFLAGS};
d50 1
d53 1
a53 1
    *ExtUtils::MM_Unix::cflags = sub { return $_[1] };
d59 2
a60 2
    local $MM->{NEEDS_LINKING} = 1;
    $MM->cflags(<<FLAGS);
d66 3
a68 3
like( $MM->{CFLAGS}, qr/OPTIMIZE = opt/, '... should set OPTIMIZE' );
like( $MM->{CFLAGS}, qr/PERLTYPE = pt/, '... should set PERLTYPE' );
like( $MM->{CFLAGS}, qr/CCFLAGS = $ccflags/, '... should set CCFLAGS' );
d71 1
a71 1
$MM = bless({
d77 1
a77 1
unlike( $MM->manifypods(), qr/foo/,
d80 16
a95 4
$MM->{MAN3PODS} = { foo => 'foo.1' };
my $res = $MM->manifypods();
like( $res, qr/pure_all.*foo.*foo.1/s, '... should add MAN3PODS targets' );

d97 9
a105 13
# init_linker
{
    my $libperl = $Config{libperl} || 'libperl.a';
    $libperl =~ s/\.a/.dll.a/ if $] >= 5.007;
    $libperl = "\$(PERL_INC)/$libperl";

    my $export  = '';
    my $after   = '';
    $MM->init_linker;

    is( $MM->{PERL_ARCHIVE},        $libperl,   'PERL_ARCHIVE' );
    is( $MM->{PERL_ARCHIVE_AFTER},  $after,     'PERL_ARCHIVE_AFTER' );
    is( $MM->{EXPORT_LIST},         $export,    'EXPORT_LIST' );
d108 5
@


1.1.1.3
log
@perl 5.8.8 import
@
text
@d88 1
a88 1
    $libperl =~ s/\.a/.dll.a/ if $] >= 5.006002;
@


1.1.1.4
log
@import perl 5.10.1
@
text
@d19 1
a19 1
		plan tests => 14;
a27 1
use Config;
a99 24
# Tests for correct handling of maybe_command in /cygdrive/*
# and c:/*.  $ENV{COMSPEC}, if it exists, should always be executable.
SKIP: {
    skip "Needs Cygwin::win_to_posix_path()", 2 unless defined &Cygwin::win_to_posix_path;

    SKIP: {
        my $comspec = $ENV{COMSPEC};
        skip(q[$ENV{COMSPEC} does not exist], 1) unless $comspec;

        $comspec = Cygwin::win_to_posix_path($comspec);

        ok(MM->maybe_command($comspec), qq{'$comspec' should be executable"});
    }

    # 'C:/' should *never* be executable, it's a directory.
    {
        my $cdrive = Cygwin::win_to_posix_path("C:/");

        ok(!MM->maybe_command($cdrive), qq{'$cdrive' should never be executable});
    }
}

# Our copy of Perl (with a unix-path) should always be executable.
ok(MM->maybe_command($Config{perlpath}), qq{'$Config{perlpath}' should be executable});
@


