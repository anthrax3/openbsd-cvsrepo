head	1.2;
access;
symbols
	OPENBSD_4_8:1.1.1.3.0.18
	OPENBSD_4_8_BASE:1.1.1.3
	OPENBSD_4_7:1.1.1.3.0.14
	OPENBSD_4_7_BASE:1.1.1.3
	PERL_5_10_1:1.1.1.3
	OPENBSD_4_6:1.1.1.3.0.16
	OPENBSD_4_6_BASE:1.1.1.3
	OPENBSD_4_5:1.1.1.3.0.12
	OPENBSD_4_5_BASE:1.1.1.3
	PERL_5_10_0:1.1.1.3
	OPENBSD_4_4:1.1.1.3.0.10
	OPENBSD_4_4_BASE:1.1.1.3
	OPENBSD_4_3:1.1.1.3.0.8
	OPENBSD_4_3_BASE:1.1.1.3
	OPENBSD_4_2:1.1.1.3.0.6
	OPENBSD_4_2_BASE:1.1.1.3
	OPENBSD_4_1:1.1.1.3.0.4
	OPENBSD_4_1_BASE:1.1.1.3
	OPENBSD_4_0:1.1.1.3.0.2
	OPENBSD_4_0_BASE:1.1.1.3
	PERL_5_8_8:1.1.1.3
	OPENBSD_3_9:1.1.1.2.0.10
	OPENBSD_3_9_BASE:1.1.1.2
	OPENBSD_3_8:1.1.1.2.0.8
	OPENBSD_3_8_BASE:1.1.1.2
	OPENBSD_3_7:1.1.1.2.0.6
	OPENBSD_3_7_BASE:1.1.1.2
	PERL_5_8_6:1.1.1.2
	OPENBSD_3_6:1.1.1.2.0.4
	OPENBSD_3_6_BASE:1.1.1.2
	PERL_5_8_5:1.1.1.2
	PERL_5_8_3:1.1.1.2
	OPENBSD_3_5:1.1.1.2.0.2
	OPENBSD_3_5_BASE:1.1.1.2
	PERL_5_8_2:1.1.1.2
	OPENBSD_3_4:1.1.1.1.0.4
	OPENBSD_3_4_BASE:1.1.1.1
	OPENBSD_3_3:1.1.1.1.0.2
	OPENBSD_3_3_BASE:1.1.1.1
	PERL_5_8_0:1.1.1.1
	CPAN:1.1.1;
locks; strict;
comment	@# @;
expand	@o@;


1.2
date	2010.09.24.14.59.39;	author millert;	state dead;
branches;
next	1.1;

1.1
date	2002.10.27.22.14.59;	author millert;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	2002.10.27.22.14.59;	author millert;	state Exp;
branches;
next	1.1.1.2;

1.1.1.2
date	2003.12.03.02.44.03;	author millert;	state Exp;
branches;
next	1.1.1.3;

1.1.1.3
date	2006.03.28.18.48.45;	author millert;	state Exp;
branches;
next	;


desc
@@


1.2
log
@remove files no longer in perl 5.12.2 (or that have moved)
@
text
@#!/usr/bin/perl -w

# Wherein we ensure the INST_* and INSTALL* variables are set correctly
# when various PREFIX variables are set.
#
# Essentially, this test is a Makefile.PL.

BEGIN {
    if( $ENV{PERL_CORE} ) {
        chdir 't' if -d 't';
        @@INC = ('../lib', 'lib');
    }
    else {
        unshift @@INC, 't/lib';
    }
}

use strict;
use Test::More tests => 26;
use MakeMaker::Test::Utils;
use ExtUtils::MakeMaker;
use File::Spec;
use TieOut;
use Config;

my $Is_VMS = $^O eq 'VMS';

chdir 't';

perl_lib;

$| = 1;

my $Makefile = makefile_name;
my $Curdir = File::Spec->curdir;
my $Updir  = File::Spec->updir;

ok( chdir 'Big-Dummy', "chdir'd to Big-Dummy" ) ||
  diag("chdir failed: $!");

my $PREFIX = File::Spec->catdir('foo', 'bar');
my $stdout = tie *STDOUT, 'TieOut' or die;
my $mm = WriteMakefile(
    NAME          => 'Big::Dummy',
    VERSION_FROM  => 'lib/Big/Dummy.pm',
    PREREQ_PM     => {},
    PERL_CORE     => $ENV{PERL_CORE},
    PREFIX        => $PREFIX,
);
like( $stdout->read, qr{
                        Writing\ $Makefile\ for\ Big::Liar\n
                        Big::Liar's\ vars\n
                        INST_LIB\ =\ \S+\n
                        INST_ARCHLIB\ =\ \S+\n
                        Writing\ $Makefile\ for\ Big::Dummy\n
}x );
undef $stdout;
untie *STDOUT;

isa_ok( $mm, 'ExtUtils::MakeMaker' );

is( $mm->{NAME}, 'Big::Dummy',  'NAME' );
is( $mm->{VERSION}, 0.01,            'VERSION' );

is( $mm->{PREFIX}, $PREFIX,   'PREFIX' );

is( !!$mm->{PERL_CORE}, !!$ENV{PERL_CORE}, 'PERL_CORE' );

my($perl_src, $mm_perl_src);
if( $ENV{PERL_CORE} ) {
    $perl_src = File::Spec->catdir($Updir, $Updir);
    $perl_src = File::Spec->canonpath($perl_src);
    $mm_perl_src = File::Spec->canonpath($mm->{PERL_SRC});
}
else {
    $mm_perl_src = $mm->{PERL_SRC};
}

is( $mm_perl_src, $perl_src,     'PERL_SRC' );


# Every INSTALL* variable must start with some PREFIX.
my @@Perl_Install = qw(archlib    privlib   bin     script 
                      man1dir       man3dir);
my @@Site_Install = qw(sitearch   sitelib   sitebin        
                      siteman1dir siteman3dir);
my @@Vend_Install = qw(vendorarch vendorlib vendorbin 
                      vendorman1dir vendorman3dir);

foreach my $var (@@Perl_Install) {
    my $prefix = $Is_VMS ? '[.foo.bar' : File::Spec->catdir(qw(foo bar));

    # support for man page skipping
    $prefix = 'none' if $var =~ /man/ && !$Config{"install$var"};
    like( $mm->{uc "install$var"}, qr/^\Q$prefix\E/, "PREFIX + $var" );
}

foreach my $var (@@Site_Install) {
    my $prefix = $Is_VMS ? '[.foo.bar' : File::Spec->catdir(qw(foo bar));

    like( $mm->{uc "install$var"}, qr/^\Q$prefix\E/, 
                                                    "SITEPREFIX + $var" );
}

foreach my $var (@@Vend_Install) {
    my $prefix = $Is_VMS ? '[.foo.bar' : File::Spec->catdir(qw(foo bar));

    like( $mm->{uc "install$var"}, qr/^\Q$prefix\E/,
                                                    "VENDORPREFIX + $var" );
}


# Check that when installman*dir isn't set in Config no man pages
# are generated.
{
    undef *ExtUtils::MM_Unix::Config;
    %ExtUtils::MM_Unix::Config = %Config;
    $ExtUtils::MM_Unix::Config{installman1dir} = '';
    $ExtUtils::MM_Unix::Config{installman3dir} = '';

    my $wibble = File::Spec->catdir(qw(wibble and such));
    my $stdout = tie *STDOUT, 'TieOut' or die;
    my $mm = WriteMakefile(
                           NAME          => 'Big::Dummy',
                           VERSION_FROM  => 'lib/Big/Dummy.pm',
                           PREREQ_PM     => {},
                           PERL_CORE     => $ENV{PERL_CORE},
                           PREFIX        => $PREFIX,
                           INSTALLMAN1DIR=> $wibble,
                          );

    is( $mm->{INSTALLMAN1DIR}, $wibble );
    is( $mm->{INSTALLMAN3DIR}, 'none'  );
}
@


1.1
log
@Initial revision
@
text
@@


1.1.1.1
log
@stock perl 5.8.0 from CPAN
@
text
@@


1.1.1.2
log
@perl 5.8.2 from CPAN
@
text
@d19 1
a19 1
use Test::More tests => 36;
d41 1
a42 1

d48 1
a49 1

d57 2
a64 23
foreach my $prefix (qw(PREFIX PERLPREFIX SITEPREFIX VENDORPREFIX)) {
    unlike( $mm->{$prefix}, qr/\$\(PREFIX\)/ );
}


my $PREFIX = File::Spec->catdir('foo', 'bar');
$mm = WriteMakefile(
    NAME          => 'Big::Dummy',
    VERSION_FROM  => 'lib/Big/Dummy.pm',
    PREREQ_PM     => {},
    PERL_CORE     => $ENV{PERL_CORE},
    PREFIX        => $PREFIX,
);
like( $stdout->read, qr{
                        Writing\ $Makefile\ for\ Big::Liar\n
                        Big::Liar's\ vars\n
                        INST_LIB\ =\ \S+\n
                        INST_ARCHLIB\ =\ \S+\n
                        Writing\ $Makefile\ for\ Big::Dummy\n
}x );
undef $stdout;
untie *STDOUT;

a66 4
foreach my $prefix (qw(PERLPREFIX SITEPREFIX VENDORPREFIX)) {
    is( $mm->{$prefix}, '$(PREFIX)', "\$(PREFIX) overrides $prefix" );
}

d83 21
a103 5
my %Install_Vars = (
 PERL   => [qw(archlib    privlib   bin       man1dir       man3dir   script)],
 SITE   => [qw(sitearch   sitelib   sitebin   siteman1dir   siteman3dir)],
 VENDOR => [qw(vendorarch vendorlib vendorbin vendorman1dir vendorman3dir)]
);
d105 2
a106 1
while( my($type, $vars) = each %Install_Vars) {
d108 2
a109 12
    SKIP: foreach my $var (@@$vars) {
        skip "VMS must expand macros in INSTALL* vars", scalar @@$vars 
          if $Is_VMS;

        my $prefix = '$('.$type.'PREFIX)';

        # support for man page skipping
        $prefix = 'none' if $type eq 'PERL' && 
                            $var =~ /man/ && 
                            !$Config{"install$var"};
        like( $mm->{uc "install$var"}, qr/^\Q$prefix\E/, "$prefix + $var" );
    }
d112 1
a116 1
    undef *ExtUtils::MM_Unix::Config_Override;
a117 2
    *ExtUtils::MM_VMS::Config = \%ExtUtils::MM_Unix::Config;

a133 34
}

# Check that when installvendorman*dir is set in Config it is honored
# [rt.cpan.org 2949]
{
    undef *ExtUtils::MM_Unix::Config;
    undef *ExtUtils::MM_Unix::Config_Override;
    undef *ExtUtils::MM_VMS::Config;

    %ExtUtils::MM_Unix::Config = %Config;
    *ExtUtils::MM_VMS::Config = \%ExtUtils::MM_Unix::Config;

    $ExtUtils::MM_Unix::Config{installvendorman1dir} = 
      File::Spec->catdir('foo','bar');
    $ExtUtils::MM_Unix::Config{installvendorman3dir} = '';
    $ExtUtils::MM_Unix::Config{usevendorprefix} = 1;
    $ExtUtils::MM_Unix::Config{vendorprefixexp} = 'something';

    my $stdout = tie *STDOUT, 'TieOut' or die;
    my $mm = WriteMakefile(
                   NAME          => 'Big::Dummy',
                   VERSION_FROM  => 'lib/Big/Dummy.pm',
                   PREREQ_PM     => {},
                   PERL_CORE     => $ENV{PERL_CORE},

                   # In case the local installation doesn't have man pages.
                   INSTALLMAN1DIR=> 'foo/bar/baz',
                   INSTALLMAN3DIR=> 'foo/bar/baz',
                  );

    is( $mm->{INSTALLVENDORMAN1DIR}, File::Spec->catdir('foo','bar'), 
                      'installvendorman1dir (in %Config) not modified' );
    isnt( $mm->{INSTALLVENDORMAN3DIR}, '', 
                      'installvendorman3dir (not in %Config) set'  );
@


1.1.1.3
log
@perl 5.8.8 import
@
text
@d19 1
a19 1
use Test::More tests => 52;
a20 1
use MakeMaker::Test::Setup::BFD;
d24 1
a24 1
use ExtUtils::MakeMaker::Config;
a37 6
ok( setup_recurs(), 'setup' );
END {
    ok( chdir File::Spec->updir );
    ok( teardown_recurs(), 'teardown' );
}

a57 2
is( $mm->{PREFIX}, '$(SITEPREFIX)', 'PREFIX set based on INSTALLDIRS' );

d115 2
a116 1
    SKIP: {
d118 9
a126 20
          if $Is_VMS;    
        skip '$Config{usevendorprefix} not set', scalar @@$vars
          if $type eq 'VENDOR' and !$Config{usevendorprefix};

        foreach my $var (@@$vars) {
            my $installvar = "install$var";
            my $prefix = '$('.$type.'PREFIX)';

            SKIP: {
                skip uc($installvar).' set to another INSTALL variable', 1
                  if $mm->{uc $installvar} =~ /^\$\(INSTALL.*\)$/;

                # support for man page skipping
                $prefix = 'none' if $type eq 'PERL' && 
                                    $var =~ /man/ && 
                                    !$Config{$installvar};
                like( $mm->{uc $installvar}, qr/^\Q$prefix\E/, 
                      "$prefix + $var" );
            }
        }
d133 7
a139 2
    _set_config(installman1dir => '');
    _set_config(installman3dir => '');
d159 12
a170 4
    _set_config(installvendorman1dir => File::Spec->catdir('foo','bar') );
    _set_config(installvendorman3dir => '' );
    _set_config(usevendorprefix => 1 );
    _set_config(vendorprefixexp => 'something' );
a187 76
}

# Check that when installsiteman*dir isn't set in Config it falls back
# to installman*dir
{
    _set_config(installman1dir => File::Spec->catdir('foo', 'bar') );
    _set_config(installman3dir => File::Spec->catdir('foo', 'baz') );
    _set_config(installsiteman1dir => '' );
    _set_config(installsiteman3dir => '' );
    _set_config(installvendorman1dir => '' );
    _set_config(installvendorman3dir => '' );
    _set_config(usevendorprefix => 'define' );
    _set_config(vendorprefixexp => 'something' );

    my $wibble = File::Spec->catdir(qw(wibble and such));
    my $stdout = tie *STDOUT, 'TieOut' or die;
    my $mm = WriteMakefile(
                           NAME          => 'Big::Dummy',
                           VERSION_FROM  => 'lib/Big/Dummy.pm',
                           PERL_CORE     => $ENV{PERL_CORE},
                          );

    is( $mm->{INSTALLMAN1DIR}, File::Spec->catdir('foo', 'bar') );
    is( $mm->{INSTALLMAN3DIR}, File::Spec->catdir('foo', 'baz') );
    SKIP: {
        skip "VMS must expand macros in INSTALL* vars", 4 if $Is_VMS;

        is( $mm->{INSTALLSITEMAN1DIR},   '$(INSTALLMAN1DIR)' );
        is( $mm->{INSTALLSITEMAN3DIR},   '$(INSTALLMAN3DIR)' );
        is( $mm->{INSTALLVENDORMAN1DIR}, '$(INSTALLMAN1DIR)' );
        is( $mm->{INSTALLVENDORMAN3DIR}, '$(INSTALLMAN3DIR)' );
    }
}


# Check that when usevendoprefix and installvendorman*dir aren't set in 
# Config it leaves them unset.
{
    _set_config(installman1dir => File::Spec->catdir('foo', 'bar') );
    _set_config(installman3dir => File::Spec->catdir('foo', 'baz') );
    _set_config(installsiteman1dir => '' );
    _set_config(installsiteman3dir => '' );
    _set_config(installvendorman1dir => '' );
    _set_config(installvendorman3dir => '' );
    _set_config(usevendorprefix => '' );
    _set_config(vendorprefixexp => '' );

    my $wibble = File::Spec->catdir(qw(wibble and such));
    my $stdout = tie *STDOUT, 'TieOut' or die;
    my $mm = WriteMakefile(
                           NAME          => 'Big::Dummy',
                           VERSION_FROM  => 'lib/Big/Dummy.pm',
                           PERL_CORE     => $ENV{PERL_CORE},
                          );

    is( $mm->{INSTALLMAN1DIR}, File::Spec->catdir('foo', 'bar') );
    is( $mm->{INSTALLMAN3DIR}, File::Spec->catdir('foo', 'baz') );
    SKIP: {
        skip "VMS must expand macros in INSTALL* vars", 2 if $Is_VMS;
        is( $mm->{INSTALLSITEMAN1DIR},   '$(INSTALLMAN1DIR)' );
        is( $mm->{INSTALLSITEMAN3DIR},   '$(INSTALLMAN3DIR)' );
    }
    is( $mm->{INSTALLVENDORMAN1DIR}, '' );
    is( $mm->{INSTALLVENDORMAN3DIR}, '' );
}


sub _set_config {
    my($k,$v) = @@_;
    (my $k_no_install = $k) =~ s/^install//i;
    $Config{$k} = $v;

    # Because VMS's config has traditionally been underpopulated, it will
    # fall back to the install-less versions in desperation.
    $Config{$k_no_install} = $v if $Is_VMS;
    return;
@


