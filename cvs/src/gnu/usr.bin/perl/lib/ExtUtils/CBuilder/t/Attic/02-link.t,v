head	1.2;
access;
symbols
	OPENBSD_4_8:1.1.1.2.0.4
	OPENBSD_4_8_BASE:1.1.1.2
	OPENBSD_4_7:1.1.1.2.0.2
	OPENBSD_4_7_BASE:1.1.1.2
	PERL_5_10_1:1.1.1.2
	OPENBSD_4_6:1.1.1.1.0.6
	OPENBSD_4_6_BASE:1.1.1.1
	OPENBSD_4_5:1.1.1.1.0.2
	OPENBSD_4_5_BASE:1.1.1.1
	PERL_5_10_0:1.1.1.1
	CPAN:1.1.1;
locks; strict;
comment	@# @;
expand	@o@;


1.2
date	2010.09.24.14.59.38;	author millert;	state dead;
branches;
next	1.1;

1.1
date	2008.09.29.17.18.33;	author millert;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	2008.09.29.17.18.33;	author millert;	state Exp;
branches;
next	1.1.1.2;

1.1.1.2
date	2009.10.12.18.10.53;	author millert;	state Exp;
branches;
next	;


desc
@@


1.2
log
@remove files no longer in perl 5.12.2 (or that have moved)
@
text
@#! perl -w

BEGIN {
  if ($ENV{PERL_CORE}) {
    chdir 't' if -d 't';
    chdir '../lib/ExtUtils/CBuilder'
      or die "Can't chdir to lib/ExtUtils/CBuilder: $!";
    @@INC = qw(../..);
  }
}

use strict;
use Test;
BEGIN { 
  if ($^O eq 'MSWin32') {
    print "1..0 # Skipped: link_executable() is not implemented yet on Win32\n";
    exit;
  }
  if ($^O eq 'VMS') {
    # So we can get the return value of system()
    require vmsish;
    import vmsish;
  }
  plan tests => 5;
}

use ExtUtils::CBuilder;
use File::Spec;

# TEST doesn't like extraneous output
my $quiet = $ENV{PERL_CORE} && !$ENV{HARNESS_ACTIVE};

my $b = ExtUtils::CBuilder->new(quiet => $quiet);
ok $b;

my $source_file = File::Spec->catfile('t', 'compilet.c');
{
  local *FH;
  open FH, "> $source_file" or die "Can't create $source_file: $!";
  print FH "int main(void) { return 11; }\n";
  close FH;
}
ok -e $source_file;

# Compile
my $object_file;
ok $object_file = $b->compile(source => $source_file);

# Link
my ($exe_file, @@temps);
($exe_file, @@temps) = $b->link_executable(objects => $object_file);
ok $exe_file;

if ($^O eq 'os2') {		# Analogue of LDLOADPATH...
	# Actually, not needed now, since we do not link with the generated DLL
  my $old = OS2::extLibpath();	# [builtin function]
  $old = ";$old" if defined $old and length $old;
  # To pass the sanity check, components must have backslashes...
  OS2::extLibpath_set(".\\$old");
}

# Try the executable
ok my_system($exe_file), 11;

# Clean up
for ($source_file, $object_file, $exe_file) {
  tr/"'//d;
  1 while unlink;
}

sub my_system {
  my $cmd = shift;
  if ($^O eq 'VMS') {
    return system("mcr $cmd");
  }
  return system($cmd) >> 8;
}
@


1.1
log
@Initial revision
@
text
@@


1.1.1.1
log
@import perl 5.10.0 from CPAN
@
text
@@


1.1.1.2
log
@import perl 5.10.1
@
text
@d13 1
a13 1
use Test::More;
d15 4
d24 1
d26 1
a31 1
my ($source_file, $object_file, $exe_file);
d34 1
d36 1
a36 14
# test plan
if ($^O eq 'MSWin32') {
  plan skip_all => "link_executable() is not implemented yet on Win32";
}
elsif ( ! $b->have_compiler ) {
  plan skip_all => "no compiler available for testing";
}
else {
  plan tests => 7;
}

ok $b, "created EU::CB object";

$source_file = File::Spec->catfile('t', 'compilet.c');
d43 1
a43 1
ok -e $source_file, "generated '$source_file'";
d46 2
a47 3
eval { $object_file = $b->compile(source => $source_file) };
is $@@, q{}, "no exception from compilation";
ok -e $object_file, "found object file";
d50 11
a60 16
SKIP: {
  skip "error compiling source", 3
    unless -e $object_file;

  my @@temps;
  eval { ($exe_file, @@temps) = $b->link_executable(objects => $object_file) };
  is $@@, q{}, "no exception from linking";
  ok -e $exe_file, "found executable file";

  if ($^O eq 'os2') {		# Analogue of LDLOADPATH...
          # Actually, not needed now, since we do not link with the generated DLL
    my $old = OS2::extLibpath();	# [builtin function]
    $old = ";$old" if defined $old and length $old;
    # To pass the sanity check, components must have backslashes...
    OS2::extLibpath_set(".\\$old");
  }
d62 2
a63 6
  # Try the executable
  my $ec = my_system($exe_file);
  is $ec, 11, "got expected exit code from executable"
    or print( $? == -1 ? "# Could not run '$exe_file'\n" 
                      : "# Unexpected exit code '$ec'\n");
}
a68 5
}

if ($^O eq 'VMS') {
   1 while unlink 'COMPILET.LIS';
   1 while unlink 'COMPILET.OPT';
@

