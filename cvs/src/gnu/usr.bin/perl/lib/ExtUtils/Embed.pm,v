head	1.13;
access;
symbols
	OPENBSD_6_2:1.13.0.6
	OPENBSD_6_2_BASE:1.13
	PERL_5_24_2:1.1.1.12
	OPENBSD_6_1:1.13.0.4
	OPENBSD_6_1_BASE:1.13
	OPENBSD_6_0:1.12.0.10
	OPENBSD_6_0_BASE:1.12
	OPENBSD_5_9:1.12.0.4
	OPENBSD_5_9_BASE:1.12
	OPENBSD_5_8:1.12.0.6
	OPENBSD_5_8_BASE:1.12
	PERL_5_20_2:1.1.1.11
	OPENBSD_5_7:1.12.0.2
	OPENBSD_5_7_BASE:1.12
	PERL_5_20_1:1.1.1.11
	OPENBSD_5_6:1.11.0.8
	OPENBSD_5_6_BASE:1.11
	PERL_5_18_2:1.1.1.10
	PERL:1.1.1
	OPENBSD_5_5:1.11.0.6
	OPENBSD_5_5_BASE:1.11
	OPENBSD_5_4:1.11.0.2
	OPENBSD_5_4_BASE:1.11
	PERL_5_16_3:1.1.1.10
	OPENBSD_5_3:1.10.0.10
	OPENBSD_5_3_BASE:1.10
	OPENBSD_5_2:1.10.0.8
	OPENBSD_5_2_BASE:1.10
	OPENBSD_5_1_BASE:1.10
	OPENBSD_5_1:1.10.0.6
	OPENBSD_5_0:1.10.0.4
	OPENBSD_5_0_BASE:1.10
	OPENBSD_4_9:1.10.0.2
	OPENBSD_4_9_BASE:1.10
	PERL_5_12_2:1.1.1.9
	OPENBSD_4_8:1.9.0.4
	OPENBSD_4_8_BASE:1.9
	OPENBSD_4_7:1.9.0.2
	OPENBSD_4_7_BASE:1.9
	PERL_5_10_1:1.1.1.9
	OPENBSD_4_6:1.8.0.6
	OPENBSD_4_6_BASE:1.8
	OPENBSD_4_5:1.8.0.2
	OPENBSD_4_5_BASE:1.8
	PERL_5_10_0:1.1.1.8
	OPENBSD_4_4:1.7.0.10
	OPENBSD_4_4_BASE:1.7
	OPENBSD_4_3:1.7.0.8
	OPENBSD_4_3_BASE:1.7
	OPENBSD_4_2:1.7.0.6
	OPENBSD_4_2_BASE:1.7
	OPENBSD_4_1:1.7.0.4
	OPENBSD_4_1_BASE:1.7
	OPENBSD_4_0:1.7.0.2
	OPENBSD_4_0_BASE:1.7
	PERL_5_8_8:1.1.1.7
	OPENBSD_3_9:1.6.0.10
	OPENBSD_3_9_BASE:1.6
	OPENBSD_3_8:1.6.0.8
	OPENBSD_3_8_BASE:1.6
	OPENBSD_3_7:1.6.0.6
	OPENBSD_3_7_BASE:1.6
	PERL_5_8_6:1.1.1.6
	OPENBSD_3_6:1.6.0.4
	OPENBSD_3_6_BASE:1.6
	PERL_5_8_5:1.1.1.5
	PERL_5_8_3:1.1.1.4
	OPENBSD_3_5:1.6.0.2
	OPENBSD_3_5_BASE:1.6
	PERL_5_8_2:1.1.1.4
	OPENBSD_3_4:1.5.0.4
	OPENBSD_3_4_BASE:1.5
	OPENBSD_3_3:1.5.0.2
	OPENBSD_3_3_BASE:1.5
	PERL_5_8_0:1.1.1.4
	OPENBSD_3_2:1.4.0.6
	OPENBSD_3_2_BASE:1.4
	OPENBSD_3_1:1.4.0.4
	OPENBSD_3_1_BASE:1.4
	OPENBSD_3_0:1.4.0.2
	OPENBSD_3_0_BASE:1.4
	PERL_5_6_1:1.1.1.3
	OPENBSD_2_9:1.3.0.6
	OPENBSD_2_9_BASE:1.3
	OPENBSD_2_8:1.3.0.4
	OPENBSD_2_8_BASE:1.3
	OPENBSD_2_7:1.3.0.2
	OPENBSD_2_7_BASE:1.3
	PERL_5_6_0:1.1.1.2
	OPENBSD_2_6:1.2.0.2
	OPENBSD_2_6_BASE:1.2
	PERL_500503:1.1.1.1
	CPAN:1.1.1
	OPENBSD_2_5:1.1.0.6
	OPENBSD_2_5_BASE:1.1
	OPENBSD_2_4:1.1.0.4
	OPENBSD_2_4_BASE:1.1
	OPENBSD_2_3:1.1.0.2
	OPENBSD_2_3_BASE:1.1;
locks; strict;
comment	@# @;
expand	@o@;


1.13
date	2017.02.05.00.32.15;	author afresh1;	state Exp;
branches;
next	1.12;
commitid	cxJ08BvJA9Pt2PTM;

1.12
date	2014.11.17.20.57.06;	author afresh1;	state Exp;
branches;
next	1.11;
commitid	QP75iYx42Uo7mMxO;

1.11
date	2013.03.25.20.40.56;	author sthen;	state Exp;
branches;
next	1.10;

1.10
date	2010.09.24.15.07.01;	author millert;	state Exp;
branches;
next	1.9;

1.9
date	2009.10.12.18.24.40;	author millert;	state Exp;
branches;
next	1.8;

1.8
date	2008.09.29.17.36.11;	author millert;	state Exp;
branches;
next	1.7;

1.7
date	2006.03.28.19.23.06;	author millert;	state Exp;
branches;
next	1.6;

1.6
date	2003.12.03.03.02.37;	author millert;	state Exp;
branches;
next	1.5;

1.5
date	2002.10.27.22.25.26;	author millert;	state Exp;
branches;
next	1.4;

1.4
date	2001.05.24.18.35.28;	author millert;	state Exp;
branches;
next	1.3;

1.3
date	2000.04.06.17.06.27;	author millert;	state Exp;
branches;
next	1.2;

1.2
date	99.04.29.22.51.50;	author millert;	state Exp;
branches;
next	1.1;

1.1
date	97.11.30.07.57.23;	author millert;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	99.04.29.22.40.01;	author millert;	state Exp;
branches;
next	1.1.1.2;

1.1.1.2
date	2000.04.06.16.09.41;	author millert;	state Exp;
branches;
next	1.1.1.3;

1.1.1.3
date	2001.05.24.18.23.26;	author millert;	state Exp;
branches;
next	1.1.1.4;

1.1.1.4
date	2002.10.27.22.14.59;	author millert;	state Exp;
branches;
next	1.1.1.5;

1.1.1.5
date	2004.08.09.17.46.48;	author millert;	state Exp;
branches;
next	1.1.1.6;

1.1.1.6
date	2005.01.15.21.17.15;	author millert;	state Exp;
branches;
next	1.1.1.7;

1.1.1.7
date	2006.03.28.18.48.42;	author millert;	state Exp;
branches;
next	1.1.1.8;

1.1.1.8
date	2008.09.29.17.18.32;	author millert;	state Exp;
branches;
next	1.1.1.9;

1.1.1.9
date	2009.10.12.18.10.50;	author millert;	state Exp;
branches;
next	1.1.1.10;

1.1.1.10
date	2013.03.25.20.08.54;	author sthen;	state Exp;
branches;
next	1.1.1.11;

1.1.1.11
date	2014.11.17.20.53.08;	author afresh1;	state Exp;
branches;
next	1.1.1.12;
commitid	B31cAbBIXiCqnL97;

1.1.1.12
date	2017.08.14.13.46.14;	author afresh1;	state Exp;
branches;
next	;
commitid	fAzrs78vdW2Yfc6A;


desc
@perl 5.004_04
@


1.13
log
@Fix merge issues, remove excess files - match perl-5.24.1 dist
@
text
@package ExtUtils::Embed;
require Exporter;
use Config;
require File::Spec;

use vars qw(@@ISA @@EXPORT $VERSION
	    @@Extensions $Verbose $lib_ext
	    $opt_o $opt_s 
	    );
use strict;

# This is not a dual-life module, so no need for development version numbers
$VERSION = '1.33';

@@ISA = qw(Exporter);
@@EXPORT = qw(&xsinit &ldopts 
	     &ccopts &ccflags &ccdlflags &perl_inc
	     &xsi_header &xsi_protos &xsi_body);

$Verbose = 0;
$lib_ext = $Config{lib_ext} || '.a';

sub is_cmd { $0 eq '-e' }

sub my_return {
    my $val = shift;
    if(is_cmd) {
	print $val;
    }
    else {
	return $val;
    }
}

sub xsinit { 
    my($file, $std, $mods) = @@_;
    my($fh,@@mods,%seen);
    $file ||= "perlxsi.c";
    my $xsinit_proto = "pTHX";

    if (@@_) {
       @@mods = @@$mods if $mods;
    }
    else {
       require Getopt::Std;
       Getopt::Std::getopts('o:s:');
       $file = $opt_o if defined $opt_o;
       $std  = $opt_s  if defined $opt_s;
       @@mods = @@ARGV;
    }
    $std = 1 unless scalar @@mods;

    if ($file eq "STDOUT") {
	$fh = \*STDOUT;
    }
    else {
        open $fh, '>', $file
            or die "Can't open '$file': $!";
    }

    push(@@mods, static_ext()) if defined $std;
    @@mods = grep(!$seen{$_}++, @@mods);

    print $fh &xsi_header();
    print $fh "\nEXTERN_C void xs_init ($xsinit_proto);\n\n";
    print $fh &xsi_protos(@@mods);

    print $fh "\nEXTERN_C void\nxs_init($xsinit_proto)\n{\n";
    print $fh &xsi_body(@@mods);
    print $fh "}\n";

}

sub xsi_header {
    return <<EOF;
#include "EXTERN.h"
#include "perl.h"
#include "XSUB.h"
EOF
}    

sub xsi_protos {
    my @@exts = @@_;
    my %seen;
    my $retval = '';
    foreach my $cname (canon('__', @@exts)) {
        my $ccode = "EXTERN_C void boot_${cname} (pTHX_ CV* cv);\n";
        $retval .= $ccode
            unless $seen{$ccode}++;
    }
    return $retval;
}

sub xsi_body {
    my @@exts = @@_;
    my %seen;
    my $retval;
    $retval .= "    static const char file[] = __FILE__;\n"
        if @@exts;
    $retval .= <<'EOT';
    dXSUB_SYS;
    PERL_UNUSED_CONTEXT;
EOT
    $retval .= "\n"
        if @@exts;

    foreach my $pname (canon('/', @@exts)) {
        next
            if $seen{$pname}++;
        (my $mname = $pname) =~ s!/!::!g;
        (my $cname = $pname) =~ s!/!__!g;
        my $fname;
        if ($pname eq 'DynaLoader'){
            # Must NOT install 'DynaLoader::boot_DynaLoader' as 'bootstrap'!
            # boot_DynaLoader is called directly in DynaLoader.pm
            $retval .= "    /* DynaLoader is a special case */\n";
            $fname = "${mname}::boot_DynaLoader";
        } else {
            $fname = "${mname}::bootstrap";
        }
        $retval .= "    newXS(\"$fname\", boot_${cname}, file);\n"
    }
    return $retval;
}

sub static_ext {
    @@Extensions = ('DynaLoader', sort $Config{static_ext} =~ /(\S+)/g)
        unless @@Extensions;
    @@Extensions;
}

sub _escape {
    my $arg = shift;
    return $$arg if $^O eq 'VMS'; # parens legal in qualifier lists
    $$arg =~ s/([\(\)])/\\$1/g;
}

sub _ldflags {
    my $ldflags = $Config{ldflags};
    _escape(\$ldflags);
    return $ldflags;
}

sub _ccflags {
    my $ccflags = $Config{ccflags};
    _escape(\$ccflags);
    return $ccflags;
}

sub _ccdlflags {
    my $ccdlflags = $Config{ccdlflags};
    _escape(\$ccdlflags);
    return $ccdlflags;
}

sub ldopts {
    require ExtUtils::MakeMaker;
    require ExtUtils::Liblist;
    my($std,$mods,$link_args,$path) = @@_;
    my(@@mods,@@link_args,@@argv);
    my($dllib,$config_libs,@@potential_libs,@@path);
    local($") = ' ' unless $" eq ' ';
    if (scalar @@_) {
       @@link_args = @@$link_args if $link_args;
       @@mods = @@$mods if $mods;
    }
    else {
       @@argv = @@ARGV;
       #hmm
       while($_ = shift @@argv) {
	   /^-std$/  && do { $std = 1; next; };
	   /^--$/    && do { @@link_args = @@argv; last; };
	   /^-I(.*)/ && do { $path = $1 || shift @@argv; next; };
	   push(@@mods, $_); 
       }
    }
    $std = 1 unless scalar @@link_args;
    my $sep = $Config{path_sep} || ':';
    @@path = $path ? split(/\Q$sep/, $path) : @@INC;

    push(@@potential_libs, @@link_args)    if scalar @@link_args;
    # makemaker includes std libs on windows by default
    if ($^O ne 'MSWin32' and defined($std)) {
	push(@@potential_libs, $Config{perllibs});
    }

    push(@@mods, static_ext()) if $std;

    my($mod,@@ns,$root,$sub,$extra,$archive,@@archives);
    print STDERR "Searching (@@path) for archives\n" if $Verbose;
    foreach $mod (@@mods) {
	@@ns = split(/::|\/|\\/, $mod);
	$sub = $ns[-1];
	$root = File::Spec->catdir(@@ns);
	
	print STDERR "searching for '$sub${lib_ext}'\n" if $Verbose;
	foreach (@@path) {
	    next unless -e ($archive = File::Spec->catdir($_,"auto",$root,"$sub$lib_ext"));
	    push @@archives, $archive;
	    if(-e ($extra = File::Spec->catdir($_,"auto",$root,"extralibs.ld"))) {
		local(*FH); 
		if(open(FH, $extra)) {
		    my($libs) = <FH>; chomp $libs;
		    push @@potential_libs, split /\s+/, $libs;
		}
		else {  
		    warn "Couldn't open '$extra'"; 
		}
	    }
	    last;
	}
    }
    #print STDERR "\@@potential_libs = @@potential_libs\n";

    my $libperl;
    if ($^O eq 'MSWin32') {
	$libperl = $Config{libperl};
    }
    elsif ($^O eq 'os390' && $Config{usedl}) {
	# Nothing for OS/390 (z/OS) dynamic.
    } else {
	$libperl = (grep(/^-l\w*perl\w*$/, @@link_args))[0]
	    || ($Config{libperl} =~ /^lib(\w+)(\Q$lib_ext\E|\.\Q$Config{dlext}\E)$/
		? "-l$1" : '')
		|| "-lperl";
    }

    my $lpath = File::Spec->catdir($Config{archlibexp}, 'CORE');
    $lpath = qq["$lpath"] if $^O eq 'MSWin32';
    my($extralibs, $bsloadlibs, $ldloadlibs, $ld_run_path) =
	MM->ext(join ' ', "-L$lpath", $libperl, @@potential_libs);

    my $ld_or_bs = $bsloadlibs || $ldloadlibs;
    print STDERR "bs: $bsloadlibs ** ld: $ldloadlibs" if $Verbose;
    my $ccdlflags = _ccdlflags();
    my $ldflags   = _ldflags();
    my $linkage = "$ccdlflags $ldflags @@archives $ld_or_bs";
    print STDERR "ldopts: '$linkage'\n" if $Verbose;

    return $linkage if scalar @@_;
    my_return("$linkage\n");
}

sub ccflags {
    my $ccflags = _ccflags();
    my_return(" $ccflags ");
}

sub ccdlflags {
    my $ccdlflags = _ccdlflags();
    my_return(" $ccdlflags ");
}

sub perl_inc {
    my $dir = File::Spec->catdir($Config{archlibexp}, 'CORE');
    $dir = qq["$dir"] if $^O eq 'MSWin32';
    my_return(" -I$dir ");
}

sub ccopts {
   ccflags . perl_inc;
}

sub canon {
    my($as, @@ext) = @@_;
    foreach(@@ext) {
        # might be X::Y or lib/auto/X/Y/Y.a
        next
            if s!::!/!g;
        s!^(?:lib|ext|dist|cpan)/(?:auto/)?!!;
        s!/\w+\.\w+$!!;
    }
    if ($as ne '/') {
        s!/!$as!g
            foreach @@ext;
    }
    @@ext;
}

__END__

=head1 NAME

ExtUtils::Embed - Utilities for embedding Perl in C/C++ applications

=head1 SYNOPSIS

 perl -MExtUtils::Embed -e xsinit 
 perl -MExtUtils::Embed -e ccopts 
 perl -MExtUtils::Embed -e ldopts 

=head1 DESCRIPTION

C<ExtUtils::Embed> provides utility functions for embedding a Perl interpreter
and extensions in your C/C++ applications.  
Typically, an application F<Makefile> will invoke C<ExtUtils::Embed>
functions while building your application.  

=head1 @@EXPORT

C<ExtUtils::Embed> exports the following functions:

xsinit(), ldopts(), ccopts(), perl_inc(), ccflags(), 
ccdlflags(), xsi_header(), xsi_protos(), xsi_body()

=head1 FUNCTIONS

=over 4

=item xsinit()

Generate C/C++ code for the XS initializer function.

When invoked as C<`perl -MExtUtils::Embed -e xsinit --`>
the following options are recognized:

B<-o> E<lt>output filenameE<gt> (Defaults to B<perlxsi.c>)

B<-o STDOUT> will print to STDOUT.

B<-std> (Write code for extensions that are linked with the current Perl.)

Any additional arguments are expected to be names of modules
to generate code for.

When invoked with parameters the following are accepted and optional:

C<xsinit($filename,$std,[@@modules])>

Where,

B<$filename> is equivalent to the B<-o> option.

B<$std> is boolean, equivalent to the B<-std> option.  

B<[@@modules]> is an array ref, same as additional arguments mentioned above.

=item Examples

 perl -MExtUtils::Embed -e xsinit -- -o xsinit.c Socket

This will generate code with an C<xs_init> function that glues the perl C<Socket::bootstrap> function 
to the C C<boot_Socket> function and writes it to a file named F<xsinit.c>.

Note that L<DynaLoader> is a special case where it must call C<boot_DynaLoader> directly.

 perl -MExtUtils::Embed -e xsinit

This will generate code for linking with C<DynaLoader> and
each static extension found in C<$Config{static_ext}>.
The code is written to the default file name F<perlxsi.c>.

 perl -MExtUtils::Embed -e xsinit -- -o xsinit.c \
                            -std DBI DBD::Oracle

Here, code is written for all the currently linked extensions along with code
for C<DBI> and C<DBD::Oracle>.

If you have a working C<DynaLoader> then there is rarely any need to statically link in any 
other extensions.

=item ldopts()

Output arguments for linking the Perl library and extensions to your
application.

When invoked as C<`perl -MExtUtils::Embed -e ldopts --`>
the following options are recognized:

B<-std> 

Output arguments for linking the Perl library and any extensions linked
with the current Perl.

B<-I> E<lt>path1:path2E<gt>

Search path for ModuleName.a archives.  
Default path is C<@@INC>.
Library archives are expected to be found as 
F</some/path/auto/ModuleName/ModuleName.a>
For example, when looking for F<Socket.a> relative to a search path,
we should find F<auto/Socket/Socket.a>

When looking for C<DBD::Oracle> relative to a search path,
we should find F<auto/DBD/Oracle/Oracle.a>

Keep in mind that you can always supply F</my/own/path/ModuleName.a>
as an additional linker argument.

B<-->  E<lt>list of linker argsE<gt>

Additional linker arguments to be considered.

Any additional arguments found before the B<--> token 
are expected to be names of modules to generate code for.

When invoked with parameters the following are accepted and optional:

C<ldopts($std,[@@modules],[@@link_args],$path)>

Where:

B<$std> is boolean, equivalent to the B<-std> option.  

B<[@@modules]> is equivalent to additional arguments found before the B<--> token.

B<[@@link_args]> is equivalent to arguments found after the B<--> token.

B<$path> is equivalent to the B<-I> option.

In addition, when ldopts is called with parameters, it will return the argument string
rather than print it to STDOUT.

=item Examples

 perl -MExtUtils::Embed -e ldopts

This will print arguments for linking with C<libperl> and
extensions found in C<$Config{static_ext}>.  This includes libraries
found in C<$Config{libs}> and the first ModuleName.a library
for each extension that is found by searching C<@@INC> or the path
specified by the B<-I> option.
In addition, when ModuleName.a is found, additional linker arguments
are picked up from the F<extralibs.ld> file in the same directory.

 perl -MExtUtils::Embed -e ldopts -- -std Socket

This will do the same as the above example, along with printing additional
arguments for linking with the C<Socket> extension.

 perl -MExtUtils::Embed -e ldopts -- -std Msql -- \
                        -L/usr/msql/lib -lmsql

Any arguments after the second '--' token are additional linker
arguments that will be examined for potential conflict.  If there is no
conflict, the additional arguments will be part of the output.  

=item perl_inc()

For including perl header files this function simply prints:

 -I$Config{archlibexp}/CORE  

So, rather than having to say:

 perl -MConfig -e 'print "-I$Config{archlibexp}/CORE"'

Just say:

 perl -MExtUtils::Embed -e perl_inc

=item ccflags(), ccdlflags()

These functions simply print $Config{ccflags} and $Config{ccdlflags}

=item ccopts()

This function combines C<perl_inc()>, C<ccflags()> and C<ccdlflags()> into one.

=item xsi_header()

This function simply returns a string defining the same C<EXTERN_C> macro as
F<perlmain.c> along with #including F<perl.h> and F<EXTERN.h>.

=item xsi_protos(@@modules)

This function returns a string of C<boot_$ModuleName> prototypes for each @@modules.

=item xsi_body(@@modules)

This function returns a string of calls to C<newXS()> that glue the module I<bootstrap>
function to I<boot_ModuleName> for each @@modules.

C<xsinit()> uses the xsi_* functions to generate most of its code.

=back

=head1 EXAMPLES

For examples on how to use C<ExtUtils::Embed> for building C/C++ applications
with embedded perl, see L<perlembed>.

=head1 SEE ALSO

L<perlembed>

=head1 AUTHOR

Doug MacEachern E<lt>C<dougm@@osf.org>E<gt>

Based on ideas from Tim Bunce E<lt>C<Tim.Bunce@@ig.co.uk>E<gt> and
F<minimod.pl> by Andreas Koenig E<lt>C<k@@anna.in-berlin.de>E<gt> and Tim Bunce.

=cut
@


1.12
log
@Fix merge conflicts, remove extra files, match upstream perl-5.20.1

ok deraadt@@ sthen@@ espie@@ miod@@
@
text
@d13 1
a13 1
$VERSION = '1.32';
d353 2
a354 1
 perl -MExtUtils::Embed -e xsinit -- -o xsinit.c -std DBI DBD::Oracle
d428 2
a429 1
This will do the same as the above example, along with printing additional arguments for linking with the C<Socket> extension.
d431 2
a432 1
 perl -MExtUtils::Embed -e ldopts -- -std Msql -- -L/usr/msql/lib -lmsql
@


1.11
log
@merge/resolve conflicts
(some more to do after this one)
@
text
@a0 2
require 5.002;

a2 1
require FileHandle;
d4 1
a4 6
use Getopt::Std;
use File::Spec;

#Only when we need them
#require ExtUtils::MakeMaker;
#require ExtUtils::Liblist;
d13 1
a13 1
$VERSION = '1.30';
a19 4
#let's have Miniperl borrow from us instead
#require ExtUtils::Miniperl;
#*canon = \&ExtUtils::Miniperl::canon;

d45 2
a46 1
       getopts('o:s:');
d57 2
a58 1
	$fh = new FileHandle "> $file";
d65 1
a65 1
    print $fh "EXTERN_C void xs_init ($xsinit_proto);\n\n";     
d76 3
a78 3
#include <EXTERN.h>
#include <perl.h>

d83 7
a89 11
    my(@@exts) = @@_;
    my(@@retval,%seen);
    my $boot_proto = "pTHX_ CV* cv";
    foreach $_ (@@exts){
        my($pname) = canon('/', $_);
        my($mname, $cname);
        ($mname = $pname) =~ s!/!::!g;
        ($cname = $pname) =~ s!/!__!g;
	my($ccode) = "EXTERN_C void boot_${cname} ($boot_proto);\n";
	next if $seen{$ccode}++;
        push(@@retval, $ccode);
d91 1
a91 1
    return join '', @@retval;
d95 19
a113 13
    my(@@exts) = @@_;
    my($pname,@@retval,%seen);
    my($dl) = canon('/','DynaLoader');
    push(@@retval, "\tchar *file = __FILE__;\n");
    push(@@retval, "\tdXSUB_SYS;\n") if $] > 5.002;
    push(@@retval, "\n");

    foreach $_ (@@exts){
        my($pname) = canon('/', $_);
        my($mname, $cname, $ccode);
        ($mname = $pname) =~ s!/!::!g;
        ($cname = $pname) =~ s!/!__!g;
        if ($pname eq $dl){
d116 2
a117 2
            $ccode = "\t/* DynaLoader is a special case */\n\tnewXS(\"${mname}::boot_${cname}\", boot_${cname}, file);\n";
            push(@@retval, $ccode) unless $seen{$ccode}++;
d119 1
a119 2
            $ccode = "\tnewXS(\"${mname}::bootstrap\", boot_${cname}, file);\n";
            push(@@retval, $ccode) unless $seen{$ccode}++;
d121 1
d123 1
a123 1
    return join '', @@retval;
d127 2
a128 6
    unless (scalar @@Extensions) {
      my $static_ext = $Config{static_ext};
      $static_ext =~ s/^\s+//;
      @@Extensions = sort split /\s+/, $static_ext;
	unshift @@Extensions, qw(DynaLoader);
    }
d267 9
a275 4
       # might be X::Y or lib/auto/X/Y/Y.a
       next if s!::!/!g;
       s:^(lib|ext)/(auto/)?::;
       s:/\w+\.\w+$::;
a276 1
    map(s:/:$as:, @@ext) if ($as ne '/');
a287 1

d294 1
a294 1
ExtUtils::Embed provides utility functions for embedding a Perl interpreter
d296 1
a296 1
Typically, an application B<Makefile> will invoke ExtUtils::Embed
d301 1
a301 1
ExtUtils::Embed exports the following functions:
a339 1

d342 2
d345 1
a345 4
This will generate code with an B<xs_init> function that glues the perl B<Socket::bootstrap> function 
to the C B<boot_Socket> function and writes it to a file named F<xsinit.c>.

Note that B<DynaLoader> is a special case where it must call B<boot_DynaLoader> directly.
d349 3
a351 5

This will generate code for linking with B<DynaLoader> and 
each static extension found in B<$Config{static_ext}>.
The code is written to the default file name B<perlxsi.c>.

a354 1

d356 1
a356 1
for B<DBI> and B<DBD::Oracle>.
d358 1
a358 1
If you have a working B<DynaLoader> then there is rarely any need to statically link in any 
d377 1
a377 1
Default path is B<@@INC>.
d379 3
a381 3
B</some/path/auto/ModuleName/ModuleName.a>
For example, when looking for B<Socket.a> relative to a search path, 
we should find B<auto/Socket/Socket.a>  
d383 2
a384 2
When looking for B<DBD::Oracle> relative to a search path,
we should find B<auto/DBD/Oracle/Oracle.a>
d386 1
a386 1
Keep in mind that you can always supply B</my/own/path/ModuleName.a>
a414 1

d417 5
a421 6

This will print arguments for linking with B<libperl> and
extensions found in B<$Config{static_ext}>.  This includes libraries
found in B<$Config{libs}> and the first ModuleName.a library
for each extension that is found by searching B<@@INC> or the path 
specified by the B<-I> option.  
d423 1
a423 2
are picked up from the B<extralibs.ld> file in the same directory.

d427 1
a427 2

This will do the same as the above example, along with printing additional arguments for linking with the B<Socket> extension.
a434 1

d455 1
a455 1
This function combines perl_inc(), ccflags() and ccdlflags() into one.
d459 2
a460 2
This function simply returns a string defining the same B<EXTERN_C> macro as
B<perlmain.c> along with #including B<perl.h> and B<EXTERN.h>.  
d464 1
a464 1
This function returns a string of B<boot_$ModuleName> prototypes for each @@modules.
d468 2
a469 2
This function returns a string of calls to B<newXS()> that glue the module B<bootstrap>
function to B<boot_ModuleName> for each @@modules.
d471 1
a471 1
B<xsinit()> uses the xsi_* functions to generate most of its code.
d477 1
a477 1
For examples on how to use B<ExtUtils::Embed> for building C/C++ applications
d486 1
a486 1
Doug MacEachern E<lt>F<dougm@@osf.org>E<gt>
d488 2
a489 2
Based on ideas from Tim Bunce E<lt>F<Tim.Bunce@@ig.co.uk>E<gt> and
B<minimod.pl> by Andreas Koenig E<lt>F<k@@anna.in-berlin.de>E<gt> and Tim Bunce.
a491 1

@


1.10
log
@merge in perl 5.12.2 plus local changes
@
text
@a0 1
# $Id: Embed.pm,v 1.1.1.1 2002/01/16 19:27:19 schwern Exp $
d21 1
a21 1
$VERSION = '1.28';
d146 1
@


1.9
log
@Merge in perl 5.10.1
@
text
@@


1.8
log
@fix conflicts and merge in local changes to perl 5.10.0
@
text
@d22 1
a22 1
$VERSION = '1.27';
d284 1
a284 1
    grep(s:/:$as:, @@ext) if ($as ne '/');
@


1.7
log
@merge in perl 5.8.8
@
text
@d1 1
a1 1
# $Id: Embed.pm,v 1.6 2003/12/03 03:02:37 millert Exp $
d21 2
a22 1
$VERSION = 1.26;
d137 3
a139 1
	@@Extensions = sort split /\s+/, $Config{static_ext};
d231 3
a233 1
    else {
d237 1
a237 1
	    || "-lperl";
d433 1
a433 1
This will print arguments for linking with B<libperl.a>, B<DynaLoader> and 
a446 8

 perl -MExtUtils::Embed -e ldopts -- DynaLoader


This will print arguments for linking with just the B<DynaLoader> extension
and B<libperl.a>.


a447 1

@


1.6
log
@Resolve conflicts for perl 5.8.2, remove old files, and add OpenBSD-specific scaffolding
@
text
@d1 1
a1 1
# $Id: Embed.pm,v 1.1.1.1 2002/01/16 19:27:19 schwern Exp $
d21 1
a21 1
$VERSION = 1.2506_01;
d229 4
a232 1
	$libperl = (grep(/^-l\w*perl\w*$/, @@link_args))[0] || "-lperl";
@


1.5
log
@Resolve conflicts, remove old files, merge local changes
@
text
@@


1.4
log
@merge in perl 5.6.1 with our local changes
@
text
@d1 1
a1 1
# $Id: Embed.pm,v 1.2501 $
d21 1
a21 1
$VERSION = sprintf("%d.%02d", q$Revision: 1.2505 $ =~ /(\d+)\.(\d+)/);
a46 4
sub is_perl_object {
    $Config{ccflags} =~ /-DPERL_OBJECT/;  
}

d51 1
a51 1
    my $xsinit_proto = "pTHXo";
d95 1
a95 1
    my $boot_proto = "pTHXo_ CV* cv";
d142 23
a171 1
    my $MM = bless {} => 'MY';
d203 1
a203 1
	$root = $MM->catdir(@@ns);
d207 1
a207 1
	    next unless -e ($archive = $MM->catdir($_,"auto",$root,"$sub$lib_ext"));
d209 1
a209 1
	    if(-e ($extra = $MM->catdir($_,"auto",$root,"extralibs.ld"))) {
d235 1
a235 1
	$MM->ext(join ' ', "-L$lpath", $libperl, @@potential_libs);
d239 3
a241 1
    my $linkage = "$Config{ccdlflags} $Config{ldflags} @@archives $ld_or_bs";
d249 2
a250 1
    my_return(" $Config{ccflags} ");
d254 2
a255 1
    my_return(" $Config{ccdlflags} ");
d309 1
a309 1
=over
d491 1
a491 1
B<xsinit()> uses the xsi_* functions to generate most of it's code.
@


1.3
log
@perl-5.6.0 + local changes
@
text
@d9 1
a89 8
#if defined(__cplusplus) && !defined(PERL_OBJECT)
#define is_cplusplus
#endif

#ifdef is_cplusplus
extern "C" {
#endif

a91 17
#ifdef PERL_OBJECT
#define NO_XSLOCKS
#include <XSUB.h>
#include "win32iop.h"
#include <fcntl.h>
#include <perlhost.h>
#endif
#ifdef is_cplusplus
}
#  ifndef EXTERN_C
#    define EXTERN_C extern "C"
#  endif
#else
#  ifndef EXTERN_C
#    define EXTERN_C extern
#  endif
#endif
d169 2
a170 1
    @@path = $path ? split(/:/, $path) : @@INC;
d173 4
a176 1
    push(@@potential_libs, $Config{libs}) if defined $std;
d206 7
a212 1
    my $libperl = (grep(/^-l\w*perl\w*$/, @@link_args))[0] || "-lperl";
d214 2
d217 1
a217 3
	$MM->ext(join ' ', 
		 $MM->catdir("-L$Config{archlibexp}", "CORE"), " $libperl", 
		 @@potential_libs);
d237 3
a239 1
    my_return(" -I$Config{archlibexp}/CORE ");
d268 1
d476 1
a476 1
with embedded perl, see the eg/ directory and L<perlembed>.
@


1.2
log
@perl5.005_03 (stock)
@
text
@d54 1
a54 1
    my $xsinit_proto = is_perl_object() ? "CPERLarg" : "void";
d78 1
a78 1
    print $fh "EXTERN_C void xs_init _(($xsinit_proto));\n\n";     
d123 1
a123 2
    my $boot_proto = is_perl_object() ? 
	"CV* cv _CPERLarg" : "CV* cv";
d129 1
a129 1
	my($ccode) = "EXTERN_C void boot_${cname} _(($boot_proto));\n";
d335 1
a335 1
to the C B<boot_Socket> function and writes it to a file named "xsinit.c".
d381 1
a381 1
Keep in mind, you can always supply B</my/own/path/ModuleName.a>
d395 1
a395 1
Where,
@


1.1
log
@perl 5.004_04
@
text
@d46 4
d54 1
d78 1
a78 1
    print $fh "EXTERN_C void xs_init _((void));\n\n";     
d81 1
a81 1
    print $fh "\nEXTERN_C void\nxs_init()\n{\n";
d89 5
a93 1
#ifdef __cplusplus
d99 8
a106 2

#ifdef __cplusplus
d123 2
a124 1

d130 1
a130 1
	my($ccode) = "EXTERN_C void boot_${cname} _((CV* cv));\n";
d204 1
a204 1
	@@ns = split('::', $mod);
d419 1
a419 1
specifed by the B<-I> option.  
@


1.1.1.1
log
@perl5.005_03
@
text
@a45 4
sub is_perl_object {
    $Config{ccflags} =~ /-DPERL_OBJECT/;  
}

a49 1
    my $xsinit_proto = is_perl_object() ? "CPERLarg" : "void";
d73 1
a73 1
    print $fh "EXTERN_C void xs_init _(($xsinit_proto));\n\n";     
d76 1
a76 1
    print $fh "\nEXTERN_C void\nxs_init($xsinit_proto)\n{\n";
d84 1
a84 5
#if defined(__cplusplus) && !defined(PERL_OBJECT)
#define is_cplusplus
#endif

#ifdef is_cplusplus
d90 2
a91 8
#ifdef PERL_OBJECT
#define NO_XSLOCKS
#include <XSUB.h>
#include "win32iop.h"
#include <fcntl.h>
#include <perlhost.h>
#endif
#ifdef is_cplusplus
d108 1
a108 2
    my $boot_proto = is_perl_object() ? 
	"CV* cv _CPERLarg" : "CV* cv";
d114 1
a114 1
	my($ccode) = "EXTERN_C void boot_${cname} _(($boot_proto));\n";
d188 1
a188 1
	@@ns = split(/::|\/|\\/, $mod);
d403 1
a403 1
specified by the B<-I> option.  
@


1.1.1.2
log
@virgin perl 5.6.0
@
text
@d54 1
a54 1
    my $xsinit_proto = "pTHXo";
d78 1
a78 1
    print $fh "EXTERN_C void xs_init ($xsinit_proto);\n\n";     
d123 2
a124 1
    my $boot_proto = "pTHXo_ CV* cv";
d130 1
a130 1
	my($ccode) = "EXTERN_C void boot_${cname} ($boot_proto);\n";
d336 1
a336 1
to the C B<boot_Socket> function and writes it to a file named F<xsinit.c>.
d382 1
a382 1
Keep in mind that you can always supply B</my/own/path/ModuleName.a>
d396 1
a396 1
Where:
@


1.1.1.3
log
@stock perl 5.6.1
@
text
@a8 1
use File::Spec;
d89 8
d99 17
d193 1
a193 2
    my $sep = $Config{path_sep} || ':';
    @@path = $path ? split(/\Q$sep/, $path) : @@INC;
d196 1
a196 4
    # makemaker includes std libs on windows by default
    if ($^O ne 'MSWin32' and defined($std)) {
	push(@@potential_libs, $Config{perllibs});
    }
d226 1
a226 7
    my $libperl;
    if ($^O eq 'MSWin32') {
	$libperl = $Config{libperl};
    }
    else {
	$libperl = (grep(/^-l\w*perl\w*$/, @@link_args))[0] || "-lperl";
    }
a227 2
    my $lpath = File::Spec->catdir($Config{archlibexp}, 'CORE');
    $lpath = qq["$lpath"] if $^O eq 'MSWin32';
d229 3
a231 1
	$MM->ext(join ' ', "-L$lpath", $libperl, @@potential_libs);
d251 1
a251 3
    my $dir = File::Spec->catdir($Config{archlibexp}, 'CORE');
    $dir = qq["$dir"] if $^O eq 'MSWin32';
    my_return(" -I$dir ");
a279 1
 perl -MExtUtils::Embed -e ccopts 
d487 1
a487 1
with embedded perl, see L<perlembed>.
@


1.1.1.4
log
@stock perl 5.8.0 from CPAN
@
text
@d1 1
a1 1
# $Id: Embed.pm,v 1.1.1.1 2002/01/16 19:27:19 schwern Exp $
d21 1
a21 1
$VERSION = 1.2506_01;
d47 4
d55 1
a55 1
    my $xsinit_proto = "pTHX";
d99 1
a99 1
    my $boot_proto = "pTHX_ CV* cv";
a145 23
sub _escape {
    my $arg = shift;
    $$arg =~ s/([\(\)])/\\$1/g;
}

sub _ldflags {
    my $ldflags = $Config{ldflags};
    _escape(\$ldflags);
    return $ldflags;
}

sub _ccflags {
    my $ccflags = $Config{ccflags};
    _escape(\$ccflags);
    return $ccflags;
}

sub _ccdlflags {
    my $ccdlflags = $Config{ccdlflags};
    _escape(\$ccdlflags);
    return $ccdlflags;
}

d153 1
d185 1
a185 1
	$root = File::Spec->catdir(@@ns);
d189 1
a189 1
	    next unless -e ($archive = File::Spec->catdir($_,"auto",$root,"$sub$lib_ext"));
d191 1
a191 1
	    if(-e ($extra = File::Spec->catdir($_,"auto",$root,"extralibs.ld"))) {
d217 1
a217 1
	MM->ext(join ' ', "-L$lpath", $libperl, @@potential_libs);
d221 1
a221 3
    my $ccdlflags = _ccdlflags();
    my $ldflags   = _ldflags();
    my $linkage = "$ccdlflags $ldflags @@archives $ld_or_bs";
d229 1
a229 2
    my $ccflags = _ccflags();
    my_return(" $ccflags ");
d233 1
a233 2
    my $ccdlflags = _ccdlflags();
    my_return(" $ccdlflags ");
d287 1
a287 1
=over 4
d469 1
a469 1
B<xsinit()> uses the xsi_* functions to generate most of its code.
@


1.1.1.5
log
@Import of stock perl 5.8.5
@
text
@d1 1
a1 1
# $Id: Embed.pm,v 1.6 2003/12/03 03:02:37 millert Exp $
@


1.1.1.6
log
@perl 5.8.6 from CPAN
@
text
@d1 1
a1 1
# $Id: Embed.pm,v 1.1.1.1 2002/01/16 19:27:19 schwern Exp $
@


1.1.1.7
log
@perl 5.8.8 import
@
text
@d21 1
a21 1
$VERSION = 1.26;
d229 1
a229 4
	$libperl = (grep(/^-l\w*perl\w*$/, @@link_args))[0]
	    || ($Config{libperl} =~ /^lib(\w+)(\Q$lib_ext\E|\.\Q$Config{dlext}\E)$/
		? "-l$1" : '')
	    || "-lperl";
@


1.1.1.8
log
@import perl 5.10.0 from CPAN
@
text
@d21 1
a21 2
# This is not a dual-life module, so no need for development version numbers
$VERSION = '1.27';
d136 1
a136 3
      my $static_ext = $Config{static_ext};
      $static_ext =~ s/^\s+//;
      @@Extensions = sort split /\s+/, $static_ext;
d228 1
a228 3
    elsif ($^O eq 'os390' && $Config{usedl}) {
	# Nothing for OS/390 (z/OS) dynamic.
    } else {
d232 1
a232 1
		|| "-lperl";
d428 1
a428 1
This will print arguments for linking with B<libperl> and
d442 8
d451 1
@


1.1.1.9
log
@import perl 5.10.1
@
text
@d22 1
a22 1
$VERSION = '1.28';
d284 1
a284 1
    map(s:/:$as:, @@ext) if ($as ne '/');
@


1.1.1.10
log
@import perl 5.16.3 from CPAN - worked on by Andrew Fresh and myself
@
text
@d1 1
d22 1
a22 1
$VERSION = '1.30';
a146 1
    return $$arg if $^O eq 'VMS'; # parens legal in qualifier lists
@


1.1.1.11
log
@Import perl-5.20.1
@
text
@d1 2
d5 1
d7 6
a12 1
require File::Spec;
d21 1
a21 1
$VERSION = '1.32';
d28 4
d57 1
a57 2
       require Getopt::Std;
       Getopt::Std::getopts('o:s:');
d68 1
a68 2
        open $fh, '>', $file
            or die "Can't open '$file': $!";
d75 1
a75 1
    print $fh "\nEXTERN_C void xs_init ($xsinit_proto);\n\n";
d86 3
a88 3
#include "EXTERN.h"
#include "perl.h"
#include "XSUB.h"
d93 11
a103 7
    my @@exts = @@_;
    my %seen;
    my $retval = '';
    foreach my $cname (canon('__', @@exts)) {
        my $ccode = "EXTERN_C void boot_${cname} (pTHX_ CV* cv);\n";
        $retval .= $ccode
            unless $seen{$ccode}++;
d105 1
a105 1
    return $retval;
d109 13
a121 19
    my @@exts = @@_;
    my %seen;
    my $retval;
    $retval .= "    static const char file[] = __FILE__;\n"
        if @@exts;
    $retval .= <<'EOT';
    dXSUB_SYS;
    PERL_UNUSED_CONTEXT;
EOT
    $retval .= "\n"
        if @@exts;

    foreach my $pname (canon('/', @@exts)) {
        next
            if $seen{$pname}++;
        (my $mname = $pname) =~ s!/!::!g;
        (my $cname = $pname) =~ s!/!__!g;
        my $fname;
        if ($pname eq 'DynaLoader'){
d124 2
a125 2
            $retval .= "    /* DynaLoader is a special case */\n";
            $fname = "${mname}::boot_DynaLoader";
d127 2
a128 1
            $fname = "${mname}::bootstrap";
a129 1
        $retval .= "    newXS(\"$fname\", boot_${cname}, file);\n"
d131 1
a131 1
    return $retval;
d135 6
a140 2
    @@Extensions = ('DynaLoader', sort $Config{static_ext} =~ /(\S+)/g)
        unless @@Extensions;
d279 4
a282 9
        # might be X::Y or lib/auto/X/Y/Y.a
        next
            if s!::!/!g;
        s!^(?:lib|ext|dist|cpan)/(?:auto/)?!!;
        s!/\w+\.\w+$!!;
    }
    if ($as ne '/') {
        s!/!$as!g
            foreach @@ext;
d284 1
d296 1
d303 1
a303 1
C<ExtUtils::Embed> provides utility functions for embedding a Perl interpreter
d305 1
a305 1
Typically, an application F<Makefile> will invoke C<ExtUtils::Embed>
d310 1
a310 1
C<ExtUtils::Embed> exports the following functions:
d349 1
a351 2
This will generate code with an C<xs_init> function that glues the perl C<Socket::bootstrap> function 
to the C C<boot_Socket> function and writes it to a file named F<xsinit.c>.
d353 4
a356 1
Note that L<DynaLoader> is a special case where it must call C<boot_DynaLoader> directly.
d360 5
a364 3
This will generate code for linking with C<DynaLoader> and
each static extension found in C<$Config{static_ext}>.
The code is written to the default file name F<perlxsi.c>.
d368 1
d370 1
a370 1
for C<DBI> and C<DBD::Oracle>.
d372 1
a372 1
If you have a working C<DynaLoader> then there is rarely any need to statically link in any 
d391 1
a391 1
Default path is C<@@INC>.
d393 3
a395 3
F</some/path/auto/ModuleName/ModuleName.a>
For example, when looking for F<Socket.a> relative to a search path,
we should find F<auto/Socket/Socket.a>
d397 2
a398 2
When looking for C<DBD::Oracle> relative to a search path,
we should find F<auto/DBD/Oracle/Oracle.a>
d400 1
a400 1
Keep in mind that you can always supply F</my/own/path/ModuleName.a>
d429 1
d432 6
a437 5
This will print arguments for linking with C<libperl> and
extensions found in C<$Config{static_ext}>.  This includes libraries
found in C<$Config{libs}> and the first ModuleName.a library
for each extension that is found by searching C<@@INC> or the path
specified by the B<-I> option.
d439 2
a440 1
are picked up from the F<extralibs.ld> file in the same directory.
d444 2
a445 1
This will do the same as the above example, along with printing additional arguments for linking with the C<Socket> extension.
d453 1
d474 1
a474 1
This function combines C<perl_inc()>, C<ccflags()> and C<ccdlflags()> into one.
d478 2
a479 2
This function simply returns a string defining the same C<EXTERN_C> macro as
F<perlmain.c> along with #including F<perl.h> and F<EXTERN.h>.
d483 1
a483 1
This function returns a string of C<boot_$ModuleName> prototypes for each @@modules.
d487 2
a488 2
This function returns a string of calls to C<newXS()> that glue the module I<bootstrap>
function to I<boot_ModuleName> for each @@modules.
d490 1
a490 1
C<xsinit()> uses the xsi_* functions to generate most of its code.
d496 1
a496 1
For examples on how to use C<ExtUtils::Embed> for building C/C++ applications
d505 1
a505 1
Doug MacEachern E<lt>C<dougm@@osf.org>E<gt>
d507 2
a508 2
Based on ideas from Tim Bunce E<lt>C<Tim.Bunce@@ig.co.uk>E<gt> and
F<minimod.pl> by Andreas Koenig E<lt>C<k@@anna.in-berlin.de>E<gt> and Tim Bunce.
d511 1
@


1.1.1.12
log
@Import perl-5.24.2
@
text
@d13 1
a13 1
$VERSION = '1.33';
d353 1
a353 2
 perl -MExtUtils::Embed -e xsinit -- -o xsinit.c \
                            -std DBI DBD::Oracle
d427 1
a427 2
This will do the same as the above example, along with printing additional
arguments for linking with the C<Socket> extension.
d429 1
a429 2
 perl -MExtUtils::Embed -e ldopts -- -std Msql -- \
                        -L/usr/msql/lib -lmsql
@


