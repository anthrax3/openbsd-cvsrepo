head	1.2;
access;
symbols
	OPENBSD_4_8:1.1.1.5.0.4
	OPENBSD_4_8_BASE:1.1.1.5
	OPENBSD_4_7:1.1.1.5.0.2
	OPENBSD_4_7_BASE:1.1.1.5
	PERL_5_10_1:1.1.1.5
	OPENBSD_4_6:1.1.1.4.0.6
	OPENBSD_4_6_BASE:1.1.1.4
	OPENBSD_4_5:1.1.1.4.0.2
	OPENBSD_4_5_BASE:1.1.1.4
	PERL_5_10_0:1.1.1.4
	OPENBSD_4_4:1.1.1.3.0.16
	OPENBSD_4_4_BASE:1.1.1.3
	OPENBSD_4_3:1.1.1.3.0.14
	OPENBSD_4_3_BASE:1.1.1.3
	OPENBSD_4_2:1.1.1.3.0.12
	OPENBSD_4_2_BASE:1.1.1.3
	OPENBSD_4_1:1.1.1.3.0.10
	OPENBSD_4_1_BASE:1.1.1.3
	OPENBSD_4_0:1.1.1.3.0.8
	OPENBSD_4_0_BASE:1.1.1.3
	PERL_5_8_8:1.1.1.3
	OPENBSD_3_9:1.1.1.3.0.6
	OPENBSD_3_9_BASE:1.1.1.3
	OPENBSD_3_8:1.1.1.3.0.4
	OPENBSD_3_8_BASE:1.1.1.3
	OPENBSD_3_7:1.1.1.3.0.2
	OPENBSD_3_7_BASE:1.1.1.3
	PERL_5_8_6:1.1.1.3
	OPENBSD_3_6:1.1.1.2.0.2
	OPENBSD_3_6_BASE:1.1.1.2
	PERL_5_8_5:1.1.1.2
	PERL_5_8_3:1.1.1.1
	OPENBSD_3_5:1.1.1.1.0.6
	OPENBSD_3_5_BASE:1.1.1.1
	PERL_5_8_2:1.1.1.1
	OPENBSD_3_4:1.1.1.1.0.4
	OPENBSD_3_4_BASE:1.1.1.1
	OPENBSD_3_3:1.1.1.1.0.2
	OPENBSD_3_3_BASE:1.1.1.1
	PERL_5_8_0:1.1.1.1
	CPAN:1.1.1;
locks; strict;
comment	@# @;
expand	@o@;


1.2
date	2010.09.24.14.59.52;	author millert;	state dead;
branches;
next	1.1;

1.1
date	2002.10.27.22.15.01;	author millert;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	2002.10.27.22.15.01;	author millert;	state Exp;
branches;
next	1.1.1.2;

1.1.1.2
date	2004.08.09.17.47.24;	author millert;	state Exp;
branches;
next	1.1.1.3;

1.1.1.3
date	2005.01.15.21.17.31;	author millert;	state Exp;
branches;
next	1.1.1.4;

1.1.1.4
date	2008.09.29.17.18.44;	author millert;	state Exp;
branches;
next	1.1.1.5;

1.1.1.5
date	2009.10.12.18.10.56;	author millert;	state Exp;
branches;
next	;


desc
@@


1.2
log
@remove files no longer in perl 5.12.2 (or that have moved)
@
text
@#!./perl

BEGIN {
    chdir 't' if -d 't';
    @@INC = '../lib';
}

use warnings;
use Text::ParseWords;

print "1..18\n";

@@words = shellwords(qq(foo "bar quiz" zoo));
print "not " if $words[0] ne 'foo';
print "ok 1\n";
print "not " if $words[1] ne 'bar quiz';
print "ok 2\n";
print "not " if $words[2] ne 'zoo';
print "ok 3\n";

{
  # Gonna get some undefined things back
  no warnings 'uninitialized' ;

  # Test quotewords() with other parameters and null last field
  @@words = quotewords(':+', 1, 'foo:::"bar:foo":zoo zoo:');
  print "not " unless join(";", @@words) eq qq(foo;"bar:foo";zoo zoo;);
  print "ok 4\n";
}

# Test $keep eq 'delimiters' and last field zero
@@words = quotewords('\s+', 'delimiters', '4 3 2 1 0');
print "not " unless join(";", @@words) eq qq(4; ;3; ;2; ;1; ;0);
print "ok 5\n";

# Big ol' nasty test (thanks, Joerk!)
$string = 'aaaa"bbbbb" cc\\ cc \\\\\\"dddd" eee\\\\\\"ffff" "gg"';

# First with $keep == 1
$result = join('|', parse_line('\s+', 1, $string));
print "not " unless $result eq 'aaaa"bbbbb"|cc\\ cc|\\\\\\"dddd" eee\\\\\\"ffff"|"gg"';
print "ok 6\n";

# Now, $keep == 0
$result = join('|', parse_line('\s+', 0, $string));
print "not " unless $result eq 'aaaabbbbb|cc cc|\\"dddd eee\\"ffff|gg';
print "ok 7\n";

# Now test single quote behavior
$string = 'aaaa"bbbbb" cc\\ cc \\\\\\"dddd\' eee\\\\\\"ffff\' gg';
$result = join('|', parse_line('\s+', 0, $string));
print "not " unless $result eq 'aaaabbbbb|cc cc|\\"dddd eee\\\\\\"ffff|gg';
print "ok 8\n";

# Make sure @@nested_quotewords does the right thing
@@lists = nested_quotewords('\s+', 0, 'a b c', '1 2 3', 'x y z');
print "not " unless (@@lists == 3 && @@{$lists[0]} == 3 && @@{$lists[1]} == 3 && @@{$lists[2]} == 3);
print "ok 9\n";

# Now test error return
$string = 'foo bar baz"bach blech boop';

@@words = shellwords($string);
print "not " if (@@words);
print "ok 10\n";

@@words = parse_line('s+', 0, $string);
print "not " if (@@words);
print "ok 11\n";

@@words = quotewords('s+', 0, $string);
print "not " if (@@words);
print "ok 12\n";

{
  # Gonna get some more undefined things back
  no warnings 'uninitialized' ;

  @@words = nested_quotewords('s+', 0, $string);
  print "not " if (@@words);
  print "ok 13\n";

  # Now test empty fields
  $result = join('|', parse_line(':', 0, 'foo::0:"":::'));
  print "not " unless ($result eq 'foo||0||||');
  print "ok 14\n";

  # Test for 0 in quotes without $keep
  $result = join('|', parse_line(':', 0, ':"0":'));
  print "not " unless ($result eq '|0|');
  print "ok 15\n";

  # Test for \001 in quoted string
  $result = join('|', parse_line(':', 0, ':"' . "\001" . '":'));
  print "not " unless ($result eq "|\1|");
  print "ok 16\n";

}

# Now test perlish single quote behavior
$Text::ParseWords::PERL_SINGLE_QUOTE = 1;
$string = 'aaaa"bbbbb" cc\ cc \\\\\"dddd\' eee\\\\\"\\\'ffff\' gg';
$result = join('|', parse_line('\s+', 0, $string));
print "not " unless $result eq 'aaaabbbbb|cc cc|\"dddd eee\\\\"\'ffff|gg';
print "ok 17\n";

# test whitespace in the delimiters
@@words = quotewords(' ', 1, '4 3 2 1 0');
print "not " unless join(";", @@words) eq qq(4;3;2;1;0);
print "ok 18\n";
@


1.1
log
@Initial revision
@
text
@@


1.1.1.1
log
@stock perl 5.8.0 from CPAN
@
text
@@


1.1.1.2
log
@Import of stock perl 5.8.5
@
text
@d11 1
a11 1
print "1..20\n";
a110 11

# [perl #30442] Text::ParseWords does not handle backslashed newline inside quoted text
$string = qq{"field1"	"field2\\\nstill field2"	"field3"};

$result = join('|', parse_line("\t", 1, $string));
print "not " unless $result eq qq{"field1"|"field2\\\nstill field2"|"field3"};
print "ok 19\n";

$result = join('|', parse_line("\t", 0, $string));
print "not " unless $result eq "field1|field2\nstill field2|field3";
print "ok 20\n";
@


1.1.1.3
log
@perl 5.8.6 from CPAN
@
text
@d11 1
a11 1
print "1..22\n";
a121 13

# unicode
$string = qq{"field1"\x{1234}"field2\\\x{1234}still field2"\x{1234}"field3"};
$result = join('|', parse_line("\x{1234}", 0, $string));
print "not " unless $result eq "field1|field2\x{1234}still field2|field3";
print "ok 21\n";

# missing quote after matching regex used to hang after change #22997
"1234" =~ /(1)(2)(3)(4)/;
$string = qq{"missing quote};
$result = join('|', shellwords($string));
print "not " unless $result eq "";
print "ok 22\n";
@


1.1.1.4
log
@import perl 5.10.0 from CPAN
@
text
@d10 2
a11 1
use Test::More tests => 27;
d14 6
a19 3
is($words[0], 'foo');
is($words[1], 'bar quiz');
is($words[2], 'zoo');
d27 2
a28 1
  is(join(";", @@words), qq(foo;"bar:foo";zoo zoo;));
d33 2
a34 1
is(join(";", @@words), qq(4; ;3; ;2; ;1; ;0));
d41 2
a42 1
is($result, 'aaaa"bbbbb"|cc\\ cc|\\\\\\"dddd" eee\\\\\\"ffff"|"gg"');
d46 2
a47 1
is($result, 'aaaabbbbb|cc cc|\\"dddd eee\\"ffff|gg');
d52 2
a53 1
is($result, 'aaaabbbbb|cc cc|\\"dddd eee\\\\\\"ffff|gg');
d57 2
a58 4
is (@@lists, 3);
is (@@{$lists[0]}, 3);
is (@@{$lists[1]}, 3);
is (@@{$lists[2]}, 3);
d64 2
a65 1
is(@@words, 0);
d68 2
a69 1
is(@@words, 0);
d72 2
a73 1
is(@@words, 0);
d80 2
a81 1
  is(@@words, 0);
d85 2
a86 1
  is($result, 'foo||0||||');
d90 2
a91 1
  is($result, '|0|');
d95 2
a96 1
  is($result, "|\1|");
d104 2
a105 1
is($result, 'aaaabbbbb|cc cc|\"dddd eee\\\\"\'ffff|gg');
d109 2
a110 1
is(join(";", @@words), qq(4;3;2;1;0));
d116 2
a117 1
is($result, qq{"field1"|"field2\\\nstill field2"|"field3"});
d120 2
a121 1
is($result, "field1|field2\nstill field2|field3");
d126 2
a127 1
is($result, "field1|field2\x{1234}still field2|field3");
d133 2
a134 12
is($result, "");

# make sure shellwords strips out leading whitespace and trailng undefs
# from parse_line, so it's behavior is more like /bin/sh
$result = join('|', shellwords(" aa \\  \\ bb ", " \\  ", "cc dd ee\\ "));
is($result, "aa| | bb| |cc|dd|ee ");

$SIG{ALRM} = sub {die "Timeout!"};
alarm(3);
@@words = Text::ParseWords::old_shellwords("foo\\");
is(@@words, 1);
alarm(0);
@


1.1.1.5
log
@import perl 5.10.1
@
text
@d1 125
a125 129
#!./perl

BEGIN {
    if( $ENV{PERL_CORE} ) {
        chdir 't' if -d 't';
        @@INC = '../lib';
    }
}

use warnings;
use Text::ParseWords;
use Test::More tests => 27;

@@words = shellwords(qq(foo "bar quiz" zoo));
is($words[0], 'foo');
is($words[1], 'bar quiz');
is($words[2], 'zoo');

{
  # Gonna get some undefined things back
  no warnings 'uninitialized' ;

  # Test quotewords() with other parameters and null last field
  @@words = quotewords(':+', 1, 'foo:::"bar:foo":zoo zoo:');
  is(join(";", @@words), qq(foo;"bar:foo";zoo zoo;));
}

# Test $keep eq 'delimiters' and last field zero
@@words = quotewords('\s+', 'delimiters', '4 3 2 1 0');
is(join(";", @@words), qq(4; ;3; ;2; ;1; ;0));

# Big ol' nasty test (thanks, Joerk!)
$string = 'aaaa"bbbbb" cc\\ cc \\\\\\"dddd" eee\\\\\\"ffff" "gg"';

# First with $keep == 1
$result = join('|', parse_line('\s+', 1, $string));
is($result, 'aaaa"bbbbb"|cc\\ cc|\\\\\\"dddd" eee\\\\\\"ffff"|"gg"');

# Now, $keep == 0
$result = join('|', parse_line('\s+', 0, $string));
is($result, 'aaaabbbbb|cc cc|\\"dddd eee\\"ffff|gg');

# Now test single quote behavior
$string = 'aaaa"bbbbb" cc\\ cc \\\\\\"dddd\' eee\\\\\\"ffff\' gg';
$result = join('|', parse_line('\s+', 0, $string));
is($result, 'aaaabbbbb|cc cc|\\"dddd eee\\\\\\"ffff|gg');

# Make sure @@nested_quotewords does the right thing
@@lists = nested_quotewords('\s+', 0, 'a b c', '1 2 3', 'x y z');
is (@@lists, 3);
is (@@{$lists[0]}, 3);
is (@@{$lists[1]}, 3);
is (@@{$lists[2]}, 3);

# Now test error return
$string = 'foo bar baz"bach blech boop';

@@words = shellwords($string);
is(@@words, 0);

@@words = parse_line('s+', 0, $string);
is(@@words, 0);

@@words = quotewords('s+', 0, $string);
is(@@words, 0);

{
  # Gonna get some more undefined things back
  no warnings 'uninitialized' ;

  @@words = nested_quotewords('s+', 0, $string);
  is(@@words, 0);

  # Now test empty fields
  $result = join('|', parse_line(':', 0, 'foo::0:"":::'));
  is($result, 'foo||0||||');

  # Test for 0 in quotes without $keep
  $result = join('|', parse_line(':', 0, ':"0":'));
  is($result, '|0|');

  # Test for \001 in quoted string
  $result = join('|', parse_line(':', 0, ':"' . "\001" . '":'));
  is($result, "|\1|");

}

# Now test perlish single quote behavior
$Text::ParseWords::PERL_SINGLE_QUOTE = 1;
$string = 'aaaa"bbbbb" cc\ cc \\\\\"dddd\' eee\\\\\"\\\'ffff\' gg';
$result = join('|', parse_line('\s+', 0, $string));
is($result, 'aaaabbbbb|cc cc|\"dddd eee\\\\"\'ffff|gg');

# test whitespace in the delimiters
@@words = quotewords(' ', 1, '4 3 2 1 0');
is(join(";", @@words), qq(4;3;2;1;0));

# [perl #30442] Text::ParseWords does not handle backslashed newline inside quoted text
$string = qq{"field1"	"field2\\\nstill field2"	"field3"};

$result = join('|', parse_line("\t", 1, $string));
is($result, qq{"field1"|"field2\\\nstill field2"|"field3"});

$result = join('|', parse_line("\t", 0, $string));
is($result, "field1|field2\nstill field2|field3");

SKIP: { # unicode
  skip "No unicode",1 if $]<5.008;
  $string = qq{"field1"\x{1234}"field2\\\x{1234}still field2"\x{1234}"field3"};
  $result = join('|', parse_line("\x{1234}", 0, $string));
  is($result, "field1|field2\x{1234}still field2|field3",'Unicode');
}

# missing quote after matching regex used to hang after change #22997
"1234" =~ /(1)(2)(3)(4)/;
$string = qq{"missing quote};
$result = join('|', shellwords($string));
is($result, "");

# make sure shellwords strips out leading whitespace and trailng undefs
# from parse_line, so it's behavior is more like /bin/sh
$result = join('|', shellwords(" aa \\  \\ bb ", " \\  ", "cc dd ee\\ "));
is($result, "aa| | bb| |cc|dd|ee ");

$SIG{ALRM} = sub {die "Timeout!"};
alarm(3);
@@words = Text::ParseWords::old_shellwords("foo\\");
is(@@words, 1);
alarm(0);
@


