head	1.2;
access;
symbols
	OPENBSD_5_6:1.1.1.7.0.18
	OPENBSD_5_6_BASE:1.1.1.7
	PERL_5_18_2:1.1.1.7
	PERL:1.1.1
	OPENBSD_5_5:1.1.1.7.0.16
	OPENBSD_5_5_BASE:1.1.1.7
	OPENBSD_5_4:1.1.1.7.0.12
	OPENBSD_5_4_BASE:1.1.1.7
	PERL_5_16_3:1.1.1.7
	OPENBSD_5_3:1.1.1.7.0.10
	OPENBSD_5_3_BASE:1.1.1.7
	OPENBSD_5_2:1.1.1.7.0.8
	OPENBSD_5_2_BASE:1.1.1.7
	OPENBSD_5_1_BASE:1.1.1.7
	OPENBSD_5_1:1.1.1.7.0.6
	OPENBSD_5_0:1.1.1.7.0.4
	OPENBSD_5_0_BASE:1.1.1.7
	OPENBSD_4_9:1.1.1.7.0.2
	OPENBSD_4_9_BASE:1.1.1.7
	PERL_5_12_2:1.1.1.7
	OPENBSD_4_8:1.1.1.6.0.4
	OPENBSD_4_8_BASE:1.1.1.6
	OPENBSD_4_7:1.1.1.6.0.2
	OPENBSD_4_7_BASE:1.1.1.6
	PERL_5_10_1:1.1.1.6
	OPENBSD_4_6:1.1.1.5.0.6
	OPENBSD_4_6_BASE:1.1.1.5
	OPENBSD_4_5:1.1.1.5.0.2
	OPENBSD_4_5_BASE:1.1.1.5
	PERL_5_10_0:1.1.1.5
	OPENBSD_4_4:1.1.1.4.0.18
	OPENBSD_4_4_BASE:1.1.1.4
	OPENBSD_4_3:1.1.1.4.0.16
	OPENBSD_4_3_BASE:1.1.1.4
	OPENBSD_4_2:1.1.1.4.0.14
	OPENBSD_4_2_BASE:1.1.1.4
	OPENBSD_4_1:1.1.1.4.0.12
	OPENBSD_4_1_BASE:1.1.1.4
	OPENBSD_4_0:1.1.1.4.0.10
	OPENBSD_4_0_BASE:1.1.1.4
	PERL_5_8_8:1.1.1.4
	OPENBSD_3_9:1.1.1.4.0.8
	OPENBSD_3_9_BASE:1.1.1.4
	OPENBSD_3_8:1.1.1.4.0.6
	OPENBSD_3_8_BASE:1.1.1.4
	OPENBSD_3_7:1.1.1.4.0.4
	OPENBSD_3_7_BASE:1.1.1.4
	PERL_5_8_6:1.1.1.4
	OPENBSD_3_6:1.1.1.4.0.2
	OPENBSD_3_6_BASE:1.1.1.4
	PERL_5_8_5:1.1.1.4
	PERL_5_8_3:1.1.1.3
	OPENBSD_3_5:1.1.1.3.0.2
	OPENBSD_3_5_BASE:1.1.1.3
	PERL_5_8_2:1.1.1.3
	OPENBSD_3_4:1.1.1.2.0.4
	OPENBSD_3_4_BASE:1.1.1.2
	OPENBSD_3_3:1.1.1.2.0.2
	OPENBSD_3_3_BASE:1.1.1.2
	PERL_5_8_0:1.1.1.2
	OPENBSD_3_2:1.1.1.1.0.12
	OPENBSD_3_2_BASE:1.1.1.1
	OPENBSD_3_1:1.1.1.1.0.10
	OPENBSD_3_1_BASE:1.1.1.1
	OPENBSD_3_0:1.1.1.1.0.8
	OPENBSD_3_0_BASE:1.1.1.1
	PERL_5_6_1:1.1.1.1
	OPENBSD_2_9:1.1.1.1.0.6
	OPENBSD_2_9_BASE:1.1.1.1
	OPENBSD_2_8:1.1.1.1.0.4
	OPENBSD_2_8_BASE:1.1.1.1
	OPENBSD_2_7:1.1.1.1.0.2
	OPENBSD_2_7_BASE:1.1.1.1
	PERL_5_6_0:1.1.1.1
	CPAN:1.1.1;
locks; strict;
comment	@# @;
expand	@o@;


1.2
date	2014.11.17.20.57.06;	author afresh1;	state dead;
branches;
next	1.1;
commitid	QP75iYx42Uo7mMxO;

1.1
date	2000.04.06.16.09.41;	author millert;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	2000.04.06.16.09.41;	author millert;	state Exp;
branches;
next	1.1.1.2;

1.1.1.2
date	2002.10.27.22.14.59;	author millert;	state Exp;
branches;
next	1.1.1.3;

1.1.1.3
date	2003.12.03.02.44.02;	author millert;	state Exp;
branches;
next	1.1.1.4;

1.1.1.4
date	2004.08.09.17.46.48;	author millert;	state Exp;
branches;
next	1.1.1.5;

1.1.1.5
date	2008.09.29.17.18.32;	author millert;	state Exp;
branches;
next	1.1.1.6;

1.1.1.6
date	2009.10.12.18.10.55;	author millert;	state Exp;
branches;
next	1.1.1.7;

1.1.1.7
date	2010.09.24.14.48.41;	author millert;	state Exp;
branches;
next	;


desc
@@


1.2
log
@Fix merge conflicts, remove extra files, match upstream perl-5.20.1

ok deraadt@@ sthen@@ espie@@ miod@@
@
text
@package Exporter;

=head1 NAME

Exporter::Heavy - Exporter guts

=head1 SYNOPIS

(internal use only)

=head1 DESCRIPTION

No user-serviceable parts inside.

=cut
#
# We go to a lot of trouble not to 'require Carp' at file scope,
#  because Carp requires Exporter, and something has to give.
#

sub heavy_export {

    # First make import warnings look like they're coming from the "use".
    local $SIG{__WARN__} = sub {
	my $text = shift;
	if ($text =~ s/ at \S*Exporter\S*.pm line \d+.*\n//) {
	    require Carp;
	    local $Carp::CarpLevel = 1;	# ignore package calling us too.
	    Carp::carp($text);
	}
	else {
	    warn $text;
	}
    };
    local $SIG{__DIE__} = sub {
	require Carp;
	local $Carp::CarpLevel = 1;	# ignore package calling us too.
	Carp::croak("$_[0]Illegal null symbol in \@@${1}::EXPORT")
	    if $_[0] =~ /^Unable to create sub named "(.*?)::"/;
    };

    my($pkg, $callpkg, @@imports) = @@_;
    my($type, $sym, $oops);
    *exports = *{"${pkg}::EXPORT"};

    if (@@imports) {
	if (!%exports) {
	    grep(s/^&//, @@exports);
	    @@exports{@@exports} = (1) x @@exports;
	    my $ok = \@@{"${pkg}::EXPORT_OK"};
	    if (@@$ok) {
		grep(s/^&//, @@$ok);
		@@exports{@@$ok} = (1) x @@$ok;
	    }
	}

	if ($imports[0] =~ m#^[/!:]#){
	    my $tagsref = \%{"${pkg}::EXPORT_TAGS"};
	    my $tagdata;
	    my %imports;
	    my($remove, $spec, @@names, @@allexports);
	    # negated first item implies starting with default set:
	    unshift @@imports, ':DEFAULT' if $imports[0] =~ m/^!/;
	    foreach $spec (@@imports){
		$remove = $spec =~ s/^!//;

		if ($spec =~ s/^://){
		    if ($spec eq 'DEFAULT'){
			@@names = @@exports;
		    }
		    elsif ($tagdata = $tagsref->{$spec}) {
			@@names = @@$tagdata;
		    }
		    else {
			warn qq["$spec" is not defined in %${pkg}::EXPORT_TAGS];
			++$oops;
			next;
		    }
		}
		elsif ($spec =~ m:^/(.*)/$:){
		    my $patn = $1;
		    @@allexports = keys %exports unless @@allexports; # only do keys once
		    @@names = grep(/$patn/, @@allexports); # not anchored by default
		}
		else {
		    @@names = ($spec); # is a normal symbol name
		}

		warn "Import ".($remove ? "del":"add").": @@names "
		    if $Verbose;

		if ($remove) {
		   foreach $sym (@@names) { delete $imports{$sym} } 
		}
		else {
		    @@imports{@@names} = (1) x @@names;
		}
	    }
	    @@imports = keys %imports;
	}

	foreach $sym (@@imports) {
	    if (!$exports{$sym}) {
		if ($sym =~ m/^\d/) {
		    $pkg->require_version($sym);
		    # If the version number was the only thing specified
		    # then we should act as if nothing was specified:
		    if (@@imports == 1) {
			@@imports = @@exports;
			last;
		    }
		    # We need a way to emulate 'use Foo ()' but still
		    # allow an easy version check: "use Foo 1.23, ''";
		    if (@@imports == 2 and !$imports[1]) {
			@@imports = ();
			last;
		    }
		} elsif ($sym !~ s/^&// || !$exports{$sym}) {
                    require Carp;
		    Carp::carp(qq["$sym" is not exported by the $pkg module]);
		    $oops++;
		}
	    }
	}
	if ($oops) {
	    require Carp;
	    Carp::croak("Can't continue after import errors");
	}
    }
    else {
	@@imports = @@exports;
    }

    *fail = *{"${pkg}::EXPORT_FAIL"};
    if (@@fail) {
	if (!%fail) {
	    # Build cache of symbols. Optimise the lookup by adding
	    # barewords twice... both with and without a leading &.
	    # (Technique could be applied to %exports cache at cost of memory)
	    my @@expanded = map { /^\w/ ? ($_, '&'.$_) : $_ } @@fail;
	    warn "${pkg}::EXPORT_FAIL cached: @@expanded" if $Verbose;
	    @@fail{@@expanded} = (1) x @@expanded;
	}
	my @@failed;
	foreach $sym (@@imports) { push(@@failed, $sym) if $fail{$sym} }
	if (@@failed) {
	    @@failed = $pkg->export_fail(@@failed);
	    foreach $sym (@@failed) {
                require Carp;
		Carp::carp(qq["$sym" is not implemented by the $pkg module ],
			"on this architecture");
	    }
	    if (@@failed) {
		require Carp;
		Carp::croak("Can't continue after import errors");
	    }
	}
    }

    warn "Importing into $callpkg from $pkg: ",
		join(", ",sort @@imports) if $Verbose;

    foreach $sym (@@imports) {
	# shortcut for the common case of no type character
	(*{"${callpkg}::$sym"} = \&{"${pkg}::$sym"}, next)
	    unless $sym =~ s/^(\W)//;
	$type = $1;
	*{"${callpkg}::$sym"} =
	    $type eq '&' ? \&{"${pkg}::$sym"} :
	    $type eq '$' ? \${"${pkg}::$sym"} :
	    $type eq '@@' ? \@@{"${pkg}::$sym"} :
	    $type eq '%' ? \%{"${pkg}::$sym"} :
	    $type eq '*' ?  *{"${pkg}::$sym"} :
	    do { require Carp; Carp::croak("Can't export symbol: $type$sym") };
    }
}

sub heavy_export_to_level
{
      my $pkg = shift;
      my $level = shift;
      (undef) = shift;			# XXX redundant arg
      my $callpkg = caller($level);
      $pkg->export($callpkg, @@_);
}

# Utility functions

sub _push_tags {
    my($pkg, $var, $syms) = @@_;
    my $nontag;
    *export_tags = \%{"${pkg}::EXPORT_TAGS"};
    push(@@{"${pkg}::$var"},
	map { $export_tags{$_} ? @@{$export_tags{$_}} : scalar(++$nontag,$_) }
		(@@$syms) ? @@$syms : keys %export_tags);
    if ($nontag and $^W) {
	# This may change to a die one day
	require Carp;
	Carp::carp("Some names are not tags");
    }
}

# Default methods

sub export_fail {
    my $self = shift;
    @@_;
}

sub require_version {
    my($self, $wanted) = @@_;
    my $pkg = ref $self || $self;
    my $version = ${"${pkg}::VERSION"};
    if (!$version or $version < $wanted) {
	$version ||= "(undef)";
	    # %INC contains slashes, but $pkg contains double-colons.
	my $file = (map {s,::,/,g; $INC{$_}} "$pkg.pm")[0];
	$file &&= " ($file)";
	require Carp;
	Carp::croak("$pkg $wanted required--this is only version $version$file")
    }
    $version;
}

1;
@


1.1
log
@Initial revision
@
text
@@


1.1.1.1
log
@virgin perl 5.6.0
@
text
@@


1.1.1.2
log
@stock perl 5.8.0 from CPAN
@
text
@d1 1
a1 9
package Exporter::Heavy;

use strict;
no strict 'refs';

# On one line so MakeMaker will see it.
require Exporter;  our $VERSION = $Exporter::VERSION;
$Carp::Internal{"Exporter::Heavy"} = 1;
our $Verbose;
d7 1
a7 1
=head1 SYNOPSIS
a15 1

d44 1
a44 2
    my($exports, $export_cache) = (\@@{"${pkg}::EXPORT"},
                                   \%{"${pkg}::EXPORT"});
d47 3
a49 3
	if (!%$export_cache) {
	    s/^&// foreach @@$exports;
	    @@{$export_cache}{@@$exports} = (1) x @@$exports;
d52 2
a53 2
		s/^&// foreach @@$ok;
		@@{$export_cache}{@@$ok} = (1) x @@$ok;
d69 1
a69 1
			@@names = @@$exports;
d82 1
a82 1
		    @@allexports = keys %$export_cache unless @@allexports; # only do keys once
a101 1
        my @@carp;
d103 1
a103 1
	    if (!$export_cache->{$sym}) {
d105 1
a105 1
		    $pkg->VERSION($sym); # inherit from UNIVERSAL
d109 1
a109 1
			@@imports = @@$exports;
d118 3
a120 4
		} elsif ($sym !~ s/^&// || !$export_cache->{$sym}) {
		    # accumulate the non-exports
		    push @@carp,
		        qq["$sym" is not exported by the $pkg module\n];
d127 1
a127 1
	    Carp::croak("@@{carp}Can't continue after import errors");
d131 1
a131 1
	@@imports = @@$exports;
d134 3
a136 5
    my($fail, $fail_cache) = (\@@{"${pkg}::EXPORT_FAIL"},
                              \%{"${pkg}::EXPORT_FAIL"});

    if (@@$fail) {
	if (!%$fail_cache) {
d139 2
a140 2
	    # (Technique could be applied to $export_cache at cost of memory)
	    my @@expanded = map { /^\w/ ? ($_, '&'.$_) : $_ } @@$fail;
d142 1
a142 1
	    @@{$fail_cache}{@@expanded} = (1) x @@expanded;
d145 1
a145 1
	foreach $sym (@@imports) { push(@@failed, $sym) if $fail_cache->{$sym} }
d191 2
a192 2
    my @@nontag = ();
    my $export_tags = \%{"${pkg}::EXPORT_TAGS"};
d194 3
a196 4
	map { $export_tags->{$_} ? @@{$export_tags->{$_}} 
                                 : scalar(push(@@nontag,$_),$_) }
		(@@$syms) ? @@$syms : keys %$export_tags);
    if (@@nontag and $^W) {
d199 1
a199 1
	Carp::carp(join(", ", @@nontag)." are not tags of $pkg");
d203 1
a203 5
sub heavy_require_version {
    my($self, $wanted) = @@_;
    my $pkg = ref $self || $self;
    return ${pkg}->VERSION($wanted);
}
d205 3
a207 2
sub heavy_export_tags {
  _push_tags((caller)[0], "EXPORT",    \@@_);
d210 13
a222 2
sub heavy_export_ok_tags {
  _push_tags((caller)[0], "EXPORT_OK", \@@_);
@


1.1.1.3
log
@perl 5.8.2 from CPAN
@
text
@d9 1
a29 11
sub _rebuild_cache {
    my ($pkg, $exports, $cache) = @@_;
    s/^&// foreach @@$exports;
    @@{$cache}{@@$exports} = (1) x @@$exports;
    my $ok = \@@{"${pkg}::EXPORT_OK"};
    if (@@$ok) {
	s/^&// foreach @@$ok;
	@@{$cache}{@@$ok} = (1) x @@$ok;
    }
}

d52 1
a52 1
    my($type, $sym, $cache_is_current, $oops);
d54 1
a54 1
                                   $Exporter::Cache{$pkg} ||= {});
d58 7
a64 2
	    _rebuild_cache ($pkg, $exports, $export_cache);
	    $cache_is_current = 1;
d100 1
a100 1
		    if $Exporter::Verbose;
d130 4
a133 15
		    # Last chance - see if they've updated EXPORT_OK since we
		    # cached it.

		    unless ($cache_is_current) {
			%$export_cache = ();
			_rebuild_cache ($pkg, $exports, $export_cache);
			$cache_is_current = 1;
		    }

		    if (!$export_cache->{$sym}) {
			# accumulate the non-exports
			push @@carp,
			  qq["$sym" is not exported by the $pkg module\n];
			$oops++;
		    }
d147 1
a147 1
                              $Exporter::FailCache{$pkg} ||= {});
d155 1
a155 1
	    warn "${pkg}::EXPORT_FAIL cached: @@expanded" if $Exporter::Verbose;
d175 1
a175 1
		join(", ",sort @@imports) if $Exporter::Verbose;
@


1.1.1.4
log
@Import of stock perl 5.8.5
@
text
@d72 1
a72 1
	if (grep m{^[/!:]}, @@imports) {
@


1.1.1.5
log
@import perl 5.10.0 from CPAN
@
text
@d8 1
a8 2
# Carp does this now for us, so we can finally live w/o Carp
#$Carp::Internal{"Exporter::Heavy"} = 1;
a197 1
	no warnings 'once';
@


1.1.1.6
log
@import perl 5.10.1
@
text
@d8 2
a9 3

# Carp 1.05+ does this now for us, but we may be running with an old Carp
$Carp::Internal{'Exporter::Heavy'}++;
@


1.1.1.7
log
@Perl 5.12.2 from CPAN
@
text
@d9 3
@


