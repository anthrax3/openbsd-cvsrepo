head	1.15;
access;
symbols
	OPENBSD_6_0:1.14.0.12
	OPENBSD_6_0_BASE:1.14
	OPENBSD_5_9:1.14.0.6
	OPENBSD_5_9_BASE:1.14
	OPENBSD_5_8:1.14.0.8
	OPENBSD_5_8_BASE:1.14
	PERL_5_20_2:1.1.1.13
	OPENBSD_5_7:1.14.0.2
	OPENBSD_5_7_BASE:1.14
	PERL_5_20_1:1.1.1.13
	OPENBSD_5_6:1.14.0.4
	OPENBSD_5_6_BASE:1.14
	PERL_5_18_2:1.1.1.13
	PERL:1.1.1
	OPENBSD_5_5:1.13.0.6
	OPENBSD_5_5_BASE:1.13
	OPENBSD_5_4:1.13.0.2
	OPENBSD_5_4_BASE:1.13
	PERL_5_16_3:1.1.1.12
	OPENBSD_5_3:1.12.0.10
	OPENBSD_5_3_BASE:1.12
	OPENBSD_5_2:1.12.0.8
	OPENBSD_5_2_BASE:1.12
	OPENBSD_5_1_BASE:1.12
	OPENBSD_5_1:1.12.0.6
	OPENBSD_5_0:1.12.0.4
	OPENBSD_5_0_BASE:1.12
	OPENBSD_4_9:1.12.0.2
	OPENBSD_4_9_BASE:1.12
	PERL_5_12_2:1.1.1.11
	OPENBSD_4_8:1.11.0.4
	OPENBSD_4_8_BASE:1.11
	OPENBSD_4_7:1.11.0.2
	OPENBSD_4_7_BASE:1.11
	PERL_5_10_1:1.1.1.10
	OPENBSD_4_6:1.10.0.6
	OPENBSD_4_6_BASE:1.10
	OPENBSD_4_5:1.10.0.2
	OPENBSD_4_5_BASE:1.10
	PERL_5_10_0:1.1.1.9
	OPENBSD_4_4:1.9.0.10
	OPENBSD_4_4_BASE:1.9
	OPENBSD_4_3:1.9.0.8
	OPENBSD_4_3_BASE:1.9
	OPENBSD_4_2:1.9.0.6
	OPENBSD_4_2_BASE:1.9
	OPENBSD_4_1:1.9.0.4
	OPENBSD_4_1_BASE:1.9
	OPENBSD_4_0:1.9.0.2
	OPENBSD_4_0_BASE:1.9
	PERL_5_8_8:1.1.1.8
	OPENBSD_3_9:1.8.0.6
	OPENBSD_3_9_BASE:1.8
	OPENBSD_3_8:1.8.0.4
	OPENBSD_3_8_BASE:1.8
	OPENBSD_3_7:1.8.0.2
	OPENBSD_3_7_BASE:1.8
	PERL_5_8_6:1.1.1.7
	OPENBSD_3_6:1.7.0.4
	OPENBSD_3_6_BASE:1.7
	PERL_5_8_5:1.1.1.6
	PERL_5_8_3:1.1.1.6
	OPENBSD_3_5:1.7.0.2
	OPENBSD_3_5_BASE:1.7
	PERL_5_8_2:1.1.1.6
	OPENBSD_3_4:1.6.0.4
	OPENBSD_3_4_BASE:1.6
	OPENBSD_3_3:1.6.0.2
	OPENBSD_3_3_BASE:1.6
	PERL_5_8_0:1.1.1.5
	OPENBSD_3_2:1.5.0.6
	OPENBSD_3_2_BASE:1.5
	OPENBSD_3_1:1.5.0.4
	OPENBSD_3_1_BASE:1.5
	OPENBSD_3_0:1.5.0.2
	OPENBSD_3_0_BASE:1.5
	PERL_5_6_1:1.1.1.4
	OPENBSD_2_9:1.4.0.6
	OPENBSD_2_9_BASE:1.4
	OPENBSD_2_8:1.4.0.4
	OPENBSD_2_8_BASE:1.4
	OPENBSD_2_7:1.4.0.2
	OPENBSD_2_7_BASE:1.4
	PERL_5_6_0:1.1.1.3
	OPENBSD_2_6:1.3.0.2
	OPENBSD_2_6_BASE:1.3
	PERL_500503:1.1.1.2
	CPAN:1.1.1
	OPENBSD_2_5:1.2.0.6
	OPENBSD_2_5_BASE:1.2
	OPENBSD_2_4:1.2.0.4
	OPENBSD_2_4_BASE:1.2
	OPENBSD_2_3:1.2.0.2
	OPENBSD_2_3_BASE:1.2
	OPENBSD_2_2:1.1.1.1.0.6
	OPENBSD_2_2_BASE:1.1.1.1
	OPENBSD_2_1:1.1.1.1.0.4
	OPENBSD_2_1_BASE:1.1.1.1
	OPENBSD_2_0:1.1.1.1.0.2
	OPENBSD_2_0_BASE:1.1.1.1
	perl5003:1.1.1.1
	lwall:1.1.1;
locks; strict;
comment	@# @;
expand	@o@;


1.15
date	2017.02.05.00.32.15;	author afresh1;	state Exp;
branches;
next	1.14;
commitid	cxJ08BvJA9Pt2PTM;

1.14
date	2014.03.24.15.05.27;	author afresh1;	state Exp;
branches;
next	1.13;

1.13
date	2013.03.25.20.40.55;	author sthen;	state Exp;
branches;
next	1.12;

1.12
date	2010.09.24.15.06.59;	author millert;	state Exp;
branches;
next	1.11;

1.11
date	2009.10.12.18.24.38;	author millert;	state Exp;
branches;
next	1.10;

1.10
date	2008.09.29.17.36.10;	author millert;	state Exp;
branches;
next	1.9;

1.9
date	2006.03.28.19.23.05;	author millert;	state Exp;
branches;
next	1.8;

1.8
date	2005.01.15.21.30.31;	author millert;	state Exp;
branches;
next	1.7;

1.7
date	2003.12.03.03.02.36;	author millert;	state Exp;
branches;
next	1.6;

1.6
date	2002.10.27.22.25.26;	author millert;	state Exp;
branches;
next	1.5;

1.5
date	2001.05.24.18.35.25;	author millert;	state Exp;
branches;
next	1.4;

1.4
date	2000.04.06.17.06.15;	author millert;	state Exp;
branches;
next	1.3;

1.3
date	99.04.29.22.51.47;	author millert;	state Exp;
branches;
next	1.2;

1.2
date	97.11.30.07.57.05;	author millert;	state Exp;
branches;
next	1.1;

1.1
date	96.08.19.10.12.35;	author downsj;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	96.08.19.10.12.35;	author downsj;	state Exp;
branches;
next	1.1.1.2;

1.1.1.2
date	99.04.29.22.39.55;	author millert;	state Exp;
branches;
next	1.1.1.3;

1.1.1.3
date	2000.04.06.16.09.38;	author millert;	state Exp;
branches;
next	1.1.1.4;

1.1.1.4
date	2001.05.24.18.23.23;	author millert;	state Exp;
branches;
next	1.1.1.5;

1.1.1.5
date	2002.10.27.22.14.58;	author millert;	state Exp;
branches;
next	1.1.1.6;

1.1.1.6
date	2003.12.03.02.43.59;	author millert;	state Exp;
branches;
next	1.1.1.7;

1.1.1.7
date	2005.01.15.21.17.10;	author millert;	state Exp;
branches;
next	1.1.1.8;

1.1.1.8
date	2006.03.28.18.48.36;	author millert;	state Exp;
branches;
next	1.1.1.9;

1.1.1.9
date	2008.09.29.17.18.30;	author millert;	state Exp;
branches;
next	1.1.1.10;

1.1.1.10
date	2009.10.12.18.10.49;	author millert;	state Exp;
branches;
next	1.1.1.11;

1.1.1.11
date	2010.09.24.14.48.36;	author millert;	state Exp;
branches;
next	1.1.1.12;

1.1.1.12
date	2013.03.25.20.08.52;	author sthen;	state Exp;
branches;
next	1.1.1.13;

1.1.1.13
date	2014.03.24.14.59.03;	author afresh1;	state Exp;
branches;
next	;


desc
@@


1.15
log
@Fix merge issues, remove excess files - match perl-5.24.1 dist
@
text
@package overload;

our $VERSION = '1.26';

%ops = (
    with_assign         => "+ - * / % ** << >> x .",
    assign              => "+= -= *= /= %= **= <<= >>= x= .=",
    num_comparison      => "< <= >  >= == !=",
    '3way_comparison'   => "<=> cmp",
    str_comparison      => "lt le gt ge eq ne",
    binary              => '& &= | |= ^ ^= &. &.= |. |.= ^. ^.=',
    unary               => "neg ! ~ ~.",
    mutators            => '++ --',
    func                => "atan2 cos sin exp abs log sqrt int",
    conversion          => 'bool "" 0+ qr',
    iterators           => '<>',
    filetest            => "-X",
    dereferencing       => '${} @@{} %{} &{} *{}',
    matching            => '~~',
    special             => 'nomethod fallback =',
);

my %ops_seen;
for $category (keys %ops) {
    $ops_seen{$_}++ for (split /\s+/, $ops{$category});
}

sub nil {}

sub OVERLOAD {
  $package = shift;
  my %arg = @@_;
  my $sub;
  *{$package . "::(("} = \&nil; # Make it findable via fetchmethod.
  for (keys %arg) {
    if ($_ eq 'fallback') {
      for my $sym (*{$package . "::()"}) {
	*$sym = \&nil; # Make it findable via fetchmethod.
	$$sym = $arg{$_};
      }
    } else {
      warnings::warnif("overload arg '$_' is invalid")
        unless $ops_seen{$_};
      $sub = $arg{$_};
      if (not ref $sub) {
	$ {$package . "::(" . $_} = $sub;
	$sub = \&nil;
      }
      #print STDERR "Setting '$ {'package'}::\cO$_' to \\&'$sub'.\n";
      *{$package . "::(" . $_} = \&{ $sub };
    }
  }
}

sub import {
  $package = (caller())[0];
  # *{$package . "::OVERLOAD"} = \&OVERLOAD;
  shift;
  $package->overload::OVERLOAD(@@_);
}

sub unimport {
  $package = (caller())[0];
  shift;
  *{$package . "::(("} = \&nil;
  for (@@_) {
      warnings::warnif("overload arg '$_' is invalid")
        unless $ops_seen{$_};
      delete $ {$package . "::"}{$_ eq 'fallback' ? '()' : "(" .$_};
  }
}

sub Overloaded {
  my $package = shift;
  $package = ref $package if ref $package;
  mycan ($package, '()') || mycan ($package, '((');
}

sub ov_method {
  my $globref = shift;
  return undef unless $globref;
  my $sub = \&{*$globref};
  no overloading;
  return $sub if $sub != \&nil;
  return shift->can($ {*$globref});
}

sub OverloadedStringify {
  my $package = shift;
  $package = ref $package if ref $package;
  #$package->can('(""')
  ov_method mycan($package, '(""'), $package
    or ov_method mycan($package, '(0+'), $package
    or ov_method mycan($package, '(bool'), $package
    or ov_method mycan($package, '(nomethod'), $package;
}

sub Method {
  my $package = shift;
  if(ref $package) {
    local $@@;
    local $!;
    require Scalar::Util;
    $package = Scalar::Util::blessed($package);
    return undef if !defined $package;
  }
  #my $meth = $package->can('(' . shift);
  ov_method mycan($package, '(' . shift), $package;
  #return $meth if $meth ne \&nil;
  #return $ {*{$meth}};
}

sub AddrRef {
  no overloading;
  "$_[0]";
}

*StrVal = *AddrRef;

sub mycan {				# Real can would leave stubs.
  my ($package, $meth) = @@_;

  local $@@;
  local $!;
  require mro;

  my $mro = mro::get_linear_isa($package);
  foreach my $p (@@$mro) {
    my $fqmeth = $p . q{::} . $meth;
    return \*{$fqmeth} if defined &{$fqmeth};
  }

  return undef;
}

%constants = (
	      'integer'	  =>  0x1000, # HINT_NEW_INTEGER
	      'float'	  =>  0x2000, # HINT_NEW_FLOAT
	      'binary'	  =>  0x4000, # HINT_NEW_BINARY
	      'q'	  =>  0x8000, # HINT_NEW_STRING
	      'qr'	  => 0x10000, # HINT_NEW_RE
	     );

use warnings::register;
sub constant {
  # Arguments: what, sub
  while (@@_) {
    if (@@_ == 1) {
        warnings::warnif ("Odd number of arguments for overload::constant");
        last;
    }
    elsif (!exists $constants {$_ [0]}) {
        warnings::warnif ("'$_[0]' is not an overloadable type");
    }
    elsif (!ref $_ [1] || "$_[1]" !~ /(^|=)CODE\(0x[0-9a-f]+\)$/) {
        # Can't use C<ref $_[1] eq "CODE"> above as code references can be
        # blessed, and C<ref> would return the package the ref is blessed into.
        if (warnings::enabled) {
            $_ [1] = "undef" unless defined $_ [1];
            warnings::warn ("'$_[1]' is not a code reference");
        }
    }
    else {
        $^H{$_[0]} = $_[1];
        $^H |= $constants{$_[0]};
    }
    shift, shift;
  }
}

sub remove_constant {
  # Arguments: what, sub
  while (@@_) {
    delete $^H{$_[0]};
    $^H &= ~ $constants{$_[0]};
    shift, shift;
  }
}

1;

__END__

=head1 NAME

overload - Package for overloading Perl operations

=head1 SYNOPSIS

    package SomeThing;

    use overload
	'+' => \&myadd,
	'-' => \&mysub;
	# etc
    ...

    package main;
    $a = SomeThing->new( 57 );
    $b = 5 + $a;
    ...
    if (overload::Overloaded $b) {...}
    ...
    $strval = overload::StrVal $b;

=head1 DESCRIPTION

This pragma allows overloading of Perl's operators for a class.
To overload built-in functions, see L<perlsub/Overriding Built-in Functions> instead.

=head2 Fundamentals

=head3 Declaration

Arguments of the C<use overload> directive are (key, value) pairs.
For the full set of legal keys, see L<Overloadable Operations> below.

Operator implementations (the values) can be subroutines,
references to subroutines, or anonymous subroutines
- in other words, anything legal inside a C<&{ ... }> call.
Values specified as strings are interpreted as method names.
Thus

    package Number;
    use overload
        "-" => "minus",
        "*=" => \&muas,
        '""' => sub { ...; };

declares that subtraction is to be implemented by method C<minus()>
in the class C<Number> (or one of its base classes),
and that the function C<Number::muas()> is to be used for the
assignment form of multiplication, C<*=>.
It also defines an anonymous subroutine to implement stringification:
this is called whenever an object blessed into the package C<Number>
is used in a string context (this subroutine might, for example,
return the number as a Roman numeral).

=head3 Calling Conventions and Magic Autogeneration

The following sample implementation of C<minus()> (which assumes
that C<Number> objects are simply blessed references to scalars)
illustrates the calling conventions:

    package Number;
    sub minus {
        my ($self, $other, $swap) = @@_;
        my $result = $$self - $other;         # *
        $result = -$result if $swap;
        ref $result ? $result : bless \$result;
    }
    # * may recurse once - see table below

Three arguments are passed to all subroutines specified in the
C<use overload> directive (with exceptions - see below, particularly
L</nomethod>).

The first of these is the operand providing the overloaded
operator implementation -
in this case, the object whose C<minus()> method is being called.

The second argument is the other operand, or C<undef> in the
case of a unary operator.

The third argument is set to TRUE if (and only if) the two
operands have been swapped.  Perl may do this to ensure that the
first argument (C<$self>) is an object implementing the overloaded
operation, in line with general object calling conventions.
For example, if C<$x> and C<$y> are C<Number>s:

    operation   |   generates a call to
    ============|======================
    $x - $y     |   minus($x, $y, '')
    $x - 7      |   minus($x, 7, '')
    7 - $x      |   minus($x, 7, 1)

Perl may also use C<minus()> to implement other operators which
have not been specified in the C<use overload> directive,
according to the rules for L<Magic Autogeneration> described later.
For example, the C<use overload> above declared no subroutine
for any of the operators C<-->, C<neg> (the overload key for
unary minus), or C<-=>.  Thus

    operation   |   generates a call to
    ============|======================
    -$x         |   minus($x, 0, 1)
    $x--        |   minus($x, 1, undef)
    $x -= 3     |   minus($x, 3, undef)

Note the C<undef>s:
where autogeneration results in the method for a standard
operator which does not change either of its operands, such
as C<->, being used to implement an operator which changes
the operand ("mutators": here, C<--> and C<-=>),
Perl passes undef as the third argument.
This still evaluates as FALSE, consistent with the fact that
the operands have not been swapped, but gives the subroutine
a chance to alter its behaviour in these cases.

In all the above examples, C<minus()> is required
only to return the result of the subtraction:
Perl takes care of the assignment to $x.
In fact, such methods should I<not> modify their operands,
even if C<undef> is passed as the third argument
(see L<Overloadable Operations>).

The same is not true of implementations of C<++> and C<-->:
these are expected to modify their operand.
An appropriate implementation of C<--> might look like

    use overload '--' => "decr",
        # ...
    sub decr { --${$_[0]}; }

If the experimental "bitwise" feature is enabled (see L<feature>), a fifth
TRUE argument is passed to subroutines handling C<&>, C<|>, C<^> and C<~>.
This indicates that the caller is expecting numeric behaviour.  The fourth
argument will be C<undef>, as that position (C<$_[3]>) is reserved for use
by L</nomethod>.

=head3 Mathemagic, Mutators, and Copy Constructors

The term 'mathemagic' describes the overloaded implementation
of mathematical operators.
Mathemagical operations raise an issue.
Consider the code:

    $a = $b;
    --$a;

If C<$a> and C<$b> are scalars then after these statements

    $a == $b - 1

An object, however, is a reference to blessed data, so if
C<$a> and C<$b> are objects then the assignment C<$a = $b>
copies only the reference, leaving C<$a> and C<$b> referring
to the same object data.
One might therefore expect the operation C<--$a> to decrement
C<$b> as well as C<$a>.
However, this would not be consistent with how we expect the
mathematical operators to work.

Perl resolves this dilemma by transparently calling a copy
constructor before calling a method defined to implement
a mutator (C<-->, C<+=>, and so on.).
In the above example, when Perl reaches the decrement
statement, it makes a copy of the object data in C<$a> and
assigns to C<$a> a reference to the copied data.
Only then does it call C<decr()>, which alters the copied
data, leaving C<$b> unchanged.
Thus the object metaphor is preserved as far as possible,
while mathemagical operations still work according to the
arithmetic metaphor.

Note: the preceding paragraph describes what happens when
Perl autogenerates the copy constructor for an object based
on a scalar.
For other cases, see L<Copy Constructor>.

=head2 Overloadable Operations

The complete list of keys that can be specified in the C<use overload>
directive are given, separated by spaces, in the values of the
hash C<%overload::ops>:

 with_assign	  => '+ - * / % ** << >> x .',
 assign		  => '+= -= *= /= %= **= <<= >>= x= .=',
 num_comparison	  => '< <= > >= == !=',
 '3way_comparison'=> '<=> cmp',
 str_comparison	  => 'lt le gt ge eq ne',
 binary		  => '& &= | |= ^ ^= &. &.= |. |.= ^. ^.=',
 unary		  => 'neg ! ~ ~.',
 mutators	  => '++ --',
 func		  => 'atan2 cos sin exp abs log sqrt int',
 conversion	  => 'bool "" 0+ qr',
 iterators	  => '<>',
 filetest         => '-X',
 dereferencing	  => '${} @@{} %{} &{} *{}',
 matching	  => '~~',
 special	  => 'nomethod fallback ='

Most of the overloadable operators map one-to-one to these keys.
Exceptions, including additional overloadable operations not
apparent from this hash, are included in the notes which follow.
This list is subject to growth over time.

A warning is issued if an attempt is made to register an operator not found
above.

=over 5

=item * C<not>

The operator C<not> is not a valid key for C<use overload>.
However, if the operator C<!> is overloaded then the same
implementation will be used for C<not>
(since the two operators differ only in precedence).

=item * C<neg>

The key C<neg> is used for unary minus to disambiguate it from
binary C<->.

=item * C<++>, C<-->

Assuming they are to behave analogously to Perl's C<++> and C<-->,
overloaded implementations of these operators are required to
mutate their operands.

No distinction is made between prefix and postfix forms of the
increment and decrement operators: these differ only in the
point at which Perl calls the associated subroutine when
evaluating an expression.

=item * I<Assignments>

    +=  -=  *=  /=  %=  **=  <<=  >>=  x=  .=
    &=  |=  ^=  &.=  |.=  ^.=

Simple assignment is not overloadable (the C<'='> key is used
for the L<Copy Constructor>).
Perl does have a way to make assignments to an object do whatever
you want, but this involves using tie(), not overload -
see L<perlfunc/tie> and the L</COOKBOOK> examples below.

The subroutine for the assignment variant of an operator is
required only to return the result of the operation.
It is permitted to change the value of its operand
(this is safe because Perl calls the copy constructor first),
but this is optional since Perl assigns the returned value to
the left-hand operand anyway.

An object that overloads an assignment operator does so only in
respect of assignments to that object.
In other words, Perl never calls the corresponding methods with
the third argument (the "swap" argument) set to TRUE.
For example, the operation

    $a *= $b

cannot lead to C<$b>'s implementation of C<*=> being called,
even if C<$a> is a scalar.
(It can, however, generate a call to C<$b>'s method for C<*>).

=item * I<Non-mutators with a mutator variant>

     +  -  *  /  %  **  <<  >>  x  .
     &  |  ^  &.  |.  ^.

As described L<above|"Calling Conventions and Magic Autogeneration">,
Perl may call methods for operators like C<+> and C<&> in the course
of implementing missing operations like C<++>, C<+=>, and C<&=>.
While these methods may detect this usage by testing the definedness
of the third argument, they should in all cases avoid changing their
operands.
This is because Perl does not call the copy constructor before
invoking these methods.

=item * C<int>

Traditionally, the Perl function C<int> rounds to 0
(see L<perlfunc/int>), and so for floating-point-like types one
should follow the same semantic.

=item * I<String, numeric, boolean, and regexp conversions>

    ""  0+  bool

These conversions are invoked according to context as necessary.
For example, the subroutine for C<'""'> (stringify) may be used
where the overloaded object is passed as an argument to C<print>,
and that for C<'bool'> where it is tested in the condition of a flow
control statement (like C<while>) or the ternary C<?:> operation.

Of course, in contexts like, for example, C<$obj + 1>, Perl will
invoke C<$obj>'s implementation of C<+> rather than (in this
example) converting C<$obj> to a number using the numify method
C<'0+'> (an exception to this is when no method has been provided
for C<'+'> and L</fallback> is set to TRUE).

The subroutines for C<'""'>, C<'0+'>, and C<'bool'> can return
any arbitrary Perl value.
If the corresponding operation for this value is overloaded too,
the operation will be called again with this value.

As a special case if the overload returns the object itself then it will
be used directly.  An overloaded conversion returning the object is
probably a bug, because you're likely to get something that looks like
C<YourPackage=HASH(0x8172b34)>.

    qr

The subroutine for C<'qr'> is used wherever the object is
interpolated into or used as a regexp, including when it
appears on the RHS of a C<=~> or C<!~> operator.

C<qr> must return a compiled regexp, or a ref to a compiled regexp
(such as C<qr//> returns), and any further overloading on the return
value will be ignored.

=item * I<Iteration>

If C<E<lt>E<gt>> is overloaded then the same implementation is used
for both the I<read-filehandle> syntax C<E<lt>$varE<gt>> and
I<globbing> syntax C<E<lt>${var}E<gt>>.

=item * I<File tests>

The key C<'-X'> is used to specify a subroutine to handle all the
filetest operators (C<-f>, C<-x>, and so on: see L<perlfunc/-X> for
the full list);
it is not possible to overload any filetest operator individually.
To distinguish them, the letter following the '-' is passed as the
second argument (that is, in the slot that for binary operators
is used to pass the second operand).

Calling an overloaded filetest operator does not affect the stat value
associated with the special filehandle C<_>.  It still refers to the
result of the last C<stat>, C<lstat> or unoverloaded filetest.

This overload was introduced in Perl 5.12.

=item * I<Matching>

The key C<"~~"> allows you to override the smart matching logic used by
the C<~~> operator and the switch construct (C<given>/C<when>).  See
L<perlsyn/Switch Statements> and L<feature>.

Unusually, the overloaded implementation of the smart match operator
does not get full control of the smart match behaviour.
In particular, in the following code:

    package Foo;
    use overload '~~' => 'match';

    my $obj =  Foo->new();
    $obj ~~ [ 1,2,3 ];

the smart match does I<not> invoke the method call like this:

    $obj->match([1,2,3],0);

rather, the smart match distributive rule takes precedence, so $obj is
smart matched against each array element in turn until a match is found,
so you may see between one and three of these calls instead:

    $obj->match(1,0);
    $obj->match(2,0);
    $obj->match(3,0);

Consult the match table in  L<perlop/"Smartmatch Operator"> for
details of when overloading is invoked.

=item * I<Dereferencing>

    ${}  @@{}  %{}  &{}  *{}

If these operators are not explicitly overloaded then they
work in the normal way, yielding the underlying scalar,
array, or whatever stores the object data (or the appropriate
error message if the dereference operator doesn't match it).
Defining a catch-all C<'nomethod'> (see L<below|/nomethod>)
makes no difference to this as the catch-all function will
not be called to implement a missing dereference operator.

If a dereference operator is overloaded then it must return a
I<reference> of the appropriate type (for example, the
subroutine for key C<'${}'> should return a reference to a
scalar, not a scalar), or another object which overloads the
operator: that is, the subroutine only determines what is
dereferenced and the actual dereferencing is left to Perl.
As a special case, if the subroutine returns the object itself
then it will not be called again - avoiding infinite recursion.

=item * I<Special>

    nomethod  fallback  =

See L<Special Keys for C<use overload>>.

=back

=head2 Magic Autogeneration

If a method for an operation is not found then Perl tries to
autogenerate a substitute implementation from the operations
that have been defined.

Note: the behaviour described in this section can be disabled
by setting C<fallback> to FALSE (see L</fallback>).

In the following tables, numbers indicate priority.
For example, the table below states that,
if no implementation for C<'!'> has been defined then Perl will
implement it using C<'bool'> (that is, by inverting the value
returned by the method for C<'bool'>);
if boolean conversion is also unimplemented then Perl will
use C<'0+'> or, failing that, C<'""'>.

    operator | can be autogenerated from
             |
             | 0+   ""   bool   .   x
    =========|==========================
       0+    |       1     2
       ""    |  1          2
       bool  |  1    2
       int   |  1    2     3
       !     |  2    3     1
       qr    |  2    1     3
       .     |  2    1     3
       x     |  2    1     3
       .=    |  3    2     4    1
       x=    |  3    2     4        1
       <>    |  2    1     3
       -X    |  2    1     3

Note: The iterator (C<'E<lt>E<gt>'>) and file test (C<'-X'>)
operators work as normal: if the operand is not a blessed glob or
IO reference then it is converted to a string (using the method
for C<'""'>, C<'0+'>, or C<'bool'>) to be interpreted as a glob
or filename.

    operator | can be autogenerated from
             |
             |  <   <=>   neg   -=    -
    =========|==========================
       neg   |                        1
       -=    |                        1
       --    |                   1    2
       abs   | a1    a2    b1        b2    [*]
       <     |        1
       <=    |        1
       >     |        1
       >=    |        1
       ==    |        1
       !=    |        1

    * one from [a1, a2] and one from [b1, b2]

Just as numeric comparisons can be autogenerated from the method
for C<< '<=>' >>, string comparisons can be autogenerated from
that for C<'cmp'>:

     operators          |  can be autogenerated from
    ====================|===========================
     lt gt le ge eq ne  |  cmp

Similarly, autogeneration for keys C<'+='> and C<'++'> is analogous
to C<'-='> and C<'--'> above:

    operator | can be autogenerated from
             |
             |  +=    +
    =========|==========================
        +=   |        1
        ++   |   1    2

And other assignment variations are analogous to
C<'+='> and C<'-='> (and similar to C<'.='> and C<'x='> above):

              operator ||  *= /= %= **= <<= >>= &= ^= |= &.= ^.= |.=
    -------------------||-------------------------------------------
    autogenerated from ||  *  /  %  **  <<  >>  &  ^  |  &.  ^.  |.

Note also that the copy constructor (key C<'='>) may be
autogenerated, but only for objects based on scalars.
See L<Copy Constructor>.

=head3 Minimal Set of Overloaded Operations

Since some operations can be automatically generated from others, there is
a minimal set of operations that need to be overloaded in order to have
the complete set of overloaded operations at one's disposal.
Of course, the autogenerated operations may not do exactly what the user
expects.  The minimal set is:

    + - * / % ** << >> x
    <=> cmp
    & | ^ ~ &. |. ^. ~.
    atan2 cos sin exp log sqrt int
    "" 0+ bool
    ~~

Of the conversions, only one of string, boolean or numeric is
needed because each can be generated from either of the other two.

=head2 Special Keys for C<use overload>

=head3 C<nomethod>

The C<'nomethod'> key is used to specify a catch-all function to
be called for any operator that is not individually overloaded.
The specified function will be passed four parameters.
The first three arguments coincide with those that would have been
passed to the corresponding method if it had been defined.
The fourth argument is the C<use overload> key for that missing
method.  If the experimental "bitwise" feature is enabled (see L<feature>),
a fifth TRUE argument is passed to subroutines handling C<&>, C<|>, C<^> and C<~> to indicate that the caller is expecting numeric behaviour.

For example, if C<$a> is an object blessed into a package declaring

    use overload 'nomethod' => 'catch_all', # ...

then the operation

    3 + $a

could (unless a method is specifically declared for the key
C<'+'>) result in a call

    catch_all($a, 3, 1, '+')

See L<How Perl Chooses an Operator Implementation>.

=head3 C<fallback>

The value assigned to the key C<'fallback'> tells Perl how hard
it should try to find an alternative way to implement a missing
operator.

=over

=item * defined, but FALSE

    use overload "fallback" => 0, # ... ;

This disables L<Magic Autogeneration>.

=item * C<undef>

In the default case where no value is explicitly assigned to
C<fallback>, magic autogeneration is enabled.

=item * TRUE

The same as for C<undef>, but if a missing operator cannot be
autogenerated then, instead of issuing an error message, Perl
is allowed to revert to what it would have done for that
operator if there had been no C<use overload> directive.

Note: in most cases, particularly the L<Copy Constructor>,
this is unlikely to be appropriate behaviour.

=back

See L<How Perl Chooses an Operator Implementation>.

=head3 Copy Constructor

As mentioned L<above|"Mathemagic, Mutators, and Copy Constructors">,
this operation is called when a mutator is applied to a reference
that shares its object with some other reference.
For example, if C<$b> is mathemagical, and C<'++'> is overloaded
with C<'incr'>, and C<'='> is overloaded with C<'clone'>, then the
code

    $a = $b;
    # ... (other code which does not modify $a or $b) ...
    ++$b;

would be executed in a manner equivalent to

    $a = $b;
    # ...
    $b = $b->clone(undef, "");
    $b->incr(undef, "");

Note:

=over

=item *

The subroutine for C<'='> does not overload the Perl assignment
operator: it is used only to allow mutators to work as described
here.  (See L</Assignments> above.)

=item *

As for other operations, the subroutine implementing '=' is passed
three arguments, though the last two are always C<undef> and C<''>.

=item *

The copy constructor is called only before a call to a function
declared to implement a mutator, for example, if C<++$b;> in the
code above is effected via a method declared for key C<'++'>
(or 'nomethod', passed C<'++'> as the fourth argument) or, by
autogeneration, C<'+='>.
It is not called if the increment operation is effected by a call
to the method for C<'+'> since, in the equivalent code,

    $a = $b;
    $b = $b + 1;

the data referred to by C<$a> is unchanged by the assignment to
C<$b> of a reference to new object data.

=item *

The copy constructor is not called if Perl determines that it is
unnecessary because there is no other reference to the data being
modified.

=item *

If C<'fallback'> is undefined or TRUE then a copy constructor
can be autogenerated, but only for objects based on scalars.
In other cases it needs to be defined explicitly.
Where an object's data is stored as, for example, an array of
scalars, the following might be appropriate:

    use overload '=' => sub { bless [ @@{$_[0]} ] },  # ...

=item *

If C<'fallback'> is TRUE and no copy constructor is defined then,
for objects not based on scalars, Perl may silently fall back on
simple assignment - that is, assignment of the object reference.
In effect, this disables the copy constructor mechanism since
no new copy of the object data is created.
This is almost certainly not what you want.
(It is, however, consistent: for example, Perl's fallback for the
C<++> operator is to increment the reference itself.)

=back

=head2 How Perl Chooses an Operator Implementation

Which is checked first, C<nomethod> or C<fallback>?
If the two operands of an operator are of different types and
both overload the operator, which implementation is used?
The following are the precedence rules:

=over

=item 1.

If the first operand has declared a subroutine to overload the
operator then use that implementation.

=item 2.

Otherwise, if fallback is TRUE or undefined for the
first operand then see if the
L<rules for autogeneration|"Magic Autogeneration">
allows another of its operators to be used instead.

=item 3.

Unless the operator is an assignment (C<+=>, C<-=>, etc.),
repeat step (1) in respect of the second operand.

=item 4.

Repeat Step (2) in respect of the second operand.

=item 5.

If the first operand has a "nomethod" method then use that.

=item 6.

If the second operand has a "nomethod" method then use that.

=item 7.

If C<fallback> is TRUE for both operands
then perform the usual operation for the operator,
treating the operands as numbers, strings, or booleans
as appropriate for the operator (see note).

=item 8.

Nothing worked - die.

=back

Where there is only one operand (or only one operand with
overloading) the checks in respect of the other operand above are
skipped.

There are exceptions to the above rules for dereference operations
(which, if Step 1 fails, always fall back to the normal, built-in
implementations - see Dereferencing), and for C<~~> (which has its
own set of rules - see C<Matching> under L</Overloadable Operations>
above).

Note on Step 7: some operators have a different semantic depending
on the type of their operands.
As there is no way to instruct Perl to treat the operands as, e.g.,
numbers instead of strings, the result here may not be what you
expect.
See L<BUGS AND PITFALLS>.

=head2 Losing Overloading

The restriction for the comparison operation is that even if, for example,
C<cmp> should return a blessed reference, the autogenerated C<lt>
function will produce only a standard logical value based on the
numerical value of the result of C<cmp>.  In particular, a working
numeric conversion is needed in this case (possibly expressed in terms of
other conversions).

Similarly, C<.=>  and C<x=> operators lose their mathemagical properties
if the string conversion substitution is applied.

When you chop() a mathemagical object it is promoted to a string and its
mathemagical properties are lost.  The same can happen with other
operations as well.

=head2 Inheritance and Overloading

Overloading respects inheritance via the @@ISA hierarchy.
Inheritance interacts with overloading in two ways.

=over

=item Method names in the C<use overload> directive

If C<value> in

  use overload key => value;

is a string, it is interpreted as a method name - which may
(in the usual way) be inherited from another class.

=item Overloading of an operation is inherited by derived classes

Any class derived from an overloaded class is also overloaded
and inherits its operator implementations.
If the same operator is overloaded in more than one ancestor
then the implementation is determined by the usual inheritance
rules.

For example, if C<A> inherits from C<B> and C<C> (in that order),
C<B> overloads C<+> with C<\&D::plus_sub>, and C<C> overloads
C<+> by C<"plus_meth">, then the subroutine C<D::plus_sub> will
be called to implement operation C<+> for an object in package C<A>.

=back

Note that in Perl version prior to 5.18 inheritance of the C<fallback> key
was not governed by the above rules.  The value of C<fallback> in the first 
overloaded ancestor was used.  This was fixed in 5.18 to follow the usual
rules of inheritance.

=head2 Run-time Overloading

Since all C<use> directives are executed at compile-time, the only way to
change overloading during run-time is to

    eval 'use overload "+" => \&addmethod';

You can also use

    eval 'no overload "+", "--", "<="';

though the use of these constructs during run-time is questionable.

=head2 Public Functions

Package C<overload.pm> provides the following public functions:

=over 5

=item overload::StrVal(arg)

Gives the string value of C<arg> as in the
absence of stringify overloading.  If you
are using this to get the address of a reference (useful for checking if two
references point to the same thing) then you may be better off using
C<Scalar::Util::refaddr()>, which is faster.

=item overload::Overloaded(arg)

Returns true if C<arg> is subject to overloading of some operations.

=item overload::Method(obj,op)

Returns C<undef> or a reference to the method that implements C<op>.

=back

=head2 Overloading Constants

For some applications, the Perl parser mangles constants too much.
It is possible to hook into this process via C<overload::constant()>
and C<overload::remove_constant()> functions.

These functions take a hash as an argument.  The recognized keys of this hash
are:

=over 8

=item integer

to overload integer constants,

=item float

to overload floating point constants,

=item binary

to overload octal and hexadecimal constants,

=item q

to overload C<q>-quoted strings, constant pieces of C<qq>- and C<qx>-quoted
strings and here-documents,

=item qr

to overload constant pieces of regular expressions.

=back

The corresponding values are references to functions which take three arguments:
the first one is the I<initial> string form of the constant, the second one
is how Perl interprets this constant, the third one is how the constant is used.
Note that the initial string form does not
contain string delimiters, and has backslashes in backslash-delimiter
combinations stripped (thus the value of delimiter is not relevant for
processing of this string).  The return value of this function is how this
constant is going to be interpreted by Perl.  The third argument is undefined
unless for overloaded C<q>- and C<qr>- constants, it is C<q> in single-quote
context (comes from strings, regular expressions, and single-quote HERE
documents), it is C<tr> for arguments of C<tr>/C<y> operators,
it is C<s> for right-hand side of C<s>-operator, and it is C<qq> otherwise.

Since an expression C<"ab$cd,,"> is just a shortcut for C<'ab' . $cd . ',,'>,
it is expected that overloaded constant strings are equipped with reasonable
overloaded catenation operator, otherwise absurd results will result.
Similarly, negative numbers are considered as negations of positive constants.

Note that it is probably meaningless to call the functions overload::constant()
and overload::remove_constant() from anywhere but import() and unimport() methods.
From these methods they may be called as

    sub import {
       shift;
       return unless @@_;
       die "unknown import: @@_" unless @@_ == 1 and $_[0] eq ':constant';
       overload::constant integer => sub {Math::BigInt->new(shift)};
    }

=head1 IMPLEMENTATION

What follows is subject to change RSN.

The table of methods for all operations is cached in magic for the
symbol table hash for the package.  The cache is invalidated during
processing of C<use overload>, C<no overload>, new function
definitions, and changes in @@ISA.

(Every SVish thing has a magic queue, and magic is an entry in that
queue.  This is how a single variable may participate in multiple
forms of magic simultaneously.  For instance, environment variables
regularly have two forms at once: their %ENV magic and their taint
magic.  However, the magic which implements overloading is applied to
the stashes, which are rarely used directly, thus should not slow down
Perl.)

If a package uses overload, it carries a special flag.  This flag is also
set when new functions are defined or @@ISA is modified.  There will be a
slight speed penalty on the very first operation thereafter that supports
overloading, while the overload tables are updated.  If there is no
overloading present, the flag is turned off.  Thus the only speed penalty
thereafter is the checking of this flag.

It is expected that arguments to methods that are not explicitly supposed
to be changed are constant (but this is not enforced).

=head1 COOKBOOK

Please add examples to what follows!

=head2 Two-face Scalars

Put this in F<two_face.pm> in your Perl library directory:

  package two_face;		# Scalars with separate string and
                                # numeric values.
  sub new { my $p = shift; bless [@@_], $p }
  use overload '""' => \&str, '0+' => \&num, fallback => 1;
  sub num {shift->[1]}
  sub str {shift->[0]}

Use it as follows:

  require two_face;
  my $seven = two_face->new("vii", 7);
  printf "seven=$seven, seven=%d, eight=%d\n", $seven, $seven+1;
  print "seven contains 'i'\n" if $seven =~ /i/;

(The second line creates a scalar which has both a string value, and a
numeric value.)  This prints:

  seven=vii, seven=7, eight=8
  seven contains 'i'

=head2 Two-face References

Suppose you want to create an object which is accessible as both an
array reference and a hash reference.

  package two_refs;
  use overload '%{}' => \&gethash, '@@{}' => sub { $ {shift()} };
  sub new {
    my $p = shift;
    bless \ [@@_], $p;
  }
  sub gethash {
    my %h;
    my $self = shift;
    tie %h, ref $self, $self;
    \%h;
  }

  sub TIEHASH { my $p = shift; bless \ shift, $p }
  my %fields;
  my $i = 0;
  $fields{$_} = $i++ foreach qw{zero one two three};
  sub STORE {
    my $self = ${shift()};
    my $key = $fields{shift()};
    defined $key or die "Out of band access";
    $$self->[$key] = shift;
  }
  sub FETCH {
    my $self = ${shift()};
    my $key = $fields{shift()};
    defined $key or die "Out of band access";
    $$self->[$key];
  }

Now one can access an object using both the array and hash syntax:

  my $bar = two_refs->new(3,4,5,6);
  $bar->[2] = 11;
  $bar->{two} == 11 or die 'bad hash fetch';

Note several important features of this example.  First of all, the
I<actual> type of $bar is a scalar reference, and we do not overload
the scalar dereference.  Thus we can get the I<actual> non-overloaded
contents of $bar by just using C<$$bar> (what we do in functions which
overload dereference).  Similarly, the object returned by the
TIEHASH() method is a scalar reference.

Second, we create a new tied hash each time the hash syntax is used.
This allows us not to worry about a possibility of a reference loop,
which would lead to a memory leak.

Both these problems can be cured.  Say, if we want to overload hash
dereference on a reference to an object which is I<implemented> as a
hash itself, the only problem one has to circumvent is how to access
this I<actual> hash (as opposed to the I<virtual> hash exhibited by the
overloaded dereference operator).  Here is one possible fetching routine:

  sub access_hash {
    my ($self, $key) = (shift, shift);
    my $class = ref $self;
    bless $self, 'overload::dummy'; # Disable overloading of %{}
    my $out = $self->{$key};
    bless $self, $class;	# Restore overloading
    $out;
  }

To remove creation of the tied hash on each access, one may an extra
level of indirection which allows a non-circular structure of references:

  package two_refs1;
  use overload '%{}' => sub { ${shift()}->[1] },
               '@@{}' => sub { ${shift()}->[0] };
  sub new {
    my $p = shift;
    my $a = [@@_];
    my %h;
    tie %h, $p, $a;
    bless \ [$a, \%h], $p;
  }
  sub gethash {
    my %h;
    my $self = shift;
    tie %h, ref $self, $self;
    \%h;
  }

  sub TIEHASH { my $p = shift; bless \ shift, $p }
  my %fields;
  my $i = 0;
  $fields{$_} = $i++ foreach qw{zero one two three};
  sub STORE {
    my $a = ${shift()};
    my $key = $fields{shift()};
    defined $key or die "Out of band access";
    $a->[$key] = shift;
  }
  sub FETCH {
    my $a = ${shift()};
    my $key = $fields{shift()};
    defined $key or die "Out of band access";
    $a->[$key];
  }

Now if $baz is overloaded like this, then C<$baz> is a reference to a
reference to the intermediate array, which keeps a reference to an
actual array, and the access hash.  The tie()ing object for the access
hash is a reference to a reference to the actual array, so

=over

=item *

There are no loops of references.

=item *

Both "objects" which are blessed into the class C<two_refs1> are
references to a reference to an array, thus references to a I<scalar>.
Thus the accessor expression C<$$foo-E<gt>[$ind]> involves no
overloaded operations.

=back

=head2 Symbolic Calculator

Put this in F<symbolic.pm> in your Perl library directory:

  package symbolic;		# Primitive symbolic calculator
  use overload nomethod => \&wrap;

  sub new { shift; bless ['n', @@_] }
  sub wrap {
    my ($obj, $other, $inv, $meth) = @@_;
    ($obj, $other) = ($other, $obj) if $inv;
    bless [$meth, $obj, $other];
  }

This module is very unusual as overloaded modules go: it does not
provide any usual overloaded operators, instead it provides an
implementation for L</C<nomethod>>.  In this example the C<nomethod>
subroutine returns an object which encapsulates operations done over
the objects: C<< symbolic->new(3) >> contains C<['n', 3]>, C<< 2 +
symbolic->new(3) >> contains C<['+', 2, ['n', 3]]>.

Here is an example of the script which "calculates" the side of
circumscribed octagon using the above package:

  require symbolic;
  my $iter = 1;			# 2**($iter+2) = 8
  my $side = symbolic->new(1);
  my $cnt = $iter;

  while ($cnt--) {
    $side = (sqrt(1 + $side**2) - 1)/$side;
  }
  print "OK\n";

The value of $side is

  ['/', ['-', ['sqrt', ['+', 1, ['**', ['n', 1], 2]],
	               undef], 1], ['n', 1]]

Note that while we obtained this value using a nice little script,
there is no simple way to I<use> this value.  In fact this value may
be inspected in debugger (see L<perldebug>), but only if
C<bareStringify> B<O>ption is set, and not via C<p> command.

If one attempts to print this value, then the overloaded operator
C<""> will be called, which will call C<nomethod> operator.  The
result of this operator will be stringified again, but this result is
again of type C<symbolic>, which will lead to an infinite loop.

Add a pretty-printer method to the module F<symbolic.pm>:

  sub pretty {
    my ($meth, $a, $b) = @@{+shift};
    $a = 'u' unless defined $a;
    $b = 'u' unless defined $b;
    $a = $a->pretty if ref $a;
    $b = $b->pretty if ref $b;
    "[$meth $a $b]";
  }

Now one can finish the script by

  print "side = ", $side->pretty, "\n";

The method C<pretty> is doing object-to-string conversion, so it
is natural to overload the operator C<""> using this method.  However,
inside such a method it is not necessary to pretty-print the
I<components> $a and $b of an object.  In the above subroutine
C<"[$meth $a $b]"> is a catenation of some strings and components $a
and $b.  If these components use overloading, the catenation operator
will look for an overloaded operator C<.>; if not present, it will
look for an overloaded operator C<"">.  Thus it is enough to use

  use overload nomethod => \&wrap, '""' => \&str;
  sub str {
    my ($meth, $a, $b) = @@{+shift};
    $a = 'u' unless defined $a;
    $b = 'u' unless defined $b;
    "[$meth $a $b]";
  }

Now one can change the last line of the script to

  print "side = $side\n";

which outputs

  side = [/ [- [sqrt [+ 1 [** [n 1 u] 2]] u] 1] [n 1 u]]

and one can inspect the value in debugger using all the possible
methods.

Something is still amiss: consider the loop variable $cnt of the
script.  It was a number, not an object.  We cannot make this value of
type C<symbolic>, since then the loop will not terminate.

Indeed, to terminate the cycle, the $cnt should become false.
However, the operator C<bool> for checking falsity is overloaded (this
time via overloaded C<"">), and returns a long string, thus any object
of type C<symbolic> is true.  To overcome this, we need a way to
compare an object to 0.  In fact, it is easier to write a numeric
conversion routine.

Here is the text of F<symbolic.pm> with such a routine added (and
slightly modified str()):

  package symbolic;		# Primitive symbolic calculator
  use overload
    nomethod => \&wrap, '""' => \&str, '0+' => \&num;

  sub new { shift; bless ['n', @@_] }
  sub wrap {
    my ($obj, $other, $inv, $meth) = @@_;
    ($obj, $other) = ($other, $obj) if $inv;
    bless [$meth, $obj, $other];
  }
  sub str {
    my ($meth, $a, $b) = @@{+shift};
    $a = 'u' unless defined $a;
    if (defined $b) {
      "[$meth $a $b]";
    } else {
      "[$meth $a]";
    }
  }
  my %subr = ( n => sub {$_[0]},
	       sqrt => sub {sqrt $_[0]},
	       '-' => sub {shift() - shift()},
	       '+' => sub {shift() + shift()},
	       '/' => sub {shift() / shift()},
	       '*' => sub {shift() * shift()},
	       '**' => sub {shift() ** shift()},
	     );
  sub num {
    my ($meth, $a, $b) = @@{+shift};
    my $subr = $subr{$meth}
      or die "Do not know how to ($meth) in symbolic";
    $a = $a->num if ref $a eq __PACKAGE__;
    $b = $b->num if ref $b eq __PACKAGE__;
    $subr->($a,$b);
  }

All the work of numeric conversion is done in %subr and num().  Of
course, %subr is not complete, it contains only operators used in the
example below.  Here is the extra-credit question: why do we need an
explicit recursion in num()?  (Answer is at the end of this section.)

Use this module like this:

  require symbolic;
  my $iter = symbolic->new(2);	# 16-gon
  my $side = symbolic->new(1);
  my $cnt = $iter;

  while ($cnt) {
    $cnt = $cnt - 1;		# Mutator '--' not implemented
    $side = (sqrt(1 + $side**2) - 1)/$side;
  }
  printf "%s=%f\n", $side, $side;
  printf "pi=%f\n", $side*(2**($iter+2));

It prints (without so many line breaks)

  [/ [- [sqrt [+ 1 [** [/ [- [sqrt [+ 1 [** [n 1] 2]]] 1]
			  [n 1]] 2]]] 1]
     [/ [- [sqrt [+ 1 [** [n 1] 2]]] 1] [n 1]]]=0.198912
  pi=3.182598

The above module is very primitive.  It does not implement
mutator methods (C<++>, C<-=> and so on), does not do deep copying
(not required without mutators!), and implements only those arithmetic
operations which are used in the example.

To implement most arithmetic operations is easy; one should just use
the tables of operations, and change the code which fills %subr to

  my %subr = ( 'n' => sub {$_[0]} );
  foreach my $op (split " ", $overload::ops{with_assign}) {
    $subr{$op} = $subr{"$op="} = eval "sub {shift() $op shift()}";
  }
  my @@bins = qw(binary 3way_comparison num_comparison str_comparison);
  foreach my $op (split " ", "@@overload::ops{ @@bins }") {
    $subr{$op} = eval "sub {shift() $op shift()}";
  }
  foreach my $op (split " ", "@@overload::ops{qw(unary func)}") {
    print "defining '$op'\n";
    $subr{$op} = eval "sub {$op shift()}";
  }

Since subroutines implementing assignment operators are not required
to modify their operands (see L<Overloadable Operations> above),
we do not need anything special to make C<+=> and friends work,
besides adding these operators to %subr and defining a copy
constructor (needed since Perl has no way to know that the
implementation of C<'+='> does not mutate the argument -
see L<Copy Constructor>).

To implement a copy constructor, add C<< '=' => \&cpy >> to C<use overload>
line, and code (this code assumes that mutators change things one level
deep only, so recursive copying is not needed):

  sub cpy {
    my $self = shift;
    bless [@@$self], ref $self;
  }

To make C<++> and C<--> work, we need to implement actual mutators,
either directly, or in C<nomethod>.  We continue to do things inside
C<nomethod>, thus add

    if ($meth eq '++' or $meth eq '--') {
      @@$obj = ($meth, (bless [@@$obj]), 1); # Avoid circular reference
      return $obj;
    }

after the first line of wrap().  This is not a most effective
implementation, one may consider

  sub inc { $_[0] = bless ['++', shift, 1]; }

instead.

As a final remark, note that one can fill %subr by

  my %subr = ( 'n' => sub {$_[0]} );
  foreach my $op (split " ", $overload::ops{with_assign}) {
    $subr{$op} = $subr{"$op="} = eval "sub {shift() $op shift()}";
  }
  my @@bins = qw(binary 3way_comparison num_comparison str_comparison);
  foreach my $op (split " ", "@@overload::ops{ @@bins }") {
    $subr{$op} = eval "sub {shift() $op shift()}";
  }
  foreach my $op (split " ", "@@overload::ops{qw(unary func)}") {
    $subr{$op} = eval "sub {$op shift()}";
  }
  $subr{'++'} = $subr{'+'};
  $subr{'--'} = $subr{'-'};

This finishes implementation of a primitive symbolic calculator in
50 lines of Perl code.  Since the numeric values of subexpressions
are not cached, the calculator is very slow.

Here is the answer for the exercise: In the case of str(), we need no
explicit recursion since the overloaded C<.>-operator will fall back
to an existing overloaded operator C<"">.  Overloaded arithmetic
operators I<do not> fall back to numeric conversion if C<fallback> is
not explicitly requested.  Thus without an explicit recursion num()
would convert C<['+', $a, $b]> to C<$a + $b>, which would just rebuild
the argument of num().

If you wonder why defaults for conversion are different for str() and
num(), note how easy it was to write the symbolic calculator.  This
simplicity is due to an appropriate choice of defaults.  One extra
note: due to the explicit recursion num() is more fragile than sym():
we need to explicitly check for the type of $a and $b.  If components
$a and $b happen to be of some related type, this may lead to problems.

=head2 I<Really> Symbolic Calculator

One may wonder why we call the above calculator symbolic.  The reason
is that the actual calculation of the value of expression is postponed
until the value is I<used>.

To see it in action, add a method

  sub STORE {
    my $obj = shift;
    $#$obj = 1;
    @@$obj->[0,1] = ('=', shift);
  }

to the package C<symbolic>.  After this change one can do

  my $a = symbolic->new(3);
  my $b = symbolic->new(4);
  my $c = sqrt($a**2 + $b**2);

and the numeric value of $c becomes 5.  However, after calling

  $a->STORE(12);  $b->STORE(5);

the numeric value of $c becomes 13.  There is no doubt now that the module
symbolic provides a I<symbolic> calculator indeed.

To hide the rough edges under the hood, provide a tie()d interface to the
package C<symbolic>.  Add methods

  sub TIESCALAR { my $pack = shift; $pack->new(@@_) }
  sub FETCH { shift }
  sub nop {  }		# Around a bug

(the bug, fixed in Perl 5.14, is described in L<"BUGS">).  One can use this
new interface as

  tie $a, 'symbolic', 3;
  tie $b, 'symbolic', 4;
  $a->nop;  $b->nop;	# Around a bug

  my $c = sqrt($a**2 + $b**2);

Now numeric value of $c is 5.  After C<$a = 12; $b = 5> the numeric value
of $c becomes 13.  To insulate the user of the module add a method

  sub vars { my $p = shift; tie($_, $p), $_->nop foreach @@_; }

Now

  my ($a, $b);
  symbolic->vars($a, $b);
  my $c = sqrt($a**2 + $b**2);

  $a = 3; $b = 4;
  printf "c5  %s=%f\n", $c, $c;

  $a = 12; $b = 5;
  printf "c13  %s=%f\n", $c, $c;

shows that the numeric value of $c follows changes to the values of $a
and $b.

=head1 AUTHOR

Ilya Zakharevich E<lt>F<ilya@@math.mps.ohio-state.edu>E<gt>.

=head1 SEE ALSO

The C<overloading> pragma can be used to enable or disable overloaded
operations within a lexical scope - see L<overloading>.

=head1 DIAGNOSTICS

When Perl is run with the B<-Do> switch or its equivalent, overloading
induces diagnostic messages.

Using the C<m> command of Perl debugger (see L<perldebug>) one can
deduce which operations are overloaded (and which ancestor triggers
this overloading).  Say, if C<eq> is overloaded, then the method C<(eq>
is shown by debugger.  The method C<()> corresponds to the C<fallback>
key (in fact a presence of this method shows that this package has
overloading enabled, and it is what is used by the C<Overloaded>
function of module C<overload>).

The module might issue the following warnings:

=over 4

=item Odd number of arguments for overload::constant

(W) The call to overload::constant contained an odd number of arguments.
The arguments should come in pairs.

=item '%s' is not an overloadable type

(W) You tried to overload a constant type the overload package is unaware of.

=item '%s' is not a code reference

(W) The second (fourth, sixth, ...) argument of overload::constant needs
to be a code reference.  Either an anonymous subroutine, or a reference
to a subroutine.

=item overload arg '%s' is invalid

(W) C<use overload> was passed an argument it did not
recognize.  Did you mistype an operator?

=back

=head1 BUGS AND PITFALLS

=over

=item *

A pitfall when fallback is TRUE and Perl resorts to a built-in
implementation of an operator is that some operators have more
than one semantic, for example C<|>:

        use overload '0+' => sub { $_[0]->{n}; },
            fallback => 1;
        my $x = bless { n => 4 }, "main";
        my $y = bless { n => 8 }, "main";
        print $x | $y, "\n";

You might expect this to output "12".
In fact, it prints "<": the ASCII result of treating "|"
as a bitwise string operator - that is, the result of treating
the operands as the strings "4" and "8" rather than numbers.
The fact that numify (C<0+>) is implemented but stringify
(C<"">) isn't makes no difference since the latter is simply
autogenerated from the former.

The only way to change this is to provide your own subroutine
for C<'|'>.

=item *

Magic autogeneration increases the potential for inadvertently
creating self-referential structures.
Currently Perl will not free self-referential
structures until cycles are explicitly broken.
For example,

    use overload '+' => 'add';
    sub add { bless [ \$_[0], \$_[1] ] };

is asking for trouble, since

    $obj += $y;

will effectively become

    $obj = add($obj, $y, undef);

with the same result as

    $obj = [\$obj, \$foo];

Even if no I<explicit> assignment-variants of operators are present in
the script, they may be generated by the optimizer.
For example,

    "obj = $obj\n"

may be optimized to

    my $tmp = 'obj = ' . $obj;  $tmp .= "\n";

=item *

The symbol table is filled with names looking like line-noise.

=item *

This bug was fixed in Perl 5.18, but may still trip you up if you are using
older versions:

For the purpose of inheritance every overloaded package behaves as if
C<fallback> is present (possibly undefined).  This may create
interesting effects if some package is not overloaded, but inherits
from two overloaded packages.

=item *

Before Perl 5.14, the relation between overloading and tie()ing was broken.
Overloading was triggered or not based on the I<previous> class of the
tie()d variable.

This happened because the presence of overloading was checked
too early, before any tie()d access was attempted.  If the
class of the value FETCH()ed from the tied variable does not
change, a simple workaround for code that is to run on older Perl
versions is to access the value (via C<() = $foo> or some such)
immediately after tie()ing, so that after this call the I<previous> class
coincides with the current one.

=item *

Barewords are not covered by overloaded string constants.

=item *

The range operator C<..> cannot be overloaded.

=back

=cut

@


1.14
log
@Merge perl-5.18.2 plus local patches, remove old files

OK espie@@ sthen@@ deraadt@@
@
text
@d3 1
a3 1
our $VERSION = '1.22';
d11 2
a12 2
    binary              => '& &= | |= ^ ^=',
    unary               => "neg ! ~",
d33 1
a33 1
  my ($sub, $fb);
d84 1
a84 1
  return $sub if !ref $sub or $sub != \&nil;
d255 3
a257 1
C<use overload> directive (with one exception - see L</nomethod>).
d315 6
d372 2
a373 2
 binary		  => '& &= | |= ^ ^=',
 unary		  => 'neg ! ~',
d386 1
d419 1
a419 1
    &=  |=  ^=
d449 1
a449 1
     &  |  ^
d662 3
a664 3
              operator ||  *= /= %= **= <<= >>= &= ^= |=
    -------------------||--------------------------------
    autogenerated from ||  *  /  %  **  <<  >>  &  ^  |
d680 1
a680 1
    & | ^ ~
d698 2
a699 1
method.
d1067 1
a1067 1
set when new function are defined or @@ISA is modified.  There will be a
@


1.13
log
@merge/resolve conflicts
(some more to do after this one)
@
text
@d3 1
a3 1
our $VERSION = '1.18';
d34 1
a34 3
  $ {$package . "::OVERLOAD"}{dummy}++; # Register with magic by touching.
  $fb = ${$package . "::()"}; # preserve old fallback value RT#68196
  *{$package . "::()"} = \&nil; # Make it findable via fetchmethod.
d37 4
a40 1
      $fb = $arg{$_};
d45 1
a45 1
      if (not ref $sub and $sub !~ /::/) {
a52 1
  ${$package . "::()"} = $fb; # Make it findable too (fallback only).
a63 1
  ${$package . "::OVERLOAD"}{dummy}++; # Upgrade the table
d65 1
d67 3
a69 5
    if ($_ eq 'fallback') {
      undef $ {$package . "::()"};
    } else {
      delete $ {$package . "::"}{"(" . $_};
    }
d76 1
a76 1
  mycan ($package, '()');
a498 3
B<BUGS> Even in list context, the iterator is currently called only
once and with scalar context.

d934 4
a937 4
Note that since the value of the C<fallback> key is not a subroutine,
its inheritance is not governed by the above rules.  In the current
implementation, the value of C<fallback> in the first overloaded
ancestor is used, but this is accidental and subject to change.
d1046 1
a1046 4
definitions, and changes in @@ISA.  However, this invalidation remains
unprocessed until the next C<bless>ing into the package.  Hence if you
want to change overloading structure dynamically, you'll need an
additional (fake) C<bless>ing to update the table.
d1056 6
a1061 18
If an object belongs to a package using overload, it carries a special
flag.  Thus the only speed penalty during arithmetic operations without
overloading is the checking of this flag.

In fact, if C<use overload> is not present, there is almost no overhead
for overloadable operations, so most programs should not suffer
measurable performance penalties.  A considerable effort was made to
minimize the overhead when overload is used in some package, but the
arguments in question do not belong to packages using overload.  When
in doubt, test your speed with C<use overload> and without it.  So far
there have been no reports of substantial speed degradation if Perl is
compiled with optimization turned on.

There is no size penalty for data if overload is not used.  The only
size penalty if overload is used in some package is that I<all> the
packages acquire a magic during the next C<bless>ing into the
package.  This magic is three-words-long for packages without
overloading, and carries the cache table if the package is overloaded.
d1234 1
a1234 1
implementation for L<C<nomethod>>.  In this example the C<nomethod>
a1591 10
No warning is issued for invalid C<use overload> keys.
Such errors are not always obvious:

        use overload "+0" => sub { ...; },   # should be "0+"
            "not" => sub { ...; };           # should be "!"

(Bug #74098)

=item *

a1647 2
Because it is used for overloading, the per-package hash
C<%OVERLOAD> now has a special meaning in Perl.
d1652 3
d1677 4
@


1.12
log
@merge in perl 5.12.2 plus local changes
@
text
@d3 24
a26 1
our $VERSION = '1.10';
d41 2
d48 1
a48 1
      #print STDERR "Setting `$ {'package'}::\cO$_' to \\&`$sub'.\n";
d78 1
a78 1
  $package->can('()');
d85 2
a86 1
  return $sub if $sub ne \&nil;
d116 2
a117 11
  my $package = ref $_[0];
  return "$_[0]" unless $package;

  local $@@;
  local $!;
  require Scalar::Util;
  my $class = Scalar::Util::blessed($_[0]);
  my $class_prefix = defined($class) ? "$class=" : "";
  my $type = Scalar::Util::reftype($_[0]);
  my $addr = Scalar::Util::refaddr($_[0]);
  return sprintf("$class_prefix$type(0x%x)", $addr);
a145 16
%ops = ( with_assign	  => "+ - * / % ** << >> x .",
	 assign		  => "+= -= *= /= %= **= <<= >>= x= .=",
	 num_comparison	  => "< <= >  >= == !=",
	 '3way_comparison'=> "<=> cmp",
	 str_comparison	  => "lt le gt ge eq ne",
	 binary		  => '& &= | |= ^ ^=',
	 unary		  => "neg ! ~",
	 mutators	  => '++ --',
	 func		  => "atan2 cos sin exp abs log sqrt int",
	 conversion	  => 'bool "" 0+ qr',
	 iterators	  => '<>',
         filetest         => "-X",
	 dereferencing	  => '${} @@{} %{} &{} *{}',
	 matching	  => '~~',
	 special	  => 'nomethod fallback =');

d155 1
a155 1
        warnings::warnif ("`$_[0]' is not an overloadable type");
d162 1
a162 1
            warnings::warn ("`$_[1]' is not a code reference");
d202 1
a202 1
    $b=5+$a;
d213 3
a215 1
=head2 Declaration of overloaded functions
d217 8
a224 1
The compilation directive
d228 18
a245 2
	"+" => \&add,
	"*=" => "muas";
d247 8
a254 52
declares function Number::add() for addition, and method muas() in
the "class" C<Number> (or one of its base classes)
for the assignment form C<*=> of multiplication.

Arguments of this directive come in (key, value) pairs.  Legal values
are values legal inside a C<&{ ... }> call, so the name of a
subroutine, a reference to a subroutine, or an anonymous subroutine
will all work.  Note that values specified as strings are
interpreted as methods, not subroutines.  Legal keys are listed below.

The subroutine C<add> will be called to execute C<$a+$b> if $a
is a reference to an object blessed into the package C<Number>, or if $a is
not an object from a package with defined mathemagic addition, but $b is a
reference to a C<Number>.  It can also be called in other situations, like
C<$a+=7>, or C<$a++>.  See L<MAGIC AUTOGENERATION>.  (Mathemagical
methods refer to methods triggered by an overloaded mathematical
operator.)

Since overloading respects inheritance via the @@ISA hierarchy, the
above declaration would also trigger overloading of C<+> and C<*=> in
all the packages which inherit from C<Number>.

=head2 Calling Conventions for Binary Operations

The functions specified in the C<use overload ...> directive are called
with three (in one particular case with four, see L<Last Resort>)
arguments.  If the corresponding operation is binary, then the first
two arguments are the two arguments of the operation.  However, due to
general object calling conventions, the first argument should always be
an object in the package, so in the situation of C<7+$a>, the
order of the arguments is interchanged.  It probably does not matter
when implementing the addition method, but whether the arguments
are reversed is vital to the subtraction method.  The method can
query this information by examining the third argument, which can take
three different values:

=over 7

=item FALSE

the order of arguments is as in the current operation.

=item TRUE

the arguments are reversed.

=item C<undef>

the current operation is an assignment variant (as in
C<$a+=7>), but the usual function is called instead.  This additional
information can be used to generate some optimizations.  Compare
L<Calling Conventions for Mutators>.
d256 98
a353 1
=back
d355 1
a355 1
=head2 Calling Conventions for Unary Operations
d357 3
a359 3
Unary operation are considered binary operations with the second
argument being C<undef>.  Thus the functions that overloads C<{"++"}>
is called with arguments C<($a,undef,'')> when $a++ is executed.
d361 15
a375 3
=head2 Calling Conventions for Mutators

Two types of mutators have different calling conventions:
d377 3
a379 16
=over

=item C<++> and C<-->

The routines which implement these operators are expected to actually
I<mutate> their arguments.  So, assuming that $obj is a reference to a
number,

  sub incr { my $n = $ {$_[0]}; ++$n; $_[0] = bless \$n}

is an appropriate implementation of overloaded C<++>.  Note that

  sub incr { ++$ {$_[0]} ; shift }

is OK if used with preincrement and with postincrement. (In the case
of postincrement a copying will be performed, see L<Copy Constructor>.)
d381 2
a382 40
=item C<x=> and other assignment versions

There is nothing special about these methods.  They may change the
value of their arguments, and may leave it as is.  The result is going
to be assigned to the value in the left-hand-side if different from
this value.

This allows for the same method to be used as overloaded C<+=> and
C<+>.  Note that this is I<allowed>, but not recommended, since by the
semantic of L<"Fallback"> Perl will call the method for C<+> anyway,
if C<+=> is not overloaded.

=back

B<Warning.>  Due to the presence of assignment versions of operations,
routines which may be called in assignment context may create
self-referential structures.  Currently Perl will not free self-referential
structures until cycles are C<explicitly> broken.  You may get problems
when traversing your structures too.

Say,

  use overload '+' => sub { bless [ \$_[0], \$_[1] ] };

is asking for trouble, since for code C<$obj += $foo> the subroutine
is called as C<$obj = add($obj, $foo, undef)>, or C<$obj = [\$obj,
\$foo]>.  If using such a subroutine is an important optimization, one
can overload C<+=> explicitly by a non-"optimized" version, or switch
to non-optimized version if C<not defined $_[2]> (see
L<Calling Conventions for Binary Operations>).

Even if no I<explicit> assignment-variants of operators are present in
the script, they may be generated by the optimizer.  Say, C<",$obj,"> or
C<',' . $obj . ','> may be both optimized to

  my $tmp = ',' . $obj;    $tmp .= ',';

=head2 Overloadable Operations

The following symbols can be specified in C<use overload> directive:
d386 1
a386 32
=item * I<Arithmetic operations>

    "+", "+=", "-", "-=", "*", "*=", "/", "/=", "%", "%=",
    "**", "**=", "<<", "<<=", ">>", ">>=", "x", "x=", ".", ".=",

For these operations a substituted non-assignment variant can be called if
the assignment variant is not available.  Methods for operations C<+>,
C<->, C<+=>, and C<-=> can be called to automatically generate
increment and decrement methods.  The operation C<-> can be used to
autogenerate missing methods for unary minus or C<abs>.

See L<"MAGIC AUTOGENERATION">, L<"Calling Conventions for Mutators"> and
L<"Calling Conventions for Binary Operations">) for details of these
substitutions.

=item * I<Comparison operations>

    "<",  "<=", ">",  ">=", "==", "!=", "<=>",
    "lt", "le", "gt", "ge", "eq", "ne", "cmp",

If the corresponding "spaceship" variant is available, it can be
used to substitute for the missing operation.  During C<sort>ing
arrays, C<cmp> is used to compare values subject to C<use overload>.

=item * I<Bit operations>

    "&", "&=", "^", "^=", "|", "|=", "neg", "!", "~",

C<neg> stands for unary minus.  If the method for C<neg> is not
specified, it can be autogenerated using the method for
subtraction. If the method for C<!> is not specified, it can be
autogenerated using the methods for C<bool>, or C<"">, or C<0+>.
d388 91
a478 38
The same remarks in L<"Arithmetic operations"> about
assignment-variants and autogeneration apply for
bit operations C<"&">, C<"^">, and C<"|"> as well.

=item * I<Increment and decrement>

    "++", "--",

If undefined, addition and subtraction methods can be
used instead.  These operations are called both in prefix and
postfix form.

=item * I<Transcendental functions>

    "atan2", "cos", "sin", "exp", "abs", "log", "sqrt", "int"

If C<abs> is unavailable, it can be autogenerated using methods
for "E<lt>" or "E<lt>=E<gt>" combined with either unary minus or subtraction.

Note that traditionally the Perl function L<int> rounds to 0, thus for
floating-point-like types one should follow the same semantic.  If
C<int> is unavailable, it can be autogenerated using the overloading of
C<0+>.

=item * I<Boolean, string, numeric and regexp conversions>

    'bool', '""', '0+', 'qr'

If one or two of these operations are not overloaded, the remaining ones
can be used instead.  C<bool> is used in the flow control operators
(like C<while>) and for the ternary C<?:> operation; C<qr> is used for
the RHS of C<=~> and when an object is interpolated into a regexp.

C<bool>, C<"">, and C<0+> can return any arbitrary Perl value.  If the
corresponding operation for this value is overloaded too, that operation
will be called again with this value. C<qr> must return a compiled
regexp, or a ref to a compiled regexp (such as C<qr//> returns), and any
further overloading on the return value will be ignored.
d481 1
a481 1
be used directly. An overloaded conversion returning the object is
d485 10
d497 2
a498 5
    "<>"

If not overloaded, the argument will be converted to a filehandle or
glob (which may require a stringification).  The same overloading
happens both for the I<read-filehandle> syntax C<E<lt>$varE<gt>> and
d506 7
a512 8
    "-X"

This overload is used for all the filetest operators (C<-f>, C<-x> and
so on: see L<perlfunc/-X> for the full list). Even though these are
unary operators, the method will be called with a second argument which
is a single letter indicating which test was performed. Note that the
overload key is the literal string C<"-X">: you can't provide separate
overloads for the different tests.
d515 1
a515 1
associated with the special filehandle C<_>. It still refers to the
d518 1
a518 7
If not overloaded, these operators will fall back to the default
behaviour even without C<< fallback => 1 >>. This means that if the
object is a blessed glob or blessed IO ref it will be treated as a
filehandle, otherwise string overloading will be invoked and the result
treated as a filename.

This overload was introduced in perl 5.12.
d524 1
a524 1
L<perlsyn/switch> and L<feature>.
d526 3
a528 3
Unusually, overloading of the smart match operator does not automatically
take precedence over normal smart match behaviour. In particular, in the
following code:
d548 1
a548 1
Consult the match table in  L<perlsyn/"Smart matching in detail"> for
d553 1
a553 8
    '${}', '@@{}', '%{}', '&{}', '*{}'.

If not overloaded, the argument will be dereferenced I<as is>, thus
should be of correct type.  These functions should return a reference
of correct type, or another object with overloaded dereferencing.

As a special case if the overload returns the object itself then it
will be used directly (provided it is the correct type).
d555 16
a570 2
The dereference operators must be specified explicitly they will not be passed to
"nomethod".
d574 1
a574 1
    "nomethod", "fallback", "=".
d576 1
a576 1
see L<SPECIAL SYMBOLS FOR C<use overload>>.
d580 1
a580 2
See L<"Fallback"> for an explanation of when a missing method can be
autogenerated.
d582 83
a664 2
A computer-readable form of the above table is available in the hash
%overload::ops, with values being space-separated lists of names:
d666 1
a666 15
 with_assign	  => '+ - * / % ** << >> x .',
 assign		  => '+= -= *= /= %= **= <<= >>= x= .=',
 num_comparison	  => '< <= > >= == !=',
 '3way_comparison'=> '<=> cmp',
 str_comparison	  => 'lt le gt ge eq ne',
 binary		  => '& &= | |= ^ ^=',
 unary		  => 'neg ! ~',
 mutators	  => '++ --',
 func		  => 'atan2 cos sin exp abs log sqrt',
 conversion	  => 'bool "" 0+ qr',
 iterators	  => '<>',
 filetest         => '-X',
 dereferencing	  => '${} @@{} %{} &{} *{}',
 matching	  => '~~',
 special	  => 'nomethod fallback ='
d668 5
a672 1
=head2 Inheritance and overloading
d674 6
a679 1
Inheritance interacts with overloading in two ways.
d681 2
a682 1
=over
d684 1
a684 1
=item Strings as values of C<use overload> directive
d686 1
a686 1
If C<value> in
d688 7
a694 1
  use overload key => value;
d696 1
a696 1
is a string, it is interpreted as a method name.
d698 1
a698 1
=item Overloading of an operation is inherited by derived classes
d700 1
a700 10
Any class derived from an overloaded class is also overloaded.  The
set of overloaded methods is the union of overloaded methods of all
the ancestors. If some method is overloaded in several ancestor, then
which description will be used is decided by the usual inheritance
rules:

If C<A> inherits from C<B> and C<C> (in this order), C<B> overloads
C<+> with C<\&D::plus_sub>, and C<C> overloads C<+> by C<"plus_meth">,
then the subroutine C<D::plus_sub> will be called to implement
operation C<+> for an object in package C<A>.
d702 1
a702 1
=back
d704 2
a705 4
Note that since the value of the C<fallback> key is not a subroutine,
its inheritance is not governed by the above rules.  In the current
implementation, the value of C<fallback> in the first overloaded
ancestor is used, but this is accidental and subject to change.
d707 1
a707 1
=head1 SPECIAL SYMBOLS FOR C<use overload>
d709 1
a709 2
Three keys are recognized by Perl that are not covered by the above
description.
d711 1
a711 1
=head2 Last Resort
d713 3
a715 7
C<"nomethod"> should be followed by a reference to a function of four
parameters.  If defined, it is called when the overloading mechanism
cannot find a method for some operation.  The first three arguments of
this function coincide with the arguments for the corresponding method if
it were found, the fourth argument is the symbol
corresponding to the missing method.  If several methods are tried,
the last one is used.  Say, C<1-$a> can be equivalent to
d717 1
a717 1
	&nomethodMethod($a,1,1,"-")
d719 1
a719 2
if the pair C<"nomethod" =E<gt> "nomethodMethod"> was specified in the
C<use overload> directive.
d721 1
a721 2
The C<"nomethod"> mechanism is I<not> used for the dereference operators
( ${} @@{} %{} &{} *{} ).
d723 1
d725 1
a725 3
If some operation cannot be resolved, and there is no function
assigned to C<"nomethod">, then an exception will be raised via die()--
unless C<"fallback"> was specified as a key in C<use overload> directive.
d727 2
d730 1
a730 1
=head2 Fallback
d732 4
a735 3
The key C<"fallback"> governs what to do if a method for a particular
operation is not found.  Three different cases are possible depending on
the value of C<"fallback">:
d737 2
a738 1
=over 16
d740 1
a740 1
=item * C<undef>
d742 1
a742 4
Perl tries to use a
substituted method (see L<MAGIC AUTOGENERATION>).  If this fails, it
then tries to calls C<"nomethod"> value; if missing, an exception
will be raised.
d744 1
a744 1
=item * TRUE
d746 6
a751 3
The same as for the C<undef> value, but no exception is raised.  Instead,
it silently reverts to what it would have done were there no C<use overload>
present.
d753 3
a755 1
=item * defined, but FALSE
d757 1
a757 2
No autogeneration is tried.  Perl tries to call
C<"nomethod"> value, and if this is missing, raises an exception.
d759 4
a762 1
=back
d764 1
a764 2
B<Note.> C<"fallback"> inheritance via @@ISA is not carved in stone
yet, see L<"Inheritance and overloading">.
d766 1
a766 1
=head2 Copy Constructor
d768 1
a768 30
The value for C<"="> is a reference to a function with three
arguments, i.e., it looks like the other values in C<use
overload>. However, it does not overload the Perl assignment
operator. This would go against Camel hair.

This operation is called in the situations when a mutator is applied
to a reference that shares its object with some other reference, such
as

	$a=$b;
	++$a;

To make this change $a and not change $b, a copy of C<$$a> is made,
and $a is assigned a reference to this new object.  This operation is
done during execution of the C<++$a>, and not during the assignment,
(so before the increment C<$$a> coincides with C<$$b>).  This is only
done if C<++> is expressed via a method for C<'++'> or C<'+='> (or
C<nomethod>).  Note that if this operation is expressed via C<'+'>
a nonmutator, i.e., as in

	$a=$b;
	$a=$a+1;

then C<$a> does not reference a new copy of C<$$a>, since $$a does not
appear as lvalue when the above code is executed.

If the copy constructor is required during the execution of some mutator,
but a method for C<'='> was not specified, it can be autogenerated as a
string copy if the object is a plain scalar or a simple assignment if it
is not.
d770 3
a772 1
=over 5
d774 1
a774 1
=item B<Example>
d776 2
a777 1
The actually executed code for
d779 1
a779 3
	$a=$b;
        Something else which does not modify $a or $b....
	++$a;
d781 7
a787 1
may be
d789 2
a790 4
	$a=$b;
        Something else which does not modify $a or $b....
	$a = $a->clone(undef,"");
        $a->incr(undef,"");
d792 2
a793 2
if $b was mathemagical, and C<'++'> was overloaded with C<\&incr>,
C<'='> was overloaded with C<\&clone>.
d795 1
a795 1
=back
d797 3
a799 2
Same behaviour is triggered by C<$b = $a++>, which is consider a synonym for
C<$b = $a; ++$a>.
d801 1
a801 1
=head1 MAGIC AUTOGENERATION
d803 5
a807 4
If a method for an operation is not found, and the value for  C<"fallback"> is
TRUE or undefined, Perl tries to autogenerate a substitute method for
the missing operation based on the defined operations.  Autogenerated method
substitutions are possible for the following operations:
d809 1
a809 1
=over 16
d811 1
a811 1
=item I<Assignment forms of arithmetic operations>
d813 8
a820 2
C<$a+=$b> can use the method for C<"+"> if the method for C<"+=">
is not defined.
d822 1
a822 1
=item I<Conversion operations>
d824 1
a824 2
String, numeric, boolean and regexp conversions are calculated in terms
of one another if not all of them are defined.
d826 4
a829 1
=item I<Increment and decrement>
d831 1
a831 4
The C<++$a> operation can be expressed in terms of C<$a+=1> or C<$a+1>,
and C<$a--> in terms of C<$a-=1> and C<$a-1>.

=item C<abs($a)>
d833 1
a833 1
can be expressed in terms of C<$aE<lt>0> and C<-$a> (or C<0-$a>).
d835 2
a836 1
=item I<Unary minus>
d838 1
a838 1
can be expressed in terms of subtraction.
d840 4
a843 1
=item I<Negation>
d845 1
a845 2
C<!> and C<not> can be expressed in terms of boolean conversion, or
string or numerical conversion.
d847 2
a848 1
=item I<Concatenation>
d850 1
a850 1
can be expressed in terms of string conversion.
d852 1
a852 1
=item I<Comparison operations>
d854 1
a854 2
can be expressed in terms of its "spaceship" counterpart: either
C<E<lt>=E<gt>> or C<cmp>:
d856 1
a856 2
    <, >, <=, >=, ==, != 	in terms of <=>
    lt, gt, le, ge, eq, ne 	in terms of cmp
d858 1
a858 1
=item I<Iterator>
d860 1
a860 1
    <>				in terms of builtin operations
d862 1
a862 1
=item I<Dereferencing>
d864 4
a867 1
    ${} @@{} %{} &{} *{}		in terms of builtin operations
d869 1
a869 1
=item I<Copy operator>
d871 1
a871 3
can be expressed in terms of an assignment to the dereferenced value, if this
value is a scalar and not a reference, or simply a reference assignment
otherwise.
d875 16
a890 1
=head1 Minimal set of overloaded operations
d892 1
a892 16
Since some operations can be automatically generated from others, there is
a minimal set of operations that need to be overloaded in order to have
the complete set of overloaded operations at one's disposal.
Of course, the autogenerated operations may not do exactly what the user
expects. See L<MAGIC AUTOGENERATION> above. The minimal set is:

    + - * / % ** << >> x
    <=> cmp
    & | ^ ~
    atan2 cos sin exp log sqrt int

Additionally, you need to define at least one of string, boolean or
numeric conversions because any one can be used to emulate the others.
The string conversion can also be used to emulate concatenation.

=head1 Losing overloading
d895 1
a895 1
`C<cmp>' should return a blessed reference, the autogenerated `C<lt>'
d897 1
a897 1
numerical value of the result of `C<cmp>'.  In particular, a working
d908 37
a944 1
=head1 Run-time Overloading
d957 1
a957 1
=head1 Public functions
d965 2
a966 1
Gives string value of C<arg> as in absence of stringify overloading. If you
d981 1
a981 1
=head1 Overloading constants
d1037 6
a1042 6
	sub import {
	  shift;
	  return unless @@_;
	  die "unknown import: @@_" unless @@_ == 1 and $_[0] eq ':constant';
	  overload::constant integer => sub {Math::BigInt->new(shift)};
	}
d1051 2
a1052 2
definitions, and changes in @@ISA. However, this invalidation remains
unprocessed until the next C<bless>ing into the package. Hence if you
d1060 1
a1060 1
magic. However, the magic which implements overloading is applied to
d1077 1
a1077 1
There is no size penalty for data if overload is not used. The only
d1080 1
a1080 1
package. This magic is three-words-long for packages without
a1082 5
Copying (C<$a=$b>) is shallow; however, a one-level-deep copying is
carried out before any operation that can imply an assignment to the
object $a (or $b) refers to, like C<$a++>.  You can override this
behavior by defining your own copy constructor (see L<"Copy Constructor">).

d1086 1
a1086 66
=head1 Metaphor clash

One may wonder why the semantic of overloaded C<=> is so counter intuitive.
If it I<looks> counter intuitive to you, you are subject to a metaphor
clash.

Here is a Perl object metaphor:

I<  object is a reference to blessed data>

and an arithmetic metaphor:

I<  object is a thing by itself>.

The I<main> problem of overloading C<=> is the fact that these metaphors
imply different actions on the assignment C<$a = $b> if $a and $b are
objects.  Perl-think implies that $a becomes a reference to whatever
$b was referencing.  Arithmetic-think implies that the value of "object"
$a is changed to become the value of the object $b, preserving the fact
that $a and $b are separate entities.

The difference is not relevant in the absence of mutators.  After
a Perl-way assignment an operation which mutates the data referenced by $a
would change the data referenced by $b too.  Effectively, after
C<$a = $b> values of $a and $b become I<indistinguishable>.

On the other hand, anyone who has used algebraic notation knows the
expressive power of the arithmetic metaphor.  Overloading works hard
to enable this metaphor while preserving the Perlian way as far as
possible.  Since it is not possible to freely mix two contradicting
metaphors, overloading allows the arithmetic way to write things I<as
far as all the mutators are called via overloaded access only>.  The
way it is done is described in L<Copy Constructor>.

If some mutator methods are directly applied to the overloaded values,
one may need to I<explicitly unlink> other values which references the
same value:

    $a = Data->new(23);
    ...
    $b = $a;		# $b is "linked" to $a
    ...
    $a = $a->clone;	# Unlink $b from $a
    $a->increment_by(4);

Note that overloaded access makes this transparent:

    $a = Data->new(23);
    $b = $a;		# $b is "linked" to $a
    $a += 4;		# would unlink $b automagically

However, it would not make

    $a = Data->new(23);
    $a = 4;		# Now $a is a plain 4, not 'Data'

preserve "objectness" of $a.  But Perl I<has> a way to make assignments
to an object do whatever you want.  It is just not the overload, but
tie()ing interface (see L<perlfunc/tie>).  Adding a FETCH() method
which returns the object itself, and STORE() method which changes the
value of the object, one can reproduce the arithmetic metaphor in its
completeness, at least for variables which were tie()d from the start.

(Note that a workaround for a bug may be needed, see L<"BUGS">.)

=head1 Cookbook
d1090 1
a1090 1
=head2 Two-face scalars
d1106 1
a1106 1
  print "seven contains `i'\n" if $seven =~ /i/;
d1112 1
a1112 1
  seven contains `i'
d1114 1
a1114 1
=head2 Two-face references
d1238 1
a1238 1
=head2 Symbolic calculator
d1253 2
a1254 2
provide any usual overloaded operators, instead it provides the L<Last
Resort> operator C<nomethod>.  In this example the corresponding
d1393 1
a1393 1
    $cnt = $cnt - 1;		# Mutator `--' not implemented
d1423 1
a1423 1
    print "defining `$op'\n";
d1427 7
a1433 5
Due to L<Calling Conventions for Mutators>, we do not need anything
special to make C<+=> and friends work, except filling C<+=> entry of
%subr, and defining a copy constructor (needed since Perl has no
way to know that the implementation of C<'+='> does not mutate
the argument, compare L<Copy Constructor>).
d1495 1
a1495 1
=head2 I<Really> symbolic calculator
d1523 1
a1523 1
package C<symbolic> (compare with L<Metaphor clash>).  Add methods
d1529 2
a1530 1
(the bug is described in L<"BUGS">).  One can use this new interface as
d1564 2
a1565 2
The L<overloading> pragma can be used to enable or disable overloaded
operations within a lexical scope.
d1574 2
a1575 2
this overloading). Say, if C<eq> is overloaded, then the method C<(eq>
is shown by debugger. The method C<()> corresponds to the C<fallback>
d1589 1
a1589 1
=item `%s' is not an overloadable type
d1593 1
a1593 1
=item `%s' is not a code reference
d1596 1
a1596 1
to be a code reference. Either an anonymous subroutine, or a reference
d1599 5
d1606 1
a1606 1
=head1 BUGS
d1608 75
a1682 3
Because it is used for overloading, the per-package hash %OVERLOAD now
has a special meaning in Perl. The symbol table is filled with names
looking like line-noise.
d1685 1
a1685 1
C<fallback> is present (possibly undefined). This may create
d1689 1
a1689 2
Relation between overloading and tie()ing is broken.  Overloading is
triggered or not basing on the I<previous> class of tie()d value.
d1691 9
a1699 3
This happens because the presence of overloading is checked too early,
before any tie()d access is attempted.  If the FETCH()ed class of the
tie()d value does not change, a simple workaround is to access the value
d1703 1
a1703 1
B<Needed:> a way to fix this without a speed penalty.
d1707 1
a1707 2
This document is confusing.  There are grammos and misleading language
used in places.  It would seem a total rewrite is needed.
@


1.11
log
@Merge in perl 5.10.1
@
text
@d3 1
a3 1
our $VERSION = '1.07';
d12 1
d108 4
d138 1
a138 1
	 conversion	  => 'bool "" 0+',
d140 1
d403 1
a403 1
=item * I<Boolean, string and numeric conversion>
d405 1
a405 1
    'bool', '""', '0+',
d407 10
a416 5
If one or two of these operations are not overloaded, the remaining ones can
be used instead.  C<bool> is used in the flow control operators
(like C<while>) and for the ternary C<?:> operation.  These functions can
return any arbitrary Perl value.  If the corresponding operation for this value
is overloaded too, that operation will be called again with this value.
d435 23
d526 1
a526 1
 conversion	  => 'bool "" 0+',
d528 1
d701 2
a702 2
String, numeric, and boolean conversion are calculated in terms of one
another if not all of them are defined.
@


1.10
log
@fix conflicts and merge in local changes to perl 5.10.0
@
text
@d3 1
a3 1
our $VERSION = '1.06';
d136 1
d150 1
a150 1
    elsif (!ref $_ [1] || "$_[1]" !~ /CODE\(0x[\da-f]+\)$/) {
d194 1
a194 1
    $a = new SomeThing 57;
d203 3
d424 31
d471 1
a471 1
    "nomethod", "fallback", "=", "~~",
d495 1
a591 5
=head2 Smart Match

The key C<"~~"> allows you to override the smart matching used by
the switch construct. See L<feature>.

d622 2
a623 1
string copy if the object is a plain scalar.
d710 2
a711 1
value is a scalar and not a reference.
d932 1
a932 1
    $a = new Data 23;
d941 1
a941 1
    $a = new Data 23;
d947 1
a947 1
    $a = new Data 23;
d977 1
a977 1
  my $seven = new two_face ("vii", 7);
d1024 1
a1024 1
  my $bar = new two_refs 3,4,5,6;
d1129 2
a1130 2
the objects: C<new symbolic 3> contains C<['n', 3]>, C<2 + new
symbolic 3> contains C<['+', 2, ['n', 3]]>.
d1137 1
a1137 1
  my $side = new symbolic 1;
d1261 2
a1262 2
  my $iter = new symbolic 2;	# 16-gon
  my $side = new symbolic 1;
d1382 2
a1383 2
  my $a = new symbolic 3;
  my $b = new symbolic 4;
d1431 5
@


1.9
log
@merge in perl 5.8.8
@
text
@d3 1
a3 3
our $VERSION = '1.04';

$overload::hint_bits = 0x20000; # HINT_LOCALIZE_HH
d75 7
a81 1
  $package = ref $package if ref $package;
d92 8
a99 6
	require Scalar::Util;
	my $class = Scalar::Util::blessed($_[0]);
	my $class_prefix = defined($class) ? "$class=" : "";
	my $type = Scalar::Util::reftype($_[0]);
	my $addr = Scalar::Util::refaddr($_[0]);
	return sprintf("$class_prefix$type(0x%x)", $addr);
d106 5
a110 5
  return \*{$package . "::$meth"} if defined &{$package . "::$meth"};
  my $p;
  foreach $p (@@{$package . "::ISA"}) {
    my $out = mycan($p, $meth);
    return $out if $out;
d112 1
d129 1
a129 1
	 binary		  => "& | ^",
d159 1
a159 1
        $^H |= $constants{$_[0]} | $overload::hint_bits;
d362 1
a362 1
    "&", "^", "|", "neg", "!", "~",
d369 4
d436 1
a436 1
    "nomethod", "fallback", "=",
d453 1
a453 1
 binary		  => '& | ^',
d556 5
d682 17
a813 3
B<BUGS> Currently overloaded-ness of constants does not propagate
into C<eval '...'>.

d957 1
a957 4
array reference and a hash reference, similar to the
L<pseudo-hash|perlref/"Pseudo-hashes: Using an array as a hash">
builtin Perl type.  Let's make it better than a pseudo-hash by
allowing index 0 to be treated as a normal element.
d1119 1
a1119 1
be inspected in debugger (see L<perldebug>), but ony if
@


1.8
log
@sync in-tree perl with 5.8.6
@
text
@d3 1
a3 1
our $VERSION = '1.02';
d96 1
a96 5
sub StrVal {
  (ref $_[0] && OverloadedStringify($_[0]) or ref($_[0]) eq 'Regexp') ?
    (AddrRef(shift)) :
    "$_[0]";
}
d173 1
a173 1
overload - Package for overloading perl operations
d720 3
a722 3
For some application Perl parser mangles constants too much.  It is possible
to hook into this process via overload::constant() and overload::remove_constant()
functions.
d725 1
a725 1
are
@


1.7
log
@Resolve conflicts for perl 5.8.2, remove old files, and add OpenBSD-specific scaffolding
@
text
@d3 1
a3 1
our $VERSION = '1.01';
d707 4
a710 1
Gives string value of C<arg> as in absence of stringify overloading.
@


1.6
log
@Resolve conflicts, remove old files, merge local changes
@
text
@d3 1
a3 1
our $VERSION = '1.00';
d5 1
a5 1
$overload::hint_bits = 0x20000;
d87 7
a93 4
  bless $_[0], overload::Fake;	# Non-overloaded package
  my $str = "$_[0]";
  bless $_[0], $package;	# Back
  $package . substr $str, index $str, '=';
d114 5
a118 5
	      'integer'	  =>  0x1000,
	      'float'	  =>  0x2000,
	      'binary'	  =>  0x4000,
	      'q'	  =>  0x8000,
	      'qr'	  => 0x10000,
@


1.5
log
@merge in perl 5.6.1 with our local changes
@
text
@d3 2
d94 1
a94 1
  (OverloadedStringify($_[0]) or ref($_[0]) eq 'Regexp') ?
d126 1
a126 1
	 func		  => "atan2 cos sin exp abs log sqrt",
d301 1
a301 1
B<Warning.>  Due to the presense of assignment versions of operations,
d336 3
a338 3
the assignment variant is not available.  Methods for operations "C<+>",
"C<->", "C<+=>", and "C<-=>" can be called to automatically generate
increment and decrement methods.  The operation "C<->" can be used to
d358 1
a358 1
"C<neg>" stands for unary minus.  If the method for C<neg> is not
d360 2
a361 2
subtraction. If the method for "C<!>" is not specified, it can be
autogenerated using the methods for "C<bool>", or "C<\"\">", or "C<0+>".
d373 1
a373 1
    "atan2", "cos", "sin", "exp", "abs", "log", "sqrt",
d378 5
d385 1
a385 1
    "bool", "\"\"", "0+",
d389 1
a389 1
(like C<while>) and for the ternary "C<?:>" operation.  These functions can
d407 3
d858 1
a858 1
possible.  Since it is not not possible to freely mix two contradicting
d975 1
a975 1
would would lead to a memory leak.
d1141 1
a1141 1
Something is is still amiss: consider the loop variable $cnt of the
@


1.4
log
@perl-5.6.0 + local changes
@
text
@d109 1
a109 1
	      'integer'	  =>  0x1000, 
d130 1
d134 19
a152 2
    $^H{$_[0]} = $_[1];
    $^H |= $constants{$_[0]} | $overload::hint_bits;
d170 1
a170 1
=head1 NAME 
d178 1
a178 1
    use overload 
d200 1
a200 1
	"+" => \&add, 
d205 1
a205 1
for the assignment form C<*=> of multiplication.  
d300 2
a301 2
routines which may be called in assignment context may create 
self-referential structures.  Currently Perl will not free self-referential 
d305 1
a305 1
Say, 
d310 1
a310 1
is called as C<$obj = add($obj, $foo, undef)>, or C<$obj = [\$obj, 
d313 1
a313 1
to non-optimized version if C<not defined $_[2]> (see 
d386 5
d408 6
d496 4
d504 2
a505 1
=head2 Fallback 
d529 1
a529 1
C<"nomethod"> value, and if this is missing, raises an exception. 
d547 1
a547 1
	$a=$b; 
d558 1
a558 1
	$a=$b; 
d572 1
a572 1
The actually executed code for 
d574 1
a574 1
	$a=$b; 
d580 1
a580 1
	$a=$b; 
d607 1
a607 1
=item I<Conversion operations> 
d634 1
a634 1
=item I<Comparison operations> 
d742 1
a742 1
is how Perl interprets this constant, the third one is how the constant is used.  
d744 1
a744 1
contain string delimiters, and has backslashes in backslash-delimiter 
d746 1
a746 1
processing of this string).  The return value of this function is how this 
d750 1
a750 1
documents), it is C<tr> for arguments of C<tr>/C<y> operators, 
d755 1
a755 1
overloaded catenation operator, otherwise absurd results will result.  
d769 1
a769 1
B<BUGS> Currently overloaded-ness of constants does not propagate 
d811 1
a811 1
Copying (C<$a=$b>) is shallow; however, a one-level-deep copying is 
d822 2
a823 2
If it I<looks> counter intuitive to you, you are subject to a metaphor 
clash.  
d842 1
a842 1
would change the data referenced by $b too.  Effectively, after 
d845 1
a845 1
On the other hand, anyone who has used algebraic notation knows the 
d854 1
a854 1
one may need to I<explicitly unlink> other values which references the 
d878 1
a878 1
which returns the object itself, and STORE() method which changes the 
d915 4
a918 5
array reference, and a hash reference, similar to the builtin
L<array-accessible-as-a-hash|perlref/"Pseudo-hashes: Using an array as
a hash"> builtin Perl type.  Let us make it better than the builtin
type, there will be no restriction that you cannot use the index 0 of
your array.
d922 2
a923 2
  sub new { 
    my $p = shift; 
d937 1
a937 1
  sub STORE { 
d943 1
a943 1
  sub FETCH { 
d970 1
a970 1
this I<actual> hash (as opposed to the I<virtual> exhibited by
d976 1
a976 1
    bless $self, 'overload::dummy'; # Disable overloading of %{} 
d982 1
a982 1
To move creation of the tied hash on each access, one may an extra
d988 2
a989 2
  sub new { 
    my $p = shift; 
d1006 1
a1006 1
  sub STORE { 
d1012 1
a1012 1
  sub FETCH { 
d1019 1
a1019 1
Now if $baz is overloaded like this, then C<$bar> is a reference to a
d1022 1
a1022 1
hash is also a reference to a reference to the actual array, so 
d1097 1
a1097 1
  } 
d1109 1
a1109 1
will look for an overloaded operator C<.>, if not present, it will
d1118 1
a1118 1
  } 
d1129 1
a1129 1
methods.  
d1163 3
a1165 3
  } 
  my %subr = ( n => sub {$_[0]}, 
	       sqrt => sub {sqrt $_[0]}, 
d1174 1
a1174 1
    my $subr = $subr{$meth} 
d1212 1
a1212 1
To implement most arithmetic operations is easy, one should just use
d1234 1
a1234 1
To implement a copy constructor, add C<'=' => \&cpy> to C<use overload>
d1243 1
a1243 1
To make C<++> and C<--> work, we need to implement actual mutators, 
d1252 1
a1252 1
after the first line of wrap().  This is not a most effective 
d1275 2
a1276 2
This finishes implementation of a primitive symbolic calculator in 
50 lines of Perl code.  Since the numeric values of subexpressions 
d1302 3
a1304 3
  sub STORE { 
    my $obj = shift; 
    $#$obj = 1; 
d1373 21
d1405 1
a1405 1
Relation between overloading and tie()ing is broken.  Overloading is 
d1408 1
a1408 1
This happens because the presence of overloading is checked too early, 
d1410 1
a1410 1
tie()d value does not change, a simple workaround is to access the value 
@


1.3
log
@perl5.005_03 (stock)
@
text
@d3 2
d92 1
a92 1
  (OverloadedStringify($_[0])) ?
d118 1
a118 1
	 str_comparison	  => "< <= >  >= == !=",
d120 1
a120 1
	 num_comparison	  => "lt le gt ge eq ne",
d126 2
d134 1
a134 1
    $^H |= $constants{$_[0]} | 0x20000;
d362 1
a362 1
If one or two of these operations are unavailable, the remaining ones can
d368 17
d401 1
a401 1
 str_comparison	  => '< <= > >= == !=',
d403 1
a403 1
 num_comparison	  => 'lt le gt ge eq ne',
d409 2
d608 8
d878 128
d1034 1
a1034 1
  
d1159 1
a1159 1
  
@


1.2
log
@perl 5.004_04
@
text
@d65 4
a68 1
  ov_method mycan($package, '(""'), $package;
d106 38
a169 7
=head1 CAVEAT SCRIPTOR

Overloading of operators is a subject not to be taken lightly.
Neither its precise implementation, syntax, nor semantics are
100% endorsed by Larry Wall.  So any of these may be changed 
at some point in the future.

d231 2
a232 1
information can be used to generate some optimizations.
d242 58
d302 1
a302 1
The following symbols can be specified in C<use overload>:
d317 4
d372 17
a388 1
See L<"Fallback"> for an explanation of when a missing method can be autogenerated.
d491 1
a491 1
	$a++;
d495 1
a495 1
done during execution of the C<$a++>, and not during the assignment,
d497 3
a499 3
done if C<++> is expressed via a method for C<'++'> or C<'+='>.  Note
that if this operation is expressed via C<'+'> a nonmutator, i.e., as
in
d533 3
d592 1
a592 1
=head1 WARNING
d641 66
d744 1
a744 1
overloading, and carries the cache tabel if the package is overloaded.
d754 410
d1179 1
a1179 1
function).
d1192 15
a1206 1
This document is confusing.
@


1.1
log
@Initial revision
@
text
@d3 2
d8 3
a10 1
  my $hash = \%{$package . "::OVERLOAD"};
d12 11
a22 1
    $hash->{$_} = $arg{$_};
d24 1
d36 1
a36 1
  my $hash = \%{$package . "::OVERLOAD"};
d39 5
a43 1
    delete $hash->{$_};
d48 11
a58 1
  defined ($package = ref $_[0]) and defined %{$package . "::OVERLOAD"};
d62 4
a65 4
  defined ($package = ref $_[0]) and 
    defined %{$package . "::OVERLOAD"} and 
      exists $ {$package . "::OVERLOAD"}{'""'} and
	defined &{$ {$package . "::OVERLOAD"}{'""'}};
d69 6
a74 3
  defined ($package = ref $_[0]) and 
    defined %{$package . "::OVERLOAD"} and 
      $ {$package . "::OVERLOAD"}{$_[1]};
d78 3
a80 2
  $package = ref $_[0];
  bless $_[0], Overload::Fake;	# Non-overloaded package
d83 1
a83 1
  $str;
d87 2
a88 2
  (OverloadedStringify) ?
    (AddrRef) :
d92 11
d152 4
a155 3
are values legal inside a C<&{ ... }> call, so the name of a subroutine,
a reference to a subroutine, or an anonymous subroutine will all work.
Legal keys are listed below.
d165 4
d238 3
a240 1
specified, it can be autogenerated using the method for subtraction.
d255 1
a255 1
for "<" or "<=>" combined with either unary minus or subtraction.
d277 34
d316 1
a316 1
=head2  Last Resort
d363 3
d452 5
d465 1
a465 1
 
d529 15
a543 10
The table of methods for all operations is cached as magic in the
symbol table hash for the package.  The table is rechecked for changes due to
C<use overload>, C<no overload>, and @@ISA only during
C<bless>ing; so if they are changed dynamically, you'll need an
additional fake C<bless>ing to update the table.

(Every SVish thing has a magic queue, and magic is an entry in that queue.
This is how a single variable may participate in multiple forms of magic
simultaneously.  For instance, environment variables regularly have two
forms at once: their %ENV magic and their taint magic.)
d549 14
a562 10
In fact, if C<use overload> is not present, there is almost no overhead for
overloadable operations, so most programs should not suffer measurable
performance penalties.  A considerable effort was made to minimize the overhead
when overload is used and the current operation is overloadable but
the arguments in question do not belong to packages using overload.  When
in doubt, test your speed with C<use overload> and without it.  So far there
have been no reports of substantial speed degradation if Perl is compiled
with optimization turned on.

There is no size penalty for data if overload is not used. 
d574 1
a574 1
Ilya Zakharevich <F<ilya@@math.mps.ohio-state.edu>>.
d581 8
d591 8
a598 4
Because it is used for overloading, the per-package associative array
%OVERLOAD now has a special meaning in Perl.

As shipped, mathemagical properties are not inherited via the @@ISA tree.
@


1.1.1.1
log
@Import of Perl 5.003 into the tree.  Makefile.bsd-wrapper and
config.sh.OpenBSD are the only local changes.
@
text
@@


1.1.1.2
log
@perl5.005_03
@
text
@a2 2
sub nil {}

d6 1
a6 3
  my ($sub, $fb);
  $ {$package . "::OVERLOAD"}{dummy}++; # Register with magic by touching.
  *{$package . "::()"} = \&nil; # Make it findable via fetchmethod.
d8 1
a8 11
    if ($_ eq 'fallback') {
      $fb = $arg{$_};
    } else {
      $sub = $arg{$_};
      if (not ref $sub and $sub !~ /::/) {
	$ {$package . "::(" . $_} = $sub;
	$sub = \&nil;
      }
      #print STDERR "Setting `$ {'package'}::\cO$_' to \\&`$sub'.\n";
      *{$package . "::(" . $_} = \&{ $sub };
    }
a9 1
  ${$package . "::()"} = $fb; # Make it findable too (fallback only).
d21 1
a21 1
  ${$package . "::OVERLOAD"}{dummy}++; # Upgrade the table
d24 1
a24 5
    if ($_ eq 'fallback') {
      undef $ {$package . "::()"};
    } else {
      delete $ {$package . "::"}{"(" . $_};
    }
d29 1
a29 11
  my $package = shift;
  $package = ref $package if ref $package;
  $package->can('()');
}

sub ov_method {
  my $globref = shift;
  return undef unless $globref;
  my $sub = \&{*$globref};
  return $sub if $sub ne \&nil;
  return shift->can($ {*$globref});
d33 4
a36 7
  my $package = shift;
  $package = ref $package if ref $package;
  #$package->can('(""')
  ov_method mycan($package, '(""'), $package
    or ov_method mycan($package, '(0+'), $package
    or ov_method mycan($package, '(bool'), $package
    or ov_method mycan($package, '(nomethod'), $package;
d40 3
a42 6
  my $package = shift;
  $package = ref $package if ref $package;
  #my $meth = $package->can('(' . shift);
  ov_method mycan($package, '(' . shift), $package;
  #return $meth if $meth ne \&nil;
  #return $ {*{$meth}};
d46 2
a47 3
  my $package = ref $_[0];
  return "$_[0]" unless $package;
  bless $_[0], overload::Fake;	# Non-overloaded package
d50 1
a50 1
  $package . substr $str, index $str, '=';
d54 2
a55 2
  (OverloadedStringify($_[0])) ?
    (AddrRef(shift)) :
a58 49
sub mycan {				# Real can would leave stubs.
  my ($package, $meth) = @@_;
  return \*{$package . "::$meth"} if defined &{$package . "::$meth"};
  my $p;
  foreach $p (@@{$package . "::ISA"}) {
    my $out = mycan($p, $meth);
    return $out if $out;
  }
  return undef;
}

%constants = (
	      'integer'	  =>  0x1000, 
	      'float'	  =>  0x2000,
	      'binary'	  =>  0x4000,
	      'q'	  =>  0x8000,
	      'qr'	  => 0x10000,
	     );

%ops = ( with_assign	  => "+ - * / % ** << >> x .",
	 assign		  => "+= -= *= /= %= **= <<= >>= x= .=",
	 str_comparison	  => "< <= >  >= == !=",
	 '3way_comparison'=> "<=> cmp",
	 num_comparison	  => "lt le gt ge eq ne",
	 binary		  => "& | ^",
	 unary		  => "neg ! ~",
	 mutators	  => '++ --',
	 func		  => "atan2 cos sin exp abs log sqrt",
	 conversion	  => 'bool "" 0+',
	 special	  => 'nomethod fallback =');

sub constant {
  # Arguments: what, sub
  while (@@_) {
    $^H{$_[0]} = $_[1];
    $^H |= $constants{$_[0]} | 0x20000;
    shift, shift;
  }
}

sub remove_constant {
  # Arguments: what, sub
  while (@@_) {
    delete $^H{$_[0]};
    $^H &= ~ $constants{$_[0]};
    shift, shift;
  }
}

d85 7
d108 3
a110 4
are values legal inside a C<&{ ... }> call, so the name of a
subroutine, a reference to a subroutine, or an anonymous subroutine
will all work.  Note that values specified as strings are
interpreted as methods, not subroutines.  Legal keys are listed below.
a119 4
Since overloading respects inheritance via the @@ISA hierarchy, the
above declaration would also trigger overloading of C<+> and C<*=> in
all the packages which inherit from C<Number>.

d148 1
a148 2
information can be used to generate some optimizations.  Compare
L<Calling Conventions for Mutators>.
a157 58
=head2 Calling Conventions for Mutators

Two types of mutators have different calling conventions:

=over

=item C<++> and C<-->

The routines which implement these operators are expected to actually
I<mutate> their arguments.  So, assuming that $obj is a reference to a
number,

  sub incr { my $n = $ {$_[0]}; ++$n; $_[0] = bless \$n}

is an appropriate implementation of overloaded C<++>.  Note that

  sub incr { ++$ {$_[0]} ; shift }

is OK if used with preincrement and with postincrement. (In the case
of postincrement a copying will be performed, see L<Copy Constructor>.)

=item C<x=> and other assignment versions

There is nothing special about these methods.  They may change the
value of their arguments, and may leave it as is.  The result is going
to be assigned to the value in the left-hand-side if different from
this value.

This allows for the same method to be used as overloaded C<+=> and
C<+>.  Note that this is I<allowed>, but not recommended, since by the
semantic of L<"Fallback"> Perl will call the method for C<+> anyway,
if C<+=> is not overloaded.

=back

B<Warning.>  Due to the presense of assignment versions of operations,
routines which may be called in assignment context may create 
self-referential structures.  Currently Perl will not free self-referential 
structures until cycles are C<explicitly> broken.  You may get problems
when traversing your structures too.

Say, 

  use overload '+' => sub { bless [ \$_[0], \$_[1] ] };

is asking for trouble, since for code C<$obj += $foo> the subroutine
is called as C<$obj = add($obj, $foo, undef)>, or C<$obj = [\$obj, 
\$foo]>.  If using such a subroutine is an important optimization, one
can overload C<+=> explicitly by a non-"optimized" version, or switch
to non-optimized version if C<not defined $_[2]> (see 
L<Calling Conventions for Binary Operations>).

Even if no I<explicit> assignment-variants of operators are present in
the script, they may be generated by the optimizer.  Say, C<",$obj,"> or
C<',' . $obj . ','> may be both optimized to

  my $tmp = ',' . $obj;    $tmp .= ',';

d160 1
a160 1
The following symbols can be specified in C<use overload> directive:
a174 4
See L<"MAGIC AUTOGENERATION">, L<"Calling Conventions for Mutators"> and
L<"Calling Conventions for Binary Operations">) for details of these
substitutions.

d189 1
a189 3
specified, it can be autogenerated using the method for
subtraction. If the method for "C<!>" is not specified, it can be
autogenerated using the methods for "C<bool>", or "C<\"\">", or "C<0+>".
d204 1
a204 1
for "E<lt>" or "E<lt>=E<gt>" combined with either unary minus or subtraction.
d224 1
a224 51
See L<"Fallback"> for an explanation of when a missing method can be
autogenerated.

A computer-readable form of the above table is available in the hash
%overload::ops, with values being space-separated lists of names:

 with_assign	  => '+ - * / % ** << >> x .',
 assign		  => '+= -= *= /= %= **= <<= >>= x= .=',
 str_comparison	  => '< <= > >= == !=',
 '3way_comparison'=> '<=> cmp',
 num_comparison	  => 'lt le gt ge eq ne',
 binary		  => '& | ^',
 unary		  => 'neg ! ~',
 mutators	  => '++ --',
 func		  => 'atan2 cos sin exp abs log sqrt',
 conversion	  => 'bool "" 0+',
 special	  => 'nomethod fallback ='

=head2 Inheritance and overloading

Inheritance interacts with overloading in two ways.

=over

=item Strings as values of C<use overload> directive

If C<value> in

  use overload key => value;

is a string, it is interpreted as a method name.

=item Overloading of an operation is inherited by derived classes

Any class derived from an overloaded class is also overloaded.  The
set of overloaded methods is the union of overloaded methods of all
the ancestors. If some method is overloaded in several ancestor, then
which description will be used is decided by the usual inheritance
rules:

If C<A> inherits from C<B> and C<C> (in this order), C<B> overloads
C<+> with C<\&D::plus_sub>, and C<C> overloads C<+> by C<"plus_meth">,
then the subroutine C<D::plus_sub> will be called to implement
operation C<+> for an object in package C<A>.

=back

Note that since the value of the C<fallback> key is not a subroutine,
its inheritance is not governed by the above rules.  In the current
implementation, the value of C<fallback> in the first overloaded
ancestor is used, but this is accidental and subject to change.
d231 1
a231 1
=head2 Last Resort
a277 3
B<Note.> C<"fallback"> inheritance via @@ISA is not carved in stone
yet, see L<"Inheritance and overloading">.

d290 1
a290 1
	++$a;
d294 1
a294 1
done during execution of the C<++$a>, and not during the assignment,
d296 3
a298 3
done if C<++> is expressed via a method for C<'++'> or C<'+='> (or
C<nomethod>).  Note that if this operation is expressed via C<'+'>
a nonmutator, i.e., as in
a331 3
Same behaviour is triggered by C<$b = $a++>, which is consider a synonym for
C<$b = $a; ++$a>.

a363 5
=item I<Negation>

C<!> and C<not> can be expressed in terms of boolean conversion, or
string or numerical conversion.

d372 1
a372 1

d383 1
a383 1
=head1 Losing overloading
a431 66
=head1 Overloading constants

For some application Perl parser mangles constants too much.  It is possible
to hook into this process via overload::constant() and overload::remove_constant()
functions.

These functions take a hash as an argument.  The recognized keys of this hash
are

=over 8

=item integer

to overload integer constants,

=item float

to overload floating point constants,

=item binary

to overload octal and hexadecimal constants,

=item q

to overload C<q>-quoted strings, constant pieces of C<qq>- and C<qx>-quoted
strings and here-documents,

=item qr

to overload constant pieces of regular expressions.

=back

The corresponding values are references to functions which take three arguments:
the first one is the I<initial> string form of the constant, the second one
is how Perl interprets this constant, the third one is how the constant is used.  
Note that the initial string form does not
contain string delimiters, and has backslashes in backslash-delimiter 
combinations stripped (thus the value of delimiter is not relevant for
processing of this string).  The return value of this function is how this 
constant is going to be interpreted by Perl.  The third argument is undefined
unless for overloaded C<q>- and C<qr>- constants, it is C<q> in single-quote
context (comes from strings, regular expressions, and single-quote HERE
documents), it is C<tr> for arguments of C<tr>/C<y> operators, 
it is C<s> for right-hand side of C<s>-operator, and it is C<qq> otherwise.

Since an expression C<"ab$cd,,"> is just a shortcut for C<'ab' . $cd . ',,'>,
it is expected that overloaded constant strings are equipped with reasonable
overloaded catenation operator, otherwise absurd results will result.  
Similarly, negative numbers are considered as negations of positive constants.

Note that it is probably meaningless to call the functions overload::constant()
and overload::remove_constant() from anywhere but import() and unimport() methods.
From these methods they may be called as

	sub import {
	  shift;
	  return unless @@_;
	  die "unknown import: @@_" unless @@_ == 1 and $_[0] eq ':constant';
	  overload::constant integer => sub {Math::BigInt->new(shift)};
	}

B<BUGS> Currently overloaded-ness of constants does not propagate 
into C<eval '...'>.

d436 10
a445 15
The table of methods for all operations is cached in magic for the
symbol table hash for the package.  The cache is invalidated during
processing of C<use overload>, C<no overload>, new function
definitions, and changes in @@ISA. However, this invalidation remains
unprocessed until the next C<bless>ing into the package. Hence if you
want to change overloading structure dynamically, you'll need an
additional (fake) C<bless>ing to update the table.

(Every SVish thing has a magic queue, and magic is an entry in that
queue.  This is how a single variable may participate in multiple
forms of magic simultaneously.  For instance, environment variables
regularly have two forms at once: their %ENV magic and their taint
magic. However, the magic which implements overloading is applied to
the stashes, which are rarely used directly, thus should not slow down
Perl.)
d451 10
a460 14
In fact, if C<use overload> is not present, there is almost no overhead
for overloadable operations, so most programs should not suffer
measurable performance penalties.  A considerable effort was made to
minimize the overhead when overload is used in some package, but the
arguments in question do not belong to packages using overload.  When
in doubt, test your speed with C<use overload> and without it.  So far
there have been no reports of substantial speed degradation if Perl is
compiled with optimization turned on.

There is no size penalty for data if overload is not used. The only
size penalty if overload is used in some package is that I<all> the
packages acquire a magic during the next C<bless>ing into the
package. This magic is three-words-long for packages without
overloading, and carries the cache table if the package is overloaded.
a469 410
=head1 Metaphor clash

One may wonder why the semantic of overloaded C<=> is so counter intuitive.
If it I<looks> counter intuitive to you, you are subject to a metaphor 
clash.  

Here is a Perl object metaphor:

I<  object is a reference to blessed data>

and an arithmetic metaphor:

I<  object is a thing by itself>.

The I<main> problem of overloading C<=> is the fact that these metaphors
imply different actions on the assignment C<$a = $b> if $a and $b are
objects.  Perl-think implies that $a becomes a reference to whatever
$b was referencing.  Arithmetic-think implies that the value of "object"
$a is changed to become the value of the object $b, preserving the fact
that $a and $b are separate entities.

The difference is not relevant in the absence of mutators.  After
a Perl-way assignment an operation which mutates the data referenced by $a
would change the data referenced by $b too.  Effectively, after 
C<$a = $b> values of $a and $b become I<indistinguishable>.

On the other hand, anyone who has used algebraic notation knows the 
expressive power of the arithmetic metaphor.  Overloading works hard
to enable this metaphor while preserving the Perlian way as far as
possible.  Since it is not not possible to freely mix two contradicting
metaphors, overloading allows the arithmetic way to write things I<as
far as all the mutators are called via overloaded access only>.  The
way it is done is described in L<Copy Constructor>.

If some mutator methods are directly applied to the overloaded values,
one may need to I<explicitly unlink> other values which references the 
same value:

    $a = new Data 23;
    ...
    $b = $a;		# $b is "linked" to $a
    ...
    $a = $a->clone;	# Unlink $b from $a
    $a->increment_by(4);

Note that overloaded access makes this transparent:

    $a = new Data 23;
    $b = $a;		# $b is "linked" to $a
    $a += 4;		# would unlink $b automagically

However, it would not make

    $a = new Data 23;
    $a = 4;		# Now $a is a plain 4, not 'Data'

preserve "objectness" of $a.  But Perl I<has> a way to make assignments
to an object do whatever you want.  It is just not the overload, but
tie()ing interface (see L<perlfunc/tie>).  Adding a FETCH() method
which returns the object itself, and STORE() method which changes the 
value of the object, one can reproduce the arithmetic metaphor in its
completeness, at least for variables which were tie()d from the start.

(Note that a workaround for a bug may be needed, see L<"BUGS">.)

=head1 Cookbook

Please add examples to what follows!

=head2 Two-face scalars

Put this in F<two_face.pm> in your Perl library directory:

  package two_face;		# Scalars with separate string and
                                # numeric values.
  sub new { my $p = shift; bless [@@_], $p }
  use overload '""' => \&str, '0+' => \&num, fallback => 1;
  sub num {shift->[1]}
  sub str {shift->[0]}

Use it as follows:

  require two_face;
  my $seven = new two_face ("vii", 7);
  printf "seven=$seven, seven=%d, eight=%d\n", $seven, $seven+1;
  print "seven contains `i'\n" if $seven =~ /i/;

(The second line creates a scalar which has both a string value, and a
numeric value.)  This prints:

  seven=vii, seven=7, eight=8
  seven contains `i'

=head2 Symbolic calculator

Put this in F<symbolic.pm> in your Perl library directory:

  package symbolic;		# Primitive symbolic calculator
  use overload nomethod => \&wrap;

  sub new { shift; bless ['n', @@_] }
  sub wrap {
    my ($obj, $other, $inv, $meth) = @@_;
    ($obj, $other) = ($other, $obj) if $inv;
    bless [$meth, $obj, $other];
  }

This module is very unusual as overloaded modules go: it does not
provide any usual overloaded operators, instead it provides the L<Last
Resort> operator C<nomethod>.  In this example the corresponding
subroutine returns an object which encapsulates operations done over
the objects: C<new symbolic 3> contains C<['n', 3]>, C<2 + new
symbolic 3> contains C<['+', 2, ['n', 3]]>.

Here is an example of the script which "calculates" the side of
circumscribed octagon using the above package:

  require symbolic;
  my $iter = 1;			# 2**($iter+2) = 8
  my $side = new symbolic 1;
  my $cnt = $iter;
  
  while ($cnt--) {
    $side = (sqrt(1 + $side**2) - 1)/$side;
  }
  print "OK\n";

The value of $side is

  ['/', ['-', ['sqrt', ['+', 1, ['**', ['n', 1], 2]],
	               undef], 1], ['n', 1]]

Note that while we obtained this value using a nice little script,
there is no simple way to I<use> this value.  In fact this value may
be inspected in debugger (see L<perldebug>), but ony if
C<bareStringify> B<O>ption is set, and not via C<p> command.

If one attempts to print this value, then the overloaded operator
C<""> will be called, which will call C<nomethod> operator.  The
result of this operator will be stringified again, but this result is
again of type C<symbolic>, which will lead to an infinite loop.

Add a pretty-printer method to the module F<symbolic.pm>:

  sub pretty {
    my ($meth, $a, $b) = @@{+shift};
    $a = 'u' unless defined $a;
    $b = 'u' unless defined $b;
    $a = $a->pretty if ref $a;
    $b = $b->pretty if ref $b;
    "[$meth $a $b]";
  } 

Now one can finish the script by

  print "side = ", $side->pretty, "\n";

The method C<pretty> is doing object-to-string conversion, so it
is natural to overload the operator C<""> using this method.  However,
inside such a method it is not necessary to pretty-print the
I<components> $a and $b of an object.  In the above subroutine
C<"[$meth $a $b]"> is a catenation of some strings and components $a
and $b.  If these components use overloading, the catenation operator
will look for an overloaded operator C<.>, if not present, it will
look for an overloaded operator C<"">.  Thus it is enough to use

  use overload nomethod => \&wrap, '""' => \&str;
  sub str {
    my ($meth, $a, $b) = @@{+shift};
    $a = 'u' unless defined $a;
    $b = 'u' unless defined $b;
    "[$meth $a $b]";
  } 

Now one can change the last line of the script to

  print "side = $side\n";

which outputs

  side = [/ [- [sqrt [+ 1 [** [n 1 u] 2]] u] 1] [n 1 u]]

and one can inspect the value in debugger using all the possible
methods.  

Something is is still amiss: consider the loop variable $cnt of the
script.  It was a number, not an object.  We cannot make this value of
type C<symbolic>, since then the loop will not terminate.

Indeed, to terminate the cycle, the $cnt should become false.
However, the operator C<bool> for checking falsity is overloaded (this
time via overloaded C<"">), and returns a long string, thus any object
of type C<symbolic> is true.  To overcome this, we need a way to
compare an object to 0.  In fact, it is easier to write a numeric
conversion routine.

Here is the text of F<symbolic.pm> with such a routine added (and
slightly modified str()):

  package symbolic;		# Primitive symbolic calculator
  use overload
    nomethod => \&wrap, '""' => \&str, '0+' => \&num;

  sub new { shift; bless ['n', @@_] }
  sub wrap {
    my ($obj, $other, $inv, $meth) = @@_;
    ($obj, $other) = ($other, $obj) if $inv;
    bless [$meth, $obj, $other];
  }
  sub str {
    my ($meth, $a, $b) = @@{+shift};
    $a = 'u' unless defined $a;
    if (defined $b) {
      "[$meth $a $b]";
    } else {
      "[$meth $a]";
    }
  } 
  my %subr = ( n => sub {$_[0]}, 
	       sqrt => sub {sqrt $_[0]}, 
	       '-' => sub {shift() - shift()},
	       '+' => sub {shift() + shift()},
	       '/' => sub {shift() / shift()},
	       '*' => sub {shift() * shift()},
	       '**' => sub {shift() ** shift()},
	     );
  sub num {
    my ($meth, $a, $b) = @@{+shift};
    my $subr = $subr{$meth} 
      or die "Do not know how to ($meth) in symbolic";
    $a = $a->num if ref $a eq __PACKAGE__;
    $b = $b->num if ref $b eq __PACKAGE__;
    $subr->($a,$b);
  }

All the work of numeric conversion is done in %subr and num().  Of
course, %subr is not complete, it contains only operators used in the
example below.  Here is the extra-credit question: why do we need an
explicit recursion in num()?  (Answer is at the end of this section.)

Use this module like this:

  require symbolic;
  my $iter = new symbolic 2;	# 16-gon
  my $side = new symbolic 1;
  my $cnt = $iter;
  
  while ($cnt) {
    $cnt = $cnt - 1;		# Mutator `--' not implemented
    $side = (sqrt(1 + $side**2) - 1)/$side;
  }
  printf "%s=%f\n", $side, $side;
  printf "pi=%f\n", $side*(2**($iter+2));

It prints (without so many line breaks)

  [/ [- [sqrt [+ 1 [** [/ [- [sqrt [+ 1 [** [n 1] 2]]] 1]
			  [n 1]] 2]]] 1]
     [/ [- [sqrt [+ 1 [** [n 1] 2]]] 1] [n 1]]]=0.198912
  pi=3.182598

The above module is very primitive.  It does not implement
mutator methods (C<++>, C<-=> and so on), does not do deep copying
(not required without mutators!), and implements only those arithmetic
operations which are used in the example.

To implement most arithmetic operations is easy, one should just use
the tables of operations, and change the code which fills %subr to

  my %subr = ( 'n' => sub {$_[0]} );
  foreach my $op (split " ", $overload::ops{with_assign}) {
    $subr{$op} = $subr{"$op="} = eval "sub {shift() $op shift()}";
  }
  my @@bins = qw(binary 3way_comparison num_comparison str_comparison);
  foreach my $op (split " ", "@@overload::ops{ @@bins }") {
    $subr{$op} = eval "sub {shift() $op shift()}";
  }
  foreach my $op (split " ", "@@overload::ops{qw(unary func)}") {
    print "defining `$op'\n";
    $subr{$op} = eval "sub {$op shift()}";
  }

Due to L<Calling Conventions for Mutators>, we do not need anything
special to make C<+=> and friends work, except filling C<+=> entry of
%subr, and defining a copy constructor (needed since Perl has no
way to know that the implementation of C<'+='> does not mutate
the argument, compare L<Copy Constructor>).

To implement a copy constructor, add C<'=' => \&cpy> to C<use overload>
line, and code (this code assumes that mutators change things one level
deep only, so recursive copying is not needed):

  sub cpy {
    my $self = shift;
    bless [@@$self], ref $self;
  }

To make C<++> and C<--> work, we need to implement actual mutators, 
either directly, or in C<nomethod>.  We continue to do things inside
C<nomethod>, thus add

    if ($meth eq '++' or $meth eq '--') {
      @@$obj = ($meth, (bless [@@$obj]), 1); # Avoid circular reference
      return $obj;
    }

after the first line of wrap().  This is not a most effective 
implementation, one may consider

  sub inc { $_[0] = bless ['++', shift, 1]; }

instead.

As a final remark, note that one can fill %subr by

  my %subr = ( 'n' => sub {$_[0]} );
  foreach my $op (split " ", $overload::ops{with_assign}) {
    $subr{$op} = $subr{"$op="} = eval "sub {shift() $op shift()}";
  }
  my @@bins = qw(binary 3way_comparison num_comparison str_comparison);
  foreach my $op (split " ", "@@overload::ops{ @@bins }") {
    $subr{$op} = eval "sub {shift() $op shift()}";
  }
  foreach my $op (split " ", "@@overload::ops{qw(unary func)}") {
    $subr{$op} = eval "sub {$op shift()}";
  }
  $subr{'++'} = $subr{'+'};
  $subr{'--'} = $subr{'-'};

This finishes implementation of a primitive symbolic calculator in 
50 lines of Perl code.  Since the numeric values of subexpressions 
are not cached, the calculator is very slow.

Here is the answer for the exercise: In the case of str(), we need no
explicit recursion since the overloaded C<.>-operator will fall back
to an existing overloaded operator C<"">.  Overloaded arithmetic
operators I<do not> fall back to numeric conversion if C<fallback> is
not explicitly requested.  Thus without an explicit recursion num()
would convert C<['+', $a, $b]> to C<$a + $b>, which would just rebuild
the argument of num().

If you wonder why defaults for conversion are different for str() and
num(), note how easy it was to write the symbolic calculator.  This
simplicity is due to an appropriate choice of defaults.  One extra
note: due to the explicit recursion num() is more fragile than sym():
we need to explicitly check for the type of $a and $b.  If components
$a and $b happen to be of some related type, this may lead to problems.

=head2 I<Really> symbolic calculator

One may wonder why we call the above calculator symbolic.  The reason
is that the actual calculation of the value of expression is postponed
until the value is I<used>.

To see it in action, add a method

  sub STORE { 
    my $obj = shift; 
    $#$obj = 1; 
    @@$obj->[0,1] = ('=', shift);
  }

to the package C<symbolic>.  After this change one can do

  my $a = new symbolic 3;
  my $b = new symbolic 4;
  my $c = sqrt($a**2 + $b**2);

and the numeric value of $c becomes 5.  However, after calling

  $a->STORE(12);  $b->STORE(5);

the numeric value of $c becomes 13.  There is no doubt now that the module
symbolic provides a I<symbolic> calculator indeed.

To hide the rough edges under the hood, provide a tie()d interface to the
package C<symbolic> (compare with L<Metaphor clash>).  Add methods

  sub TIESCALAR { my $pack = shift; $pack->new(@@_) }
  sub FETCH { shift }
  sub nop {  }		# Around a bug

(the bug is described in L<"BUGS">).  One can use this new interface as

  tie $a, 'symbolic', 3;
  tie $b, 'symbolic', 4;
  $a->nop;  $b->nop;	# Around a bug

  my $c = sqrt($a**2 + $b**2);

Now numeric value of $c is 5.  After C<$a = 12; $b = 5> the numeric value
of $c becomes 13.  To insulate the user of the module add a method

  sub vars { my $p = shift; tie($_, $p), $_->nop foreach @@_; }

Now

  my ($a, $b);
  symbolic->vars($a, $b);
  my $c = sqrt($a**2 + $b**2);

  $a = 3; $b = 4;
  printf "c5  %s=%f\n", $c, $c;

  $a = 12; $b = 5;
  printf "c13  %s=%f\n", $c, $c;

shows that the numeric value of $c follows changes to the values of $a
and $b.

d472 1
a472 1
Ilya Zakharevich E<lt>F<ilya@@math.mps.ohio-state.edu>E<gt>.
a478 8
Using the C<m> command of Perl debugger (see L<perldebug>) one can
deduce which operations are overloaded (and which ancestor triggers
this overloading). Say, if C<eq> is overloaded, then the method C<(eq>
is shown by debugger. The method C<()> corresponds to the C<fallback>
key (in fact a presence of this method shows that this package has
overloading enabled, and it is what is used by the C<Overloaded>
function of module C<overload>).

d481 2
a482 19
Because it is used for overloading, the per-package hash %OVERLOAD now
has a special meaning in Perl. The symbol table is filled with names
looking like line-noise.

For the purpose of inheritance every overloaded package behaves as if
C<fallback> is present (possibly undefined). This may create
interesting effects if some package is not overloaded, but inherits
from two overloaded packages.

Relation between overloading and tie()ing is broken.  Overloading is 
triggered or not basing on the I<previous> class of tie()d value.

This happens because the presence of overloading is checked too early, 
before any tie()d access is attempted.  If the FETCH()ed class of the
tie()d value does not change, a simple workaround is to access the value 
immediately after tie()ing, so that after this call the I<previous> class
coincides with the current one.

B<Needed:> a way to fix this without a speed penalty.
d484 1
a484 1
Barewords are not covered by overloaded string constants.
d486 1
a486 2
This document is confusing.  There are grammos and misleading language
used in places.  It would seem a total rewrite is needed.
@


1.1.1.3
log
@virgin perl 5.6.0
@
text
@a2 2
$overload::hint_bits = 0x20000;

d90 1
a90 1
  (OverloadedStringify($_[0]) or ref($_[0]) eq 'Regexp') ?
d116 1
a116 1
	 num_comparison	  => "< <= >  >= == !=",
d118 1
a118 1
	 str_comparison	  => "lt le gt ge eq ne",
a123 2
	 iterators	  => '<>',
	 dereferencing	  => '${} @@{} %{} &{} *{}',
d130 1
a130 1
    $^H |= $constants{$_[0]} | $overload::hint_bits;
d358 1
a358 1
If one or two of these operations are not overloaded, the remaining ones can
a363 17
=item * I<Iteration>

    "<>"

If not overloaded, the argument will be converted to a filehandle or
glob (which may require a stringification).  The same overloading
happens both for the I<read-filehandle> syntax C<E<lt>$varE<gt>> and
I<globbing> syntax C<E<lt>${var}E<gt>>.

=item * I<Dereferencing>

    '${}', '@@{}', '%{}', '&{}', '*{}'.

If not overloaded, the argument will be dereferenced I<as is>, thus
should be of correct type.  These functions should return a reference
of correct type, or another object with overloaded dereferencing.

d380 1
a380 1
 num_comparison	  => '< <= > >= == !=',
d382 1
a382 1
 str_comparison	  => 'lt le gt ge eq ne',
a387 2
 iterators	  => '<>',
 dereferencing	  => '${} @@{} %{} &{} *{}',
a584 8
=item I<Iterator>

    <>				in terms of builtin operations

=item I<Dereferencing>

    ${} @@{} %{} &{} *{}		in terms of builtin operations

a846 128
=head2 Two-face references

Suppose you want to create an object which is accessible as both an
array reference, and a hash reference, similar to the builtin
L<array-accessible-as-a-hash|perlref/"Pseudo-hashes: Using an array as
a hash"> builtin Perl type.  Let us make it better than the builtin
type, there will be no restriction that you cannot use the index 0 of
your array.

  package two_refs;
  use overload '%{}' => \&gethash, '@@{}' => sub { $ {shift()} };
  sub new { 
    my $p = shift; 
    bless \ [@@_], $p;
  }
  sub gethash {
    my %h;
    my $self = shift;
    tie %h, ref $self, $self;
    \%h;
  }

  sub TIEHASH { my $p = shift; bless \ shift, $p }
  my %fields;
  my $i = 0;
  $fields{$_} = $i++ foreach qw{zero one two three};
  sub STORE { 
    my $self = ${shift()};
    my $key = $fields{shift()};
    defined $key or die "Out of band access";
    $$self->[$key] = shift;
  }
  sub FETCH { 
    my $self = ${shift()};
    my $key = $fields{shift()};
    defined $key or die "Out of band access";
    $$self->[$key];
  }

Now one can access an object using both the array and hash syntax:

  my $bar = new two_refs 3,4,5,6;
  $bar->[2] = 11;
  $bar->{two} == 11 or die 'bad hash fetch';

Note several important features of this example.  First of all, the
I<actual> type of $bar is a scalar reference, and we do not overload
the scalar dereference.  Thus we can get the I<actual> non-overloaded
contents of $bar by just using C<$$bar> (what we do in functions which
overload dereference).  Similarly, the object returned by the
TIEHASH() method is a scalar reference.

Second, we create a new tied hash each time the hash syntax is used.
This allows us not to worry about a possibility of a reference loop,
would would lead to a memory leak.

Both these problems can be cured.  Say, if we want to overload hash
dereference on a reference to an object which is I<implemented> as a
hash itself, the only problem one has to circumvent is how to access
this I<actual> hash (as opposed to the I<virtual> exhibited by
overloaded dereference operator).  Here is one possible fetching routine:

  sub access_hash {
    my ($self, $key) = (shift, shift);
    my $class = ref $self;
    bless $self, 'overload::dummy'; # Disable overloading of %{} 
    my $out = $self->{$key};
    bless $self, $class;	# Restore overloading
    $out;
  }

To move creation of the tied hash on each access, one may an extra
level of indirection which allows a non-circular structure of references:

  package two_refs1;
  use overload '%{}' => sub { ${shift()}->[1] },
               '@@{}' => sub { ${shift()}->[0] };
  sub new { 
    my $p = shift; 
    my $a = [@@_];
    my %h;
    tie %h, $p, $a;
    bless \ [$a, \%h], $p;
  }
  sub gethash {
    my %h;
    my $self = shift;
    tie %h, ref $self, $self;
    \%h;
  }

  sub TIEHASH { my $p = shift; bless \ shift, $p }
  my %fields;
  my $i = 0;
  $fields{$_} = $i++ foreach qw{zero one two three};
  sub STORE { 
    my $a = ${shift()};
    my $key = $fields{shift()};
    defined $key or die "Out of band access";
    $a->[$key] = shift;
  }
  sub FETCH { 
    my $a = ${shift()};
    my $key = $fields{shift()};
    defined $key or die "Out of band access";
    $a->[$key];
  }

Now if $baz is overloaded like this, then C<$bar> is a reference to a
reference to the intermediate array, which keeps a reference to an
actual array, and the access hash.  The tie()ing object for the access
hash is also a reference to a reference to the actual array, so 

=over

=item *

There are no loops of references.

=item *

Both "objects" which are blessed into the class C<two_refs1> are
references to a reference to an array, thus references to a I<scalar>.
Thus the accessor expression C<$$foo-E<gt>[$ind]> involves no
overloaded operations.

=back

d875 1
a875 1

d1000 1
a1000 1

@


1.1.1.4
log
@stock perl 5.6.1
@
text
@d109 1
a109 1
	      'integer'	  =>  0x1000,
a129 1
use warnings::register;
d133 2
a134 19
    if (@@_ == 1) {
        warnings::warnif ("Odd number of arguments for overload::constant");
        last;
    }
    elsif (!exists $constants {$_ [0]}) {
        warnings::warnif ("`$_[0]' is not an overloadable type");
    }
    elsif (!ref $_ [1] || "$_[1]" !~ /CODE\(0x[\da-f]+\)$/) {
        # Can't use C<ref $_[1] eq "CODE"> above as code references can be
        # blessed, and C<ref> would return the package the ref is blessed into.
        if (warnings::enabled) {
            $_ [1] = "undef" unless defined $_ [1];
            warnings::warn ("`$_[1]' is not a code reference");
        }
    }
    else {
        $^H{$_[0]} = $_[1];
        $^H |= $constants{$_[0]} | $overload::hint_bits;
    }
d152 1
a152 1
=head1 NAME
d160 1
a160 1
    use overload
d182 1
a182 1
	"+" => \&add,
d187 1
a187 1
for the assignment form C<*=> of multiplication.
d282 2
a283 2
routines which may be called in assignment context may create
self-referential structures.  Currently Perl will not free self-referential
d287 1
a287 1
Say,
d292 1
a292 1
is called as C<$obj = add($obj, $foo, undef)>, or C<$obj = [\$obj,
d295 1
a295 1
to non-optimized version if C<not defined $_[2]> (see
a367 5
As a special case if the overload returns the object itself then it will
be used directly. An overloaded conversion returning the object is
probably a bug, because you're likely to get something that looks like
C<YourPackage=HASH(0x8172b34)>.

a384 6
As a special case if the overload returns the object itself then it
will be used directly (provided it is the correct type).

The dereference operators must be specified explicitly they will not be passed to
"nomethod".

a466 4
The C<"nomethod"> mechanism is I<not> used for the dereference operators
( ${} @@{} %{} &{} *{} ).


d471 1
a471 2

=head2 Fallback
d495 1
a495 1
C<"nomethod"> value, and if this is missing, raises an exception.
d513 1
a513 1
	$a=$b;
d524 1
a524 1
	$a=$b;
d538 1
a538 1
The actually executed code for
d540 1
a540 1
	$a=$b;
d546 1
a546 1
	$a=$b;
d573 1
a573 1
=item I<Conversion operations>
d600 1
a600 1
=item I<Comparison operations>
d708 1
a708 1
is how Perl interprets this constant, the third one is how the constant is used.
d710 1
a710 1
contain string delimiters, and has backslashes in backslash-delimiter
d712 1
a712 1
processing of this string).  The return value of this function is how this
d716 1
a716 1
documents), it is C<tr> for arguments of C<tr>/C<y> operators,
d721 1
a721 1
overloaded catenation operator, otherwise absurd results will result.
d735 1
a735 1
B<BUGS> Currently overloaded-ness of constants does not propagate
d777 1
a777 1
Copying (C<$a=$b>) is shallow; however, a one-level-deep copying is
d788 2
a789 2
If it I<looks> counter intuitive to you, you are subject to a metaphor
clash.
d808 1
a808 1
would change the data referenced by $b too.  Effectively, after
d811 1
a811 1
On the other hand, anyone who has used algebraic notation knows the
d820 1
a820 1
one may need to I<explicitly unlink> other values which references the
d844 1
a844 1
which returns the object itself, and STORE() method which changes the
d881 5
a885 4
array reference and a hash reference, similar to the
L<pseudo-hash|perlref/"Pseudo-hashes: Using an array as a hash">
builtin Perl type.  Let's make it better than a pseudo-hash by
allowing index 0 to be treated as a normal element.
d889 2
a890 2
  sub new {
    my $p = shift;
d904 1
a904 1
  sub STORE {
d910 1
a910 1
  sub FETCH {
d937 1
a937 1
this I<actual> hash (as opposed to the I<virtual> hash exhibited by the
d943 1
a943 1
    bless $self, 'overload::dummy'; # Disable overloading of %{}
d949 1
a949 1
To remove creation of the tied hash on each access, one may an extra
d955 2
a956 2
  sub new {
    my $p = shift;
d973 1
a973 1
  sub STORE {
d979 1
a979 1
  sub FETCH {
d986 1
a986 1
Now if $baz is overloaded like this, then C<$baz> is a reference to a
d989 1
a989 1
hash is a reference to a reference to the actual array, so
d1064 1
a1064 1
  }
d1076 1
a1076 1
will look for an overloaded operator C<.>; if not present, it will
d1085 1
a1085 1
  }
d1096 1
a1096 1
methods.
d1130 3
a1132 3
  }
  my %subr = ( n => sub {$_[0]},
	       sqrt => sub {sqrt $_[0]},
d1141 1
a1141 1
    my $subr = $subr{$meth}
d1179 1
a1179 1
To implement most arithmetic operations is easy; one should just use
d1201 1
a1201 1
To implement a copy constructor, add C<< '=' => \&cpy >> to C<use overload>
d1210 1
a1210 1
To make C<++> and C<--> work, we need to implement actual mutators,
d1219 1
a1219 1
after the first line of wrap().  This is not a most effective
d1242 2
a1243 2
This finishes implementation of a primitive symbolic calculator in
50 lines of Perl code.  Since the numeric values of subexpressions
d1269 3
a1271 3
  sub STORE {
    my $obj = shift;
    $#$obj = 1;
a1339 21
The module might issue the following warnings:

=over 4

=item Odd number of arguments for overload::constant

(W) The call to overload::constant contained an odd number of arguments.
The arguments should come in pairs.

=item `%s' is not an overloadable type

(W) You tried to overload a constant type the overload package is unaware of.

=item `%s' is not a code reference

(W) The second (fourth, sixth, ...) argument of overload::constant needs
to be a code reference. Either an anonymous subroutine, or a reference
to a subroutine.

=back

d1351 1
a1351 1
Relation between overloading and tie()ing is broken.  Overloading is
d1354 1
a1354 1
This happens because the presence of overloading is checked too early,
d1356 1
a1356 1
tie()d value does not change, a simple workaround is to access the value
@


1.1.1.5
log
@stock perl 5.8.0 from CPAN
@
text
@a2 2
our $VERSION = '1.00';

d92 1
a92 1
  (ref $_[0] && OverloadedStringify($_[0]) or ref($_[0]) eq 'Regexp') ?
d124 1
a124 1
	 func		  => "atan2 cos sin exp abs log sqrt int",
d299 1
a299 1
B<Warning.>  Due to the presence of assignment versions of operations,
d334 3
a336 3
the assignment variant is not available.  Methods for operations C<+>,
C<->, C<+=>, and C<-=> can be called to automatically generate
increment and decrement methods.  The operation C<-> can be used to
d356 1
a356 1
C<neg> stands for unary minus.  If the method for C<neg> is not
d358 2
a359 2
subtraction. If the method for C<!> is not specified, it can be
autogenerated using the methods for C<bool>, or C<"">, or C<0+>.
d371 1
a371 1
    "atan2", "cos", "sin", "exp", "abs", "log", "sqrt", "int"
a375 5
Note that traditionally the Perl function L<int> rounds to 0, thus for
floating-point-like types one should follow the same semantic.  If
C<int> is unavailable, it can be autogenerated using the overloading of
C<0+>.

d378 1
a378 1
    'bool', '""', '0+',
d382 1
a382 1
(like C<while>) and for the ternary C<?:> operation.  These functions can
a399 3
B<BUGS> Even in list context, the iterator is currently called only
once and with scalar context.

d848 1
a848 1
possible.  Since it is not possible to freely mix two contradicting
d965 1
a965 1
which would lead to a memory leak.
d1131 1
a1131 1
Something is still amiss: consider the loop variable $cnt of the
@


1.1.1.6
log
@perl 5.8.2 from CPAN
@
text
@d3 1
a3 1
our $VERSION = '1.01';
d5 1
a5 1
$overload::hint_bits = 0x20000; # HINT_LOCALIZE_HH
d87 4
a90 7

	require Scalar::Util;
	my $class = Scalar::Util::blessed($_[0]);
	my $class_prefix = defined($class) ? "$class=" : "";
	my $type = Scalar::Util::reftype($_[0]);
	my $addr = Scalar::Util::refaddr($_[0]);
	return sprintf("$class_prefix$type(0x%x)", $addr);
d111 5
a115 5
	      'integer'	  =>  0x1000, # HINT_NEW_INTEGER
	      'float'	  =>  0x2000, # HINT_NEW_FLOAT
	      'binary'	  =>  0x4000, # HINT_NEW_BINARY
	      'q'	  =>  0x8000, # HINT_NEW_STRING
	      'qr'	  => 0x10000, # HINT_NEW_RE
@


1.1.1.7
log
@perl 5.8.6 from CPAN
@
text
@d3 1
a3 1
our $VERSION = '1.02';
d707 1
a707 4
Gives string value of C<arg> as in absence of stringify overloading. If you
are using this to get the address of a reference (useful for checking if two
references point to the same thing) then you may be better off using
C<Scalar::Util::refaddr()>, which is faster.
@


1.1.1.8
log
@perl 5.8.8 import
@
text
@d3 1
a3 1
our $VERSION = '1.04';
d96 5
a100 1
*StrVal = *AddrRef;
d177 1
a177 1
overload - Package for overloading Perl operations
d724 3
a726 3
For some applications, the Perl parser mangles constants too much.
It is possible to hook into this process via C<overload::constant()>
and C<overload::remove_constant()> functions.
d729 1
a729 1
are:
@


1.1.1.9
log
@import perl 5.10.0 from CPAN
@
text
@d3 3
a5 1
our $VERSION = '1.06';
d77 1
a77 7
  if(ref $package) {
    local $@@;
    local $!;
    require Scalar::Util;
    $package = Scalar::Util::blessed($package);
    return undef if !defined $package;
  }
d88 6
a93 8
  local $@@;
  local $!;
  require Scalar::Util;
  my $class = Scalar::Util::blessed($_[0]);
  my $class_prefix = defined($class) ? "$class=" : "";
  my $type = Scalar::Util::reftype($_[0]);
  my $addr = Scalar::Util::refaddr($_[0]);
  return sprintf("$class_prefix$type(0x%x)", $addr);
d100 5
a104 5

  my $mro = mro::get_linear_isa($package);
  foreach my $p (@@$mro) {
    my $fqmeth = $p . q{::} . $meth;
    return \*{$fqmeth} if defined &{$fqmeth};
a105 1

d122 1
a122 1
	 binary		  => '& &= | |= ^ ^=',
d152 1
a152 1
        $^H |= $constants{$_[0]};
d355 1
a355 1
    "&", "&=", "^", "^=", "|", "|=", "neg", "!", "~",
a361 4
The same remarks in L<"Arithmetic operations"> about
assignment-variants and autogeneration apply for
bit operations C<"&">, C<"^">, and C<"|"> as well.

d425 1
a425 1
    "nomethod", "fallback", "=", "~~",
d442 1
a442 1
 binary		  => '& &= | |= ^ ^=',
a544 5
=head2 Smart Match

The key C<"~~"> allows you to override the smart matching used by
the switch construct. See L<feature>.

a665 17
=head1 Minimal set of overloaded operations

Since some operations can be automatically generated from others, there is
a minimal set of operations that need to be overloaded in order to have
the complete set of overloaded operations at one's disposal.
Of course, the autogenerated operations may not do exactly what the user
expects. See L<MAGIC AUTOGENERATION> above. The minimal set is:

    + - * / % ** << >> x
    <=> cmp
    & | ^ ~
    atan2 cos sin exp log sqrt int

Additionally, you need to define at least one of string, boolean or
numeric conversions because any one can be used to emulate the others.
The string conversion can also be used to emulate concatenation.

d781 3
d927 4
a930 1
array reference and a hash reference.
d1092 1
a1092 1
be inspected in debugger (see L<perldebug>), but only if
@


1.1.1.10
log
@import perl 5.10.1
@
text
@d3 1
a3 1
our $VERSION = '1.07';
a135 1
	 matching	  => '~~',
d149 1
a149 1
    elsif (!ref $_ [1] || "$_[1]" !~ /(^|=)CODE\(0x[0-9a-f]+\)$/) {
d193 1
a193 1
    $a = SomeThing->new( 57 );
a201 3
This pragma allows overloading of Perl's operators for a class.
To overload built-in functions, see L<perlsub/Overriding Built-in Functions> instead.

a419 31
=item * I<Matching>

The key C<"~~"> allows you to override the smart matching logic used by
the C<~~> operator and the switch construct (C<given>/C<when>).  See
L<perlsyn/switch> and L<feature>.

Unusually, overloading of the smart match operator does not automatically
take precedence over normal smart match behaviour. In particular, in the
following code:

    package Foo;
    use overload '~~' => 'match';

    my $obj =  Foo->new();
    $obj ~~ [ 1,2,3 ];

the smart match does I<not> invoke the method call like this:

    $obj->match([1,2,3],0);

rather, the smart match distributive rule takes precedence, so $obj is
smart matched against each array element in turn until a match is found,
so you may see between one and three of these calls instead:

    $obj->match(1,0);
    $obj->match(2,0);
    $obj->match(3,0);

Consult the match table in  L<perlsyn/"Smart matching in detail"> for
details of when overloading is invoked.

d436 1
a436 1
    "nomethod", "fallback", "=".
a459 1
 matching	  => '~~',
d556 5
d591 1
a591 2
string copy if the object is a plain scalar or a simple assignment if it
is not.
d678 1
a678 2
value is a scalar and not a reference, or simply a reference assignment
otherwise.
d899 1
a899 1
    $a = Data->new(23);
d908 1
a908 1
    $a = Data->new(23);
d914 1
a914 1
    $a = Data->new(23);
d944 1
a944 1
  my $seven = two_face->new("vii", 7);
d991 1
a991 1
  my $bar = two_refs->new(3,4,5,6);
d1096 2
a1097 2
the objects: C<< symbolic->new(3) >> contains C<['n', 3]>, C<< 2 +
symbolic->new(3) >> contains C<['+', 2, ['n', 3]]>.
d1104 1
a1104 1
  my $side = symbolic->new(1);
d1228 2
a1229 2
  my $iter = symbolic->new(2);	# 16-gon
  my $side = symbolic->new(1);
d1349 2
a1350 2
  my $a = symbolic->new(3);
  my $b = symbolic->new(4);
a1397 5

=head1 SEE ALSO

The L<overloading> pragma can be used to enable or disable overloaded
operations within a lexical scope.
@


1.1.1.11
log
@Perl 5.12.2 from CPAN
@
text
@d3 1
a3 1
our $VERSION = '1.10';
a11 1
  $fb = ${$package . "::()"}; # preserve old fallback value RT#68196
a106 4
  local $@@;
  local $!;
  require mro;

d133 1
a133 1
	 conversion	  => 'bool "" 0+ qr',
a134 1
         filetest         => "-X",
d397 1
a397 1
=item * I<Boolean, string, numeric and regexp conversions>
d399 1
a399 1
    'bool', '""', '0+', 'qr'
d401 5
a405 10
If one or two of these operations are not overloaded, the remaining ones
can be used instead.  C<bool> is used in the flow control operators
(like C<while>) and for the ternary C<?:> operation; C<qr> is used for
the RHS of C<=~> and when an object is interpolated into a regexp.

C<bool>, C<"">, and C<0+> can return any arbitrary Perl value.  If the
corresponding operation for this value is overloaded too, that operation
will be called again with this value. C<qr> must return a compiled
regexp, or a ref to a compiled regexp (such as C<qr//> returns), and any
further overloading on the return value will be ignored.
a423 23
=item * I<File tests>

    "-X"

This overload is used for all the filetest operators (C<-f>, C<-x> and
so on: see L<perlfunc/-X> for the full list). Even though these are
unary operators, the method will be called with a second argument which
is a single letter indicating which test was performed. Note that the
overload key is the literal string C<"-X">: you can't provide separate
overloads for the different tests.

Calling an overloaded filetest operator does not affect the stat value
associated with the special filehandle C<_>. It still refers to the
result of the last C<stat>, C<lstat> or unoverloaded filetest.

If not overloaded, these operators will fall back to the default
behaviour even without C<< fallback => 1 >>. This means that if the
object is a blessed glob or blessed IO ref it will be treated as a
filehandle, otherwise string overloading will be invoked and the result
treated as a filename.

This overload was introduced in perl 5.12.

d492 1
a492 1
 conversion	  => 'bool "" 0+ qr',
a493 1
 filetest         => '-X',
d666 2
a667 2
String, numeric, boolean and regexp conversions are calculated in terms
of one another if not all of them are defined.
@


1.1.1.12
log
@import perl 5.16.3 from CPAN - worked on by Andrew Fresh and myself
@
text
@d3 1
a3 24
our $VERSION = '1.18';

%ops = (
    with_assign         => "+ - * / % ** << >> x .",
    assign              => "+= -= *= /= %= **= <<= >>= x= .=",
    num_comparison      => "< <= >  >= == !=",
    '3way_comparison'   => "<=> cmp",
    str_comparison      => "lt le gt ge eq ne",
    binary              => '& &= | |= ^ ^=',
    unary               => "neg ! ~",
    mutators            => '++ --',
    func                => "atan2 cos sin exp abs log sqrt int",
    conversion          => 'bool "" 0+ qr',
    iterators           => '<>',
    filetest            => "-X",
    dereferencing       => '${} @@{} %{} &{} *{}',
    matching            => '~~',
    special             => 'nomethod fallback =',
);

my %ops_seen;
for $category (keys %ops) {
    $ops_seen{$_}++ for (split /\s+/, $ops{$category});
}
a17 2
      warnings::warnif("overload arg '$_' is invalid")
        unless $ops_seen{$_};
d23 1
a23 1
      #print STDERR "Setting '$ {'package'}::\cO$_' to \\&'$sub'.\n";
d53 1
a53 1
  mycan ($package, '()');
d60 1
a60 2
  no overloading;
  return $sub if !ref $sub or $sub != \&nil;
d90 11
a100 2
  no overloading;
  "$_[0]";
d129 16
d154 1
a154 1
        warnings::warnif ("'$_[0]' is not an overloadable type");
d161 1
a161 1
            warnings::warn ("'$_[1]' is not a code reference");
d201 1
a201 1
    $b = 5 + $a;
d212 65
a276 1
=head2 Fundamentals
d278 3
a280 1
=head3 Declaration
d282 1
a282 2
Arguments of the C<use overload> directive are (key, value) pairs.
For the full set of legal keys, see L<Overloadable Operations> below.
d284 32
a315 5
Operator implementations (the values) can be subroutines,
references to subroutines, or anonymous subroutines
- in other words, anything legal inside a C<&{ ... }> call.
Values specified as strings are interpreted as method names.
Thus
d317 16
a332 20
    package Number;
    use overload
        "-" => "minus",
        "*=" => \&muas,
        '""' => sub { ...; };

declares that subtraction is to be implemented by method C<minus()>
in the class C<Number> (or one of its base classes),
and that the function C<Number::muas()> is to be used for the
assignment form of multiplication, C<*=>.
It also defines an anonymous subroutine to implement stringification:
this is called whenever an object blessed into the package C<Number>
is used in a string context (this subroutine might, for example,
return the number as a Roman numeral).

=head3 Calling Conventions and Magic Autogeneration

The following sample implementation of C<minus()> (which assumes
that C<Number> objects are simply blessed references to scalars)
illustrates the calling conventions:
d334 3
a336 8
    package Number;
    sub minus {
        my ($self, $other, $swap) = @@_;
        my $result = $$self - $other;         # *
        $result = -$result if $swap;
        ref $result ? $result : bless \$result;
    }
    # * may recurse once - see table below
d338 1
a338 98
Three arguments are passed to all subroutines specified in the
C<use overload> directive (with one exception - see L</nomethod>).
The first of these is the operand providing the overloaded
operator implementation -
in this case, the object whose C<minus()> method is being called.

The second argument is the other operand, or C<undef> in the
case of a unary operator.

The third argument is set to TRUE if (and only if) the two
operands have been swapped.  Perl may do this to ensure that the
first argument (C<$self>) is an object implementing the overloaded
operation, in line with general object calling conventions.
For example, if C<$x> and C<$y> are C<Number>s:

    operation   |   generates a call to
    ============|======================
    $x - $y     |   minus($x, $y, '')
    $x - 7      |   minus($x, 7, '')
    7 - $x      |   minus($x, 7, 1)

Perl may also use C<minus()> to implement other operators which
have not been specified in the C<use overload> directive,
according to the rules for L<Magic Autogeneration> described later.
For example, the C<use overload> above declared no subroutine
for any of the operators C<-->, C<neg> (the overload key for
unary minus), or C<-=>.  Thus

    operation   |   generates a call to
    ============|======================
    -$x         |   minus($x, 0, 1)
    $x--        |   minus($x, 1, undef)
    $x -= 3     |   minus($x, 3, undef)

Note the C<undef>s:
where autogeneration results in the method for a standard
operator which does not change either of its operands, such
as C<->, being used to implement an operator which changes
the operand ("mutators": here, C<--> and C<-=>),
Perl passes undef as the third argument.
This still evaluates as FALSE, consistent with the fact that
the operands have not been swapped, but gives the subroutine
a chance to alter its behaviour in these cases.

In all the above examples, C<minus()> is required
only to return the result of the subtraction:
Perl takes care of the assignment to $x.
In fact, such methods should I<not> modify their operands,
even if C<undef> is passed as the third argument
(see L<Overloadable Operations>).

The same is not true of implementations of C<++> and C<-->:
these are expected to modify their operand.
An appropriate implementation of C<--> might look like

    use overload '--' => "decr",
        # ...
    sub decr { --${$_[0]}; }

=head3 Mathemagic, Mutators, and Copy Constructors

The term 'mathemagic' describes the overloaded implementation
of mathematical operators.
Mathemagical operations raise an issue.
Consider the code:

    $a = $b;
    --$a;

If C<$a> and C<$b> are scalars then after these statements

    $a == $b - 1

An object, however, is a reference to blessed data, so if
C<$a> and C<$b> are objects then the assignment C<$a = $b>
copies only the reference, leaving C<$a> and C<$b> referring
to the same object data.
One might therefore expect the operation C<--$a> to decrement
C<$b> as well as C<$a>.
However, this would not be consistent with how we expect the
mathematical operators to work.

Perl resolves this dilemma by transparently calling a copy
constructor before calling a method defined to implement
a mutator (C<-->, C<+=>, and so on.).
In the above example, when Perl reaches the decrement
statement, it makes a copy of the object data in C<$a> and
assigns to C<$a> a reference to the copied data.
Only then does it call C<decr()>, which alters the copied
data, leaving C<$b> unchanged.
Thus the object metaphor is preserved as far as possible,
while mathemagical operations still work according to the
arithmetic metaphor.

Note: the preceding paragraph describes what happens when
Perl autogenerates the copy constructor for an object based
on a scalar.
For other cases, see L<Copy Constructor>.
d342 27
a368 3
The complete list of keys that can be specified in the C<use overload>
directive are given, separated by spaces, in the values of the
hash C<%overload::ops>:
d370 27
a396 15
 with_assign	  => '+ - * / % ** << >> x .',
 assign		  => '+= -= *= /= %= **= <<= >>= x= .=',
 num_comparison	  => '< <= > >= == !=',
 '3way_comparison'=> '<=> cmp',
 str_comparison	  => 'lt le gt ge eq ne',
 binary		  => '& &= | |= ^ ^=',
 unary		  => 'neg ! ~',
 mutators	  => '++ --',
 func		  => 'atan2 cos sin exp abs log sqrt int',
 conversion	  => 'bool "" 0+ qr',
 iterators	  => '<>',
 filetest         => '-X',
 dereferencing	  => '${} @@{} %{} &{} *{}',
 matching	  => '~~',
 special	  => 'nomethod fallback ='
d398 4
a401 3
Most of the overloadable operators map one-to-one to these keys.
Exceptions, including additional overloadable operations not
apparent from this hash, are included in the notes which follow.
d403 1
a403 2
A warning is issued if an attempt is made to register an operator not found
above.
d405 1
a405 1
=over 5
d407 4
a410 1
=item * C<not>
d412 5
a416 91
The operator C<not> is not a valid key for C<use overload>.
However, if the operator C<!> is overloaded then the same
implementation will be used for C<not>
(since the two operators differ only in precedence).

=item * C<neg>

The key C<neg> is used for unary minus to disambiguate it from
binary C<->.

=item * C<++>, C<-->

Assuming they are to behave analogously to Perl's C<++> and C<-->,
overloaded implementations of these operators are required to
mutate their operands.

No distinction is made between prefix and postfix forms of the
increment and decrement operators: these differ only in the
point at which Perl calls the associated subroutine when
evaluating an expression.

=item * I<Assignments>

    +=  -=  *=  /=  %=  **=  <<=  >>=  x=  .=
    &=  |=  ^=

Simple assignment is not overloadable (the C<'='> key is used
for the L<Copy Constructor>).
Perl does have a way to make assignments to an object do whatever
you want, but this involves using tie(), not overload -
see L<perlfunc/tie> and the L</COOKBOOK> examples below.

The subroutine for the assignment variant of an operator is
required only to return the result of the operation.
It is permitted to change the value of its operand
(this is safe because Perl calls the copy constructor first),
but this is optional since Perl assigns the returned value to
the left-hand operand anyway.

An object that overloads an assignment operator does so only in
respect of assignments to that object.
In other words, Perl never calls the corresponding methods with
the third argument (the "swap" argument) set to TRUE.
For example, the operation

    $a *= $b

cannot lead to C<$b>'s implementation of C<*=> being called,
even if C<$a> is a scalar.
(It can, however, generate a call to C<$b>'s method for C<*>).

=item * I<Non-mutators with a mutator variant>

     +  -  *  /  %  **  <<  >>  x  .
     &  |  ^

As described L<above|"Calling Conventions and Magic Autogeneration">,
Perl may call methods for operators like C<+> and C<&> in the course
of implementing missing operations like C<++>, C<+=>, and C<&=>.
While these methods may detect this usage by testing the definedness
of the third argument, they should in all cases avoid changing their
operands.
This is because Perl does not call the copy constructor before
invoking these methods.

=item * C<int>

Traditionally, the Perl function C<int> rounds to 0
(see L<perlfunc/int>), and so for floating-point-like types one
should follow the same semantic.

=item * I<String, numeric, boolean, and regexp conversions>

    ""  0+  bool

These conversions are invoked according to context as necessary.
For example, the subroutine for C<'""'> (stringify) may be used
where the overloaded object is passed as an argument to C<print>,
and that for C<'bool'> where it is tested in the condition of a flow
control statement (like C<while>) or the ternary C<?:> operation.

Of course, in contexts like, for example, C<$obj + 1>, Perl will
invoke C<$obj>'s implementation of C<+> rather than (in this
example) converting C<$obj> to a number using the numify method
C<'0+'> (an exception to this is when no method has been provided
for C<'+'> and L</fallback> is set to TRUE).

The subroutines for C<'""'>, C<'0+'>, and C<'bool'> can return
any arbitrary Perl value.
If the corresponding operation for this value is overloaded too,
the operation will be called again with this value.
d419 1
a419 1
be used directly.  An overloaded conversion returning the object is
d423 1
a423 9
    qr

The subroutine for C<'qr'> is used wherever the object is
interpolated into or used as a regexp, including when it
appears on the RHS of a C<=~> or C<!~> operator.

C<qr> must return a compiled regexp, or a ref to a compiled regexp
(such as C<qr//> returns), and any further overloading on the return
value will be ignored.
d425 1
a425 1
=item * I<Iteration>
d427 3
a429 2
If C<E<lt>E<gt>> is overloaded then the same implementation is used
for both the I<read-filehandle> syntax C<E<lt>$varE<gt>> and
d437 8
a444 7
The key C<'-X'> is used to specify a subroutine to handle all the
filetest operators (C<-f>, C<-x>, and so on: see L<perlfunc/-X> for
the full list);
it is not possible to overload any filetest operator individually.
To distinguish them, the letter following the '-' is passed as the
second argument (that is, in the slot that for binary operators
is used to pass the second operand).
d447 1
a447 1
associated with the special filehandle C<_>.  It still refers to the
d450 7
a456 1
This overload was introduced in Perl 5.12.
d462 1
a462 1
L<perlsyn/Switch Statements> and L<feature>.
d464 3
a466 3
Unusually, the overloaded implementation of the smart match operator
does not get full control of the smart match behaviour.
In particular, in the following code:
d486 1
a486 1
Consult the match table in  L<perlop/"Smartmatch Operator"> for
d491 8
a498 1
    ${}  @@{}  %{}  &{}  *{}
d500 2
a501 16
If these operators are not explicitly overloaded then they
work in the normal way, yielding the underlying scalar,
array, or whatever stores the object data (or the appropriate
error message if the dereference operator doesn't match it).
Defining a catch-all C<'nomethod'> (see L<below|/nomethod>)
makes no difference to this as the catch-all function will
not be called to implement a missing dereference operator.

If a dereference operator is overloaded then it must return a
I<reference> of the appropriate type (for example, the
subroutine for key C<'${}'> should return a reference to a
scalar, not a scalar), or another object which overloads the
operator: that is, the subroutine only determines what is
dereferenced and the actual dereferencing is left to Perl.
As a special case, if the subroutine returns the object itself
then it will not be called again - avoiding infinite recursion.
d505 1
a505 1
    nomethod  fallback  =
d507 1
a507 1
See L<Special Keys for C<use overload>>.
d511 2
a512 1
=head2 Magic Autogeneration
d514 2
a515 83
If a method for an operation is not found then Perl tries to
autogenerate a substitute implementation from the operations
that have been defined.

Note: the behaviour described in this section can be disabled
by setting C<fallback> to FALSE (see L</fallback>).

In the following tables, numbers indicate priority.
For example, the table below states that,
if no implementation for C<'!'> has been defined then Perl will
implement it using C<'bool'> (that is, by inverting the value
returned by the method for C<'bool'>);
if boolean conversion is also unimplemented then Perl will
use C<'0+'> or, failing that, C<'""'>.

    operator | can be autogenerated from
             |
             | 0+   ""   bool   .   x
    =========|==========================
       0+    |       1     2
       ""    |  1          2
       bool  |  1    2
       int   |  1    2     3
       !     |  2    3     1
       qr    |  2    1     3
       .     |  2    1     3
       x     |  2    1     3
       .=    |  3    2     4    1
       x=    |  3    2     4        1
       <>    |  2    1     3
       -X    |  2    1     3

Note: The iterator (C<'E<lt>E<gt>'>) and file test (C<'-X'>)
operators work as normal: if the operand is not a blessed glob or
IO reference then it is converted to a string (using the method
for C<'""'>, C<'0+'>, or C<'bool'>) to be interpreted as a glob
or filename.

    operator | can be autogenerated from
             |
             |  <   <=>   neg   -=    -
    =========|==========================
       neg   |                        1
       -=    |                        1
       --    |                   1    2
       abs   | a1    a2    b1        b2    [*]
       <     |        1
       <=    |        1
       >     |        1
       >=    |        1
       ==    |        1
       !=    |        1

    * one from [a1, a2] and one from [b1, b2]

Just as numeric comparisons can be autogenerated from the method
for C<< '<=>' >>, string comparisons can be autogenerated from
that for C<'cmp'>:

     operators          |  can be autogenerated from
    ====================|===========================
     lt gt le ge eq ne  |  cmp

Similarly, autogeneration for keys C<'+='> and C<'++'> is analogous
to C<'-='> and C<'--'> above:

    operator | can be autogenerated from
             |
             |  +=    +
    =========|==========================
        +=   |        1
        ++   |   1    2

And other assignment variations are analogous to
C<'+='> and C<'-='> (and similar to C<'.='> and C<'x='> above):

              operator ||  *= /= %= **= <<= >>= &= ^= |=
    -------------------||--------------------------------
    autogenerated from ||  *  /  %  **  <<  >>  &  ^  |

Note also that the copy constructor (key C<'='>) may be
autogenerated, but only for objects based on scalars.
See L<Copy Constructor>.
d517 17
a533 1
=head3 Minimal Set of Overloaded Operations
d535 5
a539 5
Since some operations can be automatically generated from others, there is
a minimal set of operations that need to be overloaded in order to have
the complete set of overloaded operations at one's disposal.
Of course, the autogenerated operations may not do exactly what the user
expects.  The minimal set is:
d541 1
a541 6
    + - * / % ** << >> x
    <=> cmp
    & | ^ ~
    atan2 cos sin exp log sqrt int
    "" 0+ bool
    ~~
d543 1
a543 2
Of the conversions, only one of string, boolean or numeric is
needed because each can be generated from either of the other two.
d545 1
a545 1
=head2 Special Keys for C<use overload>
d547 1
a547 1
=head3 C<nomethod>
d549 10
a558 7
The C<'nomethod'> key is used to specify a catch-all function to
be called for any operator that is not individually overloaded.
The specified function will be passed four parameters.
The first three arguments coincide with those that would have been
passed to the corresponding method if it had been defined.
The fourth argument is the C<use overload> key for that missing
method.
d560 1
a560 1
For example, if C<$a> is an object blessed into a package declaring
d562 4
a565 1
    use overload 'nomethod' => 'catch_all', # ...
d567 1
a567 1
then the operation
d569 2
a570 1
    3 + $a
d572 1
a572 2
could (unless a method is specifically declared for the key
C<'+'>) result in a call
d574 7
a580 1
    catch_all($a, 3, 1, '+')
d582 1
a582 1
See L<How Perl Chooses an Operator Implementation>.
d584 2
a585 1
=head3 C<fallback>
d587 7
a593 3
The value assigned to the key C<'fallback'> tells Perl how hard
it should try to find an alternative way to implement a missing
operator.
a594 1
=over
d596 1
a596 1
=item * defined, but FALSE
d598 3
a600 1
    use overload "fallback" => 0, # ... ;
d602 1
a602 1
This disables L<Magic Autogeneration>.
d606 4
a609 2
In the default case where no value is explicitly assigned to
C<fallback>, magic autogeneration is enabled.
d613 3
a615 4
The same as for C<undef>, but if a missing operator cannot be
autogenerated then, instead of issuing an error message, Perl
is allowed to revert to what it would have done for that
operator if there had been no C<use overload> directive.
d617 4
a620 2
Note: in most cases, particularly the L<Copy Constructor>,
this is unlikely to be appropriate behaviour.
d624 2
a625 1
See L<How Perl Chooses an Operator Implementation>.
d627 1
a627 1
=head3 Copy Constructor
d629 30
a658 6
As mentioned L<above|"Mathemagic, Mutators, and Copy Constructors">,
this operation is called when a mutator is applied to a reference
that shares its object with some other reference.
For example, if C<$b> is mathemagical, and C<'++'> is overloaded
with C<'incr'>, and C<'='> is overloaded with C<'clone'>, then the
code
d660 1
a660 3
    $a = $b;
    # ... (other code which does not modify $a or $b) ...
    ++$b;
d662 1
a662 1
would be executed in a manner equivalent to
d664 1
a664 4
    $a = $b;
    # ...
    $b = $b->clone(undef, "");
    $b->incr(undef, "");
d666 3
a668 1
Note:
d670 1
a670 1
=over
d672 4
a675 1
=item *
d677 2
a678 3
The subroutine for C<'='> does not overload the Perl assignment
operator: it is used only to allow mutators to work as described
here.  (See L</Assignments> above.)
d680 1
a680 1
=item *
d682 2
a683 2
As for other operations, the subroutine implementing '=' is passed
three arguments, though the last two are always C<undef> and C<''>.
d685 1
a685 1
=item *
d687 4
a690 7
The copy constructor is called only before a call to a function
declared to implement a mutator, for example, if C<++$b;> in the
code above is effected via a method declared for key C<'++'>
(or 'nomethod', passed C<'++'> as the fourth argument) or, by
autogeneration, C<'+='>.
It is not called if the increment operation is effected by a call
to the method for C<'+'> since, in the equivalent code,
d692 1
a692 2
    $a = $b;
    $b = $b + 1;
d694 1
a694 2
the data referred to by C<$a> is unchanged by the assignment to
C<$b> of a reference to new object data.
d696 2
a697 1
=item *
d699 1
a699 3
The copy constructor is not called if Perl determines that it is
unnecessary because there is no other reference to the data being
modified.
d701 2
a702 1
=item *
d704 1
a704 5
If C<'fallback'> is undefined or TRUE then a copy constructor
can be autogenerated, but only for objects based on scalars.
In other cases it needs to be defined explicitly.
Where an object's data is stored as, for example, an array of
scalars, the following might be appropriate:
d706 2
a707 1
    use overload '=' => sub { bless [ @@{$_[0]} ] },  # ...
d709 1
a709 1
=item *
d711 1
a711 8
If C<'fallback'> is TRUE and no copy constructor is defined then,
for objects not based on scalars, Perl may silently fall back on
simple assignment - that is, assignment of the object reference.
In effect, this disables the copy constructor mechanism since
no new copy of the object data is created.
This is almost certainly not what you want.
(It is, however, consistent: for example, Perl's fallback for the
C<++> operator is to increment the reference itself.)
d713 1
a713 1
=back
d715 1
a715 1
=head2 How Perl Chooses an Operator Implementation
d717 1
a717 4
Which is checked first, C<nomethod> or C<fallback>?
If the two operands of an operator are of different types and
both overload the operator, which implementation is used?
The following are the precedence rules:
d719 2
a720 1
=over
d722 1
a722 1
=item 1.
d724 1
a724 2
If the first operand has declared a subroutine to overload the
operator then use that implementation.
d726 1
a726 1
=item 2.
d728 2
a729 4
Otherwise, if fallback is TRUE or undefined for the
first operand then see if the
L<rules for autogeneration|"Magic Autogeneration">
allows another of its operators to be used instead.
d731 2
a732 1
=item 3.
d734 1
a734 2
Unless the operator is an assignment (C<+=>, C<-=>, etc.),
repeat step (1) in respect of the second operand.
d736 1
a736 1
=item 4.
d738 1
a738 1
Repeat Step (2) in respect of the second operand.
d740 1
a740 1
=item 5.
d742 1
a742 1
If the first operand has a "nomethod" method then use that.
d744 3
a746 1
=item 6.
d748 1
a748 1
If the second operand has a "nomethod" method then use that.
d750 1
a750 1
=item 7.
d752 5
a756 4
If C<fallback> is TRUE for both operands
then perform the usual operation for the operator,
treating the operands as numbers, strings, or booleans
as appropriate for the operator (see note).
d758 4
a761 1
=item 8.
d763 3
a765 1
Nothing worked - die.
d767 1
a767 20
=back

Where there is only one operand (or only one operand with
overloading) the checks in respect of the other operand above are
skipped.

There are exceptions to the above rules for dereference operations
(which, if Step 1 fails, always fall back to the normal, built-in
implementations - see Dereferencing), and for C<~~> (which has its
own set of rules - see C<Matching> under L</Overloadable Operations>
above).

Note on Step 7: some operators have a different semantic depending
on the type of their operands.
As there is no way to instruct Perl to treat the operands as, e.g.,
numbers instead of strings, the result here may not be what you
expect.
See L<BUGS AND PITFALLS>.

=head2 Losing Overloading
d770 1
a770 1
C<cmp> should return a blessed reference, the autogenerated C<lt>
d772 1
a772 1
numerical value of the result of C<cmp>.  In particular, a working
d783 1
a783 37
=head2 Inheritance and Overloading

Overloading respects inheritance via the @@ISA hierarchy.
Inheritance interacts with overloading in two ways.

=over

=item Method names in the C<use overload> directive

If C<value> in

  use overload key => value;

is a string, it is interpreted as a method name - which may
(in the usual way) be inherited from another class.

=item Overloading of an operation is inherited by derived classes

Any class derived from an overloaded class is also overloaded
and inherits its operator implementations.
If the same operator is overloaded in more than one ancestor
then the implementation is determined by the usual inheritance
rules.

For example, if C<A> inherits from C<B> and C<C> (in that order),
C<B> overloads C<+> with C<\&D::plus_sub>, and C<C> overloads
C<+> by C<"plus_meth">, then the subroutine C<D::plus_sub> will
be called to implement operation C<+> for an object in package C<A>.

=back

Note that since the value of the C<fallback> key is not a subroutine,
its inheritance is not governed by the above rules.  In the current
implementation, the value of C<fallback> in the first overloaded
ancestor is used, but this is accidental and subject to change.

=head2 Run-time Overloading
d796 1
a796 1
=head2 Public Functions
d804 1
a804 2
Gives the string value of C<arg> as in the
absence of stringify overloading.  If you
d819 1
a819 1
=head2 Overloading Constants
d875 6
a880 6
    sub import {
       shift;
       return unless @@_;
       die "unknown import: @@_" unless @@_ == 1 and $_[0] eq ':constant';
       overload::constant integer => sub {Math::BigInt->new(shift)};
    }
d889 2
a890 2
definitions, and changes in @@ISA.  However, this invalidation remains
unprocessed until the next C<bless>ing into the package.  Hence if you
d898 1
a898 1
magic.  However, the magic which implements overloading is applied to
d915 1
a915 1
There is no size penalty for data if overload is not used.  The only
d918 1
a918 1
package.  This magic is three-words-long for packages without
d921 5
d929 66
a994 1
=head1 COOKBOOK
d998 1
a998 1
=head2 Two-face Scalars
d1014 1
a1014 1
  print "seven contains 'i'\n" if $seven =~ /i/;
d1020 1
a1020 1
  seven contains 'i'
d1022 1
a1022 1
=head2 Two-face References
d1146 1
a1146 1
=head2 Symbolic Calculator
d1161 2
a1162 2
provide any usual overloaded operators, instead it provides an
implementation for L<C<nomethod>>.  In this example the C<nomethod>
d1301 1
a1301 1
    $cnt = $cnt - 1;		# Mutator '--' not implemented
d1331 1
a1331 1
    print "defining '$op'\n";
d1335 5
a1339 7
Since subroutines implementing assignment operators are not required
to modify their operands (see L<Overloadable Operations> above),
we do not need anything special to make C<+=> and friends work,
besides adding these operators to %subr and defining a copy
constructor (needed since Perl has no way to know that the
implementation of C<'+='> does not mutate the argument -
see L<Copy Constructor>).
d1401 1
a1401 1
=head2 I<Really> Symbolic Calculator
d1429 1
a1429 1
package C<symbolic>.  Add methods
d1435 1
a1435 2
(the bug, fixed in Perl 5.14, is described in L<"BUGS">).  One can use this
new interface as
d1469 2
a1470 2
The C<overloading> pragma can be used to enable or disable overloaded
operations within a lexical scope - see L<overloading>.
d1479 2
a1480 2
this overloading).  Say, if C<eq> is overloaded, then the method C<(eq>
is shown by debugger.  The method C<()> corresponds to the C<fallback>
d1494 1
a1494 1
=item '%s' is not an overloadable type
d1498 1
a1498 1
=item '%s' is not a code reference
d1501 1
a1501 1
to be a code reference.  Either an anonymous subroutine, or a reference
a1503 5
=item overload arg '%s' is invalid

(W) C<use overload> was passed an argument it did not
recognize.  Did you mistype an operator?

d1506 1
a1506 1
=head1 BUGS AND PITFALLS
d1508 3
a1510 75
=over

=item *

No warning is issued for invalid C<use overload> keys.
Such errors are not always obvious:

        use overload "+0" => sub { ...; },   # should be "0+"
            "not" => sub { ...; };           # should be "!"

(Bug #74098)

=item *

A pitfall when fallback is TRUE and Perl resorts to a built-in
implementation of an operator is that some operators have more
than one semantic, for example C<|>:

        use overload '0+' => sub { $_[0]->{n}; },
            fallback => 1;
        my $x = bless { n => 4 }, "main";
        my $y = bless { n => 8 }, "main";
        print $x | $y, "\n";

You might expect this to output "12".
In fact, it prints "<": the ASCII result of treating "|"
as a bitwise string operator - that is, the result of treating
the operands as the strings "4" and "8" rather than numbers.
The fact that numify (C<0+>) is implemented but stringify
(C<"">) isn't makes no difference since the latter is simply
autogenerated from the former.

The only way to change this is to provide your own subroutine
for C<'|'>.

=item *

Magic autogeneration increases the potential for inadvertently
creating self-referential structures.
Currently Perl will not free self-referential
structures until cycles are explicitly broken.
For example,

    use overload '+' => 'add';
    sub add { bless [ \$_[0], \$_[1] ] };

is asking for trouble, since

    $obj += $y;

will effectively become

    $obj = add($obj, $y, undef);

with the same result as

    $obj = [\$obj, \$foo];

Even if no I<explicit> assignment-variants of operators are present in
the script, they may be generated by the optimizer.
For example,

    "obj = $obj\n"

may be optimized to

    my $tmp = 'obj = ' . $obj;  $tmp .= "\n";

=item *

Because it is used for overloading, the per-package hash
C<%OVERLOAD> now has a special meaning in Perl.
The symbol table is filled with names looking like line-noise.

=item *
d1513 1
a1513 1
C<fallback> is present (possibly undefined).  This may create
d1517 2
a1518 1
=item *
d1520 3
a1522 9
Before Perl 5.14, the relation between overloading and tie()ing was broken.
Overloading was triggered or not based on the I<previous> class of the
tie()d variable.

This happened because the presence of overloading was checked
too early, before any tie()d access was attempted.  If the
class of the value FETCH()ed from the tied variable does not
change, a simple workaround for code that is to run on older Perl
versions is to access the value (via C<() = $foo> or some such)
d1526 1
a1526 1
=item *
d1530 2
a1531 1
=back
@


1.1.1.13
log
@Import perl-5.18.2

OK espie@@ sthen@@ deraadt@@
@
text
@d3 1
a3 1
our $VERSION = '1.22';
d34 3
a36 1
  *{$package . "::(("} = \&nil; # Make it findable via fetchmethod.
d39 1
a39 4
      for my $sym (*{$package . "::()"}) {
	*$sym = \&nil; # Make it findable via fetchmethod.
	$$sym = $arg{$_};
      }
d44 1
a44 1
      if (not ref $sub) {
d52 1
d64 1
a65 1
  *{$package . "::(("} = \&nil;
d67 5
a71 3
      warnings::warnif("overload arg '$_' is invalid")
        unless $ops_seen{$_};
      delete $ {$package . "::"}{$_ eq 'fallback' ? '()' : "(" .$_};
d78 1
a78 1
  mycan ($package, '()') || mycan ($package, '((');
d501 3
d939 4
a942 4
Note that in Perl version prior to 5.18 inheritance of the C<fallback> key
was not governed by the above rules.  The value of C<fallback> in the first 
overloaded ancestor was used.  This was fixed in 5.18 to follow the usual
rules of inheritance.
d1051 4
a1054 1
definitions, and changes in @@ISA.
d1064 18
a1081 6
If a package uses overload, it carries a special flag.  This flag is also
set when new function are defined or @@ISA is modified.  There will be a
slight speed penalty on the very first operation thereafter that supports
overloading, while the overload tables are updated.  If there is no
overloading present, the flag is turned off.  Thus the only speed penalty
thereafter is the checking of this flag.
d1254 1
a1254 1
implementation for L</C<nomethod>>.  In this example the C<nomethod>
d1612 10
d1678 2
a1683 3
This bug was fixed in Perl 5.18, but may still trip you up if you are using
older versions:

a1705 4

=item *

The range operator C<..> cannot be overloaded.
@


