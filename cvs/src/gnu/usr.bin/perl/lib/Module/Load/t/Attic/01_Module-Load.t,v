head	1.2;
access;
symbols
	OPENBSD_4_8:1.1.1.2.0.4
	OPENBSD_4_8_BASE:1.1.1.2
	OPENBSD_4_7:1.1.1.2.0.2
	OPENBSD_4_7_BASE:1.1.1.2
	PERL_5_10_1:1.1.1.2
	OPENBSD_4_6:1.1.1.1.0.6
	OPENBSD_4_6_BASE:1.1.1.1
	OPENBSD_4_5:1.1.1.1.0.2
	OPENBSD_4_5_BASE:1.1.1.1
	PERL_5_10_0:1.1.1.1
	CPAN:1.1.1;
locks; strict;
comment	@# @;
expand	@o@;


1.2
date	2010.09.24.14.59.46;	author millert;	state dead;
branches;
next	1.1;

1.1
date	2008.09.29.17.18.39;	author millert;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	2008.09.29.17.18.39;	author millert;	state Exp;
branches;
next	1.1.1.2;

1.1.1.2
date	2009.10.12.18.11.00;	author millert;	state Exp;
branches;
next	;


desc
@@


1.2
log
@remove files no longer in perl 5.12.2 (or that have moved)
@
text
@### Module::Load test suite ###
BEGIN { 
    if( $ENV{PERL_CORE} ) {
        chdir '../lib/Module/Load' if -d '../lib/Module/Load';
        unshift @@INC, '../../..';
    }
} 

BEGIN { chdir 't' if -d 't' }

use strict;
use lib qw[../lib to_load];
use Module::Load;
use Test::More tests => 13;


{
    my $mod = 'Must::Be::Loaded';
    my $file = Module::Load::_to_file($mod,1);

    eval { load $mod };

    is( $@@, '', qq[Loading module '$mod'] );
    ok( defined($INC{$file}), q[... found in %INC] );
}

{
    my $mod = 'LoadMe.pl';
    my $file = Module::Load::_to_file($mod);

    eval { load $mod };

    is( $@@, '', qq[Loading File '$mod'] );
    ok( defined($INC{$file}), q[... found in %INC] );
}

{
    my $mod = 'LoadIt';
    my $file = Module::Load::_to_file($mod,1);

    eval { load $mod };

    is( $@@, '', qq[Loading Ambigious Module '$mod'] );
    ok( defined($INC{$file}), q[... found in %INC] );
}

{
    my $mod = 'ToBeLoaded';
    my $file = Module::Load::_to_file($mod);

    eval { load $mod };

    is( $@@, '', qq[Loading Ambigious File '$mod'] );
    ok( defined($INC{$file}), q[... found in %INC] );
}

### Test importing functions ###
{   my $mod     = 'TestModule';
    my @@funcs   = qw[func1 func2];
    
    eval { load $mod, @@funcs };
    is( $@@, '', qq[Loaded exporter module '$mod'] );
    
    for my $func (@@funcs) {
        ok( $mod->can($func),           "$mod -> can( $func )" );
        ok( __PACKAGE__->can($func),    "we -> can ( $func )"  ); 
    }        
}    
@


1.1
log
@Initial revision
@
text
@@


1.1.1.1
log
@import perl 5.10.0 from CPAN
@
text
@@


1.1.1.2
log
@import perl 5.10.1
@
text
@d2 1
a2 1
BEGIN {
d7 1
a7 1
}
d14 16
a29 1
use Test::More 'no_plan';
d31 1
a31 11
### test loading files & modules
{   my @@Map = (
        # module               flag diagnostic
        [q|Must::Be::Loaded|,   1,  'module'],
        [q|LoadMe.pl|,          0,  'file'  ],
        [q|LoadIt|,             1,  'ambiguous module'  ],
        [q|ToBeLoaded|,         0,  'ambiguous file'    ],
    );

    for my $aref (@@Map) {
        my($mod, $flag, $diag) = @@$aref;
d33 3
a35 1
        my $file = Module::Load::_to_file($mod, $flag);
d37 3
a39 1
        eval { load $mod };
d41 14
a54 3
        is( $@@, '',                 qq[Loading $diag '$mod' $@@] );
        ok( defined($INC{$file}),   qq[  '$file' found in \%INC] );
    }
d60 1
a60 1

d63 1
a63 5

    ### test if import gets called properly
    ok( $mod->imported,                 "   ->import() was called" );

    ### test if functions get exported
d65 4
a68 4
        ok( $mod->can($func),           "   $mod->can( $func )" );
        ok( __PACKAGE__->can($func),    "   we ->can ( $func )" );
    }
}
@

