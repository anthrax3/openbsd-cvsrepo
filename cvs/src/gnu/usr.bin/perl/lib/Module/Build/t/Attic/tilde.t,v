head	1.2;
access;
symbols
	OPENBSD_4_8:1.1.1.2.0.4
	OPENBSD_4_8_BASE:1.1.1.2
	OPENBSD_4_7:1.1.1.2.0.2
	OPENBSD_4_7_BASE:1.1.1.2
	PERL_5_10_1:1.1.1.2
	OPENBSD_4_6:1.1.1.1.0.6
	OPENBSD_4_6_BASE:1.1.1.1
	OPENBSD_4_5:1.1.1.1.0.2
	OPENBSD_4_5_BASE:1.1.1.1
	PERL_5_10_0:1.1.1.1
	CPAN:1.1.1;
locks; strict;
comment	@# @;
expand	@o@;


1.2
date	2010.09.24.14.59.45;	author millert;	state dead;
branches;
next	1.1;

1.1
date	2008.09.29.17.18.39;	author millert;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	2008.09.29.17.18.39;	author millert;	state Exp;
branches;
next	1.1.1.2;

1.1.1.2
date	2009.10.12.18.11.01;	author millert;	state Exp;
branches;
next	;


desc
@@


1.2
log
@remove files no longer in perl 5.12.2 (or that have moved)
@
text
@#!/usr/bin/perl -w

# Test ~ expansion from command line arguments.

use strict;
use lib $ENV{PERL_CORE} ? '../lib/Module/Build/t/lib' : 't/lib';
use MBTest tests => 15;

use Cwd ();
my $cwd = Cwd::cwd;
my $tmp = MBTest->tmpdir;

use DistGen;
my $dist = DistGen->new( dir => $tmp );
$dist->regen;

chdir( $dist->dirname ) or die "Can't chdir to '@@{[$dist->dirname]}': $!";


use Module::Build;

sub run_sample {
    my @@args = @@_;

    local $Test::Builder::Level = $Test::Builder::Level + 1;

    $dist->clean;

    my $mb;
    stdout_of( sub {
      $mb = Module::Build->new_from_context( @@args );
    } );

    return $mb;
}


my $p = 'install_base';

SKIP: {
    my $home = $ENV{HOME} ? $ENV{HOME} : undef;
    skip "Needs case and syntax tweaks for VMS", 14 if $^O eq 'VMS';
    unless (defined $home) {
      my @@info = eval { getpwuid $> };
      skip "No home directory for tilde-expansion tests", 14 if $@@;
      $home = $info[7];
    }

    is( run_sample( $p => '~'     )->$p(),  $home );

    is( run_sample( $p => '~/foo' )->$p(),  "$home/foo" );

    is( run_sample( $p => '~~'    )->$p(),  '~~' );

    is( run_sample( $p => '~ foo' )->$p(),  '~ foo' );

    is( run_sample( $p => '~/ foo')->$p(),  "$home/ foo" );
      
    is( run_sample( $p => '~/fo o')->$p(),  "$home/fo o" );

    is( run_sample( $p => 'foo~'  )->$p(),  'foo~' );

    is( run_sample( prefix => '~' )->prefix,
	$home );

    my $mb = run_sample( install_path => { html => '~/html',
					   lib  => '~/lib'   }
		       );
    is( $mb->install_destination('lib'),  "$home/lib" );
    # 'html' is translated to 'binhtml' & 'libhtml'
    is( $mb->install_destination('binhtml'), "$home/html" );
    is( $mb->install_destination('libhtml'), "$home/html" );

    $mb = run_sample( install_path => { lib => '~/lib' } );
    is( $mb->install_destination('lib'),  "$home/lib" );

    $mb = run_sample( destdir => '~' );
    is( $mb->destdir,           $home );

    $mb->$p('~');
    is( $mb->$p(),      '~', 'API does not expand tildes' );
}

# Again, with named users
SKIP: {
    skip "Needs case and syntax tweaks for VMS", 1 if $^O eq 'VMS';
    my @@info = eval { getpwuid $> };
    skip "No home directory for tilde-expansion tests", 1 if $@@;
    my ($me, $home) = @@info[0,7];
    
    is( run_sample( $p => "~$me/foo")->$p(),  "$home/foo" );
}


# cleanup
chdir( $cwd ) or die "Can''t chdir to '$cwd': $!";
$dist->remove;

use File::Path;
rmtree( $tmp );
@


1.1
log
@Initial revision
@
text
@@


1.1.1.1
log
@import perl 5.10.0 from CPAN
@
text
@@


1.1.1.2
log
@import perl 5.10.1
@
text
@d7 1
a7 4
use MBTest tests => 18;

use_ok 'Module::Build';
ensure_blib('Module::Build');
d9 2
d17 2
a18 1
$dist->chdir_in;
d20 1
d42 1
a42 7

    if ($^O eq 'VMS') {
        # Convert the path to UNIX format, trim off the trailing slash
        $home = VMS::Filespec::unixify($home);
        $home =~ s#/$##;
    }

d45 1
a45 1
      skip "No home directory for tilde-expansion tests", 15 if $@@;
a65 7
    # Test when HOME is different from getpwuid(), as in sudo.
    {
        local $ENV{HOME} = '/wibble/whomp';

        is( run_sample( $p => '~' )->$p(),    "/wibble/whomp" );
    }

d86 1
d91 1
a91 10
    my $expected = "$home/foo";

    if ($^O eq 'VMS') {
        # Convert the path to UNIX format and trim off the trailing slash
        $home = VMS::Filespec::unixify($home);
        $home =~ s#/$##;
        $expected = $home . '/../[^/]+' . '/foo';
    }

    like( run_sample( $p => "~$me/foo")->$p(),  qr($expected)i );
d96 1
d98 3
@

