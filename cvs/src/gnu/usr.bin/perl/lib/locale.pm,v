head	1.7;
access;
symbols
	OPENBSD_6_0:1.6.0.10
	OPENBSD_6_0_BASE:1.6
	OPENBSD_5_9:1.6.0.4
	OPENBSD_5_9_BASE:1.6
	OPENBSD_5_8:1.6.0.6
	OPENBSD_5_8_BASE:1.6
	PERL_5_20_2:1.1.1.6
	OPENBSD_5_7:1.6.0.2
	OPENBSD_5_7_BASE:1.6
	PERL_5_20_1:1.1.1.6
	OPENBSD_5_6:1.5.0.4
	OPENBSD_5_6_BASE:1.5
	PERL_5_18_2:1.1.1.5
	PERL:1.1.1
	OPENBSD_5_5:1.4.0.6
	OPENBSD_5_5_BASE:1.4
	OPENBSD_5_4:1.4.0.2
	OPENBSD_5_4_BASE:1.4
	PERL_5_16_3:1.1.1.4
	OPENBSD_5_3:1.3.0.42
	OPENBSD_5_3_BASE:1.3
	OPENBSD_5_2:1.3.0.40
	OPENBSD_5_2_BASE:1.3
	OPENBSD_5_1_BASE:1.3
	OPENBSD_5_1:1.3.0.38
	OPENBSD_5_0:1.3.0.36
	OPENBSD_5_0_BASE:1.3
	OPENBSD_4_9:1.3.0.34
	OPENBSD_4_9_BASE:1.3
	PERL_5_12_2:1.1.1.3
	OPENBSD_4_8:1.3.0.32
	OPENBSD_4_8_BASE:1.3
	OPENBSD_4_7:1.3.0.28
	OPENBSD_4_7_BASE:1.3
	PERL_5_10_1:1.1.1.3
	OPENBSD_4_6:1.3.0.30
	OPENBSD_4_6_BASE:1.3
	OPENBSD_4_5:1.3.0.26
	OPENBSD_4_5_BASE:1.3
	PERL_5_10_0:1.1.1.3
	OPENBSD_4_4:1.3.0.24
	OPENBSD_4_4_BASE:1.3
	OPENBSD_4_3:1.3.0.22
	OPENBSD_4_3_BASE:1.3
	OPENBSD_4_2:1.3.0.20
	OPENBSD_4_2_BASE:1.3
	OPENBSD_4_1:1.3.0.18
	OPENBSD_4_1_BASE:1.3
	OPENBSD_4_0:1.3.0.16
	OPENBSD_4_0_BASE:1.3
	PERL_5_8_8:1.1.1.3
	OPENBSD_3_9:1.3.0.14
	OPENBSD_3_9_BASE:1.3
	OPENBSD_3_8:1.3.0.12
	OPENBSD_3_8_BASE:1.3
	OPENBSD_3_7:1.3.0.10
	OPENBSD_3_7_BASE:1.3
	PERL_5_8_6:1.1.1.3
	OPENBSD_3_6:1.3.0.8
	OPENBSD_3_6_BASE:1.3
	PERL_5_8_5:1.1.1.3
	PERL_5_8_3:1.1.1.3
	OPENBSD_3_5:1.3.0.6
	OPENBSD_3_5_BASE:1.3
	PERL_5_8_2:1.1.1.3
	OPENBSD_3_4:1.3.0.4
	OPENBSD_3_4_BASE:1.3
	OPENBSD_3_3:1.3.0.2
	OPENBSD_3_3_BASE:1.3
	PERL_5_8_0:1.1.1.3
	OPENBSD_3_2:1.2.0.12
	OPENBSD_3_2_BASE:1.2
	OPENBSD_3_1:1.2.0.10
	OPENBSD_3_1_BASE:1.2
	OPENBSD_3_0:1.2.0.8
	OPENBSD_3_0_BASE:1.2
	PERL_5_6_1:1.1.1.2
	OPENBSD_2_9:1.2.0.6
	OPENBSD_2_9_BASE:1.2
	OPENBSD_2_8:1.2.0.4
	OPENBSD_2_8_BASE:1.2
	OPENBSD_2_7:1.2.0.2
	OPENBSD_2_7_BASE:1.2
	PERL_5_6_0:1.1.1.2
	OPENBSD_2_6:1.1.0.8
	OPENBSD_2_6_BASE:1.1
	PERL_500503:1.1.1.1
	CPAN:1.1.1
	OPENBSD_2_5:1.1.0.6
	OPENBSD_2_5_BASE:1.1
	OPENBSD_2_4:1.1.0.4
	OPENBSD_2_4_BASE:1.1
	OPENBSD_2_3:1.1.0.2
	OPENBSD_2_3_BASE:1.1;
locks; strict;
comment	@# @;
expand	@o@;


1.7
date	2017.02.05.00.32.15;	author afresh1;	state Exp;
branches;
next	1.6;
commitid	cxJ08BvJA9Pt2PTM;

1.6
date	2014.11.17.20.57.06;	author afresh1;	state Exp;
branches;
next	1.5;
commitid	QP75iYx42Uo7mMxO;

1.5
date	2014.03.24.15.05.27;	author afresh1;	state Exp;
branches;
next	1.4;

1.4
date	2013.03.25.20.40.55;	author sthen;	state Exp;
branches;
next	1.3;

1.3
date	2002.10.27.22.25.26;	author millert;	state Exp;
branches;
next	1.2;

1.2
date	2000.04.06.17.06.12;	author millert;	state Exp;
branches;
next	1.1;

1.1
date	97.11.30.07.57.02;	author millert;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	99.04.29.22.39.54;	author millert;	state Exp;
branches;
next	1.1.1.2;

1.1.1.2
date	2000.04.06.16.09.38;	author millert;	state Exp;
branches;
next	1.1.1.3;

1.1.1.3
date	2002.10.27.22.14.58;	author millert;	state Exp;
branches;
next	1.1.1.4;

1.1.1.4
date	2013.03.25.20.08.52;	author sthen;	state Exp;
branches;
next	1.1.1.5;

1.1.1.5
date	2014.03.24.14.59.03;	author afresh1;	state Exp;
branches;
next	1.1.1.6;

1.1.1.6
date	2014.11.17.20.53.07;	author afresh1;	state Exp;
branches;
next	;
commitid	B31cAbBIXiCqnL97;


desc
@perl 5.004_04
@


1.7
log
@Fix merge issues, remove excess files - match perl-5.24.1 dist
@
text
@package locale;

our $VERSION = '1.09';
use Config;

$Carp::Internal{ (__PACKAGE__) } = 1;

=head1 NAME

locale - Perl pragma to use or avoid POSIX locales for built-in operations

=head1 WARNING

DO NOT USE this pragma in scripts that have multiple
L<threads|threads> active.  The locale is not local to a single thread.
Another thread may change the locale at any time, which could cause at a
minimum that a given thread is operating in a locale it isn't expecting
to be in.  On some platforms, segfaults can also occur.  The locale
change need not be explicit; some operations cause perl to change the
locale itself.  You are vulnerable simply by having done a C<"use
locale">.

=head1 SYNOPSIS

    @@x = sort @@y;      # Native-platform/Unicode code point sort order
    {
        use locale;
        @@x = sort @@y;  # Locale-defined sort order
    }
    @@x = sort @@y;      # Native-platform/Unicode code point sort order
                       # again

=head1 DESCRIPTION

This pragma tells the compiler to enable (or disable) the use of POSIX
locales for built-in operations (for example, LC_CTYPE for regular
expressions, LC_COLLATE for string comparison, and LC_NUMERIC for number
formatting).  Each "use locale" or "no locale"
affects statements to the end of the enclosing BLOCK.

See L<perllocale> for more detailed information on how Perl supports
locales.

On systems that don't have locales, this pragma will cause your operations
to behave as if in the "C" locale; attempts to change the locale will fail.

=cut

# A separate bit is used for each of the two forms of the pragma, to save
# having to look at %^H for the normal case of a plain 'use locale' without an
# argument.

$locale::hint_bits = 0x4;
$locale::partial_hint_bits = 0x10;  # If pragma has an argument

# The pseudo-category :characters consists of 2 real ones; but it also is
# given its own number, -1, because in the complement form it also has the
# side effect of "use feature 'unicode_strings'"

sub import {
    shift;  # should be 'locale'; not checked

    $^H{locale} = 0 unless defined $^H{locale};
    if (! @@_) { # If no parameter, use the plain form that changes all categories
        $^H |= $locale::hint_bits;

    }
    else {
        my @@categories = ( qw(:ctype :collate :messages
                              :numeric :monetary :time) );
        for (my $i = 0; $i < @@_; $i++) {
            my $arg = $_[$i];
            $complement = $arg =~ s/ : ( ! | not_ ) /:/x;
            if (! grep { $arg eq $_ } @@categories, ":characters") {
                require Carp;
                Carp::croak("Unknown parameter '$_[$i]' to 'use locale'");
            }

            if ($complement) {
                if ($i != 0 || $i < @@_ - 1)  {
                    require Carp;
                    Carp::croak("Only one argument to 'use locale' allowed"
                                . "if is $complement");
                }

                if ($arg eq ':characters') {
                    push @@_, grep { $_ ne ':ctype' && $_ ne ':collate' }
                                  @@categories;
                    # We add 1 to the category number;  This category number
                    # is -1
                    $^H{locale} |= (1 << 0);
                }
                else {
                    push @@_, grep { $_ ne $arg } @@categories;
                }
                next;
            }
            elsif ($arg eq ':characters') {
                push @@_, ':ctype', ':collate';
                next;
            }

            $^H |= $locale::partial_hint_bits;

            # This form of the pragma overrides the other
            $^H &= ~$locale::hint_bits;

            $arg =~ s/^://;

            eval { require POSIX; import POSIX 'locale_h'; };

            # Map our names to the ones defined by POSIX
            my $LC = "LC_" . uc($arg);

            my $bit = eval "&POSIX::$LC";
            if (defined $bit) { # XXX Should we warn that this category isn't
                                # supported on this platform, or make it
                                # always be the C locale?

                # Verify our assumption.
                if (! ($bit >= 0 && $bit < 31)) {
                    require Carp;
                    Carp::croak("Cannot have ':$arg' parameter to 'use locale'"
                              . " on this platform.  Use the 'perlbug' utility"
                              . " to report this problem, or send email to"
                              . " 'perlbug\@@perl.org'.  $LC=$bit");
                }

                # 1 is added so that the pseudo-category :characters, which is
                # -1, comes out 0.
                $^H{locale} |= 1 << ($bit + 1);
            }
        }
    }

}

sub unimport {
    $^H &= ~($locale::hint_bits|$locale::partial_hint_bits);
    $^H{locale} = 0;
}

1;
@


1.6
log
@Fix merge conflicts, remove extra files, match upstream perl-5.20.1

ok deraadt@@ sthen@@ espie@@ miod@@
@
text
@d3 1
a3 1
our $VERSION = '1.03';
d12 11
d49 3
a51 6
# A separate bit is used for each of the two forms of the pragma, as they are
# mostly independent, and interact with each other and the unicode_strings
# feature.  This allows for fast determination of which one(s) of the three
# are to be used at any given point, and no code has to be written to deal
# with coming in and out of scopes--it falls automatically out from the hint
# handling
d54 5
a58 1
$locale::not_chars_hint_bits = 0x10;
d63 41
a103 4
    my $found_not_chars = 0;
    while (defined (my $arg = shift)) {
        if ($arg eq ":not_characters") {
            $^H |= $locale::not_chars_hint_bits;
d107 26
a132 5
            $found_not_chars = 1;
        }
        else {
            require Carp;
            Carp::croak("Unknown parameter '$arg' to 'use locale'");
a135 2
    # Use the plain form if not doing the :not_characters one.
    $^H |= $locale::hint_bits unless $found_not_chars;
d139 2
a140 1
    $^H &= ~($locale::hint_bits|$locale::not_chars_hint_bits);
@


1.5
log
@Merge perl-5.18.2 plus local patches, remove old files

OK espie@@ sthen@@ deraadt@@
@
text
@d3 1
a3 1
our $VERSION = '1.02';
d14 1
a14 1
    @@x = sort @@y;	# Unicode sorting order
d17 1
a17 1
        @@x = sort @@y;   # Locale-defined sorting order
d19 2
a20 1
    @@x = sort @@y;	# Unicode sorting order again
a29 18
Starting in Perl 5.16, a hybrid mode for this pragma is available,

    use locale ':not_characters';

which enables only the portions of locales that don't affect the character
set (that is, all except LC_COLLATE and LC_CTYPE).  This is useful when mixing
Unicode and locales, including UTF-8 locales.

    use locale ':not_characters';
    use open ":locale";           # Convert I/O to/from Unicode
    use POSIX qw(locale_h);       # Import the LC_ALL constant
    setlocale(LC_ALL, "");        # Required for the next statement
                                  # to take effect
    printf "%.2f\n", 12345.67'    # Locale-defined formatting
    @@x = sort @@y;                 # Unicode-defined sorting order.
                                  # (Note that you will get better
                                  # results using Unicode::Collate.)

d33 2
a34 7
=head1 NOTE

If your system does not support locales, then loading this module will
cause the program to die with a message:

    "Your vendor does not support locales, you cannot use the locale
    module."
a49 5

    if(!$Config{d_setlocale}) {
        ## No locale support found on this Perl, giving up:
        die('Your vendor does not support locales, you cannot use the locale module.');
    }
@


1.4
log
@merge/resolve conflicts
(some more to do after this one)
@
text
@d3 2
a4 1
our $VERSION = '1.01';
d50 8
d72 6
@


1.3
log
@Resolve conflicts, remove old files, merge local changes
@
text
@d3 3
a5 1
our $VERSION = '1.00';
d9 1
a9 1
locale - Perl pragma to use and avoid POSIX locales for built-in operations
d13 1
a13 1
    @@x = sort @@y;	# ASCII sorting order
d18 1
a18 1
    @@x = sort @@y;	# ASCII sorting order again
d23 3
a25 2
locales for built-in operations (LC_CTYPE for regular expressions, and
LC_COLLATE for string comparison).  Each "use locale" or "no locale"
d28 18
d51 7
d59 1
d62 18
a79 1
    $^H |= $locale::hint_bits;
d83 1
a83 1
    $^H &= ~$locale::hint_bits;
@


1.2
log
@perl-5.6.0 + local changes
@
text
@d3 2
d30 1
a30 1
$locale::hint_bits = 0x800;
@


1.1
log
@perl 5.004_04
@
text
@d23 3
d28 2
d31 1
a31 1
    $^H |= 0x800;
d35 1
a35 1
    $^H &= ~0x800;
@


1.1.1.1
log
@perl5.005_03
@
text
@@


1.1.1.2
log
@virgin perl 5.6.0
@
text
@a22 3
See L<perllocale> for more detailed information on how Perl supports
locales.

a24 2
$locale::hint_bits = 0x800;

d26 1
a26 1
    $^H |= $locale::hint_bits;
d30 1
a30 1
    $^H &= ~$locale::hint_bits;
@


1.1.1.3
log
@stock perl 5.8.0 from CPAN
@
text
@a2 2
our $VERSION = '1.00';

d28 1
a28 1
$locale::hint_bits = 0x4;
@


1.1.1.4
log
@import perl 5.16.3 from CPAN - worked on by Andrew Fresh and myself
@
text
@d3 1
a3 3
our $VERSION = '1.01';

$Carp::Internal{ (__PACKAGE__) } = 1;
d7 1
a7 1
locale - Perl pragma to use or avoid POSIX locales for built-in operations
d11 1
a11 1
    @@x = sort @@y;	# Unicode sorting order
d16 1
a16 1
    @@x = sort @@y;	# Unicode sorting order again
d21 2
a22 3
locales for built-in operations (for example, LC_CTYPE for regular
expressions, LC_COLLATE for string comparison, and LC_NUMERIC for number
formatting).  Each "use locale" or "no locale"
a24 18
Starting in Perl 5.16, a hybrid mode for this pragma is available,

    use locale ':not_characters';

which enables only the portions of locales that don't affect the character
set (that is, all except LC_COLLATE and LC_CTYPE).  This is useful when mixing
Unicode and locales, including UTF-8 locales.

    use locale ':not_characters';
    use open ":locale";           # Convert I/O to/from Unicode
    use POSIX qw(locale_h);       # Import the LC_ALL constant
    setlocale(LC_ALL, "");        # Required for the next statement
                                  # to take effect
    printf "%.2f\n", 12345.67'    # Locale-defined formatting
    @@x = sort @@y;                 # Unicode-defined sorting order.
                                  # (Note that you will get better
                                  # results using Unicode::Collate.)

a29 7
# A separate bit is used for each of the two forms of the pragma, as they are
# mostly independent, and interact with each other and the unicode_strings
# feature.  This allows for fast determination of which one(s) of the three
# are to be used at any given point, and no code has to be written to deal
# with coming in and out of scopes--it falls automatically out from the hint
# handling

a30 1
$locale::not_chars_hint_bits = 0x10;
d33 1
a33 18
    shift;  # should be 'locale'; not checked
    my $found_not_chars = 0;
    while (defined (my $arg = shift)) {
        if ($arg eq ":not_characters") {
            $^H |= $locale::not_chars_hint_bits;

            # This form of the pragma overrides the other
            $^H &= ~$locale::hint_bits;
            $found_not_chars = 1;
        }
        else {
            require Carp;
            Carp::croak("Unknown parameter '$arg' to 'use locale'");
        }
    }

    # Use the plain form if not doing the :not_characters one.
    $^H |= $locale::hint_bits unless $found_not_chars;
d37 1
a37 1
    $^H &= ~($locale::hint_bits|$locale::not_chars_hint_bits);
@


1.1.1.5
log
@Import perl-5.18.2

OK espie@@ sthen@@ deraadt@@
@
text
@d3 1
a3 2
our $VERSION = '1.02';
use Config;
a48 8
=head1 NOTE

If your system does not support locales, then loading this module will
cause the program to die with a message:

    "Your vendor does not support locales, you cannot use the locale
    module."

a62 6

    if(!$Config{d_setlocale}) {
        ## No locale support found on this Perl, giving up:
        die('Your vendor does not support locales, you cannot use the locale module.');
    }

@


1.1.1.6
log
@Import perl-5.20.1
@
text
@d3 1
a3 1
our $VERSION = '1.03';
d14 1
a14 1
    @@x = sort @@y;      # Native-platform/Unicode code point sort order
d17 1
a17 1
        @@x = sort @@y;  # Locale-defined sort order
d19 1
a19 2
    @@x = sort @@y;      # Native-platform/Unicode code point sort order
                       # again
d29 18
d50 7
a56 2
On systems that don't have locales, this pragma will cause your operations
to behave as if in the "C" locale; attempts to change the locale will fail.
d72 5
@


