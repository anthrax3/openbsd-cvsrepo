head	1.4;
access;
symbols
	OPENBSD_4_8:1.3.0.4
	OPENBSD_4_8_BASE:1.3
	OPENBSD_4_7:1.3.0.2
	OPENBSD_4_7_BASE:1.3
	PERL_5_10_1:1.1.1.3
	OPENBSD_4_6:1.2.0.6
	OPENBSD_4_6_BASE:1.2
	OPENBSD_4_5:1.2.0.2
	OPENBSD_4_5_BASE:1.2
	PERL_5_10_0:1.1.1.2
	OPENBSD_4_4:1.1.0.22
	OPENBSD_4_4_BASE:1.1
	OPENBSD_4_3:1.1.0.20
	OPENBSD_4_3_BASE:1.1
	OPENBSD_4_2:1.1.0.18
	OPENBSD_4_2_BASE:1.1
	OPENBSD_4_1:1.1.0.16
	OPENBSD_4_1_BASE:1.1
	OPENBSD_4_0:1.1.0.14
	OPENBSD_4_0_BASE:1.1
	PERL_5_8_8:1.1.1.1
	OPENBSD_3_9:1.1.0.12
	OPENBSD_3_9_BASE:1.1
	OPENBSD_3_8:1.1.0.10
	OPENBSD_3_8_BASE:1.1
	OPENBSD_3_7:1.1.0.8
	OPENBSD_3_7_BASE:1.1
	PERL_5_8_6:1.1.1.1
	OPENBSD_3_6:1.1.0.6
	OPENBSD_3_6_BASE:1.1
	PERL_5_8_5:1.1.1.1
	PERL_5_8_3:1.1.1.1
	OPENBSD_3_5:1.1.0.4
	OPENBSD_3_5_BASE:1.1
	PERL_5_8_2:1.1.1.1
	CPAN:1.1.1
	OPENBSD_3_4:1.1.0.2
	OPENBSD_3_4_BASE:1.1;
locks; strict;
comment	@# @;


1.4
date	2010.09.24.14.59.35;	author millert;	state dead;
branches;
next	1.3;

1.3
date	2009.10.12.18.24.39;	author millert;	state Exp;
branches;
next	1.2;

1.2
date	2008.09.29.17.36.10;	author millert;	state Exp;
branches;
next	1.1;

1.1
date	2003.07.23.01.42.49;	author millert;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	2003.12.03.02.44.01;	author millert;	state Exp;
branches;
next	1.1.1.2;

1.1.1.2
date	2008.09.29.17.18.32;	author millert;	state Exp;
branches;
next	1.1.1.3;

1.1.1.3
date	2009.10.12.18.10.59;	author millert;	state Exp;
branches;
next	;


desc
@@


1.4
log
@remove files no longer in perl 5.12.2 (or that have moved)
@
text
@# test CGI::Util::escape
use Test::More tests => 4;
use_ok("CGI::Util");

# Byte strings should be escaped byte by byte:
# 1) not a valid utf-8 sequence:
my $uri = "pe\x{f8}\x{ed}\x{e8}ko.ogg";
is(CGI::Util::escape($uri), "pe%F8%ED%E8ko.ogg", "Escape a Latin-2 string");

# 2) is a valid utf-8 sequence, but not an UTF-8-flagged string
#    This happens often: people write utf-8 strings to source, but forget
#    to tell perl about it by "use utf8;"--this is obviously wrong, but we
#    have to handle it gracefully, for compatibility with GCI.pm under
#    perl-5.8.x
#
$uri = "pe\x{c5}\x{99}\x{c3}\x{ad}\x{c4}\x{8d}ko.ogg";
is(CGI::Util::escape($uri), "pe%C5%99%C3%AD%C4%8Dko.ogg",
	"Escape an utf-8 byte string");

SKIP:
{
	# This tests CGI::Util::escape() when fed with UTF-8-flagged string
	# -- dankogai
	skip("Unicode strings not available in $]", 1) if ($] < 5.008);
	$uri = "\x{5c0f}\x{98fc} \x{5f3e}.txt"; # KOGAI, Dan, in Kanji
	is(CGI::Util::escape($uri), "%E5%B0%8F%E9%A3%BC%20%E5%BC%BE.txt",
   		"Escape string with UTF-8 flag");
}
__END__
@


1.3
log
@Merge in perl 5.10.1
@
text
@@


1.2
log
@fix conflicts and merge in local changes to perl 5.10.0
@
text
@d1 14
d16 3
a18 8
# This tests CGI::Util::escape() when fed with UTF-8-flagged string
# -- dankogai
BEGIN {
    if ($] < 5.008) {
       print "1..0 # \$] == $] < 5.008\n";
       exit(0);
    }
}
d20 8
a27 9
use Test::More tests => 2;
use_ok("CGI::Util");
my $uri = "\x{5c0f}\x{98fc} \x{5f3e}.txt"; # KOGAI, Dan, in Kanji
if (ord('A') == 193) { # EBCDIC.
    is(CGI::Util::escape($uri), "%FC%C3%A0%EE%F9%E5%E7%F8%20%FC%C3%C7%CA.txt",
       "# Escape string with UTF-8 (UTF-EBCDIC) flag");
} else {
    is(CGI::Util::escape($uri), "%E5%B0%8F%E9%A3%BC%20%E5%BC%BE.txt",
       "# Escape string with UTF-8 flag");
@


1.1
log
@Update CGI module to version 2.98; fixes a cross-site scripting bug
@
text
@d14 7
a20 2
is(CGI::Util::escape($uri), "%E5%B0%8F%E9%A3%BC%20%E5%BC%BE.txt",
   "# Escape string with UTF-8 flag");
@


1.1.1.1
log
@perl 5.8.2 from CPAN
@
text
@@


1.1.1.2
log
@import perl 5.10.0 from CPAN
@
text
@d14 2
a15 7
if (ord('A') == 193) { # EBCDIC.
    is(CGI::Util::escape($uri), "%FC%C3%A0%EE%F9%E5%E7%F8%20%FC%C3%C7%CA.txt",
       "# Escape string with UTF-8 (UTF-EBCDIC) flag");
} else {
    is(CGI::Util::escape($uri), "%E5%B0%8F%E9%A3%BC%20%E5%BC%BE.txt",
       "# Escape string with UTF-8 flag");
}
@


1.1.1.3
log
@import perl 5.10.1
@
text
@a0 14
# test CGI::Util::escape
use Test::More tests => 4;
use_ok("CGI::Util");

# Byte strings should be escaped byte by byte:
# 1) not a valid utf-8 sequence:
my $uri = "pe\x{f8}\x{ed}\x{e8}ko.ogg";
is(CGI::Util::escape($uri), "pe%F8%ED%E8ko.ogg", "Escape a Latin-2 string");

# 2) is a valid utf-8 sequence, but not an UTF-8-flagged string
#    This happens often: people write utf-8 strings to source, but forget
#    to tell perl about it by "use utf8;"--this is obviously wrong, but we
#    have to handle it gracefully, for compatibility with GCI.pm under
#    perl-5.8.x
d2 8
a9 3
$uri = "pe\x{c5}\x{99}\x{c3}\x{ad}\x{c4}\x{8d}ko.ogg";
is(CGI::Util::escape($uri), "pe%C5%99%C3%AD%C4%8Dko.ogg",
	"Escape an utf-8 byte string");
d11 9
a19 8
SKIP:
{
	# This tests CGI::Util::escape() when fed with UTF-8-flagged string
	# -- dankogai
	skip("Unicode strings not available in $]", 1) if ($] < 5.008);
	$uri = "\x{5c0f}\x{98fc} \x{5f3e}.txt"; # KOGAI, Dan, in Kanji
	is(CGI::Util::escape($uri), "%E5%B0%8F%E9%A3%BC%20%E5%BC%BE.txt",
   		"Escape string with UTF-8 flag");
@


