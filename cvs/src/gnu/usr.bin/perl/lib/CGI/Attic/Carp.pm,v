head	1.13;
access;
symbols
	OPENBSD_4_8:1.12.0.4
	OPENBSD_4_8_BASE:1.12
	OPENBSD_4_7:1.12.0.2
	OPENBSD_4_7_BASE:1.12
	PERL_5_10_1:1.1.1.10
	OPENBSD_4_6:1.11.0.6
	OPENBSD_4_6_BASE:1.11
	OPENBSD_4_5:1.11.0.2
	OPENBSD_4_5_BASE:1.11
	PERL_5_10_0:1.1.1.9
	OPENBSD_4_4:1.10.0.10
	OPENBSD_4_4_BASE:1.10
	OPENBSD_4_3:1.10.0.8
	OPENBSD_4_3_BASE:1.10
	OPENBSD_4_2:1.10.0.6
	OPENBSD_4_2_BASE:1.10
	OPENBSD_4_1:1.10.0.4
	OPENBSD_4_1_BASE:1.10
	OPENBSD_4_0:1.10.0.2
	OPENBSD_4_0_BASE:1.10
	PERL_5_8_8:1.1.1.8
	OPENBSD_3_9:1.9.0.8
	OPENBSD_3_9_BASE:1.9
	OPENBSD_3_8:1.9.0.6
	OPENBSD_3_8_BASE:1.9
	OPENBSD_3_7:1.9.0.4
	OPENBSD_3_7_BASE:1.9
	PERL_5_8_6:1.1.1.7
	OPENBSD_3_6:1.9.0.2
	OPENBSD_3_6_BASE:1.9
	PERL_5_8_5:1.1.1.7
	PERL_5_8_3:1.1.1.6
	OPENBSD_3_5:1.7.0.2
	OPENBSD_3_5_BASE:1.7
	PERL_5_8_2:1.1.1.5
	OPENBSD_3_4:1.6.0.2
	OPENBSD_3_4_BASE:1.6
	OPENBSD_3_3:1.5.0.2
	OPENBSD_3_3_BASE:1.5
	PERL_5_8_0:1.1.1.4
	OPENBSD_3_2:1.4.0.6
	OPENBSD_3_2_BASE:1.4
	OPENBSD_3_1:1.4.0.4
	OPENBSD_3_1_BASE:1.4
	OPENBSD_3_0:1.4.0.2
	OPENBSD_3_0_BASE:1.4
	PERL_5_6_1:1.1.1.3
	OPENBSD_2_9:1.3.0.6
	OPENBSD_2_9_BASE:1.3
	OPENBSD_2_8:1.3.0.4
	OPENBSD_2_8_BASE:1.3
	OPENBSD_2_7:1.3.0.2
	OPENBSD_2_7_BASE:1.3
	PERL_5_6_0:1.1.1.2
	OPENBSD_2_6:1.2.0.2
	OPENBSD_2_6_BASE:1.2
	PERL_500503:1.1.1.1
	CPAN:1.1.1
	OPENBSD_2_5:1.1.0.6
	OPENBSD_2_5_BASE:1.1
	OPENBSD_2_4:1.1.0.4
	OPENBSD_2_4_BASE:1.1
	OPENBSD_2_3:1.1.0.2
	OPENBSD_2_3_BASE:1.1;
locks; strict;
comment	@# @;


1.13
date	2010.09.24.14.59.34;	author millert;	state dead;
branches;
next	1.12;

1.12
date	2009.10.12.18.24.38;	author millert;	state Exp;
branches;
next	1.11;

1.11
date	2008.09.29.17.36.10;	author millert;	state Exp;
branches;
next	1.10;

1.10
date	2006.03.28.19.23.05;	author millert;	state Exp;
branches;
next	1.9;

1.9
date	2004.08.09.18.09.30;	author millert;	state Exp;
branches;
next	1.8;

1.8
date	2004.04.07.21.33.05;	author millert;	state Exp;
branches;
next	1.7;

1.7
date	2003.12.03.03.02.36;	author millert;	state Exp;
branches;
next	1.6;

1.6
date	2003.07.23.01.42.49;	author millert;	state Exp;
branches;
next	1.5;

1.5
date	2002.10.27.22.25.26;	author millert;	state Exp;
branches;
next	1.4;

1.4
date	2001.05.24.18.35.27;	author millert;	state Exp;
branches;
next	1.3;

1.3
date	2000.04.06.17.06.20;	author millert;	state Exp;
branches;
next	1.2;

1.2
date	99.04.29.22.51.49;	author millert;	state Exp;
branches;
next	1.1;

1.1
date	97.11.30.07.57.16;	author millert;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	99.04.29.22.39.59;	author millert;	state Exp;
branches;
next	1.1.1.2;

1.1.1.2
date	2000.04.06.16.09.40;	author millert;	state Exp;
branches;
next	1.1.1.3;

1.1.1.3
date	2001.05.24.18.23.25;	author millert;	state Exp;
branches;
next	1.1.1.4;

1.1.1.4
date	2002.10.27.22.14.59;	author millert;	state Exp;
branches;
next	1.1.1.5;

1.1.1.5
date	2003.12.03.02.44.01;	author millert;	state Exp;
branches;
next	1.1.1.6;

1.1.1.6
date	2004.04.07.21.13.15;	author millert;	state Exp;
branches;
next	1.1.1.7;

1.1.1.7
date	2004.08.09.17.46.45;	author millert;	state Exp;
branches;
next	1.1.1.8;

1.1.1.8
date	2006.03.28.18.48.40;	author millert;	state Exp;
branches;
next	1.1.1.9;

1.1.1.9
date	2008.09.29.17.18.31;	author millert;	state Exp;
branches;
next	1.1.1.10;

1.1.1.10
date	2009.10.12.18.10.59;	author millert;	state Exp;
branches;
next	;


desc
@@


1.13
log
@remove files no longer in perl 5.12.2 (or that have moved)
@
text
@package CGI::Carp;

=head1 NAME

B<CGI::Carp> - CGI routines for writing to the HTTPD (or other) error log

=head1 SYNOPSIS

    use CGI::Carp;

    croak "We're outta here!";
    confess "It was my fault: $!";
    carp "It was your fault!";   
    warn "I'm confused";
    die  "I'm dying.\n";

    use CGI::Carp qw(cluck);
    cluck "I wouldn't do that if I were you";

    use CGI::Carp qw(fatalsToBrowser);
    die "Fatal error messages are now sent to browser";

=head1 DESCRIPTION

CGI scripts have a nasty habit of leaving warning messages in the error
logs that are neither time stamped nor fully identified.  Tracking down
the script that caused the error is a pain.  This fixes that.  Replace
the usual

    use Carp;

with

    use CGI::Carp

And the standard warn(), die (), croak(), confess() and carp() calls
will automagically be replaced with functions that write out nicely
time-stamped messages to the HTTP server error log.

For example:

   [Fri Nov 17 21:40:43 1995] test.pl: I'm confused at test.pl line 3.
   [Fri Nov 17 21:40:43 1995] test.pl: Got an error message: Permission denied.
   [Fri Nov 17 21:40:43 1995] test.pl: I'm dying.

=head1 REDIRECTING ERROR MESSAGES

By default, error messages are sent to STDERR.  Most HTTPD servers
direct STDERR to the server's error log.  Some applications may wish
to keep private error logs, distinct from the server's error log, or
they may wish to direct error messages to STDOUT so that the browser
will receive them.

The C<carpout()> function is provided for this purpose.  Since
carpout() is not exported by default, you must import it explicitly by
saying

   use CGI::Carp qw(carpout);

The carpout() function requires one argument, which should be a
reference to an open filehandle for writing errors.  It should be
called in a C<BEGIN> block at the top of the CGI application so that
compiler errors will be caught.  Example:

   BEGIN {
     use CGI::Carp qw(carpout);
     open(LOG, ">>/usr/local/cgi-logs/mycgi-log") or
       die("Unable to open mycgi-log: $!\n");
     carpout(LOG);
   }

carpout() does not handle file locking on the log for you at this point.

The real STDERR is not closed -- it is moved to CGI::Carp::SAVEERR.  Some
servers, when dealing with CGI scripts, close their connection to the
browser when the script closes STDOUT and STDERR.  CGI::Carp::SAVEERR is there to
prevent this from happening prematurely.

You can pass filehandles to carpout() in a variety of ways.  The "correct"
way according to Tom Christiansen is to pass a reference to a filehandle 
GLOB:

    carpout(\*LOG);

This looks weird to mere mortals however, so the following syntaxes are
accepted as well:

    carpout(LOG);
    carpout(main::LOG);
    carpout(main'LOG);
    carpout(\LOG);
    carpout(\'main::LOG');

    ... and so on

FileHandle and other objects work as well.

Use of carpout() is not great for performance, so it is recommended
for debugging purposes or for moderate-use applications.  A future
version of this module may delay redirecting STDERR until one of the
CGI::Carp methods is called to prevent the performance hit.

=head1 MAKING PERL ERRORS APPEAR IN THE BROWSER WINDOW

If you want to send fatal (die, confess) errors to the browser, ask to
import the special "fatalsToBrowser" subroutine:

    use CGI::Carp qw(fatalsToBrowser);
    die "Bad error here";

Fatal errors will now be echoed to the browser as well as to the log.  CGI::Carp
arranges to send a minimal HTTP header to the browser so that even errors that
occur in the early compile phase will be seen.
Nonfatal errors will still be directed to the log file only (unless redirected
with carpout).

Note that fatalsToBrowser does B<not> work with mod_perl version 2.0
and higher.

=head2 Changing the default message

By default, the software error message is followed by a note to
contact the Webmaster by e-mail with the time and date of the error.
If this message is not to your liking, you can change it using the
set_message() routine.  This is not imported by default; you should
import it on the use() line:

    use CGI::Carp qw(fatalsToBrowser set_message);
    set_message("It's not a bug, it's a feature!");

You may also pass in a code reference in order to create a custom
error message.  At run time, your code will be called with the text
of the error message that caused the script to die.  Example:

    use CGI::Carp qw(fatalsToBrowser set_message);
    BEGIN {
       sub handle_errors {
          my $msg = shift;
          print "<h1>Oh gosh</h1>";
          print "<p>Got an error: $msg</p>";
      }
      set_message(\&handle_errors);
    }

In order to correctly intercept compile-time errors, you should call
set_message() from within a BEGIN{} block.

=head1 DOING MORE THAN PRINTING A MESSAGE IN THE EVENT OF PERL ERRORS

If fatalsToBrowser in conjunction with set_message does not provide 
you with all of the functionality you need, you can go one step 
further by specifying a function to be executed any time a script
calls "die", has a syntax error, or dies unexpectedly at runtime
with a line like "undef->explode();". 

    use CGI::Carp qw(set_die_handler);
    BEGIN {
       sub handle_errors {
          my $msg = shift;
          print "content-type: text/html\n\n";
          print "<h1>Oh gosh</h1>";
          print "<p>Got an error: $msg</p>";

          #proceed to send an email to a system administrator,
          #write a detailed message to the browser and/or a log,
          #etc....
      }
      set_die_handler(\&handle_errors);
    }

Notice that if you use set_die_handler(), you must handle sending
HTML headers to the browser yourself if you are printing a message.

If you use set_die_handler(), you will most likely interfere with 
the behavior of fatalsToBrowser, so you must use this or that, not 
both. 

Using set_die_handler() sets SIG{__DIE__} (as does fatalsToBrowser),
and there is only one SIG{__DIE__}. This means that if you are 
attempting to set SIG{__DIE__} yourself, you may interfere with 
this module's functionality, or this module may interfere with 
your module's functionality.

=head1 MAKING WARNINGS APPEAR AS HTML COMMENTS

It is now also possible to make non-fatal errors appear as HTML
comments embedded in the output of your program.  To enable this
feature, export the new "warningsToBrowser" subroutine.  Since sending
warnings to the browser before the HTTP headers have been sent would
cause an error, any warnings are stored in an internal buffer until
you call the warningsToBrowser() subroutine with a true argument:

    use CGI::Carp qw(fatalsToBrowser warningsToBrowser);
    use CGI qw(:standard);
    print header();
    warningsToBrowser(1);

You may also give a false argument to warningsToBrowser() to prevent
warnings from being sent to the browser while you are printing some
content where HTML comments are not allowed:

    warningsToBrowser(0);    # disable warnings
    print "<script type=\"text/javascript\"><!--\n";
    print_some_javascript_code();
    print "//--></script>\n";
    warningsToBrowser(1);    # re-enable warnings

Note: In this respect warningsToBrowser() differs fundamentally from
fatalsToBrowser(), which you should never call yourself!

=head1 OVERRIDING THE NAME OF THE PROGRAM

CGI::Carp includes the name of the program that generated the error or
warning in the messages written to the log and the browser window.
Sometimes, Perl can get confused about what the actual name of the
executed program was.  In these cases, you can override the program
name that CGI::Carp will use for all messages.

The quick way to do that is to tell CGI::Carp the name of the program
in its use statement.  You can do that by adding
"name=cgi_carp_log_name" to your "use" statement.  For example:

    use CGI::Carp qw(name=cgi_carp_log_name);

.  If you want to change the program name partway through the program,
you can use the C<set_progname()> function instead.  It is not
exported by default, you must import it explicitly by saying

    use CGI::Carp qw(set_progname);

Once you've done that, you can change the logged name of the program
at any time by calling

    set_progname(new_program_name);

You can set the program back to the default by calling

    set_progname(undef);

Note that this override doesn't happen until after the program has
compiled, so any compile-time errors will still show up with the
non-overridden program name
  
=head1 CHANGE LOG

1.29 Patch from Peter Whaite to fix the unfixable problem of CGI::Carp
     not behaving correctly in an eval() context.

1.05 carpout() added and minor corrections by Marc Hedlund
     <hedlund@@best.com> on 11/26/95.

1.06 fatalsToBrowser() no longer aborts for fatal errors within
     eval() statements.

1.08 set_message() added and carpout() expanded to allow for FileHandle
     objects.

1.09 set_message() now allows users to pass a code REFERENCE for 
     really custom error messages.  croak and carp are now
     exported by default.  Thanks to Gunther Birznieks for the
     patches.

1.10 Patch from Chris Dean (ctdean@@cogit.com) to allow 
     module to run correctly under mod_perl.

1.11 Changed order of &gt; and &lt; escapes.

1.12 Changed die() on line 217 to CORE::die to avoid B<-w> warning.

1.13 Added cluck() to make the module orthogonal with Carp.
     More mod_perl related fixes.

1.20 Patch from Ilmari Karonen (perl@@itz.pp.sci.fi):  Added
     warningsToBrowser().  Replaced <CODE> tags with <PRE> in
     fatalsToBrowser() output.

1.23 ineval() now checks both $^S and inspects the message for the "eval" pattern
     (hack alert!) in order to accommodate various combinations of Perl and
     mod_perl.

1.24 Patch from Scott Gifford (sgifford@@suspectclass.com): Add support
     for overriding program name.

1.26 Replaced CORE::GLOBAL::die with the evil $SIG{__DIE__} because the
     former isn't working in some people's hands.  There is no such thing
     as reliable exception handling in Perl.

1.27 Replaced tell STDOUT with bytes=tell STDOUT.

=head1 AUTHORS

Copyright 1995-2002, Lincoln D. Stein.  All rights reserved.  

This library is free software; you can redistribute it and/or modify
it under the same terms as Perl itself.

Address bug reports and comments to: lstein@@cshl.org

=head1 SEE ALSO

Carp, CGI::Base, CGI::BasePlus, CGI::Request, CGI::MiniSvr, CGI::Form,
CGI::Response
    if (defined($CGI::Carp::PROGNAME)) 
    {
      $file = $CGI::Carp::PROGNAME;
    }

=cut

require 5.000;
use Exporter;
#use Carp;
BEGIN { 
  require Carp; 
  *CORE::GLOBAL::die = \&CGI::Carp::die;
}

use File::Spec;

@@ISA = qw(Exporter);
@@EXPORT = qw(confess croak carp);
@@EXPORT_OK = qw(carpout fatalsToBrowser warningsToBrowser wrap set_message set_die_handler set_progname cluck ^name= die);

$main::SIG{__WARN__}=\&CGI::Carp::warn;

$CGI::Carp::VERSION     = '1.30_01';
$CGI::Carp::CUSTOM_MSG  = undef;
$CGI::Carp::DIE_HANDLER = undef;


# fancy import routine detects and handles 'errorWrap' specially.
sub import {
    my $pkg = shift;
    my(%routines);
    my(@@name);
    if (@@name=grep(/^name=/,@@_))
      {
        my($n) = (split(/=/,$name[0]))[1];
        set_progname($n);
        @@_=grep(!/^name=/,@@_);
      }

    grep($routines{$_}++,@@_,@@EXPORT);
    $WRAP++ if $routines{'fatalsToBrowser'} || $routines{'wrap'};
    $WARN++ if $routines{'warningsToBrowser'};
    my($oldlevel) = $Exporter::ExportLevel;
    $Exporter::ExportLevel = 1;
    Exporter::import($pkg,keys %routines);
    $Exporter::ExportLevel = $oldlevel;
    $main::SIG{__DIE__} =\&CGI::Carp::die if $routines{'fatalsToBrowser'};
#    $pkg->export('CORE::GLOBAL','die');
}

# These are the originals
sub realwarn { CORE::warn(@@_); }
sub realdie { CORE::die(@@_); }

sub id {
    my $level = shift;
    my($pack,$file,$line,$sub) = caller($level);
    my($dev,$dirs,$id) = File::Spec->splitpath($file);
    return ($file,$line,$id);
}

sub stamp {
    my $time = scalar(localtime);
    my $frame = 0;
    my ($id,$pack,$file,$dev,$dirs);
    if (defined($CGI::Carp::PROGNAME)) {
        $id = $CGI::Carp::PROGNAME;
    } else {
        do {
  	  $id = $file;
	  ($pack,$file) = caller($frame++);
        } until !$file;
    }
    ($dev,$dirs,$id) = File::Spec->splitpath($id);
    return "[$time] $id: ";
}

sub set_progname {
    $CGI::Carp::PROGNAME = shift;
    return $CGI::Carp::PROGNAME;
}


sub warn {
    my $message = shift;
    my($file,$line,$id) = id(1);
    $message .= " at $file line $line.\n" unless $message=~/\n$/;
    _warn($message) if $WARN;
    my $stamp = stamp;
    $message=~s/^/$stamp/gm;
    realwarn $message;
}

sub _warn {
    my $msg = shift;
    if ($EMIT_WARNINGS) {
	# We need to mangle the message a bit to make it a valid HTML
	# comment.  This is done by substituting similar-looking ISO
	# 8859-1 characters for <, > and -.  This is a hack.
	$msg =~ tr/<>-/\253\273\255/;
	chomp $msg;
	print STDOUT "<!-- warning: $msg -->\n";
    } else {
	push @@WARNINGS, $msg;
    }
}


# The mod_perl package Apache::Registry loads CGI programs by calling
# eval.  These evals don't count when looking at the stack backtrace.
sub _longmess {
    my $message = Carp::longmess();
    $message =~ s,eval[^\n]+(ModPerl|Apache)/(?:Registry|Dispatch)\w*\.pm.*,,s
        if exists $ENV{MOD_PERL};
    return $message;
}

sub ineval {
  (exists $ENV{MOD_PERL} ? 0 : $^S) || _longmess() =~ /eval [\{\']/m
}

sub die {
  my ($arg,@@rest) = @@_;

  if ($DIE_HANDLER) {
      &$DIE_HANDLER($arg,@@rest);
  }

  if ( ineval() )  {
    if (!ref($arg)) {
      $arg = join("",($arg,@@rest)) || "Died";
      my($file,$line,$id) = id(1);
      $arg .= " at $file line $line.\n" unless $arg=~/\n$/;
      realdie($arg);
    }
    else {
      realdie($arg,@@rest);
    }
  }

  if (!ref($arg)) {
    $arg = join("", ($arg,@@rest));
    my($file,$line,$id) = id(1);
    $arg .= " at $file line $line." unless $arg=~/\n$/;
    &fatalsToBrowser($arg) if $WRAP;
    if (($arg =~ /\n$/) || !exists($ENV{MOD_PERL})) {
      my $stamp = stamp;
      $arg=~s/^/$stamp/gm;
    }
    if ($arg !~ /\n$/) {
      $arg .= "\n";
    }
  }
  realdie $arg;
}

sub set_message {
    $CGI::Carp::CUSTOM_MSG = shift;
    return $CGI::Carp::CUSTOM_MSG;
}

sub set_die_handler {

    my ($handler) = shift;
    
    #setting SIG{__DIE__} here is necessary to catch runtime
    #errors which are not called by literally saying "die",
    #such as the line "undef->explode();". however, doing this
    #will interfere with fatalsToBrowser, which also sets 
    #SIG{__DIE__} in the import() function above (or the 
    #import() function above may interfere with this). for
    #this reason, you should choose to either set the die
    #handler here, or use fatalsToBrowser, not both. 
    $main::SIG{__DIE__} = $handler;
    
    $CGI::Carp::DIE_HANDLER = $handler; 
    
    return $CGI::Carp::DIE_HANDLER;
}

sub confess { CGI::Carp::die Carp::longmess @@_; }
sub croak   { CGI::Carp::die Carp::shortmess @@_; }
sub carp    { CGI::Carp::warn Carp::shortmess @@_; }
sub cluck   { CGI::Carp::warn Carp::longmess @@_; }

# We have to be ready to accept a filehandle as a reference
# or a string.
sub carpout {
    my($in) = @@_;
    my($no) = fileno(to_filehandle($in));
    realdie("Invalid filehandle $in\n") unless defined $no;
    
    open(SAVEERR, ">&STDERR");
    open(STDERR, ">&$no") or 
	( print SAVEERR "Unable to redirect STDERR: $!\n" and exit(1) );
}

sub warningsToBrowser {
    $EMIT_WARNINGS = @@_ ? shift : 1;
    _warn(shift @@WARNINGS) while $EMIT_WARNINGS and @@WARNINGS;
}

# headers
sub fatalsToBrowser {
  my($msg) = @@_;
  $msg=~s/&/&amp;/g;
  $msg=~s/>/&gt;/g;
  $msg=~s/</&lt;/g;
  $msg=~s/\"/&quot;/g;
  my($wm) = $ENV{SERVER_ADMIN} ? 
    qq[the webmaster (<a href="mailto:$ENV{SERVER_ADMIN}">$ENV{SERVER_ADMIN}</a>)] :
      "this site's webmaster";
  my ($outer_message) = <<END;
For help, please send mail to $wm, giving this error message 
and the time and date of the error.
END
  ;
  my $mod_perl = exists $ENV{MOD_PERL};

  if ($CUSTOM_MSG) {
    if (ref($CUSTOM_MSG) eq 'CODE') {
      print STDOUT "Content-type: text/html\n\n" 
        unless $mod_perl;
      &$CUSTOM_MSG($msg); # nicer to perl 5.003 users
      return;
    } else {
      $outer_message = $CUSTOM_MSG;
    }
  }

  my $mess = <<END;
<h1>Software error:</h1>
<pre>$msg</pre>
<p>
$outer_message
</p>
END
  ;

  if ($mod_perl) {
    my $r;
    if ($ENV{MOD_PERL_API_VERSION} && $ENV{MOD_PERL_API_VERSION} == 2) {
      $mod_perl = 2;
      require Apache2::RequestRec;
      require Apache2::RequestIO;
      require Apache2::RequestUtil;
      require APR::Pool;
      require ModPerl::Util;
      require Apache2::Response;
      $r = Apache2::RequestUtil->request;
    }
    else {
      $r = Apache->request;
    }
    # If bytes have already been sent, then
    # we print the message out directly.
    # Otherwise we make a custom error
    # handler to produce the doc for us.
    if ($r->bytes_sent) {
      $r->print($mess);
      $mod_perl == 2 ? ModPerl::Util::exit(0) : $r->exit;
    } else {
      # MSIE won't display a custom 500 response unless it is >512 bytes!
      if ($ENV{HTTP_USER_AGENT} =~ /MSIE/) {
        $mess = "<!-- " . (' ' x 513) . " -->\n$mess";
      }
      $r->custom_response(500,$mess);
    }
  } else {
    my $bytes_written = eval{tell STDOUT};
    if (defined $bytes_written && $bytes_written > 0) {
        print STDOUT $mess;
    }
    else {
        print STDOUT "Status: 500\n";
        print STDOUT "Content-type: text/html\n\n";
        print STDOUT $mess;
    }
  }

  warningsToBrowser(1);    # emit warnings before dying
}

# Cut and paste from CGI.pm so that we don't have the overhead of
# always loading the entire CGI module.
sub to_filehandle {
    my $thingy = shift;
    return undef unless $thingy;
    return $thingy if UNIVERSAL::isa($thingy,'GLOB');
    return $thingy if UNIVERSAL::isa($thingy,'FileHandle');
    if (!ref($thingy)) {
	my $caller = 1;
	while (my $package = caller($caller++)) {
	    my($tmp) = $thingy=~/[\':]/ ? $thingy : "$package\:\:$thingy"; 
	    return $tmp if defined(fileno($tmp));
	}
    }
    return undef;
}

1;
@


1.12
log
@Merge in perl 5.10.1
@
text
@@


1.11
log
@fix conflicts and merge in local changes to perl 5.10.0
@
text
@d326 1
a326 1
$CGI::Carp::VERSION     = '1.29';
d578 1
@


1.10
log
@merge in perl 5.8.8
@
text
@d105 1
a105 1
If you want to send fatal (die, confess) errors to the browser, ask to 
d117 3
d148 36
d246 3
d278 1
a278 1
     (hack alert!) in order to accomodate various combinations of Perl and
d322 1
a322 1
@@EXPORT_OK = qw(carpout fatalsToBrowser warningsToBrowser wrap set_message set_progname cluck ^name= die);
d326 3
a328 2
$CGI::Carp::VERSION    = '1.29';
$CGI::Carp::CUSTOM_MSG = undef;
a335 1
  
d427 16
a442 1
  realdie ($arg,@@rest) if ineval();
d463 19
@


1.9
log
@merge 5.8.5 into HEAD
remove now-unused files
crank libperl shared library major number
update Makefile.bsd-wrapper
tweak openbsd hints file for arm and m68k
@
text
@d284 1
a284 1
$CGI::Carp::VERSION    = '1.28';
d374 1
a374 1
    $message =~ s,eval[^\n]+(ModPerl|Apache)/Registry\w*\.pm.*,,s
d468 2
a469 2
    require mod_perl;
    if ($mod_perl::VERSION >= 1.99) {
d471 3
a473 3
      require Apache::RequestRec;
      require Apache::RequestIO;
      require Apache::RequestUtil;
d476 5
a480 1
      require Apache::Response;
a481 1
    my $r = Apache->request;
@


1.8
log
@merge local changes into perl-5.8.3
@
text
@d284 1
a284 1
$CGI::Carp::VERSION    = '1.27';
d384 3
a386 2
  my ($arg) = @@_;
  realdie @@_ if ineval;
d388 1
a388 1
    $arg = join("", @@_);
a446 2
  warningsToBrowser(1);    # emit warnings before dying

d503 2
@


1.7
log
@Resolve conflicts for perl 5.8.2, remove old files, and add OpenBSD-specific scaffolding
@
text
@d246 2
d284 1
a284 1
$CGI::Carp::VERSION    = '1.26';
d495 2
a496 1
    if (eval{tell STDOUT}) {
@


1.6
log
@Update CGI module to version 2.98; fixes a cross-site scripting bug
@
text
@a442 2
  print STDOUT "Content-type: text/html\n\n" 
    unless $mod_perl;
d448 2
d493 7
a499 1
    print STDOUT $mess;
@


1.5
log
@Resolve conflicts, remove old files, merge local changes
@
text
@d172 33
d239 7
d259 4
d269 5
a273 1
BEGIN { require Carp; }
d278 1
a278 1
@@EXPORT_OK = qw(carpout fatalsToBrowser warningsToBrowser wrap set_message cluck);
d281 2
a282 2
$main::SIG{__DIE__}=\&CGI::Carp::die;
$CGI::Carp::VERSION = '1.23';
d285 1
d290 9
d306 2
d325 8
a332 4
    do {
	$id = $file;
	($pack,$file) = caller($frame++);
    } until !$file;
d337 6
a366 1
sub ineval { $^S || _longmess() =~ /eval [\{\']/m }
d372 7
a378 3
    my $mod_perl = exists $ENV{MOD_PERL};
    $message =~ s,eval[^\n]+Apache/Registry\.pm.*,,s if $mod_perl;
    return $message;    
d382 1
d384 14
a397 8
  my ($message) = @@_;
  my $time = scalar(localtime);
  my($file,$line,$id) = id(1);
  $message .= " at $file line $line." unless $message=~/\n$/;
  &fatalsToBrowser($message) if $WRAP;
  my $stamp = stamp;
  $message=~s/^/$stamp/gm;
  realdie $message;
d429 9
a437 9
    my($msg) = @@_;
    $msg=~s/&/&amp;/g;
    $msg=~s/>/&gt;/g;
    $msg=~s/</&lt;/g;
    $msg=~s/\"/&quot;/g;
    my($wm) = $ENV{SERVER_ADMIN} ? 
	qq[the webmaster (<a href="mailto:$ENV{SERVER_ADMIN}">$ENV{SERVER_ADMIN}</a>)] :
	"this site's webmaster";
    my ($outer_message) = <<END;
d441 13
a453 14
    ;
    my $mod_perl = exists $ENV{MOD_PERL};
    print STDOUT "Content-type: text/html\n\n" 
	unless $mod_perl;

    warningsToBrowser(1);    # emit warnings before dying

    if ($CUSTOM_MSG) {
	if (ref($CUSTOM_MSG) eq 'CODE') {
	    &$CUSTOM_MSG($msg); # nicer to perl 5.003 users
	    return;
	} else {
	    $outer_message = $CUSTOM_MSG;
	}
d455 3
a457 2
    
    my $mess = <<END;
d464 1
a464 1
    ;
d466 19
a484 12
    if ($mod_perl && (my $r = Apache->request)) {
	# If bytes have already been sent, then
	# we print the message out directly.
	# Otherwise we make a custom error
	# handler to produce the doc for us.
	if ($r->bytes_sent) {
	    $r->print($mess);
	    $r->exit;
	} else {
	    $r->status(500);
	    $r->custom_response(500,$mess);
	}
d486 5
a490 1
	print STDOUT $mess;
d492 3
@


1.4
log
@merge in perl 5.6.1 with our local changes
@
text
@d137 1
a137 1
          print "Got an error: $msg";
d164 1
a164 1
    print "<SCRIPT type=javascript><!--\n";
d166 1
a166 1
    print "//--></SCRIPT>\n";
d202 4
d208 1
a208 1
Copyright 1995-1998, Lincoln D. Stein.  All rights reserved.  
d224 3
a226 1
use Carp;
d234 1
a234 1
$CGI::Carp::VERSION = '1.20';
d257 1
a257 1
    my($id) = $file=~m|([^/]+)$|;
d264 1
a264 1
    my ($id,$pack,$file);
d269 1
a269 1
    ($id) = $id=~m|([^/]+)$|;
d297 1
a297 1
sub ineval { _longmess() =~ /eval [\{\']/m }
d325 4
a328 12
# Avoid generating "subroutine redefined" warnings with the following
# hack:
{
    local $^W=0;
    eval <<EOF;
sub confess { CGI::Carp::die Carp::longmess \@@_; }
sub croak   { CGI::Carp::die Carp::shortmess \@@_; }
sub carp    { CGI::Carp::warn Carp::shortmess \@@_; }
sub cluck   { CGI::Carp::warn Carp::longmess \@@_; }
EOF
    ;
}
d378 3
a380 3
<H1>Software error:</H1>
<PRE>$msg</PRE>
<P>
d382 1
@


1.3
log
@perl-5.6.0 + local changes
@
text
@d74 1
a74 1
The real STDERR is not closed -- it is moved to SAVEERR.  Some
d76 1
a76 1
browser when the script closes STDOUT and STDERR.  SAVEERR is used to
d145 27
d196 5
a200 1
    More mod_perl related fixes.
d224 1
a224 8
@@EXPORT_OK = qw(carpout fatalsToBrowser wrap set_message cluck);

BEGIN {
  $] >= 5.005
    ? eval q#sub ineval { $^S }#
      : eval q#sub ineval { _longmess() =~ /eval [\{\']/m }#;
  $@@ and die;
}
d228 1
a228 1
$CGI::Carp::VERSION = '1.14';
d237 1
d251 1
a251 1
    my($id) = $file=~m|([^/]+)\z|;
d263 1
a263 1
    ($id) = $id=~m|([^/]+)\z|;
d271 1
d277 16
d299 1
a299 1
    return( $message );    
d304 1
a304 1
  my $message = shift;
d344 5
d368 2
d381 1
a381 1
<CODE>$msg</CODE>
d387 1
a387 2
    if ($mod_perl) {
	my $r = Apache->request;
@


1.2
log
@perl5.005_03 (stock)
@
text
@d195 7
d204 1
a204 1
$CGI::Carp::VERSION = '1.13';
d226 1
a226 1
    my($id) = $file=~m|([^/]+)$|;
d238 1
a238 1
    ($id) = $id=~m|([^/]+)$|;
d261 9
a269 8
    my $message = shift;
    my $time = scalar(localtime);
    my($file,$line,$id) = id(1);
    $message .= " at $file line $line." unless $message=~/\n$/;
    &fatalsToBrowser($message) if $WRAP && _longmess() !~ /eval [{\']/m;
    my $stamp = stamp;
    $message=~s/^/$stamp/gm;
    realdie $message;
@


1.1
log
@perl 5.004_04
@
text
@d17 6
d96 2
d117 28
d153 18
d173 1
a173 2
Lincoln D. Stein <lstein@@genome.wi.mit.edu>.  Feel free to redistribute
this under the Perl Artistic License.
d175 4
d193 1
a193 1
@@EXPORT_OK = qw(carpout fatalsToBrowser);
d197 2
a198 1
$CGI::Carp::VERSION = '1.06';
d204 2
a205 2
    grep($routines{$_}++,@@_);
    $WRAP++ if $routines{'fatalsToBrowser'};
d213 2
a214 2
sub realwarn { warn(@@_); }
sub realdie { die(@@_); }
d244 9
d257 2
a258 3
    return undef if $file=~/^\(eval/;
    $message .= " at $file line $line.\n" unless $message=~/\n$/;
    &fatalsToBrowser($message) if $WRAP;
d264 5
d275 3
a277 2
sub croak { CGI::Carp::die Carp::shortmess \@@_; }
sub carp { CGI::Carp::warn Carp::shortmess \@@_; }
d286 2
a287 8
    $in = $$in if ref($in); # compatability with Marc's method;
    my($no) = fileno($in);
    unless (defined($no)) {
	my($package) = caller;
	my($handle) = $in=~/[':]/ ? $in : "$package\:\:$in"; 
	$no = fileno($handle);
    }
    die "Invalid filehandle $in\n" unless $no;
d297 1
d300 23
a322 2
    print STDOUT "Content-type: text/html\n\n";
    print STDOUT <<END;
d326 1
a326 1
Please send mail to this site's webmaster for help.
d328 35
@


1.1.1.1
log
@perl5.005_03
@
text
@a16 6
    use CGI::Carp qw(cluck);
    cluck "I wouldn't do that if I were you";

    use CGI::Carp qw(fatalsToBrowser);
    die "Fatal error messages are now sent to browser";

a89 2
FileHandle and other objects work as well.

a108 28
=head2 Changing the default message

By default, the software error message is followed by a note to
contact the Webmaster by e-mail with the time and date of the error.
If this message is not to your liking, you can change it using the
set_message() routine.  This is not imported by default; you should
import it on the use() line:

    use CGI::Carp qw(fatalsToBrowser set_message);
    set_message("It's not a bug, it's a feature!");

You may also pass in a code reference in order to create a custom
error message.  At run time, your code will be called with the text
of the error message that caused the script to die.  Example:

    use CGI::Carp qw(fatalsToBrowser set_message);
    BEGIN {
       sub handle_errors {
          my $msg = shift;
          print "<h1>Oh gosh</h1>";
          print "Got an error: $msg";
      }
      set_message(\&handle_errors);
    }

In order to correctly intercept compile-time errors, you should call
set_message() from within a BEGIN{} block.

a116 18
1.08 set_message() added and carpout() expanded to allow for FileHandle
     objects.

1.09 set_message() now allows users to pass a code REFERENCE for 
     really custom error messages.  croak and carp are now
     exported by default.  Thanks to Gunther Birznieks for the
     patches.

1.10 Patch from Chris Dean (ctdean@@cogit.com) to allow 
     module to run correctly under mod_perl.

1.11 Changed order of &gt; and &lt; escapes.

1.12 Changed die() on line 217 to CORE::die to avoid B<-w> warning.

1.13 Added cluck() to make the module orthogonal with Carp.
    More mod_perl related fixes.

d119 2
a120 1
Copyright 1995-1998, Lincoln D. Stein.  All rights reserved.  
a121 4
This library is free software; you can redistribute it and/or modify
it under the same terms as Perl itself.

Address bug reports and comments to: lstein@@cshl.org
d136 1
a136 1
@@EXPORT_OK = qw(carpout fatalsToBrowser wrap set_message cluck);
d140 1
a140 2
$CGI::Carp::VERSION = '1.13';
$CGI::Carp::CUSTOM_MSG = undef;
d146 2
a147 2
    grep($routines{$_}++,@@_,@@EXPORT);
    $WRAP++ if $routines{'fatalsToBrowser'} || $routines{'wrap'};
d155 2
a156 2
sub realwarn { CORE::warn(@@_); }
sub realdie { CORE::die(@@_); }
a185 9
# The mod_perl package Apache::Registry loads CGI programs by calling
# eval.  These evals don't count when looking at the stack backtrace.
sub _longmess {
    my $message = Carp::longmess();
    my $mod_perl = exists $ENV{MOD_PERL};
    $message =~ s,eval[^\n]+Apache/Registry\.pm.*,,s if $mod_perl;
    return( $message );    
}

d190 3
a192 2
    $message .= " at $file line $line." unless $message=~/\n$/;
    &fatalsToBrowser($message) if $WRAP && _longmess() !~ /eval [{\']/m;
a197 5
sub set_message {
    $CGI::Carp::CUSTOM_MSG = shift;
    return $CGI::Carp::CUSTOM_MSG;
}

d204 2
a205 3
sub croak   { CGI::Carp::die Carp::shortmess \@@_; }
sub carp    { CGI::Carp::warn Carp::shortmess \@@_; }
sub cluck   { CGI::Carp::warn Carp::longmess \@@_; }
d214 8
a221 2
    my($no) = fileno(to_filehandle($in));
    realdie("Invalid filehandle $in\n") unless defined $no;
a230 1
    $msg=~s/&/&amp;/g;
d233 2
a234 23
    $msg=~s/\"/&quot;/g;
    my($wm) = $ENV{SERVER_ADMIN} ? 
	qq[the webmaster (<a href="mailto:$ENV{SERVER_ADMIN}">$ENV{SERVER_ADMIN}</a>)] :
	"this site's webmaster";
    my ($outer_message) = <<END;
For help, please send mail to $wm, giving this error message 
and the time and date of the error.
END
    ;
    my $mod_perl = exists $ENV{MOD_PERL};
    print STDOUT "Content-type: text/html\n\n" 
	unless $mod_perl;

    if ($CUSTOM_MSG) {
	if (ref($CUSTOM_MSG) eq 'CODE') {
	    &$CUSTOM_MSG($msg); # nicer to perl 5.003 users
	    return;
	} else {
	    $outer_message = $CUSTOM_MSG;
	}
    }
    
    my $mess = <<END;
d238 1
a238 1
$outer_message
a239 35
    ;

    if ($mod_perl) {
	my $r = Apache->request;
	# If bytes have already been sent, then
	# we print the message out directly.
	# Otherwise we make a custom error
	# handler to produce the doc for us.
	if ($r->bytes_sent) {
	    $r->print($mess);
	    $r->exit;
	} else {
	    $r->status(500);
	    $r->custom_response(500,$mess);
	}
    } else {
	print STDOUT $mess;
    }
}

# Cut and paste from CGI.pm so that we don't have the overhead of
# always loading the entire CGI module.
sub to_filehandle {
    my $thingy = shift;
    return undef unless $thingy;
    return $thingy if UNIVERSAL::isa($thingy,'GLOB');
    return $thingy if UNIVERSAL::isa($thingy,'FileHandle');
    if (!ref($thingy)) {
	my $caller = 1;
	while (my $package = caller($caller++)) {
	    my($tmp) = $thingy=~/[\':]/ ? $thingy : "$package\:\:$thingy"; 
	    return $tmp if defined(fileno($tmp));
	}
    }
    return undef;
@


1.1.1.2
log
@virgin perl 5.6.0
@
text
@a194 7
BEGIN {
  $] >= 5.005
    ? eval q#sub ineval { $^S }#
      : eval q#sub ineval { _longmess() =~ /eval [\{\']/m }#;
  $@@ and die;
}

d197 1
a197 1
$CGI::Carp::VERSION = '1.14';
d219 1
a219 1
    my($id) = $file=~m|([^/]+)\z|;
d231 1
a231 1
    ($id) = $id=~m|([^/]+)\z|;
d254 8
a261 9
  realdie @@_ if ineval;
  my $message = shift;
  my $time = scalar(localtime);
  my($file,$line,$id) = id(1);
  $message .= " at $file line $line." unless $message=~/\n$/;
  &fatalsToBrowser($message) if $WRAP;
  my $stamp = stamp;
  $message=~s/^/$stamp/gm;
  realdie $message;
@


1.1.1.3
log
@stock perl 5.6.1
@
text
@d74 1
a74 1
The real STDERR is not closed -- it is moved to CGI::Carp::SAVEERR.  Some
d76 1
a76 1
browser when the script closes STDOUT and STDERR.  CGI::Carp::SAVEERR is there to
a144 27
=head1 MAKING WARNINGS APPEAR AS HTML COMMENTS

It is now also possible to make non-fatal errors appear as HTML
comments embedded in the output of your program.  To enable this
feature, export the new "warningsToBrowser" subroutine.  Since sending
warnings to the browser before the HTTP headers have been sent would
cause an error, any warnings are stored in an internal buffer until
you call the warningsToBrowser() subroutine with a true argument:

    use CGI::Carp qw(fatalsToBrowser warningsToBrowser);
    use CGI qw(:standard);
    print header();
    warningsToBrowser(1);

You may also give a false argument to warningsToBrowser() to prevent
warnings from being sent to the browser while you are printing some
content where HTML comments are not allowed:

    warningsToBrowser(0);    # disable warnings
    print "<SCRIPT type=javascript><!--\n";
    print_some_javascript_code();
    print "//--></SCRIPT>\n";
    warningsToBrowser(1);    # re-enable warnings

Note: In this respect warningsToBrowser() differs fundamentally from
fatalsToBrowser(), which you should never call yourself!

d169 1
a169 5
     More mod_perl related fixes.

1.20 Patch from Ilmari Karonen (perl@@itz.pp.sci.fi):  Added
     warningsToBrowser().  Replaced <CODE> tags with <PRE> in
     fatalsToBrowser() output.
d193 8
a200 1
@@EXPORT_OK = qw(carpout fatalsToBrowser warningsToBrowser wrap set_message cluck);
d204 1
a204 1
$CGI::Carp::VERSION = '1.20';
a212 1
    $WARN++ if $routines{'warningsToBrowser'};
d226 1
a226 1
    my($id) = $file=~m|([^/]+)$|;
d238 1
a238 1
    ($id) = $id=~m|([^/]+)$|;
a245 1
    _warn($message) if $WARN;
a250 16
sub _warn {
    my $msg = shift;
    if ($EMIT_WARNINGS) {
	# We need to mangle the message a bit to make it a valid HTML
	# comment.  This is done by substituting similar-looking ISO
	# 8859-1 characters for <, > and -.  This is a hack.
	$msg =~ tr/<>-/\253\273\255/;
	chomp $msg;
	print STDOUT "<!-- warning: $msg -->\n";
    } else {
	push @@WARNINGS, $msg;
    }
}

sub ineval { _longmess() =~ /eval [\{\']/m }

d257 1
a257 1
    return $message;    
d262 1
a262 1
  my ($message) = @@_;
a301 5
sub warningsToBrowser {
    $EMIT_WARNINGS = @@_ ? shift : 1;
    _warn(shift @@WARNINGS) while $EMIT_WARNINGS and @@WARNINGS;
}

a320 2
    warningsToBrowser(1);    # emit warnings before dying

d332 1
a332 1
<PRE>$msg</PRE>
d338 2
a339 1
    if ($mod_perl && (my $r = Apache->request)) {
@


1.1.1.4
log
@stock perl 5.8.0 from CPAN
@
text
@d137 1
a137 1
          print "<p>Got an error: $msg</p>";
d164 1
a164 1
    print "<script type=\"text/javascript\"><!--\n";
d166 1
a166 1
    print "//--></script>\n";
a201 4
1.23 ineval() now checks both $^S and inspects the message for the "eval" pattern
     (hack alert!) in order to accomodate various combinations of Perl and
     mod_perl.

d204 1
a204 1
Copyright 1995-2002, Lincoln D. Stein.  All rights reserved.  
d220 1
a220 3
#use Carp;
BEGIN { require Carp; }
use File::Spec;
d228 1
a228 1
$CGI::Carp::VERSION = '1.23';
d251 1
a251 1
    my($dev,$dirs,$id) = File::Spec->splitpath($file);
d258 1
a258 1
    my ($id,$pack,$file,$dev,$dirs);
d263 1
a263 1
    ($dev,$dirs,$id) = File::Spec->splitpath($id);
d291 1
a291 1
sub ineval { $^S || _longmess() =~ /eval [\{\']/m }
d319 12
a330 4
sub confess { CGI::Carp::die Carp::longmess @@_; }
sub croak   { CGI::Carp::die Carp::shortmess @@_; }
sub carp    { CGI::Carp::warn Carp::shortmess @@_; }
sub cluck   { CGI::Carp::warn Carp::longmess @@_; }
d380 3
a382 3
<h1>Software error:</h1>
<pre>$msg</pre>
<p>
a383 1
</p>
@


1.1.1.5
log
@perl 5.8.2 from CPAN
@
text
@a171 33
=head1 OVERRIDING THE NAME OF THE PROGRAM

CGI::Carp includes the name of the program that generated the error or
warning in the messages written to the log and the browser window.
Sometimes, Perl can get confused about what the actual name of the
executed program was.  In these cases, you can override the program
name that CGI::Carp will use for all messages.

The quick way to do that is to tell CGI::Carp the name of the program
in its use statement.  You can do that by adding
"name=cgi_carp_log_name" to your "use" statement.  For example:

    use CGI::Carp qw(name=cgi_carp_log_name);

.  If you want to change the program name partway through the program,
you can use the C<set_progname()> function instead.  It is not
exported by default, you must import it explicitly by saying

    use CGI::Carp qw(set_progname);

Once you've done that, you can change the logged name of the program
at any time by calling

    set_progname(new_program_name);

You can set the program back to the default by calling

    set_progname(undef);

Note that this override doesn't happen until after the program has
compiled, so any compile-time errors will still show up with the
non-overridden program name
  
a205 7
1.24 Patch from Scott Gifford (sgifford@@suspectclass.com): Add support
     for overriding program name.

1.26 Replaced CORE::GLOBAL::die with the evil $SIG{__DIE__} because the
     former isn't working in some people's hands.  There is no such thing
     as reliable exception handling in Perl.

a218 4
    if (defined($CGI::Carp::PROGNAME)) 
    {
      $file = $CGI::Carp::PROGNAME;
    }
d225 1
a225 5
BEGIN { 
  require Carp; 
  *CORE::GLOBAL::die = \&CGI::Carp::die;
}

d230 1
a230 1
@@EXPORT_OK = qw(carpout fatalsToBrowser warningsToBrowser wrap set_message set_progname cluck ^name= die);
d233 2
a234 2

$CGI::Carp::VERSION    = '1.26';
a236 1

a240 9
    my(@@name);
  
    if (@@name=grep(/^name=/,@@_))
      {
        my($n) = (split(/=/,$name[0]))[1];
        set_progname($n);
        @@_=grep(!/^name=/,@@_);
      }

a247 2
    $main::SIG{__DIE__} =\&CGI::Carp::die if $routines{'fatalsToBrowser'};
#    $pkg->export('CORE::GLOBAL','die');
d265 4
a268 8
    if (defined($CGI::Carp::PROGNAME)) {
        $id = $CGI::Carp::PROGNAME;
    } else {
        do {
  	  $id = $file;
	  ($pack,$file) = caller($frame++);
        } until !$file;
    }
a272 6
sub set_progname {
    $CGI::Carp::PROGNAME = shift;
    return $CGI::Carp::PROGNAME;
}


d297 1
d303 3
a305 7
    $message =~ s,eval[^\n]+(ModPerl|Apache)/Registry\w*\.pm.*,,s
        if exists $ENV{MOD_PERL};
    return $message;
}

sub ineval {
  (exists $ENV{MOD_PERL} ? 0 : $^S) || _longmess() =~ /eval [\{\']/m
a308 1
  my ($arg) = @@_;
d310 8
a317 14
  if (!ref($arg)) {
    $arg = join("", @@_);
    my($file,$line,$id) = id(1);
    $arg .= " at $file line $line." unless $arg=~/\n$/;
    &fatalsToBrowser($arg) if $WRAP;
    if (($arg =~ /\n$/) || !exists($ENV{MOD_PERL})) {
      my $stamp = stamp;
      $arg=~s/^/$stamp/gm;
    }
    if ($arg !~ /\n$/) {
      $arg .= "\n";
    }
  }
  realdie $arg;
d349 9
a357 9
  my($msg) = @@_;
  $msg=~s/&/&amp;/g;
  $msg=~s/>/&gt;/g;
  $msg=~s/</&lt;/g;
  $msg=~s/\"/&quot;/g;
  my($wm) = $ENV{SERVER_ADMIN} ? 
    qq[the webmaster (<a href="mailto:$ENV{SERVER_ADMIN}">$ENV{SERVER_ADMIN}</a>)] :
      "this site's webmaster";
  my ($outer_message) = <<END;
d361 14
a374 13
  ;
  my $mod_perl = exists $ENV{MOD_PERL};

  warningsToBrowser(1);    # emit warnings before dying

  if ($CUSTOM_MSG) {
    if (ref($CUSTOM_MSG) eq 'CODE') {
      print STDOUT "Content-type: text/html\n\n" 
        unless $mod_perl;
      &$CUSTOM_MSG($msg); # nicer to perl 5.003 users
      return;
    } else {
      $outer_message = $CUSTOM_MSG;
d376 2
a377 3
  }

  my $mess = <<END;
d384 1
a384 1
  ;
d386 12
a397 19
  if ($mod_perl) {
    require mod_perl;
    if ($mod_perl::VERSION >= 1.99) {
      $mod_perl = 2;
      require Apache::RequestRec;
      require Apache::RequestIO;
      require Apache::RequestUtil;
      require APR::Pool;
      require ModPerl::Util;
      require Apache::Response;
    }
    my $r = Apache->request;
    # If bytes have already been sent, then
    # we print the message out directly.
    # Otherwise we make a custom error
    # handler to produce the doc for us.
    if ($r->bytes_sent) {
      $r->print($mess);
      $mod_perl == 2 ? ModPerl::Util::exit(0) : $r->exit;
d399 1
a399 13
      # MSIE won't display a custom 500 response unless it is >512 bytes!
      if ($ENV{HTTP_USER_AGENT} =~ /MSIE/) {
        $mess = "<!-- " . (' ' x 513) . " -->\n$mess";
      }
      $r->custom_response(500,$mess);
    }
  } else {
    if (eval{tell STDOUT}) {
        print STDOUT $mess;
    }
    else {
        print STDOUT "Content-type: text/html\n\n";
        print STDOUT $mess;
a400 1
  }
@


1.1.1.6
log
@perl 5.8.3 from CPAN
@
text
@a245 2
1.27 Replaced tell STDOUT with bytes=tell STDOUT.

d282 1
a282 1
$CGI::Carp::VERSION    = '1.27';
d493 1
a493 2
    my $bytes_written = eval{tell STDOUT};
    if (defined $bytes_written && $bytes_written > 0) {
@


1.1.1.7
log
@Import of stock perl 5.8.5
@
text
@d284 1
a284 1
$CGI::Carp::VERSION    = '1.28';
d384 2
a385 3
  my ($arg,@@rest) = @@_;
  realdie ($arg,@@rest) if ineval();

d387 1
a387 1
    $arg = join("", ($arg,@@rest));
d446 2
a503 2

  warningsToBrowser(1);    # emit warnings before dying
@


1.1.1.8
log
@perl 5.8.8 import
@
text
@d284 1
a284 1
$CGI::Carp::VERSION    = '1.29';
d374 1
a374 1
    $message =~ s,eval[^\n]+(ModPerl|Apache)/(?:Registry|Dispatch)\w*\.pm.*,,s
d468 2
a469 2
    my $r;
    if ($ENV{MOD_PERL_API_VERSION} && $ENV{MOD_PERL_API_VERSION} == 2) {
d471 3
a473 3
      require Apache2::RequestRec;
      require Apache2::RequestIO;
      require Apache2::RequestUtil;
d476 1
a476 5
      require Apache2::Response;
      $r = Apache2::RequestUtil->request;
    }
    else {
      $r = Apache->request;
d478 1
@


1.1.1.9
log
@import perl 5.10.0 from CPAN
@
text
@d105 1
a105 1
If you want to send fatal (die, confess) errors to the browser, ask to
a116 3
Note that fatalsToBrowser does B<not> work with mod_perl version 2.0
and higher.

a144 36
=head1 DOING MORE THAN PRINTING A MESSAGE IN THE EVENT OF PERL ERRORS

If fatalsToBrowser in conjunction with set_message does not provide 
you with all of the functionality you need, you can go one step 
further by specifying a function to be executed any time a script
calls "die", has a syntax error, or dies unexpectedly at runtime
with a line like "undef->explode();". 

    use CGI::Carp qw(set_die_handler);
    BEGIN {
       sub handle_errors {
          my $msg = shift;
          print "content-type: text/html\n\n";
          print "<h1>Oh gosh</h1>";
          print "<p>Got an error: $msg</p>";

          #proceed to send an email to a system administrator,
          #write a detailed message to the browser and/or a log,
          #etc....
      }
      set_die_handler(\&handle_errors);
    }

Notice that if you use set_die_handler(), you must handle sending
HTML headers to the browser yourself if you are printing a message.

If you use set_die_handler(), you will most likely interfere with 
the behavior of fatalsToBrowser, so you must use this or that, not 
both. 

Using set_die_handler() sets SIG{__DIE__} (as does fatalsToBrowser),
and there is only one SIG{__DIE__}. This means that if you are 
attempting to set SIG{__DIE__} yourself, you may interfere with 
this module's functionality, or this module may interfere with 
your module's functionality.

a206 3
1.29 Patch from Peter Whaite to fix the unfixable problem of CGI::Carp
     not behaving correctly in an eval() context.

d236 1
a236 1
     (hack alert!) in order to accommodate various combinations of Perl and
d280 1
a280 1
@@EXPORT_OK = qw(carpout fatalsToBrowser warningsToBrowser wrap set_message set_die_handler set_progname cluck ^name= die);
d284 2
a285 3
$CGI::Carp::VERSION     = '1.29';
$CGI::Carp::CUSTOM_MSG  = undef;
$CGI::Carp::DIE_HANDLER = undef;
d293 1
d385 1
a385 16

  if ($DIE_HANDLER) {
      &$DIE_HANDLER($arg,@@rest);
  }

  if ( ineval() )  {
    if (!ref($arg)) {
      $arg = join("",($arg,@@rest)) || "Died";
      my($file,$line,$id) = id(1);
      $arg .= " at $file line $line.\n" unless $arg=~/\n$/;
      realdie($arg);
    }
    else {
      realdie($arg,@@rest);
    }
  }
a405 19
}

sub set_die_handler {

    my ($handler) = shift;
    
    #setting SIG{__DIE__} here is necessary to catch runtime
    #errors which are not called by literally saying "die",
    #such as the line "undef->explode();". however, doing this
    #will interfere with fatalsToBrowser, which also sets 
    #SIG{__DIE__} in the import() function above (or the 
    #import() function above may interfere with this). for
    #this reason, you should choose to either set the die
    #handler here, or use fatalsToBrowser, not both. 
    $main::SIG{__DIE__} = $handler;
    
    $CGI::Carp::DIE_HANDLER = $handler; 
    
    return $CGI::Carp::DIE_HANDLER;
@


1.1.1.10
log
@import perl 5.10.1
@
text
@d326 1
a326 1
$CGI::Carp::VERSION     = '1.30_01';
a577 1
        print STDOUT "Status: 500\n";
@


