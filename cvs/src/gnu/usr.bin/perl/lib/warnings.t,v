head	1.1;
branch	1.1.1;
access;
symbols
	OPENBSD_6_1_BASE:1.1.1.5
	OPENBSD_6_0:1.1.1.5.0.16
	OPENBSD_6_0_BASE:1.1.1.5
	OPENBSD_5_9:1.1.1.5.0.10
	OPENBSD_5_9_BASE:1.1.1.5
	OPENBSD_5_8:1.1.1.5.0.12
	OPENBSD_5_8_BASE:1.1.1.5
	PERL_5_20_2:1.1.1.5
	OPENBSD_5_7:1.1.1.5.0.4
	OPENBSD_5_7_BASE:1.1.1.5
	PERL_5_20_1:1.1.1.5
	OPENBSD_5_6:1.1.1.5.0.8
	OPENBSD_5_6_BASE:1.1.1.5
	PERL_5_18_2:1.1.1.5
	PERL:1.1.1
	OPENBSD_5_5:1.1.1.5.0.6
	OPENBSD_5_5_BASE:1.1.1.5
	OPENBSD_5_4:1.1.1.5.0.2
	OPENBSD_5_4_BASE:1.1.1.5
	PERL_5_16_3:1.1.1.5
	OPENBSD_5_3:1.1.1.4.0.18
	OPENBSD_5_3_BASE:1.1.1.4
	OPENBSD_5_2:1.1.1.4.0.16
	OPENBSD_5_2_BASE:1.1.1.4
	OPENBSD_5_1_BASE:1.1.1.4
	OPENBSD_5_1:1.1.1.4.0.14
	OPENBSD_5_0:1.1.1.4.0.12
	OPENBSD_5_0_BASE:1.1.1.4
	OPENBSD_4_9:1.1.1.4.0.10
	OPENBSD_4_9_BASE:1.1.1.4
	PERL_5_12_2:1.1.1.4
	OPENBSD_4_8:1.1.1.4.0.8
	OPENBSD_4_8_BASE:1.1.1.4
	OPENBSD_4_7:1.1.1.4.0.4
	OPENBSD_4_7_BASE:1.1.1.4
	PERL_5_10_1:1.1.1.4
	OPENBSD_4_6:1.1.1.4.0.6
	OPENBSD_4_6_BASE:1.1.1.4
	OPENBSD_4_5:1.1.1.4.0.2
	OPENBSD_4_5_BASE:1.1.1.4
	PERL_5_10_0:1.1.1.4
	OPENBSD_4_4:1.1.1.3.0.10
	OPENBSD_4_4_BASE:1.1.1.3
	OPENBSD_4_3:1.1.1.3.0.8
	OPENBSD_4_3_BASE:1.1.1.3
	OPENBSD_4_2:1.1.1.3.0.6
	OPENBSD_4_2_BASE:1.1.1.3
	OPENBSD_4_1:1.1.1.3.0.4
	OPENBSD_4_1_BASE:1.1.1.3
	OPENBSD_4_0:1.1.1.3.0.2
	OPENBSD_4_0_BASE:1.1.1.3
	PERL_5_8_8:1.1.1.3
	OPENBSD_3_9:1.1.1.2.0.10
	OPENBSD_3_9_BASE:1.1.1.2
	OPENBSD_3_8:1.1.1.2.0.8
	OPENBSD_3_8_BASE:1.1.1.2
	OPENBSD_3_7:1.1.1.2.0.6
	OPENBSD_3_7_BASE:1.1.1.2
	PERL_5_8_6:1.1.1.2
	OPENBSD_3_6:1.1.1.2.0.4
	OPENBSD_3_6_BASE:1.1.1.2
	PERL_5_8_5:1.1.1.2
	PERL_5_8_3:1.1.1.2
	OPENBSD_3_5:1.1.1.2.0.2
	OPENBSD_3_5_BASE:1.1.1.2
	PERL_5_8_2:1.1.1.2
	OPENBSD_3_4:1.1.1.1.0.4
	OPENBSD_3_4_BASE:1.1.1.1
	OPENBSD_3_3:1.1.1.1.0.2
	OPENBSD_3_3_BASE:1.1.1.1
	PERL_5_8_0:1.1.1.1
	CPAN:1.1.1;
locks; strict;
comment	@# @;
expand	@o@;


1.1
date	2002.10.27.22.14.58;	author millert;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	2002.10.27.22.14.58;	author millert;	state Exp;
branches;
next	1.1.1.2;

1.1.1.2
date	2003.12.03.02.44.00;	author millert;	state Exp;
branches;
next	1.1.1.3;

1.1.1.3
date	2006.03.28.18.48.39;	author millert;	state Exp;
branches;
next	1.1.1.4;

1.1.1.4
date	2008.09.29.17.18.31;	author millert;	state Exp;
branches;
next	1.1.1.5;

1.1.1.5
date	2013.03.25.20.08.54;	author sthen;	state Exp;
branches;
next	;


desc
@@


1.1
log
@Initial revision
@
text
@#!./perl

BEGIN {
    chdir 't' if -d 't';
    @@INC = '../lib';
    $ENV{PERL5LIB} = '../lib';
    require Config; import Config;
}

use File::Path;
use File::Spec::Functions;

$| = 1;

my $Is_VMS     = $^O eq 'VMS';
my $Is_MSWin32 = $^O eq 'MSWin32';
my $Is_NetWare = $^O eq 'NetWare';
my $Is_MacOS   = $^O eq 'MacOS';
my $tmpfile = "tmp0000";
my $i = 0 ;
1 while -e ++$tmpfile;
END {  if ($tmpfile) { 1 while unlink $tmpfile} }

my @@prgs = () ;
my @@w_files = () ;

if (@@ARGV)
  { print "ARGV = [@@ARGV]\n" ;
    if ($^O eq 'MacOS') {
      @@w_files = map { s#^#:lib:warnings:#; $_ } @@ARGV
    } else {
      @@w_files = map { s#^#./lib/warnings/#; $_ } @@ARGV
    }
  }
else
  { @@w_files = sort glob(catfile(curdir(), "lib", "warnings", "*")) }

my $files = 0;
foreach my $file (@@w_files) {

    next if $file =~ /(~|\.orig|,v)$/;
    next if $file =~ /perlio$/ && !(find PerlIO::Layer 'perlio');

    open F, "<$file" or die "Cannot open $file: $!\n" ;
    my $line = 0;
    while (<F>) {
        $line++;
	last if /^__END__/ ;
    }

    {
        local $/ = undef;
        $files++;
        @@prgs = (@@prgs, $file, split "\n########\n", <F>) ;
    }
    close F ;
}

undef $/;

print "1..", scalar(@@prgs)-$files, "\n";


for (@@prgs){
    unless (/\n/)
     {
      print "# From $_\n";
      next;
     }
    my $switch = "";
    my @@temps = () ;
    my @@temp_path = () ;
    if (s/^\s*-\w+//){
        $switch = $&;
        $switch =~ s/(-\S*[A-Z]\S*)/"$1"/ if $Is_VMS; # protect uc switches
    }
    my($prog,$expected) = split(/\nEXPECT\n/, $_);
    if ( $prog =~ /--FILE--/) {
        my(@@files) = split(/\n--FILE--\s*([^\s\n]*)\s*\n/, $prog) ;
	shift @@files ;
	die "Internal error test $i didn't split into pairs, got " .
		scalar(@@files) . "[" . join("%%%%", @@files) ."]\n"
	    if @@files % 2 ;
	while (@@files > 2) {
	    my $filename = shift @@files ;
	    my $code = shift @@files ;
    	    push @@temps, $filename ;
    	    if ($filename =~ m#(.*)/#) {
                mkpath($1);
                push(@@temp_path, $1);
    	    }
	    open F, ">$filename" or die "Cannot open $filename: $!\n" ;
	    print F $code ;
	    close F or die "Cannot close $filename: $!\n";
	}
	shift @@files ;
	$prog = shift @@files ;
    }

    # fix up some paths
    if ($^O eq 'MacOS') {
	$prog =~ s|require "./abc(d)?";|require ":abc$1";|g;
	$prog =~ s|"\."|":"|g;
    }

    open TEST, ">$tmpfile" or die "Cannot open >$tmpfile: $!";
    print TEST q{
        BEGIN {
            open(STDERR, ">&STDOUT")
              or die "Can't dup STDOUT->STDERR: $!;";
        }
    };
    print TEST "\n#line 1\n";  # So the line numbers don't get messed up.
    print TEST $prog,"\n";
    close TEST or die "Cannot close $tmpfile: $!";
    my $results = $Is_VMS ?
	              `./perl "-I../lib" $switch $tmpfile` :
		  $Is_MSWin32 ?
		      `.\\perl -I../lib $switch $tmpfile` :
		  $Is_NetWare ?
		      `perl -I../lib $switch $tmpfile` :
		  $Is_MacOS ?
		      `$^X -I::lib $switch -MMac::err=unix $tmpfile` :
                  `./perl -I../lib $switch $tmpfile`;
    my $status = $?;
    $results =~ s/\n+$//;
    # allow expected output to be written as if $prog is on STDIN
    $results =~ s/tmp\d+/-/g;
    if ($^O eq 'VMS') {
        # some tests will trigger VMS messages that won't be expected
        $results =~ s/\n?%[A-Z]+-[SIWEF]-[A-Z]+,.*//;

        # pipes double these sometimes
        $results =~ s/\n\n/\n/g;
    }
# bison says 'parse error' instead of 'syntax error',
# various yaccs may or may not capitalize 'syntax'.
    $results =~ s/^(syntax|parse) error/syntax error/mig;
    # allow all tests to run when there are leaks
    $results =~ s/Scalars leaked: \d+\n//g;

    # fix up some paths
    if ($^O eq 'MacOS') {
	$results =~ s|:abc\.pm\b|abc.pm|g;
	$results =~ s|:abc(d)?\b|./abc$1|g;
    }

    $expected =~ s/\n+$//;
    my $prefix = ($results =~ s#^PREFIX(\n|$)##) ;
    # any special options? (OPTIONS foo bar zap)
    my $option_regex = 0;
    my $option_random = 0;
    if ($expected =~ s/^OPTIONS? (.+)\n//) {
	foreach my $option (split(' ', $1)) {
	    if ($option eq 'regex') { # allow regular expressions
		$option_regex = 1;
	    }
	    elsif ($option eq 'random') { # all lines match, but in any order
		$option_random = 1;
	    }
	    else {
		die "$0: Unknown OPTION '$option'\n";
	    }
	}
    }
    die "$0: can't have OPTION regex and random\n"
        if $option_regex + option_random > 1;
    if ( $results =~ s/^SKIPPED\n//) {
	print "$results\n" ;
    }
    elsif ($option_random)
    {
        print "not " if !randomMatch($results, $expected);
    }
    elsif (($prefix  && (( $option_regex && $results !~ /^$expected/) ||
			 (!$option_regex && $results !~ /^\Q$expected/))) or
	   (!$prefix && (( $option_regex && $results !~ /^$expected/) ||
			 (!$option_regex && $results ne $expected)))) {
        print STDERR "PROG: $switch\n$prog\n";
        print STDERR "EXPECTED:\n$expected\n";
        print STDERR "GOT:\n$results\n";
        print "not ";
    }
    print "ok ", ++$i, "\n";
    foreach (@@temps)
	{ unlink $_ if $_ }
    foreach (@@temp_path)
	{ rmtree $_ if -d $_ }
}

sub randomMatch
{
    my $got = shift ;
    my $expected = shift;

    my @@got = sort split "\n", $got ;
    my @@expected = sort split "\n", $expected ;

   return "@@got" eq "@@expected";

}
@


1.1.1.1
log
@stock perl 5.8.0 from CPAN
@
text
@@


1.1.1.2
log
@perl 5.8.2 from CPAN
@
text
@a42 1
    next if -d $file;
d61 1
a61 1
print "1.." . (scalar(@@prgs)-$files) . "\n";
d184 1
a184 1
    print "ok " . ++$i . "\n";
@


1.1.1.3
log
@perl 5.8.8 import
@
text
@a7 1
    require './test.pl';
d15 3
d20 1
d62 1
a62 2
plan tests => (scalar(@@prgs)-$files);

d76 1
a78 2
    my ($todo, $todo_reason);
    $todo = $prog =~ s/^#\s*TODO(.*)\n//m and $todo_reason = $1;
d82 1
a82 1
	die "Internal error test $test didn't split into pairs, got " .
d117 9
a125 1
    my $results = runperl( switches => [$switch], stderr => 1, progfile => $tmpfile );
a168 1
    my $ok = 1;
d174 1
a174 1
        $ok = randomMatch($results, $expected);
d180 4
a183 11
        my $err_line = "PROG: $switch\n$prog\n" .
                       "EXPECTED:\n$expected\n" .
                       "GOT:\n$results\n";
        if ($todo) {
            $err_line =~ s/^/# /mg;
            print $err_line;  # Harness can't filter it out from STDERR.
        }
        else {
            print STDERR $err_line;
        }
        $ok = 0;
d185 1
a185 4

    $TODO = $todo ? $todo_reason : 0;
    ok($ok);

@


1.1.1.4
log
@import perl 5.10.0 from CPAN
@
text
@d7 2
d11 194
a204 3
our $pragma_name = "warnings";
our $UTF8 = (${^OPEN} || "") =~ /:utf8/;
require "../t/lib/common.pl";
@


1.1.1.5
log
@import perl 5.16.3 from CPAN - worked on by Andrew Fresh and myself
@
text
@d3 5
a7 2
chdir 't' if -d 't';
@@INC = '../lib';
d9 1
@


