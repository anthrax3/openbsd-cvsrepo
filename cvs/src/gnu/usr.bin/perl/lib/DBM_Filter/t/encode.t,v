head	1.2;
access;
symbols
	OPENBSD_6_2_BASE:1.2
	PERL_5_24_2:1.1.1.3
	OPENBSD_6_1:1.2.0.4
	OPENBSD_6_1_BASE:1.2
	OPENBSD_6_0:1.1.1.2.0.34
	OPENBSD_6_0_BASE:1.1.1.2
	OPENBSD_5_9:1.1.1.2.0.28
	OPENBSD_5_9_BASE:1.1.1.2
	OPENBSD_5_8:1.1.1.2.0.30
	OPENBSD_5_8_BASE:1.1.1.2
	PERL_5_20_2:1.1.1.2
	OPENBSD_5_7:1.1.1.2.0.22
	OPENBSD_5_7_BASE:1.1.1.2
	PERL_5_20_1:1.1.1.2
	OPENBSD_5_6:1.1.1.2.0.26
	OPENBSD_5_6_BASE:1.1.1.2
	PERL_5_18_2:1.1.1.2
	PERL:1.1.1
	OPENBSD_5_5:1.1.1.2.0.24
	OPENBSD_5_5_BASE:1.1.1.2
	OPENBSD_5_4:1.1.1.2.0.20
	OPENBSD_5_4_BASE:1.1.1.2
	PERL_5_16_3:1.1.1.2
	OPENBSD_5_3:1.1.1.2.0.18
	OPENBSD_5_3_BASE:1.1.1.2
	OPENBSD_5_2:1.1.1.2.0.16
	OPENBSD_5_2_BASE:1.1.1.2
	OPENBSD_5_1_BASE:1.1.1.2
	OPENBSD_5_1:1.1.1.2.0.14
	OPENBSD_5_0:1.1.1.2.0.12
	OPENBSD_5_0_BASE:1.1.1.2
	OPENBSD_4_9:1.1.1.2.0.10
	OPENBSD_4_9_BASE:1.1.1.2
	PERL_5_12_2:1.1.1.2
	OPENBSD_4_8:1.1.1.2.0.8
	OPENBSD_4_8_BASE:1.1.1.2
	OPENBSD_4_7:1.1.1.2.0.4
	OPENBSD_4_7_BASE:1.1.1.2
	PERL_5_10_1:1.1.1.2
	OPENBSD_4_6:1.1.1.2.0.6
	OPENBSD_4_6_BASE:1.1.1.2
	OPENBSD_4_5:1.1.1.2.0.2
	OPENBSD_4_5_BASE:1.1.1.2
	PERL_5_10_0:1.1.1.2
	OPENBSD_4_4:1.1.1.1.0.18
	OPENBSD_4_4_BASE:1.1.1.1
	OPENBSD_4_3:1.1.1.1.0.16
	OPENBSD_4_3_BASE:1.1.1.1
	OPENBSD_4_2:1.1.1.1.0.14
	OPENBSD_4_2_BASE:1.1.1.1
	OPENBSD_4_1:1.1.1.1.0.12
	OPENBSD_4_1_BASE:1.1.1.1
	OPENBSD_4_0:1.1.1.1.0.10
	OPENBSD_4_0_BASE:1.1.1.1
	PERL_5_8_8:1.1.1.1
	OPENBSD_3_9:1.1.1.1.0.8
	OPENBSD_3_9_BASE:1.1.1.1
	OPENBSD_3_8:1.1.1.1.0.6
	OPENBSD_3_8_BASE:1.1.1.1
	OPENBSD_3_7:1.1.1.1.0.4
	OPENBSD_3_7_BASE:1.1.1.1
	PERL_5_8_6:1.1.1.1
	OPENBSD_3_6:1.1.1.1.0.2
	OPENBSD_3_6_BASE:1.1.1.1
	PERL_5_8_5:1.1.1.1
	CPAN:1.1.1;
locks; strict;
comment	@# @;
expand	@o@;


1.2
date	2017.02.05.00.32.15;	author afresh1;	state Exp;
branches;
next	1.1;
commitid	cxJ08BvJA9Pt2PTM;

1.1
date	2004.08.09.17.47.40;	author millert;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	2004.08.09.17.47.40;	author millert;	state Exp;
branches;
next	1.1.1.2;

1.1.1.2
date	2008.09.29.17.18.32;	author millert;	state Exp;
branches;
next	1.1.1.3;

1.1.1.3
date	2017.08.14.13.46.14;	author afresh1;	state Exp;
branches;
next	;
commitid	fAzrs78vdW2Yfc6A;


desc
@@


1.2
log
@Fix merge issues, remove excess files - match perl-5.24.1 dist
@
text
@
use strict;
use warnings;
use Carp;

require "../t/charset_tools.pl";

BEGIN 
{

    eval { require Encode; };
    
    if ($@@) {
        print "1..0 #  Skip: Encode is not available\n";
        exit 0;
    }
}


require "dbm_filter_util.pl";

use Test::More tests => 26;

BEGIN { use_ok('DBM_Filter') };
my $db_file;
BEGIN {
    use Config;
    foreach (qw/SDBM_File ODBM_File NDBM_File GDBM_File DB_File/) {
        if ($Config{extensions} =~ /\b$_\b/) {
            $db_file = $_;
            last;
        }
    }
    use_ok($db_file);
};
BEGIN { use_ok('Fcntl') };
BEGIN { use_ok('charnames', qw{greek})};

use charnames qw{greek};

unlink <Op_dbmx*>;
END { unlink <Op_dbmx*>; }

my %h1 = () ;
my $db1 = tie(%h1, $db_file,'Op_dbmx', O_RDWR|O_CREAT, 0640) ;

ok $db1, "tied to $db_file";

eval { $db1->Filter_Push('encode' => 'blah') };
like $@@, qr/^Encoding 'blah' is not available/, "push an illegal filter" ;

eval { $db1->Filter_Push('encode') };
is $@@, '', "push an 'encode' filter (default to utf-8)" ;


{
    no warnings 'uninitialized';
    StoreData(\%h1,
	{	
		undef()	=> undef(),
		'alpha'	=> "\N{alpha}",
		"\N{gamma}"=> "gamma",
		"beta"	=> "\N{beta}",
	});

}

VerifyData(\%h1,
	{
		'alpha'	=> "\N{alpha}",
		"beta"	=> "\N{beta}",
		"\N{gamma}"=> "gamma",
		""		=> "",
	});

eval { $db1->Filter_Pop() };
is $@@, '', "pop the 'utf8' filter" ;

SKIP: {
    skip "Encode doesn't currently work for most filters on EBCDIC, including 8859-16", 11 if $::IS_EBCDIC || $::IS_EBCDIC;
    # Actually the only thing failing below is the euro, because that's the
    # only thing that's added in 8859-16.
eval { $db1->Filter_Push('encode' => 'iso-8859-16') };
is $@@, '', "push an 'encode' filter (specify iso-8859-16)" ;

use charnames qw{:full};
StoreData(\%h1,
	{	
		'euro'	=> "\N{EURO SIGN}",
	});

undef $db1;
{
    use warnings FATAL => 'untie';
    eval { untie %h1 };
    is $@@, '', "untie without inner references" ;
}

# read the dbm file without the filter
my %h2 = () ;
my $db2 = tie(%h2, $db_file,'Op_dbmx', O_RDWR|O_CREAT, 0640) ;

ok $db2, "tied to $db_file";

VerifyData(\%h2,
	   {
	    'alpha'	=> byte_utf8a_to_utf8n("\xCE\xB1"),
	    'beta'	=> byte_utf8a_to_utf8n("\xCE\xB2"),
	    byte_utf8a_to_utf8n("\xCE\xB3") => "gamma",
	    'euro'	=> uni_to_native("\xA4"),
	    ""		=> "",
	   });

undef $db2;
{
    use warnings FATAL => 'untie';
    eval { untie %h2 };
    is $@@, '', "untie without inner references" ;
}

}
@


1.1
log
@Initial revision
@
text
@d6 1
d25 11
a35 1
BEGIN { use_ok('SDBM_File') };
d45 1
a45 1
my $db1 = tie(%h1, 'SDBM_File','Op_dbmx', O_RDWR|O_CREAT, 0640) ;
d47 1
a47 1
ok $db1, "tied to SDBM_File";
d50 1
a50 1
like $@@, qr/^Encoding 'blah' is not available/, "push an illigal filter" ;
d79 4
d101 1
a101 1
my $db2 = tie(%h2, 'SDBM_File','Op_dbmx', O_RDWR|O_CREAT, 0640) ;
d103 1
a103 1
ok $db2, "tied to SDBM_File";
d106 7
a112 7
	{
		'alpha'	=> "\xCE\xB1",
		'beta'	=> "\xCE\xB2",
		"\xCE\xB3"=> "gamma",
		'euro'	=> "\xA4",
		""		=> "",
	});
d121 1
@


1.1.1.1
log
@Import of stock perl 5.8.5
@
text
@@


1.1.1.2
log
@import perl 5.10.0 from CPAN
@
text
@d24 1
a24 11
my $db_file;
BEGIN {
    use Config;
    foreach (qw/SDBM_File ODBM_File NDBM_File GDBM_File DB_File/) {
        if ($Config{extensions} =~ /\b$_\b/) {
            $db_file = $_;
            last;
        }
    }
    use_ok($db_file);
};
d34 1
a34 1
my $db1 = tie(%h1, $db_file,'Op_dbmx', O_RDWR|O_CREAT, 0640) ;
d36 1
a36 1
ok $db1, "tied to $db_file";
d39 1
a39 1
like $@@, qr/^Encoding 'blah' is not available/, "push an illegal filter" ;
d86 1
a86 1
my $db2 = tie(%h2, $db_file,'Op_dbmx', O_RDWR|O_CREAT, 0640) ;
d88 1
a88 1
ok $db2, "tied to $db_file";
d90 8
a97 19
if (ord('A') == 193) { # EBCDIC.
    VerifyData(\%h2,
	   {
	    'alpha'	=> "\xB4\x58",
	    'beta'	=> "\xB4\x59",
	    "\xB4\x62"=> "gamma",		
	    "\x65\x75\x72\x6F" => "\xA4",                           
	    ""		=> "",
	   });
} else {
    VerifyData(\%h2,
	   {
	    'alpha'	=> "\xCE\xB1",
	    'beta'	=> "\xCE\xB2",
	    "\xCE\xB3"=> "gamma",
	    'euro'	=> "\xA4",
	    ""		=> "",
	   });
}
@


1.1.1.3
log
@Import perl-5.24.2
@
text
@a5 1
require "../t/charset_tools.pl";
a77 4
SKIP: {
    skip "Encode doesn't currently work for most filters on EBCDIC, including 8859-16", 11 if $::IS_EBCDIC || $::IS_EBCDIC;
    # Actually the only thing failing below is the euro, because that's the
    # only thing that's added in 8859-16.
d100 2
a101 1
VerifyData(\%h2,
d103 4
a106 4
	    'alpha'	=> byte_utf8a_to_utf8n("\xCE\xB1"),
	    'beta'	=> byte_utf8a_to_utf8n("\xCE\xB2"),
	    byte_utf8a_to_utf8n("\xCE\xB3") => "gamma",
	    'euro'	=> uni_to_native("\xA4"),
d109 10
a126 1
}
@


