head	1.2;
access;
symbols
	OPENBSD_4_8:1.1.1.1.0.4
	OPENBSD_4_8_BASE:1.1.1.1
	OPENBSD_4_7:1.1.1.1.0.2
	OPENBSD_4_7_BASE:1.1.1.1
	PERL_5_10_1:1.1.1.1
	CPAN:1.1.1;
locks; strict;
comment	@# @;


1.2
date	2010.09.24.14.59.56;	author millert;	state dead;
branches;
next	1.1;

1.1
date	2009.10.12.18.11.07;	author millert;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	2009.10.12.18.11.07;	author millert;	state Exp;
branches;
next	;


desc
@@


1.2
log
@remove files no longer in perl 5.12.2 (or that have moved)
@
text
@#!/usr/bin/perl -w

package main;

use strict;
use Test::More;

# We may see failures with package filehandles if Fatal/autodie
# incorrectly pulls out a cached subroutine from a different package.

# We're using Fatal because package filehandles are likely to
# see more use with Fatal than autodie.

use Fatal qw(open);

eval {
    open(FILE, '<', $0);
};


if ($@@) {
    # Holy smokes!  We couldn't even open our own file, bail out...

    plan skip_all => q{Can't open $0 for filehandle tests}
}

plan tests => 4;

my $line = <FILE>;

like($line, qr{perl}, 'Looks like we opened $0 correctly');

close(FILE);

package autodie::test;
use Test::More;

use Fatal qw(open);

eval {
    open(FILE2, '<', $0);
};

is($@@,"",'Opened $0 in autodie::test');

my $line2 = <FILE2>;

like($line2, qr{perl}, '...and we can read from $0 fine');

close(FILE2);

package main;

# This shouldn't read anything, because FILE2 should be inside
# autodie::test

no warnings;    # Otherwise we see problems with FILE2
my $wrong_line = <FILE2>;

ok(! defined($wrong_line),q{Filehandles shouldn't leak between packages});
@


1.1
log
@Initial revision
@
text
@@


1.1.1.1
log
@import perl 5.10.1
@
text
@@
