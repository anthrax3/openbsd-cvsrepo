head	1.2;
access;
symbols
	OPENBSD_4_8:1.1.1.1.0.4
	OPENBSD_4_8_BASE:1.1.1.1
	OPENBSD_4_7:1.1.1.1.0.2
	OPENBSD_4_7_BASE:1.1.1.1
	PERL_5_10_1:1.1.1.1
	CPAN:1.1.1;
locks; strict;
comment	@# @;


1.2
date	2010.09.24.14.59.56;	author millert;	state dead;
branches;
next	1.1;

1.1
date	2009.10.12.18.11.07;	author millert;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	2009.10.12.18.11.07;	author millert;	state Exp;
branches;
next	;


desc
@@


1.2
log
@remove files no longer in perl 5.12.2 (or that have moved)
@
text
@#!/usr/bin/perl -w
use strict;
use warnings;
use Test::More 'no_plan';
use File::Copy;
use constant NO_SUCH_FILE => 'this_file_had_better_not_exist';
use constant EXCEPTION => 'autodie::exception';

# http://perlmonks.org/?node_id=744246 describes a situation where
# using autodie on user-defined functions can fail, depending upon
# their context.  These tests attempt to detect this bug.

eval {
    use autodie qw(copy);
    copy(NO_SUCH_FILE, 'xyzzy');
};

isa_ok($@@,EXCEPTION,"Copying a non-existent file should throw an error");

eval {
    use autodie qw(copy);
    my $x = copy(NO_SUCH_FILE, 'xyzzy');
};

isa_ok($@@,EXCEPTION,"This shouldn't change with scalar context");

eval {
    use autodie qw(copy);
    my @@x = copy(NO_SUCH_FILE, 'xyzzy');
};

isa_ok($@@,EXCEPTION,"This shouldn't change with array context");

# For good measure, test with built-ins.

eval {
    use autodie qw(open);
    open(my $fh, '<', 'xyzzy');
};

isa_ok($@@,EXCEPTION,"Opening a non-existent file should throw an error");

eval {
    use autodie qw(open);
    my $x = open(my $fh, '<', 'xyzzy');
};

isa_ok($@@,EXCEPTION,"This shouldn't change with scalar context");

eval {
    use autodie qw(open);
    my @@x = open(my $fh, '<', 'xyzzy');
};

isa_ok($@@,EXCEPTION,"This shouldn't change with array context");
@


1.1
log
@Initial revision
@
text
@@


1.1.1.1
log
@import perl 5.10.1
@
text
@@
