head	1.2;
access;
symbols
	OPENBSD_4_8:1.1.1.1.0.4
	OPENBSD_4_8_BASE:1.1.1.1
	OPENBSD_4_7:1.1.1.1.0.2
	OPENBSD_4_7_BASE:1.1.1.1
	PERL_5_10_1:1.1.1.1
	CPAN:1.1.1;
locks; strict;
comment	@# @;


1.2
date	2010.09.24.14.59.56;	author millert;	state dead;
branches;
next	1.1;

1.1
date	2009.10.12.18.11.07;	author millert;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	2009.10.12.18.11.07;	author millert;	state Exp;
branches;
next	;


desc
@@


1.2
log
@remove files no longer in perl 5.12.2 (or that have moved)
@
text
@#!/usr/bin/perl -w
use strict;
use Test::More tests => 8;
use Socket;
use autodie qw(socketpair);

# All of this code is based around recv returning an empty
# string when it gets data from a local machine (using AF_UNIX),
# but returning an undefined value on error.  Fatal/autodie
# should be able to tell the difference.

$SIG{PIPE} = 'IGNORE';

my ($sock1, $sock2);
socketpair($sock1, $sock2, AF_UNIX, SOCK_STREAM, PF_UNSPEC);

my $buffer;
send($sock1, "xyz", 0);
my $ret = recv($sock2, $buffer, 2, 0);

use autodie qw(recv);

SKIP: {

    skip('recv() never returns empty string with socketpair emulation',4)
        if ($ret);

    is($buffer,'xy',"recv() operational without autodie");

    # Read the last byte from the socket.
    eval { $ret = recv($sock2, $buffer, 1, 0); };

    is($@@, "", "recv should not die on returning an emtpy string.");

    is($buffer,"z","recv() operational with autodie");
    is($ret,"","recv returns undying empty string for local sockets");

}

eval {
    # STDIN isn't a socket, so this should fail.
    recv(STDIN,$buffer,1,0);
};

ok($@@,'recv dies on returning undef');
isa_ok($@@,'autodie::exception');

$buffer = "# Not an empty string\n";

# Terminate writing for $sock1
shutdown($sock1, 1);

eval {
    use autodie qw(send);
    # Writing to a socket terminated for writing should fail.
    send($sock1,$buffer,0);
};

ok($@@,'send dies on returning undef');
isa_ok($@@,'autodie::exception');
@


1.1
log
@Initial revision
@
text
@@


1.1.1.1
log
@import perl 5.10.1
@
text
@@
