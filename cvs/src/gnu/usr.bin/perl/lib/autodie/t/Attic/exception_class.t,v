head	1.2;
access;
symbols
	OPENBSD_4_8:1.1.1.1.0.4
	OPENBSD_4_8_BASE:1.1.1.1
	OPENBSD_4_7:1.1.1.1.0.2
	OPENBSD_4_7_BASE:1.1.1.1
	PERL_5_10_1:1.1.1.1
	CPAN:1.1.1;
locks; strict;
comment	@# @;


1.2
date	2010.09.24.14.59.56;	author millert;	state dead;
branches;
next	1.1;

1.1
date	2009.10.12.18.11.07;	author millert;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	2009.10.12.18.11.07;	author millert;	state Exp;
branches;
next	;


desc
@@


1.2
log
@remove files no longer in perl 5.12.2 (or that have moved)
@
text
@#!/usr/bin/perl -w
use strict;

use FindBin;
use Test::More 'no_plan';

use lib "$FindBin::Bin/lib";

use constant NO_SUCH_FILE => "this_file_had_better_not_exist_xyzzy";

### Tests with non-existent exception class.

my $open_success = eval {
    use autodie::test::missing qw(open);    # Uses non-existent exceptions
    open(my $fh, '<', NO_SUCH_FILE);
    1;
};

is($open_success,undef,"Open should fail");

isnt($@@,"",'$@@ should not be empty');

is(ref($@@),"",'$@@ should not be a reference or object');

like($@@, qr/Failed to load/, '$@@ should contain bad exception class msg');

#### Tests with malformed exception class.

my $open_success2 = eval {
    use autodie::test::badname qw(open);
    open(my $fh, '<', NO_SUCH_FILE);
    1;
};

is($open_success2,undef,"Open should fail");

isnt($@@,"",'$@@ should not be empty');

is(ref($@@),"",'$@@ should not be a reference or object');

like($@@, qr/Bad exception class/, '$@@ should contain bad exception class msg');

### Tests with well-formed exception class (in Klingon)

my $open_success3 = eval {
    use pujHa'ghach qw(open);         #' <-- this makes my editor happy
    open(my $fh, '<', NO_SUCH_FILE);
    1;
};

is($open_success3,undef,"Open should fail");

isnt("$@@","",'$@@ should not be empty');

isa_ok($@@, "pujHa'ghach::Dotlh", '$@@ should be a Klingon exception');

like($@@, qr/lujqu'/, '$@@ should contain Klingon text');
@


1.1
log
@Initial revision
@
text
@@


1.1.1.1
log
@import perl 5.10.1
@
text
@@
