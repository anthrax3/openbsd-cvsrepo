head	1.6;
access;
symbols
	OPENBSD_4_8:1.5.0.8
	OPENBSD_4_8_BASE:1.5
	OPENBSD_4_7:1.5.0.4
	OPENBSD_4_7_BASE:1.5
	PERL_5_10_1:1.1.1.4
	OPENBSD_4_6:1.5.0.6
	OPENBSD_4_6_BASE:1.5
	OPENBSD_4_5:1.5.0.2
	OPENBSD_4_5_BASE:1.5
	PERL_5_10_0:1.1.1.4
	OPENBSD_4_4:1.4.0.18
	OPENBSD_4_4_BASE:1.4
	OPENBSD_4_3:1.4.0.16
	OPENBSD_4_3_BASE:1.4
	OPENBSD_4_2:1.4.0.14
	OPENBSD_4_2_BASE:1.4
	OPENBSD_4_1:1.4.0.12
	OPENBSD_4_1_BASE:1.4
	OPENBSD_4_0:1.4.0.10
	OPENBSD_4_0_BASE:1.4
	PERL_5_8_8:1.1.1.3
	OPENBSD_3_9:1.4.0.8
	OPENBSD_3_9_BASE:1.4
	OPENBSD_3_8:1.4.0.6
	OPENBSD_3_8_BASE:1.4
	OPENBSD_3_7:1.4.0.4
	OPENBSD_3_7_BASE:1.4
	PERL_5_8_6:1.1.1.3
	OPENBSD_3_6:1.4.0.2
	OPENBSD_3_6_BASE:1.4
	PERL_5_8_5:1.1.1.3
	PERL_5_8_3:1.1.1.2
	OPENBSD_3_5:1.3.0.2
	OPENBSD_3_5_BASE:1.3
	PERL_5_8_2:1.1.1.2
	OPENBSD_3_4:1.2.0.4
	OPENBSD_3_4_BASE:1.2
	OPENBSD_3_3:1.2.0.2
	OPENBSD_3_3_BASE:1.2
	PERL_5_8_0:1.1.1.1
	CPAN:1.1.1;
locks; strict;
comment	@# @;
expand	@o@;


1.6
date	2010.09.24.14.59.46;	author millert;	state dead;
branches;
next	1.5;

1.5
date	2008.09.29.17.36.13;	author millert;	state Exp;
branches;
next	1.4;

1.4
date	2004.08.09.18.09.42;	author millert;	state Exp;
branches;
next	1.3;

1.3
date	2003.12.03.03.02.39;	author millert;	state Exp;
branches;
next	1.2;

1.2
date	2002.12.09.00.45.36;	author millert;	state Exp;
branches;
next	1.1;

1.1
date	2002.10.27.22.15.00;	author millert;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	2002.10.27.22.15.00;	author millert;	state Exp;
branches;
next	1.1.1.2;

1.1.1.2
date	2003.12.03.02.44.04;	author millert;	state Exp;
branches;
next	1.1.1.3;

1.1.1.3
date	2004.08.09.17.47.04;	author millert;	state Exp;
branches;
next	1.1.1.4;

1.1.1.4
date	2008.09.29.17.18.39;	author millert;	state Exp;
branches;
next	;


desc
@@


1.6
log
@remove files no longer in perl 5.12.2 (or that have moved)
@
text
@# Net::FTP.pm
#
# Copyright (c) 1995-2004 Graham Barr <gbarr@@pobox.com>. All rights reserved.
# This program is free software; you can redistribute it and/or
# modify it under the same terms as Perl itself.
#
# Documentation (at end) improved 1996 by Nathan Torkington <gnat@@frii.com>.

package Net::FTP;

require 5.001;

use strict;
use vars qw(@@ISA $VERSION);
use Carp;

use Socket 1.3;
use IO::Socket;
use Time::Local;
use Net::Cmd;
use Net::Config;
use Fcntl qw(O_WRONLY O_RDONLY O_APPEND O_CREAT O_TRUNC);

$VERSION = '2.77';
@@ISA     = qw(Exporter Net::Cmd IO::Socket::INET);

# Someday I will "use constant", when I am not bothered to much about
# compatability with older releases of perl

use vars qw($TELNET_IAC $TELNET_IP $TELNET_DM);
($TELNET_IAC, $TELNET_IP, $TELNET_DM) = (255, 244, 242);


BEGIN {

  # make a constant so code is fast'ish
  my $is_os390 = $^O eq 'os390';
  *trEBCDIC = sub () {$is_os390}
}


sub new {
  my $pkg = shift;
  my ($peer, %arg);
  if (@@_ % 2) {
    $peer = shift;
    %arg  = @@_;
  }
  else {
    %arg  = @@_;
    $peer = delete $arg{Host};
  }

  my $host      = $peer;
  my $fire      = undef;
  my $fire_type = undef;

  if (exists($arg{Firewall}) || Net::Config->requires_firewall($peer)) {
         $fire = $arg{Firewall}
      || $ENV{FTP_FIREWALL}
      || $NetConfig{ftp_firewall}
      || undef;

    if (defined $fire) {
      $peer = $fire;
      delete $arg{Port};
           $fire_type = $arg{FirewallType}
        || $ENV{FTP_FIREWALL_TYPE}
        || $NetConfig{firewall_type}
        || undef;
    }
  }

  my $ftp = $pkg->SUPER::new(
    PeerAddr  => $peer,
    PeerPort  => $arg{Port} || 'ftp(21)',
    LocalAddr => $arg{'LocalAddr'},
    Proto     => 'tcp',
    Timeout   => defined $arg{Timeout}
    ? $arg{Timeout}
    : 120
    )
    or return undef;

  ${*$ftp}{'net_ftp_host'}    = $host;                             # Remote hostname
  ${*$ftp}{'net_ftp_type'}    = 'A';                               # ASCII/binary/etc mode
  ${*$ftp}{'net_ftp_blksize'} = abs($arg{'BlockSize'} || 10240);

  ${*$ftp}{'net_ftp_localaddr'} = $arg{'LocalAddr'};

  ${*$ftp}{'net_ftp_firewall'} = $fire
    if (defined $fire);
  ${*$ftp}{'net_ftp_firewall_type'} = $fire_type
    if (defined $fire_type);

  ${*$ftp}{'net_ftp_passive'} =
      int exists $arg{Passive} ? $arg{Passive}
    : exists $ENV{FTP_PASSIVE} ? $ENV{FTP_PASSIVE}
    : defined $fire            ? $NetConfig{ftp_ext_passive}
    : $NetConfig{ftp_int_passive};    # Whew! :-)

  $ftp->hash(exists $arg{Hash} ? $arg{Hash} : 0, 1024);

  $ftp->autoflush(1);

  $ftp->debug(exists $arg{Debug} ? $arg{Debug} : undef);

  unless ($ftp->response() == CMD_OK) {
    $ftp->close();
    $@@ = $ftp->message;
    undef $ftp;
  }

  $ftp;
}

##
## User interface methods
##


sub host {
  my $me = shift;
  ${*$me}{'net_ftp_host'};
}


sub hash {
  my $ftp = shift;    # self

  my ($h, $b) = @@_;
  unless ($h) {
    delete ${*$ftp}{'net_ftp_hash'};
    return [\*STDERR, 0];
  }
  ($h, $b) = (ref($h) ? $h : \*STDERR, $b || 1024);
  select((select($h), $| = 1)[0]);
  $b = 512 if $b < 512;
  ${*$ftp}{'net_ftp_hash'} = [$h, $b];
}


sub quit {
  my $ftp = shift;

  $ftp->_QUIT;
  $ftp->close;
}


sub DESTROY { }


sub ascii  { shift->type('A', @@_); }
sub binary { shift->type('I', @@_); }


sub ebcdic {
  carp "TYPE E is unsupported, shall default to I";
  shift->type('E', @@_);
}


sub byte {
  carp "TYPE L is unsupported, shall default to I";
  shift->type('L', @@_);
}

# Allow the user to send a command directly, BE CAREFUL !!


sub quot {
  my $ftp = shift;
  my $cmd = shift;

  $ftp->command(uc $cmd, @@_);
  $ftp->response();
}


sub site {
  my $ftp = shift;

  $ftp->command("SITE", @@_);
  $ftp->response();
}


sub mdtm {
  my $ftp  = shift;
  my $file = shift;

  # Server Y2K bug workaround
  #
  # sigh; some idiotic FTP servers use ("19%d",tm.tm_year) instead of
  # ("%d",tm.tm_year+1900).  This results in an extra digit in the
  # string returned. To account for this we allow an optional extra
  # digit in the year. Then if the first two digits are 19 we use the
  # remainder, otherwise we subtract 1900 from the whole year.

  $ftp->_MDTM($file)
    && $ftp->message =~ /((\d\d)(\d\d\d?))(\d\d)(\d\d)(\d\d)(\d\d)(\d\d)/
    ? timegm($8, $7, $6, $5, $4 - 1, $2 eq '19' ? $3 : ($1 - 1900))
    : undef;
}


sub size {
  my $ftp  = shift;
  my $file = shift;
  my $io;
  if ($ftp->supported("SIZE")) {
    return $ftp->_SIZE($file)
      ? ($ftp->message =~ /(\d+)\s*(bytes?\s*)?$/)[0]
      : undef;
  }
  elsif ($ftp->supported("STAT")) {
    my @@msg;
    return undef
      unless $ftp->_STAT($file) && (@@msg = $ftp->message) == 3;
    my $line;
    foreach $line (@@msg) {
      return (split(/\s+/, $line))[4]
        if $line =~ /^[-rwxSsTt]{10}/;
    }
  }
  else {
    my @@files = $ftp->dir($file);
    if (@@files) {
      return (split(/\s+/, $1))[4]
        if $files[0] =~ /^([-rwxSsTt]{10}.*)$/;
    }
  }
  undef;
}


sub login {
  my ($ftp, $user, $pass, $acct) = @@_;
  my ($ok, $ruser, $fwtype);

  unless (defined $user) {
    require Net::Netrc;

    my $rc = Net::Netrc->lookup(${*$ftp}{'net_ftp_host'});

    ($user, $pass, $acct) = $rc->lpa()
      if ($rc);
  }

  $user ||= "anonymous";
  $ruser = $user;

  $fwtype = ${*$ftp}{'net_ftp_firewall_type'}
    || $NetConfig{'ftp_firewall_type'}
    || 0;

  if ($fwtype && defined ${*$ftp}{'net_ftp_firewall'}) {
    if ($fwtype == 1 || $fwtype == 7) {
      $user .= '@@' . ${*$ftp}{'net_ftp_host'};
    }
    else {
      require Net::Netrc;

      my $rc = Net::Netrc->lookup(${*$ftp}{'net_ftp_firewall'});

      my ($fwuser, $fwpass, $fwacct) = $rc ? $rc->lpa() : ();

      if ($fwtype == 5) {
        $user = join('@@', $user, $fwuser, ${*$ftp}{'net_ftp_host'});
        $pass = $pass . '@@' . $fwpass;
      }
      else {
        if ($fwtype == 2) {
          $user .= '@@' . ${*$ftp}{'net_ftp_host'};
        }
        elsif ($fwtype == 6) {
          $fwuser .= '@@' . ${*$ftp}{'net_ftp_host'};
        }

        $ok = $ftp->_USER($fwuser);

        return 0 unless $ok == CMD_OK || $ok == CMD_MORE;

        $ok = $ftp->_PASS($fwpass || "");

        return 0 unless $ok == CMD_OK || $ok == CMD_MORE;

        $ok = $ftp->_ACCT($fwacct)
          if defined($fwacct);

        if ($fwtype == 3) {
          $ok = $ftp->command("SITE", ${*$ftp}{'net_ftp_host'})->response;
        }
        elsif ($fwtype == 4) {
          $ok = $ftp->command("OPEN", ${*$ftp}{'net_ftp_host'})->response;
        }

        return 0 unless $ok == CMD_OK || $ok == CMD_MORE;
      }
    }
  }

  $ok = $ftp->_USER($user);

  # Some dumb firewalls don't prefix the connection messages
  $ok = $ftp->response()
    if ($ok == CMD_OK && $ftp->code == 220 && $user =~ /\@@/);

  if ($ok == CMD_MORE) {
    unless (defined $pass) {
      require Net::Netrc;

      my $rc = Net::Netrc->lookup(${*$ftp}{'net_ftp_host'}, $ruser);

      ($ruser, $pass, $acct) = $rc->lpa()
        if ($rc);

      $pass = '-anonymous@@'
        if (!defined $pass && (!defined($ruser) || $ruser =~ /^anonymous/o));
    }

    $ok = $ftp->_PASS($pass || "");
  }

  $ok = $ftp->_ACCT($acct)
    if (defined($acct) && ($ok == CMD_MORE || $ok == CMD_OK));

  if ($fwtype == 7 && $ok == CMD_OK && defined ${*$ftp}{'net_ftp_firewall'}) {
    my ($f, $auth, $resp) = _auth_id($ftp);
    $ftp->authorize($auth, $resp) if defined($resp);
  }

  $ok == CMD_OK;
}


sub account {
  @@_ == 2 or croak 'usage: $ftp->account( ACCT )';
  my $ftp  = shift;
  my $acct = shift;
  $ftp->_ACCT($acct) == CMD_OK;
}


sub _auth_id {
  my ($ftp, $auth, $resp) = @@_;

  unless (defined $resp) {
    require Net::Netrc;

    $auth ||= eval { (getpwuid($>))[0] } || $ENV{NAME};

    my $rc = Net::Netrc->lookup(${*$ftp}{'net_ftp_firewall'}, $auth)
      || Net::Netrc->lookup(${*$ftp}{'net_ftp_firewall'});

    ($auth, $resp) = $rc->lpa()
      if ($rc);
  }
  ($ftp, $auth, $resp);
}


sub authorize {
  @@_ >= 1 || @@_ <= 3 or croak 'usage: $ftp->authorize( [AUTH [, RESP]])';

  my ($ftp, $auth, $resp) = &_auth_id;

  my $ok = $ftp->_AUTH($auth || "");

  $ok = $ftp->_RESP($resp || "")
    if ($ok == CMD_MORE);

  $ok == CMD_OK;
}


sub rename {
  @@_ == 3 or croak 'usage: $ftp->rename(FROM, TO)';

  my ($ftp, $from, $to) = @@_;

  $ftp->_RNFR($from)
    && $ftp->_RNTO($to);
}


sub type {
  my $ftp    = shift;
  my $type   = shift;
  my $oldval = ${*$ftp}{'net_ftp_type'};

  return $oldval
    unless (defined $type);

  return undef
    unless ($ftp->_TYPE($type, @@_));

  ${*$ftp}{'net_ftp_type'} = join(" ", $type, @@_);

  $oldval;
}


sub alloc {
  my $ftp    = shift;
  my $size   = shift;
  my $oldval = ${*$ftp}{'net_ftp_allo'};

  return $oldval
    unless (defined $size);

  return undef
    unless ($ftp->_ALLO($size, @@_));

  ${*$ftp}{'net_ftp_allo'} = join(" ", $size, @@_);

  $oldval;
}


sub abort {
  my $ftp = shift;

  send($ftp, pack("CCC", $TELNET_IAC, $TELNET_IP, $TELNET_IAC), MSG_OOB);

  $ftp->command(pack("C", $TELNET_DM) . "ABOR");

  ${*$ftp}{'net_ftp_dataconn'}->close()
    if defined ${*$ftp}{'net_ftp_dataconn'};

  $ftp->response();

  $ftp->status == CMD_OK;
}


sub get {
  my ($ftp, $remote, $local, $where) = @@_;

  my ($loc, $len, $buf, $resp, $data);
  local *FD;

  my $localfd = ref($local) || ref(\$local) eq "GLOB";

  ($local = $remote) =~ s#^.*/##
    unless (defined $local);

  croak("Bad remote filename '$remote'\n")
    if $remote =~ /[\r\n]/s;

  ${*$ftp}{'net_ftp_rest'} = $where if defined $where;
  my $rest = ${*$ftp}{'net_ftp_rest'};

  delete ${*$ftp}{'net_ftp_port'};
  delete ${*$ftp}{'net_ftp_pasv'};

  $data = $ftp->retr($remote)
    or return undef;

  if ($localfd) {
    $loc = $local;
  }
  else {
    $loc = \*FD;

    unless (sysopen($loc, $local, O_CREAT | O_WRONLY | ($rest ? O_APPEND: O_TRUNC))) {
      carp "Cannot open Local file $local: $!\n";
      $data->abort;
      return undef;
    }
  }

  if ($ftp->type eq 'I' && !binmode($loc)) {
    carp "Cannot binmode Local file $local: $!\n";
    $data->abort;
    close($loc) unless $localfd;
    return undef;
  }

  $buf = '';
  my ($count, $hashh, $hashb, $ref) = (0);

  ($hashh, $hashb) = @@$ref
    if ($ref = ${*$ftp}{'net_ftp_hash'});

  my $blksize = ${*$ftp}{'net_ftp_blksize'};
  local $\;    # Just in case

  while (1) {
    last unless $len = $data->read($buf, $blksize);

    if (trEBCDIC && $ftp->type ne 'I') {
      $buf = $ftp->toebcdic($buf);
      $len = length($buf);
    }

    if ($hashh) {
      $count += $len;
      print $hashh "#" x (int($count / $hashb));
      $count %= $hashb;
    }
    unless (print $loc $buf) {
      carp "Cannot write to Local file $local: $!\n";
      $data->abort;
      close($loc)
        unless $localfd;
      return undef;
    }
  }

  print $hashh "\n" if $hashh;

  unless ($localfd) {
    unless (close($loc)) {
      carp "Cannot close file $local (perhaps disk space) $!\n";
      return undef;
    }
  }

  unless ($data->close())    # implied $ftp->response
  {
    carp "Unable to close datastream";
    return undef;
  }

  return $local;
}


sub cwd {
  @@_ == 1 || @@_ == 2 or croak 'usage: $ftp->cwd( [ DIR ] )';

  my ($ftp, $dir) = @@_;

  $dir = "/" unless defined($dir) && $dir =~ /\S/;

  $dir eq ".."
    ? $ftp->_CDUP()
    : $ftp->_CWD($dir);
}


sub cdup {
  @@_ == 1 or croak 'usage: $ftp->cdup()';
  $_[0]->_CDUP;
}


sub pwd {
  @@_ == 1 || croak 'usage: $ftp->pwd()';
  my $ftp = shift;

  $ftp->_PWD();
  $ftp->_extract_path;
}

# rmdir( $ftp, $dir, [ $recurse ] )
#
# Removes $dir on remote host via FTP.
# $ftp is handle for remote host
#
# If $recurse is TRUE, the directory and deleted recursively.
# This means all of its contents and subdirectories.
#
# Initial version contributed by Dinkum Software
#
sub rmdir {
  @@_ == 2 || @@_ == 3 or croak('usage: $ftp->rmdir( DIR [, RECURSE ] )');

  # Pick off the args
  my ($ftp, $dir, $recurse) = @@_;
  my $ok;

  return $ok
    if $ok = $ftp->_RMD($dir)
    or !$recurse;

  # Try to delete the contents
  # Get a list of all the files in the directory
  my @@filelist = grep { !/^\.{1,2}$/ } $ftp->ls($dir);

  return undef
    unless @@filelist;    # failed, it is probably not a directory

  # Go thru and delete each file or the directory
  my $file;
  foreach $file (map { m,/, ? $_ : "$dir/$_" } @@filelist) {
    next                 # successfully deleted the file
      if $ftp->delete($file);

    # Failed to delete it, assume its a directory
    # Recurse and ignore errors, the final rmdir() will
    # fail on any errors here
    return $ok
      unless $ok = $ftp->rmdir($file, 1);
  }

  # Directory should be empty
  # Try to remove the directory again
  # Pass results directly to caller
  # If any of the prior deletes failed, this
  # rmdir() will fail because directory is not empty
  return $ftp->_RMD($dir);
}


sub restart {
  @@_ == 2 || croak 'usage: $ftp->restart( BYTE_OFFSET )';

  my ($ftp, $where) = @@_;

  ${*$ftp}{'net_ftp_rest'} = $where;

  return undef;
}


sub mkdir {
  @@_ == 2 || @@_ == 3 or croak 'usage: $ftp->mkdir( DIR [, RECURSE ] )';

  my ($ftp, $dir, $recurse) = @@_;

  $ftp->_MKD($dir) || $recurse
    or return undef;

  my $path = $dir;

  unless ($ftp->ok) {
    my @@path = split(m#(?=/+)#, $dir);

    $path = "";

    while (@@path) {
      $path .= shift @@path;

      $ftp->_MKD($path);

      $path = $ftp->_extract_path($path);
    }

    # If the creation of the last element was not successful, see if we
    # can cd to it, if so then return path

    unless ($ftp->ok) {
      my ($status, $message) = ($ftp->status, $ftp->message);
      my $pwd = $ftp->pwd;

      if ($pwd && $ftp->cwd($dir)) {
        $path = $dir;
        $ftp->cwd($pwd);
      }
      else {
        undef $path;
      }
      $ftp->set_status($status, $message);
    }
  }

  $path;
}


sub delete {
  @@_ == 2 || croak 'usage: $ftp->delete( FILENAME )';

  $_[0]->_DELE($_[1]);
}


sub put        { shift->_store_cmd("stor", @@_) }
sub put_unique { shift->_store_cmd("stou", @@_) }
sub append     { shift->_store_cmd("appe", @@_) }


sub nlst { shift->_data_cmd("NLST", @@_) }
sub list { shift->_data_cmd("LIST", @@_) }
sub retr { shift->_data_cmd("RETR", @@_) }
sub stor { shift->_data_cmd("STOR", @@_) }
sub stou { shift->_data_cmd("STOU", @@_) }
sub appe { shift->_data_cmd("APPE", @@_) }


sub _store_cmd {
  my ($ftp, $cmd, $local, $remote) = @@_;
  my ($loc, $sock, $len, $buf);
  local *FD;

  my $localfd = ref($local) || ref(\$local) eq "GLOB";

  unless (defined $remote) {
    croak 'Must specify remote filename with stream input'
      if $localfd;

    require File::Basename;
    $remote = File::Basename::basename($local);
  }
  if (defined ${*$ftp}{'net_ftp_allo'}) {
    delete ${*$ftp}{'net_ftp_allo'};
  }
  else {

    # if the user hasn't already invoked the alloc method since the last
    # _store_cmd call, figure out if the local file is a regular file(not
    # a pipe, or device) and if so get the file size from stat, and send
    # an ALLO command before sending the STOR, STOU, or APPE command.
    my $size = do { local $^W; -f $local && -s _ };    # no ALLO if sending data from a pipe
    $ftp->_ALLO($size) if $size;
  }
  croak("Bad remote filename '$remote'\n")
    if $remote =~ /[\r\n]/s;

  if ($localfd) {
    $loc = $local;
  }
  else {
    $loc = \*FD;

    unless (sysopen($loc, $local, O_RDONLY)) {
      carp "Cannot open Local file $local: $!\n";
      return undef;
    }
  }

  if ($ftp->type eq 'I' && !binmode($loc)) {
    carp "Cannot binmode Local file $local: $!\n";
    return undef;
  }

  delete ${*$ftp}{'net_ftp_port'};
  delete ${*$ftp}{'net_ftp_pasv'};

  $sock = $ftp->_data_cmd($cmd, $remote)
    or return undef;

  $remote = ($ftp->message =~ /FILE:\s*(.*)/)[0]
    if 'STOU' eq uc $cmd;

  my $blksize = ${*$ftp}{'net_ftp_blksize'};

  my ($count, $hashh, $hashb, $ref) = (0);

  ($hashh, $hashb) = @@$ref
    if ($ref = ${*$ftp}{'net_ftp_hash'});

  while (1) {
    last unless $len = read($loc, $buf = "", $blksize);

    if (trEBCDIC && $ftp->type ne 'I') {
      $buf = $ftp->toascii($buf);
      $len = length($buf);
    }

    if ($hashh) {
      $count += $len;
      print $hashh "#" x (int($count / $hashb));
      $count %= $hashb;
    }

    my $wlen;
    unless (defined($wlen = $sock->write($buf, $len)) && $wlen == $len) {
      $sock->abort;
      close($loc)
        unless $localfd;
      print $hashh "\n" if $hashh;
      return undef;
    }
  }

  print $hashh "\n" if $hashh;

  close($loc)
    unless $localfd;

  $sock->close()
    or return undef;

  if ('STOU' eq uc $cmd and $ftp->message =~ m/unique\s+file\s*name\s*:\s*(.*)\)|"(.*)"/) {
    require File::Basename;
    $remote = File::Basename::basename($+);
  }

  return $remote;
}


sub port {
  @@_ == 1 || @@_ == 2 or croak 'usage: $ftp->port([PORT])';

  my ($ftp, $port) = @@_;
  my $ok;

  delete ${*$ftp}{'net_ftp_intern_port'};

  unless (defined $port) {

    # create a Listen socket at same address as the command socket

    ${*$ftp}{'net_ftp_listen'} ||= IO::Socket::INET->new(
      Listen    => 5,
      Proto     => 'tcp',
      Timeout   => $ftp->timeout,
      LocalAddr => $ftp->sockhost,
    );

    my $listen = ${*$ftp}{'net_ftp_listen'};

    my ($myport, @@myaddr) = ($listen->sockport, split(/\./, $listen->sockhost));

    $port = join(',', @@myaddr, $myport >> 8, $myport & 0xff);

    ${*$ftp}{'net_ftp_intern_port'} = 1;
  }

  $ok = $ftp->_PORT($port);

  ${*$ftp}{'net_ftp_port'} = $port;

  $ok;
}


sub ls  { shift->_list_cmd("NLST", @@_); }
sub dir { shift->_list_cmd("LIST", @@_); }


sub pasv {
  @@_ == 1 or croak 'usage: $ftp->pasv()';

  my $ftp = shift;

  delete ${*$ftp}{'net_ftp_intern_port'};

  $ftp->_PASV && $ftp->message =~ /(\d+(,\d+)+)/
    ? ${*$ftp}{'net_ftp_pasv'} = $1
    : undef;
}


sub unique_name {
  my $ftp = shift;
  ${*$ftp}{'net_ftp_unique'} || undef;
}


sub supported {
  @@_ == 2 or croak 'usage: $ftp->supported( CMD )';
  my $ftp  = shift;
  my $cmd  = uc shift;
  my $hash = ${*$ftp}{'net_ftp_supported'} ||= {};

  return $hash->{$cmd}
    if exists $hash->{$cmd};

  return $hash->{$cmd} = 0
    unless $ftp->_HELP($cmd);

  my $text = $ftp->message;
  if ($text =~ /following\s+commands/i) {
    $text =~ s/^.*\n//;
    while ($text =~ /(\*?)(\w+)(\*?)/sg) {
      $hash->{"\U$2"} = !length("$1$3");
    }
  }
  else {
    $hash->{$cmd} = $text !~ /unimplemented/i;
  }

  $hash->{$cmd} ||= 0;
}

##
## Deprecated methods
##


sub lsl {
  carp "Use of Net::FTP::lsl deprecated, use 'dir'"
    if $^W;
  goto &dir;
}


sub authorise {
  carp "Use of Net::FTP::authorise deprecated, use 'authorize'"
    if $^W;
  goto &authorize;
}


##
## Private methods
##


sub _extract_path {
  my ($ftp, $path) = @@_;

  # This tries to work both with and without the quote doubling
  # convention (RFC 959 requires it, but the first 3 servers I checked
  # didn't implement it).  It will fail on a server which uses a quote in
  # the message which isn't a part of or surrounding the path.
  $ftp->ok
    && $ftp->message =~ /(?:^|\s)\"(.*)\"(?:$|\s)/
    && ($path = $1) =~ s/\"\"/\"/g;

  $path;
}

##
## Communication methods
##


sub _dataconn {
  my $ftp  = shift;
  my $data = undef;
  my $pkg  = "Net::FTP::" . $ftp->type;

  eval "require " . $pkg;

  $pkg =~ s/ /_/g;

  delete ${*$ftp}{'net_ftp_dataconn'};

  if (defined ${*$ftp}{'net_ftp_pasv'}) {
    my @@port = map { 0 + $_ } split(/,/, ${*$ftp}{'net_ftp_pasv'});

    $data = $pkg->new(
      PeerAddr  => join(".", @@port[0 .. 3]),
      PeerPort  => $port[4] * 256 + $port[5],
      LocalAddr => ${*$ftp}{'net_ftp_localaddr'},
      Proto     => 'tcp'
    );
  }
  elsif (defined ${*$ftp}{'net_ftp_listen'}) {
    $data = ${*$ftp}{'net_ftp_listen'}->accept($pkg);
    close(delete ${*$ftp}{'net_ftp_listen'});
  }

  if ($data) {
    ${*$data} = "";
    $data->timeout($ftp->timeout);
    ${*$ftp}{'net_ftp_dataconn'} = $data;
    ${*$data}{'net_ftp_cmd'}     = $ftp;
    ${*$data}{'net_ftp_blksize'} = ${*$ftp}{'net_ftp_blksize'};
  }

  $data;
}


sub _list_cmd {
  my $ftp = shift;
  my $cmd = uc shift;

  delete ${*$ftp}{'net_ftp_port'};
  delete ${*$ftp}{'net_ftp_pasv'};

  my $data = $ftp->_data_cmd($cmd, @@_);

  return
    unless (defined $data);

  require Net::FTP::A;
  bless $data, "Net::FTP::A";    # Force ASCII mode

  my $databuf = '';
  my $buf     = '';
  my $blksize = ${*$ftp}{'net_ftp_blksize'};

  while ($data->read($databuf, $blksize)) {
    $buf .= $databuf;
  }

  my $list = [split(/\n/, $buf)];

  $data->close();

  if (trEBCDIC) {
    for (@@$list) { $_ = $ftp->toebcdic($_) }
  }

  wantarray
    ? @@{$list}
    : $list;
}


sub _data_cmd {
  my $ftp   = shift;
  my $cmd   = uc shift;
  my $ok    = 1;
  my $where = delete ${*$ftp}{'net_ftp_rest'} || 0;
  my $arg;

  for $arg (@@_) {
    croak("Bad argument '$arg'\n")
      if $arg =~ /[\r\n]/s;
  }

  if ( ${*$ftp}{'net_ftp_passive'}
    && !defined ${*$ftp}{'net_ftp_pasv'}
    && !defined ${*$ftp}{'net_ftp_port'})
  {
    my $data = undef;

    $ok = defined $ftp->pasv;
    $ok = $ftp->_REST($where)
      if $ok && $where;

    if ($ok) {
      $ftp->command($cmd, @@_);
      $data = $ftp->_dataconn();
      $ok   = CMD_INFO == $ftp->response();
      if ($ok) {
        $data->reading
          if $data && $cmd =~ /RETR|LIST|NLST/;
        return $data;
      }
      $data->_close
        if $data;
    }
    return undef;
  }

  $ok = $ftp->port
    unless (defined ${*$ftp}{'net_ftp_port'}
    || defined ${*$ftp}{'net_ftp_pasv'});

  $ok = $ftp->_REST($where)
    if $ok && $where;

  return undef
    unless $ok;

  $ftp->command($cmd, @@_);

  return 1
    if (defined ${*$ftp}{'net_ftp_pasv'});

  $ok = CMD_INFO == $ftp->response();

  return $ok
    unless exists ${*$ftp}{'net_ftp_intern_port'};

  if ($ok) {
    my $data = $ftp->_dataconn();

    $data->reading
      if $data && $cmd =~ /RETR|LIST|NLST/;

    return $data;
  }


  close(delete ${*$ftp}{'net_ftp_listen'});

  return undef;
}

##
## Over-ride methods (Net::Cmd)
##


sub debug_text { $_[2] =~ /^(pass|resp|acct)/i ? "$1 ....\n" : $_[2]; }


sub command {
  my $ftp = shift;

  delete ${*$ftp}{'net_ftp_port'};
  $ftp->SUPER::command(@@_);
}


sub response {
  my $ftp  = shift;
  my $code = $ftp->SUPER::response();

  delete ${*$ftp}{'net_ftp_pasv'}
    if ($code != CMD_MORE && $code != CMD_INFO);

  $code;
}


sub parse_response {
  return ($1, $2 eq "-")
    if $_[1] =~ s/^(\d\d\d)([- ]?)//o;

  my $ftp = shift;

  # Darn MS FTP server is a load of CRAP !!!!
  return ()
    unless ${*$ftp}{'net_cmd_code'} + 0;

  (${*$ftp}{'net_cmd_code'}, 1);
}

##
## Allow 2 servers to talk directly
##


sub pasv_xfer_unique {
  my ($sftp, $sfile, $dftp, $dfile) = @@_;
  $sftp->pasv_xfer($sfile, $dftp, $dfile, 1);
}


sub pasv_xfer {
  my ($sftp, $sfile, $dftp, $dfile, $unique) = @@_;

  ($dfile = $sfile) =~ s#.*/##
    unless (defined $dfile);

  my $port = $sftp->pasv
    or return undef;

  $dftp->port($port)
    or return undef;

  return undef
    unless ($unique ? $dftp->stou($dfile) : $dftp->stor($dfile));

  unless ($sftp->retr($sfile) && $sftp->response == CMD_INFO) {
    $sftp->retr($sfile);
    $dftp->abort;
    $dftp->response();
    return undef;
  }

  $dftp->pasv_wait($sftp);
}


sub pasv_wait {
  @@_ == 2 or croak 'usage: $ftp->pasv_wait(NON_PASV_FTP)';

  my ($ftp, $non_pasv) = @@_;
  my ($file, $rin, $rout);

  vec($rin = '', fileno($ftp), 1) = 1;
  select($rout = $rin, undef, undef, undef);

  $ftp->response();
  $non_pasv->response();

  return undef
    unless $ftp->ok() && $non_pasv->ok();

  return $1
    if $ftp->message =~ /unique file name:\s*(\S*)\s*\)/;

  return $1
    if $non_pasv->message =~ /unique file name:\s*(\S*)\s*\)/;

  return 1;
}


sub feature {
  @@_ == 2 or croak 'usage: $ftp->feature( NAME )';
  my ($ftp, $feat) = @@_;

  my $feature = ${*$ftp}{net_ftp_feature} ||= do {
    my @@feat;

    # Example response
    # 211-Features:
    #  MDTM
    #  REST STREAM
    #  SIZE
    # 211 End

    @@feat = map { /^\s+(.*\S)/ } $ftp->message
      if $ftp->_FEAT;

    \@@feat;
  };

  return grep { /^\Q$feat\E\b/i } @@$feature;
}


sub cmd { shift->command(@@_)->response() }

########################################
#
# RFC959 commands
#


sub _ABOR { shift->command("ABOR")->response() == CMD_OK }
sub _ALLO { shift->command("ALLO", @@_)->response() == CMD_OK }
sub _CDUP { shift->command("CDUP")->response() == CMD_OK }
sub _NOOP { shift->command("NOOP")->response() == CMD_OK }
sub _PASV { shift->command("PASV")->response() == CMD_OK }
sub _QUIT { shift->command("QUIT")->response() == CMD_OK }
sub _DELE { shift->command("DELE", @@_)->response() == CMD_OK }
sub _CWD  { shift->command("CWD", @@_)->response() == CMD_OK }
sub _PORT { shift->command("PORT", @@_)->response() == CMD_OK }
sub _RMD  { shift->command("RMD", @@_)->response() == CMD_OK }
sub _MKD  { shift->command("MKD", @@_)->response() == CMD_OK }
sub _PWD  { shift->command("PWD", @@_)->response() == CMD_OK }
sub _TYPE { shift->command("TYPE", @@_)->response() == CMD_OK }
sub _RNTO { shift->command("RNTO", @@_)->response() == CMD_OK }
sub _RESP { shift->command("RESP", @@_)->response() == CMD_OK }
sub _MDTM { shift->command("MDTM", @@_)->response() == CMD_OK }
sub _SIZE { shift->command("SIZE", @@_)->response() == CMD_OK }
sub _HELP { shift->command("HELP", @@_)->response() == CMD_OK }
sub _STAT { shift->command("STAT", @@_)->response() == CMD_OK }
sub _FEAT { shift->command("FEAT", @@_)->response() == CMD_OK }
sub _APPE { shift->command("APPE", @@_)->response() == CMD_INFO }
sub _LIST { shift->command("LIST", @@_)->response() == CMD_INFO }
sub _NLST { shift->command("NLST", @@_)->response() == CMD_INFO }
sub _RETR { shift->command("RETR", @@_)->response() == CMD_INFO }
sub _STOR { shift->command("STOR", @@_)->response() == CMD_INFO }
sub _STOU { shift->command("STOU", @@_)->response() == CMD_INFO }
sub _RNFR { shift->command("RNFR", @@_)->response() == CMD_MORE }
sub _REST { shift->command("REST", @@_)->response() == CMD_MORE }
sub _PASS { shift->command("PASS", @@_)->response() }
sub _ACCT { shift->command("ACCT", @@_)->response() }
sub _AUTH { shift->command("AUTH", @@_)->response() }


sub _USER {
  my $ftp = shift;
  my $ok  = $ftp->command("USER", @@_)->response();

  # A certain brain dead firewall :-)
  $ok = $ftp->command("user", @@_)->response()
    unless $ok == CMD_MORE or $ok == CMD_OK;

  $ok;
}


sub _SMNT { shift->unsupported(@@_) }
sub _MODE { shift->unsupported(@@_) }
sub _SYST { shift->unsupported(@@_) }
sub _STRU { shift->unsupported(@@_) }
sub _REIN { shift->unsupported(@@_) }

1;

__END__

=head1 NAME

Net::FTP - FTP Client class

=head1 SYNOPSIS

    use Net::FTP;

    $ftp = Net::FTP->new("some.host.name", Debug => 0)
      or die "Cannot connect to some.host.name: $@@";

    $ftp->login("anonymous",'-anonymous@@')
      or die "Cannot login ", $ftp->message;

    $ftp->cwd("/pub")
      or die "Cannot change working directory ", $ftp->message;

    $ftp->get("that.file")
      or die "get failed ", $ftp->message;

    $ftp->quit;

=head1 DESCRIPTION

C<Net::FTP> is a class implementing a simple FTP client in Perl as
described in RFC959.  It provides wrappers for a subset of the RFC959
commands.

=head1 OVERVIEW

FTP stands for File Transfer Protocol.  It is a way of transferring
files between networked machines.  The protocol defines a client
(whose commands are provided by this module) and a server (not
implemented in this module).  Communication is always initiated by the
client, and the server responds with a message and a status code (and
sometimes with data).

The FTP protocol allows files to be sent to or fetched from the
server.  Each transfer involves a B<local file> (on the client) and a
B<remote file> (on the server).  In this module, the same file name
will be used for both local and remote if only one is specified.  This
means that transferring remote file C</path/to/file> will try to put
that file in C</path/to/file> locally, unless you specify a local file
name.

The protocol also defines several standard B<translations> which the
file can undergo during transfer.  These are ASCII, EBCDIC, binary,
and byte.  ASCII is the default type, and indicates that the sender of
files will translate the ends of lines to a standard representation
which the receiver will then translate back into their local
representation.  EBCDIC indicates the file being transferred is in
EBCDIC format.  Binary (also known as image) format sends the data as
a contiguous bit stream.  Byte format transfers the data as bytes, the
values of which remain the same regardless of differences in byte size
between the two machines (in theory - in practice you should only use
this if you really know what you're doing).

=head1 CONSTRUCTOR

=over 4

=item new ([ HOST ] [, OPTIONS ])

This is the constructor for a new Net::FTP object. C<HOST> is the
name of the remote host to which an FTP connection is required.

C<HOST> is optional. If C<HOST> is not given then it may instead be
passed as the C<Host> option described below. 

C<OPTIONS> are passed in a hash like fashion, using key and value pairs.
Possible options are:

B<Host> - FTP host to connect to. It may be a single scalar, as defined for
the C<PeerAddr> option in L<IO::Socket::INET>, or a reference to
an array with hosts to try in turn. The L</host> method will return the value
which was used to connect to the host.


B<Firewall> - The name of a machine which acts as an FTP firewall. This can be
overridden by an environment variable C<FTP_FIREWALL>. If specified, and the
given host cannot be directly connected to, then the
connection is made to the firewall machine and the string C<@@hostname> is
appended to the login identifier. This kind of setup is also referred to
as an ftp proxy.

B<FirewallType> - The type of firewall running on the machine indicated by
B<Firewall>. This can be overridden by an environment variable
C<FTP_FIREWALL_TYPE>. For a list of permissible types, see the description of
ftp_firewall_type in L<Net::Config>.

B<BlockSize> - This is the block size that Net::FTP will use when doing
transfers. (defaults to 10240)

B<Port> - The port number to connect to on the remote machine for the
FTP connection

B<Timeout> - Set a timeout value (defaults to 120)

B<Debug> - debug level (see the debug method in L<Net::Cmd>)

B<Passive> - If set to a non-zero value then all data transfers will
be done using passive mode. If set to zero then data transfers will be
done using active mode.  If the machine is connected to the Internet
directly, both passive and active mode should work equally well.
Behind most firewall and NAT configurations passive mode has a better
chance of working.  However, in some rare firewall configurations,
active mode actually works when passive mode doesn't.  Some really old
FTP servers might not implement passive transfers.  If not specified,
then the transfer mode is set by the environment variable
C<FTP_PASSIVE> or if that one is not set by the settings done by the
F<libnetcfg> utility.  If none of these apply then passive mode is
used.

B<Hash> - If given a reference to a file handle (e.g., C<\*STDERR>),
print hash marks (#) on that filehandle every 1024 bytes.  This
simply invokes the C<hash()> method for you, so that hash marks
are displayed for all transfers.  You can, of course, call C<hash()>
explicitly whenever you'd like.

B<LocalAddr> - Local address to use for all socket connections, this
argument will be passed to L<IO::Socket::INET>

If the constructor fails undef will be returned and an error message will
be in $@@

=back

=head1 METHODS

Unless otherwise stated all methods return either a I<true> or I<false>
value, with I<true> meaning that the operation was a success. When a method
states that it returns a value, failure will be returned as I<undef> or an
empty list.

=over 4

=item login ([LOGIN [,PASSWORD [, ACCOUNT] ] ])

Log into the remote FTP server with the given login information. If
no arguments are given then the C<Net::FTP> uses the C<Net::Netrc>
package to lookup the login information for the connected host.
If no information is found then a login of I<anonymous> is used.
If no password is given and the login is I<anonymous> then I<anonymous@@>
will be used for password.

If the connection is via a firewall then the C<authorize> method will
be called with no arguments.

=item authorize ( [AUTH [, RESP]])

This is a protocol used by some firewall ftp proxies. It is used
to authorise the user to send data out.  If both arguments are not specified
then C<authorize> uses C<Net::Netrc> to do a lookup.

=item site (ARGS)

Send a SITE command to the remote server and wait for a response.

Returns most significant digit of the response code.

=item ascii

Transfer file in ASCII. CRLF translation will be done if required

=item binary

Transfer file in binary mode. No transformation will be done.

B<Hint>: If both server and client machines use the same line ending for
text files, then it will be faster to transfer all files in binary mode.

=item rename ( OLDNAME, NEWNAME )

Rename a file on the remote FTP server from C<OLDNAME> to C<NEWNAME>. This
is done by sending the RNFR and RNTO commands.

=item delete ( FILENAME )

Send a request to the server to delete C<FILENAME>.

=item cwd ( [ DIR ] )

Attempt to change directory to the directory given in C<$dir>.  If
C<$dir> is C<"..">, the FTP C<CDUP> command is used to attempt to
move up one directory. If no directory is given then an attempt is made
to change the directory to the root directory.

=item cdup ()

Change directory to the parent of the current directory.

=item pwd ()

Returns the full pathname of the current directory.

=item restart ( WHERE )

Set the byte offset at which to begin the next data transfer. Net::FTP simply
records this value and uses it when during the next data transfer. For this
reason this method will not return an error, but setting it may cause
a subsequent data transfer to fail.

=item rmdir ( DIR [, RECURSE ])

Remove the directory with the name C<DIR>. If C<RECURSE> is I<true> then
C<rmdir> will attempt to delete everything inside the directory.

=item mkdir ( DIR [, RECURSE ])

Create a new directory with the name C<DIR>. If C<RECURSE> is I<true> then
C<mkdir> will attempt to create all the directories in the given path.

Returns the full pathname to the new directory.

=item alloc ( SIZE [, RECORD_SIZE] )

The alloc command allows you to give the ftp server a hint about the size
of the file about to be transferred using the ALLO ftp command. Some storage
systems use this to make intelligent decisions about how to store the file.
The C<SIZE> argument represents the size of the file in bytes. The
C<RECORD_SIZE> argument indicates a maximum record or page size for files
sent with a record or page structure.

The size of the file will be determined, and sent to the server
automatically for normal files so that this method need only be called if
you are transferring data from a socket, named pipe, or other stream not
associated with a normal file.

=item ls ( [ DIR ] )

Get a directory listing of C<DIR>, or the current directory.

In an array context, returns a list of lines returned from the server. In
a scalar context, returns a reference to a list.

=item dir ( [ DIR ] )

Get a directory listing of C<DIR>, or the current directory in long format.

In an array context, returns a list of lines returned from the server. In
a scalar context, returns a reference to a list.

=item get ( REMOTE_FILE [, LOCAL_FILE [, WHERE]] )

Get C<REMOTE_FILE> from the server and store locally. C<LOCAL_FILE> may be
a filename or a filehandle. If not specified, the file will be stored in
the current directory with the same leafname as the remote file.

If C<WHERE> is given then the first C<WHERE> bytes of the file will
not be transferred, and the remaining bytes will be appended to
the local file if it already exists.

Returns C<LOCAL_FILE>, or the generated local file name if C<LOCAL_FILE>
is not given. If an error was encountered undef is returned.

=item put ( LOCAL_FILE [, REMOTE_FILE ] )

Put a file on the remote server. C<LOCAL_FILE> may be a name or a filehandle.
If C<LOCAL_FILE> is a filehandle then C<REMOTE_FILE> must be specified. If
C<REMOTE_FILE> is not specified then the file will be stored in the current
directory with the same leafname as C<LOCAL_FILE>.

Returns C<REMOTE_FILE>, or the generated remote filename if C<REMOTE_FILE>
is not given.

B<NOTE>: If for some reason the transfer does not complete and an error is
returned then the contents that had been transferred will not be remove
automatically.

=item put_unique ( LOCAL_FILE [, REMOTE_FILE ] )

Same as put but uses the C<STOU> command.

Returns the name of the file on the server.

=item append ( LOCAL_FILE [, REMOTE_FILE ] )

Same as put but appends to the file on the remote server.

Returns C<REMOTE_FILE>, or the generated remote filename if C<REMOTE_FILE>
is not given.

=item unique_name ()

Returns the name of the last file stored on the server using the
C<STOU> command.

=item mdtm ( FILE )

Returns the I<modification time> of the given file

=item size ( FILE )

Returns the size in bytes for the given file as stored on the remote server.

B<NOTE>: The size reported is the size of the stored file on the remote server.
If the file is subsequently transferred from the server in ASCII mode
and the remote server and local machine have different ideas about
"End Of Line" then the size of file on the local machine after transfer
may be different.

=item supported ( CMD )

Returns TRUE if the remote server supports the given command.

=item hash ( [FILEHANDLE_GLOB_REF],[ BYTES_PER_HASH_MARK] )

Called without parameters, or with the first argument false, hash marks
are suppressed.  If the first argument is true but not a reference to a 
file handle glob, then \*STDERR is used.  The second argument is the number
of bytes per hash mark printed, and defaults to 1024.  In all cases the
return value is a reference to an array of two:  the filehandle glob reference
and the bytes per hash mark.

=item feature ( NAME )

Determine if the server supports the specified feature. The return
value is a list of lines the server responded with to describe the
options that it supports for the given feature. If the feature is
unsupported then the empty list is returned.

  if ($ftp->feature( 'MDTM' )) {
    # Do something
  }

  if (grep { /\bTLS\b/ } $ftp->feature('AUTH')) {
    # Server supports TLS
  }

=back

The following methods can return different results depending on
how they are called. If the user explicitly calls either
of the C<pasv> or C<port> methods then these methods will
return a I<true> or I<false> value. If the user does not
call either of these methods then the result will be a
reference to a C<Net::FTP::dataconn> based object.

=over 4

=item nlst ( [ DIR ] )

Send an C<NLST> command to the server, with an optional parameter.

=item list ( [ DIR ] )

Same as C<nlst> but using the C<LIST> command

=item retr ( FILE )

Begin the retrieval of a file called C<FILE> from the remote server.

=item stor ( FILE )

Tell the server that you wish to store a file. C<FILE> is the
name of the new file that should be created.

=item stou ( FILE )

Same as C<stor> but using the C<STOU> command. The name of the unique
file which was created on the server will be available via the C<unique_name>
method after the data connection has been closed.

=item appe ( FILE )

Tell the server that we want to append some data to the end of a file
called C<FILE>. If this file does not exist then create it.

=back

If for some reason you want to have complete control over the data connection,
this includes generating it and calling the C<response> method when required,
then the user can use these methods to do so.

However calling these methods only affects the use of the methods above that
can return a data connection. They have no effect on methods C<get>, C<put>,
C<put_unique> and those that do not require data connections.

=over 4

=item port ( [ PORT ] )

Send a C<PORT> command to the server. If C<PORT> is specified then it is sent
to the server. If not, then a listen socket is created and the correct information
sent to the server.

=item pasv ()

Tell the server to go into passive mode. Returns the text that represents the
port on which the server is listening, this text is in a suitable form to
sent to another ftp server using the C<port> method.

=back

The following methods can be used to transfer files between two remote
servers, providing that these two servers can connect directly to each other.

=over 4

=item pasv_xfer ( SRC_FILE, DEST_SERVER [, DEST_FILE ] )

This method will do a file transfer between two remote ftp servers. If
C<DEST_FILE> is omitted then the leaf name of C<SRC_FILE> will be used.

=item pasv_xfer_unique ( SRC_FILE, DEST_SERVER [, DEST_FILE ] )

Like C<pasv_xfer> but the file is stored on the remote server using
the STOU command.

=item pasv_wait ( NON_PASV_SERVER )

This method can be used to wait for a transfer to complete between a passive
server and a non-passive server. The method should be called on the passive
server with the C<Net::FTP> object for the non-passive server passed as an
argument.

=item abort ()

Abort the current data transfer.

=item quit ()

Send the QUIT command to the remote FTP server and close the socket connection.

=back

=head2 Methods for the adventurous

C<Net::FTP> inherits from C<Net::Cmd> so methods defined in C<Net::Cmd> may
be used to send commands to the remote FTP server.

=over 4

=item quot (CMD [,ARGS])

Send a command, that Net::FTP does not directly support, to the remote
server and wait for a response.

Returns most significant digit of the response code.

B<WARNING> This call should only be used on commands that do not require
data connections. Misuse of this method can hang the connection.

=back

=head1 THE dataconn CLASS

Some of the methods defined in C<Net::FTP> return an object which will
be derived from this class.The dataconn class itself is derived from
the C<IO::Socket::INET> class, so any normal IO operations can be performed.
However the following methods are defined in the dataconn class and IO should
be performed using these.

=over 4

=item read ( BUFFER, SIZE [, TIMEOUT ] )

Read C<SIZE> bytes of data from the server and place it into C<BUFFER>, also
performing any <CRLF> translation necessary. C<TIMEOUT> is optional, if not
given, the timeout value from the command connection will be used.

Returns the number of bytes read before any <CRLF> translation.

=item write ( BUFFER, SIZE [, TIMEOUT ] )

Write C<SIZE> bytes of data from C<BUFFER> to the server, also
performing any <CRLF> translation necessary. C<TIMEOUT> is optional, if not
given, the timeout value from the command connection will be used.

Returns the number of bytes written before any <CRLF> translation.

=item bytes_read ()

Returns the number of bytes read so far.

=item abort ()

Abort the current data transfer.

=item close ()

Close the data connection and get a response from the FTP server. Returns
I<true> if the connection was closed successfully and the first digit of
the response from the server was a '2'.

=back

=head1 UNIMPLEMENTED

The following RFC959 commands have not been implemented:

=over 4

=item B<SMNT>

Mount a different file system structure without changing login or
accounting information.

=item B<HELP>

Ask the server for "helpful information" (that's what the RFC says) on
the commands it accepts.

=item B<MODE>

Specifies transfer mode (stream, block or compressed) for file to be
transferred.

=item B<SYST>

Request remote server system identification.

=item B<STAT>

Request remote server status.

=item B<STRU>

Specifies file structure for file to be transferred.

=item B<REIN>

Reinitialize the connection, flushing all I/O and account information.

=back

=head1 REPORTING BUGS

When reporting bugs/problems please include as much information as possible.
It may be difficult for me to reproduce the problem as almost every setup
is different.

A small script which yields the problem will probably be of help. It would
also be useful if this script was run with the extra options C<Debug => 1>
passed to the constructor, and the output sent with the bug report. If you
cannot include a small script then please include a Debug trace from a
run of your program which does yield the problem.

=head1 AUTHOR

Graham Barr <gbarr@@pobox.com>

=head1 SEE ALSO

L<Net::Netrc>
L<Net::Cmd>

ftp(1), ftpd(8), RFC 959
http://www.cis.ohio-state.edu/htbin/rfc/rfc959.html

=head1 USE EXAMPLES

For an example of the use of Net::FTP see

=over 4

=item http://www.csh.rit.edu/~adam/Progs/

C<autoftp> is a program that can retrieve, send, or list files via
the FTP protocol in a non-interactive manner.

=back

=head1 CREDITS

Henry Gabryjelski <henryg@@WPI.EDU> - for the suggestion of creating directories
recursively.

Nathan Torkington <gnat@@frii.com> - for some input on the documentation.

Roderick Schertler <roderick@@gate.net> - for various inputs

=head1 COPYRIGHT

Copyright (c) 1995-2004 Graham Barr. All rights reserved.
This program is free software; you can redistribute it and/or modify it
under the same terms as Perl itself.

=cut
@


1.5
log
@fix conflicts and merge in local changes to perl 5.10.0
@
text
@@


1.4
log
@merge 5.8.5 into HEAD
remove now-unused files
crank libperl shared library major number
update Makefile.bsd-wrapper
tweak openbsd hints file for arm and m68k
@
text
@a22 1
# use AutoLoader qw(AUTOLOAD);
d24 1
a24 1
$VERSION = "2.75";
d31 1
a31 1
($TELNET_IAC,$TELNET_IP,$TELNET_DM) = (255,244,242);
a32 5
# Name is too long for AutoLoad, it clashes with pasv_xfer
sub pasv_xfer_unique {
    my($sftp,$sfile,$dftp,$dfile) = @@_;
    $sftp->pasv_xfer($sfile,$dftp,$dfile,1);
}
d35 1
d38 1
a38 1
  *trEBCDIC = sub () { $is_os390 }
a40 19
1;
# Having problems with AutoLoader
#__END__

sub new
{
 my $pkg  = shift;
 my ($peer,%arg);
 if (@@_ % 2) {
   $peer = shift ;
   %arg  = @@_;
 } else {
   %arg = @@_;
   $peer=delete $arg{Host};
 }

 my $host = $peer;
 my $fire = undef;
 my $fire_type = undef;
d42 29
a70 15
 if(exists($arg{Firewall}) || Net::Config->requires_firewall($peer))
  {
   $fire = $arg{Firewall}
	|| $ENV{FTP_FIREWALL}
	|| $NetConfig{ftp_firewall}
	|| undef;

   if(defined $fire)
    {
     $peer = $fire;
     delete $arg{Port};
	 $fire_type = $arg{FirewallType}
	 || $ENV{FTP_FIREWALL_TYPE}
	 || $NetConfig{firewall_type}
	 || undef;
d74 38
a111 40
 my $ftp = $pkg->SUPER::new(PeerAddr => $peer, 
			    PeerPort => $arg{Port} || 'ftp(21)',
			    LocalAddr => $arg{'LocalAddr'},
			    Proto    => 'tcp',
			    Timeout  => defined $arg{Timeout}
						? $arg{Timeout}
						: 120
			   ) or return undef;

 ${*$ftp}{'net_ftp_host'}     = $host;		# Remote hostname
 ${*$ftp}{'net_ftp_type'}     = 'A';		# ASCII/binary/etc mode
 ${*$ftp}{'net_ftp_blksize'}  = abs($arg{'BlockSize'} || 10240);

 ${*$ftp}{'net_ftp_localaddr'} = $arg{'LocalAddr'};

 ${*$ftp}{'net_ftp_firewall'} = $fire
	if(defined $fire);
 ${*$ftp}{'net_ftp_firewall_type'} = $fire_type
	if(defined $fire_type);

 ${*$ftp}{'net_ftp_passive'} = int
	exists $arg{Passive}
	    ? $arg{Passive}
	    : exists $ENV{FTP_PASSIVE}
		? $ENV{FTP_PASSIVE}
		: defined $fire
		    ? $NetConfig{ftp_ext_passive}
		    : $NetConfig{ftp_int_passive};	# Whew! :-)

 $ftp->hash(exists $arg{Hash} ? $arg{Hash} : 0, 1024);

 $ftp->autoflush(1);

 $ftp->debug(exists $arg{Debug} ? $arg{Debug} : undef);

 unless ($ftp->response() == CMD_OK)
  {
   $ftp->close();
   $@@ = $ftp->message;
   undef $ftp;
d114 1
a114 1
 $ftp;
d123 2
a124 2
 my $me = shift;
 ${*$me}{'net_ftp_host'};
d129 12
a140 1
    my $ftp = shift;		# self
a141 10
    my($h,$b) = @@_;
    unless($h) {
      delete ${*$ftp}{'net_ftp_hash'};
      return [\*STDERR,0];
    }
    ($h,$b) = (ref($h)? $h : \*STDERR, $b || 1024);
    select((select($h), $|=1)[0]);
    $b = 512 if $b < 512;
    ${*$ftp}{'net_ftp_hash'} = [$h, $b];
}        
d143 2
a144 3
sub quit
{
 my $ftp = shift;
d146 2
a147 2
 $ftp->_QUIT;
 $ftp->close;
a149 1
sub DESTROY {}
d151 2
a152 2
sub ascii  { shift->type('A',@@_); }
sub binary { shift->type('I',@@_); }
d154 7
a160 4
sub ebcdic
{
 carp "TYPE E is unsupported, shall default to I";
 shift->type('E',@@_);
d163 4
a166 4
sub byte
{
 carp "TYPE L is unsupported, shall default to I";
 shift->type('L',@@_);
a170 29
sub quot
{ 
 my $ftp = shift;
 my $cmd = shift;

 $ftp->command( uc $cmd, @@_);
 $ftp->response();
}

sub site
{
 my $ftp = shift;

 $ftp->command("SITE", @@_);
 $ftp->response();
}

sub mdtm
{
 my $ftp  = shift;
 my $file = shift;

 # Server Y2K bug workaround
 #
 # sigh; some idiotic FTP servers use ("19%d",tm.tm_year) instead of 
 # ("%d",tm.tm_year+1900).  This results in an extra digit in the
 # string returned. To account for this we allow an optional extra
 # digit in the year. Then if the first two digits are 19 we use the
 # remainder, otherwise we subtract 1900 from the whole year.
d172 32
a203 2
 $ftp->_MDTM($file) && $ftp->message =~ /((\d\d)(\d\d\d?))(\d\d)(\d\d)(\d\d)(\d\d)(\d\d)/
    ? timegm($8,$7,$6,$5,$4-1,$2 eq '19' ? $3 : ($1-1900))
d207 1
d212 1
a212 1
  if($ftp->supported("SIZE")) {
d214 21
a234 21
	? ($ftp->message =~ /(\d+)\s*(bytes?\s*)?$/)[0]
	: undef;
 }
 elsif($ftp->supported("STAT")) {
   my @@msg;
   return undef
       unless $ftp->_STAT($file) && (@@msg = $ftp->message) == 3;
   my $line;
   foreach $line (@@msg) {
     return (split(/\s+/,$line))[4]
	 if $line =~ /^[-rwxSsTt]{10}/
   }
 }
 else {
   my @@files = $ftp->dir($file);
   if(@@files) {
     return (split(/\s+/,$1))[4]
	 if $files[0] =~ /^([-rwxSsTt]{10}.*)$/;
   }
 }
 undef;
d237 1
d239 2
a240 2
  my($ftp,$user,$pass,$acct) = @@_;
  my($ok,$ruser,$fwtype);
d247 3
a249 3
    ($user,$pass,$acct) = $rc->lpa()
	 if ($rc);
   }
d255 2
a256 2
  || $NetConfig{'ftp_firewall_type'}
  || 0;
d267 1
a267 1
      my($fwuser,$fwpass,$fwacct) = $rc ? $rc->lpa() : ();
d270 2
a271 2
	$user = join('@@',$user,$fwuser,${*$ftp}{'net_ftp_host'});
	$pass = $pass . '@@' . $fwpass;
d274 6
a279 6
	if ($fwtype == 2) {
	  $user .= '@@' . ${*$ftp}{'net_ftp_host'};
	}
	elsif ($fwtype == 6) {
	  $fwuser .= '@@' . ${*$ftp}{'net_ftp_host'};
	}
d281 1
a281 1
	$ok = $ftp->_USER($fwuser);
d283 1
a283 1
	return 0 unless $ok == CMD_OK || $ok == CMD_MORE;
d285 1
a285 1
	$ok = $ftp->_PASS($fwpass || "");
d287 1
a287 1
	return 0 unless $ok == CMD_OK || $ok == CMD_MORE;
d289 2
a290 2
	$ok = $ftp->_ACCT($fwacct)
	  if defined($fwacct);
d292 6
a297 6
	if ($fwtype == 3) {
          $ok = $ftp->command("SITE",${*$ftp}{'net_ftp_host'})->response;
	}
	elsif ($fwtype == 4) {
          $ok = $ftp->command("OPEN",${*$ftp}{'net_ftp_host'})->response;
	}
d299 1
a299 1
	return 0 unless $ok == CMD_OK || $ok == CMD_MORE;
d308 1
a308 1
	 if ($ok == CMD_OK && $ftp->code == 220 && $user =~ /\@@/);
d311 1
a311 1
    unless(defined $pass) {
d316 2
a317 2
      ($ruser,$pass,$acct) = $rc->lpa()
	 if ($rc);
d320 1
a320 1
         if (!defined $pass && (!defined($ruser) || $ruser =~ /^anonymous/o));
d327 1
a327 1
	 if (defined($acct) && ($ok == CMD_MORE || $ok == CMD_OK));
d330 2
a331 2
    my($f,$auth,$resp) = _auth_id($ftp);
    $ftp->authorize($auth,$resp) if defined($resp);
d337 6
a342 6
sub account
{
 @@_ == 2 or croak 'usage: $ftp->account( ACCT )';
 my $ftp = shift;
 my $acct = shift;
 $ftp->_ACCT($acct) == CMD_OK;
d345 1
d347 1
a347 1
 my($ftp,$auth,$resp) = @@_;
d349 2
a350 3
 unless(defined $resp)
  {
   require Net::Netrc;
d352 1
a352 1
   $auth ||= eval { (getpwuid($>))[0] } || $ENV{NAME};
d354 2
a355 2
   my $rc = Net::Netrc->lookup(${*$ftp}{'net_ftp_firewall'}, $auth)
        || Net::Netrc->lookup(${*$ftp}{'net_ftp_firewall'});
d357 2
a358 2
   ($auth,$resp) = $rc->lpa()
     if ($rc);
d360 1
a360 1
  ($ftp,$auth,$resp);
a362 3
sub authorize
{
 @@_ >= 1 || @@_ <= 3 or croak 'usage: $ftp->authorize( [AUTH [, RESP]])';
d364 4
a367 1
 my($ftp,$auth,$resp) = &_auth_id;
d369 1
a369 1
 my $ok = $ftp->_AUTH($auth || "");
d371 2
a372 2
 $ok = $ftp->_RESP($resp || "")
	if ($ok == CMD_MORE);
d374 1
a374 1
 $ok == CMD_OK;
a376 3
sub rename
{
 @@_ == 3 or croak 'usage: $ftp->rename(FROM, TO)';
d378 2
a379 1
 my($ftp,$from,$to) = @@_;
d381 3
a383 1
 $ftp->_RNFR($from)
a386 5
sub type
{
 my $ftp = shift;
 my $type = shift;
 my $oldval = ${*$ftp}{'net_ftp_type'};
d388 7
a394 2
 return $oldval
	unless (defined $type);
d396 2
a397 2
 return undef
	unless ($ftp->_TYPE($type,@@_));
d399 1
a399 1
 ${*$ftp}{'net_ftp_type'} = join(" ",$type,@@_);
d401 1
a401 1
 $oldval;
a403 5
sub alloc
{
 my $ftp = shift;
 my $size = shift;
 my $oldval = ${*$ftp}{'net_ftp_allo'};
d405 4
a408 2
 return $oldval
	unless (defined $size);
d410 2
a411 2
 return undef
	unless ($ftp->_ALLO($size,@@_));
d413 2
a414 1
 ${*$ftp}{'net_ftp_allo'} = join(" ",$size,@@_);
d416 3
a418 1
 $oldval;
a420 3
sub abort
{
 my $ftp = shift;
d422 4
a425 1
 send($ftp,pack("CCC", $TELNET_IAC, $TELNET_IP, $TELNET_IAC),MSG_OOB);
d427 1
a427 1
 $ftp->command(pack("C",$TELNET_DM) . "ABOR");
d429 1
a429 1
 ${*$ftp}{'net_ftp_dataconn'}->close()
d432 1
a432 1
 $ftp->response();
d434 1
a434 1
 $ftp->status == CMD_OK;
a436 3
sub get
{
 my($ftp,$remote,$local,$where) = @@_;
d438 5
a442 2
 my($loc,$len,$buf,$resp,$data);
 local *FD;
d444 1
a444 1
 my $localfd = ref($local) || ref(\$local) eq "GLOB";
d446 2
a447 2
 ($local = $remote) =~ s#^.*/##
	unless(defined $local);
d449 2
a450 2
 croak("Bad remote filename '$remote'\n")
	if $remote =~ /[\r\n]/s;
d452 1
a452 1
 ${*$ftp}{'net_ftp_rest'} = $where if defined $where;
d455 2
a456 2
 delete ${*$ftp}{'net_ftp_port'};
 delete ${*$ftp}{'net_ftp_pasv'};
d458 2
a459 2
 $data = $ftp->retr($remote) or
	return undef;
d461 2
a462 3
 if($localfd)
  {
   $loc = $local;
d464 7
a470 9
 else
  {
   $loc = \*FD;

   unless(sysopen($loc, $local, O_CREAT | O_WRONLY | ($rest ? O_APPEND : O_TRUNC)))
    {
     carp "Cannot open Local file $local: $!\n";
     $data->abort;
     return undef;
d474 5
a478 6
 if($ftp->type eq 'I' && !binmode($loc))
  {
   carp "Cannot binmode Local file $local: $!\n";
   $data->abort;
   close($loc) unless $localfd;
   return undef;
d481 2
a482 2
 $buf = '';
 my($count,$hashh,$hashb,$ref) = (0);
d484 2
a485 2
 ($hashh,$hashb) = @@$ref
   if($ref = ${*$ftp}{'net_ftp_hash'});
d487 2
a488 2
 my $blksize = ${*$ftp}{'net_ftp_blksize'};
 local $\; # Just in case
d490 2
a491 3
 while(1)
  {
   last unless $len = $data->read($buf,$blksize);
d493 3
a495 4
   if (trEBCDIC && $ftp->type ne 'I')
    {
     $buf = $ftp->toebcdic($buf);
     $len = length($buf);
d498 9
a506 10
   if($hashh) {
    $count += $len;
    print $hashh "#" x (int($count / $hashb));
    $count %= $hashb;
   }
   unless(print $loc $buf)
    {
     carp "Cannot write to Local file $local: $!\n";
     $data->abort;
     close($loc)
d508 1
a508 1
     return undef;
d512 1
a512 1
 print $hashh "\n" if $hashh;
d514 4
a517 6
 unless ($localfd)
  {
   unless (close($loc))
    {
     carp "Cannot close file $local (perhaps disk space) $!\n";
     return undef;
d521 1
a521 1
 unless ($data->close()) # implied $ftp->response
d523 2
a524 2
   carp "Unable to close datastream";
   return undef;
d527 1
a527 1
 return $local;
a529 3
sub cwd
{
 @@_ == 1 || @@_ == 2 or croak 'usage: $ftp->cwd( [ DIR ] )';
d531 4
a534 1
 my($ftp,$dir) = @@_;
d536 1
a536 1
 $dir = "/" unless defined($dir) && $dir =~ /\S/;
d538 1
a538 1
 $dir eq ".."
d543 4
a546 4
sub cdup
{
 @@_ == 1 or croak 'usage: $ftp->cdup()';
 $_[0]->_CDUP;
a548 4
sub pwd
{
 @@_ == 1 || croak 'usage: $ftp->pwd()';
 my $ftp = shift;
d550 6
a555 2
 $ftp->_PWD();
 $ftp->_extract_path;
d568 2
a569 7
sub rmdir
{
    @@_ == 2 || @@_ == 3 or croak('usage: $ftp->rmdir( DIR [, RECURSE ] )');

    # Pick off the args
    my ($ftp, $dir, $recurse) = @@_ ;
    my $ok;
d571 24
d596 2
a597 1
	if $ok = $ftp->_RMD( $dir ) or !$recurse;
d599 7
a605 20
    # Try to delete the contents
    # Get a list of all the files in the directory
    my @@filelist = grep { !/^\.{1,2}$/ } $ftp->ls($dir);

    return undef
	unless @@filelist; # failed, it is probably not a directory

    # Go thru and delete each file or the directory
    my $file;
    foreach $file (map { m,/, ? $_ : "$dir/$_" } @@filelist)
    {
	next  # successfully deleted the file
	    if $ftp->delete($file);

	# Failed to delete it, assume its a directory
	# Recurse and ignore errors, the final rmdir() will
	# fail on any errors here
	return $ok
	    unless $ok = $ftp->rmdir($file, 1) ;
    }
a606 7
    # Directory should be empty
    # Try to remove the directory again
    # Pass results directly to caller
    # If any of the prior deletes failed, this
    # rmdir() will fail because directory is not empty
    return $ftp->_RMD($dir) ;
}
d608 1
a608 2
sub restart
{
d611 1
a611 1
  my($ftp,$where) = @@_;
d619 2
a620 3
sub mkdir
{
 @@_ == 2 || @@_ == 3 or croak 'usage: $ftp->mkdir( DIR [, RECURSE ] )';
d622 1
a622 1
 my($ftp,$dir,$recurse) = @@_;
d624 2
a625 2
 $ftp->_MKD($dir) || $recurse or
    return undef;
d627 1
a627 1
 my $path = $dir;
d629 2
a630 3
 unless($ftp->ok)
  {
   my @@path = split(m#(?=/+)#, $dir);
d632 1
a632 1
   $path = "";
d634 2
a635 3
   while(@@path)
    {
     $path .= shift @@path;
d637 1
a637 1
     $ftp->_MKD($path);
d639 1
a639 1
     $path = $ftp->_extract_path($path);
d642 2
a643 2
   # If the creation of the last element was not successful, see if we
   # can cd to it, if so then return path
d645 7
a651 9
   unless($ftp->ok)
    {
     my($status,$message) = ($ftp->status,$ftp->message);
     my $pwd = $ftp->pwd;

     if($pwd && $ftp->cwd($dir))
      {
       $path = $dir;
       $ftp->cwd($pwd);
d653 2
a654 3
     else
      {
       undef $path;
d656 1
a656 1
     $ftp->set_status($status,$message);
d660 1
a660 1
 $path;
a662 3
sub delete
{
 @@_ == 2 || croak 'usage: $ftp->delete( FILENAME )';
d664 4
a667 1
 $_[0]->_DELE($_[1]);
a669 3
sub put        { shift->_store_cmd("stor",@@_) }
sub put_unique { shift->_store_cmd("stou",@@_) }
sub append     { shift->_store_cmd("appe",@@_) }
d671 11
a681 6
sub nlst { shift->_data_cmd("NLST",@@_) }
sub list { shift->_data_cmd("LIST",@@_) }
sub retr { shift->_data_cmd("RETR",@@_) }
sub stor { shift->_data_cmd("STOR",@@_) }
sub stou { shift->_data_cmd("STOU",@@_) }
sub appe { shift->_data_cmd("APPE",@@_) }
a682 5
sub _store_cmd 
{
 my($ftp,$cmd,$local,$remote) = @@_;
 my($loc,$sock,$len,$buf);
 local *FD;
d684 4
a687 1
 my $localfd = ref($local) || ref(\$local) eq "GLOB";
d689 5
a693 4
 unless(defined $remote)
  {
   croak 'Must specify remote filename with stream input'
	if $localfd;
d695 2
a696 2
   require File::Basename;
   $remote = File::Basename::basename($local);
d698 11
a708 11
 if( defined ${*$ftp}{'net_ftp_allo'} ) 
  {
   delete ${*$ftp}{'net_ftp_allo'};
  } else 
  {
   # if the user hasn't already invoked the alloc method since the last 
   # _store_cmd call, figure out if the local file is a regular file(not
   # a pipe, or device) and if so get the file size from stat, and send
   # an ALLO command before sending the STOR, STOU, or APPE command.
   my $size = do { local $^W; -f $local && -s _ }; # no ALLO if sending data from a pipe
   $ftp->_ALLO($size) if $size;
d710 2
a711 2
 croak("Bad remote filename '$remote'\n")
	if $remote =~ /[\r\n]/s;
d713 2
a714 3
 if($localfd)
  {
   $loc = $local;
d716 2
a717 3
 else
  {
   $loc = \*FD;
d719 3
a721 4
   unless(sysopen($loc, $local, O_RDONLY))
    {
     carp "Cannot open Local file $local: $!\n";
     return undef;
d725 3
a727 4
 if($ftp->type eq 'I' && !binmode($loc))
  {
   carp "Cannot binmode Local file $local: $!\n";
   return undef;
d730 2
a731 2
 delete ${*$ftp}{'net_ftp_port'};
 delete ${*$ftp}{'net_ftp_pasv'};
d733 2
a734 2
 $sock = $ftp->_data_cmd($cmd, $remote) or 
	return undef;
d736 2
a737 2
 $remote = ($ftp->message =~ /FILE:\s*(.*)/)[0]
   if 'STOU' eq uc $cmd;
d739 1
a739 1
 my $blksize = ${*$ftp}{'net_ftp_blksize'};
d741 1
a741 1
 my($count,$hashh,$hashb,$ref) = (0);
d743 2
a744 2
 ($hashh,$hashb) = @@$ref
   if($ref = ${*$ftp}{'net_ftp_hash'});
d746 2
a747 3
 while(1)
  {
   last unless $len = read($loc,$buf="",$blksize);
d749 3
a751 4
   if (trEBCDIC && $ftp->type ne 'I')
    {
     $buf = $ftp->toascii($buf); 
     $len = length($buf);
d754 13
a766 14
   if($hashh) {
    $count += $len;
    print $hashh "#" x (int($count / $hashb));
    $count %= $hashb;
   }

   my $wlen;
   unless(defined($wlen = $sock->write($buf,$len)) && $wlen == $len)
    {
     $sock->abort;
     close($loc)
	unless $localfd;
     print $hashh "\n" if $hashh;
     return undef;
d770 1
a770 1
 print $hashh "\n" if $hashh;
d772 2
a773 2
 close($loc)
	unless $localfd;
d775 2
a776 2
 $sock->close() or
	return undef;
d778 3
a780 4
 if ('STOU' eq uc $cmd and $ftp->message =~ m/unique\s+file\s*name\s*:\s*(.*)\)|"(.*)"/)
  {
   require File::Basename;
   $remote = File::Basename::basename($+) 
d783 1
a783 1
 return $remote;
a785 3
sub port
{
 @@_ == 1 || @@_ == 2 or croak 'usage: $ftp->port([PORT])';
d787 5
a791 2
 my($ftp,$port) = @@_;
 my $ok;
d793 1
a793 1
 delete ${*$ftp}{'net_ftp_intern_port'};
d795 3
a797 3
 unless(defined $port)
  {
   # create a Listen socket at same address as the command socket
d799 6
a804 5
   ${*$ftp}{'net_ftp_listen'} ||= IO::Socket::INET->new(Listen    => 5,
				    	    	        Proto     => 'tcp',
							Timeout   => $ftp->timeout,
							LocalAddr => $ftp->sockhost,
				    	    	       );
d806 1
a806 1
   my $listen = ${*$ftp}{'net_ftp_listen'};
d808 1
a808 1
   my($myport, @@myaddr) = ($listen->sockport, split(/\./,$listen->sockhost));
d810 1
a810 1
   $port = join(',', @@myaddr, $myport >> 8, $myport & 0xff);
d812 1
a812 1
   ${*$ftp}{'net_ftp_intern_port'} = 1;
d815 1
a815 1
 $ok = $ftp->_PORT($port);
d817 1
a817 1
 ${*$ftp}{'net_ftp_port'} = $port;
d819 1
a819 1
 $ok;
a821 2
sub ls  { shift->_list_cmd("NLST",@@_); }
sub dir { shift->_list_cmd("LIST",@@_); }
d823 2
a824 3
sub pasv
{
 @@_ == 1 or croak 'usage: $ftp->pasv()';
a825 1
 my $ftp = shift;
d827 2
a828 1
 delete ${*$ftp}{'net_ftp_intern_port'};
d830 5
a834 1
 $ftp->_PASV && $ftp->message =~ /(\d+(,\d+)+)/
d836 1
a836 1
    : undef;    
d839 4
a842 4
sub unique_name
{
 my $ftp = shift;
 ${*$ftp}{'net_ftp_unique'} || undef;
d845 1
d847 16
a862 20
    @@_ == 2 or croak 'usage: $ftp->supported( CMD )';
    my $ftp = shift;
    my $cmd = uc shift;
    my $hash = ${*$ftp}{'net_ftp_supported'} ||= {};

    return $hash->{$cmd}
        if exists $hash->{$cmd};

    return $hash->{$cmd} = 0
	unless $ftp->_HELP($cmd);

    my $text = $ftp->message;
    if($text =~ /following\s+commands/i) {
	$text =~ s/^.*\n//;
        while($text =~ /(\*?)(\w+)(\*?)/sg) {
            $hash->{"\U$2"} = !length("$1$3");
        }
    }
    else {
	$hash->{$cmd} = $text !~ /unimplemented/i;
d864 4
d869 1
a869 1
    $hash->{$cmd} ||= 0;
d876 3
a878 3
sub lsl
{
 carp "Use of Net::FTP::lsl deprecated, use 'dir'"
d880 1
a880 1
 goto &dir;
d883 3
a885 3
sub authorise
{
 carp "Use of Net::FTP::authorise deprecated, use 'authorize'"
d887 1
a887 1
 goto &authorize;
a894 11
sub _extract_path
{
 my($ftp, $path) = @@_;

 # This tries to work both with and without the quote doubling
 # convention (RFC 959 requires it, but the first 3 servers I checked
 # didn't implement it).  It will fail on a server which uses a quote in
 # the message which isn't a part of or surrounding the path.
 $ftp->ok &&
    $ftp->message =~ /(?:^|\s)\"(.*)\"(?:$|\s)/ &&
    ($path = $1) =~ s/\"\"/\"/g;
d896 12
a907 1
 $path;
a913 5
sub _dataconn
{
 my $ftp = shift;
 my $data = undef;
 my $pkg = "Net::FTP::" . $ftp->type;
d915 6
a920 1
 eval "require " . $pkg;
d922 1
a922 1
 $pkg =~ s/ /_/g;
d924 1
a924 1
 delete ${*$ftp}{'net_ftp_dataconn'};
d926 2
a927 3
 if(defined ${*$ftp}{'net_ftp_pasv'})
  {
   my @@port = map { 0+$_ } split(/,/,${*$ftp}{'net_ftp_pasv'});
d929 6
a934 5
   $data = $pkg->new(PeerAddr => join(".",@@port[0..3]),
    	    	     PeerPort => $port[4] * 256 + $port[5],
		     LocalAddr => ${*$ftp}{'net_ftp_localaddr'},
    	    	     Proto    => 'tcp'
    	    	    );
d936 3
a938 4
 elsif(defined ${*$ftp}{'net_ftp_listen'})
  {
   $data = ${*$ftp}{'net_ftp_listen'}->accept($pkg);
   close(delete ${*$ftp}{'net_ftp_listen'});
d941 6
a946 7
 if($data)
  {
   ${*$data} = "";
   $data->timeout($ftp->timeout);
   ${*$ftp}{'net_ftp_dataconn'} = $data;
   ${*$data}{'net_ftp_cmd'} = $ftp;
   ${*$data}{'net_ftp_blksize'} = ${*$ftp}{'net_ftp_blksize'};
d949 1
a949 1
 $data;
a951 4
sub _list_cmd
{
 my $ftp = shift;
 my $cmd = uc shift;
d953 3
a955 2
 delete ${*$ftp}{'net_ftp_port'};
 delete ${*$ftp}{'net_ftp_pasv'};
d957 2
a958 1
 my $data = $ftp->_data_cmd($cmd,@@_);
d960 1
a960 2
 return
	unless(defined $data);
d962 2
a963 2
 require Net::FTP::A;
 bless $data, "Net::FTP::A"; # Force ASCII mode
d965 2
a966 3
 my $databuf = '';
 my $buf = '';
 my $blksize = ${*$ftp}{'net_ftp_blksize'};
d968 7
a974 3
 while($data->read($databuf,$blksize)) {
   $buf .= $databuf;
 }
d976 1
a976 1
 my $list = [ split(/\n/,$buf) ];
d978 1
a978 1
 $data->close();
d980 2
a981 3
 if (trEBCDIC)
  {
   for (@@$list) { $_ = $ftp->toebcdic($_) }
d984 3
a986 2
 wantarray ? @@{$list}
           : $list;
a988 7
sub _data_cmd
{
 my $ftp = shift;
 my $cmd = uc shift;
 my $ok = 1;
 my $where = delete ${*$ftp}{'net_ftp_rest'} || 0;
 my $arg;
d990 11
a1000 4
 for $arg (@@_) {
   croak("Bad argument '$arg'\n")
	if $arg =~ /[\r\n]/s;
 }
d1002 3
a1004 3
 if(${*$ftp}{'net_ftp_passive'} &&
     !defined ${*$ftp}{'net_ftp_pasv'} &&
     !defined ${*$ftp}{'net_ftp_port'})
d1006 1
a1006 1
   my $data = undef;
d1008 12
a1019 14
   $ok = defined $ftp->pasv;
   $ok = $ftp->_REST($where)
	if $ok && $where;

   if($ok)
    {
     $ftp->command($cmd,@@_);
     $data = $ftp->_dataconn();
     $ok = CMD_INFO == $ftp->response();
     if($ok) 
      {
       $data->reading
         if $data && $cmd =~ /RETR|LIST|NLST/;
       return $data
d1021 2
a1022 2
     $data->_close
	if $data;
d1024 1
a1024 1
   return undef;
d1027 3
a1029 3
 $ok = $ftp->port
    unless (defined ${*$ftp}{'net_ftp_port'} ||
            defined ${*$ftp}{'net_ftp_pasv'});
d1031 1
a1031 1
 $ok = $ftp->_REST($where)
d1034 1
a1034 1
 return undef
d1037 1
a1037 1
 $ftp->command($cmd,@@_);
d1039 2
a1040 2
 return 1
    if(defined ${*$ftp}{'net_ftp_pasv'});
d1042 1
a1042 1
 $ok = CMD_INFO == $ftp->response();
d1044 1
a1044 1
 return $ok 
d1047 2
a1048 2
 if($ok) {
   my $data = $ftp->_dataconn();
d1050 2
a1051 2
   $data->reading
         if $data && $cmd =~ /RETR|LIST|NLST/;
d1053 2
a1054 2
   return $data;
 }
d1057 1
a1057 1
 close(delete ${*$ftp}{'net_ftp_listen'});
d1059 1
a1059 1
 return undef;
d1066 1
a1068 3
sub command
{
 my $ftp = shift;
d1070 5
a1074 2
 delete ${*$ftp}{'net_ftp_port'};
 $ftp->SUPER::command(@@_);
a1076 4
sub response
{
 my $ftp = shift;
 my $code = $ftp->SUPER::response();
d1078 5
a1082 1
 delete ${*$ftp}{'net_ftp_pasv'}
d1085 1
a1085 1
 $code;
a1087 4
sub parse_response
{
 return ($1, $2 eq "-")
    if $_[1] =~ s/^(\d\d\d)(.?)//o;
d1089 3
a1091 1
 my $ftp = shift;
d1093 1
a1093 3
 # Darn MS FTP server is a load of CRAP !!!!
 return ()
	unless ${*$ftp}{'net_cmd_code'} + 0;
d1095 5
a1099 1
 (${*$ftp}{'net_cmd_code'},1);
d1106 7
d1114 1
a1114 1
    my($sftp,$sfile,$dftp,$dfile,$unique) = @@_;
d1116 2
a1117 2
    ($dfile = $sfile) =~ s#.*/##
	unless(defined $dfile);
d1119 2
a1120 2
    my $port = $sftp->pasv or
	return undef;
d1122 2
a1123 2
    $dftp->port($port) or
	return undef;
d1125 2
a1126 2
    return undef
	unless($unique ? $dftp->stou($dfile) : $dftp->stor($dfile));
d1128 6
a1133 6
    unless($sftp->retr($sfile) && $sftp->response == CMD_INFO) {
	$sftp->retr($sfile);
	$dftp->abort;
	$dftp->response();
	return undef;
    }
d1135 1
a1135 1
    $dftp->pasv_wait($sftp);
a1137 3
sub pasv_wait
{
 @@_ == 2 or croak 'usage: $ftp->pasv_wait(NON_PASV_FTP)';
d1139 2
a1140 2
 my($ftp, $non_pasv) = @@_;
 my($file,$rin,$rout);
d1142 2
a1143 2
 vec($rin='',fileno($ftp),1) = 1;
 select($rout=$rin, undef, undef, undef);
d1145 2
a1146 2
 $ftp->response();
 $non_pasv->response();
d1148 2
a1149 2
 return undef
	unless $ftp->ok() && $non_pasv->ok();
d1151 2
a1152 2
 return $1
	if $ftp->message =~ /unique file name:\s*(\S*)\s*\)/;
d1154 2
a1155 2
 return $1
	if $non_pasv->message =~ /unique file name:\s*(\S*)\s*\)/;
d1157 28
a1184 1
 return 1;
d1187 1
d1195 8
a1202 7
sub _ABOR { shift->command("ABOR")->response()	 == CMD_OK }
sub _ALLO { shift->command("ALLO",@@_)->response() == CMD_OK}
sub _CDUP { shift->command("CDUP")->response()	 == CMD_OK }
sub _NOOP { shift->command("NOOP")->response()	 == CMD_OK }
sub _PASV { shift->command("PASV")->response()	 == CMD_OK }
sub _QUIT { shift->command("QUIT")->response()	 == CMD_OK }
sub _DELE { shift->command("DELE",@@_)->response() == CMD_OK }
d1204 1
a1204 1
sub _PORT { shift->command("PORT",@@_)->response() == CMD_OK }
d1208 32
a1239 19
sub _TYPE { shift->command("TYPE",@@_)->response() == CMD_OK }
sub _RNTO { shift->command("RNTO",@@_)->response() == CMD_OK }
sub _RESP { shift->command("RESP",@@_)->response() == CMD_OK }
sub _MDTM { shift->command("MDTM",@@_)->response() == CMD_OK }
sub _SIZE { shift->command("SIZE",@@_)->response() == CMD_OK }
sub _HELP { shift->command("HELP",@@_)->response() == CMD_OK }
sub _STAT { shift->command("STAT",@@_)->response() == CMD_OK }
sub _APPE { shift->command("APPE",@@_)->response() == CMD_INFO }
sub _LIST { shift->command("LIST",@@_)->response() == CMD_INFO }
sub _NLST { shift->command("NLST",@@_)->response() == CMD_INFO }
sub _RETR { shift->command("RETR",@@_)->response() == CMD_INFO }
sub _STOR { shift->command("STOR",@@_)->response() == CMD_INFO }
sub _STOU { shift->command("STOU",@@_)->response() == CMD_INFO }
sub _RNFR { shift->command("RNFR",@@_)->response() == CMD_MORE }
sub _REST { shift->command("REST",@@_)->response() == CMD_MORE }
sub _USER { shift->command("user",@@_)->response() } # A certain brain dead firewall :-)
sub _PASS { shift->command("PASS",@@_)->response() }
sub _ACCT { shift->command("ACCT",@@_)->response() }
sub _AUTH { shift->command("AUTH",@@_)->response() }
d1333 1
a1333 1
appended to the login identifier. This kind of setup is also refered to
d1351 12
a1362 4
B<Passive> - If set to a non-zero value then all data transfers will be done
using passive mode. This is not usually required except for some I<dumb>
servers, and some firewall configurations. This can also be set by the
environment variable C<FTP_PASSIVE>.
d1468 1
a1468 1
of the file about to be transfered using the ALLO ftp command. Some storage
d1471 1
a1471 1
C<RECORD_SIZE> argument indicates a mazimum record or page size for files
d1476 1
a1476 1
you are transfering data from a socket, named pipe, or other stream not
d1500 1
a1500 1
not be transfered, and the remaining bytes will be appended to
d1517 1
a1517 1
returned then the contents that had been transfered will not be remove
d1547 1
a1547 1
If the file is subsequently transfered from the server in ASCII mode
d1564 15
@


1.3
log
@Resolve conflicts for perl 5.8.2, remove old files, and add OpenBSD-specific scaffolding
@
text
@d3 1
a3 1
# Copyright (c) 1995-8 Graham Barr <gbarr@@pobox.com>. All rights reserved.
d25 1
a25 1
$VERSION = "2.72"; # $Id: //depot/libnet/Net/FTP.pm#80 $
d53 8
a60 2
 my $peer = shift;
 my %arg  = @@_; 
d133 7
d222 1
a222 1
	? ($ftp->message =~ /(\d+)\s*$/)[0]
d459 2
a460 2
 ${*$ftp}{'net_ftp_rest'} = $where
	if ($where);
d476 1
a476 1
   unless(sysopen($loc, $local, O_CREAT | O_WRONLY | ($where ? O_APPEND : O_TRUNC)))
d597 1
a597 1
    my $filelist = $ftp->ls($dir);
d600 1
a600 1
	unless $filelist && @@$filelist; # failed, it is probably not a directory
d604 1
a604 1
    foreach $file (map { m,/, ? $_ : "$dir/$_" } @@$filelist)
d729 1
a729 1
   my $size = -f $local && -s _; # no ALLO if sending data from a pipe
d955 1
a955 1
   my @@port = split(/,/,${*$ftp}{'net_ftp_pasv'});
d1296 1
a1296 1
=item new (HOST [,OPTIONS])
d1301 3
d1307 6
a1440 2
=item ls ( [ DIR ] )

d1455 2
d1786 1
a1786 1
Copyright (c) 1995-1998 Graham Barr. All rights reserved.
a1788 4

=for html <hr>

I<$Id: //depot/libnet/Net/FTP.pm#80 $>
@


1.2
log
@From Andrushock, s/sucess/success/g
@
text
@d25 1
a25 1
$VERSION = "2.65"; # $Id: //depot/libnet/Net/FTP.pm#68 $
d73 1
d80 1
d91 2
d209 1
a209 1
	? ($ftp->message =~ /(\d+)$/)[0]
d219 1
a219 1
	 if $line =~ /^[-rwx]{10}/
d226 1
a226 1
	 if $files[0] =~ /^([-rwx]{10}.*)$/;
d398 17
d486 1
d503 1
a503 2
   my $written = syswrite($loc,$buf,$len);
   unless(defined($written) && $written == $len)
d707 12
a718 1

d749 3
d761 1
a761 1
   last unless $len = sysread($loc,$buf="",$blksize);
d946 1
d1181 1
a1211 1
sub _ALLO { shift->unsupported(@@_) }
d1230 12
a1241 4
    $ftp = Net::FTP->new("some.host.name", Debug => 0);
    $ftp->login("anonymous",'-anonymous@@');
    $ftp->cwd("/pub");
    $ftp->get("that.file");
d1324 3
d1365 1
a1365 1
=item type (TYPE [, ARGS])
d1367 1
a1367 3
This method will send the TYPE command to the remote FTP server
to change the type of data transfer. The return value is the previous
value.
d1369 1
a1369 1
=item ascii ([ARGS]) binary([ARGS]) ebcdic([ARGS]) byte([ARGS])
d1371 1
a1371 1
Synonyms for C<type> with the first arguments set correctly
d1373 2
a1374 1
B<NOTE> ebcdic and byte are not fully supported.
d1407 1
a1407 1
=item rmdir ( DIR )
d1409 2
a1410 1
Remove the directory with the name C<DIR>.
d1421 14
a1682 4
=item B<ALLO>

Allocates storage for the file to be transferred.

d1746 1
a1746 1
=item http://www.csh.rit.edu/~adam/Progs/autoftp-2.0.tar.gz
d1770 1
a1770 1
I<$Id: //depot/libnet/Net/FTP.pm#68 $>
@


1.1
log
@Initial revision
@
text
@d628 1
a628 1
   # If the creation of the last element was not sucessful, see if we
@


1.1.1.1
log
@stock perl 5.8.0 from CPAN
@
text
@@


1.1.1.2
log
@perl 5.8.2 from CPAN
@
text
@d25 1
a25 1
$VERSION = "2.72"; # $Id: //depot/libnet/Net/FTP.pm#80 $
a72 1
	 || $NetConfig{firewall_type}
a78 1
			    LocalAddr => $arg{'LocalAddr'},
a88 2
 ${*$ftp}{'net_ftp_localaddr'} = $arg{'LocalAddr'};

d205 1
a205 1
	? ($ftp->message =~ /(\d+)\s*$/)[0]
d215 1
a215 1
	 if $line =~ /^[-rwxSsTt]{10}/
d222 1
a222 1
	 if $files[0] =~ /^([-rwxSsTt]{10}.*)$/;
a393 17
sub alloc
{
 my $ftp = shift;
 my $size = shift;
 my $oldval = ${*$ftp}{'net_ftp_allo'};

 return $oldval
	unless (defined $size);

 return undef
	unless ($ftp->_ALLO($size,@@_));

 ${*$ftp}{'net_ftp_allo'} = join(" ",$size,@@_);

 $oldval;
}

a464 1
 local $\; # Just in case
d481 2
a482 1
   unless(print $loc $buf)
d628 1
a628 1
   # If the creation of the last element was not successful, see if we
d686 1
a686 12
 if( defined ${*$ftp}{'net_ftp_allo'} ) 
  {
   delete ${*$ftp}{'net_ftp_allo'};
  } else 
  {
   # if the user hasn't already invoked the alloc method since the last 
   # _store_cmd call, figure out if the local file is a regular file(not
   # a pipe, or device) and if so get the file size from stat, and send
   # an ALLO command before sending the STOR, STOU, or APPE command.
   my $size = -f $local && -s _; # no ALLO if sending data from a pipe
   $ftp->_ALLO($size) if $size;
  }
a716 3
 $remote = ($ftp->message =~ /FILE:\s*(.*)/)[0]
   if 'STOU' eq uc $cmd;

d726 1
a726 1
   last unless $len = read($loc,$buf="",$blksize);
a910 1
		     LocalAddr => ${*$ftp}{'net_ftp_localaddr'},
a1144 1
sub _ALLO { shift->command("ALLO",@@_)->response() == CMD_OK}
d1175 1
d1194 4
a1197 12
    $ftp = Net::FTP->new("some.host.name", Debug => 0)
      or die "Cannot connect to some.host.name: $@@";

    $ftp->login("anonymous",'-anonymous@@')
      or die "Cannot login ", $ftp->message;

    $ftp->cwd("/pub")
      or die "Cannot change working directory ", $ftp->message;

    $ftp->get("that.file")
      or die "get failed ", $ftp->message;

a1279 3
B<LocalAddr> - Local address to use for all socket connections, this
argument will be passed to L<IO::Socket::INET>

d1318 1
a1318 1
=item ascii
d1320 3
a1322 1
Transfer file in ASCII. CRLF translation will be done if required
d1324 1
a1324 1
=item binary
d1326 1
a1326 1
Transfer file in binary mode. No transformation will be done.
d1328 1
a1328 2
B<Hint>: If both server and client machines use the same line ending for
text files, then it will be faster to transfer all files in binary mode.
d1361 1
a1361 1
=item rmdir ( DIR [, RECURSE ])
d1363 1
a1363 2
Remove the directory with the name C<DIR>. If C<RECURSE> is I<true> then
C<rmdir> will attempt to delete everything inside the directory.
a1373 14
=item alloc ( SIZE [, RECORD_SIZE] )

The alloc command allows you to give the ftp server a hint about the size
of the file about to be transfered using the ALLO ftp command. Some storage
systems use this to make intelligent decisions about how to store the file.
The C<SIZE> argument represents the size of the file in bytes. The
C<RECORD_SIZE> argument indicates a mazimum record or page size for files
sent with a record or page structure.

The size of the file will be determined, and sent to the server
automatically for normal files so that this method need only be called if
you are transfering data from a socket, named pipe, or other stream not
associated with a normal file.

d1622 4
d1689 1
a1689 1
=item http://www.csh.rit.edu/~adam/Progs/
d1713 1
a1713 1
I<$Id: //depot/libnet/Net/FTP.pm#80 $>
@


1.1.1.3
log
@Import of stock perl 5.8.5
@
text
@d3 1
a3 1
# Copyright (c) 1995-2004 Graham Barr <gbarr@@pobox.com>. All rights reserved.
d25 1
a25 1
$VERSION = "2.75";
d53 2
a54 8
 my ($peer,%arg);
 if (@@_ % 2) {
   $peer = shift ;
   %arg  = @@_;
 } else {
   %arg = @@_;
   $peer=delete $arg{Host};
 }
a126 7

sub host {
 my $me = shift;
 ${*$me}{'net_ftp_host'};
}


d209 1
a209 1
	? ($ftp->message =~ /(\d+)\s*(bytes?\s*)?$/)[0]
d446 2
a447 2
 ${*$ftp}{'net_ftp_rest'} = $where if defined $where;
  my $rest = ${*$ftp}{'net_ftp_rest'};
d463 1
a463 1
   unless(sysopen($loc, $local, O_CREAT | O_WRONLY | ($rest ? O_APPEND : O_TRUNC)))
d584 1
a584 1
    my @@filelist = grep { !/^\.{1,2}$/ } $ftp->ls($dir);
d587 1
a587 1
	unless @@filelist; # failed, it is probably not a directory
d591 1
a591 1
    foreach $file (map { m,/, ? $_ : "$dir/$_" } @@filelist)
d716 1
a716 1
   my $size = do { local $^W; -f $local && -s _ }; # no ALLO if sending data from a pipe
d942 1
a942 1
   my @@port = map { 0+$_ } split(/,/,${*$ftp}{'net_ftp_pasv'});
d1283 1
a1283 1
=item new ([ HOST ] [, OPTIONS ])
a1287 3
C<HOST> is optional. If C<HOST> is not given then it may instead be
passed as the C<Host> option described below. 

a1290 6
B<Host> - FTP host to connect to. It may be a single scalar, as defined for
the C<PeerAddr> option in L<IO::Socket::INET>, or a reference to
an array with hosts to try in turn. The L</host> method will return the value
which was used to connect to the host.


d1419 2
a1434 2
=item ls ( [ DIR ] )

d1764 1
a1764 1
Copyright (c) 1995-2004 Graham Barr. All rights reserved.
d1767 4
@


1.1.1.4
log
@import perl 5.10.0 from CPAN
@
text
@d23 1
d25 1
a25 1
$VERSION = '2.77';
d32 1
a32 1
($TELNET_IAC, $TELNET_IP, $TELNET_DM) = (255, 244, 242);
d34 5
a40 1

d43 1
a43 1
  *trEBCDIC = sub () {$is_os390}
d46 19
d66 15
a80 29
sub new {
  my $pkg = shift;
  my ($peer, %arg);
  if (@@_ % 2) {
    $peer = shift;
    %arg  = @@_;
  }
  else {
    %arg  = @@_;
    $peer = delete $arg{Host};
  }

  my $host      = $peer;
  my $fire      = undef;
  my $fire_type = undef;

  if (exists($arg{Firewall}) || Net::Config->requires_firewall($peer)) {
         $fire = $arg{Firewall}
      || $ENV{FTP_FIREWALL}
      || $NetConfig{ftp_firewall}
      || undef;

    if (defined $fire) {
      $peer = $fire;
      delete $arg{Port};
           $fire_type = $arg{FirewallType}
        || $ENV{FTP_FIREWALL_TYPE}
        || $NetConfig{firewall_type}
        || undef;
d84 40
a123 38
  my $ftp = $pkg->SUPER::new(
    PeerAddr  => $peer,
    PeerPort  => $arg{Port} || 'ftp(21)',
    LocalAddr => $arg{'LocalAddr'},
    Proto     => 'tcp',
    Timeout   => defined $arg{Timeout}
    ? $arg{Timeout}
    : 120
    )
    or return undef;

  ${*$ftp}{'net_ftp_host'}    = $host;                             # Remote hostname
  ${*$ftp}{'net_ftp_type'}    = 'A';                               # ASCII/binary/etc mode
  ${*$ftp}{'net_ftp_blksize'} = abs($arg{'BlockSize'} || 10240);

  ${*$ftp}{'net_ftp_localaddr'} = $arg{'LocalAddr'};

  ${*$ftp}{'net_ftp_firewall'} = $fire
    if (defined $fire);
  ${*$ftp}{'net_ftp_firewall_type'} = $fire_type
    if (defined $fire_type);

  ${*$ftp}{'net_ftp_passive'} =
      int exists $arg{Passive} ? $arg{Passive}
    : exists $ENV{FTP_PASSIVE} ? $ENV{FTP_PASSIVE}
    : defined $fire            ? $NetConfig{ftp_ext_passive}
    : $NetConfig{ftp_int_passive};    # Whew! :-)

  $ftp->hash(exists $arg{Hash} ? $arg{Hash} : 0, 1024);

  $ftp->autoflush(1);

  $ftp->debug(exists $arg{Debug} ? $arg{Debug} : undef);

  unless ($ftp->response() == CMD_OK) {
    $ftp->close();
    $@@ = $ftp->message;
    undef $ftp;
d126 1
a126 1
  $ftp;
d135 2
a136 2
  my $me = shift;
  ${*$me}{'net_ftp_host'};
d141 1
a141 1
  my $ftp = shift;    # self
d143 10
a152 10
  my ($h, $b) = @@_;
  unless ($h) {
    delete ${*$ftp}{'net_ftp_hash'};
    return [\*STDERR, 0];
  }
  ($h, $b) = (ref($h) ? $h : \*STDERR, $b || 1024);
  select((select($h), $| = 1)[0]);
  $b = 512 if $b < 512;
  ${*$ftp}{'net_ftp_hash'} = [$h, $b];
}
d154 3
d158 2
a159 5
sub quit {
  my $ftp = shift;

  $ftp->_QUIT;
  $ftp->close;
d162 1
d164 2
a165 2
sub DESTROY { }

d167 4
a170 7
sub ascii  { shift->type('A', @@_); }
sub binary { shift->type('I', @@_); }


sub ebcdic {
  carp "TYPE E is unsupported, shall default to I";
  shift->type('E', @@_);
d173 4
a176 4

sub byte {
  carp "TYPE L is unsupported, shall default to I";
  shift->type('L', @@_);
d181 29
d211 2
a212 32
sub quot {
  my $ftp = shift;
  my $cmd = shift;

  $ftp->command(uc $cmd, @@_);
  $ftp->response();
}


sub site {
  my $ftp = shift;

  $ftp->command("SITE", @@_);
  $ftp->response();
}


sub mdtm {
  my $ftp  = shift;
  my $file = shift;

  # Server Y2K bug workaround
  #
  # sigh; some idiotic FTP servers use ("19%d",tm.tm_year) instead of
  # ("%d",tm.tm_year+1900).  This results in an extra digit in the
  # string returned. To account for this we allow an optional extra
  # digit in the year. Then if the first two digits are 19 we use the
  # remainder, otherwise we subtract 1900 from the whole year.

  $ftp->_MDTM($file)
    && $ftp->message =~ /((\d\d)(\d\d\d?))(\d\d)(\d\d)(\d\d)(\d\d)(\d\d)/
    ? timegm($8, $7, $6, $5, $4 - 1, $2 eq '19' ? $3 : ($1 - 1900))
a215 1

d220 1
a220 1
  if ($ftp->supported("SIZE")) {
d222 21
a242 21
      ? ($ftp->message =~ /(\d+)\s*(bytes?\s*)?$/)[0]
      : undef;
  }
  elsif ($ftp->supported("STAT")) {
    my @@msg;
    return undef
      unless $ftp->_STAT($file) && (@@msg = $ftp->message) == 3;
    my $line;
    foreach $line (@@msg) {
      return (split(/\s+/, $line))[4]
        if $line =~ /^[-rwxSsTt]{10}/;
    }
  }
  else {
    my @@files = $ftp->dir($file);
    if (@@files) {
      return (split(/\s+/, $1))[4]
        if $files[0] =~ /^([-rwxSsTt]{10}.*)$/;
    }
  }
  undef;
a244 1

d246 2
a247 2
  my ($ftp, $user, $pass, $acct) = @@_;
  my ($ok, $ruser, $fwtype);
d254 3
a256 3
    ($user, $pass, $acct) = $rc->lpa()
      if ($rc);
  }
d262 2
a263 2
    || $NetConfig{'ftp_firewall_type'}
    || 0;
d274 1
a274 1
      my ($fwuser, $fwpass, $fwacct) = $rc ? $rc->lpa() : ();
d277 2
a278 2
        $user = join('@@', $user, $fwuser, ${*$ftp}{'net_ftp_host'});
        $pass = $pass . '@@' . $fwpass;
d281 6
a286 6
        if ($fwtype == 2) {
          $user .= '@@' . ${*$ftp}{'net_ftp_host'};
        }
        elsif ($fwtype == 6) {
          $fwuser .= '@@' . ${*$ftp}{'net_ftp_host'};
        }
d288 1
a288 1
        $ok = $ftp->_USER($fwuser);
d290 1
a290 1
        return 0 unless $ok == CMD_OK || $ok == CMD_MORE;
d292 1
a292 1
        $ok = $ftp->_PASS($fwpass || "");
d294 1
a294 1
        return 0 unless $ok == CMD_OK || $ok == CMD_MORE;
d296 2
a297 2
        $ok = $ftp->_ACCT($fwacct)
          if defined($fwacct);
d299 6
a304 6
        if ($fwtype == 3) {
          $ok = $ftp->command("SITE", ${*$ftp}{'net_ftp_host'})->response;
        }
        elsif ($fwtype == 4) {
          $ok = $ftp->command("OPEN", ${*$ftp}{'net_ftp_host'})->response;
        }
d306 1
a306 1
        return 0 unless $ok == CMD_OK || $ok == CMD_MORE;
d315 1
a315 1
    if ($ok == CMD_OK && $ftp->code == 220 && $user =~ /\@@/);
d318 1
a318 1
    unless (defined $pass) {
d323 2
a324 2
      ($ruser, $pass, $acct) = $rc->lpa()
        if ($rc);
d327 1
a327 1
        if (!defined $pass && (!defined($ruser) || $ruser =~ /^anonymous/o));
d334 1
a334 1
    if (defined($acct) && ($ok == CMD_MORE || $ok == CMD_OK));
d337 2
a338 2
    my ($f, $auth, $resp) = _auth_id($ftp);
    $ftp->authorize($auth, $resp) if defined($resp);
d344 6
a349 6

sub account {
  @@_ == 2 or croak 'usage: $ftp->account( ACCT )';
  my $ftp  = shift;
  my $acct = shift;
  $ftp->_ACCT($acct) == CMD_OK;
a351 1

d353 1
a353 1
  my ($ftp, $auth, $resp) = @@_;
d355 3
a357 2
  unless (defined $resp) {
    require Net::Netrc;
d359 1
a359 1
    $auth ||= eval { (getpwuid($>))[0] } || $ENV{NAME};
d361 2
a362 2
    my $rc = Net::Netrc->lookup(${*$ftp}{'net_ftp_firewall'}, $auth)
      || Net::Netrc->lookup(${*$ftp}{'net_ftp_firewall'});
d364 2
a365 2
    ($auth, $resp) = $rc->lpa()
      if ($rc);
d367 1
a367 1
  ($ftp, $auth, $resp);
d370 3
d374 1
a374 4
sub authorize {
  @@_ >= 1 || @@_ <= 3 or croak 'usage: $ftp->authorize( [AUTH [, RESP]])';

  my ($ftp, $auth, $resp) = &_auth_id;
d376 1
a376 1
  my $ok = $ftp->_AUTH($auth || "");
d378 2
a379 2
  $ok = $ftp->_RESP($resp || "")
    if ($ok == CMD_MORE);
d381 1
a381 1
  $ok == CMD_OK;
d384 3
d388 1
a388 2
sub rename {
  @@_ == 3 or croak 'usage: $ftp->rename(FROM, TO)';
d390 1
a390 3
  my ($ftp, $from, $to) = @@_;

  $ftp->_RNFR($from)
d394 5
d400 2
a401 7
sub type {
  my $ftp    = shift;
  my $type   = shift;
  my $oldval = ${*$ftp}{'net_ftp_type'};

  return $oldval
    unless (defined $type);
d403 2
a404 2
  return undef
    unless ($ftp->_TYPE($type, @@_));
d406 1
a406 1
  ${*$ftp}{'net_ftp_type'} = join(" ", $type, @@_);
d408 1
a408 1
  $oldval;
d411 5
d417 2
a418 4
sub alloc {
  my $ftp    = shift;
  my $size   = shift;
  my $oldval = ${*$ftp}{'net_ftp_allo'};
d420 2
a421 2
  return $oldval
    unless (defined $size);
d423 1
a423 2
  return undef
    unless ($ftp->_ALLO($size, @@_));
d425 1
a425 3
  ${*$ftp}{'net_ftp_allo'} = join(" ", $size, @@_);

  $oldval;
d428 3
d432 1
a432 4
sub abort {
  my $ftp = shift;

  send($ftp, pack("CCC", $TELNET_IAC, $TELNET_IP, $TELNET_IAC), MSG_OOB);
d434 1
a434 1
  $ftp->command(pack("C", $TELNET_DM) . "ABOR");
d436 1
a436 1
  ${*$ftp}{'net_ftp_dataconn'}->close()
d439 1
a439 1
  $ftp->response();
d441 1
a441 1
  $ftp->status == CMD_OK;
d444 3
d448 2
a449 5
sub get {
  my ($ftp, $remote, $local, $where) = @@_;

  my ($loc, $len, $buf, $resp, $data);
  local *FD;
d451 1
a451 1
  my $localfd = ref($local) || ref(\$local) eq "GLOB";
d453 2
a454 2
  ($local = $remote) =~ s#^.*/##
    unless (defined $local);
d456 2
a457 2
  croak("Bad remote filename '$remote'\n")
    if $remote =~ /[\r\n]/s;
d459 1
a459 1
  ${*$ftp}{'net_ftp_rest'} = $where if defined $where;
d462 2
a463 2
  delete ${*$ftp}{'net_ftp_port'};
  delete ${*$ftp}{'net_ftp_pasv'};
d465 2
a466 2
  $data = $ftp->retr($remote)
    or return undef;
d468 3
a470 2
  if ($localfd) {
    $loc = $local;
d472 9
a480 7
  else {
    $loc = \*FD;

    unless (sysopen($loc, $local, O_CREAT | O_WRONLY | ($rest ? O_APPEND: O_TRUNC))) {
      carp "Cannot open Local file $local: $!\n";
      $data->abort;
      return undef;
d484 6
a489 5
  if ($ftp->type eq 'I' && !binmode($loc)) {
    carp "Cannot binmode Local file $local: $!\n";
    $data->abort;
    close($loc) unless $localfd;
    return undef;
d492 2
a493 2
  $buf = '';
  my ($count, $hashh, $hashb, $ref) = (0);
d495 2
a496 2
  ($hashh, $hashb) = @@$ref
    if ($ref = ${*$ftp}{'net_ftp_hash'});
d498 2
a499 2
  my $blksize = ${*$ftp}{'net_ftp_blksize'};
  local $\;    # Just in case
d501 3
a503 2
  while (1) {
    last unless $len = $data->read($buf, $blksize);
d505 4
a508 3
    if (trEBCDIC && $ftp->type ne 'I') {
      $buf = $ftp->toebcdic($buf);
      $len = length($buf);
d511 10
a520 9
    if ($hashh) {
      $count += $len;
      print $hashh "#" x (int($count / $hashb));
      $count %= $hashb;
    }
    unless (print $loc $buf) {
      carp "Cannot write to Local file $local: $!\n";
      $data->abort;
      close($loc)
d522 1
a522 1
      return undef;
d526 1
a526 1
  print $hashh "\n" if $hashh;
d528 6
a533 4
  unless ($localfd) {
    unless (close($loc)) {
      carp "Cannot close file $local (perhaps disk space) $!\n";
      return undef;
d537 1
a537 1
  unless ($data->close())    # implied $ftp->response
d539 2
a540 2
    carp "Unable to close datastream";
    return undef;
d543 1
a543 1
  return $local;
d546 3
d550 1
a550 4
sub cwd {
  @@_ == 1 || @@_ == 2 or croak 'usage: $ftp->cwd( [ DIR ] )';

  my ($ftp, $dir) = @@_;
d552 1
a552 1
  $dir = "/" unless defined($dir) && $dir =~ /\S/;
d554 1
a554 1
  $dir eq ".."
d559 4
a562 4

sub cdup {
  @@_ == 1 or croak 'usage: $ftp->cdup()';
  $_[0]->_CDUP;
d565 4
d570 2
a571 6
sub pwd {
  @@_ == 1 || croak 'usage: $ftp->pwd()';
  my $ftp = shift;

  $ftp->_PWD();
  $ftp->_extract_path;
d584 7
a590 2
sub rmdir {
  @@_ == 2 || @@_ == 3 or croak('usage: $ftp->rmdir( DIR [, RECURSE ] )');
a591 24
  # Pick off the args
  my ($ftp, $dir, $recurse) = @@_;
  my $ok;

  return $ok
    if $ok = $ftp->_RMD($dir)
    or !$recurse;

  # Try to delete the contents
  # Get a list of all the files in the directory
  my @@filelist = grep { !/^\.{1,2}$/ } $ftp->ls($dir);

  return undef
    unless @@filelist;    # failed, it is probably not a directory

  # Go thru and delete each file or the directory
  my $file;
  foreach $file (map { m,/, ? $_ : "$dir/$_" } @@filelist) {
    next                 # successfully deleted the file
      if $ftp->delete($file);

    # Failed to delete it, assume its a directory
    # Recurse and ignore errors, the final rmdir() will
    # fail on any errors here
d593 22
a614 2
      unless $ok = $ftp->rmdir($file, 1);
  }
d616 6
a621 6
  # Directory should be empty
  # Try to remove the directory again
  # Pass results directly to caller
  # If any of the prior deletes failed, this
  # rmdir() will fail because directory is not empty
  return $ftp->_RMD($dir);
d624 2
a625 2

sub restart {
d628 1
a628 1
  my ($ftp, $where) = @@_;
d636 3
a638 2
sub mkdir {
  @@_ == 2 || @@_ == 3 or croak 'usage: $ftp->mkdir( DIR [, RECURSE ] )';
d640 1
a640 1
  my ($ftp, $dir, $recurse) = @@_;
d642 2
a643 2
  $ftp->_MKD($dir) || $recurse
    or return undef;
d645 1
a645 1
  my $path = $dir;
d647 3
a649 2
  unless ($ftp->ok) {
    my @@path = split(m#(?=/+)#, $dir);
d651 1
a651 1
    $path = "";
d653 3
a655 2
    while (@@path) {
      $path .= shift @@path;
d657 1
a657 1
      $ftp->_MKD($path);
d659 1
a659 1
      $path = $ftp->_extract_path($path);
d662 2
a663 2
    # If the creation of the last element was not successful, see if we
    # can cd to it, if so then return path
d665 9
a673 7
    unless ($ftp->ok) {
      my ($status, $message) = ($ftp->status, $ftp->message);
      my $pwd = $ftp->pwd;

      if ($pwd && $ftp->cwd($dir)) {
        $path = $dir;
        $ftp->cwd($pwd);
d675 3
a677 2
      else {
        undef $path;
d679 1
a679 1
      $ftp->set_status($status, $message);
d683 1
a683 1
  $path;
d686 3
d690 1
a690 4
sub delete {
  @@_ == 2 || croak 'usage: $ftp->delete( FILENAME )';

  $_[0]->_DELE($_[1]);
d693 3
d697 6
a702 3
sub put        { shift->_store_cmd("stor", @@_) }
sub put_unique { shift->_store_cmd("stou", @@_) }
sub append     { shift->_store_cmd("appe", @@_) }
d704 5
d710 1
a710 6
sub nlst { shift->_data_cmd("NLST", @@_) }
sub list { shift->_data_cmd("LIST", @@_) }
sub retr { shift->_data_cmd("RETR", @@_) }
sub stor { shift->_data_cmd("STOR", @@_) }
sub stou { shift->_data_cmd("STOU", @@_) }
sub appe { shift->_data_cmd("APPE", @@_) }
d712 4
d717 2
a718 13
sub _store_cmd {
  my ($ftp, $cmd, $local, $remote) = @@_;
  my ($loc, $sock, $len, $buf);
  local *FD;

  my $localfd = ref($local) || ref(\$local) eq "GLOB";

  unless (defined $remote) {
    croak 'Must specify remote filename with stream input'
      if $localfd;

    require File::Basename;
    $remote = File::Basename::basename($local);
d720 11
a730 2
  if (defined ${*$ftp}{'net_ftp_allo'}) {
    delete ${*$ftp}{'net_ftp_allo'};
d732 2
a733 1
  else {
d735 3
a737 6
    # if the user hasn't already invoked the alloc method since the last
    # _store_cmd call, figure out if the local file is a regular file(not
    # a pipe, or device) and if so get the file size from stat, and send
    # an ALLO command before sending the STOR, STOU, or APPE command.
    my $size = do { local $^W; -f $local && -s _ };    # no ALLO if sending data from a pipe
    $ftp->_ALLO($size) if $size;
d739 3
a741 8
  croak("Bad remote filename '$remote'\n")
    if $remote =~ /[\r\n]/s;

  if ($localfd) {
    $loc = $local;
  }
  else {
    $loc = \*FD;
d743 4
a746 3
    unless (sysopen($loc, $local, O_RDONLY)) {
      carp "Cannot open Local file $local: $!\n";
      return undef;
d750 4
a753 3
  if ($ftp->type eq 'I' && !binmode($loc)) {
    carp "Cannot binmode Local file $local: $!\n";
    return undef;
d756 2
a757 2
  delete ${*$ftp}{'net_ftp_port'};
  delete ${*$ftp}{'net_ftp_pasv'};
d759 2
a760 2
  $sock = $ftp->_data_cmd($cmd, $remote)
    or return undef;
d762 2
a763 2
  $remote = ($ftp->message =~ /FILE:\s*(.*)/)[0]
    if 'STOU' eq uc $cmd;
d765 1
a765 1
  my $blksize = ${*$ftp}{'net_ftp_blksize'};
d767 1
a767 1
  my ($count, $hashh, $hashb, $ref) = (0);
d769 2
a770 2
  ($hashh, $hashb) = @@$ref
    if ($ref = ${*$ftp}{'net_ftp_hash'});
d772 3
a774 2
  while (1) {
    last unless $len = read($loc, $buf = "", $blksize);
d776 4
a779 3
    if (trEBCDIC && $ftp->type ne 'I') {
      $buf = $ftp->toascii($buf);
      $len = length($buf);
d782 14
a795 13
    if ($hashh) {
      $count += $len;
      print $hashh "#" x (int($count / $hashb));
      $count %= $hashb;
    }

    my $wlen;
    unless (defined($wlen = $sock->write($buf, $len)) && $wlen == $len) {
      $sock->abort;
      close($loc)
        unless $localfd;
      print $hashh "\n" if $hashh;
      return undef;
d799 1
a799 1
  print $hashh "\n" if $hashh;
d801 2
a802 2
  close($loc)
    unless $localfd;
d804 2
a805 2
  $sock->close()
    or return undef;
d807 4
a810 3
  if ('STOU' eq uc $cmd and $ftp->message =~ m/unique\s+file\s*name\s*:\s*(.*)\)|"(.*)"/) {
    require File::Basename;
    $remote = File::Basename::basename($+);
d813 1
a813 1
  return $remote;
d816 3
d820 2
a821 2
sub port {
  @@_ == 1 || @@_ == 2 or croak 'usage: $ftp->port([PORT])';
d823 1
a823 2
  my ($ftp, $port) = @@_;
  my $ok;
d825 3
a827 5
  delete ${*$ftp}{'net_ftp_intern_port'};

  unless (defined $port) {

    # create a Listen socket at same address as the command socket
d829 5
a833 6
    ${*$ftp}{'net_ftp_listen'} ||= IO::Socket::INET->new(
      Listen    => 5,
      Proto     => 'tcp',
      Timeout   => $ftp->timeout,
      LocalAddr => $ftp->sockhost,
    );
d835 1
a835 1
    my $listen = ${*$ftp}{'net_ftp_listen'};
d837 1
a837 1
    my ($myport, @@myaddr) = ($listen->sockport, split(/\./, $listen->sockhost));
d839 1
a839 1
    $port = join(',', @@myaddr, $myport >> 8, $myport & 0xff);
d841 1
a841 1
    ${*$ftp}{'net_ftp_intern_port'} = 1;
d844 1
a844 1
  $ok = $ftp->_PORT($port);
d846 1
a846 1
  ${*$ftp}{'net_ftp_port'} = $port;
d848 1
a848 1
  $ok;
d851 2
d854 3
a856 2
sub ls  { shift->_list_cmd("NLST", @@_); }
sub dir { shift->_list_cmd("LIST", @@_); }
d858 1
d860 1
a860 2
sub pasv {
  @@_ == 1 or croak 'usage: $ftp->pasv()';
d862 1
a862 5
  my $ftp = shift;

  delete ${*$ftp}{'net_ftp_intern_port'};

  $ftp->_PASV && $ftp->message =~ /(\d+(,\d+)+)/
d864 1
a864 1
    : undef;
d867 4
a870 4

sub unique_name {
  my $ftp = shift;
  ${*$ftp}{'net_ftp_unique'} || undef;
a872 1

d874 20
a893 16
  @@_ == 2 or croak 'usage: $ftp->supported( CMD )';
  my $ftp  = shift;
  my $cmd  = uc shift;
  my $hash = ${*$ftp}{'net_ftp_supported'} ||= {};

  return $hash->{$cmd}
    if exists $hash->{$cmd};

  return $hash->{$cmd} = 0
    unless $ftp->_HELP($cmd);

  my $text = $ftp->message;
  if ($text =~ /following\s+commands/i) {
    $text =~ s/^.*\n//;
    while ($text =~ /(\*?)(\w+)(\*?)/sg) {
      $hash->{"\U$2"} = !length("$1$3");
a894 4
  }
  else {
    $hash->{$cmd} = $text !~ /unimplemented/i;
  }
d896 1
a896 1
  $hash->{$cmd} ||= 0;
d903 3
a905 3

sub lsl {
  carp "Use of Net::FTP::lsl deprecated, use 'dir'"
d907 1
a907 1
  goto &dir;
d910 3
a912 3

sub authorise {
  carp "Use of Net::FTP::authorise deprecated, use 'authorize'"
d914 1
a914 1
  goto &authorize;
d922 11
d934 1
a934 12
sub _extract_path {
  my ($ftp, $path) = @@_;

  # This tries to work both with and without the quote doubling
  # convention (RFC 959 requires it, but the first 3 servers I checked
  # didn't implement it).  It will fail on a server which uses a quote in
  # the message which isn't a part of or surrounding the path.
  $ftp->ok
    && $ftp->message =~ /(?:^|\s)\"(.*)\"(?:$|\s)/
    && ($path = $1) =~ s/\"\"/\"/g;

  $path;
d941 5
d947 1
a947 4
sub _dataconn {
  my $ftp  = shift;
  my $data = undef;
  my $pkg  = "Net::FTP::" . $ftp->type;
d949 1
a949 1
  eval "require " . $pkg;
d951 1
a951 1
  $pkg =~ s/ /_/g;
d953 3
a955 1
  delete ${*$ftp}{'net_ftp_dataconn'};
d957 5
a961 9
  if (defined ${*$ftp}{'net_ftp_pasv'}) {
    my @@port = map { 0 + $_ } split(/,/, ${*$ftp}{'net_ftp_pasv'});

    $data = $pkg->new(
      PeerAddr  => join(".", @@port[0 .. 3]),
      PeerPort  => $port[4] * 256 + $port[5],
      LocalAddr => ${*$ftp}{'net_ftp_localaddr'},
      Proto     => 'tcp'
    );
d963 4
a966 3
  elsif (defined ${*$ftp}{'net_ftp_listen'}) {
    $data = ${*$ftp}{'net_ftp_listen'}->accept($pkg);
    close(delete ${*$ftp}{'net_ftp_listen'});
d969 7
a975 6
  if ($data) {
    ${*$data} = "";
    $data->timeout($ftp->timeout);
    ${*$ftp}{'net_ftp_dataconn'} = $data;
    ${*$data}{'net_ftp_cmd'}     = $ftp;
    ${*$data}{'net_ftp_blksize'} = ${*$ftp}{'net_ftp_blksize'};
d978 1
a978 1
  $data;
d981 4
d986 2
a987 3
sub _list_cmd {
  my $ftp = shift;
  my $cmd = uc shift;
d989 1
a989 2
  delete ${*$ftp}{'net_ftp_port'};
  delete ${*$ftp}{'net_ftp_pasv'};
d991 2
a992 1
  my $data = $ftp->_data_cmd($cmd, @@_);
d994 2
a995 2
  return
    unless (defined $data);
d997 3
a999 2
  require Net::FTP::A;
  bless $data, "Net::FTP::A";    # Force ASCII mode
d1001 3
a1003 3
  my $databuf = '';
  my $buf     = '';
  my $blksize = ${*$ftp}{'net_ftp_blksize'};
d1005 1
a1005 3
  while ($data->read($databuf, $blksize)) {
    $buf .= $databuf;
  }
d1007 1
a1007 1
  my $list = [split(/\n/, $buf)];
d1009 3
a1011 4
  $data->close();

  if (trEBCDIC) {
    for (@@$list) { $_ = $ftp->toebcdic($_) }
d1014 2
a1015 3
  wantarray
    ? @@{$list}
    : $list;
d1018 7
d1026 4
a1029 11
sub _data_cmd {
  my $ftp   = shift;
  my $cmd   = uc shift;
  my $ok    = 1;
  my $where = delete ${*$ftp}{'net_ftp_rest'} || 0;
  my $arg;

  for $arg (@@_) {
    croak("Bad argument '$arg'\n")
      if $arg =~ /[\r\n]/s;
  }
d1031 3
a1033 3
  if ( ${*$ftp}{'net_ftp_passive'}
    && !defined ${*$ftp}{'net_ftp_pasv'}
    && !defined ${*$ftp}{'net_ftp_port'})
d1035 1
a1035 1
    my $data = undef;
d1037 14
a1050 12
    $ok = defined $ftp->pasv;
    $ok = $ftp->_REST($where)
      if $ok && $where;

    if ($ok) {
      $ftp->command($cmd, @@_);
      $data = $ftp->_dataconn();
      $ok   = CMD_INFO == $ftp->response();
      if ($ok) {
        $data->reading
          if $data && $cmd =~ /RETR|LIST|NLST/;
        return $data;
d1052 2
a1053 2
      $data->_close
        if $data;
d1055 1
a1055 1
    return undef;
d1058 3
a1060 3
  $ok = $ftp->port
    unless (defined ${*$ftp}{'net_ftp_port'}
    || defined ${*$ftp}{'net_ftp_pasv'});
d1062 1
a1062 1
  $ok = $ftp->_REST($where)
d1065 1
a1065 1
  return undef
d1068 1
a1068 1
  $ftp->command($cmd, @@_);
d1070 2
a1071 2
  return 1
    if (defined ${*$ftp}{'net_ftp_pasv'});
d1073 1
a1073 1
  $ok = CMD_INFO == $ftp->response();
d1075 1
a1075 1
  return $ok
d1078 2
a1079 2
  if ($ok) {
    my $data = $ftp->_dataconn();
d1081 2
a1082 2
    $data->reading
      if $data && $cmd =~ /RETR|LIST|NLST/;
d1084 2
a1085 2
    return $data;
  }
d1088 1
a1088 1
  close(delete ${*$ftp}{'net_ftp_listen'});
d1090 1
a1090 1
  return undef;
a1096 1

d1099 3
d1103 2
a1104 5
sub command {
  my $ftp = shift;

  delete ${*$ftp}{'net_ftp_port'};
  $ftp->SUPER::command(@@_);
d1107 4
d1112 1
a1112 5
sub response {
  my $ftp  = shift;
  my $code = $ftp->SUPER::response();

  delete ${*$ftp}{'net_ftp_pasv'}
d1115 1
a1115 1
  $code;
d1118 4
d1123 1
a1123 3
sub parse_response {
  return ($1, $2 eq "-")
    if $_[1] =~ s/^(\d\d\d)([- ]?)//o;
d1125 3
a1127 1
  my $ftp = shift;
d1129 1
a1129 5
  # Darn MS FTP server is a load of CRAP !!!!
  return ()
    unless ${*$ftp}{'net_cmd_code'} + 0;

  (${*$ftp}{'net_cmd_code'}, 1);
a1135 7

sub pasv_xfer_unique {
  my ($sftp, $sfile, $dftp, $dfile) = @@_;
  $sftp->pasv_xfer($sfile, $dftp, $dfile, 1);
}


d1137 1
a1137 1
  my ($sftp, $sfile, $dftp, $dfile, $unique) = @@_;
d1139 2
a1140 2
  ($dfile = $sfile) =~ s#.*/##
    unless (defined $dfile);
d1142 2
a1143 2
  my $port = $sftp->pasv
    or return undef;
d1145 2
a1146 2
  $dftp->port($port)
    or return undef;
d1148 2
a1149 2
  return undef
    unless ($unique ? $dftp->stou($dfile) : $dftp->stor($dfile));
d1151 6
a1156 6
  unless ($sftp->retr($sfile) && $sftp->response == CMD_INFO) {
    $sftp->retr($sfile);
    $dftp->abort;
    $dftp->response();
    return undef;
  }
d1158 1
a1158 1
  $dftp->pasv_wait($sftp);
d1161 3
d1165 2
a1166 2
sub pasv_wait {
  @@_ == 2 or croak 'usage: $ftp->pasv_wait(NON_PASV_FTP)';
d1168 2
a1169 2
  my ($ftp, $non_pasv) = @@_;
  my ($file, $rin, $rout);
d1171 2
a1172 2
  vec($rin = '', fileno($ftp), 1) = 1;
  select($rout = $rin, undef, undef, undef);
d1174 2
a1175 2
  $ftp->response();
  $non_pasv->response();
d1177 2
a1178 2
  return undef
    unless $ftp->ok() && $non_pasv->ok();
d1180 2
a1181 2
  return $1
    if $ftp->message =~ /unique file name:\s*(\S*)\s*\)/;
d1183 1
a1183 28
  return $1
    if $non_pasv->message =~ /unique file name:\s*(\S*)\s*\)/;

  return 1;
}


sub feature {
  @@_ == 2 or croak 'usage: $ftp->feature( NAME )';
  my ($ftp, $feat) = @@_;

  my $feature = ${*$ftp}{net_ftp_feature} ||= do {
    my @@feat;

    # Example response
    # 211-Features:
    #  MDTM
    #  REST STREAM
    #  SIZE
    # 211 End

    @@feat = map { /^\s+(.*\S)/ } $ftp->message
      if $ftp->_FEAT;

    \@@feat;
  };

  return grep { /^\Q$feat\E\b/i } @@$feature;
a1185 1

d1193 7
a1199 8

sub _ABOR { shift->command("ABOR")->response() == CMD_OK }
sub _ALLO { shift->command("ALLO", @@_)->response() == CMD_OK }
sub _CDUP { shift->command("CDUP")->response() == CMD_OK }
sub _NOOP { shift->command("NOOP")->response() == CMD_OK }
sub _PASV { shift->command("PASV")->response() == CMD_OK }
sub _QUIT { shift->command("QUIT")->response() == CMD_OK }
sub _DELE { shift->command("DELE", @@_)->response() == CMD_OK }
d1201 1
a1201 1
sub _PORT { shift->command("PORT", @@_)->response() == CMD_OK }
d1205 19
a1223 32
sub _TYPE { shift->command("TYPE", @@_)->response() == CMD_OK }
sub _RNTO { shift->command("RNTO", @@_)->response() == CMD_OK }
sub _RESP { shift->command("RESP", @@_)->response() == CMD_OK }
sub _MDTM { shift->command("MDTM", @@_)->response() == CMD_OK }
sub _SIZE { shift->command("SIZE", @@_)->response() == CMD_OK }
sub _HELP { shift->command("HELP", @@_)->response() == CMD_OK }
sub _STAT { shift->command("STAT", @@_)->response() == CMD_OK }
sub _FEAT { shift->command("FEAT", @@_)->response() == CMD_OK }
sub _APPE { shift->command("APPE", @@_)->response() == CMD_INFO }
sub _LIST { shift->command("LIST", @@_)->response() == CMD_INFO }
sub _NLST { shift->command("NLST", @@_)->response() == CMD_INFO }
sub _RETR { shift->command("RETR", @@_)->response() == CMD_INFO }
sub _STOR { shift->command("STOR", @@_)->response() == CMD_INFO }
sub _STOU { shift->command("STOU", @@_)->response() == CMD_INFO }
sub _RNFR { shift->command("RNFR", @@_)->response() == CMD_MORE }
sub _REST { shift->command("REST", @@_)->response() == CMD_MORE }
sub _PASS { shift->command("PASS", @@_)->response() }
sub _ACCT { shift->command("ACCT", @@_)->response() }
sub _AUTH { shift->command("AUTH", @@_)->response() }


sub _USER {
  my $ftp = shift;
  my $ok  = $ftp->command("USER", @@_)->response();

  # A certain brain dead firewall :-)
  $ok = $ftp->command("user", @@_)->response()
    unless $ok == CMD_MORE or $ok == CMD_OK;

  $ok;
}

d1317 1
a1317 1
appended to the login identifier. This kind of setup is also referred to
d1335 4
a1338 12
B<Passive> - If set to a non-zero value then all data transfers will
be done using passive mode. If set to zero then data transfers will be
done using active mode.  If the machine is connected to the Internet
directly, both passive and active mode should work equally well.
Behind most firewall and NAT configurations passive mode has a better
chance of working.  However, in some rare firewall configurations,
active mode actually works when passive mode doesn't.  Some really old
FTP servers might not implement passive transfers.  If not specified,
then the transfer mode is set by the environment variable
C<FTP_PASSIVE> or if that one is not set by the settings done by the
F<libnetcfg> utility.  If none of these apply then passive mode is
used.
d1444 1
a1444 1
of the file about to be transferred using the ALLO ftp command. Some storage
d1447 1
a1447 1
C<RECORD_SIZE> argument indicates a maximum record or page size for files
d1452 1
a1452 1
you are transferring data from a socket, named pipe, or other stream not
d1476 1
a1476 1
not be transferred, and the remaining bytes will be appended to
d1493 1
a1493 1
returned then the contents that had been transferred will not be remove
d1523 1
a1523 1
If the file is subsequently transferred from the server in ASCII mode
a1539 15

=item feature ( NAME )

Determine if the server supports the specified feature. The return
value is a list of lines the server responded with to describe the
options that it supports for the given feature. If the feature is
unsupported then the empty list is returned.

  if ($ftp->feature( 'MDTM' )) {
    # Do something
  }

  if (grep { /\bTLS\b/ } $ftp->feature('AUTH')) {
    # Server supports TLS
  }
@


