head	1.6;
access;
symbols
	OPENBSD_4_8:1.5.0.8
	OPENBSD_4_8_BASE:1.5
	OPENBSD_4_7:1.5.0.4
	OPENBSD_4_7_BASE:1.5
	PERL_5_10_1:1.1.1.4
	OPENBSD_4_6:1.5.0.6
	OPENBSD_4_6_BASE:1.5
	OPENBSD_4_5:1.5.0.2
	OPENBSD_4_5_BASE:1.5
	PERL_5_10_0:1.1.1.4
	OPENBSD_4_4:1.4.0.18
	OPENBSD_4_4_BASE:1.4
	OPENBSD_4_3:1.4.0.16
	OPENBSD_4_3_BASE:1.4
	OPENBSD_4_2:1.4.0.14
	OPENBSD_4_2_BASE:1.4
	OPENBSD_4_1:1.4.0.12
	OPENBSD_4_1_BASE:1.4
	OPENBSD_4_0:1.4.0.10
	OPENBSD_4_0_BASE:1.4
	PERL_5_8_8:1.1.1.3
	OPENBSD_3_9:1.4.0.8
	OPENBSD_3_9_BASE:1.4
	OPENBSD_3_8:1.4.0.6
	OPENBSD_3_8_BASE:1.4
	OPENBSD_3_7:1.4.0.4
	OPENBSD_3_7_BASE:1.4
	PERL_5_8_6:1.1.1.3
	OPENBSD_3_6:1.4.0.2
	OPENBSD_3_6_BASE:1.4
	PERL_5_8_5:1.1.1.3
	PERL_5_8_3:1.1.1.2
	OPENBSD_3_5:1.3.0.2
	OPENBSD_3_5_BASE:1.3
	PERL_5_8_2:1.1.1.2
	OPENBSD_3_4:1.2.0.4
	OPENBSD_3_4_BASE:1.2
	OPENBSD_3_3:1.2.0.2
	OPENBSD_3_3_BASE:1.2
	PERL_5_8_0:1.1.1.1
	CPAN:1.1.1;
locks; strict;
comment	@# @;
expand	@o@;


1.6
date	2010.09.24.14.59.46;	author millert;	state dead;
branches;
next	1.5;

1.5
date	2008.09.29.17.36.13;	author millert;	state Exp;
branches;
next	1.4;

1.4
date	2004.08.09.18.09.43;	author millert;	state Exp;
branches;
next	1.3;

1.3
date	2003.12.03.03.02.39;	author millert;	state Exp;
branches;
next	1.2;

1.2
date	2002.12.09.00.45.36;	author millert;	state Exp;
branches;
next	1.1;

1.1
date	2002.10.27.22.15.01;	author millert;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	2002.10.27.22.15.01;	author millert;	state Exp;
branches;
next	1.1.1.2;

1.1.1.2
date	2003.12.03.02.44.05;	author millert;	state Exp;
branches;
next	1.1.1.3;

1.1.1.3
date	2004.08.09.17.47.04;	author millert;	state Exp;
branches;
next	1.1.1.4;

1.1.1.4
date	2008.09.29.17.18.39;	author millert;	state Exp;
branches;
next	;


desc
@@


1.6
log
@remove files no longer in perl 5.12.2 (or that have moved)
@
text
@# Net::NNTP.pm
#
# Copyright (c) 1995-1997 Graham Barr <gbarr@@pobox.com>. All rights reserved.
# This program is free software; you can redistribute it and/or
# modify it under the same terms as Perl itself.

package Net::NNTP;

use strict;
use vars qw(@@ISA $VERSION $debug);
use IO::Socket;
use Net::Cmd;
use Carp;
use Time::Local;
use Net::Config;

$VERSION = "2.24";
@@ISA     = qw(Net::Cmd IO::Socket::INET);


sub new {
  my $self = shift;
  my $type = ref($self) || $self;
  my ($host, %arg);
  if (@@_ % 2) {
    $host = shift;
    %arg  = @@_;
  }
  else {
    %arg  = @@_;
    $host = delete $arg{Host};
  }
  my $obj;

  $host ||= $ENV{NNTPSERVER} || $ENV{NEWSHOST};

  my $hosts = defined $host ? [$host] : $NetConfig{nntp_hosts};

  @@{$hosts} = qw(news)
    unless @@{$hosts};

  my $h;
  foreach $h (@@{$hosts}) {
    $obj = $type->SUPER::new(
      PeerAddr => ($host = $h),
      PeerPort => $arg{Port} || 'nntp(119)',
      Proto => 'tcp',
      Timeout => defined $arg{Timeout}
      ? $arg{Timeout}
      : 120
      )
      and last;
  }

  return undef
    unless defined $obj;

  ${*$obj}{'net_nntp_host'} = $host;

  $obj->autoflush(1);
  $obj->debug(exists $arg{Debug} ? $arg{Debug} : undef);

  unless ($obj->response() == CMD_OK) {
    $obj->close;
    return undef;
  }

  my $c = $obj->code;
  my @@m = $obj->message;

  unless (exists $arg{Reader} && $arg{Reader} == 0) {

    # if server is INN and we have transfer rights the we are currently
    # talking to innd not nnrpd
    if ($obj->reader) {

      # If reader suceeds the we need to consider this code to determine postok
      $c = $obj->code;
    }
    else {

      # I want to ignore this failure, so restore the previous status.
      $obj->set_status($c, \@@m);
    }
  }

  ${*$obj}{'net_nntp_post'} = $c == 200 ? 1 : 0;

  $obj;
}


sub host {
  my $me = shift;
  ${*$me}{'net_nntp_host'};
}


sub debug_text {
  my $nntp  = shift;
  my $inout = shift;
  my $text  = shift;

  if ( (ref($nntp) and $nntp->code == 350 and $text =~ /^(\S+)/)
    || ($text =~ /^(authinfo\s+pass)/io))
  {
    $text = "$1 ....\n";
  }

  $text;
}


sub postok {
  @@_ == 1 or croak 'usage: $nntp->postok()';
  my $nntp = shift;
  ${*$nntp}{'net_nntp_post'} || 0;
}


sub article {
  @@_ >= 1 && @@_ <= 3 or croak 'usage: $nntp->article( [ MSGID ], [ FH ] )';
  my $nntp = shift;
  my @@fh;

  @@fh = (pop) if @@_ == 2 || (@@_ && (ref($_[0]) || ref(\$_[0]) eq 'GLOB'));

  $nntp->_ARTICLE(@@_)
    ? $nntp->read_until_dot(@@fh)
    : undef;
}


sub articlefh {
  @@_ >= 1 && @@_ <= 2 or croak 'usage: $nntp->articlefh( [ MSGID ] )';
  my $nntp = shift;

  return unless $nntp->_ARTICLE(@@_);
  return $nntp->tied_fh;
}


sub authinfo {
  @@_ == 3 or croak 'usage: $nntp->authinfo( USER, PASS )';
  my ($nntp, $user, $pass) = @@_;

  $nntp->_AUTHINFO("USER",      $user) == CMD_MORE
    && $nntp->_AUTHINFO("PASS", $pass) == CMD_OK;
}


sub authinfo_simple {
  @@_ == 3 or croak 'usage: $nntp->authinfo( USER, PASS )';
  my ($nntp, $user, $pass) = @@_;

  $nntp->_AUTHINFO('SIMPLE') == CMD_MORE
    && $nntp->command($user, $pass)->response == CMD_OK;
}


sub body {
  @@_ >= 1 && @@_ <= 3 or croak 'usage: $nntp->body( [ MSGID ], [ FH ] )';
  my $nntp = shift;
  my @@fh;

  @@fh = (pop) if @@_ == 2 || (@@_ && ref($_[0]) || ref(\$_[0]) eq 'GLOB');

  $nntp->_BODY(@@_)
    ? $nntp->read_until_dot(@@fh)
    : undef;
}


sub bodyfh {
  @@_ >= 1 && @@_ <= 2 or croak 'usage: $nntp->bodyfh( [ MSGID ] )';
  my $nntp = shift;
  return unless $nntp->_BODY(@@_);
  return $nntp->tied_fh;
}


sub head {
  @@_ >= 1 && @@_ <= 3 or croak 'usage: $nntp->head( [ MSGID ], [ FH ] )';
  my $nntp = shift;
  my @@fh;

  @@fh = (pop) if @@_ == 2 || (@@_ && ref($_[0]) || ref(\$_[0]) eq 'GLOB');

  $nntp->_HEAD(@@_)
    ? $nntp->read_until_dot(@@fh)
    : undef;
}


sub headfh {
  @@_ >= 1 && @@_ <= 2 or croak 'usage: $nntp->headfh( [ MSGID ] )';
  my $nntp = shift;
  return unless $nntp->_HEAD(@@_);
  return $nntp->tied_fh;
}


sub nntpstat {
  @@_ == 1 || @@_ == 2 or croak 'usage: $nntp->nntpstat( [ MSGID ] )';
  my $nntp = shift;

  $nntp->_STAT(@@_) && $nntp->message =~ /(<[^>]+>)/o
    ? $1
    : undef;
}


sub group {
  @@_ == 1 || @@_ == 2 or croak 'usage: $nntp->group( [ GROUP ] )';
  my $nntp = shift;
  my $grp  = ${*$nntp}{'net_nntp_group'} || undef;

  return $grp
    unless (@@_ || wantarray);

  my $newgrp = shift;

  return wantarray ? () : undef
    unless $nntp->_GROUP($newgrp || $grp || "")
    && $nntp->message =~ /(\d+)\s+(\d+)\s+(\d+)\s+(\S+)/;

  my ($count, $first, $last, $group) = ($1, $2, $3, $4);

  # group may be replied as '(current group)'
  $group = ${*$nntp}{'net_nntp_group'}
    if $group =~ /\(/;

  ${*$nntp}{'net_nntp_group'} = $group;

  wantarray
    ? ($count, $first, $last, $group)
    : $group;
}


sub help {
  @@_ == 1 or croak 'usage: $nntp->help()';
  my $nntp = shift;

  $nntp->_HELP
    ? $nntp->read_until_dot
    : undef;
}


sub ihave {
  @@_ >= 2 or croak 'usage: $nntp->ihave( MESSAGE-ID [, MESSAGE ])';
  my $nntp = shift;
  my $mid  = shift;

  $nntp->_IHAVE($mid) && $nntp->datasend(@@_)
    ? @@_ == 0 || $nntp->dataend
    : undef;
}


sub last {
  @@_ == 1 or croak 'usage: $nntp->last()';
  my $nntp = shift;

  $nntp->_LAST && $nntp->message =~ /(<[^>]+>)/o
    ? $1
    : undef;
}


sub list {
  @@_ == 1 or croak 'usage: $nntp->list()';
  my $nntp = shift;

  $nntp->_LIST
    ? $nntp->_grouplist
    : undef;
}


sub newgroups {
  @@_ >= 2 or croak 'usage: $nntp->newgroups( SINCE [, DISTRIBUTIONS ])';
  my $nntp = shift;
  my $time = _timestr(shift);
  my $dist = shift || "";

  $dist = join(",", @@{$dist})
    if ref($dist);

  $nntp->_NEWGROUPS($time, $dist)
    ? $nntp->_grouplist
    : undef;
}


sub newnews {
  @@_ >= 2 && @@_ <= 4
    or croak 'usage: $nntp->newnews( SINCE [, GROUPS [, DISTRIBUTIONS ]])';
  my $nntp = shift;
  my $time = _timestr(shift);
  my $grp  = @@_ ? shift: $nntp->group;
  my $dist = shift || "";

  $grp ||= "*";
  $grp = join(",", @@{$grp})
    if ref($grp);

  $dist = join(",", @@{$dist})
    if ref($dist);

  $nntp->_NEWNEWS($grp, $time, $dist)
    ? $nntp->_articlelist
    : undef;
}


sub next {
  @@_ == 1 or croak 'usage: $nntp->next()';
  my $nntp = shift;

  $nntp->_NEXT && $nntp->message =~ /(<[^>]+>)/o
    ? $1
    : undef;
}


sub post {
  @@_ >= 1 or croak 'usage: $nntp->post( [ MESSAGE ] )';
  my $nntp = shift;

  $nntp->_POST() && $nntp->datasend(@@_)
    ? @@_ == 0 || $nntp->dataend
    : undef;
}


sub postfh {
  my $nntp = shift;
  return unless $nntp->_POST();
  return $nntp->tied_fh;
}


sub quit {
  @@_ == 1 or croak 'usage: $nntp->quit()';
  my $nntp = shift;

  $nntp->_QUIT;
  $nntp->close;
}


sub slave {
  @@_ == 1 or croak 'usage: $nntp->slave()';
  my $nntp = shift;

  $nntp->_SLAVE;
}

##
## The following methods are not implemented by all servers
##


sub active {
  @@_ == 1 || @@_ == 2 or croak 'usage: $nntp->active( [ PATTERN ] )';
  my $nntp = shift;

  $nntp->_LIST('ACTIVE', @@_)
    ? $nntp->_grouplist
    : undef;
}


sub active_times {
  @@_ == 1 or croak 'usage: $nntp->active_times()';
  my $nntp = shift;

  $nntp->_LIST('ACTIVE.TIMES')
    ? $nntp->_grouplist
    : undef;
}


sub distributions {
  @@_ == 1 or croak 'usage: $nntp->distributions()';
  my $nntp = shift;

  $nntp->_LIST('DISTRIBUTIONS')
    ? $nntp->_description
    : undef;
}


sub distribution_patterns {
  @@_ == 1 or croak 'usage: $nntp->distributions()';
  my $nntp = shift;

  my $arr;
  local $_;

  $nntp->_LIST('DISTRIB.PATS')
    && ($arr = $nntp->read_until_dot)
    ? [grep { /^\d/ && (chomp, $_ = [split /:/]) } @@$arr]
    : undef;
}


sub newsgroups {
  @@_ == 1 || @@_ == 2 or croak 'usage: $nntp->newsgroups( [ PATTERN ] )';
  my $nntp = shift;

  $nntp->_LIST('NEWSGROUPS', @@_)
    ? $nntp->_description
    : undef;
}


sub overview_fmt {
  @@_ == 1 or croak 'usage: $nntp->overview_fmt()';
  my $nntp = shift;

  $nntp->_LIST('OVERVIEW.FMT')
    ? $nntp->_articlelist
    : undef;
}


sub subscriptions {
  @@_ == 1 or croak 'usage: $nntp->subscriptions()';
  my $nntp = shift;

  $nntp->_LIST('SUBSCRIPTIONS')
    ? $nntp->_articlelist
    : undef;
}


sub listgroup {
  @@_ == 1 || @@_ == 2 or croak 'usage: $nntp->listgroup( [ GROUP ] )';
  my $nntp = shift;

  $nntp->_LISTGROUP(@@_)
    ? $nntp->_articlelist
    : undef;
}


sub reader {
  @@_ == 1 or croak 'usage: $nntp->reader()';
  my $nntp = shift;

  $nntp->_MODE('READER');
}


sub xgtitle {
  @@_ == 1 || @@_ == 2 or croak 'usage: $nntp->xgtitle( [ PATTERN ] )';
  my $nntp = shift;

  $nntp->_XGTITLE(@@_)
    ? $nntp->_description
    : undef;
}


sub xhdr {
  @@_ >= 2 && @@_ <= 4 or croak 'usage: $nntp->xhdr( HEADER, [ MESSAGE-SPEC ] )';
  my $nntp = shift;
  my $hdr  = shift;
  my $arg  = _msg_arg(@@_);

  $nntp->_XHDR($hdr, $arg)
    ? $nntp->_description
    : undef;
}


sub xover {
  @@_ == 2 || @@_ == 3 or croak 'usage: $nntp->xover( MESSAGE-SPEC )';
  my $nntp = shift;
  my $arg  = _msg_arg(@@_);

  $nntp->_XOVER($arg)
    ? $nntp->_fieldlist
    : undef;
}


sub xpat {
  @@_ == 4 || @@_ == 5 or croak '$nntp->xpat( HEADER, PATTERN, MESSAGE-SPEC )';
  my $nntp = shift;
  my $hdr  = shift;
  my $pat  = shift;
  my $arg  = _msg_arg(@@_);

  $pat = join(" ", @@$pat)
    if ref($pat);

  $nntp->_XPAT($hdr, $arg, $pat)
    ? $nntp->_description
    : undef;
}


sub xpath {
  @@_ == 2 or croak 'usage: $nntp->xpath( MESSAGE-ID )';
  my ($nntp, $mid) = @@_;

  return undef
    unless $nntp->_XPATH($mid);

  my $m;
  ($m = $nntp->message) =~ s/^\d+\s+//o;
  my @@p = split /\s+/, $m;

  wantarray ? @@p : $p[0];
}


sub xrover {
  @@_ == 2 || @@_ == 3 or croak 'usage: $nntp->xrover( MESSAGE-SPEC )';
  my $nntp = shift;
  my $arg  = _msg_arg(@@_);

  $nntp->_XROVER($arg)
    ? $nntp->_description
    : undef;
}


sub date {
  @@_ == 1 or croak 'usage: $nntp->date()';
  my $nntp = shift;

  $nntp->_DATE
    && $nntp->message =~ /(\d{4})(\d\d)(\d\d)(\d\d)(\d\d)(\d\d)/
    ? timegm($6, $5, $4, $3, $2 - 1, $1 - 1900)
    : undef;
}


##
## Private subroutines
##


sub _msg_arg {
  my $spec = shift;
  my $arg  = "";

  if (@@_) {
    carp "Depriciated passing of two message numbers, " . "pass a reference"
      if $^W;
    $spec = [$spec, $_[0]];
  }

  if (defined $spec) {
    if (ref($spec)) {
      $arg = $spec->[0];
      if (defined $spec->[1]) {
        $arg .= "-"
          if $spec->[1] != $spec->[0];
        $arg .= $spec->[1]
          if $spec->[1] > $spec->[0];
      }
    }
    else {
      $arg = $spec;
    }
  }

  $arg;
}


sub _timestr {
  my $time = shift;
  my @@g    = reverse((gmtime($time))[0 .. 5]);
  $g[1] += 1;
  $g[0] %= 100;
  sprintf "%02d%02d%02d %02d%02d%02d GMT", @@g;
}


sub _grouplist {
  my $nntp = shift;
  my $arr  = $nntp->read_until_dot
    or return undef;

  my $hash = {};
  my $ln;

  foreach $ln (@@$arr) {
    my @@a = split(/[\s\n]+/, $ln);
    $hash->{$a[0]} = [@@a[1, 2, 3]];
  }

  $hash;
}


sub _fieldlist {
  my $nntp = shift;
  my $arr  = $nntp->read_until_dot
    or return undef;

  my $hash = {};
  my $ln;

  foreach $ln (@@$arr) {
    my @@a = split(/[\t\n]/, $ln);
    my $m = shift @@a;
    $hash->{$m} = [@@a];
  }

  $hash;
}


sub _articlelist {
  my $nntp = shift;
  my $arr  = $nntp->read_until_dot;

  chomp(@@$arr)
    if $arr;

  $arr;
}


sub _description {
  my $nntp = shift;
  my $arr  = $nntp->read_until_dot
    or return undef;

  my $hash = {};
  my $ln;

  foreach $ln (@@$arr) {
    chomp($ln);

    $hash->{$1} = $ln
      if $ln =~ s/^\s*(\S+)\s*//o;
  }

  $hash;

}

##
## The commands
##


sub _ARTICLE  { shift->command('ARTICLE',  @@_)->response == CMD_OK }
sub _AUTHINFO { shift->command('AUTHINFO', @@_)->response }
sub _BODY     { shift->command('BODY',     @@_)->response == CMD_OK }
sub _DATE      { shift->command('DATE')->response == CMD_INFO }
sub _GROUP     { shift->command('GROUP', @@_)->response == CMD_OK }
sub _HEAD      { shift->command('HEAD', @@_)->response == CMD_OK }
sub _HELP      { shift->command('HELP', @@_)->response == CMD_INFO }
sub _IHAVE     { shift->command('IHAVE', @@_)->response == CMD_MORE }
sub _LAST      { shift->command('LAST')->response == CMD_OK }
sub _LIST      { shift->command('LIST', @@_)->response == CMD_OK }
sub _LISTGROUP { shift->command('LISTGROUP', @@_)->response == CMD_OK }
sub _NEWGROUPS { shift->command('NEWGROUPS', @@_)->response == CMD_OK }
sub _NEWNEWS   { shift->command('NEWNEWS', @@_)->response == CMD_OK }
sub _NEXT      { shift->command('NEXT')->response == CMD_OK }
sub _POST      { shift->command('POST', @@_)->response == CMD_MORE }
sub _QUIT      { shift->command('QUIT', @@_)->response == CMD_OK }
sub _SLAVE     { shift->command('SLAVE', @@_)->response == CMD_OK }
sub _STAT      { shift->command('STAT', @@_)->response == CMD_OK }
sub _MODE      { shift->command('MODE', @@_)->response == CMD_OK }
sub _XGTITLE   { shift->command('XGTITLE', @@_)->response == CMD_OK }
sub _XHDR      { shift->command('XHDR', @@_)->response == CMD_OK }
sub _XPAT      { shift->command('XPAT', @@_)->response == CMD_OK }
sub _XPATH     { shift->command('XPATH', @@_)->response == CMD_OK }
sub _XOVER     { shift->command('XOVER', @@_)->response == CMD_OK }
sub _XROVER    { shift->command('XROVER', @@_)->response == CMD_OK }
sub _XTHREAD   { shift->unsupported }
sub _XSEARCH   { shift->unsupported }
sub _XINDEX    { shift->unsupported }

##
## IO/perl methods
##


sub DESTROY {
  my $nntp = shift;
  defined(fileno($nntp)) && $nntp->quit;
}


1;

__END__

=head1 NAME

Net::NNTP - NNTP Client class

=head1 SYNOPSIS

    use Net::NNTP;

    $nntp = Net::NNTP->new("some.host.name");
    $nntp->quit;

=head1 DESCRIPTION

C<Net::NNTP> is a class implementing a simple NNTP client in Perl as described
in RFC977. C<Net::NNTP> inherits its communication methods from C<Net::Cmd>

=head1 CONSTRUCTOR

=over 4

=item new ( [ HOST ] [, OPTIONS ])

This is the constructor for a new Net::NNTP object. C<HOST> is the
name of the remote host to which a NNTP connection is required. If not
given then it may be passed as the C<Host> option described below. If no host is passed
then two environment variables are checked, first C<NNTPSERVER> then
C<NEWSHOST>, then C<Net::Config> is checked, and if a host is not found
then C<news> is used.

C<OPTIONS> are passed in a hash like fashion, using key and value pairs.
Possible options are:

B<Host> - NNTP host to connect to. It may be a single scalar, as defined for
the C<PeerAddr> option in L<IO::Socket::INET>, or a reference to
an array with hosts to try in turn. The L</host> method will return the value
which was used to connect to the host.

B<Timeout> - Maximum time, in seconds, to wait for a response from the
NNTP server, a value of zero will cause all IO operations to block.
(default: 120)

B<Debug> - Enable the printing of debugging information to STDERR

B<Reader> - If the remote server is INN then initially the connection
will be to nnrpd, by default C<Net::NNTP> will issue a C<MODE READER> command
so that the remote server becomes innd. If the C<Reader> option is given
with a value of zero, then this command will not be sent and the
connection will be left talking to nnrpd.

=back

=head1 METHODS

Unless otherwise stated all methods return either a I<true> or I<false>
value, with I<true> meaning that the operation was a success. When a method
states that it returns a value, failure will be returned as I<undef> or an
empty list.

=over 4

=item article ( [ MSGID|MSGNUM ], [FH] )

Retrieve the header, a blank line, then the body (text) of the
specified article. 

If C<FH> is specified then it is expected to be a valid filehandle
and the result will be printed to it, on success a true value will be
returned. If C<FH> is not specified then the return value, on success,
will be a reference to an array containing the article requested, each
entry in the array will contain one line of the article.

If no arguments are passed then the current article in the currently
selected newsgroup is fetched.

C<MSGNUM> is a numeric id of an article in the current newsgroup, and
will change the current article pointer.  C<MSGID> is the message id of
an article as shown in that article's header.  It is anticipated that the
client will obtain the C<MSGID> from a list provided by the C<newnews>
command, from references contained within another article, or from the
message-id provided in the response to some other commands.

If there is an error then C<undef> will be returned.

=item body ( [ MSGID|MSGNUM ], [FH] )

Like C<article> but only fetches the body of the article.

=item head ( [ MSGID|MSGNUM ], [FH] )

Like C<article> but only fetches the headers for the article.

=item articlefh ( [ MSGID|MSGNUM ] )

=item bodyfh ( [ MSGID|MSGNUM ] )

=item headfh ( [ MSGID|MSGNUM ] )

These are similar to article(), body() and head(), but rather than
returning the requested data directly, they return a tied filehandle
from which to read the article.

=item nntpstat ( [ MSGID|MSGNUM ] )

The C<nntpstat> command is similar to the C<article> command except that no
text is returned.  When selecting by message number within a group,
the C<nntpstat> command serves to set the "current article pointer" without
sending text.

Using the C<nntpstat> command to
select by message-id is valid but of questionable value, since a
selection by message-id does B<not> alter the "current article pointer".

Returns the message-id of the "current article".

=item group ( [ GROUP ] )

Set and/or get the current group. If C<GROUP> is not given then information
is returned on the current group.

In a scalar context it returns the group name.

In an array context the return value is a list containing, the number
of articles in the group, the number of the first article, the number
of the last article and the group name.

=item ihave ( MSGID [, MESSAGE ])

The C<ihave> command informs the server that the client has an article
whose id is C<MSGID>.  If the server desires a copy of that
article, and C<MESSAGE> has been given the it will be sent.

Returns I<true> if the server desires the article and C<MESSAGE> was
successfully sent,if specified.

If C<MESSAGE> is not specified then the message must be sent using the
C<datasend> and C<dataend> methods from L<Net::Cmd>

C<MESSAGE> can be either an array of lines or a reference to an array.

=item last ()

Set the "current article pointer" to the previous article in the current
newsgroup.

Returns the message-id of the article.

=item date ()

Returns the date on the remote server. This date will be in a UNIX time
format (seconds since 1970)

=item postok ()

C<postok> will return I<true> if the servers initial response indicated
that it will allow posting.

=item authinfo ( USER, PASS )

Authenticates to the server (using AUTHINFO USER / AUTHINFO PASS)
using the supplied username and password.  Please note that the
password is sent in clear text to the server.  This command should not
be used with valuable passwords unless the connection to the server is
somehow protected.

=item list ()

Obtain information about all the active newsgroups. The results is a reference
to a hash where the key is a group name and each value is a reference to an
array. The elements in this array are:- the last article number in the group,
the first article number in the group and any information flags about the group.

=item newgroups ( SINCE [, DISTRIBUTIONS ])

C<SINCE> is a time value and C<DISTRIBUTIONS> is either a distribution
pattern or a reference to a list of distribution patterns.
The result is the same as C<list>, but the
groups return will be limited to those created after C<SINCE> and, if
specified, in one of the distribution areas in C<DISTRIBUTIONS>. 

=item newnews ( SINCE [, GROUPS [, DISTRIBUTIONS ]])

C<SINCE> is a time value. C<GROUPS> is either a group pattern or a reference
to a list of group patterns. C<DISTRIBUTIONS> is either a distribution
pattern or a reference to a list of distribution patterns.

Returns a reference to a list which contains the message-ids of all news posted
after C<SINCE>, that are in a groups which matched C<GROUPS> and a
distribution which matches C<DISTRIBUTIONS>.

=item next ()

Set the "current article pointer" to the next article in the current
newsgroup.

Returns the message-id of the article.

=item post ( [ MESSAGE ] )

Post a new article to the news server. If C<MESSAGE> is specified and posting
is allowed then the message will be sent.

If C<MESSAGE> is not specified then the message must be sent using the
C<datasend> and C<dataend> methods from L<Net::Cmd>

C<MESSAGE> can be either an array of lines or a reference to an array.

The message, either sent via C<datasend> or as the C<MESSAGE>
parameter, must be in the format as described by RFC822 and must
contain From:, Newsgroups: and Subject: headers.

=item postfh ()

Post a new article to the news server using a tied filehandle.  If
posting is allowed, this method will return a tied filehandle that you
can print() the contents of the article to be posted.  You must
explicitly close() the filehandle when you are finished posting the
article, and the return value from the close() call will indicate
whether the message was successfully posted.

=item slave ()

Tell the remote server that I am not a user client, but probably another
news server.

=item quit ()

Quit the remote server and close the socket connection.

=back

=head2 Extension methods

These methods use commands that are not part of the RFC977 documentation. Some
servers may not support all of them.

=over 4

=item newsgroups ( [ PATTERN ] )

Returns a reference to a hash where the keys are all the group names which
match C<PATTERN>, or all of the groups if no pattern is specified, and
each value contains the description text for the group.

=item distributions ()

Returns a reference to a hash where the keys are all the possible
distribution names and the values are the distribution descriptions.

=item subscriptions ()

Returns a reference to a list which contains a list of groups which
are recommended for a new user to subscribe to.

=item overview_fmt ()

Returns a reference to an array which contain the names of the fields returned
by C<xover>.

=item active_times ()

Returns a reference to a hash where the keys are the group names and each
value is a reference to an array containing the time the groups was created
and an identifier, possibly an Email address, of the creator.

=item active ( [ PATTERN ] )

Similar to C<list> but only active groups that match the pattern are returned.
C<PATTERN> can be a group pattern.

=item xgtitle ( PATTERN )

Returns a reference to a hash where the keys are all the group names which
match C<PATTERN> and each value is the description text for the group.

=item xhdr ( HEADER, MESSAGE-SPEC )

Obtain the header field C<HEADER> for all the messages specified. 

The return value will be a reference
to a hash where the keys are the message numbers and each value contains
the text of the requested header for that message.

=item xover ( MESSAGE-SPEC )

The return value will be a reference
to a hash where the keys are the message numbers and each value contains
a reference to an array which contains the overview fields for that
message.

The names of the fields can be obtained by calling C<overview_fmt>.

=item xpath ( MESSAGE-ID )

Returns the path name to the file on the server which contains the specified
message.

=item xpat ( HEADER, PATTERN, MESSAGE-SPEC)

The result is the same as C<xhdr> except the is will be restricted to
headers where the text of the header matches C<PATTERN>

=item xrover

The XROVER command returns reference information for the article(s)
specified.

Returns a reference to a HASH where the keys are the message numbers and the
values are the References: lines from the articles

=item listgroup ( [ GROUP ] )

Returns a reference to a list of all the active messages in C<GROUP>, or
the current group if C<GROUP> is not specified.

=item reader

Tell the server that you are a reader and not another server.

This is required by some servers. For example if you are connecting to
an INN server and you have transfer permission your connection will
be connected to the transfer daemon, not the NNTP daemon. Issuing
this command will cause the transfer daemon to hand over control
to the NNTP daemon.

Some servers do not understand this command, but issuing it and ignoring
the response is harmless.

=back

=head1 UNSUPPORTED

The following NNTP command are unsupported by the package, and there are
no plans to do so.

    AUTHINFO GENERIC
    XTHREAD
    XSEARCH
    XINDEX

=head1 DEFINITIONS

=over 4

=item MESSAGE-SPEC

C<MESSAGE-SPEC> is either a single message-id, a single message number, or
a reference to a list of two message numbers.

If C<MESSAGE-SPEC> is a reference to a list of two message numbers and the
second number in a range is less than or equal to the first then the range
represents all messages in the group after the first message number.

B<NOTE> For compatibility reasons only with earlier versions of Net::NNTP
a message spec can be passed as a list of two numbers, this is deprecated
and a reference to the list should now be passed

=item PATTERN

The C<NNTP> protocol uses the C<WILDMAT> format for patterns.
The WILDMAT format was first developed by Rich Salz based on
the format used in the UNIX "find" command to articulate
file names. It was developed to provide a uniform mechanism
for matching patterns in the same manner that the UNIX shell
matches filenames.

Patterns are implicitly anchored at the
beginning and end of each string when testing for a match.

There are five pattern matching operations other than a strict
one-to-one match between the pattern and the source to be
checked for a match.

The first is an asterisk C<*> to match any sequence of zero or more
characters.

The second is a question mark C<?> to match any single character. The
third specifies a specific set of characters.

The set is specified as a list of characters, or as a range of characters
where the beginning and end of the range are separated by a minus (or dash)
character, or as any combination of lists and ranges. The dash can
also be included in the set as a character it if is the beginning
or end of the set. This set is enclosed in square brackets. The
close square bracket C<]> may be used in a set if it is the first
character in the set.

The fourth operation is the same as the
logical not of the third operation and is specified the same
way as the third with the addition of a caret character C<^> at
the beginning of the test string just inside the open square
bracket.

The final operation uses the backslash character to
invalidate the special meaning of an open square bracket C<[>,
the asterisk, backslash or the question mark. Two backslashes in
sequence will result in the evaluation of the backslash as a
character with no special meaning.

=over 4

=item Examples

=item C<[^]-]>

matches any single character other than a close square
bracket or a minus sign/dash.

=item C<*bdc>

matches any string that ends with the string "bdc"
including the string "bdc" (without quotes).

=item C<[0-9a-zA-Z]>

matches any single printable alphanumeric ASCII character.

=item C<a??d>

matches any four character string which begins
with a and ends with d.

=back

=back

=head1 SEE ALSO

L<Net::Cmd>

=head1 AUTHOR

Graham Barr <gbarr@@pobox.com>

=head1 COPYRIGHT

Copyright (c) 1995-1997 Graham Barr. All rights reserved.
This program is free software; you can redistribute it and/or modify
it under the same terms as Perl itself.

=cut
@


1.5
log
@fix conflicts and merge in local changes to perl 5.10.0
@
text
@@


1.4
log
@merge 5.8.5 into HEAD
remove now-unused files
crank libperl shared library major number
update Makefile.bsd-wrapper
tweak openbsd hints file for arm and m68k
@
text
@d17 1
a17 1
$VERSION = "2.23";
a19 15
sub new
{
 my $self = shift;
 my $type = ref($self) || $self;
 my ($host,%arg);
 if (@@_ % 2) {
   $host = shift ;
   %arg  = @@_;
 } else {
   %arg = @@_;
   $host=delete $arg{Host};
 }
 my $obj;

 $host ||= $ENV{NNTPSERVER} || $ENV{NEWSHOST};
d21 15
a35 1
 my $hosts = defined $host ? [ $host ] : $NetConfig{nntp_hosts};
d37 1
a37 2
 @@{$hosts} = qw(news)
	unless @@{$hosts};
d39 14
a52 10
 my $h;
 foreach $h (@@{$hosts})
  {
   $obj = $type->SUPER::new(PeerAddr => ($host = $h), 
			    PeerPort => $arg{Port} || 'nntp(119)',
			    Proto    => 'tcp',
			    Timeout  => defined $arg{Timeout}
						? $arg{Timeout}
						: 120
			   ) and last;
d55 2
a56 2
 return undef
	unless defined $obj;
d58 1
a58 1
 ${*$obj}{'net_nntp_host'} = $host;
d60 2
a61 2
 $obj->autoflush(1);
 $obj->debug(exists $arg{Debug} ? $arg{Debug} : undef);
d63 3
a65 4
 unless ($obj->response() == CMD_OK)
  {
   $obj->close;
   return undef;
d68 8
a75 2
 my $c = $obj->code;
 my @@m = $obj->message;
d77 2
a78 7
 unless(exists $arg{Reader} && $arg{Reader} == 0) {
   # if server is INN and we have transfer rights the we are currently
   # talking to innd not nnrpd
   if($obj->reader)
    {
     # If reader suceeds the we need to consider this code to determine postok
     $c = $obj->code;
d80 4
a83 4
   else
    {
     # I want to ignore this failure, so restore the previous status.
     $obj->set_status($c,\@@m);
d85 1
a85 1
 }
d87 1
a87 1
 ${*$obj}{'net_nntp_post'} = $c == 200 ? 1 : 0;
d89 1
a89 1
 $obj;
d92 1
d94 2
a95 2
 my $me = shift;
 ${*$me}{'net_nntp_host'};
a97 5
sub debug_text
{
 my $nntp = shift;
 my $inout = shift;
 my $text = shift;
d99 7
a105 2
 if((ref($nntp) and $nntp->code == 350 and $text =~ /^(\S+)/)
    || ($text =~ /^(authinfo\s+pass)/io)) 
d107 1
a107 1
   $text = "$1 ....\n"
d110 1
a110 1
 $text;
d113 5
a117 5
sub postok
{
 @@_ == 1 or croak 'usage: $nntp->postok()';
 my $nntp = shift;
 ${*$nntp}{'net_nntp_post'} || 0;
a119 5
sub article
{
 @@_ >= 1 && @@_ <= 3 or croak 'usage: $nntp->article( [ MSGID ], [ FH ] )';
 my $nntp = shift;
 my @@fh;
d121 6
a126 1
 @@fh = (pop) if @@_ == 2 || (@@_ && ref($_[0]) || ref(\$_[0]) eq 'GLOB');
d128 1
a128 1
 $nntp->_ARTICLE(@@_)
d133 1
d135 2
a136 2
 @@_ >= 1 && @@_ <= 2 or croak 'usage: $nntp->articlefh( [ MSGID ] )';
 my $nntp = shift;
d138 2
a139 2
 return unless $nntp->_ARTICLE(@@_);
 return $nntp->tied_fh;
a141 4
sub authinfo
{
 @@_ == 3 or croak 'usage: $nntp->authinfo( USER, PASS )';
 my($nntp,$user,$pass) = @@_;
d143 6
a148 2
 $nntp->_AUTHINFO("USER",$user) == CMD_MORE 
    && $nntp->_AUTHINFO("PASS",$pass) == CMD_OK;
a150 4
sub authinfo_simple
{
 @@_ == 3 or croak 'usage: $nntp->authinfo( USER, PASS )';
 my($nntp,$user,$pass) = @@_;
d152 6
a157 2
 $nntp->_AUTHINFO('SIMPLE') == CMD_MORE 
    && $nntp->command($user,$pass)->response == CMD_OK;
a159 5
sub body
{
 @@_ >= 1 && @@_ <= 3 or croak 'usage: $nntp->body( [ MSGID ], [ FH ] )';
 my $nntp = shift;
 my @@fh;
d161 6
a166 1
 @@fh = (pop) if @@_ == 2 || (@@_ && ref($_[0]) || ref(\$_[0]) eq 'GLOB');
d168 1
a168 1
 $nntp->_BODY(@@_)
a172 13
sub bodyfh
{
 @@_ >= 1 && @@_ <= 2 or croak 'usage: $nntp->bodyfh( [ MSGID ] )';
 my $nntp = shift;
 return unless $nntp->_BODY(@@_);
 return $nntp->tied_fh;
}

sub head
{
 @@_ >= 1 && @@_ <= 3 or croak 'usage: $nntp->head( [ MSGID ], [ FH ] )';
 my $nntp = shift;
 my @@fh;
d174 14
a187 1
 @@fh = (pop) if @@_ == 2 || (@@_ && ref($_[0]) || ref(\$_[0]) eq 'GLOB');
d189 1
a189 1
 $nntp->_HEAD(@@_)
d194 6
a199 6
sub headfh
{
 @@_ >= 1 && @@_ <= 2 or croak 'usage: $nntp->headfh( [ MSGID ] )';
 my $nntp = shift;
 return unless $nntp->_HEAD(@@_);
 return $nntp->tied_fh;
a201 4
sub nntpstat
{
 @@_ == 1 || @@_ == 2 or croak 'usage: $nntp->nntpstat( [ MSGID ] )';
 my $nntp = shift;
d203 5
a207 1
 $nntp->_STAT(@@_) && $nntp->message =~ /(<[^>]+>)/o
d213 4
a216 5
sub group
{
 @@_ == 1 || @@_ == 2 or croak 'usage: $nntp->group( [ GROUP ] )';
 my $nntp = shift;
 my $grp = ${*$nntp}{'net_nntp_group'} || undef;
d218 2
a219 2
 return $grp
    unless(@@_ || wantarray);
d221 1
a221 1
 my $newgrp = shift;
d223 3
a225 3
 return wantarray ? () : undef
	unless $nntp->_GROUP($newgrp || $grp || "")
		&& $nntp->message =~ /(\d+)\s+(\d+)\s+(\d+)\s+(\S+)/;
d227 1
a227 1
 my($count,$first,$last,$group) = ($1,$2,$3,$4);
d229 2
a230 2
 # group may be replied as '(current group)'
 $group = ${*$nntp}{'net_nntp_group'}
d233 1
a233 1
 ${*$nntp}{'net_nntp_group'} = $group;
d235 2
a236 2
 wantarray
    ? ($count,$first,$last,$group)
a239 4
sub help
{
 @@_ == 1 or croak 'usage: $nntp->help()';
 my $nntp = shift;
d241 5
a245 1
 $nntp->_HELP
a249 5
sub ihave
{
 @@_ >= 2 or croak 'usage: $nntp->ihave( MESSAGE-ID [, MESSAGE ])';
 my $nntp = shift;
 my $mid = shift;
d251 6
a256 1
 $nntp->_IHAVE($mid) && $nntp->datasend(@@_)
a260 4
sub last
{
 @@_ == 1 or croak 'usage: $nntp->last()';
 my $nntp = shift;
d262 5
a266 1
 $nntp->_LAST && $nntp->message =~ /(<[^>]+>)/o
a270 4
sub list
{
 @@_ == 1 or croak 'usage: $nntp->list()';
 my $nntp = shift;
d272 5
a276 1
 $nntp->_LIST
a280 6
sub newgroups
{
 @@_ >= 2 or croak 'usage: $nntp->newgroups( SINCE [, DISTRIBUTIONS ])';
 my $nntp = shift;
 my $time = _timestr(shift);
 my $dist = shift || "";
d282 7
a288 1
 $dist = join(",", @@{$dist})
d291 1
a291 1
 $nntp->_NEWGROUPS($time,$dist)
a295 8
sub newnews
{
 @@_ >= 2 && @@_ <= 4 or
	croak 'usage: $nntp->newnews( SINCE [, GROUPS [, DISTRIBUTIONS ]])';
 my $nntp = shift;
 my $time = _timestr(shift);
 my $grp  = @@_ ? shift : $nntp->group;
 my $dist = shift || "";
d297 10
a306 2
 $grp ||= "*";
 $grp = join(",", @@{$grp})
d309 1
a309 1
 $dist = join(",", @@{$dist})
d312 1
a312 1
 $nntp->_NEWNEWS($grp,$time,$dist)
a316 4
sub next
{
 @@_ == 1 or croak 'usage: $nntp->next()';
 my $nntp = shift;
d318 5
a322 1
 $nntp->_NEXT && $nntp->message =~ /(<[^>]+>)/o
a326 4
sub post
{
 @@_ >= 1 or croak 'usage: $nntp->post( [ MESSAGE ] )';
 my $nntp = shift;
d328 5
a332 1
 $nntp->_POST() && $nntp->datasend(@@_)
d337 1
a343 4
sub quit
{
 @@_ == 1 or croak 'usage: $nntp->quit()';
 my $nntp = shift;
d345 6
a350 2
 $nntp->_QUIT;
 $nntp->close;
a352 4
sub slave
{
 @@_ == 1 or croak 'usage: $nntp->slave()';
 my $nntp = shift;
d354 5
a358 1
 $nntp->_SLAVE;
a364 4
sub active
{
 @@_ == 1 || @@_ == 2 or croak 'usage: $nntp->active( [ PATTERN ] )';
 my $nntp = shift;
d366 5
a370 1
 $nntp->_LIST('ACTIVE',@@_)
a374 4
sub active_times
{
 @@_ == 1 or croak 'usage: $nntp->active_times()';
 my $nntp = shift;
d376 5
a380 1
 $nntp->_LIST('ACTIVE.TIMES')
a384 4
sub distributions
{
 @@_ == 1 or croak 'usage: $nntp->distributions()';
 my $nntp = shift;
d386 5
a390 1
 $nntp->_LIST('DISTRIBUTIONS')
a394 4
sub distribution_patterns
{
 @@_ == 1 or croak 'usage: $nntp->distributions()';
 my $nntp = shift;
d396 6
a401 2
 my $arr;
 local $_;
d403 3
a405 2
 $nntp->_LIST('DISTRIB.PATS') && ($arr = $nntp->read_until_dot)
    ? [grep { /^\d/ && (chomp, $_ = [ split /:/ ]) } @@$arr]
a408 4
sub newsgroups
{
 @@_ == 1 || @@_ == 2 or croak 'usage: $nntp->newsgroups( [ PATTERN ] )';
 my $nntp = shift;
d410 5
a414 1
 $nntp->_LIST('NEWSGROUPS',@@_)
a418 14
sub overview_fmt
{
 @@_ == 1 or croak 'usage: $nntp->overview_fmt()';
 my $nntp = shift;

 $nntp->_LIST('OVERVIEW.FMT')
     ? $nntp->_articlelist
     : undef;
}

sub subscriptions
{
 @@_ == 1 or croak 'usage: $nntp->subscriptions()';
 my $nntp = shift;
d420 5
a424 1
 $nntp->_LIST('SUBSCRIPTIONS')
a428 4
sub listgroup
{
 @@_ == 1 || @@_ == 2 or croak 'usage: $nntp->listgroup( [ GROUP ] )';
 my $nntp = shift;
d430 5
a434 1
 $nntp->_LISTGROUP(@@_)
a438 4
sub reader
{
 @@_ == 1 or croak 'usage: $nntp->reader()';
 my $nntp = shift;
d440 15
a454 1
 $nntp->_MODE('READER');
a456 4
sub xgtitle
{
 @@_ == 1 || @@_ == 2 or croak 'usage: $nntp->xgtitle( [ PATTERN ] )';
 my $nntp = shift;
d458 5
a462 1
 $nntp->_XGTITLE(@@_)
a466 30
sub xhdr
{
 @@_ >= 2 && @@_ <= 4 or croak 'usage: $nntp->xhdr( HEADER, [ MESSAGE-SPEC ] )';
 my $nntp = shift;
 my $hdr = shift;
 my $arg = _msg_arg(@@_);

 $nntp->_XHDR($hdr, $arg)
	? $nntp->_description
	: undef;
}

sub xover
{
 @@_ == 2 || @@_ == 3 or croak 'usage: $nntp->xover( MESSAGE-SPEC )';
 my $nntp = shift;
 my $arg = _msg_arg(@@_);

 $nntp->_XOVER($arg)
	? $nntp->_fieldlist
	: undef;
}

sub xpat
{
 @@_ == 4 || @@_ == 5 or croak '$nntp->xpat( HEADER, PATTERN, MESSAGE-SPEC )';
 my $nntp = shift;
 my $hdr = shift;
 my $pat = shift;
 my $arg = _msg_arg(@@_);
d468 31
a498 1
 $pat = join(" ", @@$pat)
d501 3
a503 3
 $nntp->_XPAT($hdr,$arg,$pat)
	? $nntp->_description
	: undef;
a505 4
sub xpath
{
 @@_ == 2 or croak 'usage: $nntp->xpath( MESSAGE-ID )';
 my($nntp,$mid) = @@_;
d507 6
a512 2
 return undef
	unless $nntp->_XPATH($mid);
d514 3
a516 2
 my $m; ($m = $nntp->message) =~ s/^\d+\s+//o;
 my @@p = split /\s+/, $m;
d518 1
a518 1
 wantarray ? @@p : $p[0];
a520 5
sub xrover
{
 @@_ == 2 || @@_ == 3 or croak 'usage: $nntp->xrover( MESSAGE-SPEC )';
 my $nntp = shift;
 my $arg = _msg_arg(@@_);
d522 8
a529 3
 $nntp->_XROVER($arg)
	? $nntp->_description
	: undef;
a531 4
sub date
{
 @@_ == 1 or croak 'usage: $nntp->date()';
 my $nntp = shift;
d533 7
a539 2
 $nntp->_DATE && $nntp->message =~ /(\d{4})(\d\d)(\d\d)(\d\d)(\d\d)(\d\d)/
    ? timegm($6,$5,$4,$3,$2-1,$1 - 1900)
a547 4
sub _msg_arg
{
 my $spec = shift;
 my $arg = "";
d549 8
a556 6
 if(@@_)
  {
   carp "Depriciated passing of two message numbers, "
      . "pass a reference"
	if $^W;
   $spec = [ $spec, $_[0] ];
d559 8
a566 11
 if(defined $spec)
  {
   if(ref($spec))
    {
     $arg = $spec->[0];
     if(defined $spec->[1])
      {
       $arg .= "-"
	  if $spec->[1] != $spec->[0];
       $arg .= $spec->[1]
	  if $spec->[1] > $spec->[0];
d569 2
a570 3
   else
    {
     $arg = $spec;
d574 10
a583 1
 $arg;
a585 14
sub _timestr
{
 my $time = shift;
 my @@g = reverse((gmtime($time))[0..5]);
 $g[1] += 1;
 $g[0] %= 100;
 sprintf "%02d%02d%02d %02d%02d%02d GMT", @@g;
}

sub _grouplist
{
 my $nntp = shift;
 my $arr = $nntp->read_until_dot or
    return undef;
d587 7
a593 2
 my $hash = {};
 my $ln;
d595 3
a597 4
 foreach $ln (@@$arr)
  {
   my @@a = split(/[\s\n]+/,$ln);
   $hash->{$a[0]} = [ @@a[1,2,3] ];
d600 1
a600 1
 $hash;
a602 5
sub _fieldlist
{
 my $nntp = shift;
 my $arr = $nntp->read_until_dot or
    return undef;
d604 7
a610 2
 my $hash = {};
 my $ln;
d612 4
a615 5
 foreach $ln (@@$arr)
  {
   my @@a = split(/[\t\n]/,$ln);
   my $m = shift @@a;
   $hash->{$m} = [ @@a ];
d618 1
a618 1
 $hash;
a620 4
sub _articlelist
{
 my $nntp = shift;
 my $arr = $nntp->read_until_dot;
d622 5
a626 1
 chomp(@@$arr)
d629 1
a629 1
 $arr;
a631 5
sub _description
{
 my $nntp = shift;
 my $arr = $nntp->read_until_dot or
    return undef;
d633 7
a639 2
 my $hash = {};
 my $ln;
d641 2
a642 3
 foreach $ln (@@$arr)
  {
   chomp($ln);
d644 2
a645 2
   $hash->{$1} = $ln
    if $ln =~ s/^\s*(\S+)\s*//o;
d648 1
a648 1
 $hash;
d656 4
a659 3
sub _ARTICLE   { shift->command('ARTICLE',@@_)->response == CMD_OK }
sub _AUTHINFO  { shift->command('AUTHINFO',@@_)->response }
sub _BODY      { shift->command('BODY',@@_)->response == CMD_OK }
d661 4
a664 4
sub _GROUP     { shift->command('GROUP',@@_)->response == CMD_OK }
sub _HEAD      { shift->command('HEAD',@@_)->response == CMD_OK }
sub _HELP      { shift->command('HELP',@@_)->response == CMD_INFO }
sub _IHAVE     { shift->command('IHAVE',@@_)->response == CMD_MORE }
d666 4
a669 4
sub _LIST      { shift->command('LIST',@@_)->response == CMD_OK }
sub _LISTGROUP { shift->command('LISTGROUP',@@_)->response == CMD_OK }
sub _NEWGROUPS { shift->command('NEWGROUPS',@@_)->response == CMD_OK }
sub _NEWNEWS   { shift->command('NEWNEWS',@@_)->response == CMD_OK }
d671 11
a681 11
sub _POST      { shift->command('POST',@@_)->response == CMD_MORE }
sub _QUIT      { shift->command('QUIT',@@_)->response == CMD_OK }
sub _SLAVE     { shift->command('SLAVE',@@_)->response == CMD_OK }
sub _STAT      { shift->command('STAT',@@_)->response == CMD_OK }
sub _MODE      { shift->command('MODE',@@_)->response == CMD_OK }
sub _XGTITLE   { shift->command('XGTITLE',@@_)->response == CMD_OK }
sub _XHDR      { shift->command('XHDR',@@_)->response == CMD_OK }
sub _XPAT      { shift->command('XPAT',@@_)->response == CMD_OK }
sub _XPATH     { shift->command('XPATH',@@_)->response == CMD_OK }
sub _XOVER     { shift->command('XOVER',@@_)->response == CMD_OK }
sub _XROVER    { shift->command('XROVER',@@_)->response == CMD_OK }
d690 4
a693 4
sub DESTROY
{
 my $nntp = shift;
 defined(fileno($nntp)) && $nntp->quit
d769 1
a769 1
will be a reference to an array containg the article requested, each
a1138 4

=for html <hr>

I<$Id: //depot/libnet/Net/NNTP.pm#18 $>
@


1.3
log
@Resolve conflicts for perl 5.8.2, remove old files, and add OpenBSD-specific scaffolding
@
text
@d17 1
a17 1
$VERSION = "2.22"; # $Id: //depot/libnet/Net/NNTP.pm#18 $
d24 8
a31 2
 my $host = shift if @@_ % 2;
 my %arg  = @@_;
d90 5
d726 2
a727 1
given two environment variables are checked, first C<NNTPSERVER> then
d734 5
d859 6
@


1.2
log
@From Andrushock, s/sucess/success/g
@
text
@d17 1
a17 1
$VERSION = "2.21"; # $Id: //depot/libnet/Net/NNTP.pm#15 $
d90 1
a90 1
 if(($nntp->code == 350 && $text =~ /^(\S+)/)
d885 4
d1120 1
a1120 1
I<$Id: //depot/libnet/Net/NNTP.pm#15 $>
@


1.1
log
@Initial revision
@
text
@d751 2
a752 2
and the result will be printed to it, on sucess a true value will be
returned. If C<FH> is not specified then the return value, on sucess,
@


1.1.1.1
log
@stock perl 5.8.0 from CPAN
@
text
@@


1.1.1.2
log
@perl 5.8.2 from CPAN
@
text
@d17 1
a17 1
$VERSION = "2.22"; # $Id: //depot/libnet/Net/NNTP.pm#18 $
d90 1
a90 1
 if((ref($nntp) and $nntp->code == 350 and $text =~ /^(\S+)/)
d751 2
a752 2
and the result will be printed to it, on success a true value will be
returned. If C<FH> is not specified then the return value, on success,
a884 4
The message, either sent via C<datasend> or as the C<MESSAGE>
parameter, must be in the format as described by RFC822 and must
contain From:, Newsgroups: and Subject: headers.

d1116 1
a1116 1
I<$Id: //depot/libnet/Net/NNTP.pm#18 $>
@


1.1.1.3
log
@Import of stock perl 5.8.5
@
text
@d17 1
a17 1
$VERSION = "2.23";
d24 2
a25 8
 my ($host,%arg);
 if (@@_ % 2) {
   $host = shift ;
   %arg  = @@_;
 } else {
   %arg = @@_;
   $host=delete $arg{Host};
 }
a83 5
sub host {
 my $me = shift;
 ${*$me}{'net_nntp_host'};
}

d715 1
a715 2
given then it may be passed as the C<Host> option described below. If no host is passed
then two environment variables are checked, first C<NNTPSERVER> then
a721 5
B<Host> - NNTP host to connect to. It may be a single scalar, as defined for
the C<PeerAddr> option in L<IO::Socket::INET>, or a reference to
an array with hosts to try in turn. The L</host> method will return the value
which was used to connect to the host.

a841 6

Authenticates to the server (using AUTHINFO USER / AUTHINFO PASS)
using the supplied username and password.  Please note that the
password is sent in clear text to the server.  This command should not
be used with valuable passwords unless the connection to the server is
somehow protected.
@


1.1.1.4
log
@import perl 5.10.0 from CPAN
@
text
@d17 1
a17 1
$VERSION = "2.24";
d20 15
d36 1
a36 13
sub new {
  my $self = shift;
  my $type = ref($self) || $self;
  my ($host, %arg);
  if (@@_ % 2) {
    $host = shift;
    %arg  = @@_;
  }
  else {
    %arg  = @@_;
    $host = delete $arg{Host};
  }
  my $obj;
d38 2
a39 1
  $host ||= $ENV{NNTPSERVER} || $ENV{NEWSHOST};
d41 10
a50 16
  my $hosts = defined $host ? [$host] : $NetConfig{nntp_hosts};

  @@{$hosts} = qw(news)
    unless @@{$hosts};

  my $h;
  foreach $h (@@{$hosts}) {
    $obj = $type->SUPER::new(
      PeerAddr => ($host = $h),
      PeerPort => $arg{Port} || 'nntp(119)',
      Proto => 'tcp',
      Timeout => defined $arg{Timeout}
      ? $arg{Timeout}
      : 120
      )
      and last;
d53 2
a54 2
  return undef
    unless defined $obj;
d56 1
a56 1
  ${*$obj}{'net_nntp_host'} = $host;
d58 2
a59 2
  $obj->autoflush(1);
  $obj->debug(exists $arg{Debug} ? $arg{Debug} : undef);
d61 4
a64 3
  unless ($obj->response() == CMD_OK) {
    $obj->close;
    return undef;
d67 2
a68 8
  my $c = $obj->code;
  my @@m = $obj->message;

  unless (exists $arg{Reader} && $arg{Reader} == 0) {

    # if server is INN and we have transfer rights the we are currently
    # talking to innd not nnrpd
    if ($obj->reader) {
d70 7
a76 2
      # If reader suceeds the we need to consider this code to determine postok
      $c = $obj->code;
d78 4
a81 4
    else {

      # I want to ignore this failure, so restore the previous status.
      $obj->set_status($c, \@@m);
d83 1
a83 1
  }
d85 1
a85 1
  ${*$obj}{'net_nntp_post'} = $c == 200 ? 1 : 0;
d87 1
a87 1
  $obj;
a89 1

d91 2
a92 2
  my $me = shift;
  ${*$me}{'net_nntp_host'};
d95 5
d101 2
a102 7
sub debug_text {
  my $nntp  = shift;
  my $inout = shift;
  my $text  = shift;

  if ( (ref($nntp) and $nntp->code == 350 and $text =~ /^(\S+)/)
    || ($text =~ /^(authinfo\s+pass)/io))
d104 1
a104 1
    $text = "$1 ....\n";
d107 1
a107 1
  $text;
d110 5
a114 5

sub postok {
  @@_ == 1 or croak 'usage: $nntp->postok()';
  my $nntp = shift;
  ${*$nntp}{'net_nntp_post'} || 0;
d117 5
d123 1
a123 6
sub article {
  @@_ >= 1 && @@_ <= 3 or croak 'usage: $nntp->article( [ MSGID ], [ FH ] )';
  my $nntp = shift;
  my @@fh;

  @@fh = (pop) if @@_ == 2 || (@@_ && (ref($_[0]) || ref(\$_[0]) eq 'GLOB'));
d125 1
a125 1
  $nntp->_ARTICLE(@@_)
a129 1

d131 2
a132 2
  @@_ >= 1 && @@_ <= 2 or croak 'usage: $nntp->articlefh( [ MSGID ] )';
  my $nntp = shift;
d134 2
a135 2
  return unless $nntp->_ARTICLE(@@_);
  return $nntp->tied_fh;
d138 4
d143 2
a144 6
sub authinfo {
  @@_ == 3 or croak 'usage: $nntp->authinfo( USER, PASS )';
  my ($nntp, $user, $pass) = @@_;

  $nntp->_AUTHINFO("USER",      $user) == CMD_MORE
    && $nntp->_AUTHINFO("PASS", $pass) == CMD_OK;
d147 4
d152 2
a153 6
sub authinfo_simple {
  @@_ == 3 or croak 'usage: $nntp->authinfo( USER, PASS )';
  my ($nntp, $user, $pass) = @@_;

  $nntp->_AUTHINFO('SIMPLE') == CMD_MORE
    && $nntp->command($user, $pass)->response == CMD_OK;
d156 5
d162 1
a162 6
sub body {
  @@_ >= 1 && @@_ <= 3 or croak 'usage: $nntp->body( [ MSGID ], [ FH ] )';
  my $nntp = shift;
  my @@fh;

  @@fh = (pop) if @@_ == 2 || (@@_ && ref($_[0]) || ref(\$_[0]) eq 'GLOB');
d164 1
a164 1
  $nntp->_BODY(@@_)
d169 13
d183 1
a183 14
sub bodyfh {
  @@_ >= 1 && @@_ <= 2 or croak 'usage: $nntp->bodyfh( [ MSGID ] )';
  my $nntp = shift;
  return unless $nntp->_BODY(@@_);
  return $nntp->tied_fh;
}


sub head {
  @@_ >= 1 && @@_ <= 3 or croak 'usage: $nntp->head( [ MSGID ], [ FH ] )';
  my $nntp = shift;
  my @@fh;

  @@fh = (pop) if @@_ == 2 || (@@_ && ref($_[0]) || ref(\$_[0]) eq 'GLOB');
d185 1
a185 1
  $nntp->_HEAD(@@_)
d190 6
a195 6

sub headfh {
  @@_ >= 1 && @@_ <= 2 or croak 'usage: $nntp->headfh( [ MSGID ] )';
  my $nntp = shift;
  return unless $nntp->_HEAD(@@_);
  return $nntp->tied_fh;
d198 4
d203 1
a203 5
sub nntpstat {
  @@_ == 1 || @@_ == 2 or croak 'usage: $nntp->nntpstat( [ MSGID ] )';
  my $nntp = shift;

  $nntp->_STAT(@@_) && $nntp->message =~ /(<[^>]+>)/o
d209 5
a213 4
sub group {
  @@_ == 1 || @@_ == 2 or croak 'usage: $nntp->group( [ GROUP ] )';
  my $nntp = shift;
  my $grp  = ${*$nntp}{'net_nntp_group'} || undef;
d215 2
a216 2
  return $grp
    unless (@@_ || wantarray);
d218 1
a218 1
  my $newgrp = shift;
d220 3
a222 3
  return wantarray ? () : undef
    unless $nntp->_GROUP($newgrp || $grp || "")
    && $nntp->message =~ /(\d+)\s+(\d+)\s+(\d+)\s+(\S+)/;
d224 1
a224 1
  my ($count, $first, $last, $group) = ($1, $2, $3, $4);
d226 2
a227 2
  # group may be replied as '(current group)'
  $group = ${*$nntp}{'net_nntp_group'}
d230 1
a230 1
  ${*$nntp}{'net_nntp_group'} = $group;
d232 2
a233 2
  wantarray
    ? ($count, $first, $last, $group)
d237 4
d242 1
a242 5
sub help {
  @@_ == 1 or croak 'usage: $nntp->help()';
  my $nntp = shift;

  $nntp->_HELP
d247 5
d253 1
a253 6
sub ihave {
  @@_ >= 2 or croak 'usage: $nntp->ihave( MESSAGE-ID [, MESSAGE ])';
  my $nntp = shift;
  my $mid  = shift;

  $nntp->_IHAVE($mid) && $nntp->datasend(@@_)
d258 4
d263 1
a263 5
sub last {
  @@_ == 1 or croak 'usage: $nntp->last()';
  my $nntp = shift;

  $nntp->_LAST && $nntp->message =~ /(<[^>]+>)/o
d268 4
d273 1
a273 5
sub list {
  @@_ == 1 or croak 'usage: $nntp->list()';
  my $nntp = shift;

  $nntp->_LIST
d278 6
d285 1
a285 7
sub newgroups {
  @@_ >= 2 or croak 'usage: $nntp->newgroups( SINCE [, DISTRIBUTIONS ])';
  my $nntp = shift;
  my $time = _timestr(shift);
  my $dist = shift || "";

  $dist = join(",", @@{$dist})
d288 1
a288 1
  $nntp->_NEWGROUPS($time, $dist)
d293 8
d302 2
a303 10
sub newnews {
  @@_ >= 2 && @@_ <= 4
    or croak 'usage: $nntp->newnews( SINCE [, GROUPS [, DISTRIBUTIONS ]])';
  my $nntp = shift;
  my $time = _timestr(shift);
  my $grp  = @@_ ? shift: $nntp->group;
  my $dist = shift || "";

  $grp ||= "*";
  $grp = join(",", @@{$grp})
d306 1
a306 1
  $dist = join(",", @@{$dist})
d309 1
a309 1
  $nntp->_NEWNEWS($grp, $time, $dist)
d314 4
d319 1
a319 5
sub next {
  @@_ == 1 or croak 'usage: $nntp->next()';
  my $nntp = shift;

  $nntp->_NEXT && $nntp->message =~ /(<[^>]+>)/o
d324 4
d329 1
a329 5
sub post {
  @@_ >= 1 or croak 'usage: $nntp->post( [ MESSAGE ] )';
  my $nntp = shift;

  $nntp->_POST() && $nntp->datasend(@@_)
a333 1

d340 4
d345 2
a346 6
sub quit {
  @@_ == 1 or croak 'usage: $nntp->quit()';
  my $nntp = shift;

  $nntp->_QUIT;
  $nntp->close;
d349 4
d354 1
a354 5
sub slave {
  @@_ == 1 or croak 'usage: $nntp->slave()';
  my $nntp = shift;

  $nntp->_SLAVE;
d361 4
d366 1
a366 5
sub active {
  @@_ == 1 || @@_ == 2 or croak 'usage: $nntp->active( [ PATTERN ] )';
  my $nntp = shift;

  $nntp->_LIST('ACTIVE', @@_)
d371 4
d376 1
a376 5
sub active_times {
  @@_ == 1 or croak 'usage: $nntp->active_times()';
  my $nntp = shift;

  $nntp->_LIST('ACTIVE.TIMES')
d381 4
d386 1
a386 5
sub distributions {
  @@_ == 1 or croak 'usage: $nntp->distributions()';
  my $nntp = shift;

  $nntp->_LIST('DISTRIBUTIONS')
d391 4
d396 2
a397 6
sub distribution_patterns {
  @@_ == 1 or croak 'usage: $nntp->distributions()';
  my $nntp = shift;

  my $arr;
  local $_;
d399 2
a400 3
  $nntp->_LIST('DISTRIB.PATS')
    && ($arr = $nntp->read_until_dot)
    ? [grep { /^\d/ && (chomp, $_ = [split /:/]) } @@$arr]
d404 4
d409 1
a409 5
sub newsgroups {
  @@_ == 1 || @@_ == 2 or croak 'usage: $nntp->newsgroups( [ PATTERN ] )';
  my $nntp = shift;

  $nntp->_LIST('NEWSGROUPS', @@_)
d414 14
d429 1
a429 5
sub overview_fmt {
  @@_ == 1 or croak 'usage: $nntp->overview_fmt()';
  my $nntp = shift;

  $nntp->_LIST('OVERVIEW.FMT')
d434 4
d439 1
a439 5
sub subscriptions {
  @@_ == 1 or croak 'usage: $nntp->subscriptions()';
  my $nntp = shift;

  $nntp->_LIST('SUBSCRIPTIONS')
d444 4
d449 1
a449 15
sub listgroup {
  @@_ == 1 || @@_ == 2 or croak 'usage: $nntp->listgroup( [ GROUP ] )';
  my $nntp = shift;

  $nntp->_LISTGROUP(@@_)
    ? $nntp->_articlelist
    : undef;
}


sub reader {
  @@_ == 1 or croak 'usage: $nntp->reader()';
  my $nntp = shift;

  $nntp->_MODE('READER');
d452 4
d457 1
a457 5
sub xgtitle {
  @@_ == 1 || @@_ == 2 or croak 'usage: $nntp->xgtitle( [ PATTERN ] )';
  my $nntp = shift;

  $nntp->_XGTITLE(@@_)
d462 30
d493 1
a493 31
sub xhdr {
  @@_ >= 2 && @@_ <= 4 or croak 'usage: $nntp->xhdr( HEADER, [ MESSAGE-SPEC ] )';
  my $nntp = shift;
  my $hdr  = shift;
  my $arg  = _msg_arg(@@_);

  $nntp->_XHDR($hdr, $arg)
    ? $nntp->_description
    : undef;
}


sub xover {
  @@_ == 2 || @@_ == 3 or croak 'usage: $nntp->xover( MESSAGE-SPEC )';
  my $nntp = shift;
  my $arg  = _msg_arg(@@_);

  $nntp->_XOVER($arg)
    ? $nntp->_fieldlist
    : undef;
}


sub xpat {
  @@_ == 4 || @@_ == 5 or croak '$nntp->xpat( HEADER, PATTERN, MESSAGE-SPEC )';
  my $nntp = shift;
  my $hdr  = shift;
  my $pat  = shift;
  my $arg  = _msg_arg(@@_);

  $pat = join(" ", @@$pat)
d496 3
a498 3
  $nntp->_XPAT($hdr, $arg, $pat)
    ? $nntp->_description
    : undef;
d501 4
d506 2
a507 6
sub xpath {
  @@_ == 2 or croak 'usage: $nntp->xpath( MESSAGE-ID )';
  my ($nntp, $mid) = @@_;

  return undef
    unless $nntp->_XPATH($mid);
d509 2
a510 3
  my $m;
  ($m = $nntp->message) =~ s/^\d+\s+//o;
  my @@p = split /\s+/, $m;
d512 1
a512 1
  wantarray ? @@p : $p[0];
d515 5
d521 3
a523 8
sub xrover {
  @@_ == 2 || @@_ == 3 or croak 'usage: $nntp->xrover( MESSAGE-SPEC )';
  my $nntp = shift;
  my $arg  = _msg_arg(@@_);

  $nntp->_XROVER($arg)
    ? $nntp->_description
    : undef;
d526 4
d531 2
a532 7
sub date {
  @@_ == 1 or croak 'usage: $nntp->date()';
  my $nntp = shift;

  $nntp->_DATE
    && $nntp->message =~ /(\d{4})(\d\d)(\d\d)(\d\d)(\d\d)(\d\d)/
    ? timegm($6, $5, $4, $3, $2 - 1, $1 - 1900)
d541 4
d546 6
a551 8
sub _msg_arg {
  my $spec = shift;
  my $arg  = "";

  if (@@_) {
    carp "Depriciated passing of two message numbers, " . "pass a reference"
      if $^W;
    $spec = [$spec, $_[0]];
d554 11
a564 8
  if (defined $spec) {
    if (ref($spec)) {
      $arg = $spec->[0];
      if (defined $spec->[1]) {
        $arg .= "-"
          if $spec->[1] != $spec->[0];
        $arg .= $spec->[1]
          if $spec->[1] > $spec->[0];
d567 3
a569 2
    else {
      $arg = $spec;
d573 1
a573 1
  $arg;
d576 14
d591 2
a592 8
sub _timestr {
  my $time = shift;
  my @@g    = reverse((gmtime($time))[0 .. 5]);
  $g[1] += 1;
  $g[0] %= 100;
  sprintf "%02d%02d%02d %02d%02d%02d GMT", @@g;
}

d594 4
a597 11
sub _grouplist {
  my $nntp = shift;
  my $arr  = $nntp->read_until_dot
    or return undef;

  my $hash = {};
  my $ln;

  foreach $ln (@@$arr) {
    my @@a = split(/[\s\n]+/, $ln);
    $hash->{$a[0]} = [@@a[1, 2, 3]];
d600 1
a600 1
  $hash;
d603 5
d609 2
a610 4
sub _fieldlist {
  my $nntp = shift;
  my $arr  = $nntp->read_until_dot
    or return undef;
d612 5
a616 7
  my $hash = {};
  my $ln;

  foreach $ln (@@$arr) {
    my @@a = split(/[\t\n]/, $ln);
    my $m = shift @@a;
    $hash->{$m} = [@@a];
d619 1
a619 1
  $hash;
d622 4
d627 1
a627 5
sub _articlelist {
  my $nntp = shift;
  my $arr  = $nntp->read_until_dot;

  chomp(@@$arr)
d630 1
a630 1
  $arr;
d633 5
d639 2
a640 4
sub _description {
  my $nntp = shift;
  my $arr  = $nntp->read_until_dot
    or return undef;
d642 3
a644 2
  my $hash = {};
  my $ln;
d646 2
a647 5
  foreach $ln (@@$arr) {
    chomp($ln);

    $hash->{$1} = $ln
      if $ln =~ s/^\s*(\S+)\s*//o;
d650 1
a650 1
  $hash;
d658 3
a660 4

sub _ARTICLE  { shift->command('ARTICLE',  @@_)->response == CMD_OK }
sub _AUTHINFO { shift->command('AUTHINFO', @@_)->response }
sub _BODY     { shift->command('BODY',     @@_)->response == CMD_OK }
d662 4
a665 4
sub _GROUP     { shift->command('GROUP', @@_)->response == CMD_OK }
sub _HEAD      { shift->command('HEAD', @@_)->response == CMD_OK }
sub _HELP      { shift->command('HELP', @@_)->response == CMD_INFO }
sub _IHAVE     { shift->command('IHAVE', @@_)->response == CMD_MORE }
d667 4
a670 4
sub _LIST      { shift->command('LIST', @@_)->response == CMD_OK }
sub _LISTGROUP { shift->command('LISTGROUP', @@_)->response == CMD_OK }
sub _NEWGROUPS { shift->command('NEWGROUPS', @@_)->response == CMD_OK }
sub _NEWNEWS   { shift->command('NEWNEWS', @@_)->response == CMD_OK }
d672 11
a682 11
sub _POST      { shift->command('POST', @@_)->response == CMD_MORE }
sub _QUIT      { shift->command('QUIT', @@_)->response == CMD_OK }
sub _SLAVE     { shift->command('SLAVE', @@_)->response == CMD_OK }
sub _STAT      { shift->command('STAT', @@_)->response == CMD_OK }
sub _MODE      { shift->command('MODE', @@_)->response == CMD_OK }
sub _XGTITLE   { shift->command('XGTITLE', @@_)->response == CMD_OK }
sub _XHDR      { shift->command('XHDR', @@_)->response == CMD_OK }
sub _XPAT      { shift->command('XPAT', @@_)->response == CMD_OK }
sub _XPATH     { shift->command('XPATH', @@_)->response == CMD_OK }
sub _XOVER     { shift->command('XOVER', @@_)->response == CMD_OK }
sub _XROVER    { shift->command('XROVER', @@_)->response == CMD_OK }
d691 4
a694 4

sub DESTROY {
  my $nntp = shift;
  defined(fileno($nntp)) && $nntp->quit;
d770 1
a770 1
will be a reference to an array containing the article requested, each
d1140 4
@


