head	1.2;
access;
symbols
	OPENBSD_4_8:1.1.1.3.0.8
	OPENBSD_4_8_BASE:1.1.1.3
	OPENBSD_4_7:1.1.1.3.0.4
	OPENBSD_4_7_BASE:1.1.1.3
	PERL_5_10_1:1.1.1.3
	OPENBSD_4_6:1.1.1.3.0.6
	OPENBSD_4_6_BASE:1.1.1.3
	OPENBSD_4_5:1.1.1.3.0.2
	OPENBSD_4_5_BASE:1.1.1.3
	PERL_5_10_0:1.1.1.3
	OPENBSD_4_4:1.1.1.2.0.18
	OPENBSD_4_4_BASE:1.1.1.2
	OPENBSD_4_3:1.1.1.2.0.16
	OPENBSD_4_3_BASE:1.1.1.2
	OPENBSD_4_2:1.1.1.2.0.14
	OPENBSD_4_2_BASE:1.1.1.2
	OPENBSD_4_1:1.1.1.2.0.12
	OPENBSD_4_1_BASE:1.1.1.2
	OPENBSD_4_0:1.1.1.2.0.10
	OPENBSD_4_0_BASE:1.1.1.2
	PERL_5_8_8:1.1.1.2
	OPENBSD_3_9:1.1.1.2.0.8
	OPENBSD_3_9_BASE:1.1.1.2
	OPENBSD_3_8:1.1.1.2.0.6
	OPENBSD_3_8_BASE:1.1.1.2
	OPENBSD_3_7:1.1.1.2.0.4
	OPENBSD_3_7_BASE:1.1.1.2
	PERL_5_8_6:1.1.1.2
	OPENBSD_3_6:1.1.1.2.0.2
	OPENBSD_3_6_BASE:1.1.1.2
	PERL_5_8_5:1.1.1.2
	PERL_5_8_3:1.1.1.1
	OPENBSD_3_5:1.1.1.1.0.6
	OPENBSD_3_5_BASE:1.1.1.1
	PERL_5_8_2:1.1.1.1
	OPENBSD_3_4:1.1.1.1.0.4
	OPENBSD_3_4_BASE:1.1.1.1
	OPENBSD_3_3:1.1.1.1.0.2
	OPENBSD_3_3_BASE:1.1.1.1
	PERL_5_8_0:1.1.1.1
	CPAN:1.1.1;
locks; strict;
comment	@# @;
expand	@o@;


1.2
date	2010.09.24.14.59.46;	author millert;	state dead;
branches;
next	1.1;

1.1
date	2002.10.27.22.15.01;	author millert;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	2002.10.27.22.15.01;	author millert;	state Exp;
branches;
next	1.1.1.2;

1.1.1.2
date	2004.08.09.17.47.04;	author millert;	state Exp;
branches;
next	1.1.1.3;

1.1.1.3
date	2008.09.29.17.18.40;	author millert;	state Exp;
branches;
next	;


desc
@@


1.2
log
@remove files no longer in perl 5.12.2 (or that have moved)
@
text
@# Net::Time.pm
#
# Copyright (c) 1995-1998 Graham Barr <gbarr@@pobox.com>. All rights reserved.
# This program is free software; you can redistribute it and/or
# modify it under the same terms as Perl itself.

package Net::Time;

use strict;
use vars qw($VERSION @@ISA @@EXPORT_OK $TIMEOUT);
use Carp;
use IO::Socket;
require Exporter;
use Net::Config;
use IO::Select;

@@ISA = qw(Exporter);
@@EXPORT_OK = qw(inet_time inet_daytime);

$VERSION = "2.09"; # $Id: //depot/libnet/Net/Time.pm#9 $

$TIMEOUT = 120;

sub _socket
{
 my($pname,$pnum,$host,$proto,$timeout) = @@_;

 $proto ||= 'udp';

 my $port = (getservbyname($pname, $proto))[2] || $pnum;

 my $hosts = defined $host ? [ $host ] : $NetConfig{$pname . '_hosts'};

 my $me;

 foreach $host (@@$hosts)
  {
   $me = IO::Socket::INET->new(PeerAddr => $host,
    	    	    	       PeerPort => $port,
    	    	    	       Proto    => $proto
    	    	    	      ) and last;
  }

 return unless $me;

 $me->send("\n")
	if $proto eq 'udp';

 $timeout = $TIMEOUT
	unless defined $timeout;

 IO::Select->new($me)->can_read($timeout)
	? $me
	: undef;
}

sub inet_time
{
 my $s = _socket('time',37,@@_) || return undef;
 my $buf = '';
 my $offset = 0 | 0;

 return undef
	unless $s->recv($buf, length(pack("N",0)));

 # unpack, we | 0 to ensure we have an unsigned
 my $time = (unpack("N",$buf))[0] | 0;

 # the time protocol return time in seconds since 1900, convert
 # it to a the required format

 if($^O eq "MacOS") {
   # MacOS return seconds since 1904, 1900 was not a leap year.
   $offset = (4 * 31536000) | 0;
 }
 else {
   # otherwise return seconds since 1972, there were 17 leap years between
   # 1900 and 1972
   $offset =  (70 * 31536000 + 17 * 86400) | 0;
 }

 $time - $offset;
}

sub inet_daytime
{
 my $s = _socket('daytime',13,@@_) || return undef;
 my $buf = '';

 $s->recv($buf, 1024) ? $buf
    	              : undef;
}

1;

__END__

=head1 NAME

Net::Time - time and daytime network client interface

=head1 SYNOPSIS

    use Net::Time qw(inet_time inet_daytime);

    print inet_time();		# use default host from Net::Config
    print inet_time('localhost');
    print inet_time('localhost', 'tcp');

    print inet_daytime();	# use default host from Net::Config
    print inet_daytime('localhost');
    print inet_daytime('localhost', 'tcp');

=head1 DESCRIPTION

C<Net::Time> provides subroutines that obtain the time on a remote machine.

=over 4

=item inet_time ( [HOST [, PROTOCOL [, TIMEOUT]]])

Obtain the time on C<HOST>, or some default host if C<HOST> is not given
or not defined, using the protocol as defined in RFC868. The optional
argument C<PROTOCOL> should define the protocol to use, either C<tcp> or
C<udp>. The result will be a time value in the same units as returned
by time() or I<undef> upon failure.

=item inet_daytime ( [HOST [, PROTOCOL [, TIMEOUT]]])

Obtain the time on C<HOST>, or some default host if C<HOST> is not given
or not defined, using the protocol as defined in RFC867. The optional
argument C<PROTOCOL> should define the protocol to use, either C<tcp> or
C<udp>. The result will be an ASCII string or I<undef> upon failure.

=back

=head1 AUTHOR

Graham Barr <gbarr@@pobox.com>

=head1 COPYRIGHT

Copyright (c) 1995-1998 Graham Barr. All rights reserved.
This program is free software; you can redistribute it and/or modify
it under the same terms as Perl itself.

=for html <hr>

I<$Id: //depot/libnet/Net/Time.pm#9 $>

=cut
@


1.1
log
@Initial revision
@
text
@@


1.1.1.1
log
@stock perl 5.8.0 from CPAN
@
text
@@


1.1.1.2
log
@Import of stock perl 5.8.5
@
text
@d3 1
a3 1
# Copyright (c) 1995-2004 Graham Barr <gbarr@@pobox.com>. All rights reserved.
d20 1
a20 1
$VERSION = "2.10";
d64 1
a64 1
	unless defined $s->recv($buf, length(pack("N",0)));
d90 1
a90 1
 defined($s->recv($buf, 1024)) ? $buf
d143 1
a143 1
Copyright (c) 1995-2004 Graham Barr. All rights reserved.
d146 4
@


1.1.1.3
log
@import perl 5.10.0 from CPAN
@
text
@d17 1
a17 1
@@ISA       = qw(Exporter);
d24 3
d28 1
a28 2
sub _socket {
  my ($pname, $pnum, $host, $proto, $timeout) = @@_;
d30 1
a30 1
  $proto ||= 'udp';
d32 1
a32 1
  my $port = (getservbyname($pname, $proto))[2] || $pnum;
d34 1
a34 1
  my $hosts = defined $host ? [$host] : $NetConfig{$pname . '_hosts'};
d36 6
a41 9
  my $me;

  foreach $host (@@$hosts) {
    $me = IO::Socket::INET->new(
      PeerAddr => $host,
      PeerPort => $port,
      Proto    => $proto
      )
      and last;
d44 1
a44 1
  return unless $me;
d46 2
a47 2
  $me->send("\n")
    if $proto eq 'udp';
d49 2
a50 2
  $timeout = $TIMEOUT
    unless defined $timeout;
d52 3
a54 3
  IO::Select->new($me)->can_read($timeout)
    ? $me
    : undef;
d57 24
d82 1
a82 27
sub inet_time {
  my $s      = _socket('time', 37, @@_) || return undef;
  my $buf    = '';
  my $offset = 0 | 0;

  return undef
    unless defined $s->recv($buf, length(pack("N", 0)));

  # unpack, we | 0 to ensure we have an unsigned
  my $time = (unpack("N", $buf))[0] | 0;

  # the time protocol return time in seconds since 1900, convert
  # it to a the required format

  if ($^O eq "MacOS") {

    # MacOS return seconds since 1904, 1900 was not a leap year.
    $offset = (4 * 31536000) | 0;
  }
  else {

    # otherwise return seconds since 1972, there were 17 leap years between
    # 1900 and 1972
    $offset = (70 * 31536000 + 17 * 86400) | 0;
  }

  $time - $offset;
d85 4
d90 2
a91 7
sub inet_daytime {
  my $s   = _socket('daytime', 13, @@_) || return undef;
  my $buf = '';

  defined($s->recv($buf, 1024))
    ? $buf
    : undef;
@


