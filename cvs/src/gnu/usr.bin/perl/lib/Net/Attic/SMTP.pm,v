head	1.2;
access;
symbols
	OPENBSD_4_8:1.1.1.4.0.8
	OPENBSD_4_8_BASE:1.1.1.4
	OPENBSD_4_7:1.1.1.4.0.4
	OPENBSD_4_7_BASE:1.1.1.4
	PERL_5_10_1:1.1.1.4
	OPENBSD_4_6:1.1.1.4.0.6
	OPENBSD_4_6_BASE:1.1.1.4
	OPENBSD_4_5:1.1.1.4.0.2
	OPENBSD_4_5_BASE:1.1.1.4
	PERL_5_10_0:1.1.1.4
	OPENBSD_4_4:1.1.1.3.0.18
	OPENBSD_4_4_BASE:1.1.1.3
	OPENBSD_4_3:1.1.1.3.0.16
	OPENBSD_4_3_BASE:1.1.1.3
	OPENBSD_4_2:1.1.1.3.0.14
	OPENBSD_4_2_BASE:1.1.1.3
	OPENBSD_4_1:1.1.1.3.0.12
	OPENBSD_4_1_BASE:1.1.1.3
	OPENBSD_4_0:1.1.1.3.0.10
	OPENBSD_4_0_BASE:1.1.1.3
	PERL_5_8_8:1.1.1.3
	OPENBSD_3_9:1.1.1.3.0.8
	OPENBSD_3_9_BASE:1.1.1.3
	OPENBSD_3_8:1.1.1.3.0.6
	OPENBSD_3_8_BASE:1.1.1.3
	OPENBSD_3_7:1.1.1.3.0.4
	OPENBSD_3_7_BASE:1.1.1.3
	PERL_5_8_6:1.1.1.3
	OPENBSD_3_6:1.1.1.3.0.2
	OPENBSD_3_6_BASE:1.1.1.3
	PERL_5_8_5:1.1.1.3
	PERL_5_8_3:1.1.1.2
	OPENBSD_3_5:1.1.1.2.0.2
	OPENBSD_3_5_BASE:1.1.1.2
	PERL_5_8_2:1.1.1.2
	OPENBSD_3_4:1.1.1.1.0.4
	OPENBSD_3_4_BASE:1.1.1.1
	OPENBSD_3_3:1.1.1.1.0.2
	OPENBSD_3_3_BASE:1.1.1.1
	PERL_5_8_0:1.1.1.1
	CPAN:1.1.1;
locks; strict;
comment	@# @;
expand	@o@;


1.2
date	2010.09.24.14.59.46;	author millert;	state dead;
branches;
next	1.1;

1.1
date	2002.10.27.22.15.01;	author millert;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	2002.10.27.22.15.01;	author millert;	state Exp;
branches;
next	1.1.1.2;

1.1.1.2
date	2003.12.03.02.44.05;	author millert;	state Exp;
branches;
next	1.1.1.3;

1.1.1.3
date	2004.08.09.17.47.04;	author millert;	state Exp;
branches;
next	1.1.1.4;

1.1.1.4
date	2008.09.29.17.18.40;	author millert;	state Exp;
branches;
next	;


desc
@@


1.2
log
@remove files no longer in perl 5.12.2 (or that have moved)
@
text
@# Net::SMTP.pm
#
# Copyright (c) 1995-1997 Graham Barr <gbarr@@pobox.com>. All rights reserved.
# This program is free software; you can redistribute it and/or
# modify it under the same terms as Perl itself.

package Net::SMTP;

require 5.001;

use strict;
use vars qw($VERSION @@ISA);
use Socket 1.3;
use Carp;
use IO::Socket;
use Net::Cmd;
use Net::Config;

$VERSION = "2.24"; # $Id: //depot/libnet/Net/SMTP.pm#25 $

@@ISA = qw(Net::Cmd IO::Socket::INET);

sub new
{
 my $self = shift;
 my $type = ref($self) || $self;
 my $host = shift if @@_ % 2;
 my %arg  = @@_; 
 my $hosts = defined $host ? [ $host ] : $NetConfig{smtp_hosts};
 my $obj;

 my $h;
 foreach $h (@@{$hosts})
  {
   $obj = $type->SUPER::new(PeerAddr => ($host = $h), 
			    PeerPort => $arg{Port} || 'smtp(25)',
			    LocalAddr => $arg{LocalAddr},
			    LocalPort => $arg{LocalPort},
			    Proto    => 'tcp',
			    Timeout  => defined $arg{Timeout}
						? $arg{Timeout}
						: 120
			   ) and last;
  }

 return undef
	unless defined $obj;

 $obj->autoflush(1);

 $obj->debug(exists $arg{Debug} ? $arg{Debug} : undef);

 unless ($obj->response() == CMD_OK)
  {
   $obj->close();
   return undef;
  }

 ${*$obj}{'net_smtp_host'} = $host;

 (${*$obj}{'net_smtp_banner'}) = $obj->message;
 (${*$obj}{'net_smtp_domain'}) = $obj->message =~ /\A\s*(\S+)/;

 unless($obj->hello($arg{Hello} || ""))
  {
   $obj->close();
   return undef;
  }

 $obj;
}

##
## User interface methods
##

sub banner
{
 my $me = shift;

 return ${*$me}{'net_smtp_banner'} || undef;
}

sub domain
{
 my $me = shift;

 return ${*$me}{'net_smtp_domain'} || undef;
}

sub etrn {
    my $self = shift;
    defined($self->supports('ETRN',500,["Command unknown: 'ETRN'"])) &&
	$self->_ETRN(@@_);
}

sub auth {
    my ($self, $username, $password) = @@_;

    require MIME::Base64;
    require Authen::SASL;

    my $mechanisms = $self->supports('AUTH',500,["Command unknown: 'AUTH'"]);
    return unless defined $mechanisms;

    my $sasl;

    if (ref($username) and UNIVERSAL::isa($username,'Authen::SASL')) {
      $sasl = $username;
      $sasl->mechanism($mechanisms);
    }
    else {
      die "auth(username, password)" if not length $username;
      $sasl = Authen::SASL->new(mechanism=> $mechanisms,
				callback => { user => $username,
                                              pass => $password,
					      authname => $username,
                                            });
    }

    # We should probably allow the user to pass the host, but I don't
    # currently know and SASL mechanisms that are used by smtp that need it
    my $client = $sasl->client_new('smtp',${*$self}{'net_smtp_host'},0);
    my $str    = $client->client_start;
    # We dont support sasl mechanisms that encrypt the socket traffic.
    # todo that we would really need to change the ISA hierarchy
    # so we dont inherit from IO::Socket, but instead hold it in an attribute

    my @@cmd = ("AUTH", $client->mechanism, MIME::Base64::encode_base64($str,''));
    my $code;

    while (($code = $self->command(@@cmd)->response()) == CMD_MORE) {
      @@cmd = (MIME::Base64::encode_base64(
	$client->client_step(
	  MIME::Base64::decode_base64(
	    ($self->message)[0]
	  )
	), ''
      ));
    }

    $code == CMD_OK;
}

sub hello
{
 my $me = shift;
 my $domain = shift || "localhost.localdomain";
 my $ok = $me->_EHLO($domain);
 my @@msg = $me->message;

 if($ok)
  {
   my $h = ${*$me}{'net_smtp_esmtp'} = {};
   my $ln;
   foreach $ln (@@msg) {
     $h->{uc $1} = $2
	if $ln =~ /(\w+)\b[= \t]*([^\n]*)/;
    }
  }
 elsif($me->status == CMD_ERROR) 
  {
   @@msg = $me->message
	if $ok = $me->_HELO($domain);
  }

 $ok && $msg[0] =~ /\A\s*(\S+)/
	? $1
	: undef;
}

sub supports {
    my $self = shift;
    my $cmd = uc shift;
    return ${*$self}{'net_smtp_esmtp'}->{$cmd}
	if exists ${*$self}{'net_smtp_esmtp'}->{$cmd};
    $self->set_status(@@_)
	if @@_;
    return;
}

sub _addr {
  my $addr = shift;
  $addr = "" unless defined $addr;
  $addr =~ s/^\s*<?\s*|\s*>?\s*$//sg;
  "<$addr>";
}

sub mail
{
 my $me = shift;
 my $addr = _addr(shift);
 my $opts = "";

 if(@@_)
  {
   my %opt = @@_;
   my($k,$v);

   if(exists ${*$me}{'net_smtp_esmtp'})
    {
     my $esmtp = ${*$me}{'net_smtp_esmtp'};

     if(defined($v = delete $opt{Size}))
      {
       if(exists $esmtp->{SIZE})
        {
         $opts .= sprintf " SIZE=%d", $v + 0
        }
       else
        {
	 carp 'Net::SMTP::mail: SIZE option not supported by host';
        }
      }

     if(defined($v = delete $opt{Return}))
      {
       if(exists $esmtp->{DSN})
        {
	 $opts .= " RET=" . uc $v
        }
       else
        {
	 carp 'Net::SMTP::mail: DSN option not supported by host';
        }
      }

     if(defined($v = delete $opt{Bits}))
      {
       if(exists $esmtp->{'8BITMIME'})
        {
	 $opts .= $v == 8 ? " BODY=8BITMIME" : " BODY=7BIT"
        }
       else
        {
	 carp 'Net::SMTP::mail: 8BITMIME option not supported by host';
        }
      }

     if(defined($v = delete $opt{Transaction}))
      {
       if(exists $esmtp->{CHECKPOINT})
        {
	 $opts .= " TRANSID=" . _addr($v);
        }
       else
        {
	 carp 'Net::SMTP::mail: CHECKPOINT option not supported by host';
        }
      }

     if(defined($v = delete $opt{Envelope}))
      {
       if(exists $esmtp->{DSN})
        {
	 $v =~ s/([^\041-\176]|=|\+)/sprintf "+%02x", ord($1)/sge;
	 $opts .= " ENVID=$v"
        }
       else
        {
	 carp 'Net::SMTP::mail: DSN option not supported by host';
        }
      }

     carp 'Net::SMTP::recipient: unknown option(s) '
		. join(" ", keys %opt)
		. ' - ignored'
	if scalar keys %opt;
    }
   else
    {
     carp 'Net::SMTP::mail: ESMTP not supported by host - options discarded :-(';
    }
  }

 $me->_MAIL("FROM:".$addr.$opts);
}

sub send	  { shift->_SEND("FROM:" . _addr($_[0])) }
sub send_or_mail  { shift->_SOML("FROM:" . _addr($_[0])) }
sub send_and_mail { shift->_SAML("FROM:" . _addr($_[0])) }

sub reset
{
 my $me = shift;

 $me->dataend()
	if(exists ${*$me}{'net_smtp_lastch'});

 $me->_RSET();
}


sub recipient
{
 my $smtp = shift;
 my $opts = "";
 my $skip_bad = 0;

 if(@@_ && ref($_[-1]))
  {
   my %opt = %{pop(@@_)};
   my $v;

   $skip_bad = delete $opt{'SkipBad'};

   if(exists ${*$smtp}{'net_smtp_esmtp'})
    {
     my $esmtp = ${*$smtp}{'net_smtp_esmtp'};

     if(defined($v = delete $opt{Notify}))
      {
       if(exists $esmtp->{DSN})
        {
	 $opts .= " NOTIFY=" . join(",",map { uc $_ } @@$v)
        }
       else
        {
	 carp 'Net::SMTP::recipient: DSN option not supported by host';
        }
      }

     carp 'Net::SMTP::recipient: unknown option(s) '
		. join(" ", keys %opt)
		. ' - ignored'
	if scalar keys %opt;
    }
   elsif(%opt)
    {
     carp 'Net::SMTP::recipient: ESMTP not supported by host - options discarded :-(';
    }
  }

 my @@ok;
 my $addr;
 foreach $addr (@@_) 
  {
    if($smtp->_RCPT("TO:" . _addr($addr) . $opts)) {
      push(@@ok,$addr) if $skip_bad;
    }
    elsif(!$skip_bad) {
      return 0;
    }
  }

 return $skip_bad ? @@ok : 1;
}

BEGIN {
  *to  = \&recipient;
  *cc  = \&recipient;
  *bcc = \&recipient;
}

sub data
{
 my $me = shift;

 my $ok = $me->_DATA() && $me->datasend(@@_);

 $ok && @@_ ? $me->dataend
	   : $ok;
}

sub datafh {
  my $me = shift;
  return unless $me->_DATA();
  return $me->tied_fh;
}

sub expand
{
 my $me = shift;

 $me->_EXPN(@@_) ? ($me->message)
		: ();
}


sub verify { shift->_VRFY(@@_) }

sub help
{
 my $me = shift;

 $me->_HELP(@@_) ? scalar $me->message
	        : undef;
}

sub quit
{
 my $me = shift;

 $me->_QUIT;
 $me->close;
}

sub DESTROY
{
# ignore
}

##
## RFC821 commands
##

sub _EHLO { shift->command("EHLO", @@_)->response()  == CMD_OK }   
sub _HELO { shift->command("HELO", @@_)->response()  == CMD_OK }   
sub _MAIL { shift->command("MAIL", @@_)->response()  == CMD_OK }   
sub _RCPT { shift->command("RCPT", @@_)->response()  == CMD_OK }   
sub _SEND { shift->command("SEND", @@_)->response()  == CMD_OK }   
sub _SAML { shift->command("SAML", @@_)->response()  == CMD_OK }   
sub _SOML { shift->command("SOML", @@_)->response()  == CMD_OK }   
sub _VRFY { shift->command("VRFY", @@_)->response()  == CMD_OK }   
sub _EXPN { shift->command("EXPN", @@_)->response()  == CMD_OK }   
sub _HELP { shift->command("HELP", @@_)->response()  == CMD_OK }   
sub _RSET { shift->command("RSET")->response()	    == CMD_OK }   
sub _NOOP { shift->command("NOOP")->response()	    == CMD_OK }   
sub _QUIT { shift->command("QUIT")->response()	    == CMD_OK }   
sub _DATA { shift->command("DATA")->response()	    == CMD_MORE } 
sub _TURN { shift->unsupported(@@_); } 			   	  
sub _ETRN { shift->command("ETRN", @@_)->response()  == CMD_OK }
sub _AUTH { shift->command("AUTH", @@_)->response()  == CMD_OK }   

1;

__END__

=head1 NAME

Net::SMTP - Simple Mail Transfer Protocol Client

=head1 SYNOPSIS

    use Net::SMTP;

    # Constructors
    $smtp = Net::SMTP->new('mailhost');
    $smtp = Net::SMTP->new('mailhost', Timeout => 60);

=head1 DESCRIPTION

This module implements a client interface to the SMTP and ESMTP
protocol, enabling a perl5 application to talk to SMTP servers. This
documentation assumes that you are familiar with the concepts of the
SMTP protocol described in RFC821.

A new Net::SMTP object must be created with the I<new> method. Once
this has been done, all SMTP commands are accessed through this object.

The Net::SMTP class is a subclass of Net::Cmd and IO::Socket::INET.

=head1 EXAMPLES

This example prints the mail domain name of the SMTP server known as mailhost:

    #!/usr/local/bin/perl -w

    use Net::SMTP;

    $smtp = Net::SMTP->new('mailhost');
    print $smtp->domain,"\n";
    $smtp->quit;

This example sends a small message to the postmaster at the SMTP server
known as mailhost:

    #!/usr/local/bin/perl -w

    use Net::SMTP;

    $smtp = Net::SMTP->new('mailhost');

    $smtp->mail($ENV{USER});
    $smtp->to('postmaster');

    $smtp->data();
    $smtp->datasend("To: postmaster\n");
    $smtp->datasend("\n");
    $smtp->datasend("A simple test message\n");
    $smtp->dataend();

    $smtp->quit;

=head1 CONSTRUCTOR

=over 4

=item new Net::SMTP [ HOST, ] [ OPTIONS ]

This is the constructor for a new Net::SMTP object. C<HOST> is the
name of the remote host to which an SMTP connection is required.

If C<HOST> is not given, then the C<SMTP_Host> specified in C<Net::Config>
will be used.

C<OPTIONS> are passed in a hash like fashion, using key and value pairs.
Possible options are:

B<Hello> - SMTP requires that you identify yourself. This option
specifies a string to pass as your mail domain. If not
given a guess will be taken.

B<LocalAddr> and B<LocalPort> - These parameters are passed directly
to IO::Socket to allow binding the socket to a local port.

B<Timeout> - Maximum time, in seconds, to wait for a response from the
SMTP server (default: 120)

B<Debug> - Enable debugging information


Example:


    $smtp = Net::SMTP->new('mailhost',
			   Hello => 'my.mail.domain'
			   Timeout => 30,
                           Debug   => 1,
			  );

=back

=head1 METHODS

Unless otherwise stated all methods return either a I<true> or I<false>
value, with I<true> meaning that the operation was a success. When a method
states that it returns a value, failure will be returned as I<undef> or an
empty list.

=over 4

=item banner ()

Returns the banner message which the server replied with when the
initial connection was made.

=item domain ()

Returns the domain that the remote SMTP server identified itself as during
connection.

=item hello ( DOMAIN )

Tell the remote server the mail domain which you are in using the EHLO
command (or HELO if EHLO fails).  Since this method is invoked
automatically when the Net::SMTP object is constructed the user should
normally not have to call it manually.

=item etrn ( DOMAIN )

Request a queue run for the DOMAIN given.

=item auth ( USERNAME, PASSWORD )

Attempt SASL authentication.

=item mail ( ADDRESS [, OPTIONS] )

=item send ( ADDRESS )

=item send_or_mail ( ADDRESS )

=item send_and_mail ( ADDRESS )

Send the appropriate command to the server MAIL, SEND, SOML or SAML. C<ADDRESS>
is the address of the sender. This initiates the sending of a message. The
method C<recipient> should be called for each address that the message is to
be sent to.

The C<mail> method can some additional ESMTP OPTIONS which is passed
in hash like fashion, using key and value pairs.  Possible options are:

 Size        => <bytes>
 Return      => <???>
 Bits        => "7" | "8"
 Transaction => <ADDRESS>
 Envelope    => <ENVID>


=item reset ()

Reset the status of the server. This may be called after a message has been 
initiated, but before any data has been sent, to cancel the sending of the
message.

=item recipient ( ADDRESS [, ADDRESS [ ...]] [, OPTIONS ] )

Notify the server that the current message should be sent to all of the
addresses given. Each address is sent as a separate command to the server.
Should the sending of any address result in a failure then the
process is aborted and a I<false> value is returned. It is up to the
user to call C<reset> if they so desire.

The C<recipient> method can some additional OPTIONS which is passed
in hash like fashion, using key and value pairs.  Possible options are:

 Notify    =>
 SkipBad   => ignore bad addresses

If C<SkipBad> is true the C<recipient> will not return an error when a
bad address is encountered and it will return an array of addresses
that did succeed.

  $smtp->recipient($recipient1,$recipient2);  # Good
  $smtp->recipient($recipient1,$recipient2, { SkipBad => 1 });  # Good
  $smtp->recipient("$recipient,$recipient2"); # BAD   

=item to ( ADDRESS [, ADDRESS [...]] )

=item cc ( ADDRESS [, ADDRESS [...]] )

=item bcc ( ADDRESS [, ADDRESS [...]] )

Synonyms for C<recipient>.

=item data ( [ DATA ] )

Initiate the sending of the data from the current message. 

C<DATA> may be a reference to a list or a list. If specified the contents
of C<DATA> and a termination string C<".\r\n"> is sent to the server. And the
result will be true if the data was accepted.

If C<DATA> is not specified then the result will indicate that the server
wishes the data to be sent. The data must then be sent using the C<datasend>
and C<dataend> methods described in L<Net::Cmd>.

=item expand ( ADDRESS )

Request the server to expand the given address Returns an array
which contains the text read from the server.

=item verify ( ADDRESS )

Verify that C<ADDRESS> is a legitimate mailing address.

=item help ( [ $subject ] )

Request help text from the server. Returns the text or undef upon failure

=item quit ()

Send the QUIT command to the remote SMTP server and close the socket connection.

=back

=head1 ADDRESSES

All methods that accept addresses expect the address to be a valid rfc2821-quoted address, although
Net::SMTP will accept accept the address surrounded by angle brackets.

 funny user@@domain      WRONG
 "funny user"@@domain    RIGHT, recommended
 <"funny user"@@domain>  OK

=head1 SEE ALSO

L<Net::Cmd>

=head1 AUTHOR

Graham Barr <gbarr@@pobox.com>

=head1 COPYRIGHT

Copyright (c) 1995-1997 Graham Barr. All rights reserved.
This program is free software; you can redistribute it and/or modify
it under the same terms as Perl itself.

=for html <hr>

I<$Id: //depot/libnet/Net/SMTP.pm#25 $>

=cut
@


1.1
log
@Initial revision
@
text
@@


1.1.1.1
log
@stock perl 5.8.0 from CPAN
@
text
@@


1.1.1.2
log
@perl 5.8.2 from CPAN
@
text
@d19 1
a19 1
$VERSION = "2.26"; # $Id: //depot/libnet/Net/SMTP.pm#31 $
d29 1
a29 1
 my $hosts = defined $host ? $host : $NetConfig{smtp_hosts};
d33 1
a33 1
 foreach $h (@@{ref($hosts) ? $hosts : [ $hosts ]})
a58 1
 ${*$obj}{'net_smtp_exact_addr'} = $arg{ExactAddresses};
d129 1
a129 1
    my @@cmd = ("AUTH", $client->mechanism);
a131 3
    push @@cmd, MIME::Base64::encode_base64($str,'')
      if defined $str and length $str;

d167 3
a169 4
 return undef unless $ok;

 $msg[0] =~ /\A\s*(\S+)/;
 return ($1 || " ");
a182 1
  my $self = shift;
d185 1
a185 9

  if (${*$self}{'net_smtp_exact_addr'}) {
    return $1 if $addr =~ /^\s*(<.*>)\s*$/s;
  }
  else {
    return $1 if $addr =~ /(<[^>]*>)/;
    $addr =~ s/^\s+|\s+$//sg;
  }

d192 1
a192 1
 my $addr = _addr($me, shift);
d220 1
a220 1
	 $opts .= " RET=" . ((uc($v) eq "FULL") ? "FULL" : "HDRS");
d230 1
a230 1
       if($v eq "8")
d232 1
a232 24
         if(exists $esmtp->{'8BITMIME'})
          {
	 $opts .= " BODY=8BITMIME";
          }
         else
          {
	 carp 'Net::SMTP::mail: 8BITMIME option not supported by host';
          }
        }
       elsif($v eq "binary")
        {
         if(exists $esmtp->{'BINARYMIME'} && exists $esmtp->{'CHUNKING'})
          {
   $opts .= " BODY=BINARYMIME";
   ${*$me}{'net_smtp_chunking'} = 1;
          }
         else
          {
   carp 'Net::SMTP::mail: BINARYMIME option not supported by host';
          }
        }
       elsif(exists $esmtp->{'8BITMIME'} or exists $esmtp->{'BINARYMIME'})
        {
   $opts .= " BODY=7BIT";
d236 1
a236 1
   carp 'Net::SMTP::mail: 8BITMIME and BINARYMIME options not supported by host';
d244 1
a244 1
	 $opts .= " TRANSID=" . _addr($me, $v);
d279 3
a281 3
sub send	  { my $me = shift; $me->_SEND("FROM:" . _addr($me, $_[0])) }
sub send_or_mail  { my $me = shift; $me->_SOML("FROM:" . _addr($me, $_[0])) }
sub send_and_mail { my $me = shift; $me->_SAML("FROM:" . _addr($me, $_[0])) }
d338 1
a338 1
    if($smtp->_RCPT("TO:" . _addr($smtp, $addr) . $opts)) {
d359 1
a359 20
 if(exists ${*$me}{'net_smtp_chunking'})
  {
   carp 'Net::SMTP::data: CHUNKING extension in use, must call bdat instead';
  }
 else
  {
   my $ok = $me->_DATA() && $me->datasend(@@_);

   $ok && @@_ ? $me->dataend
	     : $ok;
  }
}

sub bdat
{
 my $me = shift;

 if(exists ${*$me}{'net_smtp_chunking'})
  {
   my $data = shift;
d361 2
a362 24
   $me->_BDAT(length $data) && $me->rawdatasend($data) &&
     $me->response() == CMD_OK;
  }
 else
  {
   carp 'Net::SMTP::bdat: CHUNKING extension is not in use, call data instead';
  }
}

sub bdatlast
{
 my $me = shift;

 if(exists ${*$me}{'net_smtp_chunking'})
  {
   my $data = shift;

   $me->_BDAT(length $data, "LAST") && $me->rawdatasend($data) &&
     $me->response() == CMD_OK;
  }
 else
  {
   carp 'Net::SMTP::bdat: CHUNKING extension is not in use, call data instead';
  }
a420 1
sub _BDAT { shift->command("BDAT", @@_) }
a493 3
If C<HOST> is an array reference then each value will be attempted
in turn until a connection is made.

a509 4
B<ExactAddresses> - If true the all ADDRESS arguments must be as
defined by C<addr-spec> in RFC2822. If not given, or false, then
Net::SMTP will attempt to extract the address from the value passed.

d575 2
a576 2
 Return      => "FULL" | "HDRS"
 Bits        => "7" | "8" | "binary"
a579 2
The C<Return> and C<Envelope> parameters are used for DSN (Delivery
Status Notification).
d650 2
a651 9
Net::SMTP attempts to DWIM with addresses that are passed. For
example an application might extract The From: line from an email
and pass that to mail(). While this may work, it is not reccomended.
The application should really use a module like L<Mail::Address>
to extract the mail address and pass that.

If C<ExactAddresses> is passed to the contructor, then addresses
should be a valid rfc2821-quoted address, although Net::SMTP will
accept accept the address surrounded by angle brackets.
d673 1
a673 1
I<$Id: //depot/libnet/Net/SMTP.pm#31 $>
@


1.1.1.3
log
@Import of stock perl 5.8.5
@
text
@d3 1
a3 1
# Copyright (c) 1995-2004 Graham Barr <gbarr@@pobox.com>. All rights reserved.
d19 1
a19 1
$VERSION = "2.29";
d27 2
a28 8
 my ($host,%arg);
 if (@@_ % 2) {
   $host = shift ;
   %arg  = @@_;
 } else {
   %arg = @@_;
   $host=delete $arg{Host};
 }
a73 5
sub host {
 my $me = shift;
 ${*$me}{'net_smtp_host'};
}

d101 2
a102 4
    eval {
	require MIME::Base64;
	require Authen::SASL;
    } or $self->set_status(500,["Need MIME::Base64 and Authen::SASL todo auth"]), return 0;
a301 12
     if(defined($v = delete $opt{XVERP}))
      {
       if(exists $esmtp->{'XVERP'})
        {
	 $opts .= " XVERP"
        }
       else
        {
	 carp 'Net::SMTP::mail: XVERP option not supported by host';
        }
      }

d568 1
a568 1
=item new ( [ HOST ] [, OPTIONS ] )
d573 5
a577 3
C<HOST> is optional. If C<HOST> is not given then it may instead be
passed as the C<Host> option described below. If neither is given then
the C<SMTP_Hosts> specified in C<Net::Config> will be used.
d583 2
a584 7
specifies a string to pass as your mail domain. If not given localhost.localdomain
will be used.

B<Host> - SMTP host to connect to. It may be a single scalar, as defined for
the C<PeerAddr> option in L<IO::Socket::INET>, or a reference to
an array with hosts to try in turn. The L</host> method will return the value
which was used to connect to the host.
a607 14
    # the same
    $smtp = Net::SMTP->new(
			   Host => 'mailhost',
			   Hello => 'my.mail.domain'
			   Timeout => 30,
                           Debug   => 1,
			  );

    # Connect to the default server from Net::config
    $smtp = Net::SMTP->new(
			   Hello => 'my.mail.domain'
			   Timeout => 30,
			  );

a635 5
=item host ()

Returns the value used by the constructor, and passed to IO::Socket::INET,
to connect to the host.

a664 1
 XVERP       => 1
d675 1
a675 1
=item recipient ( ADDRESS [, ADDRESS, [...]] [, OPTIONS ] )
d679 3
a681 13
Should the sending of any address result in a failure then the process is
aborted and a I<false> value is returned. It is up to the user to call
C<reset> if they so desire.

The C<recipient> method can also pass additional case-sensitive OPTIONS as an
anonymous hash using key and value pairs.  Possible options are:

  Notify  => ['NEVER'] or ['SUCCESS','FAILURE','DELAY']  (see below)
  SkipBad => 1        (to ignore bad addresses)

If C<SkipBad> is true the C<recipient> will not return an error when a bad
address is encountered and it will return an array of addresses that did
succeed.
d683 2
a684 5
  $smtp->recipient($recipient1,$recipient2);  # Good
  $smtp->recipient($recipient1,$recipient2, { SkipBad => 1 });  # Good
  $smtp->recipient($recipient1,$recipient2, { Notify => ['FAILURE','DELAY'], SkipBad => 1 });  # Good
  @@goodrecips=$smtp->recipient(@@recipients, { Notify => ['FAILURE'], SkipBad => 1 });  # Good
  $smtp->recipient("$recipient,$recipient2"); # BAD
d686 2
a687 3
Notify is used to request Delivery Status Notifications (DSNs), but your
SMTP/ESMTP service may not respect this request depending upon its version and
your site's SMTP configuration.
d689 3
a691 3
Leaving out the Notify option usually defaults an SMTP service to its default
behavior equivalent to ['FAILURE'] notifications only, but again this may be
dependent upon your site's SMTP configuration.
d693 3
a695 25
The NEVER keyword must appear by itself if used within the Notify option and "requests
that a DSN not be returned to the sender under any conditions."

  {Notify => ['NEVER']}

  $smtp->recipient(@@recipients, { Notify => ['NEVER'], SkipBad => 1 });  # Good

You may use any combination of these three values 'SUCCESS','FAILURE','DELAY' in
the anonymous array reference as defined by RFC3461 (see http://rfc.net/rfc3461.html
for more information.  Note: quotations in this topic from same.).

A Notify parameter of 'SUCCESS' or 'FAILURE' "requests that a DSN be issued on
successful delivery or delivery failure, respectively."

A Notify parameter of 'DELAY' "indicates the sender's willingness to receive
delayed DSNs.  Delayed DSNs may be issued if delivery of a message has been
delayed for an unusual amount of time (as determined by the Message Transfer
Agent (MTA) at which the message is delayed), but the final delivery status
(whether successful or failure) cannot be determined.  The absence of the DELAY
keyword in a NOTIFY parameter requests that a "delayed" DSN NOT be issued under
any conditions."

  {Notify => ['SUCCESS','FAILURE','DELAY']}

  $smtp->recipient(@@recipients, { Notify => ['FAILURE','DELAY'], SkipBad => 1 });  # Good
a725 3
Most sites usually disable this feature in their SMTP service configuration.
Use "Debug => 1" option under new() to see if disabled.

d762 1
a762 1
Copyright (c) 1995-2004 Graham Barr. All rights reserved.
d765 4
@


1.1.1.4
log
@import perl 5.10.0 from CPAN
@
text
@d19 1
a19 1
$VERSION = "2.31";
d23 52
a74 41

sub new {
  my $self = shift;
  my $type = ref($self) || $self;
  my ($host, %arg);
  if (@@_ % 2) {
    $host = shift;
    %arg  = @@_;
  }
  else {
    %arg  = @@_;
    $host = delete $arg{Host};
  }
  my $hosts = defined $host ? $host : $NetConfig{smtp_hosts};
  my $obj;

  my $h;
  foreach $h (@@{ref($hosts) ? $hosts : [$hosts]}) {
    $obj = $type->SUPER::new(
      PeerAddr => ($host = $h),
      PeerPort => $arg{Port} || 'smtp(25)',
      LocalAddr => $arg{LocalAddr},
      LocalPort => $arg{LocalPort},
      Proto     => 'tcp',
      Timeout   => defined $arg{Timeout}
      ? $arg{Timeout}
      : 120
      )
      and last;
  }

  return undef
    unless defined $obj;

  $obj->autoflush(1);

  $obj->debug(exists $arg{Debug} ? $arg{Debug} : undef);

  unless ($obj->response() == CMD_OK) {
    $obj->close();
    return undef;
d77 1
a77 12
  ${*$obj}{'net_smtp_exact_addr'} = $arg{ExactAddresses};
  ${*$obj}{'net_smtp_host'}       = $host;

  (${*$obj}{'net_smtp_banner'}) = $obj->message;
  (${*$obj}{'net_smtp_domain'}) = $obj->message =~ /\A\s*(\S+)/;

  unless ($obj->hello($arg{Hello} || "")) {
    $obj->close();
    return undef;
  }

  $obj;
a79 1

d81 2
a82 2
  my $me = shift;
  ${*$me}{'net_smtp_host'};
d89 3
d93 1
a93 4
sub banner {
  my $me = shift;

  return ${*$me}{'net_smtp_banner'} || undef;
d96 3
d100 1
a100 4
sub domain {
  my $me = shift;

  return ${*$me}{'net_smtp_domain'} || undef;
a102 1

d104 3
a106 3
  my $self = shift;
  defined($self->supports('ETRN', 500, ["Command unknown: 'ETRN'"]))
    && $self->_ETRN(@@_);
a108 1

d110 1
a110 1
  my ($self, $username, $password) = @@_;
d112 4
a115 4
  eval {
    require MIME::Base64;
    require Authen::SASL;
  } or $self->set_status(500, ["Need MIME::Base64 and Authen::SASL todo auth"]), return 0;
d117 2
a118 2
  my $mechanisms = $self->supports('AUTH', 500, ["Command unknown: 'AUTH'"]);
  return unless defined $mechanisms;
d120 1
a120 1
  my $sasl;
d122 12
a133 15
  if (ref($username) and UNIVERSAL::isa($username, 'Authen::SASL')) {
    $sasl = $username;
    $sasl->mechanism($mechanisms);
  }
  else {
    die "auth(username, password)" if not length $username;
    $sasl = Authen::SASL->new(
      mechanism => $mechanisms,
      callback  => {
        user     => $username,
        pass     => $password,
        authname => $username,
      }
    );
  }
d135 23
a157 4
  # We should probably allow the user to pass the host, but I don't
  # currently know and SASL mechanisms that are used by smtp that need it
  my $client = $sasl->client_new('smtp', ${*$self}{'net_smtp_host'}, 0);
  my $str    = $client->client_start;
d159 1
a159 19
  # We dont support sasl mechanisms that encrypt the socket traffic.
  # todo that we would really need to change the ISA hierarchy
  # so we dont inherit from IO::Socket, but instead hold it in an attribute

  my @@cmd = ("AUTH", $client->mechanism);
  my $code;

  push @@cmd, MIME::Base64::encode_base64($str, '')
    if defined $str and length $str;

  while (($code = $self->command(@@cmd)->response()) == CMD_MORE) {
    @@cmd = (
      MIME::Base64::encode_base64(
        $client->client_step(MIME::Base64::decode_base64(($self->message)[0])), ''
      )
    );
  }

  $code == CMD_OK;
d162 14
a175 13

sub hello {
  my $me     = shift;
  my $domain = shift || "localhost.localdomain";
  my $ok     = $me->_EHLO($domain);
  my @@msg    = $me->message;

  if ($ok) {
    my $h = ${*$me}{'net_smtp_esmtp'} = {};
    my $ln;
    foreach $ln (@@msg) {
      $h->{uc $1} = $2
        if $ln =~ /(\w+)\b[= \t]*([^\n]*)/;
d178 4
a181 3
  elsif ($me->status == CMD_ERROR) {
    @@msg = $me->message
      if $ok = $me->_HELO($domain);
d184 1
a184 1
  return undef unless $ok;
d186 2
a187 2
  $msg[0] =~ /\A\s*(\S+)/;
  return ($1 || " ");
a189 1

d191 7
a197 7
  my $self = shift;
  my $cmd  = uc shift;
  return ${*$self}{'net_smtp_esmtp'}->{$cmd}
    if exists ${*$self}{'net_smtp_esmtp'}->{$cmd};
  $self->set_status(@@_)
    if @@_;
  return;
a199 1

d216 24
a239 19

sub mail {
  my $me   = shift;
  my $addr = _addr($me, shift);
  my $opts = "";

  if (@@_) {
    my %opt = @@_;
    my ($k, $v);

    if (exists ${*$me}{'net_smtp_esmtp'}) {
      my $esmtp = ${*$me}{'net_smtp_esmtp'};

      if (defined($v = delete $opt{Size})) {
        if (exists $esmtp->{SIZE}) {
          $opts .= sprintf " SIZE=%d", $v + 0;
        }
        else {
          carp 'Net::SMTP::mail: SIZE option not supported by host';
d243 9
a251 6
      if (defined($v = delete $opt{Return})) {
        if (exists $esmtp->{DSN}) {
          $opts .= " RET=" . ((uc($v) eq "FULL") ? "FULL" : "HDRS");
        }
        else {
          carp 'Net::SMTP::mail: DSN option not supported by host';
d255 7
a261 4
      if (defined($v = delete $opt{Bits})) {
        if ($v eq "8") {
          if (exists $esmtp->{'8BITMIME'}) {
            $opts .= " BODY=8BITMIME";
d263 3
a265 2
          else {
            carp 'Net::SMTP::mail: 8BITMIME option not supported by host';
d268 6
a273 4
        elsif ($v eq "binary") {
          if (exists $esmtp->{'BINARYMIME'} && exists $esmtp->{'CHUNKING'}) {
            $opts .= " BODY=BINARYMIME";
            ${*$me}{'net_smtp_chunking'} = 1;
d275 3
a277 2
          else {
            carp 'Net::SMTP::mail: BINARYMIME option not supported by host';
d280 3
a282 2
        elsif (exists $esmtp->{'8BITMIME'} or exists $esmtp->{'BINARYMIME'}) {
          $opts .= " BODY=7BIT";
d284 3
a286 2
        else {
          carp 'Net::SMTP::mail: 8BITMIME and BINARYMIME options not supported by host';
d290 5
a294 3
      if (defined($v = delete $opt{Transaction})) {
        if (exists $esmtp->{CHECKPOINT}) {
          $opts .= " TRANSID=" . _addr($me, $v);
d296 3
a298 2
        else {
          carp 'Net::SMTP::mail: CHECKPOINT option not supported by host';
d302 6
a307 4
      if (defined($v = delete $opt{Envelope})) {
        if (exists $esmtp->{DSN}) {
          $v =~ s/([^\041-\176]|=|\+)/sprintf "+%02x", ord($1)/sge;
          $opts .= " ENVID=$v";
d309 3
a311 2
        else {
          carp 'Net::SMTP::mail: DSN option not supported by host';
d315 5
a319 5
      if (defined($v = delete $opt{ENVID})) {

        # expected to be in a format as required by RFC 3461, xtext-encoded
        if (exists $esmtp->{DSN}) {
          $opts .= " ENVID=$v";
d321 3
a323 2
        else {
          carp 'Net::SMTP::mail: DSN option not supported by host';
d327 4
a330 24
      if (defined($v = delete $opt{AUTH})) {

        # expected to be in a format as required by RFC 2554,
        # rfc2821-quoted and xtext-encoded, or <>
        if (exists $esmtp->{AUTH}) {
          $v = '<>' if !defined($v) || $v eq '';
          $opts .= " AUTH=$v";
        }
        else {
          carp 'Net::SMTP::mail: AUTH option not supported by host';
        }
      }

      if (defined($v = delete $opt{XVERP})) {
        if (exists $esmtp->{'XVERP'}) {
          $opts .= " XVERP";
        }
        else {
          carp 'Net::SMTP::mail: XVERP option not supported by host';
        }
      }

      carp 'Net::SMTP::recipient: unknown option(s) ' . join(" ", keys %opt) . ' - ignored'
        if scalar keys %opt;
d332 3
a334 2
    else {
      carp 'Net::SMTP::mail: ESMTP not supported by host - options discarded :-(';
d338 1
a338 1
  $me->_MAIL("FROM:" . $addr . $opts);
d341 1
a341 2

sub send          { my $me = shift; $me->_SEND("FROM:" . _addr($me, $_[0])) }
d345 3
d349 2
a350 5
sub reset {
  my $me = shift;

  $me->dataend()
    if (exists ${*$me}{'net_smtp_lastch'});
d352 1
a352 1
  $me->_RSET();
d356 5
a360 8
sub recipient {
  my $smtp     = shift;
  my $opts     = "";
  my $skip_bad = 0;

  if (@@_ && ref($_[-1])) {
    my %opt = %{pop(@@_)};
    my $v;
d362 4
a365 1
    $skip_bad = delete $opt{'SkipBad'};
d367 1
a367 2
    if (exists ${*$smtp}{'net_smtp_esmtp'}) {
      my $esmtp = ${*$smtp}{'net_smtp_esmtp'};
d369 3
a371 8
      if (defined($v = delete $opt{Notify})) {
        if (exists $esmtp->{DSN}) {
          $opts .= " NOTIFY=" . join(",", map { uc $_ } @@$v);
        }
        else {
          carp 'Net::SMTP::recipient: DSN option not supported by host';
        }
      }
d373 5
a377 3
      if (defined($v = delete $opt{ORcpt})) {
        if (exists $esmtp->{DSN}) {
          $opts .= " ORCPT=" . $v;
d379 3
a381 2
        else {
          carp 'Net::SMTP::recipient: DSN option not supported by host';
d385 4
a388 2
      carp 'Net::SMTP::recipient: unknown option(s) ' . join(" ", keys %opt) . ' - ignored'
        if scalar keys %opt;
d390 3
a392 2
    elsif (%opt) {
      carp 'Net::SMTP::recipient: ESMTP not supported by host - options discarded :-(';
d396 6
a401 5
  my @@ok;
  my $addr;
  foreach $addr (@@_) {
    if ($smtp->_RCPT("TO:" . _addr($smtp, $addr) . $opts)) {
      push(@@ok, $addr) if $skip_bad;
d403 1
a403 1
    elsif (!$skip_bad) {
d408 1
a408 1
  return $skip_bad ? @@ok : 1;
d417 3
d421 3
a423 5
sub data {
  my $me = shift;

  if (exists ${*$me}{'net_smtp_chunking'}) {
    carp 'Net::SMTP::data: CHUNKING extension in use, must call bdat instead';
d425 3
a427 2
  else {
    my $ok = $me->_DATA() && $me->datasend(@@_);
d429 2
a430 3
    $ok && @@_
      ? $me->dataend
      : $ok;
d434 3
d438 3
a440 5
sub bdat {
  my $me = shift;

  if (exists ${*$me}{'net_smtp_chunking'}) {
    my $data = shift;
d442 2
a443 3
    $me->_BDAT(length $data)
      && $me->rawdatasend($data)
      && $me->response() == CMD_OK;
d445 3
a447 2
  else {
    carp 'Net::SMTP::bdat: CHUNKING extension is not in use, call data instead';
d451 3
d455 3
a457 5
sub bdatlast {
  my $me = shift;

  if (exists ${*$me}{'net_smtp_chunking'}) {
    my $data = shift;
d459 2
a460 3
    $me->_BDAT(length $data, "LAST")
      && $me->rawdatasend($data)
      && $me->response() == CMD_OK;
d462 3
a464 2
  else {
    carp 'Net::SMTP::bdat: CHUNKING extension is not in use, call data instead';
a467 1

d474 3
d478 2
a479 6
sub expand {
  my $me = shift;

  $me->_EXPN(@@_)
    ? ($me->message)
    : ();
d485 3
d489 2
a490 6
sub help {
  my $me = shift;

  $me->_HELP(@@_)
    ? scalar $me->message
    : undef;
d493 3
d497 2
a498 5
sub quit {
  my $me = shift;

  $me->_QUIT;
  $me->close;
d501 3
a503 4

sub DESTROY {

  # ignore
d510 14
a523 15

sub _EHLO { shift->command("EHLO", @@_)->response() == CMD_OK }
sub _HELO { shift->command("HELO", @@_)->response() == CMD_OK }
sub _MAIL { shift->command("MAIL", @@_)->response() == CMD_OK }
sub _RCPT { shift->command("RCPT", @@_)->response() == CMD_OK }
sub _SEND { shift->command("SEND", @@_)->response() == CMD_OK }
sub _SAML { shift->command("SAML", @@_)->response() == CMD_OK }
sub _SOML { shift->command("SOML", @@_)->response() == CMD_OK }
sub _VRFY { shift->command("VRFY", @@_)->response() == CMD_OK }
sub _EXPN { shift->command("EXPN", @@_)->response() == CMD_OK }
sub _HELP { shift->command("HELP", @@_)->response() == CMD_OK }
sub _RSET { shift->command("RSET")->response() == CMD_OK }
sub _NOOP { shift->command("NOOP")->response() == CMD_OK }
sub _QUIT { shift->command("QUIT")->response() == CMD_OK }
sub _DATA { shift->command("DATA")->response() == CMD_MORE }
d525 3
a527 3
sub _TURN { shift->unsupported(@@_); }
sub _ETRN { shift->command("ETRN", @@_)->response() == CMD_OK }
sub _AUTH { shift->command("AUTH", @@_)->response() == CMD_OK }
d631 1
a631 1
			   Hello => 'my.mail.domain',
d639 1
a639 1
			   Hello => 'my.mail.domain',
d646 1
a646 1
			   Hello => 'my.mail.domain',
d711 1
a711 2
 Envelope    => <ENVID>     # xtext-encodes its argument
 ENVID       => <ENVID>     # similar to Envelope, but expects argument encoded
a712 1
 AUTH        => <submitter> # encoded address according to RFC 2554
a716 3
The submitter address in C<AUTH> option is expected to be in a format as
required by RFC 2554, in an RFC2821-quoted form and xtext-encoded, or <> .

a734 1
  ORcpt   => <ORCPT>
a780 6
ORcpt is also part of the SMTP DSN extension according to RFC3461.
It is used to pass along the original recipient that the mail was first
sent to.  The machine that generates a DSN will use this address to inform
the sender, because he can't know if recipients get rewritten by mail servers.
It is expected to be in a format as required by RFC3461, xtext-encoded.

d827 1
a827 1
and pass that to mail(). While this may work, it is not recommended.
d831 1
a831 1
If C<ExactAddresses> is passed to the constructor, then addresses
@


