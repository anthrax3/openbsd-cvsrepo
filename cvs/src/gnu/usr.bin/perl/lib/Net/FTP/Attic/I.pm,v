head	1.2;
access;
symbols
	OPENBSD_4_8:1.1.1.2.0.8
	OPENBSD_4_8_BASE:1.1.1.2
	OPENBSD_4_7:1.1.1.2.0.4
	OPENBSD_4_7_BASE:1.1.1.2
	PERL_5_10_1:1.1.1.2
	OPENBSD_4_6:1.1.1.2.0.6
	OPENBSD_4_6_BASE:1.1.1.2
	OPENBSD_4_5:1.1.1.2.0.2
	OPENBSD_4_5_BASE:1.1.1.2
	PERL_5_10_0:1.1.1.2
	OPENBSD_4_4:1.1.1.1.0.24
	OPENBSD_4_4_BASE:1.1.1.1
	OPENBSD_4_3:1.1.1.1.0.22
	OPENBSD_4_3_BASE:1.1.1.1
	OPENBSD_4_2:1.1.1.1.0.20
	OPENBSD_4_2_BASE:1.1.1.1
	OPENBSD_4_1:1.1.1.1.0.18
	OPENBSD_4_1_BASE:1.1.1.1
	OPENBSD_4_0:1.1.1.1.0.16
	OPENBSD_4_0_BASE:1.1.1.1
	PERL_5_8_8:1.1.1.1
	OPENBSD_3_9:1.1.1.1.0.14
	OPENBSD_3_9_BASE:1.1.1.1
	OPENBSD_3_8:1.1.1.1.0.12
	OPENBSD_3_8_BASE:1.1.1.1
	OPENBSD_3_7:1.1.1.1.0.10
	OPENBSD_3_7_BASE:1.1.1.1
	PERL_5_8_6:1.1.1.1
	OPENBSD_3_6:1.1.1.1.0.8
	OPENBSD_3_6_BASE:1.1.1.1
	PERL_5_8_5:1.1.1.1
	PERL_5_8_3:1.1.1.1
	OPENBSD_3_5:1.1.1.1.0.6
	OPENBSD_3_5_BASE:1.1.1.1
	PERL_5_8_2:1.1.1.1
	OPENBSD_3_4:1.1.1.1.0.4
	OPENBSD_3_4_BASE:1.1.1.1
	OPENBSD_3_3:1.1.1.1.0.2
	OPENBSD_3_3_BASE:1.1.1.1
	PERL_5_8_0:1.1.1.1
	CPAN:1.1.1;
locks; strict;
comment	@# @;
expand	@o@;


1.2
date	2010.09.24.14.59.46;	author millert;	state dead;
branches;
next	1.1;

1.1
date	2002.10.27.22.15.01;	author millert;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	2002.10.27.22.15.01;	author millert;	state Exp;
branches;
next	1.1.1.2;

1.1.1.2
date	2008.09.29.17.18.40;	author millert;	state Exp;
branches;
next	;


desc
@@


1.2
log
@remove files no longer in perl 5.12.2 (or that have moved)
@
text
@## $Id: //depot/libnet/Net/FTP/I.pm#13 $
## Package to read/write on BINARY data connections
##

package Net::FTP::I;

use vars qw(@@ISA $buf $VERSION);
use Carp;

require Net::FTP::dataconn;

@@ISA = qw(Net::FTP::dataconn);
$VERSION = "1.12"; 

sub read {
  my    $data 	 = shift;
  local *buf 	 = \$_[0]; shift;
  my    $size    = shift || croak 'read($buf,$size,[$timeout])';
  my    $timeout = @@_ ? shift : $data->timeout;

  my $n;

  if ($size > length ${*$data} and !${*$data}{'net_ftp_eof'}) {
    $data->can_read($timeout) or
	   croak "Timeout";

    my $blksize = ${*$data}{'net_ftp_blksize'};
    $blksize = $size if $size > $blksize;

    unless ($n = sysread($data, ${*$data}, $blksize, length ${*$data})) {
      return undef unless defined $n;
      ${*$data}{'net_ftp_eof'} = 1;
    }
  }

  $buf = substr(${*$data},0,$size);

  $n = length($buf);

  substr(${*$data},0,$n) = '';

  ${*$data}{'net_ftp_bytesread'} += $n;

  $n;
}

sub write {
  my    $data    = shift;
  local *buf     = \$_[0]; shift;
  my    $size    = shift || croak 'write($buf,$size,[$timeout])';
  my    $timeout = @@_ ? shift : $data->timeout;

  # If the remote server has closed the connection we will be signal'd
  # when we write. This can happen if the disk on the remote server fills up

  local $SIG{PIPE} = 'IGNORE' unless $^O eq 'MacOS';
  my $sent = $size;
  my $off = 0;

  my $blksize = ${*$data}{'net_ftp_blksize'};
  while($sent > 0) {
    $data->can_write($timeout) or
	 croak "Timeout";

    my $n = syswrite($data, $buf, $sent > $blksize ? $blksize : $sent ,$off);
    return undef unless defined($n);
    $sent -= $n;
    $off += $n;
  }

  $size;
}

1;
@


1.1
log
@Initial revision
@
text
@@


1.1.1.1
log
@stock perl 5.8.0 from CPAN
@
text
@@


1.1.1.2
log
@import perl 5.10.0 from CPAN
@
text
@d1 1
a1 1
## 
d12 2
a13 3
@@ISA     = qw(Net::FTP::dataconn);
$VERSION = "1.12";

d16 4
a19 5
  my $data = shift;
  local *buf = \$_[0];
  shift;
  my $size = shift || croak 'read($buf,$size,[$timeout])';
  my $timeout = @@_ ? shift: $data->timeout;
d24 2
a25 2
    $data->can_read($timeout)
      or croak "Timeout";
d36 1
a36 1
  $buf = substr(${*$data}, 0, $size);
d40 1
a40 1
  substr(${*$data}, 0, $n) = '';
a46 1

d48 4
a51 5
  my $data = shift;
  local *buf = \$_[0];
  shift;
  my $size = shift || croak 'write($buf,$size,[$timeout])';
  my $timeout = @@_ ? shift: $data->timeout;
d56 1
a56 3
  local $SIG{PIPE} = 'IGNORE'
    unless ($SIG{PIPE} || '') eq 'IGNORE'
    or $^O eq 'MacOS';
d58 1
a58 1
  my $off  = 0;
d61 3
a63 3
  while ($sent > 0) {
    $data->can_write($timeout)
      or croak "Timeout";
d65 1
a65 1
    my $n = syswrite($data, $buf, $sent > $blksize ? $blksize : $sent, $off);
@

