head	1.2;
access;
symbols
	OPENBSD_4_8:1.1.1.3.0.8
	OPENBSD_4_8_BASE:1.1.1.3
	OPENBSD_4_7:1.1.1.3.0.4
	OPENBSD_4_7_BASE:1.1.1.3
	PERL_5_10_1:1.1.1.3
	OPENBSD_4_6:1.1.1.3.0.6
	OPENBSD_4_6_BASE:1.1.1.3
	OPENBSD_4_5:1.1.1.3.0.2
	OPENBSD_4_5_BASE:1.1.1.3
	PERL_5_10_0:1.1.1.3
	OPENBSD_4_4:1.1.1.2.0.20
	OPENBSD_4_4_BASE:1.1.1.2
	OPENBSD_4_3:1.1.1.2.0.18
	OPENBSD_4_3_BASE:1.1.1.2
	OPENBSD_4_2:1.1.1.2.0.16
	OPENBSD_4_2_BASE:1.1.1.2
	OPENBSD_4_1:1.1.1.2.0.14
	OPENBSD_4_1_BASE:1.1.1.2
	OPENBSD_4_0:1.1.1.2.0.12
	OPENBSD_4_0_BASE:1.1.1.2
	PERL_5_8_8:1.1.1.2
	OPENBSD_3_9:1.1.1.2.0.10
	OPENBSD_3_9_BASE:1.1.1.2
	OPENBSD_3_8:1.1.1.2.0.8
	OPENBSD_3_8_BASE:1.1.1.2
	OPENBSD_3_7:1.1.1.2.0.6
	OPENBSD_3_7_BASE:1.1.1.2
	PERL_5_8_6:1.1.1.2
	OPENBSD_3_6:1.1.1.2.0.4
	OPENBSD_3_6_BASE:1.1.1.2
	PERL_5_8_5:1.1.1.2
	PERL_5_8_3:1.1.1.2
	OPENBSD_3_5:1.1.1.2.0.2
	OPENBSD_3_5_BASE:1.1.1.2
	PERL_5_8_2:1.1.1.2
	OPENBSD_3_4:1.1.1.1.0.4
	OPENBSD_3_4_BASE:1.1.1.1
	OPENBSD_3_3:1.1.1.1.0.2
	OPENBSD_3_3_BASE:1.1.1.1
	PERL_5_8_0:1.1.1.1
	CPAN:1.1.1;
locks; strict;
comment	@# @;
expand	@o@;


1.2
date	2010.09.24.14.59.46;	author millert;	state dead;
branches;
next	1.1;

1.1
date	2002.10.27.22.15.01;	author millert;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	2002.10.27.22.15.01;	author millert;	state Exp;
branches;
next	1.1.1.2;

1.1.1.2
date	2003.12.03.02.44.05;	author millert;	state Exp;
branches;
next	1.1.1.3;

1.1.1.3
date	2008.09.29.17.18.40;	author millert;	state Exp;
branches;
next	;


desc
@@


1.2
log
@remove files no longer in perl 5.12.2 (or that have moved)
@
text
@## $Id: //depot/libnet/Net/FTP/A.pm#16 $
## Package to read/write on ASCII data connections
##

package Net::FTP::A;
use strict;
use vars qw(@@ISA $buf $VERSION);
use Carp;

require Net::FTP::dataconn;

@@ISA = qw(Net::FTP::dataconn);
$VERSION = "1.15";

sub read {
  my    $data 	 = shift;
  local *buf 	 = \$_[0]; shift;
  my    $size 	 = shift || croak 'read($buf,$size,[$offset])';
  my    $timeout = @@_ ? shift : $data->timeout;

  if (length(${*$data}) < $size && !${*$data}{'net_ftp_eof'}) {
    my $blksize = ${*$data}{'net_ftp_blksize'};
    $blksize = $size if $size > $blksize;

    my $l = 0;
    my $n;

    READ:
    {
      my $readbuf = defined(${*$data}{'net_ftp_cr'}) ? "\015" : '';

      $data->can_read($timeout) or
	   croak "Timeout";

      if ($n = sysread($data, $readbuf, $blksize, length $readbuf)) {
        ${*$data}{'net_ftp_bytesread'} += $n;
	${*$data}{'net_ftp_cr'} = substr($readbuf,-1) eq "\015"
					? chop($readbuf)
					: undef;
      }
      else {
        return undef
	  unless defined $n;

        ${*$data}{'net_ftp_eof'} = 1;
      }

      $readbuf =~ s/\015\012/\n/sgo;
      ${*$data} .= $readbuf;

      unless (length(${*$data})) {

        redo READ
	  if($n > 0);

        $size = length(${*$data})
          if($n == 0);
      }
    }
  }

  $buf = substr(${*$data},0,$size);
  substr(${*$data},0,$size) = '';

  length $buf;
}

sub write {
  my    $data 	= shift;
  local *buf 	= \$_[0]; shift;
  my    $size 	= shift || croak 'write($buf,$size,[$timeout])';
  my    $timeout = @@_ ? shift : $data->timeout;

  (my $tmp = substr($buf,0,$size)) =~ s/\n/\015\012/sg;

  # If the remote server has closed the connection we will be signal'd
  # when we write. This can happen if the disk on the remote server fills up

  local $SIG{PIPE} = 'IGNORE' unless $^O eq 'MacOS';

  my $len = length($tmp);
  my $off = 0;
  my $wrote = 0;

  my $blksize = ${*$data}{'net_ftp_blksize'};

  while($len) {
    $data->can_write($timeout) or
	 croak "Timeout";

    $off += $wrote;
    $wrote = syswrite($data, substr($tmp,$off), $len > $blksize ? $blksize : $len);
    return undef
      unless defined($wrote);
    $len -= $wrote;
  }

  $size;
}

1;
@


1.1
log
@Initial revision
@
text
@@


1.1.1.1
log
@stock perl 5.8.0 from CPAN
@
text
@@


1.1.1.2
log
@perl 5.8.2 from CPAN
@
text
@d1 1
a1 1
## $Id: //depot/libnet/Net/FTP/A.pm#17 $
d13 1
a13 1
$VERSION = "1.16";
d74 1
a74 1
  (my $tmp = substr($buf,0,$size)) =~ s/\r?\n/\015\012/sg;
@


1.1.1.3
log
@import perl 5.10.0 from CPAN
@
text
@d1 1
a1 1
## 
d12 2
a13 3
@@ISA     = qw(Net::FTP::dataconn);
$VERSION = "1.18";

d16 4
a19 5
  my $data = shift;
  local *buf = \$_[0];
  shift;
  my $size = shift || croak 'read($buf,$size,[$offset])';
  my $timeout = @@_ ? shift: $data->timeout;
d28 1
a28 1
  READ:
d32 2
a33 2
      $data->can_read($timeout)
        or croak "Timeout";
d37 3
a39 4
        ${*$data}{'net_ftp_cr'} =
          substr($readbuf, -1) eq "\015"
          ? chop($readbuf)
          : undef;
d43 1
a43 1
          unless defined $n;
d54 1
a54 1
          if ($n > 0);
d57 1
a57 1
          if ($n == 0);
d62 2
a63 2
  $buf = substr(${*$data}, 0, $size);
  substr(${*$data}, 0, $size) = '';
d68 5
d74 1
a74 11
sub write {
  my $data = shift;
  local *buf = \$_[0];
  shift;
  my $size = shift || croak 'write($buf,$size,[$timeout])';
  my $timeout = @@_ ? shift: $data->timeout;

  my $nr = (my $tmp = substr($buf, 0, $size)) =~ tr/\r\n/\015\012/;
  $tmp =~ s/([^\015])\012/$1\015\012/sg if $nr;
  $tmp =~ s/^\012/\015\012/ unless ${*$data}{'net_ftp_outcr'};
  ${*$data}{'net_ftp_outcr'} = substr($tmp, -1) eq "\015";
d79 1
a79 3
  local $SIG{PIPE} = 'IGNORE'
    unless ($SIG{PIPE} || '') eq 'IGNORE'
    or $^O eq 'MacOS';
d81 2
a82 2
  my $len   = length($tmp);
  my $off   = 0;
d87 3
a89 3
  while ($len) {
    $data->can_write($timeout)
      or croak "Timeout";
d92 1
a92 1
    $wrote = syswrite($data, substr($tmp, $off), $len > $blksize ? $blksize : $len);
@


