head	1.2;
access;
symbols
	OPENBSD_4_8:1.1.1.1.0.32
	OPENBSD_4_8_BASE:1.1.1.1
	OPENBSD_4_7:1.1.1.1.0.28
	OPENBSD_4_7_BASE:1.1.1.1
	PERL_5_10_1:1.1.1.1
	OPENBSD_4_6:1.1.1.1.0.30
	OPENBSD_4_6_BASE:1.1.1.1
	OPENBSD_4_5:1.1.1.1.0.26
	OPENBSD_4_5_BASE:1.1.1.1
	PERL_5_10_0:1.1.1.1
	OPENBSD_4_4:1.1.1.1.0.24
	OPENBSD_4_4_BASE:1.1.1.1
	OPENBSD_4_3:1.1.1.1.0.22
	OPENBSD_4_3_BASE:1.1.1.1
	OPENBSD_4_2:1.1.1.1.0.20
	OPENBSD_4_2_BASE:1.1.1.1
	OPENBSD_4_1:1.1.1.1.0.18
	OPENBSD_4_1_BASE:1.1.1.1
	OPENBSD_4_0:1.1.1.1.0.16
	OPENBSD_4_0_BASE:1.1.1.1
	PERL_5_8_8:1.1.1.1
	OPENBSD_3_9:1.1.1.1.0.14
	OPENBSD_3_9_BASE:1.1.1.1
	OPENBSD_3_8:1.1.1.1.0.12
	OPENBSD_3_8_BASE:1.1.1.1
	OPENBSD_3_7:1.1.1.1.0.10
	OPENBSD_3_7_BASE:1.1.1.1
	PERL_5_8_6:1.1.1.1
	OPENBSD_3_6:1.1.1.1.0.8
	OPENBSD_3_6_BASE:1.1.1.1
	PERL_5_8_5:1.1.1.1
	PERL_5_8_3:1.1.1.1
	OPENBSD_3_5:1.1.1.1.0.6
	OPENBSD_3_5_BASE:1.1.1.1
	PERL_5_8_2:1.1.1.1
	OPENBSD_3_4:1.1.1.1.0.4
	OPENBSD_3_4_BASE:1.1.1.1
	OPENBSD_3_3:1.1.1.1.0.2
	OPENBSD_3_3_BASE:1.1.1.1
	PERL_5_8_0:1.1.1.1
	CPAN:1.1.1;
locks; strict;
comment	@# @;
expand	@o@;


1.2
date	2010.09.24.14.59.41;	author millert;	state dead;
branches;
next	1.1;

1.1
date	2002.10.27.22.15.00;	author millert;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	2002.10.27.22.15.00;	author millert;	state Exp;
branches;
next	;


desc
@@


1.2
log
@remove files no longer in perl 5.12.2 (or that have moved)
@
text
@#!./perl
#
# script.t - tests for Locale::Script
#

use Locale::Script;

#-----------------------------------------------------------------------
# This is an array of tests specs. Each spec is [TEST, OK_TO_DIE]
# Each TEST is eval'd as an expression.
# If it evaluates to FALSE, then "not ok N" is printed for the test,
# otherwise "ok N". If the eval dies, then the OK_TO_DIE flag is checked.
# If it is true (1), the test is treated as passing, otherwise it failed.
#-----------------------------------------------------------------------
@@TESTS =
(
	#================================================
	# TESTS FOR code2script
	#================================================

 #---- selection of examples which should all result in undef -----------
 ['!defined code2script()', 0],                  # no argument
 ['!defined code2script(undef)', 0],             # undef argument
 ['!defined code2script("aa")', 0],              # illegal code
 ['!defined code2script("aa", LOCALE_CODE_ALPHA_2)', 0],        # illegal code
 ['!defined code2script("aa", LOCALE_CODE_ALPHA_3)', 0],        # illegal code
 ['!defined code2script("aa", LOCALE_CODE_NUMERIC)', 0],        # illegal code

 #---- some successful examples -----------------------------------------
 ['code2script("BO") eq "Tibetan"', 0],
 ['code2script("Bo") eq "Tibetan"', 0],
 ['code2script("bo") eq "Tibetan"', 0],
 ['code2script("bo", LOCALE_CODE_ALPHA_2) eq "Tibetan"', 0],
 ['code2script("bod", LOCALE_CODE_ALPHA_3) eq "Tibetan"', 0],
 ['code2script("330", LOCALE_CODE_NUMERIC) eq "Tibetan"', 0],

 ['code2script("yi", LOCALE_CODE_ALPHA_2) eq "Yi"', 0], # last in DATA
 ['code2script("Yii", LOCALE_CODE_ALPHA_3) eq "Yi"', 0],
 ['code2script("460", LOCALE_CODE_NUMERIC) eq "Yi"', 0],

 ['code2script("am") eq "Aramaic"', 0],          # first in DATA segment


	#================================================
	# TESTS FOR script2code
	#================================================

 #---- selection of examples which should all result in undef -----------
 ['!defined code2script("BO", LOCALE_CODE_ALPHA_3)', 0],
 ['!defined code2script("BO", LOCALE_CODE_NUMERIC)', 0],
 ['!defined script2code()', 0],                  # no argument
 ['!defined script2code(undef)', 0],             # undef argument
 ['!defined script2code("Banana")', 0],          # illegal script name

 #---- some successful examples -----------------------------------------
 ['script2code("meroitic")                   eq "me"', 0],
 ['script2code("burmese")                    eq "my"', 0],
 ['script2code("Pahlavi")                    eq "ph"', 0],
 ['script2code("Vai", LOCALE_CODE_ALPHA_3)   eq "vai"', 0],
 ['script2code("Tamil", LOCALE_CODE_NUMERIC) eq "346"', 0],
 ['script2code("Latin")                      eq "la"', 0],
 ['script2code("Latin", LOCALE_CODE_ALPHA_3) eq "lat"', 0],

	#================================================
	# TESTS FOR script_code2code
	#================================================

 #---- selection of examples which should all result in undef -----------
 ['!defined script_code2code("bo", LOCALE_CODE_ALPHA_3, LOCALE_CODE_ALPHA_3)', 0],
 ['!defined script_code2code("aa", LOCALE_CODE_ALPHA_2, LOCALE_CODE_ALPHA_3)', 0],
 ['!defined script_code2code("aa", LOCALE_CODE_ALPHA_3, LOCALE_CODE_ALPHA_3)', 0],
 ['!defined script_code2code("aa", LOCALE_CODE_ALPHA_2)', 1],
 ['!defined script_code2code()', 1],                  # no argument
 ['!defined script_code2code(undef)', 1],             # undef argument

 #---- some successful examples -----------------------------------------
 ['script_code2code("BO", LOCALE_CODE_ALPHA_2, LOCALE_CODE_ALPHA_3) eq "bod"', 0],
 ['script_code2code("bod", LOCALE_CODE_ALPHA_3, LOCALE_CODE_ALPHA_2) eq "bo"', 0],
 ['script_code2code("Phx", LOCALE_CODE_ALPHA_3, LOCALE_CODE_ALPHA_2) eq "ph"', 0],
 ['script_code2code("295", LOCALE_CODE_NUMERIC, LOCALE_CODE_ALPHA_3) eq "pqd"', 0],
 ['script_code2code(170, LOCALE_CODE_NUMERIC, LOCALE_CODE_ALPHA_3) eq "tna"', 0],
 ['script_code2code("rr", LOCALE_CODE_ALPHA_2, LOCALE_CODE_NUMERIC) eq "620"', 0],

);

print "1..", int(@@TESTS), "\n";

$testid = 1;
foreach $test (@@TESTS)
{
    eval "print (($test->[0]) ? \"ok $testid\\n\" : \"not ok $testid\\n\" )";
    if ($@@)
    {
	if (!$test->[1])
	{
	    print "not ok $testid\n";
	}
	else
	{
	    print "ok $testid\n";
	}
    }
    ++$testid;
}

exit 0;
@


1.1
log
@Initial revision
@
text
@@


1.1.1.1
log
@stock perl 5.8.0 from CPAN
@
text
@@
