head	1.9;
access;
symbols
	OPENBSD_6_1:1.9.0.14
	OPENBSD_6_1_BASE:1.9
	OPENBSD_6_0:1.9.0.16
	OPENBSD_6_0_BASE:1.9
	OPENBSD_5_9:1.9.0.10
	OPENBSD_5_9_BASE:1.9
	OPENBSD_5_8:1.9.0.12
	OPENBSD_5_8_BASE:1.9
	PERL_5_20_2:1.1.1.8
	OPENBSD_5_7:1.9.0.4
	OPENBSD_5_7_BASE:1.9
	PERL_5_20_1:1.1.1.8
	OPENBSD_5_6:1.9.0.8
	OPENBSD_5_6_BASE:1.9
	PERL_5_18_2:1.1.1.8
	PERL:1.1.1
	OPENBSD_5_5:1.9.0.6
	OPENBSD_5_5_BASE:1.9
	OPENBSD_5_4:1.9.0.2
	OPENBSD_5_4_BASE:1.9
	PERL_5_16_3:1.1.1.8
	OPENBSD_5_3:1.8.0.14
	OPENBSD_5_3_BASE:1.8
	OPENBSD_5_2:1.8.0.12
	OPENBSD_5_2_BASE:1.8
	OPENBSD_5_1_BASE:1.8
	OPENBSD_5_1:1.8.0.10
	OPENBSD_5_0:1.8.0.8
	OPENBSD_5_0_BASE:1.8
	OPENBSD_4_9:1.8.0.6
	OPENBSD_4_9_BASE:1.8
	PERL_5_12_2:1.1.1.7
	OPENBSD_4_8:1.8.0.4
	OPENBSD_4_8_BASE:1.8
	OPENBSD_4_7:1.8.0.2
	OPENBSD_4_7_BASE:1.8
	PERL_5_10_1:1.1.1.7
	OPENBSD_4_6:1.7.0.6
	OPENBSD_4_6_BASE:1.7
	OPENBSD_4_5:1.7.0.2
	OPENBSD_4_5_BASE:1.7
	PERL_5_10_0:1.1.1.6
	OPENBSD_4_4:1.6.0.10
	OPENBSD_4_4_BASE:1.6
	OPENBSD_4_3:1.6.0.8
	OPENBSD_4_3_BASE:1.6
	OPENBSD_4_2:1.6.0.6
	OPENBSD_4_2_BASE:1.6
	OPENBSD_4_1:1.6.0.4
	OPENBSD_4_1_BASE:1.6
	OPENBSD_4_0:1.6.0.2
	OPENBSD_4_0_BASE:1.6
	PERL_5_8_8:1.1.1.5
	OPENBSD_3_9:1.5.0.8
	OPENBSD_3_9_BASE:1.5
	OPENBSD_3_8:1.5.0.6
	OPENBSD_3_8_BASE:1.5
	OPENBSD_3_7:1.5.0.4
	OPENBSD_3_7_BASE:1.5
	PERL_5_8_6:1.1.1.4
	OPENBSD_3_6:1.5.0.2
	OPENBSD_3_6_BASE:1.5
	PERL_5_8_5:1.1.1.4
	PERL_5_8_3:1.1.1.4
	OPENBSD_3_5:1.4.0.6
	OPENBSD_3_5_BASE:1.4
	PERL_5_8_2:1.1.1.3
	OPENBSD_3_4:1.4.0.4
	OPENBSD_3_4_BASE:1.4
	OPENBSD_3_3:1.4.0.2
	OPENBSD_3_3_BASE:1.4
	PERL_5_8_0:1.1.1.3
	OPENBSD_3_2:1.3.0.12
	OPENBSD_3_2_BASE:1.3
	OPENBSD_3_1:1.3.0.10
	OPENBSD_3_1_BASE:1.3
	OPENBSD_3_0:1.3.0.8
	OPENBSD_3_0_BASE:1.3
	PERL_5_6_1:1.1.1.2
	OPENBSD_2_9:1.3.0.6
	OPENBSD_2_9_BASE:1.3
	OPENBSD_2_8:1.3.0.4
	OPENBSD_2_8_BASE:1.3
	OPENBSD_2_7:1.3.0.2
	OPENBSD_2_7_BASE:1.3
	PERL_5_6_0:1.1.1.2
	OPENBSD_2_6:1.2.0.2
	OPENBSD_2_6_BASE:1.2
	PERL_500503:1.1.1.1
	CPAN:1.1.1
	OPENBSD_2_5:1.1.0.6
	OPENBSD_2_5_BASE:1.1
	OPENBSD_2_4:1.1.0.4
	OPENBSD_2_4_BASE:1.1
	OPENBSD_2_3:1.1.0.2
	OPENBSD_2_3_BASE:1.1;
locks; strict;
comment	@# @;
expand	@o@;


1.9
date	2013.03.25.20.40.55;	author sthen;	state Exp;
branches;
next	1.8;

1.8
date	2009.10.12.18.24.38;	author millert;	state Exp;
branches;
next	1.7;

1.7
date	2008.09.29.17.36.09;	author millert;	state Exp;
branches;
next	1.6;

1.6
date	2006.03.28.19.23.05;	author millert;	state Exp;
branches;
next	1.5;

1.5
date	2004.04.07.21.33.04;	author millert;	state Exp;
branches;
next	1.4;

1.4
date	2002.10.27.22.25.25;	author millert;	state Exp;
branches;
next	1.3;

1.3
date	2000.04.06.17.06.05;	author millert;	state Exp;
branches;
next	1.2;

1.2
date	99.04.29.22.51.45;	author millert;	state Exp;
branches;
next	1.1;

1.1
date	97.11.30.07.56.44;	author millert;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	99.04.29.22.39.47;	author millert;	state Exp;
branches;
next	1.1.1.2;

1.1.1.2
date	2000.04.06.16.09.35;	author millert;	state Exp;
branches;
next	1.1.1.3;

1.1.1.3
date	2002.10.27.22.14.58;	author millert;	state Exp;
branches;
next	1.1.1.4;

1.1.1.4
date	2004.04.07.21.13.14;	author millert;	state Exp;
branches;
next	1.1.1.5;

1.1.1.5
date	2006.03.28.18.48.35;	author millert;	state Exp;
branches;
next	1.1.1.6;

1.1.1.6
date	2008.09.29.17.18.29;	author millert;	state Exp;
branches;
next	1.1.1.7;

1.1.1.7
date	2009.10.12.18.10.50;	author millert;	state Exp;
branches;
next	1.1.1.8;

1.1.1.8
date	2013.03.25.20.08.52;	author sthen;	state Exp;
branches;
next	;


desc
@perl 5.004_04
@


1.9
log
@merge/resolve conflicts
(some more to do after this one)
@
text
@# FindBin.pm
#
# Copyright (c) 1995 Graham Barr & Nick Ing-Simmons. All rights reserved.
# This program is free software; you can redistribute it and/or modify it
# under the same terms as Perl itself.

=head1 NAME

FindBin - Locate directory of original perl script

=head1 SYNOPSIS

 use FindBin;
 use lib "$FindBin::Bin/../lib";

 or

 use FindBin qw($Bin);
 use lib "$Bin/../lib";

=head1 DESCRIPTION

Locates the full path to the script bin directory to allow the use
of paths relative to the bin directory.

This allows a user to setup a directory tree for some software with
directories C<< <root>/bin >> and C<< <root>/lib >>, and then the above
example will allow the use of modules in the lib directory without knowing
where the software tree is installed.

If perl is invoked using the B<-e> option or the perl script is read from
C<STDIN> then FindBin sets both C<$Bin> and C<$RealBin> to the current
directory.

=head1 EXPORTABLE VARIABLES

 $Bin         - path to bin directory from where script was invoked
 $Script      - basename of script from which perl was invoked
 $RealBin     - $Bin with all links resolved
 $RealScript  - $Script with all links resolved

=head1 KNOWN ISSUES

If there are two modules using C<FindBin> from different directories
under the same interpreter, this won't work. Since C<FindBin> uses a
C<BEGIN> block, it'll be executed only once, and only the first caller
will get it right. This is a problem under mod_perl and other persistent
Perl environments, where you shouldn't use this module. Which also means
that you should avoid using C<FindBin> in modules that you plan to put
on CPAN. To make sure that C<FindBin> will work is to call the C<again>
function:

  use FindBin;
  FindBin::again(); # or FindBin->again;

In former versions of FindBin there was no C<again> function. The
workaround was to force the C<BEGIN> block to be executed again:

  delete $INC{'FindBin.pm'};
  require FindBin;

=head1 AUTHORS

FindBin is supported as part of the core perl distribution. Please send bug
reports to E<lt>F<perlbug@@perl.org>E<gt> using the perlbug program
included with perl.

Graham Barr E<lt>F<gbarr@@pobox.com>E<gt>
Nick Ing-Simmons E<lt>F<nik@@tiuk.ti.com>E<gt>

=head1 COPYRIGHT

Copyright (c) 1995 Graham Barr & Nick Ing-Simmons. All rights reserved.
This program is free software; you can redistribute it and/or modify it
under the same terms as Perl itself.

=cut

package FindBin;
use Carp;
require 5.000;
require Exporter;
use Cwd qw(getcwd cwd abs_path);
use File::Basename;
use File::Spec;

@@EXPORT_OK = qw($Bin $Script $RealBin $RealScript $Dir $RealDir);
%EXPORT_TAGS = (ALL => [qw($Bin $Script $RealBin $RealScript $Dir $RealDir)]);
@@ISA = qw(Exporter);

$VERSION = "1.51";


# needed for VMS-specific filename translation
if( $^O eq 'VMS' ) {
    require VMS::Filespec;
    VMS::Filespec->import;
}

sub cwd2 {
   my $cwd = getcwd();
   # getcwd might fail if it hasn't access to the current directory.
   # try harder.
   defined $cwd or $cwd = cwd();
   $cwd;
}

sub init
{
 *Dir = \$Bin;
 *RealDir = \$RealBin;

 if($0 eq '-e' || $0 eq '-')
  {
   # perl invoked with -e or script is on C<STDIN>
   $Script = $RealScript = $0;
   $Bin    = $RealBin    = cwd2();
   $Bin = VMS::Filespec::unixify($Bin) if $^O eq 'VMS';
  }
 else
  {
   my $script = $0;

   if ($^O eq 'VMS')
    {
     ($Bin,$Script) = VMS::Filespec::rmsexpand($0) =~ /(.*[\]>\/]+)(.*)/s;
     # C<use disk:[dev]/lib> isn't going to work, so unixify first
     ($Bin = VMS::Filespec::unixify($Bin)) =~ s/\/\z//;
     ($RealBin,$RealScript) = ($Bin,$Script);
    }
   else
    {
     croak("Cannot find current script '$0'") unless(-f $script);

     # Ensure $script contains the complete path in case we C<chdir>

     $script = File::Spec->catfile(cwd2(), $script)
       unless File::Spec->file_name_is_absolute($script);

     ($Script,$Bin) = fileparse($script);

     # Resolve $script if it is a link
     while(1)
      {
       my $linktext = readlink($script);

       ($RealScript,$RealBin) = fileparse($script);
       last unless defined $linktext;

       $script = (File::Spec->file_name_is_absolute($linktext))
                  ? $linktext
                  : File::Spec->catfile($RealBin, $linktext);
      }

     # Get absolute paths to directories
     if ($Bin) {
      my $BinOld = $Bin;
      $Bin = abs_path($Bin);
      defined $Bin or $Bin = File::Spec->canonpath($BinOld);
     }
     $RealBin = abs_path($RealBin) if($RealBin);
    }
  }
}

BEGIN { init }

*again = \&init;

1; # Keep require happy
@


1.8
log
@Merge in perl 5.10.1
@
text
@a61 15
=head1 KNOWN BUGS

If perl is invoked as

   perl filename

and I<filename> does not have executable rights and a program called
I<filename> exists in the users C<$ENV{PATH}> which satisfies both B<-x>
and B<-T> then FindBin assumes that it was invoked via the
C<$ENV{PATH}>.

Workaround is to invoke perl as

 perl ./filename

d91 1
a91 1
$VERSION = "1.50";
a132 24
     my $dosish = ($^O eq 'MSWin32' or $^O eq 'os2');
     unless(($script =~ m#/# || ($dosish && $script =~ m#\\#))
            && -f $script)
      {
       my $dir;
       foreach $dir (File::Spec->path)
        {
        my $scr = File::Spec->catfile($dir, $script);

        # $script can been found via PATH but perl could have
        # been invoked as 'perl file'. Do a dumb check to see
        # if $script is a perl program, if not then keep $script = $0
        #
        # well we actually only check that it is an ASCII file
        # we know its executable so it is probably a script
        # of some sort.
        if(-f $scr && -r _ && ($dosish || -x _) && -s _ && -T _)
         {
          $script = $scr;
          last;
         }
       }
     }

@


1.7
log
@fix conflicts and merge in local changes to perl 5.10.0
@
text
@a98 1
use Config;
d106 1
a106 1
$VERSION = "1.49";
@


1.6
log
@merge in perl 5.8.8
@
text
@d107 8
a114 1
$VERSION = "1.47";
d134 1
d142 3
a144 1
     ($Bin,$Script) = VMS::Filespec::rmsexpand($0) =~ /(.*\])(.*)/s;
d155 1
a155 1
	{
d157 9
a165 1
	if(-r $scr && (!$dosish || -x _))
a167 13

	  if (-f $0)
           {
	    # $script has been found via PATH but perl could have
	    # been invoked as 'perl file'. Do a dumb check to see
	    # if $script is a perl program, if not then $script = $0
            #
            # well we actually only check that it is an ASCII file
            # we know its executable so it is probably a script
            # of some sort.

            $script = $0 unless(-T $script);
           }
@


1.5
log
@merge local changes into perl-5.8.3
@
text
@d27 3
a29 3
directories E<lt>rootE<gt>/bin and E<lt>rootE<gt>/lib and then the above example will allow
the use of modules in the lib directory without knowing where the software
tree is installed.
d68 4
a71 3
and I<filename> does not have executable rights and a program called I<filename>
exists in the users C<$ENV{PATH}> which satisfies both B<-x> and B<-T> then FindBin
assumes that it was invoked via the C<$ENV{PATH}>.
d80 2
a81 1
reports to E<lt>F<perlbug@@perl.org>E<gt> using the perlbug program included with perl.
d98 1
a98 1
use Cwd qw(getcwd abs_path);
d107 9
a115 1
$VERSION = "1.44";
a124 1

d126 1
a126 1
   $Bin    = $RealBin    = getcwd();
d170 1
a170 1
     # Ensure $script contains the complete path incase we C<chdir>
d172 1
a172 1
     $script = File::Spec->catfile(getcwd(), $script)
d191 5
a195 1
     $Bin     = abs_path($Bin)     if($Bin);
a205 1

@


1.4
log
@Resolve conflicts, remove old files, merge local changes
@
text
@d45 1
a45 1
under the same interpreter, this won't work. Since C<FindBin> uses
d50 8
a57 2
on CPAN. The only way to make sure that C<FindBin> will work is to force
the C<BEGIN> block to be executed again:
d105 1
a105 1
$VERSION = "1.43";
d107 1
a107 1
BEGIN
d187 4
@


1.3
log
@perl-5.6.0 + local changes
@
text
@d42 14
d58 1
a58 1
if perl is invoked as
d99 1
a99 1
$VERSION = "1.42";
d124 2
a125 2
     my $IsWin32 = $^O eq 'MSWin32';
     unless(($script =~ m#/# || ($IsWin32 && $script =~ m#\\#))
d132 1
a132 1
	if(-r $scr && (!$IsWin32 || -x _))
@


1.2
log
@perl5.005_03 (stock)
@
text
@d85 1
a85 1
$VERSION = $VERSION = "1.42";
d105 1
a105 1
     ($Bin,$Script) = VMS::Filespec::rmsexpand($0) =~ /(.*\])(.*)/;
@


1.1
log
@perl 5.004_04
@
text
@d58 4
a61 1
Graham Barr E<lt>F<bodg@@tiuk.ti.com>E<gt>
a69 4
=head1 REVISION

$Revision: 1.4 $

d79 1
d85 1
a85 20
$VERSION = $VERSION = sprintf("%d.%02d", q$Revision: 1.4 $ =~ /(\d+)\.(\d+)/);

sub is_abs_path
{
 local $_ = shift if (@@_);
 if ($^O eq 'MSWin32')
  {
   return m#^[a-z]:[\\/]#i;
  }
 elsif ($^O eq 'VMS')
  {
    # If it's a logical name, expand it.
    $_ = $ENV{$_} while /^[\w\$\-]+$/ and $ENV{$_};
    return m!^/! or m![<\[][^.\-\]>]! or /:[^<\[]/;
  }
 else
  {
   return m#^/#;
  }
}
d115 1
a115 3
       my $pathvar = ($IsWin32) ? 'Path' : 'PATH';

       foreach $dir (split(/$Config{'path_sep'}/,$ENV{$pathvar}))
d117 2
a118 1
	if(-r "$dir/$script" && (!$IsWin32 || -x _))
d120 1
a120 1
          $script = "$dir/$script";
d143 2
a144 1
     $script = getcwd() . "/" . $script unless is_abs_path($script);
d156 1
a156 1
       $script = (is_abs_path($linktext))
d158 1
a158 1
                  : $RealBin . "/" . $linktext;
@


1.1.1.1
log
@perl5.005_03
@
text
@d58 1
a58 4
FindBin is supported as part of the core perl distribution. Please send bug
reports to E<lt>F<perlbug@@perl.org>E<gt> using the perlbug program included with perl.

Graham Barr E<lt>F<gbarr@@pobox.com>E<gt>
d67 4
a79 1
use File::Spec;
d85 20
a104 1
$VERSION = $VERSION = "1.42";
d134 3
a136 1
       foreach $dir (File::Spec->path)
d138 1
a138 2
        my $scr = File::Spec->catfile($dir, $script);
	if(-r $scr && (!$IsWin32 || -x _))
d140 1
a140 1
          $script = $scr;
d163 1
a163 2
     $script = File::Spec->catfile(getcwd(), $script)
       unless File::Spec->file_name_is_absolute($script);
d175 1
a175 1
       $script = (File::Spec->file_name_is_absolute($linktext))
d177 1
a177 1
                  : File::Spec->catfile($RealBin, $linktext);
@


1.1.1.2
log
@virgin perl 5.6.0
@
text
@d85 1
a85 1
$VERSION = "1.42";
d105 1
a105 1
     ($Bin,$Script) = VMS::Filespec::rmsexpand($0) =~ /(.*\])(.*)/s;
@


1.1.1.3
log
@stock perl 5.8.0 from CPAN
@
text
@a41 14
=head1 KNOWN ISSUES

If there are two modules using C<FindBin> from different directories
under the same interpreter, this won't work. Since C<FindBin> uses
C<BEGIN> block, it'll be executed only once, and only the first caller
will get it right. This is a problem under mod_perl and other persistent
Perl environments, where you shouldn't use this module. Which also means
that you should avoid using C<FindBin> in modules that you plan to put
on CPAN. The only way to make sure that C<FindBin> will work is to force
the C<BEGIN> block to be executed again:

  delete $INC{'FindBin.pm'};
  require FindBin;

d44 1
a44 1
If perl is invoked as
d85 1
a85 1
$VERSION = "1.43";
d110 2
a111 2
     my $dosish = ($^O eq 'MSWin32' or $^O eq 'os2');
     unless(($script =~ m#/# || ($dosish && $script =~ m#\\#))
d118 1
a118 1
	if(-r $scr && (!$dosish || -x _))
@


1.1.1.4
log
@perl 5.8.3 from CPAN
@
text
@d45 1
a45 1
under the same interpreter, this won't work. Since C<FindBin> uses a
d50 2
a51 8
on CPAN. To make sure that C<FindBin> will work is to call the C<again>
function:

  use FindBin;
  FindBin::again(); # or FindBin->again;

In former versions of FindBin there was no C<again> function. The
workaround was to force the C<BEGIN> block to be executed again:
d99 1
a99 1
$VERSION = "1.44";
d101 1
a101 1
sub init
a180 4

BEGIN { init }

*again = \&init;
@


1.1.1.5
log
@perl 5.8.8 import
@
text
@d27 3
a29 3
directories C<< <root>/bin >> and C<< <root>/lib >>, and then the above
example will allow the use of modules in the lib directory without knowing
where the software tree is installed.
d68 3
a70 4
and I<filename> does not have executable rights and a program called
I<filename> exists in the users C<$ENV{PATH}> which satisfies both B<-x>
and B<-T> then FindBin assumes that it was invoked via the
C<$ENV{PATH}>.
d79 1
a79 2
reports to E<lt>F<perlbug@@perl.org>E<gt> using the perlbug program
included with perl.
d96 1
a96 1
use Cwd qw(getcwd cwd abs_path);
d105 1
a105 9
$VERSION = "1.47";

sub cwd2 {
   my $cwd = getcwd();
   # getcwd might fail if it hasn't access to the current directory.
   # try harder.
   defined $cwd or $cwd = cwd();
   $cwd;
}
d115 1
d117 1
a117 1
   $Bin    = $RealBin    = cwd2();
d161 1
a161 1
     # Ensure $script contains the complete path in case we C<chdir>
d163 1
a163 1
     $script = File::Spec->catfile(cwd2(), $script)
d182 1
a182 5
     if ($Bin) {
      my $BinOld = $Bin;
      $Bin = abs_path($Bin);
      defined $Bin or $Bin = File::Spec->canonpath($BinOld);
     }
d193 1
@


1.1.1.6
log
@import perl 5.10.0 from CPAN
@
text
@d107 1
a107 8
$VERSION = "1.49";


# needed for VMS-specific filename translation
if( $^O eq 'VMS' ) {
    require VMS::Filespec;
    VMS::Filespec->import;
}
a126 1
   $Bin = VMS::Filespec::unixify($Bin) if $^O eq 'VMS';
d134 1
a134 3
     ($Bin,$Script) = VMS::Filespec::rmsexpand($0) =~ /(.*[\]>\/]+)(.*)/s;
     # C<use disk:[dev]/lib> isn't going to work, so unixify first
     ($Bin = VMS::Filespec::unixify($Bin)) =~ s/\/\z//;
d145 1
a145 1
        {
d147 1
a147 9

        # $script can been found via PATH but perl could have
        # been invoked as 'perl file'. Do a dumb check to see
        # if $script is a perl program, if not then keep $script = $0
        #
        # well we actually only check that it is an ASCII file
        # we know its executable so it is probably a script
        # of some sort.
        if(-f $scr && -r _ && ($dosish || -x _) && -s _ && -T _)
d150 13
@


1.1.1.7
log
@import perl 5.10.1
@
text
@d99 1
d107 1
a107 1
$VERSION = "1.50";
@


1.1.1.8
log
@import perl 5.16.3 from CPAN - worked on by Andrew Fresh and myself
@
text
@d62 15
d106 1
a106 1
$VERSION = "1.51";
d148 24
@


