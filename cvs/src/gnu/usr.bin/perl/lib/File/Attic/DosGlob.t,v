head	1.2;
access;
symbols
	OPENBSD_5_5:1.1.1.2.0.6
	OPENBSD_5_5_BASE:1.1.1.2
	OPENBSD_5_4:1.1.1.2.0.2
	OPENBSD_5_4_BASE:1.1.1.2
	PERL_5_16_3:1.1.1.2
	OPENBSD_5_3:1.1.1.1.0.42
	OPENBSD_5_3_BASE:1.1.1.1
	OPENBSD_5_2:1.1.1.1.0.40
	OPENBSD_5_2_BASE:1.1.1.1
	OPENBSD_5_1_BASE:1.1.1.1
	OPENBSD_5_1:1.1.1.1.0.38
	OPENBSD_5_0:1.1.1.1.0.36
	OPENBSD_5_0_BASE:1.1.1.1
	OPENBSD_4_9:1.1.1.1.0.34
	OPENBSD_4_9_BASE:1.1.1.1
	PERL_5_12_2:1.1.1.1
	OPENBSD_4_8:1.1.1.1.0.32
	OPENBSD_4_8_BASE:1.1.1.1
	OPENBSD_4_7:1.1.1.1.0.28
	OPENBSD_4_7_BASE:1.1.1.1
	PERL_5_10_1:1.1.1.1
	OPENBSD_4_6:1.1.1.1.0.30
	OPENBSD_4_6_BASE:1.1.1.1
	OPENBSD_4_5:1.1.1.1.0.26
	OPENBSD_4_5_BASE:1.1.1.1
	PERL_5_10_0:1.1.1.1
	OPENBSD_4_4:1.1.1.1.0.24
	OPENBSD_4_4_BASE:1.1.1.1
	OPENBSD_4_3:1.1.1.1.0.22
	OPENBSD_4_3_BASE:1.1.1.1
	OPENBSD_4_2:1.1.1.1.0.20
	OPENBSD_4_2_BASE:1.1.1.1
	OPENBSD_4_1:1.1.1.1.0.18
	OPENBSD_4_1_BASE:1.1.1.1
	OPENBSD_4_0:1.1.1.1.0.16
	OPENBSD_4_0_BASE:1.1.1.1
	PERL_5_8_8:1.1.1.1
	OPENBSD_3_9:1.1.1.1.0.14
	OPENBSD_3_9_BASE:1.1.1.1
	OPENBSD_3_8:1.1.1.1.0.12
	OPENBSD_3_8_BASE:1.1.1.1
	OPENBSD_3_7:1.1.1.1.0.10
	OPENBSD_3_7_BASE:1.1.1.1
	PERL_5_8_6:1.1.1.1
	OPENBSD_3_6:1.1.1.1.0.8
	OPENBSD_3_6_BASE:1.1.1.1
	PERL_5_8_5:1.1.1.1
	PERL_5_8_3:1.1.1.1
	OPENBSD_3_5:1.1.1.1.0.6
	OPENBSD_3_5_BASE:1.1.1.1
	PERL_5_8_2:1.1.1.1
	OPENBSD_3_4:1.1.1.1.0.4
	OPENBSD_3_4_BASE:1.1.1.1
	OPENBSD_3_3:1.1.1.1.0.2
	OPENBSD_3_3_BASE:1.1.1.1
	PERL_5_8_0:1.1.1.1
	CPAN:1.1.1;
locks; strict;
comment	@# @;
expand	@o@;


1.2
date	2014.03.24.15.05.28;	author afresh1;	state dead;
branches;
next	1.1;

1.1
date	2002.10.27.22.15.00;	author millert;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	2002.10.27.22.15.00;	author millert;	state Exp;
branches;
next	1.1.1.2;

1.1.1.2
date	2013.03.25.20.08.54;	author sthen;	state Exp;
branches;
next	;


desc
@@


1.2
log
@Merge perl-5.18.2 plus local patches, remove old files

OK espie@@ sthen@@ deraadt@@
@
text
@#!./perl

#
# test glob() in File::DosGlob
#

BEGIN {
    chdir 't' if -d 't';
    @@INC = '../lib';
}

print "1..10\n";

# override it in main::
use File::DosGlob 'glob';

# test if $_ takes as the default
my $expected;
if ($^O eq 'MacOS') {
    $expected = $_ = ":op:a*.t";
} else {
    $expected = $_ = "op/a*.t";
}
my @@r = glob;
print "not " if $_ ne $expected;
print "ok 1\n";
print "# |@@r|\nnot " if @@r < 9;
print "ok 2\n";

# check if <*/*> works
if ($^O eq 'MacOS') {
    @@r = <:*:a*.t>;
} else {
    @@r = <*/a*.t>;
}
# atleast {argv,abbrev,anydbm,autoloader,append,arith,array,assignwarn,auto}.t
print "# |@@r|\nnot " if @@r < 9;
print "ok 3\n";
my $r = scalar @@r;

# check if scalar context works
@@r = ();
while (defined($_ = ($^O eq 'MacOS') ? <:*:a*.t> : <*/a*.t>)) {
    print "# $_\n";
    push @@r, $_;
}
print "not " if @@r != $r;
print "ok 4\n";

# check if list context works
@@r = ();
if ($^O eq 'MacOS') {
    for (<:*:a*.t>) {
    	print "# $_\n";
    	push @@r, $_;
    }
} else {
    for (<*/a*.t>) {
    	print "# $_\n";
    	push @@r, $_;
    }
}
print "not " if @@r != $r;
print "ok 5\n";

# test if implicit assign to $_ in while() works
@@r = ();
if ($^O eq 'MacOS') {
    while (<:*:a*.t>) {
    	print "# $_\n";
	push @@r, $_;
    }
} else {
    while (<*/a*.t>) {
    	print "# $_\n";
	push @@r, $_;
    }
}
print "not " if @@r != $r;
print "ok 6\n";

# test if explicit glob() gets assign magic too
my @@s = ();
my $pat = ($^O eq 'MacOS') ? ':*:a*.t': '*/a*.t';
while (glob ($pat)) {
    print "# $_\n";
    push @@s, $_;
}
print "not " if "@@r" ne "@@s";
print "ok 7\n";

# how about in a different package, like?
package Foo;
use File::DosGlob 'glob';
@@s = ();
$pat = $^O eq 'MacOS' ? ':*:a*.t' : '*/a*.t';
while (glob($pat)) {
    print "# $_\n";
    push @@s, $_;
}
print "not " if "@@r" ne "@@s";
print "ok 8\n";

# test if different glob ops maintain independent contexts
@@s = ();
if ($^O eq 'MacOS') {
    while (<:*:a*.t>) {
	my $i = 0;
	print "# $_ <";
	push @@s, $_;
	while (<:*:b*.t>) {
	    print " $_";
	    $i++;
	}
	print " >\n";
    }
} else {
    while (<*/a*.t>) {
	my $i = 0;
	print "# $_ <";
	push @@s, $_;
	while (<*/b*.t>) {
	    print " $_";
	    $i++;
	}
	print " >\n";
    }
}
print "not " if "@@r" ne "@@s";
print "ok 9\n";

# how about a global override, hm?
eval <<'EOT';
use File::DosGlob 'GLOBAL_glob';
package Bar;
@@s = ();
if ($^O eq 'MacOS') {
    while (<:*:a*.t>) {
	my $i = 0;
	print "# $_ <";
	push @@s, $_;
	while (glob ':*:b*.t') {
	    print " $_";
	    $i++;
	}
	print " >\n";
    }
} else {
    while (<*/a*.t>) {
	my $i = 0;
	print "# $_ <";
	push @@s, $_;
	while (glob '*/b*.t') {
	    print " $_";
	    $i++;
	}
	print " >\n";
    }
}
print "not " if "@@r" ne "@@s";
print "ok 10\n";
EOT
@


1.1
log
@Initial revision
@
text
@@


1.1.1.1
log
@stock perl 5.8.0 from CPAN
@
text
@@


1.1.1.2
log
@import perl 5.16.3 from CPAN - worked on by Andrew Fresh and myself
@
text
@d12 1
a12 1
use Test::More tests => 20;
d17 1
a17 2
require Cwd;

d19 5
a23 1
$expected = $_ = "op/a*.t";
d25 11
a35 4
is ($_, $expected, 'test if $_ takes as the default');
cmp_ok(@@r, '>=', 9) or diag("|@@r|");

@@r = <*/a*.t>;
d37 2
a38 1
cmp_ok(@@r, '>=', 9, 'check <*/*>') or diag("|@@r|");
d41 1
d43 1
a43 1
while (defined($_ = <*/a*.t>)) {
d47 2
a48 1
is(scalar @@r, $r, 'check scalar context');
d50 1
d52 10
a61 3
for (<*/a*.t>) {
    print "# $_\n";
    push @@r, $_;
d63 2
a64 1
is(scalar @@r, $r, 'check list context');
d66 1
d68 10
a77 3
while (<*/a*.t>) {
    print "# $_\n";
    push @@r, $_;
d79 2
a80 1
is(scalar @@r, $r, 'implicit assign to $_ in while()');
d82 1
d84 1
a84 1
my $pat = '*/a*.t';
d89 2
a90 1
is("@@r", "@@s", 'explicit glob() gets assign magic too');
d92 1
a94 1
use Test::More;
d96 1
a96 1
$pat = '*/a*.t';
d101 2
a102 1
is("@@r", "@@s", 'in a different package');
d104 1
d106 21
a126 7
while (<*/a*.t>) {
    my $i = 0;
    print "# $_ <";
    push @@s, $_;
    while (<*/b*.t>) {
	print " $_";
	$i++;
a127 1
    print " >\n";
d129 2
a130 1
is("@@r", "@@s", 'different glob ops maintain independent contexts');
d132 1
a132 1
@@s = ();
d136 22
a157 7
while (<*/a*.t>) {
    my $i = 0;
    print "# $_ <";
    push @@s, $_;
    while (glob '*/b*.t') {
	print " $_";
	$i++;
a158 1
    print " >\n";
d160 2
a162 35
is("@@r", "@@s", 'global override');

# Test that a glob pattern containing ()'s works.
# NB. The spaces in the glob patterns need to be backslash escaped.
my $filename_containing_parens = "foo (123) bar";
SKIP: {
    skip("can't create '$filename_containing_parens': $!", 9)
	unless open my $touch, ">", $filename_containing_parens;
    close $touch;

    foreach my $pattern ("foo\\ (*", "*)\\ bar", "foo\\ (1*3)\\ bar") {
	@@r = ();
	eval { @@r = File::DosGlob::glob($pattern) };
	is($@@, "", "eval for glob($pattern)");
	is(scalar @@r, 1);
	is($r[0], $filename_containing_parens);
    }

    1 while unlink $filename_containing_parens;
}

# Test the globbing of a drive relative pattern such as "c:*.pl".
# NB. previous versions of DosGlob inserted "./ after the drive letter to
# make the expansion process work correctly. However, while it is harmless,
# there is no reason for it to be in the result.
my $cwd = Cwd::cwd();
if ($cwd =~ /^([a-zA-Z]:)/) {
    my $drive = $1;
    @@r = ();
    # This assumes we're in the "t" directory.
    eval { @@r = File::DosGlob::glob("${drive}io/*.t") };
    ok(@@r and !grep !m|^${drive}io/[^/]*\.t$|, @@r);
} else {
    pass();
}
@

