head	1.2;
access;
symbols
	OPENBSD_4_8:1.1.1.10.0.4
	OPENBSD_4_8_BASE:1.1.1.10
	OPENBSD_4_7:1.1.1.10.0.2
	OPENBSD_4_7_BASE:1.1.1.10
	PERL_5_10_1:1.1.1.10
	OPENBSD_4_6:1.1.1.9.0.6
	OPENBSD_4_6_BASE:1.1.1.9
	OPENBSD_4_5:1.1.1.9.0.2
	OPENBSD_4_5_BASE:1.1.1.9
	PERL_5_10_0:1.1.1.9
	OPENBSD_4_4:1.1.1.8.0.10
	OPENBSD_4_4_BASE:1.1.1.8
	OPENBSD_4_3:1.1.1.8.0.8
	OPENBSD_4_3_BASE:1.1.1.8
	OPENBSD_4_2:1.1.1.8.0.6
	OPENBSD_4_2_BASE:1.1.1.8
	OPENBSD_4_1:1.1.1.8.0.4
	OPENBSD_4_1_BASE:1.1.1.8
	OPENBSD_4_0:1.1.1.8.0.2
	OPENBSD_4_0_BASE:1.1.1.8
	PERL_5_8_8:1.1.1.8
	OPENBSD_3_9:1.1.1.7.0.6
	OPENBSD_3_9_BASE:1.1.1.7
	OPENBSD_3_8:1.1.1.7.0.4
	OPENBSD_3_8_BASE:1.1.1.7
	OPENBSD_3_7:1.1.1.7.0.2
	OPENBSD_3_7_BASE:1.1.1.7
	PERL_5_8_6:1.1.1.7
	OPENBSD_3_6:1.1.1.6.0.2
	OPENBSD_3_6_BASE:1.1.1.6
	PERL_5_8_5:1.1.1.6
	PERL_5_8_3:1.1.1.6
	OPENBSD_3_5:1.1.1.5.0.2
	OPENBSD_3_5_BASE:1.1.1.5
	PERL_5_8_2:1.1.1.5
	OPENBSD_3_4:1.1.1.4.0.4
	OPENBSD_3_4_BASE:1.1.1.4
	OPENBSD_3_3:1.1.1.4.0.2
	OPENBSD_3_3_BASE:1.1.1.4
	PERL_5_8_0:1.1.1.4
	OPENBSD_3_2:1.1.1.3.0.6
	OPENBSD_3_2_BASE:1.1.1.3
	OPENBSD_3_1:1.1.1.3.0.4
	OPENBSD_3_1_BASE:1.1.1.3
	OPENBSD_3_0:1.1.1.3.0.2
	OPENBSD_3_0_BASE:1.1.1.3
	PERL_5_6_1:1.1.1.3
	OPENBSD_2_9:1.1.1.2.0.6
	OPENBSD_2_9_BASE:1.1.1.2
	OPENBSD_2_8:1.1.1.2.0.4
	OPENBSD_2_8_BASE:1.1.1.2
	OPENBSD_2_7:1.1.1.2.0.2
	OPENBSD_2_7_BASE:1.1.1.2
	PERL_5_6_0:1.1.1.2
	OPENBSD_2_6:1.1.1.1.0.2
	OPENBSD_2_6_BASE:1.1.1.1
	PERL_500503:1.1.1.1
	CPAN:1.1.1;
locks; strict;
comment	@# @;


1.2
date	2010.09.24.14.59.39;	author millert;	state dead;
branches;
next	1.1;

1.1
date	99.04.29.22.40.10;	author millert;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	99.04.29.22.40.10;	author millert;	state Exp;
branches;
next	1.1.1.2;

1.1.1.2
date	2000.04.06.16.09.44;	author millert;	state Exp;
branches;
next	1.1.1.3;

1.1.1.3
date	2001.05.24.18.23.30;	author millert;	state Exp;
branches;
next	1.1.1.4;

1.1.1.4
date	2002.10.27.22.15.00;	author millert;	state Exp;
branches;
next	1.1.1.5;

1.1.1.5
date	2003.12.03.02.44.03;	author millert;	state Exp;
branches;
next	1.1.1.6;

1.1.1.6
date	2004.04.07.21.13.18;	author millert;	state Exp;
branches;
next	1.1.1.7;

1.1.1.7
date	2005.01.15.21.17.18;	author millert;	state Exp;
branches;
next	1.1.1.8;

1.1.1.8
date	2006.03.28.18.48.46;	author millert;	state Exp;
branches;
next	1.1.1.9;

1.1.1.9
date	2008.09.29.17.18.35;	author millert;	state Exp;
branches;
next	1.1.1.10;

1.1.1.10
date	2009.10.12.18.10.59;	author millert;	state Exp;
branches;
next	;


desc
@@


1.2
log
@remove files no longer in perl 5.12.2 (or that have moved)
@
text
@package File::Spec;

require Exporter;

@@ISA = qw(Exporter);
# Items to export into callers namespace by default. Note: do not export
# names by default without a very good reason. Use EXPORT_OK instead.
# Do not simply export all your public functions/methods/constants.
@@EXPORT = qw(
	
);
@@EXPORT_OK = qw($Verbose);

use strict;
use vars qw(@@ISA $VERSION $Verbose);

$VERSION = '0.6';

$Verbose = 0;

require File::Spec::Unix;


sub load {
	my($class,$OS) = @@_;
	if ($OS eq 'VMS') {
		require File::Spec::VMS;
		require VMS::Filespec;
		'File::Spec::VMS'
	} elsif ($OS eq 'os2') {
		require File::Spec::OS2;
		'File::Spec::OS2'
	} elsif ($OS eq 'MacOS') {
		require File::Spec::Mac;
		'File::Spec::Mac'
	} elsif ($OS eq 'MSWin32') {
		require File::Spec::Win32;
		'File::Spec::Win32'
	} else {
		'File::Spec::Unix'
	}
}

@@ISA = load('File::Spec', $^O);

1;
__END__

=head1 NAME

File::Spec - portably perform operations on file names

=head1 SYNOPSIS

C<use File::Spec;>

C<$x=File::Spec-E<gt>catfile('a','b','c');>

which returns 'a/b/c' under Unix.

=head1 DESCRIPTION

This module is designed to support operations commonly performed on file
specifications (usually called "file names", but not to be confused with the
contents of a file, or Perl's file handles), such as concatenating several
directory and file names into a single path, or determining whether a path
is rooted. It is based on code directly taken from MakeMaker 5.17, code
written by Andreas KE<ouml>nig, Andy Dougherty, Charles Bailey, Ilya
Zakharevich, Paul Schinder, and others.

Since these functions are different for most operating systems, each set of
OS specific routines is available in a separate module, including:

	File::Spec::Unix
	File::Spec::Mac
	File::Spec::OS2
	File::Spec::Win32
	File::Spec::VMS

The module appropriate for the current OS is automatically loaded by
File::Spec. Since some modules (like VMS) make use of OS specific
facilities, it may not be possible to load all modules under all operating
systems.

Since File::Spec is object oriented, subroutines should not called directly,
as in:

	File::Spec::catfile('a','b');
	
but rather as class methods:

	File::Spec->catfile('a','b');

For a reference of available functions, please consult L<File::Spec::Unix>,
which contains the entire set, and inherited by the modules for other
platforms. For further information, please see L<File::Spec::Mac>,
L<File::Spec::OS2>, L<File::Spec::Win32>, or L<File::Spec::VMS>.

=head1 SEE ALSO

File::Spec::Unix, File::Spec::Mac, File::Spec::OS2, File::Spec::Win32,
File::Spec::VMS, ExtUtils::MakeMaker

=head1 AUTHORS

Kenneth Albanowski <F<kjahds@@kjahds.com>>, Andy Dougherty
<F<doughera@@lafcol.lafayette.edu>>, Andreas KE<ouml>nig
<F<A.Koenig@@franz.ww.TU-Berlin.DE>>, Tim Bunce <F<Tim.Bunce@@ig.co.uk>>. VMS
support by Charles Bailey <F<bailey@@newman.upenn.edu>>.  OS/2 support by
Ilya Zakharevich <F<ilya@@math.ohio-state.edu>>. Mac support by Paul Schinder
<F<schinder@@pobox.com>>.

=cut


1;
@


1.1
log
@Initial revision
@
text
@@


1.1.1.1
log
@perl5.005_03
@
text
@@


1.1.1.2
log
@virgin perl 5.6.0
@
text
@d3 11
d15 5
a19 1
use vars qw(@@ISA $VERSION);
d21 1
a21 1
$VERSION = '0.8';
d23 22
a44 8
my %module = (MacOS   => 'Mac',
	      MSWin32 => 'Win32',
	      os2     => 'OS2',
	      VMS     => 'VMS');

my $module = $module{$^O} || 'Unix';
require "File/Spec/$module.pm";
@@ISA = ("File::Spec::$module");
d55 1
a55 3
	use File::Spec;

	$x=File::Spec->catfile('a', 'b', 'c');
d57 1
a57 1
which returns 'a/b/c' under Unix. Or:
d59 1
a59 3
	use File::Spec::Functions;

	$x = catfile('a', 'b', 'c');
d81 3
a83 3
File::Spec. Since some modules (like VMS) make use of facilities available
only under that OS, it may not be possible to load all modules under all
operating systems.
d89 1
a89 1

d94 3
a96 6
For simple uses, L<File::Spec::Functions> provides convenient functional
forms of these methods.

For a list of available methods, please consult L<File::Spec::Unix>,
which contains the entire set, and which is inherited by the modules for
other platforms. For further information, please see L<File::Spec::Mac>,
d102 1
a102 1
File::Spec::VMS, File::Spec::Functions, ExtUtils::MakeMaker
d111 6
a116 4
<F<schinder@@pobox.com>>.  abs2rel() and rel2abs() written by
Shigio Yamaguchi <F<shigio@@tamacom.com>>, modified by Barrie Slaymaker
<F<barries@@slaysys.com>>.  splitpath(), splitdir(), catpath() and catdir()
by Barrie Slaymaker.
@


1.1.1.3
log
@stock perl 5.6.1
@
text
@d6 1
a6 1
$VERSION = 0.82 ;
d11 1
a11 2
	      VMS     => 'VMS',
	      epoc    => 'Epoc');
@


1.1.1.4
log
@stock perl 5.8.0 from CPAN
@
text
@d4 1
a4 1
our(@@ISA, $VERSION);
d6 1
a6 1
$VERSION = 0.83 ;
d12 1
a12 5
	      epoc    => 'Epoc',
	      NetWare => 'Win32', # Yes, File::Spec::Win32 works on NetWare.
              dos     => 'OS2',   # Yes, File::Spec::OS2 works on DJGPP.
	      cygwin  => 'Cygwin');

a14 1

a18 1

d61 1
a61 1
Since File::Spec is object oriented, subroutines should not be called directly,
d73 4
a76 195
=head1 METHODS

=over 2

=item canonpath

No physical check on the filesystem, but a logical cleanup of a
path.

    $cpath = File::Spec->canonpath( $path ) ;

=item catdir

Concatenate two or more directory names to form a complete path ending
with a directory. But remove the trailing slash from the resulting
string, because it doesn't look good, isn't necessary and confuses
OS2. Of course, if this is the root directory, don't cut off the
trailing slash :-)

    $path = File::Spec->catdir( @@directories );

=item catfile

Concatenate one or more directory names and a filename to form a
complete path ending with a filename

    $path = File::Spec->catfile( @@directories, $filename );

=item curdir

Returns a string representation of the current directory.

    $curdir = File::Spec->curdir();

=item devnull

Returns a string representation of the null device.

    $devnull = File::Spec->devnull();

=item rootdir

Returns a string representation of the root directory.

    $rootdir = File::Spec->rootdir();

=item tmpdir

Returns a string representation of the first writable directory from a
list of possible temporary directories.  Returns "" if no writable
temporary directories are found.  The list of directories checked
depends on the platform; e.g. File::Spec::Unix checks $ENV{TMPDIR} and
/tmp.

    $tmpdir = File::Spec->tmpdir();

=item updir

Returns a string representation of the parent directory.

    $updir = File::Spec->updir();

=item no_upwards

Given a list of file names, strip out those that refer to a parent
directory. (Does not strip symlinks, only '.', '..', and equivalents.)

    @@paths = File::Spec->no_upwards( @@paths );

=item case_tolerant

Returns a true or false value indicating, respectively, that alphabetic
is not or is significant when comparing file specifications.

    $is_case_tolerant = File::Spec->case_tolerant();

=item file_name_is_absolute

Takes as argument a path and returns true if it is an absolute path.

    $is_absolute = File::Spec->file_name_is_absolute( $path );

This does not consult the local filesystem on Unix, Win32, OS/2, or
Mac OS (Classic).  It does consult the working environment for VMS
(see L<File::Spec::VMS/file_name_is_absolute>).

=item path

Takes no argument, returns the environment variable PATH as an array.

    @@PATH = File::Spec->path();

=item join

join is the same as catfile.

=item splitpath

Splits a path in to volume, directory, and filename portions. On systems
with no concept of volume, returns undef for volume. 

    ($volume,$directories,$file) = File::Spec->splitpath( $path );
    ($volume,$directories,$file) = File::Spec->splitpath( $path, $no_file );

For systems with no syntax differentiating filenames from directories, 
assumes that the last file is a path unless $no_file is true or a 
trailing separator or /. or /.. is present. On Unix this means that $no_file
true makes this return ( '', $path, '' ).

The directory portion may or may not be returned with a trailing '/'.

The results can be passed to L</catpath()> to get back a path equivalent to
(usually identical to) the original path.

=item splitdir

The opposite of L</catdir()>.

    @@dirs = File::Spec->splitdir( $directories );

$directories must be only the directory portion of the path on systems 
that have the concept of a volume or that have path syntax that differentiates
files from directories.

Unlike just splitting the directories on the separator, empty
directory names (C<''>) can be returned, because these are significant
on some OSs.

=item catpath()

Takes volume, directory and file portions and returns an entire path. Under
Unix, $volume is ignored, and directory and file are catenated.  A '/' is
inserted if need be.  On other OSs, $volume is significant.

    $full_path = File::Spec->catpath( $volume, $directory, $file );

=item abs2rel

Takes a destination path and an optional base path returns a relative path
from the base path to the destination path:

    $rel_path = File::Spec->abs2rel( $path ) ;
    $rel_path = File::Spec->abs2rel( $path, $base ) ;

If $base is not present or '', then L<cwd()|Cwd> is used. If $base is relative, 
then it is converted to absolute form using L</rel2abs()>. This means that it
is taken to be relative to L<cwd()|Cwd>.

On systems with the concept of a volume, this assumes that both paths 
are on the $destination volume, and ignores the $base volume. 

On systems that have a grammar that indicates filenames, this ignores the 
$base filename as well. Otherwise all path components are assumed to be
directories.

If $path is relative, it is converted to absolute form using L</rel2abs()>.
This means that it is taken to be relative to L<cwd()|Cwd>.

No checks against the filesystem are made.  On VMS, there is
interaction with the working environment, as logicals and
macros are expanded.

Based on code written by Shigio Yamaguchi.

=item rel2abs()

Converts a relative path to an absolute path. 

    $abs_path = File::Spec->rel2abs( $path ) ;
    $abs_path = File::Spec->rel2abs( $path, $base ) ;

If $base is not present or '', then L<cwd()|Cwd> is used. If $base is relative, 
then it is converted to absolute form using L</rel2abs()>. This means that it
is taken to be relative to L<cwd()|Cwd>.

On systems with the concept of a volume, this assumes that both paths 
are on the $base volume, and ignores the $path volume. 

On systems that have a grammar that indicates filenames, this ignores the 
$base filename as well. Otherwise all path components are assumed to be
directories.

If $path is absolute, it is cleaned up and returned using L</canonpath()>.

No checks against the filesystem are made.  On VMS, there is
interaction with the working environment, as logicals and
macros are expanded.

Based on code written by Shigio Yamaguchi.

=back

For further information, please see L<File::Spec::Unix>,
L<File::Spec::Mac>, L<File::Spec::OS2>, L<File::Spec::Win32>, or
L<File::Spec::VMS>.
d80 2
a81 3
L<File::Spec::Unix>, L<File::Spec::Mac>, L<File::Spec::OS2>,
L<File::Spec::Win32>, L<File::Spec::VMS>, L<File::Spec::Functions>,
L<ExtUtils::MakeMaker>
d85 9
a93 10
Kenneth Albanowski <kjahds@@kjahds.com>, Andy Dougherty
<doughera@@lafcol.lafayette.edu>, Andreas KE<ouml>nig
<A.Koenig@@franz.ww.TU-Berlin.DE>, Tim Bunce <Tim.Bunce@@ig.co.uk.
VMS support by Charles Bailey <bailey@@newman.upenn.edu>.
OS/2 support by Ilya Zakharevich <ilya@@math.ohio-state.edu>.
Mac support by Paul Schinder <schinder@@pobox.com>, and Thomas Wegner
<wegner_thomas@@yahoo.com>.  abs2rel() and rel2abs() written by Shigio
Yamaguchi <shigio@@tamacom.com>, modified by Barrie Slaymaker
<barries@@slaysys.com>.  splitpath(), splitdir(), catpath() and
catdir() by Barrie Slaymaker.
@


1.1.1.5
log
@perl 5.8.2 from CPAN
@
text
@d4 1
a4 1
use vars qw(@@ISA $VERSION);
d6 1
a6 1
$VERSION = '0.86';
d128 4
a131 4
list of possible temporary directories.  Returns the current directory
if no writable temporary directories are found.  The list of directories
checked depends on the platform; e.g. File::Spec::Unix checks $ENV{TMPDIR}
(unless taint is on) and /tmp.
d167 1
a167 2
Takes no argument, returns the environment variable PATH (or the local
platform's equivalent) as a list.
d178 1
a178 1
with no concept of volume, returns '' for volume. 
d210 1
a210 1
Unix, $volume is ignored, and directory and file are concatenated.  A '/' is
d223 6
a228 10
If $base is not present or '', then L<cwd()|Cwd> is used. If $base is
relative, then it is converted to absolute form using
L</rel2abs()>. This means that it is taken to be relative to
L<cwd()|Cwd>.

On systems with the concept of volume, if $path and $base appear to be
on two different volumes, we will not attempt to resolve the two
paths, and we will instead simply return $path.  Note that previous
versions of this module ignored the volume of $base, which resulted in
garbage results part of the time.
d254 2
a255 5
On systems with the concept of volume, if $path and $base appear to be
on two different volumes, we will not attempt to resolve the two
paths, and we will instead simply return $path.  Note that previous
versions of this module ignored the volume of $base, which resulted in
garbage results part of the time.
d284 1
a284 1
<doughera@@lafayette.edu>, Andreas KE<ouml>nig
a292 2

=cut
@


1.1.1.6
log
@perl 5.8.3 from CPAN
@
text
@d6 1
a6 1
$VERSION = '0.87';
@


1.1.1.7
log
@perl 5.8.6 from CPAN
@
text
@d6 1
a6 2
$VERSION = '3.01';
$VERSION = eval $VERSION;
d95 1
a95 1
OS/2. Of course, if this is the root directory, don't cut off the
d130 2
a131 2
checked depends on the platform; e.g. File::Spec::Unix checks C<$ENV{TMPDIR}>
(unless taint is on) and F</tmp>.
d151 1
a151 1
case is not or is significant when comparing file specifications.
d157 1
a157 1
Takes as its argument a path, and returns true if it is an absolute path.
d167 1
a167 1
Takes no argument.  Returns the environment variable C<PATH> (or the local
d185 2
a186 2
assumes that the last file is a path unless C<$no_file> is true or a
trailing separator or F</.> or F</..> is present. On Unix, this means that C<$no_file>
d200 1
a200 1
C<$directories> must be only the directory portion of the path on systems 
d206 1
a206 1
on some OSes.
d211 2
a212 2
Unix, C<$volume> is ignored, and directory and file are concatenated.  A '/' is
inserted if need be.  On other OSes, C<$volume> is significant.
d224 1
a224 1
If C<$base> is not present or '', then L<cwd()|Cwd> is used. If C<$base> is
d229 1
a229 1
On systems with the concept of volume, if C<$path> and C<$base> appear to be
d231 2
a232 2
paths, and we will instead simply return C<$path>.  Note that previous
versions of this module ignored the volume of C<$base>, which resulted in
d236 1
a236 1
C<$base> filename as well. Otherwise all path components are assumed to be
d239 1
a239 1
If C<$path> is relative, it is converted to absolute form using L</rel2abs()>.
d255 1
a255 1
If C<$base> is not present or '', then L<cwd()|Cwd> is used. If C<$base> is relative,
d259 1
a259 1
On systems with the concept of volume, if C<$path> and C<$base> appear to be
d261 2
a262 2
paths, and we will instead simply return C<$path>.  Note that previous
versions of this module ignored the volume of C<$base>, which resulted in
d266 1
a266 1
C<$base> filename as well. Otherwise all path components are assumed to be
d269 1
a269 1
If C<$path> is absolute, it is cleaned up and returned using L</canonpath()>.
d289 1
a289 1
=head1 AUTHOR
d291 10
a300 14
Currently maintained by Ken Williams C<< <KWILLIAMS@@cpan.org> >>.

The vast majority of the code was written by
Kenneth Albanowski C<< <kjahds@@kjahds.com> >>,
Andy Dougherty C<< <doughera@@lafayette.edu> >>,
Andreas KE<ouml>nig C<< <A.Koenig@@franz.ww.TU-Berlin.DE> >>,
Tim Bunce C<< <Tim.Bunce@@ig.co.uk> >>.
VMS support by Charles Bailey C<< <bailey@@newman.upenn.edu> >>.
OS/2 support by Ilya Zakharevich C<< <ilya@@math.ohio-state.edu> >>.
Mac support by Paul Schinder C<< <schinder@@pobox.com> >>, and
Thomas Wegner C<< <wegner_thomas@@yahoo.com> >>.
abs2rel() and rel2abs() written by Shigio Yamaguchi C<< <shigio@@tamacom.com> >>,
modified by Barrie Slaymaker C<< <barries@@slaysys.com> >>.
splitpath(), splitdir(), catpath() and catdir() by Barrie Slaymaker.
@


1.1.1.8
log
@perl 5.8.8 import
@
text
@d6 1
a6 1
$VERSION = '3.12';
d15 1
a15 2
	      symbian => 'Win32', # Yes, File::Spec::Win32 works on symbian.
	      dos     => 'OS2',   # Yes, File::Spec::OS2 works on DJGPP.
a90 7
Note that this does *not* collapse F<x/../y> sections into F<y>.  This
is by design.  If F</foo> on your system is a symlink to F</bar/baz>,
then F</foo/../quux> is actually F</bar/quux>, not F</quux> as a naive
F<../>-removal would give you.  If you want to do this kind of
processing, you probably want C<Cwd>'s C<realpath()> function to
actually traverse the filesystem cleaning up paths like this.

a305 7

=head1 COPYRIGHT

Copyright (c) 2004 by the Perl 5 Porters.  All rights reserved.

This program is free software; you can redistribute it and/or modify
it under the same terms as Perl itself.
@


1.1.1.9
log
@import perl 5.10.0 from CPAN
@
text
@d6 1
a6 1
$VERSION = '3.2501';
a85 1
X<canonpath>
a99 1
X<catdir>
a109 1
X<catfile>
a116 1
X<curdir>
a122 1
X<devnull>
a128 1
X<rootdir>
a134 1
X<tmpdir>
a144 1
X<updir>
a174 1
X<path>
a181 1
X<join, path>
a185 1
X<splitpath> X<split, path>
a203 1
X<splitdir> X<split, dir>
a225 1
X<abs2rel> X<absolute, path> X<relative, path>
d233 1
a233 1
If C<$base> is not present or '', then L<Cwd::cwd()|Cwd> is used. If C<$base> is
d236 1
a236 1
L<Cwd::cwd()|Cwd>.
d249 1
a249 1
This means that it is taken to be relative to L<Cwd::cwd()|Cwd>.
a257 1
X<rel2abs> X<absolute, path> X<relative, path>
d264 1
a264 1
If C<$base> is not present or '', then L<Cwd::cwd()|Cwd> is used. If C<$base> is relative,
d266 1
a266 1
is taken to be relative to L<Cwd::cwd()|Cwd>.
@


1.1.1.10
log
@import perl 5.10.1
@
text
@d6 1
a6 1
$VERSION = '3.30';
@


