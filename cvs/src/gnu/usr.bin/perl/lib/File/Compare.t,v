head	1.1;
branch	1.1.1;
access;
symbols
	OPENBSD_6_0:1.1.1.5.0.10
	OPENBSD_6_0_BASE:1.1.1.5
	OPENBSD_5_9:1.1.1.5.0.4
	OPENBSD_5_9_BASE:1.1.1.5
	OPENBSD_5_8:1.1.1.5.0.6
	OPENBSD_5_8_BASE:1.1.1.5
	PERL_5_20_2:1.1.1.5
	OPENBSD_5_7:1.1.1.5.0.2
	OPENBSD_5_7_BASE:1.1.1.5
	PERL_5_20_1:1.1.1.5
	OPENBSD_5_6:1.1.1.4.0.8
	OPENBSD_5_6_BASE:1.1.1.4
	PERL_5_18_2:1.1.1.4
	PERL:1.1.1
	OPENBSD_5_5:1.1.1.4.0.6
	OPENBSD_5_5_BASE:1.1.1.4
	OPENBSD_5_4:1.1.1.4.0.2
	OPENBSD_5_4_BASE:1.1.1.4
	PERL_5_16_3:1.1.1.4
	OPENBSD_5_3:1.1.1.3.0.14
	OPENBSD_5_3_BASE:1.1.1.3
	OPENBSD_5_2:1.1.1.3.0.12
	OPENBSD_5_2_BASE:1.1.1.3
	OPENBSD_5_1_BASE:1.1.1.3
	OPENBSD_5_1:1.1.1.3.0.10
	OPENBSD_5_0:1.1.1.3.0.8
	OPENBSD_5_0_BASE:1.1.1.3
	OPENBSD_4_9:1.1.1.3.0.6
	OPENBSD_4_9_BASE:1.1.1.3
	PERL_5_12_2:1.1.1.3
	OPENBSD_4_8:1.1.1.3.0.4
	OPENBSD_4_8_BASE:1.1.1.3
	OPENBSD_4_7:1.1.1.3.0.2
	OPENBSD_4_7_BASE:1.1.1.3
	PERL_5_10_1:1.1.1.3
	OPENBSD_4_6:1.1.1.2.0.6
	OPENBSD_4_6_BASE:1.1.1.2
	OPENBSD_4_5:1.1.1.2.0.2
	OPENBSD_4_5_BASE:1.1.1.2
	PERL_5_10_0:1.1.1.2
	OPENBSD_4_4:1.1.1.1.0.24
	OPENBSD_4_4_BASE:1.1.1.1
	OPENBSD_4_3:1.1.1.1.0.22
	OPENBSD_4_3_BASE:1.1.1.1
	OPENBSD_4_2:1.1.1.1.0.20
	OPENBSD_4_2_BASE:1.1.1.1
	OPENBSD_4_1:1.1.1.1.0.18
	OPENBSD_4_1_BASE:1.1.1.1
	OPENBSD_4_0:1.1.1.1.0.16
	OPENBSD_4_0_BASE:1.1.1.1
	PERL_5_8_8:1.1.1.1
	OPENBSD_3_9:1.1.1.1.0.14
	OPENBSD_3_9_BASE:1.1.1.1
	OPENBSD_3_8:1.1.1.1.0.12
	OPENBSD_3_8_BASE:1.1.1.1
	OPENBSD_3_7:1.1.1.1.0.10
	OPENBSD_3_7_BASE:1.1.1.1
	PERL_5_8_6:1.1.1.1
	OPENBSD_3_6:1.1.1.1.0.8
	OPENBSD_3_6_BASE:1.1.1.1
	PERL_5_8_5:1.1.1.1
	PERL_5_8_3:1.1.1.1
	OPENBSD_3_5:1.1.1.1.0.6
	OPENBSD_3_5_BASE:1.1.1.1
	PERL_5_8_2:1.1.1.1
	OPENBSD_3_4:1.1.1.1.0.4
	OPENBSD_3_4_BASE:1.1.1.1
	OPENBSD_3_3:1.1.1.1.0.2
	OPENBSD_3_3_BASE:1.1.1.1
	PERL_5_8_0:1.1.1.1
	CPAN:1.1.1;
locks; strict;
comment	@# @;
expand	@o@;


1.1
date	2002.10.27.22.15.00;	author millert;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	2002.10.27.22.15.00;	author millert;	state Exp;
branches;
next	1.1.1.2;

1.1.1.2
date	2008.09.29.17.18.34;	author millert;	state Exp;
branches;
next	1.1.1.3;

1.1.1.3
date	2009.10.12.18.10.59;	author millert;	state Exp;
branches;
next	1.1.1.4;

1.1.1.4
date	2013.03.25.20.08.54;	author sthen;	state Exp;
branches;
next	1.1.1.5;

1.1.1.5
date	2014.11.17.20.53.08;	author afresh1;	state Exp;
branches;
next	;
commitid	B31cAbBIXiCqnL97;


desc
@@


1.1
log
@Initial revision
@
text
@#!./perl

BEGIN {
  chdir 't' if -d 't';
  @@INC = '../lib';
}

BEGIN {
  our @@TEST = stat "TEST";
  our @@README = stat "README";
  unless (@@TEST && @@README) {
    print "1..0 # Skip: no file TEST or README\n";
    exit 0;
  }
}

print "1..12\n";

use File::Compare qw(compare compare_text);

print "ok 1\n";

# named files, same, existing but different, cause an error
print "not " unless compare("README","README") == 0;
print "ok 2\n";

print "not " unless compare("TEST","README") == 1;
print "ok 3\n";

print "not " unless compare("README","HLAGHLAG") == -1;
                               # a file which doesn't exist
print "ok 4\n";

# compare_text, the same file, different but existing files
# cause error, test sub form.
print "not " unless compare_text("README","README") == 0;
print "ok 5\n";

print "not " unless compare_text("TEST","README") == 1;
print "ok 6\n";

print "not " unless compare_text("TEST","HLAGHLAG") == -1;
print "ok 7\n";

print "not " unless
  compare_text("README","README",sub {$_[0] ne $_[1]}) == 0;
print "ok 8\n";

# filehandle and same file
{
  my $fh;
  open ($fh, "<README") or print "not ";
  binmode($fh);
  print "not " unless compare($fh,"README") == 0;
  print "ok 9\n";
  close $fh;
}

# filehandle and different (but existing) file.
{
  my $fh;
  open ($fh, "<README") or print "not ";
  binmode($fh);
  print "not " unless compare_text($fh,"TEST") == 1;
  print "ok 10\n";
  close $fh;
}

# Different file with contents of known file,
# will use File::Temp to do this, skip rest of
# tests if this doesn't seem to work

my @@donetests;
eval {
  require File::Spec; import File::Spec;
  require File::Path; import File::Path;
  require File::Temp; import File::Temp qw/ :mktemp unlink0 /;

  my $template = File::Spec->catfile(File::Spec->tmpdir, 'fcmpXXXX');
  my($tfh,$filename) = mkstemp($template);
  {
    local $/; #slurp
    my $fh;
    open($fh,'README');
    binmode($fh);
    my $data = <$fh>;
    print $tfh $data;
    close($fh);
  }
  seek($tfh,0,0);
  $donetests[0] = compare($tfh, 'README');
  $donetests[1] = compare($filename, 'README');
  unlink0($tfh,$filename);
};
print "# problems when testing with a tempory file\n" if $@@;

if (@@donetests == 2) {
  print "not " unless $donetests[0] == 0;
  print "ok 11\n";
  if ($^O eq 'VMS') {
    # The open attempt on FROM in File::Compare::compare should fail
    # on this OS since files are not shared by default.
    print "not " unless $donetests[1] == -1;
    print "ok 12\n";
  }
  else {
    print "not " unless $donetests[1] == 0;
    print "ok 12\n";
  }
}
else {
  print "ok 11# Skip\nok 12 # Skip Likely due to File::Temp\n";
}

@


1.1.1.1
log
@stock perl 5.8.0 from CPAN
@
text
@@


1.1.1.2
log
@import perl 5.10.0 from CPAN
@
text
@d17 1
a17 1
print "1..13\n";
a80 4
  # NB. The trailing space is intentional (see [perl #37716])
  open my $tfhSP, ">", "$filename "
      or die "Could not open '$filename ' for writing: $!";
  binmode($tfhSP);
a88 2
    print $tfhSP $data;
    close($tfhSP);
a93 2
  $donetests[2] = compare('README', "$filename ");
  unlink "$filename ";
d95 1
a95 1
print "# problem '$@@' when testing with a temporary file\n" if $@@;
d97 1
a97 1
if (@@donetests == 3) {
d99 11
a109 7
  print "ok 11 # fh/file [$donetests[0]]\n";
  print "not " unless $donetests[1] == 0;
  print "ok 12 # file/file [$donetests[1]]\n";
  print "not " unless $donetests[2] == 0;
  print "ok 13 # ";
  print "TODO" if $^O eq "cygwin"; # spaces after filename silently trunc'd
  print " file/fileCR [$donetests[2]]\n";
d112 1
a112 1
  print "ok 11# Skip\nok 12 # Skip\nok 13 # Skip Likely due to File::Temp\n";
d114 1
@


1.1.1.3
log
@import perl 5.10.1
@
text
@d75 3
a77 1
  require File::Temp; import File::Temp qw/ tempfile unlink0 /;
d79 2
a80 1
  my($tfh,$filename) = tempfile('fcmpXXXX', TMPDIR => 1);
d82 2
a83 3
  my $whsp = get_valid_whitespace();
  open my $tfhSP, ">", "$filename$whsp"
      or die "Could not open '$filename$whsp' for writing: $!";
a97 4
  if ($^O eq 'VMS') {
      unlink0($tfh,$filename);  # queue for later removal
      close $tfh;               # may not be opened shared
  }
d100 2
a101 2
  $donetests[2] = compare('README', "$filename$whsp");
  unlink "$filename$whsp";
a116 7
}

sub get_valid_whitespace {
    return ' ' unless $^O eq 'VMS';
    return (exists $ENV{'DECC$EFS_CHARSET'} && $ENV{'DECC$EFS_CHARSET'} =~ /^[ET1]/i) 
           ? ' '
           : '_';  # traditional mode eats spaces in filenames
@


1.1.1.4
log
@import perl 5.16.3 from CPAN - worked on by Andrew Fresh and myself
@
text
@a114 1
  print "TODO" if $^O eq "vos"; # spaces after filename silently trunc'd
@


1.1.1.5
log
@Import perl-5.20.1
@
text
@a7 3
our $TEST   = "TEST";
our $README = "README";

d17 2
a18 1
use Test::More ( tests => 16 );
d21 12
a32 2
# Upon success, compare() and compare_text() return a Unix-ish 0
# rather than a Perl-ish 1.
d34 4
a37 11
is(compare($README,$README), 0, "compare file to itself");
is(compare($TEST,$README), 1, "compare file to different file");
is(compare($README,"HLAGHLAG"), -1,
    "compare file to nonexistent file returns error value");

is(compare_text($README,$README), 0, "compare_text file to itself");
is(compare_text($TEST,$README), 1, "compare_text file to different file");
is(compare_text($TEST,"HLAGHLAG"), -1,
    "compare_text file to nonexistent file returns error value");
is(compare_text($README,$README,sub {$_[0] ne $_[1]}), 0,
    "compare_text with code ref as third argument, file to itself");
d39 2
a40 2
is(compare_text($TEST,$README,sub {$_[0] ne $_[1]}), 1,
    "compare_text with code ref as third argument, file to different file");
d42 8
d51 6
a56 6
    open my $fh, '<', $README
        or die "Unable to open $README for reading: $!";
    binmode($fh);
    is(compare($fh,$README), 0,
        "compare file with filehandle open to same file");
    close $fh;
d59 1
d61 6
a66 6
    open my $fh, '<', $README
        or die "Unable to open $README for reading: $!";
    binmode($fh);
    is(compare($fh,$TEST), 1,
        "compare file with filehandle open to different file");
    close $fh;
d71 1
a71 1
# tests if this does not seem to work
d86 1
a86 1
    open($fh,$README);
d95 1
a95 1
  $donetests[0] = compare($tfh, $README);
d100 1
a100 1
  $donetests[1] = compare($filename, $README);
d102 1
a102 1
  $donetests[2] = compare($README, "$filename$whsp");
d107 10
a116 15
SKIP: {
    my $why = "Likely due to File::Temp";
    my $how_many = 3;
    my $have_some_feature = (@@donetests == 3);
    skip $why, $how_many unless $have_some_feature;

    is($donetests[0], 0, "fh/file [$donetests[0]]");
    is($donetests[1], 0, "file/file [$donetests[1]]");
    TODO: {
        my $why = "spaces after filename silently truncated";
        my $how_many = 1;
        my $condition = ($^O eq "cygwin") or ($^O eq "vos");
        todo_skip $why, $how_many if $condition;
        is($donetests[2], 0, "file/fileCR [$donetests[2]]");
    }
d118 2
a119 20

{
    local $@@;
    eval { compare(); 1 };
    like($@@, qr/Usage:\s+compare/,
        "detect insufficient arguments to compare()");
}

{
    local $@@;
    eval { compare(undef, $README); 1 };
    like($@@, qr/from\s+undefined/,
        "compare() fails: first argument undefined");
}

{
    local $@@;
    eval { compare($README, undef ); 1 };
    like($@@, qr/to\s+undefined/,
        "compare() fails: second argument undefined");
d124 1
a124 1
    return (exists $ENV{'DECC$EFS_CHARSET'} && $ENV{'DECC$EFS_CHARSET'} =~ /^[ET1]/i)
@


