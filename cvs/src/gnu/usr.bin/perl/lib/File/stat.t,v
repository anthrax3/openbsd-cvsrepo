head	1.2;
access;
symbols
	OPENBSD_6_2_BASE:1.2
	PERL_5_24_2:1.1.1.6
	OPENBSD_6_1:1.2.0.4
	OPENBSD_6_1_BASE:1.2
	OPENBSD_6_0:1.1.1.5.0.10
	OPENBSD_6_0_BASE:1.1.1.5
	OPENBSD_5_9:1.1.1.5.0.4
	OPENBSD_5_9_BASE:1.1.1.5
	OPENBSD_5_8:1.1.1.5.0.6
	OPENBSD_5_8_BASE:1.1.1.5
	PERL_5_20_2:1.1.1.5
	OPENBSD_5_7:1.1.1.5.0.2
	OPENBSD_5_7_BASE:1.1.1.5
	PERL_5_20_1:1.1.1.5
	OPENBSD_5_6:1.1.1.4.0.4
	OPENBSD_5_6_BASE:1.1.1.4
	PERL_5_18_2:1.1.1.4
	PERL:1.1.1
	OPENBSD_5_5:1.1.1.3.0.6
	OPENBSD_5_5_BASE:1.1.1.3
	OPENBSD_5_4:1.1.1.3.0.2
	OPENBSD_5_4_BASE:1.1.1.3
	PERL_5_16_3:1.1.1.3
	OPENBSD_5_3:1.1.1.2.0.10
	OPENBSD_5_3_BASE:1.1.1.2
	OPENBSD_5_2:1.1.1.2.0.8
	OPENBSD_5_2_BASE:1.1.1.2
	OPENBSD_5_1_BASE:1.1.1.2
	OPENBSD_5_1:1.1.1.2.0.6
	OPENBSD_5_0:1.1.1.2.0.4
	OPENBSD_5_0_BASE:1.1.1.2
	OPENBSD_4_9:1.1.1.2.0.2
	OPENBSD_4_9_BASE:1.1.1.2
	PERL_5_12_2:1.1.1.2
	OPENBSD_4_8:1.1.1.1.0.32
	OPENBSD_4_8_BASE:1.1.1.1
	OPENBSD_4_7:1.1.1.1.0.28
	OPENBSD_4_7_BASE:1.1.1.1
	PERL_5_10_1:1.1.1.1
	OPENBSD_4_6:1.1.1.1.0.30
	OPENBSD_4_6_BASE:1.1.1.1
	OPENBSD_4_5:1.1.1.1.0.26
	OPENBSD_4_5_BASE:1.1.1.1
	PERL_5_10_0:1.1.1.1
	OPENBSD_4_4:1.1.1.1.0.24
	OPENBSD_4_4_BASE:1.1.1.1
	OPENBSD_4_3:1.1.1.1.0.22
	OPENBSD_4_3_BASE:1.1.1.1
	OPENBSD_4_2:1.1.1.1.0.20
	OPENBSD_4_2_BASE:1.1.1.1
	OPENBSD_4_1:1.1.1.1.0.18
	OPENBSD_4_1_BASE:1.1.1.1
	OPENBSD_4_0:1.1.1.1.0.16
	OPENBSD_4_0_BASE:1.1.1.1
	PERL_5_8_8:1.1.1.1
	OPENBSD_3_9:1.1.1.1.0.14
	OPENBSD_3_9_BASE:1.1.1.1
	OPENBSD_3_8:1.1.1.1.0.12
	OPENBSD_3_8_BASE:1.1.1.1
	OPENBSD_3_7:1.1.1.1.0.10
	OPENBSD_3_7_BASE:1.1.1.1
	PERL_5_8_6:1.1.1.1
	OPENBSD_3_6:1.1.1.1.0.8
	OPENBSD_3_6_BASE:1.1.1.1
	PERL_5_8_5:1.1.1.1
	PERL_5_8_3:1.1.1.1
	OPENBSD_3_5:1.1.1.1.0.6
	OPENBSD_3_5_BASE:1.1.1.1
	PERL_5_8_2:1.1.1.1
	OPENBSD_3_4:1.1.1.1.0.4
	OPENBSD_3_4_BASE:1.1.1.1
	OPENBSD_3_3:1.1.1.1.0.2
	OPENBSD_3_3_BASE:1.1.1.1
	PERL_5_8_0:1.1.1.1
	CPAN:1.1.1;
locks; strict;
comment	@# @;
expand	@o@;


1.2
date	2017.02.05.00.32.15;	author afresh1;	state Exp;
branches;
next	1.1;
commitid	cxJ08BvJA9Pt2PTM;

1.1
date	2002.10.27.22.15.00;	author millert;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	2002.10.27.22.15.00;	author millert;	state Exp;
branches;
next	1.1.1.2;

1.1.1.2
date	2010.09.24.14.48.41;	author millert;	state Exp;
branches;
next	1.1.1.3;

1.1.1.3
date	2013.03.25.20.08.54;	author sthen;	state Exp;
branches;
next	1.1.1.4;

1.1.1.4
date	2014.03.24.14.59.03;	author afresh1;	state Exp;
branches;
next	1.1.1.5;

1.1.1.5
date	2014.11.17.20.53.08;	author afresh1;	state Exp;
branches;
next	1.1.1.6;
commitid	B31cAbBIXiCqnL97;

1.1.1.6
date	2017.08.14.13.46.14;	author afresh1;	state Exp;
branches;
next	;
commitid	fAzrs78vdW2Yfc6A;


desc
@@


1.2
log
@Fix merge issues, remove excess files - match perl-5.24.1 dist
@
text
@#!./perl

BEGIN {
    chdir 't' if -d 't';
    @@INC = '../lib';
}

use strict;
use warnings;
use Test::More;
use Config qw( %Config );
use File::Temp qw( tempfile tempdir );

use File::stat;

my (undef, $file) = tempfile(UNLINK => 1);

{
    my @@stat = CORE::stat $file;
    my $stat = File::stat::stat($file);
    isa_ok($stat, 'File::stat', 'should build a stat object');
    is_deeply($stat, \@@stat, '... and matches the builtin');

    my $i = 0;
    foreach ([dev => 'device number'],
             [ino => 'inode number'],
             [mode => 'file mode'],
             [nlink => 'number of links'],
             [uid => 'owner uid'],
             [gid => 'group id'],
             [rdev => 'device identifier'],
             [size => 'file size'],
             [atime => 'last access time'],
             [mtime => 'last modify time'],
             [ctime => 'change time'],
             [blksize => 'IO block size'],
             [blocks => 'number of blocks']) {
        my ($meth, $desc) = @@$_;
        # On OS/2 (fake) ino is not constant, it is incremented each time
    SKIP: {
            skip('inode number is not constant on OS/2', 1)
                if $i == 1 && $^O eq 'os2';
            is($stat->$meth, $stat[$i], "$desc in position $i");
        }
        ++$i;
    }

    my $stat2 = stat $file;
    isa_ok($stat2, 'File::stat',
           'File::stat exports stat, overriding the builtin');
    is_deeply($stat2, $stat, '... and matches the direct call');
}

sub test_X_ops {
    my ($file, $desc_tail, $skip) = @@_;
    my @@stat = CORE::stat $file;
    my $stat = File::stat::stat($file);
    my $lstat = File::stat::lstat($file);
    isa_ok($stat, 'File::stat', 'should build a stat object');

    for my $op (split //, "rwxoRWXOezsfdlpSbcugkMCA") {
        if ($skip && $op =~ $skip) {
            note("Not testing -A $desc_tail");
            next;
        }
        my $stat = $op eq 'l' ? $lstat : $stat;
        for my $access ('', 'use filetest "access";') {
            my ($warnings, $awarn, $vwarn, $rv);
            my $desc = $access
                ? "for -$op under use filetest 'access' $desc_tail"
                    : "for -$op $desc_tail";
            {
                local $SIG{__WARN__} = sub {
                    my $w = shift;
                    if ($w =~ /^File::stat ignores VMS ACLs/) {
                        ++$vwarn;
                    } elsif ($w =~ /^File::stat ignores use filetest 'access'/) {
                        ++$awarn;
                    } else {
                        $warnings .= $w;
                    }
                };
                $rv = eval "$access; -$op \$stat";
            }
            is($@@, '', "Overload succeeds $desc");

            if ($^O eq "VMS" && $op =~ /[rwxRWX]/) {
                is($vwarn, 1, "warning about VMS ACLs $desc");
            } else {
                is($rv, eval "-$op \$file", "correct overload $desc")
                    unless $access;
                is($vwarn, undef, "no warnings about VMS ACLs $desc");
            }

            # 111640 - File::stat bogus index check in overload
            if ($access && $op =~ /[rwxRXW]/) {
                # these should all warn with filetest access
                is($awarn, 1,
                   "produced the right warning $desc");
            } else {
                # -d and others shouldn't warn
                is($awarn, undef, "should be no warning $desc")
            }

            is($warnings, undef, "no other warnings seen $desc");
        }
    }
}

foreach ([file => $file],
         [dir => tempdir(CLEANUP => 1)]) {
    my ($what, $pathname) = @@$_;
    test_X_ops($pathname, "for $what $pathname");

    my $orig_mode = (CORE::stat $pathname)[2];

    my $mode = 01000;
    while ($mode) {
        $mode >>= 1;
        my $mode_oct = sprintf "0%03o", $mode;
        chmod $mode, $pathname or die "Can't chmod $mode_oct $pathname: $!";
        test_X_ops($pathname, "for $what with mode=$mode_oct");
    }
    chmod $orig_mode, $pathname
        or die "Can't restore permissions on $pathname to ", sprintf("%#o", $orig_mode);
}

SKIP: {
    -e $^X && -x $^X or skip "$^X is not present and executable", 4;
    $^O eq "VMS" and skip "File::stat ignores VMS ACLs", 4;

    # Other tests running in parallel mean that $^X is read, updating its atime
    test_X_ops($^X, "for $^X", qr/A/);
}


my $stat = File::stat::stat($file);
isa_ok($stat, 'File::stat', 'should build a stat object');

for (split //, "tTB") {
    eval "-$_ \$stat";
    like( $@@, qr/\Q-$_ is not implemented/, "-$_ overload fails" );
}

SKIP: {
	local *STAT;
	skip("Could not open file: $!", 2) unless open(STAT, $file);
	isa_ok(File::stat::stat('STAT'), 'File::stat',
	       '... should be able to find filehandle');

	package foo;
	local *STAT = *main::STAT;
	my $stat2 = File::stat::stat('STAT');
	main::isa_ok($stat2, 'File::stat',
		     '... and filehandle in another package');
	close STAT;

#	VOS open() updates atime; ignore this error (posix-975).
	my $stat3 = $stat2;
	if ($^O eq 'vos') {
		$$stat3[8] = $$stat[8];
	}

	main::skip("Win32: different stat-info on filehandle", 1) if $^O eq 'MSWin32';
	main::skip("dos: inode number is fake on dos", 1) if $^O eq 'dos';

	main::skip("OS/2: inode number is not constant on os/2", 1) if $^O eq 'os2';

	main::is_deeply($stat, $stat3, '... and must match normal stat');
}

SKIP:
{   # RT #111638
    skip "We can't check for FIFOs", 2 unless defined &Fcntl::S_ISFIFO;
    skip "No pipes", 2 unless defined $Config{d_pipe};
    pipe my ($rh, $wh)
      or skip "Couldn't create a pipe: $!", 2;
    skip "Built-in -p doesn't detect a pipe", 2 unless -p $rh;

    my $pstat = File::stat::stat($rh);
    ok(!-p($stat), "-p should be false on a file");
    ok(-p($pstat), "check -p detects a pipe");
}

# Testing pretty much anything else is unportable.

done_testing;

# ex: set ts=8 sts=4 sw=4 et:
@


1.1
log
@Initial revision
@
text
@d8 2
d11 2
d14 1
a14 11
BEGIN {
    our $hasst;
    eval { my @@n = stat "TEST" };
    $hasst = 1 unless $@@ && $@@ =~ /unimplemented/;
    unless ($hasst) { plan skip_all => "no stat"; exit 0 }
    use Config;
    $hasst = 0 unless $Config{'i_sysstat'} eq 'define';
    unless ($hasst) { plan skip_all => "no sys/stat.h"; exit 0 }
    our @@stat = stat "TEST"; # This is the function stat.
    unless (@@stat) { plan skip_all => "1..0 # Skip: no file TEST"; exit 0 }
}
d16 1
a16 1
plan tests => 19;
d18 35
a52 1
use_ok( 'File::stat' );
d54 55
a108 2
my $stat = File::stat::stat( "TEST" ); # This is the OO stat.
ok( ref($stat), 'should build a stat object' );
d110 17
a126 1
is( $stat->dev, $stat[0], "device number in position 0" );
a127 1
# On OS/2 (fake) ino is not constant, it is incremented each time
d129 5
a133 2
	skip('inode number is not constant on OS/2', 1) if $^O eq 'os2';
	is( $stat->ino, $stat[1], "inode number in position 1" );
a135 1
is( $stat->mode, $stat[2], "file mode in position 2" );
d137 2
a138 1
is( $stat->nlink, $stat[3], "number of links in position 3" );
d140 4
a143 17
is( $stat->uid, $stat[4], "owner uid in position 4" );

is( $stat->gid, $stat[5], "group id in position 5" );

is( $stat->rdev, $stat[6], "device identifier in position 6" );

is( $stat->size, $stat[7], "file size in position 7" );

is( $stat->atime, $stat[8], "last access time in position 8" );

is( $stat->mtime, $stat[9], "last modify time in position 9" );

is( $stat->ctime, $stat[10], "change time in position 10" );

is( $stat->blksize, $stat[11], "IO block size in position 11" );

is( $stat->blocks, $stat[12], "number of blocks in position 12" );
d147 3
a149 2
	skip("Could not open file: $!", 2) unless open(STAT, 'TEST');
	ok( File::stat::stat('STAT'), '... should be able to find filehandle' );
d153 3
a155 2
	main::ok( my $stat2 = File::stat::stat('STAT'), 
		'... and filehandle in another package' );
d169 1
a169 1
	main::is( "@@$stat", "@@$stat3", '... and must match normal stat' );
d172 12
a183 3
local $!;
$stat = stat '/notafile';
isn't( $!, '', 'should populate $!, given invalid file' );
d186 4
@


1.1.1.1
log
@stock perl 5.8.0 from CPAN
@
text
@@


1.1.1.2
log
@Perl 5.12.2 from CPAN
@
text
@a8 1
use Config qw( %Config );
a10 12
    # Check whether the build is configured with -Dmksymlinks
    our $Dmksymlinks =
        grep { /^config_arg\d+$/ && $Config{$_} eq '-Dmksymlinks' }
        keys %Config;

    # Resolve symlink to ./TEST if this build is configured with -Dmksymlinks
    our $file = 'TEST';
    if ( $Dmksymlinks ) {
        $file = readlink $file;
        die "Can't readlink(TEST): $!" if ! defined $file;
    }

d12 1
a12 1
    eval { my @@n = stat $file };
d18 2
a19 2
    our @@stat = stat $file; # This is the function stat.
    unless (@@stat) { plan skip_all => "1..0 # Skip: no file $file"; exit 0 }
d22 1
a22 1
plan tests => 19 + 24*2 + 3;
d26 1
a26 1
my $stat = File::stat::stat( $file ); # This is the OO stat.
a58 17
for (split //, "rwxoRWXOezsfdlpSbcugkMCA") {
    SKIP: {
        $^O eq "VMS" and index("rwxRWX", $_) >= 0
            and skip "File::stat ignores VMS ACLs", 2;

        my $rv = eval "-$_ \$stat";
        ok( !$@@,                            "-$_ overload succeeds" )
            or diag( $@@ );
        is( $rv, eval "-$_ \$file",         "correct -$_ overload" );
    }
}

for (split //, "tTB") {
    eval "-$_ \$stat";
    like( $@@, qr/\Q-$_ is not implemented/, "-$_ overload fails" );
}

d61 1
a61 1
	skip("Could not open file: $!", 2) unless open(STAT, $file);
a83 1

d86 1
a86 1
isnt( $!, '', 'should populate $!, given invalid file' );
@


1.1.1.3
log
@import perl 5.16.3 from CPAN - worked on by Andrew Fresh and myself
@
text
@d17 2
a18 5
    # Resolve symlink to ./lib/File/stat.t if this build is configured
    # with -Dmksymlinks
    # Originally we worked with ./TEST, but other test scripts read from
    # that file and modify its access time.
    our $file = '../lib/File/stat.t';
d21 1
a21 1
        die "Can't readlink(../lib/File/stat.t): $!" if ! defined $file;
d31 2
d35 1
a35 10
# Originally this was done in the BEGIN block, but perl is still
# compiling (and hence reading) the script at that point, which can
# change the file's access time, causing a different in the comparison
# tests if the clock ticked over the second between the stat() and the
# final read.
# At this point all of the reading is done.
our @@stat = stat $file; # This is the function stat.
unless (@@stat) { plan skip_all => "1..0 # Skip: no file $file"; exit 0 }

plan tests => 19 + 24*2 + 4 + 3;
a82 15

SKIP: {
    my $file = '../perl';
    -e $file && -x $file or skip "$file is not present and executable", 4;
    $^O eq "VMS" and skip "File::stat ignores VMS ACLs", 4;

    my $stat = File::stat::stat( $file ); # This is the OO stat.
    foreach (qw/x X/) {
    my $rv = eval "-$_ \$stat";
    ok( !$@@,                            "-$_ overload succeeds" )
      or diag( $@@ );
    is( $rv, eval "-$_ \$file",         "correct -$_ overload" );
  }
}

@


1.1.1.4
log
@Import perl-5.18.2

OK espie@@ sthen@@ deraadt@@
@
text
@a7 2
use strict;
use warnings;
a9 1
use File::Temp qw( tempfile tempdir );
d11 35
a45 1
use File::stat;
d47 1
a47 1
my (undef, $file) = tempfile();
d49 2
a50 29
{
    my @@stat = CORE::stat $file;
    my $stat = File::stat::stat($file);
    isa_ok($stat, 'File::stat', 'should build a stat object');
    is_deeply($stat, \@@stat, '... and matches the builtin');

    my $i = 0;
    foreach ([dev => 'device number'],
             [ino => 'inode number'],
             [mode => 'file mode'],
             [nlink => 'number of links'],
             [uid => 'owner uid'],
             [gid => 'group id'],
             [rdev => 'device identifier'],
             [size => 'file size'],
             [atime => 'last access time'],
             [mtime => 'last modify time'],
             [ctime => 'change time'],
             [blksize => 'IO block size'],
             [blocks => 'number of blocks']) {
        my ($meth, $desc) = @@$_;
        # On OS/2 (fake) ino is not constant, it is incremented each time
    SKIP: {
            skip('inode number is not constant on OS/2', 1)
                if $i == 1 && $^O eq 'os2';
            is($stat->$meth, $stat[$i], "$desc in position $i");
        }
        ++$i;
    }
d52 1
a52 56
    my $stat2 = stat $file;
    isa_ok($stat2, 'File::stat',
           'File::stat exports stat, overriding the builtin');
    is_deeply($stat2, $stat, '... and matches the direct call');
}

sub test_X_ops {
    my ($file, $desc_tail, $skip) = @@_;
    my @@stat = CORE::stat $file;
    my $stat = File::stat::stat($file);
    my $lstat = File::stat::lstat($file);
    isa_ok($stat, 'File::stat', 'should build a stat object');

    for my $op (split //, "rwxoRWXOezsfdlpSbcugkMCA") {
        if ($skip && $op =~ $skip) {
            note("Not testing -A $desc_tail");
            next;
        }
        my $stat = $op eq 'l' ? $lstat : $stat;
        for my $access ('', 'use filetest "access";') {
            my ($warnings, $awarn, $vwarn, $rv);
            my $desc = $access
                ? "for -$op under use filetest 'access' $desc_tail"
                    : "for -$op $desc_tail";
            {
                local $SIG{__WARN__} = sub {
                    my $w = shift;
                    if ($w =~ /^File::stat ignores VMS ACLs/) {
                        ++$vwarn;
                    } elsif ($w =~ /^File::stat ignores use filetest 'access'/) {
                        ++$awarn;
                    } else {
                        $warnings .= $w;
                    }
                };
                $rv = eval "$access; -$op \$stat";
            }
            is($@@, '', "Overload succeeds $desc");

            if ($^O eq "VMS" && $op =~ /[rwxRWX]/) {
                is($vwarn, 1, "warning about VMS ACLs $desc");
            } else {
                is($rv, eval "-$op \$file", "correct overload $desc")
                    unless $access;
                is($vwarn, undef, "no warnings about VMS ACLs $desc");
            }

            # 111640 - File::stat bogus index check in overload
            if ($access && $op =~ /[rwxRXW]/) {
                # these should all warn with filetest access
                is($awarn, 1,
                   "produced the right warning $desc");
            } else {
                # -d and others shouldn't warn
                is($awarn, undef, "should be no warning $desc")
            }
d54 4
a57 3
            is($warnings, undef, "no other warnings seen $desc");
        }
    }
d60 31
a90 11
foreach ([file => $file],
         [dir => tempdir(CLEANUP => 1)]) {
    my ($what, $pathname) = @@$_;
    test_X_ops($pathname, "for $what $pathname");

    my $mode = 01000;
    while ($mode) {
        $mode >>= 1;
        my $mode_oct = sprintf "0%03o", $mode;
        chmod $mode, $pathname or die "Can't chmod $mode_oct $pathname: $!";
        test_X_ops($pathname, "for $what with mode=$mode_oct");
a91 2
    chmod 0600, $pathname
        or die "Can't restore permissions on $pathname to 0600";
d95 2
a96 1
    -e $^X && -x $^X or skip "$^X is not present and executable", 4;
d99 7
a105 2
    # Other tests running in parallel mean that $^X is read, updating its atime
    test_X_ops($^X, "for $^X", qr/A/);
a108 3
my $stat = File::stat::stat($file);
isa_ok($stat, 'File::stat', 'should build a stat object');

d117 1
a117 2
	isa_ok(File::stat::stat('STAT'), 'File::stat',
	       '... should be able to find filehandle');
d121 2
a122 3
	my $stat2 = File::stat::stat('STAT');
	main::isa_ok($stat2, 'File::stat',
		     '... and filehandle in another package');
d136 1
a136 1
	main::is_deeply($stat, $stat3, '... and must match normal stat');
d139 4
a142 12
SKIP:
{   # RT #111638
    skip "We can't check for FIFOs", 2 unless defined &Fcntl::S_ISFIFO;
    skip "No pipes", 2 unless defined $Config{d_pipe};
    pipe my ($rh, $wh)
      or skip "Couldn't create a pipe: $!", 2;
    skip "Built-in -p doesn't detect a pipe", 2 unless -p $rh;

    my $pstat = File::stat::stat($rh);
    ok(!-p($stat), "-p should be false on a file");
    ok(-p($pstat), "check -p detects a pipe");
}
a144 9

done_testing;

# Local variables:
# cperl-indent-level: 4
# indent-tabs-mode: nil
# End:
#
# ex: set ts=8 sts=4 sw=4 et:
@


1.1.1.5
log
@Import perl-5.20.1
@
text
@a114 2
    my $orig_mode = (CORE::stat $pathname)[2];

d122 2
a123 2
    chmod $orig_mode, $pathname
        or die "Can't restore permissions on $pathname to ", sprintf("%#o", $orig_mode);
@


1.1.1.6
log
@Import perl-5.24.2
@
text
@d16 1
a16 1
my (undef, $file) = tempfile(UNLINK => 1);
d189 5
@


