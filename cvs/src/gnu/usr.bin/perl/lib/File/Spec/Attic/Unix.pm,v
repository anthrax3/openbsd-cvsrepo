head	1.2;
access;
symbols
	OPENBSD_4_8:1.1.1.8.0.4
	OPENBSD_4_8_BASE:1.1.1.8
	OPENBSD_4_7:1.1.1.8.0.2
	OPENBSD_4_7_BASE:1.1.1.8
	PERL_5_10_1:1.1.1.8
	OPENBSD_4_6:1.1.1.7.0.6
	OPENBSD_4_6_BASE:1.1.1.7
	OPENBSD_4_5:1.1.1.7.0.2
	OPENBSD_4_5_BASE:1.1.1.7
	PERL_5_10_0:1.1.1.7
	OPENBSD_4_4:1.1.1.6.0.10
	OPENBSD_4_4_BASE:1.1.1.6
	OPENBSD_4_3:1.1.1.6.0.8
	OPENBSD_4_3_BASE:1.1.1.6
	OPENBSD_4_2:1.1.1.6.0.6
	OPENBSD_4_2_BASE:1.1.1.6
	OPENBSD_4_1:1.1.1.6.0.4
	OPENBSD_4_1_BASE:1.1.1.6
	OPENBSD_4_0:1.1.1.6.0.2
	OPENBSD_4_0_BASE:1.1.1.6
	PERL_5_8_8:1.1.1.6
	OPENBSD_3_9:1.1.1.5.0.10
	OPENBSD_3_9_BASE:1.1.1.5
	OPENBSD_3_8:1.1.1.5.0.8
	OPENBSD_3_8_BASE:1.1.1.5
	OPENBSD_3_7:1.1.1.5.0.6
	OPENBSD_3_7_BASE:1.1.1.5
	PERL_5_8_6:1.1.1.5
	OPENBSD_3_6:1.1.1.5.0.4
	OPENBSD_3_6_BASE:1.1.1.5
	PERL_5_8_5:1.1.1.5
	PERL_5_8_3:1.1.1.5
	OPENBSD_3_5:1.1.1.5.0.2
	OPENBSD_3_5_BASE:1.1.1.5
	PERL_5_8_2:1.1.1.5
	OPENBSD_3_4:1.1.1.4.0.4
	OPENBSD_3_4_BASE:1.1.1.4
	OPENBSD_3_3:1.1.1.4.0.2
	OPENBSD_3_3_BASE:1.1.1.4
	PERL_5_8_0:1.1.1.4
	OPENBSD_3_2:1.1.1.3.0.6
	OPENBSD_3_2_BASE:1.1.1.3
	OPENBSD_3_1:1.1.1.3.0.4
	OPENBSD_3_1_BASE:1.1.1.3
	OPENBSD_3_0:1.1.1.3.0.2
	OPENBSD_3_0_BASE:1.1.1.3
	PERL_5_6_1:1.1.1.3
	OPENBSD_2_9:1.1.1.2.0.6
	OPENBSD_2_9_BASE:1.1.1.2
	OPENBSD_2_8:1.1.1.2.0.4
	OPENBSD_2_8_BASE:1.1.1.2
	OPENBSD_2_7:1.1.1.2.0.2
	OPENBSD_2_7_BASE:1.1.1.2
	PERL_5_6_0:1.1.1.2
	OPENBSD_2_6:1.1.1.1.0.2
	OPENBSD_2_6_BASE:1.1.1.1
	PERL_500503:1.1.1.1
	CPAN:1.1.1;
locks; strict;
comment	@# @;


1.2
date	2010.09.24.14.59.40;	author millert;	state dead;
branches;
next	1.1;

1.1
date	99.04.29.22.40.10;	author millert;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	99.04.29.22.40.10;	author millert;	state Exp;
branches;
next	1.1.1.2;

1.1.1.2
date	2000.04.06.16.09.44;	author millert;	state Exp;
branches;
next	1.1.1.3;

1.1.1.3
date	2001.05.24.18.23.32;	author millert;	state Exp;
branches;
next	1.1.1.4;

1.1.1.4
date	2002.10.27.22.15.00;	author millert;	state Exp;
branches;
next	1.1.1.5;

1.1.1.5
date	2003.12.03.02.44.04;	author millert;	state Exp;
branches;
next	1.1.1.6;

1.1.1.6
date	2006.03.28.18.48.47;	author millert;	state Exp;
branches;
next	1.1.1.7;

1.1.1.7
date	2008.09.29.17.18.35;	author millert;	state Exp;
branches;
next	1.1.1.8;

1.1.1.8
date	2009.10.12.18.10.59;	author millert;	state Exp;
branches;
next	;


desc
@@


1.2
log
@remove files no longer in perl 5.12.2 (or that have moved)
@
text
@package File::Spec::Unix;

use Exporter ();
use Config;
use File::Basename qw(basename dirname fileparse);
use DirHandle;
use strict;
use vars qw(@@ISA $Is_Mac $Is_OS2 $Is_VMS $Is_Win32);
use File::Spec;

Exporter::import('File::Spec', '$Verbose');

$Is_OS2 = $^O eq 'os2';
$Is_Mac = $^O eq 'MacOS';
$Is_Win32 = $^O eq 'MSWin32';

if ($Is_VMS = $^O eq 'VMS') {
    require VMS::Filespec;
    import VMS::Filespec qw( &vmsify );
}

=head1 NAME

File::Spec::Unix - methods used by File::Spec

=head1 SYNOPSIS

C<require File::Spec::Unix;>

=head1 DESCRIPTION

Methods for manipulating file specifications.

=head1 METHODS

=over 2

=item canonpath

No physical check on the filesystem, but a logical cleanup of a
path. On UNIX eliminated successive slashes and successive "/.".

=cut

sub canonpath {
    my($self,$path) = @@_;
    $path =~ s|/+|/|g ;                            # xx////xx  -> xx/xx
    $path =~ s|(/\.)+/|/|g ;                       # xx/././xx -> xx/xx
    $path =~ s|^(\./)+|| unless $path eq "./";     # ./xx      -> xx
    $path =~ s|/$|| unless $path eq "/";           # xx/       -> xx
    $path;
}

=item catdir

Concatenate two or more directory names to form a complete path ending
with a directory. But remove the trailing slash from the resulting
string, because it doesn't look good, isn't necessary and confuses
OS2. Of course, if this is the root directory, don't cut off the
trailing slash :-)

=cut

# ';

sub catdir {
    shift;
    my @@args = @@_;
    for (@@args) {
	# append a slash to each argument unless it has one there
	$_ .= "/" if $_ eq '' or substr($_,-1) ne "/";
    }
    my $result = join('', @@args);
    # remove a trailing slash unless we are root
    substr($result,-1) = ""
	if length($result) > 1 && substr($result,-1) eq "/";
    $result;
}

=item catfile

Concatenate one or more directory names and a filename to form a
complete path ending with a filename

=cut

sub catfile {
    my $self = shift @@_;
    my $file = pop @@_;
    return $file unless @@_;
    my $dir = $self->catdir(@@_);
    for ($dir) {
	$_ .= "/" unless substr($_,length($_)-1,1) eq "/";
    }
    return $dir.$file;
}

=item curdir

Returns a string representing of the current directory.  "." on UNIX.

=cut

sub curdir {
    return "." ;
}

=item rootdir

Returns a string representing of the root directory.  "/" on UNIX.

=cut

sub rootdir {
    return "/";
}

=item updir

Returns a string representing of the parent directory.  ".." on UNIX.

=cut

sub updir {
    return "..";
}

=item no_upwards

Given a list of file names, strip out those that refer to a parent
directory. (Does not strip symlinks, only '.', '..', and equivalents.)

=cut

sub no_upwards {
    my($self) = shift;
    return grep(!/^\.{1,2}$/, @@_);
}

=item file_name_is_absolute

Takes as argument a path and returns true, if it is an absolute path.

=cut

sub file_name_is_absolute {
    my($self,$file) = @@_;
    $file =~ m:^/: ;
}

=item path

Takes no argument, returns the environment variable PATH as an array.

=cut

sub path {
    my($self) = @@_;
    my $path_sep = ":";
    my $path = $ENV{PATH};
    my @@path = split $path_sep, $path;
    foreach(@@path) { $_ = '.' if $_ eq '' }
    @@path;
}

=item join

join is the same as catfile.

=cut

sub join {
	my($self) = shift @@_;
	$self->catfile(@@_);
}

=item nativename

TBW.

=cut

sub nativename {
	my($self,$name) = shift @@_;
	$name;
}

=back

=head1 SEE ALSO

L<File::Spec>

=cut

1;
__END__
@


1.1
log
@Initial revision
@
text
@@


1.1.1.1
log
@perl5.005_03
@
text
@@


1.1.1.2
log
@virgin perl 5.6.0
@
text
@d3 4
d8 2
d11 10
a20 1
use Cwd;
d28 1
a28 1
 require File::Spec::Unix; # Done automatically by File::Spec
a42 2
    $cpath = File::Spec->canonpath( $path ) ;

d46 6
a51 7
    my ($self,$path) = @@_;
    $path =~ s|/+|/|g unless($^O eq 'cygwin');     # xx////xx  -> xx/xx
    $path =~ s|(/\.)+/|/|g;                        # xx/././xx -> xx/xx
    $path =~ s|^(\./)+||s unless $path eq "./";    # ./xx      -> xx
    $path =~ s|^/(\.\./)+|/|s;                     # /../../xx -> xx
    $path =~ s|/\z|| unless $path eq "/";          # xx/       -> xx
    return $path;
d64 2
d67 1
a67 1
    my $self = shift;
d69 1
a69 1
    foreach (@@args) {
d71 1
a71 1
	$_ .= "/" if $_ eq '' || substr($_,-1) ne "/";
d73 5
a77 1
    return $self->canonpath(join('', @@args));
d88 1
a88 1
    my $self = shift;
d92 3
a94 1
    $dir .= "/" unless substr($dir,-1) eq "/";
d100 1
a100 1
Returns a string representation of the current directory.  "." on UNIX.
d105 1
a105 11
    return ".";
}

=item devnull

Returns a string representation of the null device. "/dev/null" on UNIX.

=cut

sub devnull {
    return "/dev/null";
d110 1
a110 1
Returns a string representation of the root directory.  "/" on UNIX.
a117 22
=item tmpdir

Returns a string representation of the first writable directory
from the following list or "" if none are writable:

    $ENV{TMPDIR}
    /tmp

=cut

my $tmpdir;
sub tmpdir {
    return $tmpdir if defined $tmpdir;
    foreach ($ENV{TMPDIR}, "/tmp") {
	next unless defined && -d && -w _;
	$tmpdir = $_;
	last;
    }
    $tmpdir = '' unless defined $tmpdir;
    return $tmpdir;
}

d120 1
a120 1
Returns a string representation of the parent directory.  ".." on UNIX.
d136 2
a137 13
    my $self = shift;
    return grep(!/^\.{1,2}\z/s, @@_);
}

=item case_tolerant

Returns a true or false value indicating, respectively, that alphabetic
is not or is significant when comparing file specifications.

=cut

sub case_tolerant {
    return 0;
d147 2
a148 2
    my ($self,$file) = @@_;
    return scalar($file =~ m:^/:s);
d158 6
a163 3
    my @@path = split(':', $ENV{PATH});
    foreach (@@path) { $_ = '.' if $_ eq '' }
    return @@path;
d173 2
a174 2
    my $self = shift;
    return $self->catfile(@@_);
d177 1
a177 7
=item splitpath

    ($volume,$directories,$file) = File::Spec->splitpath( $path );
    ($volume,$directories,$file) = File::Spec->splitpath( $path, $no_file );

Splits a path in to volume, directory, and filename portions. On systems
with no concept of volume, returns undef for volume. 
d179 1
a179 51
For systems with no syntax differentiating filenames from directories, 
assumes that the last file is a path unless $no_file is true or a 
trailing separator or /. or /.. is present. On Unix this means that $no_file
true makes this return ( '', $path, '' ).

The directory portion may or may not be returned with a trailing '/'.

The results can be passed to L</catpath()> to get back a path equivalent to
(usually identical to) the original path.

=cut

sub splitpath {
    my ($self,$path, $nofile) = @@_;

    my ($volume,$directory,$file) = ('','','');

    if ( $nofile ) {
        $directory = $path;
    }
    else {
        $path =~ m|^ ( (?: .* / (?: \.\.?\z )? )? ) ([^/]*) |xs;
        $directory = $1;
        $file      = $2;
    }

    return ($volume,$directory,$file);
}


=item splitdir

The opposite of L</catdir()>.

    @@dirs = File::Spec->splitdir( $directories );

$directories must be only the directory portion of the path on systems 
that have the concept of a volume or that have path syntax that differentiates
files from directories.

Unlike just splitting the directories on the separator, empty
directory names (C<''>) can be returned, because these are significant
on some OSs (e.g. MacOS).

On Unix,

    File::Spec->splitdir( "/a/b//c/" );

Yields:

    ( '', 'a', 'b', '', 'c', '' )
d183 3
a185 19
sub splitdir {
    my ($self,$directories) = @@_ ;
    #
    # split() likes to forget about trailing null fields, so here we
    # check to be sure that there will not be any before handling the
    # simple case.
    #
    if ( $directories !~ m|/\z| ) {
        return split( m|/|, $directories );
    }
    else {
        #
        # since there was a trailing separator, add a file name to the end, 
        # then do the split, then replace it with ''.
        #
        my( @@directories )= split( m|/|, "${directories}dummy" ) ;
        $directories[ $#directories ]= '' ;
        return @@directories ;
    }
a187 154

=item catpath

Takes volume, directory and file portions and returns an entire path. Under
Unix, $volume is ignored, and directory and file are catenated.  A '/' is
inserted if need be.  On other OSs, $volume is significant.

=cut

sub catpath {
    my ($self,$volume,$directory,$file) = @@_;

    if ( $directory ne ''                && 
         $file ne ''                     && 
         substr( $directory, -1 ) ne '/' && 
         substr( $file, 0, 1 ) ne '/' 
    ) {
        $directory .= "/$file" ;
    }
    else {
        $directory .= $file ;
    }

    return $directory ;
}

=item abs2rel

Takes a destination path and an optional base path returns a relative path
from the base path to the destination path:

    $rel_path = File::Spec->abs2rel( $destination ) ;
    $rel_path = File::Spec->abs2rel( $destination, $base ) ;

If $base is not present or '', then L<cwd()> is used. If $base is relative, 
then it is converted to absolute form using L</rel2abs()>. This means that it
is taken to be relative to L<cwd()>.

On systems with the concept of a volume, this assumes that both paths 
are on the $destination volume, and ignores the $base volume. 

On systems that have a grammar that indicates filenames, this ignores the 
$base filename as well. Otherwise all path components are assumed to be
directories.

If $path is relative, it is converted to absolute form using L</rel2abs()>.
This means that it is taken to be relative to L<cwd()>.

Based on code written by Shigio Yamaguchi.

No checks against the filesystem are made. 

=cut

sub abs2rel {
    my($self,$path,$base) = @@_;

    # Clean up $path
    if ( ! $self->file_name_is_absolute( $path ) ) {
        $path = $self->rel2abs( $path ) ;
    }
    else {
        $path = $self->canonpath( $path ) ;
    }

    # Figure out the effective $base and clean it up.
    if ( !defined( $base ) || $base eq '' ) {
        $base = cwd() ;
    }
    elsif ( ! $self->file_name_is_absolute( $base ) ) {
        $base = $self->rel2abs( $base ) ;
    }
    else {
        $base = $self->canonpath( $base ) ;
    }

    # Now, remove all leading components that are the same
    my @@pathchunks = $self->splitdir( $path);
    my @@basechunks = $self->splitdir( $base);

    while (@@pathchunks && @@basechunks && $pathchunks[0] eq $basechunks[0]) {
        shift @@pathchunks ;
        shift @@basechunks ;
    }

    $path = CORE::join( '/', @@pathchunks );
    $base = CORE::join( '/', @@basechunks );

    # $base now contains the directories the resulting relative path 
    # must ascend out of before it can descend to $path_directory.  So, 
    # replace all names with $parentDir
    $base =~ s|[^/]+|..|g ;

    # Glue the two together, using a separator if necessary, and preventing an
    # empty result.
    if ( $path ne '' && $base ne '' ) {
        $path = "$base/$path" ;
    } else {
        $path = "$base$path" ;
    }

    return $self->canonpath( $path ) ;
}

=item rel2abs

Converts a relative path to an absolute path. 

    $abs_path = File::Spec->rel2abs( $destination ) ;
    $abs_path = File::Spec->rel2abs( $destination, $base ) ;

If $base is not present or '', then L<cwd()> is used. If $base is relative, 
then it is converted to absolute form using L</rel2abs()>. This means that it
is taken to be relative to L<cwd()>.

On systems with the concept of a volume, this assumes that both paths 
are on the $base volume, and ignores the $destination volume. 

On systems that have a grammar that indicates filenames, this ignores the 
$base filename as well. Otherwise all path components are assumed to be
directories.

If $path is absolute, it is cleaned up and returned using L</canonpath()>.

Based on code written by Shigio Yamaguchi.

No checks against the filesystem are made. 

=cut

sub rel2abs($;$;) {
    my ($self,$path,$base ) = @@_;

    # Clean up $path
    if ( ! $self->file_name_is_absolute( $path ) ) {
        # Figure out the effective $base and clean it up.
        if ( !defined( $base ) || $base eq '' ) {
            $base = cwd() ;
        }
        elsif ( ! $self->file_name_is_absolute( $base ) ) {
            $base = $self->rel2abs( $base ) ;
        }
        else {
            $base = $self->canonpath( $base ) ;
        }

        # Glom them together
        $path = $self->catdir( $base, $path ) ;
    }

    return $self->canonpath( $path ) ;
}


d197 1
@


1.1.1.3
log
@stock perl 5.6.1
@
text
@a3 3
use vars qw($VERSION);

$VERSION = '1.2';
d38 1
a38 1
    $path =~ s|/\Z(?!\n)|| unless $path eq "/";          # xx/       -> xx
d149 1
a149 1
    return grep(!/^\.{1,2}\Z(?!\n)/s, @@_);
d165 1
a165 6
Takes as argument a path and returns true if it is an absolute path.

This does not consult the local filesystem on Unix, Win32, or OS/2.  It
does sometimes on MacOS (see L<File::Spec::MacOS/file_name_is_absolute>).
It does consult the working environment for VMS (see
L<File::Spec::VMS/file_name_is_absolute>).
d226 1
a226 1
        $path =~ m|^ ( (?: .* / (?: \.\.?\Z(?!\n) )? )? ) ([^/]*) |xs;
d266 1
a266 1
    if ( $directories !~ m|/\Z(?!\n)| ) {
d311 2
a312 2
    $rel_path = File::Spec->abs2rel( $path ) ;
    $rel_path = File::Spec->abs2rel( $path, $base ) ;
d328 1
a328 5
No checks against the filesystem are made on most systems.  On MacOS,
the filesystem may be consulted (see
L<File::Spec::MacOS/file_name_is_absolute>).  On VMS, there is
interaction with the working environment, as logicals and
macros are expanded.
d330 1
a330 1
Based on code written by Shigio Yamaguchi.
d388 2
a389 2
    $abs_path = File::Spec->rel2abs( $path ) ;
    $abs_path = File::Spec->rel2abs( $path, $base ) ;
d396 1
a396 1
are on the $base volume, and ignores the $path volume. 
d404 1
a404 5
No checks against the filesystem are made on most systems.  On MacOS,
the filesystem may be consulted (see
L<File::Spec::MacOS/file_name_is_absolute>).  On VMS, there is
interaction with the working environment, as logicals and
macros are expanded.
d406 1
a406 1
Based on code written by Shigio Yamaguchi.
d410 1
a410 1
sub rel2abs {
@


1.1.1.4
log
@stock perl 5.8.0 from CPAN
@
text
@d4 1
a4 1
our($VERSION);
d6 1
a6 1
$VERSION = '1.4';
d12 1
a12 1
File::Spec::Unix - File::Spec for Unix, base for other File::Spec modules
d20 1
a20 3
Methods for manipulating file specifications.  Other File::Spec
modules, such as File::Spec::Mac, inherit from File::Spec::Unix and
override specific methods.
d26 1
a26 1
=item canonpath()
d29 1
a29 1
path. On UNIX eliminates successive slashes and successive "/.".
d37 2
a38 17
    
    # Handle POSIX-style node names beginning with double slash (qnx, nto)
    # Handle network path names beginning with double slash (cygwin)
    # (POSIX says: "a pathname that begins with two successive slashes
    # may be interpreted in an implementation-defined manner, although
    # more than two leading slashes shall be treated as a single slash.")
    my $node = '';
    if ( $^O =~ m/^(?:qnx|nto|cygwin)$/ && $path =~ s:^(//[^/]+)(/|\z):/:s ) {
      $node = $1;
    }
    # This used to be
    # $path =~ s|/+|/|g unless($^O eq 'cygwin');
    # but that made tests 29, 30, 35, 46, and 213 (as of #13272) to fail
    # (Mainly because trailing "" directories didn't get stripped).
    # Why would cygwin avoid collapsing multiple slashes into one? --jhi
    $path =~ s|/+|/|g;                             # xx////xx  -> xx/xx
    $path =~ s@@(/\.)+(/|\Z(?!\n))@@/@@g;             # xx/././xx -> xx/xx
d42 1
a42 1
    return "$node$path";
d45 1
a45 1
=item catdir()
a118 3
Since perl 5.8.0, if running under taint mode, and if $ENV{TMPDIR}
is tainted, it is not used.

d124 1
a124 9
    my @@dirlist = ($ENV{TMPDIR}, "/tmp");
    {
	no strict 'refs';
	if (${"\cTAINT"}) { # Check for taint mode on perl >= 5.8.0
            require Scalar::Util;
	    shift @@dirlist if Scalar::Util::tainted($ENV{TMPDIR});
	}
    }
    foreach (@@dirlist) {
d170 3
a172 2
This does not consult the local filesystem on Unix, Win32, OS/2 or Mac 
OS (Classic).  It does consult the working environment for VMS (see
d255 1
a255 1
on some OSs.
d289 1
a289 1
=item catpath()
d293 1
a293 2
inserted if needed (though if the directory portion doesn't start with
'/' it is not added).  On other OSs, $volume is significant.
d322 1
a322 1
If $base is not present or '', then L<cwd()|Cwd> is used. If $base is relative, 
d324 1
a324 1
is taken to be relative to L<cwd()|Cwd>.
d334 1
a334 1
This means that it is taken to be relative to L<cwd()|Cwd>.
d336 3
a338 1
No checks against the filesystem are made.  On VMS, there is
d396 1
a396 1
=item rel2abs()
d403 1
a403 1
If $base is not present or '', then L<cwd()|Cwd> is used. If $base is relative, 
d405 1
a405 1
is taken to be relative to L<cwd()|Cwd>.
d416 3
a418 1
No checks against the filesystem are made.  On VMS, there is
@


1.1.1.5
log
@perl 5.8.2 from CPAN
@
text
@d4 1
a4 1
use vars qw($VERSION);
d6 3
a8 1
$VERSION = '1.5';
d74 6
a79 2

    $self->canonpath(join('/', @@_, '')); # '' because need a trailing '/'
d91 1
a91 1
    my $file = $self->canonpath(pop @@_);
d104 3
a106 1
sub curdir () { '.' }
d114 3
a116 1
sub devnull () { '/dev/null' }
d124 3
a126 1
sub rootdir () { '/' }
d130 2
a131 3
Returns a string representation of the first writable directory from
the following list or the current directory if none from the list are
writable:
d142 1
a142 1
sub _tmpdir {
d144 1
a144 2
    my $self = shift;
    my @@dirlist = @@_;
d149 1
a149 1
	    @@dirlist = grep { ! Scalar::Util::tainted($_) } @@dirlist;
d157 1
a157 2
    $tmpdir = $self->curdir unless defined $tmpdir;
    $tmpdir = defined $tmpdir && $self->canonpath($tmpdir);
a160 6
sub tmpdir {
    return $tmpdir if defined $tmpdir;
    my $self = shift;
    $tmpdir = $self->_tmpdir( $ENV{TMPDIR}, "/tmp" );
}

d167 3
a169 1
sub updir () { '..' }
d190 3
a192 1
sub case_tolerant () { 0 }
a215 1
    return () unless exists $ENV{PATH};
d237 2
a238 2
Splits a path into volume, directory, and filename portions. On systems
with no concept of volume, returns '' for volume. 
d295 18
a312 1
    return split m|/|, $_[1], -1;  # Preserve trailing fields
d319 1
a319 1
Unix, $volume is ignored, and directory and file are concatenated.  A '/' is
d350 6
a355 4
If $base is not present or '', then L<cwd()|Cwd> is used. If $base is
relative, then it is converted to absolute form using
L</rel2abs()>. This means that it is taken to be relative to
L<cwd()|Cwd>.
d358 1
a358 1
$base filename. Otherwise all path components are assumed to be
d385 1
a385 1
        $base = $self->_cwd();
d429 6
a434 4
If $base is not present or '', then L<cwd()|Cwd> is used. If $base is
relative, then it is converted to absolute form using
L</rel2abs()>. This means that it is taken to be relative to
L<cwd()|Cwd>.
d436 2
a437 2
On systems that have a grammar that indicates filenames, this ignores
the $base filename. Otherwise all path components are assumed to be
d457 1
a457 1
	    $base = $self->_cwd();
d473 1
a480 8

# Internal routine to File::Spec, no point in making this public since
# it is the standard Cwd interface.  Most of the platform-specific
# File::Spec subclasses use this.
sub _cwd {
    require Cwd;
    Cwd::cwd();
}
@


1.1.1.6
log
@perl 5.8.8 import
@
text
@a32 7
Note that this does *not* collapse F<x/../y> sections into F<y>.  This
is by design.  If F</foo> on your system is a symlink to F</bar/baz>,
then F</foo/../quux> is actually F</bar/quux>, not F</quux> as a naive
F<../>-removal would give you.  If you want to do this kind of
processing, you probably want C<Cwd>'s C<realpath()> function to
actually traverse the filesystem cleaning up paths like this.

d55 1
a55 2
    $path =~ s|^/(\.\./)+|/|;                      # /../../xx -> xx
    $path =~ s|^/\.\.$|/|;                         # /..       -> /
d154 2
a155 1
    $tmpdir = $_[0]->_tmpdir( $ENV{TMPDIR}, "/tmp" );
a447 7
=head1 COPYRIGHT

Copyright (c) 2004 by the Perl 5 Porters.  All rights reserved.

This program is free software; you can redistribute it and/or modify
it under the same terms as Perl itself.

a460 34


# Internal method to reduce xx\..\yy -> yy
sub _collapse {
    my($fs, $path) = @@_;

    my $updir  = $fs->updir;
    my $curdir = $fs->curdir;

    my($vol, $dirs, $file) = $fs->splitpath($path);
    my @@dirs = $fs->splitdir($dirs);

    my @@collapsed;
    foreach my $dir (@@dirs) {
        if( $dir eq $updir              and   # if we have an updir
            @@collapsed                  and   # and something to collapse
            length $collapsed[-1]       and   # and its not the rootdir
            $collapsed[-1] ne $updir    and   # nor another updir
            $collapsed[-1] ne $curdir         # nor the curdir
          ) 
        {                                     # then
            pop @@collapsed;                   # collapse
        }
        else {                                # else
            push @@collapsed, $dir;            # just hang onto it
        }
    }

    return $fs->catpath($vol,
                        $fs->catdir(@@collapsed),
                        $file
                       );
}

@


1.1.1.7
log
@import perl 5.10.0 from CPAN
@
text
@d6 1
a6 1
$VERSION = '3.2501';
d46 1
d51 1
a51 2
    my $double_slashes_special = $^O eq 'qnx' || $^O eq 'nto';
    if ( $double_slashes_special && $path =~ s{^(//[^/]+)(?:/|\z)}{/}s ) {
d55 1
a55 1
    # $path =~ s|/+|/|g unless ($^O eq 'cygwin');
d59 4
a62 4
    $path =~ s|/{2,}|/|g;                            # xx////xx  -> xx/xx
    $path =~ s{(?:/\.)+(?:/|\z)}{/}g;                # xx/././xx -> xx/xx
    $path =~ s|^(?:\./)+||s unless $path eq "./";    # ./xx      -> xx
    $path =~ s|^/(?:\.\./)+|/|;                      # /../../xx -> xx
d64 1
a64 1
    $path =~ s|/\z|| unless $path eq "/";          # xx/       -> xx
d182 1
a182 1
    return grep(!/^\.{1,2}\z/s, @@_);
d262 1
a262 1
        $path =~ m|^ ( (?: .* / (?: \.\.?\z )? )? ) ([^/]*) |xs;
a355 1
    $base = $self->_cwd() unless defined $base and length $base;
d357 3
a359 4
    ($path, $base) = map $self->canonpath($_), $path, $base;

    if (grep $self->file_name_is_absolute($_), $path, $base) {
	($path, $base) = map $self->rel2abs($_), $path, $base;
d362 1
a362 2
	# save a couple of cwd()s if both paths are relative
	($path, $base) = map $self->catdir('/', $_), $path, $base;
d365 9
a373 14
    my ($path_volume) = $self->splitpath($path, 1);
    my ($base_volume) = $self->splitpath($base, 1);

    # Can't relativize across volumes
    return $path unless $path_volume eq $base_volume;

    my $path_directories = ($self->splitpath($path, 1))[1];
    my $base_directories = ($self->splitpath($base, 1))[1];

    # For UNC paths, the user might give a volume like //foo/bar that
    # strictly speaking has no directory portion.  Treat it as if it
    # had the root directory for that volume.
    if (!length($base_directories) and $self->file_name_is_absolute($base)) {
      $base_directories = $self->rootdir;
d377 2
a378 7
    my @@pathchunks = $self->splitdir( $path_directories );
    my @@basechunks = $self->splitdir( $base_directories );

    if ($base_directories eq $self->rootdir) {
      shift @@pathchunks;
      return $self->canonpath( $self->catpath('', $self->catdir( @@pathchunks ), '') );
    }
d380 1
a380 1
    while (@@pathchunks && @@basechunks && $self->_same($pathchunks[0], $basechunks[0])) {
d384 3
a386 1
    return $self->curdir unless @@pathchunks || @@basechunks;
d389 11
a399 4
    # must ascend out of before it can descend to $path_directory.
    my $result_dirs = $self->catdir( ($self->updir) x @@basechunks, @@pathchunks );
    return $self->canonpath( $self->catpath('', $result_dirs, '') );
}
d401 1
a401 2
sub _same {
  $_[1] eq $_[2];
d473 1
a473 1
    Cwd::getcwd();
a485 1
    pop @@dirs if @@dirs && $dirs[-1] eq '';
@


1.1.1.8
log
@import perl 5.10.1
@
text
@d6 1
a6 2
$VERSION = '3.30';
$VERSION = eval $VERSION;
a43 1
    return unless defined $path;
d51 1
a51 4


    if ( $double_slashes_special
         && ( $path =~ s{^(//[^/]+)/?\z}{}s || $path =~ s{^(//[^/]+)/}{/}s ) ) {
d106 1
a106 1
sub curdir { '.' }
d114 1
a114 1
sub devnull { '/dev/null' }
d122 1
a122 1
sub rootdir { '/' }
d171 1
a171 1
sub updir { '..' }
d192 1
a192 1
sub case_tolerant { 0 }
@


