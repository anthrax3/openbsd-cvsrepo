head	1.2;
access;
symbols
	OPENBSD_4_8:1.1.1.8.0.4
	OPENBSD_4_8_BASE:1.1.1.8
	OPENBSD_4_7:1.1.1.8.0.2
	OPENBSD_4_7_BASE:1.1.1.8
	PERL_5_10_1:1.1.1.8
	OPENBSD_4_6:1.1.1.7.0.6
	OPENBSD_4_6_BASE:1.1.1.7
	OPENBSD_4_5:1.1.1.7.0.2
	OPENBSD_4_5_BASE:1.1.1.7
	PERL_5_10_0:1.1.1.7
	OPENBSD_4_4:1.1.1.6.0.10
	OPENBSD_4_4_BASE:1.1.1.6
	OPENBSD_4_3:1.1.1.6.0.8
	OPENBSD_4_3_BASE:1.1.1.6
	OPENBSD_4_2:1.1.1.6.0.6
	OPENBSD_4_2_BASE:1.1.1.6
	OPENBSD_4_1:1.1.1.6.0.4
	OPENBSD_4_1_BASE:1.1.1.6
	OPENBSD_4_0:1.1.1.6.0.2
	OPENBSD_4_0_BASE:1.1.1.6
	PERL_5_8_8:1.1.1.6
	OPENBSD_3_9:1.1.1.5.0.10
	OPENBSD_3_9_BASE:1.1.1.5
	OPENBSD_3_8:1.1.1.5.0.8
	OPENBSD_3_8_BASE:1.1.1.5
	OPENBSD_3_7:1.1.1.5.0.6
	OPENBSD_3_7_BASE:1.1.1.5
	PERL_5_8_6:1.1.1.5
	OPENBSD_3_6:1.1.1.5.0.4
	OPENBSD_3_6_BASE:1.1.1.5
	PERL_5_8_5:1.1.1.5
	PERL_5_8_3:1.1.1.5
	OPENBSD_3_5:1.1.1.5.0.2
	OPENBSD_3_5_BASE:1.1.1.5
	PERL_5_8_2:1.1.1.5
	OPENBSD_3_4:1.1.1.4.0.4
	OPENBSD_3_4_BASE:1.1.1.4
	OPENBSD_3_3:1.1.1.4.0.2
	OPENBSD_3_3_BASE:1.1.1.4
	PERL_5_8_0:1.1.1.4
	OPENBSD_3_2:1.1.1.3.0.6
	OPENBSD_3_2_BASE:1.1.1.3
	OPENBSD_3_1:1.1.1.3.0.4
	OPENBSD_3_1_BASE:1.1.1.3
	OPENBSD_3_0:1.1.1.3.0.2
	OPENBSD_3_0_BASE:1.1.1.3
	PERL_5_6_1:1.1.1.3
	OPENBSD_2_9:1.1.1.2.0.6
	OPENBSD_2_9_BASE:1.1.1.2
	OPENBSD_2_8:1.1.1.2.0.4
	OPENBSD_2_8_BASE:1.1.1.2
	OPENBSD_2_7:1.1.1.2.0.2
	OPENBSD_2_7_BASE:1.1.1.2
	PERL_5_6_0:1.1.1.2
	OPENBSD_2_6:1.1.1.1.0.2
	OPENBSD_2_6_BASE:1.1.1.1
	PERL_500503:1.1.1.1
	CPAN:1.1.1;
locks; strict;
comment	@# @;


1.2
date	2010.09.24.14.59.40;	author millert;	state dead;
branches;
next	1.1;

1.1
date	99.04.29.22.40.10;	author millert;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	99.04.29.22.40.10;	author millert;	state Exp;
branches;
next	1.1.1.2;

1.1.1.2
date	2000.04.06.16.09.44;	author millert;	state Exp;
branches;
next	1.1.1.3;

1.1.1.3
date	2001.05.24.18.23.31;	author millert;	state Exp;
branches;
next	1.1.1.4;

1.1.1.4
date	2002.10.27.22.15.00;	author millert;	state Exp;
branches;
next	1.1.1.5;

1.1.1.5
date	2003.12.03.02.44.04;	author millert;	state Exp;
branches;
next	1.1.1.6;

1.1.1.6
date	2006.03.28.18.48.47;	author millert;	state Exp;
branches;
next	1.1.1.7;

1.1.1.7
date	2008.09.29.17.18.35;	author millert;	state Exp;
branches;
next	1.1.1.8;

1.1.1.8
date	2009.10.12.18.10.59;	author millert;	state Exp;
branches;
next	;


desc
@@


1.2
log
@remove files no longer in perl 5.12.2 (or that have moved)
@
text
@package File::Spec::Mac;

use Exporter ();
use Config;
use strict;
use File::Spec;
use vars qw(@@ISA $VERSION $Is_Mac);

$VERSION = '1.0';

@@ISA = qw(File::Spec::Unix);
$Is_Mac = $^O eq 'MacOS';

Exporter::import('File::Spec', '$Verbose');


=head1 NAME

File::Spec::Mac - File::Spec for MacOS

=head1 SYNOPSIS

C<require File::Spec::Mac;>

=head1 DESCRIPTION

Methods for manipulating file specifications.

=head1 METHODS

=over 2

=item canonpath

On MacOS, there's nothing to be done.  Returns what it's given.

=cut

sub canonpath {
    my($self,$path) = @@_;
    $path;
}

=item catdir

Concatenate two or more directory names to form a complete path ending with 
a directory.  Put a trailing : on the end of the complete path if there 
isn't one, because that's what's done in MacPerl's environment.

The fundamental requirement of this routine is that

	  File::Spec->catdir(split(":",$path)) eq $path

But because of the nature of Macintosh paths, some additional 
possibilities are allowed to make using this routine give reasonable results 
for some common situations.  Here are the rules that are used.  Each 
argument has its trailing ":" removed.  Each argument, except the first,
has its leading ":" removed.  They are then joined together by a ":".

So

	  File::Spec->catdir("a","b") = "a:b:"
	  File::Spec->catdir("a:",":b") = "a:b:"
	  File::Spec->catdir("a:","b") = "a:b:"
	  File::Spec->catdir("a",":b") = "a:b"
	  File::Spec->catdir("a","","b") = "a::b"

etc.

To get a relative path (one beginning with :), begin the first argument with :
or put a "" as the first argument.

If you don't want to worry about these rules, never allow a ":" on the ends 
of any of the arguments except at the beginning of the first.

Under MacPerl, there is an additional ambiguity.  Does the user intend that

	  File::Spec->catfile("LWP","Protocol","http.pm")

be relative or absolute?  There's no way of telling except by checking for the
existence of LWP: or :LWP, and even there he may mean a dismounted volume or
a relative path in a different directory (like in @@INC).   So those checks
aren't done here. This routine will treat this as absolute.

=cut

# ';

sub catdir {
    shift;
    my @@args = @@_;
	$args[0] =~ s/:$//;
	my $result = shift @@args;
	for (@@args) {
		s/:$//;
		s/^://;
		$result .= ":$_";
    }
    $result .= ":";
	$result;
}

=item catfile

Concatenate one or more directory names and a filename to form a
complete path ending with a filename.  Since this uses catdir, the
same caveats apply.  Note that the leading : is removed from the filename,
so that 

	  File::Spec->catfile($ENV{HOME},"file");

and

	  File::Spec->catfile($ENV{HOME},":file");

give the same answer, as one might expect.

=cut

sub catfile {
    my $self = shift @@_;
    my $file = pop @@_;
    return $file unless @@_;
    my $dir = $self->catdir(@@_);
	$file =~ s/^://;
    return $dir.$file;
}

=item curdir

Returns a string representing of the current directory.

=cut

sub curdir {
    return ":" ;
}

=item rootdir

Returns a string representing the root directory.  Under MacPerl,
returns the name of the startup volume, since that's the closest in
concept, although other volumes aren't rooted there.  On any other
platform returns '', since there's no common way to indicate "root
directory" across all Macs.

=cut

sub rootdir {
#
#  There's no real root directory on MacOS.  If you're using MacPerl,
#  the name of the startup volume is returned, since that's the closest in
#  concept.  On other platforms, simply return '', because nothing better
#  can be done.
#
	if($Is_Mac) {
        require Mac::Files;
		my $system =  Mac::Files::FindFolder(&Mac::Files::kOnSystemDisk,
		        &Mac::Files::kSystemFolderType);
		$system =~ s/:.*$/:/;
		return $system;
	} else {
		return '';
    }
}

=item updir

Returns a string representing the parent directory.

=cut

sub updir {
    return "::";
}

=item file_name_is_absolute

Takes as argument a path and returns true, if it is an absolute path.  In 
the case where a name can be either relative or absolute (for example, a 
folder named "HD" in the current working directory on a drive named "HD"), 
relative wins.  Use ":" in the appropriate place in the path if you want to
distinguish unambiguously.

=cut

sub file_name_is_absolute {
    my($self,$file) = @@_;
	if ($file =~ /:/) {
		return ($file !~ m/^:/);
	} else {
		return (! -e ":$file");
    }
}

=item path

Returns the null list for the MacPerl application, since the concept is 
usually meaningless under MacOS. But if you're using the MacPerl tool under 
MPW, it gives back $ENV{Commands} suitably split, as is done in 
:lib:ExtUtils:MM_Mac.pm.

=cut

sub path {
#
#  The concept is meaningless under the MacPerl application.
#  Under MPW, it has a meaning.
#
    my($self) = @@_;
	my @@path;
	if(exists $ENV{Commands}) {
		@@path = split /,/,$ENV{Commands};
	} else {
	    @@path = ();
	}
    @@path;
}

=back

=head1 SEE ALSO

L<File::Spec>

=cut

1;
__END__

@


1.1
log
@Initial revision
@
text
@@


1.1.1.1
log
@perl5.005_03
@
text
@@


1.1.1.2
log
@virgin perl 5.6.0
@
text
@d3 2
d6 5
a10 2
use vars qw(@@ISA);
require File::Spec::Unix;
d12 4
d23 1
a23 1
 require File::Spec::Mac; # Done internally by File::Spec if needed
d40 2
a41 2
    my ($self,$path) = @@_;
    return $path;
d87 2
d92 6
a97 6
    my $result = shift @@args;
    $result =~ s/:\z//;
    foreach (@@args) {
	s/:\z//;
	s/^://s;
	$result .= ":$_";
d99 2
a100 1
    return "$result:";
d121 1
a121 1
    my $self = shift;
d125 1
a125 1
    $file =~ s/^://s;
d131 1
a131 1
Returns a string representing the current directory.
d136 1
a136 11
    return ":";
}

=item devnull

Returns a string representing the null device.

=cut

sub devnull {
    return "Dev:Null";
d143 3
a145 1
concept, although other volumes aren't rooted there.
d151 4
a154 2
#  There's no real root directory on MacOS.  The name of the startup
#  volume is returned, since that's the closest in concept.
d156 9
a164 22
    require Mac::Files;
    my $system =  Mac::Files::FindFolder(&Mac::Files::kOnSystemDisk,
					 &Mac::Files::kSystemFolderType);
    $system =~ s/:.*\z/:/s;
    return $system;
}

=item tmpdir

Returns a string representation of the first existing directory
from the following list or '' if none exist:

    $ENV{TMPDIR}

=cut

my $tmpdir;
sub tmpdir {
    return $tmpdir if defined $tmpdir;
    $tmpdir = $ENV{TMPDIR} if -d $ENV{TMPDIR};
    $tmpdir = '' unless defined $tmpdir;
    return $tmpdir;
d188 5
a192 5
    my ($self,$file) = @@_;
    if ($file =~ /:/) {
	return ($file !~ m/^:/s);
    } else {
	return (! -e ":$file");
d210 8
a217 2
    return unless exists $ENV{Commands};
    return split(/,/, $ENV{Commands});
a219 168
=item splitpath

=cut

sub splitpath {
    my ($self,$path, $nofile) = @@_;

    my ($volume,$directory,$file) = ('','','');

    if ( $nofile ) {
        ( $volume, $directory ) = $path =~ m@@((?:[^:]+(?::|\z))?)(.*)@@s;
    }
    else {
        $path =~ 
            m@@^( (?: [^:]+: )? ) 
                ( (?: .*: )? )
                ( .* )
             @@xs;
        $volume    = $1;
        $directory = $2;
        $file      = $3;
    }

    # Make sure non-empty volumes and directories end in ':'
    $volume    .= ':' if $volume    =~ m@@[^:]\z@@ ;
    $directory .= ':' if $directory =~ m@@[^:]\z@@ ;
    return ($volume,$directory,$file);
}


=item splitdir

=cut

sub splitdir {
    my ($self,$directories) = @@_ ;
    #
    # split() likes to forget about trailing null fields, so here we
    # check to be sure that there will not be any before handling the
    # simple case.
    #
    if ( $directories !~ m@@:\z@@ ) {
        return split( m@@:@@, $directories );
    }
    else {
        #
        # since there was a trailing separator, add a file name to the end, 
        # then do the split, then replace it with ''.
        #
        my( @@directories )= split( m@@:@@, "${directories}dummy" ) ;
        $directories[ $#directories ]= '' ;
        return @@directories ;
    }
}


=item catpath

=cut

sub catpath {
    my $self = shift ;

    my $result = shift ;
    $result =~ s@@^([^/])@@/$1@@s ;

    my $segment ;
    for $segment ( @@_ ) {
        if ( $result =~ m@@[^/]\z@@ && $segment =~ m@@^[^/]@@s ) {
            $result .= "/$segment" ;
        }
        elsif ( $result =~ m@@/\z@@ && $segment =~ m@@^/@@s ) {
            $result  =~ s@@/+\z@@/@@;
            $segment =~ s@@^/+@@@@s;
            $result  .= "$segment" ;
        }
        else {
            $result  .= $segment ;
        }
    }

    return $result ;
}

=item abs2rel

=cut

sub abs2rel {
    my($self,$path,$base) = @@_;

    # Clean up $path
    if ( ! $self->file_name_is_absolute( $path ) ) {
        $path = $self->rel2abs( $path ) ;
    }

    # Figure out the effective $base and clean it up.
    if ( !defined( $base ) || $base eq '' ) {
        $base = cwd() ;
    }
    elsif ( ! $self->file_name_is_absolute( $base ) ) {
        $base = $self->rel2abs( $base ) ;
    }

    # Now, remove all leading components that are the same
    my @@pathchunks = $self->splitdir( $path );
    my @@basechunks = $self->splitdir( $base );

    while (@@pathchunks && @@basechunks && $pathchunks[0] eq $basechunks[0]) {
        shift @@pathchunks ;
        shift @@basechunks ;
    }

    $path = join( ':', @@pathchunks );

    # @@basechunks now contains the number of directories to climb out of.
    $base = ':' x @@basechunks ;

    return "$base:$path" ;
}

=item rel2abs

Converts a relative path to an absolute path. 

    $abs_path = File::Spec->rel2abs( $destination ) ;
    $abs_path = File::Spec->rel2abs( $destination, $base ) ;

If $base is not present or '', then L<cwd()> is used. If $base is relative, 
then it is converted to absolute form using L</rel2abs()>. This means that it
is taken to be relative to L<cwd()>.

On systems with the concept of a volume, this assumes that both paths 
are on the $base volume, and ignores the $destination volume. 

On systems that have a grammar that indicates filenames, this ignores the 
$base filename as well. Otherwise all path components are assumed to be
directories.

If $path is absolute, it is cleaned up and returned using L</canonpath()>.

Based on code written by Shigio Yamaguchi.

No checks against the filesystem are made. 

=cut

sub rel2abs($;$;) {
    my ($self,$path,$base ) = @@_;

    if ( ! $self->file_name_is_absolute( $path ) ) {
        if ( !defined( $base ) || $base eq '' ) {
            $base = cwd() ;
        }
        elsif ( ! $self->file_name_is_absolute( $base ) ) {
            $base = $self->rel2abs( $base ) ;
        }
        else {
            $base = $self->canonpath( $base ) ;
        }

        $path = $self->canonpath("$base$path") ;
    }

    return $path ;
}


d229 2
@


1.1.1.3
log
@stock perl 5.6.1
@
text
@d4 1
a4 1
use vars qw(@@ISA $VERSION);
a5 3

$VERSION = '1.2';

d82 1
a82 1
    $result =~ s/:\Z(?!\n)//;
d84 1
a84 1
	s/:\Z(?!\n)//;
d153 1
a153 1
    $system =~ s/:.*\Z(?!\n)/:/s;
a191 2
As a special case, the file name '' is always considered to be absolute.

a197 2
    } elsif ( $file eq '' ) {
        return 1 ;
d231 1
a231 1
        ( $volume, $directory ) = $path =~ m@@((?:[^:]+(?::|\Z(?!\n)))?)(.*)@@s;
d245 2
a246 2
    $volume    .= ':' if $volume    =~ m@@[^:]\Z(?!\n)@@ ;
    $directory .= ':' if $directory =~ m@@[^:]\Z(?!\n)@@ ;
d262 1
a262 1
    if ( $directories !~ m@@:\Z(?!\n)@@ ) {
d289 1
a289 1
        if ( $result =~ m@@[^/]\Z(?!\n)@@ && $segment =~ m@@^[^/]@@s ) {
d292 2
a293 2
        elsif ( $result =~ m@@/\Z(?!\n)@@ && $segment =~ m@@^/@@s ) {
            $result  =~ s@@/+\Z(?!\n)@@/@@;
a306 6
See L<File::Spec::Unix/abs2rel> for general documentation.

Unlike C<File::Spec::Unix->abs2rel()>, this function will make
checks against the local filesystem if necessary.  See
L</file_name_is_absolute> for details.

d344 19
a362 1
See L<File::Spec::Unix/rel2abs> for general documentation.
d364 1
a364 3
Unlike C<File::Spec::Unix->rel2abs()>, this function will make
checks against the local filesystem if necessary.  See
L</file_name_is_absolute> for details.
d368 1
a368 1
sub rel2abs {
@


1.1.1.4
log
@stock perl 5.8.0 from CPAN
@
text
@d7 1
a7 1
$VERSION = '1.3';
a10 6
use Cwd;
my $macfiles;
if ($^O eq 'MacOS') {
	$macfiles = eval { require Mac::Files };
}

d13 1
a13 1
File::Spec::Mac - File::Spec for Mac OS (Classic)
d29 1
a29 1
On Mac OS, there's nothing to be done. Returns what it's given.
d38 1
a38 62
=item catdir()

Concatenate two or more directory names to form a path separated by colons
(":") ending with a directory. Resulting paths are B<relative> by default,
but can be forced to be absolute (but avoid this, see below). Automatically
puts a trailing ":" on the end of the complete path, because that's what's
done in MacPerl's environment and helps to distinguish a file path from a
directory path.

B<IMPORTANT NOTE:> Beginning with version 1.3 of this module, the resulting
path is relative by default and I<not> absolute. This descision was made due
to portability reasons. Since C<File::Spec-E<gt>catdir()> returns relative paths
on all other operating systems, it will now also follow this convention on Mac
OS. Note that this may break some existing scripts.

The intended purpose of this routine is to concatenate I<directory names>.
But because of the nature of Macintosh paths, some additional possibilities
are allowed to make using this routine give reasonable results for some
common situations. In other words, you are also allowed to concatenate
I<paths> instead of directory names (strictly speaking, a string like ":a"
is a path, but not a name, since it contains a punctuation character ":").

So, beside calls like

    catdir("a") = ":a:"
    catdir("a","b") = ":a:b:"
    catdir() = ""                    (special case)

calls like the following

    catdir(":a:") = ":a:"
    catdir(":a","b") = ":a:b:"
    catdir(":a:","b") = ":a:b:"
    catdir(":a:",":b:") = ":a:b:"
    catdir(":") = ":"

are allowed.

Here are the rules that are used in C<catdir()>; note that we try to be as
compatible as possible to Unix:

=over 2

=item 1.

The resulting path is relative by default, i.e. the resulting path will have a
leading colon.

=item 2.

A trailing colon is added automatically to the resulting path, to denote a
directory.

=item 3.

Generally, each argument has one leading ":" and one trailing ":"
removed (if any). They are then joined together by a ":". Special
treatment applies for arguments denoting updir paths like "::lib:",
see (4), or arguments consisting solely of colons ("colon paths"),
see (5).

=item 4.
d40 3
a42 3
When an updir path like ":::lib::" is passed as argument, the number
of directories to climb up is handled correctly, not removing leading
or trailing colons when necessary. E.g.
d44 1
a44 2
    catdir(":::a","::b","c")    = ":::a::b:c:"
    catdir(":::a::","::b","c")  = ":::a:::b:c:"
d46 1
a46 1
=item 5.
d48 5
a52 7
Adding a colon ":" or empty string "" to a path at I<any> position
doesn't alter the path, i.e. these arguments are ignored. (When a ""
is passed as the first argument, it has a special meaning, see
(6)). This way, a colon ":" is handled like a "." (curdir) on Unix,
while an empty string "" is generally ignored (see
C<Unix-E<gt>canonpath()> ). Likewise, a "::" is handled like a ".."
(updir), and a ":::" is handled like a "../.." etc.  E.g.
d54 1
a54 2
    catdir("a",":",":","b")   = ":a:b:"
    catdir("a",":","::",":b") = ":a::b:"
d56 5
a60 1
=item 6.
d62 1
a62 2
If the first argument is an empty string "" or is a volume name, i.e. matches
the pattern /^[^:]+:/, the resulting path is B<absolute>.
d64 2
a65 1
=item 7.
d67 2
a68 2
Passing an empty string "" as the first argument to C<catdir()> is
like passingC<File::Spec-E<gt>rootdir()> as the first argument, i.e.
d70 1
a70 1
    catdir("","a","b")          is the same as
d72 1
a72 1
    catdir(rootdir(),"a","b").
d74 4
a77 48
This is true on Unix, where C<catdir("","a","b")> yields "/a/b" and
C<rootdir()> is "/". Note that C<rootdir()> on Mac OS is the startup
volume, which is the closest in concept to Unix' "/". This should help
to run existing scripts originally written for Unix.

=item 8.

For absolute paths, some cleanup is done, to ensure that the volume
name isn't immediately followed by updirs. This is invalid, because
this would go beyond "root". Generally, these cases are handled like
their Unix counterparts:

 Unix:
    Unix->catdir("","")                 =  "/"
    Unix->catdir("",".")                =  "/"
    Unix->catdir("","..")               =  "/"              # can't go beyond root
    Unix->catdir("",".","..","..","a")  =  "/a"
 Mac:
    Mac->catdir("","")                  =  rootdir()         # (e.g. "HD:")
    Mac->catdir("",":")                 =  rootdir()
    Mac->catdir("","::")                =  rootdir()         # can't go beyond root
    Mac->catdir("",":","::","::","a")   =  rootdir() . "a:"  # (e.g. "HD:a:")

However, this approach is limited to the first arguments following
"root" (again, see C<Unix-E<gt>canonpath()> ). If there are more
arguments that move up the directory tree, an invalid path going
beyond root can be created.

=back

As you've seen, you can force C<catdir()> to create an absolute path
by passing either an empty string or a path that begins with a volume
name as the first argument. However, you are strongly encouraged not
to do so, since this is done only for backward compatibility. Newer
versions of File::Spec come with a method called C<catpath()> (see
below), that is designed to offer a portable solution for the creation
of absolute paths.  It takes volume, directory and file portions and
returns an entire path. While C<catdir()> is still suitable for the
concatenation of I<directory names>, you are encouraged to use
C<catpath()> to concatenate I<volume names> and I<directory
paths>. E.g.

    $dir      = File::Spec->catdir("tmp","sources");
    $abs_path = File::Spec->catpath("MacintoshHD:", $dir,"");

yields

    "MacintoshHD:tmp:sources:" .
d82 10
a91 70
	my $self = shift;
	return '' unless @@_;
	my @@args = @@_;
	my $first_arg;
	my $relative;

	# take care of the first argument

	if ($args[0] eq '')  { # absolute path, rootdir
		shift @@args;
		$relative = 0;
		$first_arg = $self->rootdir;

	} elsif ($args[0] =~ /^[^:]+:/) { # absolute path, volume name
		$relative = 0;
		$first_arg = shift @@args;
		# add a trailing ':' if need be (may be it's a path like HD:dir)
		$first_arg = "$first_arg:" unless ($first_arg =~ /:\Z(?!\n)/);

	} else { # relative path
		$relative = 1;
		if ( $args[0] =~ /^::+\Z(?!\n)/ ) {
			# updir colon path ('::', ':::' etc.), don't shift
			$first_arg = ':';
		} elsif ($args[0] eq ':') {
			$first_arg = shift @@args;
		} else {
			# add a trailing ':' if need be
			$first_arg = shift @@args;
			$first_arg = "$first_arg:" unless ($first_arg =~ /:\Z(?!\n)/);
		}
	}

	# For all other arguments,
	# (a) ignore arguments that equal ':' or '',
	# (b) handle updir paths specially:
	#     '::' 			-> concatenate '::'
	#     '::' . '::' 	-> concatenate ':::' etc.
	# (c) add a trailing ':' if need be

	my $result = $first_arg;
	while (@@args) {
		my $arg = shift @@args;
		unless (($arg eq '') || ($arg eq ':')) {
			if ($arg =~ /^::+\Z(?!\n)/ ) { # updir colon path like ':::'
				my $updir_count = length($arg) - 1;
				while ((@@args) && ($args[0] =~ /^::+\Z(?!\n)/) ) { # while updir colon path
					$arg = shift @@args;
					$updir_count += (length($arg) - 1);
				}
				$arg = (':' x $updir_count);
			} else {
				$arg =~ s/^://s; # remove a leading ':' if any
				$arg = "$arg:" unless ($arg =~ /:\Z(?!\n)/); # ensure trailing ':'
			}
			$result .= $arg;
		}#unless
	}

	if ( ($relative) && ($result !~ /^:/) ) {
		# add a leading colon if need be
		$result = ":$result";
	}

	unless ($relative) {
		# remove updirs immediately following the volume name
		$result =~ s/([^:]+:)(:*)(.*)\Z(?!\n)/$1$3/;
	}

	return $result;
d97 3
a99 9
complete path ending with a filename. Resulting paths are B<relative>
by default, but can be forced to be absolute (but avoid this).

B<IMPORTANT NOTE:> Beginning with version 1.3 of this module, the
resulting path is relative by default and I<not> absolute. This
descision was made due to portability reasons. Since
C<File::Spec-E<gt>catfile()> returns relative paths on all other
operating systems, it will now also follow this convention on Mac OS.
Note that this may break some existing scripts.
d101 1
a101 4
The last argument is always considered to be the file portion. Since
C<catfile()> uses C<catdir()> (see above) for the concatenation of the
directory portions (if any), the following with regard to relative and
absolute paths is true:
d103 1
a103 2
    catfile("")     = ""
    catfile("file") = "file"
d105 1
a105 1
but
d107 1
a107 17
    catfile("","")        = rootdir()         # (e.g. "HD:")
    catfile("","file")    = rootdir() . file  # (e.g. "HD:file")
    catfile("HD:","file") = "HD:file"

This means that C<catdir()> is called only when there are two or more
arguments, as one might expect.

Note that the leading ":" is removed from the filename, so that

    catfile("a","b","file")  = ":a:b:file"    and

    catfile("a","b",":file") = ":a:b:file"

give the same answer.

To concatenate I<volume names>, I<directory paths> and I<filenames>,
you are encouraged to use C<catpath()> (see below).
a112 1
    return '' unless @@_;
d122 1
a122 1
Returns a string representing the current directory. On Mac OS, this is ":".
d132 1
a132 1
Returns a string representing the null device. On Mac OS, this is "Dev:Null".
d144 1
a144 5
concept, although other volumes aren't rooted there. The name has a
trailing ":", because that's the correct specification for a volume
name on Mac OS.

If Mac::Files could not be loaded, the empty string is returned.
d150 1
a150 1
#  There's no real root directory on Mac OS. The name of the startup
d153 3
a155 3
    return '' unless $macfiles;
    my $system = Mac::Files::FindFolder(&Mac::Files::kOnSystemDisk,
	&Mac::Files::kSystemFolderType);
d162 4
a165 3
Returns the contents of $ENV{TMPDIR}, if that directory exits or the current working
directory otherwise. Under MacPerl, $ENV{TMPDIR} will contain a path like
"MacintoshHD:Temporary Items:", which is a hidden directory on your startup volume.
d173 1
a173 3
    unless (defined($tmpdir)) {
   	$tmpdir = cwd();
    }
d179 1
a179 1
Returns a string representing the parent directory. On Mac OS, this is "::".
d189 5
a193 15
Takes as argument a path and returns true, if it is an absolute path.
If the path has a leading ":", it's a relative path. Otherwise, it's an
absolute path, unless the path doesn't contain any colons, i.e. it's a name
like "a". In this particular case, the path is considered to be relative
(i.e. it is considered to be a filename). Use ":" in the appropriate place
in the path if you want to distinguish unambiguously. As a special case,
the filename '' is always considered to be absolute. Note that with version
1.2 of File::Spec::Mac, this does no longer consult the local filesystem.

E.g.

    File::Spec->file_name_is_absolute("a");             # false (relative)
    File::Spec->file_name_is_absolute(":a:b:");         # false (relative)
    File::Spec->file_name_is_absolute("MacintoshHD:");  # true (absolute)
    File::Spec->file_name_is_absolute("");              # true (absolute)
d195 1
d202 1
a202 1
	return (! ($file =~ m/^:/s) );
d206 1
a206 1
	return 0; # i.e. a file like "a"
d212 3
a214 3
Returns the null list for the MacPerl application, since the concept is
usually meaningless under Mac OS. But if you're using the MacPerl tool under
MPW, it gives back $ENV{Commands} suitably split, as is done in
a229 17
    ($volume,$directories,$file) = File::Spec->splitpath( $path );
    ($volume,$directories,$file) = File::Spec->splitpath( $path, $no_file );

Splits a path in to volume, directory, and filename portions.

On Mac OS, assumes that the last part of the path is a filename unless
$no_file is true or a trailing separator ":" is present.

The volume portion is always returned with a trailing ":". The directory portion
is always returned with a leading (to denote a relative path) and a trailing ":"
(to denote a directory). The file portion is always returned I<without> a leading ":".
Empty portions are returned as empty string ''.

The results can be passed to C<catpath()> to get back a path equivalent to
(usually identical to) the original path.


d234 2
a235 1
    my ($volume,$directory,$file);
d238 1
a238 1
        ( $volume, $directory ) = $path =~ m|^((?:[^:]+:)?)(.*)|s;
d241 5
a245 5
        $path =~
            m|^( (?: [^:]+: )? )
               ( (?: .*: )? )
               ( .* )
             |xs;
d251 3
a253 11
    $volume = '' unless defined($volume);
	$directory = ":$directory" if ( $volume && $directory ); # take care of "HD::dir"
    if ($directory) {
        # Make sure non-empty directories begin and end in ':'
        $directory .= ':' unless (substr($directory,-1) eq ':');
        $directory = ":$directory" unless (substr($directory,0,1) eq ':');
    } else {
	$directory = '';
    }
    $file = '' unless defined($file);

a259 31
The opposite of C<catdir()>.

    @@dirs = File::Spec->splitdir( $directories );

$directories should be only the directory portion of the path on systems
that have the concept of a volume or that have path syntax that differentiates
files from directories. Consider using C<splitpath()> otherwise.

Unlike just splitting the directories on the separator, empty directory names
(C<"">) can be returned. Since C<catdir()> on Mac OS always appends a trailing
colon to distinguish a directory path from a file path, a single trailing colon
will be ignored, i.e. there's no empty directory name after it.

Hence, on Mac OS, both

    File::Spec->splitdir( ":a:b::c:" );    and
    File::Spec->splitdir( ":a:b::c" );

yield:

    ( "a", "b", "::", "c")

while

    File::Spec->splitdir( ":a:b::c::" );

yields:

    ( "a", "b", "::", "c", "::")


d263 18
a280 32
	my ($self, $path) = @@_;
	my @@result = ();
	my ($head, $sep, $tail, $volume, $directories);

	return ('') if ( (!defined($path)) || ($path eq '') );
	return (':') if ($path eq ':');

	( $volume, $sep, $directories ) = $path =~ m|^((?:[^:]+:)?)(:*)(.*)|s;

	# deprecated, but handle it correctly
	if ($volume) {
		push (@@result, $volume);
		$sep .= ':';
	}

	while ($sep || $directories) {
		if (length($sep) > 1) {
			my $updir_count = length($sep) - 1;
			for (my $i=0; $i<$updir_count; $i++) {
				# push '::' updir_count times;
				# simulate Unix '..' updirs
				push (@@result, '::');
			}
		}
		$sep = '';
		if ($directories) {
			( $head, $sep, $tail ) = $directories =~ m|^((?:[^:]+)?)(:*)(.*)|s;
			push (@@result, $head);
			$directories = $tail;
		}
	}
	return @@result;
a285 11
    $path = File::Spec->catpath($volume,$directory,$file);

Takes volume, directory and file portions and returns an entire path. On Mac OS,
$volume, $directory and $file are concatenated.  A ':' is inserted if need be. You
may pass an empty string for each portion. If all portions are empty, the empty
string is returned. If $volume is empty, the result will be a relative path,
beginning with a ':'. If $volume and $directory are empty, a leading ":" (if any)
is removed form $file and the remainder is returned. If $file is empty, the
resulting path will have a trailing ':'.


d289 1
a289 1
    my ($self,$volume,$directory,$file) = @@_;
d291 2
a292 4
    if ( (! $volume) && (! $directory) ) {
	$file =~ s/^:// if $file;
	return $file ;
    }
d294 13
a306 7
    my $path = $volume; # may be ''
    $path .= ':' unless (substr($path, -1) eq ':'); # ensure trailing ':'

    if ($directory) {
	$directory =~ s/^://; # remove leading ':' if any
	$path .= $directory;
	$path .= ':' unless (substr($path, -1) eq ':'); # ensure trailing ':'
d309 1
a309 6
    if ($file) {
	$file =~ s/^://; # remove leading ':' if any
	$path .= $file;
    }

    return $path;
d314 1
a314 24
Takes a destination path and an optional base path and returns a relative path
from the base path to the destination path:

    $rel_path = File::Spec->abs2rel( $path ) ;
    $rel_path = File::Spec->abs2rel( $path, $base ) ;

Note that both paths are assumed to have a notation that distinguishes a
directory path (with trailing ':') from a file path (without trailing ':').

If $base is not present or '', then the current working directory is used.
If $base is relative, then it is converted to absolute form using C<rel2abs()>.
This means that it is taken to be relative to the current working directory.

Since Mac OS has the concept of volumes, this assumes that both paths
are on the $destination volume, and ignores the $base volume (!).

If $base doesn't have a trailing colon, the last element of $base is
assumed to be a filename. This filename is ignored (!). Otherwise all path
components are assumed to be directories.

If $path is relative, it is converted to absolute form using C<rel2abs()>.
This means that it is taken to be relative to the current working directory.

Based on code written by Shigio Yamaguchi.
d316 3
a321 14
# maybe this should be done in canonpath() ?
sub _resolve_updirs {
	my $path = shift @@_;
	my $proceed;

	# resolve any updirs, e.g. "HD:tmp::file" -> "HD:file"
	do {
		$proceed = ($path =~ s/^(.*):[^:]+::(.*?)\z/$1:$2/);
	} while ($proceed);

	return $path;
}


d332 1
a332 1
	$base = cwd();
a335 4
	$base = _resolve_updirs( $base ); # resolve updirs in $base
    }
    else {
	$base = _resolve_updirs( $base );
d338 3
a340 5
    # Split up paths
    my ( $path_dirs, $path_file ) =  ($self->splitpath( $path ))[1,2] ;

    # ignore $base's volume and file
    my $base_dirs = ($self->splitpath( $base ))[1] ;
d342 1
a342 7
    # Now, remove all leading components that are the same
    my @@pathchunks = $self->splitdir( $path_dirs );
    my @@basechunks = $self->splitdir( $base_dirs );
	
    while ( @@pathchunks &&
	    @@basechunks &&
	    lc( $pathchunks[0] ) eq lc( $basechunks[0] ) ) {
d347 1
a347 3
    # @@pathchunks now has the directories to descend in to.
    # ensure relative path, even if @@pathchunks is empty
    $path_dirs = $self->catdir( ':', @@pathchunks );
d350 1
a350 1
    $base_dirs = (':' x @@basechunks) . ':' ;
d352 1
a352 1
    return $self->catpath( '', $self->catdir( $base_dirs, $path_dirs ), $path_file ) ;
d357 1
a357 12
Converts a relative path to an absolute path:

    $abs_path = File::Spec->rel2abs( $path ) ;
    $abs_path = File::Spec->rel2abs( $path, $base ) ;

Note that both paths are assumed to have a notation that distinguishes a
directory path (with trailing ':') from a file path (without trailing ':').

If $base is not present or '', then $base is set to the current working
directory. If $base is relative, then it is converted to absolute form
using C<rel2abs()>. This means that it is taken to be relative to the
current working directory.
d359 3
a361 7
If $base doesn't have a trailing colon, the last element of $base is
assumed to be a filename. This filename is ignored (!). Otherwise all path
components are assumed to be directories.

If $path is already absolute, it is returned and $base is ignored.

Based on code written by Shigio Yamaguchi.
d366 1
a366 1
    my ($self,$path,$base) = @@_;
d368 1
a368 2
    if ( ! $self->file_name_is_absolute($path) ) {
        # Figure out the effective $base and clean it up.
d370 4
a373 1
	    $base = cwd();
d375 2
a376 2
        elsif ( ! $self->file_name_is_absolute($base) ) {
            $base = $self->rel2abs($base) ;
d379 2
a380 7
	# Split up paths

	# igonore $path's volume
        my ( $path_dirs, $path_file ) = ($self->splitpath($path))[1,2] ;

        # ignore $base's file part
	my ( $base_vol, $base_dirs, undef ) = $self->splitpath($base) ;
d382 1
a382 8
	# Glom them together
	$path_dirs = ':' if ($path_dirs eq '');
	$base_dirs =~ s/:$//; # remove trailing ':', if any
	$base_dirs = $base_dirs . $path_dirs;

        $path = $self->catpath( $base_vol, $base_dirs, $path_file );
    }
    return $path;
a386 6

=head1 AUTHORS

See the authors list in I<File::Spec>. Mac OS support by Paul Schinder
<schinder@@pobox.com> and Thomas Wegner <wegner_thomas@@yahoo.com>.

@


1.1.1.5
log
@perl 5.8.2 from CPAN
@
text
@d7 1
a7 1
$VERSION = '1.4';
d11 1
a16 3
sub case_tolerant { 1 }


d364 3
a366 4
Returns the contents of $ENV{TMPDIR}, if that directory exits or the
current working directory otherwise. Under MacPerl, $ENV{TMPDIR} will
contain a path like "MacintoshHD:Temporary Items:", which is a hidden
directory on your startup volume.
d373 5
a377 2
    my $self = shift;
    $tmpdir = $self->_tmpdir( $ENV{TMPDIR} );
d445 1
a445 1
Splits a path into volume, directory, and filename portions.
a587 5
    # We look for a volume in $volume, then in $directory, but not both

    my ($dir_volume, $dir_dirs) = $self->splitpath($directory, 1);

    $volume = $dir_volume unless length $volume;
a591 1
	$directory = $dir_dirs if $volume;
d620 2
a621 4
If $path and $base appear to be on two different volumes, we will not
attempt to resolve the two paths, and we will instead simply return
$path.  Note that previous versions of this module ignored the volume
of $base, which resulted in garbage results part of the time.
d624 1
a624 1
assumed to be a filename.  This filename is ignored.  Otherwise all path
d659 1
a659 1
	$base = $self->_cwd();
d669 2
a670 3
    # Split up paths - ignore $base's file
    my ( $path_vol, $path_dirs, $path_file ) =  $self->splitpath( $path );
    my ( $base_vol, $base_dirs )             =  $self->splitpath( $base );
d672 2
a673 1
    return $path unless lc( $path_vol ) eq lc( $base_vol );
d712 1
a712 1
assumed to be a filename.  This filename is ignored.  Otherwise all path
d727 1
a727 1
	    $base = $self->_cwd();
d739 1
a739 1
	my ( $base_vol, $base_dirs ) = $self->splitpath($base) ;
d759 1
d762 1
a762 2
See L<File::Spec> and L<File::Spec::Unix>.  This package overrides the
implementation of these methods, not the semantics.
@


1.1.1.6
log
@perl 5.8.8 import
@
text
@d56 1
a56 1
path is relative by default and I<not> absolute. This decision was made due
d275 1
a275 1
decision was made due to portability reasons. Since
d376 2
a377 1
    $tmpdir = $_[0]->_tmpdir( $ENV{TMPDIR} );
a765 7

=head1 COPYRIGHT

Copyright (c) 2004 by the Perl 5 Porters.  All rights reserved.

This program is free software; you can redistribute it and/or modify
it under the same terms as Perl itself.
@


1.1.1.7
log
@import perl 5.10.0 from CPAN
@
text
@d7 1
a7 1
$VERSION = '3.2501';
@


1.1.1.8
log
@import perl 5.10.1
@
text
@d7 1
a7 2
$VERSION = '3.30';
$VERSION = eval $VERSION;
d533 1
a533 1
	return @@result if ( (!defined($path)) || ($path eq '') );
@


