head	1.2;
access;
symbols
	OPENBSD_4_8:1.1.1.2.0.28
	OPENBSD_4_8_BASE:1.1.1.2
	OPENBSD_4_7:1.1.1.2.0.24
	OPENBSD_4_7_BASE:1.1.1.2
	PERL_5_10_1:1.1.1.2
	OPENBSD_4_6:1.1.1.2.0.26
	OPENBSD_4_6_BASE:1.1.1.2
	OPENBSD_4_5:1.1.1.2.0.22
	OPENBSD_4_5_BASE:1.1.1.2
	PERL_5_10_0:1.1.1.2
	OPENBSD_4_4:1.1.1.2.0.20
	OPENBSD_4_4_BASE:1.1.1.2
	OPENBSD_4_3:1.1.1.2.0.18
	OPENBSD_4_3_BASE:1.1.1.2
	OPENBSD_4_2:1.1.1.2.0.16
	OPENBSD_4_2_BASE:1.1.1.2
	OPENBSD_4_1:1.1.1.2.0.14
	OPENBSD_4_1_BASE:1.1.1.2
	OPENBSD_4_0:1.1.1.2.0.12
	OPENBSD_4_0_BASE:1.1.1.2
	PERL_5_8_8:1.1.1.2
	OPENBSD_3_9:1.1.1.2.0.10
	OPENBSD_3_9_BASE:1.1.1.2
	OPENBSD_3_8:1.1.1.2.0.8
	OPENBSD_3_8_BASE:1.1.1.2
	OPENBSD_3_7:1.1.1.2.0.6
	OPENBSD_3_7_BASE:1.1.1.2
	PERL_5_8_6:1.1.1.2
	OPENBSD_3_6:1.1.1.2.0.4
	OPENBSD_3_6_BASE:1.1.1.2
	PERL_5_8_5:1.1.1.2
	PERL_5_8_3:1.1.1.2
	OPENBSD_3_5:1.1.1.2.0.2
	OPENBSD_3_5_BASE:1.1.1.2
	PERL_5_8_2:1.1.1.2
	OPENBSD_3_4:1.1.1.1.0.4
	OPENBSD_3_4_BASE:1.1.1.1
	OPENBSD_3_3:1.1.1.1.0.2
	OPENBSD_3_3_BASE:1.1.1.1
	PERL_5_8_0:1.1.1.1
	CPAN:1.1.1;
locks; strict;
comment	@# @;
expand	@o@;


1.2
date	2010.09.24.14.59.46;	author millert;	state dead;
branches;
next	1.1;

1.1
date	2002.10.27.22.15.01;	author millert;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	2002.10.27.22.15.01;	author millert;	state Exp;
branches;
next	1.1.1.2;

1.1.1.2
date	2003.12.03.02.44.07;	author millert;	state Exp;
branches;
next	;


desc
@@


1.2
log
@remove files no longer in perl 5.12.2 (or that have moved)
@
text
@BEGIN {
    if ($ENV{PERL_CORE}) {
        chdir('t') if -d 't';
        @@INC = qw(../lib);
    }
}

BEGIN { print "1..4\n"; }
use NEXT;

my $count=1;

package A;
@@ISA = qw/B C D/;

sub test { print "ok ", $count++, "\n"; $_[0]->NEXT::UNSEEN::test;}

package B;
@@ISA = qw/C D/;
sub test { print "ok ", $count++, "\n"; $_[0]->NEXT::UNSEEN::test;}

package C;
@@ISA = qw/D/;
sub test { print "ok ", $count++, "\n"; $_[0]->NEXT::UNSEEN::test;}

package D;

sub test { print "ok ", $count++, "\n"; $_[0]->NEXT::UNSEEN::test;}

package main;

my $foo = {};

bless($foo,"A");

$foo->test;
@


1.1
log
@Initial revision
@
text
@@


1.1.1.1
log
@stock perl 5.8.0 from CPAN
@
text
@@


1.1.1.2
log
@perl 5.8.2 from CPAN
@
text
@a0 2
use Test::More tests => 7;

d8 4
a11 2
BEGIN { use_ok('NEXT') };
my $order = 0;
d16 1
a16 1
sub test { ::ok(++$order==1,"test A"); $_[0]->NEXT::UNSEEN::test; 1}
d19 2
a20 2
@@ISA = qw/D C/;
sub test { ::ok(++$order==2,"test B"); $_[0]->NEXT::UNSEEN::test; 1}
d24 1
a24 1
sub test { ::ok(++$order==4,"test C"); $_[0]->NEXT::UNSEEN::test; 1}
d28 1
a28 1
sub test { ::ok(++$order==3,"test D"); $_[0]->NEXT::UNSEEN::test; 1}
d36 1
a36 19
eval{ $foo->test }
	? pass("Correctly survives after C")
	: fail("Shouldn't die on missing ancestor");

package Diamond::Base;
my $seen;
sub test {
	$seen++ ? ::fail("Can't visit inherited test twice")
		: ::pass("First diamond is okay");
	shift->NEXT::UNSEEN::test;
}

package Diamond::Left;  @@ISA = qw[Diamond::Base];
package Diamond::Right; @@ISA = qw[Diamond::Base];
package Diamond::Top;   @@ISA = qw[Diamond::Left Diamond::Right];

package main;

Diamond::Top->test;
@

