head	1.2;
access;
symbols
	OPENBSD_4_8:1.1.1.2.0.8
	OPENBSD_4_8_BASE:1.1.1.2
	OPENBSD_4_7:1.1.1.2.0.4
	OPENBSD_4_7_BASE:1.1.1.2
	PERL_5_10_1:1.1.1.2
	OPENBSD_4_6:1.1.1.2.0.6
	OPENBSD_4_6_BASE:1.1.1.2
	OPENBSD_4_5:1.1.1.2.0.2
	OPENBSD_4_5_BASE:1.1.1.2
	PERL_5_10_0:1.1.1.2
	OPENBSD_4_4:1.1.1.1.0.24
	OPENBSD_4_4_BASE:1.1.1.1
	OPENBSD_4_3:1.1.1.1.0.22
	OPENBSD_4_3_BASE:1.1.1.1
	OPENBSD_4_2:1.1.1.1.0.20
	OPENBSD_4_2_BASE:1.1.1.1
	OPENBSD_4_1:1.1.1.1.0.18
	OPENBSD_4_1_BASE:1.1.1.1
	OPENBSD_4_0:1.1.1.1.0.16
	OPENBSD_4_0_BASE:1.1.1.1
	PERL_5_8_8:1.1.1.1
	OPENBSD_3_9:1.1.1.1.0.14
	OPENBSD_3_9_BASE:1.1.1.1
	OPENBSD_3_8:1.1.1.1.0.12
	OPENBSD_3_8_BASE:1.1.1.1
	OPENBSD_3_7:1.1.1.1.0.10
	OPENBSD_3_7_BASE:1.1.1.1
	PERL_5_8_6:1.1.1.1
	OPENBSD_3_6:1.1.1.1.0.8
	OPENBSD_3_6_BASE:1.1.1.1
	PERL_5_8_5:1.1.1.1
	PERL_5_8_3:1.1.1.1
	OPENBSD_3_5:1.1.1.1.0.6
	OPENBSD_3_5_BASE:1.1.1.1
	PERL_5_8_2:1.1.1.1
	OPENBSD_3_4:1.1.1.1.0.4
	OPENBSD_3_4_BASE:1.1.1.1
	OPENBSD_3_3:1.1.1.1.0.2
	OPENBSD_3_3_BASE:1.1.1.1
	PERL_5_8_0:1.1.1.1
	CPAN:1.1.1;
locks; strict;
comment	@# @;
expand	@o@;


1.2
date	2010.09.24.14.59.46;	author millert;	state dead;
branches;
next	1.1;

1.1
date	2002.10.27.22.15.01;	author millert;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	2002.10.27.22.15.01;	author millert;	state Exp;
branches;
next	1.1.1.2;

1.1.1.2
date	2008.09.29.17.18.39;	author millert;	state Exp;
branches;
next	;


desc
@@


1.2
log
@remove files no longer in perl 5.12.2 (or that have moved)
@
text
@BEGIN {
    if ($ENV{PERL_CORE}) {
        chdir('t') if -d 't';
        @@INC = qw(../lib);
    }
}

BEGIN { print "1..25\n"; }

use NEXT;

print "ok 1\n";

package A;
sub A::method   { return ( 3, $_[0]->NEXT::method() ) }
sub A::DESTROY  { $_[0]->NEXT::DESTROY() }

package B;
use base qw( A );
sub B::AUTOLOAD { return ( 9, $_[0]->NEXT::AUTOLOAD() )
			if $AUTOLOAD =~ /.*(missing_method|secondary)/ }
sub B::DESTROY  { $_[0]->NEXT::DESTROY() }

package C;
sub C::DESTROY  { print "ok 23\n"; $_[0]->NEXT::DESTROY() }

package D;
@@D::ISA = qw( B C E );
sub D::method   { return ( 2, $_[0]->NEXT::method() ) }
sub D::AUTOLOAD { return ( 8, $_[0]->NEXT::AUTOLOAD() ) }
sub D::DESTROY  { print "ok 22\n"; $_[0]->NEXT::DESTROY() }
sub D::oops     { $_[0]->NEXT::method() }
sub D::secondary { return ( 17, 18, map { $_+10 } $_[0]->NEXT::secondary() ) }

package E;
@@E::ISA = qw( F G );
sub E::method   { return ( 4,  $_[0]->NEXT::method(), $_[0]->NEXT::method() ) }
sub E::AUTOLOAD { return ( 10, $_[0]->NEXT::AUTOLOAD() ) 
			if $AUTOLOAD =~ /.*(missing_method|secondary)/ }
sub E::DESTROY  { print "ok 24\n"; $_[0]->NEXT::DESTROY() }

package F;
sub F::method   { return ( 5  ) }
sub F::AUTOLOAD { return ( 11 ) if $AUTOLOAD =~ /.*(missing_method|secondary)/ }
sub F::DESTROY  { print "ok 25\n" }

package G;
sub G::method   { return ( 6 ) }
sub G::AUTOLOAD { print "not "; return }
sub G::DESTROY  { print "not ok 21"; return }

package main;

my $obj = bless {}, "D";

my @@vals;

# TEST NORMAL REDISPATCH (ok 2..6)
@@vals = $obj->method();
print map "ok $_\n", @@vals;

# RETEST NORMAL REDISPATCH SHOULD BE THE SAME (ok 7)
@@vals = $obj->method();
print "not " unless join("", @@vals) == "23456";
print "ok 7\n";

# TEST AUTOLOAD REDISPATCH (ok 8..11)
@@vals = $obj->missing_method();
print map "ok $_\n", @@vals;

# NAMED METHOD CAN'T REDISPATCH TO NAMED METHOD OF DIFFERENT NAME (ok 12)
eval { $obj->oops() } && print "not ";
print "ok 12\n";

# AUTOLOAD'ED METHOD CAN'T REDISPATCH TO NAMED METHOD (ok 13)

eval {
	local *C::AUTOLOAD = sub { $_[0]->NEXT::method() };
	*C::AUTOLOAD = *C::AUTOLOAD;
	eval { $obj->missing_method(); } && print "not ";
};
print "ok 13\n";

# NAMED METHOD CAN'T REDISPATCH TO AUTOLOAD'ED METHOD (ok 14)
eval { 
	*C::method = sub{ $_[0]->NEXT::AUTOLOAD() };
	*C::method = *C::method;
	eval { $obj->method(); } && print "not ";
};
print "ok 14\n";

# BASE CLASS METHODS ONLY REDISPATCHED WITHIN HIERARCHY (ok 15..16)
my $ob2 = bless {}, "B";
@@val = $ob2->method();         
print "not " unless @@val==1 && $val[0]==3;
print "ok 15\n";

@@val = $ob2->missing_method(); 
print "not " unless @@val==1 && $val[0]==9;
print "ok 16\n";

# TEST SECONDARY AUTOLOAD REDISPATCH (ok 17..21)
@@vals = $obj->secondary();
print map "ok $_\n", @@vals;

# CAN REDISPATCH DESTRUCTORS (ok 22..25)
@


1.1
log
@Initial revision
@
text
@@


1.1.1.1
log
@stock perl 5.8.0 from CPAN
@
text
@@


1.1.1.2
log
@import perl 5.10.0 from CPAN
@
text
@d8 1
a8 1
BEGIN { print "1..26\n"; }
a16 1
sub A::evaled   { eval { $_[0]->NEXT::evaled(); return 'evaled' } }
d25 1
a25 1
sub C::DESTROY  { print "ok 24\n"; $_[0]->NEXT::DESTROY() }
d31 1
a31 1
sub D::DESTROY  { print "ok 23\n"; $_[0]->NEXT::DESTROY() }
d40 1
a40 1
sub E::DESTROY  { print "ok 25\n"; $_[0]->NEXT::DESTROY() }
d45 1
a45 1
sub F::DESTROY  { print "ok 26\n" }
d50 1
a50 1
sub G::DESTROY  { print "not ok 22"; return }
d106 1
a106 8
# TEST HANDLING OF NEXT:: INSIDE EVAL (22)
eval {
	$obj->evaled;
	$@@ && print "not ";
};
print "ok 22\n";

# CAN REDISPATCH DESTRUCTORS (ok 23..26)
@

