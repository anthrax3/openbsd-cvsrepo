head	1.2;
access;
symbols
	OPENBSD_6_2:1.2.0.2
	OPENBSD_6_2_BASE:1.2
	PERL_5_24_2:1.1.1.4
	OPENBSD_6_1:1.2.0.4
	OPENBSD_6_1_BASE:1.2
	OPENBSD_6_0:1.1.1.3.0.34
	OPENBSD_6_0_BASE:1.1.1.3
	OPENBSD_5_9:1.1.1.3.0.28
	OPENBSD_5_9_BASE:1.1.1.3
	OPENBSD_5_8:1.1.1.3.0.30
	OPENBSD_5_8_BASE:1.1.1.3
	PERL_5_20_2:1.1.1.3
	OPENBSD_5_7:1.1.1.3.0.22
	OPENBSD_5_7_BASE:1.1.1.3
	PERL_5_20_1:1.1.1.3
	OPENBSD_5_6:1.1.1.3.0.26
	OPENBSD_5_6_BASE:1.1.1.3
	PERL_5_18_2:1.1.1.3
	PERL:1.1.1
	OPENBSD_5_5:1.1.1.3.0.24
	OPENBSD_5_5_BASE:1.1.1.3
	OPENBSD_5_4:1.1.1.3.0.20
	OPENBSD_5_4_BASE:1.1.1.3
	PERL_5_16_3:1.1.1.3
	OPENBSD_5_3:1.1.1.3.0.18
	OPENBSD_5_3_BASE:1.1.1.3
	OPENBSD_5_2:1.1.1.3.0.16
	OPENBSD_5_2_BASE:1.1.1.3
	OPENBSD_5_1_BASE:1.1.1.3
	OPENBSD_5_1:1.1.1.3.0.14
	OPENBSD_5_0:1.1.1.3.0.12
	OPENBSD_5_0_BASE:1.1.1.3
	OPENBSD_4_9:1.1.1.3.0.10
	OPENBSD_4_9_BASE:1.1.1.3
	PERL_5_12_2:1.1.1.3
	OPENBSD_4_8:1.1.1.3.0.8
	OPENBSD_4_8_BASE:1.1.1.3
	OPENBSD_4_7:1.1.1.3.0.4
	OPENBSD_4_7_BASE:1.1.1.3
	PERL_5_10_1:1.1.1.3
	OPENBSD_4_6:1.1.1.3.0.6
	OPENBSD_4_6_BASE:1.1.1.3
	OPENBSD_4_5:1.1.1.3.0.2
	OPENBSD_4_5_BASE:1.1.1.3
	PERL_5_10_0:1.1.1.3
	OPENBSD_4_4:1.1.1.2.0.20
	OPENBSD_4_4_BASE:1.1.1.2
	OPENBSD_4_3:1.1.1.2.0.18
	OPENBSD_4_3_BASE:1.1.1.2
	OPENBSD_4_2:1.1.1.2.0.16
	OPENBSD_4_2_BASE:1.1.1.2
	OPENBSD_4_1:1.1.1.2.0.14
	OPENBSD_4_1_BASE:1.1.1.2
	OPENBSD_4_0:1.1.1.2.0.12
	OPENBSD_4_0_BASE:1.1.1.2
	PERL_5_8_8:1.1.1.2
	OPENBSD_3_9:1.1.1.2.0.10
	OPENBSD_3_9_BASE:1.1.1.2
	OPENBSD_3_8:1.1.1.2.0.8
	OPENBSD_3_8_BASE:1.1.1.2
	OPENBSD_3_7:1.1.1.2.0.6
	OPENBSD_3_7_BASE:1.1.1.2
	PERL_5_8_6:1.1.1.2
	OPENBSD_3_6:1.1.1.2.0.4
	OPENBSD_3_6_BASE:1.1.1.2
	PERL_5_8_5:1.1.1.2
	PERL_5_8_3:1.1.1.2
	OPENBSD_3_5:1.1.1.2.0.2
	OPENBSD_3_5_BASE:1.1.1.2
	PERL_5_8_2:1.1.1.2
	OPENBSD_3_4:1.1.1.1.0.4
	OPENBSD_3_4_BASE:1.1.1.1
	OPENBSD_3_3:1.1.1.1.0.2
	OPENBSD_3_3_BASE:1.1.1.1
	PERL_5_8_0:1.1.1.1
	CPAN:1.1.1;
locks; strict;
comment	@# @;
expand	@o@;


1.2
date	2017.02.05.00.32.15;	author afresh1;	state Exp;
branches;
next	1.1;
commitid	cxJ08BvJA9Pt2PTM;

1.1
date	2002.10.27.22.14.58;	author millert;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	2002.10.27.22.14.58;	author millert;	state Exp;
branches;
next	1.1.1.2;

1.1.1.2
date	2003.12.03.02.44.00;	author millert;	state Exp;
branches;
next	1.1.1.3;

1.1.1.3
date	2008.09.29.17.18.31;	author millert;	state Exp;
branches;
next	1.1.1.4;

1.1.1.4
date	2017.08.14.13.46.14;	author afresh1;	state Exp;
branches;
next	;
commitid	fAzrs78vdW2Yfc6A;


desc
@@


1.2
log
@Fix merge issues, remove excess files - match perl-5.24.1 dist
@
text
@#!./perl

# This tests the behavior of sort() under the different 'use sort' forms.
# Algorithm by John P. Linderman.

my ($BigWidth, $BigEnough, $RootWidth, $ItemFormat, @@TestSizes, $WellSoaked);

BEGIN {
    chdir 't' if -d 't';
    @@INC = qw(../lib);
    $BigWidth  = 6;				# Digits in $BigEnough-1
    $BigEnough = 10**$BigWidth;			# Largest array we'll attempt
    $RootWidth = int(($BigWidth+1)/2);		# Digits in sqrt($BigEnough-1)
    $ItemFormat = "%0${RootWidth}d%0${BigWidth}d";	# Array item format
    @@TestSizes = (0, 1, 2);			# Small special cases
    # Testing all the way up to $BigEnough takes too long
    # for casual testing.  There are some cutoffs (~256)
    # in pp_sort that should be tested, but 10_000 is ample.
    $WellSoaked = 10_000;			# <= $BigEnough
    for (my $ts = 3; $ts < $WellSoaked; $ts *= 10**(1/3)) {
	push(@@TestSizes, int($ts));		# about 3 per decade
    }
}

use strict;
use warnings;

use Test::More tests => @@TestSizes * 2	# sort() tests
			* 6		# number of pragmas to test
			+ 1 		# extra test for qsort instability
			+ 3		# tests for sort::current
			+ 3;		# tests for "defaults" and "no sort"

# Generate array of specified size for testing sort.
#
# We ensure repeated items, where possible, by drawing the $size items
# from a pool of size sqrt($size).  Each randomly chosen item is
# tagged with the item index, so we can detect original input order,
# and reconstruct the original array order.

sub genarray {
    my $size = int(shift);		# fractions not welcome
    my ($items, $i);
    my @@a;

    if    ($size < 0) { $size = 0; }	# avoid complexity with sqrt
    elsif ($size > $BigEnough) { $size = $BigEnough; }
    $#a = $size - 1;			# preallocate array
    $items = int(sqrt($size));		# number of distinct items
    for ($i = 0; $i < $size; ++$i) {
	$a[$i] = sprintf($ItemFormat, int($items * rand()), $i);
    }
    return \@@a;
}


# Check for correct order (including stability)

sub checkorder {
    my $aref = shift;
    my $status = '';			# so far, so good
    my ($i, $disorder);

    for ($i = 0; $i < $#$aref; ++$i) {
	# Equality shouldn't happen, but catch it in the contents check
	next if ($aref->[$i] le $aref->[$i+1]);
	$disorder = (substr($aref->[$i],   0, $RootWidth) eq
		     substr($aref->[$i+1], 0, $RootWidth)) ?
		     "Instability" : "Disorder";
	# Keep checking if merely unstable... disorder is much worse.
	$status =
	    "$disorder at element $i between $aref->[$i] and $aref->[$i+1]";
	last unless ($disorder eq "Instability");	
    }
    return $status;
}


# Verify that the two array refs reference identical arrays

sub checkequal {
    my ($aref, $bref) = @@_;
    my $status = '';
    my $i;

    if (@@$aref != @@$bref) {
	$status = "Sizes differ: " . @@$aref . " vs " . @@$bref;
    } else {
	for ($i = 0; $i < @@$aref; ++$i) {
	    next if ($aref->[$i] eq $bref->[$i]);
	    $status = "Element $i differs: $aref->[$i] vs $bref->[$i]";
	    last;
	}
    }
    return $status;
}


# Test sort on arrays of various sizes (set up in @@TestSizes)

sub main {
    my ($dothesort, $expect_unstable) = @@_;
    my ($ts, $unsorted, @@sorted, $status);
    my $unstable_num = 0;

    foreach $ts (@@TestSizes) {
	$unsorted = genarray($ts);
	# Sort only on item portion of each element.
	# There will typically be many repeated items,
	# and their order had better be preserved.
	@@sorted = $dothesort->(sub { substr($a, 0, $RootWidth)
				    cmp
	                 substr($b, 0, $RootWidth) }, $unsorted);
	$status = checkorder(\@@sorted);
	# Put the items back into the original order.
	# The contents of the arrays had better be identical.
	if ($expect_unstable && $status =~ /^Instability/) {
	    $status = '';
	    ++$unstable_num;
	}
	is($status, '', "order ok for size $ts");
	@@sorted = $dothesort->(sub { substr($a, $RootWidth)
				    cmp
			    substr($b, $RootWidth) }, \@@sorted);
	$status = checkequal(\@@sorted, $unsorted);
	is($status, '', "contents ok for size $ts");
    }
    if ($expect_unstable) {
	ok($unstable_num > 0, 'Instability ok');
    }
}

# Test with no pragma still loaded -- stability expected (this is a mergesort)
main(sub { sort {&{$_[0]}} @@{$_[1]} }, 0);

{
    use sort qw(_qsort);
    my $sort_current; BEGIN { $sort_current = sort::current(); }
    is($sort_current, 'quicksort', 'sort::current for _qsort');
    main(sub { sort {&{$_[0]}} @@{$_[1]} }, 1);
}

{
    use sort qw(_mergesort);
    my $sort_current; BEGIN { $sort_current = sort::current(); }
    is($sort_current, 'mergesort', 'sort::current for _mergesort');
    main(sub { sort {&{$_[0]}} @@{$_[1]} }, 0);
}

{
    use sort qw(_qsort stable);
    my $sort_current; BEGIN { $sort_current = sort::current(); }
    is($sort_current, 'quicksort stable', 'sort::current for _qsort stable');
    main(sub { sort {&{$_[0]}} @@{$_[1]} }, 0);
}

# Tests added to check "defaults" subpragma, and "no sort"

{
    use sort qw(_qsort stable);
    no sort qw(_qsort);
    my $sort_current; BEGIN { $sort_current = sort::current(); }
    is($sort_current, 'stable', 'sort::current after no _qsort');
    main(sub { sort {&{$_[0]}} @@{$_[1]} }, 0);
}

{
    use sort qw(defaults _qsort);
    my $sort_current; BEGIN { $sort_current = sort::current(); }
    is($sort_current, 'quicksort', 'sort::current after defaults _qsort');
    # Not expected to be stable, so don't test for stability here
}

{
    use sort qw(defaults stable);
    my $sort_current; BEGIN { $sort_current = sort::current(); }
    is($sort_current, 'stable', 'sort::current after defaults stable');
    main(sub { sort {&{$_[0]}} @@{$_[1]} }, 0);
}
@


1.1
log
@Initial revision
@
text
@d29 1
a29 1
			* 4		# number of pragmas to test
d31 2
a32 1
			+ 3;		# tests for sort::current
d102 1
a102 1
    my ($expect_unstable) = @@_;
d111 1
a111 1
	@@sorted = sort { substr($a, 0, $RootWidth)
d113 1
a113 1
	                 substr($b, 0, $RootWidth) } @@$unsorted;
d122 1
a122 1
	@@sorted = sort { substr($a, $RootWidth)
d124 1
a124 1
	                 substr($b, $RootWidth) } @@sorted;
a127 2
    # If the following test (#58) fails, see the comments in pp_sort.c
    # for Perl_sortsv().
d134 1
a134 1
main(0);
d136 1
a136 7
# XXX We're using this eval "..." trick to force recompilation,
# to ensure that the correct pragma is enabled when main() is run.
# Currently 'use sort' modifies $sort::hints at compile-time, but
# pp_sort() fetches its value at run-time.
# The order of those evals is important.

eval q{
d138 4
a141 4
    is(sort::current(), 'quicksort', 'sort::current for _qsort');
    main(1);
};
die $@@ if $@@;
d143 1
a143 1
eval q{
d145 11
a155 4
    is(sort::current(), 'mergesort', 'sort::current for _mergesort');
    main(0);
};
die $@@ if $@@;
d157 3
a159 1
eval q{
d161 19
a179 4
    is(sort::current(), 'quicksort stable', 'sort::current for _qsort stable');
    main(0);
};
die $@@ if $@@;
@


1.1.1.1
log
@stock perl 5.8.0 from CPAN
@
text
@@


1.1.1.2
log
@perl 5.8.2 from CPAN
@
text
@d31 1
a31 2
			+ 3		# tests for sort::current
			+ 3;		# tests for "defaults" and "no sort"
a160 20
};
die $@@ if $@@;

# Tests added to check "defaults" subpragma, and "no sort"

eval q{
    no sort qw(_qsort);
    is(sort::current(), 'stable', 'sort::current after no _qsort');
};
die $@@ if $@@;

eval q{
    use sort qw(defaults _qsort);
    is(sort::current(), 'quicksort', 'sort::current after defaults _qsort');
};
die $@@ if $@@;

eval q{
    use sort qw(defaults stable);
    is(sort::current(), 'stable', 'sort::current after defaults stable');
@


1.1.1.3
log
@import perl 5.10.0 from CPAN
@
text
@d29 1
a29 1
			* 6		# number of pragmas to test
d102 1
a102 1
    my ($dothesort, $expect_unstable) = @@_;
d111 1
a111 1
	@@sorted = $dothesort->(sub { substr($a, 0, $RootWidth)
d113 1
a113 1
	                 substr($b, 0, $RootWidth) }, $unsorted);
d122 1
a122 1
	@@sorted = $dothesort->(sub { substr($a, $RootWidth)
d124 1
a124 1
			    substr($b, $RootWidth) }, \@@sorted);
d136 1
a136 1
main(sub { sort {&{$_[0]}} @@{$_[1]} }, 0);
d138 7
a144 1
{
d146 4
a149 4
    my $sort_current; BEGIN { $sort_current = sort::current(); }
    is($sort_current, 'quicksort', 'sort::current for _qsort');
    main(sub { sort {&{$_[0]}} @@{$_[1]} }, 1);
}
d151 1
a151 1
{
d153 4
a156 4
    my $sort_current; BEGIN { $sort_current = sort::current(); }
    is($sort_current, 'mergesort', 'sort::current for _mergesort');
    main(sub { sort {&{$_[0]}} @@{$_[1]} }, 0);
}
d158 1
a158 1
{
d160 4
a163 4
    my $sort_current; BEGIN { $sort_current = sort::current(); }
    is($sort_current, 'quicksort stable', 'sort::current for _qsort stable');
    main(sub { sort {&{$_[0]}} @@{$_[1]} }, 0);
}
d167 1
a167 2
{
    use sort qw(_qsort stable);
d169 3
a171 4
    my $sort_current; BEGIN { $sort_current = sort::current(); }
    is($sort_current, 'stable', 'sort::current after no _qsort');
    main(sub { sort {&{$_[0]}} @@{$_[1]} }, 0);
}
d173 1
a173 1
{
d175 3
a177 4
    my $sort_current; BEGIN { $sort_current = sort::current(); }
    is($sort_current, 'quicksort', 'sort::current after defaults _qsort');
    # Not expected to be stable, so don't test for stability here
}
d179 1
a179 1
{
d181 3
a183 4
    my $sort_current; BEGIN { $sort_current = sort::current(); }
    is($sort_current, 'stable', 'sort::current after defaults stable');
    main(sub { sort {&{$_[0]}} @@{$_[1]} }, 0);
}
@


1.1.1.4
log
@Import perl-5.24.2
@
text
@d128 2
@


