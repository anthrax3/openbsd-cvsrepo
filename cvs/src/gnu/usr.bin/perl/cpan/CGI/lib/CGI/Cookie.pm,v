head	1.5;
access;
symbols
	OPENBSD_6_0:1.5.0.10
	OPENBSD_6_0_BASE:1.5
	OPENBSD_5_9:1.5.0.4
	OPENBSD_5_9_BASE:1.5
	OPENBSD_5_8:1.5.0.6
	OPENBSD_5_8_BASE:1.5
	PERL_5_20_2:1.1.1.4
	OPENBSD_5_7:1.5.0.2
	OPENBSD_5_7_BASE:1.5
	PERL_5_20_1:1.1.1.4
	OPENBSD_5_6:1.4.0.4
	OPENBSD_5_6_BASE:1.4
	PERL_5_18_2:1.1.1.3
	PERL:1.1.1
	OPENBSD_5_5:1.3.0.16
	OPENBSD_5_5_BASE:1.3
	OPENBSD_5_4:1.3.0.12
	OPENBSD_5_4_BASE:1.3
	PERL_5_16_3:1.1.1.2
	OPENBSD_5_3:1.3.0.10
	OPENBSD_5_3_BASE:1.3
	OPENBSD_5_2:1.3.0.8
	OPENBSD_5_2_BASE:1.3
	OPENBSD_5_1_BASE:1.3
	OPENBSD_5_1:1.3.0.6
	OPENBSD_5_0:1.3.0.4
	OPENBSD_5_0_BASE:1.3
	OPENBSD_4_9:1.3.0.2
	OPENBSD_4_9_BASE:1.3
	PERL_5_12_2:1.1.1.1
	CPAN:1.1.1;
locks; strict;
comment	@# @;
expand	@o@;


1.5
date	2014.11.17.20.56.55;	author afresh1;	state Exp;
branches;
next	1.4;
commitid	QP75iYx42Uo7mMxO;

1.4
date	2014.03.24.15.05.23;	author afresh1;	state Exp;
branches;
next	1.3;

1.3
date	2011.01.06.21.23.16;	author millert;	state Exp;
branches;
next	1.2;

1.2
date	2010.12.06.14.34.15;	author jasper;	state Exp;
branches;
next	1.1;

1.1
date	2010.09.24.14.49.03;	author millert;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	2010.09.24.14.49.03;	author millert;	state Exp;
branches;
next	1.1.1.2;

1.1.1.2
date	2013.03.25.20.06.47;	author sthen;	state Exp;
branches;
next	1.1.1.3;

1.1.1.3
date	2014.03.24.14.58.49;	author afresh1;	state Exp;
branches;
next	1.1.1.4;

1.1.1.4
date	2014.11.17.20.52.41;	author afresh1;	state Exp;
branches;
next	;
commitid	B31cAbBIXiCqnL97;


desc
@@


1.5
log
@Fix merge conflicts, remove extra files, match upstream perl-5.20.1

ok deraadt@@ sthen@@ espie@@ miod@@
@
text
@package CGI::Cookie;

use strict;
use warnings;

use if $] >= 5.019, 'deprecate';

# See the bottom of this file for the POD documentation.  Search for the
# string '=head'.

# You can run this file through either pod2man or pod2html to produce pretty
# documentation in manual or html file format (these utilities are part of the
# Perl 5 distribution).

# Copyright 1995-1999, Lincoln D. Stein.  All rights reserved.
# It may be used and modified freely, but I do request that this copyright
# notice remain attached to the file.  You may modify this module as you
# wish, but if you redistribute a modified version, please attach a note
# listing the modifications you have made.

our $VERSION='1.31';

use CGI::Util qw(rearrange unescape escape);
use overload '""' => \&as_string, 'cmp' => \&compare, 'fallback' => 1;

my $PERLEX = 0;
# Turn on special checking for ActiveState's PerlEx
$PERLEX++ if defined($ENV{'GATEWAY_INTERFACE'}) && $ENV{'GATEWAY_INTERFACE'} =~ /^CGI-PerlEx/;

# Turn on special checking for mod_perl
# PerlEx::DBI tries to fool DBI by setting MOD_PERL
my $MOD_PERL = 0;
if (exists $ENV{MOD_PERL} && ! $PERLEX) {
  if (exists $ENV{MOD_PERL_API_VERSION} && $ENV{MOD_PERL_API_VERSION} == 2) {
      $MOD_PERL = 2;
      require Apache2::RequestUtil;
      require APR::Table;
  } else {
    $MOD_PERL = 1;
    require Apache;
  }
}

# fetch a list of cookies from the environment and
# return as a hash.  the cookies are parsed as normal
# escaped URL data.
sub fetch {
    my $class = shift;
    my $raw_cookie = get_raw_cookie(@@_) or return;
    return $class->parse($raw_cookie);
}

# Fetch a list of cookies from the environment or the incoming headers and
# return as a hash. The cookie values are not unescaped or altered in any way.
 sub raw_fetch {
   my $class = shift;
   my $raw_cookie = get_raw_cookie(@@_) or return;
   my %results;
   my($key,$value);
   
   my @@pairs = split("[;,] ?",$raw_cookie);
  for my $pair ( @@pairs ) {
    $pair =~ s/^\s+|\s+$//g;    # trim leading trailing whitespace
    my ( $key, $value ) = split "=", $pair;

    $value = defined $value ? $value : '';
    $results{$key} = $value;
  }
  return wantarray ? %results : \%results;
}

sub get_raw_cookie {
  my $r = shift;
  $r ||= eval { $MOD_PERL == 2                    ? 
                  Apache2::RequestUtil->request() :
                  Apache->request } if $MOD_PERL;

  return $r->headers_in->{'Cookie'} if $r;

  die "Run $r->subprocess_env; before calling fetch()" 
    if $MOD_PERL and !exists $ENV{REQUEST_METHOD};
    
  return $ENV{HTTP_COOKIE} || $ENV{COOKIE};
}


sub parse {
  my ($self,$raw_cookie) = @@_;
  return wantarray ? () : {} unless $raw_cookie;

  my %results;

  my @@pairs = split("[;,] ?",$raw_cookie);
  for (@@pairs) {
    s/^\s+//;
    s/\s+$//;

    my($key,$value) = split("=",$_,2);

    # Some foreign cookies are not in name=value format, so ignore
    # them.
    next if !defined($value);
    my @@values = ();
    if ($value ne '') {
      @@values = map unescape($_),split(/[&;]/,$value.'&dmy');
      pop @@values;
    }
    $key = unescape($key);
    # A bug in Netscape can cause several cookies with same name to
    # appear.  The FIRST one in HTTP_COOKIE is the most recent version.
    $results{$key} ||= $self->new(-name=>$key,-value=>\@@values);
  }
  return wantarray ? %results : \%results;
}

sub new {
  my ( $class, @@params ) = @@_;
  $class = ref( $class ) || $class;
  # Ignore mod_perl request object--compatibility with Apache::Cookie.
  shift if ref $params[0]
        && eval { $params[0]->isa('Apache::Request::Req') || $params[0]->isa('Apache') };
  my ( $name, $value, $path, $domain, $secure, $expires, $max_age, $httponly )
   = rearrange(
    [
      'NAME', [ 'VALUE', 'VALUES' ],
      'PATH',   'DOMAIN',
      'SECURE', 'EXPIRES',
      'MAX-AGE','HTTPONLY'
    ],
    @@params
   );
  return undef unless defined $name and defined $value;
  my $self = {};
  bless $self, $class;
  $self->name( $name );
  $self->value( $value );
  $path ||= "/";
  $self->path( $path )         if defined $path;
  $self->domain( $domain )     if defined $domain;
  $self->secure( $secure )     if defined $secure;
  $self->expires( $expires )   if defined $expires;
  $self->max_age($expires)     if defined $max_age;
  $self->httponly( $httponly ) if defined $httponly;
  return $self;
}

sub as_string {
    my $self = shift;
    return "" unless $self->name;

    no warnings; # some things may be undefined, that's OK.

    my $name  = escape( $self->name );
    my $value = join "&", map { escape($_) } $self->value;
    my @@cookie = ( "$name=$value" );

    push @@cookie,"domain=".$self->domain   if $self->domain;
    push @@cookie,"path=".$self->path       if $self->path;
    push @@cookie,"expires=".$self->expires if $self->expires;
    push @@cookie,"max-age=".$self->max_age if $self->max_age;
    push @@cookie,"secure"                  if $self->secure;
    push @@cookie,"HttpOnly"                if $self->httponly;

    return join "; ", @@cookie;
}

sub compare {
    my ( $self, $value ) = @@_;
    return "$self" cmp $value;
}

sub bake {
  my ($self, $r) = @@_;

  $r ||= eval {
      $MOD_PERL == 2
          ? Apache2::RequestUtil->request()
          : Apache->request
  } if $MOD_PERL;
  if ($r) {
      $r->headers_out->add('Set-Cookie' => $self->as_string);
  } else {
      require CGI;
      print CGI::header(-cookie => $self);
  }

}

# accessors
sub name {
    my ( $self, $name ) = @@_;
    $self->{'name'} = $name if defined $name;
    return $self->{'name'};
}

sub value {
  my ( $self, $value ) = @@_;
  if ( defined $value ) {
    my @@values
     = ref $value eq 'ARRAY' ? @@$value
     : ref $value eq 'HASH'  ? %$value
     :                         ( $value );
    $self->{'value'} = [@@values];
  }
  return wantarray ? @@{ $self->{'value'} } : $self->{'value'}->[0];
}

sub domain {
    my ( $self, $domain ) = @@_;
    $self->{'domain'} = lc $domain if defined $domain;
    return $self->{'domain'};
}

sub secure {
    my ( $self, $secure ) = @@_;
    $self->{'secure'} = $secure if defined $secure;
    return $self->{'secure'};
}

sub expires {
    my ( $self, $expires ) = @@_;
    $self->{'expires'} = CGI::Util::expires($expires,'cookie') if defined $expires;
    return $self->{'expires'};
}

sub max_age {
    my ( $self, $max_age ) = @@_;
    $self->{'max-age'} = CGI::Util::expire_calc($max_age)-time() if defined $max_age;
    return $self->{'max-age'};
}

sub path {
    my ( $self, $path ) = @@_;
    $self->{'path'} = $path if defined $path;
    return $self->{'path'};
}


sub httponly { # HttpOnly
    my ( $self, $httponly ) = @@_;
    $self->{'httponly'} = $httponly if defined $httponly;
    return $self->{'httponly'};
}

1;

=head1 NAME

CGI::Cookie - Interface to HTTP Cookies

=head1 SYNOPSIS

    use CGI qw/:standard/;
    use CGI::Cookie;

    # Create new cookies and send them
    $cookie1 = CGI::Cookie->new(-name=>'ID',-value=>123456);
    $cookie2 = CGI::Cookie->new(-name=>'preferences',
                               -value=>{ font => Helvetica,
                                         size => 12 } 
                               );
    print header(-cookie=>[$cookie1,$cookie2]);

    # fetch existing cookies
    %cookies = CGI::Cookie->fetch;
    $id = $cookies{'ID'}->value;

    # create cookies returned from an external source
    %cookies = CGI::Cookie->parse($ENV{COOKIE});

=head1 DESCRIPTION

CGI::Cookie is an interface to HTTP/1.1 cookies, an
innovation that allows Web servers to store persistent information on
the browser's side of the connection.  Although CGI::Cookie is
intended to be used in conjunction with CGI.pm (and is in fact used by
it internally), you can use this module independently.

For full information on cookies see 

	http://tools.ietf.org/html/rfc2109
	http://tools.ietf.org/html/rfc2965
	http://tools.ietf.org/html/draft-ietf-httpstate-cookie

=head1 USING CGI::Cookie

CGI::Cookie is object oriented.  Each cookie object has a name and a
value.  The name is any scalar value.  The value is any scalar or
array value (associative arrays are also allowed).  Cookies also have
several optional attributes, including:

=over 4

=item B<1. expiration date>

The expiration date tells the browser how long to hang on to the
cookie.  If the cookie specifies an expiration date in the future, the
browser will store the cookie information in a disk file and return it
to the server every time the user reconnects (until the expiration
date is reached).  If the cookie species an expiration date in the
past, the browser will remove the cookie from the disk file.  If the
expiration date is not specified, the cookie will persist only until
the user quits the browser.

=item B<2. domain>

This is a partial or complete domain name for which the cookie is 
valid.  The browser will return the cookie to any host that matches
the partial domain name.  For example, if you specify a domain name
of ".capricorn.com", then the browser will return the cookie to
Web servers running on any of the machines "www.capricorn.com", 
"ftp.capricorn.com", "feckless.capricorn.com", etc.  Domain names
must contain at least two periods to prevent attempts to match
on top level domains like ".edu".  If no domain is specified, then
the browser will only return the cookie to servers on the host the
cookie originated from.

=item B<3. path>

If you provide a cookie path attribute, the browser will check it
against your script's URL before returning the cookie.  For example,
if you specify the path "/cgi-bin", then the cookie will be returned
to each of the scripts "/cgi-bin/tally.pl", "/cgi-bin/order.pl", and
"/cgi-bin/customer_service/complain.pl", but not to the script
"/cgi-private/site_admin.pl".  By default, the path is set to "/", so
that all scripts at your site will receive the cookie.

=item B<4. secure flag>

If the "secure" attribute is set, the cookie will only be sent to your
script if the CGI request is occurring on a secure channel, such as SSL.

=item B<5. httponly flag>

If the "httponly" attribute is set, the cookie will only be accessible
through HTTP Requests. This cookie will be inaccessible via JavaScript
(to prevent XSS attacks).

This feature is supported by nearly all modern browsers.

See these URLs for more information:

	http://msdn.microsoft.com/en-us/library/ms533046.aspx
    http://www.browserscope.org/?category=security&v=top

=back

=head2 Creating New Cookies

	my $c = CGI::Cookie->new(-name    =>  'foo',
                             -value   =>  'bar',
                             -expires =>  '+3M',
                             -domain  =>  '.capricorn.com',
                             -path    =>  '/cgi-bin/database',
                             -secure  =>  1
	                    );

Create cookies from scratch with the B<new> method.  The B<-name> and
B<-value> parameters are required.  The name must be a scalar value.
The value can be a scalar, an array reference, or a hash reference.
(At some point in the future cookies will support one of the Perl
object serialization protocols for full generality).

B<-expires> accepts any of the relative or absolute date formats
recognized by CGI.pm, for example "+3M" for three months in the
future.  See CGI.pm's documentation for details.

B<-max-age> accepts the same data formats as B<< -expires >>, but sets a
relative value instead of an absolute like B<< -expires >>. This is intended to be
more secure since a clock could be changed to fake an absolute time. In
practice, as of 2011, C<< -max-age >> still does not enjoy the widespread support
that C<< -expires >> has. You can set both, and browsers that support
C<< -max-age >> should ignore the C<< Expires >> header. The drawback
to this approach is the bit of bandwidth for sending an extra header on each cookie.

B<-domain> points to a domain name or to a fully qualified host name.
If not specified, the cookie will be returned only to the Web server
that created it.

B<-path> points to a partial URL on the current server.  The cookie
will be returned to all URLs beginning with the specified path.  If
not specified, it defaults to '/', which returns the cookie to all
pages at your site.

B<-secure> if set to a true value instructs the browser to return the
cookie only when a cryptographic protocol is in use.

B<-httponly> if set to a true value, the cookie will not be accessible
via JavaScript.

For compatibility with Apache::Cookie, you may optionally pass in
a mod_perl request object as the first argument to C<new()>. It will
simply be ignored:

  my $c = CGI::Cookie->new($r,
                          -name    =>  'foo',
                          -value   =>  ['bar','baz']);

=head2 Sending the Cookie to the Browser

The simplest way to send a cookie to the browser is by calling the bake()
method:

  $c->bake;

This will print the Set-Cookie HTTP header to STDOUT using CGI.pm. CGI.pm
will be loaded for this purpose if it is not already. Otherwise CGI.pm is not
required or used by this module.

Under mod_perl, pass in an Apache request object:

  $c->bake($r);

If you want to set the cookie yourself, Within a CGI script you can send
a cookie to the browser by creating one or more Set-Cookie: fields in the
HTTP header.  Here is a typical sequence:

  my $c = CGI::Cookie->new(-name    =>  'foo',
                          -value   =>  ['bar','baz'],
                          -expires =>  '+3M');

  print "Set-Cookie: $c\n";
  print "Content-Type: text/html\n\n";

To send more than one cookie, create several Set-Cookie: fields.

If you are using CGI.pm, you send cookies by providing a -cookie
argument to the header() method:

  print header(-cookie=>$c);

Mod_perl users can set cookies using the request object's header_out()
method:

  $r->headers_out->set('Set-Cookie' => $c);

Internally, Cookie overloads the "" operator to call its as_string()
method when incorporated into the HTTP header.  as_string() turns the
Cookie's internal representation into an RFC-compliant text
representation.  You may call as_string() yourself if you prefer:

  print "Set-Cookie: ",$c->as_string,"\n";

=head2 Recovering Previous Cookies

	%cookies = CGI::Cookie->fetch;

B<fetch> returns an associative array consisting of all cookies
returned by the browser.  The keys of the array are the cookie names.  You
can iterate through the cookies this way:

	%cookies = CGI::Cookie->fetch;
	for (keys %cookies) {
	   do_something($cookies{$_});
        }

In a scalar context, fetch() returns a hash reference, which may be more
efficient if you are manipulating multiple cookies.

CGI.pm uses the URL escaping methods to save and restore reserved characters
in its cookies.  If you are trying to retrieve a cookie set by a foreign server,
this escaping method may trip you up.  Use raw_fetch() instead, which has the
same semantics as fetch(), but performs no unescaping.

You may also retrieve cookies that were stored in some external
form using the parse() class method:

       $COOKIES = `cat /usr/tmp/Cookie_stash`;
       %cookies = CGI::Cookie->parse($COOKIES);

If you are in a mod_perl environment, you can save some overhead by
passing the request object to fetch() like this:

   CGI::Cookie->fetch($r);

If the value passed to parse() is undefined, an empty array will returned in list
context, and an empty hashref will be returned in scalar context.

=head2 Manipulating Cookies

Cookie objects have a series of accessor methods to get and set cookie
attributes.  Each accessor has a similar syntax.  Called without
arguments, the accessor returns the current value of the attribute.
Called with an argument, the accessor changes the attribute and
returns its new value.

=over 4

=item B<name()>

Get or set the cookie's name.  Example:

	$name = $c->name;
	$new_name = $c->name('fred');

=item B<value()>

Get or set the cookie's value.  Example:

	$value = $c->value;
	@@new_value = $c->value(['a','b','c','d']);

B<value()> is context sensitive.  In a list context it will return
the current value of the cookie as an array.  In a scalar context it
will return the B<first> value of a multivalued cookie.

=item B<domain()>

Get or set the cookie's domain.

=item B<path()>

Get or set the cookie's path.

=item B<expires()>

Get or set the cookie's expiration time.

=back


=head1 AUTHOR INFORMATION

Copyright 1997-1998, Lincoln D. Stein.  All rights reserved.  

This library is free software; you can redistribute it and/or modify
it under the same terms as Perl itself.

Address bug reports and comments to: lstein@@cshl.org

=head1 BUGS

This section intentionally left blank.

=head1 SEE ALSO

L<CGI::Carp>, L<CGI>

L<RFC 2109|http://www.ietf.org/rfc/rfc2109.txt>, L<RFC 2695|http://www.ietf.org/rfc/rfc2965.txt>

=cut
@


1.4
log
@Merge perl-5.18.2 plus local patches, remove old files

OK espie@@ sthen@@ deraadt@@
@
text
@d6 2
d21 1
a21 1
our $VERSION='1.30';
d339 1
a339 2
This feature is only supported by recent browsers like Internet Explorer
6 Service Pack 1, Firefox 3.0 and Opera 9.5 (and later of course).
d344 1
a344 1
	http://www.owasp.org/index.php/HTTPOnly#Browsers_Supporting_HTTPOnly
@


1.3
log
@Update CGI to 3.51, which includes a better fix for SA42443,
"multipart_init()" HTTP Header Injection Vulnerability.
@
text
@d476 1
a476 1
contact, and an empty hashref will be returned in scalar context.
@


1.2
log
@- update CGI to 3.50, which includes a fix for SA42443,
"multipart_init()" HTTP Header Injection Vulnerability.
- add a mention in patchlevel.h (reminded by millert@@)

ok millert@@
@
text
@d15 1
a15 1
# notice remain attached to the file.  You may modify this module as you 
d19 1
a19 1
$CGI::Cookie::VERSION='1.29';
d22 1
a22 4
use CGI;
use overload '""' => \&as_string,
    'cmp' => \&compare,
    'fallback'=>1;
d28 1
a28 1
# Turn on special checking for Doug MacEachern's modperl
d60 8
a67 14
   foreach (@@pairs) {
     s/\s*(.*?)\s*/$1/;
     if (/^([^=]+)=(.*)/) {
       $key = $1;
       $value = $2;
     }
     else {
       $key = $_;
       $value = '';
     }
     $results{$key} = $value;
   }
   return \%results unless wantarray;
   return %results;
d87 2
d92 4
a95 2
  foreach (@@pairs) {
    s/\s*(.*?)\s*/$1/;
d111 1
a111 2
  return \%results unless wantarray;
  return %results;
d115 27
a141 38
  my $class = shift;
  $class = ref($class) if ref($class);
  # Ignore mod_perl request object--compatability with Apache::Cookie.
  shift if ref $_[0]
        && eval { $_[0]->isa('Apache::Request::Req') || $_[0]->isa('Apache') };
  my($name,$value,$path,$domain,$secure,$expires,$httponly) =
    rearrange([ 'NAME', ['VALUE','VALUES'], qw/ PATH DOMAIN SECURE EXPIRES
        HTTPONLY / ], @@_);
  
  # Pull out our parameters.
  my @@values;
  if (ref($value)) {
    if (ref($value) eq 'ARRAY') {
      @@values = @@$value;
    } elsif (ref($value) eq 'HASH') {
      @@values = %$value;
    }
  } else {
    @@values = ($value);
  }
  
  bless my $self = {
		    'name'=>$name,
		    'value'=>[@@values],
		   },$class;

  # IE requires the path and domain to be present for some reason.
  $path   ||= "/";
  # however, this breaks networks which use host tables without fully qualified
  # names, so we comment it out.
  #    $domain = CGI::virtual_host()    unless defined $domain;

  $self->path($path)     if defined $path;
  $self->domain($domain) if defined $domain;
  $self->secure($secure) if defined $secure;
  $self->expires($expires) if defined $expires;
  $self->httponly($httponly) if defined $httponly;
#  $self->max_age($expires) if defined $expires;
d149 12
a160 1
    my(@@constant_values,$domain,$path,$expires,$max_age,$secure,$httponly);
d162 1
a162 10
    push(@@constant_values,"domain=$domain")   if $domain = $self->domain;
    push(@@constant_values,"path=$path")       if $path = $self->path;
    push(@@constant_values,"expires=$expires") if $expires = $self->expires;
    push(@@constant_values,"max-age=$max_age") if $max_age = $self->max_age;
    push(@@constant_values,"secure") if $secure = $self->secure;
    push(@@constant_values,"HttpOnly") if $httponly = $self->httponly;

    my($key) = escape($self->name);
    my($cookie) = join("=",(defined $key ? $key : ''),join("&",map escape(defined $_ ? $_ : ''),$self->value));
    return join("; ",$cookie,@@constant_values);
d166 1
a166 2
    my $self = shift;
    my $value = shift;
d181 1
d189 1
a189 2
    my $self = shift;
    my $name = shift;
d195 9
a203 16
    my $self = shift;
    my $value = shift;
      if (defined $value) {
              my @@values;
        if (ref($value)) {
            if (ref($value) eq 'ARRAY') {
                @@values = @@$value;
            } elsif (ref($value) eq 'HASH') {
                @@values = %$value;
            }
        } else {
            @@values = ($value);
        }
      $self->{'value'} = [@@values];
      }
    return wantarray ? @@{$self->{'value'}} : $self->{'value'}->[0]
d207 1
a207 2
    my $self = shift;
    my $domain = shift;
d213 1
a213 2
    my $self = shift;
    my $secure = shift;
d219 1
a219 2
    my $self = shift;
    my $expires = shift;
d225 3
a227 4
  my $self = shift;
  my $expires = shift;
  $self->{'max-age'} = CGI::Util::expire_calc($expires)-time() if defined $expires;
  return $self->{'max-age'};
d231 1
a231 2
    my $self = shift;
    my $path = shift;
d238 1
a238 2
    my $self     = shift;
    my $httponly = shift;
d247 1
a247 1
CGI::Cookie - Interface to Netscape Cookies
d255 2
a256 2
    $cookie1 = new CGI::Cookie(-name=>'ID',-value=>123456);
    $cookie2 = new CGI::Cookie(-name=>'preferences',
d263 1
a263 1
    %cookies = fetch CGI::Cookie;
d267 1
a267 1
    %cookies = parse CGI::Cookie($ENV{COOKIE});
d271 1
a271 1
CGI::Cookie is an interface to Netscape (HTTP/1.1) cookies, an
d308 1
a308 1
of ".capricorn.com", then Netscape will return the cookie to
d349 1
a349 1
	my $c = new CGI::Cookie(-name    =>  'foo',
d367 8
d394 1
a394 1
  my $c = new CGI::Cookie($r,
d405 4
d417 1
a417 1
  my $c = new CGI::Cookie(-name    =>  'foo',
d445 1
a445 1
	%cookies = fetch CGI::Cookie;
d451 2
a452 2
	%cookies = fetch CGI::Cookie;
	foreach (keys %cookies) {
d468 1
a468 1
       %cookies = parse CGI::Cookie($COOKIES);
d475 3
d537 2
@


1.1
log
@Initial revision
@
text
@d308 3
a310 1
	http://www.ics.uci.edu/pub/ietf/http/rfc2109.txt
d360 1
a360 1
=item B<4. httponly flag>
d366 2
a367 2
But, currently this feature only used and recognised by 
MS Internet Explorer 6 Service Pack 1 and later.
d369 1
a369 1
See this URL for more information:
d371 2
a372 1
L<http://msdn.microsoft.com/en-us/library/ms533046%28VS.85%29.aspx>
@


1.1.1.1
log
@Perl 5.12.2 from CPAN
@
text
@@


1.1.1.2
log
@import perl 5.16.3 from CPAN - worked on by Andrew Fresh and myself
@
text
@d15 1
a15 1
# notice remain attached to the file.  You may modify this module as you
d19 1
a19 1
our $VERSION='1.30';
d22 4
a25 1
use overload '""' => \&as_string, 'cmp' => \&compare, 'fallback' => 1;
d31 1
a31 1
# Turn on special checking for mod_perl
d63 14
a76 8
  for my $pair ( @@pairs ) {
    $pair =~ s/^\s+|\s+$//g;    # trim leading trailing whitespace
    my ( $key, $value ) = split "=", $pair;

    $value = defined $value ? $value : '';
    $results{$key} = $value;
  }
  return wantarray ? %results : \%results;
a95 2
  return wantarray ? () : {} unless $raw_cookie;

d99 2
a100 4
  for (@@pairs) {
    s/^\s+//;
    s/\s+$//;

d116 2
a117 1
  return wantarray ? %results : \%results;
d121 38
a158 27
  my ( $class, @@params ) = @@_;
  $class = ref( $class ) || $class;
  # Ignore mod_perl request object--compatibility with Apache::Cookie.
  shift if ref $params[0]
        && eval { $params[0]->isa('Apache::Request::Req') || $params[0]->isa('Apache') };
  my ( $name, $value, $path, $domain, $secure, $expires, $max_age, $httponly )
   = rearrange(
    [
      'NAME', [ 'VALUE', 'VALUES' ],
      'PATH',   'DOMAIN',
      'SECURE', 'EXPIRES',
      'MAX-AGE','HTTPONLY'
    ],
    @@params
   );
  return undef unless defined $name and defined $value;
  my $self = {};
  bless $self, $class;
  $self->name( $name );
  $self->value( $value );
  $path ||= "/";
  $self->path( $path )         if defined $path;
  $self->domain( $domain )     if defined $domain;
  $self->secure( $secure )     if defined $secure;
  $self->expires( $expires )   if defined $expires;
  $self->max_age($expires)     if defined $max_age;
  $self->httponly( $httponly ) if defined $httponly;
d166 1
a166 12
    no warnings; # some things may be undefined, that's OK.

    my $name  = escape( $self->name );
    my $value = join "&", map { escape($_) } $self->value;
    my @@cookie = ( "$name=$value" );

    push @@cookie,"domain=".$self->domain   if $self->domain;
    push @@cookie,"path=".$self->path       if $self->path;
    push @@cookie,"expires=".$self->expires if $self->expires;
    push @@cookie,"max-age=".$self->max_age if $self->max_age;
    push @@cookie,"secure"                  if $self->secure;
    push @@cookie,"HttpOnly"                if $self->httponly;
d168 10
a177 1
    return join "; ", @@cookie;
d181 2
a182 1
    my ( $self, $value ) = @@_;
a196 1
      require CGI;
d204 2
a205 1
    my ( $self, $name ) = @@_;
d211 16
a226 9
  my ( $self, $value ) = @@_;
  if ( defined $value ) {
    my @@values
     = ref $value eq 'ARRAY' ? @@$value
     : ref $value eq 'HASH'  ? %$value
     :                         ( $value );
    $self->{'value'} = [@@values];
  }
  return wantarray ? @@{ $self->{'value'} } : $self->{'value'}->[0];
d230 2
a231 1
    my ( $self, $domain ) = @@_;
d237 2
a238 1
    my ( $self, $secure ) = @@_;
d244 2
a245 1
    my ( $self, $expires ) = @@_;
d251 4
a254 3
    my ( $self, $max_age ) = @@_;
    $self->{'max-age'} = CGI::Util::expire_calc($max_age)-time() if defined $max_age;
    return $self->{'max-age'};
d258 2
a259 1
    my ( $self, $path ) = @@_;
d266 2
a267 1
    my ( $self, $httponly ) = @@_;
d276 1
a276 1
CGI::Cookie - Interface to HTTP Cookies
d284 2
a285 2
    $cookie1 = CGI::Cookie->new(-name=>'ID',-value=>123456);
    $cookie2 = CGI::Cookie->new(-name=>'preferences',
d292 1
a292 1
    %cookies = CGI::Cookie->fetch;
d296 1
a296 1
    %cookies = CGI::Cookie->parse($ENV{COOKIE});
d300 1
a300 1
CGI::Cookie is an interface to HTTP/1.1 cookies, an
d308 1
a308 3
	http://tools.ietf.org/html/rfc2109
	http://tools.ietf.org/html/rfc2965
	http://tools.ietf.org/html/draft-ietf-httpstate-cookie
d335 1
a335 1
of ".capricorn.com", then the browser will return the cookie to
d358 1
a358 1
=item B<5. httponly flag>
d364 2
a365 2
This feature is only supported by recent browsers like Internet Explorer
6 Service Pack 1, Firefox 3.0 and Opera 9.5 (and later of course).
d367 1
a367 1
See these URLs for more information:
d369 1
a369 2
	http://msdn.microsoft.com/en-us/library/ms533046.aspx
	http://www.owasp.org/index.php/HTTPOnly#Browsers_Supporting_HTTPOnly
d375 1
a375 1
	my $c = CGI::Cookie->new(-name    =>  'foo',
a392 8
B<-max-age> accepts the same data formats as B<< -expires >>, but sets a
relative value instead of an absolute like B<< -expires >>. This is intended to be
more secure since a clock could be changed to fake an absolute time. In
practice, as of 2011, C<< -max-age >> still does not enjoy the widespread support
that C<< -expires >> has. You can set both, and browsers that support
C<< -max-age >> should ignore the C<< Expires >> header. The drawback
to this approach is the bit of bandwidth for sending an extra header on each cookie.

d412 1
a412 1
  my $c = CGI::Cookie->new($r,
a422 4
This will print the Set-Cookie HTTP header to STDOUT using CGI.pm. CGI.pm
will be loaded for this purpose if it is not already. Otherwise CGI.pm is not
required or used by this module.

d431 1
a431 1
  my $c = CGI::Cookie->new(-name    =>  'foo',
d459 1
a459 1
	%cookies = CGI::Cookie->fetch;
d465 2
a466 2
	%cookies = CGI::Cookie->fetch;
	for (keys %cookies) {
d482 1
a482 1
       %cookies = CGI::Cookie->parse($COOKIES);
a488 3
If the value passed to parse() is undefined, an empty array will returned in list
contact, and an empty hashref will be returned in scalar context.

a547 2

L<RFC 2109|http://www.ietf.org/rfc/rfc2109.txt>, L<RFC 2695|http://www.ietf.org/rfc/rfc2965.txt>
@


1.1.1.3
log
@Import perl-5.18.2

OK espie@@ sthen@@ deraadt@@
@
text
@d476 1
a476 1
context, and an empty hashref will be returned in scalar context.
@


1.1.1.4
log
@Import perl-5.20.1
@
text
@a5 2
use if $] >= 5.019, 'deprecate';

d19 1
a19 1
our $VERSION='1.31';
d337 2
a338 1
This feature is supported by nearly all modern browsers.
d343 1
a343 1
    http://www.browserscope.org/?category=security&v=top
@


