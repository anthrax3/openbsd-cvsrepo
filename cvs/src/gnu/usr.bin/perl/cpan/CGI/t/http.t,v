head	1.3;
access;
symbols
	OPENBSD_6_0:1.3.0.26
	OPENBSD_6_0_BASE:1.3
	OPENBSD_5_9:1.3.0.20
	OPENBSD_5_9_BASE:1.3
	OPENBSD_5_8:1.3.0.22
	OPENBSD_5_8_BASE:1.3
	PERL_5_20_2:1.1.1.2
	OPENBSD_5_7:1.3.0.14
	OPENBSD_5_7_BASE:1.3
	PERL_5_20_1:1.1.1.2
	OPENBSD_5_6:1.3.0.18
	OPENBSD_5_6_BASE:1.3
	PERL_5_18_2:1.1.1.2
	PERL:1.1.1
	OPENBSD_5_5:1.3.0.16
	OPENBSD_5_5_BASE:1.3
	OPENBSD_5_4:1.3.0.12
	OPENBSD_5_4_BASE:1.3
	PERL_5_16_3:1.1.1.2
	OPENBSD_5_3:1.3.0.10
	OPENBSD_5_3_BASE:1.3
	OPENBSD_5_2:1.3.0.8
	OPENBSD_5_2_BASE:1.3
	OPENBSD_5_1_BASE:1.3
	OPENBSD_5_1:1.3.0.6
	OPENBSD_5_0:1.3.0.4
	OPENBSD_5_0_BASE:1.3
	OPENBSD_4_9:1.3.0.2
	OPENBSD_4_9_BASE:1.3
	PERL_5_12_2:1.1.1.1
	CPAN:1.1.1;
locks; strict;
comment	@# @;
expand	@o@;


1.3
date	2011.01.06.21.23.16;	author millert;	state Exp;
branches;
next	1.2;

1.2
date	2010.12.06.14.34.15;	author jasper;	state Exp;
branches;
next	1.1;

1.1
date	2010.09.24.14.49.03;	author millert;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	2010.09.24.14.49.03;	author millert;	state Exp;
branches;
next	1.1.1.2;

1.1.1.2
date	2013.03.25.20.06.47;	author sthen;	state Exp;
branches;
next	;


desc
@@


1.3
log
@Update CGI to 3.51, which includes a better fix for SA42443,
"multipart_init()" HTTP Header Injection Vulnerability.
@
text
@#!./perl -w

# Fixes RT 12909

use lib qw(t/lib);

use Test::More tests => 7;
use CGI;

my $cgi = CGI->new();

{
    # http() without arguments should not cause warnings
    local $SIG{__WARN__} = sub { die @@_ };
    ok eval { $cgi->http(); 1 },  "http() without arguments doesn't warn";
    ok eval { $cgi->https(); 1 }, "https() without arguments doesn't warn";
}

{
    # Capitalization and the use of hyphens versus underscores are not significant.
    local $ENV{'HTTP_HOST'}   = 'foo';
    is $cgi->http('Host'),      'foo', 'http("Host") returns $ENV{HTTP_HOST}';
    is $cgi->http('http-host'), 'foo', 'http("http-host") returns $ENV{HTTP_HOST}';
}

{
    # Called with no arguments returns the list of HTTP environment variables
    local $ENV{'HTTPS_FOO'} = 'bar';
    my @@http = $cgi->http();
    is scalar( grep /^HTTPS/, @@http), 0, "http() doesn't return HTTPS variables";
}

{
    # https()
    # The same as http(), but operates on the HTTPS environment variables present when the SSL protocol is in
    # effect.  Can be used to determine whether SSL is turned on.
    my @@expect = grep /^HTTPS/, keys %ENV;
    push @@expect, 'HTTPS'         if not exists $ENV{HTTPS};
    push @@expect, 'HTTPS_KEYSIZE' if not exists $ENV{HTTPS_KEYSIZE};
    local $ENV{'HTTPS'} = 'ON';
    local $ENV{'HTTPS_KEYSIZE'} = 512;
    is $cgi->https(), 'ON', 'scalar context to check SSL is on';
    ok eq_set( [$cgi->https()], \@@expect), 'list context returns https keys';
}
@


1.2
log
@- update CGI to 3.50, which includes a fix for SA42443,
"multipart_init()" HTTP Header Injection Vulnerability.
- add a mention in patchlevel.h (reminded by millert@@)

ok millert@@
@
text
@d37 5
a41 2
    local %ENV;
    @@ENV{qw/ HTTPS HTTPS_KEYSIZE /} = ('ON', 512);
d43 1
a43 1
    ok eq_set( [$cgi->https()], [qw(HTTPS HTTPS_KEYSIZE)]), 'list context returns https keys';
@


1.1
log
@Initial revision
@
text
@d37 2
a38 2
    local $ENV{'HTTPS'} = 'ON';
    local $ENV{'HTTPS_KEYSIZE'} = 512;
@


1.1.1.1
log
@Perl 5.12.2 from CPAN
@
text
@@


1.1.1.2
log
@import perl 5.16.3 from CPAN - worked on by Andrew Fresh and myself
@
text
@a36 3
    my @@expect = grep /^HTTPS/, keys %ENV;
    push @@expect, 'HTTPS'         if not exists $ENV{HTTPS};
    push @@expect, 'HTTPS_KEYSIZE' if not exists $ENV{HTTPS_KEYSIZE};
d40 1
a40 1
    ok eq_set( [$cgi->https()], \@@expect), 'list context returns https keys';
@

