head	1.1;
branch	1.1.1;
access;
symbols
	OPENBSD_6_0:1.1.1.1.0.26
	OPENBSD_6_0_BASE:1.1.1.1
	OPENBSD_5_9:1.1.1.1.0.20
	OPENBSD_5_9_BASE:1.1.1.1
	OPENBSD_5_8:1.1.1.1.0.22
	OPENBSD_5_8_BASE:1.1.1.1
	PERL_5_20_2:1.1.1.1
	OPENBSD_5_7:1.1.1.1.0.14
	OPENBSD_5_7_BASE:1.1.1.1
	PERL_5_20_1:1.1.1.1
	OPENBSD_5_6:1.1.1.1.0.18
	OPENBSD_5_6_BASE:1.1.1.1
	PERL_5_18_2:1.1.1.1
	PERL:1.1.1
	OPENBSD_5_5:1.1.1.1.0.16
	OPENBSD_5_5_BASE:1.1.1.1
	OPENBSD_5_4:1.1.1.1.0.12
	OPENBSD_5_4_BASE:1.1.1.1
	PERL_5_16_3:1.1.1.1
	OPENBSD_5_3:1.1.1.1.0.10
	OPENBSD_5_3_BASE:1.1.1.1
	OPENBSD_5_2:1.1.1.1.0.8
	OPENBSD_5_2_BASE:1.1.1.1
	OPENBSD_5_1_BASE:1.1.1.1
	OPENBSD_5_1:1.1.1.1.0.6
	OPENBSD_5_0:1.1.1.1.0.4
	OPENBSD_5_0_BASE:1.1.1.1
	OPENBSD_4_9:1.1.1.1.0.2
	OPENBSD_4_9_BASE:1.1.1.1
	PERL_5_12_2:1.1.1.1
	CPAN:1.1.1;
locks; strict;
comment	@# @;
expand	@o@;


1.1
date	2010.09.24.14.49.03;	author millert;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	2010.09.24.14.49.03;	author millert;	state Exp;
branches;
next	;


desc
@@


1.1
log
@Initial revision
@
text
@#!perl -T

use strict;
use warnings;

use utf8;

use Test::More tests => 7;
use Encode;

use_ok( 'CGI' );

ok( my $q = CGI->new, 'create a new CGI object' );

{
    no warnings qw/ once /;
    $CGI::PARAM_UTF8 = 1;
}

my $data = 'áéíóúµ';
ok Encode::is_utf8($data), "created UTF-8 encoded data string";

# now set the param.
$q->param(data => $data);

# if param() runs the data  through Encode::decode(), this will fail.
is $q->param('data'), $data;

# make sure setting bytes decodes properly
my $bytes = Encode::encode(utf8 => $data);
ok !Encode::is_utf8($bytes), "converted UTF-8 to bytes";
$q->param(data => $bytes);
is $q->param('data'), $data;
ok Encode::is_utf8($q->param('data')), 'param() decoded UTF-8';
@


1.1.1.1
log
@Perl 5.12.2 from CPAN
@
text
@@
