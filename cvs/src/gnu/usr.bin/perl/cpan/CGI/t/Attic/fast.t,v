head	1.2;
access;
symbols
	OPENBSD_5_3:1.1.0.10
	OPENBSD_5_3_BASE:1.1
	OPENBSD_5_2:1.1.0.8
	OPENBSD_5_2_BASE:1.1
	OPENBSD_5_1_BASE:1.1
	OPENBSD_5_1:1.1.0.6
	OPENBSD_5_0:1.1.0.4
	OPENBSD_5_0_BASE:1.1
	OPENBSD_4_9:1.1.0.2
	OPENBSD_4_9_BASE:1.1;
locks; strict;
comment	@# @;


1.2
date	2013.03.25.20.40.46;	author sthen;	state dead;
branches;
next	1.1;

1.1
date	2010.12.06.14.34.15;	author jasper;	state Exp;
branches;
next	;


desc
@@


1.2
log
@merge/resolve conflicts
(some more to do after this one)
@
text
@#!perl -w

my $fcgi;
BEGIN {
	local $@@;
	eval { require FCGI };
	$fcgi = $@@ ? 0 : 1;
}

use Test::More tests => 10;

# Shut up "used only once" warnings.
() = $CGI::Q;
() = $CGI::Fast::Ext_Request;

SKIP: {
	skip( 'FCGI not installed, cannot continue', 10 ) unless $fcgi;

	require CGI::Fast;
	ok( my $q = CGI::Fast->new(), 'created new CGI::Fast object' );
	is( $q, $CGI::Q, 'checking to see if the object was stored properly' );
	is( $q->param(), (), 'no params' );

	ok( $q = CGI::Fast->new({ foo => 'bar' }), 'creating object with params' );
	is( $q->param('foo'), 'bar', 'checking passed param' );

	# if this is false, the package var will be empty
	$ENV{FCGI_SOCKET_PATH} = 0;
	is( $CGI::Fast::Ext_Request, undef, 'checking no active request' );

    is($CGI::PRIVATE_TEMPFILES,0, "reality check default value for CGI::PRIVATE_TEMPFILES");
	import CGI::Fast '-private_tempfiles';
    CGI::Fast->new;
    is($CGI::PRIVATE_TEMPFILES,1, "pragma in subclass set package variable in parent class. ");
    $q = CGI::Fast->new({ a => 1 });
    ok($q, "reality check: something was returned from CGI::Fast->new besides undef");
    is($CGI::PRIVATE_TEMPFILES,1, "package variable in parent class persists through multiple calls to CGI::Fast->new ");

};
@


1.1
log
@- update CGI to 3.50, which includes a fix for SA42443,
"multipart_init()" HTTP Header Injection Vulnerability.
- add a mention in patchlevel.h (reminded by millert@@)

ok millert@@
@
text
@@

