head	1.10;
access;
symbols
	OPENBSD_6_0:1.8.0.8
	OPENBSD_6_0_BASE:1.8
	OPENBSD_5_9:1.8.0.2
	OPENBSD_5_9_BASE:1.8
	OPENBSD_5_8:1.8.0.4
	OPENBSD_5_8_BASE:1.8
	PERL_5_20_2:1.1.1.4
	OPENBSD_5_7:1.6.0.2
	OPENBSD_5_7_BASE:1.6
	PERL_5_20_1:1.1.1.4
	OPENBSD_5_6:1.4.0.4
	OPENBSD_5_6_BASE:1.4
	PERL_5_18_2:1.1.1.3
	PERL:1.1.1
	OPENBSD_5_5:1.3.0.6
	OPENBSD_5_5_BASE:1.3
	OPENBSD_5_4:1.3.0.2
	OPENBSD_5_4_BASE:1.3
	PERL_5_16_3:1.1.1.2
	OPENBSD_5_3:1.2.0.10
	OPENBSD_5_3_BASE:1.2
	OPENBSD_5_2:1.2.0.8
	OPENBSD_5_2_BASE:1.2
	OPENBSD_5_1_BASE:1.2
	OPENBSD_5_1:1.2.0.6
	OPENBSD_5_0:1.2.0.4
	OPENBSD_5_0_BASE:1.2
	OPENBSD_4_9:1.2.0.2
	OPENBSD_4_9_BASE:1.2
	PERL_5_12_2:1.1.1.1
	CPAN:1.1.1;
locks; strict;
comment	@# @;
expand	@o@;


1.10
date	2017.02.05.00.33.39;	author afresh1;	state Exp;
branches;
next	1.9;
commitid	7JLVNm1wwPgqSqTa;

1.9
date	2017.02.05.00.31.57;	author afresh1;	state Exp;
branches;
next	1.8;
commitid	cxJ08BvJA9Pt2PTM;

1.8
date	2015.04.25.19.26.21;	author afresh1;	state Exp;
branches;
next	1.7;
commitid	3qGYFVvfrExB70FB;

1.7
date	2015.04.25.19.14.43;	author afresh1;	state Exp;
branches;
next	1.6;
commitid	XRK22kO4se3v2i2I;

1.6
date	2014.11.17.21.00.58;	author afresh1;	state Exp;
branches;
next	1.5;
commitid	LnErp1MFKSuew5Fr;

1.5
date	2014.11.17.20.56.59;	author afresh1;	state Exp;
branches;
next	1.4;
commitid	QP75iYx42Uo7mMxO;

1.4
date	2014.03.24.15.05.24;	author afresh1;	state Exp;
branches;
next	1.3;

1.3
date	2013.03.25.20.40.49;	author sthen;	state Exp;
branches;
next	1.2;

1.2
date	2010.09.24.15.06.46;	author millert;	state Exp;
branches;
next	1.1;

1.1
date	2010.09.24.14.49.04;	author millert;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	2010.09.24.14.49.04;	author millert;	state Exp;
branches;
next	1.1.1.2;

1.1.1.2
date	2013.03.25.20.07.02;	author sthen;	state Exp;
branches;
next	1.1.1.3;

1.1.1.3
date	2014.03.24.14.58.51;	author afresh1;	state Exp;
branches;
next	1.1.1.4;

1.1.1.4
date	2014.11.17.20.52.44;	author afresh1;	state Exp;
branches;
next	;
commitid	B31cAbBIXiCqnL97;


desc
@@


1.10
log
@Apply local patches - perl-5.24.1
@
text
@
print "1..3\n";

use strict;
use Digest::MD5 qw(md5 md5_hex md5_base64);

# To update the EBCDIC section even on a Latin 1 platform,
# run this script with $ENV{EBCDIC_MD5SUM} set to a true value.
# (You'll need to have Perl 5.7.3 or later, to have the Encode installed.)
# (And remember that under the Perl core distribution you should
#  also have the $ENV{PERL_CORE} set to a true value.)

my $EXPECT;
if (ord "A" == 193) { # EBCDIC
    $EXPECT = <<EOT;
0956ffb4f6416082b27d6680b4cf73fc  README
2a61dd5022b11faa35eed27d1c6c98c2  MD5.xs
276da0aa4e9a08b7fe09430c9c5690aa  rfc1321.txt
EOT
} else {
    # This is the output of: 'md5sum README MD5.xs rfc1321.txt'
    $EXPECT = <<EOT;
2f93400875dbb56f36691d5f69f3eba5  README
5457ac1c3f0f33df96437555dc7eb172  MD5.xs
754b9db19f79dbc4992f7166eb0f37ce  rfc1321.txt
EOT
}

if (!(-f "README") && -f "../README") {
   chdir("..") or die "Can't chdir: $!";
}

my $testno = 0;

my $B64 = 1;
eval { require MIME::Base64; };
if ($@@) {
    print "# $@@: Will not test base64 methods\n";
    $B64 = 0;
}

for (split /^/, $EXPECT) {
     my($md5hex, $file) = split ' ';
     my $base = $file;
#     print "# $base\n";
     if ($ENV{PERL_CORE}) {
         # Don't have these in core.
         if ($file eq 'rfc1321.txt' or $file eq 'README') {
	     print "ok ", ++$testno, " # Skip: PERL_CORE\n";
	     next;
	 }
     }
#     print "# file = $file\n";
     unless (-f $file) {
	warn "No such file: $file\n";
	next;
     }
     if ($ENV{EBCDIC_MD5SUM}) {
         require Encode;
	 my $data = cat_file($file);	
	 Encode::from_to($data, 'latin1', 'cp1047');
	 print md5_hex($data), "  $base\n";
	 next;
     }
     my $md5bin = pack("H*", $md5hex);
     my $md5b64;
     if ($B64) {
	 $md5b64 = MIME::Base64::encode($md5bin, "");
	 chop($md5b64); chop($md5b64);   # remove padding
     }
     my $failed;
     my $got;

     if (digest_file($file, 'digest') ne $md5bin) {
	 print "$file: Bad digest\n";
	 $failed++;
     }

     if (($got = digest_file($file, 'hexdigest')) ne $md5hex) {
	 print "$file: Bad hexdigest: got $got expected $md5hex\n";
	 $failed++;
     }

     if ($B64 && digest_file($file, 'b64digest') ne $md5b64) {
	 print "$file: Bad b64digest\n";
	 $failed++;
     }

     my $data = cat_file($file);
     if (md5($data) ne $md5bin) {
	 print "$file: md5() failed\n";
	 $failed++;
     }
     if (md5_hex($data) ne $md5hex) {
	 print "$file: md5_hex() failed\n";
	 $failed++;
     }
     if ($B64 && md5_base64($data) ne $md5b64) {
	 print "$file: md5_base64() failed\n";
	 $failed++;
     }

     if (Digest::MD5->new->add($data)->digest ne $md5bin) {
	 print "$file: MD5->new->add(...)->digest failed\n";
	 $failed++;
     }
     if (Digest::MD5->new->add($data)->hexdigest ne $md5hex) {
	 print "$file: MD5->new->add(...)->hexdigest failed\n";
	 $failed++;
     }
     if ($B64 && Digest::MD5->new->add($data)->b64digest ne $md5b64) {
	 print "$file: MD5->new->add(...)->b64digest failed\n";
	 $failed++;
     }

     my @@data = split //, $data;
     if (md5(@@data) ne $md5bin) {
	 print "$file: md5(\@@data) failed\n";
	 $failed++;
     }
     if (Digest::MD5->new->add(@@data)->digest ne $md5bin) {
	 print "$file: MD5->new->add(\@@data)->digest failed\n";
	 $failed++;
     }
     my $md5 = Digest::MD5->new;
     for (@@data) {
	 $md5->add($_);
     }
     if ($md5->digest ne $md5bin) {
	 print "$file: $md5->add()-loop failed\n";
	 $failed++;
     }

     print "not " if $failed;
     print "ok ", ++$testno, "\n";
}


sub digest_file
{
    my($file, $method) = @@_;
    $method ||= "digest";
    #print "$file $method\n";

    open(FILE, $file) or die "Can't open $file: $!";
    my $digest = Digest::MD5->new->addfile(*FILE)->$method();
    close(FILE);

    $digest;
}

sub cat_file
{
    my($file) = @@_;
    local $/;  # slurp
    open(FILE, $file) or die "Can't open $file: $!";

    # For PerlIO in case of UTF-8 locales.
    eval 'binmode(FILE, ":bytes")' if $] >= 5.008;

    my $tmp = <FILE>;
    close(FILE);
    $tmp;
}

@


1.9
log
@Fix merge issues, remove excess files - match perl-5.24.1 dist
@
text
@d24 1
a24 1
0a0cf2512d18d24c6881d7d755e2b609  MD5.xs
@


1.8
log
@Apply local patches, remove excess files - perl-5.20.2
@
text
@d17 1
a17 1
b349234bb1005785bb6e377990209dc7  MD5.xs
d24 1
a24 1
1d2a7c4f7a6180a7f3369d703ffe7cd0  MD5.xs
@


1.7
log
@Fix merge issues, remove excess files - match perl-5.20.2 dist
@
text
@d24 1
a24 1
f908acbcf6bd32042f282b0deed61264  MD5.xs
@


1.6
log
@Apply local patches to perl-5.20.1

ok deraadt@@ sthen@@ espie@@ miod@@
@
text
@d24 1
a24 1
1d2a7c4f7a6180a7f3369d703ffe7cd0  MD5.xs
@


1.5
log
@Fix merge conflicts, remove extra files, match upstream perl-5.20.1

ok deraadt@@ sthen@@ espie@@ miod@@
@
text
@d24 1
a24 1
f908acbcf6bd32042f282b0deed61264  MD5.xs
@


1.4
log
@Merge perl-5.18.2 plus local patches, remove old files

OK espie@@ sthen@@ deraadt@@
@
text
@d24 1
a24 1
1d2a7c4f7a6180a7f3369d703ffe7cd0  MD5.xs
d47 2
a48 1
         if ($file eq 'rfc1321.txt') { # Don't have it in core.
@


1.3
log
@merge/resolve conflicts
(some more to do after this one)
@
text
@d16 2
a17 2
4f932585bed0cc942186fb51daff4839  README
b0f7cb93ec1b43f9417f089bb7b87bb0  MD5.xs
d23 2
a24 2
c8d3f8457a2d6983253d771ffddb9f4c  README
572735e45b7299f68b2e3615be97b267  MD5.xs
@


1.2
log
@merge in perl 5.12.2 plus local changes
@
text
@d1 1
a11 1
# Similarly, to update MacOS section, run with $ENV{MAC_MD5SUM} set.
d16 2
a17 2
11e8028ee426273db6b6db270a8bb38c  README
6e556382813f67120863f4f91b7fcdc2  MD5.xs
a19 6
} elsif ("\n" eq "\015") { # MacOS
    $EXPECT = <<EOT;
c95549c6c5e1e1c078b27042f1dc850f  README
7aa380c810bc7c1a0bec22cf32bc50d4  MD5.xs
754b9db19f79dbc4992f7166eb0f37ce  rfc1321.txt
EOT
d23 2
a24 2
c95549c6c5e1e1c078b27042f1dc850f  README
27e1b94aa63b8636cb95660ec3f78112  MD5.xs
a60 7
	 print md5_hex($data), "  $base\n";
	 next;
     }
     if ($ENV{MAC_MD5SUM}) {
         require Encode;
	 my $data = cat_file($file);	
	 Encode::from_to($data, 'latin1', 'MacRoman');
@


1.1
log
@Initial revision
@
text
@d30 1
a30 1
7aa380c810bc7c1a0bec22cf32bc50d4  MD5.xs
@


1.1.1.1
log
@Perl 5.12.2 from CPAN
@
text
@@


1.1.1.2
log
@import perl 5.16.3 from CPAN - worked on by Andrew Fresh and myself
@
text
@a0 1

d11 1
d16 2
a17 2
4f932585bed0cc942186fb51daff4839  README
b0f7cb93ec1b43f9417f089bb7b87bb0  MD5.xs
d20 6
d29 2
a30 2
c8d3f8457a2d6983253d771ffddb9f4c  README
14b929c388c5a9bd8eca3d37160e1b8a  MD5.xs
d67 7
@


1.1.1.3
log
@Import perl-5.18.2

OK espie@@ sthen@@ deraadt@@
@
text
@d16 2
a17 2
0956ffb4f6416082b27d6680b4cf73fc  README
b349234bb1005785bb6e377990209dc7  MD5.xs
d23 2
a24 2
2f93400875dbb56f36691d5f69f3eba5  README
f908acbcf6bd32042f282b0deed61264  MD5.xs
@


1.1.1.4
log
@Import perl-5.20.1
@
text
@d47 1
a47 2
         # Don't have these in core.
         if ($file eq 'rfc1321.txt' or $file eq 'README') {
@


