head	1.1;
access;
symbols
	OPENBSD_6_1:1.1.0.4
	OPENBSD_6_1_BASE:1.1;
locks; strict;
comment	@# @;
expand	@o@;


1.1
date	2017.02.05.00.32.03;	author afresh1;	state Exp;
branches;
next	;
commitid	cxJ08BvJA9Pt2PTM;


desc
@@


1.1
log
@Fix merge issues, remove excess files - match perl-5.24.1 dist
@
text
@#!./perl

use strict;
use warnings;

use Sub::Util qw( prototype set_prototype );
use Test::More tests => 13;

sub f { }
is( prototype('f'), undef, 'no prototype');
is( CORE::prototype('f'), undef, 'no prototype from CORE');

my $r = set_prototype('$', \&f);
is( prototype('f'), '$', 'prototype');
is( CORE::prototype('f'), '$', 'prototype from CORE');
is( $r,   \&f, 'return value');

set_prototype(undef, \&f);
is( prototype('f'), undef, 'remove prototype');

set_prototype('', \&f);
is( prototype('f'), '', 'empty prototype');

sub g (@@) { }
is( prototype('g'), '@@', '@@ prototype');

set_prototype(undef, \&g);
is( prototype('g'), undef, 'remove prototype');

sub stub;
is( prototype('stub'), undef, 'non existing sub');

set_prototype('$$$', \&stub);
is( prototype('stub'), '$$$', 'change non existing sub');

sub f_decl ($$$$);
is( prototype('f_decl'), '$$$$', 'forward declaration');

set_prototype('\%', \&f_decl);
is( prototype('f_decl'), '\%', 'change forward declaration');
@
