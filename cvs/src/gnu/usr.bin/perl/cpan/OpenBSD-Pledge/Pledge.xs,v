head	1.2;
access;
symbols
	OPENBSD_6_2_BASE:1.2
	OPENBSD_6_1:1.1.0.8
	OPENBSD_6_1_BASE:1.1
	OPENBSD_6_0:1.1.0.6
	OPENBSD_6_0_BASE:1.1
	OPENBSD_5_9:1.1.0.2
	OPENBSD_5_9_BASE:1.1;
locks; strict;
comment	@# @;


1.2
date	2017.09.09.14.53.57;	author afresh1;	state Exp;
branches;
next	1.1;
commitid	BaQO8MJqCjT0s5aE;

1.1
date	2015.11.29.19.01.27;	author afresh1;	state Exp;
branches;
next	;
commitid	VQ3XZZq8nmfg7IV5;


desc
@@


1.2
log
@Remove path support from perl OpenBSD::Pledge

ok guenther@@ deraadt@@ giovanni@@
@
text
@/*	$OpenBSD: Pledge.xs,v 1.1 2015/11/29 19:01:27 afresh1 Exp $	*/

/*
 * Copyright (c) 2015 Andrew Fresh <afresh1@@openbsd.org>
 *
 * Permission to use, copy, modify, and distribute this software for any
 * purpose with or without fee is hereby granted, provided that the above
 * copyright notice and this permission notice appear in all copies.
 *
 * THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES
 * WITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF
 * MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR
 * ANY SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES
 * WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN
 * ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF
 * OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.
 */

#define PERL_NO_GET_CONTEXT
#include "EXTERN.h"
#include "perl.h"
#include "XSUB.h"

#define PLEDGENAMES
#include <sys/pledge.h>

MODULE = OpenBSD::Pledge		PACKAGE = OpenBSD::Pledge

AV *
pledgenames()
    INIT:
	int i;
    CODE:
	for (i = 0; pledgenames[i].bits != 0; i++)
		XPUSHs( sv_2mortal(
		     newSVpv(pledgenames[i].name, strlen(pledgenames[i].name))
		) );
	XSRETURN(i);

int
_pledge(const char * promises)
    CODE:
	RETVAL = pledge(promises, NULL) != -1;
    OUTPUT:
	RETVAL
@


1.1
log
@OpenBSD::Pledge - perl interface to pledge(2)

okay espie@@ "we should be wary" deraadt@@
@
text
@d1 1
a1 1
/*	$OpenBSD$	*/
d41 1
a41 4
_pledge(const char * promises, SV * paths)
    INIT:
	SSize_t numpaths = 0, n;

d43 1
a43 17
	if (SvOK(paths)) {
		if (SvTYPE(SvRV(paths)) != SVt_PVAV)
			croak("not an ARRAY reference");

		numpaths = av_top_index((AV *)SvRV(paths));

		const char *pledge_paths[ numpaths + 1 ];
		pledge_paths[ numpaths + 1 ] = NULL;

		for (n = 0; n <= numpaths; n++)
			pledge_paths[n]
			    = SvPV_nolen(*av_fetch((AV *)SvRV(paths), n, 0));

		RETVAL = pledge(promises, pledge_paths) != -1;
	}
	else
		RETVAL = pledge(promises, NULL) != -1;
@

