head	1.3;
access;
symbols
	PERL_5_24_2:1.1.1.2
	PERL:1.1.1
	OPENBSD_6_1:1.3.0.4
	OPENBSD_6_1_BASE:1.3
	OPENBSD_5_3:1.1.1.1.0.10
	OPENBSD_5_3_BASE:1.1.1.1
	OPENBSD_5_2:1.1.1.1.0.8
	OPENBSD_5_2_BASE:1.1.1.1
	OPENBSD_5_1_BASE:1.1.1.1
	OPENBSD_5_1:1.1.1.1.0.6
	OPENBSD_5_0:1.1.1.1.0.4
	OPENBSD_5_0_BASE:1.1.1.1
	OPENBSD_4_9:1.1.1.1.0.2
	OPENBSD_4_9_BASE:1.1.1.1
	PERL_5_12_2:1.1.1.1
	CPAN:1.1.1;
locks; strict;
comment	@# @;
expand	@o@;


1.3
date	2017.02.05.00.32.01;	author afresh1;	state Exp;
branches;
next	1.2;
commitid	cxJ08BvJA9Pt2PTM;

1.2
date	2013.03.25.20.40.51;	author sthen;	state dead;
branches;
next	1.1;

1.1
date	2010.09.24.14.49.04;	author millert;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	2010.09.24.14.49.04;	author millert;	state Exp;
branches;
next	1.1.1.2;

1.1.1.2
date	2017.08.14.13.46.00;	author afresh1;	state Exp;
branches;
next	;
commitid	fAzrs78vdW2Yfc6A;


desc
@@


1.3
log
@Fix merge issues, remove excess files - match perl-5.24.1 dist
@
text
@#!/usr/bin/perl -w

# Test for memory leaks.

# XXX TODO: This test file doesn't actually seem to work! If you remove
# the sv_2mortal() in the XS file, it still happily passes all tests...

use strict;
use Test::More tests => 22;

use Math::BigInt::FastCalc;

#############################################################################
package Math::BigInt::FastCalc::LeakCheck;
use parent qw(Math::BigInt::FastCalc);

my $destroyed = 0;
sub DESTROY { $destroyed++; }

#############################################################################
package main;

for my $method (qw(_zero _one _two _ten))
  {
  $destroyed = 0;
    {
    my $num = Math::BigInt::FastCalc::LeakCheck->$method();
    bless $num, "Math::BigInt::FastCalc::LeakCheck";
    }
  is ($destroyed, 1, "$method does not leak memory");
  }

my $num = Math::BigInt::FastCalc->_zero();
for my $method (qw(_is_zero _is_one _is_two _is_ten _num))
  {
  $destroyed = 0;
    {
    my $rc = Math::BigInt::FastCalc->$method($num);
    bless \$rc, "Math::BigInt::FastCalc::LeakCheck";
    }
  is ($destroyed, 1, "$method does not leak memory");
  }

my $num_10 = Math::BigInt::FastCalc->_ten();
my $num_2 = Math::BigInt::FastCalc->_two();

my $num_long   = Math::BigInt::FastCalc->_new("1234567890");
my $num_long_2 = Math::BigInt::FastCalc->_new("12345678900987654321");

is (Math::BigInt::FastCalc->_str($num_long), "1234567890");
is (Math::BigInt::FastCalc->_str($num_long_2), "12345678900987654321");

# to hit all possible code branches
_test_acmp($num, $num);
_test_acmp($num_10, $num_10);
_test_acmp($num, $num_10);
_test_acmp($num_10, $num);
_test_acmp($num, $num_2);
_test_acmp($num_2, $num);
_test_acmp($num_long, $num);
_test_acmp($num, $num_long);
_test_acmp($num_long, $num_long);
_test_acmp($num_long, $num_long_2);
_test_acmp($num_long_2, $num_long);

sub _test_acmp
  {
  my ($n1,$n2) = @@_;

  $destroyed = 0;
    {
    my $rc = Math::BigInt::FastCalc->_acmp($n1,$n2);
    bless \$rc, "Math::BigInt::FastCalc::LeakCheck";
    }
  my $n_1 = Math::BigInt::FastCalc->_str($n1);
  my $n_2 = Math::BigInt::FastCalc->_str($n2);
  is ($destroyed, 1, "_acmp($n_1,$n_2) does not leak memory");
  }

@


1.2
log
@merge/resolve conflicts
(some more to do after this one)
@
text
@a7 1
use Test::More;
d9 1
a9 8

BEGIN
  {
  $| = 1;
  chdir 't' if -d 't' && !$ENV{PERL_CORE};
  unshift @@INC, ('../lib', '../blib/arch');	# for running manually
  plan tests => 22;
  }
d15 1
a15 1
use base qw(Math::BigInt::FastCalc);
@


1.1
log
@Initial revision
@
text
@@


1.1.1.1
log
@Perl 5.12.2 from CPAN
@
text
@@


1.1.1.2
log
@Import perl-5.24.2
@
text
@d8 1
d10 8
a17 1
use Test::More tests => 22;
d23 1
a23 1
use parent qw(Math::BigInt::FastCalc);
@

