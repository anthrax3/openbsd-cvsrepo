head	1.3;
access;
symbols
	OPENBSD_6_2_BASE:1.3
	PERL_5_24_2:1.1.1.2
	PERL:1.1.1
	OPENBSD_6_1:1.3.0.4
	OPENBSD_6_1_BASE:1.3
	OPENBSD_5_3:1.1.1.1.0.10
	OPENBSD_5_3_BASE:1.1.1.1
	OPENBSD_5_2:1.1.1.1.0.8
	OPENBSD_5_2_BASE:1.1.1.1
	OPENBSD_5_1_BASE:1.1.1.1
	OPENBSD_5_1:1.1.1.1.0.6
	OPENBSD_5_0:1.1.1.1.0.4
	OPENBSD_5_0_BASE:1.1.1.1
	OPENBSD_4_9:1.1.1.1.0.2
	OPENBSD_4_9_BASE:1.1.1.1
	PERL_5_12_2:1.1.1.1
	CPAN:1.1.1;
locks; strict;
comment	@# @;
expand	@o@;


1.3
date	2017.02.05.00.32.01;	author afresh1;	state Exp;
branches;
next	1.2;
commitid	cxJ08BvJA9Pt2PTM;

1.2
date	2013.03.25.20.40.51;	author sthen;	state dead;
branches;
next	1.1;

1.1
date	2010.09.24.14.49.04;	author millert;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	2010.09.24.14.49.04;	author millert;	state Exp;
branches;
next	1.1.1.2;

1.1.1.2
date	2017.08.14.13.46.00;	author afresh1;	state Exp;
branches;
next	;
commitid	fAzrs78vdW2Yfc6A;


desc
@@


1.3
log
@Fix merge issues, remove excess files - match perl-5.24.1 dist
@
text
@#!/usr/bin/perl -w

use strict;
use Test::More tests => 359;

use Math::BigInt::FastCalc;

my ($BASE_LEN, undef, $AND_BITS, $XOR_BITS, $OR_BITS, $BASE_LEN_SMALL, $MAX_VAL) =
  Math::BigInt::FastCalc->_base_len();

print "# BASE_LEN = $BASE_LEN\n";
print "# MAX_VAL = $MAX_VAL\n";
print "# AND_BITS = $AND_BITS\n";
print "# XOR_BITS = $XOR_BITS\n";
print "# IOR_BITS = $OR_BITS\n";

# testing of Math::BigInt::FastCalc

my $C = 'Math::BigInt::FastCalc';		# pass classname to sub's

# _new and _str
my $x = $C->_new("123"); my $y = $C->_new("321");
is (ref($x),'ARRAY'); is ($C->_str($x),123); is ($C->_str($y),321);

###############################################################################
# _add, _sub, _mul, _div
is ($C->_str($C->_add($x,$y)),444);
is ($C->_str($C->_sub($x,$y)),123);
is ($C->_str($C->_mul($x,$y)),39483);
is ($C->_str($C->_div($x,$y)),123);

###############################################################################
# check that mul/div doesn't change $y
# and returns the same reference, not something new
is ($C->_str($C->_mul($x,$y)),39483);
is ($C->_str($x),39483); is ($C->_str($y),321);

is ($C->_str($C->_div($x,$y)),123);
is ($C->_str($x),123); is ($C->_str($y),321);

$x = $C->_new("39483");
my ($x1,$r1) = $C->_div($x,$y);
is ("$x1","$x");
$C->_inc($x1);
is ("$x1","$x");
is ($C->_str($r1),'0');

$x = $C->_new("39483");	# reset

###############################################################################
my $z = $C->_new("2");
is ($C->_str($C->_add($x,$z)),39485);
my ($re,$rr) = $C->_div($x,$y);

is ($C->_str($re),123); is ($C->_str($rr),2);

# is_zero, _is_one, _one, _zero
is ($C->_is_zero($x),'');
is ($C->_is_one($x),'');

is ($C->_str($C->_zero()),"0");
is ($C->_str($C->_one()),"1");

# _two() and _ten()
is ($C->_str($C->_two()),"2");
is ($C->_str($C->_ten()),"10");
is ($C->_is_ten($C->_two()),'');
is ($C->_is_two($C->_two()),1);
is ($C->_is_ten($C->_ten()),1);
is ($C->_is_two($C->_ten()),'');

is ($C->_is_one($C->_one()),1);
is ($C->_is_one($C->_two()), '');
is ($C->_is_one($C->_ten()), '');

is ($C->_is_one($C->_zero()), '');

is ($C->_is_zero($C->_zero()),1);

is ($C->_is_zero($C->_one()), '');

# is_odd, is_even
is ($C->_is_odd($C->_one()),1); is ($C->_is_odd($C->_zero()),'');
is ($C->_is_even($C->_one()), ''); is ($C->_is_even($C->_zero()),1);

# _len
for my $method (qw/_alen _len/)
  {
  $x = $C->_new("1"); is ($C->$method($x),1);
  $x = $C->_new("12"); is ($C->$method($x),2);
  $x = $C->_new("123"); is ($C->$method($x),3);
  $x = $C->_new("1234"); is ($C->$method($x),4);
  $x = $C->_new("12345"); is ($C->$method($x),5);
  $x = $C->_new("123456"); is ($C->$method($x),6);
  $x = $C->_new("1234567"); is ($C->$method($x),7);
  $x = $C->_new("12345678"); is ($C->$method($x),8);
  $x = $C->_new("123456789"); is ($C->$method($x),9);

  $x = $C->_new("8"); is ($C->$method($x),1);
  $x = $C->_new("21"); is ($C->$method($x),2);
  $x = $C->_new("321"); is ($C->$method($x),3);
  $x = $C->_new("4321"); is ($C->$method($x),4);
  $x = $C->_new("54321"); is ($C->$method($x),5);
  $x = $C->_new("654321"); is ($C->$method($x),6);
  $x = $C->_new("7654321"); is ($C->$method($x),7);
  $x = $C->_new("87654321"); is ($C->$method($x),8);
  $x = $C->_new("987654321"); is ($C->$method($x),9);

  $x = $C->_new("0"); is ($C->$method($x),1);
  $x = $C->_new("20"); is ($C->$method($x),2);
  $x = $C->_new("320"); is ($C->$method($x),3);
  $x = $C->_new("4320"); is ($C->$method($x),4);
  $x = $C->_new("54320"); is ($C->$method($x),5);
  $x = $C->_new("654320"); is ($C->$method($x),6);
  $x = $C->_new("7654320"); is ($C->$method($x),7);
  $x = $C->_new("87654320"); is ($C->$method($x),8);
  $x = $C->_new("987654320"); is ($C->$method($x),9);

  for (my $i = 1; $i < 9; $i++)
    {
    my $a = "$i" . '0' x ($i-1);
    $x = $C->_new($a);
    print "# Tried len '$a'\n" unless is ($C->_len($x),$i);
    }
  }

# _digit
$x = $C->_new("123456789");
is ($C->_digit($x,0),9);
is ($C->_digit($x,1),8);
is ($C->_digit($x,2),7);
is ($C->_digit($x,-1),1);
is ($C->_digit($x,-2),2);
is ($C->_digit($x,-3),3);

# _copy
foreach (qw/ 1 12 123 1234 12345 123456 1234567 12345678 123456789/)
  {
  $x = $C->_new("$_");
  is ($C->_str($C->_copy($x)),"$_");
  is ($C->_str($x),"$_");		# did _copy destroy original x?
  }

# _zeros
$x = $C->_new("1256000000"); is ($C->_zeros($x),6);
$x = $C->_new("152"); is ($C->_zeros($x),0);
$x = $C->_new("123000"); is ($C->_zeros($x),3);
$x = $C->_new("0"); is ($C->_zeros($x),0);

# _lsft, _rsft
$x = $C->_new("10"); $y = $C->_new("3"); 
is ($C->_str($C->_lsft($x,$y,10)),10000);
$x = $C->_new("20"); $y = $C->_new("3"); 
is ($C->_str($C->_lsft($x,$y,10)),20000);

$x = $C->_new("128"); $y = $C->_new("4");
is ($C->_str($C->_lsft($x,$y,2)), 128 << 4);

$x = $C->_new("1000"); $y = $C->_new("3"); 
is ($C->_str($C->_rsft($x,$y,10)),1);
$x = $C->_new("20000"); $y = $C->_new("3"); 
is ($C->_str($C->_rsft($x,$y,10)),20);
$x = $C->_new("256"); $y = $C->_new("4");
is ($C->_str($C->_rsft($x,$y,2)),256 >> 4);

$x = $C->_new("6411906467305339182857313397200584952398");
$y = $C->_new("45");
is ($C->_str($C->_rsft($x,$y,10)),0);

# _acmp
$x = $C->_new("123456789");
$y = $C->_new("987654321");
is ($C->_acmp($x,$y),-1);
is ($C->_acmp($y,$x),1);
is ($C->_acmp($x,$x),0);
is ($C->_acmp($y,$y),0);
$x = $C->_new("12");
$y = $C->_new("12");
is ($C->_acmp($x,$y),0);
$x = $C->_new("21");
is ($C->_acmp($x,$y),1);
is ($C->_acmp($y,$x),-1);
$x = $C->_new("123456789");
$y = $C->_new("1987654321");
is ($C->_acmp($x,$y),-1);
is ($C->_acmp($y,$x),+1);

$x = $C->_new("1234567890123456789");
$y = $C->_new("987654321012345678");
is ($C->_acmp($x,$y),1);
is ($C->_acmp($y,$x),-1);
is ($C->_acmp($x,$x),0);
is ($C->_acmp($y,$y),0);

$x = $C->_new("1234");
$y = $C->_new("987654321012345678");
is ($C->_acmp($x,$y),-1);
is ($C->_acmp($y,$x),1);
is ($C->_acmp($x,$x),0);
is ($C->_acmp($y,$y),0);

# _modinv
$x = $C->_new("8");
$y = $C->_new("5033");
my ($xmod,$sign) = $C->_modinv($x,$y);
is ($C->_str($xmod),'629');		# -629 % 5033 == 4404
is ($sign, '-');

# _div
$x = $C->_new("3333"); $y = $C->_new("1111");
is ($C->_str(scalar $C->_div($x,$y)),3);
$x = $C->_new("33333"); $y = $C->_new("1111"); ($x,$y) = $C->_div($x,$y);
is ($C->_str($x),30); is ($C->_str($y),3);
$x = $C->_new("123"); $y = $C->_new("1111"); 
($x,$y) = $C->_div($x,$y); is ($C->_str($x),0); is ($C->_str($y),123);

# _num
foreach (qw/1 12 123 1234 12345 1234567 12345678 123456789 1234567890/)
  {
  $x = $C->_new("$_"); 
  is (ref($x),'ARRAY'); is ($C->_str($x),"$_");
  $x = $C->_num($x); is (ref($x),''); is ($x,$_);
  }

# _sqrt
$x = $C->_new("144"); is ($C->_str($C->_sqrt($x)),'12');
$x = $C->_new("144000000000000"); is ($C->_str($C->_sqrt($x)),'12000000');

# _root
$x = $C->_new("81"); my $n = $C->_new("3"); 	# 4*4*4 = 64, 5*5*5 = 125
is ($C->_str($C->_root($x,$n)),'4');	# 4.xx => 4.0
$x = $C->_new("81"); $n = $C->_new("4"); 	# 3*3*3*3 == 81
is ($C->_str($C->_root($x,$n)),'3');

# _pow (and _root)
$x = $C->_new("0"); $n = $C->_new("3"); 	# 0 ** y => 0
is ($C->_str($C->_pow($x,$n)), 0);
$x = $C->_new("3"); $n = $C->_new("0"); 	# x ** 0 => 1
is ($C->_str($C->_pow($x,$n)), 1);
$x = $C->_new("1"); $n = $C->_new("3"); 	# 1 ** y => 1
is ($C->_str($C->_pow($x,$n)), 1);
$x = $C->_new("5"); $n = $C->_new("1"); 	# x ** 1 => x
is ($C->_str($C->_pow($x,$n)), 5);

$x = $C->_new("81"); $n = $C->_new("3"); 	# 81 ** 3 == 531441 
is ($C->_str($C->_pow($x,$n)),81 ** 3);

is ($C->_str($C->_root($x,$n)),81);

$x = $C->_new("81");
is ($C->_str($C->_pow($x,$n)),81 ** 3);
is ($C->_str($C->_pow($x,$n)),'150094635296999121'); # 531441 ** 3 ==

is ($C->_str($C->_root($x,$n)),'531441');
is ($C->_str($C->_root($x,$n)),'81');

$x = $C->_new("81"); $n = $C->_new("14"); 	
is ($C->_str($C->_pow($x,$n)),'523347633027360537213511521');
is ($C->_str($C->_root($x,$n)),'81');

$x = $C->_new("523347633027360537213511520");
is ($C->_str($C->_root($x,$n)),'80');

$x = $C->_new("523347633027360537213511522");
is ($C->_str($C->_root($x,$n)),'81');

my $res = [ qw/ 9 31 99 316 999 3162 9999/ ];

# 99 ** 2 = 9801, 999 ** 2 = 998001 etc
for my $i (2 .. 9)
  {
  $x = '9' x $i; $x = $C->_new($x);
  $n = $C->_new("2");
  my $rc = '9' x ($i-1). '8' . '0' x ($i-1) . '1';
  print "# _pow( ", '9' x $i, ", 2) \n" unless
   is ($C->_str($C->_pow($x,$n)),$rc);
 
  if ($i <= 7)
    {
    $x = '9' x $i; $x = $C->_new($x);
    $n = '9' x $i; $n = $C->_new($n);
    print "# _root( ", '9' x $i, ", ", 9 x $i, ") \n" unless
     is ($C->_str($C->_root($x,$n)),'1');

    $x = '9' x $i; $x = $C->_new($x);
    $n = $C->_new("2");
    print "# _root( ", '9' x $i, ", ", 9 x $i, ") \n" unless
     is ($C->_str($C->_root($x,$n)), $res->[$i-2]);
    }
  }

##############################################################################
# _fac
$x = $C->_new("0"); is ($C->_str($C->_fac($x)),'1');
$x = $C->_new("1"); is ($C->_str($C->_fac($x)),'1');
$x = $C->_new("2"); is ($C->_str($C->_fac($x)),'2');
$x = $C->_new("3"); is ($C->_str($C->_fac($x)),'6');
$x = $C->_new("4"); is ($C->_str($C->_fac($x)),'24');
$x = $C->_new("5"); is ($C->_str($C->_fac($x)),'120');
$x = $C->_new("10"); is ($C->_str($C->_fac($x)),'3628800');
$x = $C->_new("11"); is ($C->_str($C->_fac($x)),'39916800');
$x = $C->_new("12"); is ($C->_str($C->_fac($x)),'479001600');
$x = $C->_new("13"); is ($C->_str($C->_fac($x)),'6227020800');

# test that _fac modifies $x in place for small arguments
$x = $C->_new("3"); $C->_fac($x); is ($C->_str($x),'6');
$x = $C->_new("13"); $C->_fac($x); is ($C->_str($x),'6227020800');

##############################################################################
# _inc and _dec
foreach (qw/1 11 121 1231 12341 1234561 12345671 123456781 1234567891/)
  {
  $x = $C->_new("$_"); $C->_inc($x);
  print "# \$x = ",$C->_str($x),"\n"
   unless is ($C->_str($x),substr($_,0,length($_)-1) . '2');
  $C->_dec($x); is ($C->_str($x),$_);
  }
foreach (qw/19 119 1219 12319 1234519 12345619 123456719 1234567819/)
  {
  $x = $C->_new("$_"); $C->_inc($x);
  print "# \$x = ",$C->_str($x),"\n"
   unless is ($C->_str($x),substr($_,0,length($_)-2) . '20');
  $C->_dec($x); is ($C->_str($x),$_);
  }
foreach (qw/999 9999 99999 9999999 99999999 999999999 9999999999 99999999999/)
  {
  $x = $C->_new("$_"); $C->_inc($x);
  print "# \$x = ",$C->_str($x),"\n"
   unless is ($C->_str($x), '1' . '0' x (length($_)));
  $C->_dec($x); is ($C->_str($x),$_);
  }

$x = $C->_new("1000"); $C->_inc($x); is ($C->_str($x),'1001');
$C->_dec($x); is ($C->_str($x),'1000');

my $BL;
{
  no strict 'refs';
  $BL = &{"$C"."::_base_len"}();
}

$x = '1' . '0' x $BL;
$z = '1' . '0' x ($BL-1); $z .= '1';
$x = $C->_new($x); $C->_inc($x); is ($C->_str($x),$z);

$x = '1' . '0' x $BL; $z = '9' x $BL;
$x = $C->_new($x); $C->_dec($x); is ($C->_str($x),$z);

# should not happen:
# $x = $C->_new("-2"); $y = $C->_new("4"); is ($C->_acmp($x,$y),-1);

###############################################################################
# _mod
$x = $C->_new("1000"); $y = $C->_new("3");
is ($C->_str(scalar $C->_mod($x,$y)),1);
$x = $C->_new("1000"); $y = $C->_new("2");
is ($C->_str(scalar $C->_mod($x,$y)),0);

# _and, _or, _xor
$x = $C->_new("5"); $y = $C->_new("2");
is ($C->_str(scalar $C->_xor($x,$y)),7);
$x = $C->_new("5"); $y = $C->_new("2");
is ($C->_str(scalar $C->_or($x,$y)),7);
$x = $C->_new("5"); $y = $C->_new("3");
is ($C->_str(scalar $C->_and($x,$y)),1);

# _from_hex, _from_bin, _from_oct
is ($C->_str( $C->_from_hex("0xFf")),255);
is ($C->_str( $C->_from_bin("0b10101011")),160+11);
is ($C->_str( $C->_from_oct("0100")), 8*8);
is ($C->_str( $C->_from_oct("01000")), 8*8*8);
is ($C->_str( $C->_from_oct("010001")), 8*8*8*8+1);
is ($C->_str( $C->_from_oct("010007")), 8*8*8*8+7);

# _as_hex, _as_bin, as_oct
is ($C->_str( $C->_from_hex( $C->_as_hex( $C->_new("128")))), 128);
is ($C->_str( $C->_from_bin( $C->_as_bin( $C->_new("128")))), 128);
is ($C->_str( $C->_from_oct( $C->_as_oct( $C->_new("128")))), 128);

is ($C->_str( $C->_from_oct( $C->_as_oct( $C->_new("123456")))), 123456);
is ($C->_str( $C->_from_oct( $C->_as_oct( $C->_new("123456789")))), "123456789");
is ($C->_str( $C->_from_oct( $C->_as_oct( $C->_new("1234567890123")))), "1234567890123");

# _1ex
is ($C->_str($C->_1ex(0)), "1");
is ($C->_str($C->_1ex(1)), "10");
is ($C->_str($C->_1ex(2)), "100");
is ($C->_str($C->_1ex(12)), "1000000000000");
is ($C->_str($C->_1ex(16)), "10000000000000000");

# _check
$x = $C->_new("123456789");
is ($C->_check($x),0);
is ($C->_check(123),'123 is not a reference');

###############################################################################
# __strip_zeros

{
  no strict 'refs';
  # correct empty arrays
  $x = &{$C."::__strip_zeros"}([]); is (@@$x,1); is ($x->[0],0);
  # don't strip single elements
  $x = &{$C."::__strip_zeros"}([0]); is (@@$x,1); is ($x->[0],0);
  $x = &{$C."::__strip_zeros"}([1]); is (@@$x,1); is ($x->[0],1);
  # don't strip non-zero elements
  $x = &{$C."::__strip_zeros"}([0,1]);
  is (@@$x,2); is ($x->[0],0); is ($x->[1],1);
  $x = &{$C."::__strip_zeros"}([0,1,2]);
  is (@@$x,3); is ($x->[0],0); is ($x->[1],1); is ($x->[2],2);

  # but strip leading zeros
  $x = &{$C."::__strip_zeros"}([0,1,2,0]);
  is (@@$x,3); is ($x->[0],0); is ($x->[1],1); is ($x->[2],2);

  $x = &{$C."::__strip_zeros"}([0,1,2,0,0]);
  is (@@$x,3); is ($x->[0],0); is ($x->[1],1); is ($x->[2],2);

  $x = &{$C."::__strip_zeros"}([0,1,2,0,0,0]);
  is (@@$x,3); is ($x->[0],0); is ($x->[1],1); is ($x->[2],2);

  # collapse multiple zeros
  $x = &{$C."::__strip_zeros"}([0,0,0,0]);
  is (@@$x,1); is ($x->[0],0);
}

# done

1;

@


1.2
log
@merge/resolve conflicts
(some more to do after this one)
@
text
@d4 1
a4 10
use Test;

BEGIN 
  {
  $| = 1;
  chdir 't' if -d 't' && !$ENV{PERL_CORE};
  unshift @@INC, '../lib';		# for running manually
  unshift @@INC, '../blib/arch';		# for running manually
  plan tests => 359;
  }
d8 1
a8 1
my ($BASE_LEN, $AND_BITS, $XOR_BITS, $OR_BITS, $BASE_LEN_SMALL, $MAX_VAL) =
d23 1
a23 1
ok (ref($x),'ARRAY'); ok ($C->_str($x),123); ok ($C->_str($y),321);
d27 4
a30 4
ok ($C->_str($C->_add($x,$y)),444);
ok ($C->_str($C->_sub($x,$y)),123);
ok ($C->_str($C->_mul($x,$y)),39483);
ok ($C->_str($C->_div($x,$y)),123);
d35 2
a36 2
ok ($C->_str($C->_mul($x,$y)),39483);
ok ($C->_str($x),39483); ok ($C->_str($y),321);
d38 2
a39 2
ok ($C->_str($C->_div($x,$y)),123);
ok ($C->_str($x),123); ok ($C->_str($y),321);
d43 1
a43 1
ok ("$x1","$x");
d45 2
a46 2
ok ("$x1","$x");
ok ($C->_str($r1),'0');
d52 1
a52 1
ok ($C->_str($C->_add($x,$z)),39485);
d55 1
a55 1
ok ($C->_str($re),123); ok ($C->_str($rr),2);
d58 2
a59 2
ok ($C->_is_zero($x)||0,0);
ok ($C->_is_one($x)||0,0);
d61 2
a62 2
ok ($C->_str($C->_zero()),"0");
ok ($C->_str($C->_one()),"1");
d65 10
a74 10
ok ($C->_str($C->_two()),"2");
ok ($C->_str($C->_ten()),"10");
ok ($C->_is_ten($C->_two())||0,0);
ok ($C->_is_two($C->_two()),1);
ok ($C->_is_ten($C->_ten()),1);
ok ($C->_is_two($C->_ten())||0,0);

ok ($C->_is_one($C->_one()),1);
ok ($C->_is_one($C->_two()) || 0,0);
ok ($C->_is_one($C->_ten()) || 0,0);
d76 1
a76 1
ok ($C->_is_one($C->_zero()) || 0,0);
d78 1
a78 1
ok ($C->_is_zero($C->_zero()),1);
d80 1
a80 1
ok ($C->_is_zero($C->_one()) || 0,0);
d83 2
a84 2
ok ($C->_is_odd($C->_one()),1); ok ($C->_is_odd($C->_zero())||0,0);
ok ($C->_is_even($C->_one()) || 0,0); ok ($C->_is_even($C->_zero()),1);
d89 29
a117 29
  $x = $C->_new("1"); ok ($C->$method($x),1);
  $x = $C->_new("12"); ok ($C->$method($x),2);
  $x = $C->_new("123"); ok ($C->$method($x),3);
  $x = $C->_new("1234"); ok ($C->$method($x),4);
  $x = $C->_new("12345"); ok ($C->$method($x),5);
  $x = $C->_new("123456"); ok ($C->$method($x),6);
  $x = $C->_new("1234567"); ok ($C->$method($x),7);
  $x = $C->_new("12345678"); ok ($C->$method($x),8);
  $x = $C->_new("123456789"); ok ($C->$method($x),9);

  $x = $C->_new("8"); ok ($C->$method($x),1);
  $x = $C->_new("21"); ok ($C->$method($x),2);
  $x = $C->_new("321"); ok ($C->$method($x),3);
  $x = $C->_new("4321"); ok ($C->$method($x),4);
  $x = $C->_new("54321"); ok ($C->$method($x),5);
  $x = $C->_new("654321"); ok ($C->$method($x),6);
  $x = $C->_new("7654321"); ok ($C->$method($x),7);
  $x = $C->_new("87654321"); ok ($C->$method($x),8);
  $x = $C->_new("987654321"); ok ($C->$method($x),9);

  $x = $C->_new("0"); ok ($C->$method($x),1);
  $x = $C->_new("20"); ok ($C->$method($x),2);
  $x = $C->_new("320"); ok ($C->$method($x),3);
  $x = $C->_new("4320"); ok ($C->$method($x),4);
  $x = $C->_new("54320"); ok ($C->$method($x),5);
  $x = $C->_new("654320"); ok ($C->$method($x),6);
  $x = $C->_new("7654320"); ok ($C->$method($x),7);
  $x = $C->_new("87654320"); ok ($C->$method($x),8);
  $x = $C->_new("987654320"); ok ($C->$method($x),9);
d123 1
a123 1
    print "# Tried len '$a'\n" unless ok ($C->_len($x),$i);
d129 6
a134 6
ok ($C->_digit($x,0),9);
ok ($C->_digit($x,1),8);
ok ($C->_digit($x,2),7);
ok ($C->_digit($x,-1),1);
ok ($C->_digit($x,-2),2);
ok ($C->_digit($x,-3),3);
d140 2
a141 2
  ok ($C->_str($C->_copy($x)),"$_");
  ok ($C->_str($x),"$_");		# did _copy destroy original x?
d145 4
a148 4
$x = $C->_new("1256000000"); ok ($C->_zeros($x),6);
$x = $C->_new("152"); ok ($C->_zeros($x),0);
$x = $C->_new("123000"); ok ($C->_zeros($x),3); 
$x = $C->_new("0"); ok ($C->_zeros($x),0); 
d152 1
a152 1
ok ($C->_str($C->_lsft($x,$y,10)),10000);
d154 1
a154 1
ok ($C->_str($C->_lsft($x,$y,10)),20000);
d157 1
a157 1
ok ($C->_str($C->_lsft($x,$y,2)), 128 << 4);
d160 1
a160 1
ok ($C->_str($C->_rsft($x,$y,10)),1);
d162 1
a162 1
ok ($C->_str($C->_rsft($x,$y,10)),20);
d164 1
a164 1
ok ($C->_str($C->_rsft($x,$y,2)),256 >> 4);
d168 1
a168 1
ok ($C->_str($C->_rsft($x,$y,10)),0);
d173 4
a176 4
ok ($C->_acmp($x,$y),-1);
ok ($C->_acmp($y,$x),1);
ok ($C->_acmp($x,$x),0);
ok ($C->_acmp($y,$y),0);
d179 1
a179 1
ok ($C->_acmp($x,$y),0);
d181 2
a182 2
ok ($C->_acmp($x,$y),1);
ok ($C->_acmp($y,$x),-1);
d185 2
a186 2
ok ($C->_acmp($x,$y),-1);
ok ($C->_acmp($y,$x),+1);
d190 4
a193 4
ok ($C->_acmp($x,$y),1);
ok ($C->_acmp($y,$x),-1);
ok ($C->_acmp($x,$x),0);
ok ($C->_acmp($y,$y),0);
d197 4
a200 4
ok ($C->_acmp($x,$y),-1);
ok ($C->_acmp($y,$x),1);
ok ($C->_acmp($x,$x),0);
ok ($C->_acmp($y,$y),0);
d206 2
a207 2
ok ($C->_str($xmod),'629');		# -629 % 5033 == 4404
ok ($sign, '-');
d211 1
a211 1
ok ($C->_str(scalar $C->_div($x,$y)),3);
d213 1
a213 1
ok ($C->_str($x),30); ok ($C->_str($y),3);
d215 1
a215 1
($x,$y) = $C->_div($x,$y); ok ($C->_str($x),0); ok ($C->_str($y),123);
d221 2
a222 2
  ok (ref($x)||'','ARRAY'); ok ($C->_str($x),"$_");
  $x = $C->_num($x); ok (ref($x)||'',''); ok ($x,$_);
d226 2
a227 2
$x = $C->_new("144"); ok ($C->_str($C->_sqrt($x)),'12');
$x = $C->_new("144000000000000"); ok ($C->_str($C->_sqrt($x)),'12000000');
d231 1
a231 1
ok ($C->_str($C->_root($x,$n)),'4');	# 4.xx => 4.0
d233 1
a233 1
ok ($C->_str($C->_root($x,$n)),'3');
d237 1
a237 1
ok ($C->_str($C->_pow($x,$n)), 0);
d239 1
a239 1
ok ($C->_str($C->_pow($x,$n)), 1);
d241 1
a241 1
ok ($C->_str($C->_pow($x,$n)), 1);
d243 1
a243 1
ok ($C->_str($C->_pow($x,$n)), 5);
d246 1
a246 1
ok ($C->_str($C->_pow($x,$n)),81 ** 3);
d248 1
a248 1
ok ($C->_str($C->_root($x,$n)),81);
d251 2
a252 2
ok ($C->_str($C->_pow($x,$n)),81 ** 3);
ok ($C->_str($C->_pow($x,$n)),'150094635296999121'); # 531441 ** 3 ==
d254 2
a255 2
ok ($C->_str($C->_root($x,$n)),'531441');
ok ($C->_str($C->_root($x,$n)),'81');
d258 2
a259 2
ok ($C->_str($C->_pow($x,$n)),'523347633027360537213511521');
ok ($C->_str($C->_root($x,$n)),'81');
d262 1
a262 1
ok ($C->_str($C->_root($x,$n)),'80');
d265 1
a265 1
ok ($C->_str($C->_root($x,$n)),'81');
d276 1
a276 1
   ok ($C->_str($C->_pow($x,$n)),$rc);
d283 1
a283 1
     ok ($C->_str($C->_root($x,$n)),'1');
d288 1
a288 1
     ok ($C->_str($C->_root($x,$n)), $res->[$i-2]);
d294 14
a307 14
$x = $C->_new("0"); ok ($C->_str($C->_fac($x)),'1');
$x = $C->_new("1"); ok ($C->_str($C->_fac($x)),'1');
$x = $C->_new("2"); ok ($C->_str($C->_fac($x)),'2');
$x = $C->_new("3"); ok ($C->_str($C->_fac($x)),'6');
$x = $C->_new("4"); ok ($C->_str($C->_fac($x)),'24');
$x = $C->_new("5"); ok ($C->_str($C->_fac($x)),'120');
$x = $C->_new("10"); ok ($C->_str($C->_fac($x)),'3628800');
$x = $C->_new("11"); ok ($C->_str($C->_fac($x)),'39916800');
$x = $C->_new("12"); ok ($C->_str($C->_fac($x)),'479001600');
$x = $C->_new("13"); ok ($C->_str($C->_fac($x)),'6227020800');

# test that _fac modifes $x in place for small arguments
$x = $C->_new("3"); $C->_fac($x); ok ($C->_str($x),'6');
$x = $C->_new("13"); $C->_fac($x); ok ($C->_str($x),'6227020800');
d315 2
a316 2
   unless ok ($C->_str($x),substr($_,0,length($_)-1) . '2');
  $C->_dec($x); ok ($C->_str($x),$_);
d322 2
a323 2
   unless ok ($C->_str($x),substr($_,0,length($_)-2) . '20');
  $C->_dec($x); ok ($C->_str($x),$_);
d329 2
a330 2
   unless ok ($C->_str($x), '1' . '0' x (length($_)));
  $C->_dec($x); ok ($C->_str($x),$_);
d333 2
a334 2
$x = $C->_new("1000"); $C->_inc($x); ok ($C->_str($x),'1001');
$C->_dec($x); ok ($C->_str($x),'1000');
d344 1
a344 1
$x = $C->_new($x); $C->_inc($x); ok ($C->_str($x),$z);
d347 1
a347 1
$x = $C->_new($x); $C->_dec($x); ok ($C->_str($x),$z);
d350 1
a350 1
# $x = $C->_new("-2"); $y = $C->_new("4"); ok ($C->_acmp($x,$y),-1);
d355 1
a355 1
ok ($C->_str(scalar $C->_mod($x,$y)),1);
d357 1
a357 1
ok ($C->_str(scalar $C->_mod($x,$y)),0);
d361 1
a361 1
ok ($C->_str(scalar $C->_xor($x,$y)),7);
d363 1
a363 1
ok ($C->_str(scalar $C->_or($x,$y)),7);
d365 1
a365 1
ok ($C->_str(scalar $C->_and($x,$y)),1);
d368 6
a373 6
ok ($C->_str( $C->_from_hex("0xFf")),255);
ok ($C->_str( $C->_from_bin("0b10101011")),160+11);
ok ($C->_str( $C->_from_oct("0100")), 8*8);
ok ($C->_str( $C->_from_oct("01000")), 8*8*8);
ok ($C->_str( $C->_from_oct("010001")), 8*8*8*8+1);
ok ($C->_str( $C->_from_oct("010007")), 8*8*8*8+7);
d376 7
a382 7
ok ($C->_str( $C->_from_hex( $C->_as_hex( $C->_new("128")))), 128);
ok ($C->_str( $C->_from_bin( $C->_as_bin( $C->_new("128")))), 128);
ok ($C->_str( $C->_from_oct( $C->_as_oct( $C->_new("128")))), 128);

ok ($C->_str( $C->_from_oct( $C->_as_oct( $C->_new("123456")))), 123456);
ok ($C->_str( $C->_from_oct( $C->_as_oct( $C->_new("123456789")))), "123456789");
ok ($C->_str( $C->_from_oct( $C->_as_oct( $C->_new("1234567890123")))), "1234567890123");
d385 5
a389 5
ok ($C->_str($C->_1ex(0)), "1");
ok ($C->_str($C->_1ex(1)), "10");
ok ($C->_str($C->_1ex(2)), "100");
ok ($C->_str($C->_1ex(12)), "1000000000000");
ok ($C->_str($C->_1ex(16)), "10000000000000000");
d393 2
a394 2
ok ($C->_check($x),0);
ok ($C->_check(123),'123 is not a reference');
d402 1
a402 1
  $x = &{$C."::__strip_zeros"}([]); ok (@@$x,1); ok ($x->[0],0);
d404 2
a405 2
  $x = &{$C."::__strip_zeros"}([0]); ok (@@$x,1); ok ($x->[0],0);
  $x = &{$C."::__strip_zeros"}([1]); ok (@@$x,1); ok ($x->[0],1);
d408 1
a408 1
  ok (@@$x,2); ok ($x->[0],0); ok ($x->[1],1);
d410 1
a410 1
  ok (@@$x,3); ok ($x->[0],0); ok ($x->[1],1); ok ($x->[2],2);
d414 1
a414 1
  ok (@@$x,3); ok ($x->[0],0); ok ($x->[1],1); ok ($x->[2],2);
d417 1
a417 1
  ok (@@$x,3); ok ($x->[0],0); ok ($x->[1],1); ok ($x->[2],2);
d420 1
a420 1
  ok (@@$x,3); ok ($x->[0],0); ok ($x->[1],1); ok ($x->[2],2);
d424 1
a424 1
  ok (@@$x,1); ok ($x->[0],0);
@


1.1
log
@Initial revision
@
text
@@


1.1.1.1
log
@Perl 5.12.2 from CPAN
@
text
@@


1.1.1.2
log
@Import perl-5.24.2
@
text
@d4 10
a13 1
use Test::More tests => 359;
d17 1
a17 1
my ($BASE_LEN, undef, $AND_BITS, $XOR_BITS, $OR_BITS, $BASE_LEN_SMALL, $MAX_VAL) =
d32 1
a32 1
is (ref($x),'ARRAY'); is ($C->_str($x),123); is ($C->_str($y),321);
d36 4
a39 4
is ($C->_str($C->_add($x,$y)),444);
is ($C->_str($C->_sub($x,$y)),123);
is ($C->_str($C->_mul($x,$y)),39483);
is ($C->_str($C->_div($x,$y)),123);
d44 2
a45 2
is ($C->_str($C->_mul($x,$y)),39483);
is ($C->_str($x),39483); is ($C->_str($y),321);
d47 2
a48 2
is ($C->_str($C->_div($x,$y)),123);
is ($C->_str($x),123); is ($C->_str($y),321);
d52 1
a52 1
is ("$x1","$x");
d54 2
a55 2
is ("$x1","$x");
is ($C->_str($r1),'0');
d61 1
a61 1
is ($C->_str($C->_add($x,$z)),39485);
d64 1
a64 1
is ($C->_str($re),123); is ($C->_str($rr),2);
d67 2
a68 2
is ($C->_is_zero($x),'');
is ($C->_is_one($x),'');
d70 2
a71 2
is ($C->_str($C->_zero()),"0");
is ($C->_str($C->_one()),"1");
d74 10
a83 10
is ($C->_str($C->_two()),"2");
is ($C->_str($C->_ten()),"10");
is ($C->_is_ten($C->_two()),'');
is ($C->_is_two($C->_two()),1);
is ($C->_is_ten($C->_ten()),1);
is ($C->_is_two($C->_ten()),'');

is ($C->_is_one($C->_one()),1);
is ($C->_is_one($C->_two()), '');
is ($C->_is_one($C->_ten()), '');
d85 1
a85 1
is ($C->_is_one($C->_zero()), '');
d87 1
a87 1
is ($C->_is_zero($C->_zero()),1);
d89 1
a89 1
is ($C->_is_zero($C->_one()), '');
d92 2
a93 2
is ($C->_is_odd($C->_one()),1); is ($C->_is_odd($C->_zero()),'');
is ($C->_is_even($C->_one()), ''); is ($C->_is_even($C->_zero()),1);
d98 29
a126 29
  $x = $C->_new("1"); is ($C->$method($x),1);
  $x = $C->_new("12"); is ($C->$method($x),2);
  $x = $C->_new("123"); is ($C->$method($x),3);
  $x = $C->_new("1234"); is ($C->$method($x),4);
  $x = $C->_new("12345"); is ($C->$method($x),5);
  $x = $C->_new("123456"); is ($C->$method($x),6);
  $x = $C->_new("1234567"); is ($C->$method($x),7);
  $x = $C->_new("12345678"); is ($C->$method($x),8);
  $x = $C->_new("123456789"); is ($C->$method($x),9);

  $x = $C->_new("8"); is ($C->$method($x),1);
  $x = $C->_new("21"); is ($C->$method($x),2);
  $x = $C->_new("321"); is ($C->$method($x),3);
  $x = $C->_new("4321"); is ($C->$method($x),4);
  $x = $C->_new("54321"); is ($C->$method($x),5);
  $x = $C->_new("654321"); is ($C->$method($x),6);
  $x = $C->_new("7654321"); is ($C->$method($x),7);
  $x = $C->_new("87654321"); is ($C->$method($x),8);
  $x = $C->_new("987654321"); is ($C->$method($x),9);

  $x = $C->_new("0"); is ($C->$method($x),1);
  $x = $C->_new("20"); is ($C->$method($x),2);
  $x = $C->_new("320"); is ($C->$method($x),3);
  $x = $C->_new("4320"); is ($C->$method($x),4);
  $x = $C->_new("54320"); is ($C->$method($x),5);
  $x = $C->_new("654320"); is ($C->$method($x),6);
  $x = $C->_new("7654320"); is ($C->$method($x),7);
  $x = $C->_new("87654320"); is ($C->$method($x),8);
  $x = $C->_new("987654320"); is ($C->$method($x),9);
d132 1
a132 1
    print "# Tried len '$a'\n" unless is ($C->_len($x),$i);
d138 6
a143 6
is ($C->_digit($x,0),9);
is ($C->_digit($x,1),8);
is ($C->_digit($x,2),7);
is ($C->_digit($x,-1),1);
is ($C->_digit($x,-2),2);
is ($C->_digit($x,-3),3);
d149 2
a150 2
  is ($C->_str($C->_copy($x)),"$_");
  is ($C->_str($x),"$_");		# did _copy destroy original x?
d154 4
a157 4
$x = $C->_new("1256000000"); is ($C->_zeros($x),6);
$x = $C->_new("152"); is ($C->_zeros($x),0);
$x = $C->_new("123000"); is ($C->_zeros($x),3);
$x = $C->_new("0"); is ($C->_zeros($x),0);
d161 1
a161 1
is ($C->_str($C->_lsft($x,$y,10)),10000);
d163 1
a163 1
is ($C->_str($C->_lsft($x,$y,10)),20000);
d166 1
a166 1
is ($C->_str($C->_lsft($x,$y,2)), 128 << 4);
d169 1
a169 1
is ($C->_str($C->_rsft($x,$y,10)),1);
d171 1
a171 1
is ($C->_str($C->_rsft($x,$y,10)),20);
d173 1
a173 1
is ($C->_str($C->_rsft($x,$y,2)),256 >> 4);
d177 1
a177 1
is ($C->_str($C->_rsft($x,$y,10)),0);
d182 4
a185 4
is ($C->_acmp($x,$y),-1);
is ($C->_acmp($y,$x),1);
is ($C->_acmp($x,$x),0);
is ($C->_acmp($y,$y),0);
d188 1
a188 1
is ($C->_acmp($x,$y),0);
d190 2
a191 2
is ($C->_acmp($x,$y),1);
is ($C->_acmp($y,$x),-1);
d194 2
a195 2
is ($C->_acmp($x,$y),-1);
is ($C->_acmp($y,$x),+1);
d199 4
a202 4
is ($C->_acmp($x,$y),1);
is ($C->_acmp($y,$x),-1);
is ($C->_acmp($x,$x),0);
is ($C->_acmp($y,$y),0);
d206 4
a209 4
is ($C->_acmp($x,$y),-1);
is ($C->_acmp($y,$x),1);
is ($C->_acmp($x,$x),0);
is ($C->_acmp($y,$y),0);
d215 2
a216 2
is ($C->_str($xmod),'629');		# -629 % 5033 == 4404
is ($sign, '-');
d220 1
a220 1
is ($C->_str(scalar $C->_div($x,$y)),3);
d222 1
a222 1
is ($C->_str($x),30); is ($C->_str($y),3);
d224 1
a224 1
($x,$y) = $C->_div($x,$y); is ($C->_str($x),0); is ($C->_str($y),123);
d230 2
a231 2
  is (ref($x),'ARRAY'); is ($C->_str($x),"$_");
  $x = $C->_num($x); is (ref($x),''); is ($x,$_);
d235 2
a236 2
$x = $C->_new("144"); is ($C->_str($C->_sqrt($x)),'12');
$x = $C->_new("144000000000000"); is ($C->_str($C->_sqrt($x)),'12000000');
d240 1
a240 1
is ($C->_str($C->_root($x,$n)),'4');	# 4.xx => 4.0
d242 1
a242 1
is ($C->_str($C->_root($x,$n)),'3');
d246 1
a246 1
is ($C->_str($C->_pow($x,$n)), 0);
d248 1
a248 1
is ($C->_str($C->_pow($x,$n)), 1);
d250 1
a250 1
is ($C->_str($C->_pow($x,$n)), 1);
d252 1
a252 1
is ($C->_str($C->_pow($x,$n)), 5);
d255 1
a255 1
is ($C->_str($C->_pow($x,$n)),81 ** 3);
d257 1
a257 1
is ($C->_str($C->_root($x,$n)),81);
d260 2
a261 2
is ($C->_str($C->_pow($x,$n)),81 ** 3);
is ($C->_str($C->_pow($x,$n)),'150094635296999121'); # 531441 ** 3 ==
d263 2
a264 2
is ($C->_str($C->_root($x,$n)),'531441');
is ($C->_str($C->_root($x,$n)),'81');
d267 2
a268 2
is ($C->_str($C->_pow($x,$n)),'523347633027360537213511521');
is ($C->_str($C->_root($x,$n)),'81');
d271 1
a271 1
is ($C->_str($C->_root($x,$n)),'80');
d274 1
a274 1
is ($C->_str($C->_root($x,$n)),'81');
d285 1
a285 1
   is ($C->_str($C->_pow($x,$n)),$rc);
d292 1
a292 1
     is ($C->_str($C->_root($x,$n)),'1');
d297 1
a297 1
     is ($C->_str($C->_root($x,$n)), $res->[$i-2]);
d303 14
a316 14
$x = $C->_new("0"); is ($C->_str($C->_fac($x)),'1');
$x = $C->_new("1"); is ($C->_str($C->_fac($x)),'1');
$x = $C->_new("2"); is ($C->_str($C->_fac($x)),'2');
$x = $C->_new("3"); is ($C->_str($C->_fac($x)),'6');
$x = $C->_new("4"); is ($C->_str($C->_fac($x)),'24');
$x = $C->_new("5"); is ($C->_str($C->_fac($x)),'120');
$x = $C->_new("10"); is ($C->_str($C->_fac($x)),'3628800');
$x = $C->_new("11"); is ($C->_str($C->_fac($x)),'39916800');
$x = $C->_new("12"); is ($C->_str($C->_fac($x)),'479001600');
$x = $C->_new("13"); is ($C->_str($C->_fac($x)),'6227020800');

# test that _fac modifies $x in place for small arguments
$x = $C->_new("3"); $C->_fac($x); is ($C->_str($x),'6');
$x = $C->_new("13"); $C->_fac($x); is ($C->_str($x),'6227020800');
d324 2
a325 2
   unless is ($C->_str($x),substr($_,0,length($_)-1) . '2');
  $C->_dec($x); is ($C->_str($x),$_);
d331 2
a332 2
   unless is ($C->_str($x),substr($_,0,length($_)-2) . '20');
  $C->_dec($x); is ($C->_str($x),$_);
d338 2
a339 2
   unless is ($C->_str($x), '1' . '0' x (length($_)));
  $C->_dec($x); is ($C->_str($x),$_);
d342 2
a343 2
$x = $C->_new("1000"); $C->_inc($x); is ($C->_str($x),'1001');
$C->_dec($x); is ($C->_str($x),'1000');
d353 1
a353 1
$x = $C->_new($x); $C->_inc($x); is ($C->_str($x),$z);
d356 1
a356 1
$x = $C->_new($x); $C->_dec($x); is ($C->_str($x),$z);
d359 1
a359 1
# $x = $C->_new("-2"); $y = $C->_new("4"); is ($C->_acmp($x,$y),-1);
d364 1
a364 1
is ($C->_str(scalar $C->_mod($x,$y)),1);
d366 1
a366 1
is ($C->_str(scalar $C->_mod($x,$y)),0);
d370 1
a370 1
is ($C->_str(scalar $C->_xor($x,$y)),7);
d372 1
a372 1
is ($C->_str(scalar $C->_or($x,$y)),7);
d374 1
a374 1
is ($C->_str(scalar $C->_and($x,$y)),1);
d377 6
a382 6
is ($C->_str( $C->_from_hex("0xFf")),255);
is ($C->_str( $C->_from_bin("0b10101011")),160+11);
is ($C->_str( $C->_from_oct("0100")), 8*8);
is ($C->_str( $C->_from_oct("01000")), 8*8*8);
is ($C->_str( $C->_from_oct("010001")), 8*8*8*8+1);
is ($C->_str( $C->_from_oct("010007")), 8*8*8*8+7);
d385 7
a391 7
is ($C->_str( $C->_from_hex( $C->_as_hex( $C->_new("128")))), 128);
is ($C->_str( $C->_from_bin( $C->_as_bin( $C->_new("128")))), 128);
is ($C->_str( $C->_from_oct( $C->_as_oct( $C->_new("128")))), 128);

is ($C->_str( $C->_from_oct( $C->_as_oct( $C->_new("123456")))), 123456);
is ($C->_str( $C->_from_oct( $C->_as_oct( $C->_new("123456789")))), "123456789");
is ($C->_str( $C->_from_oct( $C->_as_oct( $C->_new("1234567890123")))), "1234567890123");
d394 5
a398 5
is ($C->_str($C->_1ex(0)), "1");
is ($C->_str($C->_1ex(1)), "10");
is ($C->_str($C->_1ex(2)), "100");
is ($C->_str($C->_1ex(12)), "1000000000000");
is ($C->_str($C->_1ex(16)), "10000000000000000");
d402 2
a403 2
is ($C->_check($x),0);
is ($C->_check(123),'123 is not a reference');
d411 1
a411 1
  $x = &{$C."::__strip_zeros"}([]); is (@@$x,1); is ($x->[0],0);
d413 2
a414 2
  $x = &{$C."::__strip_zeros"}([0]); is (@@$x,1); is ($x->[0],0);
  $x = &{$C."::__strip_zeros"}([1]); is (@@$x,1); is ($x->[0],1);
d417 1
a417 1
  is (@@$x,2); is ($x->[0],0); is ($x->[1],1);
d419 1
a419 1
  is (@@$x,3); is ($x->[0],0); is ($x->[1],1); is ($x->[2],2);
d423 1
a423 1
  is (@@$x,3); is ($x->[0],0); is ($x->[1],1); is ($x->[2],2);
d426 1
a426 1
  is (@@$x,3); is ($x->[0],0); is ($x->[1],1); is ($x->[2],2);
d429 1
a429 1
  is (@@$x,3); is ($x->[0],0); is ($x->[1],1); is ($x->[2],2);
d433 1
a433 1
  is (@@$x,1); is ($x->[0],0);
@

