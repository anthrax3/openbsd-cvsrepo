head	1.2;
access;
symbols
	OPENBSD_6_1:1.2.0.2
	OPENBSD_6_1_BASE:1.2
	OPENBSD_6_0:1.1.1.2.0.10
	OPENBSD_6_0_BASE:1.1.1.2
	OPENBSD_5_9:1.1.1.2.0.4
	OPENBSD_5_9_BASE:1.1.1.2
	OPENBSD_5_8:1.1.1.2.0.6
	OPENBSD_5_8_BASE:1.1.1.2
	PERL_5_20_2:1.1.1.2
	OPENBSD_5_7:1.1.1.2.0.2
	OPENBSD_5_7_BASE:1.1.1.2
	PERL_5_20_1:1.1.1.2
	OPENBSD_5_6:1.1.1.1.0.8
	OPENBSD_5_6_BASE:1.1.1.1
	PERL_5_18_2:1.1.1.1
	PERL:1.1.1
	OPENBSD_5_5:1.1.1.1.0.6
	OPENBSD_5_5_BASE:1.1.1.1
	OPENBSD_5_4:1.1.1.1.0.2
	OPENBSD_5_4_BASE:1.1.1.1
	PERL_5_16_3:1.1.1.1
	CPAN:1.1.1;
locks; strict;
comment	@# @;
expand	@o@;


1.2
date	2017.02.05.00.31.56;	author afresh1;	state Exp;
branches;
next	1.1;
commitid	cxJ08BvJA9Pt2PTM;

1.1
date	2013.03.25.20.06.55;	author sthen;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	2013.03.25.20.06.55;	author sthen;	state Exp;
branches;
next	1.1.1.2;

1.1.1.2
date	2014.11.17.20.52.43;	author afresh1;	state Exp;
branches;
next	;
commitid	B31cAbBIXiCqnL97;


desc
@@


1.2
log
@Fix merge issues, remove excess files - match perl-5.24.1 dist
@
text
@# Testing documents that should fail
use strict;
use warnings;
use lib 't/lib/';
use Test::More 0.88;
use TestUtils;

use File::Spec::Functions ':ALL';



#####################################################################
# Customized Class

SCOPE: {
    package Foo;

    use CPAN::Meta::YAML;

    use vars qw{@@ISA};
    BEGIN {
        @@ISA = 'CPAN::Meta::YAML';
    }

    # XXX-INGY subclasses should not use private methods… or if they
    # do they should expect method name changes.
    # sub _write_scalar {

    sub _dump_scalar {
        my $self   = shift;
        my $string = shift;
        my $is_key = shift;
        if ( defined $is_key ) {
            return scalar reverse $string;
        } else {
            return $string;
        }
    }

    1;
}





#####################################################################
# Generate the value

my $object = Foo->new(
    { foo => 'bar' }
);
is( $object->write_string, "---\noof: bar\n", 'Subclassing works' );

done_testing;
@


1.1
log
@Initial revision
@
text
@a0 2
#!/usr/bin/perl

a1 1

d3 4
a6 4
BEGIN {
	$|  = 1;
	$^W = 1;
}
a8 4
use t::lib::Test;
use Test::More tests => 1;


d16 1
a16 1
	package Foo;
d18 1
a18 1
	use CPAN::Meta::YAML;
d20 19
a38 15
	use vars qw{@@ISA};
	BEGIN {
		@@ISA = 'CPAN::Meta::YAML';
	}

	sub _write_scalar {
		my $self   = shift;
		my $string = shift;
		my $indent = shift;
		if ( defined $indent ) {
			return "'$indent'";
		} else {
			return 'undef';
		}
	}
d40 1
a40 1
	1;
d51 1
a51 1
	{ foo => 'bar' }
d53 3
a55 1
is( $object->write_string, "---\nfoo: '1'\n", 'Subclassing works' );
@


1.1.1.1
log
@import perl 5.16.3 from CPAN - worked on by Andrew Fresh and myself
@
text
@@


1.1.1.2
log
@Import perl-5.20.1
@
text
@d1 2
d4 1
d6 4
a9 4
use warnings;
use lib 't/lib/';
use Test::More 0.99;
use TestUtils;
d12 4
d23 1
a23 1
    package Foo;
d25 1
a25 1
    use CPAN::Meta::YAML;
d27 15
a41 19
    use vars qw{@@ISA};
    BEGIN {
        @@ISA = 'CPAN::Meta::YAML';
    }

    # XXX-INGY subclasses should not use private methods… or if they
    # do they should expect method name changes.
    # sub _write_scalar {

    sub _dump_scalar {
        my $self   = shift;
        my $string = shift;
        my $is_key = shift;
        if ( defined $is_key ) {
            return scalar reverse $string;
        } else {
            return $string;
        }
    }
d43 1
a43 1
    1;
d54 1
a54 1
    { foo => 'bar' }
d56 1
a56 3
is( $object->write_string, "---\noof: bar\n", 'Subclassing works' );

done_testing;
@

