head	1.1;
branch	1.1.1;
access;
symbols
	OPENBSD_6_1_BASE:1.1.1.3
	OPENBSD_6_0:1.1.1.3.0.10
	OPENBSD_6_0_BASE:1.1.1.3
	OPENBSD_5_9:1.1.1.3.0.4
	OPENBSD_5_9_BASE:1.1.1.3
	OPENBSD_5_8:1.1.1.3.0.6
	OPENBSD_5_8_BASE:1.1.1.3
	PERL_5_20_2:1.1.1.3
	OPENBSD_5_7:1.1.1.3.0.2
	OPENBSD_5_7_BASE:1.1.1.3
	PERL_5_20_1:1.1.1.3
	OPENBSD_5_6:1.1.1.2.0.4
	OPENBSD_5_6_BASE:1.1.1.2
	PERL_5_18_2:1.1.1.2
	PERL:1.1.1
	OPENBSD_5_5:1.1.1.1.0.6
	OPENBSD_5_5_BASE:1.1.1.1
	OPENBSD_5_4:1.1.1.1.0.2
	OPENBSD_5_4_BASE:1.1.1.1
	PERL_5_16_3:1.1.1.1
	CPAN:1.1.1;
locks; strict;
comment	@# @;
expand	@o@;


1.1
date	2013.03.25.20.07.58;	author sthen;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	2013.03.25.20.07.58;	author sthen;	state Exp;
branches;
next	1.1.1.2;

1.1.1.2
date	2014.03.24.14.58.55;	author afresh1;	state Exp;
branches;
next	1.1.1.3;

1.1.1.3
date	2014.11.17.20.52.57;	author afresh1;	state Exp;
branches;
next	;
commitid	B31cAbBIXiCqnL97;


desc
@@


1.1
log
@Initial revision
@
text
@use strict;
use warnings;

use Test::More 0.88;

use constant NON_EXISTENT_OS => 'titanix'; #the system they said could not go down...

#--------------------------------------------------------------------------#
# API tests
#--------------------------------------------------------------------------#

require_ok( 'Perl::OSType' );

can_ok( 'Perl::OSType', 'os_type' );

my @@functions = qw/os_type is_os_type/ ;
for my $sub ( @@functions ) {
  ok( eval { Perl::OSType->import($sub); 1 }, "importing $sub()" );
  can_ok( 'main', $sub );
}

my $test_pkg = "testpackage$$";

ok( eval "package $test_pkg; use Perl::OSType ':all'; 1",
  "Testing 'use Perl::OSType qw/:all/'"
);

can_ok( $test_pkg, @@functions );


#--------------------------------------------------------------------------#
# os_type
#--------------------------------------------------------------------------#

{
  my $fcn = 'os_type()';

  ok( my $current_type = os_type(), "$fcn: without arguments" );

  is( $current_type, os_type( $^O ), "... matches os_type($^O)" );

  is(os_type( NON_EXISTENT_OS ), '', "$fcn: unknown OS returns empty string");

  is(os_type( '' ), '', "$fcn: empty string returns empty string");

  local $^O = 'linux';

  is(os_type( undef ), 'Unix', "$fcn: explicit undef uses $^O");
}

#--------------------------------------------------------------------------#
# is_os_type
#--------------------------------------------------------------------------#

{
  my $fcn = 'is_os_type()';

  is(is_os_type(NON_EXISTENT_OS), '', "$fcn: non-existent type is false");

  is(is_os_type(''), undef, "$fcn: empty string type is false");

  is(is_os_type('Unix', NON_EXISTENT_OS), '', "$fcn: non-existent OS is false");

  local $^O = 'VOS';
  ok( ! is_os_type( 'Unix' ), "$fcn: false" );
  ok( is_os_type( 'VOS' ),    "$fcn: true" );
  ok( ! is_os_type(), "$fcn: false if no type provided" );
}

done_testing;

@


1.1.1.1
log
@import perl 5.16.3 from CPAN - worked on by Andrew Fresh and myself
@
text
@@


1.1.1.2
log
@Import perl-5.18.2

OK espie@@ sthen@@ deraadt@@
@
text
@d64 1
a64 1
  local $^O = 'vos';
@


1.1.1.3
log
@Import perl-5.20.1
@
text
@d12 1
a12 1
require_ok('Perl::OSType');
d16 4
a19 4
my @@functions = qw/os_type is_os_type/;
for my $sub (@@functions) {
    ok( eval { Perl::OSType->import($sub); 1 }, "importing $sub()" );
    can_ok( 'main', $sub );
d25 2
a26 1
    "Testing 'use Perl::OSType qw/:all/'" );
d30 1
d36 1
a36 1
    my $fcn = 'os_type()';
d38 1
a38 1
    ok( my $current_type = os_type(), "$fcn: without arguments" );
d40 1
a40 1
    is( $current_type, os_type($^O), "... matches os_type($^O)" );
d42 1
a42 1
    is( os_type(NON_EXISTENT_OS), '', "$fcn: unknown OS returns empty string" );
d44 1
a44 1
    is( os_type(''), '', "$fcn: empty string returns empty string" );
d46 1
a46 1
    local $^O = 'linux';
d48 1
a48 1
    is( os_type(undef), 'Unix', "$fcn: explicit undef uses $^O" );
d56 1
a56 1
    my $fcn = 'is_os_type()';
d58 1
a58 1
    is( is_os_type(NON_EXISTENT_OS), '', "$fcn: non-existent type is false" );
d60 1
a60 1
    is( is_os_type(''), undef, "$fcn: empty string type is false" );
d62 1
a62 1
    is( is_os_type( 'Unix', NON_EXISTENT_OS ), '', "$fcn: non-existent OS is false" );
d64 4
a67 4
    local $^O = 'vos';
    ok( !is_os_type('Unix'), "$fcn: false" );
    ok( is_os_type('VOS'),   "$fcn: true" );
    ok( !is_os_type(),       "$fcn: false if no type provided" );
@


