head	1.4;
access;
symbols
	OPENBSD_5_6:1.3.0.4
	OPENBSD_5_6_BASE:1.3
	PERL_5_18_2:1.1.1.2
	PERL:1.1.1
	OPENBSD_5_3:1.1.1.1.0.10
	OPENBSD_5_3_BASE:1.1.1.1
	OPENBSD_5_2:1.1.1.1.0.8
	OPENBSD_5_2_BASE:1.1.1.1
	OPENBSD_5_1_BASE:1.1.1.1
	OPENBSD_5_1:1.1.1.1.0.6
	OPENBSD_5_0:1.1.1.1.0.4
	OPENBSD_5_0_BASE:1.1.1.1
	OPENBSD_4_9:1.1.1.1.0.2
	OPENBSD_4_9_BASE:1.1.1.1
	PERL_5_12_2:1.1.1.1
	CPAN:1.1.1;
locks; strict;
comment	@# @;
expand	@o@;


1.4
date	2014.11.17.20.56.55;	author afresh1;	state dead;
branches;
next	1.3;
commitid	QP75iYx42Uo7mMxO;

1.3
date	2014.03.24.15.05.23;	author afresh1;	state Exp;
branches;
next	1.2;

1.2
date	2013.03.25.20.40.46;	author sthen;	state dead;
branches;
next	1.1;

1.1
date	2010.09.24.14.49.04;	author millert;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	2010.09.24.14.49.04;	author millert;	state Exp;
branches;
next	1.1.1.2;

1.1.1.2
date	2014.03.24.14.58.49;	author afresh1;	state Exp;
branches;
next	;


desc
@@


1.4
log
@Fix merge conflicts, remove extra files, match upstream perl-5.20.1

ok deraadt@@ sthen@@ espie@@ miod@@
@
text
@#!./perl -w

BEGIN {
    unshift @@INC, 't';
    push @@INC, "../../t";
    require Config;
    if ( ( $Config::Config{'extensions'} !~ /\bB\b/ ) ) {
        print "1..0 # Skip -- Perl configured without B module\n";
        exit 0;
    }
    require 'test.pl';
}

use strict;
use warnings;

plan tests => 29;

# Runs a separate perl interpreter with the appropriate lint options
# turned on
sub runlint ($$$;$) {
    my ( $opts, $prog, $result, $testname ) = @@_;
    my $res = runperl(
        switches => ["-MO=Lint,$opts"],
        prog     => $prog,
        stderr   => 1,
    );
    $res =~ s/-e syntax OK\n$//;
    local $::Level = $::Level + 1;
    is( $res, $result, $testname || $opts );
}

runlint 'magic-diamond', 'while(<>){}', <<'RESULT';
Use of <> at -e line 1
RESULT

runlint 'magic-diamond', 'while(<ARGV>){}', <<'RESULT';
Use of <> at -e line 1
RESULT

runlint 'magic-diamond', 'while(<FOO>){}', <<'RESULT';
RESULT

runlint 'context', '$foo = @@bar', <<'RESULT';
Implicit scalar context for array in scalar assignment at -e line 1
RESULT

runlint 'context', '$foo = length @@bar', <<'RESULT';
Implicit scalar context for array in length at -e line 1
RESULT

runlint 'context', 'our @@bar', '';

runlint 'context', 'exists $BAR{BAZ}', '';

runlint 'implicit-read', '/foo/', <<'RESULT';
Implicit match on $_ at -e line 1
RESULT

runlint 'implicit-read', 'grep /foo/, ()', '';

runlint 'implicit-read', 'grep { /foo/ } ()', '';

runlint 'implicit-write', 's/foo/bar/', <<'RESULT';
Implicit substitution on $_ at -e line 1
RESULT

runlint 'implicit-read', 'for ( @@ARGV ) { 1 }',
    <<'RESULT', 'implicit-read in foreach';
Implicit use of $_ in foreach at -e line 1
RESULT

runlint 'implicit-read', '1 for @@ARGV', '', 'implicit-read in foreach';

runlint 'dollar-underscore', '$_ = 1', <<'RESULT';
Use of $_ at -e line 1
RESULT

runlint 'dollar-underscore', 'sub foo {}; foo( $_ ) for @@A',      '';
runlint 'dollar-underscore', 'sub foo {}; map { foo( $_ ) } @@A',  '';
runlint 'dollar-underscore', 'sub foo {}; grep { foo( $_ ) } @@A', '';

runlint 'dollar-underscore', 'print',
    <<'RESULT', 'dollar-underscore in print';
Use of $_ at -e line 1
RESULT

runlint 'private-names', 'sub A::_f{};A::_f()', <<'RESULT';
Illegal reference to private name '_f' at -e line 1
RESULT

runlint 'private-names', '$A::_x', <<'RESULT';
Illegal reference to private name '_x' at -e line 1
RESULT

runlint 'private-names', 'sub A::_f{};A->_f()', <<'RESULT',
Illegal reference to private method name '_f' at -e line 1
RESULT
    'private-names (method)';

runlint 'undefined-subs', 'foo()', <<'RESULT';
Nonexistent subroutine 'foo' called at -e line 1
RESULT

runlint 'undefined-subs', 'foo();sub foo;', <<'RESULT';
Undefined subroutine 'foo' called at -e line 1
RESULT

runlint 'regexp-variables', 'print $&', <<'RESULT';
Use of regexp variable $& at -e line 1
RESULT

runlint 'regexp-variables', 's/./$&/', <<'RESULT';
Use of regexp variable $& at -e line 1
RESULT

runlint 'bare-subs', 'sub bare(){1};$x=bare', '';

runlint 'bare-subs', 'sub bare(){1}; $x=[bare=>0]; $x=$y{bare}', <<'RESULT';
Bare sub name 'bare' interpreted as string at -e line 1
Bare sub name 'bare' interpreted as string at -e line 1
RESULT

{

    # Check for backwards-compatible plugin support. This was where
    # preloaded mdoules would register themselves with B::Lint.
    my $res = runperl(
        switches => ["-MB::Lint"],
        prog =>
            'BEGIN{B::Lint->register_plugin(X=>[q[x]])};use O(qw[Lint x]);sub X::match{warn qq[X ok.\n]};dummy()',
        stderr => 1,
    );
    like( $res, qr/X ok\./, 'Lint legacy plugin' );
}

{

    # Check for Module::Plugin support
    my $res = runperl(
        switches => [ '-It/pluglib', '-MO=Lint,none' ],
        prog     => 1,
        stderr   => 1,
    );
    like( $res, qr/Module::Pluggable ok\./, 'Lint uses Module::Pluggable' );
}
@


1.3
log
@Merge perl-5.18.2 plus local patches, remove old files

OK espie@@ sthen@@ deraadt@@
@
text
@@


1.2
log
@merge/resolve conflicts
(some more to do after this one)
@
text
@d13 1
d102 1
a102 1
Nonexistant subroutine 'foo' called at -e line 1
d130 1
a130 1
        prog     =>
@


1.1
log
@Initial revision
@
text
@@


1.1.1.1
log
@Perl 5.12.2 from CPAN
@
text
@@


1.1.1.2
log
@Import perl-5.18.2

OK espie@@ sthen@@ deraadt@@
@
text
@a12 1

d101 1
a101 1
Nonexistent subroutine 'foo' called at -e line 1
d129 1
a129 1
        prog =>
@

