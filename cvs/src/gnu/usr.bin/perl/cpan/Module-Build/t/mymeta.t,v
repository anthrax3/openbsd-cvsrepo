head	1.1;
branch	1.1.1;
access;
symbols
	OPENBSD_6_0:1.1.1.3.0.10
	OPENBSD_6_0_BASE:1.1.1.3
	OPENBSD_5_9:1.1.1.3.0.4
	OPENBSD_5_9_BASE:1.1.1.3
	OPENBSD_5_8:1.1.1.3.0.6
	OPENBSD_5_8_BASE:1.1.1.3
	PERL_5_20_2:1.1.1.3
	OPENBSD_5_7:1.1.1.3.0.2
	OPENBSD_5_7_BASE:1.1.1.3
	PERL_5_20_1:1.1.1.3
	OPENBSD_5_6:1.1.1.2.0.8
	OPENBSD_5_6_BASE:1.1.1.2
	PERL_5_18_2:1.1.1.2
	PERL:1.1.1
	OPENBSD_5_5:1.1.1.2.0.6
	OPENBSD_5_5_BASE:1.1.1.2
	OPENBSD_5_4:1.1.1.2.0.2
	OPENBSD_5_4_BASE:1.1.1.2
	PERL_5_16_3:1.1.1.2
	OPENBSD_5_3:1.1.1.1.0.10
	OPENBSD_5_3_BASE:1.1.1.1
	OPENBSD_5_2:1.1.1.1.0.8
	OPENBSD_5_2_BASE:1.1.1.1
	OPENBSD_5_1_BASE:1.1.1.1
	OPENBSD_5_1:1.1.1.1.0.6
	OPENBSD_5_0:1.1.1.1.0.4
	OPENBSD_5_0_BASE:1.1.1.1
	OPENBSD_4_9:1.1.1.1.0.2
	OPENBSD_4_9_BASE:1.1.1.1
	PERL_5_12_2:1.1.1.1
	CPAN:1.1.1;
locks; strict;
comment	@# @;
expand	@o@;


1.1
date	2010.09.24.14.49.00;	author millert;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	2010.09.24.14.49.00;	author millert;	state Exp;
branches;
next	1.1.1.2;

1.1.1.2
date	2013.03.25.20.07.55;	author sthen;	state Exp;
branches;
next	1.1.1.3;

1.1.1.3
date	2014.11.17.20.52.57;	author afresh1;	state Exp;
branches;
next	;
commitid	B31cAbBIXiCqnL97;


desc
@@


1.1
log
@Initial revision
@
text
@#!/usr/bin/perl -w

use strict;
use lib 't/lib';
use MBTest;
plan tests => 24;

blib_load('Module::Build');
blib_load('Module::Build::YAML');

my $tmp = MBTest->tmpdir;

use DistGen;
my $dist = DistGen->new( dir => $tmp );
$dist->change_file('Build.PL', <<"---");
use strict;
use Module::Build;

my \$builder = Module::Build->new(
  module_name         => '$dist->{name}',
  license             => 'perl',
  requires            => {
    'File::Spec' => ( \$ENV{BUMP_PREREQ} ? 0.86 : 0 ),
  },
);

\$builder->create_build_script();
---
$dist->regen;
$dist->chdir_in;

#########################

# Test MYMETA generation
{
  ok( ! -e "META.yml", "META.yml doesn't exist before Build.PL runs" );
  ok( ! -e "MYMETA.yml", "MYMETA.yml doesn't exist before Build.PL runs" );
  my $output;
  $output = stdout_of sub { $dist->run_build_pl };
  like($output, qr/Creating new 'MYMETA.yml' with configuration results/,
    "Ran Build.PL and saw MYMETA.yml creation message"
  );
  ok( -e "MYMETA.yml", "MYMETA.yml exists" );
}

#########################

# Test interactions between META/MYMETA
{
  my $output = stdout_of sub { $dist->run_build('distmeta') };
  like($output, qr/Creating META.yml/,
    "Ran Build distmeta to create META.yml");
  my $meta = Module::Build::YAML->read('META.yml')->[0];
  my $mymeta = Module::Build::YAML->read('MYMETA.yml')->[0];
  is( delete $mymeta->{dynamic_config}, 0,
    "MYMETA 'dynamic_config' is 0"
  );
  is_deeply( $meta, $mymeta, "Other generated MYMETA matches generated META" );
  $output = stdout_stderr_of sub { $dist->run_build('realclean') };
  like( $output, qr/Cleaning up/, "Ran realclean");
  ok( ! -e 'Build', "Build file removed" );
  ok( ! -e 'MYMETA.yml', "MYMETA file removed" );

  # test that dynamic prereq is picked up
  local $ENV{BUMP_PREREQ} = 1;
  $output = stdout_of sub { $dist->run_build_pl };
  like($output, qr/Creating new 'MYMETA.yml' with configuration results/,
    "Ran Build.PL with dynamic config"
  );
  ok( -e "MYMETA.yml", "MYMETA.yml exists" );
  $mymeta = Module::Build::YAML->read('MYMETA.yml')->[0];
  isnt(   $meta->{requires}{'File::Spec'},
        $mymeta->{requires}{'File::Spec'},
        "MYMETA requires differs from META"
  );
  $output = stdout_stderr_of sub { $dist->run_build('realclean') };
  like( $output, qr/Cleaning up/, "Ran realclean");
  ok( ! -e 'Build', "Build file removed" );
  ok( ! -e 'MYMETA.yml', "MYMETA file removed" );

  # manually change META and check that changes are preserved
  $meta->{author} = ['John Gault'];
  ok( Module::Build::YAML->new($meta)->write('META.yml'),
    "Wrote manually modified META.yml" );

  $output = stdout_of sub { $dist->run_build_pl };
  like($output, qr/Creating new 'MYMETA.yml' with configuration results/,
    "Ran Build.PL"
  );
  my $mymeta2 = Module::Build::YAML->read('MYMETA.yml')->[0];
  is_deeply( $mymeta2->{author}, [ 'John Gault' ],
    "MYMETA preserved META modifications"
  );



}

#########################

# Test cleanup
{
  my $output = stdout_stderr_of sub { $dist->run_build('distcheck') };
  like($output, qr/Creating a temporary 'MANIFEST.SKIP'/,
    "MANIFEST.SKIP created for distcheck"
  );
  unlike($output, qr/MYMETA/,
    "MYMETA not flagged by distcheck"
  );
}


{
  my $output = stdout_of sub { $dist->run_build_pl };
  like($output, qr/Creating new 'MYMETA.yml' with configuration results/,
    "Ran Build.PL and saw MYMETA.yml creation message"
  );
  $output = stdout_stderr_of sub { $dist->run_build('distclean') };
  ok( ! -f 'MYMETA.yml', "No MYMETA.yml after distclean" );
  ok( ! -f 'MANIFEST.SKIP', "No MANIFEST.SKIP after distclean" );
}


@


1.1.1.1
log
@Perl 5.12.2 from CPAN
@
text
@@


1.1.1.2
log
@import perl 5.16.3 from CPAN - worked on by Andrew Fresh and myself
@
text
@d6 1
a6 4
use CPAN::Meta 2.110420;
use CPAN::Meta::YAML;
use Parse::CPAN::Meta 1.4401;
plan tests => 39;
d9 1
a37 2
  ok( ! -e "META.json", "META.json doesn't exist before Build.PL runs" );
  ok( ! -e "MYMETA.json", "MYMETA.json doesn't exist before Build.PL runs" );
d40 1
a40 1
  like($output, qr/Created MYMETA\.yml and MYMETA\.json/,
a43 1
  ok( -e "MYMETA.json", "MYMETA.json exists" );
d50 2
a51 2
  my $output = stdout_stderr_of sub { $dist->run_build('distmeta') };
  like($output, qr/Created META\.yml and META\.json/,
d53 4
a56 4
  # regenerate MYMETA to pick up from META instead of creating from scratch
  $output = stdout_of sub { $dist->run_build_pl };
  like($output, qr/Created MYMETA\.yml and MYMETA\.json/,
    "Re-ran Build.PL and regenerated MYMETA.yml based on META.yml"
d58 1
a58 18

  for my $suffix ( qw/.yml .json/ ) {
    my $meta = Parse::CPAN::Meta->load_file("META$suffix");
    my $mymeta = Parse::CPAN::Meta->load_file("MYMETA$suffix");
    is( delete $meta->{dynamic_config}, 1,
      "META$suffix 'dynamic_config' is 1"
    );
    is( delete $mymeta->{dynamic_config}, 0,
      "MYMETA$suffix 'dynamic_config' is 0"
    );
    is_deeply( $mymeta, $meta, "Other generated MYMETA$suffix matches generated META$suffix" )
      or do {
        require Data::Dumper;
        diag "MYMETA:\n" . Data::Dumper::Dumper($mymeta)
          .  "META:\n" . Data::Dumper::Dumper($meta);
      };
  }

d62 1
a62 2
  ok( ! -e 'MYMETA.yml', "MYMETA.yml file removed" );
  ok( ! -e 'MYMETA.json', "MYMETA.json file removed" );
a64 2
  my $meta = Parse::CPAN::Meta->load_file("META.yml");
  my $meta2 = Parse::CPAN::Meta->load_file("META.json");
d67 1
a67 1
  like($output, qr/Created MYMETA\.yml and MYMETA\.json/,
d71 1
a71 3
  ok( -e "MYMETA.json", "MYMETA.json exists" );
  my $mymeta = Parse::CPAN::Meta->load_file('MYMETA.yml');
  my $mymeta2 = Parse::CPAN::Meta->load_file('MYMETA.json');
d74 1
a74 5
        "MYMETA.yml requires differs from META.yml"
  );
  isnt(   $meta2->{prereqs}{runtime}{requires}{'File::Spec'},
        $mymeta2->{prereqs}{runtime}{requires}{'File::Spec'},
        "MYMETA.json requires differs from META.json"
a79 1
  ok( ! -e 'MYMETA.json', "MYMETA file removed" );
d83 1
a83 2
  $meta2->{author} = ['John Gault'];
  ok( CPAN::Meta::YAML->new($meta)->write('META.yml'),
a84 2
  ok( CPAN::Meta->new( $meta2 )->save('META.json'),
    "Wrote manually modified META.json" );
d87 1
a87 1
  like($output, qr/Created MYMETA\.yml and MYMETA\.json/,
d90 1
a90 5
  $mymeta = Parse::CPAN::Meta->load_file('MYMETA.yml');
  $mymeta2 = Parse::CPAN::Meta->load_file('MYMETA.json');
  is_deeply( $mymeta->{author}, [ 'John Gault' ],
    "MYMETA.yml preserved META.yml modifications"
  );
d92 1
a92 1
    "MYMETA.json preserved META.json modifications"
d95 2
d115 1
a115 1
  like($output, qr/Created MYMETA\.yml and MYMETA\.json/,
a119 1
  ok( ! -f 'MYMETA.json', "No MYMETA.json after distclean" );
@


1.1.1.3
log
@Import perl-5.20.1
@
text
@a26 3
  configure_requires  => {
    'Module::Build' => '0.42',
  }
@


