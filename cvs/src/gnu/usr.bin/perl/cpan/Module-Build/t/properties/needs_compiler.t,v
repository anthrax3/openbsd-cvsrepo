head	1.1;
branch	1.1.1;
access;
symbols
	OPENBSD_6_0:1.1.1.1.0.26
	OPENBSD_6_0_BASE:1.1.1.1
	OPENBSD_5_9:1.1.1.1.0.20
	OPENBSD_5_9_BASE:1.1.1.1
	OPENBSD_5_8:1.1.1.1.0.22
	OPENBSD_5_8_BASE:1.1.1.1
	PERL_5_20_2:1.1.1.1
	OPENBSD_5_7:1.1.1.1.0.14
	OPENBSD_5_7_BASE:1.1.1.1
	PERL_5_20_1:1.1.1.1
	OPENBSD_5_6:1.1.1.1.0.18
	OPENBSD_5_6_BASE:1.1.1.1
	PERL_5_18_2:1.1.1.1
	PERL:1.1.1
	OPENBSD_5_5:1.1.1.1.0.16
	OPENBSD_5_5_BASE:1.1.1.1
	OPENBSD_5_4:1.1.1.1.0.12
	OPENBSD_5_4_BASE:1.1.1.1
	PERL_5_16_3:1.1.1.1
	OPENBSD_5_3:1.1.1.1.0.10
	OPENBSD_5_3_BASE:1.1.1.1
	OPENBSD_5_2:1.1.1.1.0.8
	OPENBSD_5_2_BASE:1.1.1.1
	OPENBSD_5_1_BASE:1.1.1.1
	OPENBSD_5_1:1.1.1.1.0.6
	OPENBSD_5_0:1.1.1.1.0.4
	OPENBSD_5_0_BASE:1.1.1.1
	OPENBSD_4_9:1.1.1.1.0.2
	OPENBSD_4_9_BASE:1.1.1.1
	PERL_5_12_2:1.1.1.1
	CPAN:1.1.1;
locks; strict;
comment	@# @;
expand	@o@;


1.1
date	2010.09.24.14.49.00;	author millert;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	2010.09.24.14.49.00;	author millert;	state Exp;
branches;
next	;


desc
@@


1.1
log
@Initial revision
@
text
@# sample.t -- a sample test file for Module::Build

use strict;
use lib 't/lib';
use MBTest;
use DistGen;

plan tests => 19;

# Ensure any Module::Build modules are loaded from correct directory
blib_load('Module::Build');

my $dist = DistGen->new->regen->chdir_in;

# get a Module::Build object and test with it
my $mb;
stderr_of(sub {
    ok( $mb = $dist->new_from_context, "Default Build.PL" );
});

ok( ! $mb->needs_compiler, "needs_compiler is false" );
ok( ! exists $mb->{properties}{build_requires}{'ExtUtils::CBuilder'},
  "ExtUtils::CBuilder is not in build_requires"
);

#--------------------------------------------------------------------------#
# try with c_source
#--------------------------------------------------------------------------#
$dist->change_build_pl({
    module_name => $dist->name,
    license => 'perl',
    c_source => 'src',
});
$dist->regen;
stderr_of(sub {
  ok( $mb = $dist->new_from_context,
    "Build.PL with c_source"
  );
});
is( $mb->c_source, 'src', "c_source is set" );
ok( $mb->needs_compiler, "needs_compiler is true" );
ok( exists $mb->{properties}{build_requires}{'ExtUtils::CBuilder'},
  "ExtUtils::CBuilder was added to build_requires"
);

#--------------------------------------------------------------------------#
# try with xs files
#--------------------------------------------------------------------------#
$dist = DistGen->new(dir => 'MBTest', xs => 1);
$dist->regen;
$dist->chdir_in;

stderr_of(sub {
  ok( $mb = $dist->new_from_context,
    "Build.PL with xs files"
  );
});
ok( $mb->needs_compiler, "needs_compiler is true" );
ok( exists $mb->{properties}{build_requires}{'ExtUtils::CBuilder'},
  "ExtUtils::CBuilder was added to build_requires"
);

#--------------------------------------------------------------------------#
# force needs_compiler off, despite xs modules
#--------------------------------------------------------------------------#

$dist->change_build_pl({
    module_name => $dist->name,
    license => 'perl',
    needs_compiler => 0,
});
$dist->regen;

stderr_of(sub {
  ok( $mb = $dist->new_from_context ,
    "Build.PL with xs files, but needs_compiler => 0"
  );
});
is( $mb->needs_compiler, 0, "needs_compiler is false" );
ok( ! exists $mb->{properties}{build_requires}{'ExtUtils::CBuilder'},
  "ExtUtils::CBuilder is not in build_requires"
);

#--------------------------------------------------------------------------#
# don't override specific EU::CBuilder build_requires
#--------------------------------------------------------------------------#

$dist->change_build_pl({
    module_name => $dist->name,
    license => 'perl',
    build_requires => { 'ExtUtils::CBuilder' => 0.2 },
});
$dist->regen;

stderr_of(sub {
  ok( $mb = $dist->new_from_context ,
    "Build.PL with xs files, build_requires EU::CB 0.2"
  );
});
ok( $mb->needs_compiler, "needs_compiler is true" );
is( $mb->build_requires->{'ExtUtils::CBuilder'}, 0.2,
  "build_requires for ExtUtils::CBuilder is correct version"
);

#--------------------------------------------------------------------------#
# falsify compiler and test error handling
#--------------------------------------------------------------------------#

# clear $ENV{CC} so we are sure to fail to find our fake compiler :-)
local $ENV{CC};

my $err = stderr_of( sub {
    $mb = $dist->new_from_context( config => { cc => "adfasdfadjdjk" } )
});
ok( $mb, "Build.PL while hiding compiler" );
like( $err, qr/no compiler detected/,
  "hidden compiler resulted in warning message during Build.PL"
);
eval { $mb->dispatch('build') };
like( $@@, qr/no compiler detected/,
  "hidden compiler resulted in fatal message during Build"
);


# vim:ts=2:sw=2:et:sta:sts=2
@


1.1.1.1
log
@Perl 5.12.2 from CPAN
@
text
@@
