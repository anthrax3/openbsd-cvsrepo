head	1.1;
branch	1.1.1;
access;
symbols
	OPENBSD_6_0:1.1.1.1.0.26
	OPENBSD_6_0_BASE:1.1.1.1
	OPENBSD_5_9:1.1.1.1.0.20
	OPENBSD_5_9_BASE:1.1.1.1
	OPENBSD_5_8:1.1.1.1.0.22
	OPENBSD_5_8_BASE:1.1.1.1
	PERL_5_20_2:1.1.1.1
	OPENBSD_5_7:1.1.1.1.0.14
	OPENBSD_5_7_BASE:1.1.1.1
	PERL_5_20_1:1.1.1.1
	OPENBSD_5_6:1.1.1.1.0.18
	OPENBSD_5_6_BASE:1.1.1.1
	PERL_5_18_2:1.1.1.1
	PERL:1.1.1
	OPENBSD_5_5:1.1.1.1.0.16
	OPENBSD_5_5_BASE:1.1.1.1
	OPENBSD_5_4:1.1.1.1.0.12
	OPENBSD_5_4_BASE:1.1.1.1
	PERL_5_16_3:1.1.1.1
	OPENBSD_5_3:1.1.1.1.0.10
	OPENBSD_5_3_BASE:1.1.1.1
	OPENBSD_5_2:1.1.1.1.0.8
	OPENBSD_5_2_BASE:1.1.1.1
	OPENBSD_5_1_BASE:1.1.1.1
	OPENBSD_5_1:1.1.1.1.0.6
	OPENBSD_5_0:1.1.1.1.0.4
	OPENBSD_5_0_BASE:1.1.1.1
	OPENBSD_4_9:1.1.1.1.0.2
	OPENBSD_4_9_BASE:1.1.1.1
	PERL_5_12_2:1.1.1.1
	CPAN:1.1.1;
locks; strict;
comment	@# @;
expand	@o@;


1.1
date	2010.09.24.14.49.00;	author millert;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	2010.09.24.14.49.00;	author millert;	state Exp;
branches;
next	;


desc
@@


1.1
log
@Initial revision
@
text
@=head1 A GUIDE TO WRITING TESTS FOR MODULE::BUILD

This document provides tips on writing new tests for Module::Build.  Please
note that many existing tests were written prior to these guidelines and
have many different styles.  Please don't copy/paste old tests by rote without
considering better ways to test. See C<sample.t> for a starter test file.

=head1 TEST FILE PREAMBLE

Every Module::Build test should begin with the same preamble to ensure that the
test library is set properly and that the correct version of Module::Build is
being tested.

  use strict;
  use lib 't/lib';
  use MBTest tests => 2; # or 'no_plan'

  blib_load('Module::Build');

The C<MBTest> module is in C<t/lib/> and subclasses Test::More.  When loaded
it cleans up several environment variables that could cause problems,
tweaks C<@@INC> and exports several helper functions.  See that module for
details.

=head1 CREATING A TEST DISTRIBUTION

The C<DistGen> module in C<t/lib/> should be used to create sample
distributions for testing.  It provides numerous helpful methods to
create a skeleton distribution, add files, change files, and so on.
Run C<perldoc> on C<t/lib/DistGen.pm> to see the documentation.

  # CREATE A TEST DISTRIBUTION

  use DistGen;

  # create dist object in a temp directory
  my $dist = DistGen->new;

  # enter the test distribution directory before further testing
  $dist->chdir_in;

  # generate the skeleton files
  $dist->regen;


=head1 GETTING A MODULE::BUILD OBJECT

From inside the test distribution, you can get the Module::Build object
configured in Build.PL using the C<new_from_context> method on the
dist object.  This is just like Module::Build's C<new_from_context> except
it passes C<< quiet => 1 >> to avoid sending output to the terminal.
Use the Module::Build object to test the programmatic API.

  my $mb = $dist->new_from_context( quiet => 1 );
  isa_ok( $mb, "Module::Build" );
  is( $mb->dist_name, "Simple", "dist_name is 'Simple'" );

=head1 TESTING THE COMMAND LINE API

The command line API is tested by running subprocesses, not via a Module::Build
object.  The C<DistGen> object has helper methods for running C<Build.PL> and
C<Build> and passing arguments on the command line.

  $dist->run_build_pl( '--quiet' );
  $dist->run_build( 'test' );

=head1 TYPICAL TESTING CYCLE

The typical testing cycle is to generate or modify a test distribution, either
through the C<DistGen> object or directly in the filesystem, then regenerate
the distribution and test it (or run command line tests and observe the
result.)

  # Modify the distribution

  $dist->change_build_pl(
    {
      module_name   => $dist->name,
      license       => 'artistic',
    }
  );
  $dist->regen;

  # Get a new build object and test it

  $mb = $dist->new_from_context;
  is( $mb->license, "artistic", "saw 'artistic' license" );


=head1 COPYRIGHT

This documentation is Copyright (C) 2009 by David Golden.  You can redistribute
it and/or modify it under the same terms as Perl 5.10.0.

@


1.1.1.1
log
@Perl 5.12.2 from CPAN
@
text
@@
