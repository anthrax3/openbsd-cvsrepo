head	1.4;
access;
symbols
	OPENBSD_5_6:1.3.0.8
	OPENBSD_5_6_BASE:1.3
	PERL_5_18_2:1.1.1.2
	PERL:1.1.1
	OPENBSD_5_5:1.3.0.6
	OPENBSD_5_5_BASE:1.3
	OPENBSD_5_4:1.3.0.2
	OPENBSD_5_4_BASE:1.3
	PERL_5_16_3:1.1.1.2
	OPENBSD_5_3:1.2.0.8
	OPENBSD_5_3_BASE:1.2
	OPENBSD_5_2:1.2.0.6
	OPENBSD_5_2_BASE:1.2
	OPENBSD_5_1_BASE:1.2
	OPENBSD_5_1:1.2.0.4
	OPENBSD_5_0:1.2.0.2
	OPENBSD_5_0_BASE:1.2
	OPENBSD_4_9:1.1.1.1.0.2
	OPENBSD_4_9_BASE:1.1.1.1
	PERL_5_12_2:1.1.1.1
	CPAN:1.1.1;
locks; strict;
comment	@# @;
expand	@o@;


1.4
date	2014.11.17.20.57.01;	author afresh1;	state dead;
branches;
next	1.3;
commitid	QP75iYx42Uo7mMxO;

1.3
date	2013.03.25.20.40.50;	author sthen;	state Exp;
branches;
next	1.2;

1.2
date	2011.04.18.08.27.57;	author jasper;	state Exp;
branches;
next	1.1;

1.1
date	2010.09.24.14.49.03;	author millert;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	2010.09.24.14.49.03;	author millert;	state Exp;
branches;
next	1.1.1.2;

1.1.1.2
date	2013.03.25.20.07.47;	author sthen;	state Exp;
branches;
next	;


desc
@@


1.4
log
@Fix merge conflicts, remove extra files, match upstream perl-5.20.1

ok deraadt@@ sthen@@ espie@@ miod@@
@
text
@#!./perl

BEGIN {
    unless (-d 'blib') {
	chdir 't' if -d 't';
	@@INC = '../lib';
	require Config; import Config;
	keys %Config; # Silence warning
	if ($Config{extensions} !~ /\bList\/Util\b/) {
	    print "1..0 # Skip: List::Util was not built\n";
	    exit 0;
	}
    }
}

use strict;
use Test::More tests => 10;
use List::Util qw(min);

my $v;

ok(defined &min, 'defined');

$v = min(9);
is($v, 9, 'single arg');

$v = min (1,2);
is($v, 1, '2-arg ordered');

$v = min(2,1);
is($v, 1, '2-arg reverse ordered');

my @@a = map { rand() } 1 .. 20;
my @@b = sort { $a <=> $b } @@a;
$v = min(@@a);
is($v, $b[0], '20-arg random order');

my $one = Foo->new(1);
my $two = Foo->new(2);
my $thr = Foo->new(3);

$v = min($one,$two,$thr);
is($v, 1, 'overload');

$v = min($thr,$two,$one);
is($v, 1, 'overload');

{ package Foo;

use overload
  '""' => sub { ${$_[0]} },
  '+0' => sub { ${$_[0]} },
  '<'  => sub { ${$_[0]} < ${$_[1]} },
  fallback => 1;
  sub new {
    my $class = shift;
    my $value = shift;
    bless \$value, $class;
  }
}

use Math::BigInt;

my $v1 = Math::BigInt->new(2) ** Math::BigInt->new(65);
my $v2 = $v1 - 1;
my $v3 = $v2 - 1;
$v = min($v1,$v2,$v1,$v3,$v1);
is($v, $v3, 'bigint');

$v = min($v1, 1, 2, 3);
is($v, 1, 'bigint and normal int');

$v = min(1, 2, $v1, 3);
is($v, 1, 'bigint and normal int');

@


1.3
log
@merge/resolve conflicts
(some more to do after this one)
@
text
@@


1.2
log
@- update List::Util to 1.23, as needed by newer p5-POE

tested in bulk build.
ok millert@@
@
text
@d17 1
a17 1
use Test::More tests => 8;
d62 13
a74 2
SKIP: {
  eval { require bignum; } or skip("Need bignum for testing overloading",1);
a75 6
  my $v1 = 2**65;
  my $v2 = $v1 - 1;
  my $v3 = $v2 - 1;
  $v = min($v1,$v2,$v1,$v3,$v1);
  is($v, $v3, 'bigint');
}
@


1.1
log
@Initial revision
@
text
@d53 1
@


1.1.1.1
log
@Perl 5.12.2 from CPAN
@
text
@@


1.1.1.2
log
@import perl 5.16.3 from CPAN - worked on by Andrew Fresh and myself
@
text
@d17 1
a17 1
use Test::More tests => 10;
a52 1
  '<'  => sub { ${$_[0]} < ${$_[1]} },
d61 2
a62 13
use Math::BigInt;

my $v1 = Math::BigInt->new(2) ** Math::BigInt->new(65);
my $v2 = $v1 - 1;
my $v3 = $v2 - 1;
$v = min($v1,$v2,$v1,$v3,$v1);
is($v, $v3, 'bigint');

$v = min($v1, 1, 2, 3);
is($v, 1, 'bigint and normal int');

$v = min(1, 2, $v1, 3);
is($v, 1, 'bigint and normal int');
d64 6
@

