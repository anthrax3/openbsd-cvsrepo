head	1.2;
access;
symbols
	OPENBSD_6_2:1.2.0.2
	OPENBSD_6_2_BASE:1.2
	PERL_5_24_2:1.1.1.5
	OPENBSD_6_1:1.2.0.4
	OPENBSD_6_1_BASE:1.2
	OPENBSD_6_0:1.1.1.4.0.10
	OPENBSD_6_0_BASE:1.1.1.4
	OPENBSD_5_9:1.1.1.4.0.4
	OPENBSD_5_9_BASE:1.1.1.4
	OPENBSD_5_8:1.1.1.4.0.6
	OPENBSD_5_8_BASE:1.1.1.4
	PERL_5_20_2:1.1.1.4
	OPENBSD_5_7:1.1.1.4.0.2
	OPENBSD_5_7_BASE:1.1.1.4
	PERL_5_20_1:1.1.1.4
	OPENBSD_5_6:1.1.1.3.0.4
	OPENBSD_5_6_BASE:1.1.1.3
	PERL_5_18_2:1.1.1.3
	PERL:1.1.1
	OPENBSD_5_5:1.1.1.2.0.6
	OPENBSD_5_5_BASE:1.1.1.2
	OPENBSD_5_4:1.1.1.2.0.2
	OPENBSD_5_4_BASE:1.1.1.2
	PERL_5_16_3:1.1.1.2
	OPENBSD_5_3:1.1.1.1.0.10
	OPENBSD_5_3_BASE:1.1.1.1
	OPENBSD_5_2:1.1.1.1.0.8
	OPENBSD_5_2_BASE:1.1.1.1
	OPENBSD_5_1_BASE:1.1.1.1
	OPENBSD_5_1:1.1.1.1.0.6
	OPENBSD_5_0:1.1.1.1.0.4
	OPENBSD_5_0_BASE:1.1.1.1
	OPENBSD_4_9:1.1.1.1.0.2
	OPENBSD_4_9_BASE:1.1.1.1
	PERL_5_12_2:1.1.1.1
	CPAN:1.1.1;
locks; strict;
comment	@# @;
expand	@o@;


1.2
date	2017.02.05.00.32.00;	author afresh1;	state Exp;
branches;
next	1.1;
commitid	cxJ08BvJA9Pt2PTM;

1.1
date	2010.09.24.14.49.03;	author millert;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	2010.09.24.14.49.03;	author millert;	state Exp;
branches;
next	1.1.1.2;

1.1.1.2
date	2013.03.25.20.07.47;	author sthen;	state Exp;
branches;
next	1.1.1.3;

1.1.1.3
date	2014.03.24.14.58.53;	author afresh1;	state Exp;
branches;
next	1.1.1.4;

1.1.1.4
date	2014.11.17.20.52.48;	author afresh1;	state Exp;
branches;
next	1.1.1.5;
commitid	B31cAbBIXiCqnL97;

1.1.1.5
date	2017.08.14.13.45.39;	author afresh1;	state Exp;
branches;
next	;
commitid	fAzrs78vdW2Yfc6A;


desc
@@


1.2
log
@Fix merge issues, remove excess files - match perl-5.24.1 dist
@
text
@=pod

=head1 NAME

Locale::Script - standard codes for script identification

=head1 SYNOPSIS

   use Locale::Script;

   $script  = code2script('phnx');                     # 'Phoenician'
   $code    = script2code('Phoenician');               # 'Phnx'
   $code    = script2code('Phoenician',
                          LOCALE_CODE_NUMERIC);        # 115

   @@codes   = all_script_codes();
   @@scripts = all_script_names();

=head1 DESCRIPTION

This module provides access to standards codes used
for identifying scripts, such as those defined in ISO 15924.

Most of the routines take an optional additional argument which
specifies the code set to use. If not specified, the default ISO
15924 four-letter codes will be used.

=head1 SUPPORTED CODE SETS

There are several different code sets you can use for identifying
scripts. A code set may be specified using either a name, or a
constant that is automatically exported by this module.

For example, the two are equivalent:

   $script = code2script('phnx','alpha');
   $script = code2script('phnx',LOCALE_SCRIPT_ALPHA);

The codesets currently supported are:

=over 4

=item B<alpha, LOCALE_SCRIPT_ALPHA>

This is a set of four-letter (capitalized) codes from ISO 15924
such as 'Phnx' for Phoenician.  It also includes additions to this
set included in the IANA language registry.

The Zxxx, Zyyy, and Zzzz codes are not used.

This is the default code set.

=item B<num, LOCALE_SCRIPT_NUMERIC>

This is a set of three-digit numeric codes from ISO 15924 such as 115
for Phoenician.

=back

=head1 ROUTINES

=over 4

=item B<code2script(CODE [,CODESET] [,'retired'])>

=item B<script2code(NAME [,CODESET] [,'retired'])>

=item B<script_code2code(CODE ,CODESET ,CODESET2)>

=item B<all_script_codes([CODESET] [,'retired'])>

=item B<all_script_names([CODESET] [,'retired'])>

=item B<Locale::Script::rename_script(CODE ,NEW_NAME [,CODESET])>

=item B<Locale::Script::add_script(CODE ,NAME [,CODESET])>

=item B<Locale::Script::delete_script(CODE [,CODESET])>

=item B<Locale::Script::add_script_alias(NAME ,NEW_NAME)>

=item B<Locale::Script::delete_script_alias(NAME)>

=item B<Locale::Script::rename_script_code(CODE ,NEW_CODE [,CODESET])>

=item B<Locale::Script::add_script_code_alias(CODE ,NEW_CODE [,CODESET])>

=item B<Locale::Script::delete_script_code_alias(CODE [,CODESET])>

These routines are all documented in the L<Locale::Codes::API> man page.

=back

=head1 SEE ALSO

=over 4

=item L<Locale::Codes>

The Locale-Codes distribution.

=item L<Locale::Codes::API>

The list of functions supported by this module.

=item L<http://www.unicode.org/iso15924/>

Home page for ISO 15924.

=item L<http://www.iana.org/assignments/language-subtag-registry>

The IANA language subtag registry.

=back

=head1 AUTHOR

See Locale::Codes for full author history.

Currently maintained by Sullivan Beck (sbeck@@cpan.org).

=head1 COPYRIGHT

   Copyright (c) 1997-2001 Canon Research Centre Europe (CRE).
   Copyright (c) 2001-2010 Neil Bowers
   Copyright (c) 2010-2015 Sullivan Beck

This module is free software; you can redistribute it and/or
modify it under the same terms as Perl itself.

=cut
@


1.1
log
@Initial revision
@
text
@d1 1
d5 1
a5 1
Locale::Script - ISO codes for script identification (ISO 15924)
d9 1
a9 13
    use Locale::Script;
    use Locale::Constants;
    
    $script  = code2script('ph');                       # 'Phoenician'
    $code    = script2code('Tibetan');                  # 'bo'
    $code3   = script2code('Tibetan',
                           LOCALE_CODE_ALPHA_3);        # 'bod'
    $codeN   = script2code('Tibetan',
                           LOCALE_CODE_ALPHA_NUMERIC);  # 330
    
    @@codes   = all_script_codes();
    @@scripts = all_script_names();
    
d11 4
a14 1
=head1 DESCRIPTION
d16 2
a17 8
The C<Locale::Script> module provides access to the ISO
codes for identifying scripts, as defined in ISO 15924.
For example, Egyptian hieroglyphs are denoted by the two-letter
code 'eg', the three-letter code 'egy', and the numeric code 050.

You can either access the codes via the conversion routines
(described below), or with the two functions which return lists
of all script codes or all script names.
d19 1
a19 52
There are three different code sets you can use for identifying
scripts:

=over 4

=item B<alpha-2>

Two letter codes, such as 'bo' for Tibetan.
This code set is identified with the symbol C<LOCALE_CODE_ALPHA_2>.

=item B<alpha-3>

Three letter codes, such as 'ell' for Greek.
This code set is identified with the symbol C<LOCALE_CODE_ALPHA_3>.

=item B<numeric>

Numeric codes, such as 410 for Hiragana.
This code set is identified with the symbol C<LOCALE_CODE_NUMERIC>.

=back

All of the routines take an optional additional argument
which specifies the code set to use.
If not specified, it defaults to the two-letter codes.
This is partly for backwards compatibility (previous versions
of Locale modules only supported the alpha-2 codes), and
partly because they are the most widely used codes.

The alpha-2 and alpha-3 codes are not case-dependent,
so you can use 'BO', 'Bo', 'bO' or 'bo' for Tibetan.
When a code is returned by one of the functions in
this module, it will always be lower-case.

=head2 SPECIAL CODES

The standard defines various special codes.

=over 4

=item *

The standard reserves codes in the ranges B<qa> - B<qt>,
B<qaa> - B<qat>, and B<900> - B<919>, for private use.

=item *

B<zx>, B<zxx>, and B<997>, are the codes for unwritten languages.

=item *

B<zy>, B<zyy>, and B<998>, are the codes for an undetermined script.
d21 2
a22 1
=item *
d24 3
a26 1
B<zz>, B<zzz>, and B<999>, are the codes for an uncoded script.
d28 1
a28 1
=back
d30 3
a32 2
The private codes are not recognised by Locale::Script,
but the others are.
d34 1
d36 2
a37 1
=head1 CONVERSION ROUTINES
d39 1
a39 2
There are three conversion routines: C<code2script()>, C<script2code()>,
and C<script_code2code()>.
d43 1
a43 18
=item code2script( CODE, [ CODESET ] )

This function takes a script code and returns a string
which contains the name of the script identified.
If the code is not a valid script code, as defined by ISO 15924,
then C<undef> will be returned:

    $script = code2script('cy');   # Cyrillic

=item script2code( STRING, [ CODESET ] )

This function takes a script name and returns the corresponding
script code, if such exists.
If the argument could not be identified as a script name,
then C<undef> will be returned:

    $code = script2code('Gothic', LOCALE_CODE_ALPHA_3);
    # $code will now be 'gth'
d45 3
a47 2
The case of the script name is not important.
See the section L<KNOWN BUGS AND LIMITATIONS> below.
d49 1
a49 1
=item script_code2code( CODE, CODESET, CODESET )
d51 1
a51 2
This function takes a script code from one code set,
and returns the corresponding code from another code set.
d53 1
a53 3
    $alpha2 = script_code2code('jwi',
		 LOCALE_CODE_ALPHA_3 => LOCALE_CODE_ALPHA_2);
    # $alpha2 will now be 'jw' (Javanese)
d55 2
a56 4
If the code passed is not a valid script code in
the first code set, or if there isn't a code for the
corresponding script in the second code set,
then C<undef> will be returned.
d60 1
a60 5

=head1 QUERY ROUTINES

There are two function which can be used to obtain a list of all codes,
or all script names:
d64 1
a64 5
=item C<all_script_codes ( [ CODESET ] )>

Returns a list of all two-letter script codes.
The codes are guaranteed to be all lower-case,
and not in any particular order.
d66 1
a66 1
=item C<all_script_names ( [ CODESET ] )>
d68 1
a68 5
Returns a list of all script names for which there is a corresponding
script code in the specified code set.
The names are capitalised, and not returned in any particular order.

=back
d70 1
d72 1
a72 1
=head1 EXAMPLES
d74 1
a74 17
The following example illustrates use of the C<code2script()> function.
The user is prompted for a script code, and then told the corresponding
script name:

    $| = 1;   # turn off buffering
    
    print "Enter script code: ";
    chop($code = <STDIN>);
    $script = code2script($code, LOCALE_CODE_ALPHA_2);
    if (defined $script)
    {
        print "$code = $script\n";
    }
    else
    {
        print "'$code' is not a valid script code!\n";
    }
d76 1
d78 1
a78 1
=head1 KNOWN BUGS AND LIMITATIONS
d80 1
a80 1
=over 4
d82 1
a82 1
=item *
d84 1
a84 2
When using C<script2code()>, the script name must currently appear
exactly as it does in the source of the module. For example,
d86 1
a86 1
    script2code('Egyptian hieroglyphs')
d88 1
a88 1
will return B<eg>, as expected. But the following will all return C<undef>:
d90 1
a90 11
    script2code('hieroglyphs')
    script2code('Egyptian Hieroglypics')

If there's need for it, a future version could have variants
for script names.

=item *

In the current implementation, all data is read in when the
module is loaded, and then held in memory.
A lazy implementation would be more memory friendly.
d98 1
a98 1
=item Locale::Language
d100 1
a100 1
ISO two letter codes for identification of language (ISO 639).
d102 1
a102 1
=item Locale::Currency
d104 1
a104 2
ISO three letter codes for identification of currencies
and funds (ISO 4217).
d106 1
a106 1
=item Locale::Country
d108 1
a108 3
ISO three letter codes for identification of countries (ISO 3166)

=item ISO 15924
d110 1
a110 5
The ISO standard which defines these codes.

=item http://www.evertype.com/standards/iso15924/

Home page for ISO 15924.
d112 1
d116 1
d118 1
a118 1
=head1 AUTHOR
d120 1
a120 1
Neil Bowers E<lt>neil@@bowers.comE<gt>
d124 3
a126 1
Copyright (c) 2002-2004 Neil Bowers.
a131 1

@


1.1.1.1
log
@Perl 5.12.2 from CPAN
@
text
@@


1.1.1.2
log
@import perl 5.16.3 from CPAN - worked on by Andrew Fresh and myself
@
text
@a0 1
=pod
d4 1
a4 1
Locale::Script - standard codes for script identification
d8 13
a20 1
   use Locale::Script;
d22 17
a38 4
   $script  = code2script('phnx');                     # 'Phoenician'
   $code    = script2code('Phoenician');               # 'Phnx'
   $code    = script2code('Phoenician',
                          LOCALE_CODE_NUMERIC);        # 115
d40 14
a53 2
   @@codes   = all_script_codes();
   @@scripts = all_script_names();
d55 30
a84 1
=head1 DESCRIPTION
d86 1
a86 2
The C<Locale::Script> module provides access to standards codes used
for identifying scripts, such as those defined in ISO 15924.
d88 1
a88 3
Most of the routines take an optional additional argument which
specifies the code set to use. If not specified, the default ISO
15924 four-letter codes will be used.
d90 1
a90 1
=head1 SUPPORTED CODE SETS
d92 2
a93 3
There are several different code sets you can use for identifying
scripts. A code set may be specified using either a name, or a
constant that is automatically exported by this module.
a94 1
For example, the two are equivalent:
d96 1
a96 2
   $script = code2script('phnx','alpha');
   $script = code2script('phnx',LOCALE_SCRIPT_ALPHA);
d98 2
a99 1
The codesets currently supported are:
d103 18
a120 1
=item B<alpha, LOCALE_SCRIPT_ALPHA>
d122 2
a123 3
This is a set of four-letter (capitalized) codes from ISO 15924
such as 'Phnx' for Phoenician.  It also includes additions to this
set included in the IANA language registry.
d125 1
a125 1
The Zxxx, Zyyy, and Zzzz codes are not used.
d127 2
a128 1
This is the default code set.
d130 3
a132 1
=item B<num, LOCALE_SCRIPT_NUMERIC>
d134 4
a137 2
This is a set of three-digit numeric codes from ISO 15924 such as 115
for Phoenician.
d141 5
a145 1
=head1 ROUTINES
d149 5
a153 1
=item B<code2script ( CODE [,CODESET] )>
d155 1
a155 1
=item B<script2code ( NAME [,CODESET] )>
d157 5
a161 1
=item B<script_code2code ( CODE ,CODESET ,CODESET2 )>
a162 1
=item B<all_script_codes ( [CODESET] )>
d164 1
a164 1
=item B<all_script_names ( [CODESET] )>
d166 17
a182 1
=item B<Locale::Script::rename_script  ( CODE ,NEW_NAME [,CODESET] )>
a183 1
=item B<Locale::Script::add_script  ( CODE ,NAME [,CODESET] )>
d185 1
a185 1
=item B<Locale::Script::delete_script  ( CODE [,CODESET] )>
d187 1
a187 1
=item B<Locale::Script::add_script_alias  ( NAME ,NEW_NAME )>
d189 1
a189 1
=item B<Locale::Script::delete_script_alias  ( NAME )>
d191 2
a192 1
=item B<Locale::Script::rename_script_code  ( CODE ,NEW_CODE [,CODESET] )>
d194 1
a194 1
=item B<Locale::Script::add_script_code_alias  ( CODE ,NEW_CODE [,CODESET] )>
d196 1
a196 1
=item B<Locale::Script::delete_script_code_alias  ( CODE [,CODESET] )>
d198 11
a208 1
These routines are all documented in the Locale::Codes::API man page.
d216 8
a223 1
=item B<Locale::Codes>
d225 1
a225 1
The Locale-Codes distribution.
d227 1
a227 1
=item B<Locale::Codes::API>
d229 1
a229 1
The list of functions supported by this module.
d231 3
a233 1
=item B<http://www.unicode.org/iso15924/>
a236 1
=item B<http://www.iana.org/assignments/language-subtag-registry>
d238 1
a238 1
The IANA language subtag registry.
a239 1
=back
d243 1
a243 3
See Locale::Codes for full author history.

Currently maintained by Sullivan Beck (sbeck@@cpan.org).
d247 1
a247 3
   Copyright (c) 1997-2001 Canon Research Centre Europe (CRE).
   Copyright (c) 2001-2010 Neil Bowers
   Copyright (c) 2010-2012 Sullivan Beck
d253 1
@


1.1.1.3
log
@Import perl-5.18.2

OK espie@@ sthen@@ deraadt@@
@
text
@d126 1
a126 1
   Copyright (c) 2010-2013 Sullivan Beck
@


1.1.1.4
log
@Import perl-5.20.1
@
text
@d126 1
a126 1
   Copyright (c) 2010-2014 Sullivan Beck
@


1.1.1.5
log
@Import perl-5.24.2
@
text
@d21 1
a21 1
This module provides access to standards codes used
d64 1
a64 1
=item B<code2script(CODE [,CODESET] [,'retired'])>
d66 1
a66 1
=item B<script2code(NAME [,CODESET] [,'retired'])>
d68 1
a68 1
=item B<script_code2code(CODE ,CODESET ,CODESET2)>
d70 1
a70 1
=item B<all_script_codes([CODESET] [,'retired'])>
d72 1
a72 1
=item B<all_script_names([CODESET] [,'retired'])>
d74 1
a74 1
=item B<Locale::Script::rename_script(CODE ,NEW_NAME [,CODESET])>
d76 1
a76 1
=item B<Locale::Script::add_script(CODE ,NAME [,CODESET])>
d78 1
a78 1
=item B<Locale::Script::delete_script(CODE [,CODESET])>
d80 1
a80 1
=item B<Locale::Script::add_script_alias(NAME ,NEW_NAME)>
d82 1
a82 1
=item B<Locale::Script::delete_script_alias(NAME)>
d84 1
a84 1
=item B<Locale::Script::rename_script_code(CODE ,NEW_CODE [,CODESET])>
d86 1
a86 1
=item B<Locale::Script::add_script_code_alias(CODE ,NEW_CODE [,CODESET])>
d88 1
a88 1
=item B<Locale::Script::delete_script_code_alias(CODE [,CODESET])>
d90 1
a90 1
These routines are all documented in the L<Locale::Codes::API> man page.
d98 1
a98 1
=item L<Locale::Codes>
d102 1
a102 1
=item L<Locale::Codes::API>
d106 1
a106 1
=item L<http://www.unicode.org/iso15924/>
d110 1
a110 1
=item L<http://www.iana.org/assignments/language-subtag-registry>
d126 1
a126 1
   Copyright (c) 2010-2015 Sullivan Beck
@


