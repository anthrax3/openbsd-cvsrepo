head	1.2;
access;
symbols
	OPENBSD_6_2_BASE:1.2
	PERL_5_24_2:1.1.1.5
	OPENBSD_6_1:1.2.0.4
	OPENBSD_6_1_BASE:1.2
	OPENBSD_6_0:1.1.1.4.0.10
	OPENBSD_6_0_BASE:1.1.1.4
	OPENBSD_5_9:1.1.1.4.0.4
	OPENBSD_5_9_BASE:1.1.1.4
	OPENBSD_5_8:1.1.1.4.0.6
	OPENBSD_5_8_BASE:1.1.1.4
	PERL_5_20_2:1.1.1.4
	OPENBSD_5_7:1.1.1.4.0.2
	OPENBSD_5_7_BASE:1.1.1.4
	PERL_5_20_1:1.1.1.4
	OPENBSD_5_6:1.1.1.3.0.4
	OPENBSD_5_6_BASE:1.1.1.3
	PERL_5_18_2:1.1.1.3
	PERL:1.1.1
	OPENBSD_5_5:1.1.1.2.0.6
	OPENBSD_5_5_BASE:1.1.1.2
	OPENBSD_5_4:1.1.1.2.0.2
	OPENBSD_5_4_BASE:1.1.1.2
	PERL_5_16_3:1.1.1.2
	OPENBSD_5_3:1.1.1.1.0.10
	OPENBSD_5_3_BASE:1.1.1.1
	OPENBSD_5_2:1.1.1.1.0.8
	OPENBSD_5_2_BASE:1.1.1.1
	OPENBSD_5_1_BASE:1.1.1.1
	OPENBSD_5_1:1.1.1.1.0.6
	OPENBSD_5_0:1.1.1.1.0.4
	OPENBSD_5_0_BASE:1.1.1.1
	OPENBSD_4_9:1.1.1.1.0.2
	OPENBSD_4_9_BASE:1.1.1.1
	PERL_5_12_2:1.1.1.1
	CPAN:1.1.1;
locks; strict;
comment	@# @;
expand	@o@;


1.2
date	2017.02.05.00.32.00;	author afresh1;	state Exp;
branches;
next	1.1;
commitid	cxJ08BvJA9Pt2PTM;

1.1
date	2010.09.24.14.49.03;	author millert;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	2010.09.24.14.49.03;	author millert;	state Exp;
branches;
next	1.1.1.2;

1.1.1.2
date	2013.03.25.20.07.47;	author sthen;	state Exp;
branches;
next	1.1.1.3;

1.1.1.3
date	2014.03.24.14.58.53;	author afresh1;	state Exp;
branches;
next	1.1.1.4;

1.1.1.4
date	2014.11.17.20.52.48;	author afresh1;	state Exp;
branches;
next	1.1.1.5;
commitid	B31cAbBIXiCqnL97;

1.1.1.5
date	2017.08.14.13.45.39;	author afresh1;	state Exp;
branches;
next	;
commitid	fAzrs78vdW2Yfc6A;


desc
@@


1.2
log
@Fix merge issues, remove excess files - match perl-5.24.1 dist
@
text
@=pod

=head1 NAME

Locale::Country - standard codes for country identification

=head1 SYNOPSIS

   use Locale::Country;

   $country = code2country('jp' [,CODESET]);        # $country gets 'Japan'
   $code    = country2code('Norway' [,CODESET]);    # $code gets 'no'

   @@codes   = all_country_codes( [CODESET]);
   @@names   = all_country_names();

   # semi-private routines
   Locale::Country::rename_country('gb' => 'Great Britain');

=head1 DESCRIPTION

This module provides access to several code sets
that can be used for identifying countries, such as those defined in
ISO 3166-1.

Most of the routines take an optional additional argument which
specifies the code set to use. If not specified, the default ISO
3166-1 two-letter codes will be used.

=head1 SUPPORTED CODE SETS

There are several different code sets you can use for identifying
countries. A code set may be specified using either a name, or a
constant that is automatically exported by this module.

For example, the two are equivalent:

   $country = code2country('jp','alpha-2');
   $country = code2country('jp',LOCALE_CODE_ALPHA_2);

The codesets currently supported are:

=over 4

=item B<alpha-2, LOCALE_CODE_ALPHA_2>

This is the set of two-letter (lowercase) codes from ISO 3166-1, such
as 'tv' for Tuvalu.

This is the default code set.

=item B<alpha-3, LOCALE_CODE_ALPHA_3>

This is the set of three-letter (lowercase) codes from ISO 3166-1,
such as 'brb' for Barbados. These codes are actually defined and
maintained by the U.N. Statistics division.

=item B<numeric, LOCALE_CODE_NUMERIC>

This is the set of three-digit numeric codes from ISO 3166-1, such as
064 for Bhutan. These codes are actually defined and maintained by the
U.N. Statistics division.

If a 2-digit code is entered, it is converted to 3 digits by prepending
a 0.

=item B<dom, LOCALE_CODE_DOM>

The IANA is responsible for delegating management of the top level country
domains.  The country domains are the two-letter (lowercase) codes from ISO 3166
with a few other additions.

=back

NOTE: As of version 3.27, the FIPS code set is no longer supported.  See the
Locale::Codes::Changes document for details.

=head1 ROUTINES

=over 4

=item B<code2country(CODE [,CODESET] [,'retired'])>

=item B<country2code(NAME [,CODESET] [,'retired'])>

=item B<country_code2code(CODE ,CODESET ,CODESET2)>

=item B<all_country_codes([CODESET] [,'retired'])>

=item B<all_country_names([CODESET] [,'retired'])>

=item B<Locale::Country::rename_country(CODE ,NEW_NAME [,CODESET])>

=item B<Locale::Country::add_country(CODE ,NAME [,CODESET])>

=item B<Locale::Country::delete_country(CODE [,CODESET])>

=item B<Locale::Country::add_country_alias(NAME ,NEW_NAME)>

=item B<Locale::Country::delete_country_alias(NAME)>

=item B<Locale::Country::rename_country_code(CODE ,NEW_CODE [,CODESET])>

=item B<Locale::Country::add_country_code_alias(CODE ,NEW_CODE [,CODESET])>

=item B<Locale::Country::delete_country_code_alias(CODE [,CODESET])>

These routines are all documented in the L<Locale::Codes::API> man page.

=back

=head1 SEE ALSO

=over 4

=item L<Locale::Codes>

The Locale-Codes distribution.

=item L<Locale::Codes::API>

The list of functions supported by this module.

=item L<Locale::SubCountry>

ISO codes for country sub-divisions (states, counties, provinces,
etc), as defined in ISO 3166-2.  This module is not part of the
Locale-Codes distribution, but is available from CPAN in
CPAN/modules/by-module/Locale/

=item L<http://www.iso.org/iso/home/standards/country_codes.htm>

Official home page for the ISO 3166 maintenance agency.

=item L<http://www.iso.org/iso/home/standards/country_codes/iso-3166-1_decoding_table.htm>

The source of ISO 3166-1 two-letter codes used by this
module.

=item L<http://www.iana.org/domains/root/db/>

Official source of the top-level domain names.

=item L<http://unstats.un.org/unsd/methods/m49/m49alpha.htm>

The source of the official ISO 3166-1 three-letter codes and
three-digit codes.

For some reason, this table is incomplete! Several countries are
missing from it, and I cannot find them anywhere on the UN site.  I
no longer use this as a source of data.

=item L<https://www.cia.gov/library/publications/the-world-factbook/appendix/print_appendix-d.html>

The World Factbook maintained by the CIA is a potential source of
the data.  Unfortunately, it adds/preserves non-standard codes, so it is no
longer used as a source of data.

=item L<http://www.statoids.com/wab.html>

Another unofficial source of data. Currently, it is not used to get
data, but the notes and explanatory material were very useful for
understanding discrepancies between the sources.

=back

=head1 AUTHOR

See Locale::Codes for full author history.

Currently maintained by Sullivan Beck (sbeck@@cpan.org).

=head1 COPYRIGHT

   Copyright (c) 1997-2001 Canon Research Centre Europe (CRE).
   Copyright (c) 2001-2010 Neil Bowers
   Copyright (c) 2010-2015 Sullivan Beck

This module is free software; you can redistribute it and/or
modify it under the same terms as Perl itself.

=cut
@


1.1
log
@Initial revision
@
text
@d1 1
d5 1
a5 1
Locale::Country - ISO codes for country identification (ISO 3166)
d9 1
a9 11
    use Locale::Country;
    
    $country = code2country('jp');        # $country gets 'Japan'
    $code    = country2code('Norway');    # $code gets 'no'
    
    @@codes   = all_country_codes();
    @@names   = all_country_names();
    
    # semi-private routines
    Locale::Country::alias_code('uk' => 'gb');
    Locale::Country::rename_country('gb' => 'Great Britain');
d11 2
d14 2
a15 1
=head1 DESCRIPTION
d17 2
a18 5
The C<Locale::Country> module provides access to the ISO
codes for identifying countries, as defined in ISO 3166-1.
You can either access the codes via the L<conversion routines>
(described below), or with the two functions which return lists
of all country codes or all country names.
d20 1
a20 6
There are three different code sets you can use for identifying
countries:

=over 4

=item B<alpha-2>
d22 3
a24 2
Two letter codes, such as 'tv' for Tuvalu.
This code set is identified with the symbol C<LOCALE_CODE_ALPHA_2>.
d26 3
a28 1
=item B<alpha-3>
d30 1
a30 2
Three letter codes, such as 'brb' for Barbados.
This code set is identified with the symbol C<LOCALE_CODE_ALPHA_3>.
d32 3
a34 1
=item B<numeric>
d36 1
a36 2
Numeric codes, such as 064 for Bhutan.
This code set is identified with the symbol C<LOCALE_CODE_NUMERIC>.
d38 2
a39 1
=back
d41 1
a41 25
All of the routines take an optional additional argument
which specifies the code set to use.
If not specified, it defaults to the two-letter codes.
This is partly for backwards compatibility (previous versions
of this module only supported the alpha-2 codes), and
partly because they are the most widely used codes.

The alpha-2 and alpha-3 codes are not case-dependent,
so you can use 'BO', 'Bo', 'bO' or 'bo' for Bolivia.
When a code is returned by one of the functions in
this module, it will always be lower-case.

As of version 2.00, Locale::Country supports variant
names for countries. So, for example, the country code for "United States"
is "us", so country2code('United States') returns 'us'.
Now the following will also return 'us':

    country2code('United States of America') 
    country2code('USA') 


=head1 CONVERSION ROUTINES

There are three conversion routines: C<code2country()>, C<country2code()>,
and C<country_code2code()>.
d45 1
a45 6
=item code2country( CODE, [ CODESET ] )

This function takes a country code and returns a string
which contains the name of the country identified.
If the code is not a valid country code, as defined by ISO 3166,
then C<undef> will be returned:
d47 2
a48 1
    $country = code2country('fi');
d50 1
a50 1
=item country2code( STRING, [ CODESET ] )
d52 1
a52 4
This function takes a country name and returns the corresponding
country code, if such exists.
If the argument could not be identified as a country name,
then C<undef> will be returned:
d54 3
a56 2
    $code = country2code('Norway', LOCALE_CODE_ALPHA_3);
    # $code will now be 'nor'
d58 1
a58 2
The case of the country name is not important.
See the section L<KNOWN BUGS AND LIMITATIONS> below.
d60 3
a62 1
=item country_code2code( CODE, CODESET, CODESET )
d64 2
a65 2
This function takes a country code from one code set,
and returns the corresponding code from another code set.
d67 1
a67 3
    $alpha2 = country_code2code('fin',
		 LOCALE_CODE_ALPHA_3, LOCALE_CODE_ALPHA_2);
    # $alpha2 will now be 'fi'
d69 3
a71 4
If the code passed is not a valid country code in
the first code set, or if there isn't a code for the
corresponding country in the second code set,
then C<undef> will be returned.
d75 2
d78 1
a78 4
=head1 QUERY ROUTINES

There are two function which can be used to obtain a list of all codes,
or all country names:
d82 1
a82 1
=item C<all_country_codes( [ CODESET ] )>
d84 1
a84 14
Returns a list of all two-letter country codes.
The codes are guaranteed to be all lower-case,
and not in any particular order.

=item C<all_country_names( [ CODESET ] )>

Returns a list of all country names for which there is a corresponding
country code in the specified code set.
The names are capitalised, and not returned in any particular order.

Not all countries have alpha-3 and numeric codes -
some just have an alpha-2 code,
so you'll get a different number of countries
depending on which code set you specify.
d86 1
a86 1
=back
d88 1
d90 1
a90 1
=head1 SEMI-PRIVATE ROUTINES
d92 1
a92 5
Locale::Country provides two semi-private routines for modifying
the internal data.
Given their status, they aren't exported by default,
and so need to be called by prefixing the function name with the
package name.
d94 1
a94 1
=head2 alias_code
d96 1
a96 1
Define a new code as an alias for an existing code:
d98 1
a98 1
    Locale::Country::alias_code( ALIAS => CODE [, CODESET ] )
d100 1
a100 3
This feature was added as a mechanism for handling
a "uk" code. The ISO standard says that the two-letter code for
"United Kingdom" is "gb", whereas domain names are all .uk.
d102 1
a102 3
By default the module does not understand "uk", since it is implementing
an ISO standard. If you would like 'uk' to work as the two-letter
code for United Kingdom, use the following:
d104 1
a104 1
    Locale::Country::alias_code('uk' => 'gb');
d106 1
a106 2
With this code, both "uk" and "gb" are valid codes for United Kingdom,
with the reverse lookup returning "uk" rather than the usual "gb".
d108 1
a108 4
B<Note:> this function was previously called _alias_code,
but the leading underscore has been dropped.
The old name will be supported for all 2.X releases for
backwards compatibility.
d110 1
a110 1
=head2 rename_country
d112 1
a112 45
If the official country name just isn't good enough for you,
you can rename a country. For example, the official country
name for code 'gb' is 'United Kingdom'.
If you want to change that, you might call:

    Locale::Country::rename_country('gb' => 'Great Britain');

This means that calling code2country('gb') will now return
'Great Britain' instead of 'United Kingdom'.
The original country name is retained as an alias,
so for the above example, country2code('United Kingdom')
will still return 'gb'.


=head1 EXAMPLES

The following example illustrates use of the C<code2country()> function.
The user is prompted for a country code, and then told the corresponding
country name:

    $| = 1;   # turn off buffering
    
    print "Enter country code: ";
    chop($code = <STDIN>);
    $country = code2country($code, LOCALE_CODE_ALPHA_2);
    if (defined $country)
    {
        print "$code = $country\n";
    }
    else
    {
        print "'$code' is not a valid country code!\n";
    }

=head1 DOMAIN NAMES

Most top-level domain names are based on these codes,
but there are certain codes which aren't.
If you are using this module to identify country from hostname,
your best bet is to preprocess the country code.

For example, B<edu>, B<com>, B<gov> and friends would map to B<us>;
B<uk> would map to B<gb>. Any others?

=head1 KNOWN BUGS AND LIMITATIONS
d116 1
a116 1
=item *
d118 1
a118 3
When using C<country2code()>, the country name must currently appear
exactly as it does in the source of the module. The module now supports
a small number of variants.
d120 1
a120 2
Possible extensions to this are: an interface for getting at the
list of variant names, and regular expression matches.
d122 1
a122 1
=item *
d124 1
a124 3
In the current implementation, all data is read in when the
module is loaded, and then held in memory.
A lazy implementation would be more memory friendly.
d126 4
a129 1
=item *
d131 1
a131 1
Support for country names in different languages.
d133 1
a133 5
=back

=head1 SEE ALSO

=over 4
d135 1
a135 1
=item Locale::Language
d137 2
a138 1
ISO two letter codes for identification of language (ISO 639).
d140 1
a140 1
=item Locale::Script
d142 1
a142 1
ISO codes for identification of scripts (ISO 15924).
d144 1
a144 1
=item Locale::Currency
d146 2
a147 2
ISO three letter codes for identification of currencies
and funds (ISO 4217).
d149 3
a151 1
=item Locale::SubCountry
d153 1
a153 4
ISO codes for country sub-divisions (states, counties, provinces, etc),
as defined in ISO 3166-2.
This module is not part of the Locale-Codes distribution,
but is available from CPAN in CPAN/modules/by-module/Locale/
d155 3
a157 1
=item ISO 3166-1
d159 1
a159 1
The ISO standard which defines these codes.
d161 3
a163 12
=item http://www.iso.org/iso/en/prods-services/iso3166ma/index.html

Official home page for the ISO 3166 maintenance agency.

=item http://www.egt.ie/standards/iso3166/iso3166-1-en.html

Another useful, but not official, home page.

=item http://www.cia.gov/cia/publications/factbook/docs/app-d-1.html

An appendix in the CIA world fact book which lists country codes
as defined by ISO 3166, FIPS 10-4, and internet domain names.
d167 1
d169 1
a169 1
=head1 AUTHOR
d171 1
a171 1
Neil Bowers E<lt>neil@@bowers.comE<gt>
d175 3
a177 3
Copyright (C) 2002-2004, Neil Bowers.

Copyright (c) 1997-2001 Canon Research Centre Europe (CRE).
a182 1

@


1.1.1.1
log
@Perl 5.12.2 from CPAN
@
text
@@


1.1.1.2
log
@import perl 5.16.3 from CPAN - worked on by Andrew Fresh and myself
@
text
@a0 1
=pod
d4 1
a4 1
Locale::Country - standard codes for country identification
d8 11
a18 1
   use Locale::Country;
a19 2
   $country = code2country('jp' [,CODESET]);        # $country gets 'Japan'
   $code    = country2code('Norway' [,CODESET]);    # $code gets 'no'
d21 19
a39 2
   @@codes   = all_country_codes( [CODESET]);
   @@names   = all_country_names();
d41 2
a42 3
   # semi-private routines
   Locale::Country::alias_code('uk' => 'gb');
   Locale::Country::rename_country('gb' => 'Great Britain');
d44 1
a44 1
=head1 DESCRIPTION
d46 2
a47 3
The C<Locale::Country> module provides access to several code sets
that can be used for identifying countries, such as those defined in
ISO 3166-1.
d49 1
a49 3
Most of the routines take an optional additional argument which
specifies the code set to use. If not specified, the default ISO
3166-1 two-letter codes will be used.
d51 16
a66 1
=head1 SUPPORTED CODE SETS
d68 2
a69 3
There are several different code sets you can use for identifying
countries. A code set may be specified using either a name, or a
constant that is automatically exported by this module.
a70 1
For example, the two are equivalent:
d72 1
a72 2
   $country = code2country('jp','alpha-2');
   $country = code2country('jp',LOCALE_CODE_ALPHA_2);
d74 2
a75 1
The codesets currently supported are:
d79 1
a79 1
=item B<alpha-2, LOCALE_CODE_ALPHA_2>
d81 4
a84 2
This is the set of two-letter (lowercase) codes from ISO 3166-1, such
as 'tv' for Tuvalu.
d86 1
a86 1
This is the default code set.
d88 1
a88 1
=item B<alpha-3, LOCALE_CODE_ALPHA_3>
d90 4
a93 3
This is the set of three-letter (lowercase) codes from ISO 3166-1,
such as 'brb' for Barbados. These codes are actually defined and
maintained by the U.N. Statistics division.
d95 2
a96 1
=item B<numeric, LOCALE_CODE_NUMERIC>
d98 2
a99 3
This is the set of three-digit numeric codes from ISO 3166-1, such as
064 for Bhutan. These codes are actually defined and maintained by the
U.N. Statistics division.
d101 1
a101 2
If a 2-digit code is entered, it is converted to 3 digits by prepending
a 0.
d103 2
a104 1
=item B<fips-10, LOCALE_CODE_FIPS>
d106 3
a108 2
The FIPS 10 data are two-letter (uppercase) codes assigned by the
National Geospatial-Intelligence Agency.
d110 6
a115 1
=item B<dom, LOCALE_CODE_DOM>
a116 2
The IANA is responsible for assigning two-letter (uppercase) top-level
domain names to each country.
d118 1
a118 1
=back
d120 2
a121 1
=head1 ROUTINES
d125 18
a142 1
=item B<code2country ( CODE [,CODESET] )>
a143 1
=item B<country2code ( NAME [,CODESET] )>
d145 1
a145 1
=item B<country_code2code ( CODE ,CODESET ,CODESET2 )>
d147 5
a151 1
=item B<all_country_codes ( [CODESET] )>
d153 1
a153 1
=item B<all_country_names ( [CODESET] )>
d155 1
a155 1
=item B<Locale::Country::rename_country  ( CODE ,NEW_NAME [,CODESET] )>
d157 1
a157 1
=item B<Locale::Country::add_country  ( CODE ,NAME [,CODESET] )>
d159 3
a161 1
=item B<Locale::Country::delete_country  ( CODE [,CODESET] )>
d163 3
a165 1
=item B<Locale::Country::add_country_alias  ( NAME ,NEW_NAME )>
d167 1
a167 1
=item B<Locale::Country::delete_country_alias  ( NAME )>
d169 2
a170 1
=item B<Locale::Country::rename_country_code  ( CODE ,NEW_CODE [,CODESET] )>
d172 4
a175 1
=item B<Locale::Country::add_country_code_alias  ( CODE ,NEW_CODE [,CODESET] )>
d177 1
a177 1
=item B<Locale::Country::delete_country_code_alias  ( CODE [,CODESET] )>
d179 4
a182 1
These routines are all documented in the Locale::Codes::API man page.
d184 1
a184 1
=item B<alias_code ( ALIAS, CODE [,CODESET] )>
d186 5
a190 3
Version 2.07 included 2 functions for modifying the internal data:
rename_country and alias_code. Both of these could be used only to
modify the internal data for country codes.
a191 1
As of 3.10, the internal data for all types of codes can be modified.
d193 1
a193 2
The alias_code function is preserved for backwards compatibility, but
the following two are identical:
d195 3
a197 2
   alias_code(ALIAS,CODE [,CODESET]);
   rename_country_code(CODE,ALIAS [,CODESET]);
d199 13
a211 1
and the latter should be used for consistency.
d213 1
a213 2
The alias_code function is deprecated and will be removed at some point
in the future.
d215 4
a218 3
B<Note:> this function was previously called _alias_code, but the
leading underscore has been dropped. The old name was supported for
all 2.X releases, but has been dropped as of 3.00.
d220 2
a221 1
=back
d223 1
a223 1
=head1 SEE ALSO
d227 8
a234 1
=item B<Locale::Codes>
d236 1
a236 1
The Locale-Codes distribution.
d238 3
a240 1
=item B<Locale::Codes::API>
d242 1
a242 1
The list of functions supported by this module.
d244 1
a244 1
=item B<Locale::SubCountry>
d246 3
a248 4
ISO codes for country sub-divisions (states, counties, provinces,
etc), as defined in ISO 3166-2.  This module is not part of the
Locale-Codes distribution, but is available from CPAN in
CPAN/modules/by-module/Locale/
d250 1
a250 1
=item B<http://www.iso.org/iso/country_codes>
d252 3
a254 1
Official home page for the ISO 3166 maintenance agency.
d256 1
a256 2
Unfortunately, they do not make the actual ISO available for free,
so I cannot check the alpha-3 and numerical codes here.
d258 1
a258 1
=item B<http://www.iso.org/iso/list-en1-semic-3.txt>
d260 1
a260 2
The source of ISO 3166-1 two-letter codes used by this
module.
d262 2
a263 1
=item B<http://unstats.un.org/unsd/methods/m49/m49alpha.htm>
d265 1
a265 2
The source of the official ISO 3166-1 three-letter codes and
three-digit codes.
d267 4
a270 3
For some reason, this table is incomplete! Several countries are
missing from it, and I cannot find them anywhere on the UN site.  I
get as much of the data from here as I can.
d272 1
a272 1
=item B<http://earth-info.nga.mil/gns/html/digraphs.htm>
d274 1
a274 1
The official list of the FIPS 10 codes.
d276 1
a276 1
=item B<http://www.iana.org/domains/>
d278 1
a278 1
Official source of the top-level domain names.
d280 1
a280 1
=item B<https://www.cia.gov/library/publications/the-world-factbook/appendix/print_appendix-d.html>
d282 1
a282 3
The World Factbook maintained by the CIA is a potential source of
the data.  Unfortunately, it adds/preserves non-standard codes, so it is no
longer used as a source of data.
d284 1
a284 1
=item B<http://www.statoids.com/wab.html>
d286 2
a287 3
Another unofficial source of data. Currently, it is not used to get
data, but the notes and explanatory material were very useful for
understanding discrepancies between the sources.
d291 1
d294 1
a294 1
See Locale::Codes for full author history.
d296 1
a296 1
Currently maintained by Sullivan Beck (sbeck@@cpan.org).
d298 1
a298 1
=head1 COPYRIGHT
d300 1
a300 3
   Copyright (c) 1997-2001 Canon Research Centre Europe (CRE).
   Copyright (c) 2001-2010 Neil Bowers
   Copyright (c) 2010-2012 Sullivan Beck
d306 1
@


1.1.1.3
log
@Import perl-5.18.2

OK espie@@ sthen@@ deraadt@@
@
text
@d75 2
a76 3
The IANA is responsible for delegating management of the top level country
domains.  The country domains are the two-letter (lowercase) codes from ISO 3166
with a few other additions.
a164 2
=item B<http://www.iso.org/iso/home/standards/country_codes/iso-3166-1_decoding_table.htm>

d209 1
a209 1
   Copyright (c) 2010-2013 Sullivan Beck
@


1.1.1.4
log
@Import perl-5.20.1
@
text
@d68 5
a80 3
NOTE: As of version 3.27, the FIPS code set is no longer supported.  See the
Locale::Codes::Changes document for details.

d129 2
a130 2
The alias_code function is deprecated and will be removed in the December
2014 release.
d157 1
a157 1
=item B<http://www.iso.org/iso/home/standards/country_codes.htm>
d161 5
a170 4
=item B<http://www.iana.org/domains/root/db/>

Official source of the top-level domain names.

d178 9
a186 1
no longer use this as a source of data.
d212 1
a212 1
   Copyright (c) 2010-2014 Sullivan Beck
@


1.1.1.5
log
@Import perl-5.24.2
@
text
@d18 1
d23 1
a23 1
This module provides access to several code sets
d83 1
a83 1
=item B<code2country(CODE [,CODESET] [,'retired'])>
d85 1
a85 1
=item B<country2code(NAME [,CODESET] [,'retired'])>
d87 1
a87 1
=item B<country_code2code(CODE ,CODESET ,CODESET2)>
d89 1
a89 1
=item B<all_country_codes([CODESET] [,'retired'])>
d91 1
a91 1
=item B<all_country_names([CODESET] [,'retired'])>
d93 1
a93 1
=item B<Locale::Country::rename_country(CODE ,NEW_NAME [,CODESET])>
d95 1
a95 1
=item B<Locale::Country::add_country(CODE ,NAME [,CODESET])>
d97 1
a97 1
=item B<Locale::Country::delete_country(CODE [,CODESET])>
d99 1
a99 1
=item B<Locale::Country::add_country_alias(NAME ,NEW_NAME)>
d101 1
a101 1
=item B<Locale::Country::delete_country_alias(NAME)>
d103 1
a103 1
=item B<Locale::Country::rename_country_code(CODE ,NEW_CODE [,CODESET])>
d105 1
a105 1
=item B<Locale::Country::add_country_code_alias(CODE ,NEW_CODE [,CODESET])>
d107 1
a107 1
=item B<Locale::Country::delete_country_code_alias(CODE [,CODESET])>
d109 24
a132 1
These routines are all documented in the L<Locale::Codes::API> man page.
d140 1
a140 1
=item L<Locale::Codes>
d144 1
a144 1
=item L<Locale::Codes::API>
d148 1
a148 1
=item L<Locale::SubCountry>
d155 1
a155 1
=item L<http://www.iso.org/iso/home/standards/country_codes.htm>
d159 1
a159 1
=item L<http://www.iso.org/iso/home/standards/country_codes/iso-3166-1_decoding_table.htm>
d164 1
a164 1
=item L<http://www.iana.org/domains/root/db/>
d168 1
a168 1
=item L<http://unstats.un.org/unsd/methods/m49/m49alpha.htm>
d177 1
a177 1
=item L<https://www.cia.gov/library/publications/the-world-factbook/appendix/print_appendix-d.html>
d183 1
a183 1
=item L<http://www.statoids.com/wab.html>
d201 1
a201 1
   Copyright (c) 2010-2015 Sullivan Beck
@


