head	1.1;
branch	1.1.1;
access;
symbols
	OPENBSD_6_2:1.1.1.1.0.14
	OPENBSD_6_2_BASE:1.1.1.1
	PERL_5_24_2:1.1.1.1
	OPENBSD_6_1:1.1.1.1.0.18
	OPENBSD_6_1_BASE:1.1.1.1
	OPENBSD_6_0:1.1.1.1.0.16
	OPENBSD_6_0_BASE:1.1.1.1
	OPENBSD_5_9:1.1.1.1.0.10
	OPENBSD_5_9_BASE:1.1.1.1
	OPENBSD_5_8:1.1.1.1.0.12
	OPENBSD_5_8_BASE:1.1.1.1
	PERL_5_20_2:1.1.1.1
	OPENBSD_5_7:1.1.1.1.0.4
	OPENBSD_5_7_BASE:1.1.1.1
	PERL_5_20_1:1.1.1.1
	OPENBSD_5_6:1.1.1.1.0.8
	OPENBSD_5_6_BASE:1.1.1.1
	PERL_5_18_2:1.1.1.1
	PERL:1.1.1
	OPENBSD_5_5:1.1.1.1.0.6
	OPENBSD_5_5_BASE:1.1.1.1
	OPENBSD_5_4:1.1.1.1.0.2
	OPENBSD_5_4_BASE:1.1.1.1
	PERL_5_16_3:1.1.1.1
	CPAN:1.1.1;
locks; strict;
comment	@# @;
expand	@o@;


1.1
date	2013.03.25.20.07.50;	author sthen;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	2013.03.25.20.07.50;	author sthen;	state Exp;
branches;
next	;


desc
@@


1.1
log
@Initial revision
@
text
@#!/usr/bin/perl -w

require 5.002;

$runtests=shift(@@ARGV);
if ( -f "t/testfunc.pl" ) {
  require "t/testfunc.pl";
  $dir="./lib";
  $tdir="t";
} elsif ( -f "testfunc.pl" ) {
  require "testfunc.pl";
  $dir="../lib";
  $tdir=".";
} else {
  die "ERROR: cannot find testfunc.pl\n";
}

unshift(@@INC,$dir);
use Locale::Language;

%type = ( "LOCALE_LANG_ALPHA_2" => LOCALE_LANG_ALPHA_2,
          "LOCALE_LANG_ALPHA_3" => LOCALE_LANG_ALPHA_3,
          "LOCALE_LANG_TERM"    => LOCALE_LANG_TERM,
        );

sub test {
   my(@@test) = @@_;

   if      ($test[0] eq "rename_language") {
      shift(@@test);
      $test[2]  = $type{$test[2]}
        if (@@test == 3  &&  $test[2]  &&  exists $type{$test[2]});
      return Locale::Language::rename_language(@@test,"nowarn");

   } elsif ($test[0] eq "add_language") {
      shift(@@test);
      $test[2]  = $type{$test[2]}
        if (@@test == 3  &&  $test[2]  &&  exists $type{$test[2]});
      return Locale::Language::add_language(@@test,"nowarn");

   } elsif ($test[0] eq "delete_language") {
      shift(@@test);
      $test[1]  = $type{$test[1]}
        if (@@test == 2  &&  $test[1]  &&  exists $type{$test[1]});
      return Locale::Language::delete_language(@@test,"nowarn");

   } elsif ($test[0] eq "add_language_alias") {
      shift(@@test);
      return Locale::Language::add_language_alias(@@test,"nowarn");

   } elsif ($test[0] eq "delete_language_alias") {
      shift(@@test);
      return Locale::Language::delete_language_alias(@@test,"nowarn");

   } elsif ($test[0] eq "language2code") {
      shift(@@test);
      $test[1]  = $type{$test[1]}
        if (@@test == 2  &&  $test[1]  &&  exists $type{$test[1]});
      return language2code(@@test);

   } else {
      $test[1]  = $type{$test[1]}
        if (@@test == 2  &&  $test[1]  &&  exists $type{$test[1]});
      return code2language(@@test);
   }
}

$tests = "

zu ~ Zulu

rename_language zu NewName LOCALE_LANG_FOO ~ 0

rename_language zu English LOCALE_LANG_ALPHA_2 ~ 0

rename_language zu NewName LOCALE_LANG_ALPHA_3 ~ 0

zu ~ Zulu

rename_language zu NewName LOCALE_LANG_ALPHA_2 ~ 1

zu ~ NewName

";

print "language (old; semi-private)...\n";
test_Func(\&test,$tests,$runtests);

1;
# Local Variables:
# mode: cperl
# indent-tabs-mode: nil
# cperl-indent-level: 3
# cperl-continued-statement-offset: 2
# cperl-continued-brace-offset: 0
# cperl-brace-offset: 0
# cperl-brace-imaginary-offset: 0
# cperl-label-offset: -2
# End:
@


1.1.1.1
log
@import perl 5.16.3 from CPAN - worked on by Andrew Fresh and myself
@
text
@@
