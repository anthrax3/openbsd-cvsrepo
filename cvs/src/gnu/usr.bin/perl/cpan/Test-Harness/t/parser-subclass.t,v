head	1.1;
branch	1.1.1;
access;
symbols
	OPENBSD_6_2_BASE:1.1.1.3
	PERL_5_24_2:1.1.1.3
	OPENBSD_6_1:1.1.1.3.0.12
	OPENBSD_6_1_BASE:1.1.1.3
	OPENBSD_6_0:1.1.1.3.0.10
	OPENBSD_6_0_BASE:1.1.1.3
	OPENBSD_5_9:1.1.1.3.0.4
	OPENBSD_5_9_BASE:1.1.1.3
	OPENBSD_5_8:1.1.1.3.0.6
	OPENBSD_5_8_BASE:1.1.1.3
	PERL_5_20_2:1.1.1.3
	OPENBSD_5_7:1.1.1.3.0.2
	OPENBSD_5_7_BASE:1.1.1.3
	PERL_5_20_1:1.1.1.3
	OPENBSD_5_6:1.1.1.2.0.8
	OPENBSD_5_6_BASE:1.1.1.2
	PERL_5_18_2:1.1.1.2
	PERL:1.1.1
	OPENBSD_5_5:1.1.1.2.0.6
	OPENBSD_5_5_BASE:1.1.1.2
	OPENBSD_5_4:1.1.1.2.0.2
	OPENBSD_5_4_BASE:1.1.1.2
	PERL_5_16_3:1.1.1.2
	OPENBSD_5_3:1.1.1.1.0.10
	OPENBSD_5_3_BASE:1.1.1.1
	OPENBSD_5_2:1.1.1.1.0.8
	OPENBSD_5_2_BASE:1.1.1.1
	OPENBSD_5_1_BASE:1.1.1.1
	OPENBSD_5_1:1.1.1.1.0.6
	OPENBSD_5_0:1.1.1.1.0.4
	OPENBSD_5_0_BASE:1.1.1.1
	OPENBSD_4_9:1.1.1.1.0.2
	OPENBSD_4_9_BASE:1.1.1.1
	PERL_5_12_2:1.1.1.1
	CPAN:1.1.1;
locks; strict;
comment	@# @;
expand	@o@;


1.1
date	2010.09.24.14.49.00;	author millert;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	2010.09.24.14.49.00;	author millert;	state Exp;
branches;
next	1.1.1.2;

1.1.1.2
date	2013.03.25.20.08.15;	author sthen;	state Exp;
branches;
next	1.1.1.3;

1.1.1.3
date	2014.11.17.20.52.59;	author afresh1;	state Exp;
branches;
next	;
commitid	B31cAbBIXiCqnL97;


desc
@@


1.1
log
@Initial revision
@
text
@#!/usr/bin/perl -w

BEGIN {
    unshift @@INC, 't/lib';
}

use strict;
use vars qw(%INIT %CUSTOM);

use Test::More tests => 24;
use File::Spec::Functions qw( catfile updir );

use_ok('TAP::Parser::SubclassTest');

# TODO: foreach my $source ( ... )
{    # perl source
    %INIT = %CUSTOM = ();
    my $source = catfile( 't', 'subclass_tests', 'perl_source' );
    my $p = TAP::Parser::SubclassTest->new( { source => $source } );

    # The grammar is lazily constructed so we need to ask for it to
    # trigger it's creation.
    my $grammer = $p->_grammar;

    ok( $p->{initialized}, 'new subclassed parser' );

    is( $p->source_class      => 'MySource',     'source_class' );
    is( $p->perl_source_class => 'MyPerlSource', 'perl_source_class' );
    is( $p->grammar_class     => 'MyGrammar',    'grammar_class' );
    is( $p->iterator_factory_class => 'MyIteratorFactory',
        'iterator_factory_class'
    );
    is( $p->result_factory_class => 'MyResultFactory',
        'result_factory_class'
    );

    is( $INIT{MyPerlSource},   1, 'initialized MyPerlSource' );
    is( $CUSTOM{MyPerlSource}, 1, '... and it was customized' );
    is( $INIT{MyGrammar},      1, 'initialized MyGrammar' );
    is( $CUSTOM{MyGrammar},    1, '... and it was customized' );

    # make sure overrided make_* methods work...
    %CUSTOM = ();
    $p->make_source;
    is( $CUSTOM{MySource}, 1, 'make custom source' );
    $p->make_perl_source;
    is( $CUSTOM{MyPerlSource}, 1, 'make custom perl source' );
    $p->make_grammar;
    is( $CUSTOM{MyGrammar}, 1, 'make custom grammar' );
    $p->make_iterator;
    is( $CUSTOM{MyIterator}, 1, 'make custom iterator' );
    $p->make_result;
    is( $CUSTOM{MyResult}, 1, 'make custom result' );

    # make sure parser helpers use overrided classes too (the parser should
    # be the central source of configuration/overriding functionality)
    # The source is already tested above (parser doesn't keep a copy of the
    # source currently).  So only one to check is the Grammar:
    %INIT = %CUSTOM = ();
    my $r = $p->_grammar->tokenize;
    isa_ok( $r, 'MyResult', 'i has results' );
    is( $INIT{MyResult},        1, 'initialized MyResult' );
    is( $CUSTOM{MyResult},      1, '... and it was customized' );
    is( $INIT{MyResultFactory}, 1, '"initialized" MyResultFactory' );
}

SKIP: {    # non-perl source
    %INIT = %CUSTOM = ();
    my $cat = '/bin/cat';
    unless ( -e $cat ) {
        skip "no '$cat'", 4;
    }
    my $file = catfile( 't', 'data', 'catme.1' );
    my $p = TAP::Parser::SubclassTest->new( { exec => [ $cat => $file ] } );

    is( $INIT{MySource},     1, 'initialized MySource subclass' );
    is( $CUSTOM{MySource},   1, '... and it was customized' );
    is( $INIT{MyIterator},   1, 'initialized MyIterator subclass' );
    is( $CUSTOM{MyIterator}, 1, '... and it was customized' );
}
@


1.1.1.1
log
@Perl 5.12.2 from CPAN
@
text
@@


1.1.1.2
log
@import perl 5.16.3 from CPAN - worked on by Andrew Fresh and myself
@
text
@d10 1
a10 1
use Test::More tests => 14;
d15 1
a15 3
# TODO: for my $source ( ... ) ?
my @@t_path = ();

d18 1
a18 1
    my $source = catfile( @@t_path, 't', 'subclass_tests', 'perl_source' );
d27 6
a32 1
    is( $p->grammar_class => 'MyGrammar', 'grammar_class' );
d37 4
a40 2
    is( $INIT{MyGrammar},   1, 'initialized MyGrammar' );
    is( $CUSTOM{MyGrammar}, 1, '... and it was customized' );
d44 4
a47 1

d50 2
d71 1
a71 1
        skip "no '$cat'", 2;
d73 2
a74 6
    my $file = catfile( @@t_path, 't', 'data', 'catme.1' );
    my $p = TAP::Parser::SubclassTest->new(
        {   exec => [ $cat => $file ],
            sources => { MySourceHandler => { accept_all => 1 } },
        }
    );
d76 4
a79 2
    is( $CUSTOM{MySourceHandler}, 1, 'customized a MySourceHandler' );
    is( $INIT{MyIterator},        1, 'initialized MyIterator subclass' );
@


1.1.1.3
log
@Import perl-5.20.1
@
text
@d8 1
a8 2
use warnings;
our (%INIT, %CUSTOM);
@


