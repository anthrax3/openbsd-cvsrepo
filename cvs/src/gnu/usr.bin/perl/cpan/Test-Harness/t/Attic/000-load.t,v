head	1.2;
access;
symbols
	OPENBSD_5_6:1.1.1.2.0.8
	OPENBSD_5_6_BASE:1.1.1.2
	PERL_5_18_2:1.1.1.2
	PERL:1.1.1
	OPENBSD_5_5:1.1.1.2.0.6
	OPENBSD_5_5_BASE:1.1.1.2
	OPENBSD_5_4:1.1.1.2.0.2
	OPENBSD_5_4_BASE:1.1.1.2
	PERL_5_16_3:1.1.1.2
	OPENBSD_5_3:1.1.1.1.0.10
	OPENBSD_5_3_BASE:1.1.1.1
	OPENBSD_5_2:1.1.1.1.0.8
	OPENBSD_5_2_BASE:1.1.1.1
	OPENBSD_5_1_BASE:1.1.1.1
	OPENBSD_5_1:1.1.1.1.0.6
	OPENBSD_5_0:1.1.1.1.0.4
	OPENBSD_5_0_BASE:1.1.1.1
	OPENBSD_4_9:1.1.1.1.0.2
	OPENBSD_4_9_BASE:1.1.1.1
	PERL_5_12_2:1.1.1.1
	CPAN:1.1.1;
locks; strict;
comment	@# @;
expand	@o@;


1.2
date	2014.11.17.20.57.03;	author afresh1;	state dead;
branches;
next	1.1;
commitid	QP75iYx42Uo7mMxO;

1.1
date	2010.09.24.14.49.00;	author millert;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	2010.09.24.14.49.00;	author millert;	state Exp;
branches;
next	1.1.1.2;

1.1.1.2
date	2013.03.25.20.08.15;	author sthen;	state Exp;
branches;
next	;


desc
@@


1.2
log
@Fix merge conflicts, remove extra files, match upstream perl-5.20.1

ok deraadt@@ sthen@@ espie@@ miod@@
@
text
@#!/usr/bin/perl -wT

use strict;
use lib 't/lib';

use Test::More tests => 78;

BEGIN {

    # TAP::Parser must come first
    my @@classes = qw(
      TAP::Parser
      App::Prove
      App::Prove::State
      App::Prove::State::Result
      App::Prove::State::Result::Test
      TAP::Base
      TAP::Formatter::Color
      TAP::Formatter::Console::ParallelSession
      TAP::Formatter::Console::Session
      TAP::Formatter::Console
      TAP::Harness
      TAP::Parser::Aggregator
      TAP::Parser::Grammar
      TAP::Parser::Iterator
      TAP::Parser::Iterator::Array
      TAP::Parser::Iterator::Process
      TAP::Parser::Iterator::Stream
      TAP::Parser::IteratorFactory
      TAP::Parser::Multiplexer
      TAP::Parser::Result
      TAP::Parser::ResultFactory
      TAP::Parser::Result::Bailout
      TAP::Parser::Result::Comment
      TAP::Parser::Result::Plan
      TAP::Parser::Result::Pragma
      TAP::Parser::Result::Test
      TAP::Parser::Result::Unknown
      TAP::Parser::Result::Version
      TAP::Parser::Result::YAML
      TAP::Parser::Result
      TAP::Parser::Scheduler
      TAP::Parser::Scheduler::Job
      TAP::Parser::Scheduler::Spinner
      TAP::Parser::Source::Perl
      TAP::Parser::Source
      TAP::Parser::YAMLish::Reader
      TAP::Parser::YAMLish::Writer
      TAP::Parser::Utils
      Test::Harness
    );

    foreach my $class (@@classes) {
        use_ok $class or BAIL_OUT("Could not load $class");
        is $class->VERSION, TAP::Parser->VERSION,
          "... and $class should have the correct version";
    }

    diag("Testing Test::Harness $Test::Harness::VERSION, Perl $], $^X")
      unless $ENV{PERL_CORE};
}
@


1.1
log
@Initial revision
@
text
@@


1.1.1.1
log
@Perl 5.12.2 from CPAN
@
text
@@


1.1.1.2
log
@import perl 5.16.3 from CPAN - worked on by Andrew Fresh and myself
@
text
@d1 1
a1 1
#!/usr/bin/perl -w
d6 1
a6 1
use Test::More;
d8 1
a8 2
use constant LIBS  => 'lib/';
use constant FIRST => 'TAP::Parser';
d10 47
a56 25
read_manifest( 'MANIFEST',             my $manifest             = {} );
read_manifest( 'MANIFEST.CUMMULATIVE', my $manifest_cummulative = {} );

my @@classes = uniq(
    FIRST,
    map { file_to_mod($_) } filter_lib( keys %$manifest )
);

plan tests => @@classes * 2 + 1;

for my $class (@@classes) {
    use_ok $class or BAIL_OUT("Could not load $class");
    is $class->VERSION, TAP::Parser->VERSION,
      "... and $class should have the correct version";
}

my @@orphans = diff(
    [ filter_lib( keys %$manifest ) ],
    [ filter_lib( keys %$manifest_cummulative ) ]
);
my @@waifs = intersection( \@@orphans, [ keys %INC ] );
unless ( ok 0 == @@waifs, 'no old versions loaded' ) {
    diag "\nThe following modules were loaded in error:\n";
    for my $waif ( sort @@waifs ) {
        diag sprintf "  %s (%s)\n", file_to_mod($waif), $INC{$waif};
a57 2
    diag "\n";
}
d59 2
a60 13
diag("Testing Test::Harness $Test::Harness::VERSION, Perl $], $^X")
  unless $ENV{PERL_CORE};

sub intersection {
    my ( $la, $lb ) = @@_;
    my %seen = map { $_ => 1 } @@$la;
    return grep { $seen{$_} } @@$lb;
}

sub diff {
    my ( $la, $lb ) = @@_;
    my %seen = map { $_ => 1 } @@$la;
    return grep { !$seen{$_}++ } @@$lb;
a61 42

sub uniq {
    my %seen = ();
    grep { !$seen{$_}++ } @@_;
}

sub lib_matcher {
    my @@libs = @@_;
    my $re = join ')|(', map quotemeta, @@libs;
    return qr{^($re)};
}

sub filter_lib {
    my $matcher = lib_matcher(LIBS);
    return map { s{$matcher}{}; $_ }
      grep {m{$matcher.+?\.pm$}} sort @@_;
}

sub mod_to_file {
    my $mod = shift;
    $mod =~ s{::}{/}g;
    return "$mod.pm";
}

sub file_to_mod {
    my $file = shift;
    $file =~ s{/}{::}g;
    $file =~ s{\.pm$}{};
    return $file;
}

sub read_manifest {
    my ( $file, $into ) = @@_;
    open my $fh, '<', $file or die "Can't read $file: $!";
    while (<$fh>) {
        chomp;
        s/\s*#.*//;
        $into->{$_}++ if length $_;
    }
    return;
}

@

