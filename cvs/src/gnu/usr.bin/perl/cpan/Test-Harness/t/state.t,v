head	1.1;
branch	1.1.1;
access;
symbols
	PERL_5_24_2:1.1.1.3
	OPENBSD_6_1:1.1.1.3.0.12
	OPENBSD_6_1_BASE:1.1.1.3
	OPENBSD_6_0:1.1.1.3.0.10
	OPENBSD_6_0_BASE:1.1.1.3
	OPENBSD_5_9:1.1.1.3.0.4
	OPENBSD_5_9_BASE:1.1.1.3
	OPENBSD_5_8:1.1.1.3.0.6
	OPENBSD_5_8_BASE:1.1.1.3
	PERL_5_20_2:1.1.1.3
	OPENBSD_5_7:1.1.1.3.0.2
	OPENBSD_5_7_BASE:1.1.1.3
	PERL_5_20_1:1.1.1.3
	OPENBSD_5_6:1.1.1.2.0.8
	OPENBSD_5_6_BASE:1.1.1.2
	PERL_5_18_2:1.1.1.2
	PERL:1.1.1
	OPENBSD_5_5:1.1.1.2.0.6
	OPENBSD_5_5_BASE:1.1.1.2
	OPENBSD_5_4:1.1.1.2.0.2
	OPENBSD_5_4_BASE:1.1.1.2
	PERL_5_16_3:1.1.1.2
	OPENBSD_5_3:1.1.1.1.0.10
	OPENBSD_5_3_BASE:1.1.1.1
	OPENBSD_5_2:1.1.1.1.0.8
	OPENBSD_5_2_BASE:1.1.1.1
	OPENBSD_5_1_BASE:1.1.1.1
	OPENBSD_5_1:1.1.1.1.0.6
	OPENBSD_5_0:1.1.1.1.0.4
	OPENBSD_5_0_BASE:1.1.1.1
	OPENBSD_4_9:1.1.1.1.0.2
	OPENBSD_4_9_BASE:1.1.1.1
	PERL_5_12_2:1.1.1.1
	CPAN:1.1.1;
locks; strict;
comment	@# @;
expand	@o@;


1.1
date	2010.09.24.14.49.00;	author millert;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	2010.09.24.14.49.00;	author millert;	state Exp;
branches;
next	1.1.1.2;

1.1.1.2
date	2013.03.25.20.08.16;	author sthen;	state Exp;
branches;
next	1.1.1.3;

1.1.1.3
date	2014.11.17.20.52.59;	author afresh1;	state Exp;
branches;
next	;
commitid	B31cAbBIXiCqnL97;


desc
@@


1.1
log
@Initial revision
@
text
@#!/usr/bin/perl -w

BEGIN {
    unshift @@INC, 't/lib';
}

use strict;
use Test::More;
use App::Prove::State;
use App::Prove::State::Result;

my @@schedule = (
    {   options        => 'all',
        get_tests_args => [],
        expect         => [
            't/compat/env.t',
            't/compat/failure.t',
            't/compat/inc_taint.t',
            't/compat/version.t',
            't/source.t',
            't/yamlish-writer.t',
        ],
    },
    {   options        => 'failed',
        get_tests_args => [],
        expect         => [
            't/compat/inc_taint.t',
            't/compat/version.t',
        ],
    },
    {   options        => 'passed',
        get_tests_args => [],
        expect         => [
            't/compat/env.t',
            't/compat/failure.t',
            't/source.t',
            't/yamlish-writer.t',
        ],
    },
    {   options        => 'last',
        get_tests_args => [],
        expect         => [
            't/compat/env.t',
            't/compat/failure.t',
            't/compat/inc_taint.t',
            't/compat/version.t',
            't/source.t',
        ],
    },
    {   options        => 'todo',
        get_tests_args => [],
        expect         => [
            't/compat/version.t',
            't/compat/failure.t',
        ],

    },
    {   options        => 'hot',
        get_tests_args => [],
        expect         => [
            't/compat/version.t',
            't/yamlish-writer.t',
            't/compat/env.t',
        ],
    },
    {   options        => 'adrian',
        get_tests_args => [],
        expect         => [
            't/compat/version.t',
            't/yamlish-writer.t',
            't/compat/env.t',
            't/compat/failure.t',
            't/compat/inc_taint.t',
            't/source.t',
        ],
    },
    {   options        => 'failed,passed',
        get_tests_args => [],
        expect         => [
            't/compat/inc_taint.t',
            't/compat/version.t',
            't/compat/env.t',
            't/compat/failure.t',
            't/source.t',
            't/yamlish-writer.t',
        ],
    },
    {   options        => [ 'failed', 'passed' ],
        get_tests_args => [],
        expect         => [
            't/compat/inc_taint.t',
            't/compat/version.t',
            't/compat/env.t',
            't/compat/failure.t',
            't/source.t',
            't/yamlish-writer.t',
        ],
    },
    {   options        => 'slow',
        get_tests_args => [],
        expect         => [
            't/yamlish-writer.t',
            't/compat/env.t',
            't/compat/inc_taint.t',
            't/compat/version.t',
            't/compat/failure.t',
            't/source.t',
        ],
    },
    {   options        => 'fast',
        get_tests_args => [],
        expect         => [
            't/source.t',
            't/compat/failure.t',
            't/compat/version.t',
            't/compat/inc_taint.t',
            't/compat/env.t',
            't/yamlish-writer.t',
        ],
    },
    {   options        => 'old',
        get_tests_args => [],
        expect         => [
            't/source.t',
            't/compat/inc_taint.t',
            't/compat/version.t',
            't/yamlish-writer.t',
            't/compat/failure.t',
            't/compat/env.t',
        ],
    },
    {   options        => 'new',
        get_tests_args => [],
        expect         => [
            't/compat/env.t',
            't/compat/failure.t',
            't/yamlish-writer.t',
            't/compat/version.t',
            't/compat/inc_taint.t',
            't/source.t',
        ],
    },
    {   options        => 'fresh',
        get_tests_args => [],
        expect         => [
            't/compat/env.t',
            't/compat/failure.t',
        ],
    },
);

plan tests => @@schedule * 2;

for my $test (@@schedule) {
    my $state = App::Prove::State->new;
    isa_ok $state, 'App::Prove::State';

    my $desc = $test->{options};

    # Naughty
    $state->{_} = get_state();
    my $options = $test->{options};
    $options = [$options] unless 'ARRAY' eq ref $options;
    $state->apply_switch(@@$options);

    my @@got    = $state->get_tests( @@{ $test->{get_tests_args} } );
    my @@expect = @@{ $test->{expect} };
    unless ( is_deeply \@@got, \@@expect, "$desc: order OK" ) {
        use Data::Dumper;
        diag( Dumper( { got => \@@got, want => \@@expect } ) );
    }
}

sub get_state {
    return App::Prove::State::Result->new(
        {   generation    => 51,
            last_run_time => 1196285439,
            tests         => {
                't/compat/failure.t' => {
                    last_result    => 0,
                    last_run_time  => 1196371471.57738,
                    last_pass_time => 1196371471.57738,
                    total_passes   => 48,
                    seq            => 1549,
                    gen            => 51,
                    elapsed        => 0.1230,
                    last_todo      => 1,
                    mtime          => 1196285623,
                },
                't/yamlish-writer.t' => {
                    last_result    => 0,
                    last_run_time  => 1196371480.5761,
                    last_pass_time => 1196371480.5761,
                    last_fail_time => 1196368609,
                    total_passes   => 41,
                    seq            => 1578,
                    gen            => 49,
                    elapsed        => 12.2983,
                    last_todo      => 0,
                    mtime          => 1196285400,
                },
                't/compat/env.t' => {
                    last_result    => 0,
                    last_run_time  => 1196371471.42967,
                    last_pass_time => 1196371471.42967,
                    last_fail_time => 1196368608,
                    total_passes   => 48,
                    seq            => 1548,
                    gen            => 52,
                    elapsed        => 3.1290,
                    last_todo      => 0,
                    mtime          => 1196285739,
                },
                't/compat/version.t' => {
                    last_result    => 2,
                    last_run_time  => 1196371472.96476,
                    last_pass_time => 1196371472.96476,
                    last_fail_time => 1196368609,
                    total_passes   => 47,
                    seq            => 1555,
                    gen            => 51,
                    elapsed        => 0.2363,
                    last_todo      => 4,
                    mtime          => 1196285239,
                },
                't/compat/inc_taint.t' => {
                    last_result    => 3,
                    last_run_time  => 1196371471.89682,
                    last_pass_time => 1196371471.89682,
                    total_passes   => 47,
                    seq            => 1551,
                    gen            => 51,
                    elapsed        => 1.6938,
                    last_todo      => 0,
                    mtime          => 1196185639,
                },
                't/source.t' => {
                    last_result    => 0,
                    last_run_time  => 1196371479.72508,
                    last_pass_time => 1196371479.72508,
                    total_passes   => 41,
                    seq            => 1570,
                    gen            => 51,
                    elapsed        => 0.0143,
                    last_todo      => 0,
                    mtime          => 1186285639,
                },
            }
        }
    );
}
@


1.1.1.1
log
@Perl 5.12.2 from CPAN
@
text
@@


1.1.1.2
log
@import perl 5.16.3 from CPAN - worked on by Andrew Fresh and myself
@
text
@a11 5
sub mn {
    my $pfx = '';
    return map {"$pfx$_"} @@_;
}

d20 1
a20 1
            't/source_handler.t',
d36 1
a36 1
            't/source_handler.t',
d47 1
a47 1
            't/source_handler.t',
d74 1
a74 1
            't/source_handler.t',
d84 1
a84 1
            't/source_handler.t',
d95 1
a95 1
            't/source_handler.t',
d107 1
a107 1
            't/source_handler.t',
d113 1
a113 1
            't/source_handler.t',
d124 1
a124 1
            't/source_handler.t',
d140 1
a140 1
            't/source_handler.t',
d167 1
a167 1
    my @@expect = mn( @@{ $test->{expect} } );
d179 1
a179 1
                mn('t/compat/failure.t') => {
d190 1
a190 1
                mn('t/yamlish-writer.t') => {
d202 1
a202 1
                mn('t/compat/env.t') => {
d214 1
a214 1
                mn('t/compat/version.t') => {
d226 1
a226 1
                mn('t/compat/inc_taint.t') => {
d237 1
a237 1
                mn('t/source_handler.t') => {
@


1.1.1.3
log
@Import perl-5.20.1
@
text
@a7 1
use warnings;
@


