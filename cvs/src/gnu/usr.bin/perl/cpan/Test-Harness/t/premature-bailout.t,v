head	1.1;
branch	1.1.1;
access;
symbols
	PERL_5_24_2:1.1.1.3
	OPENBSD_6_1:1.1.1.3.0.12
	OPENBSD_6_1_BASE:1.1.1.3
	OPENBSD_6_0:1.1.1.3.0.10
	OPENBSD_6_0_BASE:1.1.1.3
	OPENBSD_5_9:1.1.1.3.0.4
	OPENBSD_5_9_BASE:1.1.1.3
	OPENBSD_5_8:1.1.1.3.0.6
	OPENBSD_5_8_BASE:1.1.1.3
	PERL_5_20_2:1.1.1.3
	OPENBSD_5_7:1.1.1.3.0.2
	OPENBSD_5_7_BASE:1.1.1.3
	PERL_5_20_1:1.1.1.3
	OPENBSD_5_6:1.1.1.2.0.8
	OPENBSD_5_6_BASE:1.1.1.2
	PERL_5_18_2:1.1.1.2
	PERL:1.1.1
	OPENBSD_5_5:1.1.1.2.0.6
	OPENBSD_5_5_BASE:1.1.1.2
	OPENBSD_5_4:1.1.1.2.0.2
	OPENBSD_5_4_BASE:1.1.1.2
	PERL_5_16_3:1.1.1.2
	OPENBSD_5_3:1.1.1.1.0.10
	OPENBSD_5_3_BASE:1.1.1.1
	OPENBSD_5_2:1.1.1.1.0.8
	OPENBSD_5_2_BASE:1.1.1.1
	OPENBSD_5_1_BASE:1.1.1.1
	OPENBSD_5_1:1.1.1.1.0.6
	OPENBSD_5_0:1.1.1.1.0.4
	OPENBSD_5_0_BASE:1.1.1.1
	OPENBSD_4_9:1.1.1.1.0.2
	OPENBSD_4_9_BASE:1.1.1.1
	PERL_5_12_2:1.1.1.1
	CPAN:1.1.1;
locks; strict;
comment	@# @;
expand	@o@;


1.1
date	2010.09.24.14.49.00;	author millert;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	2010.09.24.14.49.00;	author millert;	state Exp;
branches;
next	1.1.1.2;

1.1.1.2
date	2013.03.25.20.08.16;	author sthen;	state Exp;
branches;
next	1.1.1.3;

1.1.1.3
date	2014.11.17.20.52.59;	author afresh1;	state Exp;
branches;
next	;
commitid	B31cAbBIXiCqnL97;


desc
@@


1.1
log
@Initial revision
@
text
@#!/usr/bin/perl -wT

use strict;
use lib 't/lib';

use Test::More tests => 14;

use TAP::Parser;
use TAP::Parser::IteratorFactory;

sub tap_to_lines {
    my $string = shift;
    my @@lines = ( $string =~ /.*\n/g );
    return \@@lines;
}

my $tap = <<'END_TAP';
1..4
ok 1 - input file opened
... this is junk
not ok first line of the input valid # todo some data
# this is a comment
ok 3 - read the rest of the file
not ok 4 - this is a real failure
Bail out!  We ran out of foobar.
not ok 5
END_TAP

my $factory = TAP::Parser::IteratorFactory->new;
my $parser  = TAP::Parser->new(
    {   stream => $factory->make_iterator( tap_to_lines($tap) ),
    }
);

# results() is sane?

# check the test plan
my $result = $parser->next();

# TEST
ok $result->is_plan, 'We should have a plan';

# a normal, passing test

my $test = $parser->next();

# TEST
ok $test->is_test, '... and a test';

# junk lines should be preserved

my $unknown = $parser->next();

# TEST
ok $unknown->is_unknown, '... and an unknown line';

# a failing test, which also happens to have a directive

my $failed = $parser->next();

# TEST
ok $failed->is_test, '... and another test';

# comments

my $comment = $parser->next();

# TEST
ok $comment->is_comment, '... and a comment';

# another normal, passing test

$test = $parser->next();

# TEST
ok $test->is_test, '... and another test';

# a failing test

$failed = $parser->next();

# TEST
ok $failed->is_test, '... and yet another test';

# ok 5 # skip we have no description
# skipped test
my $bailout = $parser->next();

# TEST
ok $bailout->is_bailout, 'And finally we should have a bailout';

# TEST
is $bailout->as_string, 'We ran out of foobar.',
  '... and as_string() should return the explanation';

# TEST
is( $bailout->raw, 'Bail out!  We ran out of foobar.',
    '... and raw() should return the explanation'
);

# TEST
is( $bailout->explanation, 'We ran out of foobar.',
    '... and it should have the correct explanation'
);

my $more_tap = "1..1\nok 1 - input file opened\n";

my $second_parser = TAP::Parser->new(
    {   stream => $factory->make_iterator( [ split( /\n/, $more_tap ) ] ),
    }
);

$result = $second_parser->next();

# TEST
ok $result->is_plan(), "Result is not the leftover line";

$result = $second_parser->next();

# TEST
ok $result->is_test(), "Result is a test";

# TEST
ok $result->is_ok(), "The event has passed";

@


1.1.1.1
log
@Perl 5.12.2 from CPAN
@
text
@@


1.1.1.2
log
@import perl 5.16.3 from CPAN - worked on by Andrew Fresh and myself
@
text
@d9 1
a9 1
use TAP::Parser::Iterator::Array;
d29 3
a31 2
my $parser = TAP::Parser->new(
    {   iterator => TAP::Parser::Iterator::Array->new( tap_to_lines($tap) ),
d109 1
a109 2
    {   iterator =>
          TAP::Parser::Iterator::Array->new( [ split( /\n/, $more_tap ) ] ),
@


1.1.1.3
log
@Import perl-5.20.1
@
text
@a3 1
use warnings;
@


