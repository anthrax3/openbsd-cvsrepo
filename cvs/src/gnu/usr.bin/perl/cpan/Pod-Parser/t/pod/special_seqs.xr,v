head	1.1;
branch	1.1.1;
access;
symbols
	PERL_5_24_2:1.1.1.2
	OPENBSD_6_1:1.1.1.2.0.14
	OPENBSD_6_1_BASE:1.1.1.2
	OPENBSD_6_0:1.1.1.2.0.12
	OPENBSD_6_0_BASE:1.1.1.2
	OPENBSD_5_9:1.1.1.2.0.6
	OPENBSD_5_9_BASE:1.1.1.2
	OPENBSD_5_8:1.1.1.2.0.8
	OPENBSD_5_8_BASE:1.1.1.2
	PERL_5_20_2:1.1.1.2
	OPENBSD_5_7:1.1.1.2.0.2
	OPENBSD_5_7_BASE:1.1.1.2
	PERL_5_20_1:1.1.1.2
	OPENBSD_5_6:1.1.1.2.0.4
	OPENBSD_5_6_BASE:1.1.1.2
	PERL_5_18_2:1.1.1.2
	PERL:1.1.1
	OPENBSD_5_5:1.1.1.1.0.16
	OPENBSD_5_5_BASE:1.1.1.1
	OPENBSD_5_4:1.1.1.1.0.12
	OPENBSD_5_4_BASE:1.1.1.1
	PERL_5_16_3:1.1.1.1
	OPENBSD_5_3:1.1.1.1.0.10
	OPENBSD_5_3_BASE:1.1.1.1
	OPENBSD_5_2:1.1.1.1.0.8
	OPENBSD_5_2_BASE:1.1.1.1
	OPENBSD_5_1_BASE:1.1.1.1
	OPENBSD_5_1:1.1.1.1.0.6
	OPENBSD_5_0:1.1.1.1.0.4
	OPENBSD_5_0_BASE:1.1.1.1
	OPENBSD_4_9:1.1.1.1.0.2
	OPENBSD_4_9_BASE:1.1.1.1
	PERL_5_12_2:1.1.1.1
	CPAN:1.1.1;
locks; strict;
comment	@# @;
expand	@o@;


1.1
date	2010.09.24.14.49.04;	author millert;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	2010.09.24.14.49.04;	author millert;	state Exp;
branches;
next	1.1.1.2;

1.1.1.2
date	2014.03.24.14.58.56;	author afresh1;	state Exp;
branches;
next	;


desc
@@


1.1
log
@Initial revision
@
text
@    This is a test to see if I can do not only `$self' and `method()', but
    also `$self->method()' and `$self->{FIELDNAME}' and `$Foo <=> $Bar'
    without resorting to escape sequences. If I want to refer to the
    right-shift operator I can do something like `$x >> 3' or even `$y >>
    5'.

    Now for the grand finale of `$self->method()->{FIELDNAME} = {FOO=>BAR}'.
    And I also want to make sure that newlines work like this
    `$self->{FOOBAR} >> 3 and [$b => $a]->[$a <=> $b]'

    Of course I should still be able to do all this *with* escape sequences
    too: `$self->method()' and `$self->{FIELDNAME}' and `{FOO=>BAR}'.

    Dont forget `$self->method()->{FIELDNAME} = {FOO=>BAR}'.

    And make sure that `0' works too!

    Now, if I use << or >> as my delimiters, then I have to use whitespace.
    So things like `<$self-'method()>> and `<$self-'{FIELDNAME}>> wont end
    up doing what you might expect since the first > will still terminate
    the first < seen.

    Lets make sure these work for empty ones too, like and `>>' (just to be
    obnoxious)

@


1.1.1.1
log
@Perl 5.12.2 from CPAN
@
text
@@


1.1.1.2
log
@Import perl-5.18.2

OK espie@@ sthen@@ deraadt@@
@
text
@d1 25
a25 25
    This is a test to see if I can do not only `$self' and `method()', but
    also `$self->method()' and `$self->{FIELDNAME}' and `$Foo <=> $Bar'
    without resorting to escape sequences. If I want to refer to the
    right-shift operator I can do something like `$x >> 3' or even `$y >>
    5'.

    Now for the grand finale of `$self->method()->{FIELDNAME} = {FOO=>BAR}'.
    And I also want to make sure that newlines work like this
    `$self->{FOOBAR} >> 3 and [$b => $a]->[$a <=> $b]'

    Of course I should still be able to do all this *with* escape sequences
    too: `$self->method()' and `$self->{FIELDNAME}' and `{FOO=>BAR}'.

    Dont forget `$self->method()->{FIELDNAME} = {FOO=>BAR}'.

    And make sure that `0' works too!

    Now, if I use << or >> as my delimiters, then I have to use whitespace.
    So things like `<$self-'method()>> and `<$self-'{FIELDNAME}>> wont end
    up doing what you might expect since the first > will still terminate
    the first < seen.

    Lets make sure these work for empty ones too, like and `>>' (just to be
    obnoxious)

@

