head	1.1;
branch	1.1.1;
access;
symbols
	OPENBSD_6_2_BASE:1.1.1.2
	PERL_5_24_2:1.1.1.2
	OPENBSD_6_1:1.1.1.2.0.14
	OPENBSD_6_1_BASE:1.1.1.2
	OPENBSD_6_0:1.1.1.2.0.12
	OPENBSD_6_0_BASE:1.1.1.2
	OPENBSD_5_9:1.1.1.2.0.6
	OPENBSD_5_9_BASE:1.1.1.2
	OPENBSD_5_8:1.1.1.2.0.8
	OPENBSD_5_8_BASE:1.1.1.2
	PERL_5_20_2:1.1.1.2
	OPENBSD_5_7:1.1.1.2.0.2
	OPENBSD_5_7_BASE:1.1.1.2
	PERL_5_20_1:1.1.1.2
	OPENBSD_5_6:1.1.1.2.0.4
	OPENBSD_5_6_BASE:1.1.1.2
	PERL_5_18_2:1.1.1.2
	PERL:1.1.1
	OPENBSD_5_5:1.1.1.1.0.16
	OPENBSD_5_5_BASE:1.1.1.1
	OPENBSD_5_4:1.1.1.1.0.12
	OPENBSD_5_4_BASE:1.1.1.1
	PERL_5_16_3:1.1.1.1
	OPENBSD_5_3:1.1.1.1.0.10
	OPENBSD_5_3_BASE:1.1.1.1
	OPENBSD_5_2:1.1.1.1.0.8
	OPENBSD_5_2_BASE:1.1.1.1
	OPENBSD_5_1_BASE:1.1.1.1
	OPENBSD_5_1:1.1.1.1.0.6
	OPENBSD_5_0:1.1.1.1.0.4
	OPENBSD_5_0_BASE:1.1.1.1
	OPENBSD_4_9:1.1.1.1.0.2
	OPENBSD_4_9_BASE:1.1.1.1
	PERL_5_12_2:1.1.1.1
	CPAN:1.1.1;
locks; strict;
comment	@# @;
expand	@o@;


1.1
date	2010.09.24.14.49.06;	author millert;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	2010.09.24.14.49.06;	author millert;	state Exp;
branches;
next	1.1.1.2;

1.1.1.2
date	2014.03.24.14.58.52;	author afresh1;	state Exp;
branches;
next	;


desc
@@


1.1
log
@Initial revision
@
text
@#!/usr/bin/perl -w
# Test for File::Temp - Security levels

# Some of the security checking will not work on all platforms
# Test a simple open in the cwd and tmpdir foreach of the
# security levels

use Test;
BEGIN { plan tests => 13 }

use strict;
use File::Spec;

# Set up END block - this needs to happen before we load
# File::Temp since this END block must be evaluated after the
# END block configured by File::Temp
my @@files; # list of files to remove
END { foreach (@@files) { ok( !(-e $_) )} }

use File::Temp qw/ tempfile unlink0 /;
ok(1);

# The high security tests must currently be skipped on some platforms
my $skipplat = ( (
		  # No sticky bits.
		  $^O eq 'MSWin32' || $^O eq 'NetWare' || $^O eq 'os2' || $^O eq 'dos' || $^O eq 'mpeix' || $^O eq 'MacOS'
		  ) ? 1 : 0 );

# Can not run high security tests in perls before 5.6.0
my $skipperl  = ($] < 5.006 ? 1 : 0 );

# Determine whether we need to skip things and why
my $skip = 0;
if ($skipplat) {
  $skip = "Skip Not supported on this platform";
} elsif ($skipperl) {
  $skip = "Skip Perl version must be v5.6.0 for these tests";

}

print "# We will be skipping some tests : $skip\n" if $skip;

# start off with basic checking

File::Temp->safe_level( File::Temp::STANDARD );

print "# Testing with STANDARD security...\n";

&test_security(0);

# Try medium

File::Temp->safe_level( File::Temp::MEDIUM )
  unless $skip;

print "# Testing with MEDIUM security...\n";

# Now we need to start skipping tests
&test_security($skip);

# Try HIGH

File::Temp->safe_level( File::Temp::HIGH )
  unless $skip;

print "# Testing with HIGH security...\n";

&test_security($skip);

exit;

# Subroutine to open two temporary files.
# one is opened in the current dir and the other in the temp dir

sub test_security {

  # Read in the skip flag
  my $skip = shift;

  # If we are skipping we need to simply fake the correct number
  # of tests -- we dont use skip since the tempfile() commands will
  # fail with MEDIUM/HIGH security before the skip() command would be run
  if ($skip) {

    skip($skip,1);
    skip($skip,1);

    # plus we need an end block so the tests come out in the right order
    eval q{ END { skip($skip,1); skip($skip,1)  } 1; } || die;

    return;
  }

  # Create the tempfile
  my $template = "tmpXXXXX";
  my ($fh1, $fname1) = eval { tempfile ( $template, 
				  DIR => File::Spec->tmpdir,
				  UNLINK => 1,
				);
			    };

  if (defined $fname1) {
      print "# fname1 = $fname1\n";
      ok( (-e $fname1) );
      push(@@files, $fname1); # store for end block
  } elsif (File::Temp->safe_level() != File::Temp::STANDARD) {
      chomp($@@);
      my $skip2 = "Skip: " . File::Spec->tmpdir() . " possibly insecure:  $@@.  " .
	 "See INSTALL under 'make test'";
      skip($skip2, 1);
      # plus we need an end block so the tests come out in the right order
      eval q{ END { skip($skip2,1); } 1; } || die;
  } else {
      ok(0);
  }

  # Explicitly 
  if ( $< < File::Temp->top_system_uid() ){
      skip("Skip Test inappropriate for root", 1);
      eval q{ END { skip($skip,1); } 1; } || die;
      return;
  }
  my ($fh2, $fname2) = eval { tempfile ($template,  UNLINK => 1 ); };
  if (defined $fname2) {
      print "# fname2 = $fname2\n";
      ok( (-e $fname2) );
      push(@@files, $fname2); # store for end block
      close($fh2);
  } elsif (File::Temp->safe_level() != File::Temp::STANDARD) {
      chomp($@@);
      my $skip2 = "Skip: current directory possibly insecure: $@@.  " .
	 "See INSTALL under 'make test'";
      skip($skip2, 1);
      # plus we need an end block so the tests come out in the right order
      eval q{ END { skip($skip2,1); } 1; } || die;
  } else {
      ok(0);
  }

}
@


1.1.1.1
log
@Perl 5.12.2 from CPAN
@
text
@@


1.1.1.2
log
@Import perl-5.18.2

OK espie@@ sthen@@ deraadt@@
@
text
@d8 2
a9 1
use Test::More tests => 12;
d21 1
d35 1
a35 1
  $skip = "Not supported on this platform";
d37 1
a37 1
  $skip = "Perl version must be v5.6.0 for these tests";
d49 1
a49 1
test_security();
d51 1
a51 2
SKIP: {
  skip $skip, 8 if $skip;
d53 2
a54 1
  # Try medium
d56 1
a56 1
  File::Temp->safe_level( File::Temp::MEDIUM );
d58 2
a59 1
  print "# Testing with MEDIUM security...\n";
d61 1
a61 2
  # Now we need to start skipping tests
  test_security();
d63 2
a64 1
  # Try HIGH
d66 1
a66 1
  File::Temp->safe_level( File::Temp::HIGH );
d68 1
a68 4
  print "# Testing with HIGH security...\n";

  test_security();
}
d77 17
d102 13
a114 12
  SKIP: {
    if (defined $fname1) {
        print "# fname1 = $fname1\n";
        ok( (-e $fname1) );
        push(@@files, $fname1); # store for end block
    } elsif (File::Temp->safe_level() != File::Temp::STANDARD) {
        chomp($@@);
        my $msg = File::Spec->tmpdir() . " possibly insecure: $@@";
        skip $msg, 2; # one here and one in END
    } else {
        ok(0);
    }
d117 21
a137 19
  SKIP: {
    # Explicitly 
    if ( $< < File::Temp->top_system_uid() ){
        skip("Skip Test inappropriate for root", 2);
        return;
    }
    my ($fh2, $fname2) = eval { tempfile ($template,  UNLINK => 1 ); };
    if (defined $fname2) {
        print "# fname2 = $fname2\n";
        ok( (-e $fname2) );
        push(@@files, $fname2); # store for end block
        close($fh2);
    } elsif (File::Temp->safe_level() != File::Temp::STANDARD) {
        chomp($@@);
        my $msg = "current directory possibly insecure: $@@";
        skip $msg, 2; # one here and one in END
    } else {
        ok(0);
    }
d139 1
a140 2

# vim: ts=2 sts=2 sw=2 et:
@

