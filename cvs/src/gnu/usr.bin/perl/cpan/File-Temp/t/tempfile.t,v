head	1.1;
branch	1.1.1;
access;
symbols
	OPENBSD_6_0:1.1.1.2.0.12
	OPENBSD_6_0_BASE:1.1.1.2
	OPENBSD_5_9:1.1.1.2.0.6
	OPENBSD_5_9_BASE:1.1.1.2
	OPENBSD_5_8:1.1.1.2.0.8
	OPENBSD_5_8_BASE:1.1.1.2
	PERL_5_20_2:1.1.1.2
	OPENBSD_5_7:1.1.1.2.0.2
	OPENBSD_5_7_BASE:1.1.1.2
	PERL_5_20_1:1.1.1.2
	OPENBSD_5_6:1.1.1.2.0.4
	OPENBSD_5_6_BASE:1.1.1.2
	PERL_5_18_2:1.1.1.2
	PERL:1.1.1
	OPENBSD_5_5:1.1.1.1.0.16
	OPENBSD_5_5_BASE:1.1.1.1
	OPENBSD_5_4:1.1.1.1.0.12
	OPENBSD_5_4_BASE:1.1.1.1
	PERL_5_16_3:1.1.1.1
	OPENBSD_5_3:1.1.1.1.0.10
	OPENBSD_5_3_BASE:1.1.1.1
	OPENBSD_5_2:1.1.1.1.0.8
	OPENBSD_5_2_BASE:1.1.1.1
	OPENBSD_5_1_BASE:1.1.1.1
	OPENBSD_5_1:1.1.1.1.0.6
	OPENBSD_5_0:1.1.1.1.0.4
	OPENBSD_5_0_BASE:1.1.1.1
	OPENBSD_4_9:1.1.1.1.0.2
	OPENBSD_4_9_BASE:1.1.1.1
	PERL_5_12_2:1.1.1.1
	CPAN:1.1.1;
locks; strict;
comment	@# @;
expand	@o@;


1.1
date	2010.09.24.14.49.06;	author millert;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	2010.09.24.14.49.06;	author millert;	state Exp;
branches;
next	1.1.1.2;

1.1.1.2
date	2014.03.24.14.58.52;	author afresh1;	state Exp;
branches;
next	;


desc
@@


1.1
log
@Initial revision
@
text
@#!/usr/local/bin/perl -w
# Test for File::Temp - tempfile function

use strict;
use Test;
BEGIN { plan tests => 22}
use File::Spec;

# Will need to check that all files were unlinked correctly
# Set up an END block here to do it

# Arrays containing list of dirs/files to test
my (@@files, @@dirs, @@still_there);

# And a test for files that should still be around
# These are tidied up
END {
  foreach (@@still_there) {
    ok( -f $_ );
    ok( unlink( $_ ) );
    ok( !(-f $_) );
  }
}

# Loop over an array hoping that the files dont exist
END { foreach (@@files) { ok( !(-e $_) )} }

# And a test for directories
END { foreach (@@dirs)  { ok( !(-d $_) )} }

# Need to make sure that the END blocks are setup before
# the ones that File::Temp configures since END blocks are evaluated
# in revers order and we need to check the files *after* File::Temp
# removes them
use File::Temp qw/ tempfile tempdir/;

# Now we start the tests properly
ok(1);


# Tempfile
# Open tempfile in some directory, unlink at end
my ($fh, $tempfile) = tempfile(
			       UNLINK => 1,
			       SUFFIX => '.txt',
			      );

ok( (-f $tempfile) );
# Should still be around after closing
ok( close( $fh ) ); 
ok( (-f $tempfile) );
# Check again at exit
push(@@files, $tempfile);

# TEMPDIR test
# Create temp directory in current dir
my $template = 'tmpdirXXXXXX';
print "# Template: $template\n";
my $tempdir = tempdir( $template ,
		       DIR => File::Spec->curdir,
		       CLEANUP => 1,
		     );

print "# TEMPDIR: $tempdir\n";

ok( (-d $tempdir) );
push(@@dirs, $tempdir);

# Create file in the temp dir
($fh, $tempfile) = tempfile(
			    DIR => $tempdir,
			    UNLINK => 1,
			    SUFFIX => '.dat',
			   );

print "# TEMPFILE: Created $tempfile\n";

ok( (-f $tempfile));
push(@@files, $tempfile);

# Test tempfile
# ..and again
($fh, $tempfile) = tempfile(
			    DIR => $tempdir,
			   );


ok( (-f $tempfile ));
push(@@files, $tempfile);

# Test tempfile
# ..and another with changed permissions (read-only)
($fh, $tempfile) = tempfile(
                           DIR => $tempdir,
                          );
chmod 0444, $tempfile;

ok( (-f $tempfile ));
push(@@files, $tempfile);

print "# TEMPFILE: Created $tempfile\n";

# and another (with template)

($fh, $tempfile) = tempfile( 'helloXXXXXXX',
			    DIR => $tempdir,
			    UNLINK => 1,
			    SUFFIX => '.dat',
			   );

print "# TEMPFILE: Created $tempfile\n";

ok( (-f $tempfile) );
push(@@files, $tempfile);


# Create a temporary file that should stay around after
# it has been closed
($fh, $tempfile) = tempfile( 'permXXXXXXX', UNLINK => 0 );
print "# TEMPFILE: Created $tempfile\n";
ok( -f $tempfile );
ok( close( $fh ) );
push( @@still_there, $tempfile); # check at END

# Would like to create a temp file and just retrieve the handle
# but the test is problematic since:
#  - We dont know the filename so we cant check that it is tidied
#    correctly
#  - The unlink0 required on unix for tempfile creation will fail
#    on NFS
# Try to do what we can.
# Tempfile croaks on error so we need an eval
$fh = eval { tempfile( 'ftmpXXXXX', DIR => File::Spec->tmpdir ) };

if ($fh) {

  # print something to it to make sure something is there
  ok( print $fh "Test\n" );

  # Close it - can not check it is gone since we dont know the name
  ok( close($fh) );

} else {
  skip "Skip Failed probably due to NFS", 1;
  skip "Skip Failed probably due to NFS", 1;
}

# Now END block will execute to test the removal of directories
print "# End of tests. Execute END blocks\n";

@


1.1.1.1
log
@Perl 5.12.2 from CPAN
@
text
@@


1.1.1.2
log
@Import perl-5.18.2

OK espie@@ sthen@@ deraadt@@
@
text
@d5 2
a6 1
use Test::More tests => 28;
a7 1
use Cwd qw/ cwd /;
d19 3
a21 4
    ($_) = /(^.*)/; # untaint for testing under taint mode
    ok( -f $_, "File $_ is still present" );
    ok( unlink( $_ ), "Unlink file" );
    ok( !(-f $_), "File is no longer present" );
d26 1
a26 1
END { foreach (@@files) { ok( !(-e $_), "File $_ should not be present" )} }
d29 1
a29 1
END { foreach (@@dirs)  { ok( !(-d $_), "Dir $_ should not be present" )} }
d38 1
a38 1
ok(1, "Start test");
d48 1
a48 1
ok( (-f $tempfile), "Tempfile exists" );
d50 2
a51 2
ok( close( $fh ), "Tempfile closed" );
ok( (-f $tempfile), "Tempfile exists" );
d66 2
a67 12
ok( (-d $tempdir), "Local tempdir exists" );
push(@@dirs, File::Spec->rel2abs($tempdir));

my $tempdir2 = tempdir( TEMPLATE => "customXXXXX",
		       DIR => File::Spec->curdir,
		       CLEANUP => 1,
		     );

print "# TEMPDIR2: $tempdir2\n";

like( $tempdir2, qr/custom/, "tempdir with TEMPLATE" );
push(@@dirs, File::Spec->rel2abs($tempdir));
d78 2
a79 2
ok( (-f $tempfile), "Local temp file exists with .dat extension");
push(@@files, File::Spec->rel2abs($tempfile));
d88 2
a89 2
ok( (-f $tempfile ), "Local tempfile in tempdir exists");
push(@@files, File::Spec->rel2abs($tempfile));
d98 2
a99 2
ok( (-f $tempfile ), "Local tempfile in tempdir exists read-only");
push(@@files, File::Spec->rel2abs($tempfile));
d113 2
a114 3
ok( (-f $tempfile), "Local tempfile in tempdir with .dat extension exists" );
push(@@files, File::Spec->rel2abs($tempfile));

a115 12
# and another (with TEMPLATE)

($fh, $tempfile) = tempfile( TEMPLATE => 'goodbyeXXXXXXX',
			    DIR => $tempdir,
			    UNLINK => 1,
			    SUFFIX => '.dat',
			   );

print "# TEMPFILE: Created $tempfile\n";

ok( (-f $tempfile), "Local tempfile in tempdir with TEMPLATE" );
push(@@files, File::Spec->rel2abs($tempfile));
d121 3
a123 3
ok( -f $tempfile, "Long-lived temp file" );
ok( close( $fh ), "Close long-lived temp file" );
push( @@still_there, File::Spec->rel2abs($tempfile) ); # check at END
d138 1
a138 1
  ok( print($fh "Test\n"), "Write to temp file" );
d141 1
a141 1
  ok( close($fh), "Close temp file" );
a147 9
# Create temp directory and chdir to it; it should still be removed on exit.
$tempdir = tempdir(CLEANUP => 1);

print "# TEMPDIR: $tempdir\n";

ok( (-d $tempdir), "Temp directory in temp dir" );
chdir $tempdir or die $!;
push(@@dirs, File::Spec->rel2abs($tempdir));

d149 1
a149 1
print "# End of tests. Execute END blocks in directory ". cwd() ."\n";
@

