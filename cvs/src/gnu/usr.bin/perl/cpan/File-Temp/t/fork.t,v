head	1.1;
branch	1.1.1;
access;
symbols
	OPENBSD_6_2_BASE:1.1.1.1
	PERL_5_24_2:1.1.1.1
	OPENBSD_6_1:1.1.1.1.0.28
	OPENBSD_6_1_BASE:1.1.1.1
	OPENBSD_6_0:1.1.1.1.0.26
	OPENBSD_6_0_BASE:1.1.1.1
	OPENBSD_5_9:1.1.1.1.0.20
	OPENBSD_5_9_BASE:1.1.1.1
	OPENBSD_5_8:1.1.1.1.0.22
	OPENBSD_5_8_BASE:1.1.1.1
	PERL_5_20_2:1.1.1.1
	OPENBSD_5_7:1.1.1.1.0.14
	OPENBSD_5_7_BASE:1.1.1.1
	PERL_5_20_1:1.1.1.1
	OPENBSD_5_6:1.1.1.1.0.18
	OPENBSD_5_6_BASE:1.1.1.1
	PERL_5_18_2:1.1.1.1
	PERL:1.1.1
	OPENBSD_5_5:1.1.1.1.0.16
	OPENBSD_5_5_BASE:1.1.1.1
	OPENBSD_5_4:1.1.1.1.0.12
	OPENBSD_5_4_BASE:1.1.1.1
	PERL_5_16_3:1.1.1.1
	OPENBSD_5_3:1.1.1.1.0.10
	OPENBSD_5_3_BASE:1.1.1.1
	OPENBSD_5_2:1.1.1.1.0.8
	OPENBSD_5_2_BASE:1.1.1.1
	OPENBSD_5_1_BASE:1.1.1.1
	OPENBSD_5_1:1.1.1.1.0.6
	OPENBSD_5_0:1.1.1.1.0.4
	OPENBSD_5_0_BASE:1.1.1.1
	OPENBSD_4_9:1.1.1.1.0.2
	OPENBSD_4_9_BASE:1.1.1.1
	PERL_5_12_2:1.1.1.1
	CPAN:1.1.1;
locks; strict;
comment	@# @;
expand	@o@;


1.1
date	2010.09.24.14.49.06;	author millert;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	2010.09.24.14.49.06;	author millert;	state Exp;
branches;
next	;


desc
@@


1.1
log
@Initial revision
@
text
@#!/usr/bin/perl
$| = 1;

# Note that because fork loses test count we do not use Test::More

use strict;

BEGIN {
  require Config;
  my $can_fork = $Config::Config{d_fork} ||
    (($^O eq 'MSWin32' || $^O eq 'NetWare') and
     $Config::Config{useithreads} and
     $Config::Config{ccflags} =~ /-DPERL_IMPLICIT_SYS/
    );
  if ( $can_fork ) {
    print "1..8\n";
  } else {
    print "1..0 # Skip No fork available\n";
    exit;
  }
}

use File::Temp;

# OO interface

my $file = File::Temp->new();

myok( 1, -f $file->filename, "OO File exists" );

my $children = 2;
for my $i (1 .. $children) {
  my $pid = fork;
  die "Can't fork: $!" unless defined $pid;
  if ($pid) {
    # parent process
    next;
  } else {
    # in a child we can't keep the count properly so we do it manually
    # make sure that child 1 dies first
    srand();
    my $time = (($i-1) * 5) +int(rand(5));
    print "# child $i sleeping for $time seconds\n";
    sleep($time);
    my $count = $i + 1;
    myok( $count, -f $file->filename(), "OO file present in child $i" );
    print "# child $i exiting\n";
    exit;
  }
}

while ($children) {
    wait;
    $children--;
}



myok( 4, -f $file->filename(), "OO File exists in parent" );

# non-OO interface

my ($fh, $filename) = File::Temp::tempfile( UNLINK => 1 );

myok( 5, -f $filename, "non-OO File exists" );

$children = 2;
for my $i (1 .. $children) {
  my $pid = fork;
  die "Can't fork: $!" unless defined $pid;
  if ($pid) {
    # parent process
    next;
  } else {
    srand();
    my $time = (($i-1) * 5) +int(rand(5));
    print "# child $i sleeping for $time seconds\n";
    sleep($time);
    my $count = 5 + $i;
    myok( $count, -f $filename, "non-OO File present in child $i" );
    print "# child $i exiting\n";
    exit;
  }
}

while ($children) {
    wait;
    $children--;
}
myok(8, -f $filename, "non-OO File exists in parent" );


# Local ok sub handles explicit number
sub myok {
  my ($count, $test, $msg) = @@_;

  if ($test) {
    print "ok $count - $msg\n";
  } else {
    print "not ok $count - $msg\n";
  }
  return $test;
}
@


1.1.1.1
log
@Perl 5.12.2 from CPAN
@
text
@@
