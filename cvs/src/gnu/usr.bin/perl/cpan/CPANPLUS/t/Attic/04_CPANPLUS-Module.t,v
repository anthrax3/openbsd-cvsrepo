head	1.2;
access;
symbols
	OPENBSD_5_6:1.1.1.2.0.8
	OPENBSD_5_6_BASE:1.1.1.2
	PERL_5_18_2:1.1.1.2
	PERL:1.1.1
	OPENBSD_5_5:1.1.1.2.0.6
	OPENBSD_5_5_BASE:1.1.1.2
	OPENBSD_5_4:1.1.1.2.0.2
	OPENBSD_5_4_BASE:1.1.1.2
	PERL_5_16_3:1.1.1.2
	OPENBSD_5_3:1.1.1.1.0.10
	OPENBSD_5_3_BASE:1.1.1.1
	OPENBSD_5_2:1.1.1.1.0.8
	OPENBSD_5_2_BASE:1.1.1.1
	OPENBSD_5_1_BASE:1.1.1.1
	OPENBSD_5_1:1.1.1.1.0.6
	OPENBSD_5_0:1.1.1.1.0.4
	OPENBSD_5_0_BASE:1.1.1.1
	OPENBSD_4_9:1.1.1.1.0.2
	OPENBSD_4_9_BASE:1.1.1.1
	PERL_5_12_2:1.1.1.1
	CPAN:1.1.1;
locks; strict;
comment	@# @;
expand	@o@;


1.2
date	2014.11.17.20.56.57;	author afresh1;	state dead;
branches;
next	1.1;
commitid	QP75iYx42Uo7mMxO;

1.1
date	2010.09.24.14.49.04;	author millert;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	2010.09.24.14.49.04;	author millert;	state Exp;
branches;
next	1.1.1.2;

1.1.1.2
date	2013.03.25.20.06.57;	author sthen;	state Exp;
branches;
next	;


desc
@@


1.2
log
@Fix merge conflicts, remove extra files, match upstream perl-5.20.1

ok deraadt@@ sthen@@ espie@@ miod@@
@
text
@### make sure we can find our conf.pl file
BEGIN { 
    use FindBin; 
    require "$FindBin::Bin/inc/conf.pl";
}

use strict;

use CPANPLUS::Configure;
use CPANPLUS::Backend;
use CPANPLUS::Module::Fake;
use CPANPLUS::Module::Author::Fake;
use CPANPLUS::Internals::Constants;

use Test::More 'no_plan';
use Data::Dumper;
use File::Spec;
use File::Path ();

my $Conf    = gimme_conf();
my $CB      = CPANPLUS::Backend->new( $Conf );

### start with fresh sources ###
ok( $CB->reload_indices( update_source => 0 ),  "Rebuilding trees" );  

my $AuthName    = TEST_CONF_AUTHOR;
my $Auth        = $CB->author_tree( $AuthName );
my $ModName     = TEST_CONF_MODULE;
my $Mod         = $CB->module_tree( $ModName );
my $CoreName    = TEST_CONF_PREREQ;
my $CoreMod     = $CB->module_tree( $CoreName );

isa_ok( $Auth,                  'CPANPLUS::Module::Author' );
isa_ok( $Mod,                   'CPANPLUS::Module' );
isa_ok( $CoreMod,               'CPANPLUS::Module' );

### author accessors ###
is( $Auth->author, 'ExtUtils::MakeMaker No XS Code',
                                "Author name: "     . $Auth->author );
is( $Auth->cpanid, $AuthName,   "Author CPANID: "   . $Auth->cpanid );
is( $Auth->email, DEFAULT_EMAIL,"Author email: "    . $Auth->email );
isa_ok( $Auth->parent,          'CPANPLUS::Backend' );

### module accessors ###
{   my %map = (
        ### method      ### result
        module      =>  $ModName,
        name        =>  $ModName,
        comment     =>  undef,
        package     =>  'Foo-Bar-0.01.tar.gz',
        path        =>  'authors/id/EUNOXS',      
        version     =>  '0.01',
        dslip       =>  'cdpO ',
        description =>  'CPANPLUS Test Package', 
        mtime       =>  '',
        author      =>  $Auth,
    );        

    my @@acc = $Mod->accessors;
    ok( scalar(@@acc),           "Retrieved module accessors" );
    
    ### remove private accessors
    is_deeply( [ sort keys %map ], [ sort grep { $_ !~ /^_/ } @@acc ],
                                "   About to test all accessors" );

    ### check all the accessors
    while( my($meth,$res) = each %map ) {
        is( $Mod->$meth, $res,  "   Mod->$meth: " . ($res || '<empty>') );
    }

    ### check accessor objects ###
    isa_ok( $Mod->parent,       'CPANPLUS::Backend' );
    isa_ok( $Mod->author,       'CPANPLUS::Module::Author' );
    is( $Mod->author->author, $Auth->author,            
                                "Module eq Author" );
}

### convenience methods ###
{   ok( 1,                                          "Convenience functions" );
    is( $Mod->package_name,      'Foo-Bar',         "   Package name");
    is( $Mod->package_version,   '0.01',            "   Package version");
    is( $Mod->package_extension, 'tar.gz',          "   Package extension");
    ok( !$Mod->package_is_perl_core,                "   Package not core");
    ok( !$Mod->module_is_supplied_with_perl_core,   "   Module not core" );
    ok( !$Mod->is_bundle,                           "   Package not bundle");
}

### clone & status tests
{   my $clone = $Mod->clone;
    ok( $clone,                 "Module cloned" );
    isa_ok( $clone,             'CPANPLUS::Module' );
    
    for my $acc ( $Mod->accessors ) {
        is( $clone->$acc, $Mod->$acc,
                                "   Clone->$acc matches Mod->$acc " );
    }
    
    ### XXX whitebox test 
    ok( !$clone->_status,      "Status object empty on start" );
    
    my $status = $clone->status;
    ok( $status,                "   Status object defined after query" );
    is( $status, $clone->_status, 
                                "   Object stored as expected" );
    isa_ok( $status,            'Object::Accessor' );
}

{   ### extract + error test ###
    ok( !$Mod->extract(),   "Cannot extract unfetched file" );
    like( CPANPLUS::Error->stack_as_string, qr/You have not fetched/,
                            "   Error properly logged" );
}      

{   ### fetch tests ###
    ### enable signature checks for checksums ###
    my $old = $Conf->get_conf('signature');
    $Conf->set_conf(signature => 1);  
    
    my $where = $Mod->fetch( force => 1 );
    ok( $where,             "Module fetched" );
    ok( -f $where,          "   Module is a file" );
    ok( -s $where,          "   Module has size" );
    
    $Conf->set_conf( signature => $old );
}

{   ### extract tests ###
    my $dir = $Mod->extract( force => 1 );
    ok( $dir,               "Module extracted" );
    ok( -d $dir,            "   Dir exsits" );
}


{   ### readme tests ###
    my $readme = $Mod->readme;
    ok( length $readme,     "Readme found" );
    is( $readme, $Mod->status->readme,
                            "   Readme stored in module object" );
}

{   ### checksums tests ###
    SKIP: {
        skip(q[You chose not to enable checksum verification], 5)
            unless $Conf->get_conf('md5');
    
        my $cksum_file = $Mod->checksums;
        ok( $cksum_file,    "Checksum file found" );
        is( $cksum_file, $Mod->status->checksums,
                            "   File stored in module object" );
        ok( -e $cksum_file, "   File exists" );
        ok( -s $cksum_file, "   File has size" );
    
        ### XXX test checksum_value if there's digest::md5 + config wants it
        ok( $Mod->status->checksum_ok,
                            "   Checksum is ok" );
                            
        ### check ttl code for checksums; fetching it now means the cache 
        ### should kick in
        {   CPANPLUS::Error->flush;
            ok( $Mod->checksums,       
                            "   Checksums re-fetched" );
            like( CPANPLUS::Error->stack_as_string, qr/Using cached file/,
                            "       Cached file used" );
        }                            
    }
}


{   ### installer type tests ###
    my $installer  = $Mod->get_installer_type;
    ok( $installer,         "Installer found" );
    is( $installer, INSTALLER_MM,
                            "   Proper installer found" );
}

{   ### check signature tests ###
    SKIP: {
        skip(q[You chose not to enable signature checks], 1)
            unless $Conf->get_conf('signature');
            
        ok( $Mod->check_signature,
                            "Signature check OK" );
    }
}

### dslip & related
{   my $dslip = $Mod->dslip;   
    ok( $dslip,             "Got dslip information from $ModName ($dslip)" );

    ### now find it for a submodule
    {   my $submod = $CB->module_tree( TEST_CONF_MODULE_SUB );
        ok( $submod,        "   Found submodule " . $submod->name );
        ok( $submod->dslip, "   Got dslip info (".$submod->dslip.")" );
        is( $submod->dslip, $dslip,
                            "   It's identical to $ModName" );
    }                            
}

{   ### details() test ###   
    my $href = {
        'Support Level'     => 'Developer',
        'Package'           => $Mod->package,
        'Description'       => $Mod->description,
        'Development Stage' => 
                'under construction but pre-alpha (not yet released)',
        'Author'            => sprintf("%s (%s)", $Auth->author, $Auth->email),
        'Version on CPAN'   => $Mod->version,
        'Language Used'     => 
                'Perl-only, no compiler needed, should be platform independent',
        'Interface Style'   => 
                'Object oriented using blessed references and/or inheritance',
        'Public License'    => 'Unknown',                
        ### XXX we can't really know what you have installed ###
        #'Version Installed' => '0.06',
    };   

    my $res = $Mod->details;
    
    ### delete they key of which we don't know the value ###
    delete $res->{'Version Installed'};
    
    is_deeply( $res, $href, "Details OK" );        
}

{   ### contians() test ###
    ### XXX ->contains works based on package name. in our sourcefiles
    ### we use 4x the same package name for different modules. So use
    ### the only unique package name here, which is the one for the core mod
    my @@list = $CoreMod->contains;
    
    ok( scalar(@@list),          "Found modules contained in this one" );
    is_deeply( \@@list, [$CoreMod],  
                                "   Found all modules expected" );
}

{   ### testing distributions() ###
    my @@mdists = $Mod->distributions;
    is( scalar @@mdists, 1, "Distributions found via module" );

    my @@adists = $Auth->distributions;
    is( scalar @@adists, 3,  "Distributions found via author" );
}

{   ### test status->flush ###
    ok( $Mod->status->mk_flush,
                            "Status flushed" );
    ok(!$Mod->status->fetch,"   Fetch status empty" );
    ok(!$Mod->status->extract,
                            "   Extract status empty" );
    ok(!$Mod->status->checksums,
                            "   Checksums status empty" );
    ok(!$Mod->status->readme,
                            "   Readme status empty" );
}

{   ### testing bundles ###
    my $bundle = $CB->module_tree('Bundle::Foo::Bar');
    isa_ok( $bundle,            'CPANPLUS::Module' );

    ok( $bundle->is_bundle,     "   It's a Bundle:: module" );
    ok( $bundle->fetch,         "   Fetched the bundle" );
    ok( $bundle->extract,       "   Extracted the bundle" );

    my @@objs = $bundle->bundle_modules;
    is( scalar(@@objs), 5,       "   Found all prerequisites" );
    
    for( @@objs ) {
        isa_ok( $_, 'CPANPLUS::Module', 
                                "   Prereq " . $_->module  );
        ok( defined $bundle->status->prereqs->{$_->module},
                                "       Prereq was registered" );
    }
}

{   ### testing autobundles
    my $file    = File::Spec->catfile( 
                        dummy_cpan_dir(), 
                        $Conf->_get_build('autobundle'),
                        'Snapshot.pm' 
                    );
    my $uri     = $CB->_host_to_uri( scheme => 'file', path => $file );
    my $bundle  = $CB->parse_module( module => $uri );
    
    ok( -e $file,               "Creating bundle from '$file'" );
    ok( $bundle,                "   Object created" );
    isa_ok( $bundle, 'CPANPLUS::Module',
                                "   Object" );
    ok( $bundle->is_bundle,     "   Recognized as bundle" );
    ok( $bundle->is_autobundle, "   Recognized as autobundle" );
    
    my $type = $bundle->get_installer_type;
    ok( $type,                  "   Found installer type" );
    is( $type, INSTALLER_AUTOBUNDLE,
                                "       Installer type is $type" );

    my $where = $bundle->fetch;
    ok( $where,                 "   Autobundle fetched" );
    ok( -e $where,              "       File exists" );


    my @@list = $bundle->bundle_modules;
    ok( scalar(@@list),          "   Prereqs found" );
    is( scalar(@@list), 1,       "       Right number of prereqs" );
    isa_ok( $list[0], 'CPANPLUS::Module',
                                "       Object" );
                                
    ### skiptests to make sure we don't get any test header mismatches
    my $rv = $bundle->create( prereq_target => 'create', skiptest => 1 );
    ok( $rv,                    "   Tested prereqs" );

}

### test module from perl core ###
{   isa_ok( $CoreMod, 'CPANPLUS::Module',
                                "Core module " . $CoreName );
    ok( $CoreMod->package_is_perl_core, 
                                "   Package found in perl core" );
    
    ### check if it's core with 5.6.1
    {   local $] = '5.006001';
        ok( $CoreMod->module_is_supplied_with_perl_core,
                                "   Module also found in perl core");
    }
    
    ok( !$CoreMod->install,     "   Package not installed" );
    like( CPANPLUS::Error->stack_as_string, qr/core Perl/,
                                "   Error properly logged" );
}    

### test third-party modules
SKIP: {
    skip "Module::ThirdParty not installed", 10 
        unless eval { require Module::ThirdParty; 1 };

    ok( !$Mod->is_third_party, 
                                "Not a 3rd party module: ". $Mod->name );
    
    my $fake = $CB->parse_module( module => 'LOCAL/SVN-Core-1.0' );
    ok( $fake,                  "Created module object for ". $fake->name );
    ok( $fake->is_third_party,
                                "   It is a 3rd party module" );

    my $info = $fake->third_party_information;
    ok( $info,                  "Got 3rd party package information" );
    isa_ok( $info,              'HASH' );
    
    for my $item ( qw[name url author author_url] ) {
        ok( length($info->{$item}),
                                "   $item field is filled" );
    }        
}

### testing EU::Installed methods in Dist::MM tests ###

# Local variables:
# c-indentation-style: bsd
# c-basic-offset: 4
# indent-tabs-mode: nil
# End:
# vim: expandtab shiftwidth=4:
@


1.1
log
@Initial revision
@
text
@@


1.1.1.1
log
@Perl 5.12.2 from CPAN
@
text
@@


1.1.1.2
log
@import perl 5.16.3 from CPAN - worked on by Andrew Fresh and myself
@
text
@d2 2
a3 2
BEGIN {
    use FindBin;
d24 1
a24 1
ok( $CB->reload_indices( update_source => 0 ),  "Rebuilding trees" );
d51 1
a51 1
        path        =>  'authors/id/EUNOXS',
d54 1
a54 1
        description =>  'CPANPLUS Test Package',
d57 1
a57 1
    );
d61 1
a61 1

d74 1
a74 1
    is( $Mod->author->author, $Auth->author,
d92 1
a92 1

d97 2
a98 2

    ### XXX whitebox test
d100 1
a100 1

d103 1
a103 1
    is( $status, $clone->_status,
d112 1
a112 1
}
d117 2
a118 2
    $Conf->set_conf(signature => 1);

d123 1
a123 1

d145 1
a145 1

d152 1
a152 1

d156 2
a157 2

        ### check ttl code for checksums; fetching it now means the cache
d160 1
a160 1
            ok( $Mod->checksums,
d164 1
a164 1
        }
d180 1
a180 1

d187 1
a187 1
{   my $dslip = $Mod->dslip;
d196 1
a196 1
    }
d199 1
a199 1
{   ### details() test ###
d204 1
a204 1
        'Development Stage' =>
d208 1
a208 1
        'Language Used'     =>
d210 1
a210 1
        'Interface Style'   =>
d212 1
a212 1
        'Public License'    => 'Unknown',
d215 1
a215 1
    };
d218 1
a218 1

d221 2
a222 2

    is_deeply( $res, $href, "Details OK" );
d230 1
a230 1

d232 1
a232 1
    is_deeply( \@@list, [$CoreMod],
d266 1
a266 1

d268 1
a268 1
        isa_ok( $_, 'CPANPLUS::Module',
d276 2
a277 2
    my $file    = File::Spec->catfile(
                        dummy_cpan_dir(),
d279 1
a279 1
                        'Snapshot.pm'
d283 1
a283 1

d290 1
a290 1

d306 1
a306 1

d316 1
a316 1
    ok( $CoreMod->package_is_perl_core,
d318 1
a318 1

d324 1
a324 1

d328 1
a328 1
}
d332 1
a332 1
    skip "Module::ThirdParty not installed", 10
d335 1
a335 1
    ok( !$Mod->is_third_party,
d337 1
a337 1

d346 1
a346 1

d350 1
a350 1
    }
@

