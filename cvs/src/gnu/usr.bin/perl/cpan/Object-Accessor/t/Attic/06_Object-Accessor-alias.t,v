head	1.2;
access;
symbols
	OPENBSD_5_6:1.1.1.2.0.8
	OPENBSD_5_6_BASE:1.1.1.2
	PERL_5_18_2:1.1.1.2
	PERL:1.1.1
	OPENBSD_5_5:1.1.1.2.0.6
	OPENBSD_5_5_BASE:1.1.1.2
	OPENBSD_5_4:1.1.1.2.0.2
	OPENBSD_5_4_BASE:1.1.1.2
	PERL_5_16_3:1.1.1.2
	OPENBSD_5_3:1.1.1.1.0.10
	OPENBSD_5_3_BASE:1.1.1.1
	OPENBSD_5_2:1.1.1.1.0.8
	OPENBSD_5_2_BASE:1.1.1.1
	OPENBSD_5_1_BASE:1.1.1.1
	OPENBSD_5_1:1.1.1.1.0.6
	OPENBSD_5_0:1.1.1.1.0.4
	OPENBSD_5_0_BASE:1.1.1.1
	OPENBSD_4_9:1.1.1.1.0.2
	OPENBSD_4_9_BASE:1.1.1.1
	PERL_5_12_2:1.1.1.1
	CPAN:1.1.1;
locks; strict;
comment	@# @;
expand	@o@;


1.2
date	2014.11.17.20.57.03;	author afresh1;	state dead;
branches;
next	1.1;
commitid	QP75iYx42Uo7mMxO;

1.1
date	2010.09.24.14.49.03;	author millert;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	2010.09.24.14.49.03;	author millert;	state Exp;
branches;
next	1.1.1.2;

1.1.1.2
date	2013.03.25.20.07.57;	author sthen;	state Exp;
branches;
next	;


desc
@@


1.2
log
@Fix merge conflicts, remove extra files, match upstream perl-5.20.1

ok deraadt@@ sthen@@ espie@@ miod@@
@
text
@BEGIN { chdir 't' if -d 't' };

use strict;
use lib '../lib';
use Test::More 'no_plan';
use Data::Dumper;

my $Class = 'Object::Accessor';

use_ok($Class);

my $Object      = $Class->new;
my $Acc         = 'foo';
my $Alias       = 'bar';

### basic sanity test
{   ok( $Object,                "Object created" );
    
    ok( $Object->mk_accessors( $Acc ),
                                "   Accessor ->$Acc created" );
    ok( $Object->$Acc( $$ ),    "   ->$Acc set to $$" );
}

### alias tests
{   ok( $Object->mk_aliases( $Alias => $Acc ),
                                "Alias ->$Alias => ->$Acc" );
    ok( $Object->$Alias,        "   ->$Alias returns value" );
    is( $Object->$Acc, $Object->$Alias,
                                "       ->$Alias eq ->$Acc" );
    ok( $Object->$Alias( $0 ),  "   Set value via alias ->$Alias" );                                  
    is( $Object->$Acc, $Object->$Alias,
                                "       ->$Alias eq ->$Acc" );
}    
@


1.1
log
@Initial revision
@
text
@@


1.1.1.1
log
@Perl 5.12.2 from CPAN
@
text
@@


1.1.1.2
log
@import perl 5.16.3 from CPAN - worked on by Andrew Fresh and myself
@
text
@d12 10
a21 43
my $Object  = $Class->new;
my $Acc     = 'foo';
my $Alias   = 'bar';

ok( $Object,                "Object created" );
isa_ok( $Object, $Class,    "   Object" );

### add an accessor
{   my $rv = $Object->mk_accessors( $Acc );
    ok( $rv,                "Created accessor '$Acc'" );
    ok( $Object->$Acc( $$ ),"   Set value" );
    is( $Object->$Acc, $$,  "   Retrieved value" );
}

### add an alias
{   my $rv = $Object->mk_aliases( $Alias => $Acc );
    ok( $rv,                "Created alias '$Alias'" );
    ok( $Object->can( $Alias ),
                            "   Alias '$Alias' exists" );
    is( $Object->$Alias, $Object->$Acc,
                            "   Alias & original return the same value" );

    ok( $Object->$Alias( $$.$$ ),
                            "   Changed value using alias" );
    is( $Object->$Alias, $Object->$Acc,
                            "   Alias & original return the same value" );
}

### test if cloning works
{   my $clone = $Object->mk_clone;
    ok( $clone,             "Cloned object" );

    is_deeply( [sort $clone->ls_accessors], [sort $Object->ls_accessors],
                            "   All accessors cloned" );

    ok( $clone->$Acc( $$ ), "   Set value" );
    is( $clone->$Alias, $clone->$Acc,
                            "   Alias & original return the same value" );

    ok( $clone->$Alias( $$.$$ ),
                            "   Changed value using alias" );
    is( $clone->$Alias, $clone->$Acc,
                            "   Alias & original return the same value" );
d24 10
@

