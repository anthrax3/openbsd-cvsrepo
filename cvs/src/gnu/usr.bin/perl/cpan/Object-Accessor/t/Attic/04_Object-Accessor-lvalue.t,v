head	1.2;
access;
symbols
	OPENBSD_5_6:1.1.1.2.0.8
	OPENBSD_5_6_BASE:1.1.1.2
	PERL_5_18_2:1.1.1.2
	PERL:1.1.1
	OPENBSD_5_5:1.1.1.2.0.6
	OPENBSD_5_5_BASE:1.1.1.2
	OPENBSD_5_4:1.1.1.2.0.2
	OPENBSD_5_4_BASE:1.1.1.2
	PERL_5_16_3:1.1.1.2
	OPENBSD_5_3:1.1.1.1.0.10
	OPENBSD_5_3_BASE:1.1.1.1
	OPENBSD_5_2:1.1.1.1.0.8
	OPENBSD_5_2_BASE:1.1.1.1
	OPENBSD_5_1_BASE:1.1.1.1
	OPENBSD_5_1:1.1.1.1.0.6
	OPENBSD_5_0:1.1.1.1.0.4
	OPENBSD_5_0_BASE:1.1.1.1
	OPENBSD_4_9:1.1.1.1.0.2
	OPENBSD_4_9_BASE:1.1.1.1
	PERL_5_12_2:1.1.1.1
	CPAN:1.1.1;
locks; strict;
comment	@# @;
expand	@o@;


1.2
date	2014.11.17.20.57.03;	author afresh1;	state dead;
branches;
next	1.1;
commitid	QP75iYx42Uo7mMxO;

1.1
date	2010.09.24.14.49.03;	author millert;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	2010.09.24.14.49.03;	author millert;	state Exp;
branches;
next	1.1.1.2;

1.1.1.2
date	2013.03.25.20.07.57;	author sthen;	state Exp;
branches;
next	;


desc
@@


1.2
log
@Fix merge conflicts, remove extra files, match upstream perl-5.20.1

ok deraadt@@ sthen@@ espie@@ miod@@
@
text
@BEGIN { chdir 't' if -d 't' };

use strict;
use lib '../lib';
use Data::Dumper;

BEGIN {
    require Test::More;
    Test::More->import( 
        # silly bbedit [
        $] >= 5.008         
            ? 'no_plan' 
            : ( skip_all => "Lvalue objects require perl >= 5.8" )
    );
}

my $Class   = 'Object::Accessor';
my $LClass  =  $Class . '::Lvalue';

use_ok($Class);

my $Object      = $LClass->new;
my $Acc         = 'foo';

### stupid warnings
### XXX this will break warning tests though if enabled
$Object::Accessor::DEBUG = $Object::Accessor::DEBUG = 1 if @@ARGV;


### check the object
{   ok( $Object,                "Object of '$LClass' created" );
    isa_ok( $Object,            $LClass );
    isa_ok( $Object,            $Class );
    ok( $Object->mk_clone,      "   Object cloned" );
}

### create an accessor;
{   ok( $Object->mk_accessors( $Acc ),
                                "Accessor '$Acc' created" );
    
    eval { $Object->$Acc = $$ };
    ok( !$@@,                    "lvalue assign successful $@@" );
    ok( $Object->$Acc,          "Accessor '$Acc' set" );
    is( $Object->$Acc, $$,      "   Contains proper value" );
}

### test allow handlers
{   my $acc   = 'bar';
    my $clone = $Object->mk_clone;

    ok( $clone,                 "Cloned the lvalue object" );

    ### lets see if this causes a warning
    {   my $warnings;
        local $SIG{__WARN__} = sub { $warnings .= "@@_" };

        ok( $clone->mk_accessors({ $acc => sub { 0 } }),
                                "   Created accessor '$acc'" );
        like( $warnings, qr/not supported/,
                                "       Got warning about allow handlers" );
    }

    ok( eval{ $clone->$acc = $$ },      
                                "   Allow handler ignored" );       
    ok( ! $@@,                   "   No error occurred" );
    is( $clone->$acc, $$,       "   Setting '$acc' worked" );
}

### test registering callbacks
{   my $clone = $Object->mk_clone;
    ok( $clone,                 "Cloned the lvalue object" );
    
    {   my $warnings;
        local $SIG{__WARN__} = sub { $warnings .= "@@_" };
        ok( ! $clone->register_callback( sub { } ),
                                "Callback not registered" );

        like( $warnings, qr/not supported/,
                                "   Got warning about callbacks" );
    }                                
}

@


1.1
log
@Initial revision
@
text
@@


1.1.1.1
log
@Perl 5.12.2 from CPAN
@
text
@@


1.1.1.2
log
@import perl 5.16.3 from CPAN - worked on by Andrew Fresh and myself
@
text
@d9 1
a9 1
    Test::More->import(
d11 2
a12 2
        $] >= 5.008
            ? 'no_plan'
d40 1
a40 1

d63 2
a64 2
    ok( eval{ $clone->$acc = $$ },
                                "   Allow handler ignored" );
d72 1
a72 1

d80 1
a80 1
    }
@

