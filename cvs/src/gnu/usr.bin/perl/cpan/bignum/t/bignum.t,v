head	1.3;
access;
symbols
	PERL_5_24_2:1.1.1.2
	PERL:1.1.1
	OPENBSD_6_1:1.3.0.4
	OPENBSD_6_1_BASE:1.3
	OPENBSD_5_3:1.1.1.1.0.10
	OPENBSD_5_3_BASE:1.1.1.1
	OPENBSD_5_2:1.1.1.1.0.8
	OPENBSD_5_2_BASE:1.1.1.1
	OPENBSD_5_1_BASE:1.1.1.1
	OPENBSD_5_1:1.1.1.1.0.6
	OPENBSD_5_0:1.1.1.1.0.4
	OPENBSD_5_0_BASE:1.1.1.1
	OPENBSD_4_9:1.1.1.1.0.2
	OPENBSD_4_9_BASE:1.1.1.1
	PERL_5_12_2:1.1.1.1
	CPAN:1.1.1;
locks; strict;
comment	@# @;
expand	@o@;


1.3
date	2017.02.05.00.32.06;	author afresh1;	state Exp;
branches;
next	1.2;
commitid	cxJ08BvJA9Pt2PTM;

1.2
date	2013.03.25.20.40.52;	author sthen;	state dead;
branches;
next	1.1;

1.1
date	2010.09.24.14.48.59;	author millert;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	2010.09.24.14.48.59;	author millert;	state Exp;
branches;
next	1.1.1.2;

1.1.1.2
date	2017.08.14.13.45.32;	author afresh1;	state Exp;
branches;
next	;
commitid	fAzrs78vdW2Yfc6A;


desc
@@


1.3
log
@Fix merge issues, remove excess files - match perl-5.24.1 dist
@
text
@#!/usr/bin/perl -w

###############################################################################

use strict;
use Test::More tests => 35;

use bignum qw/oct hex/;

###############################################################################
# general tests

my $x = 5;
like(ref($x), qr/^Math::BigInt/, '$x = 5 makes $x a Math::BigInt'); # :constant

is(2 + 2.5, 4.5, '2 + 2.5 = 4.5');
$x = 2 + 3.5;
is(ref($x), 'Math::BigFloat', '$x = 2 + 3.5 makes $x a Math::BigFloat');

is(2 * 2.1, 4.2, '2 * 2.1 = 4.2');
$x = 2 + 2.1;
is(ref($x), 'Math::BigFloat', '$x = 2 + 2.1 makes $x a Math::BigFloat');

$x = 2 ** 255;
like(ref($x), qr/^Math::BigInt/, '$x = 2 ** 255 makes $x a Math::BigInt');

# see if Math::BigInt constant and upgrading works
is(Math::BigInt::bsqrt("12"), '3.464101615137754587054892683011744733886',
   'Math::BigInt::bsqrt("12")');
is(sqrt(12), '3.464101615137754587054892683011744733886',
   'sqrt(12)');

is(2/3, "0.6666666666666666666666666666666666666667", '2/3');

#is(2 ** 0.5, 'NaN');   # should be sqrt(2);

is(12->bfac(), 479001600, '12->bfac() = 479001600');

# see if Math::BigFloat constant works

#                     0123456789          0123456789    <- default 40
#           0123456789          0123456789
is(1/3, '0.3333333333333333333333333333333333333333', '1/3');

###############################################################################
# accuracy and precision

is(bignum->accuracy(),        undef,  'get accuracy');
is(bignum->accuracy(12),      12,     'set accuracy to 12');
is(bignum->accuracy(),        12,     'get accuracy again');

is(bignum->precision(),       undef,  'get precision');
is(bignum->precision(12),     12,     'set precision to 12');
is(bignum->precision(),       12,     'get precision again');

is(bignum->round_mode(),      'even', 'get round mode');
is(bignum->round_mode('odd'), 'odd',  'set round mode');
is(bignum->round_mode(),      'odd',  'get round mode again');

###############################################################################
# hex() and oct()

my $class = 'Math::BigInt';

is(ref(hex(1)),      $class, qq|ref(hex(1)) = $class|);
is(ref(hex(0x1)),    $class, qq|ref(hex(0x1)) = $class|);
is(ref(hex("af")),   $class, qq|ref(hex("af")) = $class|);
is(ref(hex("0x1")),  $class, qq|ref(hex("0x1")) = $class|);

is(hex("af"), Math::BigInt->new(0xaf),
   qq|hex("af") = Math::BigInt->new(0xaf)|);

is(ref(oct("0x1")),  $class, qq|ref(oct("0x1")) = $class|);
is(ref(oct("01")),   $class, qq|ref(oct("01")) = $class|);
is(ref(oct("0b01")), $class, qq|ref(oct("0b01")) = $class|);
is(ref(oct("1")),    $class, qq|ref(oct("1")) = $class|);
is(ref(oct(" 1")),   $class, qq|ref(oct(" 1")) = $class|);
is(ref(oct(" 0x1")), $class, qq|ref(oct(" 0x1")) = $class|);

is(ref(oct(0x1)),    $class, qq|ref(oct(0x1)) = $class|);
is(ref(oct(01)),     $class, qq|ref(oct(01)) = $class|);
is(ref(oct(0b01)),   $class, qq|ref(oct(0b01)) = $class|);
is(ref(oct(1)),      $class, qq|ref(oct(1)) = $class|);
@


1.2
log
@merge/resolve conflicts
(some more to do after this one)
@
text
@a4 1
use Test;
d6 1
a6 8

BEGIN
  {
  $| = 1;
  chdir 't' if -d 't';
  unshift @@INC, '../lib';
  plan tests => 35;
  }
d13 2
a14 1
my $x = 5; ok (ref($x) =~ /^Math::BigInt/);		# :constant
d16 7
a22 4
ok (2 + 2.5,4.5);
$x = 2 + 3.5; ok (ref($x),'Math::BigFloat');
ok (2 * 2.1,4.2);
$x = 2 + 2.1; ok (ref($x),'Math::BigFloat');
d24 2
a25 1
$x = 2 ** 255; ok (ref($x) =~ /^Math::BigInt/);
d28 4
a31 2
ok (Math::BigInt::bsqrt('12'),'3.464101615137754587054892683011744733886');
ok (sqrt(12),'3.464101615137754587054892683011744733886');
d33 1
a33 1
ok (2/3,"0.6666666666666666666666666666666666666667");
d35 1
a35 1
#ok (2 ** 0.5, 'NaN');	# should be sqrt(2);
d37 1
a37 1
ok (12->bfac(),479001600);
d41 1
a41 1
#                     0123456789          0123456789	<- default 40
d43 1
a43 1
ok (1/3, '0.3333333333333333333333333333333333333333');
d46 1
a46 1
# accurarcy and precision
d48 11
a58 11
ok_undef (bignum->accuracy());
ok (bignum->accuracy(12),12);
ok (bignum->accuracy(),12);

ok_undef (bignum->precision());
ok (bignum->precision(12),12);
ok (bignum->precision(),12);

ok (bignum->round_mode(),'even');
ok (bignum->round_mode('odd'),'odd');
ok (bignum->round_mode(),'odd');
d63 1
a63 23
my $c = 'Math::BigInt';

ok (ref(hex(1)), $c);
ok (ref(hex(0x1)), $c);
ok (ref(hex("af")), $c);
ok (hex("af"), Math::BigInt->new(0xaf));
ok (ref(hex("0x1")), $c);

ok (ref(oct("0x1")), $c);
ok (ref(oct("01")), $c);
ok (ref(oct("0b01")), $c);
ok (ref(oct("1")), $c);
ok (ref(oct(" 1")), $c);
ok (ref(oct(" 0x1")), $c);

ok (ref(oct(0x1)), $c);
ok (ref(oct(01)), $c);
ok (ref(oct(0b01)), $c);
ok (ref(oct(1)), $c);

###############################################################################
###############################################################################
# Perl 5.005 does not like ok ($x,undef)
d65 19
a83 7
sub ok_undef
  {
  my $x = shift;

  ok (1,1) and return if !defined $x;
  ok ($x,'undef');
  }
@


1.1
log
@Initial revision
@
text
@@


1.1.1.1
log
@Perl 5.12.2 from CPAN
@
text
@@


1.1.1.2
log
@Import perl-5.24.2
@
text
@d5 1
d7 8
a14 1
use Test::More tests => 35;
d21 1
a21 2
my $x = 5;
like(ref($x), qr/^Math::BigInt/, '$x = 5 makes $x a Math::BigInt'); # :constant
d23 4
a26 7
is(2 + 2.5, 4.5, '2 + 2.5 = 4.5');
$x = 2 + 3.5;
is(ref($x), 'Math::BigFloat', '$x = 2 + 3.5 makes $x a Math::BigFloat');

is(2 * 2.1, 4.2, '2 * 2.1 = 4.2');
$x = 2 + 2.1;
is(ref($x), 'Math::BigFloat', '$x = 2 + 2.1 makes $x a Math::BigFloat');
d28 1
a28 2
$x = 2 ** 255;
like(ref($x), qr/^Math::BigInt/, '$x = 2 ** 255 makes $x a Math::BigInt');
d31 2
a32 4
is(Math::BigInt::bsqrt("12"), '3.464101615137754587054892683011744733886',
   'Math::BigInt::bsqrt("12")');
is(sqrt(12), '3.464101615137754587054892683011744733886',
   'sqrt(12)');
d34 1
a34 1
is(2/3, "0.6666666666666666666666666666666666666667", '2/3');
d36 1
a36 1
#is(2 ** 0.5, 'NaN');   # should be sqrt(2);
d38 1
a38 1
is(12->bfac(), 479001600, '12->bfac() = 479001600');
d42 1
a42 1
#                     0123456789          0123456789    <- default 40
d44 1
a44 1
is(1/3, '0.3333333333333333333333333333333333333333', '1/3');
d47 1
a47 1
# accuracy and precision
d49 11
a59 11
is(bignum->accuracy(),        undef,  'get accuracy');
is(bignum->accuracy(12),      12,     'set accuracy to 12');
is(bignum->accuracy(),        12,     'get accuracy again');

is(bignum->precision(),       undef,  'get precision');
is(bignum->precision(12),     12,     'set precision to 12');
is(bignum->precision(),       12,     'get precision again');

is(bignum->round_mode(),      'even', 'get round mode');
is(bignum->round_mode('odd'), 'odd',  'set round mode');
is(bignum->round_mode(),      'odd',  'get round mode again');
d64 23
a86 1
my $class = 'Math::BigInt';
d88 7
a94 19
is(ref(hex(1)),      $class, qq|ref(hex(1)) = $class|);
is(ref(hex(0x1)),    $class, qq|ref(hex(0x1)) = $class|);
is(ref(hex("af")),   $class, qq|ref(hex("af")) = $class|);
is(ref(hex("0x1")),  $class, qq|ref(hex("0x1")) = $class|);

is(hex("af"), Math::BigInt->new(0xaf),
   qq|hex("af") = Math::BigInt->new(0xaf)|);

is(ref(oct("0x1")),  $class, qq|ref(oct("0x1")) = $class|);
is(ref(oct("01")),   $class, qq|ref(oct("01")) = $class|);
is(ref(oct("0b01")), $class, qq|ref(oct("0b01")) = $class|);
is(ref(oct("1")),    $class, qq|ref(oct("1")) = $class|);
is(ref(oct(" 1")),   $class, qq|ref(oct(" 1")) = $class|);
is(ref(oct(" 0x1")), $class, qq|ref(oct(" 0x1")) = $class|);

is(ref(oct(0x1)),    $class, qq|ref(oct(0x1)) = $class|);
is(ref(oct(01)),     $class, qq|ref(oct(01)) = $class|);
is(ref(oct(0b01)),   $class, qq|ref(oct(0b01)) = $class|);
is(ref(oct(1)),      $class, qq|ref(oct(1)) = $class|);
@

