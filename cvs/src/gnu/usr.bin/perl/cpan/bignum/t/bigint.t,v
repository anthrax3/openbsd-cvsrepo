head	1.3;
access;
symbols
	OPENBSD_6_2:1.3.0.6
	OPENBSD_6_2_BASE:1.3
	PERL_5_24_2:1.1.1.2
	PERL:1.1.1
	OPENBSD_6_1:1.3.0.4
	OPENBSD_6_1_BASE:1.3
	OPENBSD_5_3:1.1.1.1.0.10
	OPENBSD_5_3_BASE:1.1.1.1
	OPENBSD_5_2:1.1.1.1.0.8
	OPENBSD_5_2_BASE:1.1.1.1
	OPENBSD_5_1_BASE:1.1.1.1
	OPENBSD_5_1:1.1.1.1.0.6
	OPENBSD_5_0:1.1.1.1.0.4
	OPENBSD_5_0_BASE:1.1.1.1
	OPENBSD_4_9:1.1.1.1.0.2
	OPENBSD_4_9_BASE:1.1.1.1
	PERL_5_12_2:1.1.1.1
	CPAN:1.1.1;
locks; strict;
comment	@# @;
expand	@o@;


1.3
date	2017.02.05.00.32.06;	author afresh1;	state Exp;
branches;
next	1.2;
commitid	cxJ08BvJA9Pt2PTM;

1.2
date	2013.03.25.20.40.52;	author sthen;	state dead;
branches;
next	1.1;

1.1
date	2010.09.24.14.48.59;	author millert;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	2010.09.24.14.48.59;	author millert;	state Exp;
branches;
next	1.1.1.2;

1.1.1.2
date	2017.08.14.13.45.32;	author afresh1;	state Exp;
branches;
next	;
commitid	fAzrs78vdW2Yfc6A;


desc
@@


1.3
log
@Fix merge issues, remove excess files - match perl-5.24.1 dist
@
text
@#!perl

###############################################################################

use strict;
use warnings;

use Test::More tests => 51;

use bigint qw/hex oct/;

###############################################################################
# _constant tests

foreach (qw/
  123:123
  123.4:123
  1.4:1
  0.1:0
  -0.1:0
  -1.1:-1
  -123.4:-123
  -123:-123
  123e2:123e2
  123e-1:12
  123e-4:0
  123e-3:0
  123.345e-1:12
  123.456e+2:12345
  1234.567e+3:1234567
  1234.567e+4:1234567E1
  1234.567e+6:1234567E3
  /)
{
    my ($x, $y) = split /:/;
    is(bigint::_float_constant("$x"), "$y",
       qq|bigint::_float_constant("$x") = $y|);
}

foreach (qw/
  0100:64
  0200:128
  0x100:256
  0b1001:9
  /)
{
    my ($x, $y) = split /:/;
    is(bigint::_binary_constant("$x"), "$y",
       qq|bigint::_binary_constant("$x") = "$y")|);
}

###############################################################################
# general tests

my $x = 5;
like(ref($x), qr/^Math::BigInt/, '$x = 5 makes $x a Math::BigInt'); # :constant

# todo:  is(2 + 2.5, 4.5);                              # should still work
# todo: $x = 2 + 3.5; is(ref($x), 'Math::BigFloat');

$x = 2 ** 255;
like(ref($x), qr/^Math::BigInt/, '$x = 2 ** 255 makes $x a Math::BigInt');

is(12->bfac(), 479001600, '12->bfac() = 479001600');
is(9/4, 2, '9/4 = 2');

is(4.5 + 4.5, 8, '4.5 + 4.5 = 2');                         # truncate
like(ref(4.5 + 4.5), qr/^Math::BigInt/, '4.5 + 4.5 makes a Math::BigInt');

###############################################################################
# accuracy and precision

is(bigint->accuracy(),        undef, 'get accuracy');
is(bigint->accuracy(12),      12,    'set accuracy to 12');
is(bigint->accuracy(),        12,    'get accuracy again');

is(bigint->precision(),       undef, 'get precision');
is(bigint->precision(12),     12,    'set precision to 12');
is(bigint->precision(),       12,    'get precision again');

is(bigint->round_mode(),      'even', 'get round mode');
is(bigint->round_mode('odd'), 'odd',  'set round mode');
is(bigint->round_mode(),      'odd',  'get round mode again');

###############################################################################
# hex() and oct()

my $class = 'Math::BigInt';

is(ref(hex(1)),      $class, qq|ref(hex(1)) = $class|);
is(ref(hex(0x1)),    $class, qq|ref(hex(0x1)) = $class|);
is(ref(hex("af")),   $class, qq|ref(hex("af")) = $class|);
is(ref(hex("0x1")),  $class, qq|ref(hex("0x1")) = $class|);

is(hex("af"), Math::BigInt->new(0xaf),
   qq|hex("af") = Math::BigInt->new(0xaf)|);

is(ref(oct("0x1")),  $class, qq|ref(oct("0x1")) = $class|);
is(ref(oct("01")),   $class, qq|ref(oct("01")) = $class|);
is(ref(oct("0b01")), $class, qq|ref(oct("0b01")) = $class|);
is(ref(oct("1")),    $class, qq|ref(oct("1")) = $class|);
is(ref(oct(" 1")),   $class, qq|ref(oct(" 1")) = $class|);
is(ref(oct(" 0x1")), $class, qq|ref(oct(" 0x1")) = $class|);

is(ref(oct(0x1)),    $class, qq|ref(oct(0x1)) = $class|);
is(ref(oct(01)),     $class, qq|ref(oct(01)) = $class|);
is(ref(oct(0b01)),   $class, qq|ref(oct(0b01)) = $class|);
is(ref(oct(1)),      $class, qq|ref(oct(1)) = $class|);
@


1.2
log
@merge/resolve conflicts
(some more to do after this one)
@
text
@d1 1
a1 1
#!/usr/bin/perl -w
a4 1
use Test;
d6 1
d8 1
a8 7
BEGIN
  {
  $| = 1;
  chdir 't' if -d 't';
  unshift @@INC, '../lib';
  plan tests => 51;
  }
d15 1
a15 1
foreach (qw/ 
d34 5
a38 5
  {
  my ($x,$y) = split /:/;
  print "# Try $x\n";
  ok (bigint::_float_constant("$x"),"$y");
  }
d40 1
a40 1
foreach (qw/ 
d46 5
a50 5
  {
  my ($x,$y) = split /:/;
  print "# Try $x\n";
  ok (bigint::_binary_constant("$x"),"$y");
  }
d55 2
a56 1
my $x = 5; ok (ref($x) =~ /^Math::BigInt/);		# :constant
d58 2
a59 2
# todo:  ok (2 + 2.5,4.5);				# should still work
# todo: $x = 2 + 3.5; ok (ref($x),'Math::BigFloat');
d61 2
a62 1
$x = 2 ** 255; ok (ref($x) =~ /^Math::BigInt/);
d64 2
a65 2
ok (12->bfac(),479001600);
ok (9/4,2);
d67 2
a68 2
ok (4.5+4.5,8);					# truncate
ok (ref(4.5+4.5) =~ /^Math::BigInt/);
d70 6
d77 3
a79 2
###############################################################################
# accurarcy and precision
d81 3
a83 11
ok_undef (bigint->accuracy());
ok (bigint->accuracy(12),12);
ok (bigint->accuracy(),12);

ok_undef (bigint->precision());
ok (bigint->precision(12),12);
ok (bigint->precision(),12);

ok (bigint->round_mode(),'even');
ok (bigint->round_mode('odd'),'odd');
ok (bigint->round_mode(),'odd');
d88 1
a88 23
my $c = 'Math::BigInt';

ok (ref(hex(1)), $c);
ok (ref(hex(0x1)), $c);
ok (ref(hex("af")), $c);
ok (hex("af"), Math::BigInt->new(0xaf));
ok (ref(hex("0x1")), $c);

ok (ref(oct("0x1")), $c);
ok (ref(oct("01")), $c);
ok (ref(oct("0b01")), $c);
ok (ref(oct("1")), $c);
ok (ref(oct(" 1")), $c);
ok (ref(oct(" 0x1")), $c);

ok (ref(oct(0x1)), $c);
ok (ref(oct(01)), $c);
ok (ref(oct(0b01)), $c);
ok (ref(oct(1)), $c);

###############################################################################
###############################################################################
# Perl 5.005 does not like ok ($x,undef)
d90 19
a108 7
sub ok_undef
  {
  my $x = shift;

  ok (1,1) and return if !defined $x;
  ok ($x,'undef');
  }
@


1.1
log
@Initial revision
@
text
@@


1.1.1.1
log
@Perl 5.12.2 from CPAN
@
text
@@


1.1.1.2
log
@Import perl-5.24.2
@
text
@d1 1
a1 1
#!perl
d5 1
a6 1
use warnings;
d8 7
a14 1
use Test::More tests => 51;
d21 1
a21 1
foreach (qw/
d40 5
a44 5
{
    my ($x, $y) = split /:/;
    is(bigint::_float_constant("$x"), "$y",
       qq|bigint::_float_constant("$x") = $y|);
}
d46 1
a46 1
foreach (qw/
d52 5
a56 5
{
    my ($x, $y) = split /:/;
    is(bigint::_binary_constant("$x"), "$y",
       qq|bigint::_binary_constant("$x") = "$y")|);
}
d61 1
a61 2
my $x = 5;
like(ref($x), qr/^Math::BigInt/, '$x = 5 makes $x a Math::BigInt'); # :constant
d63 2
a64 2
# todo:  is(2 + 2.5, 4.5);                              # should still work
# todo: $x = 2 + 3.5; is(ref($x), 'Math::BigFloat');
d66 1
a66 2
$x = 2 ** 255;
like(ref($x), qr/^Math::BigInt/, '$x = 2 ** 255 makes $x a Math::BigInt');
d68 5
a72 2
is(12->bfac(), 479001600, '12->bfac() = 479001600');
is(9/4, 2, '9/4 = 2');
a73 2
is(4.5 + 4.5, 8, '4.5 + 4.5 = 2');                         # truncate
like(ref(4.5 + 4.5), qr/^Math::BigInt/, '4.5 + 4.5 makes a Math::BigInt');
d76 13
a88 1
# accuracy and precision
d90 2
a91 3
is(bigint->accuracy(),        undef, 'get accuracy');
is(bigint->accuracy(12),      12,    'set accuracy to 12');
is(bigint->accuracy(),        12,    'get accuracy again');
d93 1
a93 3
is(bigint->precision(),       undef, 'get precision');
is(bigint->precision(12),     12,    'set precision to 12');
is(bigint->precision(),       12,    'get precision again');
d95 17
a111 3
is(bigint->round_mode(),      'even', 'get round mode');
is(bigint->round_mode('odd'), 'odd',  'set round mode');
is(bigint->round_mode(),      'odd',  'get round mode again');
d114 2
a115 3
# hex() and oct()

my $class = 'Math::BigInt';
d117 7
a123 19
is(ref(hex(1)),      $class, qq|ref(hex(1)) = $class|);
is(ref(hex(0x1)),    $class, qq|ref(hex(0x1)) = $class|);
is(ref(hex("af")),   $class, qq|ref(hex("af")) = $class|);
is(ref(hex("0x1")),  $class, qq|ref(hex("0x1")) = $class|);

is(hex("af"), Math::BigInt->new(0xaf),
   qq|hex("af") = Math::BigInt->new(0xaf)|);

is(ref(oct("0x1")),  $class, qq|ref(oct("0x1")) = $class|);
is(ref(oct("01")),   $class, qq|ref(oct("01")) = $class|);
is(ref(oct("0b01")), $class, qq|ref(oct("0b01")) = $class|);
is(ref(oct("1")),    $class, qq|ref(oct("1")) = $class|);
is(ref(oct(" 1")),   $class, qq|ref(oct(" 1")) = $class|);
is(ref(oct(" 0x1")), $class, qq|ref(oct(" 0x1")) = $class|);

is(ref(oct(0x1)),    $class, qq|ref(oct(0x1)) = $class|);
is(ref(oct(01)),     $class, qq|ref(oct(01)) = $class|);
is(ref(oct(0b01)),   $class, qq|ref(oct(0b01)) = $class|);
is(ref(oct(1)),      $class, qq|ref(oct(1)) = $class|);
@

