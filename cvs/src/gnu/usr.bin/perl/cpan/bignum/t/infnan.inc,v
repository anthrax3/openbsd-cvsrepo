head	1.3;
access;
symbols
	PERL_5_24_2:1.1.1.2
	PERL:1.1.1
	OPENBSD_6_1:1.3.0.4
	OPENBSD_6_1_BASE:1.3
	OPENBSD_5_3:1.1.1.1.0.10
	OPENBSD_5_3_BASE:1.1.1.1
	OPENBSD_5_2:1.1.1.1.0.8
	OPENBSD_5_2_BASE:1.1.1.1
	OPENBSD_5_1_BASE:1.1.1.1
	OPENBSD_5_1:1.1.1.1.0.6
	OPENBSD_5_0:1.1.1.1.0.4
	OPENBSD_5_0_BASE:1.1.1.1
	OPENBSD_4_9:1.1.1.1.0.2
	OPENBSD_4_9_BASE:1.1.1.1
	PERL_5_12_2:1.1.1.1
	CPAN:1.1.1;
locks; strict;
comment	@# @;
expand	@o@;


1.3
date	2017.02.05.00.32.06;	author afresh1;	state Exp;
branches;
next	1.2;
commitid	cxJ08BvJA9Pt2PTM;

1.2
date	2013.03.25.20.40.53;	author sthen;	state dead;
branches;
next	1.1;

1.1
date	2010.09.24.14.48.59;	author millert;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	2010.09.24.14.48.59;	author millert;	state Exp;
branches;
next	1.1.1.2;

1.1.1.2
date	2017.08.14.13.45.32;	author afresh1;	state Exp;
branches;
next	;
commitid	fAzrs78vdW2Yfc6A;


desc
@@


1.3
log
@Fix merge issues, remove excess files - match perl-5.24.1 dist
@
text
@#!perl

use strict;
use warnings;

my $x;

###############################################################################
# inf tests

$x = 1 + inf;
like(ref($x), qr/^Math::BigInt/, '$x = 1 + inf makes a Math::BigInt');
is($x->bstr(), 'inf', qq|$x = 1 + inf; $x->bstr() = 'inf'|);

$x = 1 * inf;
like(ref($x), qr/^Math::BigInt/, '$x = 1 * inf makes a Math::BigInt');
is($x->bstr(), 'inf', qq|$x = 1 * inf; $x->bstr() = 'inf'|);

# these don't work without exporting inf()
$x = inf;
like(ref($x), qr/^Math::BigInt/, '$x = inf makes a Math::BigInt');
is($x->bstr(), 'inf', qq|$x = inf; $x->bstr() = 'inf'|);

$x = inf + inf;
like(ref($x), qr/^Math::BigInt/, '$x = inf + inf makes a Math::BigInt');
is($x->bstr(), 'inf', qq|$x = inf + inf; $x->bstr() = 'inf'|);

$x = inf * inf;
like(ref($x), qr/^Math::BigInt/, '$x = inf * inf makes a Math::BigInt');
is($x->bstr(), 'inf', qq|$x = inf * inf; $x->bstr() = 'inf'|);

###############################################################################
# NaN tests

$x = 1 + NaN;
like(ref($x), qr/^Math::BigInt/, '$x = 1 + NaN makes a Math::BigInt');
is($x->bstr(), 'NaN', qq|$x = 1 + NaN; $x->bstr() = 'NaN'|);

$x = 1 * NaN;
like(ref($x), qr/^Math::BigInt/, '$x = 1 * NaN makes a Math::BigInt');
is($x->bstr(), 'NaN', qq|$x = 1 * NaN; $x->bstr() = 'NaN'|);

# these don't work without exporting NaN()
$x = NaN;
like(ref($x), qr/^Math::BigInt/, '$x = NaN makes a Math::BigInt');
is($x->bstr(), 'NaN', qq|$x = NaN; $x->bstr() = 'NaN'|);

$x = NaN + NaN;
like(ref($x), qr/^Math::BigInt/, '$x = NaN + NaN makes a Math::BigInt');
is($x->bstr(), 'NaN', qq|$x = NaN + NaN; $x->bstr() = 'NaN'|);

$x = NaN * NaN;
like(ref($x), qr/^Math::BigInt/, '$x = NaN * NaN makes a Math::BigInt');
is($x->bstr(), 'NaN', qq|$x = NaN * NaN; $x->bstr() = 'NaN'|);

###############################################################################
# mixed tests

# these don't work without exporting NaN() or inf()

$x = NaN + inf;
like(ref($x), qr/^Math::BigInt/, '$x = NaN + inf makes a Math::BigInt');
is($x->bstr(), 'NaN', qq|$x = NaN + inf; $x->bstr() = 'NaN'|);

$x = NaN * inf;
like(ref($x), qr/^Math::BigInt/, '$x = NaN * inf makes a Math::BigInt');
is($x->bstr(), 'NaN', qq|$x = NaN * inf; $x->bstr() = 'NaN'|);

$x = inf * NaN;
like(ref($x), qr/^Math::BigInt/, '$x = inf * NaN makes a Math::BigInt');
is($x->bstr(), 'NaN', qq|$x = inf * NaN; $x->bstr() = 'NaN'|);

###############################################################################
# inf and NaN as strings.

for my $nan (qw/ nan naN nAn nAN Nan NaN NAn NAN /) {
    my $x = 1 + $nan;
    print ref($x), "<<<\n";
    is($x->bstr(), "NaN", qq|\$x = 1 + "$nan"; \$x->bstr() = "NaN"|);
    isa_ok($x, "Math::BigInt");
}

for my $inf (qw/ inf inF iNf iNF Inf InF INf INF
                 infinity Infinity InFiNiTy iNfInItY
               /)
{
    my $x = 1 + $inf;
    is($x->bstr(), "inf", qq|\$x = 1 + "$inf"; \$x->bstr() = "inf"|);
    isa_ok($x, "Math::BigInt");
}

1;
@


1.2
log
@merge/resolve conflicts
(some more to do after this one)
@
text
@d1 1
d4 1
d6 1
a6 1
my ($x);
d11 7
a17 2
$x = 1+inf;	ok (ref($x) =~ /^Math::BigInt/); ok ($x->bstr(),'inf');
$x = 1*inf;	ok (ref($x) =~ /^Math::BigInt/); ok ($x->bstr(),'inf');
d20 11
a30 3
$x = inf;	ok (ref($x) =~ /^Math::BigInt/); ok ($x->bstr(),'inf');
$x = inf+inf;	ok (ref($x) =~ /^Math::BigInt/); ok ($x->bstr(),'inf');
$x = inf*inf;	ok (ref($x) =~ /^Math::BigInt/); ok ($x->bstr(),'inf');
d35 7
a41 2
$x = 1+NaN;	ok (ref($x) =~ /^Math::BigInt/); ok ($x->bstr(),'NaN');
$x = 1*NaN;	ok (ref($x) =~ /^Math::BigInt/); ok ($x->bstr(),'NaN');
d44 11
a54 3
$x = NaN;	ok (ref($x) =~ /^Math::BigInt/); ok ($x->bstr(),'NaN');
$x = NaN+NaN;	ok (ref($x) =~ /^Math::BigInt/); ok ($x->bstr(),'NaN');
$x = NaN*NaN;	ok (ref($x) =~ /^Math::BigInt/); ok ($x->bstr(),'NaN');
a59 3
$x = NaN+inf;	ok (ref($x) =~ /^Math::BigInt/); ok ($x->bstr(),'NaN');
$x = NaN*inf;	ok (ref($x) =~ /^Math::BigInt/); ok ($x->bstr(),'NaN');
$x = inf*NaN;	ok (ref($x) =~ /^Math::BigInt/); ok ($x->bstr(),'NaN');
d61 32
@


1.1
log
@Initial revision
@
text
@@


1.1.1.1
log
@Perl 5.12.2 from CPAN
@
text
@@


1.1.1.2
log
@Import perl-5.24.2
@
text
@a0 1
#!perl
a2 1
use warnings;
d4 1
a4 1
my $x;
d9 2
a10 7
$x = 1 + inf;
like(ref($x), qr/^Math::BigInt/, '$x = 1 + inf makes a Math::BigInt');
is($x->bstr(), 'inf', qq|$x = 1 + inf; $x->bstr() = 'inf'|);

$x = 1 * inf;
like(ref($x), qr/^Math::BigInt/, '$x = 1 * inf makes a Math::BigInt');
is($x->bstr(), 'inf', qq|$x = 1 * inf; $x->bstr() = 'inf'|);
d13 3
a15 11
$x = inf;
like(ref($x), qr/^Math::BigInt/, '$x = inf makes a Math::BigInt');
is($x->bstr(), 'inf', qq|$x = inf; $x->bstr() = 'inf'|);

$x = inf + inf;
like(ref($x), qr/^Math::BigInt/, '$x = inf + inf makes a Math::BigInt');
is($x->bstr(), 'inf', qq|$x = inf + inf; $x->bstr() = 'inf'|);

$x = inf * inf;
like(ref($x), qr/^Math::BigInt/, '$x = inf * inf makes a Math::BigInt');
is($x->bstr(), 'inf', qq|$x = inf * inf; $x->bstr() = 'inf'|);
d20 2
a21 7
$x = 1 + NaN;
like(ref($x), qr/^Math::BigInt/, '$x = 1 + NaN makes a Math::BigInt');
is($x->bstr(), 'NaN', qq|$x = 1 + NaN; $x->bstr() = 'NaN'|);

$x = 1 * NaN;
like(ref($x), qr/^Math::BigInt/, '$x = 1 * NaN makes a Math::BigInt');
is($x->bstr(), 'NaN', qq|$x = 1 * NaN; $x->bstr() = 'NaN'|);
d24 3
a26 11
$x = NaN;
like(ref($x), qr/^Math::BigInt/, '$x = NaN makes a Math::BigInt');
is($x->bstr(), 'NaN', qq|$x = NaN; $x->bstr() = 'NaN'|);

$x = NaN + NaN;
like(ref($x), qr/^Math::BigInt/, '$x = NaN + NaN makes a Math::BigInt');
is($x->bstr(), 'NaN', qq|$x = NaN + NaN; $x->bstr() = 'NaN'|);

$x = NaN * NaN;
like(ref($x), qr/^Math::BigInt/, '$x = NaN * NaN makes a Math::BigInt');
is($x->bstr(), 'NaN', qq|$x = NaN * NaN; $x->bstr() = 'NaN'|);
d32 3
a35 32
$x = NaN + inf;
like(ref($x), qr/^Math::BigInt/, '$x = NaN + inf makes a Math::BigInt');
is($x->bstr(), 'NaN', qq|$x = NaN + inf; $x->bstr() = 'NaN'|);

$x = NaN * inf;
like(ref($x), qr/^Math::BigInt/, '$x = NaN * inf makes a Math::BigInt');
is($x->bstr(), 'NaN', qq|$x = NaN * inf; $x->bstr() = 'NaN'|);

$x = inf * NaN;
like(ref($x), qr/^Math::BigInt/, '$x = inf * NaN makes a Math::BigInt');
is($x->bstr(), 'NaN', qq|$x = inf * NaN; $x->bstr() = 'NaN'|);

###############################################################################
# inf and NaN as strings.

for my $nan (qw/ nan naN nAn nAN Nan NaN NAn NAN /) {
    my $x = 1 + $nan;
    print ref($x), "<<<\n";
    is($x->bstr(), "NaN", qq|\$x = 1 + "$nan"; \$x->bstr() = "NaN"|);
    isa_ok($x, "Math::BigInt");
}

for my $inf (qw/ inf inF iNf iNF Inf InF INf INF
                 infinity Infinity InFiNiTy iNfInItY
               /)
{
    my $x = 1 + $inf;
    is($x->bstr(), "inf", qq|\$x = 1 + "$inf"; \$x->bstr() = "inf"|);
    isa_ok($x, "Math::BigInt");
}

1;
@

