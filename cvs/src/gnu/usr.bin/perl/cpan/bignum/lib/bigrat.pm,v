head	1.3;
access;
symbols
	OPENBSD_6_2:1.3.0.2
	OPENBSD_6_2_BASE:1.3
	PERL_5_24_2:1.1.1.2
	PERL:1.1.1
	OPENBSD_6_1:1.3.0.4
	OPENBSD_6_1_BASE:1.3
	OPENBSD_5_3:1.1.1.1.0.10
	OPENBSD_5_3_BASE:1.1.1.1
	OPENBSD_5_2:1.1.1.1.0.8
	OPENBSD_5_2_BASE:1.1.1.1
	OPENBSD_5_1_BASE:1.1.1.1
	OPENBSD_5_1:1.1.1.1.0.6
	OPENBSD_5_0:1.1.1.1.0.4
	OPENBSD_5_0_BASE:1.1.1.1
	OPENBSD_4_9:1.1.1.1.0.2
	OPENBSD_4_9_BASE:1.1.1.1
	PERL_5_12_2:1.1.1.1
	CPAN:1.1.1;
locks; strict;
comment	@# @;
expand	@o@;


1.3
date	2017.02.05.00.32.06;	author afresh1;	state Exp;
branches;
next	1.2;
commitid	cxJ08BvJA9Pt2PTM;

1.2
date	2013.03.25.20.40.52;	author sthen;	state dead;
branches;
next	1.1;

1.1
date	2010.09.24.14.48.59;	author millert;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	2010.09.24.14.48.59;	author millert;	state Exp;
branches;
next	1.1.1.2;

1.1.1.2
date	2017.08.14.13.45.32;	author afresh1;	state Exp;
branches;
next	;
commitid	fAzrs78vdW2Yfc6A;


desc
@@


1.3
log
@Fix merge issues, remove excess files - match perl-5.24.1 dist
@
text
@package bigrat;

use 5.006;
use strict;
use warnings;

our $VERSION = '0.42_01';

use Exporter;
our @@ISA            = qw( bigint );
our @@EXPORT_OK      = qw( PI e bpi bexp hex oct );
our @@EXPORT         = qw( inf NaN );

use overload;
use bigint ();

##############################################################################

BEGIN {
    *inf = \&bigint::inf;
    *NaN = \&bigint::NaN;
    *hex = \&bigint::hex;
    *oct = \&bigint::oct;
}

# These are all alike, and thus faked by AUTOLOAD

my @@faked = qw/round_mode accuracy precision div_scale/;
our ($AUTOLOAD, $_lite);        # _lite for testsuite

sub AUTOLOAD {
    my $name = $AUTOLOAD;

    $name =~ s/.*:://;          # split package
    no strict 'refs';
    foreach my $n (@@faked) {
        if ($n eq $name) {
            *{"bigrat::$name"} =
              sub {
                  my $self = shift;
                  no strict 'refs';
                  if (defined $_[0]) {
                      Math::BigInt->$name($_[0]);
                      Math::BigFloat->$name($_[0]);
                      return Math::BigRat->$name($_[0]);
                  }
                  return Math::BigInt->$name();
              };
            return &$name;
        }
    }

    # delayed load of Carp and avoid recursion
    require Carp;
    Carp::croak ("Can't call bigrat\-\>$name, not a valid method");
}

sub unimport {
    $^H{bigrat} = undef;        # no longer in effect
    overload::remove_constant('binary', '', 'float', '', 'integer');
}

sub in_effect {
    my $level = shift || 0;
    my $hinthash = (caller($level))[10];
    $hinthash->{bigrat};
}

#############################################################################

sub import {
    my $self = shift;

    # see also bignum->import() for additional comments

    $^H{bigrat} = 1;                            # we are in effect

    # for newer Perls always override hex() and oct() with a lexical version:
    if ($] > 5.009004) {
        bigint::_override();
    }
    # some defaults
    my $lib      = '';
    my $lib_kind = 'try';
    my $upgrade  = 'Math::BigFloat';

    my @@import = (':constant');                 # drive it w/ constant
    my @@a = @@_;
    my $l = scalar @@_;
    my $j = 0;
    my ($a, $p);
    my ($ver, $trace);                          # version? trace?
    for (my $i = 0; $i < $l ; $i++, $j++) {
        if ($_[$i] eq 'upgrade') {
            # this causes upgrading
            $upgrade = $_[$i + 1];              # or undef to disable
            my $s = 2;
            $s = 1 if @@a - $j < 2;  # avoid "can not modify non-existent..."
            splice @@a, $j, $s;
            $j -= $s;
        }
        elsif ($_[$i] =~ /^(l|lib|try|only)$/) {
            # this causes a different low lib to take care...
            $lib_kind = $1;
            $lib_kind = 'lib' if $lib_kind eq 'l';
            $lib = $_[$i + 1] || '';
            my $s = 2;
            $s = 1 if @@a - $j < 2;  # avoid "can not modify non-existent..."
            splice @@a, $j, $s;
            $j -= $s;
            $i++;
        }
        elsif ($_[$i] =~ /^(a|accuracy)$/) {
            $a = $_[$i + 1];
            my $s = 2;
            $s = 1 if @@a - $j < 2;  # avoid "can not modify non-existent..."
            splice @@a, $j, $s;
            $j -= $s;
            $i++;
        }
        elsif ($_[$i] =~ /^(p|precision)$/) {
            $p = $_[$i + 1];
            my $s = 2;
            $s = 1 if @@a - $j < 2;  # avoid "can not modify non-existent..."
            splice @@a, $j, $s;
            $j -= $s;
            $i++;
        }
        elsif ($_[$i] =~ /^(v|version)$/) {
            $ver = 1;
            splice @@a, $j, 1;
            $j--;
        }
        elsif ($_[$i] =~ /^(t|trace)$/) {
            $trace = 1;
            splice @@a, $j, 1;
            $j--;
        }
        elsif ($_[$i] !~ /^(PI|e|bpi|bexp|hex|oct)\z/) {
            die ("unknown option $_[$i]");
        }
    }
    my $class;
    $_lite = 0;                                 # using M::BI::L ?
    if ($trace) {
        require Math::BigInt::Trace;
        $class   = 'Math::BigInt::Trace';
        $upgrade = 'Math::BigFloat::Trace';
    }
    else {
        # see if we can find Math::BigInt::Lite
        if (!defined $a && !defined $p) {       # rounding won't work to well
            local @@INC = @@INC;
            pop @@INC if $INC[-1] eq '.';
            if (eval { require Math::BigInt::Lite; 1 }) {
                @@import = ();                   # :constant in Lite, not MBI
                Math::BigInt::Lite->import(':constant');
                $_lite = 1;                     # signal okay
            }
        }
        require Math::BigInt if $_lite == 0;    # not already loaded?
        $class = 'Math::BigInt';                # regardless of MBIL or not
    }
    push @@import, $lib_kind => $lib if $lib ne '';
    # Math::BigInt::Trace or plain Math::BigInt
    $class->import(@@import, upgrade => $upgrade);

    require Math::BigFloat;
    Math::BigFloat->import(upgrade => 'Math::BigRat', ':constant');
    require Math::BigRat;
    Math::BigRat->import(@@import);

    bigrat->accuracy($a)  if defined $a;
    bigrat->precision($p) if defined $p;
    if ($ver) {
        print "bigrat\t\t\t v$VERSION\n";
        print "Math::BigInt::Lite\t v$Math::BigInt::Lite::VERSION\n" if $_lite;
        print "Math::BigInt\t\t v$Math::BigInt::VERSION";
        my $config = Math::BigInt->config();
        print " lib => $config->{lib} v$config->{lib_version}\n";
        print "Math::BigFloat\t\t v$Math::BigFloat::VERSION\n";
        print "Math::BigRat\t\t v$Math::BigRat::VERSION\n";
        exit;
    }

    # Take care of octal/hexadecimal constants
    overload::constant binary =>
        sub {
            bigint::_binary_constant(shift);
          };

    # if another big* was already loaded:
    my ($package) = caller();

    no strict 'refs';
    if (!defined *{"${package}::inf"}) {
        $self->export_to_level(1, $self, @@a);   # export inf and NaN
    }
}

sub PI () { Math::BigFloat->new('3.141592653589793238462643383279502884197'); }
sub e  () { Math::BigFloat->new('2.718281828459045235360287471352662497757'); }

sub bpi ($) {
    local $Math::BigFloat::upgrade;
    Math::BigFloat->bpi(@@_);
}

sub bexp ($$) {
    local $Math::BigFloat::upgrade;
    my $x = Math::BigFloat->new($_[0]);
    $x->bexp($_[1]);
}

1;

__END__

=pod

=head1 NAME

bigrat - Transparent BigNumber/BigRational support for Perl

=head1 SYNOPSIS

  use bigrat;

  print 2 + 4.5,"\n";                   # BigFloat 6.5
  print 1/3 + 1/4,"\n";                 # produces 7/12

  {
    no bigrat;
    print 1/3,"\n";                     # 0.33333...
  }

  # Import into current package:
  use bigrat qw/hex oct/;
  print hex("0x1234567890123490"),"\n";
  print oct("01234567890123490"),"\n";

=head1 DESCRIPTION

All operators (including basic math operations) are overloaded. Integer and
floating-point constants are created as proper BigInts or BigFloats,
respectively.

Other than L<bignum>, this module upgrades to Math::BigRat, meaning that
instead of 2.5 you will get 2+1/2 as output.

=head2 Modules Used

C<bigrat> is just a thin wrapper around various modules of the Math::BigInt
family. Think of it as the head of the family, who runs the shop, and orders
the others to do the work.

The following modules are currently used by bignum:

        Math::BigInt::Lite      (for speed, and only if it is loadable)
        Math::BigInt
        Math::BigFloat
        Math::BigRat

=head2 Math Library

Math with the numbers is done (by default) by a module called
Math::BigInt::Calc. This is equivalent to saying:

        use bigrat lib => 'Calc';

You can change this by using:

        use bignum lib => 'GMP';

The following would first try to find Math::BigInt::Foo, then
Math::BigInt::Bar, and when this also fails, revert to Math::BigInt::Calc:

        use bigrat lib => 'Foo,Math::BigInt::Bar';

Using C<lib> warns if none of the specified libraries can be found and
L<Math::BigInt> did fall back to one of the default libraries.
To suppress this warning, use C<try> instead:

        use bignum try => 'GMP';

If you want the code to die instead of falling back, use C<only> instead:

        use bignum only => 'GMP';

Please see respective module documentation for further details.

=head2 Sign

The sign is either '+', '-', 'NaN', '+inf' or '-inf'.

A sign of 'NaN' is used to represent the result when input arguments are not
numbers or as a result of 0/0. '+inf' and '-inf' represent plus respectively
minus infinity. You will get '+inf' when dividing a positive number by 0, and
'-inf' when dividing any negative number by 0.

=head2 Methods

Since all numbers are not objects, you can use all functions that are part of
the BigInt or BigFloat API. It is wise to use only the bxxx() notation, and not
the fxxx() notation, though. This makes you independent on the fact that the
underlying object might morph into a different class than BigFloat.

=over 2

=item inf()

A shortcut to return Math::BigInt->binf(). Useful because Perl does not always
handle bareword C<inf> properly.

=item NaN()

A shortcut to return Math::BigInt->bnan(). Useful because Perl does not always
handle bareword C<NaN> properly.

=item e

        # perl -Mbigrat=e -wle 'print e'

Returns Euler's number C<e>, aka exp(1).

=item PI

        # perl -Mbigrat=PI -wle 'print PI'

Returns PI.

=item bexp()

        bexp($power,$accuracy);

Returns Euler's number C<e> raised to the appropriate power, to
the wanted accuracy.

Example:

        # perl -Mbigrat=bexp -wle 'print bexp(1,80)'

=item bpi()

        bpi($accuracy);

Returns PI to the wanted accuracy.

Example:

        # perl -Mbigrat=bpi -wle 'print bpi(80)'

=item upgrade()

Return the class that numbers are upgraded to, is in fact returning
C<$Math::BigInt::upgrade>.

=item in_effect()

        use bigrat;

        print "in effect\n" if bigrat::in_effect;       # true
        {
          no bigrat;
          print "in effect\n" if bigrat::in_effect;     # false
        }

Returns true or false if C<bigrat> is in effect in the current scope.

This method only works on Perl v5.9.4 or later.

=back

=head2 MATH LIBRARY

Math with the numbers is done (by default) by a module called

=head2 Caveat

But a warning is in order. When using the following to make a copy of a number,
only a shallow copy will be made.

        $x = 9; $y = $x;
        $x = $y = 7;

If you want to make a real copy, use the following:

        $y = $x->copy();

Using the copy or the original with overloaded math is okay, e.g. the
following work:

        $x = 9; $y = $x;
        print $x + 1, " ", $y,"\n";     # prints 10 9

but calling any method that modifies the number directly will result in
B<both> the original and the copy being destroyed:

        $x = 9; $y = $x;
        print $x->badd(1), " ", $y,"\n";        # prints 10 10

        $x = 9; $y = $x;
        print $x->binc(1), " ", $y,"\n";        # prints 10 10

        $x = 9; $y = $x;
        print $x->bmul(2), " ", $y,"\n";        # prints 18 18

Using methods that do not modify, but testthe contents works:

        $x = 9; $y = $x;
        $z = 9 if $x->is_zero();                # works fine

See the documentation about the copy constructor and C<=> in overload, as
well as the documentation in BigInt for further details.

=head2 Options

bignum recognizes some options that can be passed while loading it via use.
The options can (currently) be either a single letter form, or the long form.
The following options exist:

=over 2

=item a or accuracy

This sets the accuracy for all math operations. The argument must be greater
than or equal to zero. See Math::BigInt's bround() function for details.

        perl -Mbigrat=a,50 -le 'print sqrt(20)'

Note that setting precision and accuracy at the same time is not possible.

=item p or precision

This sets the precision for all math operations. The argument can be any
integer. Negative values mean a fixed number of digits after the dot, while
a positive value rounds to this digit left from the dot. 0 or 1 mean round to
integer. See Math::BigInt's bfround() function for details.

        perl -Mbigrat=p,-50 -le 'print sqrt(20)'

Note that setting precision and accuracy at the same time is not possible.

=item t or trace

This enables a trace mode and is primarily for debugging bignum or
Math::BigInt/Math::BigFloat.

=item l or lib

Load a different math lib, see L<MATH LIBRARY>.

        perl -Mbigrat=l,GMP -e 'print 2 ** 512'

Currently there is no way to specify more than one library on the command
line. This means the following does not work:

        perl -Mbignum=l,GMP,Pari -e 'print 2 ** 512'

This will be hopefully fixed soon ;)

=item hex

Override the built-in hex() method with a version that can handle big
numbers. This overrides it by exporting it to the current package. Under
Perl v5.10.0 and higher, this is not so necessary, as hex() is lexically
overridden in the current scope whenever the bigrat pragma is active.

=item oct

Override the built-in oct() method with a version that can handle big
numbers. This overrides it by exporting it to the current package. Under
Perl v5.10.0 and higher, this is not so necessary, as oct() is lexically
overridden in the current scope whenever the bigrat pragma is active.

=item v or version

This prints out the name and version of all modules used and then exits.

        perl -Mbigrat=v

=back

=head1 CAVEATS

=over 2

=item Operator vs literal overloading

C<bigrat> works by overloading handling of integer and floating point
literals, converting them to L<Math::BigInt> or L<Math::BigRat>
objects.

This means that arithmetic involving only string values or string
literals will be performed using Perl's built-in operators.

For example:

    use bigrat;
    my $x = "900000000000000009";
    my $y = "900000000000000007";
    print $x - $y;

will output C<0> on default 32-bit builds, since C<bigrat> never sees
the string literals.  To ensure the expression is all treated as
C<Math::BigInt> or C<Math::BigRat> objects, use a literal number in
the expression:

    print +(0+$x) - $y;

=item in_effect()

This method only works on Perl v5.9.4 or later.

=item hex()/oct()

C<bigint> overrides these routines with versions that can also handle
big integer values. Under Perl prior to version v5.9.4, however, this
will not happen unless you specifically ask for it with the two
import tags "hex" and "oct" - and then it will be global and cannot be
disabled inside a scope with "no bigint":

        use bigint qw/hex oct/;

        print hex("0x1234567890123456");
        {
                no bigint;
                print hex("0x1234567890123456");
        }

The second call to hex() will warn about a non-portable constant.

Compare this to:

        use bigint;

        # will warn only under Perl older than v5.9.4
        print hex("0x1234567890123456");

=back

=head1 EXAMPLES

        perl -Mbigrat -le 'print sqrt(33)'
        perl -Mbigrat -le 'print 2*255'
        perl -Mbigrat -le 'print 4.5+2*255'
        perl -Mbigrat -le 'print 3/7 + 5/7 + 8/3'
        perl -Mbigrat -le 'print 12->is_odd()';
        perl -Mbignum=l,GMP -le 'print 7 ** 7777'

=head1 LICENSE

This program is free software; you may redistribute it and/or modify it under
the same terms as Perl itself.

=head1 SEE ALSO

Especially L<bignum>.

L<Math::BigFloat>, L<Math::BigInt>, L<Math::BigRat> and L<Math::Big> as well
as L<Math::BigInt::Pari> and  L<Math::BigInt::GMP>.

=head1 AUTHORS

(C) by Tels L<http://bloodgate.com/> in early 2002 - 2007.

=cut
@


1.2
log
@merge/resolve conflicts
(some more to do after this one)
@
text
@d2 1
d4 2
d7 6
a12 5
$VERSION = '0.23';
require Exporter;
@@ISA		= qw( bigint );
@@EXPORT_OK 	= qw( PI e bpi bexp );
@@EXPORT		= qw( inf NaN );
a13 1
use strict;
d15 1
a15 1
require bigint;		# no "use" to avoid callind import
d17 1
a17 1
############################################################################## 
d19 6
a24 5
BEGIN 
  {
  *inf = \&bigint::inf;
  *NaN = \&bigint::NaN;
  }
d29 1
a29 1
use vars qw/$VERSION $AUTOLOAD $_lite/;		# _lite for testsuite
d31 2
a32 3
sub AUTOLOAD
  {
  my $name = $AUTOLOAD;
d34 17
a50 20
  $name =~ s/.*:://;    # split package
  no strict 'refs';
  foreach my $n (@@faked)
    {
    if ($n eq $name)
      {
      *{"bigrat::$name"} = sub 
        {
        my $self = shift;
        no strict 'refs';
        if (defined $_[0])
          {
          Math::BigInt->$name($_[0]);
          Math::BigFloat->$name($_[0]);
          return Math::BigRat->$name($_[0]);
          }
        return Math::BigInt->$name();
        };
      return &$name;
      }
a51 5
 
  # delayed load of Carp and avoid recursion
  require Carp;
  Carp::croak ("Can't call bigrat\-\>$name, not a valid method");
  }
d53 15
a67 12
sub unimport
  {
  $^H{bigrat} = undef;					# no longer in effect
  overload::remove_constant('binary','','float','','integer');
  }

sub in_effect
  {
  my $level = shift || 0;
  my $hinthash = (caller($level))[10];
  $hinthash->{bigrat};
  }
a69 1
# the following two routines are for Perl 5.9.4 or later and are lexical
d71 2
a72 7
sub _hex
  {
  return CORE::hex($_[0]) unless in_effect(1);
  my $i = $_[0];
  $i = '0x'.$i unless $i =~ /^0x/;
  Math::BigInt->new($i);
  }
d74 1
a74 11
sub _oct
  {
  return CORE::oct($_[0]) unless in_effect(1);
  my $i = $_[0];
  return Math::BigInt->from_oct($i) if $i =~ /^0[0-7]/;
  Math::BigInt->new($i);
  }

sub import 
  {
  my $self = shift;
d76 1
a76 1
  # see also bignum->import() for additional comments
d78 3
a80 8
  $^H{bigrat} = 1;					# we are in effect

  my ($hex,$oct);
  # for newer Perls always override hex() and oct() with a lexical version:
  if ($] > 5.009004)
    {
    $oct = \&_oct;
    $hex = \&_hex;
d82 60
a141 60
  # some defaults
  my $lib = ''; my $lib_kind = 'try'; my $upgrade = 'Math::BigFloat';

  my @@import = ( ':constant' );				# drive it w/ constant
  my @@a = @@_; my $l = scalar @@_; my $j = 0;
  my ($a,$p);
  my ($ver,$trace);					# version? trace?
  for ( my $i = 0; $i < $l ; $i++,$j++ )
    {
    if ($_[$i] eq 'upgrade')
      {
      # this causes upgrading
      $upgrade = $_[$i+1];		# or undef to disable
      my $s = 2; $s = 1 if @@a-$j < 2;	# avoid "can not modify non-existant..."
      splice @@a, $j, $s; $j -= $s;
      }
    elsif ($_[$i] =~ /^(l|lib|try|only)$/)
      {
      # this causes a different low lib to take care...
      $lib_kind = $1; $lib_kind = 'lib' if $lib_kind eq 'l';
      $lib = $_[$i+1] || '';
      my $s = 2; $s = 1 if @@a-$j < 2;	# avoid "can not modify non-existant..."
      splice @@a, $j, $s; $j -= $s; $i++;
      }
    elsif ($_[$i] =~ /^(a|accuracy)$/)
      {
      $a = $_[$i+1];
      my $s = 2; $s = 1 if @@a-$j < 2;   # avoid "can not modify non-existant..."
      splice @@a, $j, $s; $j -= $s; $i++;
      }
    elsif ($_[$i] =~ /^(p|precision)$/)
      {
      $p = $_[$i+1];
      my $s = 2; $s = 1 if @@a-$j < 2;   # avoid "can not modify non-existant..."
      splice @@a, $j, $s; $j -= $s; $i++;
      }
    elsif ($_[$i] =~ /^(v|version)$/)
      {
      $ver = 1;
      splice @@a, $j, 1; $j --;
      }
    elsif ($_[$i] =~ /^(t|trace)$/)
      {
      $trace = 1;
      splice @@a, $j, 1; $j --;
      }
    elsif ($_[$i] eq 'hex')
      {
      splice @@a, $j, 1; $j --;
      $hex = \&bigint::_hex_global;
      }
    elsif ($_[$i] eq 'oct')
      {
      splice @@a, $j, 1; $j --;
      $oct = \&bigint::_oct_global;
      }
    elsif ($_[$i] !~ /^(PI|e|bpi|bexp)\z/)
      {
      die ("unknown option $_[$i]");
      }
d143 6
a148 6
  my $class;
  $_lite = 0;                                   # using M::BI::L ?
  if ($trace)
    {
    require Math::BigInt::Trace; $class = 'Math::BigInt::Trace';
    $upgrade = 'Math::BigFloat::Trace';
d150 13
a162 15
  else
    {
    # see if we can find Math::BigInt::Lite
    if (!defined $a && !defined $p)             # rounding won't work to well
      {
      eval 'require Math::BigInt::Lite;';
      if ($@@ eq '')
        {
        @@import = ( );                          # :constant in Lite, not MBI
        Math::BigInt::Lite->import( ':constant' );
        $_lite= 1;                              # signal okay
        }
      }
    require Math::BigInt if $_lite == 0;        # not already loaded?
    $class = 'Math::BigInt';                    # regardless of MBIL or not
d164 20
a183 20
  push @@import, $lib_kind => $lib if $lib ne ''; 
  # Math::BigInt::Trace or plain Math::BigInt
  $class->import(@@import, upgrade => $upgrade);

  require Math::BigFloat;
  Math::BigFloat->import( upgrade => 'Math::BigRat', ':constant' );
  require Math::BigRat;

  bigrat->accuracy($a) if defined $a;
  bigrat->precision($p) if defined $p;
  if ($ver)
    {
    print "bigrat\t\t\t v$VERSION\n";
    print "Math::BigInt::Lite\t v$Math::BigInt::Lite::VERSION\n" if $_lite;  
    print "Math::BigInt\t\t v$Math::BigInt::VERSION";
    my $config = Math::BigInt->config();
    print " lib => $config->{lib} v$config->{lib_version}\n";
    print "Math::BigFloat\t\t v$Math::BigFloat::VERSION\n";
    print "Math::BigRat\t\t v$Math::BigRat::VERSION\n";
    exit;
d186 12
a197 10
  # Take care of octal/hexadecimal constants
  overload::constant binary => sub { bigint::_binary_constant(shift) };

  # if another big* was already loaded:
  my ($package) = caller();

  no strict 'refs';
  if (!defined *{"${package}::inf"})
    {
    $self->export_to_level(1,$self,@@a);           # export inf and NaN
d199 1
a199 6
  {
    no warnings 'redefine';
    *CORE::GLOBAL::oct = $oct if $oct;
    *CORE::GLOBAL::hex = $hex if $hex;
  }
  }
d202 1
a202 1
sub e () { Math::BigFloat->new('2.718281828459045235360287471352662497757'); }
d204 10
a213 7
sub bpi ($) { local $Math::BigFloat::upgrade; Math::BigFloat::bpi(@@_); }

sub bexp ($$)
  {
  local $Math::BigFloat::upgrade;
  my $x = Math::BigFloat->new($_[0]); $x->bexp($_[1]);
  }
d219 2
d229 2
a230 2
  print 2 + 4.5,"\n";			# BigFloat 6.5
  print 1/3 + 1/4,"\n";			# produces 7/12
d234 1
a234 1
    print 1/3,"\n";			# 0.33333...
d237 1
a237 1
  # Note that this will make hex() and oct() be globally overriden:
d269 1
a269 1
	use bigrat lib => 'Calc';
d278 1
a278 1
	use bigrat lib => 'Foo,Math::BigInt::Bar';
d282 1
a282 1
To supress this warning, use C<try> instead:
d305 1
a305 1
the fxxx() notation, though. This makes you independed on the fact that the
d322 1
a322 1
	# perl -Mbigrat=e -wle 'print e'
d328 1
a328 1
	# perl -Mbigrat=PI -wle 'print PI'
d334 1
a334 2
	bexp($power,$accuracy);

d341 1
a341 1
	# perl -Mbigrat=bexp -wle 'print bexp(1,80)'
d345 1
a345 1
	bpi($accuracy);
d351 1
a351 1
	# perl -Mbigrat=bpi -wle 'print bpi(80)'
d360 1
a360 1
	use bigrat;
d362 5
a366 5
	print "in effect\n" if bigrat::in_effect;	# true
	{
	  no bigrat;
	  print "in effect\n" if bigrat::in_effect;	# false
	}
d378 1
a378 1
=head2 Cavaet
d388 1
a388 1
	$y = $x->copy();
d429 1
a429 1
	perl -Mbigrat=a,50 -le 'print sqrt(20)'
d431 1
a431 1
Note that setting precision and accurary at the same time is not possible.
d440 1
a440 1
	perl -Mbigrat=p,-50 -le 'print sqrt(20)'
d442 1
a442 1
Note that setting precision and accurary at the same time is not possible.
d453 1
a453 1
	perl -Mbigrat=l,GMP -e 'print 2 ** 512'
d458 1
a458 1
	perl -Mbignum=l,GMP,Pari -e 'print 2 ** 512'
d465 3
a467 2
integers. Note that under Perl v5.9.4 or ealier, this will be global
and cannot be disabled with "no bigint;".
d472 3
a474 2
integers. Note that under Perl v5.9.4 or ealier, this will be global
and cannot be disabled with "no bigint;".
d480 1
a480 1
	perl -Mbigrat=v
d484 1
a484 1
=head1 CAVAETS
d488 23
d523 1
a523 1
	use bigint qw/hex oct/;
d525 5
a529 5
	print hex("0x1234567890123456");
	{
		no bigint;
		print hex("0x1234567890123456");
	}
d535 1
a535 1
	use bigint;
d537 2
a538 2
	# will warn only under Perl older than v5.9.4
	print hex("0x1234567890123456");
d543 7
a549 7
 
	perl -Mbigrat -le 'print sqrt(33)'
	perl -Mbigrat -le 'print 2*255'
	perl -Mbigrat -le 'print 4.5+2*255'
	perl -Mbigrat -le 'print 3/7 + 5/7 + 8/3'	
	perl -Mbigrat -le 'print 12->is_odd()';
	perl -Mbignum=l,GMP -le 'print 7 ** 7777'
d561 1
a561 1
as L<Math::BigInt::BitVect>, L<Math::BigInt::Pari> and  L<Math::BigInt::GMP>.
@


1.1
log
@Initial revision
@
text
@@


1.1.1.1
log
@Perl 5.12.2 from CPAN
@
text
@@


1.1.1.2
log
@Import perl-5.24.2
@
text
@a1 1

a2 2
use strict;
use warnings;
d4 5
a8 6
our $VERSION = '0.42_01';

use Exporter;
our @@ISA            = qw( bigint );
our @@EXPORT_OK      = qw( PI e bpi bexp hex oct );
our @@EXPORT         = qw( inf NaN );
d10 1
d12 1
a12 1
use bigint ();
d14 1
a14 1
##############################################################################
d16 5
a20 6
BEGIN {
    *inf = \&bigint::inf;
    *NaN = \&bigint::NaN;
    *hex = \&bigint::hex;
    *oct = \&bigint::oct;
}
d25 1
a25 1
our ($AUTOLOAD, $_lite);        # _lite for testsuite
d27 3
a29 2
sub AUTOLOAD {
    my $name = $AUTOLOAD;
d31 20
a50 17
    $name =~ s/.*:://;          # split package
    no strict 'refs';
    foreach my $n (@@faked) {
        if ($n eq $name) {
            *{"bigrat::$name"} =
              sub {
                  my $self = shift;
                  no strict 'refs';
                  if (defined $_[0]) {
                      Math::BigInt->$name($_[0]);
                      Math::BigFloat->$name($_[0]);
                      return Math::BigRat->$name($_[0]);
                  }
                  return Math::BigInt->$name();
              };
            return &$name;
        }
d52 5
d58 12
a69 15
    # delayed load of Carp and avoid recursion
    require Carp;
    Carp::croak ("Can't call bigrat\-\>$name, not a valid method");
}

sub unimport {
    $^H{bigrat} = undef;        # no longer in effect
    overload::remove_constant('binary', '', 'float', '', 'integer');
}

sub in_effect {
    my $level = shift || 0;
    my $hinthash = (caller($level))[10];
    $hinthash->{bigrat};
}
d72 1
d74 7
a80 2
sub import {
    my $self = shift;
d82 11
a92 1
    # see also bignum->import() for additional comments
d94 1
a94 1
    $^H{bigrat} = 1;                            # we are in effect
d96 8
a103 3
    # for newer Perls always override hex() and oct() with a lexical version:
    if ($] > 5.009004) {
        bigint::_override();
d105 60
a164 60
    # some defaults
    my $lib      = '';
    my $lib_kind = 'try';
    my $upgrade  = 'Math::BigFloat';

    my @@import = (':constant');                 # drive it w/ constant
    my @@a = @@_;
    my $l = scalar @@_;
    my $j = 0;
    my ($a, $p);
    my ($ver, $trace);                          # version? trace?
    for (my $i = 0; $i < $l ; $i++, $j++) {
        if ($_[$i] eq 'upgrade') {
            # this causes upgrading
            $upgrade = $_[$i + 1];              # or undef to disable
            my $s = 2;
            $s = 1 if @@a - $j < 2;  # avoid "can not modify non-existent..."
            splice @@a, $j, $s;
            $j -= $s;
        }
        elsif ($_[$i] =~ /^(l|lib|try|only)$/) {
            # this causes a different low lib to take care...
            $lib_kind = $1;
            $lib_kind = 'lib' if $lib_kind eq 'l';
            $lib = $_[$i + 1] || '';
            my $s = 2;
            $s = 1 if @@a - $j < 2;  # avoid "can not modify non-existent..."
            splice @@a, $j, $s;
            $j -= $s;
            $i++;
        }
        elsif ($_[$i] =~ /^(a|accuracy)$/) {
            $a = $_[$i + 1];
            my $s = 2;
            $s = 1 if @@a - $j < 2;  # avoid "can not modify non-existent..."
            splice @@a, $j, $s;
            $j -= $s;
            $i++;
        }
        elsif ($_[$i] =~ /^(p|precision)$/) {
            $p = $_[$i + 1];
            my $s = 2;
            $s = 1 if @@a - $j < 2;  # avoid "can not modify non-existent..."
            splice @@a, $j, $s;
            $j -= $s;
            $i++;
        }
        elsif ($_[$i] =~ /^(v|version)$/) {
            $ver = 1;
            splice @@a, $j, 1;
            $j--;
        }
        elsif ($_[$i] =~ /^(t|trace)$/) {
            $trace = 1;
            splice @@a, $j, 1;
            $j--;
        }
        elsif ($_[$i] !~ /^(PI|e|bpi|bexp|hex|oct)\z/) {
            die ("unknown option $_[$i]");
        }
d166 6
a171 6
    my $class;
    $_lite = 0;                                 # using M::BI::L ?
    if ($trace) {
        require Math::BigInt::Trace;
        $class   = 'Math::BigInt::Trace';
        $upgrade = 'Math::BigFloat::Trace';
d173 15
a187 13
    else {
        # see if we can find Math::BigInt::Lite
        if (!defined $a && !defined $p) {       # rounding won't work to well
            local @@INC = @@INC;
            pop @@INC if $INC[-1] eq '.';
            if (eval { require Math::BigInt::Lite; 1 }) {
                @@import = ();                   # :constant in Lite, not MBI
                Math::BigInt::Lite->import(':constant');
                $_lite = 1;                     # signal okay
            }
        }
        require Math::BigInt if $_lite == 0;    # not already loaded?
        $class = 'Math::BigInt';                # regardless of MBIL or not
d189 20
a208 20
    push @@import, $lib_kind => $lib if $lib ne '';
    # Math::BigInt::Trace or plain Math::BigInt
    $class->import(@@import, upgrade => $upgrade);

    require Math::BigFloat;
    Math::BigFloat->import(upgrade => 'Math::BigRat', ':constant');
    require Math::BigRat;
    Math::BigRat->import(@@import);

    bigrat->accuracy($a)  if defined $a;
    bigrat->precision($p) if defined $p;
    if ($ver) {
        print "bigrat\t\t\t v$VERSION\n";
        print "Math::BigInt::Lite\t v$Math::BigInt::Lite::VERSION\n" if $_lite;
        print "Math::BigInt\t\t v$Math::BigInt::VERSION";
        my $config = Math::BigInt->config();
        print " lib => $config->{lib} v$config->{lib_version}\n";
        print "Math::BigFloat\t\t v$Math::BigFloat::VERSION\n";
        print "Math::BigRat\t\t v$Math::BigRat::VERSION\n";
        exit;
d211 10
a220 12
    # Take care of octal/hexadecimal constants
    overload::constant binary =>
        sub {
            bigint::_binary_constant(shift);
          };

    # if another big* was already loaded:
    my ($package) = caller();

    no strict 'refs';
    if (!defined *{"${package}::inf"}) {
        $self->export_to_level(1, $self, @@a);   # export inf and NaN
d222 6
a227 1
}
d230 1
a230 1
sub e  () { Math::BigFloat->new('2.718281828459045235360287471352662497757'); }
d232 7
a238 10
sub bpi ($) {
    local $Math::BigFloat::upgrade;
    Math::BigFloat->bpi(@@_);
}

sub bexp ($$) {
    local $Math::BigFloat::upgrade;
    my $x = Math::BigFloat->new($_[0]);
    $x->bexp($_[1]);
}
a243 2
=pod

d252 2
a253 2
  print 2 + 4.5,"\n";                   # BigFloat 6.5
  print 1/3 + 1/4,"\n";                 # produces 7/12
d257 1
a257 1
    print 1/3,"\n";                     # 0.33333...
d260 1
a260 1
  # Import into current package:
d292 1
a292 1
        use bigrat lib => 'Calc';
d301 1
a301 1
        use bigrat lib => 'Foo,Math::BigInt::Bar';
d305 1
a305 1
To suppress this warning, use C<try> instead:
d328 1
a328 1
the fxxx() notation, though. This makes you independent on the fact that the
d345 1
a345 1
        # perl -Mbigrat=e -wle 'print e'
d351 1
a351 1
        # perl -Mbigrat=PI -wle 'print PI'
d357 2
a358 1
        bexp($power,$accuracy);
d365 1
a365 1
        # perl -Mbigrat=bexp -wle 'print bexp(1,80)'
d369 1
a369 1
        bpi($accuracy);
d375 1
a375 1
        # perl -Mbigrat=bpi -wle 'print bpi(80)'
d384 1
a384 1
        use bigrat;
d386 5
a390 5
        print "in effect\n" if bigrat::in_effect;       # true
        {
          no bigrat;
          print "in effect\n" if bigrat::in_effect;     # false
        }
d402 1
a402 1
=head2 Caveat
d412 1
a412 1
        $y = $x->copy();
d453 1
a453 1
        perl -Mbigrat=a,50 -le 'print sqrt(20)'
d455 1
a455 1
Note that setting precision and accuracy at the same time is not possible.
d464 1
a464 1
        perl -Mbigrat=p,-50 -le 'print sqrt(20)'
d466 1
a466 1
Note that setting precision and accuracy at the same time is not possible.
d477 1
a477 1
        perl -Mbigrat=l,GMP -e 'print 2 ** 512'
d482 1
a482 1
        perl -Mbignum=l,GMP,Pari -e 'print 2 ** 512'
d489 2
a490 3
numbers. This overrides it by exporting it to the current package. Under
Perl v5.10.0 and higher, this is not so necessary, as hex() is lexically
overridden in the current scope whenever the bigrat pragma is active.
d495 2
a496 3
numbers. This overrides it by exporting it to the current package. Under
Perl v5.10.0 and higher, this is not so necessary, as oct() is lexically
overridden in the current scope whenever the bigrat pragma is active.
d502 1
a502 1
        perl -Mbigrat=v
d506 1
a506 1
=head1 CAVEATS
a509 23
=item Operator vs literal overloading

C<bigrat> works by overloading handling of integer and floating point
literals, converting them to L<Math::BigInt> or L<Math::BigRat>
objects.

This means that arithmetic involving only string values or string
literals will be performed using Perl's built-in operators.

For example:

    use bigrat;
    my $x = "900000000000000009";
    my $y = "900000000000000007";
    print $x - $y;

will output C<0> on default 32-bit builds, since C<bigrat> never sees
the string literals.  To ensure the expression is all treated as
C<Math::BigInt> or C<Math::BigRat> objects, use a literal number in
the expression:

    print +(0+$x) - $y;

d522 1
a522 1
        use bigint qw/hex oct/;
d524 5
a528 5
        print hex("0x1234567890123456");
        {
                no bigint;
                print hex("0x1234567890123456");
        }
d534 1
a534 1
        use bigint;
d536 2
a537 2
        # will warn only under Perl older than v5.9.4
        print hex("0x1234567890123456");
d542 7
a548 7

        perl -Mbigrat -le 'print sqrt(33)'
        perl -Mbigrat -le 'print 2*255'
        perl -Mbigrat -le 'print 4.5+2*255'
        perl -Mbigrat -le 'print 3/7 + 5/7 + 8/3'
        perl -Mbigrat -le 'print 12->is_odd()';
        perl -Mbignum=l,GMP -le 'print 7 ** 7777'
d560 1
a560 1
as L<Math::BigInt::Pari> and  L<Math::BigInt::GMP>.
@

