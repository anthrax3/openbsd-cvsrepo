head	1.2;
access;
symbols
	OPENBSD_6_1:1.2.0.2
	OPENBSD_6_1_BASE:1.2
	OPENBSD_6_0:1.1.1.3.0.10
	OPENBSD_6_0_BASE:1.1.1.3
	OPENBSD_5_9:1.1.1.3.0.4
	OPENBSD_5_9_BASE:1.1.1.3
	OPENBSD_5_8:1.1.1.3.0.6
	OPENBSD_5_8_BASE:1.1.1.3
	PERL_5_20_2:1.1.1.3
	OPENBSD_5_7:1.1.1.3.0.2
	OPENBSD_5_7_BASE:1.1.1.3
	PERL_5_20_1:1.1.1.3
	OPENBSD_5_6:1.1.1.2.0.8
	OPENBSD_5_6_BASE:1.1.1.2
	PERL_5_18_2:1.1.1.2
	PERL:1.1.1
	OPENBSD_5_5:1.1.1.2.0.6
	OPENBSD_5_5_BASE:1.1.1.2
	OPENBSD_5_4:1.1.1.2.0.2
	OPENBSD_5_4_BASE:1.1.1.2
	PERL_5_16_3:1.1.1.2
	OPENBSD_5_3:1.1.1.1.0.10
	OPENBSD_5_3_BASE:1.1.1.1
	OPENBSD_5_2:1.1.1.1.0.8
	OPENBSD_5_2_BASE:1.1.1.1
	OPENBSD_5_1_BASE:1.1.1.1
	OPENBSD_5_1:1.1.1.1.0.6
	OPENBSD_5_0:1.1.1.1.0.4
	OPENBSD_5_0_BASE:1.1.1.1
	OPENBSD_4_9:1.1.1.1.0.2
	OPENBSD_4_9_BASE:1.1.1.1
	PERL_5_12_2:1.1.1.1
	CPAN:1.1.1;
locks; strict;
comment	@# @;
expand	@o@;


1.2
date	2017.02.05.00.32.06;	author afresh1;	state Exp;
branches;
next	1.1;
commitid	cxJ08BvJA9Pt2PTM;

1.1
date	2010.09.24.14.49.05;	author millert;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	2010.09.24.14.49.05;	author millert;	state Exp;
branches;
next	1.1.1.2;

1.1.1.2
date	2013.03.25.20.06.45;	author sthen;	state Exp;
branches;
next	1.1.1.3;

1.1.1.3
date	2014.11.17.20.52.41;	author afresh1;	state Exp;
branches;
next	;
commitid	B31cAbBIXiCqnL97;


desc
@@


1.2
log
@Fix merge issues, remove excess files - match perl-5.24.1 dist
@
text
@#!/usr/bin/perl -w
use strict;
use warnings;
use Test::More tests => 10;
use constant NO_SUCH_FILE => 'THIS_FILE_HAD_BETTER_NOT_EXIST';

eval {
    use autodie qw(:1.994);

    open(my $fh, '<', 'this_file_had_better_not_exist.txt');
};

isa_ok($@@, 'autodie::exception', "Basic version tags work");

# Expanding :1.00 should fail, there was no autodie :1.00
eval { my $foo = autodie->_expand_tag(":1.00"); };

isnt($@@,"","Expanding :1.00 should fail");

my $version = $autodie::VERSION;

SKIP: {

    if (not defined($version) or $version =~ /_/) {
	skip "Tag test skipped on dev release", 1;
    }

    # Expanding our current version should work!
    eval { my $foo = autodie->_expand_tag(":$version"); };

    is($@@,"","Expanding :$version should succeed");
}

eval {
    use autodie qw(:2.07);

    # 2.07 didn't support chmod.  This shouldn't throw an
    # exception.

    chmod(0644,NO_SUCH_FILE);
};

is($@@,"","chmod wasn't supported in 2.07");

eval {
    use autodie;

    chmod(0644,NO_SUCH_FILE);
};

isa_ok($@@, 'autodie::exception', 'Our current version supports chmod');

eval {
    use autodie qw(:2.13);

    # 2.13 didn't support chown.  This shouldn't throw an
    # exception.

    chown(12345, 12345, NO_SUCH_FILE);
};

is($@@,"","chown wasn't supported in 2.13");

SKIP: {

    if ($^O eq "MSWin32") { skip("chown() on Windows always succeeds.", 1) }

    eval {
        use autodie;

        chown(12345, 12345, NO_SUCH_FILE);
    };

    isa_ok($@@, 'autodie::exception', 'Our current version supports chown');
}

# The patch in RT 46984 would have utime being set even if an
# older version of autodie semantics was requested. Let's see if
# it's coming from outside the eval context below.

eval { utime undef, undef, NO_SUCH_FILE; };
is($@@,"","utime is not autodying outside of any autodie context.");

# Now do our regular versioning checks for utime.

eval {
    use autodie qw(:2.13);

    utime undef, undef, NO_SUCH_FILE;
};

is($@@,"","utime wasn't supported in 2.13");

eval {
    use autodie;

    utime undef, undef, NO_SUCH_FILE;
};

isa_ok($@@, 'autodie::exception', 'Our current version supports utime');
@


1.1
log
@Initial revision
@
text
@d4 2
a5 1
use Test::More tests => 3;
a14 1

d22 22
a43 2
# Expanding our current version should work!
eval { my $foo = autodie->_expand_tag(":$version"); };
d45 54
a98 1
is($@@,"","Expanding :$version should succeed");
d100 1
@


1.1.1.1
log
@Perl 5.12.2 from CPAN
@
text
@@


1.1.1.2
log
@import perl 5.16.3 from CPAN - worked on by Andrew Fresh and myself
@
text
@d4 1
a4 2
use Test::More tests => 5;
use constant NO_SUCH_FILE => 'THIS_FILE_HAD_BETTER_NOT_EXIST';
d14 1
a26 18
eval {
    use autodie qw(:2.07);

    # 2.07 didn't support chmod.  This shouldn't throw an
    # exception.

    chmod(0644,NO_SUCH_FILE);
};

is($@@,"","chmod wasn't supported in 2.07");

eval {
    use autodie;

    chmod(0644,NO_SUCH_FILE);
};

isa_ok($@@, 'autodie::exception', 'Our current version supports chmod');
@


1.1.1.3
log
@Import perl-5.20.1
@
text
@d4 1
a4 1
use Test::More tests => 10;
d22 2
a23 1
SKIP: {
d25 1
a25 7
    if ($version =~ /_/) { skip "Tag test skipped on dev release", 1 }

    # Expanding our current version should work!
    eval { my $foo = autodie->_expand_tag(":$version"); };

    is($@@,"","Expanding :$version should succeed");
}
a44 49

eval {
    use autodie qw(:2.13);

    # 2.13 didn't support chown.  This shouldn't throw an
    # exception.

    chown(12345, 12345, NO_SUCH_FILE);
};

is($@@,"","chown wasn't supported in 2.13");

SKIP: {

    if ($^O eq "MSWin32") { skip("chown() on Windows always succeeds.", 1) }

    eval {
        use autodie;

        chown(12345, 12345, NO_SUCH_FILE);
    };

    isa_ok($@@, 'autodie::exception', 'Our current version supports chown');
}

# The patch in RT 46984 would have utime being set even if an
# older version of autodie semantics was requested. Let's see if
# it's coming from outside the eval context below.

eval { utime undef, undef, NO_SUCH_FILE; };
is($@@,"","utime is not autodying outside of any autodie context.");

# Now do our regular versioning checks for utime.

eval {
    use autodie qw(:2.13);

    utime undef, undef, NO_SUCH_FILE;
};

is($@@,"","utime wasn't supported in 2.13");

eval {
    use autodie;

    utime undef, undef, NO_SUCH_FILE;
};

isa_ok($@@, 'autodie::exception', 'Our current version supports utime');
@


