head	1.1;
branch	1.1.1;
access;
symbols
	OPENBSD_6_2:1.1.1.1.0.24
	OPENBSD_6_2_BASE:1.1.1.1
	PERL_5_24_2:1.1.1.1
	OPENBSD_6_1:1.1.1.1.0.28
	OPENBSD_6_1_BASE:1.1.1.1
	OPENBSD_6_0:1.1.1.1.0.26
	OPENBSD_6_0_BASE:1.1.1.1
	OPENBSD_5_9:1.1.1.1.0.20
	OPENBSD_5_9_BASE:1.1.1.1
	OPENBSD_5_8:1.1.1.1.0.22
	OPENBSD_5_8_BASE:1.1.1.1
	PERL_5_20_2:1.1.1.1
	OPENBSD_5_7:1.1.1.1.0.14
	OPENBSD_5_7_BASE:1.1.1.1
	PERL_5_20_1:1.1.1.1
	OPENBSD_5_6:1.1.1.1.0.18
	OPENBSD_5_6_BASE:1.1.1.1
	PERL_5_18_2:1.1.1.1
	PERL:1.1.1
	OPENBSD_5_5:1.1.1.1.0.16
	OPENBSD_5_5_BASE:1.1.1.1
	OPENBSD_5_4:1.1.1.1.0.12
	OPENBSD_5_4_BASE:1.1.1.1
	PERL_5_16_3:1.1.1.1
	OPENBSD_5_3:1.1.1.1.0.10
	OPENBSD_5_3_BASE:1.1.1.1
	OPENBSD_5_2:1.1.1.1.0.8
	OPENBSD_5_2_BASE:1.1.1.1
	OPENBSD_5_1_BASE:1.1.1.1
	OPENBSD_5_1:1.1.1.1.0.6
	OPENBSD_5_0:1.1.1.1.0.4
	OPENBSD_5_0_BASE:1.1.1.1
	OPENBSD_4_9:1.1.1.1.0.2
	OPENBSD_4_9_BASE:1.1.1.1
	PERL_5_12_2:1.1.1.1
	CPAN:1.1.1;
locks; strict;
comment	@# @;
expand	@o@;


1.1
date	2010.09.24.14.49.05;	author millert;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	2010.09.24.14.49.05;	author millert;	state Exp;
branches;
next	;


desc
@@


1.1
log
@Initial revision
@
text
@#!/usr/bin/perl -w
use strict;

use Test::More tests => 19;

use constant NO_SUCH_FILE => "this_file_had_better_not_exist";

my $line;

eval {
	use autodie ':io';
	$line = __LINE__; open(my $fh, '<', NO_SUCH_FILE);
};

like($@@, qr/Can't open '\w+' for reading: /, "Prety printed open msg");
like($@@, qr{\Q$0\E}, "Our file mention in error message");

like($@@, qr{for reading: '.+'}, "Error should be in single-quotes");
like($@@->errno,qr/./, "Errno should not be empty");

like($@@, qr{\n$}, "Errors should end with a newline");
is($@@->file, $0, "Correct file");
is($@@->function, 'CORE::open', "Correct dying sub");
is($@@->package, __PACKAGE__, "Correct package");
is($@@->caller,__PACKAGE__."::__ANON__", "Correct caller");
is($@@->line, $line, "Correct line");
is($@@->args->[1], '<', 'Correct mode arg');
is($@@->args->[2], NO_SUCH_FILE, 'Correct filename arg');
ok($@@->matches('open'), 'Looks like an error from open');
ok($@@->matches(':io'),  'Looks like an error from :io');
is($@@->context, 'scalar', 'Open called in scalar/void context');
is($@@->return,undef,'Open should return undef on failure');

# Testing of caller info with a real subroutine.

my $line2;

sub xyzzy {
    use autodie ':io';
    $line2 = __LINE__; open(my $fh, '<', NO_SUCH_FILE);
    return;
};

eval { xyzzy(); };

isa_ok($@@, 'autodie::exception');
is($@@->caller, __PACKAGE__."::xyzzy", "Subroutine caller test");
is($@@->line, $line2, "Subroutine line test");
@


1.1.1.1
log
@Perl 5.12.2 from CPAN
@
text
@@
