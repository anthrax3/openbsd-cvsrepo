head	1.2;
access;
symbols
	PERL_5_24_2:1.1.1.3
	OPENBSD_6_1:1.2.0.4
	OPENBSD_6_1_BASE:1.2
	OPENBSD_6_0:1.1.1.2.0.10
	OPENBSD_6_0_BASE:1.1.1.2
	OPENBSD_5_9:1.1.1.2.0.4
	OPENBSD_5_9_BASE:1.1.1.2
	OPENBSD_5_8:1.1.1.2.0.6
	OPENBSD_5_8_BASE:1.1.1.2
	PERL_5_20_2:1.1.1.2
	OPENBSD_5_7:1.1.1.2.0.2
	OPENBSD_5_7_BASE:1.1.1.2
	PERL_5_20_1:1.1.1.2
	OPENBSD_5_6:1.1.1.1.0.18
	OPENBSD_5_6_BASE:1.1.1.1
	PERL_5_18_2:1.1.1.1
	PERL:1.1.1
	OPENBSD_5_5:1.1.1.1.0.16
	OPENBSD_5_5_BASE:1.1.1.1
	OPENBSD_5_4:1.1.1.1.0.12
	OPENBSD_5_4_BASE:1.1.1.1
	PERL_5_16_3:1.1.1.1
	OPENBSD_5_3:1.1.1.1.0.10
	OPENBSD_5_3_BASE:1.1.1.1
	OPENBSD_5_2:1.1.1.1.0.8
	OPENBSD_5_2_BASE:1.1.1.1
	OPENBSD_5_1_BASE:1.1.1.1
	OPENBSD_5_1:1.1.1.1.0.6
	OPENBSD_5_0:1.1.1.1.0.4
	OPENBSD_5_0_BASE:1.1.1.1
	OPENBSD_4_9:1.1.1.1.0.2
	OPENBSD_4_9_BASE:1.1.1.1
	PERL_5_12_2:1.1.1.1
	CPAN:1.1.1;
locks; strict;
comment	@# @;
expand	@o@;


1.2
date	2017.02.05.00.32.06;	author afresh1;	state Exp;
branches;
next	1.1;
commitid	cxJ08BvJA9Pt2PTM;

1.1
date	2010.09.24.14.49.05;	author millert;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	2010.09.24.14.49.05;	author millert;	state Exp;
branches;
next	1.1.1.2;

1.1.1.2
date	2014.11.17.20.52.41;	author afresh1;	state Exp;
branches;
next	1.1.1.3;
commitid	B31cAbBIXiCqnL97;

1.1.1.3
date	2017.08.14.13.45.32;	author afresh1;	state Exp;
branches;
next	;
commitid	fAzrs78vdW2Yfc6A;


desc
@@


1.2
log
@Fix merge issues, remove excess files - match perl-5.24.1 dist
@
text
@#!/usr/bin/perl -w
use strict;
use FindBin;

# Check for %^H leaking across file boundries.  Many thanks
# to chocolateboy for pointing out this can be a problem.

use lib $FindBin::Bin;

use Test::More 'no_plan';

use constant NO_SUCH_FILE  => 'this_file_had_better_not_exist';
use constant NO_SUCH_FILE2 => 'this_file_had_better_not_exist_either';
use autodie qw(open rename);

eval { open(my $fh, '<', NO_SUCH_FILE); };
ok($@@, "basic autodie test - open");

eval { rename(NO_SUCH_FILE, NO_SUCH_FILE2); };
ok($@@, "basic autodie test - rename");

use autodie_test_module;

# If things don't work as they should, then the file we've
# just loaded will still have an autodying main::open (although
# its own open should be unaffected).

eval { leak_test(NO_SUCH_FILE); };
is($@@,"","autodying main::open should not leak to other files");

eval { autodie_test_module::your_open(NO_SUCH_FILE); };
is($@@,"","Other package open should be unaffected");

# The same should apply for rename (which is different, because
# it doesn't depend upon packages, and could be cached more
# aggressively.)

eval { leak_test_rename(NO_SUCH_FILE, NO_SUCH_FILE2); };
is($@@,"","autodying main::rename should not leak to other files");

eval { autodie_test_module::your_rename(NO_SUCH_FILE, NO_SUCH_FILE2); };
is($@@,"","Other package rename should be unaffected");

# Dying rename in the other package should still die.
eval { autodie_test_module::your_dying_rename(NO_SUCH_FILE, NO_SUCH_FILE2); };
ok($@@, "rename in loaded module should remain autodying.");

# Due to odd filenames reported when doing string evals,
# older versions of autodie would not propogate into string evals.

eval q{
    open(my $fh, '<', NO_SUCH_FILE);
};

TODO: {
    local $TODO = "No known way of propagating into string eval in 5.8"
        if $] < 5.010;

    ok($@@, "Failing-open string eval should throw an exception");
    isa_ok($@@, 'autodie::exception');
}

eval q{
    no autodie;

    open(my $fh, '<', NO_SUCH_FILE);
};

is("$@@","","disabling autodie in string context should work");

eval {
    open(my $fh, '<', NO_SUCH_FILE);
};

ok($@@,"...but shouldn't disable it for the calling code.");
isa_ok($@@, 'autodie::exception');

eval q{
    no autodie;

    use autodie qw(open);

    open(my $fh, '<', NO_SUCH_FILE);
};

ok($@@,"Wacky flipping of autodie in string eval should work too!");
isa_ok($@@, 'autodie::exception');

eval q{
    # RT#72053
    use autodie;
    { no autodie; }
    open(my $fh, '<', NO_SUCH_FILE);
};

ok($@@,"Wacky flipping of autodie in string eval should work too!");
isa_ok($@@, 'autodie::exception');
@


1.1
log
@Initial revision
@
text
@d12 3
a14 2
use constant NO_SUCH_FILE => 'this_file_had_better_not_exist';
use autodie qw(open);
d16 2
a17 3
eval {
    open(my $fh, '<', NO_SUCH_FILE);
};
d19 2
a20 1
ok($@@, "basic autodie test");
d28 1
a28 4
eval {
    leak_test(NO_SUCH_FILE);
};

d31 2
a32 3
eval {
    autodie_test_module::your_open(NO_SUCH_FILE);
};
d34 13
a46 1
is($@@,"","Other package open should be unaffected");
d83 10
@


1.1.1.1
log
@Perl 5.12.2 from CPAN
@
text
@@


1.1.1.2
log
@Import perl-5.20.1
@
text
@d12 2
a13 3
use constant NO_SUCH_FILE  => 'this_file_had_better_not_exist';
use constant NO_SUCH_FILE2 => 'this_file_had_better_not_exist_either';
use autodie qw(open rename);
d15 3
a17 2
eval { open(my $fh, '<', NO_SUCH_FILE); };
ok($@@, "basic autodie test - open");
d19 1
a19 2
eval { rename(NO_SUCH_FILE, NO_SUCH_FILE2); };
ok($@@, "basic autodie test - rename");
d27 4
a30 1
eval { leak_test(NO_SUCH_FILE); };
d33 4
a36 1
eval { autodie_test_module::your_open(NO_SUCH_FILE); };
a37 14

# The same should apply for rename (which is different, because
# it doesn't depend upon packages, and could be cached more
# aggressively.)

eval { leak_test_rename(NO_SUCH_FILE, NO_SUCH_FILE2); };
is($@@,"","autodying main::rename should not leak to other files");

eval { autodie_test_module::your_rename(NO_SUCH_FILE, NO_SUCH_FILE2); };
is($@@,"","Other package rename should be unaffected");

# Dying rename in the other package should still die.
eval { autodie_test_module::your_dying_rename(NO_SUCH_FILE, NO_SUCH_FILE2); };
ok($@@, "rename in loaded module should remain autodying.");
@


1.1.1.3
log
@Import perl-5.24.2
@
text
@a87 10

eval q{
    # RT#72053
    use autodie;
    { no autodie; }
    open(my $fh, '<', NO_SUCH_FILE);
};

ok($@@,"Wacky flipping of autodie in string eval should work too!");
isa_ok($@@, 'autodie::exception');
@


