head	1.1;
branch	1.1.1;
access;
symbols
	OPENBSD_6_0:1.1.1.1.0.10
	OPENBSD_6_0_BASE:1.1.1.1
	OPENBSD_5_9:1.1.1.1.0.4
	OPENBSD_5_9_BASE:1.1.1.1
	OPENBSD_5_8:1.1.1.1.0.6
	OPENBSD_5_8_BASE:1.1.1.1
	PERL_5_20_2:1.1.1.1
	OPENBSD_5_7:1.1.1.1.0.2
	OPENBSD_5_7_BASE:1.1.1.1
	PERL_5_20_1:1.1.1.1
	PERL:1.1.1;
locks; strict;
comment	@# @;
expand	@b@;


1.1
date	2014.11.17.20.52.41;	author afresh1;	state Exp;
branches
	1.1.1.1;
next	;
commitid	B31cAbBIXiCqnL97;

1.1.1.1
date	2014.11.17.20.52.41;	author afresh1;	state Exp;
branches;
next	;
commitid	B31cAbBIXiCqnL97;


desc
@@


1.1
log
@Initial revision
@
text
@#!/usr/bin/perl -w
use strict;
use Test::More;
use constant NO_SUCH_FILE => "this_file_had_better_not_exist";
use autodie;

if ($^O eq 'MSWin32') {
    plan skip_all => 'chown() seems to always succeed on Windows';
}

plan tests => 4;

eval {
    chown(1234, 1234, NO_SUCH_FILE);
};

isa_ok($@@, 'autodie::exception', 'exception thrown for chown');

# Chown returns the number of files that we chowned. So really we
# should die if the return value is not equal to the number of arguments
# minus two.

eval { chown($<, -1, $0); };
ok(! $@@, "Can chown ourselves just fine.");

eval { chown($<, -1, $0, NO_SUCH_FILE); };
isa_ok($@@, 'autodie::exception', "Exception if ANY file changemode fails");
is($@@->return, 1, "Confirm we're dying on a 'true' chown failure.");
@


1.1.1.1
log
@Import perl-5.20.1
@
text
@@
