head	1.1;
branch	1.1.1;
access;
symbols
	OPENBSD_6_1:1.1.1.1.0.24
	OPENBSD_6_1_BASE:1.1.1.1
	OPENBSD_6_0:1.1.1.1.0.26
	OPENBSD_6_0_BASE:1.1.1.1
	OPENBSD_5_9:1.1.1.1.0.20
	OPENBSD_5_9_BASE:1.1.1.1
	OPENBSD_5_8:1.1.1.1.0.22
	OPENBSD_5_8_BASE:1.1.1.1
	PERL_5_20_2:1.1.1.1
	OPENBSD_5_7:1.1.1.1.0.14
	OPENBSD_5_7_BASE:1.1.1.1
	PERL_5_20_1:1.1.1.1
	OPENBSD_5_6:1.1.1.1.0.18
	OPENBSD_5_6_BASE:1.1.1.1
	PERL_5_18_2:1.1.1.1
	PERL:1.1.1
	OPENBSD_5_5:1.1.1.1.0.16
	OPENBSD_5_5_BASE:1.1.1.1
	OPENBSD_5_4:1.1.1.1.0.12
	OPENBSD_5_4_BASE:1.1.1.1
	PERL_5_16_3:1.1.1.1
	OPENBSD_5_3:1.1.1.1.0.10
	OPENBSD_5_3_BASE:1.1.1.1
	OPENBSD_5_2:1.1.1.1.0.8
	OPENBSD_5_2_BASE:1.1.1.1
	OPENBSD_5_1_BASE:1.1.1.1
	OPENBSD_5_1:1.1.1.1.0.6
	OPENBSD_5_0:1.1.1.1.0.4
	OPENBSD_5_0_BASE:1.1.1.1
	OPENBSD_4_9:1.1.1.1.0.2
	OPENBSD_4_9_BASE:1.1.1.1
	PERL_5_12_2:1.1.1.1
	CPAN:1.1.1;
locks; strict;
comment	@# @;
expand	@o@;


1.1
date	2010.09.24.14.49.05;	author millert;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	2010.09.24.14.49.05;	author millert;	state Exp;
branches;
next	;


desc
@@


1.1
log
@Initial revision
@
text
@#!/usr/bin/perl -w
use strict;

use constant NO_SUCH_FILE => 'this_file_had_so_better_not_be_here';

use Test::More tests => 19;

{

    use autodie qw(open);

    eval { open(my $fh, '<', NO_SUCH_FILE); };
    like($@@,qr{Can't open},"autodie qw(open) in lexical scope");

    no autodie qw(open);

    eval { open(my $fh, '<', NO_SUCH_FILE); };
    is($@@,"","no autodie qw(open) in lexical scope");

    use autodie qw(open);
    eval { open(my $fh, '<', NO_SUCH_FILE); };
    like($@@,qr{Can't open},"autodie qw(open) in lexical scope 2");

    no autodie; # Should turn off all autodying subs
    eval { open(my $fh, '<', NO_SUCH_FILE); };
    is($@@,"","no autodie in lexical scope 2");

    # Turn our pragma on one last time, so we can verify that
    # falling out of this block reverts it back to previous
    # behaviour.
    use autodie qw(open);
    eval { open(my $fh, '<', NO_SUCH_FILE); };
    like($@@,qr{Can't open},"autodie qw(open) in lexical scope 3");

}

eval { open(my $fh, '<', NO_SUCH_FILE); };
is($@@,"","autodie open outside of lexical scope");

eval {
    use autodie;	# Should turn on everything
    open(my $fh, '<', NO_SUCH_FILE);
};

like($@@, qr{Can't open}, "vanilla use autodie turns on everything.");

eval { open(my $fh, '<', NO_SUCH_FILE); };
is($@@,"","vanilla autodie cleans up");

{
    use autodie qw(:io);

    eval { open(my $fh, '<', NO_SUCH_FILE); };
    like($@@,qr{Can't open},"autodie q(:io) makes autodying open");

    no autodie qw(:io);

    eval { open(my $fh, '<', NO_SUCH_FILE); };
    is($@@,"", "no autodie qw(:io) disabled autodying open");
}

{
    package Testing_autodie;

    use Test::More;

    use constant NO_SUCH_FILE => ::NO_SUCH_FILE();

    use Fatal qw(open);

    eval { open(my $fh, '<', NO_SUCH_FILE); };

    like($@@, qr{Can't open}, "Package fatal working");
    is(ref $@@,"","Old Fatal throws strings");

    {
        use autodie qw(open);

        ok(1,"use autodie allowed with Fatal");

        eval { open(my $fh, '<', NO_SUCH_FILE); };
        like($@@, qr{Can't open}, "autodie and Fatal works");
        isa_ok($@@, "autodie::exception"); # autodie throws real exceptions

    }

    eval { open(my $fh, '<', NO_SUCH_FILE); };

    like($@@, qr{Can't open}, "Package fatal working after autodie");
    is(ref $@@,"","Old Fatal throws strings after autodie");

    eval " no autodie qw(open); ";

    ok($@@,"no autodie on Fataled sub an error.");

    eval "
        no autodie qw(close);
        use Fatal 'close';
    ";

    like($@@, qr{not allowed}, "Using fatal after autodie is an error.");
}

@


1.1.1.1
log
@Perl 5.12.2 from CPAN
@
text
@@
