head	1.1;
branch	1.1.1;
access;
symbols
	OPENBSD_6_0:1.1.1.1.0.26
	OPENBSD_6_0_BASE:1.1.1.1
	OPENBSD_5_9:1.1.1.1.0.20
	OPENBSD_5_9_BASE:1.1.1.1
	OPENBSD_5_8:1.1.1.1.0.22
	OPENBSD_5_8_BASE:1.1.1.1
	PERL_5_20_2:1.1.1.1
	OPENBSD_5_7:1.1.1.1.0.14
	OPENBSD_5_7_BASE:1.1.1.1
	PERL_5_20_1:1.1.1.1
	OPENBSD_5_6:1.1.1.1.0.18
	OPENBSD_5_6_BASE:1.1.1.1
	PERL_5_18_2:1.1.1.1
	PERL:1.1.1
	OPENBSD_5_5:1.1.1.1.0.16
	OPENBSD_5_5_BASE:1.1.1.1
	OPENBSD_5_4:1.1.1.1.0.12
	OPENBSD_5_4_BASE:1.1.1.1
	PERL_5_16_3:1.1.1.1
	OPENBSD_5_3:1.1.1.1.0.10
	OPENBSD_5_3_BASE:1.1.1.1
	OPENBSD_5_2:1.1.1.1.0.8
	OPENBSD_5_2_BASE:1.1.1.1
	OPENBSD_5_1_BASE:1.1.1.1
	OPENBSD_5_1:1.1.1.1.0.6
	OPENBSD_5_0:1.1.1.1.0.4
	OPENBSD_5_0_BASE:1.1.1.1
	OPENBSD_4_9:1.1.1.1.0.2
	OPENBSD_4_9_BASE:1.1.1.1
	PERL_5_12_2:1.1.1.1
	CPAN:1.1.1;
locks; strict;
comment	@# @;
expand	@o@;


1.1
date	2010.09.24.14.49.05;	author millert;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	2010.09.24.14.49.05;	author millert;	state Exp;
branches;
next	;


desc
@@


1.1
log
@Initial revision
@
text
@#!/usr/bin/perl -w
use strict;

use FindBin;
use Test::More 'no_plan';

use lib "$FindBin::Bin/lib";

use constant NO_SUCH_FILE => "this_file_had_better_not_exist_xyzzy";

### Tests with non-existent exception class.

my $open_success = eval {
    use autodie::test::missing qw(open);    # Uses non-existent exceptions
    open(my $fh, '<', NO_SUCH_FILE);
    1;
};

is($open_success,undef,"Open should fail");

isnt($@@,"",'$@@ should not be empty');

is(ref($@@),"",'$@@ should not be a reference or object');

like($@@, qr/Failed to load/, '$@@ should contain bad exception class msg');

#### Tests with malformed exception class.

my $open_success2 = eval {
    use autodie::test::badname qw(open);
    open(my $fh, '<', NO_SUCH_FILE);
    1;
};

is($open_success2,undef,"Open should fail");

isnt($@@,"",'$@@ should not be empty');

is(ref($@@),"",'$@@ should not be a reference or object');

like($@@, qr/Bad exception class/, '$@@ should contain bad exception class msg');

### Tests with well-formed exception class (in Klingon)

my $open_success3 = eval {
    use pujHa'ghach qw(open);         #' <-- this makes my editor happy
    open(my $fh, '<', NO_SUCH_FILE);
    1;
};

is($open_success3,undef,"Open should fail");

isnt("$@@","",'$@@ should not be empty');

isa_ok($@@, "pujHa'ghach::Dotlh", '$@@ should be a Klingon exception');

like($@@, qr/lujqu'/, '$@@ should contain Klingon text');
@


1.1.1.1
log
@Perl 5.12.2 from CPAN
@
text
@@
