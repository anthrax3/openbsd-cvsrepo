head	1.2;
access;
symbols
	OPENBSD_6_0:1.1.1.1.0.26
	OPENBSD_6_0_BASE:1.1.1.1
	OPENBSD_5_9:1.1.1.1.0.20
	OPENBSD_5_9_BASE:1.1.1.1
	OPENBSD_5_8:1.1.1.1.0.22
	OPENBSD_5_8_BASE:1.1.1.1
	PERL_5_20_2:1.1.1.1
	OPENBSD_5_7:1.1.1.1.0.14
	OPENBSD_5_7_BASE:1.1.1.1
	PERL_5_20_1:1.1.1.1
	OPENBSD_5_6:1.1.1.1.0.18
	OPENBSD_5_6_BASE:1.1.1.1
	PERL_5_18_2:1.1.1.1
	PERL:1.1.1
	OPENBSD_5_5:1.1.1.1.0.16
	OPENBSD_5_5_BASE:1.1.1.1
	OPENBSD_5_4:1.1.1.1.0.12
	OPENBSD_5_4_BASE:1.1.1.1
	PERL_5_16_3:1.1.1.1
	OPENBSD_5_3:1.1.1.1.0.10
	OPENBSD_5_3_BASE:1.1.1.1
	OPENBSD_5_2:1.1.1.1.0.8
	OPENBSD_5_2_BASE:1.1.1.1
	OPENBSD_5_1_BASE:1.1.1.1
	OPENBSD_5_1:1.1.1.1.0.6
	OPENBSD_5_0:1.1.1.1.0.4
	OPENBSD_5_0_BASE:1.1.1.1
	OPENBSD_4_9:1.1.1.1.0.2
	OPENBSD_4_9_BASE:1.1.1.1
	PERL_5_12_2:1.1.1.1
	CPAN:1.1.1;
locks; strict;
comment	@# @;
expand	@o@;


1.2
date	2017.02.05.00.32.06;	author afresh1;	state Exp;
branches;
next	1.1;
commitid	cxJ08BvJA9Pt2PTM;

1.1
date	2010.09.24.14.49.05;	author millert;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	2010.09.24.14.49.05;	author millert;	state Exp;
branches;
next	;


desc
@@


1.2
log
@Fix merge issues, remove excess files - match perl-5.24.1 dist
@
text
@package Hints_pod_examples;
use strict;
use warnings;

use Exporter 5.57 'import';

our %DOES = ( 'autodie::hints::provider' => 1 );

our @@EXPORT_OK = qw(
	undef_scalar false_scalar zero_scalar empty_list default_list
	empty_or_false_list undef_n_error_list foo re_fail bar
	think_positive my_system bizarro_system	
);

use autodie::hints;

sub AUTODIE_HINTS {
    return {
        # Scalar failures always return undef:
        undef_scalar =>    {  fail => undef  },

        # Scalar failures return any false value [default behaviour]:
        false_scalar =>    {  fail => sub { return ! $_[0] }  },

        # Scalar failures always return zero explicitly:
        zero_scalar =>     {  fail => '0'  },

        # List failures always return empty list:
        # We never want these called in a scalar context
        empty_list  =>     {  scalar => sub { 1 }, list => []  },

        # List failures return C<()> or C<(undef)> [default expectation]:
        default_list => {  fail => sub { ! @@_ || @@_ == 1 && !defined $_[0] }  },

        # List failures return C<()> or a single false value:
        empty_or_false_list => {  fail => sub { ! @@_ || @@_ == 1 && !$_[0] }  },

        # List failures return (undef, "some string")
        undef_n_error_list => {  fail => sub { @@_ == 2 && !defined $_[0] }  },
    };
}	

# Define some subs that all just return their arguments
sub undef_scalar { return wantarray ? @@_ : $_[0] }
sub false_scalar { return wantarray ? @@_ : $_[0] }
sub zero_scalar  { return wantarray ? @@_ : $_[0] }
sub empty_list   { return wantarray ? @@_ : $_[0] }
sub default_list { return wantarray ? @@_ : $_[0] }
sub empty_or_false_list { return wantarray ? @@_ : $_[0] }
sub undef_n_error_list { return wantarray ? @@_  : $_[0] }


# Unsuccessful foo() returns 0 in all contexts...
autodie::hints->set_hints_for(
    \&foo,
    {
	scalar => 0,
	list   => [0],
    }
);

sub foo { return wantarray ? @@_ : $_[0] }

# Unsuccessful re_fail() returns 'FAIL' or '_FAIL' in scalar context,
#                    returns (-1) in list context...
autodie::hints->set_hints_for(
    \&re_fail,
    {
	scalar => qr/^ _? FAIL $/xms,
	list   => [-1],
    }
);

sub re_fail { return wantarray ? @@_ : $_[0] }

# Unsuccessful bar() returns 0 in all contexts...
autodie::hints->set_hints_for(
    \&bar,
    {
	scalar => 0,
	list   => [0],
    }
);

sub bar { return wantarray ? @@_ : $_[0] }

# Unsuccessful think_positive() returns negative number on failure...
autodie::hints->set_hints_for(
    \&think_positive,
    {
	scalar => sub { $_[0] < 0 },
	list   => sub { $_[0] < 0 },
    }
);

sub think_positive { return wantarray ? @@_ : $_[0] }

# Unsuccessful my_system() returns non-zero on failure...
autodie::hints->set_hints_for(
    \&my_system,
    {
	scalar => sub { $_[0] != 0 },
	list   => sub { $_[0] != 0 },
    }
);
sub my_system { return wantarray ? @@_ : $_[0] };

1;
@


1.1
log
@Initial revision
@
text
@d5 1
a5 1
use base qw(Exporter);
@


1.1.1.1
log
@Perl 5.12.2 from CPAN
@
text
@@
