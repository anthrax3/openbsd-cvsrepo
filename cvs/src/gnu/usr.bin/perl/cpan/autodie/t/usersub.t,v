head	1.1;
branch	1.1.1;
access;
symbols
	OPENBSD_6_1:1.1.1.1.0.24
	OPENBSD_6_1_BASE:1.1.1.1
	OPENBSD_6_0:1.1.1.1.0.26
	OPENBSD_6_0_BASE:1.1.1.1
	OPENBSD_5_9:1.1.1.1.0.20
	OPENBSD_5_9_BASE:1.1.1.1
	OPENBSD_5_8:1.1.1.1.0.22
	OPENBSD_5_8_BASE:1.1.1.1
	PERL_5_20_2:1.1.1.1
	OPENBSD_5_7:1.1.1.1.0.14
	OPENBSD_5_7_BASE:1.1.1.1
	PERL_5_20_1:1.1.1.1
	OPENBSD_5_6:1.1.1.1.0.18
	OPENBSD_5_6_BASE:1.1.1.1
	PERL_5_18_2:1.1.1.1
	PERL:1.1.1
	OPENBSD_5_5:1.1.1.1.0.16
	OPENBSD_5_5_BASE:1.1.1.1
	OPENBSD_5_4:1.1.1.1.0.12
	OPENBSD_5_4_BASE:1.1.1.1
	PERL_5_16_3:1.1.1.1
	OPENBSD_5_3:1.1.1.1.0.10
	OPENBSD_5_3_BASE:1.1.1.1
	OPENBSD_5_2:1.1.1.1.0.8
	OPENBSD_5_2_BASE:1.1.1.1
	OPENBSD_5_1_BASE:1.1.1.1
	OPENBSD_5_1:1.1.1.1.0.6
	OPENBSD_5_0:1.1.1.1.0.4
	OPENBSD_5_0_BASE:1.1.1.1
	OPENBSD_4_9:1.1.1.1.0.2
	OPENBSD_4_9_BASE:1.1.1.1
	PERL_5_12_2:1.1.1.1
	CPAN:1.1.1;
locks; strict;
comment	@# @;
expand	@o@;


1.1
date	2010.09.24.14.49.05;	author millert;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	2010.09.24.14.49.05;	author millert;	state Exp;
branches;
next	;


desc
@@


1.1
log
@Initial revision
@
text
@#!/usr/bin/perl -w
use strict;

use Test::More 'no_plan';

sub mytest {
    return $_[0];
}

is(mytest(q{foo}),q{foo},"Mytest returns input");

my $return = eval { mytest(undef); };

ok(!defined($return), "mytest returns undef without autodie");
is($@@,"","Mytest doesn't throw an exception without autodie");

$return = eval {
    use autodie qw(mytest);

    mytest('foo');
};

is($return,'foo',"Mytest returns input with autodie");
is($@@,"","No error should be thrown");

$return = eval {
    use autodie qw(mytest);

    mytest(undef);
};

isa_ok($@@,'autodie::exception',"autodie mytest/undef throws exception");

# We set initial values here because we're expecting $data to be
# changed to undef later on.   Having it as undef to begin with means
# we can't see mytest(undef) working correctly.

my ($data, $data2) = (1,1);

eval {
    use autodie qw(mytest);

    {
        no autodie qw(mytest);

        $data  = mytest(undef);
        $data2 = mytest('foo');
    }
};

is($@@,"","no autodie can counter use autodie for user subs");
ok(!defined($data), "mytest(undef) should return undef");
is($data2, "foo", "mytest(foo) should return foo");

eval {
    mytest(undef);
};

is($@@,"","No lingering failure effects");

$return = eval {
    mytest("bar");
};

is($return,"bar","No lingering return effects");
@


1.1.1.1
log
@Perl 5.12.2 from CPAN
@
text
@@
