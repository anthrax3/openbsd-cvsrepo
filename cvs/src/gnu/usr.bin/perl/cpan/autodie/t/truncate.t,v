head	1.5;
access;
symbols
	PERL_5_24_2:1.1.1.3
	OPENBSD_6_1:1.5.0.4
	OPENBSD_6_1_BASE:1.5
	OPENBSD_6_0:1.4.0.8
	OPENBSD_6_0_BASE:1.4
	OPENBSD_5_9:1.4.0.2
	OPENBSD_5_9_BASE:1.4
	OPENBSD_5_8:1.4.0.4
	OPENBSD_5_8_BASE:1.4
	PERL_5_20_2:1.1.1.2
	OPENBSD_5_7:1.2.0.2
	OPENBSD_5_7_BASE:1.2
	PERL_5_20_1:1.1.1.2
	OPENBSD_5_6:1.1.1.1.0.18
	OPENBSD_5_6_BASE:1.1.1.1
	PERL_5_18_2:1.1.1.1
	PERL:1.1.1
	OPENBSD_5_5:1.1.1.1.0.16
	OPENBSD_5_5_BASE:1.1.1.1
	OPENBSD_5_4:1.1.1.1.0.12
	OPENBSD_5_4_BASE:1.1.1.1
	PERL_5_16_3:1.1.1.1
	OPENBSD_5_3:1.1.1.1.0.10
	OPENBSD_5_3_BASE:1.1.1.1
	OPENBSD_5_2:1.1.1.1.0.8
	OPENBSD_5_2_BASE:1.1.1.1
	OPENBSD_5_1_BASE:1.1.1.1
	OPENBSD_5_1:1.1.1.1.0.6
	OPENBSD_5_0:1.1.1.1.0.4
	OPENBSD_5_0_BASE:1.1.1.1
	OPENBSD_4_9:1.1.1.1.0.2
	OPENBSD_4_9_BASE:1.1.1.1
	PERL_5_12_2:1.1.1.1
	CPAN:1.1.1;
locks; strict;
comment	@# @;
expand	@o@;


1.5
date	2017.02.05.00.32.06;	author afresh1;	state Exp;
branches;
next	1.4;
commitid	cxJ08BvJA9Pt2PTM;

1.4
date	2015.04.25.19.26.21;	author afresh1;	state Exp;
branches;
next	1.3;
commitid	3qGYFVvfrExB70FB;

1.3
date	2015.04.25.19.14.45;	author afresh1;	state Exp;
branches;
next	1.2;
commitid	XRK22kO4se3v2i2I;

1.2
date	2014.11.17.21.00.59;	author afresh1;	state Exp;
branches;
next	1.1;
commitid	LnErp1MFKSuew5Fr;

1.1
date	2010.09.24.14.49.05;	author millert;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	2010.09.24.14.49.05;	author millert;	state Exp;
branches;
next	1.1.1.2;

1.1.1.2
date	2014.11.17.20.52.41;	author afresh1;	state Exp;
branches;
next	1.1.1.3;
commitid	B31cAbBIXiCqnL97;

1.1.1.3
date	2017.08.14.13.45.32;	author afresh1;	state Exp;
branches;
next	;
commitid	fAzrs78vdW2Yfc6A;


desc
@@


1.5
log
@Fix merge issues, remove excess files - match perl-5.24.1 dist
@
text
@#!/usr/bin/perl -w
use strict;

use Test::More;
use File::Temp qw(tempfile);
use IO::Handle;
use File::Spec;
use FindBin qw($Bin);

my ($truncate_status, $tmpfh, $tmpfile);

# Some systems have a screwy tempfile. We don't run our tests there.
eval {
    ($tmpfh, $tmpfile) = tempfile(UNLINK => 1);
};

if ($@@ or !defined $tmpfh) {
    plan skip_all => 'tempfile() not happy on this system.';
}

eval {
    $truncate_status = truncate($tmpfh, 0);
};

if ($@@ || !defined($truncate_status)) {
    plan skip_all => 'Truncate not implemented or not working on this system';
}

plan tests => 12;

SKIP: {
    my $can_truncate_stdout = truncate(\*STDOUT,0);

    if ($can_truncate_stdout) {
        skip("This system thinks we can truncate STDOUT. Suuure!", 1);
    }

    eval {
        use autodie;
        truncate(\*STDOUT,0);
    };

    isa_ok($@@, 'autodie::exception', "Truncating STDOUT should throw an exception");

}

eval {
    use autodie;
    no warnings 'once';
    truncate(\*FOO, 0);
};

isa_ok($@@, 'autodie::exception', "Truncating an unopened file is wrong.");

$tmpfh->print("Hello World");
$tmpfh->flush;

eval {
    use autodie;
    truncate($tmpfh, 0);
};

is($@@, "", "Truncating a normal file should be fine");

$tmpfh->close;

# Time to test truncating via globs.

# Firstly, truncating a closed filehandle should fail.
# I know we tested this above, but we'll do a full dance of
# opening and closing TRUNCATE_FH here.

eval {
    use autodie qw(truncate);
    truncate(\*TRUNCATE_FH, 0);
};

isa_ok($@@, 'autodie::exception', "Truncating unopened file (TRUNCATE_FH)");

# Now open the file. If this throws an exception, there's something
# wrong with our tests, or autodie...
{
    use autodie qw(open);
    open(TRUNCATE_FH, '+<', $tmpfile);
}

# Now try truncating the filehandle. This should succeed.

eval {
    use autodie qw(truncate);
    truncate(\*TRUNCATE_FH,0);
};

is($@@, "", 'Truncating an opened glob (\*TRUNCATE_FH)');

eval {
    use autodie qw(truncate);
    truncate(*TRUNCATE_FH,0);
};

is($@@, "", 'Truncating an opened glob (*TRUNCATE_FH)');

# Now let's change packages, since globs are package dependent

eval {
    package Fatal::Test;
    no warnings 'once';
    use autodie qw(truncate);
    truncate(\*TRUNCATE_FH,0);  # Should die, as now unopened
};

isa_ok($@@, 'autodie::exception', 'Truncating unopened file in different package (\*TRUNCATE_FH)');

eval {
    package Fatal::Test;
    no warnings 'once';
    use autodie qw(truncate);
    truncate(*TRUNCATE_FH,0);  # Should die, as now unopened
};

isa_ok($@@, 'autodie::exception', 'Truncating unopened file in different package (*TRUNCATE_FH)');

# Now back to our previous test, just to make sure it hasn't changed
# the original file.

eval {
    use autodie qw(truncate);
    truncate(\*TRUNCATE_FH,0);
};

is($@@, "", 'Truncating an opened glob #2 (\*TRUNCATE_FH)');

eval {
    use autodie qw(truncate);
    truncate(*TRUNCATE_FH,0);
};

is($@@, "", 'Truncating an opened glob #2 (*TRUNCATE_FH)');

# Now to close the file and retry.
{
    use autodie qw(close);
    close(TRUNCATE_FH);
}

eval {
    use autodie qw(truncate);
    truncate(\*TRUNCATE_FH,0);
};

isa_ok($@@, 'autodie::exception', 'Truncating freshly closed glob (\*TRUNCATE_FH)');

eval {
    use autodie qw(truncate);
    truncate(*TRUNCATE_FH,0);
};

isa_ok($@@, 'autodie::exception', 'Truncating freshly closed glob (*TRUNCATE_FH)');
@


1.4
log
@Apply local patches, remove excess files - perl-5.20.2
@
text
@d14 1
a14 1
    ($tmpfh, $tmpfile) = tempfile();
d64 2
@


1.3
log
@Fix merge issues, remove excess files - match perl-5.20.2 dist
@
text
@a8 1
use constant TRUNCATE_ME => File::Spec->catfile($Bin,'truncate_me');
d10 1
a10 1
my ($truncate_status, $tmpfh);
d14 1
a14 1
    $tmpfh = tempfile();
d82 1
a82 1
    open(TRUNCATE_FH, '+<', TRUNCATE_ME);
@


1.2
log
@Apply local patches to perl-5.20.1

ok deraadt@@ sthen@@ espie@@ miod@@
@
text
@d9 1
d11 1
a11 1
my ($truncate_status, $tmpfh, $tmpfile);
d15 1
a15 1
    ($tmpfh, $tmpfile) = tempfile();
d83 1
a83 1
    open(TRUNCATE_FH, '+<', $tmpfile);
@


1.1
log
@Initial revision
@
text
@d7 2
d10 10
a19 2
my $tmpfh = tempfile();
my $truncate_status;
d29 1
a29 1
plan tests => 3;
d64 93
@


1.1.1.1
log
@Perl 5.12.2 from CPAN
@
text
@@


1.1.1.2
log
@Import perl-5.20.1
@
text
@a6 3
use File::Spec;
use FindBin qw($Bin);
use constant TRUNCATE_ME => File::Spec->catfile($Bin,'truncate_me');
d8 2
a9 10
my ($truncate_status, $tmpfh);

# Some systems have a screwy tempfile. We don't run our tests there.
eval {
    $tmpfh = tempfile();
};

if ($@@ or !defined $tmpfh) {
    plan skip_all => 'tempfile() not happy on this system.';
}
d19 1
a19 1
plan tests => 12;
a53 93

# Time to test truncating via globs.

# Firstly, truncating a closed filehandle should fail.
# I know we tested this above, but we'll do a full dance of
# opening and closing TRUNCATE_FH here.

eval {
    use autodie qw(truncate);
    truncate(\*TRUNCATE_FH, 0);
};

isa_ok($@@, 'autodie::exception', "Truncating unopened file (TRUNCATE_FH)");

# Now open the file. If this throws an exception, there's something
# wrong with our tests, or autodie...
{
    use autodie qw(open);
    open(TRUNCATE_FH, '+<', TRUNCATE_ME);
}

# Now try truncating the filehandle. This should succeed.

eval {
    use autodie qw(truncate);
    truncate(\*TRUNCATE_FH,0);
};

is($@@, "", 'Truncating an opened glob (\*TRUNCATE_FH)');

eval {
    use autodie qw(truncate);
    truncate(*TRUNCATE_FH,0);
};

is($@@, "", 'Truncating an opened glob (*TRUNCATE_FH)');

# Now let's change packages, since globs are package dependent

eval {
    package Fatal::Test;
    no warnings 'once';
    use autodie qw(truncate);
    truncate(\*TRUNCATE_FH,0);  # Should die, as now unopened
};

isa_ok($@@, 'autodie::exception', 'Truncating unopened file in different package (\*TRUNCATE_FH)');

eval {
    package Fatal::Test;
    no warnings 'once';
    use autodie qw(truncate);
    truncate(*TRUNCATE_FH,0);  # Should die, as now unopened
};

isa_ok($@@, 'autodie::exception', 'Truncating unopened file in different package (*TRUNCATE_FH)');

# Now back to our previous test, just to make sure it hasn't changed
# the original file.

eval {
    use autodie qw(truncate);
    truncate(\*TRUNCATE_FH,0);
};

is($@@, "", 'Truncating an opened glob #2 (\*TRUNCATE_FH)');

eval {
    use autodie qw(truncate);
    truncate(*TRUNCATE_FH,0);
};

is($@@, "", 'Truncating an opened glob #2 (*TRUNCATE_FH)');

# Now to close the file and retry.
{
    use autodie qw(close);
    close(TRUNCATE_FH);
}

eval {
    use autodie qw(truncate);
    truncate(\*TRUNCATE_FH,0);
};

isa_ok($@@, 'autodie::exception', 'Truncating freshly closed glob (\*TRUNCATE_FH)');

eval {
    use autodie qw(truncate);
    truncate(*TRUNCATE_FH,0);
};

isa_ok($@@, 'autodie::exception', 'Truncating freshly closed glob (*TRUNCATE_FH)');
@


1.1.1.3
log
@Import perl-5.24.2
@
text
@d9 1
d11 1
a11 1
my ($truncate_status, $tmpfh, $tmpfile);
d15 1
a15 1
    ($tmpfh, $tmpfile) = tempfile(UNLINK => 1);
a65 2
$tmpfh->close;

d83 1
a83 1
    open(TRUNCATE_FH, '+<', $tmpfile);
@


