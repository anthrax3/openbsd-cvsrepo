head	1.1;
branch	1.1.1;
access;
symbols
	OPENBSD_6_1:1.1.1.2.0.14
	OPENBSD_6_1_BASE:1.1.1.2
	OPENBSD_6_0:1.1.1.2.0.16
	OPENBSD_6_0_BASE:1.1.1.2
	OPENBSD_5_9:1.1.1.2.0.10
	OPENBSD_5_9_BASE:1.1.1.2
	OPENBSD_5_8:1.1.1.2.0.12
	OPENBSD_5_8_BASE:1.1.1.2
	PERL_5_20_2:1.1.1.2
	OPENBSD_5_7:1.1.1.2.0.4
	OPENBSD_5_7_BASE:1.1.1.2
	PERL_5_20_1:1.1.1.2
	OPENBSD_5_6:1.1.1.2.0.8
	OPENBSD_5_6_BASE:1.1.1.2
	PERL_5_18_2:1.1.1.2
	PERL:1.1.1
	OPENBSD_5_5:1.1.1.2.0.6
	OPENBSD_5_5_BASE:1.1.1.2
	OPENBSD_5_4:1.1.1.2.0.2
	OPENBSD_5_4_BASE:1.1.1.2
	PERL_5_16_3:1.1.1.2
	OPENBSD_5_3:1.1.1.1.0.10
	OPENBSD_5_3_BASE:1.1.1.1
	OPENBSD_5_2:1.1.1.1.0.8
	OPENBSD_5_2_BASE:1.1.1.1
	OPENBSD_5_1_BASE:1.1.1.1
	OPENBSD_5_1:1.1.1.1.0.6
	OPENBSD_5_0:1.1.1.1.0.4
	OPENBSD_5_0_BASE:1.1.1.1
	OPENBSD_4_9:1.1.1.1.0.2
	OPENBSD_4_9_BASE:1.1.1.1
	PERL_5_12_2:1.1.1.1
	CPAN:1.1.1;
locks; strict;
comment	@# @;
expand	@o@;


1.1
date	2010.09.24.14.49.05;	author millert;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	2010.09.24.14.49.05;	author millert;	state Exp;
branches;
next	1.1.1.2;

1.1.1.2
date	2013.03.25.20.06.44;	author sthen;	state Exp;
branches;
next	;


desc
@@


1.1
log
@Initial revision
@
text
@#!/usr/bin/perl -w
use strict;
use warnings;
use Fatal;
use Test::More 'no_plan';

# Tests to determine if Fatal's internal interfaces remain backwards
# compatible.
#
# WARNING: This file contains a lot of very ugly code, hard-coded
# strings, and nasty API calls.  It may frighten small children.
# Viewer discretion is advised.

# fill_protos.  This hasn't been changed since the original Fatal,
# and so should always be the same.

my %protos = (
    '$'     => [ [ 1, '$_[0]' ] ],
    '$$'    => [ [ 2, '$_[0]', '$_[1]' ] ],
    '$$@@'   => [ [ 3, '$_[0]', '$_[1]', '@@_[2..$#_]' ] ],
    '\$'    => [ [ 1, '${$_[0]}' ] ],
    '\%'    => [ [ 1, '%{$_[0]}' ] ],
    '\%;$*' => [ [ 1, '%{$_[0]}' ], [ 2, '%{$_[0]}', '$_[1]' ],
                 [ 3, '%{$_[0]}', '$_[1]', '$_[2]' ] ],
);

while (my ($proto, $code) = each %protos) {
    is_deeply( [ Fatal::fill_protos($proto) ], $code, $proto);
}

# write_invocation tests
no warnings 'qw';

# Technically the outputted code varies from the classical Fatal.
# However the changes are mostly whitespace.  Those that aren't are
# improvements to error messages.

my @@write_invocation_calls = (
    [
        # Core  # Call          # Name  # Void  # Args
        [ 1,    'CORE::open',   'open', 0,      [ 1, qw($_[0]) ],
                                                [ 2, qw($_[0] $_[1]) ],
                                                [ 3, qw($_[0] $_[1] @@_[2..$#_])]
        ],
        q{	if (@@_ == 1) {
return CORE::open($_[0]) || croak "Can't open(@@_): $!"	} elsif (@@_ == 2) {
return CORE::open($_[0], $_[1]) || croak "Can't open(@@_): $!"	} elsif (@@_ == 3) {
return CORE::open($_[0], $_[1], @@_[2..$#_]) || croak "Can't open(@@_): $!"
            }
            die "Internal error: open(@@_): Do not expect to get ", scalar(@@_), " arguments";
    }
    ]
);

foreach my $test (@@write_invocation_calls) {
    is(Fatal::write_invocation( @@{ $test->[0] } ), $test->[1], 'write_inovcation');
}

# one_invocation tests.

my @@one_invocation_calls = (
        # Core  # Call          # Name  # Void   # Args
    [
        [ 1,    'CORE::open',   'open', 0,      qw($_[0] $_[1] @@_[2..$#_]) ],
        q{return CORE::open($_[0], $_[1], @@_[2..$#_]) || croak "Can't open(@@_): $!"},
    ],
    [
        [ 1,    'CORE::open',   'open', 1,      qw($_[0] $_[1] @@_[2..$#_]) ],
        q{return (defined wantarray)?CORE::open($_[0], $_[1], @@_[2..$#_]):
                   CORE::open($_[0], $_[1], @@_[2..$#_]) || croak "Can't open(@@_): $!"},
    ],
);

foreach my $test (@@one_invocation_calls) {
    is(Fatal::one_invocation( @@{ $test->[0] } ), $test->[1], 'one_inovcation');
}

# TODO: _make_fatal
# Since this subroutine has always started with an underscore,
# I think it's pretty clear that it's internal-only.  I'm not
# testing it here, and it doesn't yet have backcompat.
@


1.1.1.1
log
@Perl 5.12.2 from CPAN
@
text
@@


1.1.1.2
log
@import perl 5.16.3 from CPAN - worked on by Andrew Fresh and myself
@
text
@d36 1
a36 1
# improvements to error messages or bug fixes.
d46 3
a48 3
return CORE::open($_[0]) || Carp::croak("Can't open(@@_): $!")	} elsif (@@_ == 2) {
return CORE::open($_[0], $_[1]) || Carp::croak("Can't open(@@_): $!")	} elsif (@@_ >= 3) {
return CORE::open($_[0], $_[1], @@_[2..$#_]) || Carp::croak("Can't open(@@_): $!")
d65 1
a65 1
        q{return CORE::open($_[0], $_[1], @@_[2..$#_]) || Carp::croak("Can't open(@@_): $!")},
d70 1
a70 1
                   CORE::open($_[0], $_[1], @@_[2..$#_]) || Carp::croak("Can't open(@@_): $!")},
@

