head	1.3;
access;
symbols
	OPENBSD_5_3:1.1.1.1.0.10
	OPENBSD_5_3_BASE:1.1.1.1
	OPENBSD_5_2:1.1.1.1.0.8
	OPENBSD_5_2_BASE:1.1.1.1
	OPENBSD_5_1_BASE:1.1.1.1
	OPENBSD_5_1:1.1.1.1.0.6
	OPENBSD_5_0:1.1.1.1.0.4
	OPENBSD_5_0_BASE:1.1.1.1
	OPENBSD_4_9:1.1.1.1.0.2
	OPENBSD_4_9_BASE:1.1.1.1
	PERL_5_12_2:1.1.1.1
	CPAN:1.1.1;
locks; strict;
comment	@# @;
expand	@o@;


1.3
date	2017.02.05.00.32.01;	author afresh1;	state Exp;
branches;
next	1.2;
commitid	cxJ08BvJA9Pt2PTM;

1.2
date	2013.03.25.20.40.51;	author sthen;	state dead;
branches;
next	1.1;

1.1
date	2010.09.24.14.48.56;	author millert;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	2010.09.24.14.48.56;	author millert;	state Exp;
branches;
next	;


desc
@@


1.3
log
@Fix merge issues, remove excess files - match perl-5.24.1 dist
@
text
@#!/usr/bin/perl

use strict;
use warnings;

use Test::More tests => 202;

# basic testing of Math::BigRat

use Math::BigRat;
use Math::BigInt;
use Math::BigFloat;

# shortcuts
my $mbr = 'Math::BigRat';
my $mbi = 'Math::BigInt';
my $mbf = 'Math::BigFloat';

my ($x, $y, $z);

$x = Math::BigRat->new(1234);
is($x, 1234);
isa_ok($x, 'Math::BigRat');
is($x->isa('Math::BigFloat'), 0);
is($x->isa('Math::BigInt'), 0);

##############################################################################
# new and bnorm()

foreach my $func (qw/new bnorm/) {
    $x = $mbr->$func(1234);
    is($x, 1234, qq|\$x = $mbr->$func(1234)|);

    $x = $mbr->$func("1234/1");
    is($x, 1234, qq|\$x = $mbr->$func("1234/1")|);

    $x = $mbr->$func("1234/2");
    is($x, 617, qq|\$x = $mbr->$func("1234/2")|);

    $x = $mbr->$func("100/1.0");
    is($x, 100, qq|\$x = $mbr->$func("100/1.0")|);

    $x = $mbr->$func("10.0/1.0");
    is($x, 10, qq|\$x = $mbr->$func("10.0/1.0")|);

    $x = $mbr->$func("0.1/10");
    is($x, "1/100", qq|\$x = $mbr->$func("0.1/10")|);

    $x = $mbr->$func("0.1/0.1");
    is($x, "1", qq|\$x = $mbr->$func("0.1/0.1")|);

    $x = $mbr->$func("1e2/10");
    is($x, 10, qq|\$x = $mbr->$func("1e2/10")|);

    $x = $mbr->$func("5/1e2");
    is($x, "1/20", qq|\$x = $mbr->$func("5/1e2")|);

    $x = $mbr->$func("1e2/1e1");
    is($x, 10, qq|\$x = $mbr->$func("1e2/1e1")|);

    $x = $mbr->$func("1 / 3");
    is($x, "1/3", qq|\$x = $mbr->$func("1 / 3")|);

    $x = $mbr->$func("-1 / 3");
    is($x, "-1/3", qq|\$x = $mbr->$func("-1 / 3")|);

    $x = $mbr->$func("NaN");
    is($x, "NaN", qq|\$x = $mbr->$func("NaN")|);

    $x = $mbr->$func("inf");
    is($x, "inf", qq|\$x = $mbr->$func("inf")|);

    $x = $mbr->$func("-inf");
    is($x, "-inf", qq|\$x = $mbr->$func("-inf")|);

    $x = $mbr->$func("1/");
    is($x, "NaN", qq|\$x = $mbr->$func("1/")|);

    $x = $mbr->$func("0x7e");
    is($x, 126, qq|\$x = $mbr->$func("0x7e")|);

    # input ala "1+1/3" isn"t parsed ok yet
    $x = $mbr->$func("1+1/3");
    is($x, "NaN", qq|\$x = $mbr->$func("1+1/3")|);

    $x = $mbr->$func("1/1.2");
    is($x, "5/6", qq|\$x = $mbr->$func("1/1.2")|);

    $x = $mbr->$func("1.3/1.2");
    is($x, "13/12", qq|\$x = $mbr->$func("1.3/1.2")|);

    $x = $mbr->$func("1.2/1");
    is($x, "6/5", qq|\$x = $mbr->$func("1.2/1")|);

    ############################################################################
    # other classes as input

    $x = $mbr->$func($mbi->new(1231));
    is($x, "1231", qq|\$x = $mbr->$func($mbi->new(1231))|);

    $x = $mbr->$func($mbf->new(1232));
    is($x, "1232", qq|\$x = $mbr->$func($mbf->new(1232))|);

    $x = $mbr->$func($mbf->new(1232.3));
    is($x, "12323/10", qq|\$x = $mbr->$func($mbf->new(1232.3))|);
}

my $n = 'numerator';
my $d = 'denominator';

$x =  $mbr->new('-0');
is($x, '0');
        is($x->$n(), '0');
is($x->$d(), '1');

$x =  $mbr->new('NaN');
is($x, 'NaN');  is($x->$n(), 'NaN');
is($x->$d(), 'NaN');

$x =  $mbr->new('-NaN');
is($x, 'NaN');  is($x->$n(), 'NaN');
is($x->$d(), 'NaN');

$x =  $mbr->new('-1r4');
is($x, 'NaN');  is($x->$n(), 'NaN');
is($x->$d(), 'NaN');

$x =  $mbr->new('+inf');
is($x, 'inf');  is($x->$n(), 'inf');
is($x->$d(), '1');

$x =  $mbr->new('-inf');
is($x, '-inf');
is($x->$n(), '-inf');
is($x->$d(), '1');

$x =  $mbr->new('123a4');
is($x, 'NaN');
is($x->$n(), 'NaN');
is($x->$d(), 'NaN');

# wrong inputs
$x =  $mbr->new('1e2e2');
is($x, 'NaN');
is($x->$n(), 'NaN');
is($x->$d(), 'NaN');

$x =  $mbr->new('1+2+2');
is($x, 'NaN');
is($x->$n(), 'NaN');
is($x->$d(), 'NaN');

# failed due to BigFloat bug
$x =  $mbr->new('1.2.2');
is($x, 'NaN');
is($x->$n(), 'NaN');
is($x->$d(), 'NaN');

is($mbr->new('123a4'), 'NaN');
is($mbr->new('123e4'), '1230000');
is($mbr->new('-NaN'), 'NaN');
is($mbr->new('NaN'), 'NaN');
is($mbr->new('+inf'), 'inf');
is($mbr->new('-inf'), '-inf');

##############################################################################
# two Bigints

is($mbr->new($mbi->new(3), $mbi->new(7))->badd(1), '10/7');
is($mbr->new($mbi->new(-13), $mbi->new(7)), '-13/7');
is($mbr->new($mbi->new(13), $mbi->new(-7)), '-13/7');
is($mbr->new($mbi->new(-13), $mbi->new(-7)), '13/7');

##############################################################################
# mixed arguments

is($mbr->new('3/7')->badd(1), '10/7');
is($mbr->new('3/10')->badd(1.1), '7/5');
is($mbr->new('3/7')->badd($mbi->new(1)), '10/7');
is($mbr->new('3/10')->badd($mbf->new('1.1')), '7/5');

is($mbr->new('3/7')->bsub(1), '-4/7');
is($mbr->new('3/10')->bsub(1.1), '-4/5');
is($mbr->new('3/7')->bsub($mbi->new(1)), '-4/7');
is($mbr->new('3/10')->bsub($mbf->new('1.1')), '-4/5');

is($mbr->new('3/7')->bmul(1), '3/7');
is($mbr->new('3/10')->bmul(1.1), '33/100');
is($mbr->new('3/7')->bmul($mbi->new(1)), '3/7');
is($mbr->new('3/10')->bmul($mbf->new('1.1')), '33/100');

is($mbr->new('3/7')->bdiv(1), '3/7');
is($mbr->new('3/10')->bdiv(1.1), '3/11');
is($mbr->new('3/7')->bdiv($mbi->new(1)), '3/7');
is($mbr->new('3/10')->bdiv($mbf->new('1.1')), '3/11');

##############################################################################
$x = $mbr->new('1/4');
$y = $mbr->new('1/3');

is($x + $y, '7/12');
is($x * $y, '1/12');
is($x / $y, '3/4');

$x = $mbr->new('7/5');
$x *= '3/2';
is($x, '21/10');
$x -= '0.1';
is($x, '2');                    # not 21/10

$x = $mbr->new('2/3');
$y = $mbr->new('3/2');
is($x > $y, '');
is($x < $y, 1);
is($x == $y, '');

$x = $mbr->new('-2/3');
$y = $mbr->new('3/2');
is($x > $y, '');
is($x < $y, '1');
is($x == $y, '');

$x = $mbr->new('-2/3');
$y = $mbr->new('-2/3');
is($x > $y, '');
is($x < $y, '');
is($x == $y, '1');

$x = $mbr->new('-2/3');
$y = $mbr->new('-1/3');
is($x > $y, '');
is($x < $y, '1');
is($x == $y, '');

$x = $mbr->new('-124');
$y = $mbr->new('-122');
is($x->bacmp($y), 1);

$x = $mbr->new('-124');
$y = $mbr->new('-122');
is($x->bcmp($y), -1);

$x = $mbr->new('3/7');
$y = $mbr->new('5/7');
is($x+$y, '8/7');

$x = $mbr->new('3/7');
$y = $mbr->new('5/7');
is($x*$y, '15/49');

$x = $mbr->new('3/5');
$y = $mbr->new('5/7');
is($x*$y, '3/7');

$x = $mbr->new('3/5');
$y = $mbr->new('5/7');
is($x/$y, '21/25');

$x = $mbr->new('7/4');
$y = $mbr->new('1');
is($x % $y, '3/4');

$x = $mbr->new('7/4');
$y = $mbr->new('5/13');
is($x % $y, '11/52');

$x = $mbr->new('7/4');
$y = $mbr->new('5/9');
is($x % $y, '1/12');

$x = $mbr->new('-144/9')->bsqrt();
is($x, 'NaN');

$x = $mbr->new('144/9')->bsqrt();
is($x, '4');

$x = $mbr->new('3/4')->bsqrt();
is($x,
   '1732050807568877293527446341505872366943/'
   .'2000000000000000000000000000000000000000');

##############################################################################
# bpow

$x = $mbr->new('2/1');
$z = $x->bpow('3/1');
is($x, '8');

$x = $mbr->new('1/2');
$z = $x->bpow('3/1');
is($x, '1/8');

$x = $mbr->new('1/3');
$z = $x->bpow('4/1');
is($x, '1/81');

$x = $mbr->new('2/3');
$z = $x->bpow('4/1');
is($x, '16/81');

$x = $mbr->new('2/3');
$z = $x->bpow('5/3');
is($x, '31797617848703662994667839220546583581/62500000000000000000000000000000000000');

##############################################################################
# bfac

$x = $mbr->new('1');
$x->bfac();
is($x, '1');

for (my $i = 0; $i < 8; $i++) {
    $x = $mbr->new("$i/1")->bfac();
    is($x, $mbi->new($i)->bfac());
}

# test for $self->bnan() vs. $x->bnan();
$x = $mbr->new('-1');
$x->bfac();
is($x, 'NaN');

##############################################################################
# binc/bdec

$x = $mbr->new('3/2');
is($x->binc(), '5/2');
$x = $mbr->new('15/6');
is($x->bdec(), '3/2');

##############################################################################
# bfloor/bceil

$x = $mbr->new('-7/7');
is($x->$n(), '-1');
is($x->$d(), '1');
$x = $mbr->new('-7/7')->bfloor();
is($x->$n(), '-1');
is($x->$d(), '1');

##############################################################################
# bsstr

$x = $mbr->new('7/5')->bsstr();
is($x, '7/5');
$x = $mbr->new('-7/5')->bsstr();
is($x, '-7/5');

##############################################################################
# numify()

my @@array = qw/1 2 3 4 5 6 7 8 9/;
$x = $mbr->new('8/8');
is($array[$x], 2);

$x = $mbr->new('16/8');
is($array[$x], 3);

$x = $mbr->new('17/8');
is($array[$x], 3);

$x = $mbr->new('33/8');
is($array[$x], 5);

$x = $mbr->new('-33/8');
is($array[$x], 6);

$x = $mbr->new('-8/1');
is($array[$x], 2);      # -8 => 2

$x = $mbr->new('33/8');
is($x->numify() * 1000, 4125);

$x = $mbr->new('-33/8');
is($x->numify() * 1000, -4125);

$x = $mbr->new('inf');
is($x->numify(), 'inf');

$x = $mbr->new('-inf');
is($x->numify(), '-inf');

$x = $mbr->new('NaN');
is($x->numify(), 'NaN');

$x = $mbr->new('4/3');
is($x->numify(), 4/3);

##############################################################################
# as_hex(), as_bin(), as_oct()

$x = $mbr->new('8/8');
is($x->as_hex(), '0x1');
is($x->as_bin(), '0b1');
is($x->as_oct(), '01');

$x = $mbr->new('80/8');
is($x->as_hex(), '0xa');
is($x->as_bin(), '0b1010');
is($x->as_oct(), '012');

##############################################################################
# broot(), blog(), bmodpow() and bmodinv()

$x = $mbr->new(2) ** 32;
$y = $mbr->new(4);
$z = $mbr->new(3);

is($x->copy()->broot($y), 2 ** 8);
is(ref($x->copy()->broot($y)), $mbr);

is($x->copy()->bmodpow($y, $z), 1);
is(ref($x->copy()->bmodpow($y, $z)), $mbr);

$x = $mbr->new(8);
$y = $mbr->new(5033);
$z = $mbr->new(4404);

is($x->copy()->bmodinv($y), $z);
is(ref($x->copy()->bmodinv($y)), $mbr);

# square root with exact result
$x = $mbr->new('1.44');
is($x->copy()->broot(2), '6/5');
is(ref($x->copy()->broot(2)), $mbr);

# log with exact result
$x = $mbr->new('256.1');
is($x->copy()->blog(2), '8000563442710106079310294693803606983661/1000000000000000000000000000000000000000');
is(ref($x->copy()->blog(2)), $mbr);

$x = $mbr->new(144);
is($x->copy()->broot('2'), 12, 'v/144 = 12');

$x = $mbr->new(12*12*12);
is($x->copy()->broot('3'), 12, '(12*12*12) ** 1/3 = 12');

##############################################################################
# from_hex(), from_bin(), from_oct()

$x = Math::BigRat->from_hex('0x100');
is($x, '256', 'from_hex');

$x = $mbr->from_hex('0x100');
is($x, '256', 'from_hex');

$x = Math::BigRat->from_bin('0b100');
is($x, '4', 'from_bin');

$x = $mbr->from_bin('0b100');
is($x, '4', 'from_bin');

$x = Math::BigRat->from_oct('0100');
is($x, '64', 'from_oct');

$x = $mbr->from_oct('0100');
is($x, '64', 'from_oct');

##############################################################################
# as_float()

$x = Math::BigRat->new('1/2');
my $f = $x->as_float();

is($x, '1/2', '$x unmodified');
is($f, '0.5', 'as_float(0.5)');

$x = Math::BigRat->new('2/3');
$f = $x->as_float(5);

is($x, '2/3', '$x unmodified');
is($f, '0.66667', 'as_float(2/3, 5)');

##############################################################################
# int()

$x = Math::BigRat->new('5/2');
is(int($x), '2', '5/2 converted to integer');

$x = Math::BigRat->new('-1/2');
is(int($x), '0', '-1/2 converted to integer');

##############################################################################
# done

1;
@


1.2
log
@merge/resolve conflicts
(some more to do after this one)
@
text
@d1 1
a1 1
#!/usr/bin/perl -w
d4 1
a4 1
use Test;
d6 1
a6 7
BEGIN 
  {
  $| = 1;
  chdir 't' if -d 't';
  unshift @@INC, '../lib'; # for running manually
  plan tests => 200;
  }
d15 1
a15 1
my $cr = 'Math::BigRat';		
d19 1
a19 1
my ($x,$y,$z);
d21 5
a25 4
$x = Math::BigRat->new(1234); 		ok ($x,1234);
ok ($x->isa('Math::BigRat'));
ok (!$x->isa('Math::BigFloat'));
ok (!$x->isa('Math::BigInt'));
d30 3
a32 37
foreach my $func (qw/new bnorm/)
  {
  $x = $cr->$func(1234); 	ok ($x,1234);

  $x = $cr->$func('1234/1'); 	ok ($x,1234);
  $x = $cr->$func('1234/2'); 	ok ($x,617);

  $x = $cr->$func('100/1.0');	ok ($x,100);
  $x = $cr->$func('10.0/1.0');	ok ($x,10);
  $x = $cr->$func('0.1/10');	ok ($x,'1/100');
  $x = $cr->$func('0.1/0.1');	ok ($x,'1');
  $x = $cr->$func('1e2/10');	ok ($x,10);
  $x = $cr->$func('5/1e2');	ok ($x,'1/20');
  $x = $cr->$func('1e2/1e1');	ok ($x,10);
  $x = $cr->$func('1 / 3');	ok ($x,'1/3');
  $x = $cr->$func('-1 / 3');	ok ($x,'-1/3');
  $x = $cr->$func('NaN');	ok ($x,'NaN');
  $x = $cr->$func('inf');	ok ($x,'inf');
  $x = $cr->$func('-inf');	ok ($x,'-inf');
  $x = $cr->$func('1/');	ok ($x,'NaN');

  $x = $cr->$func("0x7e");  ok($x, 126);

  # input ala '1+1/3' isn't parsed ok yet
  $x = $cr->$func('1+1/3');	ok ($x,'NaN');
  
  $x = $cr->$func('1/1.2');	ok ($x,'5/6');
  $x = $cr->$func('1.3/1.2');	ok ($x,'13/12');
  $x = $cr->$func('1.2/1');	ok ($x,'6/5');

  ############################################################################
  # other classes as input

  $x = $cr->$func($mbi->new(1231));	ok ($x,'1231');
  $x = $cr->$func($mbf->new(1232));	ok ($x,'1232');
  $x = $cr->$func($mbf->new(1232.3));	ok ($x,'12323/10');
  }
d34 23
a56 2
my $n = 'numerator';
my $d = 'denominator';
d58 2
a59 8
$x =  $cr->new('-0'); ok ($x,'0'); 	ok ($x->$n(), '0'); ok ($x->$d(),'1');
$x =  $cr->new('NaN'); ok ($x,'NaN');	ok ($x->$n(), 'NaN'); ok ($x->$d(),'NaN');
$x =  $cr->new('-NaN'); ok ($x,'NaN');	ok ($x->$n(), 'NaN'); ok ($x->$d(),'NaN');
$x =  $cr->new('-1r4'); ok ($x,'NaN');	ok ($x->$n(), 'NaN'); ok ($x->$d(),'NaN');

$x =  $cr->new('+inf'); ok ($x,'inf');	ok ($x->$n(), 'inf'); ok ($x->$d(),'1');
$x =  $cr->new('-inf'); ok ($x,'-inf'); ok ($x->$n(), '-inf'); ok ($x->$d(),'1');
$x =  $cr->new('123a4'); ok ($x,'NaN'); ok ($x->$n(), 'NaN'); ok ($x->$d(),'NaN');
d61 2
a62 5
# wrong inputs
$x =  $cr->new('1e2e2'); ok ($x,'NaN'); ok ($x->$n(), 'NaN'); ok ($x->$d(),'NaN');
$x =  $cr->new('1+2+2'); ok ($x,'NaN'); ok ($x->$n(), 'NaN'); ok ($x->$d(),'NaN');
# failed due to BigFloat bug
$x =  $cr->new('1.2.2'); ok ($x,'NaN'); ok ($x->$n(), 'NaN'); ok ($x->$d(),'NaN');
d64 2
a65 6
ok ($cr->new('123a4'),'NaN');
ok ($cr->new('123e4'),'1230000');
ok ($cr->new('-NaN'),'NaN');
ok ($cr->new('NaN'),'NaN');
ok ($cr->new('+inf'),'inf');
ok ($cr->new('-inf'),'-inf');
d67 2
a68 2
##############################################################################
# two Bigints
d70 2
a71 4
ok ($cr->new($mbi->new(3),$mbi->new(7))->badd(1),'10/7');
ok ($cr->new($mbi->new(-13),$mbi->new(7)),'-13/7');
ok ($cr->new($mbi->new(13),$mbi->new(-7)),'-13/7');
ok ($cr->new($mbi->new(-13),$mbi->new(-7)),'13/7');
d73 2
a74 2
##############################################################################
# mixed arguments
d76 2
a77 26
ok ($cr->new('3/7')->badd(1),'10/7');
ok ($cr->new('3/10')->badd(1.1),'7/5');
ok ($cr->new('3/7')->badd($mbi->new(1)),'10/7');
ok ($cr->new('3/10')->badd($mbf->new('1.1')),'7/5');

ok ($cr->new('3/7')->bsub(1),'-4/7');
ok ($cr->new('3/10')->bsub(1.1),'-4/5');
ok ($cr->new('3/7')->bsub($mbi->new(1)),'-4/7');
ok ($cr->new('3/10')->bsub($mbf->new('1.1')),'-4/5');

ok ($cr->new('3/7')->bmul(1),'3/7');
ok ($cr->new('3/10')->bmul(1.1),'33/100');
ok ($cr->new('3/7')->bmul($mbi->new(1)),'3/7');
ok ($cr->new('3/10')->bmul($mbf->new('1.1')),'33/100');

ok ($cr->new('3/7')->bdiv(1),'3/7');
ok ($cr->new('3/10')->bdiv(1.1),'3/11');
ok ($cr->new('3/7')->bdiv($mbi->new(1)),'3/7');
ok ($cr->new('3/10')->bdiv($mbf->new('1.1')),'3/11');

##############################################################################
$x = $cr->new('1/4'); $y = $cr->new('1/3');

ok ($x + $y, '7/12');
ok ($x * $y, '1/12');
ok ($x / $y, '3/4');
d79 2
a80 4
$x = $cr->new('7/5'); $x *= '3/2'; 
ok ($x,'21/10');
$x -= '0.1';
ok ($x,'2');	# not 21/10
d82 3
a84 4
$x = $cr->new('2/3');		$y = $cr->new('3/2');
ok ($x > $y,'');		
ok ($x < $y,1);
ok ($x == $y,'');
d86 2
a87 4
$x = $cr->new('-2/3');		$y = $cr->new('3/2');
ok ($x > $y,'');		
ok ($x < $y,'1');
ok ($x == $y,'');
d89 2
a90 4
$x = $cr->new('-2/3');		$y = $cr->new('-2/3');
ok ($x > $y,'');		
ok ($x < $y,'');
ok ($x == $y,'1');
d92 2
a93 4
$x = $cr->new('-2/3');		$y = $cr->new('-1/3');
ok ($x > $y,'');		
ok ($x < $y,'1');
ok ($x == $y,'');
d95 2
a96 2
$x = $cr->new('-124');		$y = $cr->new('-122');
ok ($x->bacmp($y),1);
d98 2
a99 2
$x = $cr->new('-124');		$y = $cr->new('-122');
ok ($x->bcmp($y),-1);
d101 2
a102 2
$x = $cr->new('3/7');		$y = $cr->new('5/7');
ok ($x+$y,'8/7');
d104 3
a106 2
$x = $cr->new('3/7');		$y = $cr->new('5/7');
ok ($x*$y,'15/49');
d108 2
a109 2
$x = $cr->new('3/5');		$y = $cr->new('5/7');
ok ($x*$y,'3/7');
d111 30
a140 2
$x = $cr->new('3/5');		$y = $cr->new('5/7');
ok ($x/$y,'21/25');
d142 10
a151 2
$x = $cr->new('7/4');		$y = $cr->new('1');
ok ($x % $y,'3/4');
d153 12
a164 2
$x = $cr->new('7/4');		$y = $cr->new('5/13');
ok ($x % $y,'11/52');
d166 2
a167 2
$x = $cr->new('7/4');		$y = $cr->new('5/9');
ok ($x % $y,'1/12');
d169 112
a280 5
$x = $cr->new('-144/9')->bsqrt();	ok ($x,'NaN');
$x = $cr->new('144/9')->bsqrt();	ok ($x,'4');
$x = $cr->new('3/4')->bsqrt();		ok ($x,
  '1732050807568877293527446341505872366943/'
 .'2000000000000000000000000000000000000000');
d285 19
a303 7
$x = $cr->new('2/1');  $z = $x->bpow('3/1'); ok ($x,'8');
$x = $cr->new('1/2');  $z = $x->bpow('3/1'); ok ($x,'1/8');
$x = $cr->new('1/3');  $z = $x->bpow('4/1'); ok ($x,'1/81');
$x = $cr->new('2/3');  $z = $x->bpow('4/1'); ok ($x,'16/81');

$x = $cr->new('2/3');  $z = $x->bpow('5/3'); 
ok ($x, '31797617848703662994667839220546583581/62500000000000000000000000000000000000');
d308 8
a315 5
$x = $cr->new('1');  $x->bfac(); ok ($x,'1');
for (my $i = 0; $i < 8; $i++)
  {
  $x = $cr->new("$i/1")->bfac(); ok ($x,$mbi->new($i)->bfac());
  }
d318 3
a320 1
$x = $cr->new('-1'); $x->bfac(); ok ($x,'NaN');	
d325 4
a328 2
$x =  $cr->new('3/2'); ok ($x->binc(),'5/2');
$x =  $cr->new('15/6'); ok ($x->bdec(),'3/2');
d333 6
a338 2
$x = $cr->new('-7/7'); ok ($x->$n(), '-1'); ok ($x->$d(), '1');
$x = $cr->new('-7/7')->bfloor(); ok ($x->$n(), '-1'); ok ($x->$d(), '1');
d343 4
a346 2
$x = $cr->new('7/5')->bsstr(); ok ($x,'7/5');
$x = $cr->new('-7/5')->bsstr(); ok ($x,'-7/5');
d352 23
a374 12
$x = $cr->new('8/8'); ok ($array[$x],2);
$x = $cr->new('16/8'); ok ($array[$x],3);
$x = $cr->new('17/8'); ok ($array[$x],3);
$x = $cr->new('33/8'); ok ($array[$x],5);
$x = $cr->new('-33/8'); ok ($array[$x],6);
$x = $cr->new('-8/1'); ok ($array[$x],2);	# -8 => 2

$x = $cr->new('33/8'); ok ($x->numify() * 1000, 4125);
$x = $cr->new('-33/8'); ok ($x->numify() * 1000, -4125);
$x = $cr->new('inf'); ok ($x->numify(), 'inf');
$x = $cr->new('-inf'); ok ($x->numify(), '-inf');
$x = $cr->new('NaN'); ok ($x->numify(), 'NaN');
d376 11
a386 1
$x = $cr->new('4/3'); ok ($x->numify(), 4/3);
d391 9
a399 4
$x = $cr->new('8/8');
ok ($x->as_hex(), '0x1'); ok ($x->as_bin(), '0b1'); ok ($x->as_oct(), '01');
$x = $cr->new('80/8');
ok ($x->as_hex(), '0xa'); ok ($x->as_bin(), '0b1010'); ok ($x->as_oct(), '012');
d404 13
a416 13
$x = $cr->new(2) ** 32;
$y = $cr->new(4);
$z = $cr->new(3);

ok ($x->copy()->broot($y), 2 ** 8);
ok (ref($x->copy()->broot($y)), $cr);

ok ($x->copy()->bmodpow($y,$z), 1);
ok (ref($x->copy()->bmodpow($y,$z)), $cr);

$x = $cr->new(8);
$y = $cr->new(5033);
$z = $cr->new(4404);
d418 2
a419 2
ok ($x->copy()->bmodinv($y), $z);
ok (ref($x->copy()->bmodinv($y)), $cr);
d422 3
a424 3
$x = $cr->new('1.44');
ok ($x->copy()->broot(2), '6/5');
ok (ref($x->copy()->broot(2)), $cr);
d427 3
a429 3
$x = $cr->new('256.1');
ok ($x->copy()->blog(2), '8000563442710106079310294693803606983661/1000000000000000000000000000000000000000');
ok (ref($x->copy()->blog(2)), $cr);
d431 2
a432 2
$x = $cr->new(144);
ok ($x->copy()->broot('2'), 12, 'v/144 = 12');
d434 2
a435 2
$x = $cr->new(12*12*12);
ok ($x->copy()->broot('3'), 12, '(12*12*12) ** 1/3 = 12');
d441 4
a444 3
ok ($x, '256', 'from_hex');
$x = $cr->from_hex('0x100');
ok ($x, '256', 'from_hex');
d447 4
a450 3
ok ($x, '4', 'from_bin');
$x = $cr->from_bin('0b100');
ok ($x, '4', 'from_bin');
d453 4
a456 3
ok ($x, '64', 'from_oct');
$x = $cr->from_oct('0100');
ok ($x, '64', 'from_oct');
d461 2
a462 1
$x = Math::BigRat->new('1/2'); my $f = $x->as_float();
d464 2
a465 2
ok ($x, '1/2', '$x unmodified');
ok ($f, '0.5', 'as_float(0.5)');
d467 2
a468 1
$x = Math::BigRat->new('2/3'); $f = $x->as_float(5);
d470 11
a480 2
ok ($x, '2/3', '$x unmodified');
ok ($f, '0.66667', 'as_float(2/3,5)');
a485 1

@


1.1
log
@Initial revision
@
text
@@


1.1.1.1
log
@Perl 5.12.2 from CPAN
@
text
@@
