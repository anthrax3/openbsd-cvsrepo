head	1.1;
branch	1.1.1;
access;
symbols
	OPENBSD_6_2:1.1.1.2.0.14
	OPENBSD_6_2_BASE:1.1.1.2
	PERL_5_24_2:1.1.1.2
	OPENBSD_6_1:1.1.1.2.0.18
	OPENBSD_6_1_BASE:1.1.1.2
	OPENBSD_6_0:1.1.1.2.0.16
	OPENBSD_6_0_BASE:1.1.1.2
	OPENBSD_5_9:1.1.1.2.0.10
	OPENBSD_5_9_BASE:1.1.1.2
	OPENBSD_5_8:1.1.1.2.0.12
	OPENBSD_5_8_BASE:1.1.1.2
	PERL_5_20_2:1.1.1.2
	OPENBSD_5_7:1.1.1.2.0.4
	OPENBSD_5_7_BASE:1.1.1.2
	PERL_5_20_1:1.1.1.2
	OPENBSD_5_6:1.1.1.2.0.8
	OPENBSD_5_6_BASE:1.1.1.2
	PERL_5_18_2:1.1.1.2
	PERL:1.1.1
	OPENBSD_5_5:1.1.1.2.0.6
	OPENBSD_5_5_BASE:1.1.1.2
	OPENBSD_5_4:1.1.1.2.0.2
	OPENBSD_5_4_BASE:1.1.1.2
	PERL_5_16_3:1.1.1.2
	OPENBSD_5_3:1.1.1.1.0.10
	OPENBSD_5_3_BASE:1.1.1.1
	OPENBSD_5_2:1.1.1.1.0.8
	OPENBSD_5_2_BASE:1.1.1.1
	OPENBSD_5_1_BASE:1.1.1.1
	OPENBSD_5_1:1.1.1.1.0.6
	OPENBSD_5_0:1.1.1.1.0.4
	OPENBSD_5_0_BASE:1.1.1.1
	OPENBSD_4_9:1.1.1.1.0.2
	OPENBSD_4_9_BASE:1.1.1.1
	PERL_5_12_2:1.1.1.1
	CPAN:1.1.1;
locks; strict;
comment	@# @;
expand	@o@;


1.1
date	2010.09.24.14.48.58;	author millert;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	2010.09.24.14.48.58;	author millert;	state Exp;
branches;
next	1.1.1.2;

1.1.1.2
date	2013.03.25.20.07.03;	author sthen;	state Exp;
branches;
next	;


desc
@@


1.1
log
@Initial revision
@
text
@use strict;

my $MODULE;

BEGIN {
	$MODULE = ($ENV{PERL_CORE} || -d "src") ? "Digest::SHA" : "Digest::SHA::PurePerl";
	eval "require $MODULE" || die $@@;
	$MODULE->import(qw());
}

BEGIN {
	if ($ENV{PERL_CORE}) {
		chdir 't' if -d 't';
		@@INC = '../lib';
	}
}

my $numtests = 4;
print "1..$numtests\n";

	# Here's the bitstring to test against, and its SHA-1 digest

my $ONEBITS = pack("B*", "1" x 80000);
my $digest = "11003389959355c2773af6b0f36d842fe430ec49";

my $state = $MODULE->new("sHa1");
my $testnum = 1;

$state->add_bits($ONEBITS, 80000);
print "not " unless $state->hexdigest eq $digest;
print "ok ", $testnum++, "\n";

	# buffer using a series of increasingly large bitstrings

# Note that (1 + 2 + ... + 399) + 200 = 80000

for (1 .. 399) {
	$state->add_bits($ONEBITS, $_);
}
$state->add_bits($ONEBITS, 200);

print "not " unless $state->hexdigest eq $digest;
print "ok ", $testnum++, "\n";

	# create a buffer-alignment nuisance

$state = $MODULE->new("1");

$state->add_bits($ONEBITS, 1);
for (1 .. 99) {
	$state->add_bits($ONEBITS, 800);
}
$state->add_bits($ONEBITS, 799);

print "not " unless $state->hexdigest eq $digest;
print "ok ", $testnum++, "\n";

	# buffer randomly-sized bitstrings

my $reps = 80000;
my $maxbits = 8 * 127;

$state = $MODULE->new(1);

while ($reps > $maxbits) {
	my $num = int(rand($maxbits));
	$state->add_bits($ONEBITS, $num);
	$reps -= $num;
}
$state->add_bits($ONEBITS, $reps);

print "not " unless $state->hexdigest eq $digest;
print "ok ", $testnum++, "\n";
@


1.1.1.1
log
@Perl 5.12.2 from CPAN
@
text
@@


1.1.1.2
log
@import perl 5.16.3 from CPAN - worked on by Andrew Fresh and myself
@
text
@d6 1
a6 1
	$MODULE = (-d "src") ? "Digest::SHA" : "Digest::SHA::PurePerl";
@

