head	1.1;
branch	1.1.1;
access;
symbols
	OPENBSD_6_1_BASE:1.1.1.2
	OPENBSD_6_0:1.1.1.2.0.16
	OPENBSD_6_0_BASE:1.1.1.2
	OPENBSD_5_9:1.1.1.2.0.10
	OPENBSD_5_9_BASE:1.1.1.2
	OPENBSD_5_8:1.1.1.2.0.12
	OPENBSD_5_8_BASE:1.1.1.2
	PERL_5_20_2:1.1.1.2
	OPENBSD_5_7:1.1.1.2.0.4
	OPENBSD_5_7_BASE:1.1.1.2
	PERL_5_20_1:1.1.1.2
	OPENBSD_5_6:1.1.1.2.0.8
	OPENBSD_5_6_BASE:1.1.1.2
	PERL_5_18_2:1.1.1.2
	PERL:1.1.1
	OPENBSD_5_5:1.1.1.2.0.6
	OPENBSD_5_5_BASE:1.1.1.2
	OPENBSD_5_4:1.1.1.2.0.2
	OPENBSD_5_4_BASE:1.1.1.2
	PERL_5_16_3:1.1.1.2
	OPENBSD_5_3:1.1.1.1.0.10
	OPENBSD_5_3_BASE:1.1.1.1
	OPENBSD_5_2:1.1.1.1.0.8
	OPENBSD_5_2_BASE:1.1.1.1
	OPENBSD_5_1_BASE:1.1.1.1
	OPENBSD_5_1:1.1.1.1.0.6
	OPENBSD_5_0:1.1.1.1.0.4
	OPENBSD_5_0_BASE:1.1.1.1
	OPENBSD_4_9:1.1.1.1.0.2
	OPENBSD_4_9_BASE:1.1.1.1
	PERL_5_12_2:1.1.1.1
	CPAN:1.1.1;
locks; strict;
comment	@# @;
expand	@o@;


1.1
date	2010.09.24.14.48.58;	author millert;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	2010.09.24.14.48.58;	author millert;	state Exp;
branches;
next	1.1.1.2;

1.1.1.2
date	2013.03.25.20.07.03;	author sthen;	state Exp;
branches;
next	;


desc
@@


1.1
log
@Initial revision
@
text
@# Test against SHA-1 Sample Vectors from NIST
#
#	ref: http://csrc.nist.gov/cryptval/shs.html

use strict;

my $MODULE;

BEGIN {
	$MODULE = ($ENV{PERL_CORE} || -d "src") ? "Digest::SHA" : "Digest::SHA::PurePerl";
	eval "require $MODULE" || die $@@;
	$MODULE->import(qw());
}

BEGIN {
	if ($ENV{PERL_CORE}) {
		chdir 't' if -d 't';
		@@INC = '../lib';
	}
}

my $nist_hashes = <<END_OF_NIST_HASHES;
DA39A3EE5E6B4B0D3255BFEF95601890AFD80709 ^
59C4526AA2CC59F9A5F56B5579BA7108E7CCB61A ^
6E42FB84067CFF056C43A49E484997AF23190879 ^
C63FBB9A87171A176E6E054890E29A8C5F125F6C ^
3109E33C1C4B9A0169D1599169D0E5A520A1E71C ^
9195E1E73CC68D7170F44BD1D83CB624BC87FA0B ^
64F7C374527278C0436DBC8DE5AABEC2BBF634BC ^
154B622EA426FB151B1FF1BE1CE871752B9EDEB4 ^
12BDD00FD4038756CBCF8ECDAD1B0CD862603CD8 ^
6700F93E1691E83735279E167F67AF61FEE9813B ^
END_OF_NIST_HASHES

my @@hashes = $nist_hashes =~ /\b[0-9A-F]{40}\b/g;

my $nist_messages = <<END_OF_NIST_MESSAGES;
0 1 ^
1 1 1 ^
2 1 1 1 ^
3 0 1 1 1 ^
2 0 2 2 ^
4 1 1 1 2 1 ^
3 0 2 2 2 ^
4 1 1 2 2 2 ^
5 1 2 2 1 1 2 ^
5 0 2 2 1 1 3 ^
END_OF_NIST_MESSAGES

my @@lines = split(/\n/, $nist_messages);

print "1..", scalar(@@hashes), "\n";
my $testnum = 1;

my $message = "";
my $sha = $MODULE->new(1);
for (@@lines) {
	next unless /^[\d ^]/;
	$message .= $_;
	next unless /\^\s*$/;
	my @@vals = $message =~ /\d+/g; $message = "";
	my $count = shift(@@vals);
	my $bit = shift(@@vals);
	my $bitstr = "";
	while (@@vals) {
		$bitstr .= $bit x shift(@@vals);
		$bit = 1 - $bit;
	}
	print "not " unless uc($sha->add_bits($bitstr)->hexdigest)
		eq shift(@@hashes);
	print "ok ", $testnum++, "\n";
}
@


1.1.1.1
log
@Perl 5.12.2 from CPAN
@
text
@@


1.1.1.2
log
@import perl 5.16.3 from CPAN - worked on by Andrew Fresh and myself
@
text
@d2 2
d10 1
a10 1
	$MODULE = (-d "src") ? "Digest::SHA" : "Digest::SHA::PurePerl";
@

