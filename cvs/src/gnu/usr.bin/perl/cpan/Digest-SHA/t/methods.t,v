head	1.2;
access;
symbols
	OPENBSD_6_1:1.2.0.4
	OPENBSD_6_1_BASE:1.2
	OPENBSD_6_0:1.1.1.2.0.16
	OPENBSD_6_0_BASE:1.1.1.2
	OPENBSD_5_9:1.1.1.2.0.10
	OPENBSD_5_9_BASE:1.1.1.2
	OPENBSD_5_8:1.1.1.2.0.12
	OPENBSD_5_8_BASE:1.1.1.2
	PERL_5_20_2:1.1.1.2
	OPENBSD_5_7:1.1.1.2.0.4
	OPENBSD_5_7_BASE:1.1.1.2
	PERL_5_20_1:1.1.1.2
	OPENBSD_5_6:1.1.1.2.0.8
	OPENBSD_5_6_BASE:1.1.1.2
	PERL_5_18_2:1.1.1.2
	PERL:1.1.1
	OPENBSD_5_5:1.1.1.2.0.6
	OPENBSD_5_5_BASE:1.1.1.2
	OPENBSD_5_4:1.1.1.2.0.2
	OPENBSD_5_4_BASE:1.1.1.2
	PERL_5_16_3:1.1.1.2
	OPENBSD_5_3:1.1.1.1.0.10
	OPENBSD_5_3_BASE:1.1.1.1
	OPENBSD_5_2:1.1.1.1.0.8
	OPENBSD_5_2_BASE:1.1.1.1
	OPENBSD_5_1_BASE:1.1.1.1
	OPENBSD_5_1:1.1.1.1.0.6
	OPENBSD_5_0:1.1.1.1.0.4
	OPENBSD_5_0_BASE:1.1.1.1
	OPENBSD_4_9:1.1.1.1.0.2
	OPENBSD_4_9_BASE:1.1.1.1
	PERL_5_12_2:1.1.1.1
	CPAN:1.1.1;
locks; strict;
comment	@# @;
expand	@o@;


1.2
date	2017.02.05.00.31.57;	author afresh1;	state Exp;
branches;
next	1.1;
commitid	cxJ08BvJA9Pt2PTM;

1.1
date	2010.09.24.14.48.58;	author millert;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	2010.09.24.14.48.58;	author millert;	state Exp;
branches;
next	1.1.1.2;

1.1.1.2
date	2013.03.25.20.07.03;	author sthen;	state Exp;
branches;
next	;


desc
@@


1.2
log
@Fix merge issues, remove excess files - match perl-5.24.1 dist
@
text
@use strict;
use FileHandle;

my $MODULE;

BEGIN {
	$MODULE = (-d "src") ? "Digest::SHA" : "Digest::SHA::PurePerl";
	eval "require $MODULE" || die $@@;
	$MODULE->import(qw());
}

BEGIN {
	if ($ENV{PERL_CORE}) {
		chdir 't' if -d 't';
		@@INC = '../lib';
	}
}

my @@out = (
	"ungWv48Bz+pBQUDeXa4iI7ADYaOWF3qctBD/YfIAFa0",
	"248d6a61d20638b8e5c026930c3e6039a33ce45964ff2167f6ecedd419db06c1",
);

my $numtests = 9 + scalar @@out;
print "1..$numtests\n";

	# attempt to use an invalid algorithm, and check for failure

my $testnum = 1;
my $NSA = "SHA-42";	# No Such Algorithm
print "not " if $MODULE->new($NSA);
print "ok ", $testnum++, "\n";

my $tempfile = "methods.tmp";
END { 1 while unlink $tempfile }

	# test OO methods using first two SHA-256 vectors from NIST

my $fh = FileHandle->new($tempfile, "w");
binmode($fh);
print $fh "bcdbcdecdefdefgefghfghighijhijkijkljklmklmnlmnomnopnopq";
$fh->close;

my $sha = $MODULE->new()->reset("SHA-256")->new();
$sha->add_bits("a", 5)->add_bits("001");

my $rsp = shift(@@out);
print "not " unless $sha->clone->add("b", "c")->b64digest eq $rsp;
print "ok ", $testnum++, "\n";

$rsp = shift(@@out);

	# test addfile with bareword filehandle

open(FILE, "<$tempfile");
binmode(FILE);
print "not " unless
	$sha->clone->addfile(*FILE)->hexdigest eq $rsp;
print "ok ", $testnum++, "\n";
close(FILE);

	# test addfile with indirect filehandle

$fh = FileHandle->new($tempfile, "r");
binmode($fh);
print "not " unless $sha->clone->addfile($fh)->hexdigest eq $rsp;
print "ok ", $testnum++, "\n";
$fh->close;

	# test addfile using file name instead of handle

print "not " unless $sha->addfile($tempfile, "b")->hexdigest eq $rsp;
print "ok ", $testnum++, "\n";

	# test addfile portable mode

$fh = FileHandle->new($tempfile, "w");
binmode($fh);
print $fh "abc\012" x 2048;		# using UNIX newline
$fh->close;

print "not " unless $sha->new(1)->addfile($tempfile, "p")->hexdigest eq
	"d449e19c1b0b0c191294c8dc9fa2e4a6ff77fc51";
print "ok ", $testnum++, "\n";

$fh = FileHandle->new($tempfile, "w");
binmode($fh);
print $fh "abc\015\012" x 2048;		# using DOS/Windows newline
$fh->close;

print "not " unless $sha->new(1)->addfile($tempfile, "p")->hexdigest eq
	"d449e19c1b0b0c191294c8dc9fa2e4a6ff77fc51";
print "ok ", $testnum++, "\n";

$fh = FileHandle->new($tempfile, "w");
binmode($fh);
print $fh "abc\015" x 2048;		# using early-Mac newline
$fh->close;

print "not " unless $sha->new(1)->addfile($tempfile, "p")->hexdigest eq
	"d449e19c1b0b0c191294c8dc9fa2e4a6ff77fc51";
print "ok ", $testnum++, "\n";

	# test addfile "universal newlines" mode

$fh = FileHandle->new($tempfile, "w");
binmode($fh);
print $fh "MacOS\r" . "MSDOS\r\n" . "UNIX\n" . "Quirky\r\r\n";
$fh->close;

my $d = $sha->new(1)->addfile($tempfile, "U")->hexdigest;
if ($d eq "f4c6855783c737c7e224873c90e80a9df5c2bc97") {
	print "ok ", $testnum++, "\n";
}
elsif ($d eq "42335d4a517a5e31399e948e9d842bafd9194d8f") {
	print "ok ", $testnum++, " # skip:  flaky -T\n";
}
else {
	print "not ok ", $testnum++, "\n";
}

	# test addfile BITS mode

$fh = FileHandle->new($tempfile, "w");
print $fh "0100010";			# using NIST 7-bit test vector
$fh->close;

print "not " unless $sha->new(1)->addfile($tempfile, "0")->hexdigest eq
	"04f31807151181ad0db278a1660526b0aeef64c2";
print "ok ", $testnum++, "\n";

$fh = FileHandle->new($tempfile, "w");
binmode($fh);
print $fh map(chr, (0..127));		# this is actually NIST 2-bit test
$fh->close;				# vector "01" (other chars ignored)

print "not " unless $sha->new(1)->addfile($tempfile, "0")->hexdigest eq
	"ec6b39952e1a3ec3ab3507185cf756181c84bbe2";
print "ok ", $testnum++, "\n";
@


1.1
log
@Initial revision
@
text
@d7 1
a7 1
	$MODULE = ($ENV{PERL_CORE} || -d "src") ? "Digest::SHA" : "Digest::SHA::PurePerl";
d24 1
a24 1
my $numtests = 6 + scalar @@out;
d102 37
@


1.1.1.1
log
@Perl 5.12.2 from CPAN
@
text
@@


1.1.1.2
log
@import perl 5.16.3 from CPAN - worked on by Andrew Fresh and myself
@
text
@d7 1
a7 1
	$MODULE = (-d "src") ? "Digest::SHA" : "Digest::SHA::PurePerl";
d24 1
a24 1
my $numtests = 8 + scalar @@out;
a101 19
print "ok ", $testnum++, "\n";

	# test addfile BITS mode

$fh = FileHandle->new($tempfile, "w");
print $fh "0100010";			# using NIST 7-bit test vector
$fh->close;

print "not " unless $sha->new(1)->addfile($tempfile, "0")->hexdigest eq
	"04f31807151181ad0db278a1660526b0aeef64c2";
print "ok ", $testnum++, "\n";

$fh = FileHandle->new($tempfile, "w");
binmode($fh);
print $fh map(chr, (0..127));		# this is actually NIST 2-bit test
$fh->close;				# vector "01" (other chars ignored)

print "not " unless $sha->new(1)->addfile($tempfile, "0")->hexdigest eq
	"ec6b39952e1a3ec3ab3507185cf756181c84bbe2";
@

