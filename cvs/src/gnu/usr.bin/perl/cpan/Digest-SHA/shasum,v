head	1.3;
access;
symbols
	OPENBSD_6_1_BASE:1.3
	OPENBSD_6_0:1.2.0.4
	OPENBSD_6_0_BASE:1.2
	OPENBSD_5_9:1.1.1.4.0.4
	OPENBSD_5_9_BASE:1.1.1.4
	OPENBSD_5_8:1.1.1.4.0.6
	OPENBSD_5_8_BASE:1.1.1.4
	PERL_5_20_2:1.1.1.4
	OPENBSD_5_7:1.1.1.4.0.2
	OPENBSD_5_7_BASE:1.1.1.4
	PERL_5_20_1:1.1.1.4
	OPENBSD_5_6:1.1.1.3.0.4
	OPENBSD_5_6_BASE:1.1.1.3
	PERL_5_18_2:1.1.1.3
	PERL:1.1.1
	OPENBSD_5_5:1.1.1.2.0.6
	OPENBSD_5_5_BASE:1.1.1.2
	OPENBSD_5_4:1.1.1.2.0.2
	OPENBSD_5_4_BASE:1.1.1.2
	PERL_5_16_3:1.1.1.2
	OPENBSD_5_3:1.1.1.1.0.10
	OPENBSD_5_3_BASE:1.1.1.1
	OPENBSD_5_2:1.1.1.1.0.8
	OPENBSD_5_2_BASE:1.1.1.1
	OPENBSD_5_1_BASE:1.1.1.1
	OPENBSD_5_1:1.1.1.1.0.6
	OPENBSD_5_0:1.1.1.1.0.4
	OPENBSD_5_0_BASE:1.1.1.1
	OPENBSD_4_9:1.1.1.1.0.2
	OPENBSD_4_9_BASE:1.1.1.1
	PERL_5_12_2:1.1.1.1
	CPAN:1.1.1;
locks; strict;
comment	@# @;
expand	@o@;


1.3
date	2017.02.05.00.31.57;	author afresh1;	state Exp;
branches;
next	1.2;
commitid	cxJ08BvJA9Pt2PTM;

1.2
date	2016.07.25.10.53.01;	author afresh1;	state Exp;
branches;
next	1.1;
commitid	FHUgABTHZQuYQh2B;

1.1
date	2010.09.24.14.48.56;	author millert;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	2010.09.24.14.48.56;	author millert;	state Exp;
branches;
next	1.1.1.2;

1.1.1.2
date	2013.03.25.20.07.02;	author sthen;	state Exp;
branches;
next	1.1.1.3;

1.1.1.3
date	2014.03.24.14.58.51;	author afresh1;	state Exp;
branches;
next	1.1.1.4;

1.1.1.4
date	2014.11.17.20.52.44;	author afresh1;	state Exp;
branches
	1.1.1.4.4.1
	1.1.1.4.6.1;
next	;
commitid	B31cAbBIXiCqnL97;

1.1.1.4.4.1
date	2016.08.05.01.01.36;	author afresh1;	state Exp;
branches;
next	;
commitid	HjAJx2yjL4A8HWon;

1.1.1.4.6.1
date	2016.08.05.01.00.53;	author afresh1;	state Exp;
branches;
next	;
commitid	wK3bUiy9jNch0Key;


desc
@@


1.3
log
@Fix merge issues, remove excess files - match perl-5.24.1 dist
@
text
@#!perl

	## shasum: filter for computing SHA digests (ref. sha1sum/md5sum)
	##
	## Copyright (C) 2003-2015 Mark Shelor, All Rights Reserved
	##
	## Version: 5.95
	## Sat Jan 10 12:15:36 MST 2015

	## shasum SYNOPSIS adapted from GNU Coreutils sha1sum. Add
	## "-a" option for algorithm selection,
	## "-U" option for Universal Newlines support,
	## "-0" option for reading bit strings, and
	## "-p" option for portable digests (to be deprecated).

BEGIN { pop @@INC if $INC[-1] eq '.' }
use strict;
use warnings;
use Fcntl;
use Getopt::Long;

my $POD = <<'END_OF_POD';

=head1 NAME

shasum - Print or Check SHA Checksums

=head1 SYNOPSIS

 Usage: shasum [OPTION]... [FILE]...
 Print or check SHA checksums.
 With no FILE, or when FILE is -, read standard input.

   -a, --algorithm   1 (default), 224, 256, 384, 512, 512224, 512256
   -b, --binary      read in binary mode
   -c, --check       read SHA sums from the FILEs and check them
   -t, --text        read in text mode (default)
   -U, --UNIVERSAL   read in Universal Newlines mode
                         produces same digest on Windows/Unix/Mac
   -0, --01          read in BITS mode
                         ASCII '0' interpreted as 0-bit,
                         ASCII '1' interpreted as 1-bit,
                         all other characters ignored
   -p, --portable    read in portable mode (to be deprecated)

 The following two options are useful only when verifying checksums:
   -s, --status      don't output anything, status code shows success
   -w, --warn        warn about improperly formatted checksum lines

   -h, --help        display this help and exit
   -v, --version     output version information and exit

 When verifying SHA-512/224 or SHA-512/256 checksums, indicate the
 algorithm explicitly using the -a option, e.g.

   shasum -a 512224 -c checksumfile

 The sums are computed as described in FIPS PUB 180-4.  When checking,
 the input should be a former output of this program.  The default
 mode is to print a line with checksum, a character indicating type
 (`*' for binary, ` ' for text, `U' for UNIVERSAL, `^' for BITS, `?'
 for portable), and name for each FILE.

 Report shasum bugs to mshelor@@cpan.org

=head1 DESCRIPTION

Running I<shasum> is often the quickest way to compute SHA message
digests.  The user simply feeds data to the script through files or
standard input, and then collects the results from standard output.

The following command shows how to compute digests for typical inputs
such as the NIST test vector "abc":

	perl -e "print qq(abc)" | shasum

Or, if you want to use SHA-256 instead of the default SHA-1, simply say:

	perl -e "print qq(abc)" | shasum -a 256

Since I<shasum> mimics the behavior of the combined GNU I<sha1sum>,
I<sha224sum>, I<sha256sum>, I<sha384sum>, and I<sha512sum> programs,
you can install this script as a convenient drop-in replacement.

Unlike the GNU programs, I<shasum> encompasses the full SHA standard by
allowing partial-byte inputs.  This is accomplished through the BITS
option (I<-0>).  The following example computes the SHA-224 digest of
the 7-bit message I<0001100>:

	perl -e "print qq(0001100)" | shasum -0 -a 224

=head1 AUTHOR

Copyright (c) 2003-2015 Mark Shelor <mshelor@@cpan.org>.

=head1 SEE ALSO

I<shasum> is implemented using the Perl module L<Digest::SHA> or
L<Digest::SHA::PurePerl>.

=cut

END_OF_POD

my $VERSION = "5.95";

sub usage {
	my($err, $msg) = @@_;

	$msg = "" unless defined $msg;
	if ($err) {
		warn($msg . "Type shasum -h for help\n");
		exit($err);
	}
	my($USAGE) = $POD =~ /SYNOPSIS(.+?)^=/sm;
	$USAGE =~ s/^\s*//;
	$USAGE =~ s/\s*$//;
	$USAGE =~ s/^ //gm;
	print $USAGE, "\n";
	exit($err);
}


	## Sync stdout and stderr by forcing a flush after every write

select((select(STDOUT), $| = 1)[0]);
select((select(STDERR), $| = 1)[0]);


	## Collect options from command line

my ($alg, $binary, $check, $text, $status, $warn, $help, $version);
my ($portable, $BITS, $reverse, $UNIVERSAL, $versions);

eval { Getopt::Long::Configure ("bundling") };
GetOptions(
	'b|binary' => \$binary, 'c|check' => \$check,
	't|text' => \$text, 'a|algorithm=i' => \$alg,
	's|status' => \$status, 'w|warn' => \$warn,
	'h|help' => \$help, 'v|version' => \$version,
	'p|portable' => \$portable,
	'0|01' => \$BITS,
	'R|REVERSE' => \$reverse,
	'U|UNIVERSAL' => \$UNIVERSAL,
	'V|VERSIONS' => \$versions,
) or usage(1, "");


	## Deal with help requests and incorrect uses

usage(0)
	if $help;
usage(1, "shasum: Ambiguous file mode\n")
	if scalar(grep {defined $_}
		($binary, $portable, $text, $BITS, $UNIVERSAL)) > 1;
usage(1, "shasum: --warn option used only when verifying checksums\n")
	if $warn && !$check;
usage(1, "shasum: --status option used only when verifying checksums\n")
	if $status && !$check;


	## Try to use Digest::SHA.  If not installed, use the slower
	## but functionally equivalent Digest::SHA::PurePerl instead.

	## If option -R is invoked, reverse the module preference,
	## i.e. try Digest::SHA::PurePerl first, then Digest::SHA.

my @@MODS = qw(Digest::SHA Digest::SHA::PurePerl);
@@MODS[0, 1] = @@MODS[1, 0] if $reverse;

my $module;
for (@@MODS) {
	my $mod = $_;
	if (eval "require $mod") {
		$module = $mod;
		last;
	}
}
die "shasum: Unable to find " . join(" or ", @@MODS) . "\n"
	unless defined $module;


	## Default to SHA-1 unless overridden by command line option

$alg = 1 unless defined $alg;
grep { $_ == $alg } (1, 224, 256, 384, 512, 512224, 512256)
	or usage(1, "shasum: Unrecognized algorithm\n");


	## Display version information if requested

if ($version) {
	print "$VERSION\n";
	exit(0);
}

if ($versions) {
	print "shasum $VERSION\n";
	print "$module ", eval "\$${module}::VERSION", "\n";
	print "perl ", defined $^V ? sprintf("%vd", $^V) : $], "\n";
	exit(0);
}


	## Try to figure out if the OS is DOS-like.  If it is,
	## default to binary mode when reading files, unless
	## explicitly overridden by command line "--text" or
	## "--UNIVERSAL" or "--portable" options.

my $isDOSish = ($^O =~ /^(MSWin\d\d|os2|dos|mint|cygwin)$/);
if ($isDOSish) { $binary = 1 unless $text || $UNIVERSAL || $portable }

my $modesym = $binary ? '*' : ($UNIVERSAL ? 'U' :
		($BITS ? '^' : ($portable ? '?' : ' ')));


	## Read from STDIN (-) if no files listed on command line

@@ARGV = ("-") unless @@ARGV;


	## sumfile($file): computes SHA digest of $file

sub sumfile {
	my $file = shift;

	my $mode = $binary ? 'b' : ($UNIVERSAL ? 'U' :
			($BITS ? '0' : ($portable ? 'p' : '')));
	my $digest = eval { $module->new($alg)->addfile($file, $mode) };
	if ($@@) { warn "shasum: $file: $!\n"; return }
	$digest->hexdigest;
}


	## %len2alg: maps hex digest length to SHA algorithm

my %len2alg = (40 => 1, 56 => 224, 64 => 256, 96 => 384, 128 => 512);
$len2alg{56} = 512224 if $alg == 512224;
$len2alg{64} = 512256 if $alg == 512256;


	## unescape: convert backslashed filename to plain filename

sub unescape {
	$_ = shift;
	s/\\\\/\0/g;
	s/\\n/\n/g;
	return if /\\/;
	s/\0/\\/g;
	return $_;
}


	## verify: confirm the digest values in a checksum file

sub verify {
	my $checkfile = shift;
	my ($err, $fmt_errs, $read_errs, $match_errs) = (0, 0, 0, 0);
	my ($num_lines, $num_files) = (0, 0);
	my ($bslash, $sum, $fname, $rsp, $digest);

	local *FH;
	$checkfile eq '-' and open(FH, '< -')
		and $checkfile = 'standard input'
	or sysopen(FH, $checkfile, O_RDONLY)
		or die "shasum: $checkfile: $!\n";
	while (<FH>) {
		next if /^#/; s/\n$//; s/^[ \t]+//; $num_lines++;
		$bslash = s/^\\//;
		($sum, $modesym, $fname) =
			/^([\da-fA-F]+)[ \t]([ *?^U])([^\0]*)/;
		$alg = defined $sum ? $len2alg{length($sum)} : undef;
		$fname = unescape($fname) if defined $fname && $bslash;
		if (grep { ! defined $_ } ($alg, $sum, $modesym, $fname)) {
			$alg = 1 unless defined $alg;
			warn("shasum: $checkfile: $.: improperly " .
				"formatted SHA$alg checksum line\n") if $warn;
			$fmt_errs++;
			next;
		}
		$fname =~ s/\r$// unless -e $fname;
		$rsp = "$fname: "; $num_files++;
		($binary, $text, $UNIVERSAL, $BITS, $portable) =
			map { $_ eq $modesym } ('*', ' ', 'U', '^', 'p');
		unless ($digest = sumfile($fname)) {
			$rsp .= "FAILED open or read\n";
			$err = 1; $read_errs++;
		}
		else {
			if (lc($sum) eq $digest) { $rsp .= "OK\n" }
			else { $rsp .= "FAILED\n"; $err = 1; $match_errs++ }
		}
		print $rsp unless $status;
	}
	close(FH);
	unless ($num_files) {
		$alg = 1 unless defined $alg;
		warn("shasum: $checkfile: no properly formatted " .
			"SHA$alg checksum lines found\n");
		$err = 1;
	}
	elsif (! $status) {
		warn("shasum: WARNING: $fmt_errs line" . ($fmt_errs>1?
		's are':' is') . " improperly formatted\n") if $fmt_errs;
		warn("shasum: WARNING: $read_errs listed file" .
		($read_errs>1?'s':'') . " could not be read\n") if $read_errs;
		warn("shasum: WARNING: $match_errs computed checksum" .
		($match_errs>1?'s':'') . " did NOT match\n") if $match_errs;
	}
	return($err == 0);
}


	## Verify or compute SHA checksums of requested files

my($file, $digest);

my $STATUS = 0;
for $file (@@ARGV) {
	if ($check) { $STATUS = 1 unless verify($file) }
	elsif ($digest = sumfile($file)) {
		if ($file =~ /[\n\\]/) {
			$file =~ s/\\/\\\\/g; $file =~ s/\n/\\n/g;
			$digest = "\\$digest";
		}
		print "$digest $modesym", "$file\n";
	}
	else { $STATUS = 1 }
}
exit($STATUS)
@


1.2
log
@Patch perl CVE-2016-1238

The problem relates to Perl 5 ("perl") loading modules from the
includes directory array ("@@INC") in which the last element is the
current directory (".").  That means that, when "perl" wants to
load a module (during first compilation or during lazy loading of
a module in run-time), perl will look for the module in the current
directory at the end, since '.' is the last include directory in
its array of include directories to seek. The issue is with requiring
libraries that are in "." but are not otherwise installed.

The major problem with this behavior is that it unexpectedly puts
a user at risk whenever they execute any Perl scripts from a directory
that is writable by other accounts on the system. For instance, if
a user is logged in as root and changes directory into /tmp or an
account's home directory, it is possible to now run any shell
commands that are written in C, Python or Ruby without fear.

The same isn't true for any shell commands that are written in Perl,
since a significant proportion of Perl scripts will execute code
in the current working directory whenever they are run. For example,
if a user on a shared system creates the file /tmp/Pod/Perldoc/Toterm.pm,
and then I log in as root, change directory to /tmp, and run "perldoc
perlrun", it will execute the code they have placed in the file.


ok deraadt@@
@
text
@d1 1
a1 1
#!perl -w
d5 1
a5 1
	## Copyright (C) 2003-2014 Mark Shelor, All Rights Reserved
d7 2
a8 2
	## Version: 5.88
	## Mon Mar 17 08:46:10 MST 2014
d10 11
a20 4
	## shasum SYNOPSIS adapted from GNU Coreutils sha1sum.
	## Add an "-a" option for algorithm selection, a "-p"
	## option for portable digest computation, and a "-0"
	## option for reading bit strings.
d38 1
a38 1
   -p, --portable    read in portable mode
d44 1
d61 2
a62 2
 (`*' for binary, ` ' for text, `?' for portable, `^' for BITS),
 and name for each FILE.
d94 1
a94 1
Copyright (c) 2003-2014 Mark Shelor <mshelor@@cpan.org>.
d105 1
a105 6
BEGIN { pop @@INC if $INC[-1] eq '.' }
use strict;
use Fcntl;
use Getopt::Long;

my $VERSION = "5.88_01";
d133 1
a133 1
my ($portable, $BITS, $modules, $versions);
d143 2
a144 1
	'M|MODULES=s' => \$modules,
d154 2
a155 1
	if scalar(grep {defined $_} ($binary, $portable, $text, $BITS)) > 1;
d165 2
a166 2
	## If option -M "Mod::Num1 Mod::Num2 ..." is invoked, try
	## those modules instead, in the order indicated.
d168 2
a169 3
my @@MODS = defined $modules
		? split(" ", $modules)
		: qw(Digest::SHA Digest::SHA::PurePerl);
d208 1
a208 1
	## "--portable" options.
d211 1
a211 1
if ($isDOSish) { $binary = 1 unless $text || $portable }
d213 2
a214 1
my $modesym = $binary ? '*' : ($portable ? '?' : ($BITS ? '^' : ' '));
d227 2
a228 1
	my $mode = $portable ? 'p' : ($binary ? 'b' : ($BITS ? '0' : ''));
d271 1
a271 1
			/^([\da-fA-F]+)[ \t]([ *?^])([^\0]*)/;
d283 2
a284 2
		($binary, $portable, $text, $BITS) =
			map { $_ eq $modesym } ('*', '?', ' ', '^');
@


1.1
log
@Initial revision
@
text
@d3 13
a15 6
	# shasum: filter for computing SHA digests (analogous to sha1sum)
	#
	# Copyright (C) 2003-2008 Mark Shelor, All Rights Reserved
	#
	# Version: 5.47
	# Wed Apr 30 04:00:54 MST 2008
d23 1
a23 2
 Usage: shasum [OPTION] [FILE]...
    or: shasum [OPTION] --check [FILE]
d27 5
a31 4
  -a, --algorithm    1 (default), 224, 256, 384, 512
  -b, --binary       read files in binary mode (default on DOS/Windows)
  -c, --check        check SHA sums against given list
  -p, --portable     read files in portable mode
d33 4
a36 1
  -t, --text         read files in text mode (default)
d39 8
d48 1
a48 2
  -s, --status       don't output anything, status code shows success
  -w, --warn         warn about improperly formatted SHA checksum lines
d50 5
a54 2
  -h, --help         display this help and exit
  -v, --version      output version information and exit
d56 1
a56 4
 The sums are computed as described in FIPS PUB 180-2.  When checking,
 the input should be a former output of this program.  The default mode
 is to print a line with checksum, a character indicating type (`*'
 for binary, `?' for portable, ` ' for text), and name for each FILE.
d60 3
a62 5
The I<shasum> script provides the easiest and most convenient way to
compute SHA message digests.  Rather than writing a program, the user
simply feeds data to the script via the command line, and waits for
the results to be printed on standard output.  Data can be fed to
I<shasum> through files, standard input, or both.
d64 2
a65 2
The following command shows how easy it is to compute digests for typical
inputs such as the NIST test vector "abc":
d67 1
a67 1
	perl -e "print qw(abc)" | shasum
d71 1
a71 1
	perl -e "print qw(abc)" | shasum -a 256
d73 2
a74 2
Since I<shasum> uses the same interface employed by the familiar
I<sha1sum> program (and its somewhat outmoded anscestor I<md5sum>),
d77 7
d86 1
a86 1
Copyright (c) 2003-2008 Mark Shelor <mshelor@@cpan.org>.
d90 1
a90 1
shasum is implemented using the Perl module L<Digest::SHA> or
d95 3
d99 1
a99 1
use FileHandle;
d102 1
a102 21
my $VERSION = "5.47";


	# Try to use Digest::SHA, since it's faster.  If not installed,
	# use Digest::SHA::PurePerl instead.

my $MOD_PREFER = "Digest::SHA";
my $MOD_SECOND = "Digest::SHA::PurePerl";

my $module = $MOD_PREFER;
eval "require $module";
if ($@@) {
	$module = $MOD_SECOND;
	eval "require $module";
	die "Unable to find $MOD_PREFER or $MOD_SECOND\n" if $@@;
}


	# Usage statement adapted from Ulrich Drepper's md5sum.
	# Include an "-a" option for algorithm selection,
	# and a "-p" option for portable digest computation.
d112 8
a119 12
	print <<'END_OF_USAGE';
Usage: shasum [OPTION] [FILE]...
   or: shasum [OPTION] --check [FILE]
Print or check SHA checksums.
With no FILE, or when FILE is -, read standard input.

  -a, --algorithm    1 (default), 224, 256, 384, 512
  -b, --binary       read files in binary mode (default on DOS/Windows)
  -c, --check        check SHA sums against given list
  -p, --portable     read files in portable mode
                         produces same digest on Windows/Unix/Mac
  -t, --text         read files in text mode (default)
d121 1
a121 11
The following two options are useful only when verifying checksums:
  -s, --status       don't output anything, status code shows success
  -w, --warn         warn about improperly formatted SHA checksum lines

  -h, --help         display this help and exit
  -v, --version      output version information and exit

The sums are computed as described in FIPS PUB 180-2.  When checking, the
input should be a former output of this program.  The default mode is to
print a line with checksum, a character indicating type (`*' for binary,
`?' for portable, ` ' for text), and name for each FILE.
d123 2
a124 4
Report bugs to <mshelor@@cpan.org>.
END_OF_USAGE
	exit($err);
}
d127 1
a127 1
	# Collect options from command line
d130 1
a130 1
my ($portable);
d138 4
a141 1
	'p|portable' => \$portable
d145 1
a145 1
	# Deal with help requests and incorrect uses
d150 1
a150 1
	if scalar(grep { defined $_ } ($binary, $portable, $text)) > 1;
d157 2
a158 1
	# Default to SHA-1 unless overriden by command line option
d160 23
a182 2
$alg = 1 unless $alg;
grep { $_ == $alg } (1, 224, 256, 384, 512)
d186 1
a186 1
	# Display version information if requested
d193 7
d201 4
a204 4
	# Try to figure out if the OS is DOS-like.  If it is,
	# default to binary mode when reading files, unless
	# explicitly overriden by command line "--text" or
	# "--portable" options.
d209 1
a209 1
my $modesym = $binary ? '*' : ($portable ? '?' : ' ');
d212 1
a212 1
	# Read from STDIN (-) if no files listed on command line
d217 1
a217 1
	# sumfile($file): computes SHA digest of $file
d222 1
a222 1
	my $mode = $portable ? 'p' : ($binary ? 'b' : '');
d224 1
a224 5
	if ($@@) {
		warn "shasum: $file: $!\n";
		return;
	}

d229 1
a229 1
	# %len2alg: maps hex digest length to SHA algorithm
d232 3
d236 10
a246 1
	# Verify checksums if requested
d248 22
a269 14
if ($check) {
	my $checkfile = shift(@@ARGV);
	my ($err, $read_errs, $match_errs) = (0, 0, 0);
	my ($num_files, $num_checksums) = (0, 0);
	my ($fh, $sum, $fname, $rsp, $digest);

	die "shasum: $checkfile: $!\n"
		unless $fh = FileHandle->new($checkfile, "r");
	while (<$fh>) {
		s/\s+$//;
		($sum, $modesym, $fname) = /^(\S+) (.)(.*)$/;
		($binary, $portable, $text) =
			map { $_ eq $modesym } ('*', '?', ' ');
		unless ($alg = $len2alg{length($sum)}) {
d271 2
a272 1
				"formatted SHA checksum line\n") if $warn;
d275 1
d277 2
a283 1
			$num_checksums++;
d289 14
a302 6
	$fh->close;
	unless ($status) {
		warn("shasum: WARNING: $read_errs of $num_files listed " .
			"files could not be read\n") if $read_errs;
		warn("shasum: WARNING: $match_errs of $num_checksums " .
			"computed checksums did NOT match\n") if $match_errs;
d304 1
a304 1
	exit($err);
d308 1
a308 1
	# Compute and display SHA checksums of requested files
d312 1
d314 6
a319 1
	if ($digest = sumfile($file)) {
d322 1
d324 1
@


1.1.1.1
log
@Perl 5.12.2 from CPAN
@
text
@@


1.1.1.2
log
@import perl 5.16.3 from CPAN - worked on by Andrew Fresh and myself
@
text
@d3 6
a8 13
	## shasum: filter for computing SHA digests (ref. sha1sum/md5sum)
	##
	## Copyright (C) 2003-2012 Mark Shelor, All Rights Reserved
	##
	## Version: 5.71
	## Wed Feb 29 04:06:10 MST 2012

	## shasum SYNOPSIS adapted from GNU Coreutils sha1sum.
	## Add an "-a" option for algorithm selection, a "-p"
	## option for portable digest computation, and a "-0"
	## option for reading bit strings.

my $POD = <<'END_OF_POD';
d16 2
a17 1
 Usage: shasum [OPTION]... [FILE]...
d21 4
a24 5
   -a, --algorithm   1 (default), 224, 256, 384, 512, 512224, 512256
   -b, --binary      read in binary mode
   -c, --check       read SHA sums from the FILEs and check them
   -t, --text        read in text mode (default)
   -p, --portable    read in portable mode
d26 1
a26 4
   -0, --01          read in BITS mode
                         ASCII '0' interpreted as 0-bit,
                         ASCII '1' interpreted as 1-bit,
                         all other characters ignored
a28 8
   -s, --status      don't output anything, status code shows success
   -w, --warn        warn about improperly formatted checksum lines

   -h, --help        display this help and exit
   -v, --version     output version information and exit

 When verifying SHA-512/224 or SHA-512/256 checksums, indicate the
 algorithm explicitly using the -a option, e.g.
d30 2
a31 1
   shasum -a 512224 -c checksumfile
d33 2
a34 4
 The sums are computed as described in FIPS-180-4.  When checking, the
 input should be a former output of this program.  The default mode is to
 print a line with checksum, a character indicating type (`*' for binary,
 ` ' for text, `?' for portable, `^' for BITS), and name for each FILE.
d36 4
a39 1
 Report shasum bugs to mshelor@@cpan.org
d43 5
a47 3
Running I<shasum> is often the quickest way to compute SHA message
digests.  The user simply feeds data to the script through files or
standard input, and then collects the results from standard output.
d49 2
a50 2
The following command shows how to compute digests for typical inputs
such as the NIST test vector "abc":
d52 1
a52 1
	perl -e "print qq(abc)" | shasum
d56 1
a56 1
	perl -e "print qq(abc)" | shasum -a 256
d58 2
a59 2
Since I<shasum> mimics the behavior of the combined GNU I<sha1sum>,
I<sha224sum>, I<sha256sum>, I<sha384sum>, and I<sha512sum> programs,
a61 7
Unlike the GNU programs, I<shasum> encompasses the full SHA standard by
allowing partial-byte inputs.  This is accomplished through the BITS
option (I<-0>).  The following example computes the SHA-224 digest of
the 7-bit message I<0001100>:

	perl -e "print qq(0001100)" | shasum -0 -a 224

d64 1
a64 1
Copyright (c) 2003-2012 Mark Shelor <mshelor@@cpan.org>.
d68 1
a68 1
I<shasum> is implemented using the Perl module L<Digest::SHA> or
a72 2
END_OF_POD

d74 1
a74 1
use Fcntl;
d77 1
a77 1
my $VERSION = "5.71";
d80 2
a81 2
	## Try to use Digest::SHA.  If not installed, use the slower
	## but functionally equivalent Digest::SHA::PurePerl instead.
d95 4
d107 27
a133 3
	my($USAGE) = $POD =~ /SYNOPSIS\n\n(.+)\n=head1 DESCRIPTION\n/sm;
	$USAGE =~ s/^ //gm;
	print $USAGE;
d138 1
a138 7
	## Sync stdout and stderr by forcing a flush after every write

select((select(STDOUT), $| = 1)[0]);
select((select(STDERR), $| = 1)[0]);


	## Collect options from command line
d141 1
a141 1
my ($portable, $BITS);
d149 1
a149 2
	'p|portable' => \$portable,
	'0|01' => \$BITS
d153 1
a153 1
	## Deal with help requests and incorrect uses
d158 1
a158 1
	if scalar(grep {defined $_} ($binary, $portable, $text, $BITS)) > 1;
d165 1
a165 1
	## Default to SHA-1 unless overriden by command line option
d167 2
a168 2
$alg = 1 unless defined $alg;
grep { $_ == $alg } (1, 224, 256, 384, 512, 512224, 512256)
d172 1
a172 1
	## Display version information if requested
d180 4
a183 4
	## Try to figure out if the OS is DOS-like.  If it is,
	## default to binary mode when reading files, unless
	## explicitly overriden by command line "--text" or
	## "--portable" options.
d188 1
a188 1
my $modesym = $binary ? '*' : ($portable ? '?' : ($BITS ? '^' : ' '));
d191 1
a191 1
	## Read from STDIN (-) if no files listed on command line
d196 1
a196 1
	## sumfile($file): computes SHA digest of $file
d201 1
a201 1
	my $mode = $portable ? 'p' : ($binary ? 'b' : ($BITS ? '0' : ''));
d203 5
a207 1
	if ($@@) { warn "shasum: $file: $!\n"; return }
d212 1
a212 1
	## %len2alg: maps hex digest length to SHA algorithm
a214 3
$len2alg{56} = 512224 if $alg == 512224;
$len2alg{64} = 512256 if $alg == 512256;

a215 1
	## unescape: convert backslashed filename to plain filename
d217 1
a217 8
sub unescape {
	$_ = shift;
	s/\\\\/\0/g;
	s/\\n/\n/g;
	return if /\\/;
	s/\0/\\/g;
	return $_;
}
d219 14
a232 23

	## verify: confirm the digest values in a checksum file

sub verify {
	my $checkfile = shift;
	my ($err, $fmt_errs, $read_errs, $match_errs) = (0, 0, 0, 0);
	my ($num_lines, $num_files) = (0, 0);
	my ($bslash, $sum, $fname, $rsp, $digest);

	local *FH;
	$checkfile eq '-' and open(FH, '< -')
		and $checkfile = 'standard input'
	or sysopen(FH, $checkfile, O_RDONLY)
		or die "shasum: $checkfile: $!\n";
	while (<FH>) {
		next if /^#/; s/\n$//; s/^[ \t]+//; $num_lines++;
		$bslash = s/^\\//;
		($sum, $modesym, $fname) =
			/^([\da-fA-F]+)[ \t]([ *?^])([^\0]*)/;
		$alg = defined $sum ? $len2alg{length($sum)} : undef;
		$fname = unescape($fname) if defined $fname && $bslash;
		if (grep { ! defined $_ } ($alg, $sum, $modesym, $fname)) {
			$alg = 1 unless defined $alg;
d234 1
a234 2
				"formatted SHA$alg checksum line\n") if $warn;
			$fmt_errs++;
a236 1
		$fname =~ s/\r$// unless -e $fname;
a237 2
		($binary, $portable, $text, $BITS) =
			map { $_ eq $modesym } ('*', '?', ' ', '^');
d243 1
d249 6
a254 6
	close(FH);
	unless ($num_files) {
		$alg = 1 unless defined $alg;
		warn("shasum: $checkfile: no properly formatted " .
			"SHA$alg checksum lines found\n");
		$err = 1;
d256 1
a256 9
	elsif (! $status) {
		warn("shasum: WARNING: $fmt_errs line" . ($fmt_errs>1?
		's are':' is') . " improperly formatted\n") if $fmt_errs;
		warn("shasum: WARNING: $read_errs listed file" .
		($read_errs>1?'s':'') . " could not be read\n") if $read_errs;
		warn("shasum: WARNING: $match_errs computed checksum" .
		($match_errs>1?'s':'') . " did NOT match\n") if $match_errs;
	}
	return($err == 0);
d260 1
a260 1
	## Verify or compute SHA checksums of requested files
a263 1
my $STATUS = 0;
d265 1
a265 6
	if ($check) { $STATUS = 1 unless verify($file) }
	elsif ($digest = sumfile($file)) {
		if ($file =~ /[\n\\]/) {
			$file =~ s/\\/\\\\/g; $file =~ s/\n/\\n/g;
			$digest = "\\$digest";
		}
a267 1
	else { $STATUS = 1 }
a268 1
exit($STATUS)
@


1.1.1.3
log
@Import perl-5.18.2

OK espie@@ sthen@@ deraadt@@
@
text
@d5 1
a5 1
	## Copyright (C) 2003-2013 Mark Shelor, All Rights Reserved
d7 2
a8 2
	## Version: 5.84
	## Sat Mar  9 17:36:08 MST 2013
d85 1
a85 1
Copyright (c) 2003-2013 Mark Shelor <mshelor@@cpan.org>.
d100 1
a100 1
my $VERSION = "5.84";
@


1.1.1.4
log
@Import perl-5.20.1
@
text
@d5 1
a5 1
	## Copyright (C) 2003-2014 Mark Shelor, All Rights Reserved
d7 2
a8 2
	## Version: 5.88
	## Mon Mar 17 08:46:10 MST 2014
d50 4
a53 5
 The sums are computed as described in FIPS PUB 180-4.  When checking,
 the input should be a former output of this program.  The default
 mode is to print a line with checksum, a character indicating type
 (`*' for binary, ` ' for text, `?' for portable, `^' for BITS),
 and name for each FILE.
d85 1
a85 1
Copyright (c) 2003-2014 Mark Shelor <mshelor@@cpan.org>.
d100 17
a116 1
my $VERSION = "5.88";
d126 1
a126 3
	my($USAGE) = $POD =~ /SYNOPSIS(.+?)^=/sm;
	$USAGE =~ s/^\s*//;
	$USAGE =~ s/\s*$//;
d128 1
a128 1
	print $USAGE, "\n";
d142 1
a142 1
my ($portable, $BITS, $modules, $versions);
d151 1
a151 3
	'0|01' => \$BITS,
	'M|MODULES=s' => \$modules,
	'V|VERSIONS' => \$versions,
d167 1
a167 23
	## Try to use Digest::SHA.  If not installed, use the slower
	## but functionally equivalent Digest::SHA::PurePerl instead.

	## If option -M "Mod::Num1 Mod::Num2 ..." is invoked, try
	## those modules instead, in the order indicated.

my @@MODS = defined $modules
		? split(" ", $modules)
		: qw(Digest::SHA Digest::SHA::PurePerl);

my $module;
for (@@MODS) {
	my $mod = $_;
	if (eval "require $mod") {
		$module = $mod;
		last;
	}
}
die "shasum: Unable to find " . join(" or ", @@MODS) . "\n"
	unless defined $module;


	## Default to SHA-1 unless overridden by command line option
a180 7
if ($versions) {
	print "shasum $VERSION\n";
	print "$module ", eval "\$${module}::VERSION", "\n";
	print "perl ", defined $^V ? sprintf("%vd", $^V) : $], "\n";
	exit(0);
}

d184 1
a184 1
	## explicitly overridden by command line "--text" or
@


1.1.1.4.4.1
log
@Patch perl CVE-2016-1238

The problem relates to Perl 5 ("perl") loading modules from the
includes directory array ("@@INC") in which the last element is the
current directory (".").  That means that, when "perl" wants to
load a module (during first compilation or during lazy loading of
a module in run-time), perl will look for the module in the current
directory at the end, since '.' is the last include directory in
its array of include directories to seek. The issue is with requiring
libraries that are in "." but are not otherwise installed.

The major problem with this behavior is that it unexpectedly puts
a user at risk whenever they execute any Perl scripts from a directory
that is writable by other accounts on the system. For instance, if
a user is logged in as root and changes directory into /tmp or an
account's home directory, it is possible to now run any shell
commands that are written in C, Python or Ruby without fear.

The same isn't true for any shell commands that are written in Perl,
since a significant proportion of Perl scripts will execute code
in the current working directory whenever they are run. For example,
if a user on a shared system creates the file /tmp/Pod/Perldoc/Toterm.pm,
and then I log in as root, change directory to /tmp, and run "perldoc
perlrun", it will execute the code they have placed in the file.
@
text
@a96 1
BEGIN { pop @@INC if $INC[-1] eq '.' }
d101 1
a101 1
my $VERSION = "5.88_01";
@


1.1.1.4.6.1
log
@Patch perl CVE-2016-1238

The problem relates to Perl 5 ("perl") loading modules from the
includes directory array ("@@INC") in which the last element is the
current directory (".").  That means that, when "perl" wants to
load a module (during first compilation or during lazy loading of
a module in run-time), perl will look for the module in the current
directory at the end, since '.' is the last include directory in
its array of include directories to seek. The issue is with requiring
libraries that are in "." but are not otherwise installed.

The major problem with this behavior is that it unexpectedly puts
a user at risk whenever they execute any Perl scripts from a directory
that is writable by other accounts on the system. For instance, if
a user is logged in as root and changes directory into /tmp or an
account's home directory, it is possible to now run any shell
commands that are written in C, Python or Ruby without fear.

The same isn't true for any shell commands that are written in Perl,
since a significant proportion of Perl scripts will execute code
in the current working directory whenever they are run. For example,
if a user on a shared system creates the file /tmp/Pod/Perldoc/Toterm.pm,
and then I log in as root, change directory to /tmp, and run "perldoc
perlrun", it will execute the code they have placed in the file.
@
text
@a96 1
BEGIN { pop @@INC if $INC[-1] eq '.' }
d101 1
a101 1
my $VERSION = "5.88_01";
@


