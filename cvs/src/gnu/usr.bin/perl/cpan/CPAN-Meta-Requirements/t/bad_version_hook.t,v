head	1.2;
access;
symbols
	OPENBSD_6_1:1.2.0.4
	OPENBSD_6_1_BASE:1.2
	OPENBSD_6_0:1.1.1.1.0.12
	OPENBSD_6_0_BASE:1.1.1.1
	OPENBSD_5_9:1.1.1.1.0.6
	OPENBSD_5_9_BASE:1.1.1.1
	OPENBSD_5_8:1.1.1.1.0.8
	OPENBSD_5_8_BASE:1.1.1.1
	PERL_5_20_2:1.1.1.1
	OPENBSD_5_7:1.1.1.1.0.2
	OPENBSD_5_7_BASE:1.1.1.1
	PERL_5_20_1:1.1.1.1
	OPENBSD_5_6:1.1.1.1.0.4
	OPENBSD_5_6_BASE:1.1.1.1
	PERL_5_18_2:1.1.1.1
	PERL:1.1.1;
locks; strict;
comment	@# @;
expand	@b@;


1.2
date	2017.02.05.00.31.55;	author afresh1;	state Exp;
branches;
next	1.1;
commitid	cxJ08BvJA9Pt2PTM;

1.1
date	2014.03.24.14.58.50;	author afresh1;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	2014.03.24.14.58.50;	author afresh1;	state Exp;
branches;
next	;


desc
@@


1.2
log
@Fix merge issues, remove excess files - match perl-5.24.1 dist
@
text
@use strict;
use warnings;

use CPAN::Meta::Requirements;
use version;

use Test::More 0.88;

my %DATA = (
  'Foo::Bar' => [ 10, 10 ],
  'Foo::Baz' => [ 'invalid_version', 42 ],
  'Foo::Qux' => [ 'version', 42 ],
);
my %input = map { ($_ => $DATA{$_}->[0]) } keys %DATA;
my %expected = map { ($_ => $DATA{$_}->[1]) } keys %DATA;

sub dies_ok (&@@) {
  my ($code, $qr, $comment) = @@_;

  no warnings 'redefine';
  local *Regexp::CARP_TRACE  = sub { "<regexp>" };
  my $lived = eval { $code->(); 1 };

  if ($lived) {
    fail("$comment: did not die");
  } else {
    like($@@, $qr, $comment);
  }
}

my $hook_text;
sub _fixit { my ($v, $m) = @@_; $hook_text .= $m; return version->new(42) }

{
  my $req = CPAN::Meta::Requirements->new( {bad_version_hook => \&_fixit} );

  my ($k, $v);
  while (($k, $v) = each %input) {
    note "adding minimum requirement: $k => $v";
    eval { $req->add_minimum($k => $v) };
    is( $@@, '', "adding minimum '$k' for $v" );
  }
  like( $hook_text, qr/Foo::Baz/, 'hook stored module name' );

  is_deeply(
    $req->as_string_hash,
    \%expected,
    "hook fixes invalid version",
  );
}

{
  my $req = CPAN::Meta::Requirements->new( {bad_version_hook => sub { 0 }} );

  dies_ok { $req->add_minimum('Foo::Baz' => 'invalid_version') }
    qr/Invalid version/,
    "dies if hook doesn't return version object";

}


done_testing;
@


1.1
log
@Initial revision
@
text
@d9 8
d20 2
d31 2
a32 1
sub _fixit { return version->new(42) }
d37 7
a43 2
  $req->add_minimum('Foo::Bar' => 10);
  $req->add_minimum('Foo::Baz' => 'invalid_version');
d47 1
a47 4
    {
      'Foo::Bar'   => 10,
      'Foo::Baz'   => 42,
    },
@


1.1.1.1
log
@Import perl-5.18.2

OK espie@@ sthen@@ deraadt@@
@
text
@@
