head	1.2;
access;
symbols
	PERL_5_24_2:1.1.1.2
	OPENBSD_6_1:1.2.0.4
	OPENBSD_6_1_BASE:1.2
	OPENBSD_6_0:1.1.1.1.0.12
	OPENBSD_6_0_BASE:1.1.1.1
	OPENBSD_5_9:1.1.1.1.0.6
	OPENBSD_5_9_BASE:1.1.1.1
	OPENBSD_5_8:1.1.1.1.0.8
	OPENBSD_5_8_BASE:1.1.1.1
	PERL_5_20_2:1.1.1.1
	OPENBSD_5_7:1.1.1.1.0.2
	OPENBSD_5_7_BASE:1.1.1.1
	PERL_5_20_1:1.1.1.1
	OPENBSD_5_6:1.1.1.1.0.4
	OPENBSD_5_6_BASE:1.1.1.1
	PERL_5_18_2:1.1.1.1
	PERL:1.1.1;
locks; strict;
comment	@# @;
expand	@b@;


1.2
date	2017.02.05.00.31.55;	author afresh1;	state Exp;
branches;
next	1.1;
commitid	cxJ08BvJA9Pt2PTM;

1.1
date	2014.03.24.14.58.50;	author afresh1;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	2014.03.24.14.58.50;	author afresh1;	state Exp;
branches;
next	1.1.1.2;

1.1.1.2
date	2017.08.14.13.45.34;	author afresh1;	state Exp;
branches;
next	;
commitid	fAzrs78vdW2Yfc6A;


desc
@@


1.2
log
@Fix merge issues, remove excess files - match perl-5.24.1 dist
@
text
@use strict;
use warnings;

use CPAN::Meta::Requirements;

use Test::More 0.88;

sub dies_ok (&@@) {
  my ($code, $qr, $comment) = @@_;

  no warnings 'redefine';
  local *Regexp::CARP_TRACE  = sub { "<regexp>" };
  my $lived = eval { $code->(); 1 };

  if ($lived) {
    fail("$comment: did not die");
  } else {
    like($@@, $qr, $comment);
  }
}

{
  my $string_hash = {
    Left   => 10,
    Shared => '>= 2, <= 9, != 7',
    Right  => 18,
  };

  my $req = CPAN::Meta::Requirements->from_string_hash($string_hash);

  is_deeply(
    $req->as_string_hash,
    $string_hash,
    "we can load from a string hash",
  );
}

SKIP: {
  skip "Can't tell v-strings from strings until 5.8.1", 1
    unless $] gt '5.008';
  my $string_hash = {
    Left   => 10,
    Shared => '= 2',
    Right  => 18,
  };

  dies_ok { CPAN::Meta::Requirements->from_string_hash($string_hash) }
    qr/Can't convert/,
    "we die when we can't understand a version spec";
}

{
  my $undef_hash = { Undef => undef };
  my $z_hash = { ZeroLength => '' };

  my $warning;
  local $SIG{__WARN__} = sub { $warning = join("\n",@@_) };

  my $req = CPAN::Meta::Requirements->from_string_hash($undef_hash);
  like ($warning, qr/Undefined requirement.*treated as '0'/, "undef requirement warns");
  $req->add_string_requirement(%$z_hash);
  like ($warning, qr/Undefined requirement.*treated as '0'/, "'' requirement warns");

  is_deeply(
    $req->as_string_hash,
    { map { ($_ => 0) } keys(%$undef_hash), keys(%$z_hash) },
    "undef/'' requirements treated as '0'",
  );
}

SKIP: {
  skip "Can't tell v-strings from strings until 5.8.1", 2
    unless $] gt '5.008';
  my $string_hash = {
    Left   => 10,
    Shared => v50.44.60,
    Right  => 18,
  };

  my $warning;
  local $SIG{__WARN__} = sub { $warning = join("\n",@@_) };

  my $req = eval { CPAN::Meta::Requirements->from_string_hash($string_hash); };
  is( $@@, '', "vstring in string hash lives" );

  ok(
    $req->accepts_module(Shared => 'v50.44.60'),
    "vstring treated as if string",
  );
}


{
  my $req = CPAN::Meta::Requirements->from_string_hash(
    { Bad => 'invalid', },
    { bad_version_hook => sub { version->new(42) } },
  );

  ok(
    $req->accepts_module(Bad => 42),
    "options work 2nd arg to f_s_h",
  );
}

done_testing;
@


1.1
log
@Initial revision
@
text
@d11 2
d38 3
a40 1
{
d53 21
d76 1
a76 1
    Shared => undef,
d83 2
a84 1
  my $req = CPAN::Meta::Requirements->from_string_hash($string_hash);
d86 3
a88 3
  is(
    $req->as_string_hash->{Shared}, 0,
    "undef requirement treated as '0'",
d90 2
d93 5
a97 1
  like ($warning, qr/Undefined requirement.*treated as '0'/, "undef requirement warns");
d99 4
@


1.1.1.1
log
@Import perl-5.18.2

OK espie@@ sthen@@ deraadt@@
@
text
@@


1.1.1.2
log
@Import perl-5.24.2
@
text
@a10 2
  no warnings 'redefine';
  local *Regexp::CARP_TRACE  = sub { "<regexp>" };
d36 1
a36 3
SKIP: {
  skip "Can't tell v-strings from strings until 5.8.1", 1
    unless $] gt '5.008';
a48 21
  my $undef_hash = { Undef => undef };
  my $z_hash = { ZeroLength => '' };

  my $warning;
  local $SIG{__WARN__} = sub { $warning = join("\n",@@_) };

  my $req = CPAN::Meta::Requirements->from_string_hash($undef_hash);
  like ($warning, qr/Undefined requirement.*treated as '0'/, "undef requirement warns");
  $req->add_string_requirement(%$z_hash);
  like ($warning, qr/Undefined requirement.*treated as '0'/, "'' requirement warns");

  is_deeply(
    $req->as_string_hash,
    { map { ($_ => 0) } keys(%$undef_hash), keys(%$z_hash) },
    "undef/'' requirements treated as '0'",
  );
}

SKIP: {
  skip "Can't tell v-strings from strings until 5.8.1", 2
    unless $] gt '5.008';
d51 1
a51 1
    Shared => v50.44.60,
d58 1
a58 2
  my $req = eval { CPAN::Meta::Requirements->from_string_hash($string_hash); };
  is( $@@, '', "vstring in string hash lives" );
d60 3
a62 3
  ok(
    $req->accepts_module(Shared => 'v50.44.60'),
    "vstring treated as if string",
a63 1
}
d65 1
a66 10
{
  my $req = CPAN::Meta::Requirements->from_string_hash(
    { Bad => 'invalid', },
    { bad_version_hook => sub { version->new(42) } },
  );

  ok(
    $req->accepts_module(Bad => 42),
    "options work 2nd arg to f_s_h",
  );
@

