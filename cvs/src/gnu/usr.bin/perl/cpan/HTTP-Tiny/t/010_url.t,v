head	1.1;
branch	1.1.1;
access;
symbols
	OPENBSD_6_2_BASE:1.1.1.2
	PERL_5_24_2:1.1.1.2
	OPENBSD_6_1:1.1.1.2.0.12
	OPENBSD_6_1_BASE:1.1.1.2
	OPENBSD_6_0:1.1.1.2.0.10
	OPENBSD_6_0_BASE:1.1.1.2
	OPENBSD_5_9:1.1.1.2.0.4
	OPENBSD_5_9_BASE:1.1.1.2
	OPENBSD_5_8:1.1.1.2.0.6
	OPENBSD_5_8_BASE:1.1.1.2
	PERL_5_20_2:1.1.1.2
	OPENBSD_5_7:1.1.1.2.0.2
	OPENBSD_5_7_BASE:1.1.1.2
	PERL_5_20_1:1.1.1.2
	OPENBSD_5_6:1.1.1.1.0.8
	OPENBSD_5_6_BASE:1.1.1.1
	PERL_5_18_2:1.1.1.1
	PERL:1.1.1
	OPENBSD_5_5:1.1.1.1.0.6
	OPENBSD_5_5_BASE:1.1.1.1
	OPENBSD_5_4:1.1.1.1.0.2
	OPENBSD_5_4_BASE:1.1.1.1
	PERL_5_16_3:1.1.1.1
	CPAN:1.1.1;
locks; strict;
comment	@# @;
expand	@o@;


1.1
date	2013.03.25.20.07.43;	author sthen;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	2013.03.25.20.07.43;	author sthen;	state Exp;
branches;
next	1.1.1.2;

1.1.1.2
date	2014.11.17.20.52.47;	author afresh1;	state Exp;
branches;
next	;
commitid	B31cAbBIXiCqnL97;


desc
@@


1.1
log
@Initial revision
@
text
@#!perl

use strict;
use warnings;

use Test::More;
use HTTP::Tiny;

my @@tests = (
    [ 'HtTp://Example.COM/',                 'http',  'example.com',    80, '/'          ],
    [ 'HtTp://Example.com:1024/',            'http',  'example.com',  1024, '/'          ],
    [ 'http://example.com',                  'http',  'example.com',    80, '/'          ],
    [ 'http://example.com:',                 'http',  'example.com',    80, '/'          ],
    [ 'http://foo@@example.com:',             'http',  'example.com',    80, '/'          ],
    [ 'http://@@example.com:',                'http',  'example.com',    80, '/'          ],
    [ 'http://example.com?foo=bar',          'http',  'example.com',    80, '/?foo=bar'  ],
    [ 'http://example.com?foo=bar#fragment', 'http',  'example.com',    80, '/?foo=bar'  ],
    [ 'http://example.com/path?foo=bar',     'http',  'example.com',    80, '/path?foo=bar'  ],
    [ 'http:///path?foo=bar',                'http',  'localhost',      80, '/path?foo=bar'  ],
    [ 'HTTPS://example.com/',                'https', 'example.com',   443, '/'          ],
    [ 'http://[::]:1024',                    'http',  '[::]',         1024, '/'          ],
    [ 'xxx://foo/',                          'xxx',   'foo',         undef, '/'          ],
);

plan tests => scalar @@tests;

for my $test (@@tests) {
    my $url = shift(@@$test);
    my $got = [ HTTP::Tiny->_split_url($url) ];
    my $exp = $test;
    is_deeply($got, $exp, "->split_url('$url')");
}


@


1.1.1.1
log
@import perl 5.16.3 from CPAN - worked on by Andrew Fresh and myself
@
text
@@


1.1.1.2
log
@Import perl-5.20.1
@
text
@d6 1
a6 1
use Test::More 0.86;
d10 13
a22 14
    [ 'HtTp://Example.COM/',                 'http',  'example.com',    80, '/', '',          ],
    [ 'HtTp://Example.com:1024/',            'http',  'example.com',  1024, '/', '',          ],
    [ 'http://example.com',                  'http',  'example.com',    80, '/', '',          ],
    [ 'http://example.com:',                 'http',  'example.com',    80, '/', '',          ],
    [ 'http://foo@@example.com:',             'http',  'example.com',    80, '/', 'foo',          ],
    [ 'http://foo:pass@@example.com:',        'http',  'example.com',    80, '/', 'foo:pass',          ],
    [ 'http://@@example.com:',                'http',  'example.com',    80, '/', '',          ],
    [ 'http://example.com?foo=bar',          'http',  'example.com',    80, '/?foo=bar', '',  ],
    [ 'http://example.com?foo=bar#fragment', 'http',  'example.com',    80, '/?foo=bar', '',  ],
    [ 'http://example.com/path?foo=bar',     'http',  'example.com',    80, '/path?foo=bar', '',  ],
    [ 'http:///path?foo=bar',                'http',  'localhost',      80, '/path?foo=bar', '',  ],
    [ 'HTTPS://example.com/',                'https', 'example.com',   443, '/', '',          ],
    [ 'http://[::]:1024',                    'http',  '[::]',         1024, '/', '',          ],
    [ 'xxx://foo/',                          'xxx',   'foo',         undef, '/', '',          ],
d31 1
a31 1
    is_deeply($got, $exp, "->split_url('$url')") or diag explain $got;
@

