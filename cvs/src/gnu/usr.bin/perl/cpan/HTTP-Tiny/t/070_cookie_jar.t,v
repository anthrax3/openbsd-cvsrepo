head	1.1;
branch	1.1.1;
access;
symbols
	OPENBSD_6_0:1.1.1.1.0.10
	OPENBSD_6_0_BASE:1.1.1.1
	OPENBSD_5_9:1.1.1.1.0.4
	OPENBSD_5_9_BASE:1.1.1.1
	OPENBSD_5_8:1.1.1.1.0.6
	OPENBSD_5_8_BASE:1.1.1.1
	PERL_5_20_2:1.1.1.1
	OPENBSD_5_7:1.1.1.1.0.2
	OPENBSD_5_7_BASE:1.1.1.1
	PERL_5_20_1:1.1.1.1
	PERL:1.1.1;
locks; strict;
comment	@# @;
expand	@b@;


1.1
date	2014.11.17.20.52.47;	author afresh1;	state Exp;
branches
	1.1.1.1;
next	;
commitid	B31cAbBIXiCqnL97;

1.1.1.1
date	2014.11.17.20.52.47;	author afresh1;	state Exp;
branches;
next	;
commitid	B31cAbBIXiCqnL97;


desc
@@


1.1
log
@Initial revision
@
text
@#!perl

use strict;
use warnings;

use Test::More tests => 4;
use t::SimpleCookieJar;
use t::BrokenCookieJar;
use HTTP::Tiny;

### a couple tests to ensure that:
###  * by default there is no cookie jar defined
###  * the correct cookie jar is returned when specified
###  * error when cookie jar does not support the add and cookie_header methods


my $default = undef;
my $jar = t::SimpleCookieJar->new();
my $mug = t::BrokenCookieJar->new();
my $dog = t::BrokenCookieJar2->new();

{
    my $ua = HTTP::Tiny->new();
    is $ua->cookie_jar, $default, 'default cookie jar is as expected';
}

{
    my $ua = HTTP::Tiny->new(cookie_jar => $jar);
    is $ua->cookie_jar, $jar, 'cookie_jar is as expected';
}

{
    my $ua = eval { HTTP::Tiny->new(cookie_jar => $mug) };
    my $err = $@@;
    like( $err, qr/must provide .* 'add' method/
	  => 'invalid jar does not support add method' );
    
    $ua = eval { HTTP::Tiny->new(cookie_jar => $dog) };
    $err = $@@;
    like( $err, qr/must provide .* 'cookie_header' method/
	  => 'invalid jar does not support cookie_header method' );
}
@


1.1.1.1
log
@Import perl-5.20.1
@
text
@@
