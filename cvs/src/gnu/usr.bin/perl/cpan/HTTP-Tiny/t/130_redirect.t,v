head	1.2;
access;
symbols
	PERL_5_24_2:1.1.1.4
	OPENBSD_6_1:1.2.0.4
	OPENBSD_6_1_BASE:1.2
	OPENBSD_6_0:1.1.1.3.0.10
	OPENBSD_6_0_BASE:1.1.1.3
	OPENBSD_5_9:1.1.1.3.0.4
	OPENBSD_5_9_BASE:1.1.1.3
	OPENBSD_5_8:1.1.1.3.0.6
	OPENBSD_5_8_BASE:1.1.1.3
	PERL_5_20_2:1.1.1.3
	OPENBSD_5_7:1.1.1.3.0.2
	OPENBSD_5_7_BASE:1.1.1.3
	PERL_5_20_1:1.1.1.3
	OPENBSD_5_6:1.1.1.2.0.4
	OPENBSD_5_6_BASE:1.1.1.2
	PERL_5_18_2:1.1.1.2
	PERL:1.1.1
	OPENBSD_5_5:1.1.1.1.0.6
	OPENBSD_5_5_BASE:1.1.1.1
	OPENBSD_5_4:1.1.1.1.0.2
	OPENBSD_5_4_BASE:1.1.1.1
	PERL_5_16_3:1.1.1.1
	CPAN:1.1.1;
locks; strict;
comment	@# @;
expand	@o@;


1.2
date	2017.02.05.00.31.59;	author afresh1;	state Exp;
branches;
next	1.1;
commitid	cxJ08BvJA9Pt2PTM;

1.1
date	2013.03.25.20.07.43;	author sthen;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	2013.03.25.20.07.43;	author sthen;	state Exp;
branches;
next	1.1.1.2;

1.1.1.2
date	2014.03.24.14.58.52;	author afresh1;	state Exp;
branches;
next	1.1.1.3;

1.1.1.3
date	2014.11.17.20.52.47;	author afresh1;	state Exp;
branches;
next	1.1.1.4;
commitid	B31cAbBIXiCqnL97;

1.1.1.4
date	2017.08.14.13.45.38;	author afresh1;	state Exp;
branches;
next	;
commitid	fAzrs78vdW2Yfc6A;


desc
@@


1.2
log
@Fix merge issues, remove excess files - match perl-5.24.1 dist
@
text
@#!perl

use strict;
use warnings;

use File::Basename;
use Test::More 0.88;
use t::Util qw[tmpfile rewind slurp monkey_patch dir_list parse_case
  hashify connect_args clear_socket_source set_socket_source sort_headers
  $CRLF $LF];

use HTTP::Tiny;
BEGIN { monkey_patch() }

for my $file ( dir_list("corpus", qr/^redirect/ ) ) {
  my $label = basename($file);
  my $data = do { local (@@ARGV,$/) = $file; <> };
  my ($params, @@case_pairs) = split /--+\n/, $data;
  my $case = parse_case($params);

  my $url = $case->{url}[0];
  my $method = $case->{method}[0] || 'GET';
  my %headers = hashify( $case->{headers} );
  my %new_args = hashify( $case->{new_args} );

  my %options;
  $options{headers} = \%headers if %headers;
  my $call_args = %options ? [$method, $url, \%options] : [$method, $url];

  my $version = HTTP::Tiny->VERSION || 0;
  my $agent = $new_args{agent} || "HTTP-Tiny/$version";

  my (@@socket_pairs);
  while ( @@case_pairs ) {
    my ($expect_req, $give_res) = splice( @@case_pairs, 0, 2 );
    # cleanup source data
    $expect_req =~ s{HTTP-Tiny/VERSION}{$agent};
    s{\n}{$CRLF}g for ($expect_req, $give_res);

    # setup mocking and test
    my $req_fh = tmpfile();
    my $res_fh = tmpfile($give_res);

    push @@socket_pairs, [$req_fh, $res_fh, $expect_req];
  }

  clear_socket_source();
  set_socket_source(@@$_) for @@socket_pairs;

  my $http = HTTP::Tiny->new(keep_alive => 0, %new_args);
  my $response  = $http->request(@@$call_args);

  my $calls = 0
    + (defined($new_args{max_redirect}) ? $new_args{max_redirect} : 5);

  for my $i ( 0 .. $calls ) {
    last unless @@socket_pairs;
    my ($req_fh, $res_fh, $expect_req) = @@{ shift @@socket_pairs };
    my $got_req = slurp($req_fh);
    is( sort_headers($got_req), sort_headers($expect_req), "$label request ($i)");
    $i++;
  }

  my $exp_content = $case->{expected}
                  ? join("$CRLF", @@{$case->{expected}}) : '';

  is ( $response->{content}, $exp_content, "$label content" );

  if ( $case->{expected_url} ) {
    is ( $response->{url}, $case->{expected_url}[0], "$label response URL" );
  }

}

done_testing;
@


1.1
log
@Initial revision
@
text
@d15 1
a15 1
for my $file ( dir_list("t/cases", qr/^redirect/ ) ) {
d50 1
a50 1
  my $http = HTTP::Tiny->new(%new_args);
d68 5
@


1.1.1.1
log
@import perl 5.16.3 from CPAN - worked on by Andrew Fresh and myself
@
text
@@


1.1.1.2
log
@Import perl-5.18.2

OK espie@@ sthen@@ deraadt@@
@
text
@a67 5

  if ( $case->{expected_url} ) {
    is ( $response->{url}, $case->{expected_url}[0], "$label response URL" );
  }

@


1.1.1.3
log
@Import perl-5.20.1
@
text
@d50 1
a50 1
  my $http = HTTP::Tiny->new(keep_alive => 0, %new_args);
@


1.1.1.4
log
@Import perl-5.24.2
@
text
@d15 1
a15 1
for my $file ( dir_list("corpus", qr/^redirect/ ) ) {
@


