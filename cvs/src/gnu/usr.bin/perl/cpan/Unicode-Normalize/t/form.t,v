head	1.1;
branch	1.1.1;
access;
symbols
	PERL_5_24_2:1.1.1.3
	OPENBSD_6_1:1.1.1.3.0.12
	OPENBSD_6_1_BASE:1.1.1.3
	OPENBSD_6_0:1.1.1.3.0.10
	OPENBSD_6_0_BASE:1.1.1.3
	OPENBSD_5_9:1.1.1.3.0.4
	OPENBSD_5_9_BASE:1.1.1.3
	OPENBSD_5_8:1.1.1.3.0.6
	OPENBSD_5_8_BASE:1.1.1.3
	PERL_5_20_2:1.1.1.3
	OPENBSD_5_7:1.1.1.3.0.2
	OPENBSD_5_7_BASE:1.1.1.3
	PERL_5_20_1:1.1.1.3
	OPENBSD_5_6:1.1.1.2.0.8
	OPENBSD_5_6_BASE:1.1.1.2
	PERL_5_18_2:1.1.1.2
	PERL:1.1.1
	OPENBSD_5_5:1.1.1.2.0.6
	OPENBSD_5_5_BASE:1.1.1.2
	OPENBSD_5_4:1.1.1.2.0.2
	OPENBSD_5_4_BASE:1.1.1.2
	PERL_5_16_3:1.1.1.2
	OPENBSD_5_3:1.1.1.1.0.10
	OPENBSD_5_3_BASE:1.1.1.1
	OPENBSD_5_2:1.1.1.1.0.8
	OPENBSD_5_2_BASE:1.1.1.1
	OPENBSD_5_1_BASE:1.1.1.1
	OPENBSD_5_1:1.1.1.1.0.6
	OPENBSD_5_0:1.1.1.1.0.4
	OPENBSD_5_0_BASE:1.1.1.1
	OPENBSD_4_9:1.1.1.1.0.2
	OPENBSD_4_9_BASE:1.1.1.1
	PERL_5_12_2:1.1.1.1
	CPAN:1.1.1;
locks; strict;
comment	@# @;
expand	@o@;


1.1
date	2010.09.24.14.48.56;	author millert;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	2010.09.24.14.48.56;	author millert;	state Exp;
branches;
next	1.1.1.2;

1.1.1.2
date	2013.03.25.20.08.31;	author sthen;	state Exp;
branches;
next	1.1.1.3;

1.1.1.3
date	2014.11.17.20.53.02;	author afresh1;	state Exp;
branches;
next	;
commitid	B31cAbBIXiCqnL97;


desc
@@


1.1
log
@Initial revision
@
text
@
BEGIN {
    unless ("A" eq pack('U', 0x41)) {
	print "1..0 # Unicode::Normalize " .
	    "cannot stringify a Unicode code point\n";
	exit 0;
    }
}

BEGIN {
    if ($ENV{PERL_CORE}) {
	chdir('t') if -d 't';
	@@INC = $^O eq 'MacOS' ? qw(::lib) : qw(../lib);
    }
}

#########################

use Test;
use strict;
use warnings;
BEGIN { plan tests => 37 };
use Unicode::Normalize qw(:all);
ok(1); # If we made it this far, we're ok.

sub answer { defined $_[0] ? $_[0] ? "YES" : "NO" : "MAYBE" }

#########################

ok(NFD ("\x{304C}\x{FF76}"), "\x{304B}\x{3099}\x{FF76}");
ok(NFC ("\x{304C}\x{FF76}"), "\x{304C}\x{FF76}");
ok(NFKD("\x{304C}\x{FF76}"), "\x{304B}\x{3099}\x{30AB}");
ok(NFKC("\x{304C}\x{FF76}"), "\x{304C}\x{30AB}");

ok(answer(checkNFD ("\x{304C}")), "NO");
ok(answer(checkNFC ("\x{304C}")), "YES");
ok(answer(checkNFKD("\x{304C}")), "NO");
ok(answer(checkNFKC("\x{304C}")), "YES");
ok(answer(checkNFD ("\x{FF76}")), "YES");
ok(answer(checkNFC ("\x{FF76}")), "YES");
ok(answer(checkNFKD("\x{FF76}")), "NO");
ok(answer(checkNFKC("\x{FF76}")), "NO");

ok(normalize('D', "\x{304C}\x{FF76}"), "\x{304B}\x{3099}\x{FF76}");
ok(normalize('C', "\x{304C}\x{FF76}"), "\x{304C}\x{FF76}");
ok(normalize('KD',"\x{304C}\x{FF76}"), "\x{304B}\x{3099}\x{30AB}");
ok(normalize('KC',"\x{304C}\x{FF76}"), "\x{304C}\x{30AB}");

ok(answer(check('D', "\x{304C}")), "NO");
ok(answer(check('C', "\x{304C}")), "YES");
ok(answer(check('KD',"\x{304C}")), "NO");
ok(answer(check('KC',"\x{304C}")), "YES");
ok(answer(check('D' ,"\x{FF76}")), "YES");
ok(answer(check('C' ,"\x{FF76}")), "YES");
ok(answer(check('KD',"\x{FF76}")), "NO");
ok(answer(check('KC',"\x{FF76}")), "NO");

ok(normalize('NFD', "\x{304C}\x{FF76}"), "\x{304B}\x{3099}\x{FF76}");
ok(normalize('NFC', "\x{304C}\x{FF76}"), "\x{304C}\x{FF76}");
ok(normalize('NFKD',"\x{304C}\x{FF76}"), "\x{304B}\x{3099}\x{30AB}");
ok(normalize('NFKC',"\x{304C}\x{FF76}"), "\x{304C}\x{30AB}");

ok(answer(check('NFD', "\x{304C}")), "NO");
ok(answer(check('NFC', "\x{304C}")), "YES");
ok(answer(check('NFKD',"\x{304C}")), "NO");
ok(answer(check('NFKC',"\x{304C}")), "YES");
ok(answer(check('NFD' ,"\x{FF76}")), "YES");
ok(answer(check('NFC' ,"\x{FF76}")), "YES");
ok(answer(check('NFKD',"\x{FF76}")), "NO");
ok(answer(check('NFKC',"\x{FF76}")), "NO");

@


1.1.1.1
log
@Perl 5.12.2 from CPAN
@
text
@@


1.1.1.2
log
@import perl 5.16.3 from CPAN - worked on by Andrew Fresh and myself
@
text
@d19 1
d22 1
a22 11
BEGIN { $| = 1; print "1..37\n"; }
my $count = 0;
sub ok ($;$) {
    my $p = my $r = shift;
    if (@@_) {
	my $x = shift;
	$p = !defined $x ? !defined $r : !defined $r ? 0 : $r eq $x;
    }
    print $p ? "ok" : "not ok", ' ', ++$count, "\n";
}

d24 1
a24 2

ok(1);
@


1.1.1.3
log
@Import perl-5.20.1
@
text
@d3 3
a5 6
    unless ('A' eq pack('U', 0x41)) {
	print "1..0 # Unicode::Normalize cannot pack a Unicode code point\n";
	exit 0;
    }
    unless (0x41 == unpack('U', 'A')) {
	print "1..0 # Unicode::Normalize cannot get a Unicode code point\n";
@


