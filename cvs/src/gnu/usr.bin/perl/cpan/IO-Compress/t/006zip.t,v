head	1.1;
branch	1.1.1;
access;
symbols
	OPENBSD_6_2:1.1.1.4.0.8
	OPENBSD_6_2_BASE:1.1.1.4
	PERL_5_24_2:1.1.1.4
	OPENBSD_6_1:1.1.1.4.0.12
	OPENBSD_6_1_BASE:1.1.1.4
	OPENBSD_6_0:1.1.1.4.0.10
	OPENBSD_6_0_BASE:1.1.1.4
	OPENBSD_5_9:1.1.1.4.0.4
	OPENBSD_5_9_BASE:1.1.1.4
	OPENBSD_5_8:1.1.1.4.0.6
	OPENBSD_5_8_BASE:1.1.1.4
	PERL_5_20_2:1.1.1.4
	OPENBSD_5_7:1.1.1.4.0.2
	OPENBSD_5_7_BASE:1.1.1.4
	PERL_5_20_1:1.1.1.4
	OPENBSD_5_6:1.1.1.3.0.4
	OPENBSD_5_6_BASE:1.1.1.3
	PERL_5_18_2:1.1.1.3
	PERL:1.1.1
	OPENBSD_5_5:1.1.1.2.0.6
	OPENBSD_5_5_BASE:1.1.1.2
	OPENBSD_5_4:1.1.1.2.0.2
	OPENBSD_5_4_BASE:1.1.1.2
	PERL_5_16_3:1.1.1.2
	OPENBSD_5_3:1.1.1.1.0.10
	OPENBSD_5_3_BASE:1.1.1.1
	OPENBSD_5_2:1.1.1.1.0.8
	OPENBSD_5_2_BASE:1.1.1.1
	OPENBSD_5_1_BASE:1.1.1.1
	OPENBSD_5_1:1.1.1.1.0.6
	OPENBSD_5_0:1.1.1.1.0.4
	OPENBSD_5_0_BASE:1.1.1.1
	OPENBSD_4_9:1.1.1.1.0.2
	OPENBSD_4_9_BASE:1.1.1.1
	PERL_5_12_2:1.1.1.1
	CPAN:1.1.1;
locks; strict;
comment	@# @;
expand	@o@;


1.1
date	2010.09.24.14.49.05;	author millert;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	2010.09.24.14.49.05;	author millert;	state Exp;
branches;
next	1.1.1.2;

1.1.1.2
date	2013.03.25.20.07.45;	author sthen;	state Exp;
branches;
next	1.1.1.3;

1.1.1.3
date	2014.03.24.14.58.53;	author afresh1;	state Exp;
branches;
next	1.1.1.4;

1.1.1.4
date	2014.11.17.20.52.48;	author afresh1;	state Exp;
branches;
next	;
commitid	B31cAbBIXiCqnL97;


desc
@@


1.1
log
@Initial revision
@
text
@BEGIN {
    if ($ENV{PERL_CORE}) {
	chdir 't' if -d 't';
	@@INC = ("../lib", "lib/compress");
    }
}

use lib qw(t t/compress);
use strict;
use warnings;
use bytes;

use Test::More ;
use CompTestUtils;

BEGIN {
    # use Test::NoWarnings, if available
    my $extra = 0 ;
    $extra = 1
        if eval { require Test::NoWarnings ;  import Test::NoWarnings; 1 };

    plan tests => 77 + $extra ;

    use_ok('IO::Compress::Zip', qw(:all)) ;
    use_ok('IO::Uncompress::Unzip', qw(unzip $UnzipError)) ;

    eval { 
           require IO::Compress::Bzip2 ; 
           import  IO::Compress::Bzip2 2.010 ; 
           require IO::Uncompress::Bunzip2 ; 
           import  IO::Uncompress::Bunzip2 2.010 ; 
         } ;

}


sub getContent
{
    my $filename = shift;

    my $u = new IO::Uncompress::Unzip $filename, Append => 1
        or die "Cannot open $filename: $UnzipError";

    isa_ok $u, "IO::Uncompress::Unzip";

    my @@content;
    my $status ;

    for ($status = 1; ! $u->eof(); $status = $u->nextStream())
    {
        my $name = $u->getHeaderInfo()->{Name};
        #warn "Processing member $name\n" ;

        my $buff = '';
        1 while ($status = $u->read($buff)) ;

        push @@content, $buff;
        last unless $status == 0;
    }

    die "Error processing $filename: $status $!\n"
        if $status < 0 ;    

    return @@content;
}


{
    title "Create a simple zip - All Deflate";

    my $lex = new LexFile my $file1;

    my @@content = (
                   'hello',
                   '',
                   'goodbye ',
                   );

    my $zip = new IO::Compress::Zip $file1,
                    Name => "one", Method => ZIP_CM_DEFLATE, Stream => 0;
    isa_ok $zip, "IO::Compress::Zip";

    is $zip->write($content[0]), length($content[0]), "write"; 
    $zip->newStream(Name=> "two", Method => ZIP_CM_DEFLATE);
    is $zip->write($content[1]), length($content[1]), "write"; 
    $zip->newStream(Name=> "three", Method => ZIP_CM_DEFLATE);
    is $zip->write($content[2]), length($content[2]), "write"; 
    ok $zip->close(), "closed";                    

    my @@got = getContent($file1);

    is $got[0], $content[0], "Got 1st entry";
    is $got[1], $content[1], "Got 2nd entry";
    is $got[2], $content[2], "Got 3nd entry";
}

SKIP:
{
    title "Create a simple zip - All Bzip2";

    skip "IO::Compress::Bzip2 not available", 9
        unless defined $IO::Compress::Bzip2::VERSION;

    my $lex = new LexFile my $file1;

    my @@content = (
                   'hello',
                   '',
                   'goodbye ',
                   );

    my $zip = new IO::Compress::Zip $file1,
                    Name => "one", Method => ZIP_CM_BZIP2, Stream => 0;
    isa_ok $zip, "IO::Compress::Zip";

    is $zip->write($content[0]), length($content[0]), "write"; 
    $zip->newStream(Name=> "two", Method => ZIP_CM_BZIP2);
    is $zip->write($content[1]), length($content[1]), "write"; 
    $zip->newStream(Name=> "three", Method => ZIP_CM_BZIP2);
    is $zip->write($content[2]), length($content[2]), "write"; 
    ok $zip->close(), "closed";                    

    my @@got = getContent($file1);

    is $got[0], $content[0], "Got 1st entry";
    is $got[1], $content[1], "Got 2nd entry";
    is $got[2], $content[2], "Got 3nd entry";
}

SKIP:
{
    title "Create a simple zip - Deflate + Bzip2";

    skip "IO::Compress::Bzip2 not available", 9
        unless $IO::Compress::Bzip2::VERSION;

    my $lex = new LexFile my $file1;

    my @@content = (
                   'hello',
                   'and',
                   'goodbye ',
                   );

    my $zip = new IO::Compress::Zip $file1,
                    Name => "one", Method => ZIP_CM_DEFLATE, Stream => 0;
    isa_ok $zip, "IO::Compress::Zip";

    is $zip->write($content[0]), length($content[0]), "write"; 
    $zip->newStream(Name=> "two", Method => ZIP_CM_BZIP2);
    is $zip->write($content[1]), length($content[1]), "write"; 
    $zip->newStream(Name=> "three", Method => ZIP_CM_DEFLATE);
    is $zip->write($content[2]), length($content[2]), "write"; 
    ok $zip->close(), "closed";                    

    my @@got = getContent($file1);

    is $got[0], $content[0], "Got 1st entry";
    is $got[1], $content[1], "Got 2nd entry";
    is $got[2], $content[2], "Got 3nd entry";
}

{
    title "Create a simple zip - All STORE";

    my $lex = new LexFile my $file1;

    my @@content = (
                   'hello',
                   '',
                   'goodbye ',
                   );

    my $zip = new IO::Compress::Zip $file1,
                    Name => "one", Method => ZIP_CM_STORE, Stream => 0;
    isa_ok $zip, "IO::Compress::Zip";

    is $zip->write($content[0]), length($content[0]), "write"; 
    $zip->newStream(Name=> "two", Method => ZIP_CM_STORE);
    is $zip->write($content[1]), length($content[1]), "write"; 
    $zip->newStream(Name=> "three", Method => ZIP_CM_STORE);
    is $zip->write($content[2]), length($content[2]), "write"; 
    ok $zip->close(), "closed";                    

    my @@got = getContent($file1);

    is $got[0], $content[0], "Got 1st entry";
    is $got[1], $content[1], "Got 2nd entry";
    is $got[2], $content[2], "Got 3nd entry";
}

{
    title "Create a simple zip - Deflate + STORE";

    my $lex = new LexFile my $file1;

    my @@content = qw(
                   hello 
                       and
                   goodbye 
                   );

    my $zip = new IO::Compress::Zip $file1,
                    Name => "one", Method => ZIP_CM_DEFLATE, Stream => 0;
    isa_ok $zip, "IO::Compress::Zip";

    is $zip->write($content[0]), length($content[0]), "write"; 
    $zip->newStream(Name=> "two", Method => ZIP_CM_STORE);
    is $zip->write($content[1]), length($content[1]), "write"; 
    $zip->newStream(Name=> "three", Method => ZIP_CM_DEFLATE);
    is $zip->write($content[2]), length($content[2]), "write"; 
    ok $zip->close(), "closed";                    

    my @@got = getContent($file1);

    is $got[0], $content[0], "Got 1st entry";
    is $got[1], $content[1], "Got 2nd entry";
    is $got[2], $content[2], "Got 3nd entry";
}

{
    title "Create a simple zip - Deflate + zero length STORE";

    my $lex = new LexFile my $file1;

    my @@content = (
                   'hello ',
                   '',
                   'goodbye ',
                   );

    my $zip = new IO::Compress::Zip $file1,
                    Name => "one", Method => ZIP_CM_DEFLATE, Stream => 0;
    isa_ok $zip, "IO::Compress::Zip";

    is $zip->write($content[0]), length($content[0]), "write"; 
    $zip->newStream(Name=> "two", Method => ZIP_CM_STORE);
    is $zip->write($content[1]), length($content[1]), "write"; 
    $zip->newStream(Name=> "three", Method => ZIP_CM_DEFLATE);
    is $zip->write($content[2]), length($content[2]), "write"; 
    ok $zip->close(), "closed";                    

    my @@got = getContent($file1);

    is $got[0], $content[0], "Got 1st entry";
    ok $got[1] eq $content[1], "Got 2nd entry";
    is $got[2], $content[2], "Got 3nd entry";
}


SKIP:
for my $method (ZIP_CM_DEFLATE, ZIP_CM_STORE, ZIP_CM_BZIP2)
{
    title "Read a line from zip, Method $method";

    skip "IO::Compress::Bzip2 not available", 14
        unless defined $IO::Compress::Bzip2::VERSION;

    my $content = "a single line\n";
    my $zip ;

    my $status = zip \$content => \$zip, 
                    Method => $method, 
                    Stream => 0, 
                    Name => "123";
    is $status, 1, "  Created a zip file";

    my $u = new IO::Uncompress::Unzip \$zip;
    isa_ok $u, "IO::Uncompress::Unzip";

    is $u->getline, $content, "  Read first line ok";
    ok ! $u->getline, "  Second line doesn't exist";


}
@


1.1.1.1
log
@Perl 5.12.2 from CPAN
@
text
@@


1.1.1.2
log
@import perl 5.16.3 from CPAN - worked on by Andrew Fresh and myself
@
text
@d22 1
a22 1
    plan tests => 95 + $extra ;
d41 1
a41 1
    my $u = new IO::Uncompress::Unzip $filename, Append => 1, @@_
d49 1
a49 1
    for ($status = 1; $status > 0 ; $status = $u->nextStream())
a249 47
{
    title "RT #72548";

    my $lex = new LexFile my $file1;

    my $blockSize = 1024 * 16;

    my @@content = (
                   'hello',
                   "x" x ($blockSize + 1)
                   );

    my $zip = new IO::Compress::Zip $file1,
                    Name => "one", Method => ZIP_CM_STORE, Stream => 0;
    isa_ok $zip, "IO::Compress::Zip";

    is $zip->write($content[0]), length($content[0]), "write"; 

    $zip->newStream(Name=> "two", Method => ZIP_CM_STORE);
    is $zip->write($content[1]), length($content[1]), "write"; 

    ok $zip->close(), "closed";                    

    my @@got = getContent($file1, BlockSize => $blockSize);

    is $got[0], $content[0], "Got 1st entry";
    is $got[1], $content[1], "Got 2nd entry";
}

{
    title "Zip file with a single zero-length file";

    my $lex = new LexFile my $file1;


    my $zip = new IO::Compress::Zip $file1,
                    Name => "one", Method => ZIP_CM_STORE, Stream => 0;
    isa_ok $zip, "IO::Compress::Zip";

    $zip->newStream(Name=> "two", Method => ZIP_CM_STORE);
    ok $zip->close(), "closed";                    

    my @@got = getContent($file1);

    is $got[0], "", "no content";
    is $got[1], "", "no content";
}
a274 10
}

{
    title "isMethodAvailable" ;
    
    ok IO::Compress::Zip::isMethodAvailable(ZIP_CM_STORE), "ZIP_CM_STORE available";
    ok IO::Compress::Zip::isMethodAvailable(ZIP_CM_DEFLATE), "ZIP_CM_DEFLATE available";
    #ok IO::Compress::Zip::isMethodAvailable(ZIP_CM_STORE), "ZIP_CM_STORE available";
    
    ok ! IO::Compress::Zip::isMethodAvailable(999), "999 not available";    
@


1.1.1.3
log
@Import perl-5.18.2

OK espie@@ sthen@@ deraadt@@
@
text
@d22 1
a22 1
    plan tests => 101 + $extra ;
a331 28
}

{
    title "Memember & Comment 0";

    my $lex = new LexFile my $file1;

    my $content = 'hello' ;
                 

    my $zip = new IO::Compress::Zip $file1,
                    Name => "0", Comment => "0" ;
    isa_ok $zip, "IO::Compress::Zip";

    is $zip->write($content), length($content), "write"; 

    ok $zip->close(), "closed";                    



    my $u = new IO::Uncompress::Unzip $file1, Append => 1, @@_
        or die "Cannot open $file1: $UnzipError";

    isa_ok $u, "IO::Uncompress::Unzip";

    my $name = $u->getHeaderInfo()->{Name};
    
    is $u->getHeaderInfo()->{Name}, "0", "Name is '0'";
@


1.1.1.4
log
@Import perl-5.20.1
@
text
@a67 1

d335 1
a335 1
    title "Member & Comment 0";
a360 1

@


