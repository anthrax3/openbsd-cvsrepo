head	1.2;
access;
symbols
	OPENBSD_6_0:1.1.1.1.0.16
	OPENBSD_6_0_BASE:1.1.1.1
	OPENBSD_5_9:1.1.1.1.0.10
	OPENBSD_5_9_BASE:1.1.1.1
	OPENBSD_5_8:1.1.1.1.0.12
	OPENBSD_5_8_BASE:1.1.1.1
	PERL_5_20_2:1.1.1.1
	OPENBSD_5_7:1.1.1.1.0.4
	OPENBSD_5_7_BASE:1.1.1.1
	PERL_5_20_1:1.1.1.1
	OPENBSD_5_6:1.1.1.1.0.8
	OPENBSD_5_6_BASE:1.1.1.1
	PERL_5_18_2:1.1.1.1
	PERL:1.1.1
	OPENBSD_5_5:1.1.1.1.0.6
	OPENBSD_5_5_BASE:1.1.1.1
	OPENBSD_5_4:1.1.1.1.0.2
	OPENBSD_5_4_BASE:1.1.1.1
	PERL_5_16_3:1.1.1.1
	CPAN:1.1.1;
locks; strict;
comment	@# @;
expand	@o@;


1.2
date	2017.02.05.00.32.00;	author afresh1;	state Exp;
branches;
next	1.1;
commitid	cxJ08BvJA9Pt2PTM;

1.1
date	2013.03.25.20.07.45;	author sthen;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	2013.03.25.20.07.45;	author sthen;	state Exp;
branches;
next	;


desc
@@


1.2
log
@Fix merge issues, remove excess files - match perl-5.24.1 dist
@
text
@BEGIN {
    if ($ENV{PERL_CORE}) {
	chdir 't' if -d 't';
	@@INC = ("../lib", "lib/compress");
    }
}

use lib qw(t t/compress);
use strict;
use warnings;
use bytes;

use Test::More ;
use CompTestUtils;

BEGIN {
    plan(skip_all => "oneshot needs Perl 5.005 or better - you have Perl $]" )
        if $] < 5.005 ;

    plan skip_all => "Lengthy Tests Disabled\n" .
                     "set COMPRESS_ZLIB_RUN_ALL or COMPRESS_ZLIB_RUN_MOST to run this test suite"
        unless defined $ENV{COMPRESS_ZLIB_RUN_ALL} or defined $ENV{COMPRESS_ZLIB_RUN_MOST};

    plan(skip_all => "IO::Compress::Bzip2 not available" )
        unless eval { require IO::Compress::Bzip2; 
                      require IO::Uncompress::Bunzip2; 
                      1
                    } ;

    # use Test::NoWarnings, if available
    my $extra = 0 ;
    $extra = 1
        if eval { require Test::NoWarnings ;  import Test::NoWarnings; 1 };

    plan tests => 1058 + $extra ;

    use_ok('IO::Compress::Zip', qw(:all)) ;
    use_ok('IO::Uncompress::Unzip', qw(unzip $UnzipError)) ;
}

my @@contents;
my $content = "x" x 1025;
$content .= "\x50" ;

push @@contents, $content ;

$content .= "y" x 321 ;
$content .= "\x50\x4b" ;
push @@contents, $content ;

$content .= "z" x 21 ;
$content .= "\x50\x4b\x07" . "a" x 73 ;
push @@contents, $content ;

$content .= "a" x 73 ;
$content .= "\x50\x4b\x07\x08" ;
push @@contents, $content ;

$content .= "b" x 102 ;
$content .= "\x50\x4b\x07\x08" . "\x50\x4b\x07\x08" ;
push @@contents, $content ;

$content .= "c" x 102 ;
push @@contents, $content ;


my $index = 0;
for $content (@@contents)
{
    ++ $index ;
    my $contentLen = length $content ;


    for my $stream (0, 1)
    {
        for my $zip64 (0, 1)
        {
            for my $blockSize (1 .. 7, $contentLen, $contentLen-1, $contentLen +1, 16*1024)
            {
                title "Index $index, Stream $stream, Zip64 $zip64, BlockSize $blockSize";

                my $crc = Compress::Raw::Zlib::crc32($content);
                $content .= "\x50\x4b\x07\x08" . pack("V", $crc) . "b" x 53 ;

                my $zipped ;

                ok zip(\$content => \$zipped , Method => ZIP_CM_STORE,
                                               Zip64  => $zip64,
                                               Stream => $stream), " zip ok" 
                    or diag $ZipError ;

                my $got ;
                ok unzip(\$zipped => \$got, BlockSize => $blockSize), "  unzip ok"
                    or diag $UnzipError ;

                is $got, $content, "  content ok";

            }
        }
    }
}

@


1.1
log
@Initial revision
@
text
@d20 4
@


1.1.1.1
log
@import perl 5.16.3 from CPAN - worked on by Andrew Fresh and myself
@
text
@@
