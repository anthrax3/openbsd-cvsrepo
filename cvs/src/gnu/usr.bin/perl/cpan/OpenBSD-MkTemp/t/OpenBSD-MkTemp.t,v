head	1.6;
access;
symbols
	OPENBSD_6_2:1.6.0.8
	OPENBSD_6_2_BASE:1.6
	OPENBSD_6_1:1.6.0.6
	OPENBSD_6_1_BASE:1.6
	OPENBSD_6_0:1.6.0.4
	OPENBSD_6_0_BASE:1.6
	OPENBSD_5_9:1.4.0.10
	OPENBSD_5_9_BASE:1.4
	OPENBSD_5_8:1.4.0.12
	OPENBSD_5_8_BASE:1.4
	OPENBSD_5_7:1.4.0.4
	OPENBSD_5_7_BASE:1.4
	OPENBSD_5_6:1.4.0.8
	OPENBSD_5_6_BASE:1.4
	OPENBSD_5_5:1.4.0.6
	OPENBSD_5_5_BASE:1.4
	OPENBSD_5_4:1.4.0.2
	OPENBSD_5_4_BASE:1.4
	OPENBSD_5_3:1.3.0.4
	OPENBSD_5_3_BASE:1.3
	OPENBSD_5_2:1.3.0.2
	OPENBSD_5_2_BASE:1.3
	mktemp-0_2:1.1.1.1
	guenther:1.1.1;
locks; strict;
comment	@# @;


1.6
date	2016.07.03.01.07.57;	author afresh1;	state Exp;
branches;
next	1.5;
commitid	GzHqjSTnBjdF7Wcw;

1.5
date	2016.05.08.03.53.28;	author afresh1;	state Exp;
branches;
next	1.4;
commitid	dWkMNd99NQ5bTRKf;

1.4
date	2013.03.25.20.40.51;	author sthen;	state Exp;
branches;
next	1.3;

1.3
date	2012.07.10.23.17.43;	author guenther;	state Exp;
branches;
next	1.2;

1.2
date	2012.06.10.21.27.41;	author guenther;	state Exp;
branches;
next	1.1;

1.1
date	2012.04.13.14.11.22;	author espie;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	2012.04.13.14.11.22;	author espie;	state Exp;
branches;
next	;


desc
@@


1.6
log
@Update to perl 5.20.3

OK bluhm@@
@
text
@# Before `make install' is performed this script should be runnable with
# `make test'. After `make install' it should work as `perl OpenBSD-MkTemp.t'

#########################

# change 'tests => 1' to 'tests => last_test_to_print';

use strict;
use warnings;

use Test::More;
use Errno;
use FileHandle;
use Scalar::Util qw( openhandle );
BEGIN { use_ok('OpenBSD::MkTemp') };

#########################

my $tmpdir = $ENV{TMPDIR} || "/tmp";
my $top_base = "$tmpdir/test.";

my $dir = OpenBSD::MkTemp::mkdtemp($top_base . "X" x 10);

if (! $dir) {
    BAIL_OUT("unable to create test directory: $!\n(is $tmpdir unwritable?)");
}

# clean things up afterwards
eval 'END { my $ret = $?; system("rm", "-rf", $dir); $? = $ret }';

like($dir, qr/^\Q$top_base\E[a-zA-Z0-9]{10}$/, "mkdtemp output format");
ok(-d $dir, "mkdtemp created directory");
my $mode = (stat(_))[2];
cmp_ok($mode & 07777, '==', 0700, "mkdtemp directory mode");


my $base = "$dir/f.";
my $template = $base . "X" x 10;

my($fh1, $file1) = mkstemp($template);

like($file1, qr/^\Q$base\E[a-zA-Z0-9]{10}$/, "mkstemp output format");
ok(-f $file1, "mkstemp created filed");
my @@stat = stat(_);
cmp_ok($stat[2] & 07777, '==', 0600, "mkstemp file mode");

my @@fstat = stat($fh1);
is_deeply(\@@stat, \@@fstat, "file name matches the handle");


my($fh2, $file2) = OpenBSD::MkTemp::mkstemps($template, ".foo");

like($file2, qr/^\Q$base\E[a-zA-Z0-9]{10}\.foo$/, "mkstemps output format");
ok(-f $file2, "mkstemps created filed");
@@stat = stat(_);
cmp_ok($stat[2] & 07777, '==', 0600, "mkstemps file mode");

@@fstat = stat($fh2);
is_deeply(\@@stat, \@@fstat, "file name matches the handle");


my $fileno = fileno($fh2);
undef $fh2;
open(F, ">$file2")		|| die "$0: unable to open $file2: $!";
cmp_ok(fileno(F), '==', $fileno, "mkstemp file handle ref counting");

subtest "mkstemp in scalar context" => sub {
    plan tests => 2;
    ok my $fh = OpenBSD::MkTemp::mkstemp($template);
    is openhandle($fh), $fh, "mkstemp returns a filehandle in scalar mode";
};

subtest "mkstemps in scalar context" => sub {
    plan tests => 2;
    ok my $fh = OpenBSD::MkTemp::mkstemps($template, ".foo");
    is openhandle($fh), $fh, "mkstemps returns a filehandle in scalar mode";
};

#
# How about some failures?
#

my $d2 = OpenBSD::MkTemp::mkdtemp($file1 . "/fXXXXXXXXXX");
my $err = $!;
subtest "mkdtemp failed on bad prefix" => sub {
    plan tests => 2;
    ok(! defined($d2),				"no directory name");
    cmp_ok($err, '==', Errno::ENOTDIR,		"right errno");
};

if ($> != 0) {
    $d2 = OpenBSD::MkTemp::mkdtemp("/fXXXXXXXXXX");
    $err = $!;
    subtest "mkdtemp failed on no access" => sub {
	plan tests => 2;
	ok(! defined($d2),			"no directory name");
	cmp_ok($err, '==', Errno::EACCES,	"right errno");
    };
}

my($fh3, $file3) = mkstemp($file1 . "/fXXXXXXXXXX");
$err = $!;
subtest "mkstemp failed on bad prefix" => sub {
    plan tests => 3;
    ok(! defined($fh3),				"no filehandle");
    ok(! defined($file3),			"no filename");
    cmp_ok($err, '==', Errno::ENOTDIR,		"right errno");
};

if ($> != 0) {
    ($fh3, $file3) = mkstemp("/fXXXXXXXXXX");
    $err = $!;
    subtest "mkstemp failed on no access" => sub {
	plan tests => 3;
	ok(! defined($fh3),			"no filehandle");
	ok(! defined($file3),			"no filename");
	cmp_ok($err, '==', Errno::EACCES,	"right errno");
    };
}

eval { OpenBSD::MkTemp::mkstemps_real("foo", 0) };
like($@@, qr/read-only value/, "unwritable template");

eval { my $f = "foo"; OpenBSD::MkTemp::mkstemps_real($f, -3) };
like($@@, qr/invalid suffix/, "invalid suffix");

done_testing();

@


1.5
log
@Correct return value of OpenBSD::MkTemp in scalar context

From Francesco Toscan < f.toscan AT hotmail DOT it >

ok guenther@@
@
text
@d13 1
@


1.4
log
@merge/resolve conflicts
(some more to do after this one)
@
text
@d13 1
d66 11
@


1.3
log
@In a scalar context, mkstemp should return just the file handle

"sure" espie@@
@
text
@d41 1
a41 1
ok(-f $file1, "mkstemp created file");
a48 7
# Verify scalar return case
my $fh = mkstemp($template);
ok(-f $fh, "mkstemp created file");
my @@stat = stat(_);
cmp_ok($stat[2] & 07777, '==', 0600, "mkstemp file mode");


d52 1
a52 1
ok(-f $file2, "mkstemps created file");
d70 15
a84 8
sub test_failure
{
    my($description, $func, $template, $expected_errno) = @@_;
    my(@@results, $err, $msg);

    eval {
	no strict 'refs';
	@@results = &{"OpenBSD::MkTemp::$func"}($template)
d86 15
a100 2
    $err = $!; $msg = $@@;
    subtest $description => sub {
d102 3
a104 4
	ok(@@results == 0,				"empty return");
	cmp_ok($err, '==', $expected_errno,		"correct errno");
	like($msg, qr/Unable to \Q$func\E\(\Q$template\E\): /,
							"correct die message");
d108 5
a112 9
test_failure("mkdtemp failed on bad prefix", "mkdtemp",
	$file1 . "/fXXXXXXXXXX", Errno::ENOTDIR);
test_failure("mkdtemp failed on no access", "mkdtemp",
	"/fXXXXXXXXXX", Errno::EACCES)				if $> != 0;

test_failure("mkstemp failed on bad prefix", "mkstemp",
	$file1 . "/fXXXXXXXXXX", Errno::ENOTDIR);
test_failure("mkstemp failed on no access", "mkstemp",
	"/fXXXXXXXXXX", Errno::EACCES)				if $> != 0;
@


1.2
log
@Change the Perl->C wrappers for mkdtemp and mkstemps to behave more like
the File::Temp routines and call croak() (the C version of 'die') instead
of returning an empty list.  This lets pkg_add give good error messages
when your $PKG_TMPDIR is mounted read-only.

ok espie@@
@
text
@d41 1
a41 1
ok(-f $file1, "mkstemp created filed");
d49 7
d59 1
a59 1
ok(-f $file2, "mkstemps created filed");
@


1.1
log
@Initial revision
@
text
@d70 4
a73 7
my $d2 = OpenBSD::MkTemp::mkdtemp($file1 . "/fXXXXXXXXXX");
my $err = $!;
subtest "mkdtemp failed on bad prefix" => sub {
    plan tests => 2;
    ok(! defined($d2),				"no directory name");
    cmp_ok($err, '==', Errno::ENOTDIR,		"right errno");
};
d75 3
a77 7
if ($> != 0) {
    $d2 = OpenBSD::MkTemp::mkdtemp("/fXXXXXXXXXX");
    $err = $!;
    subtest "mkdtemp failed on no access" => sub {
	plan tests => 2;
	ok(! defined($d2),			"no directory name");
	cmp_ok($err, '==', Errno::EACCES,	"right errno");
d79 2
a80 15
}

my($fh3, $file3) = mkstemp($file1 . "/fXXXXXXXXXX");
$err = $!;
subtest "mkstemp failed on bad prefix" => sub {
    plan tests => 3;
    ok(! defined($fh3),				"no filehandle");
    ok(! defined($file3),			"no filename");
    cmp_ok($err, '==', Errno::ENOTDIR,		"right errno");
};

if ($> != 0) {
    ($fh3, $file3) = mkstemp("/fXXXXXXXXXX");
    $err = $!;
    subtest "mkstemp failed on no access" => sub {
d82 4
a85 3
	ok(! defined($fh3),			"no filehandle");
	ok(! defined($file3),			"no filename");
	cmp_ok($err, '==', Errno::EACCES,	"right errno");
d89 4
a92 2
eval { OpenBSD::MkTemp::mkstemps_real("foo", 0) };
like($@@, qr/read-only value/, "unwritable template");
d94 4
a97 2
eval { my $f = "foo"; OpenBSD::MkTemp::mkstemps_real($f, -3) };
like($@@, qr/invalid suffix/, "invalid suffix");
@


1.1.1.1
log
@extra .xs glue to use mkstemp and mkdtemp directly
written by guenther@@ about a year ago.
discussed with him and millert@@
@
text
@@
