head	1.5;
access;
symbols
	OPENBSD_6_2_BASE:1.5
	OPENBSD_6_1:1.5.0.6
	OPENBSD_6_1_BASE:1.5
	OPENBSD_6_0:1.5.0.4
	OPENBSD_6_0_BASE:1.5
	OPENBSD_5_9:1.4.0.10
	OPENBSD_5_9_BASE:1.4
	OPENBSD_5_8:1.4.0.12
	OPENBSD_5_8_BASE:1.4
	OPENBSD_5_7:1.4.0.4
	OPENBSD_5_7_BASE:1.4
	OPENBSD_5_6:1.4.0.8
	OPENBSD_5_6_BASE:1.4
	OPENBSD_5_5:1.4.0.6
	OPENBSD_5_5_BASE:1.4
	OPENBSD_5_4:1.4.0.2
	OPENBSD_5_4_BASE:1.4
	OPENBSD_5_3:1.3.0.4
	OPENBSD_5_3_BASE:1.3
	OPENBSD_5_2:1.3.0.2
	OPENBSD_5_2_BASE:1.3
	mktemp-0_2:1.1.1.1
	guenther:1.1.1;
locks; strict;
comment	@# @;


1.5
date	2016.05.08.03.53.28;	author afresh1;	state Exp;
branches;
next	1.4;
commitid	dWkMNd99NQ5bTRKf;

1.4
date	2013.03.25.20.40.51;	author sthen;	state Exp;
branches;
next	1.3;

1.3
date	2012.07.10.23.17.43;	author guenther;	state Exp;
branches;
next	1.2;

1.2
date	2012.06.10.21.27.41;	author guenther;	state Exp;
branches;
next	1.1;

1.1
date	2012.04.13.14.11.22;	author espie;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	2012.04.13.14.11.22;	author espie;	state Exp;
branches;
next	;


desc
@@


1.5
log
@Correct return value of OpenBSD::MkTemp in scalar context

From Francesco Toscan < f.toscan AT hotmail DOT it >

ok guenther@@
@
text
@package OpenBSD::MkTemp;

use 5.012002;
use strict;
use warnings;

use Exporter 'import';

our @@EXPORT_OK = qw( mkstemps mkstemp mkdtemp );
our @@EXPORT = qw( mkstemp mkdtemp );
our $VERSION = '0.02';

require XSLoader;
XSLoader::load('OpenBSD::MkTemp', $VERSION);

sub mkstemp($)
{
	my $template = shift;
	my $fh = mkstemps_real($template, 0) || return;
	return wantarray() ? ($fh, $template) : $fh;
}

sub mkstemps($$)
{
	my($template, $suffix) = @@_;
	$template .= $suffix;
	my $fh = mkstemps_real($template, length($suffix)) || return;
	return wantarray() ? ($fh, $template) : $fh;
}


1;
__END__
=head1 NAME

OpenBSD::MkTemp - Perl access to mkstemps() and mkdtemp()

=head1 SYNOPSIS

  use OpenBSD::MkTemp;

  my($fh, $file) = mkstemp("/tmp/fooXXXXXXXXXX");

  use OpenBSD::MkTemp qw(mkdtemp mkstemps);

  my $dir_name = mkdtemp("/tmp/dirXXXXXXXXXX");
  my ($fh, $file) = mkstemps("/tmp/fileXXXXXXXXXX", ".tmp");


=head1 DESCRIPTION

This module provides routines for creating files and directories with
guaranteed unique names, using the C mkstemps() and mkdtemp() routines.

mkstemp() and mkstemps() must be called with a template argument
that is writable, so that they can update it with the path of the
generated file.
They return normal perl IO handles.

mkdtemp() simply takes the template and returns the path of the
newly created directory.

=head2 EXPORT

  $fh = mkstemp($template)

=head2 Exportable functions

  $fh = mkstemps($template, $suffix_len)
  $dir = mkdtemp($template);

=head1 SEE ALSO

mkstemp(3)

=head1 AUTHOR

Philip Guenther, E<lt>guenther@@openbsd.orgE<gt>

=head1 COPYRIGHT AND LICENSE

Copyright (C) 2010 by Philip Guenther

This library is free software; you can redistribute it and/or modify
it under the same terms as Perl itself, either Perl version 5.12.2 or,
at your option, any later version of Perl 5 you may have available.


=cut
@


1.4
log
@merge/resolve conflicts
(some more to do after this one)
@
text
@d19 2
a20 2
	my $fh = mkstemps_real($template, 0);
	return $fh && ($fh, $template)
d27 2
a28 2
	my $fh = mkstemps_real($template, length($suffix));
	return $fh && ($fh, $template)
@


1.3
log
@In a scalar context, mkstemp should return just the file handle

"sure" espie@@
@
text
@d11 1
a11 1
our $VERSION = '0.03';
d18 11
a28 1
	return mkstemps($_[0]);
a33 1

d52 2
a53 22
This module provides routines for creating files and directories
with guaranteed unique names, using the C C<mkstemps()> and
C<mkdtemp()> routines.
On the perl-side, they are intended to behave the same as the
functions provided by L<File::Temp>.

For all these functions, the template provided follows the rules
of the system's C<mkstemps()> and C<mkdtemp()> functions.
The template may be any file name with some number of Xs appended
to it, for example C</tmp/temp.XXXXXXXX>.
The trailing Xs are replaced with a unique digit and letter combination.

C<mkstemp()> takes a template and creates a new, unique file.
In a list context, it returns a two items: a normal perl IO handle
open to the new file for both read and write, and the generated
filename.
In a scalar context it just returns the IO handle.

C<mkstemps()> takes the template and a suffix to append to the
filename.  For example, the call C<mkstemps("/tmp/temp.XXXXXXXXXX",
".c")> might create the file C</tmp/temp.SO4csi32GM.c>.
It returns the filename and/or filename just like C<mkstemp()>
d55 6
a60 1
C<mkdtemp()> simply takes the template and returns the path of the
a62 5
Note that the files and directories created by these functions are
I<not> automatically removed.

On failure, all of these functions call die.

d65 1
a65 1
  ($fh, $filename) = mkstemp($template)
d69 1
a69 1
  ($fh, $filename) = mkstemps($template, $suffix)
d82 1
a82 1
Copyright (C) 2010,2012 by Philip Guenther
@


1.2
log
@Change the Perl->C wrappers for mkdtemp and mkstemps to behave more like
the File::Temp routines and call croak() (the C version of 'die') instead
of returning an empty list.  This lets pkg_add give good error messages
when your $PKG_TMPDIR is mounted read-only.

ok espie@@
@
text
@d24 1
d43 25
a67 2
This module provides routines for creating files and directories with
guaranteed unique names, using the C mkstemps() and mkdtemp() routines.
d69 2
a70 4
mkstemp() and mkstemps() must be called with a template argument
that is writable, so that they can update it with the path of the
generated file.
They return normal perl IO handles.
d72 1
a72 2
mkdtemp() simply takes the template and returns the path of the
newly created directory.
d76 1
a76 1
  $fh = mkstemp($template)
d80 1
a80 1
  $fh = mkstemps($template, $suffix_len)
@


1.1
log
@Initial revision
@
text
@d11 1
a11 1
our $VERSION = '0.02';
d18 1
a18 11
	my $template = shift;
	my $fh = mkstemps_real($template, 0);
	return $fh && ($fh, $template)
}

sub mkstemps($$)
{
	my($template, $suffix) = @@_;
	$template .= $suffix;
	my $fh = mkstemps_real($template, length($suffix));
	return $fh && ($fh, $template)
d72 1
a72 1
Copyright (C) 2010 by Philip Guenther
@


1.1.1.1
log
@extra .xs glue to use mkstemp and mkdtemp directly
written by guenther@@ about a year ago.
discussed with him and millert@@
@
text
@@
