head	1.2;
access;
symbols
	OPENBSD_6_2:1.2.0.30
	OPENBSD_6_2_BASE:1.2
	PERL_5_24_2:1.1.1.2
	OPENBSD_6_1:1.2.0.28
	OPENBSD_6_1_BASE:1.2
	OPENBSD_6_0:1.2.0.26
	OPENBSD_6_0_BASE:1.2
	OPENBSD_5_9:1.2.0.20
	OPENBSD_5_9_BASE:1.2
	OPENBSD_5_8:1.2.0.22
	OPENBSD_5_8_BASE:1.2
	PERL_5_20_2:1.1.1.2
	OPENBSD_5_7:1.2.0.14
	OPENBSD_5_7_BASE:1.2
	PERL_5_20_1:1.1.1.2
	OPENBSD_5_6:1.2.0.18
	OPENBSD_5_6_BASE:1.2
	PERL_5_18_2:1.1.1.2
	PERL:1.1.1
	OPENBSD_5_5:1.2.0.16
	OPENBSD_5_5_BASE:1.2
	OPENBSD_5_4:1.2.0.12
	OPENBSD_5_4_BASE:1.2
	PERL_5_16_3:1.1.1.2
	OPENBSD_5_3:1.2.0.10
	OPENBSD_5_3_BASE:1.2
	OPENBSD_5_2:1.2.0.8
	OPENBSD_5_2_BASE:1.2
	OPENBSD_5_1_BASE:1.2
	OPENBSD_5_1:1.2.0.6
	OPENBSD_5_0:1.2.0.4
	OPENBSD_5_0_BASE:1.2
	OPENBSD_4_9:1.2.0.2
	OPENBSD_4_9_BASE:1.2
	PERL_5_12_2:1.1.1.1
	CPAN:1.1.1;
locks; strict;
comment	@# @;
expand	@o@;


1.2
date	2011.01.07.12.19.31;	author jasper;	state Exp;
branches;
next	1.1;

1.1
date	2010.09.24.14.49.05;	author millert;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	2010.09.24.14.49.05;	author millert;	state Exp;
branches;
next	1.1.1.2;

1.1.1.2
date	2013.03.25.20.08.17;	author sthen;	state Exp;
branches;
next	;


desc
@@


1.2
log
@- Update Test::Simple to 0.96

from Abel Abraham Camarillo Ojeda
ok espie@@ millert@@
@
text
@#!perl -w

BEGIN {
    if( $ENV{PERL_CORE} ) {
        chdir 't';
        @@INC = '../lib';
    }
    else {
        unshift @@INC, 't/lib';
    }
}

use strict;

use Test::Builder;
use Test::Builder::NoOutput;
use Test::Simple;

my $TB   = Test::Builder->new;
my $test = Test::Builder::NoOutput->create;
$test->plan( tests => 3 );

local $ENV{HARNESS_ACTIVE} = 0;

$test->ok(1, 'Foo');
$TB->is_eq($test->read(), <<END);
1..3
ok 1 - Foo
END

#line 30
$test->ok(0, 'Bar');
$TB->is_eq($test->read(), <<END);
not ok 2 - Bar
#   Failed test 'Bar'
#   at $0 line 30.
END

$test->ok(1, 'Yar');
$test->ok(1, 'Car');
$TB->is_eq($test->read(), <<END);
ok 3 - Yar
ok 4 - Car
END

#line 45
$test->ok(0, 'Sar');
$TB->is_eq($test->read(), <<END);
not ok 5 - Sar
#   Failed test 'Sar'
#   at $0 line 45.
END

$test->_ending();
$TB->is_eq($test->read(), <<END);
# Looks like you planned 3 tests but ran 5.
# Looks like you failed 2 tests of 5 run.
END

$TB->done_testing(5);
@


1.1
log
@Initial revision
@
text
@d8 3
d13 1
a13 2
# Can't use Test.pm, that's a 5.005 thing.
package My::Test;
d15 7
a21 5
# This has to be a require or else the END block below runs before
# Test::Builder's own and the ending diagnostics don't come out right.
require Test::Builder;
my $TB = Test::Builder->create;
$TB->plan(tests => 2);
a22 9

package main;

require Test::Simple;

chdir 't';
push @@INC, '../t/lib/';
require Test::Simple::Catch;
my($out, $err) = Test::Simple::Catch::caught();
d25 5
a29 1
Test::Simple->import(tests => 3);
d32 6
a37 5
ok(1, 'Foo');
ok(0, 'Bar');
ok(1, 'Yar');
ok(1, 'Car');
ok(0, 'Sar');
d39 3
a41 5
END {
    $TB->is_eq($$out, <<OUT);
1..3
ok 1 - Foo
not ok 2 - Bar
d44 5
d50 3
a52 1
OUT
d54 2
a55 5
    $TB->is_eq($$err, <<ERR);
#   Failed test 'Bar'
#   at $0 line 31.
#   Failed test 'Sar'
#   at $0 line 34.
d58 1
a58 1
ERR
d60 1
a60 2
    exit 0;
}
@


1.1.1.1
log
@Perl 5.12.2 from CPAN
@
text
@@


1.1.1.2
log
@import perl 5.16.3 from CPAN - worked on by Andrew Fresh and myself
@
text
@a7 3
    else {
        unshift @@INC, 't/lib';
    }
d10 2
a11 1
use strict;
d13 5
a17 7
use Test::Builder;
use Test::Builder::NoOutput;
use Test::Simple;

my $TB   = Test::Builder->new;
my $test = Test::Builder::NoOutput->create;
$test->plan( tests => 3 );
d19 9
d30 11
a40 2
$test->ok(1, 'Foo');
$TB->is_eq($test->read(), <<END);
a42 5
END

#line 30
$test->ok(0, 'Bar');
$TB->is_eq($test->read(), <<END);
a43 7
#   Failed test 'Bar'
#   at $0 line 30.
END

$test->ok(1, 'Yar');
$test->ok(1, 'Car');
$TB->is_eq($test->read(), <<END);
d46 2
a47 1
END
d49 3
a51 4
#line 45
$test->ok(0, 'Sar');
$TB->is_eq($test->read(), <<END);
not ok 5 - Sar
d53 1
a53 5
#   at $0 line 45.
END

$test->_ending();
$TB->is_eq($test->read(), <<END);
d56 1
a56 1
END
d58 2
a59 1
$TB->done_testing(5);
@

