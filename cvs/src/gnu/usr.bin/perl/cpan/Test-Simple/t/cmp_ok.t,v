head	1.1;
branch	1.1.1;
access;
symbols
	OPENBSD_6_2_BASE:1.1.1.2
	PERL_5_24_2:1.1.1.2
	OPENBSD_6_1:1.1.1.2.0.12
	OPENBSD_6_1_BASE:1.1.1.2
	OPENBSD_6_0:1.1.1.2.0.10
	OPENBSD_6_0_BASE:1.1.1.2
	OPENBSD_5_9:1.1.1.2.0.4
	OPENBSD_5_9_BASE:1.1.1.2
	OPENBSD_5_8:1.1.1.2.0.6
	OPENBSD_5_8_BASE:1.1.1.2
	PERL_5_20_2:1.1.1.2
	OPENBSD_5_7:1.1.1.2.0.2
	OPENBSD_5_7_BASE:1.1.1.2
	PERL_5_20_1:1.1.1.2
	OPENBSD_5_6:1.1.1.1.0.18
	OPENBSD_5_6_BASE:1.1.1.1
	PERL_5_18_2:1.1.1.1
	PERL:1.1.1
	OPENBSD_5_5:1.1.1.1.0.16
	OPENBSD_5_5_BASE:1.1.1.1
	OPENBSD_5_4:1.1.1.1.0.12
	OPENBSD_5_4_BASE:1.1.1.1
	PERL_5_16_3:1.1.1.1
	OPENBSD_5_3:1.1.1.1.0.10
	OPENBSD_5_3_BASE:1.1.1.1
	OPENBSD_5_2:1.1.1.1.0.8
	OPENBSD_5_2_BASE:1.1.1.1
	OPENBSD_5_1_BASE:1.1.1.1
	OPENBSD_5_1:1.1.1.1.0.6
	OPENBSD_5_0:1.1.1.1.0.4
	OPENBSD_5_0_BASE:1.1.1.1
	OPENBSD_4_9:1.1.1.1.0.2
	OPENBSD_4_9_BASE:1.1.1.1
	PERL_5_12_2:1.1.1.1
	CPAN:1.1.1;
locks; strict;
comment	@# @;
expand	@o@;


1.1
date	2010.09.24.14.49.05;	author millert;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	2010.09.24.14.49.05;	author millert;	state Exp;
branches;
next	1.1.1.2;

1.1.1.2
date	2014.11.17.20.52.59;	author afresh1;	state Exp;
branches;
next	;
commitid	B31cAbBIXiCqnL97;


desc
@@


1.1
log
@Initial revision
@
text
@#!/usr/bin/perl -w

BEGIN {
    if( $ENV{PERL_CORE} ) {
        chdir 't';
        @@INC = ('../lib', 'lib', '../lib/Test/Simple/t/lib');
    }
    else {
        unshift @@INC, 't/lib';
    }
}

use strict;

require Test::Simple::Catch;
my($out, $err) = Test::Simple::Catch::caught();
local $ENV{HARNESS_ACTIVE} = 0;

require Test::Builder;
my $TB = Test::Builder->create;
$TB->level(0);

sub try_cmp_ok {
    my($left, $cmp, $right) = @@_;
    
    my %expect;
    $expect{ok}    = eval "\$left $cmp \$right";
    $expect{error} = $@@;
    $expect{error} =~ s/ at .*\n?//;

    local $Test::Builder::Level = $Test::Builder::Level + 1;
    my $ok = cmp_ok($left, $cmp, $right, "cmp_ok");
    $TB->is_num(!!$ok, !!$expect{ok}, "  right return");
    
    my $diag = $err->read;
    if( !$ok and $expect{error} ) {
        $diag =~ s/^# //mg;
        $TB->like( $diag, qr/\Q$expect{error}\E/, "  expected error" );
    }
    elsif( $ok ) {
        $TB->is_eq( $diag, '', "  passed without diagnostic" );
    }
    else {
        $TB->ok(1, "  failed without diagnostic");
    }
}


use Test::More;
Test::More->builder->no_ending(1);

require MyOverload;
my $cmp = Overloaded::Compare->new("foo", 42);
my $ify = Overloaded::Ify->new("bar", 23);

my @@Tests = (
    [1, '==', 1],
    [1, '==', 2],
    ["a", "eq", "b"],
    ["a", "eq", "a"],
    [1, "+", 1],
    [1, "-", 1],

    [$cmp, '==', 42],
    [$cmp, 'eq', "foo"],
    [$ify, 'eq', "bar"],
    [$ify, "==", 23],
);

plan tests => scalar @@Tests;
$TB->plan(tests => @@Tests * 2);

for my $test (@@Tests) {
    try_cmp_ok(@@$test);
}
@


1.1.1.1
log
@Perl 5.12.2 from CPAN
@
text
@@


1.1.1.2
log
@Import perl-5.20.1
@
text
@d3 10
a13 3
use warnings;

use lib 't/lib';
d24 1
a24 1
    my($left, $cmp, $right, $error) = @@_;
d27 3
a29 9
    if( $error ) {
        $expect{ok} = 0;
        $expect{error} = $error;
    }
    else {
        $expect{ok}    = eval "\$left $cmp \$right";
        $expect{error} = $@@;
        $expect{error} =~ s/ at .*\n?//;
    }
d32 1
a32 4

    my $ok;
    eval { $ok = cmp_ok($left, $cmp, $right, "cmp_ok"); };

a35 6

    if ($@@) {
        $diag = $@@;
        $diag =~ s/ at .*\n?//;
    }

a67 3

    [1, "=", 0,  "= is not a valid comparison operator in cmp_ok()"],
    [1, "+=", 0, "+= is not a valid comparison operator in cmp_ok()"],
@

