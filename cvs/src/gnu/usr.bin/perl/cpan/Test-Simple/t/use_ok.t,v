head	1.3;
access;
symbols
	PERL_5_24_2:1.1.1.3
	OPENBSD_6_1:1.3.0.12
	OPENBSD_6_1_BASE:1.3
	OPENBSD_6_0:1.3.0.10
	OPENBSD_6_0_BASE:1.3
	OPENBSD_5_9:1.3.0.4
	OPENBSD_5_9_BASE:1.3
	OPENBSD_5_8:1.3.0.6
	OPENBSD_5_8_BASE:1.3
	PERL_5_20_2:1.1.1.3
	OPENBSD_5_7:1.3.0.2
	OPENBSD_5_7_BASE:1.3
	PERL_5_20_1:1.1.1.3
	OPENBSD_5_6:1.2.0.18
	OPENBSD_5_6_BASE:1.2
	PERL_5_18_2:1.1.1.2
	PERL:1.1.1
	OPENBSD_5_5:1.2.0.16
	OPENBSD_5_5_BASE:1.2
	OPENBSD_5_4:1.2.0.12
	OPENBSD_5_4_BASE:1.2
	PERL_5_16_3:1.1.1.2
	OPENBSD_5_3:1.2.0.10
	OPENBSD_5_3_BASE:1.2
	OPENBSD_5_2:1.2.0.8
	OPENBSD_5_2_BASE:1.2
	OPENBSD_5_1_BASE:1.2
	OPENBSD_5_1:1.2.0.6
	OPENBSD_5_0:1.2.0.4
	OPENBSD_5_0_BASE:1.2
	OPENBSD_4_9:1.2.0.2
	OPENBSD_4_9_BASE:1.2
	PERL_5_12_2:1.1.1.1
	CPAN:1.1.1;
locks; strict;
comment	@# @;
expand	@o@;


1.3
date	2014.11.17.20.57.04;	author afresh1;	state Exp;
branches;
next	1.2;
commitid	QP75iYx42Uo7mMxO;

1.2
date	2011.01.07.12.19.31;	author jasper;	state Exp;
branches;
next	1.1;

1.1
date	2010.09.24.14.49.05;	author millert;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	2010.09.24.14.49.05;	author millert;	state Exp;
branches;
next	1.1.1.2;

1.1.1.2
date	2013.03.25.20.08.17;	author sthen;	state Exp;
branches;
next	1.1.1.3;

1.1.1.3
date	2014.11.17.20.53.00;	author afresh1;	state Exp;
branches;
next	;
commitid	B31cAbBIXiCqnL97;


desc
@@


1.3
log
@Fix merge conflicts, remove extra files, match upstream perl-5.20.1

ok deraadt@@ sthen@@ espie@@ miod@@
@
text
@#!/usr/bin/perl -w

use strict;
use warnings;

use lib 't/lib';
use Test::More;

note "Basic use_ok"; {
    package Foo::one;
    ::use_ok("Symbol");
    ::ok( defined &gensym,        'use_ok() no args exports defaults' );
}


note "With one arg"; {
    package Foo::two;
    ::use_ok("Symbol", qw(qualify));
    ::ok( !defined &gensym,       '  one arg, defaults overridden' );
    ::ok( defined &qualify,       '  right function exported' );
}


note "Multiple args"; {
    package Foo::three;
    ::use_ok("Symbol", qw(gensym ungensym));
    ::ok( defined &gensym && defined &ungensym,   '  multiple args' );
}


note "Defining constants"; {
    package Foo::four;
    my $warn; local $SIG{__WARN__} = sub { $warn .= shift; };
    ::use_ok("constant", qw(foo bar));
    ::ok( defined &foo, 'constant' );
    ::is( $warn, undef, 'no warning');
}


note "use Module VERSION"; {
    package Foo::five;
    ::use_ok("Symbol", 1.02);
}


note "use Module VERSION does not call import"; {
    package Foo::six;
    ::use_ok("NoExporter", 1.02);
}


{
    package Foo::seven;
    local $SIG{__WARN__} = sub {
        # Old perls will warn on X.YY_ZZ style versions.  Not our problem
        warn @@_ unless $_[0] =~ /^Argument "\d+\.\d+_\d+" isn't numeric/;
    };
    ::use_ok("Test::More", 0.47);
}


note "Signals are preserved"; {
    package Foo::eight;
    local $SIG{__DIE__};
    ::use_ok("SigDie");
    ::ok(defined $SIG{__DIE__}, '  SIG{__DIE__} preserved');
}


note "Line numbers preserved"; {
    my $package = "that_cares_about_line_numbers";

    # Store the output of caller.
    my @@caller;
    {
        package that_cares_about_line_numbers;

        sub import {
            @@caller = caller;
            return;
        }

        $INC{"$package.pm"} = 1;  # fool use into thinking it's already loaded
    }

    ::use_ok($package);
    my $line = __LINE__-1;
    ::is( $caller[0], __PACKAGE__,      "caller package preserved" );
    ::is( $caller[1], __FILE__,         "  file" );
    ::is( $caller[2], $line,            "  line" );
}


note "not confused by functions vs class names"; {
    $INC{"ok.pm"} = 1;
    use_ok("ok");               # ok is a function inside Test::More

    $INC{"Foo/bar.pm"} = 1;
    sub Foo::bar { 42 }
    use_ok("Foo::bar");         # Confusing a class name with a function name
}

done_testing;
@


1.2
log
@- Update Test::Simple to 0.96

from Abel Abraham Camarillo Ojeda
ok espie@@ millert@@
@
text
@d3 2
a4 9
BEGIN {
    if( $ENV{PERL_CORE} ) {
        chdir 't';
        @@INC = qw(../lib ../lib/Test/Simple/t/lib);
    }
    else {
        unshift @@INC, 't/lib';
    }
}
d6 2
a7 1
use Test::More tests => 15;
d9 1
a9 2
# Using Symbol because it's core and exports lots of stuff.
{
d15 2
a16 1
{
d23 2
a24 1
{
d30 2
a31 1
{
d39 2
a40 1
{
d45 2
a46 1
{
d51 1
d61 2
a62 1
{
d68 36
@


1.1
log
@Initial revision
@
text
@d25 1
a25 1
    ::ok( !defined &gensym,       '  one arg, defaults overriden' );
@


1.1.1.1
log
@Perl 5.12.2 from CPAN
@
text
@@


1.1.1.2
log
@import perl 5.16.3 from CPAN - worked on by Andrew Fresh and myself
@
text
@d25 1
a25 1
    ::ok( !defined &gensym,       '  one arg, defaults overridden' );
@


1.1.1.3
log
@Import perl-5.20.1
@
text
@d3 9
a11 2
use strict;
use warnings;
d13 1
a13 2
use lib 't/lib';
use Test::More;
d15 2
a16 1
note "Basic use_ok"; {
d22 1
a22 2

note "With one arg"; {
d29 1
a29 2

note "Multiple args"; {
d35 1
a35 2

note "Defining constants"; {
d43 1
a43 2

note "use Module VERSION"; {
d48 1
a48 2

note "use Module VERSION does not call import"; {
a52 1

d62 1
a62 2

note "Signals are preserved"; {
a67 36


note "Line numbers preserved"; {
    my $package = "that_cares_about_line_numbers";

    # Store the output of caller.
    my @@caller;
    {
        package that_cares_about_line_numbers;

        sub import {
            @@caller = caller;
            return;
        }

        $INC{"$package.pm"} = 1;  # fool use into thinking it's already loaded
    }

    ::use_ok($package);
    my $line = __LINE__-1;
    ::is( $caller[0], __PACKAGE__,      "caller package preserved" );
    ::is( $caller[1], __FILE__,         "  file" );
    ::is( $caller[2], $line,            "  line" );
}


note "not confused by functions vs class names"; {
    $INC{"ok.pm"} = 1;
    use_ok("ok");               # ok is a function inside Test::More

    $INC{"Foo/bar.pm"} = 1;
    sub Foo::bar { 42 }
    use_ok("Foo::bar");         # Confusing a class name with a function name
}

done_testing;
@


