head	1.5;
access;
symbols
	OPENBSD_6_0:1.4.0.10
	OPENBSD_6_0_BASE:1.4
	OPENBSD_5_9:1.4.0.4
	OPENBSD_5_9_BASE:1.4
	OPENBSD_5_8:1.4.0.6
	OPENBSD_5_8_BASE:1.4
	PERL_5_20_2:1.1.1.3
	OPENBSD_5_7:1.4.0.2
	OPENBSD_5_7_BASE:1.4
	PERL_5_20_1:1.1.1.3
	OPENBSD_5_6:1.3.0.16
	OPENBSD_5_6_BASE:1.3
	PERL_5_18_2:1.1.1.2
	PERL:1.1.1
	OPENBSD_5_5:1.3.0.14
	OPENBSD_5_5_BASE:1.3
	OPENBSD_5_4:1.3.0.10
	OPENBSD_5_4_BASE:1.3
	PERL_5_16_3:1.1.1.2
	OPENBSD_5_3:1.3.0.8
	OPENBSD_5_3_BASE:1.3
	OPENBSD_5_2:1.3.0.6
	OPENBSD_5_2_BASE:1.3
	OPENBSD_5_1_BASE:1.3
	OPENBSD_5_1:1.3.0.4
	OPENBSD_5_0:1.3.0.2
	OPENBSD_5_0_BASE:1.3
	OPENBSD_4_9:1.2.0.2
	OPENBSD_4_9_BASE:1.2
	PERL_5_12_2:1.1.1.1
	CPAN:1.1.1;
locks; strict;
comment	@# @;
expand	@o@;


1.5
date	2017.02.05.00.32.04;	author afresh1;	state Exp;
branches;
next	1.4;
commitid	cxJ08BvJA9Pt2PTM;

1.4
date	2014.11.17.20.57.04;	author afresh1;	state Exp;
branches;
next	1.3;
commitid	QP75iYx42Uo7mMxO;

1.3
date	2011.04.18.17.48.24;	author jasper;	state Exp;
branches;
next	1.2;

1.2
date	2011.01.07.12.19.31;	author jasper;	state Exp;
branches;
next	1.1;

1.1
date	2010.09.24.14.49.05;	author millert;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	2010.09.24.14.49.05;	author millert;	state Exp;
branches;
next	1.1.1.2;

1.1.1.2
date	2013.03.25.20.08.17;	author sthen;	state Exp;
branches;
next	1.1.1.3;

1.1.1.3
date	2014.11.17.20.52.59;	author afresh1;	state Exp;
branches;
next	;
commitid	B31cAbBIXiCqnL97;


desc
@@


1.5
log
@Fix merge issues, remove excess files - match perl-5.24.1 dist
@
text
@package Test::Builder::Module;

use strict;

use Test::Builder 1.00;

require Exporter;
our @@ISA = qw(Exporter);

our $VERSION = '1.001014';
$VERSION = eval $VERSION;      ## no critic (BuiltinFunctions::ProhibitStringyEval)


=head1 NAME

Test::Builder::Module - Base class for test modules

=head1 SYNOPSIS

  # Emulates Test::Simple
  package Your::Module;

  my $CLASS = __PACKAGE__;

  use base 'Test::Builder::Module';
  @@EXPORT = qw(ok);

  sub ok ($;$) {
      my $tb = $CLASS->builder;
      return $tb->ok(@@_);
  }
  
  1;


=head1 DESCRIPTION

This is a superclass for L<Test::Builder>-based modules.  It provides a
handful of common functionality and a method of getting at the underlying
L<Test::Builder> object.


=head2 Importing

Test::Builder::Module is a subclass of L<Exporter> which means your
module is also a subclass of Exporter.  @@EXPORT, @@EXPORT_OK, etc...
all act normally.

A few methods are provided to do the C<< use Your::Module tests => 23 >> part
for you.

=head3 import

Test::Builder::Module provides an C<import()> method which acts in the
same basic way as L<Test::More>'s, setting the plan and controlling
exporting of functions and variables.  This allows your module to set
the plan independent of L<Test::More>.

All arguments passed to C<import()> are passed onto 
C<< Your::Module->builder->plan() >> with the exception of 
C<< import =>[qw(things to import)] >>.

    use Your::Module import => [qw(this that)], tests => 23;

says to import the functions C<this()> and C<that()> as well as set the plan
to be 23 tests.

C<import()> also sets the C<exported_to()> attribute of your builder to be
the caller of the C<import()> function.

Additional behaviors can be added to your C<import()> method by overriding
C<import_extra()>.

=cut

sub import {
    my($class) = shift;

    # Don't run all this when loading ourself.
    return 1 if $class eq 'Test::Builder::Module';

    my $test = $class->builder;

    my $caller = caller;

    $test->exported_to($caller);

    $class->import_extra( \@@_ );
    my(@@imports) = $class->_strip_imports( \@@_ );

    $test->plan(@@_);

    $class->export_to_level( 1, $class, @@imports );
}

sub _strip_imports {
    my $class = shift;
    my $list  = shift;

    my @@imports = ();
    my @@other   = ();
    my $idx     = 0;
    while( $idx <= $#{$list} ) {
        my $item = $list->[$idx];

        if( defined $item and $item eq 'import' ) {
            push @@imports, @@{ $list->[ $idx + 1 ] };
            $idx++;
        }
        else {
            push @@other, $item;
        }

        $idx++;
    }

    @@$list = @@other;

    return @@imports;
}

=head3 import_extra

    Your::Module->import_extra(\@@import_args);

C<import_extra()> is called by C<import()>.  It provides an opportunity for you
to add behaviors to your module based on its import list.

Any extra arguments which shouldn't be passed on to C<plan()> should be
stripped off by this method.

See L<Test::More> for an example of its use.

B<NOTE> This mechanism is I<VERY ALPHA AND LIKELY TO CHANGE> as it
feels like a bit of an ugly hack in its current form.

=cut

sub import_extra { }

=head2 Builder

Test::Builder::Module provides some methods of getting at the underlying
Test::Builder object.

=head3 builder

  my $builder = Your::Class->builder;

This method returns the L<Test::Builder> object associated with Your::Class.
It is not a constructor so you can call it as often as you like.

This is the preferred way to get the L<Test::Builder> object.  You should
I<not> get it via C<< Test::Builder->new >> as was previously
recommended.

The object returned by C<builder()> may change at runtime so you should
call C<builder()> inside each function rather than store it in a global.

  sub ok {
      my $builder = Your::Class->builder;

      return $builder->ok(@@_);
  }


=cut

sub builder {
    return Test::Builder->new;
}

1;
@


1.4
log
@Fix merge conflicts, remove extra files, match upstream perl-5.20.1

ok deraadt@@ sthen@@ espie@@ miod@@
@
text
@d5 1
a5 1
use Test::Builder 0.99;
d10 1
a10 1
our $VERSION = '1.001002';
d38 1
a38 1
This is a superclass for Test::Builder-based modules.  It provides a
d40 1
a40 1
Test::Builder object.
d45 1
a45 1
Test::Builder::Module is a subclass of Exporter which means your
d49 1
a49 1
A few methods are provided to do the C<use Your::Module tests => 23> part
d54 2
a55 2
Test::Builder::Module provides an import() method which acts in the
same basic way as Test::More's, setting the plan and controlling
d57 1
a57 1
the plan independent of Test::More.
d59 1
a59 1
All arguments passed to import() are passed onto 
d65 1
a65 1
says to import the functions this() and that() as well as set the plan
d68 2
a69 2
import() also sets the exported_to() attribute of your builder to be
the caller of the import() function.
d71 2
a72 2
Additional behaviors can be added to your import() method by overriding
import_extra().
d126 1
a126 1
import_extra() is called by import().  It provides an opportunity for you
d129 1
a129 1
Any extra arguments which shouldn't be passed on to plan() should be 
d132 1
a132 1
See Test::More for an example of its use.
d150 1
a150 1
This method returns the Test::Builder object associated with Your::Class.
d153 1
a153 1
This is the preferred way to get the Test::Builder object.  You should
d157 2
a158 2
The object returned by builder() may change at runtime so you should
call builder() inside each function rather than store it in a global.
@


1.3
log
@Update Test::Simple to 0.98

ok millert@@
@
text
@d5 1
a5 1
use Test::Builder;
d10 1
a10 1
our $VERSION = '0.98';
@


1.2
log
@- Update Test::Simple to 0.96

from Abel Abraham Camarillo Ojeda
ok espie@@ millert@@
@
text
@d10 1
a10 1
our $VERSION = '0.96';
d61 1
a61 1
C<import =>[qw(things to import)]>.
@


1.1
log
@Initial revision
@
text
@d10 1
a10 1
our $VERSION = '0.94';
d55 1
a55 1
same basic way as Test::More's, setting the plan and controling
@


1.1.1.1
log
@Perl 5.12.2 from CPAN
@
text
@@


1.1.1.2
log
@import perl 5.16.3 from CPAN - worked on by Andrew Fresh and myself
@
text
@d10 1
a10 1
our $VERSION = '0.98';
d55 1
a55 1
same basic way as Test::More's, setting the plan and controlling
d61 1
a61 1
C<< import =>[qw(things to import)] >>.
@


1.1.1.3
log
@Import perl-5.20.1
@
text
@d5 1
a5 1
use Test::Builder 0.99;
d10 1
a10 1
our $VERSION = '1.001002';
@


