head	1.2;
access;
symbols
	OPENBSD_6_1:1.2.0.4
	OPENBSD_6_1_BASE:1.2
	OPENBSD_6_0:1.1.1.2.0.10
	OPENBSD_6_0_BASE:1.1.1.2
	OPENBSD_5_9:1.1.1.2.0.4
	OPENBSD_5_9_BASE:1.1.1.2
	OPENBSD_5_8:1.1.1.2.0.6
	OPENBSD_5_8_BASE:1.1.1.2
	PERL_5_20_2:1.1.1.2
	OPENBSD_5_7:1.1.1.2.0.2
	OPENBSD_5_7_BASE:1.1.1.2
	PERL_5_20_1:1.1.1.2
	OPENBSD_5_6:1.1.1.1.0.18
	OPENBSD_5_6_BASE:1.1.1.1
	PERL_5_18_2:1.1.1.1
	PERL:1.1.1
	OPENBSD_5_5:1.1.1.1.0.16
	OPENBSD_5_5_BASE:1.1.1.1
	OPENBSD_5_4:1.1.1.1.0.12
	OPENBSD_5_4_BASE:1.1.1.1
	PERL_5_16_3:1.1.1.1
	OPENBSD_5_3:1.1.1.1.0.10
	OPENBSD_5_3_BASE:1.1.1.1
	OPENBSD_5_2:1.1.1.1.0.8
	OPENBSD_5_2_BASE:1.1.1.1
	OPENBSD_5_1_BASE:1.1.1.1
	OPENBSD_5_1:1.1.1.1.0.6
	OPENBSD_5_0:1.1.1.1.0.4
	OPENBSD_5_0_BASE:1.1.1.1
	OPENBSD_4_9:1.1.1.1.0.2
	OPENBSD_4_9_BASE:1.1.1.1
	PERL_5_12_2:1.1.1.1
	CPAN:1.1.1;
locks; strict;
comment	@# @;
expand	@o@;


1.2
date	2017.02.05.00.32.04;	author afresh1;	state Exp;
branches;
next	1.1;
commitid	cxJ08BvJA9Pt2PTM;

1.1
date	2010.09.24.14.49.05;	author millert;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	2010.09.24.14.49.05;	author millert;	state Exp;
branches;
next	1.1.1.2;

1.1.1.2
date	2014.11.17.20.52.59;	author afresh1;	state Exp;
branches;
next	;
commitid	B31cAbBIXiCqnL97;


desc
@@


1.2
log
@Fix merge issues, remove excess files - match perl-5.24.1 dist
@
text
@=head1 NAME

Test::Tutorial - A tutorial about writing really basic tests

=head1 DESCRIPTION


I<AHHHHHHH!!!!  NOT TESTING!  Anything but testing!
Beat me, whip me, send me to Detroit, but don't make
me write tests!>

I<*sob*>

I<Besides, I don't know how to write the damned things.>


Is this you?  Is writing tests right up there with writing
documentation and having your fingernails pulled out?  Did you open up
a test and read

    ######## We start with some black magic

and decide that's quite enough for you?

It's ok.  That's all gone now.  We've done all the black magic for
you.  And here are the tricks...


=head2 Nuts and bolts of testing.

Here's the most basic test program.

    #!/usr/bin/perl -w

    print "1..1\n";

    print 1 + 1 == 2 ? "ok 1\n" : "not ok 1\n";

Because 1 + 1 is 2, it prints:

    1..1
    ok 1

What this says is: C<1..1> "I'm going to run one test." [1] C<ok 1>
"The first test passed".  And that's about all magic there is to
testing.  Your basic unit of testing is the I<ok>.  For each thing you
test, an C<ok> is printed.  Simple.  L<Test::Harness> interprets your test
results to determine if you succeeded or failed (more on that later).

Writing all these print statements rapidly gets tedious.  Fortunately,
there's L<Test::Simple>.  It has one function, C<ok()>.

    #!/usr/bin/perl -w

    use Test::Simple tests => 1;

    ok( 1 + 1 == 2 );

That does the same thing as the previous code.  C<ok()> is the backbone
of Perl testing, and we'll be using it instead of roll-your-own from
here on.  If C<ok()> gets a true value, the test passes.  False, it
fails.

    #!/usr/bin/perl -w

    use Test::Simple tests => 2;
    ok( 1 + 1 == 2 );
    ok( 2 + 2 == 5 );

From that comes:

    1..2
    ok 1
    not ok 2
    #     Failed test (test.pl at line 5)
    # Looks like you failed 1 tests of 2.

C<1..2> "I'm going to run two tests."  This number is a I<plan>. It helps to
ensure your test program ran all the way through and didn't die or skip some
tests.  C<ok 1> "The first test passed."  C<not ok 2> "The second test failed".
Test::Simple helpfully prints out some extra commentary about your tests.

It's not scary.  Come, hold my hand.  We're going to give an example
of testing a module.  For our example, we'll be testing a date
library, L<Date::ICal>.  It's on CPAN, so download a copy and follow
along. [2]


=head2 Where to start?

This is the hardest part of testing, where do you start?  People often get
overwhelmed at the apparent enormity of the task of testing a whole module.
The best place to start is at the beginning.  L<Date::ICal> is an
object-oriented module, and that means you start by making an object.  Test
C<new()>.

    #!/usr/bin/perl -w

    # assume these two lines are in all subsequent examples
    use strict;
    use warnings;

    use Test::Simple tests => 2;

    use Date::ICal;

    my $ical = Date::ICal->new;         # create an object
    ok( defined $ical );                # check that we got something
    ok( $ical->isa('Date::ICal') );     # and it's the right class

Run that and you should get:

    1..2
    ok 1
    ok 2

Congratulations! You've written your first useful test.


=head2 Names

That output isn't terribly descriptive, is it?  When you have two tests you can
figure out which one is #2, but what if you have 102 tests?

Each test can be given a little descriptive name as the second
argument to C<ok()>.

    use Test::Simple tests => 2;

    ok( defined $ical,              'new() returned something' );
    ok( $ical->isa('Date::ICal'),   "  and it's the right class" );

Now you'll see:

    1..2
    ok 1 - new() returned something
    ok 2 -   and it's the right class


=head2 Test the manual

The simplest way to build up a decent testing suite is to just test what
the manual says it does. [3] Let's pull something out of the
L<Date::ICal/SYNOPSIS> and test that all its bits work.

    #!/usr/bin/perl -w

    use Test::Simple tests => 8;

    use Date::ICal;

    $ical = Date::ICal->new( year => 1964, month => 10, day => 16,
                             hour => 16,   min   => 12, sec => 47,
                             tz   => '0530' );

    ok( defined $ical,            'new() returned something' );
    ok( $ical->isa('Date::ICal'), "  and it's the right class" );
    ok( $ical->sec   == 47,       '  sec()'   );
    ok( $ical->min   == 12,       '  min()'   );
    ok( $ical->hour  == 16,       '  hour()'  );
    ok( $ical->day   == 17,       '  day()'   );
    ok( $ical->month == 10,       '  month()' );
    ok( $ical->year  == 1964,     '  year()'  );

Run that and you get:

    1..8
    ok 1 - new() returned something
    ok 2 -   and it's the right class
    ok 3 -   sec()
    ok 4 -   min()
    ok 5 -   hour()
    not ok 6 -   day()
    #     Failed test (- at line 16)
    ok 7 -   month()
    ok 8 -   year()
    # Looks like you failed 1 tests of 8.

Whoops, a failure! [4] L<Test::Simple> helpfully lets us know on what line the
failure occurred, but not much else.  We were supposed to get 17, but we
didn't.  What did we get??  Dunno.  You could re-run the test in the debugger
or throw in some print statements to find out.

Instead, switch from L<Test::Simple> to L<Test::More>.  L<Test::More>
does everything L<Test::Simple> does, and more!  In fact, L<Test::More> does
things I<exactly> the way L<Test::Simple> does.  You can literally swap
L<Test::Simple> out and put L<Test::More> in its place.  That's just what
we're going to do.

L<Test::More> does more than L<Test::Simple>.  The most important difference at
this point is it provides more informative ways to say "ok".  Although you can
write almost any test with a generic C<ok()>, it can't tell you what went
wrong.  The C<is()> function lets us declare that something is supposed to be
the same as something else:

    use Test::More tests => 8;

    use Date::ICal;

    $ical = Date::ICal->new( year => 1964, month => 10, day => 16,
                             hour => 16,   min   => 12, sec => 47,
                             tz   => '0530' );

    ok( defined $ical,            'new() returned something' );
    ok( $ical->isa('Date::ICal'), "  and it's the right class" );
    is( $ical->sec,     47,       '  sec()'   );
    is( $ical->min,     12,       '  min()'   );
    is( $ical->hour,    16,       '  hour()'  );
    is( $ical->day,     17,       '  day()'   );
    is( $ical->month,   10,       '  month()' );
    is( $ical->year,    1964,     '  year()'  );

"Is C<< $ical->sec >> 47?"  "Is C<< $ical->min >> 12?"  With C<is()> in place,
you get more information:

    1..8
    ok 1 - new() returned something
    ok 2 -   and it's the right class
    ok 3 -   sec()
    ok 4 -   min()
    ok 5 -   hour()
    not ok 6 -   day()
    #     Failed test (- at line 16)
    #          got: '16'
    #     expected: '17'
    ok 7 -   month()
    ok 8 -   year()
    # Looks like you failed 1 tests of 8.

Aha. C<< $ical->day >> returned 16, but we expected 17.  A
quick check shows that the code is working fine, we made a mistake
when writing the tests.  Change it to:

    is( $ical->day,     16,       '  day()'   );

... and everything works.

Any time you're doing a "this equals that" sort of test, use C<is()>.
It even works on arrays.  The test is always in scalar context, so you
can test how many elements are in an array this way. [5]

    is( @@foo, 5, 'foo has 5 elements' );


=head2 Sometimes the tests are wrong

This brings up a very important lesson.  Code has bugs.  Tests are
code.  Ergo, tests have bugs.  A failing test could mean a bug in the
code, but don't discount the possibility that the test is wrong.

On the flip side, don't be tempted to prematurely declare a test
incorrect just because you're having trouble finding the bug.
Invalidating a test isn't something to be taken lightly, and don't use
it as a cop out to avoid work.


=head2 Testing lots of values

We're going to be wanting to test a lot of dates here, trying to trick
the code with lots of different edge cases.  Does it work before 1970?
After 2038?  Before 1904?  Do years after 10,000 give it trouble?
Does it get leap years right?  We could keep repeating the code above,
or we could set up a little try/expect loop.

    use Test::More tests => 32;
    use Date::ICal;

    my %ICal_Dates = (
            # An ICal string     And the year, month, day
            #                    hour, minute and second we expect.
            '19971024T120000' =>    # from the docs.
                                [ 1997, 10, 24, 12,  0,  0 ],
            '20390123T232832' =>    # after the Unix epoch
                                [ 2039,  1, 23, 23, 28, 32 ],
            '19671225T000000' =>    # before the Unix epoch
                                [ 1967, 12, 25,  0,  0,  0 ],
            '18990505T232323' =>    # before the MacOS epoch
                                [ 1899,  5,  5, 23, 23, 23 ],
    );


    while( my($ical_str, $expect) = each %ICal_Dates ) {
        my $ical = Date::ICal->new( ical => $ical_str );

        ok( defined $ical,            "new(ical => '$ical_str')" );
        ok( $ical->isa('Date::ICal'), "  and it's the right class" );

        is( $ical->year,    $expect->[0],     '  year()'  );
        is( $ical->month,   $expect->[1],     '  month()' );
        is( $ical->day,     $expect->[2],     '  day()'   );
        is( $ical->hour,    $expect->[3],     '  hour()'  );
        is( $ical->min,     $expect->[4],     '  min()'   );
        is( $ical->sec,     $expect->[5],     '  sec()'   );
    }

Now we can test bunches of dates by just adding them to
C<%ICal_Dates>.  Now that it's less work to test with more dates, you'll
be inclined to just throw more in as you think of them.
Only problem is, every time we add to that we have to keep adjusting
the L<< use Test::More tests => ## >> line.  That can rapidly get
annoying.  There are ways to make this work better.

First, we can calculate the plan dynamically using the C<plan()>
function.

    use Test::More;
    use Date::ICal;

    my %ICal_Dates = (
        ...same as before...
    );

    # For each key in the hash we're running 8 tests.
    plan tests => keys(%ICal_Dates) * 8;

    ...and then your tests...

To be even more flexible, use C<done_testing>.  This means we're just
running some tests, don't know how many. [6]

    use Test::More;   # instead of tests => 32

    ... # tests here

    done_testing();   # reached the end safely

If you don't specify a plan, L<Test::More> expects to see C<done_testing()>
before your program exits. It will warn you if you forget it. You can give
C<done_testing()> an optional number of tests you expected to run, and if the
number ran differs, L<Test::More> will give you another kind of warning.


=head2 Informative names

Take a look at the line:

    ok( defined $ical,            "new(ical => '$ical_str')" );

We've added more detail about what we're testing and the ICal string
itself we're trying out to the name.  So you get results like:

    ok 25 - new(ical => '19971024T120000')
    ok 26 -   and it's the right class
    ok 27 -   year()
    ok 28 -   month()
    ok 29 -   day()
    ok 30 -   hour()
    ok 31 -   min()
    ok 32 -   sec()

If something in there fails, you'll know which one it was and that
will make tracking down the problem easier.  Try to put a bit of
debugging information into the test names.

Describe what the tests test, to make debugging a failed test easier
for you or for the next person who runs your test.


=head2 Skipping tests

Poking around in the existing Date::ICal tests, I found this in
F<t/01sanity.t> [7]

    #!/usr/bin/perl -w

    use Test::More tests => 7;
    use Date::ICal;

    # Make sure epoch time is being handled sanely.
    my $t1 = Date::ICal->new( epoch => 0 );
    is( $t1->epoch, 0,          "Epoch time of 0" );

    # XXX This will only work on unix systems.
    is( $t1->ical, '19700101Z', "  epoch to ical" );

    is( $t1->year,  1970,       "  year()"  );
    is( $t1->month, 1,          "  month()" );
    is( $t1->day,   1,          "  day()"   );

    # like the tests above, but starting with ical instead of epoch
    my $t2 = Date::ICal->new( ical => '19700101Z' );
    is( $t2->ical, '19700101Z', "Start of epoch in ICal notation" );

    is( $t2->epoch, 0,          "  and back to ICal" );

The beginning of the epoch is different on most non-Unix operating systems [8].
Even though Perl smooths out the differences for the most part, certain ports
do it differently.  MacPerl is one off the top of my head. [9]  Rather than
putting a comment in the test and hoping someone will read the test while
debugging the failure, we can explicitly say it's never going to work and skip
the test.

    use Test::More tests => 7;
    use Date::ICal;

    # Make sure epoch time is being handled sanely.
    my $t1 = Date::ICal->new( epoch => 0 );
    is( $t1->epoch, 0,          "Epoch time of 0" );

    SKIP: {
        skip('epoch to ICal not working on Mac OS', 6)
            if $^O eq 'MacOS';

        is( $t1->ical, '19700101Z', "  epoch to ical" );

        is( $t1->year,  1970,       "  year()"  );
        is( $t1->month, 1,          "  month()" );
        is( $t1->day,   1,          "  day()"   );

        # like the tests above, but starting with ical instead of epoch
        my $t2 = Date::ICal->new( ical => '19700101Z' );
        is( $t2->ical, '19700101Z', "Start of epoch in ICal notation" );

        is( $t2->epoch, 0,          "  and back to ICal" );
    }

A little bit of magic happens here.  When running on anything but MacOS, all
the tests run normally.  But when on MacOS, C<skip()> causes the entire
contents of the SKIP block to be jumped over.  It never runs.  Instead,
C<skip()> prints special output that tells L<Test::Harness> that the tests have
been skipped.

    1..7
    ok 1 - Epoch time of 0
    ok 2 # skip epoch to ICal not working on MacOS
    ok 3 # skip epoch to ICal not working on MacOS
    ok 4 # skip epoch to ICal not working on MacOS
    ok 5 # skip epoch to ICal not working on MacOS
    ok 6 # skip epoch to ICal not working on MacOS
    ok 7 # skip epoch to ICal not working on MacOS

This means your tests won't fail on MacOS.  This means fewer emails
from MacPerl users telling you about failing tests that you know will
never work.  You've got to be careful with skip tests.  These are for
tests which don't work and I<never will>.  It is not for skipping
genuine bugs (we'll get to that in a moment).

The tests are wholly and completely skipped. [10]  This will work.

    SKIP: {
        skip("I don't wanna die!");

        die, die, die, die, die;
    }


=head2 Todo tests

While thumbing through the L<Date::ICal> man page, I came across this:

   ical

       $ical_string = $ical->ical;

   Retrieves, or sets, the date on the object, using any
   valid ICal date/time string.

"Retrieves or sets".  Hmmm. I didn't see a test for using C<ical()> to set
the date in the Date::ICal test suite.  So I wrote one:

    use Test::More tests => 1;
    use Date::ICal;

    my $ical = Date::ICal->new;
    $ical->ical('20201231Z');
    is( $ical->ical, '20201231Z',   'Setting via ical()' );

Run that. I saw:

    1..1
    not ok 1 - Setting via ical()
    #     Failed test (- at line 6)
    #          got: '20010814T233649Z'
    #     expected: '20201231Z'
    # Looks like you failed 1 tests of 1.

Whoops!  Looks like it's unimplemented.  Assume you don't have the time to fix
this. [11] Normally, you'd just comment out the test and put a note in a todo
list somewhere.  Instead, explicitly state "this test will fail" by wrapping it
in a C<TODO> block:

    use Test::More tests => 1;

    TODO: {
        local $TODO = 'ical($ical) not yet implemented';

        my $ical = Date::ICal->new;
        $ical->ical('20201231Z');

        is( $ical->ical, '20201231Z',   'Setting via ical()' );
    }

Now when you run, it's a little different:

    1..1
    not ok 1 - Setting via ical() # TODO ical($ical) not yet implemented
    #          got: '20010822T201551Z'
    #     expected: '20201231Z'

L<Test::More> doesn't say "Looks like you failed 1 tests of 1".  That '#
TODO' tells L<Test::Harness> "this is supposed to fail" and it treats a
failure as a successful test.  You can write tests even before
you've fixed the underlying code.

If a TODO test passes, L<Test::Harness> will report it "UNEXPECTEDLY
SUCCEEDED".  When that happens, remove the TODO block with C<local $TODO> and
turn it into a real test.


=head2 Testing with taint mode.

Taint mode is a funny thing.  It's the globalest of all global
features.  Once you turn it on, it affects I<all> code in your program
and I<all> modules used (and all the modules they use).  If a single
piece of code isn't taint clean, the whole thing explodes.  With that
in mind, it's very important to ensure your module works under taint
mode.

It's very simple to have your tests run under taint mode.  Just throw
a C<-T> into the C<#!> line.  L<Test::Harness> will read the switches
in C<#!> and use them to run your tests.

    #!/usr/bin/perl -Tw

    ...test normally here...

When you say C<make test> it will run with taint mode on.


=head1 FOOTNOTES

=over 4

=item 1

The first number doesn't really mean anything, but it has to be 1.
It's the second number that's important.

=item 2

For those following along at home, I'm using version 1.31.  It has
some bugs, which is good -- we'll uncover them with our tests.

=item 3

You can actually take this one step further and test the manual
itself.  Have a look at L<Test::Inline> (formerly L<Pod::Tests>).

=item 4

Yes, there's a mistake in the test suite.  What!  Me, contrived?

=item 5

We'll get to testing the contents of lists later.

=item 6

But what happens if your test program dies halfway through?!  Since we
didn't say how many tests we're going to run, how can we know it
failed?  No problem, L<Test::More> employs some magic to catch that death
and turn the test into a failure, even if every test passed up to that
point.

=item 7

I cleaned it up a little.

=item 8

Most Operating Systems record time as the number of seconds since a
certain date.  This date is the beginning of the epoch.  Unix's starts
at midnight January 1st, 1970 GMT.

=item 9

MacOS's epoch is midnight January 1st, 1904.  VMS's is midnight,
November 17th, 1858, but vmsperl emulates the Unix epoch so it's not a
problem.

=item 10

As long as the code inside the SKIP block at least compiles.  Please
don't ask how.  No, it's not a filter.

=item 11

Do NOT be tempted to use TODO tests as a way to avoid fixing simple
bugs!

=back

=head1 AUTHORS

Michael G Schwern E<lt>schwern@@pobox.comE<gt> and the perl-qa dancers!

=head1 MAINTAINERS

=over 4

=item Chad Granum E<lt>exodist@@cpan.orgE<gt>

=back

=head1 COPYRIGHT

Copyright 2001 by Michael G Schwern E<lt>schwern@@pobox.comE<gt>.

This documentation is free; you can redistribute it and/or modify it
under the same terms as Perl itself.

Irrespective of its distribution, all code examples in these files
are hereby placed into the public domain.  You are permitted and
encouraged to use this code in your own programs for fun
or for profit as you see fit.  A simple comment in the code giving
credit would be courteous but is not required.

=cut
@


1.1
log
@Initial revision
@
text
@d8 2
a9 2
I<AHHHHHHH!!!!  NOT TESTING!  Anything but testing!  
Beat me, whip me, send me to Detroit, but don't make 
d19 1
a19 1
a test and read 
d39 1
a39 1
since 1 + 1 is 2, it prints:
d47 1
a47 1
test, an C<ok> is printed.  Simple.  B<Test::Harness> interprets your test
d51 1
a51 1
there's B<Test::Simple>.  It has one function, C<ok()>.
d59 1
a59 1
and that does the same thing as the code above.  C<ok()> is the backbone
d70 1
a70 1
from that comes
d78 4
a81 5
C<1..2> "I'm going to run two tests."  This number is used to ensure
your test program ran all the way through and didn't die or skip some
tests.  C<ok 1> "The first test passed."  C<not ok 2> "The second test
failed".  Test::Simple helpfully prints out some extra commentary about
your tests.
d85 1
a85 1
library, B<Date::ICal>.  It's on CPAN, so download a copy and follow
d91 5
a95 5
This is the hardest part of testing, where do you start?  People often
get overwhelmed at the apparent enormity of the task of testing a
whole module.  Best place to start is at the beginning.  Date::ICal is
an object-oriented module, and that means you start by making an
object.  So we test C<new()>.
d99 4
d111 1
a111 1
run that and you should get:
d117 1
a117 1
congratulations, you've written your first useful test.
d122 2
a123 2
That output isn't terribly descriptive, is it?  When you have two
tests you can figure out which one is #2, but what if you have 102?
d133 1
a133 1
So now you'd see...
d142 2
a143 2
Simplest way to build up a decent testing suite is to just test what
the manual says it does. [3] Let's pull something out of the 
d152 3
a154 3
    $ical = Date::ICal->new( year => 1964, month => 10, day => 16, 
                             hour => 16, min => 12, sec => 47, 
                             tz => '0530' );
d159 1
a159 1
    ok( $ical->min   == 12,       '  min()'   );    
d165 1
a165 1
run that and you get:
d179 9
a187 9
Whoops, a failure! [4] Test::Simple helpfully lets us know on what line
the failure occurred, but not much else.  We were supposed to get 17,
but we didn't.  What did we get??  Dunno.  We'll have to re-run the
test in the debugger or throw in some print statements to find out.

Instead, we'll switch from B<Test::Simple> to B<Test::More>.  B<Test::More>
does everything B<Test::Simple> does, and more!  In fact, Test::More does
things I<exactly> the way Test::Simple does.  You can literally swap
Test::Simple out and put Test::More in its place.  That's just what
d190 5
a194 8
Test::More does more than Test::Simple.  The most important difference
at this point is it provides more informative ways to say "ok".
Although you can write almost any test with a generic C<ok()>, it
can't tell you what went wrong.  Instead, we'll use the C<is()>
function, which lets us declare that something is supposed to be the
same as something else:

    #!/usr/bin/perl -w
d200 3
a202 3
    $ical = Date::ICal->new( year => 1964, month => 10, day => 16, 
                             hour => 16, min => 12, sec => 47, 
                             tz => '0530' );
d207 1
a207 1
    is( $ical->min,     12,       '  min()'   );    
d213 2
a214 2
"Is C<$ical-E<gt>sec> 47?"  "Is C<$ical-E<gt>min> 12?"  With C<is()> in place,
you get some more information
d230 1
a230 1
letting us know that C<$ical-E<gt>day> returned 16, but we expected 17.  A
d232 1
a232 1
when writing up the tests.  Just change it to:
d236 1
a236 1
and everything works.
d238 1
a238 1
So any time you're doing a "this equals that" sort of test, use C<is()>.
d240 1
a240 1
can test how many elements are in a list this way. [5]
d247 1
a247 1
Which brings us to a very important lesson.  Code has bugs.  Tests are
d292 1
a292 1
        is( $ical->min,     $expect->[4],     '  min()'   );    
d296 1
a296 1
So now we can test bunches of dates by just adding them to
d300 2
a301 2
the C<use Test::More tests =E<gt> ##> line.  That can rapidly get
annoying.  There's two ways to make this work better.
d318 1
a318 1
Or to be even more flexible, we use C<no_plan>.  This means we're just
d321 1
a321 1
    use Test::More 'no_plan';   # instead of tests => 32
d323 8
a330 2
now we can just add tests and not have to do all sorts of math to
figure out how many we're running.
d335 1
a335 1
Take a look at this line here
d339 1
a339 1
we've added more detail about what we're testing and the ICal string
d351 2
a352 2
if something in there fails, you'll know which one it was and that
will make tracking down the problem easier.  So try to put a bit of
d386 6
a391 5
The beginning of the epoch is different on most non-Unix operating
systems [8].  Even though Perl smooths out the differences for the
most part, certain ports do it differently.  MacPerl is one off the
top of my head. [9]  So rather than just putting a comment in the test,
we can explicitly say it's never going to work and skip the test.
d401 1
a401 1
        skip('epoch to ICal not working on MacOS', 6) 
d417 5
a421 5
A little bit of magic happens here.  When running on anything but
MacOS, all the tests run normally.  But when on MacOS, C<skip()> causes
the entire contents of the SKIP block to be jumped over.  It's never
run.  Instead, it prints special output that tells Test::Harness that
the tests have been skipped.
d432 1
a432 1
This means your tests won't fail on MacOS.  This means less emails
d449 1
a449 1
Thumbing through the Date::ICal man page, I came across this:
d458 2
a459 2
"Retrieves or sets".  Hmmm, didn't see a test for using C<ical()> to set
the date in the Date::ICal test suite.  So I'll write one.
d468 1
a468 1
run that and I get
d477 4
a480 4
Whoops!  Looks like it's unimplemented.  Let's assume we don't have
the time to fix this. [11] Normally, you'd just comment out the test
and put a note in a todo list somewhere.  Instead, we're going to
explicitly state "this test will fail" by wrapping it in a C<TODO> block.
d500 3
a502 3
Test::More doesn't say "Looks like you failed 1 tests of 1".  That '#
TODO' tells Test::Harness "this is supposed to fail" and it treats a
failure as a successful test.  So you can write tests even before
d505 3
a507 3
If a TODO test passes, Test::Harness will report it "UNEXPECTEDLY
SUCCEEDED".  When that happens, you simply remove the TODO block with
C<local $TODO> and turn it into a real test.
d520 1
a520 1
a C<-T> into the C<#!> line.  Test::Harness will read the switches
d527 1
a527 2
So when you say C<make test> it will be run with taint mode and
warnings on.
d547 1
a547 1
itself.  Have a look at B<Test::Inline> (formerly B<Pod::Tests>).
d561 1
a561 1
failed?  No problem, Test::More employs some magic to catch that death
d596 8
@


1.1.1.1
log
@Perl 5.12.2 from CPAN
@
text
@@


1.1.1.2
log
@Import perl-5.20.1
@
text
@d8 2
a9 2
I<AHHHHHHH!!!!  NOT TESTING!  Anything but testing!
Beat me, whip me, send me to Detroit, but don't make
d19 1
a19 1
a test and read
d39 1
a39 1
Because 1 + 1 is 2, it prints:
d47 1
a47 1
test, an C<ok> is printed.  Simple.  L<Test::Harness> interprets your test
d51 1
a51 1
there's L<Test::Simple>.  It has one function, C<ok()>.
d59 1
a59 1
That does the same thing as the previous code.  C<ok()> is the backbone
d70 1
a70 1
From that comes:
d78 5
a82 4
C<1..2> "I'm going to run two tests."  This number is a I<plan>. It helps to
ensure your test program ran all the way through and didn't die or skip some
tests.  C<ok 1> "The first test passed."  C<not ok 2> "The second test failed".
Test::Simple helpfully prints out some extra commentary about your tests.
d86 1
a86 1
library, L<Date::ICal>.  It's on CPAN, so download a copy and follow
d92 5
a96 5
This is the hardest part of testing, where do you start?  People often get
overwhelmed at the apparent enormity of the task of testing a whole module.
The best place to start is at the beginning.  C<Date::ICal> is an
object-oriented module, and that means you start by making an object.  Test
C<new()>.
a99 4
    # assume these two lines are in all subsequent examples
    use strict;
    use warnings;

d108 1
a108 1
Run that and you should get:
d114 1
a114 1
Congratulations! You've written your first useful test.
d119 2
a120 2
That output isn't terribly descriptive, is it?  When you have two tests you can
figure out which one is #2, but what if you have 102 tests?
d130 1
a130 1
Now you'll see:
d139 2
a140 2
The simplest way to build up a decent testing suite is to just test what
the manual says it does. [3] Let's pull something out of the
d149 3
a151 3
    $ical = Date::ICal->new( year => 1964, month => 10, day => 16,
                             hour => 16,   min   => 12, sec => 47,
                             tz   => '0530' );
d156 1
a156 1
    ok( $ical->min   == 12,       '  min()'   );
d162 1
a162 1
Run that and you get:
d176 9
a184 9
Whoops, a failure! [4] C<Test::Simple> helpfully lets us know on what line the
failure occurred, but not much else.  We were supposed to get 17, but we
didn't.  What did we get??  Dunno.  You could re-run the test in the debugger
or throw in some print statements to find out.

Instead, switch from L<Test::Simple> to L<Test::More>.  C<Test::More>
does everything C<Test::Simple> does, and more!  In fact, C<Test::More> does
things I<exactly> the way C<Test::Simple> does.  You can literally swap
C<Test::Simple> out and put C<Test::More> in its place.  That's just what
d187 8
a194 5
C<Test::More> does more than C<Test::Simple>.  The most important difference at
this point is it provides more informative ways to say "ok".  Although you can
write almost any test with a generic C<ok()>, it can't tell you what went
wrong.  The C<is()> function lets us declare that something is supposed to be
the same as something else:
d200 3
a202 3
    $ical = Date::ICal->new( year => 1964, month => 10, day => 16,
                             hour => 16,   min   => 12, sec => 47,
                             tz   => '0530' );
d207 1
a207 1
    is( $ical->min,     12,       '  min()'   );
d214 1
a214 1
you get more information:
d230 1
a230 1
Aha. C<$ical-E<gt>day> returned 16, but we expected 17.  A
d232 1
a232 1
when writing the tests.  Change it to:
d236 1
a236 1
... and everything works.
d238 1
a238 1
Any time you're doing a "this equals that" sort of test, use C<is()>.
d240 1
a240 1
can test how many elements are in an array this way. [5]
d247 1
a247 1
This brings up a very important lesson.  Code has bugs.  Tests are
d292 1
a292 1
        is( $ical->min,     $expect->[4],     '  min()'   );
d296 1
a296 1
Now we can test bunches of dates by just adding them to
d301 1
a301 1
annoying.  There are ways to make this work better.
d318 1
a318 1
To be even more flexible, use C<done_testing>.  This means we're just
d321 1
a321 5
    use Test::More;   # instead of tests => 32

    ... # tests here

    done_testing();   # reached the end safely
d323 2
a324 4
If you don't specify a plan, C<Test::More> expects to see C<done_testing()>
before your program exits. It will warn you if you forget it. You can give
C<done_testing()> an optional number of tests you expected to run, and if the
number ran differs, C<Test::More> will give you another kind of warning.
d329 1
a329 1
Take a look at the line:
d333 1
a333 1
We've added more detail about what we're testing and the ICal string
d345 2
a346 2
If something in there fails, you'll know which one it was and that
will make tracking down the problem easier.  Try to put a bit of
d380 5
a384 6
The beginning of the epoch is different on most non-Unix operating systems [8].
Even though Perl smooths out the differences for the most part, certain ports
do it differently.  MacPerl is one off the top of my head. [9]  Rather than
putting a comment in the test and hoping someone will read the test while
debugging the failure, we can explicitly say it's never going to work and skip
the test.
d394 1
a394 1
        skip('epoch to ICal not working on Mac OS', 6)
d410 5
a414 5
A little bit of magic happens here.  When running on anything but MacOS, all
the tests run normally.  But when on MacOS, C<skip()> causes the entire
contents of the SKIP block to be jumped over.  It never runs.  Instead,
C<skip()> prints special output that tells C<Test::Harness> that the tests have
been skipped.
d425 1
a425 1
This means your tests won't fail on MacOS.  This means fewer emails
d442 1
a442 1
While thumbing through the C<Date::ICal> man page, I came across this:
d451 2
a452 2
"Retrieves or sets".  Hmmm. I didn't see a test for using C<ical()> to set
the date in the Date::ICal test suite.  So I wrote one:
d461 1
a461 1
Run that. I saw:
d470 4
a473 4
Whoops!  Looks like it's unimplemented.  Assume you don't have the time to fix
this. [11] Normally, you'd just comment out the test and put a note in a todo
list somewhere.  Instead, explicitly state "this test will fail" by wrapping it
in a C<TODO> block:
d493 3
a495 3
C<Test::More> doesn't say "Looks like you failed 1 tests of 1".  That '#
TODO' tells C<Test::Harness> "this is supposed to fail" and it treats a
failure as a successful test.  You can write tests even before
d498 3
a500 3
If a TODO test passes, C<Test::Harness> will report it "UNEXPECTEDLY
SUCCEEDED".  When that happens, remove the TODO block with C<local $TODO> and
turn it into a real test.
d513 1
a513 1
a C<-T> into the C<#!> line.  C<Test::Harness> will read the switches
d520 2
a521 1
When you say C<make test> it will run with taint mode on.
d541 1
a541 1
itself.  Have a look at L<Test::Inline> (formerly L<Pod::Tests>).
d555 1
a555 1
failed?  No problem, C<Test::More> employs some magic to catch that death
@

