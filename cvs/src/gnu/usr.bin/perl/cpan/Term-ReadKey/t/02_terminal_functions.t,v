head	1.1;
branch	1.1.1;
access;
symbols
	OPENBSD_6_1:1.1.1.1.0.2
	OPENBSD_6_1_BASE:1.1.1.1
	OPENBSD_6_0:1.1.1.1.0.4
	OPENBSD_6_0_BASE:1.1.1.1
	Term-ReadKey_2_33:1.1.1.1
	Term-ReadKey:1.1.1;
locks; strict;
comment	@# @;
expand	@o@;


1.1
date	2016.05.07.16.03.09;	author espie;	state Exp;
branches
	1.1.1.1;
next	;
commitid	sph5qxkJDPZ0re3i;

1.1.1.1
date	2016.05.07.16.03.09;	author espie;	state Exp;
branches;
next	;
commitid	sph5qxkJDPZ0re3i;


desc
@@



1.1
log
@Initial revision
@
text
@use strict;
use warnings;


use Test::More tests => 7;

use Term::ReadKey;
use Fcntl;

if ( not exists $ENV{COLUMNS} ){
    $ENV{COLUMNS} = 80;
    $ENV{LINES}   = 24;
}

SKIP:
{
    eval {
        if ( $^O =~ /Win32/i ){
            sysopen( IN,  'CONIN$',  O_RDWR ) or die "Unable to open console input:$!";
            sysopen( OUT, 'CONOUT$', O_RDWR ) or die "Unable to open console output:$!";
        }
        else{
            if ( open( IN, "</dev/tty" ) ){
                *OUT = *IN;
                die "Foo" unless -t OUT;
            }
            else{
                die "/dev/tty is absent\n";
            }
        }
    };
    skip( 'Because Term::ReadKey need at least a tty to be useful', 1 ) if $@@;
    *IN = *IN;    # Make single-use warning go away
    $|  = 1;
    no strict "subs";
    my $size1 = join( ",", GetTerminalSize( \IN ) );
    my $size2 = join( ",", GetTerminalSize("IN") );
    my $size3 = join( ",", GetTerminalSize(*IN) );
    my $size4 = join( ",", GetTerminalSize( \*IN ) );

    my $size_result=0;
    if ( ( $size1 eq $size2 ) && ( $size2 eq $size3 ) && ( $size3 eq $size4 ) ){
        $size_result = 1;
    }
    is($size_result, 1, "Comparing TerminalSize IN");

    my $usable_terminal=0;
    for (my $i = 1; $i < 6; $i++){
        if ( &Term::ReadKey::termoptions() == $i ){
            $usable_terminal = 1;
            last;
        }
    }
    is($usable_terminal, 1, "Manipulating the terminal.");

    my @@modes;
    eval {
        push( @@modes, "O_NODELAY" ) if &Term::ReadKey::blockoptions() & 1;
        push( @@modes, "poll()" )    if &Term::ReadKey::blockoptions() & 2;
        push( @@modes, "select()" )  if &Term::ReadKey::blockoptions() & 4;
        push( @@modes, "Win32" )     if &Term::ReadKey::blockoptions() & 8;
    };
    is($@@, '', "Check non-blocking read");

    eval {
        my @@size = GetTerminalSize(OUT);
    };
    is($@@, '', "Check TerminalSize OUT");

    eval {
        my @@speeds = GetSpeed();
    };
    is($@@, '', "Check Terminal communication speed");

    my %chars;
    eval {
        %chars = GetControlChars(IN);
    };
    is($@@, '', "Validate GetControlChars function");

    my %origchars = %chars;
    eval {
        SetControlChars( %origchars, IN );
    };
    is($@@, '', "Validate SetControlChars function");
}
@


1.1.1.1
log
@Term::ReadKey vendor import, as discussed with millert@@ and afresh1@@
@
text
@@
