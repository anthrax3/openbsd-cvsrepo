head	1.2;
access;
symbols
	PERL_5_24_2:1.1.1.3
	OPENBSD_6_1:1.2.0.4
	OPENBSD_6_1_BASE:1.2
	OPENBSD_6_0:1.1.1.2.0.16
	OPENBSD_6_0_BASE:1.1.1.2
	OPENBSD_5_9:1.1.1.2.0.10
	OPENBSD_5_9_BASE:1.1.1.2
	OPENBSD_5_8:1.1.1.2.0.12
	OPENBSD_5_8_BASE:1.1.1.2
	PERL_5_20_2:1.1.1.2
	OPENBSD_5_7:1.1.1.2.0.4
	OPENBSD_5_7_BASE:1.1.1.2
	PERL_5_20_1:1.1.1.2
	OPENBSD_5_6:1.1.1.2.0.8
	OPENBSD_5_6_BASE:1.1.1.2
	PERL_5_18_2:1.1.1.2
	PERL:1.1.1
	OPENBSD_5_5:1.1.1.2.0.6
	OPENBSD_5_5_BASE:1.1.1.2
	OPENBSD_5_4:1.1.1.2.0.2
	OPENBSD_5_4_BASE:1.1.1.2
	PERL_5_16_3:1.1.1.2
	OPENBSD_5_3:1.1.1.1.0.10
	OPENBSD_5_3_BASE:1.1.1.1
	OPENBSD_5_2:1.1.1.1.0.8
	OPENBSD_5_2_BASE:1.1.1.1
	OPENBSD_5_1_BASE:1.1.1.1
	OPENBSD_5_1:1.1.1.1.0.6
	OPENBSD_5_0:1.1.1.1.0.4
	OPENBSD_5_0_BASE:1.1.1.1
	OPENBSD_4_9:1.1.1.1.0.2
	OPENBSD_4_9_BASE:1.1.1.1
	PERL_5_12_2:1.1.1.1
	CPAN:1.1.1;
locks; strict;
comment	@# @;
expand	@o@;


1.2
date	2017.02.05.00.32.06;	author afresh1;	state Exp;
branches;
next	1.1;
commitid	cxJ08BvJA9Pt2PTM;

1.1
date	2010.09.24.14.49.04;	author millert;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	2010.09.24.14.49.04;	author millert;	state Exp;
branches;
next	1.1.1.2;

1.1.1.2
date	2013.03.25.20.08.32;	author sthen;	state Exp;
branches;
next	1.1.1.3;

1.1.1.3
date	2017.08.14.13.46.06;	author afresh1;	state Exp;
branches;
next	;
commitid	fAzrs78vdW2Yfc6A;


desc
@@


1.2
log
@Fix merge issues, remove excess files - match perl-5.24.1 dist
@
text
@#!perl
# vim:syntax=perl:

BEGIN {
    $|= 1;

    use Test::More;

    # when building perl, skip this test if Win32API::File isn't being built
    if ( $ENV{PERL_CORE} ) {
        require Config;
        if ( $Config::Config{extensions} !~ m:(?<!\S)Win32API/File(?!\S): ) {
            plan skip_all => 'Skip Win32API::File extension not built';
            exit;
        }
    }

    plan tests => 10;
}

use strict;
use warnings;
use Win32API::File qw(:ALL);
use IO::File;

my $filename = 'foo.txt';
ok(! -e $filename || unlink($filename), "unlinked $filename (if it existed)");

my $fh = Win32API::File->new("+> $filename")
    or die fileLastError();

my $tell = tell $fh;
is(0+$tell, 0, "tell \$fh == '$tell'");

my $text = "some text\n";

ok(print($fh $text), "printed 'some text\\n'");

$tell = tell $fh;
my $len = length($text) + 1; # + 1 for cr
is($tell, $len, "after printing 'some text\\n', tell is: '$tell'");

my $seek = seek($fh, 0, 0);
is(0+$seek, 0, "seek is: '$seek'");

my $eof = eof $fh;
ok(! $eof, 'not eof');

my $readline = <$fh>;

my $pretty_readline = $readline;
$pretty_readline =~ s/\r/\\r/g;  $pretty_readline =~ s/\n/\\n/g;
is($pretty_readline, "some text\\r\\n", "read line is '$pretty_readline'");

$eof = eof $fh;
ok($eof, 'reached eof');

ok(close($fh), 'closed filehandle');

# Test out binmode (should be only LF with print, no CR).

$fh = Win32API::File->new("+> $filename")
    or die fileLastError();
binmode $fh;
print $fh "hello there\n";
seek $fh, 0, 0;

$readline = <$fh>;
is($readline, "hello there\n", "binmode worked (no CR)");

close $fh;

unlink $filename;
@


1.1
log
@Initial revision
@
text
@d7 2
d11 5
a15 5
	require Config;
	if ( $Config::Config{extensions} !~ m:(?<!\S)Win32API/File(?!\S): ) {
	    print "1..0 # Skip Win32API::File extension not built\n";
	    exit();
	}
d18 1
a18 1
    print "1..10\n";
a19 1
END   { print "not ok 1\n" unless $main::loaded; }
d26 2
a27 5
$main::loaded = 1;

print "ok 1\n";

unlink "foo.txt";
d29 2
a30 2
my $fh = new Win32API::File "+> foo.txt"
	or die fileLastError();
d33 1
a33 4
print "# tell \$fh == '$tell'\n";
print "not " unless
	tell $fh == 0;
print "ok 2\n";
d37 1
a37 3
print "not " unless
	print $fh $text;
print "ok 3\n";
d40 8
a47 12
print "# after printing 'some text\\n', tell is: '$tell'\n";
print "not " unless
	$tell == length($text) + 1;
print "ok 4\n";

print "not " unless
	seek($fh, 0, 0) == 0;
print "ok 5\n";

print "not " unless
	not eof $fh;
print "ok 6\n";
d52 5
a56 2
$pretty_readline =~ s/\r/\\r/g;  $pretty_readline =~ s/\n/\\n/g;  
print "# read line is '$pretty_readline'\n";
d58 1
a58 11
print "not " unless
	$readline eq "some text\r\n";
print "ok 7\n";

print "not " unless
	eof $fh;
print "ok 8\n";

print "not " unless
	close $fh;
print "ok 9\n";
d62 2
a63 2
$fh = new Win32API::File "+> foo.txt"
	or die fileLastError();
d68 2
a69 3
print "not " unless
	<$fh> eq "hello there\n";
print "ok 10\n";
d73 1
a73 1
unlink "foo.txt";
@


1.1.1.1
log
@Perl 5.12.2 from CPAN
@
text
@@


1.1.1.2
log
@import perl 5.16.3 from CPAN - worked on by Andrew Fresh and myself
@
text
@d31 1
a31 1
my $fh = Win32API::File->new("+> foo.txt")
d80 1
a80 1
$fh = Win32API::File->new("+> foo.txt")
@


1.1.1.3
log
@Import perl-5.24.2
@
text
@a6 2
    use Test::More;

d9 5
a13 5
        require Config;
        if ( $Config::Config{extensions} !~ m:(?<!\S)Win32API/File(?!\S): ) {
            plan skip_all => 'Skip Win32API::File extension not built';
            exit;
        }
d16 1
a16 1
    plan tests => 10;
d18 1
d25 5
a29 2
my $filename = 'foo.txt';
ok(! -e $filename || unlink($filename), "unlinked $filename (if it existed)");
d31 2
a32 2
my $fh = Win32API::File->new("+> $filename")
    or die fileLastError();
d35 4
a38 1
is(0+$tell, 0, "tell \$fh == '$tell'");
d42 3
a44 1
ok(print($fh $text), "printed 'some text\\n'");
d47 12
a58 8
my $len = length($text) + 1; # + 1 for cr
is($tell, $len, "after printing 'some text\\n', tell is: '$tell'");

my $seek = seek($fh, 0, 0);
is(0+$seek, 0, "seek is: '$seek'");

my $eof = eof $fh;
ok(! $eof, 'not eof');
d63 2
a64 5
$pretty_readline =~ s/\r/\\r/g;  $pretty_readline =~ s/\n/\\n/g;
is($pretty_readline, "some text\\r\\n", "read line is '$pretty_readline'");

$eof = eof $fh;
ok($eof, 'reached eof');
d66 11
a76 1
ok(close($fh), 'closed filehandle');
d80 2
a81 2
$fh = Win32API::File->new("+> $filename")
    or die fileLastError();
d86 3
a88 2
$readline = <$fh>;
is($readline, "hello there\n", "binmode worked (no CR)");
d92 1
a92 1
unlink $filename;
@


