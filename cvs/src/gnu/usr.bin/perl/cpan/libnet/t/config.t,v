head	1.4;
access;
symbols
	OPENBSD_6_1_BASE:1.4
	OPENBSD_6_0:1.3.0.10
	OPENBSD_6_0_BASE:1.3
	OPENBSD_5_9:1.3.0.4
	OPENBSD_5_9_BASE:1.3
	OPENBSD_5_8:1.3.0.6
	OPENBSD_5_8_BASE:1.3
	PERL_5_20_2:1.1.1.1
	OPENBSD_5_7:1.3.0.2
	OPENBSD_5_7_BASE:1.3
	PERL_5_20_1:1.1.1.1
	OPENBSD_5_6:1.1.1.1.0.18
	OPENBSD_5_6_BASE:1.1.1.1
	PERL_5_18_2:1.1.1.1
	PERL:1.1.1
	OPENBSD_5_5:1.1.1.1.0.16
	OPENBSD_5_5_BASE:1.1.1.1
	OPENBSD_5_4:1.1.1.1.0.12
	OPENBSD_5_4_BASE:1.1.1.1
	PERL_5_16_3:1.1.1.1
	OPENBSD_5_3:1.1.1.1.0.10
	OPENBSD_5_3_BASE:1.1.1.1
	OPENBSD_5_2:1.1.1.1.0.8
	OPENBSD_5_2_BASE:1.1.1.1
	OPENBSD_5_1_BASE:1.1.1.1
	OPENBSD_5_1:1.1.1.1.0.6
	OPENBSD_5_0:1.1.1.1.0.4
	OPENBSD_5_0_BASE:1.1.1.1
	OPENBSD_4_9:1.1.1.1.0.2
	OPENBSD_4_9_BASE:1.1.1.1
	PERL_5_12_2:1.1.1.1
	CPAN:1.1.1;
locks; strict;
comment	@# @;
expand	@o@;


1.4
date	2017.02.05.00.32.07;	author afresh1;	state Exp;
branches;
next	1.3;
commitid	cxJ08BvJA9Pt2PTM;

1.3
date	2014.11.17.20.57.04;	author afresh1;	state Exp;
branches;
next	1.2;
commitid	QP75iYx42Uo7mMxO;

1.2
date	2014.09.05.06.53.07;	author jasper;	state Exp;
branches;
next	1.1;
commitid	xuNrf7DlYReDd0jV;

1.1
date	2010.09.24.14.49.06;	author millert;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	2010.09.24.14.49.06;	author millert;	state Exp;
branches;
next	;


desc
@@


1.4
log
@Fix merge issues, remove excess files - match perl-5.24.1 dist
@
text
@#!perl

use 5.008001;

use strict;
use warnings;

BEGIN {
    if (!eval { require Socket }) {
        print "1..0 # no Socket\n"; exit 0;
    }
    undef *{Socket::inet_aton};
    undef *{Socket::inet_ntoa};
    if (ord('A') == 193 && !eval { require Convert::EBCDIC }) {
        print "1..0 # EBCDIC but no Convert::EBCDIC\n"; exit 0;
    }
    $INC{'Socket.pm'} = 1;
}

package Socket;

sub import {
        my $pkg = caller();
        no strict 'refs'; ## no critic (TestingAndDebugging::ProhibitNoStrict)
        *{ $pkg . '::inet_aton' } = \&inet_aton;
        *{ $pkg . '::inet_ntoa' } = \&inet_ntoa;
}

my $fail = 0;
my %names;

sub set_fail {
        $fail = shift;
}

sub inet_aton {
        return if $fail;
        my $num = unpack('N', pack('C*', split(/\./, $_[0])));
        $names{$num} = $_[0];
        return $num;
}

sub inet_ntoa {
        return if $fail;
        return $names{$_[0]};
}

package main;


(my $libnet_t = __FILE__) =~ s/config.t/libnet_t.pl/;
require $libnet_t;

print "1..10\n";

use Net::Config;
ok( exists $INC{'Net/Config.pm'}, 'Net::Config should have been used' );
ok( keys %NetConfig, '%NetConfig should be imported' );

Socket::set_fail(1);
undef $NetConfig{'ftp_firewall'};
is( Net::Config->requires_firewall(), 0, 
        'requires_firewall() should return 0 without ftp_firewall defined' );

$NetConfig{'ftp_firewall'} = 1;
is( Net::Config->requires_firewall('a.host.not.there'), -1,
        '... should return -1 without a valid hostname' );

Socket::set_fail(0);
delete $NetConfig{'local_netmask'};
is( Net::Config->requires_firewall('127.0.0.1'), 0,
        '... should return 0 without local_netmask defined' );

$NetConfig{'local_netmask'} = '127.0.0.1/24';
is( Net::Config->requires_firewall('127.0.0.1'), 0,
        '... should return false if host is within netmask' );
is( Net::Config->requires_firewall('192.168.10.0'), 1,
        '... should return true if host is outside netmask' );

# now try more netmasks
$NetConfig{'local_netmask'} = [ '127.0.0.1/24', '10.0.0.0/8' ];
is( Net::Config->requires_firewall('10.10.255.254'), 0,
        '... should find success with mutiple local netmasks' );
is( Net::Config->requires_firewall('192.168.10.0'), 1,
        '... should handle failure with multiple local netmasks' );

is( \&Net::Config::is_external, \&Net::Config::requires_firewall,
        'is_external() should be an alias for requires_firewall()' );
@


1.3
log
@Fix merge conflicts, remove extra files, match upstream perl-5.20.1

ok deraadt@@ sthen@@ espie@@ miod@@
@
text
@d1 6
a6 1
#!./perl -w
d9 2
a10 6
    if ($ENV{PERL_CORE}) {
	chdir 't' if -d 't';
	@@INC = '../lib';
    }
    if (!eval "require Socket") {
	print "1..0 # no Socket\n"; exit 0;
d14 1
a14 1
    if (ord('A') == 193 && !eval "require Convert::EBCDIC") {
d23 4
a26 4
	my $pkg = caller();
	no strict 'refs';
	*{ $pkg . '::inet_aton' } = \&inet_aton;
	*{ $pkg . '::inet_ntoa' } = \&inet_ntoa;
d33 1
a33 1
	$fail = shift;
d37 4
a40 4
	return if $fail;
	my $num = unpack('N', pack('C*', split(/\./, $_[0])));
	$names{$num} = $_[0];
	return $num;
d44 2
a45 2
	return if $fail;
	return $names{$_[0]};
d63 1
a63 1
	'requires_firewall() should return 0 without ftp_firewall defined' );
d67 1
a67 1
	'... should return -1 without a valid hostname' );
d72 1
a72 1
	'... should return 0 without local_netmask defined' );
d76 1
a76 1
	'... should return false if host is within netmask' );
d78 1
a78 1
	'... should return true if host is outside netmask' );
d83 1
a83 1
	'... should find success with mutiple local netmasks' );
d85 1
a85 1
	'... should handle failure with multiple local netmasks' );
d88 1
a88 1
	'is_external() should be an alias for requires_firewall()' );
@


1.2
log
@update libnet to 1.27; various bugfixes and improvements:
http://cpansearch.perl.org/src/SHAY/libnet-1.27/Changes

ok millert@@
@
text
@d5 2
a6 2
        chdir 't' if -d 't';
        @@INC = '../lib';
d9 1
a9 1
        print "1..0 # no Socket\n"; exit 0;
d22 4
a25 4
        my $pkg = caller();
        no strict 'refs';
        *{ $pkg . '::inet_aton' } = \&inet_aton;
        *{ $pkg . '::inet_ntoa' } = \&inet_ntoa;
d32 1
a32 1
        $fail = shift;
d36 4
a39 4
        return if $fail;
        my $num = unpack('N', pack('C*', split(/\./, $_[0])));
        $names{$num} = $_[0];
        return $num;
d43 2
a44 2
        return if $fail;
        return $names{$_[0]};
d62 1
a62 1
        'requires_firewall() should return 0 without ftp_firewall defined' );
d66 1
a66 1
        '... should return -1 without a valid hostname' );
d71 1
a71 1
        '... should return 0 without local_netmask defined' );
d75 1
a75 1
        '... should return false if host is within netmask' );
d77 1
a77 1
        '... should return true if host is outside netmask' );
d82 1
a82 1
        '... should find success with mutiple local netmasks' );
d84 1
a84 1
        '... should handle failure with multiple local netmasks' );
d87 1
a87 1
        'is_external() should be an alias for requires_firewall()' );
@


1.1
log
@Initial revision
@
text
@d5 2
a6 2
	chdir 't' if -d 't';
	@@INC = '../lib';
d9 1
a9 1
	print "1..0 # no Socket\n"; exit 0;
d22 4
a25 4
	my $pkg = caller();
	no strict 'refs';
	*{ $pkg . '::inet_aton' } = \&inet_aton;
	*{ $pkg . '::inet_ntoa' } = \&inet_ntoa;
d32 1
a32 1
	$fail = shift;
d36 4
a39 4
	return if $fail;
	my $num = unpack('N', pack('C*', split(/\./, $_[0])));
	$names{$num} = $_[0];
	return $num;
d43 2
a44 2
	return if $fail;
	return $names{$_[0]};
d62 1
a62 1
	'requires_firewall() should return 0 without ftp_firewall defined' );
d66 1
a66 1
	'... should return -1 without a valid hostname' );
d71 1
a71 1
	'... should return 0 without local_netmask defined' );
d75 1
a75 1
	'... should return false if host is within netmask' );
d77 1
a77 1
	'... should return true if host is outside netmask' );
d82 1
a82 1
	'... should find success with mutiple local netmasks' );
d84 1
a84 1
	'... should handle failure with multiple local netmasks' );
d87 1
a87 1
	'is_external() should be an alias for requires_firewall()' );
@


1.1.1.1
log
@Perl 5.12.2 from CPAN
@
text
@@
