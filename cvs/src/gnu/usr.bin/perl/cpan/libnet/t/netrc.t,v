head	1.4;
access;
symbols
	OPENBSD_6_2:1.4.0.6
	OPENBSD_6_2_BASE:1.4
	PERL_5_24_2:1.1.1.3
	OPENBSD_6_1:1.4.0.4
	OPENBSD_6_1_BASE:1.4
	OPENBSD_6_0:1.3.0.10
	OPENBSD_6_0_BASE:1.3
	OPENBSD_5_9:1.3.0.4
	OPENBSD_5_9_BASE:1.3
	OPENBSD_5_8:1.3.0.6
	OPENBSD_5_8_BASE:1.3
	PERL_5_20_2:1.1.1.2
	OPENBSD_5_7:1.3.0.2
	OPENBSD_5_7_BASE:1.3
	PERL_5_20_1:1.1.1.2
	OPENBSD_5_6:1.1.1.1.0.18
	OPENBSD_5_6_BASE:1.1.1.1
	PERL_5_18_2:1.1.1.1
	PERL:1.1.1
	OPENBSD_5_5:1.1.1.1.0.16
	OPENBSD_5_5_BASE:1.1.1.1
	OPENBSD_5_4:1.1.1.1.0.12
	OPENBSD_5_4_BASE:1.1.1.1
	PERL_5_16_3:1.1.1.1
	OPENBSD_5_3:1.1.1.1.0.10
	OPENBSD_5_3_BASE:1.1.1.1
	OPENBSD_5_2:1.1.1.1.0.8
	OPENBSD_5_2_BASE:1.1.1.1
	OPENBSD_5_1_BASE:1.1.1.1
	OPENBSD_5_1:1.1.1.1.0.6
	OPENBSD_5_0:1.1.1.1.0.4
	OPENBSD_5_0_BASE:1.1.1.1
	OPENBSD_4_9:1.1.1.1.0.2
	OPENBSD_4_9_BASE:1.1.1.1
	PERL_5_12_2:1.1.1.1
	CPAN:1.1.1;
locks; strict;
comment	@# @;
expand	@o@;


1.4
date	2017.02.05.00.32.07;	author afresh1;	state Exp;
branches;
next	1.3;
commitid	cxJ08BvJA9Pt2PTM;

1.3
date	2014.11.17.20.57.04;	author afresh1;	state Exp;
branches;
next	1.2;
commitid	QP75iYx42Uo7mMxO;

1.2
date	2014.09.05.06.53.07;	author jasper;	state Exp;
branches;
next	1.1;
commitid	xuNrf7DlYReDd0jV;

1.1
date	2010.09.24.14.49.06;	author millert;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	2010.09.24.14.49.06;	author millert;	state Exp;
branches;
next	1.1.1.2;

1.1.1.2
date	2014.11.17.20.52.48;	author afresh1;	state Exp;
branches;
next	1.1.1.3;
commitid	B31cAbBIXiCqnL97;

1.1.1.3
date	2017.08.14.13.45.39;	author afresh1;	state Exp;
branches;
next	;
commitid	fAzrs78vdW2Yfc6A;


desc
@@


1.4
log
@Fix merge issues, remove excess files - match perl-5.24.1 dist
@
text
@#!perl

use 5.008001;

use strict;
use warnings;

BEGIN {
    if (!eval { require Socket }) {
        print "1..0 # no Socket\n"; exit 0;
    }
    if (ord('A') == 193 && !eval { require Convert::EBCDIC }) {
        print "1..0 # EBCDIC but no Convert::EBCDIC\n"; exit 0;
    }
}

use Cwd;
print "1..20\n";

# for testing _readrc
$ENV{HOME} = Cwd::cwd();

# avoid "used only once" warning
local (*CORE::GLOBAL::getpwuid, *CORE::GLOBAL::stat);

*CORE::GLOBAL::getpwuid = sub ($) {
        ((undef) x 7, Cwd::cwd());
};

# for testing _readrc
my @@stat;
*CORE::GLOBAL::stat = sub (*) {
        return @@stat;
};

# for testing _readrc
$INC{'FileHandle.pm'} = 1;

(my $libnet_t = __FILE__) =~ s/\w+.t$/libnet_t.pl/;
require $libnet_t;

# now that the tricks are out of the way...
eval { require Net::Netrc; };
ok( !$@@, 'should be able to require() Net::Netrc safely' );
ok( exists $INC{'Net/Netrc.pm'}, 'should be able to use Net::Netrc' );
$Net::Netrc::TESTING=$Net::Netrc::TESTING=1;

SKIP: {
        skip('incompatible stat() handling for OS', 4), next SKIP 
                if $^O =~ /os2|win32|macos|cygwin/i;

        my $warn;
        local $SIG{__WARN__} = sub {
                $warn = shift;
        };

        # add write access for group/other
        $stat[2] = 077; ## no critic (ValuesAndExpressions::ProhibitLeadingZeros)
        ok( !defined(Net::Netrc->_readrc()),
                '_readrc() should not read world-writable file' );
        ok( scalar($warn =~ /^Bad permissions:/),
                '... and should warn about it' );

        # the owner field should still not match
        $stat[2] = 0;

        if ($<) { 
          ok( !defined(Net::Netrc->_readrc()),
              '_readrc() should not read file owned by someone else' ); 
          ok( scalar($warn =~ /^Not owner:/),
                '... and should warn about it' ); 
        } else { 
          skip("testing as root",2);
        } 
}

# this field must now match, to avoid the last-tested warning
$stat[4] = $<;

# this curious mix of spaces and quotes tests a regex at line 79 (version 2.11)
FileHandle::set_lines(split(/\n/, <<LINES));
macdef   bar
login    baz
machine  "foo"
login    nigol "password" drowssap
machine  foo "login" l2
password p2
account  tnuocca
default  login "baz" password p2
default  "login" baz password p3
macdef
LINES

# having set several lines and the uid, this should succeed
is( Net::Netrc->_readrc(), 1, '_readrc() should succeed now' );

# on 'foo', the login is 'nigol'
is( Net::Netrc->lookup('foo')->{login}, 'nigol', 
        'lookup() should find value by host name' );

# on 'foo' with login 'l2', the password is 'p2'
is( Net::Netrc->lookup('foo', 'l2')->{password}, 'p2',
        'lookup() should find value by hostname and login name' );

# the default password is 'p3', as later declarations have priority
is( Net::Netrc->lookup()->{password}, 'p3', 
        'lookup() should find default value' );

# lookup() ignores the login parameter when using default data
is( Net::Netrc->lookup('default', 'baz')->{password}, 'p3',
        'lookup() should ignore passed login when searching default' );

# lookup() goes to default data if hostname cannot be found in config data 
is( Net::Netrc->lookup('abadname')->{login}, 'baz',
        'lookup() should use default for unknown machine name' );

# now test these accessors
my $instance = bless({}, 'Net::Netrc');
for my $accessor (qw( login account password )) {
        is( $instance->$accessor(), undef, 
                "$accessor() should return undef if $accessor is not set" );
        $instance->{$accessor} = $accessor;
        is( $instance->$accessor(), $accessor,
                "$accessor() should return value when $accessor is set" );
}

# and the three-for-one accessor
is( scalar( () = $instance->lpa()), 3, 
        'lpa() should return login, password, account');
is( join(' ', $instance->lpa), 'login password account', 
        'lpa() should return appropriate values for l, p, and a' );

package FileHandle;

sub new {
        tie *FH, 'FileHandle', @@_;
        bless \*FH, $_[0];
}

sub TIEHANDLE {
        my ($class, $file, $mode) = @@_[0,2,3];
        bless({ file => $file, mode => $mode }, $class);
}

my @@lines;
sub set_lines {
        @@lines = @@_;
}

sub READLINE {
        shift @@lines;
}

sub close { 1 }

@


1.3
log
@Fix merge conflicts, remove extra files, match upstream perl-5.20.1

ok deraadt@@ sthen@@ espie@@ miod@@
@
text
@d1 6
a6 1
#!./perl
d9 2
a10 6
    if ($ENV{PERL_CORE}) {
	chdir 't' if -d 't';
	@@INC = '../lib';
    }
    if (!eval "require Socket") {
	print "1..0 # no Socket\n"; exit 0;
d12 1
a12 1
    if (ord('A') == 193 && !eval "require Convert::EBCDIC") {
a16 2
use strict;

d27 1
a27 1
	((undef) x 7, Cwd::cwd());
d33 1
a33 1
	return @@stat;
d49 14
a62 14
	skip('incompatible stat() handling for OS', 4), next SKIP 
		if ($^O =~ /os2|win32|macos|cygwin/i or $] < 5.005);
	
	my $warn;
	local $SIG{__WARN__} = sub {
		$warn = shift;
	};

	# add write access for group/other
	$stat[2] = 077;
	ok( !defined(Net::Netrc::_readrc()),
		'_readrc() should not read world-writable file' );
	ok( scalar($warn =~ /^Bad permissions:/),
		'... and should warn about it' );
d64 2
a65 2
	# the owner field should still not match
	$stat[2] = 0;
d68 1
a68 1
          ok( !defined(Net::Netrc::_readrc()), 
d71 1
a71 1
		'... and should warn about it' ); 
d82 9
a90 9
macdef bar
login	baz
 machine "foo"
login	nigol "password" drowssap
machine foo "login"	l2
	password p2
account tnuocca
default	login "baz" password p2
default "login" baz password p3
d95 1
a95 1
is( Net::Netrc::_readrc(), 1, '_readrc() should succeed now' );
d99 1
a99 1
	'lookup() should find value by host name' );
d103 1
a103 1
	'lookup() should find value by hostname and login name' );
d107 1
a107 1
	'lookup() should find default value' );
d111 1
a111 1
	'lookup() should ignore passed login when searching default' );
d115 1
a115 1
	'lookup() should use default for unknown machine name' );
d120 5
a124 5
	is( $instance->$accessor(), undef, 
		"$accessor() should return undef if $accessor is not set" );
	$instance->{$accessor} = $accessor;
	is( $instance->$accessor(), $accessor,
		"$accessor() should return value when $accessor is set" );
d129 1
a129 1
	'lpa() should return login, password, account');
d131 1
a131 1
	'lpa() should return appropriate values for l, p, and a' );
d136 2
a137 2
	tie *FH, 'FileHandle', @@_;
	bless \*FH, $_[0];
d141 2
a142 2
	my ($class, $file, $mode) = @@_[0,2,3];
	bless({ file => $file, mode => $mode }, $class);
d147 1
a147 1
	@@lines = @@_;
d151 1
a151 1
	shift @@lines;
@


1.2
log
@update libnet to 1.27; various bugfixes and improvements:
http://cpansearch.perl.org/src/SHAY/libnet-1.27/Changes

ok millert@@
@
text
@d5 2
a6 2
        chdir 't' if -d 't';
        @@INC = '../lib';
d9 1
a9 1
        print "1..0 # no Socket\n"; exit 0;
d28 1
a28 1
        ((undef) x 7, Cwd::cwd());
d34 1
a34 1
        return @@stat;
d50 14
a63 2
        skip('incompatible stat() handling for OS', 4), next SKIP 
                if ($^O =~ /os2|win32|macos|cygwin/i or $] < 5.005);
d65 2
a66 14
        my $warn;
        local $SIG{__WARN__} = sub {
                $warn = shift;
        };

        # add write access for group/other
        $stat[2] = 077;
        ok( !defined(Net::Netrc::_readrc()),
                '_readrc() should not read world-writable file' );
        ok( scalar($warn =~ /^Bad permissions:/),
                '... and should warn about it' );

        # the owner field should still not match
        $stat[2] = 0;
d72 1
a72 1
                '... and should warn about it' ); 
d83 9
a91 9
macdef   bar
login    baz
machine  "foo"
login    nigol "password" drowssap
machine  foo "login" l2
password p2
account  tnuocca
default  login "baz" password p2
default  "login" baz password p3
d100 1
a100 1
        'lookup() should find value by host name' );
d104 1
a104 1
        'lookup() should find value by hostname and login name' );
d108 1
a108 1
        'lookup() should find default value' );
d112 1
a112 1
        'lookup() should ignore passed login when searching default' );
d116 1
a116 1
        'lookup() should use default for unknown machine name' );
d121 5
a125 5
        is( $instance->$accessor(), undef, 
                "$accessor() should return undef if $accessor is not set" );
        $instance->{$accessor} = $accessor;
        is( $instance->$accessor(), $accessor,
                "$accessor() should return value when $accessor is set" );
d130 1
a130 1
        'lpa() should return login, password, account');
d132 1
a132 1
        'lpa() should return appropriate values for l, p, and a' );
d137 2
a138 2
        tie *FH, 'FileHandle', @@_;
        bless \*FH, $_[0];
d142 2
a143 2
        my ($class, $file, $mode) = @@_[0,2,3];
        bless({ file => $file, mode => $mode }, $class);
d148 1
a148 1
        @@lines = @@_;
d152 1
a152 1
        shift @@lines;
@


1.1
log
@Initial revision
@
text
@d5 2
a6 2
	chdir 't' if -d 't';
	@@INC = '../lib';
d9 1
a9 1
	print "1..0 # no Socket\n"; exit 0;
d28 1
a28 1
	((undef) x 7, Cwd::cwd());
d34 1
a34 1
	return @@stat;
d47 1
d50 2
a51 14
	skip('incompatible stat() handling for OS', 4), next SKIP 
		if ($^O =~ /os2|win32|macos|cygwin/i or $] < 5.005);
	
	my $warn;
	local $SIG{__WARN__} = sub {
		$warn = shift;
	};

	# add write access for group/other
	$stat[2] = 077;
	ok( !defined(Net::Netrc::_readrc()),
		'_readrc() should not read world-writable file' );
	ok( scalar($warn =~ /^Bad permissions:/),
		'... and should warn about it' );
d53 14
a66 2
	# the owner field should still not match
	$stat[2] = 0;
d72 1
a72 1
		'... and should warn about it' ); 
d83 9
a91 9
macdef bar
login	baz
 machine "foo"
login	nigol "password" drowssap
machine foo "login"	l2
	password p2
account tnuocca
default	login "baz" password p2
default "login" baz password p3
d100 1
a100 1
	'lookup() should find value by host name' );
d104 1
a104 1
	'lookup() should find value by hostname and login name' );
d108 1
a108 1
	'lookup() should find default value' );
d112 1
a112 1
	'lookup() should ignore passed login when searching default' );
d116 1
a116 1
	'lookup() should use default for unknown machine name' );
d121 5
a125 5
	is( $instance->$accessor(), undef, 
		"$accessor() should return undef if $accessor is not set" );
	$instance->{$accessor} = $accessor;
	is( $instance->$accessor(), $accessor,
		"$accessor() should return value when $accessor is set" );
d130 1
a130 1
	'lpa() should return login, password, account');
d132 1
a132 1
	'lpa() should return appropriate values for l, p, and a' );
d137 2
a138 2
	tie *FH, 'FileHandle', @@_;
	bless \*FH, $_[0];
d142 2
a143 2
	my ($class, $file, $mode) = @@_[0,2,3];
	bless({ file => $file, mode => $mode }, $class);
d148 1
a148 1
	@@lines = @@_;
d152 1
a152 1
	shift @@lines;
@


1.1.1.1
log
@Perl 5.12.2 from CPAN
@
text
@@


1.1.1.2
log
@Import perl-5.20.1
@
text
@a46 1
$Net::Netrc::TESTING=$Net::Netrc::TESTING=1;
@


1.1.1.3
log
@Import perl-5.24.2
@
text
@d1 1
a1 6
#!perl

use 5.008001;

use strict;
use warnings;
d4 6
a9 2
    if (!eval { require Socket }) {
        print "1..0 # no Socket\n"; exit 0;
d11 1
a11 1
    if (ord('A') == 193 && !eval { require Convert::EBCDIC }) {
d16 2
d28 1
a28 1
        ((undef) x 7, Cwd::cwd());
d34 1
a34 1
        return @@stat;
d50 14
a63 14
        skip('incompatible stat() handling for OS', 4), next SKIP 
                if $^O =~ /os2|win32|macos|cygwin/i;

        my $warn;
        local $SIG{__WARN__} = sub {
                $warn = shift;
        };

        # add write access for group/other
        $stat[2] = 077; ## no critic (ValuesAndExpressions::ProhibitLeadingZeros)
        ok( !defined(Net::Netrc->_readrc()),
                '_readrc() should not read world-writable file' );
        ok( scalar($warn =~ /^Bad permissions:/),
                '... and should warn about it' );
d65 2
a66 2
        # the owner field should still not match
        $stat[2] = 0;
d69 1
a69 1
          ok( !defined(Net::Netrc->_readrc()),
d72 1
a72 1
                '... and should warn about it' ); 
d83 9
a91 9
macdef   bar
login    baz
machine  "foo"
login    nigol "password" drowssap
machine  foo "login" l2
password p2
account  tnuocca
default  login "baz" password p2
default  "login" baz password p3
d96 1
a96 1
is( Net::Netrc->_readrc(), 1, '_readrc() should succeed now' );
d100 1
a100 1
        'lookup() should find value by host name' );
d104 1
a104 1
        'lookup() should find value by hostname and login name' );
d108 1
a108 1
        'lookup() should find default value' );
d112 1
a112 1
        'lookup() should ignore passed login when searching default' );
d116 1
a116 1
        'lookup() should use default for unknown machine name' );
d121 5
a125 5
        is( $instance->$accessor(), undef, 
                "$accessor() should return undef if $accessor is not set" );
        $instance->{$accessor} = $accessor;
        is( $instance->$accessor(), $accessor,
                "$accessor() should return value when $accessor is set" );
d130 1
a130 1
        'lpa() should return login, password, account');
d132 1
a132 1
        'lpa() should return appropriate values for l, p, and a' );
d137 2
a138 2
        tie *FH, 'FileHandle', @@_;
        bless \*FH, $_[0];
d142 2
a143 2
        my ($class, $file, $mode) = @@_[0,2,3];
        bless({ file => $file, mode => $mode }, $class);
d148 1
a148 1
        @@lines = @@_;
d152 1
a152 1
        shift @@lines;
@


