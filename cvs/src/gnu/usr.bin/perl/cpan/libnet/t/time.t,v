head	1.4;
access;
symbols
	OPENBSD_6_2:1.4.0.2
	OPENBSD_6_2_BASE:1.4
	PERL_5_24_2:1.1.1.2
	OPENBSD_6_1:1.4.0.4
	OPENBSD_6_1_BASE:1.4
	OPENBSD_6_0:1.3.0.10
	OPENBSD_6_0_BASE:1.3
	OPENBSD_5_9:1.3.0.4
	OPENBSD_5_9_BASE:1.3
	OPENBSD_5_8:1.3.0.6
	OPENBSD_5_8_BASE:1.3
	PERL_5_20_2:1.1.1.1
	OPENBSD_5_7:1.3.0.2
	OPENBSD_5_7_BASE:1.3
	PERL_5_20_1:1.1.1.1
	OPENBSD_5_6:1.1.1.1.0.18
	OPENBSD_5_6_BASE:1.1.1.1
	PERL_5_18_2:1.1.1.1
	PERL:1.1.1
	OPENBSD_5_5:1.1.1.1.0.16
	OPENBSD_5_5_BASE:1.1.1.1
	OPENBSD_5_4:1.1.1.1.0.12
	OPENBSD_5_4_BASE:1.1.1.1
	PERL_5_16_3:1.1.1.1
	OPENBSD_5_3:1.1.1.1.0.10
	OPENBSD_5_3_BASE:1.1.1.1
	OPENBSD_5_2:1.1.1.1.0.8
	OPENBSD_5_2_BASE:1.1.1.1
	OPENBSD_5_1_BASE:1.1.1.1
	OPENBSD_5_1:1.1.1.1.0.6
	OPENBSD_5_0:1.1.1.1.0.4
	OPENBSD_5_0_BASE:1.1.1.1
	OPENBSD_4_9:1.1.1.1.0.2
	OPENBSD_4_9_BASE:1.1.1.1
	PERL_5_12_2:1.1.1.1
	CPAN:1.1.1;
locks; strict;
comment	@# @;
expand	@o@;


1.4
date	2017.02.05.00.32.07;	author afresh1;	state Exp;
branches;
next	1.3;
commitid	cxJ08BvJA9Pt2PTM;

1.3
date	2014.11.17.20.57.04;	author afresh1;	state Exp;
branches;
next	1.2;
commitid	QP75iYx42Uo7mMxO;

1.2
date	2014.09.05.06.53.07;	author jasper;	state Exp;
branches;
next	1.1;
commitid	xuNrf7DlYReDd0jV;

1.1
date	2010.09.24.14.49.06;	author millert;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	2010.09.24.14.49.06;	author millert;	state Exp;
branches;
next	1.1.1.2;

1.1.1.2
date	2017.08.14.13.45.39;	author afresh1;	state Exp;
branches;
next	;
commitid	fAzrs78vdW2Yfc6A;


desc
@@


1.4
log
@Fix merge issues, remove excess files - match perl-5.24.1 dist
@
text
@#!perl

use 5.008001;

use strict;
use warnings;

BEGIN {
    if (!eval { require Socket }) {
        print "1..0 # no Socket\n"; exit 0;
    }
    if (ord('A') == 193 && !eval { require Convert::EBCDIC }) {
        print "1..0 # EBCDIC but no Convert::EBCDIC\n"; exit 0;
    }
    $INC{'IO/Socket.pm'} = 1;
    $INC{'IO/Select.pm'} = 1;
    $INC{'IO/Socket/INET.pm'} = 1;
}

(my $libnet_t = __FILE__) =~ s/time.t/libnet_t.pl/;
require $libnet_t;

print "1..12\n";
# cannot use(), otherwise it will use IO::Socket and IO::Select
eval{ require Net::Time; };
ok( !$@@, 'should be able to require() Net::Time safely' );
ok( exists $INC{'Net/Time.pm'}, 'should be able to use Net::Time' );

# force the socket to fail
make_fail('IO::Socket::INET', 'new');
my $badsock = Net::Time::_socket('foo', 1, 'bar', 'baz');
is( $badsock, undef, '_socket() should fail if Socket creation fails' );

# if socket is created with protocol UDP (default), it will send a newline
my $sock = Net::Time::_socket('foo', 2, 'bar'); 
ok( $sock->isa('IO::Socket::INET'), 'should be an IO::Socket::INET object' );
is( $sock->{sent}, "\n", 'should send \n with UDP protocol set' );
is( $sock->{timeout}, 120, 'timeout should default to 120' );

# now try it with a custom timeout and a different protocol
$sock = Net::Time::_socket('foo', 3, 'bar', 'tcp', 11);
ok( $sock->isa('IO::Socket::INET'), 'should be an IO::Socket::INET object' );
is( $sock->{sent}, undef, '_socket() should send nothing unless UDP protocol' );
is( $sock->{PeerAddr}, 'bar', '_socket() should set PeerAddr in socket' );
is( $sock->{timeout}, 11, '_socket() should respect custom timeout value' );

# inet_daytime
# check for correct args (daytime, 13)
IO::Socket::INET::set_message('z');
is( Net::Time::inet_daytime('bob'), 'z', 'inet_daytime() should receive data' );

# magic numbers defined in Net::Time
my $offset = $^O eq 'MacOS' ?
        (4 * 31536000) : (70 * 31536000 + 17 * 86400);

# check for correct args (time, 13)
# pretend it is only six seconds since the offset, create a fake message
# inet_time
IO::Socket::INET::set_message(pack("N", $offset + 6));
is( Net::Time::inet_time('foo'), 6, 
        'inet_time() should calculate time since offset for time()' );


my %fail;

sub make_fail {
        my ($pack, $func, $num) = @@_;
        $num = 1 unless defined $num;

        $fail{$pack}{$func} = $num;
}

package IO::Socket::INET;

$fail{'IO::Socket::INET'} = {
        new     => 0,
        'send'  => 0,
};

sub new {
        my $class = shift;
        return if $fail{$class}{new} and $fail{$class}{new}--;
        bless( { @@_ }, $class );
}

sub send {
        my $self = shift;
        my $class = ref($self);
        return if $fail{$class}{'send'} and $fail{$class}{'send'}--;
        $self->{sent} .= shift;
}

my $msg;
sub set_message {
        if (ref($_[0])) {
                $_[0]->{msg} = $_[1];
        } else {
                $msg = shift;
        }
}

sub do_recv  {
        my ($len, $msg) = @@_[1,2];
        $_[0] .= substr($msg, 0, $len);
}

sub recv {
        my ($self, $buf, $length, $flags) = @@_;
        my $message = exists $self->{msg} ?
                $self->{msg} : $msg;

        if (defined($message)) {
                do_recv($_[1], $length, $message);
        }
        1;
}

package IO::Select;

sub new {
        my $class = shift;
        return if defined $fail{$class}{new} and $fail{$class}{new}--;
        bless({sock => shift}, $class);
}

sub can_read {
        my ($self, $timeout) = @@_;
        my $class = ref($self);
        return if defined $fail{$class}{can_read} and $fail{class}{can_read}--;
        $self->{sock}{timeout} = $timeout;
        1;
}

1;
@


1.3
log
@Fix merge conflicts, remove extra files, match upstream perl-5.20.1

ok deraadt@@ sthen@@ espie@@ miod@@
@
text
@d1 6
a6 1
#!./perl -w
d9 2
a10 6
    if ($ENV{PERL_CORE}) {
	chdir 't' if -d 't';
	@@INC = '../lib';
    }
    if (!eval "require Socket") {
	print "1..0 # no Socket\n"; exit 0;
d12 2
a13 2
    if (ord('A') == 193 && !eval "require Convert::EBCDIC") {
	print "1..0 # EBCDIC but no Convert::EBCDIC\n"; exit 0;
d54 1
a54 1
	(4 * 31536000) : (70 * 31536000 + 17 * 86400);
d61 1
a61 1
	'inet_time() should calculate time since offset for time()' );
d67 2
a68 2
	my ($pack, $func, $num) = @@_;
	$num = 1 unless defined $num;
d70 1
a70 1
	$fail{$pack}{$func} = $num;
d76 2
a77 2
	new		=> 0,
	'send'	=> 0,
d81 3
a83 3
	my $class = shift;
	return if $fail{$class}{new} and $fail{$class}{new}--;
	bless( { @@_ }, $class );
d87 4
a90 4
	my $self = shift;
	my $class = ref($self);
	return if $fail{$class}{'send'} and $fail{$class}{'send'}--;
	$self->{sent} .= shift;
d95 5
a99 5
	if (ref($_[0])) {
		$_[0]->{msg} = $_[1];
	} else {
		$msg = shift;
	}
d103 2
a104 2
	my ($len, $msg) = @@_[1,2];
	$_[0] .= substr($msg, 0, $len);
d108 8
a115 8
	my ($self, $buf, $length, $flags) = @@_;
	my $message = exists $self->{msg} ?
		$self->{msg} : $msg;

	if (defined($message)) {
		do_recv($_[1], $length, $message);
	}
	1;
d121 3
a123 3
	my $class = shift;
	return if defined $fail{$class}{new} and $fail{$class}{new}--;
	bless({sock => shift}, $class);
d127 5
a131 5
	my ($self, $timeout) = @@_;
	my $class = ref($self);
	return if defined $fail{$class}{can_read} and $fail{class}{can_read}--;
	$self->{sock}{timeout} = $timeout;
	1;
@


1.2
log
@update libnet to 1.27; various bugfixes and improvements:
http://cpansearch.perl.org/src/SHAY/libnet-1.27/Changes

ok millert@@
@
text
@d5 2
a6 2
        chdir 't' if -d 't';
        @@INC = '../lib';
d9 1
a9 1
        print "1..0 # no Socket\n"; exit 0;
d12 1
a12 1
        print "1..0 # EBCDIC but no Convert::EBCDIC\n"; exit 0;
d53 1
a53 1
        (4 * 31536000) : (70 * 31536000 + 17 * 86400);
d60 1
a60 1
        'inet_time() should calculate time since offset for time()' );
d66 2
a67 2
        my ($pack, $func, $num) = @@_;
        $num = 1 unless defined $num;
d69 1
a69 1
        $fail{$pack}{$func} = $num;
d75 2
a76 2
        new     => 0,
        'send'  => 0,
d80 3
a82 3
        my $class = shift;
        return if $fail{$class}{new} and $fail{$class}{new}--;
        bless( { @@_ }, $class );
d86 4
a89 4
        my $self = shift;
        my $class = ref($self);
        return if $fail{$class}{'send'} and $fail{$class}{'send'}--;
        $self->{sent} .= shift;
d94 5
a98 5
        if (ref($_[0])) {
                $_[0]->{msg} = $_[1];
        } else {
                $msg = shift;
        }
d102 2
a103 2
        my ($len, $msg) = @@_[1,2];
        $_[0] .= substr($msg, 0, $len);
d107 8
a114 8
        my ($self, $buf, $length, $flags) = @@_;
        my $message = exists $self->{msg} ?
                $self->{msg} : $msg;

        if (defined($message)) {
                do_recv($_[1], $length, $message);
        }
        1;
d120 3
a122 3
        my $class = shift;
        return if defined $fail{$class}{new} and $fail{$class}{new}--;
        bless({sock => shift}, $class);
d126 5
a130 5
        my ($self, $timeout) = @@_;
        my $class = ref($self);
        return if defined $fail{$class}{can_read} and $fail{class}{can_read}--;
        $self->{sock}{timeout} = $timeout;
        1;
@


1.1
log
@Initial revision
@
text
@d5 2
a6 2
	chdir 't' if -d 't';
	@@INC = '../lib';
d9 1
a9 1
	print "1..0 # no Socket\n"; exit 0;
d12 1
a12 1
	print "1..0 # EBCDIC but no Convert::EBCDIC\n"; exit 0;
d53 1
a53 1
	(4 * 31536000) : (70 * 31536000 + 17 * 86400);
d60 1
a60 1
	'inet_time() should calculate time since offset for time()' );
d66 2
a67 2
	my ($pack, $func, $num) = @@_;
	$num = 1 unless defined $num;
d69 1
a69 1
	$fail{$pack}{$func} = $num;
d75 2
a76 2
	new		=> 0,
	'send'	=> 0,
d80 3
a82 3
	my $class = shift;
	return if $fail{$class}{new} and $fail{$class}{new}--;
	bless( { @@_ }, $class );
d86 4
a89 4
	my $self = shift;
	my $class = ref($self);
	return if $fail{$class}{'send'} and $fail{$class}{'send'}--;
	$self->{sent} .= shift;
d94 5
a98 5
	if (ref($_[0])) {
		$_[0]->{msg} = $_[1];
	} else {
		$msg = shift;
	}
d102 2
a103 2
	my ($len, $msg) = @@_[1,2];
	$_[0] .= substr($msg, 0, $len);
d107 8
a114 8
	my ($self, $buf, $length, $flags) = @@_;
	my $message = exists $self->{msg} ?
		$self->{msg} : $msg;

	if (defined($message)) {
		do_recv($_[1], $length, $message);
	}
	1;
d120 3
a122 3
	my $class = shift;
	return if defined $fail{$class}{new} and $fail{$class}{new}--;
	bless({sock => shift}, $class);
d126 5
a130 5
	my ($self, $timeout) = @@_;
	my $class = ref($self);
	return if defined $fail{$class}{can_read} and $fail{class}{can_read}--;
	$self->{sock}{timeout} = $timeout;
	1;
@


1.1.1.1
log
@Perl 5.12.2 from CPAN
@
text
@@


1.1.1.2
log
@Import perl-5.24.2
@
text
@d1 1
a1 6
#!perl

use 5.008001;

use strict;
use warnings;
d4 6
a9 2
    if (!eval { require Socket }) {
        print "1..0 # no Socket\n"; exit 0;
d11 2
a12 2
    if (ord('A') == 193 && !eval { require Convert::EBCDIC }) {
        print "1..0 # EBCDIC but no Convert::EBCDIC\n"; exit 0;
d53 1
a53 1
        (4 * 31536000) : (70 * 31536000 + 17 * 86400);
d60 1
a60 1
        'inet_time() should calculate time since offset for time()' );
d66 2
a67 2
        my ($pack, $func, $num) = @@_;
        $num = 1 unless defined $num;
d69 1
a69 1
        $fail{$pack}{$func} = $num;
d75 2
a76 2
        new     => 0,
        'send'  => 0,
d80 3
a82 3
        my $class = shift;
        return if $fail{$class}{new} and $fail{$class}{new}--;
        bless( { @@_ }, $class );
d86 4
a89 4
        my $self = shift;
        my $class = ref($self);
        return if $fail{$class}{'send'} and $fail{$class}{'send'}--;
        $self->{sent} .= shift;
d94 5
a98 5
        if (ref($_[0])) {
                $_[0]->{msg} = $_[1];
        } else {
                $msg = shift;
        }
d102 2
a103 2
        my ($len, $msg) = @@_[1,2];
        $_[0] .= substr($msg, 0, $len);
d107 8
a114 8
        my ($self, $buf, $length, $flags) = @@_;
        my $message = exists $self->{msg} ?
                $self->{msg} : $msg;

        if (defined($message)) {
                do_recv($_[1], $length, $message);
        }
        1;
d120 3
a122 3
        my $class = shift;
        return if defined $fail{$class}{new} and $fail{$class}{new}--;
        bless({sock => shift}, $class);
d126 5
a130 5
        my ($self, $timeout) = @@_;
        my $class = ref($self);
        return if defined $fail{$class}{can_read} and $fail{class}{can_read}--;
        $self->{sock}{timeout} = $timeout;
        1;
@

