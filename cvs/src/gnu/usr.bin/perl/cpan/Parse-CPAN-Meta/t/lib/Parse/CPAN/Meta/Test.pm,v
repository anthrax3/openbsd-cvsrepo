head	1.2;
access;
symbols
	OPENBSD_6_1_BASE:1.2
	OPENBSD_6_0:1.1.1.3.0.10
	OPENBSD_6_0_BASE:1.1.1.3
	OPENBSD_5_9:1.1.1.3.0.4
	OPENBSD_5_9_BASE:1.1.1.3
	OPENBSD_5_8:1.1.1.3.0.6
	OPENBSD_5_8_BASE:1.1.1.3
	PERL_5_20_2:1.1.1.3
	OPENBSD_5_7:1.1.1.3.0.2
	OPENBSD_5_7_BASE:1.1.1.3
	PERL_5_20_1:1.1.1.3
	OPENBSD_5_6:1.1.1.2.0.8
	OPENBSD_5_6_BASE:1.1.1.2
	PERL_5_18_2:1.1.1.2
	PERL:1.1.1
	OPENBSD_5_5:1.1.1.2.0.6
	OPENBSD_5_5_BASE:1.1.1.2
	OPENBSD_5_4:1.1.1.2.0.2
	OPENBSD_5_4_BASE:1.1.1.2
	PERL_5_16_3:1.1.1.2
	OPENBSD_5_3:1.1.1.1.0.10
	OPENBSD_5_3_BASE:1.1.1.1
	OPENBSD_5_2:1.1.1.1.0.8
	OPENBSD_5_2_BASE:1.1.1.1
	OPENBSD_5_1_BASE:1.1.1.1
	OPENBSD_5_1:1.1.1.1.0.6
	OPENBSD_5_0:1.1.1.1.0.4
	OPENBSD_5_0_BASE:1.1.1.1
	OPENBSD_4_9:1.1.1.1.0.2
	OPENBSD_4_9_BASE:1.1.1.1
	PERL_5_12_2:1.1.1.1
	CPAN:1.1.1;
locks; strict;
comment	@# @;
expand	@o@;


1.2
date	2017.02.05.00.32.02;	author afresh1;	state Exp;
branches;
next	1.1;
commitid	cxJ08BvJA9Pt2PTM;

1.1
date	2010.09.24.14.49.04;	author millert;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	2010.09.24.14.49.04;	author millert;	state Exp;
branches;
next	1.1.1.2;

1.1.1.2
date	2013.03.25.20.07.58;	author sthen;	state Exp;
branches;
next	1.1.1.3;

1.1.1.3
date	2014.11.17.20.52.57;	author afresh1;	state Exp;
branches;
next	;
commitid	B31cAbBIXiCqnL97;


desc
@@


1.2
log
@Fix merge issues, remove excess files - match perl-5.24.1 dist
@
text
@package Parse::CPAN::Meta::Test;

use strict;
use Test::More ();
use Parse::CPAN::Meta;
use File::Spec;

use vars qw{@@ISA @@EXPORT};
BEGIN {
	require Exporter;
	@@ISA    = qw{ Exporter };
	@@EXPORT = qw{
		tests  yaml_ok  yaml_error  slurp  load_ok
		test_data_directory
	};
}

sub test_data_directory {
	return( "corpus" );
}

# 22 tests per call to yaml_ok
# 4  tests per call to load_ok
sub tests {
	return ( tests => count(@@_) );
}

sub count {
	my $yaml_ok = shift || 0;
	my $load_ok = shift || 0;
	my $single  = shift || 0;
	my $count   = $yaml_ok * 3 + $load_ok * 4 + $single;
	return $count;
}

sub yaml_ok {
	my $string  = shift;
	my $array   = shift;
	my $name    = shift || 'unnamed';

	# Does the string parse to the structure
	my $yaml_copy = $string;
	my @@yaml      = eval { Parse::CPAN::Meta::Load( $yaml_copy ); };
	Test::More::is( $@@, '', "$name: Parse::CPAN::Meta parses without error" );
	Test::More::is( $yaml_copy, $string, "$name: Parse::CPAN::Meta does not modify the input string" );
	SKIP: {
		Test::More::skip( "Shortcutting after failure", 1 ) if $@@;
		Test::More::is_deeply( \@@yaml, $array, "$name: Parse::CPAN::Meta parses correctly" );
	}

	# Return true as a convenience
	return 1;
}

sub yaml_error {
	my $string = shift;
	my $yaml   = eval { Parse::CPAN::Meta::Load( $string ); };
	Test::More::like( $@@, qr/$_[0]/, "CPAN::Meta::YAML throws expected error" );
}

sub slurp {
	my $file = shift;
	local $/ = undef;
	open( FILE, " $file" ) or die "open($file) failed: $!";
	my $source = <FILE>;
	close( FILE ) or die "close($file) failed: $!";
	$source;
}

sub load_ok {
	my $name = shift;
	my $file = shift;
	my $size = shift;
	Test::More::ok( -f $file, "Found $name" ) or Test::More::diag("Searched at '$file'");
	Test::More::ok( -r $file, "Can read $name" );
	my $content = slurp( $file );
	Test::More::ok( (defined $content and ! ref $content), "Loaded $name" );
	Test::More::ok( ($size < length $content), "Content of $name larger than $size bytes" );
	return $content;
}

1;
@


1.1
log
@Initial revision
@
text
@d19 1
a19 5
	return(
		$ENV{PERL_CORE}
		? File::Spec->catdir(File::Spec->updir, qw(lib Parse CPAN Meta t data))
		: File::Spec->catdir(qw(t data))
	);
d58 1
a58 1
	Test::More::like( $@@, qr/$_[0]/, "YAML::Tiny throws expected error" );
@


1.1.1.1
log
@Perl 5.12.2 from CPAN
@
text
@@


1.1.1.2
log
@import perl 5.16.3 from CPAN - worked on by Andrew Fresh and myself
@
text
@d62 1
a62 1
	Test::More::like( $@@, qr/$_[0]/, "CPAN::Meta::YAML throws expected error" );
@


1.1.1.3
log
@Import perl-5.20.1
@
text
@d19 5
a23 1
	return( File::Spec->catdir(qw(t data)) );
@


