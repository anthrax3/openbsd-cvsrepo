head	1.1;
branch	1.1.1;
access;
symbols
	OPENBSD_6_1:1.1.1.1.0.18
	OPENBSD_6_1_BASE:1.1.1.1
	OPENBSD_6_0:1.1.1.1.0.16
	OPENBSD_6_0_BASE:1.1.1.1
	OPENBSD_5_9:1.1.1.1.0.10
	OPENBSD_5_9_BASE:1.1.1.1
	OPENBSD_5_8:1.1.1.1.0.12
	OPENBSD_5_8_BASE:1.1.1.1
	PERL_5_20_2:1.1.1.1
	OPENBSD_5_7:1.1.1.1.0.4
	OPENBSD_5_7_BASE:1.1.1.1
	PERL_5_20_1:1.1.1.1
	OPENBSD_5_6:1.1.1.1.0.8
	OPENBSD_5_6_BASE:1.1.1.1
	PERL_5_18_2:1.1.1.1
	PERL:1.1.1
	OPENBSD_5_5:1.1.1.1.0.6
	OPENBSD_5_5_BASE:1.1.1.1
	OPENBSD_5_4:1.1.1.1.0.2
	OPENBSD_5_4_BASE:1.1.1.1
	PERL_5_16_3:1.1.1.1
	CPAN:1.1.1;
locks; strict;
comment	@# @;
expand	@o@;


1.1
date	2013.03.25.20.07.46;	author sthen;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	2013.03.25.20.07.46;	author sthen;	state Exp;
branches;
next	;


desc
@@


1.1
log
@Initial revision
@
text
@# the oritinal test case was provided by IKEGAMI@@cpan.org

use strict;

use Test::More tests => 13;

BEGIN { $ENV{PERL_JSON_BACKEND} = 0; }

use JSON::PP;

use Data::Dumper qw( Dumper );

sub decoder {
   my ($str) = @@_;

   my $json = JSON::PP->new->relaxed;

   $json->incr_parse($_[0]);

   my $rv;
   if (!eval { $rv = $json->incr_parse(); 1 }) {
       $rv = "died with $@@";
   }

   local $Data::Dumper::Useqq = 1;
   local $Data::Dumper::Terse = 1;
   local $Data::Dumper::Indent = 0;

   return Dumper($rv);
}


is( decoder( "[]"        ), '[]', 'array baseline' );
is( decoder( " []"       ), '[]', 'space ignored before array' );
is( decoder( "\n[]"      ), '[]', 'newline ignored before array' );
is( decoder( "# foo\n[]" ), '[]', 'comment ignored before array' );
is( decoder( "# fo[o\n[]"), '[]', 'comment ignored before array' );
is( decoder( "# fo]o\n[]"), '[]', 'comment ignored before array' );
is( decoder( "[# fo]o\n]"), '[]', 'comment ignored inside array' );

is( decoder( ""        ), 'undef', 'eof baseline' );
is( decoder( " "       ), 'undef', 'space ignored before eof' );
is( decoder( "\n"      ), 'undef', 'newline ignored before eof' );
is( decoder( "#,foo\n" ), 'undef', 'comment ignored before eof' );
is( decoder( "# []o\n" ), 'undef', 'comment ignored before eof' );

is( decoder( qq/#\n[#foo\n"#\\n"#\n]/), '["#\n"]', 'array and string in multiple lines' );
@


1.1.1.1
log
@import perl 5.16.3 from CPAN - worked on by Andrew Fresh and myself
@
text
@@
