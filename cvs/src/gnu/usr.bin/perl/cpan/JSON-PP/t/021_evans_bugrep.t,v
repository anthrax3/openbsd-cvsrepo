head	1.1;
branch	1.1.1;
access;
symbols
	OPENBSD_6_1:1.1.1.1.0.18
	OPENBSD_6_1_BASE:1.1.1.1
	OPENBSD_6_0:1.1.1.1.0.16
	OPENBSD_6_0_BASE:1.1.1.1
	OPENBSD_5_9:1.1.1.1.0.10
	OPENBSD_5_9_BASE:1.1.1.1
	OPENBSD_5_8:1.1.1.1.0.12
	OPENBSD_5_8_BASE:1.1.1.1
	PERL_5_20_2:1.1.1.1
	OPENBSD_5_7:1.1.1.1.0.4
	OPENBSD_5_7_BASE:1.1.1.1
	PERL_5_20_1:1.1.1.1
	OPENBSD_5_6:1.1.1.1.0.8
	OPENBSD_5_6_BASE:1.1.1.1
	PERL_5_18_2:1.1.1.1
	PERL:1.1.1
	OPENBSD_5_5:1.1.1.1.0.6
	OPENBSD_5_5_BASE:1.1.1.1
	OPENBSD_5_4:1.1.1.1.0.2
	OPENBSD_5_4_BASE:1.1.1.1
	PERL_5_16_3:1.1.1.1
	CPAN:1.1.1;
locks; strict;
comment	@# @;
expand	@o@;


1.1
date	2013.03.25.20.07.46;	author sthen;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	2013.03.25.20.07.46;	author sthen;	state Exp;
branches;
next	;


desc
@@


1.1
log
@Initial revision
@
text
@use strict;
use Test::More;

BEGIN { plan tests => 6 };

BEGIN { $ENV{PERL_JSON_BACKEND} = 0; }

BEGIN {
    use lib qw(t);
    use _unicode_handling;
}


use JSON::PP;


my $data = ["\x{3042}\x{3044}\x{3046}\x{3048}\x{304a}",
            "\x{304b}\x{304d}\x{304f}\x{3051}\x{3053}"];

my $j = new JSON::PP;
my $js = $j->encode($data);
$j = undef;

my @@parts = (substr($js, 0, int(length($js) / 2)),
             substr($js, int(length($js) / 2)));
$j = JSON::PP->new;
my $object = $j->incr_parse($parts[0]);

ok( !defined $object );

eval {
    $j->incr_text;
};

like( $@@, qr/incr_text can not be called when the incremental parser already started parsing/ );

$object = $j->incr_parse($parts[1]);

ok( defined $object );

is( $object->[0], $data->[0] );
is( $object->[1], $data->[1] );

eval {
    $j->incr_text;
};

ok( !$@@ );

@


1.1.1.1
log
@import perl 5.16.3 from CPAN - worked on by Andrew Fresh and myself
@
text
@@
