head	1.1;
branch	1.1.1;
access;
symbols
	OPENBSD_6_2_BASE:1.1.1.1
	PERL_5_24_2:1.1.1.1
	OPENBSD_6_1:1.1.1.1.0.18
	OPENBSD_6_1_BASE:1.1.1.1
	OPENBSD_6_0:1.1.1.1.0.16
	OPENBSD_6_0_BASE:1.1.1.1
	OPENBSD_5_9:1.1.1.1.0.10
	OPENBSD_5_9_BASE:1.1.1.1
	OPENBSD_5_8:1.1.1.1.0.12
	OPENBSD_5_8_BASE:1.1.1.1
	PERL_5_20_2:1.1.1.1
	OPENBSD_5_7:1.1.1.1.0.4
	OPENBSD_5_7_BASE:1.1.1.1
	PERL_5_20_1:1.1.1.1
	OPENBSD_5_6:1.1.1.1.0.8
	OPENBSD_5_6_BASE:1.1.1.1
	PERL_5_18_2:1.1.1.1
	PERL:1.1.1
	OPENBSD_5_5:1.1.1.1.0.6
	OPENBSD_5_5_BASE:1.1.1.1
	OPENBSD_5_4:1.1.1.1.0.2
	OPENBSD_5_4_BASE:1.1.1.1
	PERL_5_16_3:1.1.1.1
	CPAN:1.1.1;
locks; strict;
comment	@# @;
expand	@o@;


1.1
date	2013.03.25.20.07.46;	author sthen;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	2013.03.25.20.07.46;	author sthen;	state Exp;
branches;
next	;


desc
@@


1.1
log
@Initial revision
@
text
@#
# decode on Perl 5.005, 5.6, 5.8 or later
#
use strict;
use Test::More;

BEGIN { plan tests => 7 };

BEGIN { $ENV{PERL_JSON_BACKEND} = 0; }

use JSON::PP;

BEGIN {
    use lib qw(t);
    use _unicode_handling;
}

no utf8;

my $json = JSON::PP->new->allow_nonref;

is($json->encode("ü"),                   q|"ü"|); # as is

$json->ascii;

is($json->encode("\xfc"),           q|"\u00fc"|); # latin1
is($json->encode("\xc3\xbc"), q|"\u00c3\u00bc"|); # utf8
is($json->encode("ü"),        q|"\u00c3\u00bc"|); # utf8
is($json->encode('あ'), q|"\u00e3\u0081\u0082"|);

if ($] >= 5.006) {
    is($json->encode(chr hex 3042 ),  q|"\u3042"|);
    is($json->encode(chr hex 12345 ), q|"\ud808\udf45"|);
}
else {
    is($json->encode(chr hex 3042 ),  $json->encode(chr 66));
    is($json->encode(chr hex 12345 ), $json->encode(chr 69));
}

@


1.1.1.1
log
@import perl 5.16.3 from CPAN - worked on by Andrew Fresh and myself
@
text
@@
