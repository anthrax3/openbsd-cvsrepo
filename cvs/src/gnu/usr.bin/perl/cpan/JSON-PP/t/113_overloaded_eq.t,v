head	1.1;
branch	1.1.1;
access;
symbols
	PERL_5_24_2:1.1.1.1
	OPENBSD_6_1:1.1.1.1.0.18
	OPENBSD_6_1_BASE:1.1.1.1
	OPENBSD_6_0:1.1.1.1.0.16
	OPENBSD_6_0_BASE:1.1.1.1
	OPENBSD_5_9:1.1.1.1.0.10
	OPENBSD_5_9_BASE:1.1.1.1
	OPENBSD_5_8:1.1.1.1.0.12
	OPENBSD_5_8_BASE:1.1.1.1
	PERL_5_20_2:1.1.1.1
	OPENBSD_5_7:1.1.1.1.0.4
	OPENBSD_5_7_BASE:1.1.1.1
	PERL_5_20_1:1.1.1.1
	OPENBSD_5_6:1.1.1.1.0.8
	OPENBSD_5_6_BASE:1.1.1.1
	PERL_5_18_2:1.1.1.1
	PERL:1.1.1
	OPENBSD_5_5:1.1.1.1.0.6
	OPENBSD_5_5_BASE:1.1.1.1
	OPENBSD_5_4:1.1.1.1.0.2
	OPENBSD_5_4_BASE:1.1.1.1
	PERL_5_16_3:1.1.1.1
	CPAN:1.1.1;
locks; strict;
comment	@# @;
expand	@o@;


1.1
date	2013.03.25.20.07.46;	author sthen;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	2013.03.25.20.07.46;	author sthen;	state Exp;
branches;
next	;


desc
@@


1.1
log
@Initial revision
@
text
@#!/usr/bin/perl

use strict;
use Test::More tests => 4;

BEGIN {
    $ENV{ PERL_JSON_BACKEND } = 0;
}

use JSON::PP;

my $json = JSON::PP->new->convert_blessed;

my $obj = OverloadedObject->new( 'foo' );
ok( $obj eq 'foo' );
is( $json->encode( [ $obj ] ), q{["foo"]} );

# rt.cpan.org #64783
my $foo  = bless {}, 'Foo';
my $bar  = bless {}, 'Bar';

eval q{ $json->encode( $foo ) };
ok($@@);
eval q{ $json->encode( $bar ) };
ok(!$@@);


package Foo;

use strict;
use overload (
    'eq' => sub { 0 },
    '""' => sub { $_[0] },
    fallback => 1,
);

sub TO_JSON {
    return $_[0];
}

package Bar;

use strict;
use overload (
    'eq' => sub { 0 },
    '""' => sub { $_[0] },
    fallback => 1,
);

sub TO_JSON {
    return overload::StrVal($_[0]);
}


package OverloadedObject;

use overload 'eq' => sub { $_[0]->{v} eq $_[1] }, '""' => sub { $_[0]->{v} }, fallback => 1;


sub new {
    bless { v => $_[1] }, $_[0];
}


sub TO_JSON { "$_[0]"; }

@


1.1.1.1
log
@import perl 5.16.3 from CPAN - worked on by Andrew Fresh and myself
@
text
@@
