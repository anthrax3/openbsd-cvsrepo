head	1.1;
branch	1.1.1;
access;
symbols
	OPENBSD_6_2_BASE:1.1.1.1
	PERL_5_24_2:1.1.1.1
	OPENBSD_6_1:1.1.1.1.0.18
	OPENBSD_6_1_BASE:1.1.1.1
	OPENBSD_6_0:1.1.1.1.0.16
	OPENBSD_6_0_BASE:1.1.1.1
	OPENBSD_5_9:1.1.1.1.0.10
	OPENBSD_5_9_BASE:1.1.1.1
	OPENBSD_5_8:1.1.1.1.0.12
	OPENBSD_5_8_BASE:1.1.1.1
	PERL_5_20_2:1.1.1.1
	OPENBSD_5_7:1.1.1.1.0.4
	OPENBSD_5_7_BASE:1.1.1.1
	PERL_5_20_1:1.1.1.1
	OPENBSD_5_6:1.1.1.1.0.8
	OPENBSD_5_6_BASE:1.1.1.1
	PERL_5_18_2:1.1.1.1
	PERL:1.1.1
	OPENBSD_5_5:1.1.1.1.0.6
	OPENBSD_5_5_BASE:1.1.1.1
	OPENBSD_5_4:1.1.1.1.0.2
	OPENBSD_5_4_BASE:1.1.1.1
	PERL_5_16_3:1.1.1.1
	CPAN:1.1.1;
locks; strict;
comment	@# @;
expand	@o@;


1.1
date	2013.03.25.20.07.46;	author sthen;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	2013.03.25.20.07.46;	author sthen;	state Exp;
branches;
next	;


desc
@@


1.1
log
@Initial revision
@
text
@# copied over from JSON::PP::XS and modified to use JSON::PP

use strict;
use Test::More;
BEGIN { plan tests => 31 };

BEGIN { $ENV{PERL_JSON_BACKEND} = 0; }

BEGIN {
    use lib qw(t);
    use _unicode_handling;
}

use utf8;
use JSON::PP;


eval { JSON::PP->new->encode ([\-1]) }; ok $@@ =~ /cannot encode reference/;
eval { JSON::PP->new->encode ([\undef]) }; ok $@@ =~ /cannot encode reference/;
eval { JSON::PP->new->encode ([\2]) }; ok $@@ =~ /cannot encode reference/;
eval { JSON::PP->new->encode ([\{}]) }; ok $@@ =~ /cannot encode reference/;
eval { JSON::PP->new->encode ([\[]]) }; ok $@@ =~ /cannot encode reference/;
eval { JSON::PP->new->encode ([\\1]) }; ok $@@ =~ /cannot encode reference/;
eval { JSON::PP->new->allow_nonref (1)->decode ('"\u1234\udc00"') }; ok $@@ =~ /missing high /;
eval { JSON::PP->new->allow_nonref->decode ('"\ud800"') }; ok $@@ =~ /missing low /;
eval { JSON::PP->new->allow_nonref (1)->decode ('"\ud800\u1234"') }; ok $@@ =~ /surrogate pair /;
eval { JSON::PP->new->decode ('null') }; ok $@@ =~ /allow_nonref/;
eval { JSON::PP->new->allow_nonref (1)->decode ('+0') }; ok $@@ =~ /malformed/;
eval { JSON::PP->new->allow_nonref->decode ('.2') }; ok $@@ =~ /malformed/;
eval { JSON::PP->new->allow_nonref (1)->decode ('bare') }; ok $@@ =~ /malformed/;
eval { JSON::PP->new->allow_nonref->decode ('naughty') }; ok $@@ =~ /null/;
eval { JSON::PP->new->allow_nonref (1)->decode ('01') }; ok $@@ =~ /leading zero/;
eval { JSON::PP->new->allow_nonref->decode ('00') }; ok $@@ =~ /leading zero/;
eval { JSON::PP->new->allow_nonref (1)->decode ('-0.') }; ok $@@ =~ /decimal point/;
eval { JSON::PP->new->allow_nonref->decode ('-0e') }; ok $@@ =~ /exp sign/;
eval { JSON::PP->new->allow_nonref (1)->decode ('-e+1') }; ok $@@ =~ /initial minus/;
eval { JSON::PP->new->allow_nonref->decode ("\"\n\"") }; ok $@@ =~ /invalid character/;
eval { JSON::PP->new->allow_nonref (1)->decode ("\"\x01\"") }; ok $@@ =~ /invalid character/;
eval { JSON::PP->new->decode ('[5') }; ok $@@ =~ /parsing array/;
eval { JSON::PP->new->decode ('{"5"') }; ok $@@ =~ /':' expected/;
eval { JSON::PP->new->decode ('{"5":null') }; ok $@@ =~ /parsing object/;

eval { JSON::PP->new->decode (undef) }; ok $@@ =~ /malformed/;
eval { JSON::PP->new->decode (\5) }; ok !!$@@; # Can't coerce readonly
eval { JSON::PP->new->decode ([]) }; ok $@@ =~ /malformed/;
eval { JSON::PP->new->decode (\*STDERR) }; ok $@@ =~ /malformed/;
eval { JSON::PP->new->decode (*STDERR) }; ok !!$@@; # cannot coerce GLOB

eval { decode_json ("\"\xa0") }; ok $@@ =~ /malformed.*character/;
eval { decode_json ("\"\xa0\"") }; ok $@@ =~ /malformed.*character/;

@


1.1.1.1
log
@import perl 5.16.3 from CPAN - worked on by Andrew Fresh and myself
@
text
@@
