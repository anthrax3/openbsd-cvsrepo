head	1.1;
branch	1.1.1;
access;
symbols
	OPENBSD_6_2_BASE:1.1.1.1
	PERL_5_24_2:1.1.1.1
	OPENBSD_6_1:1.1.1.1.0.18
	OPENBSD_6_1_BASE:1.1.1.1
	OPENBSD_6_0:1.1.1.1.0.16
	OPENBSD_6_0_BASE:1.1.1.1
	OPENBSD_5_9:1.1.1.1.0.10
	OPENBSD_5_9_BASE:1.1.1.1
	OPENBSD_5_8:1.1.1.1.0.12
	OPENBSD_5_8_BASE:1.1.1.1
	PERL_5_20_2:1.1.1.1
	OPENBSD_5_7:1.1.1.1.0.4
	OPENBSD_5_7_BASE:1.1.1.1
	PERL_5_20_1:1.1.1.1
	OPENBSD_5_6:1.1.1.1.0.8
	OPENBSD_5_6_BASE:1.1.1.1
	PERL_5_18_2:1.1.1.1
	PERL:1.1.1
	OPENBSD_5_5:1.1.1.1.0.6
	OPENBSD_5_5_BASE:1.1.1.1
	OPENBSD_5_4:1.1.1.1.0.2
	OPENBSD_5_4_BASE:1.1.1.1
	PERL_5_16_3:1.1.1.1
	CPAN:1.1.1;
locks; strict;
comment	@# @;
expand	@o@;


1.1
date	2013.03.25.20.07.46;	author sthen;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	2013.03.25.20.07.46;	author sthen;	state Exp;
branches;
next	;


desc
@@


1.1
log
@Initial revision
@
text
@#!/usr/bin/perl -w

use strict;

use Test::More;
BEGIN { plan tests => 10 };
BEGIN { $ENV{PERL_JSON_BACKEND} = 0; }


use strict;
use JSON::PP;

my $json = JSON::PP->new;

eval q| $json->encode( [ sub {} ] ) |;
ok( $@@ =~ /encountered CODE/, $@@ );

eval q|  $json->encode( [ \-1 ] ) |;
ok( $@@ =~ /cannot encode reference to scalar/, $@@ );

eval q|  $json->encode( [ \undef ] ) |;
ok( $@@ =~ /cannot encode reference to scalar/, $@@ );

eval q|  $json->encode( [ \{} ] ) |;
ok( $@@ =~ /cannot encode reference to scalar/, $@@ );

$json->allow_unknown;

is( $json->encode( [ sub {} ] ), '[null]' );
is( $json->encode( [ \-1 ] ),    '[null]' );
is( $json->encode( [ \undef ] ), '[null]' );
is( $json->encode( [ \{} ] ),    '[null]' );


SKIP: {

    skip "this test is for Perl 5.8 or later", 2 if( $] < 5.008 );

$json->allow_unknown(0);

my $fh;
open( $fh, '>hoge.txt' ) or die $!;

eval q| $json->encode( [ $fh ] ) |;
ok( $@@ =~ /encountered GLOB/, $@@ );

$json->allow_unknown(1);

is( $json->encode( [ $fh ] ),    '[null]' );

close $fh;

unlink('hoge.txt');

}
@


1.1.1.1
log
@import perl 5.16.3 from CPAN - worked on by Andrew Fresh and myself
@
text
@@
