head	1.3;
access;
symbols
	OPENBSD_6_1_BASE:1.3
	OPENBSD_5_3:1.1.1.1.0.10
	OPENBSD_5_3_BASE:1.1.1.1
	OPENBSD_5_2:1.1.1.1.0.8
	OPENBSD_5_2_BASE:1.1.1.1
	OPENBSD_5_1_BASE:1.1.1.1
	OPENBSD_5_1:1.1.1.1.0.6
	OPENBSD_5_0:1.1.1.1.0.4
	OPENBSD_5_0_BASE:1.1.1.1
	OPENBSD_4_9:1.1.1.1.0.2
	OPENBSD_4_9_BASE:1.1.1.1
	PERL_5_12_2:1.1.1.1
	CPAN:1.1.1;
locks; strict;
comment	@# @;
expand	@o@;


1.3
date	2017.02.05.00.32.01;	author afresh1;	state Exp;
branches;
next	1.2;
commitid	cxJ08BvJA9Pt2PTM;

1.2
date	2013.03.25.20.40.51;	author sthen;	state dead;
branches;
next	1.1;

1.1
date	2010.09.24.14.49.01;	author millert;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	2010.09.24.14.49.01;	author millert;	state Exp;
branches;
next	;


desc
@@


1.3
log
@Fix merge issues, remove excess files - match perl-5.24.1 dist
@
text
@#!perl

use strict;
use warnings;
use lib 't';

use Test::More tests => 50;

# testing of Math::BigInt:Scalar (used by the testsuite),
# primarily for interface/api and not for the math functionality

use Math::BigInt::Scalar;

my $class = 'Math::BigInt::Scalar'; # pass classname to sub's

# _new and _str

my $x = $class->_new("123");
my $y = $class->_new("321");
is(ref($x), 'SCALAR', 'ref($x)');
is($class->_str($x), 123, "$class->_str(\$x)");
is($class->_str($y), 321, "$class->_str(\$y)");

# _add, _sub, _mul, _div

is($class->_str($class->_add($x, $y)), 444,
   "$class->_str($class->_add(\$x, \$y)");
is($class->_str($class->_sub($x, $y)), 123,
   "$class->_str($class->_sub(\$x, \$y)");
is($class->_str($class->_mul($x, $y)), 39483,
   "$class->_str($class->_mul(\$x, \$y))");
is($class->_str($class->_div($x, $y)), 123,
   "$class->_str($class->_div(\$x, \$y)");

$class->_mul($x, $y);
is($class->_str($x), 39483, "$class->_str(\$x)");
is($class->_str($y),   321, "$class->_str(\$y)");

my $z = $class->_new("2");
is($class->_str($class->_add($x, $z)), 39485,
   "$class->_str($class->_add(\$x, \$z)");

my ($re, $rr) = $class->_div($x, $y);
is($class->_str($re), 123, "$class->_str(\$re)");
is($class->_str($rr),   2, "$class->_str(\$rr)");

# is_zero, _is_one, _one, _zero

is($class->_is_zero($x), 0, "$class->_is_zero($x)");
is($class->_is_one($x),  0, "$class->_is_one($x)");

is($class->_is_one($class->_one()), 1,
   "$class->_is_one($class->_one())");
is($class->_is_one($class->_zero()), 0,
   "$class->_is_one($class->_zero())");
is($class->_is_zero($class->_zero()), 1,
   "$class->_is_zero($class->_zero())");
is($class->_is_zero($class->_one()), 0,
   "$class->_is_zero($class->_one())");

# is_odd, is_even

is($class->_is_odd($class->_one()), 1,
   "$class->_is_odd($class->_one())");
is($class->_is_odd($class->_zero()), 0,
   "$class->_is_odd($class->_zero())");
is($class->_is_even($class->_one()), 0,
   "$class->_is_even($class->_one())");
is($class->_is_even($class->_zero()), 1,
   "$class->_is_even($class->_zero())");

# _digit

$x = $class->_new("123456789");
is($class->_digit($x,  0), 9, "$class->_digit(\$x, 0)");
is($class->_digit($x,  1), 8, "$class->_digit(\$x, 1)");
is($class->_digit($x,  2), 7, "$class->_digit(\$x, 2)");
is($class->_digit($x, -1), 1, "$class->_digit(\$x, -1)");
is($class->_digit($x, -2), 2, "$class->_digit(\$x, -2)");
is($class->_digit($x, -3), 3, "$class->_digit(\$x, -3)");

# _copy

$x = $class->_new("12356");
is($class->_str($class->_copy($x)), 12356,
   "$class->_str($class->_copy(\$x))");

# _acmp

$x = $class->_new("123456789");
$y = $class->_new("987654321");
is($class->_acmp($x, $y), -1, "$class->_acmp(\$x, \$y)");
is($class->_acmp($y, $x),  1, "$class->_acmp(\$y, \$x)");
is($class->_acmp($x, $x),  0, "$class->_acmp(\$x, \$x)");
is($class->_acmp($y, $y),  0, "$class->_acmp(\$y, \$y)");

# _div

$x = $class->_new("3333");
$y = $class->_new("1111");
is($class->_str(scalar $class->_div($x, $y)), 3,
   "$class->_str(scalar $class->_div(\$x, \$y))");

$x = $class->_new("33333");
$y = $class->_new("1111");
($x, $y) = $class->_div($x, $y);
is($class->_str($x), 30, "$class->_str(\$x)");
is($class->_str($y),  3, "$class->_str(\$y)");

$x = $class->_new("123");
$y = $class->_new("1111");
($x, $y) = $class->_div($x, $y);
is($class->_str($x),   0, "$class->_str(\$x)");
is($class->_str($y), 123, "$class->_str(\$y)");

# _num

$x = $class->_new("12345");
$x = $class->_num($x);
is(ref($x) || '', '', 'ref($x) || ""');
is($x, 12345, '$x');

# _len

$x = $class->_new("12345");
$x = $class->_len($x);
is(ref($x) || '', '', 'ref($x) || ""');
is($x, 5, '$x');

# _and, _or, _xor

$x = $class->_new("3");
$y = $class->_new("4");
is($class->_str($class->_or($x, $y)), 7,
   "$class->_str($class->_or($x, $y))");

$x = $class->_new("1");
$y = $class->_new("4");
is($class->_str($class->_xor($x, $y)), 5,
   "$class->_str($class->_xor($x, $y))");

$x = $class->_new("7");
$y = $class->_new("3");
is($class->_str($class->_and($x, $y)), 3,
   "$class->_str($class->_and($x, $y))");

# _pow

$x = $class->_new("2");
$y = $class->_new("4");
is($class->_str($class->_pow($x, $y)), 16,
   "$class->_str($class->_pow($x, $y))");

$x = $class->_new("2");
$y = $class->_new("5");
is($class->_str($class->_pow($x, $y)), 32,
   "$class->_str($class->_pow($x, $y))");

$x = $class->_new("3");
$y = $class->_new("3");
is($class->_str($class->_pow($x, $y)), 27,
   "$class->_str($class->_pow($x, $y))");

# _check

$x = $class->_new("123456789");
is($class->_check($x), 0,
   "$class->_check(\$x)");
is($class->_check(123), '123 is not a reference',
   "$class->_check(123)");
@


1.2
log
@merge/resolve conflicts
(some more to do after this one)
@
text
@d1 1
a1 1
#!/usr/bin/perl -w
d4 2
a5 1
use Test;
d7 1
a7 24
BEGIN 
  {
  $| = 1;
  # to locate the testing files
  my $location = $0; $location =~ s/bigints.t//i;
  if ($ENV{PERL_CORE})
    {
    @@INC = qw(../t/lib);                # testing with the core distribution
    }
  unshift @@INC, '../lib';       # for testing manually
  if (-d 't')
    {
    chdir 't';
    require File::Spec;
    unshift @@INC, File::Spec->catdir(File::Spec->updir, $location);
    }
  else
    {
    unshift @@INC, $location;
    }
  print "# INC = @@INC\n";

  plan tests => 51;
  }
d14 1
a14 1
my $C = 'Math::BigInt::Scalar';	# pass classname to sub's
d17 6
a22 2
my $x = $C->_new("123"); my $y = $C->_new("321");
ok (ref($x),'SCALAR'); ok ($C->_str($x),123); ok ($C->_str($y),321);
d26 20
a45 11
ok ($C->_str($C->_add($x,$y)),444);
ok ($C->_str($C->_sub($x,$y)),123);
ok ($C->_str($C->_mul($x,$y)),39483);
ok ($C->_str($C->_div($x,$y)),123);

ok ($C->_str($C->_mul($x,$y)),39483);
ok ($C->_str($x),39483);
ok ($C->_str($y),321);
my $z = $C->_new("2");
ok ($C->_str($C->_add($x,$z)),39485);
my ($re,$rr) = $C->_div($x,$y);
d47 1
a47 1
ok ($C->_str($re),123); ok ($C->_str($rr),2);
d49 2
a50 3
# is_zero, _is_one, _one, _zero
ok ($C->_is_zero($x),0);
ok ($C->_is_one($x),0);
d52 8
a59 2
ok ($C->_is_one($C->_one()),1); ok ($C->_is_one($C->_zero()),0);
ok ($C->_is_zero($C->_zero()),1); ok ($C->_is_zero($C->_one()),0);
d62 9
a70 2
ok ($C->_is_odd($C->_one()),1); ok ($C->_is_odd($C->_zero()),0);
ok ($C->_is_even($C->_one()),0); ok ($C->_is_even($C->_zero()),1);
d73 8
a80 7
$x = $C->_new("123456789");
ok ($C->_digit($x,0),9);
ok ($C->_digit($x,1),8);
ok ($C->_digit($x,2),7);
ok ($C->_digit($x,-1),1);
ok ($C->_digit($x,-2),2);
ok ($C->_digit($x,-3),3);
d83 4
a86 2
$x = $C->_new("12356");
ok ($C->_str($C->_copy($x)),12356);
d89 7
a95 6
$x = $C->_new("123456789");
$y = $C->_new("987654321");
ok ($C->_acmp($x,$y),-1);
ok ($C->_acmp($y,$x),1);
ok ($C->_acmp($x,$x),0);
ok ($C->_acmp($y,$y),0);
d98 17
a114 6
$x = $C->_new("3333"); $y = $C->_new("1111");
ok ($C->_str( scalar $C->_div($x,$y)),3);
$x = $C->_new("33333"); $y = $C->_new("1111"); ($x,$y) = $C->_div($x,$y);
ok ($C->_str($x),30); ok ($C->_str($y),3);
$x = $C->_new("123"); $y = $C->_new("1111"); 
($x,$y) = $C->_div($x,$y); ok ($C->_str($x),0); ok ($C->_str($y),123);
d117 5
a121 1
$x = $C->_new("12345"); $x = $C->_num($x); ok (ref($x)||'',''); ok ($x,12345);
d124 5
a128 1
$x = $C->_new("12345"); $x = $C->_len($x); ok (ref($x)||'',''); ok ($x,5);
d131 15
a145 3
$x = $C->_new("3"); $y = $C->_new("4"); ok ($C->_str( $C->_or($x,$y)),7);
$x = $C->_new("1"); $y = $C->_new("4"); ok ($C->_str( $C->_xor($x,$y)),5);
$x = $C->_new("7"); $y = $C->_new("3"); ok ($C->_str( $C->_and($x,$y)),3);
a147 3
$x = $C->_new("2"); $y = $C->_new("4"); ok ($C->_str( $C->_pow($x,$y)),16);
$x = $C->_new("2"); $y = $C->_new("5"); ok ($C->_str( $C->_pow($x,$y)),32);
$x = $C->_new("3"); $y = $C->_new("3"); ok ($C->_str( $C->_pow($x,$y)),27);
d149 14
a164 7
$x = $C->_new("123456789");
ok ($C->_check($x),0);
ok ($C->_check(123),'123 is not a reference');

# done

1;
d166 5
@


1.1
log
@Initial revision
@
text
@@


1.1.1.1
log
@Perl 5.12.2 from CPAN
@
text
@@
