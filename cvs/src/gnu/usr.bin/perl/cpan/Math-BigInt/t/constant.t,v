head	1.3;
access;
symbols
	OPENBSD_6_2:1.3.0.2
	OPENBSD_6_2_BASE:1.3
	PERL_5_24_2:1.1.1.2
	PERL:1.1.1
	OPENBSD_6_1:1.3.0.4
	OPENBSD_6_1_BASE:1.3
	OPENBSD_5_3:1.1.1.1.0.10
	OPENBSD_5_3_BASE:1.1.1.1
	OPENBSD_5_2:1.1.1.1.0.8
	OPENBSD_5_2_BASE:1.1.1.1
	OPENBSD_5_1_BASE:1.1.1.1
	OPENBSD_5_1:1.1.1.1.0.6
	OPENBSD_5_0:1.1.1.1.0.4
	OPENBSD_5_0_BASE:1.1.1.1
	OPENBSD_4_9:1.1.1.1.0.2
	OPENBSD_4_9_BASE:1.1.1.1
	PERL_5_12_2:1.1.1.1
	CPAN:1.1.1;
locks; strict;
comment	@# @;
expand	@o@;


1.3
date	2017.02.05.00.32.01;	author afresh1;	state Exp;
branches;
next	1.2;
commitid	cxJ08BvJA9Pt2PTM;

1.2
date	2013.03.25.20.40.51;	author sthen;	state dead;
branches;
next	1.1;

1.1
date	2010.09.24.14.49.01;	author millert;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	2010.09.24.14.49.01;	author millert;	state Exp;
branches;
next	1.1.1.2;

1.1.1.2
date	2017.08.14.13.45.59;	author afresh1;	state Exp;
branches;
next	;
commitid	fAzrs78vdW2Yfc6A;


desc
@@


1.3
log
@Fix merge issues, remove excess files - match perl-5.24.1 dist
@
text
@#!perl

use strict;
use warnings;

use Test::More tests => 7;

use Math::BigInt ':constant';

is(2 ** 255,
   '578960446186580977117854925043439539266'
   . '34992332820282019728792003956564819968',
   '2 ** 255');

{
    no warnings 'portable';     # protect against "non-portable" warnings

    # hexadecimal constants
    is(0x123456789012345678901234567890,
       Math::BigInt->new('0x123456789012345678901234567890'),
       'hexadecimal constant 0x123456789012345678901234567890');

    # binary constants
    is(0b01010100011001010110110001110011010010010110000101101101,
       Math::BigInt->new('0b0101010001100101011011000111'
                         . '0011010010010110000101101101'),
       'binary constant 0b0101010001100101011011000111'
       . '0011010010010110000101101101');
}

use Math::BigFloat ':constant';
is(1.0 / 3.0, '0.3333333333333333333333333333333333333333',
   '1.0 / 3.0 = 0.3333333333333333333333333333333333333333');

# stress-test Math::BigFloat->import()

Math::BigFloat->import(qw/:constant/);
pass('Math::BigFloat->import(qw/:constant/);');

Math::BigFloat->import(qw/:constant upgrade Math::BigRat/);
pass('Math::BigFloat->import(qw/:constant upgrade Math::BigRat/);');

Math::BigFloat->import(qw/upgrade Math::BigRat :constant/);
pass('Math::BigFloat->import(qw/upgrade Math::BigRat :constant/);');

# all tests done
@


1.2
log
@merge/resolve conflicts
(some more to do after this one)
@
text
@d1 1
a1 1
#!/usr/bin/perl -w
d4 1
a4 1
use Test;
d6 1
a6 25
BEGIN
  {
  $| = 1;
  # to locate the testing files
  my $location = $0; $location =~ s/constant.t//i;
  if ($ENV{PERL_CORE})
    {
    # testing with the core distribution
    @@INC = qw(../t/lib);
    }
  unshift @@INC, qw(../lib);
  if (-d 't')
    {
    chdir 't';
    require File::Spec;
    unshift @@INC, File::Spec->catdir(File::Spec->updir, $location);
    }
  else
    {
    unshift @@INC, $location;
    }
  print "# INC = @@INC\n";

  plan tests => 7;
  } 
d10 4
a13 1
ok (2 ** 255,'57896044618658097711785492504343953926634992332820282019728792003956564819968');
d16 13
a28 8
  no warnings 'portable';	# protect against "non-portable" warnings
# hexadecimal constants
ok (0x123456789012345678901234567890,
    Math::BigInt->new('0x123456789012345678901234567890'));
# binary constants
ok (0b01010100011001010110110001110011010010010110000101101101,
    Math::BigInt->new(
     '0b01010100011001010110110001110011010010010110000101101101'));
d32 2
a33 1
ok (1.0 / 3.0, '0.3333333333333333333333333333333333333333');
d37 2
a38 2
Math::BigFloat->import( qw/:constant/ );
ok (1,1);
d40 2
a41 2
Math::BigFloat->import( qw/:constant upgrade Math::BigRat/ );
ok (1,1);
d43 2
a44 2
Math::BigFloat->import( qw/upgrade Math::BigRat :constant/ );
ok (1,1);
a46 1

@


1.1
log
@Initial revision
@
text
@@


1.1.1.1
log
@Perl 5.12.2 from CPAN
@
text
@@


1.1.1.2
log
@Import perl-5.24.2
@
text
@d1 1
a1 1
#!perl
d4 1
a4 1
use warnings;
d6 25
a30 1
use Test::More tests => 7;
d34 1
a34 4
is(2 ** 255,
   '578960446186580977117854925043439539266'
   . '34992332820282019728792003956564819968',
   '2 ** 255');
d37 8
a44 13
    no warnings 'portable';     # protect against "non-portable" warnings

    # hexadecimal constants
    is(0x123456789012345678901234567890,
       Math::BigInt->new('0x123456789012345678901234567890'),
       'hexadecimal constant 0x123456789012345678901234567890');

    # binary constants
    is(0b01010100011001010110110001110011010010010110000101101101,
       Math::BigInt->new('0b0101010001100101011011000111'
                         . '0011010010010110000101101101'),
       'binary constant 0b0101010001100101011011000111'
       . '0011010010010110000101101101');
d48 1
a48 2
is(1.0 / 3.0, '0.3333333333333333333333333333333333333333',
   '1.0 / 3.0 = 0.3333333333333333333333333333333333333333');
d52 2
a53 2
Math::BigFloat->import(qw/:constant/);
pass('Math::BigFloat->import(qw/:constant/);');
d55 2
a56 2
Math::BigFloat->import(qw/:constant upgrade Math::BigRat/);
pass('Math::BigFloat->import(qw/:constant upgrade Math::BigRat/);');
d58 2
a59 2
Math::BigFloat->import(qw/upgrade Math::BigRat :constant/);
pass('Math::BigFloat->import(qw/upgrade Math::BigRat :constant/);');
d62 1
@

