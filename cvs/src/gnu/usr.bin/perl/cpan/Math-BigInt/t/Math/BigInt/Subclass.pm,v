head	1.3;
access;
symbols
	PERL_5_24_2:1.1.1.2
	PERL:1.1.1
	OPENBSD_6_1:1.3.0.4
	OPENBSD_6_1_BASE:1.3
	OPENBSD_5_3:1.1.1.1.0.10
	OPENBSD_5_3_BASE:1.1.1.1
	OPENBSD_5_2:1.1.1.1.0.8
	OPENBSD_5_2_BASE:1.1.1.1
	OPENBSD_5_1_BASE:1.1.1.1
	OPENBSD_5_1:1.1.1.1.0.6
	OPENBSD_5_0:1.1.1.1.0.4
	OPENBSD_5_0_BASE:1.1.1.1
	OPENBSD_4_9:1.1.1.1.0.2
	OPENBSD_4_9_BASE:1.1.1.1
	PERL_5_12_2:1.1.1.1
	CPAN:1.1.1;
locks; strict;
comment	@# @;
expand	@o@;


1.3
date	2017.02.05.00.32.01;	author afresh1;	state Exp;
branches;
next	1.2;
commitid	cxJ08BvJA9Pt2PTM;

1.2
date	2013.03.25.20.40.51;	author sthen;	state dead;
branches;
next	1.1;

1.1
date	2010.09.24.14.49.01;	author millert;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	2010.09.24.14.49.01;	author millert;	state Exp;
branches;
next	1.1.1.2;

1.1.1.2
date	2017.08.14.13.46.00;	author afresh1;	state Exp;
branches;
next	;
commitid	fAzrs78vdW2Yfc6A;


desc
@@


1.3
log
@Fix merge issues, remove excess files - match perl-5.24.1 dist
@
text
@#!perl

package Math::BigInt::Subclass;

require 5.005_02;

use strict;
use warnings;

use Exporter;
use Math::BigInt 1.64;

# $lib is for the "lib => " test
our $lib;
our ($accuracy, $precision, $round_mode, $div_scale);

our @@ISA = qw(Exporter Math::BigInt);
our @@EXPORT_OK = qw(bgcd objectify);

our $VERSION = "0.05";

use overload;                   # inherit overload from BigInt

# Globals
$accuracy = $precision = undef;
$round_mode = 'even';
$div_scale = 40;
$lib = '';

sub new {
    my $proto = shift;
    my $class = ref($proto) || $proto;

    my $value = shift;
    my $a = $accuracy;  $a = $_[0] if defined $_[0];
    my $p = $precision; $p = $_[1] if defined $_[1];
    my $self = Math::BigInt->new($value, $a, $p, $round_mode);
    bless $self, $class;
    $self->{'_custom'} = 1;     # make sure this never goes away
    return $self;
}

sub bgcd {
    Math::BigInt::bgcd(@@_);
}

sub blcm {
    Math::BigInt::blcm(@@_);
}

sub as_int {
    Math::BigInt->new($_[0]);
}

BEGIN {
    *objectify = \&Math::BigInt::objectify;

    # these are called by AUTOLOAD from BigFloat, so we need at least these.
    # We cheat, of course..
    *bneg = \&Math::BigInt::bneg;
    *babs = \&Math::BigInt::babs;
    *bnan = \&Math::BigInt::bnan;
    *binf = \&Math::BigInt::binf;
    *bzero = \&Math::BigInt::bzero;
    *bone = \&Math::BigInt::bone;
}

sub import {
    my $self = shift;

    my @@a;
    my $t = 0;
    foreach (@@_) {
        # remove the "lib => foo" parameters and store it
        if ($t == 1) {
            $lib = $_;
            $t = 0;
            next;
        }
        if ($_ eq 'lib') {
            $t = 1;
            next;
        }
        push @@a, $_;
    }
    $self->SUPER::import(@@a);             # need it for subclasses
    $self->export_to_level(1, $self, @@a); # need this ?
}

1;
@


1.2
log
@merge/resolve conflicts
(some more to do after this one)
@
text
@d1 1
a1 1
#!/usr/bin/perl -w
d6 1
d8 1
d11 2
a12 1
use Math::BigInt (1.64);
d14 2
a15 3
use vars qw($VERSION @@ISA $PACKAGE @@EXPORT_OK
	    $lib						
            $accuracy $precision $round_mode $div_scale);
d17 2
a18 2
@@ISA = qw(Exporter Math::BigInt);
@@EXPORT_OK = qw(bgcd objectify);
d20 1
a20 1
$VERSION = 0.04;
d22 1
a22 1
use overload;	# inherit overload from BigInt
d30 55
a84 57
sub new
{
        my $proto  = shift;
        my $class  = ref($proto) || $proto;

        my $value       = shift;
	my $a = $accuracy; $a = $_[0] if defined $_[0];
	my $p = $precision; $p = $_[1] if defined $_[1];
        my $self = Math::BigInt->new($value,$a,$p,$round_mode);
	bless $self,$class;
        $self->{'_custom'} = 1; # make sure this never goes away
        return $self;
}

sub bgcd
  {
  Math::BigInt::bgcd(@@_);
  }

sub blcm
  {
  Math::BigInt::blcm(@@_);
  }

sub as_int
  {
  Math::BigInt->new($_[0]);
  }

BEGIN
  {
  *objectify = \&Math::BigInt::objectify;

  # these are called by AUTOLOAD from BigFloat, so we need at least these.
  # We cheat, of course..
  *bneg = \&Math::BigInt::bneg;
  *babs = \&Math::BigInt::babs;
  *bnan = \&Math::BigInt::bnan;
  *binf = \&Math::BigInt::binf;
  *bzero = \&Math::BigInt::bzero;
  *bone = \&Math::BigInt::bone;
  }

sub import
  {
  my $self = shift;

  my @@a; my $t = 0;
  foreach (@@_)
    {
    # remove the "lib => foo" parameters and store it
    $lib = $_, $t = 0, next if $t == 1;
    if ($_ eq 'lib')
      {
      $t = 1; next;
      }
    push @@a,$_;
d86 3
a88 3
  $self->SUPER::import(@@a);			# need it for subclasses
  $self->export_to_level(1,$self,@@a);		# need this ?
  }
@


1.1
log
@Initial revision
@
text
@@


1.1.1.1
log
@Perl 5.12.2 from CPAN
@
text
@@


1.1.1.2
log
@Import perl-5.24.2
@
text
@d1 1
a1 1
#!perl
a5 1

a6 1
use warnings;
d9 1
a9 2
use Math::BigInt 1.64;

d11 3
a13 2
our $lib;
our ($accuracy, $precision, $round_mode, $div_scale);
d15 2
a16 2
our @@ISA = qw(Exporter Math::BigInt);
our @@EXPORT_OK = qw(bgcd objectify);
d18 1
a18 1
our $VERSION = "0.05";
d20 1
a20 1
use overload;                   # inherit overload from BigInt
d28 57
a84 55
sub new {
    my $proto = shift;
    my $class = ref($proto) || $proto;

    my $value = shift;
    my $a = $accuracy;  $a = $_[0] if defined $_[0];
    my $p = $precision; $p = $_[1] if defined $_[1];
    my $self = Math::BigInt->new($value, $a, $p, $round_mode);
    bless $self, $class;
    $self->{'_custom'} = 1;     # make sure this never goes away
    return $self;
}

sub bgcd {
    Math::BigInt::bgcd(@@_);
}

sub blcm {
    Math::BigInt::blcm(@@_);
}

sub as_int {
    Math::BigInt->new($_[0]);
}

BEGIN {
    *objectify = \&Math::BigInt::objectify;

    # these are called by AUTOLOAD from BigFloat, so we need at least these.
    # We cheat, of course..
    *bneg = \&Math::BigInt::bneg;
    *babs = \&Math::BigInt::babs;
    *bnan = \&Math::BigInt::bnan;
    *binf = \&Math::BigInt::binf;
    *bzero = \&Math::BigInt::bzero;
    *bone = \&Math::BigInt::bone;
}

sub import {
    my $self = shift;

    my @@a;
    my $t = 0;
    foreach (@@_) {
        # remove the "lib => foo" parameters and store it
        if ($t == 1) {
            $lib = $_;
            $t = 0;
            next;
        }
        if ($_ eq 'lib') {
            $t = 1;
            next;
        }
        push @@a, $_;
d86 3
a88 3
    $self->SUPER::import(@@a);             # need it for subclasses
    $self->export_to_level(1, $self, @@a); # need this ?
}
@

