head	1.3;
access;
symbols
	OPENBSD_6_2:1.3.0.2
	OPENBSD_6_2_BASE:1.3
	PERL_5_24_2:1.1.1.2
	PERL:1.1.1
	OPENBSD_6_1:1.3.0.4
	OPENBSD_6_1_BASE:1.3
	OPENBSD_5_3:1.1.1.1.0.10
	OPENBSD_5_3_BASE:1.1.1.1
	OPENBSD_5_2:1.1.1.1.0.8
	OPENBSD_5_2_BASE:1.1.1.1
	OPENBSD_5_1_BASE:1.1.1.1
	OPENBSD_5_1:1.1.1.1.0.6
	OPENBSD_5_0:1.1.1.1.0.4
	OPENBSD_5_0_BASE:1.1.1.1
	OPENBSD_4_9:1.1.1.1.0.2
	OPENBSD_4_9_BASE:1.1.1.1
	PERL_5_12_2:1.1.1.1
	CPAN:1.1.1;
locks; strict;
comment	@# @;
expand	@o@;


1.3
date	2017.02.05.00.32.01;	author afresh1;	state Exp;
branches;
next	1.2;
commitid	cxJ08BvJA9Pt2PTM;

1.2
date	2013.03.25.20.40.51;	author sthen;	state dead;
branches;
next	1.1;

1.1
date	2010.09.24.14.49.01;	author millert;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	2010.09.24.14.49.01;	author millert;	state Exp;
branches;
next	1.1.1.2;

1.1.1.2
date	2017.08.14.13.45.59;	author afresh1;	state Exp;
branches;
next	;
commitid	fAzrs78vdW2Yfc6A;


desc
@@


1.3
log
@Fix merge issues, remove excess files - match perl-5.24.1 dist
@
text
@#!perl

use strict;
use warnings;

use Test::More tests => 15;

use Math::BigInt   upgrade   => 'Math::BigFloat';
use Math::BigFloat downgrade => 'Math::BigInt',
                   upgrade   => 'Math::BigInt';


our ($CLASS, $EXPECTED_CLASS, $CALC);
$CLASS          = "Math::BigInt";
$EXPECTED_CLASS = "Math::BigFloat";
$CALC           = "Math::BigInt::Calc";         # backend

# simplistic test for now
is(Math::BigFloat->downgrade(), 'Math::BigInt', 'Math::BigFloat->downgrade()');
is(Math::BigFloat->upgrade(),   'Math::BigInt', 'Math::BigFloat->upgrade()');

# these downgrade
is(ref(Math::BigFloat->new("inf")), "Math::BigInt",
   qq|ref(Math::BigFloat->new("inf"))|);
is(ref(Math::BigFloat->new("-inf")), "Math::BigInt",
   qq|ref(Math::BigFloat->new("-inf"))|);
is(ref(Math::BigFloat->new("NaN")), "Math::BigInt",
   qq|ref(Math::BigFloat->new("NaN"))|);
is(ref(Math::BigFloat->new("0")), "Math::BigInt",
   qq|ref(Math::BigFloat->new("0"))|);
is(ref(Math::BigFloat->new("1")), "Math::BigInt",
   qq|ref(Math::BigFloat->new("1"))|);
is(ref(Math::BigFloat->new("10")), "Math::BigInt",
   qq|ref(Math::BigFloat->new("10"))|);
is(ref(Math::BigFloat->new("-10")), "Math::BigInt",
   qq|ref(Math::BigFloat->new("-10"))|);
is(ref(Math::BigFloat->new("-10.0E1")), "Math::BigInt",
   qq|ref(Math::BigFloat->new("-10.0E1"))|);

# bug until v1.67:
is(Math::BigFloat->new("0.2E0"), "0.2", qq|Math::BigFloat->new("0.2E0")|);
is(Math::BigFloat->new("0.2E1"), "2",   qq|Math::BigFloat->new("0.2E1")|);
# until v1.67 resulted in 200:
is(Math::BigFloat->new("0.2E2"), "20",  qq|Math::BigFloat->new("0.2E2")|);

# disable, otherwise it screws calculations
Math::BigFloat->upgrade(undef);
is(Math::BigFloat->upgrade() || "", "", qq/Math::BigFloat->upgrade() || ""/);

Math::BigFloat->div_scale(20);  # make it a bit faster
my $x = Math::BigFloat->new(2);    # downgrades
# the following test upgrade for bsqrt() and also makes new() NOT downgrade
# for the bpow() side
is(Math::BigFloat->bpow("2", "0.5"), $x->bsqrt(),
   qq|Math::BigFloat->bpow("2", "0.5")|);

#require 'upgrade.inc';	# all tests here for sharing
@


1.2
log
@merge/resolve conflicts
(some more to do after this one)
@
text
@d1 1
a1 1
#!/usr/bin/perl -w
a2 1
use Test;
d4 1
d6 15
a20 22
BEGIN
  {
  $| = 1;
  unshift @@INC, '../lib'; # for running manually
  my $location = $0; $location =~ s/downgrade.t//;
  unshift @@INC, $location; # to locate the testing files
  chdir 't' if -d 't';
  plan tests => 15;
  }

use Math::BigInt upgrade => 'Math::BigFloat';
use Math::BigFloat downgrade => 'Math::BigInt', upgrade => 'Math::BigInt';

use vars qw ($scale $class $try $x $y $f @@args $ans $ans1 $ans1_str $setup
             $ECL $CL);
$class = "Math::BigInt";
$CL = "Math::BigInt::Calc";
$ECL = "Math::BigFloat";

# simplistic test for now 
ok (Math::BigFloat->downgrade(),'Math::BigInt');
ok (Math::BigFloat->upgrade(),'Math::BigInt');
d23 16
a38 8
ok (ref(Math::BigFloat->new('inf')),'Math::BigInt');
ok (ref(Math::BigFloat->new('-inf')),'Math::BigInt');
ok (ref(Math::BigFloat->new('NaN')),'Math::BigInt');
ok (ref(Math::BigFloat->new('0')),'Math::BigInt');
ok (ref(Math::BigFloat->new('1')),'Math::BigInt');
ok (ref(Math::BigFloat->new('10')),'Math::BigInt');
ok (ref(Math::BigFloat->new('-10')),'Math::BigInt');
ok (ref(Math::BigFloat->new('-10.0E1')),'Math::BigInt');
d41 2
a42 2
ok (Math::BigFloat->new('0.2E0'), '0.2');
ok (Math::BigFloat->new('0.2E1'), '2');
d44 1
a44 1
ok (Math::BigFloat->new('0.2E2'), '20');
d48 1
a48 1
ok (Math::BigFloat->upgrade()||'','');
d50 2
a51 2
Math::BigFloat->div_scale(20); 				# make it a bit faster
my $x = Math::BigFloat->new(2);				# downgrades
d54 2
a55 1
ok (Math::BigFloat->bpow('2','0.5'),$x->bsqrt());
@


1.1
log
@Initial revision
@
text
@@


1.1.1.1
log
@Perl 5.12.2 from CPAN
@
text
@@


1.1.1.2
log
@Import perl-5.24.2
@
text
@d1 1
a1 1
#!perl
d3 1
a4 1
use warnings;
d6 22
a27 15
use Test::More tests => 15;

use Math::BigInt   upgrade   => 'Math::BigFloat';
use Math::BigFloat downgrade => 'Math::BigInt',
                   upgrade   => 'Math::BigInt';


our ($CLASS, $EXPECTED_CLASS, $CALC);
$CLASS          = "Math::BigInt";
$EXPECTED_CLASS = "Math::BigFloat";
$CALC           = "Math::BigInt::Calc";         # backend

# simplistic test for now
is(Math::BigFloat->downgrade(), 'Math::BigInt', 'Math::BigFloat->downgrade()');
is(Math::BigFloat->upgrade(),   'Math::BigInt', 'Math::BigFloat->upgrade()');
d30 8
a37 16
is(ref(Math::BigFloat->new("inf")), "Math::BigInt",
   qq|ref(Math::BigFloat->new("inf"))|);
is(ref(Math::BigFloat->new("-inf")), "Math::BigInt",
   qq|ref(Math::BigFloat->new("-inf"))|);
is(ref(Math::BigFloat->new("NaN")), "Math::BigInt",
   qq|ref(Math::BigFloat->new("NaN"))|);
is(ref(Math::BigFloat->new("0")), "Math::BigInt",
   qq|ref(Math::BigFloat->new("0"))|);
is(ref(Math::BigFloat->new("1")), "Math::BigInt",
   qq|ref(Math::BigFloat->new("1"))|);
is(ref(Math::BigFloat->new("10")), "Math::BigInt",
   qq|ref(Math::BigFloat->new("10"))|);
is(ref(Math::BigFloat->new("-10")), "Math::BigInt",
   qq|ref(Math::BigFloat->new("-10"))|);
is(ref(Math::BigFloat->new("-10.0E1")), "Math::BigInt",
   qq|ref(Math::BigFloat->new("-10.0E1"))|);
d40 2
a41 2
is(Math::BigFloat->new("0.2E0"), "0.2", qq|Math::BigFloat->new("0.2E0")|);
is(Math::BigFloat->new("0.2E1"), "2",   qq|Math::BigFloat->new("0.2E1")|);
d43 1
a43 1
is(Math::BigFloat->new("0.2E2"), "20",  qq|Math::BigFloat->new("0.2E2")|);
d47 1
a47 1
is(Math::BigFloat->upgrade() || "", "", qq/Math::BigFloat->upgrade() || ""/);
d49 2
a50 2
Math::BigFloat->div_scale(20);  # make it a bit faster
my $x = Math::BigFloat->new(2);    # downgrades
d53 1
a53 2
is(Math::BigFloat->bpow("2", "0.5"), $x->bsqrt(),
   qq|Math::BigFloat->bpow("2", "0.5")|);
@

