head	1.3;
access;
symbols
	OPENBSD_6_2:1.3.0.6
	OPENBSD_6_2_BASE:1.3
	PERL_5_24_2:1.1.1.2
	PERL:1.1.1
	OPENBSD_6_1:1.3.0.4
	OPENBSD_6_1_BASE:1.3
	OPENBSD_5_3:1.1.1.1.0.10
	OPENBSD_5_3_BASE:1.1.1.1
	OPENBSD_5_2:1.1.1.1.0.8
	OPENBSD_5_2_BASE:1.1.1.1
	OPENBSD_5_1_BASE:1.1.1.1
	OPENBSD_5_1:1.1.1.1.0.6
	OPENBSD_5_0:1.1.1.1.0.4
	OPENBSD_5_0_BASE:1.1.1.1
	OPENBSD_4_9:1.1.1.1.0.2
	OPENBSD_4_9_BASE:1.1.1.1
	PERL_5_12_2:1.1.1.1
	CPAN:1.1.1;
locks; strict;
comment	@# @;
expand	@o@;


1.3
date	2017.02.05.00.32.01;	author afresh1;	state Exp;
branches;
next	1.2;
commitid	cxJ08BvJA9Pt2PTM;

1.2
date	2013.03.25.20.40.51;	author sthen;	state dead;
branches;
next	1.1;

1.1
date	2010.09.24.14.49.00;	author millert;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	2010.09.24.14.49.00;	author millert;	state Exp;
branches;
next	1.1.1.2;

1.1.1.2
date	2017.08.14.13.45.59;	author afresh1;	state Exp;
branches;
next	;
commitid	fAzrs78vdW2Yfc6A;


desc
@@


1.3
log
@Fix merge issues, remove excess files - match perl-5.24.1 dist
@
text
@#!perl

# test that overloaded compare works when NaN are involved

use strict;
use warnings;

use Test::More tests => 26;

use Math::BigInt;
use Math::BigFloat;

compare('Math::BigInt');
compare('Math::BigFloat');

sub compare {
    my $class = shift;

    my $nan = $class->bnan();
    my $one = $class->bone();

    is($one, $one, "$class->bone() == $class->bone()");

    is($one != $nan, 1, "$class->bone() != $class->bnan()");
    is($nan != $one, 1, "$class->bnan() != $class->bone()");
    is($nan != $nan, 1, "$class->bnan() != $class->bnan()");

    is($nan == $one, '', "$class->bnan() == $class->bone()");
    is($one == $nan, '', "$class->bone() == $class->bnan()");
    is($nan == $nan, '', "$class->bnan() == $class->bnan()");

    is($nan <= $one, '', "$class->bnan() <= $class->bone()");
    is($one <= $nan, '', "$class->bone() <= $class->bnan()");
    is($nan <= $nan, '', "$class->bnan() <= $class->bnan()");

    is($nan >= $one, '', "$class->bnan() >= $class->bone()");
    is($one >= $nan, '', "$class->bone() >= $class->bnan()");
    is($nan >= $nan, '', "$class->bnan() >= $class->bnan()");
}
@


1.2
log
@merge/resolve conflicts
(some more to do after this one)
@
text
@d1 1
a1 1
#!/usr/bin/perl -w
d6 1
a6 1
use Test::More;
d8 1
a8 7
BEGIN
  {
  $| = 1;
  chdir 't' if -d 't';
  unshift @@INC, '../lib';	# for running manually
  plan tests => 26;
  }
d13 2
a14 2
compare (Math::BigInt->bnan(),   Math::BigInt->bone() );
compare (Math::BigFloat->bnan(), Math::BigFloat->bone() );
d16 2
a17 22
sub compare
  {
  my ($nan, $one) = @@_;

  is ($one, $one, '1 == 1');

  is ($one != $nan, 1, "1 != NaN");
  is ($nan != $one, 1, "NaN != 1");
  is ($nan != $nan, 1, "NaN != NaN");

  is ($nan == $one, '', "NaN == 1");
  is ($one == $nan, '', "1 == NaN");
  is ($nan == $nan, '', "NaN == NaN");

  is ($nan <= $one, '', "NaN <= 1");
  is ($one <= $nan, '', "1 <= NaN");
  is ($nan <= $nan, '', "NaN <= NaN");

  is ($nan >= $one, '', "NaN >= 1");
  is ($one >= $nan, '', "1 >= NaN");
  is ($nan >= $nan, '', "NaN >= NaN");
  }
d19 21
@


1.1
log
@Initial revision
@
text
@@


1.1.1.1
log
@Perl 5.12.2 from CPAN
@
text
@@


1.1.1.2
log
@Import perl-5.24.2
@
text
@d1 1
a1 1
#!perl
d6 1
a6 1
use warnings;
d8 7
a14 1
use Test::More tests => 26;
d19 2
a20 2
compare('Math::BigInt');
compare('Math::BigFloat');
d22 22
a43 2
sub compare {
    my $class = shift;
a44 21
    my $nan = $class->bnan();
    my $one = $class->bone();

    is($one, $one, "$class->bone() == $class->bone()");

    is($one != $nan, 1, "$class->bone() != $class->bnan()");
    is($nan != $one, 1, "$class->bnan() != $class->bone()");
    is($nan != $nan, 1, "$class->bnan() != $class->bnan()");

    is($nan == $one, '', "$class->bnan() == $class->bone()");
    is($one == $nan, '', "$class->bone() == $class->bnan()");
    is($nan == $nan, '', "$class->bnan() == $class->bnan()");

    is($nan <= $one, '', "$class->bnan() <= $class->bone()");
    is($one <= $nan, '', "$class->bone() <= $class->bnan()");
    is($nan <= $nan, '', "$class->bnan() <= $class->bnan()");

    is($nan >= $one, '', "$class->bnan() >= $class->bone()");
    is($one >= $nan, '', "$class->bone() >= $class->bnan()");
    is($nan >= $nan, '', "$class->bnan() >= $class->bnan()");
}
@

