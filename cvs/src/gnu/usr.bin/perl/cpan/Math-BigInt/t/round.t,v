head	1.3;
access;
symbols
	OPENBSD_6_2:1.3.0.6
	OPENBSD_6_2_BASE:1.3
	PERL_5_24_2:1.1.1.2
	PERL:1.1.1
	OPENBSD_6_1:1.3.0.4
	OPENBSD_6_1_BASE:1.3
	OPENBSD_5_3:1.1.1.1.0.10
	OPENBSD_5_3_BASE:1.1.1.1
	OPENBSD_5_2:1.1.1.1.0.8
	OPENBSD_5_2_BASE:1.1.1.1
	OPENBSD_5_1_BASE:1.1.1.1
	OPENBSD_5_1:1.1.1.1.0.6
	OPENBSD_5_0:1.1.1.1.0.4
	OPENBSD_5_0_BASE:1.1.1.1
	OPENBSD_4_9:1.1.1.1.0.2
	OPENBSD_4_9_BASE:1.1.1.1
	PERL_5_12_2:1.1.1.1
	CPAN:1.1.1;
locks; strict;
comment	@# @;
expand	@o@;


1.3
date	2017.02.05.00.32.01;	author afresh1;	state Exp;
branches;
next	1.2;
commitid	cxJ08BvJA9Pt2PTM;

1.2
date	2013.03.25.20.40.51;	author sthen;	state dead;
branches;
next	1.1;

1.1
date	2010.09.24.14.49.01;	author millert;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	2010.09.24.14.49.01;	author millert;	state Exp;
branches;
next	1.1.1.2;

1.1.1.2
date	2017.08.14.13.46.00;	author afresh1;	state Exp;
branches;
next	;
commitid	fAzrs78vdW2Yfc6A;


desc
@@


1.3
log
@Fix merge issues, remove excess files - match perl-5.24.1 dist
@
text
@#!/usr/bin/perl

# test rounding with non-integer A and P parameters

use strict;
use warnings;

use Test::More tests => 95;

use Math::BigFloat;

my $mbf = 'Math::BigFloat';
#my $mbi = 'Math::BigInt';

my $x = $mbf->new('123456.123456');

# unary ops with A
_do_a($x, 'round', 3, '123000');
_do_a($x, 'bfround', 3, '123500');
_do_a($x, 'bfround', 2, '123460');
_do_a($x, 'bfround', -2, '123456.12');
_do_a($x, 'bfround', -3, '123456.123');

_do_a($x, 'bround', 4, '123500');
_do_a($x, 'bround', 3, '123000');
_do_a($x, 'bround', 2, '120000');

_do_a($x, 'bsqrt', 4, '351.4');
_do_a($x, 'bsqrt', 3, '351');
_do_a($x, 'bsqrt', 2, '350');

# setting P
_do_p($x, 'bsqrt', 2, '350');
_do_p($x, 'bsqrt', -2, '351.36');

# binary ops
_do_2_a($x, 'bdiv', 2, 6, '61728.1');
_do_2_a($x, 'bdiv', 2, 4, '61730');
_do_2_a($x, 'bdiv', 2, 3, '61700');

_do_2_p($x, 'bdiv', 2, -6, '61728.061728');
_do_2_p($x, 'bdiv', 2, -4, '61728.0617');
_do_2_p($x, 'bdiv', 2, -3, '61728.062');

# all tests done

#############################################################################

sub _do_a {
    my ($x, $method, $A, $result) = @@_;

    is($x->copy->$method($A), $result, "$method($A)");
    is($x->copy->$method($A.'.1'), $result, "$method(${A}.1)");
    is($x->copy->$method($A.'.5'), $result, "$method(${A}.5)");
    is($x->copy->$method($A.'.6'), $result, "$method(${A}.6)");
    is($x->copy->$method($A.'.9'), $result, "$method(${A}.9)");
}

sub _do_p {
    my ($x, $method, $P, $result) = @@_;

    is($x->copy->$method(undef, $P), $result, "$method(undef, $P)");
    is($x->copy->$method(undef, $P.'.1'), $result, "$method(undef, ${P}.1)");
    is($x->copy->$method(undef, $P.'.5'), $result, "$method(undef.${P}.5)");
    is($x->copy->$method(undef, $P.'.6'), $result, "$method(undef, ${P}.6)");
    is($x->copy->$method(undef, $P.'.9'), $result, "$method(undef, ${P}.9)");
}

sub _do_2_a {
    my ($x, $method, $y, $A, $result) = @@_;

    my $cy = $mbf->new($y);

    is($x->copy->$method($cy, $A), $result, "$method($cy, $A)");
    is($x->copy->$method($cy, $A.'.1'), $result, "$method($cy, ${A}.1)");
    is($x->copy->$method($cy, $A.'.5'), $result, "$method($cy, ${A}.5)");
    is($x->copy->$method($cy, $A.'.6'), $result, "$method($cy, ${A}.6)");
    is($x->copy->$method($cy, $A.'.9'), $result, "$method($cy, ${A}.9)");
}

sub _do_2_p {
    my ($x, $method, $y, $P, $result) = @@_;

    my $cy = $mbf->new($y);

    is($x->copy->$method($cy, undef, $P), $result,
       "$method(undef, $P)");
    is($x->copy->$method($cy, undef, $P.'.1'), $result,
       "$method($cy, undef, ${P}.1)");
    is($x->copy->$method($cy, undef, $P.'.5'), $result,
       "$method($cy, undef, ${P}.5)");
    is($x->copy->$method($cy, undef, $P.'.6'), $result,
       "$method($cy, undef, ${P}.6)");
    is($x->copy->$method($cy, undef, $P.'.9'), $result,
       "$method($cy, undef, ${P}.9)");
}
@


1.2
log
@merge/resolve conflicts
(some more to do after this one)
@
text
@d1 1
a1 1
#!/usr/bin/perl -w
d6 1
a6 1
use Test::More;
d8 1
a8 25
BEGIN
  {
  $| = 1;
  # to locate the testing files
  my $location = $0; $location =~ s/round.t//i;
  if ($ENV{PERL_CORE})
    {
    # testing with the core distribution
    @@INC = qw(../t/lib);
    }
  unshift @@INC, qw(../lib);
  if (-d 't')
    {
    chdir 't';
    require File::Spec;
    unshift @@INC, File::Spec->catdir(File::Spec->updir, $location);
    }
  else
    {
    unshift @@INC, $location;
    }
  print "# INC = @@INC\n";

  plan tests => 95;
  } 
d12 2
a13 2
my $cf = 'Math::BigFloat';
my $ci = 'Math::BigInt';
d15 1
a15 1
my $x = $cf->new('123456.123456');
d33 1
a33 1
_do_p($x, 'bsqrt', 2,  '350');
d49 2
a50 47
sub _do_a
  { 
  my ($x, $method, $A, $result) = @@_;

  is ($x->copy->$method($A), $result, "$method($A)");
  is ($x->copy->$method($A.'.1'), $result, "$method(${A}.1)");
  is ($x->copy->$method($A.'.5'), $result, "$method(${A}.5)");
  is ($x->copy->$method($A.'.6'), $result, "$method(${A}.6)");
  is ($x->copy->$method($A.'.9'), $result, "$method(${A}.9)");
  }

sub _do_p
  { 
  my ($x, $method, $P, $result) = @@_;

  is ($x->copy->$method(undef,$P), $result, "$method(undef,$P)");
  is ($x->copy->$method(undef,$P.'.1'), $result, "$method(undef,${P}.1)");
  is ($x->copy->$method(undef,$P.'.5'), $result, "$method(undef.${P}.5)");
  is ($x->copy->$method(undef,$P.'.6'), $result, "$method(undef,${P}.6)");
  is ($x->copy->$method(undef,$P.'.9'), $result, "$method(undef,${P}.9)");
  }

sub _do_2_a
  { 
  my ($x, $method, $y, $A, $result) = @@_;

  my $cy = $cf->new($y);

  is ($x->copy->$method($cy,$A), $result, "$method($cy,$A)");
  is ($x->copy->$method($cy,$A.'.1'), $result, "$method($cy,${A}.1)");
  is ($x->copy->$method($cy,$A.'.5'), $result, "$method($cy,${A}.5)");
  is ($x->copy->$method($cy,$A.'.6'), $result, "$method($cy,${A}.6)");
  is ($x->copy->$method($cy,$A.'.9'), $result, "$method($cy,${A}.9)");
  }

sub _do_2_p
  { 
  my ($x, $method, $y, $P, $result) = @@_;

  my $cy = $cf->new($y);

  is ($x->copy->$method($cy,undef,$P), $result, "$method(undef,$P)");
  is ($x->copy->$method($cy,undef,$P.'.1'), $result, "$method($cy,undef,${P}.1)");
  is ($x->copy->$method($cy,undef,$P.'.5'), $result, "$method($cy,undef.${P}.5)");
  is ($x->copy->$method($cy,undef,$P.'.6'), $result, "$method($cy,undef,${P}.6)");
  is ($x->copy->$method($cy,undef,$P.'.9'), $result, "$method($cy,undef,${P}.9)");
  }
d52 45
@


1.1
log
@Initial revision
@
text
@@


1.1.1.1
log
@Perl 5.12.2 from CPAN
@
text
@@


1.1.1.2
log
@Import perl-5.24.2
@
text
@d1 1
a1 1
#!/usr/bin/perl
d6 1
a6 1
use warnings;
d8 25
a32 1
use Test::More tests => 95;
d36 2
a37 2
my $mbf = 'Math::BigFloat';
#my $mbi = 'Math::BigInt';
d39 1
a39 1
my $x = $mbf->new('123456.123456');
d57 1
a57 1
_do_p($x, 'bsqrt', 2, '350');
d73 47
a119 2
sub _do_a {
    my ($x, $method, $A, $result) = @@_;
a120 45
    is($x->copy->$method($A), $result, "$method($A)");
    is($x->copy->$method($A.'.1'), $result, "$method(${A}.1)");
    is($x->copy->$method($A.'.5'), $result, "$method(${A}.5)");
    is($x->copy->$method($A.'.6'), $result, "$method(${A}.6)");
    is($x->copy->$method($A.'.9'), $result, "$method(${A}.9)");
}

sub _do_p {
    my ($x, $method, $P, $result) = @@_;

    is($x->copy->$method(undef, $P), $result, "$method(undef, $P)");
    is($x->copy->$method(undef, $P.'.1'), $result, "$method(undef, ${P}.1)");
    is($x->copy->$method(undef, $P.'.5'), $result, "$method(undef.${P}.5)");
    is($x->copy->$method(undef, $P.'.6'), $result, "$method(undef, ${P}.6)");
    is($x->copy->$method(undef, $P.'.9'), $result, "$method(undef, ${P}.9)");
}

sub _do_2_a {
    my ($x, $method, $y, $A, $result) = @@_;

    my $cy = $mbf->new($y);

    is($x->copy->$method($cy, $A), $result, "$method($cy, $A)");
    is($x->copy->$method($cy, $A.'.1'), $result, "$method($cy, ${A}.1)");
    is($x->copy->$method($cy, $A.'.5'), $result, "$method($cy, ${A}.5)");
    is($x->copy->$method($cy, $A.'.6'), $result, "$method($cy, ${A}.6)");
    is($x->copy->$method($cy, $A.'.9'), $result, "$method($cy, ${A}.9)");
}

sub _do_2_p {
    my ($x, $method, $y, $P, $result) = @@_;

    my $cy = $mbf->new($y);

    is($x->copy->$method($cy, undef, $P), $result,
       "$method(undef, $P)");
    is($x->copy->$method($cy, undef, $P.'.1'), $result,
       "$method($cy, undef, ${P}.1)");
    is($x->copy->$method($cy, undef, $P.'.5'), $result,
       "$method($cy, undef, ${P}.5)");
    is($x->copy->$method($cy, undef, $P.'.6'), $result,
       "$method($cy, undef, ${P}.6)");
    is($x->copy->$method($cy, undef, $P.'.9'), $result,
       "$method($cy, undef, ${P}.9)");
}
@

