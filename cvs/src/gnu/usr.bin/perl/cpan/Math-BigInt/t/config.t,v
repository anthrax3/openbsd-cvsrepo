head	1.3;
access;
symbols
	OPENBSD_5_3:1.1.1.1.0.10
	OPENBSD_5_3_BASE:1.1.1.1
	OPENBSD_5_2:1.1.1.1.0.8
	OPENBSD_5_2_BASE:1.1.1.1
	OPENBSD_5_1_BASE:1.1.1.1
	OPENBSD_5_1:1.1.1.1.0.6
	OPENBSD_5_0:1.1.1.1.0.4
	OPENBSD_5_0_BASE:1.1.1.1
	OPENBSD_4_9:1.1.1.1.0.2
	OPENBSD_4_9_BASE:1.1.1.1
	PERL_5_12_2:1.1.1.1
	CPAN:1.1.1;
locks; strict;
comment	@# @;
expand	@o@;


1.3
date	2017.02.05.00.32.01;	author afresh1;	state Exp;
branches;
next	1.2;
commitid	cxJ08BvJA9Pt2PTM;

1.2
date	2013.03.25.20.40.51;	author sthen;	state dead;
branches;
next	1.1;

1.1
date	2010.09.24.14.49.01;	author millert;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	2010.09.24.14.49.01;	author millert;	state Exp;
branches;
next	;


desc
@@


1.3
log
@Fix merge issues, remove excess files - match perl-5.24.1 dist
@
text
@#!perl

use strict;
use warnings;

use Test::More tests => 55;

# test whether Math::BigInt->config() and Math::BigFloat->config() works

use Math::BigInt lib => 'Calc';
use Math::BigFloat;

my $mbi = 'Math::BigInt';
my $mbf = 'Math::BigFloat';

##############################################################################
# Math::BigInt

{
    can_ok($mbi, 'config');

    my $cfg = $mbi->config();

    is(ref($cfg), 'HASH', 'ref() of output from $mbi->config()');

    is($cfg->{lib}, 'Math::BigInt::Calc', 'lib');
    is($cfg->{lib_version}, $Math::BigInt::Calc::VERSION, 'lib_version');
    is($cfg->{class}, $mbi, 'class');
    is($cfg->{upgrade} || '', '', 'upgrade');
    is($cfg->{div_scale}, 40, 'div_Scale');

    is($cfg->{precision} || 0, 0, 'precision'); # should test for undef
    is($cfg->{accuracy} || 0, 0, 'accuracy');
    is($cfg->{round_mode}, 'even', 'round_mode');

    is($cfg->{trap_nan}, 0, 'trap_nan');
    is($cfg->{trap_inf}, 0, 'trap_inf');

    is($mbi->config('lib'), 'Math::BigInt::Calc', 'config("lib")');

    # can set via hash ref?
    $cfg = $mbi->config({ trap_nan => 1 });
    is($cfg->{trap_nan}, 1, 'can set "trap_nan" via hash ref');

    # reset for later
    $mbi->config(trap_nan => 0);
}

##############################################################################
# Math::BigFloat

{
    can_ok($mbf, 'config');

    my $cfg = $mbf->config();

    is(ref($cfg), 'HASH', 'ref() of output from $mbf->config()');

    is($cfg->{lib}, 'Math::BigInt::Calc', 'lib');
    is($cfg->{with}, 'Math::BigInt::Calc', 'with');
    is($cfg->{lib_version}, $Math::BigInt::Calc::VERSION, 'lib_version');
    is($cfg->{class}, $mbf, 'class');
    is($cfg->{upgrade} || '', '', 'upgrade');
    is($cfg->{div_scale}, 40, 'div_Scale');

    is($cfg->{precision} || 0, 0, 'precision'); # should test for undef
    is($cfg->{accuracy} || 0, 0, 'accuracy');
    is($cfg->{round_mode}, 'even', 'round_mode');

    is($cfg->{trap_nan}, 0, 'trap_nan');
    is($cfg->{trap_inf}, 0, 'trap_inf');

    is($mbf->config('lib'), 'Math::BigInt::Calc', 'config("lib")');

    # can set via hash ref?
    $cfg = $mbf->config({ trap_nan => 1 });
    is($cfg->{trap_nan}, 1, 'can set "trap_nan" via hash ref');

    # reset for later
    $mbf->config(trap_nan => 0);
}

##############################################################################
# test setting values

my $test = {
    trap_nan   => 1,
    trap_inf   => 1,
    accuracy   => 2,
    precision  => 3,
    round_mode => 'zero',
    div_scale  => '100',
    upgrade    => 'Math::BigInt::SomeClass',
    downgrade  => 'Math::BigInt::SomeClass',
};

my $c;

foreach my $key (keys %$test) {

    # see if setting in MBI works
    eval { $mbi->config($key => $test->{$key}); };
    $c = $mbi->config();
    is("$key = $c->{$key}", "$key = $test->{$key}", "$key = $test->{$key}");
    $c = $mbf->config();

    # see if setting it in MBI leaves MBF alone
    ok(($c->{$key} || 0) ne $test->{$key},
       "$key ne \$c->{$key}");

    # see if setting in MBF works
    eval { $mbf->config($key => $test->{$key}); };
    $c = $mbf->config();
    is("$key = $c->{$key}", "$key = $test->{$key}", "$key = $test->{$key}");
}

##############################################################################
# test setting illegal keys (should croak)

eval { $mbi->config('some_garbage' => 1); };
like($@@,
     qr/ ^ Illegal \s+ key\(s\) \s+ 'some_garbage' \s+ passed \s+ to \s+
         Math::BigInt->config\(\) \s+ at
       /x,
     'Passing invalid key to Math::BigInt->config() causes an error.');

eval { $mbf->config('some_garbage' => 1); };
like($@@,
     qr/ ^ Illegal \s+ key\(s\) \s+ 'some_garbage' \s+ passed \s+ to \s+
         Math::BigFloat->config\(\) \s+ at
       /x,
     'Passing invalid key to Math::BigFloat->config() causes an error.');
@


1.2
log
@merge/resolve conflicts
(some more to do after this one)
@
text
@d1 1
a1 1
#!/usr/bin/perl -w
d4 1
a4 1
use Test::More;
d6 1
a6 7
BEGIN
  {
  $| = 1;
  chdir 't' if -d 't';
  unshift @@INC, '../lib'; # for running manually
  plan tests => 55;
  } 
d13 2
a14 1
my $mbi = 'Math::BigInt'; my $mbf = 'Math::BigFloat';
d17 1
a17 1
# BigInt
d19 2
a20 1
ok ($mbi->can('config'));
d22 1
a22 1
my $cfg = $mbi->config();
d24 1
a24 1
ok (ref($cfg),'HASH');
d26 5
a30 5
is ($cfg->{lib},'Math::BigInt::Calc', 'lib');
is ($cfg->{lib_version}, $Math::BigInt::Calc::VERSION, 'lib_version');
is ($cfg->{class},$mbi,'class');
is ($cfg->{upgrade}||'','', 'upgrade');
is ($cfg->{div_scale},40, 'div_Scale');
d32 3
a34 3
is ($cfg->{precision}||0,0, 'precision');	# should test for undef
is ($cfg->{accuracy}||0,0,'accuracy');
is ($cfg->{round_mode},'even','round_mode');
d36 2
a37 2
is ($cfg->{trap_nan},0, 'trap_nan');
is ($cfg->{trap_inf},0, 'trap_inf');
d39 1
a39 1
is ($mbi->config('lib'), 'Math::BigInt::Calc', 'config("lib")');
d41 3
a43 3
# can set via hash ref?
$cfg = $mbi->config( { trap_nan => 1 } );
is ($cfg->{trap_nan},1, 'can set via hash ref');
d45 3
a47 2
# reset for later
$mbi->config( trap_nan => 0 );
d50 1
a50 1
# BigFloat
d52 2
a53 1
ok ($mbf->can('config'));
d55 1
a55 1
$cfg = $mbf->config();
d57 1
a57 1
ok (ref($cfg),'HASH');
d59 6
a64 6
is ($cfg->{lib},'Math::BigInt::Calc', 'lib');
is ($cfg->{with},'Math::BigInt::Calc', 'with');
is ($cfg->{lib_version}, $Math::BigInt::Calc::VERSION, 'lib_version');
is ($cfg->{class},$mbf,'class');
is ($cfg->{upgrade}||'','', 'upgrade');
is ($cfg->{div_scale},40, 'div_Scale');
d66 3
a68 3
is ($cfg->{precision}||0,0, 'precision');	# should test for undef
is ($cfg->{accuracy}||0,0,'accuracy');
is ($cfg->{round_mode},'even','round_mode');
d70 2
a71 2
is ($cfg->{trap_nan},0, 'trap_nan');
is ($cfg->{trap_inf},0, 'trap_inf');
d73 1
a73 1
is ($mbf->config('lib'), 'Math::BigInt::Calc', 'config("lib")');
d75 3
a77 3
# can set via hash ref?
$cfg = $mbf->config( { trap_nan => 1 } );
is ($cfg->{trap_nan},1, 'can set via hash ref');
d79 3
a81 2
# reset for later
$mbf->config( trap_nan => 0 );
d87 9
a95 9
   trap_nan => 1, 
   trap_inf => 1, 
   accuracy => 2,
   precision => 3,
   round_mode => 'zero',
   div_scale => '100',
   upgrade => 'Math::BigInt::SomeClass',
   downgrade => 'Math::BigInt::SomeClass',
  };
d99 17
a115 20
foreach my $key (keys %$test)
  {
  # see if setting in MBI works
  eval ( "$mbi\->config( $key => '$test->{$key}' );" );
  $c = $mbi->config(); ok ("$key = $c->{$key}", "$key = $test->{$key}");
  $c = $mbf->config(); 
  # see if setting it in MBI leaves MBF alone
  if (($c->{$key}||0) ne $test->{$key})
    {
    is (1,1);
    }
  else
    {
    is ("$key eq $c->{$key}","$key ne $test->{$key}", "$key");
    }

  # see if setting in MBF works
  eval ( "$mbf\->config( $key => '$test->{$key}' );" );
  $c = $mbf->config(); ok ("$key = $c->{$key}", "$key = $test->{$key}");
  }
a118 13
  
$@@ = ""; my $never_reached = 0;
eval ("$mbi\->config( 'some_garbage' => 1 ); $never_reached = 1;");
is ($never_reached,0);

$@@ = ""; $never_reached = 0;
eval ("$mbf\->config( 'some_garbage' => 1 ); $never_reached = 1;");
is ($never_reached,0);

# this does not work. Why?
#ok ($@@ eq "Illegal keys 'some_garbage' passed to Math::BigInt->config() at ./config.t line 104", 1);

# all tests done
d120 13
@


1.1
log
@Initial revision
@
text
@@


1.1.1.1
log
@Perl 5.12.2 from CPAN
@
text
@@
