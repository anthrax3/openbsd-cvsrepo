head	1.3;
access;
symbols
	OPENBSD_5_3:1.1.1.1.0.10
	OPENBSD_5_3_BASE:1.1.1.1
	OPENBSD_5_2:1.1.1.1.0.8
	OPENBSD_5_2_BASE:1.1.1.1
	OPENBSD_5_1_BASE:1.1.1.1
	OPENBSD_5_1:1.1.1.1.0.6
	OPENBSD_5_0:1.1.1.1.0.4
	OPENBSD_5_0_BASE:1.1.1.1
	OPENBSD_4_9:1.1.1.1.0.2
	OPENBSD_4_9_BASE:1.1.1.1
	PERL_5_12_2:1.1.1.1
	CPAN:1.1.1;
locks; strict;
comment	@# @;
expand	@o@;


1.3
date	2017.02.05.00.32.01;	author afresh1;	state Exp;
branches;
next	1.2;
commitid	cxJ08BvJA9Pt2PTM;

1.2
date	2013.03.25.20.40.51;	author sthen;	state dead;
branches;
next	1.1;

1.1
date	2010.09.24.14.49.00;	author millert;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	2010.09.24.14.49.00;	author millert;	state Exp;
branches;
next	;


desc
@@


1.3
log
@Fix merge issues, remove excess files - match perl-5.24.1 dist
@
text
@#!perl

use strict;
use warnings;

use Test::More tests => 379;

use Math::BigInt::Calc;

my ($BASE_LEN, undef, $AND_BITS, $XOR_BITS, $OR_BITS,
    $BASE_LEN_SMALL, $MAX_VAL)
  = Math::BigInt::Calc->_base_len();

print "# BASE_LEN = $BASE_LEN\n";
print "# MAX_VAL = $MAX_VAL\n";
print "# AND_BITS = $AND_BITS\n";
print "# XOR_BITS = $XOR_BITS\n";
print "# IOR_BITS = $OR_BITS\n";

# testing of Math::BigInt::Calc

my $CALC = 'Math::BigInt::Calc';		# pass classname to sub's

# _new and _str

my $x = $CALC->_new("123");
my $y = $CALC->_new("321");
is(ref($x),         "ARRAY", q|ref($x) is an ARRAY|);
is($CALC->_str($x), 123,     qq|$CALC->_str(\$x) = 123|);
is($CALC->_str($y), 321,     qq|$CALC->_str(\$y) = 321|);

###############################################################################
# _add, _sub, _mul, _div

is($CALC->_str($CALC->_add($x, $y)), 444,
   qq|$CALC->_str($CALC->_add(\$x, \$y)) = 444|);
is($CALC->_str($CALC->_sub($x, $y)), 123,
   qq|$CALC->_str($CALC->_sub(\$x, \$y)) = 123|);
is($CALC->_str($CALC->_mul($x, $y)), 39483,
   qq|$CALC->_str($CALC->_mul(\$x, \$y)) = 39483|);
is($CALC->_str($CALC->_div($x, $y)), 123,
   qq|$CALC->_str($CALC->_div(\$x, \$y)) = 123|);

###############################################################################
# check that mul/div doesn't change $y
# and returns the same reference, not something new

is($CALC->_str($CALC->_mul($x, $y)), 39483,
   qq|$CALC->_str($CALC->_mul(\$x, \$y)) = 39483|);
is($CALC->_str($x), 39483,
   qq|$CALC->_str(\$x) = 39483|);
is($CALC->_str($y), 321,
   qq|$CALC->_str(\$y) = 321|);

is($CALC->_str($CALC->_div($x, $y)), 123,
   qq|$CALC->_str($CALC->_div(\$x, \$y)) = 123|);
is($CALC->_str($x), 123,
   qq|$CALC->_str(\$x) = 123|);
is($CALC->_str($y), 321,
   qq|$CALC->_str(\$y) = 321|);

$x = $CALC->_new("39483");
my ($x1, $r1) = $CALC->_div($x, $y);
is("$x1", "$x", q|"$x1" = "$x"|);
$CALC->_inc($x1);
is("$x1", "$x", q|"$x1" = "$x"|);
is($CALC->_str($r1), "0", qq|$CALC->_str(\$r1) = "0"|);

$x = $CALC->_new("39483");	# reset

###############################################################################

my $z = $CALC->_new("2");
is($CALC->_str($CALC->_add($x, $z)), 39485,
   qq|$CALC->_str($CALC->_add(\$x, \$z)) = 39485|);
my ($re, $rr) = $CALC->_div($x, $y);

is($CALC->_str($re), 123, qq|$CALC->_str(\$re) = 123|);
is($CALC->_str($rr), 2,   qq|$CALC->_str(\$rr) = 2|);

# is_zero, _is_one, _one, _zero

is($CALC->_is_zero($x) || 0, 0, qq/$CALC->_is_zero(\$x) || 0 = 0/);
is($CALC->_is_one($x)  || 0, 0, qq/$CALC->_is_one(\$x)  || 0 = 0/);

is($CALC->_str($CALC->_zero()), "0", qq|$CALC->_str($CALC->_zero()) = "0"|);
is($CALC->_str($CALC->_one()),  "1", qq|$CALC->_str($CALC->_one())  = "1"|);

# _two() and _ten()

is($CALC->_str($CALC->_two()),    "2",  qq|$CALC->_str($CALC->_two()) = "2"|);
is($CALC->_str($CALC->_ten()),    "10", qq|$CALC->_str($CALC->_ten()) = "10"|);
is($CALC->_is_ten($CALC->_two()), 0,    qq|$CALC->_is_ten($CALC->_two()) = 0|);
is($CALC->_is_two($CALC->_two()), 1,    qq|$CALC->_is_two($CALC->_two()) = 1|);
is($CALC->_is_ten($CALC->_ten()), 1,    qq|$CALC->_is_ten($CALC->_ten()) = 1|);
is($CALC->_is_two($CALC->_ten()), 0,    qq|$CALC->_is_two($CALC->_ten()) = 0|);

is($CALC->_is_one($CALC->_one()), 1,    qq|$CALC->_is_one($CALC->_one()) = 1|);
is($CALC->_is_one($CALC->_two()), 0,    qq|$CALC->_is_one($CALC->_two()) = 0|);
is($CALC->_is_one($CALC->_ten()), 0,    qq|$CALC->_is_one($CALC->_ten()) = 0|);

is($CALC->_is_one($CALC->_zero()) || 0, 0,
   qq/$CALC->_is_one($CALC->_zero()) || 0 = 0/);

is($CALC->_is_zero($CALC->_zero()), 1,
   qq|$CALC->_is_zero($CALC->_zero()) = 1|);

is($CALC->_is_zero($CALC->_one()) || 0, 0,
   qq/$CALC->_is_zero($CALC->_one()) || 0 = 0/);

# is_odd, is_even

is($CALC->_is_odd($CALC->_one()), 1,
   qq/$CALC->_is_odd($CALC->_one()) = 1/);
is($CALC->_is_odd($CALC->_zero()) || 0, 0,
   qq/$CALC->_is_odd($CALC->_zero()) || 0 = 0/);
is($CALC->_is_even($CALC->_one()) || 0, 0,
   qq/$CALC->_is_even($CALC->_one()) || 0 = 0/);
is($CALC->_is_even($CALC->_zero()), 1,
   qq/$CALC->_is_even($CALC->_zero()) = 1/);

# _len

for my $method (qw/_alen _len/) {
    $x = $CALC->_new("1");
    is($CALC->$method($x), 1, qq|$CALC->$method(\$x) = 1|);
    $x = $CALC->_new("12");
    is($CALC->$method($x), 2, qq|$CALC->$method(\$x) = 2|);
    $x = $CALC->_new("123");
    is($CALC->$method($x), 3, qq|$CALC->$method(\$x) = 3|);
    $x = $CALC->_new("1234");
    is($CALC->$method($x), 4, qq|$CALC->$method(\$x) = 4|);
    $x = $CALC->_new("12345");
    is($CALC->$method($x), 5, qq|$CALC->$method(\$x) = 5|);
    $x = $CALC->_new("123456");
    is($CALC->$method($x), 6, qq|$CALC->$method(\$x) = 6|);
    $x = $CALC->_new("1234567");
    is($CALC->$method($x), 7, qq|$CALC->$method(\$x) = 7|);
    $x = $CALC->_new("12345678");
    is($CALC->$method($x), 8, qq|$CALC->$method(\$x) = 8|);
    $x = $CALC->_new("123456789");
    is($CALC->$method($x), 9, qq|$CALC->$method(\$x) = 9|);

    $x = $CALC->_new("8");
    is($CALC->$method($x), 1, qq|$CALC->$method(\$x) = 1|);
    $x = $CALC->_new("21");
    is($CALC->$method($x), 2, qq|$CALC->$method(\$x) = 2|);
    $x = $CALC->_new("321");
    is($CALC->$method($x), 3, qq|$CALC->$method(\$x) = 3|);
    $x = $CALC->_new("4321");
    is($CALC->$method($x), 4, qq|$CALC->$method(\$x) = 4|);
    $x = $CALC->_new("54321");
    is($CALC->$method($x), 5, qq|$CALC->$method(\$x) = 5|);
    $x = $CALC->_new("654321");
    is($CALC->$method($x), 6, qq|$CALC->$method(\$x) = 6|);
    $x = $CALC->_new("7654321");
    is($CALC->$method($x), 7, qq|$CALC->$method(\$x) = 7|);
    $x = $CALC->_new("87654321");
    is($CALC->$method($x), 8, qq|$CALC->$method(\$x) = 8|);
    $x = $CALC->_new("987654321");
    is($CALC->$method($x), 9, qq|$CALC->$method(\$x) = 9|);

    $x = $CALC->_new("0");
    is($CALC->$method($x), 1, qq|$CALC->$method(\$x) = 1|);
    $x = $CALC->_new("20");
    is($CALC->$method($x), 2, qq|$CALC->$method(\$x) = 2|);
    $x = $CALC->_new("320");
    is($CALC->$method($x), 3, qq|$CALC->$method(\$x) = 3|);
    $x = $CALC->_new("4320");
    is($CALC->$method($x), 4, qq|$CALC->$method(\$x) = 4|);
    $x = $CALC->_new("54320");
    is($CALC->$method($x), 5, qq|$CALC->$method(\$x) = 5|);
    $x = $CALC->_new("654320");
    is($CALC->$method($x), 6, qq|$CALC->$method(\$x) = 6|);
    $x = $CALC->_new("7654320");
    is($CALC->$method($x), 7, qq|$CALC->$method(\$x) = 7|);
    $x = $CALC->_new("87654320");
    is($CALC->$method($x), 8, qq|$CALC->$method(\$x) = 8|);
    $x = $CALC->_new("987654320");
    is($CALC->$method($x), 9, qq|$CALC->$method(\$x) = 9|);

    for (my $i = 1; $i < 9; $i++) {
        my $a = "$i" . '0' x ($i - 1);
        $x = $CALC->_new($a);
        is($CALC->_len($x), $i, qq|$CALC->_len(\$x) = $i|);
    }
}

# _digit

$x = $CALC->_new("123456789");
is($CALC->_digit($x, 0),   9, qq|$CALC->_digit(\$x, 0) = 9|);
is($CALC->_digit($x, 1),   8, qq|$CALC->_digit(\$x, 1) = 8|);
is($CALC->_digit($x, 2),   7, qq|$CALC->_digit(\$x, 2) = 7|);
is($CALC->_digit($x, 8),   1, qq|$CALC->_digit(\$x, 8) = 1|);
is($CALC->_digit($x, 9),   0, qq|$CALC->_digit(\$x, 9) = 0|);
is($CALC->_digit($x, -1),  1, qq|$CALC->_digit(\$x, -1) = 1|);
is($CALC->_digit($x, -2),  2, qq|$CALC->_digit(\$x, -2) = 2|);
is($CALC->_digit($x, -3),  3, qq|$CALC->_digit(\$x, -3) = 3|);
is($CALC->_digit($x, -9),  9, qq|$CALC->_digit(\$x, -9) = 9|);
is($CALC->_digit($x, -10), 0, qq|$CALC->_digit(\$x, -10) = 0|);

# _copy

foreach (qw/ 1 12 123 1234 12345 123456 1234567 12345678 123456789/) {
    $x = $CALC->_new("$_");
    is($CALC->_str($CALC->_copy($x)), "$_",
       qq|$CALC->_str($CALC->_copy(\$x)) = "$_"|);
    is($CALC->_str($x), "$_",           # did _copy destroy original x?
       qq|$CALC->_str(\$x) = "$_"|);
}

# _zeros

$x = $CALC->_new("1256000000");
is($CALC->_zeros($x), 6, qq|$CALC->_zeros(\$x) = 6|);

$x = $CALC->_new("152");
is($CALC->_zeros($x), 0, qq|$CALC->_zeros(\$x) = 0|);

$x = $CALC->_new("123000");
is($CALC->_zeros($x), 3, qq|$CALC->_zeros(\$x) = 3|);

$x = $CALC->_new("0");
is($CALC->_zeros($x), 0, qq|$CALC->_zeros(\$x) = 0|);

# _lsft, _rsft

$x = $CALC->_new("10");
$y = $CALC->_new("3");
is($CALC->_str($CALC->_lsft($x, $y, 10)), 10000,
   qq|$CALC->_str($CALC->_lsft(\$x, \$y, 10)) = 10000|);

$x = $CALC->_new("20");
$y = $CALC->_new("3");
is($CALC->_str($CALC->_lsft($x, $y, 10)), 20000,
   qq|$CALC->_str($CALC->_lsft(\$x, \$y, 10)) = 20000|);

$x = $CALC->_new("128");
$y = $CALC->_new("4");
is($CALC->_str($CALC->_lsft($x, $y, 2)), 128 << 4,
   qq|$CALC->_str($CALC->_lsft(\$x, \$y, 2)) = 128 << 4|);

$x = $CALC->_new("1000");
$y = $CALC->_new("3");
is($CALC->_str($CALC->_rsft($x, $y, 10)), 1,
   qq|$CALC->_str($CALC->_rsft(\$x, \$y, 10)) = 1|);

$x = $CALC->_new("20000");
$y = $CALC->_new("3");
is($CALC->_str($CALC->_rsft($x, $y, 10)), 20,
   qq|$CALC->_str($CALC->_rsft(\$x, \$y, 10)) = 20|);

$x = $CALC->_new("256");
$y = $CALC->_new("4");
is($CALC->_str($CALC->_rsft($x, $y, 2)), 256 >> 4,
   qq|$CALC->_str($CALC->_rsft(\$x, \$y, 2)) = 256 >> 4|);

$x = $CALC->_new("6411906467305339182857313397200584952398");
$y = $CALC->_new("45");
is($CALC->_str($CALC->_rsft($x, $y, 10)), 0,
   qq|$CALC->_str($CALC->_rsft(\$x, \$y, 10)) = 0|);

# _acmp

$x = $CALC->_new("123456789");
$y = $CALC->_new("987654321");
is($CALC->_acmp($x, $y), -1, qq|$CALC->_acmp(\$x, \$y) = -1|);
is($CALC->_acmp($y, $x), 1,  qq|$CALC->_acmp(\$y, \$x) = 1|);
is($CALC->_acmp($x, $x), 0,  qq|$CALC->_acmp(\$x, \$x) = 0|);
is($CALC->_acmp($y, $y), 0,  qq|$CALC->_acmp(\$y, \$y) = 0|);
$x = $CALC->_new("12");
$y = $CALC->_new("12");
is($CALC->_acmp($x, $y), 0,  qq|$CALC->_acmp(\$x, \$y) = 0|);
$x = $CALC->_new("21");
is($CALC->_acmp($x, $y), 1,  qq|$CALC->_acmp(\$x, \$y) = 1|);
is($CALC->_acmp($y, $x), -1, qq|$CALC->_acmp(\$y, \$x) = -1|);
$x = $CALC->_new("123456789");
$y = $CALC->_new("1987654321");
is($CALC->_acmp($x, $y), -1, qq|$CALC->_acmp(\$x, \$y) = -1|);
is($CALC->_acmp($y, $x), +1, qq|$CALC->_acmp(\$y, \$x) = +1|);

$x = $CALC->_new("1234567890123456789");
$y = $CALC->_new("987654321012345678");
is($CALC->_acmp($x, $y), 1,  qq|$CALC->_acmp(\$x, \$y) = 1|);
is($CALC->_acmp($y, $x), -1, qq|$CALC->_acmp(\$y, \$x) = -1|);
is($CALC->_acmp($x, $x), 0,  qq|$CALC->_acmp(\$x, \$x) = 0|);
is($CALC->_acmp($y, $y), 0,  qq|$CALC->_acmp(\$y, \$y) = 0|);

$x = $CALC->_new("1234");
$y = $CALC->_new("987654321012345678");
is($CALC->_acmp($x, $y), -1, qq|$CALC->_acmp(\$x, \$y) = -1|);
is($CALC->_acmp($y, $x), 1,  qq|$CALC->_acmp(\$y, \$x) = 1|);
is($CALC->_acmp($x, $x), 0,  qq|$CALC->_acmp(\$x, \$x) = 0|);
is($CALC->_acmp($y, $y), 0,  qq|$CALC->_acmp(\$y, \$y) = 0|);

# _modinv

$x = $CALC->_new("8");
$y = $CALC->_new("5033");
my ($xmod, $sign) = $CALC->_modinv($x, $y);
is($CALC->_str($xmod), "629", 	        # -629 % 5033 == 4404
   qq|$CALC->_str(\$xmod) = "629"|);
is($sign, "-", q|$sign = "-"|);

# _div

$x = $CALC->_new("3333");
$y = $CALC->_new("1111");
is($CALC->_str(scalar($CALC->_div($x, $y))), 3,
   qq|$CALC->_str(scalar($CALC->_div(\$x, \$y))) = 3|);

$x = $CALC->_new("33333");
$y = $CALC->_new("1111");
($x, $y) = $CALC->_div($x, $y);
is($CALC->_str($x), 30, qq|$CALC->_str(\$x) = 30|);
is($CALC->_str($y),  3, qq|$CALC->_str(\$y) = 3|);

$x = $CALC->_new("123");
$y = $CALC->_new("1111");
($x, $y) = $CALC->_div($x, $y);
is($CALC->_str($x), 0,   qq|$CALC->_str(\$x) = 0|);
is($CALC->_str($y), 123, qq|$CALC->_str(\$y) = 123|);

# _num

foreach (qw/1 12 123 1234 12345 1234567 12345678 123456789 1234567890/) {

    $x = $CALC->_new("$_");
    is(ref($x),         "ARRAY", q|ref($x) = "ARRAY"|);
    is($CALC->_str($x), "$_",    qq|$CALC->_str(\$x) = "$_"|);

    $x = $CALC->_num($x);
    is(ref($x), "", q|ref($x) = ""|);
    is($x,      $_, qq|\$x = $_|);
}

# _sqrt

$x = $CALC->_new("144");
is($CALC->_str($CALC->_sqrt($x)), "12",
   qq|$CALC->_str($CALC->_sqrt(\$x)) = "12"|);
$x = $CALC->_new("144000000000000");
is($CALC->_str($CALC->_sqrt($x)), "12000000",
   qq|$CALC->_str($CALC->_sqrt(\$x)) = "12000000"|);

# _root

$x = $CALC->_new("81");
my $n = $CALC->_new("3"); 	# 4*4*4 = 64, 5*5*5 = 125
is($CALC->_str($CALC->_root($x, $n)), "4",
   qq|$CALC->_str($CALC->_root(\$x, \$n)) = "4"|); # 4.xx => 4.0

$x = $CALC->_new("81");
$n = $CALC->_new("4");          # 3*3*3*3 == 81
is($CALC->_str($CALC->_root($x, $n)), "3",
   qq|$CALC->_str($CALC->_root(\$x, \$n)) = "3"|);

# _pow (and _root)

$x = $CALC->_new("0");
$n = $CALC->_new("3");          # 0 ** y => 0
is($CALC->_str($CALC->_pow($x, $n)), 0,
   qq|$CALC->_str($CALC->_pow(\$x, \$n)) = 0|);

$x = $CALC->_new("3");
$n = $CALC->_new("0");          # x ** 0 => 1
is($CALC->_str($CALC->_pow($x, $n)), 1,
   qq|$CALC->_str($CALC->_pow(\$x, \$n)) = 1|);

$x = $CALC->_new("1");
$n = $CALC->_new("3");          # 1 ** y => 1
is($CALC->_str($CALC->_pow($x, $n)), 1,
   qq|$CALC->_str($CALC->_pow(\$x, \$n)) = 1|);

$x = $CALC->_new("5");
$n = $CALC->_new("1");          # x ** 1 => x
is($CALC->_str($CALC->_pow($x, $n)), 5,
   qq|$CALC->_str($CALC->_pow(\$x, \$n)) = 5|);

$x = $CALC->_new("81");
$n = $CALC->_new("3");          # 81 ** 3 == 531441
is($CALC->_str($CALC->_pow($x, $n)), 81 ** 3,
   qq|$CALC->_str($CALC->_pow(\$x, \$n)) = 81 ** 3|);

is($CALC->_str($CALC->_root($x, $n)), 81,
   qq|$CALC->_str($CALC->_root(\$x, \$n)) = 81|);

$x = $CALC->_new("81");
is($CALC->_str($CALC->_pow($x, $n)), 81 ** 3,
   qq|$CALC->_str($CALC->_pow(\$x, \$n)) = 81 ** 3|);
is($CALC->_str($CALC->_pow($x, $n)), "150094635296999121",      # 531441 ** 3
   qq|$CALC->_str($CALC->_pow(\$x, \$n)) = "150094635296999121"|);

is($CALC->_str($CALC->_root($x, $n)), "531441",
   qq|$CALC->_str($CALC->_root(\$x, \$n)) = "531441"|);
is($CALC->_str($CALC->_root($x, $n)), "81",
   qq|$CALC->_str($CALC->_root(\$x, \$n)) = "81"|);

$x = $CALC->_new("81");
$n = $CALC->_new("14");
is($CALC->_str($CALC->_pow($x, $n)), "523347633027360537213511521",
   qq|$CALC->_str($CALC->_pow(\$x, \$n)) = "523347633027360537213511521"|);
is($CALC->_str($CALC->_root($x, $n)), "81",
   qq|$CALC->_str($CALC->_root(\$x, \$n)) = "81"|);

$x = $CALC->_new("523347633027360537213511520");
is($CALC->_str($CALC->_root($x, $n)), "80",
   qq|$CALC->_str($CALC->_root(\$x, \$n)) = "80"|);

$x = $CALC->_new("523347633027360537213511522");
is($CALC->_str($CALC->_root($x, $n)), "81",
   qq|$CALC->_str($CALC->_root(\$x, \$n)) = "81"|);

my $res = [ qw/9 31 99 316 999 3162 9999 31622 99999/ ];

# 99 ** 2 = 9801, 999 ** 2 = 998001 etc

for my $i (2 .. 9) {
    $x = '9' x $i;
    $x = $CALC->_new($x);
    $n = $CALC->_new("2");
    my $rc = '9' x ($i-1). '8' . '0' x ($i - 1) . '1';
    print "# _pow( ", '9' x $i, ", 2) \n" unless
      is($CALC->_str($CALC->_pow($x, $n)), $rc,
         qq|$CALC->_str($CALC->_pow(\$x, \$n)) = $rc|);

  SKIP: {
        # If $i > $BASE_LEN, the test takes a really long time.
        skip "$i > $BASE_LEN", 2 unless $i <= $BASE_LEN;

        $x = '9' x $i;
        $x = $CALC->_new($x);
        $n = '9' x $i;
        $n = $CALC->_new($n);
        print "# _root( ", '9' x $i, ", ", 9 x $i, ") \n";
        print "# _root( ", '9' x $i, ", ", 9 x $i, ") \n"
          unless is($CALC->_str($CALC->_root($x, $n)), '1',
                    qq|$CALC->_str($CALC->_root(\$x, \$n)) = '1'|);

        $x = '9' x $i;
        $x = $CALC->_new($x);
        $n = $CALC->_new("2");
        print "# BASE_LEN $BASE_LEN _root( ", '9' x $i, ", ", 9 x $i, ") \n"
          unless is($CALC->_str($CALC->_root($x, $n)), $res->[$i-2],
                    qq|$CALC->_str($CALC->_root(\$x, \$n)) = $res->[$i-2]|);
    }
}

##############################################################################
# _fac

$x = $CALC->_new("0");
is($CALC->_str($CALC->_fac($x)), "1",
   qq|$CALC->_str($CALC->_fac(\$x)) = "1"|);

$x = $CALC->_new("1");
is($CALC->_str($CALC->_fac($x)), "1",
   qq|$CALC->_str($CALC->_fac(\$x)) = "1"|);

$x = $CALC->_new("2");
is($CALC->_str($CALC->_fac($x)), "2",
   qq|$CALC->_str($CALC->_fac(\$x)) = "2"|);

$x = $CALC->_new("3");
is($CALC->_str($CALC->_fac($x)), "6",
   qq|$CALC->_str($CALC->_fac(\$x)) = "6"|);

$x = $CALC->_new("4");
is($CALC->_str($CALC->_fac($x)), "24",
   qq|$CALC->_str($CALC->_fac(\$x)) = "24"|);

$x = $CALC->_new("5");
is($CALC->_str($CALC->_fac($x)), "120",
   qq|$CALC->_str($CALC->_fac(\$x)) = "120"|);

$x = $CALC->_new("10");
is($CALC->_str($CALC->_fac($x)), "3628800",
   qq|$CALC->_str($CALC->_fac(\$x)) = "3628800"|);

$x = $CALC->_new("11");
is($CALC->_str($CALC->_fac($x)), "39916800",
   qq|$CALC->_str($CALC->_fac(\$x)) = "39916800"|);

$x = $CALC->_new("12");
is($CALC->_str($CALC->_fac($x)), "479001600",
   qq|$CALC->_str($CALC->_fac(\$x)) = "479001600"|);

$x = $CALC->_new("13");
is($CALC->_str($CALC->_fac($x)), "6227020800",
   qq|$CALC->_str($CALC->_fac(\$x)) = "6227020800"|);

# test that _fac modifies $x in place for small arguments

$x = $CALC->_new("3");
$CALC->_fac($x);
is($CALC->_str($x), "6",
   qq|$CALC->_str(\$x) = "6"|);

$x = $CALC->_new("13");
$CALC->_fac($x);
is($CALC->_str($x), "6227020800",
   qq|$CALC->_str(\$x) = "6227020800"|);

##############################################################################
# _inc and _dec

for (qw/1 11 121 1231 12341 1234561 12345671 123456781 1234567891/) {
    $x = $CALC->_new("$_");
    $CALC->_inc($x);
    my $expected = substr($_, 0, length($_) - 1) . '2';
    is($CALC->_str($x), $expected, qq|$CALC->_str(\$x) = $expected|);
    $CALC->_dec($x);
    is($CALC->_str($x), $_, qq|$CALC->_str(\$x) = $_|);
}

for (qw/19 119 1219 12319 1234519 12345619 123456719 1234567819/) {
    $x = $CALC->_new("$_");
    $CALC->_inc($x);
    my $expected = substr($_, 0, length($_)-2) . '20';
    is($CALC->_str($x), $expected, qq|$CALC->_str(\$x) = $expected|);
    $CALC->_dec($x);
    is($CALC->_str($x), $_, qq|$CALC->_str(\$x) = $_|);
}

for (qw/999 9999 99999 9999999 99999999 999999999 9999999999 99999999999/) {
    $x = $CALC->_new("$_");
    $CALC->_inc($x);
    my $expected = '1' . '0' x (length($_));
    is($CALC->_str($x), $expected, qq|$CALC->_str(\$x) = $expected|);
    $CALC->_dec($x);
    is($CALC->_str($x), $_, qq|$CALC->_str(\$x) = $_|);
}

$x = $CALC->_new("1000");
$CALC->_inc($x);
is($CALC->_str($x), "1001", qq|$CALC->_str(\$x) = "1001"|);
$CALC->_dec($x);
is($CALC->_str($x), "1000", qq|$CALC->_str(\$x) = "1000"|);

my $BL;
{
    no strict 'refs';
    $BL = &{"$CALC"."::_base_len"}();
}

$x = '1' . '0' x $BL;
$z = '1' . '0' x ($BL - 1);
$z .= '1';
$x = $CALC->_new($x);
$CALC->_inc($x);
is($CALC->_str($x), $z, qq|$CALC->_str(\$x) = $z|);

$x = '1' . '0' x $BL;
$z = '9' x $BL;
$x = $CALC->_new($x);
$CALC->_dec($x);
is($CALC->_str($x), $z, qq|$CALC->_str(\$x) = $z|);

# should not happen:
# $x = $CALC->_new("-2");
# $y = $CALC->_new("4");
# is($CALC->_acmp($x, $y), -1, qq|$CALC->_acmp($x, $y) = -1|);

###############################################################################
# _mod

$x = $CALC->_new("1000");
$y = $CALC->_new("3");
is($CALC->_str(scalar($CALC->_mod($x, $y))), 1,
   qq|$CALC->_str(scalar($CALC->_mod(\$x, \$y))) = 1|);

$x = $CALC->_new("1000");
$y = $CALC->_new("2");
is($CALC->_str(scalar($CALC->_mod($x, $y))), 0,
   qq|$CALC->_str(scalar($CALC->_mod(\$x, \$y))) = 0|);

# _and, _or, _xor

$x = $CALC->_new("5");
$y = $CALC->_new("2");
is($CALC->_str(scalar($CALC->_xor($x, $y))), 7,
   qq|$CALC->_str(scalar($CALC->_xor(\$x, \$y))) = 7|);

$x = $CALC->_new("5");
$y = $CALC->_new("2");
is($CALC->_str(scalar($CALC->_or($x, $y))), 7,
   qq|$CALC->_str(scalar($CALC->_or(\$x, \$y))) = 7|);

$x = $CALC->_new("5");
$y = $CALC->_new("3");
is($CALC->_str(scalar($CALC->_and($x, $y))), 1,
   qq|$CALC->_str(scalar($CALC->_and(\$x, \$y))) = 1|);

# _from_hex, _from_bin, _from_oct

is($CALC->_str($CALC->_from_hex("0xFf")), 255,
   qq|$CALC->_str($CALC->_from_hex("0xFf")) = 255|);
is($CALC->_str($CALC->_from_bin("0b10101011")), 160+11,
   qq|$CALC->_str($CALC->_from_bin("0b10101011")) = 160+11|);
is($CALC->_str($CALC->_from_oct("0100")), 8*8,
   qq|$CALC->_str($CALC->_from_oct("0100")) = 8*8|);
is($CALC->_str($CALC->_from_oct("01000")), 8*8*8,
   qq|$CALC->_str($CALC->_from_oct("01000")) = 8*8*8|);
is($CALC->_str($CALC->_from_oct("010001")), 8*8*8*8+1,
   qq|$CALC->_str($CALC->_from_oct("010001")) = 8*8*8*8+1|);
is($CALC->_str($CALC->_from_oct("010007")), 8*8*8*8+7,
   qq|$CALC->_str($CALC->_from_oct("010007")) = 8*8*8*8+7|);

# _as_hex, _as_bin, as_oct

is($CALC->_str($CALC->_from_hex($CALC->_as_hex($CALC->_new("128")))), 128,
   qq|$CALC->_str($CALC->_from_hex($CALC->_as_hex(|
   . qq|$CALC->_new("128")))) = 128|);
is($CALC->_str($CALC->_from_bin($CALC->_as_bin($CALC->_new("128")))), 128,
   qq|$CALC->_str($CALC->_from_bin($CALC->_as_bin(|
   . qq|$CALC->_new("128")))) = 128|);
is($CALC->_str($CALC->_from_oct($CALC->_as_oct($CALC->_new("128")))), 128,
   qq|$CALC->_str($CALC->_from_oct($CALC->_as_oct(|
   . qq|$CALC->_new("128")))) = 128|);

is($CALC->_str($CALC->_from_oct($CALC->_as_oct($CALC->_new("123456")))),
   123456,
   qq|$CALC->_str($CALC->_from_oct($CALC->_as_oct|
   . qq|($CALC->_new("123456")))) = 123456|);
is($CALC->_str($CALC->_from_oct($CALC->_as_oct($CALC->_new("123456789")))),
   "123456789",
   qq|$CALC->_str($CALC->_from_oct($CALC->_as_oct(|
   . qq|$CALC->_new("123456789")))) = "123456789"|);
is($CALC->_str($CALC->_from_oct($CALC->_as_oct($CALC->_new("1234567890123")))),
   "1234567890123",
   qq|$CALC->_str($CALC->_from_oct($CALC->_as_oct(|
   . qq|$CALC->_new("1234567890123")))) = "1234567890123"|);

my $long = "123456789012345678901234567890";
is($CALC->_str($CALC->_from_hex($CALC->_as_hex($CALC->_new($long)))), $long,
   qq|$CALC->_str($CALC->_from_hex($CALC->_as_hex(|
   . qq|$CALC->_new("$long")))) = "$long"|);
is($CALC->_str($CALC->_from_bin($CALC->_as_bin($CALC->_new($long)))), $long,
   qq|$CALC->_str($CALC->_from_bin($CALC->_as_bin(|
   . qq|$CALC->_new("$long")))) = "$long"|);
is($CALC->_str($CALC->_from_oct($CALC->_as_oct($CALC->_new($long)))), $long,
   qq|$CALC->_str($CALC->_from_oct($CALC->_as_oct(|
   . qq|$CALC->_new("$long")))) = "$long"|);

is($CALC->_str($CALC->_from_hex($CALC->_as_hex($CALC->_new("0")))), 0,
   qq|$CALC->_str($CALC->_from_hex($CALC->_as_hex(|
   . qq|$CALC->_new("0")))) = 0|);
is($CALC->_str($CALC->_from_bin($CALC->_as_bin($CALC->_new("0")))), 0,
   qq|$CALC->_str($CALC->_from_bin($CALC->_as_bin(|
   . qq|$CALC->_new("0")))) = 0|);
is($CALC->_str($CALC->_from_oct($CALC->_as_oct($CALC->_new("0")))), 0,
   qq|$CALC->_str($CALC->_from_oct($CALC->_as_oct(|
   . qq|$CALC->_new("0")))) = 0|);

is($CALC->_as_hex($CALC->_new("0")), "0x0",
   qq|$CALC->_as_hex($CALC->_new("0")) = "0x0"|);
is($CALC->_as_bin($CALC->_new("0")), "0b0",
   qq|$CALC->_as_bin($CALC->_new("0")) = "0b0"|);
is($CALC->_as_oct($CALC->_new("0")), "00",
   qq|$CALC->_as_oct($CALC->_new("0")) = "00"|);

is($CALC->_as_hex($CALC->_new("12")), "0xc",
   qq|$CALC->_as_hex($CALC->_new("12")) = "0xc"|);
is($CALC->_as_bin($CALC->_new("12")), "0b1100",
   qq|$CALC->_as_bin($CALC->_new("12")) = "0b1100"|);
is($CALC->_as_oct($CALC->_new("64")), "0100",
   qq|$CALC->_as_oct($CALC->_new("64")) = "0100"|);

# _1ex

is($CALC->_str($CALC->_1ex(0)), "1",
   qq|$CALC->_str($CALC->_1ex(0)) = "1"|);
is($CALC->_str($CALC->_1ex(1)), "10",
   qq|$CALC->_str($CALC->_1ex(1)) = "10"|);
is($CALC->_str($CALC->_1ex(2)), "100",
   qq|$CALC->_str($CALC->_1ex(2)) = "100"|);
is($CALC->_str($CALC->_1ex(12)), "1000000000000",
   qq|$CALC->_str($CALC->_1ex(12)) = "1000000000000"|);
is($CALC->_str($CALC->_1ex(16)), "10000000000000000",
   qq|$CALC->_str($CALC->_1ex(16)) = "10000000000000000"|);

# _check

$x = $CALC->_new("123456789");
is($CALC->_check($x), 0,
   qq|$CALC->_check(\$x) = 0|);
is($CALC->_check(123), "123 is not a reference",
   qq|$CALC->_check(123) = "123 is not a reference"|);

###############################################################################
# __strip_zeros

{
    no strict 'refs';

    # correct empty arrays
    $x = &{$CALC."::__strip_zeros"}([]);
    is(@@$x, 1, q|@@$x = 1|);
    is($x->[0], 0, q|$x->[0] = 0|);

    # don't strip single elements
    $x = &{$CALC."::__strip_zeros"}([0]);
    is(@@$x, 1, q|@@$x = 1|);
    is($x->[0], 0, q|$x->[0] = 0|);
    $x = &{$CALC."::__strip_zeros"}([1]);
    is(@@$x, 1, q|@@$x = 1|);
    is($x->[0], 1, q|$x->[0] = 1|);

    # don't strip non-zero elements
    $x = &{$CALC."::__strip_zeros"}([0, 1]);
    is(@@$x, 2, q|@@$x = 2|);
    is($x->[0], 0, q|$x->[0] = 0|);
    is($x->[1], 1, q|$x->[1] = 1|);
    $x = &{$CALC."::__strip_zeros"}([0, 1, 2]);
    is(@@$x, 3, q|@@$x = 3|);
    is($x->[0], 0, q|$x->[0] = 0|);
    is($x->[1], 1, q|$x->[1] = 1|);
    is($x->[2], 2, q|$x->[2] = 2|);

    # but strip leading zeros
    $x = &{$CALC."::__strip_zeros"}([0, 1, 2, 0]);
    is(@@$x, 3, q|@@$x = 3|);
    is($x->[0], 0, q|$x->[0] = 0|);
    is($x->[1], 1, q|$x->[1] = 1|);
    is($x->[2], 2, q|$x->[2] = 2|);

    $x = &{$CALC."::__strip_zeros"}([0, 1, 2, 0, 0]);
    is(@@$x, 3, q|@@$x = 3|);
    is($x->[0], 0, q|$x->[0] = 0|);
    is($x->[1], 1, q|$x->[1] = 1|);
    is($x->[2], 2, q|$x->[2] = 2|);

    $x = &{$CALC."::__strip_zeros"}([0, 1, 2, 0, 0, 0]);
    is(@@$x, 3, q|@@$x = 3|);
    is($x->[0], 0, q|$x->[0] = 0|);
    is($x->[1], 1, q|$x->[1] = 1|);
    is($x->[2], 2, q|$x->[2] = 2|);

    # collapse multiple zeros
    $x = &{$CALC."::__strip_zeros"}([0, 0, 0, 0]);
    is(@@$x, 1, q|@@$x = 1|);
    is($x->[0], 0, q|$x->[0] = 0|);
}

# done

1;
@


1.2
log
@merge/resolve conflicts
(some more to do after this one)
@
text
@d1 1
a1 1
#!/usr/bin/perl -w
d4 1
a4 1
use Test;
d6 1
a6 12
BEGIN 
  {
  $| = 1;
  chdir 't' if -d 't';
  unshift @@INC, '../lib';		# for running manually
  if ($^O eq 'unicos')			# the tests hang under "unicos"
    {
    print "1..0\n";
    exit(0);
    }
  plan tests => 375;
  }
d10 3
a12 2
my ($BASE_LEN, $AND_BITS, $XOR_BITS, $OR_BITS, $BASE_LEN_SMALL, $MAX_VAL) =
  Math::BigInt::Calc->_base_len();
d22 1
a22 1
my $C = 'Math::BigInt::Calc';		# pass classname to sub's
d25 6
a30 2
my $x = $C->_new("123"); my $y = $C->_new("321");
ok (ref($x),'ARRAY'); ok ($C->_str($x),123); ok ($C->_str($y),321);
d34 9
a42 4
ok ($C->_str($C->_add($x,$y)),444);
ok ($C->_str($C->_sub($x,$y)),123);
ok ($C->_str($C->_mul($x,$y)),39483);
ok ($C->_str($C->_div($x,$y)),123);
a46 2
ok ($C->_str($C->_mul($x,$y)),39483);
ok ($C->_str($x),39483); ok ($C->_str($y),321);
d48 20
a67 2
ok ($C->_str($C->_div($x,$y)),123);
ok ($C->_str($x),123); ok ($C->_str($y),321);
d69 1
a69 6
$x = $C->_new("39483");
my ($x1,$r1) = $C->_div($x,$y);
ok ("$x1","$x");
$C->_inc($x1);
ok ("$x1","$x");
ok ($C->_str($r1),'0');
d71 1
a71 1
$x = $C->_new("39483");	# reset
d73 4
a76 4
###############################################################################
my $z = $C->_new("2");
ok ($C->_str($C->_add($x,$z)),39485);
my ($re,$rr) = $C->_div($x,$y);
d78 2
a79 1
ok ($C->_str($re),123); ok ($C->_str($rr),2);
a81 2
ok ($C->_is_zero($x)||0,0);
ok ($C->_is_one($x)||0,0);
d83 5
a87 2
ok ($C->_str($C->_zero()),"0");
ok ($C->_str($C->_one()),"1");
a89 10
ok ($C->_str($C->_two()),"2");
ok ($C->_str($C->_ten()),"10");
ok ($C->_is_ten($C->_two()),0);
ok ($C->_is_two($C->_two()),1);
ok ($C->_is_ten($C->_ten()),1);
ok ($C->_is_two($C->_ten()),0);

ok ($C->_is_one($C->_one()),1);
ok ($C->_is_one($C->_two()),0);
ok ($C->_is_one($C->_ten()),0);
d91 10
a100 1
ok ($C->_is_one($C->_zero()) || 0,0);
d102 2
a103 1
ok ($C->_is_zero($C->_zero()),1);
d105 5
a109 1
ok ($C->_is_zero($C->_one()) || 0,0);
d112 9
a120 2
ok ($C->_is_odd($C->_one()),1); ok ($C->_is_odd($C->_zero())||0,0);
ok ($C->_is_even($C->_one()) || 0,0); ok ($C->_is_even($C->_zero()),1);
d123 63
a185 37
for my $method (qw/_alen _len/)
  {
  $x = $C->_new("1"); ok ($C->$method($x),1);
  $x = $C->_new("12"); ok ($C->$method($x),2);
  $x = $C->_new("123"); ok ($C->$method($x),3);
  $x = $C->_new("1234"); ok ($C->$method($x),4);
  $x = $C->_new("12345"); ok ($C->$method($x),5);
  $x = $C->_new("123456"); ok ($C->$method($x),6);
  $x = $C->_new("1234567"); ok ($C->$method($x),7);
  $x = $C->_new("12345678"); ok ($C->$method($x),8);
  $x = $C->_new("123456789"); ok ($C->$method($x),9);

  $x = $C->_new("8"); ok ($C->$method($x),1);
  $x = $C->_new("21"); ok ($C->$method($x),2);
  $x = $C->_new("321"); ok ($C->$method($x),3);
  $x = $C->_new("4321"); ok ($C->$method($x),4);
  $x = $C->_new("54321"); ok ($C->$method($x),5);
  $x = $C->_new("654321"); ok ($C->$method($x),6);
  $x = $C->_new("7654321"); ok ($C->$method($x),7);
  $x = $C->_new("87654321"); ok ($C->$method($x),8);
  $x = $C->_new("987654321"); ok ($C->$method($x),9);

  $x = $C->_new("0"); ok ($C->$method($x),1);
  $x = $C->_new("20"); ok ($C->$method($x),2);
  $x = $C->_new("320"); ok ($C->$method($x),3);
  $x = $C->_new("4320"); ok ($C->$method($x),4);
  $x = $C->_new("54320"); ok ($C->$method($x),5);
  $x = $C->_new("654320"); ok ($C->$method($x),6);
  $x = $C->_new("7654320"); ok ($C->$method($x),7);
  $x = $C->_new("87654320"); ok ($C->$method($x),8);
  $x = $C->_new("987654320"); ok ($C->$method($x),9);

  for (my $i = 1; $i < 9; $i++)
    {
    my $a = "$i" . '0' x ($i-1);
    $x = $C->_new($a); 
    print "# Tried len '$a'\n" unless ok ($C->_len($x),$i);
d187 1
a187 1
  }
d190 12
a201 7
$x = $C->_new("123456789");
ok ($C->_digit($x,0),9);
ok ($C->_digit($x,1),8);
ok ($C->_digit($x,2),7);
ok ($C->_digit($x,-1),1);
ok ($C->_digit($x,-2),2);
ok ($C->_digit($x,-3),3);
d204 8
a211 6
foreach (qw/ 1 12 123 1234 12345 123456 1234567 12345678 123456789/)
  {
  $x = $C->_new("$_");
  ok ($C->_str($C->_copy($x)),"$_");
  ok ($C->_str($x),"$_");		# did _copy destroy original x?
  }
d214 12
a225 4
$x = $C->_new("1256000000"); ok ($C->_zeros($x),6);
$x = $C->_new("152"); ok ($C->_zeros($x),0);
$x = $C->_new("123000"); ok ($C->_zeros($x),3); 
$x = $C->_new("0"); ok ($C->_zeros($x),0); 
d228 35
a262 18
$x = $C->_new("10"); $y = $C->_new("3"); 
ok ($C->_str($C->_lsft($x,$y,10)),10000);
$x = $C->_new("20"); $y = $C->_new("3"); 
ok ($C->_str($C->_lsft($x,$y,10)),20000);

$x = $C->_new("128"); $y = $C->_new("4");
ok ($C->_str($C->_lsft($x,$y,2)), 128 << 4);

$x = $C->_new("1000"); $y = $C->_new("3"); 
ok ($C->_str($C->_rsft($x,$y,10)),1);
$x = $C->_new("20000"); $y = $C->_new("3"); 
ok ($C->_str($C->_rsft($x,$y,10)),20);
$x = $C->_new("256"); $y = $C->_new("4");
ok ($C->_str($C->_rsft($x,$y,2)),256 >> 4);

$x = $C->_new("6411906467305339182857313397200584952398");
$y = $C->_new("45");
ok ($C->_str($C->_rsft($x,$y,10)),0);
d265 31
a295 30
$x = $C->_new("123456789");
$y = $C->_new("987654321");
ok ($C->_acmp($x,$y),-1);
ok ($C->_acmp($y,$x),1);
ok ($C->_acmp($x,$x),0);
ok ($C->_acmp($y,$y),0);
$x = $C->_new("12");
$y = $C->_new("12");
ok ($C->_acmp($x,$y),0);
$x = $C->_new("21");
ok ($C->_acmp($x,$y),1);
ok ($C->_acmp($y,$x),-1);
$x = $C->_new("123456789");
$y = $C->_new("1987654321");
ok ($C->_acmp($x,$y),-1);
ok ($C->_acmp($y,$x),+1);

$x = $C->_new("1234567890123456789");
$y = $C->_new("987654321012345678");
ok ($C->_acmp($x,$y),1);
ok ($C->_acmp($y,$x),-1);
ok ($C->_acmp($x,$x),0);
ok ($C->_acmp($y,$y),0);

$x = $C->_new("1234");
$y = $C->_new("987654321012345678");
ok ($C->_acmp($x,$y),-1);
ok ($C->_acmp($y,$x),1);
ok ($C->_acmp($x,$x),0);
ok ($C->_acmp($y,$y),0);
d298 7
a304 5
$x = $C->_new("8");
$y = $C->_new("5033");
my ($xmod,$sign) = $C->_modinv($x,$y);
ok ($C->_str($xmod),'629');		# -629 % 5033 == 4404
ok ($sign, '-');
d307 17
a323 6
$x = $C->_new("3333"); $y = $C->_new("1111");
ok ($C->_str(scalar $C->_div($x,$y)),3);
$x = $C->_new("33333"); $y = $C->_new("1111"); ($x,$y) = $C->_div($x,$y);
ok ($C->_str($x),30); ok ($C->_str($y),3);
$x = $C->_new("123"); $y = $C->_new("1111"); 
($x,$y) = $C->_div($x,$y); ok ($C->_str($x),0); ok ($C->_str($y),123);
d326 11
a336 6
foreach (qw/1 12 123 1234 12345 1234567 12345678 123456789 1234567890/)
  {
  $x = $C->_new("$_"); 
  ok (ref($x)||'','ARRAY'); ok ($C->_str($x),"$_");
  $x = $C->_num($x); ok (ref($x)||'',''); ok ($x,$_);
  }
d339 7
a345 2
$x = $C->_new("144"); ok ($C->_str($C->_sqrt($x)),'12');
$x = $C->_new("144000000000000"); ok ($C->_str($C->_sqrt($x)),'12000000');
d348 10
a357 4
$x = $C->_new("81"); my $n = $C->_new("3"); 	# 4*4*4 = 64, 5*5*5 = 125
ok ($C->_str($C->_root($x,$n)),'4');	# 4.xx => 4.0
$x = $C->_new("81"); $n = $C->_new("4"); 	# 3*3*3*3 == 81
ok ($C->_str($C->_root($x,$n)),'3');
a359 24
$x = $C->_new("0"); $n = $C->_new("3"); 	# 0 ** y => 0
ok ($C->_str($C->_pow($x,$n)), 0);
$x = $C->_new("3"); $n = $C->_new("0"); 	# x ** 0 => 1
ok ($C->_str($C->_pow($x,$n)), 1);
$x = $C->_new("1"); $n = $C->_new("3"); 	# 1 ** y => 1
ok ($C->_str($C->_pow($x,$n)), 1);
$x = $C->_new("5"); $n = $C->_new("1"); 	# x ** 1 => x
ok ($C->_str($C->_pow($x,$n)), 5);

$x = $C->_new("81"); $n = $C->_new("3"); 	# 81 ** 3 == 531441 
ok ($C->_str($C->_pow($x,$n)),81 ** 3);

ok ($C->_str($C->_root($x,$n)),81);

$x = $C->_new("81");
ok ($C->_str($C->_pow($x,$n)),81 ** 3);
ok ($C->_str($C->_pow($x,$n)),'150094635296999121'); # 531441 ** 3 ==

ok ($C->_str($C->_root($x,$n)),'531441');
ok ($C->_str($C->_root($x,$n)),'81');

$x = $C->_new("81"); $n = $C->_new("14"); 	
ok ($C->_str($C->_pow($x,$n)),'523347633027360537213511521');
ok ($C->_str($C->_root($x,$n)),'81');
d361 53
a413 5
$x = $C->_new("523347633027360537213511520");
ok ($C->_str($C->_root($x,$n)),'80');

$x = $C->_new("523347633027360537213511522");
ok ($C->_str($C->_root($x,$n)),'81');
d418 29
a446 21
for my $i (2 .. 9)
  {
  $x = '9' x $i; $x = $C->_new($x);
  $n = $C->_new("2");
  my $rc = '9' x ($i-1). '8' . '0' x ($i-1) . '1';
  print "# _pow( ", '9' x $i, ", 2) \n" unless
   ok ($C->_str($C->_pow($x,$n)),$rc);
 
  # if $i > $BASE_LEN, the test takes a really long time:
  if ($i <= $BASE_LEN)
    {
    $x = '9' x $i; $x = $C->_new($x);
    $n = '9' x $i; $n = $C->_new($n);
    print "# _root( ", '9' x $i, ", ", 9 x $i, ") \n";
    print "# _root( ", '9' x $i, ", ", 9 x $i, ") \n" unless
     ok ($C->_str($C->_root($x,$n)),'1');

    $x = '9' x $i; $x = $C->_new($x);
    $n = $C->_new("2");
    print "# BASE_LEN $BASE_LEN _root( ", '9' x $i, ", ", 9 x $i, ") \n" unless
     ok ($C->_str($C->_root($x,$n)), $res->[$i-2]);
d448 1
a448 6
  else
    {
    ok ("skipped $i", "skipped $i");
    ok ("skipped $i", "skipped $i");
    } 
  }
d452 52
a503 14
$x = $C->_new("0"); ok ($C->_str($C->_fac($x)),'1');
$x = $C->_new("1"); ok ($C->_str($C->_fac($x)),'1');
$x = $C->_new("2"); ok ($C->_str($C->_fac($x)),'2');
$x = $C->_new("3"); ok ($C->_str($C->_fac($x)),'6');
$x = $C->_new("4"); ok ($C->_str($C->_fac($x)),'24');
$x = $C->_new("5"); ok ($C->_str($C->_fac($x)),'120');
$x = $C->_new("10"); ok ($C->_str($C->_fac($x)),'3628800');
$x = $C->_new("11"); ok ($C->_str($C->_fac($x)),'39916800');
$x = $C->_new("12"); ok ($C->_str($C->_fac($x)),'479001600');
$x = $C->_new("13"); ok ($C->_str($C->_fac($x)),'6227020800');

# test that _fac modifes $x in place for small arguments
$x = $C->_new("3"); $C->_fac($x); ok ($C->_str($x),'6');
$x = $C->_new("13"); $C->_fac($x); ok ($C->_str($x),'6227020800');
a506 21
foreach (qw/1 11 121 1231 12341 1234561 12345671 123456781 1234567891/)
  {
  $x = $C->_new("$_"); $C->_inc($x);
  print "# \$x = ",$C->_str($x),"\n"
   unless ok ($C->_str($x),substr($_,0,length($_)-1) . '2');
  $C->_dec($x); ok ($C->_str($x),$_);
  }
foreach (qw/19 119 1219 12319 1234519 12345619 123456719 1234567819/)
  {
  $x = $C->_new("$_"); $C->_inc($x);
  print "# \$x = ",$C->_str($x),"\n"
   unless ok ($C->_str($x),substr($_,0,length($_)-2) . '20');
  $C->_dec($x); ok ($C->_str($x),$_);
  }
foreach (qw/999 9999 99999 9999999 99999999 999999999 9999999999 99999999999/)
  {
  $x = $C->_new("$_"); $C->_inc($x);
  print "# \$x = ",$C->_str($x),"\n"
   unless ok ($C->_str($x), '1' . '0' x (length($_)));
  $C->_dec($x); ok ($C->_str($x),$_);
  }
d508 32
a539 2
$x = $C->_new("1000"); $C->_inc($x); ok ($C->_str($x),'1001');
$C->_dec($x); ok ($C->_str($x),'1000');
d543 2
a544 2
  no strict 'refs';
  $BL = &{"$C"."::_base_len"}();
d548 5
a552 2
$z = '1' . '0' x ($BL-1); $z .= '1';
$x = $C->_new($x); $C->_inc($x); ok ($C->_str($x),$z);
d554 5
a558 2
$x = '1' . '0' x $BL; $z = '9' x $BL;
$x = $C->_new($x); $C->_dec($x); ok ($C->_str($x),$z);
d561 3
a563 1
# $x = $C->_new("-2"); $y = $C->_new("4"); ok ($C->_acmp($x,$y),-1);
d567 10
a576 4
$x = $C->_new("1000"); $y = $C->_new("3");
ok ($C->_str(scalar $C->_mod($x,$y)),1);
$x = $C->_new("1000"); $y = $C->_new("2");
ok ($C->_str(scalar $C->_mod($x,$y)),0);
d579 15
a593 6
$x = $C->_new("5"); $y = $C->_new("2");
ok ($C->_str(scalar $C->_xor($x,$y)),7);
$x = $C->_new("5"); $y = $C->_new("2");
ok ($C->_str(scalar $C->_or($x,$y)),7);
$x = $C->_new("5"); $y = $C->_new("3");
ok ($C->_str(scalar $C->_and($x,$y)),1);
d596 13
a608 6
ok ($C->_str( $C->_from_hex("0xFf")),255);
ok ($C->_str( $C->_from_bin("0b10101011")),160+11);
ok ($C->_str( $C->_from_oct("0100")), 8*8);
ok ($C->_str( $C->_from_oct("01000")), 8*8*8);
ok ($C->_str( $C->_from_oct("010001")), 8*8*8*8+1);
ok ($C->_str( $C->_from_oct("010007")), 8*8*8*8+7);
d611 58
a668 21
ok ($C->_str( $C->_from_hex( $C->_as_hex( $C->_new("128")))), 128);
ok ($C->_str( $C->_from_bin( $C->_as_bin( $C->_new("128")))), 128);
ok ($C->_str( $C->_from_oct( $C->_as_oct( $C->_new("128")))), 128);

ok ($C->_str( $C->_from_oct( $C->_as_oct( $C->_new("123456")))), 123456);
ok ($C->_str( $C->_from_oct( $C->_as_oct( $C->_new("123456789")))), "123456789");
ok ($C->_str( $C->_from_oct( $C->_as_oct( $C->_new("1234567890123")))), "1234567890123");

my $long = '123456789012345678901234567890';
ok ($C->_str( $C->_from_hex( $C->_as_hex( $C->_new($long)))), $long);
ok ($C->_str( $C->_from_bin( $C->_as_bin( $C->_new($long)))), $long);
ok ($C->_str( $C->_from_oct( $C->_as_oct( $C->_new($long)))), $long);
ok ($C->_str( $C->_from_hex( $C->_as_hex( $C->_new("0")))), 0);
ok ($C->_str( $C->_from_bin( $C->_as_bin( $C->_new("0")))), 0);
ok ($C->_str( $C->_from_oct( $C->_as_oct( $C->_new("0")))), 0);
ok ($C->_as_hex( $C->_new("0")), '0x0');
ok ($C->_as_bin( $C->_new("0")), '0b0');
ok ($C->_as_oct( $C->_new("0")), '00');
ok ($C->_as_hex( $C->_new("12")), '0xc');
ok ($C->_as_bin( $C->_new("12")), '0b1100');
ok ($C->_as_oct( $C->_new("64")), '0100');
d671 11
a681 5
ok ($C->_str($C->_1ex(0)), "1");
ok ($C->_str($C->_1ex(1)), "10");
ok ($C->_str($C->_1ex(2)), "100");
ok ($C->_str($C->_1ex(12)), "1000000000000");
ok ($C->_str($C->_1ex(16)), "10000000000000000");
d684 6
a689 3
$x = $C->_new("123456789");
ok ($C->_check($x),0);
ok ($C->_check(123),'123 is not a reference');
d695 49
a743 25
  no strict 'refs';
  # correct empty arrays
  $x = &{$C."::__strip_zeros"}([]); ok (@@$x,1); ok ($x->[0],0);
  # don't strip single elements
  $x = &{$C."::__strip_zeros"}([0]); ok (@@$x,1); ok ($x->[0],0);
  $x = &{$C."::__strip_zeros"}([1]); ok (@@$x,1); ok ($x->[0],1);
  # don't strip non-zero elements
  $x = &{$C."::__strip_zeros"}([0,1]);
  ok (@@$x,2); ok ($x->[0],0); ok ($x->[1],1);
  $x = &{$C."::__strip_zeros"}([0,1,2]);
  ok (@@$x,3); ok ($x->[0],0); ok ($x->[1],1); ok ($x->[2],2);

  # but strip leading zeros
  $x = &{$C."::__strip_zeros"}([0,1,2,0]);
  ok (@@$x,3); ok ($x->[0],0); ok ($x->[1],1); ok ($x->[2],2);

  $x = &{$C."::__strip_zeros"}([0,1,2,0,0]);
  ok (@@$x,3); ok ($x->[0],0); ok ($x->[1],1); ok ($x->[2],2);

  $x = &{$C."::__strip_zeros"}([0,1,2,0,0,0]);
  ok (@@$x,3); ok ($x->[0],0); ok ($x->[1],1); ok ($x->[2],2);

  # collapse multiple zeros
  $x = &{$C."::__strip_zeros"}([0,0,0,0]);
  ok (@@$x,1); ok ($x->[0],0);
a748 1

@


1.1
log
@Initial revision
@
text
@@


1.1.1.1
log
@Perl 5.12.2 from CPAN
@
text
@@
