head	1.3;
access;
symbols
	OPENBSD_6_2:1.3.0.6
	OPENBSD_6_2_BASE:1.3
	PERL_5_24_2:1.1.1.2
	PERL:1.1.1
	OPENBSD_6_1:1.3.0.4
	OPENBSD_6_1_BASE:1.3
	OPENBSD_5_3:1.1.1.1.0.10
	OPENBSD_5_3_BASE:1.1.1.1
	OPENBSD_5_2:1.1.1.1.0.8
	OPENBSD_5_2_BASE:1.1.1.1
	OPENBSD_5_1_BASE:1.1.1.1
	OPENBSD_5_1:1.1.1.1.0.6
	OPENBSD_5_0:1.1.1.1.0.4
	OPENBSD_5_0_BASE:1.1.1.1
	OPENBSD_4_9:1.1.1.1.0.2
	OPENBSD_4_9_BASE:1.1.1.1
	PERL_5_12_2:1.1.1.1
	CPAN:1.1.1;
locks; strict;
comment	@# @;
expand	@o@;


1.3
date	2017.02.05.00.32.01;	author afresh1;	state Exp;
branches;
next	1.2;
commitid	cxJ08BvJA9Pt2PTM;

1.2
date	2013.03.25.20.40.51;	author sthen;	state dead;
branches;
next	1.1;

1.1
date	2010.09.24.14.49.00;	author millert;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	2010.09.24.14.49.00;	author millert;	state Exp;
branches;
next	1.1.1.2;

1.1.1.2
date	2017.08.14.13.45.59;	author afresh1;	state Exp;
branches;
next	;
commitid	fAzrs78vdW2Yfc6A;


desc
@@


1.3
log
@Fix merge issues, remove excess files - match perl-5.24.1 dist
@
text
@#!perl

use strict;
use warnings;

my $count;

BEGIN {
    $count = 128;
}

use Test::More tests => $count * 4;

use Math::BigInt;
my $class = 'Math::BigInt';

my $length = 128;

# If you get a failure here, please re-run the test with the printed seed
# value as input "perl t/mbi_rand.t seed" and send me the output

my $seed = @@ARGV == 1 ? $ARGV[0] : int(rand(1165537));
#diag("    seed: $seed\n");
srand($seed);

my $_base_len;
my @@_base_len;

#diag("     lib: ", Math::BigInt->config()->{lib});
if (Math::BigInt->config()->{lib} =~ /::Calc/) {
    $_base_len = Math::BigInt::Calc->_base_len();
    @@_base_len = Math::BigInt::Calc->_base_len();
    #diag("base len: $_base_len (scalar context)");
    #diag("base len: @@_base_len (list contex)");
}

my ($A, $B, $A_str, $B_str, $AdivB, $AmodB, $A_len, $B_len);
my $two = Math::BigInt->new(2);
for (my $i = 0; $i < $count; $i++) {
    #diag("");

    # length of A and B
    $A_len = int(rand($length) + 1);
    $B_len = int(rand($length) + 1);
    $A_str = '';
    $B_str = '';

    # We create the numbers from "patterns", e.g. get a random number and a
    # random count and string them together. This means things like
    # "100000999999999999911122222222" are much more likely. If we just strung
    # together digits, we would end up with "1272398823211223" etc. It also
    # means that we get more frequently equal numbers or other special cases.

    while (length($A_str) < $A_len) {
        $A_str .= int(rand(100)) x int(rand(16));
    }
    while (length($B_str) < $B_len) {
        $B_str .= int(rand(100)) x int(rand(16));
    }

    $A_str =~ s/^0+(?=\d)//;
    $B_str =~ s/^0+(?=\d)//;
    #diag("      As: $A_str");
    #diag("      Bs: $B_str");
    $A = $class->new($A_str);
    $B = $class->new($B_str);
    #diag("       A: $A");
    #diag("       B: $B");

  SKIP: {
        skip '$A and/or $B are zero.', 4 if $A->is_zero() || $B->is_zero();

        # check that int(A / B) * B + A % B == A holds for all inputs

        # $X = ($A / $B) * $B + 2 * ($A % $B) - ($A % $B);

        ($AdivB, $AmodB) = $A->copy()->bdiv($B);

        #diag("   A / B: $AdivB");
        #diag("   A % B: $AmodB");

        is($AdivB * $B + $two * $AmodB - $AmodB, $A_str,
           "AdivB * B + 2 * AmodB - AmodB == A");

        if (is($AdivB * $B / $B, $AdivB, "AdivB * B / B == AdivB")) {
            if (Math::BigInt->config()->{lib} =~ /::Calc/) {
                #diag("AdivB->[-1]: ", $AdivB->{value}->[-1]);
                #diag("    B->[-1]: ", $B->{value}->[-1]);
            }
        }

        # swap 'em and try this, too
        # $X = ($B/$A)*$A + $B % $A;
        ($AdivB, $AmodB) = $B->copy()->bdiv($A);
        # print "check: $AdivB $AmodB";

        is($AdivB * $A + $two * $AmodB - $AmodB, $B_str,
           "AdivB * A + 2 * AmodB - AmodB == B");

        is($AdivB * $A / $A, $AdivB, "AdivB * A / A == AdivB");
    }
}
@


1.2
log
@merge/resolve conflicts
(some more to do after this one)
@
text
@d1 1
a1 1
#!/usr/bin/perl -w
a2 1
use Test::More;
d4 1
d7 6
a12 12
  
BEGIN
  {
  $| = 1;
  if ($^O eq 'os390') { print "1..0\n"; exit(0) } # test takes too long there
  unshift @@INC, '../lib'; # for running manually
  my $location = $0; $location =~ s/mbi_rand.t//;
  unshift @@INC, $location; # to locate the testing files
  chdir 't' if -d 't';
  $count = 128;
  plan tests => $count*4;
  }
d15 1
a15 1
my $c = 'Math::BigInt';
d22 19
a40 2
my $seed = ($#ARGV == 0) ? $ARGV[0] : int(rand(1165537));
print "# seed: $seed\n"; srand($seed);
d42 11
a52 5
print "# lib: ", Math::BigInt->config()->{lib},"\n";
if (Math::BigInt->config()->{lib} =~ /::Calc/)
  {
  print "# base len: ", scalar Math::BigInt::Calc->_base_len(),"\n";
  }
d54 5
a58 24
my ($A,$B,$As,$Bs,$ADB,$AMB,$la,$lb);
my $two = Math::BigInt->new(2);
for (my $i = 0; $i < $count; $i++)
  {
  # length of A and B
  $la = int(rand($length)+1); $lb = int(rand($length)+1);
  $As = ''; $Bs = '';

  # we create the numbers from "patterns", e.g. get a random number and a
  # random count and string them together. This means things like
  # "100000999999999999911122222222" are much more likely. If we just strung
  # together digits, we would end up with "1272398823211223" etc. It also means
  # that we get more frequently equal numbers or other special cases.
  while (length($As) < $la) { $As .= int(rand(100)) x int(rand(16)); }
  while (length($Bs) < $lb) { $Bs .= int(rand(100)) x int(rand(16)); }

  $As =~ s/^0+//; $Bs =~ s/^0+//; 
  $As = $As || '0'; $Bs = $Bs || '0';
#  print "# As $As\n# Bs $Bs\n";
  $A = $c->new($As); $B = $c->new($Bs);
  print "# A $A\n# B $B\n";
  if ($A->is_zero() || $B->is_zero())
    {
    for (1..4) { is (1,1, 'skipped this test'); } next;
d61 35
a95 1
  # check that int(A/B)*B + A % B == A holds for all inputs
d97 2
a98 1
  # $X = ($A/$B)*$B + 2 * ($A % $B) - ($A % $B);
d100 1
a100 13
  ($ADB,$AMB) = $A->copy()->bdiv($B);
  print "# ($A / $B, $A % $B ) = $ADB $AMB\n";

  print "# seed $seed, ". join(' ',Math::BigInt::Calc->_base_len()),"\n".
        "# tried $ADB * $B + $two*$AMB - $AMB\n"
   unless is ($ADB*$B+$two*$AMB-$AMB,$As, "ADB * B + 2 * AMB - AMB == A");
  if (is ($ADB*$B/$B,$ADB, "ADB * B / B == ADB"))
    {
    print "# seed: $seed, \$ADB * \$B / \$B = ", $ADB * $B / $B, " != $ADB (\$B=$B)\n";
    if (Math::BigInt->config()->{lib} =~ /::Calc/)
      {
      print "# ADB->[-1]: ", $ADB->{value}->[-1], " B->[-1]: ", $B->{value}->[-1],"\n";
      }
d102 1
a102 13
  # swap 'em and try this, too
  # $X = ($B/$A)*$A + $B % $A;
  ($ADB,$AMB) = $B->copy()->bdiv($A);
  # print "check: $ADB $AMB";
  print "# seed $seed, ". join(' ',Math::BigInt::Calc->_base_len()),"\n".
        "# tried $ADB * $A + $two*$AMB - $AMB\n"
   unless is ($ADB*$A+$two*$AMB-$AMB,$Bs, "ADB * A + 2 * AMB - AMB == B");
  print "# +$two * $AMB = ",$ADB * $A + $two * $AMB,"\n";
  print "# -$AMB = ",$ADB * $A + $two * $AMB - $AMB,"\n";
  print "# seed $seed, \$ADB * \$A / \$A = ", $ADB * $A / $A, " != $ADB (\$A=$A)\n"
   unless is ($ADB*$A/$A,$ADB, "ADB * A/A == ADB");
  }

@


1.1
log
@Initial revision
@
text
@@


1.1.1.1
log
@Perl 5.12.2 from CPAN
@
text
@@


1.1.1.2
log
@Import perl-5.24.2
@
text
@d1 1
a1 1
#!perl
d3 1
a4 1
use warnings;
d7 12
a18 6

BEGIN {
    $count = 128;
}

use Test::More tests => $count * 4;
d21 1
a21 1
my $class = 'Math::BigInt';
d28 2
a29 14
my $seed = @@ARGV == 1 ? $ARGV[0] : int(rand(1165537));
#diag("    seed: $seed\n");
srand($seed);

my $_base_len;
my @@_base_len;

#diag("     lib: ", Math::BigInt->config()->{lib});
if (Math::BigInt->config()->{lib} =~ /::Calc/) {
    $_base_len = Math::BigInt::Calc->_base_len();
    @@_base_len = Math::BigInt::Calc->_base_len();
    #diag("base len: $_base_len (scalar context)");
    #diag("base len: @@_base_len (list contex)");
}
d31 7
a37 1
my ($A, $B, $A_str, $B_str, $AdivB, $AmodB, $A_len, $B_len);
d39 23
a61 2
for (my $i = 0; $i < $count; $i++) {
    #diag("");
d63 1
a63 11
    # length of A and B
    $A_len = int(rand($length) + 1);
    $B_len = int(rand($length) + 1);
    $A_str = '';
    $B_str = '';

    # We create the numbers from "patterns", e.g. get a random number and a
    # random count and string them together. This means things like
    # "100000999999999999911122222222" are much more likely. If we just strung
    # together digits, we would end up with "1272398823211223" etc. It also
    # means that we get more frequently equal numbers or other special cases.
d65 1
a65 6
    while (length($A_str) < $A_len) {
        $A_str .= int(rand(100)) x int(rand(16));
    }
    while (length($B_str) < $B_len) {
        $B_str .= int(rand(100)) x int(rand(16));
    }
d67 2
a68 35
    $A_str =~ s/^0+(?=\d)//;
    $B_str =~ s/^0+(?=\d)//;
    #diag("      As: $A_str");
    #diag("      Bs: $B_str");
    $A = $class->new($A_str);
    $B = $class->new($B_str);
    #diag("       A: $A");
    #diag("       B: $B");

  SKIP: {
        skip '$A and/or $B are zero.', 4 if $A->is_zero() || $B->is_zero();

        # check that int(A / B) * B + A % B == A holds for all inputs

        # $X = ($A / $B) * $B + 2 * ($A % $B) - ($A % $B);

        ($AdivB, $AmodB) = $A->copy()->bdiv($B);

        #diag("   A / B: $AdivB");
        #diag("   A % B: $AmodB");

        is($AdivB * $B + $two * $AmodB - $AmodB, $A_str,
           "AdivB * B + 2 * AmodB - AmodB == A");

        if (is($AdivB * $B / $B, $AdivB, "AdivB * B / B == AdivB")) {
            if (Math::BigInt->config()->{lib} =~ /::Calc/) {
                #diag("AdivB->[-1]: ", $AdivB->{value}->[-1]);
                #diag("    B->[-1]: ", $B->{value}->[-1]);
            }
        }

        # swap 'em and try this, too
        # $X = ($B/$A)*$A + $B % $A;
        ($AdivB, $AmodB) = $B->copy()->bdiv($A);
        # print "check: $AdivB $AmodB";
d70 23
a92 2
        is($AdivB * $A + $two * $AmodB - $AmodB, $B_str,
           "AdivB * A + 2 * AmodB - AmodB == B");
a93 3
        is($AdivB * $A / $A, $AdivB, "AdivB * A / A == AdivB");
    }
}
@

