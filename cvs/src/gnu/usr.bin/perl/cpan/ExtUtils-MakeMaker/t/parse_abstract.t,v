head	1.1;
branch	1.1.1;
access;
symbols
	OPENBSD_6_2:1.1.1.3.0.8
	OPENBSD_6_2_BASE:1.1.1.3
	PERL_5_24_2:1.1.1.3
	OPENBSD_6_1:1.1.1.3.0.12
	OPENBSD_6_1_BASE:1.1.1.3
	OPENBSD_6_0:1.1.1.3.0.10
	OPENBSD_6_0_BASE:1.1.1.3
	OPENBSD_5_9:1.1.1.3.0.4
	OPENBSD_5_9_BASE:1.1.1.3
	OPENBSD_5_8:1.1.1.3.0.6
	OPENBSD_5_8_BASE:1.1.1.3
	PERL_5_20_2:1.1.1.3
	OPENBSD_5_7:1.1.1.3.0.2
	OPENBSD_5_7_BASE:1.1.1.3
	PERL_5_20_1:1.1.1.3
	OPENBSD_5_6:1.1.1.2.0.4
	OPENBSD_5_6_BASE:1.1.1.2
	PERL_5_18_2:1.1.1.2
	PERL:1.1.1
	OPENBSD_5_5:1.1.1.1.0.6
	OPENBSD_5_5_BASE:1.1.1.1
	OPENBSD_5_4:1.1.1.1.0.2
	OPENBSD_5_4_BASE:1.1.1.1
	PERL_5_16_3:1.1.1.1
	CPAN:1.1.1;
locks; strict;
comment	@# @;
expand	@o@;


1.1
date	2013.03.25.20.07.42;	author sthen;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	2013.03.25.20.07.42;	author sthen;	state Exp;
branches;
next	1.1.1.2;

1.1.1.2
date	2014.03.24.14.58.52;	author afresh1;	state Exp;
branches;
next	1.1.1.3;

1.1.1.3
date	2014.11.17.20.52.47;	author afresh1;	state Exp;
branches;
next	;
commitid	B31cAbBIXiCqnL97;


desc
@@


1.1
log
@Initial revision
@
text
@#!/usr/bin/perl

use strict;
use warnings;

use ExtUtils::MakeMaker;

use Test::More 'no_plan';

sub test_abstract {
    my($code, $package, $want, $name) = @@_;

    local $Test::Builder::Level = $Test::Builder::Level + 1;

    my $file = "t/abstract.tmp";
    {
        open my $fh, ">", $file or die "Can't open $file";
        print $fh $code;
        close $fh;
    }

    # Hack up a minimal MakeMaker object.
    my $mm = bless { DISTNAME => $package }, "MM";
    my $have = $mm->parse_abstract($file);

    my $ok = is( $have, $want, $name );

    # Clean up the temp file, VMS style
    1 while unlink $file;

    return $ok;
}


test_abstract(<<END, "Foo", "Stuff and things", "Simple abstract");
=head1 NAME

Foo - Stuff and things
END


test_abstract(<<END, "NEXT", "Provide a pseudo-class NEXT (et al) that allows method redispatch", "Name.pm");
=head1 NAME

NEXT.pm - Provide a pseudo-class NEXT (et al) that allows method redispatch
END


test_abstract(<<END, "Compress::Raw::Zlib::FAQ", "Frequently Asked Questions about Compress::Raw::Zlib", "double dash");
=pod

Compress::Raw::Zlib::FAQ -- Frequently Asked Questions about Compress::Raw::Zlib
END


test_abstract(<<END, "Foo", "This is", "Only in POD");
# =pod

Foo - This is not in pod

=cut

Foo - This isn't in pod either

=pod

Foo - This is

Foo - So is this.
END


test_abstract(<<END, "Foo", "the abstract", "more spaces");
=pod

Foo   -  the abstract
END
@


1.1.1.1
log
@import perl 5.16.3 from CPAN - worked on by Andrew Fresh and myself
@
text
@@


1.1.1.2
log
@Import perl-5.18.2

OK espie@@ sthen@@ deraadt@@
@
text
@a5 1
use lib 't/lib';
d7 1
a7 1
use File::Temp qw[tempfile];
d15 6
a20 3
    my ($fh,$file) = tempfile( DIR => 't', UNLINK => 1 );
    print $fh $code;
    close $fh;
d27 3
@


1.1.1.3
log
@Import perl-5.20.1
@
text
@a72 9

test_abstract(<<END, "Catalyst::Plugin::Authentication", "Infrastructure plugin for the Catalyst authentication framework.", "contains a line break");
=pod

=head1 NAME

Catalyst::Plugin::Authentication - Infrastructure plugin for the Catalyst
authentication framework.
END
@


