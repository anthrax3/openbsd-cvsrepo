head	1.8;
access;
symbols
	PERL_5_24_2:1.1.1.5
	OPENBSD_6_1:1.8.0.4
	OPENBSD_6_1_BASE:1.8
	OPENBSD_6_0:1.7.0.10
	OPENBSD_6_0_BASE:1.7
	OPENBSD_5_9:1.7.0.4
	OPENBSD_5_9_BASE:1.7
	OPENBSD_5_8:1.7.0.6
	OPENBSD_5_8_BASE:1.7
	PERL_5_20_2:1.1.1.4
	OPENBSD_5_7:1.7.0.2
	OPENBSD_5_7_BASE:1.7
	PERL_5_20_1:1.1.1.4
	OPENBSD_5_6:1.6.0.4
	OPENBSD_5_6_BASE:1.6
	PERL_5_18_2:1.1.1.3
	PERL:1.1.1
	OPENBSD_5_5:1.5.0.6
	OPENBSD_5_5_BASE:1.5
	OPENBSD_5_4:1.5.0.2
	OPENBSD_5_4_BASE:1.5
	PERL_5_16_3:1.1.1.2
	OPENBSD_5_3:1.4.0.10
	OPENBSD_5_3_BASE:1.4
	OPENBSD_5_2:1.4.0.8
	OPENBSD_5_2_BASE:1.4
	OPENBSD_5_1_BASE:1.4
	OPENBSD_5_1:1.4.0.6
	OPENBSD_5_0:1.4.0.4
	OPENBSD_5_0_BASE:1.4
	OPENBSD_4_9:1.4.0.2
	OPENBSD_4_9_BASE:1.4
	PERL_5_12_2:1.1.1.1
	CPAN:1.1.1;
locks; strict;
comment	@# @;
expand	@o@;


1.8
date	2017.02.05.00.31.58;	author afresh1;	state Exp;
branches;
next	1.7;
commitid	cxJ08BvJA9Pt2PTM;

1.7
date	2014.11.17.20.57.00;	author afresh1;	state Exp;
branches;
next	1.6;
commitid	QP75iYx42Uo7mMxO;

1.6
date	2014.03.24.15.05.24;	author afresh1;	state Exp;
branches;
next	1.5;

1.5
date	2013.03.25.20.40.50;	author sthen;	state Exp;
branches;
next	1.4;

1.4
date	2010.09.28.12.25.26;	author millert;	state Exp;
branches;
next	1.3;

1.3
date	2010.09.25.16.34.33;	author millert;	state Exp;
branches;
next	1.2;

1.2
date	2010.09.24.15.06.50;	author millert;	state Exp;
branches;
next	1.1;

1.1
date	2010.09.24.14.48.58;	author millert;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	2010.09.24.14.48.58;	author millert;	state Exp;
branches;
next	1.1.1.2;

1.1.1.2
date	2013.03.25.20.07.42;	author sthen;	state Exp;
branches;
next	1.1.1.3;

1.1.1.3
date	2014.03.24.14.58.52;	author afresh1;	state Exp;
branches;
next	1.1.1.4;

1.1.1.4
date	2014.11.17.20.52.47;	author afresh1;	state Exp;
branches;
next	1.1.1.5;
commitid	B31cAbBIXiCqnL97;

1.1.1.5
date	2017.08.14.13.45.37;	author afresh1;	state Exp;
branches;
next	;
commitid	fAzrs78vdW2Yfc6A;


desc
@@


1.8
log
@Fix merge issues, remove excess files - match perl-5.24.1 dist
@
text
@#!/usr/bin/perl -w

BEGIN {
    unshift @@INC, 't/lib';
}
chdir 't';

use Test::More;
use ExtUtils::MakeMaker;
use File::Temp qw[tempfile];

my $Has_Version = eval 'require version; "version"->import; 1';

# "undef" - means we expect "undef", undef - eval should be never called for this string
my %versions = (q[$VERSION = '1.00']            => '1.00',
                q[*VERSION = \'1.01']           => '1.01',
                q[($VERSION) = q$Revision: 32208 $ =~ /(\d+)/g;] => 32208,
                q[$FOO::VERSION = '1.10';]      => '1.10',
                q[*FOO::VERSION = \'1.11';]     => '1.11',
                '$VERSION = 0.02'               => 0.02,
                '$VERSION = 0.0'                => 0.0,
                '$VERSION = -1.0'               => -1.0,
                '$VERSION = undef'              => 'undef',
                '$wibble  = 1.0'                => undef,
                q[my $VERSION = '1.01']         => 'undef',
                q[local $VERISON = '1.02']      => 'undef',
                q[local $FOO::VERSION = '1.30'] => 'undef',
                q[if( $Foo::VERSION >= 3.00 ) {]=> 'undef',
                q[our $VERSION = '1.23';]       => '1.23',
                q[$CGI::VERSION='3.63']         => '3.63',
                q[$VERSION = "1.627"; # ==> ALSO update the version in the pod text below!] => '1.627',
                q[BEGIN { our $VERSION = '1.23' }]       => '1.23',

                '$Something::VERSION == 1.0'    => undef,
                '$Something::VERSION <= 1.0'    => undef,
                '$Something::VERSION >= 1.0'    => undef,
                '$Something::VERSION != 1.0'    => undef,
                'my $meta_coder = ($JSON::XS::VERSION >= 1.4) ?' => undef,

                qq[\$Something::VERSION == 1.0\n\$VERSION = 2.3\n]                     => '2.3',
                qq[\$Something::VERSION == 1.0\n\$VERSION = 2.3\n\$VERSION = 4.5\n]    => '2.3',

                '$VERSION = sprintf("%d.%03d", q$Revision: 3.74 $ =~ /(\d+)\.(\d+)/);' => '3.074',
                '$VERSION = substr(q$Revision: 2.8 $, 10) + 2 . "";'                   => '4.8',
                q[our $VERSION = do { my @@r = ( q$Revision: 2.7 $ =~ /\d+/g ); sprintf "%d." . "%02d" x $#r, @@r };] => '2.07', # Fucking seriously?
                'elsif ( $Something::VERSION >= 1.99 )' => undef,

               );

if( $Has_Version ) {
    $versions{q[use version; $VERSION = qv("1.2.3");]} = qv("1.2.3");
    $versions{q[$VERSION = qv("1.2.3")]}               = qv("1.2.3");
    $versions{q[$VERSION = v1.2.3]} = 'v1.2.3';
}

if( $] >= 5.011001 ) {
    $versions{'package Foo 1.23;'         } = '1.23';
    $versions{'package Foo::Bar 1.23;'    } = '1.23';
    $versions{'package Foo v1.2.3;'       } = 'v1.2.3';
    $versions{'package Foo::Bar v1.2.3;'  } = 'v1.2.3';
    $versions{' package Foo::Bar 1.23 ;'  } = '1.23';
    $versions{"package Foo'Bar 1.23;"     } = '1.23';
    $versions{"package Foo::Bar 1.2.3;"   } = '1.2.3';
    $versions{'package Foo 1.230;'        } = '1.230';
    $versions{'package Foo 1.23_01;'      } = '1.23_01';
    $versions{'package Foo v1.23_01;'     } = 'v1.23_01';
    $versions{q["package Foo 1.23"]}        = 'undef';
    $versions{<<'END'}                      = '1.23';
package Foo 1.23;
our $VERSION = 2.34;
END

    $versions{<<'END'}                      = '2.34';
our $VERSION = 2.34;
package Foo 1.23;
END

    $versions{<<'END'}                      = '2.34';
package Foo::100;
our $VERSION = 2.34;
END
}

if ( $] > 5.009 && $] < 5.012 ) {
  delete $versions{'$VERSION = -1.0'};
}

plan tests => (3 * keys %versions) + 4 + grep { !defined} (values %versions);

for my $code ( sort keys %versions ) {
    my $expect = $versions{$code};
    (my $label = $code) =~ s/\n/\\n/g;
    my $warnings = "";
    local $SIG{__WARN__} = sub { $warnings .= "@@_\n"; };
	if (defined $expect) {
		is( parse_version_string($code), $expect, $label );
	} else {
		my $is_called = 0;
		no warnings qw[redefine once];
		local *MM::get_version = sub {
			$is_called = 1;
		};
		ok !$is_called;
		is( parse_version_string($code), 'undef', $label );
	}
    is($warnings, '', "$label does not cause warnings");
}


sub parse_version_string {
    my $code = shift;

    my ($fh,$file) = tempfile( DIR => '.', UNLINK => 1 );
    print $fh "$code\n";
    close $fh;

    $_ = 'foo';
    my $version = MM->parse_version( $file );
    is( $_, 'foo', '$_ not leaked by parse_version' );

    return $version;
}


# This is a specific test to see if a version subroutine in the $VERSION
# declaration confuses later calls to the version class.
# [rt.cpan.org 30747]
SKIP: {
    skip "need version.pm", 4 unless $Has_Version;
    is parse_version_string(q[ $VERSION = '1.00'; sub version { $VERSION } ]),
       '1.00', "eval 'sub version {...} in version string";
    is parse_version_string(q[ use version; $VERSION = version->new("1.2.3") ]),
       qv("1.2.3"), "version.pm not confused by version sub";
}
@


1.7
log
@Fix merge conflicts, remove extra files, match upstream perl-5.20.1

ok deraadt@@ sthen@@ espie@@ miod@@
@
text
@d32 1
@


1.6
log
@Merge perl-5.18.2 plus local patches, remove old files

OK espie@@ sthen@@ deraadt@@
@
text
@d14 1
d24 1
a24 1
                '$wibble  = 1.0'                => 'undef',
d30 2
d33 5
a37 4
                '$Something::VERSION == 1.0'    => 'undef',
                '$Something::VERSION <= 1.0'    => 'undef',
                '$Something::VERSION >= 1.0'    => 'undef',
                '$Something::VERSION != 1.0'    => 'undef',
d44 2
a45 1
                'elsif ( $Something::VERSION >= 1.99 )' => 'undef',
d52 1
d83 5
a87 1
plan tests => (3 * keys %versions) + 4;
d94 11
a104 1
    is( parse_version_string($code), $expect, $label );
@


1.5
log
@merge/resolve conflicts
(some more to do after this one)
@
text
@d10 1
d92 3
a94 3
    open(FILE, ">VERSION.tmp") || die $!;
    print FILE "$code\n";
    close FILE;
d97 1
a97 1
    my $version = MM->parse_version('VERSION.tmp');
a98 2

    unlink "VERSION.tmp";
@


1.4
log
@Undo last change now that RCS keyword expansion is disabled on the perl sources
@
text
@d39 1
d76 1
a76 1
plan tests => (2 * keys %versions) + 4;
d81 2
d84 1
@


1.3
log
@Fix test failures caused by RCS keyword expansion.
Add PERL_GIT_UNCOMMITTED_CHANGES back to git_version.h to fix a test.
@
text
@d15 1
a15 1
                q[($VERSION) = q/Revision: 32208 / =~ /(\d+)/g;] => 32208,
d37 2
a38 2
                '$VERSION = sprintf("%d.%03d", q/Revision: 3.74 / =~ /(\d+)\.(\d+)/);' => '3.074',
                '$VERSION = substr(q/Revision: 2.8 /, 10) + 2 . "";'                   => '4.8',
@


1.2
log
@merge in perl 5.12.2 plus local changes
@
text
@d15 1
a15 1
                q[($VERSION) = q$Revision: 32208 $ =~ /(\d+)/g;] => 32208,
d37 2
a38 2
                '$VERSION = sprintf("%d.%03d", q$Revision: 3.74 $ =~ /(\d+)\.(\d+)/);' => '3.074',
                '$VERSION = substr(q$Revision: 2.8 $, 10) + 2 . "";'                   => '4.8',
@


1.1
log
@Initial revision
@
text
@@


1.1.1.1
log
@Perl 5.12.2 from CPAN
@
text
@@


1.1.1.2
log
@import perl 5.16.3 from CPAN - worked on by Andrew Fresh and myself
@
text
@a38 1
                'elsif ( $Something::VERSION >= 1.99 )' => 'undef',
d75 1
a75 1
plan tests => (3 * keys %versions) + 4;
a79 2
    my $warnings = "";
    local $SIG{__WARN__} = sub { $warnings .= "@@_\n"; };
a80 1
    is($warnings, '', "$label does not cause warnings");
@


1.1.1.3
log
@Import perl-5.18.2

OK espie@@ sthen@@ deraadt@@
@
text
@a9 1
use File::Temp qw[tempfile];
d91 3
a93 3
    my ($fh,$file) = tempfile( DIR => '.', UNLINK => 1 );
    print $fh "$code\n";
    close $fh;
d96 1
a96 1
    my $version = MM->parse_version( $file );
d98 2
@


1.1.1.4
log
@Import perl-5.20.1
@
text
@a13 1
# "undef" - means we expect "undef", undef - eval should be never called for this string
d23 1
a23 1
                '$wibble  = 1.0'                => undef,
a28 2
                q[$CGI::VERSION='3.63']         => '3.63',
                q[$VERSION = "1.627"; # ==> ALSO update the version in the pod text below!] => '1.627',
d30 4
a33 5
                '$Something::VERSION == 1.0'    => undef,
                '$Something::VERSION <= 1.0'    => undef,
                '$Something::VERSION >= 1.0'    => undef,
                '$Something::VERSION != 1.0'    => undef,
                'my $meta_coder = ($JSON::XS::VERSION >= 1.4) ?' => undef,
d40 1
a40 2
                q[our $VERSION = do { my @@r = ( q$Revision: 2.7 $ =~ /\d+/g ); sprintf "%d." . "%02d" x $#r, @@r };] => '2.07', # Fucking seriously?
                'elsif ( $Something::VERSION >= 1.99 )' => undef,
a46 1
    $versions{q[$VERSION = v1.2.3]} = 'v1.2.3';
d77 1
a77 5
if ( $] > 5.009 && $] < 5.012 ) {
  delete $versions{'$VERSION = -1.0'};
}

plan tests => (3 * keys %versions) + 4 + grep { !defined} (values %versions);
d84 1
a84 11
	if (defined $expect) {
		is( parse_version_string($code), $expect, $label );
	} else {
		my $is_called = 0;
		no warnings qw[redefine once];
		local *MM::get_version = sub {
			$is_called = 1;
		};
		ok !$is_called;
		is( parse_version_string($code), 'undef', $label );
	}
@


1.1.1.5
log
@Import perl-5.24.2
@
text
@a31 1
                q[BEGIN { our $VERSION = '1.23' }]       => '1.23',
@


