head	1.2;
access;
symbols
	OPENBSD_6_1:1.2.0.4
	OPENBSD_6_1_BASE:1.2
	OPENBSD_6_0:1.1.1.2.0.10
	OPENBSD_6_0_BASE:1.1.1.2
	OPENBSD_5_9:1.1.1.2.0.4
	OPENBSD_5_9_BASE:1.1.1.2
	OPENBSD_5_8:1.1.1.2.0.6
	OPENBSD_5_8_BASE:1.1.1.2
	PERL_5_20_2:1.1.1.2
	OPENBSD_5_7:1.1.1.2.0.2
	OPENBSD_5_7_BASE:1.1.1.2
	PERL_5_20_1:1.1.1.2
	OPENBSD_5_6:1.1.1.1.0.8
	OPENBSD_5_6_BASE:1.1.1.1
	PERL_5_18_2:1.1.1.1
	PERL:1.1.1
	OPENBSD_5_5:1.1.1.1.0.6
	OPENBSD_5_5_BASE:1.1.1.1
	OPENBSD_5_4:1.1.1.1.0.2
	OPENBSD_5_4_BASE:1.1.1.1
	PERL_5_16_3:1.1.1.1
	CPAN:1.1.1;
locks; strict;
comment	@# @;
expand	@o@;


1.2
date	2017.02.05.00.31.58;	author afresh1;	state Exp;
branches;
next	1.1;
commitid	cxJ08BvJA9Pt2PTM;

1.1
date	2013.03.25.20.07.41;	author sthen;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	2013.03.25.20.07.41;	author sthen;	state Exp;
branches;
next	1.1.1.2;

1.1.1.2
date	2014.11.17.20.52.47;	author afresh1;	state Exp;
branches;
next	;
commitid	B31cAbBIXiCqnL97;


desc
@@


1.2
log
@Fix merge issues, remove excess files - match perl-5.24.1 dist
@
text
@#!/usr/bin/perl -w

BEGIN {
    unshift @@INC, 't/lib';
}

use strict;
use warnings;

use Carp;
use Config;
use ExtUtils::MM;
use MakeMaker::Test::Utils;
use File::Temp;
use Cwd 'abs_path';

use Test::More;
use ExtUtils::MM;
plan !MM->can_run(make()) && $ENV{PERL_CORE} && $Config{'usecrosscompile'}
    ? (skip_all => "cross-compiling and make not available")
    : ();

#--------------------- Setup

my $cwd  = abs_path;
my $perl = which_perl;
my $make = make_run();
my $mm = bless { NAME => "Foo", MAKE => $Config{make}, PARENT_NAME => '' }, "MM";
$mm->init_INST;   # *PERLRUN needs INIT_*
$mm->init_PERL;   # generic ECHO needs ABSPERLRUN
$mm->init_tools;  # need ECHO

# Run Perl with the currently installing MakeMaker
$mm->{$_} .= q[ "-I$(INST_ARCHLIB)" "-I$(INST_LIB)"] for qw( PERLRUN FULLPERLRUN ABSPERLRUN );

#see sub specify_shell
my $shell = $^O eq 'MSWin32' && $mm->is_make_type('gmake') ? $ENV{COMSPEC} : undef;

#------------------- Testing functions

sub test_for_echo {
    my($calls, $want, $name) = @@_;
    my $output_file = $calls->[0][1];

    note "Testing $name";

    my $dir = File::Temp->newdir();
    chdir $dir;
    note "Temp dir: $dir";

    # Write a Makefile to test the output of echo
    {
        open my $makefh, ">", "Makefile" or croak "Can't open Makefile: $!";
        print $makefh "FOO=42\n";       # a variable to test with

        for my $key (qw(INST_ARCHLIB INST_LIB PERL ABSPERL ABSPERLRUN ECHO)) {
            print $makefh "$key=$mm->{$key}\n";
        }
        print $makefh "SHELL=$shell\n" if defined $shell;

        print $makefh "all :\n";
        for my $args (@@$calls) {
            print $makefh map { "\t$_\n" } $mm->echo(@@$args);
        }
    }

    # Run the Makefile
    ok run($make), "make: $name";

    # Check it made the file in question
    ok -e $output_file, "$output_file exists";
    open my $fh, "<", $output_file or croak "Can't open $output_file: $!";
    is join("", <$fh>), $want, "contents";

    chdir $cwd;
}


#---------------- Tests begin

test_for_echo(
    [["Foo", "bar.txt"]],
    "Foo\n",
    "simple echo"
);

test_for_echo(
    [["Foo\nBar\nBaz Biff\n", "something.txt"]],
    "Foo\nBar\nBaz Biff\n",
    "multiline echo"
);

test_for_echo(
    [['$something$', "something.txt"]],
    '$something$'."\n",
    "dollar signs escaped"
);

test_for_echo(
    [['$(something)', "something.txt"]],
    '$(something)'."\n",
    "variables escaped"
);

test_for_echo(
    [['Answer: $(FOO)', "bar.txt", { allow_variables => 1 }]],
    "Answer: 42\n",
    "allow_variables"
);

test_for_echo(
    [
        ["Foo", "bar.txt"],
        ["Bar", "bar.txt", { append => 1 }],
        ["Baz", "bar.txt", 1],
    ],
    "Foo\nBar\nBaz\n",
    "append"
);

done_testing;
@


1.1
log
@Initial revision
@
text
@d18 4
a21 1

d36 3
d59 1
@


1.1.1.1
log
@import perl 5.16.3 from CPAN - worked on by Andrew Fresh and myself
@
text
@@


1.1.1.2
log
@Import perl-5.20.1
@
text
@a18 2
plan skip_all => "no toolchain installed when cross-compiling"
    if $ENV{PERL_CORE} && $Config{'usecrosscompile'};
@

