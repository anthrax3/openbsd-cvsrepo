head	1.2;
access;
symbols
	OPENBSD_6_2_BASE:1.2
	PERL_5_24_2:1.1.1.3
	OPENBSD_6_1:1.2.0.4
	OPENBSD_6_1_BASE:1.2
	OPENBSD_6_0:1.1.1.2.0.10
	OPENBSD_6_0_BASE:1.1.1.2
	OPENBSD_5_9:1.1.1.2.0.4
	OPENBSD_5_9_BASE:1.1.1.2
	OPENBSD_5_8:1.1.1.2.0.6
	OPENBSD_5_8_BASE:1.1.1.2
	PERL_5_20_2:1.1.1.2
	OPENBSD_5_7:1.1.1.2.0.2
	OPENBSD_5_7_BASE:1.1.1.2
	PERL_5_20_1:1.1.1.2
	OPENBSD_5_6:1.1.1.1.0.8
	OPENBSD_5_6_BASE:1.1.1.1
	PERL_5_18_2:1.1.1.1
	PERL:1.1.1
	OPENBSD_5_5:1.1.1.1.0.6
	OPENBSD_5_5_BASE:1.1.1.1
	OPENBSD_5_4:1.1.1.1.0.2
	OPENBSD_5_4_BASE:1.1.1.1
	PERL_5_16_3:1.1.1.1
	CPAN:1.1.1;
locks; strict;
comment	@# @;
expand	@o@;


1.2
date	2017.02.05.00.31.58;	author afresh1;	state Exp;
branches;
next	1.1;
commitid	cxJ08BvJA9Pt2PTM;

1.1
date	2013.03.25.20.07.42;	author sthen;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	2013.03.25.20.07.42;	author sthen;	state Exp;
branches;
next	1.1.1.2;

1.1.1.2
date	2014.11.17.20.52.47;	author afresh1;	state Exp;
branches;
next	1.1.1.3;
commitid	B31cAbBIXiCqnL97;

1.1.1.3
date	2017.08.14.13.45.37;	author afresh1;	state Exp;
branches;
next	;
commitid	fAzrs78vdW2Yfc6A;


desc
@@


1.2
log
@Fix merge issues, remove excess files - match perl-5.24.1 dist
@
text
@BEGIN {
    chdir '..' if -d '../t';
    unshift @@INC, 't/lib';
    use lib 'lib';
}

use strict;
use warnings;
use Test::More 'no_plan';

require ExtUtils::MM_Any;

sub ExtUtils::MM_Any::quote_literal { $_[1] }

my $new_mm = sub {
    return bless { ARGS => {@@_}, @@_ }, 'ExtUtils::MM_Any';
};

my $warn_ok = sub {
    my($code, $want, $name) = @@_;

    my @@have;
    my $ret;
    {
        local $SIG{__WARN__} = sub { push @@have, @@_ };
        $ret = $code->();
    }

    like join("", @@have), $want, $name;
    return $ret;
};

my $version_regex = qr/version: ''/;
my $version_action = "they're converted to empty string";


note "Filename as version"; {
    my $mm = $new_mm->(
        DISTNAME => 'Net::FTP::Recursive',
        VERSION  => 'Recursive.pm',
    );

    my $res = $warn_ok->(
        sub { eval { $mm->metafile_target } },
        qr{Can't parse version 'Recursive.pm'}
    );
    ok $res, 'we know how to deal with bogus versions defined in Makefile.PL';
    like $res, $version_regex, $version_action;
}


note "'undef' version from parse_version"; {
    my $mm = $new_mm->(
        DISTNAME => 'Image::Imgur',
        VERSION  => 'undef',
    );
    my $res = $warn_ok->(
        sub { eval { $mm->metafile_target } },
        qr{Can't parse version 'undef'}
    );
    ok $res, q|when there's no $VERSION in Module.pm, $self->{VERSION} = 'undef'; via MM_Unix::parse_version and we know how to deal with that|;
    like $res, $version_regex, $version_action;
}


note "x.y.z version"; {
    my $mm = $new_mm->(
        DISTNAME => 'SQL::Library',
        VERSION  => 0.0.3,
    );

    # It would be more useful if the warning got translated to visible characters
    my $res = $warn_ok->(
        sub { eval { $mm->metafile_target } },
        qr{Can't parse version '\x00\x00\x03'}
    );
    ok $res, q|we know how to deal with our $VERSION = 0.0.3; style versions defined in the module|;
    like $res, $version_regex, $version_action;
}


note ".5 version"; {
    my $mm = $new_mm->(
        DISTNAME => 'Array::Suffix',
        VERSION  => '.5',
    );
    my $res = $warn_ok->(
        sub { eval { $mm->metafile_target } },
        qr{Can't parse version '.5'}
    );
    ok $res, q|we know how to deal with our $VERSION = '.5'; style versions defined in the module|;
    like $res, $version_regex, $version_action;
}


note "Non-camel case metadata"; {
    my $mm = $new_mm->(
        DISTNAME   => 'Attribute::Signature',
        META_MERGE => {
            resources => {
                repository         => 'http://github.com/chorny/Attribute-Signature',
                'Repository-clone' => 'git://github.com/chorny/Attribute-Signature.git',
            },
        },
    );
    my $res = eval { $mm->metafile_target };
    ok $res, q|we know how to deal with non-camel-cased custom meta resource keys defined in Makefile.PL|;
    like $res, qr/x_Repositoryclone/, "they're camel-cased";
}


note "version object in provides"; {
    my $mm = $new_mm->(
        DISTNAME   => 'CPAN::Testers::ParseReport',
        VERSION    => '2.34',
        META_ADD => {
            provides => {
                "CPAN::Testers::ParseReport" => {
                    version => version->new("v1.2.3"),
                    file    => "lib/CPAN/Testers/ParseReport.pm"
                }
            }
        },
    );
    my $res = eval { $mm->metafile_target };
    like $res, qr{version: \s* v1.2.3}x;
}
@


1.1
log
@Initial revision
@
text
@d108 1
a108 1
    like $res, qr/x_Repositoryclone:/, "they're camel-cased";
d119 1
a119 1
                    version => version->declare("v1.2.3"),
@


1.1.1.1
log
@import perl 5.16.3 from CPAN - worked on by Andrew Fresh and myself
@
text
@@


1.1.1.2
log
@Import perl-5.20.1
@
text
@d108 1
a108 1
    like $res, qr/x_Repositoryclone/, "they're camel-cased";
@


1.1.1.3
log
@Import perl-5.24.2
@
text
@d119 1
a119 1
                    version => version->new("v1.2.3"),
@


