head	1.2;
access;
symbols
	OPENBSD_6_1:1.2.0.2
	OPENBSD_6_1_BASE:1.2
	OPENBSD_6_0:1.1.1.4.0.10
	OPENBSD_6_0_BASE:1.1.1.4
	OPENBSD_5_9:1.1.1.4.0.4
	OPENBSD_5_9_BASE:1.1.1.4
	OPENBSD_5_8:1.1.1.4.0.6
	OPENBSD_5_8_BASE:1.1.1.4
	PERL_5_20_2:1.1.1.4
	OPENBSD_5_7:1.1.1.4.0.2
	OPENBSD_5_7_BASE:1.1.1.4
	PERL_5_20_1:1.1.1.4
	OPENBSD_5_6:1.1.1.3.0.4
	OPENBSD_5_6_BASE:1.1.1.3
	PERL_5_18_2:1.1.1.3
	PERL:1.1.1
	OPENBSD_5_5:1.1.1.2.0.6
	OPENBSD_5_5_BASE:1.1.1.2
	OPENBSD_5_4:1.1.1.2.0.2
	OPENBSD_5_4_BASE:1.1.1.2
	PERL_5_16_3:1.1.1.2
	OPENBSD_5_3:1.1.1.1.0.10
	OPENBSD_5_3_BASE:1.1.1.1
	OPENBSD_5_2:1.1.1.1.0.8
	OPENBSD_5_2_BASE:1.1.1.1
	OPENBSD_5_1_BASE:1.1.1.1
	OPENBSD_5_1:1.1.1.1.0.6
	OPENBSD_5_0:1.1.1.1.0.4
	OPENBSD_5_0_BASE:1.1.1.1
	OPENBSD_4_9:1.1.1.1.0.2
	OPENBSD_4_9_BASE:1.1.1.1
	PERL_5_12_2:1.1.1.1
	CPAN:1.1.1;
locks; strict;
comment	@# @;
expand	@o@;


1.2
date	2017.02.05.00.31.58;	author afresh1;	state Exp;
branches;
next	1.1;
commitid	cxJ08BvJA9Pt2PTM;

1.1
date	2010.09.24.14.48.58;	author millert;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	2010.09.24.14.48.58;	author millert;	state Exp;
branches;
next	1.1.1.2;

1.1.1.2
date	2013.03.25.20.07.41;	author sthen;	state Exp;
branches;
next	1.1.1.3;

1.1.1.3
date	2014.03.24.14.58.52;	author afresh1;	state Exp;
branches;
next	1.1.1.4;

1.1.1.4
date	2014.11.17.20.52.47;	author afresh1;	state Exp;
branches;
next	;
commitid	B31cAbBIXiCqnL97;


desc
@@


1.2
log
@Fix merge issues, remove excess files - match perl-5.24.1 dist
@
text
@#!/usr/bin/perl -w

# This test puts MakeMaker through the paces of a basic perl module
# build, test and installation of the Big::Fat::Dummy module.

# Module::Install relies on being able to patch the generated Makefile
# to add flags to $(PERL)
# This test includes adding ' -Iinc' to $(PERL), and checking 'make install'
# after that works. Done here as back-compat is considered basic.

BEGIN {
    unshift @@INC, 't/lib';
}

use strict;
use Config;
use ExtUtils::MakeMaker;
use utf8;

use MakeMaker::Test::Utils;
use MakeMaker::Test::Setup::BFD;
use Config;
use Test::More;
use ExtUtils::MM;
plan !MM->can_run(make()) && $ENV{PERL_CORE} && $Config{'usecrosscompile'}
    ? (skip_all => "cross-compiling and make not available")
    : (tests => 171);
use File::Find;
use File::Spec;
use File::Path;
use File::Temp qw[tempdir];

my $perl = which_perl();
my $Is_VMS = $^O eq 'VMS';
my $OLD_CP; # crude but...
my $w32worked; # or whether we had to fallback to chcp
if ($^O eq "MSWin32") {
    eval { require Win32; $w32worked = $OLD_CP = Win32::GetConsoleCP() };
    $OLD_CP = $1 if !$w32worked and qx(chcp) =~ /(\d+)$/ and $? == 0;
    if (defined $OLD_CP) {
        if ($w32worked) {
            Win32::SetConsoleCP(1252)
        } else {
            qx(chcp 1252);
        }
    }
}
END {
    if ($^O eq "MSWin32" and defined $OLD_CP) {
        if ($w32worked) {
            Win32::SetConsoleCP($OLD_CP)
        } else {
            qx(chcp $OLD_CP);
        }
    }
}

my $tmpdir = tempdir( DIR => 't', CLEANUP => 1 );
chdir $tmpdir;

perl_lib;

my $Touch_Time = calibrate_mtime();

$| = 1;

ok( setup_recurs(), 'setup' );
END {
    ok chdir File::Spec->updir or die;
    ok teardown_recurs, "teardown";
}

ok( chdir('Big-Dummy'), "chdir'd to Big-Dummy" ) ||
  diag("chdir failed: $!");

sub extrachar { $] > 5.008 && !$ENV{PERL_CORE} ? utf8::decode(my $c='Å¡') : 's' }
my $DUMMYINST = '../dummy-in'.extrachar().'tall';
my @@mpl_out = run(qq{$perl Makefile.PL "PREFIX=$DUMMYINST"});
END { rmtree $DUMMYINST; }

cmp_ok( $?, '==', 0, 'Makefile.PL exited with zero' ) ||
  diag(@@mpl_out);

my $makefile = makefile_name();
ok( grep(/^Writing $makefile for Big::Dummy/,
         @@mpl_out) == 1,
                                           'Makefile.PL output looks right');

ok( grep(/^Current package is: main$/,
         @@mpl_out) == 1,
                                           'Makefile.PL run in package main');

ok( -e $makefile,       'Makefile exists' );

# -M is flakey on VMS
my $mtime = (stat($makefile))[9];
cmp_ok( $Touch_Time, '<=', $mtime,  '  been touched' );

END { unlink makefile_name(), makefile_backup() }

my $make = make_run();

{
    # Suppress 'make manifest' noise
    local $ENV{PERL_MM_MANIFEST_VERBOSE} = 0;
    my $manifest_out = run("$make manifest");
    ok( -e 'MANIFEST',      'make manifest created a MANIFEST' );
    ok( -s 'MANIFEST',      '  not empty' );
}

END { unlink 'MANIFEST'; }

my $ppd_out = run("$make ppd");
is( $?, 0,                      '  exited normally' ) || diag $ppd_out;
ok( open(PPD, 'Big-Dummy.ppd'), '  .ppd file generated' );
my $ppd_html;
{ local $/; $ppd_html = <PPD> }
close PPD;
like( $ppd_html, qr{^<SOFTPKG NAME="Big-Dummy" VERSION="0.01">}m,
                                                           '  <SOFTPKG>' );
like( $ppd_html,
      qr{^\s*<ABSTRACT>Try "our" hot dog's, \$andwiche\$ and \$\(ub\)\$!</ABSTRACT>}m,
                                                           '  <ABSTRACT>');
like( $ppd_html,
      qr{^\s*<AUTHOR>Michael G Schwern &lt;schwern\@@pobox.com&gt;</AUTHOR>}m,
                                                           '  <AUTHOR>'  );
like( $ppd_html, qr{^\s*<IMPLEMENTATION>}m,          '  <IMPLEMENTATION>');
like( $ppd_html, qr{^\s*<REQUIRE NAME="strict::" />}m,  '  <REQUIRE>' );
unlike( $ppd_html, qr{^\s*<REQUIRE NAME="warnings::" />}m,  'no <REQUIRE> for build_require' );

my $archname = $Config{archname};
if( $] >= 5.008 ) {
    # XXX This is a copy of the internal logic, so it's not a great test
    $archname .= "-$Config{PERL_REVISION}.$Config{PERL_VERSION}";
}
like( $ppd_html, qr{^\s*<ARCHITECTURE NAME="$archname" />}m,
                                                           '  <ARCHITECTURE>');
like( $ppd_html, qr{^\s*<CODEBASE HREF="" />}m,            '  <CODEBASE>');
like( $ppd_html, qr{^\s*</IMPLEMENTATION>}m,           '  </IMPLEMENTATION>');
like( $ppd_html, qr{^\s*</SOFTPKG>}m,                      '  </SOFTPKG>');
END { unlink 'Big-Dummy.ppd' }


my $test_out = run("$make test");
like( $test_out, qr/All tests successful/, 'make test' );
is( $?, 0,                                 '  exited normally' ) ||
    diag $test_out;

# Test 'make test TEST_VERBOSE=1'
my $make_test_verbose = make_macro($make, 'test', TEST_VERBOSE => 1);
$test_out = run("$make_test_verbose");
like( $test_out, qr/ok \d+ - TEST_VERBOSE/, 'TEST_VERBOSE' );
like( $test_out, qr/All tests successful/,  '  successful' );
is( $?, 0,                                  '  exited normally' ) ||
    diag $test_out;

# now simulate what Module::Install does, and edit $(PERL) to add flags
open my $fh, '<', $makefile;
my $mtext = join '', <$fh>;
close $fh;
$mtext =~ s/^(\s*PERL\s*=.*)$/$1 -Iinc/m;
open $fh, '>', $makefile;
print $fh $mtext;
close $fh;

my $install_out = run("$make install");
is( $?, 0, 'install' ) || diag $install_out;
like( $install_out, qr/^Installing /m );

sub check_dummy_inst {
    my $loc = shift;
    my %files = ();
    find( sub {
	# do it case-insensitive for non-case preserving OSs
	my $file = lc $_;
	# VMS likes to put dots on the end of things that don't have them.
	$file =~ s/\.$// if $Is_VMS;
	$files{$file} = $File::Find::name;
    }, $loc );
    ok( $files{'dummy.pm'},     '  Dummy.pm installed' );
    ok( $files{'liar.pm'},      '  Liar.pm installed'  );
    ok( $files{'program'},      '  program installed'  );
    ok( $files{'.packlist'},    '  packlist created'   );
    ok( $files{'perllocal.pod'},'  perllocal.pod created' );
    \%files;
}

SKIP: {
    ok( -r $DUMMYINST,     '  install dir created' )
	or skip "$DUMMYINST doesn't exist", 5;
    check_dummy_inst($DUMMYINST);
}

SKIP: {
    skip 'VMS install targets do not preserve $(PREFIX)', 8 if $Is_VMS;

    $install_out = run("$make install PREFIX=elsewhere");
    is( $?, 0, 'install with PREFIX override' ) || diag $install_out;
    like( $install_out, qr/^Installing /m );

    ok( -r 'elsewhere',     '  install dir created' );
    check_dummy_inst('elsewhere');
    rmtree('elsewhere');
}


SKIP: {
    skip 'VMS install targets do not preserve $(DESTDIR)', 10 if $Is_VMS;

    $install_out = run("$make install PREFIX= DESTDIR=other");
    is( $?, 0, 'install with DESTDIR' ) ||
        diag $install_out;
    like( $install_out, qr/^Installing /m );

    ok( -d 'other',  '  destdir created' );
    my $files = check_dummy_inst('other');

    ok( open(PERLLOCAL, $files->{'perllocal.pod'} ) ) ||
        diag("Can't open $files->{'perllocal.pod'}: $!");
    { local $/;
      unlike(<PERLLOCAL>, qr/other/, 'DESTDIR should not appear in perllocal');
    }
    close PERLLOCAL;

# TODO not available in the min version of Test::Harness we require
#    ok( open(PACKLIST, $files{'.packlist'} ) ) ||
#        diag("Can't open $files{'.packlist'}: $!");
#    { local $/;
#      local $TODO = 'DESTDIR still in .packlist';
#      unlike(<PACKLIST>, qr/other/, 'DESTDIR should not appear in .packlist');
#    }
#    close PACKLIST;

    rmtree('other');
}


SKIP: {
    skip 'VMS install targets do not preserve $(PREFIX)', 9 if $Is_VMS;

    $install_out = run("$make install PREFIX=elsewhere DESTDIR=other/");
    is( $?, 0, 'install with PREFIX override and DESTDIR' ) ||
        diag $install_out;
    like( $install_out, qr/^Installing /m );

    ok( !-d 'elsewhere',       '  install dir not created' );
    ok( -d 'other/elsewhere',  '  destdir created' );
    check_dummy_inst('other/elsewhere');
    rmtree('other');
}


my $dist_test_out = run("$make disttest");
is( $?, 0, 'disttest' ) || diag($dist_test_out);

# Test META.yml generation
use ExtUtils::Manifest qw(maniread);

my $distdir  = 'Big-Dummy-0.01';
$distdir =~ s/\./_/g if $Is_VMS;
my $meta_yml = "$distdir/META.yml";
my $mymeta_yml = "$distdir/MYMETA.yml";
my $meta_json = "$distdir/META.json";
my $mymeta_json = "$distdir/MYMETA.json";

note "META file validity"; {
    require CPAN::Meta;

    ok( !-f 'META.yml',  'META.yml not written to source dir' );
    ok( -f $meta_yml,    'META.yml written to dist dir' );
    ok( !-e "META_new.yml", 'temp META.yml file not left around' );

    ok( -f 'MYMETA.yml',  'MYMETA.yml is written to source dir' );
    ok( -f $mymeta_yml,    'MYMETA.yml is written to dist dir on disttest' );

    ok( !-f 'META.json',  'META.json not written to source dir' );
    ok( -f $meta_json,    'META.json written to dist dir' );
    ok( !-e "META_new.json", 'temp META.json file not left around' );

    ok( -f 'MYMETA.json',  'MYMETA.json is written to source dir' );
    ok( -f $mymeta_json,    'MYMETA.json is written to dist dir on disttest' );

    for my $case (
      ['META.yml', $meta_yml],
      ['MYMETA.yml', $mymeta_yml],
      ['META.json', $meta_json],
      ['MYMETA.json', $mymeta_json],
      ['MYMETA.yml', 'MYMETA.yml'],
      ['MYMETA.json', 'MYMETA.json'],
    ) {
      my ($label, $meta_name) = @@$case;
      ok(
        my $obj = eval {
          CPAN::Meta->load_file($meta_name, {lazy_validation => 0})
        },
        "$label validates"
      );
      my $is = sub {
        my ($m,$e) = @@_;
        is($obj->$m, $e, "$label -> $m")
      };
      my $is_list = sub {
        my ($m,$e) = @@_;
        is_deeply([$obj->$m], $e, "$label -> $m")
      };
      my $is_map = sub {
        my ($m,$e) = @@_;
        is_deeply($obj->$m, $e, "$label -> $m")
      };
      $is->( name => "Big-Dummy" );
      $is->( version => "0.01" );
      $is->( abstract => q{Try "our" hot dog's, $andwiche$ and $(ub)$!} );
      $is_list->( licenses => [q{unknown}] );
      $is_list->( authors => [ q{Michael G Schwern <schwern@@pobox.com>} ] );
      $is_map->( prereqs => {
          configure => {
            requires => {
              'ExtUtils::MakeMaker' => 0
            },
          },
          build => {
            requires => {
              'warnings' => 0
            }
          },
          runtime => {
            requires => {
              'strict' => 0
            }
          },
        }
      );
      $is_map->(
        no_index => {
          directory => [qw/t inc/],
        }
      );
      $is->( dynamic_config => ($label =~ /MYMETA/) ? 0 : 1 );
    }

    my $manifest = maniread("$distdir/MANIFEST");
    # VMS is non-case preserving, so we can't know what the MANIFEST will
    # look like. :(
    _normalize($manifest);
    is( $manifest->{'meta.yml'}, 'Module YAML meta-data (added by MakeMaker)',
      "MANIFEST has META.yml"
    );
    is( $manifest->{'meta.json'}, 'Module JSON meta-data (added by MakeMaker)',
      "MANFIEST has META.json"
    );

    # Test NO_META META.yml suppression
    for my $f ( $meta_yml, $meta_json, 'MYMETA.yml', 'MYMETA.json' ) {
      1 while unlink $f;
    }
    ok( !-f $meta_yml,   'META.yml deleted' );
    ok( !-f 'MYMETA.yml','MYMETA.yml deleted' );
    ok( !-f $meta_json,   'META.json deleted' );
    ok( !-f 'MYMETA.json','MYMETA.json deleted' );

    @@mpl_out = run(qq{$perl Makefile.PL "NO_META=1"});
    ok( -f 'MYMETA.yml', 'MYMETA.yml generation not suppressed by NO_META' );
    ok( -f 'MYMETA.json', 'MYMETA.json generation not suppressed by NO_META' );
    cmp_ok( $?, '==', 0, 'Makefile.PL exited with zero' ) || diag(@@mpl_out);
    ok( !-f $meta_yml,   'META.yml generation suppressed by NO_META' );
    ok( !-f $meta_json,   'META.json generation suppressed by NO_META' );
    my $distdir_out = run("$make distdir");
    is( $?, 0, 'distdir' ) || diag($distdir_out);
    ok( !-f $meta_yml,   'META.yml generation suppressed by NO_META' );
    ok( !-f $meta_json,   'META.json generation suppressed by NO_META' );

    for my $f ( 'MYMETA.yml', 'MYMETA.json' ) {
      1 while unlink $f;
    }
    ok( !-f 'MYMETA.yml','MYMETA.yml deleted' );
    ok( !-f 'MYMETA.json','MYMETA.json deleted' );

    @@mpl_out = run(qq{$perl Makefile.PL "NO_MYMETA=1"});
    cmp_ok( $?, '==', 0, 'Makefile.PL exited with zero' ) || diag(@@mpl_out);
    $distdir_out = run("$make distdir");
    is( $?, 0, 'distdir' ) || diag($distdir_out);
    ok( !-f 'MYMETA.yml','MYMETA.yml generation suppressed by NO_MYMETA' );
    ok( !-f 'MYMETA.json','MYMETA.json generation suppressed by NO_MYMETA' );
    ok( -f $meta_yml,    'META.yml generation not suppressed by NO_MYMETA' );
    ok( -f $meta_json,    'META.json generation not suppressed by NO_MYMETA' );

    # Test MYMETA really comes from META except for prereqs
    for my $f ( $meta_yml, $meta_json, 'MYMETA.yml', 'MYMETA.json' ) {
      1 while unlink $f;
    }
    @@mpl_out = run(qq{$perl Makefile.PL});
    cmp_ok( $?, '==', 0, 'Makefile.PL exited with zero' ) || diag(@@mpl_out);
    $distdir_out = run("$make distdir");
    is( $?, 0, 'distdir' ) || diag($distdir_out);
    ok( -f $meta_yml,    'META.yml generated in distdir' );
    ok( -f $meta_json,    'META.json generated in distdir' );
    ok( ! -f $mymeta_yml,    'MYMETA.yml not yet generated in distdir' );
    ok( ! -f $mymeta_json,    'MYMETA.json generated in distdir' );
    my $edit_meta = CPAN::Meta->load_file($meta_json)->as_struct;
    $edit_meta->{abstract} = "New abstract";
    my $meta_obj = CPAN::Meta->new($edit_meta);
    is( $meta_obj->abstract, "New abstract", "MYMETA abstract from META, not Makefile.PL");
    ok( $meta_obj->save($meta_json), "Saved edited META.json in distdir" );
    ok( $meta_obj->save($meta_yml, {version => 1.4}), "Saved edited META.yml in distdir");
    ok( chdir $distdir );
    ok( -f 'META.yml',    'META.yml confirmed in distdir' );
    ok( -f 'META.json',    'META.json confirmed in distdir' );
    @@mpl_out = run(qq{$perl Makefile.PL});
    cmp_ok( $?, '==', 0, 'Makefile.PL in distdir exited with zero' ) || diag(@@mpl_out);
    ok( chdir File::Spec->updir );
    ok( -f $mymeta_yml,    'MYMETA.yml generated in distdir' );
    ok( -f $mymeta_json,    'MYMETA.json generated in distdir' );
    $meta_obj = CPAN::Meta->load_file($meta_json);
    is( $meta_obj->abstract, "New abstract", "META abstract is same as was saved");
    $meta_obj = CPAN::Meta->load_file($mymeta_json);
    is( $meta_obj->abstract, "New abstract", "MYMETA abstract from META, not Makefile.PL");
}



# Make sure init_dirscan doesn't go into the distdir
@@mpl_out = run(qq{$perl Makefile.PL "PREFIX=$DUMMYINST"});

cmp_ok( $?, '==', 0, 'Makefile.PL exited with zero' ) || diag(@@mpl_out);

ok( grep(/^Writing $makefile for Big::Dummy/, @@mpl_out) == 1,
                                'init_dirscan skipped distdir') ||
  diag(@@mpl_out);

# I know we'll get ignored errors from make here, that's ok.
# Send STDERR off to oblivion.
open(SAVERR, ">&STDERR") or die $!;
open(STDERR, ">",File::Spec->devnull) or die $!;

my $realclean_out = run("$make realclean");
is( $?, 0, 'realclean' ) || diag($realclean_out);

open(STDERR, ">&SAVERR") or die $!;
close SAVERR;

sub _normalize {
    my $hash = shift;

    %$hash= map { lc($_) => $hash->{$_} } keys %$hash;
}
@


1.1
log
@Initial revision
@
text
@d6 5
d18 1
a19 1
use Test::More tests => 80;
d22 6
d31 1
d35 22
d58 2
a59 1
chdir 't';
d69 2
a70 2
    ok( chdir File::Spec->updir );
    ok( teardown_recurs(), 'teardown' );
d76 4
a79 2
my @@mpl_out = run(qq{$perl Makefile.PL "PREFIX=../dummy-install"});
END { rmtree '../dummy-install'; }
d85 1
a85 1
ok( grep(/^Writing $makefile for Big::Dummy/, 
d97 1
a97 1
cmp_ok( $Touch_Time, '<=', $mtime,  '  its been touched' );
d104 1
a104 1
    # Supress 'make manifest' noise
d108 1
a108 1
    ok( -s 'MANIFEST',      '  its not empty' );
a112 1

d119 1
a119 1
like( $ppd_html, qr{^<SOFTPKG NAME="Big-Dummy" VERSION="0.01">}m, 
d121 2
a122 1
like( $ppd_html, qr{^\s*<ABSTRACT>Try "our" hot dog's</ABSTRACT>}m,         
d124 1
a124 1
like( $ppd_html, 
d146 1
a146 1
is( $?, 0,                                 '  exited normally' ) || 
d157 8
d170 17
a186 16
ok( -r '../dummy-install',     '  install dir created' );
my %files = ();
find( sub { 
    # do it case-insensitive for non-case preserving OSs
    my $file = lc $_;

    # VMS likes to put dots on the end of things that don't have them.
    $file =~ s/\.$// if $Is_VMS;

    $files{$file} = $File::Find::name; 
}, '../dummy-install' );
ok( $files{'dummy.pm'},     '  Dummy.pm installed' );
ok( $files{'liar.pm'},      '  Liar.pm installed'  );
ok( $files{'program'},      '  program installed'  );
ok( $files{'.packlist'},    '  packlist created'   );
ok( $files{'perllocal.pod'},'  perllocal.pod created' );
d188 5
d202 1
a202 7
    %files = ();
    find( sub { $files{$_} = $File::Find::name; }, 'elsewhere' );
    ok( $files{'Dummy.pm'},     '  Dummy.pm installed' );
    ok( $files{'Liar.pm'},      '  Liar.pm installed'  );
    ok( $files{'program'},      '  program installed'  );
    ok( $files{'.packlist'},    '  packlist created'   );
    ok( $files{'perllocal.pod'},'  perllocal.pod created' );
d211 1
a211 1
    is( $?, 0, 'install with DESTDIR' ) || 
d216 1
a216 10
    %files = ();
    my $perllocal;
    find( sub { 
        $files{$_} = $File::Find::name;
    }, 'other' );
    ok( $files{'Dummy.pm'},     '  Dummy.pm installed' );
    ok( $files{'Liar.pm'},      '  Liar.pm installed'  );
    ok( $files{'program'},      '  program installed'  );
    ok( $files{'.packlist'},    '  packlist created'   );
    ok( $files{'perllocal.pod'},'  perllocal.pod created' );
d218 2
a219 2
    ok( open(PERLLOCAL, $files{'perllocal.pod'} ) ) || 
        diag("Can't open $files{'perllocal.pod'}: $!");
d226 1
a226 1
#    ok( open(PACKLIST, $files{'.packlist'} ) ) || 
d242 1
a242 1
    is( $?, 0, 'install with PREFIX override and DESTDIR' ) || 
d248 1
a248 7
    %files = ();
    find( sub { $files{$_} = $File::Find::name; }, 'other/elsewhere' );
    ok( $files{'Dummy.pm'},     '  Dummy.pm installed' );
    ok( $files{'Liar.pm'},      '  Liar.pm installed'  );
    ok( $files{'program'},      '  program installed'  );
    ok( $files{'.packlist'},    '  packlist created'   );
    ok( $files{'perllocal.pod'},'  perllocal.pod created' );
d262 109
d372 46
a417 3
ok( !-f 'META.yml',  'META.yml not written to source dir' );
ok( -f $meta_yml,    'META.yml written to dist dir' );
ok( !-e "META_new.yml", 'temp META.yml file not left around' );
a418 53
SKIP: {
    # META.yml spec 1.4 was added in 0.11
    skip "Test::YAML::Meta >= 0.11 required", 2
      unless eval { require Test::YAML::Meta }   and
             Test::YAML::Meta->VERSION >= 0.11;

    Test::YAML::Meta::meta_spec_ok($meta_yml);
}

ok open META, $meta_yml or diag $!;
my $meta = join '', <META>;
ok close META;

is $meta, <<"END";
--- #YAML:1.0
name:               Big-Dummy
version:            0.01
abstract:           Try "our" hot dog's
author:
    - Michael G Schwern <schwern\@@pobox.com>
license:            unknown
distribution_type:  module
configure_requires:
    ExtUtils::MakeMaker:  0
build_requires:
    warnings:  0
requires:
    strict:  0
no_index:
    directory:
        - t
        - inc
generated_by:       ExtUtils::MakeMaker version $ExtUtils::MakeMaker::VERSION
meta-spec:
    url:      http://module-build.sourceforge.net/META-spec-v1.4.html
    version:  1.4
END

my $manifest = maniread("$distdir/MANIFEST");
# VMS is non-case preserving, so we can't know what the MANIFEST will
# look like. :(
_normalize($manifest);
is( $manifest->{'meta.yml'}, 'Module meta-data (added by MakeMaker)' );


# Test NO_META META.yml suppression
unlink $meta_yml;
ok( !-f $meta_yml,   'META.yml deleted' );
@@mpl_out = run(qq{$perl Makefile.PL "NO_META=1"});
cmp_ok( $?, '==', 0, 'Makefile.PL exited with zero' ) || diag(@@mpl_out);
my $distdir_out = run("$make distdir");
is( $?, 0, 'distdir' ) || diag($distdir_out);
ok( !-f $meta_yml,   'META.yml generation suppressed by NO_META' );
d422 1
a422 1
@@mpl_out = run(qq{$perl Makefile.PL "PREFIX=../dummy-install"});
d427 1
a427 1
                                'init_dirscan skipped distdir') || 
a440 1

d444 1
a444 4
    while(my($k,$v) = each %$hash) {
        delete $hash->{$k};
        $hash->{lc $k} = $v;
    }
@


1.1.1.1
log
@Perl 5.12.2 from CPAN
@
text
@@


1.1.1.2
log
@import perl 5.16.3 from CPAN - worked on by Andrew Fresh and myself
@
text
@d14 1
a14 1
use Test::More tests => 171;
d34 2
a35 2
    ok chdir File::Spec->updir or die;
    ok teardown_recurs, "teardown";
d76 1
d85 1
a85 2
like( $ppd_html,
      qr{^\s*<ABSTRACT>Try "our" hot dog's, \$andwiche\$ and \$\(ub\)\$!</ABSTRACT>}m,
a231 78
my $mymeta_yml = "$distdir/MYMETA.yml";
my $meta_json = "$distdir/META.json";
my $mymeta_json = "$distdir/MYMETA.json";

note "META file validity"; {
    require CPAN::Meta;

    ok( !-f 'META.yml',  'META.yml not written to source dir' );
    ok( -f $meta_yml,    'META.yml written to dist dir' );
    ok( !-e "META_new.yml", 'temp META.yml file not left around' );

    ok( -f 'MYMETA.yml',  'MYMETA.yml is written to source dir' );
    ok( -f $mymeta_yml,    'MYMETA.yml is written to dist dir on disttest' );

    ok( !-f 'META.json',  'META.json not written to source dir' );
    ok( -f $meta_json,    'META.json written to dist dir' );
    ok( !-e "META_new.json", 'temp META.json file not left around' );

    ok( -f 'MYMETA.json',  'MYMETA.json is written to source dir' );
    ok( -f $mymeta_json,    'MYMETA.json is written to dist dir on disttest' );

    for my $case (
      ['META.yml', $meta_yml],
      ['MYMETA.yml', $mymeta_yml],
      ['META.json', $meta_json],
      ['MYMETA.json', $mymeta_json],
      ['MYMETA.yml', 'MYMETA.yml'],
      ['MYMETA.json', 'MYMETA.json'],
    ) {
      my ($label, $meta_name) = @@$case;
      ok(
        my $obj = eval {
          CPAN::Meta->load_file($meta_name, {lazy_validation => 0})
        },
        "$label validates"
      );
      my $is = sub {
        my ($m,$e) = @@_;
        is($obj->$m, $e, "$label -> $m")
      };
      my $is_list = sub {
        my ($m,$e) = @@_;
        is_deeply([$obj->$m], $e, "$label -> $m")
      };
      my $is_map = sub {
        my ($m,$e) = @@_;
        is_deeply($obj->$m, $e, "$label -> $m")
      };
      $is->( name => "Big-Dummy" );
      $is->( version => "0.01" );
      $is->( abstract => q{Try "our" hot dog's, $andwiche$ and $(ub)$!} );
      $is_list->( licenses => [q{unknown}] );
      $is_list->( authors => [ q{Michael G Schwern <schwern@@pobox.com>} ] );
      $is_map->( prereqs => {
          configure => {
            requires => {
              'ExtUtils::MakeMaker' => 0
            },
          },
          build => {
            requires => {
              'warnings' => 0
            }
          },
          runtime => {
            requires => {
              'strict' => 0
            }
          },
        }
      );
      $is_map->(
        no_index => {
          directory => [qw/t inc/],
        }
      );
      $is->( dynamic_config => ($label =~ /MYMETA/) ? 0 : 1 );
    }
d233 3
a235 30
    my $manifest = maniread("$distdir/MANIFEST");
    # VMS is non-case preserving, so we can't know what the MANIFEST will
    # look like. :(
    _normalize($manifest);
    is( $manifest->{'meta.yml'}, 'Module YAML meta-data (added by MakeMaker)',
      "MANIFEST has META.yml"
    );
    is( $manifest->{'meta.json'}, 'Module JSON meta-data (added by MakeMaker)',
      "MANFIEST has META.json"
    );

    # Test NO_META META.yml suppression
    for my $f ( $meta_yml, $meta_json, 'MYMETA.yml', 'MYMETA.json' ) {
      1 while unlink $f;
    }
    ok( !-f $meta_yml,   'META.yml deleted' );
    ok( !-f 'MYMETA.yml','MYMETA.yml deleted' );
    ok( !-f $meta_json,   'META.json deleted' );
    ok( !-f 'MYMETA.json','MYMETA.json deleted' );

    @@mpl_out = run(qq{$perl Makefile.PL "NO_META=1"});
    ok( -f 'MYMETA.yml', 'MYMETA.yml generation not suppressed by NO_META' );
    ok( -f 'MYMETA.json', 'MYMETA.json generation not suppressed by NO_META' );
    cmp_ok( $?, '==', 0, 'Makefile.PL exited with zero' ) || diag(@@mpl_out);
    ok( !-f $meta_yml,   'META.yml generation suppressed by NO_META' );
    ok( !-f $meta_json,   'META.json generation suppressed by NO_META' );
    my $distdir_out = run("$make distdir");
    is( $?, 0, 'distdir' ) || diag($distdir_out);
    ok( !-f $meta_yml,   'META.yml generation suppressed by NO_META' );
    ok( !-f $meta_json,   'META.json generation suppressed by NO_META' );
d237 5
a241 5
    for my $f ( 'MYMETA.yml', 'MYMETA.json' ) {
      1 while unlink $f;
    }
    ok( !-f 'MYMETA.yml','MYMETA.yml deleted' );
    ok( !-f 'MYMETA.json','MYMETA.json deleted' );
d243 1
a243 39
    @@mpl_out = run(qq{$perl Makefile.PL "NO_MYMETA=1"});
    cmp_ok( $?, '==', 0, 'Makefile.PL exited with zero' ) || diag(@@mpl_out);
    $distdir_out = run("$make distdir");
    is( $?, 0, 'distdir' ) || diag($distdir_out);
    ok( !-f 'MYMETA.yml','MYMETA.yml generation suppressed by NO_MYMETA' );
    ok( !-f 'MYMETA.json','MYMETA.json generation suppressed by NO_MYMETA' );
    ok( -f $meta_yml,    'META.yml generation not suppressed by NO_MYMETA' );
    ok( -f $meta_json,    'META.json generation not suppressed by NO_MYMETA' );

    # Test MYMETA really comes from META except for prereqs
    for my $f ( $meta_yml, $meta_json, 'MYMETA.yml', 'MYMETA.json' ) {
      1 while unlink $f;
    }
    @@mpl_out = run(qq{$perl Makefile.PL});
    cmp_ok( $?, '==', 0, 'Makefile.PL exited with zero' ) || diag(@@mpl_out);
    $distdir_out = run("$make distdir");
    is( $?, 0, 'distdir' ) || diag($distdir_out);
    ok( -f $meta_yml,    'META.yml generated in distdir' );
    ok( -f $meta_json,    'META.json generated in distdir' );
    ok( ! -f $mymeta_yml,    'MYMETA.yml not yet generated in distdir' );
    ok( ! -f $mymeta_json,    'MYMETA.json generated in distdir' );
    my $edit_meta = CPAN::Meta->load_file($meta_json)->as_struct;
    $edit_meta->{abstract} = "New abstract";
    my $meta_obj = CPAN::Meta->new($edit_meta);
    is( $meta_obj->abstract, "New abstract", "MYMETA abstract from META, not Makefile.PL");
    ok( $meta_obj->save($meta_json), "Saved edited META.json in distdir" );
    ok( $meta_obj->save($meta_yml, {version => 1.4}), "Saved edited META.yml in distdir");
    ok( chdir $distdir );
    ok( -f 'META.yml',    'META.yml confirmed in distdir' );
    ok( -f 'META.json',    'META.json confirmed in distdir' );
    @@mpl_out = run(qq{$perl Makefile.PL});
    cmp_ok( $?, '==', 0, 'Makefile.PL in distdir exited with zero' ) || diag(@@mpl_out);
    ok( chdir File::Spec->updir );
    ok( -f $mymeta_yml,    'MYMETA.yml generated in distdir' );
    ok( -f $mymeta_json,    'MYMETA.json generated in distdir' );
    $meta_obj = CPAN::Meta->load_file($meta_json);
    is( $meta_obj->abstract, "New abstract", "META abstract is same as was saved");
    $meta_obj = CPAN::Meta->load_file($mymeta_json);
    is( $meta_obj->abstract, "New abstract", "MYMETA abstract from META, not Makefile.PL");
d246 44
@


1.1.1.3
log
@Import perl-5.18.2

OK espie@@ sthen@@ deraadt@@
@
text
@d415 4
a418 1
    %$hash= map { lc($_) => $hash->{$_} } keys %$hash;
@


1.1.1.4
log
@Import perl-5.20.1
@
text
@d14 1
a14 4
use Test::More
    $ENV{PERL_CORE} && $Config{'usecrosscompile'}
    ? (skip_all => "no toolchain installed when cross-compiling")
    : (tests => 171);
a19 1
use File::Temp qw[tempdir];
d24 1
a24 2
my $tmpdir = tempdir( DIR => 't', CLEANUP => 1 );
chdir $tmpdir;
d48 1
a48 1
ok( grep(/^Writing $makefile for Big::Dummy/,
d82 1
a82 1
like( $ppd_html, qr{^<SOFTPKG NAME="Big-Dummy" VERSION="0.01">}m,
d87 1
a87 1
like( $ppd_html,
d109 1
a109 1
is( $?, 0,                                 '  exited normally' ) ||
d127 1
a127 1
find( sub {
d134 1
a134 1
    $files{$file} = $File::Find::name;
d166 1
a166 1
    is( $?, 0, 'install with DESTDIR' ) ||
d173 1
a173 1
    find( sub {
d182 1
a182 1
    ok( open(PERLLOCAL, $files{'perllocal.pod'} ) ) ||
d190 1
a190 1
#    ok( open(PACKLIST, $files{'.packlist'} ) ) ||
d206 1
a206 1
    is( $?, 0, 'install with PREFIX override and DESTDIR' ) ||
d397 1
a397 1
                                'init_dirscan skipped distdir') ||
@


