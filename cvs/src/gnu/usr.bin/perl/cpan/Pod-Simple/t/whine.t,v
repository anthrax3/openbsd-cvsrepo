head	1.2;
access;
symbols
	OPENBSD_6_2:1.2.0.2
	OPENBSD_6_2_BASE:1.2
	PERL_5_24_2:1.1.1.2
	OPENBSD_6_1:1.2.0.4
	OPENBSD_6_1_BASE:1.2
	OPENBSD_6_0:1.1.1.1.0.12
	OPENBSD_6_0_BASE:1.1.1.1
	OPENBSD_5_9:1.1.1.1.0.6
	OPENBSD_5_9_BASE:1.1.1.1
	OPENBSD_5_8:1.1.1.1.0.8
	OPENBSD_5_8_BASE:1.1.1.1
	PERL_5_20_2:1.1.1.1
	OPENBSD_5_7:1.1.1.1.0.2
	OPENBSD_5_7_BASE:1.1.1.1
	PERL_5_20_1:1.1.1.1
	OPENBSD_5_6:1.1.1.1.0.4
	OPENBSD_5_6_BASE:1.1.1.1
	PERL_5_18_2:1.1.1.1
	PERL:1.1.1;
locks; strict;
comment	@# @;
expand	@b@;


1.2
date	2017.02.05.00.32.03;	author afresh1;	state Exp;
branches;
next	1.1;
commitid	cxJ08BvJA9Pt2PTM;

1.1
date	2014.03.24.14.58.56;	author afresh1;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	2014.03.24.14.58.56;	author afresh1;	state Exp;
branches;
next	1.1.1.2;

1.1.1.2
date	2017.08.14.13.46.01;	author afresh1;	state Exp;
branches;
next	;
commitid	fAzrs78vdW2Yfc6A;


desc
@@


1.2
log
@Fix merge issues, remove excess files - match perl-5.24.1 dist
@
text
@use strict;
use warnings;
use Test::More tests => 4;

{
  package Pod::Simple::ErrorFinder;
  use base 'Pod::Simple::DumpAsXML'; # arbitrary choice -- rjbs, 2013-04-16

  sub errors_for_input {
    my ($class, $input, $mutor) = @@_;

    my $parser = $class->new;
    my $output = '';
    $parser->output_string( \$output );
    $parser->no_errata_section(1);
    $parser->parse_string_document( $input );

    return $parser->errata_seen();
  }
}

sub errors { Pod::Simple::ErrorFinder->errors_for_input(@@_) }

{
  my $errors = errors("=over 4\n\n=item 1\n\nHey\n\n");
  is_deeply(
    $errors,
    { 1 => [ "=over without closing =back" ] },
    "no closing =back",
  );
}

{
  for my $l_code ('L< foo>', 'L< bar>') {
    my $input = "=pod\n\nAmbiguous space: $l_code\n";
    my $errors = errors("$input");
    is_deeply(
      $errors,
      { 3 => [ "L<> starts or ends with whitespace" ] },
      "warning for space in $l_code",
    );
  }
}

{
  my $input = "=pod\n\nAmbiguous slash: L<I/O Operators|op/io>\n";
  my $errors = errors("$input");
  is_deeply(
    $errors,
    { 3 => [ "alternative text 'I/O Operators' contains non-escaped | or /" ] },
    "warning for / in text part of L<>",
  );
}
@


1.1
log
@Initial revision
@
text
@a8 13
  my @@errors;
  sub whine {
    my ($self, @@rest) = @@_;
    push @@errors, [ @@rest ];
    $self->SUPER::whine(@@rest);
  }

  sub scream {
    my ($self, @@rest) = @@_;
    push @@errors, [ @@rest ];
    $self->SUPER::scream(@@rest);
  }

a10 1
    @@errors = ();
d15 1
d18 1
a18 4
    @@errors = sort { $a->[0] <=> $b->[0]
                  || $a->[1] cmp $b->[1] } @@errors;

    return @@errors;
d25 1
a25 1
  my @@errors = errors("=over 4\n\n=item 1\n\nHey\n\n");
d27 2
a28 2
    \@@errors,
    [ [ 1, "=over without closing =back" ] ],
d36 1
a36 1
    my @@errors = errors("$input");
d38 2
a39 2
      \@@errors,
      [ [ 3, "L<> starts or ends with whitespace" ] ],
d47 1
a47 1
  my @@errors = errors("$input");
d49 2
a50 2
    \@@errors,
    [ [ 3, "alternative text 'I/O Operators' contains non-escaped | or /" ] ],
@


1.1.1.1
log
@Import perl-5.18.2

OK espie@@ sthen@@ deraadt@@
@
text
@@


1.1.1.2
log
@Import perl-5.24.2
@
text
@d9 13
d24 1
a28 1
    $parser->no_errata_section(1);
d31 4
a34 1
    return $parser->errata_seen();
d41 1
a41 1
  my $errors = errors("=over 4\n\n=item 1\n\nHey\n\n");
d43 2
a44 2
    $errors,
    { 1 => [ "=over without closing =back" ] },
d52 1
a52 1
    my $errors = errors("$input");
d54 2
a55 2
      $errors,
      { 3 => [ "L<> starts or ends with whitespace" ] },
d63 1
a63 1
  my $errors = errors("$input");
d65 2
a66 2
    $errors,
    { 3 => [ "alternative text 'I/O Operators' contains non-escaped | or /" ] },
@

