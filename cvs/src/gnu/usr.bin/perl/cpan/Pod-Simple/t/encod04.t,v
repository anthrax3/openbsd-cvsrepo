head	1.2;
access;
symbols
	OPENBSD_6_2_BASE:1.2
	PERL_5_24_2:1.1.1.2
	OPENBSD_6_1:1.2.0.4
	OPENBSD_6_1_BASE:1.2
	OPENBSD_6_0:1.1.1.1.0.12
	OPENBSD_6_0_BASE:1.1.1.1
	OPENBSD_5_9:1.1.1.1.0.6
	OPENBSD_5_9_BASE:1.1.1.1
	OPENBSD_5_8:1.1.1.1.0.8
	OPENBSD_5_8_BASE:1.1.1.1
	PERL_5_20_2:1.1.1.1
	OPENBSD_5_7:1.1.1.1.0.2
	OPENBSD_5_7_BASE:1.1.1.1
	PERL_5_20_1:1.1.1.1
	OPENBSD_5_6:1.1.1.1.0.4
	OPENBSD_5_6_BASE:1.1.1.1
	PERL_5_18_2:1.1.1.1
	PERL:1.1.1;
locks; strict;
comment	@# @;
expand	@b@;


1.2
date	2017.02.05.00.32.03;	author afresh1;	state Exp;
branches;
next	1.1;
commitid	cxJ08BvJA9Pt2PTM;

1.1
date	2014.03.24.14.58.56;	author afresh1;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	2014.03.24.14.58.56;	author afresh1;	state Exp;
branches;
next	1.1.1.2;

1.1.1.2
date	2017.08.14.13.46.01;	author afresh1;	state Exp;
branches;
next	;
commitid	fAzrs78vdW2Yfc6A;


desc
@@


1.2
log
@Fix merge issues, remove excess files - match perl-5.24.1 dist
@
text
@# The encoding detection heuristic will choose UTF8 or CP1252.  The current
# implementation will usually treat CP1252 (aka "Win-Latin-1") as CP1252 but
# can be fooled into seeing it as UTF8.

BEGIN {
    if($ENV{PERL_CORE}) {
        chdir 't';
        @@INC = '../lib';
    }
}

use strict;
use Test;
BEGIN {
    if ($] lt 5.007_003) {
        plan tests => 5, todo => [4, 5];   # Need utf8::decode() to pass #5
                                           # and isn't available in this
                                           # release
    }
    else {
        plan tests => 5, todo => [4];
    }
}

ok 1;

use Pod::Simple::DumpAsXML;
use Pod::Simple::XMLOutStream;


# Initial, isolated, non-ASCII byte triggers CP1252 guess and later
# multi-byte sequence is not considered by heuristic.

my $x97;
my $x91;
my $dash;
if ($] ge 5.007_003) {
    $x97 = chr utf8::unicode_to_native(0x97);
    $x91 = chr utf8::unicode_to_native(0x91);
    $dash = '&#8212';
}
else {  # Tests will fail for early EBCDICs
    $x97 = chr 0x97;
    $x91 = chr 0x91;
    $dash = '--';
}

my @@output_lines = split m/[\r\n]+/, Pod::Simple::XMLOutStream->_out( qq{

=head1 NAME

Em::Dash $x97 ${x91}CAF\xC9\x92

=cut

} );

my($guess) = "@@output_lines" =~ m{Non-ASCII.*?Assuming ([\w-]+)};
if( $guess ) {
  if( $guess eq 'CP1252' ) {
    if( grep m{Dash $dash}, @@output_lines ) {
      ok 1;
    } else {
      ok 0;
      print STDERR "# failed to find expected control character in output\n"
    }
  } else {
    ok 0;
    print STDERR "# parser guessed wrong encoding expected 'CP1252' got '$guess'\n";
  }
} else {
  ok 0;
  print STDERR "# parser failed to detect non-ASCII bytes in input\n";
}


# Initial smart-quote character triggers CP1252 guess as expected

@@output_lines = split m/[\r\n]+/, Pod::Simple::XMLOutStream->_out( qq{

=head1 NAME

Smart::Quote - ${x91}FUT\xC9\x92

=cut

} );

if (ord("A") != 65) { # ASCII-platform dependent test skipped on this platform
    ok (1);
}
else {
    ($guess) = "@@output_lines" =~ m{Non-ASCII.*?Assuming ([\w-]+)};
    if( $guess ) {
        if( $guess eq 'CP1252' ) {
            ok 1;
        } else {
            ok 0;
            print STDERR "# parser guessed wrong encoding expected 'CP1252' got '$guess'\n";
        }
    } else {
        ok 0;
        print STDERR "# parser failed to detect non-ASCII bytes in input\n";
    }
}


# Initial accented character followed by 'smart' apostrophe causes heuristic
# to choose UTF8 (a somewhat contrived example)

@@output_lines = split m/[\r\n]+/, Pod::Simple::XMLOutStream->_out( qq{

=head1 NAME

=head2 JOS\xC9\x92S PLACE

=cut

} );

if (ord("A") != 65) { # ASCII-platform dependent test skipped on this platform
    ok (1);
}
else {
    ($guess) = "@@output_lines" =~ m{Non-ASCII.*?Assuming ([\w-]+)};
    if( $guess ) {
        if( $guess eq 'CP1252' ) {
            ok 1;
        } else {
            ok 0;
            print STDERR "# parser guessed wrong encoding expected 'CP1252' got '$guess'\n";
        }
    } else {
        ok 0;
        print STDERR "# parser failed to detect non-ASCII bytes in input\n";
    }
}


# The previous example used a CP1252 byte sequence that also happened to be a
# valid UTF8 byte sequence.  In this example we use an illegal UTF-8 sequence
# (it needs a third byte), so must be 1252

@@output_lines = split m/[\r\n]+/, Pod::Simple::XMLOutStream->_out( qq{

=head1 NAME

Smart::Apostrophe::Fail - L\xE9\x92Strange

=cut

} );

if (ord("A") != 65) { # ASCII-platform dependent test skipped on this platform
    ok (1);
}
else {
    ($guess) = "@@output_lines" =~ m{Non-ASCII.*?Assuming ([\w-]+)};
    if( $guess ) {
        if( $guess eq 'CP1252' ) {
            ok 1;
        } else {
            ok 0;
            print STDERR "# parser guessed wrong encoding expected 'CP1252' got '$guess'\n";
        }
    } else {
        ok 0;
        print STDERR "# parser failed to detect non-ASCII bytes in input\n";
    }
}


exit;
@


1.1
log
@Initial revision
@
text
@d1 2
a2 2
# The encoding detection heuristic will choose UTF8 or Latin-1.  The current
# implementation will usually treat CP1252 (aka "Win-Latin-1") as Latin-1 but
a3 7
#
# Note 1: Neither guess is 'correct' since even if we choose Latin-1, all the
#         smart quote symbols will be rendered as control characters
#
# Note 2: the guess is only applied if the source POD omits =encoding, so
#         CP1252 source will render correctly if properly declared
#
d14 10
a23 1
BEGIN { plan tests => 5 };
d31 1
a31 1
# Initial, isolated, non-ASCII byte triggers Latin-1 guess and later
d34 15
a48 1
my @@output_lines = split m/[\cm\cj]+/, Pod::Simple::XMLOutStream->_out( qq{
d52 1
a52 1
Em::Dash \x97 \x91CAF\xC9\x92
d60 2
a61 2
  if( $guess eq 'ISO8859-1' ) {
    if( grep m{Dash (\x97|&#x97;|&#151;)}, @@output_lines ) {
d65 1
a65 1
      print "# failed to find expected control character in output\n"
d69 1
a69 1
    print "# parser guessed wrong encoding expected 'ISO8859-1' got '$guess'\n";
d73 1
a73 1
  print "# parser failed to detect non-ASCII bytes in input\n";
d77 1
a77 1
# Initial smart-quote character triggers Latin-1 guess as expected
d79 1
a79 1
@@output_lines = split m/[\cm\cj]+/, Pod::Simple::XMLOutStream->_out( qq{
d83 1
a83 1
Smart::Quote - \x91FUT\xC9\x92
d89 16
a104 11
($guess) = "@@output_lines" =~ m{Non-ASCII.*?Assuming ([\w-]+)};
if( $guess ) {
  if( $guess eq 'ISO8859-1' ) {
    ok 1;
  } else {
    ok 0;
    print "# parser guessed wrong encoding expected 'ISO8859-1' got '$guess'\n";
  }
} else {
  ok 0;
  print "# parser failed to detect non-ASCII bytes in input\n";
d109 1
a109 1
# to choose UTF8 (a rather contrived example)
d111 1
a111 1
@@output_lines = split m/[\cm\cj]+/, Pod::Simple::XMLOutStream->_out( qq{
d115 1
a115 1
Smart::Apostrophe::Fail - L\xC9\x92STRANGE
d121 16
a136 11
($guess) = "@@output_lines" =~ m{Non-ASCII.*?Assuming ([\w-]+)};
if( $guess ) {
  if( $guess eq 'UTF-8' ) {
    ok 1;
  } else {
    ok 0;
    print "# parser guessed wrong encoding expected 'UTF-8' got '$guess'\n";
  }
} else {
  ok 0;
  print "# parser failed to detect non-ASCII bytes in input\n";
d141 2
a142 3
# valid UTF8 byte sequence.  In this example the heuristic also guesses 'wrong'
# despite the byte sequence not being valid UTF8 (it's too short).  This could
# arguably be 'fixed' by using a less naive regex.
d144 1
a144 1
@@output_lines = split m/[\cm\cj]+/, Pod::Simple::XMLOutStream->_out( qq{
d154 16
a169 11
($guess) = "@@output_lines" =~ m{Non-ASCII.*?Assuming ([\w-]+)};
if( $guess ) {
  if( $guess eq 'UTF-8' ) {
    ok 1;
  } else {
    ok 0;
    print "# parser guessed wrong encoding expected 'UTF-8' got '$guess'\n";
  }
} else {
  ok 0;
  print "# parser failed to detect non-ASCII bytes in input\n";
@


1.1.1.1
log
@Import perl-5.18.2

OK espie@@ sthen@@ deraadt@@
@
text
@@


1.1.1.2
log
@Import perl-5.24.2
@
text
@d1 2
a2 2
# The encoding detection heuristic will choose UTF8 or CP1252.  The current
# implementation will usually treat CP1252 (aka "Win-Latin-1") as CP1252 but
d4 7
d21 1
a21 10
BEGIN {
    if ($] lt 5.007_003) {
        plan tests => 5, todo => [4, 5];   # Need utf8::decode() to pass #5
                                           # and isn't available in this
                                           # release
    }
    else {
        plan tests => 5, todo => [4];
    }
}
d29 1
a29 1
# Initial, isolated, non-ASCII byte triggers CP1252 guess and later
d32 1
a32 15
my $x97;
my $x91;
my $dash;
if ($] ge 5.007_003) {
    $x97 = chr utf8::unicode_to_native(0x97);
    $x91 = chr utf8::unicode_to_native(0x91);
    $dash = '&#8212';
}
else {  # Tests will fail for early EBCDICs
    $x97 = chr 0x97;
    $x91 = chr 0x91;
    $dash = '--';
}

my @@output_lines = split m/[\r\n]+/, Pod::Simple::XMLOutStream->_out( qq{
d36 1
a36 1
Em::Dash $x97 ${x91}CAF\xC9\x92
d44 2
a45 2
  if( $guess eq 'CP1252' ) {
    if( grep m{Dash $dash}, @@output_lines ) {
d49 1
a49 1
      print STDERR "# failed to find expected control character in output\n"
d53 1
a53 1
    print STDERR "# parser guessed wrong encoding expected 'CP1252' got '$guess'\n";
d57 1
a57 1
  print STDERR "# parser failed to detect non-ASCII bytes in input\n";
d61 1
a61 1
# Initial smart-quote character triggers CP1252 guess as expected
d63 1
a63 1
@@output_lines = split m/[\r\n]+/, Pod::Simple::XMLOutStream->_out( qq{
d67 1
a67 1
Smart::Quote - ${x91}FUT\xC9\x92
d73 11
a83 16
if (ord("A") != 65) { # ASCII-platform dependent test skipped on this platform
    ok (1);
}
else {
    ($guess) = "@@output_lines" =~ m{Non-ASCII.*?Assuming ([\w-]+)};
    if( $guess ) {
        if( $guess eq 'CP1252' ) {
            ok 1;
        } else {
            ok 0;
            print STDERR "# parser guessed wrong encoding expected 'CP1252' got '$guess'\n";
        }
    } else {
        ok 0;
        print STDERR "# parser failed to detect non-ASCII bytes in input\n";
    }
d88 1
a88 1
# to choose UTF8 (a somewhat contrived example)
d90 1
a90 1
@@output_lines = split m/[\r\n]+/, Pod::Simple::XMLOutStream->_out( qq{
d94 1
a94 1
=head2 JOS\xC9\x92S PLACE
d100 11
a110 16
if (ord("A") != 65) { # ASCII-platform dependent test skipped on this platform
    ok (1);
}
else {
    ($guess) = "@@output_lines" =~ m{Non-ASCII.*?Assuming ([\w-]+)};
    if( $guess ) {
        if( $guess eq 'CP1252' ) {
            ok 1;
        } else {
            ok 0;
            print STDERR "# parser guessed wrong encoding expected 'CP1252' got '$guess'\n";
        }
    } else {
        ok 0;
        print STDERR "# parser failed to detect non-ASCII bytes in input\n";
    }
d115 3
a117 2
# valid UTF8 byte sequence.  In this example we use an illegal UTF-8 sequence
# (it needs a third byte), so must be 1252
d119 1
a119 1
@@output_lines = split m/[\r\n]+/, Pod::Simple::XMLOutStream->_out( qq{
d129 11
a139 16
if (ord("A") != 65) { # ASCII-platform dependent test skipped on this platform
    ok (1);
}
else {
    ($guess) = "@@output_lines" =~ m{Non-ASCII.*?Assuming ([\w-]+)};
    if( $guess ) {
        if( $guess eq 'CP1252' ) {
            ok 1;
        } else {
            ok 0;
            print STDERR "# parser guessed wrong encoding expected 'CP1252' got '$guess'\n";
        }
    } else {
        ok 0;
        print STDERR "# parser failed to detect non-ASCII bytes in input\n";
    }
@

