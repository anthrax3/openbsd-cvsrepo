head	1.1;
branch	1.1.1;
access;
symbols
	OPENBSD_6_1:1.1.1.2.0.14
	OPENBSD_6_1_BASE:1.1.1.2
	OPENBSD_6_0:1.1.1.2.0.16
	OPENBSD_6_0_BASE:1.1.1.2
	OPENBSD_5_9:1.1.1.2.0.10
	OPENBSD_5_9_BASE:1.1.1.2
	OPENBSD_5_8:1.1.1.2.0.12
	OPENBSD_5_8_BASE:1.1.1.2
	PERL_5_20_2:1.1.1.2
	OPENBSD_5_7:1.1.1.2.0.4
	OPENBSD_5_7_BASE:1.1.1.2
	PERL_5_20_1:1.1.1.2
	OPENBSD_5_6:1.1.1.2.0.8
	OPENBSD_5_6_BASE:1.1.1.2
	PERL_5_18_2:1.1.1.2
	PERL:1.1.1
	OPENBSD_5_5:1.1.1.2.0.6
	OPENBSD_5_5_BASE:1.1.1.2
	OPENBSD_5_4:1.1.1.2.0.2
	OPENBSD_5_4_BASE:1.1.1.2
	PERL_5_16_3:1.1.1.2
	OPENBSD_5_3:1.1.1.1.0.10
	OPENBSD_5_3_BASE:1.1.1.1
	OPENBSD_5_2:1.1.1.1.0.8
	OPENBSD_5_2_BASE:1.1.1.1
	OPENBSD_5_1_BASE:1.1.1.1
	OPENBSD_5_1:1.1.1.1.0.6
	OPENBSD_5_0:1.1.1.1.0.4
	OPENBSD_5_0_BASE:1.1.1.1
	OPENBSD_4_9:1.1.1.1.0.2
	OPENBSD_4_9_BASE:1.1.1.1
	PERL_5_12_2:1.1.1.1
	CPAN:1.1.1;
locks; strict;
comment	@# @;
expand	@o@;


1.1
date	2010.09.24.14.49.01;	author millert;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	2010.09.24.14.49.01;	author millert;	state Exp;
branches;
next	1.1.1.2;

1.1.1.2
date	2013.03.25.20.08.09;	author sthen;	state Exp;
branches;
next	;


desc
@@


1.1
log
@Initial revision
@
text
@#!/usr/bin/perl -w

# t/strip_verbatim_indent.t.t - check verabtim indent stripping feature

BEGIN {
    chdir 't' if -d 't';
}

use strict;
use lib '../lib';
use Test::More tests => 79;
#use Test::More 'no_plan';

use_ok('Pod::Simple::XHTML') or exit;
use_ok('Pod::Simple::XMLOutStream') or exit;

isa_ok my $parser = Pod::Simple::XHTML->new, 'Pod::Simple::XHTML';

ok $parser->strip_verbatim_indent(' '), 'Should be able to set striper to " "';
ok $parser->strip_verbatim_indent('    '), 'Should be able to set striper to "    "';
ok $parser->strip_verbatim_indent("t"), 'Should be able to set striper to "\\t"';
ok $parser->strip_verbatim_indent(sub { ' ' }), 'Should be able to set striper to coderef';

for my $spec (
    [
        "\n=pod\n\n foo bar baz\n",
        undef,
        qq{<Document><Verbatim\nxml:space="preserve"> foo bar baz</Verbatim></Document>},
        "<pre><code> foo bar baz</code></pre>\n\n",
        'undefined indent'
    ],
    [
        "\n=pod\n\n foo bar baz\n",
        ' ',
        qq{<Document><Verbatim\nxml:space="preserve">foo bar baz</Verbatim></Document>},
        "<pre><code>foo bar baz</code></pre>\n\n",
        'single space indent'
    ],
    [
        "\n=pod\n\n foo bar baz\n",
        '  ',
        qq{<Document><Verbatim\nxml:space="preserve"> foo bar baz</Verbatim></Document>},
        "<pre><code> foo bar baz</code></pre>\n\n",
        'too large indent'
    ],
    [
        "\n=pod\n\n  foo bar baz\n",
        '  ',
        qq{<Document><Verbatim\nxml:space="preserve">foo bar baz</Verbatim></Document>},
        "<pre><code>foo bar baz</code></pre>\n\n",
        'double space indent'
    ],
    [
        "\n=pod\n\n  foo bar baz\n",
        sub { '  ' },
        qq{<Document><Verbatim\nxml:space="preserve">foo bar baz</Verbatim></Document>},
        "<pre><code>foo bar baz</code></pre>\n\n",
        'code ref stripper'
    ],
    [
        "\n=pod\n\n foo bar\n\n baz blez\n",
        ' ',
        qq{<Document><Verbatim\nxml:space="preserve">foo bar\n\nbaz blez</Verbatim></Document>},
        "<pre><code>foo bar\n\nbaz blez</code></pre>\n\n",
        'single space indent and empty line'
    ],
    [
        "\n=pod\n\n foo bar\n\n baz blez\n",
        sub { ' ' },
        qq{<Document><Verbatim\nxml:space="preserve">foo bar\n\nbaz blez</Verbatim></Document>},
        "<pre><code>foo bar\n\nbaz blez</code></pre>\n\n",
        'code ref indent and empty line'
    ],
    [
        "\n=pod\n\n foo bar\n\n baz blez\n",
        sub { (my $s = shift->[0]) =~ s/\S.*//; $s },
        qq{<Document><Verbatim\nxml:space="preserve">foo bar\n\nbaz blez</Verbatim></Document>},
        "<pre><code>foo bar\n\nbaz blez</code></pre>\n\n",
        'heuristic code ref indent'
    ],
    [
        "\n=pod\n\n foo bar\n   baz blez\n",
        sub { s/^\s+// for @@{ $_[0] } },
        qq{<Document><Verbatim\nxml:space="preserve">foo bar\nbaz blez</Verbatim></Document>},
        "<pre><code>foo bar\nbaz blez</code></pre>\n\n",
        'militant code ref'
    ],
) {
    my ($pod, $indent, $xml, $xhtml, $desc) = @@$spec;
    # Test XML output.
    ok my $p = Pod::Simple::XMLOutStream->new, "Construct XML parser to test $desc";
    $p->hide_line_numbers(1);
    my $output = '';
    $p->output_string( \$output );
    is $indent, $p->strip_verbatim_indent($indent),
        'Set stripper for XML to ' . (defined $indent ? qq{"$indent"} : 'undef');
    ok $p->parse_string_document( $pod ), "Parse POD to XML for $desc";
    is $output, $xml, "Should have expected XML output for $desc";


    # Test XHTML output.
    ok $p = Pod::Simple::XHTML->new, "Construct XHMTL parser to test $desc";
    $p->html_header('');
    $p->html_footer('');
    $output = '';
    $p->output_string( \$output );
    is $indent, $p->strip_verbatim_indent($indent),
        'Set stripper for XHTML to ' . (defined $indent ? qq{"$indent"} : 'undef');
    ok $p->parse_string_document( $pod ), "Parse POD to XHTML for $desc";
    is $output, $xhtml, "Should have expected XHTML output for $desc";
}
@


1.1.1.1
log
@Perl 5.12.2 from CPAN
@
text
@@


1.1.1.2
log
@import perl 5.16.3 from CPAN - worked on by Andrew Fresh and myself
@
text
@d3 1
a3 1
# t/strip_verbatim_indent.t.t - check verbatim indent stripping feature
d11 1
a11 1
use Test::More tests => 87;
a86 7
    ],
    [
        "\n=pod\n\n foo (bar\n   baz blez\n",
        sub { (my $i = $_[0]->[0]) =~ s/S.*//; $i },
        qq{<Document><Verbatim\nxml:space="preserve">\n   baz blez</Verbatim></Document>},
        "<pre><code>\n   baz blez</code></pre>\n\n",
        'code ref and paren'
@

