head	1.2;
access;
symbols
	OPENBSD_6_1_BASE:1.2
	OPENBSD_6_0:1.1.1.2.0.16
	OPENBSD_6_0_BASE:1.1.1.2
	OPENBSD_5_9:1.1.1.2.0.10
	OPENBSD_5_9_BASE:1.1.1.2
	OPENBSD_5_8:1.1.1.2.0.12
	OPENBSD_5_8_BASE:1.1.1.2
	PERL_5_20_2:1.1.1.2
	OPENBSD_5_7:1.1.1.2.0.4
	OPENBSD_5_7_BASE:1.1.1.2
	PERL_5_20_1:1.1.1.2
	OPENBSD_5_6:1.1.1.2.0.8
	OPENBSD_5_6_BASE:1.1.1.2
	PERL_5_18_2:1.1.1.2
	PERL:1.1.1
	OPENBSD_5_5:1.1.1.2.0.6
	OPENBSD_5_5_BASE:1.1.1.2
	OPENBSD_5_4:1.1.1.2.0.2
	OPENBSD_5_4_BASE:1.1.1.2
	PERL_5_16_3:1.1.1.2
	OPENBSD_5_3:1.1.1.1.0.10
	OPENBSD_5_3_BASE:1.1.1.1
	OPENBSD_5_2:1.1.1.1.0.8
	OPENBSD_5_2_BASE:1.1.1.1
	OPENBSD_5_1_BASE:1.1.1.1
	OPENBSD_5_1:1.1.1.1.0.6
	OPENBSD_5_0:1.1.1.1.0.4
	OPENBSD_5_0_BASE:1.1.1.1
	OPENBSD_4_9:1.1.1.1.0.2
	OPENBSD_4_9_BASE:1.1.1.1
	PERL_5_12_2:1.1.1.1
	CPAN:1.1.1;
locks; strict;
comment	@# @;
expand	@o@;


1.2
date	2017.02.05.00.32.03;	author afresh1;	state Exp;
branches;
next	1.1;
commitid	cxJ08BvJA9Pt2PTM;

1.1
date	2010.09.24.14.49.01;	author millert;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	2010.09.24.14.49.01;	author millert;	state Exp;
branches;
next	1.1.1.2;

1.1.1.2
date	2013.03.25.20.08.09;	author sthen;	state Exp;
branches;
next	;


desc
@@


1.2
log
@Fix merge issues, remove excess files - match perl-5.24.1 dist
@
text
@BEGIN {
    if( $ENV{PERL_CORE} ) {
        chdir 't';
        use File::Spec;
        @@INC = (File::Spec->rel2abs('../lib') );
    }
}
use strict;

#sub Pod::Simple::Search::DEBUG () {5};

use Pod::Simple::Search;
use Test::More;
BEGIN { plan 'no_plan' }

# print "#  Test the scanning of the whole of \@@INC ...\n";

my $x = Pod::Simple::Search->new;
die "Couldn't make an object!?" unless ok defined $x;
ok $x->inc; # make sure inc=1 is the default
# print $x->_state_as_string;
#$x->verbose(12);

use Pod::Simple;
*pretty = \&Pod::Simple::BlackBox::pretty;

my $found = 0;
$x->callback(sub {
  # print "#  ", join("  ", map "{$_}", @@_), "\n";
  ++$found;
  return;
});

# print "# \@@INC == @@INC\n";

my $t = time();   my($name2where, $where2name) = $x->survey();
$t = time() - $t;
ok $found;

# print "# Found $found items in $t seconds!\n# See...\n";

# my $p = pretty( $where2name, $name2where )."\n";
# $p =~ s/, +/,\n/g;
# $p =~ s/^/#  /mg;
# print $p;

# print "# OK, making sure strict and strict.pm were in there...\n";
# print "# (On Debian-based distributions Pod is stripped from\n",
#       "# strict.pm, so skip these tests.)\n";
my $nopod = not exists ($name2where->{'strict'});
SKIP: {
  skip 'No Pod for strict.pm', 3 if $nopod;
  like $name2where->{'strict'}, '/strict\.(pod|pm)$/';
  ok grep( m/strict\.(pod|pm)/, keys %$where2name);

  ok my $strictpath = $name2where->{'strict'}, 'Should have strict path';
  my @@x = ($x->find('strict')||'(nil)', $strictpath);
#  print "# Comparing \"$x[0]\" to \"$x[1]\"\n";
  for(@@x) { s{[/\\]}{/}g; }
#  print "#        => \"$x[0]\" to \"$x[1]\"\n";
  is $x[0], $x[1], " find('strict') should match survey's name2where{strict}";
}

# print "# Test again on a module we know is present, in case the
# strict.pm tests were skipped...\n";

# Search for all files in $name2where.
while (my ($testmod, $testpath) = each %{ $name2where }) {
  unless ( $testmod ) {
    fail;  # no 'thatpath/<name>.pm' means can't test find()
    next;
  }
  my @@x = ($x->find($testmod)||'(nil)', $testpath);
  # print "# Comparing \"$x[0]\" to \"$x[1]\"\n";
  # print "#        => \"$x[0]\" to \"$x[1]\"\n";
  is(
      File::Spec->rel2abs($x[0]),
      $x[1],
      " find('$testmod') should match survey's name2where{$testmod}"
  );
}

pass;
# print "# Byebye from ", __FILE__, "\n";
# print "# @@INC\n";
__END__

@


1.1
log
@Initial revision
@
text
@d13 2
a14 2
use Test;
BEGIN { plan tests => 8 }
d16 1
a16 1
print "#  Test the scanning of the whole of \@@INC ...\n";
d21 1
a21 1
print $x->_state_as_string;
d29 1
a29 1
  print "#  ", join("  ", map "{$_}", @@_), "\n";
d34 1
a34 1
print "# \@@INC == @@INC\n";
d40 1
a40 1
print "# Found $found items in $t seconds!\n# See...\n";
d42 8
a49 8
my $p = pretty( $where2name, $name2where )."\n";
$p =~ s/, +/,\n/g;
$p =~ s/^/#  /mg;
print $p;

print "# OK, making sure strict and strict.pm were in there...\n";
print "# (On Debian-based distributions Pod is stripped from\n",
      "# strict.pm, so skip these tests.)\n";
d51 4
a54 1
skip($nopod, ($name2where->{'strict'} || 'huh???'), '/strict\.(pod|pm)$/');
d56 1
a56 4
skip($nopod, grep( m/strict\.(pod|pm)/, keys %$where2name ));

my  $strictpath = $name2where->{'strict'};
if( $strictpath ) {
d58 1
a58 1
  print "# Comparing \"$x[0]\" to \"$x[1]\"\n";
d60 2
a61 6
  print "#        => \"$x[0]\" to \"$x[1]\"\n";
  ok $x[0], $x[1], " find('strict') should match survey's name2where{strict}";
} elsif ($nopod) {
  skip "skipping find() for strict.pm"; # skipping find() for 'thatpath/strict.pm
} else {
  ok 0;  # an entry without a defined path means can't test find()
d64 2
a65 2
print "# Test again on a module we know is present, in case the
strict.pm tests were skipped...\n";
d67 6
a72 5
# Grab the first item in $name2where, since it doesn't matter which we
# use.
my $testmod = (keys %$name2where)[0];
my  $testpath = $name2where->{$testmod};
if( $testmod ) {
d74 7
a80 9
  print "# Comparing \"$x[0]\" to \"$x[1]\"\n";
  for(@@x) { s{[/\\]}{/}g; }
  print "#        => \"$x[0]\" to \"$x[1]\"\n";
  skip $^O eq 'VMS' ? '-- case may or may not be preserved' : 0,
       $x[0], 
       $x[1], 
       " find('$testmod') should match survey's name2where{$testmod}";
} else {
  ok 0;  # no 'thatpath/<name>.pm' means can't test find()
d83 3
a85 3
ok 1;
print "# Byebye from ", __FILE__, "\n";
print "# @@INC\n";
@


1.1.1.1
log
@Perl 5.12.2 from CPAN
@
text
@@


1.1.1.2
log
@import perl 5.16.3 from CPAN - worked on by Andrew Fresh and myself
@
text
@a78 3
  # If it finds a .pod, it's probably correct, as that's where the docs are.
  # Change it to .pm so that it matches.
  $x[0] =~ s{[.]pod$}{.pm} if $x[1] =~ m{[.]pm$};
d80 3
a82 3
  ok
       lc $x[0], 
       lc $x[1], 
@

