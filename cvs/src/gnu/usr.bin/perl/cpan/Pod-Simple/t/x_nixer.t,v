head	1.1;
branch	1.1.1;
access;
symbols
	OPENBSD_6_1:1.1.1.3.0.10
	OPENBSD_6_1_BASE:1.1.1.3
	OPENBSD_6_0:1.1.1.3.0.12
	OPENBSD_6_0_BASE:1.1.1.3
	OPENBSD_5_9:1.1.1.3.0.6
	OPENBSD_5_9_BASE:1.1.1.3
	OPENBSD_5_8:1.1.1.3.0.8
	OPENBSD_5_8_BASE:1.1.1.3
	PERL_5_20_2:1.1.1.3
	OPENBSD_5_7:1.1.1.3.0.2
	OPENBSD_5_7_BASE:1.1.1.3
	PERL_5_20_1:1.1.1.3
	OPENBSD_5_6:1.1.1.3.0.4
	OPENBSD_5_6_BASE:1.1.1.3
	PERL_5_18_2:1.1.1.3
	PERL:1.1.1
	OPENBSD_5_5:1.1.1.2.0.6
	OPENBSD_5_5_BASE:1.1.1.2
	OPENBSD_5_4:1.1.1.2.0.2
	OPENBSD_5_4_BASE:1.1.1.2
	PERL_5_16_3:1.1.1.2
	OPENBSD_5_3:1.1.1.1.0.10
	OPENBSD_5_3_BASE:1.1.1.1
	OPENBSD_5_2:1.1.1.1.0.8
	OPENBSD_5_2_BASE:1.1.1.1
	OPENBSD_5_1_BASE:1.1.1.1
	OPENBSD_5_1:1.1.1.1.0.6
	OPENBSD_5_0:1.1.1.1.0.4
	OPENBSD_5_0_BASE:1.1.1.1
	OPENBSD_4_9:1.1.1.1.0.2
	OPENBSD_4_9_BASE:1.1.1.1
	PERL_5_12_2:1.1.1.1
	CPAN:1.1.1;
locks; strict;
comment	@# @;
expand	@o@;


1.1
date	2010.09.24.14.49.01;	author millert;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	2010.09.24.14.49.01;	author millert;	state Exp;
branches;
next	1.1.1.2;

1.1.1.2
date	2013.03.25.20.08.09;	author sthen;	state Exp;
branches;
next	1.1.1.3;

1.1.1.3
date	2014.03.24.14.58.56;	author afresh1;	state Exp;
branches;
next	;


desc
@@


1.1
log
@Initial revision
@
text
@

use strict;
use Test;
BEGIN { plan tests => 11 };

my $d;
#use Pod::Simple::Debug (\$d, 0);

ok 1;

use Pod::Simple::XMLOutStream;
use Pod::Simple::DumpAsXML;


$Pod::Simple::XMLOutStream::ATTR_PAD   = ' ';
$Pod::Simple::XMLOutStream::SORT_ATTRS = 1; # for predictably testable output


print "# A simple sanity test...\n";
ok( Pod::Simple::XMLOutStream->_out("=pod\n\nZ<>F<C<Z<>fE<111>o> I<bar>> B<stuff X<thingZ<>>baz>\n"),
 '<Document><Para><F><C>foo</C> <I>bar</I></F> <B>stuff <X>thing</X>baz</B></Para></Document>'
);

print "# With lots of nesting, and Z's...\n";
ok( Pod::Simple::XMLOutStream->_out("=pod\n\nZ<>F<C<Z<>fE<111>o> I<bar>> B<stuff X<thingZ<>>baz>\n"),
 '<Document><Para><F><C>foo</C> <I>bar</I></F> <B>stuff <X>thing</X>baz</B></Para></Document>'
);

#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

sub mergy {$_[0]->merge_text(1)}
sub nixy  {$_[0]->nix_X_codes(1)}
sub nixy_mergy {$_[0]->merge_text(1); $_[0]->nix_X_codes(1);}

#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

print "# With no F/X\n";

ok( Pod::Simple::DumpAsXML->_out( "=pod\n\nZ<>F<C<Z<>fE<111>o> I<bar>> B<stuff X<thingZ<>>baz>\n"),
  join "\n",

  '<Document>',
  '  <Para>',
  '    <F>',
  '      <C>',
  '        f',
  '        o',
  '        o',
  '      </C>',
  '       ',
  '      <I>',
  '        bar',
  '      </I>',
  '    </F>',
  '     ',
  '    <B>',
  '      stuff ',
  '      <X>',
  '        thing',
  '      </X>',
  '      baz',
  '    </B>',
  '  </Para>',
  '</Document>',
  '',
);

#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

print "#  with just X-nixing...\n";

ok( Pod::Simple::DumpAsXML->_out( \&nixy, "=pod\n\nZ<>F<C<Z<>fE<111>o> I<bar>> B<stuff X<thingZ<>>baz>\n"),
  join "\n",

  '<Document>',
  '  <Para>',
  '    <F>',
  '      <C>',
  '        f',
  '        o',
  '        o',
  '      </C>',
  '       ',
  '      <I>',
  '        bar',
  '      </I>',
  '    </F>',
  '     ',
  '    <B>',
  '      stuff ',
  '      baz',
  '    </B>',
  '  </Para>',
  '</Document>',
  '',
);

#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

print "# With merging...\n";

ok( Pod::Simple::DumpAsXML->_out( \&mergy, "=pod\n\nZ<>F<C<Z<>fE<111>o> I<bar>> B<stuff X<thingZ<>>baz>\n"),
  join "\n",

  '<Document>',
  '  <Para>',
  '    <F>',
  '      <C>',
  '        foo',
  '      </C>',
  '       ',
  '      <I>',
  '        bar',
  '      </I>',
  '    </F>',
  '     ',
  '    <B>',
  '      stuff ',
  '      <X>',
  '        thing',
  '      </X>',
  '      baz',
  '    </B>',
  '  </Para>',
  '</Document>',
  '',
);

#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

print "# With nixing and merging...\n";
#$d = 10;
ok( Pod::Simple::DumpAsXML->_out( \&nixy_mergy, "=pod\n\nZ<>F<C<Z<>fE<111>o> I<bar>> B<stuff X<thingZ<>>baz>\n"),
  join "\n",

  '<Document>',
  '  <Para>',
  '    <F>',
  '      <C>',
  '        foo',
  '      </C>',
  '       ',
  '      <I>',
  '        bar',
  '      </I>',
  '    </F>',
  '     ',
  '    <B>',
  '      stuff baz',
  '    </B>',
  '  </Para>',
  '</Document>',
  '',
);

#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

# Now the scary bits... with L's!
print "# A wee L<...> sanity test...\n";
ok( Pod::Simple::XMLOutStream->_out(qq{=pod\n\nL<E<78>et::Ping/Ping-E<112>ong>\n}),
 '<Document><Para><L content-implicit="yes" section="Ping-pong" to="Net::Ping" type="pod">&#34;Ping-pong&#34; in Net::Ping</L></Para></Document>'
);
print "# Now a wee L<...> with mergy...\n";

$d = 10;

ok( Pod::Simple::DumpAsXML->_out(\&mergy, qq{=pod\n\nL<E<78>et::Ping/Ping-E<112>ong>\n}),
 join "\n",

 '<Document>',
 '  <Para>',
 '    <L content-implicit="yes" section="Ping-pong" to="Net::Ping" type="pod">',
 '      &#34;Ping-pong&#34; in Net::Ping',
 '    </L>',
 '  </Para>',
 '</Document>',
 ''
);


print "# Now a complex tree with L's, with nixy+mergy...\n";

ok( Pod::Simple::DumpAsXML->_out( \&nixy_mergy, "=pod\n\nZ<>F<C<Z<>fE<111>L<E<78>et::Ping/Ping-E<112>ong>o> I<bar>> B<stuff X<thingZ<>>baz>\n"),
  join "\n",

  '<Document>',
  '  <Para>',
  '    <F>',
  '      <C>',
  '        fo',
  '        <L content-implicit="yes" section="Ping-pong" to="Net::Ping" type="pod">',
  '          &#34;Ping-pong&#34; in Net::Ping',
  '        </L>',
  '        o',
  '      </C>',
  '       ',
  '      <I>',
  '        bar',
  '      </I>',
  '    </F>',
  '     ',
  '    <B>',
  '      stuff baz',
  '    </B>',
  '  </Para>',
  '</Document>',
  '',
);

#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~



print "# Wrapping up... one for the road...\n";
ok 1;
print "# --- Done with ", __FILE__, " --- \n";

@


1.1.1.1
log
@Perl 5.12.2 from CPAN
@
text
@@


1.1.1.2
log
@import perl 5.16.3 from CPAN - worked on by Andrew Fresh and myself
@
text
@d162 1
a162 1
 '<Document><Para><L content-implicit="yes" raw="E&#60;78&#62;et::Ping/Ping-E&#60;112&#62;ong" section="Ping-pong" to="Net::Ping" type="pod">&#34;Ping-pong&#34; in Net::Ping</L></Para></Document>'
d173 1
a173 1
 '    <L content-implicit="yes" raw="E&#60;78&#62;et::Ping/Ping-E&#60;112&#62;ong" section="Ping-pong" to="Net::Ping" type="pod">',
@


1.1.1.3
log
@Import perl-5.18.2

OK espie@@ sthen@@ deraadt@@
@
text
@d47 3
a49 1
  '        foo',
d51 1
a51 1
  '      ',
d56 1
a56 1
  '    ',
d80 3
a82 1
  '        foo',
d84 1
a84 1
  '      ',
d89 1
a89 1
  '    ',
d91 2
a92 1
  '      stuff baz',
d112 1
a112 1
  '      ',
d117 1
a117 1
  '    ',
d143 1
a143 1
  '      ',
d148 1
a148 1
  '    ',
d197 1
a197 1
  '      ',
d202 1
a202 1
  '    ',
@


