head	1.2;
access;
symbols
	OPENBSD_6_0:1.2.0.4
	OPENBSD_6_0_BASE:1.2
	OPENBSD_5_9:1.1.1.2.0.4
	OPENBSD_5_9_BASE:1.1.1.2
	OPENBSD_5_8:1.1.1.2.0.6
	OPENBSD_5_8_BASE:1.1.1.2
	PERL_5_20_2:1.1.1.2
	OPENBSD_5_7:1.1.1.2.0.2
	OPENBSD_5_7_BASE:1.1.1.2
	PERL_5_20_1:1.1.1.2
	OPENBSD_5_6:1.1.1.1.0.8
	OPENBSD_5_6_BASE:1.1.1.1
	PERL_5_18_2:1.1.1.1
	PERL:1.1.1
	OPENBSD_5_5:1.1.1.1.0.6
	OPENBSD_5_5_BASE:1.1.1.1
	OPENBSD_5_4:1.1.1.1.0.2
	OPENBSD_5_4_BASE:1.1.1.1
	PERL_5_16_3:1.1.1.1
	CPAN:1.1.1;
locks; strict;
comment	@# @;
expand	@o@;


1.2
date	2016.06.30.21.16.13;	author afresh1;	state Exp;
branches;
next	1.1;
commitid	K69zB3dG4qHAmoQ0;

1.1
date	2013.03.25.20.08.19;	author sthen;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	2013.03.25.20.08.19;	author sthen;	state Exp;
branches;
next	1.1.1.2;

1.1.1.2
date	2014.11.17.20.53.00;	author afresh1;	state Exp;
branches;
next	;
commitid	B31cAbBIXiCqnL97;


desc
@@


1.2
log
@Update perl Time::HiRes to 1.9739

Which provides hires `utime`

requested by espie@@ OK millert@@
@
text
@use strict;

BEGIN {
    require Time::HiRes;
    unless(&Time::HiRes::d_hires_stat) {
	require Test::More;
	Test::More::plan(skip_all => "no hi-res stat");
    }
    if($^O =~ /\A(?:cygwin|MSWin)/) {
	require Test::More;
	Test::More::plan(skip_all =>
		"$^O file timestamps not reliable enough for stat test");
    }
}

use Test::More tests => 43;
use t::Watchdog;

my @@atime;
my @@mtime;
for (1..5) {
    Time::HiRes::sleep(rand(0.1) + 0.1);
    open(X, ">$$");
    print X $$;
    close(X);
    my($a, $stat, $b) = ("a", [Time::HiRes::stat($$)], "b");
    is $a, "a";
    is $b, "b";
    is ref($stat), "ARRAY";
    push @@mtime, $stat->[9];
    ($a, my $lstat, $b) = ("a", [Time::HiRes::lstat($$)], "b");
    is $a, "a";
    is $b, "b";
    is_deeply $lstat, $stat;
    Time::HiRes::sleep(rand(0.1) + 0.1);
    open(X, "<$$");
    <X>;
    close(X);
    $stat = [Time::HiRes::stat($$)];
    push @@atime, $stat->[8];
    $lstat = [Time::HiRes::lstat($$)];
    is_deeply $lstat, $stat;
}
1 while unlink $$;
print("# mtime = @@mtime\n");
print("# atime = @@atime\n");
my $ai = 0;
my $mi = 0;
my $ss = 0;
for (my $i = 1; $i < @@atime; $i++) {
    if ($atime[$i] >= $atime[$i-1]) {
	$ai++;
    }
    if ($atime[$i] > int($atime[$i])) {
	$ss++;
    }
}
for (my $i = 1; $i < @@mtime; $i++) {
    if ($mtime[$i] >= $mtime[$i-1]) {
	$mi++;
    }
    if ($mtime[$i] > int($mtime[$i])) {
	$ss++;
    }
}
print("# ai = $ai, mi = $mi, ss = $ss\n");
# Need at least 75% of monotonical increase and
# 20% of subsecond results. Yes, this is guessing.
SKIP: {
    skip "no subsecond timestamps detected", 1 if $ss == 0;
    ok $mi/(@@mtime-1) >= 0.75 && $ai/(@@atime-1) >= 0.75 &&
	     $ss/(@@mtime+@@atime) >= 0.2;
}

my $targetname = "tgt$$";
my $linkname = "link$$";
SKIP: {
    open(X, ">$targetname");
    print X $$;
    close(X);
    eval { symlink $targetname, $linkname or die "can't symlink: $!"; };
    skip "can't symlink", 7 if $@@ ne "";
    my @@tgt_stat = Time::HiRes::stat($targetname);
    my @@tgt_lstat = Time::HiRes::lstat($targetname);
    my @@lnk_stat = Time::HiRes::stat($linkname);
    my @@lnk_lstat = Time::HiRes::lstat($linkname);
    is scalar(@@tgt_stat), 13;
    is scalar(@@tgt_lstat), 13;
    is scalar(@@lnk_stat), 13;
    is scalar(@@lnk_lstat), 13;
    is_deeply \@@tgt_stat, \@@tgt_lstat;
    is_deeply \@@tgt_stat, \@@lnk_stat;
    isnt $lnk_lstat[2], $tgt_stat[2];
}
1 while unlink $linkname;
1 while unlink $targetname;

1;
@


1.1
log
@Initial revision
@
text
@d16 1
a16 1
use Test::More 0.82 tests => 16;
a18 2
my $limit = 0.25; # 25% is acceptable slosh for testing timers

d31 4
d41 2
d45 2
a46 2
note "mtime = @@mtime";
note "atime = @@atime";
d66 1
a66 1
note "ai = $ai, mi = $mi, ss = $ss";
d74 23
@


1.1.1.1
log
@import perl 5.16.3 from CPAN - worked on by Andrew Fresh and myself
@
text
@@


1.1.1.2
log
@Import perl-5.20.1
@
text
@d16 1
a16 1
use Test::More 0.82 tests => 43;
a32 4
    ($a, my $lstat, $b) = ("a", [Time::HiRes::lstat($$)], "b");
    is $a, "a";
    is $b, "b";
    is_deeply $lstat, $stat;
a38 2
    $lstat = [Time::HiRes::lstat($$)];
    is_deeply $lstat, $stat;
a69 23

my $targetname = "tgt$$";
my $linkname = "link$$";
SKIP: {
    open(X, ">$targetname");
    print X $$;
    close(X);
    eval { symlink $targetname, $linkname or die "can't symlink: $!"; };
    skip "can't symlink", 7 if $@@ ne "";
    my @@tgt_stat = Time::HiRes::stat($targetname);
    my @@tgt_lstat = Time::HiRes::lstat($targetname);
    my @@lnk_stat = Time::HiRes::stat($linkname);
    my @@lnk_lstat = Time::HiRes::lstat($linkname);
    is scalar(@@tgt_stat), 13;
    is scalar(@@tgt_lstat), 13;
    is scalar(@@lnk_stat), 13;
    is scalar(@@lnk_lstat), 13;
    is_deeply \@@tgt_stat, \@@tgt_lstat;
    is_deeply \@@tgt_stat, \@@lnk_stat;
    isnt $lnk_lstat[2], $tgt_stat[2];
}
1 while unlink $linkname;
1 while unlink $targetname;
@

