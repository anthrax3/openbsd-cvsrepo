head	1.2;
access;
symbols
	PERL_5_24_2:1.1.1.2
	OPENBSD_6_1:1.2.0.24
	OPENBSD_6_1_BASE:1.2
	OPENBSD_6_0:1.2.0.22
	OPENBSD_6_0_BASE:1.2
	OPENBSD_5_9:1.2.0.16
	OPENBSD_5_9_BASE:1.2
	OPENBSD_5_8:1.2.0.18
	OPENBSD_5_8_BASE:1.2
	PERL_5_20_2:1.1.1.2
	OPENBSD_5_7:1.2.0.10
	OPENBSD_5_7_BASE:1.2
	PERL_5_20_1:1.1.1.2
	OPENBSD_5_6:1.2.0.14
	OPENBSD_5_6_BASE:1.2
	PERL_5_18_2:1.1.1.2
	PERL:1.1.1
	OPENBSD_5_5:1.2.0.12
	OPENBSD_5_5_BASE:1.2
	OPENBSD_5_4:1.2.0.8
	OPENBSD_5_4_BASE:1.2
	PERL_5_16_3:1.1.1.2
	OPENBSD_5_3:1.2.0.6
	OPENBSD_5_3_BASE:1.2
	OPENBSD_5_2:1.2.0.4
	OPENBSD_5_2_BASE:1.2
	OPENBSD_5_1_BASE:1.2
	OPENBSD_5_1:1.2.0.2
	OPENBSD_5_0:1.1.1.1.0.4
	OPENBSD_5_0_BASE:1.1.1.1
	OPENBSD_4_9:1.1.1.1.0.2
	OPENBSD_4_9_BASE:1.1.1.1
	PERL_5_12_2:1.1.1.1
	CPAN:1.1.1;
locks; strict;
comment	@# @;
expand	@o@;


1.2
date	2011.10.11.18.13.35;	author rpointel;	state Exp;
branches;
next	1.1;

1.1
date	2010.09.24.14.49.03;	author millert;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	2010.09.24.14.49.03;	author millert;	state Exp;
branches;
next	1.1.1.2;

1.1.1.2
date	2013.03.25.20.07.01;	author sthen;	state Exp;
branches;
next	;


desc
@@


1.2
log
@Update Digest module to 1.17 (security fix).
Thanks Emeric Boit for reporting me this.
ok millert@@ espie@@
@
text
@#!perl -w

use Test::More tests => 12;

{
   package LenDigest;
   require Digest::base;
   use vars qw(@@ISA);
   @@ISA = qw(Digest::base);

   sub new {
	my $class = shift;
	my $str = "";
	bless \$str, $class;
   }

   sub add {
	my $self = shift;
	$$self .= join("", @@_);
	return $self;
   }

   sub digest {
	my $self = shift;
	my $len = length($$self);
	my $first = ($len > 0) ? substr($$self, 0, 1) : "X";
	$$self = "";
	return sprintf "$first%04d", $len;
   }
}

my $ctx = LenDigest->new;
is($ctx->digest, "X0000");

my $EBCDIC = ord('A') == 193;

if ($EBCDIC) {
    is($ctx->hexdigest, "e7f0f0f0f0");
    is($ctx->b64digest, "5/Dw8PA");
} else {
    is($ctx->hexdigest, "5830303030");
    is($ctx->b64digest, "WDAwMDA");
}

$ctx->add("foo");
is($ctx->digest, "f0003");

$ctx->add("foo");
is($ctx->hexdigest, $EBCDIC ? "86f0f0f0f3" : "6630303033");

$ctx->add("foo");
is($ctx->b64digest, $EBCDIC ? "hvDw8PM" : "ZjAwMDM");

open(F, ">xxtest$$") || die;
binmode(F);
print F "abc" x 100, "\n";
close(F) || die;

open(F, "xxtest$$") || die;
$ctx->addfile(*F);
close(F);
unlink("xxtest$$") || warn;

is($ctx->digest, "a0301");

eval {
    $ctx->add_bits("1010");
};
like($@@, '/^Number of bits must be multiple of 8/');

$ctx->add_bits($EBCDIC ? "11100100" : "01010101");
is($ctx->digest, "U0001");

eval {
    $ctx->add_bits("abc", 12);
};
like($@@, '/^Number of bits must be multiple of 8/');

$ctx->add_bits("abc", 16);
is($ctx->digest, "a0002");

$ctx->add_bits("abc", 32);
is($ctx->digest, "a0003");
@


1.1
log
@Initial revision
@
text
@d3 1
a3 2
use Test qw(plan ok);
plan tests => 12;
d33 1
a33 1
ok($ctx->digest, "X0000");
d38 2
a39 2
    ok($ctx->hexdigest, "e7f0f0f0f0");
    ok($ctx->b64digest, "5/Dw8PA");
d41 2
a42 2
    ok($ctx->hexdigest, "5830303030");
    ok($ctx->b64digest, "WDAwMDA");
d46 1
a46 1
ok($ctx->digest, "f0003");
d49 1
a49 1
ok($ctx->hexdigest, $EBCDIC ? "86f0f0f0f3" : "6630303033");
d52 1
a52 1
ok($ctx->b64digest, $EBCDIC ? "hvDw8PM" : "ZjAwMDM");
d64 1
a64 1
ok($ctx->digest, "a0301");
d69 1
a69 1
ok($@@ =~ /^Number of bits must be multiple of 8/);
d72 1
a72 1
ok($ctx->digest, "U0001");
d77 1
a77 1
ok($@@ =~ /^Number of bits must be multiple of 8/);
d80 1
a80 1
ok($ctx->digest, "a0002");
d83 1
a83 1
ok($ctx->digest, "a0003");
@


1.1.1.1
log
@Perl 5.12.2 from CPAN
@
text
@@


1.1.1.2
log
@import perl 5.16.3 from CPAN - worked on by Andrew Fresh and myself
@
text
@d3 2
a4 1
use Test::More tests => 12;
d34 1
a34 1
is($ctx->digest, "X0000");
d39 2
a40 2
    is($ctx->hexdigest, "e7f0f0f0f0");
    is($ctx->b64digest, "5/Dw8PA");
d42 2
a43 2
    is($ctx->hexdigest, "5830303030");
    is($ctx->b64digest, "WDAwMDA");
d47 1
a47 1
is($ctx->digest, "f0003");
d50 1
a50 1
is($ctx->hexdigest, $EBCDIC ? "86f0f0f0f3" : "6630303033");
d53 1
a53 1
is($ctx->b64digest, $EBCDIC ? "hvDw8PM" : "ZjAwMDM");
d65 1
a65 1
is($ctx->digest, "a0301");
d70 1
a70 1
like($@@, '/^Number of bits must be multiple of 8/');
d73 1
a73 1
is($ctx->digest, "U0001");
d78 1
a78 1
like($@@, '/^Number of bits must be multiple of 8/');
d81 1
a81 1
is($ctx->digest, "a0002");
d84 1
a84 1
is($ctx->digest, "a0003");
@

