head	1.2;
access;
symbols
	OPENBSD_6_1:1.2.0.20
	OPENBSD_6_1_BASE:1.2
	OPENBSD_6_0:1.2.0.22
	OPENBSD_6_0_BASE:1.2
	OPENBSD_5_9:1.2.0.16
	OPENBSD_5_9_BASE:1.2
	OPENBSD_5_8:1.2.0.18
	OPENBSD_5_8_BASE:1.2
	PERL_5_20_2:1.1.1.2
	OPENBSD_5_7:1.2.0.10
	OPENBSD_5_7_BASE:1.2
	PERL_5_20_1:1.1.1.2
	OPENBSD_5_6:1.2.0.14
	OPENBSD_5_6_BASE:1.2
	PERL_5_18_2:1.1.1.2
	PERL:1.1.1
	OPENBSD_5_5:1.2.0.12
	OPENBSD_5_5_BASE:1.2
	OPENBSD_5_4:1.2.0.8
	OPENBSD_5_4_BASE:1.2
	PERL_5_16_3:1.1.1.2
	OPENBSD_5_3:1.2.0.6
	OPENBSD_5_3_BASE:1.2
	OPENBSD_5_2:1.2.0.4
	OPENBSD_5_2_BASE:1.2
	OPENBSD_5_1_BASE:1.2
	OPENBSD_5_1:1.2.0.2
	OPENBSD_5_0:1.1.1.1.0.4
	OPENBSD_5_0_BASE:1.1.1.1
	OPENBSD_4_9:1.1.1.1.0.2
	OPENBSD_4_9_BASE:1.1.1.1
	PERL_5_12_2:1.1.1.1
	CPAN:1.1.1;
locks; strict;
comment	@# @;
expand	@o@;


1.2
date	2011.10.11.18.13.35;	author rpointel;	state Exp;
branches;
next	1.1;

1.1
date	2010.09.24.14.49.03;	author millert;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	2010.09.24.14.49.03;	author millert;	state Exp;
branches;
next	1.1.1.2;

1.1.1.2
date	2013.03.25.20.07.01;	author sthen;	state Exp;
branches;
next	;


desc
@@


1.2
log
@Update Digest module to 1.17 (security fix).
Thanks Emeric Boit for reporting me this.
ok millert@@ espie@@
@
text
@#!perl -w

use Test::More tests => 5;

{
   package Digest::Foo;
   require Digest::base;
   use vars qw(@@ISA $VERSION);
   @@ISA = qw(Digest::base);

   sub new {
	my $class = shift;
	my $str = "";
	bless \$str, $class;
   }

   sub add {
	my $self = shift;
	$$self .= join("", @@_);
	return $self;
   }

   sub digest {
	my $self = shift;
	return sprintf "%04d", length($$self);
   }
}

use Digest::file qw(digest_file digest_file_hex digest_file_base64);

my $file = "test-$$";
die if -f $file;
open(F, ">$file") || die "Can't create '$file': $!";
binmode(F);
print F "foo\0\n";
close(F) || die "Can't write '$file': $!";

is(digest_file($file, "Foo"), "0005");

if (ord('A') == 193) { # EBCDIC.
    is(digest_file_hex($file, "Foo"), "f0f0f0f5");
    is(digest_file_base64($file, "Foo"), "8PDw9Q");
} else {
    is(digest_file_hex($file, "Foo"), "30303035");
    is(digest_file_base64($file, "Foo"), "MDAwNQ");
}

unlink($file) || warn "Can't unlink '$file': $!";

ok !eval { digest_file("not-there.txt", "Foo") };
ok $@@;
@


1.1
log
@Initial revision
@
text
@d3 1
a3 2
use Test qw(plan ok);
plan tests => 5;
d38 1
a38 1
ok(digest_file($file, "Foo"), "0005");
d41 2
a42 2
    ok(digest_file_hex($file, "Foo"), "f0f0f0f5");
    ok(digest_file_base64($file, "Foo"), "8PDw9Q");
d44 2
a45 2
    ok(digest_file_hex($file, "Foo"), "30303035");
    ok(digest_file_base64($file, "Foo"), "MDAwNQ");
d50 2
a51 2
ok(eval { digest_file("not-there.txt", "Foo") }, undef);
ok($@@);
@


1.1.1.1
log
@Perl 5.12.2 from CPAN
@
text
@@


1.1.1.2
log
@import perl 5.16.3 from CPAN - worked on by Andrew Fresh and myself
@
text
@d3 2
a4 1
use Test::More tests => 5;
d39 1
a39 1
is(digest_file($file, "Foo"), "0005");
d42 2
a43 2
    is(digest_file_hex($file, "Foo"), "f0f0f0f5");
    is(digest_file_base64($file, "Foo"), "8PDw9Q");
d45 2
a46 2
    is(digest_file_hex($file, "Foo"), "30303035");
    is(digest_file_base64($file, "Foo"), "MDAwNQ");
d51 2
a52 2
ok !eval { digest_file("not-there.txt", "Foo") };
ok $@@;
@

