head	1.2;
access;
symbols
	OPENBSD_6_0:1.1.1.2.0.12
	OPENBSD_6_0_BASE:1.1.1.2
	OPENBSD_5_9:1.1.1.2.0.6
	OPENBSD_5_9_BASE:1.1.1.2
	OPENBSD_5_8:1.1.1.2.0.8
	OPENBSD_5_8_BASE:1.1.1.2
	PERL_5_20_2:1.1.1.2
	OPENBSD_5_7:1.1.1.2.0.2
	OPENBSD_5_7_BASE:1.1.1.2
	PERL_5_20_1:1.1.1.2
	OPENBSD_5_6:1.1.1.2.0.4
	OPENBSD_5_6_BASE:1.1.1.2
	PERL_5_18_2:1.1.1.2
	PERL:1.1.1
	OPENBSD_5_5:1.1.1.1.0.6
	OPENBSD_5_5_BASE:1.1.1.1
	OPENBSD_5_4:1.1.1.1.0.2
	OPENBSD_5_4_BASE:1.1.1.1
	PERL_5_16_3:1.1.1.1
	CPAN:1.1.1;
locks; strict;
comment	@# @;
expand	@o@;


1.2
date	2017.02.05.00.32.03;	author afresh1;	state dead;
branches;
next	1.1;
commitid	cxJ08BvJA9Pt2PTM;

1.1
date	2013.03.25.20.08.13;	author sthen;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	2013.03.25.20.08.13;	author sthen;	state Exp;
branches;
next	1.1.1.2;

1.1.1.2
date	2014.03.24.14.58.57;	author afresh1;	state Exp;
branches;
next	;


desc
@@


1.2
log
@Fix merge issues, remove excess files - match perl-5.24.1 dist
@
text
@#!/usr/bin/perl -Tw
#
# t/stringify.t -- Test suite for stringify interaction.
#
# Copyright 2011 Revilo Reegiles
# Copyright 2011 Russ Allbery <rra@@stanford.edu>
#
# This program is free software; you may redistribute it and/or modify it
# under the same terms as Perl itself.

# Create a dummy class that implements stringification.
package Test::Stringify;
use overload '""' => 'stringify';
sub new { return bless {} }
sub stringify { return "Foo Bar\n" }
package main;

use strict;
use Test::More tests => 6;

BEGIN {
    delete $ENV{ANSI_COLORS_DISABLED};
    use_ok ('Term::ANSIColor',
            qw/:pushpop color colored uncolor colorstrip colorvalid/);
}

is (colored ([ 'blue', 'bold' ], 'testing'), "\e[34;1mtesting\e[0m",
    'colored with an array reference');
is (colored ("ok\n", 'bold blue'), "\e[1;34mok\n\e[0m",
    'colored with a following string');
my $test = Test::Stringify->new;
is (colored ($test . "", 'bold blue'), "\e[1;34mFoo Bar\n\e[0m",
    'colored with forced stringification');
is (colored ($test, 'bold blue'), "\e[1;34mFoo Bar\n\e[0m",
    'colored with a non-array reference');
my %foo = (foo => 'bar');
like (colored (\%foo, 'bold blue'), qr/\e\[1;34mHASH\(.*\)\e\[0m/,
      'colored with a hash reference');
@


1.1
log
@Initial revision
@
text
@@


1.1.1.1
log
@import perl 5.16.3 from CPAN - worked on by Andrew Fresh and myself
@
text
@@


1.1.1.2
log
@Import perl-5.18.2

OK espie@@ sthen@@ deraadt@@
@
text
@d1 1
a1 1
#!/usr/bin/perl
d3 1
a3 1
# Test suite for stringify interaction.
a10 5
use strict;
use warnings;

use Test::More tests => 6;

a11 1
## no critic (Modules::ProhibitMultiplePackages)
d14 1
a14 1
sub new { return bless {}, 'Test::Stringify' }
d16 1
d18 2
a19 2
# Back to the main package.
package main;
a20 1
# Load the module.
a21 1
    delete $ENV{ANSI_COLORS_ALIASES};
d23 2
a24 1
    use_ok('Term::ANSIColor', qw(colored));
d27 4
a30 7
# Some basic tests of colored without stringification.
my $result = colored(['blue', 'bold'], 'testing');
is($result, "\e[34;1mtesting\e[0m", 'colored with an array reference');
$result = colored("ok\n", 'bold blue');
is($result, "\e[1;34mok\n\e[0m", 'colored with a following string');

# Create a stringifiable object and repeat the tests.
d32 4
a35 6
$result = colored($test . q{}, 'bold blue');
is($result, "\e[1;34mFoo Bar\n\e[0m", 'colored with forced stringification');
$result = colored($test, 'bold blue');
is($result, "\e[1;34mFoo Bar\n\e[0m", 'colored with a non-array reference');

# Create a hash reference and try stringifying it.
d37 2
a38 6
$result = colored(\%foo, 'bold blue');
like(
    $result,
    qr{ \e\[1;34m HASH\(.*\) \e\[0m }xms,
    'colored with a hash reference'
);
@

