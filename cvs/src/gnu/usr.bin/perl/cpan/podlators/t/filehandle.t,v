head	1.1;
branch	1.1.1;
access;
symbols
	OPENBSD_6_0:1.1.1.2.0.12
	OPENBSD_6_0_BASE:1.1.1.2
	OPENBSD_5_9:1.1.1.2.0.6
	OPENBSD_5_9_BASE:1.1.1.2
	OPENBSD_5_8:1.1.1.2.0.8
	OPENBSD_5_8_BASE:1.1.1.2
	PERL_5_20_2:1.1.1.2
	OPENBSD_5_7:1.1.1.2.0.2
	OPENBSD_5_7_BASE:1.1.1.2
	PERL_5_20_1:1.1.1.2
	OPENBSD_5_6:1.1.1.2.0.4
	OPENBSD_5_6_BASE:1.1.1.2
	PERL_5_18_2:1.1.1.2
	PERL:1.1.1
	OPENBSD_5_5:1.1.1.1.0.16
	OPENBSD_5_5_BASE:1.1.1.1
	OPENBSD_5_4:1.1.1.1.0.12
	OPENBSD_5_4_BASE:1.1.1.1
	PERL_5_16_3:1.1.1.1
	OPENBSD_5_3:1.1.1.1.0.10
	OPENBSD_5_3_BASE:1.1.1.1
	OPENBSD_5_2:1.1.1.1.0.8
	OPENBSD_5_2_BASE:1.1.1.1
	OPENBSD_5_1_BASE:1.1.1.1
	OPENBSD_5_1:1.1.1.1.0.6
	OPENBSD_5_0:1.1.1.1.0.4
	OPENBSD_5_0_BASE:1.1.1.1
	OPENBSD_4_9:1.1.1.1.0.2
	OPENBSD_4_9_BASE:1.1.1.1
	PERL_5_12_2:1.1.1.1
	CPAN:1.1.1;
locks; strict;
comment	@# @;
expand	@o@;


1.1
date	2010.09.24.14.49.00;	author millert;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	2010.09.24.14.49.00;	author millert;	state Exp;
branches;
next	1.1.1.2;

1.1.1.2
date	2014.03.24.14.58.56;	author afresh1;	state Exp;
branches;
next	;


desc
@@


1.1
log
@Initial revision
@
text
@#!/usr/bin/perl -w
#
# filehandle.t -- Test the parse_from_filehandle interface.
#
# Copyright 2006, 2009 by Russ Allbery <rra@@stanford.edu>
#
# This program is free software; you may redistribute it and/or modify it
# under the same terms as Perl itself.

BEGIN {
    chdir 't' if -d 't';
    if ($ENV{PERL_CORE}) {
        @@INC = '../lib';
    }
    unshift (@@INC, '../blib/lib');
    $| = 1;
}

use strict;

use Test::More tests => 6;

BEGIN {
    use_ok ('Pod::Man');
    use_ok ('Pod::Text');
}

my $man = Pod::Man->new;
isa_ok ($man, 'Pod::Man', 'Pod::Man parser object');
my $text = Pod::Text->new;
isa_ok ($text, 'Pod::Text', 'Pod::Text parser object');
while (<DATA>) {
    next until $_ eq "###\n";
    open (TMP, '> tmp.pod') or die "Cannot create tmp.pod: $!\n";
    while (<DATA>) {
        last if $_ eq "###\n";
        print TMP $_;
    }
    close TMP;

    # Test Pod::Man output.
    open (IN, '< tmp.pod') or die "Cannot open tmp.pod: $!\n";
    open (OUT, '> out.tmp') or die "Cannot create out.tmp: $!\n";
    $man->parse_from_filehandle (\*IN, \*OUT);
    close IN;
    close OUT;
    open (OUT, 'out.tmp') or die "Cannot open out.tmp: $!\n";
    while (<OUT>) { last if /^\.nh/ }
    my $output;
    {
        local $/;
        $output = <OUT>;
    }
    close OUT;
    my $expected = '';
    while (<DATA>) {
        last if $_ eq "###\n";
        $expected .= $_;
    }
    is ($output, $expected, 'Pod::Man output is correct');

    # Test Pod::Text output.
    open (IN, '< tmp.pod') or die "Cannot open tmp.pod: $!\n";
    open (OUT, '> out.tmp') or die "Cannot create out.tmp: $!\n";
    $text->parse_from_filehandle (\*IN, \*OUT);
    close IN;
    close OUT;
    open (OUT, 'out.tmp') or die "Cannot open out.tmp: $!\n";
    {
        local $/;
        $output = <OUT>;
    }
    close OUT;
    1 while unlink ('tmp.pod', 'out.tmp');
    $expected = '';
    while (<DATA>) {
        last if $_ eq "###\n";
        $expected .= $_;
    }
    is ($output, $expected, 'Pod::Text output is correct');
}

# Below the marker are bits of POD, corresponding expected nroff output, and
# corresponding expected text output.  The input and output are separated by
# lines containing only ###.

__DATA__

###
=head1 NAME

gcc - GNU project C and C++ compiler

=head1 C++ NOTES

Other mentions of C++.
###
.SH "NAME"
gcc \- GNU project C and C++ compiler
.SH "\*(C+ NOTES"
.IX Header " NOTES"
Other mentions of \*(C+.
###
NAME
    gcc - GNU project C and C++ compiler

C++ NOTES
    Other mentions of C++.

###
@


1.1.1.1
log
@Perl 5.12.2 from CPAN
@
text
@@


1.1.1.2
log
@Import perl-5.18.2

OK espie@@ sthen@@ deraadt@@
@
text
@d5 1
a5 1
# Copyright 2006, 2009, 2012 by Russ Allbery <rra@@stanford.edu>
d34 1
a34 1
    open (TMP, "> tmp$$.pod") or die "Cannot create tmp.pod: $!\n";
d42 2
a43 2
    open (IN, "< tmp$$.pod") or die "Cannot open tmp$$.pod: $!\n";
    open (OUT, "> out$$.tmp") or die "Cannot create out$$.tmp: $!\n";
d47 1
a47 1
    open (OUT, "out$$.tmp") or die "Cannot open out$$.tmp: $!\n";
d63 2
a64 2
    open (IN, "< tmp$$.pod") or die "Cannot open tmp$$.pod: $!\n";
    open (OUT, "> out$$.tmp") or die "Cannot create out$$.tmp: $!\n";
d68 1
a68 1
    open (OUT, "out$$.tmp") or die "Cannot open out$$.tmp: $!\n";
d74 1
a74 1
    1 while unlink ("tmp$$.pod", "out$$.tmp");
@

