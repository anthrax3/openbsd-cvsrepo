head	1.1;
access;
symbols
	OPENBSD_6_2:1.1.0.6
	OPENBSD_6_2_BASE:1.1
	PERL_5_24_2:1.1.1.1
	PERL:1.1.1
	OPENBSD_6_1:1.1.0.4
	OPENBSD_6_1_BASE:1.1;
locks; strict;
comment	@# @;
expand	@o@;


1.1
date	2017.02.05.00.32.07;	author afresh1;	state Exp;
branches
	1.1.1.1;
next	;
commitid	cxJ08BvJA9Pt2PTM;

1.1.1.1
date	2017.08.14.13.46.02;	author afresh1;	state Exp;
branches;
next	;
commitid	fAzrs78vdW2Yfc6A;


desc
@@


1.1
log
@Fix merge issues, remove excess files - match perl-5.24.1 dist
@
text
@#!/usr/bin/perl -w
#
# text-empty.t -- Test Pod::Text with a document that produces only errors.
#
# Copyright 2013 Russ Allbery <rra@@cpan.org>
#
# This program is free software; you may redistribute it and/or modify it
# under the same terms as Perl itself.

BEGIN {
    chdir 't' if -d 't';
    if ($ENV{PERL_CORE}) {
        @@INC = '../lib';
    }
    unshift (@@INC, '../blib/lib');
    $| = 1;
}

use strict;

use Test::More tests => 8;
BEGIN { use_ok ('Pod::Text') }

# Set up Pod::Text to output to a string.
my $parser = Pod::Text->new;
isa_ok ($parser, 'Pod::Text');
my $output;
$parser->output_string (\$output);

# Try a POD document where the only command is invalid.  Be sure that we don't
# get any warnings as well as any errors.
local $SIG{__WARN__} = sub { die $_[0] };
ok (eval { $parser->parse_string_document("=\xa0") },
    'Parsed invalid document');
is ($@@, '', '...with no errors');
SKIP: {
    skip 'Pod::Simple does not produce errors for invalid commands', 1
        if $output eq q{};
    like ($output, qr{POD ERRORS},
          '...and output contains a POD ERRORS section');
}

# Try with a document containing only =cut.
ok (eval { $parser->parse_string_document("=cut") },
    'Parsed invalid document');
is ($@@, '', '...with no errors');
SKIP: {
    skip 'Pod::Simple does not produce errors for invalid commands', 1
        if $output eq q{};
    like ($output, qr{POD ERRORS},
          '...and output contains a POD ERRORS section');
}
@


1.1.1.1
log
@Import perl-5.24.2
@
text
@@

