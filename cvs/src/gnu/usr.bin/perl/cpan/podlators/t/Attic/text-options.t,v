head	1.2;
access;
symbols
	OPENBSD_6_0:1.1.1.2.0.12
	OPENBSD_6_0_BASE:1.1.1.2
	OPENBSD_5_9:1.1.1.2.0.6
	OPENBSD_5_9_BASE:1.1.1.2
	OPENBSD_5_8:1.1.1.2.0.8
	OPENBSD_5_8_BASE:1.1.1.2
	PERL_5_20_2:1.1.1.2
	OPENBSD_5_7:1.1.1.2.0.2
	OPENBSD_5_7_BASE:1.1.1.2
	PERL_5_20_1:1.1.1.2
	OPENBSD_5_6:1.1.1.2.0.4
	OPENBSD_5_6_BASE:1.1.1.2
	PERL_5_18_2:1.1.1.2
	PERL:1.1.1
	OPENBSD_5_5:1.1.1.1.0.16
	OPENBSD_5_5_BASE:1.1.1.1
	OPENBSD_5_4:1.1.1.1.0.12
	OPENBSD_5_4_BASE:1.1.1.1
	PERL_5_16_3:1.1.1.1
	OPENBSD_5_3:1.1.1.1.0.10
	OPENBSD_5_3_BASE:1.1.1.1
	OPENBSD_5_2:1.1.1.1.0.8
	OPENBSD_5_2_BASE:1.1.1.1
	OPENBSD_5_1_BASE:1.1.1.1
	OPENBSD_5_1:1.1.1.1.0.6
	OPENBSD_5_0:1.1.1.1.0.4
	OPENBSD_5_0_BASE:1.1.1.1
	OPENBSD_4_9:1.1.1.1.0.2
	OPENBSD_4_9_BASE:1.1.1.1
	PERL_5_12_2:1.1.1.1
	CPAN:1.1.1;
locks; strict;
comment	@# @;
expand	@o@;


1.2
date	2017.02.05.00.32.07;	author afresh1;	state dead;
branches;
next	1.1;
commitid	cxJ08BvJA9Pt2PTM;

1.1
date	2010.09.24.14.49.00;	author millert;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	2010.09.24.14.49.00;	author millert;	state Exp;
branches;
next	1.1.1.2;

1.1.1.2
date	2014.03.24.14.58.56;	author afresh1;	state Exp;
branches;
next	;


desc
@@


1.2
log
@Fix merge issues, remove excess files - match perl-5.24.1 dist
@
text
@#!/usr/bin/perl -w
#
# text-options.t -- Additional tests for Pod::Text options.
#
# Copyright 2002, 2004, 2006, 2008, 2009 by Russ Allbery <rra@@stanford.edu>
#
# This program is free software; you may redistribute it and/or modify it
# under the same terms as Perl itself.

BEGIN {
    chdir 't' if -d 't';
    if ($ENV{PERL_CORE}) {
        @@INC = '../lib';
    }
    unshift (@@INC, '../blib/lib');
    $| = 1;
}

use strict;

use Test::More tests => 19;
BEGIN { use_ok ('Pod::Text') }

# Redirect stderr to a file.
sub stderr_save {
    open (OLDERR, '>&STDERR') or die "Can't dup STDERR: $!\n";
    open (STDERR, '> out.err') or die "Can't redirect STDERR: $!\n";
}

# Restore stderr.
sub stderr_restore {
    close STDERR;
    open (STDERR, '>&OLDERR') or die "Can't dup STDERR: $!\n";
    close OLDERR;
}

my $n = 1;
while (<DATA>) {
    my %options;
    next until $_ eq "###\n";
    while (<DATA>) {
        last if $_ eq "###\n";
        my ($option, $value) = split;
        $options{$option} = $value;
    }
    open (TMP, '> tmp.pod') or die "Cannot create tmp.pod: $!\n";
    while (<DATA>) {
        last if $_ eq "###\n";
        print TMP $_;
    }
    close TMP;
    my $parser = Pod::Text->new (%options);
    isa_ok ($parser, 'Pod::Text', 'Parser object');
    open (OUT, '> out.tmp') or die "Cannot create out.tmp: $!\n";
    stderr_save;
    $parser->parse_from_file ('tmp.pod', \*OUT);
    stderr_restore;
    close OUT;
    open (TMP, 'out.tmp') or die "Cannot open out.tmp: $!\n";
    my $output;
    {
        local $/;
        $output = <TMP>;
    }
    close TMP;
    1 while unlink ('tmp.pod', 'out.tmp');
    my $expected = '';
    while (<DATA>) {
        last if $_ eq "###\n";
        $expected .= $_;
    }
    is ($output, $expected, "Ouput correct for test $n");
    open (ERR, 'out.err') or die "Cannot open out.err: $!\n";
    my $errors;
    {
        local $/;
        $errors = <ERR>;
    }
    close ERR;
    1 while unlink ('out.err');
    $expected = '';
    while (<DATA>) {
        last if $_ eq "###\n";
        $expected .= $_;
    }
    is ($errors, $expected, "Errors correct for test $n");
    $n++;
}

# Below the marker are bits of POD and corresponding expected text output.
# This is used to test specific features or problems with Pod::Text.  The
# options, input, output, and errors are separated by lines containing only
# ###.

__DATA__

###
alt 1
###
=head1 SAMPLE

=over 4

=item F

Paragraph.

=item Bar

=item B

Paragraph.

=item Longer

Paragraph.

=back

###

==== SAMPLE ====

:   F   Paragraph.

:   Bar
:   B   Paragraph.

:   Longer
        Paragraph.

###
###

###
margin 4
###
=head1 SAMPLE

This is some body text that is long enough to be a paragraph that wraps,
thereby testing margins with wrapped paragraphs.

 This is some verbatim text.

=over 6

=item Test

This is a test of an indented paragraph.

This is another indented paragraph.

=back
###
    SAMPLE
        This is some body text that is long enough to be a paragraph that
        wraps, thereby testing margins with wrapped paragraphs.

         This is some verbatim text.

        Test  This is a test of an indented paragraph.

              This is another indented paragraph.

###
###

###
code 1
###
This is some random text.
This is more random text.

This is some random text.
This is more random text.

=head1 SAMPLE

This is POD.

=cut

This is more random text.
###
This is some random text.
This is more random text.

This is some random text.
This is more random text.

SAMPLE
    This is POD.


This is more random text.
###
###

###
sentence 1
###
=head1 EXAMPLE

Whitespace around C<<  this.  >> must be ignored per perlpodspec.  >>
needs to eat all of the space in front of it.

=cut
###
EXAMPLE
    Whitespace around "this." must be ignored per perlpodspec.  >> needs to
    eat all of the space in front of it.

###
###

###
###
=over 4

=item Foo

Bar.

=head1 NEXT
###
    Foo Bar.

NEXT
POD ERRORS
    Hey! The above document had some coding errors, which are explained
    below:

    Around line 7:
        You forgot a '=back' before '=head1'

###
###

###
stderr 1
###
=over 4

=item Foo

Bar.

=head1 NEXT
###
    Foo Bar.

NEXT
###
tmp.pod around line 7: You forgot a '=back' before '=head1'
###
@


1.1
log
@Initial revision
@
text
@@


1.1.1.1
log
@Perl 5.12.2 from CPAN
@
text
@@


1.1.1.2
log
@Import perl-5.18.2

OK espie@@ sthen@@ deraadt@@
@
text
@d3 1
a3 1
# Additional tests for Pod::Text options.
d5 1
a5 2
# Copyright 2002, 2004, 2006, 2008, 2009, 2012, 2013
#     Russ Allbery <rra@@stanford.edu>
d21 1
a21 1
use Test::More tests => 34;
d27 1
a27 1
    open (STDERR, "> out$$.err") or die "Can't redirect STDERR: $!\n";
d46 1
a46 1
    open (TMP, "> tmp$$.pod") or die "Cannot create tmp$$.pod: $!\n";
d54 1
a54 1
    open (OUT, "> out$$.tmp") or die "Cannot create out$$.tmp: $!\n";
d56 1
a56 2
    eval { $parser->parse_from_file ("tmp$$.pod", \*OUT) };
    my $exception = $@@;
d59 1
a59 1
    open (TMP, "out$$.tmp") or die "Cannot open out$$.tmp: $!\n";
d66 1
a66 1
    1 while unlink ("tmp$$.pod", "out$$.tmp");
d73 1
a73 1
    open (ERR, "out$$.err") or die "Cannot open out$$.err: $!\n";
d80 1
a80 6
    $errors =~ s/\Qtmp$$.pod/tmp.pod/g;
    1 while unlink ("out$$.err");
    if ($exception) {
        $exception =~ s/ at .*//;
        $errors .= "EXCEPTION: $exception";
    }
a254 91
###

###
nourls 1
###
=head1 URL suppression

L<anchor|http://www.example.com/>
###
URL suppression
    anchor

###
###

###
errors stderr
###
=over 4

=item Foo

Bar.

=head1 NEXT
###
    Foo Bar.

NEXT
###
tmp.pod around line 7: You forgot a '=back' before '=head1'
###

###
errors die
###
=over 4

=item Foo

Bar.

=head1 NEXT
###
    Foo Bar.

NEXT
###
tmp.pod around line 7: You forgot a '=back' before '=head1'
EXCEPTION: POD document had syntax errors
###

###
errors pod
###
=over 4

=item Foo

Bar.

=head1 NEXT
###
    Foo Bar.

NEXT
POD ERRORS
    Hey! The above document had some coding errors, which are explained
    below:

    Around line 7:
        You forgot a '=back' before '=head1'

###
###

###
errors none
###
=over 4

=item Foo

Bar.

=head1 NEXT
###
    Foo Bar.

NEXT
###
@

