head	1.2;
access;
symbols
	OPENBSD_6_0:1.1.1.2.0.10
	OPENBSD_6_0_BASE:1.1.1.2
	OPENBSD_5_9:1.1.1.2.0.4
	OPENBSD_5_9_BASE:1.1.1.2
	OPENBSD_5_8:1.1.1.2.0.6
	OPENBSD_5_8_BASE:1.1.1.2
	PERL_5_20_2:1.1.1.2
	OPENBSD_5_7:1.1.1.2.0.2
	OPENBSD_5_7_BASE:1.1.1.2
	PERL_5_20_1:1.1.1.2
	OPENBSD_5_6:1.1.1.1.0.4
	OPENBSD_5_6_BASE:1.1.1.1
	PERL_5_18_2:1.1.1.1
	PERL:1.1.1;
locks; strict;
comment	@# @;
expand	@b@;


1.2
date	2017.02.05.00.32.06;	author afresh1;	state Exp;
branches;
next	1.1;
commitid	cxJ08BvJA9Pt2PTM;

1.1
date	2014.03.24.14.58.58;	author afresh1;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	2014.03.24.14.58.58;	author afresh1;	state Exp;
branches;
next	1.1.1.2;

1.1.1.2
date	2014.11.17.20.53.01;	author afresh1;	state Exp;
branches;
next	;
commitid	B31cAbBIXiCqnL97;


desc
@@


1.2
log
@Fix merge issues, remove excess files - match perl-5.24.1 dist
@
text
@
BEGIN {
    unless ('A' eq pack('U', 0x41)) {
	print "1..0 # Unicode::Collate cannot pack a Unicode code point\n";
	exit 0;
    }
    unless (0x41 == unpack('U', 'A')) {
	print "1..0 # Unicode::Collate cannot get a Unicode code point\n";
	exit 0;
    }
    if ($ENV{PERL_CORE}) {
	chdir('t') if -d 't';
	@@INC = $^O eq 'MacOS' ? qw(::lib) : qw(../lib);
    }
}

use strict;
use warnings;
BEGIN { $| = 1; print "1..48\n"; }
my $count = 0;
sub ok ($;$) {
    my $p = my $r = shift;
    if (@@_) {
	my $x = shift;
	$p = !defined $x ? !defined $r : !defined $r ? 0 : $r eq $x;
    }
    print $p ? "ok" : "not ok", ' ', ++$count, "\n";
}

use Unicode::Collate;

ok(1);

#########################

my $Collator = Unicode::Collate->new(
    table => 'keys.txt',
    normalization => undef,
);

# [001F] UNIT SEPARATOR
{
    ok($Collator->eq("\0",   "\x1F"));
    ok($Collator->eq("\x1F", "\x{200B}"));
    ok($Collator->eq("\0",   "\x{200B}"));
    ok($Collator->eq("\x{313}", "\x{343}"));
    ok($Collator->eq("\x{2000}", "\x{2001}"));
    ok($Collator->eq("\x{200B}", "\x{200C}"));
    ok($Collator->eq("\x{304C}", "\x{304B}\x{3099}"));

    $Collator->change(identical => 1);

    ok($Collator->lt("\0",   "\x1F"));
    ok($Collator->lt("\x1F", "\x{200B}"));
    ok($Collator->lt("\0",   "\x{200B}"));
    ok($Collator->lt("\x{313}", "\x{343}"));
    ok($Collator->lt("\x{2000}", "\x{2001}"));
    ok($Collator->lt("\x{200B}", "\x{200C}"));
    ok($Collator->gt("\x{304C}", "\x{304B}\x{3099}"));

    $Collator->change(identical => 0);

    ok($Collator->eq("\0",   "\x1F"));
    ok($Collator->eq("\x1F", "\x{200B}"));
    ok($Collator->eq("\0",   "\x{200B}"));
    ok($Collator->eq("\x{313}", "\x{343}"));
    ok($Collator->eq("\x{2000}", "\x{2001}"));
    ok($Collator->eq("\x{200B}", "\x{200C}"));
    ok($Collator->eq("\x{304C}", "\x{304B}\x{3099}"));
}

#### 22

eval { require Unicode::Normalize };
if (!$@@) {
    $Collator->change(normalization => "NFD");

    $Collator->change(identical => 1);

    ok($Collator->lt("\0", "\x{200B}"));
    ok($Collator->eq("\x{313}", "\x{343}"));
    ok($Collator->lt("\x{2000}", "\x{2001}"));
    ok($Collator->lt("\x{200B}", "\x{200C}"));
    ok($Collator->eq("\x{304C}", "\x{304B}\x{3099}"));

    $Collator->change(identical => 0);

    ok($Collator->eq("\0", "\x{200B}"));
    ok($Collator->eq("\x{313}", "\x{343}"));
    ok($Collator->eq("\x{2000}", "\x{2001}"));
    ok($Collator->eq("\x{200B}", "\x{200C}"));
    ok($Collator->eq("\x{304C}", "\x{304B}\x{3099}"));
} else {
    ok(1) for 1..10;
}

$Collator->change(normalization => undef, identical => 1);

##### 32

ok($Collator->viewSortKey("\0"),       '[| | | | 0000 0000]');
ok($Collator->viewSortKey("\x{200B}"), '[| | | | 0000 200B]');

ok($Collator->viewSortKey('a'),
    '[0A15 | 0020 | 0002 | FFFF | 0000 0061]');

ok($Collator->viewSortKey("\x{304C}"),
    '[1926 | 0020 013D | 000E 0002 | FFFF FFFF | 0000 304C]');

ok($Collator->viewSortKey("\x{4E00}"),
    '[FB40 CE00 | 0020 | 0002 | FFFF FFFF | 0000 4E00]');

ok($Collator->viewSortKey("\x{100000}"),
    '[FBE0 8000 | 0020 | 0002 | FFFF FFFF | 0010 0000]');

##### 38

eval { require Unicode::Normalize };
if (!$@@) {
    $Collator->change(normalization => "NFD");

    ok($Collator->viewSortKey("\x{304C}"),
    '[1926 | 0020 013D | 000E 0002 | FFFF FFFF | 0000 304B 0000 3099]');
} else {
    ok(1);
}

$Collator->change(normalization => undef);

##### 39

$Collator->change(level => 3);

ok($Collator->viewSortKey("\x{304C}"),
    '[1926 | 0020 013D | 000E 0002 | | 0000 304C]');

$Collator->change(level => 2);

ok($Collator->viewSortKey("\x{304C}"),
    '[1926 | 0020 013D | | | 0000 304C]');

$Collator->change(level => 1);

ok($Collator->viewSortKey("\x{304C}"),
    '[1926 | | | | 0000 304C]');

##### 42

$Collator->change(UCA_Version => 8);

ok($Collator->viewSortKey("\x{304C}"),
    '[1926||||0000 304C]');

$Collator->change(level => 2);

ok($Collator->viewSortKey("\x{304C}"),
    '[1926|0020 013D|||0000 304C]');

$Collator->change(level => 3);

ok($Collator->viewSortKey("\x{304C}"),
    '[1926|0020 013D|000E 0002||0000 304C]');

$Collator->change(level => 4);

ok($Collator->viewSortKey("\x{304C}"),
    '[1926|0020 013D|000E 0002|FFFF FFFF|0000 304C]');

ok($Collator->viewSortKey("\x{4E00}"),
    '[4E00|0020|0002|FFFF|0000 4E00]');

ok($Collator->viewSortKey("\x{100000}"),
    '[FFA0 8000|0002|0001|FFFF FFFF|0010 0000]');

##### 48
@


1.1
log
@Initial revision
@
text
@d3 6
a8 3
    unless ("A" eq pack('U', 0x41)) {
	print "1..0 # Unicode::Collate " .
	    "cannot stringify a Unicode code point\n";
d19 1
a19 1
BEGIN { $| = 1; print "1..45\n"; }
d110 3
d116 2
d130 1
a130 1
##### 38
d147 1
a147 1
##### 41
d169 7
a175 1
##### 45
@


1.1.1.1
log
@Import perl-5.18.2

OK espie@@ sthen@@ deraadt@@
@
text
@@


1.1.1.2
log
@Import perl-5.20.1
@
text
@d3 3
a5 6
    unless ('A' eq pack('U', 0x41)) {
	print "1..0 # Unicode::Collate cannot pack a Unicode code point\n";
	exit 0;
    }
    unless (0x41 == unpack('U', 'A')) {
	print "1..0 # Unicode::Collate cannot get a Unicode code point\n";
@

