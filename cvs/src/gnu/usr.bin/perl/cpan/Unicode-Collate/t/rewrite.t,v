head	1.1;
branch	1.1.1;
access;
symbols
	OPENBSD_6_2:1.1.1.2.0.8
	OPENBSD_6_2_BASE:1.1.1.2
	PERL_5_24_2:1.1.1.2
	OPENBSD_6_1:1.1.1.2.0.12
	OPENBSD_6_1_BASE:1.1.1.2
	OPENBSD_6_0:1.1.1.2.0.10
	OPENBSD_6_0_BASE:1.1.1.2
	OPENBSD_5_9:1.1.1.2.0.4
	OPENBSD_5_9_BASE:1.1.1.2
	OPENBSD_5_8:1.1.1.2.0.6
	OPENBSD_5_8_BASE:1.1.1.2
	PERL_5_20_2:1.1.1.2
	OPENBSD_5_7:1.1.1.2.0.2
	OPENBSD_5_7_BASE:1.1.1.2
	PERL_5_20_1:1.1.1.2
	OPENBSD_5_6:1.1.1.1.0.8
	OPENBSD_5_6_BASE:1.1.1.1
	PERL_5_18_2:1.1.1.1
	PERL:1.1.1
	OPENBSD_5_5:1.1.1.1.0.6
	OPENBSD_5_5_BASE:1.1.1.1
	OPENBSD_5_4:1.1.1.1.0.2
	OPENBSD_5_4_BASE:1.1.1.1
	PERL_5_16_3:1.1.1.1
	CPAN:1.1.1;
locks; strict;
comment	@# @;
expand	@o@;


1.1
date	2013.03.25.20.08.31;	author sthen;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	2013.03.25.20.08.31;	author sthen;	state Exp;
branches;
next	1.1.1.2;

1.1.1.2
date	2014.11.17.20.53.02;	author afresh1;	state Exp;
branches;
next	;
commitid	B31cAbBIXiCqnL97;


desc
@@


1.1
log
@Initial revision
@
text
@
BEGIN {
    unless ("A" eq pack('U', 0x41)) {
	print "1..0 # Unicode::Collate " .
	    "cannot stringify a Unicode code point\n";
	exit 0;
    }
    if ($ENV{PERL_CORE}) {
	chdir('t') if -d 't';
	@@INC = $^O eq 'MacOS' ? qw(::lib) : qw(../lib);
    }
}

use strict;
use warnings;
BEGIN { $| = 1; print "1..17\n"; }
my $count = 0;
sub ok ($;$) {
    my $p = my $r = shift;
    if (@@_) {
	my $x = shift;
	$p = !defined $x ? !defined $r : !defined $r ? 0 : $r eq $x;
    }
    print $p ? "ok" : "not ok", ' ', ++$count, "\n";
}

use Unicode::Collate;

ok(1);

#########################

my $code = sub {
    my $line = shift;
    $line =~ s/\[\.0000\..{4}\..{4}\./[.0000.0000.0000./g;
    return $line;
  };

#####

my $Collator = Unicode::Collate->new(
  table => 'keys.txt', normalization => undef, rewrite => $code,
);

ok($Collator->eq("camel", "came\x{300}l"));
ok($Collator->eq("camel", "ca\x{300}me\x{301}l"));
ok($Collator->lt("camel", "Camel"));
{
  my $s = "Camel donkey zebra came\x{301}l CAMEL horse cam\0e\0l.";
  $Collator->gsubst($s, "camel", sub { "=$_[0]=" });
  ok($s, "Camel donkey zebra =came\x{301}l= CAMEL horse =cam\0e\0l=.");
}

# 5

my $rewriteDUCET = Unicode::Collate->new(
  normalization => undef, rewrite => $code,
);

ok($rewriteDUCET->eq("camel", "came\x{300}l"));
ok($rewriteDUCET->eq("camel", "ca\x{300}me\x{301}l"));
ok($rewriteDUCET->lt("camel", "Camel"));
{
  my $s = "Camel donkey zebra came\x{301}l CAMEL horse cam\0e\0l.";
  $rewriteDUCET->gsubst($s, "camel", sub { "=$_[0]=" });
  ok($s, "Camel donkey zebra =came\x{301}l= CAMEL horse =cam\0e\0l=.");
}

# 9

my $undef_hira = Unicode::Collate->new(
  table => 'keys.txt',
  normalization => undef,
  level => 1,
  rewrite => sub {
    my $line = shift;
    return '' if $line =~ /HIRAGANA/;
    return $line;
  },
);

my $hiragana = "\x{3042}\x{3044}";
my $katakana = "\x{30A2}\x{30A4}";
my $cjkkanji = "\x{4E00}";

# HIRAGANA are undefined via rewrite
# So they are after CJK Unified Ideographs.

ok($undef_hira->lt("abc", "perl"));
ok($undef_hira->lt("", "ABC"));
ok($undef_hira->lt($katakana, $hiragana));
ok($undef_hira->lt($katakana, $cjkkanji));
ok($undef_hira->lt($cjkkanji, $hiragana));

$Collator->change(level => 1);
ok($Collator->eq($katakana, $hiragana));
ok($Collator->lt($katakana, $cjkkanji));
ok($Collator->gt($cjkkanji, $hiragana));

# 17
@


1.1.1.1
log
@import perl 5.16.3 from CPAN - worked on by Andrew Fresh and myself
@
text
@@


1.1.1.2
log
@Import perl-5.20.1
@
text
@d3 3
a5 6
    unless ('A' eq pack('U', 0x41)) {
	print "1..0 # Unicode::Collate cannot pack a Unicode code point\n";
	exit 0;
    }
    unless (0x41 == unpack('U', 'A')) {
	print "1..0 # Unicode::Collate cannot get a Unicode code point\n";
d35 1
a35 1
    $line =~ s/\[\.0000\..{4}\..{4}([.\]])/[.0000.0000.0000$1/g;
@

