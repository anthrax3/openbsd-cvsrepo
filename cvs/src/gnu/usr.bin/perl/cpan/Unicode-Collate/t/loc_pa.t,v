head	1.1;
branch	1.1.1;
access;
symbols
	OPENBSD_6_2:1.1.1.2.0.14
	OPENBSD_6_2_BASE:1.1.1.2
	PERL_5_24_2:1.1.1.2
	OPENBSD_6_1:1.1.1.2.0.12
	OPENBSD_6_1_BASE:1.1.1.2
	OPENBSD_6_0:1.1.1.2.0.10
	OPENBSD_6_0_BASE:1.1.1.2
	OPENBSD_5_9:1.1.1.2.0.4
	OPENBSD_5_9_BASE:1.1.1.2
	OPENBSD_5_8:1.1.1.2.0.6
	OPENBSD_5_8_BASE:1.1.1.2
	PERL_5_20_2:1.1.1.2
	OPENBSD_5_7:1.1.1.2.0.2
	OPENBSD_5_7_BASE:1.1.1.2
	PERL_5_20_1:1.1.1.2
	OPENBSD_5_6:1.1.1.1.0.8
	OPENBSD_5_6_BASE:1.1.1.1
	PERL_5_18_2:1.1.1.1
	PERL:1.1.1
	OPENBSD_5_5:1.1.1.1.0.6
	OPENBSD_5_5_BASE:1.1.1.1
	OPENBSD_5_4:1.1.1.1.0.2
	OPENBSD_5_4_BASE:1.1.1.1
	PERL_5_16_3:1.1.1.1
	CPAN:1.1.1;
locks; strict;
comment	@# @;
expand	@o@;


1.1
date	2013.03.25.20.08.31;	author sthen;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	2013.03.25.20.08.31;	author sthen;	state Exp;
branches;
next	1.1.1.2;

1.1.1.2
date	2014.11.17.20.53.01;	author afresh1;	state Exp;
branches;
next	;
commitid	B31cAbBIXiCqnL97;


desc
@@


1.1
log
@Initial revision
@
text
@
BEGIN {
    unless ("A" eq pack('U', 0x41)) {
	print "1..0 # Unicode::Collate " .
	    "cannot stringify a Unicode code point\n";
	exit 0;
    }
    if ($ENV{PERL_CORE}) {
	chdir('t') if -d 't';
	@@INC = $^O eq 'MacOS' ? qw(::lib) : qw(../lib);
    }
}

use strict;
use warnings;
BEGIN { $| = 1; print "1..41\n"; }
my $count = 0;
sub ok ($;$) {
    my $p = my $r = shift;
    if (@@_) {
	my $x = shift;
	$p = !defined $x ? !defined $r : !defined $r ? 0 : $r eq $x;
    }
    print $p ? "ok" : "not ok", ' ', ++$count, "\n";
}

use Unicode::Collate::Locale;

ok(1);

#########################

my $objPa = Unicode::Collate::Locale->
    new(locale => 'PA', normalization => undef);

my $default = Unicode::Collate::Locale->
    new(normalization => undef);

ok($objPa->getlocale, 'pa');
ok($default->getlocale, 'default');

$objPa->change(level => 1);

ok($objPa->lt("\x{A5C}", "\x{A4D}"));
ok($objPa->lt("\x{A4D}", "\x{A3E}"));

# 5

# RRA and Vowel Signs
for my $o ($objPa, $default) {
  ok($o->lt("\x{A5C}", "\x{A3E}"));
  ok($o->lt("\x{A3E}", "\x{A3F}"));
  ok($o->lt("\x{A3F}", "\x{A40}"));
  ok($o->lt("\x{A40}", "\x{A41}"));
  ok($o->lt("\x{A41}", "\x{A42}"));
  ok($o->lt("\x{A42}", "\x{A47}"));
  ok($o->lt("\x{A47}", "\x{A48}"));
  ok($o->lt("\x{A48}", "\x{A4B}"));
  ok($o->lt("\x{A4B}", "\x{A4C}"));
}

# 23

ok($default->lt("\x{A4C}", "\x{A4D}"));

# 24

ok($objPa->eq("\x{A03}", ""));
ok($objPa->eq("\x{A03}", "\x{A71}"));
ok($objPa->eq("\x{A71}", "\x{A70}"));
ok($objPa->eq("\x{A70}", "\x{A02}"));
ok($objPa->eq("\x{A02}", "\x{A01}"));
ok($objPa->eq("\x{A01}", "\x{A3C}"));

# 30

$objPa->change(level => 2);

ok($objPa->lt("\x{A03}", "\x{A71}"));
ok($objPa->lt("\x{A71}", "\x{A70}"));
ok($objPa->lt("\x{A70}", "\x{A02}"));
ok($objPa->lt("\x{A02}", "\x{A01}"));
ok($objPa->lt("\x{A01}", "\x{A3C}"));

# 35

$objPa->change(level => 3);

ok($objPa->eq("\x{A33}", "\x{A32}\x{A3C}"));
ok($objPa->eq("\x{A36}", "\x{A38}\x{A3C}"));
ok($objPa->eq("\x{A59}", "\x{A16}\x{A3C}"));
ok($objPa->eq("\x{A5A}", "\x{A17}\x{A3C}"));
ok($objPa->eq("\x{A5B}", "\x{A1C}\x{A3C}"));
ok($objPa->eq("\x{A5E}", "\x{A2B}\x{A3C}"));

# 41
@


1.1.1.1
log
@import perl 5.16.3 from CPAN - worked on by Andrew Fresh and myself
@
text
@@


1.1.1.2
log
@Import perl-5.20.1
@
text
@d3 3
a5 6
    unless ('A' eq pack('U', 0x41)) {
	print "1..0 # Unicode::Collate cannot pack a Unicode code point\n";
	exit 0;
    }
    unless (0x41 == unpack('U', 'A')) {
	print "1..0 # Unicode::Collate cannot get a Unicode code point\n";
@

