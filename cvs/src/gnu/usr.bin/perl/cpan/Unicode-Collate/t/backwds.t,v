head	1.1;
branch	1.1.1;
access;
symbols
	OPENBSD_6_2:1.1.1.2.0.8
	OPENBSD_6_2_BASE:1.1.1.2
	PERL_5_24_2:1.1.1.2
	OPENBSD_6_1:1.1.1.2.0.12
	OPENBSD_6_1_BASE:1.1.1.2
	OPENBSD_6_0:1.1.1.2.0.10
	OPENBSD_6_0_BASE:1.1.1.2
	OPENBSD_5_9:1.1.1.2.0.4
	OPENBSD_5_9_BASE:1.1.1.2
	OPENBSD_5_8:1.1.1.2.0.6
	OPENBSD_5_8_BASE:1.1.1.2
	PERL_5_20_2:1.1.1.2
	OPENBSD_5_7:1.1.1.2.0.2
	OPENBSD_5_7_BASE:1.1.1.2
	PERL_5_20_1:1.1.1.2
	OPENBSD_5_6:1.1.1.1.0.8
	OPENBSD_5_6_BASE:1.1.1.1
	PERL_5_18_2:1.1.1.1
	PERL:1.1.1
	OPENBSD_5_5:1.1.1.1.0.6
	OPENBSD_5_5_BASE:1.1.1.1
	OPENBSD_5_4:1.1.1.1.0.2
	OPENBSD_5_4_BASE:1.1.1.1
	PERL_5_16_3:1.1.1.1
	CPAN:1.1.1;
locks; strict;
comment	@# @;
expand	@o@;


1.1
date	2013.03.25.20.08.30;	author sthen;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	2013.03.25.20.08.30;	author sthen;	state Exp;
branches;
next	1.1.1.2;

1.1.1.2
date	2014.11.17.20.53.01;	author afresh1;	state Exp;
branches;
next	;
commitid	B31cAbBIXiCqnL97;


desc
@@


1.1
log
@Initial revision
@
text
@
BEGIN {
    unless ("A" eq pack('U', 0x41)) {
	print "1..0 # Unicode::Collate " .
	    "cannot stringify a Unicode code point\n";
	exit 0;
    }
    if ($ENV{PERL_CORE}) {
	chdir('t') if -d 't';
	@@INC = $^O eq 'MacOS' ? qw(::lib) : qw(../lib);
    }
}

use strict;
use warnings;
BEGIN { $| = 1; print "1..36\n"; }
my $count = 0;
sub ok ($;$) {
    my $p = my $r = shift;
    if (@@_) {
	my $x = shift;
	$p = !defined $x ? !defined $r : !defined $r ? 0 : $r eq $x;
    }
    print $p ? "ok" : "not ok", ' ', ++$count, "\n";
}

use Unicode::Collate;

ok(1);

# 2..12
{
    my $backLevel1 = Unicode::Collate->new(
	table => "keys.txt",
	normalization => undef,
	backwards => [ 1 ],
    );

    ok($backLevel1->gt("a\x{300}a", "aa\x{300}"));
    ok($backLevel1->lt("Ca\x{300}ca\x{302}", "ca\x{302}ca\x{300}"));
    ok($backLevel1->lt("ca\x{300}ca\x{302}", "Ca\x{302}ca\x{300}"));

    # all strings are reversed at level 1.
    ok($backLevel1->gt("AB", "BA"));
    ok($backLevel1->gt("\x{3042}\x{3044}", "\x{3044}\x{3042}"));

    $backLevel1->change(backwards => []);
    ok($backLevel1->lt("AB", "BA"));
    ok($backLevel1->lt("\x{3042}\x{3044}", "\x{3044}\x{3042}"));

    $backLevel1->change(backwards => 1);
    ok($backLevel1->gt("AB", "BA"));
    ok($backLevel1->gt("\x{3042}\x{3044}", "\x{3044}\x{3042}"));

    $backLevel1->change(backwards => undef);
    ok($backLevel1->lt("AB", "BA"));
    ok($backLevel1->lt("\x{3042}\x{3044}", "\x{3044}\x{3042}"));
}

# 13..26
{
    my $backLevel2 = Unicode::Collate->new(
	table => "keys.txt",
	normalization => undef,
	backwards => 2,
    );

    ok($backLevel2->lt("AB", "BA"));
    ok($backLevel2->lt("\x{3042}\x{3044}", "\x{3044}\x{3042}"));

    # all strings are reversed at level 2.
    ok($backLevel2->lt("a\x{300}a", "aa\x{300}"));
    ok($backLevel2->gt("Ca\x{300}ca\x{302}", "ca\x{302}ca\x{300}"));
    ok($backLevel2->gt("ca\x{300}ca\x{302}", "Ca\x{302}ca\x{300}"));

    $backLevel2->change(backwards => undef);
    ok($backLevel2->gt("a\x{300}a", "aa\x{300}"));
    ok($backLevel2->lt("Ca\x{300}ca\x{302}", "ca\x{302}ca\x{300}"));
    ok($backLevel2->lt("ca\x{300}ca\x{302}", "Ca\x{302}ca\x{300}"));

    $backLevel2->change(backwards => [2]);
    ok($backLevel2->lt("a\x{300}a", "aa\x{300}"));
    ok($backLevel2->gt("Ca\x{300}ca\x{302}", "ca\x{302}ca\x{300}"));
    ok($backLevel2->gt("ca\x{300}ca\x{302}", "Ca\x{302}ca\x{300}"));

    $backLevel2->change(backwards => []);
    ok($backLevel2->gt("a\x{300}a", "aa\x{300}"));
    ok($backLevel2->lt("Ca\x{300}ca\x{302}", "ca\x{302}ca\x{300}"));
    ok($backLevel2->lt("ca\x{300}ca\x{302}", "Ca\x{302}ca\x{300}"));
}

# 27..31
{
    my $undef = Unicode::Collate->new(
	table => "keys.txt",
	normalization => undef,
	backwards => undef,
    );

    ok($undef->lt("AB", "BA"));
    ok($undef->lt("\x{3042}\x{3044}", "\x{3044}\x{3042}"));

    ok($undef->gt("a\x{300}a", "aa\x{300}"));
    ok($undef->lt("Ca\x{300}ca\x{302}", "ca\x{302}ca\x{300}"));
    ok($undef->lt("ca\x{300}ca\x{302}", "Ca\x{302}ca\x{300}"));
}

# 32..36
{
    my $empty = Unicode::Collate->new(
	table => "keys.txt",
	normalization => undef,
	backwards => [ ],
    );

    ok($empty->lt("AB", "BA"));
    ok($empty->lt("\x{3042}\x{3044}", "\x{3044}\x{3042}"));

    ok($empty->gt("a\x{300}a", "aa\x{300}"));
    ok($empty->lt("Ca\x{300}ca\x{302}", "ca\x{302}ca\x{300}"));
    ok($empty->lt("ca\x{300}ca\x{302}", "Ca\x{302}ca\x{300}"));
}

@


1.1.1.1
log
@import perl 5.16.3 from CPAN - worked on by Andrew Fresh and myself
@
text
@@


1.1.1.2
log
@Import perl-5.20.1
@
text
@d3 3
a5 6
    unless ('A' eq pack('U', 0x41)) {
	print "1..0 # Unicode::Collate cannot pack a Unicode code point\n";
	exit 0;
    }
    unless (0x41 == unpack('U', 'A')) {
	print "1..0 # Unicode::Collate cannot get a Unicode code point\n";
@

