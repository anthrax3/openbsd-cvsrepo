head	1.1;
branch	1.1.1;
access;
symbols
	OPENBSD_6_2:1.1.1.3.0.8
	OPENBSD_6_2_BASE:1.1.1.3
	PERL_5_24_2:1.1.1.3
	OPENBSD_6_1:1.1.1.3.0.12
	OPENBSD_6_1_BASE:1.1.1.3
	OPENBSD_6_0:1.1.1.3.0.10
	OPENBSD_6_0_BASE:1.1.1.3
	OPENBSD_5_9:1.1.1.3.0.4
	OPENBSD_5_9_BASE:1.1.1.3
	OPENBSD_5_8:1.1.1.3.0.6
	OPENBSD_5_8_BASE:1.1.1.3
	PERL_5_20_2:1.1.1.3
	OPENBSD_5_7:1.1.1.3.0.2
	OPENBSD_5_7_BASE:1.1.1.3
	PERL_5_20_1:1.1.1.3
	OPENBSD_5_6:1.1.1.2.0.4
	OPENBSD_5_6_BASE:1.1.1.2
	PERL_5_18_2:1.1.1.2
	PERL:1.1.1
	OPENBSD_5_5:1.1.1.1.0.6
	OPENBSD_5_5_BASE:1.1.1.1
	OPENBSD_5_4:1.1.1.1.0.2
	OPENBSD_5_4_BASE:1.1.1.1
	PERL_5_16_3:1.1.1.1
	CPAN:1.1.1;
locks; strict;
comment	@# @;
expand	@o@;


1.1
date	2013.03.25.20.08.31;	author sthen;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	2013.03.25.20.08.31;	author sthen;	state Exp;
branches;
next	1.1.1.2;

1.1.1.2
date	2014.03.24.14.58.59;	author afresh1;	state Exp;
branches;
next	1.1.1.3;

1.1.1.3
date	2014.11.17.20.53.02;	author afresh1;	state Exp;
branches;
next	;
commitid	B31cAbBIXiCqnL97;


desc
@@


1.1
log
@Initial revision
@
text
@
BEGIN {
    unless ("A" eq pack('U', 0x41)) {
	print "1..0 # Unicode::Collate " .
	    "cannot stringify a Unicode code point\n";
	exit 0;
    }
    if ($ENV{PERL_CORE}) {
	chdir('t') if -d 't';
	@@INC = $^O eq 'MacOS' ? qw(::lib) : qw(../lib);
    }
}

use strict;
use warnings;
BEGIN { $| = 1; print "1..25\n"; }
my $count = 0;
sub ok ($;$) {
    my $p = my $r = shift;
    if (@@_) {
	my $x = shift;
	$p = !defined $x ? !defined $r : !defined $r ? 0 : $r eq $x;
    }
    print $p ? "ok" : "not ok", ' ', ++$count, "\n";
}

use Unicode::Collate::Locale;

ok(1);

#########################

my $objTh = Unicode::Collate::Locale->
    new(locale => 'TH', normalization => undef);


ok($objTh->getlocale, 'th');

$objTh->change(level => 1);

# shifted

ok($objTh->eq("\x{E2F}", ""));
ok($objTh->eq("\x{E46}", ""));
ok($objTh->eq("\x{E4F}", ""));

# 5

$objTh->change(variable => "non-ignorable");

ok($objTh->lt("\x{E2F}", "\x{E46}"));
ok($objTh->lt("\x{E46}", "\x{E4F}"));

ok($objTh->lt("\x{E2E}", "\x{E4D}"));
ok($objTh->lt("\x{E4D}", "\x{E30}"));

ok($objTh->lt("\x{E44}", "\x{E3A}"));

# 10

ok($objTh->eq("\x{E4E}", ""));
ok($objTh->eq("\x{E4C}", ""));
ok($objTh->eq("\x{E47}", ""));
ok($objTh->eq("\x{E48}", ""));
ok($objTh->eq("\x{E49}", ""));
ok($objTh->eq("\x{E4A}", ""));

# 16

$objTh->change(level => 2);

ok($objTh->lt("\x{E4E}", "\x{E4C}"));
ok($objTh->lt("\x{E4C}", "\x{E47}"));
ok($objTh->lt("\x{E47}", "\x{E48}"));
ok($objTh->lt("\x{E48}", "\x{E49}"));
ok($objTh->lt("\x{E49}", "\x{E4A}"));
ok($objTh->lt("\x{E4A}", "\x{E4B}"));

ok($objTh->eq("\x{E32}", "\x{E45}"));

# 23

$objTh->change(level => 3);

ok($objTh->lt("\x{E32}", "\x{E45}"));

ok($objTh->eq("\x{E33}", "\x{E4D}\x{E32}"));

# 25
@


1.1.1.1
log
@import perl 5.16.3 from CPAN - worked on by Andrew Fresh and myself
@
text
@@


1.1.1.2
log
@Import perl-5.18.2

OK espie@@ sthen@@ deraadt@@
@
text
@d16 1
a16 1
BEGIN { $| = 1; print "1..55\n"; }
a45 2
ok($objTh->eq("\x{E5A}", ""));
ok($objTh->eq("\x{E5B}", ""));
d47 6
a52 1
# 7
a66 1
ok($objTh->eq("\x{E4B}", ""));
d68 1
a68 1
# 17
a79 3
ok($objTh->eq("\x{E32}\x{E4D}", "\x{E4D}\x{E32}"));
ok($objTh->eq("\x{E4D}\x{E32}", "\x{E33}"));
ok($objTh->eq("\x{E4D}\x{E45}", "\x{E45}\x{E4D}"));
d81 1
a81 1
# 27
a85 30
ok($objTh->lt("\x{E32}\x{E4D}", "\x{E4D}\x{E32}"));
ok($objTh->lt("\x{E4D}\x{E32}", "\x{E33}"));
ok($objTh->lt("\x{E4D}\x{E45}", "\x{E45}\x{E4D}"));

ok($objTh->eq("\x{E4F}", "\x{E2F}"));
ok($objTh->eq("\x{E2F}", "\x{E5A}"));
ok($objTh->eq("\x{E5A}", "\x{E5B}"));
ok($objTh->eq("\x{E5B}", "\x{E46}"));

# 35

$objTh->change(level => 4);

for my $t ("", "\x{E01}") {
    ok($objTh->lt("\x{E4F}$t", "\x{E2F}$t"));
    ok($objTh->lt("\x{E2F}$t", "\x{E5A}$t"));
    ok($objTh->lt("\x{E5A}$t", "\x{E5B}$t"));
    ok($objTh->lt("\x{E5B}$t", "\x{E46}$t"));
}

# 43

$objTh->change(level => 1);

ok($objTh->eq("\x{E4F}", "\x{E2F}"));
ok($objTh->eq("\x{E2F}", "\x{E5A}"));
ok($objTh->eq("\x{E5A}", "\x{E5B}"));
ok($objTh->eq("\x{E5B}", "\x{E46}"));

# 47
d87 1
a87 12
$objTh->change(variable => "non-ignorable");

for my $h (0, 1) {
    no warnings 'utf8';
    my $t = $h ? pack('U', 0xFFFF) : "";
    $objTh->change(highestFFFF => 1) if $h;

    ok($objTh->lt("\x{E4F}$t", "\x{E2F}"));
    ok($objTh->lt("\x{E2F}$t", "\x{E5A}"));
    ok($objTh->lt("\x{E5A}$t", "\x{E5B}"));
    ok($objTh->lt("\x{E5B}$t", "\x{E46}"));
}
d89 1
a89 1
# 55
@


1.1.1.3
log
@Import perl-5.20.1
@
text
@d3 3
a5 6
    unless ('A' eq pack('U', 0x41)) {
	print "1..0 # Unicode::Collate cannot pack a Unicode code point\n";
	exit 0;
    }
    unless (0x41 == unpack('U', 'A')) {
	print "1..0 # Unicode::Collate cannot get a Unicode code point\n";
@


