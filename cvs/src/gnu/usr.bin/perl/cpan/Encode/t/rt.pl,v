head	1.2;
access;
symbols
	OPENBSD_6_2:1.2.0.24
	OPENBSD_6_2_BASE:1.2
	PERL_5_24_2:1.1.1.1
	OPENBSD_6_1:1.2.0.28
	OPENBSD_6_1_BASE:1.2
	OPENBSD_6_0:1.2.0.26
	OPENBSD_6_0_BASE:1.2
	OPENBSD_5_9:1.2.0.20
	OPENBSD_5_9_BASE:1.2
	OPENBSD_5_8:1.2.0.22
	OPENBSD_5_8_BASE:1.2
	PERL_5_20_2:1.1.1.1
	OPENBSD_5_7:1.2.0.14
	OPENBSD_5_7_BASE:1.2
	PERL_5_20_1:1.1.1.1
	OPENBSD_5_6:1.2.0.18
	OPENBSD_5_6_BASE:1.2
	PERL_5_18_2:1.1.1.1
	PERL:1.1.1
	OPENBSD_5_5:1.2.0.16
	OPENBSD_5_5_BASE:1.2
	OPENBSD_5_4:1.2.0.12
	OPENBSD_5_4_BASE:1.2
	PERL_5_16_3:1.1.1.1
	OPENBSD_5_3:1.2.0.10
	OPENBSD_5_3_BASE:1.2
	OPENBSD_5_2:1.2.0.8
	OPENBSD_5_2_BASE:1.2
	OPENBSD_5_1_BASE:1.2
	OPENBSD_5_1:1.2.0.6
	OPENBSD_5_0:1.2.0.4
	OPENBSD_5_0_BASE:1.2
	OPENBSD_4_9:1.2.0.2
	OPENBSD_4_9_BASE:1.2
	PERL_5_12_2:1.1.1.1
	CPAN:1.1.1;
locks; strict;
comment	@# @;
expand	@o@;


1.2
date	2010.09.24.15.06.47;	author millert;	state Exp;
branches;
next	1.1;

1.1
date	2010.09.24.14.49.00;	author millert;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	2010.09.24.14.49.00;	author millert;	state Exp;
branches;
next	;


desc
@@


1.2
log
@merge in perl 5.12.2 plus local changes
@
text
@#!/usr/local/bin/perl
#
# $Id: rt.pl,v 2.1 2006/05/03 18:24:10 dankogai Exp $
#

BEGIN {
    my $ucmdir  = "ucm";
    if ($ENV{'PERL_CORE'}){
        chdir 't';
        unshift @@INC, '../lib';
        $ucmdir = "../ext/Encode/ucm";
    }
    require Config; import Config;
    if ($Config{'extensions'} !~ /\bEncode\b/) {
      print "1..0 # Skip: Encode was not built\n";
      exit 0;
    }
    if (ord("A") == 193) {
    print "1..0 # Skip: EBCDIC\n";
    exit 0;
    }
    use strict;
    require Test::More;
    our $DEBUG;
    our @@ucm;
    unless(@@ARGV){
    use File::Spec;
    Test::More->import(tests => 103);
    opendir my $dh, $ucmdir or die "$ucmdir:$!";
    @@ucm = 
        map {File::Spec->catfile($ucmdir, $_) } 
        sort grep {/\.ucm$/o} readdir($dh);
    closedir $dh;
    }else{
    Test::More->import("no_plan");
    $DEBUG = 1;
    @@ucm = @@ARGV;
    }
}

use strict;
use Encode qw/encode decode/;
our $DEBUG;
our @@ucm;

for my $ucm (@@ucm){
    my ($name, $nchar, $nrt, $nok) = rttest($ucm);
    $nok += 0;
    ok($nok == 0, "$ucm => $name ($nchar, $nrt, $nok)");
}

sub rttest{
    my $ucm = shift;
    my ($name, $nchar, $nrt, $nok);
    open my $rfh, "<$ucm" or die "$ucm:$!";
    # <U0000> \x00 |0 # <control>
    while(<$rfh>){
    s/#.*//o; /^$/ and next;
    unless ($name){
        /^<code_set_name>\s+"([^\"]+)"/io or next;
        $name = $1 and next;
    }else{
        /^<U([0-9a-f]+)>\s+(\S+)\s+\|(\d)/io or next;
        $nchar++;
        $3 == 0 or next;
        $nrt++;
        my $uni = chr(hex($1));
        my $enc = eval qq{ "$2" };
        decode($name, $enc) eq $uni or $nok++;
        encode($name, $uni) eq $enc or $nok++;
    }
    }
    return($name, $nchar, $nrt, $nok);
}
__END__
@


1.1
log
@Initial revision
@
text
@@


1.1.1.1
log
@Perl 5.12.2 from CPAN
@
text
@@
