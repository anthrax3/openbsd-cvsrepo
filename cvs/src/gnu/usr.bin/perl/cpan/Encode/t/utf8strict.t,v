head	1.1;
branch	1.1.1;
access;
symbols
	OPENBSD_6_1:1.1.1.2.0.14
	OPENBSD_6_1_BASE:1.1.1.2
	OPENBSD_6_0:1.1.1.2.0.16
	OPENBSD_6_0_BASE:1.1.1.2
	OPENBSD_5_9:1.1.1.2.0.10
	OPENBSD_5_9_BASE:1.1.1.2
	OPENBSD_5_8:1.1.1.2.0.12
	OPENBSD_5_8_BASE:1.1.1.2
	PERL_5_20_2:1.1.1.2
	OPENBSD_5_7:1.1.1.2.0.4
	OPENBSD_5_7_BASE:1.1.1.2
	PERL_5_20_1:1.1.1.2
	OPENBSD_5_6:1.1.1.2.0.8
	OPENBSD_5_6_BASE:1.1.1.2
	PERL_5_18_2:1.1.1.2
	PERL:1.1.1
	OPENBSD_5_5:1.1.1.2.0.6
	OPENBSD_5_5_BASE:1.1.1.2
	OPENBSD_5_4:1.1.1.2.0.2
	OPENBSD_5_4_BASE:1.1.1.2
	PERL_5_16_3:1.1.1.2
	OPENBSD_5_3:1.1.1.1.0.10
	OPENBSD_5_3_BASE:1.1.1.1
	OPENBSD_5_2:1.1.1.1.0.8
	OPENBSD_5_2_BASE:1.1.1.1
	OPENBSD_5_1_BASE:1.1.1.1
	OPENBSD_5_1:1.1.1.1.0.6
	OPENBSD_5_0:1.1.1.1.0.4
	OPENBSD_5_0_BASE:1.1.1.1
	OPENBSD_4_9:1.1.1.1.0.2
	OPENBSD_4_9_BASE:1.1.1.1
	PERL_5_12_2:1.1.1.1
	CPAN:1.1.1;
locks; strict;
comment	@# @;
expand	@o@;


1.1
date	2010.09.24.14.49.00;	author millert;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	2010.09.24.14.49.00;	author millert;	state Exp;
branches;
next	1.1.1.2;

1.1.1.2
date	2013.03.25.20.07.10;	author sthen;	state Exp;
branches;
next	;


desc
@@


1.1
log
@Initial revision
@
text
@#!../perl
our $DEBUG = @@ARGV;
our (%ORD, %SEQ, $NTESTS);
BEGIN {
     if ($ENV{'PERL_CORE'}){
         chdir 't';
         unshift @@INC, '../lib';
     }
     require Config; import Config;
     if ($Config{'extensions'} !~ /\bEncode\b/) {
         print "1..0 # Skip: Encode was not built\n";
     exit 0;
     }
     if ($] <= 5.008 and !$Config{perl_patchlevel}){
     print "1..0 # Skip: Perl 5.8.1 or later required\n";
     exit 0;
     }
     # http://smontagu.damowmow.com/utf8test.html
     %ORD = (
         0x00000080 => 0, # 2.1.2
         0x00000800 => 0, # 2.1.3
         0x00010000 => 0, # 2.1.4
         0x00200000 => 1, # 2.1.5
         0x00400000 => 1, # 2.1.6
         0x0000007F => 0, # 2.2.1 -- unmapped okay
         0x000007FF => 0, # 2.2.2
         0x0000FFFF => 1, # 2.2.3
         0x001FFFFF => 1, # 2.2.4
         0x03FFFFFF => 1, # 2.2.5
         0x7FFFFFFF => 1, # 2.2.6
         0x0000D800 => 1, # 5.1.1
         0x0000DB7F => 1, # 5.1.2
         0x0000D880 => 1, # 5.1.3
         0x0000DBFF => 1, # 5.1.4
         0x0000DC00 => 1, # 5.1.5
         0x0000DF80 => 1, # 5.1.6
         0x0000DFFF => 1, # 5.1.7
         # 5.2 "Paird UTF-16 surrogates skipped
         # because utf-8-strict raises exception at the first one
         0x0000FFFF => 1, # 5.3.1
        );
     $NTESTS +=  scalar keys %ORD;
     if (ord('A') == 193) {
	 %SEQ = (
		 qq/dd 64 73 73/    => 0, # 2.3.1
		 qq/dd 67 41 41/    => 0, # 2.3.2
		 qq/ee 42 73 73 73/ => 0, # 2.3.3
		 qq/f4 90 80 80/ => 1, # 2.3.4 -- out of range so NG
		 # "3 Malformed sequences" are checked by perl.
		 # "4 Overlong sequences"  are checked by perl.
		 );
     } else {
	 %SEQ = (
		 qq/ed 9f bf/    => 0, # 2.3.1
		 qq/ee 80 80/    => 0, # 2.3.2
		 qq/f4 8f bf bf/ => 0, # 2.3.3
		 qq/f4 90 80 80/ => 1, # 2.3.4 -- out of range so NG
		 # "3 Malformed sequences" are checked by perl.
		 # "4 Overlong sequences"  are checked by perl.
		 );
     }
     $NTESTS +=  scalar keys %SEQ;
}
use strict;
use Encode;
use utf8;
use Test::More tests => $NTESTS;

local($SIG{__WARN__}) = sub { $DEBUG and $@@ and print STDERR $@@ };

my $d = find_encoding("utf-8-strict");
for my $u (sort keys %ORD){
    my $c = chr($u);
    eval { $d->encode($c,1) };
    $DEBUG and $@@ and warn $@@;
    my $t = $@@ ? 1 : 0;
    is($t, $ORD{$u}, sprintf "U+%04X", $u);
}
for my $s (sort keys %SEQ){
    my $o = pack "C*" => map {hex} split /\s+/, $s;
    eval { $d->decode($o,1) };
    $DEBUG and $@@ and warn $@@;
    my $t = $@@ ? 1 : 0;
    is($t, $SEQ{$s}, $s);
}

__END__


@


1.1.1.1
log
@Perl 5.12.2 from CPAN
@
text
@@


1.1.1.2
log
@import perl 5.16.3 from CPAN - worked on by Andrew Fresh and myself
@
text
@a18 1
     # The numbers below, like 2.1.2 are test numbers on this web page
d47 1
a47 1
		 qq/ee 42 73 73 71/ => 0, # 2.3.3
d56 1
a56 1
		 qq/f4 8f bf bd/ => 0, # 2.3.3
@

