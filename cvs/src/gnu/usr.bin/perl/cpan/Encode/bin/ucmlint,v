head	1.3;
access;
symbols
	PERL_5_24_2:1.1.1.2
	OPENBSD_6_1:1.3.0.6
	OPENBSD_6_1_BASE:1.3
	OPENBSD_6_0:1.3.0.4
	OPENBSD_6_0_BASE:1.3
	OPENBSD_5_9:1.2.0.20
	OPENBSD_5_9_BASE:1.2
	OPENBSD_5_8:1.2.0.22
	OPENBSD_5_8_BASE:1.2
	PERL_5_20_2:1.1.1.1
	OPENBSD_5_7:1.2.0.14
	OPENBSD_5_7_BASE:1.2
	PERL_5_20_1:1.1.1.1
	OPENBSD_5_6:1.2.0.18
	OPENBSD_5_6_BASE:1.2
	PERL_5_18_2:1.1.1.1
	PERL:1.1.1
	OPENBSD_5_5:1.2.0.16
	OPENBSD_5_5_BASE:1.2
	OPENBSD_5_4:1.2.0.12
	OPENBSD_5_4_BASE:1.2
	PERL_5_16_3:1.1.1.1
	OPENBSD_5_3:1.2.0.10
	OPENBSD_5_3_BASE:1.2
	OPENBSD_5_2:1.2.0.8
	OPENBSD_5_2_BASE:1.2
	OPENBSD_5_1_BASE:1.2
	OPENBSD_5_1:1.2.0.6
	OPENBSD_5_0:1.2.0.4
	OPENBSD_5_0_BASE:1.2
	OPENBSD_4_9:1.2.0.2
	OPENBSD_4_9_BASE:1.2
	PERL_5_12_2:1.1.1.1
	CPAN:1.1.1;
locks; strict;
comment	@# @;
expand	@o@;


1.3
date	2016.07.25.10.53.01;	author afresh1;	state Exp;
branches;
next	1.2;
commitid	FHUgABTHZQuYQh2B;

1.2
date	2010.09.24.15.06.47;	author millert;	state Exp;
branches
	1.2.20.1
	1.2.22.1;
next	1.1;

1.1
date	2010.09.24.14.48.59;	author millert;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	2010.09.24.14.48.59;	author millert;	state Exp;
branches;
next	1.1.1.2;

1.1.1.2
date	2017.08.14.13.45.35;	author afresh1;	state Exp;
branches;
next	;
commitid	fAzrs78vdW2Yfc6A;

1.2.20.1
date	2016.08.05.01.01.37;	author afresh1;	state Exp;
branches;
next	;
commitid	HjAJx2yjL4A8HWon;

1.2.22.1
date	2016.08.05.01.00.53;	author afresh1;	state Exp;
branches;
next	;
commitid	wK3bUiy9jNch0Key;


desc
@@


1.3
log
@Patch perl CVE-2016-1238

The problem relates to Perl 5 ("perl") loading modules from the
includes directory array ("@@INC") in which the last element is the
current directory (".").  That means that, when "perl" wants to
load a module (during first compilation or during lazy loading of
a module in run-time), perl will look for the module in the current
directory at the end, since '.' is the last include directory in
its array of include directories to seek. The issue is with requiring
libraries that are in "." but are not otherwise installed.

The major problem with this behavior is that it unexpectedly puts
a user at risk whenever they execute any Perl scripts from a directory
that is writable by other accounts on the system. For instance, if
a user is logged in as root and changes directory into /tmp or an
account's home directory, it is possible to now run any shell
commands that are written in C, Python or Ruby without fear.

The same isn't true for any shell commands that are written in Perl,
since a significant proportion of Perl scripts will execute code
in the current working directory whenever they are run. For example,
if a user on a shared system creates the file /tmp/Pod/Perldoc/Toterm.pm,
and then I log in as root, change directory to /tmp, and run "perldoc
perlrun", it will execute the code they have placed in the file.


ok deraadt@@
@
text
@#!/usr/local/bin/perl
#
# $Id: ucmlint,v 2.2 2008/03/12 09:51:11 dankogai Exp $
#

BEGIN { pop @@INC if $INC[-1] eq '.' }
use strict;
our  $VERSION = do { my @@r = (q$Revision: 2.2 $ =~ /\d+/g); sprintf "%d."."%02d" x $#r, @@r };

use Getopt::Std;
our %Opt;
getopts("Dehfv", \%Opt);

if ($Opt{e}){
   eval{ require Encode; };
   $@@ and die "can't load Encode : $@@";
}

$Opt{h} and help();
@@ARGV or help();

sub help{
    print <<"";
$0 -[Dehfv] [ucm files ...]
  -D debug mode on
  -e test with Encode module also (requires perl 5.7.3 or higher)
  -h shows this message
  -f forces roundtrip check even for |[123]
  -v verbose mode

}

$| = 1;
my (%Hdr, %U2E, %E2U, %Fallback);
my $in_charmap = 0;
my $nerror = 0;
my $nwarning = 0;

sub nit($;$){
    my ($msg, $level) = @@_;
    my $lstr;
    if ($level == 2){
        $lstr = 'notice';
    }elsif ($level == 1){
        $lstr = 'warning'; $nwarning++;
    }else{
        $lstr = 'error'; $nerror++;
    }
    print "$ARGV:$lstr in line $.: $msg\n";
}

for $ARGV (@@ARGV){
    open UCM, $ARGV or die "$ARGV:$!";
    %Hdr = %U2E = %E2U = %Fallback = ();
    $in_charmap = $nerror = $nwarning = 0;
    $. = 0;
    while(<UCM>){
        chomp;
        s/\s*#.*$//o; /^$/ and next;
        if ($_ eq "CHARMAP"){ 
            $in_charmap = 1;
            for my $must (qw/code_set_name mb_cur_min mb_cur_max/){
                exists $Hdr{$must} or nit "<$must> nonexistent";
            }
            $Hdr{mb_cur_min} > $Hdr{mb_cur_max}
                and nit sprintf("mb_cur_min(%d) > mb_cur_max(%d)",
                                $Hdr{mb_cur_min},$Hdr{mb_cur_max});
            $in_charmap = 1;
            next;
        }
        unless ($in_charmap){
            my($hkey, $hvalue) = /^<(\S+)>\s+[\"\']?([^\"\']+)/o or next;
            $Opt{D} and warn "$hkey => $hvalue";
            if ($hkey eq "code_set_name"){ # name check
                exists $Hdr{code_set_name} 
                    and nit "Duplicate <code_set_name>: $hkey";
            }
            if ($hkey eq "code_set_alias"){ # alias check
                $hvalue eq $Hdr{code_set_name}
                    and nit qq(alias "$hvalue" is already in <code_set_name>);
            }
            $Hdr{$hkey} = $hvalue;
        }else{
            my $name = $Hdr{code_set_name};
            my($unistr, $encstr, $fb) = /^(\S+)\s+(\S+)\s(\S+)/o or next;
            $Opt{v} and nit $_, 2;
            my $uni = uniparse($unistr);
            my $enc = encparse($encstr);
            $fb =~ /^\|([0123])$/ or nit "malformed fallback: $fb";
            $fb = $1; 
            $Opt{f} and $fb = 0;
            unless ($fb == 3){ # check uni -> enc
                if (exists $U2E{$uni}){
                    nit "dupe encode map: U$uni => $U2E{$uni} and $enc", 1;
                }else{
                    $U2E{$uni} = $enc;
                    $Fallback{$uni}{$enc} = 1 if $fb == 1;
                    if ($Opt{e}) {
                        my $e = hex2enc($enc);
                        my $u = hex2uni($uni);
                        my $eu = Encode::encode($name, $u);
                        $e eq $eu
                            or nit qq(encode('$name', $uni) != $enc);
                    }
                }
            }
            unless ($fb == 1){  # check enc -> uni
                if (exists $E2U{$enc}){
                    nit "dupe decode map: $enc => U$E2U{$enc} and U$uni", 1;
                }else{
                    $E2U{$enc} = $uni;
                    $Fallback{$enc}{$uni} = 1 if $fb == 3;
                    if ($Opt{e}) {
                        my $e = hex2enc($enc);
                        my $u = hex2uni($uni);
                        $Opt{D} and warn "$uni, $enc";
                        my $de = Encode::decode($name, $e);
                        $de eq $u
                            or nit qq(decode('$name', $enc) != $uni);
                    }
                }
            }
            # warn "$uni, $enc, $fb";
        }
    }
    $in_charmap or nit "Where is CHARMAP?";
    checkRT();
    printf ("$ARGV: %s error%s found\n", 
            ($nerror == 0 ? 'no' : $nerror),
            ($nerror > 1 ? 's' : ''));
}

exit;

sub hex2enc{
    pack("C*", map {hex($_)} split(",", shift));
}
sub hex2uni{
    join("", map { chr(hex($_)) } split(",", shift));
}

sub checkRT{
    for my $uni (keys %E2U){
        my $enc = $U2E{$uni} or next; # okay
        $E2U{$U2E{$uni}} eq $uni or $Fallback{$uni}{$enc} or
            nit "RT failure: U$uni => $enc =>U$E2U{$U2E{$uni}}";
    }
    for my $enc (keys %E2U){
        my $uni = $E2U{$enc} or next; # okay
        $U2E{$E2U{$enc}} eq $enc or $Fallback{$enc}{$uni} or
            nit "RT failure: $enc => U$uni => $U2E{$E2U{$enc}}";
    }
}


sub uniparse{
    my $str = shift;
    my @@u;
    push @@u, $1 while($str =~ /\G<U(.*?)>/ig);
    for my $u (@@u){
        $u =~ /^([0-9A-Za-z]+)$/o
            or nit "malformed Unicode character: $u";
    }
    return join(',', @@u);
}

sub encparse{
    my $str = shift;
    my @@e;
    for my $e (split /\\x/io, $str){
        $e or next; # first \x
        $e =~ /^([0-9A-Za-z]{1,2})$/io
            or nit "Hex $e in $str is bogus";
        push @@e, $1;
    }
    return join(',', @@e);
}



__END__

A UCM file looks like this.

  #
  # Comments
  #
  <code_set_name> "US-ascii" # Required
  <code_set_alias> "ascii"   # Optional
  <mb_cur_min> 1             # Required; usually 1
  <mb_cur_max> 1             # Max. # of bytes/char
  <subchar> \x3F             # Substitution char
  #
  CHARMAP
  <U0000> \x00 |0 # <control>
  <U0001> \x01 |0 # <control>
  <U0002> \x02 |0 # <control>
  ....
  <U007C> \x7C |0 # VERTICAL LINE
  <U007D> \x7D |0 # RIGHT CURLY BRACKET
  <U007E> \x7E |0 # TILDE
  <U007F> \x7F |0 # <control>
  END CHARMAP

@


1.2
log
@merge in perl 5.12.2 plus local changes
@
text
@d6 1
@


1.2.20.1
log
@Patch perl CVE-2016-1238

The problem relates to Perl 5 ("perl") loading modules from the
includes directory array ("@@INC") in which the last element is the
current directory (".").  That means that, when "perl" wants to
load a module (during first compilation or during lazy loading of
a module in run-time), perl will look for the module in the current
directory at the end, since '.' is the last include directory in
its array of include directories to seek. The issue is with requiring
libraries that are in "." but are not otherwise installed.

The major problem with this behavior is that it unexpectedly puts
a user at risk whenever they execute any Perl scripts from a directory
that is writable by other accounts on the system. For instance, if
a user is logged in as root and changes directory into /tmp or an
account's home directory, it is possible to now run any shell
commands that are written in C, Python or Ruby without fear.

The same isn't true for any shell commands that are written in Perl,
since a significant proportion of Perl scripts will execute code
in the current working directory whenever they are run. For example,
if a user on a shared system creates the file /tmp/Pod/Perldoc/Toterm.pm,
and then I log in as root, change directory to /tmp, and run "perldoc
perlrun", it will execute the code they have placed in the file.
@
text
@a5 1
BEGIN { pop @@INC if $INC[-1] eq '.' }
@


1.2.22.1
log
@Patch perl CVE-2016-1238

The problem relates to Perl 5 ("perl") loading modules from the
includes directory array ("@@INC") in which the last element is the
current directory (".").  That means that, when "perl" wants to
load a module (during first compilation or during lazy loading of
a module in run-time), perl will look for the module in the current
directory at the end, since '.' is the last include directory in
its array of include directories to seek. The issue is with requiring
libraries that are in "." but are not otherwise installed.

The major problem with this behavior is that it unexpectedly puts
a user at risk whenever they execute any Perl scripts from a directory
that is writable by other accounts on the system. For instance, if
a user is logged in as root and changes directory into /tmp or an
account's home directory, it is possible to now run any shell
commands that are written in C, Python or Ruby without fear.

The same isn't true for any shell commands that are written in Perl,
since a significant proportion of Perl scripts will execute code
in the current working directory whenever they are run. For example,
if a user on a shared system creates the file /tmp/Pod/Perldoc/Toterm.pm,
and then I log in as root, change directory to /tmp, and run "perldoc
perlrun", it will execute the code they have placed in the file.
@
text
@a5 1
BEGIN { pop @@INC if $INC[-1] eq '.' }
@


1.1
log
@Initial revision
@
text
@@


1.1.1.1
log
@Perl 5.12.2 from CPAN
@
text
@@


1.1.1.2
log
@Import perl-5.24.2
@
text
@a5 1
BEGIN { pop @@INC if $INC[-1] eq '.' }
@

