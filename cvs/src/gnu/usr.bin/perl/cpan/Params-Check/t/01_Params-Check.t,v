head	1.1;
branch	1.1.1;
access;
symbols
	OPENBSD_6_2:1.1.1.2.0.14
	OPENBSD_6_2_BASE:1.1.1.2
	PERL_5_24_2:1.1.1.2
	OPENBSD_6_1:1.1.1.2.0.18
	OPENBSD_6_1_BASE:1.1.1.2
	OPENBSD_6_0:1.1.1.2.0.16
	OPENBSD_6_0_BASE:1.1.1.2
	OPENBSD_5_9:1.1.1.2.0.10
	OPENBSD_5_9_BASE:1.1.1.2
	OPENBSD_5_8:1.1.1.2.0.12
	OPENBSD_5_8_BASE:1.1.1.2
	PERL_5_20_2:1.1.1.2
	OPENBSD_5_7:1.1.1.2.0.4
	OPENBSD_5_7_BASE:1.1.1.2
	PERL_5_20_1:1.1.1.2
	OPENBSD_5_6:1.1.1.2.0.8
	OPENBSD_5_6_BASE:1.1.1.2
	PERL_5_18_2:1.1.1.2
	PERL:1.1.1
	OPENBSD_5_5:1.1.1.2.0.6
	OPENBSD_5_5_BASE:1.1.1.2
	OPENBSD_5_4:1.1.1.2.0.2
	OPENBSD_5_4_BASE:1.1.1.2
	PERL_5_16_3:1.1.1.2
	OPENBSD_5_3:1.1.1.1.0.10
	OPENBSD_5_3_BASE:1.1.1.1
	OPENBSD_5_2:1.1.1.1.0.8
	OPENBSD_5_2_BASE:1.1.1.1
	OPENBSD_5_1_BASE:1.1.1.1
	OPENBSD_5_1:1.1.1.1.0.6
	OPENBSD_5_0:1.1.1.1.0.4
	OPENBSD_5_0_BASE:1.1.1.1
	OPENBSD_4_9:1.1.1.1.0.2
	OPENBSD_4_9_BASE:1.1.1.1
	PERL_5_12_2:1.1.1.1
	CPAN:1.1.1;
locks; strict;
comment	@# @;
expand	@o@;


1.1
date	2010.09.24.14.48.56;	author millert;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	2010.09.24.14.48.56;	author millert;	state Exp;
branches;
next	1.1.1.2;

1.1.1.2
date	2013.03.25.20.07.58;	author sthen;	state Exp;
branches;
next	;


desc
@@


1.1
log
@Initial revision
@
text
@use strict;
use Test::More 'no_plan';

### use && import ###
BEGIN {
    use_ok( 'Params::Check' );
    Params::Check->import(qw|check last_error allow|);
}    

### verbose is good for debugging ###
$Params::Check::VERBOSE = $Params::Check::VERBOSE = $ARGV[0] ? 1 : 0;

### basic things first, allow function ###

use constant FALSE  => sub { 0 };
use constant TRUE   => sub { 1 };

### allow tests ###
{   ok( allow( 42, qr/^\d+$/ ), "Allow based on regex" );
    ok( allow( $0, $0),         "   Allow based on string" );
    ok( allow( 42, [0,42] ),    "   Allow based on list" );
    ok( allow( 42, [50,sub{1}]),"   Allow based on list containing sub");
    ok( allow( 42, TRUE ),      "   Allow based on constant sub" );
    ok(!allow( $0, qr/^\d+$/ ), "Disallowing based on regex" );
    ok(!allow( 42, $0 ),        "   Disallowing based on string" );
    ok(!allow( 42, [0,$0] ),    "   Disallowing based on list" );
    ok(!allow( 42, [50,sub{0}]),"   Disallowing based on list containing sub");
    ok(!allow( 42, FALSE ),     "   Disallowing based on constant sub" );

    ### check that allow short circuits where required 
    {   my $sub_called;
        allow( 1, [ 1, sub { $sub_called++ } ] );
        ok( !$sub_called,       "Allow short-circuits properly" );
    }        

    ### check if the subs for allow get what you expect ###
    for my $thing (1,'foo',[1]) {
        allow( $thing, 
           sub { is_deeply(+shift,$thing,  "Allow coderef gets proper args") } 
        );
    }
}
### default tests ###
{   
    my $tmpl =  {
        foo => { default => 1 }
    };
    
    ### empty args first ###
    {   my $args = check( $tmpl, {} );

        ok( $args,              "check() call with empty args" );
        is( $args->{'foo'}, 1,  "   got default value" );
    }
    
    ### now provide an alternate value ###
    {   my $try  = { foo => 2 };
        my $args = check( $tmpl, $try );
        
        ok( $args,              "check() call with defined args" );
        is_deeply( $args, $try, "   found provided value in rv" );
    }

    ### now provide a different case ###
    {   my $try  = { FOO => 2 };
        my $args = check( $tmpl, $try );
        ok( $args,              "check() call with alternate case" );
        is( $args->{foo}, 2,    "   found provided value in rv" );
    }

    ### now see if we can strip leading dashes ###
    {   local $Params::Check::STRIP_LEADING_DASHES = 1;
        my $try  = { -foo => 2 };
        my $get  = { foo  => 2 };
        
        my $args = check( $tmpl, $try );
        ok( $args,              "check() call with leading dashes" );
        is_deeply( $args, $get, "   found provided value in rv" );
    }
}

### preserve case tests ###
{   my $tmpl = { Foo => { default => 1 } };
    
    for (1,0) {
        local $Params::Check::PRESERVE_CASE = $_;
        
        my $expect = $_ ? { Foo => 42 } : { Foo => 1 };
        
        my $rv = check( $tmpl, { Foo => 42 } );
        ok( $rv,                "check() call using PRESERVE_CASE: $_" );
        is_deeply($rv, $expect, "   found provided value in rv" );
    }             
}


### unknown tests ###
{   
    ### disallow unknowns ###
    {        
        my $rv = check( {}, { foo => 42 } );
    
        is_deeply( $rv, {},     "check() call with unknown arguments" ); 
        like( last_error(), qr/^Key 'foo' is not a valid key/,
                                "   warning recorded ok" );
    }
    
    ### allow unknown ###
    {
        local   $Params::Check::ALLOW_UNKNOWN = 1;
        my $rv = check( {}, { foo => 42 } );        
        
        is_deeply( $rv, { foo => 42 },
                                "check call() with unknown args allowed" );
    }
}

### store tests ###
{   my $foo;
    my $tmpl = {
        foo => { store => \$foo }
    };

    ### with/without store duplicates ###
    for( 1, 0 ) {
        local   $Params::Check::NO_DUPLICATES = $_;
        
        my $expect = $_ ? undef : 42;
        
        my $rv = check( $tmpl, { foo => 42 } );
        ok( $rv,                    "check() call with store key, no_dup: $_" );
        is( $foo, 42,               "   found provided value in variable" );
        is( $rv->{foo}, $expect,    "   found provided value in variable" );
    }
}    

### no_override tests ###
{   my $tmpl = {
        foo => { no_override => 1, default => 42 },
    };
    
    my $rv = check( $tmpl, { foo => 13 } );        
    ok( $rv,                    "check() call with no_override key" );
    is( $rv->{'foo'}, 42,       "   found default value in rv" );

    like( last_error(), qr/^You are not allowed to override key/, 
                                "   warning recorded ok" );
}

### strict_type tests ###
{   my @@list = (
        [ { strict_type => 1, default => [] },  0 ],
        [ { default => [] },                    1 ],
    );

    ### check for strict_type global, and in the template key ###
    for my $aref (@@list) {

        my $tmpl = { foo => $aref->[0] };
        local   $Params::Check::STRICT_TYPE = $aref->[1];
                
        ### proper value ###    
        {   my $rv = check( $tmpl, { foo => [] } );
            ok( $rv,                "check() call with strict_type enabled" );
            is( ref $rv->{foo}, 'ARRAY',
                                    "   found provided value in rv" );
        }
        
        ### improper value ###
        {   my $rv = check( $tmpl, { foo => {} } );
            ok( !$rv,               "check() call with strict_type violated" );
            like( last_error(), qr/^Key 'foo' needs to be of type 'ARRAY'/, 
                                    "   warning recorded ok" );
        }
    }
}          

### required tests ###
{   my $tmpl = {
        foo => { required => 1 }
    };
    
    ### required value provided ###
    {   my $rv = check( $tmpl, { foo => 42 } );
        ok( $rv,                    "check() call with required key" );
        is( $rv->{foo}, 42,         "   found provided value in rv" );
    }
    
    ### required value omitted ###
    {   my $rv = check( $tmpl, { } );
        ok( !$rv,                   "check() call with required key omitted" );
        like( last_error, qr/^Required option 'foo' is not provided/,
                                    "   warning recorded ok" );            
    }
}

### defined tests ###
{   my @@list = (
        [ { defined => 1, default => 1 },  0 ],
        [ { default => 1 },                1 ],
    );

    ### check for strict_type global, and in the template key ###
    for my $aref (@@list) {

        my $tmpl = { foo => $aref->[0] };
        local   $Params::Check::ONLY_ALLOW_DEFINED = $aref->[1];
                
        ### value provided defined ###
        {   my $rv = check( $tmpl, { foo => 42 } );
            ok( $rv,                "check() call with defined key" );
            is( $rv->{foo}, 42,     "   found provided value in rv" );
        }
        
        ### value provided undefined ###
        {   my $rv = check( $tmpl, { foo => undef } );
            ok( !$rv,               "check() call with defined key undefined" );
            like( last_error, qr/^Key 'foo' must be defined when passed/,
                                    "   warning recorded ok" );
        }                                             
    }
}

### check + allow tests ###
{   ### check if the subs for allow get what you expect ###
    for my $thing (1,'foo',[1]) {
        my $tmpl = {
            foo => { allow =>
                    sub { is_deeply(+shift,$thing,  
                                    "   Allow coderef gets proper args") } 
            }
        };
        
        my $rv = check( $tmpl, { foo => $thing } );
        ok( $rv,                    "check() call using allow key" );  
    }
}

### invalid key tests 
{   my $tmpl = { foo => { allow => sub { 0 } } };
    
    for my $val ( 1, 'foo', [], bless({},__PACKAGE__) ) {
        my $rv      = check( $tmpl, { foo => $val } );
        my $text    = "Key 'foo' ($val) is of invalid type";
        my $re      = quotemeta $text;
        
        ok(!$rv,                    "check() fails with unalllowed value" );
        like(last_error(), qr/$re/, "   $text" );
    }
}

### warnings fatal test
{   my $tmpl = { foo => { allow => sub { 0 } } };

    local $Params::Check::WARNINGS_FATAL = 1;

    eval { check( $tmpl, { foo => 1 } ) };      

    ok( $@@,             "Call dies with fatal toggled" );
    like( $@@,           qr/invalid type/,
                            "   error stored ok" );
}

### store => \$foo tests
{   ### quell warnings
    local $SIG{__WARN__} = sub {};
    
    my $tmpl = { foo => { store => '' } };
    check( $tmpl, {} );
    
    my $re = quotemeta q|Store variable for 'foo' is not a reference!|;
    like(last_error(), qr/$re/, "Caught non-reference 'store' variable" );
}    

### edge case tests ###
{   ### if key is not provided, and value is '', will P::C treat
    ### that correctly? 
    my $tmpl = { foo => { default => '' } };
    my $rv   = check( $tmpl, {} );
    
    ok( $rv,                    "check() call with default = ''" );
    ok( exists $rv->{foo},      "   rv exists" );
    ok( defined $rv->{foo},     "   rv defined" );
    ok( !$rv->{foo},            "   rv false" );
    is( $rv->{foo}, '',         "   rv = '' " );
}

### big template test ###
{
    my $lastname;
    
    ### the template to check against ###
    my $tmpl = {
        firstname   => { required   => 1, defined => 1 },
        lastname    => { required   => 1, store => \$lastname },
        gender      => { required   => 1,
                         allow      => [qr/M/i, qr/F/i],
                    },
        married     => { allow      => [0,1] },
        age         => { default    => 21,
                         allow      => qr/^\d+$/,
                    },
        id_list     => { default        => [],
                         strict_type    => 1
                    },
        phone       => { allow          => sub { 1 if +shift } },
        bureau      => { default        => 'NSA',
                         no_override    => 1
                    },
    };

    ### the args to send ###
    my $try = {
        firstname   => 'joe',
        lastname    => 'jackson',
        gender      => 'M',
        married     => 1,
        age         => 21,
        id_list     => [1..3],
        phone       => '555-8844',
    };

    ### the rv we expect ###
    my $get = { %$try, bureau => 'NSA' };

    my $rv = check( $tmpl, $try );
    
    ok( $rv,                "elaborate check() call" );
    is_deeply( $rv, $get,   "   found provided values in rv" );
    is( $rv->{lastname}, $lastname, 
                            "   found provided values in rv" );
}

### $Params::Check::CALLER_DEPTH test
{
    sub wrapper { check  ( @@_ ) };
    sub inner   { wrapper( @@_ ) };
    sub outer   { inner  ( @@_ ) };
    outer( { dummy => { required => 1 }}, {} );

    like( last_error, qr/for .*::wrapper by .*::inner$/,
                            "wrong caller without CALLER_DEPTH" );

    local $Params::Check::CALLER_DEPTH = 1;
    outer( { dummy => { required => 1 }}, {} );

    like( last_error, qr/for .*::inner by .*::outer$/,
                            "right caller with CALLER_DEPTH" );
}

### test: #23824: Bug concering the loss of the last_error 
### message when checking recursively.
{   ok( 1,                      "Test last_error() on recursive check() call" ); 
    
    ### allow sub to call
    my $clear   = sub { check( {}, {} ) if shift; 1; };

    ### recursively call check() or not?
    for my $recurse ( 0, 1 ) {         
  
        check(  
            { a => { defined => 1 },
              b => { allow   => sub { $clear->( $recurse ) } },
            },
            { a => undef, b => undef }
        );       
    
        ok( last_error(),       "   last_error() with recurse: $recurse" );
    }
}

@


1.1.1.1
log
@Perl 5.12.2 from CPAN
@
text
@@


1.1.1.2
log
@import perl 5.16.3 from CPAN - worked on by Andrew Fresh and myself
@
text
@d8 1
a8 1
}
d30 1
a30 1
    ### check that allow short circuits where required
d34 1
a34 1
    }
d38 2
a39 2
        allow( $thing,
           sub { is_deeply(+shift,$thing,  "Allow coderef gets proper args") }
d44 1
a44 1
{
d48 1
a48 1

d55 1
a55 1

d59 1
a59 1

d75 1
a75 1

d84 1
a84 1

d87 1
a87 1

d89 1
a89 1

d93 1
a93 1
    }
d98 1
a98 1
{
d100 1
a100 1
    {
d102 2
a103 2

        is_deeply( $rv, {},     "check() call with unknown arguments" );
d107 1
a107 1

d111 2
a112 2
        my $rv = check( {}, { foo => 42 } );

d127 1
a127 1

d129 1
a129 1

d135 1
a135 1
}
d141 2
a142 2

    my $rv = check( $tmpl, { foo => 13 } );
d146 1
a146 1
    like( last_error(), qr/^You are not allowed to override key/,
d161 2
a162 2

        ### proper value ###
d168 1
a168 1

d172 1
a172 1
            like( last_error(), qr/^Key 'foo' needs to be of type 'ARRAY'/,
d176 1
a176 1
}
d182 1
a182 1

d188 1
a188 1

d193 1
a193 1
                                    "   warning recorded ok" );
d208 1
a208 1

d214 1
a214 1

d220 1
a220 1
        }
d229 2
a230 2
                    sub { is_deeply(+shift,$thing,
                                    "   Allow coderef gets proper args") }
d233 1
a233 1

d235 1
a235 1
        ok( $rv,                    "check() call using allow key" );
d239 1
a239 1
### invalid key tests
d241 1
a241 1

d246 2
a247 2

        ok(!$rv,                    "check() fails with unallowed value" );
a251 11
### warnings [rt.cpan.org #69626]
{
    local $Params::Check::WARNINGS_FATAL = 1;

    eval { check() };

    ok( $@@,             "Call dies with fatal toggled" );
    like( $@@,           qr/expects two arguments/,
                            "   error stored ok" );
}

d257 1
a257 1
    eval { check( $tmpl, { foo => 1 } ) };
d267 1
a267 1

d270 1
a270 1

d273 1
a273 1
}
d277 1
a277 1
    ### that correctly?
d280 1
a280 1

d291 1
a291 1

d327 1
a327 1

d330 1
a330 1
    is( $rv->{lastname}, $lastname,
d351 1
a351 1
### test: #23824: Bug concerning the loss of the last_error
d353 2
a354 2
{   ok( 1,                      "Test last_error() on recursive check() call" );

d359 3
a361 3
    for my $recurse ( 0, 1 ) {

        check(
d366 2
a367 2
        );

@

