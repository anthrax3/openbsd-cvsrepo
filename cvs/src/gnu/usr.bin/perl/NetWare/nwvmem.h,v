head	1.1;
branch	1.1.1;
access;
symbols
	OPENBSD_6_2:1.1.1.2.0.20
	OPENBSD_6_2_BASE:1.1.1.2
	PERL_5_24_2:1.1.1.2
	OPENBSD_6_1:1.1.1.2.0.18
	OPENBSD_6_1_BASE:1.1.1.2
	OPENBSD_6_0:1.1.1.2.0.16
	OPENBSD_6_0_BASE:1.1.1.2
	OPENBSD_5_9:1.1.1.2.0.10
	OPENBSD_5_9_BASE:1.1.1.2
	OPENBSD_5_8:1.1.1.2.0.12
	OPENBSD_5_8_BASE:1.1.1.2
	PERL_5_20_2:1.1.1.2
	OPENBSD_5_7:1.1.1.2.0.4
	OPENBSD_5_7_BASE:1.1.1.2
	PERL_5_20_1:1.1.1.2
	OPENBSD_5_6:1.1.1.2.0.8
	OPENBSD_5_6_BASE:1.1.1.2
	PERL_5_18_2:1.1.1.2
	PERL:1.1.1
	OPENBSD_5_5:1.1.1.2.0.6
	OPENBSD_5_5_BASE:1.1.1.2
	OPENBSD_5_4:1.1.1.2.0.2
	OPENBSD_5_4_BASE:1.1.1.2
	PERL_5_16_3:1.1.1.2
	OPENBSD_5_3:1.1.1.1.0.42
	OPENBSD_5_3_BASE:1.1.1.1
	OPENBSD_5_2:1.1.1.1.0.40
	OPENBSD_5_2_BASE:1.1.1.1
	OPENBSD_5_1_BASE:1.1.1.1
	OPENBSD_5_1:1.1.1.1.0.38
	OPENBSD_5_0:1.1.1.1.0.36
	OPENBSD_5_0_BASE:1.1.1.1
	OPENBSD_4_9:1.1.1.1.0.34
	OPENBSD_4_9_BASE:1.1.1.1
	PERL_5_12_2:1.1.1.1
	OPENBSD_4_8:1.1.1.1.0.32
	OPENBSD_4_8_BASE:1.1.1.1
	OPENBSD_4_7:1.1.1.1.0.28
	OPENBSD_4_7_BASE:1.1.1.1
	PERL_5_10_1:1.1.1.1
	OPENBSD_4_6:1.1.1.1.0.30
	OPENBSD_4_6_BASE:1.1.1.1
	OPENBSD_4_5:1.1.1.1.0.26
	OPENBSD_4_5_BASE:1.1.1.1
	PERL_5_10_0:1.1.1.1
	OPENBSD_4_4:1.1.1.1.0.24
	OPENBSD_4_4_BASE:1.1.1.1
	OPENBSD_4_3:1.1.1.1.0.22
	OPENBSD_4_3_BASE:1.1.1.1
	OPENBSD_4_2:1.1.1.1.0.20
	OPENBSD_4_2_BASE:1.1.1.1
	OPENBSD_4_1:1.1.1.1.0.18
	OPENBSD_4_1_BASE:1.1.1.1
	OPENBSD_4_0:1.1.1.1.0.16
	OPENBSD_4_0_BASE:1.1.1.1
	PERL_5_8_8:1.1.1.1
	OPENBSD_3_9:1.1.1.1.0.14
	OPENBSD_3_9_BASE:1.1.1.1
	OPENBSD_3_8:1.1.1.1.0.12
	OPENBSD_3_8_BASE:1.1.1.1
	OPENBSD_3_7:1.1.1.1.0.10
	OPENBSD_3_7_BASE:1.1.1.1
	PERL_5_8_6:1.1.1.1
	OPENBSD_3_6:1.1.1.1.0.8
	OPENBSD_3_6_BASE:1.1.1.1
	PERL_5_8_5:1.1.1.1
	PERL_5_8_3:1.1.1.1
	OPENBSD_3_5:1.1.1.1.0.6
	OPENBSD_3_5_BASE:1.1.1.1
	PERL_5_8_2:1.1.1.1
	OPENBSD_3_4:1.1.1.1.0.4
	OPENBSD_3_4_BASE:1.1.1.1
	OPENBSD_3_3:1.1.1.1.0.2
	OPENBSD_3_3_BASE:1.1.1.1
	PERL_5_8_0:1.1.1.1
	CPAN:1.1.1;
locks; strict;
comment	@ * @;
expand	@o@;


1.1
date	2002.10.27.22.15.02;	author millert;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	2002.10.27.22.15.02;	author millert;	state Exp;
branches;
next	1.1.1.2;

1.1.1.2
date	2013.03.25.20.09.11;	author sthen;	state Exp;
branches;
next	;


desc
@@


1.1
log
@Initial revision
@
text
@
/*
 * Copyright © 2001 Novell, Inc. All Rights Reserved.
 *
 * You may distribute under the terms of either the GNU General Public
 * License or the Artistic License, as specified in the README file.
 *
 */

/*
 * FILENAME		:	NWVMem.h
 * DESCRIPTION	:	Memory management for Perl Interpreter on NetWare.
 *                  Watcom's hash table is used to store memory pointers.
 *                  All malloc's, realloc's, free's go through this.
 * Author		:	HYAK, SGP
 * Date			:	Januray 2001.
 *
 */



#ifndef ___NWVMEM_H_INC___
#define ___NWVMEM_H_INC___


#include "win32ish.h"		// For "BOOL", "TRUE" and "FALSE"
#include <nwhashcls.h>		// CW changes
#include <nwmalloc.h>
#include "string.h"



class VMem
{
public:
    VMem();
    virtual ~VMem();
    virtual void* Malloc(size_t size);
    virtual void* Realloc(void* pMem, size_t size);
    virtual void Free(void* pMem);
	virtual void* Calloc(size_t num, size_t size);

protected:
	BOOL					m_dontTouchHashLists;
//	WCValHashTable<void*>*	m_allocList;		
	NWPerlHashList *m_allocList;			// CW changes
};




/*============================================================================================

 Function		:	fnAllocListHash

 Description	:	Hashing function for hash table of memory allocations.

 Parameters 	:	invalue	(IN).

 Returns		:	unsigned.

==============================================================================================*/

unsigned fnAllocListHash(void* const& invalue)
{
    return (((unsigned) invalue & 0x0000ff00) >> 8);
}



/*============================================================================================

 Function		:	fnFreeMemEntry

 Description	:	Called for each outstanding memory allocation at the end of a script run.
					Frees the outstanding allocations

 Parameters 	:	ptr	(IN).
					context (IN)

 Returns		:	Nothing.

==============================================================================================*/

void fnFreeMemEntry(void* ptr, void* context)
{
	VMem* pVMem = (VMem*) context;

	if(ptr && pVMem)
	{
		pVMem->Free(ptr);
		ptr=NULL;
		pVMem = NULL;
		context = NULL;
	}
}



/*============================================================================================

 Function		:	VMem Constructor

 Description	:	

 Parameters 	:	

 Returns		:	

==============================================================================================*/

VMem::VMem()
{
	//Constructor
	m_dontTouchHashLists = FALSE;
	m_allocList = NULL;
	// m_allocList = new WCValHashTable<void*> (fnAllocListHash, 256);  
	m_allocList = new NWPerlHashList();			// CW changes
}



/*============================================================================================

 Function		:	VMem Destructor

 Description	:	

 Parameters 	:	

 Returns		:	

==============================================================================================*/

VMem::~VMem(void)
{
	//Destructor
	m_dontTouchHashLists = TRUE;
	if (m_allocList)
	{
		m_allocList->forAll(fnFreeMemEntry, (void*) this);

		delete m_allocList;
		m_allocList = NULL;
	}
	m_dontTouchHashLists = FALSE;
}



/*============================================================================================

 Function		:	VMem::Malloc

 Description	:	Allocates memory.

 Parameters 	:	size	(IN)	-	Size of memory to be allocated.

 Returns		:	Pointer to the allocated memory block.

==============================================================================================*/

void* VMem::Malloc(size_t size)
{
	void *ptr = NULL;

	if (size <= 0)
		return NULL;

	ptr = malloc(size);
	if (ptr)
	{
		if(m_allocList)
			m_allocList->insert(ptr);
	}
	else
	{
		m_dontTouchHashLists = TRUE;
		if (m_allocList)
		{
			m_allocList->forAll(fnFreeMemEntry, (void*) this);
			delete m_allocList;
			m_allocList = NULL;
		}
		m_dontTouchHashLists = FALSE;

		// Serious error since memory allocation falied. So, exiting...
		ExitThread(TSR_THREAD, 1);
	}

	return(ptr);
}



/*============================================================================================

 Function		:	VMem::Realloc

 Description	:	Reallocates block of memory.

 Parameters 	:	block	(IN)	-	Points to a previously allocated memory block.
					size	(IN)	-	Size of memory to be allocated.

 Returns		:	Pointer to the allocated memory block.

==============================================================================================*/

void* VMem::Realloc(void* block, size_t size)
{
	void *ptr = NULL;

	if (size <= 0)
		return NULL;

	ptr = realloc(block, size);
	if (ptr)
	{
		if (block)
		{
			if (m_allocList)
				m_allocList->remove(block);
		}
		if (m_allocList)
			m_allocList->insert(ptr);
	}
	else
	{
		m_dontTouchHashLists = TRUE;
		if (m_allocList)
		{
			m_allocList->forAll(fnFreeMemEntry, (void*) this);
			delete m_allocList;
			m_allocList = NULL;
		}
		m_dontTouchHashLists = FALSE;

		// Serious error since memory allocation falied. So, exiting...
		ExitThread(TSR_THREAD, 1);
	}

	return(ptr);
}



/*============================================================================================

 Function		:	VMem::Calloc

 Description	:	Allocates and clears memory space for an array of objects.

 Parameters 	:	num	(IN)	-	Specifies the number of objects.
					size	(IN)	-	Size of each object.

 Returns		:	Pointer to the allocated memory block.

==============================================================================================*/

void* VMem::Calloc(size_t num, size_t size)
{
	void *ptr = NULL;

	if (size <= 0)
		return NULL;

	ptr = calloc(num, size);
	if (ptr)
	{
		if(m_allocList)
			m_allocList->insert(ptr);
	}
	else
	{
		m_dontTouchHashLists = TRUE;
		if (m_allocList)
		{
			m_allocList->forAll(fnFreeMemEntry, (void*) this);
			delete m_allocList;
			m_allocList = NULL;
		}
		m_dontTouchHashLists = FALSE;

		// Serious error since memory allocation falied. So, exiting...
		ExitThread(TSR_THREAD, 1);
	}

	return(ptr);
}



/*============================================================================================

 Function		:	VMem::Free

 Description	:	Frees allocated memory.

 Parameters 	:	p	(IN)	-	Points to the allocated memory.

 Returns		:	Nothing.

==============================================================================================*/

void VMem::Free(void* p)
{
	// Final clean up, free all the nodes from the hash list
	if (m_dontTouchHashLists)
	{
		if(p)
		{
			free(p);
			p = NULL;
		}
	}
	else
	{
		if(p && m_allocList)
		{
			if (m_allocList->remove(p))
			{
				free(p);
				p = NULL;
			}
			else
			{
				// If it comes here, that means that the memory pointer is not contained in the hash list.
				// But no need to free now, since if is deleted here, it will result in an abend!!
				// If the memory is still there, it will be cleaned during final cleanup anyway.
			}
		}
	}


	return;
}


#endif		//___NWVMEM_H_INC___

@


1.1.1.1
log
@stock perl 5.8.0 from CPAN
@
text
@@


1.1.1.2
log
@import perl 5.16.3 from CPAN - worked on by Andrew Fresh and myself
@
text
@d3 1
a3 1
 * Copyright Â© 2001 Novell, Inc. All Rights Reserved.
d16 1
a16 1
 * Date			:	January 2001.
@

