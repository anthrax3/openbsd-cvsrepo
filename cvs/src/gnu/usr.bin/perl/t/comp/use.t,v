head	1.10;
access;
symbols
	PERL_5_24_2:1.1.1.10
	OPENBSD_6_1:1.10.0.14
	OPENBSD_6_1_BASE:1.10
	OPENBSD_6_0:1.10.0.12
	OPENBSD_6_0_BASE:1.10
	OPENBSD_5_9:1.10.0.6
	OPENBSD_5_9_BASE:1.10
	OPENBSD_5_8:1.10.0.8
	OPENBSD_5_8_BASE:1.10
	PERL_5_20_2:1.1.1.10
	OPENBSD_5_7:1.10.0.2
	OPENBSD_5_7_BASE:1.10
	PERL_5_20_1:1.1.1.10
	OPENBSD_5_6:1.10.0.4
	OPENBSD_5_6_BASE:1.10
	PERL_5_18_2:1.1.1.10
	PERL:1.1.1
	OPENBSD_5_5:1.9.0.6
	OPENBSD_5_5_BASE:1.9
	OPENBSD_5_4:1.9.0.2
	OPENBSD_5_4_BASE:1.9
	PERL_5_16_3:1.1.1.9
	OPENBSD_5_3:1.8.0.10
	OPENBSD_5_3_BASE:1.8
	OPENBSD_5_2:1.8.0.8
	OPENBSD_5_2_BASE:1.8
	OPENBSD_5_1_BASE:1.8
	OPENBSD_5_1:1.8.0.6
	OPENBSD_5_0:1.8.0.4
	OPENBSD_5_0_BASE:1.8
	OPENBSD_4_9:1.8.0.2
	OPENBSD_4_9_BASE:1.8
	PERL_5_12_2:1.1.1.8
	OPENBSD_4_8:1.7.0.4
	OPENBSD_4_8_BASE:1.7
	OPENBSD_4_7:1.7.0.2
	OPENBSD_4_7_BASE:1.7
	PERL_5_10_1:1.1.1.7
	OPENBSD_4_6:1.6.0.6
	OPENBSD_4_6_BASE:1.6
	OPENBSD_4_5:1.6.0.2
	OPENBSD_4_5_BASE:1.6
	PERL_5_10_0:1.1.1.6
	OPENBSD_4_4:1.5.0.16
	OPENBSD_4_4_BASE:1.5
	OPENBSD_4_3:1.5.0.14
	OPENBSD_4_3_BASE:1.5
	OPENBSD_4_2:1.5.0.12
	OPENBSD_4_2_BASE:1.5
	OPENBSD_4_1:1.5.0.10
	OPENBSD_4_1_BASE:1.5
	OPENBSD_4_0:1.5.0.8
	OPENBSD_4_0_BASE:1.5
	PERL_5_8_8:1.1.1.5
	OPENBSD_3_9:1.5.0.6
	OPENBSD_3_9_BASE:1.5
	OPENBSD_3_8:1.5.0.4
	OPENBSD_3_8_BASE:1.5
	OPENBSD_3_7:1.5.0.2
	OPENBSD_3_7_BASE:1.5
	PERL_5_8_6:1.1.1.5
	OPENBSD_3_6:1.4.0.8
	OPENBSD_3_6_BASE:1.4
	PERL_5_8_5:1.1.1.4
	PERL_5_8_3:1.1.1.4
	OPENBSD_3_5:1.4.0.6
	OPENBSD_3_5_BASE:1.4
	PERL_5_8_2:1.1.1.4
	OPENBSD_3_4:1.4.0.4
	OPENBSD_3_4_BASE:1.4
	OPENBSD_3_3:1.4.0.2
	OPENBSD_3_3_BASE:1.4
	PERL_5_8_0:1.1.1.4
	OPENBSD_3_2:1.3.0.6
	OPENBSD_3_2_BASE:1.3
	OPENBSD_3_1:1.3.0.4
	OPENBSD_3_1_BASE:1.3
	OPENBSD_3_0:1.3.0.2
	OPENBSD_3_0_BASE:1.3
	PERL_5_6_1:1.1.1.3
	OPENBSD_2_9:1.2.0.6
	OPENBSD_2_9_BASE:1.2
	OPENBSD_2_8:1.2.0.4
	OPENBSD_2_8_BASE:1.2
	OPENBSD_2_7:1.2.0.2
	OPENBSD_2_7_BASE:1.2
	PERL_5_6_0:1.1.1.2
	OPENBSD_2_6:1.1.0.8
	OPENBSD_2_6_BASE:1.1
	PERL_500503:1.1.1.1
	CPAN:1.1.1
	OPENBSD_2_5:1.1.0.6
	OPENBSD_2_5_BASE:1.1
	OPENBSD_2_4:1.1.0.4
	OPENBSD_2_4_BASE:1.1
	OPENBSD_2_3:1.1.0.2
	OPENBSD_2_3_BASE:1.1;
locks; strict;
comment	@# @;
expand	@o@;


1.10
date	2014.03.24.15.05.33;	author afresh1;	state Exp;
branches;
next	1.9;

1.9
date	2013.03.25.20.40.59;	author sthen;	state Exp;
branches;
next	1.8;

1.8
date	2010.09.24.15.07.05;	author millert;	state Exp;
branches;
next	1.7;

1.7
date	2009.10.12.18.30.27;	author millert;	state Exp;
branches;
next	1.6;

1.6
date	2008.09.29.17.36.18;	author millert;	state Exp;
branches;
next	1.5;

1.5
date	2005.01.15.21.30.39;	author millert;	state Exp;
branches;
next	1.4;

1.4
date	2002.10.27.22.25.35;	author millert;	state Exp;
branches;
next	1.3;

1.3
date	2001.05.24.18.36.06;	author millert;	state Exp;
branches;
next	1.2;

1.2
date	2000.04.06.17.07.58;	author millert;	state Exp;
branches;
next	1.1;

1.1
date	97.11.30.08.00.09;	author millert;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	99.04.29.22.41.19;	author millert;	state Exp;
branches;
next	1.1.1.2;

1.1.1.2
date	2000.04.06.16.10.39;	author millert;	state Exp;
branches;
next	1.1.1.3;

1.1.1.3
date	2001.05.24.18.25.04;	author millert;	state Exp;
branches;
next	1.1.1.4;

1.1.1.4
date	2002.10.27.22.15.10;	author millert;	state Exp;
branches;
next	1.1.1.5;

1.1.1.5
date	2005.01.15.21.18.14;	author millert;	state Exp;
branches;
next	1.1.1.6;

1.1.1.6
date	2008.09.29.17.18.58;	author millert;	state Exp;
branches;
next	1.1.1.7;

1.1.1.7
date	2009.10.12.18.10.43;	author millert;	state Exp;
branches;
next	1.1.1.8;

1.1.1.8
date	2010.09.24.14.49.19;	author millert;	state Exp;
branches;
next	1.1.1.9;

1.1.1.9
date	2013.03.25.20.09.33;	author sthen;	state Exp;
branches;
next	1.1.1.10;

1.1.1.10
date	2014.03.24.14.59.09;	author afresh1;	state Exp;
branches;
next	;


desc
@perl 5.004_04
@


1.10
log
@Merge perl-5.18.2 plus local patches, remove old files

OK espie@@ sthen@@ deraadt@@
@
text
@#!./perl

BEGIN {
    chdir 't' if -d 't';
    @@INC = ('../lib', 'lib');
    $INC{"feature.pm"} = 1; # so we don't attempt to load feature.pm
}

print "1..84\n";

# Can't require test.pl, as we're testing the use/require mechanism here.

my $test = 1;

sub _ok {
    my ($type, $got, $expected, $name) = @@_;

    my $result;
    if ($type eq 'is') {
	$result = $got eq $expected;
    } elsif ($type eq 'isnt') {
	$result = $got ne $expected;
    } elsif ($type eq 'like') {
	$result = $got =~ $expected;
    } elsif ($type eq 'ok') {
	$result = not not $got;
    } else {
	die "Unexpected type '$type'$name";
    }
    if ($result) {
	if ($name) {
	    print "ok $test - $name\n";
	} else {
	    print "ok $test\n";
	}
    } else {
	if ($name) {
	    print "not ok $test - $name\n";
	} else {
	    print "not ok $test\n";
	}
	my @@caller = caller(1);
	print "# Failed test at $caller[1] line $caller[2]\n";
	print "# Got      '$got'\n";
	if ($type eq 'is') {
	    print "# Expected '$expected'\n";
	} elsif ($type eq 'isnt') {
	    print "# Expected not '$expected'\n";
	} elsif ($type eq 'like') {
	    print "# Expected $expected\n";
	} elsif ($type eq 'ok') {
	    print "# Expected a true value\n";
	}
    }
    $test = $test + 1;
    $result;
}

sub like ($$;$) {
    _ok ('like', @@_);
}
sub is ($$;$) {
    _ok ('is', @@_);
}
sub isnt ($$;$) {
    _ok ('isnt', @@_);
}
sub ok($;$) {
    _ok ('ok', shift, undef, @@_);
}

eval "use 5";           # implicit semicolon
is ($@@, '');

eval "use 5;";
is ($@@, '');

eval "{use 5}";         # [perl #70884]
is ($@@, '');

eval "{use 5   }";      # [perl #70884]
is ($@@, '');

# new style version numbers

eval q{ use v5.5.630; };
is ($@@, '');

eval q{ use 10.0.2; };
like ($@@, qr/^Perl v10\.0\.2 required/);

eval "use 5.000";	# implicit semicolon
is ($@@, '');

eval "use 5.000;";
is ($@@, '');

eval "use 6.000;";
like ($@@, qr/Perl v6\.0\.0 required--this is only \Q$^V\E, stopped/);

eval "no 6.000;";
is ($@@, '');

eval "no 5.000;";
like ($@@, qr/Perls since v5\.0\.0 too modern--this is \Q$^V\E, stopped/);

eval "use 5.6;";
like ($@@, qr/Perl v5\.600\.0 required \(did you mean v5\.6\.0\?\)--this is only \Q$^V\E, stopped/);

eval "use 5.8;";
like ($@@, qr/Perl v5\.800\.0 required \(did you mean v5\.8\.0\?\)--this is only \Q$^V\E, stopped/);

eval "use 5.9;";
like ($@@, qr/Perl v5\.900\.0 required \(did you mean v5\.9\.0\?\)--this is only \Q$^V\E, stopped/);

eval "use 5.10;";
like ($@@, qr/Perl v5\.100\.0 required \(did you mean v5\.10\.0\?\)--this is only \Q$^V\E, stopped/);

eval "use 5.11;";
like ($@@, qr/Perl v5\.110\.0 required \(did you mean v5\.11\.0\?\)--this is only \Q$^V\E, stopped/);

eval sprintf "use %.6f;", $];
is ($@@, '');


eval sprintf "use %.6f;", $] - 0.000001;
is ($@@, '');

eval sprintf("use %.6f;", $] + 1);
like ($@@, qr/Perl v6.\d+.\d+ required--this is only \Q$^V\E, stopped/);

eval sprintf "use %.6f;", $] + 0.00001;
like ($@@, qr/Perl v5.\d+.\d+ required--this is only \Q$^V\E, stopped/);

# check that "use 5.11.0" (and higher) loads strictures
eval 'use 5.11.0; ${"foo"} = "bar";';
like ($@@, qr/Can't use string \("foo"\) as a SCALAR ref while "strict refs" in use/);
# but that they can be disabled
eval 'use 5.11.0; no strict "refs"; ${"foo"} = "bar";';
is ($@@, "");
# and they are properly scoped
eval '{use 5.11.0;} ${"foo"} = "bar";';
is ($@@, "");
eval 'no strict; use 5.012; ${"foo"} = "bar"';
is $@@, "", 'explicit "no strict" overrides later ver decl';
eval 'use strict; use 5.01; ${"foo"} = "bar"';
like $@@, qr/^Can't use string/,
    'explicit use strict overrides later use 5.01';
eval 'use strict "subs"; use 5.012; ${"foo"} = "bar"';
like $@@, qr/^Can't use string/,
    'explicit use strict "subs" does not stop ver decl from enabling refs';
eval 'use 5.012; use 5.01; ${"foo"} = "bar"';
is $@@, "", 'use 5.01 overrides implicit strict from prev ver decl';
eval 'no strict "subs"; use 5.012; ${"foo"} = "bar"';
ok $@@, 'no strict subs allows ver decl to enable refs';
eval 'no strict "subs"; use 5.012; $nonexistent_pack_var';
ok $@@, 'no strict subs allows ver decl to enable vars';
eval 'no strict "refs"; use 5.012; fancy_bareword';
ok $@@, 'no strict refs allows ver decl to enable subs';
eval 'no strict "refs"; use 5.012; $nonexistent_pack_var';
ok $@@, 'no strict refs allows ver decl to enable subs';
eval 'no strict "vars"; use 5.012; ${"foo"} = "bar"';
ok $@@, 'no strict vars allows ver decl to enable refs';
eval 'no strict "vars"; use 5.012; ursine_word';
ok $@@, 'no strict vars allows ver decl to enable subs';


{ use test_use }	# check that subparse saves pending tokens

use test_use { () };
is ref $test_use::got[0], 'HASH', 'use parses arguments in term lexing cx';

local $test_use::VERSION = 1.0;

eval "use test_use 0.9";
is ($@@, '');

eval "use test_use 1.0";
is ($@@, '');

eval "use test_use 1.01";
isnt ($@@, '');

eval "use test_use 0.9 qw(fred)";
is ($@@, '');

is("@@test_use::got", "fred");

eval "use test_use 1.0 qw(joe)";
is ($@@, '');

is("@@test_use::got", "joe");

eval "use test_use 1.01 qw(freda)";
isnt($@@, '');

is("@@test_use::got", "joe");

{
    local $test_use::VERSION = 35.36;
    eval "use test_use v33.55";
    is ($@@, '');

    eval "use test_use v100.105";
    like ($@@, qr/test_use version v100.105.0 required--this is only version v35\.360\.0/);

    eval "use test_use 33.55";
    is ($@@, '');

    eval "use test_use 100.105";
    like ($@@, qr/test_use version 100.105 required--this is only version 35.36/);

    local $test_use::VERSION = '35.36';
    eval "use test_use v33.55";
    like ($@@, '');

    eval "use test_use v100.105";
    like ($@@, qr/test_use version v100.105.0 required--this is only version v35\.360\.0/);

    eval "use test_use 33.55";
    is ($@@, '');

    eval "use test_use 100.105";
    like ($@@, qr/test_use version 100.105 required--this is only version 35.36/);

    local $test_use::VERSION = v35.36;
    eval "use test_use v33.55";
    is ($@@, '');

    eval "use test_use v100.105";
    like ($@@, qr/test_use version v100.105.0 required--this is only version v35\.36\.0/);

    eval "use test_use 33.55";
    is ($@@, '');

    eval "use test_use 100.105";
    like ($@@, qr/test_use version 100.105 required--this is only version v35.36/);
}


{
    # Regression test for patch 14937: 
    #   Check that a .pm file with no package or VERSION doesn't core.
    # (git commit 2658f4d9934aba5f8b23afcc078dc12b3a40223)
    eval "use test_use_14937 3";
    like ($@@, qr/^test_use_14937 defines neither package nor VERSION--version check failed at/);
}

my @@ver = split /\./, sprintf "%vd", $^V;

foreach my $index (-3..+3) {
    foreach my $v (0, 1) {
	my @@parts = @@ver;
	if ($index) {
	    if ($index < 0) {
		# Jiggle one of the parts down
		--$parts[-$index - 1];
		if ($parts[-$index - 1] < 0) {
		    # perl's version number ends with '.0'
		    $parts[-$index - 1] = 0;
		    $parts[-$index - 2] -= 2;
		}
	    } else {
		# Jiggle one of the parts up
		++$parts[$index - 1];
	    }
	}
	my $v_version = sprintf "v%d.%d.%d", @@parts;
	my $version;
	if ($v) {
	    $version = $v_version;
	} else {
	    $version = $parts[0] + $parts[1] / 1000 + $parts[2] / 1000000;
	}

	eval "use $version";
	if ($index > 0) {
	    # The future
	    like ($@@,
		  qr/Perl $v_version required--this is only \Q$^V\E, stopped/,
		  "use $version");
	} else {
	    # The present or past
	    is ($@@, '', "use $version");
	}

	eval "no $version";
	if ($index <= 0) {
	    # The present or past
	    like ($@@,
		  qr/Perls since $v_version too modern--this is \Q$^V\E, stopped/,
		  "no $version");
	} else {
	    # future
	    is ($@@, '', "no $version");
	}
    }
}

@


1.9
log
@merge/resolve conflicts
(some more to do after this one)
@
text
@d9 1
a9 1
print "1..83\n";
d169 3
@


1.8
log
@merge in perl 5.12.2 plus local changes
@
text
@d9 1
a9 1
print "1..73\n";
d25 2
d51 2
d68 3
d144 23
@


1.7
log
@Merge in perl 5.10.1; part two
@
text
@d5 1
a5 1
    @@INC = '../lib';
d9 1
a9 1
print "1..63\n";
d40 1
a40 1
	my @@caller = caller(2);
d65 20
d112 3
d128 9
a136 1
{ use lib }	# check that subparse saves pending tokens
d138 1
a138 1
local $lib::VERSION = 1.0;
d140 3
a142 1
eval "use lib 0.9";
d145 1
a145 1
eval "use lib 1.0";
d148 1
a148 1
eval "use lib 1.01";
d151 1
a151 2

eval "use lib 0.9 qw(fred)";
d154 1
a154 5
if ($^O eq 'MacOS') {
    is($INC[0], ":fred:");
} else {
    is($INC[0], "fred");
}
d156 1
a156 1
eval "use lib 1.0 qw(joe)";
d159 1
d161 1
a161 8
if ($^O eq 'MacOS') {
    is($INC[0], ":joe:");
} else {
    is($INC[0], "joe");
}


eval "use lib 1.01 qw(freda)";
d164 1
a164 5
if ($^O eq 'MacOS') {
    isnt($INC[0], ":freda:");
} else {
    isnt($INC[0], "freda");
}
d167 2
a168 2
    local $lib::VERSION = 35.36;
    eval "use lib v33.55";
d171 2
a172 2
    eval "use lib v100.105";
    like ($@@, qr/lib version v100.105.0 required--this is only version v35\.360\.0/);
d174 1
a174 1
    eval "use lib 33.55";
d177 2
a178 2
    eval "use lib 100.105";
    like ($@@, qr/lib version 100.105 required--this is only version 35.36/);
d180 2
a181 2
    local $lib::VERSION = '35.36';
    eval "use lib v33.55";
d184 2
a185 2
    eval "use lib v100.105";
    like ($@@, qr/lib version v100.105.0 required--this is only version v35\.360\.0/);
d187 1
a187 1
    eval "use lib 33.55";
d190 2
a191 2
    eval "use lib 100.105";
    like ($@@, qr/lib version 100.105 required--this is only version 35.36/);
d193 2
a194 2
    local $lib::VERSION = v35.36;
    eval "use lib v33.55";
d197 2
a198 2
    eval "use lib v100.105";
    like ($@@, qr/lib version v100.105.0 required--this is only version v35\.36\.0/);
d200 1
a200 1
    eval "use lib 33.55";
d203 2
a204 2
    eval "use lib 100.105";
    like ($@@, qr/lib version 100.105 required--this is only version v35.36/);
d211 3
a213 6
    open F, ">xxx$$.pm" or die "Cannot open xxx$$.pm: $!\n";
    print F "1;\n";
    close F;
    eval "use lib '.'; use xxx$$ 3;";
    like ($@@, qr/^xxx$$ defines neither package nor VERSION--version check failed at/);
    unlink "xxx$$.pm";
@


1.6
log
@fix conflicts and merge in local changes to perl 5.10.0
@
text
@d193 1
a193 1
    open F, ">xxx.pm" or die "Cannot open xxx.pm: $!\n";
d196 3
a198 3
    eval "use lib '.'; use xxx 3;";
    like ($@@, qr/^xxx defines neither package nor VERSION--version check failed at/);
    unlink 'xxx.pm';
@


1.5
log
@sync in-tree perl with 5.8.6
@
text
@d6 1
d9 55
a63 1
print "1..28\n";
a64 1
my $i = 1;
d66 1
a66 5
if ($@@) {
    print STDERR $@@,"\n";
    print "not ";
}
print "ok ",$i++,"\n";
d69 22
a90 5
if ($@@) {
    print STDERR $@@,"\n";
    print "not ";
}
print "ok ",$i++,"\n";
d93 1
a93 5
if ($@@) {
    print STDERR $@@,"\n";
    print "not ";
}
print "ok ",$i++,"\n";
d97 1
a97 5
if ($@@) {
    print STDERR $@@,"\n";
    print "not ";
}
print "ok ",$i++,"\n";
d100 1
a100 4
unless ($@@) {
    print "not ";
}
print "ok ",$i++,"\n";
d103 1
a103 5
unless ($@@) {
    print "not ";
}
print "ok ",$i++,"\n";

d110 1
a110 5
if ($@@) {
    print STDERR $@@,"\n";
    print "not ";
}
print "ok ",$i++,"\n";
d113 1
a113 5
if ($@@) {
    print STDERR $@@,"\n";
    print "not ";
}
print "ok ",$i++,"\n";
d116 1
a116 4
unless ($@@) {
    print "not ";
}
print "ok ",$i++,"\n";
d120 6
a125 3
if ($@@) {
    print STDERR $@@,"\n";
    print "not ";
a126 1
print "ok ",$i++,"\n";
d128 3
a130 2
print "not " unless ($INC[0] eq "fred" || ($^O eq 'MacOS' && $INC[0] eq ":fred:"));
print "ok ",$i++,"\n";
d132 4
a135 4
eval "use lib 1.0 qw(joe)";
if ($@@) {
    print STDERR $@@,"\n";
    print "not ";
a136 1
print "ok ",$i++,"\n";
a137 2
print "not " unless ($INC[0] eq "joe" || ($^O eq 'MacOS' && $INC[0] eq ":joe:"));
print "ok ",$i++,"\n";
d140 6
a145 2
unless ($@@) {
    print "not ";
a146 4
print "ok ",$i++,"\n";

print "not " if ($INC[0] eq "freda" || ($^O eq 'MacOS' && $INC[0] eq ":freda:"));
print "ok ",$i++,"\n";
d151 1
a151 2
    print "not " if $@@;
    print "ok ",$i++,"\n";
d154 1
a154 4
    unless ($@@ =~ /lib version 100\.105 required--this is only version 35\.3/) {
	print "not ";
    }
    print "ok ",$i++,"\n";
d157 1
a157 2
    print "not " if $@@;
    print "ok ",$i++,"\n";
d160 1
a160 4
    unless ($@@ =~ /lib version 100\.105 required--this is only version 35\.3/) {
	print "not ";
    }
    print "ok ",$i++,"\n";
d164 1
a164 2
    print "not " if $@@;
    print "ok ",$i++,"\n";
d167 1
a167 4
    unless ($@@ =~ /lib version 100\.105 required--this is only version 35\.36/) {
	print "not ";
    }
    print "ok ",$i++,"\n";
d170 1
a170 2
    print "not " if $@@;
    print "ok ",$i++,"\n";
d173 1
a173 4
    unless ($@@ =~ /lib version 100\.105 required--this is only version 35\.36/) {
	print "not ";
    }
    print "ok ",$i++,"\n";
d177 1
a177 2
    print "not " if $@@;
    print "ok ",$i++,"\n";
d180 1
a180 4
    unless ($@@ =~ /lib v100\.105 required--this is only v35\.36/) {
	print "not ";
    }
    print "ok ",$i++,"\n";
d183 1
a183 2
    print "not " if $@@;
    print "ok ",$i++,"\n";
d186 1
a186 4
    unless ($@@ =~ /lib version 100\.105 required--this is only version 35\.036/) {
	print "not ";
    }
    print "ok ",$i++,"\n";
d197 52
a248 2
    unless ($@@ =~ /^xxx defines neither package nor VERSION--version check failed at/) {
	print "not ";
a249 2
    print "ok ",$i++,"\n";
    unlink 'xxx.pm';
d251 1
@


1.4
log
@Resolve conflicts, remove old files, merge local changes
@
text
@d25 1
a25 1
eval sprintf "use %.5f;", $];
d33 1
a33 1
eval sprintf "use %.5f;", $] - 0.000001;
d40 1
a40 1
eval sprintf("use %.5f;", $] + 1);
d46 1
a46 1
eval sprintf "use %.5f;", $] + 0.00001;
@


1.3
log
@merge in perl 5.6.1 with our local changes
@
text
@d8 1
a8 1
print "1..27\n";
d85 1
a85 1
print "not " unless $INC[0] eq "fred";
d95 1
a95 1
print "not " unless $INC[0] eq "joe";
d104 1
a104 1
print "not " if $INC[0] eq "freda";
d170 15
@


1.2
log
@perl-5.6.0 + local changes
@
text
@d5 1
a5 1
    unshift @@INC, '../lib';
@


1.1
log
@perl 5.004_04
@
text
@d5 1
a5 1
    @@INC = '../lib';
d8 1
a8 1
print "1..14\n";
d11 6
d53 1
a53 3

use lib; # I know that this module will be there.

d106 65
@


1.1.1.1
log
@perl5.005_03
@
text
@@


1.1.1.2
log
@virgin perl 5.6.0
@
text
@d5 1
a5 1
    unshift @@INC, '../lib';
d8 1
a8 1
print "1..27\n";
a10 6
eval "use 5.000";	# implicit semicolon
if ($@@) {
    print STDERR $@@,"\n";
    print "not ";
}
print "ok ",$i++,"\n";
d47 3
a49 1
{ use lib }	# check that subparse saves pending tokens
a101 65

{
    local $lib::VERSION = 35.36;
    eval "use lib v33.55";
    print "not " if $@@;
    print "ok ",$i++,"\n";

    eval "use lib v100.105";
    unless ($@@ =~ /lib version 100\.105 required--this is only version 35\.3/) {
	print "not ";
    }
    print "ok ",$i++,"\n";

    eval "use lib 33.55";
    print "not " if $@@;
    print "ok ",$i++,"\n";

    eval "use lib 100.105";
    unless ($@@ =~ /lib version 100\.105 required--this is only version 35\.3/) {
	print "not ";
    }
    print "ok ",$i++,"\n";

    local $lib::VERSION = '35.36';
    eval "use lib v33.55";
    print "not " if $@@;
    print "ok ",$i++,"\n";

    eval "use lib v100.105";
    unless ($@@ =~ /lib version 100\.105 required--this is only version 35\.36/) {
	print "not ";
    }
    print "ok ",$i++,"\n";

    eval "use lib 33.55";
    print "not " if $@@;
    print "ok ",$i++,"\n";

    eval "use lib 100.105";
    unless ($@@ =~ /lib version 100\.105 required--this is only version 35\.36/) {
	print "not ";
    }
    print "ok ",$i++,"\n";

    local $lib::VERSION = v35.36;
    eval "use lib v33.55";
    print "not " if $@@;
    print "ok ",$i++,"\n";

    eval "use lib v100.105";
    unless ($@@ =~ /lib v100\.105 required--this is only v35\.36/) {
	print "not ";
    }
    print "ok ",$i++,"\n";

    eval "use lib 33.55";
    print "not " if $@@;
    print "ok ",$i++,"\n";

    eval "use lib 100.105";
    unless ($@@ =~ /lib version 100\.105 required--this is only version 35\.036/) {
	print "not ";
    }
    print "ok ",$i++,"\n";
}
@


1.1.1.3
log
@stock perl 5.6.1
@
text
@d5 1
a5 1
    @@INC = '../lib';
@


1.1.1.4
log
@stock perl 5.8.0 from CPAN
@
text
@d8 1
a8 1
print "1..28\n";
d85 1
a85 1
print "not " unless ($INC[0] eq "fred" || ($^O eq 'MacOS' && $INC[0] eq ":fred:"));
d95 1
a95 1
print "not " unless ($INC[0] eq "joe" || ($^O eq 'MacOS' && $INC[0] eq ":joe:"));
d104 1
a104 1
print "not " if ($INC[0] eq "freda" || ($^O eq 'MacOS' && $INC[0] eq ":freda:"));
a169 15
}


{
    # Regression test for patch 14937: 
    #   Check that a .pm file with no package or VERSION doesn't core.
    open F, ">xxx.pm" or die "Cannot open xxx.pm: $!\n";
    print F "1;\n";
    close F;
    eval "use lib '.'; use xxx 3;";
    unless ($@@ =~ /^xxx defines neither package nor VERSION--version check failed at/) {
	print "not ";
    }
    print "ok ",$i++,"\n";
    unlink 'xxx.pm';
@


1.1.1.5
log
@perl 5.8.6 from CPAN
@
text
@d25 1
a25 1
eval sprintf "use %.6f;", $];
d33 1
a33 1
eval sprintf "use %.6f;", $] - 0.000001;
d40 1
a40 1
eval sprintf("use %.6f;", $] + 1);
d46 1
a46 1
eval sprintf "use %.6f;", $] + 0.00001;
@


1.1.1.6
log
@import perl 5.10.0 from CPAN
@
text
@a5 1
    $INC{"feature.pm"} = 1; # so we don't attempt to load feature.pm
d8 1
a8 1
print "1..63\n";
d10 5
a14 42
# Can't require test.pl, as we're testing the use/require mechanism here.

my $test = 1;

sub _ok {
    my ($type, $got, $expected, $name) = @@_;

    my $result;
    if ($type eq 'is') {
	$result = $got eq $expected;
    } elsif ($type eq 'isnt') {
	$result = $got ne $expected;
    } elsif ($type eq 'like') {
	$result = $got =~ $expected;
    } else {
	die "Unexpected type '$type'$name";
    }
    if ($result) {
	if ($name) {
	    print "ok $test - $name\n";
	} else {
	    print "ok $test\n";
	}
    } else {
	if ($name) {
	    print "not ok $test - $name\n";
	} else {
	    print "not ok $test\n";
	}
	my @@caller = caller(2);
	print "# Failed test at $caller[1] line $caller[2]\n";
	print "# Got      '$got'\n";
	if ($type eq 'is') {
	    print "# Expected '$expected'\n";
	} elsif ($type eq 'isnt') {
	    print "# Expected not '$expected'\n";
	} elsif ($type eq 'like') {
	    print "# Expected $expected\n";
	}
    }
    $test = $test + 1;
    $result;
d16 1
d18 4
a21 8
sub like ($$;$) {
    _ok ('like', @@_);
}
sub is ($$;$) {
    _ok ('is', @@_);
}
sub isnt ($$;$) {
    _ok ('isnt', @@_);
d23 1
a23 27

eval "use 5.000";	# implicit semicolon
is ($@@, '');

eval "use 5.000;";
is ($@@, '');

eval "use 6.000;";
like ($@@, qr/Perl v6\.0\.0 required--this is only \Q$^V\E, stopped/);

eval "no 6.000;";
is ($@@, '');

eval "no 5.000;";
like ($@@, qr/Perls since v5\.0\.0 too modern--this is \Q$^V\E, stopped/);

eval "use 5.6;";
like ($@@, qr/Perl v5\.600\.0 required \(did you mean v5\.6\.0\?\)--this is only \Q$^V\E, stopped/);

eval "use 5.8;";
like ($@@, qr/Perl v5\.800\.0 required \(did you mean v5\.8\.0\?\)--this is only \Q$^V\E, stopped/);

eval "use 5.9;";
like ($@@, qr/Perl v5\.900\.0 required \(did you mean v5\.9\.0\?\)--this is only \Q$^V\E, stopped/);

eval "use 5.10;";
like ($@@, qr/Perl v5\.100\.0 required \(did you mean v5\.10\.0\?\)--this is only \Q$^V\E, stopped/);
d26 5
a30 1
is ($@@, '');
d34 5
a38 1
is ($@@, '');
d41 4
a44 1
like ($@@, qr/Perl v6.\d+.\d+ required--this is only \Q$^V\E, stopped/);
d47 5
a51 1
like ($@@, qr/Perl v5.\d+.\d+ required--this is only \Q$^V\E, stopped/);
d58 5
a62 1
is ($@@, '');
d65 5
a69 1
is ($@@, '');
d72 4
a75 1
isnt ($@@, '');
d79 5
a83 1
is ($@@, '');
d85 2
a86 5
if ($^O eq 'MacOS') {
    is($INC[0], ":fred:");
} else {
    is($INC[0], "fred");
}
d89 3
a91 7
is ($@@, '');


if ($^O eq 'MacOS') {
    is($INC[0], ":joe:");
} else {
    is($INC[0], "joe");
d93 1
d95 2
d99 4
a102 1
isnt($@@, '');
d104 2
a105 5
if ($^O eq 'MacOS') {
    isnt($INC[0], ":freda:");
} else {
    isnt($INC[0], "freda");
}
d110 2
a111 1
    is ($@@, '');
d114 4
a117 1
    like ($@@, qr/lib version v100.105.0 required--this is only version v35\.360\.0/);
d120 2
a121 1
    is ($@@, '');
d124 4
a127 1
    like ($@@, qr/lib version 100.105 required--this is only version 35.36/);
d131 2
a132 1
    like ($@@, '');
d135 4
a138 1
    like ($@@, qr/lib version v100.105.0 required--this is only version v35\.360\.0/);
d141 2
a142 1
    is ($@@, '');
d145 4
a148 1
    like ($@@, qr/lib version 100.105 required--this is only version 35.36/);
d152 2
a153 1
    is ($@@, '');
d156 4
a159 1
    like ($@@, qr/lib version v100.105.0 required--this is only version v35\.36\.0/);
d162 2
a163 1
    is ($@@, '');
d166 4
a169 1
    like ($@@, qr/lib version 100.105 required--this is only version v35.36/);
d180 4
a183 1
    like ($@@, qr/^xxx defines neither package nor VERSION--version check failed at/);
a185 52

my @@ver = split /\./, sprintf "%vd", $^V;

foreach my $index (-3..+3) {
    foreach my $v (0, 1) {
	my @@parts = @@ver;
	if ($index) {
	    if ($index < 0) {
		# Jiggle one of the parts down
		--$parts[-$index - 1];
		if ($parts[-$index - 1] < 0) {
		    # perl's version number ends with '.0'
		    $parts[-$index - 1] = 0;
		    $parts[-$index - 2] -= 2;
		}
	    } else {
		# Jiggle one of the parts up
		++$parts[$index - 1];
	    }
	}
	my $v_version = sprintf "v%d.%d.%d", @@parts;
	my $version;
	if ($v) {
	    $version = $v_version;
	} else {
	    $version = $parts[0] + $parts[1] / 1000 + $parts[2] / 1000000;
	}

	eval "use $version";
	if ($index > 0) {
	    # The future
	    like ($@@,
		  qr/Perl $v_version required--this is only \Q$^V\E, stopped/,
		  "use $version");
	} else {
	    # The present or past
	    is ($@@, '', "use $version");
	}

	eval "no $version";
	if ($index <= 0) {
	    # The present or past
	    like ($@@,
		  qr/Perls since $v_version too modern--this is \Q$^V\E, stopped/,
		  "no $version");
	} else {
	    # future
	    is ($@@, '', "no $version");
	}
    }
}

@


1.1.1.7
log
@import perl 5.10.1
@
text
@d193 1
a193 1
    open F, ">xxx$$.pm" or die "Cannot open xxx$$.pm: $!\n";
d196 3
a198 3
    eval "use lib '.'; use xxx$$ 3;";
    like ($@@, qr/^xxx$$ defines neither package nor VERSION--version check failed at/);
    unlink "xxx$$.pm";
@


1.1.1.8
log
@Perl 5.12.2 from CPAN
@
text
@d5 1
a5 1
    @@INC = ('../lib', 'lib');
d9 1
a9 1
print "1..73\n";
d40 1
a40 1
	my @@caller = caller(1);
a64 20
eval "use 5";           # implicit semicolon
is ($@@, '');

eval "use 5;";
is ($@@, '');

eval "{use 5}";         # [perl #70884]
is ($@@, '');

eval "{use 5   }";      # [perl #70884]
is ($@@, '');

# new style version numbers

eval q{ use v5.5.630; };
is ($@@, '');

eval q{ use 10.0.2; };
like ($@@, qr/^Perl v10\.0\.2 required/);

a91 3
eval "use 5.11;";
like ($@@, qr/Perl v5\.110\.0 required \(did you mean v5\.11\.0\?\)--this is only \Q$^V\E, stopped/);

d105 1
a105 9
# check that "use 5.11.0" (and higher) loads strictures
eval 'use 5.11.0; ${"foo"} = "bar";';
like ($@@, qr/Can't use string \("foo"\) as a SCALAR ref while "strict refs" in use/);
# but that they can be disabled
eval 'use 5.11.0; no strict "refs"; ${"foo"} = "bar";';
is ($@@, "");
# and they are properly scoped
eval '{use 5.11.0;} ${"foo"} = "bar";';
is ($@@, "");
d107 1
a107 1
{ use test_use }	# check that subparse saves pending tokens
d109 1
a109 3
local $test_use::VERSION = 1.0;

eval "use test_use 0.9";
d112 1
a112 1
eval "use test_use 1.0";
d115 1
a115 1
eval "use test_use 1.01";
d118 2
a119 1
eval "use test_use 0.9 qw(fred)";
d122 5
a126 1
is("@@test_use::got", "fred");
d128 1
a128 1
eval "use test_use 1.0 qw(joe)";
a130 1
is("@@test_use::got", "joe");
d132 8
a139 1
eval "use test_use 1.01 qw(freda)";
d142 5
a146 1
is("@@test_use::got", "joe");
d149 2
a150 2
    local $test_use::VERSION = 35.36;
    eval "use test_use v33.55";
d153 2
a154 2
    eval "use test_use v100.105";
    like ($@@, qr/test_use version v100.105.0 required--this is only version v35\.360\.0/);
d156 1
a156 1
    eval "use test_use 33.55";
d159 2
a160 2
    eval "use test_use 100.105";
    like ($@@, qr/test_use version 100.105 required--this is only version 35.36/);
d162 2
a163 2
    local $test_use::VERSION = '35.36';
    eval "use test_use v33.55";
d166 2
a167 2
    eval "use test_use v100.105";
    like ($@@, qr/test_use version v100.105.0 required--this is only version v35\.360\.0/);
d169 1
a169 1
    eval "use test_use 33.55";
d172 2
a173 2
    eval "use test_use 100.105";
    like ($@@, qr/test_use version 100.105 required--this is only version 35.36/);
d175 2
a176 2
    local $test_use::VERSION = v35.36;
    eval "use test_use v33.55";
d179 2
a180 2
    eval "use test_use v100.105";
    like ($@@, qr/test_use version v100.105.0 required--this is only version v35\.36\.0/);
d182 1
a182 1
    eval "use test_use 33.55";
d185 2
a186 2
    eval "use test_use 100.105";
    like ($@@, qr/test_use version 100.105 required--this is only version v35.36/);
d193 6
a198 3
    # (git commit 2658f4d9934aba5f8b23afcc078dc12b3a40223)
    eval "use test_use_14937 3";
    like ($@@, qr/^test_use_14937 defines neither package nor VERSION--version check failed at/);
@


1.1.1.9
log
@import perl 5.16.3 from CPAN - worked on by Andrew Fresh and myself
@
text
@d9 1
a9 1
print "1..83\n";
a24 2
    } elsif ($type eq 'ok') {
	$result = not not $got;
a48 2
	} elsif ($type eq 'ok') {
	    print "# Expected a true value\n";
a63 3
sub ok($;$) {
    _ok ('ok', shift, undef, @@_);
}
a136 23
eval 'no strict; use 5.012; ${"foo"} = "bar"';
is $@@, "", 'explicit "no strict" overrides later ver decl';
eval 'use strict; use 5.01; ${"foo"} = "bar"';
like $@@, qr/^Can't use string/,
    'explicit use strict overrides later use 5.01';
eval 'use strict "subs"; use 5.012; ${"foo"} = "bar"';
like $@@, qr/^Can't use string/,
    'explicit use strict "subs" does not stop ver decl from enabling refs';
eval 'use 5.012; use 5.01; ${"foo"} = "bar"';
is $@@, "", 'use 5.01 overrides implicit strict from prev ver decl';
eval 'no strict "subs"; use 5.012; ${"foo"} = "bar"';
ok $@@, 'no strict subs allows ver decl to enable refs';
eval 'no strict "subs"; use 5.012; $nonexistent_pack_var';
ok $@@, 'no strict subs allows ver decl to enable vars';
eval 'no strict "refs"; use 5.012; fancy_bareword';
ok $@@, 'no strict refs allows ver decl to enable subs';
eval 'no strict "refs"; use 5.012; $nonexistent_pack_var';
ok $@@, 'no strict refs allows ver decl to enable subs';
eval 'no strict "vars"; use 5.012; ${"foo"} = "bar"';
ok $@@, 'no strict vars allows ver decl to enable refs';
eval 'no strict "vars"; use 5.012; ursine_word';
ok $@@, 'no strict vars allows ver decl to enable subs';

@


1.1.1.10
log
@Import perl-5.18.2

OK espie@@ sthen@@ deraadt@@
@
text
@d9 1
a9 1
print "1..84\n";
a168 3

use test_use { () };
is ref $test_use::got[0], 'HASH', 'use parses arguments in term lexing cx';
@


