head	1.9;
access;
symbols
	OPENBSD_6_1:1.9.0.28
	OPENBSD_6_1_BASE:1.9
	OPENBSD_6_0:1.9.0.26
	OPENBSD_6_0_BASE:1.9
	OPENBSD_5_9:1.9.0.20
	OPENBSD_5_9_BASE:1.9
	OPENBSD_5_8:1.9.0.22
	OPENBSD_5_8_BASE:1.9
	PERL_5_20_2:1.1.1.6
	OPENBSD_5_7:1.9.0.14
	OPENBSD_5_7_BASE:1.9
	PERL_5_20_1:1.1.1.6
	OPENBSD_5_6:1.9.0.18
	OPENBSD_5_6_BASE:1.9
	PERL_5_18_2:1.1.1.6
	PERL:1.1.1
	OPENBSD_5_5:1.9.0.16
	OPENBSD_5_5_BASE:1.9
	OPENBSD_5_4:1.9.0.12
	OPENBSD_5_4_BASE:1.9
	PERL_5_16_3:1.1.1.6
	OPENBSD_5_3:1.9.0.10
	OPENBSD_5_3_BASE:1.9
	OPENBSD_5_2:1.9.0.8
	OPENBSD_5_2_BASE:1.9
	OPENBSD_5_1_BASE:1.9
	OPENBSD_5_1:1.9.0.6
	OPENBSD_5_0:1.9.0.4
	OPENBSD_5_0_BASE:1.9
	OPENBSD_4_9:1.9.0.2
	OPENBSD_4_9_BASE:1.9
	PERL_5_12_2:1.1.1.6
	OPENBSD_4_8:1.8.0.4
	OPENBSD_4_8_BASE:1.8
	OPENBSD_4_7:1.8.0.2
	OPENBSD_4_7_BASE:1.8
	PERL_5_10_1:1.1.1.5
	OPENBSD_4_6:1.7.0.6
	OPENBSD_4_6_BASE:1.7
	OPENBSD_4_5:1.7.0.2
	OPENBSD_4_5_BASE:1.7
	PERL_5_10_0:1.1.1.4
	OPENBSD_4_4:1.6.0.24
	OPENBSD_4_4_BASE:1.6
	OPENBSD_4_3:1.6.0.22
	OPENBSD_4_3_BASE:1.6
	OPENBSD_4_2:1.6.0.20
	OPENBSD_4_2_BASE:1.6
	OPENBSD_4_1:1.6.0.18
	OPENBSD_4_1_BASE:1.6
	OPENBSD_4_0:1.6.0.16
	OPENBSD_4_0_BASE:1.6
	PERL_5_8_8:1.1.1.3
	OPENBSD_3_9:1.6.0.14
	OPENBSD_3_9_BASE:1.6
	OPENBSD_3_8:1.6.0.12
	OPENBSD_3_8_BASE:1.6
	OPENBSD_3_7:1.6.0.10
	OPENBSD_3_7_BASE:1.6
	PERL_5_8_6:1.1.1.3
	OPENBSD_3_6:1.6.0.8
	OPENBSD_3_6_BASE:1.6
	PERL_5_8_5:1.1.1.3
	PERL_5_8_3:1.1.1.3
	OPENBSD_3_5:1.6.0.6
	OPENBSD_3_5_BASE:1.6
	PERL_5_8_2:1.1.1.3
	OPENBSD_3_4:1.6.0.4
	OPENBSD_3_4_BASE:1.6
	OPENBSD_3_3:1.6.0.2
	OPENBSD_3_3_BASE:1.6
	PERL_5_8_0:1.1.1.3
	OPENBSD_3_2:1.5.0.6
	OPENBSD_3_2_BASE:1.5
	OPENBSD_3_1:1.5.0.4
	OPENBSD_3_1_BASE:1.5
	OPENBSD_3_0:1.5.0.2
	OPENBSD_3_0_BASE:1.5
	PERL_5_6_1:1.1.1.2
	OPENBSD_2_9:1.4.0.6
	OPENBSD_2_9_BASE:1.4
	OPENBSD_2_8:1.4.0.4
	OPENBSD_2_8_BASE:1.4
	OPENBSD_2_7:1.4.0.2
	OPENBSD_2_7_BASE:1.4
	PERL_5_6_0:1.1.1.2
	OPENBSD_2_6:1.3.0.2
	OPENBSD_2_6_BASE:1.3
	PERL_500503:1.1.1.2
	CPAN:1.1.1
	OPENBSD_2_5:1.2.0.6
	OPENBSD_2_5_BASE:1.2
	OPENBSD_2_4:1.2.0.4
	OPENBSD_2_4_BASE:1.2
	OPENBSD_2_3:1.2.0.2
	OPENBSD_2_3_BASE:1.2
	OPENBSD_2_2:1.1.1.1.0.6
	OPENBSD_2_2_BASE:1.1.1.1
	OPENBSD_2_1:1.1.1.1.0.4
	OPENBSD_2_1_BASE:1.1.1.1
	OPENBSD_2_0:1.1.1.1.0.2
	OPENBSD_2_0_BASE:1.1.1.1
	perl5003:1.1.1.1
	lwall:1.1.1;
locks; strict;
comment	@# @;
expand	@o@;


1.9
date	2010.09.24.15.07.05;	author millert;	state Exp;
branches;
next	1.8;

1.8
date	2009.10.12.18.30.27;	author millert;	state Exp;
branches;
next	1.7;

1.7
date	2008.09.29.17.36.18;	author millert;	state Exp;
branches;
next	1.6;

1.6
date	2002.10.27.22.25.35;	author millert;	state Exp;
branches;
next	1.5;

1.5
date	2001.05.24.18.36.06;	author millert;	state Exp;
branches;
next	1.4;

1.4
date	2000.04.06.17.07.57;	author millert;	state Exp;
branches;
next	1.3;

1.3
date	99.04.29.22.52.27;	author millert;	state Exp;
branches;
next	1.2;

1.2
date	97.11.30.08.00.05;	author millert;	state Exp;
branches;
next	1.1;

1.1
date	96.08.19.10.13.11;	author downsj;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	96.08.19.10.13.11;	author downsj;	state Exp;
branches;
next	1.1.1.2;

1.1.1.2
date	99.04.29.22.41.17;	author millert;	state Exp;
branches;
next	1.1.1.3;

1.1.1.3
date	2002.10.27.22.15.10;	author millert;	state Exp;
branches;
next	1.1.1.4;

1.1.1.4
date	2008.09.29.17.18.58;	author millert;	state Exp;
branches;
next	1.1.1.5;

1.1.1.5
date	2009.10.12.18.10.43;	author millert;	state Exp;
branches;
next	1.1.1.6;

1.1.1.6
date	2010.09.24.14.49.19;	author millert;	state Exp;
branches;
next	;


desc
@@


1.9
log
@merge in perl 5.12.2 plus local changes
@
text
@#!./perl

print "1..6\n";
my $test = 0;

sub failed {
    my ($got, $expected, $name) = @@_;

    print "not ok $test - $name\n";
    my @@caller = caller(1);
    print "# Failed test at $caller[1] line $caller[2]\n";
    if (defined $got) {
	print "# Got '$got'\n";
    } else {
	print "# Got undef\n";
    }
    print "# Expected $expected\n";
    return;
}

sub like {
    my ($got, $pattern, $name) = @@_;
    $test = $test + 1;
    if (defined $got && $got =~ $pattern) {
	print "ok $test - $name\n";
	# Principle of least surprise - maintain the expected interface, even
	# though we aren't using it here (yet).
	return 1;
    }
    failed($got, $pattern, $name);
}

sub is {
    my ($got, $expect, $name) = @@_;
    $test = $test + 1;
    if (defined $got && $got eq $expect) {
	print "ok $test - $name\n";
	return 1;
    }
    failed($got, "'$expect'", $name);
}

my $filename = "multiline$$";

END {
    1 while unlink $filename;
}

open(TRY,'>',$filename) || (die "Can't open $filename: $!");

$x = 'now is the time
for all good men
to come to.


!

';

$y = 'now is the time' . "\n" .
'for all good men' . "\n" .
'to come to.' . "\n\n\n!\n\n";

is($x, $y,  'test data is sane');

print TRY $x;
close TRY or die "Could not close: $!";

open(TRY,$filename) || (die "Can't reopen $filename: $!");
$count = 0;
$z = '';
while (<TRY>) {
    $z .= $_;
    $count = $count + 1;
}

is($z, $y,  'basic multiline reading');

is($count, 7,   '    line count');
is($., 7,       '    $.' );

$out = (($^O eq 'MSWin32') || $^O eq 'NetWare') ? `type $filename`
    : ($^O eq 'VMS') ? `type $filename.;0`   # otherwise .LIS is assumed
    : `cat $filename`;

like($out, qr/.*\n.*\n.*\n$/);

close(TRY) || (die "Can't close $filename: $!");

is($out, $y);
@


1.8
log
@Merge in perl 5.10.1; part two
@
text
@d3 28
a30 4
BEGIN {
    chdir 't';
    @@INC = '../lib';
    require './test.pl';
d33 15
a47 1
plan(tests => 6);
a48 1
my $filename = tempfile();
a83 1
    : ($^O eq 'MacOS') ? `catenate $filename`
@


1.7
log
@fix conflicts and merge in local changes to perl 5.10.0
@
text
@d11 2
a12 1
open(TRY,'>Comp.try') || (die "Can't open temp file.");
d32 1
a32 1
open(TRY,'Comp.try') || (die "Can't reopen temp file.");
d45 4
a48 3
$out = (($^O eq 'MSWin32') || $^O eq 'NetWare' || $^O eq 'VMS') ? `type Comp.try`
    : ($^O eq 'MacOS') ? `catenate Comp.try`
    : `cat Comp.try`;
d52 1
a52 2
close(TRY) || (die "Can't close temp file.");
unlink 'Comp.try' || `/bin/rm -f Comp.try`;
@


1.6
log
@Resolve conflicts, remove old files, merge local changes
@
text
@d3 1
a3 1
BEGIN: {
@


1.5
log
@merge in perl 5.6.1 with our local changes
@
text
@d3 5
a7 1
# $RCSfile: multiline.t,v $$Revision: 4.1 $$Date: 92/08/07 18:27:20 $
d9 1
a9 1
print "1..5\n";
d11 1
a11 1
open(try,'>Comp.try') || (die "Can't open temp file.");
d26 1
a26 1
if ($x eq $y) {print "ok 1\n";} else {print "not ok 1\n";}
d28 2
a29 2
print try $x;
close try;
d31 1
a31 1
open(try,'Comp.try') || (die "Can't reopen temp file.");
d34 1
a34 1
while (<try>) {
d39 1
a39 1
if ($z eq $y) {print "ok 2\n";} else {print "not ok 2\n";}
d41 2
a42 1
if ($count == 7) {print "ok 3\n";} else {print "not ok 3\n";}
d44 3
a46 1
$_ = ($^O eq 'MSWin32') ? `type Comp.try` : `cat Comp.try`;
d48 1
a48 1
if (/.*\n.*\n.*\n$/) {print "ok 4\n";} else {print "not ok 4\n";}
d50 1
a50 1
close(try) || (die "Can't close temp file.");
d53 1
a53 1
if ($_ eq $y) {print "ok 5\n";} else {print "not ok 5\n";}
@


1.4
log
@perl-5.6.0 + local changes
@
text
@@


1.3
log
@perl5.005_03 (stock)
@
text
@@


1.2
log
@perl 5.004_04
@
text
@d12 4
d20 1
a20 1
'to come to.' . "\n";
d37 1
a37 1
if ($count == 3) {print "ok 3\n";} else {print "not ok 3\n";}
@


1.1
log
@Initial revision
@
text
@d35 1
a35 1
$_ = `cat Comp.try`;
d38 2
@


1.1.1.1
log
@Import of Perl 5.003 into the tree.  Makefile.bsd-wrapper and
config.sh.OpenBSD are the only local changes.
@
text
@@


1.1.1.2
log
@perl5.005_03
@
text
@a11 4


!

d16 1
a16 1
'to come to.' . "\n\n\n!\n\n";
d33 1
a33 1
if ($count == 7) {print "ok 3\n";} else {print "not ok 3\n";}
d35 1
a35 1
$_ = ($^O eq 'MSWin32') ? `type Comp.try` : `cat Comp.try`;
a37 2

close(try) || (die "Can't close temp file.");
@


1.1.1.3
log
@stock perl 5.8.0 from CPAN
@
text
@d3 1
a3 5
BEGIN: {
    chdir 't';
    @@INC = '../lib';
    require './test.pl';
}
d5 1
a5 1
plan(tests => 6);
d7 1
a7 1
open(TRY,'>Comp.try') || (die "Can't open temp file.");
d22 1
a22 1
is($x, $y,  'test data is sane');
d24 2
a25 2
print TRY $x;
close TRY or die "Could not close: $!";
d27 1
a27 1
open(TRY,'Comp.try') || (die "Can't reopen temp file.");
d30 1
a30 1
while (<TRY>) {
d35 1
a35 1
is($z, $y,  'basic multiline reading');
d37 1
a37 2
is($count, 7,   '    line count');
is($., 7,       '    $.' );
d39 1
a39 3
$out = (($^O eq 'MSWin32') || $^O eq 'NetWare' || $^O eq 'VMS') ? `type Comp.try`
    : ($^O eq 'MacOS') ? `catenate Comp.try`
    : `cat Comp.try`;
d41 1
a41 1
like($out, qr/.*\n.*\n.*\n$/);
d43 1
a43 1
close(TRY) || (die "Can't close temp file.");
d46 1
a46 1
is($out, $y);
@


1.1.1.4
log
@import perl 5.10.0 from CPAN
@
text
@d3 1
a3 1
BEGIN {
@


1.1.1.5
log
@import perl 5.10.1
@
text
@d11 1
a11 2
my $filename = tempfile();
open(TRY,'>',$filename) || (die "Can't open $filename: $!");
d31 1
a31 1
open(TRY,$filename) || (die "Can't reopen $filename: $!");
d44 3
a46 4
$out = (($^O eq 'MSWin32') || $^O eq 'NetWare') ? `type $filename`
    : ($^O eq 'VMS') ? `type $filename.;0`   # otherwise .LIS is assumed
    : ($^O eq 'MacOS') ? `catenate $filename`
    : `cat $filename`;
d50 2
a51 1
close(TRY) || (die "Can't close $filename: $!");
@


1.1.1.6
log
@Perl 5.12.2 from CPAN
@
text
@d3 4
a6 28
print "1..6\n";
my $test = 0;

sub failed {
    my ($got, $expected, $name) = @@_;

    print "not ok $test - $name\n";
    my @@caller = caller(1);
    print "# Failed test at $caller[1] line $caller[2]\n";
    if (defined $got) {
	print "# Got '$got'\n";
    } else {
	print "# Got undef\n";
    }
    print "# Expected $expected\n";
    return;
}

sub like {
    my ($got, $pattern, $name) = @@_;
    $test = $test + 1;
    if (defined $got && $got =~ $pattern) {
	print "ok $test - $name\n";
	# Principle of least surprise - maintain the expected interface, even
	# though we aren't using it here (yet).
	return 1;
    }
    failed($got, $pattern, $name);
d9 1
a9 15
sub is {
    my ($got, $expect, $name) = @@_;
    $test = $test + 1;
    if (defined $got && $got eq $expect) {
	print "ok $test - $name\n";
	return 1;
    }
    failed($got, "'$expect'", $name);
}

my $filename = "multiline$$";

END {
    1 while unlink $filename;
}
d11 1
d47 1
@


