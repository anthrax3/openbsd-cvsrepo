head	1.1;
branch	1.1.1;
access;
symbols
	OPENBSD_6_1_BASE:1.1.1.4
	OPENBSD_6_0:1.1.1.4.0.10
	OPENBSD_6_0_BASE:1.1.1.4
	OPENBSD_5_9:1.1.1.4.0.4
	OPENBSD_5_9_BASE:1.1.1.4
	OPENBSD_5_8:1.1.1.4.0.6
	OPENBSD_5_8_BASE:1.1.1.4
	PERL_5_20_2:1.1.1.4
	OPENBSD_5_7:1.1.1.4.0.2
	OPENBSD_5_7_BASE:1.1.1.4
	PERL_5_20_1:1.1.1.4
	OPENBSD_5_6:1.1.1.3.0.8
	OPENBSD_5_6_BASE:1.1.1.3
	PERL_5_18_2:1.1.1.3
	PERL:1.1.1
	OPENBSD_5_5:1.1.1.3.0.6
	OPENBSD_5_5_BASE:1.1.1.3
	OPENBSD_5_4:1.1.1.3.0.2
	OPENBSD_5_4_BASE:1.1.1.3
	PERL_5_16_3:1.1.1.3
	OPENBSD_5_3:1.1.1.2.0.10
	OPENBSD_5_3_BASE:1.1.1.2
	OPENBSD_5_2:1.1.1.2.0.8
	OPENBSD_5_2_BASE:1.1.1.2
	OPENBSD_5_1_BASE:1.1.1.2
	OPENBSD_5_1:1.1.1.2.0.6
	OPENBSD_5_0:1.1.1.2.0.4
	OPENBSD_5_0_BASE:1.1.1.2
	OPENBSD_4_9:1.1.1.2.0.2
	OPENBSD_4_9_BASE:1.1.1.2
	PERL_5_12_2:1.1.1.2
	OPENBSD_4_8:1.1.1.1.0.4
	OPENBSD_4_8_BASE:1.1.1.1
	OPENBSD_4_7:1.1.1.1.0.2
	OPENBSD_4_7_BASE:1.1.1.1
	PERL_5_10_1:1.1.1.1
	CPAN:1.1.1;
locks; strict;
comment	@# @;
expand	@o@;


1.1
date	2009.10.12.18.10.44;	author millert;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	2009.10.12.18.10.44;	author millert;	state Exp;
branches;
next	1.1.1.2;

1.1.1.2
date	2010.09.24.14.49.19;	author millert;	state Exp;
branches;
next	1.1.1.3;

1.1.1.3
date	2013.03.25.20.09.33;	author sthen;	state Exp;
branches;
next	1.1.1.4;

1.1.1.4
date	2014.11.17.20.53.16;	author afresh1;	state Exp;
branches;
next	;
commitid	B31cAbBIXiCqnL97;


desc
@@


1.1
log
@Initial revision
@
text
@#!./perl -w

# Check that lines from eval are correctly retained by the debugger

BEGIN {
    chdir 't' if -d 't';
    @@INC = '../lib';
    require "./test.pl";
}

use strict;

plan (tests => 57);

$^P = 0xA;

my @@before = grep { /eval/ } keys %::;

is (@@before, 0, "No evals");

my %seen;

sub check_retained_lines {
    my ($prog, $name) = @@_;
    # Is there a more efficient way to write this?
    my @@expect_lines = (undef, map ({"$_\n"} split "\n", $prog), "\n", ';');

    my @@keys = grep {!$seen{$_}} grep { /eval/ } keys %::;

    is (@@keys, 1, "1 new eval");

    my @@got_lines = @@{$::{$keys[0]}};

    is (@@got_lines, @@expect_lines, "Right number of lines for $name");

    for (0..$#expect_lines) {
	is ($got_lines[$_], $expect_lines[$_], "Line $_ is correct");
    }
    $seen{$keys[0]}++;
}

my $name = 'foo';

for my $sep (' ', "\0") {

    my $prog = "sub $name {
    'Perl${sep}Rules'
};
1;
";

    eval $prog or die;
    check_retained_lines($prog, ord $sep);
    $name++;
}

{
  # This contains a syntax error
  my $prog = "sub $name {
    'This is $name'
  }
1 +
";

  eval $prog and die;

  is (eval "$name()", "This is $name", "Subroutine was compiled, despite error")
    or diag $@@;

  my @@after = grep { /eval/ } keys %::;

  is (@@after, 0 + keys %seen,
      "current behaviour is that errors in eval trump subroutine definitions");

  $name++;
}

foreach my $flags (0x0, 0x800, 0x1000, 0x1800) {
    local $^P = $^P | $flags;
    # This is easier if we accept that the guts eval will add a trailing \n
    # for us
    my $prog = "1 + 1 + 1\n";
    my $fail = "1 + \n";

    is (eval $prog, 3, 'String eval works');
    if ($flags & 0x800) {
	check_retained_lines($prog, sprintf "%#X", $^P);
    } else {
	my @@after = grep { /eval/ } keys %::;

	is (@@after, 0 + keys %seen,
	    "evals that don't define subroutines are correctly cleaned up");
    }

    is (eval $fail, undef, 'Failed string eval fails');

    if ($flags & 0x1000) {
    TODO: {
	    todo_skip "Can't yet retain lines for evals with syntax errors", 6;
	    check_retained_lines($fail, sprintf "%#X", $^P);
	}
    } else {
	my @@after = grep { /eval/ } keys %::;

	is (@@after, 0 + keys %seen,
	    "evals that fail are correctly cleaned up");
    }
}
@


1.1.1.1
log
@import perl 5.10.1
@
text
@@


1.1.1.2
log
@Perl 5.12.2 from CPAN
@
text
@d5 4
a8 20
# Uncomment this for testing, but don't leave it in for "production", as
# we've not yet verified that use works.
# use strict;

print "1..65\n";
my $test = 0;

sub failed {
    my ($got, $expected, $name) = @@_;

    print "not ok $test - $name\n";
    my @@caller = caller(1);
    print "# Failed test at $caller[1] line $caller[2]\n";
    if (defined $got) {
	print "# Got '$got'\n";
    } else {
	print "# Got undef\n";
    }
    print "# Expected $expected\n";
    return;
d11 3
a13 17
sub is {
    my ($got, $expect, $name) = @@_;
    $test = $test + 1;
    if (defined $expect) {
	if (defined $got && $got eq $expect) {
	    print "ok $test - $name\n";
	    return 1;
	}
	failed($got, "'$expect'", $name);
    } else {
	if (!defined $got) {
	    print "ok $test - $name\n";
	    return 1;
	}
	failed($got, 'undef', $name);
    }
}
d19 1
a19 1
is ((scalar @@before), 0, "No evals");
d30 1
a30 1
    is ((scalar @@keys), 1, "1 new eval");
d34 1
a34 2
    is ((scalar @@got_lines),
	(scalar @@expect_lines), "Right number of lines for $name");
d68 6
a73 1
    or print STDERR "# $@@\n";
a74 2
  check_retained_lines($prog,
		       'eval that defines subroutine but has syntax error');
d91 1
a91 1
	is (scalar @@after, 0 + keys %seen,
d98 4
a101 1
	check_retained_lines($fail, sprintf "%#X", $^P);
d105 1
a105 1
	is (scalar @@after, 0 + keys %seen,
@


1.1.1.3
log
@import perl 5.16.3 from CPAN - worked on by Andrew Fresh and myself
@
text
@d9 1
a9 1
print "1..74\n";
d27 1
a27 1
sub is($$$) {
a132 30
}

# BEGIN blocks that die
for (0xA, 0) {
  local $^P = $_;

  eval (my $prog = "BEGIN{die}\n");

  if ($_) {
    check_retained_lines($prog, 'eval that defines BEGIN that dies');
  }
  else {
    my @@after = grep { /eval/ } keys %::;

    is (scalar @@after, 0 + keys %seen,
       "evals with BEGIN{die} are correctly cleaned up");
  }
}

# [perl #79442] A #line "foo" directive in a string eval was not updating
# *{"_<foo"} in threaded perls, and was not putting the right lines into
# the right elements of @@{"_<foo"} in non-threaded perls.
{
  local $^P = 0x400|0x100|0x10;
  eval qq{#line 42 "hash-line-eval"\n labadalabada()\n};
  is $::{"_<hash-line-eval"}[42], " labadalabada()\n",
   '#line 42 "foo" in a string eval updates @@{"_<foo"}';
  eval qq{#line 42 "figgle"\n#line 85 "doggo"\n labadalabada()\n};
  is $::{"_<doggo"}[85], " labadalabada()\n",
   'subsequent #line 42 "foo" in a string eval updates @@{"_<foo"}';
@


1.1.1.4
log
@Import perl-5.20.1
@
text
@d9 1
a9 1
print "1..75\n";
a162 13
}

# Modifying ${"_<foo"} should not stop lines from being retained.
{
  local $^P = 0x400|0x100|0x10;
  eval <<'end';
#line 42 "copfilesv-modification"
    BEGIN{ ${"_<copfilesv-modification"} = \1 }
#line 52 "copfilesv-modified"
    abcdefg();
end
  is $::{"_<copfilesv-modified"}[52], "    abcdefg();\n",
   '#line 42 "foo" in a str eval is not confused by ${"_<foo"} changing';
@


