head	1.2;
access;
symbols
	OPENBSD_6_2:1.2.0.2
	OPENBSD_6_2_BASE:1.2
	PERL_5_24_2:1.1.1.5
	OPENBSD_6_1:1.2.0.4
	OPENBSD_6_1_BASE:1.2
	OPENBSD_6_0:1.1.1.4.0.26
	OPENBSD_6_0_BASE:1.1.1.4
	OPENBSD_5_9:1.1.1.4.0.20
	OPENBSD_5_9_BASE:1.1.1.4
	OPENBSD_5_8:1.1.1.4.0.22
	OPENBSD_5_8_BASE:1.1.1.4
	PERL_5_20_2:1.1.1.4
	OPENBSD_5_7:1.1.1.4.0.14
	OPENBSD_5_7_BASE:1.1.1.4
	PERL_5_20_1:1.1.1.4
	OPENBSD_5_6:1.1.1.4.0.18
	OPENBSD_5_6_BASE:1.1.1.4
	PERL_5_18_2:1.1.1.4
	PERL:1.1.1
	OPENBSD_5_5:1.1.1.4.0.16
	OPENBSD_5_5_BASE:1.1.1.4
	OPENBSD_5_4:1.1.1.4.0.12
	OPENBSD_5_4_BASE:1.1.1.4
	PERL_5_16_3:1.1.1.4
	OPENBSD_5_3:1.1.1.4.0.10
	OPENBSD_5_3_BASE:1.1.1.4
	OPENBSD_5_2:1.1.1.4.0.8
	OPENBSD_5_2_BASE:1.1.1.4
	OPENBSD_5_1_BASE:1.1.1.4
	OPENBSD_5_1:1.1.1.4.0.6
	OPENBSD_5_0:1.1.1.4.0.4
	OPENBSD_5_0_BASE:1.1.1.4
	OPENBSD_4_9:1.1.1.4.0.2
	OPENBSD_4_9_BASE:1.1.1.4
	PERL_5_12_2:1.1.1.4
	OPENBSD_4_8:1.1.1.3.0.4
	OPENBSD_4_8_BASE:1.1.1.3
	OPENBSD_4_7:1.1.1.3.0.2
	OPENBSD_4_7_BASE:1.1.1.3
	PERL_5_10_1:1.1.1.3
	OPENBSD_4_6:1.1.1.2.0.6
	OPENBSD_4_6_BASE:1.1.1.2
	OPENBSD_4_5:1.1.1.2.0.2
	OPENBSD_4_5_BASE:1.1.1.2
	PERL_5_10_0:1.1.1.2
	OPENBSD_4_4:1.1.1.1.0.18
	OPENBSD_4_4_BASE:1.1.1.1
	OPENBSD_4_3:1.1.1.1.0.16
	OPENBSD_4_3_BASE:1.1.1.1
	OPENBSD_4_2:1.1.1.1.0.14
	OPENBSD_4_2_BASE:1.1.1.1
	OPENBSD_4_1:1.1.1.1.0.12
	OPENBSD_4_1_BASE:1.1.1.1
	OPENBSD_4_0:1.1.1.1.0.10
	OPENBSD_4_0_BASE:1.1.1.1
	PERL_5_8_8:1.1.1.1
	OPENBSD_3_9:1.1.1.1.0.8
	OPENBSD_3_9_BASE:1.1.1.1
	OPENBSD_3_8:1.1.1.1.0.6
	OPENBSD_3_8_BASE:1.1.1.1
	OPENBSD_3_7:1.1.1.1.0.4
	OPENBSD_3_7_BASE:1.1.1.1
	PERL_5_8_6:1.1.1.1
	OPENBSD_3_6:1.1.1.1.0.2
	OPENBSD_3_6_BASE:1.1.1.1
	PERL_5_8_5:1.1.1.1
	CPAN:1.1.1;
locks; strict;
comment	@# @;
expand	@o@;


1.2
date	2017.02.05.00.32.19;	author afresh1;	state Exp;
branches;
next	1.1;
commitid	cxJ08BvJA9Pt2PTM;

1.1
date	2004.08.09.17.48.31;	author millert;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	2004.08.09.17.48.31;	author millert;	state Exp;
branches;
next	1.1.1.2;

1.1.1.2
date	2008.09.29.17.18.58;	author millert;	state Exp;
branches;
next	1.1.1.3;

1.1.1.3
date	2009.10.12.18.10.43;	author millert;	state Exp;
branches;
next	1.1.1.4;

1.1.1.4
date	2010.09.24.14.49.20;	author millert;	state Exp;
branches;
next	1.1.1.5;

1.1.1.5
date	2017.08.14.13.46.22;	author afresh1;	state Exp;
branches;
next	;
commitid	fAzrs78vdW2Yfc6A;


desc
@@


1.2
log
@Fix merge issues, remove excess files - match perl-5.24.1 dist
@
text
@#!./perl -w

print "1..4216\n";
my $test = 0;

my %templates = (
		 'UTF-8'    => 'C0U',
		 'UTF-16BE' => 'n',
		 'UTF-16LE' => 'v',
		);

sub bytes_to_utf {
    my ($enc, $content, $do_bom) = @@_;
    my $template = $templates{$enc};
    die "Unsupported encoding $enc" unless $template;
    my @@chars = unpack "U*", $content;
    if ($enc ne 'UTF-8') {
	# Make surrogate pairs
	my @@remember_that_utf_16_is_variable_length;
	foreach my $ord (@@chars) {
	    if ($ord < 0x10000) {
		push @@remember_that_utf_16_is_variable_length,
		    $ord;
	    } else {
		$ord -= 0x10000;
		push @@remember_that_utf_16_is_variable_length,
		    (0xD800 | ($ord >> 10)), (0xDC00 | ($ord & 0x3FF));
	    }
	}
	@@chars = @@remember_that_utf_16_is_variable_length;
    }
    return pack "$template*", ($do_bom ? 0xFEFF : ()), @@chars;
}

sub test {
    my ($enc, $write, $expect, $bom, $nl, $name) = @@_;
    open my $fh, ">", "utf$$.pl" or die "utf.pl: $!";
    binmode $fh;
    print $fh bytes_to_utf($enc, $write . ($nl ? "\n" : ''), $bom);
    close $fh or die $!;
    my $got = do "./utf$$.pl";
    $test = $test + 1;
    if (!defined $got) {
	if ($@@ =~ /^(Unsupported script encoding \Q$enc\E)/) {
	    print "ok $test # skip $1\n";
        } else {
	    print "not ok $test # $enc $bom $nl $name; got undef\n";
	}
    } elsif ($got ne $expect) {
	print "not ok $test # $enc $bom $nl $name; got '$got'\n";
    } else {
	print "ok $test # $enc $bom $nl $name\n";
    }
}

for my $bom (0, 1) {
    for my $enc (qw(UTF-16LE UTF-16BE UTF-8)) {
	for my $nl (1, 0) {
	    for my $value (123, 1234, 12345) {
		test($enc, $value, $value, $bom, $nl, $value);
		# This has the unfortunate side effect of causing an infinite
		# loop without the bug fix it corresponds to:
		test($enc, "($value)", $value, $bom, $nl, "($value)");
	    }
	    next if $enc eq 'UTF-8';
	    # Arguably a bug that currently string literals from UTF-8 file
	    # handles are not implicitly "use utf8", but don't FIXME that
	    # right now, as here we're testing the input filter itself.

	    for my $expect (
		"N", "\x{010a}", "\x{0a23}", "\x{64321}", "\x{10FFFD}",
		"\x{1000a}", # 0xD800 0xDC0A
		"\x{12800}", # 0xD80A 0xDC00
		# explore a bunch of bit-width boundaries
		map { chr((1 << $_) - 1), chr(1 << $_) } 7 .. 20
	    ) {
		# A space so that the UTF-16 heuristic triggers - " '" gives two
		# characters of ASCII.
		my $write = " '$expect'";
		my $name = 'chrs ' . join ', ', map {sprintf "%#x", ord $_} split '', $expect;
		test($enc, $write, $expect, $bom, $nl, $name);
	    }

	    # This is designed to try to trip over the end of the buffer,
	    # with similar results to U-1000A and U-12800 above.
	    for my $pad (2 .. 162) {
		for my $chr ("\x{10000}", "\x{1000a}", "\x{12800}") {
		    my $padding = ' ' x $pad;
		    # Need 4 octets that were from 2 ASCII characters to trigger
		    # the heuristic that detects UTF-16 without a BOM. For
		    # UTF-16BE, one space and the newline will do, as the
		    # newline's high octet comes first. But for UTF-16LE, a
		    # newline is "\n\0", so it doesn't trigger it.
		    test($enc, "  \n$padding'$chr'", $chr, $bom, $nl,
			 sprintf "'\\x{%x}' with $pad spaces before it", ord $chr);
		}
	    }
	}
    }
}

END {
    1 while unlink "utf$$.pl";
}
@


1.1
log
@Initial revision
@
text
@d1 1
a1 1
#!./perl
d3 28
a30 15
BEGIN {
    chdir 't' if -d 't';
    @@INC = '../lib';
    unless (find PerlIO::Layer 'perlio') {
	print "1..0 # Skip: not perlio\n";
	exit 0;
    }
    if ($ENV{PERL_CORE_MINITEST}) {
	print "1..0 # Skip: no dynamic loading on miniperl, no threads\n";
	exit 0;
    }
    require Config; import Config;
    if ($Config{'extensions'} !~ /\bEncode\b/) {
      print "1..0 # Skip: Encode was not built\n";
      exit 0;
d32 1
a34 6
require "./test.pl";

plan(tests => 15);

my $BOM = chr(0xFEFF);

d36 18
a53 8
    my ($enc, $tag, $bom) = @@_;
    open(UTF_PL, ">:raw:encoding($enc)", "utf.pl")
	or die "utf.pl($enc,$tag,$bom): $!";
    print UTF_PL $BOM if $bom;
    print UTF_PL "$tag\n";
    close(UTF_PL);
    my $got = do "./utf.pl";
    is($got, $tag);
d56 45
a100 16
test("utf16le",    123,   1);
test("utf16le",    1234,  1);
test("utf16le",    12345, 1);
test("utf16be",    123,   1);
test("utf16be",    1234,  1);
test("utf16be",    12345, 1);
test("utf8",       123,   1);
test("utf8",       1234,  1);
test("utf8",       12345, 1);

test("utf16le",    123,   0);
test("utf16le",    1234,  0);
test("utf16le",    12345, 0);
test("utf16be",    123,   0);
test("utf16be",    1234,  0);
test("utf16be",    12345, 0);
d103 1
a103 1
    1 while unlink "utf.pl";
@


1.1.1.1
log
@Import of stock perl 5.8.5
@
text
@@


1.1.1.2
log
@import perl 5.10.0 from CPAN
@
text
@d21 1
a21 1
BEGIN { require "./test.pl"; }
@


1.1.1.3
log
@import perl 5.10.1
@
text
@d29 1
a29 1
    open(UTF_PL, ">:raw:encoding($enc)", "utf$$.pl")
d34 1
a34 1
    my $got = do "./utf$$.pl";
d56 1
a56 1
    1 while unlink "utf$$.pl";
@


1.1.1.4
log
@Perl 5.12.2 from CPAN
@
text
@d1 1
a1 1
#!./perl -w
d3 15
a17 28
print "1..4016\n";
my $test = 0;

my %templates = (
		 'UTF-8'    => 'C0U',
		 'UTF-16BE' => 'n',
		 'UTF-16LE' => 'v',
		);

sub bytes_to_utf {
    my ($enc, $content, $do_bom) = @@_;
    my $template = $templates{$enc};
    die "Unsupported encoding $enc" unless $template;
    my @@chars = unpack "U*", $content;
    if ($enc ne 'UTF-8') {
	# Make surrogate pairs
	my @@remember_that_utf_16_is_variable_length;
	foreach my $ord (@@chars) {
	    if ($ord < 0x10000) {
		push @@remember_that_utf_16_is_variable_length,
		    $ord;
	    } else {
		$ord -= 0x10000;
		push @@remember_that_utf_16_is_variable_length,
		    (0xD800 | ($ord >> 10)), (0xDC00 | ($ord & 0x3FF));
	    }
	}
	@@chars = @@remember_that_utf_16_is_variable_length;
a18 1
    return pack "$template*", ($do_bom ? 0xFEFF : ()), @@chars;
d21 6
d28 6
a33 5
    my ($enc, $write, $expect, $bom, $nl, $name) = @@_;
    open my $fh, ">", "utf$$.pl" or die "utf.pl: $!";
    binmode $fh;
    print $fh bytes_to_utf($enc, $write . ($nl ? "\n" : ''), $bom);
    close $fh or die $!;
d35 1
a35 12
    $test = $test + 1;
    if (!defined $got) {
	if ($@@ =~ /^(Unsupported script encoding \Q$enc\E)/) {
	    print "ok $test # skip $1\n";
        } else {
	    print "not ok $test # $enc $bom $nl $name; got undef\n";
	}
    } elsif ($got ne $expect) {
	print "not ok $test # $enc $bom $nl $name; got '$got'\n";
    } else {
	print "ok $test # $enc $bom $nl $name\n";
    }
d38 16
a53 43
for my $bom (0, 1) {
    for my $enc (qw(UTF-16LE UTF-16BE UTF-8)) {
	for my $nl (1, 0) {
	    for my $value (123, 1234, 12345) {
		test($enc, $value, $value, $bom, $nl, $value);
		# This has the unfortunate side effect of causing an infinite
		# loop without the bug fix it corresponds to:
		test($enc, "($value)", $value, $bom, $nl, "($value)");
	    }
	    next if $enc eq 'UTF-8';
	    # Arguably a bug that currently string literals from UTF-8 file
	    # handles are not implicitly "use utf8", but don't FIXME that
	    # right now, as here we're testing the input filter itself.

	    for my $expect ("N", "\xFF", "\x{100}", "\x{010a}", "\x{0a23}",
			    "\x{10000}", "\x{64321}", "\x{10FFFD}",
			    "\x{1000a}", # 0xD800 0xDC0A
			    "\x{12800}", # 0xD80A 0xDC00
			   ) {
		# A space so that the UTF-16 heuristic triggers - " '" gives two
		# characters of ASCII.
		my $write = " '$expect'";
		my $name = 'chrs ' . join ', ', map {ord $_} split '', $expect;
		test($enc, $write, $expect, $bom, $nl, $name);
	    }

	    # This is designed to try to trip over the end of the buffer,
	    # with similar results to U-1000A and U-12800 above.
	    for my $pad (2 .. 162) {
		for my $chr ("\x{10000}", "\x{1000a}", "\x{12800}") {
		    my $padding = ' ' x $pad;
		    # Need 4 octets that were from 2 ASCII characters to trigger
		    # the heuristic that detects UTF-16 without a BOM. For
		    # UTF-16BE, one space and the newline will do, as the
		    # newline's high octet comes first. But for UTF-16LE, a
		    # newline is "\n\0", so it doesn't trigger it.
		    test($enc, "  \n$padding'$chr'", $chr, $bom, $nl,
			 sprintf "'\\x{%x}' with $pad spaces before it", ord $chr);
		}
	    }
	}
    }
}
@


1.1.1.5
log
@Import perl-5.24.2
@
text
@d3 1
a3 1
print "1..4216\n";
d70 5
a74 7
	    for my $expect (
		"N", "\x{010a}", "\x{0a23}", "\x{64321}", "\x{10FFFD}",
		"\x{1000a}", # 0xD800 0xDC0A
		"\x{12800}", # 0xD80A 0xDC00
		# explore a bunch of bit-width boundaries
		map { chr((1 << $_) - 1), chr(1 << $_) } 7 .. 20
	    ) {
d78 1
a78 1
		my $name = 'chrs ' . join ', ', map {sprintf "%#x", ord $_} split '', $expect;
@


