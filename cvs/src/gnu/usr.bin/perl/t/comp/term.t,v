head	1.4;
access;
symbols
	OPENBSD_6_1:1.4.0.72
	OPENBSD_6_1_BASE:1.4
	OPENBSD_6_0:1.4.0.70
	OPENBSD_6_0_BASE:1.4
	OPENBSD_5_9:1.4.0.64
	OPENBSD_5_9_BASE:1.4
	OPENBSD_5_8:1.4.0.66
	OPENBSD_5_8_BASE:1.4
	PERL_5_20_2:1.1.1.3
	OPENBSD_5_7:1.4.0.58
	OPENBSD_5_7_BASE:1.4
	PERL_5_20_1:1.1.1.3
	OPENBSD_5_6:1.4.0.62
	OPENBSD_5_6_BASE:1.4
	PERL_5_18_2:1.1.1.3
	PERL:1.1.1
	OPENBSD_5_5:1.4.0.60
	OPENBSD_5_5_BASE:1.4
	OPENBSD_5_4:1.4.0.56
	OPENBSD_5_4_BASE:1.4
	PERL_5_16_3:1.1.1.3
	OPENBSD_5_3:1.4.0.54
	OPENBSD_5_3_BASE:1.4
	OPENBSD_5_2:1.4.0.52
	OPENBSD_5_2_BASE:1.4
	OPENBSD_5_1_BASE:1.4
	OPENBSD_5_1:1.4.0.50
	OPENBSD_5_0:1.4.0.48
	OPENBSD_5_0_BASE:1.4
	OPENBSD_4_9:1.4.0.46
	OPENBSD_4_9_BASE:1.4
	PERL_5_12_2:1.1.1.3
	OPENBSD_4_8:1.4.0.44
	OPENBSD_4_8_BASE:1.4
	OPENBSD_4_7:1.4.0.40
	OPENBSD_4_7_BASE:1.4
	PERL_5_10_1:1.1.1.3
	OPENBSD_4_6:1.4.0.42
	OPENBSD_4_6_BASE:1.4
	OPENBSD_4_5:1.4.0.38
	OPENBSD_4_5_BASE:1.4
	PERL_5_10_0:1.1.1.3
	OPENBSD_4_4:1.4.0.36
	OPENBSD_4_4_BASE:1.4
	OPENBSD_4_3:1.4.0.34
	OPENBSD_4_3_BASE:1.4
	OPENBSD_4_2:1.4.0.32
	OPENBSD_4_2_BASE:1.4
	OPENBSD_4_1:1.4.0.30
	OPENBSD_4_1_BASE:1.4
	OPENBSD_4_0:1.4.0.28
	OPENBSD_4_0_BASE:1.4
	PERL_5_8_8:1.1.1.3
	OPENBSD_3_9:1.4.0.26
	OPENBSD_3_9_BASE:1.4
	OPENBSD_3_8:1.4.0.24
	OPENBSD_3_8_BASE:1.4
	OPENBSD_3_7:1.4.0.22
	OPENBSD_3_7_BASE:1.4
	PERL_5_8_6:1.1.1.3
	OPENBSD_3_6:1.4.0.20
	OPENBSD_3_6_BASE:1.4
	PERL_5_8_5:1.1.1.3
	PERL_5_8_3:1.1.1.3
	OPENBSD_3_5:1.4.0.18
	OPENBSD_3_5_BASE:1.4
	PERL_5_8_2:1.1.1.3
	OPENBSD_3_4:1.4.0.16
	OPENBSD_3_4_BASE:1.4
	OPENBSD_3_3:1.4.0.14
	OPENBSD_3_3_BASE:1.4
	PERL_5_8_0:1.1.1.3
	OPENBSD_3_2:1.4.0.12
	OPENBSD_3_2_BASE:1.4
	OPENBSD_3_1:1.4.0.10
	OPENBSD_3_1_BASE:1.4
	OPENBSD_3_0:1.4.0.8
	OPENBSD_3_0_BASE:1.4
	PERL_5_6_1:1.1.1.3
	OPENBSD_2_9:1.4.0.6
	OPENBSD_2_9_BASE:1.4
	OPENBSD_2_8:1.4.0.4
	OPENBSD_2_8_BASE:1.4
	OPENBSD_2_7:1.4.0.2
	OPENBSD_2_7_BASE:1.4
	PERL_5_6_0:1.1.1.3
	OPENBSD_2_6:1.3.0.2
	OPENBSD_2_6_BASE:1.3
	PERL_500503:1.1.1.2
	CPAN:1.1.1
	OPENBSD_2_5:1.2.0.6
	OPENBSD_2_5_BASE:1.2
	OPENBSD_2_4:1.2.0.4
	OPENBSD_2_4_BASE:1.2
	OPENBSD_2_3:1.2.0.2
	OPENBSD_2_3_BASE:1.2
	OPENBSD_2_2:1.1.1.1.0.6
	OPENBSD_2_2_BASE:1.1.1.1
	OPENBSD_2_1:1.1.1.1.0.4
	OPENBSD_2_1_BASE:1.1.1.1
	OPENBSD_2_0:1.1.1.1.0.2
	OPENBSD_2_0_BASE:1.1.1.1
	perl5003:1.1.1.1
	lwall:1.1.1;
locks; strict;
comment	@# @;
expand	@o@;


1.4
date	2000.04.06.17.07.58;	author millert;	state Exp;
branches;
next	1.3;

1.3
date	99.04.29.22.52.27;	author millert;	state Exp;
branches;
next	1.2;

1.2
date	97.11.30.08.00.09;	author millert;	state Exp;
branches;
next	1.1;

1.1
date	96.08.19.10.13.12;	author downsj;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	96.08.19.10.13.12;	author downsj;	state Exp;
branches;
next	1.1.1.2;

1.1.1.2
date	99.04.29.22.41.18;	author millert;	state Exp;
branches;
next	1.1.1.3;

1.1.1.3
date	2000.04.06.16.10.39;	author millert;	state Exp;
branches;
next	;


desc
@@


1.4
log
@perl-5.6.0 + local changes
@
text
@#!./perl

# tests that aren't important enough for base.term

print "1..23\n";

$x = "\\n";
print "#1\t:$x: eq " . ':\n:' . "\n";
if ($x eq '\n') {print "ok 1\n";} else {print "not ok 1\n";}

$x = "#2\t:$x: eq :\\n:\n";
print $x;
unless (index($x,'\\\\')>0) {print "ok 2\n";} else {print "not ok 2\n";}

if (length('\\\\') == 2) {print "ok 3\n";} else {print "not ok 3\n";}

$one = 'a';

if (length("\\n") == 2) {print "ok 4\n";} else {print "not ok 4\n";}
if (length("\\\n") == 2) {print "ok 5\n";} else {print "not ok 5\n";}
if (length("$one\\n") == 3) {print "ok 6\n";} else {print "not ok 6\n";}
if (length("$one\\\n") == 3) {print "ok 7\n";} else {print "not ok 7\n";}
if (length("\\n$one") == 3) {print "ok 8\n";} else {print "not ok 8\n";}
if (length("\\\n$one") == 3) {print "ok 9\n";} else {print "not ok 9\n";}
if (length("\\${one}") == 2) {print "ok 10\n";} else {print "not ok 10\n";}

if ("${one}b" eq "ab") { print "ok 11\n";} else {print "not ok 11\n";}

@@foo = (1,2,3);
if ("$foo[1]b" eq "2b") { print "ok 12\n";} else {print "not ok 12\n";}
if ("@@foo[0..1]b" eq "1 2b") { print "ok 13\n";} else {print "not ok 13\n";}
$" = '::';
if ("@@foo[0..1]b" eq "1::2b") { print "ok 14\n";} else {print "not ok 14\n";}

# test if C<eval "{...}"> distinguishes between blocks and hashrefs

$a = "{ '\\'' , 'foo' }";
$a = eval $a;
if (ref($a) eq 'HASH') {print "ok 15\n";} else {print "not ok 15\n";}

$a = "{ '\\\\\\'abc' => 'foo' }";
$a = eval $a;
if (ref($a) eq 'HASH') {print "ok 16\n";} else {print "not ok 16\n";}

$a = "{'a\\\n\\'b','foo'}";
$a = eval $a;
if (ref($a) eq 'HASH') {print "ok 17\n";} else {print "not ok 17\n";}

$a = "{'\\\\\\'\\\\'=>'foo'}";
$a = eval $a;
if (ref($a) eq 'HASH') {print "ok 18\n";} else {print "not ok 18\n";}

$a = "{q,a'b,,'foo'}";
$a = eval $a;
if (ref($a) eq 'HASH') {print "ok 19\n";} else {print "not ok 19\n";}

$a = "{q[[']]=>'foo'}";
$a = eval $a;
if (ref($a) eq 'HASH') {print "ok 20\n";} else {print "not ok 20\n";}

# needs disambiguation if first term is a variable
$a = "+{ \$a , 'foo'}";
$a = eval $a;
if (ref($a) eq 'HASH') {print "ok 21\n";} else {print "not ok 21\n";}

$a = "+{ \$a=>'foo'}";
$a = eval $a;
if (ref($a) eq 'HASH') {print "ok 22\n";} else {print "not ok 22\n";}

$a = "{ 0x01 => 'foo'}->{0x01}";
$a = eval $a;
if ($a eq 'foo') {print "ok 23\n";} else {print "not ok 23\n";}
@


1.3
log
@perl5.005_03 (stock)
@
text
@a2 2
# $RCSfile: term.t,v $$Revision: 4.1 $$Date: 92/08/07 18:27:24 $

d5 1
a5 1
print "1..22\n";
d69 4
@


1.2
log
@perl 5.004_04
@
text
@@


1.1
log
@Initial revision
@
text
@d7 1
a7 1
print "1..14\n";
d36 35
@


1.1.1.1
log
@Import of Perl 5.003 into the tree.  Makefile.bsd-wrapper and
config.sh.OpenBSD are the only local changes.
@
text
@@


1.1.1.2
log
@perl5.005_03
@
text
@d7 1
a7 1
print "1..22\n";
a35 35

# test if C<eval "{...}"> distinguishes between blocks and hashrefs

$a = "{ '\\'' , 'foo' }";
$a = eval $a;
if (ref($a) eq 'HASH') {print "ok 15\n";} else {print "not ok 15\n";}

$a = "{ '\\\\\\'abc' => 'foo' }";
$a = eval $a;
if (ref($a) eq 'HASH') {print "ok 16\n";} else {print "not ok 16\n";}

$a = "{'a\\\n\\'b','foo'}";
$a = eval $a;
if (ref($a) eq 'HASH') {print "ok 17\n";} else {print "not ok 17\n";}

$a = "{'\\\\\\'\\\\'=>'foo'}";
$a = eval $a;
if (ref($a) eq 'HASH') {print "ok 18\n";} else {print "not ok 18\n";}

$a = "{q,a'b,,'foo'}";
$a = eval $a;
if (ref($a) eq 'HASH') {print "ok 19\n";} else {print "not ok 19\n";}

$a = "{q[[']]=>'foo'}";
$a = eval $a;
if (ref($a) eq 'HASH') {print "ok 20\n";} else {print "not ok 20\n";}

# needs disambiguation if first term is a variable
$a = "+{ \$a , 'foo'}";
$a = eval $a;
if (ref($a) eq 'HASH') {print "ok 21\n";} else {print "not ok 21\n";}

$a = "+{ \$a=>'foo'}";
$a = eval $a;
if (ref($a) eq 'HASH') {print "ok 22\n";} else {print "not ok 22\n";}
@


1.1.1.3
log
@virgin perl 5.6.0
@
text
@d3 2
d7 1
a7 1
print "1..23\n";
a70 4

$a = "{ 0x01 => 'foo'}->{0x01}";
$a = eval $a;
if ($a eq 'foo') {print "ok 23\n";} else {print "not ok 23\n";}
@


