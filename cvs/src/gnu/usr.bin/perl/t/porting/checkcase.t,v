head	1.2;
access;
symbols
	OPENBSD_6_2:1.2.0.6
	OPENBSD_6_2_BASE:1.2
	PERL_5_24_2:1.1.1.4
	OPENBSD_6_1:1.2.0.4
	OPENBSD_6_1_BASE:1.2
	OPENBSD_6_0:1.1.1.3.0.12
	OPENBSD_6_0_BASE:1.1.1.3
	OPENBSD_5_9:1.1.1.3.0.6
	OPENBSD_5_9_BASE:1.1.1.3
	OPENBSD_5_8:1.1.1.3.0.8
	OPENBSD_5_8_BASE:1.1.1.3
	PERL_5_20_2:1.1.1.3
	OPENBSD_5_7:1.1.1.3.0.2
	OPENBSD_5_7_BASE:1.1.1.3
	PERL_5_20_1:1.1.1.3
	OPENBSD_5_6:1.1.1.3.0.4
	OPENBSD_5_6_BASE:1.1.1.3
	PERL_5_18_2:1.1.1.3
	PERL:1.1.1
	OPENBSD_5_5:1.1.1.2.0.6
	OPENBSD_5_5_BASE:1.1.1.2
	OPENBSD_5_4:1.1.1.2.0.2
	OPENBSD_5_4_BASE:1.1.1.2
	PERL_5_16_3:1.1.1.2
	OPENBSD_5_3:1.1.1.1.0.10
	OPENBSD_5_3_BASE:1.1.1.1
	OPENBSD_5_2:1.1.1.1.0.8
	OPENBSD_5_2_BASE:1.1.1.1
	OPENBSD_5_1_BASE:1.1.1.1
	OPENBSD_5_1:1.1.1.1.0.6
	OPENBSD_5_0:1.1.1.1.0.4
	OPENBSD_5_0_BASE:1.1.1.1
	OPENBSD_4_9:1.1.1.1.0.2
	OPENBSD_4_9_BASE:1.1.1.1
	PERL_5_12_2:1.1.1.1
	CPAN:1.1.1;
locks; strict;
comment	@# @;
expand	@o@;


1.2
date	2017.02.05.00.32.21;	author afresh1;	state Exp;
branches;
next	1.1;
commitid	cxJ08BvJA9Pt2PTM;

1.1
date	2010.09.24.14.49.19;	author millert;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	2010.09.24.14.49.19;	author millert;	state Exp;
branches;
next	1.1.1.2;

1.1.1.2
date	2013.03.25.20.09.37;	author sthen;	state Exp;
branches;
next	1.1.1.3;

1.1.1.3
date	2014.03.24.14.59.11;	author afresh1;	state Exp;
branches;
next	1.1.1.4;

1.1.1.4
date	2017.08.14.13.46.24;	author afresh1;	state Exp;
branches;
next	;
commitid	fAzrs78vdW2Yfc6A;


desc
@@


1.2
log
@Fix merge issues, remove excess files - match perl-5.24.1 dist
@
text
@#!/usr/bin/perl
# Finds the files that have the same name, case insensitively in the build tree

BEGIN {
    @@INC = '..' if -f '../TestInit.pm';
    require './test.pl';
}
use TestInit qw(T); # T is chdir to the top level

use warnings;
use strict;
use File::Find;

my %files;
my $test_count = 0;

# in a parallel 'make test', temporary files and directories can
# randomly appear and disappear; don't complain about these
no warnings 'File::Find';

find({no_chdir => 1, wanted => sub {
	   my $name = $File::Find::name;
	   # Assumes that the path separator is exactly one character.
	   $name =~ s/^\..//;

	   # Special exemption for Makefile, makefile
	   return if $name =~ m!\A[Mm]akefile\z!;

	   if ($name eq '.git') {
	       # Don't scan the .git directory, as its contents are outside
	       # our control. In particular, as fetch doesn't default to
	       # --prune, # someone pushing a branch upstream with a name
	       # which case-conflicts with a previously deleted branch will
	       # cause action-at-a-distance failures, because locally
	       # .git/logs/refs/remotes will contain both.
	       ++$File::Find::prune;
	       return;
	   }

	   push @@{$files{lc $name}}, $name;
	 }}, '.');

foreach (sort values %files) {
    is( @@$_, 1, join(", ", @@$_) ) or
        do{ note($_) foreach @@$_; };
}

done_testing();
@


1.1
log
@Initial revision
@
text
@d2 7
a8 2
# Finds the files that have the same name, case insensitively,
# in the current directory and its subdirectories
d17 5
a21 1
find(sub {
d24 1
a24 1
	   $name =~ s/^\.\..//;
d27 12
a38 1
	   return if $name =~ m!\A(?:x2p/)?[Mm]akefile\z!;
d41 1
a41 1
	 }, '..');
d43 3
a45 6
foreach (values %files) {
    if (@@$_ > 1) {
		print "not ok ".++$test_count. " - ". join(", ", @@$_), "\n";
    } else {
		print "ok ".++$test_count. " - ". join(", ", @@$_), "\n";
	}
d48 1
a48 1
print "1..".$test_count."\n";
@


1.1.1.1
log
@Perl 5.12.2 from CPAN
@
text
@@


1.1.1.2
log
@import perl 5.16.3 from CPAN - worked on by Andrew Fresh and myself
@
text
@d13 3
a15 3
        # We only care about directories to the extent they
        # result in an actual file collision, so skip dirs
        return if -d $File::Find::name;
d17 2
a18 3
        my $name = $File::Find::name;
        # Assumes that the path separator is exactly one character.
        $name =~ s/^\.\..//;
d20 2
a21 2
        # Special exemption for Makefile, makefile
        return if $name =~ m!\A(?:x2p/)?[Mm]akefile\z!;
d23 1
a23 4
        push @@{$files{lc $name}}, $name;
    }, '..');

foreach (sort values %files) {
d25 1
a25 2
        print "not ok ".++$test_count. " - ". join(", ", @@$_), "\n";
        print STDERR "# $_\n" foreach @@$_;
d27 2
a28 2
        print "ok ".++$test_count. " - ". join(", ", @@$_), "\n";
    }
a31 1
# vim: ts=4 sts=4 sw=4 et:
@


1.1.1.3
log
@Import perl-5.18.2

OK espie@@ sthen@@ deraadt@@
@
text
@d2 2
a3 7
# Finds the files that have the same name, case insensitively in the build tree

BEGIN {
    @@INC = '..' if -f '../TestInit.pm';
    require './test.pl';
}
use TestInit qw(T); # T is chdir to the top level
d12 11
a22 18
find({no_chdir => 1, wanted => sub {
	   my $name = $File::Find::name;
	   # Assumes that the path separator is exactly one character.
	   $name =~ s/^\..//;

	   # Special exemption for Makefile, makefile
	   return if $name =~ m!\A(?:x2p/)?[Mm]akefile\z!;

	   if ($name eq '.git') {
	       # Don't scan the .git directory, as its contents are outside
	       # our control. In particular, as fetch doesn't default to
	       # --prune, # someone pushing a branch upstream with a name
	       # which case-conflicts with a previously deleted branch will
	       # cause action-at-a-distance failures, because locally
	       # .git/logs/refs/remotes will contain both.
	       ++$File::Find::prune;
	       return;
	   }
d24 2
a25 2
	   push @@{$files{lc $name}}, $name;
	 }}, '.');
d28 6
a33 2
    is( @@$_, 1, join(", ", @@$_) ) or
        do{ note($_) foreach @@$_; };
d36 2
a37 1
done_testing();
@


1.1.1.4
log
@Import perl-5.24.2
@
text
@a16 4
# in a parallel 'make test', temporary files and directories can
# randomly appear and disappear; don't complain about these
no warnings 'File::Find';

d23 1
a23 1
	   return if $name =~ m!\A[Mm]akefile\z!;
@


