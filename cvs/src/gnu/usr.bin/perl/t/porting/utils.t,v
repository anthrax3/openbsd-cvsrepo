head	1.2;
access;
symbols
	OPENBSD_6_2_BASE:1.2
	PERL_5_24_2:1.1.1.4
	OPENBSD_6_1:1.2.0.4
	OPENBSD_6_1_BASE:1.2
	OPENBSD_6_0:1.1.1.3.0.10
	OPENBSD_6_0_BASE:1.1.1.3
	OPENBSD_5_9:1.1.1.3.0.4
	OPENBSD_5_9_BASE:1.1.1.3
	OPENBSD_5_8:1.1.1.3.0.6
	OPENBSD_5_8_BASE:1.1.1.3
	PERL_5_20_2:1.1.1.3
	OPENBSD_5_7:1.1.1.3.0.2
	OPENBSD_5_7_BASE:1.1.1.3
	PERL_5_20_1:1.1.1.3
	OPENBSD_5_6:1.1.1.2.0.4
	OPENBSD_5_6_BASE:1.1.1.2
	PERL_5_18_2:1.1.1.2
	PERL:1.1.1
	OPENBSD_5_5:1.1.1.1.0.6
	OPENBSD_5_5_BASE:1.1.1.1
	OPENBSD_5_4:1.1.1.1.0.2
	OPENBSD_5_4_BASE:1.1.1.1
	PERL_5_16_3:1.1.1.1
	CPAN:1.1.1;
locks; strict;
comment	@# @;
expand	@o@;


1.2
date	2017.02.05.00.32.21;	author afresh1;	state Exp;
branches;
next	1.1;
commitid	cxJ08BvJA9Pt2PTM;

1.1
date	2013.03.25.20.09.37;	author sthen;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	2013.03.25.20.09.37;	author sthen;	state Exp;
branches;
next	1.1.1.2;

1.1.1.2
date	2014.03.24.14.59.11;	author afresh1;	state Exp;
branches;
next	1.1.1.3;

1.1.1.3
date	2014.11.17.20.53.18;	author afresh1;	state Exp;
branches;
next	1.1.1.4;
commitid	B31cAbBIXiCqnL97;

1.1.1.4
date	2017.08.14.13.46.25;	author afresh1;	state Exp;
branches;
next	;
commitid	fAzrs78vdW2Yfc6A;


desc
@@


1.2
log
@Fix merge issues, remove excess files - match perl-5.24.1 dist
@
text
@#!./perl -w

# What does this test?
# This checks that all the perl "utils" don't have embarrassing syntax errors
#
# Why do we test this?
# Right now, without this, it's possible to pass the all the regression tests
# even if one has introduced syntax errors into scripts such as installperl
# or installman. No tests fail, so it's fair game to push the commit.
# Obviously this breaks installing perl, but we won't spot this.
# Whilst we can't easily test that the various scripts *work*, we can at least
# check that we've not made any trivial screw ups.
#
# It's broken - how do I fix it?
# Presumably it's failed because some (other) code that you changed was (also)
# used by one of the utility scripts. So you'll have to manually test that
# script.

BEGIN {
    @@INC = '..' if -f '../TestInit.pm';
}
use TestInit qw(T); # T is chdir to the top level
use strict;

require 't/test.pl';

# It turns out that, since the default @@INC will include your old 5.x libs, if
# you have them, the Porting utils might load a library that no longer compiles
# clean.  This actually happened, with Local::Maketext::Lexicon from a 5.10.0
# preventing 5.16.0-RC0 from testing successfully.  This test is really only
# needed for porters, anyway.  -- rjbs, 2012-05-10
find_git_or_skip('all');

my @@maybe;

open my $fh, '<', 'MANIFEST' or die "Can't open MANIFEST: $!";
while (<$fh>) {
    push @@maybe, $1 if m!^(Porting/\S+)!;
}
close $fh or die $!;

open $fh, '<', 'utils.lst' or die "Can't open utils.lst: $!";
while (<$fh>) {
    die unless  m!^(\S+)!;
    push @@maybe, $1;
    $maybe[$#maybe] .= '.com' if $^O eq 'VMS';
}
close $fh or die $!;

# regen/uconfig_h.pl is here because it's not possible to test it by running
# it on non-*nix platforms, as it requires a Bourne shell. As it's the only file
# in regen/ which we can syntax check but can't run, it's simpler to add it to
# the list here, than copy-paste the entire syntax-checking logic to
# t/porting/regen.t
my @@victims = (qw(installman installperl regen_perly.pl regen/uconfig_h.pl));
my %excuses = (
               'Porting/git-deltatool' => 'Git::Wrapper',
               'Porting/podtidy' => 'Pod::Tidy',
               'Porting/leakfinder.pl' => 'XS::APItest',
              );

foreach (@@maybe) {
    if (/\.p[lm]$/) {
        push @@victims, $_;
    } else {
        open $fh, '<', $_ or die "Can't open '$_': $!";
        my $line = <$fh>;
        if ($line =~ m{^#!(?:\S*|/usr/bin/env\s+)perl}
	    || $^O eq 'VMS' && $line =~ m{^\$ perl}) {
            push @@victims, $_;
        } else {
            print "# $_ isn't a Perl script\n";
        }
    }
}

printf "1..%d\n", scalar @@victims;

foreach my $victim (@@victims) {
 SKIP: {
        skip ("$victim uses $excuses{$victim}, so can't test with just core modules")
            if $excuses{$victim};

        my $got = runperl(switches => ['-c'], progfile => $victim, stderr => 1, nolib => 1);
        is($got, "$victim syntax OK\n", "$victim compiles")
            or diag("when executing perl with '-c $victim'");
    }
}

# ex: set ts=8 sts=4 sw=4 et:
@


1.1
log
@Initial revision
@
text
@d50 6
a55 1
my @@victims = (qw(installman installperl regen_perly.pl));
d59 1
d65 1
a65 5
    } elsif ($_ !~ m{^x2p/a2p}) {
        # test_prep doesn't (yet) have a dependency on a2p, so it seems a bit
        # silly adding one (and forcing it to be built) just so that we can open
        # it and determine that it's *not* a perl program, and hence of no
        # further interest to us.
a80 5
        # Not clear to me *why* it needs the BEGIN block, given what it
        # does, but not in an easy position to change it.
        skip("$victim executes code in a BEGIN block which fails for empty \@@ARGV")
            if $victim =~ m{^utils/cpanp-run-perl};

d84 3
a86 2
        my $got = runperl(switches => ['-c'], progfile => $victim, stderr => 1);
        is($got, "$victim syntax OK\n", "$victim compiles");
a89 5
# Local variables:
# cperl-indent-level: 4
# indent-tabs-mode: nil
# End:
#
@


1.1.1.1
log
@import perl 5.16.3 from CPAN - worked on by Andrew Fresh and myself
@
text
@@


1.1.1.2
log
@Import perl-5.18.2

OK espie@@ sthen@@ deraadt@@
@
text
@a53 1
               'Porting/leakfinder.pl' => 'XS::APItest',
@


1.1.1.3
log
@Import perl-5.20.1
@
text
@d50 1
a50 6
# regen/uconfig_h.pl is here because it's not possible to test it by running
# it on non-*nix platforms, as it requires a Bourne shell. As it's the only file
# in regen/ which we can syntax check but can't run, it's simpler to add it to
# the list here, than copy-paste the entire syntax-checking logic to
# t/porting/regen.t
my @@victims = (qw(installman installperl regen_perly.pl regen/uconfig_h.pl));
d80 5
d88 1
a88 1
        my $got = runperl(switches => ['-c'], progfile => $victim, stderr => 1, nolib => 1);
@


1.1.1.4
log
@Import perl-5.24.2
@
text
@d65 5
a69 1
    } else {
d89 1
a89 2
        is($got, "$victim syntax OK\n", "$victim compiles")
            or diag("when executing perl with '-c $victim'");
d93 5
@


