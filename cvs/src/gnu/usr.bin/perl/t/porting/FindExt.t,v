head	1.2;
access;
symbols
	OPENBSD_6_2:1.2.0.6
	OPENBSD_6_2_BASE:1.2
	PERL_5_24_2:1.1.1.3
	OPENBSD_6_1:1.2.0.4
	OPENBSD_6_1_BASE:1.2
	OPENBSD_6_0:1.1.1.2.0.10
	OPENBSD_6_0_BASE:1.1.1.2
	OPENBSD_5_9:1.1.1.2.0.4
	OPENBSD_5_9_BASE:1.1.1.2
	OPENBSD_5_8:1.1.1.2.0.6
	OPENBSD_5_8_BASE:1.1.1.2
	PERL_5_20_2:1.1.1.2
	OPENBSD_5_7:1.1.1.2.0.2
	OPENBSD_5_7_BASE:1.1.1.2
	PERL_5_20_1:1.1.1.2
	OPENBSD_5_6:1.1.1.1.0.8
	OPENBSD_5_6_BASE:1.1.1.1
	PERL_5_18_2:1.1.1.1
	PERL:1.1.1
	OPENBSD_5_5:1.1.1.1.0.6
	OPENBSD_5_5_BASE:1.1.1.1
	OPENBSD_5_4:1.1.1.1.0.2
	OPENBSD_5_4_BASE:1.1.1.1
	PERL_5_16_3:1.1.1.1
	CPAN:1.1.1;
locks; strict;
comment	@# @;
expand	@o@;


1.2
date	2017.02.05.00.32.21;	author afresh1;	state Exp;
branches;
next	1.1;
commitid	cxJ08BvJA9Pt2PTM;

1.1
date	2013.03.25.20.09.37;	author sthen;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	2013.03.25.20.09.37;	author sthen;	state Exp;
branches;
next	1.1.1.2;

1.1.1.2
date	2014.11.17.20.53.18;	author afresh1;	state Exp;
branches;
next	1.1.1.3;
commitid	B31cAbBIXiCqnL97;

1.1.1.3
date	2017.08.14.13.46.24;	author afresh1;	state Exp;
branches;
next	;
commitid	fAzrs78vdW2Yfc6A;


desc
@@


1.2
log
@Fix merge issues, remove excess files - match perl-5.24.1 dist
@
text
@#!../miniperl -w

BEGIN {
    @@INC = qw(../win32 ../lib);
    require './test.pl';
    skip_all('FindExt not portable')
	if $^O eq 'VMS';
}
use strict;
use Config;

# Test that Win32/FindExt.pm is consistent with Configure in determining the
# types of extensions.

if ($^O eq "MSWin32" && !defined $ENV{PERL_STATIC_EXT}) {
    skip_all "PERL_STATIC_EXT must be set to the list of static extensions";
}

if ( $Config{usecrosscompile} ) {
  skip_all( "Not all files are available during cross-compilation" );
}

require FindExt;

FindExt::apply_config(\%Config);
FindExt::scan_ext("../$_")
    foreach qw(cpan dist ext);
FindExt::set_static_extensions(split ' ', $^O eq 'MSWin32'
                               ? $ENV{PERL_STATIC_EXT} : $Config{static_ext});

sub compare {
    my ($desc, $want, @@have) = @@_;
    $want = [sort split ' ', $want]
        unless ref $want eq 'ARRAY';
    local $::Level = $::Level + 1;
    is(scalar @@have, scalar @@$want, "We find the same number of $desc");
    is("@@have", "@@$want", "We find the same list of $desc");
}

unless (join (' ', sort split ' ', $Config{extensions})
        eq join(' ', FindExt::extensions())) {
    # There are various things that break our assumptions.
    # If Encode is a static extension, then Configure has special case logic
    # to add Encode/* as static extensions
    # -Uusedl causes Encode to be a static extension, and drops building
    # XS::APItest and XS::Typemap
    # Any use of -Dnoextensions to choose not to build a extension

    plan(tests => 2);
    note("configured extension list doesn't match, so only minimal testing is possible");
    compare('known_extensions', $Config{known_extensions},
            FindExt::known_extensions());
} else {
    # dynamic linking, and all possible extensions for this system were built,
    # so can test everything.
    plan(tests => 12);

    compare('known_extensions', $Config{known_extensions},
            FindExt::known_extensions());

    # Config.pm and FindExt.pm make different choices about what should be built
    my @@config_built;
    my @@found_built;

    foreach my $type (qw(static dynamic nonxs)) {
        my @@this_found = eval "FindExt::${type}_ext()";
        push @@found_built, @@this_found;
	push @@config_built, split ' ', $Config{"${type}_ext"};
        compare("${type}_ext", $Config{"${type}_ext"}, @@this_found);
    }

    compare('"config" dynamic + static + nonxs', $Config{extensions},
            sort @@config_built);
    compare('"found" dynamic + static + nonxs', [FindExt::extensions()],
            sort @@found_built);
}

# ex: set ts=8 sts=4 sw=4 et:
@


1.1
log
@Initial revision
@
text
@a13 3
# It's not possible to check the list of built dynamic extensions, as that
# varies based on which headers are present, and which options ./Configure was
# invoked with.
d19 2
a20 2
unless (defined $Config{usedl}) {
    skip_all "FindExt just plain broken for static perl.";
d23 1
a23 2
plan tests => 10;
use FindExt;
d26 39
a64 10
FindExt::scan_ext('../cpan');
FindExt::scan_ext('../dist');
FindExt::scan_ext('../ext');
FindExt::set_static_extensions(split ' ', $ENV{PERL_STATIC_EXT}) if $^O eq "MSWin32";
FindExt::set_static_extensions(split ' ', $Config{static_ext}) unless $^O eq "MSWin32";

# Config.pm and FindExt.pm make different choices about what should be built
my @@config_built;
my @@found_built;
{
d66 2
a67 1
	push @@found_built, eval "FindExt::${type}_ext()";
d69 1
d71 5
a76 2
@@config_built = sort @@config_built;
@@found_built = sort @@found_built;
d78 1
a78 17
foreach (['static_ext',
	  [FindExt::static_ext()], $Config{static_ext}],
	 ['nonxs_ext',
	  [FindExt::nonxs_ext()], $Config{nonxs_ext}],
	 ['known_extensions',
	  [FindExt::known_extensions()], $Config{known_extensions}],
	 ['"config" dynamic + static + nonxs',
	  \@@config_built, $Config{extensions}],
	 ['"found" dynamic + static + nonxs', 
	  \@@found_built, join " ", FindExt::extensions()],
	) {
    my ($type, $found, $config) = @@$_;
    my @@config = sort split ' ', $config;
    is (scalar @@$found, scalar @@config,
	"We find the same number of $type");
    is ("@@$found", "@@config", "We find the same list of $type");
}
@


1.1.1.1
log
@import perl 5.16.3 from CPAN - worked on by Andrew Fresh and myself
@
text
@@


1.1.1.2
log
@Import perl-5.20.1
@
text
@d14 3
d22 2
a23 2
if ( $Config{usecrosscompile} ) {
  skip_all( "Not all files are available during cross-compilation" );
d26 2
a27 1
require FindExt;
d30 10
a39 39
FindExt::scan_ext("../$_")
    foreach qw(cpan dist ext);
FindExt::set_static_extensions(split ' ', $^O eq 'MSWin32'
                               ? $ENV{PERL_STATIC_EXT} : $Config{static_ext});

sub compare {
    my ($desc, $want, @@have) = @@_;
    $want = [sort split ' ', $want]
        unless ref $want eq 'ARRAY';
    local $::Level = $::Level + 1;
    is(scalar @@have, scalar @@$want, "We find the same number of $desc");
    is("@@have", "@@$want", "We find the same list of $desc");
}

unless (join (' ', sort split ' ', $Config{extensions})
        eq join(' ', FindExt::extensions())) {
    # There are various things that break our assumptions.
    # If Encode is a static extension, then Configure has special case logic
    # to add Encode/* as static extensions
    # -Uusedl causes Encode to be a static extension, and drops building
    # XS::APItest and XS::Typemap
    # Any use of -Dnoextensions to choose not to build a extension

    plan(tests => 2);
    note("configured extension list doesn't match, so only minimal testing is possible");
    compare('known_extensions', $Config{known_extensions},
            FindExt::known_extensions());
} else {
    # dynamic linking, and all possible extensions for this system were built,
    # so can test everything.
    plan(tests => 12);

    compare('known_extensions', $Config{known_extensions},
            FindExt::known_extensions());

    # Config.pm and FindExt.pm make different choices about what should be built
    my @@config_built;
    my @@found_built;

d41 1
a41 2
        my @@this_found = eval "FindExt::${type}_ext()";
        push @@found_built, @@this_found;
a42 1
        compare("${type}_ext", $Config{"${type}_ext"}, @@this_found);
d44 3
d48 16
a63 4
    compare('"config" dynamic + static + nonxs', $Config{extensions},
            sort @@config_built);
    compare('"found" dynamic + static + nonxs', [FindExt::extensions()],
            sort @@found_built);
a64 7

# Local variables:
# cperl-indent-level: 4
# indent-tabs-mode: nil
# End:
#
# ex: set ts=8 sts=4 sw=4 et:
@


1.1.1.3
log
@Import perl-5.24.2
@
text
@d78 5
@


