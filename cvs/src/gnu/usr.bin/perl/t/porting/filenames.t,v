head	1.1;
branch	1.1.1;
access;
symbols
	OPENBSD_6_1_BASE:1.1.1.2
	OPENBSD_6_0:1.1.1.2.0.12
	OPENBSD_6_0_BASE:1.1.1.2
	OPENBSD_5_9:1.1.1.2.0.6
	OPENBSD_5_9_BASE:1.1.1.2
	OPENBSD_5_8:1.1.1.2.0.8
	OPENBSD_5_8_BASE:1.1.1.2
	PERL_5_20_2:1.1.1.2
	OPENBSD_5_7:1.1.1.2.0.2
	OPENBSD_5_7_BASE:1.1.1.2
	PERL_5_20_1:1.1.1.2
	OPENBSD_5_6:1.1.1.2.0.4
	OPENBSD_5_6_BASE:1.1.1.2
	PERL_5_18_2:1.1.1.2
	PERL:1.1.1
	OPENBSD_5_5:1.1.1.1.0.6
	OPENBSD_5_5_BASE:1.1.1.1
	OPENBSD_5_4:1.1.1.1.0.2
	OPENBSD_5_4_BASE:1.1.1.1
	PERL_5_16_3:1.1.1.1
	CPAN:1.1.1;
locks; strict;
comment	@# @;
expand	@o@;


1.1
date	2013.03.25.20.09.37;	author sthen;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	2013.03.25.20.09.37;	author sthen;	state Exp;
branches;
next	1.1.1.2;

1.1.1.2
date	2014.03.24.14.59.11;	author afresh1;	state Exp;
branches;
next	;


desc
@@


1.1
log
@Initial revision
@
text
@#!./perl -w

=head1 filenames.t

Test the well-formed-ness of filenames names in the MANIFEST file. Current
tests being done:

=over 4

=item * no more than 39 characters before the dot, and 39 after

=item * no filenames starting with -

=item * don't use any of these names (regardless of case) before the dot: CON,
PRN, AUX, NUL, COM1, COM2, COM3, COM4, COM5, COM6, COM7, COM8, COM9, LPT1,
LPT2, LPT3, LPT4, LPT5, LPT6, LPT7, LPT8, and LPT9

=item * no spaces, ( or & in filenames

=back

=cut

BEGIN {
    chdir 't';
    @@INC = '../lib';
}

use strict;
use File::Spec;
use File::Basename;
require './test.pl';


my $manifest = File::Spec->catfile(File::Spec->updir(), 'MANIFEST');

open my $m, '<', $manifest or die "Can't open '$manifest': $!";
my @@files;
while (<$m>) {
    chomp;
    my($path) = split /\t+/;
    push @@files, $path;

}
close $m or die $!;

plan(scalar @@files);

for my $file (@@files) {
    validate_file_name($file);
}
exit 0;


sub validate_file_name {
    my $path = shift;
    my $filename = basename $path;

    note("testing $path");

    my @@path_components = split('/',$path);
    pop @@path_components; # throw away the filename
    for my $component (@@path_components) {
	if ($component =~ /\./) {
	    fail("no directory components containing '.'");
	    return;
	}
	if (length $component > 32) {
	    fail("no directory with a name over 32 characters (VOS requirement)");
	    return;
	}
    }


    if ($filename =~ /^\-/) {
	fail("filename does not start with -");
	return;
    }

    my($before, $after) = split /\./, $filename;
    if (length $before > 39) {
	fail("filename has 39 or fewer characters before the dot");
	return;
    }
    if ($after) {
	if (length $after > 39) {
	    fail("filename has 39 or fewer characters after the dot");
	    return;
	}
    }

    if ($filename =~ /^(?:CON|PRN|AUX|NUL|COM[1-9]|LPT[1-9])\./i) {
	fail("filename has a reserved name");
	return;
    }

    if ($filename =~ /\s|\(|\&/) {
	fail("filename has a reserved character");
	return;
    }
    pass("filename ok");
}

# EOF
@


1.1.1.1
log
@import perl 5.16.3 from CPAN - worked on by Andrew Fresh and myself
@
text
@@


1.1.1.2
log
@Import perl-5.18.2

OK espie@@ sthen@@ deraadt@@
@
text
@d30 1
d35 1
a35 1
my $manifest = '../MANIFEST';
d49 14
a62 3
PATHNAME: for my $pathname (@@files) {
    my @@path_components = split('/',$pathname);
    my $filename = pop @@path_components;
d64 8
a71 8
        if ($component =~ /\./) {
            fail("$pathname has directory components containing '.'");
            next PATHNAME;
        }
        if (length $component > 32) {
            fail("$pathname has a name over 32 characters (VOS requirement)");
            next PATHNAME;
        }
d76 2
a77 2
        fail("$pathname starts with -");
            next PATHNAME;
d82 18
a99 9
        fail("$pathname has more than 39 characters before the dot");
    } elsif ($after && length $after > 39) {
        fail("$pathname has more than 39 characters after the dot");
    } elsif ($filename =~ /^(?:CON|PRN|AUX|NUL|COM[1-9]|LPT[1-9])\./i) {
        fail("$pathname has a reserved name");
    } elsif ($filename =~ /\s|\(|\&/) {
        fail("$pathname has a reserved character");
    } else {
        pass("$pathname ok");
d101 1
@

