head	1.2;
access;
symbols
	OPENBSD_6_2_BASE:1.2
	PERL_5_24_2:1.1.1.5
	OPENBSD_6_1:1.2.0.4
	OPENBSD_6_1_BASE:1.2
	OPENBSD_6_0:1.1.1.4.0.10
	OPENBSD_6_0_BASE:1.1.1.4
	OPENBSD_5_9:1.1.1.4.0.4
	OPENBSD_5_9_BASE:1.1.1.4
	OPENBSD_5_8:1.1.1.4.0.6
	OPENBSD_5_8_BASE:1.1.1.4
	PERL_5_20_2:1.1.1.4
	OPENBSD_5_7:1.1.1.4.0.2
	OPENBSD_5_7_BASE:1.1.1.4
	PERL_5_20_1:1.1.1.4
	OPENBSD_5_6:1.1.1.3.0.4
	OPENBSD_5_6_BASE:1.1.1.3
	PERL_5_18_2:1.1.1.3
	PERL:1.1.1
	OPENBSD_5_5:1.1.1.2.0.6
	OPENBSD_5_5_BASE:1.1.1.2
	OPENBSD_5_4:1.1.1.2.0.2
	OPENBSD_5_4_BASE:1.1.1.2
	PERL_5_16_3:1.1.1.2
	OPENBSD_5_3:1.1.1.1.0.10
	OPENBSD_5_3_BASE:1.1.1.1
	OPENBSD_5_2:1.1.1.1.0.8
	OPENBSD_5_2_BASE:1.1.1.1
	OPENBSD_5_1_BASE:1.1.1.1
	OPENBSD_5_1:1.1.1.1.0.6
	OPENBSD_5_0:1.1.1.1.0.4
	OPENBSD_5_0_BASE:1.1.1.1
	OPENBSD_4_9:1.1.1.1.0.2
	OPENBSD_4_9_BASE:1.1.1.1
	PERL_5_12_2:1.1.1.1
	CPAN:1.1.1;
locks; strict;
comment	@# @;
expand	@o@;


1.2
date	2017.02.05.00.32.21;	author afresh1;	state Exp;
branches;
next	1.1;
commitid	cxJ08BvJA9Pt2PTM;

1.1
date	2010.09.24.14.49.19;	author millert;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	2010.09.24.14.49.19;	author millert;	state Exp;
branches;
next	1.1.1.2;

1.1.1.2
date	2013.03.25.20.09.37;	author sthen;	state Exp;
branches;
next	1.1.1.3;

1.1.1.3
date	2014.03.24.14.59.11;	author afresh1;	state Exp;
branches;
next	1.1.1.4;

1.1.1.4
date	2014.11.17.20.53.18;	author afresh1;	state Exp;
branches;
next	1.1.1.5;
commitid	B31cAbBIXiCqnL97;

1.1.1.5
date	2017.08.14.13.46.25;	author afresh1;	state Exp;
branches;
next	;
commitid	fAzrs78vdW2Yfc6A;


desc
@@


1.2
log
@Fix merge issues, remove excess files - match perl-5.24.1 dist
@
text
@#!./perl -w

# What does this test?
# This tests the well-formed-ness of the MANIFEST file.
#
# Why do we test this?
# TK
#
# It's broken - how do I fix it?
# If MANIFEST is not sorted properly, you will get this error output:
#      got ''MANIFEST' is NOT sorted properly
#      # '
#      # expected /(?^:is sorted properly)/
#
# To correct this, run either:
#
#   ./perl -Ilib Porting/manisort -o MANIFEST MANIFEST
#
# which will output "'MANIFEST' is NOT sorted properly" but which will
# correct the problem; or:
#
#   make manifest
#
# which will output "WARNING: re-sorting MANIFEST" but which will also
# correct the problem.

use Config;
BEGIN {
    @@INC = '..' if -f '../TestInit.pm';
}
use TestInit qw(T); # T is chdir to the top level

require 't/test.pl';

skip_all("Cross-compiling, the entire source might not be available")
    if $Config{usecrosscompile};


plan('no_plan');

my $manifest = 'MANIFEST';

open my $m, '<', $manifest or die "Can't open '$manifest': $!";
my @@files;
# Test that MANIFEST uses tabs - not spaces - after the name of the file.
while (<$m>) {
    chomp;
    unless( /\s/ ) {
        push @@files, $_;
        # no need for further tests on lines without whitespace (i.e., filename only)
        next;
    }
    my ($file, $separator) = /^(\S+)(\s+)/;
    push @@files, $file;

    isnt($file, undef, "Line $. doesn't start with a blank") or next;
    ok(-f $file, "File $file exists");
    if ($separator !~ tr/\t//c) {
	# It's all tabs
	next;
    } elsif ($separator !~ tr/ //c) {
	# It's all spaces
	fail("Spaces in entry for $file");
    } elsif ($separator =~ tr/\t//) {
	fail("Mixed tabs and spaces in entry for $file");
    } else {
	fail("Odd whitespace in entry for $file");
    }
}

close $m or die $!;

# Test that MANIFEST is properly sorted
SKIP: {
    skip("Sorting order is different under EBCDIC", 1) if $::IS_EBCDIC || $::IS_EBCDIC;
    skip("'Porting/manisort' not found", 1) if (! -f 'Porting/manisort');

    my $result = runperl('progfile' => 'Porting/manisort',
                         'args'     => [ '-c', $manifest ],
                         'stderr'   => 1,
                         'nolib'    => 1 );

    like($result, qr/is sorted properly/, 'MANIFEST sorted properly');
}

SKIP: {
    find_git_or_skip(6);
    chomp(my @@repo= grep { !/\.gitignore$/ } `git ls-files`);
    skip("git ls-files didnt work",3)
        if !@@repo;
    is( 0+@@repo, 0+@@files, "git ls-files gives the same number of files as MANIFEST lists");
    my %repo;
    ++$repo{$_} for @@repo;
    my %mani;
    ++$mani{$_} for @@files;
    is( 0+keys %mani, 0+@@files, "no duplicate files in MANIFEST")
      or diag(join("\n  ", "Duplicates:",grep $mani{$_} > 1, keys %mani));
    delete $mani{$_} for @@repo;
    delete $repo{$_} for @@files;
    my @@not_in_mani= keys %repo;
    my @@still_in_mani= keys %mani;

    is( 0+@@not_in_mani, 0, "Nothing added to the repo that isn't in MANIFEST");
    is( "not in MANIFEST: @@not_in_mani", "not in MANIFEST: ",
        "Nothing added to the repo that isn't in MANIFEST");
    is( 0+@@still_in_mani, 0, "Nothing in the MANIFEST that isn't tracked by git");
    is( "should not be in MANIFEST: @@still_in_mani", "should not be in MANIFEST: ",
        "Nothing in the MANIFEST that isn't tracked by git");

}

# EOF
@


1.1
log
@Initial revision
@
text
@d3 23
a25 1
# Test the well-formed-ness of the MANIFEST file.
d27 1
d29 1
a29 2
    chdir 't';
    @@INC = '../lib';
d31 6
a37 3
use strict;
use File::Spec;
require './test.pl';
d41 1
a41 1
my $manifest = File::Spec->catfile(File::Spec->updir(), 'MANIFEST');
d44 1
a44 1

d48 5
a52 1
    next unless /\s/;   # Ignore lines without whitespace (i.e., filename only)
d54 2
d57 1
a57 2
    # Remember, we're running from t/
    ok(-f "../$file", "File $file exists");
d75 2
a76 1
    skip("'Porting/manisort' not found", 1) if (! -f '../Porting/manisort');
d78 4
a81 3
    my $result = runperl('progfile' => '../Porting/manisort',
                         'args'     => [ '-c', '../MANIFEST' ],
                         'stderr'   => 1);
d84 26
@


1.1.1.1
log
@Perl 5.12.2 from CPAN
@
text
@@


1.1.1.2
log
@import perl 5.16.3 from CPAN - worked on by Andrew Fresh and myself
@
text
@d6 2
a7 1
    @@INC = '..' if -f '../TestInit.pm';
a8 1
use TestInit qw(T A); # T is chdir to the top level, A makes paths absolute
d10 3
a12 1
require 't/test.pl';
d16 1
a16 1
my $manifest = 'MANIFEST';
d19 1
a19 1
my @@files;
d23 1
a23 5
    unless( /\s/ ) {
        push @@files, $_;
        # no need for further tests on lines without whitespace (i.e., filename only)
        next;
    }
a24 2
    push @@files, $file;

d26 2
a27 1
    ok(-f $file, "File $file exists");
d45 1
a45 1
    skip("'Porting/manisort' not found", 1) if (! -f 'Porting/manisort');
d47 2
a48 2
    my $result = runperl('progfile' => 'Porting/manisort',
                         'args'     => [ '-c', $manifest ],
a51 23
}

SKIP: {
    find_git_or_skip(6);
    chomp(my @@repo= grep { !/\.gitignore$/ } `git ls-files`);
    skip("git ls-files didnt work",3)
        if !@@repo;
    is( 0+@@repo, 0+@@files, "git ls-files gives the same number of files as MANIFEST lists");
    my %repo= map { $_ => 1 } @@repo;
    my %mani= map { $_ => 1 } @@files;
    is( 0+keys %mani, 0+@@files, "no duplicate files in MANIFEST");
    delete $mani{$_} for @@repo;
    delete $repo{$_} for @@files;
    my @@not_in_mani= keys %repo;
    my @@still_in_mani= keys %mani;

    is( 0+@@not_in_mani, 0, "Nothing added to the repo that isn't in MANIFEST");
    is( "not in MANIFEST: @@not_in_mani", "not in MANIFEST: ",
        "Nothing added to the repo that isn't in MANIFEST");
    is( 0+@@still_in_mani, 0, "Nothing in the MANIFEST that isn't tracked by git");
    is( "should not be in MANIFEST: @@still_in_mani", "should not be in MANIFEST: ",
        "Nothing in the MANIFEST that isn't tracked by git");

@


1.1.1.3
log
@Import perl-5.18.2

OK espie@@ sthen@@ deraadt@@
@
text
@d8 1
a8 1
use TestInit qw(T); # T is chdir to the top level
@


1.1.1.4
log
@Import perl-5.20.1
@
text
@d3 1
a3 23
# What does this test?
# This tests the well-formed-ness of the MANIFEST file.
#
# Why do we test this?
# TK
#
# It's broken - how do I fix it?
# If MANIFEST is not sorted properly, you will get this error output:
#      got ''MANIFEST' is NOT sorted properly
#      # '
#      # expected /(?^:is sorted properly)/
#
# To correct this, run either:
#
#   ./perl -Ilib Porting/manisort -o MANIFEST MANIFEST
#
# which will output "'MANIFEST' is NOT sorted properly" but which will
# correct the problem; or:
#
#   make manifest
#
# which will output "WARNING: re-sorting MANIFEST" but which will also
# correct the problem.
a4 1
use Config;
a11 4
skip_all("Cross-compiling, the entire source might not be available")
    if $Config{usecrosscompile};


d52 1
a52 2
                         'stderr'   => 1,
                         'nolib'    => 1 );
@


1.1.1.5
log
@Import perl-5.24.2
@
text
@a74 1
    skip("Sorting order is different under EBCDIC", 1) if $::IS_EBCDIC || $::IS_EBCDIC;
d91 3
a93 6
    my %repo;
    ++$repo{$_} for @@repo;
    my %mani;
    ++$mani{$_} for @@files;
    is( 0+keys %mani, 0+@@files, "no duplicate files in MANIFEST")
      or diag(join("\n  ", "Duplicates:",grep $mani{$_} > 1, keys %mani));
@


