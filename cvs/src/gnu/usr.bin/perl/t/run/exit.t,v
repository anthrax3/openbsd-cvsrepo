head	1.2;
access;
symbols
	OPENBSD_6_1_BASE:1.2
	OPENBSD_6_0:1.1.1.4.0.26
	OPENBSD_6_0_BASE:1.1.1.4
	OPENBSD_5_9:1.1.1.4.0.20
	OPENBSD_5_9_BASE:1.1.1.4
	OPENBSD_5_8:1.1.1.4.0.22
	OPENBSD_5_8_BASE:1.1.1.4
	PERL_5_20_2:1.1.1.4
	OPENBSD_5_7:1.1.1.4.0.14
	OPENBSD_5_7_BASE:1.1.1.4
	PERL_5_20_1:1.1.1.4
	OPENBSD_5_6:1.1.1.4.0.18
	OPENBSD_5_6_BASE:1.1.1.4
	PERL_5_18_2:1.1.1.4
	PERL:1.1.1
	OPENBSD_5_5:1.1.1.4.0.16
	OPENBSD_5_5_BASE:1.1.1.4
	OPENBSD_5_4:1.1.1.4.0.12
	OPENBSD_5_4_BASE:1.1.1.4
	PERL_5_16_3:1.1.1.4
	OPENBSD_5_3:1.1.1.4.0.10
	OPENBSD_5_3_BASE:1.1.1.4
	OPENBSD_5_2:1.1.1.4.0.8
	OPENBSD_5_2_BASE:1.1.1.4
	OPENBSD_5_1_BASE:1.1.1.4
	OPENBSD_5_1:1.1.1.4.0.6
	OPENBSD_5_0:1.1.1.4.0.4
	OPENBSD_5_0_BASE:1.1.1.4
	OPENBSD_4_9:1.1.1.4.0.2
	OPENBSD_4_9_BASE:1.1.1.4
	PERL_5_12_2:1.1.1.4
	OPENBSD_4_8:1.1.1.3.0.4
	OPENBSD_4_8_BASE:1.1.1.3
	OPENBSD_4_7:1.1.1.3.0.2
	OPENBSD_4_7_BASE:1.1.1.3
	PERL_5_10_1:1.1.1.3
	OPENBSD_4_6:1.1.1.2.0.6
	OPENBSD_4_6_BASE:1.1.1.2
	OPENBSD_4_5:1.1.1.2.0.2
	OPENBSD_4_5_BASE:1.1.1.2
	PERL_5_10_0:1.1.1.2
	OPENBSD_4_4:1.1.1.1.0.24
	OPENBSD_4_4_BASE:1.1.1.1
	OPENBSD_4_3:1.1.1.1.0.22
	OPENBSD_4_3_BASE:1.1.1.1
	OPENBSD_4_2:1.1.1.1.0.20
	OPENBSD_4_2_BASE:1.1.1.1
	OPENBSD_4_1:1.1.1.1.0.18
	OPENBSD_4_1_BASE:1.1.1.1
	OPENBSD_4_0:1.1.1.1.0.16
	OPENBSD_4_0_BASE:1.1.1.1
	PERL_5_8_8:1.1.1.1
	OPENBSD_3_9:1.1.1.1.0.14
	OPENBSD_3_9_BASE:1.1.1.1
	OPENBSD_3_8:1.1.1.1.0.12
	OPENBSD_3_8_BASE:1.1.1.1
	OPENBSD_3_7:1.1.1.1.0.10
	OPENBSD_3_7_BASE:1.1.1.1
	PERL_5_8_6:1.1.1.1
	OPENBSD_3_6:1.1.1.1.0.8
	OPENBSD_3_6_BASE:1.1.1.1
	PERL_5_8_5:1.1.1.1
	PERL_5_8_3:1.1.1.1
	OPENBSD_3_5:1.1.1.1.0.6
	OPENBSD_3_5_BASE:1.1.1.1
	PERL_5_8_2:1.1.1.1
	OPENBSD_3_4:1.1.1.1.0.4
	OPENBSD_3_4_BASE:1.1.1.1
	OPENBSD_3_3:1.1.1.1.0.2
	OPENBSD_3_3_BASE:1.1.1.1
	PERL_5_8_0:1.1.1.1
	CPAN:1.1.1;
locks; strict;
comment	@# @;
expand	@o@;


1.2
date	2017.02.05.00.32.21;	author afresh1;	state Exp;
branches;
next	1.1;
commitid	cxJ08BvJA9Pt2PTM;

1.1
date	2002.10.27.22.15.11;	author millert;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	2002.10.27.22.15.11;	author millert;	state Exp;
branches;
next	1.1.1.2;

1.1.1.2
date	2008.09.29.17.19.02;	author millert;	state Exp;
branches;
next	1.1.1.3;

1.1.1.3
date	2009.10.12.18.10.41;	author millert;	state Exp;
branches;
next	1.1.1.4;

1.1.1.4
date	2010.09.24.14.49.16;	author millert;	state Exp;
branches;
next	;


desc
@@


1.2
log
@Fix merge issues, remove excess files - match perl-5.24.1 dist
@
text
@#!./perl
#
# Tests for perl exit codes, playing with $?, etc...


BEGIN {
    chdir 't' if -d 't';
    @@INC = qw(. ../lib);
}

# Run some code, return its wait status.
sub run {
    my($code) = shift;
    $code = "\"" . $code . "\"" if $^O eq 'VMS'; #VMS needs quotes for this.
    return system($^X, "-e", $code);
}

BEGIN {
    $numtests = ($^O eq 'VMS') ? 16 : 17;
}


my $vms_exit_mode = 0;

if ($^O eq 'VMS') {
    if (eval 'require VMS::Feature') {
        $vms_exit_mode = !(VMS::Feature::current("posix_exit"));
    } else {
        my $env_unix_rpt = $ENV{'DECC$FILENAME_UNIX_REPORT'} || '';
        my $env_posix_ex = $ENV{'PERL_VMS_POSIX_EXIT'} || '';
        my $unix_rpt = $env_unix_rpt =~ /^[ET1]/i; 
        my $posix_ex = $env_posix_ex =~ /^[ET1]/i;
        if (($unix_rpt || $posix_ex) ) {
            $vms_exit_mode = 0;
        } else {
            $vms_exit_mode = 1;
        }
    }
    $numtests = 29 unless $vms_exit_mode;
}

require "./test.pl";
plan(tests => $numtests);

my $native_success = 0;
   $native_success = 1 if $^O eq 'VMS';

my $exit, $exit_arg;

$exit = run('exit');
is( $exit >> 8, 0,              'Normal exit' );
is( $exit, $?,                  'Normal exit $?' );
is( ${^CHILD_ERROR_NATIVE}, $native_success,  'Normal exit ${^CHILD_ERROR_NATIVE}' );

if (!$vms_exit_mode) {
  my $posix_ok = eval { require POSIX; };
  my $wait_macros_ok = defined &POSIX::WIFEXITED;
  eval { POSIX::WIFEXITED(${^CHILD_ERROR_NATIVE}) };
  $wait_macros_ok = 0 if $@@;
  $exit = run('exit 42');
  is( $exit >> 8, 42,             'Non-zero exit' );
  is( $exit, $?,                  'Non-zero exit $?' );
  isnt( !${^CHILD_ERROR_NATIVE}, 0, 'Non-zero exit ${^CHILD_ERROR_NATIVE}' );
  SKIP: {
    skip("No POSIX", 3) unless $posix_ok;
    skip("No POSIX wait macros", 3) unless $wait_macros_ok;
    ok(POSIX::WIFEXITED(${^CHILD_ERROR_NATIVE}), "WIFEXITED");
    ok(!POSIX::WIFSIGNALED(${^CHILD_ERROR_NATIVE}), "WIFSIGNALED");
    is(POSIX::WEXITSTATUS(${^CHILD_ERROR_NATIVE}), 42, "WEXITSTATUS");
  }

  SKIP: {
    skip("Skip signals and core dump tests on Win32 and VMS", 7) 
        if ($^O eq 'MSWin32' || $^O eq 'VMS');

    #TODO VMS will backtrace on this test and exits with code of 0
    #instead of 15.

    $exit = run('kill 15, $$; sleep(1);');

    is( $exit & 127, 15,            'Term by signal' );
    ok( !($exit & 128),             'No core dump' );
    is( $? & 127, 15,               'Term by signal $?' );
    isnt( ${^CHILD_ERROR_NATIVE},  0, 'Term by signal ${^CHILD_ERROR_NATIVE}' );
    SKIP: {
      skip("No POSIX", 3) unless $posix_ok;
      skip("No POSIX wait macros", 3) unless $wait_macros_ok;
      ok(!POSIX::WIFEXITED(${^CHILD_ERROR_NATIVE}), "WIFEXITED");
      ok(POSIX::WIFSIGNALED(${^CHILD_ERROR_NATIVE}), "WIFSIGNALED");
      is(POSIX::WTERMSIG(${^CHILD_ERROR_NATIVE}), 15, "WTERMSIG");
    }
  }

}

if ($^O eq 'VMS') {

# On VMS, successful returns from system() are reported 0,  VMS errors that
# can not be translated to UNIX are reported as EVMSERR, which has a value
# of 65535. Codes from 2 through 7 are assumed to be from non-compliant
# VMS systems and passed through.  Programs written to use _POSIX_EXIT()
# codes like GNV will pass the numbers 2 through 255 encoded in the
# C facility by multiplying the number by 8 and adding %x35A000 to it.
# Perl will decode that number from children back to it's internal status.
#
# For native VMS status codes, success codes are odd numbered, error codes
# are even numbered.  The 3 LSBs of the code indicate if the success is
# an informational message or the severity of the failure.
#
# Because the failure codes for the tests of the CLI facility status codes can
# not be translated to UNIX error codes, they will be reported as EVMSERR,
# even though Perl will exit with them having the VMS status codes.
#
# Note that this is testing the perl exit() routine, and not the VMS
# DCL EXIT statement.
#
# The value %x1000000 has been added to the exit code to prevent the
# status message from being sent to the STDOUT and STDERR stream.
#
# Double quotes are needed to pass these commands through DCL to PERL

  $exit = run("exit 268632065"); # %CLI-S-NORMAL
  is( $exit >> 8, 0,             'PERL success exit' );
  is( ${^CHILD_ERROR_NATIVE} & 7, 1, 'VMS success exit' );

  $exit = run("exit 268632067");  # %CLI-I-NORMAL
  is( $exit >> 8, 0,             'PERL informational exit' );
  is( ${^CHILD_ERROR_NATIVE} & 7, 3, 'VMS informational exit' );

  $exit = run("exit 268632064");  # %CLI-W-NORMAL
  is( $exit >> 8, 1,             'Perl warning exit' );
  is( ${^CHILD_ERROR_NATIVE} & 7, 0, 'VMS warning exit' );

  $exit = run("exit 268632066");  # %CLI-E-NORMAL
  is( $exit >> 8, 2,             'Perl error exit' );
  is( ${^CHILD_ERROR_NATIVE} & 7, 2, 'VMS error exit' );

  $exit = run("exit 268632068");  # %CLI-F-NORMAL
  is( $exit >> 8, 4,             'Perl fatal error exit' );
  is( ${^CHILD_ERROR_NATIVE} & 7, 4, 'VMS fatal exit' );

  $exit = run("exit 02015320012"); # POSIX exit code 1
  is( $exit >> 8, 1,	                 'Posix exit code 1' );

  $exit = run("exit 02015323771"); # POSIX exit code 255
  is( $exit >> 8 , 255,	                 'Posix exit code 255' );
}

$exit_arg = 42;
$exit = run("END { \$? = $exit_arg }");

# On VMS, in the child process the actual exit status will be SS$_ABORT,
# or 44, which is what you get from any non-zero value of $? except for
# 65535 that has been dePOSIXified by STATUS_UNIX_SET.  If $? is set to
# 65535 internally when there is a VMS status code that is valid, and
# when Perl exits, it will set that status code.
#
# In this test on VMS, the child process exit with a SS$_ABORT, which
# the parent stores in ${^CHILD_ERROR_NATIVE}.  The SS$_ABORT code is
# then translated to the UNIX code EINTR which has the value of 4 on VMS.
#
# This is complex because Perl translates internally generated UNIX
# status codes to SS$_ABORT on exit, but passes through unmodified UNIX
# status codes that exit() is called with by scripts.

$exit_arg = (44 & 7) if $vms_exit_mode;

is( $exit >> 8, $exit_arg,             'Changing $? in END block' );
@


1.1
log
@Initial revision
@
text
@a10 3
# VMS and Windows need -e "...", most everything else works better with '
my $quote = $^O =~ /^(VMS|MSWin\d+)$/ ? q{"} : q{'};

d14 2
a15 2
    my $cmd = "$^X -e ";
    return system($cmd.$quote.$code.$quote);
d19 21
a39 2
    # MacOS system() doesn't have good return value
    $numtests = ($^O eq 'VMS') ? 7 : ($^O eq 'MacOS') ? 0 : 3; 
d42 1
a42 1
require "test.pl";
d45 3
a47 1
if ($^O ne 'MacOS') {
d52 2
d55 5
a59 2
if ($^O ne 'VMS') {

d62 31
d94 1
a94 4
} else {

# On VMS, successful returns from system() are always 0, warnings are 1,
# errors are 2, and fatal errors are 4.
d96 1
a96 2
  $exit = run("exit 196609"); # %CLI-S-NORMAL
  is( $exit >> 8, 0,             'success exit' );
d98 43
a140 2
  $exit = run("exit 196611");  # %CLI-I-NORMAL
  is( $exit >> 8, 0,             'informational exit' );
d142 2
a143 2
  $exit = run("exit 196608");  # %CLI-W-NORMAL
  is( $exit >> 8, 1,             'warning exit' );
d145 2
a146 5
  $exit = run("exit 196610");  # %CLI-E-NORMAL
  is( $exit >> 8, 2,             'error exit' );

  $exit = run("exit 196612");  # %CLI-F-NORMAL
  is( $exit >> 8, 4,             'fatal error exit' );
d152 15
a166 5
# On VMS, in the child process the actual exit status will be SS$_ABORT, 
# which is what you get from any non-zero value of $? that has been 
# dePOSIXified by STATUS_POSIX_SET.  In the parent process, all we'll 
# see are the severity bits (0-2) shifted left by 8.
$exit_arg = (44 & 7) if $^O eq 'VMS';  
a168 1
}
@


1.1.1.1
log
@stock perl 5.8.0 from CPAN
@
text
@@


1.1.1.2
log
@import perl 5.10.0 from CPAN
@
text
@d11 3
d17 2
a18 2
    $code = "\"" . $code . "\"" if $^O eq 'VMS'; #VMS needs quotes for this.
    return system($^X, "-e", $code);
d23 1
a23 1
    $numtests = ($^O eq 'VMS') ? 16 : ($^O eq 'MacOS') ? 0 : 17;
a28 3
my $native_success = 0;
   $native_success = 1 if $^O eq 'VMS';

a33 2
is( $exit, $?,                  'Normal exit $?' );
is( ${^CHILD_ERROR_NATIVE}, $native_success,  'Normal exit ${^CHILD_ERROR_NATIVE}' );
a35 2
  my $posix_ok = eval { require POSIX; };
  my $wait_macros_ok = defined &POSIX::WIFEXITED;
a38 27
  is( $exit, $?,                  'Non-zero exit $?' );
  isnt( !${^CHILD_ERROR_NATIVE}, 0, 'Non-zero exit ${^CHILD_ERROR_NATIVE}' );
  SKIP: {
    skip("No POSIX", 3) unless $posix_ok;
    skip("No POSIX wait macros", 3) unless $wait_macros_ok;
    ok(POSIX::WIFEXITED(${^CHILD_ERROR_NATIVE}), "WIFEXITED");
    ok(!POSIX::WIFSIGNALED(${^CHILD_ERROR_NATIVE}), "WIFSIGNALED");
    is(POSIX::WEXITSTATUS(${^CHILD_ERROR_NATIVE}), 42, "WEXITSTATUS");
  }

  SKIP: {
    skip("Skip signals and core dump tests on Win32", 7) if $^O eq 'MSWin32';

    $exit = run('kill 15, $$; sleep(1);');

    is( $exit & 127, 15,            'Term by signal' );
    ok( !($exit & 128),             'No core dump' );
    is( $? & 127, 15,               'Term by signal $?' );
    isnt( ${^CHILD_ERROR_NATIVE},  0, 'Term by signal ${^CHILD_ERROR_NATIVE}' );
    SKIP: {
      skip("No POSIX", 3) unless $posix_ok;
      skip("No POSIX wait macros", 3) unless $wait_macros_ok;
      ok(!POSIX::WIFEXITED(${^CHILD_ERROR_NATIVE}), "WIFEXITED");
      ok(POSIX::WIFSIGNALED(${^CHILD_ERROR_NATIVE}), "WIFSIGNALED");
      is(POSIX::WTERMSIG(${^CHILD_ERROR_NATIVE}), 15, "WTERMSIG");
    }
  }
d42 5
a46 43
# On VMS, successful returns from system() are reported 0,  VMS errors that
# can not be translated to UNIX are reported as EVMSERR, which has a value
# of 65535. Codes from 2 through 7 are assumed to be from non-compliant
# VMS systems and passed through.  Programs written to use _POSIX_EXIT()
# codes like GNV will pass the numbers 2 through 255 encoded in the
# C facility by multiplying the number by 8 and adding %x35A000 to it.
# Perl will decode that number from children back to it's internal status.
#
# For native VMS status codes, success codes are odd numbered, error codes
# are even numbered.  The 3 LSBs of the code indicate if the success is
# an informational message or the severity of the failure.
#
# Because the failure codes for the tests of the CLI facility status codes can
# not be translated to UNIX error codes, they will be reported as EVMSERR,
# even though Perl will exit with them having the VMS status codes.
#
# Note that this is testing the perl exit() routine, and not the VMS
# DCL EXIT statement.
#
# The value %x1000000 has been added to the exit code to prevent the
# status message from being sent to the STDOUT and STDERR stream.
#
# Double quotes are needed to pass these commands through DCL to PERL

  $exit = run("exit 268632065"); # %CLI-S-NORMAL
  is( $exit >> 8, 0,             'PERL success exit' );
  is( ${^CHILD_ERROR_NATIVE} & 7, 1, 'VMS success exit' );

  $exit = run("exit 268632067");  # %CLI-I-NORMAL
  is( $exit >> 8, 0,             'PERL informational exit' );
  is( ${^CHILD_ERROR_NATIVE} & 7, 3, 'VMS informational exit' );

  $exit = run("exit 268632064");  # %CLI-W-NORMAL
  is( $exit >> 8, 1,             'Perl warning exit' );
  is( ${^CHILD_ERROR_NATIVE} & 7, 0, 'VMS warning exit' );

  $exit = run("exit 268632066");  # %CLI-E-NORMAL
  is( $exit >> 8, 2,             'Perl error exit' );
  is( ${^CHILD_ERROR_NATIVE} & 7, 2, 'VMS error exit' );

  $exit = run("exit 268632068");  # %CLI-F-NORMAL
  is( $exit >> 8, 4,             'Perl fatal error exit' );
  is( ${^CHILD_ERROR_NATIVE} & 7, 4, 'VMS fatal exit' );
d48 2
a49 2
  $exit = run("exit 02015320012"); # POSIX exit code 1
  is( $exit >> 8, 1,	                 'Posix exit code 1' );
d51 8
a58 2
  $exit = run("exit 02015323771"); # POSIX exit code 255
  is( $exit >> 8 , 255,	                 'Posix exit code 255' );
d65 3
a67 13
# or 44, which is what you get from any non-zero value of $? except for
# 65535 that has been dePOSIXified by STATUS_UNIX_SET.  If $? is set to
# 65535 internally when there is a VMS status code that is valid, and
# when Perl exits, it will set that status code.
#
# In this test on VMS, the child process exit with a SS$_ABORT, which
# the parent stores in ${^CHILD_ERROR_NATIVE}.  The SS$_ABORT code is
# then translated to the UNIX code EINTR which has the value of 4 on VMS.
#
# This is complex because Perl translates internally generated UNIX
# status codes to SS$_ABORT on exit, but passes through unmodified UNIX
# status codes that exit() is called with by scripts.

@


1.1.1.3
log
@import perl 5.10.1
@
text
@a22 20

my $vms_exit_mode = 0;

if ($^O eq 'VMS') {
    if (eval 'require VMS::Feature') {
        $vms_exit_mode = !(VMS::Feature::current("posix_exit"));
    } else {
        my $env_unix_rpt = $ENV{'DECC$FILENAME_UNIX_REPORT'} || '';
        my $env_posix_ex = $ENV{'PERL_VMS_POSIX_EXIT'} || '';
        my $unix_rpt = $env_unix_rpt =~ /^[ET1]/i; 
        my $posix_ex = $env_posix_ex =~ /^[ET1]/i;
        if (($unix_rpt || $posix_ex) ) {
            $vms_exit_mode = 0;
        } else {
            $vms_exit_mode = 1;
        }
    }
    $numtests = 29 unless $vms_exit_mode;
}

d37 1
a37 1
if (!$vms_exit_mode) {
d40 1
a40 2
  eval { POSIX::WIFEXITED(${^CHILD_ERROR_NATIVE}) };
  $wait_macros_ok = 0 if $@@;
d54 1
a54 5
    skip("Skip signals and core dump tests on Win32 and VMS", 7) 
        if ($^O eq 'MSWin32' || $^O eq 'VMS');

    #TODO VMS will backtrace on this test and exits with code of 0
    #instead of 15.
d71 1
a71 3
}

if ($^O eq 'VMS') {
d127 1
a127 1
# On VMS, in the child process the actual exit status will be SS$_ABORT,
d141 1
a141 1
$exit_arg = (44 & 7) if $vms_exit_mode;
@


1.1.1.4
log
@Perl 5.12.2 from CPAN
@
text
@d19 2
a20 1
    $numtests = ($^O eq 'VMS') ? 16 : 17;
d49 1
d171 1
@


