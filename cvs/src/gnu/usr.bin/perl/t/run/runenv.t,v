head	1.2;
access;
symbols
	OPENBSD_6_2_BASE:1.2
	PERL_5_24_2:1.1.1.11
	OPENBSD_6_1:1.2.0.4
	OPENBSD_6_1_BASE:1.2
	OPENBSD_6_0:1.1.1.10.0.10
	OPENBSD_6_0_BASE:1.1.1.10
	OPENBSD_5_9:1.1.1.10.0.4
	OPENBSD_5_9_BASE:1.1.1.10
	OPENBSD_5_8:1.1.1.10.0.6
	OPENBSD_5_8_BASE:1.1.1.10
	PERL_5_20_2:1.1.1.10
	OPENBSD_5_7:1.1.1.10.0.2
	OPENBSD_5_7_BASE:1.1.1.10
	PERL_5_20_1:1.1.1.10
	OPENBSD_5_6:1.1.1.9.0.4
	OPENBSD_5_6_BASE:1.1.1.9
	PERL_5_18_2:1.1.1.9
	PERL:1.1.1
	OPENBSD_5_5:1.1.1.8.0.6
	OPENBSD_5_5_BASE:1.1.1.8
	OPENBSD_5_4:1.1.1.8.0.2
	OPENBSD_5_4_BASE:1.1.1.8
	PERL_5_16_3:1.1.1.8
	OPENBSD_5_3:1.1.1.7.0.10
	OPENBSD_5_3_BASE:1.1.1.7
	OPENBSD_5_2:1.1.1.7.0.8
	OPENBSD_5_2_BASE:1.1.1.7
	OPENBSD_5_1_BASE:1.1.1.7
	OPENBSD_5_1:1.1.1.7.0.6
	OPENBSD_5_0:1.1.1.7.0.4
	OPENBSD_5_0_BASE:1.1.1.7
	OPENBSD_4_9:1.1.1.7.0.2
	OPENBSD_4_9_BASE:1.1.1.7
	PERL_5_12_2:1.1.1.7
	OPENBSD_4_8:1.1.1.6.0.4
	OPENBSD_4_8_BASE:1.1.1.6
	OPENBSD_4_7:1.1.1.6.0.2
	OPENBSD_4_7_BASE:1.1.1.6
	PERL_5_10_1:1.1.1.6
	OPENBSD_4_6:1.1.1.5.0.6
	OPENBSD_4_6_BASE:1.1.1.5
	OPENBSD_4_5:1.1.1.5.0.2
	OPENBSD_4_5_BASE:1.1.1.5
	PERL_5_10_0:1.1.1.5
	OPENBSD_4_4:1.1.1.4.0.10
	OPENBSD_4_4_BASE:1.1.1.4
	OPENBSD_4_3:1.1.1.4.0.8
	OPENBSD_4_3_BASE:1.1.1.4
	OPENBSD_4_2:1.1.1.4.0.6
	OPENBSD_4_2_BASE:1.1.1.4
	OPENBSD_4_1:1.1.1.4.0.4
	OPENBSD_4_1_BASE:1.1.1.4
	OPENBSD_4_0:1.1.1.4.0.2
	OPENBSD_4_0_BASE:1.1.1.4
	PERL_5_8_8:1.1.1.4
	OPENBSD_3_9:1.1.1.3.0.10
	OPENBSD_3_9_BASE:1.1.1.3
	OPENBSD_3_8:1.1.1.3.0.8
	OPENBSD_3_8_BASE:1.1.1.3
	OPENBSD_3_7:1.1.1.3.0.6
	OPENBSD_3_7_BASE:1.1.1.3
	PERL_5_8_6:1.1.1.3
	OPENBSD_3_6:1.1.1.3.0.4
	OPENBSD_3_6_BASE:1.1.1.3
	PERL_5_8_5:1.1.1.3
	PERL_5_8_3:1.1.1.3
	OPENBSD_3_5:1.1.1.3.0.2
	OPENBSD_3_5_BASE:1.1.1.3
	PERL_5_8_2:1.1.1.3
	OPENBSD_3_4:1.1.1.2.0.4
	OPENBSD_3_4_BASE:1.1.1.2
	OPENBSD_3_3:1.1.1.2.0.2
	OPENBSD_3_3_BASE:1.1.1.2
	PERL_5_8_0:1.1.1.2
	OPENBSD_3_2:1.1.1.1.0.6
	OPENBSD_3_2_BASE:1.1.1.1
	OPENBSD_3_1:1.1.1.1.0.4
	OPENBSD_3_1_BASE:1.1.1.1
	OPENBSD_3_0:1.1.1.1.0.2
	OPENBSD_3_0_BASE:1.1.1.1
	PERL_5_6_1:1.1.1.1
	CPAN:1.1.1;
locks; strict;
comment	@# @;
expand	@o@;


1.2
date	2017.02.05.00.32.21;	author afresh1;	state Exp;
branches;
next	1.1;
commitid	cxJ08BvJA9Pt2PTM;

1.1
date	2001.05.24.18.26.01;	author millert;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	2001.05.24.18.26.01;	author millert;	state Exp;
branches;
next	1.1.1.2;

1.1.1.2
date	2002.10.27.22.15.11;	author millert;	state Exp;
branches;
next	1.1.1.3;

1.1.1.3
date	2003.12.03.02.44.33;	author millert;	state Exp;
branches;
next	1.1.1.4;

1.1.1.4
date	2006.03.28.18.49.48;	author millert;	state Exp;
branches;
next	1.1.1.5;

1.1.1.5
date	2008.09.29.17.19.02;	author millert;	state Exp;
branches;
next	1.1.1.6;

1.1.1.6
date	2009.10.12.18.10.41;	author millert;	state Exp;
branches;
next	1.1.1.7;

1.1.1.7
date	2010.09.24.14.49.16;	author millert;	state Exp;
branches;
next	1.1.1.8;

1.1.1.8
date	2013.03.25.20.09.38;	author sthen;	state Exp;
branches;
next	1.1.1.9;

1.1.1.9
date	2014.03.24.14.59.11;	author afresh1;	state Exp;
branches;
next	1.1.1.10;

1.1.1.10
date	2014.11.17.20.53.19;	author afresh1;	state Exp;
branches;
next	1.1.1.11;
commitid	B31cAbBIXiCqnL97;

1.1.1.11
date	2017.08.14.13.46.25;	author afresh1;	state Exp;
branches;
next	;
commitid	fAzrs78vdW2Yfc6A;


desc
@@


1.2
log
@Fix merge issues, remove excess files - match perl-5.24.1 dist
@
text
@#!./perl
#
# Tests for Perl run-time environment variable settings
#
# $PERL5OPT, $PERL5LIB, etc.

BEGIN {
    chdir 't' if -d 't';
    @@INC = '../lib';
    require Config; import Config;
    require './test.pl';
    skip_all_without_config('d_fork');
}

plan tests => 104;

my $STDOUT = tempfile();
my $STDERR = tempfile();
my $PERL = './perl';
my $FAILURE_CODE = 119;

delete $ENV{PERLLIB};
delete $ENV{PERL5LIB};
delete $ENV{PERL5OPT};


# Run perl with specified environment and arguments, return (STDOUT, STDERR)
sub runperl_and_capture {
  local *F;
  my ($env, $args) = @@_;

  local %ENV = %ENV;
  delete $ENV{PERLLIB};
  delete $ENV{PERL5LIB};
  delete $ENV{PERL5OPT};
  my $pid = fork;
  return (0, "Couldn't fork: $!") unless defined $pid;   # failure
  if ($pid) {                   # parent
    wait;
    return (0, "Failure in child.\n") if ($?>>8) == $FAILURE_CODE;

    open my $stdout, '<', $STDOUT
	or return (0, "Couldn't read $STDOUT file: $!");
    open my $stderr, '<', $STDERR
	or return (0, "Couldn't read $STDERR file: $!");
    local $/;
    # Empty file with <$stderr> returns nothing in list context
    # (because there are no lines) Use scalar to force it to ''
    return (scalar <$stdout>, scalar <$stderr>);
  } else {                      # child
    for my $k (keys %$env) {
      $ENV{$k} = $env->{$k};
    }
    open STDOUT, '>', $STDOUT or exit $FAILURE_CODE;
    open STDERR, '>', $STDERR and do { exec $PERL, @@$args };
    # it did not work:
    print STDOUT "IWHCWJIHCI\cNHJWCJQWKJQJWCQW\n";
    exit $FAILURE_CODE;
  }
}

sub try {
  my ($env, $args, $stdout, $stderr) = @@_;
  my ($actual_stdout, $actual_stderr) = runperl_and_capture($env, $args);
  local $::Level = $::Level + 1;
  my @@envpairs = ();
  for my $k (sort keys %$env) {
    push @@envpairs, "$k => $env->{$k}";
  }
  my $label = join(',' => (@@envpairs, @@$args));
  if (ref $stdout) {
    ok ( $actual_stdout =~/$stdout/, $label . ' stdout' );
  } else {
    is ( $actual_stdout, $stdout, $label . ' stdout' );
  }
  if (ref $stderr) {
    ok ( $actual_stderr =~/$stderr/, $label . ' stderr' );
  } else {
    is ( $actual_stderr, $stderr, $label . ' stderr' );
  }
}

#  PERL5OPT    Command-line options (switches).  Switches in
#                    this variable are taken as if they were on
#                    every Perl command line.  Only the -[DIMUdmtw]
#                    switches are allowed.  When running taint
#                    checks (because the program was running setuid
#                    or setgid, or the -T switch was used), this
#                    variable is ignored.  If PERL5OPT begins with
#                    -T, tainting will be enabled, and any
#                    subsequent options ignored.

try({PERL5OPT => '-w'}, ['-e', 'print $::x'],
    "", 
    qq{Name "main::x" used only once: possible typo at -e line 1.\nUse of uninitialized value \$x in print at -e line 1.\n});

try({PERL5OPT => '-Mstrict'}, ['-I../lib', '-e', 'print $::x'],
    "", "");

try({PERL5OPT => '-Mstrict'}, ['-I../lib', '-e', 'print $x'],
    "", 
    qq{Global symbol "\$x" requires explicit package name (did you forget to declare "my \$x"?) at -e line 1.\nExecution of -e aborted due to compilation errors.\n});

# Fails in 5.6.0
try({PERL5OPT => '-Mstrict -w'}, ['-I../lib', '-e', 'print $x'],
    "", 
    qq{Global symbol "\$x" requires explicit package name (did you forget to declare "my \$x"?) at -e line 1.\nExecution of -e aborted due to compilation errors.\n});

# Fails in 5.6.0
try({PERL5OPT => '-w -Mstrict'}, ['-I../lib', '-e', 'print $::x'],
    "", 
    <<ERROR
Name "main::x" used only once: possible typo at -e line 1.
Use of uninitialized value \$x in print at -e line 1.
ERROR
    );

# Fails in 5.6.0
try({PERL5OPT => '-w -Mstrict'}, ['-I../lib', '-e', 'print $::x'],
    "", 
    <<ERROR
Name "main::x" used only once: possible typo at -e line 1.
Use of uninitialized value \$x in print at -e line 1.
ERROR
    );

try({PERL5OPT => '-MExporter'}, ['-I../lib', '-e0'],
    "", 
    "");

# Fails in 5.6.0
try({PERL5OPT => '-MExporter -MExporter'}, ['-I../lib', '-e0'],
    "", 
    "");

try({PERL5OPT => '-Mstrict -Mwarnings'}, 
    ['-I../lib', '-e', 'print "ok" if $INC{"strict.pm"} and $INC{"warnings.pm"}'],
    "ok",
    "");

open my $fh, ">", "Oooof.pm" or die "Can't write Oooof.pm: $!";
print $fh "package Oooof; 1;\n";
close $fh;
END { 1 while unlink "Oooof.pm" }

try({PERL5OPT => '-I. -MOooof'}, 
    ['-e', 'print "ok" if $INC{"Oooof.pm"} eq "Oooof.pm"'],
    "ok",
    "");

try({PERL5OPT => '-I./ -MOooof'}, 
    ['-e', 'print "ok" if $INC{"Oooof.pm"} eq "Oooof.pm"'],
    "ok",
    "");

try({PERL5OPT => '-w -w'},
    ['-e', 'print $ENV{PERL5OPT}'],
    '-w -w',
    '');

try({PERL5OPT => '-t'},
    ['-e', 'print ${^TAINT}'],
    '-1',
    '');

try({PERL5OPT => '-W'},
    ['-I../lib','-e', 'local $^W = 0;  no warnings;  print $x'],
    '',
    <<ERROR
Name "main::x" used only once: possible typo at -e line 1.
Use of uninitialized value \$x in print at -e line 1.
ERROR
);

try({PERLLIB => "foobar$Config{path_sep}42"},
    ['-e', 'print grep { $_ eq "foobar" } @@INC'],
    'foobar',
    '');

try({PERLLIB => "foobar$Config{path_sep}42"},
    ['-e', 'print grep { $_ eq "42" } @@INC'],
    '42',
    '');

try({PERL5LIB => "foobar$Config{path_sep}42"},
    ['-e', 'print grep { $_ eq "foobar" } @@INC'],
    'foobar',
    '');

try({PERL5LIB => "foobar$Config{path_sep}42"},
    ['-e', 'print grep { $_ eq "42" } @@INC'],
    '42',
    '');

try({PERL5LIB => "foo",
     PERLLIB => "bar"},
    ['-e', 'print grep { $_ eq "foo" } @@INC'],
    'foo',
    '');

try({PERL5LIB => "foo",
     PERLLIB => "bar"},
    ['-e', 'print grep { $_ eq "bar" } @@INC'],
    '',
    '');

try({PERL_HASH_SEED_DEBUG => 1},
    ['-e','1'],
    '',
    qr/HASH_FUNCTION =/);

try({PERL_HASH_SEED_DEBUG => 1},
    ['-e','1'],
    '',
    qr/HASH_SEED =/);

# special case, seed "0" implies disabled hash key traversal randomization
try({PERL_HASH_SEED_DEBUG => 1, PERL_HASH_SEED => "0"},
    ['-e','1'],
    '',
    qr/PERTURB_KEYS = 0/);

# check that setting it to a different value with the same logical value
# triggers the normal "deterministic mode".
try({PERL_HASH_SEED_DEBUG => 1, PERL_HASH_SEED => "0x0"},
    ['-e','1'],
    '',
    qr/PERTURB_KEYS = 2/);

try({PERL_HASH_SEED_DEBUG => 1, PERL_PERTURB_KEYS => "0"},
    ['-e','1'],
    '',
    qr/PERTURB_KEYS = 0/);

try({PERL_HASH_SEED_DEBUG => 1, PERL_PERTURB_KEYS => "1"},
    ['-e','1'],
    '',
    qr/PERTURB_KEYS = 1/);

try({PERL_HASH_SEED_DEBUG => 1, PERL_PERTURB_KEYS => "2"},
    ['-e','1'],
    '',
    qr/PERTURB_KEYS = 2/);

try({PERL_HASH_SEED_DEBUG => 1, PERL_HASH_SEED => "12345678"},
    ['-e','1'],
    '',
    qr/HASH_SEED = 0x12345678/);

try({PERL_HASH_SEED_DEBUG => 1, PERL_HASH_SEED => "12"},
    ['-e','1'],
    '',
    qr/HASH_SEED = 0x12000000/);

try({PERL_HASH_SEED_DEBUG => 1, PERL_HASH_SEED => "123456789"},
    ['-e','1'],
    '',
    qr/HASH_SEED = 0x12345678/);

# Test that PERL_PERTURB_KEYS works as expected.  We check that we get the same
# results if we use PERL_PERTURB_KEYS = 0 or 2 and we reuse the seed from previous run.
my @@print_keys = ( '-e', '@@_{"A".."Z"}=(); print keys %_');
for my $mode ( 0,1, 2 ) { # disabled and deterministic respectively
    my %base_opts = ( PERL_PERTURB_KEYS => $mode, PERL_HASH_SEED_DEBUG => 1 ),
    my ($out, $err) = runperl_and_capture( { %base_opts }, [ @@print_keys ]);
    if ($err=~/HASH_SEED = (0x[a-f0-9]+)/) {
        my $seed = $1;
        my($out2, $err2) = runperl_and_capture( { %base_opts, PERL_HASH_SEED => $seed }, [ @@print_keys ]);
        if ( $mode == 1 ) {
            isnt ($out,$out2,"PERL_PERTURB_KEYS = $mode results in different key order with the same key");
        } else {
            is ($out,$out2,"PERL_PERTURB_KEYS = $mode allows one to recreate a random hash");
        }
        is ($err,$err2,"Got the same debug output when we set PERL_HASH_SEED and PERL_PERTURB_KEYS");
    }
}

# Tests for S_incpush_use_sep():

my @@dump_inc = ('-e', 'print "$_\n" foreach @@INC');

my ($out, $err) = runperl_and_capture({}, [@@dump_inc]);

is ($err, '', 'No errors when determining @@INC');

my @@default_inc = split /\n/, $out;

is ($default_inc[-1], '.', '. is last in @@INC');

my $sep = $Config{path_sep};
foreach (['nothing', ''],
	 ['something', 'zwapp', 'zwapp'],
	 ['two things', "zwapp${sep}bam", 'zwapp', 'bam'],
	 ['two things, ::', "zwapp${sep}${sep}bam", 'zwapp', 'bam'],
	 [': at start', "${sep}zwapp", 'zwapp'],
	 [': at end', "zwapp${sep}", 'zwapp'],
	 [':: sandwich ::', "${sep}${sep}zwapp${sep}${sep}", 'zwapp'],
	 [':', "${sep}"],
	 ['::', "${sep}${sep}"],
	 [':::', "${sep}${sep}${sep}"],
	 ['two things and :', "zwapp${sep}bam${sep}", 'zwapp', 'bam'],
	 [': and two things', "${sep}zwapp${sep}bam", 'zwapp', 'bam'],
	 [': two things :', "${sep}zwapp${sep}bam${sep}", 'zwapp', 'bam'],
	 ['three things', "zwapp${sep}bam${sep}${sep}owww",
	  'zwapp', 'bam', 'owww'],
	) {
  my ($name, $lib, @@expect) = @@$_;
  push @@expect, @@default_inc;

  ($out, $err) = runperl_and_capture({PERL5LIB => $lib}, [@@dump_inc]);

  is ($err, '', "No errors when determining \@@INC for $name");

  my @@inc = split /\n/, $out;

  is (scalar @@inc, scalar @@expect,
      "expected number of elements in \@@INC for $name");

  is ("@@inc", "@@expect", "expected elements in \@@INC for $name");
}

# PERL5LIB tests with included arch directories still missing
@


1.1
log
@Initial revision
@
text
@d11 2
a12 4
    unless ($Config{'d_fork'}) {
        print "1..0 # Skip: no fork\n";
	    exit 0;
    }
d15 4
a18 2
my $STDOUT = './results-0';
my $STDERR = './results-1';
d22 4
a25 1
print "1..9\n";
d27 2
a28 5
# Run perl with specified environment and arguments returns a list.
# First element is true iff Perl's stdout and stderr match the
# supplied $stdout and $stderr argument strings exactly.
# second element is an explanation of the failure
sub runperl {
d30 1
a30 3
  my ($env, $args, $stdout, $stderr) = @@_;

  unshift @@$args, '-I../lib';
d32 4
a35 2
  $stdout = '' unless defined $stdout;
  $stderr = '' unless defined $stderr;
a38 1
    my ($actual_stdout, $actual_stderr);
d42 8
a49 12
    open F, "< $STDOUT" or return (0, "Couldn't read $STDOUT file");
    { local $/; $actual_stdout = <F> }
    open F, "< $STDERR" or return (0, "Couldn't read $STDERR file");
    { local $/; $actual_stderr = <F> }

    if ($actual_stdout ne $stdout) {
      return (0, "Stdout mismatch: expected [$stdout], saw [$actual_stdout]");
    } elsif ($actual_stderr ne $stderr) {
      return (0, "Stderr mismatch: expected [$stderr], saw [$actual_stderr]");
    } else {
      return 1;                 # success
    }
d54 3
a56 9
    open STDOUT, "> $STDOUT" or exit $FAILURE_CODE;
    open STDERR, "> $STDERR" or it_didnt_work();
    { exec $PERL, @@$args }
    it_didnt_work();
  }
}


sub it_didnt_work {
d59 1
d63 15
a77 4
  my $testno = shift;
  my ($success, $reason) = runperl(@@_);
  if ($success) {
    print "ok $testno\n";
d79 1
a79 2
    $reason =~ s/\n/\\n/g;
    print "not ok $testno # $reason\n";    
d85 1
a85 1
#                    every Perl command line.  Only the -[DIMUdmw]
d93 1
a93 2
my  $T = 1;
try($T++, {PERL5OPT => '-w'}, ['-e', 'print $::x'],
d95 1
a95 1
    qq{Name "main::x" used only once: possible typo at -e line 1.\nUse of uninitialized value in print at -e line 1.\n});
d97 1
a97 1
try($T++, {PERL5OPT => '-Mstrict'}, ['-e', 'print $::x'],
d100 1
a100 1
try($T++, {PERL5OPT => '-Mstrict'}, ['-e', 'print $x'],
d102 1
a102 1
    qq{Global symbol "\$x" requires explicit package name at -e line 1.\nExecution of -e aborted due to compilation errors.\n});
d105 1
a105 1
try($T++, {PERL5OPT => '-Mstrict -w'}, ['-e', 'print $x'],
d107 1
a107 1
    qq{Global symbol "\$x" requires explicit package name at -e line 1.\nExecution of -e aborted due to compilation errors.\n});
d110 1
a110 1
try($T++, {PERL5OPT => '-w -Mstrict'}, ['-e', 'print $::x'],
d114 1
a114 1
Use of uninitialized value in print at -e line 1.
d119 1
a119 1
try($T++, {PERL5OPT => '-w -Mstrict'}, ['-e', 'print $::x'],
d123 1
a123 1
Use of uninitialized value in print at -e line 1.
d127 1
a127 1
try($T++, {PERL5OPT => '-MExporter'}, ['-e0'],
d132 1
a132 1
try($T++, {PERL5OPT => '-MExporter -MExporter'}, ['-e0'],
d136 17
a152 2
try($T++, {PERL5OPT => '-Mstrict -Mwarnings'}, 
    ['-e', 'print "ok" if $INC{"strict.pm"} and $INC{"warnings.pm"}'],
d156 125
a280 1
print "# ", $T-1, " tests total.\n";
d282 38
a319 3
END {
    1 while unlink $STDOUT;
    1 while unlink $STDERR;
d321 2
@


1.1.1.1
log
@stock perl 5.6.1
@
text
@@


1.1.1.2
log
@stock perl 5.8.0 from CPAN
@
text
@a16 4
use Test;

plan tests => 11;

d22 2
d25 1
a25 1
# First element is true if Perl's stdout and stderr match the
d73 1
d75 6
a80 2
  $reason =~ s/\n/\\n/g if defined $reason;
  ok( !!$success, 1, $reason );
d85 1
a85 1
#                    every Perl command line.  Only the -[DIMUdmtw]
d93 2
a94 1
try({PERL5OPT => '-w'}, ['-e', 'print $::x'],
d98 1
a98 1
try({PERL5OPT => '-Mstrict'}, ['-e', 'print $::x'],
d101 1
a101 1
try({PERL5OPT => '-Mstrict'}, ['-e', 'print $x'],
d106 1
a106 1
try({PERL5OPT => '-Mstrict -w'}, ['-e', 'print $x'],
d111 1
a111 1
try({PERL5OPT => '-w -Mstrict'}, ['-e', 'print $::x'],
d120 1
a120 1
try({PERL5OPT => '-w -Mstrict'}, ['-e', 'print $::x'],
d128 1
a128 1
try({PERL5OPT => '-MExporter'}, ['-e0'],
d133 1
a133 1
try({PERL5OPT => '-MExporter -MExporter'}, ['-e0'],
d137 1
a137 1
try({PERL5OPT => '-Mstrict -Mwarnings'}, 
d142 1
a142 9
try({PERL5OPT => '-w -w'},
    ['-e', 'print $ENV{PERL5OPT}'],
    '-w -w',
    '');

try({PERL5OPT => '-t'},
    ['-e', 'print ${^TAINT}'],
    '1',
    '');
@


1.1.1.3
log
@perl 5.8.2 from CPAN
@
text
@d19 1
a19 1
plan tests => 17;
a25 4
delete $ENV{PERLLIB};
delete $ENV{PERL5LIB};
delete $ENV{PERL5OPT};

a37 4
  local %ENV = %ENV;
  delete $ENV{PERLLIB};
  delete $ENV{PERL5LIB};
  delete $ENV{PERL5OPT};
d145 1
a145 16
    '-1',
    '');

try({PERLLIB => "foobar$Config{path_sep}42"},
    ['-e', 'print grep { $_ eq "foobar" } @@INC'],
    'foobar',
    '');

try({PERLLIB => "foobar$Config{path_sep}42"},
    ['-e', 'print grep { $_ eq "42" } @@INC'],
    '42',
    '');

try({PERL5LIB => "foobar$Config{path_sep}42"},
    ['-e', 'print grep { $_ eq "foobar" } @@INC'],
    'foobar',
a146 19

try({PERL5LIB => "foobar$Config{path_sep}42"},
    ['-e', 'print grep { $_ eq "42" } @@INC'],
    '42',
    '');

try({PERL5LIB => "foo",
     PERLLIB => "bar"},
    ['-e', 'print grep { $_ eq "foo" } @@INC'],
    'foo',
    '');

try({PERL5LIB => "foo",
     PERLLIB => "bar"},
    ['-e', 'print grep { $_ eq "bar" } @@INC'],
    '',
    '');

# PERL5LIB tests with included arch directories still missing
@


1.1.1.4
log
@perl 5.8.8 import
@
text
@d23 1
a23 1
my $PERL = $ENV{PERL} || './perl';
@


1.1.1.5
log
@import perl 5.10.0 from CPAN
@
text
@d100 1
a100 1
    qq{Name "main::x" used only once: possible typo at -e line 1.\nUse of uninitialized value \$x in print at -e line 1.\n});
d119 1
a119 1
Use of uninitialized value \$x in print at -e line 1.
d128 1
a128 1
Use of uninitialized value \$x in print at -e line 1.
@


1.1.1.6
log
@import perl 5.10.1
@
text
@a14 1
    require './test.pl'
d17 2
d21 2
a22 2
my $STDOUT = tempfile();
my $STDERR = tempfile();
d30 7
a37 3
sub runperl_and_capture {
  local *F;
  my ($env, $args) = @@_;
d40 2
d58 7
a64 1
    return ($actual_stdout, $actual_stderr);
a75 16
# Run perl with specified environment and arguments returns a list.
# First element is true if Perl's stdout and stderr match the
# supplied $stdout and $stderr argument strings exactly.
# second element is an explanation of the failure
sub runperl {
  local *F;
  my ($env, $args, $stdout, $stderr) = @@_;
  my ($actual_stdout, $actual_stderr) = runperl_and_capture($env, $args);
  if ($actual_stdout ne $stdout) {
    return (0, "Stdout mismatch: expected [$stdout], saw [$actual_stdout]");
  } elsif ($actual_stderr ne $stderr) {
    return (0, "Stderr mismatch: expected [$stderr], saw [$actual_stderr]");
  } else {
    return 1;                 # success
  }
}
d85 1
a85 2
  local $::Level = $::Level + 1;
  ok( $success, $reason );
@


1.1.1.7
log
@Perl 5.12.2 from CPAN
@
text
@d18 1
a18 1
plan tests => 78;
a149 15
open F, ">", "Oooof.pm" or die "Can't write Oooof.pm: $!";
print F "package Oooof; 1;\n";
close F;
END { 1 while unlink "Oooof.pm" }

try({PERL5OPT => '-I. -MOooof'}, 
    ['-e', 'print "ok" if $INC{"Oooof.pm"} eq "Oooof.pm"'],
    "ok",
    "");

try({PERL5OPT => '-I./ -MOooof'}, 
    ['-e', 'print "ok" if $INC{"Oooof.pm"} eq "Oooof.pm"'],
    "ok",
    "");

a159 9
try({PERL5OPT => '-W'},
    ['-e', 'local $^W = 0;  no warnings;  print $x'],
    '',
    <<ERROR
Name "main::x" used only once: possible typo at -e line 1.
Use of uninitialized value \$x in print at -e line 1.
ERROR
);

a190 46

# Tests for S_incpush_use_sep():

my @@dump_inc = ('-e', 'print "$_\n" foreach @@INC');

my ($out, $err) = runperl_and_capture({}, [@@dump_inc]);

is ($err, '', 'No errors when determining @@INC');

my @@default_inc = split /\n/, $out;

is (shift @@default_inc, '../lib', 'Our -I../lib is at the front');

my $sep = $Config{path_sep};
foreach (['nothing', ''],
	 ['something', 'zwapp', 'zwapp'],
	 ['two things', "zwapp${sep}bam", 'zwapp', 'bam'],
	 ['two things, ::', "zwapp${sep}${sep}bam", 'zwapp', 'bam'],
	 [': at start', "${sep}zwapp", 'zwapp'],
	 [': at end', "zwapp${sep}", 'zwapp'],
	 [':: sandwich ::', "${sep}${sep}zwapp${sep}${sep}", 'zwapp'],
	 [':', "${sep}"],
	 ['::', "${sep}${sep}"],
	 [':::', "${sep}${sep}${sep}"],
	 ['two things and :', "zwapp${sep}bam${sep}", 'zwapp', 'bam'],
	 [': and two things', "${sep}zwapp${sep}bam", 'zwapp', 'bam'],
	 [': two things :', "${sep}zwapp${sep}bam${sep}", 'zwapp', 'bam'],
	 ['three things', "zwapp${sep}bam${sep}${sep}owww",
	  'zwapp', 'bam', 'owww'],
	) {
  my ($name, $lib, @@expect) = @@$_;
  push @@expect, @@default_inc;

  ($out, $err) = runperl_and_capture({PERL5LIB => $lib}, [@@dump_inc]);

  is ($err, '', "No errors when determining \@@INC for $name");

  my @@inc = split /\n/, $out;

  is (shift @@inc, '../lib', 'Our -I../lib is at the front for $name');

  is (scalar @@inc, scalar @@expect,
      "expected number of elements in \@@INC for $name");

  is ("@@inc", "@@expect", "expected elements in \@@INC for $name");
}
@


1.1.1.8
log
@import perl 5.16.3 from CPAN - worked on by Andrew Fresh and myself
@
text
@d11 5
a15 2
    require './test.pl';
    skip_all_without_config('d_fork');
d18 1
a18 1
plan tests => 84;
a29 1
# Run perl with specified environment and arguments, return (STDOUT, STDERR)
d33 1
d42 1
d46 6
a51 8
    open my $stdout, '<', $STDOUT
	or return (0, "Couldn't read $STDOUT file: $!");
    open my $stderr, '<', $STDERR
	or return (0, "Couldn't read $STDERR file: $!");
    local $/;
    # Empty file with <$stderr> returns nothing in list context
    # (because there are no lines) Use scalar to force it to ''
    return (scalar <$stdout>, scalar <$stderr>);
d56 25
a80 3
    open STDOUT, '>', $STDOUT or exit $FAILURE_CODE;
    open STDERR, '>', $STDERR and do { exec $PERL, @@$args };
    # it didn't_work:
a82 1
  }
d86 2
a87 2
  my ($env, $args, $stdout, $stderr) = @@_;
  my ($actual_stdout, $actual_stderr) = runperl_and_capture($env, $args);
d89 1
a89 2
  is ($stdout, $actual_stdout);
  is ($stderr, $actual_stderr);
d106 1
a106 1
try({PERL5OPT => '-Mstrict'}, ['-I../lib', '-e', 'print $::x'],
d109 1
a109 1
try({PERL5OPT => '-Mstrict'}, ['-I../lib', '-e', 'print $x'],
d114 1
a114 1
try({PERL5OPT => '-Mstrict -w'}, ['-I../lib', '-e', 'print $x'],
d119 1
a119 1
try({PERL5OPT => '-w -Mstrict'}, ['-I../lib', '-e', 'print $::x'],
d128 1
a128 1
try({PERL5OPT => '-w -Mstrict'}, ['-I../lib', '-e', 'print $::x'],
d136 1
a136 1
try({PERL5OPT => '-MExporter'}, ['-I../lib', '-e0'],
d141 1
a141 1
try({PERL5OPT => '-MExporter -MExporter'}, ['-I../lib', '-e0'],
d146 1
a146 1
    ['-I../lib', '-e', 'print "ok" if $INC{"strict.pm"} and $INC{"warnings.pm"}'],
d150 3
a152 3
open my $fh, ">", "Oooof.pm" or die "Can't write Oooof.pm: $!";
print $fh "package Oooof; 1;\n";
close $fh;
d176 1
a176 1
    ['-I../lib','-e', 'local $^W = 0;  no warnings;  print $x'],
d226 1
a226 1
is ($default_inc[-1], '.', '. is last in @@INC');
d254 2
d263 5
@


1.1.1.9
log
@Import perl-5.18.2

OK espie@@ sthen@@ deraadt@@
@
text
@d15 1
a15 1
plan tests => 104;
d56 1
a56 1
    # it did not work:
d66 2
a67 15
  my @@envpairs = ();
  for my $k (sort keys %$env) {
    push @@envpairs, "$k => $env->{$k}";
  }
  my $label = join(',' => (@@envpairs, @@$args));
  if (ref $stdout) {
    ok ( $actual_stdout =~/$stdout/, $label . ' stdout' );
  } else {
    is ( $actual_stdout, $stdout, $label . ' stdout' );
  }
  if (ref $stderr) {
    ok ( $actual_stderr =~/$stderr/, $label . ' stderr' );
  } else {
    is ( $actual_stderr, $stderr, $label . ' stderr' );
  }
a192 71

try({PERL_HASH_SEED_DEBUG => 1},
    ['-e','1'],
    '',
    qr/HASH_FUNCTION =/);

try({PERL_HASH_SEED_DEBUG => 1},
    ['-e','1'],
    '',
    qr/HASH_SEED =/);

# special case, seed "0" implies disabled hash key traversal randomization
try({PERL_HASH_SEED_DEBUG => 1, PERL_HASH_SEED => "0"},
    ['-e','1'],
    '',
    qr/PERTURB_KEYS = 0/);

# check that setting it to a different value with the same logical value
# triggers the normal "deterministic mode".
try({PERL_HASH_SEED_DEBUG => 1, PERL_HASH_SEED => "0x0"},
    ['-e','1'],
    '',
    qr/PERTURB_KEYS = 2/);

try({PERL_HASH_SEED_DEBUG => 1, PERL_PERTURB_KEYS => "0"},
    ['-e','1'],
    '',
    qr/PERTURB_KEYS = 0/);

try({PERL_HASH_SEED_DEBUG => 1, PERL_PERTURB_KEYS => "1"},
    ['-e','1'],
    '',
    qr/PERTURB_KEYS = 1/);

try({PERL_HASH_SEED_DEBUG => 1, PERL_PERTURB_KEYS => "2"},
    ['-e','1'],
    '',
    qr/PERTURB_KEYS = 2/);

try({PERL_HASH_SEED_DEBUG => 1, PERL_HASH_SEED => "12345678"},
    ['-e','1'],
    '',
    qr/HASH_SEED = 0x12345678/);

try({PERL_HASH_SEED_DEBUG => 1, PERL_HASH_SEED => "12"},
    ['-e','1'],
    '',
    qr/HASH_SEED = 0x12000000/);

try({PERL_HASH_SEED_DEBUG => 1, PERL_HASH_SEED => "123456789"},
    ['-e','1'],
    '',
    qr/HASH_SEED = 0x12345678/);

# Test that PERL_PERTURB_KEYS works as expected.  We check that we get the same
# results if we use PERL_PERTURB_KEYS = 0 or 2 and we reuse the seed from previous run.
my @@print_keys = ( '-e', '@@_{"A".."Z"}=(); print keys %_');
for my $mode ( 0,1, 2 ) { # disabled and deterministic respectively
    my %base_opts = ( PERL_PERTURB_KEYS => $mode, PERL_HASH_SEED_DEBUG => 1 ),
    my ($out, $err) = runperl_and_capture( { %base_opts }, [ @@print_keys ]);
    if ($err=~/HASH_SEED = (0x[a-f0-9]+)/) {
        my $seed = $1;
        my($out2, $err2) = runperl_and_capture( { %base_opts, PERL_HASH_SEED => $seed }, [ @@print_keys ]);
        if ( $mode == 1 ) {
            isnt ($out,$out2,"PERL_PERTURB_KEYS = $mode results in different key order with the same key");
        } else {
            is ($out,$out2,"PERL_PERTURB_KEYS = $mode allows one to recreate a random hash");
        }
        is ($err,$err2,"Got the same debug output when we set PERL_HASH_SEED and PERL_PERTURB_KEYS");
    }
}
@


1.1.1.10
log
@Import perl-5.20.1
@
text
@d19 1
a19 1
my $PERL = './perl';
@


1.1.1.11
log
@Import perl-5.24.2
@
text
@d102 1
a102 1
    qq{Global symbol "\$x" requires explicit package name (did you forget to declare "my \$x"?) at -e line 1.\nExecution of -e aborted due to compilation errors.\n});
d107 1
a107 1
    qq{Global symbol "\$x" requires explicit package name (did you forget to declare "my \$x"?) at -e line 1.\nExecution of -e aborted due to compilation errors.\n});
@


