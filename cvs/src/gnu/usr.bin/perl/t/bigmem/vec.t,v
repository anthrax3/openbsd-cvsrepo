head	1.2;
access;
symbols
	OPENBSD_6_0:1.1.1.1.0.12
	OPENBSD_6_0_BASE:1.1.1.1
	OPENBSD_5_9:1.1.1.1.0.6
	OPENBSD_5_9_BASE:1.1.1.1
	OPENBSD_5_8:1.1.1.1.0.8
	OPENBSD_5_8_BASE:1.1.1.1
	PERL_5_20_2:1.1.1.1
	OPENBSD_5_7:1.1.1.1.0.2
	OPENBSD_5_7_BASE:1.1.1.1
	PERL_5_20_1:1.1.1.1
	OPENBSD_5_6:1.1.1.1.0.4
	OPENBSD_5_6_BASE:1.1.1.1
	PERL_5_18_2:1.1.1.1
	PERL:1.1.1;
locks; strict;
comment	@# @;
expand	@b@;


1.2
date	2017.02.05.00.32.19;	author afresh1;	state Exp;
branches;
next	1.1;
commitid	cxJ08BvJA9Pt2PTM;

1.1
date	2014.03.24.14.59.09;	author afresh1;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	2014.03.24.14.59.09;	author afresh1;	state Exp;
branches;
next	;


desc
@@


1.2
log
@Fix merge issues, remove excess files - match perl-5.24.1 dist
@
text
@#!perl
BEGIN {
    chdir 't' if -d 't';
    @@INC = "../lib";
}

use strict;
require './test.pl';
use Config qw(%Config);

$ENV{PERL_TEST_MEMORY} >= 1
    or skip_all("Need ~1Gb for this test");
$Config{ptrsize} >= 8
    or skip_all("Need 64-bit pointers for this test");

plan(7);

# RT #111730: Negative offset to vec in lvalue context

my $v = "";
ok(scalar eval { vec($v, 0x80000000, 1) = 1 }, "set a bit at a large offset");
ok(vec($v, 0x80000000, 1), "check a bit at a large offset");

ok(scalar eval { vec($v, 0x100000000, 1) = 1 },
   "set a bit at a larger offset");
ok(vec($v, 0x100000000, 1), "check a bit at a larger offset");

# real out of range values
ok(!eval { vec($v, -0x80000000, 1) = 1 },
   "shouldn't be able to set at a large negative offset");
ok(!eval { vec($v, -0x100000000, 1) = 1 },
   "shouldn't be able to set at a larger negative offset");

ok(!vec($v, 0, 1), "make sure we didn't wrap");
@


1.1
log
@Initial revision
@
text
@d3 2
a4 2
    chdir 't';
    unshift @@INC, "../lib";
@


1.1.1.1
log
@Import perl-5.18.2

OK espie@@ sthen@@ deraadt@@
@
text
@@
