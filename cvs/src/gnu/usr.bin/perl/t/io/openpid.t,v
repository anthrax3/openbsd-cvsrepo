head	1.1;
branch	1.1.1;
access;
symbols
	PERL_5_24_2:1.1.1.7
	OPENBSD_6_1:1.1.1.7.0.18
	OPENBSD_6_1_BASE:1.1.1.7
	OPENBSD_6_0:1.1.1.7.0.16
	OPENBSD_6_0_BASE:1.1.1.7
	OPENBSD_5_9:1.1.1.7.0.10
	OPENBSD_5_9_BASE:1.1.1.7
	OPENBSD_5_8:1.1.1.7.0.12
	OPENBSD_5_8_BASE:1.1.1.7
	PERL_5_20_2:1.1.1.7
	OPENBSD_5_7:1.1.1.7.0.4
	OPENBSD_5_7_BASE:1.1.1.7
	PERL_5_20_1:1.1.1.7
	OPENBSD_5_6:1.1.1.7.0.8
	OPENBSD_5_6_BASE:1.1.1.7
	PERL_5_18_2:1.1.1.7
	PERL:1.1.1
	OPENBSD_5_5:1.1.1.7.0.6
	OPENBSD_5_5_BASE:1.1.1.7
	OPENBSD_5_4:1.1.1.7.0.2
	OPENBSD_5_4_BASE:1.1.1.7
	PERL_5_16_3:1.1.1.7
	OPENBSD_5_3:1.1.1.6.0.10
	OPENBSD_5_3_BASE:1.1.1.6
	OPENBSD_5_2:1.1.1.6.0.8
	OPENBSD_5_2_BASE:1.1.1.6
	OPENBSD_5_1_BASE:1.1.1.6
	OPENBSD_5_1:1.1.1.6.0.6
	OPENBSD_5_0:1.1.1.6.0.4
	OPENBSD_5_0_BASE:1.1.1.6
	OPENBSD_4_9:1.1.1.6.0.2
	OPENBSD_4_9_BASE:1.1.1.6
	PERL_5_12_2:1.1.1.6
	OPENBSD_4_8:1.1.1.5.0.8
	OPENBSD_4_8_BASE:1.1.1.5
	OPENBSD_4_7:1.1.1.5.0.4
	OPENBSD_4_7_BASE:1.1.1.5
	PERL_5_10_1:1.1.1.5
	OPENBSD_4_6:1.1.1.5.0.6
	OPENBSD_4_6_BASE:1.1.1.5
	OPENBSD_4_5:1.1.1.5.0.2
	OPENBSD_4_5_BASE:1.1.1.5
	PERL_5_10_0:1.1.1.5
	OPENBSD_4_4:1.1.1.4.0.10
	OPENBSD_4_4_BASE:1.1.1.4
	OPENBSD_4_3:1.1.1.4.0.8
	OPENBSD_4_3_BASE:1.1.1.4
	OPENBSD_4_2:1.1.1.4.0.6
	OPENBSD_4_2_BASE:1.1.1.4
	OPENBSD_4_1:1.1.1.4.0.4
	OPENBSD_4_1_BASE:1.1.1.4
	OPENBSD_4_0:1.1.1.4.0.2
	OPENBSD_4_0_BASE:1.1.1.4
	PERL_5_8_8:1.1.1.4
	OPENBSD_3_9:1.1.1.3.0.14
	OPENBSD_3_9_BASE:1.1.1.3
	OPENBSD_3_8:1.1.1.3.0.12
	OPENBSD_3_8_BASE:1.1.1.3
	OPENBSD_3_7:1.1.1.3.0.10
	OPENBSD_3_7_BASE:1.1.1.3
	PERL_5_8_6:1.1.1.3
	OPENBSD_3_6:1.1.1.3.0.8
	OPENBSD_3_6_BASE:1.1.1.3
	PERL_5_8_5:1.1.1.3
	PERL_5_8_3:1.1.1.3
	OPENBSD_3_5:1.1.1.3.0.6
	OPENBSD_3_5_BASE:1.1.1.3
	PERL_5_8_2:1.1.1.3
	OPENBSD_3_4:1.1.1.3.0.4
	OPENBSD_3_4_BASE:1.1.1.3
	OPENBSD_3_3:1.1.1.3.0.2
	OPENBSD_3_3_BASE:1.1.1.3
	PERL_5_8_0:1.1.1.3
	OPENBSD_3_2:1.1.1.2.0.6
	OPENBSD_3_2_BASE:1.1.1.2
	OPENBSD_3_1:1.1.1.2.0.4
	OPENBSD_3_1_BASE:1.1.1.2
	OPENBSD_3_0:1.1.1.2.0.2
	OPENBSD_3_0_BASE:1.1.1.2
	PERL_5_6_1:1.1.1.2
	OPENBSD_2_9:1.1.1.1.0.6
	OPENBSD_2_9_BASE:1.1.1.1
	OPENBSD_2_8:1.1.1.1.0.4
	OPENBSD_2_8_BASE:1.1.1.1
	OPENBSD_2_7:1.1.1.1.0.2
	OPENBSD_2_7_BASE:1.1.1.1
	PERL_5_6_0:1.1.1.1
	CPAN:1.1.1;
locks; strict;
comment	@# @;
expand	@o@;


1.1
date	2000.04.06.16.10.39;	author millert;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	2000.04.06.16.10.39;	author millert;	state Exp;
branches;
next	1.1.1.2;

1.1.1.2
date	2001.05.24.18.25.05;	author millert;	state Exp;
branches;
next	1.1.1.3;

1.1.1.3
date	2002.10.27.22.15.10;	author millert;	state Exp;
branches;
next	1.1.1.4;

1.1.1.4
date	2006.03.28.18.49.41;	author millert;	state Exp;
branches;
next	1.1.1.5;

1.1.1.5
date	2008.09.29.17.18.58;	author millert;	state Exp;
branches;
next	1.1.1.6;

1.1.1.6
date	2010.09.24.14.49.19;	author millert;	state Exp;
branches;
next	1.1.1.7;

1.1.1.7
date	2013.03.25.20.09.33;	author sthen;	state Exp;
branches;
next	;


desc
@@


1.1
log
@Initial revision
@
text
@#!./perl

#####################################################################
#
# Test for process id return value from open
# Ronald Schmidt (The Software Path) RonaldWS@@software-path.com
#
#####################################################################

BEGIN {
    chdir 't' if -d 't';
    unshift @@INC, '../lib';
    if ($^O eq 'dos') {
        print "1..0 # Skip: no multitasking\n";
        exit 0;
    }
}


use FileHandle;
use Config;
autoflush STDOUT 1;
$SIG{PIPE} = 'IGNORE';

print "1..10\n";

$perl = qq[$^X "-I../lib"];

#
# commands run 4 perl programs.  Two of these programs write a
# short message to STDOUT and exit.  Two of these programs
# read from STDIN.  One reader never exits and must be killed.
# the other reader reads one line, waits a few seconds and then
# exits to test the waitpid function.
#
$cmd1 = qq/$perl -e "use FileHandle; autoflush STDOUT 1; / .
        qq/print qq[first process\\n]; sleep 30;"/;
$cmd2 = qq/$perl -e "use FileHandle; autoflush STDOUT 1; / .
        qq/print qq[second process\\n]; sleep 30;"/;
$cmd3 = qq/$perl -e "print <>;"/; # hangs waiting for end of STDIN
$cmd4 = qq/$perl -e "print scalar <>;"/;

#warn "#$cmd1\n#$cmd2\n#$cmd3\n#$cmd4\n";

# start the processes
$pid1 = open(FH1, "$cmd1 |") or print "not ";
print "ok 1\n";
$pid2 = open(FH2, "$cmd2 |") or print "not ";
print "ok 2\n";
$pid3 = open(FH3, "| $cmd3") or print "not ";
print "ok 3\n";
$pid4 = open(FH4, "| $cmd4") or print "not ";
print "ok 4\n";

print "# pids were $pid1, $pid2, $pid3, $pid4\n";

my $killsig = 'HUP';
$killsig = 1 unless $Config{sig_name} =~ /\bHUP\b/;

# get message from first process and kill it
chomp($from_pid1 = scalar(<FH1>));
print "# child1 returned [$from_pid1]\nnot "
    unless $from_pid1 eq 'first process';
print "ok 5\n";
$kill_cnt = kill $killsig, $pid1;
print "not " unless $kill_cnt == 1;
print "ok 6\n";

# get message from second process and kill second process and reader process
chomp($from_pid2 = scalar(<FH2>));
print "# child2 returned [$from_pid2]\nnot "
    unless $from_pid2 eq 'second process';
print "ok 7\n";
$kill_cnt = kill $killsig, $pid2, $pid3;
print "not " unless $kill_cnt == 2;
print "ok 8\n";

# send one expected line of text to child process and then wait for it
autoflush FH4 1;
print FH4 "ok 9\n";
print "ok 9 # skip VMS\n" if $^O eq 'VMS';
print "# waiting for process $pid4 to exit\n";
$reap_pid = waitpid $pid4, 0;
print "# reaped pid $reap_pid != $pid4\nnot "
    unless $reap_pid == $pid4;         
print "ok 10\n";
@


1.1.1.1
log
@virgin perl 5.6.0
@
text
@@


1.1.1.2
log
@stock perl 5.6.1
@
text
@d12 1
a12 1
    @@INC = '../lib';
d19 2
d22 1
a22 1
$| = 1;
d36 4
a39 2
$cmd1 = qq/$perl -e "\$|=1; print qq[first process\\n]; sleep 30;"/;
$cmd2 = qq/$perl -e "\$|=1; print qq[second process\\n]; sleep 30;"/;
d79 1
a79 2
select(FH4); $| = 1; select(STDOUT);

d81 1
@


1.1.1.3
log
@stock perl 5.8.0 from CPAN
@
text
@d13 4
a16 1
    require './test.pl';
a18 7
if ($^O eq 'dos' || $^O eq 'MacOS') {
    skip_all("no multitasking");
}

plan tests => 10;


d23 3
a25 2
my $perl = which_perl();
$perl .= qq[ "-I../lib"];
d42 8
a49 4
ok( $pid1 = open(FH1, "$cmd1 |"), 'first process started');
ok( $pid2 = open(FH2, "$cmd2 |"), '    second' );
ok( $pid3 = open(FH3, "| $cmd3"), '    third'  );
ok( $pid4 = open(FH4, "| $cmd4"), '    fourth' );
d58 3
a60 2
is( $from_pid1, 'first process',    'message from first process' );

d62 2
a63 2
is( $kill_cnt, 1,   'first process killed' ) ||
  print "# errno == $!\n";
d67 3
a69 2
is( $from_pid2, 'second process',   'message from second process' );

d71 2
a72 3
is( $kill_cnt, 2,   'killing procs 2 & 3' ) ||
  print "# errno == $!\n";

d77 1
a77 2
printf FH4 "ok %d - text sent to fourth process\n", curr_test();
next_test();
d80 3
a82 2
is( $reap_pid, $pid4, 'fourth process reaped' );

@


1.1.1.4
log
@perl 5.8.8 import
@
text
@a25 1
$SIG{HUP} = 'IGNORE' if $^O eq 'interix';
@


1.1.1.5
log
@import perl 5.10.0 from CPAN
@
text
@d48 1
a48 4
{
    no warnings 'once';
    ok( $pid3 = open(FH3, "| $cmd3"), '    third'  );
}
@


1.1.1.6
log
@Perl 5.12.2 from CPAN
@
text
@d16 1
a16 1
if ($^O eq 'dos') {
d21 1
a21 1
watchdog(15);
@


1.1.1.7
log
@import perl 5.16.3 from CPAN - worked on by Andrew Fresh and myself
@
text
@d21 1
a21 1
watchdog(15, $^O eq 'MSWin32' ? "alarm" : '');
@


