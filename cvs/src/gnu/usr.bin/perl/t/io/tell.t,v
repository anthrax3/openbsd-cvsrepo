head	1.13;
access;
symbols
	PERL_5_24_2:1.1.1.14
	OPENBSD_6_1:1.13.0.12
	OPENBSD_6_1_BASE:1.13
	OPENBSD_6_0:1.13.0.10
	OPENBSD_6_0_BASE:1.13
	OPENBSD_5_9:1.13.0.4
	OPENBSD_5_9_BASE:1.13
	OPENBSD_5_8:1.13.0.6
	OPENBSD_5_8_BASE:1.13
	PERL_5_20_2:1.1.1.14
	OPENBSD_5_7:1.13.0.2
	OPENBSD_5_7_BASE:1.13
	PERL_5_20_1:1.1.1.14
	OPENBSD_5_6:1.12.0.8
	OPENBSD_5_6_BASE:1.12
	PERL_5_18_2:1.1.1.13
	PERL:1.1.1
	OPENBSD_5_5:1.12.0.6
	OPENBSD_5_5_BASE:1.12
	OPENBSD_5_4:1.12.0.2
	OPENBSD_5_4_BASE:1.12
	PERL_5_16_3:1.1.1.13
	OPENBSD_5_3:1.11.0.10
	OPENBSD_5_3_BASE:1.11
	OPENBSD_5_2:1.11.0.8
	OPENBSD_5_2_BASE:1.11
	OPENBSD_5_1_BASE:1.11
	OPENBSD_5_1:1.11.0.6
	OPENBSD_5_0:1.11.0.4
	OPENBSD_5_0_BASE:1.11
	OPENBSD_4_9:1.11.0.2
	OPENBSD_4_9_BASE:1.11
	PERL_5_12_2:1.1.1.12
	OPENBSD_4_8:1.10.0.4
	OPENBSD_4_8_BASE:1.10
	OPENBSD_4_7:1.10.0.2
	OPENBSD_4_7_BASE:1.10
	PERL_5_10_1:1.1.1.11
	OPENBSD_4_6:1.9.0.6
	OPENBSD_4_6_BASE:1.9
	OPENBSD_4_5:1.9.0.2
	OPENBSD_4_5_BASE:1.9
	PERL_5_10_0:1.1.1.10
	OPENBSD_4_4:1.8.0.10
	OPENBSD_4_4_BASE:1.8
	OPENBSD_4_3:1.8.0.8
	OPENBSD_4_3_BASE:1.8
	OPENBSD_4_2:1.8.0.6
	OPENBSD_4_2_BASE:1.8
	OPENBSD_4_1:1.8.0.4
	OPENBSD_4_1_BASE:1.8
	OPENBSD_4_0:1.8.0.2
	OPENBSD_4_0_BASE:1.8
	PERL_5_8_8:1.1.1.9
	OPENBSD_3_9:1.7.0.10
	OPENBSD_3_9_BASE:1.7
	OPENBSD_3_8:1.7.0.8
	OPENBSD_3_8_BASE:1.7
	OPENBSD_3_7:1.7.0.6
	OPENBSD_3_7_BASE:1.7
	PERL_5_8_6:1.1.1.8
	OPENBSD_3_6:1.7.0.4
	OPENBSD_3_6_BASE:1.7
	PERL_5_8_5:1.1.1.7
	PERL_5_8_3:1.1.1.6
	OPENBSD_3_5:1.7.0.2
	OPENBSD_3_5_BASE:1.7
	PERL_5_8_2:1.1.1.6
	OPENBSD_3_4:1.6.0.4
	OPENBSD_3_4_BASE:1.6
	OPENBSD_3_3:1.6.0.2
	OPENBSD_3_3_BASE:1.6
	PERL_5_8_0:1.1.1.5
	OPENBSD_3_2:1.5.0.6
	OPENBSD_3_2_BASE:1.5
	OPENBSD_3_1:1.5.0.4
	OPENBSD_3_1_BASE:1.5
	OPENBSD_3_0:1.5.0.2
	OPENBSD_3_0_BASE:1.5
	PERL_5_6_1:1.1.1.4
	OPENBSD_2_9:1.4.0.6
	OPENBSD_2_9_BASE:1.4
	OPENBSD_2_8:1.4.0.4
	OPENBSD_2_8_BASE:1.4
	OPENBSD_2_7:1.4.0.2
	OPENBSD_2_7_BASE:1.4
	PERL_5_6_0:1.1.1.3
	OPENBSD_2_6:1.3.0.2
	OPENBSD_2_6_BASE:1.3
	PERL_500503:1.1.1.2
	CPAN:1.1.1
	OPENBSD_2_5:1.2.0.6
	OPENBSD_2_5_BASE:1.2
	OPENBSD_2_4:1.2.0.4
	OPENBSD_2_4_BASE:1.2
	OPENBSD_2_3:1.2.0.2
	OPENBSD_2_3_BASE:1.2
	OPENBSD_2_2:1.1.1.1.0.6
	OPENBSD_2_2_BASE:1.1.1.1
	OPENBSD_2_1:1.1.1.1.0.4
	OPENBSD_2_1_BASE:1.1.1.1
	OPENBSD_2_0:1.1.1.1.0.2
	OPENBSD_2_0_BASE:1.1.1.1
	perl5003:1.1.1.1
	lwall:1.1.1;
locks; strict;
comment	@# @;
expand	@o@;


1.13
date	2014.11.17.20.57.07;	author afresh1;	state Exp;
branches;
next	1.12;
commitid	QP75iYx42Uo7mMxO;

1.12
date	2013.03.25.20.40.59;	author sthen;	state Exp;
branches;
next	1.11;

1.11
date	2010.09.24.15.07.05;	author millert;	state Exp;
branches;
next	1.10;

1.10
date	2009.10.12.18.30.27;	author millert;	state Exp;
branches;
next	1.9;

1.9
date	2008.09.29.17.36.18;	author millert;	state Exp;
branches;
next	1.8;

1.8
date	2006.03.28.19.23.12;	author millert;	state Exp;
branches;
next	1.7;

1.7
date	2003.12.03.03.02.48;	author millert;	state Exp;
branches;
next	1.6;

1.6
date	2002.10.27.22.25.35;	author millert;	state Exp;
branches;
next	1.5;

1.5
date	2001.05.24.18.36.07;	author millert;	state Exp;
branches;
next	1.4;

1.4
date	2000.04.06.17.08.02;	author millert;	state Exp;
branches;
next	1.3;

1.3
date	99.04.29.22.52.28;	author millert;	state Exp;
branches;
next	1.2;

1.2
date	97.11.30.08.00.18;	author millert;	state Exp;
branches;
next	1.1;

1.1
date	96.08.19.10.13.13;	author downsj;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	96.08.19.10.13.13;	author downsj;	state Exp;
branches;
next	1.1.1.2;

1.1.1.2
date	99.04.29.22.41.24;	author millert;	state Exp;
branches;
next	1.1.1.3;

1.1.1.3
date	2000.04.06.16.10.39;	author millert;	state Exp;
branches;
next	1.1.1.4;

1.1.1.4
date	2001.05.24.18.25.06;	author millert;	state Exp;
branches;
next	1.1.1.5;

1.1.1.5
date	2002.10.27.22.15.10;	author millert;	state Exp;
branches;
next	1.1.1.6;

1.1.1.6
date	2003.12.03.02.44.30;	author millert;	state Exp;
branches;
next	1.1.1.7;

1.1.1.7
date	2004.08.09.17.48.31;	author millert;	state Exp;
branches;
next	1.1.1.8;

1.1.1.8
date	2005.01.15.21.18.14;	author millert;	state Exp;
branches;
next	1.1.1.9;

1.1.1.9
date	2006.03.28.18.49.41;	author millert;	state Exp;
branches;
next	1.1.1.10;

1.1.1.10
date	2008.09.29.17.18.58;	author millert;	state Exp;
branches;
next	1.1.1.11;

1.1.1.11
date	2009.10.12.18.10.42;	author millert;	state Exp;
branches;
next	1.1.1.12;

1.1.1.12
date	2010.09.24.14.49.19;	author millert;	state Exp;
branches;
next	1.1.1.13;

1.1.1.13
date	2013.03.25.20.09.33;	author sthen;	state Exp;
branches;
next	1.1.1.14;

1.1.1.14
date	2014.11.17.20.53.17;	author afresh1;	state Exp;
branches;
next	;
commitid	B31cAbBIXiCqnL97;


desc
@@


1.13
log
@Fix merge conflicts, remove extra files, match upstream perl-5.20.1

ok deraadt@@ sthen@@ espie@@ miod@@
@
text
@#!./perl

BEGIN {
    chdir 't' if -d 't';
    @@INC = '../lib';
    require './test.pl';
}

print "1..35\n";

$TST = 'TST';

$Is_Dosish = ($^O eq 'MSWin32' or $^O eq 'NetWare' or $^O eq 'dos' or
              $^O eq 'os2' or $^O eq 'cygwin' or
              $^O =~ /^uwin/);

open($TST, 'harness') || (die "Can't open harness");
binmode $TST if $Is_Dosish;
if (eof(TST)) { print "not ok 1\n"; } else { print "ok 1\n"; }

$firstline = <$TST>;
$secondpos = tell;

$x = 0;
while (<TST>) {
    if (eof) {$x++;}
}
if ($x == 1) { print "ok 2\n"; } else { print "not ok 2\n"; }

$lastpos = tell;

unless (eof) { print "not ok 3\n"; } else { print "ok 3\n"; }

if (seek($TST,0,0)) { print "ok 4\n"; } else { print "not ok 4\n"; }

if (eof) { print "not ok 5\n"; } else { print "ok 5\n"; }

if ($firstline eq <TST>) { print "ok 6\n"; } else { print "not ok 6\n"; }

if ($secondpos == tell) { print "ok 7\n"; } else { print "not ok 7\n"; }

if (seek(TST,0,1)) { print "ok 8\n"; } else { print "not ok 8\n"; }

if (eof($TST)) { print "not ok 9\n"; } else { print "ok 9\n"; }

if ($secondpos == tell) { print "ok 10\n"; } else { print "not ok 10\n"; }

if (seek(TST,0,2)) { print "ok 11\n"; } else { print "not ok 11\n"; }

if ($lastpos == tell) { print "ok 12\n"; } else { print "not ok 12\n"; }

unless (eof) { print "not ok 13\n"; } else { print "ok 13\n"; }

if ($. == 0) { print "not ok 14\n"; } else { print "ok 14\n"; }

$curline = $.;
open(OTHER, 'harness') || (die "Can't open harness: $!");
binmode OTHER if (($^O eq 'MSWin32') || ($^O eq 'NetWare'));

{
    local($.);

    if ($. == 0) { print "not ok 15\n"; } else { print "ok 15\n"; }

    tell OTHER;
    if ($. == 0) { print "ok 16\n"; } else { print "not ok 16\n"; }

    $. = 5;
    scalar <OTHER>;
    if ($. == 6) { print "ok 17\n"; } else { print "not ok 17\n"; }
}

if ($. == $curline) { print "ok 18\n"; } else { print "not ok 18\n"; }

{
    local($.);

    scalar <OTHER>;
    if ($. == 7) { print "ok 19\n"; } else { print "not ok 19\n"; }
}

if ($. == $curline) { print "ok 20\n"; } else { print "not ok 20\n"; }

{
    local($.);

    tell OTHER;
    if ($. == 7) { print "ok 21\n"; } else { print "not ok 21\n"; }
}

close(OTHER);
{
    no warnings 'closed';
    if (tell(OTHER) == -1)  { print "ok 22\n"; } else { print "not ok 22\n"; }
}
{
    no warnings 'unopened';
    if (tell(ETHER) == -1)  { print "ok 23\n"; } else { print "not ok 23\n"; }
}

# ftell(STDIN) (or any std streams) is undefined, it can return -1 or
# something else.  ftell() on pipes, fifos, and sockets is defined to
# return -1.

my $written = tempfile();

close($TST);
open($tst,">$written")  || die "Cannot open $written:$!";
binmode $tst if $Is_Dosish;

if (tell($tst) == 0) { print "ok 24\n"; } else { print "not ok 24\n"; }

print $tst "fred\n";

if (tell($tst) == 5) { print "ok 25\n"; } else { print "not ok 25\n"; }

print $tst "more\n";

if (tell($tst) == 10) { print "ok 26\n"; } else { print "not ok 26\n"; }

close($tst);

open($tst,"+>>$written")  || die "Cannot open $written:$!";
binmode $tst if $Is_Dosish;

if (0) 
{
 # :stdio does not pass these so ignore them for now 

if (tell($tst) == 0) { print "ok 27\n"; } else { print "not ok 27\n"; }

$line = <$tst>;

if ($line eq "fred\n") { print "ok 29\n"; } else { print "not ok 29\n"; }

if (tell($tst) == 5) { print "ok 30\n"; } else { print "not ok 30\n"; }

}

print $tst "xxxx\n";

if (tell($tst) == 15 ||
    tell($tst) == 5) # unset PERLIO or PERLIO=stdio (e.g. HP-UX, Solaris)
{ print "ok 27\n"; } else { print "not ok 27\n"; }

close($tst);

open($tst,">$written")  || die "Cannot open $written:$!";
print $tst "foobar";
close $tst;
open($tst,">>$written")  || die "Cannot open $written:$!";

# This test makes a questionable assumption that the file pointer will
# be at eof after opening a file but before seeking, reading, or writing.
# The POSIX standard is vague on this point.
# Cygwin and VOS differ from other implementations.

if (tell ($tst) == 6) {
  print "ok 28\n";
}
else {
  if (($^O eq "cygwin") && (&PerlIO::get_layers($tst) eq 'stdio')) {
    print "not ok 28 # TODO: file pointer not at eof\n";
  }
  elsif ($^O eq "vos") {
    print "not ok 28 # TODO: Hit bug posix-2056. file pointer not at eof\n";
  }
  else {
    print "not ok 28 - file pointer not at eof\n";
  }
}

close $tst;

open FH, "test.pl";
$fh = *FH; # coercible glob
$not = "not " x! (tell $fh == 0);
print "${not}ok 29 - tell on coercible glob\n";
$not = "not " x! (tell == 0);
print "${not}ok 30 - argless tell after tell \$coercible\n";
tell *$fh;
$not = "not " x! (tell == 0);
print "${not}ok 31 - argless tell after tell *\$coercible\n";
eof $fh;
$not = "not " x! (tell == 0);
print "${not}ok 32 - argless tell after eof \$coercible\n";
eof *$fh;
$not = "not " x! (tell == 0);
print "${not}ok 33 - argless tell after eof *\$coercible\n";
seek $fh,0,0;
$not = "not " x! (tell == 0);
print "${not}ok 34 - argless tell after seek \$coercible...\n";
seek *$fh,0,0;
$not = "not " x! (tell == 0);
print "${not}ok 35 - argless tell after seek *\$coercible...\n";
@


1.12
log
@merge/resolve conflicts
(some more to do after this one)
@
text
@d155 17
a171 3
# Only known failure is on cygwin.
my $todo = $^O eq "cygwin" && &PerlIO::get_layers($tst) eq 'stdio'
    && ' # TODO: file pointer not at eof';
a172 2
if (tell($tst) == 6)
{ print "ok 28$todo\n"; } else { print "not ok 28$todo\n"; }
@


1.11
log
@merge in perl 5.12.2 plus local changes
@
text
@d9 1
a9 1
print "1..28\n";
d163 21
@


1.10
log
@Merge in perl 5.10.1; part two
@
text
@d14 1
a14 1
              $^O eq 'os2' or $^O eq 'mint' or $^O eq 'cygwin' or
@


1.9
log
@fix conflicts and merge in local changes to perl 5.10.0
@
text
@d6 1
d105 1
a105 3
my $written = "tell_write.txt";

END { 1 while unlink($written) }
@


1.8
log
@merge in perl 5.8.8
@
text
@a2 2
# $RCSfile: tell.t,v $$Revision: 1.7 $$Date: 2003/12/03 03:02:48 $

d10 1
a10 1
$TST = 'tst';
d18 1
a18 1
if (eof(tst)) { print "not ok 1\n"; } else { print "ok 1\n"; }
d24 1
a24 1
while (<tst>) {
d37 1
a37 1
if ($firstline eq <tst>) { print "ok 6\n"; } else { print "not ok 6\n"; }
d41 1
a41 1
if (seek(tst,0,1)) { print "ok 8\n"; } else { print "not ok 8\n"; }
d47 1
a47 1
if (seek(tst,0,2)) { print "ok 11\n"; } else { print "not ok 11\n"; }
d56 2
a57 2
open(other, 'harness') || (die "Can't open harness: $!");
binmode other if (($^O eq 'MSWin32') || ($^O eq 'NetWare'));
d64 1
a64 1
    tell other;
d68 1
a68 1
    scalar <other>;
d77 1
a77 1
    scalar <other>;
d86 1
a86 1
    tell other;
d90 9
a98 4
close(other);
if (tell(other) == -1)  { print "ok 22\n"; } else { print "not ok 22\n"; }

if (tell(ether) == -1)  { print "ok 23\n"; } else { print "not ok 23\n"; }
d108 1
a108 1
close($tst);
@


1.7
log
@Resolve conflicts for perl 5.8.2, remove old files, and add OpenBSD-specific scaffolding
@
text
@d3 1
a3 1
# $RCSfile: tell.t,v $$Revision$$Date$
d103 1
a103 1
END { unlink($written) }
d151 6
d158 1
a158 1
{ print "ok 28\n"; } else { print "not ok 28\n"; }
@


1.6
log
@Resolve conflicts, remove old files, merge local changes
@
text
@d10 1
a10 1
print "1..23\n";
d15 2
a16 1
	      $^O eq 'os2' or $^O eq 'mint' or $^O eq 'cygwin');
d100 54
@


1.5
log
@merge in perl 5.6.1 with our local changes
@
text
@d5 5
d14 1
a14 1
$Is_Dosish = ($^O eq 'MSWin32' or $^O eq 'dos' or
d58 1
a58 1
binmode other if $^O eq 'MSWin32';
@


1.4
log
@perl-5.6.0 + local changes
@
text
@d5 1
a5 1
print "1..21\n";
d12 1
a12 1
open($TST, '../Configure') || (die "Can't open ../Configure");
d52 1
a52 1
open(other, '../Configure') || (die "Can't open ../Configure");
d85 10
@


1.3
log
@perl5.005_03 (stock)
@
text
@d3 1
a3 1
# $RCSfile: tell.t,v $$Revision: 4.1 $$Date: 92/08/07 18:27:33 $
d5 1
a5 1
print "1..13\n";
d9 3
d13 1
a13 1
binmode $TST if $^O eq 'MSWin32';
d48 37
@


1.2
log
@perl 5.004_04
@
text
@@


1.1
log
@Initial revision
@
text
@d10 1
a10 1

@


1.1.1.1
log
@Import of Perl 5.003 into the tree.  Makefile.bsd-wrapper and
config.sh.OpenBSD are the only local changes.
@
text
@@


1.1.1.2
log
@perl5.005_03
@
text
@d10 1
a10 1
binmode $TST if $^O eq 'MSWin32';
@


1.1.1.3
log
@virgin perl 5.6.0
@
text
@d3 1
a3 1
# $RCSfile: tell.t,v $$Revision$$Date$
d5 1
a5 1
print "1..21\n";
a8 3
$Is_Dosish = ($^O eq 'MSWin32' or $^O eq 'dos' or
	      $^O eq 'os2' or $^O eq 'mint' or $^O eq 'cygwin');

d10 1
a10 1
binmode $TST if $Is_Dosish;
a44 37

if ($. == 0) { print "not ok 14\n"; } else { print "ok 14\n"; }

$curline = $.;
open(other, '../Configure') || (die "Can't open ../Configure");
binmode other if $^O eq 'MSWin32';

{
    local($.);

    if ($. == 0) { print "not ok 15\n"; } else { print "ok 15\n"; }

    tell other;
    if ($. == 0) { print "ok 16\n"; } else { print "not ok 16\n"; }

    $. = 5;
    scalar <other>;
    if ($. == 6) { print "ok 17\n"; } else { print "not ok 17\n"; }
}

if ($. == $curline) { print "ok 18\n"; } else { print "not ok 18\n"; }

{
    local($.);

    scalar <other>;
    if ($. == 7) { print "ok 19\n"; } else { print "not ok 19\n"; }
}

if ($. == $curline) { print "ok 20\n"; } else { print "not ok 20\n"; }

{
    local($.);

    tell other;
    if ($. == 7) { print "ok 21\n"; } else { print "not ok 21\n"; }
}
@


1.1.1.4
log
@stock perl 5.6.1
@
text
@d5 1
a5 1
print "1..23\n";
d12 1
a12 1
open($TST, 'harness') || (die "Can't open harness");
d52 1
a52 1
open(other, 'harness') || (die "Can't open harness: $!");
a84 10

close(other);
if (tell(other) == -1)  { print "ok 22\n"; } else { print "not ok 22\n"; }

if (tell(ether) == -1)  { print "ok 23\n"; } else { print "not ok 23\n"; }

# ftell(STDIN) (or any std streams) is undefined, it can return -1 or
# something else.  ftell() on pipes, fifos, and sockets is defined to
# return -1.

@


1.1.1.5
log
@stock perl 5.8.0 from CPAN
@
text
@a4 5
BEGIN {
    chdir 't' if -d 't';
    @@INC = '../lib';
}

d9 1
a9 1
$Is_Dosish = ($^O eq 'MSWin32' or $^O eq 'NetWare' or $^O eq 'dos' or
d53 1
a53 1
binmode other if (($^O eq 'MSWin32') || ($^O eq 'NetWare'));
@


1.1.1.6
log
@perl 5.8.2 from CPAN
@
text
@d10 1
a10 1
print "1..28\n";
d15 1
a15 2
              $^O eq 'os2' or $^O eq 'mint' or $^O eq 'cygwin' or
              $^O =~ /^uwin/);
a98 54

my $written = "tell_write.txt";

END { unlink($written) }

close($tst);
open($tst,">$written")  || die "Cannot open $written:$!";
binmode $tst if $Is_Dosish;

if (tell($tst) == 0) { print "ok 24\n"; } else { print "not ok 24\n"; }

print $tst "fred\n";

if (tell($tst) == 5) { print "ok 25\n"; } else { print "not ok 25\n"; }

print $tst "more\n";

if (tell($tst) == 10) { print "ok 26\n"; } else { print "not ok 26\n"; }

close($tst);

open($tst,"+>>$written")  || die "Cannot open $written:$!";
binmode $tst if $Is_Dosish;

if (0) 
{
 # :stdio does not pass these so ignore them for now 

if (tell($tst) == 0) { print "ok 27\n"; } else { print "not ok 27\n"; }

$line = <$tst>;

if ($line eq "fred\n") { print "ok 29\n"; } else { print "not ok 29\n"; }

if (tell($tst) == 5) { print "ok 30\n"; } else { print "not ok 30\n"; }

}

print $tst "xxxx\n";

if (tell($tst) == 15 ||
    tell($tst) == 5) # unset PERLIO or PERLIO=stdio (e.g. HP-UX, Solaris)
{ print "ok 27\n"; } else { print "not ok 27\n"; }

close($tst);

open($tst,">$written")  || die "Cannot open $written:$!";
print $tst "foobar";
close $tst;
open($tst,">>$written")  || die "Cannot open $written:$!";

if (tell($tst) == 6)
{ print "ok 28\n"; } else { print "not ok 28\n"; }
close $tst;
@


1.1.1.7
log
@Import of stock perl 5.8.5
@
text
@d3 1
a3 1
# $RCSfile: tell.t,v $$Revision: 1.7 $$Date: 2003/12/03 03:02:48 $
@


1.1.1.8
log
@perl 5.8.6 from CPAN
@
text
@d3 1
a3 1
# $RCSfile: tell.t,v $$Revision$$Date$
@


1.1.1.9
log
@perl 5.8.8 import
@
text
@d103 1
a103 1
END { 1 while unlink($written) }
a150 6
# This test makes a questionable assumption that the file pointer will
# be at eof after opening a file but before seeking, reading, or writing.
# Only known failure is on cygwin.
my $todo = $^O eq "cygwin" && &PerlIO::get_layers($tst) eq 'stdio'
    && ' # TODO: file pointer not at eof';

d152 1
a152 1
{ print "ok 28$todo\n"; } else { print "not ok 28$todo\n"; }
@


1.1.1.10
log
@import perl 5.10.0 from CPAN
@
text
@d3 2
d12 1
a12 1
$TST = 'TST';
d20 1
a20 1
if (eof(TST)) { print "not ok 1\n"; } else { print "ok 1\n"; }
d26 1
a26 1
while (<TST>) {
d39 1
a39 1
if ($firstline eq <TST>) { print "ok 6\n"; } else { print "not ok 6\n"; }
d43 1
a43 1
if (seek(TST,0,1)) { print "ok 8\n"; } else { print "not ok 8\n"; }
d49 1
a49 1
if (seek(TST,0,2)) { print "ok 11\n"; } else { print "not ok 11\n"; }
d58 2
a59 2
open(OTHER, 'harness') || (die "Can't open harness: $!");
binmode OTHER if (($^O eq 'MSWin32') || ($^O eq 'NetWare'));
d66 1
a66 1
    tell OTHER;
d70 1
a70 1
    scalar <OTHER>;
d79 1
a79 1
    scalar <OTHER>;
d88 1
a88 1
    tell OTHER;
d92 4
a95 9
close(OTHER);
{
    no warnings 'closed';
    if (tell(OTHER) == -1)  { print "ok 22\n"; } else { print "not ok 22\n"; }
}
{
    no warnings 'unopened';
    if (tell(ETHER) == -1)  { print "ok 23\n"; } else { print "not ok 23\n"; }
}
d105 1
a105 1
close($TST);
@


1.1.1.11
log
@import perl 5.10.1
@
text
@a5 1
    require './test.pl';
d104 3
a106 1
my $written = tempfile();
@


1.1.1.12
log
@Perl 5.12.2 from CPAN
@
text
@d14 1
a14 1
              $^O eq 'os2' or $^O eq 'cygwin' or
@


1.1.1.13
log
@import perl 5.16.3 from CPAN - worked on by Andrew Fresh and myself
@
text
@d9 1
a9 1
print "1..35\n";
a162 21
open FH, "test.pl";
$fh = *FH; # coercible glob
$not = "not " x! (tell $fh == 0);
print "${not}ok 29 - tell on coercible glob\n";
$not = "not " x! (tell == 0);
print "${not}ok 30 - argless tell after tell \$coercible\n";
tell *$fh;
$not = "not " x! (tell == 0);
print "${not}ok 31 - argless tell after tell *\$coercible\n";
eof $fh;
$not = "not " x! (tell == 0);
print "${not}ok 32 - argless tell after eof \$coercible\n";
eof *$fh;
$not = "not " x! (tell == 0);
print "${not}ok 33 - argless tell after eof *\$coercible\n";
seek $fh,0,0;
$not = "not " x! (tell == 0);
print "${not}ok 34 - argless tell after seek \$coercible...\n";
seek *$fh,0,0;
$not = "not " x! (tell == 0);
print "${not}ok 35 - argless tell after seek *\$coercible...\n";
@


1.1.1.14
log
@Import perl-5.20.1
@
text
@d155 3
a157 17
# The POSIX standard is vague on this point.
# Cygwin and VOS differ from other implementations.

if (tell ($tst) == 6) {
  print "ok 28\n";
}
else {
  if (($^O eq "cygwin") && (&PerlIO::get_layers($tst) eq 'stdio')) {
    print "not ok 28 # TODO: file pointer not at eof\n";
  }
  elsif ($^O eq "vos") {
    print "not ok 28 # TODO: Hit bug posix-2056. file pointer not at eof\n";
  }
  else {
    print "not ok 28 - file pointer not at eof\n";
  }
}
d159 2
@


