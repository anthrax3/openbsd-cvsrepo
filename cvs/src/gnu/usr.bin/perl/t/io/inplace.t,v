head	1.13;
access;
symbols
	OPENBSD_6_1_BASE:1.13
	OPENBSD_6_0:1.12.0.12
	OPENBSD_6_0_BASE:1.12
	OPENBSD_5_9:1.12.0.6
	OPENBSD_5_9_BASE:1.12
	OPENBSD_5_8:1.12.0.8
	OPENBSD_5_8_BASE:1.12
	PERL_5_20_2:1.1.1.10
	OPENBSD_5_7:1.12.0.2
	OPENBSD_5_7_BASE:1.12
	PERL_5_20_1:1.1.1.10
	OPENBSD_5_6:1.12.0.4
	OPENBSD_5_6_BASE:1.12
	PERL_5_18_2:1.1.1.10
	PERL:1.1.1
	OPENBSD_5_5:1.11.0.6
	OPENBSD_5_5_BASE:1.11
	OPENBSD_5_4:1.11.0.2
	OPENBSD_5_4_BASE:1.11
	PERL_5_16_3:1.1.1.9
	OPENBSD_5_3:1.10.0.10
	OPENBSD_5_3_BASE:1.10
	OPENBSD_5_2:1.10.0.8
	OPENBSD_5_2_BASE:1.10
	OPENBSD_5_1_BASE:1.10
	OPENBSD_5_1:1.10.0.6
	OPENBSD_5_0:1.10.0.4
	OPENBSD_5_0_BASE:1.10
	OPENBSD_4_9:1.10.0.2
	OPENBSD_4_9_BASE:1.10
	PERL_5_12_2:1.1.1.8
	OPENBSD_4_8:1.9.0.4
	OPENBSD_4_8_BASE:1.9
	OPENBSD_4_7:1.9.0.2
	OPENBSD_4_7_BASE:1.9
	PERL_5_10_1:1.1.1.7
	OPENBSD_4_6:1.8.0.6
	OPENBSD_4_6_BASE:1.8
	OPENBSD_4_5:1.8.0.2
	OPENBSD_4_5_BASE:1.8
	PERL_5_10_0:1.1.1.6
	OPENBSD_4_4:1.7.0.20
	OPENBSD_4_4_BASE:1.7
	OPENBSD_4_3:1.7.0.18
	OPENBSD_4_3_BASE:1.7
	OPENBSD_4_2:1.7.0.16
	OPENBSD_4_2_BASE:1.7
	OPENBSD_4_1:1.7.0.14
	OPENBSD_4_1_BASE:1.7
	OPENBSD_4_0:1.7.0.12
	OPENBSD_4_0_BASE:1.7
	PERL_5_8_8:1.1.1.5
	OPENBSD_3_9:1.7.0.10
	OPENBSD_3_9_BASE:1.7
	OPENBSD_3_8:1.7.0.8
	OPENBSD_3_8_BASE:1.7
	OPENBSD_3_7:1.7.0.6
	OPENBSD_3_7_BASE:1.7
	PERL_5_8_6:1.1.1.5
	OPENBSD_3_6:1.7.0.4
	OPENBSD_3_6_BASE:1.7
	PERL_5_8_5:1.1.1.4
	PERL_5_8_3:1.1.1.3
	OPENBSD_3_5:1.7.0.2
	OPENBSD_3_5_BASE:1.7
	PERL_5_8_2:1.1.1.3
	OPENBSD_3_4:1.6.0.4
	OPENBSD_3_4_BASE:1.6
	OPENBSD_3_3:1.6.0.2
	OPENBSD_3_3_BASE:1.6
	PERL_5_8_0:1.1.1.3
	OPENBSD_3_2:1.5.0.6
	OPENBSD_3_2_BASE:1.5
	OPENBSD_3_1:1.5.0.4
	OPENBSD_3_1_BASE:1.5
	OPENBSD_3_0:1.5.0.2
	OPENBSD_3_0_BASE:1.5
	PERL_5_6_1:1.1.1.2
	OPENBSD_2_9:1.4.0.6
	OPENBSD_2_9_BASE:1.4
	OPENBSD_2_8:1.4.0.4
	OPENBSD_2_8_BASE:1.4
	OPENBSD_2_7:1.4.0.2
	OPENBSD_2_7_BASE:1.4
	PERL_5_6_0:1.1.1.2
	OPENBSD_2_6:1.3.0.2
	OPENBSD_2_6_BASE:1.3
	PERL_500503:1.1.1.2
	CPAN:1.1.1
	OPENBSD_2_5:1.2.0.6
	OPENBSD_2_5_BASE:1.2
	OPENBSD_2_4:1.2.0.4
	OPENBSD_2_4_BASE:1.2
	OPENBSD_2_3:1.2.0.2
	OPENBSD_2_3_BASE:1.2
	OPENBSD_2_2:1.1.1.1.0.6
	OPENBSD_2_2_BASE:1.1.1.1
	OPENBSD_2_1:1.1.1.1.0.4
	OPENBSD_2_1_BASE:1.1.1.1
	OPENBSD_2_0:1.1.1.1.0.2
	OPENBSD_2_0_BASE:1.1.1.1
	perl5003:1.1.1.1
	lwall:1.1.1;
locks; strict;
comment	@# @;
expand	@o@;


1.13
date	2017.02.05.00.32.19;	author afresh1;	state Exp;
branches;
next	1.12;
commitid	cxJ08BvJA9Pt2PTM;

1.12
date	2014.03.24.15.05.33;	author afresh1;	state Exp;
branches;
next	1.11;

1.11
date	2013.03.25.20.40.59;	author sthen;	state Exp;
branches;
next	1.10;

1.10
date	2010.09.24.15.07.05;	author millert;	state Exp;
branches;
next	1.9;

1.9
date	2009.10.12.18.30.27;	author millert;	state Exp;
branches;
next	1.8;

1.8
date	2008.09.29.17.36.18;	author millert;	state Exp;
branches;
next	1.7;

1.7
date	2003.12.03.03.02.48;	author millert;	state Exp;
branches;
next	1.6;

1.6
date	2002.10.27.22.25.35;	author millert;	state Exp;
branches;
next	1.5;

1.5
date	2001.05.24.18.36.07;	author millert;	state Exp;
branches;
next	1.4;

1.4
date	2000.04.06.17.08.01;	author millert;	state Exp;
branches;
next	1.3;

1.3
date	99.04.29.22.52.28;	author millert;	state Exp;
branches;
next	1.2;

1.2
date	97.11.30.08.00.15;	author millert;	state Exp;
branches;
next	1.1;

1.1
date	96.08.19.10.13.13;	author downsj;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	96.08.19.10.13.13;	author downsj;	state Exp;
branches;
next	1.1.1.2;

1.1.1.2
date	99.04.29.22.41.21;	author millert;	state Exp;
branches;
next	1.1.1.3;

1.1.1.3
date	2002.10.27.22.15.10;	author millert;	state Exp;
branches;
next	1.1.1.4;

1.1.1.4
date	2004.08.09.17.48.31;	author millert;	state Exp;
branches;
next	1.1.1.5;

1.1.1.5
date	2005.01.15.21.18.14;	author millert;	state Exp;
branches;
next	1.1.1.6;

1.1.1.6
date	2008.09.29.17.18.58;	author millert;	state Exp;
branches;
next	1.1.1.7;

1.1.1.7
date	2009.10.12.18.10.42;	author millert;	state Exp;
branches;
next	1.1.1.8;

1.1.1.8
date	2010.09.24.14.49.19;	author millert;	state Exp;
branches;
next	1.1.1.9;

1.1.1.9
date	2013.03.25.20.09.33;	author sthen;	state Exp;
branches;
next	1.1.1.10;

1.1.1.10
date	2014.03.24.14.59.09;	author afresh1;	state Exp;
branches;
next	;


desc
@@


1.13
log
@Fix merge issues, remove excess files - match perl-5.24.1 dist
@
text
@#!./perl
use strict;
chdir 't' if -d 't';
require './test.pl';

$^I = $^O eq 'VMS' ? '_bak' : '.bak';

plan( tests => 6 );

my @@tfiles     = (tempfile(), tempfile(), tempfile());
my @@tfiles_bak = map "$_$^I", @@tfiles;

END { unlink_all(@@tfiles_bak); }

for my $file (@@tfiles) {
    runperl( prog => 'print qq(foo\n);', 
             args => ['>', $file] );
}

@@ARGV = @@tfiles;

while (<>) {
    s/foo/bar/;
}
continue {
    print;
}

is ( runperl( prog => 'print<>;', args => \@@tfiles ), 
     "bar\nbar\nbar\n", 
     "file contents properly replaced" );

is ( runperl( prog => 'print<>;', args => \@@tfiles_bak ), 
     "foo\nfoo\nfoo\n", 
     "backup file contents stay the same" );

SKIP:
{
    # based on code, dosish systems can't do no-backup inplace
    # edits
    $^O =~ /^(MSWin32|cygwin|uwin|dos|os2)$/
	and skip("Can't inplace edit without backups on $^O", 4);
    
    our @@ifiles = ( tempfile(), tempfile(), tempfile() );
    
    {
	for my $file (@@ifiles) {
	    runperl( prog => 'print qq(bar\n);',
		     args => [ '>', $file ] );
	}
	
	local $^I = '';
    local @@ARGV = @@ifiles;
	
	while (<>) {
	    print "foo$_";
	}
	
	is(scalar(@@ARGV), 0, "consumed ARGV");
	
#	runperl may quote its arguments, so don't expect to be able
#	to reuse things you send it.

	my @@my_ifiles = @@ifiles;
	is( runperl( prog => 'print<>;', args => \@@my_ifiles ),
	    "foobar\nfoobar\nfoobar\n",
	    "normal inplace edit");
    }
    
    # test * equivalence RT #70802
    {
	for my $file (@@ifiles) {
	    runperl( prog => 'print qq(bar\n);',
		     args => [ '>', $file ] );
	}
	
	local $^I = '*';
	local @@ARGV = @@ifiles;
	
	while (<>) {
	    print "foo$_";
	}
	
	is(scalar(@@ARGV), 0, "consumed ARGV");
	
	my @@my_ifiles = @@ifiles;
	is( runperl( prog => 'print<>;', args => \@@my_ifiles ),
	    "foobar\nfoobar\nfoobar\n",
	    "normal inplace edit");
    }
    
    END { unlink_all(@@ifiles); }
}
@


1.12
log
@Merge perl-5.18.2 plus local patches, remove old files

OK espie@@ sthen@@ deraadt@@
@
text
@d3 1
@


1.11
log
@merge/resolve conflicts
(some more to do after this one)
@
text
@d38 1
a38 1
    # based on code, dosish and epoc systems can't do no-backup inplace
d40 1
a40 1
    $^O =~ /^(MSWin32|cygwin|uwin|dos|epoc|os2)$/
@


1.10
log
@merge in perl 5.12.2 plus local changes
@
text
@d69 1
a69 1
    # test * equivalency RT #70802
@


1.9
log
@Merge in perl 5.10.1; part two
@
text
@d7 1
a7 1
plan( tests => 2 );
d36 57
@


1.8
log
@fix conflicts and merge in local changes to perl 5.10.0
@
text
@d9 2
a10 2
my @@tfiles     = ('.a','.b','.c');
my @@tfiles_bak = (".a$^I", ".b$^I", ".c$^I");
d12 1
a12 1
END { unlink_all('.a','.b','.c',".a$^I", ".b$^I", ".c$^I"); }
@


1.7
log
@Resolve conflicts for perl 5.8.2, remove old files, and add OpenBSD-specific scaffolding
@
text
@d2 2
d7 1
a7 1
# $RCSfile: inplace.t,v $$Revision: 4.1 $$Date: 92/08/07 18:27:29 $
d9 2
a10 1
print "1..2\n";
d12 5
a16 28
@@ARGV = ('.a','.b','.c');
if ($^O eq 'MSWin32') {
  $CAT = '.\perl -e "print<>"';
  `.\\perl -le "print 'foo'" > .a`;
  `.\\perl -le "print 'foo'" > .b`;
  `.\\perl -le "print 'foo'" > .c`;
}
elsif ($^O eq 'NetWare') {
  $CAT = 'perl -e "print<>"';
  `perl -le "print 'foo'" > .a`;
  `perl -le "print 'foo'" > .b`;
  `perl -le "print 'foo'" > .c`;
}
elsif ($^O eq 'MacOS') {
  $CAT = "$^X -e \"print<>\"";
  `$^X -le "print 'foo'" > .a`;
  `$^X -le "print 'foo'" > .b`;
  `$^X -le "print 'foo'" > .c`;
}
elsif ($^O eq 'VMS') {
  $CAT = 'MCR []perl. -e "print<>"';
  `MCR []perl. -le "print 'foo'" > ./.a`;
  `MCR []perl. -le "print 'foo'" > ./.b`;
  `MCR []perl. -le "print 'foo'" > ./.c`;
}
else {
  $CAT = 'cat';
  `echo foo | tee .a .b .c`;
d18 3
d28 7
a34 2
if (`$CAT .a .b .c` eq "bar\nbar\nbar\n") {print "ok 1\n";} else {print "not ok 1\n";}
if (`$CAT .a$^I .b$^I .c$^I` eq "foo\nfoo\nfoo\n") {print "ok 2\n";} else {print "not ok 2\n";}
a35 1
unlink '.a', '.b', '.c', ".a$^I", ".b$^I", ".c$^I";
@


1.6
log
@Resolve conflicts, remove old files, merge local changes
@
text
@@


1.5
log
@merge in perl 5.6.1 with our local changes
@
text
@d16 12
@


1.4
log
@perl-5.6.0 + local changes
@
text
@@


1.3
log
@perl5.005_03 (stock)
@
text
@@


1.2
log
@perl 5.004_04
@
text
@d3 1
a3 1
$^I = '.bak';
d16 6
d34 1
a34 1
if (`$CAT .a.bak .b.bak .c.bak` eq "foo\nfoo\nfoo\n") {print "ok 2\n";} else {print "not ok 2\n";}
d36 1
a36 1
unlink '.a', '.b', '.c', '.a.bak', '.b.bak', '.c.bak';
@


1.1
log
@Initial revision
@
text
@d10 10
a19 1
`echo foo | tee .a .b .c`;
d27 2
a28 2
if (`cat .a .b .c` eq "bar\nbar\nbar\n") {print "ok 1\n";} else {print "not ok 1\n";}
if (`cat .a.bak .b.bak .c.bak` eq "foo\nfoo\nfoo\n") {print "ok 2\n";} else {print "not ok 2\n";}
@


1.1.1.1
log
@Import of Perl 5.003 into the tree.  Makefile.bsd-wrapper and
config.sh.OpenBSD are the only local changes.
@
text
@@


1.1.1.2
log
@perl5.005_03
@
text
@d3 1
a3 1
$^I = $^O eq 'VMS' ? '_bak' : '.bak';
d10 1
a10 16
if ($^O eq 'MSWin32') {
  $CAT = '.\perl -e "print<>"';
  `.\\perl -le "print 'foo'" > .a`;
  `.\\perl -le "print 'foo'" > .b`;
  `.\\perl -le "print 'foo'" > .c`;
}
elsif ($^O eq 'VMS') {
  $CAT = 'MCR []perl. -e "print<>"';
  `MCR []perl. -le "print 'foo'" > ./.a`;
  `MCR []perl. -le "print 'foo'" > ./.b`;
  `MCR []perl. -le "print 'foo'" > ./.c`;
}
else {
  $CAT = 'cat';
  `echo foo | tee .a .b .c`;
}
d18 2
a19 2
if (`$CAT .a .b .c` eq "bar\nbar\nbar\n") {print "ok 1\n";} else {print "not ok 1\n";}
if (`$CAT .a$^I .b$^I .c$^I` eq "foo\nfoo\nfoo\n") {print "ok 2\n";} else {print "not ok 2\n";}
d21 1
a21 1
unlink '.a', '.b', '.c', ".a$^I", ".b$^I", ".c$^I";
@


1.1.1.3
log
@stock perl 5.8.0 from CPAN
@
text
@a15 12
elsif ($^O eq 'NetWare') {
  $CAT = 'perl -e "print<>"';
  `perl -le "print 'foo'" > .a`;
  `perl -le "print 'foo'" > .b`;
  `perl -le "print 'foo'" > .c`;
}
elsif ($^O eq 'MacOS') {
  $CAT = "$^X -e \"print<>\"";
  `$^X -le "print 'foo'" > .a`;
  `$^X -le "print 'foo'" > .b`;
  `$^X -le "print 'foo'" > .c`;
}
@


1.1.1.4
log
@Import of stock perl 5.8.5
@
text
@d5 1
a5 1
# $RCSfile: inplace.t,v $$Revision: 1.7 $$Date: 2003/12/03 03:02:48 $
@


1.1.1.5
log
@perl 5.8.6 from CPAN
@
text
@d5 1
a5 1
# $RCSfile: inplace.t,v $$Revision: 4.1 $$Date: 92/08/07 18:27:29 $
@


1.1.1.6
log
@import perl 5.10.0 from CPAN
@
text
@a1 2
use strict;
require './test.pl';
d5 1
a5 1
plan( tests => 2 );
d7 1
a7 2
my @@tfiles     = ('.a','.b','.c');
my @@tfiles_bak = (".a$^I", ".b$^I", ".c$^I");
d9 28
a36 5
END { unlink_all('.a','.b','.c',".a$^I", ".b$^I", ".c$^I"); }

for my $file (@@tfiles) {
    runperl( prog => 'print qq(foo\n);', 
             args => ['>', $file] );
a37 3

@@ARGV = @@tfiles;

d45 2
a46 7
is ( runperl( prog => 'print<>;', args => \@@tfiles ), 
     "bar\nbar\nbar\n", 
     "file contents properly replaced" );

is ( runperl( prog => 'print<>;', args => \@@tfiles_bak ), 
     "foo\nfoo\nfoo\n", 
     "backup file contents stay the same" );
d48 1
@


1.1.1.7
log
@import perl 5.10.1
@
text
@d9 2
a10 2
my @@tfiles     = (tempfile(), tempfile(), tempfile());
my @@tfiles_bak = map "$_$^I", @@tfiles;
d12 1
a12 1
END { unlink_all(@@tfiles_bak); }
@


1.1.1.8
log
@Perl 5.12.2 from CPAN
@
text
@d7 1
a7 1
plan( tests => 6 );
a35 57
SKIP:
{
    # based on code, dosish and epoc systems can't do no-backup inplace
    # edits
    $^O =~ /^(MSWin32|cygwin|uwin|dos|epoc|os2)$/
	and skip("Can't inplace edit without backups on $^O", 4);
    
    our @@ifiles = ( tempfile(), tempfile(), tempfile() );
    
    {
	for my $file (@@ifiles) {
	    runperl( prog => 'print qq(bar\n);',
		     args => [ '>', $file ] );
	}
	
	local $^I = '';
    local @@ARGV = @@ifiles;
	
	while (<>) {
	    print "foo$_";
	}
	
	is(scalar(@@ARGV), 0, "consumed ARGV");
	
#	runperl may quote its arguments, so don't expect to be able
#	to reuse things you send it.

	my @@my_ifiles = @@ifiles;
	is( runperl( prog => 'print<>;', args => \@@my_ifiles ),
	    "foobar\nfoobar\nfoobar\n",
	    "normal inplace edit");
    }
    
    # test * equivalency RT #70802
    {
	for my $file (@@ifiles) {
	    runperl( prog => 'print qq(bar\n);',
		     args => [ '>', $file ] );
	}
	
	local $^I = '*';
	local @@ARGV = @@ifiles;
	
	while (<>) {
	    print "foo$_";
	}
	
	is(scalar(@@ARGV), 0, "consumed ARGV");
	
	my @@my_ifiles = @@ifiles;
	is( runperl( prog => 'print<>;', args => \@@my_ifiles ),
	    "foobar\nfoobar\nfoobar\n",
	    "normal inplace edit");
    }
    
    END { unlink_all(@@ifiles); }
}
@


1.1.1.9
log
@import perl 5.16.3 from CPAN - worked on by Andrew Fresh and myself
@
text
@d69 1
a69 1
    # test * equivalence RT #70802
@


1.1.1.10
log
@Import perl-5.18.2

OK espie@@ sthen@@ deraadt@@
@
text
@d38 1
a38 1
    # based on code, dosish systems can't do no-backup inplace
d40 1
a40 1
    $^O =~ /^(MSWin32|cygwin|uwin|dos|os2)$/
@


