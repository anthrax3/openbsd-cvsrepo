head	1.1;
branch	1.1.1;
access;
symbols
	OPENBSD_6_2_BASE:1.1.1.8
	PERL_5_24_2:1.1.1.8
	OPENBSD_6_1:1.1.1.8.0.18
	OPENBSD_6_1_BASE:1.1.1.8
	OPENBSD_6_0:1.1.1.8.0.16
	OPENBSD_6_0_BASE:1.1.1.8
	OPENBSD_5_9:1.1.1.8.0.10
	OPENBSD_5_9_BASE:1.1.1.8
	OPENBSD_5_8:1.1.1.8.0.12
	OPENBSD_5_8_BASE:1.1.1.8
	PERL_5_20_2:1.1.1.8
	OPENBSD_5_7:1.1.1.8.0.4
	OPENBSD_5_7_BASE:1.1.1.8
	PERL_5_20_1:1.1.1.8
	OPENBSD_5_6:1.1.1.8.0.8
	OPENBSD_5_6_BASE:1.1.1.8
	PERL_5_18_2:1.1.1.8
	PERL:1.1.1
	OPENBSD_5_5:1.1.1.8.0.6
	OPENBSD_5_5_BASE:1.1.1.8
	OPENBSD_5_4:1.1.1.8.0.2
	OPENBSD_5_4_BASE:1.1.1.8
	PERL_5_16_3:1.1.1.8
	OPENBSD_5_3:1.1.1.7.0.10
	OPENBSD_5_3_BASE:1.1.1.7
	OPENBSD_5_2:1.1.1.7.0.8
	OPENBSD_5_2_BASE:1.1.1.7
	OPENBSD_5_1_BASE:1.1.1.7
	OPENBSD_5_1:1.1.1.7.0.6
	OPENBSD_5_0:1.1.1.7.0.4
	OPENBSD_5_0_BASE:1.1.1.7
	OPENBSD_4_9:1.1.1.7.0.2
	OPENBSD_4_9_BASE:1.1.1.7
	PERL_5_12_2:1.1.1.7
	OPENBSD_4_8:1.1.1.6.0.4
	OPENBSD_4_8_BASE:1.1.1.6
	OPENBSD_4_7:1.1.1.6.0.2
	OPENBSD_4_7_BASE:1.1.1.6
	PERL_5_10_1:1.1.1.6
	OPENBSD_4_6:1.1.1.5.0.6
	OPENBSD_4_6_BASE:1.1.1.5
	OPENBSD_4_5:1.1.1.5.0.2
	OPENBSD_4_5_BASE:1.1.1.5
	PERL_5_10_0:1.1.1.5
	OPENBSD_4_4:1.1.1.4.0.10
	OPENBSD_4_4_BASE:1.1.1.4
	OPENBSD_4_3:1.1.1.4.0.8
	OPENBSD_4_3_BASE:1.1.1.4
	OPENBSD_4_2:1.1.1.4.0.6
	OPENBSD_4_2_BASE:1.1.1.4
	OPENBSD_4_1:1.1.1.4.0.4
	OPENBSD_4_1_BASE:1.1.1.4
	OPENBSD_4_0:1.1.1.4.0.2
	OPENBSD_4_0_BASE:1.1.1.4
	PERL_5_8_8:1.1.1.4
	OPENBSD_3_9:1.1.1.3.0.6
	OPENBSD_3_9_BASE:1.1.1.3
	OPENBSD_3_8:1.1.1.3.0.4
	OPENBSD_3_8_BASE:1.1.1.3
	OPENBSD_3_7:1.1.1.3.0.2
	OPENBSD_3_7_BASE:1.1.1.3
	PERL_5_8_6:1.1.1.3
	OPENBSD_3_6:1.1.1.2.0.2
	OPENBSD_3_6_BASE:1.1.1.2
	PERL_5_8_5:1.1.1.2
	PERL_5_8_3:1.1.1.1
	OPENBSD_3_5:1.1.1.1.0.2
	OPENBSD_3_5_BASE:1.1.1.1
	PERL_5_8_2:1.1.1.1
	CPAN:1.1.1;
locks; strict;
comment	@# @;
expand	@o@;


1.1
date	2003.12.03.02.44.30;	author millert;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	2003.12.03.02.44.30;	author millert;	state Exp;
branches;
next	1.1.1.2;

1.1.1.2
date	2004.08.09.17.48.32;	author millert;	state Exp;
branches;
next	1.1.1.3;

1.1.1.3
date	2005.01.15.21.18.14;	author millert;	state Exp;
branches;
next	1.1.1.4;

1.1.1.4
date	2006.03.28.18.49.41;	author millert;	state Exp;
branches;
next	1.1.1.5;

1.1.1.5
date	2008.09.29.17.18.58;	author millert;	state Exp;
branches;
next	1.1.1.6;

1.1.1.6
date	2009.10.12.18.10.42;	author millert;	state Exp;
branches;
next	1.1.1.7;

1.1.1.7
date	2010.09.24.14.49.19;	author millert;	state Exp;
branches;
next	1.1.1.8;

1.1.1.8
date	2013.03.25.20.09.33;	author sthen;	state Exp;
branches;
next	;


desc
@@


1.1
log
@Initial revision
@
text
@#!./perl

my $PERLIO;

BEGIN {
    chdir 't' if -d 't';
    @@INC = '../lib';
    require './test.pl';
    unless (find PerlIO::Layer 'perlio') {
	print "1..0 # Skip: not perlio\n";
	exit 0;
    }
    eval 'use Encode';
    if ($@@ =~ /dynamic loading not available/) {
        print "1..0 # miniperl cannot load Encode\n";
	exit 0;
    }
    # Makes testing easier.
    $ENV{PERLIO} = 'stdio' if exists $ENV{PERLIO} && $ENV{PERLIO} eq '';
    if (exists $ENV{PERLIO} && $ENV{PERLIO} !~ /^(stdio|perlio|mmap)$/) {
	# We are not prepared for anything else.
	print "1..0 # PERLIO='$ENV{PERLIO}' unknown\n";
	exit 0;
    }
    $PERLIO = exists $ENV{PERLIO} ? $ENV{PERLIO} : "(undef)";
}

use Config;

my $DOSISH    = $^O =~ /^(?:MSWin32|os2|dos|NetWare|mint)$/ ? 1 : 0;
   $DOSISH    = 1 if !$DOSISH and $^O =~ /^uwin/;
my $NONSTDIO  = exists $ENV{PERLIO} && $ENV{PERLIO} ne 'stdio'     ? 1 : 0;
my $FASTSTDIO = $Config{d_faststdio} && $Config{usefaststdio}      ? 1 : 0;

my $NTEST = 43 - (($DOSISH || !$FASTSTDIO) ? 7 : 0) - ($DOSISH ? 5 : 0);

plan tests => $NTEST;

print <<__EOH__;
# PERLIO    = $PERLIO
# DOSISH    = $DOSISH
# NONSTDIO  = $NONSTDIO
# FASTSTDIO = $FASTSTDIO
__EOH__

SKIP: {
    skip("This perl does not have Encode", $NTEST)
	unless " $Config{extensions} " =~ / Encode /;

    sub check {
	my ($result, $expected, $id) = @@_;
	# An interesting dance follows where we try to make the following
	# IO layer stack setups to compare equal:
	#
	# PERLIO     UNIX-like                   DOS-like
	#
	# unset / "" unix perlio / stdio [1]     unix crlf
	# stdio      unix perlio / stdio [1]     stdio
	# perlio     unix perlio                 unix perlio
	# mmap       unix mmap                   unix mmap
	#
	# [1] "stdio" if Configure found out how to do "fast stdio" (depends
	# on the stdio implementation) and in Perl 5.8, otherwise "unix perlio"
	#
	if ($NONSTDIO) {
	    # Get rid of "unix".
	    shift @@$result if $result->[0] eq "unix";
	    # Change expectations.
	    if ($FASTSTDIO) {
		$expected->[0] = $ENV{PERLIO};
	    } else {
		$expected->[0] = $ENV{PERLIO} if $expected->[0] eq "stdio";
	    }
	} elsif (!$FASTSTDIO && !$DOSISH) {
	    splice(@@$result, 0, 2, "stdio")
		if @@$result >= 2 &&
		   $result->[0] eq "unix" &&
		   $result->[1] eq "perlio";
	} elsif ($DOSISH) {
	    splice(@@$result, 0, 2, "stdio")
		if @@$result >= 2 &&
		   $result->[0] eq "unix" &&
		   $result->[1] eq "crlf";
	}
	if ($DOSISH && grep { $_ eq 'crlf' } @@$expected) {
	    # 5 tests potentially skipped because
	    # DOSISH systems already have a CRLF layer
	    # which will make new ones not stick.
	    @@$expected = grep { $_ ne 'crlf' } @@$expected;
	}
	my $n = scalar @@$expected;
	is($n, scalar @@$expected, "$id - layers == $n");
	for (my $i = 0; $i < $n; $i++) {
	    my $j = $expected->[$i];
	    if (ref $j eq 'CODE') {
		ok($j->($result->[$i]), "$id - $i is ok");
	    } else {
		is($result->[$i], $j,
		   sprintf("$id - $i is %s",
			   defined $j ? $j : "undef"));
	    }
	}
    }

    check([ PerlIO::get_layers(STDIN) ],
	  [ "stdio" ],
	  "STDIN");

    open(F, ">:crlf", "afile");

    check([ PerlIO::get_layers(F) ],
	  [ qw(stdio crlf) ],
	  "open :crlf");

    binmode(F, ":encoding(sjis)"); # "sjis" will be canonized to "shiftjis"

    check([ PerlIO::get_layers(F) ],
	  [ qw[stdio crlf encoding(shiftjis) utf8] ],
	  ":encoding(sjis)");
    
    binmode(F, ":pop");

    check([ PerlIO::get_layers(F) ],
	  [ qw(stdio crlf) ],
	  ":pop");

    binmode(F, ":raw");

    check([ PerlIO::get_layers(F) ],
	  [ "stdio" ],
	  ":raw");

    binmode(F, ":utf8");

    check([ PerlIO::get_layers(F) ],
	  [ qw(stdio utf8) ],
	  ":utf8");

    binmode(F, ":bytes");

    check([ PerlIO::get_layers(F) ],
	  [ "stdio" ],
	  ":bytes");

    binmode(F, ":encoding(utf8)");

    check([ PerlIO::get_layers(F) ],
	    [ qw[stdio encoding(utf8) utf8] ],
	    ":encoding(utf8)");

    binmode(F, ":raw :crlf");

    check([ PerlIO::get_layers(F) ],
	  [ qw(stdio crlf) ],
	  ":raw:crlf");

    binmode(F, ":raw :encoding(latin1)"); # "latin1" will be canonized

    # 7 tests potentially skipped.
    unless ($DOSISH || !$FASTSTDIO) {
	my @@results = PerlIO::get_layers(F, details => 1);

	# Get rid of the args and the flags.
	splice(@@results, 1, 2) if $NONSTDIO;

	check([ @@results ],
	      [ "stdio",    undef,        sub { $_[0] > 0 },
		"encoding", "iso-8859-1", sub { $_[0] & PerlIO::F_UTF8() } ],
	      ":raw:encoding(latin1)");
    }

    binmode(F);

    check([ PerlIO::get_layers(F) ],
	  [ "stdio" ],
	  "binmode");

    close F;

    {
	use open(IN => ":crlf", OUT => ":encoding(cp1252)");

	open F, "<afile";
	open G, ">afile";

	check([ PerlIO::get_layers(F, input  => 1) ],
	      [ qw(stdio crlf) ],
	      "use open IN");
	
	check([ PerlIO::get_layers(G, output => 1) ],
	      [ qw[stdio encoding(cp1252) utf8] ],
	      "use open OUT");

	close F;
	close G;
    }

    1 while unlink "afile";
}
@


1.1.1.1
log
@perl 5.8.2 from CPAN
@
text
@@


1.1.1.2
log
@Import of stock perl 5.8.5
@
text
@a46 1
    # FIXME - more of these could be tested without Encode or full perl
a48 1
    skip("miniperl does not have Encode", $NTEST) if $ENV{PERL_CORE_MINITEST};
@


1.1.1.3
log
@perl 5.8.6 from CPAN
@
text
@a36 2
sub PerlIO::F_UTF8 () { 0x00008000 } # from perliol.h

@


1.1.1.4
log
@perl 5.8.8 import
@
text
@d34 2
a35 14
my $UNICODE_STDIN;
if (${^UNICODE} & 1) {
    if (${^UNICODE} & 64) {
	# Conditional on the locale
	$UNICODE_STDIN = ${^UTF8LOCALE};
    } else {
	# Unconditional
	$UNICODE_STDIN = 1;
    }
} else {
    $UNICODE_STDIN = 0;
}
my $NTEST = 44 - (($DOSISH || !$FASTSTDIO) ? 7 : 0) - ($DOSISH ? 5 : 0)
    + $UNICODE_STDIN;
d42 4
a45 7
# PERLIO        = $PERLIO
# DOSISH        = $DOSISH
# NONSTDIO      = $NONSTDIO
# FASTSTDIO     = $FASTSTDIO
# UNICODE       = ${^UNICODE}
# UTF8LOCALE    = ${^UTF8LOCALE}
# UNICODE_STDIN = $UNICODE_STDIN
d96 1
a96 1
	is(scalar @@$result, $n, "$id - layers == $n");
d110 1
a110 1
	  $UNICODE_STDIN ? [ "stdio", "utf8" ] : [ "stdio" ],
a200 7

    # Check that PL_sigwarn's reference count is correct, and that 
    # &PerlIO::Layer::NoWarnings isn't prematurely freed.
    fresh_perl_like (<<'EOT', qr/^CODE/);
open(UTF, "<:raw:encoding(utf8)", "afile") or die $!;
print ref *PerlIO::Layer::NoWarnings{CODE};
EOT
@


1.1.1.5
log
@import perl 5.10.0 from CPAN
@
text
@d34 1
a34 1
my $UTF8_STDIN;
d38 1
a38 1
	$UTF8_STDIN = ${^UTF8LOCALE};
d41 1
a41 1
	$UTF8_STDIN = 1;
d44 1
a44 1
    $UTF8_STDIN = 0;
d47 1
a47 1
    + $UTF8_STDIN;
d60 1
a60 1
# UTF8_STDIN = $UTF8_STDIN
d125 1
a125 1
	  $UTF8_STDIN ? [ "stdio", "utf8" ] : [ "stdio" ],
d134 1
a134 1
    binmode(F, ":encoding(cp1047)"); 
d137 2
a138 2
	  [ qw[stdio crlf encoding(cp1047) utf8] ],
	  ":encoding(cp1047)");
@


1.1.1.6
log
@import perl 5.10.1
@
text
@d128 1
a128 2
    my $afile = tempfile();
    open(F, ">:crlf", $afile);
d202 2
a203 2
	open F, '<', $afile;
	open G, '>', $afile;
d219 2
a220 2
    fresh_perl_like (<<"EOT", qr/^CODE/);
open(UTF, "<:raw:encoding(utf8)", '$afile') or die \$!;
d223 2
@


1.1.1.7
log
@Perl 5.12.2 from CPAN
@
text
@d30 1
a30 1
my $DOSISH    = $^O =~ /^(?:MSWin32|os2|dos|NetWare)$/ ? 1 : 0;
@


1.1.1.8
log
@import perl 5.16.3 from CPAN - worked on by Andrew Fresh and myself
@
text
@d9 9
a17 4
    skip_all_without_perlio();
    # FIXME - more of these could be tested without Encode or full perl
    skip_all_without_dynamic_extension('Encode');

d20 5
a24 2
    skip_all("PERLIO='$ENV{PERLIO}' unknown")
	if exists $ENV{PERLIO} && $ENV{PERLIO} !~ /^(stdio|perlio|mmap)$/;
d46 1
a46 1
my $NTEST = 60 - (($DOSISH || !$FASTSTDIO) ? 7 : 0) - ($DOSISH ? 7 : 0)
d63 6
a68 1
{
d108 1
a108 1
	    splice @@$expected, 1, 1 if $expected->[1] eq 'crlf';
a134 6
    binmode(F, ":crlf");

    check([ PerlIO::get_layers(F) ],
	  [ qw(stdio crlf) ],
	  "binmode :crlf");

a139 6

    binmode(F, ":crlf");

    check([ PerlIO::get_layers(F) ],
	  [ qw[stdio crlf encoding(cp1047) utf8 crlf utf8] ],
	  ":encoding(cp1047):crlf");
d141 1
a141 1
    binmode(F, ":pop:pop");
a197 7
    # RT78844
    {
        local $@@ = "foo";
        binmode(F, ":encoding(utf8)");
        is( $@@, "foo", '$@@ not clobbered by binmode and :encoding');
    }

a223 23

    # [perl #97956] Not calling FETCH all the time on tied variables
    my $f;
    sub TIESCALAR { bless [] }
    sub FETCH { ++$f; $_[0][0] = $_[1] }
    sub STORE { $_[0][0] }
    tie my $t, "";
    $t = *f;
    $f = 0; PerlIO::get_layers $t;
    is $f, 1, '1 fetch on tied glob';
    $t = \*f;
    $f = 0; PerlIO::get_layers $t;
    is $f, 1, '1 fetch on tied globref';
    $t = *f;
    $f = 0; PerlIO::get_layers \$t;
    is $f, 1, '1 fetch on referenced tied glob';
    $t = '';
    $f = 0; PerlIO::get_layers $t;
    is $f, 1, '1 fetch on tied string';

    # No distinction between nums and strings
    open "12", "<:crlf", "test.pl" or die "$0 cannot open test.pl: $!";
    ok PerlIO::get_layers(12), 'str/num arguments are treated identically';
@


