head	1.2;
access;
symbols
	OPENBSD_6_2_BASE:1.2
	PERL_5_24_2:1.1.1.9
	OPENBSD_6_1:1.2.0.4
	OPENBSD_6_1_BASE:1.2
	OPENBSD_6_0:1.1.1.8.0.10
	OPENBSD_6_0_BASE:1.1.1.8
	OPENBSD_5_9:1.1.1.8.0.4
	OPENBSD_5_9_BASE:1.1.1.8
	OPENBSD_5_8:1.1.1.8.0.6
	OPENBSD_5_8_BASE:1.1.1.8
	PERL_5_20_2:1.1.1.8
	OPENBSD_5_7:1.1.1.8.0.2
	OPENBSD_5_7_BASE:1.1.1.8
	PERL_5_20_1:1.1.1.8
	OPENBSD_5_6:1.1.1.7.0.4
	OPENBSD_5_6_BASE:1.1.1.7
	PERL_5_18_2:1.1.1.7
	PERL:1.1.1
	OPENBSD_5_5:1.1.1.6.0.6
	OPENBSD_5_5_BASE:1.1.1.6
	OPENBSD_5_4:1.1.1.6.0.2
	OPENBSD_5_4_BASE:1.1.1.6
	PERL_5_16_3:1.1.1.6
	OPENBSD_5_3:1.1.1.5.0.14
	OPENBSD_5_3_BASE:1.1.1.5
	OPENBSD_5_2:1.1.1.5.0.12
	OPENBSD_5_2_BASE:1.1.1.5
	OPENBSD_5_1_BASE:1.1.1.5
	OPENBSD_5_1:1.1.1.5.0.10
	OPENBSD_5_0:1.1.1.5.0.8
	OPENBSD_5_0_BASE:1.1.1.5
	OPENBSD_4_9:1.1.1.5.0.6
	OPENBSD_4_9_BASE:1.1.1.5
	PERL_5_12_2:1.1.1.5
	OPENBSD_4_8:1.1.1.5.0.4
	OPENBSD_4_8_BASE:1.1.1.5
	OPENBSD_4_7:1.1.1.5.0.2
	OPENBSD_4_7_BASE:1.1.1.5
	PERL_5_10_1:1.1.1.5
	OPENBSD_4_6:1.1.1.4.0.16
	OPENBSD_4_6_BASE:1.1.1.4
	OPENBSD_4_5:1.1.1.4.0.12
	OPENBSD_4_5_BASE:1.1.1.4
	PERL_5_10_0:1.1.1.4
	OPENBSD_4_4:1.1.1.4.0.10
	OPENBSD_4_4_BASE:1.1.1.4
	OPENBSD_4_3:1.1.1.4.0.8
	OPENBSD_4_3_BASE:1.1.1.4
	OPENBSD_4_2:1.1.1.4.0.6
	OPENBSD_4_2_BASE:1.1.1.4
	OPENBSD_4_1:1.1.1.4.0.4
	OPENBSD_4_1_BASE:1.1.1.4
	OPENBSD_4_0:1.1.1.4.0.2
	OPENBSD_4_0_BASE:1.1.1.4
	PERL_5_8_8:1.1.1.4
	OPENBSD_3_9:1.1.1.3.0.8
	OPENBSD_3_9_BASE:1.1.1.3
	OPENBSD_3_8:1.1.1.3.0.6
	OPENBSD_3_8_BASE:1.1.1.3
	OPENBSD_3_7:1.1.1.3.0.4
	OPENBSD_3_7_BASE:1.1.1.3
	PERL_5_8_6:1.1.1.3
	OPENBSD_3_6:1.1.1.3.0.2
	OPENBSD_3_6_BASE:1.1.1.3
	PERL_5_8_5:1.1.1.3
	PERL_5_8_3:1.1.1.2
	OPENBSD_3_5:1.1.1.2.0.2
	OPENBSD_3_5_BASE:1.1.1.2
	PERL_5_8_2:1.1.1.2
	OPENBSD_3_4:1.1.1.1.0.4
	OPENBSD_3_4_BASE:1.1.1.1
	OPENBSD_3_3:1.1.1.1.0.2
	OPENBSD_3_3_BASE:1.1.1.1
	PERL_5_8_0:1.1.1.1
	CPAN:1.1.1;
locks; strict;
comment	@# @;
expand	@o@;


1.2
date	2017.02.05.00.32.19;	author afresh1;	state Exp;
branches;
next	1.1;
commitid	cxJ08BvJA9Pt2PTM;

1.1
date	2002.10.27.22.15.10;	author millert;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	2002.10.27.22.15.10;	author millert;	state Exp;
branches;
next	1.1.1.2;

1.1.1.2
date	2003.12.03.02.44.29;	author millert;	state Exp;
branches;
next	1.1.1.3;

1.1.1.3
date	2004.08.09.17.48.31;	author millert;	state Exp;
branches;
next	1.1.1.4;

1.1.1.4
date	2006.03.28.18.49.41;	author millert;	state Exp;
branches;
next	1.1.1.5;

1.1.1.5
date	2009.10.12.18.10.42;	author millert;	state Exp;
branches;
next	1.1.1.6;

1.1.1.6
date	2013.03.25.20.09.33;	author sthen;	state Exp;
branches;
next	1.1.1.7;

1.1.1.7
date	2014.03.24.14.59.09;	author afresh1;	state Exp;
branches;
next	1.1.1.8;

1.1.1.8
date	2014.11.17.20.53.17;	author afresh1;	state Exp;
branches;
next	1.1.1.9;
commitid	B31cAbBIXiCqnL97;

1.1.1.9
date	2017.08.14.13.46.22;	author afresh1;	state Exp;
branches;
next	;
commitid	fAzrs78vdW2Yfc6A;


desc
@@


1.2
log
@Fix merge issues, remove excess files - match perl-5.24.1 dist
@
text
@#!./perl -w

BEGIN {
    chdir 't' if -d 't';
    @@INC = qw(. ../lib);
    require "./test.pl"; require "charset_tools.pl";
    skip_all_without_perlio();
}

use Config;


my $file = tempfile();
my $crlf = uni_to_native("\015\012");
my $crcr = uni_to_native("\x0d\x0d");

my $ungetc_count = 8200;    # Somewhat over the likely buffer size

{
    plan(tests => 16 + 2 * $ungetc_count);
    ok(open(FOO,">:crlf",$file));
    ok(print FOO 'a'.((('a' x 14).qq{\n}) x 2000) || close(FOO));
    ok(open(FOO,"<:crlf",$file));

    my $text;
    { local $/; $text = <FOO> }
    is(count_chars($text, $crlf), 0);
    is(count_chars($text, "\n"), 2000);

    binmode(FOO);
    seek(FOO,0,0);
    { local $/; $text = <FOO> }
    is(count_chars($text, $crlf), 2000);

    SKIP:
    {
	skip_if_miniperl("miniperl can't rely on loading PerlIO::scalar",
			  2 * $ungetc_count + 1);
	skip("no PerlIO::scalar", 2 * $ungetc_count + 1)
	    unless $Config{extensions} =~ m!\bPerlIO/scalar\b!;
	require PerlIO::scalar;
	my $fcontents = join "", map {"$_$crlf"} "a".."zzz";
	open my $fh, "<:crlf", \$fcontents;
	local $/ = "xxx";
	local $_ = <$fh>;
	my $pos = tell $fh; # pos must be behind "xxx", before "\nxxy\n"
	seek $fh, $pos, 0;
	$/ = "\n";
	$s = <$fh>.<$fh>;
	is($s, "\nxxy\n");

        for my $i (0 .. $ungetc_count - 1) {
            my $j = $i % 256;
            is($fh->ungetc($j), $j, "ungetc of $j returns itself");
        }

        for (my $i = $ungetc_count - 1; $i >= 0; $i--) {
            my $j = $i % 256;
            is(ord($fh->getc()), $j, "getc gets back $j");
        }
    }

    ok(close(FOO));

    # binmode :crlf should not cumulate.
    # Try it first once and then twice so that even UNIXy boxes
    # get to exercise this, for DOSish boxes even once is enough.
    # Try also pushing :utf8 first so that there are other layers
    # in between (this should not matter: CRLF layers still should
    # not accumulate).
    for my $utf8 ('', ':utf8') {
	for my $binmode (1..2) {
	    open(FOO, ">$file");
	    # require PerlIO; print PerlIO::get_layers(FOO), "\n";
	    binmode(FOO, "$utf8:crlf") for 1..$binmode;
	    # require PerlIO; print PerlIO::get_layers(FOO), "\n";
	    print FOO "Hello\n";
	    close FOO;
	    open(FOO, "<$file");
	    binmode(FOO);
	    my $foo = scalar <FOO>;
	    close FOO;
	    print join(" ", "#", map { sprintf("%02x", $_) } unpack("C*", $foo)),
	    "\n";
	    like($foo, qr/$crlf$/);
	    unlike($foo, qr/$crcr/);
	}
    }
}

sub count_chars {
    my($text, $chars) = @@_;
    my $seen = 0;
    $seen++ while $text =~ /$chars/g;
    return $seen;
}
@


1.1
log
@Initial revision
@
text
@d6 2
a11 1
require "test.pl";
d13 76
a88 25
my $file = "crlf$$.dat";
END {
 unlink($file);
}

if (find PerlIO::Layer 'perlio') {
 plan(tests => 7);
 ok(open(FOO,">:crlf",$file));
 ok(print FOO 'a'.((('a' x 14).qq{\n}) x 2000) || close(FOO));
 ok(open(FOO,"<:crlf",$file));

 my $text;
 { local $/; $text = <FOO> }
 is(count_chars($text, "\015\012"), 0);
 is(count_chars($text, "\n"), 2000);

 binmode(FOO);
 seek(FOO,0,0);
 { local $/; $text = <FOO> }
 is(count_chars($text, "\015\012"), 2000);

 ok(close(FOO));
}
else {
 skip_all("No perlio, so no :crlf");
d92 4
a95 4
  my($text, $chars) = @@_;
  my $seen = 0;
  $seen++ while $text =~ /$chars/g;
  return $seen;
@


1.1.1.1
log
@stock perl 5.8.0 from CPAN
@
text
@@


1.1.1.2
log
@perl 5.8.2 from CPAN
@
text
@d14 1
a14 1
    1 while unlink($file);
d18 1
a18 1
 plan(tests => 16);
a32 16
 SKIP:
 {
  eval 'use PerlIO::scalar';
  skip(q/miniperl cannnot load PerlIO::scalar/)
      if $@@ =~ /dynamic loading not available/;
  my $fcontents = join "", map {"$_\015\012"} "a".."zzz";
  open my $fh, "<:crlf", \$fcontents;
  local $/ = "xxx";
  local $_ = <$fh>;
  my $pos = tell $fh; # pos must be behind "xxx", before "\nyyy\n"
  seek $fh, $pos, 0;
  $/ = "\n";
  $s = <$fh>.<$fh>;
  ok($s eq "\nxxy\n");
 }

a33 25

 # binmode :crlf should not cumulate.
 # Try it first once and then twice so that even UNIXy boxes
 # get to exercise this, for DOSish boxes even once is enough.
 # Try also pushing :utf8 first so that there are other layers
 # in between (this should not matter: CRLF layers still should
 # not accumulate).
 for my $utf8 ('', ':utf8') {
     for my $binmode (1..2) {
	 open(FOO, ">$file");
	 # require PerlIO; print PerlIO::get_layers(FOO), "\n";
	 binmode(FOO, "$utf8:crlf") for 1..$binmode;
	 # require PerlIO; print PerlIO::get_layers(FOO), "\n";
	 print FOO "Hello\n";
	 close FOO;
	 open(FOO, "<$file");
	 binmode(FOO);
	 my $foo = scalar <FOO>;
	 close FOO;
	 print join(" ", "#", map { sprintf("%02x", $_) } unpack("C*", $foo)),
	       "\n";
	 ok($foo =~ /\x0d\x0a$/);
	 ok($foo !~ /\x0d\x0d/);
     }
 }
@


1.1.1.3
log
@Import of stock perl 5.8.5
@
text
@d35 3
a37 4
  skip("miniperl can't rely on loading PerlIO::scalar")
      if $ENV{PERL_CORE_MINITEST};
  skip("no PerlIO::scalar") unless $Config{extensions} =~ m!\bPerlIO/scalar\b!;
  require PerlIO::scalar;
@


1.1.1.4
log
@perl 5.8.8 import
@
text
@d18 58
a75 58
    plan(tests => 16);
    ok(open(FOO,">:crlf",$file));
    ok(print FOO 'a'.((('a' x 14).qq{\n}) x 2000) || close(FOO));
    ok(open(FOO,"<:crlf",$file));

    my $text;
    { local $/; $text = <FOO> }
    is(count_chars($text, "\015\012"), 0);
    is(count_chars($text, "\n"), 2000);

    binmode(FOO);
    seek(FOO,0,0);
    { local $/; $text = <FOO> }
    is(count_chars($text, "\015\012"), 2000);

    SKIP:
    {
	skip("miniperl can't rely on loading PerlIO::scalar")
	if $ENV{PERL_CORE_MINITEST};
	skip("no PerlIO::scalar") unless $Config{extensions} =~ m!\bPerlIO/scalar\b!;
	require PerlIO::scalar;
	my $fcontents = join "", map {"$_\015\012"} "a".."zzz";
	open my $fh, "<:crlf", \$fcontents;
	local $/ = "xxx";
	local $_ = <$fh>;
	my $pos = tell $fh; # pos must be behind "xxx", before "\nxxy\n"
	seek $fh, $pos, 0;
	$/ = "\n";
	$s = <$fh>.<$fh>;
	ok($s eq "\nxxy\n");
    }

    ok(close(FOO));

    # binmode :crlf should not cumulate.
    # Try it first once and then twice so that even UNIXy boxes
    # get to exercise this, for DOSish boxes even once is enough.
    # Try also pushing :utf8 first so that there are other layers
    # in between (this should not matter: CRLF layers still should
    # not accumulate).
    for my $utf8 ('', ':utf8') {
	for my $binmode (1..2) {
	    open(FOO, ">$file");
	    # require PerlIO; print PerlIO::get_layers(FOO), "\n";
	    binmode(FOO, "$utf8:crlf") for 1..$binmode;
	    # require PerlIO; print PerlIO::get_layers(FOO), "\n";
	    print FOO "Hello\n";
	    close FOO;
	    open(FOO, "<$file");
	    binmode(FOO);
	    my $foo = scalar <FOO>;
	    close FOO;
	    print join(" ", "#", map { sprintf("%02x", $_) } unpack("C*", $foo)),
	    "\n";
	    ok($foo =~ /\x0d\x0a$/);
	    ok($foo !~ /\x0d\x0d/);
	}
    }
d78 1
a78 1
    skip_all("No perlio, so no :crlf");
d82 4
a85 4
    my($text, $chars) = @@_;
    my $seen = 0;
    $seen++ while $text =~ /$chars/g;
    return $seen;
@


1.1.1.5
log
@import perl 5.10.1
@
text
@d12 4
a15 1
my $file = tempfile();
@


1.1.1.6
log
@import perl 5.16.3 from CPAN - worked on by Andrew Fresh and myself
@
text
@a5 2
    require "test.pl";
    skip_all_without_perlio();
d10 1
d14 1
a14 1
{
d32 2
a33 1
	skip_if_miniperl("miniperl can't rely on loading PerlIO::scalar");
d44 1
a44 1
	is($s, "\nxxy\n");
d69 2
a70 2
	    like($foo, qr/\x0d\x0a$/);
	    unlike($foo, qr/\x0d\x0d/);
d73 3
@


1.1.1.7
log
@Import perl-5.18.2

OK espie@@ sthen@@ deraadt@@
@
text
@a14 2
my $ungetc_count = 8200;    # Somewhat over the likely buffer size

d16 1
a16 1
    plan(tests => 16 + 2 * $ungetc_count);
a44 10

        for my $i (0 .. $ungetc_count - 1) {
            my $j = $i % 256;
            is($fh->ungetc($j), $j, "ungetc of $j returns itself");
        }

        for (my $i = $ungetc_count - 1; $i >= 0; $i--) {
            my $j = $i % 256;
            is(ord($fh->getc()), $j, "getc gets back $j");
        }
@


1.1.1.8
log
@Import perl-5.20.1
@
text
@d35 2
a36 4
	skip_if_miniperl("miniperl can't rely on loading PerlIO::scalar",
			  2 * $ungetc_count + 1);
	skip("no PerlIO::scalar", 2 * $ungetc_count + 1)
	    unless $Config{extensions} =~ m!\bPerlIO/scalar\b!;
@


1.1.1.9
log
@Import perl-5.24.2
@
text
@d6 1
a6 1
    require "./test.pl"; require "charset_tools.pl";
a13 2
my $crlf = uni_to_native("\015\012");
my $crcr = uni_to_native("\x0d\x0d");
d25 1
a25 1
    is(count_chars($text, $crlf), 0);
d31 1
a31 1
    is(count_chars($text, $crlf), 2000);
d40 1
a40 1
	my $fcontents = join "", map {"$_$crlf"} "a".."zzz";
d83 2
a84 2
	    like($foo, qr/$crlf$/);
	    unlike($foo, qr/$crcr/);
@


