head	1.2;
access;
symbols
	OPENBSD_6_1_BASE:1.2
	OPENBSD_6_0:1.1.1.3.0.16
	OPENBSD_6_0_BASE:1.1.1.3
	OPENBSD_5_9:1.1.1.3.0.10
	OPENBSD_5_9_BASE:1.1.1.3
	OPENBSD_5_8:1.1.1.3.0.12
	OPENBSD_5_8_BASE:1.1.1.3
	PERL_5_20_2:1.1.1.3
	OPENBSD_5_7:1.1.1.3.0.4
	OPENBSD_5_7_BASE:1.1.1.3
	PERL_5_20_1:1.1.1.3
	OPENBSD_5_6:1.1.1.3.0.8
	OPENBSD_5_6_BASE:1.1.1.3
	PERL_5_18_2:1.1.1.3
	PERL:1.1.1
	OPENBSD_5_5:1.1.1.3.0.6
	OPENBSD_5_5_BASE:1.1.1.3
	OPENBSD_5_4:1.1.1.3.0.2
	OPENBSD_5_4_BASE:1.1.1.3
	PERL_5_16_3:1.1.1.3
	OPENBSD_5_3:1.1.1.2.0.14
	OPENBSD_5_3_BASE:1.1.1.2
	OPENBSD_5_2:1.1.1.2.0.12
	OPENBSD_5_2_BASE:1.1.1.2
	OPENBSD_5_1_BASE:1.1.1.2
	OPENBSD_5_1:1.1.1.2.0.10
	OPENBSD_5_0:1.1.1.2.0.8
	OPENBSD_5_0_BASE:1.1.1.2
	OPENBSD_4_9:1.1.1.2.0.6
	OPENBSD_4_9_BASE:1.1.1.2
	PERL_5_12_2:1.1.1.2
	OPENBSD_4_8:1.1.1.2.0.4
	OPENBSD_4_8_BASE:1.1.1.2
	OPENBSD_4_7:1.1.1.2.0.2
	OPENBSD_4_7_BASE:1.1.1.2
	PERL_5_10_1:1.1.1.2
	OPENBSD_4_6:1.1.1.1.0.6
	OPENBSD_4_6_BASE:1.1.1.1
	OPENBSD_4_5:1.1.1.1.0.2
	OPENBSD_4_5_BASE:1.1.1.1
	PERL_5_10_0:1.1.1.1
	CPAN:1.1.1;
locks; strict;
comment	@# @;
expand	@o@;


1.2
date	2017.02.05.00.32.20;	author afresh1;	state Exp;
branches;
next	1.1;
commitid	cxJ08BvJA9Pt2PTM;

1.1
date	2008.09.29.17.19.03;	author millert;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	2008.09.29.17.19.03;	author millert;	state Exp;
branches;
next	1.1.1.2;

1.1.1.2
date	2009.10.12.18.10.42;	author millert;	state Exp;
branches;
next	1.1.1.3;

1.1.1.3
date	2013.03.25.20.09.34;	author sthen;	state Exp;
branches;
next	;


desc
@@


1.2
log
@Fix merge issues, remove excess files - match perl-5.24.1 dist
@
text
@#!./perl

BEGIN {
    unless (-d 'blib') {
        chdir 't' if -d 't';
        @@INC = '../lib';
    }
}

require './test.pl';

use strict;
use warnings;

plan(skip_all => "Your system has no SIGALRM") if !exists $SIG{ALRM};
plan(tests => 8);

require mro;

=pod

These are like the 010_complex_merge_classless test,
but an infinite loop has been made in the heirarchy,
to test that we can fail cleanly instead of going
into an infinite loop

=cut

# initial setup, everything sane
{
    package K;
    use mro 'c3';
    our @@ISA = qw/J I/;
    package J;
    use mro 'c3';
    our @@ISA = qw/F/;
    package I;
    use mro 'c3';
    our @@ISA = qw/H F/;
    package H;
    use mro 'c3';
    our @@ISA = qw/G/;
    package G;
    use mro 'c3';
    our @@ISA = qw/D/;
    package F;
    use mro 'c3';
    our @@ISA = qw/E/;
    package E;
    use mro 'c3';
    our @@ISA = qw/D/;
    package D;
    use mro 'c3';
    our @@ISA = qw/A B C/;
    package C;
    use mro 'c3';
    our @@ISA = qw//;
    package B;
    use mro 'c3';
    our @@ISA = qw//;
    package A;
    use mro 'c3';
    our @@ISA = qw//;
}

# A series of 8 aberations that would cause infinite loops,
#  each one undoing the work of the previous
my @@loopies = (
    sub { @@E::ISA = qw/F/ },
    sub { @@E::ISA = qw/D/; @@C::ISA = qw/F/ },
    sub { @@C::ISA = qw//; @@A::ISA = qw/K/ },
    sub { @@A::ISA = qw//; @@J::ISA = qw/F K/ },
    sub { @@J::ISA = qw/F/; @@H::ISA = qw/K G/ },
    sub { @@H::ISA = qw/G/; @@B::ISA = qw/B/ },
    sub { @@B::ISA = qw//; @@K::ISA = qw/K J I/ },
    sub { @@K::ISA = qw/J I/; @@D::ISA = qw/A H B C/ },
);

foreach my $loopy (@@loopies) {
    eval {
        local $SIG{ALRM} = sub { die "ALRMTimeout" };
        alarm(3);
        $loopy->();
        mro::get_linear_isa('K', 'c3');
    };

    if(my $err = $@@) {
        if($err =~ /ALRMTimeout/) {
            ok(0, "Loop terminated by SIGALRM");
        }
        elsif($err =~ /Recursive inheritance detected/) {
            ok(1, "Graceful exception thrown");
        }
        else {
            ok(0, "Unrecognized exception: $err");
        }
    }
    else {
        ok(0, "Infinite loop apparently succeeded???");
    }
}
@


1.1
log
@Initial revision
@
text
@a2 2
use strict;
use warnings;
d12 3
d18 2
d66 1
a66 1
# A series of 8 abberations that would cause infinite loops,
@


1.1.1.1
log
@import perl 5.10.0 from CPAN
@
text
@@


1.1.1.2
log
@import perl 5.10.1
@
text
@a16 2
require mro;

@


1.1.1.3
log
@import perl 5.16.3 from CPAN - worked on by Andrew Fresh and myself
@
text
@d65 1
a65 1
# A series of 8 aberations that would cause infinite loops,
@


