head	1.1;
branch	1.1.1;
access;
symbols
	OPENBSD_6_2_BASE:1.1.1.1
	PERL_5_24_2:1.1.1.1
	OPENBSD_6_1:1.1.1.1.0.18
	OPENBSD_6_1_BASE:1.1.1.1
	OPENBSD_6_0:1.1.1.1.0.16
	OPENBSD_6_0_BASE:1.1.1.1
	OPENBSD_5_9:1.1.1.1.0.10
	OPENBSD_5_9_BASE:1.1.1.1
	OPENBSD_5_8:1.1.1.1.0.12
	OPENBSD_5_8_BASE:1.1.1.1
	PERL_5_20_2:1.1.1.1
	OPENBSD_5_7:1.1.1.1.0.4
	OPENBSD_5_7_BASE:1.1.1.1
	PERL_5_20_1:1.1.1.1
	OPENBSD_5_6:1.1.1.1.0.8
	OPENBSD_5_6_BASE:1.1.1.1
	PERL_5_18_2:1.1.1.1
	PERL:1.1.1
	OPENBSD_5_5:1.1.1.1.0.6
	OPENBSD_5_5_BASE:1.1.1.1
	OPENBSD_5_4:1.1.1.1.0.2
	OPENBSD_5_4_BASE:1.1.1.1
	PERL_5_16_3:1.1.1.1
	CPAN:1.1.1;
locks; strict;
comment	@# @;
expand	@o@;


1.1
date	2013.03.25.20.09.34;	author sthen;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	2013.03.25.20.09.34;	author sthen;	state Exp;
branches;
next	;


desc
@@


1.1
log
@Initial revision
@
text
@#!./perl

use strict;
use warnings;
BEGIN {
    unless (-d 'blib') {
        chdir 't' if -d 't';
        @@INC = '../lib';
    }
}
use utf8;
use open qw( :utf8 :std );

require './test.pl';

plan(skip_all => "Your system has no SIGALRM") if !exists $SIG{ALRM};
plan(tests => 8);

require mro;

=pod

These are like the 010_complex_merge_classless test,
but an infinite loop has been made in the heirarchy,
to test that we can fail cleanly instead of going
into an infinite loop

=cut

# initial setup, everything sane
{
    package ƙ;
    use mro 'c3';
    our @@ISA = qw/ᶨ ィ/;
    package ᶨ;
    use mro 'c3';
    our @@ISA = qw/ｆ/;
    package ィ;
    use mro 'c3';
    our @@ISA = qw/ʰ ｆ/;
    package ʰ;
    use mro 'c3';
    our @@ISA = qw/ᶢ/;
    package ᶢ;
    use mro 'c3';
    our @@ISA = qw/ᛞ/;
    package ｆ;
    use mro 'c3';
    our @@ISA = qw/ǝ/;
    package ǝ;
    use mro 'c3';
    our @@ISA = qw/ᛞ/;
    package ᛞ;
    use mro 'c3';
    our @@ISA = qw/Ạ Ｂ ʗ/;
    package ʗ;
    use mro 'c3';
    our @@ISA = qw//;
    package Ｂ;
    use mro 'c3';
    our @@ISA = qw//;
    package Ạ;
    use mro 'c3';
    our @@ISA = qw//;
}

# A series of 8 aberations that would cause infinite loops,
#  each one undoing the work of the previous
my @@loopies = (
    sub { @@ǝ::ISA = qw/ｆ/ },
    sub { @@ǝ::ISA = qw/ᛞ/; @@ʗ::ISA = qw/ｆ/ },
    sub { @@ʗ::ISA = qw//; @@Ạ::ISA = qw/ƙ/ },
    sub { @@Ạ::ISA = qw//; @@ᶨ::ISA = qw/ｆ ƙ/ },
    sub { @@ᶨ::ISA = qw/ｆ/; @@ʰ::ISA = qw/ƙ ᶢ/ },
    sub { @@ʰ::ISA = qw/ᶢ/; @@Ｂ::ISA = qw/Ｂ/ },
    sub { @@Ｂ::ISA = qw//; @@ƙ::ISA = qw/ƙ ᶨ ィ/ },
    sub { @@ƙ::ISA = qw/ᶨ ィ/; @@ᛞ::ISA = qw/Ạ ʰ Ｂ ʗ/ },
);

foreach my $loopy (@@loopies) {
    eval {
        local $SIG{ALRM} = sub { die "ALRMTimeout" };
        alarm(3);
        $loopy->();
        mro::get_linear_isa('ƙ', 'c3');
    };

    if(my $err = $@@) {
        if($err =~ /ALRMTimeout/) {
            ok(0, "Loop terminated by SIGALRM");
        }
        elsif($err =~ /Recursive inheritance detected/) {
            ok(1, "Graceful exception thrown");
        }
        else {
            ok(0, "Unrecognized exception: $err");
        }
    }
    else {
        ok(0, "Infinite loop apparently succeeded???");
    }
}
@


1.1.1.1
log
@import perl 5.16.3 from CPAN - worked on by Andrew Fresh and myself
@
text
@@
