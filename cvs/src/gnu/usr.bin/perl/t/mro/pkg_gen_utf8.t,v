head	1.1;
branch	1.1.1;
access;
symbols
	OPENBSD_6_2:1.1.1.1.0.20
	OPENBSD_6_2_BASE:1.1.1.1
	PERL_5_24_2:1.1.1.1
	OPENBSD_6_1:1.1.1.1.0.18
	OPENBSD_6_1_BASE:1.1.1.1
	OPENBSD_6_0:1.1.1.1.0.16
	OPENBSD_6_0_BASE:1.1.1.1
	OPENBSD_5_9:1.1.1.1.0.10
	OPENBSD_5_9_BASE:1.1.1.1
	OPENBSD_5_8:1.1.1.1.0.12
	OPENBSD_5_8_BASE:1.1.1.1
	PERL_5_20_2:1.1.1.1
	OPENBSD_5_7:1.1.1.1.0.4
	OPENBSD_5_7_BASE:1.1.1.1
	PERL_5_20_1:1.1.1.1
	OPENBSD_5_6:1.1.1.1.0.8
	OPENBSD_5_6_BASE:1.1.1.1
	PERL_5_18_2:1.1.1.1
	PERL:1.1.1
	OPENBSD_5_5:1.1.1.1.0.6
	OPENBSD_5_5_BASE:1.1.1.1
	OPENBSD_5_4:1.1.1.1.0.2
	OPENBSD_5_4_BASE:1.1.1.1
	PERL_5_16_3:1.1.1.1
	CPAN:1.1.1;
locks; strict;
comment	@# @;
expand	@o@;


1.1
date	2013.03.25.20.09.34;	author sthen;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	2013.03.25.20.09.34;	author sthen;	state Exp;
branches;
next	;


desc
@@


1.1
log
@Initial revision
@
text
@#!./perl

use strict;
use warnings;
use utf8;
use open qw( :utf8 :std );

chdir 't' if -d 't';
require q(./test.pl); plan(tests => 7);

require mro;

{
    package ᕘ;
    our @@ISA = qw//;
}

ok(!mro::get_pkg_gen('레알ឭ되s놑Eξsᴛ'),
    "pkg_gen 0 for non-existent pkg");

my $f_gen = mro::get_pkg_gen('ᕘ');
ok($f_gen > 0, 'ᕘ pkg_gen > 0');

{
    no warnings 'once';
    *ᕘ::ᕘ_Ƒ운ℭ = sub { 123 };
}
my $new_f_gen = mro::get_pkg_gen('ᕘ');
ok($new_f_gen > $f_gen, 'ᕘ pkg_gen incs for methods');
$f_gen = $new_f_gen;

@@ᕘ::ISA = qw/Bar/;
$new_f_gen = mro::get_pkg_gen('ᕘ');
ok($new_f_gen > $f_gen, 'ᕘ pkg_gen incs for @@ISA');

undef %ᕘ::;
is(mro::get_pkg_gen('ᕘ'), 1, "pkg_gen 1 for undef %Pkg::");

delete $::{"ᕘ::"};
is(mro::get_pkg_gen('ᕘ'), 0, 'pkg_gen 0 for delete $::{Pkg::}');

delete $::{"ㄑଊｘ::"};
push @@ㄑଊｘ::ISA, "Woot"; # should not segfault
ok(1, "No segfault on modification of ISA in a deleted stash");
@


1.1.1.1
log
@import perl 5.16.3 from CPAN - worked on by Andrew Fresh and myself
@
text
@@
