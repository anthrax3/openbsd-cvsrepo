head	1.10;
access;
symbols
	OPENBSD_6_2_BASE:1.10
	PERL_5_24_2:1.1.1.6
	OPENBSD_6_1:1.10.0.4
	OPENBSD_6_1_BASE:1.10
	OPENBSD_6_0:1.9.0.12
	OPENBSD_6_0_BASE:1.9
	OPENBSD_5_9:1.9.0.6
	OPENBSD_5_9_BASE:1.9
	OPENBSD_5_8:1.9.0.8
	OPENBSD_5_8_BASE:1.9
	PERL_5_20_2:1.1.1.5
	OPENBSD_5_7:1.9.0.2
	OPENBSD_5_7_BASE:1.9
	PERL_5_20_1:1.1.1.5
	OPENBSD_5_6:1.9.0.4
	OPENBSD_5_6_BASE:1.9
	PERL_5_18_2:1.1.1.5
	PERL:1.1.1
	OPENBSD_5_5:1.8.0.34
	OPENBSD_5_5_BASE:1.8
	OPENBSD_5_4:1.8.0.30
	OPENBSD_5_4_BASE:1.8
	PERL_5_16_3:1.1.1.4
	OPENBSD_5_3:1.8.0.28
	OPENBSD_5_3_BASE:1.8
	OPENBSD_5_2:1.8.0.26
	OPENBSD_5_2_BASE:1.8
	OPENBSD_5_1_BASE:1.8
	OPENBSD_5_1:1.8.0.24
	OPENBSD_5_0:1.8.0.22
	OPENBSD_5_0_BASE:1.8
	OPENBSD_4_9:1.8.0.20
	OPENBSD_4_9_BASE:1.8
	PERL_5_12_2:1.1.1.4
	OPENBSD_4_8:1.8.0.18
	OPENBSD_4_8_BASE:1.8
	OPENBSD_4_7:1.8.0.14
	OPENBSD_4_7_BASE:1.8
	PERL_5_10_1:1.1.1.4
	OPENBSD_4_6:1.8.0.16
	OPENBSD_4_6_BASE:1.8
	OPENBSD_4_5:1.8.0.12
	OPENBSD_4_5_BASE:1.8
	PERL_5_10_0:1.1.1.4
	OPENBSD_4_4:1.8.0.10
	OPENBSD_4_4_BASE:1.8
	OPENBSD_4_3:1.8.0.8
	OPENBSD_4_3_BASE:1.8
	OPENBSD_4_2:1.8.0.6
	OPENBSD_4_2_BASE:1.8
	OPENBSD_4_1:1.8.0.4
	OPENBSD_4_1_BASE:1.8
	OPENBSD_4_0:1.8.0.2
	OPENBSD_4_0_BASE:1.8
	PERL_5_8_8:1.1.1.4
	OPENBSD_3_9:1.7.0.10
	OPENBSD_3_9_BASE:1.7
	OPENBSD_3_8:1.7.0.8
	OPENBSD_3_8_BASE:1.7
	OPENBSD_3_7:1.7.0.6
	OPENBSD_3_7_BASE:1.7
	PERL_5_8_6:1.1.1.3
	OPENBSD_3_6:1.7.0.4
	OPENBSD_3_6_BASE:1.7
	PERL_5_8_5:1.1.1.2
	PERL_5_8_3:1.1.1.1
	OPENBSD_3_5:1.7.0.2
	OPENBSD_3_5_BASE:1.7
	PERL_5_8_2:1.1.1.1
	OPENBSD_3_4:1.6.0.4
	OPENBSD_3_4_BASE:1.6
	OPENBSD_3_3:1.6.0.2
	OPENBSD_3_3_BASE:1.6
	PERL_5_8_0:1.1.1.1
	OPENBSD_3_2:1.5.0.6
	OPENBSD_3_2_BASE:1.5
	OPENBSD_3_1:1.5.0.4
	OPENBSD_3_1_BASE:1.5
	OPENBSD_3_0:1.5.0.2
	OPENBSD_3_0_BASE:1.5
	PERL_5_6_1:1.1.1.1
	OPENBSD_2_9:1.4.0.6
	OPENBSD_2_9_BASE:1.4
	OPENBSD_2_8:1.4.0.4
	OPENBSD_2_8_BASE:1.4
	OPENBSD_2_7:1.4.0.2
	OPENBSD_2_7_BASE:1.4
	PERL_5_6_0:1.1.1.1
	OPENBSD_2_6:1.3.0.2
	OPENBSD_2_6_BASE:1.3
	PERL_500503:1.1.1.1
	CPAN:1.1.1
	OPENBSD_2_5:1.2.0.6
	OPENBSD_2_5_BASE:1.2
	OPENBSD_2_4:1.2.0.4
	OPENBSD_2_4_BASE:1.2
	OPENBSD_2_3:1.2.0.2
	OPENBSD_2_3_BASE:1.2
	OPENBSD_2_2:1.1.1.1.0.6
	OPENBSD_2_2_BASE:1.1.1.1
	OPENBSD_2_1:1.1.1.1.0.4
	OPENBSD_2_1_BASE:1.1.1.1
	OPENBSD_2_0:1.1.1.1.0.2
	OPENBSD_2_0_BASE:1.1.1.1
	perl5003:1.1.1.1
	lwall:1.1.1;
locks; strict;
comment	@# @;
expand	@o@;


1.10
date	2017.02.05.00.32.20;	author afresh1;	state Exp;
branches;
next	1.9;
commitid	cxJ08BvJA9Pt2PTM;

1.9
date	2014.03.24.15.05.33;	author afresh1;	state Exp;
branches;
next	1.8;

1.8
date	2006.03.28.19.23.12;	author millert;	state Exp;
branches;
next	1.7;

1.7
date	2003.12.03.03.02.48;	author millert;	state Exp;
branches;
next	1.6;

1.6
date	2002.10.27.22.25.37;	author millert;	state Exp;
branches;
next	1.5;

1.5
date	2001.05.24.18.36.17;	author millert;	state Exp;
branches;
next	1.4;

1.4
date	2000.04.06.17.08.22;	author millert;	state Exp;
branches;
next	1.3;

1.3
date	99.04.29.22.52.35;	author millert;	state Exp;
branches;
next	1.2;

1.2
date	97.11.30.08.05.20;	author millert;	state Exp;
branches;
next	1.1;

1.1
date	96.08.19.10.13.17;	author downsj;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	96.08.19.10.13.17;	author downsj;	state Exp;
branches;
next	1.1.1.2;

1.1.1.2
date	2004.08.09.17.48.34;	author millert;	state Exp;
branches;
next	1.1.1.3;

1.1.1.3
date	2005.01.15.21.18.18;	author millert;	state Exp;
branches;
next	1.1.1.4;

1.1.1.4
date	2006.03.28.18.49.44;	author millert;	state Exp;
branches;
next	1.1.1.5;

1.1.1.5
date	2014.03.24.14.59.10;	author afresh1;	state Exp;
branches;
next	1.1.1.6;

1.1.1.6
date	2017.08.14.13.46.23;	author afresh1;	state Exp;
branches;
next	;
commitid	fAzrs78vdW2Yfc6A;


desc
@@


1.10
log
@Fix merge issues, remove excess files - match perl-5.24.1 dist
@
text
@#!./perl

# Simple tests for the basic math functions.

BEGIN {
    chdir 't' if -d 't';
    @@INC = '../lib';
    require './test.pl';
}

use Config;

plan tests => 31;

# compile time evaluation

eval { $s = sqrt(-1) }; # Kind of compile time.
like($@@, qr/sqrt of -1/, 'compile time sqrt(-1) fails');

$s = sqrt(0);
is($s, 0, 'compile time sqrt(0)');

$s = sqrt(1);
is($s, 1, 'compile time sqrt(1)');

$s = sqrt(2);
is(substr($s,0,5), '1.414', 'compile time sqrt(2) == 1.414');

$s = exp(0);
is($s, 1, 'compile time exp(0) == 1');

$s = exp(1);
is(substr($s,0,7), '2.71828', 'compile time exp(1) == e');

eval { $s = log(0) };  # Kind of compile time.
like($@@, qr/log of 0/, 'compile time log(0) fails');

$s = log(1);
is($s, 0, 'compile time log(1) == 0');

$s = log(2);
is(substr($s,0,5), '0.693', 'compile time log(2)');

cmp_ok(exp(log(1)), '==', 1, 'compile time exp(log(1)) == 1');

cmp_ok(round(atan2(1, 2)), '==', '0.463647609', "atan2(1, 2)");

# run time evaluation

$x0 = 0;
$x1 = 1;
$x2 = 2;

eval { $s = sqrt(-$x1) };
like($@@, qr/sqrt of -1/, 'run time sqrt(-1) fails');

$s = sqrt($x0);
is($s, 0, 'run time sqrt(0)');

$s = sqrt($x1);
is($s, 1, 'run time sqrt(1)');

$s = sqrt($x2);
is(substr($s,0,5), '1.414', 'run time sqrt(2) == 1.414');

$s = exp($x0);
is($s, 1, 'run time exp(0) = 1');

$s = exp($x1);
is(substr($s,0,7), '2.71828', 'run time exp(1) = e');

eval { $s = log($x0) };
like($@@, qr/log of 0/, 'run time log(0) fails');

$s = log($x1);
is($s, 0, 'compile time log(1) == 0');

$s = log($x2);
is(substr($s,0,5), '0.693', 'run time log(2)');

cmp_ok(exp(log($x1)), '==', 1, 'run time exp(log(1)) == 1');

# NOTE: do NOT test the trigonometric functions at [+-]Pi
# and expect to get exact results like 0, 1, -1, because
# you may not be able to feed them exactly [+-]Pi given
# all the variations of different long doubles.

my $pi_2 = 1.5707963267949;

sub round {
   my $result = shift;
   return sprintf("%.9f", $result);
}

# sin() tests
cmp_ok(sin(0), '==', 0.0, 'sin(0) == 0');
cmp_ok(abs(sin($pi_2) - 1), '<', 1e-9, 'sin(pi/2) == 1');
cmp_ok(abs(sin(-1 * $pi_2) - -1), '<', 1e-9, 'sin(-pi/2) == -1');

cmp_ok(round(sin($x1)), '==', '0.841470985', "sin(1)");

# cos() tests
cmp_ok(cos(0), '==', 1.0, 'cos(0) == 1');
cmp_ok(abs(cos($pi_2)), '<', 1e-9, 'cos(pi/2) == 0');
cmp_ok(abs(cos(-1 * $pi_2)), '<', 1e-9, 'cos(-pi/2) == 0');

cmp_ok(round(cos($x1)), '==', '0.540302306', "cos(1)");

cmp_ok(round(atan2($x1, $x2)), '==', '0.463647609', "atan2($x1, $x2)");

# atan2() tests testing with -0.0, 0.0, -1.0, 1.0 were removed due to
# differing results from calls to atan2() on various OS's and
# architectures.  See perlport.pod for more information.

SKIP: {
    unless ($Config{usequadmath}) {
        skip "need usequadmath", 1;
    }
    # For quadmath we have a known precision.  
    is(sqrt(2), '1.4142135623730950488016887242097', "quadmath sqrt");
}
@


1.9
log
@Merge perl-5.18.2 plus local patches, remove old files

OK espie@@ sthen@@ deraadt@@
@
text
@d3 2
d11 3
a13 1
plan tests => 16;
d17 9
d29 3
d35 9
d46 2
d50 1
d53 10
d66 3
d72 9
d83 4
a86 1
# tests for transcendental functions
d88 1
a88 2
my $pi = 3.1415926535897931160;
my $pi_2 = 1.5707963267948965580;
d97 4
a100 4
cmp_ok(round(sin($pi)), '==', 0.0, 'sin(pi) == 0');
cmp_ok(round(sin(-1 * $pi)), '==', 0.0, 'sin(-pi) == 0');
cmp_ok(round(sin($pi_2)), '==', 1.0, 'sin(pi/2) == 1');
cmp_ok(round(sin(-1 * $pi_2)), '==', -1.0, 'sin(-pi/2) == -1');
d104 18
a121 8
cmp_ok(round(cos($pi)), '==', -1.0, 'cos(pi) == -1');
cmp_ok(round(cos(-1 * $pi)), '==', -1.0, 'cos(-pi) == -1');
cmp_ok(round(cos($pi_2)), '==', 0.0, 'cos(pi/2) == 0');
cmp_ok(round(cos(-1 * $pi_2)), '==', 0.0, 'cos(-pi/2) == 0');

# atan2() tests were removed due to differing results from calls to
# atan2() on various OS's and architectures.  See perlport.pod for
# more information.
@


1.8
log
@merge in perl 5.8.8
@
text
@d14 1
a14 1
is(substr($s,0,5), '1.414');
d17 1
a17 1
is(substr($s,0,7), '2.71828');
d19 1
a19 1
cmp_ok(exp(log(1)), '==', 1);
d26 1
a26 1
is(substr($s,0,5), '1.414');
d29 1
a29 1
is(substr($s,0,7), '2.71828');
d31 1
a31 1
cmp_ok(exp(log($x1)), '==', 1);
d44 5
a48 5
cmp_ok(sin(0), '==', 0.0);
cmp_ok(round(sin($pi)), '==', 0.0);
cmp_ok(round(sin(-1 * $pi)), '==', 0.0);
cmp_ok(round(sin($pi_2)), '==', 1.0);
cmp_ok(round(sin(-1 * $pi_2)), '==', -1.0);
d51 5
a55 5
cmp_ok(cos(0), '==', 1.0);
cmp_ok(round(cos($pi)), '==', -1.0);
cmp_ok(round(cos(-1 * $pi)), '==', -1.0);
cmp_ok(round(cos($pi_2)), '==', 0.0);
cmp_ok(round(cos(-1 * $pi_2)), '==', 0.0);
@


1.7
log
@Resolve conflicts for perl 5.8.2, remove old files, and add OpenBSD-specific scaffolding
@
text
@d3 5
a7 1
# $RCSfile: exp.t,v $$Revision: 4.1 $$Date: 92/08/07 18:27:50 $
d9 1
a9 1
print "1..6\n";
d14 1
a14 1
if (substr($s,0,5) eq '1.414') {print "ok 1\n";} else {print "not ok 1\n";}
d17 1
a17 1
if (substr($s,0,7) eq '2.71828') {print "ok 2\n";} else {print "not ok 2\n";}
d19 1
a19 1
if (exp(log(1)) == 1) {print "ok 3\n";} else {print "not ok 3\n";}
d26 1
a26 1
if (substr($s,0,5) eq '1.414') {print "ok 4\n";} else {print "not ok 4\n";}
d29 1
a29 1
if (substr($s,0,7) eq '2.71828') {print "ok 5\n";} else {print "not ok 5\n";}
d31 29
a59 1
if (exp(log($x1)) == 1) {print "ok 6\n";} else {print "not ok 6\n";}
@


1.6
log
@Resolve conflicts, remove old files, merge local changes
@
text
@@


1.5
log
@merge in perl 5.6.1 with our local changes
@
text
@@


1.4
log
@perl-5.6.0 + local changes
@
text
@@


1.3
log
@perl5.005_03 (stock)
@
text
@@


1.2
log
@perl 5.004_04
@
text
@@


1.1
log
@Initial revision
@
text
@@


1.1.1.1
log
@Import of Perl 5.003 into the tree.  Makefile.bsd-wrapper and
config.sh.OpenBSD are the only local changes.
@
text
@@


1.1.1.2
log
@Import of stock perl 5.8.5
@
text
@d3 1
a3 1
# $RCSfile: exp.t,v $$Revision: 1.7 $$Date: 2003/12/03 03:02:48 $
@


1.1.1.3
log
@perl 5.8.6 from CPAN
@
text
@d3 1
a3 1
# $RCSfile: exp.t,v $$Revision: 4.1 $$Date: 92/08/07 18:27:50 $
@


1.1.1.4
log
@perl 5.8.8 import
@
text
@d3 1
a3 5
BEGIN {
    chdir 't' if -d 't';
    @@INC = '../lib';
    require './test.pl';
}
d5 1
a5 1
plan tests => 16;
d10 1
a10 1
is(substr($s,0,5), '1.414');
d13 1
a13 1
is(substr($s,0,7), '2.71828');
d15 1
a15 1
cmp_ok(exp(log(1)), '==', 1);
d22 1
a22 1
is(substr($s,0,5), '1.414');
d25 1
a25 1
is(substr($s,0,7), '2.71828');
d27 1
a27 29
cmp_ok(exp(log($x1)), '==', 1);

# tests for transcendental functions

my $pi = 3.1415926535897931160;
my $pi_2 = 1.5707963267948965580;

sub round {
   my $result = shift;
   return sprintf("%.9f", $result);
}

# sin() tests
cmp_ok(sin(0), '==', 0.0);
cmp_ok(round(sin($pi)), '==', 0.0);
cmp_ok(round(sin(-1 * $pi)), '==', 0.0);
cmp_ok(round(sin($pi_2)), '==', 1.0);
cmp_ok(round(sin(-1 * $pi_2)), '==', -1.0);

# cos() tests
cmp_ok(cos(0), '==', 1.0);
cmp_ok(round(cos($pi)), '==', -1.0);
cmp_ok(round(cos(-1 * $pi)), '==', -1.0);
cmp_ok(round(cos($pi_2)), '==', 0.0);
cmp_ok(round(cos(-1 * $pi_2)), '==', 0.0);

# atan2() tests were removed due to differing results from calls to
# atan2() on various OS's and architectures.  See perlport.pod for
# more information.
@


1.1.1.5
log
@Import perl-5.18.2

OK espie@@ sthen@@ deraadt@@
@
text
@d14 1
a14 1
is(substr($s,0,5), '1.414', 'compile time sqrt(2) == 1.414');
d17 1
a17 1
is(substr($s,0,7), '2.71828', 'compile time exp(1) == e');
d19 1
a19 1
cmp_ok(exp(log(1)), '==', 1, 'compile time exp(log(1)) == 1');
d26 1
a26 1
is(substr($s,0,5), '1.414', 'run time sqrt(2) == 1.414');
d29 1
a29 1
is(substr($s,0,7), '2.71828', 'run time exp(1) = e');
d31 1
a31 1
cmp_ok(exp(log($x1)), '==', 1, 'run time exp(log(1)) == 1');
d44 5
a48 5
cmp_ok(sin(0), '==', 0.0, 'sin(0) == 0');
cmp_ok(round(sin($pi)), '==', 0.0, 'sin(pi) == 0');
cmp_ok(round(sin(-1 * $pi)), '==', 0.0, 'sin(-pi) == 0');
cmp_ok(round(sin($pi_2)), '==', 1.0, 'sin(pi/2) == 1');
cmp_ok(round(sin(-1 * $pi_2)), '==', -1.0, 'sin(-pi/2) == -1');
d51 5
a55 5
cmp_ok(cos(0), '==', 1.0, 'cos(0) == 1');
cmp_ok(round(cos($pi)), '==', -1.0, 'cos(pi) == -1');
cmp_ok(round(cos(-1 * $pi)), '==', -1.0, 'cos(-pi) == -1');
cmp_ok(round(cos($pi_2)), '==', 0.0, 'cos(pi/2) == 0');
cmp_ok(round(cos(-1 * $pi_2)), '==', 0.0, 'cos(-pi/2) == 0');
@


1.1.1.6
log
@Import perl-5.24.2
@
text
@a2 2
# Simple tests for the basic math functions.

d9 1
a9 3
use Config;

plan tests => 31;
a12 9
eval { $s = sqrt(-1) }; # Kind of compile time.
like($@@, qr/sqrt of -1/, 'compile time sqrt(-1) fails');

$s = sqrt(0);
is($s, 0, 'compile time sqrt(0)');

$s = sqrt(1);
is($s, 1, 'compile time sqrt(1)');

a15 3
$s = exp(0);
is($s, 1, 'compile time exp(0) == 1');

a18 9
eval { $s = log(0) };  # Kind of compile time.
like($@@, qr/log of 0/, 'compile time log(0) fails');

$s = log(1);
is($s, 0, 'compile time log(1) == 0');

$s = log(2);
is(substr($s,0,5), '0.693', 'compile time log(2)');

a20 2
cmp_ok(round(atan2(1, 2)), '==', '0.463647609', "atan2(1, 2)");

a22 1
$x0 = 0;
a24 10

eval { $s = sqrt(-$x1) };
like($@@, qr/sqrt of -1/, 'run time sqrt(-1) fails');

$s = sqrt($x0);
is($s, 0, 'run time sqrt(0)');

$s = sqrt($x1);
is($s, 1, 'run time sqrt(1)');

a27 3
$s = exp($x0);
is($s, 1, 'run time exp(0) = 1');

a30 9
eval { $s = log($x0) };
like($@@, qr/log of 0/, 'run time log(0) fails');

$s = log($x1);
is($s, 0, 'compile time log(1) == 0');

$s = log($x2);
is(substr($s,0,5), '0.693', 'run time log(2)');

d33 1
a33 4
# NOTE: do NOT test the trigonometric functions at [+-]Pi
# and expect to get exact results like 0, 1, -1, because
# you may not be able to feed them exactly [+-]Pi given
# all the variations of different long doubles.
d35 2
a36 1
my $pi_2 = 1.5707963267949;
d45 4
a48 4
cmp_ok(abs(sin($pi_2) - 1), '<', 1e-9, 'sin(pi/2) == 1');
cmp_ok(abs(sin(-1 * $pi_2) - -1), '<', 1e-9, 'sin(-pi/2) == -1');

cmp_ok(round(sin($x1)), '==', '0.841470985', "sin(1)");
d52 8
a59 18
cmp_ok(abs(cos($pi_2)), '<', 1e-9, 'cos(pi/2) == 0');
cmp_ok(abs(cos(-1 * $pi_2)), '<', 1e-9, 'cos(-pi/2) == 0');

cmp_ok(round(cos($x1)), '==', '0.540302306', "cos(1)");

cmp_ok(round(atan2($x1, $x2)), '==', '0.463647609', "atan2($x1, $x2)");

# atan2() tests testing with -0.0, 0.0, -1.0, 1.0 were removed due to
# differing results from calls to atan2() on various OS's and
# architectures.  See perlport.pod for more information.

SKIP: {
    unless ($Config{usequadmath}) {
        skip "need usequadmath", 1;
    }
    # For quadmath we have a known precision.  
    is(sqrt(2), '1.4142135623730950488016887242097', "quadmath sqrt");
}
@


