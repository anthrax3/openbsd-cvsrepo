head	1.3;
access;
symbols
	PERL_5_24_2:1.1.1.2
	OPENBSD_6_1:1.3.0.4
	OPENBSD_6_1_BASE:1.3
	OPENBSD_6_0:1.2.0.4
	OPENBSD_6_0_BASE:1.2
	OPENBSD_5_9:1.1.1.1.0.52
	OPENBSD_5_9_BASE:1.1.1.1
	OPENBSD_5_8:1.1.1.1.0.54
	OPENBSD_5_8_BASE:1.1.1.1
	PERL_5_20_2:1.1.1.1
	OPENBSD_5_7:1.1.1.1.0.46
	OPENBSD_5_7_BASE:1.1.1.1
	PERL_5_20_1:1.1.1.1
	OPENBSD_5_6:1.1.1.1.0.50
	OPENBSD_5_6_BASE:1.1.1.1
	PERL_5_18_2:1.1.1.1
	PERL:1.1.1
	OPENBSD_5_5:1.1.1.1.0.48
	OPENBSD_5_5_BASE:1.1.1.1
	OPENBSD_5_4:1.1.1.1.0.44
	OPENBSD_5_4_BASE:1.1.1.1
	PERL_5_16_3:1.1.1.1
	OPENBSD_5_3:1.1.1.1.0.42
	OPENBSD_5_3_BASE:1.1.1.1
	OPENBSD_5_2:1.1.1.1.0.40
	OPENBSD_5_2_BASE:1.1.1.1
	OPENBSD_5_1_BASE:1.1.1.1
	OPENBSD_5_1:1.1.1.1.0.38
	OPENBSD_5_0:1.1.1.1.0.36
	OPENBSD_5_0_BASE:1.1.1.1
	OPENBSD_4_9:1.1.1.1.0.34
	OPENBSD_4_9_BASE:1.1.1.1
	PERL_5_12_2:1.1.1.1
	OPENBSD_4_8:1.1.1.1.0.32
	OPENBSD_4_8_BASE:1.1.1.1
	OPENBSD_4_7:1.1.1.1.0.28
	OPENBSD_4_7_BASE:1.1.1.1
	PERL_5_10_1:1.1.1.1
	OPENBSD_4_6:1.1.1.1.0.30
	OPENBSD_4_6_BASE:1.1.1.1
	OPENBSD_4_5:1.1.1.1.0.26
	OPENBSD_4_5_BASE:1.1.1.1
	PERL_5_10_0:1.1.1.1
	OPENBSD_4_4:1.1.1.1.0.24
	OPENBSD_4_4_BASE:1.1.1.1
	OPENBSD_4_3:1.1.1.1.0.22
	OPENBSD_4_3_BASE:1.1.1.1
	OPENBSD_4_2:1.1.1.1.0.20
	OPENBSD_4_2_BASE:1.1.1.1
	OPENBSD_4_1:1.1.1.1.0.18
	OPENBSD_4_1_BASE:1.1.1.1
	OPENBSD_4_0:1.1.1.1.0.16
	OPENBSD_4_0_BASE:1.1.1.1
	PERL_5_8_8:1.1.1.1
	OPENBSD_3_9:1.1.1.1.0.14
	OPENBSD_3_9_BASE:1.1.1.1
	OPENBSD_3_8:1.1.1.1.0.12
	OPENBSD_3_8_BASE:1.1.1.1
	OPENBSD_3_7:1.1.1.1.0.10
	OPENBSD_3_7_BASE:1.1.1.1
	PERL_5_8_6:1.1.1.1
	OPENBSD_3_6:1.1.1.1.0.8
	OPENBSD_3_6_BASE:1.1.1.1
	PERL_5_8_5:1.1.1.1
	PERL_5_8_3:1.1.1.1
	OPENBSD_3_5:1.1.1.1.0.6
	OPENBSD_3_5_BASE:1.1.1.1
	PERL_5_8_2:1.1.1.1
	OPENBSD_3_4:1.1.1.1.0.4
	OPENBSD_3_4_BASE:1.1.1.1
	OPENBSD_3_3:1.1.1.1.0.2
	OPENBSD_3_3_BASE:1.1.1.1
	PERL_5_8_0:1.1.1.1
	CPAN:1.1.1;
locks; strict;
comment	@# @;
expand	@o@;


1.3
date	2017.02.05.00.32.20;	author afresh1;	state Exp;
branches;
next	1.2;
commitid	cxJ08BvJA9Pt2PTM;

1.2
date	2016.07.03.01.08.04;	author afresh1;	state Exp;
branches;
next	1.1;
commitid	GzHqjSTnBjdF7Wcw;

1.1
date	2002.10.27.22.15.10;	author millert;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	2002.10.27.22.15.10;	author millert;	state Exp;
branches;
next	1.1.1.2;

1.1.1.2
date	2017.08.14.13.46.23;	author afresh1;	state Exp;
branches;
next	;
commitid	fAzrs78vdW2Yfc6A;


desc
@@


1.3
log
@Fix merge issues, remove excess files - match perl-5.24.1 dist
@
text
@#!./perl -w

BEGIN {
    chdir 't' if -d 't';
    @@INC = qw(. ../lib);
}

BEGIN {
    use Config;

    require "./test.pl";

    if( !$Config{d_crypt} ) {
        skip_all("crypt unimplemented");
    }
    else {
        plan(tests => 6);
    }
}

# Can't assume too much about the string returned by crypt(),
# and about how many bytes of the encrypted (really, hashed)
# string matter.
#
# HISTORICALLY the results started with the first two bytes of the salt,
# followed by 11 bytes from the set [./0-9A-Za-z], and only the first
# eight characters mattered, but those are probably no more safe
# bets, given alternative encryption/hashing schemes like MD5,
# C2 (or higher) security schemes, and non-UNIX platforms.
#
# On platforms implementing FIPS mode, using a weak algorithm (including
# the default triple-DES algorithm) causes crypt(3) to return a null
# pointer, which Perl converts into undef. We assume for now that all
# such platforms support glibc-style selection of a different hashing
# algorithm.
# glibc supports MD5, but OpenBSD only supports Blowfish.
my $alg = '';       # Use default algorithm
if ( !defined(crypt("ab", $alg."cd")) ) {
    $alg = '$5$';   # Try SHA-256
}
if ( !defined(crypt("ab", $alg."cd")) ) {
    $alg = '$2b$12$FPWWO2RJ3CK4FINTw0Hi';  # Try Blowfish
}
if ( !defined(crypt("ab", $alg."cd")) ) {
    $alg = ''; # Nothing worked.  Back to default
}

SKIP: {
    skip ("VOS crypt ignores salt.", 1) if ($^O eq 'vos');
    ok(substr(crypt("ab", $alg."cd"), length($alg)+2) ne 
       substr(crypt("ab", $alg."ce"), length($alg)+2),
       "salt makes a difference");
}

$a = "a\xFF\x{100}";

eval {$b = crypt($a, $alg."cd")};
like($@@, qr/Wide character in crypt/, "wide characters ungood");

chop $a; # throw away the wide character

eval {$b = crypt($a, $alg."cd")};
is($@@, '',                   "downgrade to eight bit characters");
is($b, crypt("a\xFF", $alg."cd"), "downgrade results agree");

my $x = chr 256; # has to be lexical, and predeclared
# Assignment gets optimised away here:
$x = crypt "foo", ${\"bar"}; # ${\ } to defeat constant folding
is $x, crypt("foo", "bar"), 'crypt writing to utf8 target';
ok !utf8::is_utf8($x), 'crypt turns off utf8 on its target';
@


1.2
log
@Update to perl 5.20.3

OK bluhm@@
@
text
@d11 1
a11 1
    require "test.pl";
d17 1
a17 1
        plan(tests => 4);
d30 17
a47 1
my $alg = '$2b$12$12345678901234567890';   # Use Blowfish
d49 4
a52 2
	skip ("VOS crypt ignores salt.", 1) if ($^O eq 'vos');
	ok(substr(crypt("ab", $alg . "cd"), 2) ne substr(crypt("ab", $alg . "ce"), 2), "salt makes a difference");
d57 1
a57 1
eval {$b = crypt($a, $alg . "cd")};
d62 1
a62 1
eval {$b = crypt($a, $alg . "cd")};
d64 1
a64 1
is($b, crypt("a\xFF", $alg . "cd"), "downgrade results agree");
d66 5
@


1.1
log
@Initial revision
@
text
@d31 1
d34 1
a34 1
	ok(substr(crypt("ab", "cd"), 2) ne substr(crypt("ab", "ce"), 2), "salt makes a difference");
d39 1
a39 1
eval {$b = crypt($a, "cd")};
d44 1
a44 1
eval {$b = crypt($a, "cd")};
d46 1
a46 1
is($b, crypt("a\xFF", "cd"), "downgrade results agree");
@


1.1.1.1
log
@stock perl 5.8.0 from CPAN
@
text
@@


1.1.1.2
log
@Import perl-5.24.2
@
text
@d11 1
a11 1
    require "./test.pl";
d17 1
a17 1
        plan(tests => 6);
a29 17
#
# On platforms implementing FIPS mode, using a weak algorithm (including
# the default triple-DES algorithm) causes crypt(3) to return a null
# pointer, which Perl converts into undef. We assume for now that all
# such platforms support glibc-style selection of a different hashing
# algorithm.
# glibc supports MD5, but OpenBSD only supports Blowfish.
my $alg = '';       # Use default algorithm
if ( !defined(crypt("ab", $alg."cd")) ) {
    $alg = '$5$';   # Try SHA-256
}
if ( !defined(crypt("ab", $alg."cd")) ) {
    $alg = '$2b$12$FPWWO2RJ3CK4FINTw0Hi';  # Try Blowfish
}
if ( !defined(crypt("ab", $alg."cd")) ) {
    $alg = ''; # Nothing worked.  Back to default
}
d32 2
a33 4
    skip ("VOS crypt ignores salt.", 1) if ($^O eq 'vos');
    ok(substr(crypt("ab", $alg."cd"), length($alg)+2) ne 
       substr(crypt("ab", $alg."ce"), length($alg)+2),
       "salt makes a difference");
d38 1
a38 1
eval {$b = crypt($a, $alg."cd")};
d43 1
a43 1
eval {$b = crypt($a, $alg."cd")};
d45 1
a45 1
is($b, crypt("a\xFF", $alg."cd"), "downgrade results agree");
a46 5
my $x = chr 256; # has to be lexical, and predeclared
# Assignment gets optimised away here:
$x = crypt "foo", ${\"bar"}; # ${\ } to defeat constant folding
is $x, crypt("foo", "bar"), 'crypt writing to utf8 target';
ok !utf8::is_utf8($x), 'crypt turns off utf8 on its target';
@

