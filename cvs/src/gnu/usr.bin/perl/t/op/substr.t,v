head	1.15;
access;
symbols
	OPENBSD_6_0:1.14.0.12
	OPENBSD_6_0_BASE:1.14
	OPENBSD_5_9:1.14.0.6
	OPENBSD_5_9_BASE:1.14
	OPENBSD_5_8:1.14.0.8
	OPENBSD_5_8_BASE:1.14
	PERL_5_20_2:1.1.1.12
	OPENBSD_5_7:1.14.0.2
	OPENBSD_5_7_BASE:1.14
	PERL_5_20_1:1.1.1.12
	OPENBSD_5_6:1.14.0.4
	OPENBSD_5_6_BASE:1.14
	PERL_5_18_2:1.1.1.12
	PERL:1.1.1
	OPENBSD_5_5:1.13.0.6
	OPENBSD_5_5_BASE:1.13
	OPENBSD_5_4:1.13.0.2
	OPENBSD_5_4_BASE:1.13
	PERL_5_16_3:1.1.1.11
	OPENBSD_4_8:1.11.0.4
	OPENBSD_4_8_BASE:1.11
	OPENBSD_4_7:1.11.0.2
	OPENBSD_4_7_BASE:1.11
	PERL_5_10_1:1.1.1.10
	OPENBSD_4_6:1.10.0.6
	OPENBSD_4_6_BASE:1.10
	OPENBSD_4_5:1.10.0.2
	OPENBSD_4_5_BASE:1.10
	PERL_5_10_0:1.1.1.9
	OPENBSD_4_4:1.9.0.10
	OPENBSD_4_4_BASE:1.9
	OPENBSD_4_3:1.9.0.8
	OPENBSD_4_3_BASE:1.9
	OPENBSD_4_2:1.9.0.6
	OPENBSD_4_2_BASE:1.9
	OPENBSD_4_1:1.9.0.4
	OPENBSD_4_1_BASE:1.9
	OPENBSD_4_0:1.9.0.2
	OPENBSD_4_0_BASE:1.9
	PERL_5_8_8:1.1.1.8
	OPENBSD_3_9:1.8.0.8
	OPENBSD_3_9_BASE:1.8
	OPENBSD_3_8:1.8.0.6
	OPENBSD_3_8_BASE:1.8
	OPENBSD_3_7:1.8.0.4
	OPENBSD_3_7_BASE:1.8
	PERL_5_8_6:1.1.1.7
	OPENBSD_3_6:1.8.0.2
	OPENBSD_3_6_BASE:1.8
	PERL_5_8_5:1.1.1.7
	PERL_5_8_3:1.1.1.6
	OPENBSD_3_5:1.6.0.2
	OPENBSD_3_5_BASE:1.6
	PERL_5_8_2:1.1.1.5
	OPENBSD_3_4:1.5.0.10
	OPENBSD_3_4_BASE:1.5
	OPENBSD_3_3:1.5.0.8
	OPENBSD_3_3_BASE:1.5
	PERL_5_8_0:1.1.1.4
	OPENBSD_3_2:1.5.0.6
	OPENBSD_3_2_BASE:1.5
	OPENBSD_3_1:1.5.0.4
	OPENBSD_3_1_BASE:1.5
	OPENBSD_3_0:1.5.0.2
	OPENBSD_3_0_BASE:1.5
	PERL_5_6_1:1.1.1.4
	OPENBSD_2_9:1.4.0.6
	OPENBSD_2_9_BASE:1.4
	OPENBSD_2_8:1.4.0.4
	OPENBSD_2_8_BASE:1.4
	OPENBSD_2_7:1.4.0.2
	OPENBSD_2_7_BASE:1.4
	PERL_5_6_0:1.1.1.3
	OPENBSD_2_6:1.3.0.2
	OPENBSD_2_6_BASE:1.3
	PERL_500503:1.1.1.2
	CPAN:1.1.1
	OPENBSD_2_5:1.2.0.6
	OPENBSD_2_5_BASE:1.2
	OPENBSD_2_4:1.2.0.4
	OPENBSD_2_4_BASE:1.2
	OPENBSD_2_3:1.2.0.2
	OPENBSD_2_3_BASE:1.2
	OPENBSD_2_2:1.1.1.1.0.6
	OPENBSD_2_2_BASE:1.1.1.1
	OPENBSD_2_1:1.1.1.1.0.4
	OPENBSD_2_1_BASE:1.1.1.1
	OPENBSD_2_0:1.1.1.1.0.2
	OPENBSD_2_0_BASE:1.1.1.1
	perl5003:1.1.1.1
	lwall:1.1.1;
locks; strict;
comment	@# @;


1.15
date	2017.02.05.00.32.20;	author afresh1;	state Exp;
branches;
next	1.14;
commitid	cxJ08BvJA9Pt2PTM;

1.14
date	2014.03.24.15.05.33;	author afresh1;	state Exp;
branches;
next	1.13;

1.13
date	2013.03.25.20.44.46;	author sthen;	state Exp;
branches;
next	1.12;

1.12
date	2010.09.24.15.00.00;	author millert;	state dead;
branches;
next	1.11;

1.11
date	2009.10.12.18.30.28;	author millert;	state Exp;
branches;
next	1.10;

1.10
date	2008.09.29.17.36.20;	author millert;	state Exp;
branches;
next	1.9;

1.9
date	2006.03.28.19.23.13;	author millert;	state Exp;
branches;
next	1.8;

1.8
date	2004.08.09.18.10.27;	author millert;	state Exp;
branches;
next	1.7;

1.7
date	2004.04.07.21.33.10;	author millert;	state Exp;
branches;
next	1.6;

1.6
date	2003.12.03.03.02.49;	author millert;	state Exp;
branches;
next	1.5;

1.5
date	2001.05.24.18.36.23;	author millert;	state Exp;
branches;
next	1.4;

1.4
date	2000.04.06.17.08.33;	author millert;	state Exp;
branches;
next	1.3;

1.3
date	99.04.29.22.52.39;	author millert;	state Exp;
branches;
next	1.2;

1.2
date	97.11.30.08.05.45;	author millert;	state Exp;
branches;
next	1.1;

1.1
date	96.08.19.10.13.23;	author downsj;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	96.08.19.10.13.23;	author downsj;	state Exp;
branches;
next	1.1.1.2;

1.1.1.2
date	99.04.29.22.41.52;	author millert;	state Exp;
branches;
next	1.1.1.3;

1.1.1.3
date	2000.04.06.16.10.52;	author millert;	state Exp;
branches;
next	1.1.1.4;

1.1.1.4
date	2001.05.24.18.25.48;	author millert;	state Exp;
branches;
next	1.1.1.5;

1.1.1.5
date	2003.12.03.02.44.32;	author millert;	state Exp;
branches;
next	1.1.1.6;

1.1.1.6
date	2004.04.07.21.13.44;	author millert;	state Exp;
branches;
next	1.1.1.7;

1.1.1.7
date	2004.08.09.17.48.36;	author millert;	state Exp;
branches;
next	1.1.1.8;

1.1.1.8
date	2006.03.28.18.49.46;	author millert;	state Exp;
branches;
next	1.1.1.9;

1.1.1.9
date	2008.09.29.17.19.02;	author millert;	state Exp;
branches;
next	1.1.1.10;

1.1.1.10
date	2009.10.12.18.10.44;	author millert;	state Exp;
branches;
next	1.1.1.11;

1.1.1.11
date	2013.03.25.20.09.37;	author sthen;	state Exp;
branches;
next	1.1.1.12;

1.1.1.12
date	2014.03.24.14.59.10;	author afresh1;	state Exp;
branches;
next	;


desc
@@


1.15
log
@Fix merge issues, remove excess files - match perl-5.24.1 dist
@
text
@#!./perl

#P = start of string  Q = start of substr  R = end of substr  S = end of string

BEGIN {
    chdir 't' if -d 't';
    require './test.pl';
    set_up_inc('../lib');
}
use warnings ;

$a = 'abcdefxyz';
$SIG{__WARN__} = sub {
     if ($_[0] =~ /^substr outside of string/) {
          $w++;
     } elsif ($_[0] =~ /^Attempt to use reference as lvalue in substr/) {
          $w += 2;
     } elsif ($_[0] =~ /^Use of uninitialized value/) {
          $w += 3;
     } else {
          warn $_[0];
     }
};

plan(388);

run_tests() unless caller;

my $krunch = "a";

sub run_tests {

$FATAL_MSG = qr/^substr outside of string/;

is(substr($a,0,3), 'abc');   # P=Q R S
is(substr($a,3,3), 'def');   # P Q R S
is(substr($a,6,999), 'xyz'); # P Q S R
$b = substr($a,999,999) ; # warn # P R Q S
is ($w--, 1);
eval{substr($a,999,999) = "" ; };# P R Q S
like ($@@, $FATAL_MSG);
is(substr($a,0,-6), 'abc');  # P=Q R S
is(substr($a,-3,1), 'x');    # P Q R S
sub{$b = shift}->(substr($a,999,999));
is ($w--, 1, 'boundless lvalue substr only warns on fetch');

substr($a,3,3) = 'XYZ';
is($a, 'abcXYZxyz' );
substr($a,0,2) = '';
is($a, 'cXYZxyz' );
substr($a,0,0) = 'ab';
is($a, 'abcXYZxyz' );
substr($a,0,0) = '12345678';
is($a, '12345678abcXYZxyz' );
substr($a,-3,3) = 'def';
is($a, '12345678abcXYZdef');
substr($a,-3,3) = '<';
is($a, '12345678abcXYZ<' );
substr($a,-1,1) = '12345678';
is($a, '12345678abcXYZ12345678' );

$a = 'abcdefxyz';

is(substr($a,6), 'xyz' );        # P Q R=S
is(substr($a,-3), 'xyz' );       # P Q R=S
$b = substr($a,999,999) ; # warning   # P R=S Q
is($w--, 1);
eval{substr($a,999,999) = "" ; } ;    # P R=S Q
like($@@, $FATAL_MSG);
is(substr($a,0), 'abcdefxyz');  # P=Q R=S
is(substr($a,9), '');           # P Q=R=S
is(substr($a,-11), 'abcdefxyz'); # Q P R=S
is(substr($a,-9), 'abcdefxyz');  # P=Q R=S

$a = '54321';

$b = substr($a,-7, 1) ; # warn  # Q R P S
is($w--, 1);
eval{substr($a,-7, 1) = "" ; }; # Q R P S
like($@@, $FATAL_MSG);
$b = substr($a,-7,-6) ; # warn  # Q R P S
is($w--, 1);
eval{substr($a,-7,-6) = "" ; }; # Q R P S
like($@@, $FATAL_MSG);
is(substr($a,-5,-7), '');  # R P=Q S
is(substr($a, 2,-7), '');  # R P Q S
is(substr($a,-3,-7), '');  # R P Q S
is(substr($a, 2,-5), '');  # P=R Q S
is(substr($a,-3,-5), '');  # P=R Q S
is(substr($a, 2,-4), '');  # P R Q S
is(substr($a,-3,-4), '');  # P R Q S
is(substr($a, 5,-6), '');  # R P Q=S
is(substr($a, 5,-5), '');  # P=R Q S
is(substr($a, 5,-3), '');  # P R Q=S
$b = substr($a, 7,-7) ; # warn  # R P S Q
is($w--, 1);
eval{substr($a, 7,-7) = "" ; }; # R P S Q
like($@@, $FATAL_MSG);
$b = substr($a, 7,-5) ; # warn  # P=R S Q
is($w--, 1);
eval{substr($a, 7,-5) = "" ; }; # P=R S Q
like($@@, $FATAL_MSG);
$b = substr($a, 7,-3) ; # warn  # P Q S Q
is($w--, 1);
eval{substr($a, 7,-3) = "" ; }; # P Q S Q
like($@@, $FATAL_MSG);
$b = substr($a, 7, 0) ; # warn  # P S Q=R
is($w--, 1);
eval{substr($a, 7, 0) = "" ; }; # P S Q=R
like($@@, $FATAL_MSG);

is(substr($a,-7,2), '');   # Q P=R S
is(substr($a,-7,4), '54'); # Q P R S
is(substr($a,-7,7), '54321');# Q P R=S
is(substr($a,-7,9), '54321');# Q P S R
is(substr($a,-5,0), '');   # P=Q=R S
is(substr($a,-5,3), '543');# P=Q R S
is(substr($a,-5,5), '54321');# P=Q R=S
is(substr($a,-5,7), '54321');# P=Q S R
is(substr($a,-3,0), '');   # P Q=R S
is(substr($a,-3,3), '321');# P Q R=S
is(substr($a,-2,3), '21'); # P Q S R
is(substr($a,0,-5), '');   # P=Q=R S
is(substr($a,2,-3), '');   # P Q=R S
is(substr($a,0,0), '');    # P=Q=R S
is(substr($a,0,5), '54321');# P=Q R=S
is(substr($a,0,7), '54321');# P=Q S R
is(substr($a,2,0), '');    # P Q=R S
is(substr($a,2,3), '321'); # P Q R=S
is(substr($a,5,0), '');    # P Q=R=S
is(substr($a,5,2), '');    # P Q=S R
is(substr($a,-7,-5), '');  # Q P=R S
is(substr($a,-7,-2), '543');# Q P R S
is(substr($a,-5,-5), '');  # P=Q=R S
is(substr($a,-5,-2), '543');# P=Q R S
is(substr($a,-3,-3), '');  # P Q=R S
is(substr($a,-3,-1), '32');# P Q R S

$a = '';

is(substr($a,-2,2), '');   # Q P=R=S
is(substr($a,0,0), '');    # P=Q=R=S
is(substr($a,0,1), '');    # P=Q=S R
is(substr($a,-2,3), '');   # Q P=S R
is(substr($a,-2), '');     # Q P=R=S
is(substr($a,0), '');      # P=Q=R=S


is(substr($a,0,-1), '');   # R P=Q=S
$b = substr($a,-2, 0) ; # warn  # Q=R P=S
is($w--, 1);
eval{substr($a,-2, 0) = "" ; }; # Q=R P=S
like($@@, $FATAL_MSG);

$b = substr($a,-2, 1) ; # warn  # Q R P=S
is($w--, 1);
eval{substr($a,-2, 1) = "" ; }; # Q R P=S
like($@@, $FATAL_MSG);

$b = substr($a,-2,-1) ; # warn  # Q R P=S
is($w--, 1);
eval{substr($a,-2,-1) = "" ; }; # Q R P=S
like($@@, $FATAL_MSG);

$b = substr($a,-2,-2) ; # warn  # Q=R P=S
is($w--, 1);
eval{substr($a,-2,-2) = "" ; }; # Q=R P=S
like($@@, $FATAL_MSG);

$b = substr($a, 1,-2) ; # warn  # R P=S Q
is($w--, 1);
eval{substr($a, 1,-2) = "" ; }; # R P=S Q
like($@@, $FATAL_MSG);

$b = substr($a, 1, 1) ; # warn  # P=S Q R
is($w--, 1);
eval{substr($a, 1, 1) = "" ; }; # P=S Q R
like($@@, $FATAL_MSG);

$b = substr($a, 1, 0) ;# warn   # P=S Q=R
is($w--, 1);
eval{substr($a, 1, 0) = "" ; }; # P=S Q=R
like($@@, $FATAL_MSG);

$b = substr($a,1) ; # warning   # P=R=S Q
is($w--, 1);
eval{substr($a,1) = "" ; };     # P=R=S Q
like($@@, $FATAL_MSG);

$b = substr($a,-7,-6) ; # warn  # Q R P S
is($w--, 1);
eval{substr($a,-7,-6) = "" ; }; # Q R P S
like($@@, $FATAL_MSG);

my $a = 'zxcvbnm';
substr($a,2,0) = '';
is($a, 'zxcvbnm');
substr($a,7,0) = '';
is($a, 'zxcvbnm');
substr($a,5,0) = '';
is($a, 'zxcvbnm');
substr($a,0,2) = 'pq';
is($a, 'pqcvbnm');
substr($a,2,0) = 'r';
is($a, 'pqrcvbnm');
substr($a,8,0) = 'asd';
is($a, 'pqrcvbnmasd');
substr($a,0,2) = 'iop';
is($a, 'ioprcvbnmasd');
substr($a,0,5) = 'fgh';
is($a, 'fghvbnmasd');
substr($a,3,5) = 'jkl';
is($a, 'fghjklsd');
substr($a,3,2) = '1234';
is($a, 'fgh1234lsd');


# with lexicals (and in re-entered scopes)
for (0,1) {
  my $txt;
  unless ($_) {
    $txt = "Foo";
    substr($txt, -1) = "X";
    is($txt, "FoX");
  }
  else {
    substr($txt, 0, 1) = "X";
    is($txt, "X");
  }
}

$w = 0 ;
# coercion of references
{
  my $s = [];
  substr($s, 0, 1) = 'Foo';
  is (substr($s,0,7), "FooRRAY");
  is ($w,2);
  $w = 0;
}

# check no spurious warnings
is($w, 0);

# check new 4 arg replacement syntax
$a = "abcxyz";
$w = 0;
is(substr($a, 0, 3, ""), "abc");
is($a, "xyz");
is(substr($a, 0, 0, "abc"), "");
is($a, "abcxyz");
is(substr($a, 3, -1, ""), "xy");
is($a, "abcz");

is(substr($a, 3, undef, "xy"), "");
is($a, "abcxyz");
is($w, 3);

$w = 0;

is(substr($a, 3, 9999999, ""), "xyz");
is($a, "abc");
eval{substr($a, -99, 0, "") };
like($@@, $FATAL_MSG);
eval{substr($a, 99, 3, "") };
like($@@, $FATAL_MSG);

substr($a, 0, length($a), "foo");
is ($a, "foo");
is ($w, 0);

# using 4 arg substr as lvalue is a compile time error
eval 'substr($a,0,0,"") = "abc"';
like ($@@, qr/Can't modify substr/);
is ($a, "foo");

$a = "abcdefgh";
is(sub { shift }->(substr($a, 0, 4, "xxxx")), 'abcd');
is($a, 'xxxxefgh');

{
    my $y = 10;
    $y = "2" . $y;
    is ($y, 210);
}

# utf8 sanity
{
    my $x = substr("a\x{263a}b",0);
    is(length($x), 3);
    $x = substr($x,1,1);
    is($x, "\x{263a}");
    $x = $x x 2;
    is(length($x), 2);
    substr($x,0,1) = "abcd";
    is($x, "abcd\x{263a}");
    is(length($x), 5);
    $x = reverse $x;
    is(length($x), 5);
    is($x, "\x{263a}dcba");

    my $z = 10;
    $z = "21\x{263a}" . $z;
    is(length($z), 5);
    is($z, "21\x{263a}10");
}

# replacement should work on magical values
require Tie::Scalar;
my %data;
tie $data{'a'}, 'Tie::StdScalar';  # makes $data{'a'} magical
$data{a} = "firstlast";
is(substr($data{'a'}, 0, 5, ""), "first");
is($data{'a'}, "last");

# more utf8

# The following two originally from Ignasi Roca.

$x = "\xF1\xF2\xF3";
substr($x, 0, 1) = "\x{100}"; # Ignasi had \x{FF}
is(length($x), 3);
is($x, "\x{100}\xF2\xF3");
is(substr($x, 0, 1), "\x{100}");
is(substr($x, 1, 1), "\x{F2}");
is(substr($x, 2, 1), "\x{F3}");

$x = "\xF1\xF2\xF3";
substr($x, 0, 1) = "\x{100}\x{FF}"; # Ignasi had \x{FF}
is(length($x), 4);
is($x, "\x{100}\x{FF}\xF2\xF3");
is(substr($x, 0, 1), "\x{100}");
is(substr($x, 1, 1), "\x{FF}");
is(substr($x, 2, 1), "\x{F2}");
is(substr($x, 3, 1), "\x{F3}");

# more utf8 lval exercise

$x = "\xF1\xF2\xF3";
substr($x, 0, 2) = "\x{100}\xFF";
is(length($x), 3);
is($x, "\x{100}\xFF\xF3");
is(substr($x, 0, 1), "\x{100}");
is(substr($x, 1, 1), "\x{FF}");
is(substr($x, 2, 1), "\x{F3}");

$x = "\xF1\xF2\xF3";
substr($x, 1, 1) = "\x{100}\xFF";
is(length($x), 4);
is($x, "\xF1\x{100}\xFF\xF3");
is(substr($x, 0, 1), "\x{F1}");
is(substr($x, 1, 1), "\x{100}");
is(substr($x, 2, 1), "\x{FF}");
is(substr($x, 3, 1), "\x{F3}");

$x = "\xF1\xF2\xF3";
substr($x, 2, 1) = "\x{100}\xFF";
is(length($x), 4);
is($x, "\xF1\xF2\x{100}\xFF");
is(substr($x, 0, 1), "\x{F1}");
is(substr($x, 1, 1), "\x{F2}");
is(substr($x, 2, 1), "\x{100}");
is(substr($x, 3, 1), "\x{FF}");

$x = "\xF1\xF2\xF3";
substr($x, 3, 1) = "\x{100}\xFF";
is(length($x), 5);
is($x, "\xF1\xF2\xF3\x{100}\xFF");
is(substr($x, 0, 1), "\x{F1}");
is(substr($x, 1, 1), "\x{F2}");
is(substr($x, 2, 1), "\x{F3}");
is(substr($x, 3, 1), "\x{100}");
is(substr($x, 4, 1), "\x{FF}");

$x = "\xF1\xF2\xF3";
substr($x, -1, 1) = "\x{100}\xFF";
is(length($x), 4);
is($x, "\xF1\xF2\x{100}\xFF");
is(substr($x, 0, 1), "\x{F1}");
is(substr($x, 1, 1), "\x{F2}");
is(substr($x, 2, 1), "\x{100}");
is(substr($x, 3, 1), "\x{FF}");

$x = "\xF1\xF2\xF3";
substr($x, -1, 0) = "\x{100}\xFF";
is(length($x), 5);
is($x, "\xF1\xF2\x{100}\xFF\xF3");
is(substr($x, 0, 1), "\x{F1}");
is(substr($x, 1, 1), "\x{F2}");
is(substr($x, 2, 1), "\x{100}");
is(substr($x, 3, 1), "\x{FF}");
is(substr($x, 4, 1), "\x{F3}");

$x = "\xF1\xF2\xF3";
substr($x, 0, -1) = "\x{100}\xFF";
is(length($x), 3);
is($x, "\x{100}\xFF\xF3");
is(substr($x, 0, 1), "\x{100}");
is(substr($x, 1, 1), "\x{FF}");
is(substr($x, 2, 1), "\x{F3}");

$x = "\xF1\xF2\xF3";
substr($x, 0, -2) = "\x{100}\xFF";
is(length($x), 4);
is($x, "\x{100}\xFF\xF2\xF3");
is(substr($x, 0, 1), "\x{100}");
is(substr($x, 1, 1), "\x{FF}");
is(substr($x, 2, 1), "\x{F2}");
is(substr($x, 3, 1), "\x{F3}");

$x = "\xF1\xF2\xF3";
substr($x, 0, -3) = "\x{100}\xFF";
is(length($x), 5);
is($x, "\x{100}\xFF\xF1\xF2\xF3");
is(substr($x, 0, 1), "\x{100}");
is(substr($x, 1, 1), "\x{FF}");
is(substr($x, 2, 1), "\x{F1}");
is(substr($x, 3, 1), "\x{F2}");
is(substr($x, 4, 1), "\x{F3}");

$x = "\xF1\xF2\xF3";
substr($x, 1, -1) = "\x{100}\xFF";
is(length($x), 4);
is($x, "\xF1\x{100}\xFF\xF3");
is(substr($x, 0, 1), "\x{F1}");
is(substr($x, 1, 1), "\x{100}");
is(substr($x, 2, 1), "\x{FF}");
is(substr($x, 3, 1), "\x{F3}");

$x = "\xF1\xF2\xF3";
substr($x, -1, -1) = "\x{100}\xFF";
is(length($x), 5);
is($x, "\xF1\xF2\x{100}\xFF\xF3");
is(substr($x, 0, 1), "\x{F1}");
is(substr($x, 1, 1), "\x{F2}");
is(substr($x, 2, 1), "\x{100}");
is(substr($x, 3, 1), "\x{FF}");
is(substr($x, 4, 1), "\x{F3}");

# And tests for already-UTF8 one

$x = "\x{101}\x{F2}\x{F3}";
substr($x, 0, 1) = "\x{100}";
is(length($x), 3);
is($x, "\x{100}\xF2\xF3");
is(substr($x, 0, 1), "\x{100}");
is(substr($x, 1, 1), "\x{F2}");
is(substr($x, 2, 1), "\x{F3}");

$x = "\x{101}\x{F2}\x{F3}";
substr($x, 0, 1) = "\x{100}\x{FF}";
is(length($x), 4);
is($x, "\x{100}\x{FF}\xF2\xF3");
is(substr($x, 0, 1), "\x{100}");
is(substr($x, 1, 1), "\x{FF}");
is(substr($x, 2, 1), "\x{F2}");
is(substr($x, 3, 1), "\x{F3}");

$x = "\x{101}\x{F2}\x{F3}";
substr($x, 0, 2) = "\x{100}\xFF";
is(length($x), 3);
is($x, "\x{100}\xFF\xF3");
is(substr($x, 0, 1), "\x{100}");
is(substr($x, 1, 1), "\x{FF}");
is(substr($x, 2, 1), "\x{F3}");

$x = "\x{101}\x{F2}\x{F3}";
substr($x, 1, 1) = "\x{100}\xFF";
is(length($x), 4);
is($x, "\x{101}\x{100}\xFF\xF3");
is(substr($x, 0, 1), "\x{101}");
is(substr($x, 1, 1), "\x{100}");
is(substr($x, 2, 1), "\x{FF}");
is(substr($x, 3, 1), "\x{F3}");

$x = "\x{101}\x{F2}\x{F3}";
substr($x, 2, 1) = "\x{100}\xFF";
is(length($x), 4);
is($x, "\x{101}\xF2\x{100}\xFF");
is(substr($x, 0, 1), "\x{101}");
is(substr($x, 1, 1), "\x{F2}");
is(substr($x, 2, 1), "\x{100}");
is(substr($x, 3, 1), "\x{FF}");

$x = "\x{101}\x{F2}\x{F3}";
substr($x, 3, 1) = "\x{100}\xFF";
is(length($x), 5);
is($x, "\x{101}\x{F2}\x{F3}\x{100}\xFF");
is(substr($x, 0, 1), "\x{101}");
is(substr($x, 1, 1), "\x{F2}");
is(substr($x, 2, 1), "\x{F3}");
is(substr($x, 3, 1), "\x{100}");
is(substr($x, 4, 1), "\x{FF}");

$x = "\x{101}\x{F2}\x{F3}";
substr($x, -1, 1) = "\x{100}\xFF";
is(length($x), 4);
is($x, "\x{101}\xF2\x{100}\xFF");
is(substr($x, 0, 1), "\x{101}");
is(substr($x, 1, 1), "\x{F2}");
is(substr($x, 2, 1), "\x{100}");
is(substr($x, 3, 1), "\x{FF}");

$x = "\x{101}\x{F2}\x{F3}";
substr($x, -1, 0) = "\x{100}\xFF";
is(length($x), 5);
is($x, "\x{101}\xF2\x{100}\xFF\xF3");
is(substr($x, 0, 1), "\x{101}");
is(substr($x, 1, 1), "\x{F2}");
is(substr($x, 2, 1), "\x{100}");
is(substr($x, 3, 1), "\x{FF}");
is(substr($x, 4, 1), "\x{F3}");

$x = "\x{101}\x{F2}\x{F3}";
substr($x, 0, -1) = "\x{100}\xFF";
is(length($x), 3);
is($x, "\x{100}\xFF\xF3");
is(substr($x, 0, 1), "\x{100}");
is(substr($x, 1, 1), "\x{FF}");
is(substr($x, 2, 1), "\x{F3}");

$x = "\x{101}\x{F2}\x{F3}";
substr($x, 0, -2) = "\x{100}\xFF";
is(length($x), 4);
is($x, "\x{100}\xFF\xF2\xF3");
is(substr($x, 0, 1), "\x{100}");
is(substr($x, 1, 1), "\x{FF}");
is(substr($x, 2, 1), "\x{F2}");
is(substr($x, 3, 1), "\x{F3}");

$x = "\x{101}\x{F2}\x{F3}";
substr($x, 0, -3) = "\x{100}\xFF";
is(length($x), 5);
is($x, "\x{100}\xFF\x{101}\x{F2}\x{F3}");
is(substr($x, 0, 1), "\x{100}");
is(substr($x, 1, 1), "\x{FF}");
is(substr($x, 2, 1), "\x{101}");
is(substr($x, 3, 1), "\x{F2}");
is(substr($x, 4, 1), "\x{F3}");

$x = "\x{101}\x{F2}\x{F3}";
substr($x, 1, -1) = "\x{100}\xFF";
is(length($x), 4);
is($x, "\x{101}\x{100}\xFF\xF3");
is(substr($x, 0, 1), "\x{101}");
is(substr($x, 1, 1), "\x{100}");
is(substr($x, 2, 1), "\x{FF}");
is(substr($x, 3, 1), "\x{F3}");

$x = "\x{101}\x{F2}\x{F3}";
substr($x, -1, -1) = "\x{100}\xFF";
is(length($x), 5);
is($x, "\x{101}\xF2\x{100}\xFF\xF3");
is(substr($x, 0, 1), "\x{101}");
is(substr($x, 1, 1), "\x{F2}");
is(substr($x, 2, 1), "\x{100}");
is(substr($x, 3, 1), "\x{FF}");
is(substr($x, 4, 1), "\x{F3}");

substr($x = "ab", 0, 0, "\x{100}\x{200}");
is($x, "\x{100}\x{200}ab");

substr($x = "\x{100}\x{200}", 0, 0, "ab");
is($x, "ab\x{100}\x{200}");

substr($x = "ab", 1, 0, "\x{100}\x{200}");
is($x, "a\x{100}\x{200}b");

substr($x = "\x{100}\x{200}", 1, 0, "ab");
is($x, "\x{100}ab\x{200}");

substr($x = "ab", 2, 0, "\x{100}\x{200}");
is($x, "ab\x{100}\x{200}");

substr($x = "\x{100}\x{200}", 2, 0, "ab");
is($x, "\x{100}\x{200}ab");

substr($x = "\xFFb", 0, 0, "\x{100}\x{200}");
is($x, "\x{100}\x{200}\xFFb");

substr($x = "\x{100}\x{200}", 0, 0, "\xFFb");
is($x, "\xFFb\x{100}\x{200}");

substr($x = "\xFFb", 1, 0, "\x{100}\x{200}");
is($x, "\xFF\x{100}\x{200}b");

substr($x = "\x{100}\x{200}", 1, 0, "\xFFb");
is($x, "\x{100}\xFFb\x{200}");

substr($x = "\xFFb", 2, 0, "\x{100}\x{200}");
is($x, "\xFFb\x{100}\x{200}");

substr($x = "\x{100}\x{200}", 2, 0, "\xFFb");
is($x, "\x{100}\x{200}\xFFb");

# [perl #20933]
{ 
    my $s = "ab";
    my @@r; 
    $r[$_] = \ substr $s, $_, 1 for (0, 1);
    is(join("", map { $$_ } @@r), "ab");
}

# [perl #23207]
{
    sub ss {
	substr($_[0],0,1) ^= substr($_[0],1,1) ^=
	substr($_[0],0,1) ^= substr($_[0],1,1);
    }
    my $x = my $y = 'AB'; ss $x; ss $y;
    is($x, $y);
}

# [perl #24605]
{
    my $x = "0123456789\x{500}";
    my $y = substr $x, 4;
    is(substr($x, 7, 1), "7");
}

# multiple assignments to lvalue [perl #24346]   
{
    my $x = "abcdef";
    for (substr($x,1,3)) {
	is($_, 'bcd');
	$_ = 'XX';
	is($_, 'XX');
	is($x, 'aXXef'); 
	$_ = "\xFF";
	is($_, "\xFF"); 
	is($x, "a\xFFef");
	$_ = "\xF1\xF2\xF3\xF4\xF5\xF6";
	is($_, "\xF1\xF2\xF3\xF4\xF5\xF6");
	is($x, "a\xF1\xF2\xF3\xF4\xF5\xF6ef"); 
	$_ = 'YYYY';
	is($_, 'YYYY'); 
	is($x, 'aYYYYef');
    }
    $x = "abcdef";
    for (substr($x,1)) {
	is($_, 'bcdef');
	$_ = 'XX';
	is($_, 'XX');
	is($x, 'aXX');
	$x .= "frompswiggle";
	is $_, "XXfrompswiggle";
    }
    $x = "abcdef";
    for (substr($x,1,-1)) {
	is($_, 'bcde');
	$_ = 'XX';
	is($_, 'XX');
	is($x, 'aXXf');
	$x .= "frompswiggle";
	is $_, "XXffrompswiggl";
    }
    $x = "abcdef";
    for (substr($x,-5,3)) {
	is($_, 'bcd');
	$_ = 'XX';   # now $_ is substr($x, -4, 2)
	is($_, 'XX');
	is($x, 'aXXef');
	$x .= "frompswiggle";
	is $_, "gg";
    }
    $x = "abcdef";
    for (substr($x,-5)) {
	is($_, 'bcdef');
	$_ = 'XX';  # now substr($x, -2)
	is($_, 'XX');
	is($x, 'aXX');
	$x .= "frompswiggle";
	is $_, "le";
    }
    $x = "abcdef";
    for (substr($x,-5,-1)) {
	is($_, 'bcde');
	$_ = 'XX';  # now substr($x, -3, -1)
	is($_, 'XX');
	is($x, 'aXXf');
	$x .= "frompswiggle";
	is $_, "gl";
    }
}

# Also part of perl #24346; scalar(substr...) should not affect lvalueness
{
    my $str = "abcdef";
    sub { $_[0] = 'dea' }->( scalar substr $str, 3, 2 );
    is $str, 'abcdeaf', 'scalar does not affect lvalueness of substr';
}

# [perl #24200] string corruption with lvalue sub

{
    sub bar: lvalue { substr $krunch, 0 }
    bar = "XXX";
    is(bar, 'XXX');
    $krunch = '123456789';
    is(bar, '123456789');
}

# [perl #29149]
{
    my $text  = "0123456789\xED ";
    utf8::upgrade($text);
    my $pos = 5;
    pos($text) = $pos;
    my $a = substr($text, $pos, $pos);
    is(substr($text,$pos,1), $pos);

}

# [perl #23765]
{
    my $a = pack("C", 0xbf);
    no warnings 'deprecated';
    substr($a, -1) &= chr(0xfeff);
    is($a, "\xbf");
}

# [perl #34976] incorrect caching of utf8 substr length
{
    my  $a = "abcd\x{100}";
    is(substr($a,1,2), 'bc');
    is(substr($a,1,1), 'b');
}

# [perl #62646] offsets exceeding 32 bits on 64-bit system
SKIP: {
    skip("32-bit system", 24) unless ~0 > 0xffffffff;
    my $a = "abc";
    my $s;
    my $r;

    utf8::downgrade($a);
    for (1..2) {
	$w = 0;
	$r = substr($a, 0xffffffff, 1);
	is($r, undef);
	is($w, 1);

	$w = 0;
	$r = substr($a, 0xffffffff+1, 1);
	is($r, undef);
	is($w, 1);

	$w = 0;
	ok( !eval { $r = substr($s=$a, 0xffffffff, 1, "_"); 1 } );
	is($r, undef);
	is($s, $a);
	is($w, 0);

	$w = 0;
	ok( !eval { $r = substr($s=$a, 0xffffffff+1, 1, "_"); 1 } );
	is($r, undef);
	is($s, $a);
	is($w, 0);

	utf8::upgrade($a);
    }
}

# [perl #77692] UTF8 cache not being reset when TARG is reused
ok eval {
 local ${^UTF8CACHE} = -1;
 for my $i (0..1)
 {
   my $dummy = length(substr("\x{100}",0,$i));
 }
 1
}, 'UTF8 cache is reset when TARG is reused [perl #77692]';

{
    use utf8;
    use open qw( :utf8 :std );
    no warnings 'once';

    my $t = "";
    substr $t, 0, 0, *ワルド;
    is($t, "*main::ワルド", "substr works on UTF-8 globs");

    $t = "The World!";
    substr $t, 0, 9, *ザ::ワルド;
    is($t, "*ザ::ワルド!", "substr works on a UTF-8 glob + stash");
}

{
    my $x = *foo;
    my $y = \substr *foo, 0, 0;
    is ref \$x, 'GLOB', '\substr does not coerce its glob arg just yet';
    $x = \"foo";
    $y = \substr *foo, 0, 0;
    is ref \$x, 'REF', '\substr does not coerce its ref arg just yet';
}

# Test that UTF8-ness of magic var changing does not confuse substr lvalue
# assignment.
# We use overloading for our magic var, but a typeglob would work, too.
package o {
    use overload '""' => sub { ++our $count; $_[0][0] }
}
my $refee = bless ["\x{100}a"], o::;
my $substr = \substr $refee, -2;	# UTF8 flag still off for $$substr.
$$substr = "b";				# UTF8 flag turns on when setsubstr
is $refee, "b",				# magic stringifies $$substr.
     'substr lvalue assignment when stringification turns on UTF8ness';

# Test that changing UTF8-ness does not confuse 4-arg substr.
$refee = bless [], "\x{100}a";
# stringify without returning on UTF8 flag on $refee:
my $string = $refee; $string = "$string";
substr $refee, 0, 0, "\xff";
is $refee, "\xff$string",
  '4-arg substr with target UTF8ness turning on when stringified';
$refee = bless [], "\x{100}";
() = "$refee"; # UTF8 flag now on
bless $refee, "\xff";
$string = $refee; $string = "$string";
substr $refee, 0, 0, "\xff";
is $refee, "\xff$string",
  '4-arg substr with target UTF8ness turning off when stringified';

# Overload count
$refee = bless ["foo"], o::;
$o::count = 0;
substr $refee, 0, 0, "";
is $o::count, 1, '4-arg substr calls overloading once on the target';
$refee = bless ["\x{100}"], o::;
() = "$refee"; # turn UTF8 flag on
$o::count = 0;
() = substr $refee, 0;
is $o::count, 1, 'rvalue substr calls overloading once on utf8 target';
$o::count = 0;
$refee = "";
${\substr $refee, 0} = bless ["\x{100}"], o::;
is $o::count, 1, 'assigning utf8 overload to substr lvalue calls ovld 1ce';

# [perl #7678] core dump with substr reference and localisation
{$b="abcde"; local $k; *k=\substr($b, 2, 1);}

} # sub run_tests - put tests above this line that can run in threads


my $destroyed;
{ package Class; DESTROY { ++$destroyed; } }

$destroyed = 0;
{
    my $x = '';
    substr($x,0,1) = "";
    $x = bless({}, 'Class');
}
is($destroyed, 1, 'Timely scalar destruction with lvalue substr');

{
    my $result_3363;
    sub a_3363 {
        my ($word, $replace) = @@_;
        my $ref = \substr($word, 0, 1);
        $$ref = $replace;
        if ($replace eq "b") {
            $result_3363 = $word;
        } else {
            a_3363($word, "b");
        }
    }
    a_3363($_, "v") for "test";

    is($result_3363, "best", "ref-to-substr retains lvalue-ness under recursion [perl #3363]");
}
@


1.14
log
@Merge perl-5.18.2 plus local patches, remove old files

OK espie@@ sthen@@ deraadt@@
@
text
@d7 2
a8 1
    @@INC = '../lib';
d25 1
a25 3
BEGIN { require './test.pl'; }

plan(387);
d686 7
d717 1
@


1.13
log
@merge/resolve conflicts/add files
@
text
@d26 1
a26 1
plan(381);
d789 45
@


1.12
log
@remove files no longer in perl 5.12.2 (or that have moved)
@
text
@d1 1
a1 1
#!./perl -w
d24 1
a24 1
require './test.pl';
d26 1
a26 1
plan(334);
d45 2
a46 14

$[ = 1;

is(substr($a,1,3), 'abc' );  # P=Q R S
is(substr($a,4,3), 'def' );  # P Q R S
is(substr($a,7,999), 'xyz');# P Q S R
$b = substr($a,999,999) ; # warn # P R Q S
is($w--, 1);
eval{substr($a,999,999) = "" ; } ; # P R Q S
like ($@@, $FATAL_MSG);
is(substr($a,1,-6), 'abc' );# P=Q R S
is(substr($a,-3,1), 'x' );  # P Q R S

$[ = 0;
d191 5
d640 45
d722 97
@


1.11
log
@Merge in perl 5.10.1; part two
@
text
@@


1.10
log
@fix conflicts and merge in local changes to perl 5.10.0
@
text
@d28 6
d652 1
a652 2
    my $foo = "a";
    sub bar: lvalue { substr $foo, 0 }
d655 1
a655 1
    $foo = '123456789';
d682 2
@


1.9
log
@merge in perl 5.8.8
@
text
@d26 1
a26 1
plan(325);
d621 20
@


1.8
log
@merge 5.8.5 into HEAD
remove now-unused files
crank libperl shared library major number
update Makefile.bsd-wrapper
tweak openbsd hints file for arm and m68k
@
text
@d1 1
a1 3
#!./perl

print "1..181\n";
d24 3
a26 1
sub ok { print (($_[1] ? "" : "not ") . "ok $_[0]\n") }
d28 1
a28 1
$FATAL_MSG = '^substr outside of string' ;
d30 3
a32 3
ok 1, substr($a,0,3) eq 'abc';   # P=Q R S
ok 2, substr($a,3,3) eq 'def';   # P Q R S
ok 3, substr($a,6,999) eq 'xyz'; # P Q S R
d34 1
a34 1
ok 4, $w-- == 1 ;
d36 3
a38 3
ok 5, $@@ =~ /$FATAL_MSG/;
ok 6, substr($a,0,-6) eq 'abc';  # P=Q R S
ok 7, substr($a,-3,1) eq 'x';    # P Q R S
d42 3
a44 3
ok 8, substr($a,1,3) eq 'abc' ;  # P=Q R S
ok 9, substr($a,4,3) eq 'def' ;  # P Q R S
ok 10, substr($a,7,999) eq 'xyz';# P Q S R
d46 1
a46 1
ok 11, $w-- == 1 ;
d48 3
a50 3
ok 12, $@@ =~ /$FATAL_MSG/;
ok 13, substr($a,1,-6) eq 'abc' ;# P=Q R S
ok 14, substr($a,-3,1) eq 'x' ;  # P Q R S
d55 1
a55 1
ok 15, $a eq 'abcXYZxyz' ;
d57 1
a57 1
ok 16, $a eq 'cXYZxyz' ;
d59 1
a59 1
ok 17, $a eq 'abcXYZxyz' ;
d61 1
a61 1
ok 18, $a eq '12345678abcXYZxyz' ;
d63 1
a63 1
ok 19, $a eq '12345678abcXYZdef';
d65 1
a65 1
ok 20, $a eq '12345678abcXYZ<' ;
d67 1
a67 1
ok 21, $a eq '12345678abcXYZ12345678' ;
d71 2
a72 2
ok 22, substr($a,6) eq 'xyz' ;        # P Q R=S
ok 23, substr($a,-3) eq 'xyz' ;       # P Q R=S
d74 1
a74 1
ok 24, $w-- == 1 ;
d76 5
a80 5
ok 25, $@@ =~ /$FATAL_MSG/;
ok 26, substr($a,0) eq 'abcdefxyz' ;  # P=Q R=S
ok 27, substr($a,9) eq '' ;           # P Q=R=S
ok 28, substr($a,-11) eq 'abcdefxyz'; # Q P R=S
ok 29, substr($a,-9) eq 'abcdefxyz';  # P=Q R=S
d85 1
a85 1
ok 30, $w-- == 1 ;
d87 1
a87 1
ok 31, $@@ =~ /$FATAL_MSG/;
d89 1
a89 1
ok 32, $w-- == 1 ;
d91 11
a101 11
ok 33, $@@ =~ /$FATAL_MSG/;
ok 34, substr($a,-5,-7) eq '';  # R P=Q S
ok 35, substr($a, 2,-7) eq '';  # R P Q S
ok 36, substr($a,-3,-7) eq '';  # R P Q S
ok 37, substr($a, 2,-5) eq '';  # P=R Q S
ok 38, substr($a,-3,-5) eq '';  # P=R Q S
ok 39, substr($a, 2,-4) eq '';  # P R Q S
ok 40, substr($a,-3,-4) eq '';  # P R Q S
ok 41, substr($a, 5,-6) eq '';  # R P Q=S
ok 42, substr($a, 5,-5) eq '';  # P=R Q S
ok 43, substr($a, 5,-3) eq '';  # P R Q=S
d103 1
a103 1
ok 44, $w-- == 1 ;
d105 1
a105 1
ok 45, $@@ =~ /$FATAL_MSG/;
d107 1
a107 1
ok 46, $w-- == 1 ;
d109 1
a109 1
ok 47, $@@ =~ /$FATAL_MSG/;
d111 1
a111 1
ok 48, $w-- == 1 ;
d113 1
a113 1
ok 49, $@@ =~ /$FATAL_MSG/;
d115 1
a115 1
ok 50, $w-- == 1 ;
d117 1
a117 1
ok 51, $@@ =~ /$FATAL_MSG/;
d119 26
a144 26
ok 52, substr($a,-7,2) eq '';   # Q P=R S
ok 53, substr($a,-7,4) eq '54'; # Q P R S
ok 54, substr($a,-7,7) eq '54321';# Q P R=S
ok 55, substr($a,-7,9) eq '54321';# Q P S R
ok 56, substr($a,-5,0) eq '';   # P=Q=R S
ok 57, substr($a,-5,3) eq '543';# P=Q R S
ok 58, substr($a,-5,5) eq '54321';# P=Q R=S
ok 59, substr($a,-5,7) eq '54321';# P=Q S R
ok 60, substr($a,-3,0) eq '';   # P Q=R S
ok 61, substr($a,-3,3) eq '321';# P Q R=S
ok 62, substr($a,-2,3) eq '21'; # P Q S R
ok 63, substr($a,0,-5) eq '';   # P=Q=R S
ok 64, substr($a,2,-3) eq '';   # P Q=R S
ok 65, substr($a,0,0) eq '';    # P=Q=R S
ok 66, substr($a,0,5) eq '54321';# P=Q R=S
ok 67, substr($a,0,7) eq '54321';# P=Q S R
ok 68, substr($a,2,0) eq '';    # P Q=R S
ok 69, substr($a,2,3) eq '321'; # P Q R=S
ok 70, substr($a,5,0) eq '';    # P Q=R=S
ok 71, substr($a,5,2) eq '';    # P Q=S R
ok 72, substr($a,-7,-5) eq '';  # Q P=R S
ok 73, substr($a,-7,-2) eq '543';# Q P R S
ok 74, substr($a,-5,-5) eq '';  # P=Q=R S
ok 75, substr($a,-5,-2) eq '543';# P=Q R S
ok 76, substr($a,-3,-3) eq '';  # P Q=R S
ok 77, substr($a,-3,-1) eq '32';# P Q R S
d148 6
a153 6
ok 78, substr($a,-2,2) eq '';   # Q P=R=S
ok 79, substr($a,0,0) eq '';    # P=Q=R=S
ok 80, substr($a,0,1) eq '';    # P=Q=S R
ok 81, substr($a,-2,3) eq '';   # Q P=S R
ok 82, substr($a,-2) eq '';     # Q P=R=S
ok 83, substr($a,0) eq '';      # P=Q=R=S
d156 1
a156 1
ok 84, substr($a,0,-1) eq '';   # R P=Q=S
d158 1
a158 1
ok 85, $w-- == 1 ;
d160 1
a160 1
ok 86, $@@ =~ /$FATAL_MSG/;
d163 1
a163 1
ok 87, $w-- == 1 ;
d165 1
a165 1
ok 88, $@@ =~ /$FATAL_MSG/;
d168 1
a168 1
ok 89, $w-- == 1 ;
d170 1
a170 1
ok 90, $@@ =~ /$FATAL_MSG/;
d173 1
a173 1
ok 91, $w-- == 1 ;
d175 1
a175 1
ok 92, $@@ =~ /$FATAL_MSG/;
d178 1
a178 1
ok 93, $w-- == 1 ;
d180 1
a180 1
ok 94, $@@ =~ /$FATAL_MSG/;
d183 1
a183 1
ok 95, $w-- == 1 ;
d185 1
a185 1
ok 96, $@@ =~ /$FATAL_MSG/;
d188 1
a188 1
ok 97, $w-- == 1 ;
d190 1
a190 1
ok 98, $@@ =~ /$FATAL_MSG/;
d193 1
a193 1
ok 99, $w-- == 1 ;
d195 1
a195 1
ok 100, $@@ =~ /$FATAL_MSG/;
d199 1
a199 1
ok 101, $a eq 'zxcvbnm';
d201 1
a201 1
ok 102, $a eq 'zxcvbnm';
d203 1
a203 1
ok 103, $a eq 'zxcvbnm';
d205 1
a205 1
ok 104, $a eq 'pqcvbnm';
d207 1
a207 1
ok 105, $a eq 'pqrcvbnm';
d209 1
a209 1
ok 106, $a eq 'pqrcvbnmasd';
d211 1
a211 1
ok 107, $a eq 'ioprcvbnmasd';
d213 1
a213 1
ok 108, $a eq 'fghvbnmasd';
d215 1
a215 1
ok 109, $a eq 'fghjklsd';
d217 1
a217 1
ok 110, $a eq 'fgh1234lsd';
d226 1
a226 1
    ok 111, $txt eq "FoX";
d230 1
a230 1
    ok 112, $txt eq "X";
d239 3
a241 1
  ok 113, substr($s,0,7) eq "FooRRAY" && !($w-=2);
d245 1
a245 1
ok 114, $w == 0;
d250 10
a259 6
ok 115, substr($a, 0, 3, "") eq "abc" && $a eq "xyz";
ok 116, substr($a, 0, 0, "abc") eq "" && $a eq "abcxyz";
ok 117, substr($a, 3, -1, "") eq "xy" && $a eq "abcz";

ok 118, substr($a, 3, undef, "xy") eq "" && $a eq "abcxyz"
                 && $w == 3;
d263 2
a264 1
ok 119, substr($a, 3, 9999999, "") eq "xyz" && $a eq "abc";
d266 1
a266 1
ok 120, $@@ =~ /$FATAL_MSG/;
d268 1
a268 1
ok 121, $@@ =~ /$FATAL_MSG/;
d271 2
a272 1
ok 122, $a eq "foo" && !$w;
d276 2
a277 1
ok 123, $@@ && $@@ =~ /Can't modify substr/ && $a eq "foo";
d280 2
a281 2
ok 124, sub { shift }->(substr($a, 0, 4, "xxxx")) eq 'abcd';
ok 125, $a eq 'xxxxefgh';
d286 1
a286 1
    ok 126, $y+0 == 210;
d292 1
a292 1
    ok 127, length($x) == 3;
d294 1
a294 1
    ok 128, $x eq "\x{263a}";
d296 1
a296 1
    ok 129, length($x) == 2;
d298 2
a299 2
    ok 130, $x eq "abcd\x{263a}";
    ok 131, length($x) == 5;
d301 2
a302 2
    ok 132, length($x) == 5;
    ok 133, $x eq "\x{263a}dcba";
d306 2
a307 2
    ok 134, length($z) == 5;
    ok 135, $z eq "21\x{263a}10";
d315 2
a316 1
ok 136, substr($data{'a'}, 0, 5, "") eq "first" && $data{'a'} eq "last";
d324 5
a328 5
ok 137, length($x) == 3 &&
        $x eq "\x{100}\xF2\xF3" &&
        substr($x, 0, 1) eq "\x{100}" &&
        substr($x, 1, 1) eq "\x{F2}" &&
        substr($x, 2, 1) eq "\x{F3}";
d332 6
a337 6
ok 138, length($x) == 4 &&
        $x eq "\x{100}\x{FF}\xF2\xF3" &&
        substr($x, 0, 1) eq "\x{100}" &&
        substr($x, 1, 1) eq "\x{FF}" &&
        substr($x, 2, 1) eq "\x{F2}" &&
        substr($x, 3, 1) eq "\x{F3}";
d343 5
a347 5
ok 139, length($x) == 3 &&
        $x eq "\x{100}\xFF\xF3" &&
        substr($x, 0, 1) eq "\x{100}" &&
        substr($x, 1, 1) eq "\x{FF}" &&
        substr($x, 2, 1) eq "\x{F3}";
d351 6
a356 6
ok 140, length($x) == 4 &&
        $x eq "\xF1\x{100}\xFF\xF3" &&
        substr($x, 0, 1) eq "\x{F1}" &&
        substr($x, 1, 1) eq "\x{100}" &&
        substr($x, 2, 1) eq "\x{FF}" &&
        substr($x, 3, 1) eq "\x{F3}";
d360 6
a365 6
ok 141, length($x) == 4 &&
        $x eq "\xF1\xF2\x{100}\xFF" &&
        substr($x, 0, 1) eq "\x{F1}" &&
        substr($x, 1, 1) eq "\x{F2}" &&
        substr($x, 2, 1) eq "\x{100}" &&
        substr($x, 3, 1) eq "\x{FF}";
d369 7
a375 7
ok 142, length($x) == 5 &&
        $x eq "\xF1\xF2\xF3\x{100}\xFF" &&
        substr($x, 0, 1) eq "\x{F1}" &&
        substr($x, 1, 1) eq "\x{F2}" &&
        substr($x, 2, 1) eq "\x{F3}" &&
        substr($x, 3, 1) eq "\x{100}" &&
        substr($x, 4, 1) eq "\x{FF}";
d379 6
a384 6
ok 143, length($x) == 4 &&
        $x eq "\xF1\xF2\x{100}\xFF" &&
        substr($x, 0, 1) eq "\x{F1}" &&
        substr($x, 1, 1) eq "\x{F2}" &&
        substr($x, 2, 1) eq "\x{100}" &&
        substr($x, 3, 1) eq "\x{FF}";
d388 7
a394 7
ok 144, length($x) == 5 &&
        $x eq "\xF1\xF2\x{100}\xFF\xF3" &&
        substr($x, 0, 1) eq "\x{F1}" &&
        substr($x, 1, 1) eq "\x{F2}" &&
        substr($x, 2, 1) eq "\x{100}" &&
        substr($x, 3, 1) eq "\x{FF}" &&
        substr($x, 4, 1) eq "\x{F3}";
d398 5
a402 5
ok 145, length($x) == 3 &&
        $x eq "\x{100}\xFF\xF3" &&
        substr($x, 0, 1) eq "\x{100}" &&
        substr($x, 1, 1) eq "\x{FF}" &&
        substr($x, 2, 1) eq "\x{F3}";
d406 6
a411 6
ok 146, length($x) == 4 &&
        $x eq "\x{100}\xFF\xF2\xF3" &&
        substr($x, 0, 1) eq "\x{100}" &&
        substr($x, 1, 1) eq "\x{FF}" &&
        substr($x, 2, 1) eq "\x{F2}" &&
        substr($x, 3, 1) eq "\x{F3}";
d415 7
a421 7
ok 147, length($x) == 5 &&
        $x eq "\x{100}\xFF\xF1\xF2\xF3" &&
        substr($x, 0, 1) eq "\x{100}" &&
        substr($x, 1, 1) eq "\x{FF}" &&
        substr($x, 2, 1) eq "\x{F1}" &&
        substr($x, 3, 1) eq "\x{F2}" &&
        substr($x, 4, 1) eq "\x{F3}";
d425 6
a430 6
ok 148, length($x) == 4 &&
        $x eq "\xF1\x{100}\xFF\xF3" &&
        substr($x, 0, 1) eq "\x{F1}" &&
        substr($x, 1, 1) eq "\x{100}" &&
        substr($x, 2, 1) eq "\x{FF}" &&
        substr($x, 3, 1) eq "\x{F3}";
d434 7
a440 7
ok 149, length($x) == 5 &&
        $x eq "\xF1\xF2\x{100}\xFF\xF3" &&
        substr($x, 0, 1) eq "\x{F1}" &&
        substr($x, 1, 1) eq "\x{F2}" &&
        substr($x, 2, 1) eq "\x{100}" &&
        substr($x, 3, 1) eq "\x{FF}" &&
        substr($x, 4, 1) eq "\x{F3}";
d446 5
a450 5
ok 150, length($x) == 3 &&
        $x eq "\x{100}\xF2\xF3" &&
        substr($x, 0, 1) eq "\x{100}" &&
        substr($x, 1, 1) eq "\x{F2}" &&
        substr($x, 2, 1) eq "\x{F3}";
d454 6
a459 6
ok 151, length($x) == 4 &&
        $x eq "\x{100}\x{FF}\xF2\xF3" &&
        substr($x, 0, 1) eq "\x{100}" &&
        substr($x, 1, 1) eq "\x{FF}" &&
        substr($x, 2, 1) eq "\x{F2}" &&
        substr($x, 3, 1) eq "\x{F3}";
d463 5
a467 5
ok 152, length($x) == 3 &&
        $x eq "\x{100}\xFF\xF3" &&
        substr($x, 0, 1) eq "\x{100}" &&
        substr($x, 1, 1) eq "\x{FF}" &&
        substr($x, 2, 1) eq "\x{F3}";
d471 6
a476 6
ok 153, length($x) == 4 &&
        $x eq "\x{101}\x{100}\xFF\xF3" &&
        substr($x, 0, 1) eq "\x{101}" &&
        substr($x, 1, 1) eq "\x{100}" &&
        substr($x, 2, 1) eq "\x{FF}" &&
        substr($x, 3, 1) eq "\x{F3}";
d480 6
a485 6
ok 154, length($x) == 4 &&
        $x eq "\x{101}\xF2\x{100}\xFF" &&
        substr($x, 0, 1) eq "\x{101}" &&
        substr($x, 1, 1) eq "\x{F2}" &&
        substr($x, 2, 1) eq "\x{100}" &&
        substr($x, 3, 1) eq "\x{FF}";
d489 7
a495 7
ok 155, length($x) == 5 &&
        $x eq "\x{101}\x{F2}\x{F3}\x{100}\xFF" &&
        substr($x, 0, 1) eq "\x{101}" &&
        substr($x, 1, 1) eq "\x{F2}" &&
        substr($x, 2, 1) eq "\x{F3}" &&
        substr($x, 3, 1) eq "\x{100}" &&
        substr($x, 4, 1) eq "\x{FF}";
d499 6
a504 6
ok 156, length($x) == 4 &&
        $x eq "\x{101}\xF2\x{100}\xFF" &&
        substr($x, 0, 1) eq "\x{101}" &&
        substr($x, 1, 1) eq "\x{F2}" &&
        substr($x, 2, 1) eq "\x{100}" &&
        substr($x, 3, 1) eq "\x{FF}";
d508 7
a514 7
ok 157, length($x) == 5 &&
        $x eq "\x{101}\xF2\x{100}\xFF\xF3" &&
        substr($x, 0, 1) eq "\x{101}" &&
        substr($x, 1, 1) eq "\x{F2}" &&
        substr($x, 2, 1) eq "\x{100}" &&
        substr($x, 3, 1) eq "\x{FF}" &&
        substr($x, 4, 1) eq "\x{F3}";
d518 5
a522 5
ok 158, length($x) == 3 &&
        $x eq "\x{100}\xFF\xF3" &&
        substr($x, 0, 1) eq "\x{100}" &&
        substr($x, 1, 1) eq "\x{FF}" &&
        substr($x, 2, 1) eq "\x{F3}";
d526 6
a531 6
ok 159, length($x) == 4 &&
        $x eq "\x{100}\xFF\xF2\xF3" &&
        substr($x, 0, 1) eq "\x{100}" &&
        substr($x, 1, 1) eq "\x{FF}" &&
        substr($x, 2, 1) eq "\x{F2}" &&
        substr($x, 3, 1) eq "\x{F3}";
d535 7
a541 7
ok 160, length($x) == 5 &&
        $x eq "\x{100}\xFF\x{101}\x{F2}\x{F3}" &&
        substr($x, 0, 1) eq "\x{100}" &&
        substr($x, 1, 1) eq "\x{FF}" &&
        substr($x, 2, 1) eq "\x{101}" &&
        substr($x, 3, 1) eq "\x{F2}" &&
        substr($x, 4, 1) eq "\x{F3}";
d545 6
a550 6
ok 161, length($x) == 4 &&
        $x eq "\x{101}\x{100}\xFF\xF3" &&
        substr($x, 0, 1) eq "\x{101}" &&
        substr($x, 1, 1) eq "\x{100}" &&
        substr($x, 2, 1) eq "\x{FF}" &&
        substr($x, 3, 1) eq "\x{F3}";
d554 7
a560 7
ok 162, length($x) == 5 &&
        $x eq "\x{101}\xF2\x{100}\xFF\xF3" &&
        substr($x, 0, 1) eq "\x{101}" &&
        substr($x, 1, 1) eq "\x{F2}" &&
        substr($x, 2, 1) eq "\x{100}" &&
        substr($x, 3, 1) eq "\x{FF}" &&
        substr($x, 4, 1) eq "\x{F3}";
d563 1
a563 1
ok 163, $x eq "\x{100}\x{200}ab";
d566 1
a566 1
ok 164, $x eq "ab\x{100}\x{200}";
d569 1
a569 1
ok 165, $x eq "a\x{100}\x{200}b";
d572 1
a572 1
ok 166, $x eq "\x{100}ab\x{200}";
d575 1
a575 1
ok 167, $x eq "ab\x{100}\x{200}";
d578 1
a578 1
ok 168, $x eq "\x{100}\x{200}ab";
d581 1
a581 1
ok 169, $x eq "\x{100}\x{200}\xFFb";
d584 1
a584 1
ok 170, $x eq "\xFFb\x{100}\x{200}";
d587 1
a587 1
ok 171, $x eq "\xFF\x{100}\x{200}b";
d590 1
a590 1
ok 172, $x eq "\x{100}\xFFb\x{200}";
d593 1
a593 1
ok 173, $x eq "\xFFb\x{100}\x{200}";
d596 1
a596 1
ok 174, $x eq "\x{100}\x{200}\xFFb";
d603 1
a603 1
    ok 175, join("", map { $$_ } @@r) eq "ab";
d613 1
a613 1
    ok 176, $x eq $y;
d620 1
a620 1
    ok 177, substr($x, 7, 1) eq "7";
d629 1
a629 1
    ok 178, bar eq 'XXX';
d631 1
a631 1
    ok 179, bar eq '123456789';
d641 1
a641 1
    ok 180, substr($text,$pos,1) eq $pos;
d649 8
a656 1
    ok 181, $a eq "\xbf";
@


1.7
log
@merge local changes into perl-5.8.3
@
text
@d3 1
a3 1
print "1..177\n";
d611 29
@


1.6
log
@Resolve conflicts for perl 5.8.2, remove old files, and add OpenBSD-specific scaffolding
@
text
@d3 1
a3 1
print "1..176\n";
d604 7
@


1.5
log
@merge in perl 5.6.1 with our local changes
@
text
@d3 1
a3 1
print "1..174\n";
d588 17
@


1.4
log
@perl-5.6.0 + local changes
@
text
@d1 1
d3 1
a3 1
print "1..125\n";
d8 2
a9 1
    unshift @@INC, '../lib' if -d '../lib' ;
d273 315
@


1.3
log
@perl5.005_03 (stock)
@
text
@a0 1
#!./perl
d2 1
a2 1
print "1..106\n";
d6 5
a11 2
BEGIN { $^W = 1 };

d24 3
a26 1
sub fail { !defined(shift) && $w-- };
d28 9
a36 6
print (substr($a,0,3) eq 'abc' ? "ok 1\n" : "not ok 1\n");   # P=Q R S
print (substr($a,3,3) eq 'def' ? "ok 2\n" : "not ok 2\n");   # P Q R S
print (substr($a,6,999) eq 'xyz' ? "ok 3\n" : "not ok 3\n"); # P Q S R
print (fail(substr($a,999,999)) ? "ok 4\n" : "not ok 4\n");  # P R Q S
print (substr($a,0,-6) eq 'abc' ? "ok 5\n" : "not ok 5\n");  # P=Q R S
print (substr($a,-3,1) eq 'x' ? "ok 6\n" : "not ok 6\n");    # P Q R S
d40 9
a48 6
print (substr($a,1,3) eq 'abc' ? "ok 7\n" : "not ok 7\n");   # P=Q R S
print (substr($a,4,3) eq 'def' ? "ok 8\n" : "not ok 8\n");   # P Q R S
print (substr($a,7,999) eq 'xyz' ? "ok 9\n" : "not ok 9\n"); # P Q S R
print (fail(substr($a,999,999)) ? "ok 10\n" : "not ok 10\n");# P R Q S
print (substr($a,1,-6) eq 'abc' ? "ok 11\n" : "not ok 11\n");# P=Q R S
print (substr($a,-3,1) eq 'x' ? "ok 12\n" : "not ok 12\n");  # P Q R S
d53 1
a53 1
print $a eq 'abcXYZxyz' ? "ok 13\n" : "not ok 13\n";
d55 1
a55 1
print $a eq 'cXYZxyz' ? "ok 14\n" : "not ok 14\n";
d57 1
a57 1
print $a eq 'abcXYZxyz' ? "ok 15\n" : "not ok 15 $a\n";
d59 1
a59 1
print $a eq '12345678abcXYZxyz' ? "ok 16\n" : "not ok 16\n";
d61 1
a61 1
print $a eq '12345678abcXYZdef' ? "ok 17\n" : "not ok 17\n";
d63 1
a63 1
print $a eq '12345678abcXYZ<' ? "ok 18\n" : "not ok 18\n";
d65 1
a65 1
print $a eq '12345678abcXYZ12345678' ? "ok 19\n" : "not ok 19\n";
d69 10
a78 7
print (substr($a,6) eq 'xyz' ? "ok 20\n" : "not ok 20\n");   # P Q R=S
print (substr($a,-3) eq 'xyz' ? "ok 21\n" : "not ok 21\n");  # P Q R=S
print (fail(substr($a,999)) ? "ok 22\n" : "not ok 22\n");    # P R=S Q
print (substr($a,0) eq 'abcdefxyz' ? "ok 23\n" : "not ok 23\n");# P=Q R=S
print (substr($a,9) eq '' ? "ok 24\n" : "not ok 24\n");      # P Q=R=S
print (substr($a,-11) eq 'abcdefxyz' ? "ok 25\n" : "not ok 25\n");# Q P R=S
print (substr($a,-9) eq 'abcdefxyz' ? "ok 26\n" : "not ok 26\n");  # P=Q R=S
d82 61
a142 43
print (fail(substr($a,-7, 1)) ? "ok 27\n" : "not ok 27\n");  # Q R P S
print (fail(substr($a,-7,-6)) ? "ok 28\n" : "not ok 28\n");  # Q R P S
print (substr($a,-5,-7) eq '' ? "ok 29\n" : "not ok 29\n");  # R P=Q S
print (substr($a, 2,-7) eq '' ? "ok 30\n" : "not ok 30\n");  # R P Q S
print (substr($a,-3,-7) eq '' ? "ok 31\n" : "not ok 31\n");  # R P Q S
print (substr($a, 2,-5) eq '' ? "ok 32\n" : "not ok 32\n");  # P=R Q S
print (substr($a,-3,-5) eq '' ? "ok 33\n" : "not ok 33\n");  # P=R Q S
print (substr($a, 2,-4) eq '' ? "ok 34\n" : "not ok 34\n");  # P R Q S
print (substr($a,-3,-4) eq '' ? "ok 35\n" : "not ok 35\n");  # P R Q S
print (substr($a, 5,-6) eq '' ? "ok 36\n" : "not ok 36\n");  # R P Q=S
print (substr($a, 5,-5) eq '' ? "ok 37\n" : "not ok 37\n");  # P=R Q S
print (substr($a, 5,-3) eq '' ? "ok 38\n" : "not ok 38\n");  # P R Q=S
print (fail(substr($a, 7,-7)) ? "ok 39\n" : "not ok 39\n");  # R P S Q
print (fail(substr($a, 7,-5)) ? "ok 40\n" : "not ok 40\n");  # P=R S Q
print (fail(substr($a, 7,-3)) ? "ok 41\n" : "not ok 41\n");  # P R S Q
print (fail(substr($a, 7, 0)) ? "ok 42\n" : "not ok 42\n");  # P S Q=R

print (substr($a,-7,2) eq '' ? "ok 43\n" : "not ok 43\n");   # Q P=R S
print (substr($a,-7,4) eq '54' ? "ok 44\n" : "not ok 44\n"); # Q P R S
print (substr($a,-7,7) eq '54321' ? "ok 45\n" : "not ok 45\n");# Q P R=S
print (substr($a,-7,9) eq '54321' ? "ok 46\n" : "not ok 46\n");# Q P S R
print (substr($a,-5,0) eq '' ? "ok 47\n" : "not ok 47\n");   # P=Q=R S
print (substr($a,-5,3) eq '543' ? "ok 48\n" : "not ok 48\n");# P=Q R S
print (substr($a,-5,5) eq '54321' ? "ok 49\n" : "not ok 49\n");# P=Q R=S
print (substr($a,-5,7) eq '54321' ? "ok 50\n" : "not ok 50\n");# P=Q S R
print (substr($a,-3,0) eq '' ? "ok 51\n" : "not ok 51\n");   # P Q=R S
print (substr($a,-3,3) eq '321' ? "ok 52\n" : "not ok 52\n");# P Q R=S
print (substr($a,-2,3) eq '21' ? "ok 53\n" : "not ok 53\n"); # P Q S R
print (substr($a,0,-5) eq '' ? "ok 54\n" : "not ok 54\n");   # P=Q=R S
print (substr($a,2,-3) eq '' ? "ok 55\n" : "not ok 55\n");   # P Q=R S
print (substr($a,0,0) eq '' ? "ok 56\n" : "not ok 56\n");    # P=Q=R S
print (substr($a,0,5) eq '54321' ? "ok 57\n" : "not ok 57\n");# P=Q R=S
print (substr($a,0,7) eq '54321' ? "ok 58\n" : "not ok 58\n");# P=Q S R
print (substr($a,2,0) eq '' ? "ok 59\n" : "not ok 59\n");    # P Q=R S
print (substr($a,2,3) eq '321' ? "ok 60\n" : "not ok 60\n"); # P Q R=S
print (substr($a,5,0) eq '' ? "ok 61\n" : "not ok 61\n");    # P Q=R=S
print (substr($a,5,2) eq '' ? "ok 62\n" : "not ok 62\n");    # P Q=S R
print (substr($a,-7,-5) eq '' ? "ok 63\n" : "not ok 63\n");  # Q P=R S
print (substr($a,-7,-2) eq '543' ? "ok 64\n" : "not ok 64\n");# Q P R S
print (substr($a,-5,-5) eq '' ? "ok 65\n" : "not ok 65\n");  # P=Q=R S
print (substr($a,-5,-2) eq '543' ? "ok 66\n" : "not ok 66\n");# P=Q R S
print (substr($a,-3,-3) eq '' ? "ok 67\n" : "not ok 67\n");  # P Q=R S
print (substr($a,-3,-1) eq '32' ? "ok 68\n" : "not ok 68\n");# P Q R S
d146 48
a193 18
print (substr($a,-2,2) eq '' ? "ok 69\n" : "not ok 69\n");   # Q P=R=S
print (substr($a,0,0) eq '' ? "ok 70\n" : "not ok 70\n");    # P=Q=R=S
print (substr($a,0,1) eq '' ? "ok 71\n" : "not ok 71\n");    # P=Q=S R
print (substr($a,-2,3) eq '' ? "ok 72\n" : "not ok 72\n");   # Q P=S R
print (substr($a,-2) eq '' ? "ok 73\n" : "not ok 73\n");     # Q P=R=S
print (substr($a,0) eq '' ? "ok 74\n" : "not ok 74\n");      # P=Q=R=S


print (substr($a,0,-1) eq '' ? "ok 75\n" : "not ok 75\n");   # R P=Q=S
print (fail(substr($a,-2,0)) ? "ok 76\n" : "not ok 76\n");   # Q=R P=S
print (fail(substr($a,-2,1)) ? "ok 77\n" : "not ok 77\n");   # Q R P=S
print (fail(substr($a,-2,-1)) ? "ok 78\n" : "not ok 78\n");  # Q R P=S
print (fail(substr($a,-2,-2)) ? "ok 79\n" : "not ok 79\n");  # Q=R P=S
print (fail(substr($a,1,-2)) ? "ok 80\n" : "not ok 81\n");   # R P=S Q
print (fail(substr($a,1,1)) ? "ok 81\n" : "not ok 81\n");    # P=S Q R
print (fail(substr($a,1,0)) ? "ok 82\n" : "not ok 82\n");    # P=S Q=R
print (fail(substr($a,1)) ? "ok 83\n" : "not ok 83\n");      # P=R=S Q

d197 1
a197 1
print $a eq 'zxcvbnm' ? "ok 84\n" : "not ok 84\n";
d199 1
a199 1
print $a eq 'zxcvbnm' ? "ok 85\n" : "not ok 85\n";
d201 1
a201 1
print $a eq 'zxcvbnm' ? "ok 86\n" : "not ok 86\n";
d203 1
a203 1
print $a eq 'pqcvbnm' ? "ok 87\n" : "not ok 87\n";
d205 1
a205 1
print $a eq 'pqrcvbnm' ? "ok 88\n" : "not ok 88\n";
d207 1
a207 1
print $a eq 'pqrcvbnmasd' ? "ok 89\n" : "not ok 89\n";
d209 1
a209 1
print $a eq 'ioprcvbnmasd' ? "ok 90\n" : "not ok 90\n";
d211 1
a211 1
print $a eq 'fghvbnmasd' ? "ok 91\n" : "not ok 91\n";
d213 1
a213 1
print $a eq 'fghjklsd' ? "ok 92\n" : "not ok 92\n";
d215 1
a215 1
print $a eq 'fgh1234lsd' ? "ok 93\n" : "not ok 93\n";
d224 1
a224 1
    print $txt eq "FoX" ? "ok 94\n" : "not ok 94\n";
a226 1
    local $^W = 0;    # because of (spurious?) "uninitialised value"
d228 1
a228 1
    print $txt eq "X" ? "ok 95\n" : "not ok 95\n";
d232 1
d237 1
a237 1
  print substr($s,0,7) eq "FooRRAY" && !($w-=2) ? "ok 96\n" : "not ok 96\n";
d241 1
a241 1
print $w ? "not ok 97\n" : "ok 97\n";
d246 3
a248 6
print "not " unless substr($a, 0, 3, "") eq "abc" && $a eq "xyz";
print "ok 98\n";
print "not " unless substr($a, 0, 0, "abc") eq "" && $a eq "abcxyz";
print "ok 99\n";
print "not " unless substr($a, 3, -1, "") eq "xy" && $a eq "abcz";
print "ok 100\n";
d250 1
a250 1
print "not " unless substr($a, 3, undef, "xy") eq "" && $a eq "abcxyz"
d252 1
a252 1
print "ok 101\n";
d255 5
a259 6
print "not " unless substr($a, 3, 9999999, "") eq "xyz" && $a eq "abc";
print "ok 102\n";
print "not " unless fail(substr($a, -99, 0, ""));
print "ok 103\n";
print "not " unless fail(substr($a, 99, 3, ""));
print "ok 104\n";
d262 1
a262 2
print "not " unless $a eq "foo" && !$w;
print "ok 105\n";
d266 5
a270 2
print "not " unless $@@ && $@@ =~ /Can't modify substr/ && $a eq "foo";
print "ok 106\n";
@


1.2
log
@perl 5.004_04
@
text
@d3 1
a3 3
# $RCSfile: substr.t,v $$Revision: 4.1 $$Date: 92/08/07 18:28:31 $

print "1..97\n";
d15 2
d18 1
a18 1
          warn @@_;
d181 31
@


1.1
log
@Initial revision
@
text
@d5 3
a7 1
print "1..22\n";
d10 1
d12 18
a29 6
print (substr($a,0,3) eq 'abc' ? "ok 1\n" : "not ok 1\n");
print (substr($a,3,3) eq 'def' ? "ok 2\n" : "not ok 2\n");
print (substr($a,6,999) eq 'xyz' ? "ok 3\n" : "not ok 3\n");
print (substr($a,999,999) eq '' ? "ok 4\n" : "not ok 4\n");
print (substr($a,0,-6) eq 'abc' ? "ok 5\n" : "not ok 5\n");
print (substr($a,-3,1) eq 'x' ? "ok 6\n" : "not ok 6\n");
d33 6
a38 6
print (substr($a,1,3) eq 'abc' ? "ok 7\n" : "not ok 7\n");
print (substr($a,4,3) eq 'def' ? "ok 8\n" : "not ok 8\n");
print (substr($a,7,999) eq 'xyz' ? "ok 9\n" : "not ok 9\n");
print (substr($a,999,999) eq '' ? "ok 10\n" : "not ok 10\n");
print (substr($a,1,-6) eq 'abc' ? "ok 11\n" : "not ok 11\n");
print (substr($a,-3,1) eq 'x' ? "ok 12\n" : "not ok 12\n");
a45 1
y/a/a/;
d59 122
a180 3
print (substr($a,6) eq 'xyz' ? "ok 20\n" : "not ok 20\n");
print (substr($a,-3) eq 'xyz' ? "ok 21\n" : "not ok 21\n");
print (substr($a,999) eq '' ? "ok 22\n" : "not ok 22\n");
@


1.1.1.1
log
@Import of Perl 5.003 into the tree.  Makefile.bsd-wrapper and
config.sh.OpenBSD are the only local changes.
@
text
@@


1.1.1.2
log
@perl5.005_03
@
text
@d3 1
a3 1
print "1..106\n";
d5 1
a5 1
#P = start of string  Q = start of substr  R = end of substr  S = end of string
a7 1
BEGIN { $^W = 1 };
d9 6
a14 20
$SIG{__WARN__} = sub {
     if ($_[0] =~ /^substr outside of string/) {
          $w++;
     } elsif ($_[0] =~ /^Attempt to use reference as lvalue in substr/) {
          $w += 2;
     } elsif ($_[0] =~ /^Use of uninitialized value/) {
          $w += 3;
     } else {
          warn $_[0];
     }
};

sub fail { !defined(shift) && $w-- };

print (substr($a,0,3) eq 'abc' ? "ok 1\n" : "not ok 1\n");   # P=Q R S
print (substr($a,3,3) eq 'def' ? "ok 2\n" : "not ok 2\n");   # P Q R S
print (substr($a,6,999) eq 'xyz' ? "ok 3\n" : "not ok 3\n"); # P Q S R
print (fail(substr($a,999,999)) ? "ok 4\n" : "not ok 4\n");  # P R Q S
print (substr($a,0,-6) eq 'abc' ? "ok 5\n" : "not ok 5\n");  # P=Q R S
print (substr($a,-3,1) eq 'x' ? "ok 6\n" : "not ok 6\n");    # P Q R S
d18 6
a23 6
print (substr($a,1,3) eq 'abc' ? "ok 7\n" : "not ok 7\n");   # P=Q R S
print (substr($a,4,3) eq 'def' ? "ok 8\n" : "not ok 8\n");   # P Q R S
print (substr($a,7,999) eq 'xyz' ? "ok 9\n" : "not ok 9\n"); # P Q S R
print (fail(substr($a,999,999)) ? "ok 10\n" : "not ok 10\n");# P R Q S
print (substr($a,1,-6) eq 'abc' ? "ok 11\n" : "not ok 11\n");# P=Q R S
print (substr($a,-3,1) eq 'x' ? "ok 12\n" : "not ok 12\n");  # P Q R S
d31 1
d45 3
a47 153
print (substr($a,6) eq 'xyz' ? "ok 20\n" : "not ok 20\n");   # P Q R=S
print (substr($a,-3) eq 'xyz' ? "ok 21\n" : "not ok 21\n");  # P Q R=S
print (fail(substr($a,999)) ? "ok 22\n" : "not ok 22\n");    # P R=S Q
print (substr($a,0) eq 'abcdefxyz' ? "ok 23\n" : "not ok 23\n");# P=Q R=S
print (substr($a,9) eq '' ? "ok 24\n" : "not ok 24\n");      # P Q=R=S
print (substr($a,-11) eq 'abcdefxyz' ? "ok 25\n" : "not ok 25\n");# Q P R=S
print (substr($a,-9) eq 'abcdefxyz' ? "ok 26\n" : "not ok 26\n");  # P=Q R=S

$a = '54321';

print (fail(substr($a,-7, 1)) ? "ok 27\n" : "not ok 27\n");  # Q R P S
print (fail(substr($a,-7,-6)) ? "ok 28\n" : "not ok 28\n");  # Q R P S
print (substr($a,-5,-7) eq '' ? "ok 29\n" : "not ok 29\n");  # R P=Q S
print (substr($a, 2,-7) eq '' ? "ok 30\n" : "not ok 30\n");  # R P Q S
print (substr($a,-3,-7) eq '' ? "ok 31\n" : "not ok 31\n");  # R P Q S
print (substr($a, 2,-5) eq '' ? "ok 32\n" : "not ok 32\n");  # P=R Q S
print (substr($a,-3,-5) eq '' ? "ok 33\n" : "not ok 33\n");  # P=R Q S
print (substr($a, 2,-4) eq '' ? "ok 34\n" : "not ok 34\n");  # P R Q S
print (substr($a,-3,-4) eq '' ? "ok 35\n" : "not ok 35\n");  # P R Q S
print (substr($a, 5,-6) eq '' ? "ok 36\n" : "not ok 36\n");  # R P Q=S
print (substr($a, 5,-5) eq '' ? "ok 37\n" : "not ok 37\n");  # P=R Q S
print (substr($a, 5,-3) eq '' ? "ok 38\n" : "not ok 38\n");  # P R Q=S
print (fail(substr($a, 7,-7)) ? "ok 39\n" : "not ok 39\n");  # R P S Q
print (fail(substr($a, 7,-5)) ? "ok 40\n" : "not ok 40\n");  # P=R S Q
print (fail(substr($a, 7,-3)) ? "ok 41\n" : "not ok 41\n");  # P R S Q
print (fail(substr($a, 7, 0)) ? "ok 42\n" : "not ok 42\n");  # P S Q=R

print (substr($a,-7,2) eq '' ? "ok 43\n" : "not ok 43\n");   # Q P=R S
print (substr($a,-7,4) eq '54' ? "ok 44\n" : "not ok 44\n"); # Q P R S
print (substr($a,-7,7) eq '54321' ? "ok 45\n" : "not ok 45\n");# Q P R=S
print (substr($a,-7,9) eq '54321' ? "ok 46\n" : "not ok 46\n");# Q P S R
print (substr($a,-5,0) eq '' ? "ok 47\n" : "not ok 47\n");   # P=Q=R S
print (substr($a,-5,3) eq '543' ? "ok 48\n" : "not ok 48\n");# P=Q R S
print (substr($a,-5,5) eq '54321' ? "ok 49\n" : "not ok 49\n");# P=Q R=S
print (substr($a,-5,7) eq '54321' ? "ok 50\n" : "not ok 50\n");# P=Q S R
print (substr($a,-3,0) eq '' ? "ok 51\n" : "not ok 51\n");   # P Q=R S
print (substr($a,-3,3) eq '321' ? "ok 52\n" : "not ok 52\n");# P Q R=S
print (substr($a,-2,3) eq '21' ? "ok 53\n" : "not ok 53\n"); # P Q S R
print (substr($a,0,-5) eq '' ? "ok 54\n" : "not ok 54\n");   # P=Q=R S
print (substr($a,2,-3) eq '' ? "ok 55\n" : "not ok 55\n");   # P Q=R S
print (substr($a,0,0) eq '' ? "ok 56\n" : "not ok 56\n");    # P=Q=R S
print (substr($a,0,5) eq '54321' ? "ok 57\n" : "not ok 57\n");# P=Q R=S
print (substr($a,0,7) eq '54321' ? "ok 58\n" : "not ok 58\n");# P=Q S R
print (substr($a,2,0) eq '' ? "ok 59\n" : "not ok 59\n");    # P Q=R S
print (substr($a,2,3) eq '321' ? "ok 60\n" : "not ok 60\n"); # P Q R=S
print (substr($a,5,0) eq '' ? "ok 61\n" : "not ok 61\n");    # P Q=R=S
print (substr($a,5,2) eq '' ? "ok 62\n" : "not ok 62\n");    # P Q=S R
print (substr($a,-7,-5) eq '' ? "ok 63\n" : "not ok 63\n");  # Q P=R S
print (substr($a,-7,-2) eq '543' ? "ok 64\n" : "not ok 64\n");# Q P R S
print (substr($a,-5,-5) eq '' ? "ok 65\n" : "not ok 65\n");  # P=Q=R S
print (substr($a,-5,-2) eq '543' ? "ok 66\n" : "not ok 66\n");# P=Q R S
print (substr($a,-3,-3) eq '' ? "ok 67\n" : "not ok 67\n");  # P Q=R S
print (substr($a,-3,-1) eq '32' ? "ok 68\n" : "not ok 68\n");# P Q R S

$a = '';

print (substr($a,-2,2) eq '' ? "ok 69\n" : "not ok 69\n");   # Q P=R=S
print (substr($a,0,0) eq '' ? "ok 70\n" : "not ok 70\n");    # P=Q=R=S
print (substr($a,0,1) eq '' ? "ok 71\n" : "not ok 71\n");    # P=Q=S R
print (substr($a,-2,3) eq '' ? "ok 72\n" : "not ok 72\n");   # Q P=S R
print (substr($a,-2) eq '' ? "ok 73\n" : "not ok 73\n");     # Q P=R=S
print (substr($a,0) eq '' ? "ok 74\n" : "not ok 74\n");      # P=Q=R=S


print (substr($a,0,-1) eq '' ? "ok 75\n" : "not ok 75\n");   # R P=Q=S
print (fail(substr($a,-2,0)) ? "ok 76\n" : "not ok 76\n");   # Q=R P=S
print (fail(substr($a,-2,1)) ? "ok 77\n" : "not ok 77\n");   # Q R P=S
print (fail(substr($a,-2,-1)) ? "ok 78\n" : "not ok 78\n");  # Q R P=S
print (fail(substr($a,-2,-2)) ? "ok 79\n" : "not ok 79\n");  # Q=R P=S
print (fail(substr($a,1,-2)) ? "ok 80\n" : "not ok 81\n");   # R P=S Q
print (fail(substr($a,1,1)) ? "ok 81\n" : "not ok 81\n");    # P=S Q R
print (fail(substr($a,1,0)) ? "ok 82\n" : "not ok 82\n");    # P=S Q=R
print (fail(substr($a,1)) ? "ok 83\n" : "not ok 83\n");      # P=R=S Q


my $a = 'zxcvbnm';
substr($a,2,0) = '';
print $a eq 'zxcvbnm' ? "ok 84\n" : "not ok 84\n";
substr($a,7,0) = '';
print $a eq 'zxcvbnm' ? "ok 85\n" : "not ok 85\n";
substr($a,5,0) = '';
print $a eq 'zxcvbnm' ? "ok 86\n" : "not ok 86\n";
substr($a,0,2) = 'pq';
print $a eq 'pqcvbnm' ? "ok 87\n" : "not ok 87\n";
substr($a,2,0) = 'r';
print $a eq 'pqrcvbnm' ? "ok 88\n" : "not ok 88\n";
substr($a,8,0) = 'asd';
print $a eq 'pqrcvbnmasd' ? "ok 89\n" : "not ok 89\n";
substr($a,0,2) = 'iop';
print $a eq 'ioprcvbnmasd' ? "ok 90\n" : "not ok 90\n";
substr($a,0,5) = 'fgh';
print $a eq 'fghvbnmasd' ? "ok 91\n" : "not ok 91\n";
substr($a,3,5) = 'jkl';
print $a eq 'fghjklsd' ? "ok 92\n" : "not ok 92\n";
substr($a,3,2) = '1234';
print $a eq 'fgh1234lsd' ? "ok 93\n" : "not ok 93\n";


# with lexicals (and in re-entered scopes)
for (0,1) {
  my $txt;
  unless ($_) {
    $txt = "Foo";
    substr($txt, -1) = "X";
    print $txt eq "FoX" ? "ok 94\n" : "not ok 94\n";
  }
  else {
    local $^W = 0;    # because of (spurious?) "uninitialised value"
    substr($txt, 0, 1) = "X";
    print $txt eq "X" ? "ok 95\n" : "not ok 95\n";
  }
}

# coercion of references
{
  my $s = [];
  substr($s, 0, 1) = 'Foo';
  print substr($s,0,7) eq "FooRRAY" && !($w-=2) ? "ok 96\n" : "not ok 96\n";
}

# check no spurious warnings
print $w ? "not ok 97\n" : "ok 97\n";

# check new 4 arg replacement syntax
$a = "abcxyz";
$w = 0;
print "not " unless substr($a, 0, 3, "") eq "abc" && $a eq "xyz";
print "ok 98\n";
print "not " unless substr($a, 0, 0, "abc") eq "" && $a eq "abcxyz";
print "ok 99\n";
print "not " unless substr($a, 3, -1, "") eq "xy" && $a eq "abcz";
print "ok 100\n";

print "not " unless substr($a, 3, undef, "xy") eq "" && $a eq "abcxyz"
                 && $w == 3;
print "ok 101\n";
$w = 0;

print "not " unless substr($a, 3, 9999999, "") eq "xyz" && $a eq "abc";
print "ok 102\n";
print "not " unless fail(substr($a, -99, 0, ""));
print "ok 103\n";
print "not " unless fail(substr($a, 99, 3, ""));
print "ok 104\n";

substr($a, 0, length($a), "foo");
print "not " unless $a eq "foo" && !$w;
print "ok 105\n";

# using 4 arg substr as lvalue is a compile time error
eval 'substr($a,0,0,"") = "abc"';
print "not " unless $@@ && $@@ =~ /Can't modify substr/ && $a eq "foo";
print "ok 106\n";
@


1.1.1.3
log
@virgin perl 5.6.0
@
text
@d1 1
d3 1
a3 1
print "1..125\n";
d7 2
a8 4
BEGIN {
    unshift @@INC, '../lib' if -d '../lib' ;
}
use warnings ;
a9 1
$a = 'abcdefxyz';
d22 1
a22 3
sub ok { print (($_[1] ? "" : "not ") . "ok $_[0]\n") }

$FATAL_MSG = '^substr outside of string' ;
d24 6
a29 9
ok 1, substr($a,0,3) eq 'abc';   # P=Q R S
ok 2, substr($a,3,3) eq 'def';   # P Q R S
ok 3, substr($a,6,999) eq 'xyz'; # P Q S R
$b = substr($a,999,999) ; # warn # P R Q S
ok 4, $w-- == 1 ;
eval{substr($a,999,999) = "" ; };# P R Q S
ok 5, $@@ =~ /$FATAL_MSG/;
ok 6, substr($a,0,-6) eq 'abc';  # P=Q R S
ok 7, substr($a,-3,1) eq 'x';    # P Q R S
d33 6
a38 9
ok 8, substr($a,1,3) eq 'abc' ;  # P=Q R S
ok 9, substr($a,4,3) eq 'def' ;  # P Q R S
ok 10, substr($a,7,999) eq 'xyz';# P Q S R
$b = substr($a,999,999) ; # warn # P R Q S
ok 11, $w-- == 1 ;
eval{substr($a,999,999) = "" ; } ; # P R Q S
ok 12, $@@ =~ /$FATAL_MSG/;
ok 13, substr($a,1,-6) eq 'abc' ;# P=Q R S
ok 14, substr($a,-3,1) eq 'x' ;  # P Q R S
d43 1
a43 1
ok 15, $a eq 'abcXYZxyz' ;
d45 1
a45 1
ok 16, $a eq 'cXYZxyz' ;
d47 1
a47 1
ok 17, $a eq 'abcXYZxyz' ;
d49 1
a49 1
ok 18, $a eq '12345678abcXYZxyz' ;
d51 1
a51 1
ok 19, $a eq '12345678abcXYZdef';
d53 1
a53 1
ok 20, $a eq '12345678abcXYZ<' ;
d55 1
a55 1
ok 21, $a eq '12345678abcXYZ12345678' ;
d59 7
a65 10
ok 22, substr($a,6) eq 'xyz' ;        # P Q R=S
ok 23, substr($a,-3) eq 'xyz' ;       # P Q R=S
$b = substr($a,999,999) ; # warning   # P R=S Q
ok 24, $w-- == 1 ;
eval{substr($a,999,999) = "" ; } ;    # P R=S Q
ok 25, $@@ =~ /$FATAL_MSG/;
ok 26, substr($a,0) eq 'abcdefxyz' ;  # P=Q R=S
ok 27, substr($a,9) eq '' ;           # P Q=R=S
ok 28, substr($a,-11) eq 'abcdefxyz'; # Q P R=S
ok 29, substr($a,-9) eq 'abcdefxyz';  # P=Q R=S
d69 43
a111 61
$b = substr($a,-7, 1) ; # warn  # Q R P S
ok 30, $w-- == 1 ;
eval{substr($a,-7, 1) = "" ; }; # Q R P S
ok 31, $@@ =~ /$FATAL_MSG/;
$b = substr($a,-7,-6) ; # warn  # Q R P S
ok 32, $w-- == 1 ;
eval{substr($a,-7,-6) = "" ; }; # Q R P S
ok 33, $@@ =~ /$FATAL_MSG/;
ok 34, substr($a,-5,-7) eq '';  # R P=Q S
ok 35, substr($a, 2,-7) eq '';  # R P Q S
ok 36, substr($a,-3,-7) eq '';  # R P Q S
ok 37, substr($a, 2,-5) eq '';  # P=R Q S
ok 38, substr($a,-3,-5) eq '';  # P=R Q S
ok 39, substr($a, 2,-4) eq '';  # P R Q S
ok 40, substr($a,-3,-4) eq '';  # P R Q S
ok 41, substr($a, 5,-6) eq '';  # R P Q=S
ok 42, substr($a, 5,-5) eq '';  # P=R Q S
ok 43, substr($a, 5,-3) eq '';  # P R Q=S
$b = substr($a, 7,-7) ; # warn  # R P S Q
ok 44, $w-- == 1 ;
eval{substr($a, 7,-7) = "" ; }; # R P S Q
ok 45, $@@ =~ /$FATAL_MSG/;
$b = substr($a, 7,-5) ; # warn  # P=R S Q
ok 46, $w-- == 1 ;
eval{substr($a, 7,-5) = "" ; }; # P=R S Q
ok 47, $@@ =~ /$FATAL_MSG/;
$b = substr($a, 7,-3) ; # warn  # P Q S Q
ok 48, $w-- == 1 ;
eval{substr($a, 7,-3) = "" ; }; # P Q S Q
ok 49, $@@ =~ /$FATAL_MSG/;
$b = substr($a, 7, 0) ; # warn  # P S Q=R
ok 50, $w-- == 1 ;
eval{substr($a, 7, 0) = "" ; }; # P S Q=R
ok 51, $@@ =~ /$FATAL_MSG/;

ok 52, substr($a,-7,2) eq '';   # Q P=R S
ok 53, substr($a,-7,4) eq '54'; # Q P R S
ok 54, substr($a,-7,7) eq '54321';# Q P R=S
ok 55, substr($a,-7,9) eq '54321';# Q P S R
ok 56, substr($a,-5,0) eq '';   # P=Q=R S
ok 57, substr($a,-5,3) eq '543';# P=Q R S
ok 58, substr($a,-5,5) eq '54321';# P=Q R=S
ok 59, substr($a,-5,7) eq '54321';# P=Q S R
ok 60, substr($a,-3,0) eq '';   # P Q=R S
ok 61, substr($a,-3,3) eq '321';# P Q R=S
ok 62, substr($a,-2,3) eq '21'; # P Q S R
ok 63, substr($a,0,-5) eq '';   # P=Q=R S
ok 64, substr($a,2,-3) eq '';   # P Q=R S
ok 65, substr($a,0,0) eq '';    # P=Q=R S
ok 66, substr($a,0,5) eq '54321';# P=Q R=S
ok 67, substr($a,0,7) eq '54321';# P=Q S R
ok 68, substr($a,2,0) eq '';    # P Q=R S
ok 69, substr($a,2,3) eq '321'; # P Q R=S
ok 70, substr($a,5,0) eq '';    # P Q=R=S
ok 71, substr($a,5,2) eq '';    # P Q=S R
ok 72, substr($a,-7,-5) eq '';  # Q P=R S
ok 73, substr($a,-7,-2) eq '543';# Q P R S
ok 74, substr($a,-5,-5) eq '';  # P=Q=R S
ok 75, substr($a,-5,-2) eq '543';# P=Q R S
ok 76, substr($a,-3,-3) eq '';  # P Q=R S
ok 77, substr($a,-3,-1) eq '32';# P Q R S
d115 18
a132 48
ok 78, substr($a,-2,2) eq '';   # Q P=R=S
ok 79, substr($a,0,0) eq '';    # P=Q=R=S
ok 80, substr($a,0,1) eq '';    # P=Q=S R
ok 81, substr($a,-2,3) eq '';   # Q P=S R
ok 82, substr($a,-2) eq '';     # Q P=R=S
ok 83, substr($a,0) eq '';      # P=Q=R=S


ok 84, substr($a,0,-1) eq '';   # R P=Q=S
$b = substr($a,-2, 0) ; # warn  # Q=R P=S
ok 85, $w-- == 1 ;
eval{substr($a,-2, 0) = "" ; }; # Q=R P=S
ok 86, $@@ =~ /$FATAL_MSG/;

$b = substr($a,-2, 1) ; # warn  # Q R P=S
ok 87, $w-- == 1 ;
eval{substr($a,-2, 1) = "" ; }; # Q R P=S
ok 88, $@@ =~ /$FATAL_MSG/;

$b = substr($a,-2,-1) ; # warn  # Q R P=S
ok 89, $w-- == 1 ;
eval{substr($a,-2,-1) = "" ; }; # Q R P=S
ok 90, $@@ =~ /$FATAL_MSG/;

$b = substr($a,-2,-2) ; # warn  # Q=R P=S
ok 91, $w-- == 1 ;
eval{substr($a,-2,-2) = "" ; }; # Q=R P=S
ok 92, $@@ =~ /$FATAL_MSG/;

$b = substr($a, 1,-2) ; # warn  # R P=S Q
ok 93, $w-- == 1 ;
eval{substr($a, 1,-2) = "" ; }; # R P=S Q
ok 94, $@@ =~ /$FATAL_MSG/;

$b = substr($a, 1, 1) ; # warn  # P=S Q R
ok 95, $w-- == 1 ;
eval{substr($a, 1, 1) = "" ; }; # P=S Q R
ok 96, $@@ =~ /$FATAL_MSG/;

$b = substr($a, 1, 0) ;# warn   # P=S Q=R
ok 97, $w-- == 1 ;
eval{substr($a, 1, 0) = "" ; }; # P=S Q=R
ok 98, $@@ =~ /$FATAL_MSG/;

$b = substr($a,1) ; # warning   # P=R=S Q
ok 99, $w-- == 1 ;
eval{substr($a,1) = "" ; };     # P=R=S Q
ok 100, $@@ =~ /$FATAL_MSG/;
d136 1
a136 1
ok 101, $a eq 'zxcvbnm';
d138 1
a138 1
ok 102, $a eq 'zxcvbnm';
d140 1
a140 1
ok 103, $a eq 'zxcvbnm';
d142 1
a142 1
ok 104, $a eq 'pqcvbnm';
d144 1
a144 1
ok 105, $a eq 'pqrcvbnm';
d146 1
a146 1
ok 106, $a eq 'pqrcvbnmasd';
d148 1
a148 1
ok 107, $a eq 'ioprcvbnmasd';
d150 1
a150 1
ok 108, $a eq 'fghvbnmasd';
d152 1
a152 1
ok 109, $a eq 'fghjklsd';
d154 1
a154 1
ok 110, $a eq 'fgh1234lsd';
d163 1
a163 1
    ok 111, $txt eq "FoX";
d166 1
d168 1
a168 1
    ok 112, $txt eq "X";
a171 1
$w = 0 ;
d176 1
a176 1
  ok 113, substr($s,0,7) eq "FooRRAY" && !($w-=2);
d180 1
a180 1
ok 114, $w == 0;
d185 6
a190 3
ok 115, substr($a, 0, 3, "") eq "abc" && $a eq "xyz";
ok 116, substr($a, 0, 0, "abc") eq "" && $a eq "abcxyz";
ok 117, substr($a, 3, -1, "") eq "xy" && $a eq "abcz";
d192 1
a192 1
ok 118, substr($a, 3, undef, "xy") eq "" && $a eq "abcxyz"
d194 1
a194 1

d197 6
a202 5
ok 119, substr($a, 3, 9999999, "") eq "xyz" && $a eq "abc";
eval{substr($a, -99, 0, "") };
ok 120, $@@ =~ /$FATAL_MSG/;
eval{substr($a, 99, 3, "") };
ok 121, $@@ =~ /$FATAL_MSG/;
d205 2
a206 1
ok 122, $a eq "foo" && !$w;
d210 2
a211 5
ok 123, $@@ && $@@ =~ /Can't modify substr/ && $a eq "foo";

$a = "abcdefgh";
ok 124, sub { shift }->(substr($a, 0, 4, "xxxx")) eq 'abcd';
ok 125, $a eq 'xxxxefgh';
@


1.1.1.4
log
@stock perl 5.6.1
@
text
@a0 1
#!./perl
d2 1
a2 1
print "1..174\n";
d7 1
a7 2
    chdir 't' if -d 't';
    @@INC = '../lib';
a270 315

{
    my $y = 10;
    $y = "2" . $y;
    ok 126, $y+0 == 210;
}

# utf8 sanity
{
    my $x = substr("a\x{263a}b",0);
    ok 127, length($x) == 3;
    $x = substr($x,1,1);
    ok 128, $x eq "\x{263a}";
    $x = $x x 2;
    ok 129, length($x) == 2;
    substr($x,0,1) = "abcd";
    ok 130, $x eq "abcd\x{263a}";
    ok 131, length($x) == 5;
    $x = reverse $x;
    ok 132, length($x) == 5;
    ok 133, $x eq "\x{263a}dcba";

    my $z = 10;
    $z = "21\x{263a}" . $z;
    ok 134, length($z) == 5;
    ok 135, $z eq "21\x{263a}10";
}

# replacement should work on magical values
require Tie::Scalar;
my %data;
tie $data{'a'}, 'Tie::StdScalar';  # makes $data{'a'} magical
$data{a} = "firstlast";
ok 136, substr($data{'a'}, 0, 5, "") eq "first" && $data{'a'} eq "last";

# more utf8

# The following two originally from Ignasi Roca.

$x = "\xF1\xF2\xF3";
substr($x, 0, 1) = "\x{100}"; # Ignasi had \x{FF}
ok 137, length($x) == 3 &&
        $x eq "\x{100}\xF2\xF3" &&
        substr($x, 0, 1) eq "\x{100}" &&
        substr($x, 1, 1) eq "\x{F2}" &&
        substr($x, 2, 1) eq "\x{F3}";

$x = "\xF1\xF2\xF3";
substr($x, 0, 1) = "\x{100}\x{FF}"; # Ignasi had \x{FF}
ok 138, length($x) == 4 &&
        $x eq "\x{100}\x{FF}\xF2\xF3" &&
        substr($x, 0, 1) eq "\x{100}" &&
        substr($x, 1, 1) eq "\x{FF}" &&
        substr($x, 2, 1) eq "\x{F2}" &&
        substr($x, 3, 1) eq "\x{F3}";

# more utf8 lval exercise

$x = "\xF1\xF2\xF3";
substr($x, 0, 2) = "\x{100}\xFF";
ok 139, length($x) == 3 &&
        $x eq "\x{100}\xFF\xF3" &&
        substr($x, 0, 1) eq "\x{100}" &&
        substr($x, 1, 1) eq "\x{FF}" &&
        substr($x, 2, 1) eq "\x{F3}";

$x = "\xF1\xF2\xF3";
substr($x, 1, 1) = "\x{100}\xFF";
ok 140, length($x) == 4 &&
        $x eq "\xF1\x{100}\xFF\xF3" &&
        substr($x, 0, 1) eq "\x{F1}" &&
        substr($x, 1, 1) eq "\x{100}" &&
        substr($x, 2, 1) eq "\x{FF}" &&
        substr($x, 3, 1) eq "\x{F3}";

$x = "\xF1\xF2\xF3";
substr($x, 2, 1) = "\x{100}\xFF";
ok 141, length($x) == 4 &&
        $x eq "\xF1\xF2\x{100}\xFF" &&
        substr($x, 0, 1) eq "\x{F1}" &&
        substr($x, 1, 1) eq "\x{F2}" &&
        substr($x, 2, 1) eq "\x{100}" &&
        substr($x, 3, 1) eq "\x{FF}";

$x = "\xF1\xF2\xF3";
substr($x, 3, 1) = "\x{100}\xFF";
ok 142, length($x) == 5 &&
        $x eq "\xF1\xF2\xF3\x{100}\xFF" &&
        substr($x, 0, 1) eq "\x{F1}" &&
        substr($x, 1, 1) eq "\x{F2}" &&
        substr($x, 2, 1) eq "\x{F3}" &&
        substr($x, 3, 1) eq "\x{100}" &&
        substr($x, 4, 1) eq "\x{FF}";

$x = "\xF1\xF2\xF3";
substr($x, -1, 1) = "\x{100}\xFF";
ok 143, length($x) == 4 &&
        $x eq "\xF1\xF2\x{100}\xFF" &&
        substr($x, 0, 1) eq "\x{F1}" &&
        substr($x, 1, 1) eq "\x{F2}" &&
        substr($x, 2, 1) eq "\x{100}" &&
        substr($x, 3, 1) eq "\x{FF}";

$x = "\xF1\xF2\xF3";
substr($x, -1, 0) = "\x{100}\xFF";
ok 144, length($x) == 5 &&
        $x eq "\xF1\xF2\x{100}\xFF\xF3" &&
        substr($x, 0, 1) eq "\x{F1}" &&
        substr($x, 1, 1) eq "\x{F2}" &&
        substr($x, 2, 1) eq "\x{100}" &&
        substr($x, 3, 1) eq "\x{FF}" &&
        substr($x, 4, 1) eq "\x{F3}";

$x = "\xF1\xF2\xF3";
substr($x, 0, -1) = "\x{100}\xFF";
ok 145, length($x) == 3 &&
        $x eq "\x{100}\xFF\xF3" &&
        substr($x, 0, 1) eq "\x{100}" &&
        substr($x, 1, 1) eq "\x{FF}" &&
        substr($x, 2, 1) eq "\x{F3}";

$x = "\xF1\xF2\xF3";
substr($x, 0, -2) = "\x{100}\xFF";
ok 146, length($x) == 4 &&
        $x eq "\x{100}\xFF\xF2\xF3" &&
        substr($x, 0, 1) eq "\x{100}" &&
        substr($x, 1, 1) eq "\x{FF}" &&
        substr($x, 2, 1) eq "\x{F2}" &&
        substr($x, 3, 1) eq "\x{F3}";

$x = "\xF1\xF2\xF3";
substr($x, 0, -3) = "\x{100}\xFF";
ok 147, length($x) == 5 &&
        $x eq "\x{100}\xFF\xF1\xF2\xF3" &&
        substr($x, 0, 1) eq "\x{100}" &&
        substr($x, 1, 1) eq "\x{FF}" &&
        substr($x, 2, 1) eq "\x{F1}" &&
        substr($x, 3, 1) eq "\x{F2}" &&
        substr($x, 4, 1) eq "\x{F3}";

$x = "\xF1\xF2\xF3";
substr($x, 1, -1) = "\x{100}\xFF";
ok 148, length($x) == 4 &&
        $x eq "\xF1\x{100}\xFF\xF3" &&
        substr($x, 0, 1) eq "\x{F1}" &&
        substr($x, 1, 1) eq "\x{100}" &&
        substr($x, 2, 1) eq "\x{FF}" &&
        substr($x, 3, 1) eq "\x{F3}";

$x = "\xF1\xF2\xF3";
substr($x, -1, -1) = "\x{100}\xFF";
ok 149, length($x) == 5 &&
        $x eq "\xF1\xF2\x{100}\xFF\xF3" &&
        substr($x, 0, 1) eq "\x{F1}" &&
        substr($x, 1, 1) eq "\x{F2}" &&
        substr($x, 2, 1) eq "\x{100}" &&
        substr($x, 3, 1) eq "\x{FF}" &&
        substr($x, 4, 1) eq "\x{F3}";

# And tests for already-UTF8 one

$x = "\x{101}\x{F2}\x{F3}";
substr($x, 0, 1) = "\x{100}";
ok 150, length($x) == 3 &&
        $x eq "\x{100}\xF2\xF3" &&
        substr($x, 0, 1) eq "\x{100}" &&
        substr($x, 1, 1) eq "\x{F2}" &&
        substr($x, 2, 1) eq "\x{F3}";

$x = "\x{101}\x{F2}\x{F3}";
substr($x, 0, 1) = "\x{100}\x{FF}";
ok 151, length($x) == 4 &&
        $x eq "\x{100}\x{FF}\xF2\xF3" &&
        substr($x, 0, 1) eq "\x{100}" &&
        substr($x, 1, 1) eq "\x{FF}" &&
        substr($x, 2, 1) eq "\x{F2}" &&
        substr($x, 3, 1) eq "\x{F3}";

$x = "\x{101}\x{F2}\x{F3}";
substr($x, 0, 2) = "\x{100}\xFF";
ok 152, length($x) == 3 &&
        $x eq "\x{100}\xFF\xF3" &&
        substr($x, 0, 1) eq "\x{100}" &&
        substr($x, 1, 1) eq "\x{FF}" &&
        substr($x, 2, 1) eq "\x{F3}";

$x = "\x{101}\x{F2}\x{F3}";
substr($x, 1, 1) = "\x{100}\xFF";
ok 153, length($x) == 4 &&
        $x eq "\x{101}\x{100}\xFF\xF3" &&
        substr($x, 0, 1) eq "\x{101}" &&
        substr($x, 1, 1) eq "\x{100}" &&
        substr($x, 2, 1) eq "\x{FF}" &&
        substr($x, 3, 1) eq "\x{F3}";

$x = "\x{101}\x{F2}\x{F3}";
substr($x, 2, 1) = "\x{100}\xFF";
ok 154, length($x) == 4 &&
        $x eq "\x{101}\xF2\x{100}\xFF" &&
        substr($x, 0, 1) eq "\x{101}" &&
        substr($x, 1, 1) eq "\x{F2}" &&
        substr($x, 2, 1) eq "\x{100}" &&
        substr($x, 3, 1) eq "\x{FF}";

$x = "\x{101}\x{F2}\x{F3}";
substr($x, 3, 1) = "\x{100}\xFF";
ok 155, length($x) == 5 &&
        $x eq "\x{101}\x{F2}\x{F3}\x{100}\xFF" &&
        substr($x, 0, 1) eq "\x{101}" &&
        substr($x, 1, 1) eq "\x{F2}" &&
        substr($x, 2, 1) eq "\x{F3}" &&
        substr($x, 3, 1) eq "\x{100}" &&
        substr($x, 4, 1) eq "\x{FF}";

$x = "\x{101}\x{F2}\x{F3}";
substr($x, -1, 1) = "\x{100}\xFF";
ok 156, length($x) == 4 &&
        $x eq "\x{101}\xF2\x{100}\xFF" &&
        substr($x, 0, 1) eq "\x{101}" &&
        substr($x, 1, 1) eq "\x{F2}" &&
        substr($x, 2, 1) eq "\x{100}" &&
        substr($x, 3, 1) eq "\x{FF}";

$x = "\x{101}\x{F2}\x{F3}";
substr($x, -1, 0) = "\x{100}\xFF";
ok 157, length($x) == 5 &&
        $x eq "\x{101}\xF2\x{100}\xFF\xF3" &&
        substr($x, 0, 1) eq "\x{101}" &&
        substr($x, 1, 1) eq "\x{F2}" &&
        substr($x, 2, 1) eq "\x{100}" &&
        substr($x, 3, 1) eq "\x{FF}" &&
        substr($x, 4, 1) eq "\x{F3}";

$x = "\x{101}\x{F2}\x{F3}";
substr($x, 0, -1) = "\x{100}\xFF";
ok 158, length($x) == 3 &&
        $x eq "\x{100}\xFF\xF3" &&
        substr($x, 0, 1) eq "\x{100}" &&
        substr($x, 1, 1) eq "\x{FF}" &&
        substr($x, 2, 1) eq "\x{F3}";

$x = "\x{101}\x{F2}\x{F3}";
substr($x, 0, -2) = "\x{100}\xFF";
ok 159, length($x) == 4 &&
        $x eq "\x{100}\xFF\xF2\xF3" &&
        substr($x, 0, 1) eq "\x{100}" &&
        substr($x, 1, 1) eq "\x{FF}" &&
        substr($x, 2, 1) eq "\x{F2}" &&
        substr($x, 3, 1) eq "\x{F3}";

$x = "\x{101}\x{F2}\x{F3}";
substr($x, 0, -3) = "\x{100}\xFF";
ok 160, length($x) == 5 &&
        $x eq "\x{100}\xFF\x{101}\x{F2}\x{F3}" &&
        substr($x, 0, 1) eq "\x{100}" &&
        substr($x, 1, 1) eq "\x{FF}" &&
        substr($x, 2, 1) eq "\x{101}" &&
        substr($x, 3, 1) eq "\x{F2}" &&
        substr($x, 4, 1) eq "\x{F3}";

$x = "\x{101}\x{F2}\x{F3}";
substr($x, 1, -1) = "\x{100}\xFF";
ok 161, length($x) == 4 &&
        $x eq "\x{101}\x{100}\xFF\xF3" &&
        substr($x, 0, 1) eq "\x{101}" &&
        substr($x, 1, 1) eq "\x{100}" &&
        substr($x, 2, 1) eq "\x{FF}" &&
        substr($x, 3, 1) eq "\x{F3}";

$x = "\x{101}\x{F2}\x{F3}";
substr($x, -1, -1) = "\x{100}\xFF";
ok 162, length($x) == 5 &&
        $x eq "\x{101}\xF2\x{100}\xFF\xF3" &&
        substr($x, 0, 1) eq "\x{101}" &&
        substr($x, 1, 1) eq "\x{F2}" &&
        substr($x, 2, 1) eq "\x{100}" &&
        substr($x, 3, 1) eq "\x{FF}" &&
        substr($x, 4, 1) eq "\x{F3}";

substr($x = "ab", 0, 0, "\x{100}\x{200}");
ok 163, $x eq "\x{100}\x{200}ab";

substr($x = "\x{100}\x{200}", 0, 0, "ab");
ok 164, $x eq "ab\x{100}\x{200}";

substr($x = "ab", 1, 0, "\x{100}\x{200}");
ok 165, $x eq "a\x{100}\x{200}b";

substr($x = "\x{100}\x{200}", 1, 0, "ab");
ok 166, $x eq "\x{100}ab\x{200}";

substr($x = "ab", 2, 0, "\x{100}\x{200}");
ok 167, $x eq "ab\x{100}\x{200}";

substr($x = "\x{100}\x{200}", 2, 0, "ab");
ok 168, $x eq "\x{100}\x{200}ab";

substr($x = "\xFFb", 0, 0, "\x{100}\x{200}");
ok 169, $x eq "\x{100}\x{200}\xFFb";

substr($x = "\x{100}\x{200}", 0, 0, "\xFFb");
ok 170, $x eq "\xFFb\x{100}\x{200}";

substr($x = "\xFFb", 1, 0, "\x{100}\x{200}");
ok 171, $x eq "\xFF\x{100}\x{200}b";

substr($x = "\x{100}\x{200}", 1, 0, "\xFFb");
ok 172, $x eq "\x{100}\xFFb\x{200}";

substr($x = "\xFFb", 2, 0, "\x{100}\x{200}");
ok 173, $x eq "\xFFb\x{100}\x{200}";

substr($x = "\x{100}\x{200}", 2, 0, "\xFFb");
ok 174, $x eq "\x{100}\x{200}\xFFb";

@


1.1.1.5
log
@perl 5.8.2 from CPAN
@
text
@d3 1
a3 1
print "1..176\n";
a587 17
# [perl #20933]
{ 
    my $s = "ab";
    my @@r; 
    $r[$_] = \ substr $s, $_, 1 for (0, 1);
    ok 175, join("", map { $$_ } @@r) eq "ab";
}

# [perl #23207]
{
    sub ss {
	substr($_[0],0,1) ^= substr($_[0],1,1) ^=
	substr($_[0],0,1) ^= substr($_[0],1,1);
    }
    my $x = my $y = 'AB'; ss $x; ss $y;
    ok 176, $x eq $y;
}
@


1.1.1.6
log
@perl 5.8.3 from CPAN
@
text
@d3 1
a3 1
print "1..177\n";
a603 7
}

# [perl #24605]
{
    my $x = "0123456789\x{500}";
    my $y = substr $x, 4;
    ok 177, substr($x, 7, 1) eq "7";
@


1.1.1.7
log
@Import of stock perl 5.8.5
@
text
@d3 1
a3 1
print "1..181\n";
a610 29
}

# [perl #24200] string corruption with lvalue sub

{
    my $foo = "a";
    sub bar: lvalue { substr $foo, 0 }
    bar = "XXX";
    ok 178, bar eq 'XXX';
    $foo = '123456789';
    ok 179, bar eq '123456789';
}

# [perl #29149]
{
    my $text  = "0123456789\xED ";
    utf8::upgrade($text);
    my $pos = 5;
    pos($text) = $pos;
    my $a = substr($text, $pos, $pos);
    ok 180, substr($text,$pos,1) eq $pos;

}

# [perl #23765]
{
    my $a = pack("C", 0xbf);
    substr($a, -1) &= chr(0xfeff);
    ok 181, $a eq "\xbf";
@


1.1.1.8
log
@perl 5.8.8 import
@
text
@d1 3
a3 1
#!./perl -w
d26 1
a26 3
require './test.pl';

plan(325);
d28 1
a28 1
$FATAL_MSG = qr/^substr outside of string/;
d30 3
a32 3
is(substr($a,0,3), 'abc');   # P=Q R S
is(substr($a,3,3), 'def');   # P Q R S
is(substr($a,6,999), 'xyz'); # P Q S R
d34 1
a34 1
is ($w--, 1);
d36 3
a38 3
like ($@@, $FATAL_MSG);
is(substr($a,0,-6), 'abc');  # P=Q R S
is(substr($a,-3,1), 'x');    # P Q R S
d42 3
a44 3
is(substr($a,1,3), 'abc' );  # P=Q R S
is(substr($a,4,3), 'def' );  # P Q R S
is(substr($a,7,999), 'xyz');# P Q S R
d46 1
a46 1
is($w--, 1);
d48 3
a50 3
like ($@@, $FATAL_MSG);
is(substr($a,1,-6), 'abc' );# P=Q R S
is(substr($a,-3,1), 'x' );  # P Q R S
d55 1
a55 1
is($a, 'abcXYZxyz' );
d57 1
a57 1
is($a, 'cXYZxyz' );
d59 1
a59 1
is($a, 'abcXYZxyz' );
d61 1
a61 1
is($a, '12345678abcXYZxyz' );
d63 1
a63 1
is($a, '12345678abcXYZdef');
d65 1
a65 1
is($a, '12345678abcXYZ<' );
d67 1
a67 1
is($a, '12345678abcXYZ12345678' );
d71 2
a72 2
is(substr($a,6), 'xyz' );        # P Q R=S
is(substr($a,-3), 'xyz' );       # P Q R=S
d74 1
a74 1
is($w--, 1);
d76 5
a80 5
like($@@, $FATAL_MSG);
is(substr($a,0), 'abcdefxyz');  # P=Q R=S
is(substr($a,9), '');           # P Q=R=S
is(substr($a,-11), 'abcdefxyz'); # Q P R=S
is(substr($a,-9), 'abcdefxyz');  # P=Q R=S
d85 1
a85 1
is($w--, 1);
d87 1
a87 1
like($@@, $FATAL_MSG);
d89 1
a89 1
is($w--, 1);
d91 11
a101 11
like($@@, $FATAL_MSG);
is(substr($a,-5,-7), '');  # R P=Q S
is(substr($a, 2,-7), '');  # R P Q S
is(substr($a,-3,-7), '');  # R P Q S
is(substr($a, 2,-5), '');  # P=R Q S
is(substr($a,-3,-5), '');  # P=R Q S
is(substr($a, 2,-4), '');  # P R Q S
is(substr($a,-3,-4), '');  # P R Q S
is(substr($a, 5,-6), '');  # R P Q=S
is(substr($a, 5,-5), '');  # P=R Q S
is(substr($a, 5,-3), '');  # P R Q=S
d103 1
a103 1
is($w--, 1);
d105 1
a105 1
like($@@, $FATAL_MSG);
d107 1
a107 1
is($w--, 1);
d109 1
a109 1
like($@@, $FATAL_MSG);
d111 1
a111 1
is($w--, 1);
d113 1
a113 1
like($@@, $FATAL_MSG);
d115 1
a115 1
is($w--, 1);
d117 1
a117 1
like($@@, $FATAL_MSG);
d119 26
a144 26
is(substr($a,-7,2), '');   # Q P=R S
is(substr($a,-7,4), '54'); # Q P R S
is(substr($a,-7,7), '54321');# Q P R=S
is(substr($a,-7,9), '54321');# Q P S R
is(substr($a,-5,0), '');   # P=Q=R S
is(substr($a,-5,3), '543');# P=Q R S
is(substr($a,-5,5), '54321');# P=Q R=S
is(substr($a,-5,7), '54321');# P=Q S R
is(substr($a,-3,0), '');   # P Q=R S
is(substr($a,-3,3), '321');# P Q R=S
is(substr($a,-2,3), '21'); # P Q S R
is(substr($a,0,-5), '');   # P=Q=R S
is(substr($a,2,-3), '');   # P Q=R S
is(substr($a,0,0), '');    # P=Q=R S
is(substr($a,0,5), '54321');# P=Q R=S
is(substr($a,0,7), '54321');# P=Q S R
is(substr($a,2,0), '');    # P Q=R S
is(substr($a,2,3), '321'); # P Q R=S
is(substr($a,5,0), '');    # P Q=R=S
is(substr($a,5,2), '');    # P Q=S R
is(substr($a,-7,-5), '');  # Q P=R S
is(substr($a,-7,-2), '543');# Q P R S
is(substr($a,-5,-5), '');  # P=Q=R S
is(substr($a,-5,-2), '543');# P=Q R S
is(substr($a,-3,-3), '');  # P Q=R S
is(substr($a,-3,-1), '32');# P Q R S
d148 6
a153 6
is(substr($a,-2,2), '');   # Q P=R=S
is(substr($a,0,0), '');    # P=Q=R=S
is(substr($a,0,1), '');    # P=Q=S R
is(substr($a,-2,3), '');   # Q P=S R
is(substr($a,-2), '');     # Q P=R=S
is(substr($a,0), '');      # P=Q=R=S
d156 1
a156 1
is(substr($a,0,-1), '');   # R P=Q=S
d158 1
a158 1
is($w--, 1);
d160 1
a160 1
like($@@, $FATAL_MSG);
d163 1
a163 1
is($w--, 1);
d165 1
a165 1
like($@@, $FATAL_MSG);
d168 1
a168 1
is($w--, 1);
d170 1
a170 1
like($@@, $FATAL_MSG);
d173 1
a173 1
is($w--, 1);
d175 1
a175 1
like($@@, $FATAL_MSG);
d178 1
a178 1
is($w--, 1);
d180 1
a180 1
like($@@, $FATAL_MSG);
d183 1
a183 1
is($w--, 1);
d185 1
a185 1
like($@@, $FATAL_MSG);
d188 1
a188 1
is($w--, 1);
d190 1
a190 1
like($@@, $FATAL_MSG);
d193 1
a193 1
is($w--, 1);
d195 1
a195 1
like($@@, $FATAL_MSG);
d199 1
a199 1
is($a, 'zxcvbnm');
d201 1
a201 1
is($a, 'zxcvbnm');
d203 1
a203 1
is($a, 'zxcvbnm');
d205 1
a205 1
is($a, 'pqcvbnm');
d207 1
a207 1
is($a, 'pqrcvbnm');
d209 1
a209 1
is($a, 'pqrcvbnmasd');
d211 1
a211 1
is($a, 'ioprcvbnmasd');
d213 1
a213 1
is($a, 'fghvbnmasd');
d215 1
a215 1
is($a, 'fghjklsd');
d217 1
a217 1
is($a, 'fgh1234lsd');
d226 1
a226 1
    is($txt, "FoX");
d230 1
a230 1
    is($txt, "X");
d239 1
a239 3
  is (substr($s,0,7), "FooRRAY");
  is ($w,2);
  $w = 0;
d243 1
a243 1
is($w, 0);
d248 6
a253 10
is(substr($a, 0, 3, ""), "abc");
is($a, "xyz");
is(substr($a, 0, 0, "abc"), "");
is($a, "abcxyz");
is(substr($a, 3, -1, ""), "xy");
is($a, "abcz");

is(substr($a, 3, undef, "xy"), "");
is($a, "abcxyz");
is($w, 3);
d257 1
a257 2
is(substr($a, 3, 9999999, ""), "xyz");
is($a, "abc");
d259 1
a259 1
like($@@, $FATAL_MSG);
d261 1
a261 1
like($@@, $FATAL_MSG);
d264 1
a264 2
is ($a, "foo");
is ($w, 0);
d268 1
a268 2
like ($@@, qr/Can't modify substr/);
is ($a, "foo");
d271 2
a272 2
is(sub { shift }->(substr($a, 0, 4, "xxxx")), 'abcd');
is($a, 'xxxxefgh');
d277 1
a277 1
    is ($y, 210);
d283 1
a283 1
    is(length($x), 3);
d285 1
a285 1
    is($x, "\x{263a}");
d287 1
a287 1
    is(length($x), 2);
d289 2
a290 2
    is($x, "abcd\x{263a}");
    is(length($x), 5);
d292 2
a293 2
    is(length($x), 5);
    is($x, "\x{263a}dcba");
d297 2
a298 2
    is(length($z), 5);
    is($z, "21\x{263a}10");
d306 1
a306 2
is(substr($data{'a'}, 0, 5, ""), "first");
is($data{'a'}, "last");
d314 5
a318 5
is(length($x), 3);
is($x, "\x{100}\xF2\xF3");
is(substr($x, 0, 1), "\x{100}");
is(substr($x, 1, 1), "\x{F2}");
is(substr($x, 2, 1), "\x{F3}");
d322 6
a327 6
is(length($x), 4);
is($x, "\x{100}\x{FF}\xF2\xF3");
is(substr($x, 0, 1), "\x{100}");
is(substr($x, 1, 1), "\x{FF}");
is(substr($x, 2, 1), "\x{F2}");
is(substr($x, 3, 1), "\x{F3}");
d333 5
a337 5
is(length($x), 3);
is($x, "\x{100}\xFF\xF3");
is(substr($x, 0, 1), "\x{100}");
is(substr($x, 1, 1), "\x{FF}");
is(substr($x, 2, 1), "\x{F3}");
d341 6
a346 6
is(length($x), 4);
is($x, "\xF1\x{100}\xFF\xF3");
is(substr($x, 0, 1), "\x{F1}");
is(substr($x, 1, 1), "\x{100}");
is(substr($x, 2, 1), "\x{FF}");
is(substr($x, 3, 1), "\x{F3}");
d350 6
a355 6
is(length($x), 4);
is($x, "\xF1\xF2\x{100}\xFF");
is(substr($x, 0, 1), "\x{F1}");
is(substr($x, 1, 1), "\x{F2}");
is(substr($x, 2, 1), "\x{100}");
is(substr($x, 3, 1), "\x{FF}");
d359 7
a365 7
is(length($x), 5);
is($x, "\xF1\xF2\xF3\x{100}\xFF");
is(substr($x, 0, 1), "\x{F1}");
is(substr($x, 1, 1), "\x{F2}");
is(substr($x, 2, 1), "\x{F3}");
is(substr($x, 3, 1), "\x{100}");
is(substr($x, 4, 1), "\x{FF}");
d369 6
a374 6
is(length($x), 4);
is($x, "\xF1\xF2\x{100}\xFF");
is(substr($x, 0, 1), "\x{F1}");
is(substr($x, 1, 1), "\x{F2}");
is(substr($x, 2, 1), "\x{100}");
is(substr($x, 3, 1), "\x{FF}");
d378 7
a384 7
is(length($x), 5);
is($x, "\xF1\xF2\x{100}\xFF\xF3");
is(substr($x, 0, 1), "\x{F1}");
is(substr($x, 1, 1), "\x{F2}");
is(substr($x, 2, 1), "\x{100}");
is(substr($x, 3, 1), "\x{FF}");
is(substr($x, 4, 1), "\x{F3}");
d388 5
a392 5
is(length($x), 3);
is($x, "\x{100}\xFF\xF3");
is(substr($x, 0, 1), "\x{100}");
is(substr($x, 1, 1), "\x{FF}");
is(substr($x, 2, 1), "\x{F3}");
d396 6
a401 6
is(length($x), 4);
is($x, "\x{100}\xFF\xF2\xF3");
is(substr($x, 0, 1), "\x{100}");
is(substr($x, 1, 1), "\x{FF}");
is(substr($x, 2, 1), "\x{F2}");
is(substr($x, 3, 1), "\x{F3}");
d405 7
a411 7
is(length($x), 5);
is($x, "\x{100}\xFF\xF1\xF2\xF3");
is(substr($x, 0, 1), "\x{100}");
is(substr($x, 1, 1), "\x{FF}");
is(substr($x, 2, 1), "\x{F1}");
is(substr($x, 3, 1), "\x{F2}");
is(substr($x, 4, 1), "\x{F3}");
d415 6
a420 6
is(length($x), 4);
is($x, "\xF1\x{100}\xFF\xF3");
is(substr($x, 0, 1), "\x{F1}");
is(substr($x, 1, 1), "\x{100}");
is(substr($x, 2, 1), "\x{FF}");
is(substr($x, 3, 1), "\x{F3}");
d424 7
a430 7
is(length($x), 5);
is($x, "\xF1\xF2\x{100}\xFF\xF3");
is(substr($x, 0, 1), "\x{F1}");
is(substr($x, 1, 1), "\x{F2}");
is(substr($x, 2, 1), "\x{100}");
is(substr($x, 3, 1), "\x{FF}");
is(substr($x, 4, 1), "\x{F3}");
d436 5
a440 5
is(length($x), 3);
is($x, "\x{100}\xF2\xF3");
is(substr($x, 0, 1), "\x{100}");
is(substr($x, 1, 1), "\x{F2}");
is(substr($x, 2, 1), "\x{F3}");
d444 6
a449 6
is(length($x), 4);
is($x, "\x{100}\x{FF}\xF2\xF3");
is(substr($x, 0, 1), "\x{100}");
is(substr($x, 1, 1), "\x{FF}");
is(substr($x, 2, 1), "\x{F2}");
is(substr($x, 3, 1), "\x{F3}");
d453 5
a457 5
is(length($x), 3);
is($x, "\x{100}\xFF\xF3");
is(substr($x, 0, 1), "\x{100}");
is(substr($x, 1, 1), "\x{FF}");
is(substr($x, 2, 1), "\x{F3}");
d461 6
a466 6
is(length($x), 4);
is($x, "\x{101}\x{100}\xFF\xF3");
is(substr($x, 0, 1), "\x{101}");
is(substr($x, 1, 1), "\x{100}");
is(substr($x, 2, 1), "\x{FF}");
is(substr($x, 3, 1), "\x{F3}");
d470 6
a475 6
is(length($x), 4);
is($x, "\x{101}\xF2\x{100}\xFF");
is(substr($x, 0, 1), "\x{101}");
is(substr($x, 1, 1), "\x{F2}");
is(substr($x, 2, 1), "\x{100}");
is(substr($x, 3, 1), "\x{FF}");
d479 7
a485 7
is(length($x), 5);
is($x, "\x{101}\x{F2}\x{F3}\x{100}\xFF");
is(substr($x, 0, 1), "\x{101}");
is(substr($x, 1, 1), "\x{F2}");
is(substr($x, 2, 1), "\x{F3}");
is(substr($x, 3, 1), "\x{100}");
is(substr($x, 4, 1), "\x{FF}");
d489 6
a494 6
is(length($x), 4);
is($x, "\x{101}\xF2\x{100}\xFF");
is(substr($x, 0, 1), "\x{101}");
is(substr($x, 1, 1), "\x{F2}");
is(substr($x, 2, 1), "\x{100}");
is(substr($x, 3, 1), "\x{FF}");
d498 7
a504 7
is(length($x), 5);
is($x, "\x{101}\xF2\x{100}\xFF\xF3");
is(substr($x, 0, 1), "\x{101}");
is(substr($x, 1, 1), "\x{F2}");
is(substr($x, 2, 1), "\x{100}");
is(substr($x, 3, 1), "\x{FF}");
is(substr($x, 4, 1), "\x{F3}");
d508 5
a512 5
is(length($x), 3);
is($x, "\x{100}\xFF\xF3");
is(substr($x, 0, 1), "\x{100}");
is(substr($x, 1, 1), "\x{FF}");
is(substr($x, 2, 1), "\x{F3}");
d516 6
a521 6
is(length($x), 4);
is($x, "\x{100}\xFF\xF2\xF3");
is(substr($x, 0, 1), "\x{100}");
is(substr($x, 1, 1), "\x{FF}");
is(substr($x, 2, 1), "\x{F2}");
is(substr($x, 3, 1), "\x{F3}");
d525 7
a531 7
is(length($x), 5);
is($x, "\x{100}\xFF\x{101}\x{F2}\x{F3}");
is(substr($x, 0, 1), "\x{100}");
is(substr($x, 1, 1), "\x{FF}");
is(substr($x, 2, 1), "\x{101}");
is(substr($x, 3, 1), "\x{F2}");
is(substr($x, 4, 1), "\x{F3}");
d535 6
a540 6
is(length($x), 4);
is($x, "\x{101}\x{100}\xFF\xF3");
is(substr($x, 0, 1), "\x{101}");
is(substr($x, 1, 1), "\x{100}");
is(substr($x, 2, 1), "\x{FF}");
is(substr($x, 3, 1), "\x{F3}");
d544 7
a550 7
is(length($x), 5);
is($x, "\x{101}\xF2\x{100}\xFF\xF3");
is(substr($x, 0, 1), "\x{101}");
is(substr($x, 1, 1), "\x{F2}");
is(substr($x, 2, 1), "\x{100}");
is(substr($x, 3, 1), "\x{FF}");
is(substr($x, 4, 1), "\x{F3}");
d553 1
a553 1
is($x, "\x{100}\x{200}ab");
d556 1
a556 1
is($x, "ab\x{100}\x{200}");
d559 1
a559 1
is($x, "a\x{100}\x{200}b");
d562 1
a562 1
is($x, "\x{100}ab\x{200}");
d565 1
a565 1
is($x, "ab\x{100}\x{200}");
d568 1
a568 1
is($x, "\x{100}\x{200}ab");
d571 1
a571 1
is($x, "\x{100}\x{200}\xFFb");
d574 1
a574 1
is($x, "\xFFb\x{100}\x{200}");
d577 1
a577 1
is($x, "\xFF\x{100}\x{200}b");
d580 1
a580 1
is($x, "\x{100}\xFFb\x{200}");
d583 1
a583 1
is($x, "\xFFb\x{100}\x{200}");
d586 1
a586 1
is($x, "\x{100}\x{200}\xFFb");
d593 1
a593 1
    is(join("", map { $$_ } @@r), "ab");
d603 1
a603 1
    is($x, $y);
d610 1
a610 1
    is(substr($x, 7, 1), "7");
d619 1
a619 1
    is(bar, 'XXX');
d621 1
a621 1
    is(bar, '123456789');
d631 1
a631 1
    is(substr($text,$pos,1), $pos);
d639 1
a639 8
    is($a, "\xbf");
}

# [perl #34976] incorrect caching of utf8 substr length
{
    my  $a = "abcd\x{100}";
    is(substr($a,1,2), 'bc');
    is(substr($a,1,1), 'b');
@


1.1.1.9
log
@import perl 5.10.0 from CPAN
@
text
@d26 1
a26 1
plan(334);
a620 20
}

# multiple assignments to lvalue [perl #24346]   
{
    my $x = "abcdef";
    for (substr($x,1,3)) {
	is($_, 'bcd');
	$_ = 'XX';
	is($_, 'XX');
	is($x, 'aXXef'); 
	$_ = "\xFF";
	is($_, "\xFF"); 
	is($x, "a\xFFef");
	$_ = "\xF1\xF2\xF3\xF4\xF5\xF6";
	is($_, "\xF1\xF2\xF3\xF4\xF5\xF6");
	is($x, "a\xF1\xF2\xF3\xF4\xF5\xF6ef"); 
	$_ = 'YYYY';
	is($_, 'YYYY'); 
	is($x, 'aYYYYef');
    }
@


1.1.1.10
log
@import perl 5.10.1
@
text
@a27 6
run_tests() unless caller;

my $krunch = "a";

sub run_tests {

d646 2
a647 1
    sub bar: lvalue { substr $krunch, 0 }
d650 1
a650 1
    $krunch = '123456789';
a676 2
}

@


1.1.1.11
log
@import perl 5.16.3 from CPAN - worked on by Andrew Fresh and myself
@
text
@d1 1
a1 1
#!./perl
d24 1
a24 1
BEGIN { require './test.pl'; }
d26 1
a26 1
plan(381);
d45 14
a58 2
sub{$b = shift}->(substr($a,999,999));
is ($w--, 1, 'boundless lvalue substr only warns on fetch');
a202 5
$b = substr($a,-7,-6) ; # warn  # Q R P S
is($w--, 1);
eval{substr($a,-7,-6) = "" ; }; # Q R P S
like($@@, $FATAL_MSG);

a646 45
    $x = "abcdef";
    for (substr($x,1)) {
	is($_, 'bcdef');
	$_ = 'XX';
	is($_, 'XX');
	is($x, 'aXX');
	$x .= "frompswiggle";
	is $_, "XXfrompswiggle";
    }
    $x = "abcdef";
    for (substr($x,1,-1)) {
	is($_, 'bcde');
	$_ = 'XX';
	is($_, 'XX');
	is($x, 'aXXf');
	$x .= "frompswiggle";
	is $_, "XXffrompswiggl";
    }
    $x = "abcdef";
    for (substr($x,-5,3)) {
	is($_, 'bcd');
	$_ = 'XX';   # now $_ is substr($x, -4, 2)
	is($_, 'XX');
	is($x, 'aXXef');
	$x .= "frompswiggle";
	is $_, "gg";
    }
    $x = "abcdef";
    for (substr($x,-5)) {
	is($_, 'bcdef');
	$_ = 'XX';  # now substr($x, -2)
	is($_, 'XX');
	is($x, 'aXX');
	$x .= "frompswiggle";
	is $_, "le";
    }
    $x = "abcdef";
    for (substr($x,-5,-1)) {
	is($_, 'bcde');
	$_ = 'XX';  # now substr($x, -3, -1)
	is($_, 'XX');
	is($x, 'aXXf');
	$x .= "frompswiggle";
	is $_, "gl";
    }
a683 97
# [perl #62646] offsets exceeding 32 bits on 64-bit system
SKIP: {
    skip("32-bit system", 24) unless ~0 > 0xffffffff;
    my $a = "abc";
    my $s;
    my $r;

    utf8::downgrade($a);
    for (1..2) {
	$w = 0;
	$r = substr($a, 0xffffffff, 1);
	is($r, undef);
	is($w, 1);

	$w = 0;
	$r = substr($a, 0xffffffff+1, 1);
	is($r, undef);
	is($w, 1);

	$w = 0;
	ok( !eval { $r = substr($s=$a, 0xffffffff, 1, "_"); 1 } );
	is($r, undef);
	is($s, $a);
	is($w, 0);

	$w = 0;
	ok( !eval { $r = substr($s=$a, 0xffffffff+1, 1, "_"); 1 } );
	is($r, undef);
	is($s, $a);
	is($w, 0);

	utf8::upgrade($a);
    }
}

# [perl #77692] UTF8 cache not being reset when TARG is reused
ok eval {
 local ${^UTF8CACHE} = -1;
 for my $i (0..1)
 {
   my $dummy = length(substr("\x{100}",0,$i));
 }
 1
}, 'UTF8 cache is reset when TARG is reused [perl #77692]';

{
    use utf8;
    use open qw( :utf8 :std );
    no warnings 'once';

    my $t = "";
    substr $t, 0, 0, *ワルド;
    is($t, "*main::ワルド", "substr works on UTF-8 globs");

    $t = "The World!";
    substr $t, 0, 9, *ザ::ワルド;
    is($t, "*ザ::ワルド!", "substr works on a UTF-8 glob + stash");
}

{
    my $x = *foo;
    my $y = \substr *foo, 0, 0;
    is ref \$x, 'GLOB', '\substr does not coerce its glob arg just yet';
    $x = \"foo";
    $y = \substr *foo, 0, 0;
    is ref \$x, 'REF', '\substr does not coerce its ref arg just yet';
}

} # sub run_tests - put tests above this line that can run in threads


my $destroyed;
{ package Class; DESTROY { ++$destroyed; } }

$destroyed = 0;
{
    my $x = '';
    substr($x,0,1) = "";
    $x = bless({}, 'Class');
}
is($destroyed, 1, 'Timely scalar destruction with lvalue substr');

{
    my $result_3363;
    sub a_3363 {
        my ($word, $replace) = @@_;
        my $ref = \substr($word, 0, 1);
        $$ref = $replace;
        if ($replace eq "b") {
            $result_3363 = $word;
        } else {
            a_3363($word, "b");
        }
    }
    a_3363($_, "v") for "test";

    is($result_3363, "best", "ref-to-substr retains lvalue-ness under recursion [perl #3363]");
@


1.1.1.12
log
@Import perl-5.18.2

OK espie@@ sthen@@ deraadt@@
@
text
@d26 1
a26 1
plan(387);
a788 45

# Test that UTF8-ness of magic var changing does not confuse substr lvalue
# assignment.
# We use overloading for our magic var, but a typeglob would work, too.
package o {
    use overload '""' => sub { ++our $count; $_[0][0] }
}
my $refee = bless ["\x{100}a"], o::;
my $substr = \substr $refee, -2;	# UTF8 flag still off for $$substr.
$$substr = "b";				# UTF8 flag turns on when setsubstr
is $refee, "b",				# magic stringifies $$substr.
     'substr lvalue assignment when stringification turns on UTF8ness';

# Test that changing UTF8-ness does not confuse 4-arg substr.
$refee = bless [], "\x{100}a";
# stringify without returning on UTF8 flag on $refee:
my $string = $refee; $string = "$string";
substr $refee, 0, 0, "\xff";
is $refee, "\xff$string",
  '4-arg substr with target UTF8ness turning on when stringified';
$refee = bless [], "\x{100}";
() = "$refee"; # UTF8 flag now on
bless $refee, "\xff";
$string = $refee; $string = "$string";
substr $refee, 0, 0, "\xff";
is $refee, "\xff$string",
  '4-arg substr with target UTF8ness turning off when stringified';

# Overload count
$refee = bless ["foo"], o::;
$o::count = 0;
substr $refee, 0, 0, "";
is $o::count, 1, '4-arg substr calls overloading once on the target';
$refee = bless ["\x{100}"], o::;
() = "$refee"; # turn UTF8 flag on
$o::count = 0;
() = substr $refee, 0;
is $o::count, 1, 'rvalue substr calls overloading once on utf8 target';
$o::count = 0;
$refee = "";
${\substr $refee, 0} = bless ["\x{100}"], o::;
is $o::count, 1, 'assigning utf8 overload to substr lvalue calls ovld 1ce';

# [perl #7678] core dump with substr reference and localisation
{$b="abcde"; local $k; *k=\substr($b, 2, 1);}
@


