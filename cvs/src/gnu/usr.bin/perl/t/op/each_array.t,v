head	1.2;
access;
symbols
	OPENBSD_6_1:1.2.0.2
	OPENBSD_6_1_BASE:1.2
	OPENBSD_6_0:1.1.1.3.0.12
	OPENBSD_6_0_BASE:1.1.1.3
	OPENBSD_5_9:1.1.1.3.0.6
	OPENBSD_5_9_BASE:1.1.1.3
	OPENBSD_5_8:1.1.1.3.0.8
	OPENBSD_5_8_BASE:1.1.1.3
	PERL_5_20_2:1.1.1.3
	OPENBSD_5_7:1.1.1.3.0.2
	OPENBSD_5_7_BASE:1.1.1.3
	PERL_5_20_1:1.1.1.3
	OPENBSD_5_6:1.1.1.3.0.4
	OPENBSD_5_6_BASE:1.1.1.3
	PERL_5_18_2:1.1.1.3
	PERL:1.1.1
	OPENBSD_5_5:1.1.1.2.0.6
	OPENBSD_5_5_BASE:1.1.1.2
	OPENBSD_5_4:1.1.1.2.0.2
	OPENBSD_5_4_BASE:1.1.1.2
	PERL_5_16_3:1.1.1.2
	OPENBSD_5_3:1.1.1.1.0.10
	OPENBSD_5_3_BASE:1.1.1.1
	OPENBSD_5_2:1.1.1.1.0.8
	OPENBSD_5_2_BASE:1.1.1.1
	OPENBSD_5_1_BASE:1.1.1.1
	OPENBSD_5_1:1.1.1.1.0.6
	OPENBSD_5_0:1.1.1.1.0.4
	OPENBSD_5_0_BASE:1.1.1.1
	OPENBSD_4_9:1.1.1.1.0.2
	OPENBSD_4_9_BASE:1.1.1.1
	PERL_5_12_2:1.1.1.1
	CPAN:1.1.1;
locks; strict;
comment	@# @;
expand	@o@;


1.2
date	2017.02.05.00.32.20;	author afresh1;	state Exp;
branches;
next	1.1;
commitid	cxJ08BvJA9Pt2PTM;

1.1
date	2010.09.24.14.49.17;	author millert;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	2010.09.24.14.49.17;	author millert;	state Exp;
branches;
next	1.1.1.2;

1.1.1.2
date	2013.03.25.20.09.35;	author sthen;	state Exp;
branches;
next	1.1.1.3;

1.1.1.3
date	2014.03.24.14.59.10;	author afresh1;	state Exp;
branches;
next	;


desc
@@


1.2
log
@Fix merge issues, remove excess files - match perl-5.24.1 dist
@
text
@#!./perl

BEGIN {
    chdir 't' if -d 't';
    @@INC = '../lib';
    require './test.pl';
}
use strict;
use warnings;
use vars qw(@@array @@r $k $v $c);

plan tests => 65;

@@array = qw(crunch zam bloop);

(@@r) = each @@array;
is (scalar @@r, 2, "'each' on array returns index and value of next element");
is ($r[0], 0, "got expected index");
is ($r[1], 'crunch', "got expected value");
($k, $v) = each @@array;
is ($k, 1, "got expected index of next element");
is ($v, 'zam', "got expected value of next element");
($k, $v) = each @@array;
is ($k, 2, "got expected index of remaining element");
is ($v, 'bloop', "got expected value of remaining element");
(@@r) = each @@array;
is (scalar @@r, 0,
    "no elements remaining to be iterated over in original array");

(@@r) = each @@array;
is (scalar @@r, 2, "start second iteration over original array");
is ($r[0], 0, "got expected index");
is ($r[1], 'crunch', "got expected value");
($k) = each @@array;
is ($k, 1, "got index when only index was assigned to variable");

my @@lex_array = qw(PLOP SKLIZZORCH RATTLE);

(@@r) = each @@lex_array;
is (scalar @@r, 2, "'each' on array returns index and value of next element");
is ($r[0], 0, "got expected index");
is ($r[1], 'PLOP', "got expected value");
($k, $v) = each @@lex_array;
is ($k, 1, "got expected index of next element");
is ($v, 'SKLIZZORCH', "got expected value of next element");
($k) = each @@lex_array;
is ($k, 2, "got expected index of remaining element");
(@@r) = each @@lex_array;
is (scalar @@r, 0,
    "no elements remaining to be iterated over in original array");

my $ar = ['bacon'];

(@@r) = each @@$ar;
is (scalar @@r, 2,
    "'each' on array inside reference returns index and value of next element");
is ($r[0], 0, "got expected index");
is ($r[1], 'bacon', "got expected value of array element inside reference");

(@@r) = each @@$ar;
is (scalar @@r, 0,
    "no elements remaining to be iterated over in array inside reference");

is (each @@$ar, 0, "scalar context 'each' on array returns expected index");
is (scalar each @@$ar, undef,
    "no elements remaining to be iterated over; array reference case");

my @@keys;
@@keys = keys @@array;
is ("@@keys", "0 1 2",
    "'keys' on array in list context returns list of indices");

@@keys = keys @@lex_array;
is ("@@keys", "0 1 2",
    "'keys' on another array in list context returns list of indices");

($k, $v) = each @@array;
is ($k, 0, "got expected index");
is ($v, 'crunch', "got expected value");

@@keys = keys @@array;
is ("@@keys", "0 1 2",
    "'keys' on array in list context returns list of indices");

($k, $v) = each @@array;
is ($k, 0, "following 'keys', got expected index");
is ($v, 'crunch', "following 'keys', got expected value");



my @@values;
@@values = values @@array;
is ("@@values", "@@array",
    "'values' on array returns list of values");

@@values = values @@lex_array;
is ("@@values", "@@lex_array",
    "'values' on another array returns list of values");

($k, $v) = each @@array;
is ($k, 0, "following 'values', got expected index");
is ($v, 'crunch', "following 'values', got expected index");

@@values = values @@array;
is ("@@values", "@@array",
    "following 'values' and 'each', 'values' continues to return expected list of values");

($k, $v) = each @@array;
is ($k, 0,
    "following 'values', 'each' and 'values', 'each' continues to return expected index");
is ($v, 'crunch',
    "following 'values', 'each' and 'values', 'each' continues to return expected value");

# reset
while (each @@array) { }

# each(ARRAY) in the conditional loop
$c = 0;
while (($k, $v) = each @@array) {
    is ($k, $c, "'each' on array in loop returns expected index '$c'");
    is ($v, $array[$k],
        "'each' on array in loop returns expected value '$array[$k]'");
    $c++;
}

# each(ARRAY) on scalar context in conditional loop
# should guarantee to be wrapped into defined() function.
# first return value will be 0 --> [#90888]
$c = 0;
$k = 0;
$v = 0;
while ($k = each @@array) {
    is ($k, $v,
        "'each' on array in scalar context in loop returns expected index '$v'");
    $v++;
}

# each(ARRAY) in the conditional loop
$c = 0;
for (; ($k, $v) = each @@array ;) {
    is ($k, $c,
        "'each' on array in list context in loop returns expected index '$c'");
    is ($v, $array[$k],
        "'each' on array in list context in loop returns expected value '$array[$k]'");
    $c++;
}

# each(ARRAY) on scalar context in conditional loop
# --> [#90888]
$c = 0;
$k = 0;
$v = 0;
for (; $k = each(@@array) ;) {
    is ($k, $v,
        "'each' on array in scalar context in loop returns expected index '$v'");
    $v++;
}

# Reset the iterator when the array is cleared [RT #75596]
{
    my @@a = 'a' .. 'c';
    my ($i, $v) = each @@a;
    is ("$i-$v", '0-a', "got expected index and value");
    @@a = 'A' .. 'C';
    ($i, $v) = each @@a;
    is ("$i-$v", '0-A',
        "got expected new index and value after array gets new content");
}

# Check that the iterator is reset when localization ends
{
    @@array = 'a' .. 'c';
    my ($i, $v) = each @@array;
    is ("$i-$v", '0-a', "got expected index and value");
    {
        local @@array = 'A' .. 'C';
        my ($i, $v) = each @@array;
        is ("$i-$v", '0-A',
            "got expected new index and value after array is localized and gets new content");
        ($i, $v) = each @@array;
        is ("$i-$v", '1-B',
            "got expected next index and value after array is localized and gets new content");
    }
    ($i, $v) = each @@array;
    is ("$i-$v", '1-b',
         "got expected next index and value upon return to pre-localized array");
    # Explicit reset
    while (each @@array) { }
}

my $a = 7;
*a = sub  { \@@_ }->($a);
($a, $b) = each our @@a;
is "$a $b", "0 7", 'each in list assignment';
$a = 7;
($a, $b) = (3, values @@a);
is "$a $b", "3 7", 'values in list assignment';
@


1.1
log
@Initial revision
@
text
@d10 1
a10 2
no warnings 'deprecated';
use vars qw(@@array @@r $k $v);
d12 1
a12 1
plan tests => 48;
d17 3
a19 3
is (scalar @@r, 2);
is ($r[0], 0);
is ($r[1], 'crunch');
d21 2
a22 2
is ($k, 1);
is ($v, 'zam');
d24 2
a25 2
is ($k, 2);
is ($v, 'bloop');
d27 2
a28 1
is (scalar @@r, 0);
d31 3
a33 3
is (scalar @@r, 2);
is ($r[0], 0);
is ($r[1], 'crunch');
d35 1
a35 9
is ($k, 1);
{
    $[ = 2;
    my ($k, $v) = each @@array;
    is ($k, 4);
    is ($v, 'bloop');
    (@@r) = each @@array;
    is (scalar @@r, 0);
}
d37 1
a37 1
my @@lex_array = qw(PLOP SKLIZZORCH RATTLE PBLRBLPSFT);
d40 3
a42 3
is (scalar @@r, 2);
is ($r[0], 0);
is ($r[1], 'PLOP');
d44 2
a45 2
is ($k, 1);
is ($v, 'SKLIZZORCH');
d47 1
a47 7
is ($k, 2);
{
    $[ = -42;
    my ($k, $v) = each @@lex_array;
    is ($k, -39);
    is ($v, 'PBLRBLPSFT');
}
d49 2
a50 1
is (scalar @@r, 0);
d55 4
a58 3
is (scalar @@r, 2);
is ($r[0], 0);
is ($r[1], 'bacon');
d61 2
a62 1
is (scalar @@r, 0);
d64 3
a66 2
is (each @@$ar, 0);
is (scalar each @@$ar, undef);
d70 2
a71 1
is ("@@keys", "0 1 2");
d74 2
a75 11
is ("@@keys", "0 1 2 3");

{
    $[ = 1;

    @@keys = keys @@array;
    is ("@@keys", "1 2 3");

    @@keys = keys @@lex_array;
    is ("@@keys", "1 2 3 4");
}
d78 2
a79 2
is ($k, 0);
is ($v, 'crunch');
d82 2
a83 1
is ("@@keys", "0 1 2");
d86 2
a87 2
is ($k, 0);
is ($v, 'crunch');
d93 2
a94 1
is ("@@values", "@@array");
d97 10
a106 1
is ("@@values", "@@lex_array");
d108 29
a136 2
{
    $[ = 1;
d138 9
a146 2
    @@values = values @@array;
    is ("@@values", "@@array");
d148 9
a156 2
    @@values = values @@lex_array;
    is ("@@values", "@@lex_array");
d159 10
a168 3
($k, $v) = each @@array;
is ($k, 0);
is ($v, 'crunch');
d170 20
a189 2
@@values = values @@array;
is ("@@values", "@@array");
d191 7
a197 3
($k, $v) = each @@array;
is ($k, 0);
is ($v, 'crunch');
@


1.1.1.1
log
@Perl 5.12.2 from CPAN
@
text
@@


1.1.1.2
log
@import perl 5.16.3 from CPAN - worked on by Andrew Fresh and myself
@
text
@d10 2
a11 1
use vars qw(@@array @@r $k $v $c);
d13 1
a13 1
plan tests => 57;
d36 8
d45 1
a45 1
my @@lex_array = qw(PLOP SKLIZZORCH RATTLE);
d56 6
d83 11
a93 1
is ("@@keys", "0 1 2");
d115 10
a134 40

# reset
while (each @@array) { }

# each(ARRAY) in the conditional loop
$c = 0;
while (($k, $v) = each @@array) {
    is ($k, $c);
    is ($v, $array[$k]);
    $c++;
}

# each(ARRAY) on scalar context in conditional loop
# should guarantee to be wrapped into defined() function.
# first return value will be 0 --> [#90888]
$c = 0;
$k = 0;
$v = 0;
while ($k = each @@array) {
    is ($k, $v);
    $v++;
}

# each(ARRAY) in the conditional loop
$c = 0;
for (; ($k, $v) = each @@array ;) {
    is ($k, $c);
    is ($v, $array[$k]);
    $c++;
}

# each(ARRAY) on scalar context in conditional loop
# --> [#90888]
$c = 0;
$k = 0;
$v = 0;
for (; $k = each(@@array) ;) {
    is ($k, $v);
    $v++;
}
@


1.1.1.3
log
@Import perl-5.18.2

OK espie@@ sthen@@ deraadt@@
@
text
@d12 1
a12 1
plan tests => 63;
d17 3
a19 3
is (scalar @@r, 2, "'each' on array returns index and value of next element");
is ($r[0], 0, "got expected index");
is ($r[1], 'crunch', "got expected value");
d21 2
a22 2
is ($k, 1, "got expected index of next element");
is ($v, 'zam', "got expected value of next element");
d24 2
a25 2
is ($k, 2, "got expected index of remaining element");
is ($v, 'bloop', "got expected value of remaining element");
d27 1
a27 2
is (scalar @@r, 0,
    "no elements remaining to be iterated over in original array");
d30 3
a32 3
is (scalar @@r, 2, "start second iteration over original array");
is ($r[0], 0, "got expected index");
is ($r[1], 'crunch', "got expected value");
d34 1
a34 1
is ($k, 1, "got index when only index was assigned to variable");
d39 3
a41 3
is (scalar @@r, 2, "'each' on array returns index and value of next element");
is ($r[0], 0, "got expected index");
is ($r[1], 'PLOP', "got expected value");
d43 2
a44 2
is ($k, 1, "got expected index of next element");
is ($v, 'SKLIZZORCH', "got expected value of next element");
d46 1
a46 1
is ($k, 2, "got expected index of remaining element");
d48 1
a48 2
is (scalar @@r, 0,
    "no elements remaining to be iterated over in original array");
d53 3
a55 4
is (scalar @@r, 2,
    "'each' on array inside reference returns index and value of next element");
is ($r[0], 0, "got expected index");
is ($r[1], 'bacon', "got expected value of array element inside reference");
d58 1
a58 2
is (scalar @@r, 0,
    "no elements remaining to be iterated over in array inside reference");
d60 2
a61 3
is (each @@$ar, 0, "scalar context 'each' on array returns expected index");
is (scalar each @@$ar, undef,
    "no elements remaining to be iterated over; array reference case");
d65 1
a65 2
is ("@@keys", "0 1 2",
    "'keys' on array in list context returns list of indices");
d68 1
a68 2
is ("@@keys", "0 1 2",
    "'keys' on another array in list context returns list of indices");
d71 2
a72 2
is ($k, 0, "got expected index");
is ($v, 'crunch', "got expected value");
d75 1
a75 2
is ("@@keys", "0 1 2",
    "'keys' on array in list context returns list of indices");
d78 2
a79 2
is ($k, 0, "following 'keys', got expected index");
is ($v, 'crunch', "following 'keys', got expected value");
d85 1
a85 2
is ("@@values", "@@array",
    "'values' on array returns list of values");
d88 1
a88 2
is ("@@values", "@@lex_array",
    "'values' on another array returns list of values");
d91 2
a92 2
is ($k, 0, "following 'values', got expected index");
is ($v, 'crunch', "following 'values', got expected index");
d95 1
a95 2
is ("@@values", "@@array",
    "following 'values' and 'each', 'values' continues to return expected list of values");
d98 2
a99 4
is ($k, 0,
    "following 'values', 'each' and 'values', 'each' continues to return expected index");
is ($v, 'crunch',
    "following 'values', 'each' and 'values', 'each' continues to return expected value");
d107 2
a108 3
    is ($k, $c, "'each' on array in loop returns expected index '$c'");
    is ($v, $array[$k],
        "'each' on array in loop returns expected value '$array[$k]'");
d119 1
a119 2
    is ($k, $v,
        "'each' on array in scalar context in loop returns expected index '$v'");
d126 2
a127 4
    is ($k, $c,
        "'each' on array in list context in loop returns expected index '$c'");
    is ($v, $array[$k],
        "'each' on array in list context in loop returns expected value '$array[$k]'");
d137 1
a137 2
    is ($k, $v,
        "'each' on array in scalar context in loop returns expected index '$v'");
a138 32
}

# Reset the iterator when the array is cleared [RT #75596]
{
    my @@a = 'a' .. 'c';
    my ($i, $v) = each @@a;
    is ("$i-$v", '0-a', "got expected index and value");
    @@a = 'A' .. 'C';
    ($i, $v) = each @@a;
    is ("$i-$v", '0-A',
        "got expected new index and value after array gets new content");
}

# Check that the iterator is reset when localization ends
{
    @@array = 'a' .. 'c';
    my ($i, $v) = each @@array;
    is ("$i-$v", '0-a', "got expected index and value");
    {
        local @@array = 'A' .. 'C';
        my ($i, $v) = each @@array;
        is ("$i-$v", '0-A',
            "got expected new index and value after array is localized and gets new content");
        ($i, $v) = each @@array;
        is ("$i-$v", '1-B',
            "got expected next index and value after array is localized and gets new content");
    }
    ($i, $v) = each @@array;
    is ("$i-$v", '1-b',
         "got expected next index and value upon return to pre-localized array");
    # Explicit reset
    while (each @@array) { }
@


