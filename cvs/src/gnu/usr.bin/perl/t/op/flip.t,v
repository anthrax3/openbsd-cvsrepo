head	1.10;
access;
symbols
	OPENBSD_6_0:1.9.0.26
	OPENBSD_6_0_BASE:1.9
	OPENBSD_5_9:1.9.0.20
	OPENBSD_5_9_BASE:1.9
	OPENBSD_5_8:1.9.0.22
	OPENBSD_5_8_BASE:1.9
	PERL_5_20_2:1.1.1.8
	OPENBSD_5_7:1.9.0.14
	OPENBSD_5_7_BASE:1.9
	PERL_5_20_1:1.1.1.8
	OPENBSD_5_6:1.9.0.18
	OPENBSD_5_6_BASE:1.9
	PERL_5_18_2:1.1.1.8
	PERL:1.1.1
	OPENBSD_5_5:1.9.0.16
	OPENBSD_5_5_BASE:1.9
	OPENBSD_5_4:1.9.0.12
	OPENBSD_5_4_BASE:1.9
	PERL_5_16_3:1.1.1.8
	OPENBSD_5_3:1.9.0.10
	OPENBSD_5_3_BASE:1.9
	OPENBSD_5_2:1.9.0.8
	OPENBSD_5_2_BASE:1.9
	OPENBSD_5_1_BASE:1.9
	OPENBSD_5_1:1.9.0.6
	OPENBSD_5_0:1.9.0.4
	OPENBSD_5_0_BASE:1.9
	OPENBSD_4_9:1.9.0.2
	OPENBSD_4_9_BASE:1.9
	PERL_5_12_2:1.1.1.8
	OPENBSD_4_8:1.8.0.8
	OPENBSD_4_8_BASE:1.8
	OPENBSD_4_7:1.8.0.4
	OPENBSD_4_7_BASE:1.8
	PERL_5_10_1:1.1.1.7
	OPENBSD_4_6:1.8.0.6
	OPENBSD_4_6_BASE:1.8
	OPENBSD_4_5:1.8.0.2
	OPENBSD_4_5_BASE:1.8
	PERL_5_10_0:1.1.1.7
	OPENBSD_4_4:1.7.0.20
	OPENBSD_4_4_BASE:1.7
	OPENBSD_4_3:1.7.0.18
	OPENBSD_4_3_BASE:1.7
	OPENBSD_4_2:1.7.0.16
	OPENBSD_4_2_BASE:1.7
	OPENBSD_4_1:1.7.0.14
	OPENBSD_4_1_BASE:1.7
	OPENBSD_4_0:1.7.0.12
	OPENBSD_4_0_BASE:1.7
	PERL_5_8_8:1.1.1.6
	OPENBSD_3_9:1.7.0.10
	OPENBSD_3_9_BASE:1.7
	OPENBSD_3_8:1.7.0.8
	OPENBSD_3_8_BASE:1.7
	OPENBSD_3_7:1.7.0.6
	OPENBSD_3_7_BASE:1.7
	PERL_5_8_6:1.1.1.6
	OPENBSD_3_6:1.7.0.4
	OPENBSD_3_6_BASE:1.7
	PERL_5_8_5:1.1.1.5
	PERL_5_8_3:1.1.1.4
	OPENBSD_3_5:1.7.0.2
	OPENBSD_3_5_BASE:1.7
	PERL_5_8_2:1.1.1.4
	OPENBSD_3_4:1.6.0.4
	OPENBSD_3_4_BASE:1.6
	OPENBSD_3_3:1.6.0.2
	OPENBSD_3_3_BASE:1.6
	PERL_5_8_0:1.1.1.4
	OPENBSD_3_2:1.5.0.6
	OPENBSD_3_2_BASE:1.5
	OPENBSD_3_1:1.5.0.4
	OPENBSD_3_1_BASE:1.5
	OPENBSD_3_0:1.5.0.2
	OPENBSD_3_0_BASE:1.5
	PERL_5_6_1:1.1.1.3
	OPENBSD_2_9:1.4.0.6
	OPENBSD_2_9_BASE:1.4
	OPENBSD_2_8:1.4.0.4
	OPENBSD_2_8_BASE:1.4
	OPENBSD_2_7:1.4.0.2
	OPENBSD_2_7_BASE:1.4
	PERL_5_6_0:1.1.1.2
	OPENBSD_2_6:1.3.0.2
	OPENBSD_2_6_BASE:1.3
	PERL_500503:1.1.1.2
	CPAN:1.1.1
	OPENBSD_2_5:1.2.0.6
	OPENBSD_2_5_BASE:1.2
	OPENBSD_2_4:1.2.0.4
	OPENBSD_2_4_BASE:1.2
	OPENBSD_2_3:1.2.0.2
	OPENBSD_2_3_BASE:1.2
	OPENBSD_2_2:1.1.1.1.0.6
	OPENBSD_2_2_BASE:1.1.1.1
	OPENBSD_2_1:1.1.1.1.0.4
	OPENBSD_2_1_BASE:1.1.1.1
	OPENBSD_2_0:1.1.1.1.0.2
	OPENBSD_2_0_BASE:1.1.1.1
	perl5003:1.1.1.1
	lwall:1.1.1;
locks; strict;
comment	@# @;
expand	@o@;


1.10
date	2017.02.05.00.32.20;	author afresh1;	state Exp;
branches;
next	1.9;
commitid	cxJ08BvJA9Pt2PTM;

1.9
date	2010.09.24.15.07.08;	author millert;	state Exp;
branches;
next	1.8;

1.8
date	2008.09.29.17.36.19;	author millert;	state Exp;
branches;
next	1.7;

1.7
date	2003.12.03.03.02.48;	author millert;	state Exp;
branches;
next	1.6;

1.6
date	2002.10.27.22.25.37;	author millert;	state Exp;
branches;
next	1.5;

1.5
date	2001.05.24.18.36.18;	author millert;	state Exp;
branches;
next	1.4;

1.4
date	2000.04.06.17.08.22;	author millert;	state Exp;
branches;
next	1.3;

1.3
date	99.04.29.22.52.35;	author millert;	state Exp;
branches;
next	1.2;

1.2
date	97.11.30.08.05.20;	author millert;	state Exp;
branches;
next	1.1;

1.1
date	96.08.19.10.13.18;	author downsj;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	96.08.19.10.13.18;	author downsj;	state Exp;
branches;
next	1.1.1.2;

1.1.1.2
date	99.04.29.22.41.44;	author millert;	state Exp;
branches;
next	1.1.1.3;

1.1.1.3
date	2001.05.24.18.25.37;	author millert;	state Exp;
branches;
next	1.1.1.4;

1.1.1.4
date	2002.10.27.22.15.10;	author millert;	state Exp;
branches;
next	1.1.1.5;

1.1.1.5
date	2004.08.09.17.48.34;	author millert;	state Exp;
branches;
next	1.1.1.6;

1.1.1.6
date	2005.01.15.21.18.18;	author millert;	state Exp;
branches;
next	1.1.1.7;

1.1.1.7
date	2008.09.29.17.19.00;	author millert;	state Exp;
branches;
next	1.1.1.8;

1.1.1.8
date	2010.09.24.14.49.18;	author millert;	state Exp;
branches;
next	;


desc
@@


1.10
log
@Fix merge issues, remove excess files - match perl-5.24.1 dist
@
text
@#!./perl

BEGIN {
    chdir 't' if -d 't';
    require "./test.pl";
}

plan(14);

@@a = (1,2,3,4,5,6,7,8,9,10,11,12);
@@b = ();
while ($_ = shift(@@a)) {
    if ($x = /4/../8/) { $z = $x; push @@b, $x + 0; }
    $y .= /1/../2/;
}
is(join("*", @@b), "1*2*3*4*5");

is($z, '5E0');

is($y, '12E0123E0');

@@a = ('a','b','c','d','e','f','g');

{
local $.;

open(of,'harness') or die "Can't open harness: $!";
while (<of>) {
    (3 .. 5) && ($foo .= $_);
}
$x = ($foo =~ y/\n/\n/);

is($x, 3);

$x = 3.14;
ok(($x...$x) eq "1");

{
    # coredump reported in bug 20001018.008
    readline(UNKNOWN);
    $. = 1;
    $x = 1..10;
    ok(1);
}

}

ok(!defined $.);

use warnings;
my $warn='';
$SIG{__WARN__} = sub { $warn .= join '', @@_ };

ok(scalar(0..2));

like($warn, qr/uninitialized/);
$warn = '';

$x = "foo".."bar";

ok((() = ($warn =~ /isn't numeric/g)) == 2);
$warn = '';

$. = 15;
ok(scalar(15..0));

push @@_, \scalar(0..0) for 1,2;
isnt $_[0], $_[1], '\scalar($a..$b) gives a different scalar each time';

# This evil little example from ticket #122829 abused the fact that each
# recursion level maintained its own flip-flip state.  The following com-
# ment describes how it *used* to work.

# This routine maintains multiple flip-flop states, each with its own
# numeric ID, starting from 1.  Pass the ID as the argument.
sub f {
    my $depth = shift() - 1;
    return f($depth) if $depth;
    return /3/../5/;
}
{
    my $accumulator;
    for(1..20) {
        if (f(1)) {
            my $outer = $_;
            for(1..10){
                $accumulator .= "$outer $_\n" if f(2);
            }
        }
    }
    is $accumulator, <<EOT, 'recursion shares state';
3 1
3 2
3 3
3 4
3 5
13 1
13 2
13 3
13 4
13 5
EOT
}

# Void context gives parenthesized lhs scalar context
no warnings 'void';
sub c { $context = qw[ void scalar list ][wantarray + defined wantarray] }
(c())x34;
is $context, 'scalar', '(...)x... in void context';
@


1.9
log
@merge in perl 5.12.2 plus local changes
@
text
@d4 2
a5 1
    require "test.pl";
d8 1
a8 1
plan(11);
d66 44
@


1.8
log
@fix conflicts and merge in local changes to perl 5.10.0
@
text
@d3 3
a5 1
chdir 't' if -d 't';
d7 1
a7 1
print "1..15\n";
d10 1
a10 1

d12 1
a12 1
    if ($x = /4/../8/) { $z = $x; print "ok ", $x + 0, "\n"; }
d15 1
d17 1
a17 1
if ($z eq '5E0') {print "ok 6\n";} else {print "not ok 6\n";}
d19 1
a19 1
if ($y eq '12E0123E0') {print "ok 7\n";} else {print "not ok 7\n";}
d32 1
a32 1
if ($x eq 3) {print "ok 8\n";} else {print "not ok 8 $x:$foo:\n";}
d35 1
a35 1
if (($x...$x) eq "1") {print "ok 9\n";} else {print "not ok 9\n";}
d42 1
a42 1
    print "ok 10\n";
d47 1
a47 1
if (!defined $.) { print "ok 11\n" } else { print "not ok 11 # $.\n" }
d53 1
a53 1
if (0..2) { print "ok 12\n" } else { print "not ok 12\n" }
d55 1
a55 1
if ($warn =~ /uninitialized/) { print "ok 13\n" } else { print "not ok 13\n" }
d60 1
a60 6
if ((() = ($warn =~ /isn't numeric/g)) == 2) {
    print "ok 14\n"
}
else {
    print "not ok 14\n"
}
d64 1
a64 1
if (15..0) { print "ok 15\n" } else { print "not ok 15\n" }
@


1.7
log
@Resolve conflicts for perl 5.8.2, remove old files, and add OpenBSD-specific scaffolding
@
text
@a2 2
# $RCSfile: flip.t,v $$Revision: 4.1 $$Date: 92/08/07 18:27:52 $

@


1.6
log
@Resolve conflicts, remove old files, merge local changes
@
text
@@


1.5
log
@merge in perl 5.6.1 with our local changes
@
text
@d5 3
a7 1
print "1..10\n";
d22 3
d40 24
a63 1
    print "ok 10\n" unless 1 .. 10;
d65 4
@


1.4
log
@perl-5.6.0 + local changes
@
text
@d5 1
a5 1
print "1..9\n";
d20 1
a20 1
open(of,'../Configure');
d30 7
@


1.3
log
@perl5.005_03 (stock)
@
text
@@


1.2
log
@perl 5.004_04
@
text
@d9 1
a9 1
while ($_ = shift(a)) {
@


1.1
log
@Initial revision
@
text
@d5 1
a5 1
print "1..8\n";
d27 3
@


1.1.1.1
log
@Import of Perl 5.003 into the tree.  Makefile.bsd-wrapper and
config.sh.OpenBSD are the only local changes.
@
text
@@


1.1.1.2
log
@perl5.005_03
@
text
@d5 1
a5 1
print "1..9\n";
d9 1
a9 1
while ($_ = shift(@@a)) {
a26 3

$x = 3.14;
if (($x...$x) eq "1") {print "ok 9\n";} else {print "not ok 9\n";}
@


1.1.1.3
log
@stock perl 5.6.1
@
text
@d5 1
a5 1
print "1..10\n";
d20 1
a20 1
open(of,'harness') or die "Can't open harness: $!";
a29 7

{
    # coredump reported in bug 20001018.008
    readline(UNKNOWN);
    $. = 1;
    print "ok 10\n" unless 1 .. 10;
}
@


1.1.1.4
log
@stock perl 5.8.0 from CPAN
@
text
@d5 1
a5 3
chdir 't' if -d 't';

print "1..15\n";
a19 3
{
local $.;

d35 1
a35 24
    $x = 1..10;
    print "ok 10\n";
}

}

if (!defined $.) { print "ok 11\n" } else { print "not ok 11 # $.\n" }

use warnings;
my $warn='';
$SIG{__WARN__} = sub { $warn .= join '', @@_ };

if (0..2) { print "ok 12\n" } else { print "not ok 12\n" }

if ($warn =~ /uninitialized/) { print "ok 13\n" } else { print "not ok 13\n" }
$warn = '';

$x = "foo".."bar";

if ((() = ($warn =~ /isn't numeric/g)) == 2) {
    print "ok 14\n"
}
else {
    print "not ok 14\n"
a36 4
$warn = '';

$. = 15;
if (15..0) { print "ok 15\n" } else { print "not ok 15\n" }
@


1.1.1.5
log
@Import of stock perl 5.8.5
@
text
@d3 1
a3 1
# $RCSfile: flip.t,v $$Revision: 1.7 $$Date: 2003/12/03 03:02:48 $
@


1.1.1.6
log
@perl 5.8.6 from CPAN
@
text
@d3 1
a3 1
# $RCSfile: flip.t,v $$Revision: 4.1 $$Date: 92/08/07 18:27:52 $
@


1.1.1.7
log
@import perl 5.10.0 from CPAN
@
text
@d3 2
@


1.1.1.8
log
@Perl 5.12.2 from CPAN
@
text
@d3 1
a3 3
BEGIN {
    require "test.pl";
}
d5 1
a5 1
plan(11);
d8 1
a8 1
@@b = ();
d10 1
a10 1
    if ($x = /4/../8/) { $z = $x; push @@b, $x + 0; }
a12 1
is(join("*", @@b), "1*2*3*4*5");
d14 1
a14 1
is($z, '5E0');
d16 1
a16 1
is($y, '12E0123E0');
d29 1
a29 1
is($x, 3);
d32 1
a32 1
ok(($x...$x) eq "1");
d39 1
a39 1
    ok(1);
d44 1
a44 1
ok(!defined $.);
d50 1
a50 1
ok(scalar(0..2));
d52 1
a52 1
like($warn, qr/uninitialized/);
d57 6
a62 1
ok((() = ($warn =~ /isn't numeric/g)) == 2);
d66 1
a66 1
ok(scalar(15..0));
@


