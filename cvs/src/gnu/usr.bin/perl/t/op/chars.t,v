head	1.2;
access;
symbols
	PERL_5_24_2:1.1.1.4
	OPENBSD_6_1:1.2.0.4
	OPENBSD_6_1_BASE:1.2
	OPENBSD_6_0:1.1.1.3.0.10
	OPENBSD_6_0_BASE:1.1.1.3
	OPENBSD_5_9:1.1.1.3.0.4
	OPENBSD_5_9_BASE:1.1.1.3
	OPENBSD_5_8:1.1.1.3.0.6
	OPENBSD_5_8_BASE:1.1.1.3
	PERL_5_20_2:1.1.1.3
	OPENBSD_5_7:1.1.1.3.0.2
	OPENBSD_5_7_BASE:1.1.1.3
	PERL_5_20_1:1.1.1.3
	OPENBSD_5_6:1.1.1.2.0.4
	OPENBSD_5_6_BASE:1.1.1.2
	PERL_5_18_2:1.1.1.2
	PERL:1.1.1
	OPENBSD_5_5:1.1.1.1.0.60
	OPENBSD_5_5_BASE:1.1.1.1
	OPENBSD_5_4:1.1.1.1.0.56
	OPENBSD_5_4_BASE:1.1.1.1
	PERL_5_16_3:1.1.1.1
	OPENBSD_5_3:1.1.1.1.0.54
	OPENBSD_5_3_BASE:1.1.1.1
	OPENBSD_5_2:1.1.1.1.0.52
	OPENBSD_5_2_BASE:1.1.1.1
	OPENBSD_5_1_BASE:1.1.1.1
	OPENBSD_5_1:1.1.1.1.0.50
	OPENBSD_5_0:1.1.1.1.0.48
	OPENBSD_5_0_BASE:1.1.1.1
	OPENBSD_4_9:1.1.1.1.0.46
	OPENBSD_4_9_BASE:1.1.1.1
	PERL_5_12_2:1.1.1.1
	OPENBSD_4_8:1.1.1.1.0.44
	OPENBSD_4_8_BASE:1.1.1.1
	OPENBSD_4_7:1.1.1.1.0.40
	OPENBSD_4_7_BASE:1.1.1.1
	PERL_5_10_1:1.1.1.1
	OPENBSD_4_6:1.1.1.1.0.42
	OPENBSD_4_6_BASE:1.1.1.1
	OPENBSD_4_5:1.1.1.1.0.38
	OPENBSD_4_5_BASE:1.1.1.1
	PERL_5_10_0:1.1.1.1
	OPENBSD_4_4:1.1.1.1.0.36
	OPENBSD_4_4_BASE:1.1.1.1
	OPENBSD_4_3:1.1.1.1.0.34
	OPENBSD_4_3_BASE:1.1.1.1
	OPENBSD_4_2:1.1.1.1.0.32
	OPENBSD_4_2_BASE:1.1.1.1
	OPENBSD_4_1:1.1.1.1.0.30
	OPENBSD_4_1_BASE:1.1.1.1
	OPENBSD_4_0:1.1.1.1.0.28
	OPENBSD_4_0_BASE:1.1.1.1
	PERL_5_8_8:1.1.1.1
	OPENBSD_3_9:1.1.1.1.0.26
	OPENBSD_3_9_BASE:1.1.1.1
	OPENBSD_3_8:1.1.1.1.0.24
	OPENBSD_3_8_BASE:1.1.1.1
	OPENBSD_3_7:1.1.1.1.0.22
	OPENBSD_3_7_BASE:1.1.1.1
	PERL_5_8_6:1.1.1.1
	OPENBSD_3_6:1.1.1.1.0.20
	OPENBSD_3_6_BASE:1.1.1.1
	PERL_5_8_5:1.1.1.1
	PERL_5_8_3:1.1.1.1
	OPENBSD_3_5:1.1.1.1.0.18
	OPENBSD_3_5_BASE:1.1.1.1
	PERL_5_8_2:1.1.1.1
	OPENBSD_3_4:1.1.1.1.0.16
	OPENBSD_3_4_BASE:1.1.1.1
	OPENBSD_3_3:1.1.1.1.0.14
	OPENBSD_3_3_BASE:1.1.1.1
	PERL_5_8_0:1.1.1.1
	OPENBSD_3_2:1.1.1.1.0.12
	OPENBSD_3_2_BASE:1.1.1.1
	OPENBSD_3_1:1.1.1.1.0.10
	OPENBSD_3_1_BASE:1.1.1.1
	OPENBSD_3_0:1.1.1.1.0.8
	OPENBSD_3_0_BASE:1.1.1.1
	PERL_5_6_1:1.1.1.1
	OPENBSD_2_9:1.1.1.1.0.6
	OPENBSD_2_9_BASE:1.1.1.1
	OPENBSD_2_8:1.1.1.1.0.4
	OPENBSD_2_8_BASE:1.1.1.1
	OPENBSD_2_7:1.1.1.1.0.2
	OPENBSD_2_7_BASE:1.1.1.1
	PERL_5_6_0:1.1.1.1
	CPAN:1.1.1;
locks; strict;
comment	@# @;
expand	@o@;


1.2
date	2017.02.05.00.32.20;	author afresh1;	state Exp;
branches;
next	1.1;
commitid	cxJ08BvJA9Pt2PTM;

1.1
date	2000.04.06.16.10.47;	author millert;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	2000.04.06.16.10.47;	author millert;	state Exp;
branches;
next	1.1.1.2;

1.1.1.2
date	2014.03.24.14.59.10;	author afresh1;	state Exp;
branches;
next	1.1.1.3;

1.1.1.3
date	2014.11.17.20.53.17;	author afresh1;	state Exp;
branches;
next	1.1.1.4;
commitid	B31cAbBIXiCqnL97;

1.1.1.4
date	2017.08.14.13.46.23;	author afresh1;	state Exp;
branches;
next	;
commitid	fAzrs78vdW2Yfc6A;


desc
@@


1.2
log
@Fix merge issues, remove excess files - match perl-5.24.1 dist
@
text
@#!./perl

BEGIN {
    chdir 't' if -d 't';
    @@INC = '../lib';
    require './test.pl';
}

plan tests => 34;

# because of ebcdic.c these should be the same on asciiish 
# and ebcdic machines.
# Peter Prymmer <pvhp@@best.com>.

my $c = "\c@@";
is (ord($c), 0, '\c@@');
$c = "\cA";
is (ord($c), 1, '\cA');
$c = "\cB";
is (ord($c), 2, '\cB');
$c = "\cC";
is (ord($c), 3, '\cC');
$c = "\cD";
is (ord($c), 4, '\cD');
$c = "\cE";
is (ord($c), 5, '\cE');
$c = "\cF";
is (ord($c), 6, '\cF');
$c = "\cG";
is (ord($c), 7, '\cG');
$c = "\cH";
is (ord($c), 8, '\cH');
$c = "\cI";
is (ord($c), 9, '\cI');
$c = "\cJ";
is (ord($c), 10, '\cJ');
$c = "\cK";
is (ord($c), 11, '\cK');
$c = "\cL";
is (ord($c), 12, '\cL');
$c = "\cM";
is (ord($c), 13, '\cM');
$c = "\cN";
is (ord($c), 14, '\cN');
$c = "\cO";
is (ord($c), 15, '\cO');
$c = "\cP";
is (ord($c), 16, '\cP');
$c = "\cQ";
is (ord($c), 17, '\cQ');
$c = "\cR";
is (ord($c), 18, '\cR');
$c = "\cS";
is (ord($c), 19, '\cS');
$c = "\cT";
is (ord($c), 20, '\cT');
$c = "\cU";
is (ord($c), 21, '\cU');
$c = "\cV";
is (ord($c), 22, '\cV');
$c = "\cW";
is (ord($c), 23, '\cW');
$c = "\cX";
is (ord($c), 24, '\cX');
$c = "\cY";
is (ord($c), 25, '\cY');
$c = "\cZ";
is (ord($c), 26, '\cZ');
$c = "\c[";
is (ord($c), 27, '\c[');
$c = "\c\\";
is (ord($c), 28, '\c\\');
$c = "\c]";
is (ord($c), 29, '\c]');
$c = "\c^";
is (ord($c), 30, '\c^');
$c = "\c_";
is (ord($c), 31, '\c_');

# '\c?' is an outlier, and is treated differently on each platform.
# It's DEL on ASCII, and APC on EBCDIC
$c = "\c?";
is (ord($c), ($::IS_ASCII)
             ? 127
             : utf8::unicode_to_native(0x9F),
              '\c?');
$c = '';
is (ord($c), 0, 'ord("") is 0');
@


1.1
log
@Initial revision
@
text
@d3 7
a9 1
print "1..33\n";
d16 1
a16 1
print +((ord($c) == 0) ? "" : "not "),"ok 1\n";
d18 1
a18 1
print +((ord($c) == 1) ? "" : "not "),"ok 2\n";
d20 1
a20 1
print +((ord($c) == 2) ? "" : "not "),"ok 3\n";
d22 1
a22 1
print +((ord($c) == 3) ? "" : "not "),"ok 4\n";
d24 1
a24 1
print +((ord($c) == 4) ? "" : "not "),"ok 5\n";
d26 1
a26 1
print +((ord($c) == 5) ? "" : "not "),"ok 6\n";
d28 1
a28 1
print +((ord($c) == 6) ? "" : "not "),"ok 7\n";
d30 1
a30 1
print +((ord($c) == 7) ? "" : "not "),"ok 8\n";
d32 1
a32 1
print +((ord($c) == 8) ? "" : "not "),"ok 9\n";
d34 1
a34 1
print +((ord($c) == 9) ? "" : "not "),"ok 10\n";
d36 1
a36 1
print +((ord($c) == 10) ? "" : "not "),"ok 11\n";
d38 1
a38 1
print +((ord($c) == 11) ? "" : "not "),"ok 12\n";
d40 1
a40 1
print +((ord($c) == 12) ? "" : "not "),"ok 13\n";
d42 1
a42 1
print +((ord($c) == 13) ? "" : "not "),"ok 14\n";
d44 1
a44 1
print +((ord($c) == 14) ? "" : "not "),"ok 15\n";
d46 1
a46 1
print +((ord($c) == 15) ? "" : "not "),"ok 16\n";
d48 1
a48 1
print +((ord($c) == 16) ? "" : "not "),"ok 17\n";
d50 1
a50 1
print +((ord($c) == 17) ? "" : "not "),"ok 18\n";
d52 1
a52 1
print +((ord($c) == 18) ? "" : "not "),"ok 19\n";
d54 1
a54 1
print +((ord($c) == 19) ? "" : "not "),"ok 20\n";
d56 1
a56 1
print +((ord($c) == 20) ? "" : "not "),"ok 21\n";
d58 1
a58 1
print +((ord($c) == 21) ? "" : "not "),"ok 22\n";
d60 1
a60 1
print +((ord($c) == 22) ? "" : "not "),"ok 23\n";
d62 1
a62 1
print +((ord($c) == 23) ? "" : "not "),"ok 24\n";
d64 1
a64 1
print +((ord($c) == 24) ? "" : "not "),"ok 25\n";
d66 1
a66 1
print +((ord($c) == 25) ? "" : "not "),"ok 26\n";
d68 1
a68 1
print +((ord($c) == 26) ? "" : "not "),"ok 27\n";
d70 1
a70 1
print +((ord($c) == 27) ? "" : "not "),"ok 28\n";
d72 1
a72 1
print +((ord($c) == 28) ? "" : "not "),"ok 29\n";
d74 1
a74 1
print +((ord($c) == 29) ? "" : "not "),"ok 30\n";
d76 1
a76 1
print +((ord($c) == 30) ? "" : "not "),"ok 31\n";
d78 4
a81 1
print +((ord($c) == 31) ? "" : "not "),"ok 32\n";
d83 6
a88 1
print +((ord($c) == 127) ? "" : "not "),"ok 33\n";
@


1.1.1.1
log
@virgin perl 5.6.0
@
text
@@


1.1.1.2
log
@Import perl-5.18.2

OK espie@@ sthen@@ deraadt@@
@
text
@d3 1
a3 7
BEGIN {
    chdir 't' if -d 't';
    @@INC = '../lib';
    require './test.pl';
}

plan tests => 34;
d10 1
a10 1
is (ord($c), 0, '\c@@');
d12 1
a12 1
is (ord($c), 1, '\cA');
d14 1
a14 1
is (ord($c), 2, '\cB');
d16 1
a16 1
is (ord($c), 3, '\cC');
d18 1
a18 1
is (ord($c), 4, '\cD');
d20 1
a20 1
is (ord($c), 5, '\cE');
d22 1
a22 1
is (ord($c), 6, '\cF');
d24 1
a24 1
is (ord($c), 7, '\cG');
d26 1
a26 1
is (ord($c), 8, '\cH');
d28 1
a28 1
is (ord($c), 9, '\cI');
d30 1
a30 1
is (ord($c), 10, '\cJ');
d32 1
a32 1
is (ord($c), 11, '\cK');
d34 1
a34 1
is (ord($c), 12, '\cL');
d36 1
a36 1
is (ord($c), 13, '\cM');
d38 1
a38 1
is (ord($c), 14, '\cN');
d40 1
a40 1
is (ord($c), 15, '\cO');
d42 1
a42 1
is (ord($c), 16, '\cP');
d44 1
a44 1
is (ord($c), 17, '\cQ');
d46 1
a46 1
is (ord($c), 18, '\cR');
d48 1
a48 1
is (ord($c), 19, '\cS');
d50 1
a50 1
is (ord($c), 20, '\cT');
d52 1
a52 1
is (ord($c), 21, '\cU');
d54 1
a54 1
is (ord($c), 22, '\cV');
d56 1
a56 1
is (ord($c), 23, '\cW');
d58 1
a58 1
is (ord($c), 24, '\cX');
d60 1
a60 1
is (ord($c), 25, '\cY');
d62 1
a62 1
is (ord($c), 26, '\cZ');
d64 1
a64 1
is (ord($c), 27, '\c[');
d66 1
a66 1
is (ord($c), 28, '\c\\');
d68 1
a68 1
is (ord($c), 29, '\c]');
d70 1
a70 1
is (ord($c), 30, '\c^');
d72 1
a72 1
is (ord($c), 31, '\c_');
d74 1
a74 3
is (ord($c), 127, '\c?');
$c = '';
is (ord($c), 0, 'ord("") is 0');
@


1.1.1.3
log
@Import perl-5.20.1
@
text
@d80 1
a80 9

# '\c?' is an outlier, and is treated differently on each platform.
# It's DEL on ASCII, and APC on EBCDIC
is (ord($c), ((ord('^') == 95 || ord('^') == 175) # 1047 or 0037
               ? 255
               : ord('^') == 106    # Posix-BC
                 ? 95
                 : 127),
              '\c?');
@


1.1.1.4
log
@Import perl-5.24.2
@
text
@d79 1
d83 5
a87 4
$c = "\c?";
is (ord($c), ($::IS_ASCII)
             ? 127
             : utf8::unicode_to_native(0x9F),
@


