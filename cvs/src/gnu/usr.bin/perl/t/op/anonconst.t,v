head	1.1;
access;
symbols
	OPENBSD_6_2:1.1.0.6
	OPENBSD_6_2_BASE:1.1
	PERL_5_24_2:1.1.1.1
	PERL:1.1.1
	OPENBSD_6_1:1.1.0.4
	OPENBSD_6_1_BASE:1.1;
locks; strict;
comment	@# @;
expand	@o@;


1.1
date	2017.02.05.00.32.20;	author afresh1;	state Exp;
branches
	1.1.1.1;
next	;
commitid	cxJ08BvJA9Pt2PTM;

1.1.1.1
date	2017.08.14.13.46.23;	author afresh1;	state Exp;
branches;
next	;
commitid	fAzrs78vdW2Yfc6A;


desc
@@


1.1
log
@Fix merge issues, remove excess files - match perl-5.24.1 dist
@
text
@#!./perl

BEGIN {
    chdir 't';
    require './test.pl';
    @@INC = "../lib";
}

plan 8;

{
    my $w;
    local $SIG{__WARN__} = sub { $w .= shift };
    eval '+sub : const {}';
    like $w, qr/^:const is experimental at /, 'experimental warning';
}

no warnings 'experimental::const_attr';

push @@subs, sub :const{$_} for 1..10;
is join(" ", map &$_, @@subs), "1 2 3 4 5 6 7 8 9 10",
  ':const capturing global $_';

my $x = 3;
my $sub = sub : const { $x };
$x++;
is &$sub, 3, ':const capturing lexical';

$x = 3;
$sub = sub : const { $x+5 };
$x++;
is &$sub, 8, ':const capturing expression';

is &{sub () : const { 42 }}, 42, ':const with truly constant sub';

*foo = $sub;
{
    use warnings 'redefine';
    my $w;
    local $SIG{__WARN__} = sub { $w .= shift };
    *foo = sub (){};
    like $w, qr/^Constant subroutine main::foo redefined at /,
        ':const subs are constant';
}

eval 'sub bar : const';
like $@@, qr/^:const is not permitted on named subroutines at /,
    ':const on named stub';
eval 'sub baz : const { }';
like $@@, qr/^:const is not permitted on named subroutines at /,
    ':const on named sub';
@


1.1.1.1
log
@Import perl-5.24.2
@
text
@@

