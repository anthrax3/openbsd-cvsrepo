head	1.2;
access;
symbols
	OPENBSD_6_0:1.1.1.6.0.12
	OPENBSD_6_0_BASE:1.1.1.6
	OPENBSD_5_9:1.1.1.6.0.6
	OPENBSD_5_9_BASE:1.1.1.6
	OPENBSD_5_8:1.1.1.6.0.8
	OPENBSD_5_8_BASE:1.1.1.6
	PERL_5_20_2:1.1.1.6
	OPENBSD_5_7:1.1.1.6.0.2
	OPENBSD_5_7_BASE:1.1.1.6
	PERL_5_20_1:1.1.1.6
	OPENBSD_5_6:1.1.1.6.0.4
	OPENBSD_5_6_BASE:1.1.1.6
	PERL_5_18_2:1.1.1.6
	PERL:1.1.1
	OPENBSD_5_5:1.1.1.5.0.24
	OPENBSD_5_5_BASE:1.1.1.5
	OPENBSD_5_4:1.1.1.5.0.20
	OPENBSD_5_4_BASE:1.1.1.5
	PERL_5_16_3:1.1.1.5
	OPENBSD_5_3:1.1.1.5.0.18
	OPENBSD_5_3_BASE:1.1.1.5
	OPENBSD_5_2:1.1.1.5.0.16
	OPENBSD_5_2_BASE:1.1.1.5
	OPENBSD_5_1_BASE:1.1.1.5
	OPENBSD_5_1:1.1.1.5.0.14
	OPENBSD_5_0:1.1.1.5.0.12
	OPENBSD_5_0_BASE:1.1.1.5
	OPENBSD_4_9:1.1.1.5.0.10
	OPENBSD_4_9_BASE:1.1.1.5
	PERL_5_12_2:1.1.1.5
	OPENBSD_4_8:1.1.1.5.0.8
	OPENBSD_4_8_BASE:1.1.1.5
	OPENBSD_4_7:1.1.1.5.0.4
	OPENBSD_4_7_BASE:1.1.1.5
	PERL_5_10_1:1.1.1.5
	OPENBSD_4_6:1.1.1.5.0.6
	OPENBSD_4_6_BASE:1.1.1.5
	OPENBSD_4_5:1.1.1.5.0.2
	OPENBSD_4_5_BASE:1.1.1.5
	PERL_5_10_0:1.1.1.5
	OPENBSD_4_4:1.1.1.4.0.18
	OPENBSD_4_4_BASE:1.1.1.4
	OPENBSD_4_3:1.1.1.4.0.16
	OPENBSD_4_3_BASE:1.1.1.4
	OPENBSD_4_2:1.1.1.4.0.14
	OPENBSD_4_2_BASE:1.1.1.4
	OPENBSD_4_1:1.1.1.4.0.12
	OPENBSD_4_1_BASE:1.1.1.4
	OPENBSD_4_0:1.1.1.4.0.10
	OPENBSD_4_0_BASE:1.1.1.4
	PERL_5_8_8:1.1.1.4
	OPENBSD_3_9:1.1.1.4.0.8
	OPENBSD_3_9_BASE:1.1.1.4
	OPENBSD_3_8:1.1.1.4.0.6
	OPENBSD_3_8_BASE:1.1.1.4
	OPENBSD_3_7:1.1.1.4.0.4
	OPENBSD_3_7_BASE:1.1.1.4
	PERL_5_8_6:1.1.1.4
	OPENBSD_3_6:1.1.1.4.0.2
	OPENBSD_3_6_BASE:1.1.1.4
	PERL_5_8_5:1.1.1.4
	PERL_5_8_3:1.1.1.3
	OPENBSD_3_5:1.1.1.3.0.2
	OPENBSD_3_5_BASE:1.1.1.3
	PERL_5_8_2:1.1.1.3
	OPENBSD_3_4:1.1.1.2.0.10
	OPENBSD_3_4_BASE:1.1.1.2
	OPENBSD_3_3:1.1.1.2.0.8
	OPENBSD_3_3_BASE:1.1.1.2
	PERL_5_8_0:1.1.1.2
	OPENBSD_3_2:1.1.1.2.0.6
	OPENBSD_3_2_BASE:1.1.1.2
	OPENBSD_3_1:1.1.1.2.0.4
	OPENBSD_3_1_BASE:1.1.1.2
	OPENBSD_3_0:1.1.1.2.0.2
	OPENBSD_3_0_BASE:1.1.1.2
	PERL_5_6_1:1.1.1.2
	OPENBSD_2_9:1.1.1.1.0.6
	OPENBSD_2_9_BASE:1.1.1.1
	OPENBSD_2_8:1.1.1.1.0.4
	OPENBSD_2_8_BASE:1.1.1.1
	OPENBSD_2_7:1.1.1.1.0.2
	OPENBSD_2_7_BASE:1.1.1.1
	PERL_5_6_0:1.1.1.1
	CPAN:1.1.1;
locks; strict;
comment	@# @;
expand	@o@;


1.2
date	2017.02.05.00.32.20;	author afresh1;	state Exp;
branches;
next	1.1;
commitid	cxJ08BvJA9Pt2PTM;

1.1
date	2000.04.06.16.10.47;	author millert;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	2000.04.06.16.10.47;	author millert;	state Exp;
branches;
next	1.1.1.2;

1.1.1.2
date	2001.05.24.18.25.32;	author millert;	state Exp;
branches;
next	1.1.1.3;

1.1.1.3
date	2003.12.03.02.44.31;	author millert;	state Exp;
branches;
next	1.1.1.4;

1.1.1.4
date	2004.08.09.17.48.34;	author millert;	state Exp;
branches;
next	1.1.1.5;

1.1.1.5
date	2008.09.29.17.19.00;	author millert;	state Exp;
branches;
next	1.1.1.6;

1.1.1.6
date	2014.03.24.14.59.10;	author afresh1;	state Exp;
branches;
next	;


desc
@@


1.2
log
@Fix merge issues, remove excess files - match perl-5.24.1 dist
@
text
@#!./perl

BEGIN {
    chdir 't' if -d 't';
    @@INC = '../lib';
}

require './test.pl';
plan( tests => 23 );

# test various operations on @@_

sub new1 { bless \@@_ }
{
    my $x = new1("x");
    my $y = new1("y");
    is("@@$y","y", 'bless');
    is("@@$x","x", 'bless');
}

sub new2 { splice @@_, 0, 0, "a", "b", "c"; return \@@_ }
{
    my $x = new2("x");
    my $y = new2("y");
    is("@@$x","a b c x", 'splice');
    is("@@$y","a b c y", 'splice');
}

sub new3 { goto &new1 }
{
    my $x = new3("x");
    my $y = new3("y");
    is("@@$y","y", 'goto: single element');
    is("@@$x","x", 'goto: single element');
}

sub new4 { goto &new2 }
{
    my $x = new4("x");
    my $y = new4("y");
    is("@@$x","a b c x", 'goto: multiple elements');
    is("@@$y","a b c y", 'goto: multiple elements');
}

# see if cx_popsub() gets to see the right pad across a dounwind() with
# a reified @@_

sub methimpl {
    my $refarg = \@@_;
    die( "got: @@_\n" );
}

sub method {
    &methimpl;
}

my $failcount = 0;
sub try {
    eval { method('foo', 'bar'); };
    print "# $@@" if $@@;
    $failcount++;
}

for (1..5) { try() }
is($failcount, 5,
    'cx_popsub sees right pad across a dounwind() with reified @@_');

# bug #21542 local $_[0] causes reify problems and coredumps

sub local1 { local $_[0] }
my $foo = 'foo'; local1($foo); local1($foo);
is($foo, 'foo',
    "got 'foo' as expected rather than '\$foo': RT \#21542");

sub local2 { local $_[0]; last L }
L: { local2 }
pass("last to label");

# the following test for local(@@_) used to be in t/op/nothr5005.t (because it
# failed with 5005threads)

$|=1;

sub foo { local(@@_) = ('p', 'q', 'r'); }
sub bar { unshift @@_, 'D'; @@_ }
sub baz { push @@_, 'E'; return @@_ }
for (1..3) { 
    is(join('',foo('a', 'b', 'c')),'pqr', 'local @@_');
    is(join('',bar('d')),'Dd', 'unshift @@_');
    is(join('',baz('e')),'eE', 'push @@_');
} 

# [perl #28032] delete $_[0] was freeing things too early

{
    my $flag = 0;
    sub X::DESTROY { $flag = 1 }
    sub f {
	delete $_[0];
	ok(!$flag, 'delete $_[0] : in f');
    }
    {
	my $x = bless [], 'X';
	f($x);
	ok(!$flag, 'delete $_[0] : after f');
    }
    ok($flag, 'delete $_[0] : outside block');
}

	
@


1.1
log
@Initial revision
@
text
@d3 7
a9 1
print "1..8\n";
a12 1
my $ord = 0;
d17 2
a18 6
    ++$ord;
    print "# got [@@$y], expected [y]\nnot " unless "@@$y" eq "y";
    print "ok $ord\n";
    ++$ord;
    print "# got [@@$x], expected [x]\nnot " unless "@@$x" eq "x";
    print "ok $ord\n";
d25 2
a26 6
    ++$ord;
    print "# got [@@$x], expected [a b c x]\nnot " unless "@@$x" eq "a b c x";
    print "ok $ord\n";
    ++$ord;
    print "# got [@@$y], expected [a b c y]\nnot " unless "@@$y" eq "a b c y";
    print "ok $ord\n";
d33 2
a34 6
    ++$ord;
    print "# got [@@$y], expected [y]\nnot " unless "@@$y" eq "y";
    print "ok $ord\n";
    ++$ord;
    print "# got [@@$x], expected [x]\nnot " unless "@@$x" eq "x";
    print "ok $ord\n";
d41 10
a50 6
    ++$ord;
    print "# got [@@$x], expected [a b c x]\nnot " unless "@@$x" eq "a b c x";
    print "ok $ord\n";
    ++$ord;
    print "# got [@@$y], expected [a b c y]\nnot " unless "@@$y" eq "a b c y";
    print "ok $ord\n";
d52 59
@


1.1.1.1
log
@virgin perl 5.6.0
@
text
@@


1.1.1.2
log
@stock perl 5.6.1
@
text
@d3 1
a3 1
print "1..9\n";
a54 21

# see if POPSUB gets to see the right pad across a dounwind() with
# a reified @@_

sub methimpl {
    my $refarg = \@@_;
    die( "got: @@_\n" );
}

sub method {
    &methimpl;
}

sub try {
    eval { method('foo', 'bar'); };
    print "# $@@" if $@@;
}

for (1..5) { try() }
++$ord;
print "ok $ord\n";
@


1.1.1.3
log
@perl 5.8.2 from CPAN
@
text
@a75 17

# These tests disabled because the change #19064 was retracted.
# http://www.xray.mpe.mpg.de/mailing-lists/perl5-porters/2003-08/msg01485.html
if (0) {
# bug #21542 local $_[0] causes reify problems and coredumps

sub local1 { local $_[0] }
my $foo = 'foo'; local1($foo); local1($foo);
print "got [$foo], expected [foo]\nnot " if $foo ne 'foo';
$ord++;
print "ok $ord\n";

sub local2 { local $_[0]; last L }
L: { local2 }
$ord++;
print "ok $ord\n";
}
@


1.1.1.4
log
@Import of stock perl 5.8.5
@
text
@d3 1
a3 7
BEGIN {
    chdir 't' if -d 't';
    @@INC = '../lib';
}

require './test.pl';
plan( tests => 14 );
d7 1
d12 6
a17 2
    is("@@$y","y");
    is("@@$x","x");
d24 6
a29 2
    is("@@$x","a b c x");
    is("@@$y","a b c y");
d36 6
a41 2
    is("@@$y","y");
    is("@@$x","x");
d48 6
a53 2
    is("@@$x","a b c x");
    is("@@$y","a b c y");
d74 2
a75 1
pass();
d77 3
d85 2
a86 1
pass();
d90 2
a91 19
pass();

# blead has 9 tests for local(@@_) from in t/op/nothr5005.t inserted here

# [perl #28032] delete $_[0] was freeing things too early

{
    my $flag = 0;
    sub X::DESTROY { $flag = 1 }
    sub f {
	delete $_[0];
	ok(!$flag, 'delete $_[0] : in f');
    }
    {
	my $x = bless [], 'X';
	f($x);
	ok(!$flag, 'delete $_[0] : after f');
    }
    ok($flag, 'delete $_[0] : outside block');
a92 2

	
@


1.1.1.5
log
@import perl 5.10.0 from CPAN
@
text
@d9 1
a9 1
plan( tests => 23 );
d76 1
a76 13
# the following test for local(@@_) used to be in t/op/nothr5005.t (because it
# failed with 5005threads)

$|=1;

sub foo { local(@@_) = ('p', 'q', 'r'); }
sub bar { unshift @@_, 'D'; @@_ }
sub baz { push @@_, 'E'; return @@_ }
for (1..3) { 
    is(join('',foo('a', 'b', 'c')),'pqr');
    is(join('',bar('d')),'Dd');
    is(join('',baz('e')),'eE');
} 
@


1.1.1.6
log
@Import perl-5.18.2

OK espie@@ sthen@@ deraadt@@
@
text
@d17 2
a18 2
    is("@@$y","y", 'bless');
    is("@@$x","x", 'bless');
d25 2
a26 2
    is("@@$x","a b c x", 'splice');
    is("@@$y","a b c y", 'splice');
d33 2
a34 2
    is("@@$y","y", 'goto: single element');
    is("@@$x","x", 'goto: single element');
d41 2
a42 2
    is("@@$x","a b c x", 'goto: multiple elements');
    is("@@$y","a b c y", 'goto: multiple elements');
a56 1
my $failcount = 0;
a59 1
    $failcount++;
d63 1
a63 2
is($failcount, 5,
    'POPSUB sees right pad across a dounwind() with reified @@_');
d69 2
a70 2
is($foo, 'foo',
    "got 'foo' as expected rather than '\$foo': RT \#21542");
d74 1
a74 1
pass("last to label");
d85 3
a87 3
    is(join('',foo('a', 'b', 'c')),'pqr', 'local @@_');
    is(join('',bar('d')),'Dd', 'unshift @@_');
    is(join('',baz('e')),'eE', 'push @@_');
@


