head	1.15;
access;
symbols
	OPENBSD_6_1_BASE:1.15
	OPENBSD_6_0:1.14.0.10
	OPENBSD_6_0_BASE:1.14
	OPENBSD_5_9:1.14.0.4
	OPENBSD_5_9_BASE:1.14
	OPENBSD_5_8:1.14.0.6
	OPENBSD_5_8_BASE:1.14
	PERL_5_20_2:1.1.1.12
	OPENBSD_5_7:1.14.0.2
	OPENBSD_5_7_BASE:1.14
	PERL_5_20_1:1.1.1.12
	OPENBSD_5_6:1.13.0.4
	OPENBSD_5_6_BASE:1.13
	PERL_5_18_2:1.1.1.11
	PERL:1.1.1
	OPENBSD_5_5:1.12.0.6
	OPENBSD_5_5_BASE:1.12
	OPENBSD_5_4:1.12.0.2
	OPENBSD_5_4_BASE:1.12
	PERL_5_16_3:1.1.1.10
	OPENBSD_5_3:1.11.0.10
	OPENBSD_5_3_BASE:1.11
	OPENBSD_5_2:1.11.0.8
	OPENBSD_5_2_BASE:1.11
	OPENBSD_5_1_BASE:1.11
	OPENBSD_5_1:1.11.0.6
	OPENBSD_5_0:1.11.0.4
	OPENBSD_5_0_BASE:1.11
	OPENBSD_4_9:1.11.0.2
	OPENBSD_4_9_BASE:1.11
	PERL_5_12_2:1.1.1.9
	OPENBSD_4_8:1.10.0.4
	OPENBSD_4_8_BASE:1.10
	OPENBSD_4_7:1.10.0.2
	OPENBSD_4_7_BASE:1.10
	PERL_5_10_1:1.1.1.8
	OPENBSD_4_6:1.9.0.6
	OPENBSD_4_6_BASE:1.9
	OPENBSD_4_5:1.9.0.2
	OPENBSD_4_5_BASE:1.9
	PERL_5_10_0:1.1.1.7
	OPENBSD_4_4:1.8.0.10
	OPENBSD_4_4_BASE:1.8
	OPENBSD_4_3:1.8.0.8
	OPENBSD_4_3_BASE:1.8
	OPENBSD_4_2:1.8.0.6
	OPENBSD_4_2_BASE:1.8
	OPENBSD_4_1:1.8.0.4
	OPENBSD_4_1_BASE:1.8
	OPENBSD_4_0:1.8.0.2
	OPENBSD_4_0_BASE:1.8
	PERL_5_8_8:1.1.1.6
	OPENBSD_3_9:1.7.0.10
	OPENBSD_3_9_BASE:1.7
	OPENBSD_3_8:1.7.0.8
	OPENBSD_3_8_BASE:1.7
	OPENBSD_3_7:1.7.0.6
	OPENBSD_3_7_BASE:1.7
	PERL_5_8_6:1.1.1.5
	OPENBSD_3_6:1.7.0.4
	OPENBSD_3_6_BASE:1.7
	PERL_5_8_5:1.1.1.5
	PERL_5_8_3:1.1.1.5
	OPENBSD_3_5:1.7.0.2
	OPENBSD_3_5_BASE:1.7
	PERL_5_8_2:1.1.1.5
	OPENBSD_3_4:1.6.0.4
	OPENBSD_3_4_BASE:1.6
	OPENBSD_3_3:1.6.0.2
	OPENBSD_3_3_BASE:1.6
	PERL_5_8_0:1.1.1.4
	OPENBSD_3_2:1.5.0.6
	OPENBSD_3_2_BASE:1.5
	OPENBSD_3_1:1.5.0.4
	OPENBSD_3_1_BASE:1.5
	OPENBSD_3_0:1.5.0.2
	OPENBSD_3_0_BASE:1.5
	PERL_5_6_1:1.1.1.3
	OPENBSD_2_9:1.4.0.6
	OPENBSD_2_9_BASE:1.4
	OPENBSD_2_8:1.4.0.4
	OPENBSD_2_8_BASE:1.4
	OPENBSD_2_7:1.4.0.2
	OPENBSD_2_7_BASE:1.4
	PERL_5_6_0:1.1.1.2
	OPENBSD_2_6:1.2.0.2
	OPENBSD_2_6_BASE:1.2
	PERL_500503:1.1.1.1
	CPAN:1.1.1
	OPENBSD_2_5:1.1.0.6
	OPENBSD_2_5_BASE:1.1
	OPENBSD_2_4:1.1.0.4
	OPENBSD_2_4_BASE:1.1
	OPENBSD_2_3:1.1.0.2
	OPENBSD_2_3_BASE:1.1;
locks; strict;
comment	@# @;
expand	@o@;


1.15
date	2017.02.05.00.32.20;	author afresh1;	state Exp;
branches;
next	1.14;
commitid	cxJ08BvJA9Pt2PTM;

1.14
date	2014.11.17.20.57.07;	author afresh1;	state Exp;
branches;
next	1.13;
commitid	QP75iYx42Uo7mMxO;

1.13
date	2014.03.24.15.05.33;	author afresh1;	state Exp;
branches;
next	1.12;

1.12
date	2013.03.25.20.41.00;	author sthen;	state Exp;
branches;
next	1.11;

1.11
date	2010.09.24.15.07.09;	author millert;	state Exp;
branches;
next	1.10;

1.10
date	2009.10.12.18.30.28;	author millert;	state Exp;
branches;
next	1.9;

1.9
date	2008.09.29.17.36.20;	author millert;	state Exp;
branches;
next	1.8;

1.8
date	2006.03.28.19.23.13;	author millert;	state Exp;
branches;
next	1.7;

1.7
date	2003.12.03.03.02.49;	author millert;	state Exp;
branches;
next	1.6;

1.6
date	2002.10.27.22.25.37;	author millert;	state Exp;
branches;
next	1.5;

1.5
date	2001.05.24.18.36.24;	author millert;	state Exp;
branches;
next	1.4;

1.4
date	2000.04.30.04.35.52;	author millert;	state Exp;
branches;
next	1.3;

1.3
date	2000.04.06.17.08.34;	author millert;	state Exp;
branches;
next	1.2;

1.2
date	99.04.29.22.52.40;	author millert;	state Exp;
branches;
next	1.1;

1.1
date	97.11.30.08.05.48;	author millert;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	99.04.29.22.41.53;	author millert;	state Exp;
branches;
next	1.1.1.2;

1.1.1.2
date	2000.04.06.16.10.52;	author millert;	state Exp;
branches;
next	1.1.1.3;

1.1.1.3
date	2001.05.24.18.25.49;	author millert;	state Exp;
branches;
next	1.1.1.4;

1.1.1.4
date	2002.10.27.22.15.11;	author millert;	state Exp;
branches;
next	1.1.1.5;

1.1.1.5
date	2003.12.03.02.44.33;	author millert;	state Exp;
branches;
next	1.1.1.6;

1.1.1.6
date	2006.03.28.18.49.47;	author millert;	state Exp;
branches;
next	1.1.1.7;

1.1.1.7
date	2008.09.29.17.19.02;	author millert;	state Exp;
branches;
next	1.1.1.8;

1.1.1.8
date	2009.10.12.18.10.44;	author millert;	state Exp;
branches;
next	1.1.1.9;

1.1.1.9
date	2010.09.24.14.49.17;	author millert;	state Exp;
branches;
next	1.1.1.10;

1.1.1.10
date	2013.03.25.20.09.37;	author sthen;	state Exp;
branches;
next	1.1.1.11;

1.1.1.11
date	2014.03.24.14.59.11;	author afresh1;	state Exp;
branches;
next	1.1.1.12;

1.1.1.12
date	2014.11.17.20.53.18;	author afresh1;	state Exp;
branches;
next	;
commitid	B31cAbBIXiCqnL97;


desc
@perl 5.004_04
@


1.15
log
@Fix merge issues, remove excess files - match perl-5.24.1 dist
@
text
@#!./perl
#
# check UNIVERSAL
#

BEGIN {
    chdir 't' if -d 't';
    require './test.pl';
    set_up_inc(qw '../lib ../dist/base/lib');
    $| = 1;
    require "./test.pl";
}

plan tests => 143;

$a = {};
bless $a, "Bob";
ok $a->isa("Bob");

package Human;
sub eat {}

package Female;
@@ISA=qw(Human);

package Alice;
@@ISA=qw(Bob Female);
sub sing;
sub drink { return "drinking " . $_[1]  }
sub new { bless {} }

$Alice::VERSION = 2.718;

{
    package Cedric;
    our @@ISA;
    use base qw(Human);
}

{
    package Programmer;
    our $VERSION = 1.667;

    sub write_perl { 1 }
}

package main;



$a = new Alice;

ok $a->isa("Alice");
ok $a->isa("main::Alice");    # check that alternate class names work

ok(("main::Alice"->new)->isa("Alice"));

ok $a->isa("Bob");
ok $a->isa("main::Bob");

ok $a->isa("Female");

ok ! $a->isa("Female\0NOT REALLY!"), "->isa is nul-clean.";

ok $a->isa("Human");

ok ! $a->isa("Male");

ok ! $a->isa('Programmer');

ok $a->isa("HASH");

ok $a->can("eat");
ok ! $a->can("eat\0Except not!"), "->can is nul-clean.";
ok ! $a->can("sleep");
ok my $ref = $a->can("drink");        # returns a coderef
is $a->$ref("tea"), "drinking tea"; # ... which works
ok $ref = $a->can("sing");
eval { $a->$ref() };
ok $@@;                                # ... but not if no actual subroutine

ok (!Cedric->isa('Programmer'));

ok (Cedric->isa('Human'));

push(@@Cedric::ISA,'Programmer');

ok (Cedric->isa('Programmer'));

{
    package Alice;
    base::->import('Programmer');
}

ok $a->isa('Programmer');
ok $a->isa("Female");

@@Cedric::ISA = qw(Bob);

ok (!Cedric->isa('Programmer'));

my $b = 'abc';
my @@refs = qw(SCALAR SCALAR     LVALUE      GLOB ARRAY HASH CODE);
my @@vals = (  \$b,   \3.14, \substr($b,1,1), \*b,  [],  {}, sub {} );
for ($p=0; $p < @@refs; $p++) {
    for ($q=0; $q < @@vals; $q++) {
        is UNIVERSAL::isa($vals[$p], $refs[$q]), ($p==$q or $p+$q==1);
    };
};

ok UNIVERSAL::can(23, "can");
++${"23::foo"};
ok UNIVERSAL::can("23", "can"), '"23" can can when the pack exists';
ok UNIVERSAL::can(23, "can"), '23 can can when the pack exists';
sub IO::Handle::turn {}
ok UNIVERSAL::can(*STDOUT, 'turn'), 'globs with IOs can';
ok UNIVERSAL::can(\*STDOUT, 'turn'), 'globrefs with IOs can';
ok UNIVERSAL::can("STDOUT", 'turn'), 'IO barewords can';

ok $a->can("VERSION");

ok $a->can("can");
ok ! $a->can("export_tags");	# a method in Exporter

cmp_ok eval { $a->VERSION }, '==', 2.718;

ok ! (eval { $a->VERSION(2.719) });
like $@@, qr/^Alice version 2.719 required--this is only version 2.718 at /;

ok (eval { $a->VERSION(2.718) });
is $@@, '';

ok ! (eval { $a->VERSION("version") });
like $@@, qr/^Invalid version format/;

$aversion::VERSION = "version";
ok ! (eval { aversion->VERSION(2.719) });
like $@@, qr/^Invalid version format/;

my $subs = join ' ', sort grep { defined &{"UNIVERSAL::$_"} } keys %UNIVERSAL::;
if ('a' lt 'A') {
    is $subs, "can isa DOES VERSION";
} else {
    is $subs, "DOES VERSION can isa";
}

ok $a->isa("UNIVERSAL");

ok ! UNIVERSAL::isa([], "UNIVERSAL");

ok ! UNIVERSAL::can({}, "can");

ok UNIVERSAL::isa(Alice => "UNIVERSAL");

cmp_ok UNIVERSAL::can(Alice => "can"), '==', \&UNIVERSAL::can;

# now use UNIVERSAL.pm and see what changes
eval "use UNIVERSAL";

ok $a->isa("UNIVERSAL");

my $sub2 = join ' ', sort grep { defined &{"UNIVERSAL::$_"} } keys %UNIVERSAL::;
# XXX import being here is really a bug
if ('a' lt 'A') {
    is $sub2, "can import isa DOES VERSION";
} else {
    is $sub2, "DOES VERSION can import isa";
}

eval 'sub UNIVERSAL::sleep {}';
ok $a->can("sleep");

ok UNIVERSAL::can($b, "can");

ok ! $a->can("export_tags");	# a method in Exporter

ok ! UNIVERSAL::isa("\xff\xff\xff\0", 'HASH');

{
    # test isa() and can() on magic variables
    "Human" =~ /(.*)/;
    ok $1->isa("Human");
    ok $1->can("eat");
    package HumanTie;
    sub TIESCALAR { bless {} }
    sub FETCH { "Human" }
    tie my($x), "HumanTie";
    ::ok $x->isa("Human");
    ::ok $x->can("eat");
}

# bugid 3284
# a second call to isa('UNIVERSAL') when @@ISA is null failed due to caching

@@X::ISA=();
my $x = {}; bless $x, 'X';
ok $x->isa('UNIVERSAL');
ok $x->isa('UNIVERSAL');


# Check that the "historical accident" of UNIVERSAL having an import()
# method doesn't effect anyone else.
eval { Some::Package->import("bar") };
is $@@, '';


# This segfaulted in a blead.
fresh_perl_is('package Foo; Foo->VERSION;  print "ok"', 'ok');

# So did this.
fresh_perl_is('$:; UNIVERSAL::isa(":","Unicode::String");print "ok"','ok');

package Foo;

sub DOES { 1 }

package Bar;

@@Bar::ISA = 'Foo';

package Baz;

package main;
ok( Foo->DOES( 'bar' ), 'DOES() should call DOES() on class' );
ok( Bar->DOES( 'Bar' ), '... and should fall back to isa()' );
ok( Bar->DOES( 'Foo' ), '... even when inherited' );
ok( Baz->DOES( 'Baz' ), '... even without inheriting any other DOES()' );
ok( ! Baz->DOES( 'Foo' ), '... returning true or false appropriately' );

ok( ! "T"->DOES( "T\0" ), 'DOES() is nul-clean' );
ok( ! Baz->DOES( "Baz\0Boy howdy" ), 'DOES() is nul-clean' );

package Pig;
package Bodine;
Bodine->isa('Pig');
*isa = \&UNIVERSAL::isa;
eval { isa({}, 'HASH') };
::is($@@, '', "*isa correctly found");

package main;
eval { UNIVERSAL::DOES([], "foo") };
like( $@@, qr/Can't call method "DOES" on unblessed reference/,
    'DOES call error message says DOES, not isa' );

# Tests for can seem to be split between here and method.t
# Add the verbatim perl code mentioned in the comments of
# http://www.xray.mpe.mpg.de/mailing-lists/perl5-porters/2001-05/msg01710.html
# but never actually tested.
is(UNIVERSAL->can("NoSuchPackage::foo"), undef);

@@splatt::ISA = 'zlopp';
ok (splatt->isa('zlopp'));
ok (!splatt->isa('plop'));

# This should reset the ->isa lookup cache
@@splatt::ISA = 'plop';
# And here is the new truth.
ok (!splatt->isa('zlopp'));
ok (splatt->isa('plop'));

use warnings "deprecated";
{
    my $m;
    local $SIG{__WARN__} = sub { $m = $_[0] };
    eval "use UNIVERSAL 'can'";
    like($@@, qr/^UNIVERSAL does not export anything\b/,
	"error for UNIVERSAL->import('can')");
    is($m, undef,
	"no deprecation warning for UNIVERSAL->import('can')");

	  undef $m;
    eval "use UNIVERSAL";
    is($@@, "",
	"no error for UNIVERSAL->import");
    is($m, undef,
	"no deprecation warning for UNIVERSAL->import");
}

# Test: [perl #66112]: change @@ISA inside  sub isa
{
    package RT66112::A;

    package RT66112::B;

    sub isa {
	my $self = shift;
	@@ISA = qw/RT66112::A/;
	return $self->SUPER::isa(@@_);
    }

    package RT66112::C;

    package RT66112::D;

    sub isa {
	my $self = shift;
	@@RT66112::E::ISA = qw/RT66112::A/;
	return $self->SUPER::isa(@@_);
    }

    package RT66112::E;

    package main;

    @@RT66112::B::ISA = qw//;
    @@RT66112::C::ISA = qw/RT66112::B/;
    @@RT66112::T1::ISA = qw/RT66112::C/;
    ok(RT66112::T1->isa('RT66112::C'), "modify \@@ISA in isa (RT66112::T1 isa RT66112::C)");

    @@RT66112::B::ISA = qw//;
    @@RT66112::C::ISA = qw/RT66112::B/;
    @@RT66112::T2::ISA = qw/RT66112::C/;
    ok(RT66112::T2->isa('RT66112::B'), "modify \@@ISA in isa (RT66112::T2 isa RT66112::B)");

    @@RT66112::B::ISA = qw//;
    @@RT66112::C::ISA = qw/RT66112::B/;
    @@RT66112::T3::ISA = qw/RT66112::C/;
    ok(RT66112::T3->isa('RT66112::A'), "modify \@@ISA in isa (RT66112::T3 isa RT66112::A)") or require mro, diag "@@{mro::get_linear_isa('RT66112::T3')}";

    @@RT66112::E::ISA = qw/RT66112::D/;
    @@RT66112::T4::ISA = qw/RT66112::E/;
    ok(RT66112::T4->isa('RT66112::E'), "modify \@@ISA in isa (RT66112::T4 isa RT66112::E)");

    @@RT66112::E::ISA = qw/RT66112::D/;
    @@RT66112::T5::ISA = qw/RT66112::E/;
    ok(! RT66112::T5->isa('RT66112::D'), "modify \@@ISA in isa (RT66112::T5 not isa RT66112::D)");

    @@RT66112::E::ISA = qw/RT66112::D/;
    @@RT66112::T6::ISA = qw/RT66112::E/;
    ok(RT66112::T6->isa('RT66112::A'), "modify \@@ISA in isa (RT66112::T6 isa RT66112::A)");
}

ok(Undeclared->can("can"));
sub Undeclared::foo { }
ok(Undeclared->can("foo"));
ok(!Undeclared->can("something_else"));

ok(Undeclared->isa("UNIVERSAL"));

# keep this at the end to avoid messing up earlier tests, since it modifies
# @@UNIVERSAL::ISA
@@UNIVERSAL::ISA = ('UniversalParent');
{ package UniversalIsaTest1; }
ok(UniversalIsaTest1->isa('UniversalParent'));
ok(UniversalIsaTest2->isa('UniversalParent'));
@


1.14
log
@Fix merge conflicts, remove extra files, match upstream perl-5.20.1

ok deraadt@@ sthen@@ espie@@ miod@@
@
text
@d8 2
a9 1
    @@INC = '../lib';
d14 1
a14 1
plan tests => 144;
a140 2
## The test for import here is *not* because we want to ensure that UNIVERSAL
## can always import; it is an historical accident that UNIVERSAL can import.
d142 1
a142 1
    is $subs, "can import isa DOES VERSION";
d144 1
a144 1
    is $subs, "DOES VERSION can import isa";
a179 10
    package Pickup;
    no warnings "deprecated";
    use UNIVERSAL qw( isa can VERSION );

    ::ok isa "Pickup", UNIVERSAL;
    ::cmp_ok can( "Pickup", "can" ), '==', \&UNIVERSAL::can;
    ::ok VERSION "UNIVERSAL" ;
}

{
d266 4
a269 2
    like($m, qr/^UNIVERSAL->import is deprecated/,
	"deprecation warning for UNIVERSAL->import('can')");
d273 2
@


1.13
log
@Merge perl-5.18.2 plus local patches, remove old files

OK espie@@ sthen@@ deraadt@@
@
text
@d13 1
a13 1
plan tests => 139;
d114 4
d346 7
@


1.12
log
@merge/resolve conflicts
(some more to do after this one)
@
text
@d13 1
a13 1
plan tests => 133;
d110 4
a113 1
ok ! UNIVERSAL::can(23, "can");
d170 1
a170 1
ok ! UNIVERSAL::can($b, "can");
d178 1
d335 7
@


1.11
log
@merge in perl 5.12.2 plus local changes
@
text
@d13 1
a13 1
plan tests => 124;
d62 2
d73 1
d125 7
d213 3
d233 3
d317 1
a317 1
    ok(RT66112::T3->isa('RT66112::A'), "modify \@@ISA in isa (RT66112::T3 isa RT66112::A)");
@


1.10
log
@Merge in perl 5.10.1; part two
@
text
@d13 1
a13 1
plan tests => 116;
d248 67
@


1.9
log
@fix conflicts and merge in local changes to perl 5.10.0
@
text
@d13 1
a13 1
plan tests => 111;
d231 17
@


1.8
log
@merge in perl 5.8.8
@
text
@d13 1
a13 1
print "1..102\n";
d117 1
a117 1
like $@@, qr/^Alice version 2.71(?:9|8999\d+) required--this is only version 2.718 at /;
d126 1
a126 1
    is $subs, "can import isa VERSION";
d128 1
a128 1
    is $subs, "VERSION can import isa";
d149 1
a149 1
    is $sub2, "can import isa VERSION";
d151 1
a151 1
    is $sub2, "VERSION can import isa";
d192 39
@


1.7
log
@Resolve conflicts for perl 5.8.2, remove old files, and add OpenBSD-specific scaffolding
@
text
@d10 1
d13 1
a13 1
print "1..100\n";
d17 1
a17 2
print "not " unless $a->isa("Bob");
print "ok 1\n";
d48 1
a48 8
{ my $i = 2;
  sub test {
      print "not " unless $_[0];
      print "ok ", $i++;
      print " # at ", (caller)[1], ", line ", (caller)[2] unless $_[0];
      print "\n";
  }
}
d52 2
a53 2
test $a->isa("Alice");
test $a->isa("main::Alice");    # check that alternate class names work
d55 1
a55 1
test(("main::Alice"->new)->isa("Alice"));
d57 2
a58 2
test $a->isa("Bob");
test $a->isa("main::Bob");
d60 1
a60 1
test $a->isa("Female");
d62 1
a62 1
test $a->isa("Human");
d64 1
a64 1
test ! $a->isa("Male");
d66 1
a66 1
test ! $a->isa('Programmer');
d68 1
a68 1
test $a->isa("HASH");
d70 5
a74 5
test $a->can("eat");
test ! $a->can("sleep");
test my $ref = $a->can("drink");        # returns a coderef
test $a->$ref("tea") eq "drinking tea"; # ... which works
test $ref = $a->can("sing");
d76 1
a76 1
test $@@;                                # ... but not if no actual subroutine
d78 1
a78 1
test (!Cedric->isa('Programmer'));
d80 1
a80 1
test (Cedric->isa('Human'));
d84 1
a84 1
test (Cedric->isa('Programmer'));
d91 2
a92 2
test $a->isa('Programmer');
test $a->isa("Female");
d96 1
a96 1
test (!Cedric->isa('Programmer'));
d103 1
a103 1
        test UNIVERSAL::isa($vals[$p], $refs[$q]) eq ($p==$q or $p+$q==1);
d107 1
a107 1
test ! UNIVERSAL::can(23, "can");
d109 1
a109 1
test $a->can("VERSION");
d111 2
a112 2
test $a->can("can");
test ! $a->can("export_tags");	# a method in Exporter
d114 1
a114 1
test (eval { $a->VERSION }) == 2.718;
d116 2
a117 2
test ! (eval { $a->VERSION(2.719) }) &&
         $@@ =~ /^Alice version 2.71(?:9|8999\d+) required--this is only version 2.718 at /;
d119 2
a120 1
test (eval { $a->VERSION(2.718) }) && ! $@@;
d126 1
a126 1
    test $subs eq "can import isa VERSION";
d128 1
a128 1
    test $subs eq "VERSION can import isa";
d131 1
a131 1
test $a->isa("UNIVERSAL");
d133 1
a133 1
test ! UNIVERSAL::isa([], "UNIVERSAL");
d135 1
a135 1
test ! UNIVERSAL::can({}, "can");
d137 1
a137 1
test UNIVERSAL::isa(Alice => "UNIVERSAL");
d139 1
a139 1
test UNIVERSAL::can(Alice => "can") == \&UNIVERSAL::can;
d144 1
a144 1
test $a->isa("UNIVERSAL");
d149 1
a149 1
    test $sub2 eq "can import isa VERSION";
d151 1
a151 1
    test $sub2 eq "VERSION can import isa";
d155 1
a155 1
test $a->can("sleep");
d157 1
a157 1
test ! UNIVERSAL::can($b, "can");
d159 1
a159 1
test ! $a->can("export_tags");	# a method in Exporter
d161 1
a161 1
test ! UNIVERSAL::isa("\xff\xff\xff\0", 'HASH');
d167 3
a169 3
    main::test isa "Pickup", UNIVERSAL;
    main::test can( "Pickup", "can" ) == \&UNIVERSAL::can;
    main::test VERSION "UNIVERSAL" ;
d175 2
a176 2
    test $1->isa("Human");
    test $1->can("eat");
d181 2
a182 2
    ::test $x->isa("Human");
    ::test $x->can("eat");
d190 2
a191 2
test $x->isa('UNIVERSAL');
test $x->isa('UNIVERSAL');
@


1.6
log
@Resolve conflicts, remove old files, merge local changes
@
text
@d12 1
a12 1
print "1..94\n";
d177 21
@


1.5
log
@merge in perl 5.6.1 with our local changes
@
text
@d12 1
a12 1
print "1..80\n";
d27 2
a28 1
sub drink {}
d48 8
a55 2
my $i = 2;
sub test { print "not " unless shift; print "ok $i\n"; $i++; }
d60 3
d65 1
d75 1
a75 1
test $a->can("drink");
a77 1

d79 5
d129 2
d132 1
a132 1
    test $subs eq "can isa VERSION";
d134 1
a134 1
    test $subs eq "VERSION can isa";
d139 8
d168 9
@


1.4
log
@Perl Change 5912 by gsar@@auger on 2000/04/24 04:17:15
fix totally broken caching in UNIVERSAL::isa() (from Nick Ing-Simmons);
fixes problems with 5.6.0 and Tk.
@
text
@d8 1
a8 1
    unshift @@INC, '../lib' if -d '../lib';
@


1.3
log
@perl-5.6.0 + local changes
@
text
@d9 1
d12 1
a12 1
print "1..73\n";
d32 13
d62 2
d70 20
d127 1
a127 1
my $sub2 = join ' ', sort grep { defined &{"UNIVERSAL::$_"} } keys %UNIVERSAL::; 
@


1.2
log
@perl5.005_03 (stock)
@
text
@d8 1
a8 1
    @@INC = '../lib' if -d '../lib';
d11 1
a11 1
print "1..72\n";
d73 1
a73 1
         $@@ =~ /^Alice version 2.719 required--this is only version 2.718 at /;
d105 2
@


1.1
log
@perl 5.004_04
@
text
@d78 5
a82 1
test $subs eq "VERSION can isa";
d93 5
a97 1
test $sub2 eq "VERSION can import isa";
@


1.1.1.1
log
@perl5.005_03
@
text
@d78 1
a78 5
if ('a' lt 'A') {
    test $subs eq "can isa VERSION";
} else {
    test $subs eq "VERSION can isa";
}
d89 1
a89 5
if ('a' lt 'A') {
    test $sub2 eq "can import isa VERSION";
} else {
    test $sub2 eq "VERSION can import isa";
}
@


1.1.1.2
log
@virgin perl 5.6.0
@
text
@d8 1
a8 1
    unshift @@INC, '../lib' if -d '../lib';
d11 1
a11 1
print "1..73\n";
d73 1
a73 1
         $@@ =~ /^Alice version 2.71(?:9|8999\d+) required--this is only version 2.718 at /;
a104 2

test ! UNIVERSAL::isa("\xff\xff\xff\0", 'HASH');
@


1.1.1.3
log
@stock perl 5.6.1
@
text
@d8 1
a8 2
    @@INC = '../lib';
    $| = 1;
d11 1
a11 1
print "1..80\n";
a30 13
{
    package Cedric;
    our @@ISA;
    use base qw(Human);
}

{
    package Programmer;
    our $VERSION = 1.667;

    sub write_perl { 1 }
}

a47 2
test ! $a->isa('Programmer');

a53 20
test (!Cedric->isa('Programmer'));

test (Cedric->isa('Human'));

push(@@Cedric::ISA,'Programmer');

test (Cedric->isa('Programmer'));

{
    package Alice;
    base::->import('Programmer');
}

test $a->isa('Programmer');
test $a->isa("Female");

@@Cedric::ISA = qw(Bob);

test (!Cedric->isa('Programmer'));

d91 1
a91 1
my $sub2 = join ' ', sort grep { defined &{"UNIVERSAL::$_"} } keys %UNIVERSAL::;
@


1.1.1.4
log
@stock perl 5.8.0 from CPAN
@
text
@d12 1
a12 1
print "1..94\n";
d27 1
a27 2
sub sing;
sub drink { return "drinking " . $_[1]  }
d47 2
a48 8
{ my $i = 2;
  sub test {
      print "not " unless $_[0];
      print "ok ", $i++;
      print " # at ", (caller)[1], ", line ", (caller)[2] unless $_[0];
      print "\n";
  }
}
a52 3
test $a->isa("main::Alice");    # check that alternate class names work

test(("main::Alice"->new)->isa("Alice"));
a54 1
test $a->isa("main::Bob");
d64 1
a64 1
test $a->isa("HASH");
d67 1
a68 5
test my $ref = $a->can("drink");        # returns a coderef
test $a->$ref("tea") eq "drinking tea"; # ... which works
test $ref = $a->can("sing");
eval { $a->$ref() };
test $@@;                                # ... but not if no actual subroutine
a113 2
## The test for import here is *not* because we want to ensure that UNIVERSAL
## can always import; it is an historical accident that UNIVERSAL can import.
d115 1
a115 1
    test $subs eq "can import isa VERSION";
d117 1
a117 1
    test $subs eq "VERSION can import isa";
a121 8
test ! UNIVERSAL::isa([], "UNIVERSAL");

test ! UNIVERSAL::can({}, "can");

test UNIVERSAL::isa(Alice => "UNIVERSAL");

test UNIVERSAL::can(Alice => "can") == \&UNIVERSAL::can;

a142 9

{
    package Pickup;
    use UNIVERSAL qw( isa can VERSION );

    main::test isa "Pickup", UNIVERSAL;
    main::test can( "Pickup", "can" ) == \&UNIVERSAL::can;
    main::test VERSION "UNIVERSAL" ;
}
@


1.1.1.5
log
@perl 5.8.2 from CPAN
@
text
@d12 1
a12 1
print "1..100\n";
a176 21

{
    # test isa() and can() on magic variables
    "Human" =~ /(.*)/;
    test $1->isa("Human");
    test $1->can("eat");
    package HumanTie;
    sub TIESCALAR { bless {} }
    sub FETCH { "Human" }
    tie my($x), "HumanTie";
    ::test $x->isa("Human");
    ::test $x->can("eat");
}

# bugid 3284
# a second call to isa('UNIVERSAL') when @@ISA is null failed due to caching

@@X::ISA=();
my $x = {}; bless $x, 'X';
test $x->isa('UNIVERSAL');
test $x->isa('UNIVERSAL');
@


1.1.1.6
log
@perl 5.8.8 import
@
text
@a9 1
    require "./test.pl";
d12 1
a12 1
print "1..102\n";
d16 2
a17 1
ok $a->isa("Bob");
d48 8
a55 1

d59 2
a60 2
ok $a->isa("Alice");
ok $a->isa("main::Alice");    # check that alternate class names work
d62 1
a62 1
ok(("main::Alice"->new)->isa("Alice"));
d64 2
a65 2
ok $a->isa("Bob");
ok $a->isa("main::Bob");
d67 1
a67 1
ok $a->isa("Female");
d69 1
a69 1
ok $a->isa("Human");
d71 1
a71 1
ok ! $a->isa("Male");
d73 1
a73 1
ok ! $a->isa('Programmer');
d75 1
a75 1
ok $a->isa("HASH");
d77 5
a81 5
ok $a->can("eat");
ok ! $a->can("sleep");
ok my $ref = $a->can("drink");        # returns a coderef
is $a->$ref("tea"), "drinking tea"; # ... which works
ok $ref = $a->can("sing");
d83 1
a83 1
ok $@@;                                # ... but not if no actual subroutine
d85 1
a85 1
ok (!Cedric->isa('Programmer'));
d87 1
a87 1
ok (Cedric->isa('Human'));
d91 1
a91 1
ok (Cedric->isa('Programmer'));
d98 2
a99 2
ok $a->isa('Programmer');
ok $a->isa("Female");
d103 1
a103 1
ok (!Cedric->isa('Programmer'));
d110 1
a110 1
        is UNIVERSAL::isa($vals[$p], $refs[$q]), ($p==$q or $p+$q==1);
d114 1
a114 1
ok ! UNIVERSAL::can(23, "can");
d116 1
a116 1
ok $a->can("VERSION");
d118 2
a119 2
ok $a->can("can");
ok ! $a->can("export_tags");	# a method in Exporter
d121 1
a121 1
cmp_ok eval { $a->VERSION }, '==', 2.718;
d123 2
a124 2
ok ! (eval { $a->VERSION(2.719) });
like $@@, qr/^Alice version 2.71(?:9|8999\d+) required--this is only version 2.718 at /;
d126 1
a126 2
ok (eval { $a->VERSION(2.718) });
is $@@, '';
d132 1
a132 1
    is $subs, "can import isa VERSION";
d134 1
a134 1
    is $subs, "VERSION can import isa";
d137 1
a137 1
ok $a->isa("UNIVERSAL");
d139 1
a139 1
ok ! UNIVERSAL::isa([], "UNIVERSAL");
d141 1
a141 1
ok ! UNIVERSAL::can({}, "can");
d143 1
a143 1
ok UNIVERSAL::isa(Alice => "UNIVERSAL");
d145 1
a145 1
cmp_ok UNIVERSAL::can(Alice => "can"), '==', \&UNIVERSAL::can;
d150 1
a150 1
ok $a->isa("UNIVERSAL");
d155 1
a155 1
    is $sub2, "can import isa VERSION";
d157 1
a157 1
    is $sub2, "VERSION can import isa";
d161 1
a161 1
ok $a->can("sleep");
d163 1
a163 1
ok ! UNIVERSAL::can($b, "can");
d165 1
a165 1
ok ! $a->can("export_tags");	# a method in Exporter
d167 1
a167 1
ok ! UNIVERSAL::isa("\xff\xff\xff\0", 'HASH');
d173 3
a175 3
    ::ok isa "Pickup", UNIVERSAL;
    ::cmp_ok can( "Pickup", "can" ), '==', \&UNIVERSAL::can;
    ::ok VERSION "UNIVERSAL" ;
d181 2
a182 2
    ok $1->isa("Human");
    ok $1->can("eat");
d187 2
a188 2
    ::ok $x->isa("Human");
    ::ok $x->can("eat");
d196 2
a197 2
ok $x->isa('UNIVERSAL');
ok $x->isa('UNIVERSAL');
@


1.1.1.7
log
@import perl 5.10.0 from CPAN
@
text
@d13 1
a13 1
plan tests => 111;
d117 1
a117 1
like $@@, qr/^Alice version 2.719 required--this is only version 2.718 at /;
d126 1
a126 1
    is $subs, "can import isa DOES VERSION";
d128 1
a128 1
    is $subs, "DOES VERSION can import isa";
d149 1
a149 1
    is $sub2, "can import isa DOES VERSION";
d151 1
a151 1
    is $sub2, "DOES VERSION can import isa";
a191 39


# Check that the "historical accident" of UNIVERSAL having an import()
# method doesn't effect anyone else.
eval { Some::Package->import("bar") };
is $@@, '';


# This segfaulted in a blead.
fresh_perl_is('package Foo; Foo->VERSION;  print "ok"', 'ok');

package Foo;

sub DOES { 1 }

package Bar;

@@Bar::ISA = 'Foo';

package Baz;

package main;
ok( Foo->DOES( 'bar' ), 'DOES() should call DOES() on class' );
ok( Bar->DOES( 'Bar' ), '... and should fall back to isa()' );
ok( Bar->DOES( 'Foo' ), '... even when inherited' );
ok( Baz->DOES( 'Baz' ), '... even without inheriting any other DOES()' );
ok( ! Baz->DOES( 'Foo' ), '... returning true or false appropriately' );

package Pig;
package Bodine;
Bodine->isa('Pig');
*isa = \&UNIVERSAL::isa;
eval { isa({}, 'HASH') };
::is($@@, '', "*isa correctly found");

package main;
eval { UNIVERSAL::DOES([], "foo") };
like( $@@, qr/Can't call method "DOES" on unblessed reference/,
    'DOES call error message says DOES, not isa' );
@


1.1.1.8
log
@import perl 5.10.1
@
text
@d13 1
a13 1
plan tests => 116;
a230 17

# Tests for can seem to be split between here and method.t
# Add the verbatim perl code mentioned in the comments of
# http://www.xray.mpe.mpg.de/mailing-lists/perl5-porters/2001-05/msg01710.html
# but never actually tested.
is(UNIVERSAL->can("NoSuchPackage::foo"), undef);

@@splatt::ISA = 'zlopp';
ok (splatt->isa('zlopp'));
ok (!splatt->isa('plop'));

# This should reset the ->isa lookup cache
@@splatt::ISA = 'plop';
# And here is the new truth.
ok (!splatt->isa('zlopp'));
ok (splatt->isa('plop'));

@


1.1.1.9
log
@Perl 5.12.2 from CPAN
@
text
@d13 1
a13 1
plan tests => 124;
a247 67
use warnings "deprecated";
{
    my $m;
    local $SIG{__WARN__} = sub { $m = $_[0] };
    eval "use UNIVERSAL 'can'";
    like($m, qr/^UNIVERSAL->import is deprecated/,
	"deprecation warning for UNIVERSAL->import('can')");

	  undef $m;
    eval "use UNIVERSAL";
    is($m, undef,
	"no deprecation warning for UNIVERSAL->import");
}

# Test: [perl #66112]: change @@ISA inside  sub isa
{
    package RT66112::A;

    package RT66112::B;

    sub isa {
	my $self = shift;
	@@ISA = qw/RT66112::A/;
	return $self->SUPER::isa(@@_);
    }

    package RT66112::C;

    package RT66112::D;

    sub isa {
	my $self = shift;
	@@RT66112::E::ISA = qw/RT66112::A/;
	return $self->SUPER::isa(@@_);
    }

    package RT66112::E;

    package main;

    @@RT66112::B::ISA = qw//;
    @@RT66112::C::ISA = qw/RT66112::B/;
    @@RT66112::T1::ISA = qw/RT66112::C/;
    ok(RT66112::T1->isa('RT66112::C'), "modify \@@ISA in isa (RT66112::T1 isa RT66112::C)");

    @@RT66112::B::ISA = qw//;
    @@RT66112::C::ISA = qw/RT66112::B/;
    @@RT66112::T2::ISA = qw/RT66112::C/;
    ok(RT66112::T2->isa('RT66112::B'), "modify \@@ISA in isa (RT66112::T2 isa RT66112::B)");

    @@RT66112::B::ISA = qw//;
    @@RT66112::C::ISA = qw/RT66112::B/;
    @@RT66112::T3::ISA = qw/RT66112::C/;
    ok(RT66112::T3->isa('RT66112::A'), "modify \@@ISA in isa (RT66112::T3 isa RT66112::A)");

    @@RT66112::E::ISA = qw/RT66112::D/;
    @@RT66112::T4::ISA = qw/RT66112::E/;
    ok(RT66112::T4->isa('RT66112::E'), "modify \@@ISA in isa (RT66112::T4 isa RT66112::E)");

    @@RT66112::E::ISA = qw/RT66112::D/;
    @@RT66112::T5::ISA = qw/RT66112::E/;
    ok(! RT66112::T5->isa('RT66112::D'), "modify \@@ISA in isa (RT66112::T5 not isa RT66112::D)");

    @@RT66112::E::ISA = qw/RT66112::D/;
    @@RT66112::T6::ISA = qw/RT66112::E/;
    ok(RT66112::T6->isa('RT66112::A'), "modify \@@ISA in isa (RT66112::T6 isa RT66112::A)");
}
@


1.1.1.10
log
@import perl 5.16.3 from CPAN - worked on by Andrew Fresh and myself
@
text
@d13 1
a13 1
plan tests => 133;
a61 2
ok ! $a->isa("Female\0NOT REALLY!"), "->isa is nul-clean.";

a70 1
ok ! $a->can("eat\0Except not!"), "->can is nul-clean.";
a121 7
ok ! (eval { $a->VERSION("version") });
like $@@, qr/^Invalid version format/;

$aversion::VERSION = "version";
ok ! (eval { aversion->VERSION(2.719) });
like $@@, qr/^Invalid version format/;

a202 3
# So did this.
fresh_perl_is('$:; UNIVERSAL::isa(":","Unicode::String");print "ok"','ok');

a219 3
ok( ! "T"->DOES( "T\0" ), 'DOES() is nul-clean' );
ok( ! Baz->DOES( "Baz\0Boy howdy" ), 'DOES() is nul-clean' );

d301 1
a301 1
    ok(RT66112::T3->isa('RT66112::A'), "modify \@@ISA in isa (RT66112::T3 isa RT66112::A)") or require mro, diag "@@{mro::get_linear_isa('RT66112::T3')}";
@


1.1.1.11
log
@Import perl-5.18.2

OK espie@@ sthen@@ deraadt@@
@
text
@d13 1
a13 1
plan tests => 139;
d110 1
a110 4
ok UNIVERSAL::can(23, "can");
++${"23::foo"};
ok UNIVERSAL::can("23", "can"), '"23" can can when the pack exists';
ok UNIVERSAL::can(23, "can"), '23 can can when the pack exists';
d167 1
a167 1
ok UNIVERSAL::can($b, "can");
a174 1
    no warnings "deprecated";
a330 7

ok(Undeclared->can("can"));
sub Undeclared::foo { }
ok(Undeclared->can("foo"));
ok(!Undeclared->can("something_else"));

ok(Undeclared->isa("UNIVERSAL"));
@


1.1.1.12
log
@Import perl-5.20.1
@
text
@d13 1
a13 1
plan tests => 144;
a113 4
sub IO::Handle::turn {}
ok UNIVERSAL::can(*STDOUT, 'turn'), 'globs with IOs can';
ok UNIVERSAL::can(\*STDOUT, 'turn'), 'globrefs with IOs can';
ok UNIVERSAL::can("STDOUT", 'turn'), 'IO barewords can';
a341 7

# keep this at the end to avoid messing up earlier tests, since it modifies
# @@UNIVERSAL::ISA
@@UNIVERSAL::ISA = ('UniversalParent');
{ package UniversalIsaTest1; }
ok(UniversalIsaTest1->isa('UniversalParent'));
ok(UniversalIsaTest2->isa('UniversalParent'));
@


