head	1.2;
access;
symbols
	OPENBSD_6_2:1.2.0.6
	OPENBSD_6_2_BASE:1.2
	PERL_5_24_2:1.1.1.10
	OPENBSD_6_1:1.2.0.4
	OPENBSD_6_1_BASE:1.2
	OPENBSD_6_0:1.1.1.9.0.12
	OPENBSD_6_0_BASE:1.1.1.9
	OPENBSD_5_9:1.1.1.9.0.6
	OPENBSD_5_9_BASE:1.1.1.9
	OPENBSD_5_8:1.1.1.9.0.8
	OPENBSD_5_8_BASE:1.1.1.9
	PERL_5_20_2:1.1.1.9
	OPENBSD_5_7:1.1.1.9.0.2
	OPENBSD_5_7_BASE:1.1.1.9
	PERL_5_20_1:1.1.1.9
	OPENBSD_5_6:1.1.1.9.0.4
	OPENBSD_5_6_BASE:1.1.1.9
	PERL_5_18_2:1.1.1.9
	PERL:1.1.1
	OPENBSD_5_5:1.1.1.8.0.6
	OPENBSD_5_5_BASE:1.1.1.8
	OPENBSD_5_4:1.1.1.8.0.2
	OPENBSD_5_4_BASE:1.1.1.8
	PERL_5_16_3:1.1.1.8
	OPENBSD_5_3:1.1.1.7.0.10
	OPENBSD_5_3_BASE:1.1.1.7
	OPENBSD_5_2:1.1.1.7.0.8
	OPENBSD_5_2_BASE:1.1.1.7
	OPENBSD_5_1_BASE:1.1.1.7
	OPENBSD_5_1:1.1.1.7.0.6
	OPENBSD_5_0:1.1.1.7.0.4
	OPENBSD_5_0_BASE:1.1.1.7
	OPENBSD_4_9:1.1.1.7.0.2
	OPENBSD_4_9_BASE:1.1.1.7
	PERL_5_12_2:1.1.1.7
	OPENBSD_4_8:1.1.1.6.0.4
	OPENBSD_4_8_BASE:1.1.1.6
	OPENBSD_4_7:1.1.1.6.0.2
	OPENBSD_4_7_BASE:1.1.1.6
	PERL_5_10_1:1.1.1.6
	OPENBSD_4_6:1.1.1.5.0.6
	OPENBSD_4_6_BASE:1.1.1.5
	OPENBSD_4_5:1.1.1.5.0.2
	OPENBSD_4_5_BASE:1.1.1.5
	PERL_5_10_0:1.1.1.5
	OPENBSD_4_4:1.1.1.4.0.24
	OPENBSD_4_4_BASE:1.1.1.4
	OPENBSD_4_3:1.1.1.4.0.22
	OPENBSD_4_3_BASE:1.1.1.4
	OPENBSD_4_2:1.1.1.4.0.20
	OPENBSD_4_2_BASE:1.1.1.4
	OPENBSD_4_1:1.1.1.4.0.18
	OPENBSD_4_1_BASE:1.1.1.4
	OPENBSD_4_0:1.1.1.4.0.16
	OPENBSD_4_0_BASE:1.1.1.4
	PERL_5_8_8:1.1.1.4
	OPENBSD_3_9:1.1.1.4.0.14
	OPENBSD_3_9_BASE:1.1.1.4
	OPENBSD_3_8:1.1.1.4.0.12
	OPENBSD_3_8_BASE:1.1.1.4
	OPENBSD_3_7:1.1.1.4.0.10
	OPENBSD_3_7_BASE:1.1.1.4
	PERL_5_8_6:1.1.1.4
	OPENBSD_3_6:1.1.1.4.0.8
	OPENBSD_3_6_BASE:1.1.1.4
	PERL_5_8_5:1.1.1.4
	PERL_5_8_3:1.1.1.4
	OPENBSD_3_5:1.1.1.4.0.6
	OPENBSD_3_5_BASE:1.1.1.4
	PERL_5_8_2:1.1.1.4
	OPENBSD_3_4:1.1.1.4.0.4
	OPENBSD_3_4_BASE:1.1.1.4
	OPENBSD_3_3:1.1.1.4.0.2
	OPENBSD_3_3_BASE:1.1.1.4
	PERL_5_8_0:1.1.1.4
	OPENBSD_3_2:1.1.1.3.0.6
	OPENBSD_3_2_BASE:1.1.1.3
	OPENBSD_3_1:1.1.1.3.0.4
	OPENBSD_3_1_BASE:1.1.1.3
	OPENBSD_3_0:1.1.1.3.0.2
	OPENBSD_3_0_BASE:1.1.1.3
	PERL_5_6_1:1.1.1.3
	OPENBSD_2_9:1.1.1.2.0.6
	OPENBSD_2_9_BASE:1.1.1.2
	OPENBSD_2_8:1.1.1.2.0.4
	OPENBSD_2_8_BASE:1.1.1.2
	OPENBSD_2_7:1.1.1.2.0.2
	OPENBSD_2_7_BASE:1.1.1.2
	PERL_5_6_0:1.1.1.2
	OPENBSD_2_6:1.1.1.1.0.2
	OPENBSD_2_6_BASE:1.1.1.1
	PERL_500503:1.1.1.1
	CPAN:1.1.1;
locks; strict;
comment	@# @;
expand	@o@;


1.2
date	2017.02.05.00.32.20;	author afresh1;	state Exp;
branches;
next	1.1;
commitid	cxJ08BvJA9Pt2PTM;

1.1
date	99.04.29.22.41.43;	author millert;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	99.04.29.22.41.43;	author millert;	state Exp;
branches;
next	1.1.1.2;

1.1.1.2
date	2000.04.06.16.10.47;	author millert;	state Exp;
branches;
next	1.1.1.3;

1.1.1.3
date	2001.05.24.18.25.35;	author millert;	state Exp;
branches;
next	1.1.1.4;

1.1.1.4
date	2002.10.27.22.15.10;	author millert;	state Exp;
branches;
next	1.1.1.5;

1.1.1.5
date	2008.09.29.17.19.00;	author millert;	state Exp;
branches;
next	1.1.1.6;

1.1.1.6
date	2009.10.12.18.10.44;	author millert;	state Exp;
branches;
next	1.1.1.7;

1.1.1.7
date	2010.09.24.14.49.16;	author millert;	state Exp;
branches;
next	1.1.1.8;

1.1.1.8
date	2013.03.25.20.09.35;	author sthen;	state Exp;
branches;
next	1.1.1.9;

1.1.1.9
date	2014.03.24.14.59.10;	author afresh1;	state Exp;
branches;
next	1.1.1.10;

1.1.1.10
date	2017.08.14.13.46.23;	author afresh1;	state Exp;
branches;
next	;
commitid	fAzrs78vdW2Yfc6A;


desc
@@


1.2
log
@Fix merge issues, remove excess files - match perl-5.24.1 dist
@
text
@#!./perl -w

#
# test auto defined() test insertion
#

BEGIN {
    chdir 't' if -d 't';
    @@INC = qw(. ../lib);
    $SIG{__WARN__} = sub { $warns++; warn $_[0] };
}
require './test.pl';
plan( tests => 27 );

my $unix_mode = 1;

if ($^O eq 'VMS') {
    # We have to know if VMS is in UNIX mode.  In UNIX mode, trailing dots
    # should not be present.  There are actually two settings that control this.

    $unix_mode = 0;
    my $unix_rpt = 0;
    my $drop_dot = 0;
    if (eval 'require VMS::Feature') {
        $unix_rpt = VMS::Feature::current('filename_unix_report');
        $drop_dot = VMS::Feature::current('readdir_dropdotnotype');
    } else {
        my $unix_report = $ENV{'DECC$FILENAME_UNIX_REPORT'} || '';
        $unix_rpt = $unix_report =~ /^[ET1]/i; 
        my $drop_dot_notype = $ENV{'DECC$READDIR_DROPDOTNOTYPE'} || '';
        $drop_dot = $drop_dot_notype =~ /^[ET1]/i;
    }
    $unix_mode = 1 if $drop_dot && unix_rpt;
}

# $wanted_filename should be 0 for readdir() and glob() tests.
# This is because it is the only valid filename that is false in a boolean test.

# $filename = '0';
# print "hi\n" if $filename; # doesn't print

# In the case of VMS, '0' isn't always the filename that you get.
# Which makes those particular tests pointless.

$wanted_filename = $unix_mode ? '0' : '0.';
$saved_filename = './0';

cmp_ok($warns,'==',0,'no warns at start');

ok(open(FILE,">$saved_filename"),'created work file');
print FILE "0\n";
print FILE "1\n";
close(FILE);

open(FILE,"<$saved_filename");
ok(defined(FILE),'opened work file');
my $seen = 0;
my $dummy;
while (my $name = <FILE>)
 {
  chomp($name);
  $seen++ if $name eq '0';
 }
cmp_ok($seen,'==',1,'seen in while()');

seek(FILE,0,0);
$seen = 0;
my $line = '';
do
 {
  chomp($line);
  $seen++ if $line eq '0';
 } while ($line = <FILE>);
cmp_ok($seen,'==',1,'seen in do/while');

seek(FILE,0,0);
$seen = 0;
while (($seen ? $dummy : $name) = <FILE> )
 {
  chomp($name);
  $seen++ if $name eq '0';
 }
cmp_ok($seen,'==',2,'seen in while() ternary');

seek(FILE,0,0);
$seen = 0;
my %where;
while ($where{$seen} = <FILE>)
 {
  chomp($where{$seen});
  $seen++ if $where{$seen} eq '0';
 }
cmp_ok($seen,'==',1,'seen in hash while()');
close FILE;

opendir(DIR,'.');
ok(defined(DIR),'opened current directory');
$seen = 0;
while (my $name = readdir(DIR))
 {
  $seen++ if $name eq $wanted_filename;
 }
cmp_ok($seen,'==',1,'saw work file once');

rewinddir(DIR);
$seen = 0;
$dummy = '';
while (($seen ? $dummy : $name) = readdir(DIR))
 {
  $seen++ if $name eq $wanted_filename;
 }
cmp_ok($seen,'>',0,'saw file in while() ternary');

rewinddir(DIR);
$seen = 0;
while ($where{$seen} = readdir(DIR))
 {
  $seen++ if $where{$seen} eq $wanted_filename;
 }
cmp_ok($seen,'==',1,'saw file in hash while()');

rewinddir(DIR);
$seen = 0;
$_ = 'not 0';
while (readdir(DIR))
 {
  $seen++ if $_ eq $wanted_filename;
 }
cmp_ok($seen,'==',1,'saw file in bare while(readdir){...}');

rewinddir(DIR);
$seen = 0;
$_ = 'not 0';

$_ eq $wanted_filename && $seen++ while readdir(DIR);
cmp_ok($seen,'==',1,'saw file in bare "... while readdir"');

rewinddir(DIR);
$seen = 0;
$_ = "";  # suppress uninit warning
do
 {
  $seen++ if $_ eq $wanted_filename;
 } while (readdir(DIR));
cmp_ok($seen,'==',1,'saw file in bare do{...}while(readdir)');

$seen = 0;
while (my $name = glob('*'))
 {
  $seen++ if $name eq $wanted_filename;
 }
cmp_ok($seen,'==',1,'saw file in glob while()');

$seen = 0;
$dummy = '';
while (($seen ? $dummy : $name) = glob('*'))
 {
  $seen++ if $name eq $wanted_filename;
 }
cmp_ok($seen,'>',0,'saw file in glob hash while() ternary');

$seen = 0;
while ($where{$seen} = glob('*'))
 {
  $seen++ if $where{$seen} eq $wanted_filename;
 }
cmp_ok($seen,'==',1,'seen in glob hash while()');

unlink($saved_filename);
ok(!(-f $saved_filename),'work file unlinked');

my %hash = (0 => 1, 1 => 2);
my @@array = 1;
my $neg_sum= 0;

$seen = 0;

while (my $name = each %hash)
 {
  $neg_sum = $name - $neg_sum;
  $seen++ if $name eq '0';
 }
cmp_ok(abs($neg_sum),'==',1,'abs(neg_sum) should equal 1');
cmp_ok($seen,'==',1,'seen in each');

$seen = 0;
$dummy = '';
while (($seen ? $dummy : $name) = each %hash)
 {
  $seen++ if $name eq '0';
 }
cmp_ok($seen,'==',$neg_sum < 0 ? 1 : 2,'seen in each ternary');

$seen = 0;
while ($where{$seen} = each %hash)
 {
  $seen++ if $where{$seen} eq '0';
 }
cmp_ok($seen,'==',1,'seen in each hash');

$seen = 0;
undef $_;
while (each %hash)
 {
  $seen++ if $_ eq '0';
 }
cmp_ok($seen,'==',1,'0 seen in $_ in while(each %hash)');

$seen = 0;
undef $_;
while (each @@array)
 {
  $seen++ if $_ eq '0';
 }
cmp_ok($seen,'==',1,'0 seen in $_ in while(each @@array)');

$seen = 0;
undef $_;
$_ eq '0' and $seen++ while each %hash;
cmp_ok($seen,'==',1,'0 seen in $_ in while(each %hash) as stm mod');

$seen = 0;
undef $_;
$_ eq '0' and $seen++ while each @@array;
cmp_ok($seen,'==',1,'0 seen in $_ in while(each @@array) as stm mod');

cmp_ok($warns,'==',0,'no warns at finish');
@


1.1
log
@Initial revision
@
text
@d9 1
a9 1
    @@INC = '../lib';
a10 1
    print "1..14\n";
d12 2
d15 1
a15 4
$wanted_filename = $^O eq 'VMS' ? '0.' : '0';
    
print "not " if $warns;
print "ok 1\n";
d17 35
a51 1
open(FILE,">./0");
a52 1
print FILE "0";
d55 2
a56 1
open(FILE,"<./0");
d61 1
d63 2
a64 3
 }            
print "not " unless $seen;
print "ok 2\n";
d69 1
a69 1
do 
d71 1
d74 1
a74 4

print "not " unless $seen;
print "ok 3\n";

d77 2
a78 2
$seen = 0;    
while (($seen ? $dummy : $name) = <FILE>)
d80 1
d83 1
a83 2
print "not " unless $seen;
print "ok 4\n";
d86 2
a87 2
$seen = 0;    
my %where;    
d90 1
d93 1
a93 2
print "not " unless $seen;
print "ok 5\n";
d97 1
d102 2
a103 3
 }            
print "not " unless $seen;
print "ok 6\n";
d106 1
a106 1
$seen = 0;    
d112 1
a112 2
print "not " unless $seen;
print "ok 7\n";
d115 1
a115 1
$seen = 0;    
d120 26
a145 2
print "not " unless $seen;
print "ok 8\n";
d151 2
a152 3
 }            
print "not " unless $seen;
print "ok 9\n";
d154 1
a154 1
$seen = 0;    
d160 1
a160 2
print "not " unless $seen;
print "ok 10\n";
d162 1
a162 1
$seen = 0;    
d167 1
a167 2
print "not " unless $seen;
print "ok 11\n";
d169 2
a170 1
unlink("./0");
d173 2
d177 1
d180 1
d182 3
a184 3
 }            
print "not " unless $seen;
print "ok 12\n";
d186 1
a186 1
$seen = 0;    
d192 1
a192 2
print "not " unless $seen;
print "ok 13\n";
d194 1
a194 1
$seen = 0;    
d199 27
a225 2
print "not " unless $seen;
print "ok 14\n";
d227 1
@


1.1.1.1
log
@perl5.005_03
@
text
@@


1.1.1.2
log
@virgin perl 5.6.0
@
text
@d9 1
a9 1
    unshift @@INC, '../lib';
@


1.1.1.3
log
@stock perl 5.6.1
@
text
@d9 1
a9 1
    @@INC = '../lib';
@


1.1.1.4
log
@stock perl 5.8.0 from CPAN
@
text
@a14 1
$saved_filename = $^O eq 'MacOS' ? ':0' : './0';
d19 1
a19 1
open(FILE,">$saved_filename");
d24 1
a24 1
open(FILE,"<$saved_filename");
d66 1
a66 1
opendir(DIR,($^O eq 'MacOS' ? ':' : '.'));
d119 1
a119 1
unlink($saved_filename);
@


1.1.1.5
log
@import perl 5.10.0 from CPAN
@
text
@d9 1
a9 1
    @@INC = qw(. ../lib);
d11 1
a12 2
require 'test.pl';
plan( tests => 19 );
d16 3
a18 2

cmp_ok($warns,'==',0,'no warns at start');
a20 1
ok(defined(FILE),'created work file');
a25 1
ok(defined(FILE),'opened work file');
d31 3
a33 2
 }
cmp_ok($seen,'==',1,'seen in while()');
d38 1
a38 1
do
d42 4
a45 1
cmp_ok($seen,'==',1,'seen in do/while');
d48 2
a49 2
$seen = 0;
while (($seen ? $dummy : $name) = <FILE> )
d53 2
a54 1
cmp_ok($seen,'==',1,'seen in while() ternary');
d57 2
a58 2
$seen = 0;
my %where;
d63 2
a64 1
cmp_ok($seen,'==',1,'seen in hash while()');
a67 1
ok(defined(DIR),'opened current directory');
d72 3
a74 2
 }
cmp_ok($seen,'==',1,'saw work file once');
d77 1
a77 1
$seen = 0;
d83 2
a84 1
cmp_ok($seen,'>',0,'saw file in while() ternary');
d87 1
a87 1
$seen = 0;
d92 2
a93 1
cmp_ok($seen,'==',1,'saw file in hash while()');
d99 3
a101 2
 }
cmp_ok($seen,'==',1,'saw file in glob while()');
d103 1
a103 1
$seen = 0;
d109 2
a110 1
cmp_ok($seen,'>',0,'saw file in glob hash while() ternary');
d112 1
a112 1
$seen = 0;
d117 2
a118 1
cmp_ok($seen,'==',1,'seen in glob hash while()');
a120 1
ok(!(-f $saved_filename),'work file unlinked');
d128 3
a130 2
 }
cmp_ok($seen,'==',1,'seen in each');
d132 1
a132 1
$seen = 0;
d138 2
a139 1
cmp_ok($seen,'==',1,'seen in each ternary');
d141 1
a141 1
$seen = 0;
d146 2
a147 1
cmp_ok($seen,'==',1,'seen in each hash');
a148 1
cmp_ok($warns,'==',0,'no warns at finish');
@


1.1.1.6
log
@import perl 5.10.1
@
text
@d15 1
a15 22
my $unix_mode = 1;

if ($^O eq 'VMS') {
    # We have to know if VMS is in UNIX mode.  In UNIX mode, trailing dots
    # should not be present.  There are actually two settings that control this.

    $unix_mode = 0;
    my $unix_rpt = 0;
    my $drop_dot = 0;
    if (eval 'require VMS::Feature') {
        $unix_rpt = VMS::Feature::current('filename_unix_report');
        $drop_dot = VMS::Feature::current('readdir_dropdotnotype');
    } else {
        my $unix_report = $ENV{'DECC$FILENAME_UNIX_REPORT'} || '';
        $unix_rpt = $unix_report =~ /^[ET1]/i; 
        my $drop_dot_notype = $ENV{'DECC$READDIR_DROPDOTNOTYPE'} || '';
        $drop_dot = $drop_dot_notype =~ /^[ET1]/i;
    }
    $unix_mode = 1 if $drop_dot && unix_rpt;
}

$wanted_filename = $unix_mode ? '0' : '0.';
@


1.1.1.7
log
@Perl 5.12.2 from CPAN
@
text
@d37 1
a37 1
$saved_filename = './0';
d84 1
a84 1
opendir(DIR,'.');
@


1.1.1.8
log
@import perl 5.16.3 from CPAN - worked on by Andrew Fresh and myself
@
text
@d41 2
a42 1
ok(open(FILE,">$saved_filename"),'created work file');
@


1.1.1.9
log
@Import perl-5.18.2

OK espie@@ sthen@@ deraadt@@
@
text
@d13 1
a13 1
plan( tests => 27 );
a35 9
# $wanted_filename should be 0 for readdir() and glob() tests.
# This is because it is the only valid filename that is false in a boolean test.

# $filename = '0';
# print "hi\n" if $filename; # doesn't print

# In the case of VMS, '0' isn't always the filename that you get.
# Which makes those particular tests pointless.

a41 1
print FILE "0\n";
d43 1
a51 1
  chomp($name);
a60 1
  chomp($line);
a68 1
  chomp($name);
d71 1
a71 1
cmp_ok($seen,'==',2,'seen in while() ternary');
a77 1
  chomp($where{$seen});
a108 25
rewinddir(DIR);
$seen = 0;
$_ = 'not 0';
while (readdir(DIR))
 {
  $seen++ if $_ eq $wanted_filename;
 }
cmp_ok($seen,'==',1,'saw file in bare while(readdir){...}');

rewinddir(DIR);
$seen = 0;
$_ = 'not 0';

$_ eq $wanted_filename && $seen++ while readdir(DIR);
cmp_ok($seen,'==',1,'saw file in bare "... while readdir"');

rewinddir(DIR);
$seen = 0;
$_ = "";  # suppress uninit warning
do
 {
  $seen++ if $_ eq $wanted_filename;
 } while (readdir(DIR));
cmp_ok($seen,'==',1,'saw file in bare do{...}while(readdir)');

a134 2
my @@array = 1;
my $neg_sum= 0;
a136 1

a138 1
  $neg_sum = $name - $neg_sum;
a140 1
cmp_ok(abs($neg_sum),'==',1,'abs(neg_sum) should equal 1');
d149 1
a149 1
cmp_ok($seen,'==',$neg_sum < 0 ? 1 : 2,'seen in each ternary');
a156 26

$seen = 0;
undef $_;
while (each %hash)
 {
  $seen++ if $_ eq '0';
 }
cmp_ok($seen,'==',1,'0 seen in $_ in while(each %hash)');

$seen = 0;
undef $_;
while (each @@array)
 {
  $seen++ if $_ eq '0';
 }
cmp_ok($seen,'==',1,'0 seen in $_ in while(each @@array)');

$seen = 0;
undef $_;
$_ eq '0' and $seen++ while each %hash;
cmp_ok($seen,'==',1,'0 seen in $_ in while(each %hash) as stm mod');

$seen = 0;
undef $_;
$_ eq '0' and $seen++ while each @@array;
cmp_ok($seen,'==',1,'0 seen in $_ in while(each @@array) as stm mod');
@


1.1.1.10
log
@Import perl-5.24.2
@
text
@d12 1
a12 1
require './test.pl';
@


