head	1.13;
access;
symbols
	OPENBSD_6_1:1.13.0.4
	OPENBSD_6_1_BASE:1.13
	OPENBSD_6_0:1.12.0.10
	OPENBSD_6_0_BASE:1.12
	OPENBSD_5_9:1.12.0.4
	OPENBSD_5_9_BASE:1.12
	OPENBSD_5_8:1.12.0.6
	OPENBSD_5_8_BASE:1.12
	PERL_5_20_2:1.1.1.9
	OPENBSD_5_7:1.12.0.2
	OPENBSD_5_7_BASE:1.12
	PERL_5_20_1:1.1.1.9
	OPENBSD_5_6:1.11.0.4
	OPENBSD_5_6_BASE:1.11
	PERL_5_18_2:1.1.1.8
	PERL:1.1.1
	OPENBSD_5_5:1.10.0.6
	OPENBSD_5_5_BASE:1.10
	OPENBSD_5_4:1.10.0.2
	OPENBSD_5_4_BASE:1.10
	PERL_5_16_3:1.1.1.7
	OPENBSD_5_3:1.9.0.10
	OPENBSD_5_3_BASE:1.9
	OPENBSD_5_2:1.9.0.8
	OPENBSD_5_2_BASE:1.9
	OPENBSD_5_1_BASE:1.9
	OPENBSD_5_1:1.9.0.6
	OPENBSD_5_0:1.9.0.4
	OPENBSD_5_0_BASE:1.9
	OPENBSD_4_9:1.9.0.2
	OPENBSD_4_9_BASE:1.9
	PERL_5_12_2:1.1.1.6
	OPENBSD_4_8:1.8.0.8
	OPENBSD_4_8_BASE:1.8
	OPENBSD_4_7:1.8.0.4
	OPENBSD_4_7_BASE:1.8
	PERL_5_10_1:1.1.1.5
	OPENBSD_4_6:1.8.0.6
	OPENBSD_4_6_BASE:1.8
	OPENBSD_4_5:1.8.0.2
	OPENBSD_4_5_BASE:1.8
	PERL_5_10_0:1.1.1.5
	OPENBSD_4_4:1.7.0.20
	OPENBSD_4_4_BASE:1.7
	OPENBSD_4_3:1.7.0.18
	OPENBSD_4_3_BASE:1.7
	OPENBSD_4_2:1.7.0.16
	OPENBSD_4_2_BASE:1.7
	OPENBSD_4_1:1.7.0.14
	OPENBSD_4_1_BASE:1.7
	OPENBSD_4_0:1.7.0.12
	OPENBSD_4_0_BASE:1.7
	PERL_5_8_8:1.1.1.4
	OPENBSD_3_9:1.7.0.10
	OPENBSD_3_9_BASE:1.7
	OPENBSD_3_8:1.7.0.8
	OPENBSD_3_8_BASE:1.7
	OPENBSD_3_7:1.7.0.6
	OPENBSD_3_7_BASE:1.7
	PERL_5_8_6:1.1.1.4
	OPENBSD_3_6:1.7.0.4
	OPENBSD_3_6_BASE:1.7
	PERL_5_8_5:1.1.1.3
	PERL_5_8_3:1.1.1.2
	OPENBSD_3_5:1.7.0.2
	OPENBSD_3_5_BASE:1.7
	PERL_5_8_2:1.1.1.2
	OPENBSD_3_4:1.6.0.4
	OPENBSD_3_4_BASE:1.6
	OPENBSD_3_3:1.6.0.2
	OPENBSD_3_3_BASE:1.6
	PERL_5_8_0:1.1.1.2
	OPENBSD_3_2:1.5.0.6
	OPENBSD_3_2_BASE:1.5
	OPENBSD_3_1:1.5.0.4
	OPENBSD_3_1_BASE:1.5
	OPENBSD_3_0:1.5.0.2
	OPENBSD_3_0_BASE:1.5
	PERL_5_6_1:1.1.1.2
	OPENBSD_2_9:1.4.0.6
	OPENBSD_2_9_BASE:1.4
	OPENBSD_2_8:1.4.0.4
	OPENBSD_2_8_BASE:1.4
	OPENBSD_2_7:1.4.0.2
	OPENBSD_2_7_BASE:1.4
	PERL_5_6_0:1.1.1.2
	OPENBSD_2_6:1.3.0.2
	OPENBSD_2_6_BASE:1.3
	PERL_500503:1.1.1.2
	CPAN:1.1.1
	OPENBSD_2_5:1.2.0.6
	OPENBSD_2_5_BASE:1.2
	OPENBSD_2_4:1.2.0.4
	OPENBSD_2_4_BASE:1.2
	OPENBSD_2_3:1.2.0.2
	OPENBSD_2_3_BASE:1.2
	OPENBSD_2_2:1.1.1.1.0.6
	OPENBSD_2_2_BASE:1.1.1.1
	OPENBSD_2_1:1.1.1.1.0.4
	OPENBSD_2_1_BASE:1.1.1.1
	OPENBSD_2_0:1.1.1.1.0.2
	OPENBSD_2_0_BASE:1.1.1.1
	perl5003:1.1.1.1
	lwall:1.1.1;
locks; strict;
comment	@# @;
expand	@o@;


1.13
date	2017.02.05.00.32.20;	author afresh1;	state Exp;
branches;
next	1.12;
commitid	cxJ08BvJA9Pt2PTM;

1.12
date	2014.11.17.20.57.07;	author afresh1;	state Exp;
branches;
next	1.11;
commitid	QP75iYx42Uo7mMxO;

1.11
date	2014.03.24.15.05.33;	author afresh1;	state Exp;
branches;
next	1.10;

1.10
date	2013.03.25.20.40.59;	author sthen;	state Exp;
branches;
next	1.9;

1.9
date	2010.09.24.15.07.09;	author millert;	state Exp;
branches;
next	1.8;

1.8
date	2008.09.29.17.36.20;	author millert;	state Exp;
branches;
next	1.7;

1.7
date	2003.12.03.03.02.49;	author millert;	state Exp;
branches;
next	1.6;

1.6
date	2002.10.27.22.25.37;	author millert;	state Exp;
branches;
next	1.5;

1.5
date	2001.05.24.18.36.20;	author millert;	state Exp;
branches;
next	1.4;

1.4
date	2000.04.06.17.08.28;	author millert;	state Exp;
branches;
next	1.3;

1.3
date	99.04.29.22.52.37;	author millert;	state Exp;
branches;
next	1.2;

1.2
date	97.11.30.08.05.34;	author millert;	state Exp;
branches;
next	1.1;

1.1
date	96.08.19.10.13.20;	author downsj;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	96.08.19.10.13.20;	author downsj;	state Exp;
branches;
next	1.1.1.2;

1.1.1.2
date	99.04.29.22.41.48;	author millert;	state Exp;
branches;
next	1.1.1.3;

1.1.1.3
date	2004.08.09.17.48.35;	author millert;	state Exp;
branches;
next	1.1.1.4;

1.1.1.4
date	2005.01.15.21.18.19;	author millert;	state Exp;
branches;
next	1.1.1.5;

1.1.1.5
date	2008.09.29.17.19.01;	author millert;	state Exp;
branches;
next	1.1.1.6;

1.1.1.6
date	2010.09.24.14.49.18;	author millert;	state Exp;
branches;
next	1.1.1.7;

1.1.1.7
date	2013.03.25.20.09.36;	author sthen;	state Exp;
branches;
next	1.1.1.8;

1.1.1.8
date	2014.03.24.14.59.10;	author afresh1;	state Exp;
branches;
next	1.1.1.9;

1.1.1.9
date	2014.11.17.20.53.18;	author afresh1;	state Exp;
branches;
next	;
commitid	B31cAbBIXiCqnL97;


desc
@@


1.13
log
@Fix merge issues, remove excess files - match perl-5.24.1 dist
@
text
@#!./perl

BEGIN {
    chdir 't' if -d 't';
    require './test.pl';
    set_up_inc('../lib');
}

@@tests = split(/\n/, <<EOF);
0 3,			0 1 2,		3 4 5 6 7
0 0 a b c,		,		a b c 0 1 2 3 4 5 6 7
8 0 a b c,		,		0 1 2 3 4 5 6 7 a b c
7 0 6.5,		,		0 1 2 3 4 5 6 6.5 7
1 0 a b c d e f g h i j,,		0 a b c d e f g h i j 1 2 3 4 5 6 7
0 1 a,			0,		a 1 2 3 4 5 6 7
1 6 x y z,		1 2 3 4 5 6,	0 x y z 7
0 7 x y z,		0 1 2 3 4 5 6,	x y z 7
1 7 x y z,		1 2 3 4 5 6 7,	0 x y z
4,			4 5 6 7,	0 1 2 3
-4,			4 5 6 7,	0 1 2 3
EOF

plan tests => 8 + @@tests*2;
die "blech" unless @@tests;

@@x = (1,2,3);
push(@@x,@@x);
is( join(':',@@x), '1:2:3:1:2:3', 'push array onto array');
push(@@x,4);
is( join(':',@@x), '1:2:3:1:2:3:4', 'push integer onto array');

# test autovivification
push @@$undef1, 1, 2, 3;
is( join(':',@@$undef1), '1:2:3', 'autovivify array');

# test implicit dereference errors
eval "push 42, 0, 1, 2, 3";
like ( $@@, qr/must be array/, 'push onto a literal integer');

$hashref = { };
eval q{ push $hashref, 0, 1, 2, 3 };
like( $@@, qr/Experimental push on scalar is now forbidden/, 'push onto a hashref');

eval q{ push bless([]), 0, 1, 2, 3 };
like( $@@, qr/Experimental push on scalar is now forbidden/, 'push onto a blessed array ref');

$test = 13;

# test context
{
    my($first, $second) = ([1], [2]);
    sub two_things { return +($first, $second) }
    push @@{ two_things() }, 3;
    is( join(':',@@$first), '1', "\$first = [ @@$first ];");
    is( join(':',@@$second), '2:3', "\$second = [ @@$second ]");
}

foreach $line (@@tests) {
    ($list,$get,$leave) = split(/,\t*/,$line);
    ($pos, $len, @@list) = split(' ',$list);
    @@get = split(' ',$get);
    @@leave = split(' ',$leave);
    @@x = (0,1,2,3,4,5,6,7);
    if (defined $len) {
	@@got = splice(@@x, $pos, $len, @@list);
    }
    else {
	@@got = splice(@@x, $pos);
    }
    is(join(':',@@got), join(':',@@get),   "got: @@got == @@get");
    is(join(':',@@x),   join(':',@@leave), "left: @@x == @@leave");
}

1;  # this file is require'd by lib/tie-stdpush.t
@


1.12
log
@Fix merge conflicts, remove extra files, match upstream perl-5.20.1

ok deraadt@@ sthen@@ espie@@ miod@@
@
text
@a4 1
    @@INC = '../lib';
d6 1
d23 1
a23 1
plan tests => 16 + @@tests*4;
a31 20
# test for push/pop intuiting @@ on array
{
    no warnings 'deprecated';
    push(x,3);
}
is( join(':',@@x), '1:2:3:1:2:3:4:3', 'push intuiting @@ on array');
{
    no warnings 'deprecated';
    pop(x);
}
is( join(':',@@x), '1:2:3:1:2:3:4', 'pop intuiting @@ on array');

no warnings 'experimental::autoderef';

# test for push/pop on arrayref
push(\@@x,5);
is( join(':',@@x), '1:2:3:1:2:3:4:5', 'push arrayref');
pop(\@@x);
is( join(':',@@x), '1:2:3:1:2:3:4', 'pop arrayref');

a35 9
# test push on undef (error)
eval { push $undef2, 1, 2, 3 };
like( $@@, qr/Not an ARRAY/, 'push on undef generates an error');

# test constant
use constant CONST_ARRAYREF => [qw/a b c/];
push CONST_ARRAYREF(), qw/d e f/;
is( join(':',@@{CONST_ARRAYREF()}), 'a:b:c:d:e:f', 'test constant');

d41 2
a42 2
eval { push $hashref, 0, 1, 2, 3 };
like( $@@, qr/Not an ARRAY reference/, 'push onto a hashref');
d44 2
a45 2
eval { push bless([]), 0, 1, 2, 3 };
like( $@@, qr/Not an unblessed ARRAY reference/, 'push onto a blessed array ref');
d53 1
a53 1
    push two_things(), 3;
a55 4

    push @@{ two_things() }, 4;
    is( join(':',@@$first), '1', "\$first = [ @@$first ];");
    is( join(':',@@$second), '2:3:4', "\$second = [ @@$second ]");
a63 1
    $y = [0,1,2,3,4,5,6,7];
a65 1
	@@got2 = splice($y, $pos, $len, @@list);
a68 1
	@@got2 = splice($y, $pos);
a71 2
    is(join(':',@@got2), join(':',@@get),   "ref got: @@got2 == @@get");
    is(join(':',@@$y),   join(':',@@leave), "ref left: @@$y == @@leave");
@


1.11
log
@Merge perl-5.18.2 plus local patches, remove old files

OK espie@@ sthen@@ deraadt@@
@
text
@d44 2
@


1.10
log
@merge/resolve conflicts
(some more to do after this one)
@
text
@d3 6
d23 1
a23 1
print "1..", 14 + 2*@@tests, "\n";
d28 1
a28 1
if (join(':',@@x) eq '1:2:3:1:2:3') {print "ok 1\n";} else {print "not ok 1\n";}
d30 1
a30 1
if (join(':',@@x) eq '1:2:3:1:2:3:4') {print "ok 2\n";} else {print "not ok 2\n";}
d37 1
a37 1
if (join(':',@@x) eq '1:2:3:1:2:3:4:3') {print "ok 3\n";} else {print "not ok 3\n";}
d42 1
a42 1
if (join(':',@@x) eq '1:2:3:1:2:3:4') {print "ok 4\n";} else {print "not ok 4\n";}
d46 1
a46 1
if (join(':',@@x) eq '1:2:3:1:2:3:4:5') {print "ok 5\n";} else {print "not ok 5\n";}
d48 1
a48 1
if (join(':',@@x) eq '1:2:3:1:2:3:4') {print "ok 6\n";} else {print "not ok 6\n";}
d52 1
a52 1
if (join(':',@@$undef1) eq '1:2:3') {print "ok 7\n";} else {print "not ok 7\n";}
d56 1
a56 1
if ($@@ =~ /Not an ARRAY/) {print "ok 8\n";} else {print "not ok 8\n";}
d61 1
a61 1
if (join(':',@@{CONST_ARRAYREF()}) eq 'a:b:c:d:e:f') {print "ok 9\n";} else {print "not ok 9\n";}
d65 1
a65 1
if ( $@@ && $@@ =~ /must be array/ ) {print "ok 10\n"} else {print "not ok 10 # \$\@@ = $@@\n"}
d69 1
a69 1
if ( $@@ && $@@ =~ /Not an ARRAY reference/ ) {print "ok 11\n"} else {print "not ok 11 # \$\@@ = $@@\n"}
d72 1
a72 1
if ( $@@ && $@@ =~ /Not an unblessed ARRAY reference/ ) {print "ok 12\n"} else {print "not ok 12 # \$\@@ = $@@\n"}
d81 2
a82 7
    if (join(':',@@$first) eq '1' &&
        join(':',@@$second) eq '2:3') {
        print "ok ",$test++,"\n";
    }
    else {
        print "not ok ",$test++," got: \$first = [ @@$first ]; \$second = [ @@$second ];\n";
    }
d85 2
a86 7
    if (join(':',@@$first) eq '1' &&
        join(':',@@$second) eq '2:3:4') {
        print "ok ",$test++,"\n";
    }
    else {
        print "not ok ",$test++," got: \$first = [ @@$first ]; \$second = [ @@$second ];\n";
    }
d104 4
a107 14
    if (join(':',@@got) eq join(':',@@get) &&
	join(':',@@x) eq join(':',@@leave)) {
	print "ok ",$test++,"\n";
    }
    else {
	print "not ok ",$test++," got: @@got == @@get left: @@x == @@leave\n";
    }
    if (join(':',@@got2) eq join(':',@@get) &&
	join(':',@@$y) eq join(':',@@leave)) {
	print "ok ",$test++,"\n";
    }
    else {
	print "not ok ",$test++," got (arrayref): @@got2 == @@get left: @@$y == @@leave\n";
    }
@


1.9
log
@merge in perl 5.12.2 plus local changes
@
text
@d17 1
a17 1
print "1..", 4 + @@tests, "\n";
d38 55
a92 1
$test = 5;
d99 1
d102 1
d106 1
d114 7
@


1.8
log
@fix conflicts and merge in local changes to perl 5.10.0
@
text
@d27 4
a30 1
push(x,3);
d32 4
a35 1
pop(x);
@


1.7
log
@Resolve conflicts for perl 5.8.2, remove old files, and add OpenBSD-specific scaffolding
@
text
@a2 2
# $RCSfile: push.t,v $$Revision: 4.1 $$Date: 92/08/07 18:28:13 $

@


1.6
log
@Resolve conflicts, remove old files, merge local changes
@
text
@@


1.5
log
@merge in perl 5.6.1 with our local changes
@
text
@@


1.4
log
@perl-5.6.0 + local changes
@
text
@@


1.3
log
@perl5.005_03 (stock)
@
text
@@


1.2
log
@perl 5.004_04
@
text
@d19 1
a19 1
print "1..", 2 + @@tests, "\n";
d25 1
a25 1
push(x,4);
d28 7
a34 1
$test = 3;
d56 1
@


1.1
log
@Initial revision
@
text
@@


1.1.1.1
log
@Import of Perl 5.003 into the tree.  Makefile.bsd-wrapper and
config.sh.OpenBSD are the only local changes.
@
text
@@


1.1.1.2
log
@perl5.005_03
@
text
@d19 1
a19 1
print "1..", 4 + @@tests, "\n";
d25 1
a25 1
push(@@x,4);
d28 1
a28 7
# test for push/pop intuiting @@ on array
push(x,3);
if (join(':',@@x) eq '1:2:3:1:2:3:4:3') {print "ok 3\n";} else {print "not ok 3\n";}
pop(x);
if (join(':',@@x) eq '1:2:3:1:2:3:4') {print "ok 4\n";} else {print "not ok 4\n";}

$test = 5;
a49 1
1;  # this file is require'd by lib/tie-stdpush.t
@


1.1.1.3
log
@Import of stock perl 5.8.5
@
text
@d3 1
a3 1
# $RCSfile: push.t,v $$Revision: 1.7 $$Date: 2003/12/03 03:02:49 $
@


1.1.1.4
log
@perl 5.8.6 from CPAN
@
text
@d3 1
a3 1
# $RCSfile: push.t,v $$Revision: 4.1 $$Date: 92/08/07 18:28:13 $
@


1.1.1.5
log
@import perl 5.10.0 from CPAN
@
text
@d3 2
@


1.1.1.6
log
@Perl 5.12.2 from CPAN
@
text
@d27 1
a27 4
{
    no warnings 'deprecated';
    push(x,3);
}
d29 1
a29 4
{
    no warnings 'deprecated';
    pop(x);
}
@


1.1.1.7
log
@import perl 5.16.3 from CPAN - worked on by Andrew Fresh and myself
@
text
@d17 1
a17 1
print "1..", 14 + 2*@@tests, "\n";
d38 1
a38 55
# test for push/pop on arrayref
push(\@@x,5);
if (join(':',@@x) eq '1:2:3:1:2:3:4:5') {print "ok 5\n";} else {print "not ok 5\n";}
pop(\@@x);
if (join(':',@@x) eq '1:2:3:1:2:3:4') {print "ok 6\n";} else {print "not ok 6\n";}

# test autovivification
push @@$undef1, 1, 2, 3;
if (join(':',@@$undef1) eq '1:2:3') {print "ok 7\n";} else {print "not ok 7\n";}

# test push on undef (error)
eval { push $undef2, 1, 2, 3 };
if ($@@ =~ /Not an ARRAY/) {print "ok 8\n";} else {print "not ok 8\n";}

# test constant
use constant CONST_ARRAYREF => [qw/a b c/];
push CONST_ARRAYREF(), qw/d e f/;
if (join(':',@@{CONST_ARRAYREF()}) eq 'a:b:c:d:e:f') {print "ok 9\n";} else {print "not ok 9\n";}

# test implicit dereference errors
eval "push 42, 0, 1, 2, 3";
if ( $@@ && $@@ =~ /must be array/ ) {print "ok 10\n"} else {print "not ok 10 # \$\@@ = $@@\n"}

$hashref = { };
eval { push $hashref, 0, 1, 2, 3 };
if ( $@@ && $@@ =~ /Not an ARRAY reference/ ) {print "ok 11\n"} else {print "not ok 11 # \$\@@ = $@@\n"}

eval { push bless([]), 0, 1, 2, 3 };
if ( $@@ && $@@ =~ /Not an unblessed ARRAY reference/ ) {print "ok 12\n"} else {print "not ok 12 # \$\@@ = $@@\n"}

$test = 13;

# test context
{
    my($first, $second) = ([1], [2]);
    sub two_things { return +($first, $second) }
    push two_things(), 3;
    if (join(':',@@$first) eq '1' &&
        join(':',@@$second) eq '2:3') {
        print "ok ",$test++,"\n";
    }
    else {
        print "not ok ",$test++," got: \$first = [ @@$first ]; \$second = [ @@$second ];\n";
    }

    push @@{ two_things() }, 4;
    if (join(':',@@$first) eq '1' &&
        join(':',@@$second) eq '2:3:4') {
        print "ok ",$test++,"\n";
    }
    else {
        print "not ok ",$test++," got: \$first = [ @@$first ]; \$second = [ @@$second ];\n";
    }
}

a44 1
    $y = [0,1,2,3,4,5,6,7];
a46 1
	@@got2 = splice($y, $pos, $len, @@list);
a49 1
	@@got2 = splice($y, $pos);
a56 7
    }
    if (join(':',@@got2) eq join(':',@@get) &&
	join(':',@@$y) eq join(':',@@leave)) {
	print "ok ",$test++,"\n";
    }
    else {
	print "not ok ",$test++," got (arrayref): @@got2 == @@get left: @@$y == @@leave\n";
@


1.1.1.8
log
@Import perl-5.18.2

OK espie@@ sthen@@ deraadt@@
@
text
@a2 6
BEGIN {
    chdir 't' if -d 't';
    @@INC = '../lib';
    require './test.pl';
}

d17 1
a17 1
plan tests => 16 + @@tests*4;
d22 1
a22 1
is( join(':',@@x), '1:2:3:1:2:3', 'push array onto array');
d24 1
a24 1
is( join(':',@@x), '1:2:3:1:2:3:4', 'push integer onto array');
d31 1
a31 1
is( join(':',@@x), '1:2:3:1:2:3:4:3', 'push intuiting @@ on array');
d36 1
a36 1
is( join(':',@@x), '1:2:3:1:2:3:4', 'pop intuiting @@ on array');
d40 1
a40 1
is( join(':',@@x), '1:2:3:1:2:3:4:5', 'push arrayref');
d42 1
a42 1
is( join(':',@@x), '1:2:3:1:2:3:4', 'pop arrayref');
d46 1
a46 1
is( join(':',@@$undef1), '1:2:3', 'autovivify array');
d50 1
a50 1
like( $@@, qr/Not an ARRAY/, 'push on undef generates an error');
d55 1
a55 1
is( join(':',@@{CONST_ARRAYREF()}), 'a:b:c:d:e:f', 'test constant');
d59 1
a59 1
like ( $@@, qr/must be array/, 'push onto a literal integer');
d63 1
a63 1
like( $@@, qr/Not an ARRAY reference/, 'push onto a hashref');
d66 1
a66 1
like( $@@, qr/Not an unblessed ARRAY reference/, 'push onto a blessed array ref');
d75 7
a81 2
    is( join(':',@@$first), '1', "\$first = [ @@$first ];");
    is( join(':',@@$second), '2:3', "\$second = [ @@$second ]");
d84 7
a90 2
    is( join(':',@@$first), '1', "\$first = [ @@$first ];");
    is( join(':',@@$second), '2:3:4', "\$second = [ @@$second ]");
d108 14
a121 4
    is(join(':',@@got), join(':',@@get),   "got: @@got == @@get");
    is(join(':',@@x),   join(':',@@leave), "left: @@x == @@leave");
    is(join(':',@@got2), join(':',@@get),   "ref got: @@got2 == @@get");
    is(join(':',@@$y),   join(':',@@leave), "ref left: @@$y == @@leave");
@


1.1.1.9
log
@Import perl-5.20.1
@
text
@a43 2
no warnings 'experimental::autoderef';

@


