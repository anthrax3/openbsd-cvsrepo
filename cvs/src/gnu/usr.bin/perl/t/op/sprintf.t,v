head	1.16;
access;
symbols
	OPENBSD_6_2_BASE:1.16
	PERL_5_24_2:1.1.1.14
	OPENBSD_6_1:1.16.0.4
	OPENBSD_6_1_BASE:1.16
	OPENBSD_6_0:1.15.0.10
	OPENBSD_6_0_BASE:1.15
	OPENBSD_5_9:1.15.0.4
	OPENBSD_5_9_BASE:1.15
	OPENBSD_5_8:1.15.0.6
	OPENBSD_5_8_BASE:1.15
	PERL_5_20_2:1.1.1.13
	OPENBSD_5_7:1.15.0.2
	OPENBSD_5_7_BASE:1.15
	PERL_5_20_1:1.1.1.13
	OPENBSD_5_6:1.14.0.4
	OPENBSD_5_6_BASE:1.14
	PERL_5_18_2:1.1.1.12
	PERL:1.1.1
	OPENBSD_5_5:1.13.0.6
	OPENBSD_5_5_BASE:1.13
	OPENBSD_5_4:1.13.0.2
	OPENBSD_5_4_BASE:1.13
	PERL_5_16_3:1.1.1.11
	OPENBSD_5_3:1.12.0.10
	OPENBSD_5_3_BASE:1.12
	OPENBSD_5_2:1.12.0.8
	OPENBSD_5_2_BASE:1.12
	OPENBSD_5_1_BASE:1.12
	OPENBSD_5_1:1.12.0.6
	OPENBSD_5_0:1.12.0.4
	OPENBSD_5_0_BASE:1.12
	OPENBSD_4_9:1.12.0.2
	OPENBSD_4_9_BASE:1.12
	PERL_5_12_2:1.1.1.10
	OPENBSD_4_8:1.11.0.4
	OPENBSD_4_8_BASE:1.11
	OPENBSD_4_7:1.11.0.2
	OPENBSD_4_7_BASE:1.11
	PERL_5_10_1:1.1.1.9
	OPENBSD_4_6:1.10.0.6
	OPENBSD_4_6_BASE:1.10
	OPENBSD_4_5:1.10.0.2
	OPENBSD_4_5_BASE:1.10
	PERL_5_10_0:1.1.1.8
	OPENBSD_4_4:1.9.0.10
	OPENBSD_4_4_BASE:1.9
	OPENBSD_4_3:1.9.0.8
	OPENBSD_4_3_BASE:1.9
	OPENBSD_4_2:1.9.0.6
	OPENBSD_4_2_BASE:1.9
	OPENBSD_4_1:1.9.0.4
	OPENBSD_4_1_BASE:1.9
	OPENBSD_4_0:1.9.0.2
	OPENBSD_4_0_BASE:1.9
	PERL_5_8_8:1.1.1.7
	OPENBSD_3_9:1.8.0.2
	OPENBSD_3_9_BASE:1.8
	OPENBSD_3_8:1.7.0.8
	OPENBSD_3_8_BASE:1.7
	OPENBSD_3_7:1.7.0.6
	OPENBSD_3_7_BASE:1.7
	PERL_5_8_6:1.1.1.6
	OPENBSD_3_6:1.7.0.4
	OPENBSD_3_6_BASE:1.7
	PERL_5_8_5:1.1.1.6
	PERL_5_8_3:1.1.1.6
	OPENBSD_3_5:1.7.0.2
	OPENBSD_3_5_BASE:1.7
	PERL_5_8_2:1.1.1.6
	OPENBSD_3_4:1.6.0.4
	OPENBSD_3_4_BASE:1.6
	OPENBSD_3_3:1.6.0.2
	OPENBSD_3_3_BASE:1.6
	PERL_5_8_0:1.1.1.5
	OPENBSD_3_2:1.5.0.6
	OPENBSD_3_2_BASE:1.5
	OPENBSD_3_1:1.5.0.4
	OPENBSD_3_1_BASE:1.5
	OPENBSD_3_0:1.5.0.2
	OPENBSD_3_0_BASE:1.5
	PERL_5_6_1:1.1.1.4
	OPENBSD_2_9:1.4.0.6
	OPENBSD_2_9_BASE:1.4
	OPENBSD_2_8:1.4.0.4
	OPENBSD_2_8_BASE:1.4
	OPENBSD_2_7:1.4.0.2
	OPENBSD_2_7_BASE:1.4
	PERL_5_6_0:1.1.1.3
	OPENBSD_2_6:1.3.0.2
	OPENBSD_2_6_BASE:1.3
	PERL_500503:1.1.1.2
	CPAN:1.1.1
	OPENBSD_2_5:1.2.0.6
	OPENBSD_2_5_BASE:1.2
	OPENBSD_2_4:1.2.0.4
	OPENBSD_2_4_BASE:1.2
	OPENBSD_2_3:1.2.0.2
	OPENBSD_2_3_BASE:1.2
	OPENBSD_2_2:1.1.1.1.0.6
	OPENBSD_2_2_BASE:1.1.1.1
	OPENBSD_2_1:1.1.1.1.0.4
	OPENBSD_2_1_BASE:1.1.1.1
	OPENBSD_2_0:1.1.1.1.0.2
	OPENBSD_2_0_BASE:1.1.1.1
	perl5003:1.1.1.1
	lwall:1.1.1;
locks; strict;
comment	@# @;
expand	@o@;


1.16
date	2017.02.05.00.32.20;	author afresh1;	state Exp;
branches;
next	1.15;
commitid	cxJ08BvJA9Pt2PTM;

1.15
date	2014.11.17.20.57.07;	author afresh1;	state Exp;
branches;
next	1.14;
commitid	QP75iYx42Uo7mMxO;

1.14
date	2014.03.24.15.05.33;	author afresh1;	state Exp;
branches;
next	1.13;

1.13
date	2013.03.25.20.41.00;	author sthen;	state Exp;
branches;
next	1.12;

1.12
date	2010.09.24.15.07.09;	author millert;	state Exp;
branches;
next	1.11;

1.11
date	2009.10.12.18.30.28;	author millert;	state Exp;
branches;
next	1.10;

1.10
date	2008.09.29.17.36.20;	author millert;	state Exp;
branches;
next	1.9;

1.9
date	2006.03.28.19.23.13;	author millert;	state Exp;
branches;
next	1.8;

1.8
date	2006.01.02.23.37.10;	author brad;	state Exp;
branches;
next	1.7;

1.7
date	2003.12.03.03.02.49;	author millert;	state Exp;
branches;
next	1.6;

1.6
date	2002.10.27.22.25.37;	author millert;	state Exp;
branches;
next	1.5;

1.5
date	2001.05.24.18.36.22;	author millert;	state Exp;
branches;
next	1.4;

1.4
date	2000.04.06.17.08.32;	author millert;	state Exp;
branches;
next	1.3;

1.3
date	99.04.29.22.52.38;	author millert;	state Exp;
branches;
next	1.2;

1.2
date	97.11.30.08.05.43;	author millert;	state Exp;
branches;
next	1.1;

1.1
date	96.08.19.10.13.22;	author downsj;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	96.08.19.10.13.22;	author downsj;	state Exp;
branches;
next	1.1.1.2;

1.1.1.2
date	99.04.29.22.41.51;	author millert;	state Exp;
branches;
next	1.1.1.3;

1.1.1.3
date	2000.04.06.16.10.51;	author millert;	state Exp;
branches;
next	1.1.1.4;

1.1.1.4
date	2001.05.24.18.25.47;	author millert;	state Exp;
branches;
next	1.1.1.5;

1.1.1.5
date	2002.10.27.22.15.11;	author millert;	state Exp;
branches;
next	1.1.1.6;

1.1.1.6
date	2003.12.03.02.44.32;	author millert;	state Exp;
branches;
next	1.1.1.7;

1.1.1.7
date	2006.03.28.18.49.46;	author millert;	state Exp;
branches;
next	1.1.1.8;

1.1.1.8
date	2008.09.29.17.19.02;	author millert;	state Exp;
branches;
next	1.1.1.9;

1.1.1.9
date	2009.10.12.18.10.44;	author millert;	state Exp;
branches;
next	1.1.1.10;

1.1.1.10
date	2010.09.24.14.49.18;	author millert;	state Exp;
branches;
next	1.1.1.11;

1.1.1.11
date	2013.03.25.20.09.37;	author sthen;	state Exp;
branches;
next	1.1.1.12;

1.1.1.12
date	2014.03.24.14.59.10;	author afresh1;	state Exp;
branches;
next	1.1.1.13;

1.1.1.13
date	2014.11.17.20.53.18;	author afresh1;	state Exp;
branches;
next	1.1.1.14;
commitid	B31cAbBIXiCqnL97;

1.1.1.14
date	2017.08.14.13.46.24;	author afresh1;	state Exp;
branches;
next	;
commitid	fAzrs78vdW2Yfc6A;


desc
@@


1.16
log
@Fix merge issues, remove excess files - match perl-5.24.1 dist
@
text
@#!./perl

# Tests sprintf, excluding handling of 64-bit integers or long
# doubles (if supported), of machine-specific short and long
# integers, machine-specific floating point exceptions (infinity,
# not-a-number ...), of the effects of locale, and of features
# specific to multi-byte characters (under the utf8 pragma and such).

# For tests that do not fit this format, use sprintf2.t.

BEGIN {
    chdir 't' if -d 't';
    @@INC = qw '../lib ../cpan/version/lib';
}
use warnings;
use version;
use Config;
use strict;
require './test.pl';

my @@tests = ();
my ($template, $data, $result, $comment, $w, $x, $evalData, $n, $p);

my $Is_VMS_VAX = 0;
# We use HW_MODEL since ARCH_NAME was not in VMS V5.*
if ($^O eq 'VMS') {
    my $hw_model;
    chomp($hw_model = `write sys\$output f\$getsyi("HW_MODEL")`);
    $Is_VMS_VAX = $hw_model < 1024 ? 1 : 0;
}

# No %Config.
my $Is_Ultrix_VAX = $^O eq 'ultrix' && `uname -m` =~ /^VAX$/;

our $IS_EBCDIC = $::IS_EBCDIC;  # Solely to avoid the 'used once' warning
our $IS_ASCII = $::IS_ASCII;   # Solely to avoid the 'used once' warning

while (<DATA>) {
    s/<\s*$//;

    # An initial 'a' or 'e' marks the test as being only for ASCII or EBCDIC
    # platforms respectively.
    s/^\s* ( [ae] )? >//x;
    next if defined $1 && $1 eq 'a' && $::IS_EBCDIC;
    next if defined $1 && $1 eq 'e' && $::IS_ASCII;

    ($template, $data, $result, $comment) = split(/<\s*>/, $_, 4);
    if ($^O eq 'os390' || $^O eq 's390') { # non-IEEE (s390 is UTS)
        $data   =~ s/([eE])96$/${1}63/;      # smaller exponents
        $result =~ s/([eE]\+)102$/${1}69/;   #  "       "
        $data   =~ s/([eE])\-101$/${1}-56/;  # larger exponents
        $result =~ s/([eE])\-102$/${1}-57/;  #  "       "
    }
    if ($Is_VMS_VAX || $Is_Ultrix_VAX) {
	# VAX DEC C 5.3 at least since there is no
	# ccflags =~ /float=ieee/ on VAX.
	# AXP is unaffected whether or not it is using ieee.
        $data   =~ s/([eE])96$/${1}26/;      # smaller exponents
        $result =~ s/([eE]\+)102$/${1}32/;   #  "       "
        $data   =~ s/([eE])\-101$/${1}-24/;  # larger exponents
        $result =~ s/([eE])\-102$/${1}-25/;  #  "       "
    }

    $evalData = eval $data;
    $evalData = ref $evalData ? $evalData : [$evalData];
    push @@tests, [$template, $evalData, $result, $comment, $data];
}

plan(scalar @@tests);

$SIG{__WARN__} = sub {
    if ($_[0] =~ /^Invalid conversion/) {
	$w .= ' INVALID';
    } elsif ($_[0] =~ /^Use of uninitialized value/) {
	$w .= ' UNINIT';
    } elsif ($_[0] =~ /^Missing argument/) {
	$w .= ' MISSING';
    } elsif ($_[0] =~ /^Redundant argument/) {
	$w .= ' REDUNDANT';
    } elsif ($_[0]=~/^vector argument not supported with alpha versions/) {
	$w .= ' ALPHA';
    } else {
	warn @@_;
    }
};

for (@@tests) {
    ($template, $evalData, $result, $comment, $data) = @@$_;
    $w = undef;
    $x = sprintf($template, @@$evalData);
    $x = ">$x<" if defined $x;
    substr($x, -1, 0) = $w if $w;
    # $x may have 3 exponent digits, not 2
    my $y = $x;
    if ($y =~ s/([Ee][-+])0(\d)/$1$2/) {
        # if result is left-adjusted, append extra space
        if ($template =~ /%\+?\-/ and $result =~ / $/) {
	    $y =~ s/<$/ </;
	}
        # if result is zero-filled, add extra zero
	elsif ($template =~ /%\+?0/ and $result =~ /^0/) {
	    $y =~ s/^>0/>00/;
	}
        # if result is right-adjusted, prepend extra space
	elsif ($result =~ /^ /) {
	    $y =~ s/^>/> /;
	}
    }

    my $skip = 0;
    if ($comment =~ s/\s+skip:\s*(.*)//) {
	my $os  = $1;
	my $osv = exists $Config{osvers} ? $Config{osvers} : "0";
	# >comment skip: all<
	if ($os =~ /\ball\b/i) {
	    $skip = 1;
	# >comment skip: VMS hpux:10.20<
	} elsif ($os =~ /\b$^O(?::(\S+))?\b/i) {
	    my $vsn = defined $1 ? $1 : "0";
	    # Only compare on the the first pair of digits, as numeric
	    # compares do not like 2.6.10-3mdksmp or 2.6.8-24.10-default
	    s/^(\d+(\.\d+)?).*/$1/ for $osv, $vsn;
	    $skip = $vsn ? ($osv <= $vsn ? 1 : 0) : 1;
	}
	$skip and $comment =~ s/$/, failure expected on $^O $osv/;
    }

    if ($x eq ">$result<") {
        ok(1, join ' ', grep length, ">$result<", $comment);
    }
    elsif ($skip) {
        ok(1, "skip $comment");
    }
    elsif ($y eq ">$result<")	# Some C libraries always give
    {				# three-digit exponent
		ok(1, ">$result< $x three-digit exponent accepted");
    }
	elsif ($result =~ /[-+]\d{3}$/ &&
		   # Suppress tests with modulo of exponent >= 100 on platforms
		   # which cannot handle such magnitudes (or where we cannot tell).
		   ((!eval {require POSIX}) || # Costly: only do this if we must!
			(length(&POSIX::DBL_MAX) - rindex(&POSIX::DBL_MAX, '+')) == 3))
	{
        ok(1,
         ">$template< >$data< >$result< Suppressed: exponent out of range?\n");
	}
    else {
        $y = ($x eq $y ? "" : " => $y");
        ok(0, ">$template< >$data< >$result< $x$y $comment");
    }
}

# In each of the following lines, there are three required fields:
# printf template, data to be formatted (as a Perl expression), and
# expected result of formatting.  An optional fourth field can contain
# a comment.  Each field is delimited by a starting '>' and a
# finishing '<'; any whitespace outside these start and end marks is
# not part of the field.  If formatting requires more than one data
# item (for example, if variable field widths are used), the Perl data
# expression should return a reference to an array having the requisite
# number of elements.  Even so, subterfuge is sometimes required: see
# tests for %n and %p.
#
# Tests that are expected to fail on a certain OS can be marked as such
# by trailing the comment with a skip: section. Skips are tags separated
# bu space consisting of a $^O optionally trailed with :osvers. In the
# latter case, all os-levels below that are expected to fail. A special
# tag 'all' is allowed for todo tests that should fail on any system
#
# >%G<   >1234567e96<  >1.23457E+102<   >exponent too big skip: os390<
# >%.0g< >-0.0<        >-0<             >No minus skip: MSWin32 VMS hpux:10.20<
# >%d<   >4<           >1<              >4 != 1 skip: all<
#
# The following tests are not currently run, for the reasons stated:

=pod

=begin problematic

>%.0f<      >1.5<         >2<   >Standard vague: no rounding rules<
>%.0f<      >2.5<         >2<   >Standard vague: no rounding rules<

=end problematic

=cut

# template    data          result
__END__
>%6. 6s<    >''<          >%6. 6s INVALID REDUNDANT< >(See use of $w in code above)<
>%6 .6s<    >''<          >%6 .6s INVALID REDUNDANT<
>%6.6 s<    >''<          >%6.6 s INVALID REDUNDANT<
>%A<        >0<           ><	 >%A tested in sprintf2.t skip: all<
>%B<        >2**32-1<     >11111111111111111111111111111111<
>%+B<       >2**32-1<     >11111111111111111111111111111111<
>%#B<       >2**32-1<     >0B11111111111111111111111111111111<
>%C<        >''<          >%C INVALID REDUNDANT<
>%D<        >0x7fffffff<  >2147483647<     >Synonym for %ld<
>%E<        >123456.789<  >1.234568E+05<   >Like %e, but using upper-case "E"<
>%F<        >123456.789<  >123456.789000<  >Synonym for %f<
>%G<        >1234567.89<  >1.23457E+06<    >Like %g, but using upper-case "E"<
>%G<        >1234567e96<  >1.23457E+102<
>%G<        >.1234567e-101< >1.23457E-102<
>%G<        >12345.6789<  >12345.7<
>%G<        >1234567e96<  >1.23457E+102<	>exponent too big skip: os390<
>%G<        >.1234567e-101< >1.23457E-102<	>exponent too small skip: os390<
>%H<        >''<          >%H INVALID REDUNDANT<
>%I<        >''<          >%I INVALID REDUNDANT<
>%J<        >''<          >%J INVALID REDUNDANT<
>%K<        >''<          >%K INVALID REDUNDANT<
>%L<        >''<          >%L INVALID REDUNDANT<
>%M<        >''<          >%M INVALID REDUNDANT<
>%N<        >''<          >%N INVALID REDUNDANT<
>%O<        >2**32-1<     >37777777777<    >Synonym for %lo<
>%P<        >''<          >%P INVALID REDUNDANT<
>%Q<        >''<          >%Q INVALID REDUNDANT<
>%R<        >''<          >%R INVALID REDUNDANT<
>%S<        >''<          >%S INVALID REDUNDANT<
>%T<        >''<          >%T INVALID REDUNDANT<
>%U<        >2**32-1<     >4294967295<     >Synonym for %lu<
>%V<        >''<          >%V INVALID REDUNDANT<
>%W<        >''<          >%W INVALID REDUNDANT<
>%X<        >2**32-1<     >FFFFFFFF<       >Like %x, but with u/c letters<
>%#X<       >2**32-1<     >0XFFFFFFFF<
>%Y<        >''<          >%Y INVALID REDUNDANT<
>%Z<        >''<          >%Z INVALID REDUNDANT<
>%a<        >0<           ><	 >%a tested in sprintf2.t skip: all<
>%b<        >2**32-1<     >11111111111111111111111111111111<
>%+b<       >2**32-1<     >11111111111111111111111111111111<
>%#b<       >2**32-1<     >0b11111111111111111111111111111111<
>%34b<      >2**32-1<     >  11111111111111111111111111111111<
>%034b<     >2**32-1<     >0011111111111111111111111111111111<
>%-34b<     >2**32-1<     >11111111111111111111111111111111  <
>%-034b<    >2**32-1<     >11111111111111111111111111111111  <
>%6b<       >12<          >  1100<
>%6.5b<     >12<          > 01100<
>%-6.5b<    >12<          >01100 <
>%+6.5b<    >12<          > 01100<
>% 6.5b<    >12<          > 01100<
>%06.5b<    >12<          > 01100<         >0 flag with precision: no effect<
>%.5b<      >12<          >01100<
>%.0b<      >0<           ><
>%+.0b<     >0<           ><
>% .0b<     >0<           ><
>%-.0b<     >0<           ><
>%#.0b<     >0<           ><
>%#3.0b<    >0<           >   <
>%#3.1b<    >0<           >  0<
>%#3.2b<    >0<           > 00<
>%#3.3b<    >0<           >000<
>%#3.4b<    >0<           >0000<
>%.0b<      >1<           >1<
>%+.0b<     >1<           >1<
>% .0b<     >1<           >1<
>%-.0b<     >1<           >1<
>%#.0b<     >1<           >0b1<
>%#3.0b<    >1<           >0b1<
>%#3.1b<    >1<           >0b1<
>%#3.2b<    >1<           >0b01<
>%#3.3b<    >1<           >0b001<
>%#3.4b<    >1<           >0b0001<
>%c<        >ord('A')<    >A<
>%10c<      >ord('A')<    >         A<
>%#10c<     >ord('A')<    >         A<     ># modifier: no effect<
>%010c<     >ord('A')<    >000000000A<
>%10lc<     >ord('A')<    >         A<     >l modifier: no effect<
>%10hc<     >ord('A')<    >         A<     >h modifier: no effect<
>%10.5c<    >ord('A')<    >         A<     >precision: no effect<
>%-10c<     >ord('A')<    >A         <
>%d<        >123456.789<  >123456<
>%d<        >-123456.789< >-123456<
>%d<        >0<           >0<
>%-d<       >0<           >0<
>%+d<       >0<           >+0<
>% d<       >0<           > 0<
>%0d<       >0<           >0<
>%-3d<      >1<           >1  <
>%+3d<      >1<           > +1<
>% 3d<      >1<           >  1<
>%03d<      >1<           >001<
>%+ 3d<     >1<           > +1<
>% +3d<     >1<           > +1<
>%.0d<      >0<           ><
>%+.0d<     >0<           >+<
>% .0d<     >0<           > <
>%-.0d<     >0<           ><
>%#.0d<     >0<           ><
>%.0d<      >1<           >1<
>%d<        >1<           >1<
>%+d<       >1<           >+1<
>%#3.2d<    >1<           > 01<            ># modifier: no effect<
>%3.2d<     >1<           > 01<
>%03.2d<    >1<           > 01<            >0 flag with precision: no effect<
>%-3.2d<    >1<           >01 <
>%+3.2d<    >1<           >+01<
>% 3.2d<    >1<           > 01<
>%-03.2d<   >1<           >01 <            >zero pad + left just.: no effect<
>%3.*d<     >[2,1]<       > 01<
>%3.*d<     >[1,1]<       >  1<
>%3.*d<     >[0,1]<       >  1<
>%3.*d<     >[-1,1]<      >  1<
>%.*d<      >[0,0]<       ><
>%-.*d<     >[0,0]<       ><
>%+.*d<     >[0,0]<       >+<
>% .*d<     >[0,0]<       > <
>%0.*d<     >[0,0]<       ><
>%.*d<      >[-2,0]<      >0<
>%-.*d<     >[-2,0]<      >0<
>%+.*d<     >[-2,0]<      >+0<
>% .*d<     >[-2,0]<      > 0<
>%0.*d<     >[-2,0]<      >0<
>%.*2$d<    >[5,3]<       >005<           >reordered precision arg<
>%4.*2$d<   >[5,3]<       > 005<          >width with reordered precision<
>%*3$.*2$d< >[5,3,4]<     > 005<          >reordered width with reordered precision<
>%3$*2$.*1$d< >[3,4,5]<   > 005<          >reordered param, width, precision<
>%*1$.*f<   >[4, 5, 10]<  >5.0000<        >perl #125956: reordered param, width, precision, floating point<
>%d<        >-1<          >-1<
>%-d<       >-1<          >-1<
>%+d<       >-1<          >-1<
>% d<       >-1<          >-1<
>%-3d<      >-1<          >-1 <
>%+3d<      >-1<          > -1<
>% 3d<      >-1<          > -1<
>%03d<      >-1<          >-01<
>%hd<       >1<           >1<              >More extensive testing of<
>%hhd<      >1<           >1<              >length modifiers would be<
>%ld<       >1<           >1<              >platform-specific<
>%Vd<       >1<           >1<
>%zd<       >1<           >1<
>%td<       >1<           >1<
>%vd<       >chr(1)<      >1<
>%+vd<      >chr(1)<      >+1<
>%#vd<      >chr(1)<      >1<
>%vd<       >"\01\02\03"< >1.2.3<
>%vd<       >v1.2.3<      >1.2.3<
>%vd<       >[version::qv("1.2.3")]< >1.2.3<
>%vd<       >[version->new("1.2")]< >1.2<
>%vd<       >[version->new("1.02")]< >1.2<
>%vd<       >[version->new("1.002")]< >1.2<
>%vd<       >[version->new("1048576.5")]< >1048576.5<
>%vd<       >[version->new("50")]< >50<
>%v.3d<     >"\01\02\03"< >001.002.003<
>%0v3d<     >"\01\02\03"< >001.002.003<
>%v.3d<     >[version::qv("1.2.3")]< >001.002.003<
>%-v3d<     >"\01\02\03"< >1  .2  .3  <
>%+-v3d<    >"\01\02\03"< >+1 .2  .3  <
>%+-v3d<    >[version::qv("1.2.3")]< >+1 .2  .3  <
>%v4.3d<    >"\01\02\03"< > 001. 002. 003<
>%0v4.3d<   >"\01\02\03"< > 001. 002. 003<
>%0*v2d<    >['-', "\0\7\14"]< >00-07-12<
>%v.*d<     >[3, "\01\02\03"]< >001.002.003< >cf perl #83194<
>%0v*d<     >[3, "\01\02\03"]< >001.002.003< >cf perl #83194<
>%-v*d<     >[3, "\01\02\03"]< >1  .2  .3  < >cf perl #83194<
>%+-v*d<    >[3, "\01\02\03"]< >+1 .2  .3  < >cf perl #83194<
>%v*.*d<    >[4, 3, "\01\02\03"]< > 001. 002. 003< >cf perl #83194<
>%0v*.*d<   >[4, 3, "\01\02\03"]< > 001. 002. 003< >cf perl #83194<
>%0*v*d<    >['-', 2, "\0\7\13"]< >00-07-11< >cf perl #83194<
>%0*v*d<    >['-', 2, version::qv("0.7.11")]< >00-07-11< >cf perl #83194<
>%e<        >1234.875<    >1.234875e+03<
>%e<        >0.000012345< >1.234500e-05<
>%e<        >1234567E96<  >1.234567e+102<
>%e<        >0<           >0.000000e+00<
>%e<        >.1234567E-101< >1.234567e-102<
>%+e<       >1234.875<    >+1.234875e+03<
>%#e<       >1234.875<    >1.234875e+03<
>%e<        >-1234.875<   >-1.234875e+03<
>%+e<       >-1234.875<   >-1.234875e+03<
>%#e<       >-1234.875<   >-1.234875e+03<
>%.0e<      >1234.875<    >1e+03<
>%#.0e<     >1234.875<    >1.e+03<
>%.0e<      >1.875<       >2e+00<
>%.0e<      >0.875<       >9e-01<
>%.*e<      >[0, 1234.875]< >1e+03<
>%.1e<      >1234.875<    >1.2e+03<
>%-12.4e<   >1234.875<    >1.2349e+03  <
>%12.4e<    >1234.875<    >  1.2349e+03<
>%+-12.4e<  >1234.875<    >+1.2349e+03 <
>%+12.4e<   >1234.875<    > +1.2349e+03<
>%+-12.4e<  >-1234.875<   >-1.2349e+03 <
>%+12.4e<   >-1234.875<   > -1.2349e+03<
>%e<        >1234567E96<  >1.234567e+102<	>exponent too big skip: os390<
>%e<        >.1234567E-101< >1.234567e-102<	>exponent too small skip: os390<
>%f<        >1234.875<    >1234.875000<
>%+f<       >1234.875<    >+1234.875000<
>%#f<       >1234.875<    >1234.875000<
>%f<        >-1234.875<   >-1234.875000<
>%+f<       >-1234.875<   >-1234.875000<
>%#f<       >-1234.875<   >-1234.875000<
>%6f<       >1234.875<    >1234.875000<
>%*f<       >[6, 1234.875]< >1234.875000<
>%.0f<      >-0.1<        >-0<  >C library bug: no minus skip: VMS<
>%.0f<      >1234.875<    >1235<
>%.1f<      >1234.875<    >1234.9<
>%-8.1f<    >1234.875<    >1234.9  <
>%8.1f<     >1234.875<    >  1234.9<
>%+-8.1f<   >1234.875<    >+1234.9 <
>%+8.1f<    >1234.875<    > +1234.9<
>%+-8.1f<   >-1234.875<   >-1234.9 <
>%+8.1f<    >-1234.875<   > -1234.9<
>%*.*f<     >[5, 2, 12.3456]< >12.35<
>%f<        >0<           >0.000000<
>%.0f<      >[]<          >0 MISSING<
> %.0f<     >[]<          > 0 MISSING<
>%.2f<      >[]<          >0.00 MISSING<
>%.2fC<      >[]<          >0.00C MISSING<
>%.0f<      >0<           >0<
>%.0f<      >2**38<       >274877906944<   >Should have exact int'l rep'n<
>%.0f<      >0.1<         >0<
>%.0f<      >0.6<         >1<              >Known to fail with (irix|nonstop-ux|powerux); -DHAS_LDBL_SPRINTF_BUG may fix<
>%.0f<      >-0.6<        >-1<             >Known to fail with (irix|nonstop-ux|powerux); -DHAS_LDBL_SPRINTF_BUG may fix<
>%.0f<      >1.6<         >2<
>%.0f<      >-1.6<        >-2<
>%.0f<      >1<           >1<
>%#.0f<     >1<           >1.<
>%.0lf<     >1<           >1<              >'l' should have no effect<
>%.0hf<     >1<           >%.0hf INVALID REDUNDANT<  >'h' should be rejected<
>%g<        >12345.6789<  >12345.7<
>%+g<       >12345.6789<  >+12345.7<
>%#g<       >12345.6789<  >12345.7<
>%.0g<      >[]<          >0 MISSING<
> %.0g<     >[]<          > 0 MISSING<
>%.2g<      >[]<          >0 MISSING<
>%.2gC<      >[]<          >0C MISSING<
>%.0g<      >-0.0<        >-0<		   >C99 standard mandates minus sign but C89 does not skip: MSWin32 VMS hpux:10.20 openbsd netbsd:1.5 irix darwin freebsd:4.9 android<
>%.0g<      >12345.6789<  >1e+04<
>%#.0g<     >12345.6789<  >1.e+04<
>%.2g<      >12345.6789<  >1.2e+04<
>%.*g<      >[2, 12345.6789]< >1.2e+04<
>%.9g<      >12345.6789<  >12345.6789<
>%12.9g<    >12345.6789<  >  12345.6789<
>%012.9g<   >12345.6789<  >0012345.6789<
>%-12.9g<   >12345.6789<  >12345.6789  <
>%*.*g<     >[-12, 9, 12345.6789]< >12345.6789  <
>%-012.9g<  >12345.6789<  >12345.6789  <
>%g<        >-12345.6789< >-12345.7<
>%+g<       >-12345.6789< >-12345.7<
>%g<        >1234567.89<  >1.23457e+06<
>%+g<       >1234567.89<  >+1.23457e+06<
>%#g<       >1234567.89<  >1.23457e+06<
>%g<        >-1234567.89< >-1.23457e+06<
>%+g<       >-1234567.89< >-1.23457e+06<
>%#g<       >-1234567.89< >-1.23457e+06<
>%g<        >0.00012345<  >0.00012345<
>%g<        >0.000012345< >1.2345e-05<
>%g<        >1234567E96<  >1.23457e+102<
>%g<        >.1234567E-101< >1.23457e-102<
>%g<        >0<           >0<
>%13g<      >1234567.89<  >  1.23457e+06<
>%+13g<     >1234567.89<  > +1.23457e+06<
>%013g<     >1234567.89<  >001.23457e+06<
>%-13g<     >1234567.89<  >1.23457e+06  <
>%g<        >.1234567E-101< >1.23457e-102<	>exponent too small skip: os390<
>%g<        >1234567E96<  >1.23457e+102<	>exponent too big skip: os390<
>%h<        >''<          >%h INVALID REDUNDANT<
>%i<        >123456.789<  >123456<         >Synonym for %d<
>%j<        >''<          >%j INVALID REDUNDANT<
>%k<        >''<          >%k INVALID REDUNDANT<
>%l<        >''<          >%l INVALID REDUNDANT<
>%m<        >''<          >%m INVALID REDUNDANT<
>%s< >sprintf('%%n%n %d', $n, $n)< >%n 2< >Slight sneakiness to test %n<
>%s< >$n="abc"; sprintf(' %n%s', substr($n,1,1), $n)< > a1c< >%n w/magic<
>%s< >no warnings; sprintf('%s%n', chr(256)x5, $n),$n< >5< >Unicode %n<
>%o<        >2**32-1<     >37777777777<
>%+o<       >2**32-1<     >37777777777<
>%#o<       >2**32-1<     >037777777777<
>%o<        >642<         >1202<          >check smaller octals across platforms<
>%+o<       >642<         >1202<
>% o<       >642<         >1202<
>%#o<       >642<         >01202<
>%4o<       >18<          >  22<
>%4.3o<     >18<          > 022<
>%-4.3o<    >18<          >022 <
>%+4.3o<    >18<          > 022<
>% 4.3o<    >18<          > 022<
>%04.3o<    >18<          > 022<          >0 flag with precision: no effect<
>%4.o<      >36<          >  44<
>%-4.o<     >36<          >44  <
>%+4.o<     >36<          >  44<
>% 4.o<     >36<          >  44<
>%04.o<     >36<          >  44<          >0 flag with precision: no effect<
>%.3o<      >18<          >022<
>%.0o<      >0<           ><
>%+.0o<     >0<           ><
>% .0o<     >0<           ><
>%-.0o<     >0<           ><
>%#.0o<     >0<           >0<
>%#3.0o<    >0<           >  0<
>%#3.1o<    >0<           >  0<
>%#3.2o<    >0<           > 00<
>%#3.3o<    >0<           >000<
>%#3.4o<    >0<           >0000<
>%.0o<      >1<           >1<
>%+.0o<     >1<           >1<
>% .0o<     >1<           >1<
>%-.0o<     >1<           >1<
>%#.0o<     >1<           >01<
>%#3.0o<    >1<           > 01<
>%#3.1o<    >1<           > 01<
>%#3.2o<    >1<           > 01<
>%#3.3o<    >1<           >001<
>%#3.4o<    >1<           >0001<
>%#.5o<     >012345<      >012345<
>%#.5o<     >012<         >00012<
>%#4o<      >17<          > 021<
>%#-4o<     >17<          >021 <
>%-#4o<     >17<          >021 <
>%#+4o<     >17<          > 021<
>%# 4o<     >17<          > 021<
>%#04o<     >17<          >0021<
>%#4.o<     >16<          > 020<
>%#-4.o<    >16<          >020 <
>%-#4.o<    >16<          >020 <
>%#+4.o<    >16<          > 020<
>%# 4.o<    >16<          > 020<
>%#04.o<    >16<          > 020<          >0 flag with precision: no effect<
>%#4.3o<    >18<          > 022<
>%#-4.3o<   >18<          >022 <
>%-#4.3o<   >18<          >022 <
>%#+4.3o<   >18<          > 022<
>%# 4.3o<   >18<          > 022<
>%#04.3o<   >18<          > 022<          >0 flag with precision: no effect<
>%#6.4o<    >18<          >  0022<
>%#-6.4o<   >18<          >0022  <
>%-#6.4o<   >18<          >0022  <
>%#+6.4o<   >18<          >  0022<
>%# 6.4o<   >18<          >  0022<
>%#06.4o<   >18<          >  0022<        >0 flag with precision: no effect<
>%d< >$p=sprintf('%p',$p);$p=~/^[0-9a-f]+$/< >1< >Coarse hack: hex from %p?<
>%d< >$p=sprintf('%-8p',$p);$p=~/^[0-9a-f]+\s*$/< >1< >Coarse hack: hex from %p?<
>%#p<       >''<          >%#p INVALID REDUNDANT<
>%q<        >''<          >%q INVALID REDUNDANT<
>%r<        >''<          >%r INVALID REDUNDANT<
>%s<        >[]<          > MISSING<
> %s<       >[]<          >  MISSING<
>%s<        >'string'<    >string<
>%10s<      >'string'<    >    string<
>%+10s<     >'string'<    >    string<
>%#10s<     >'string'<    >    string<
>%010s<     >'string'<    >0000string<
>%0*s<      >[10, 'string']< >0000string<
>%-10s<     >'string'<    >string    <
>%3s<       >'string'<    >string<
>%.3s<      >'string'<    >str<
>%.*s<      >[3, 'string']< >str<
>%.*s<      >[2, 'string']< >st<
>%.*s<      >[1, 'string']< >s<
>%.*s<      >[0, 'string']< ><
>%.*s<      >[-1,'string']< >string<  >negative precision to be ignored<
>%3.*s<     >[3, 'string']< >str<
>%3.*s<     >[2, 'string']< > st<
>%3.*s<     >[1, 'string']< >  s<
>%3.*s<     >[0, 'string']< >   <
>%3.*s<     >[-1,'string']< >string<  >negative precision to be ignored<
>%t<        >''<          >%t INVALID REDUNDANT<
>%u<        >2**32-1<     >4294967295<
>%+u<       >2**32-1<     >4294967295<
>%#u<       >2**32-1<     >4294967295<
>%12u<      >2**32-1<     >  4294967295<
>%012u<     >2**32-1<     >004294967295<
>%-12u<     >2**32-1<     >4294967295  <
>%-012u<    >2**32-1<     >4294967295  <
>%4u<       >18<          >  18<
>%4.3u<     >18<          > 018<
>%-4.3u<    >18<          >018 <
>%+4.3u<    >18<          > 018<
>% 4.3u<    >18<          > 018<
>%04.3u<    >18<          > 018<         >0 flag with precision: no effect<
>%.3u<      >18<          >018<
>%v<        >''<          >%v INVALID REDUNDANT<
>%w<        >''<          >%w INVALID REDUNDANT<
>%x<        >2**32-1<     >ffffffff<
>%+x<       >2**32-1<     >ffffffff<
>%#x<       >2**32-1<     >0xffffffff<
>%10x<      >2**32-1<     >  ffffffff<
>%010x<     >2**32-1<     >00ffffffff<
>%-10x<     >2**32-1<     >ffffffff  <
>%-010x<    >2**32-1<     >ffffffff  <
>%0-10x<    >2**32-1<     >ffffffff  <
>%4x<       >18<          >  12<
>%4.3x<     >18<          > 012<
>%-4.3x<    >18<          >012 <
>%+4.3x<    >18<          > 012<
>% 4.3x<    >18<          > 012<
>%04.3x<    >18<          > 012<         >0 flag with precision: no effect<
>%.3x<      >18<          >012<
>%4X<       >28<          >  1C<
>%4.3X<     >28<          > 01C<
>%-4.3X<    >28<          >01C <
>%+4.3X<    >28<          > 01C<
>% 4.3X<    >28<          > 01C<
>%04.3X<    >28<          > 01C<         >0 flag with precision: no effect<
>%.3X<      >28<          >01C<
>%.0x<      >0<           ><
>%+.0x<     >0<           ><
>% .0x<     >0<           ><
>%-.0x<     >0<           ><
>%#.0x<     >0<           ><
>%#3.0x<    >0<           >   <
>%#3.1x<    >0<           >  0<
>%#3.2x<    >0<           > 00<
>%#3.3x<    >0<           >000<
>%#3.4x<    >0<           >0000<
>%.0x<      >1<           >1<
>%+.0x<     >1<           >1<
>% .0x<     >1<           >1<
>%-.0x<     >1<           >1<
>%#.0x<     >1<           >0x1<
>%#3.0x<    >1<           >0x1<
>%#3.1x<    >1<           >0x1<
>%#3.2x<    >1<           >0x01<
>%#3.3x<    >1<           >0x001<
>%#3.4x<    >1<           >0x0001<
>%#.5x<     >0x12345<     >0x12345<
>%#.5x<     >0x12<        >0x00012<
>%#4x<      >28<          >0x1c<
>%#4.3x<    >28<          >0x01c<
>%#-4.3x<   >28<          >0x01c<
>%#+4.3x<   >28<          >0x01c<
>%# 4.3x<   >28<          >0x01c<
>%#04.3x<   >28<          >0x01c<         >0 flag with precision: no effect<
>%#.3x<     >28<          >0x01c<
>%#6.3x<    >28<          > 0x01c<
>%#-6.3x<   >28<          >0x01c <
>%-#6.3x<   >28<          >0x01c <
>%#+6.3x<   >28<          > 0x01c<
>%+#6.3x<   >28<          > 0x01c<
>%# 6.3x<   >28<          > 0x01c<
>% #6.3x<   >28<          > 0x01c<
>%0*x<      >[-10, ,2**32-1]< >ffffffff  <
>%vx<       >[version::qv("1.2.3")]< >1.2.3<
>%vx<       >[version::qv("1.20.300")]< >1.14.12c<
>%.*x<      >[0,0]<       ><
>%-.*x<     >[0,0]<       ><
>%+.*x<     >[0,0]<       ><
>% .*x<     >[0,0]<       ><
>%0.*x<     >[0,0]<       ><
>%.*x<      >[-3,0]<      >0<
>%-.*x<     >[-3,0]<      >0<
>%+.*x<     >[-3,0]<      >0<
>% .*x<     >[-3,0]<      >0<
>%0.*x<     >[-3,0]<      >0<
>%#.*x<     >[0,0]<       ><
>%#-.*x<    >[0,0]<       ><
>%#+.*x<    >[0,0]<       ><
>%# .*x<    >[0,0]<       ><
>%#0.*x<    >[0,0]<       ><
>%#.*x<     >[-1,0]<      >0<
>%#-.*x<    >[-1,0]<      >0<
>%#+.*x<    >[-1,0]<      >0<
>%# .*x<    >[-1,0]<      >0<
>%#0.*x<    >[-1,0]<      >0<
>%y<        >''<          >%y INVALID REDUNDANT<
>%z<        >''<          >%z INVALID REDUNDANT<
>%2$d %1$d<	>[12, 34]<	>34 12<
>%*2$d<		>[12, 3]<	> 12<             >RT#125469<
>%*3$d<		>[12, 9, 3]<	> 12<             >related to RT#125469<
>%2$d %d<	>[12, 34]<	>34 12<
>%2$d %d %d<	>[12, 34]<	>34 12 34<
>%3$d %d %d<	>[12, 34, 56]<	>56 12 34<
>%2$*3$d %d<	>[12, 34, 3]<	> 34 12<
>%*3$2$d %d<	>[12, 34, 3]<	>%*3$2$d 12 INVALID REDUNDANT<
>%2$d<		>12<	>0 MISSING<
>%0$d<		>12<	>%0$d INVALID REDUNDANT<
>%1$$d<		>12<	>%1$$d INVALID REDUNDANT<
>%1$1$d<	>12<	>%1$1$d INVALID REDUNDANT<
>%*2$*2$d<	>[12, 3]<	>%*2$*2$d INVALID REDUNDANT<
>%*2*2$d<	>[12, 3]<	>%*2*2$d INVALID REDUNDANT<
>%*2$1d<	>[12, 3]<	>%*2$1d INVALID REDUNDANT<
>%0v2.2d<	>''<	><
>%vc,%d<	>[63, 64, 65]<	>%vc,63 INVALID REDUNDANT<
>%v%,%d<	>[63, 64, 65]<	>%v%,63 INVALID REDUNDANT<
>%vd,%d<	>["\x1", 2, 3]<	>1,2 REDUNDANT<
>%vf,%d<	>[1, 2, 3]<	>%vf,1 INVALID REDUNDANT<
>%vF,%d<	>[1, 2, 3]<	>%vF,1 INVALID REDUNDANT<
>%ve,%d<	>[1, 2, 3]<	>%ve,1 INVALID REDUNDANT<
>%vE,%d<	>[1, 2, 3]<	>%vE,1 INVALID REDUNDANT<
>%vg,%d<	>[1, 2, 3]<	>%vg,1 INVALID REDUNDANT<
>%vG,%d<	>[1, 2, 3]<	>%vG,1 INVALID REDUNDANT<
>%vp<	>''<	>%vp INVALID REDUNDANT<
>%vn<	>''<	>%vn INVALID REDUNDANT<
>%vs,%d<	>[1, 2, 3]<	>%vs,1 INVALID REDUNDANT<
>%v_<	>''<	>%v_ INVALID REDUNDANT<
>%v#x<	>''<	>%v#x INVALID REDUNDANT<
>%v02x<	>"\x66\x6f\x6f\012"<	>66.6f.6f.0a<
>%#v.8b<	>"\141\000\142"<	>0b01100001.00000000.0b01100010<	>perl #39530<
>%#v.0o<	>"\001\000\002\000"<    >01.0.02.0<
>%#v.1o<	>"\001\000\002\000"<    >01.0.02.0<
>%#v.4o<	>"\141\000\142"<	>0141.0000.0142<	>perl #39530<
>%#v.3i<	>"\141\000\142"<	>097.000.098<	>perl #39530<
>%#v.0x<	>"\001\000\002\000"<    >0x1..0x2.<
>%#v.1x<	>"\001\000\002\000"<    >0x1.0.0x2.0<
>%#v.2x<	>"\141\000\142"<	>0x61.00.0x62<	>perl #39530<
>%#v.2X<	>"\141\000\142"<	>0X61.00.0X62<	>perl #39530<
>%#v.8b<	>"\141\017\142"<	>0b01100001.0b00001111.0b01100010<	>perl #39530<
>%#v.4o<	>"\141\017\142"<	>0141.0017.0142<	>perl #39530<
>%#v.3i<	>"\141\017\142"<	>097.015.098<	>perl #39530<
>%#v.2x<	>"\141\017\142"<	>0x61.0x0f.0x62<	>perl #39530<
>%#v.2X<	>"\141\017\142"<	>0X61.0X0F.0X62<	>perl #39530<
>%#*v.8b<	>["][", "\141\000\142"]<	>0b01100001][00000000][0b01100010<	>perl #39530<
>%#*v.4o<	>["][", "\141\000\142"]<	>0141][0000][0142<	>perl #39530<
>%#*v.3i<	>["][", "\141\000\142"]<	>097][000][098<	>perl #39530<
>%#*v.2x<	>["][", "\141\000\142"]<	>0x61][00][0x62<	>perl #39530<
>%#*v.2X<	>["][", "\141\000\142"]<	>0X61][00][0X62<	>perl #39530<
>%#*v.8b<	>["][", "\141\017\142"]<	>0b01100001][0b00001111][0b01100010<	>perl #39530<
>%#*v.4o<	>["][", "\141\017\142"]<	>0141][0017][0142<	>perl #39530<
>%#*v.3i<	>["][", "\141\017\142"]<	>097][015][098<	>perl #39530<
>%#*v.2x<	>["][", "\141\017\142"]<	>0x61][0x0f][0x62<	>perl #39530<
>%#*v.2X<	>["][", "\141\017\142"]<	>0X61][0X0F][0X62<	>perl #39530<
>%#v.8b<	>"\141\x{1e01}\000\142\x{1e03}"<	>0b01100001.0b1111000000001.00000000.0b01100010.0b1111000000011<	>perl #39530<
>%#v.4o<	>"\141\x{1e01}\000\142\x{1e03}"<	>0141.017001.0000.0142.017003<	>perl #39530<
>%#v.3i<	>"\141\x{1e01}\000\142\x{1e03}"<	>097.7681.000.098.7683<	>perl #39530<
>%#v.2x<	>"\141\x{1e01}\000\142\x{1e03}"<	>0x61.0x1e01.00.0x62.0x1e03<	>perl #39530<
>%#v.2X<	>"\141\x{1e01}\000\142\x{1e03}"<	>0X61.0X1E01.00.0X62.0X1E03<	>perl #39530<
>%#v.8b<	>"\141\x{1e01}\017\142\x{1e03}"<	>0b01100001.0b1111000000001.0b00001111.0b01100010.0b1111000000011<	>perl #39530<
>%#v.4o<	>"\141\x{1e01}\017\142\x{1e03}"<	>0141.017001.0017.0142.017003<	>perl #39530<
>%#v.3i<	>"\141\x{1e01}\017\142\x{1e03}"<	>097.7681.015.098.7683<	>perl #39530<
>%#v.2x<	>"\141\x{1e01}\017\142\x{1e03}"<	>0x61.0x1e01.0x0f.0x62.0x1e03<	>perl #39530<
>%#v.2X<	>"\141\x{1e01}\017\142\x{1e03}"<	>0X61.0X1E01.0X0F.0X62.0X1E03<	>perl #39530<
>%V-%s<		>["Hello"]<	>%V-Hello INVALID<
>%K %d %d<	>[13, 29]<	>%K 13 29 INVALID<
>%*.*K %d<	>[13, 29, 76]<	>%*.*K 13 INVALID REDUNDANT<
>%4$K %d<	>[45, 67]<	>%4$K 45 INVALID REDUNDANT<
>%d %K %d<	>[23, 45]<	>23 %K 45 INVALID<
>%*v*999\$d %d %d<	>[11, 22, 33]<	>%*v*999\$d 11 22 INVALID REDUNDANT<
>%#b<		>0<	>0<
>%#o<		>0<	>0<
>%#x<		>0<	>0<
>%2147483647$v2d<	>''<	><
>%*2147483647$v2d<	>''<	> MISSING<
>%.3X<		>[11]<			>00B<		>perl #83194: hex, zero-padded to 3 places<
>%.*X<		>[3, 11]<		>00B<		>perl #83194: dynamic precision<
a>%vX<		>['012']<		>30.31.32<	>perl #83194: vector flag<
e>%vX<		>['012']<		>F0.F1.F2<	>perl #83194: vector flag<
a>%*vX<		>[':', '012']<		>30:31:32<	>perl #83194: vector flag + custom separator<
e>%*vX<		>[':', '012']<		>F0:F1:F2<	>perl #83194: vector flag + custom separator<
a>%v.3X<		>['012']<		>030.031.032<	>perl #83194: vector flag + static precision<
e>%v.3X<		>['012']<		>0F0.0F1.0F2<	>perl #83194: vector flag + static precision<
a>%v.*X<		>[3, '012']<		>030.031.032<	>perl #83194: vector flag + dynamic precision<
e>%v.*X<		>[3, '012']<		>0F0.0F1.0F2<	>perl #83194: vector flag + dynamic precision<
a>%*v.3X<	>[':', '012']<		>030:031:032<	>perl #83194: vector flag + custom separator + static precision<
e>%*v.3X<	>[':', '012']<		>0F0:0F1:0F2<	>perl #83194: vector flag + custom separator + static precision<
a>%*v.*X<	>[':', 3, '012']<	>030:031:032<	>perl #83194: vector flag + custom separator + dynamic precision<
e>%*v.*X<	>[':', 3, '012']<	>0F0:0F1:0F2<	>perl #83194: vector flag + custom separator + dynamic precision<
a>%vd<	>"version"<	>118.101.114.115.105.111.110<	>perl #102586: vector flag + "version"<
e>%vd<   >"version"<    >165.133.153.162.137.150.149<   >perl #102586: vector flag + "version"<
>%3$*4$v*2$.*1$x<  >[3, 4, "\x11\x22\x33", "/"]< > 011/ 022/ 033< >four reordered args<
@


1.15
log
@Fix merge conflicts, remove extra files, match upstream perl-5.20.1

ok deraadt@@ sthen@@ espie@@ miod@@
@
text
@d13 1
a13 1
    @@INC = '../lib';
d35 3
d39 8
a46 1
    s/^\s*>//; s/<\s*$//;
d78 2
d129 1
a129 1
        ok(1, ">$result<");
d189 4
a192 4
>%6. 6s<    >''<          >%6. 6s INVALID< >(See use of $w in code above)<
>%6 .6s<    >''<          >%6 .6s INVALID<
>%6.6 s<    >''<          >%6.6 s INVALID<
>%A<        >''<          >%A INVALID<
d196 1
a196 1
>%C<        >''<          >%C INVALID<
d206 7
a212 7
>%H<        >''<          >%H INVALID<
>%I<        >''<          >%I INVALID<
>%J<        >''<          >%J INVALID<
>%K<        >''<          >%K INVALID<
>%L<        >''<          >%L INVALID<
>%M<        >''<          >%M INVALID<
>%N<        >''<          >%N INVALID<
d214 5
a218 5
>%P<        >''<          >%P INVALID<
>%Q<        >''<          >%Q INVALID<
>%R<        >''<          >%R INVALID<
>%S<        >''<          >%S INVALID<
>%T<        >''<          >%T INVALID<
d220 2
a221 2
>%V<        >''<          >%V INVALID<
>%W<        >''<          >%W INVALID<
d224 3
a226 3
>%Y<        >''<          >%Y INVALID<
>%Z<        >''<          >%Z INVALID<
>%a<        >''<          >%a INVALID<
d311 5
a340 1
>[%vd]<     >[version->new(v1.1_1)]< >[] ALPHA<
d415 1
a415 1
>%.0hf<     >1<           >%.0hf INVALID<  >'h' should be rejected<
d453 1
a453 1
>%h<        >''<          >%h INVALID<
d455 4
a458 4
>%j<        >''<          >%j INVALID<
>%k<        >''<          >%k INVALID<
>%l<        >''<          >%l INVALID<
>%m<        >''<          >%m INVALID<
d529 3
a531 3
>%#p<       >''<          >%#p INVALID<
>%q<        >''<          >%q INVALID<
>%r<        >''<          >%r INVALID<
d553 1
a553 1
>%t<        >''<          >%t INVALID<
d568 2
a569 2
>%v<        >''<          >%v INVALID<
>%w<        >''<          >%w INVALID<
d651 2
a652 2
>%y<        >''<          >%y INVALID<
>%z<        >''<          >%z INVALID<
d654 2
a655 1
>%*2$d<		>[12, 3]<	> 12<
d660 1
a660 1
>%*3$2$d %d<	>[12, 34, 3]<	>%*3$2$d 12 INVALID<
d662 6
a667 6
>%0$d<		>12<	>%0$d INVALID<
>%1$$d<		>12<	>%1$$d INVALID<
>%1$1$d<	>12<	>%1$1$d INVALID<
>%*2$*2$d<	>[12, 3]<	>%*2$*2$d INVALID<
>%*2*2$d<	>[12, 3]<	>%*2*2$d INVALID<
>%*2$1d<	>[12, 3]<	>%*2$1d INVALID<
d669 14
a682 14
>%vc,%d<	>[63, 64, 65]<	>%vc,63 INVALID<
>%v%,%d<	>[63, 64, 65]<	>%v%,63 INVALID<
>%vd,%d<	>["\x1", 2, 3]<	>1,2<
>%vf,%d<	>[1, 2, 3]<	>%vf,1 INVALID<
>%vF,%d<	>[1, 2, 3]<	>%vF,1 INVALID<
>%ve,%d<	>[1, 2, 3]<	>%ve,1 INVALID<
>%vE,%d<	>[1, 2, 3]<	>%vE,1 INVALID<
>%vg,%d<	>[1, 2, 3]<	>%vg,1 INVALID<
>%vG,%d<	>[1, 2, 3]<	>%vG,1 INVALID<
>%vp<	>''<	>%vp INVALID<
>%vn<	>''<	>%vn INVALID<
>%vs,%d<	>[1, 2, 3]<	>%vs,1 INVALID<
>%v_<	>''<	>%v_ INVALID<
>%v#x<	>''<	>%v#x INVALID<
d720 2
a721 2
>%*.*K %d<	>[13, 29, 76]<	>%*.*K 13 INVALID<
>%4$K %d<	>[45, 67]<	>%4$K 45 MISSING INVALID<
d723 1
a723 1
>%*v*999\$d %d %d<	>[11, 22, 33]<	>%*v*999\$d 11 22 INVALID<
d731 15
a745 7
>%vX<		>['012']<		>30.31.32<	>perl #83194: vector flag<
>%*vX<		>[':', '012']<		>30:31:32<	>perl #83194: vector flag + custom separator<
>%v.3X<		>['012']<		>030.031.032<	>perl #83194: vector flag + static precision<
>%v.*X<		>[3, '012']<		>030.031.032<	>perl #83194: vector flag + dynamic precision<
>%*v.3X<	>[':', '012']<		>030:031:032<	>perl #83194: vector flag + custom separator + static precision<
>%*v.*X<	>[':', 3, '012']<	>030:031:032<	>perl #83194: vector flag + custom separator + dynamic precision<
>%vd<	>"version"<	>118.101.114.115.105.111.110<	>perl #102586: vector flag + "version"<
@


1.14
log
@Merge perl-5.18.2 plus local patches, remove old files

OK espie@@ sthen@@ deraadt@@
@
text
@d392 2
a393 2
>%.0f<      >0.6<         >1<              >Known to fail with sfio, (irix|nonstop-ux|powerux); -DHAS_LDBL_SPRINTF_BUG may fix<
>%.0f<      >-0.6<        >-1<             >Known to fail with sfio, (irix|nonstop-ux|powerux); -DHAS_LDBL_SPRINTF_BUG may fix<
d407 1
a407 1
>%.0g<      >-0.0<        >-0<		   >C99 standard mandates minus sign but C89 does not skip: MSWin32 VMS hpux:10.20 openbsd netbsd:1.5 irix darwin freebsd:4.9<
@


1.13
log
@merge/resolve conflicts
(some more to do after this one)
@
text
@d9 2
d19 1
d22 1
a22 1
my ($i, $template, $data, $result, $comment, $w, $x, $evalData, $n, $p);
d47 1
a47 1
	# AXP is unaffected whether or not it's using ieee.
d59 1
a59 1
print '1..', scalar @@tests, "\n";
d68 2
d75 2
a76 2
for ($i = 1; @@tests; $i++) {
    ($template, $evalData, $result, $comment, $data) = @@{shift @@tests};
d109 1
a109 1
	    # compares don't like 2.6.10-3mdksmp or 2.6.8-24.10-default
d117 1
a117 1
        print "ok $i\n";
d120 1
a120 1
	print "ok $i # skip $comment\n";
d124 1
a124 1
		print("ok $i # >$result< $x three-digit exponent accepted\n");
d128 1
a128 1
		   # which can't handle such magnitudes (or where we can't tell).
d132 2
a133 2
		print("ok $i # >$template< >$data< >$result<",
			  " Suppressed: exponent out of range?\n");
d136 2
a137 3
	$y = ($x eq $y ? "" : " => $y");
	print("not ok $i >$template< >$data< >$result< $x$y",
	    $comment ? " # $comment\n" : "\n");
d324 1
d407 1
a407 1
>%.0g<      >-0.0<        >-0<		   >C99 standard mandates minus sign but C89 does not skip: MSWin32 VMS hpux:10.20 openbsd netbsd:1.5 irix darwin<
@


1.12
log
@merge in perl 5.12.2 plus local changes
@
text
@d60 1
a60 1
	$w = ' INVALID';
d62 1
a62 1
	$w = ' UNINIT';
d64 1
a64 1
	$w = ' MISSING';
d73 2
a74 1
    $x = sprintf(">$template<", @@$evalData);
d304 5
a308 2
>%ld<       >1<           >1<              >length modifiers would be<
>%Vd<       >1<           >1<              >platform-specific<
d329 8
a336 8
>%v.*d<     >["\01\02\03", 3]< >001.002.003<
>%0v*d<     >["\01\02\03", 3]< >001.002.003<
>%-v*d<     >["\01\02\03", 3]< >1  .2  .3  <
>%+-v*d<    >["\01\02\03", 3]< >+1 .2  .3  <
>%v*.*d<    >["\01\02\03", 4, 3]< > 001. 002. 003<
>%0v*.*d<   >["\01\02\03", 4, 3]< > 001. 002. 003<
>%0*v*d<    >['-', "\0\7\13", 2]< >00-07-11<
>%0*v*d<    >['-', version::qv("0.7.11"), 2]< >00-07-11<
d380 4
d398 5
a402 1
>%.0g<      >-0.0<	  >-0<		   >C99 standard mandates minus sign but C89 does not skip: MSWin32 VMS hpux:10.20 openbsd netbsd:1.5 irix darwin<
d439 2
d511 2
d699 1
a699 1
>%4$K %d<	>[45, 67]<	>%4$K 45 INVALID<
d707 9
@


1.11
log
@Merge in perl 5.10.1; part two
@
text
@d63 2
d623 1
a623 1
>%2$d<		>12<	>0 UNINIT<
d690 1
a690 1
>%*2147483647$v2d<	>''<	> UNINIT<
@


1.10
log
@fix conflicts and merge in local changes to perl 5.10.0
@
text
@d52 2
a53 2
    $data = ref $evalData ? $evalData : [$evalData];
    push @@tests, [$template, $data, $result, $comment];
d69 1
a69 1
    ($template, $data, $result, $comment) = @@{shift @@tests};
d71 1
a71 1
    $x = sprintf(">$template<", @@$data);
@


1.9
log
@merge in perl 5.8.8
@
text
@d14 1
d174 3
a176 1
>%B<        >''<          >%B INVALID<
d215 27
d253 1
d255 1
d257 6
d265 3
d273 1
a273 1
>%03.2d<    >1<           >001<
d275 2
d278 14
d293 1
d295 5
d307 7
d316 1
d319 1
d321 1
a321 1
>%0v4.3d<   >"\01\02\03"< >0001.0002.0003<
d328 1
a328 1
>%0v*.*d<   >["\01\02\03", 4, 3]< >0001.0002.0003<
d330 1
d388 1
a388 1
>%.0g<      >-0.0<	  >-0<		   >C99 standard mandates minus sign but C89 does not skip: MSWin32 VMS hpux:10.20 openbsd netbsd:1.5 irix<
d430 1
d432 58
d505 9
d522 7
d539 50
d590 22
d629 9
a637 3
>%vc,%d<	>[63, 64, 65]<	>?,64<
>%vd,%d<	>[1, 2, 3]<	>49,2<
>%vf,%d<	>[1, 2, 3]<	>1.000000,2<
d639 2
a640 1
>%vs,%d<	>[1, 2, 3]<	>1,2<
d643 35
a677 1
>%v02x<	>"foo\012"<	>66.6f.6f.0a<
d687 2
a688 2
>%2918905856$v2d<	>''<	><
>%*2918905856$v2d<	>''<	> UNINIT<
@


1.8
log
@The official fix for the Perl sprintf buffer overflow.

ok millert@@
@
text
@d12 1
a12 1
}   
d14 2
a15 2
# we do not load %Config since this test resides in op and needs
# to run under the minitest target even without Config.pm working.
a16 1
# strictness
a19 17
while (<DATA>) {
    s/^\s*>//; s/<\s*$//;
    push @@tests, [split(/<\s*>/, $_, 4)]; 
}

print '1..', scalar @@tests, "\n";

$SIG{__WARN__} = sub {
    if ($_[0] =~ /^Invalid conversion/) {
	$w = ' INVALID';
    } elsif ($_[0] =~ /^Use of uninitialized value/) {
	$w = ' UNINIT';
    } else {
	warn @@_;
    }
};

d31 3
a33 2
for ($i = 1; @@tests; $i++) {
    ($template, $data, $result, $comment) = @@{shift @@tests};
d41 1
a41 1
	# VAX DEC C 5.3 at least since there is no 
d49 1
d51 18
d70 1
a70 2
    $x = sprintf(">$template<",
                 defined @@$evalData ? @@$evalData : $evalData);
d89 18
d110 3
d124 1
a124 1
			  " Suppressed: exponent out of range?\n") 
d144 10
a159 1
>%.0f<      >-0.1<        >-0<  >C library bug: no minus on VMS, HP-UX<
a161 6
>%G<        >1234567e96<  >1.23457E+102<	>exponent too big for OS/390<
>%G<        >.1234567e-101< >1.23457E-102<	>exponent too small for OS/390<
>%e<        >1234567E96<  >1.234567e+102<	>exponent too big for OS/390<
>%e<        >.1234567E-101< >1.234567e-102<	>exponent too small for OS/390<
>%g<        >.1234567E-101< >1.23457e-102<	>exponent too small for OS/390<
>%g<        >1234567E96<  >1.23457e+102<	>exponent too big for OS/390<
d182 2
d280 2
d290 1
d315 1
d341 4
a344 2
>%013g<      >1234567.89< >001.23457e+06<
>%-13g<      >1234567.89< >1.23457e+06  <
d359 1
d407 1
@


1.7
log
@Resolve conflicts for perl 5.8.2, remove old files, and add OpenBSD-specific scaffolding
@
text
@d388 5
@


1.6
log
@Resolve conflicts, remove old files, merge local changes
@
text
@d46 3
d57 4
a60 3
    if ($Is_VMS_VAX) { # VAX DEC C 5.3 at least since there is no 
                       # ccflags =~ /float=ieee/ on VAX.
                       # AXP is unaffected whether or not it's using ieee.
d111 1
a111 1
# In each of the the following lines, there are three required fields:
d243 2
d274 4
a277 2
>%.0f<      >0.6<         >1<              >Known to fail with sfio and (irix|nonstop-ux|powerux)<
>%.0f<      >-0.6<        >-1<             >Known to fail with sfio and (irix|nonstop-ux|powerux)<
d280 2
d366 1
a366 1
>%*3$2$d %d<	>[12, 34, 3]<	>%*3$2$d 34 INVALID<
d380 8
@


1.5
log
@merge in perl 5.6.1 with our local changes
@
text
@d7 1
a7 1
# specific to multi-byte characters (under use utf8 and such).
d14 6
d30 3
a32 1
	$w = ' INVALID'
d38 8
d48 14
d127 6
d160 1
a160 1
>%O<        >2**32-1<     >37777777777<    >Synonum for %lo<
d166 1
a166 1
>%U<        >2**32-1<     >4294967295<     >Synonum for %lu<
d214 3
a216 3
>%v03d<     >"\01\02\03"< >001.002.003<
>%v-3d<     >"\01\02\03"< >1  .2  .3  <
>%v+-3d<    >"\01\02\03"< >+1 .2  .3  <
d218 9
a226 9
>%v04.3d<   >"\01\02\03"< >0001.0002.0003<
>%*v02d<    >['-', "\0\7\14"]< >00-07-12<
>%v.*d<     >[3, "\01\02\03"]< >001.002.003<
>%v0*d<     >[3, "\01\02\03"]< >001.002.003<
>%v-*d<     >[3, "\01\02\03"]< >1  .2  .3  <
>%v+-*d<    >[3, "\01\02\03"]< >+1 .2  .3  <
>%v*.*d<    >[4, 3, "\01\02\03"]< > 001. 002. 003<
>%v0*.*d<   >[4, 3, "\01\02\03"]< >0001.0002.0003<
>%*v0*d<    >['-', 2, "\0\7\13"]< >00-07-11<
d312 3
d350 20
@


1.4
log
@perl-5.6.0 + local changes
@
text
@d3 5
a7 1
# $RCSfile: sprintf.t,v $$Revision: 4.1 $$Date: 92/08/07 18:28:27 $
d11 1
a11 1
    unshift @@INC, '../lib';
d15 6
a20 1
print "1..4\n";
d24 1
a24 1
	$w++;
d30 23
a52 7
$w = 0;
$x = sprintf("%3s %-4s%%foo %.0d%5d %#x%c%3.1f %b %x %X %#b %#x %#X","hi",123,0,456,0,ord('A'),3.0999,11,171,171,11,171,171);
if ($x eq ' hi 123 %foo   456 0A3.1 1011 ab AB 0b1011 0xab 0XAB' && $w == 0) {
    print "ok 1\n";
} else {
    print "not ok 1 '$x'\n";
}
d54 20
a73 8
for $i (2 .. 4) {
    $f = ('%6 .6s', '%6. 6s', '%6.6 s')[$i - 2];
    $w = 0;
    $x = sprintf($f, '');
    if ($x eq $f && $w == 1) {
	print "ok $i\n";
    } else {
	print "not ok $i '$x' '$f' '$w'\n";
d76 235
@


1.3
log
@perl5.005_03 (stock)
@
text
@d5 6
a12 1
$^W = 1;
d22 2
a23 2
$x = sprintf("%3s %-4s%%foo %.0d%5d %#x%c%3.1f","hi",123,0,456,0,ord('A'),3.0999);
if ($x eq ' hi 123 %foo   456 0A3.1' && $w == 0) {
@


1.2
log
@perl 5.004_04
@
text
@d17 2
a18 2
$x = sprintf("%3s %-4s%%foo %5d%c%3.1f","hi",123,456,65,3.0999);
if ($x eq ' hi 123 %foo   456A3.1' && $w == 0) {
@


1.1
log
@Initial revision
@
text
@d5 1
a5 1
print "1..1\n";
d7 10
d18 16
a33 1
if ($x eq ' hi 123 %foo   456A3.1') {print "ok 1\n";} else {print "not ok 1 '$x'\n";}
@


1.1.1.1
log
@Import of Perl 5.003 into the tree.  Makefile.bsd-wrapper and
config.sh.OpenBSD are the only local changes.
@
text
@@


1.1.1.2
log
@perl5.005_03
@
text
@d5 1
a5 1
print "1..4\n";
d7 2
a8 27
$^W = 1;
$SIG{__WARN__} = sub {
    if ($_[0] =~ /^Invalid conversion/) {
	$w++;
    } else {
	warn @@_;
    }
};

$w = 0;
$x = sprintf("%3s %-4s%%foo %.0d%5d %#x%c%3.1f","hi",123,0,456,0,ord('A'),3.0999);
if ($x eq ' hi 123 %foo   456 0A3.1' && $w == 0) {
    print "ok 1\n";
} else {
    print "not ok 1 '$x'\n";
}

for $i (2 .. 4) {
    $f = ('%6 .6s', '%6. 6s', '%6.6 s')[$i - 2];
    $w = 0;
    $x = sprintf($f, '');
    if ($x eq $f && $w == 1) {
	print "ok $i\n";
    } else {
	print "not ok $i '$x' '$f' '$w'\n";
    }
}
@


1.1.1.3
log
@virgin perl 5.6.0
@
text
@a4 6
BEGIN {
    chdir 't' if -d 't';
    unshift @@INC, '../lib';
}   
use warnings;

d7 1
d17 2
a18 2
$x = sprintf("%3s %-4s%%foo %.0d%5d %#x%c%3.1f %b %x %X %#b %#x %#X","hi",123,0,456,0,ord('A'),3.0999,11,171,171,11,171,171);
if ($x eq ' hi 123 %foo   456 0A3.1 1011 ab AB 0b1011 0xab 0XAB' && $w == 0) {
@


1.1.1.4
log
@stock perl 5.6.1
@
text
@d3 1
a3 5
# Tests sprintf, excluding handling of 64-bit integers or long
# doubles (if supported), of machine-specific short and long
# integers, machine-specific floating point exceptions (infinity,
# not-a-number ...), of the effects of locale, and of features
# specific to multi-byte characters (under use utf8 and such).
d7 1
a7 1
    @@INC = '../lib';
d11 1
a11 6
while (<DATA>) {
    s/^\s*>//; s/<\s*$//;
    push @@tests, [split(/<\s*>/, $_, 4)]; 
}

print '1..', scalar @@tests, "\n";
d15 1
a15 1
	$w = ' INVALID'
d21 7
a27 23
for ($i = 1; @@tests; $i++) {
    ($template, $data, $result, $comment) = @@{shift @@tests};
    $evalData = eval $data;
    $w = undef;
    $x = sprintf(">$template<",
                 defined @@$evalData ? @@$evalData : $evalData);
    substr($x, -1, 0) = $w if $w;
    # $x may have 3 exponent digits, not 2
    my $y = $x;
    if ($y =~ s/([Ee][-+])0(\d)/$1$2/) {
        # if result is left-adjusted, append extra space
        if ($template =~ /%\+?\-/ and $result =~ / $/) {
	    $y =~ s/<$/ </;
	}
        # if result is zero-filled, add extra zero
	elsif ($template =~ /%\+?0/ and $result =~ /^0/) {
	    $y =~ s/^>0/>00/;
	}
        # if result is right-adjusted, prepend extra space
	elsif ($result =~ /^ /) {
	    $y =~ s/^>/> /;
	}
    }
d29 8
a36 20
    if ($x eq ">$result<") {
        print "ok $i\n";
    }
    elsif ($y eq ">$result<")	# Some C libraries always give
    {				# three-digit exponent
		print("ok $i # >$result< $x three-digit exponent accepted\n");
    }
	elsif ($result =~ /[-+]\d{3}$/ &&
		   # Suppress tests with modulo of exponent >= 100 on platforms
		   # which can't handle such magnitudes (or where we can't tell).
		   ((!eval {require POSIX}) || # Costly: only do this if we must!
			(length(&POSIX::DBL_MAX) - rindex(&POSIX::DBL_MAX, '+')) == 3))
	{
		print("ok $i # >$template< >$data< >$result<",
			  " Suppressed: exponent out of range?\n") 
	}
    else {
	$y = ($x eq $y ? "" : " => $y");
	print("not ok $i >$template< >$data< >$result< $x$y",
	    $comment ? " # $comment\n" : "\n");
a38 235

# In each of the the following lines, there are three required fields:
# printf template, data to be formatted (as a Perl expression), and
# expected result of formatting.  An optional fourth field can contain
# a comment.  Each field is delimited by a starting '>' and a
# finishing '<'; any whitespace outside these start and end marks is
# not part of the field.  If formatting requires more than one data
# item (for example, if variable field widths are used), the Perl data
# expression should return a reference to an array having the requisite
# number of elements.  Even so, subterfuge is sometimes required: see
# tests for %n and %p.
#
# The following tests are not currently run, for the reasons stated:

=pod

=begin problematic

>%.0f<      >-0.1<        >-0<  >C library bug: no minus on VMS, HP-UX<
>%.0f<      >1.5<         >2<   >Standard vague: no rounding rules<
>%.0f<      >2.5<         >2<   >Standard vague: no rounding rules<

=end problematic

=cut

# template    data          result
__END__
>%6. 6s<    >''<          >%6. 6s INVALID< >(See use of $w in code above)<
>%6 .6s<    >''<          >%6 .6s INVALID<
>%6.6 s<    >''<          >%6.6 s INVALID<
>%A<        >''<          >%A INVALID<
>%B<        >''<          >%B INVALID<
>%C<        >''<          >%C INVALID<
>%D<        >0x7fffffff<  >2147483647<     >Synonym for %ld<
>%E<        >123456.789<  >1.234568E+05<   >Like %e, but using upper-case "E"<
>%F<        >123456.789<  >123456.789000<  >Synonym for %f<
>%G<        >1234567.89<  >1.23457E+06<    >Like %g, but using upper-case "E"<
>%G<        >1234567e96<  >1.23457E+102<
>%G<        >.1234567e-101< >1.23457E-102<
>%G<        >12345.6789<  >12345.7<
>%H<        >''<          >%H INVALID<
>%I<        >''<          >%I INVALID<
>%J<        >''<          >%J INVALID<
>%K<        >''<          >%K INVALID<
>%L<        >''<          >%L INVALID<
>%M<        >''<          >%M INVALID<
>%N<        >''<          >%N INVALID<
>%O<        >2**32-1<     >37777777777<    >Synonum for %lo<
>%P<        >''<          >%P INVALID<
>%Q<        >''<          >%Q INVALID<
>%R<        >''<          >%R INVALID<
>%S<        >''<          >%S INVALID<
>%T<        >''<          >%T INVALID<
>%U<        >2**32-1<     >4294967295<     >Synonum for %lu<
>%V<        >''<          >%V INVALID<
>%W<        >''<          >%W INVALID<
>%X<        >2**32-1<     >FFFFFFFF<       >Like %x, but with u/c letters<
>%#X<       >2**32-1<     >0XFFFFFFFF<
>%Y<        >''<          >%Y INVALID<
>%Z<        >''<          >%Z INVALID<
>%a<        >''<          >%a INVALID<
>%b<        >2**32-1<     >11111111111111111111111111111111<
>%+b<       >2**32-1<     >11111111111111111111111111111111<
>%#b<       >2**32-1<     >0b11111111111111111111111111111111<
>%34b<      >2**32-1<     >  11111111111111111111111111111111<
>%034b<     >2**32-1<     >0011111111111111111111111111111111<
>%-34b<     >2**32-1<     >11111111111111111111111111111111  <
>%-034b<    >2**32-1<     >11111111111111111111111111111111  <
>%c<        >ord('A')<    >A<
>%10c<      >ord('A')<    >         A<
>%#10c<     >ord('A')<    >         A<     ># modifier: no effect<
>%010c<     >ord('A')<    >000000000A<
>%10lc<     >ord('A')<    >         A<     >l modifier: no effect<
>%10hc<     >ord('A')<    >         A<     >h modifier: no effect<
>%10.5c<    >ord('A')<    >         A<     >precision: no effect<
>%-10c<     >ord('A')<    >A         <
>%d<        >123456.789<  >123456<
>%d<        >-123456.789< >-123456<
>%d<        >0<           >0<
>%+d<       >0<           >+0<
>%0d<       >0<           >0<
>%.0d<      >0<           ><
>%+.0d<     >0<           >+<
>%.0d<      >1<           >1<
>%d<        >1<           >1<
>%+d<       >1<           >+1<
>%#3.2d<    >1<           > 01<            ># modifier: no effect<
>%3.2d<     >1<           > 01<
>%03.2d<    >1<           >001<
>%-3.2d<    >1<           >01 <
>%-03.2d<   >1<           >01 <            >zero pad + left just.: no effect<
>%d<        >-1<          >-1<
>%+d<       >-1<          >-1<
>%hd<       >1<           >1<              >More extensive testing of<
>%ld<       >1<           >1<              >length modifiers would be<
>%Vd<       >1<           >1<              >platform-specific<
>%vd<       >chr(1)<      >1<
>%+vd<      >chr(1)<      >+1<
>%#vd<      >chr(1)<      >1<
>%vd<       >"\01\02\03"< >1.2.3<
>%v.3d<     >"\01\02\03"< >001.002.003<
>%v03d<     >"\01\02\03"< >001.002.003<
>%v-3d<     >"\01\02\03"< >1  .2  .3  <
>%v+-3d<    >"\01\02\03"< >+1 .2  .3  <
>%v4.3d<    >"\01\02\03"< > 001. 002. 003<
>%v04.3d<   >"\01\02\03"< >0001.0002.0003<
>%*v02d<    >['-', "\0\7\14"]< >00-07-12<
>%v.*d<     >[3, "\01\02\03"]< >001.002.003<
>%v0*d<     >[3, "\01\02\03"]< >001.002.003<
>%v-*d<     >[3, "\01\02\03"]< >1  .2  .3  <
>%v+-*d<    >[3, "\01\02\03"]< >+1 .2  .3  <
>%v*.*d<    >[4, 3, "\01\02\03"]< > 001. 002. 003<
>%v0*.*d<   >[4, 3, "\01\02\03"]< >0001.0002.0003<
>%*v0*d<    >['-', 2, "\0\7\13"]< >00-07-11<
>%e<        >1234.875<    >1.234875e+03<
>%e<        >0.000012345< >1.234500e-05<
>%e<        >1234567E96<  >1.234567e+102<
>%e<        >0<           >0.000000e+00<
>%e<        >.1234567E-101< >1.234567e-102<
>%+e<       >1234.875<    >+1.234875e+03<
>%#e<       >1234.875<    >1.234875e+03<
>%e<        >-1234.875<   >-1.234875e+03<
>%+e<       >-1234.875<   >-1.234875e+03<
>%#e<       >-1234.875<   >-1.234875e+03<
>%.0e<      >1234.875<    >1e+03<
>%#.0e<     >1234.875<    >1.e+03<
>%.*e<      >[0, 1234.875]< >1e+03<
>%.1e<      >1234.875<    >1.2e+03<
>%-12.4e<   >1234.875<    >1.2349e+03  <
>%12.4e<    >1234.875<    >  1.2349e+03<
>%+-12.4e<  >1234.875<    >+1.2349e+03 <
>%+12.4e<   >1234.875<    > +1.2349e+03<
>%+-12.4e<  >-1234.875<   >-1.2349e+03 <
>%+12.4e<   >-1234.875<   > -1.2349e+03<
>%f<        >1234.875<    >1234.875000<
>%+f<       >1234.875<    >+1234.875000<
>%#f<       >1234.875<    >1234.875000<
>%f<        >-1234.875<   >-1234.875000<
>%+f<       >-1234.875<   >-1234.875000<
>%#f<       >-1234.875<   >-1234.875000<
>%6f<       >1234.875<    >1234.875000<
>%*f<       >[6, 1234.875]< >1234.875000<
>%.0f<      >1234.875<    >1235<
>%.1f<      >1234.875<    >1234.9<
>%-8.1f<    >1234.875<    >1234.9  <
>%8.1f<     >1234.875<    >  1234.9<
>%+-8.1f<   >1234.875<    >+1234.9 <
>%+8.1f<    >1234.875<    > +1234.9<
>%+-8.1f<   >-1234.875<   >-1234.9 <
>%+8.1f<    >-1234.875<   > -1234.9<
>%*.*f<     >[5, 2, 12.3456]< >12.35<
>%f<        >0<           >0.000000<
>%.0f<      >0<           >0<
>%.0f<      >2**38<       >274877906944<   >Should have exact int'l rep'n<
>%.0f<      >0.1<         >0<
>%.0f<      >0.6<         >1<              >Known to fail with sfio and (irix|nonstop-ux|powerux)<
>%.0f<      >-0.6<        >-1<             >Known to fail with sfio and (irix|nonstop-ux|powerux)<
>%.0f<      >1<           >1<
>%#.0f<     >1<           >1.<
>%g<        >12345.6789<  >12345.7<
>%+g<       >12345.6789<  >+12345.7<
>%#g<       >12345.6789<  >12345.7<
>%.0g<      >12345.6789<  >1e+04<
>%#.0g<     >12345.6789<  >1.e+04<
>%.2g<      >12345.6789<  >1.2e+04<
>%.*g<      >[2, 12345.6789]< >1.2e+04<
>%.9g<      >12345.6789<  >12345.6789<
>%12.9g<    >12345.6789<  >  12345.6789<
>%012.9g<   >12345.6789<  >0012345.6789<
>%-12.9g<   >12345.6789<  >12345.6789  <
>%*.*g<     >[-12, 9, 12345.6789]< >12345.6789  <
>%-012.9g<  >12345.6789<  >12345.6789  <
>%g<        >-12345.6789< >-12345.7<
>%+g<       >-12345.6789< >-12345.7<
>%g<        >1234567.89<  >1.23457e+06<
>%+g<       >1234567.89<  >+1.23457e+06<
>%#g<       >1234567.89<  >1.23457e+06<
>%g<        >-1234567.89< >-1.23457e+06<
>%+g<       >-1234567.89< >-1.23457e+06<
>%#g<       >-1234567.89< >-1.23457e+06<
>%g<        >0.00012345<  >0.00012345<
>%g<        >0.000012345< >1.2345e-05<
>%g<        >1234567E96<  >1.23457e+102<
>%g<        >.1234567E-101< >1.23457e-102<
>%g<        >0<           >0<
>%13g<      >1234567.89<  >  1.23457e+06<
>%+13g<     >1234567.89<  > +1.23457e+06<
>%013g<      >1234567.89< >001.23457e+06<
>%-13g<      >1234567.89< >1.23457e+06  <
>%h<        >''<          >%h INVALID<
>%i<        >123456.789<  >123456<         >Synonym for %d<
>%j<        >''<          >%j INVALID<
>%k<        >''<          >%k INVALID<
>%l<        >''<          >%l INVALID<
>%m<        >''<          >%m INVALID<
>%s< >sprintf('%%n%n %d', $n, $n)< >%n 2< >Slight sneakiness to test %n<
>%o<        >2**32-1<     >37777777777<
>%+o<       >2**32-1<     >37777777777<
>%#o<       >2**32-1<     >037777777777<
>%d< >$p=sprintf('%p',$p);$p=~/^[0-9a-f]+$/< >1< >Coarse hack: hex from %p?<
>%#p<       >''<          >%#p INVALID<
>%q<        >''<          >%q INVALID<
>%r<        >''<          >%r INVALID<
>%s<        >'string'<    >string<
>%10s<      >'string'<    >    string<
>%+10s<     >'string'<    >    string<
>%#10s<     >'string'<    >    string<
>%010s<     >'string'<    >0000string<
>%0*s<      >[10, 'string']< >0000string<
>%-10s<     >'string'<    >string    <
>%3s<       >'string'<    >string<
>%.3s<      >'string'<    >str<
>%.*s<      >[3, 'string']< >str<
>%t<        >''<          >%t INVALID<
>%u<        >2**32-1<     >4294967295<
>%+u<       >2**32-1<     >4294967295<
>%#u<       >2**32-1<     >4294967295<
>%12u<      >2**32-1<     >  4294967295<
>%012u<     >2**32-1<     >004294967295<
>%-12u<     >2**32-1<     >4294967295  <
>%-012u<    >2**32-1<     >4294967295  <
>%v<        >''<          >%v INVALID<
>%w<        >''<          >%w INVALID<
>%x<        >2**32-1<     >ffffffff<
>%+x<       >2**32-1<     >ffffffff<
>%#x<       >2**32-1<     >0xffffffff<
>%10x<      >2**32-1<     >  ffffffff<
>%010x<     >2**32-1<     >00ffffffff<
>%-10x<     >2**32-1<     >ffffffff  <
>%-010x<    >2**32-1<     >ffffffff  <
>%0-10x<    >2**32-1<     >ffffffff  <
>%0*x<      >[-10, ,2**32-1]< >ffffffff  <
>%y<        >''<          >%y INVALID<
>%z<        >''<          >%z INVALID<
@


1.1.1.5
log
@stock perl 5.8.0 from CPAN
@
text
@d7 1
a7 1
# specific to multi-byte characters (under the utf8 pragma and such).
a13 6
# we do not load %Config since this test resides in op and needs
# to run under the minitest target even without Config.pm working.

# strictness
my @@tests = ();
my ($i, $template, $data, $result, $comment, $w, $x, $evalData, $n, $p);
d24 1
a24 3
	$w = ' INVALID';
    } elsif ($_[0] =~ /^Use of uninitialized value/) {
	$w = ' UNINIT';
a29 8
my $Is_VMS_VAX = 0;
# We use HW_MODEL since ARCH_NAME was not in VMS V5.*
if ($^O eq 'VMS') {
    my $hw_model;
    chomp($hw_model = `write sys\$output f\$getsyi("HW_MODEL")`);
    $Is_VMS_VAX = $hw_model < 1024 ? 1 : 0;
}

a31 14
    if ($^O eq 'os390' || $^O eq 's390') { # non-IEEE (s390 is UTS)
        $data   =~ s/([eE])96$/${1}63/;      # smaller exponents
        $result =~ s/([eE]\+)102$/${1}69/;   #  "       "
        $data   =~ s/([eE])\-101$/${1}-56/;  # larger exponents
        $result =~ s/([eE])\-102$/${1}-57/;  #  "       "
    }
    if ($Is_VMS_VAX) { # VAX DEC C 5.3 at least since there is no 
                       # ccflags =~ /float=ieee/ on VAX.
                       # AXP is unaffected whether or not it's using ieee.
        $data   =~ s/([eE])96$/${1}26/;      # smaller exponents
        $result =~ s/([eE]\+)102$/${1}32/;   #  "       "
        $data   =~ s/([eE])\-101$/${1}-24/;  # larger exponents
        $result =~ s/([eE])\-102$/${1}-25/;  #  "       "
    }
a96 6
>%G<        >1234567e96<  >1.23457E+102<	>exponent too big for OS/390<
>%G<        >.1234567e-101< >1.23457E-102<	>exponent too small for OS/390<
>%e<        >1234567E96<  >1.234567e+102<	>exponent too big for OS/390<
>%e<        >.1234567E-101< >1.234567e-102<	>exponent too small for OS/390<
>%g<        >.1234567E-101< >1.23457e-102<	>exponent too small for OS/390<
>%g<        >1234567E96<  >1.23457e+102<	>exponent too big for OS/390<
d124 1
a124 1
>%O<        >2**32-1<     >37777777777<    >Synonym for %lo<
d130 1
a130 1
>%U<        >2**32-1<     >4294967295<     >Synonym for %lu<
d178 3
a180 3
>%0v3d<     >"\01\02\03"< >001.002.003<
>%-v3d<     >"\01\02\03"< >1  .2  .3  <
>%+-v3d<    >"\01\02\03"< >+1 .2  .3  <
d182 9
a190 9
>%0v4.3d<   >"\01\02\03"< >0001.0002.0003<
>%0*v2d<    >['-', "\0\7\14"]< >00-07-12<
>%v.*d<     >["\01\02\03", 3]< >001.002.003<
>%0v*d<     >["\01\02\03", 3]< >001.002.003<
>%-v*d<     >["\01\02\03", 3]< >1  .2  .3  <
>%+-v*d<    >["\01\02\03", 3]< >+1 .2  .3  <
>%v*.*d<    >["\01\02\03", 4, 3]< > 001. 002. 003<
>%0v*.*d<   >["\01\02\03", 4, 3]< >0001.0002.0003<
>%0*v*d<    >['-', "\0\7\13", 2]< >00-07-11<
a275 3
>%o<        >642<         >1202<          >check smaller octals across platforms<
>%+o<       >642<         >1202<
>%#o<       >642<         >01202<
a310 20
>%2$d %1$d<	>[12, 34]<	>34 12<
>%*2$d<		>[12, 3]<	> 12<
>%2$d %d<	>[12, 34]<	>34 12<
>%2$d %d %d<	>[12, 34]<	>34 12 34<
>%3$d %d %d<	>[12, 34, 56]<	>56 12 34<
>%2$*3$d %d<	>[12, 34, 3]<	> 34 12<
>%*3$2$d %d<	>[12, 34, 3]<	>%*3$2$d 34 INVALID<
>%2$d<		>12<	>0 UNINIT<
>%0$d<		>12<	>%0$d INVALID<
>%1$$d<		>12<	>%1$$d INVALID<
>%1$1$d<	>12<	>%1$1$d INVALID<
>%*2$*2$d<	>[12, 3]<	>%*2$*2$d INVALID<
>%*2*2$d<	>[12, 3]<	>%*2*2$d INVALID<
>%0v2.2d<	>''<	><
>%vc,%d<	>[63, 64, 65]<	>?,64<
>%vd,%d<	>[1, 2, 3]<	>49,2<
>%vf,%d<	>[1, 2, 3]<	>1.000000,2<
>%vp<	>''<	>%vp INVALID<
>%vs,%d<	>[1, 2, 3]<	>1,2<
>%v_<	>''<	>%v_ INVALID<
@


1.1.1.6
log
@perl 5.8.2 from CPAN
@
text
@a45 3
# No %Config.
my $Is_Ultrix_VAX = $^O eq 'ultrix' && `uname -m` =~ /^VAX$/;

d54 3
a56 4
    if ($Is_VMS_VAX || $Is_Ultrix_VAX) {
	# VAX DEC C 5.3 at least since there is no 
	# ccflags =~ /float=ieee/ on VAX.
	# AXP is unaffected whether or not it's using ieee.
d107 1
a107 1
# In each of the following lines, there are three required fields:
a238 2
>%.0e<      >1.875<       >2e+00<
>%.0e<      >0.875<       >9e-01<
d268 2
a269 4
>%.0f<      >0.6<         >1<              >Known to fail with sfio, (irix|nonstop-ux|powerux); -DHAS_LDBL_SPRINTF_BUG may fix<
>%.0f<      >-0.6<        >-1<             >Known to fail with sfio, (irix|nonstop-ux|powerux); -DHAS_LDBL_SPRINTF_BUG may fix<
>%.0f<      >1.6<         >2<
>%.0f<      >-1.6<        >-2<
a271 2
>%.0lf<     >1<           >1<              >'l' should have no effect<
>%.0hf<     >1<           >%.0hf INVALID<  >'h' should be rejected<
d356 1
a356 1
>%*3$2$d %d<	>[12, 34, 3]<	>%*3$2$d 12 INVALID<
a369 8
>%v#x<	>''<	>%v#x INVALID<
>%v02x<	>"foo\012"<	>66.6f.6f.0a<
>%V-%s<		>["Hello"]<	>%V-Hello INVALID<
>%K %d %d<	>[13, 29]<	>%K 13 29 INVALID<
>%*.*K %d<	>[13, 29, 76]<	>%*.*K 13 INVALID<
>%4$K %d<	>[45, 67]<	>%4$K 45 INVALID<
>%d %K %d<	>[23, 45]<	>23 %K 45 INVALID<
>%*v*999\$d %d %d<	>[11, 22, 33]<	>%*v*999\$d 11 22 INVALID<
@


1.1.1.7
log
@perl 5.8.8 import
@
text
@d12 1
a12 1
}
d14 2
a15 2
use Config;
use strict;
d17 1
d21 17
d49 2
a50 3
while (<DATA>) {
    s/^\s*>//; s/<\s*$//;
    ($template, $data, $result, $comment) = split(/<\s*>/, $_, 4);
d58 1
a58 1
	# VAX DEC C 5.3 at least since there is no
a65 1

a66 18
    $data = ref $evalData ? $evalData : [$evalData];
    push @@tests, [$template, $data, $result, $comment];
}

print '1..', scalar @@tests, "\n";

$SIG{__WARN__} = sub {
    if ($_[0] =~ /^Invalid conversion/) {
	$w = ' INVALID';
    } elsif ($_[0] =~ /^Use of uninitialized value/) {
	$w = ' UNINIT';
    } else {
	warn @@_;
    }
};

for ($i = 1; @@tests; $i++) {
    ($template, $data, $result, $comment) = @@{shift @@tests};
d68 2
a69 1
    $x = sprintf(">$template<", @@$data);
a87 18
    my $skip = 0;
    if ($comment =~ s/\s+skip:\s*(.*)//) {
	my $os  = $1;
	my $osv = exists $Config{osvers} ? $Config{osvers} : "0";
	# >comment skip: all<
	if ($os =~ /\ball\b/i) {
	    $skip = 1;
	# >comment skip: VMS hpux:10.20<
	} elsif ($os =~ /\b$^O(?::(\S+))?\b/i) {
	    my $vsn = defined $1 ? $1 : "0";
	    # Only compare on the the first pair of digits, as numeric
	    # compares don't like 2.6.10-3mdksmp or 2.6.8-24.10-default
	    s/^(\d+(\.\d+)?).*/$1/ for $osv, $vsn;
	    $skip = $vsn ? ($osv <= $vsn ? 1 : 0) : 1;
	}
	$skip and $comment =~ s/$/, failure expected on $^O $osv/;
    }

a90 3
    elsif ($skip) {
	print "ok $i # skip $comment\n";
    }
d102 1
a102 1
			  " Suppressed: exponent out of range?\n");
a121 10
# Tests that are expected to fail on a certain OS can be marked as such
# by trailing the comment with a skip: section. Skips are tags separated
# bu space consisting of a $^O optionally trailed with :osvers. In the
# latter case, all os-levels below that are expected to fail. A special
# tag 'all' is allowed for todo tests that should fail on any system
#
# >%G<   >1234567e96<  >1.23457E+102<   >exponent too big skip: os390<
# >%.0g< >-0.0<        >-0<             >No minus skip: MSWin32 VMS hpux:10.20<
# >%d<   >4<           >1<              >4 != 1 skip: all<
#
d128 1
d131 6
a156 2
>%G<        >1234567e96<  >1.23457E+102<	>exponent too big skip: os390<
>%G<        >.1234567e-101< >1.23457E-102<	>exponent too small skip: os390<
a252 2
>%e<        >1234567E96<  >1.234567e+102<	>exponent too big skip: os390<
>%e<        >.1234567E-101< >1.234567e-102<	>exponent too small skip: os390<
a260 1
>%.0f<      >-0.1<        >-0<  >C library bug: no minus skip: VMS<
a284 1
>%.0g<      >-0.0<	  >-0<		   >C99 standard mandates minus sign but C89 does not skip: MSWin32 VMS hpux:10.20 openbsd netbsd:1.5 irix<
d310 2
a311 4
>%013g<     >1234567.89<  >001.23457e+06<
>%-13g<     >1234567.89<  >1.23457e+06  <
>%g<        >.1234567E-101< >1.23457e-102<	>exponent too small skip: os390<
>%g<        >1234567E96<  >1.23457e+102<	>exponent too big skip: os390<
a325 1
>%d< >$p=sprintf('%-8p',$p);$p=~/^[0-9a-f]+\s*$/< >1< >Coarse hack: hex from %p?<
a372 1
>%*2$1d<	>[12, 3]<	>%*2$1d INVALID<
a387 5
>%#b<		>0<	>0<
>%#o<		>0<	>0<
>%#x<		>0<	>0<
>%2918905856$v2d<	>''<	><
>%*2918905856$v2d<	>''<	> UNINIT<
@


1.1.1.8
log
@import perl 5.10.0 from CPAN
@
text
@a13 1
use version;
d173 1
a173 3
>%B<        >2**32-1<     >11111111111111111111111111111111<
>%+B<       >2**32-1<     >11111111111111111111111111111111<
>%#B<       >2**32-1<     >0B11111111111111111111111111111111<
a211 27
>%6b<       >12<          >  1100<
>%6.5b<     >12<          > 01100<
>%-6.5b<    >12<          >01100 <
>%+6.5b<    >12<          > 01100<
>% 6.5b<    >12<          > 01100<
>%06.5b<    >12<          > 01100<         >0 flag with precision: no effect<
>%.5b<      >12<          >01100<
>%.0b<      >0<           ><
>%+.0b<     >0<           ><
>% .0b<     >0<           ><
>%-.0b<     >0<           ><
>%#.0b<     >0<           ><
>%#3.0b<    >0<           >   <
>%#3.1b<    >0<           >  0<
>%#3.2b<    >0<           > 00<
>%#3.3b<    >0<           >000<
>%#3.4b<    >0<           >0000<
>%.0b<      >1<           >1<
>%+.0b<     >1<           >1<
>% .0b<     >1<           >1<
>%-.0b<     >1<           >1<
>%#.0b<     >1<           >0b1<
>%#3.0b<    >1<           >0b1<
>%#3.1b<    >1<           >0b1<
>%#3.2b<    >1<           >0b01<
>%#3.3b<    >1<           >0b001<
>%#3.4b<    >1<           >0b0001<
a222 1
>%-d<       >0<           >0<
a223 1
>% d<       >0<           > 0<
a224 6
>%-3d<      >1<           >1  <
>%+3d<      >1<           > +1<
>% 3d<      >1<           >  1<
>%03d<      >1<           >001<
>%+ 3d<     >1<           > +1<
>% +3d<     >1<           > +1<
a226 3
>% .0d<     >0<           > <
>%-.0d<     >0<           ><
>%#.0d<     >0<           ><
d232 1
a232 1
>%03.2d<    >1<           > 01<            >0 flag with precision: no effect<
a233 2
>%+3.2d<    >1<           >+01<
>% 3.2d<    >1<           > 01<
a234 14
>%3.*d<     >[2,1]<       > 01<
>%3.*d<     >[1,1]<       >  1<
>%3.*d<     >[0,1]<       >  1<
>%3.*d<     >[-1,1]<      >  1<
>%.*d<      >[0,0]<       ><
>%-.*d<     >[0,0]<       ><
>%+.*d<     >[0,0]<       >+<
>% .*d<     >[0,0]<       > <
>%0.*d<     >[0,0]<       ><
>%.*d<      >[-2,0]<      >0<
>%-.*d<     >[-2,0]<      >0<
>%+.*d<     >[-2,0]<      >+0<
>% .*d<     >[-2,0]<      > 0<
>%0.*d<     >[-2,0]<      >0<
a235 1
>%-d<       >-1<          >-1<
a236 5
>% d<       >-1<          >-1<
>%-3d<      >-1<          >-1 <
>%+3d<      >-1<          > -1<
>% 3d<      >-1<          > -1<
>%03d<      >-1<          >-01<
a243 7
>%vd<       >v1.2.3<      >1.2.3<
>%vd<       >[version::qv("1.2.3")]< >1.2.3<
>%vd<       >[version->new("1.2")]< >1.2<
>%vd<       >[version->new("1.02")]< >1.2<
>%vd<       >[version->new("1.002")]< >1.2<
>%vd<       >[version->new("1048576.5")]< >1048576.5<
>%vd<       >[version->new("50")]< >50<
a245 1
>%v.3d<     >[version::qv("1.2.3")]< >001.002.003<
a247 1
>%+-v3d<    >[version::qv("1.2.3")]< >+1 .2  .3  <
d249 1
a249 1
>%0v4.3d<   >"\01\02\03"< > 001. 002. 003<
d256 1
a256 1
>%0v*.*d<   >["\01\02\03", 4, 3]< > 001. 002. 003<
a257 1
>%0*v*d<    >['-', version::qv("0.7.11"), 2]< >00-07-11<
d315 1
a315 1
>%.0g<      >-0.0<	  >-0<		   >C99 standard mandates minus sign but C89 does not skip: MSWin32 VMS hpux:10.20 openbsd netbsd:1.5 irix darwin<
a356 1
>% o<       >642<         >1202<
a357 58
>%4o<       >18<          >  22<
>%4.3o<     >18<          > 022<
>%-4.3o<    >18<          >022 <
>%+4.3o<    >18<          > 022<
>% 4.3o<    >18<          > 022<
>%04.3o<    >18<          > 022<          >0 flag with precision: no effect<
>%4.o<      >36<          >  44<
>%-4.o<     >36<          >44  <
>%+4.o<     >36<          >  44<
>% 4.o<     >36<          >  44<
>%04.o<     >36<          >  44<          >0 flag with precision: no effect<
>%.3o<      >18<          >022<
>%.0o<      >0<           ><
>%+.0o<     >0<           ><
>% .0o<     >0<           ><
>%-.0o<     >0<           ><
>%#.0o<     >0<           >0<
>%#3.0o<    >0<           >  0<
>%#3.1o<    >0<           >  0<
>%#3.2o<    >0<           > 00<
>%#3.3o<    >0<           >000<
>%#3.4o<    >0<           >0000<
>%.0o<      >1<           >1<
>%+.0o<     >1<           >1<
>% .0o<     >1<           >1<
>%-.0o<     >1<           >1<
>%#.0o<     >1<           >01<
>%#3.0o<    >1<           > 01<
>%#3.1o<    >1<           > 01<
>%#3.2o<    >1<           > 01<
>%#3.3o<    >1<           >001<
>%#3.4o<    >1<           >0001<
>%#.5o<     >012345<      >012345<
>%#.5o<     >012<         >00012<
>%#4o<      >17<          > 021<
>%#-4o<     >17<          >021 <
>%-#4o<     >17<          >021 <
>%#+4o<     >17<          > 021<
>%# 4o<     >17<          > 021<
>%#04o<     >17<          >0021<
>%#4.o<     >16<          > 020<
>%#-4.o<    >16<          >020 <
>%-#4.o<    >16<          >020 <
>%#+4.o<    >16<          > 020<
>%# 4.o<    >16<          > 020<
>%#04.o<    >16<          > 020<          >0 flag with precision: no effect<
>%#4.3o<    >18<          > 022<
>%#-4.3o<   >18<          >022 <
>%-#4.3o<   >18<          >022 <
>%#+4.3o<   >18<          > 022<
>%# 4.3o<   >18<          > 022<
>%#04.3o<   >18<          > 022<          >0 flag with precision: no effect<
>%#6.4o<    >18<          >  0022<
>%#-6.4o<   >18<          >0022  <
>%-#6.4o<   >18<          >0022  <
>%#+6.4o<   >18<          >  0022<
>%# 6.4o<   >18<          >  0022<
>%#06.4o<   >18<          >  0022<        >0 flag with precision: no effect<
a372 9
>%.*s<      >[2, 'string']< >st<
>%.*s<      >[1, 'string']< >s<
>%.*s<      >[0, 'string']< ><
>%.*s<      >[-1,'string']< >string<  >negative precision to be ignored<
>%3.*s<     >[3, 'string']< >str<
>%3.*s<     >[2, 'string']< > st<
>%3.*s<     >[1, 'string']< >  s<
>%3.*s<     >[0, 'string']< >   <
>%3.*s<     >[-1,'string']< >string<  >negative precision to be ignored<
a380 7
>%4u<       >18<          >  18<
>%4.3u<     >18<          > 018<
>%-4.3u<    >18<          >018 <
>%+4.3u<    >18<          > 018<
>% 4.3u<    >18<          > 018<
>%04.3u<    >18<          > 018<         >0 flag with precision: no effect<
>%.3u<      >18<          >018<
a390 50
>%4x<       >18<          >  12<
>%4.3x<     >18<          > 012<
>%-4.3x<    >18<          >012 <
>%+4.3x<    >18<          > 012<
>% 4.3x<    >18<          > 012<
>%04.3x<    >18<          > 012<         >0 flag with precision: no effect<
>%.3x<      >18<          >012<
>%4X<       >28<          >  1C<
>%4.3X<     >28<          > 01C<
>%-4.3X<    >28<          >01C <
>%+4.3X<    >28<          > 01C<
>% 4.3X<    >28<          > 01C<
>%04.3X<    >28<          > 01C<         >0 flag with precision: no effect<
>%.3X<      >28<          >01C<
>%.0x<      >0<           ><
>%+.0x<     >0<           ><
>% .0x<     >0<           ><
>%-.0x<     >0<           ><
>%#.0x<     >0<           ><
>%#3.0x<    >0<           >   <
>%#3.1x<    >0<           >  0<
>%#3.2x<    >0<           > 00<
>%#3.3x<    >0<           >000<
>%#3.4x<    >0<           >0000<
>%.0x<      >1<           >1<
>%+.0x<     >1<           >1<
>% .0x<     >1<           >1<
>%-.0x<     >1<           >1<
>%#.0x<     >1<           >0x1<
>%#3.0x<    >1<           >0x1<
>%#3.1x<    >1<           >0x1<
>%#3.2x<    >1<           >0x01<
>%#3.3x<    >1<           >0x001<
>%#3.4x<    >1<           >0x0001<
>%#.5x<     >0x12345<     >0x12345<
>%#.5x<     >0x12<        >0x00012<
>%#4x<      >28<          >0x1c<
>%#4.3x<    >28<          >0x01c<
>%#-4.3x<   >28<          >0x01c<
>%#+4.3x<   >28<          >0x01c<
>%# 4.3x<   >28<          >0x01c<
>%#04.3x<   >28<          >0x01c<         >0 flag with precision: no effect<
>%#.3x<     >28<          >0x01c<
>%#6.3x<    >28<          > 0x01c<
>%#-6.3x<   >28<          >0x01c <
>%-#6.3x<   >28<          >0x01c <
>%#+6.3x<   >28<          > 0x01c<
>%+#6.3x<   >28<          > 0x01c<
>%# 6.3x<   >28<          > 0x01c<
>% #6.3x<   >28<          > 0x01c<
a391 22
>%vx<       >[version::qv("1.2.3")]< >1.2.3<
>%vx<       >[version::qv("1.20.300")]< >1.14.12c<
>%.*x<      >[0,0]<       ><
>%-.*x<     >[0,0]<       ><
>%+.*x<     >[0,0]<       ><
>% .*x<     >[0,0]<       ><
>%0.*x<     >[0,0]<       ><
>%.*x<      >[-3,0]<      >0<
>%-.*x<     >[-3,0]<      >0<
>%+.*x<     >[-3,0]<      >0<
>% .*x<     >[-3,0]<      >0<
>%0.*x<     >[-3,0]<      >0<
>%#.*x<     >[0,0]<       ><
>%#-.*x<    >[0,0]<       ><
>%#+.*x<    >[0,0]<       ><
>%# .*x<    >[0,0]<       ><
>%#0.*x<    >[0,0]<       ><
>%#.*x<     >[-1,0]<      >0<
>%#-.*x<    >[-1,0]<      >0<
>%#+.*x<    >[-1,0]<      >0<
>%# .*x<    >[-1,0]<      >0<
>%#0.*x<    >[-1,0]<      >0<
d409 3
a411 9
>%vc,%d<	>[63, 64, 65]<	>%vc,63 INVALID<
>%v%,%d<	>[63, 64, 65]<	>%v%,63 INVALID<
>%vd,%d<	>["\x1", 2, 3]<	>1,2<
>%vf,%d<	>[1, 2, 3]<	>%vf,1 INVALID<
>%vF,%d<	>[1, 2, 3]<	>%vF,1 INVALID<
>%ve,%d<	>[1, 2, 3]<	>%ve,1 INVALID<
>%vE,%d<	>[1, 2, 3]<	>%vE,1 INVALID<
>%vg,%d<	>[1, 2, 3]<	>%vg,1 INVALID<
>%vG,%d<	>[1, 2, 3]<	>%vG,1 INVALID<
d413 1
a413 2
>%vn<	>''<	>%vn INVALID<
>%vs,%d<	>[1, 2, 3]<	>%vs,1 INVALID<
d416 1
a416 35
>%v02x<	>"\x66\x6f\x6f\012"<	>66.6f.6f.0a<
>%#v.8b<	>"\141\000\142"<	>0b01100001.00000000.0b01100010<	>perl #39530<
>%#v.0o<	>"\001\000\002\000"<    >01.0.02.0<
>%#v.1o<	>"\001\000\002\000"<    >01.0.02.0<
>%#v.4o<	>"\141\000\142"<	>0141.0000.0142<	>perl #39530<
>%#v.3i<	>"\141\000\142"<	>097.000.098<	>perl #39530<
>%#v.0x<	>"\001\000\002\000"<    >0x1..0x2.<
>%#v.1x<	>"\001\000\002\000"<    >0x1.0.0x2.0<
>%#v.2x<	>"\141\000\142"<	>0x61.00.0x62<	>perl #39530<
>%#v.2X<	>"\141\000\142"<	>0X61.00.0X62<	>perl #39530<
>%#v.8b<	>"\141\017\142"<	>0b01100001.0b00001111.0b01100010<	>perl #39530<
>%#v.4o<	>"\141\017\142"<	>0141.0017.0142<	>perl #39530<
>%#v.3i<	>"\141\017\142"<	>097.015.098<	>perl #39530<
>%#v.2x<	>"\141\017\142"<	>0x61.0x0f.0x62<	>perl #39530<
>%#v.2X<	>"\141\017\142"<	>0X61.0X0F.0X62<	>perl #39530<
>%#*v.8b<	>["][", "\141\000\142"]<	>0b01100001][00000000][0b01100010<	>perl #39530<
>%#*v.4o<	>["][", "\141\000\142"]<	>0141][0000][0142<	>perl #39530<
>%#*v.3i<	>["][", "\141\000\142"]<	>097][000][098<	>perl #39530<
>%#*v.2x<	>["][", "\141\000\142"]<	>0x61][00][0x62<	>perl #39530<
>%#*v.2X<	>["][", "\141\000\142"]<	>0X61][00][0X62<	>perl #39530<
>%#*v.8b<	>["][", "\141\017\142"]<	>0b01100001][0b00001111][0b01100010<	>perl #39530<
>%#*v.4o<	>["][", "\141\017\142"]<	>0141][0017][0142<	>perl #39530<
>%#*v.3i<	>["][", "\141\017\142"]<	>097][015][098<	>perl #39530<
>%#*v.2x<	>["][", "\141\017\142"]<	>0x61][0x0f][0x62<	>perl #39530<
>%#*v.2X<	>["][", "\141\017\142"]<	>0X61][0X0F][0X62<	>perl #39530<
>%#v.8b<	>"\141\x{1e01}\000\142\x{1e03}"<	>0b01100001.0b1111000000001.00000000.0b01100010.0b1111000000011<	>perl #39530<
>%#v.4o<	>"\141\x{1e01}\000\142\x{1e03}"<	>0141.017001.0000.0142.017003<	>perl #39530<
>%#v.3i<	>"\141\x{1e01}\000\142\x{1e03}"<	>097.7681.000.098.7683<	>perl #39530<
>%#v.2x<	>"\141\x{1e01}\000\142\x{1e03}"<	>0x61.0x1e01.00.0x62.0x1e03<	>perl #39530<
>%#v.2X<	>"\141\x{1e01}\000\142\x{1e03}"<	>0X61.0X1E01.00.0X62.0X1E03<	>perl #39530<
>%#v.8b<	>"\141\x{1e01}\017\142\x{1e03}"<	>0b01100001.0b1111000000001.0b00001111.0b01100010.0b1111000000011<	>perl #39530<
>%#v.4o<	>"\141\x{1e01}\017\142\x{1e03}"<	>0141.017001.0017.0142.017003<	>perl #39530<
>%#v.3i<	>"\141\x{1e01}\017\142\x{1e03}"<	>097.7681.015.098.7683<	>perl #39530<
>%#v.2x<	>"\141\x{1e01}\017\142\x{1e03}"<	>0x61.0x1e01.0x0f.0x62.0x1e03<	>perl #39530<
>%#v.2X<	>"\141\x{1e01}\017\142\x{1e03}"<	>0X61.0X1E01.0X0F.0X62.0X1E03<	>perl #39530<
d426 2
a427 2
>%2147483647$v2d<	>''<	><
>%*2147483647$v2d<	>''<	> UNINIT<
@


1.1.1.9
log
@import perl 5.10.1
@
text
@d52 2
a53 2
    $evalData = ref $evalData ? $evalData : [$evalData];
    push @@tests, [$template, $evalData, $result, $comment, $data];
d69 1
a69 1
    ($template, $evalData, $result, $comment, $data) = @@{shift @@tests};
d71 1
a71 1
    $x = sprintf(">$template<", @@$evalData);
@


1.1.1.10
log
@Perl 5.12.2 from CPAN
@
text
@a62 2
    } elsif ($_[0] =~ /^Missing argument/) {
	$w = ' MISSING';
d621 1
a621 1
>%2$d<		>12<	>0 MISSING<
d688 1
a688 1
>%*2147483647$v2d<	>''<	> MISSING<
@


1.1.1.11
log
@import perl 5.16.3 from CPAN - worked on by Andrew Fresh and myself
@
text
@d60 1
a60 1
	$w .= ' INVALID';
d62 1
a62 1
	$w .= ' UNINIT';
d64 1
a64 1
	$w .= ' MISSING';
d73 1
a73 2
    $x = sprintf($template, @@$evalData);
    $x = ">$x<" if defined $x;
d303 2
a304 5
>%hhd<      >1<           >1<              >length modifiers would be<
>%ld<       >1<           >1<              >platform-specific<
>%Vd<       >1<           >1<
>%zd<       >1<           >1<
>%td<       >1<           >1<
d325 8
a332 8
>%v.*d<     >[3, "\01\02\03"]< >001.002.003< >cf perl #83194<
>%0v*d<     >[3, "\01\02\03"]< >001.002.003< >cf perl #83194<
>%-v*d<     >[3, "\01\02\03"]< >1  .2  .3  < >cf perl #83194<
>%+-v*d<    >[3, "\01\02\03"]< >+1 .2  .3  < >cf perl #83194<
>%v*.*d<    >[4, 3, "\01\02\03"]< > 001. 002. 003< >cf perl #83194<
>%0v*.*d<   >[4, 3, "\01\02\03"]< > 001. 002. 003< >cf perl #83194<
>%0*v*d<    >['-', 2, "\0\7\13"]< >00-07-11< >cf perl #83194<
>%0*v*d<    >['-', 2, version::qv("0.7.11")]< >00-07-11< >cf perl #83194<
a375 4
>%.0f<      >[]<          >0 MISSING<
> %.0f<     >[]<          > 0 MISSING<
>%.2f<      >[]<          >0.00 MISSING<
>%.2fC<      >[]<          >0.00C MISSING<
d390 1
a390 5
>%.0g<      >[]<          >0 MISSING<
> %.0g<     >[]<          > 0 MISSING<
>%.2g<      >[]<          >0 MISSING<
>%.2gC<      >[]<          >0C MISSING<
>%.0g<      >-0.0<        >-0<		   >C99 standard mandates minus sign but C89 does not skip: MSWin32 VMS hpux:10.20 openbsd netbsd:1.5 irix darwin<
a426 2
>%s< >$n="abc"; sprintf(' %n%s', substr($n,1,1), $n)< > a1c< >%n w/magic<
>%s< >no warnings; sprintf('%s%n', chr(256)x5, $n),$n< >5< >Unicode %n<
a496 2
>%s<        >[]<          > MISSING<
> %s<       >[]<          >  MISSING<
d683 1
a683 1
>%4$K %d<	>[45, 67]<	>%4$K 45 MISSING INVALID<
a690 9
>%.3X<		>[11]<			>00B<		>perl #83194: hex, zero-padded to 3 places<
>%.*X<		>[3, 11]<		>00B<		>perl #83194: dynamic precision<
>%vX<		>['012']<		>30.31.32<	>perl #83194: vector flag<
>%*vX<		>[':', '012']<		>30:31:32<	>perl #83194: vector flag + custom separator<
>%v.3X<		>['012']<		>030.031.032<	>perl #83194: vector flag + static precision<
>%v.*X<		>[3, '012']<		>030.031.032<	>perl #83194: vector flag + dynamic precision<
>%*v.3X<	>[':', '012']<		>030:031:032<	>perl #83194: vector flag + custom separator + static precision<
>%*v.*X<	>[':', 3, '012']<	>030:031:032<	>perl #83194: vector flag + custom separator + dynamic precision<
>%vd<	>"version"<	>118.101.114.115.105.111.110<	>perl #102586: vector flag + "version"<
@


1.1.1.12
log
@Import perl-5.18.2

OK espie@@ sthen@@ deraadt@@
@
text
@a8 2
# For tests that do not fit this format, use sprintf2.t.

a16 1
require './test.pl';
d19 1
a19 1
my ($template, $data, $result, $comment, $w, $x, $evalData, $n, $p);
d44 1
a44 1
	# AXP is unaffected whether or not it is using ieee.
d56 1
a56 1
plan(scalar @@tests);
a64 2
    } elsif ($_[0]=~/^vector argument not supported with alpha versions/) {
	$w .= ' ALPHA';
d70 2
a71 2
for (@@tests) {
    ($template, $evalData, $result, $comment, $data) = @@$_;
d104 1
a104 1
	    # compares do not like 2.6.10-3mdksmp or 2.6.8-24.10-default
d112 1
a112 1
        ok(1, ">$result<");
d115 1
a115 1
        ok(1, "skip $comment");
d119 1
a119 1
		ok(1, ">$result< $x three-digit exponent accepted");
d123 1
a123 1
		   # which cannot handle such magnitudes (or where we cannot tell).
d127 2
a128 2
        ok(1,
         ">$template< >$data< >$result< Suppressed: exponent out of range?\n");
d131 3
a133 2
        $y = ($x eq $y ? "" : " => $y");
        ok(0, ">$template< >$data< >$result< $x$y $comment");
a319 1
>[%vd]<     >[version->new(v1.1_1)]< >[] ALPHA<
d402 1
a402 1
>%.0g<      >-0.0<        >-0<		   >C99 standard mandates minus sign but C89 does not skip: MSWin32 VMS hpux:10.20 openbsd netbsd:1.5 irix darwin freebsd:4.9<
@


1.1.1.13
log
@Import perl-5.20.1
@
text
@d392 2
a393 2
>%.0f<      >0.6<         >1<              >Known to fail with (irix|nonstop-ux|powerux); -DHAS_LDBL_SPRINTF_BUG may fix<
>%.0f<      >-0.6<        >-1<             >Known to fail with (irix|nonstop-ux|powerux); -DHAS_LDBL_SPRINTF_BUG may fix<
d407 1
a407 1
>%.0g<      >-0.0<        >-0<		   >C99 standard mandates minus sign but C89 does not skip: MSWin32 VMS hpux:10.20 openbsd netbsd:1.5 irix darwin freebsd:4.9 android<
@


1.1.1.14
log
@Import perl-5.24.2
@
text
@d13 1
a13 1
    @@INC = qw '../lib ../cpan/version/lib';
a34 3
our $IS_EBCDIC = $::IS_EBCDIC;  # Solely to avoid the 'used once' warning
our $IS_ASCII = $::IS_ASCII;   # Solely to avoid the 'used once' warning

d36 1
a36 8
    s/<\s*$//;

    # An initial 'a' or 'e' marks the test as being only for ASCII or EBCDIC
    # platforms respectively.
    s/^\s* ( [ae] )? >//x;
    next if defined $1 && $1 eq 'a' && $::IS_EBCDIC;
    next if defined $1 && $1 eq 'e' && $::IS_ASCII;

a67 2
    } elsif ($_[0] =~ /^Redundant argument/) {
	$w .= ' REDUNDANT';
d117 1
a117 1
        ok(1, join ' ', grep length, ">$result<", $comment);
d177 4
a180 4
>%6. 6s<    >''<          >%6. 6s INVALID REDUNDANT< >(See use of $w in code above)<
>%6 .6s<    >''<          >%6 .6s INVALID REDUNDANT<
>%6.6 s<    >''<          >%6.6 s INVALID REDUNDANT<
>%A<        >0<           ><	 >%A tested in sprintf2.t skip: all<
d184 1
a184 1
>%C<        >''<          >%C INVALID REDUNDANT<
d194 7
a200 7
>%H<        >''<          >%H INVALID REDUNDANT<
>%I<        >''<          >%I INVALID REDUNDANT<
>%J<        >''<          >%J INVALID REDUNDANT<
>%K<        >''<          >%K INVALID REDUNDANT<
>%L<        >''<          >%L INVALID REDUNDANT<
>%M<        >''<          >%M INVALID REDUNDANT<
>%N<        >''<          >%N INVALID REDUNDANT<
d202 5
a206 5
>%P<        >''<          >%P INVALID REDUNDANT<
>%Q<        >''<          >%Q INVALID REDUNDANT<
>%R<        >''<          >%R INVALID REDUNDANT<
>%S<        >''<          >%S INVALID REDUNDANT<
>%T<        >''<          >%T INVALID REDUNDANT<
d208 2
a209 2
>%V<        >''<          >%V INVALID REDUNDANT<
>%W<        >''<          >%W INVALID REDUNDANT<
d212 3
a214 3
>%Y<        >''<          >%Y INVALID REDUNDANT<
>%Z<        >''<          >%Z INVALID REDUNDANT<
>%a<        >0<           ><	 >%a tested in sprintf2.t skip: all<
a298 5
>%.*2$d<    >[5,3]<       >005<           >reordered precision arg<
>%4.*2$d<   >[5,3]<       > 005<          >width with reordered precision<
>%*3$.*2$d< >[5,3,4]<     > 005<          >reordered width with reordered precision<
>%3$*2$.*1$d< >[3,4,5]<   > 005<          >reordered param, width, precision<
>%*1$.*f<   >[4, 5, 10]<  >5.0000<        >perl #125956: reordered param, width, precision, floating point<
d324 1
d399 1
a399 1
>%.0hf<     >1<           >%.0hf INVALID REDUNDANT<  >'h' should be rejected<
d437 1
a437 1
>%h<        >''<          >%h INVALID REDUNDANT<
d439 4
a442 4
>%j<        >''<          >%j INVALID REDUNDANT<
>%k<        >''<          >%k INVALID REDUNDANT<
>%l<        >''<          >%l INVALID REDUNDANT<
>%m<        >''<          >%m INVALID REDUNDANT<
d513 3
a515 3
>%#p<       >''<          >%#p INVALID REDUNDANT<
>%q<        >''<          >%q INVALID REDUNDANT<
>%r<        >''<          >%r INVALID REDUNDANT<
d537 1
a537 1
>%t<        >''<          >%t INVALID REDUNDANT<
d552 2
a553 2
>%v<        >''<          >%v INVALID REDUNDANT<
>%w<        >''<          >%w INVALID REDUNDANT<
d635 2
a636 2
>%y<        >''<          >%y INVALID REDUNDANT<
>%z<        >''<          >%z INVALID REDUNDANT<
d638 1
a638 2
>%*2$d<		>[12, 3]<	> 12<             >RT#125469<
>%*3$d<		>[12, 9, 3]<	> 12<             >related to RT#125469<
d643 1
a643 1
>%*3$2$d %d<	>[12, 34, 3]<	>%*3$2$d 12 INVALID REDUNDANT<
d645 6
a650 6
>%0$d<		>12<	>%0$d INVALID REDUNDANT<
>%1$$d<		>12<	>%1$$d INVALID REDUNDANT<
>%1$1$d<	>12<	>%1$1$d INVALID REDUNDANT<
>%*2$*2$d<	>[12, 3]<	>%*2$*2$d INVALID REDUNDANT<
>%*2*2$d<	>[12, 3]<	>%*2*2$d INVALID REDUNDANT<
>%*2$1d<	>[12, 3]<	>%*2$1d INVALID REDUNDANT<
d652 14
a665 14
>%vc,%d<	>[63, 64, 65]<	>%vc,63 INVALID REDUNDANT<
>%v%,%d<	>[63, 64, 65]<	>%v%,63 INVALID REDUNDANT<
>%vd,%d<	>["\x1", 2, 3]<	>1,2 REDUNDANT<
>%vf,%d<	>[1, 2, 3]<	>%vf,1 INVALID REDUNDANT<
>%vF,%d<	>[1, 2, 3]<	>%vF,1 INVALID REDUNDANT<
>%ve,%d<	>[1, 2, 3]<	>%ve,1 INVALID REDUNDANT<
>%vE,%d<	>[1, 2, 3]<	>%vE,1 INVALID REDUNDANT<
>%vg,%d<	>[1, 2, 3]<	>%vg,1 INVALID REDUNDANT<
>%vG,%d<	>[1, 2, 3]<	>%vG,1 INVALID REDUNDANT<
>%vp<	>''<	>%vp INVALID REDUNDANT<
>%vn<	>''<	>%vn INVALID REDUNDANT<
>%vs,%d<	>[1, 2, 3]<	>%vs,1 INVALID REDUNDANT<
>%v_<	>''<	>%v_ INVALID REDUNDANT<
>%v#x<	>''<	>%v#x INVALID REDUNDANT<
d703 2
a704 2
>%*.*K %d<	>[13, 29, 76]<	>%*.*K 13 INVALID REDUNDANT<
>%4$K %d<	>[45, 67]<	>%4$K 45 INVALID REDUNDANT<
d706 1
a706 1
>%*v*999\$d %d %d<	>[11, 22, 33]<	>%*v*999\$d 11 22 INVALID REDUNDANT<
d714 7
a720 15
a>%vX<		>['012']<		>30.31.32<	>perl #83194: vector flag<
e>%vX<		>['012']<		>F0.F1.F2<	>perl #83194: vector flag<
a>%*vX<		>[':', '012']<		>30:31:32<	>perl #83194: vector flag + custom separator<
e>%*vX<		>[':', '012']<		>F0:F1:F2<	>perl #83194: vector flag + custom separator<
a>%v.3X<		>['012']<		>030.031.032<	>perl #83194: vector flag + static precision<
e>%v.3X<		>['012']<		>0F0.0F1.0F2<	>perl #83194: vector flag + static precision<
a>%v.*X<		>[3, '012']<		>030.031.032<	>perl #83194: vector flag + dynamic precision<
e>%v.*X<		>[3, '012']<		>0F0.0F1.0F2<	>perl #83194: vector flag + dynamic precision<
a>%*v.3X<	>[':', '012']<		>030:031:032<	>perl #83194: vector flag + custom separator + static precision<
e>%*v.3X<	>[':', '012']<		>0F0:0F1:0F2<	>perl #83194: vector flag + custom separator + static precision<
a>%*v.*X<	>[':', 3, '012']<	>030:031:032<	>perl #83194: vector flag + custom separator + dynamic precision<
e>%*v.*X<	>[':', 3, '012']<	>0F0:0F1:0F2<	>perl #83194: vector flag + custom separator + dynamic precision<
a>%vd<	>"version"<	>118.101.114.115.105.111.110<	>perl #102586: vector flag + "version"<
e>%vd<   >"version"<    >165.133.153.162.137.150.149<   >perl #102586: vector flag + "version"<
>%3$*4$v*2$.*1$x<  >[3, 4, "\x11\x22\x33", "/"]< > 011/ 022/ 033< >four reordered args<
@


