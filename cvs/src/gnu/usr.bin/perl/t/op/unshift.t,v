head	1.12;
access;
symbols
	OPENBSD_6_1:1.12.0.4
	OPENBSD_6_1_BASE:1.12
	OPENBSD_6_0:1.11.0.10
	OPENBSD_6_0_BASE:1.11
	OPENBSD_5_9:1.11.0.4
	OPENBSD_5_9_BASE:1.11
	OPENBSD_5_8:1.11.0.6
	OPENBSD_5_8_BASE:1.11
	PERL_5_20_2:1.1.1.7
	OPENBSD_5_7:1.11.0.2
	OPENBSD_5_7_BASE:1.11
	PERL_5_20_1:1.1.1.7
	OPENBSD_5_6:1.10.0.8
	OPENBSD_5_6_BASE:1.10
	PERL_5_18_2:1.1.1.6
	PERL:1.1.1
	OPENBSD_5_5:1.10.0.6
	OPENBSD_5_5_BASE:1.10
	OPENBSD_5_4:1.10.0.2
	OPENBSD_5_4_BASE:1.10
	PERL_5_16_3:1.1.1.6
	OPENBSD_5_3:1.9.0.10
	OPENBSD_5_3_BASE:1.9
	OPENBSD_5_2:1.9.0.8
	OPENBSD_5_2_BASE:1.9
	OPENBSD_5_1_BASE:1.9
	OPENBSD_5_1:1.9.0.6
	OPENBSD_5_0:1.9.0.4
	OPENBSD_5_0_BASE:1.9
	OPENBSD_4_9:1.9.0.2
	OPENBSD_4_9_BASE:1.9
	PERL_5_12_2:1.1.1.5
	OPENBSD_4_8:1.8.0.8
	OPENBSD_4_8_BASE:1.8
	OPENBSD_4_7:1.8.0.4
	OPENBSD_4_7_BASE:1.8
	PERL_5_10_1:1.1.1.4
	OPENBSD_4_6:1.8.0.6
	OPENBSD_4_6_BASE:1.8
	OPENBSD_4_5:1.8.0.2
	OPENBSD_4_5_BASE:1.8
	PERL_5_10_0:1.1.1.4
	OPENBSD_4_4:1.7.0.20
	OPENBSD_4_4_BASE:1.7
	OPENBSD_4_3:1.7.0.18
	OPENBSD_4_3_BASE:1.7
	OPENBSD_4_2:1.7.0.16
	OPENBSD_4_2_BASE:1.7
	OPENBSD_4_1:1.7.0.14
	OPENBSD_4_1_BASE:1.7
	OPENBSD_4_0:1.7.0.12
	OPENBSD_4_0_BASE:1.7
	PERL_5_8_8:1.1.1.3
	OPENBSD_3_9:1.7.0.10
	OPENBSD_3_9_BASE:1.7
	OPENBSD_3_8:1.7.0.8
	OPENBSD_3_8_BASE:1.7
	OPENBSD_3_7:1.7.0.6
	OPENBSD_3_7_BASE:1.7
	PERL_5_8_6:1.1.1.3
	OPENBSD_3_6:1.7.0.4
	OPENBSD_3_6_BASE:1.7
	PERL_5_8_5:1.1.1.2
	PERL_5_8_3:1.1.1.1
	OPENBSD_3_5:1.7.0.2
	OPENBSD_3_5_BASE:1.7
	PERL_5_8_2:1.1.1.1
	OPENBSD_3_4:1.6.0.4
	OPENBSD_3_4_BASE:1.6
	OPENBSD_3_3:1.6.0.2
	OPENBSD_3_3_BASE:1.6
	PERL_5_8_0:1.1.1.1
	OPENBSD_3_2:1.5.0.6
	OPENBSD_3_2_BASE:1.5
	OPENBSD_3_1:1.5.0.4
	OPENBSD_3_1_BASE:1.5
	OPENBSD_3_0:1.5.0.2
	OPENBSD_3_0_BASE:1.5
	PERL_5_6_1:1.1.1.1
	OPENBSD_2_9:1.4.0.6
	OPENBSD_2_9_BASE:1.4
	OPENBSD_2_8:1.4.0.4
	OPENBSD_2_8_BASE:1.4
	OPENBSD_2_7:1.4.0.2
	OPENBSD_2_7_BASE:1.4
	PERL_5_6_0:1.1.1.1
	OPENBSD_2_6:1.3.0.2
	OPENBSD_2_6_BASE:1.3
	PERL_500503:1.1.1.1
	CPAN:1.1.1
	OPENBSD_2_5:1.2.0.6
	OPENBSD_2_5_BASE:1.2
	OPENBSD_2_4:1.2.0.4
	OPENBSD_2_4_BASE:1.2
	OPENBSD_2_3:1.2.0.2
	OPENBSD_2_3_BASE:1.2
	OPENBSD_2_2:1.1.1.1.0.6
	OPENBSD_2_2_BASE:1.1.1.1
	OPENBSD_2_1:1.1.1.1.0.4
	OPENBSD_2_1_BASE:1.1.1.1
	OPENBSD_2_0:1.1.1.1.0.2
	OPENBSD_2_0_BASE:1.1.1.1
	perl5003:1.1.1.1
	lwall:1.1.1;
locks; strict;
comment	@# @;
expand	@o@;


1.12
date	2017.02.05.00.32.20;	author afresh1;	state Exp;
branches;
next	1.11;
commitid	cxJ08BvJA9Pt2PTM;

1.11
date	2014.11.17.20.57.07;	author afresh1;	state Exp;
branches;
next	1.10;
commitid	QP75iYx42Uo7mMxO;

1.10
date	2013.03.25.20.41.00;	author sthen;	state Exp;
branches;
next	1.9;

1.9
date	2010.09.24.15.07.09;	author millert;	state Exp;
branches;
next	1.8;

1.8
date	2008.09.29.17.36.20;	author millert;	state Exp;
branches;
next	1.7;

1.7
date	2003.12.03.03.02.49;	author millert;	state Exp;
branches;
next	1.6;

1.6
date	2002.10.27.22.25.37;	author millert;	state Exp;
branches;
next	1.5;

1.5
date	2001.05.24.18.36.24;	author millert;	state Exp;
branches;
next	1.4;

1.4
date	2000.04.06.17.08.35;	author millert;	state Exp;
branches;
next	1.3;

1.3
date	99.04.29.22.52.40;	author millert;	state Exp;
branches;
next	1.2;

1.2
date	97.11.30.08.05.49;	author millert;	state Exp;
branches;
next	1.1;

1.1
date	96.08.19.10.13.23;	author downsj;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	96.08.19.10.13.23;	author downsj;	state Exp;
branches;
next	1.1.1.2;

1.1.1.2
date	2004.08.09.17.48.36;	author millert;	state Exp;
branches;
next	1.1.1.3;

1.1.1.3
date	2005.01.15.21.18.20;	author millert;	state Exp;
branches;
next	1.1.1.4;

1.1.1.4
date	2008.09.29.17.19.02;	author millert;	state Exp;
branches;
next	1.1.1.5;

1.1.1.5
date	2010.09.24.14.49.18;	author millert;	state Exp;
branches;
next	1.1.1.6;

1.1.1.6
date	2013.03.25.20.09.37;	author sthen;	state Exp;
branches;
next	1.1.1.7;

1.1.1.7
date	2014.11.17.20.53.18;	author afresh1;	state Exp;
branches;
next	;
commitid	B31cAbBIXiCqnL97;


desc
@@


1.12
log
@Fix merge issues, remove excess files - match perl-5.24.1 dist
@
text
@#!./perl

BEGIN {
    chdir 't' if -d 't';
    require "./test.pl";
}

plan(18);

@@array = (1, 2, 3);

{
    no warnings 'syntax';
    $count3 = unshift (@@array);
}
is(join(' ',@@array), '1 2 3', 'unshift null');
cmp_ok($count3, '==', 3, 'unshift count == 3');


$count3_2 = unshift (@@array, ());
is(join(' ',@@array), '1 2 3', 'unshift null empty');
cmp_ok($count3_2, '==', 3, 'unshift count == 3 again');

$count4 = unshift (@@array, 0);
is(join(' ',@@array), '0 1 2 3', 'unshift singleton list');
cmp_ok($count4, '==', 4, 'unshift count == 4');

$count7 = unshift (@@array, 3, 2, 1);
is(join(' ',@@array), '3 2 1 0 1 2 3', 'unshift list');
cmp_ok($count7, '==', 7, 'unshift count == 7');

@@list = (5, 4);
$count9 = unshift (@@array, @@list);
is(join(' ',@@array), '5 4 3 2 1 0 1 2 3', 'unshift array');
cmp_ok($count9, '==', 9, 'unshift count == 9');


@@list = (7);
@@list2 = (6);
$count11 = unshift (@@array, @@list, @@list2);
is(join(' ',@@array), '7 6 5 4 3 2 1 0 1 2 3', 'unshift arrays');
cmp_ok($count11, '==', 11, 'unshift count == 11');

# ignoring counts
@@alpha = ('y', 'z');

{
    no warnings 'syntax';
    unshift (@@alpha);
}
is(join(' ',@@alpha), 'y z', 'void unshift null');

unshift (@@alpha, ());
is(join(' ',@@alpha), 'y z', 'void unshift null empty');

unshift (@@alpha, 'x');
is(join(' ',@@alpha), 'x y z', 'void unshift singleton list');

unshift (@@alpha, 'u', 'v', 'w');
is(join(' ',@@alpha), 'u v w x y z', 'void unshift list');

@@bet = ('s', 't');
unshift (@@alpha, @@bet);
is(join(' ',@@alpha), 's t u v w x y z', 'void unshift array');

@@bet = ('q');
@@gimel = ('r');
unshift (@@alpha, @@bet, @@gimel);
is(join(' ',@@alpha), 'q r s t u v w x y z', 'void unshift arrays');

@


1.11
log
@Fix merge conflicts, remove extra files, match upstream perl-5.20.1

ok deraadt@@ sthen@@ espie@@ miod@@
@
text
@d4 2
a5 1
    require "test.pl";
d8 1
a8 1
plan(36);
a10 1
$aref  = [1, 2, 3];
a11 1
no warnings 'experimental::autoderef';
a14 1
    $count3r = unshift ($aref);
a17 2
is(join(' ',@@$aref), '1 2 3', 'unshift null (ref)');
cmp_ok($count3r, '==', 3, 'unshift count == 3 (ref)');
a22 3
$count3_2r = unshift ($aref, ());
is(join(' ',@@$aref), '1 2 3', 'unshift null empty (ref)');
cmp_ok($count3_2r, '==', 3, 'unshift count == 3 again (ref)');
a26 3
$count4r = unshift ($aref, 0);
is(join(' ',@@$aref), '0 1 2 3', 'unshift singleton list (ref)');
cmp_ok($count4r, '==', 4, 'unshift count == 4 (ref)');
a30 3
$count7r = unshift ($aref, 3, 2, 1);
is(join(' ',@@$aref), '3 2 1 0 1 2 3', 'unshift list (ref)');
cmp_ok($count7r, '==', 7, 'unshift count == 7 (ref)');
a35 3
$count9r = unshift ($aref, @@list);
is(join(' ',@@$aref), '5 4 3 2 1 0 1 2 3', 'unshift array (ref)');
cmp_ok($count9r, '==', 9, 'unshift count == 9 (ref)');
a42 3
$count11r = unshift ($aref, @@list, @@list2);
is(join(' ',@@$aref), '7 6 5 4 3 2 1 0 1 2 3', 'unshift arrays (ref)');
cmp_ok($count11r, '==', 11, 'unshift count == 11 (ref)');
a45 1
$alpharef = ['y', 'z'];
a49 1
    unshift ($alpharef);
a51 1
is(join(' ',@@$alpharef), 'y z', 'void unshift null (ref)');
a54 2
unshift ($alpharef, ());
is(join(' ',@@$alpharef), 'y z', 'void unshift null empty (ref)');
a57 2
unshift ($alpharef, 'x');
is(join(' ',@@$alpharef), 'x y z', 'void unshift singleton list (ref)');
a60 2
unshift ($alpharef, 'u', 'v', 'w');
is(join(' ',@@$alpharef), 'u v w x y z', 'void unshift list (ref)');
a64 2
unshift ($alpharef, @@bet);
is(join(' ',@@$alpharef), 's t u v w x y z', 'void unshift array (ref)');
a69 2
unshift ($alpharef, @@bet, @@gimel);
is(join(' ',@@$alpharef), 'q r s t u v w x y z', 'void unshift arrays (ref)');
@


1.10
log
@merge/resolve conflicts
(some more to do after this one)
@
text
@d12 1
@


1.9
log
@merge in perl 5.12.2 plus local changes
@
text
@d7 1
a7 1
plan(18);
d10 1
d15 1
d19 3
d26 3
d33 3
d40 3
d48 4
d58 3
d64 1
d69 1
d72 1
d76 2
d81 2
d86 2
d92 2
d99 2
@


1.8
log
@fix conflicts and merge in local changes to perl 5.10.0
@
text
@d3 3
a5 1
print "1..2\n";
d7 1
a7 2
@@a = (1,2,3);
$cnt1 = unshift(a,0);
d9 1
a9 3
if (join(' ',@@a) eq '0 1 2 3') {print "ok 1\n";} else {print "not ok 1\n";}
$cnt2 = unshift(a,3,2,1);
if (join(' ',@@a) eq '3 2 1 0 1 2 3') {print "ok 2\n";} else {print "not ok 2\n";}
d11 56
@


1.7
log
@Resolve conflicts for perl 5.8.2, remove old files, and add OpenBSD-specific scaffolding
@
text
@a2 2
# $RCSfile: unshift.t,v $$Revision: 4.1 $$Date: 92/08/07 18:28:35 $

@


1.6
log
@Resolve conflicts, remove old files, merge local changes
@
text
@@


1.5
log
@merge in perl 5.6.1 with our local changes
@
text
@@


1.4
log
@perl-5.6.0 + local changes
@
text
@@


1.3
log
@perl5.005_03 (stock)
@
text
@@


1.2
log
@perl 5.004_04
@
text
@@


1.1
log
@Initial revision
@
text
@@


1.1.1.1
log
@Import of Perl 5.003 into the tree.  Makefile.bsd-wrapper and
config.sh.OpenBSD are the only local changes.
@
text
@@


1.1.1.2
log
@Import of stock perl 5.8.5
@
text
@d3 1
a3 1
# $RCSfile: unshift.t,v $$Revision: 1.7 $$Date: 2003/12/03 03:02:49 $
@


1.1.1.3
log
@perl 5.8.6 from CPAN
@
text
@d3 1
a3 1
# $RCSfile: unshift.t,v $$Revision: 4.1 $$Date: 92/08/07 18:28:35 $
@


1.1.1.4
log
@import perl 5.10.0 from CPAN
@
text
@d3 2
@


1.1.1.5
log
@Perl 5.12.2 from CPAN
@
text
@d3 1
a3 3
BEGIN {
    require "test.pl";
}
d5 2
a6 1
plan(18);
d8 3
a10 1
@@array = (1, 2, 3);
a11 56
{
    no warnings 'syntax';
    $count3 = unshift (@@array);
}
is(join(' ',@@array), '1 2 3', 'unshift null');
cmp_ok($count3, '==', 3, 'unshift count == 3');

$count3_2 = unshift (@@array, ());
is(join(' ',@@array), '1 2 3', 'unshift null empty');
cmp_ok($count3_2, '==', 3, 'unshift count == 3 again');

$count4 = unshift (@@array, 0);
is(join(' ',@@array), '0 1 2 3', 'unshift singleton list');
cmp_ok($count4, '==', 4, 'unshift count == 4');

$count7 = unshift (@@array, 3, 2, 1);
is(join(' ',@@array), '3 2 1 0 1 2 3', 'unshift list');
cmp_ok($count7, '==', 7, 'unshift count == 7');

@@list = (5, 4);
$count9 = unshift (@@array, @@list);
is(join(' ',@@array), '5 4 3 2 1 0 1 2 3', 'unshift array');
cmp_ok($count9, '==', 9, 'unshift count == 9');

@@list = (7);
@@list2 = (6);
$count11 = unshift (@@array, @@list, @@list2);
is(join(' ',@@array), '7 6 5 4 3 2 1 0 1 2 3', 'unshift arrays');
cmp_ok($count11, '==', 11, 'unshift count == 11');

# ignoring counts
@@alpha = ('y', 'z');

{
    no warnings 'syntax';
    unshift (@@alpha);
}
is(join(' ',@@alpha), 'y z', 'void unshift null');

unshift (@@alpha, ());
is(join(' ',@@alpha), 'y z', 'void unshift null empty');

unshift (@@alpha, 'x');
is(join(' ',@@alpha), 'x y z', 'void unshift singleton list');

unshift (@@alpha, 'u', 'v', 'w');
is(join(' ',@@alpha), 'u v w x y z', 'void unshift list');

@@bet = ('s', 't');
unshift (@@alpha, @@bet);
is(join(' ',@@alpha), 's t u v w x y z', 'void unshift array');

@@bet = ('q');
@@gimel = ('r');
unshift (@@alpha, @@bet, @@gimel);
is(join(' ',@@alpha), 'q r s t u v w x y z', 'void unshift arrays');
@


1.1.1.6
log
@import perl 5.16.3 from CPAN - worked on by Andrew Fresh and myself
@
text
@d7 1
a7 1
plan(36);
a9 1
$aref  = [1, 2, 3];
a13 1
    $count3r = unshift ($aref);
a16 3
is(join(' ',@@$aref), '1 2 3', 'unshift null (ref)');
cmp_ok($count3r, '==', 3, 'unshift count == 3 (ref)');

a20 3
$count3_2r = unshift ($aref, ());
is(join(' ',@@$aref), '1 2 3', 'unshift null empty (ref)');
cmp_ok($count3_2r, '==', 3, 'unshift count == 3 again (ref)');
a24 3
$count4r = unshift ($aref, 0);
is(join(' ',@@$aref), '0 1 2 3', 'unshift singleton list (ref)');
cmp_ok($count4r, '==', 4, 'unshift count == 4 (ref)');
a28 3
$count7r = unshift ($aref, 3, 2, 1);
is(join(' ',@@$aref), '3 2 1 0 1 2 3', 'unshift list (ref)');
cmp_ok($count7r, '==', 7, 'unshift count == 7 (ref)');
a33 4
$count9r = unshift ($aref, @@list);
is(join(' ',@@$aref), '5 4 3 2 1 0 1 2 3', 'unshift array (ref)');
cmp_ok($count9r, '==', 9, 'unshift count == 9 (ref)');

a39 3
$count11r = unshift ($aref, @@list, @@list2);
is(join(' ',@@$aref), '7 6 5 4 3 2 1 0 1 2 3', 'unshift arrays (ref)');
cmp_ok($count11r, '==', 11, 'unshift count == 11 (ref)');
a42 1
$alpharef = ['y', 'z'];
a46 1
    unshift ($alpharef);
a48 1
is(join(' ',@@$alpharef), 'y z', 'void unshift null (ref)');
a51 2
unshift ($alpharef, ());
is(join(' ',@@$alpharef), 'y z', 'void unshift null empty (ref)');
a54 2
unshift ($alpharef, 'x');
is(join(' ',@@$alpharef), 'x y z', 'void unshift singleton list (ref)');
a57 2
unshift ($alpharef, 'u', 'v', 'w');
is(join(' ',@@$alpharef), 'u v w x y z', 'void unshift list (ref)');
a61 2
unshift ($alpharef, @@bet);
is(join(' ',@@$alpharef), 's t u v w x y z', 'void unshift array (ref)');
a66 2
unshift ($alpharef, @@bet, @@gimel);
is(join(' ',@@$alpharef), 'q r s t u v w x y z', 'void unshift arrays (ref)');
@


1.1.1.7
log
@Import perl-5.20.1
@
text
@a11 1
no warnings 'experimental::autoderef';
@


