head	1.2;
access;
symbols
	OPENBSD_6_1_BASE:1.2
	OPENBSD_6_0:1.1.1.7.0.12
	OPENBSD_6_0_BASE:1.1.1.7
	OPENBSD_5_9:1.1.1.7.0.6
	OPENBSD_5_9_BASE:1.1.1.7
	OPENBSD_5_8:1.1.1.7.0.8
	OPENBSD_5_8_BASE:1.1.1.7
	PERL_5_20_2:1.1.1.7
	OPENBSD_5_7:1.1.1.7.0.2
	OPENBSD_5_7_BASE:1.1.1.7
	PERL_5_20_1:1.1.1.7
	OPENBSD_5_6:1.1.1.7.0.4
	OPENBSD_5_6_BASE:1.1.1.7
	PERL_5_18_2:1.1.1.7
	PERL:1.1.1
	OPENBSD_5_5:1.1.1.6.0.6
	OPENBSD_5_5_BASE:1.1.1.6
	OPENBSD_5_4:1.1.1.6.0.2
	OPENBSD_5_4_BASE:1.1.1.6
	PERL_5_16_3:1.1.1.6
	OPENBSD_5_3:1.1.1.5.0.10
	OPENBSD_5_3_BASE:1.1.1.5
	OPENBSD_5_2:1.1.1.5.0.8
	OPENBSD_5_2_BASE:1.1.1.5
	OPENBSD_5_1_BASE:1.1.1.5
	OPENBSD_5_1:1.1.1.5.0.6
	OPENBSD_5_0:1.1.1.5.0.4
	OPENBSD_5_0_BASE:1.1.1.5
	OPENBSD_4_9:1.1.1.5.0.2
	OPENBSD_4_9_BASE:1.1.1.5
	PERL_5_12_2:1.1.1.5
	OPENBSD_4_8:1.1.1.4.0.8
	OPENBSD_4_8_BASE:1.1.1.4
	OPENBSD_4_7:1.1.1.4.0.4
	OPENBSD_4_7_BASE:1.1.1.4
	PERL_5_10_1:1.1.1.4
	OPENBSD_4_6:1.1.1.4.0.6
	OPENBSD_4_6_BASE:1.1.1.4
	OPENBSD_4_5:1.1.1.4.0.2
	OPENBSD_4_5_BASE:1.1.1.4
	PERL_5_10_0:1.1.1.4
	OPENBSD_4_4:1.1.1.3.0.10
	OPENBSD_4_4_BASE:1.1.1.3
	OPENBSD_4_3:1.1.1.3.0.8
	OPENBSD_4_3_BASE:1.1.1.3
	OPENBSD_4_2:1.1.1.3.0.6
	OPENBSD_4_2_BASE:1.1.1.3
	OPENBSD_4_1:1.1.1.3.0.4
	OPENBSD_4_1_BASE:1.1.1.3
	OPENBSD_4_0:1.1.1.3.0.2
	OPENBSD_4_0_BASE:1.1.1.3
	PERL_5_8_8:1.1.1.3
	OPENBSD_3_9:1.1.1.2.0.8
	OPENBSD_3_9_BASE:1.1.1.2
	OPENBSD_3_8:1.1.1.2.0.6
	OPENBSD_3_8_BASE:1.1.1.2
	OPENBSD_3_7:1.1.1.2.0.4
	OPENBSD_3_7_BASE:1.1.1.2
	PERL_5_8_6:1.1.1.2
	OPENBSD_3_6:1.1.1.2.0.2
	OPENBSD_3_6_BASE:1.1.1.2
	PERL_5_8_5:1.1.1.2
	PERL_5_8_3:1.1.1.2
	OPENBSD_3_5:1.1.1.1.0.2
	OPENBSD_3_5_BASE:1.1.1.1
	PERL_5_8_2:1.1.1.1
	CPAN:1.1.1;
locks; strict;
comment	@# @;
expand	@o@;


1.2
date	2017.02.05.00.32.20;	author afresh1;	state Exp;
branches;
next	1.1;
commitid	cxJ08BvJA9Pt2PTM;

1.1
date	2003.12.03.02.44.31;	author millert;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	2003.12.03.02.44.31;	author millert;	state Exp;
branches;
next	1.1.1.2;

1.1.1.2
date	2004.04.07.21.13.43;	author millert;	state Exp;
branches;
next	1.1.1.3;

1.1.1.3
date	2006.03.28.18.49.44;	author millert;	state Exp;
branches;
next	1.1.1.4;

1.1.1.4
date	2008.09.29.17.19.00;	author millert;	state Exp;
branches;
next	1.1.1.5;

1.1.1.5
date	2010.09.24.14.49.18;	author millert;	state Exp;
branches;
next	1.1.1.6;

1.1.1.6
date	2013.03.25.20.09.35;	author sthen;	state Exp;
branches;
next	1.1.1.7;

1.1.1.7
date	2014.03.24.14.59.10;	author afresh1;	state Exp;
branches;
next	;


desc
@@


1.2
log
@Fix merge issues, remove excess files - match perl-5.24.1 dist
@
text
@#!./perl
# Tests to ensure that we don't unexpectedly change prototypes of builtins

BEGIN {
    chdir 't' if -d 't';
    @@INC = '../lib';
}

BEGIN { require './test.pl'; }
plan tests => 254;

while (<DATA>) {
    chomp;
    (my $keyword, my $proto, local $TODO) = split " ", $_, 3;
    if ($proto eq 'undef') {
	ok( !defined prototype "CORE::".$keyword, $keyword );
    }
    elsif ($proto eq 'unknown') {
	eval { prototype "CORE::".$keyword };
	like( $@@, qr/Can't find an opnumber for/, $keyword );
    }
    else {
	is(
	    "(".(prototype("CORE::".$keyword) // 'undef').")", $proto,
	    $keyword
	);
    }
}

# the keyword list :

__DATA__
__FILE__ ()
__LINE__ ()
__PACKAGE__ ()
__DATA__ undef
__END__ undef
__SUB__ ()
AUTOLOAD undef
BEGIN undef
CORE unknown
DESTROY undef
END undef
INIT undef
CHECK undef
abs (_)
accept (**)
alarm (_)
and undef
atan2 ($$)
bind (*$)
binmode (*;$)
bless ($;$)
break ()
caller (;$)
chdir (;$)
chmod (@@)
chomp undef
chop undef
chown (@@)
chr (_)
chroot (_)
close (;*)
closedir (*)
cmp undef
connect (*$)
continue ()
cos (_)
crypt ($$)
dbmclose (\%)
dbmopen (\%$$)
default undef
defined undef
delete undef
die (@@)
do undef
dump ()
each (\[%@@])
else undef
elsif undef
endgrent ()
endhostent ()
endnetent ()
endprotoent ()
endpwent ()
endservent ()
eof (;*)
eq undef
eval undef
evalbytes (_)
exec undef
exists undef
exit (;$)
exp (_)
fc (_)
fcntl (*$$)
fileno (*)
flock (*$)
for undef
foreach undef
fork ()
format undef
formline ($@@)
ge undef
getc (;*)
getgrent ()
getgrgid ($)
getgrnam ($)
gethostbyaddr ($$)
gethostbyname ($)
gethostent ()
getlogin ()
getnetbyaddr ($$)
getnetbyname ($)
getnetent ()
getpeername (*)
getpgrp (;$)
getppid ()
getpriority ($$)
getprotobyname ($)
getprotobynumber ($;)
getprotoent ()
getpwent ()
getpwnam ($)
getpwuid ($)
getservbyname ($$)
getservbyport ($$)
getservent ()
getsockname (*)
getsockopt (*$$)
given undef
glob (_;)
gmtime (;$)
goto undef
grep undef
gt undef
hex (_)
if undef
index ($$;$)
int (_)
ioctl (*$$)
join ($@@)
keys (\[%@@])
kill (@@)
last undef
lc (_)
lcfirst (_)
le undef
length (_)
link ($$)
listen (*$)
local undef
localtime (;$)
lock (\[$@@%&*])
log (_)
lstat (;*)
lt undef
m undef
map undef
mkdir (_;$)
msgctl ($$$)
msgget ($$)
msgrcv ($$$$$)
msgsnd ($$$)
my undef
ne undef
next undef
no undef
not ($;)
oct (_)
open (*;$@@)
opendir (*$)
or undef
ord (_)
our undef
pack ($@@)
package undef
pipe (**)
pop (;\@@)
pos (;\[$*])
print undef
printf undef
prototype (_)
push (\@@@@)
q undef
qq undef
qr undef
quotemeta (_)
qw undef
qx undef
rand (;$)
read (*\$$;$)
readdir (*)
readline (;*)
readlink (_)
readpipe (_)
recv (*\$$$)
redo undef
ref (_)
rename ($$)
require undef
reset (;$)
return undef
reverse (@@)
rewinddir (*)
rindex ($$;$)
rmdir (_)
s undef
say undef
scalar ($)
seek (*$$)
seekdir (*$)
select undef
semctl ($$$$)
semget ($$$)
semop ($$)
send (*$$;$)
setgrent ()
sethostent ($)
setnetent ($)
setpgrp (;$$)
setpriority ($$$)
setprotoent ($)
setpwent ()
setservent ($)
setsockopt (*$$$)
shift (;\@@)
shmctl ($$$)
shmget ($$$)
shmread ($$$$)
shmwrite ($$$$)
shutdown (*$)
sin (_)
sleep (;$)
socket (*$$$)
socketpair (**$$$)
sort undef
splice (\@@;$$@@)
split undef
sprintf ($@@)
sqrt (_)
srand (;$)
stat (;*)
state undef
study (_)
sub undef
substr ($$;$$)
symlink ($$)
syscall ($@@)
sysopen (*$$;$)
sysread (*\$$;$)
sysseek (*$$)
system undef
syswrite (*$;$$)
tell (;*)
telldir (*)
tie (\[$@@%*]$@@)
tied (\[$@@%*])
time ()
times ()
tr undef
truncate ($$)
uc (_)
ucfirst (_)
umask (;$)
undef (;\[$@@%&*])
unless undef
unlink (@@)
unpack ($_)
unshift (\@@@@)
untie (\[$@@%*])
until undef
use undef
utime (@@)
values (\[%@@])
vec ($$$)
wait ()
waitpid ($$)
wantarray ()
warn (@@)
when undef
while undef
write (;*)
x undef
xor undef
y undef
@


1.1
log
@Initial revision
@
text
@d9 3
a11 1
use Test::More tests => 234;
d14 1
a14 1
    my ($keyword, $proto) = split;
d23 4
a26 1
	is( "(".prototype("CORE::".$keyword).")", $proto, $keyword );
d33 14
a46 1
abs (;$)
d48 2
a49 2
alarm (;$)
and ()
d54 1
d61 2
a62 2
chr (;$)
chroot (;$)
d65 1
a65 1
cmp unknown
d67 2
a68 2
continue unknown
cos (;$)
d72 1
d78 1
a78 1
each (\%)
d88 1
a88 2
eq ($$)
err unknown
d90 1
d94 2
a95 1
exp (;$)
d104 1
a104 1
ge ($$)
d121 1
a121 1
getprotobynumber ($)
d131 2
a132 1
glob undef
d136 2
a137 2
gt ($$)
hex (;$)
d140 1
a140 1
int (;$)
d143 1
a143 1
keys (\%)
d146 4
a149 4
lc (;$)
lcfirst (;$)
le ($$)
length (;$)
d154 4
a157 4
lock (\$)
log (;$)
lstat (*)
lt ($$)
d160 1
a160 1
mkdir ($;$)
d166 1
a166 1
ne ($$)
d169 2
a170 2
not ($)
oct (;$)
d173 2
a174 2
or ()
ord (;$)
d180 1
a180 1
pos undef
d183 1
a183 1
prototype undef
d188 1
a188 1
quotemeta (;$)
d195 2
a196 2
readlink (;$)
readpipe unknown
d199 1
a199 1
ref (;$)
d207 1
a207 1
rmdir (;$)
d209 2
a210 1
scalar undef
d213 1
a213 1
select (;*)
d221 1
a221 1
setpgrp undef
d233 1
a233 1
sin (;$)
d241 1
a241 1
sqrt (;$)
d243 3
a245 2
stat (*)
study undef
d257 2
a258 2
tie undef
tied undef
d263 2
a264 2
uc (;$)
ucfirst (;$)
d266 1
a266 1
undef undef
d269 1
a269 1
unpack ($$)
d271 1
a271 1
untie undef
d275 1
a275 1
values (\%)
d281 1
d284 2
a285 2
x unknown
xor ($$)
@


1.1.1.1
log
@perl 5.8.2 from CPAN
@
text
@@


1.1.1.2
log
@perl 5.8.3 from CPAN
@
text
@d9 1
a9 3
BEGIN { require './test.pl'; }
plan tests => 234;

@


1.1.1.3
log
@perl 5.8.8 import
@
text
@d200 1
a200 1
setpgrp (;$$)
@


1.1.1.4
log
@import perl 5.10.0 from CPAN
@
text
@d10 1
a10 1
plan tests => 237;
d14 1
a14 1
    (my $keyword, my $proto, local $TODO) = split " ", $_, 3;
d30 1
a30 1
abs (_)
d32 1
a32 1
alarm (_)
d44 2
a45 2
chr (_)
chroot (_)
d50 2
a51 2
continue ()
cos (_)
d71 1
d76 1
a76 1
exp (_)
a111 1
given undef
d117 1
a117 1
hex (_)
d120 1
a120 1
int (_)
d126 2
a127 2
lc (_)
lcfirst (_)
d129 1
a129 1
length (_)
d135 1
a135 1
log (_)
d140 1
a140 1
mkdir (_;$)
d150 1
a150 1
oct (_)
d154 1
a154 1
ord (_)
d168 1
a168 1
quotemeta (_)
d175 2
a176 2
readlink (_)
readpipe (_)
d179 1
a179 1
ref (_)
d187 1
a187 1
rmdir (_)
a188 1
say undef
d212 1
a212 1
sin (_)
d220 1
a220 1
sqrt (_)
a222 1
state undef
d241 2
a242 2
uc (_)
ucfirst (_)
d247 1
a247 1
unpack ($;$)
a258 1
when undef
@


1.1.1.5
log
@Perl 5.12.2 from CPAN
@
text
@d60 1
a60 1
each (\[@@%])
d123 1
a123 1
keys (\[@@%])
d255 1
a255 1
values (\[@@%])
@


1.1.1.6
log
@import perl 5.16.3 from CPAN - worked on by Andrew Fresh and myself
@
text
@d10 1
a10 1
plan tests => 248;
a29 7
__FILE__ ()
__LINE__ ()
__PACKAGE__ ()
__DATA__ undef
__END__ undef
__SUB__ ()
CORE unknown
d33 1
a33 1
and undef
a37 1
break ()
d48 1
a48 1
cmp undef
a54 1
default undef
d60 1
a60 1
each (+)
d70 1
a70 1
eq undef
a71 1
evalbytes (_)
a75 1
fc (_)
d84 1
a84 1
ge undef
d101 1
a101 1
getprotobynumber ($;)
d116 1
a116 1
gt undef
d123 1
a123 1
keys (+)
d128 1
a128 1
le undef
d134 1
a134 1
lock (\[$@@%&*])
d136 2
a137 2
lstat (;*)
lt undef
d146 1
a146 1
ne undef
d149 1
a149 1
not ($;)
d153 1
a153 1
or undef
d159 1
a159 1
pop (;+)
d164 1
a164 1
push (+@@)
d193 1
a193 1
select undef
d207 1
a207 1
shift (;+)
d218 1
a218 1
splice (+;$$@@)
d223 1
a223 1
stat (;*)
d237 2
a238 2
tie (\[$@@%*]$@@)
tied (\[$@@%*])
d249 3
a251 3
unpack ($_)
unshift (+@@)
untie (\[$@@%*])
d255 1
a255 1
values (+)
d264 2
a265 2
x undef
xor undef
@


1.1.1.7
log
@Import perl-5.18.2

OK espie@@ sthen@@ deraadt@@
@
text
@d10 1
a10 1
plan tests => 254;
d23 1
a23 4
	is(
	    "(".(prototype("CORE::".$keyword) // 'undef').")", $proto,
	    $keyword
	);
a35 2
AUTOLOAD undef
BEGIN undef
a36 4
DESTROY undef
END undef
INIT undef
CHECK undef
d123 1
a123 1
glob (_;)
d171 1
a171 1
pos (;\[$*])
d174 1
a174 1
prototype ($)
d201 1
a201 1
scalar ($)
d236 1
a236 1
study (_)
d257 1
a257 1
undef (;\[$@@%&*])
@


