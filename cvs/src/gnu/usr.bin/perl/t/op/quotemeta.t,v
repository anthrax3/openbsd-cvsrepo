head	1.13;
access;
symbols
	PERL_5_24_2:1.1.1.8
	OPENBSD_6_1:1.13.0.4
	OPENBSD_6_1_BASE:1.13
	OPENBSD_6_0:1.12.0.8
	OPENBSD_6_0_BASE:1.12
	OPENBSD_5_9:1.12.0.2
	OPENBSD_5_9_BASE:1.12
	OPENBSD_5_8:1.12.0.4
	OPENBSD_5_8_BASE:1.12
	PERL_5_20_2:1.1.1.7
	OPENBSD_5_7:1.10.0.2
	OPENBSD_5_7_BASE:1.10
	PERL_5_20_1:1.1.1.7
	OPENBSD_5_6:1.8.0.4
	OPENBSD_5_6_BASE:1.8
	PERL_5_18_2:1.1.1.7
	PERL:1.1.1
	OPENBSD_5_5:1.7.0.6
	OPENBSD_5_5_BASE:1.7
	OPENBSD_5_4:1.7.0.2
	OPENBSD_5_4_BASE:1.7
	PERL_5_16_3:1.1.1.6
	OPENBSD_5_3:1.6.0.38
	OPENBSD_5_3_BASE:1.6
	OPENBSD_5_2:1.6.0.36
	OPENBSD_5_2_BASE:1.6
	OPENBSD_5_1_BASE:1.6
	OPENBSD_5_1:1.6.0.34
	OPENBSD_5_0:1.6.0.32
	OPENBSD_5_0_BASE:1.6
	OPENBSD_4_9:1.6.0.30
	OPENBSD_4_9_BASE:1.6
	PERL_5_12_2:1.1.1.5
	OPENBSD_4_8:1.6.0.28
	OPENBSD_4_8_BASE:1.6
	OPENBSD_4_7:1.6.0.24
	OPENBSD_4_7_BASE:1.6
	PERL_5_10_1:1.1.1.5
	OPENBSD_4_6:1.6.0.26
	OPENBSD_4_6_BASE:1.6
	OPENBSD_4_5:1.6.0.22
	OPENBSD_4_5_BASE:1.6
	PERL_5_10_0:1.1.1.5
	OPENBSD_4_4:1.6.0.20
	OPENBSD_4_4_BASE:1.6
	OPENBSD_4_3:1.6.0.18
	OPENBSD_4_3_BASE:1.6
	OPENBSD_4_2:1.6.0.16
	OPENBSD_4_2_BASE:1.6
	OPENBSD_4_1:1.6.0.14
	OPENBSD_4_1_BASE:1.6
	OPENBSD_4_0:1.6.0.12
	OPENBSD_4_0_BASE:1.6
	PERL_5_8_8:1.1.1.5
	OPENBSD_3_9:1.6.0.10
	OPENBSD_3_9_BASE:1.6
	OPENBSD_3_8:1.6.0.8
	OPENBSD_3_8_BASE:1.6
	OPENBSD_3_7:1.6.0.6
	OPENBSD_3_7_BASE:1.6
	PERL_5_8_6:1.1.1.5
	OPENBSD_3_6:1.6.0.4
	OPENBSD_3_6_BASE:1.6
	PERL_5_8_5:1.1.1.5
	PERL_5_8_3:1.1.1.5
	OPENBSD_3_5:1.6.0.2
	OPENBSD_3_5_BASE:1.6
	PERL_5_8_2:1.1.1.5
	OPENBSD_3_4:1.5.0.10
	OPENBSD_3_4_BASE:1.5
	OPENBSD_3_3:1.5.0.8
	OPENBSD_3_3_BASE:1.5
	PERL_5_8_0:1.1.1.4
	OPENBSD_3_2:1.5.0.6
	OPENBSD_3_2_BASE:1.5
	OPENBSD_3_1:1.5.0.4
	OPENBSD_3_1_BASE:1.5
	OPENBSD_3_0:1.5.0.2
	OPENBSD_3_0_BASE:1.5
	PERL_5_6_1:1.1.1.4
	OPENBSD_2_9:1.4.0.6
	OPENBSD_2_9_BASE:1.4
	OPENBSD_2_8:1.4.0.4
	OPENBSD_2_8_BASE:1.4
	OPENBSD_2_7:1.4.0.2
	OPENBSD_2_7_BASE:1.4
	PERL_5_6_0:1.1.1.3
	OPENBSD_2_6:1.3.0.2
	OPENBSD_2_6_BASE:1.3
	PERL_500503:1.1.1.2
	CPAN:1.1.1
	OPENBSD_2_5:1.2.0.6
	OPENBSD_2_5_BASE:1.2
	OPENBSD_2_4:1.2.0.4
	OPENBSD_2_4_BASE:1.2
	OPENBSD_2_3:1.2.0.2
	OPENBSD_2_3_BASE:1.2
	OPENBSD_2_2:1.1.1.1.0.6
	OPENBSD_2_2_BASE:1.1.1.1
	OPENBSD_2_1:1.1.1.1.0.4
	OPENBSD_2_1_BASE:1.1.1.1
	OPENBSD_2_0:1.1.1.1.0.2
	OPENBSD_2_0_BASE:1.1.1.1
	perl5003:1.1.1.1
	lwall:1.1.1;
locks; strict;
comment	@# @;
expand	@o@;


1.13
date	2017.02.05.00.32.20;	author afresh1;	state Exp;
branches;
next	1.12;
commitid	cxJ08BvJA9Pt2PTM;

1.12
date	2015.04.25.19.26.22;	author afresh1;	state Exp;
branches;
next	1.11;
commitid	3qGYFVvfrExB70FB;

1.11
date	2015.04.25.19.14.48;	author afresh1;	state Exp;
branches;
next	1.10;
commitid	XRK22kO4se3v2i2I;

1.10
date	2014.11.17.21.01.01;	author afresh1;	state Exp;
branches;
next	1.9;
commitid	LnErp1MFKSuew5Fr;

1.9
date	2014.11.17.20.57.07;	author afresh1;	state Exp;
branches;
next	1.8;
commitid	QP75iYx42Uo7mMxO;

1.8
date	2014.03.24.15.05.33;	author afresh1;	state Exp;
branches;
next	1.7;

1.7
date	2013.03.25.20.40.59;	author sthen;	state Exp;
branches;
next	1.6;

1.6
date	2003.12.03.03.02.49;	author millert;	state Exp;
branches;
next	1.5;

1.5
date	2001.05.24.18.36.20;	author millert;	state Exp;
branches;
next	1.4;

1.4
date	2000.04.06.17.08.28;	author millert;	state Exp;
branches;
next	1.3;

1.3
date	99.04.29.22.52.37;	author millert;	state Exp;
branches;
next	1.2;

1.2
date	97.11.30.08.05.34;	author millert;	state Exp;
branches;
next	1.1;

1.1
date	96.08.19.10.13.21;	author downsj;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	96.08.19.10.13.21;	author downsj;	state Exp;
branches;
next	1.1.1.2;

1.1.1.2
date	99.04.29.22.41.48;	author millert;	state Exp;
branches;
next	1.1.1.3;

1.1.1.3
date	2000.04.06.16.10.50;	author millert;	state Exp;
branches;
next	1.1.1.4;

1.1.1.4
date	2001.05.24.18.25.44;	author millert;	state Exp;
branches;
next	1.1.1.5;

1.1.1.5
date	2003.12.03.02.44.32;	author millert;	state Exp;
branches;
next	1.1.1.6;

1.1.1.6
date	2013.03.25.20.09.36;	author sthen;	state Exp;
branches;
next	1.1.1.7;

1.1.1.7
date	2014.03.24.14.59.10;	author afresh1;	state Exp;
branches;
next	1.1.1.8;

1.1.1.8
date	2017.08.14.13.46.24;	author afresh1;	state Exp;
branches;
next	;
commitid	fAzrs78vdW2Yfc6A;


desc
@@


1.13
log
@Fix merge issues, remove excess files - match perl-5.24.1 dist
@
text
@#!./perl

BEGIN {
    chdir 't' if -d 't';
    @@INC = qw(../lib .);
    require Config; import Config;
    require "./test.pl";
    require "./loc_tools.pl";
}

plan tests => 60;

if ($Config{ebcdic} eq 'define') {
    $_ = join "", map chr($_), 129..233;

    # 105 characters - 52 letters = 53 backslashes
    # 105 characters + 53 backslashes = 158 characters
    $_ = quotemeta $_;
    is(length($_), 158, "quotemeta string");
    # 104 non-backslash characters
    is(tr/\\//cd, 104, "tr count non-backslashed");
} else { # some ASCII descendant, then.
    $_ = join "", map chr(utf8::unicode_to_native($_)), 32..127;

    # 96 characters - 52 letters - 10 digits - 1 underscore = 33 backslashes
    # 96 characters + 33 backslashes = 129 characters
    $_ = quotemeta $_;
    is(length($_), 129, "quotemeta string");
    # 95 non-backslash characters
    is(tr/\\//cd, 95, "tr count non-backslashed");
}

is(length(quotemeta ""), 0, "quotemeta empty string");

is("aA\UbB\LcC\EdD", "aABBccdD", 'aA\UbB\LcC\EdD');
is("aA\LbB\UcC\EdD", "aAbbCCdD", 'aA\LbB\UcC\EdD');
is("\L\upERL", "Perl", '\L\upERL');
is("\u\LpERL", "Perl", '\u\LpERL');
is("\U\lPerl", "pERL", '\U\lPerl');
is("\l\UPerl", "pERL", '\l\UPerl');
is("\u\LpE\Q#X#\ER\EL", "Pe\\#x\\#rL", '\u\LpE\Q#X#\ER\EL');
is("\l\UPe\Q!x!\Er\El", "pE\\!X\\!Rl", '\l\UPe\Q!x!\Er\El');
is("\Q\u\LpE.X.R\EL\E.", "Pe\\.x\\.rL.", '\Q\u\LpE.X.R\EL\E.');
is("\Q\l\UPe*x*r\El\E*", "pE\\*X\\*Rl*", '\Q\l\UPe*x*r\El\E*');
is("\U\lPerl\E\E\E\E", "pERL", '\U\lPerl\E\E\E\E');
is("\l\UPerl\E\E\E\E", "pERL", '\l\UPerl\E\E\E\E');

is(quotemeta("\x{263a}"), "\\\x{263a}", "quotemeta Unicode quoted");
is(length(quotemeta("\x{263a}")), 2, "quotemeta Unicode quoted length");
is(quotemeta("\x{100}"), "\x{100}", "quotemeta Unicode nonquoted");
is(length(quotemeta("\x{100}")), 1, "quotemeta Unicode nonquoted length");

my $char = ":";
utf8::upgrade($char);
is(quotemeta($char), "\\$char", "quotemeta '$char' in UTF-8");
is(length(quotemeta($char)), 2, "quotemeta '$char'  in UTF-8 length");

$char = "M";
utf8::upgrade($char);
is(quotemeta($char), "$char", "quotemeta '$char' in UTF-8");
is(length(quotemeta($char)), 1, "quotemeta '$char'  in UTF-8 length");

my $char = "\N{U+D7}";
utf8::upgrade($char);
is(quotemeta($char), "\\$char", "quotemeta '\\N{U+D7}' in UTF-8");
is(length(quotemeta($char)), 2, "quotemeta '\\N{U+D7}'  in UTF-8 length");

$char = "\N{U+DF}";
utf8::upgrade($char);
is(quotemeta($char), "$char", "quotemeta '\\N{U+DF}' in UTF-8");
is(length(quotemeta($char)), 1, "quotemeta '\\N{U+DF}'  in UTF-8 length");

{
    no feature 'unicode_strings';

    # BF is chosen because it is NOt alphanumeric in both Latin1 and EBCDIC
    # DF is chosen because it IS alphanumeric in both Latin1 and EBCDIC
    is(quotemeta("\x{bf}"), "\\\x{bf}", "quotemeta Latin1 no unicode_strings quoted");
    is(length(quotemeta("\x{bf}")), 2, "quotemeta Latin1 no unicode_strings quoted length");
    is(quotemeta("\x{df}"), "\\\x{df}", "quotemeta Latin1 no unicode_strings quoted");
    is(length(quotemeta("\x{df}")), 2, "quotemeta Latin1 no unicode_strings quoted length");

  SKIP: {
    skip 'Locales not available', 8 unless locales_enabled('LC_CTYPE');
    use locale;

    my $char = ":";
    is(quotemeta($char), "\\$char", "quotemeta '$char' locale");
    is(length(quotemeta($char)), 2, "quotemeta '$char' locale");

    $char = "M";
    utf8::upgrade($char);
    is(quotemeta($char), "$char", "quotemeta '$char' locale");
    is(length(quotemeta($char)), 1, "quotemeta '$char' locale");

    my $char = "\x{BF}";
    is(quotemeta($char), "\\$char", "quotemeta '\\x{BF}' locale");
    is(length(quotemeta($char)), 2, "quotemeta '\\x{BF}' locale length");

    $char = "\x{DF}";  # Every non-ASCII Latin1 is quoted in locale.
    is(quotemeta($char), "\\$char", "quotemeta '\\x{DF}' locale");
    is(length(quotemeta($char)), 2, "quotemeta '\\x{DF}' locale length");
    }
}
{
    use feature 'unicode_strings';
    is(quotemeta("\x{bf}"), "\\\x{bf}", "quotemeta Latin1 unicode_strings quoted");
    is(length(quotemeta("\x{bf}")), 2, "quotemeta Latin1 unicode_strings quoted length");
    is(quotemeta("\x{df}"), "\x{df}", "quotemeta Latin1 unicode_strings nonquoted");
    is(length(quotemeta("\x{df}")), 1, "quotemeta Latin1 unicode_strings nonquoted length");

  SKIP: {
    skip 'Locales not available', 12 unless locales_enabled('LC_CTYPE');
    use locale;

    my $char = ":";
    utf8::upgrade($char);
    is(quotemeta($char), "\\$char", "quotemeta '$char' locale in UTF-8");
    is(length(quotemeta($char)), 2, "quotemeta '$char' locale  in UTF-8 length");

    $char = "M";
    utf8::upgrade($char);
    is(quotemeta($char), "$char", "quotemeta '$char' locale in UTF-8");
    is(length(quotemeta($char)), 1, "quotemeta '$char' locale in UTF-8 length");

    my $char = "\N{U+D7}";
    utf8::upgrade($char);
    is(quotemeta($char), "\\$char", "quotemeta '\\N{U+D7}' locale in UTF-8");
    is(length(quotemeta($char)), 2, "quotemeta '\\N{U+D7}' locale in UTF-8 length");

    $char = "\N{U+DF}";  # Every non-ASCII Latin1 is quoted in locale.
    utf8::upgrade($char);
    is(quotemeta($char), "\\$char", "quotemeta '\\N{U+DF}' locale in UTF-8");
    is(length(quotemeta($char)), 2, "quotemeta '\\N{U+DF}' locale in UTF-8 length");

    is(quotemeta("\x{263a}"), "\\\x{263a}", "quotemeta locale Unicode quoted");
    is(length(quotemeta("\x{263a}")), 2, "quotemeta locale Unicode quoted length");
    is(quotemeta("\x{100}"), "\x{100}", "quotemeta locale Unicode nonquoted");
    is(length(quotemeta("\x{100}")), 1, "quotemeta locale Unicode nonquoted length");
  }
}

$a = "foo|bar";
is("a\Q\Ec$a", "acfoo|bar", '\Q\E');
is("a\L\Ec$a", "acfoo|bar", '\L\E');
is("a\l\Ec$a", "acfoo|bar", '\l\E');
is("a\U\Ec$a", "acfoo|bar", '\U\E');
is("a\u\Ec$a", "acfoo|bar", '\u\E');
@


1.12
log
@Apply local patches, remove excess files - perl-5.20.2
@
text
@d7 2
a8 1
    require "test.pl";
d23 1
a23 1
    $_ = join "", map chr($_), 32..127;
d68 1
a68 1
$char = "\N{U+D8}";
d70 2
a71 2
is(quotemeta($char), "$char", "quotemeta '\\N{U+D8}' in UTF-8");
is(length(quotemeta($char)), 1, "quotemeta '\\N{U+D8}'  in UTF-8 length");
d75 7
a81 4
    is(quotemeta("\x{d7}"), "\\\x{d7}", "quotemeta Latin1 no unicode_strings quoted");
    is(length(quotemeta("\x{d7}")), 2, "quotemeta Latin1 no unicode_strings quoted length");
    is(quotemeta("\x{d8}"), "\\\x{d8}", "quotemeta Latin1 no unicode_strings quoted");
    is(length(quotemeta("\x{d8}")), 2, "quotemeta Latin1 no unicode_strings quoted length");
d84 2
a85 2
    skip 'No locale testing without d_setlocale', 8 if(!$Config{d_setlocale});
    require locale; import locale;
d96 7
a102 7
    my $char = "\x{D7}";
    is(quotemeta($char), "\\$char", "quotemeta '\\x{D7}' locale");
    is(length(quotemeta($char)), 2, "quotemeta '\\x{D7}' locale length");

    $char = "\x{D8}";  # Every non-ASCII Latin1 is quoted in locale.
    is(quotemeta($char), "\\$char", "quotemeta '\\x{D8}' locale");
    is(length(quotemeta($char)), 2, "quotemeta '\\x{D8}' locale length");
d107 4
a110 4
    is(quotemeta("\x{d7}"), "\\\x{d7}", "quotemeta Latin1 unicode_strings quoted");
    is(length(quotemeta("\x{d7}")), 2, "quotemeta Latin1 unicode_strings quoted length");
    is(quotemeta("\x{d8}"), "\x{d8}", "quotemeta Latin1 unicode_strings nonquoted");
    is(length(quotemeta("\x{d8}")), 1, "quotemeta Latin1 unicode_strings nonquoted length");
d113 2
a114 6
    skip 'No locale testing without d_setlocale', 12 if(!$Config{d_setlocale});
    BEGIN {
        if($Config{d_setlocale}) {
            require locale; import locale;
        }
    }
d131 4
a134 12
    SKIP: {
    if (
        !$Config::Config{d_setlocale}
    || $Config::Config{ccflags} =~ /\bD?NO_LOCALE(_|\b)/
    ) {
        skip "no locale support", 2
    }
        $char = "\N{U+D8}";  # Every non-ASCII Latin1 is quoted in locale.
        utf8::upgrade($char);
        is(quotemeta($char), "\\$char", "quotemeta '\\N{U+D8}' locale in UTF-8");
        is(length(quotemeta($char)), 2, "quotemeta '\\N{U+D8}' locale in UTF-8 length");
    }
@


1.11
log
@Fix merge issues, remove excess files - match perl-5.20.2 dist
@
text
@d131 12
a142 4
    $char = "\N{U+D8}";  # Every non-ASCII Latin1 is quoted in locale.
    utf8::upgrade($char);
    is(quotemeta($char), "\\$char", "quotemeta '\\N{U+D8}' locale in UTF-8");
    is(length(quotemeta($char)), 2, "quotemeta '\\N{U+D8}' locale in UTF-8 length");
@


1.10
log
@Apply local patches to perl-5.20.1

ok deraadt@@ sthen@@ espie@@ miod@@
@
text
@d131 4
a134 12
    SKIP: {
    if (
        !$Config::Config{d_setlocale}
    || $Config::Config{ccflags} =~ /\bD?NO_LOCALE(_|\b)/
    ) {
        skip "no locale support", 2
    }
        $char = "\N{U+D8}";  # Every non-ASCII Latin1 is quoted in locale.
        utf8::upgrade($char);
        is(quotemeta($char), "\\$char", "quotemeta '\\N{U+D8}' locale in UTF-8");
        is(length(quotemeta($char)), 2, "quotemeta '\\N{U+D8}' locale in UTF-8 length");
    }
@


1.9
log
@Fix merge conflicts, remove extra files, match upstream perl-5.20.1

ok deraadt@@ sthen@@ espie@@ miod@@
@
text
@d131 12
a142 4
    $char = "\N{U+D8}";  # Every non-ASCII Latin1 is quoted in locale.
    utf8::upgrade($char);
    is(quotemeta($char), "\\$char", "quotemeta '\\N{U+D8}' locale in UTF-8");
    is(length(quotemeta($char)), 2, "quotemeta '\\N{U+D8}' locale in UTF-8 length");
@


1.8
log
@Merge perl-5.18.2 plus local patches, remove old files

OK espie@@ sthen@@ deraadt@@
@
text
@d131 4
a134 12
    SKIP: {
    if (
        !$Config::Config{d_setlocale}
    || $Config::Config{ccflags} =~ /\bD?NO_LOCALE(_|\b)/
    ) {
        skip "no locale support", 2
    }
        $char = "\N{U+D8}";  # Every non-ASCII Latin1 is quoted in locale.
        utf8::upgrade($char);
        is(quotemeta($char), "\\$char", "quotemeta '\\N{U+D8}' locale in UTF-8");
        is(length(quotemeta($char)), 2, "quotemeta '\\N{U+D8}' locale in UTF-8 length");
    }
@


1.7
log
@merge/resolve conflicts
(some more to do after this one)
@
text
@d79 3
a81 1
    use locale;
d99 1
d108 7
a114 1
    use locale;
d148 1
@


1.6
log
@Resolve conflicts for perl 5.8.2, remove old files, and add OpenBSD-specific scaffolding
@
text
@d10 1
a10 1
plan tests => 22;
d47 93
a139 2
is(quotemeta("\x{263a}"), "\x{263a}", "quotemeta Unicode");
is(length(quotemeta("\x{263a}")), 1, "quotemeta Unicode length");
@


1.5
log
@merge in perl 5.6.1 with our local changes
@
text
@d5 1
a5 1
    @@INC = '../lib';
d7 1
d10 1
a10 1
print "1..17\n";
d13 1
a13 1
    $_=join "", map chr($_), 129..233;
d17 2
a18 2
    $_= quotemeta $_;
    if ( length == 158 ){print "ok 1\n"} else {print "not ok 1\n"}
d20 1
a20 1
    if (tr/\\//cd == 104){print "ok 2\n"} else {print "not ok 2\n"}
d22 1
a22 1
    $_=join "", map chr($_), 32..127;
d26 2
a27 2
    $_= quotemeta $_;
    if ( length == 129 ){print "ok 1\n"} else {print "not ok 1\n"}
d29 1
a29 1
    if (tr/\\//cd == 95){print "ok 2\n"} else {print "not ok 2\n"}
d32 1
a32 1
if (length quotemeta "" == 0){print "ok 3\n"} else {print "not ok 3\n"}
d34 22
a55 15
print "aA\UbB\LcC\EdD" eq "aABBccdD" ? "ok 4\n" : "not ok 4 \n";
print "aA\LbB\UcC\EdD" eq "aAbbCCdD" ? "ok 5\n" : "not ok 5 \n";
print "\L\upERL" eq "Perl" ? "ok 6\n" : "not ok 6 \n";
print "\u\LpERL" eq "Perl" ? "ok 7\n" : "not ok 7 \n";
print "\U\lPerl" eq "pERL" ? "ok 8\n" : "not ok 8 \n";
print "\l\UPerl" eq "pERL" ? "ok 9\n" : "not ok 9 \n";
print "\u\LpE\Q#X#\ER\EL" eq "Pe\\#x\\#rL" ? "ok 10\n" : "not ok 10 \n";
print "\l\UPe\Q!x!\Er\El" eq "pE\\!X\\!Rl" ? "ok 11\n" : "not ok 11 \n";
print "\Q\u\LpE.X.R\EL\E." eq "Pe\\.x\\.rL." ? "ok 12\n" : "not ok 12 \n";
print "\Q\l\UPe*x*r\El\E*" eq "pE\\*X\\*Rl*" ? "ok 13\n" : "not ok 13 \n";
print "\U\lPerl\E\E\E\E" eq "pERL" ? "ok 14\n" : "not ok 14 \n";
print "\l\UPerl\E\E\E\E" eq "pERL" ? "ok 15\n" : "not ok 15 \n";

print length(quotemeta("\x{263a}")) == 1 ? "ok 16\n" : "not ok 16\n";
print quotemeta("\x{263a}") eq "\x{263a}" ? "ok 17\n" : "not ok 17\n";
@


1.4
log
@perl-5.6.0 + local changes
@
text
@d5 1
a5 1
    unshift @@INC, '../lib' if -d '../lib';
d9 1
a9 1
print "1..15\n";
d16 1
a16 1
    $_=quotemeta $_;
d25 1
a25 1
    $_=quotemeta $_;
d45 3
@


1.3
log
@perl5.005_03 (stock)
@
text
@d3 6
d11 1
a11 1
if ($^O eq 'os390') { # An EBCDIC variant.
@


1.2
log
@perl 5.004_04
@
text
@d2 1
d5 11
a15 1
$_=join "", map chr($_), 32..127;
d17 7
a23 6
# 96 characters - 52 letters - 10 digits - 1 underscore = 33 backslashes
# 96 characters + 33 backslashes = 129 characters
$_=quotemeta $_;
if ( length == 129 ){print "ok 1\n"} else {print "not ok 1\n"}
# 95 non-backslash characters
if (tr/\\//cd == 95){print "ok 2\n"} else {print "not ok 2\n"}
@


1.1
log
@Initial revision
@
text
@d4 1
a4 1
$_=join "", grep $_=chr($_), 32..127;
d6 2
a7 2
#95 characters - 52 letters - 10 digits = 33 backslashes
#95 characters + 33 backslashes = 128 characters
d9 3
a11 2
if ( length == 128 ){print "ok 1\n"} else {print "not ok 1\n"}
if (tr/\\//cd == 94){print "ok 2\n"} else {print "not ok 2\n"}
a12 1
#perl5a11 bus errors on this:
@


1.1.1.1
log
@Import of Perl 5.003 into the tree.  Makefile.bsd-wrapper and
config.sh.OpenBSD are the only local changes.
@
text
@@


1.1.1.2
log
@perl5.005_03
@
text
@a1 1

d4 1
a4 11
if ($^O eq 'os390') { # An EBCDIC variant.
    $_=join "", map chr($_), 129..233;

    # 105 characters - 52 letters = 53 backslashes
    # 105 characters + 53 backslashes = 158 characters
    $_=quotemeta $_;
    if ( length == 158 ){print "ok 1\n"} else {print "not ok 1\n"}
    # 104 non-backslash characters
    if (tr/\\//cd == 104){print "ok 2\n"} else {print "not ok 2\n"}
} else { # some ASCII descendant, then.
    $_=join "", map chr($_), 32..127;
d6 5
a10 7
    # 96 characters - 52 letters - 10 digits - 1 underscore = 33 backslashes
    # 96 characters + 33 backslashes = 129 characters
    $_=quotemeta $_;
    if ( length == 129 ){print "ok 1\n"} else {print "not ok 1\n"}
    # 95 non-backslash characters
    if (tr/\\//cd == 95){print "ok 2\n"} else {print "not ok 2\n"}
}
d12 1
@


1.1.1.3
log
@virgin perl 5.6.0
@
text
@a2 6
BEGIN {
    chdir 't' if -d 't';
    unshift @@INC, '../lib' if -d '../lib';
    require Config; import Config;
}

d5 1
a5 1
if ($Config{ebcdic} eq 'define') {
@


1.1.1.4
log
@stock perl 5.6.1
@
text
@d5 1
a5 1
    @@INC = '../lib';
d9 1
a9 1
print "1..17\n";
d16 1
a16 1
    $_= quotemeta $_;
d25 1
a25 1
    $_= quotemeta $_;
a44 3

print length(quotemeta("\x{263a}")) == 1 ? "ok 16\n" : "not ok 16\n";
print quotemeta("\x{263a}") eq "\x{263a}" ? "ok 17\n" : "not ok 17\n";
@


1.1.1.5
log
@perl 5.8.2 from CPAN
@
text
@d5 1
a5 1
    @@INC = qw(../lib .);
a6 1
    require "test.pl";
d9 1
a9 1
plan tests => 22;
d12 1
a12 1
    $_ = join "", map chr($_), 129..233;
d16 2
a17 2
    $_ = quotemeta $_;
    is(length($_), 158, "quotemeta string");
d19 1
a19 1
    is(tr/\\//cd, 104, "tr count non-backslashed");
d21 1
a21 1
    $_ = join "", map chr($_), 32..127;
d25 2
a26 2
    $_ = quotemeta $_;
    is(length($_), 129, "quotemeta string");
d28 1
a28 1
    is(tr/\\//cd, 95, "tr count non-backslashed");
d31 1
a31 1
is(length(quotemeta ""), 0, "quotemeta empty string");
d33 15
a47 22
is("aA\UbB\LcC\EdD", "aABBccdD", 'aA\UbB\LcC\EdD');
is("aA\LbB\UcC\EdD", "aAbbCCdD", 'aA\LbB\UcC\EdD');
is("\L\upERL", "Perl", '\L\upERL');
is("\u\LpERL", "Perl", '\u\LpERL');
is("\U\lPerl", "pERL", '\U\lPerl');
is("\l\UPerl", "pERL", '\l\UPerl');
is("\u\LpE\Q#X#\ER\EL", "Pe\\#x\\#rL", '\u\LpE\Q#X#\ER\EL');
is("\l\UPe\Q!x!\Er\El", "pE\\!X\\!Rl", '\l\UPe\Q!x!\Er\El');
is("\Q\u\LpE.X.R\EL\E.", "Pe\\.x\\.rL.", '\Q\u\LpE.X.R\EL\E.');
is("\Q\l\UPe*x*r\El\E*", "pE\\*X\\*Rl*", '\Q\l\UPe*x*r\El\E*');
is("\U\lPerl\E\E\E\E", "pERL", '\U\lPerl\E\E\E\E');
is("\l\UPerl\E\E\E\E", "pERL", '\l\UPerl\E\E\E\E');

is(quotemeta("\x{263a}"), "\x{263a}", "quotemeta Unicode");
is(length(quotemeta("\x{263a}")), 1, "quotemeta Unicode length");

$a = "foo|bar";
is("a\Q\Ec$a", "acfoo|bar", '\Q\E');
is("a\L\Ec$a", "acfoo|bar", '\L\E');
is("a\l\Ec$a", "acfoo|bar", '\l\E');
is("a\U\Ec$a", "acfoo|bar", '\U\E');
is("a\u\Ec$a", "acfoo|bar", '\u\E');
@


1.1.1.6
log
@import perl 5.16.3 from CPAN - worked on by Andrew Fresh and myself
@
text
@d10 1
a10 1
plan tests => 60;
d47 2
a48 85
is(quotemeta("\x{263a}"), "\\\x{263a}", "quotemeta Unicode quoted");
is(length(quotemeta("\x{263a}")), 2, "quotemeta Unicode quoted length");
is(quotemeta("\x{100}"), "\x{100}", "quotemeta Unicode nonquoted");
is(length(quotemeta("\x{100}")), 1, "quotemeta Unicode nonquoted length");

my $char = ":";
utf8::upgrade($char);
is(quotemeta($char), "\\$char", "quotemeta '$char' in UTF-8");
is(length(quotemeta($char)), 2, "quotemeta '$char'  in UTF-8 length");

$char = "M";
utf8::upgrade($char);
is(quotemeta($char), "$char", "quotemeta '$char' in UTF-8");
is(length(quotemeta($char)), 1, "quotemeta '$char'  in UTF-8 length");

my $char = "\N{U+D7}";
utf8::upgrade($char);
is(quotemeta($char), "\\$char", "quotemeta '\\N{U+D7}' in UTF-8");
is(length(quotemeta($char)), 2, "quotemeta '\\N{U+D7}'  in UTF-8 length");

$char = "\N{U+D8}";
utf8::upgrade($char);
is(quotemeta($char), "$char", "quotemeta '\\N{U+D8}' in UTF-8");
is(length(quotemeta($char)), 1, "quotemeta '\\N{U+D8}'  in UTF-8 length");

{
    no feature 'unicode_strings';
    is(quotemeta("\x{d7}"), "\\\x{d7}", "quotemeta Latin1 no unicode_strings quoted");
    is(length(quotemeta("\x{d7}")), 2, "quotemeta Latin1 no unicode_strings quoted length");
    is(quotemeta("\x{d8}"), "\\\x{d8}", "quotemeta Latin1 no unicode_strings quoted");
    is(length(quotemeta("\x{d8}")), 2, "quotemeta Latin1 no unicode_strings quoted length");

    use locale;

    my $char = ":";
    is(quotemeta($char), "\\$char", "quotemeta '$char' locale");
    is(length(quotemeta($char)), 2, "quotemeta '$char' locale");

    $char = "M";
    utf8::upgrade($char);
    is(quotemeta($char), "$char", "quotemeta '$char' locale");
    is(length(quotemeta($char)), 1, "quotemeta '$char' locale");

    my $char = "\x{D7}";
    is(quotemeta($char), "\\$char", "quotemeta '\\x{D7}' locale");
    is(length(quotemeta($char)), 2, "quotemeta '\\x{D7}' locale length");

    $char = "\x{D8}";  # Every non-ASCII Latin1 is quoted in locale.
    is(quotemeta($char), "\\$char", "quotemeta '\\x{D8}' locale");
    is(length(quotemeta($char)), 2, "quotemeta '\\x{D8}' locale length");
}
{
    use feature 'unicode_strings';
    is(quotemeta("\x{d7}"), "\\\x{d7}", "quotemeta Latin1 unicode_strings quoted");
    is(length(quotemeta("\x{d7}")), 2, "quotemeta Latin1 unicode_strings quoted length");
    is(quotemeta("\x{d8}"), "\x{d8}", "quotemeta Latin1 unicode_strings nonquoted");
    is(length(quotemeta("\x{d8}")), 1, "quotemeta Latin1 unicode_strings nonquoted length");

    use locale;

    my $char = ":";
    utf8::upgrade($char);
    is(quotemeta($char), "\\$char", "quotemeta '$char' locale in UTF-8");
    is(length(quotemeta($char)), 2, "quotemeta '$char' locale  in UTF-8 length");

    $char = "M";
    utf8::upgrade($char);
    is(quotemeta($char), "$char", "quotemeta '$char' locale in UTF-8");
    is(length(quotemeta($char)), 1, "quotemeta '$char' locale in UTF-8 length");

    my $char = "\N{U+D7}";
    utf8::upgrade($char);
    is(quotemeta($char), "\\$char", "quotemeta '\\N{U+D7}' locale in UTF-8");
    is(length(quotemeta($char)), 2, "quotemeta '\\N{U+D7}' locale in UTF-8 length");

    $char = "\N{U+D8}";  # Every non-ASCII Latin1 is quoted in locale.
    utf8::upgrade($char);
    is(quotemeta($char), "\\$char", "quotemeta '\\N{U+D8}' locale in UTF-8");
    is(length(quotemeta($char)), 2, "quotemeta '\\N{U+D8}' locale in UTF-8 length");

    is(quotemeta("\x{263a}"), "\\\x{263a}", "quotemeta locale Unicode quoted");
    is(length(quotemeta("\x{263a}")), 2, "quotemeta locale Unicode quoted length");
    is(quotemeta("\x{100}"), "\x{100}", "quotemeta locale Unicode nonquoted");
    is(length(quotemeta("\x{100}")), 1, "quotemeta locale Unicode nonquoted length");
}
@


1.1.1.7
log
@Import perl-5.18.2

OK espie@@ sthen@@ deraadt@@
@
text
@d79 1
a79 3
  SKIP: {
    skip 'No locale testing without d_setlocale', 8 if(!$Config{d_setlocale});
    require locale; import locale;
a96 1
    }
d105 1
a105 7
  SKIP: {
    skip 'No locale testing without d_setlocale', 12 if(!$Config{d_setlocale});
    BEGIN {
        if($Config{d_setlocale}) {
            require locale; import locale;
        }
    }
a130 1
  }
@


1.1.1.8
log
@Import perl-5.24.2
@
text
@d7 1
a7 2
    require "./test.pl";
    require "./loc_tools.pl";
d22 1
a22 1
    $_ = join "", map chr(utf8::unicode_to_native($_)), 32..127;
d67 1
a67 1
$char = "\N{U+DF}";
d69 2
a70 2
is(quotemeta($char), "$char", "quotemeta '\\N{U+DF}' in UTF-8");
is(length(quotemeta($char)), 1, "quotemeta '\\N{U+DF}'  in UTF-8 length");
d74 4
a77 7

    # BF is chosen because it is NOt alphanumeric in both Latin1 and EBCDIC
    # DF is chosen because it IS alphanumeric in both Latin1 and EBCDIC
    is(quotemeta("\x{bf}"), "\\\x{bf}", "quotemeta Latin1 no unicode_strings quoted");
    is(length(quotemeta("\x{bf}")), 2, "quotemeta Latin1 no unicode_strings quoted length");
    is(quotemeta("\x{df}"), "\\\x{df}", "quotemeta Latin1 no unicode_strings quoted");
    is(length(quotemeta("\x{df}")), 2, "quotemeta Latin1 no unicode_strings quoted length");
d80 2
a81 2
    skip 'Locales not available', 8 unless locales_enabled('LC_CTYPE');
    use locale;
d92 7
a98 7
    my $char = "\x{BF}";
    is(quotemeta($char), "\\$char", "quotemeta '\\x{BF}' locale");
    is(length(quotemeta($char)), 2, "quotemeta '\\x{BF}' locale length");

    $char = "\x{DF}";  # Every non-ASCII Latin1 is quoted in locale.
    is(quotemeta($char), "\\$char", "quotemeta '\\x{DF}' locale");
    is(length(quotemeta($char)), 2, "quotemeta '\\x{DF}' locale length");
d103 4
a106 4
    is(quotemeta("\x{bf}"), "\\\x{bf}", "quotemeta Latin1 unicode_strings quoted");
    is(length(quotemeta("\x{bf}")), 2, "quotemeta Latin1 unicode_strings quoted length");
    is(quotemeta("\x{df}"), "\x{df}", "quotemeta Latin1 unicode_strings nonquoted");
    is(length(quotemeta("\x{df}")), 1, "quotemeta Latin1 unicode_strings nonquoted length");
d109 6
a114 2
    skip 'Locales not available', 12 unless locales_enabled('LC_CTYPE');
    use locale;
d131 1
a131 1
    $char = "\N{U+DF}";  # Every non-ASCII Latin1 is quoted in locale.
d133 2
a134 2
    is(quotemeta($char), "\\$char", "quotemeta '\\N{U+DF}' locale in UTF-8");
    is(length(quotemeta($char)), 2, "quotemeta '\\N{U+DF}' locale in UTF-8 length");
@


