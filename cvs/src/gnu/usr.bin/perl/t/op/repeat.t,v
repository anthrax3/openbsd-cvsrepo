head	1.10;
access;
symbols
	OPENBSD_6_2_BASE:1.10
	PERL_5_24_2:1.1.1.8
	OPENBSD_6_1:1.10.0.4
	OPENBSD_6_1_BASE:1.10
	OPENBSD_6_0:1.9.0.10
	OPENBSD_6_0_BASE:1.9
	OPENBSD_5_9:1.9.0.4
	OPENBSD_5_9_BASE:1.9
	OPENBSD_5_8:1.9.0.6
	OPENBSD_5_8_BASE:1.9
	PERL_5_20_2:1.1.1.7
	OPENBSD_5_7:1.9.0.2
	OPENBSD_5_7_BASE:1.9
	PERL_5_20_1:1.1.1.7
	OPENBSD_5_6:1.8.0.36
	OPENBSD_5_6_BASE:1.8
	PERL_5_18_2:1.1.1.6
	PERL:1.1.1
	OPENBSD_5_5:1.8.0.34
	OPENBSD_5_5_BASE:1.8
	OPENBSD_5_4:1.8.0.30
	OPENBSD_5_4_BASE:1.8
	PERL_5_16_3:1.1.1.6
	OPENBSD_5_3:1.8.0.28
	OPENBSD_5_3_BASE:1.8
	OPENBSD_5_2:1.8.0.26
	OPENBSD_5_2_BASE:1.8
	OPENBSD_5_1_BASE:1.8
	OPENBSD_5_1:1.8.0.24
	OPENBSD_5_0:1.8.0.22
	OPENBSD_5_0_BASE:1.8
	OPENBSD_4_9:1.8.0.20
	OPENBSD_4_9_BASE:1.8
	PERL_5_12_2:1.1.1.6
	OPENBSD_4_8:1.8.0.18
	OPENBSD_4_8_BASE:1.8
	OPENBSD_4_7:1.8.0.14
	OPENBSD_4_7_BASE:1.8
	PERL_5_10_1:1.1.1.6
	OPENBSD_4_6:1.8.0.16
	OPENBSD_4_6_BASE:1.8
	OPENBSD_4_5:1.8.0.12
	OPENBSD_4_5_BASE:1.8
	PERL_5_10_0:1.1.1.6
	OPENBSD_4_4:1.8.0.10
	OPENBSD_4_4_BASE:1.8
	OPENBSD_4_3:1.8.0.8
	OPENBSD_4_3_BASE:1.8
	OPENBSD_4_2:1.8.0.6
	OPENBSD_4_2_BASE:1.8
	OPENBSD_4_1:1.8.0.4
	OPENBSD_4_1_BASE:1.8
	OPENBSD_4_0:1.8.0.2
	OPENBSD_4_0_BASE:1.8
	PERL_5_8_8:1.1.1.6
	OPENBSD_3_9:1.7.0.8
	OPENBSD_3_9_BASE:1.7
	OPENBSD_3_8:1.7.0.6
	OPENBSD_3_8_BASE:1.7
	OPENBSD_3_7:1.7.0.4
	OPENBSD_3_7_BASE:1.7
	PERL_5_8_6:1.1.1.5
	OPENBSD_3_6:1.7.0.2
	OPENBSD_3_6_BASE:1.7
	PERL_5_8_5:1.1.1.5
	PERL_5_8_3:1.1.1.4
	OPENBSD_3_5:1.6.0.6
	OPENBSD_3_5_BASE:1.6
	PERL_5_8_2:1.1.1.4
	OPENBSD_3_4:1.6.0.4
	OPENBSD_3_4_BASE:1.6
	OPENBSD_3_3:1.6.0.2
	OPENBSD_3_3_BASE:1.6
	PERL_5_8_0:1.1.1.4
	OPENBSD_3_2:1.5.0.6
	OPENBSD_3_2_BASE:1.5
	OPENBSD_3_1:1.5.0.4
	OPENBSD_3_1_BASE:1.5
	OPENBSD_3_0:1.5.0.2
	OPENBSD_3_0_BASE:1.5
	PERL_5_6_1:1.1.1.3
	OPENBSD_2_9:1.4.0.6
	OPENBSD_2_9_BASE:1.4
	OPENBSD_2_8:1.4.0.4
	OPENBSD_2_8_BASE:1.4
	OPENBSD_2_7:1.4.0.2
	OPENBSD_2_7_BASE:1.4
	PERL_5_6_0:1.1.1.3
	OPENBSD_2_6:1.3.0.2
	OPENBSD_2_6_BASE:1.3
	PERL_500503:1.1.1.2
	CPAN:1.1.1
	OPENBSD_2_5:1.2.0.6
	OPENBSD_2_5_BASE:1.2
	OPENBSD_2_4:1.2.0.4
	OPENBSD_2_4_BASE:1.2
	OPENBSD_2_3:1.2.0.2
	OPENBSD_2_3_BASE:1.2
	OPENBSD_2_2:1.1.1.1.0.6
	OPENBSD_2_2_BASE:1.1.1.1
	OPENBSD_2_1:1.1.1.1.0.4
	OPENBSD_2_1_BASE:1.1.1.1
	OPENBSD_2_0:1.1.1.1.0.2
	OPENBSD_2_0_BASE:1.1.1.1
	perl5003:1.1.1.1
	lwall:1.1.1;
locks; strict;
comment	@# @;
expand	@o@;


1.10
date	2017.02.05.00.32.20;	author afresh1;	state Exp;
branches;
next	1.9;
commitid	cxJ08BvJA9Pt2PTM;

1.9
date	2014.11.17.20.57.07;	author afresh1;	state Exp;
branches;
next	1.8;
commitid	QP75iYx42Uo7mMxO;

1.8
date	2006.03.28.19.23.13;	author millert;	state Exp;
branches;
next	1.7;

1.7
date	2004.08.09.18.10.27;	author millert;	state Exp;
branches;
next	1.6;

1.6
date	2002.10.27.22.25.37;	author millert;	state Exp;
branches;
next	1.5;

1.5
date	2001.05.24.18.36.21;	author millert;	state Exp;
branches;
next	1.4;

1.4
date	2000.04.06.17.08.31;	author millert;	state Exp;
branches;
next	1.3;

1.3
date	99.04.29.22.52.38;	author millert;	state Exp;
branches;
next	1.2;

1.2
date	97.11.30.08.05.40;	author millert;	state Exp;
branches;
next	1.1;

1.1
date	96.08.19.10.13.22;	author downsj;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	96.08.19.10.13.22;	author downsj;	state Exp;
branches;
next	1.1.1.2;

1.1.1.2
date	99.04.29.22.41.51;	author millert;	state Exp;
branches;
next	1.1.1.3;

1.1.1.3
date	2000.04.06.16.10.51;	author millert;	state Exp;
branches;
next	1.1.1.4;

1.1.1.4
date	2002.10.27.22.15.11;	author millert;	state Exp;
branches;
next	1.1.1.5;

1.1.1.5
date	2004.08.09.17.48.35;	author millert;	state Exp;
branches;
next	1.1.1.6;

1.1.1.6
date	2006.03.28.18.49.46;	author millert;	state Exp;
branches;
next	1.1.1.7;

1.1.1.7
date	2014.11.17.20.53.18;	author afresh1;	state Exp;
branches;
next	1.1.1.8;
commitid	B31cAbBIXiCqnL97;

1.1.1.8
date	2017.08.14.13.46.24;	author afresh1;	state Exp;
branches;
next	;
commitid	fAzrs78vdW2Yfc6A;


desc
@@


1.10
log
@Fix merge issues, remove excess files - match perl-5.24.1 dist
@
text
@#!./perl

BEGIN {
    chdir 't' if -d 't';
    @@INC = '../lib';
}

require './test.pl';
plan(tests => 48);

# compile time

is('-' x 5, '-----',    'compile time x');
is('-' x 3.1, '---',    'compile time 3.1');
is('-' x 3.9, '---',    'compile time 3.9');
is('-' x 1, '-',        '  x 1');
is('-' x 0, '',         '  x 0');
is('-' x -1, '',        '  x -1');
is('-' x undef, '',     '  x undef');
is('-' x "foo", '',     '  x "foo"');
is('-' x "3rd", '---',  '  x "3rd"');

is('ab' x 3, 'ababab',  '  more than one char');

# run time

$a = '-';
is($a x 5, '-----',     'run time x');
is($a x 3.1, '---',     '  x 3.1');
is($a x 3.9, '---',     '  x 3.9');
is($a x 1, '-',         '  x 1');
is($a x 0, '',          '  x 0');
is($a x -3, '',         '  x -3');
is($a x undef, '',      '  x undef');
is($a x "foo", '',      '  x "foo"');
is($a x "3rd", '---',   '  x "3rd"');

$a = 'ab';
is($a x 3, 'ababab',    '  more than one char');
$a = 'ab';
is($a x 0, '',          '  more than one char');
$a = 'ab';
is($a x -12, '',        '  more than one char');

$a = 'xyz';
$a x= 2;
is($a, 'xyzxyz',        'x=2');
$a x= 1;
is($a, 'xyzxyz',        'x=1');
$a x= 0;
is($a, '',              'x=0');

@@x = (1,2,3);

is(join('', @@x x 4),        '3333',                 '@@x x Y');
is(join('', (@@x) x 4),      '123123123123',         '(@@x) x Y');
is(join('', (@@x,()) x 4),   '123123123123',         '(@@x,()) x Y');
is(join('', (@@x,1) x 4),    '1231123112311231',     '(@@x,1) x Y');
is(join(':', () x 4),       '',                     '() x Y');
is(join(':', (9) x 4),      '9:9:9:9',              '(X) x Y');
is(join(':', (9,9) x 4),    '9:9:9:9:9:9:9:9',      '(X,X) x Y');
is(join('', (split(//,"123")) x 2), '123123',       'split and x');

is(join('', @@x x -12),      '',                     '@@x x -12');
is(join('', (@@x) x -14),    '',                     '(@@x) x -14');

($a, (undef)x5, $b) = 1..10;
is ("$a $b", "1 7", '(undef)xCONST on lhs of list assignment');
(($a)x3,$b) = 1..10;
is ("$a, $b", "3, 4", '($x)xCONST on lhs of list assignment');
($a, (undef)x${\6}, $b) = "a".."z";
is ("$a$b", "ah", '(undef)x$foo on lhs of list assignment');


# This test is actually testing for Digital C compiler optimizer bug,
# present in Dec C versions 5.* and 6.0 (used in Digital UNIX and VMS),
# found in December 1998.  The bug was reported to Digital^WCompaq as
#     DECC 2745 (21-Dec-1998)
# GEM_BUGS 7619 (23-Dec-1998)
# As of April 1999 the bug has been fixed in Tru64 UNIX 5.0 and is planned
# to be fixed also in 4.0G.
#
# The bug was as follows: broken code was produced for util.c:repeatcpy()
# (a utility function for the 'x' operator) in the case *all* these
# four conditions held:
#
# (1) len == 1
# (2) "from" had the 8th bit on in its single character
# (3) count > 7 (the 'x' count > 16)
# (4) the highest optimization level was used in compilation
#     (which is the default when compiling Perl)
#
# The bug looked like this (. being the eight-bit character and ? being \xff):
#
# 16 ................
# 17 .........???????.
# 18 .........???????..
# 19 .........???????...
# 20 .........???????....
# 21 .........???????.....
# 22 .........???????......
# 23 .........???????.......
# 24 .........???????.???????
# 25 .........???????.???????.
#
# The bug was triggered in the "if (len == 1)" branch.  The fix
# was to introduce a new temporary variable.  In diff -u format:
#
#     register char *frombase = from;
# 
#     if (len == 1) {
#-       todo = *from;
#+       register char c = *from;
#        while (count-- > 0)
#-           *to++ = todo;
#+           *to++ = c;
#        return;
#     }
#
# The bug could also be (obscurely) avoided by changing "from" to
# be an unsigned char pointer.
#
# This obscure bug was not found by the then test suite but instead
# by Mark.Martinec@@nsc.ijs.si while trying to install Digest-MD5-2.00.
#
# jhi@@iki.fi
#
is("\xdd" x 24, "\xdd\xdd\xdd\xdd\xdd\xdd\xdd\xdd\xdd\xdd\xdd\xdd\xdd\xdd\xdd\xdd\xdd\xdd\xdd\xdd\xdd\xdd\xdd\xdd", 'Dec C bug');


# When we use a list repeat in a scalar context, it behaves like
# a scalar repeat. Make sure that works properly, and doesn't leave
# extraneous values on the stack.
#  -- robin@@kitsite.com

my ($x, $y) = scalar ((1,2)x2);
is($x, "22",    'list repeat in scalar context');
is($y, undef,   '  no extra values on stack');

# Make sure the stack doesn't get truncated too much - the first
# argument to is() needs to remain!
is(77, scalar ((1,7)x2),    'stack truncation');

# ( )x in void context should not read preceding stack items
package Tiecount {
    sub TIESCALAR { bless[]} sub FETCH { our $Tiecount++; study; 3 }
}
sub nil {}
tie my $t, "Tiecount";
{ push my @@temp, $t, scalar((nil) x 3, 1) }
is($Tiecount::Tiecount, 1,
   '(...)x... in void context in list (via scalar comma)');


# perlbug 20011113.110 works in 5.6.1, broken in 5.7.2
{
    my $x= [("foo") x 2];
    is( join('', @@$x), 'foofoo', 'list repeat in anon array ref broken [ID 20011113.110]' );
}

# [perl #35885]
is( (join ',', (qw(a b c) x 3)), 'a,b,c,a,b,c,a,b,c', 'x on qw produces list' );

# [perl #78194] x aliasing op return values
sub {
    is(\$_[0], \$_[1],
      '[perl #78194] \$_[0] == \$_[1] when @@_ aliases elems repeated by x')
}
 ->(("${\''}")x2);

$#that_array = 7;
for(($#that_array)x2) {
    $_ *= 2;
}
is($#that_array, 28, 'list repetition propagates lvalue cx to its lhs');

# [perl #126309] huge list counts should give an error


fresh_perl_like(
 '@@a = (1) x ~1',
  qr/Out of memory/,
  {  },
 '(1) x ~1',
);
@


1.9
log
@Fix merge conflicts, remove extra files, match upstream perl-5.20.1

ok deraadt@@ sthen@@ espie@@ miod@@
@
text
@d9 1
a9 1
plan(tests => 43);
d67 7
d140 2
a141 2
# Make sure the stack doesn't get truncated too much - the left
# operand of the eq binop needs to remain!
d144 10
a160 11
# [ID 20010809.028] x operator not copying elements in 'for' list?
{
    local $TODO = "x operator not copying elements in 'for' list? [ID 20010809.028]";
    my $x = 'abcd';
    my $y = '';
    for (($x =~ /./g) x 2) {
	$y .= chop;
    }
    is($y, 'abcdabcd');
}

d170 16
@


1.8
log
@merge in perl 5.8.8
@
text
@d9 1
a9 1
plan(tests => 42);
d157 7
@


1.7
log
@merge 5.8.5 into HEAD
remove now-unused files
crank libperl shared library major number
update Makefile.bsd-wrapper
tweak openbsd hints file for arm and m68k
@
text
@d9 1
a9 1
plan(tests => 41);
d154 3
@


1.6
log
@Resolve conflicts, remove old files, merge local changes
@
text
@d9 1
a9 1
plan(tests => 25);
d14 2
d18 4
d29 2
d33 4
d40 4
d64 3
a153 1

@


1.5
log
@merge in perl 5.6.1 with our local changes
@
text
@d3 4
a6 1
# $RCSfile: repeat.t,v $$Revision: 4.1 $$Date: 92/08/07 18:28:21 $
d8 2
a9 1
print "1..20\n";
d13 3
a15 3
if ('-' x 5 eq '-----') {print "ok 1\n";} else {print "not ok 1\n";}
if ('-' x 1 eq '-') {print "ok 2\n";} else {print "not ok 2\n";}
if ('-' x 0 eq '') {print "ok 3\n";} else {print "not ok 3\n";}
d17 1
a17 1
if ('ab' x 3 eq 'ababab') {print "ok 4\n";} else {print "not ok 4\n";}
d22 3
a24 3
if ($a x 5 eq '-----') {print "ok 5\n";} else {print "not ok 5\n";}
if ($a x 1 eq '-') {print "ok 6\n";} else {print "not ok 6\n";}
if ($a x 0 eq '') {print "ok 7\n";} else {print "not ok 7\n";}
d27 1
a27 1
if ($a x 3 eq 'ababab') {print "ok 8\n";} else {print "not ok 8\n";}
d31 1
a31 1
if ($a eq 'xyzxyz') {print "ok 9\n";} else {print "not ok 9\n";}
d33 1
a33 1
if ($a eq 'xyzxyz') {print "ok 10\n";} else {print "not ok 10\n";}
d35 1
a35 1
if ($a eq '') {print "ok 11\n";} else {print "not ok 11\n";}
d39 8
a46 8
print join('', @@x x 4) eq '3333' ? "ok 12\n" : "not ok 12\n";
print join('', (@@x) x 4) eq '123123123123' ? "ok 13\n" : "not ok 13\n";
print join('', (@@x,()) x 4) eq '123123123123' ? "ok 14\n" : "not ok 14\n";
print join('', (@@x,1) x 4) eq '1231123112311231' ? "ok 15\n" : "not ok 15\n";
print join(':', () x 4) eq '' ? "ok 16\n" : "not ok 16\n";
print join(':', (9) x 4) eq '9:9:9:9' ? "ok 17\n" : "not ok 17\n";
print join(':', (9,9) x 4) eq '9:9:9:9:9:9:9:9' ? "ok 18\n" : "not ok 18\n";
print join('', (split(//,"123")) x 2) eq '123123' ? "ok 19\n" : "not ok 19\n";
d48 2
a49 2
#
# The test #20 is actually testing for Digital C compiler optimizer bug,
d102 34
a135 1
print "\xdd" x 24 eq "\xdd\xdd\xdd\xdd\xdd\xdd\xdd\xdd\xdd\xdd\xdd\xdd\xdd\xdd\xdd\xdd\xdd\xdd\xdd\xdd\xdd\xdd\xdd\xdd" ? "ok 20\n" : "not ok 20\n";
@


1.4
log
@perl-5.6.0 + local changes
@
text
@@


1.3
log
@perl5.005_03 (stock)
@
text
@d45 7
a51 1
# The test #20 is actually testing for Digital C compiler optimizer bug.
d53 1
a53 2
# Dec C versions 5.* and 6.0 (used in Digital UNIX and VMS) used
# to produce (as of December 1998) broken code for util.c:repeatcpy()
a75 3
# The bug could be (obscurely) avoided by changing "from" to
# be an unsigned char pointer.
#
d89 3
@


1.2
log
@perl 5.004_04
@
text
@d5 1
a5 1
print "1..19\n";
d43 51
@


1.1
log
@Initial revision
@
text
@@


1.1.1.1
log
@Import of Perl 5.003 into the tree.  Makefile.bsd-wrapper and
config.sh.OpenBSD are the only local changes.
@
text
@@


1.1.1.2
log
@perl5.005_03
@
text
@d5 1
a5 1
print "1..20\n";
a42 51

#
# The test #20 is actually testing for Digital C compiler optimizer bug.
#
# Dec C versions 5.* and 6.0 (used in Digital UNIX and VMS) used
# to produce (as of December 1998) broken code for util.c:repeatcpy()
# (a utility function for the 'x' operator) in the case *all* these
# four conditions held:
#
# (1) len == 1
# (2) "from" had the 8th bit on in its single character
# (3) count > 7 (the 'x' count > 16)
# (4) the highest optimization level was used in compilation
#     (which is the default when compiling Perl)
#
# The bug looked like this (. being the eight-bit character and ? being \xff):
#
# 16 ................
# 17 .........???????.
# 18 .........???????..
# 19 .........???????...
# 20 .........???????....
# 21 .........???????.....
# 22 .........???????......
# 23 .........???????.......
# 24 .........???????.???????
# 25 .........???????.???????.
#
# The bug could be (obscurely) avoided by changing "from" to
# be an unsigned char pointer.
#
# The bug was triggered in the "if (len == 1)" branch.  The fix
# was to introduce a new temporary variable.  In diff -u format:
#
#     register char *frombase = from;
# 
#     if (len == 1) {
#-       todo = *from;
#+       register char c = *from;
#        while (count-- > 0)
#-           *to++ = todo;
#+           *to++ = c;
#        return;
#     }
#
# This obscure bug was not found by the then test suite but instead
# by Mark.Martinec@@nsc.ijs.si while trying to install Digest-MD5-2.00.
#
# jhi@@iki.fi
#
print "\xdd" x 24 eq "\xdd\xdd\xdd\xdd\xdd\xdd\xdd\xdd\xdd\xdd\xdd\xdd\xdd\xdd\xdd\xdd\xdd\xdd\xdd\xdd\xdd\xdd\xdd\xdd" ? "ok 20\n" : "not ok 20\n";
@


1.1.1.3
log
@virgin perl 5.6.0
@
text
@d45 1
a45 7
# The test #20 is actually testing for Digital C compiler optimizer bug,
# present in Dec C versions 5.* and 6.0 (used in Digital UNIX and VMS),
# found in December 1998.  The bug was reported to Digital^WCompaq as
#     DECC 2745 (21-Dec-1998)
# GEM_BUGS 7619 (23-Dec-1998)
# As of April 1999 the bug has been fixed in Tru64 UNIX 5.0 and is planned
# to be fixed also in 4.0G.
d47 2
a48 1
# The bug was as follows: broken code was produced for util.c:repeatcpy()
d71 3
a86 3
#
# The bug could also be (obscurely) avoided by changing "from" to
# be an unsigned char pointer.
@


1.1.1.4
log
@stock perl 5.8.0 from CPAN
@
text
@d3 1
a3 4
BEGIN {
    chdir 't' if -d 't';
    @@INC = '../lib';
}
d5 1
a5 2
require './test.pl';
plan(tests => 25);
d9 3
a11 3
is('-' x 5, '-----',    'compile time x');
is('-' x 1, '-',        '  x 1');
is('-' x 0, '',         '  x 0');
d13 1
a13 1
is('ab' x 3, 'ababab',  '  more than one char');
d18 3
a20 3
is($a x 5, '-----',     'run time x');
is($a x 1, '-',         '  x 1');
is($a x 0, '',          '  x 0');
d23 1
a23 1
is($a x 3, 'ababab',    '  more than one char');
d27 1
a27 1
is($a, 'xyzxyz',        'x=2');
d29 1
a29 1
is($a, 'xyzxyz',        'x=1');
d31 1
a31 1
is($a, '',              'x=0');
d35 8
a42 8
is(join('', @@x x 4),        '3333',                 '@@x x Y');
is(join('', (@@x) x 4),      '123123123123',         '(@@x) x Y');
is(join('', (@@x,()) x 4),   '123123123123',         '(@@x,()) x Y');
is(join('', (@@x,1) x 4),    '1231123112311231',     '(@@x,1) x Y');
is(join(':', () x 4),       '',                     '() x Y');
is(join(':', (9) x 4),      '9:9:9:9',              '(X) x Y');
is(join(':', (9,9) x 4),    '9:9:9:9:9:9:9:9',      '(X,X) x Y');
is(join('', (split(//,"123")) x 2), '123123',       'split and x');
d44 2
a45 2

# This test is actually testing for Digital C compiler optimizer bug,
d98 1
a98 34
is("\xdd" x 24, "\xdd\xdd\xdd\xdd\xdd\xdd\xdd\xdd\xdd\xdd\xdd\xdd\xdd\xdd\xdd\xdd\xdd\xdd\xdd\xdd\xdd\xdd\xdd\xdd", 'Dec C bug');


# When we use a list repeat in a scalar context, it behaves like
# a scalar repeat. Make sure that works properly, and doesn't leave
# extraneous values on the stack.
#  -- robin@@kitsite.com

my ($x, $y) = scalar ((1,2)x2);
is($x, "22",    'list repeat in scalar context');
is($y, undef,   '  no extra values on stack');

# Make sure the stack doesn't get truncated too much - the left
# operand of the eq binop needs to remain!
is(77, scalar ((1,7)x2),    'stack truncation');


# perlbug 20011113.110 works in 5.6.1, broken in 5.7.2
{
    my $x= [("foo") x 2];
    is( join('', @@$x), 'foofoo', 'list repeat in anon array ref broken [ID 20011113.110]' );
}

# [ID 20010809.028] x operator not copying elements in 'for' list?
{
    local $TODO = "x operator not copying elements in 'for' list? [ID 20010809.028]";
    my $x = 'abcd';
    my $y = '';
    for (($x =~ /./g) x 2) {
	$y .= chop;
    }
    is($y, 'abcdabcd');
}

@


1.1.1.5
log
@Import of stock perl 5.8.5
@
text
@d9 1
a9 1
plan(tests => 41);
a13 2
is('-' x 3.1, '---',    'compile time 3.1');
is('-' x 3.9, '---',    'compile time 3.9');
a15 4
is('-' x -1, '',        '  x -1');
is('-' x undef, '',     '  x undef');
is('-' x "foo", '',     '  x "foo"');
is('-' x "3rd", '---',  '  x "3rd"');
a22 2
is($a x 3.1, '---',     '  x 3.1');
is($a x 3.9, '---',     '  x 3.9');
a24 4
is($a x -3, '',         '  x -3');
is($a x undef, '',      '  x undef');
is($a x "foo", '',      '  x "foo"');
is($a x "3rd", '---',   '  x "3rd"');
a27 4
$a = 'ab';
is($a x 0, '',          '  more than one char');
$a = 'ab';
is($a x -12, '',        '  more than one char');
a47 3
is(join('', @@x x -12),      '',                     '@@x x -12');
is(join('', (@@x) x -14),    '',                     '(@@x) x -14');

d135 1
@


1.1.1.6
log
@perl 5.8.8 import
@
text
@d9 1
a9 1
plan(tests => 42);
a153 3

# [perl #35885]
is( (join ',', (qw(a b c) x 3)), 'a,b,c,a,b,c,a,b,c', 'x on qw produces list' );
@


1.1.1.7
log
@Import perl-5.20.1
@
text
@d9 1
a9 1
plan(tests => 43);
a156 7

# [perl #78194] x aliasing op return values
sub {
    is(\$_[0], \$_[1],
      '[perl #78194] \$_[0] == \$_[1] when @@_ aliases elems repeated by x')
}
 ->(("${\''}")x2);
@


1.1.1.8
log
@Import perl-5.24.2
@
text
@d9 1
a9 1
plan(tests => 48);
a66 7
($a, (undef)x5, $b) = 1..10;
is ("$a $b", "1 7", '(undef)xCONST on lhs of list assignment');
(($a)x3,$b) = 1..10;
is ("$a, $b", "3, 4", '($x)xCONST on lhs of list assignment');
($a, (undef)x${\6}, $b) = "a".."z";
is ("$a$b", "ah", '(undef)x$foo on lhs of list assignment');

d133 2
a134 2
# Make sure the stack doesn't get truncated too much - the first
# argument to is() needs to remain!
a136 10
# ( )x in void context should not read preceding stack items
package Tiecount {
    sub TIESCALAR { bless[]} sub FETCH { our $Tiecount++; study; 3 }
}
sub nil {}
tie my $t, "Tiecount";
{ push my @@temp, $t, scalar((nil) x 3, 1) }
is($Tiecount::Tiecount, 1,
   '(...)x... in void context in list (via scalar comma)');

d144 11
a163 16

$#that_array = 7;
for(($#that_array)x2) {
    $_ *= 2;
}
is($#that_array, 28, 'list repetition propagates lvalue cx to its lhs');

# [perl #126309] huge list counts should give an error


fresh_perl_like(
 '@@a = (1) x ~1',
  qr/Out of memory/,
  {  },
 '(1) x ~1',
);
@


