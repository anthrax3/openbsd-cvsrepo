head	1.1;
branch	1.1.1;
access;
symbols
	OPENBSD_6_1_BASE:1.1.1.4
	OPENBSD_6_0:1.1.1.4.0.10
	OPENBSD_6_0_BASE:1.1.1.4
	OPENBSD_5_9:1.1.1.4.0.4
	OPENBSD_5_9_BASE:1.1.1.4
	OPENBSD_5_8:1.1.1.4.0.6
	OPENBSD_5_8_BASE:1.1.1.4
	PERL_5_20_2:1.1.1.4
	OPENBSD_5_7:1.1.1.4.0.2
	OPENBSD_5_7_BASE:1.1.1.4
	PERL_5_20_1:1.1.1.4
	OPENBSD_5_6:1.1.1.3.0.8
	OPENBSD_5_6_BASE:1.1.1.3
	PERL_5_18_2:1.1.1.3
	PERL:1.1.1
	OPENBSD_5_5:1.1.1.3.0.6
	OPENBSD_5_5_BASE:1.1.1.3
	OPENBSD_5_4:1.1.1.3.0.2
	OPENBSD_5_4_BASE:1.1.1.3
	PERL_5_16_3:1.1.1.3
	OPENBSD_5_3:1.1.1.2.0.10
	OPENBSD_5_3_BASE:1.1.1.2
	OPENBSD_5_2:1.1.1.2.0.8
	OPENBSD_5_2_BASE:1.1.1.2
	OPENBSD_5_1_BASE:1.1.1.2
	OPENBSD_5_1:1.1.1.2.0.6
	OPENBSD_5_0:1.1.1.2.0.4
	OPENBSD_5_0_BASE:1.1.1.2
	OPENBSD_4_9:1.1.1.2.0.2
	OPENBSD_4_9_BASE:1.1.1.2
	PERL_5_12_2:1.1.1.2
	OPENBSD_4_8:1.1.1.1.0.8
	OPENBSD_4_8_BASE:1.1.1.1
	OPENBSD_4_7:1.1.1.1.0.4
	OPENBSD_4_7_BASE:1.1.1.1
	PERL_5_10_1:1.1.1.1
	OPENBSD_4_6:1.1.1.1.0.6
	OPENBSD_4_6_BASE:1.1.1.1
	OPENBSD_4_5:1.1.1.1.0.2
	OPENBSD_4_5_BASE:1.1.1.1
	PERL_5_10_0:1.1.1.1
	CPAN:1.1.1;
locks; strict;
comment	@# @;
expand	@o@;


1.1
date	2008.09.29.17.19.02;	author millert;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	2008.09.29.17.19.02;	author millert;	state Exp;
branches;
next	1.1.1.2;

1.1.1.2
date	2010.09.24.14.49.18;	author millert;	state Exp;
branches;
next	1.1.1.3;

1.1.1.3
date	2013.03.25.20.09.36;	author sthen;	state Exp;
branches;
next	1.1.1.4;

1.1.1.4
date	2014.11.17.20.53.18;	author afresh1;	state Exp;
branches;
next	;
commitid	B31cAbBIXiCqnL97;


desc
@@


1.1
log
@Initial revision
@
text
@#!./perl

BEGIN {
    chdir 't' if -d 't';
    @@INC = '../lib';
    require './test.pl';
}

BEGIN {
    if ($^O eq 'riscos') {
	skip_all("kill() not implemented on this platform");
    }
}

use strict;

plan tests => 2;

ok( kill(0, $$), 'kill(0, $pid) returns true if $pid exists' );

# It's not easy to come up with an individual PID that is known not to exist,
# so just check that at least some PIDs in a large range are reported not to
# exist.
my $count = 0;
my $total = 30_000;
for my $pid (1 .. $total) {
  ++$count if kill(0, $pid);
}
# It is highly unlikely that all of the above PIDs are genuinely in use,
# so $count should be less than $total.
ok( $count < $total, 'kill(0, $pid) returns false if $pid does not exist' );
@


1.1.1.1
log
@import perl 5.10.0 from CPAN
@
text
@@


1.1.1.2
log
@Perl 5.12.2 from CPAN
@
text
@d17 1
a17 1
plan tests => 5;
a31 14

# Verify that trying to kill a non-numeric PID is fatal
my @@bad_pids = (
    [ undef , 'undef'         ],
    [ ''    , 'empty string'  ],
    [ 'abcd', 'alphabetic'    ],
);

for my $case ( @@bad_pids ) {
  my ($pid, $name) = @@$case;
  eval { kill 0, $pid };
  like( $@@, qr/^Can't kill a non-numeric process ID/, "dies killing $name pid");
}

@


1.1.1.3
log
@import perl 5.16.3 from CPAN - worked on by Andrew Fresh and myself
@
text
@d17 1
a17 1
plan tests => 6;
a45 7
# Verify that killing a magic variable containing a number doesn't
# trigger the above
{
  my $x = $$ . " ";
  $x =~ /(\d+)/;
  ok(eval { kill 0, $1 }, "can kill a number string in a magic variable");
}
@


1.1.1.4
log
@Import perl-5.20.1
@
text
@a15 1
use Config;
d17 1
a17 1
plan tests => 9;
a51 55
}


# RT #121230: test process group kill on Win32

SKIP: {
  skip 'custom process group kill() only on Win32', 3 if ($^O ne 'MSWin32');

  # Create 2 child processes: an outer one created by kill0.t that runs
  # the "op/kill0_child" script, and an inner one created by outer that
  # just does 'sleep 5'. We then try to kill both of them as a single
  # process group. If only the outer one is killed, the inner will stay
  # around and eventually print "not ok 9999", presenting out of sequence
  # TAP to harness. The outer child creates a temporary file when it is
  # ready.

  my $killfile = 'tmp-killchildstarted';
  unlink($killfile);
  die "can't unlink $killfile: $!" if -e $killfile;
  eval q{END {unlink($killfile);}};

  my $pid = system(1, $^X, 'op/kill0_child', $killfile);
  die 'PID is 0' if !$pid;
  while( ! -e $killfile) {
    sleep 1; # a sleep 0 with $i++ would take ~160 iterations here
  }
  # (some ways to manually make this test fail:
  #   change '-KILL' to 'KILL';
  #   change $pid to a bogus number)
  is(kill('-KILL', $pid), 1, 'process group kill, named signal');

  # create a mapping of signal names to numbers

  my ($i, %signo, @@signame, $sig_name) = 0;
  ($sig_name = $Config{sig_name}) || die "No signals?";
  foreach my $name (split(' ', $sig_name)) {
    $signo{$name} = $i;
    $signame[$i] = $name;
    $i++;
  }
  ok(scalar keys %signo > 1 && exists $signo{KILL},
        '$Config{sig_name} parsed correctly');
  die "a child proc wasn't killed and did cleanup on its own" if ! -e $killfile;
  unlink $killfile;

  # Now repeat the test with a numeric kill sigbal

  die "can't unlink" if -e $killfile;
  # no need to create another END block: already done earlier
  $pid = system(1, $^X, 'op/kill0_child', $killfile);
  die 'PID is 0' if !$pid;
  while( ! -e $killfile) {
    sleep 1; # a sleep 0 with $i++ would take ~160 iterations here
  }
  is(kill(-$signo{KILL}, $pid), 1, 'process group kill, numeric signal');
@


