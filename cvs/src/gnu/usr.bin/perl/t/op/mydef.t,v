head	1.2;
access;
symbols
	OPENBSD_6_1:1.2.0.2
	OPENBSD_6_1_BASE:1.2
	OPENBSD_6_0:1.1.1.5.0.12
	OPENBSD_6_0_BASE:1.1.1.5
	OPENBSD_5_9:1.1.1.5.0.6
	OPENBSD_5_9_BASE:1.1.1.5
	OPENBSD_5_8:1.1.1.5.0.8
	OPENBSD_5_8_BASE:1.1.1.5
	PERL_5_20_2:1.1.1.5
	OPENBSD_5_7:1.1.1.5.0.2
	OPENBSD_5_7_BASE:1.1.1.5
	PERL_5_20_1:1.1.1.5
	OPENBSD_5_6:1.1.1.5.0.4
	OPENBSD_5_6_BASE:1.1.1.5
	PERL_5_18_2:1.1.1.5
	PERL:1.1.1
	OPENBSD_5_5:1.1.1.4.0.6
	OPENBSD_5_5_BASE:1.1.1.4
	OPENBSD_5_4:1.1.1.4.0.2
	OPENBSD_5_4_BASE:1.1.1.4
	PERL_5_16_3:1.1.1.4
	OPENBSD_5_3:1.1.1.3.0.10
	OPENBSD_5_3_BASE:1.1.1.3
	OPENBSD_5_2:1.1.1.3.0.8
	OPENBSD_5_2_BASE:1.1.1.3
	OPENBSD_5_1_BASE:1.1.1.3
	OPENBSD_5_1:1.1.1.3.0.6
	OPENBSD_5_0:1.1.1.3.0.4
	OPENBSD_5_0_BASE:1.1.1.3
	OPENBSD_4_9:1.1.1.3.0.2
	OPENBSD_4_9_BASE:1.1.1.3
	PERL_5_12_2:1.1.1.3
	OPENBSD_4_8:1.1.1.2.0.4
	OPENBSD_4_8_BASE:1.1.1.2
	OPENBSD_4_7:1.1.1.2.0.2
	OPENBSD_4_7_BASE:1.1.1.2
	PERL_5_10_1:1.1.1.2
	OPENBSD_4_6:1.1.1.1.0.6
	OPENBSD_4_6_BASE:1.1.1.1
	OPENBSD_4_5:1.1.1.1.0.2
	OPENBSD_4_5_BASE:1.1.1.1
	PERL_5_10_0:1.1.1.1
	CPAN:1.1.1;
locks; strict;
comment	@# @;
expand	@o@;


1.2
date	2017.02.05.00.32.20;	author afresh1;	state Exp;
branches;
next	1.1;
commitid	cxJ08BvJA9Pt2PTM;

1.1
date	2008.09.29.17.19.01;	author millert;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	2008.09.29.17.19.01;	author millert;	state Exp;
branches;
next	1.1.1.2;

1.1.1.2
date	2009.10.12.18.10.44;	author millert;	state Exp;
branches;
next	1.1.1.3;

1.1.1.3
date	2010.09.24.14.49.18;	author millert;	state Exp;
branches;
next	1.1.1.4;

1.1.1.4
date	2013.03.25.20.09.36;	author sthen;	state Exp;
branches;
next	1.1.1.5;

1.1.1.5
date	2014.03.24.14.59.10;	author afresh1;	state Exp;
branches;
next	;


desc
@@


1.2
log
@Fix merge issues, remove excess files - match perl-5.24.1 dist
@
text
@#!./perl -w

BEGIN {
    chdir 't' if -d 't';
    @@INC = '../lib';
    require './test.pl';
}

use strict;

eval 'my $_';
like $@@, qr/^Can't use global \$_ in "my" at /;

done_testing();
@


1.1
log
@Initial revision
@
text
@d1 1
a1 1
#!./perl
d6 1
d9 1
a9 1
print "1..70\n";
d11 2
a12 159
my $test = 0;
sub ok ($$) {
    my ($ok, $name) = @@_;
    ++$test;
    print $ok ? "ok $test - $name\n" : "not ok $test - $name\n";
}

$_ = 'global';
ok( $_ eq 'global', '$_ initial value' );
s/oba/abo/;
ok( $_ eq 'glabol', 's/// on global $_' );

{
    my $_ = 'local';
    ok( $_ eq 'local', 'my $_ initial value' );
    s/oca/aco/;
    ok( $_ eq 'lacol', 's/// on my $_' );
    /(..)/;
    ok( $1 eq 'la', '// on my $_' );
    ok( tr/c/d/ == 1, 'tr/// on my $_ counts correctly' );
    ok( $_ eq 'ladol', 'tr/// on my $_' );
    {
	my $_ = 'nested';
	ok( $_ eq 'nested', 'my $_ nested' );
	chop;
	ok( $_ eq 'neste', 'chop on my $_' );
    }
    {
	our $_;
	ok( $_ eq 'glabol', 'gains access to our global $_' );
    }
    ok( $_ eq 'ladol', 'my $_ restored' );
}
ok( $_ eq 'glabol', 'global $_ restored' );
s/abo/oba/;
ok( $_ eq 'global', 's/// on global $_ again' );
{
    my $_ = 11;
    our $_ = 22;
    ok( $_ eq 22, 'our $_ is seen explicitly' );
    chop;
    ok( $_ eq 2, '...default chop chops our $_' );
    /(.)/;
    ok( $1 eq 2, '...default match sees our $_' );
}

$_ = "global";
{
    my $_ = 'local';
    for my $_ ("foo") {
	ok( $_ eq "foo", 'for my $_' );
	/(.)/;
	ok( $1 eq "f", '...m// in for my $_' );
	ok( our $_ eq 'global', '...our $_ inside for my $_' );
    }
    ok( $_ eq 'local', '...my $_ restored outside for my $_' );
    ok( our $_ eq 'global', '...our $_ restored outside for my $_' );
}
{
    my $_ = 'local';
    for ("implicit foo") { # implicit "my $_"
	ok( $_ eq "implicit foo", 'for implicit my $_' );
	/(.)/;
	ok( $1 eq "i", '...m// in for implicity my $_' );
	ok( our $_ eq 'global', '...our $_ inside for implicit my $_' );
    }
    ok( $_ eq 'local', '...my $_ restored outside for implicit my $_' );
    ok( our $_ eq 'global', '...our $_ restored outside for implicit my $_' );
}
{
    my $_ = 'local';
    ok( $_ eq "postfix foo", 'postfix for' ) for 'postfix foo';
    ok( $_ eq 'local', '...my $_ restored outside postfix for' );
    ok( our $_ eq 'global', '...our $_ restored outside postfix for' );
}
{
    for our $_ ("bar") {
	ok( $_ eq "bar", 'for our $_' );
	/(.)/;
	ok( $1 eq "b", '...m// in for our $_' );
    }
    ok( $_ eq 'global', '...our $_ restored outside for our $_' );
}

{
    my $buf = '';
    sub tmap1 { /(.)/; $buf .= $1 } # uses our $_
    my $_ = 'x';
    sub tmap2 { /(.)/; $buf .= $1 } # uses my $_
    map {
	tmap1();
	tmap2();
	ok( /^[67]\z/, 'local lexical $_ is seen in map' );
	{ ok( our $_ eq 'global', 'our $_ still visible' ); }
	ok( $_ == 6 || $_ == 7, 'local lexical $_ is still seen in map' );
	{ my $_ ; ok( !defined, 'nested my $_ is undefined' ); }
    } 6, 7;
    ok( $buf eq 'gxgx', q/...map doesn't modify outer lexical $_/ );
    ok( $_ eq 'x', '...my $_ restored outside map' );
    ok( our $_ eq 'global', '...our $_ restored outside map' );
    map { my $_; ok( !defined, 'redeclaring $_ in map block undefs it' ); } 1;
}
{ map { my $_; ok( !defined, 'declaring $_ in map block undefs it' ); } 1; }
{
    sub tmap3 () { return $_ };
    my $_ = 'local';
    sub tmap4 () { return $_ };
    my $x = join '-', map $_.tmap3.tmap4, 1 .. 2;
    ok( $x eq '1globallocal-2globallocal', 'map without {}' );
}
{
    for my $_ (1) {
	my $x = map $_, qw(a b);
	ok( $x == 2, 'map in scalar context' );
    }
}
{
    my $buf = '';
    sub tgrep1 { /(.)/; $buf .= $1 }
    my $_ = 'y';
    sub tgrep2 { /(.)/; $buf .= $1 }
    grep {
	tgrep1();
	tgrep2();
	ok( /^[89]\z/, 'local lexical $_ is seen in grep' );
	{ ok( our $_ eq 'global', 'our $_ still visible' ); }
	ok( $_ == 8 || $_ == 9, 'local lexical $_ is still seen in grep' );
    } 8, 9;
    ok( $buf eq 'gygy', q/...grep doesn't modify outer lexical $_/ );
    ok( $_ eq 'y', '...my $_ restored outside grep' );
    ok( our $_ eq 'global', '...our $_ restored outside grep' );
}
{
    sub tgrep3 () { return $_ };
    my $_ = 'local';
    sub tgrep4 () { return $_ };
    my $x = join '-', grep $_=$_.tgrep3.tgrep4, 1 .. 2;
    ok( $x eq '1globallocal-2globallocal', 'grep without {} with side-effect' );
    ok( $_ eq 'local', '...but without extraneous side-effects' );
}
{
    for my $_ (1) {
	my $x = grep $_, qw(a b);
	ok( $x == 2, 'grep in scalar context' );
    }
}
{
    my $s = "toto";
    my $_ = "titi";
    $s =~ /to(?{ ok( $_ eq 'toto', 'my $_ in code-match # TODO' ) })to/
	or ok( 0, "\$s=$s should match!" );
    ok( our $_ eq 'global', '...our $_ restored outside code-match' );
}

{
    my $_ = "abc";
    my $x = reverse;
    ok( $x eq "cba", 'reverse without arguments picks up $_' );
}
d14 1
a14 31
{
    package notmain;
    our $_ = 'notmain';
    ::ok( $::_ eq 'notmain', 'our $_ forced into main::' );
    /(.*)/;
    ::ok( $1 eq 'notmain', '...m// defaults to our $_ in main::' );
}

my $file = 'dolbar1.tmp';
END { unlink $file; }
{
    open my $_, '>', $file or die "Can't open $file: $!";
    print $_ "hello\n";
    close $_;
    ok( -s $file, 'writing to filehandle $_ works' );
}
{
    open my $_, $file or die "Can't open $file: $!";
    my $x = <$_>;
    ok( $x eq "hello\n", 'reading from <$_> works' );
    close $_;
}

{
    $fqdb::_ = 'fqdb';
    ok( $fqdb::_ eq 'fqdb', 'fully qualified $_ is not in main' );
    ok( eval q/$fqdb::_/ eq 'fqdb', 'fully qualified, evaled $_ is not in main' );
    package fqdb;
    ::ok( $_ ne 'fqdb', 'unqualified $_ is in main' );
    ::ok( q/$_/ ne 'fqdb', 'unqualified, evaled $_ is in main' );
}
@


1.1.1.1
log
@import perl 5.10.0 from CPAN
@
text
@@


1.1.1.2
log
@import perl 5.10.1
@
text
@a5 1
    require './test.pl';
d11 1
a11 1
sub ok ($@@) {
d178 2
a179 1
my $file = tempfile();
@


1.1.1.3
log
@Perl 5.12.2 from CPAN
@
text
@d9 1
a9 1
print "1..72\n";
a199 18
}

{
    $clank_est::qunckkk = 3;
    our $qunckkk;
    $qunckkk = 4;
    package clank_est;
    our $qunckkk;
    ::ok($qunckkk == 3, 'regular variables are not forced to main');
}

{
    $whack::_ = 3;
    our $_;
    $_ = 4;
    package whack;
    our $_;
    ::ok($_ == 4, '$_ is "special", and always forced to main');
@


1.1.1.4
log
@import perl 5.16.3 from CPAN - worked on by Andrew Fresh and myself
@
text
@d1 1
a1 1
#!./perl -w
d9 8
a16 2
use strict;
no warnings 'misc';
d19 1
a19 1
is($_, 'global', '$_ initial value');
d21 1
a21 1
is($_, 'glabol', 's/// on global $_');
d25 1
a25 1
    is($_, 'local', 'my $_ initial value');
d27 1
a27 1
    is($_, 'lacol', 's/// on my $_');
d29 3
a31 3
    is($1, 'la', '// on my $_');
    cmp_ok(tr/c/d/, '==', 1, 'tr/// on my $_ counts correctly' );
    is($_, 'ladol', 'tr/// on my $_');
d34 1
a34 1
	is($_, 'nested', 'my $_ nested');
d36 1
a36 1
	is($_, 'neste', 'chop on my $_');
d40 1
a40 1
	is($_, 'glabol', 'gains access to our global $_');
d42 1
a42 1
    is($_, 'ladol', 'my $_ restored');
d44 1
a44 1
is($_, 'glabol', 'global $_ restored');
d46 1
a46 1
is($_, 'global', 's/// on global $_ again');
d50 1
a50 1
    is($_, 22, 'our $_ is seen explicitly');
d52 1
a52 1
    is($_, 2, '...default chop chops our $_');
d54 1
a54 1
    is($1, 2, '...default match sees our $_');
d61 1
a61 1
	is($_, "foo", 'for my $_');
d63 2
a64 2
	is($1, "f", '...m// in for my $_');
	is(our $_, 'global', '...our $_ inside for my $_');
d66 2
a67 2
    is($_, 'local', '...my $_ restored outside for my $_');
    is(our $_, 'global', '...our $_ restored outside for my $_');
d72 1
a72 1
	is($_, "implicit foo", 'for implicit my $_');
d74 2
a75 2
	is($1, "i", '...m// in for implicit my $_');
	is(our $_, 'global', '...our $_ inside for implicit my $_');
d77 2
a78 2
    is($_, 'local', '...my $_ restored outside for implicit my $_');
    is(our $_, 'global', '...our $_ restored outside for implicit my $_');
d82 3
a84 3
    is($_, "postfix foo", 'postfix for' ) for 'postfix foo';
    is($_, 'local', '...my $_ restored outside postfix for');
    is(our $_, 'global', '...our $_ restored outside postfix for');
d88 1
a88 1
	is($_, "bar", 'for our $_');
d90 1
a90 1
	is($1, "b", '...m// in for our $_');
d92 1
a92 1
    is($_, 'global', '...our $_ restored outside for our $_');
d104 1
a104 1
	{ is(our $_, 'global', 'our $_ still visible'); }
d106 1
a106 1
	{ my $_ ; is($_, undef, 'nested my $_ is undefined'); }
d108 4
a111 4
    is($buf, 'gxgx', q/...map doesn't modify outer lexical $_/);
    is($_, 'x', '...my $_ restored outside map');
    is(our $_, 'global', '...our $_ restored outside map');
    map { my $_; is($_, undef, 'redeclaring $_ in map block undefs it'); } 1;
d113 1
a113 1
{ map { my $_; is($_, undef, 'declaring $_ in map block undefs it'); } 1; }
d119 1
a119 1
    is($x, '1globallocal-2globallocal', 'map without {}');
d124 1
a124 1
	is($x, 2, 'map in scalar context');
d136 1
a136 1
	{ is(our $_, 'global', 'our $_ still visible'); }
d139 3
a141 3
    is($buf, 'gygy', q/...grep doesn't modify outer lexical $_/);
    is($_, 'y', '...my $_ restored outside grep');
    is(our $_, 'global', '...our $_ restored outside grep');
d148 2
a149 2
    is($x, '1globallocal-2globallocal', 'grep without {} with side-effect');
    is($_, 'local', '...but without extraneous side-effects');
d154 1
a154 1
	is($x, 2, 'grep in scalar context');
d160 3
a162 7
    my $r;
    {
	local $::TODO = 'Marked as todo since test was added in 59f00321bbc2d046';
	$r = $s =~ /to(?{ is($_, 'toto', 'my $_ in code-match' ) })to/;
    }
    ok($r, "\$s=$s should match!");
    is(our $_, 'global', '...our $_ restored outside code-match');
d168 1
a168 1
    is($x, "cba", 'reverse without arguments picks up $_');
d174 1
a174 1
    ::is($::_, 'notmain', 'our $_ forced into main::');
d176 1
a176 1
    ::is($1, 'notmain', '...m// defaults to our $_ in main::');
d184 1
a184 1
    cmp_ok(-s $file, '>', 5, 'writing to filehandle $_ works');
d189 1
a189 1
    is($x, "hello\n", 'reading from <$_> works');
d195 2
a196 2
    is($fqdb::_, 'fqdb', 'fully qualified $_ is not in main' );
    is(eval q/$fqdb::_/, 'fqdb', 'fully qualified, evaled $_ is not in main' );
d198 2
a199 2
    ::isnt($_, 'fqdb', 'unqualified $_ is in main' );
    ::isnt(eval q/$_/, 'fqdb', 'unqualified, evaled $_ is in main');
d208 1
a208 1
    ::is($qunckkk, 3, 'regular variables are not forced to main');
d217 1
a217 1
    ::is($_, 4, '$_ is "special", and always forced to main');
a218 2

done_testing();
@


1.1.1.5
log
@Import perl-5.18.2

OK espie@@ sthen@@ deraadt@@
@
text
@d10 1
a10 1
no warnings 'misc', 'experimental::lexical_topic';
@


