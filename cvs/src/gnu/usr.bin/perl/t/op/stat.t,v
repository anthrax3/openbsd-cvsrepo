head	1.16;
access;
symbols
	OPENBSD_6_0:1.15.0.10
	OPENBSD_6_0_BASE:1.15
	OPENBSD_5_9:1.15.0.4
	OPENBSD_5_9_BASE:1.15
	OPENBSD_5_8:1.15.0.6
	OPENBSD_5_8_BASE:1.15
	PERL_5_20_2:1.1.1.14
	OPENBSD_5_7:1.15.0.2
	OPENBSD_5_7_BASE:1.15
	PERL_5_20_1:1.1.1.14
	OPENBSD_5_6:1.14.0.4
	OPENBSD_5_6_BASE:1.14
	PERL_5_18_2:1.1.1.13
	PERL:1.1.1
	OPENBSD_5_5:1.13.0.6
	OPENBSD_5_5_BASE:1.13
	OPENBSD_5_4:1.13.0.2
	OPENBSD_5_4_BASE:1.13
	PERL_5_16_3:1.1.1.12
	OPENBSD_5_3:1.12.0.10
	OPENBSD_5_3_BASE:1.12
	OPENBSD_5_2:1.12.0.8
	OPENBSD_5_2_BASE:1.12
	OPENBSD_5_1_BASE:1.12
	OPENBSD_5_1:1.12.0.6
	OPENBSD_5_0:1.12.0.4
	OPENBSD_5_0_BASE:1.12
	OPENBSD_4_9:1.12.0.2
	OPENBSD_4_9_BASE:1.12
	PERL_5_12_2:1.1.1.11
	OPENBSD_4_8:1.11.0.4
	OPENBSD_4_8_BASE:1.11
	OPENBSD_4_7:1.11.0.2
	OPENBSD_4_7_BASE:1.11
	PERL_5_10_1:1.1.1.10
	OPENBSD_4_6:1.10.0.6
	OPENBSD_4_6_BASE:1.10
	OPENBSD_4_5:1.10.0.2
	OPENBSD_4_5_BASE:1.10
	PERL_5_10_0:1.1.1.9
	OPENBSD_4_4:1.9.0.10
	OPENBSD_4_4_BASE:1.9
	OPENBSD_4_3:1.9.0.8
	OPENBSD_4_3_BASE:1.9
	OPENBSD_4_2:1.9.0.6
	OPENBSD_4_2_BASE:1.9
	OPENBSD_4_1:1.9.0.4
	OPENBSD_4_1_BASE:1.9
	OPENBSD_4_0:1.9.0.2
	OPENBSD_4_0_BASE:1.9
	PERL_5_8_8:1.1.1.8
	OPENBSD_3_9:1.8.0.8
	OPENBSD_3_9_BASE:1.8
	OPENBSD_3_8:1.8.0.6
	OPENBSD_3_8_BASE:1.8
	OPENBSD_3_7:1.8.0.4
	OPENBSD_3_7_BASE:1.8
	PERL_5_8_6:1.1.1.7
	OPENBSD_3_6:1.8.0.2
	OPENBSD_3_6_BASE:1.8
	PERL_5_8_5:1.1.1.7
	PERL_5_8_3:1.1.1.6
	OPENBSD_3_5:1.7.0.2
	OPENBSD_3_5_BASE:1.7
	PERL_5_8_2:1.1.1.6
	OPENBSD_3_4:1.6.0.4
	OPENBSD_3_4_BASE:1.6
	OPENBSD_3_3:1.6.0.2
	OPENBSD_3_3_BASE:1.6
	PERL_5_8_0:1.1.1.5
	OPENBSD_3_2:1.5.0.6
	OPENBSD_3_2_BASE:1.5
	OPENBSD_3_1:1.5.0.4
	OPENBSD_3_1_BASE:1.5
	OPENBSD_3_0:1.5.0.2
	OPENBSD_3_0_BASE:1.5
	PERL_5_6_1:1.1.1.4
	OPENBSD_2_9:1.4.0.6
	OPENBSD_2_9_BASE:1.4
	OPENBSD_2_8:1.4.0.4
	OPENBSD_2_8_BASE:1.4
	OPENBSD_2_7:1.4.0.2
	OPENBSD_2_7_BASE:1.4
	PERL_5_6_0:1.1.1.3
	OPENBSD_2_6:1.3.0.2
	OPENBSD_2_6_BASE:1.3
	PERL_500503:1.1.1.2
	CPAN:1.1.1
	OPENBSD_2_5:1.2.0.6
	OPENBSD_2_5_BASE:1.2
	OPENBSD_2_4:1.2.0.4
	OPENBSD_2_4_BASE:1.2
	OPENBSD_2_3:1.2.0.2
	OPENBSD_2_3_BASE:1.2
	OPENBSD_2_2:1.1.1.1.0.6
	OPENBSD_2_2_BASE:1.1.1.1
	OPENBSD_2_1:1.1.1.1.0.4
	OPENBSD_2_1_BASE:1.1.1.1
	OPENBSD_2_0:1.1.1.1.0.2
	OPENBSD_2_0_BASE:1.1.1.1
	perl5003:1.1.1.1
	lwall:1.1.1;
locks; strict;
comment	@# @;
expand	@o@;


1.16
date	2017.02.05.00.32.20;	author afresh1;	state Exp;
branches;
next	1.15;
commitid	cxJ08BvJA9Pt2PTM;

1.15
date	2014.11.17.20.57.07;	author afresh1;	state Exp;
branches;
next	1.14;
commitid	QP75iYx42Uo7mMxO;

1.14
date	2014.03.24.15.05.33;	author afresh1;	state Exp;
branches;
next	1.13;

1.13
date	2013.03.25.20.41.00;	author sthen;	state Exp;
branches;
next	1.12;

1.12
date	2010.09.24.15.07.09;	author millert;	state Exp;
branches;
next	1.11;

1.11
date	2009.10.12.18.30.28;	author millert;	state Exp;
branches;
next	1.10;

1.10
date	2008.09.29.17.36.20;	author millert;	state Exp;
branches;
next	1.9;

1.9
date	2006.03.28.19.23.13;	author millert;	state Exp;
branches;
next	1.8;

1.8
date	2004.08.09.18.10.27;	author millert;	state Exp;
branches;
next	1.7;

1.7
date	2003.12.03.03.02.49;	author millert;	state Exp;
branches;
next	1.6;

1.6
date	2002.10.27.22.25.37;	author millert;	state Exp;
branches;
next	1.5;

1.5
date	2001.05.24.18.36.22;	author millert;	state Exp;
branches;
next	1.4;

1.4
date	2000.04.06.17.08.32;	author millert;	state Exp;
branches;
next	1.3;

1.3
date	99.04.29.22.52.38;	author millert;	state Exp;
branches;
next	1.2;

1.2
date	97.11.30.08.05.44;	author millert;	state Exp;
branches;
next	1.1;

1.1
date	96.08.19.10.13.22;	author downsj;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	96.08.19.10.13.22;	author downsj;	state Exp;
branches;
next	1.1.1.2;

1.1.1.2
date	99.04.29.22.41.52;	author millert;	state Exp;
branches;
next	1.1.1.3;

1.1.1.3
date	2000.04.06.16.10.51;	author millert;	state Exp;
branches;
next	1.1.1.4;

1.1.1.4
date	2001.05.24.18.25.47;	author millert;	state Exp;
branches;
next	1.1.1.5;

1.1.1.5
date	2002.10.27.22.15.11;	author millert;	state Exp;
branches;
next	1.1.1.6;

1.1.1.6
date	2003.12.03.02.44.32;	author millert;	state Exp;
branches;
next	1.1.1.7;

1.1.1.7
date	2004.08.09.17.48.36;	author millert;	state Exp;
branches;
next	1.1.1.8;

1.1.1.8
date	2006.03.28.18.49.46;	author millert;	state Exp;
branches;
next	1.1.1.9;

1.1.1.9
date	2008.09.29.17.19.02;	author millert;	state Exp;
branches;
next	1.1.1.10;

1.1.1.10
date	2009.10.12.18.10.44;	author millert;	state Exp;
branches;
next	1.1.1.11;

1.1.1.11
date	2010.09.24.14.49.17;	author millert;	state Exp;
branches;
next	1.1.1.12;

1.1.1.12
date	2013.03.25.20.09.37;	author sthen;	state Exp;
branches;
next	1.1.1.13;

1.1.1.13
date	2014.03.24.14.59.10;	author afresh1;	state Exp;
branches;
next	1.1.1.14;

1.1.1.14
date	2014.11.17.20.53.18;	author afresh1;	state Exp;
branches;
next	;
commitid	B31cAbBIXiCqnL97;


desc
@@


1.16
log
@Fix merge issues, remove excess files - match perl-5.24.1 dist
@
text
@#!./perl

BEGIN {
    chdir 't' if -d 't';
    @@INC = '../lib';
    require './test.pl';	# for which_perl() etc
}

use Config;

my ($Null, $Curdir);
if(eval {require File::Spec; 1}) {
    $Null = File::Spec->devnull;
    $Curdir = File::Spec->curdir;
} else {
    die $@@ unless is_miniperl();
    $Curdir = '.';
    diag("miniperl failed to load File::Spec, error is:\n$@@");
    diag("\ncontinuing, assuming '.' for current directory. Some tests will be skipped.");
}

if ($^O eq 'MSWin32') {
    # under minitest, buildcustomize sets this to 1, which means
    # nlinks isn't populated properly, allow nlinks tests to pass
    ${^WIN32_SLOPPY_STAT} = 0;
}

plan tests => 118;

my $Perl = which_perl();

$ENV{LC_ALL}   = 'C';		# Forge English error messages.
$ENV{LANGUAGE} = 'C';		# Ditto in GNU.

$Is_Amiga   = $^O eq 'amigaos';
$Is_Cygwin  = $^O eq 'cygwin';
$Is_Darwin  = $^O eq 'darwin';
$Is_Dos     = $^O eq 'dos';
$Is_MSWin32 = $^O eq 'MSWin32';
$Is_NetWare = $^O eq 'NetWare';
$Is_OS2     = $^O eq 'os2';
$Is_Solaris = $^O eq 'solaris';
$Is_VMS     = $^O eq 'VMS';
$Is_MPRAS   = $^O =~ /svr4/ && -f '/etc/.relid';
$Is_Android = $^O =~ /android/;

$Is_Dosish  = $Is_Dos || $Is_OS2 || $Is_MSWin32 || $Is_NetWare;

$Is_UFS     = $Is_Darwin && (() = `df -t ufs . 2>/dev/null`) == 2;

if ($Is_Cygwin && !is_miniperl) {
  require Win32;
  Win32->import;
}

my($DEV, $INO, $MODE, $NLINK, $UID, $GID, $RDEV, $SIZE,
   $ATIME, $MTIME, $CTIME, $BLKSIZE, $BLOCKS) = (0..12);

my $tmpfile = tempfile();
my $tmpfile_link = tempfile();

chmod 0666, $tmpfile;
unlink_all $tmpfile;
open(FOO, ">$tmpfile") || DIE("Can't open temp test file: $!");
close FOO;

open(FOO, ">$tmpfile") || DIE("Can't open temp test file: $!");

my($nlink, $mtime, $ctime) = (stat(FOO))[$NLINK, $MTIME, $CTIME];

# The clock on a network filesystem might be different from the
# system clock.
my $Filesystem_Time_Offset = abs($mtime - time); 

#nlink should if link support configured in Perl.
SKIP: {
    skip "No link count - Hard link support not built in.", 1
	unless $Config{d_link};

    is($nlink, 1, 'nlink on regular file');
}

SKIP: {
  skip "mtime and ctime not reliable", 2
    if $Is_MSWin32 or $Is_NetWare or $Is_Cygwin or $Is_Dos or $Is_Darwin;

  ok( $mtime,           'mtime' );
  is( $mtime, $ctime,   'mtime == ctime' );
}


# Cygwin seems to have a 3 second granularity on its timestamps.
my $funky_FAT_timestamps = $Is_Cygwin;
sleep 3 if $funky_FAT_timestamps;

print FOO "Now is the time for all good men to come to.\n";
close(FOO);

sleep 2;

my $has_link = 1;
my $inaccurate_atime = 0;
if (defined &Win32::IsWinNT && Win32::IsWinNT()) {
    if (Win32::FsType() ne 'NTFS') {
        $has_link            = 0;
	$inaccurate_atime    = 1;
    }
}

SKIP: {
    skip "No link on this filesystem", 6 unless $has_link;
    unlink $tmpfile_link;
    my $lnk_result = eval { link $tmpfile, $tmpfile_link };
    skip "link() unimplemented", 6 if $@@ =~ /unimplemented/;

    is( $@@, '',         'link() implemented' );
    ok( $lnk_result,    'linked tmp testfile' );
    ok( chmod(0644, $tmpfile),             'chmoded tmp testfile' );

    my($nlink, $mtime, $ctime) = (stat($tmpfile))[$NLINK, $MTIME, $CTIME];

    SKIP: {
        skip "No link count", 1 if $Config{dont_use_nlink};
        skip "Cygwin9X fakes hard links by copying", 1
          if $Config{myuname} =~ /^cygwin_(?:9\d|me)\b/i;

        is($nlink, 2,     'Link count on hard linked file' );
    }

    SKIP: {
	skip_if_miniperl("File::Spec not built for minitest", 2);
        my $cwd = File::Spec->rel2abs($Curdir);
        skip "Solaris tmpfs has different mtime/ctime link semantics", 2
                                     if $Is_Solaris and $cwd =~ m#^/tmp# and
                                        $mtime && $mtime == $ctime;
        skip "AFS has different mtime/ctime link semantics", 2
                                     if $cwd =~ m#$Config{'afsroot'}/#;
        skip "AmigaOS has different mtime/ctime link semantics", 2
                                     if $Is_Amiga;
        # Win32 could pass $mtime test but as FAT and NTFS have
        # no ctime concept $ctime is ALWAYS == $mtime
        # expect netware to be the same ...
        skip "No ctime concept on this OS", 2
                                     if $Is_MSWin32 || 
                                        ($Is_Darwin && $Is_UFS);

        if( !ok($mtime, 'hard link mtime') ||
            !isnt($mtime, $ctime, 'hard link ctime != mtime') ) {
            print STDERR <<DIAG;
# Check if you are on a tmpfs of some sort.  Building in /tmp sometimes
# has this problem.  Building on the ClearCase VOBS filesystem may also
# cause this failure.
#
# Darwin's UFS doesn't have a ctime concept, and thus is expected to fail
# this test.
DIAG
        }
    }

}

# truncate and touch $tmpfile.
open(F, ">$tmpfile") || DIE("Can't open temp test file: $!");
ok(-z \*F,     '-z on empty filehandle');
ok(! -s \*F,   '   and -s');
close F;

ok(-z $tmpfile,     '-z on empty file');
ok(! -s $tmpfile,   '   and -s');

open(F, ">$tmpfile") || DIE("Can't open temp test file: $!");
print F "hi\n";
close F;

open(F, "<$tmpfile") || DIE("Can't open temp test file: $!");
ok(!-z *F,     '-z on empty filehandle');
ok( -s *F,   '   and -s');
close F;

ok(! -z $tmpfile,   '-z on non-empty file');
ok(-s $tmpfile,     '   and -s');


# Strip all access rights from the file.
ok( chmod(0000, $tmpfile),     'chmod 0000' );

SKIP: {
    skip "-r, -w and -x have different meanings on VMS", 3 if $Is_VMS;

    SKIP: {
        # Going to try to switch away from root.  Might not work.
        my $olduid = $>;
        eval { $> = 1; };
	skip "Can't test if an admin user in miniperl", 2,
	  if $Is_Cygwin && is_miniperl();
        skip "Can't test -r or -w meaningfully if you're superuser", 2
          if ($> == 0);

        SKIP: {
            skip "Can't test -r meaningfully?", 1 if $Is_Dos;
            ok(!-r $tmpfile,    "   -r");
        }

        ok(!-w $tmpfile,    "   -w");

        # switch uid back (may not be implemented)
        eval { $> = $olduid; };
    }

    ok(! -x $tmpfile,   '   -x');
}



ok(chmod(0700,$tmpfile),    'chmod 0700');
ok(-r $tmpfile,     '   -r');
ok(-w $tmpfile,     '   -w');

SKIP: {
    skip "-x simply determines if a file ends in an executable suffix", 1
      if $Is_Dosish;

    ok(-x $tmpfile,     '   -x');
}

ok(  -f $tmpfile,   '   -f');
ok(! -d $tmpfile,   '   !-d');

# Is this portable?
ok(  -d '.',          '-d cwd' );
ok(! -f '.',          '!-f cwd' );


SKIP: {
    unlink($tmpfile_link);
    my $symlink_rslt = eval { symlink $tmpfile, $tmpfile_link };
    skip "symlink not implemented", 3 if $@@ =~ /unimplemented/;

    is( $@@, '',     'symlink() implemented' );
    ok( $symlink_rslt,      'symlink() ok' );
    ok(-l $tmpfile_link,    '-l');
}

ok(-o $tmpfile,     '-o');

ok(-e $tmpfile,     '-e');

unlink($tmpfile_link);
ok(! -e $tmpfile_link,  '   -e on unlinked file');

SKIP: {
    skip "No character, socket or block special files", 6
      if $Is_MSWin32 || $Is_NetWare || $Is_Dos;
    skip "/dev isn't available to test against", 6
      unless -d '/dev' && -r '/dev' && -x '/dev';
    skip "Skipping: unexpected ls output in MP-RAS", 6
      if $Is_MPRAS;

    # VMS problem:  If GNV or other UNIX like tool is installed, then
    # sometimes Perl will find /bin/ls, and will try to run it.
    # But since Perl on VMS does not know to run it under Bash, it will
    # try to run the DCL verb LS.  And if the VMS product Language
    # Sensitive Editor is installed, or some other LS verb, that will
    # be run instead.  So do not do this until we can teach Perl
    # when to use BASH on VMS.
    skip "ls command not available to Perl in OpenVMS right now.", 6
      if $Is_VMS;

    delete $ENV{CLICOLOR_FORCE};
    my $LS  = $Config{d_readlink} && !$Is_Android ? "ls -lL" : "ls -l";
    my $CMD = "$LS /dev 2>/dev/null";
    my $DEV = qx($CMD);

    skip "$CMD failed", 6 if $DEV eq '';

    my @@DEV = do { my $dev; opendir($dev, "/dev") ? readdir($dev) : () };

    skip "opendir failed: $!", 6 if @@DEV == 0;

    # /dev/stdout might be either character special or a named pipe,
    # or a symlink, or a socket, depending on which OS and how are
    # you running the test, so let's censor that one away.
    # Similar remarks hold for stderr.
    $DEV =~ s{^[cpls].+?\sstdout$}{}m;
    @@DEV =  grep { $_ ne 'stdout' } @@DEV;
    $DEV =~ s{^[cpls].+?\sstderr$}{}m;
    @@DEV =  grep { $_ ne 'stderr' } @@DEV;

    # /dev/printer is also naughty: in IRIX it shows up as
    # Srwx-----, not srwx------.
    $DEV =~ s{^.+?\sprinter$}{}m;
    @@DEV =  grep { $_ ne 'printer' } @@DEV;

    # If running as root, we will see .files in the ls result,
    # and readdir() will see them always.  Potential for conflict,
    # so let's weed them out.
    $DEV =~ s{^.+?\s\..+?$}{}m;
    @@DEV =  grep { ! m{^\..+$} } @@DEV;

    # Irix ls -l marks sockets with 'S' while 's' is a 'XENIX semaphore'.
    if ($^O eq 'irix') {
        $DEV =~ s{^S(.+?)}{s$1}mg;
    }

    my $try = sub {
	my @@c1 = eval qq[\$DEV =~ /^$_[0].*/mg];
	my @@c2 = eval qq[grep { $_[1] "/dev/\$_" } \@@DEV];
	my $c1 = scalar @@c1;
	my $c2 = scalar @@c2;
	is($c1, $c2, "ls and $_[1] agreeing on /dev ($c1 $c2)");
    };

{
    $try->('b', '-b');
    $try->('c', '-c');
    $try->('s', '-S');
}

ok(! -b $Curdir,    '!-b cwd');
ok(! -c $Curdir,    '!-c cwd');
ok(! -S $Curdir,    '!-S cwd');

}

SKIP: {
    my($cnt, $uid);
    $cnt = $uid = 0;

    # Find a set of directories that's very likely to have setuid files
    # but not likely to be *all* setuid files.
    my @@bin = grep {-d && -r && -x} qw(/sbin /usr/sbin /bin /usr/bin);
    skip "Can't find a setuid file to test with", 3 unless @@bin;

    for my $bin (@@bin) {
        opendir BIN, $bin or die "Can't opendir $bin: $!";
        while (defined($_ = readdir BIN)) {
            $_ = "$bin/$_";
            $cnt++;
            $uid++ if -u;
            last if $uid && $uid < $cnt;
        }
    }
    closedir BIN;

    skip "No setuid programs", 3 if $uid == 0;

    isnt($cnt, 0,    'found some programs');
    isnt($uid, 0,    '  found some setuid programs');
    ok($uid < $cnt,  "    they're not all setuid");
}


# To assist in automated testing when a controlling terminal (/dev/tty)
# may not be available (at, cron  rsh etc), the PERL_SKIP_TTY_TEST env var
# can be set to skip the tests that need a tty.
SKIP: {
    skip "These tests require a TTY", 4 if $ENV{PERL_SKIP_TTY_TEST};

    my $TTY = "/dev/tty";

    SKIP: {
        skip "Test uses unixisms", 2 if $Is_MSWin32 || $Is_NetWare;
        skip "No TTY to test -t with", 2 unless -e $TTY;

        open(TTY, $TTY) ||
          warn "Can't open $TTY--run t/TEST outside of make.\n";
        ok(-t TTY,  '-t');
        ok(-c TTY,  'tty is -c');
        close(TTY);
    }
    ok(! -t TTY,    '!-t on closed TTY filehandle');

    {
        local $TODO = 'STDIN not a tty when output is to pipe' if $Is_VMS;
        ok(-t,          '-t on STDIN');
    }
}

SKIP: {
    skip "No null device to test with", 1 unless -e $Null;
    skip "We know Win32 thinks '$Null' is a TTY", 1 if $Is_MSWin32;

    open(NULL, $Null) or DIE("Can't open $Null: $!");
    ok(! -t NULL,   'null device is not a TTY');
    close(NULL);
}


# These aren't strictly "stat" calls, but so what?
my $statfile = './op/stat.t';
ok(  -T $statfile,    '-T');
ok(! -B $statfile,    '!-B');
ok(-B $Perl,      '-B');
ok(! -T $Perl,    '!-T');

open(FOO,$statfile);
SKIP: {
    eval { -T FOO; };
    skip "-T/B on filehandle not implemented", 15 if $@@ =~ /not implemented/;

    is( $@@, '',     '-T on filehandle causes no errors' );

    ok(-T FOO,      '   -T');
    ok(! -B FOO,    '   !-B');

    $_ = <FOO>;
    like($_, qr/perl/, 'after readline');
    ok(-T FOO,      '   still -T');
    ok(! -B FOO,    '   still -B');
    close(FOO);

    open(FOO,$statfile);
    $_ = <FOO>;
    like($_, qr/perl/,      'reopened and after readline');
    ok(-T FOO,      '   still -T');
    ok(! -B FOO,    '   still !-B');

    ok(seek(FOO,0,0),   'after seek');
    ok(-T FOO,          '   still -T');
    ok(! -B FOO,        '   still !-B');

    # It's documented this way in perlfunc *shrug*
    () = <FOO>;
    ok(eof FOO,         'at EOF');
    ok(-T FOO,          '   still -T');
    ok(-B FOO,          '   now -B');
}
close(FOO);


SKIP: {
    skip "No null device to test with", 2 unless -e $Null;

    ok(-T $Null,  'null device is -T');
    ok(-B $Null,  '    and -B');
}


# and now, a few parsing tests:
$_ = $tmpfile;
ok(-f,      'bare -f   uses $_');
ok(-f(),    '     -f() "');

unlink $tmpfile or print "# unlink failed: $!\n";

# bug id 20011101.069
my @@r = \stat($Curdir);
is(scalar @@r, 13,   'stat returns full 13 elements');

stat $0;
eval { lstat _ };
like( $@@, qr/^The stat preceding lstat\(\) wasn't an lstat/,
    'lstat _ croaks after stat' );
eval { lstat *_ };
like( $@@, qr/^The stat preceding lstat\(\) wasn't an lstat/,
    'lstat *_ croaks after stat' );
eval { lstat \*_ };
like( $@@, qr/^The stat preceding lstat\(\) wasn't an lstat/,
    'lstat \*_ croaks after stat' );
eval { -l _ };
like( $@@, qr/^The stat preceding -l _ wasn't an lstat/,
    '-l _ croaks after stat' );

lstat $0;
eval { lstat _ };
is( "$@@", "", "lstat _ ok after lstat" );
eval { -l _ };
is( "$@@", "", "-l _ ok after lstat" );

eval { lstat "test.pl" };
{
    open my $fh, "test.pl";
    stat *$fh{IO};
    eval { lstat _ }
}
like $@@, qr/^The stat preceding lstat\(\) wasn't an lstat at /,
'stat $ioref resets stat type';

{
    open(FOO, ">$tmpfile") || DIE("Can't open temp test file: $!");
    my @@statbuf = stat FOO;
    stat "test.pl";
    my @@lstatbuf = lstat *FOO{IO};
    is "@@lstatbuf", "@@statbuf", 'lstat $ioref reverts to regular fstat';
    close(FOO);
    unlink $tmpfile or print "# unlink failed: $!\n";
}
  
SKIP: {
    skip "No lstat", 2 unless $Config{d_lstat};

    # bug id 20020124.004
    # If we have d_lstat, we should have symlink()
    my $linkname = 'stat-' . rand =~ y/.//dr;
    my $target = $Perl;
    $target =~ s/;\d+\z// if $Is_VMS; # symlinks don't like version numbers
    symlink $target, $linkname or die "# Can't symlink $0: $!";
    lstat $linkname;
    -T _;
    eval { lstat _ };
    like( $@@, qr/^The stat preceding lstat\(\) wasn't an lstat/,
	'lstat croaks after -T _' );
    eval { -l _ };
    like( $@@, qr/^The stat preceding -l _ wasn't an lstat/,
	'-l _ croaks after -T _' );
    unlink $linkname or print "# unlink $linkname failed: $!\n";
}

SKIP: {
    skip "Too much clock skew between system and filesystem", 5
	if ($Filesystem_Time_Offset > 5);
    print "# Zzz...\n";
    sleep($Filesystem_Time_Offset+1);
    my $f = 'tstamp.tmp';
    unlink $f;
    ok (open(S, "> $f"), 'can create tmp file');
    close S or die;
    my @@a = stat $f;
    print "# time=$^T, stat=(@@a)\n";
    my @@b = (-M _, -A _, -C _);
    print "# -MAC=(@@b)\n";
    ok( (-M _) < 0, 'negative -M works');
  SKIP:
    {
        skip "Access timestamps inaccurate", 1 if $inaccurate_atime;
        ok( (-A _) < 0, 'negative -A works');
    }
    ok( (-C _) < 0, 'negative -C works');
    ok(unlink($f), 'unlink tmp file');
}

# [perl #4253]
{
    ok(open(F, ">", $tmpfile), 'can create temp file');
    close F;
    chmod 0077, $tmpfile;
    my @@a = stat($tmpfile);
    my $s1 = -s _;
    -T _;
    my $s2 = -s _;
    is($s1, $s2, q(-T _ doesn't break the statbuffer));
    SKIP: {
	my $root_uid = $Is_Cygwin ? 18 : 0;
	skip "No lstat", 1 unless $Config{d_lstat};
	skip "uid=0", 1 if $< == $root_uid or $> == $root_uid;
	skip "Can't check if admin user in miniperl", 1
	  if $^O =~ /^(cygwin|MSWin32|msys)$/ && is_miniperl();
	skip "Readable by group/other means readable by me on $^O", 1 if $^O eq 'VMS'
          or ($^O =~ /^(cygwin|MSWin32|msys)$/ and Win32::IsAdminUser());
	lstat($tmpfile);
	-T _;
	ok(eval { lstat _ },
	   q(-T _ doesn't break lstat for unreadable file));
    }
    unlink $tmpfile;
}

SKIP: {
    skip "No dirfd()", 9 unless $Config{d_dirfd} || $Config{d_dir_dd_fd};
    ok(opendir(DIR, "."), 'Can open "." dir') || diag "Can't open '.':  $!";
    ok(stat(DIR), "stat() on dirhandle works"); 
    ok(-d -r _ , "chained -x's on dirhandle"); 
    ok(-d DIR, "-d on a dirhandle works");

    # And now for the ambiguous bareword case
    {
	no warnings 'deprecated';
	ok(open(DIR, "TEST"), 'Can open "TEST" dir')
	    || diag "Can't open 'TEST':  $!";
    }
    my $size = (stat(DIR))[7];
    ok(defined $size, "stat() on bareword works");
    is($size, -s "TEST", "size returned by stat of bareword is for the file");
    ok(-f _, "ambiguous bareword uses file handle, not dir handle");
    ok(-f DIR);
    closedir DIR or die $!;
    close DIR or die $!;
}

{
    # RT #8244: *FILE{IO} does not behave like *FILE for stat() and -X() operators
    ok(open(F, ">", $tmpfile), 'can create temp file');
    my @@thwap = stat *F{IO};
    ok(@@thwap, "stat(*F{IO}) works");    
    ok( -f *F{IO} , "single file tests work with *F{IO}");
    close F;
    unlink $tmpfile;

    #PVIO's hold dirhandle information, so let's test them too.

    SKIP: {
        skip "No dirfd()", 9 unless $Config{d_dirfd} || $Config{d_dir_dd_fd};
        ok(opendir(DIR, "."), 'Can open "." dir') || diag "Can't open '.':  $!";
        ok(stat(*DIR{IO}), "stat() on *DIR{IO} works");
	ok(-d _ , "The special file handle _ is set correctly"); 
        ok(-d -r *DIR{IO} , "chained -x's on *DIR{IO}");

	# And now for the ambiguous bareword case
	{
	    no warnings 'deprecated';
	    ok(open(DIR, "TEST"), 'Can open "TEST" dir')
		|| diag "Can't open 'TEST':  $!";
	}
	my $size = (stat(*DIR{IO}))[7];
	ok(defined $size, "stat() on *THINGY{IO} works");
	is($size, -s "TEST",
	   "size returned by stat of *THINGY{IO} is for the file");
	ok(-f _, "ambiguous *THINGY{IO} uses file handle, not dir handle");
	ok(-f *DIR{IO});
	closedir DIR or die $!;
	close DIR or die $!;
    }
}

# [perl #71002]
{
    local $^W = 1;
    my $w;
    local $SIG{__WARN__} = sub { warn shift; ++$w };
    stat 'prepeinamehyparcheiarcheiometoonomaavto';
    stat _;
    is $w, undef, 'no unopened warning from stat _';
}

{
    # [perl #123816]
    # Inappropriate stacking of l?stat with filetests should either work or
    # give a syntax error, they shouldn't crash.
    eval { stat -t };
    ok(1, 'can "stat -t" without crashing');
	eval { lstat -t };
    ok(1, 'can "lstat -t" without crashing');
}

# [perl #126064] stat stat stack busting
is join("-", 1,2,3,(stat stat stat),4,5,6), "1-2-3-4-5-6",
  'stat inside stat gets scalar context';

# [perl #126162] stat an array should not work
my $Errno_loaded = eval { require Errno };
my $statfile = './op/stat.t';
my @@statarg = ($statfile, $statfile);
ok !stat(@@statarg),
  'stat on an array of valid paths should warn and should not return any data';
my $error = 0+$!;
SKIP:
{
    skip "Errno not available", 1
      unless $Errno_loaded;
    is $error, &Errno::ENOENT,
      'stat on an array of valid paths should return ENOENT';
}

END {
    chmod 0666, $tmpfile;
    unlink_all $tmpfile;
}
@


1.15
log
@Fix merge conflicts, remove extra files, match upstream perl-5.20.1

ok deraadt@@ sthen@@ espie@@ miod@@
@
text
@d22 5
d28 1
a28 1
plan tests => 113;
d197 1
a197 1
          if ($Is_Cygwin ? Win32::IsAdminUser : $> == 0);
d480 2
a481 1
    my @@statbuf = stat STDOUT;
d483 1
a483 1
    my @@lstatbuf = lstat *STDOUT{IO};
d485 2
d623 29
@


1.14
log
@Merge perl-5.18.2 plus local patches, remove old files

OK espie@@ sthen@@ deraadt@@
@
text
@a38 1
$Is_DGUX    = $^O eq 'dgux';
d40 1
d46 1
a46 1
if ($Is_Cygwin) {
d96 8
d106 1
d189 2
d265 1
a265 1
    my $LS  = $Config{d_readlink} ? "ls -lL" : "ls -l";
d308 1
a308 3
SKIP: {
    skip("DG/UX ls -L broken", 3) if $Is_DGUX;

a311 1

a387 3

SKIP: {
     skip("DG/UX", 1) if $Is_DGUX;
a388 2
}

d515 5
a519 1
    ok( (-A _) < 0, 'negative -A works');
d535 1
d537 5
a541 2
	skip "uid=0", 1 unless $<&&$>;
	skip "Readable by group/other means readable by me", 1 if $^O eq 'VMS';
@


1.13
log
@merge/resolve conflicts
(some more to do after this one)
@
text
@d27 3
a33 1
$Is_MPE     = $^O eq 'mpeix';
a40 1
$Is_Rhapsody= $^O eq 'rhapsody';
d346 1
a346 1
    my $TTY = $Is_Rhapsody ? "/dev/ttyp0" : "/dev/tty";
@


1.12
log
@merge in perl 5.12.2 plus local changes
@
text
@a9 1
use File::Spec;
d11 13
a23 1
plan tests => 107;
a52 3
my $Curdir = File::Spec->curdir;


d57 1
a57 1
1 while unlink $tmpfile;
d116 1
d213 2
a214 2
ok(  -d $Curdir,          '-d cwd' );
ok(! -f $Curdir,          '!-f cwd' );
d252 1
a364 1
my $Null = File::Spec->devnull;
d376 1
a376 1
my $statfile = File::Spec->catfile($Curdir, 'op', 'stat.t');
d445 6
d460 16
d482 4
a485 2
    my $linkname = 'dolzero';
    symlink $0, $linkname or die "# Can't symlink $0: $!";
d516 1
d526 9
d545 1
a545 1
    # And now for the ambigious bareword case
d578 1
a578 1
	# And now for the ambigious bareword case
d595 10
d607 1
a607 1
    1 while unlink $tmpfile;
@


1.11
log
@Merge in perl 5.10.1; part two
@
text
@a19 1
$Is_MacOS   = $^O eq 'MacOS';
d30 1
a30 1
$Is_Dosish  = $Is_Dos || $Is_OS2 || $Is_MSWin32 || $Is_NetWare || $Is_Cygwin;
d34 5
d71 1
a71 1
    if $Is_MSWin32 or $Is_NetWare or $Is_Cygwin or $Is_Dos or $Is_MacOS or $Is_Darwin;
d171 1
a171 1
          if $> == 0;
d174 1
a174 1
            skip "Can't test -r meaningfully?", 1 if $Is_Dos || $Is_Cygwin;
d195 1
a195 1
      if $Is_Dosish || $Is_MacOS;
d503 5
a507 2
    ok(open(DIR, "TEST"), 'Can open "TEST" dir')
	|| diag "Can't open 'TEST':  $!";
d536 5
a540 2
	ok(open(DIR, "TEST"), 'Can open "TEST" dir')
	    || diag "Can't open 'TEST':  $!";
@


1.10
log
@fix conflicts and merge in local changes to perl 5.10.0
@
text
@d41 2
a42 2
my $tmpfile = 'Op_stat.tmp';
my $tmpfile_link = $tmpfile.'2';
d53 4
d460 18
a477 14
print "# Zzz...\n";
sleep(3);
my $f = 'tstamp.tmp';
unlink $f;
ok (open(S, "> $f"), 'can create tmp file');
close S or die;
my @@a = stat $f;
print "# time=$^T, stat=(@@a)\n";
my @@b = (-M _, -A _, -C _);
print "# -MAC=(@@b)\n";
ok( (-M _) < 0, 'negative -M works');
ok( (-A _) < 0, 'negative -A works');
ok( (-C _) < 0, 'negative -C works');
ok(unlink($f), 'unlink tmp file');
@


1.9
log
@merge in perl 5.8.8
@
text
@d12 1
a12 1
plan tests => 86;
d33 1
a33 1
$Is_UFS     = $Is_Darwin && (() = `df -t ufs .`) == 2;
d44 1
a44 1

d52 2
d55 2
a56 1
    skip "No link count", 1 if $Is_VMS;
d63 1
a63 1
    if $Is_MSWin32 or $Is_NetWare or $Is_Cygwin or $Is_Dos or $Is_MacOS;
d225 10
d483 51
d535 1
@


1.8
log
@merge 5.8.5 into HEAD
remove now-unused files
crank libperl shared library major number
update Makefile.bsd-wrapper
tweak openbsd hints file for arm and m68k
@
text
@d12 1
a12 1
plan tests => 78;
d74 1
a74 1
sleep 2 unless $funky_FAT_timestamps;
d129 2
d140 5
a177 5

# in ms windows, $tmpfile inherits owner uid from directory
# not sure about os/2, but chown is harmless anyway
eval { chown $>,$tmpfile; 1 } or print "# $@@" ;

d411 14
d426 1
a426 9
    skip "No lstat", 4 unless $Config{d_lstat};

    stat $0;
    eval { lstat _ };
    like( $@@, qr/^The stat preceding lstat\(\) wasn't an lstat/,
	'lstat _ croaks after stat' );
    eval { -l _ };
    like( $@@, qr/^The stat preceding -l _ wasn't an lstat/,
	'-l _ croaks after stat' );
d457 12
@


1.7
log
@Resolve conflicts for perl 5.8.2, remove old files, and add OpenBSD-specific scaffolding
@
text
@d29 1
d116 1
a116 1
# has this problem.  Also building on the ClearCase VOBS filesystem may
d118 3
a120 2
# Darwins UFS doesn't have a ctime concept, and thus is
# expected to fail this test.
d181 1
a181 1
    skip "-x simply determins if a file ends in an executable suffix", 1
d217 1
a217 1
    skip "Skipping; unexpected ls output in MP-RAS", 6
d312 1
a312 1
    my $TTY = $^O eq 'rhapsody' ? "/dev/ttyp0" : "/dev/tty";
@


1.6
log
@Resolve conflicts, remove old files, merge local changes
@
text
@d12 1
a12 1
plan tests => 73;
d28 1
d44 1
a44 1
unlink $tmpfile;
d59 1
a59 1
    if $Is_MSWin32 or $Is_NetWare or $Is_Cygwin or $Is_Dos;
d215 2
d248 5
d431 19
@


1.5
log
@merge in perl 5.6.1 with our local changes
@
text
@a2 2
# $RCSfile: stat.t,v $$Revision: 4.1 $$Date: 92/08/07 18:28:28 $

d6 1
d10 3
d14 1
a14 1
print "1..58\n";
d16 6
d23 60
a82 92
$Is_Dos = $^O eq 'dos';
$Is_Dosish = $Is_Dos || $^O eq 'os2' || $Is_MSWin32;
$Is_Cygwin = $^O eq 'cygwin';
chop($cwd = ($Is_MSWin32 ? `cd` : `pwd`));

$DEV = `ls -l /dev` unless $Is_Dosish or $Is_Cygwin;

unlink "Op.stat.tmp";
if (open(FOO, ">Op.stat.tmp")) {
  # hack to make Apollo update link count:
  $junk = `ls Op.stat.tmp` unless ($Is_MSWin32 || $Is_Dos);

  ($dev,$ino,$mode,$nlink,$uid,$gid,$rdev,$size,$atime,$mtime,$ctime,
   $blksize,$blocks) = stat(FOO);
  if ($nlink == 1) {
    print "ok 1\n";
  }
  else {
    print "# res=$res, nlink=$nlink.\nnot ok 1\n";
  }
  if ($Is_MSWin32 or $Is_Cygwin or $Is_Dos || ($mtime && $mtime == $ctime)) {
    print "ok 2\n";
  }
  else {
    print "# |$mtime| vs |$ctime|\nnot ok 2\n";
  }

  my $funky_FAT_timestamps = $Is_Cygwin;

  sleep 3 if $funky_FAT_timestamps;

  print FOO "Now is the time for all good men to come to.\n";
  close(FOO);

  sleep 2 unless $funky_FAT_timestamps;

} else {
  print "# open failed: $!\nnot ok 1\nnot ok 2\n";
}

if ($Is_Dosish) { unlink "Op.stat.tmp2"}
else {
    `rm -f Op.stat.tmp2;ln Op.stat.tmp Op.stat.tmp2; chmod 644 Op.stat.tmp`;
}

($dev,$ino,$mode,$nlink,$uid,$gid,$rdev,$size,$atime,$mtime,$ctime,
    $blksize,$blocks) = stat('Op.stat.tmp');

if ($Is_Dosish || $Config{dont_use_nlink})
    {print "ok 3 # skipped: no link count\n";} 
elsif ($nlink == 2)
    {print "ok 3\n";} 
else {print "# \$nlink is |$nlink|\nnot ok 3\n";}

if (   $Is_Dosish
        # Solaris tmpfs bug
	|| ($cwd =~ m#^/tmp# and $mtime && $mtime==$ctime && $^O eq 'solaris')
	|| $cwd =~ m#/afs/#
	|| $^O eq 'amigaos') {
    print "ok 4 # skipped: different semantic of mtime/ctime\n";
}
elsif (   ($mtime && $mtime != $ctime)  ) {
    print "ok 4\n";
}
else {
    print "not ok 4\n";
    print "#4 If test op/stat.t fails test 4, check if you are on a tmpfs\n";
    print "#4 of some sort.  Building in /tmp sometimes has this problem.\n";
    print "#4 Also building on the ClearCase VOBS filesystem may cause this failure.\n";
}
print "#4	:$mtime: should != :$ctime:\n";

unlink "Op.stat.tmp" or print "# unlink failed: $!\n";
if ($Is_MSWin32) {  open F, '>Op.stat.tmp' and close F }
else             { `touch Op.stat.tmp` }

if (-z 'Op.stat.tmp') {print "ok 5\n";} else {print "not ok 5\n";}
if (! -s 'Op.stat.tmp') {print "ok 6\n";} else {print "not ok 6\n";}

$Is_MSWin32 ? `cmd /c echo hi > Op.stat.tmp` : `echo hi >Op.stat.tmp`;
if (! -z 'Op.stat.tmp') {print "ok 7\n";} else {print "not ok 7\n";}
if (-s 'Op.stat.tmp') {print "ok 8\n";} else {print "not ok 8\n";}

unlink 'Op.stat.tmp' or print "# unlink failed: $!\n";
$olduid = $>;		# can't test -r if uid == 0
$Is_MSWin32 ? `cmd /c echo hi > Op.stat.tmp` : `echo hi >Op.stat.tmp`;
chmod 0,'Op.stat.tmp';
eval '$> = 1;';		# so switch uid (may not be implemented)
if (!$> || $Is_Dos || ! -r 'Op.stat.tmp') {print "ok 9\n";} else {print "not ok 9\n";}
if (!$> || ! -w 'Op.stat.tmp') {print "ok 10\n";} else {print "not ok 10\n";}
eval '$> = $olduid;';		# switch uid back (may not be implemented)
print "# olduid=$olduid, newuid=$>\n" unless ($> == $olduid);
d84 37
a120 2
if (! -x 'Op.stat.tmp') {print "ok 11\n";}
else                    {print "not ok 11\n";}
a121 2
foreach ((12,13,14,15,16,17)) {
    print "ok $_\n";		#deleted tests
d124 46
a169 1
# in ms windows, Op.stat.tmp inherits owner uid from directory
d171 114
a284 75
eval { chown $>,'Op.stat.tmp'; 1 } or print "# $@@" ;
chmod 0700,'Op.stat.tmp';
if (-r 'Op.stat.tmp') {print "ok 18\n";} else {print "not ok 18\n";}
if (-w 'Op.stat.tmp') {print "ok 19\n";} else {print "not ok 19\n";}
if ($Is_Dosish) {print "ok 20 # skipped: -x by extension\n";} 
elsif (-x 'Op.stat.tmp') {print "ok 20\n";} 
else {print "not ok 20\n";}

if (-f 'Op.stat.tmp') {print "ok 21\n";} else {print "not ok 21\n";}
if (! -d 'Op.stat.tmp') {print "ok 22\n";} else {print "not ok 22\n";}

if (-d '.') {print "ok 23\n";} else {print "not ok 23\n";}
if (! -f '.') {print "ok 24\n";} else {print "not ok 24\n";}

if (!$Is_Dosish and `ls -l perl` =~ /^l.*->/) {
    if (-l 'perl') {print "ok 25\n";} else {print "not ok 25\n";}
}
else {
    print "ok 25\n";
}

if (-o 'Op.stat.tmp') {print "ok 26\n";} else {print "not ok 26\n";}

if (-e 'Op.stat.tmp') {print "ok 27\n";} else {print "not ok 27\n";}
unlink 'Op.stat.tmp2';
if (! -e 'Op.stat.tmp2') {print "ok 28\n";} else {print "not ok 28\n";}

if ($Is_MSWin32 || $Is_Dos)
    {print "ok 29\n";}
elsif ($DEV !~ /\nc.* (\S+)\n/)
    {print "ok 29\n";}
elsif (-c "/dev/$1")
    {print "ok 29\n";}
else
    {print "not ok 29\n";}
if (! -c '.') {print "ok 30\n";} else {print "not ok 30\n";}

if ($Is_MSWin32 || $Is_Dos)
    {print "ok 31\n";}
elsif ($DEV !~ /\ns.* (\S+)\n/)
    {print "ok 31\n";}
elsif (-S "/dev/$1")
    {print "ok 31\n";}
else
    {print "not ok 31\n";}
if (! -S '.') {print "ok 32\n";} else {print "not ok 32\n";}

if ($Is_MSWin32 || $Is_Dos)
    {print "ok 33\n";}
elsif ($DEV !~ /\nb.* (\S+)\n/)
    {print "ok 33\n";}
elsif (-b "/dev/$1")
    {print "ok 33\n";}
else
    {print "not ok 33\n";}
if (! -b '.') {print "ok 34\n";} else {print "not ok 34\n";}

if ($^O eq 'mpeix' or $^O eq 'amigaos' or $Is_Dosish or $Is_Cygwin) {
  print "ok 35 # skipped: no -u\n"; goto tty_test;
}

$cnt = $uid = 0;

die "Can't run op/stat.t test 35 without pwd working" unless $cwd;
my @@bin = grep {-d} ($^O eq 'machten' ?
		     qw(/usr/bin /bin) :
		     qw(/sbin /usr/sbin /bin /usr/bin));
unless (@@bin) { print ("not ok 35\n"), goto tty_test; }
for my $bin (@@bin) {
    opendir BIN, $bin or die "Can't opendir $bin: $!";
    while (defined($_ = readdir BIN)) {
        $_ = "$bin/$_";
        $cnt++;
        $uid++ if -u;
        last if $uid && $uid < $cnt;
d286 7
a293 7
closedir BIN;

# I suppose this is going to fail somewhere...
if ($uid > 0 && $uid < $cnt)
    {print "ok 35\n";}
else
    {print "not ok 35 \n# ($uid $cnt)\n";}
a294 1
tty_test:
d299 14
a312 4
unless($ENV{PERL_SKIP_TTY_TEST}) {
    if ($Is_MSWin32) {
	print "ok 36\n";
	print "ok 37\n";
d314 1
a314 2
    else {
	my $TTY = "/dev/tty";
d316 5
a320 1
	$TTY = "/dev/ttyp0" if $^O eq 'rhapsody';
d322 8
a329 14
	if (defined $TTY) {
	    unless (open(TTY, $TTY)) {
		print STDERR "Can't open $TTY--run t/TEST outside of make.\n";
	    }
	    if (-t TTY) {print "ok 36\n";} else {print "not ok 36\n";}
	    if (-c TTY) {print "ok 37\n";} else {print "not ok 37\n";}
	    close(TTY);
	} else { # if some platform completely undefines $TTY
	    print "ok 36 # skipped\n";
	    print "ok 37 # skipped\n";
	}
    }
    if (! -t TTY) {print "ok 38\n";} else {print "not ok 38\n";}
    if (-t)       {print "ok 39\n";} else {print "not ok 39\n";}
d331 1
a331 10
else {
    print "ok 36\n";
    print "ok 37\n";
    print "ok 38\n";
    print "ok 39\n";
}
open(null,"/dev/null");
if (! -t null || -e '/xenix' || $^O eq 'machten' || $Is_MSWin32)
	{print "ok 40\n";} else {print "not ok 40\n";}
close(null);
d334 3
d338 11
a348 2
if (-T 'op/stat.t') {print "ok 41\n";} else {print "not ok 41\n";}
if (! -B 'op/stat.t') {print "ok 42\n";} else {print "not ok 42\n";}
d350 4
a353 2
if (-B './perl' || -B './perl.exe') {print "ok 43\n";} else {print "not ok 43\n";}
if (! -T './perl' && ! -T './perl.exe') {print "ok 44\n";} else {print "not ok 44\n";}
a354 11
open(FOO,'op/stat.t');
eval { -T FOO; };
if ($@@ =~ /not implemented/) {
    print "# $@@";
    for (45 .. 54) {
	print "ok $_\n";
    }
}
else {
    if (-T FOO) {print "ok 45\n";} else {print "not ok 45\n";}
    if (! -B FOO) {print "ok 46\n";} else {print "not ok 46\n";}
d356 3
a358 3
    if (/perl/) {print "ok 47\n";} else {print "not ok 47\n";}
    if (-T FOO) {print "ok 48\n";} else {print "not ok 48\n";}
    if (! -B FOO) {print "ok 49\n";} else {print "not ok 49\n";}
d361 1
a361 1
    open(FOO,'op/stat.t');
d363 13
a375 6
    if (/perl/) {print "ok 50\n";} else {print "not ok 50\n";}
    if (-T FOO) {print "ok 51\n";} else {print "not ok 51\n";}
    if (! -B FOO) {print "ok 52\n";} else {print "not ok 52\n";}
    seek(FOO,0,0);
    if (-T FOO) {print "ok 53\n";} else {print "not ok 53\n";}
    if (! -B FOO) {print "ok 54\n";} else {print "not ok 54\n";}
d379 8
a386 2
if (-T '/dev/null') {print "ok 55\n";} else {print "not ok 55\n";}
if (-B '/dev/null') {print "ok 56\n";} else {print "not ok 56\n";}
d389 35
a423 5
$_ = 'Op.stat.tmp';
if (-f) {print "ok 57\n";} else {print "not ok 57\n";}
if (-f()) {print "ok 58\n";} else {print "not ok 58\n";}

unlink 'Op.stat.tmp' or print "# unlink failed: $!\n";
@


1.4
log
@perl-5.6.0 + local changes
@
text
@d7 1
a7 1
    unshift @@INC, '../lib';
d35 1
a35 1
  if ($Is_MSWin32 or $Is_Cygwin || ($mtime && $mtime == $ctime)) {
d83 1
d181 12
a192 8
($bin) = grep {-d} ($^O eq 'machten' ? qw(/usr/bin /bin) : qw(/bin /usr/bin))
    or print ("not ok 35\n"), goto tty_test;
opendir BIN, $bin or die "Can't opendir $bin: $!";
while (defined($_ = readdir BIN)) {
    $_ = "$bin/$_";
    $cnt++;
    $uid++ if -u;
    last if $uid && $uid < $cnt;
@


1.3
log
@perl5.005_03 (stock)
@
text
@d7 1
a7 1
    @@INC = '../lib';
d17 1
d20 1
a20 1
$DEV = `ls -l /dev` unless $Is_Dosish;
d23 25
a47 1
open(FOO, ">Op.stat.tmp");
d49 1
a49 2
# hack to make Apollo update link count:
$junk = `ls Op.stat.tmp` unless ($Is_MSWin32 || $Is_Dos);
d51 3
a53 8
($dev,$ino,$mode,$nlink,$uid,$gid,$rdev,$size,$atime,$mtime,$ctime,
    $blksize,$blocks) = stat(FOO);
if ($nlink == 1) {print "ok 1\n";} else {print "not ok 1\n";}
if ($Is_MSWin32 || ($mtime && $mtime == $ctime)) {print "ok 2\n";}
else {print "# |$mtime| vs |$ctime|\nnot ok 2\n";}

print FOO "Now is the time for all good men to come to.\n";
close(FOO);
d55 1
a55 3
sleep 2;

if ($Is_Dosish) { unlink "Op.stat.tmp2" }
d70 2
a71 1
	|| ($cwd =~ m#^/tmp# and $mtime && $mtime==$ctime) # Solaris tmpfs bug
d86 1
a86 1
unlink "Op.stat.tmp";
d97 1
a97 1
unlink 'Op.stat.tmp';
d114 3
d173 1
a173 1
if ($^O eq 'amigaos' or $Is_Dosish) {
d208 14
a221 2
	unless (open(tty,"/dev/tty")) {
	    print STDERR "Can't open /dev/tty--run t/TEST outside of make.\n";
a222 3
	if (-t tty) {print "ok 36\n";} else {print "not ok 36\n";}
	if (-c tty) {print "ok 37\n";} else {print "not ok 37\n";}
	close(tty);
d224 1
a224 1
    if (! -t tty) {print "ok 38\n";} else {print "not ok 38\n";}
d282 1
a282 1
unlink 'Op.stat.tmp';
@


1.2
log
@perl 5.004_04
@
text
@d12 1
a12 1
print "1..56\n";
d15 2
d19 1
a19 1
$DEV = `ls -l /dev` unless $Is_MSWin32;
d25 1
a25 1
$junk = `ls Op.stat.tmp` unless $Is_MSWin32;
d38 1
a38 1
if ($Is_MSWin32) { unlink "Op.stat.tmp2" }
d46 13
a58 4
if ($Is_MSWin32 || $Config{dont_use_nlink} || $nlink == 2)
    {print "ok 3\n";} else {print "# \$nlink is |$nlink|\nnot ok 3\n";}

if ($Is_MSWin32 || ($mtime && $mtime != $ctime) || $cwd =~ m#/afs/# || $^O eq 'amigaos') {
d66 1
a66 1
print "#4	:$mtime: != :$ctime:\n";
d84 1
a84 1
if (!$> || ! -r 'Op.stat.tmp') {print "ok 9\n";} else {print "not ok 9\n";}
d99 3
a101 1
if ($Is_MSWin32 or -x 'Op.stat.tmp') {print "ok 20\n";} else {print "not ok 20\n";}
d109 1
a109 1
if (!$Is_MSWin32 and `ls -l perl` =~ /^l.*->/) {
d119 2
a120 2
unlink 'Op.stat.tmp', 'Op.stat.tmp2';
if (! -e 'Op.stat.tmp') {print "ok 28\n";} else {print "not ok 28\n";}
d122 1
a122 1
if ($Is_MSWin32)
d132 1
a132 1
if ($Is_MSWin32)
d142 1
a142 1
if ($Is_MSWin32)
d152 3
a154 1
if ($^O eq 'amigaos' or $Is_MSWin32) {print "ok 35\n"; goto tty_test;}
d246 7
@


1.1
log
@Initial revision
@
text
@d4 8
a11 2
# 950521 DFD    This version hacked to make test 39 succeed on MachTen
#               though the O.S. wrongly thinks /dev/null is a terminal
d14 2
a15 1
chop($cwd = `pwd`);
d17 1
a17 1
$DEV = `ls -l /dev`;
d22 2
a23 1
$junk = `ls Op.stat.tmp`;	# hack to make Apollo update link count
d28 2
a29 1
if ($mtime && $mtime == $ctime) {print "ok 2\n";} else {print "not ok 2\n";}
d36 4
a39 1
`rm -f Op.stat.tmp2; ln Op.stat.tmp Op.stat.tmp2; chmod 644 Op.stat.tmp`;
d44 4
a47 2
if ($nlink == 2) {print "ok 3\n";} else {print "not ok 3\n";}
if (($mtime && $mtime != $ctime) || $cwd =~ m#/afs/#) {
d52 2
a53 2
    print '#4 If test op/stat.t fails test 4, check if you are on a tmpfs';
    print '#4 of some sort.  Building in /tmp sometimes has this problem.';
d57 3
a59 2
`rm -f Op.stat.tmp`;
`touch Op.stat.tmp`;
d64 1
a64 1
`echo hi >Op.stat.tmp`;
d70 1
a70 1
`echo hi >Op.stat.tmp`;
d77 3
a79 1
if (! -x 'Op.stat.tmp') {print "ok 11\n";} else {print "not ok 11\n";}
d88 1
a88 1
if (-x 'Op.stat.tmp') {print "ok 20\n";} else {print "not ok 20\n";}
d96 1
a96 1
if (`ls -l perl` =~ /^l.*->/) {
d106 1
a106 1
`rm -f Op.stat.tmp Op.stat.tmp2`;
d109 3
a111 1
if ($DEV !~ /\nc.* (\S+)\n/)
d119 3
a121 1
if ($DEV !~ /\ns.* (\S+)\n/)
d129 3
a131 1
if ($DEV !~ /\nb.* (\S+)\n/)
d139 2
d144 5
a148 3
print ("not ok 35\n"), goto tty_test unless -d '/usr/bin';
chdir '/usr/bin' || die "Can't cd to /usr/bin";
while (defined($_ = <*>)) {
d153 1
a153 1
chdir $cwd || die "Can't cd back to $cwd";
d163 24
a186 2
unless (open(tty,"/dev/tty")) {
    print STDERR "Can't open /dev/tty--run t/TEST outside of make.\n";
a187 4
if (-t tty) {print "ok 36\n";} else {print "not ok 36\n";}
if (-c tty) {print "ok 37\n";} else {print "not ok 37\n";}
close(tty);
if (! -t tty) {print "ok 38\n";} else {print "not ok 38\n";}
d189 2
a190 2
if (! -t null || -e '/xenix' || -e '/MachTen')
	{print "ok 39\n";} else {print "not ok 39\n";}
a191 1
if (-t) {print "ok 40\n";} else {print "not ok 40\n";}
@


1.1.1.1
log
@Import of Perl 5.003 into the tree.  Makefile.bsd-wrapper and
config.sh.OpenBSD are the only local changes.
@
text
@@


1.1.1.2
log
@perl5.005_03
@
text
@d4 3
d8 1
a8 8
BEGIN {
    chdir 't' if -d 't';
    @@INC = '../lib';
}

use Config;

print "1..58\n";
d10 1
a10 6
$Is_MSWin32 = $^O eq 'MSWin32';
$Is_Dos = $^O eq 'dos';
$Is_Dosish = $Is_Dos || $^O eq 'os2' || $Is_MSWin32;
chop($cwd = ($Is_MSWin32 ? `cd` : `pwd`));

$DEV = `ls -l /dev` unless $Is_Dosish;
d15 1
a15 2
# hack to make Apollo update link count:
$junk = `ls Op.stat.tmp` unless ($Is_MSWin32 || $Is_Dos);
d20 1
a20 2
if ($Is_MSWin32 || ($mtime && $mtime == $ctime)) {print "ok 2\n";}
else {print "# |$mtime| vs |$ctime|\nnot ok 2\n";}
d27 1
a27 4
if ($Is_Dosish) { unlink "Op.stat.tmp2" }
else {
    `rm -f Op.stat.tmp2;ln Op.stat.tmp Op.stat.tmp2; chmod 644 Op.stat.tmp`;
}
d32 2
a33 13
if ($Is_Dosish || $Config{dont_use_nlink})
    {print "ok 3 # skipped: no link count\n";} 
elsif ($nlink == 2)
    {print "ok 3\n";} 
else {print "# \$nlink is |$nlink|\nnot ok 3\n";}

if (   $Is_Dosish
	|| ($cwd =~ m#^/tmp# and $mtime && $mtime==$ctime) # Solaris tmpfs bug
	|| $cwd =~ m#/afs/#
	|| $^O eq 'amigaos') {
    print "ok 4 # skipped: different semantic of mtime/ctime\n";
}
elsif (   ($mtime && $mtime != $ctime)  ) {
d38 2
a39 2
    print "#4 If test op/stat.t fails test 4, check if you are on a tmpfs\n";
    print "#4 of some sort.  Building in /tmp sometimes has this problem.\n";
d41 1
a41 1
print "#4	:$mtime: should != :$ctime:\n";
d43 2
a44 3
unlink "Op.stat.tmp";
if ($Is_MSWin32) {  open F, '>Op.stat.tmp' and close F }
else             { `touch Op.stat.tmp` }
d49 1
a49 1
$Is_MSWin32 ? `cmd /c echo hi > Op.stat.tmp` : `echo hi >Op.stat.tmp`;
d55 1
a55 1
$Is_MSWin32 ? `cmd /c echo hi > Op.stat.tmp` : `echo hi >Op.stat.tmp`;
d58 1
a58 1
if (!$> || $Is_Dos || ! -r 'Op.stat.tmp') {print "ok 9\n";} else {print "not ok 9\n";}
d62 1
a62 3

if (! -x 'Op.stat.tmp') {print "ok 11\n";}
else                    {print "not ok 11\n";}
d71 1
a71 3
if ($Is_Dosish) {print "ok 20 # skipped: -x by extension\n";} 
elsif (-x 'Op.stat.tmp') {print "ok 20\n";} 
else {print "not ok 20\n";}
d79 1
a79 1
if (!$Is_Dosish and `ls -l perl` =~ /^l.*->/) {
d89 2
a90 2
unlink 'Op.stat.tmp2';
if (! -e 'Op.stat.tmp2') {print "ok 28\n";} else {print "not ok 28\n";}
d92 1
a92 3
if ($Is_MSWin32 || $Is_Dos)
    {print "ok 29\n";}
elsif ($DEV !~ /\nc.* (\S+)\n/)
d100 1
a100 3
if ($Is_MSWin32 || $Is_Dos)
    {print "ok 31\n";}
elsif ($DEV !~ /\ns.* (\S+)\n/)
d108 1
a108 3
if ($Is_MSWin32 || $Is_Dos)
    {print "ok 33\n";}
elsif ($DEV !~ /\nb.* (\S+)\n/)
a115 4
if ($^O eq 'amigaos' or $Is_Dosish) {
  print "ok 35 # skipped: no -u\n"; goto tty_test;
}

d119 3
a121 5
($bin) = grep {-d} ($^O eq 'machten' ? qw(/usr/bin /bin) : qw(/bin /usr/bin))
    or print ("not ok 35\n"), goto tty_test;
opendir BIN, $bin or die "Can't opendir $bin: $!";
while (defined($_ = readdir BIN)) {
    $_ = "$bin/$_";
d126 1
a126 1
closedir BIN;
d136 2
a137 24
# To assist in automated testing when a controlling terminal (/dev/tty)
# may not be available (at, cron  rsh etc), the PERL_SKIP_TTY_TEST env var
# can be set to skip the tests that need a tty.
unless($ENV{PERL_SKIP_TTY_TEST}) {
    if ($Is_MSWin32) {
	print "ok 36\n";
	print "ok 37\n";
    }
    else {
	unless (open(tty,"/dev/tty")) {
	    print STDERR "Can't open /dev/tty--run t/TEST outside of make.\n";
	}
	if (-t tty) {print "ok 36\n";} else {print "not ok 36\n";}
	if (-c tty) {print "ok 37\n";} else {print "not ok 37\n";}
	close(tty);
    }
    if (! -t tty) {print "ok 38\n";} else {print "not ok 38\n";}
    if (-t)       {print "ok 39\n";} else {print "not ok 39\n";}
}
else {
    print "ok 36\n";
    print "ok 37\n";
    print "ok 38\n";
    print "ok 39\n";
d139 4
d144 2
a145 2
if (! -t null || -e '/xenix' || $^O eq 'machten' || $Is_MSWin32)
	{print "ok 40\n";} else {print "not ok 40\n";}
d147 1
a186 7

# and now, a few parsing tests:
$_ = 'Op.stat.tmp';
if (-f) {print "ok 57\n";} else {print "not ok 57\n";}
if (-f()) {print "ok 58\n";} else {print "not ok 58\n";}

unlink 'Op.stat.tmp';
@


1.1.1.3
log
@virgin perl 5.6.0
@
text
@d7 1
a7 1
    unshift @@INC, '../lib';
a16 1
$Is_Cygwin = $^O eq 'cygwin';
d19 1
a19 1
$DEV = `ls -l /dev` unless $Is_Dosish or $Is_Cygwin;
d22 1
a22 25
if (open(FOO, ">Op.stat.tmp")) {
  # hack to make Apollo update link count:
  $junk = `ls Op.stat.tmp` unless ($Is_MSWin32 || $Is_Dos);

  ($dev,$ino,$mode,$nlink,$uid,$gid,$rdev,$size,$atime,$mtime,$ctime,
   $blksize,$blocks) = stat(FOO);
  if ($nlink == 1) {
    print "ok 1\n";
  }
  else {
    print "# res=$res, nlink=$nlink.\nnot ok 1\n";
  }
  if ($Is_MSWin32 or $Is_Cygwin || ($mtime && $mtime == $ctime)) {
    print "ok 2\n";
  }
  else {
    print "# |$mtime| vs |$ctime|\nnot ok 2\n";
  }

  my $funky_FAT_timestamps = $Is_Cygwin;

  sleep 3 if $funky_FAT_timestamps;

  print FOO "Now is the time for all good men to come to.\n";
  close(FOO);
d24 2
a25 1
  sleep 2 unless $funky_FAT_timestamps;
d27 10
a36 3
} else {
  print "# open failed: $!\nnot ok 1\nnot ok 2\n";
}
d38 1
a38 1
if ($Is_Dosish) { unlink "Op.stat.tmp2"}
d53 1
a53 2
        # Solaris tmpfs bug
	|| ($cwd =~ m#^/tmp# and $mtime && $mtime==$ctime && $^O eq 'solaris')
d68 1
a68 1
unlink "Op.stat.tmp" or print "# unlink failed: $!\n";
d79 1
a79 1
unlink 'Op.stat.tmp' or print "# unlink failed: $!\n";
a95 3
# in ms windows, Op.stat.tmp inherits owner uid from directory
# not sure about os/2, but chown is harmless anyway
eval { chown $>,'Op.stat.tmp'; 1 } or print "# $@@" ;
d152 1
a152 1
if ($^O eq 'mpeix' or $^O eq 'amigaos' or $Is_Dosish or $Is_Cygwin) {
d187 2
a188 14
	my $TTY = "/dev/tty";

	$TTY = "/dev/ttyp0" if $^O eq 'rhapsody';

	if (defined $TTY) {
	    unless (open(TTY, $TTY)) {
		print STDERR "Can't open $TTY--run t/TEST outside of make.\n";
	    }
	    if (-t TTY) {print "ok 36\n";} else {print "not ok 36\n";}
	    if (-c TTY) {print "ok 37\n";} else {print "not ok 37\n";}
	    close(TTY);
	} else { # if some platform completely undefines $TTY
	    print "ok 36 # skipped\n";
	    print "ok 37 # skipped\n";
d190 3
d194 1
a194 1
    if (! -t TTY) {print "ok 38\n";} else {print "not ok 38\n";}
d252 1
a252 1
unlink 'Op.stat.tmp' or print "# unlink failed: $!\n";
@


1.1.1.4
log
@stock perl 5.6.1
@
text
@d7 1
a7 1
    @@INC = '../lib';
d35 1
a35 1
  if ($Is_MSWin32 or $Is_Cygwin or $Is_Dos || ($mtime && $mtime == $ctime)) {
a82 1
    print "#4 Also building on the ClearCase VOBS filesystem may cause this failure.\n";
d180 8
a187 12
my @@bin = grep {-d} ($^O eq 'machten' ?
		     qw(/usr/bin /bin) :
		     qw(/sbin /usr/sbin /bin /usr/bin));
unless (@@bin) { print ("not ok 35\n"), goto tty_test; }
for my $bin (@@bin) {
    opendir BIN, $bin or die "Can't opendir $bin: $!";
    while (defined($_ = readdir BIN)) {
        $_ = "$bin/$_";
        $cnt++;
        $uid++ if -u;
        last if $uid && $uid < $cnt;
    }
@


1.1.1.5
log
@stock perl 5.8.0 from CPAN
@
text
@d3 2
a7 1
    require './test.pl';	# for which_perl() etc
a10 3
use File::Spec;

plan tests => 73;
d12 1
a12 1
my $Perl = which_perl();
a13 6
$Is_Amiga   = $^O eq 'amigaos';
$Is_Cygwin  = $^O eq 'cygwin';
$Is_Darwin  = $^O eq 'darwin';
$Is_Dos     = $^O eq 'dos';
$Is_MacOS   = $^O eq 'MacOS';
$Is_MPE     = $^O eq 'mpeix';
d15 92
a106 15
$Is_NetWare = $^O eq 'NetWare';
$Is_OS2     = $^O eq 'os2';
$Is_Solaris = $^O eq 'solaris';
$Is_VMS     = $^O eq 'VMS';
$Is_DGUX    = $^O eq 'dgux';

$Is_Dosish  = $Is_Dos || $Is_OS2 || $Is_MSWin32 || $Is_NetWare || $Is_Cygwin;

$Is_UFS     = $Is_Darwin && (() = `df -t ufs .`) == 2;

my($DEV, $INO, $MODE, $NLINK, $UID, $GID, $RDEV, $SIZE,
   $ATIME, $MTIME, $CTIME, $BLKSIZE, $BLOCKS) = (0..12);

my $Curdir = File::Spec->curdir;

d108 2
a109 2
my $tmpfile = 'Op_stat.tmp';
my $tmpfile_link = $tmpfile.'2';
d111 2
a112 12

unlink $tmpfile;
open(FOO, ">$tmpfile") || DIE("Can't open temp test file: $!");
close FOO;

open(FOO, ">$tmpfile") || DIE("Can't open temp test file: $!");

my($nlink, $mtime, $ctime) = (stat(FOO))[$NLINK, $MTIME, $CTIME];
SKIP: {
    skip "No link count", 1 if $Is_VMS;

    is($nlink, 1, 'nlink on regular file');
d115 77
a191 36
SKIP: {
  skip "mtime and ctime not reliable", 2
    if $Is_MSWin32 or $Is_NetWare or $Is_Cygwin or $Is_Dos;

  ok( $mtime,           'mtime' );
  is( $mtime, $ctime,   'mtime == ctime' );
}


# Cygwin seems to have a 3 second granularity on its timestamps.
my $funky_FAT_timestamps = $Is_Cygwin;
sleep 3 if $funky_FAT_timestamps;

print FOO "Now is the time for all good men to come to.\n";
close(FOO);

sleep 2 unless $funky_FAT_timestamps;


SKIP: {
    unlink $tmpfile_link;
    my $lnk_result = eval { link $tmpfile, $tmpfile_link };
    skip "link() unimplemented", 6 if $@@ =~ /unimplemented/;

    is( $@@, '',         'link() implemented' );
    ok( $lnk_result,    'linked tmp testfile' );
    ok( chmod(0644, $tmpfile),             'chmoded tmp testfile' );

    my($nlink, $mtime, $ctime) = (stat($tmpfile))[$NLINK, $MTIME, $CTIME];

    SKIP: {
        skip "No link count", 1 if $Config{dont_use_nlink};
        skip "Cygwin9X fakes hard links by copying", 1
          if $Config{myuname} =~ /^cygwin_(?:9\d|me)\b/i;

        is($nlink, 2,     'Link count on hard linked file' );
a192 173

    SKIP: {
        my $cwd = File::Spec->rel2abs($Curdir);
        skip "Solaris tmpfs has different mtime/ctime link semantics", 2
                                     if $Is_Solaris and $cwd =~ m#^/tmp# and
                                        $mtime && $mtime == $ctime;
        skip "AFS has different mtime/ctime link semantics", 2
                                     if $cwd =~ m#$Config{'afsroot'}/#;
        skip "AmigaOS has different mtime/ctime link semantics", 2
                                     if $Is_Amiga;
        # Win32 could pass $mtime test but as FAT and NTFS have
        # no ctime concept $ctime is ALWAYS == $mtime
        # expect netware to be the same ...
        skip "No ctime concept on this OS", 2
                                     if $Is_MSWin32 || 
                                        ($Is_Darwin && $Is_UFS);

        if( !ok($mtime, 'hard link mtime') ||
            !isnt($mtime, $ctime, 'hard link ctime != mtime') ) {
            print STDERR <<DIAG;
# Check if you are on a tmpfs of some sort.  Building in /tmp sometimes
# has this problem.  Also building on the ClearCase VOBS filesystem may
# cause this failure.
# Darwins UFS doesn't have a ctime concept, and thus is
# expected to fail this test.
DIAG
        }
    }

}

# truncate and touch $tmpfile.
open(F, ">$tmpfile") || DIE("Can't open temp test file: $!");
close F;

ok(-z $tmpfile,     '-z on empty file');
ok(! -s $tmpfile,   '   and -s');

open(F, ">$tmpfile") || DIE("Can't open temp test file: $!");
print F "hi\n";
close F;

ok(! -z $tmpfile,   '-z on non-empty file');
ok(-s $tmpfile,     '   and -s');


# Strip all access rights from the file.
ok( chmod(0000, $tmpfile),     'chmod 0000' );

SKIP: {
    skip "-r, -w and -x have different meanings on VMS", 3 if $Is_VMS;

    SKIP: {
        # Going to try to switch away from root.  Might not work.
        my $olduid = $>;
        eval { $> = 1; };
        skip "Can't test -r or -w meaningfully if you're superuser", 2
          if $> == 0;

        SKIP: {
            skip "Can't test -r meaningfully?", 1 if $Is_Dos || $Is_Cygwin;
            ok(!-r $tmpfile,    "   -r");
        }

        ok(!-w $tmpfile,    "   -w");

        # switch uid back (may not be implemented)
        eval { $> = $olduid; };
    }

    ok(! -x $tmpfile,   '   -x');
}




# in ms windows, $tmpfile inherits owner uid from directory
# not sure about os/2, but chown is harmless anyway
eval { chown $>,$tmpfile; 1 } or print "# $@@" ;

ok(chmod(0700,$tmpfile),    'chmod 0700');
ok(-r $tmpfile,     '   -r');
ok(-w $tmpfile,     '   -w');

SKIP: {
    skip "-x simply determins if a file ends in an executable suffix", 1
      if $Is_Dosish || $Is_MacOS;

    ok(-x $tmpfile,     '   -x');
}

ok(  -f $tmpfile,   '   -f');
ok(! -d $tmpfile,   '   !-d');

# Is this portable?
ok(  -d $Curdir,          '-d cwd' );
ok(! -f $Curdir,          '!-f cwd' );


SKIP: {
    unlink($tmpfile_link);
    my $symlink_rslt = eval { symlink $tmpfile, $tmpfile_link };
    skip "symlink not implemented", 3 if $@@ =~ /unimplemented/;

    is( $@@, '',     'symlink() implemented' );
    ok( $symlink_rslt,      'symlink() ok' );
    ok(-l $tmpfile_link,    '-l');
}

ok(-o $tmpfile,     '-o');

ok(-e $tmpfile,     '-e');

unlink($tmpfile_link);
ok(! -e $tmpfile_link,  '   -e on unlinked file');

SKIP: {
    skip "No character, socket or block special files", 6
      if $Is_MSWin32 || $Is_NetWare || $Is_Dos;
    skip "/dev isn't available to test against", 6
      unless -d '/dev' && -r '/dev' && -x '/dev';

    my $LS  = $Config{d_readlink} ? "ls -lL" : "ls -l";
    my $CMD = "$LS /dev 2>/dev/null";
    my $DEV = qx($CMD);

    skip "$CMD failed", 6 if $DEV eq '';

    my @@DEV = do { my $dev; opendir($dev, "/dev") ? readdir($dev) : () };

    skip "opendir failed: $!", 6 if @@DEV == 0;

    # /dev/stdout might be either character special or a named pipe,
    # or a symlink, or a socket, depending on which OS and how are
    # you running the test, so let's censor that one away.
    # Similar remarks hold for stderr.
    $DEV =~ s{^[cpls].+?\sstdout$}{}m;
    @@DEV =  grep { $_ ne 'stdout' } @@DEV;
    $DEV =~ s{^[cpls].+?\sstderr$}{}m;
    @@DEV =  grep { $_ ne 'stderr' } @@DEV;

    # /dev/printer is also naughty: in IRIX it shows up as
    # Srwx-----, not srwx------.
    $DEV =~ s{^.+?\sprinter$}{}m;
    @@DEV =  grep { $_ ne 'printer' } @@DEV;

    # If running as root, we will see .files in the ls result,
    # and readdir() will see them always.  Potential for conflict,
    # so let's weed them out.
    $DEV =~ s{^.+?\s\..+?$}{}m;
    @@DEV =  grep { ! m{^\..+$} } @@DEV;

    my $try = sub {
	my @@c1 = eval qq[\$DEV =~ /^$_[0].*/mg];
	my @@c2 = eval qq[grep { $_[1] "/dev/\$_" } \@@DEV];
	my $c1 = scalar @@c1;
	my $c2 = scalar @@c2;
	is($c1, $c2, "ls and $_[1] agreeing on /dev ($c1 $c2)");
    };

SKIP: {
    skip("DG/UX ls -L broken", 3) if $Is_DGUX;

    $try->('b', '-b');
    $try->('c', '-c');
    $try->('s', '-S');

}

ok(! -b $Curdir,    '!-b cwd');
ok(! -c $Curdir,    '!-c cwd');
ok(! -S $Curdir,    '!-S cwd');

d194 1
d196 5
a200 26
SKIP: {
    my($cnt, $uid);
    $cnt = $uid = 0;

    # Find a set of directories that's very likely to have setuid files
    # but not likely to be *all* setuid files.
    my @@bin = grep {-d && -r && -x} qw(/sbin /usr/sbin /bin /usr/bin);
    skip "Can't find a setuid file to test with", 3 unless @@bin;

    for my $bin (@@bin) {
        opendir BIN, $bin or die "Can't opendir $bin: $!";
        while (defined($_ = readdir BIN)) {
            $_ = "$bin/$_";
            $cnt++;
            $uid++ if -u;
            last if $uid && $uid < $cnt;
        }
    }
    closedir BIN;

    skip "No setuid programs", 3 if $uid == 0;

    isnt($cnt, 0,    'found some programs');
    isnt($uid, 0,    '  found some setuid programs');
    ok($uid < $cnt,  "    they're not all setuid");
}
d202 1
d207 7
a213 4
SKIP: {
    skip "These tests require a TTY", 4 if $ENV{PERL_SKIP_TTY_TEST};

    my $TTY = $^O eq 'rhapsody' ? "/dev/ttyp0" : "/dev/tty";
d215 1
a215 11
    SKIP: {
        skip "Test uses unixisms", 2 if $Is_MSWin32 || $Is_NetWare;
        skip "No TTY to test -t with", 2 unless -e $TTY;

        open(TTY, $TTY) ||
          warn "Can't open $TTY--run t/TEST outside of make.\n";
        ok(-t TTY,  '-t');
        ok(-c TTY,  'tty is -c');
        close(TTY);
    }
    ok(! -t TTY,    '!-t on closed TTY filehandle');
d217 11
a227 3
    {
        local $TODO = 'STDIN not a tty when output is to pipe' if $Is_VMS;
        ok(-t,          '-t on STDIN');
d229 2
d232 10
d243 1
a243 9
my $Null = File::Spec->devnull;
SKIP: {
    skip "No null device to test with", 1 unless -e $Null;
    skip "We know Win32 thinks '$Null' is a TTY", 1 if $Is_MSWin32;

    open(NULL, $Null) or DIE("Can't open $Null: $!");
    ok(! -t NULL,   'null device is not a TTY');
    close(NULL);
}
d245 2
d248 2
a249 4
# These aren't strictly "stat" calls, but so what?
my $statfile = File::Spec->catfile($Curdir, 'op', 'stat.t');
ok(  -T $statfile,    '-T');
ok(! -B $statfile,    '!-B');
d251 7
a257 3
SKIP: {
     skip("DG/UX", 1) if $Is_DGUX;
ok(-B $Perl,      '-B');
d259 3
a261 13

ok(! -T $Perl,    '!-T');

open(FOO,$statfile);
SKIP: {
    eval { -T FOO; };
    skip "-T/B on filehandle not implemented", 15 if $@@ =~ /not implemented/;

    is( $@@, '',     '-T on filehandle causes no errors' );

    ok(-T FOO,      '   -T');
    ok(! -B FOO,    '   !-B');

d263 3
a265 3
    like($_, qr/perl/, 'after readline');
    ok(-T FOO,      '   still -T');
    ok(! -B FOO,    '   still -B');
d268 1
a268 1
    open(FOO,$statfile);
d270 6
a275 13
    like($_, qr/perl/,      'reopened and after readline');
    ok(-T FOO,      '   still -T');
    ok(! -B FOO,    '   still !-B');

    ok(seek(FOO,0,0),   'after seek');
    ok(-T FOO,          '   still -T');
    ok(! -B FOO,        '   still !-B');

    # It's documented this way in perlfunc *shrug*
    () = <FOO>;
    ok(eof FOO,         'at EOF');
    ok(-T FOO,          '   still -T');
    ok(-B FOO,          '   now -B');
d279 2
d282 4
a285 6
SKIP: {
    skip "No null device to test with", 2 unless -e $Null;

    ok(-T $Null,  'null device is -T');
    ok(-B $Null,  '    and -B');
}
d287 1
a287 37

# and now, a few parsing tests:
$_ = $tmpfile;
ok(-f,      'bare -f   uses $_');
ok(-f(),    '     -f() "');

unlink $tmpfile or print "# unlink failed: $!\n";

# bug id 20011101.069
my @@r = \stat($Curdir);
is(scalar @@r, 13,   'stat returns full 13 elements');

SKIP: {
    skip "No lstat", 4 unless $Config{d_lstat};

    stat $0;
    eval { lstat _ };
    like( $@@, qr/^The stat preceding lstat\(\) wasn't an lstat/,
	'lstat _ croaks after stat' );
    eval { -l _ };
    like( $@@, qr/^The stat preceding -l _ wasn't an lstat/,
	'-l _ croaks after stat' );

    # bug id 20020124.004
    # If we have d_lstat, we should have symlink()
    my $linkname = 'dolzero';
    symlink $0, $linkname or die "# Can't symlink $0: $!";
    lstat $linkname;
    -T _;
    eval { lstat _ };
    like( $@@, qr/^The stat preceding lstat\(\) wasn't an lstat/,
	'lstat croaks after -T _' );
    eval { -l _ };
    like( $@@, qr/^The stat preceding -l _ wasn't an lstat/,
	'-l _ croaks after -T _' );
    unlink $linkname or print "# unlink $linkname failed: $!\n";
}
@


1.1.1.6
log
@perl 5.8.2 from CPAN
@
text
@d12 1
a12 1
plan tests => 78;
a27 1
$Is_MPRAS   = $^O =~ /svr4/ && -f '/etc/.relid';
d43 1
a43 1
1 while unlink $tmpfile;
d58 1
a58 1
    if $Is_MSWin32 or $Is_NetWare or $Is_Cygwin or $Is_Dos or $Is_MacOS;
a213 2
    skip "Skipping; unexpected ls output in MP-RAS", 6
      if $Is_MPRAS;
a244 5
    # Irix ls -l marks sockets with 'S' while 's' is a 'XENIX semaphore'.
    if ($^O eq 'irix') {
        $DEV =~ s{^S(.+?)}{s$1}mg;
    }

a422 19
}

print "# Zzz...\n";
sleep(3);
my $f = 'tstamp.tmp';
unlink $f;
ok (open(S, "> $f"), 'can create tmp file');
close S or die;
my @@a = stat $f;
print "# time=$^T, stat=(@@a)\n";
my @@b = (-M _, -A _, -C _);
print "# -MAC=(@@b)\n";
ok( (-M _) < 0, 'negative -M works');
ok( (-A _) < 0, 'negative -A works');
ok( (-C _) < 0, 'negative -C works');
ok(unlink($f), 'unlink tmp file');

END {
    1 while unlink $tmpfile;
@


1.1.1.7
log
@Import of stock perl 5.8.5
@
text
@a28 1
$Is_Rhapsody= $^O eq 'rhapsody';
d115 1
a115 1
# has this problem.  Building on the ClearCase VOBS filesystem may also
d117 2
a118 3
#
# Darwin's UFS doesn't have a ctime concept, and thus is expected to fail
# this test.
d179 1
a179 1
    skip "-x simply determines if a file ends in an executable suffix", 1
d215 1
a215 1
    skip "Skipping: unexpected ls output in MP-RAS", 6
d310 1
a310 1
    my $TTY = $Is_Rhapsody ? "/dev/ttyp0" : "/dev/tty";
@


1.1.1.8
log
@perl 5.8.8 import
@
text
@d12 1
a12 1
plan tests => 86;
d74 1
a74 1
sleep 2;
a128 2
ok(-z \*F,     '-z on empty filehandle');
ok(! -s \*F,   '   and -s');
a137 5
open(F, "<$tmpfile") || DIE("Can't open temp test file: $!");
ok(!-z *F,     '-z on empty filehandle');
ok( -s *F,   '   and -s');
close F;

d171 5
a408 14
stat $0;
eval { lstat _ };
like( $@@, qr/^The stat preceding lstat\(\) wasn't an lstat/,
    'lstat _ croaks after stat' );
eval { -l _ };
like( $@@, qr/^The stat preceding -l _ wasn't an lstat/,
    '-l _ croaks after stat' );

lstat $0;
eval { lstat _ };
is( "$@@", "", "lstat _ ok after lstat" );
eval { -l _ };
is( "$@@", "", "-l _ ok after lstat" );
  
d410 9
a418 1
    skip "No lstat", 2 unless $Config{d_lstat};
a448 12

{
    ok(open(F, ">", $tmpfile), 'can create temp file');
    close F;
    chmod 0077, $tmpfile;
    my @@a = stat($tmpfile);
    my $s1 = -s _;
    -T _;
    my $s2 = -s _;
    is($s1, $s2, q(-T _ doesn't break the statbuffer));
    unlink $tmpfile;
}
@


1.1.1.9
log
@import perl 5.10.0 from CPAN
@
text
@d12 1
a12 1
plan tests => 107;
d33 1
a33 1
$Is_UFS     = $Is_Darwin && (() = `df -t ufs . 2>/dev/null`) == 2;
d44 1
a44 1
chmod 0666, $tmpfile;
a51 2

#nlink should if link support configured in Perl.
d53 1
a53 2
    skip "No link count - Hard link support not built in.", 1
	unless $Config{d_link};
d60 1
a60 1
    if $Is_MSWin32 or $Is_NetWare or $Is_Cygwin or $Is_Dos or $Is_MacOS or $Is_Darwin;
a221 10
    # VMS problem:  If GNV or other UNIX like tool is installed, then
    # sometimes Perl will find /bin/ls, and will try to run it.
    # But since Perl on VMS does not know to run it under Bash, it will
    # try to run the DCL verb LS.  And if the VMS product Language
    # Sensitive Editor is installed, or some other LS verb, that will
    # be run instead.  So do not do this until we can teach Perl
    # when to use BASH on VMS.
    skip "ls command not available to Perl in OpenVMS right now.", 6
      if $Is_VMS;

a469 51
SKIP: {
    skip "No dirfd()", 9 unless $Config{d_dirfd} || $Config{d_dir_dd_fd};
    ok(opendir(DIR, "."), 'Can open "." dir') || diag "Can't open '.':  $!";
    ok(stat(DIR), "stat() on dirhandle works"); 
    ok(-d -r _ , "chained -x's on dirhandle"); 
    ok(-d DIR, "-d on a dirhandle works");

    # And now for the ambigious bareword case
    ok(open(DIR, "TEST"), 'Can open "TEST" dir')
	|| diag "Can't open 'TEST':  $!";
    my $size = (stat(DIR))[7];
    ok(defined $size, "stat() on bareword works");
    is($size, -s "TEST", "size returned by stat of bareword is for the file");
    ok(-f _, "ambiguous bareword uses file handle, not dir handle");
    ok(-f DIR);
    closedir DIR or die $!;
    close DIR or die $!;
}

{
    # RT #8244: *FILE{IO} does not behave like *FILE for stat() and -X() operators
    ok(open(F, ">", $tmpfile), 'can create temp file');
    my @@thwap = stat *F{IO};
    ok(@@thwap, "stat(*F{IO}) works");    
    ok( -f *F{IO} , "single file tests work with *F{IO}");
    close F;
    unlink $tmpfile;

    #PVIO's hold dirhandle information, so let's test them too.

    SKIP: {
        skip "No dirfd()", 9 unless $Config{d_dirfd} || $Config{d_dir_dd_fd};
        ok(opendir(DIR, "."), 'Can open "." dir') || diag "Can't open '.':  $!";
        ok(stat(*DIR{IO}), "stat() on *DIR{IO} works");
	ok(-d _ , "The special file handle _ is set correctly"); 
        ok(-d -r *DIR{IO} , "chained -x's on *DIR{IO}");

	# And now for the ambigious bareword case
	ok(open(DIR, "TEST"), 'Can open "TEST" dir')
	    || diag "Can't open 'TEST':  $!";
	my $size = (stat(*DIR{IO}))[7];
	ok(defined $size, "stat() on *THINGY{IO} works");
	is($size, -s "TEST",
	   "size returned by stat of *THINGY{IO} is for the file");
	ok(-f _, "ambiguous *THINGY{IO} uses file handle, not dir handle");
	ok(-f *DIR{IO});
	closedir DIR or die $!;
	close DIR or die $!;
    }
}

a470 1
    chmod 0666, $tmpfile;
@


1.1.1.10
log
@import perl 5.10.1
@
text
@d41 2
a42 2
my $tmpfile = tempfile();
my $tmpfile_link = tempfile();
a52 4
# The clock on a network filesystem might be different from the
# system clock.
my $Filesystem_Time_Offset = abs($mtime - time); 

d456 14
a469 18
SKIP: {
    skip "Too much clock skew between system and filesystem", 5
	if ($Filesystem_Time_Offset > 5);
    print "# Zzz...\n";
    sleep($Filesystem_Time_Offset+1);
    my $f = 'tstamp.tmp';
    unlink $f;
    ok (open(S, "> $f"), 'can create tmp file');
    close S or die;
    my @@a = stat $f;
    print "# time=$^T, stat=(@@a)\n";
    my @@b = (-M _, -A _, -C _);
    print "# -MAC=(@@b)\n";
    ok( (-M _) < 0, 'negative -M works');
    ok( (-A _) < 0, 'negative -A works');
    ok( (-C _) < 0, 'negative -C works');
    ok(unlink($f), 'unlink tmp file');
}
@


1.1.1.11
log
@Perl 5.12.2 from CPAN
@
text
@d20 1
d31 1
a31 1
$Is_Dosish  = $Is_Dos || $Is_OS2 || $Is_MSWin32 || $Is_NetWare;
a34 5
if ($Is_Cygwin) {
  require Win32;
  Win32->import;
}

d67 1
a67 1
    if $Is_MSWin32 or $Is_NetWare or $Is_Cygwin or $Is_Dos or $Is_Darwin;
d167 1
a167 1
          if ($Is_Cygwin ? Win32::IsAdminUser : $> == 0);
d170 1
a170 1
            skip "Can't test -r meaningfully?", 1 if $Is_Dos;
d191 1
a191 1
      if $Is_Dosish;
d499 2
a500 5
    {
	no warnings 'deprecated';
	ok(open(DIR, "TEST"), 'Can open "TEST" dir')
	    || diag "Can't open 'TEST':  $!";
    }
d529 2
a530 5
	{
	    no warnings 'deprecated';
	    ok(open(DIR, "TEST"), 'Can open "TEST" dir')
		|| diag "Can't open 'TEST':  $!";
	}
@


1.1.1.12
log
@import perl 5.16.3 from CPAN - worked on by Andrew Fresh and myself
@
text
@d10 1
d12 1
a12 13
my ($Null, $Curdir);
if(eval {require File::Spec; 1}) {
    $Null = File::Spec->devnull;
    $Curdir = File::Spec->curdir;
} else {
    die $@@ unless is_miniperl();
    $Curdir = '.';
    diag("miniperl failed to load File::Spec, error is:\n$@@");
    diag("\ncontinuing, assuming '.' for current directory. Some tests will be skipped.");
}


plan tests => 113;
d42 3
d49 1
a49 1
unlink_all $tmpfile;
a107 1
	skip_if_miniperl("File::Spec not built for minitest", 2);
d204 2
a205 2
ok(  -d '.',          '-d cwd' );
ok(! -f '.',          '!-f cwd' );
a242 1
    delete $ENV{CLICOLOR_FORCE};
d355 1
d367 1
a367 1
my $statfile = './op/stat.t';
a435 6
eval { lstat *_ };
like( $@@, qr/^The stat preceding lstat\(\) wasn't an lstat/,
    'lstat *_ croaks after stat' );
eval { lstat \*_ };
like( $@@, qr/^The stat preceding lstat\(\) wasn't an lstat/,
    'lstat \*_ croaks after stat' );
a444 16

eval { lstat "test.pl" };
{
    open my $fh, "test.pl";
    stat *$fh{IO};
    eval { lstat _ }
}
like $@@, qr/^The stat preceding lstat\(\) wasn't an lstat at /,
'stat $ioref resets stat type';

{
    my @@statbuf = stat STDOUT;
    stat "test.pl";
    my @@lstatbuf = lstat *STDOUT{IO};
    is "@@lstatbuf", "@@statbuf", 'lstat $ioref reverts to regular fstat';
}
d451 2
a452 4
    my $linkname = 'stat-' . rand =~ y/.//dr;
    my $target = $Perl;
    $target =~ s/;\d+\z// if $Is_VMS; # symlinks don't like version numbers
    symlink $target, $linkname or die "# Can't symlink $0: $!";
a482 1
# [perl #4253]
a491 9
    SKIP: {
	skip "No lstat", 1 unless $Config{d_lstat};
	skip "uid=0", 1 unless $<&&$>;
	skip "Readable by group/other means readable by me", 1 if $^O eq 'VMS';
	lstat($tmpfile);
	-T _;
	ok(eval { lstat _ },
	   q(-T _ doesn't break lstat for unreadable file));
    }
d502 1
a502 1
    # And now for the ambiguous bareword case
d535 1
a535 1
	# And now for the ambiguous bareword case
a551 10
# [perl #71002]
{
    local $^W = 1;
    my $w;
    local $SIG{__WARN__} = sub { warn shift; ++$w };
    stat 'prepeinamehyparcheiarcheiometoonomaavto';
    stat _;
    is $w, undef, 'no unopened warning from stat _';
}

d554 1
a554 1
    unlink_all $tmpfile;
@


1.1.1.13
log
@Import perl-5.18.2

OK espie@@ sthen@@ deraadt@@
@
text
@a26 3
$ENV{LC_ALL}   = 'C';		# Forge English error messages.
$ENV{LANGUAGE} = 'C';		# Ditto in GNU.

d31 1
d39 1
d345 1
a345 1
    my $TTY = "/dev/tty";
@


1.1.1.14
log
@Import perl-5.20.1
@
text
@d39 1
a40 1
$Is_Android = $^O =~ /android/;
d46 1
a46 1
if ($Is_Cygwin && !is_miniperl) {
a95 8
my $has_link = 1;
my $inaccurate_atime = 0;
if (defined &Win32::IsWinNT && Win32::IsWinNT()) {
    if (Win32::FsType() ne 'NTFS') {
        $has_link            = 0;
	$inaccurate_atime    = 1;
    }
}
a97 1
    skip "No link on this filesystem", 6 unless $has_link;
a179 2
	skip "Can't test if an admin user in miniperl", 2,
	  if $Is_Cygwin && is_miniperl();
d254 1
a254 1
    my $LS  = $Config{d_readlink} && !$Is_Android ? "ls -lL" : "ls -l";
d297 3
a299 1
{
d303 1
d380 3
d384 2
d512 1
a512 5
  SKIP:
    {
        skip "Access timestamps inaccurate", 1 if $inaccurate_atime;
        ok( (-A _) < 0, 'negative -A works');
    }
a527 1
	my $root_uid = $Is_Cygwin ? 18 : 0;
d529 2
a530 5
	skip "uid=0", 1 if $< == $root_uid or $> == $root_uid;
	skip "Can't check if admin user in miniperl", 1
	  if $^O =~ /^(cygwin|MSWin32|msys)$/ && is_miniperl();
	skip "Readable by group/other means readable by me on $^O", 1 if $^O eq 'VMS'
          or ($^O =~ /^(cygwin|MSWin32|msys)$/ and Win32::IsAdminUser());
@


