head	1.2;
access;
symbols
	OPENBSD_6_1_BASE:1.2
	OPENBSD_6_0:1.1.1.5.0.12
	OPENBSD_6_0_BASE:1.1.1.5
	OPENBSD_5_9:1.1.1.5.0.6
	OPENBSD_5_9_BASE:1.1.1.5
	OPENBSD_5_8:1.1.1.5.0.8
	OPENBSD_5_8_BASE:1.1.1.5
	PERL_5_20_2:1.1.1.5
	OPENBSD_5_7:1.1.1.5.0.2
	OPENBSD_5_7_BASE:1.1.1.5
	PERL_5_20_1:1.1.1.5
	OPENBSD_5_6:1.1.1.5.0.4
	OPENBSD_5_6_BASE:1.1.1.5
	PERL_5_18_2:1.1.1.5
	PERL:1.1.1
	OPENBSD_5_5:1.1.1.4.0.34
	OPENBSD_5_5_BASE:1.1.1.4
	OPENBSD_5_4:1.1.1.4.0.30
	OPENBSD_5_4_BASE:1.1.1.4
	PERL_5_16_3:1.1.1.4
	OPENBSD_5_3:1.1.1.4.0.28
	OPENBSD_5_3_BASE:1.1.1.4
	OPENBSD_5_2:1.1.1.4.0.26
	OPENBSD_5_2_BASE:1.1.1.4
	OPENBSD_5_1_BASE:1.1.1.4
	OPENBSD_5_1:1.1.1.4.0.24
	OPENBSD_5_0:1.1.1.4.0.22
	OPENBSD_5_0_BASE:1.1.1.4
	OPENBSD_4_9:1.1.1.4.0.20
	OPENBSD_4_9_BASE:1.1.1.4
	PERL_5_12_2:1.1.1.4
	OPENBSD_4_8:1.1.1.4.0.18
	OPENBSD_4_8_BASE:1.1.1.4
	OPENBSD_4_7:1.1.1.4.0.14
	OPENBSD_4_7_BASE:1.1.1.4
	PERL_5_10_1:1.1.1.4
	OPENBSD_4_6:1.1.1.4.0.16
	OPENBSD_4_6_BASE:1.1.1.4
	OPENBSD_4_5:1.1.1.4.0.12
	OPENBSD_4_5_BASE:1.1.1.4
	PERL_5_10_0:1.1.1.4
	OPENBSD_4_4:1.1.1.4.0.10
	OPENBSD_4_4_BASE:1.1.1.4
	OPENBSD_4_3:1.1.1.4.0.8
	OPENBSD_4_3_BASE:1.1.1.4
	OPENBSD_4_2:1.1.1.4.0.6
	OPENBSD_4_2_BASE:1.1.1.4
	OPENBSD_4_1:1.1.1.4.0.4
	OPENBSD_4_1_BASE:1.1.1.4
	OPENBSD_4_0:1.1.1.4.0.2
	OPENBSD_4_0_BASE:1.1.1.4
	PERL_5_8_8:1.1.1.4
	OPENBSD_3_9:1.1.1.3.0.10
	OPENBSD_3_9_BASE:1.1.1.3
	OPENBSD_3_8:1.1.1.3.0.8
	OPENBSD_3_8_BASE:1.1.1.3
	OPENBSD_3_7:1.1.1.3.0.6
	OPENBSD_3_7_BASE:1.1.1.3
	PERL_5_8_6:1.1.1.3
	OPENBSD_3_6:1.1.1.3.0.4
	OPENBSD_3_6_BASE:1.1.1.3
	PERL_5_8_5:1.1.1.3
	PERL_5_8_3:1.1.1.3
	OPENBSD_3_5:1.1.1.3.0.2
	OPENBSD_3_5_BASE:1.1.1.3
	PERL_5_8_2:1.1.1.3
	OPENBSD_3_4:1.1.1.2.0.16
	OPENBSD_3_4_BASE:1.1.1.2
	OPENBSD_3_3:1.1.1.2.0.14
	OPENBSD_3_3_BASE:1.1.1.2
	PERL_5_8_0:1.1.1.2
	OPENBSD_3_2:1.1.1.2.0.12
	OPENBSD_3_2_BASE:1.1.1.2
	OPENBSD_3_1:1.1.1.2.0.10
	OPENBSD_3_1_BASE:1.1.1.2
	OPENBSD_3_0:1.1.1.2.0.8
	OPENBSD_3_0_BASE:1.1.1.2
	PERL_5_6_1:1.1.1.2
	OPENBSD_2_9:1.1.1.2.0.6
	OPENBSD_2_9_BASE:1.1.1.2
	OPENBSD_2_8:1.1.1.2.0.4
	OPENBSD_2_8_BASE:1.1.1.2
	OPENBSD_2_7:1.1.1.2.0.2
	OPENBSD_2_7_BASE:1.1.1.2
	PERL_5_6_0:1.1.1.2
	OPENBSD_2_6:1.1.1.1.0.2
	OPENBSD_2_6_BASE:1.1.1.1
	PERL_500503:1.1.1.1
	CPAN:1.1.1;
locks; strict;
comment	@# @;
expand	@o@;


1.2
date	2017.02.05.00.32.20;	author afresh1;	state Exp;
branches;
next	1.1;
commitid	cxJ08BvJA9Pt2PTM;

1.1
date	99.04.29.22.41.43;	author millert;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	99.04.29.22.41.43;	author millert;	state Exp;
branches;
next	1.1.1.2;

1.1.1.2
date	2000.04.06.16.10.48;	author millert;	state Exp;
branches;
next	1.1.1.3;

1.1.1.3
date	2003.12.03.02.44.31;	author millert;	state Exp;
branches;
next	1.1.1.4;

1.1.1.4
date	2006.03.28.18.49.44;	author millert;	state Exp;
branches;
next	1.1.1.5;

1.1.1.5
date	2014.03.24.14.59.10;	author afresh1;	state Exp;
branches;
next	;


desc
@@


1.2
log
@Fix merge issues, remove excess files - match perl-5.24.1 dist
@
text
@#!./perl

BEGIN {
    chdir 't' if -d 't';
    @@INC = '../lib';
    require './test.pl';
}

plan tests => 19;

eval {
    eval {
	die "Horribly\n";
    };
    die if $@@;
};

like($@@, qr/^Horribly/, 'die with no args propagates $@@');
like($@@, qr/\.{3}propagated at/, '... and appends a phrase');

{
    local $SIG{__DIE__} = sub { is( $_[0], "[\000]\n", 'Embedded null passed to signal handler' )};

    $err = "[\000]\n";
    eval {
        die $err;
    };
    is( $@@, $err, 'Embedded null passed back into $@@' );
}

{
    local $SIG{__DIE__} = sub {
	isa_ok( $_[0], 'ARRAY', 'pass an array ref as an argument' );
	$_[0]->[0]++;
    };
    $x = [3];
    eval { die $x; };

    is( $x->[0], 4, 'actual array, not a copy, passed to signal handler' );

    eval {
        eval {
            die [ 5 ];
        };
        die if $@@;
    };

    is($@@->[0], 7, 'die with no arguments propagates $@@, but leaves references alone');

    eval {
	eval {
	    die bless [ 7 ], "Error";
	};
	isa_ok( $@@, 'Error', '$@@ is an Error object' );
	die if $@@;
    };

    isa_ok( $@@, 'Out', 'returning a different object than what was passed in, via PROPAGATE' );
    is($@@->[0], 9, 'reference returned correctly');
}

{
    package Error;

    sub PROPAGATE {
	bless [$_[0]->[0]], "Out";
    }
}


{
    # die/warn and utf8
    use utf8;
    local $SIG{__DIE__};
    my $msg = "ce ºtii tu, bã ?\n";
    eval { die $msg };
    is( $@@, $msg, "Literal passed to die" );
    our $err;
    local $SIG{__WARN__} = $SIG{__DIE__} = sub { $err = shift };
    eval { die $msg };
    is( $err, $msg, 'die handler with utf8' );
    eval { warn $msg };
    is( $err, $msg, 'warn handler with utf8' );
    eval qq/ use strict; \$\x{3b1} /;
    like( $@@, qr/Global symbol "\$\x{3b1}"/, 'utf8 symbol names show up in $@@' );
}

# [perl #36470] got uninit warning if $@@ was undef

{
    use warnings "uninitialized";
    my $ok = 1;
    local $SIG{__DIE__};
    local $SIG{__WARN__} = sub { $ok = 0 };
    eval { undef $@@; die };
    is( $ok, 1, 'no warnings if $@@ is undef' );
}
@


1.1
log
@Initial revision
@
text
@d3 5
a7 1
print "1..10\n";
d9 1
a9 1
$SIG{__DIE__} = sub { print ref($_[0]) ? ("ok ",$_[0]->[0]++,"\n") : @@_ } ;
a10 1
$err = "ok 1\n";
d12 4
a15 1
    die $err;
d18 2
a19 2
print "not " unless $@@ eq $err;
print "ok 2\n";
d21 2
a22 2
$x = [3];
eval { die $x; };
d24 6
a29 2
print "not " unless $x->[0] == 4;
print "ok 4\n";
d31 4
a34 3
eval {
    eval {
	die [ 5 ];
d36 4
a39 2
    die if $@@;
};
a40 1
eval {
d42 4
a45 1
	die bless [ 7 ], "Error";
a46 2
    die if $@@;
};
d48 1
a48 2
print "not " unless ref($@@) eq "Out";
print "ok 10\n";
d50 7
a56 1
package Error;
d58 39
a96 3
sub PROPAGATE {
    print "ok ",$_[0]->[0]++,"\n";
    bless [$_[0]->[0]], "Out";
@


1.1.1.1
log
@perl5.005_03
@
text
@@


1.1.1.2
log
@virgin perl 5.6.0
@
text
@d7 1
a7 1
$err = "#[\000]\nok 1\n";
@


1.1.1.3
log
@perl 5.8.2 from CPAN
@
text
@d3 1
a3 1
print "1..14\n";
d38 1
a38 2
{
    package Error;
d40 3
a42 22
    sub PROPAGATE {
	print "ok ",$_[0]->[0]++,"\n";
	bless [$_[0]->[0]], "Out";
    }
}

{
    # die/warn and utf8
    use utf8;
    local $SIG{__DIE__};
    my $msg = "ce ºtii tu, bã ?\n";
    eval { die $msg }; print "not " unless $@@ eq $msg;
    print "ok 11\n";
    our $err;
    local $SIG{__WARN__} = $SIG{__DIE__} = sub { $err = shift };
    eval { die $msg }; print "not " unless $err eq $msg;
    print "ok 12\n";
    eval { warn $msg }; print "not " unless $err eq $msg;
    print "ok 13\n";
    eval qq/ use strict; \$\x{3b1} /;
    print "not " unless $@@ =~ /Global symbol "\$\x{3b1}"/;
    print "ok 14\n";
@


1.1.1.4
log
@perl 5.8.8 import
@
text
@d3 1
a3 1
print "1..15\n";
a62 11
}

# [perl #36470] got uninit warning if $@@ was undef

{
    my $ok = 1;
    local $SIG{__DIE__};
    local $SIG{__WARN__} = sub { $ok = 0 };
    eval { undef $@@; die };
    print "not " unless $ok;
    print "ok 15\n";
@


1.1.1.5
log
@Import perl-5.18.2

OK espie@@ sthen@@ deraadt@@
@
text
@d3 1
a3 5
BEGIN {
    chdir 't' if -d 't';
    @@INC = '../lib';
    require './test.pl';
}
d5 1
a5 1
plan tests => 19;
d7 1
d9 1
a9 4
    eval {
	die "Horribly\n";
    };
    die if $@@;
d12 2
a13 2
like($@@, '^Horribly', 'die with no args propagates $@@');
like($@@, 'propagated', '... and appends a phrase');
d15 2
a16 2
{
    local $SIG{__DIE__} = sub { is( $_[0], "[\000]\n", 'Embedded null passed to signal handler' )};
d18 2
a19 16
    $err = "[\000]\n";
    eval {
        die $err;
    };
    is( $@@, $err, 'Embedded null passed back into $@@' );
}

{
    local $SIG{__DIE__} = sub {
	isa_ok( $_[0], 'ARRAY', 'pass an array ref as an argument' );
	$_[0]->[0]++;
    };
    $x = [3];
    eval { die $x; };

    is( $x->[0], 4, 'actual array, not a copy, passed to signal handler' );
d21 1
d23 1
a23 4
        eval {
            die [ 5 ];
        };
        die if $@@;
d25 2
d28 1
a28 2
    is($@@->[0], 7, 'die with no arguments propagates $@@, but leaves references alone');

d30 1
a30 5
	eval {
	    die bless [ 7 ], "Error";
	};
	isa_ok( $@@, 'Error', '$@@ is an Error object' );
	die if $@@;
d32 2
d35 2
a36 3
    isa_ok( $@@, 'Out', 'returning a different object than what was passed in, via PROPAGATE' );
    is($@@->[0], 9, 'reference returned correctly');
}
d42 1
a46 1

d52 2
a53 2
    eval { die $msg };
    is( $@@, $msg, "Literal passed to die" );
d56 4
a59 4
    eval { die $msg };
    is( $err, $msg, 'die handler with utf8' );
    eval { warn $msg };
    is( $err, $msg, 'warn handler with utf8' );
d61 2
a62 1
    like( $@@, qr/Global symbol "\$\x{3b1}"/, 'utf8 symbol names show up in $@@' );
a67 1
    use warnings "uninitialized";
d72 2
a73 1
    is( $ok, 1, 'no warnings if $@@ is undef' );
@


