head	1.1;
branch	1.1.1;
access;
symbols
	PERL_5_24_2:1.1.1.2
	OPENBSD_6_1:1.1.1.2.0.10
	OPENBSD_6_1_BASE:1.1.1.2
	OPENBSD_6_0:1.1.1.2.0.8
	OPENBSD_6_0_BASE:1.1.1.2
	OPENBSD_5_9:1.1.1.2.0.2
	OPENBSD_5_9_BASE:1.1.1.2
	OPENBSD_5_8:1.1.1.2.0.4
	OPENBSD_5_8_BASE:1.1.1.2
	PERL_5_20_2:1.1.1.2
	OPENBSD_5_7:1.1.1.1.0.14
	OPENBSD_5_7_BASE:1.1.1.1
	PERL_5_20_1:1.1.1.1
	OPENBSD_5_6:1.1.1.1.0.18
	OPENBSD_5_6_BASE:1.1.1.1
	PERL_5_18_2:1.1.1.1
	PERL:1.1.1
	OPENBSD_5_5:1.1.1.1.0.16
	OPENBSD_5_5_BASE:1.1.1.1
	OPENBSD_5_4:1.1.1.1.0.12
	OPENBSD_5_4_BASE:1.1.1.1
	PERL_5_16_3:1.1.1.1
	OPENBSD_5_3:1.1.1.1.0.10
	OPENBSD_5_3_BASE:1.1.1.1
	OPENBSD_5_2:1.1.1.1.0.8
	OPENBSD_5_2_BASE:1.1.1.1
	OPENBSD_5_1_BASE:1.1.1.1
	OPENBSD_5_1:1.1.1.1.0.6
	OPENBSD_5_0:1.1.1.1.0.4
	OPENBSD_5_0_BASE:1.1.1.1
	OPENBSD_4_9:1.1.1.1.0.2
	OPENBSD_4_9_BASE:1.1.1.1
	PERL_5_12_2:1.1.1.1
	CPAN:1.1.1;
locks; strict;
comment	@# @;
expand	@o@;


1.1
date	2010.09.24.14.49.18;	author millert;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	2010.09.24.14.49.18;	author millert;	state Exp;
branches;
next	1.1.1.2;

1.1.1.2
date	2015.04.25.19.10.48;	author afresh1;	state Exp;
branches;
next	;
commitid	Wpcs5S8qILgEZC7F;


desc
@@


1.1
log
@Initial revision
@
text
@#!./perl

BEGIN {
    chdir 't' if -d 't';
    @@INC = '../lib';
    require './test.pl';
}

use strict;

plan 5;

my $err = "Unimplemented at $0 line " . ( __LINE__ + 2 ) . ".\n";

eval { ... };

is $@@, $err;


#
# Regression tests, making sure ... is still parsable as an operator.
#
my @@lines = split /\n/ => <<'--';

# Check simple range operator.
my @@arr = 'A' ... 'D';

# Range operator with print.
print 'D' ... 'A';

# Without quotes, 'D' could be a file handle.
print  D  ...  A ;

# Another possible interaction with a file handle.
print ${\"D"}  ...  A ;
--

foreach my $line (@@lines) {
    next if $line =~ /^\s*#/ || $line !~ /\S/;
    my $mess = qq {Parsing '...' in "$line" as a range operator};
    eval qq {
       {local *STDOUT; no strict "subs"; $line;}
        pass \$mess;
        1;
    } or do {
        my $err = $@@;
        $err =~ s/\n//g;
        fail "$mess ($err)";
    }
}
@


1.1.1.1
log
@Perl 5.12.2 from CPAN
@
text
@@


1.1.1.2
log
@Import perl-5.20.2
@
text
@d11 1
a11 1
plan 9;
d13 1
a13 3
my $err;
my $err1 = "Unimplemented at $0 line ";
my $err2 = ".\n";
a14 1
$err = $err1 . ( __LINE__ + 1 ) . $err2;
a15 2
is $@@, $err, "Execution of ellipsis statement reported 'Unimplemented' code";
$@@ = '';
d17 1
a17 7
note("RT #122661: Semicolon before ellipsis statement disambiguates to indicate block rather than hash reference");
my @@input = (3..5);
my @@transformed;
$err = $err1 . ( __LINE__ + 1 ) . $err2;
eval { @@transformed = map {; ... } @@input; };
is $@@, $err, "Disambiguation case 1";
$@@ = '';
a18 14
$err = $err1 . ( __LINE__ + 1 ) . $err2;
eval { @@transformed = map {;...} @@input; };
is $@@, $err, "Disambiguation case 2";
$@@ = '';

$err = $err1 . ( __LINE__ + 1 ) . $err2;
eval { @@transformed = map {; ...} @@input; };
is $@@, $err, "Disambiguation case 3";
$@@ = '';

$err = $err1 . ( __LINE__ + 1 ) . $err2;
eval { @@transformed = map {;... } @@input; };
is $@@, $err, "Disambiguation case 4";
$@@ = '';
@

