head	1.2;
access;
symbols
	OPENBSD_6_2_BASE:1.2
	PERL_5_24_2:1.1.1.5
	OPENBSD_6_1:1.2.0.4
	OPENBSD_6_1_BASE:1.2
	OPENBSD_6_0:1.1.1.4.0.12
	OPENBSD_6_0_BASE:1.1.1.4
	OPENBSD_5_9:1.1.1.4.0.6
	OPENBSD_5_9_BASE:1.1.1.4
	OPENBSD_5_8:1.1.1.4.0.8
	OPENBSD_5_8_BASE:1.1.1.4
	PERL_5_20_2:1.1.1.4
	OPENBSD_5_7:1.1.1.4.0.2
	OPENBSD_5_7_BASE:1.1.1.4
	PERL_5_20_1:1.1.1.4
	OPENBSD_5_6:1.1.1.4.0.4
	OPENBSD_5_6_BASE:1.1.1.4
	PERL_5_18_2:1.1.1.4
	PERL:1.1.1
	OPENBSD_5_5:1.1.1.3.0.6
	OPENBSD_5_5_BASE:1.1.1.3
	OPENBSD_5_4:1.1.1.3.0.2
	OPENBSD_5_4_BASE:1.1.1.3
	PERL_5_16_3:1.1.1.3
	OPENBSD_5_3:1.1.1.2.0.10
	OPENBSD_5_3_BASE:1.1.1.2
	OPENBSD_5_2:1.1.1.2.0.8
	OPENBSD_5_2_BASE:1.1.1.2
	OPENBSD_5_1_BASE:1.1.1.2
	OPENBSD_5_1:1.1.1.2.0.6
	OPENBSD_5_0:1.1.1.2.0.4
	OPENBSD_5_0_BASE:1.1.1.2
	OPENBSD_4_9:1.1.1.2.0.2
	OPENBSD_4_9_BASE:1.1.1.2
	PERL_5_12_2:1.1.1.2
	OPENBSD_4_8:1.1.1.1.0.38
	OPENBSD_4_8_BASE:1.1.1.1
	OPENBSD_4_7:1.1.1.1.0.34
	OPENBSD_4_7_BASE:1.1.1.1
	PERL_5_10_1:1.1.1.1
	OPENBSD_4_6:1.1.1.1.0.36
	OPENBSD_4_6_BASE:1.1.1.1
	OPENBSD_4_5:1.1.1.1.0.32
	OPENBSD_4_5_BASE:1.1.1.1
	PERL_5_10_0:1.1.1.1
	OPENBSD_4_4:1.1.1.1.0.30
	OPENBSD_4_4_BASE:1.1.1.1
	OPENBSD_4_3:1.1.1.1.0.28
	OPENBSD_4_3_BASE:1.1.1.1
	OPENBSD_4_2:1.1.1.1.0.26
	OPENBSD_4_2_BASE:1.1.1.1
	OPENBSD_4_1:1.1.1.1.0.24
	OPENBSD_4_1_BASE:1.1.1.1
	OPENBSD_4_0:1.1.1.1.0.22
	OPENBSD_4_0_BASE:1.1.1.1
	PERL_5_8_8:1.1.1.1
	OPENBSD_3_9:1.1.1.1.0.20
	OPENBSD_3_9_BASE:1.1.1.1
	OPENBSD_3_8:1.1.1.1.0.18
	OPENBSD_3_8_BASE:1.1.1.1
	OPENBSD_3_7:1.1.1.1.0.16
	OPENBSD_3_7_BASE:1.1.1.1
	PERL_5_8_6:1.1.1.1
	OPENBSD_3_6:1.1.1.1.0.14
	OPENBSD_3_6_BASE:1.1.1.1
	PERL_5_8_5:1.1.1.1
	PERL_5_8_3:1.1.1.1
	OPENBSD_3_5:1.1.1.1.0.12
	OPENBSD_3_5_BASE:1.1.1.1
	PERL_5_8_2:1.1.1.1
	OPENBSD_3_4:1.1.1.1.0.10
	OPENBSD_3_4_BASE:1.1.1.1
	OPENBSD_3_3:1.1.1.1.0.8
	OPENBSD_3_3_BASE:1.1.1.1
	PERL_5_8_0:1.1.1.1
	OPENBSD_3_2:1.1.1.1.0.6
	OPENBSD_3_2_BASE:1.1.1.1
	OPENBSD_3_1:1.1.1.1.0.4
	OPENBSD_3_1_BASE:1.1.1.1
	OPENBSD_3_0:1.1.1.1.0.2
	OPENBSD_3_0_BASE:1.1.1.1
	PERL_5_6_1:1.1.1.1
	CPAN:1.1.1;
locks; strict;
comment	@# @;
expand	@o@;


1.2
date	2017.02.05.00.32.20;	author afresh1;	state Exp;
branches;
next	1.1;
commitid	cxJ08BvJA9Pt2PTM;

1.1
date	2001.05.24.18.25.46;	author millert;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	2001.05.24.18.25.46;	author millert;	state Exp;
branches;
next	1.1.1.2;

1.1.1.2
date	2010.09.24.14.49.17;	author millert;	state Exp;
branches;
next	1.1.1.3;

1.1.1.3
date	2013.03.25.20.09.36;	author sthen;	state Exp;
branches;
next	1.1.1.4;

1.1.1.4
date	2014.03.24.14.59.10;	author afresh1;	state Exp;
branches;
next	1.1.1.5;

1.1.1.5
date	2017.08.14.13.46.24;	author afresh1;	state Exp;
branches;
next	;
commitid	fAzrs78vdW2Yfc6A;


desc
@@


1.2
log
@Fix merge issues, remove excess files - match perl-5.24.1 dist
@
text
@#!./perl

BEGIN {
    chdir 't' if -d 't';
    require './test.pl';
    set_up_inc('../lib');
}

plan tests => 23;

is(reverse("abc"), "cba", 'simple reverse');

$_ = "foobar";
is(reverse(), "raboof", 'reverse of the default variable');

{
    my @@a = ("foo", "bar");
    my @@b = reverse @@a;

    is($b[0], $a[1], 'array reversal moved second element to first');
    is($b[1], $a[0], 'array reversal moved first element to second');
}

{
    my @@a = (1, 2, 3, 4);
    @@a = reverse @@a;
    is("@@a", "4 3 2 1", 'four element array reversed');

    delete $a[1];
    @@a = reverse @@a;
    ok(!exists $a[2], 'array reversed with deleted second element');
    is($a[0] . $a[1] . $a[3], '124', 'remaining elements ok after delete and reverse');

    @@a = (5, 6, 7, 8, 9);
    @@a = reverse @@a;
    is("@@a", "9 8 7 6 5", 'five element array reversed');

    delete $a[3];
    @@a = reverse @@a;
    ok(!exists $a[1], 'five element array reversed with deleted fourth element');
    is($a[0] . $a[2] . $a[3] . $a[4], '5789', 'remaining elements ok after delete and reverse');

    delete $a[2];
    @@a = reverse @@a;
    ok(!exists $a[2] && !exists $a[3], 'test position of two deleted elements after reversal');
    is($a[0] . $a[1] . $a[4], '985', 'check value of remaining elements');

    my @@empty;
    @@empty = reverse @@empty;
    is("@@empty", "", 'reversed empty array is still empty');
}

use Tie::Array;

{
    tie my @@a, 'Tie::StdArray';

    @@a = (1, 2, 3, 4);
    @@a = reverse @@a;
    is("@@a", "4 3 2 1", 'tie array reversal');

    delete $a[1];
    @@a = reverse @@a;
    ok(!exists $a[2], 'deleted element position ok after reversal of tie array');
    is($a[0] . $a[1] . $a[3], '124', 'remaining elements ok after delete and reversal for tie array');

    @@a = (5, 6, 7, 8, 9);
    @@a = reverse @@a;
    is("@@a", "9 8 7 6 5", 'five element tie array reversal');

    delete $a[3];
    @@a = reverse @@a;
    ok(!exists $a[1], 'deleted element position ok after tie array reversal');
    is($a[0] . $a[2] . $a[3] . $a[4], '5789', 'remaining elements ok after tie array delete and reversal');

    delete $a[2];
    @@a = reverse @@a;
    ok(!exists $a[2] && !exists $a[3], 'two deleted element positions ok after tie array reversal');
    is($a[0] . $a[1] . $a[4], '985', 'remaining elements ok after two deletes and reversals');

    tie my @@empty, "Tie::StdArray";
    @@empty = reverse @@empty;
    is(scalar(@@empty), 0, 'reversed tie array still empty after reversal');
}

{
    # Unicode.

    my $a = "\x{263A}\x{263A}x\x{263A}y\x{263A}";
    my $b = scalar reverse($a);
    my $c = scalar reverse($b);
    is($a, $c, 'Unicode string double reversal matches original');
}
@


1.1
log
@Initial revision
@
text
@d5 2
a6 1
    @@INC = '../lib';
d9 1
a9 1
print "1..4\n";
d11 1
a11 2
print "not " unless reverse("abc")    eq "cba";
print "ok 1\n";
d14 1
a14 2
print "not " unless reverse()         eq "raboof";
print "ok 2\n";
d20 64
a83 2
    print "not " unless $b[0] eq $a[1] && $b[1] eq $a[0];
    print "ok 3\n";
d92 1
a92 2
    print "not " unless $a eq $c;
    print "ok 4\n";
@


1.1.1.1
log
@stock perl 5.6.1
@
text
@@


1.1.1.2
log
@Perl 5.12.2 from CPAN
@
text
@a5 1
    require './test.pl';
d8 1
a8 1
plan tests => 23;
d10 2
a11 1
is(reverse("abc"), "cba");
d14 2
a15 1
is(reverse(), "raboof");
d21 2
a22 64
    is($b[0], $a[1]);
    is($b[1], $a[0]);
}

{
    my @@a = (1, 2, 3, 4);
    @@a = reverse @@a;
    is("@@a", "4 3 2 1");

    delete $a[1];
    @@a = reverse @@a;
    ok(!exists $a[2]);
    is($a[0] . $a[1] . $a[3], '124');

    @@a = (5, 6, 7, 8, 9);
    @@a = reverse @@a;
    is("@@a", "9 8 7 6 5");

    delete $a[3];
    @@a = reverse @@a;
    ok(!exists $a[1]);
    is($a[0] . $a[2] . $a[3] . $a[4], '5789');

    delete $a[2];
    @@a = reverse @@a;
    ok(!exists $a[2] && !exists $a[3]);
    is($a[0] . $a[1] . $a[4], '985');

    my @@empty;
    @@empty = reverse @@empty;
    is("@@empty", "");
}

use Tie::Array;

{
    tie my @@a, 'Tie::StdArray';

    @@a = (1, 2, 3, 4);
    @@a = reverse @@a;
    is("@@a", "4 3 2 1");

    delete $a[1];
    @@a = reverse @@a;
    ok(!exists $a[2]);
    is($a[0] . $a[1] . $a[3], '124');

    @@a = (5, 6, 7, 8, 9);
    @@a = reverse @@a;
    is("@@a", "9 8 7 6 5");

    delete $a[3];
    @@a = reverse @@a;
    ok(!exists $a[1]);
    is($a[0] . $a[2] . $a[3] . $a[4], '5789');

    delete $a[2];
    @@a = reverse @@a;
    ok(!exists $a[2] && !exists $a[3]);
    is($a[0] . $a[1] . $a[4], '985');

    tie my @@empty, "Tie::StdArray";
    @@empty = reverse @@empty;
    is(scalar(@@empty), 0);
d31 2
a32 1
    is($a, $c);
@


1.1.1.3
log
@import perl 5.16.3 from CPAN - worked on by Andrew Fresh and myself
@
text
@d9 1
a9 1
plan tests => 26;
a92 12
}

{
    # Lexical $_.
    sub blurp { my $_ = shift; reverse }

    is(blurp("foo"), "oof");
    is(sub { my $_ = shift; reverse }->("bar"), "rab");
    {
        local $_ = "XXX";
        is(blurp("paz"), "zap");
    }
@


1.1.1.4
log
@Import perl-5.18.2

OK espie@@ sthen@@ deraadt@@
@
text
@d11 1
a11 1
is(reverse("abc"), "cba", 'simple reverse');
d14 1
a14 1
is(reverse(), "raboof", 'reverse of the default variable');
d20 2
a21 2
    is($b[0], $a[1], 'array reversal moved second element to first');
    is($b[1], $a[0], 'array reversal moved first element to second');
d27 1
a27 1
    is("@@a", "4 3 2 1", 'four element array reversed');
d31 2
a32 2
    ok(!exists $a[2], 'array reversed with deleted second element');
    is($a[0] . $a[1] . $a[3], '124', 'remaining elements ok after delete and reverse');
d36 1
a36 1
    is("@@a", "9 8 7 6 5", 'five element array reversed');
d40 2
a41 2
    ok(!exists $a[1], 'five element array reversed with deleted fourth element');
    is($a[0] . $a[2] . $a[3] . $a[4], '5789', 'remaining elements ok after delete and reverse');
d45 2
a46 2
    ok(!exists $a[2] && !exists $a[3], 'test position of two deleted elements after reversal');
    is($a[0] . $a[1] . $a[4], '985', 'check value of remaining elements');
d50 1
a50 1
    is("@@empty", "", 'reversed empty array is still empty');
d60 1
a60 1
    is("@@a", "4 3 2 1", 'tie array reversal');
d64 2
a65 2
    ok(!exists $a[2], 'deleted element position ok after reversal of tie array');
    is($a[0] . $a[1] . $a[3], '124', 'remaining elements ok after delete and reversal for tie array');
d69 1
a69 1
    is("@@a", "9 8 7 6 5", 'five element tie array reversal');
d73 2
a74 2
    ok(!exists $a[1], 'deleted element position ok after tie array reversal');
    is($a[0] . $a[2] . $a[3] . $a[4], '5789', 'remaining elements ok after tie array delete and reversal');
d78 2
a79 2
    ok(!exists $a[2] && !exists $a[3], 'two deleted element positions ok after tie array reversal');
    is($a[0] . $a[1] . $a[4], '985', 'remaining elements ok after two deletes and reversals');
d83 1
a83 1
    is(scalar(@@empty), 0, 'reversed tie array still empty after reversal');
d92 1
a92 1
    is($a, $c, 'Unicode string double reversal matches original');
a96 1
    no warnings 'experimental::lexical_topic';
d99 2
a100 2
    is(blurp("foo"), "oof", 'reversal of default variable in function');
    is(sub { my $_ = shift; reverse }->("bar"), "rab", 'reversal of default variable in anonymous function');
d103 1
a103 1
        is(blurp("paz"), "zap", 'reversal of default variable with local value set' );
@


1.1.1.5
log
@Import perl-5.24.2
@
text
@d5 1
a6 1
    set_up_inc('../lib');
d9 1
a9 1
plan tests => 23;
d93 13
@


