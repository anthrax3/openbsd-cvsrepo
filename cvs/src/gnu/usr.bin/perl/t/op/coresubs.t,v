head	1.2;
access;
symbols
	OPENBSD_6_2:1.2.0.6
	OPENBSD_6_2_BASE:1.2
	PERL_5_24_2:1.1.1.4
	OPENBSD_6_1:1.2.0.4
	OPENBSD_6_1_BASE:1.2
	OPENBSD_6_0:1.1.1.3.0.10
	OPENBSD_6_0_BASE:1.1.1.3
	OPENBSD_5_9:1.1.1.3.0.4
	OPENBSD_5_9_BASE:1.1.1.3
	OPENBSD_5_8:1.1.1.3.0.6
	OPENBSD_5_8_BASE:1.1.1.3
	PERL_5_20_2:1.1.1.3
	OPENBSD_5_7:1.1.1.3.0.2
	OPENBSD_5_7_BASE:1.1.1.3
	PERL_5_20_1:1.1.1.3
	OPENBSD_5_6:1.1.1.2.0.4
	OPENBSD_5_6_BASE:1.1.1.2
	PERL_5_18_2:1.1.1.2
	PERL:1.1.1
	OPENBSD_5_5:1.1.1.1.0.6
	OPENBSD_5_5_BASE:1.1.1.1
	OPENBSD_5_4:1.1.1.1.0.2
	OPENBSD_5_4_BASE:1.1.1.1
	PERL_5_16_3:1.1.1.1
	CPAN:1.1.1;
locks; strict;
comment	@# @;
expand	@o@;


1.2
date	2017.02.05.00.32.20;	author afresh1;	state Exp;
branches;
next	1.1;
commitid	cxJ08BvJA9Pt2PTM;

1.1
date	2013.03.25.20.09.35;	author sthen;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	2013.03.25.20.09.35;	author sthen;	state Exp;
branches;
next	1.1.1.2;

1.1.1.2
date	2014.03.24.14.59.10;	author afresh1;	state Exp;
branches;
next	1.1.1.3;

1.1.1.3
date	2014.11.17.20.53.17;	author afresh1;	state Exp;
branches;
next	1.1.1.4;
commitid	B31cAbBIXiCqnL97;

1.1.1.4
date	2017.08.14.13.46.23;	author afresh1;	state Exp;
branches;
next	;
commitid	fAzrs78vdW2Yfc6A;


desc
@@


1.2
log
@Fix merge issues, remove excess files - match perl-5.24.1 dist
@
text
@#!./perl

# This script tests the inlining and prototype of CORE:: subs.  Any generic
# tests that are not specific to &foo-style calls should go in this
# file, too.

BEGIN {
    chdir 't' if -d 't';
    @@INC = qw(. ../lib);
    require "./test.pl";
    skip_all_without_dynamic_extension('B');
    $^P |= 0x100;
}

use B;

my %unsupported = map +($_=>1), qw (
 __DATA__ __END__ AUTOLOAD BEGIN UNITCHECK CORE DESTROY END INIT CHECK and
  cmp default do dump else elsif eq eval for foreach
  format ge given goto grep gt if last le local lt m map my ne next
  no  or  our  package  print  printf  q  qq  qr  qw  qx  redo  require
  return s say sort state sub tr unless until use
  when while x xor y
);
my %args_for = (
  dbmopen  => '%1,$2,$3',
 (dbmclose => '%1',
  keys     =>
  values   =>
  each     =>)[0,1,2,1,3,1,4,1],
  delete   => '$1[2]',
  exists   => '$1[2]',
 (push     => '@@1',
  pop      =>
  shift    =>
  unshift  =>
  splice   =>)[0,1,2,1,3,1,4,1,5,1],
);
my %desc = (
  pos => 'match position',
);

use File::Spec::Functions;
my $keywords_file = catfile(updir,'regen','keywords.pl');
open my $kh, $keywords_file
   or die "$0 cannot open $keywords_file: $!";
while(<$kh>) {
  if (m?__END__?..${\0} and /^[+-]/) {
    chomp(my $word = $');
    if($unsupported{$word}) {
      $tests ++;
      ok !defined &{"CORE::$word"}, "no CORE::$word";
    }
    else {
      $tests += 2;

      ok defined &{"CORE::$word"}, "defined &{'CORE::$word'}";

      my $proto = prototype "CORE::$word";
      *{"my$word"} = \&{"CORE::$word"};
      is prototype \&{"my$word"}, $proto, "prototype of &CORE::$word";

      CORE::state $protochar = qr/([^\\]|\\(?:[^[]|\[[^]]+\]))/;
      my $numargs =
            $word eq 'delete' || $word eq 'exists' ? 1 :
            (() = $proto =~ s/;.*//r =~ /\G$protochar/g);

      inlinable_ok($word, $args_for{$word} || join ",", map "\$$_", 1..$numargs);

      # High-precedence tests
      my $hpcode;
      if (!$proto && defined $proto) { # nullary
         $hpcode = "sub { () = my$word + 1 }";
      }
      elsif ($proto =~ /^;?$protochar\z/) { # unary
         $hpcode = "sub { () = my$word "
                           . ($args_for{$word}||'$a') . ' > $b'
                       .'}';
      }
      if ($hpcode) {
         $tests ++;
         # __FILE__ won’t fold with warnings on, and then we get
         # ‘(eval 21)’ vs ‘(eval 22)’.
         no warnings 'numeric';
         $core = op_list(eval $hpcode =~ s/my/CORE::/r or die);
         $my   = op_list(eval $hpcode or die);
         is $my, $core, "precedence of CORE::$word without parens";
      }

      next if ($proto =~ /\@@/);
      # These ops currently accept any number of args, despite their
      # prototypes, if they have any:
      next if $word =~ /^(?:chom?p|exec|keys|each|not
                           |(?:prototyp|read(?:lin|pip))e
                           |reset|system|values|l?stat)|evalbytes/x;

      $tests ++;
      $code =
         "sub { () = (my$word("
             . (
                $args_for{$word}
                 ? $args_for{$word}.',$7'
                 : join ",", map "\$$_", 1..$numargs+5+(
                      $proto =~ /;/
                       ? () = $' =~ /\G$protochar/g
                       : 0
                   )
               )
       . "))}";
      eval $code;
      my $desc = $desc{$word} || $word;
      like $@@, qr/^Too many arguments for $desc/,
          "inlined CORE::$word with too many args"
        or warn $code;

    }
  }
}

sub B::OP::pushname { push @@op_names, shift->name }

sub op_list {
    local @@op_names;
    B::walkoptree(B::svref_2object($_[0])->ROOT, 'pushname');
    return "@@op_names";
}

sub inlinable_ok {
  my ($word, $args, $desc_suffix) = @@_;
  $tests += 2;

  $desc_suffix //= '';

  for ([with => "($args)"], [without => " $args"]) {
    my ($preposition, $full_args) = @@$_;
    my $core_code =
       "#line 1 This-line-makes-__FILE__-easier-to-test.
        sub { () = (CORE::$word$full_args) }";
    my $my_code = $core_code =~ s/CORE::$word/my$word/r;
    my $core = op_list(eval $core_code or die);
    my $my   = op_list(eval   $my_code or die);
    is $my, $core, "inlinability of CORE::$word $preposition parens $desc_suffix";
  }
}

$tests++;
# This subroutine is outside the warnings scope:
sub foo { goto &CORE::abs }
use warnings;
$SIG{__WARN__} = sub { like shift, qr\^Use of uninitialized\ };
foo(undef);

$tests+=2;
is runperl(prog => 'print CORE->lc, qq-\n-'), "core\n",
 'methods calls autovivify coresubs';
is runperl(prog => '@@ISA=CORE; print main->uc, qq-\n-'), "MAIN\n",
 'inherted method calls autovivify coresubs';

{ # RT #117607
  $tests++;
  like runperl(prog => '$foo/; \&CORE::lc', stderr => 1),
    qr/^syntax error/, "RT #117607: \\&CORE::foo doesn't crash in error context";
}

$tests++;
ok eval { *CORE::exit = \42 },
  '[rt.cpan.org #74289] *CORE::foo is not accidentally made read-only';

inlinable_ok($_, '$_{k}', 'on hash')
    for qw<delete exists>;

@@UNIVERSAL::ISA = CORE;
is "just another "->ucfirst . "perl hacker,\n"->ucfirst,
   "Just another Perl hacker,\n", 'coresubs do not return TARG';
++$tests;

done_testing $tests;

CORE::__END__
@


1.1
log
@Initial revision
@
text
@d10 1
a10 1
    require "test.pl";
d15 1
a15 2
use B::Deparse;
my $bd = new B::Deparse '-p';
d17 8
a24 2
my %unsupported = map +($_=>1), qw (CORE and cmp dump eq ge gt le
                                    lt ne or x xor);
d27 14
a40 1
  dbmclose => '%1',
d50 1
a50 1
    if($& eq '+' || $unsupported{$word}) {
d55 1
a55 1
      $tests += 4;
d65 2
a66 9
            () = $proto =~ s/;.*//r =~ /\G$protochar/g;
      my $code =
         "#line 1 This-line-makes-__FILE__-easier-to-test.
          sub { () = (my$word("
             . ($args_for{$word} || join ",", map "\$$_", 1..$numargs)
       . "))}";
      my $core = $bd->coderef2text(eval $code =~ s/my/CORE::/r or die);
      my $my   = $bd->coderef2text(eval $code or die);
      is $my, $core, "inlinability of CORE::$word with parens";
d68 1
a68 8
      $code =
         "#line 1 This-line-makes-__FILE__-easier-to-test.
          sub { () = (my$word "
             . ($args_for{$word} || join ",", map "\$$_", 1..$numargs)
       . ")}";
      $core = $bd->coderef2text(eval $code =~ s/my/CORE::/r or die);
      $my   = $bd->coderef2text(eval $code or die);
      is $my, $core, "inlinability of CORE::$word without parens";
d82 5
a86 2
         $core = $bd->coderef2text(eval $hpcode =~ s/my/CORE::/r or die);
         $my   = $bd->coderef2text(eval $hpcode or die);
d93 2
a94 1
      next if $word =~ /^(?:chom?p|exec|keys|each|not|read(?:lin|pip)e
d111 2
a112 1
      like $@@, qr/^Too many arguments for $word/,
d120 26
d159 6
d168 3
@


1.1.1.1
log
@import perl 5.16.3 from CPAN - worked on by Andrew Fresh and myself
@
text
@@


1.1.1.2
log
@Import perl-5.18.2

OK espie@@ sthen@@ deraadt@@
@
text
@d18 2
a19 8
my %unsupported = map +($_=>1), qw (
 __DATA__ __END__ AUTOLOAD BEGIN UNITCHECK CORE DESTROY END INIT CHECK and
  cmp default do dump else elsif eq eval for foreach
  format ge given goto grep gt if last le local lt m map my ne next
  no  or  our  package  print  printf  q  qq  qr  qw  qx  redo  require
  return s say sort state sub tr unless until use
  when while x xor y
);
a22 5
  delete   => '$1[2]',
  exists   => '$1[2]',
);
my %desc = (
  pos => 'match position',
d32 1
a32 1
    if($unsupported{$word}) {
d47 1
a47 2
            $word eq 'delete' || $word eq 'exists' ? 1 :
            (() = $proto =~ s/;.*//r =~ /\G$protochar/g);
d86 1
a86 2
      next if $word =~ /^(?:chom?p|exec|keys|each|not
                           |(?:prototyp|read(?:lin|pip))e
d103 1
a103 2
      my $desc = $desc{$word} || $word;
      like $@@, qr/^Too many arguments for $desc/,
a122 6

{ # RT #117607
  $tests++;
  like runperl(prog => '$foo/; \&CORE::lc', stderr => 1),
    qr/^syntax error/, "RT #117607: \\&CORE::foo doesn't crash in error context";
}
@


1.1.1.3
log
@Import perl-5.20.1
@
text
@d28 1
a28 4
 (dbmclose => '%1',
  keys     =>
  values   =>
  each     =>)[0,1,2,1,3,1,4,1],
a30 5
 (push     => '@@1',
  pop      =>
  shift    =>
  unshift  =>
  splice   =>)[0,1,2,1,3,1,4,1,5,1],
@


1.1.1.4
log
@Import perl-5.24.2
@
text
@d10 1
a10 1
    require "./test.pl";
d15 2
a16 1
use B;
d56 1
a56 1
      $tests += 2;
d68 8
d77 8
a84 1
      inlinable_ok($word, $args_for{$word} || join ",", map "\$$_", 1..$numargs);
d98 2
a99 5
         # __FILE__ won’t fold with warnings on, and then we get
         # ‘(eval 21)’ vs ‘(eval 22)’.
         no warnings 'numeric';
         $core = op_list(eval $hpcode =~ s/my/CORE::/r or die);
         $my   = op_list(eval $hpcode or die);
a132 26
sub B::OP::pushname { push @@op_names, shift->name }

sub op_list {
    local @@op_names;
    B::walkoptree(B::svref_2object($_[0])->ROOT, 'pushname');
    return "@@op_names";
}

sub inlinable_ok {
  my ($word, $args, $desc_suffix) = @@_;
  $tests += 2;

  $desc_suffix //= '';

  for ([with => "($args)"], [without => " $args"]) {
    my ($preposition, $full_args) = @@$_;
    my $core_code =
       "#line 1 This-line-makes-__FILE__-easier-to-test.
        sub { () = (CORE::$word$full_args) }";
    my $my_code = $core_code =~ s/CORE::$word/my$word/r;
    my $core = op_list(eval $core_code or die);
    my $my   = op_list(eval   $my_code or die);
    is $my, $core, "inlinability of CORE::$word $preposition parens $desc_suffix";
  }
}

a154 3

inlinable_ok($_, '$_{k}', 'on hash')
    for qw<delete exists>;
@


