head	1.9;
access;
symbols
	OPENBSD_6_1_BASE:1.9
	OPENBSD_6_0:1.8.0.12
	OPENBSD_6_0_BASE:1.8
	OPENBSD_5_9:1.8.0.6
	OPENBSD_5_9_BASE:1.8
	OPENBSD_5_8:1.8.0.8
	OPENBSD_5_8_BASE:1.8
	PERL_5_20_2:1.1.1.7
	OPENBSD_5_7:1.8.0.2
	OPENBSD_5_7_BASE:1.8
	PERL_5_20_1:1.1.1.7
	OPENBSD_5_6:1.8.0.4
	OPENBSD_5_6_BASE:1.8
	PERL_5_18_2:1.1.1.7
	PERL:1.1.1
	OPENBSD_5_5:1.7.0.6
	OPENBSD_5_5_BASE:1.7
	OPENBSD_5_4:1.7.0.2
	OPENBSD_5_4_BASE:1.7
	PERL_5_16_3:1.1.1.6
	OPENBSD_5_3:1.6.0.42
	OPENBSD_5_3_BASE:1.6
	OPENBSD_5_2:1.6.0.40
	OPENBSD_5_2_BASE:1.6
	OPENBSD_5_1_BASE:1.6
	OPENBSD_5_1:1.6.0.38
	OPENBSD_5_0:1.6.0.36
	OPENBSD_5_0_BASE:1.6
	OPENBSD_4_9:1.6.0.34
	OPENBSD_4_9_BASE:1.6
	PERL_5_12_2:1.1.1.5
	OPENBSD_4_8:1.6.0.32
	OPENBSD_4_8_BASE:1.6
	OPENBSD_4_7:1.6.0.28
	OPENBSD_4_7_BASE:1.6
	PERL_5_10_1:1.1.1.5
	OPENBSD_4_6:1.6.0.30
	OPENBSD_4_6_BASE:1.6
	OPENBSD_4_5:1.6.0.26
	OPENBSD_4_5_BASE:1.6
	PERL_5_10_0:1.1.1.5
	OPENBSD_4_4:1.6.0.24
	OPENBSD_4_4_BASE:1.6
	OPENBSD_4_3:1.6.0.22
	OPENBSD_4_3_BASE:1.6
	OPENBSD_4_2:1.6.0.20
	OPENBSD_4_2_BASE:1.6
	OPENBSD_4_1:1.6.0.18
	OPENBSD_4_1_BASE:1.6
	OPENBSD_4_0:1.6.0.16
	OPENBSD_4_0_BASE:1.6
	PERL_5_8_8:1.1.1.5
	OPENBSD_3_9:1.6.0.14
	OPENBSD_3_9_BASE:1.6
	OPENBSD_3_8:1.6.0.12
	OPENBSD_3_8_BASE:1.6
	OPENBSD_3_7:1.6.0.10
	OPENBSD_3_7_BASE:1.6
	PERL_5_8_6:1.1.1.5
	OPENBSD_3_6:1.6.0.8
	OPENBSD_3_6_BASE:1.6
	PERL_5_8_5:1.1.1.5
	PERL_5_8_3:1.1.1.5
	OPENBSD_3_5:1.6.0.6
	OPENBSD_3_5_BASE:1.6
	PERL_5_8_2:1.1.1.5
	OPENBSD_3_4:1.6.0.4
	OPENBSD_3_4_BASE:1.6
	OPENBSD_3_3:1.6.0.2
	OPENBSD_3_3_BASE:1.6
	PERL_5_8_0:1.1.1.5
	OPENBSD_3_2:1.5.0.6
	OPENBSD_3_2_BASE:1.5
	OPENBSD_3_1:1.5.0.4
	OPENBSD_3_1_BASE:1.5
	OPENBSD_3_0:1.5.0.2
	OPENBSD_3_0_BASE:1.5
	PERL_5_6_1:1.1.1.4
	OPENBSD_2_9:1.4.0.6
	OPENBSD_2_9_BASE:1.4
	OPENBSD_2_8:1.4.0.4
	OPENBSD_2_8_BASE:1.4
	OPENBSD_2_7:1.4.0.2
	OPENBSD_2_7_BASE:1.4
	PERL_5_6_0:1.1.1.3
	OPENBSD_2_6:1.3.0.2
	OPENBSD_2_6_BASE:1.3
	PERL_500503:1.1.1.2
	CPAN:1.1.1
	OPENBSD_2_5:1.2.0.6
	OPENBSD_2_5_BASE:1.2
	OPENBSD_2_4:1.2.0.4
	OPENBSD_2_4_BASE:1.2
	OPENBSD_2_3:1.2.0.2
	OPENBSD_2_3_BASE:1.2
	OPENBSD_2_2:1.1.1.1.0.6
	OPENBSD_2_2_BASE:1.1.1.1
	OPENBSD_2_1:1.1.1.1.0.4
	OPENBSD_2_1_BASE:1.1.1.1
	OPENBSD_2_0:1.1.1.1.0.2
	OPENBSD_2_0_BASE:1.1.1.1
	perl5003:1.1.1.1
	lwall:1.1.1;
locks; strict;
comment	@# @;
expand	@o@;


1.9
date	2017.02.05.00.32.20;	author afresh1;	state Exp;
branches;
next	1.8;
commitid	cxJ08BvJA9Pt2PTM;

1.8
date	2014.03.24.15.05.33;	author afresh1;	state Exp;
branches;
next	1.7;

1.7
date	2013.03.25.20.40.59;	author sthen;	state Exp;
branches;
next	1.6;

1.6
date	2002.10.27.22.25.37;	author millert;	state Exp;
branches;
next	1.5;

1.5
date	2001.05.24.18.36.20;	author millert;	state Exp;
branches;
next	1.4;

1.4
date	2000.04.06.17.08.27;	author millert;	state Exp;
branches;
next	1.3;

1.3
date	99.04.29.22.52.36;	author millert;	state Exp;
branches;
next	1.2;

1.2
date	97.11.30.08.05.31;	author millert;	state Exp;
branches;
next	1.1;

1.1
date	96.08.19.10.13.20;	author downsj;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	96.08.19.10.13.20;	author downsj;	state Exp;
branches;
next	1.1.1.2;

1.1.1.2
date	99.04.29.22.41.47;	author millert;	state Exp;
branches;
next	1.1.1.3;

1.1.1.3
date	2000.04.06.16.10.49;	author millert;	state Exp;
branches;
next	1.1.1.4;

1.1.1.4
date	2001.05.24.18.25.43;	author millert;	state Exp;
branches;
next	1.1.1.5;

1.1.1.5
date	2002.10.27.22.15.10;	author millert;	state Exp;
branches;
next	1.1.1.6;

1.1.1.6
date	2013.03.25.20.09.36;	author sthen;	state Exp;
branches;
next	1.1.1.7;

1.1.1.7
date	2014.03.24.14.59.10;	author afresh1;	state Exp;
branches;
next	;


desc
@@


1.9
log
@Fix merge issues, remove excess files - match perl-5.24.1 dist
@
text
@#!./perl

# Tests 51 onwards are intentionally not all-warnings-clean

chdir 't' if -d 't';
require './test.pl';
use strict;

plan(tests => 77);

foreach(['0b1_0101', 0b101_01],
	['0b10_101', 0_2_5],
	['0b101_01', 2_1],
	['0b1010_1', 0x1_5],
	['b1_0101', 0b10101],
	['b10_101', 025],
	['b101_01', 21],
	['b1010_1', 0x15],
	['01_234', 0b10_1001_1100],
	['012_34', 01234],
	['0123_4', 668],
	['01234', 0x29c],
	['0x1_234', 0b10010_00110100],
	['0x12_34', 01_1064],
	['0x123_4', 4660],
	['0x1234', 0x12_34],
	['x1_234', 0b100100011010_0],
	['x12_34', 0_11064],
	['x123_4', 4660],
	['x1234', 0x_1234],
	['0b1111_1111_1111_1111_1111_1111_1111_1111', 4294967295],
	['037_777_777_777', 4294967295],
	['0xffff_ffff', 4294967295],
	['0b'.(  '0'x10).'1_0101', 0b101_01],
	['0b'.( '0'x100).'1_0101', 0b101_01],
	['0b'.('0'x1000).'1_0101', 0b101_01],
	# Things that perl 5.6.1 and 5.7.2 did wrong (plus some they got right)
	["b00b0101", 0],
	["bb0101", 0],
	["0bb0101", 0],
	["0x0x3A", 0],
	["0xx3A", 0],
	["x0x3A", 0],
	["xx3A", 0],
	["0x3A", 0x3A],
	["x3A", 0x3A],
	["0x0x4", 0],
	["0xx4", 0],
	["x0x4", 0],
	["xx4", 0],
	["0x4", 4],
	["x4", 4],
	# Allow uppercase base markers (#76296)
	["0XCAFE", 0xCAFE],
	["XCAFE", 0xCAFE],
	["0B101001", 0b101001],
	["B101001", 0b101001],
       ) {
    my ($string, $value) = @@$_;
    my $result = oct $string;

    my $desc = ($^O ne 'VMS' || length $string <= 256) && "oct \"$string\"";

    unless (cmp_ok($value, '==', $result, $desc)) {
	my $format = ($string =~ /([bx])/i) ? "0\L$1%\U$1": '0%o';
	diag(sprintf "oct '%s' gives '%s' ($format), not %s ($format)",
	     $string, $result, $result, $value, $value);
    }
}

foreach(['01_234', 0b_1001000110100],
	['012_34', 011064],
	['0123_4', 4660],
	['01234_', 0x1234],
	['0x_1234', 0b1001000110100],
	['0x1_234', 011064],
	['0x12_34', 4660],
	['0x1234_', 0x1234],
	['x_1234', 0b1001000110100],
	['x12_34', 011064],
	['x123_4', 4660],
	['x1234_', 0x1234],
	['0xff_ff_ff_ff', 4294967295],
	[(  '0'x10).'01234', 0x1234],
	[( '0'x100).'01234', 0x1234],
	[('0'x1000).'01234', 0x1234],
	# Things that perl 5.6.1 and 5.7.2 did wrong (plus some they got right)
	["0x3A", 0x3A],
	["x3A", 0x3A],
	["0x4",4],
	["x4", 4],
	# Allow uppercase base markers (#76296)
	["0XCAFE",   0xCAFE],
	["XCAFE",    0xCAFE],
       ) {
    my ($string, $value) = @@$_;
    my $result = hex $string;

    my $desc = ($^O ne 'VMS' || length $string <= 256) && "hex \"$string\"";

    unless (cmp_ok($value, '==', $result, $desc)) {
	diag(sprintf "hex '%s' gives '%s' (0x%X), not %s (0x%X)",
	     $string, $result, $result, $value, $value);
    }
}


$_ = "\0_7_7";
is(length, 5,
    "length() correctly calculated string with nul character in octal");
is($_, "\0"."_"."7"."_"."7", "string concatenation with nul character");
chop, chop, chop, chop;
is($_, "\0", "repeated chop() eliminated all but nul character");
if ($::IS_EBCDIC) {
    is("\157_", "?_",
        "question mark is 111 in 1047, 037, && POSIX-BC");
}
else {
    is("\077_", "?_",
        "question mark is 077 in other than 1047, 037, && POSIX-BC");
}

$_ = "\x_7_7";
is(length, 5,
    "length() correctly calculated string with nul character in hex");
is($_, "\0"."_"."7"."_"."7", "string concatenation with nul character");
chop, chop, chop, chop;
is($_, "\0", "repeated chop() eliminated all but nul character");
if ($::IS_EBCDIC) {
    is("\x61_", "/_",
        "/ is 97 in 1047, 037, && POSIX-BC");
}
else {
    is("\x2F_", "/_",
        "/ is 79 in other than 1047, 037, && POSIX-BC");
}

eval '$a = oct "10\x{100}"';
like($@@, qr/Wide character/, "wide character - oct");

eval '$a = hex "ab\x{100}"';
like($@@, qr/Wide character/, "wide character - hex");
@


1.8
log
@Merge perl-5.18.2 plus local patches, remove old files

OK espie@@ sthen@@ deraadt@@
@
text
@d5 1
d114 1
a114 1
if (ord("\t") != 9) {
d129 1
a129 1
if (ord("\t") != 9) {
@


1.7
log
@merge/resolve conflicts
(some more to do after this one)
@
text
@d3 1
a3 1
# tests 51 onwards aren't all warnings clean. (intentionally)
d108 3
a110 2
is(length, 5);
is($_, "\0"."_"."7"."_"."7");
d112 1
a112 1
is($_, "\0");
d114 2
a115 2
    # question mark is 111 in 1047, 037, && POSIX-BC
    is("\157_", "?_");
d118 2
a119 1
    is("\077_", "?_");
d123 3
a125 2
is(length, 5);
is($_, "\0"."_"."7"."_"."7");
d127 1
a127 1
is($_, "\0");
d129 2
a130 2
    # / is 97 in 1047, 037, && POSIX-BC
    is("\x61_", "/_");
d133 2
a134 1
    is("\x2F_", "/_");
d138 1
a138 1
like($@@, qr/Wide character/);
d141 1
a141 1
like($@@, qr/Wide character/);
@


1.6
log
@Resolve conflicts, remove old files, merge local changes
@
text
@d5 2
a6 1
print "1..71\n";
d8 1
a8 1
my $test = 1;
d10 57
a66 15
sub test ($$$) {
  my ($act, $string, $value) = @@_;
  my $result;
  if ($act eq 'oct') {
    $result = oct $string;
  } elsif ($act eq 'hex') {
    $result = hex $string;
  } else {
    die "Unknown action 'act'";
  }
  if ($value == $result) {
    if ($^O eq 'VMS' && length $string > 256) {
      $string = '';
    } else {
      $string = "\"$string\"";
d68 35
a102 12
    print "ok $test # $act $string\n";
  } else {
    my ($valstr, $resstr);
    if ($act eq 'hex' or $string =~ /x/) {
      $valstr = sprintf "0x%X", $value;
      $resstr = sprintf "0x%X", $result;
    } elsif ($string =~ /b/) {
      $valstr = sprintf "0b%b", $value;
      $resstr = sprintf "0b%b", $result;
    } else {
      $valstr = sprintf "0%o", $value;
      $resstr = sprintf "0%o", $result;
d104 2
a105 49
    print "not ok $test # $act \"$string\" gives \"$result\" ($resstr), not $value ($valstr)\n";
  }
  $test++;
}

test ('oct', '0b1_0101', 0b101_01);
test ('oct', '0b10_101', 0_2_5);
test ('oct', '0b101_01', 2_1);
test ('oct', '0b1010_1', 0x1_5);

test ('oct', 'b1_0101', 0b10101);
test ('oct', 'b10_101', 025);
test ('oct', 'b101_01', 21);
test ('oct', 'b1010_1', 0x15);

test ('oct', '01_234', 0b10_1001_1100);
test ('oct', '012_34', 01234);
test ('oct', '0123_4', 668);
test ('oct', '01234', 0x29c);

test ('oct', '0x1_234', 0b10010_00110100);
test ('oct', '0x12_34', 01_1064);
test ('oct', '0x123_4', 4660);
test ('oct', '0x1234', 0x12_34);

test ('oct', 'x1_234', 0b100100011010_0);
test ('oct', 'x12_34', 0_11064);
test ('oct', 'x123_4', 4660);
test ('oct', 'x1234', 0x_1234);

test ('hex', '01_234', 0b_1001000110100);
test ('hex', '012_34', 011064);
test ('hex', '0123_4', 4660);
test ('hex', '01234_', 0x1234);

test ('hex', '0x_1234', 0b1001000110100);
test ('hex', '0x1_234', 011064);
test ('hex', '0x12_34', 4660);
test ('hex', '0x1234_', 0x1234);

test ('hex', 'x_1234', 0b1001000110100);
test ('hex', 'x12_34', 011064);
test ('hex', 'x123_4', 4660);
test ('hex', 'x1234_', 0x1234);

test ('oct', '0b1111_1111_1111_1111_1111_1111_1111_1111', 4294967295);
test ('oct', '037_777_777_777', 4294967295);
test ('oct', '0xffff_ffff', 4294967295);
test ('hex', '0xff_ff_ff_ff', 4294967295);
d108 2
a109 2
print length eq 5                      ? "ok" : "not ok", " 37\n";
print $_ eq "\0"."_"."7"."_"."7"       ? "ok" : "not ok", " 38\n";
d111 1
a111 1
print $_ eq "\0"                       ? "ok" : "not ok", " 39\n";
d114 1
a114 1
    print "\157_" eq "?_"                  ? "ok" : "not ok", " 40\n";
d117 1
a117 1
    print "\077_" eq "?_"                  ? "ok" : "not ok", " 40\n";
d121 2
a122 2
print length eq 5                      ? "ok" : "not ok", " 41\n";
print $_ eq "\0"."_"."7"."_"."7"       ? "ok" : "not ok", " 42\n";
d124 1
a124 1
print $_ eq "\0"                       ? "ok" : "not ok", " 43\n";
d127 1
a127 1
    print "\x61_" eq "/_"                  ? "ok" : "not ok", " 44\n";
d130 1
a130 1
    print "\x2F_" eq "/_"                  ? "ok" : "not ok", " 44\n";
a132 34
$test = 45;
test ('oct', '0b'.(  '0'x10).'1_0101', 0b101_01);
test ('oct', '0b'.( '0'x100).'1_0101', 0b101_01);
test ('oct', '0b'.('0'x1000).'1_0101', 0b101_01);

test ('hex', (  '0'x10).'01234', 0x1234);
test ('hex', ( '0'x100).'01234', 0x1234);
test ('hex', ('0'x1000).'01234', 0x1234);

# Things that perl 5.6.1 and 5.7.2 did wrong (plus some they got right)
test ('oct', "b00b0101", 0);
test ('oct', "bb0101",	 0);
test ('oct', "0bb0101",	 0);

test ('oct', "0x0x3A",	 0);
test ('oct', "0xx3A",	 0);
test ('oct', "x0x3A",	 0);
test ('oct', "xx3A",	 0);
test ('oct', "0x3A",	 0x3A);
test ('oct', "x3A",	 0x3A);

test ('oct', "0x0x4",	 0);
test ('oct', "0xx4",	 0);
test ('oct', "x0x4",	 0);
test ('oct', "xx4",	 0);
test ('oct', "0x4",	 4);
test ('oct', "x4",	 4);

test ('hex', "0x3A",	 0x3A);
test ('hex', "x3A",	 0x3A);

test ('hex', "0x4",	 4);
test ('hex', "x4",	 4);

d134 1
a134 1
print $@@ =~ /Wide character/ ? "ok $test\n" : "not ok $test\n"; $test++;
d137 1
a137 1
print $@@ =~ /Wide character/ ? "ok $test\n" : "not ok $test\n"; $test++;
@


1.5
log
@merge in perl 5.6.1 with our local changes
@
text
@d3 1
a3 1
print "1..50\n";
d5 1
a5 46
print +(oct('0b1_0101') ==        0b101_01) ? "ok" : "not ok", " 1\n";
print +(oct('0b10_101') ==           0_2_5) ? "ok" : "not ok", " 2\n";
print +(oct('0b101_01') ==             2_1) ? "ok" : "not ok", " 3\n";
print +(oct('0b1010_1') ==           0x1_5) ? "ok" : "not ok", " 4\n";

print +(oct('b1_0101') ==          0b10101) ? "ok" : "not ok", " 5\n";
print +(oct('b10_101') ==              025) ? "ok" : "not ok", " 6\n";
print +(oct('b101_01') ==               21) ? "ok" : "not ok", " 7\n";
print +(oct('b1010_1') ==             0x15) ? "ok" : "not ok", " 8\n";

print +(oct('01_234')  ==   0b10_1001_1100) ? "ok" : "not ok", " 9\n";
print +(oct('012_34')  ==            01234) ? "ok" : "not ok", " 10\n";
print +(oct('0123_4')  ==              668) ? "ok" : "not ok", " 11\n";
print +(oct('01234')   ==            0x29c) ? "ok" : "not ok", " 12\n";

print +(oct('0x1_234') == 0b10010_00110100) ? "ok" : "not ok", " 13\n";
print +(oct('0x12_34') ==          01_1064) ? "ok" : "not ok", " 14\n";
print +(oct('0x123_4') ==             4660) ? "ok" : "not ok", " 15\n";
print +(oct('0x1234')  ==          0x12_34) ? "ok" : "not ok", " 16\n";

print +(oct('x1_234')  == 0b100100011010_0) ? "ok" : "not ok", " 17\n";
print +(oct('x12_34')  ==          0_11064) ? "ok" : "not ok", " 18\n";
print +(oct('x123_4')  ==             4660) ? "ok" : "not ok", " 19\n";
print +(oct('x1234')   ==          0x_1234) ? "ok" : "not ok", " 20\n";

print +(hex('01_234')  == 0b_1001000110100) ? "ok" : "not ok", " 21\n";
print +(hex('012_34')  ==           011064) ? "ok" : "not ok", " 22\n";
print +(hex('0123_4')  ==             4660) ? "ok" : "not ok", " 23\n";
print +(hex('01234_')  ==           0x1234) ? "ok" : "not ok", " 24\n";

print +(hex('0x_1234') ==  0b1001000110100) ? "ok" : "not ok", " 25\n";
print +(hex('0x1_234') ==           011064) ? "ok" : "not ok", " 26\n";
print +(hex('0x12_34') ==             4660) ? "ok" : "not ok", " 27\n";
print +(hex('0x1234_') ==           0x1234) ? "ok" : "not ok", " 28\n";

print +(hex('x_1234')  ==  0b1001000110100) ? "ok" : "not ok", " 29\n";
print +(hex('x12_34')  ==           011064) ? "ok" : "not ok", " 30\n";
print +(hex('x123_4')  ==             4660) ? "ok" : "not ok", " 31\n";
print +(hex('x1234_')  ==           0x1234) ? "ok" : "not ok", " 32\n";

print +(oct('0b1111_1111_1111_1111_1111_1111_1111_1111') == 4294967295) ?
    "ok" : "not ok", " 33\n";
print +(oct('037_777_777_777')                       == 4294967295) ?
    "ok" : "not ok", " 34\n";
print +(oct('0xffff_ffff')                         == 4294967295) ?
    "ok" : "not ok", " 35\n";
d7 80
a86 2
print +(hex('0xff_ff_ff_ff')                         == 4294967295) ?
    "ok" : "not ok", " 36\n";
d114 36
a149 7
print +(oct('0b'.(  '0'x10).'1_0101') ==  0b101_01) ? "ok" : "not ok", " 45\n";
print +(oct('0b'.( '0'x100).'1_0101') ==  0b101_01) ? "ok" : "not ok", " 46\n";
print +(oct('0b'.('0'x1000).'1_0101') ==  0b101_01) ? "ok" : "not ok", " 47\n";

print +(hex((  '0'x10).'01234') ==  0x1234) ? "ok" : "not ok", " 48\n";
print +(hex(( '0'x100).'01234') ==  0x1234) ? "ok" : "not ok", " 49\n";
print +(hex(('0'x1000).'01234') ==  0x1234) ? "ok" : "not ok", " 50\n";
d151 2
@


1.4
log
@perl-5.6.0 + local changes
@
text
@d3 1
a3 1
print "1..36\n";
d5 13
a17 13
print +(oct('0b10101') ==          0b10101) ? "ok" : "not ok", " 1\n";
print +(oct('0b10101') ==              025) ? "ok" : "not ok", " 2\n";
print +(oct('0b10101') ==               21) ? "ok" : "not ok", " 3\n";
print +(oct('0b10101') ==             0x15) ? "ok" : "not ok", " 4\n";

print +(oct('b10101')  ==          0b10101) ? "ok" : "not ok", " 5\n";
print +(oct('b10101')  ==              025) ? "ok" : "not ok", " 6\n";
print +(oct('b10101')  ==               21) ? "ok" : "not ok", " 7\n";
print +(oct('b10101')  ==             0x15) ? "ok" : "not ok", " 8\n";

print +(oct('01234')   ==     0b1010011100) ? "ok" : "not ok", " 9\n";
print +(oct('01234')   ==            01234) ? "ok" : "not ok", " 10\n";
print +(oct('01234')   ==              668) ? "ok" : "not ok", " 11\n";
d20 24
a43 24
print +(oct('0x1234')  ==  0b1001000110100) ? "ok" : "not ok", " 13\n";
print +(oct('0x1234')  ==           011064) ? "ok" : "not ok", " 14\n";
print +(oct('0x1234')  ==             4660) ? "ok" : "not ok", " 15\n";
print +(oct('0x1234')  ==           0x1234) ? "ok" : "not ok", " 16\n";

print +(oct('x1234')   ==  0b1001000110100) ? "ok" : "not ok", " 17\n";
print +(oct('x1234')   ==           011064) ? "ok" : "not ok", " 18\n";
print +(oct('x1234')   ==             4660) ? "ok" : "not ok", " 19\n";
print +(oct('x1234')   ==           0x1234) ? "ok" : "not ok", " 20\n";

print +(hex('01234')   ==  0b1001000110100) ? "ok" : "not ok", " 21\n";
print +(hex('01234')   ==           011064) ? "ok" : "not ok", " 22\n";
print +(hex('01234')   ==             4660) ? "ok" : "not ok", " 23\n";
print +(hex('01234')   ==           0x1234) ? "ok" : "not ok", " 24\n";

print +(hex('0x1234')  ==  0b1001000110100) ? "ok" : "not ok", " 25\n";
print +(hex('0x1234')  ==           011064) ? "ok" : "not ok", " 26\n";
print +(hex('0x1234')  ==             4660) ? "ok" : "not ok", " 27\n";
print +(hex('0x1234')  ==           0x1234) ? "ok" : "not ok", " 28\n";

print +(hex('x1234')   ==  0b1001000110100) ? "ok" : "not ok", " 29\n";
print +(hex('x1234')   ==           011064) ? "ok" : "not ok", " 30\n";
print +(hex('x1234')   ==             4660) ? "ok" : "not ok", " 31\n";
print +(hex('x1234')   ==           0x1234) ? "ok" : "not ok", " 32\n";
d45 1
a45 1
print +(oct('0b11111111111111111111111111111111') == 4294967295) ?
d47 1
a47 1
print +(oct('037777777777')                       == 4294967295) ?
d49 1
a49 1
print +(oct('0xffffffff')                         == 4294967295) ?
d52 1
a52 1
print +(hex('0xffffffff')                         == 4294967295) ?
d54 35
@


1.3
log
@perl5.005_03 (stock)
@
text
@d3 1
a3 1
print "1..9\n";
d5 49
a53 9
print +(oct('01234') == 01234) ? "ok" : "not ok", " 1\n";
print +(oct('0x1234') == 0x1234) ? "ok" : "not ok", " 2\n";
print +(hex('01234') == 0x1234) ? "ok" : "not ok", " 3\n";
print +(oct('20000000000') == 020000000000) ? "ok" : "not ok", " 4\n";
print +(oct('x80000000') == 0x80000000) ? "ok" : "not ok", " 5\n";
print +(hex('80000000') == 0x80000000) ? "ok" : "not ok", " 6\n";
print +(oct('1234') == 668) ? "ok" : "not ok", " 7\n";
print +(hex('1234') == 4660) ? "ok" : "not ok", " 8\n";
print +(hex('0x1234') == 0x1234) ? "ok" : "not ok", " 9\n";
@


1.2
log
@perl 5.004_04
@
text
@d3 1
a3 3
# $RCSfile: oct.t,v $$Revision: 4.1 $$Date: 92/08/07 18:28:08 $

print "1..8\n";
d13 1
@


1.1
log
@Initial revision
@
text
@d5 1
a5 1
print "1..6\n";
d13 2
@


1.1.1.1
log
@Import of Perl 5.003 into the tree.  Makefile.bsd-wrapper and
config.sh.OpenBSD are the only local changes.
@
text
@@


1.1.1.2
log
@perl5.005_03
@
text
@d3 3
a5 1
print "1..9\n";
a12 3
print +(oct('1234') == 668) ? "ok" : "not ok", " 7\n";
print +(hex('1234') == 4660) ? "ok" : "not ok", " 8\n";
print +(hex('0x1234') == 0x1234) ? "ok" : "not ok", " 9\n";
@


1.1.1.3
log
@virgin perl 5.6.0
@
text
@d3 1
a3 1
print "1..36\n";
d5 9
a13 49
print +(oct('0b10101') ==          0b10101) ? "ok" : "not ok", " 1\n";
print +(oct('0b10101') ==              025) ? "ok" : "not ok", " 2\n";
print +(oct('0b10101') ==               21) ? "ok" : "not ok", " 3\n";
print +(oct('0b10101') ==             0x15) ? "ok" : "not ok", " 4\n";

print +(oct('b10101')  ==          0b10101) ? "ok" : "not ok", " 5\n";
print +(oct('b10101')  ==              025) ? "ok" : "not ok", " 6\n";
print +(oct('b10101')  ==               21) ? "ok" : "not ok", " 7\n";
print +(oct('b10101')  ==             0x15) ? "ok" : "not ok", " 8\n";

print +(oct('01234')   ==     0b1010011100) ? "ok" : "not ok", " 9\n";
print +(oct('01234')   ==            01234) ? "ok" : "not ok", " 10\n";
print +(oct('01234')   ==              668) ? "ok" : "not ok", " 11\n";
print +(oct('01234')   ==            0x29c) ? "ok" : "not ok", " 12\n";

print +(oct('0x1234')  ==  0b1001000110100) ? "ok" : "not ok", " 13\n";
print +(oct('0x1234')  ==           011064) ? "ok" : "not ok", " 14\n";
print +(oct('0x1234')  ==             4660) ? "ok" : "not ok", " 15\n";
print +(oct('0x1234')  ==           0x1234) ? "ok" : "not ok", " 16\n";

print +(oct('x1234')   ==  0b1001000110100) ? "ok" : "not ok", " 17\n";
print +(oct('x1234')   ==           011064) ? "ok" : "not ok", " 18\n";
print +(oct('x1234')   ==             4660) ? "ok" : "not ok", " 19\n";
print +(oct('x1234')   ==           0x1234) ? "ok" : "not ok", " 20\n";

print +(hex('01234')   ==  0b1001000110100) ? "ok" : "not ok", " 21\n";
print +(hex('01234')   ==           011064) ? "ok" : "not ok", " 22\n";
print +(hex('01234')   ==             4660) ? "ok" : "not ok", " 23\n";
print +(hex('01234')   ==           0x1234) ? "ok" : "not ok", " 24\n";

print +(hex('0x1234')  ==  0b1001000110100) ? "ok" : "not ok", " 25\n";
print +(hex('0x1234')  ==           011064) ? "ok" : "not ok", " 26\n";
print +(hex('0x1234')  ==             4660) ? "ok" : "not ok", " 27\n";
print +(hex('0x1234')  ==           0x1234) ? "ok" : "not ok", " 28\n";

print +(hex('x1234')   ==  0b1001000110100) ? "ok" : "not ok", " 29\n";
print +(hex('x1234')   ==           011064) ? "ok" : "not ok", " 30\n";
print +(hex('x1234')   ==             4660) ? "ok" : "not ok", " 31\n";
print +(hex('x1234')   ==           0x1234) ? "ok" : "not ok", " 32\n";

print +(oct('0b11111111111111111111111111111111') == 4294967295) ?
    "ok" : "not ok", " 33\n";
print +(oct('037777777777')                       == 4294967295) ?
    "ok" : "not ok", " 34\n";
print +(oct('0xffffffff')                         == 4294967295) ?
    "ok" : "not ok", " 35\n";

print +(hex('0xffffffff')                         == 4294967295) ?
    "ok" : "not ok", " 36\n";
@


1.1.1.4
log
@stock perl 5.6.1
@
text
@d3 1
a3 1
print "1..50\n";
d5 13
a17 13
print +(oct('0b1_0101') ==        0b101_01) ? "ok" : "not ok", " 1\n";
print +(oct('0b10_101') ==           0_2_5) ? "ok" : "not ok", " 2\n";
print +(oct('0b101_01') ==             2_1) ? "ok" : "not ok", " 3\n";
print +(oct('0b1010_1') ==           0x1_5) ? "ok" : "not ok", " 4\n";

print +(oct('b1_0101') ==          0b10101) ? "ok" : "not ok", " 5\n";
print +(oct('b10_101') ==              025) ? "ok" : "not ok", " 6\n";
print +(oct('b101_01') ==               21) ? "ok" : "not ok", " 7\n";
print +(oct('b1010_1') ==             0x15) ? "ok" : "not ok", " 8\n";

print +(oct('01_234')  ==   0b10_1001_1100) ? "ok" : "not ok", " 9\n";
print +(oct('012_34')  ==            01234) ? "ok" : "not ok", " 10\n";
print +(oct('0123_4')  ==              668) ? "ok" : "not ok", " 11\n";
d20 24
a43 24
print +(oct('0x1_234') == 0b10010_00110100) ? "ok" : "not ok", " 13\n";
print +(oct('0x12_34') ==          01_1064) ? "ok" : "not ok", " 14\n";
print +(oct('0x123_4') ==             4660) ? "ok" : "not ok", " 15\n";
print +(oct('0x1234')  ==          0x12_34) ? "ok" : "not ok", " 16\n";

print +(oct('x1_234')  == 0b100100011010_0) ? "ok" : "not ok", " 17\n";
print +(oct('x12_34')  ==          0_11064) ? "ok" : "not ok", " 18\n";
print +(oct('x123_4')  ==             4660) ? "ok" : "not ok", " 19\n";
print +(oct('x1234')   ==          0x_1234) ? "ok" : "not ok", " 20\n";

print +(hex('01_234')  == 0b_1001000110100) ? "ok" : "not ok", " 21\n";
print +(hex('012_34')  ==           011064) ? "ok" : "not ok", " 22\n";
print +(hex('0123_4')  ==             4660) ? "ok" : "not ok", " 23\n";
print +(hex('01234_')  ==           0x1234) ? "ok" : "not ok", " 24\n";

print +(hex('0x_1234') ==  0b1001000110100) ? "ok" : "not ok", " 25\n";
print +(hex('0x1_234') ==           011064) ? "ok" : "not ok", " 26\n";
print +(hex('0x12_34') ==             4660) ? "ok" : "not ok", " 27\n";
print +(hex('0x1234_') ==           0x1234) ? "ok" : "not ok", " 28\n";

print +(hex('x_1234')  ==  0b1001000110100) ? "ok" : "not ok", " 29\n";
print +(hex('x12_34')  ==           011064) ? "ok" : "not ok", " 30\n";
print +(hex('x123_4')  ==             4660) ? "ok" : "not ok", " 31\n";
print +(hex('x1234_')  ==           0x1234) ? "ok" : "not ok", " 32\n";
d45 1
a45 1
print +(oct('0b1111_1111_1111_1111_1111_1111_1111_1111') == 4294967295) ?
d47 1
a47 1
print +(oct('037_777_777_777')                       == 4294967295) ?
d49 1
a49 1
print +(oct('0xffff_ffff')                         == 4294967295) ?
d52 1
a52 1
print +(hex('0xff_ff_ff_ff')                         == 4294967295) ?
a53 35

$_ = "\0_7_7";
print length eq 5                      ? "ok" : "not ok", " 37\n";
print $_ eq "\0"."_"."7"."_"."7"       ? "ok" : "not ok", " 38\n";
chop, chop, chop, chop;
print $_ eq "\0"                       ? "ok" : "not ok", " 39\n";
if (ord("\t") != 9) {
    # question mark is 111 in 1047, 037, && POSIX-BC
    print "\157_" eq "?_"                  ? "ok" : "not ok", " 40\n";
}
else {
    print "\077_" eq "?_"                  ? "ok" : "not ok", " 40\n";
}

$_ = "\x_7_7";
print length eq 5                      ? "ok" : "not ok", " 41\n";
print $_ eq "\0"."_"."7"."_"."7"       ? "ok" : "not ok", " 42\n";
chop, chop, chop, chop;
print $_ eq "\0"                       ? "ok" : "not ok", " 43\n";
if (ord("\t") != 9) {
    # / is 97 in 1047, 037, && POSIX-BC
    print "\x61_" eq "/_"                  ? "ok" : "not ok", " 44\n";
}
else {
    print "\x2F_" eq "/_"                  ? "ok" : "not ok", " 44\n";
}

print +(oct('0b'.(  '0'x10).'1_0101') ==  0b101_01) ? "ok" : "not ok", " 45\n";
print +(oct('0b'.( '0'x100).'1_0101') ==  0b101_01) ? "ok" : "not ok", " 46\n";
print +(oct('0b'.('0'x1000).'1_0101') ==  0b101_01) ? "ok" : "not ok", " 47\n";

print +(hex((  '0'x10).'01234') ==  0x1234) ? "ok" : "not ok", " 48\n";
print +(hex(( '0'x100).'01234') ==  0x1234) ? "ok" : "not ok", " 49\n";
print +(hex(('0'x1000).'01234') ==  0x1234) ? "ok" : "not ok", " 50\n";

@


1.1.1.5
log
@stock perl 5.8.0 from CPAN
@
text
@d3 1
a3 1
# tests 51 onwards aren't all warnings clean. (intentionally)
d5 46
a50 1
print "1..71\n";
d52 2
a53 80
my $test = 1;

sub test ($$$) {
  my ($act, $string, $value) = @@_;
  my $result;
  if ($act eq 'oct') {
    $result = oct $string;
  } elsif ($act eq 'hex') {
    $result = hex $string;
  } else {
    die "Unknown action 'act'";
  }
  if ($value == $result) {
    if ($^O eq 'VMS' && length $string > 256) {
      $string = '';
    } else {
      $string = "\"$string\"";
    }
    print "ok $test # $act $string\n";
  } else {
    my ($valstr, $resstr);
    if ($act eq 'hex' or $string =~ /x/) {
      $valstr = sprintf "0x%X", $value;
      $resstr = sprintf "0x%X", $result;
    } elsif ($string =~ /b/) {
      $valstr = sprintf "0b%b", $value;
      $resstr = sprintf "0b%b", $result;
    } else {
      $valstr = sprintf "0%o", $value;
      $resstr = sprintf "0%o", $result;
    }
    print "not ok $test # $act \"$string\" gives \"$result\" ($resstr), not $value ($valstr)\n";
  }
  $test++;
}

test ('oct', '0b1_0101', 0b101_01);
test ('oct', '0b10_101', 0_2_5);
test ('oct', '0b101_01', 2_1);
test ('oct', '0b1010_1', 0x1_5);

test ('oct', 'b1_0101', 0b10101);
test ('oct', 'b10_101', 025);
test ('oct', 'b101_01', 21);
test ('oct', 'b1010_1', 0x15);

test ('oct', '01_234', 0b10_1001_1100);
test ('oct', '012_34', 01234);
test ('oct', '0123_4', 668);
test ('oct', '01234', 0x29c);

test ('oct', '0x1_234', 0b10010_00110100);
test ('oct', '0x12_34', 01_1064);
test ('oct', '0x123_4', 4660);
test ('oct', '0x1234', 0x12_34);

test ('oct', 'x1_234', 0b100100011010_0);
test ('oct', 'x12_34', 0_11064);
test ('oct', 'x123_4', 4660);
test ('oct', 'x1234', 0x_1234);

test ('hex', '01_234', 0b_1001000110100);
test ('hex', '012_34', 011064);
test ('hex', '0123_4', 4660);
test ('hex', '01234_', 0x1234);

test ('hex', '0x_1234', 0b1001000110100);
test ('hex', '0x1_234', 011064);
test ('hex', '0x12_34', 4660);
test ('hex', '0x1234_', 0x1234);

test ('hex', 'x_1234', 0b1001000110100);
test ('hex', 'x12_34', 011064);
test ('hex', 'x123_4', 4660);
test ('hex', 'x1234_', 0x1234);

test ('oct', '0b1111_1111_1111_1111_1111_1111_1111_1111', 4294967295);
test ('oct', '037_777_777_777', 4294967295);
test ('oct', '0xffff_ffff', 4294967295);
test ('hex', '0xff_ff_ff_ff', 4294967295);
d81 7
a87 36
$test = 45;
test ('oct', '0b'.(  '0'x10).'1_0101', 0b101_01);
test ('oct', '0b'.( '0'x100).'1_0101', 0b101_01);
test ('oct', '0b'.('0'x1000).'1_0101', 0b101_01);

test ('hex', (  '0'x10).'01234', 0x1234);
test ('hex', ( '0'x100).'01234', 0x1234);
test ('hex', ('0'x1000).'01234', 0x1234);

# Things that perl 5.6.1 and 5.7.2 did wrong (plus some they got right)
test ('oct', "b00b0101", 0);
test ('oct', "bb0101",	 0);
test ('oct', "0bb0101",	 0);

test ('oct', "0x0x3A",	 0);
test ('oct', "0xx3A",	 0);
test ('oct', "x0x3A",	 0);
test ('oct', "xx3A",	 0);
test ('oct', "0x3A",	 0x3A);
test ('oct', "x3A",	 0x3A);

test ('oct', "0x0x4",	 0);
test ('oct', "0xx4",	 0);
test ('oct', "x0x4",	 0);
test ('oct', "xx4",	 0);
test ('oct', "0x4",	 4);
test ('oct', "x4",	 4);

test ('hex', "0x3A",	 0x3A);
test ('hex', "x3A",	 0x3A);

test ('hex', "0x4",	 4);
test ('hex', "x4",	 4);

eval '$a = oct "10\x{100}"';
print $@@ =~ /Wide character/ ? "ok $test\n" : "not ok $test\n"; $test++;
a88 2
eval '$a = hex "ab\x{100}"';
print $@@ =~ /Wide character/ ? "ok $test\n" : "not ok $test\n"; $test++;
@


1.1.1.6
log
@import perl 5.16.3 from CPAN - worked on by Andrew Fresh and myself
@
text
@d5 1
a5 2
require './test.pl';
use strict;
d7 1
a7 1
plan(tests => 77);
d9 15
a23 57
foreach(['0b1_0101', 0b101_01],
	['0b10_101', 0_2_5],
	['0b101_01', 2_1],
	['0b1010_1', 0x1_5],
	['b1_0101', 0b10101],
	['b10_101', 025],
	['b101_01', 21],
	['b1010_1', 0x15],
	['01_234', 0b10_1001_1100],
	['012_34', 01234],
	['0123_4', 668],
	['01234', 0x29c],
	['0x1_234', 0b10010_00110100],
	['0x12_34', 01_1064],
	['0x123_4', 4660],
	['0x1234', 0x12_34],
	['x1_234', 0b100100011010_0],
	['x12_34', 0_11064],
	['x123_4', 4660],
	['x1234', 0x_1234],
	['0b1111_1111_1111_1111_1111_1111_1111_1111', 4294967295],
	['037_777_777_777', 4294967295],
	['0xffff_ffff', 4294967295],
	['0b'.(  '0'x10).'1_0101', 0b101_01],
	['0b'.( '0'x100).'1_0101', 0b101_01],
	['0b'.('0'x1000).'1_0101', 0b101_01],
	# Things that perl 5.6.1 and 5.7.2 did wrong (plus some they got right)
	["b00b0101", 0],
	["bb0101", 0],
	["0bb0101", 0],
	["0x0x3A", 0],
	["0xx3A", 0],
	["x0x3A", 0],
	["xx3A", 0],
	["0x3A", 0x3A],
	["x3A", 0x3A],
	["0x0x4", 0],
	["0xx4", 0],
	["x0x4", 0],
	["xx4", 0],
	["0x4", 4],
	["x4", 4],
	# Allow uppercase base markers (#76296)
	["0XCAFE", 0xCAFE],
	["XCAFE", 0xCAFE],
	["0B101001", 0b101001],
	["B101001", 0b101001],
       ) {
    my ($string, $value) = @@$_;
    my $result = oct $string;

    my $desc = ($^O ne 'VMS' || length $string <= 256) && "oct \"$string\"";

    unless (cmp_ok($value, '==', $result, $desc)) {
	my $format = ($string =~ /([bx])/i) ? "0\L$1%\U$1": '0%o';
	diag(sprintf "oct '%s' gives '%s' ($format), not %s ($format)",
	     $string, $result, $result, $value, $value);
d25 12
a36 35
}

foreach(['01_234', 0b_1001000110100],
	['012_34', 011064],
	['0123_4', 4660],
	['01234_', 0x1234],
	['0x_1234', 0b1001000110100],
	['0x1_234', 011064],
	['0x12_34', 4660],
	['0x1234_', 0x1234],
	['x_1234', 0b1001000110100],
	['x12_34', 011064],
	['x123_4', 4660],
	['x1234_', 0x1234],
	['0xff_ff_ff_ff', 4294967295],
	[(  '0'x10).'01234', 0x1234],
	[( '0'x100).'01234', 0x1234],
	[('0'x1000).'01234', 0x1234],
	# Things that perl 5.6.1 and 5.7.2 did wrong (plus some they got right)
	["0x3A", 0x3A],
	["x3A", 0x3A],
	["0x4",4],
	["x4", 4],
	# Allow uppercase base markers (#76296)
	["0XCAFE",   0xCAFE],
	["XCAFE",    0xCAFE],
       ) {
    my ($string, $value) = @@$_;
    my $result = hex $string;

    my $desc = ($^O ne 'VMS' || length $string <= 256) && "hex \"$string\"";

    unless (cmp_ok($value, '==', $result, $desc)) {
	diag(sprintf "hex '%s' gives '%s' (0x%X), not %s (0x%X)",
	     $string, $result, $result, $value, $value);
d38 49
a86 2
}

d89 2
a90 2
is(length, 5);
is($_, "\0"."_"."7"."_"."7");
d92 1
a92 1
is($_, "\0");
d95 1
a95 1
    is("\157_", "?_");
d98 1
a98 1
    is("\077_", "?_");
d102 2
a103 2
is(length, 5);
is($_, "\0"."_"."7"."_"."7");
d105 1
a105 1
is($_, "\0");
d108 1
a108 1
    is("\x61_", "/_");
d111 1
a111 1
    is("\x2F_", "/_");
d114 34
d149 1
a149 1
like($@@, qr/Wide character/);
d152 1
a152 1
like($@@, qr/Wide character/);
@


1.1.1.7
log
@Import perl-5.18.2

OK espie@@ sthen@@ deraadt@@
@
text
@d3 1
a3 1
# Tests 51 onwards are intentionally not all-warnings-clean
d108 2
a109 3
is(length, 5,
    "length() correctly calculated string with nul character in octal");
is($_, "\0"."_"."7"."_"."7", "string concatenation with nul character");
d111 1
a111 1
is($_, "\0", "repeated chop() eliminated all but nul character");
d113 2
a114 2
    is("\157_", "?_",
        "question mark is 111 in 1047, 037, && POSIX-BC");
d117 1
a117 2
    is("\077_", "?_",
        "question mark is 077 in other than 1047, 037, && POSIX-BC");
d121 2
a122 3
is(length, 5,
    "length() correctly calculated string with nul character in hex");
is($_, "\0"."_"."7"."_"."7", "string concatenation with nul character");
d124 1
a124 1
is($_, "\0", "repeated chop() eliminated all but nul character");
d126 2
a127 2
    is("\x61_", "/_",
        "/ is 97 in 1047, 037, && POSIX-BC");
d130 1
a130 2
    is("\x2F_", "/_",
        "/ is 79 in other than 1047, 037, && POSIX-BC");
d134 1
a134 1
like($@@, qr/Wide character/, "wide character - oct");
d137 1
a137 1
like($@@, qr/Wide character/, "wide character - hex");
@


