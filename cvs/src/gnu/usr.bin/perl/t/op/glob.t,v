head	1.12;
access;
symbols
	OPENBSD_6_2:1.12.0.6
	OPENBSD_6_2_BASE:1.12
	PERL_5_24_2:1.1.1.11
	OPENBSD_6_1:1.12.0.4
	OPENBSD_6_1_BASE:1.12
	OPENBSD_6_0:1.11.0.10
	OPENBSD_6_0_BASE:1.11
	OPENBSD_5_9:1.11.0.4
	OPENBSD_5_9_BASE:1.11
	OPENBSD_5_8:1.11.0.6
	OPENBSD_5_8_BASE:1.11
	PERL_5_20_2:1.1.1.10
	OPENBSD_5_7:1.11.0.2
	OPENBSD_5_7_BASE:1.11
	PERL_5_20_1:1.1.1.10
	OPENBSD_5_6:1.10.0.4
	OPENBSD_5_6_BASE:1.10
	PERL_5_18_2:1.1.1.9
	PERL:1.1.1
	OPENBSD_5_5:1.9.0.6
	OPENBSD_5_5_BASE:1.9
	OPENBSD_5_4:1.9.0.2
	OPENBSD_5_4_BASE:1.9
	PERL_5_16_3:1.1.1.8
	OPENBSD_5_3:1.8.0.10
	OPENBSD_5_3_BASE:1.8
	OPENBSD_5_2:1.8.0.8
	OPENBSD_5_2_BASE:1.8
	OPENBSD_5_1_BASE:1.8
	OPENBSD_5_1:1.8.0.6
	OPENBSD_5_0:1.8.0.4
	OPENBSD_5_0_BASE:1.8
	OPENBSD_4_9:1.8.0.2
	OPENBSD_4_9_BASE:1.8
	PERL_5_12_2:1.1.1.7
	OPENBSD_4_8:1.7.0.8
	OPENBSD_4_8_BASE:1.7
	OPENBSD_4_7:1.7.0.4
	OPENBSD_4_7_BASE:1.7
	PERL_5_10_1:1.1.1.6
	OPENBSD_4_6:1.7.0.6
	OPENBSD_4_6_BASE:1.7
	OPENBSD_4_5:1.7.0.2
	OPENBSD_4_5_BASE:1.7
	PERL_5_10_0:1.1.1.6
	OPENBSD_4_4:1.6.0.24
	OPENBSD_4_4_BASE:1.6
	OPENBSD_4_3:1.6.0.22
	OPENBSD_4_3_BASE:1.6
	OPENBSD_4_2:1.6.0.20
	OPENBSD_4_2_BASE:1.6
	OPENBSD_4_1:1.6.0.18
	OPENBSD_4_1_BASE:1.6
	OPENBSD_4_0:1.6.0.16
	OPENBSD_4_0_BASE:1.6
	PERL_5_8_8:1.1.1.5
	OPENBSD_3_9:1.6.0.14
	OPENBSD_3_9_BASE:1.6
	OPENBSD_3_8:1.6.0.12
	OPENBSD_3_8_BASE:1.6
	OPENBSD_3_7:1.6.0.10
	OPENBSD_3_7_BASE:1.6
	PERL_5_8_6:1.1.1.5
	OPENBSD_3_6:1.6.0.8
	OPENBSD_3_6_BASE:1.6
	PERL_5_8_5:1.1.1.5
	PERL_5_8_3:1.1.1.5
	OPENBSD_3_5:1.6.0.6
	OPENBSD_3_5_BASE:1.6
	PERL_5_8_2:1.1.1.5
	OPENBSD_3_4:1.6.0.4
	OPENBSD_3_4_BASE:1.6
	OPENBSD_3_3:1.6.0.2
	OPENBSD_3_3_BASE:1.6
	PERL_5_8_0:1.1.1.5
	OPENBSD_3_2:1.5.0.6
	OPENBSD_3_2_BASE:1.5
	OPENBSD_3_1:1.5.0.4
	OPENBSD_3_1_BASE:1.5
	OPENBSD_3_0:1.5.0.2
	OPENBSD_3_0_BASE:1.5
	PERL_5_6_1:1.1.1.4
	OPENBSD_2_9:1.4.0.6
	OPENBSD_2_9_BASE:1.4
	OPENBSD_2_8:1.4.0.4
	OPENBSD_2_8_BASE:1.4
	OPENBSD_2_7:1.4.0.2
	OPENBSD_2_7_BASE:1.4
	PERL_5_6_0:1.1.1.3
	OPENBSD_2_6:1.3.0.2
	OPENBSD_2_6_BASE:1.3
	PERL_500503:1.1.1.2
	CPAN:1.1.1
	OPENBSD_2_5:1.2.0.6
	OPENBSD_2_5_BASE:1.2
	OPENBSD_2_4:1.2.0.4
	OPENBSD_2_4_BASE:1.2
	OPENBSD_2_3:1.2.0.2
	OPENBSD_2_3_BASE:1.2
	OPENBSD_2_2:1.1.1.1.0.6
	OPENBSD_2_2_BASE:1.1.1.1
	OPENBSD_2_1:1.1.1.1.0.4
	OPENBSD_2_1_BASE:1.1.1.1
	OPENBSD_2_0:1.1.1.1.0.2
	OPENBSD_2_0_BASE:1.1.1.1
	perl5003:1.1.1.1
	lwall:1.1.1;
locks; strict;
comment	@# @;
expand	@o@;


1.12
date	2017.02.05.00.32.20;	author afresh1;	state Exp;
branches;
next	1.11;
commitid	cxJ08BvJA9Pt2PTM;

1.11
date	2014.11.17.20.57.07;	author afresh1;	state Exp;
branches;
next	1.10;
commitid	QP75iYx42Uo7mMxO;

1.10
date	2014.03.24.15.05.33;	author afresh1;	state Exp;
branches;
next	1.9;

1.9
date	2013.03.25.20.40.59;	author sthen;	state Exp;
branches;
next	1.8;

1.8
date	2010.09.24.15.07.08;	author millert;	state Exp;
branches;
next	1.7;

1.7
date	2008.09.29.17.36.19;	author millert;	state Exp;
branches;
next	1.6;

1.6
date	2002.10.27.22.25.37;	author millert;	state Exp;
branches;
next	1.5;

1.5
date	2001.05.24.18.36.18;	author millert;	state Exp;
branches;
next	1.4;

1.4
date	2000.04.06.17.08.23;	author millert;	state Exp;
branches;
next	1.3;

1.3
date	99.04.29.22.52.35;	author millert;	state Exp;
branches;
next	1.2;

1.2
date	97.11.30.08.05.22;	author millert;	state Exp;
branches;
next	1.1;

1.1
date	96.08.19.10.13.18;	author downsj;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	96.08.19.10.13.18;	author downsj;	state Exp;
branches;
next	1.1.1.2;

1.1.1.2
date	99.04.29.22.41.45;	author millert;	state Exp;
branches;
next	1.1.1.3;

1.1.1.3
date	2000.04.06.16.10.48;	author millert;	state Exp;
branches;
next	1.1.1.4;

1.1.1.4
date	2001.05.24.18.25.37;	author millert;	state Exp;
branches;
next	1.1.1.5;

1.1.1.5
date	2002.10.27.22.15.10;	author millert;	state Exp;
branches;
next	1.1.1.6;

1.1.1.6
date	2008.09.29.17.19.00;	author millert;	state Exp;
branches;
next	1.1.1.7;

1.1.1.7
date	2010.09.24.14.49.17;	author millert;	state Exp;
branches;
next	1.1.1.8;

1.1.1.8
date	2013.03.25.20.09.35;	author sthen;	state Exp;
branches;
next	1.1.1.9;

1.1.1.9
date	2014.03.24.14.59.10;	author afresh1;	state Exp;
branches;
next	1.1.1.10;

1.1.1.10
date	2014.11.17.20.53.17;	author afresh1;	state Exp;
branches;
next	1.1.1.11;
commitid	B31cAbBIXiCqnL97;

1.1.1.11
date	2017.08.14.13.46.23;	author afresh1;	state Exp;
branches;
next	;
commitid	fAzrs78vdW2Yfc6A;


desc
@@


1.12
log
@Fix merge issues, remove excess files - match perl-5.24.1 dist
@
text
@#!./perl

BEGIN {
    chdir 't' if -d 't';
    @@INC = qw(. ../lib);
    require './test.pl';
}

plan( tests => 18 );

@@oops = @@ops = <op/*>;

if ($^O eq 'MSWin32') {
  map { $files{lc($_)}++ } <op/*>;
  map { delete $files{"op/$_"} } split /[\s\n]/, `dir /b /l op & dir /b /l /ah op 2>nul`,
}
elsif ($^O eq 'VMS') {
  map { $files{lc($_)}++ } <[.op]*>;
  map { s/;.*$//; delete $files{lc($_)}; } split /[\n]/, `directory/noheading/notrailing/versions=1 [.op]`,
}
else {
  map { $files{$_}++ } <op/*>;
  map { delete $files{$_} } split /\n/, `ls op/* | cat`;
}
ok( !(keys(%files)),'leftover op/* files' ) or diag(join(' ',sort keys %files));

cmp_ok($/,'eq',"\n",'sane input record separator');

$not = '';
while (<jskdfjskdfj* op/* jskdjfjkosvk*>) {
    $not = "not " unless $_ eq shift @@ops;
    $not = "not at all " if $/ eq "\0";
}
ok(!$not,"glob amid garbage [$not]");

cmp_ok($/,'eq',"\n",'input record separator still sane');

$_ = "op/*";
@@glops = glob $_;
cmp_ok("@@glops",'eq',"@@oops",'glob operator 1');

@@glops = glob;
cmp_ok("@@glops",'eq',"@@oops",'glob operator 2');

# glob should still work even after the File::Glob stash has gone away
# (this used to dump core)
my $i = 0;
for (1..2) {
    eval "<.>";
    ok(!length($@@),"eval'ed a glob $_");
    local %File::Glob::;
    ++$i;
}
cmp_ok($i,'==',2,'remove File::Glob stash');

# a more sinister version of the same test (crashes from 5.8 to 5.13.1)
{
    local %File::Glob::;
    local %CORE::GLOBAL::;
    eval "<.>";
    ok(!length($@@),"remove File::Glob stash *and* CORE::GLOBAL::glob");
}
# Also try undeffing the typeglob itself, instead of hiding it
{
    local *CORE::GLOBAL::glob;
    ok eval  { glob("0"); 1 },
	'undefined *CORE::GLOBAL::glob{CODE} at run time';
}
# And hide the typeglob without hiding File::Glob (crashes from 5.8
# to 5.15.4)
{
    local %CORE::GLOBAL::;
    ok eval q{ glob("0"); 1 },
	'undefined *CORE::GLOBAL::glob{CODE} at compile time';
}

# ... while ($var = glob(...)) should test definedness not truth

SKIP: {
    skip('no File::Glob to emulate Unix-ism', 1)
	unless $INC{'File/Glob.pm'};
    my $ok = 0;
    $ok = 1 while my $var = glob("0");
    ok($ok,'define versus truth');
}

# The formerly-broken test for the situation above would accidentally
# test definedness for an assignment with a LOGOP on the right:
{
    my $f = 0;
    my $ok = 1;
    $ok = 0, undef $f while $x = $f||$f;
    ok($ok,'test definedness with LOGOP');
}

cmp_ok(scalar(@@oops),'>',0,'glob globbed something');

SKIP: {
    skip "~ globbing returns nothing on VMS", 1 if $^O eq 'VMS';
    # This test exists mainly for miniperl, to test that external calls to
    # csh, which clear %ENV first, leave $ENV{HOME}.
    # On Windows, external glob uses File::DosGlob which returns "~", so
    # this should pass anyway.
    ok <~>, '~ works';
}

{
    my $called;
    local *CORE::GLOBAL::glob = sub { ++$called };
    eval 'CORE::glob("0")';
    ok !$called, 'CORE::glob bypasses overrides';
}

######## glob() bug Mon, 01 Sep 2003 02:25:41 -0700 <200309010925.h819Pf0X011457@@smtp3.ActiveState.com>

SKIP: {
    use Config;
    skip("glob() works when cross-compiling, but this test doesn't", 1)
        if $Config{usecrosscompile};

    my $switches = [qw(-lw)];
    my $expected = "ok1\nok2\n";
    my $name     = "Make sure the presence of the CORE::GLOBAL::glob typeglob does not affect whether File::Glob::csh_glob is called.";

    fresh_perl_is(<<'EOP', $expected, { switches => $switches }, $name);
    if ($^O eq 'VMS') {
        # A pattern with a double quote in it is a syntax error to LIB$FIND_FILE
        # Should we strip quotes in Perl_vms_start_glob the way csh_glob() does?
        print "ok1\nok2\n";
    }
    else {
        ++$INC{"File/Glob.pm"}; # prevent it from loading
        my $called1 = 0;
        my $called2 = 0;
        *File::Glob::csh_glob = sub { ++$called1 };
        my $output1 = eval q{ glob(q(./"TEST")) };
        undef *CORE::GLOBAL::glob; # but leave the typeglob itself there
        ++$CORE::GLOBAL::glob if 0; # "used only once"
        undef *File::Glob::csh_glob; # avoid redefinition warnings
        *File::Glob::csh_glob = sub { ++$called2 };
        my $output2 = eval q{ glob(q(./"TEST")) };
        print "ok1" if $called1 eq $called2;
        print "ok2" if $output1 eq $output2;
    }
EOP
}@


1.11
log
@Fix merge conflicts, remove extra files, match upstream perl-5.20.1

ok deraadt@@ sthen@@ espie@@ miod@@
@
text
@d6 1
a6 1
    require 'test.pl';
@


1.10
log
@Merge perl-5.18.2 plus local patches, remove old files

OK espie@@ sthen@@ deraadt@@
@
text
@d9 1
a9 1
plan( tests => 17 );
d113 34
@


1.9
log
@merge/resolve conflicts
(some more to do after this one)
@
text
@d23 1
a23 1
  map { delete $files{$_} } split /[\s\n]/, `echo op/*`;
@


1.8
log
@merge in perl 5.12.2 plus local changes
@
text
@d6 1
d9 1
a9 2
require 'test.pl';
plan( tests => 16 );
d51 1
a51 1
    undef %File::Glob::;
d58 1
a58 1
    undef %File::Glob::;
d63 13
d98 15
a112 6
*aieee = 4;
pass('Can assign integers to typeglobs');
*aieee = 3.14;
pass('Can assign floats to typeglobs');
*aieee = 'pi';
pass('Can assign strings to typeglobs');
@


1.7
log
@fix conflicts and merge in local changes to perl 5.10.0
@
text
@d9 1
a9 1
plan( tests => 15 );
a20 5
elsif ($^O eq 'MacOS') {
  @@oops = @@ops = <:op:*>;
  map { $files{$_}++ } <:op:*>;
  map { delete $files{$_} } split /[\s\n]/, `echo :op:\xc5`;
}
d30 3
a32 10
if ($^O eq 'MacOS') {
    while (<jskdfjskdfj* :op:* jskdjfjkosvk*>) {
	$not = "not " unless $_ eq shift @@ops;
	$not = "not at all " if $/ eq "\0";
    }
} else {
    while (<jskdfjskdfj* op/* jskdjfjkosvk*>) {
	$not = "not " unless $_ eq shift @@ops;
	$not = "not at all " if $/ eq "\0";
    }
d38 1
a38 1
$_ = $^O eq 'MacOS' ? ":op:*" : "op/*";
d54 9
a62 1
cmp_ok($i,'==',2,'remore File::Glob stash');
@


1.6
log
@Resolve conflicts, remove old files, merge local changes
@
text
@d5 1
a5 1
    @@INC = '../lib';
d8 2
a9 1
print "1..10\n";
d30 1
a30 3
if (keys %files) {
	print "not ok 1\t(",join(' ', sort keys %files),"\n";
} else { print "ok 1\n"; }
d32 1
a32 1
print $/ eq "\n" ? "ok 2\n" : "not ok 2\n";
d34 1
d46 1
a46 1
print "${not}ok 3\n";
d48 1
a48 1
print $/ eq "\n" ? "ok 4\n" : "not ok 4\n";
a49 1
# test the "glob" operator
d52 1
a52 1
print "@@glops" eq "@@oops" ? "ok 5\n" : "not ok 5\n";
d55 1
a55 1
print "@@glops" eq "@@oops" ? "ok 6\n" : "not ok 6\n";
d62 1
d66 1
a66 1
print $i == 2 ? "ok 7\n" : "not ok 7\n";
d70 6
a75 4
if( $INC{'File/Glob.pm'} ) {
    my $ok = "not ok 8\n";
    $ok = "ok 8\n" while my $var = glob("0");
    print $ok;
a76 4
else {
    print "ok 8 # skip: File::Glob emulated Unixism\n";
}

a79 6
my $f=0;
$ok="ok 9\n";
$ok="not ok 9\n", undef $f while $x = $f||$f;
print $ok;

# Better check that glob actually returned some entries
d81 4
a84 2
   my $not = (scalar @@oops > 0) ? '' : 'not ';
   print "${not}ok 10\n";
d86 9
@


1.5
log
@merge in perl 5.6.1 with our local changes
@
text
@d8 1
a8 1
print "1..6\n";
d14 10
a23 1
  map { delete $files{"op/$_"} } split /[\s\n]/, `cmd /c "dir /b /l op & dir /b /l /ah op 2>nul"`,
d35 10
a44 3
while (<jskdfjskdfj* op/* jskdjfjkosvk*>) {
    $not = "not " unless $_ eq shift @@ops;
    $not = "not at all " if $/ eq "\0";
d51 1
a51 1
$_ = "op/*";
d57 35
@


1.4
log
@perl-5.6.0 + local changes
@
text
@d5 1
a5 1
    unshift @@INC, '../lib';
@


1.3
log
@perl5.005_03 (stock)
@
text
@d3 4
a6 1
# $RCSfile: glob.t,v $$Revision: 4.1 $$Date: 92/08/07 18:27:55 $
@


1.2
log
@perl 5.004_04
@
text
@@


1.1
log
@Initial revision
@
text
@d5 1
a5 1
print "1..4\n";
d7 1
a7 2
@@ops = <op/*>;
$list = join(' ',@@ops);
d9 11
a19 3
chop($otherway = `echo op/*`);

print $list eq $otherway ? "ok 1\n" : "not ok 1\n$list\n$otherway\n";
d30 8
@


1.1.1.1
log
@Import of Perl 5.003 into the tree.  Makefile.bsd-wrapper and
config.sh.OpenBSD are the only local changes.
@
text
@@


1.1.1.2
log
@perl5.005_03
@
text
@d5 1
a5 1
print "1..6\n";
d7 2
a8 1
@@oops = @@ops = <op/*>;
d10 3
a12 11
if ($^O eq 'MSWin32') {
  map { $files{lc($_)}++ } <op/*>;
  map { delete $files{"op/$_"} } split /[\s\n]/, `cmd /c "dir /b /l op & dir /b /l /ah op 2>nul"`,
}
else {
  map { $files{$_}++ } <op/*>;
  map { delete $files{$_} } split /[\s\n]/, `echo op/*`;
}
if (keys %files) {
	print "not ok 1\t(",join(' ', sort keys %files),"\n";
} else { print "ok 1\n"; }
a22 8

# test the "glob" operator
$_ = "op/*";
@@glops = glob $_;
print "@@glops" eq "@@oops" ? "ok 5\n" : "not ok 5\n";

@@glops = glob;
print "@@glops" eq "@@oops" ? "ok 6\n" : "not ok 6\n";
@


1.1.1.3
log
@virgin perl 5.6.0
@
text
@d3 1
a3 4
BEGIN {
    chdir 't' if -d 't';
    unshift @@INC, '../lib';
}
@


1.1.1.4
log
@stock perl 5.6.1
@
text
@d5 1
a5 1
    @@INC = '../lib';
@


1.1.1.5
log
@stock perl 5.8.0 from CPAN
@
text
@d8 1
a8 1
print "1..10\n";
d14 1
a14 10
  map { delete $files{"op/$_"} } split /[\s\n]/, `dir /b /l op & dir /b /l /ah op 2>nul`,
}
elsif ($^O eq 'VMS') {
  map { $files{lc($_)}++ } <[.op]*>;
  map { s/;.*$//; delete $files{lc($_)}; } split /[\n]/, `directory/noheading/notrailing/versions=1 [.op]`,
}
elsif ($^O eq 'MacOS') {
  @@oops = @@ops = <:op:*>;
  map { $files{$_}++ } <:op:*>;
  map { delete $files{$_} } split /[\s\n]/, `echo :op:\xc5`;
d26 3
a28 10
if ($^O eq 'MacOS') {
    while (<jskdfjskdfj* :op:* jskdjfjkosvk*>) {
	$not = "not " unless $_ eq shift @@ops;
	$not = "not at all " if $/ eq "\0";
    }
} else {
    while (<jskdfjskdfj* op/* jskdjfjkosvk*>) {
	$not = "not " unless $_ eq shift @@ops;
	$not = "not at all " if $/ eq "\0";
    }
d35 1
a35 1
$_ = $^O eq 'MacOS' ? ":op:*" : "op/*";
a40 35

# glob should still work even after the File::Glob stash has gone away
# (this used to dump core)
my $i = 0;
for (1..2) {
    eval "<.>";
    undef %File::Glob::;
    ++$i;
}
print $i == 2 ? "ok 7\n" : "not ok 7\n";

# ... while ($var = glob(...)) should test definedness not truth

if( $INC{'File/Glob.pm'} ) {
    my $ok = "not ok 8\n";
    $ok = "ok 8\n" while my $var = glob("0");
    print $ok;
}
else {
    print "ok 8 # skip: File::Glob emulated Unixism\n";
}


# The formerly-broken test for the situation above would accidentally
# test definedness for an assignment with a LOGOP on the right:
my $f=0;
$ok="ok 9\n";
$ok="not ok 9\n", undef $f while $x = $f||$f;
print $ok;

# Better check that glob actually returned some entries
{
   my $not = (scalar @@oops > 0) ? '' : 'not ';
   print "${not}ok 10\n";
}
@


1.1.1.6
log
@import perl 5.10.0 from CPAN
@
text
@d5 1
a5 1
    @@INC = qw(. ../lib);
d8 1
a8 2
require 'test.pl';
plan( tests => 15 );
d29 3
a31 1
ok( !(keys(%files)),'leftover op/* files' ) or diag(join(' ',sort keys %files));
d33 1
a33 1
cmp_ok($/,'eq',"\n",'sane input record separator');
a34 1
$not = '';
d46 1
a46 1
ok(!$not,"glob amid garbage [$not]");
d48 1
a48 1
cmp_ok($/,'eq',"\n",'input record separator still sane');
d50 1
d53 1
a53 1
cmp_ok("@@glops",'eq',"@@oops",'glob operator 1');
d56 1
a56 1
cmp_ok("@@glops",'eq',"@@oops",'glob operator 2');
a62 1
    ok(!length($@@),"eval'ed a glob $_");
d66 1
a66 1
cmp_ok($i,'==',2,'remore File::Glob stash');
d70 4
a73 6
SKIP: {
    skip('no File::Glob to emulate Unix-ism', 1)
	unless $INC{'File/Glob.pm'};
    my $ok = 0;
    $ok = 1 while my $var = glob("0");
    ok($ok,'define versus truth');
d75 4
d82 6
d89 2
a90 4
    my $f = 0;
    my $ok = 1;
    $ok = 0, undef $f while $x = $f||$f;
    ok($ok,'test definedness with LOGOP');
a91 9

cmp_ok(scalar(@@oops),'>',0,'glob globbed something');

*aieee = 4;
pass('Can assign integers to typeglobs');
*aieee = 3.14;
pass('Can assign floats to typeglobs');
*aieee = 'pi';
pass('Can assign strings to typeglobs');
@


1.1.1.7
log
@Perl 5.12.2 from CPAN
@
text
@d9 1
a9 1
plan( tests => 16 );
d21 5
d35 10
a44 3
while (<jskdfjskdfj* op/* jskdjfjkosvk*>) {
    $not = "not " unless $_ eq shift @@ops;
    $not = "not at all " if $/ eq "\0";
d50 1
a50 1
$_ = "op/*";
d66 1
a66 9
cmp_ok($i,'==',2,'remove File::Glob stash');

# a more sinister version of the same test (crashes from 5.8 to 5.13.1)
{
    undef %File::Glob::;
    local %CORE::GLOBAL::;
    eval "<.>";
    ok(!length($@@),"remove File::Glob stash *and* CORE::GLOBAL::glob");
}
@


1.1.1.8
log
@import perl 5.16.3 from CPAN - worked on by Andrew Fresh and myself
@
text
@a5 1
    require 'test.pl';
d8 2
a9 1
plan( tests => 17 );
d51 1
a51 1
    local %File::Glob::;
d58 1
a58 1
    local %File::Glob::;
a62 13
# Also try undeffing the typeglob itself, instead of hiding it
{
    local *CORE::GLOBAL::glob;
    ok eval  { glob("0"); 1 },
	'undefined *CORE::GLOBAL::glob{CODE} at run time';
}
# And hide the typeglob without hiding File::Glob (crashes from 5.8
# to 5.15.4)
{
    local %CORE::GLOBAL::;
    ok eval q{ glob("0"); 1 },
	'undefined *CORE::GLOBAL::glob{CODE} at compile time';
}
d85 6
a90 15
SKIP: {
    skip "~ globbing returns nothing on VMS", 1 if $^O eq 'VMS';
    # This test exists mainly for miniperl, to test that external calls to
    # csh, which clear %ENV first, leave $ENV{HOME}.
    # On Windows, external glob uses File::DosGlob which returns "~", so
    # this should pass anyway.
    ok <~>, '~ works';
}

{
    my $called;
    local *CORE::GLOBAL::glob = sub { ++$called };
    eval 'CORE::glob("0")';
    ok !$called, 'CORE::glob bypasses overrides';
}
@


1.1.1.9
log
@Import perl-5.18.2

OK espie@@ sthen@@ deraadt@@
@
text
@d23 1
a23 1
  map { delete $files{$_} } split /\n/, `ls op/* | cat`;
@


1.1.1.10
log
@Import perl-5.20.1
@
text
@d9 1
a9 1
plan( tests => 18 );
a112 34

######## glob() bug Mon, 01 Sep 2003 02:25:41 -0700 <200309010925.h819Pf0X011457@@smtp3.ActiveState.com>

SKIP: {
    use Config;
    skip("glob() works when cross-compiling, but this test doesn't", 1)
        if $Config{usecrosscompile};

    my $switches = [qw(-lw)];
    my $expected = "ok1\nok2\n";
    my $name     = "Make sure the presence of the CORE::GLOBAL::glob typeglob does not affect whether File::Glob::csh_glob is called.";

    fresh_perl_is(<<'EOP', $expected, { switches => $switches }, $name);
    if ($^O eq 'VMS') {
        # A pattern with a double quote in it is a syntax error to LIB$FIND_FILE
        # Should we strip quotes in Perl_vms_start_glob the way csh_glob() does?
        print "ok1\nok2\n";
    }
    else {
        ++$INC{"File/Glob.pm"}; # prevent it from loading
        my $called1 = 0;
        my $called2 = 0;
        *File::Glob::csh_glob = sub { ++$called1 };
        my $output1 = eval q{ glob(q(./"TEST")) };
        undef *CORE::GLOBAL::glob; # but leave the typeglob itself there
        ++$CORE::GLOBAL::glob if 0; # "used only once"
        undef *File::Glob::csh_glob; # avoid redefinition warnings
        *File::Glob::csh_glob = sub { ++$called2 };
        my $output2 = eval q{ glob(q(./"TEST")) };
        print "ok1" if $called1 eq $called2;
        print "ok2" if $output1 eq $output2;
    }
EOP
}@


1.1.1.11
log
@Import perl-5.24.2
@
text
@d6 1
a6 1
    require './test.pl';
@


