head	1.9;
access;
symbols
	OPENBSD_6_1:1.9.0.2
	OPENBSD_6_1_BASE:1.9
	OPENBSD_6_0:1.8.0.12
	OPENBSD_6_0_BASE:1.8
	OPENBSD_5_9:1.8.0.6
	OPENBSD_5_9_BASE:1.8
	OPENBSD_5_8:1.8.0.8
	OPENBSD_5_8_BASE:1.8
	PERL_5_20_2:1.1.1.6
	OPENBSD_5_7:1.8.0.2
	OPENBSD_5_7_BASE:1.8
	PERL_5_20_1:1.1.1.6
	OPENBSD_5_6:1.8.0.4
	OPENBSD_5_6_BASE:1.8
	PERL_5_18_2:1.1.1.6
	PERL:1.1.1
	OPENBSD_5_5:1.7.0.6
	OPENBSD_5_5_BASE:1.7
	OPENBSD_5_4:1.7.0.2
	OPENBSD_5_4_BASE:1.7
	PERL_5_16_3:1.1.1.5
	OPENBSD_5_3:1.6.0.42
	OPENBSD_5_3_BASE:1.6
	OPENBSD_5_2:1.6.0.40
	OPENBSD_5_2_BASE:1.6
	OPENBSD_5_1_BASE:1.6
	OPENBSD_5_1:1.6.0.38
	OPENBSD_5_0:1.6.0.36
	OPENBSD_5_0_BASE:1.6
	OPENBSD_4_9:1.6.0.34
	OPENBSD_4_9_BASE:1.6
	PERL_5_12_2:1.1.1.4
	OPENBSD_4_8:1.6.0.32
	OPENBSD_4_8_BASE:1.6
	OPENBSD_4_7:1.6.0.28
	OPENBSD_4_7_BASE:1.6
	PERL_5_10_1:1.1.1.4
	OPENBSD_4_6:1.6.0.30
	OPENBSD_4_6_BASE:1.6
	OPENBSD_4_5:1.6.0.26
	OPENBSD_4_5_BASE:1.6
	PERL_5_10_0:1.1.1.4
	OPENBSD_4_4:1.6.0.24
	OPENBSD_4_4_BASE:1.6
	OPENBSD_4_3:1.6.0.22
	OPENBSD_4_3_BASE:1.6
	OPENBSD_4_2:1.6.0.20
	OPENBSD_4_2_BASE:1.6
	OPENBSD_4_1:1.6.0.18
	OPENBSD_4_1_BASE:1.6
	OPENBSD_4_0:1.6.0.16
	OPENBSD_4_0_BASE:1.6
	PERL_5_8_8:1.1.1.4
	OPENBSD_3_9:1.6.0.14
	OPENBSD_3_9_BASE:1.6
	OPENBSD_3_8:1.6.0.12
	OPENBSD_3_8_BASE:1.6
	OPENBSD_3_7:1.6.0.10
	OPENBSD_3_7_BASE:1.6
	PERL_5_8_6:1.1.1.4
	OPENBSD_3_6:1.6.0.8
	OPENBSD_3_6_BASE:1.6
	PERL_5_8_5:1.1.1.4
	PERL_5_8_3:1.1.1.4
	OPENBSD_3_5:1.6.0.6
	OPENBSD_3_5_BASE:1.6
	PERL_5_8_2:1.1.1.4
	OPENBSD_3_4:1.6.0.4
	OPENBSD_3_4_BASE:1.6
	OPENBSD_3_3:1.6.0.2
	OPENBSD_3_3_BASE:1.6
	PERL_5_8_0:1.1.1.4
	OPENBSD_3_2:1.5.0.6
	OPENBSD_3_2_BASE:1.5
	OPENBSD_3_1:1.5.0.4
	OPENBSD_3_1_BASE:1.5
	OPENBSD_3_0:1.5.0.2
	OPENBSD_3_0_BASE:1.5
	PERL_5_6_1:1.1.1.3
	OPENBSD_2_9:1.4.0.6
	OPENBSD_2_9_BASE:1.4
	OPENBSD_2_8:1.4.0.4
	OPENBSD_2_8_BASE:1.4
	OPENBSD_2_7:1.4.0.2
	OPENBSD_2_7_BASE:1.4
	PERL_5_6_0:1.1.1.2
	OPENBSD_2_6:1.3.0.2
	OPENBSD_2_6_BASE:1.3
	PERL_500503:1.1.1.1
	CPAN:1.1.1
	OPENBSD_2_5:1.2.0.6
	OPENBSD_2_5_BASE:1.2
	OPENBSD_2_4:1.2.0.4
	OPENBSD_2_4_BASE:1.2
	OPENBSD_2_3:1.2.0.2
	OPENBSD_2_3_BASE:1.2
	OPENBSD_2_2:1.1.1.1.0.6
	OPENBSD_2_2_BASE:1.1.1.1
	OPENBSD_2_1:1.1.1.1.0.4
	OPENBSD_2_1_BASE:1.1.1.1
	OPENBSD_2_0:1.1.1.1.0.2
	OPENBSD_2_0_BASE:1.1.1.1
	perl5003:1.1.1.1
	lwall:1.1.1;
locks; strict;
comment	@# @;
expand	@o@;


1.9
date	2017.02.05.00.32.20;	author afresh1;	state Exp;
branches;
next	1.8;
commitid	cxJ08BvJA9Pt2PTM;

1.8
date	2014.03.24.15.05.33;	author afresh1;	state Exp;
branches;
next	1.7;

1.7
date	2013.03.25.20.40.59;	author sthen;	state Exp;
branches;
next	1.6;

1.6
date	2002.10.27.22.25.37;	author millert;	state Exp;
branches;
next	1.5;

1.5
date	2001.05.24.18.36.18;	author millert;	state Exp;
branches;
next	1.4;

1.4
date	2000.04.06.17.08.24;	author millert;	state Exp;
branches;
next	1.3;

1.3
date	99.04.29.22.52.35;	author millert;	state Exp;
branches;
next	1.2;

1.2
date	97.11.30.08.05.25;	author millert;	state Exp;
branches;
next	1.1;

1.1
date	96.08.19.10.13.19;	author downsj;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	96.08.19.10.13.19;	author downsj;	state Exp;
branches;
next	1.1.1.2;

1.1.1.2
date	2000.04.06.16.10.49;	author millert;	state Exp;
branches;
next	1.1.1.3;

1.1.1.3
date	2001.05.24.18.25.39;	author millert;	state Exp;
branches;
next	1.1.1.4;

1.1.1.4
date	2002.10.27.22.15.10;	author millert;	state Exp;
branches;
next	1.1.1.5;

1.1.1.5
date	2013.03.25.20.09.36;	author sthen;	state Exp;
branches;
next	1.1.1.6;

1.1.1.6
date	2014.03.24.14.59.10;	author afresh1;	state Exp;
branches;
next	;


desc
@@


1.9
log
@Fix merge issues, remove excess files - match perl-5.24.1 dist
@
text
@#!./perl

BEGIN {
    chdir 't' if -d 't';
    @@INC = '../lib';
    require './test.pl';
    require Config;
}

plan 17;

# compile time evaluation

my $test1_descr = 'compile time evaluation 1.234';
if (int(1.234) == 1) {pass($test1_descr)} else {fail($test1_descr)}

my $test2_descr = 'compile time evaluation -1.234';
if (int(-1.234) == -1) {pass($test2_descr)} else {fail($test2_descr)}

# run time evaluation

$x = 1.234;
cmp_ok(int($x), '==', 1, 'run time evaluation 1');
cmp_ok(int(-$x), '==', -1, 'run time evaluation -1');

$x = length("abc") % -10;
cmp_ok($x, '==', -7, 'subtract from string length');

{
    my $fail;
    use integer;
    $x = length("abc") % -10;
    $y = (3/-10)*-10;
    ok($x+$y == 3, 'x+y equals 3') or ++$fail;
    ok(abs($x) < 10, 'abs(x) < 10') or ++$fail;
    if ($fail) {
	diag("\$x == $x", "\$y == $y");
    }
}

@@x = ( 6, 8, 10);
cmp_ok($x["1foo"], '==', 8, 'check bad strings still get converted');

# 4,294,967,295 is largest unsigned 32 bit integer

$x = 4294967303.15;
$y = int ($x);
is($y, "4294967303", 'check values > 32 bits work');

$y = int (-$x);

is($y, "-4294967303", 'negative value more than maximum unsigned 32 bit value');

$x = 4294967294.2;
$y = int ($x);

is($y, "4294967294", 'floating point value slightly less than the largest unsigned 32 bit');

$x = 4294967295.7;
$y = int ($x);

is($y, "4294967295", 'floating point value slightly more than largest unsigned 32 bit');

$x = 4294967296.11312;
$y = int ($x);

is($y, "4294967296", 'floating point value more than largest unsigned 32 bit');

$y = int(279964589018079/59);
cmp_ok($y, '==', 4745162525730, 'compile time division, result of about 42 bits');

$y = 279964589018079;
$y = int($y/59);
cmp_ok($y, '==', 4745162525730, 'run time divison, result of about 42 bits');

SKIP:
{   # see #126635
    my $large;
    $large = eval "0xffff_ffff" if $Config::Config{ivsize} == 4;
    $large = eval "0xffff_ffff_ffff_ffff" if $Config::Config{ivsize} == 8;
    $large or skip "Unusual ivsize", 1;
    for my $x ($large, -1) {
        cmp_ok($x, "==", int($x), "check $x == int($x)");
    }
}
@


1.8
log
@Merge perl-5.18.2 plus local patches, remove old files

OK espie@@ sthen@@ deraadt@@
@
text
@d7 1
d10 1
a10 1
plan 15;
d75 11
@


1.7
log
@merge/resolve conflicts
(some more to do after this one)
@
text
@d13 2
a14 1
if (int(1.234) == 1) {pass()} else {fail()}
d16 2
a17 1
if (int(-1.234) == -1) {pass()} else {fail()}
d22 2
a23 2
cmp_ok(int($x), '==', 1);
cmp_ok(int(-$x), '==', -1);
d26 1
a26 1
cmp_ok($x, '==', -7);
d33 2
a34 2
    ok($x+$y == 3) or ++$fail;
    ok(abs($x) < 10) or ++$fail;
d43 2
d51 1
a51 1
is($y, "-4294967303");
d56 1
a56 1
is($y, "4294967294");
d61 1
a61 1
is($y, "4294967295");
d66 1
a66 1
is($y, "4294967296");
d69 1
a69 1
cmp_ok($y, '==', 4745162525730);
d73 1
a73 1
cmp_ok($y, '==', 4745162525730);
@


1.6
log
@Resolve conflicts, remove old files, merge local changes
@
text
@d6 1
d9 1
a9 1
print "1..14\n";
d13 1
a13 1
if (int(1.234) == 1) {print "ok 1\n";} else {print "not ok 1\n";}
d15 1
a15 1
if (int(-1.234) == -1) {print "ok 2\n";} else {print "not ok 2\n";}
d20 2
a21 2
if (int($x) == 1) {print "ok 3\n";} else {print "not ok 3\n";}
if (int(-$x) == -1) {print "ok 4\n";} else {print "not ok 4\n";}
d24 1
a24 1
print $x == -7 ? "ok 5\n" : "# expected -7, got $x\nnot ok 5\n";
d27 1
d31 5
a35 1
    print $x+$y == 3 && abs($x) < 10 ? "ok 6\n" : "not ok 6\n";
a37 2
# check bad strings still get converted

d39 1
a39 4
print "not " if $x["1foo"] != 8;
print "ok 7\n";

# check values > 32 bits work.
d43 1
a43 6

if ($y eq "4294967303") {
  print "ok 8\n"
} else {
  print "not ok 8 # int($x) is $y, not 4294967303\n"
}
d47 1
a47 5
if ($y eq "-4294967303") {
  print "ok 9\n"
} else {
  print "not ok 9 # int($x) is $y, not -4294967303\n"
}
d52 1
a52 5
if ($y eq "4294967294") {
  print "ok 10\n"
} else {
  print "not ok 10 # int($x) is $y, not 4294967294\n"
}
d57 1
a57 5
if ($y eq "4294967295") {
  print "ok 11\n"
} else {
  print "not ok 11 # int($x) is $y, not 4294967295\n"
}
d62 1
a62 5
if ($y eq "4294967296") {
  print "ok 12\n"
} else {
  print "not ok 12 # int($x) is $y, not 4294967296\n"
}
d65 1
a65 5
if ($y == 4745162525730) {
  print "ok 13\n"
} else {
  print "not ok 13 # int(279964589018079/59) is $y, not 4745162525730\n"
}
d69 1
a69 6
if ($y == 4745162525730) {
  print "ok 14\n"
} else {
  print "not ok 14 # int(279964589018079/59) is $y, not 4745162525730\n"
}

@


1.5
log
@merge in perl 5.6.1 with our local changes
@
text
@d8 1
a8 1
print "1..7\n";
d37 62
@


1.4
log
@perl-5.6.0 + local changes
@
text
@d5 1
a5 1
    unshift @@INC, '../lib';
d8 1
a8 1
print "1..6\n";
d31 6
@


1.3
log
@perl5.005_03 (stock)
@
text
@d3 4
a6 1
# $RCSfile: int.t,v $$Revision: 4.1 $$Date: 92/08/07 18:28:00 $
d8 1
a8 1
print "1..4\n";
d21 10
@


1.2
log
@perl 5.004_04
@
text
@@


1.1
log
@Initial revision
@
text
@@


1.1.1.1
log
@Import of Perl 5.003 into the tree.  Makefile.bsd-wrapper and
config.sh.OpenBSD are the only local changes.
@
text
@@


1.1.1.2
log
@virgin perl 5.6.0
@
text
@d3 1
a3 4
BEGIN {
    chdir 't' if -d 't';
    unshift @@INC, '../lib';
}
d5 1
a5 1
print "1..6\n";
a17 10

$x = length("abc") % -10;
print $x == -7 ? "ok 5\n" : "# expected -7, got $x\nnot ok 5\n";

{
    use integer;
    $x = length("abc") % -10;
    $y = (3/-10)*-10;
    print $x+$y == 3 && abs($x) < 10 ? "ok 6\n" : "not ok 6\n";
}
@


1.1.1.3
log
@stock perl 5.6.1
@
text
@d5 1
a5 1
    @@INC = '../lib';
d8 1
a8 1
print "1..7\n";
a30 6

# check bad strings still get converted

@@x = ( 6, 8, 10);
print "not " if $x["1foo"] != 8;
print "ok 7\n";
@


1.1.1.4
log
@stock perl 5.8.0 from CPAN
@
text
@d8 1
a8 1
print "1..14\n";
a36 62

# check values > 32 bits work.

$x = 4294967303.15;
$y = int ($x);

if ($y eq "4294967303") {
  print "ok 8\n"
} else {
  print "not ok 8 # int($x) is $y, not 4294967303\n"
}

$y = int (-$x);

if ($y eq "-4294967303") {
  print "ok 9\n"
} else {
  print "not ok 9 # int($x) is $y, not -4294967303\n"
}

$x = 4294967294.2;
$y = int ($x);

if ($y eq "4294967294") {
  print "ok 10\n"
} else {
  print "not ok 10 # int($x) is $y, not 4294967294\n"
}

$x = 4294967295.7;
$y = int ($x);

if ($y eq "4294967295") {
  print "ok 11\n"
} else {
  print "not ok 11 # int($x) is $y, not 4294967295\n"
}

$x = 4294967296.11312;
$y = int ($x);

if ($y eq "4294967296") {
  print "ok 12\n"
} else {
  print "not ok 12 # int($x) is $y, not 4294967296\n"
}

$y = int(279964589018079/59);
if ($y == 4745162525730) {
  print "ok 13\n"
} else {
  print "not ok 13 # int(279964589018079/59) is $y, not 4745162525730\n"
}

$y = 279964589018079;
$y = int($y/59);
if ($y == 4745162525730) {
  print "ok 14\n"
} else {
  print "not ok 14 # int(279964589018079/59) is $y, not 4745162525730\n"
}

@


1.1.1.5
log
@import perl 5.16.3 from CPAN - worked on by Andrew Fresh and myself
@
text
@a5 1
    require './test.pl';
d8 1
a8 1
plan 15;
d12 1
a12 1
if (int(1.234) == 1) {pass()} else {fail()}
d14 1
a14 1
if (int(-1.234) == -1) {pass()} else {fail()}
d19 2
a20 2
cmp_ok(int($x), '==', 1);
cmp_ok(int(-$x), '==', -1);
d23 1
a23 1
cmp_ok($x, '==', -7);
a25 1
    my $fail;
d29 1
a29 5
    ok($x+$y == 3) or ++$fail;
    ok(abs($x) < 10) or ++$fail;
    if ($fail) {
	diag("\$x == $x", "\$y == $y");
    }
d32 2
d35 4
a38 1
cmp_ok($x["1foo"], '==', 8, 'check bad strings still get converted');
d42 6
a47 1
is($y, "4294967303", 'check values > 32 bits work');
d51 5
a55 1
is($y, "-4294967303");
d60 5
a64 1
is($y, "4294967294");
d69 5
a73 1
is($y, "4294967295");
d78 5
a82 1
is($y, "4294967296");
d85 5
a89 1
cmp_ok($y, '==', 4745162525730);
d93 6
a98 1
cmp_ok($y, '==', 4745162525730);
@


1.1.1.6
log
@Import perl-5.18.2

OK espie@@ sthen@@ deraadt@@
@
text
@d13 1
a13 2
my $test1_descr = 'compile time evaluation 1.234';
if (int(1.234) == 1) {pass($test1_descr)} else {fail($test1_descr)}
d15 1
a15 2
my $test2_descr = 'compile time evaluation -1.234';
if (int(-1.234) == -1) {pass($test2_descr)} else {fail($test2_descr)}
d20 2
a21 2
cmp_ok(int($x), '==', 1, 'run time evaluation 1');
cmp_ok(int(-$x), '==', -1, 'run time evaluation -1');
d24 1
a24 1
cmp_ok($x, '==', -7, 'subtract from string length');
d31 2
a32 2
    ok($x+$y == 3, 'x+y equals 3') or ++$fail;
    ok(abs($x) < 10, 'abs(x) < 10') or ++$fail;
a40 2
# 4,294,967,295 is largest unsigned 32 bit integer

d47 1
a47 1
is($y, "-4294967303", 'negative value more than maximum unsigned 32 bit value');
d52 1
a52 1
is($y, "4294967294", 'floating point value slightly less than the largest unsigned 32 bit');
d57 1
a57 1
is($y, "4294967295", 'floating point value slightly more than largest unsigned 32 bit');
d62 1
a62 1
is($y, "4294967296", 'floating point value more than largest unsigned 32 bit');
d65 1
a65 1
cmp_ok($y, '==', 4745162525730, 'compile time division, result of about 42 bits');
d69 1
a69 1
cmp_ok($y, '==', 4745162525730, 'run time divison, result of about 42 bits');
@


