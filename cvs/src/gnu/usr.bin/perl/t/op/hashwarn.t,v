head	1.2;
access;
symbols
	OPENBSD_6_2:1.2.0.2
	OPENBSD_6_2_BASE:1.2
	PERL_5_24_2:1.1.1.7
	OPENBSD_6_1:1.2.0.4
	OPENBSD_6_1_BASE:1.2
	OPENBSD_6_0:1.1.1.6.0.34
	OPENBSD_6_0_BASE:1.1.1.6
	OPENBSD_5_9:1.1.1.6.0.28
	OPENBSD_5_9_BASE:1.1.1.6
	OPENBSD_5_8:1.1.1.6.0.30
	OPENBSD_5_8_BASE:1.1.1.6
	PERL_5_20_2:1.1.1.6
	OPENBSD_5_7:1.1.1.6.0.22
	OPENBSD_5_7_BASE:1.1.1.6
	PERL_5_20_1:1.1.1.6
	OPENBSD_5_6:1.1.1.6.0.26
	OPENBSD_5_6_BASE:1.1.1.6
	PERL_5_18_2:1.1.1.6
	PERL:1.1.1
	OPENBSD_5_5:1.1.1.6.0.24
	OPENBSD_5_5_BASE:1.1.1.6
	OPENBSD_5_4:1.1.1.6.0.20
	OPENBSD_5_4_BASE:1.1.1.6
	PERL_5_16_3:1.1.1.6
	OPENBSD_5_3:1.1.1.6.0.18
	OPENBSD_5_3_BASE:1.1.1.6
	OPENBSD_5_2:1.1.1.6.0.16
	OPENBSD_5_2_BASE:1.1.1.6
	OPENBSD_5_1_BASE:1.1.1.6
	OPENBSD_5_1:1.1.1.6.0.14
	OPENBSD_5_0:1.1.1.6.0.12
	OPENBSD_5_0_BASE:1.1.1.6
	OPENBSD_4_9:1.1.1.6.0.10
	OPENBSD_4_9_BASE:1.1.1.6
	PERL_5_12_2:1.1.1.6
	OPENBSD_4_8:1.1.1.6.0.8
	OPENBSD_4_8_BASE:1.1.1.6
	OPENBSD_4_7:1.1.1.6.0.4
	OPENBSD_4_7_BASE:1.1.1.6
	PERL_5_10_1:1.1.1.6
	OPENBSD_4_6:1.1.1.6.0.6
	OPENBSD_4_6_BASE:1.1.1.6
	OPENBSD_4_5:1.1.1.6.0.2
	OPENBSD_4_5_BASE:1.1.1.6
	PERL_5_10_0:1.1.1.6
	OPENBSD_4_4:1.1.1.5.0.20
	OPENBSD_4_4_BASE:1.1.1.5
	OPENBSD_4_3:1.1.1.5.0.18
	OPENBSD_4_3_BASE:1.1.1.5
	OPENBSD_4_2:1.1.1.5.0.16
	OPENBSD_4_2_BASE:1.1.1.5
	OPENBSD_4_1:1.1.1.5.0.14
	OPENBSD_4_1_BASE:1.1.1.5
	OPENBSD_4_0:1.1.1.5.0.12
	OPENBSD_4_0_BASE:1.1.1.5
	PERL_5_8_8:1.1.1.5
	OPENBSD_3_9:1.1.1.5.0.10
	OPENBSD_3_9_BASE:1.1.1.5
	OPENBSD_3_8:1.1.1.5.0.8
	OPENBSD_3_8_BASE:1.1.1.5
	OPENBSD_3_7:1.1.1.5.0.6
	OPENBSD_3_7_BASE:1.1.1.5
	PERL_5_8_6:1.1.1.5
	OPENBSD_3_6:1.1.1.5.0.4
	OPENBSD_3_6_BASE:1.1.1.5
	PERL_5_8_5:1.1.1.5
	PERL_5_8_3:1.1.1.5
	OPENBSD_3_5:1.1.1.5.0.2
	OPENBSD_3_5_BASE:1.1.1.5
	PERL_5_8_2:1.1.1.5
	OPENBSD_3_4:1.1.1.4.0.4
	OPENBSD_3_4_BASE:1.1.1.4
	OPENBSD_3_3:1.1.1.4.0.2
	OPENBSD_3_3_BASE:1.1.1.4
	PERL_5_8_0:1.1.1.4
	OPENBSD_3_2:1.1.1.3.0.6
	OPENBSD_3_2_BASE:1.1.1.3
	OPENBSD_3_1:1.1.1.3.0.4
	OPENBSD_3_1_BASE:1.1.1.3
	OPENBSD_3_0:1.1.1.3.0.2
	OPENBSD_3_0_BASE:1.1.1.3
	PERL_5_6_1:1.1.1.3
	OPENBSD_2_9:1.1.1.2.0.6
	OPENBSD_2_9_BASE:1.1.1.2
	OPENBSD_2_8:1.1.1.2.0.4
	OPENBSD_2_8_BASE:1.1.1.2
	OPENBSD_2_7:1.1.1.2.0.2
	OPENBSD_2_7_BASE:1.1.1.2
	PERL_5_6_0:1.1.1.2
	OPENBSD_2_6:1.1.1.1.0.2
	OPENBSD_2_6_BASE:1.1.1.1
	PERL_500503:1.1.1.1
	CPAN:1.1.1;
locks; strict;
comment	@# @;
expand	@o@;


1.2
date	2017.02.05.00.32.20;	author afresh1;	state Exp;
branches;
next	1.1;
commitid	cxJ08BvJA9Pt2PTM;

1.1
date	99.04.29.22.41.46;	author millert;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	99.04.29.22.41.46;	author millert;	state Exp;
branches;
next	1.1.1.2;

1.1.1.2
date	2000.04.06.16.10.48;	author millert;	state Exp;
branches;
next	1.1.1.3;

1.1.1.3
date	2001.05.24.18.25.38;	author millert;	state Exp;
branches;
next	1.1.1.4;

1.1.1.4
date	2002.10.27.22.15.10;	author millert;	state Exp;
branches;
next	1.1.1.5;

1.1.1.5
date	2003.12.03.02.44.32;	author millert;	state Exp;
branches;
next	1.1.1.6;

1.1.1.6
date	2008.09.29.17.19.00;	author millert;	state Exp;
branches;
next	1.1.1.7;

1.1.1.7
date	2017.08.14.13.46.24;	author afresh1;	state Exp;
branches;
next	;
commitid	fAzrs78vdW2Yfc6A;


desc
@@


1.2
log
@Fix merge issues, remove excess files - match perl-5.24.1 dist
@
text
@#!./perl

BEGIN {
    chdir 't' if -d 't';
    @@INC = qw(. ../lib);
}

require './test.pl';
plan( tests => 16 );

use strict;
use warnings;

use vars qw{ @@warnings };

BEGIN {
    $SIG{'__WARN__'} = sub { push @@warnings, @@_ };
    $| = 1;
}

my $fail_odd      = 'Odd number of elements in hash assignment at ';
my $fail_odd_anon = 'Odd number of elements in anonymous hash at ';
my $fail_ref      = 'Reference found where even-sized list expected at ';
my $fail_not_hr   = 'Not a HASH reference at ';

{
    @@warnings = ();
    my %hash = (1..3);
    cmp_ok(scalar(@@warnings),'==',1,'odd count');
    cmp_ok(substr($warnings[0],0,length($fail_odd)),'eq',$fail_odd,'odd msg');

    @@warnings = ();
    %hash = 1;
    cmp_ok(scalar(@@warnings),'==',1,'scalar count');
    cmp_ok(substr($warnings[0],0,length($fail_odd)),'eq',$fail_odd,'scalar msg');

    @@warnings = ();
    %hash = { 1..3 };
    cmp_ok(scalar(@@warnings),'==',2,'odd hashref count');
    cmp_ok(substr($warnings[0],0,length($fail_odd_anon)),'eq',$fail_odd_anon,'odd hashref msg 1');
    cmp_ok(substr($warnings[1],0,length($fail_ref)),'eq',$fail_ref,'odd hashref msg 2');

    @@warnings = ();
    %hash = [ 1..3 ];
    cmp_ok(scalar(@@warnings),'==',1,'arrayref count');
    cmp_ok(substr($warnings[0],0,length($fail_ref)),'eq',$fail_ref,'arrayref msg');

    @@warnings = ();
    %hash = sub { print "fenice" };
    cmp_ok(scalar(@@warnings),'==',1,'coderef count');
    cmp_ok(substr($warnings[0],0,length($fail_odd)),'eq',$fail_odd,'coderef msg');

    @@warnings = ();
    $_ = { 1..10 };
    cmp_ok(scalar(@@warnings),'==',0,'hashref assign');

    # Old pseudo-hash syntax, now removed.

    @@warnings = ();
    my $avhv = [{x=>1,y=>2}];
    eval {
        %$avhv = (x=>13,'y');
    };
    cmp_ok(scalar(@@warnings),'==',0,'pseudo-hash 1 count');
    cmp_ok(substr($@@,0,length($fail_not_hr)),'eq',$fail_not_hr,'pseudo-hash 1 msg');

    @@warnings = ();
    eval {
        %$avhv = 'x';
    };
    cmp_ok(scalar(@@warnings),'==',0,'pseudo-hash 2 count');
    cmp_ok(substr($@@,0,length($fail_not_hr)),'eq',$fail_not_hr,'pseudo-hash 2 msg');
}
@


1.1
log
@Initial revision
@
text
@d5 1
a5 1
    @@INC = '../lib';
d8 3
d12 1
a16 2
    $^W |= 1;		# Insist upon warnings
    # ...and save 'em as we go
a18 15
    print "1..7\n";
}

END { print "not ok\n# Uncaught warnings:\n@@warnings\n" if @@warnings }

sub test ($$;$) {
    my($num, $bool, $diag) = @@_;
    if ($bool) {
	print "ok $num\n";
	return;
    }
    print "not ok $num\n";
    return unless defined $diag;
    $diag =~ s/\Z\n?/\n/;			# unchomp
    print map "# $num : $_", split m/^/m, $diag;
d21 4
a24 17
sub test_warning ($$$) {
    my($num, $got, $expected) = @@_;
    my($pattern, $ok);
    if (($pattern) = ($expected =~ m#^/(.+)/$#s) or
	(undef, $pattern) = ($expected =~ m#^m([^\w\s])(.+)\1$#s)) {
	    # it's a regexp
	    $ok = ($got =~ /$pattern/);
	    test $num, $ok, "Expected pattern /$pattern/, got '$got'\n";
    } else {
	$ok = ($got eq $expected);
	test $num, $ok, "Expected string '$expected', got '$got'\n";
    }
#   print "# $num: $got\n";
}

my $odd_msg = '/^Odd number of elements in hash/';
my $ref_msg = '/^Reference found where even-sized list expected/';
d27 1
d29 2
a30 1
    test_warning 1, shift @@warnings, $odd_msg;
d32 1
d34 2
a35 1
    test_warning 2, shift @@warnings, $odd_msg;
d37 1
d39 3
a41 2
    test_warning 3, shift @@warnings, $odd_msg;
    test_warning 4, shift @@warnings, $ref_msg;
d43 1
d45 2
a46 1
    test_warning 5, shift @@warnings, $ref_msg;
d48 4
a51 2
    %hash = sub { print "ok" };
    test_warning 6, shift @@warnings, $odd_msg;
d53 1
d55 18
a72 1
    test 7, ! @@warnings, "Unexpected warning";
@


1.1.1.1
log
@perl5.005_03
@
text
@@


1.1.1.2
log
@virgin perl 5.6.0
@
text
@d5 1
a5 1
    unshift @@INC, '../lib';
a8 1
use warnings;
d13 2
d17 1
a17 1
    print "1..9\n";
a68 7
    my $avhv = [{x=>1,y=>2}];
    %$avhv = (x=>13,'y');
    test_warning 7, shift @@warnings, $odd_msg;

    %$avhv = 'x';
    test_warning 8, shift @@warnings, $odd_msg;

d70 1
a70 1
    test 9, ! @@warnings, "Unexpected warning";
@


1.1.1.3
log
@stock perl 5.6.1
@
text
@d5 1
a5 1
    @@INC = '../lib';
@


1.1.1.4
log
@stock perl 5.8.0 from CPAN
@
text
@d48 1
a48 2
my $odd_msg = '/^Odd number of elements in hash assignment/';
my $odd_msg2 = '/^Odd number of elements in anonymous hash/';
d59 1
a59 1
    test_warning 3, shift @@warnings, $odd_msg2;
@


1.1.1.5
log
@perl 5.8.2 from CPAN
@
text
@d69 3
a71 3
    {
	# "Pseudo-hashes are deprecated" warnings tested in warnings/av
	no warnings 'deprecated';
d73 2
a74 3
	my $avhv = [{x=>1,y=>2}];
	%$avhv = (x=>13,'y');
	test_warning 7, shift @@warnings, $odd_msg;
d76 2
a77 6
	%$avhv = 'x';
	test_warning 8, shift @@warnings, $odd_msg;

	$_ = { 1..10 };
	test 9, ! @@warnings, "Unexpected warning";
    }
@


1.1.1.6
log
@import perl 5.10.0 from CPAN
@
text
@d5 1
a5 1
    @@INC = qw(. ../lib);
a7 3
require 'test.pl';
plan( tests => 16 );

d16 30
d48 3
a50 4
my $fail_odd      = 'Odd number of elements in hash assignment at ';
my $fail_odd_anon = 'Odd number of elements in anonymous hash at ';
my $fail_ref      = 'Reference found where even-sized list expected at ';
my $fail_not_hr   = 'Not a HASH reference at ';
a52 1
    @@warnings = ();
d54 1
a54 2
    cmp_ok(scalar(@@warnings),'==',1,'odd count');
    cmp_ok(substr($warnings[0],0,length($fail_odd)),'eq',$fail_odd,'odd msg');
a55 1
    @@warnings = ();
d57 1
a57 2
    cmp_ok(scalar(@@warnings),'==',1,'scalar count');
    cmp_ok(substr($warnings[0],0,length($fail_odd)),'eq',$fail_odd,'scalar msg');
a58 1
    @@warnings = ();
d60 2
a61 3
    cmp_ok(scalar(@@warnings),'==',2,'odd hashref count');
    cmp_ok(substr($warnings[0],0,length($fail_odd_anon)),'eq',$fail_odd_anon,'odd hashref msg 1');
    cmp_ok(substr($warnings[1],0,length($fail_ref)),'eq',$fail_ref,'odd hashref msg 2');
a62 1
    @@warnings = ();
d64 15
a78 2
    cmp_ok(scalar(@@warnings),'==',1,'arrayref count');
    cmp_ok(substr($warnings[0],0,length($fail_ref)),'eq',$fail_ref,'arrayref msg');
d80 3
a82 25
    @@warnings = ();
    %hash = sub { print "fenice" };
    cmp_ok(scalar(@@warnings),'==',1,'coderef count');
    cmp_ok(substr($warnings[0],0,length($fail_odd)),'eq',$fail_odd,'coderef msg');

    @@warnings = ();
    $_ = { 1..10 };
    cmp_ok(scalar(@@warnings),'==',0,'hashref assign');

    # Old pseudo-hash syntax, now removed.

    @@warnings = ();
    my $avhv = [{x=>1,y=>2}];
    eval {
        %$avhv = (x=>13,'y');
    };
    cmp_ok(scalar(@@warnings),'==',0,'pseudo-hash 1 count');
    cmp_ok(substr($@@,0,length($fail_not_hr)),'eq',$fail_not_hr,'pseudo-hash 1 msg');

    @@warnings = ();
    eval {
        %$avhv = 'x';
    };
    cmp_ok(scalar(@@warnings),'==',0,'pseudo-hash 2 count');
    cmp_ok(substr($@@,0,length($fail_not_hr)),'eq',$fail_not_hr,'pseudo-hash 2 msg');
@


1.1.1.7
log
@Import perl-5.24.2
@
text
@d8 1
a8 1
require './test.pl';
@


