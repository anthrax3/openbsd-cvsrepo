head	1.8;
access;
symbols
	OPENBSD_6_1:1.8.0.4
	OPENBSD_6_1_BASE:1.8
	OPENBSD_6_0:1.7.0.34
	OPENBSD_6_0_BASE:1.7
	OPENBSD_5_9:1.7.0.28
	OPENBSD_5_9_BASE:1.7
	OPENBSD_5_8:1.7.0.30
	OPENBSD_5_8_BASE:1.7
	PERL_5_20_2:1.1.1.6
	OPENBSD_5_7:1.7.0.22
	OPENBSD_5_7_BASE:1.7
	PERL_5_20_1:1.1.1.6
	OPENBSD_5_6:1.7.0.26
	OPENBSD_5_6_BASE:1.7
	PERL_5_18_2:1.1.1.6
	PERL:1.1.1
	OPENBSD_5_5:1.7.0.24
	OPENBSD_5_5_BASE:1.7
	OPENBSD_5_4:1.7.0.20
	OPENBSD_5_4_BASE:1.7
	PERL_5_16_3:1.1.1.6
	OPENBSD_5_3:1.7.0.18
	OPENBSD_5_3_BASE:1.7
	OPENBSD_5_2:1.7.0.16
	OPENBSD_5_2_BASE:1.7
	OPENBSD_5_1_BASE:1.7
	OPENBSD_5_1:1.7.0.14
	OPENBSD_5_0:1.7.0.12
	OPENBSD_5_0_BASE:1.7
	OPENBSD_4_9:1.7.0.10
	OPENBSD_4_9_BASE:1.7
	PERL_5_12_2:1.1.1.6
	OPENBSD_4_8:1.7.0.8
	OPENBSD_4_8_BASE:1.7
	OPENBSD_4_7:1.7.0.4
	OPENBSD_4_7_BASE:1.7
	PERL_5_10_1:1.1.1.6
	OPENBSD_4_6:1.7.0.6
	OPENBSD_4_6_BASE:1.7
	OPENBSD_4_5:1.7.0.2
	OPENBSD_4_5_BASE:1.7
	PERL_5_10_0:1.1.1.6
	OPENBSD_4_4:1.6.0.20
	OPENBSD_4_4_BASE:1.6
	OPENBSD_4_3:1.6.0.18
	OPENBSD_4_3_BASE:1.6
	OPENBSD_4_2:1.6.0.16
	OPENBSD_4_2_BASE:1.6
	OPENBSD_4_1:1.6.0.14
	OPENBSD_4_1_BASE:1.6
	OPENBSD_4_0:1.6.0.12
	OPENBSD_4_0_BASE:1.6
	PERL_5_8_8:1.1.1.5
	OPENBSD_3_9:1.6.0.10
	OPENBSD_3_9_BASE:1.6
	OPENBSD_3_8:1.6.0.8
	OPENBSD_3_8_BASE:1.6
	OPENBSD_3_7:1.6.0.6
	OPENBSD_3_7_BASE:1.6
	PERL_5_8_6:1.1.1.5
	OPENBSD_3_6:1.6.0.4
	OPENBSD_3_6_BASE:1.6
	PERL_5_8_5:1.1.1.5
	PERL_5_8_3:1.1.1.5
	OPENBSD_3_5:1.6.0.2
	OPENBSD_3_5_BASE:1.6
	PERL_5_8_2:1.1.1.5
	OPENBSD_3_4:1.5.0.4
	OPENBSD_3_4_BASE:1.5
	OPENBSD_3_3:1.5.0.2
	OPENBSD_3_3_BASE:1.5
	PERL_5_8_0:1.1.1.4
	OPENBSD_3_2:1.4.0.12
	OPENBSD_3_2_BASE:1.4
	OPENBSD_3_1:1.4.0.10
	OPENBSD_3_1_BASE:1.4
	OPENBSD_3_0:1.4.0.8
	OPENBSD_3_0_BASE:1.4
	PERL_5_6_1:1.1.1.3
	OPENBSD_2_9:1.4.0.6
	OPENBSD_2_9_BASE:1.4
	OPENBSD_2_8:1.4.0.4
	OPENBSD_2_8_BASE:1.4
	OPENBSD_2_7:1.4.0.2
	OPENBSD_2_7_BASE:1.4
	PERL_5_6_0:1.1.1.3
	OPENBSD_2_6:1.3.0.2
	OPENBSD_2_6_BASE:1.3
	PERL_500503:1.1.1.2
	CPAN:1.1.1
	OPENBSD_2_5:1.2.0.6
	OPENBSD_2_5_BASE:1.2
	OPENBSD_2_4:1.2.0.4
	OPENBSD_2_4_BASE:1.2
	OPENBSD_2_3:1.2.0.2
	OPENBSD_2_3_BASE:1.2
	OPENBSD_2_2:1.1.1.1.0.6
	OPENBSD_2_2_BASE:1.1.1.1
	OPENBSD_2_1:1.1.1.1.0.4
	OPENBSD_2_1_BASE:1.1.1.1
	OPENBSD_2_0:1.1.1.1.0.2
	OPENBSD_2_0_BASE:1.1.1.1
	perl5003:1.1.1.1
	lwall:1.1.1;
locks; strict;
comment	@# @;
expand	@o@;


1.8
date	2017.02.05.00.32.20;	author afresh1;	state Exp;
branches;
next	1.7;
commitid	cxJ08BvJA9Pt2PTM;

1.7
date	2008.09.29.17.36.19;	author millert;	state Exp;
branches;
next	1.6;

1.6
date	2003.12.03.03.02.49;	author millert;	state Exp;
branches;
next	1.5;

1.5
date	2002.10.27.22.25.37;	author millert;	state Exp;
branches;
next	1.4;

1.4
date	2000.04.06.17.08.27;	author millert;	state Exp;
branches;
next	1.3;

1.3
date	99.04.29.22.52.36;	author millert;	state Exp;
branches;
next	1.2;

1.2
date	97.11.30.08.05.31;	author millert;	state Exp;
branches;
next	1.1;

1.1
date	96.08.19.10.13.20;	author downsj;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	96.08.19.10.13.20;	author downsj;	state Exp;
branches;
next	1.1.1.2;

1.1.1.2
date	99.04.29.22.41.47;	author millert;	state Exp;
branches;
next	1.1.1.3;

1.1.1.3
date	2000.04.06.16.10.49;	author millert;	state Exp;
branches;
next	1.1.1.4;

1.1.1.4
date	2002.10.27.22.15.10;	author millert;	state Exp;
branches;
next	1.1.1.5;

1.1.1.5
date	2003.12.03.02.44.32;	author millert;	state Exp;
branches;
next	1.1.1.6;

1.1.1.6
date	2008.09.29.17.19.01;	author millert;	state Exp;
branches;
next	;


desc
@@


1.8
log
@Fix merge issues, remove excess files - match perl-5.24.1 dist
@
text
@#!./perl

BEGIN {
    chdir 't' if -d 't';
    @@INC = qw(. ../lib); # ../lib needed for test.deparse
    require "./test.pl";
}

plan tests => 35;

# compile time evaluation

# 'A' 65	ASCII
# 'A' 193	EBCDIC

ok(ord('A') == 65 || ord('A') == 193, "ord('A') is ".ord('A'));

is(ord(chr(500)), 500, "compile time chr 500");

# run time evaluation

$x = 'ABC';

ok(ord($x) == 65 || ord($x) == 193, "ord('$x') is ".ord($x));

ok(chr 65 eq 'A' || chr 193 eq 'A', "chr can produce 'A'");

$x = 500;
is(ord(chr($x)), $x, "runtime chr $x");

is(ord("\x{1234}"), 0x1234, 'compile time ord \x{....}');

$x = "\x{1234}";
is(ord($x), 0x1234, 'runtime ord \x{....}');

{
    no warnings 'utf8'; # avoid Unicode warnings

# The following code points are some interesting steps.
    is(ord(chr(   0x100)),    0x100, '0x0100');
    is(ord(chr(   0x3FF)),    0x3FF, 'last two-byte char in UTF-EBCDIC');
    is(ord(chr(   0x400)),    0x400, 'first three-byte char in UTF-EBCDIC');
    is(ord(chr(   0x7FF)),    0x7FF, 'last two-byte char in UTF-8');
    is(ord(chr(   0x800)),    0x800, 'first three-byte char in UTF-8');
    is(ord(chr(   0xFFF)),    0xFFF, '0x0FFF');
    is(ord(chr(  0x1000)),   0x1000, '0x1000');
    is(ord(chr(  0x3FFF)),   0x3FFF, 'last three-byte char in UTF-EBCDIC');
    is(ord(chr(  0x4000)),   0x4000, 'first four-byte char in UTF-EBCDIC');
    is(ord(chr(  0xCFFF)),   0xCFFF, '0xCFFF');
    is(ord(chr(  0xD000)),   0xD000, '0xD000');
    is(ord(chr(  0xD7FF)),   0xD7FF, '0xD7FF');
    is(ord(chr(  0xD800)),   0xD800, 'surrogate begin (not strict utf-8)');
    is(ord(chr(  0xDFFF)),   0xDFFF, 'surrogate end (not strict utf-8)');
    is(ord(chr(  0xE000)),   0xE000, '0xE000');
    is(ord(chr(  0xFDD0)),   0xFDD0, 'first additional noncharacter in BMP');
    is(ord(chr(  0xFDEF)),   0xFDEF, 'last additional noncharacter in BMP');
    is(ord(chr(  0xFFFE)),   0xFFFE, '0xFFFE');
    is(ord(chr(  0xFFFF)),   0xFFFF, 'last three-byte char in UTF-8');
    is(ord(chr( 0x10000)),  0x10000, 'first four-byte char in UTF-8');
    is(ord(chr( 0x3FFFF)),  0x3FFFF, 'last four-byte char in UTF-EBCDIC');
    is(ord(chr( 0x40000)),  0x40000, 'first five-byte char in UTF-EBCDIC');
    is(ord(chr( 0xFFFFF)),  0xFFFFF, '0xFFFFF');
    is(ord(chr(0x100000)), 0x100000, '0x100000');
    is(ord(chr(0x10FFFF)), 0x10FFFF, 'Unicode last code point');
    is(ord(chr(0x110000)), 0x110000, '0x110000');
    is(ord(chr(0x1FFFFF)), 0x1FFFFF, 'last four-byte char in UTF-8');
    is(ord(chr(0x200000)), 0x200000, 'first five-byte char in UTF-8');
}
@


1.7
log
@fix conflicts and merge in local changes to perl 5.10.0
@
text
@d6 1
a6 1
    require "test.pl";
@


1.6
log
@Resolve conflicts for perl 5.8.2, remove old files, and add OpenBSD-specific scaffolding
@
text
@d9 1
a9 1
plan tests => 7;
d36 33
@


1.5
log
@Resolve conflicts, remove old files, merge local changes
@
text
@d5 1
a5 1
    @@INC = qw(.);
@


1.4
log
@perl-5.6.0 + local changes
@
text
@d3 7
a9 1
print "1..5\n";
d13 4
a16 3
# 65	ASCII
# 193	EBCDIC
if (ord('A') == 65 || ord('A') == 193) {print "ok 1\n";} else {print "not ok 1\n";}
d18 1
a18 2
print "not " unless ord(chr(500)) == 500;
print "ok 2\n";
a22 1
if (ord($x) == 65 || ord($x) == 193) {print "ok 3\n";} else {print "not ok 3\n";}
d24 3
a26 1
if (chr 65 eq 'A' || chr 193 eq 'A') {print "ok 4\n";} else {print "not ok 4\n";}
d29 7
a35 2
print "not " unless ord(chr($x)) == $x;
print "ok 5\n";
@


1.3
log
@perl5.005_03 (stock)
@
text
@d3 1
a3 3
# $RCSfile: ord.t,v $$Revision: 4.1 $$Date: 92/08/07 18:28:09 $

print "1..3\n";
d11 3
d17 3
a19 1
if (ord($x) == 65 || ord($x) == 193) {print "ok 2\n";} else {print "not ok 2\n";}
d21 3
a23 1
if (chr 65 == 'A' || chr 193 == 'A') {print "ok 3\n";} else {print "not ok 3\n";}
@


1.2
log
@perl 5.004_04
@
text
@d9 3
a11 1
if (ord('A') == 65) {print "ok 1\n";} else {print "not ok 1\n";}
d16 1
a16 1
if (ord($x) == 65) {print "ok 2\n";} else {print "not ok 2\n";}
d18 1
a18 1
if (chr 65 == A) {print "ok 3\n";} else {print "not ok 3\n";}
@


1.1
log
@Initial revision
@
text
@@


1.1.1.1
log
@Import of Perl 5.003 into the tree.  Makefile.bsd-wrapper and
config.sh.OpenBSD are the only local changes.
@
text
@@


1.1.1.2
log
@perl5.005_03
@
text
@d9 1
a9 3
# 65	ASCII
# 193	EBCDIC
if (ord('A') == 65 || ord('A') == 193) {print "ok 1\n";} else {print "not ok 1\n";}
d14 1
a14 1
if (ord($x) == 65 || ord($x) == 193) {print "ok 2\n";} else {print "not ok 2\n";}
d16 1
a16 1
if (chr 65 == 'A' || chr 193 == 'A') {print "ok 3\n";} else {print "not ok 3\n";}
@


1.1.1.3
log
@virgin perl 5.6.0
@
text
@d3 3
a5 1
print "1..5\n";
a12 3
print "not " unless ord(chr(500)) == 500;
print "ok 2\n";

d16 1
a16 3
if (ord($x) == 65 || ord($x) == 193) {print "ok 3\n";} else {print "not ok 3\n";}

if (chr 65 eq 'A' || chr 193 eq 'A') {print "ok 4\n";} else {print "not ok 4\n";}
d18 1
a18 3
$x = 500;
print "not " unless ord(chr($x)) == $x;
print "ok 5\n";
@


1.1.1.4
log
@stock perl 5.8.0 from CPAN
@
text
@d3 1
a3 7
BEGIN {
    chdir 't' if -d 't';
    @@INC = qw(.);
    require "test.pl";
}

plan tests => 7;
d7 3
a9 4
# 'A' 65	ASCII
# 'A' 193	EBCDIC

ok(ord('A') == 65 || ord('A') == 193, "ord('A') is ".ord('A'));
d11 2
a12 1
is(ord(chr(500)), 500, "compile time chr 500");
d17 1
d19 1
a19 3
ok(ord($x) == 65 || ord($x) == 193, "ord('$x') is ".ord($x));

ok(chr 65 eq 'A' || chr 193 eq 'A', "chr can produce 'A'");
d22 2
a23 7
is(ord(chr($x)), $x, "runtime chr $x");

is(ord("\x{1234}"), 0x1234, 'compile time ord \x{....}');

$x = "\x{1234}";
is(ord($x), 0x1234, 'runtime ord \x{....}');

@


1.1.1.5
log
@perl 5.8.2 from CPAN
@
text
@d5 1
a5 1
    @@INC = qw(. ../lib); # ../lib needed for test.deparse
@


1.1.1.6
log
@import perl 5.10.0 from CPAN
@
text
@d9 1
a9 1
plan tests => 35;
a35 33
{
    no warnings 'utf8'; # avoid Unicode warnings

# The following code points are some interesting steps.
    is(ord(chr(   0x100)),    0x100, '0x0100');
    is(ord(chr(   0x3FF)),    0x3FF, 'last two-byte char in UTF-EBCDIC');
    is(ord(chr(   0x400)),    0x400, 'first three-byte char in UTF-EBCDIC');
    is(ord(chr(   0x7FF)),    0x7FF, 'last two-byte char in UTF-8');
    is(ord(chr(   0x800)),    0x800, 'first three-byte char in UTF-8');
    is(ord(chr(   0xFFF)),    0xFFF, '0x0FFF');
    is(ord(chr(  0x1000)),   0x1000, '0x1000');
    is(ord(chr(  0x3FFF)),   0x3FFF, 'last three-byte char in UTF-EBCDIC');
    is(ord(chr(  0x4000)),   0x4000, 'first four-byte char in UTF-EBCDIC');
    is(ord(chr(  0xCFFF)),   0xCFFF, '0xCFFF');
    is(ord(chr(  0xD000)),   0xD000, '0xD000');
    is(ord(chr(  0xD7FF)),   0xD7FF, '0xD7FF');
    is(ord(chr(  0xD800)),   0xD800, 'surrogate begin (not strict utf-8)');
    is(ord(chr(  0xDFFF)),   0xDFFF, 'surrogate end (not strict utf-8)');
    is(ord(chr(  0xE000)),   0xE000, '0xE000');
    is(ord(chr(  0xFDD0)),   0xFDD0, 'first additional noncharacter in BMP');
    is(ord(chr(  0xFDEF)),   0xFDEF, 'last additional noncharacter in BMP');
    is(ord(chr(  0xFFFE)),   0xFFFE, '0xFFFE');
    is(ord(chr(  0xFFFF)),   0xFFFF, 'last three-byte char in UTF-8');
    is(ord(chr( 0x10000)),  0x10000, 'first four-byte char in UTF-8');
    is(ord(chr( 0x3FFFF)),  0x3FFFF, 'last four-byte char in UTF-EBCDIC');
    is(ord(chr( 0x40000)),  0x40000, 'first five-byte char in UTF-EBCDIC');
    is(ord(chr( 0xFFFFF)),  0xFFFFF, '0xFFFFF');
    is(ord(chr(0x100000)), 0x100000, '0x100000');
    is(ord(chr(0x10FFFF)), 0x10FFFF, 'Unicode last code point');
    is(ord(chr(0x110000)), 0x110000, '0x110000');
    is(ord(chr(0x1FFFFF)), 0x1FFFFF, 'last four-byte char in UTF-8');
    is(ord(chr(0x200000)), 0x200000, 'first five-byte char in UTF-8');
}
@


