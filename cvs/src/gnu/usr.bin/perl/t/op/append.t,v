head	1.9;
access;
symbols
	OPENBSD_6_1:1.9.0.14
	OPENBSD_6_1_BASE:1.9
	OPENBSD_6_0:1.9.0.12
	OPENBSD_6_0_BASE:1.9
	OPENBSD_5_9:1.9.0.6
	OPENBSD_5_9_BASE:1.9
	OPENBSD_5_8:1.9.0.8
	OPENBSD_5_8_BASE:1.9
	PERL_5_20_2:1.1.1.7
	OPENBSD_5_7:1.9.0.2
	OPENBSD_5_7_BASE:1.9
	PERL_5_20_1:1.1.1.7
	OPENBSD_5_6:1.9.0.4
	OPENBSD_5_6_BASE:1.9
	PERL_5_18_2:1.1.1.7
	PERL:1.1.1
	OPENBSD_5_5:1.8.0.24
	OPENBSD_5_5_BASE:1.8
	OPENBSD_5_4:1.8.0.20
	OPENBSD_5_4_BASE:1.8
	PERL_5_16_3:1.1.1.6
	OPENBSD_5_3:1.8.0.18
	OPENBSD_5_3_BASE:1.8
	OPENBSD_5_2:1.8.0.16
	OPENBSD_5_2_BASE:1.8
	OPENBSD_5_1_BASE:1.8
	OPENBSD_5_1:1.8.0.14
	OPENBSD_5_0:1.8.0.12
	OPENBSD_5_0_BASE:1.8
	OPENBSD_4_9:1.8.0.10
	OPENBSD_4_9_BASE:1.8
	PERL_5_12_2:1.1.1.6
	OPENBSD_4_8:1.8.0.8
	OPENBSD_4_8_BASE:1.8
	OPENBSD_4_7:1.8.0.4
	OPENBSD_4_7_BASE:1.8
	PERL_5_10_1:1.1.1.6
	OPENBSD_4_6:1.8.0.6
	OPENBSD_4_6_BASE:1.8
	OPENBSD_4_5:1.8.0.2
	OPENBSD_4_5_BASE:1.8
	PERL_5_10_0:1.1.1.6
	OPENBSD_4_4:1.7.0.20
	OPENBSD_4_4_BASE:1.7
	OPENBSD_4_3:1.7.0.18
	OPENBSD_4_3_BASE:1.7
	OPENBSD_4_2:1.7.0.16
	OPENBSD_4_2_BASE:1.7
	OPENBSD_4_1:1.7.0.14
	OPENBSD_4_1_BASE:1.7
	OPENBSD_4_0:1.7.0.12
	OPENBSD_4_0_BASE:1.7
	PERL_5_8_8:1.1.1.5
	OPENBSD_3_9:1.7.0.10
	OPENBSD_3_9_BASE:1.7
	OPENBSD_3_8:1.7.0.8
	OPENBSD_3_8_BASE:1.7
	OPENBSD_3_7:1.7.0.6
	OPENBSD_3_7_BASE:1.7
	PERL_5_8_6:1.1.1.5
	OPENBSD_3_6:1.7.0.4
	OPENBSD_3_6_BASE:1.7
	PERL_5_8_5:1.1.1.4
	PERL_5_8_3:1.1.1.3
	OPENBSD_3_5:1.7.0.2
	OPENBSD_3_5_BASE:1.7
	PERL_5_8_2:1.1.1.3
	OPENBSD_3_4:1.6.0.4
	OPENBSD_3_4_BASE:1.6
	OPENBSD_3_3:1.6.0.2
	OPENBSD_3_3_BASE:1.6
	PERL_5_8_0:1.1.1.3
	OPENBSD_3_2:1.5.0.6
	OPENBSD_3_2_BASE:1.5
	OPENBSD_3_1:1.5.0.4
	OPENBSD_3_1_BASE:1.5
	OPENBSD_3_0:1.5.0.2
	OPENBSD_3_0_BASE:1.5
	PERL_5_6_1:1.1.1.2
	OPENBSD_2_9:1.4.0.6
	OPENBSD_2_9_BASE:1.4
	OPENBSD_2_8:1.4.0.4
	OPENBSD_2_8_BASE:1.4
	OPENBSD_2_7:1.4.0.2
	OPENBSD_2_7_BASE:1.4
	PERL_5_6_0:1.1.1.1
	OPENBSD_2_6:1.3.0.2
	OPENBSD_2_6_BASE:1.3
	PERL_500503:1.1.1.1
	CPAN:1.1.1
	OPENBSD_2_5:1.2.0.6
	OPENBSD_2_5_BASE:1.2
	OPENBSD_2_4:1.2.0.4
	OPENBSD_2_4_BASE:1.2
	OPENBSD_2_3:1.2.0.2
	OPENBSD_2_3_BASE:1.2
	OPENBSD_2_2:1.1.1.1.0.6
	OPENBSD_2_2_BASE:1.1.1.1
	OPENBSD_2_1:1.1.1.1.0.4
	OPENBSD_2_1_BASE:1.1.1.1
	OPENBSD_2_0:1.1.1.1.0.2
	OPENBSD_2_0_BASE:1.1.1.1
	perl5003:1.1.1.1
	lwall:1.1.1;
locks; strict;
comment	@# @;
expand	@o@;


1.9
date	2014.03.24.15.05.33;	author afresh1;	state Exp;
branches;
next	1.8;

1.8
date	2008.09.29.17.36.19;	author millert;	state Exp;
branches;
next	1.7;

1.7
date	2003.12.03.03.02.48;	author millert;	state Exp;
branches;
next	1.6;

1.6
date	2002.10.27.22.25.37;	author millert;	state Exp;
branches;
next	1.5;

1.5
date	2001.05.24.18.36.16;	author millert;	state Exp;
branches;
next	1.4;

1.4
date	2000.04.06.17.08.19;	author millert;	state Exp;
branches;
next	1.3;

1.3
date	99.04.29.22.52.33;	author millert;	state Exp;
branches;
next	1.2;

1.2
date	97.11.30.08.05.12;	author millert;	state Exp;
branches;
next	1.1;

1.1
date	96.08.19.10.13.16;	author downsj;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	96.08.19.10.13.16;	author downsj;	state Exp;
branches;
next	1.1.1.2;

1.1.1.2
date	2001.05.24.18.25.32;	author millert;	state Exp;
branches;
next	1.1.1.3;

1.1.1.3
date	2002.10.27.22.15.10;	author millert;	state Exp;
branches;
next	1.1.1.4;

1.1.1.4
date	2004.08.09.17.48.34;	author millert;	state Exp;
branches;
next	1.1.1.5;

1.1.1.5
date	2005.01.15.21.18.17;	author millert;	state Exp;
branches;
next	1.1.1.6;

1.1.1.6
date	2008.09.29.17.19.00;	author millert;	state Exp;
branches;
next	1.1.1.7;

1.1.1.7
date	2014.03.24.14.59.10;	author afresh1;	state Exp;
branches;
next	;


desc
@@


1.9
log
@Merge perl-5.18.2 plus local patches, remove old files

OK espie@@ sthen@@ deraadt@@
@
text
@#!./perl

BEGIN {
    chdir 't' if -d 't';
    @@INC = '../lib';
    require './test.pl';
}

##Literal test count since evals below can fail
plan tests => 13;

$a = 'ab' . 'c';	# compile time
$b = 'def';

$c = $a . $b;
is( $c, 'abcdef', 'compile time concatenation' );

$c .= 'xyz';
is( $c, 'abcdefxyz', 'concat to self');

$_ = $a;
$_ .= $b;
is( $_, 'abcdef', 'concat using $_');

# test that when right argument of concat is UTF8, and is the same
# variable as the target, and the left argument is not UTF8, it no
# longer frees the wrong string.
{
    sub r2 {
	my $string = '';
	$string .= pack("U0a*", 'mnopqrstuvwx');
	$string = "abcdefghijkl$string";
    }

    isnt(r2(), '', 'UTF8 concat does not free the wrong string');
    isnt(r2(), '', 'second check');
}

# test that nul bytes get copied
{
    my ($a, $ab)   = ("a", "a\0b");
    my ($ua, $uab) = map pack("U0a*", $_), $a, $ab;

    my $ub = pack("U0a*", 'b');

    #aa\0b
    my $t1 = $a; $t1 .= $ab;
    like( $t1, qr/b/, 'null bytes do not stop string copy, aa\0b');

    #a\0a\0b
    my $t2 = $a; $t2 .= $uab;
    ok( eval '$t2 =~ /$ub/', '... a\0a\0b' );

    #\0aa\0b
    my $t3 = $ua; $t3 .= $ab;
    ok( eval '$t3 =~ /$ub/', '... \0aa\0b' );

    my $t4 = $ua; $t4 .= $uab;
    ok( eval '$t4 =~ /$ub/', '... \0a\0a\0b' );

    my $t5 = $a; $t5 = $ab . $t5;
    like( $t5, qr/$ub/, '... a\0ba' );

    my $t6 = $a; $t6 = $uab . $t6;
    ok( eval '$t6 =~ /$ub/', '... \0a\0ba' );

    my $t7 = $ua; $t7 = $ab . $t7;
    like( $t7, qr/$ub/, '... a\0b\0a' );

    my $t8 = $ua; $t8 = $uab . $t8;
    ok( eval '$t8 =~ /$ub/', '... \0a\0b\0a' );
}
@


1.8
log
@fix conflicts and merge in local changes to perl 5.10.0
@
text
@d3 8
a10 1
print "1..13\n";
d16 1
a16 2
print "#1\t:$c: eq :abcdef:\n";
if ($c eq 'abcdef') {print "ok 1\n";} else {print "not ok 1\n";}
d19 1
a19 2
print "#2\t:$c: eq :abcdefxyz:\n";
if ($c eq 'abcdefxyz') {print "ok 2\n";} else {print "not ok 2\n";}
d23 1
a23 2
print "#3\t:$_: eq :abcdef:\n";
if ($_ eq 'abcdef') {print "ok 3\n";} else {print "not ok 3\n";}
d35 2
a36 1
    r2() and print "ok $_\n" for qw/ 4 5 /;
d46 1
d48 1
d50 1
a50 2
    print $t1 =~ /b/ ? "ok 6\n" : "not ok 6\t# $t1\n";
    
d52 3
a54 3
    
    print eval '$t2 =~ /$ub/' ? "ok 7\n" : "not ok 7\t# $t2\n";
    
d56 2
a57 3
    
    print $t3 =~ /$ub/ ? "ok 8\n" : "not ok 8\t# $t3\n";
    
d59 2
a60 3
    
    print eval '$t4 =~ /$ub/' ? "ok 9\n" : "not ok 9\t# $t4\n";
    
d62 2
a63 3
    
    print $t5 =~ /$ub/ ? "ok 10\n" : "not ok 10\t# $t5\n";
    
d65 2
a66 3
    
    print eval '$t6 =~ /$ub/' ? "ok 11\n" : "not ok 11\t# $t6\n";
    
d68 2
a69 3
    
    print $t7 =~ /$ub/ ? "ok 12\n" : "not ok 12\t# $t7\n";
    
d71 1
a71 2
    
    print eval '$t8 =~ /$ub/' ? "ok 13\n" : "not ok 13\t# $t8\n";
@


1.7
log
@Resolve conflicts for perl 5.8.2, remove old files, and add OpenBSD-specific scaffolding
@
text
@a2 2
# $RCSfile: append.t,v $$Revision: 4.1 $$Date: 92/08/07 18:27:36 $

@


1.6
log
@Resolve conflicts, remove old files, merge local changes
@
text
@@


1.5
log
@merge in perl 5.6.1 with our local changes
@
text
@d38 5
a42 5
# Character 'b' occurs at codepoint 130 decimal or \202 octal
# under an EBCDIC coded character set.
#    my($a, $ab) = ("a", "a\000b");
    my($a, $ab) = ("\141", "\141\000\142");
    my($u, $ub) = map pack("U0a*", $_), $a, $ab;
d44 15
a58 7
    print $t1 =~ /\142/ ? "ok 6\n" : "not ok 6\t# $t1\n";
    my $t2 = $a; $t2 .= $ub;
    print $t2 =~ /\142/ ? "ok 7\n" : "not ok 7\t# $t2\n";
    my $t3 = $u; $t3 .= $ab;
    print $t3 =~ /\142/ ? "ok 8\n" : "not ok 8\t# $t3\n";
    my $t4 = $u; $t4 .= $ub;
    print $t4 =~ /\142/ ? "ok 9\n" : "not ok 9\t# $t4\n";
d60 14
a73 7
    print $t5 =~ /\142/ ? "ok 10\n" : "not ok 10\t# $t5\n";
    my $t6 = $a; $t6 = $ub . $t6;
    print $t6 =~ /\142/ ? "ok 11\n" : "not ok 11\t# $t6\n";
    my $t7 = $u; $t7 = $ab . $t7;
    print $t7 =~ /\142/ ? "ok 12\n" : "not ok 12\t# $t7\n";
    my $t8 = $u; $t8 = $ub . $t8;
    print $t8 =~ /\142/ ? "ok 13\n" : "not ok 13\t# $t8\n";
@


1.4
log
@perl-5.6.0 + local changes
@
text
@d5 1
a5 1
print "1..3\n";
d22 38
@


1.3
log
@perl5.005_03 (stock)
@
text
@@


1.2
log
@perl 5.004_04
@
text
@@


1.1
log
@Initial revision
@
text
@@


1.1.1.1
log
@Import of Perl 5.003 into the tree.  Makefile.bsd-wrapper and
config.sh.OpenBSD are the only local changes.
@
text
@@


1.1.1.2
log
@stock perl 5.6.1
@
text
@d5 1
a5 1
print "1..13\n";
a21 38

# test that when right argument of concat is UTF8, and is the same
# variable as the target, and the left argument is not UTF8, it no
# longer frees the wrong string.
{
    sub r2 {
	my $string = '';
	$string .= pack("U0a*", 'mnopqrstuvwx');
	$string = "abcdefghijkl$string";
    }

    r2() and print "ok $_\n" for qw/ 4 5 /;
}

# test that nul bytes get copied
{
# Character 'b' occurs at codepoint 130 decimal or \202 octal
# under an EBCDIC coded character set.
#    my($a, $ab) = ("a", "a\000b");
    my($a, $ab) = ("\141", "\141\000\142");
    my($u, $ub) = map pack("U0a*", $_), $a, $ab;
    my $t1 = $a; $t1 .= $ab;
    print $t1 =~ /\142/ ? "ok 6\n" : "not ok 6\t# $t1\n";
    my $t2 = $a; $t2 .= $ub;
    print $t2 =~ /\142/ ? "ok 7\n" : "not ok 7\t# $t2\n";
    my $t3 = $u; $t3 .= $ab;
    print $t3 =~ /\142/ ? "ok 8\n" : "not ok 8\t# $t3\n";
    my $t4 = $u; $t4 .= $ub;
    print $t4 =~ /\142/ ? "ok 9\n" : "not ok 9\t# $t4\n";
    my $t5 = $a; $t5 = $ab . $t5;
    print $t5 =~ /\142/ ? "ok 10\n" : "not ok 10\t# $t5\n";
    my $t6 = $a; $t6 = $ub . $t6;
    print $t6 =~ /\142/ ? "ok 11\n" : "not ok 11\t# $t6\n";
    my $t7 = $u; $t7 = $ab . $t7;
    print $t7 =~ /\142/ ? "ok 12\n" : "not ok 12\t# $t7\n";
    my $t8 = $u; $t8 = $ub . $t8;
    print $t8 =~ /\142/ ? "ok 13\n" : "not ok 13\t# $t8\n";
}
@


1.1.1.3
log
@stock perl 5.8.0 from CPAN
@
text
@d38 5
a42 5
    my ($a, $ab)   = ("a", "a\0b");
    my ($ua, $uab) = map pack("U0a*", $_), $a, $ab;

    my $ub = pack("U0a*", 'b');

d44 7
a50 15

    print $t1 =~ /b/ ? "ok 6\n" : "not ok 6\t# $t1\n";
    
    my $t2 = $a; $t2 .= $uab;
    
    print eval '$t2 =~ /$ub/' ? "ok 7\n" : "not ok 7\t# $t2\n";
    
    my $t3 = $ua; $t3 .= $ab;
    
    print $t3 =~ /$ub/ ? "ok 8\n" : "not ok 8\t# $t3\n";
    
    my $t4 = $ua; $t4 .= $uab;
    
    print eval '$t4 =~ /$ub/' ? "ok 9\n" : "not ok 9\t# $t4\n";
    
d52 7
a58 14
    
    print $t5 =~ /$ub/ ? "ok 10\n" : "not ok 10\t# $t5\n";
    
    my $t6 = $a; $t6 = $uab . $t6;
    
    print eval '$t6 =~ /$ub/' ? "ok 11\n" : "not ok 11\t# $t6\n";
    
    my $t7 = $ua; $t7 = $ab . $t7;
    
    print $t7 =~ /$ub/ ? "ok 12\n" : "not ok 12\t# $t7\n";
    
    my $t8 = $ua; $t8 = $uab . $t8;
    
    print eval '$t8 =~ /$ub/' ? "ok 13\n" : "not ok 13\t# $t8\n";
@


1.1.1.4
log
@Import of stock perl 5.8.5
@
text
@d3 1
a3 1
# $RCSfile: append.t,v $$Revision: 1.7 $$Date: 2003/12/03 03:02:48 $
@


1.1.1.5
log
@perl 5.8.6 from CPAN
@
text
@d3 1
a3 1
# $RCSfile: append.t,v $$Revision: 4.1 $$Date: 92/08/07 18:27:36 $
@


1.1.1.6
log
@import perl 5.10.0 from CPAN
@
text
@d3 2
@


1.1.1.7
log
@Import perl-5.18.2

OK espie@@ sthen@@ deraadt@@
@
text
@d3 1
a3 8
BEGIN {
    chdir 't' if -d 't';
    @@INC = '../lib';
    require './test.pl';
}

##Literal test count since evals below can fail
plan tests => 13;
d9 2
a10 1
is( $c, 'abcdef', 'compile time concatenation' );
d13 2
a14 1
is( $c, 'abcdefxyz', 'concat to self');
d18 2
a19 1
is( $_, 'abcdef', 'concat using $_');
d31 1
a31 2
    isnt(r2(), '', 'UTF8 concat does not free the wrong string');
    isnt(r2(), '', 'second check');
a40 1
    #aa\0b
a41 1
    like( $t1, qr/b/, 'null bytes do not stop string copy, aa\0b');
d43 2
a44 1
    #a\0a\0b
d46 3
a48 3
    ok( eval '$t2 =~ /$ub/', '... a\0a\0b' );

    #\0aa\0b
d50 3
a52 2
    ok( eval '$t3 =~ /$ub/', '... \0aa\0b' );

d54 3
a56 2
    ok( eval '$t4 =~ /$ub/', '... \0a\0a\0b' );

d58 3
a60 2
    like( $t5, qr/$ub/, '... a\0ba' );

d62 3
a64 2
    ok( eval '$t6 =~ /$ub/', '... \0a\0ba' );

d66 3
a68 2
    like( $t7, qr/$ub/, '... a\0b\0a' );

d70 2
a71 1
    ok( eval '$t8 =~ /$ub/', '... \0a\0b\0a' );
@


