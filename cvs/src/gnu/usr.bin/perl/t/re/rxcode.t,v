head	1.2;
access;
symbols
	OPENBSD_6_1_BASE:1.2
	OPENBSD_6_0:1.1.1.4.0.8
	OPENBSD_6_0_BASE:1.1.1.4
	OPENBSD_5_9:1.1.1.4.0.2
	OPENBSD_5_9_BASE:1.1.1.4
	OPENBSD_5_8:1.1.1.4.0.4
	OPENBSD_5_8_BASE:1.1.1.4
	PERL_5_20_2:1.1.1.4
	OPENBSD_5_7:1.1.1.3.0.2
	OPENBSD_5_7_BASE:1.1.1.3
	PERL_5_20_1:1.1.1.3
	OPENBSD_5_6:1.1.1.2.0.4
	OPENBSD_5_6_BASE:1.1.1.2
	PERL_5_18_2:1.1.1.2
	PERL:1.1.1
	OPENBSD_5_5:1.1.1.1.0.16
	OPENBSD_5_5_BASE:1.1.1.1
	OPENBSD_5_4:1.1.1.1.0.12
	OPENBSD_5_4_BASE:1.1.1.1
	PERL_5_16_3:1.1.1.1
	OPENBSD_5_3:1.1.1.1.0.10
	OPENBSD_5_3_BASE:1.1.1.1
	OPENBSD_5_2:1.1.1.1.0.8
	OPENBSD_5_2_BASE:1.1.1.1
	OPENBSD_5_1_BASE:1.1.1.1
	OPENBSD_5_1:1.1.1.1.0.6
	OPENBSD_5_0:1.1.1.1.0.4
	OPENBSD_5_0_BASE:1.1.1.1
	OPENBSD_4_9:1.1.1.1.0.2
	OPENBSD_4_9_BASE:1.1.1.1
	PERL_5_12_2:1.1.1.1
	CPAN:1.1.1;
locks; strict;
comment	@# @;
expand	@o@;


1.2
date	2017.02.05.00.32.21;	author afresh1;	state Exp;
branches;
next	1.1;
commitid	cxJ08BvJA9Pt2PTM;

1.1
date	2010.09.24.14.49.19;	author millert;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	2010.09.24.14.49.19;	author millert;	state Exp;
branches;
next	1.1.1.2;

1.1.1.2
date	2014.03.24.14.59.11;	author afresh1;	state Exp;
branches;
next	1.1.1.3;

1.1.1.3
date	2014.11.17.20.53.18;	author afresh1;	state Exp;
branches;
next	1.1.1.4;
commitid	B31cAbBIXiCqnL97;

1.1.1.4
date	2015.04.25.19.10.48;	author afresh1;	state Exp;
branches;
next	;
commitid	Wpcs5S8qILgEZC7F;


desc
@@


1.2
log
@Fix merge issues, remove excess files - match perl-5.24.1 dist
@
text
@#!./perl

BEGIN {
    chdir 't' if -d 't';
    require './test.pl';
    set_up_inc('../lib');
}

plan tests => 42;

$^R = undef;
like( 'a',  qr/^a(?{1})(?:b(?{2}))?/, 'a =~ ab?' );
cmp_ok( $^R, '==', 1, '..$^R after a =~ ab?' );

$^R = undef;
unlike( 'abc', qr/^a(?{3})(?:b(?{4}))$/, 'abc !~ a(?:b)$' );
ok( !defined $^R, '..$^R after abc !~ a(?:b)$' );

$^R = undef;
like( 'ab', qr/^a(?{5})b(?{6})/, 'ab =~ ab' );
cmp_ok( $^R, '==', 6, '..$^R after ab =~ ab' );

$^R = undef;
like( 'ab', qr/^a(?{7})(?:b(?{8}))?/, 'ab =~ ab?' );

cmp_ok( $^R, '==', 8, '..$^R after ab =~ ab?' );

$^R = undef;
like( 'ab', qr/^a(?{9})b?(?{10})/, 'ab =~ ab? (2)' );
cmp_ok( $^R, '==', 10, '..$^R after ab =~ ab? (2)' );

$^R = undef;
like( 'ab', qr/^(a(?{11})(?:b(?{12})))?/, 'ab =~ (ab)? (3)' );
cmp_ok( $^R, '==', 12, '..$^R after ab =~ ab? (3)' );

$^R = undef;
unlike( 'ac', qr/^a(?{13})b(?{14})/, 'ac !~ ab' );
ok( !defined $^R, '..$^R after ac !~ ab' );

$^R = undef;
like( 'ac', qr/^a(?{15})(?:b(?{16}))?/, 'ac =~ ab?' );
cmp_ok( $^R, '==', 15, '..$^R after ac =~ ab?' );

my @@ar;
like( 'ab', qr/^a(?{push @@ar,101})(?:b(?{push @@ar,102}))?/, 'ab =~ ab? with code push' );
cmp_ok( scalar(@@ar), '==', 2, '..@@ar pushed' );
cmp_ok( $ar[0], '==', 101, '..first element pushed' );
cmp_ok( $ar[1], '==', 102, '..second element pushed' );

$^R = undef;
unlike( 'a', qr/^a(?{103})b(?{104})/, 'a !~ ab with code push' );
ok( !defined $^R, '..$^R after a !~ ab with code push' );

@@ar = ();
unlike( 'a', qr/^a(?{push @@ar,105})b(?{push @@ar,106})/, 'a !~ ab (push)' );
cmp_ok( scalar(@@ar), '==', 0, '..nothing pushed' );

@@ar = ();
unlike( 'abc', qr/^a(?{push @@ar,107})b(?{push @@ar,108})$/, 'abc !~ ab$ (push)' );
cmp_ok( scalar(@@ar), '==', 0, '..still nothing pushed' );

use vars '@@var';

like( 'ab', qr/^a(?{push @@var,109})(?:b(?{push @@var,110}))?/, 'ab =~ ab? push to package var' );
cmp_ok( scalar(@@var), '==', 2, '..@@var pushed' );
cmp_ok( $var[0], '==', 109, '..first element pushed (package)' );
cmp_ok( $var[1], '==', 110, '..second element pushed (package)' );

@@var = ();
unlike( 'a', qr/^a(?{push @@var,111})b(?{push @@var,112})/, 'a !~ ab (push package var)' );
cmp_ok( scalar(@@var), '==', 0, '..nothing pushed (package)' );

@@var = ();
unlike( 'abc', qr/^a(?{push @@var,113})b(?{push @@var,114})$/, 'abc !~ ab$ (push package var)' );
cmp_ok( scalar(@@var), '==', 0, '..still nothing pushed (package)' );

{
    local $^R = undef;
    ok( 'ac' =~ /^a(?{30})(?:b(?{31})|c(?{32}))?/, 'ac =~ a(?:b|c)?' );
    ok( $^R == 32, '$^R == 32' );
}
{
    local $^R = undef;
    ok( 'abbb' =~ /^a(?{36})(?:b(?{37})|c(?{38}))+/, 'abbbb =~ a(?:b|c)+' );
    ok( $^R == 37, '$^R == 37' ) or print "# \$^R=$^R\n";
}

# Broken temporarily by the jumbo re-eval rewrite in 5.17.1; fixed in .6
{
    use re 'eval';
    $x = "(?{})";
    is eval { "a" =~ /a++(?{})+$x/x } || $@@, '1', '/a++(?{})+$code_block/'
}

# [perl #78194] $_ in code block aliasing op return values
"$_" =~ /(?{ is \$_, \$_,
               '[perl #78194] \$_ == \$_ when $_ aliases "$x"' })/;

@@a = 1..3;
like eval { qr/@@a(?{})/ }, qr/1 2 3\(\?\{\}\)/, 'qr/@@a(?{})/';

# Not a code block, but looks a bit like one.  (Failed an assertion from
# 5.17.1 to 5.21.6.)
ok "(?{" =~ qr/\Q(?{/, 'qr/\Q(?{/';
@


1.1
log
@Initial revision
@
text
@a4 1
    @@INC = '../lib';
d6 1
d9 1
a9 1
plan tests => 38;
d87 18
@


1.1.1.1
log
@Perl 5.12.2 from CPAN
@
text
@@


1.1.1.2
log
@Import perl-5.18.2

OK espie@@ sthen@@ deraadt@@
@
text
@d9 1
a9 1
plan tests => 39;
a85 7
}

# Broken temporarily by the jumbo re-eval rewrite in 5.17.1; fixed in .6
{
    use re 'eval';
    $x = "(?{})";
    is eval { "a" =~ /a++(?{})+$x/x } || $@@, '1', '/a++(?{})+$code_block/'
@


1.1.1.3
log
@Import perl-5.20.1
@
text
@d9 1
a9 1
plan tests => 40;
a93 4

# [perl #78194] $_ in code block aliasing op return values
"$_" =~ /(?{ is \$_, \$_,
               '[perl #78194] \$_ == \$_ when $_ aliases "$x"' })/;
@


1.1.1.4
log
@Import perl-5.20.2
@
text
@d9 1
a9 1
plan tests => 42;
a97 7

@@a = 1..3;
like eval { qr/@@a(?{})/ }, qr/1 2 3\(\?\{\}\)/, 'qr/@@a(?{})/';

# Not a code block, but looks a bit like one.  (Failed an assertion from
# 5.17.1 to 5.21.6.)
ok "(?{" =~ qr/\Q(?{/, 'qr/\Q(?{/';
@


