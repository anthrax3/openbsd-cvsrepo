head	1.1;
branch	1.1.1;
access;
symbols
	OPENBSD_6_2:1.1.1.2.0.14
	OPENBSD_6_2_BASE:1.1.1.2
	PERL_5_24_2:1.1.1.2
	OPENBSD_6_1:1.1.1.2.0.18
	OPENBSD_6_1_BASE:1.1.1.2
	OPENBSD_6_0:1.1.1.2.0.16
	OPENBSD_6_0_BASE:1.1.1.2
	OPENBSD_5_9:1.1.1.2.0.10
	OPENBSD_5_9_BASE:1.1.1.2
	OPENBSD_5_8:1.1.1.2.0.12
	OPENBSD_5_8_BASE:1.1.1.2
	PERL_5_20_2:1.1.1.2
	OPENBSD_5_7:1.1.1.2.0.4
	OPENBSD_5_7_BASE:1.1.1.2
	PERL_5_20_1:1.1.1.2
	OPENBSD_5_6:1.1.1.2.0.8
	OPENBSD_5_6_BASE:1.1.1.2
	PERL_5_18_2:1.1.1.2
	PERL:1.1.1
	OPENBSD_5_5:1.1.1.2.0.6
	OPENBSD_5_5_BASE:1.1.1.2
	OPENBSD_5_4:1.1.1.2.0.2
	OPENBSD_5_4_BASE:1.1.1.2
	PERL_5_16_3:1.1.1.2
	OPENBSD_5_3:1.1.1.1.0.10
	OPENBSD_5_3_BASE:1.1.1.1
	OPENBSD_5_2:1.1.1.1.0.8
	OPENBSD_5_2_BASE:1.1.1.1
	OPENBSD_5_1_BASE:1.1.1.1
	OPENBSD_5_1:1.1.1.1.0.6
	OPENBSD_5_0:1.1.1.1.0.4
	OPENBSD_5_0_BASE:1.1.1.1
	OPENBSD_4_9:1.1.1.1.0.2
	OPENBSD_4_9_BASE:1.1.1.1
	PERL_5_12_2:1.1.1.1
	CPAN:1.1.1;
locks; strict;
comment	@# @;
expand	@o@;


1.1
date	2010.09.24.14.49.19;	author millert;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	2010.09.24.14.49.19;	author millert;	state Exp;
branches;
next	1.1.1.2;

1.1.1.2
date	2013.03.25.20.09.38;	author sthen;	state Exp;
branches;
next	;


desc
@@


1.1
log
@Initial revision
@
text
@#!./perl

BEGIN {
    chdir 't' if -d 't';
    @@INC = '../lib';
    require Config; import Config;
}

print "1..13\n";

$_ = 'x' x 20; 
s/\d*|x/<$&>/g; 
$foo = '<>' . ('<x><>' x 20) ;
print ($_ eq $foo ? "ok 1\n" : "not ok 1\n#'$_'\n#'$foo'\n");

$t = 'aaa';

$_ = $t;
@@res = ();
pos = 1;
s/\Ga(?{push @@res, $_, $`})/xx/g;
print "not " unless "$_ @@res" eq 'axxxx aaa a aaa aa';
print "ok 2\n";

$_ = $t;
@@res = ();
pos = 1;
s/\Ga(?{push @@res, $_, $`})/x/g;
print "not " unless "$_ @@res" eq 'axx aaa a aaa aa';
print "ok 3\n";

$_ = $t;
@@res = ();
pos = 1;
s/\Ga(?{push @@res, $_, $`})/xx/;
print "not " unless "$_ @@res" eq 'axxa aaa a';
print "ok 4\n";

$_ = $t;
@@res = ();
pos = 1;
s/\Ga(?{push @@res, $_, $`})/x/;
print "not " unless "$_ @@res" eq 'axa aaa a';
print "ok 5\n";

$a = $t;
@@res = ();
pos ($a) = 1;
$a =~ s/\Ga(?{push @@res, $_, $`})/xx/g;
print "#'$a' '@@res'\nnot " unless "$a @@res" eq 'axxxx aaa a aaa aa';
print "ok 6\n";

$a = $t;
@@res = ();
pos ($a) = 1;
$a =~ s/\Ga(?{push @@res, $_, $`})/x/g;
print "#'$a' '@@res'\nnot " unless "$a @@res" eq 'axx aaa a aaa aa';
print "ok 7\n";

$a = $t;
@@res = ();
pos ($a) = 1;
$a =~ s/\Ga(?{push @@res, $_, $`})/xx/;
print "#'$a' '@@res'\nnot " unless "$a @@res" eq 'axxa aaa a';
print "ok 8\n";

$a = $t;
@@res = ();
pos ($a) = 1;
$a =~ s/\Ga(?{push @@res, $_, $`})/x/;
print "#'$a' '@@res'\nnot " unless "$a @@res" eq 'axa aaa a';
print "ok 9\n";

sub x2 {'xx'}
sub x1 {'x'}

$a = $t;
@@res = ();
pos ($a) = 1;
$a =~ s/\Ga(?{push @@res, $_, $`})/x2/ge;
print "#'$a' '@@res'\nnot " unless "$a @@res" eq 'axxxx aaa a aaa aa';
print "ok 10\n";

$a = $t;
@@res = ();
pos ($a) = 1;
$a =~ s/\Ga(?{push @@res, $_, $`})/x1/ge;
print "#'$a' '@@res'\nnot " unless "$a @@res" eq 'axx aaa a aaa aa';
print "ok 11\n";

$a = $t;
@@res = ();
pos ($a) = 1;
$a =~ s/\Ga(?{push @@res, $_, $`})/x2/e;
print "#'$a' '@@res'\nnot " unless "$a @@res" eq 'axxa aaa a';
print "ok 12\n";

$a = $t;
@@res = ();
pos ($a) = 1;
$a =~ s/\Ga(?{push @@res, $_, $`})/x1/e;
print "#'$a' '@@res'\nnot " unless "$a @@res" eq 'axa aaa a';
print "ok 13\n";

@


1.1.1.1
log
@Perl 5.12.2 from CPAN
@
text
@@


1.1.1.2
log
@import perl 5.16.3 from CPAN - worked on by Andrew Fresh and myself
@
text
@d1 1
a1 1
#!./perl -w
d6 1
a6 1
    require './test.pl';
d9 1
a9 1
use strict;
d13 2
a14 2
my $foo = '<>' . ('<x><>' x 20) ;
is($_, $foo);
d16 1
a16 1
my $t = 'aaa';
d19 1
a19 1
my @@res;
d22 2
a23 1
is("$_ @@res", 'axxxx aaa a aaa aa');
d29 2
a30 1
is("$_ @@res", 'axx aaa a aaa aa');
d36 2
a37 1
is("$_ @@res", 'axxa aaa a');
d43 2
a44 1
is("$_ @@res", 'axa aaa a');
d50 2
a51 1
is("$a @@res", 'axxxx aaa a aaa aa');
d57 2
a58 1
is("$a @@res", 'axx aaa a aaa aa');
d64 2
a65 1
is("$a @@res", 'axxa aaa a');
d71 2
a72 1
is("$a @@res", 'axa aaa a');
d81 2
a82 1
is("$a @@res", 'axxxx aaa a aaa aa');
d88 2
a89 1
is("$a @@res", 'axx aaa a aaa aa');
d95 2
a96 1
is("$a @@res", 'axxa aaa a');
d102 2
a103 1
is("$a @@res", 'axa aaa a');
a104 1
done_testing();
@

