head	1.2;
access;
symbols
	OPENBSD_6_2:1.2.0.6
	OPENBSD_6_2_BASE:1.2
	PERL_5_24_2:1.1.1.3
	OPENBSD_6_1:1.2.0.4
	OPENBSD_6_1_BASE:1.2
	OPENBSD_6_0:1.1.1.2.0.26
	OPENBSD_6_0_BASE:1.1.1.2
	OPENBSD_5_9:1.1.1.2.0.20
	OPENBSD_5_9_BASE:1.1.1.2
	OPENBSD_5_8:1.1.1.2.0.22
	OPENBSD_5_8_BASE:1.1.1.2
	PERL_5_20_2:1.1.1.2
	OPENBSD_5_7:1.1.1.2.0.14
	OPENBSD_5_7_BASE:1.1.1.2
	PERL_5_20_1:1.1.1.2
	OPENBSD_5_6:1.1.1.2.0.18
	OPENBSD_5_6_BASE:1.1.1.2
	PERL_5_18_2:1.1.1.2
	PERL:1.1.1
	OPENBSD_5_5:1.1.1.2.0.16
	OPENBSD_5_5_BASE:1.1.1.2
	OPENBSD_5_4:1.1.1.2.0.12
	OPENBSD_5_4_BASE:1.1.1.2
	PERL_5_16_3:1.1.1.2
	OPENBSD_5_3:1.1.1.2.0.10
	OPENBSD_5_3_BASE:1.1.1.2
	OPENBSD_5_2:1.1.1.2.0.8
	OPENBSD_5_2_BASE:1.1.1.2
	OPENBSD_5_1_BASE:1.1.1.2
	OPENBSD_5_1:1.1.1.2.0.6
	OPENBSD_5_0:1.1.1.2.0.4
	OPENBSD_5_0_BASE:1.1.1.2
	OPENBSD_4_9:1.1.1.2.0.2
	OPENBSD_4_9_BASE:1.1.1.2
	PERL_5_12_2:1.1.1.2
	OPENBSD_4_8:1.1.1.1.0.8
	OPENBSD_4_8_BASE:1.1.1.1
	OPENBSD_4_7:1.1.1.1.0.4
	OPENBSD_4_7_BASE:1.1.1.1
	PERL_5_10_1:1.1.1.1
	OPENBSD_4_6:1.1.1.1.0.6
	OPENBSD_4_6_BASE:1.1.1.1
	OPENBSD_4_5:1.1.1.1.0.2
	OPENBSD_4_5_BASE:1.1.1.1
	PERL_5_10_0:1.1.1.1
	CPAN:1.1.1;
locks; strict;
comment	@# @;
expand	@o@;


1.2
date	2017.02.05.00.32.19;	author afresh1;	state Exp;
branches;
next	1.1;
commitid	cxJ08BvJA9Pt2PTM;

1.1
date	2008.09.29.17.18.59;	author millert;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	2008.09.29.17.18.59;	author millert;	state Exp;
branches;
next	1.1.1.2;

1.1.1.2
date	2010.09.24.14.49.15;	author millert;	state Exp;
branches;
next	1.1.1.3;

1.1.1.3
date	2017.08.14.13.46.23;	author afresh1;	state Exp;
branches;
next	;
commitid	fAzrs78vdW2Yfc6A;


desc
@@


1.2
log
@Fix merge issues, remove excess files - match perl-5.24.1 dist
@
text
@package Cname;
our $Evil='A';

sub translator {
    my $str = shift;
    if ( $str eq 'EVIL' ) {
        # Returns A first time, AB second, ABC third ... A-ZA the 27th time.
        (my $c=substr("A".$Evil,-1))++;
        my $r=$Evil;
        $Evil.=$c;
        return $r;
    }
    if ( $str eq 'EMPTY-STR') {
       return "";
    }
    if ( $str eq 'NULL') {
        return "\0";
    }
    if ( $str eq 'LONG-STR') {
        return 'A' x 255;
    }
    # Should exceed limit for regex \N bytes in a sequence.  Anyway it will if
    # UCHAR_MAX is 255.
    if ( $str eq 'TOO-LONG-STR') {
       return 'A' x 256;
    }
    return $str;
}

sub import {
    shift;
    $^H{charnames} = \&translator;
}
1;  
@


1.1
log
@Initial revision
@
text
@d7 1
d15 11
@


1.1.1.1
log
@import perl 5.10.0 from CPAN
@
text
@@


1.1.1.2
log
@Perl 5.12.2 from CPAN
@
text
@a6 1
        # Returns A first time, AB second, ABC third ... A-ZA the 27th time.
a13 19
    }
    if ( $str eq 'NULL') {
        return "\0";
    }
    if ( $str eq 'LONG-STR') {
        return 'A' x 255;
    }
    # Should exceed limit for regex \N bytes in a sequence.  Anyway it will if
    # UCHAR_MAX is 255.
    if ( $str eq 'TOO-LONG-STR') {
       return 'A' x 256;
    }
    if ($str eq 'MALFORMED') {
        $str = "\xDF\xDFabc";
        utf8::upgrade($str);
         
        # Create a malformed in first and second characters.
        $str =~ s/^\C/A/;
        $str =~ s/^(\C\C)\C/$1A/;
@


1.1.1.3
log
@Import perl-5.24.2
@
text
@d27 8
@


