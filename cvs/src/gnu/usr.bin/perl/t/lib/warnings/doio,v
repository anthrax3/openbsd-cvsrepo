head	1.2;
access;
symbols
	OPENBSD_6_2:1.2.0.6
	OPENBSD_6_2_BASE:1.2
	PERL_5_24_2:1.1.1.8
	OPENBSD_6_1:1.2.0.4
	OPENBSD_6_1_BASE:1.2
	OPENBSD_6_0:1.1.1.7.0.10
	OPENBSD_6_0_BASE:1.1.1.7
	OPENBSD_5_9:1.1.1.7.0.4
	OPENBSD_5_9_BASE:1.1.1.7
	OPENBSD_5_8:1.1.1.7.0.6
	OPENBSD_5_8_BASE:1.1.1.7
	PERL_5_20_2:1.1.1.7
	OPENBSD_5_7:1.1.1.7.0.2
	OPENBSD_5_7_BASE:1.1.1.7
	PERL_5_20_1:1.1.1.7
	OPENBSD_5_6:1.1.1.6.0.4
	OPENBSD_5_6_BASE:1.1.1.6
	PERL_5_18_2:1.1.1.6
	PERL:1.1.1
	OPENBSD_5_5:1.1.1.5.0.6
	OPENBSD_5_5_BASE:1.1.1.5
	OPENBSD_5_4:1.1.1.5.0.2
	OPENBSD_5_4_BASE:1.1.1.5
	PERL_5_16_3:1.1.1.5
	OPENBSD_5_3:1.1.1.4.0.10
	OPENBSD_5_3_BASE:1.1.1.4
	OPENBSD_5_2:1.1.1.4.0.8
	OPENBSD_5_2_BASE:1.1.1.4
	OPENBSD_5_1_BASE:1.1.1.4
	OPENBSD_5_1:1.1.1.4.0.6
	OPENBSD_5_0:1.1.1.4.0.4
	OPENBSD_5_0_BASE:1.1.1.4
	OPENBSD_4_9:1.1.1.4.0.2
	OPENBSD_4_9_BASE:1.1.1.4
	PERL_5_12_2:1.1.1.4
	OPENBSD_4_8:1.1.1.3.0.8
	OPENBSD_4_8_BASE:1.1.1.3
	OPENBSD_4_7:1.1.1.3.0.4
	OPENBSD_4_7_BASE:1.1.1.3
	PERL_5_10_1:1.1.1.3
	OPENBSD_4_6:1.1.1.3.0.6
	OPENBSD_4_6_BASE:1.1.1.3
	OPENBSD_4_5:1.1.1.3.0.2
	OPENBSD_4_5_BASE:1.1.1.3
	PERL_5_10_0:1.1.1.3
	OPENBSD_4_4:1.1.1.2.0.20
	OPENBSD_4_4_BASE:1.1.1.2
	OPENBSD_4_3:1.1.1.2.0.18
	OPENBSD_4_3_BASE:1.1.1.2
	OPENBSD_4_2:1.1.1.2.0.16
	OPENBSD_4_2_BASE:1.1.1.2
	OPENBSD_4_1:1.1.1.2.0.14
	OPENBSD_4_1_BASE:1.1.1.2
	OPENBSD_4_0:1.1.1.2.0.12
	OPENBSD_4_0_BASE:1.1.1.2
	PERL_5_8_8:1.1.1.2
	OPENBSD_3_9:1.1.1.2.0.10
	OPENBSD_3_9_BASE:1.1.1.2
	OPENBSD_3_8:1.1.1.2.0.8
	OPENBSD_3_8_BASE:1.1.1.2
	OPENBSD_3_7:1.1.1.2.0.6
	OPENBSD_3_7_BASE:1.1.1.2
	PERL_5_8_6:1.1.1.2
	OPENBSD_3_6:1.1.1.2.0.4
	OPENBSD_3_6_BASE:1.1.1.2
	PERL_5_8_5:1.1.1.2
	PERL_5_8_3:1.1.1.2
	OPENBSD_3_5:1.1.1.2.0.2
	OPENBSD_3_5_BASE:1.1.1.2
	PERL_5_8_2:1.1.1.2
	OPENBSD_3_4:1.1.1.1.0.4
	OPENBSD_3_4_BASE:1.1.1.1
	OPENBSD_3_3:1.1.1.1.0.2
	OPENBSD_3_3_BASE:1.1.1.1
	PERL_5_8_0:1.1.1.1
	CPAN:1.1.1;
locks; strict;
comment	@# @;
expand	@o@;


1.2
date	2017.02.05.00.32.20;	author afresh1;	state Exp;
branches;
next	1.1;
commitid	cxJ08BvJA9Pt2PTM;

1.1
date	2002.10.27.22.15.10;	author millert;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	2002.10.27.22.15.10;	author millert;	state Exp;
branches;
next	1.1.1.2;

1.1.1.2
date	2003.12.03.02.44.31;	author millert;	state Exp;
branches;
next	1.1.1.3;

1.1.1.3
date	2008.09.29.17.18.59;	author millert;	state Exp;
branches;
next	1.1.1.4;

1.1.1.4
date	2010.09.24.14.49.15;	author millert;	state Exp;
branches;
next	1.1.1.5;

1.1.1.5
date	2013.03.25.20.09.34;	author sthen;	state Exp;
branches;
next	1.1.1.6;

1.1.1.6
date	2014.03.24.14.59.10;	author afresh1;	state Exp;
branches;
next	1.1.1.7;

1.1.1.7
date	2014.11.17.20.53.17;	author afresh1;	state Exp;
branches;
next	1.1.1.8;
commitid	B31cAbBIXiCqnL97;

1.1.1.8
date	2017.08.14.13.46.23;	author afresh1;	state Exp;
branches;
next	;
commitid	fAzrs78vdW2Yfc6A;


desc
@@


1.2
log
@Fix merge issues, remove excess files - match perl-5.24.1 dist
@
text
@  doio.c	

  Can't open bidirectional pipe		[Perl_do_open9]
    open(F, "| true |");

  Missing command in piped open		[Perl_do_open9]
    open(F, "| ");

  Missing command in piped open		[Perl_do_open9]
    open(F, " |");

  warn(warn_nl, "open");		[Perl_do_open9]
    open(F, "true\ncd")

  close() on unopened filehandle %s	[Perl_do_close]
    $a = "fred";close("$a")

  tell() on closed filehandle		[Perl_do_tell]
    $a = "fred";$a = tell($a)

  seek() on closed filehandle		[Perl_do_seek]
    $a = "fred";$a = seek($a,1,1)

  sysseek() on closed filehandle	[Perl_do_sysseek]
    $a = "fred";$a = seek($a,1,1)

  warn(warn_uninit);			[Perl_do_print]
    print $a ;

  -x on closed filehandle %s 		[Perl_my_stat]
    close STDIN ; -x STDIN ;

  warn(warn_nl, "stat");		[Perl_my_stat]
    stat "ab\ncd"

  warn(warn_nl, "lstat");		[Perl_my_lstat]
    lstat "ab\ncd"

  Use of -l on filehandle %s		[Perl_my_lstat]

  Can't exec \"%s\": %s 		[Perl_do_aexec5]

  Can't exec \"%s\": %s 		[Perl_do_exec3]

  Filehandle %s opened only for output	[Perl_do_eof]
	my $a = eof STDOUT

  Mandatory Warnings ALL TODO
  ------------------
  Can't do inplace edit: %s is not a regular file	[Perl_nextargv]
     edit a directory

  Can't do inplace edit: %s would not be unique		[Perl_nextargv]
  Can't rename %s to %s: %s, skipping file		[Perl_nextargv]
  Can't rename %s to %s: %s, skipping file		[Perl_nextargv]
  Can't remove %s: %s, skipping file			[Perl_nextargv]
  Can't do inplace edit on %s: %s			[Perl_nextargv]
  

__END__
# doio.c [Perl_do_open9]
use warnings 'io' ;
open(F, '|'."$^X -e 1|");
close(F);
no warnings 'io' ;
open(G, '|'."$^X -e 1|");
close(G);
EXPECT
Can't open bidirectional pipe at - line 3.
########
# doio.c [Perl_do_open9]
use warnings 'io' ;
open(F, "|      ");
no warnings 'io' ;
open(G, "|      ");
EXPECT
Missing command in piped open at - line 3.
########
# doio.c [Perl_do_open9]
use warnings 'io' ;
open(F, "      |");
no warnings 'io' ;
open(G, "      |");
EXPECT
Missing command in piped open at - line 3.
########
# doio.c [Perl_do_open9]
use warnings 'io' ;
open(F, "<true\ncd");
open(G, "<truecd\n");
open(H, "<truecd\n\0");
no warnings 'io' ;
open(H, "<true\ncd");
open(I, "<truecd\n");
open(I, "<truecd\n\0");
EXPECT
Unsuccessful open on filename containing newline at - line 4.
Unsuccessful open on filename containing newline at - line 5.
########
# doio.c [Perl_do_close] <<TODO
use warnings 'unopened' ;
close "fred" ;
no warnings 'unopened' ;
close "joe" ;
EXPECT
close() on unopened filehandle fred at - line 3.
########
# doio.c [Perl_do_tell Perl_do_seek Perl_do_sysseek Perl_my_stat]
use warnings 'io' ;
close STDIN ;
tell(STDIN);
$a = seek(STDIN,1,1);
$a = sysseek(STDIN,1,1);
-x STDIN ;
stat(STDIN) ;
$a = "fred";
tell($a);
seek($a,1,1);
sysseek($a,1,1);
-x $a; # ok
stat($a); # ok
no warnings 'io' ;
close STDIN ;
tell(STDIN);
$a = seek(STDIN,1,1);
$a = sysseek(STDIN,1,1);
-x STDIN ;
stat(STDIN) ;
$a = "fred";
tell($a);
seek($a,1,1);
sysseek($a,1,1);
-x $a;
stat($a);
EXPECT
tell() on closed filehandle STDIN at - line 4.
seek() on closed filehandle STDIN at - line 5.
sysseek() on closed filehandle STDIN at - line 6.
-x on closed filehandle STDIN at - line 7.
stat() on closed filehandle STDIN at - line 8.
tell() on unopened filehandle at - line 10.
seek() on unopened filehandle at - line 11.
sysseek() on unopened filehandle at - line 12.
########
# doio.c [Perl_do_print]
use warnings 'uninitialized' ;
print $a ;
no warnings 'uninitialized' ;
print $b ;
EXPECT
Use of uninitialized value $a in print at - line 3.
########
# doio.c [Perl_my_stat Perl_my_lstat]
use warnings 'io' ;
stat "ab\ncd";
lstat "ab\ncd";
stat "abcd\n";
lstat "abcd\n";
stat "abcd\n\0";
lstat "abcd\n\0";
no warnings 'io' ;
stat "ab\ncd";
lstat "ab\ncd";
stat "abcd\n";
lstat "abcd\n";
stat "abcd\n\0";
lstat "abcd\n\0";
EXPECT
Unsuccessful stat on filename containing newline at - line 5.
Unsuccessful stat on filename containing newline at - line 6.
Unsuccessful stat on filename containing newline at - line 7.
Unsuccessful stat on filename containing newline at - line 8.
########
# doio.c [Perl_my_stat]
use warnings 'io';
-l STDIN;
-l $fh;
open $fh, $0 or die "# $!";
-l $fh;
no warnings 'io';
-l STDIN;
-l $fh;
close $fh;
EXPECT
Use of -l on filehandle STDIN at - line 3.
Use of -l on filehandle $fh at - line 6.
########
# doio.c [Perl_my_stat]
use utf8;
use open qw( :utf8 :std );
use warnings 'io';
-l ᶠᚻ;
no warnings 'io';
-l ᶠᚻ;
EXPECT
Use of -l on filehandle ᶠᚻ at - line 5.
########
# doio.c [Perl_do_aexec5]
use warnings 'io' ;
exec "lskdjfalksdjfdjfkls","" ;
no warnings 'io' ;
exec "lskdjfalksdjfdjfkls","" ;
EXPECT
OPTION regex
Statement unlikely to be reached at - line .+
	\(Maybe you meant system\(\) when you said exec\(\)\?\)
Can't exec "lskdjfalksdjfdjfkls": .+
########
# doio.c [Perl_do_exec3]
use warnings 'io' ;
exec "lskdjfalksdjfdjfkls", "abc" ;
no warnings 'io' ;
exec "lskdjfalksdjfdjfkls", "abc" ;
EXPECT
OPTION regex
Statement unlikely to be reached at - line .+
	\(Maybe you meant system\(\) when you said exec\(\)\?\)
Can't exec "lskdjfalksdjfdjfkls(:? abc)?": .+
########
# doio.c [win32_execvp]
use warnings 'exec' ;
exec $^X, "-e0" ;
EXPECT
########
# doio.c [Perl_nextargv]
$^W = 0 ;
# These happen to warn at different points within doio.c
# This will open read only, and then be caught by an explicit check:
my $filename = "./temp.dir" ;
# Whereas these two will fail to open:
my $dir0 = "./zero.dir" ;
# but files and directories have a different error message if they don't open:
my $file3 = "date|" ;
mkdir $filename, 0777 
  or die "Cannot create directory $filename: $!\n" ;
mkdir $dir0, 0
  or die "Cannot create directory dir0: $!\n" ;
{
    local (@@ARGV) = ($filename, $dir0, $file3) ;
    local ($^I) = "" ;
    my $x = <> ;
}
{
    no warnings 'inplace' ;
    local (@@ARGV) = ($filename, $dir0, $file3) ;
    local ($^I) = "" ;
    my $x = <> ;
}
{
    use warnings 'inplace' ;
    local (@@ARGV) = ($filename, $dir0, $file3) ;
    local ($^I) = "" ;
    my $x = <> ;
}
rmdir $filename ;
chmod 0777, $dir0 ;
rmdir $dir0 ;
EXPECT
OPTION regex
Can't do inplace edit: \./temp\.dir is not a regular file at - line 17\.
Can't do inplace edit: \./zero\.dir is not a regular file at - line 17\.
Can't open date\|: .*? at - line 17\.
Can't do inplace edit: \./temp\.dir is not a regular file at - line 29\.
Can't do inplace edit: \./zero\.dir is not a regular file at - line 29\.
Can't open date\|: .*? at - line 29\.
########
# doio.c [Perl_do_eof]
use warnings 'io' ;
my $a = eof STDOUT ;
no warnings 'io' ;
$a = eof STDOUT ;
EXPECT
Filehandle STDOUT opened only for output at - line 3.
########
# doio.c [Perl_do_openn]
use Config;
BEGIN {
    if ($Config{useperlio}) {
	print <<EOM;
SKIPPED
# warns only without perlio
EOM
	exit;
    }
}
use warnings 'io';
my $x = "foo";
open FOO, '>', \$x;
open BAR, '>&', \*STDOUT; # should not warn
no warnings 'io';
open FOO, '>', \$x;
EXPECT
Can't open a reference at - line 14.
########
# doio.c [Perl_do_openn]
use Config;
BEGIN {
    if (!$Config{useperlio}) {
	print <<EOM;
SKIPPED
# warns only with perlio
EOM
	exit;
    }
}
use warnings 'io' ;
close STDOUT;
open FH1, "../harness"; close FH1;
no warnings 'io' ;
open FH2, "../harness"; close FH2;
EXPECT
Filehandle STDOUT reopened as FH1 only for input at - line 14.
########
# doio.c [Perl_do_openn]
use Config;
use utf8;
use open qw( :utf8 :std );
BEGIN {
    if (!$Config{useperlio}) {
	print <<EOM;
SKIPPED
# warns only with perlio
EOM
	exit;
    }
}
use warnings 'io' ;
close STDOUT;
open ᶠᚻ1, "../harness"; close ᶠᚻ1;
no warnings 'io' ;
open ᶠᚻ2, "../harness"; close ᶠᚻ2;
EXPECT
Filehandle STDOUT reopened as ᶠᚻ1 only for input at - line 16.
########
# doio.c [Perl_do_openn]
use Config;
BEGIN {
    if (!$Config{useperlio}) {
	print <<EOM;
SKIPPED
# warns only with perlio
EOM
	exit;
    }
}
use warnings 'io' ;
close STDIN;
open my $fh1, ">doiowarn.tmp"; close $fh1;
no warnings 'io' ;
open my $fh2, ">doiowarn.tmp"; close $fh2;
unlink "doiowarn.tmp";
EXPECT
Filehandle STDIN reopened as $fh1 only for output at - line 14.
########
# doio.c [Perl_do_openn]
use Config;
use utf8;
use open qw( :utf8 :std );
BEGIN {
    if (!$Config{useperlio}) {
	print <<EOM;
SKIPPED
# warns only with perlio
EOM
	exit;
    }
}
use warnings 'io' ;
close STDIN;
open my $ᶠᚻ1, ">doiowarn.tmp"; close $ᶠᚻ1;
no warnings 'io' ;
open my $ᶠᚻ2, ">doiowarn.tmp"; close $ᶠᚻ2;
unlink "doiowarn.tmp";
EXPECT
Filehandle STDIN reopened as $ᶠᚻ1 only for output at - line 16.
########
# doio.c [Perl_do_openn]
use Config;
use utf8;
use open qw( :utf8 :std );
BEGIN {
    if (!$Config{useperlio}) {
	print <<EOM;
SKIPPED
# warns only with perlio
EOM
	exit;
    }
}
use warnings 'io' ;
close STDIN;
open ᶠᚻ1, ">doiowarn.tmp"; close ᶠᚻ1;
no warnings 'io' ;
open ᶠᚻ2, ">doiowarn.tmp"; close ᶠᚻ2;
unlink "doiowarn.tmp";
EXPECT
Filehandle STDIN reopened as ᶠᚻ1 only for output at - line 16.
########
open(my $i, "foo\0bar");
use warnings 'io';
open(my $i, "foo\0bar");
EXPECT
Invalid \0 character in pathname for open: foo\0bar at - line 3.
########
chmod(0, "foo\0bar");
use warnings 'io';
chmod(0, "foo\0bar");
EXPECT
Invalid \0 character in pathname for chmod: foo\0bar at - line 3.
########
unlink("foo\0bar", "foo\0bar2");
use warnings 'io';
unlink("foo\0bar", "foo\0bar2");
EXPECT
Invalid \0 character in pathname for unlink: foo\0bar at - line 3.
Invalid \0 character in pathname for unlink: foo\0bar2 at - line 3.
########
utime(-1, -1, "foo\0bar", "foo\0bar2");
use warnings 'io';
utime(-1, -1, "foo\0bar", "foo\0bar2");
EXPECT
Invalid \0 character in pathname for utime: foo\0bar at - line 3.
Invalid \0 character in pathname for utime: foo\0bar2 at - line 3.
########
my @@foo = glob "foo\0bar";
use warnings 'io';
my @@bar = glob "foo\0bar";
EXPECT
Invalid \0 character in pattern for glob: foo\0bar at - line 3.
@


1.1
log
@Initial revision
@
text
@d63 1
a63 1
open(F, '|'.($^O eq 'VMS' ? 'mcr ':'')."$^X -e 1|");
d66 1
a66 1
open(G, '|'.($^O eq 'VMS' ? 'mcr ':'')."$^X -e 1|");
d90 2
d93 3
a95 1
open(G, "<true\ncd");
d97 2
a98 1
Unsuccessful open on filename containing newline at - line 3.
d151 1
a151 1
Use of uninitialized value in print at - line 3.
d157 4
d164 9
a172 3
EXPECT
Unsuccessful stat on filename containing newline at - line 3.
Unsuccessful stat on filename containing newline at - line 4.
d188 10
a198 9
BEGIN {
    if ($^O eq 'MacOS') {
	print <<EOM;
SKIPPED
# no exec on Mac OS
EOM
	exit;
    }
}
d205 2
a209 9
BEGIN {
    if ($^O eq 'MacOS') {
	print <<EOM;
SKIPPED
# no exec on Mac OS
EOM
	exit;
    }
}
d216 2
a220 9
BEGIN {
    if ($^O eq 'MacOS') {
	print <<EOM;
SKIPPED
# no exec on Mac OS
EOM
	exit;
    }
}
d227 2
d230 4
d236 2
d239 1
a239 1
    local (@@ARGV) = ($filename) ;
d245 1
a245 1
    local (@@ARGV) = ($filename) ;
d251 1
a251 1
    local (@@ARGV) = ($filename) ;
d256 2
d259 7
a265 3
Can't do inplace edit: ./temp.dir is not a regular file at - line 9.
Can't do inplace edit: ./temp.dir is not a regular file at - line 21.

d294 136
@


1.1.1.1
log
@stock perl 5.8.0 from CPAN
@
text
@@


1.1.1.2
log
@perl 5.8.2 from CPAN
@
text
@a277 39
########
# doio.c [Perl_do_openn]
use Config;
BEGIN {
    if (!$Config{useperlio}) {
	print <<EOM;
SKIPPED
# warns only with perlio
EOM
	exit;
    }
}
use warnings 'io' ;
close STDOUT;
open FH1, "harness"; close FH1;
no warnings 'io' ;
open FH2, "harness"; close FH2;
EXPECT
Filehandle STDOUT reopened as FH1 only for input at - line 14.
########
# doio.c [Perl_do_openn]
use Config;
BEGIN {
    if (!$Config{useperlio}) {
	print <<EOM;
SKIPPED
# warns only with perlio
EOM
	exit;
    }
}
use warnings 'io' ;
close STDIN;
open my $fh1, ">doiowarn.tmp"; close $fh1;
no warnings 'io' ;
open my $fh2, ">doiowarn.tmp"; close $fh2;
unlink "doiowarn.tmp";
EXPECT
Filehandle STDIN reopened as $fh1 only for output at - line 14.
@


1.1.1.3
log
@import perl 5.10.0 from CPAN
@
text
@d63 1
a63 1
open(F, '|'."$^X -e 1|");
d66 1
a66 1
open(G, '|'."$^X -e 1|");
d146 1
a146 1
Use of uninitialized value $a in print at - line 3.
@


1.1.1.4
log
@Perl 5.12.2 from CPAN
@
text
@d174 9
d192 9
d210 9
@


1.1.1.5
log
@import perl 5.16.3 from CPAN - worked on by Andrew Fresh and myself
@
text
@d162 3
d167 2
d171 1
a171 10
########
# doio.c [Perl_my_stat]
use utf8;
use open qw( :utf8 :std );
use warnings 'io';
-l ᶠᚻ;
no warnings 'io';
-l ᶠᚻ;
EXPECT
Use of -l on filehandle ᶠᚻ at - line 5.
d265 1
a265 1
open FH1, "../harness"; close FH1;
d267 1
a267 1
open FH2, "../harness"; close FH2;
a272 21
use utf8;
use open qw( :utf8 :std );
BEGIN {
    if (!$Config{useperlio}) {
	print <<EOM;
SKIPPED
# warns only with perlio
EOM
	exit;
    }
}
use warnings 'io' ;
close STDOUT;
open ᶠᚻ1, "../harness"; close ᶠᚻ1;
no warnings 'io' ;
open ᶠᚻ2, "../harness"; close ᶠᚻ2;
EXPECT
Filehandle STDOUT reopened as ᶠᚻ1 only for input at - line 16.
########
# doio.c [Perl_do_openn]
use Config;
a289 44
########
# doio.c [Perl_do_openn]
use Config;
use utf8;
use open qw( :utf8 :std );
BEGIN {
    if (!$Config{useperlio}) {
	print <<EOM;
SKIPPED
# warns only with perlio
EOM
	exit;
    }
}
use warnings 'io' ;
close STDIN;
open my $ᶠᚻ1, ">doiowarn.tmp"; close $ᶠᚻ1;
no warnings 'io' ;
open my $ᶠᚻ2, ">doiowarn.tmp"; close $ᶠᚻ2;
unlink "doiowarn.tmp";
EXPECT
Filehandle STDIN reopened as $ᶠᚻ1 only for output at - line 16.
########
# doio.c [Perl_do_openn]
use Config;
use utf8;
use open qw( :utf8 :std );
BEGIN {
    if (!$Config{useperlio}) {
	print <<EOM;
SKIPPED
# warns only with perlio
EOM
	exit;
    }
}
use warnings 'io' ;
close STDIN;
open ᶠᚻ1, ">doiowarn.tmp"; close ᶠᚻ1;
no warnings 'io' ;
open ᶠᚻ2, ">doiowarn.tmp"; close ᶠᚻ2;
unlink "doiowarn.tmp";
EXPECT
Filehandle STDIN reopened as ᶠᚻ1 only for output at - line 16.
@


1.1.1.6
log
@Import perl-5.18.2

OK espie@@ sthen@@ deraadt@@
@
text
@a161 3
-l $fh;
open $fh, $0 or die "# $!";
-l $fh;
a163 2
-l $fh;
close $fh;
a165 1
Use of -l on filehandle $fh at - line 6.
@


1.1.1.7
log
@Import perl-5.20.1
@
text
@a189 2
Statement unlikely to be reached at - line .+
	\(Maybe you meant system\(\) when you said exec\(\)\?\)
a198 2
Statement unlikely to be reached at - line .+
	\(Maybe you meant system\(\) when you said exec\(\)\?\)
a207 2
# These happen to warn at different points within doio.c
# This will open read only, and then be caught by an explicit check:
a208 4
# Whereas these two will fail to open:
my $dir0 = "./zero.dir" ;
# but files and directories have a different error message if they don't open:
my $file3 = "date|" ;
a210 2
mkdir $dir0, 0
  or die "Cannot create directory dir0: $!\n" ;
d212 1
a212 1
    local (@@ARGV) = ($filename, $dir0, $file3) ;
d218 1
a218 1
    local (@@ARGV) = ($filename, $dir0, $file3) ;
d224 1
a224 1
    local (@@ARGV) = ($filename, $dir0, $file3) ;
a228 2
chmod 0777, $dir0 ;
rmdir $dir0 ;
d230 3
a232 7
OPTION regex
Can't do inplace edit: \./temp\.dir is not a regular file at - line 17\.
Can't do inplace edit: \./zero\.dir is not a regular file at - line 17\.
Can't open date\|: .*? at - line 17\.
Can't do inplace edit: \./temp\.dir is not a regular file at - line 29\.
Can't do inplace edit: \./zero\.dir is not a regular file at - line 29\.
Can't open date\|: .*? at - line 29\.
a364 32
########
open(my $i, "foo\0bar");
use warnings 'io';
open(my $i, "foo\0bar");
EXPECT
Invalid \0 character in pathname for open: foo\0bar at - line 3.
########
chmod(0, "foo\0bar");
use warnings 'io';
chmod(0, "foo\0bar");
EXPECT
Invalid \0 character in pathname for chmod: foo\0bar at - line 3.
########
unlink("foo\0bar", "foo\0bar2");
use warnings 'io';
unlink("foo\0bar", "foo\0bar2");
EXPECT
Invalid \0 character in pathname for unlink: foo\0bar at - line 3.
Invalid \0 character in pathname for unlink: foo\0bar2 at - line 3.
########
utime(-1, -1, "foo\0bar", "foo\0bar2");
use warnings 'io';
utime(-1, -1, "foo\0bar", "foo\0bar2");
EXPECT
Invalid \0 character in pathname for utime: foo\0bar at - line 3.
Invalid \0 character in pathname for utime: foo\0bar2 at - line 3.
########
my @@foo = glob "foo\0bar";
use warnings 'io';
my @@bar = glob "foo\0bar";
EXPECT
Invalid \0 character in pattern for glob: foo\0bar at - line 3.
@


1.1.1.8
log
@Import perl-5.24.2
@
text
@a89 2
open(G, "<truecd\n");
open(H, "<truecd\n\0");
d91 1
a91 3
open(H, "<true\ncd");
open(I, "<truecd\n");
open(I, "<truecd\n\0");
d93 1
a93 2
Unsuccessful open on filename containing newline at - line 4.
Unsuccessful open on filename containing newline at - line 5.
a151 4
stat "abcd\n";
lstat "abcd\n";
stat "abcd\n\0";
lstat "abcd\n\0";
a154 4
stat "abcd\n";
lstat "abcd\n";
stat "abcd\n\0";
lstat "abcd\n\0";
d156 2
a157 4
Unsuccessful stat on filename containing newline at - line 5.
Unsuccessful stat on filename containing newline at - line 6.
Unsuccessful stat on filename containing newline at - line 7.
Unsuccessful stat on filename containing newline at - line 8.
@


