head	1.2;
access;
symbols
	OPENBSD_6_1:1.2.0.2
	OPENBSD_6_1_BASE:1.2
	OPENBSD_6_0:1.1.1.4.0.10
	OPENBSD_6_0_BASE:1.1.1.4
	OPENBSD_5_9:1.1.1.4.0.4
	OPENBSD_5_9_BASE:1.1.1.4
	OPENBSD_5_8:1.1.1.4.0.6
	OPENBSD_5_8_BASE:1.1.1.4
	PERL_5_20_2:1.1.1.4
	OPENBSD_5_7:1.1.1.4.0.2
	OPENBSD_5_7_BASE:1.1.1.4
	PERL_5_20_1:1.1.1.4
	OPENBSD_5_6:1.1.1.3.0.22
	OPENBSD_5_6_BASE:1.1.1.3
	PERL_5_18_2:1.1.1.3
	PERL:1.1.1
	OPENBSD_5_5:1.1.1.3.0.20
	OPENBSD_5_5_BASE:1.1.1.3
	OPENBSD_5_4:1.1.1.3.0.16
	OPENBSD_5_4_BASE:1.1.1.3
	PERL_5_16_3:1.1.1.3
	OPENBSD_5_3:1.1.1.3.0.14
	OPENBSD_5_3_BASE:1.1.1.3
	OPENBSD_5_2:1.1.1.3.0.12
	OPENBSD_5_2_BASE:1.1.1.3
	OPENBSD_5_1_BASE:1.1.1.3
	OPENBSD_5_1:1.1.1.3.0.10
	OPENBSD_5_0:1.1.1.3.0.8
	OPENBSD_5_0_BASE:1.1.1.3
	OPENBSD_4_9:1.1.1.3.0.6
	OPENBSD_4_9_BASE:1.1.1.3
	PERL_5_12_2:1.1.1.3
	OPENBSD_4_8:1.1.1.3.0.4
	OPENBSD_4_8_BASE:1.1.1.3
	OPENBSD_4_7:1.1.1.3.0.2
	OPENBSD_4_7_BASE:1.1.1.3
	PERL_5_10_1:1.1.1.3
	OPENBSD_4_6:1.1.1.2.0.6
	OPENBSD_4_6_BASE:1.1.1.2
	OPENBSD_4_5:1.1.1.2.0.2
	OPENBSD_4_5_BASE:1.1.1.2
	PERL_5_10_0:1.1.1.2
	OPENBSD_4_4:1.1.1.1.0.24
	OPENBSD_4_4_BASE:1.1.1.1
	OPENBSD_4_3:1.1.1.1.0.22
	OPENBSD_4_3_BASE:1.1.1.1
	OPENBSD_4_2:1.1.1.1.0.20
	OPENBSD_4_2_BASE:1.1.1.1
	OPENBSD_4_1:1.1.1.1.0.18
	OPENBSD_4_1_BASE:1.1.1.1
	OPENBSD_4_0:1.1.1.1.0.16
	OPENBSD_4_0_BASE:1.1.1.1
	PERL_5_8_8:1.1.1.1
	OPENBSD_3_9:1.1.1.1.0.14
	OPENBSD_3_9_BASE:1.1.1.1
	OPENBSD_3_8:1.1.1.1.0.12
	OPENBSD_3_8_BASE:1.1.1.1
	OPENBSD_3_7:1.1.1.1.0.10
	OPENBSD_3_7_BASE:1.1.1.1
	PERL_5_8_6:1.1.1.1
	OPENBSD_3_6:1.1.1.1.0.8
	OPENBSD_3_6_BASE:1.1.1.1
	PERL_5_8_5:1.1.1.1
	PERL_5_8_3:1.1.1.1
	OPENBSD_3_5:1.1.1.1.0.6
	OPENBSD_3_5_BASE:1.1.1.1
	PERL_5_8_2:1.1.1.1
	OPENBSD_3_4:1.1.1.1.0.4
	OPENBSD_3_4_BASE:1.1.1.1
	OPENBSD_3_3:1.1.1.1.0.2
	OPENBSD_3_3_BASE:1.1.1.1
	PERL_5_8_0:1.1.1.1
	CPAN:1.1.1;
locks; strict;
comment	@# @;
expand	@o@;


1.2
date	2017.02.05.00.32.20;	author afresh1;	state Exp;
branches;
next	1.1;
commitid	cxJ08BvJA9Pt2PTM;

1.1
date	2002.10.27.22.15.10;	author millert;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	2002.10.27.22.15.10;	author millert;	state Exp;
branches;
next	1.1.1.2;

1.1.1.2
date	2008.09.29.17.18.59;	author millert;	state Exp;
branches;
next	1.1.1.3;

1.1.1.3
date	2009.10.12.18.10.43;	author millert;	state Exp;
branches;
next	1.1.1.4;

1.1.1.4
date	2014.11.17.20.53.17;	author afresh1;	state Exp;
branches;
next	;
commitid	B31cAbBIXiCqnL97;


desc
@@


1.2
log
@Fix merge issues, remove excess files - match perl-5.24.1 dist
@
text
@Check FATAL functionality

__END__

# Check compile time warning
use warnings FATAL => 'syntax' ;
{
    no warnings ;
    $a =+ 1 ;
}
$a =+ 1 ;
print STDERR "The End.\n" ;
EXPECT
Reversed += operator at - line 8.
########

# Check compile time warning
use warnings FATAL => 'all' ;
{
    no warnings ;
    my $a =+ 1 ;
}
my $a =+ 1 ;
print STDERR "The End.\n" ;
EXPECT
Reversed += operator at - line 8.
########

# Check runtime scope of pragma
use warnings FATAL => 'uninitialized' ;
{
    no warnings ;
    my $b ; chop $b ;
}
my $b ; chop $b ;
print STDERR "The End.\n" ;
EXPECT
Use of uninitialized value $b in scalar chop at - line 8.
########

# Check runtime scope of pragma
use warnings FATAL => 'all' ;
{
    no warnings ;
    my $b ; chop $b ;
}
my $b ; chop $b ;
print STDERR "The End.\n" ;
EXPECT
Use of uninitialized value $b in scalar chop at - line 8.
########

# Check runtime scope of pragma
no warnings ;
{
    use warnings FATAL => 'uninitialized' ;
    $a = sub { my $b ; chop $b ; }
}
&$a ;
print STDERR "The End.\n" ;
EXPECT
Use of uninitialized value $b in scalar chop at - line 6.
########

# Check runtime scope of pragma
no warnings ;
{
    use warnings FATAL => 'all' ;
    $a = sub { my $b ; chop $b ; }
}
&$a ;
print STDERR "The End.\n" ;
EXPECT
Use of uninitialized value $b in scalar chop at - line 6.
########

--FILE-- abc
$a =+ 1 ;
1;
--FILE-- 
use warnings FATAL => 'syntax' ;
require "./abc";
EXPECT

########

--FILE-- abc
use warnings FATAL => 'syntax' ;
1;
--FILE-- 
require "./abc";
$a =+ 1 ;
EXPECT

########

--FILE-- abc
use warnings 'syntax' ;
$a =+ 1 ;
1;
--FILE-- 
use warnings FATAL => 'uninitialized' ;
require "./abc";
my $a ; chop $a ;
print STDERR "The End.\n" ;
EXPECT
Reversed += operator at ./abc line 2.
Use of uninitialized value $a in scalar chop at - line 3.
########

--FILE-- abc.pm
use warnings 'syntax' ;
$a =+ 1 ;
1;
--FILE-- 
use warnings FATAL => 'uninitialized' ;
use abc;
my $a ; chop $a ;
print STDERR "The End.\n" ;
EXPECT
Reversed += operator at abc.pm line 2.
Use of uninitialized value $a in scalar chop at - line 3.
########

# Check scope of pragma with eval
no warnings ;
eval {
    use warnings FATAL => 'uninitialized' ;
    my $b ; chop $b ;
}; print STDERR "-- $@@" ;
my $b ; chop $b ;
print STDERR "The End.\n" ;
EXPECT
-- Use of uninitialized value $b in scalar chop at - line 6.
The End.
########

# Check scope of pragma with eval
use warnings FATAL => 'uninitialized' ;
eval {
    my $b ; chop $b ;
}; print STDERR "-- $@@" ;
my $b ; chop $b ;
print STDERR "The End.\n" ;
EXPECT
-- Use of uninitialized value $b in scalar chop at - line 5.
Use of uninitialized value $b in scalar chop at - line 7.
########

# Check scope of pragma with eval
use warnings FATAL => 'uninitialized' ;
eval {
    no warnings ;
    my $b ; chop $b ;
}; print STDERR $@@ ;
my $b ; chop $b ;
print STDERR "The End.\n" ;
EXPECT
Use of uninitialized value $b in scalar chop at - line 8.
########

# Check scope of pragma with eval
no warnings ;
eval {
    use warnings FATAL => 'syntax' ;
    $a =+ 1 ;
}; print STDERR "-- $@@" ;
$a =+ 1 ;
print STDERR "The End.\n" ;
EXPECT
Reversed += operator at - line 6.
########

# Check scope of pragma with eval
use warnings FATAL => 'syntax' ;
eval {
    $a =+ 1 ;
}; print STDERR "-- $@@" ;
$a =+ 1 ;
print STDERR "The End.\n" ;
EXPECT
Reversed += operator at - line 5.
########

# Check scope of pragma with eval
use warnings FATAL => 'syntax' ;
eval {
    no warnings ;
    $a =+ 1 ;
}; print STDERR $@@ ;
$a =+ 1 ;
print STDERR "The End.\n" ;
EXPECT
Reversed += operator at - line 8.
########

# Check scope of pragma with eval
no warnings ;
eval {
    use warnings FATAL => 'syntax' ;
}; print STDERR $@@ ;
$a =+ 1 ;
print STDERR "The End.\n" ;
EXPECT
The End.
########

# Check scope of pragma with eval
no warnings ;
eval q[ 
    use warnings FATAL => 'uninitialized' ;
    my $b ; chop $b ;
]; print STDERR "-- $@@";
my $b ; chop $b ;
print STDERR "The End.\n" ;
EXPECT
-- Use of uninitialized value $b in scalar chop at (eval 1) line 3.
The End.
########

# Check scope of pragma with eval
use warnings FATAL => 'uninitialized' ;
eval '
    my $b ; chop $b ;
'; print STDERR "-- $@@" ;
my $b ; chop $b ;
print STDERR "The End.\n" ;
EXPECT
-- Use of uninitialized value $b in scalar chop at (eval 1) line 2.
Use of uninitialized value $b in scalar chop at - line 7.
########

# Check scope of pragma with eval
use warnings FATAL => 'uninitialized' ;
eval '
    no warnings ;
    my $b ; chop $b ;
'; print STDERR $@@ ;
my $b ; chop $b ;
print STDERR "The End.\n" ;
EXPECT
Use of uninitialized value $b in scalar chop at - line 8.
########

# Check scope of pragma with eval
no warnings ;
eval q[ 
    use warnings FATAL => 'syntax' ;
    $a =+ 1 ;
]; print STDERR "-- $@@";
$a =+ 1 ;
print STDERR "The End.\n" ;
EXPECT
-- Reversed += operator at (eval 1) line 3.
The End.
########

# Check scope of pragma with eval
use warnings FATAL => 'syntax' ;
eval '
    $a =+ 1 ;
'; print STDERR "-- $@@";
print STDERR "The End.\n" ;
EXPECT
-- Reversed += operator at (eval 1) line 2.
The End.
########

# Check scope of pragma with eval
use warnings FATAL => 'syntax' ;
eval '
    no warnings ;
    $a =+ 1 ;
'; print STDERR "-- $@@";
$a =+ 1 ;
print STDERR "The End.\n" ;
EXPECT
Reversed += operator at - line 8.
########
# TODO ? !$Config{usethreads} && $::UTF8 && ($ENV{PERL_DESTRUCT_LEVEL} || 0) > 1 ? "Parser leaks OPs, which leak shared hash keys" : ''

use warnings 'void' ;

time ;

{
    use warnings FATAL => qw(void) ;
    $a = "abc";
    length $a ;
}

join "", 1,2,3 ;

print "done\n" ;
EXPECT
Useless use of time in void context at - line 4.
Useless use of length in void context at - line 9.
########
# TODO ? !$Config{usethreads} && $::UTF8 && ($ENV{PERL_DESTRUCT_LEVEL} || 0) > 1 ? "Parser leaks OPs, which leak shared hash keys" : ''

use warnings ;

time ;

{
    use warnings FATAL => qw(void) ;
    $a = "abc";
    length $a ;
}

join "", 1,2,3 ;

print "done\n" ;
EXPECT
Useless use of time in void context at - line 4.
Useless use of length in void context at - line 9.
########

use warnings FATAL => 'all';
{
    no warnings;
    my $b ; chop $b;
    {
        use warnings ;
        my $b ; chop $b;
    }
}
my $b ; chop $b;
print STDERR "The End.\n" ;
EXPECT
Use of uninitialized value $b in scalar chop at - line 8.
Use of uninitialized value $b in scalar chop at - line 11.
########

use warnings FATAL => 'all';
{
    no warnings FATAL => 'all';
    my $b ; chop $b;
    {
        use warnings ;
        my $b ; chop $b;
    }
}
my $b ; chop $b;
print STDERR "The End.\n" ;
EXPECT
Use of uninitialized value $b in scalar chop at - line 8.
Use of uninitialized value $b in scalar chop at - line 11.
########

use warnings FATAL => 'all';
{
    no warnings 'syntax';
    {
        use warnings ;
        my $b ; chop $b;
    }
}
my $b ; chop $b;
print STDERR "The End.\n" ;
EXPECT
Use of uninitialized value $b in scalar chop at - line 7.
########

use warnings FATAL => 'syntax', NONFATAL => 'void' ;

$a = "abc";
length $a;
print STDERR "The End.\n" ;
EXPECT
Useless use of length in void context at - line 5.
The End.
########

use warnings FATAL => 'all', NONFATAL => 'void' ;

$a = "abc";
length $a;
print STDERR "The End.\n" ;
EXPECT
Useless use of length in void context at - line 5.
The End.
########

use warnings FATAL => 'all', NONFATAL => 'void' ;

my $a ; chomp $a;

$b = "abc" ;
length $b;
print STDERR "The End.\n" ;
EXPECT
Useless use of length in void context at - line 7.
Use of uninitialized value $a in scalar chomp at - line 4.
########

use warnings FATAL => 'void', NONFATAL => 'void' ;
$a = "abc";
length $a;
print STDERR "The End.\n" ;
EXPECT
Useless use of length in void context at - line 4.
The End.
########
# TODO ? !$Config{usethreads} && $::UTF8 && ($ENV{PERL_DESTRUCT_LEVEL} || 0) > 1 ? "Parser leaks OPs, which leak shared hash keys" : ''

use warnings NONFATAL => 'void', FATAL => 'void' ;
$a = "abc";
length $a;
print STDERR "The End.\n" ;
EXPECT
Useless use of length in void context at - line 4.
########

use warnings FATAL => 'all', NONFATAL => 'io';
no warnings 'once';

open(F, "<true\ncd");
open(G, "<truecd\n");
open(H, "<truecd\n\0");
close "fred" ;
print STDERR "The End.\n" ;
EXPECT
Unsuccessful open on filename containing newline at - line 6.
Unsuccessful open on filename containing newline at - line 7.
close() on unopened filehandle fred at - line 8.
The End.
########

use warnings FATAL => 'all', NONFATAL => 'io', FATAL => 'unopened' ;
no warnings 'once';

open(F, "<truecd\n");
close "fred" ;
print STDERR "The End.\n" ;
EXPECT
Unsuccessful open on filename containing newline at - line 5.
close() on unopened filehandle fred at - line 6.
########

# 'use warnings' test as the basis for the following tests
use warnings ;
my $a = oct "7777777777777777777777777777777777778" ;
my $b =+ 1 ;
my $c ; chop $c ;
print STDERR "The End.\n" ;
EXPECT
Reversed += operator at - line 5.
Integer overflow in octal number at - line 4.
Illegal octal digit '8' ignored at - line 4.
Octal number > 037777777777 non-portable at - line 4.
Use of uninitialized value $c in scalar chop at - line 6.
The End.
########

# 'use warnings NONFATAL=>"all"' should be the same as 'use warnings'
use warnings NONFATAL=>"all" ;
my $a = oct "7777777777777777777777777777777777778" ;
my $b =+ 1 ;
my $c ; chop $c ;
print STDERR "The End.\n" ;
EXPECT
Reversed += operator at - line 5.
Integer overflow in octal number at - line 4.
Illegal octal digit '8' ignored at - line 4.
Octal number > 037777777777 non-portable at - line 4.
Use of uninitialized value $c in scalar chop at - line 6.
The End.
########

# 'use warnings "NONFATAL"' should be the same as 'use warnings' [perl #120977]
use warnings "NONFATAL" ;
my $a = oct "7777777777777777777777777777777777778" ;
my $b =+ 1 ;
my $c ; chop $c ;
print STDERR "The End.\n" ;
EXPECT
Reversed += operator at - line 5.
Integer overflow in octal number at - line 4.
Illegal octal digit '8' ignored at - line 4.
Octal number > 037777777777 non-portable at - line 4.
Use of uninitialized value $c in scalar chop at - line 6.
The End.
########

# 'use warnings "FATAL"' should be the same as 'use warnings FATAL=>"all"' [perl #120977]
use warnings "FATAL" ;
{
    no warnings ;
    my $a =+ 1 ;
}
my $a =+ 1 ;
print STDERR "The End.\n" ;
EXPECT
Reversed += operator at - line 8.
########

# 'use warnings "FATAL"' should be the same as 'use warnings FATAL=>"all"' [perl #120977]
use warnings "FATAL" ;
{
    no warnings ;
    my $a = oct "7777777777777777777777777777777777778" ;
}
my $a = oct "7777777777777777777777777777777777778" ;
print STDERR "The End.\n" ;
EXPECT
Integer overflow in octal number at - line 8.
########

# 'no warnings FATAL=>"all"' should be the same as 'no warnings'
use warnings ;
{
    no warnings FATAL=>"all" ;
    my $a = oct "7777777777777777777777777777777777778" ;
    my $b =+ 1 ;
    my $c ; chop $c ;
}
my $a =+ 1 ;
print STDERR "The End.\n" ;
EXPECT
Reversed += operator at - line 10.
The End.
########

# 'no warnings "FATAL"' should be the same as 'no warnings' [perl #120977]
use warnings ;
{
    no warnings "FATAL" ;
    my $a = oct "7777777777777777777777777777777777778" ;
    my $b =+ 1 ;
    my $c ; chop $c ;
}
my $a =+ 1 ;
print STDERR "The End.\n" ;
EXPECT
Reversed += operator at - line 10.
The End.
########

# fatal warnings shouldn't hide parse errors [perl #122966]
use warnings FATAL => 'all';
if (1 {
    my $x = "hello";
    print $x, "\n";
}
EXPECT
syntax error at - line 4, near "1 {"
"my" variable $x masks earlier declaration in same statement at - line 6.
syntax error at - line 7, near "}"
Execution of - aborted due to compilation errors.
########

# fatal warnings in DESTROY should be made non-fatal [perl #123398]
# This test will blow up your memory with SEGV without the patch
package Foo;
use strict; use utf8; use warnings FATAL => 'all';
sub new {
    return bless{ 'field' => undef }, 'Foo';
}
sub DESTROY {
    my $self = shift;
    $self->{'field'}->missing_method;
}
package main;
my $foo = new Foo;
undef($foo);
EXPECT
	(in cleanup) Can't call method "missing_method" on an undefined value at - line 11.
@


1.1
log
@Initial revision
@
text
@d38 1
a38 1
Use of uninitialized value in scalar chop at - line 8.
d50 1
a50 1
Use of uninitialized value in scalar chop at - line 8.
d62 1
a62 1
Use of uninitialized value in scalar chop at - line 6.
d74 1
a74 1
Use of uninitialized value in scalar chop at - line 6.
d108 1
a108 1
Use of uninitialized value in scalar chop at - line 3.
d122 1
a122 1
Use of uninitialized value in scalar chop at - line 3.
d134 1
a134 1
-- Use of uninitialized value in scalar chop at - line 6.
d146 2
a147 2
-- Use of uninitialized value in scalar chop at - line 5.
Use of uninitialized value in scalar chop at - line 7.
d159 1
a159 1
Use of uninitialized value in scalar chop at - line 8.
d217 1
a217 1
-- Use of uninitialized value in scalar chop at (eval 1) line 3.
d229 2
a230 2
-- Use of uninitialized value in scalar chop at (eval 1) line 2.
Use of uninitialized value in scalar chop at - line 7.
d242 1
a242 1
Use of uninitialized value in scalar chop at - line 8.
d280 1
d288 2
a289 1
    length "abc" ;
d297 1
a297 1
Useless use of length in void context at - line 8.
d299 1
d307 2
a308 1
    length "abc" ;
d316 1
a316 1
Useless use of length in void context at - line 8.
d331 2
a332 2
Use of uninitialized value in scalar chop at - line 8.
Use of uninitialized value in scalar chop at - line 11.
d347 2
a348 2
Use of uninitialized value in scalar chop at - line 8.
Use of uninitialized value in scalar chop at - line 11.
d362 1
a362 1
Use of uninitialized value in scalar chop at - line 7.
d367 2
a368 1
length "abc";
d371 1
a371 1
Useless use of length in void context at - line 4.
d377 2
a378 1
length "abc";
d381 1
a381 1
Useless use of length in void context at - line 4.
d388 3
a390 1
length "abc";
d393 2
a394 2
Useless use of length in void context at - line 5.
Use of uninitialized value in scalar chomp at - line 4.
d398 2
a399 2

length "abc";
d405 1
d408 2
a409 2

length "abc";
d419 2
d424 3
a426 2
Unsuccessful open on filename containing newline at - line 5.
close() on unopened filehandle fred at - line 6.
d433 1
a433 1
open(F, "<true\ncd");
d439 130
@


1.1.1.1
log
@stock perl 5.8.0 from CPAN
@
text
@@


1.1.1.2
log
@import perl 5.10.0 from CPAN
@
text
@d38 1
a38 1
Use of uninitialized value $b in scalar chop at - line 8.
d50 1
a50 1
Use of uninitialized value $b in scalar chop at - line 8.
d62 1
a62 1
Use of uninitialized value $b in scalar chop at - line 6.
d74 1
a74 1
Use of uninitialized value $b in scalar chop at - line 6.
d108 1
a108 1
Use of uninitialized value $a in scalar chop at - line 3.
d122 1
a122 1
Use of uninitialized value $a in scalar chop at - line 3.
d134 1
a134 1
-- Use of uninitialized value $b in scalar chop at - line 6.
d146 2
a147 2
-- Use of uninitialized value $b in scalar chop at - line 5.
Use of uninitialized value $b in scalar chop at - line 7.
d159 1
a159 1
Use of uninitialized value $b in scalar chop at - line 8.
d217 1
a217 1
-- Use of uninitialized value $b in scalar chop at (eval 1) line 3.
d229 2
a230 2
-- Use of uninitialized value $b in scalar chop at (eval 1) line 2.
Use of uninitialized value $b in scalar chop at - line 7.
d242 1
a242 1
Use of uninitialized value $b in scalar chop at - line 8.
a279 1
# TODO ? !$Config{usethreads} && $::UTF8 && ($ENV{PERL_DESTRUCT_LEVEL} || 0) > 1 ? "Parser leaks OPs, which leak shared hash keys" : ''
a296 1
# TODO ? !$Config{usethreads} && $::UTF8 && ($ENV{PERL_DESTRUCT_LEVEL} || 0) > 1 ? "Parser leaks OPs, which leak shared hash keys" : ''
d327 2
a328 2
Use of uninitialized value $b in scalar chop at - line 8.
Use of uninitialized value $b in scalar chop at - line 11.
d343 2
a344 2
Use of uninitialized value $b in scalar chop at - line 8.
Use of uninitialized value $b in scalar chop at - line 11.
d358 1
a358 1
Use of uninitialized value $b in scalar chop at - line 7.
d386 1
a386 1
Use of uninitialized value $a in scalar chomp at - line 4.
a396 1
# TODO ? !$Config{usethreads} && $::UTF8 && ($ENV{PERL_DESTRUCT_LEVEL} || 0) > 1 ? "Parser leaks OPs, which leak shared hash keys" : ''
@


1.1.1.3
log
@import perl 5.10.1
@
text
@d288 1
a288 2
    $a = "abc";
    length $a ;
d296 1
a296 1
Useless use of length in void context at - line 9.
d306 1
a306 2
    $a = "abc";
    length $a ;
d314 1
a314 1
Useless use of length in void context at - line 9.
d365 1
a365 2
$a = "abc";
length $a;
d368 1
a368 1
Useless use of length in void context at - line 5.
d374 1
a374 2
$a = "abc";
length $a;
d377 1
a377 1
Useless use of length in void context at - line 5.
d384 1
a384 3

$b = "abc" ;
length $b;
d387 1
a387 1
Useless use of length in void context at - line 7.
d392 2
a393 2
$a = "abc";
length $a;
d402 2
a403 2
$a = "abc";
length $a;
@


1.1.1.4
log
@Import perl-5.20.1
@
text
@a435 99
########

# 'use warnings' test as the basis for the following tests
use warnings ;
my $a = oct "7777777777777777777777777777777777778" ;
my $b =+ 1 ;
my $c ; chop $c ;
print STDERR "The End.\n" ;
EXPECT
Reversed += operator at - line 5.
Integer overflow in octal number at - line 4.
Illegal octal digit '8' ignored at - line 4.
Octal number > 037777777777 non-portable at - line 4.
Use of uninitialized value $c in scalar chop at - line 6.
The End.
########

# 'use warnings NONFATAL=>"all"' should be the same as 'use warnings'
use warnings NONFATAL=>"all" ;
my $a = oct "7777777777777777777777777777777777778" ;
my $b =+ 1 ;
my $c ; chop $c ;
print STDERR "The End.\n" ;
EXPECT
Reversed += operator at - line 5.
Integer overflow in octal number at - line 4.
Illegal octal digit '8' ignored at - line 4.
Octal number > 037777777777 non-portable at - line 4.
Use of uninitialized value $c in scalar chop at - line 6.
The End.
########

# 'use warnings "NONFATAL"' should be the same as 'use warnings' [perl #120977]
use warnings "NONFATAL" ;
my $a = oct "7777777777777777777777777777777777778" ;
my $b =+ 1 ;
my $c ; chop $c ;
print STDERR "The End.\n" ;
EXPECT
Reversed += operator at - line 5.
Integer overflow in octal number at - line 4.
Illegal octal digit '8' ignored at - line 4.
Octal number > 037777777777 non-portable at - line 4.
Use of uninitialized value $c in scalar chop at - line 6.
The End.
########

# 'use warnings "FATAL"' should be the same as 'use warnings FATAL=>"all"' [perl #120977]
use warnings "FATAL" ;
{
    no warnings ;
    my $a =+ 1 ;
}
my $a =+ 1 ;
print STDERR "The End.\n" ;
EXPECT
Reversed += operator at - line 8.
########

# 'use warnings "FATAL"' should be the same as 'use warnings FATAL=>"all"' [perl #120977]
use warnings "FATAL" ;
{
    no warnings ;
    my $a = oct "7777777777777777777777777777777777778" ;
}
my $a = oct "7777777777777777777777777777777777778" ;
print STDERR "The End.\n" ;
EXPECT
Integer overflow in octal number at - line 8.
########

# 'no warnings FATAL=>"all"' should be the same as 'no warnings'
use warnings ;
{
    no warnings FATAL=>"all" ;
    my $a = oct "7777777777777777777777777777777777778" ;
    my $b =+ 1 ;
    my $c ; chop $c ;
}
my $a =+ 1 ;
print STDERR "The End.\n" ;
EXPECT
Reversed += operator at - line 10.
The End.
########

# 'no warnings "FATAL"' should be the same as 'no warnings' [perl #120977]
use warnings ;
{
    no warnings "FATAL" ;
    my $a = oct "7777777777777777777777777777777777778" ;
    my $b =+ 1 ;
    my $c ; chop $c ;
}
my $a =+ 1 ;
print STDERR "The End.\n" ;
EXPECT
Reversed += operator at - line 10.
The End.
@


