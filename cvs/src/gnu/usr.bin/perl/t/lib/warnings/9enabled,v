head	1.1;
branch	1.1.1;
access;
symbols
	OPENBSD_6_2:1.1.1.5.0.20
	OPENBSD_6_2_BASE:1.1.1.5
	PERL_5_24_2:1.1.1.5
	OPENBSD_6_1:1.1.1.5.0.18
	OPENBSD_6_1_BASE:1.1.1.5
	OPENBSD_6_0:1.1.1.5.0.16
	OPENBSD_6_0_BASE:1.1.1.5
	OPENBSD_5_9:1.1.1.5.0.10
	OPENBSD_5_9_BASE:1.1.1.5
	OPENBSD_5_8:1.1.1.5.0.12
	OPENBSD_5_8_BASE:1.1.1.5
	PERL_5_20_2:1.1.1.5
	OPENBSD_5_7:1.1.1.5.0.4
	OPENBSD_5_7_BASE:1.1.1.5
	PERL_5_20_1:1.1.1.5
	OPENBSD_5_6:1.1.1.5.0.8
	OPENBSD_5_6_BASE:1.1.1.5
	PERL_5_18_2:1.1.1.5
	PERL:1.1.1
	OPENBSD_5_5:1.1.1.5.0.6
	OPENBSD_5_5_BASE:1.1.1.5
	OPENBSD_5_4:1.1.1.5.0.2
	OPENBSD_5_4_BASE:1.1.1.5
	PERL_5_16_3:1.1.1.5
	OPENBSD_5_3:1.1.1.4.0.10
	OPENBSD_5_3_BASE:1.1.1.4
	OPENBSD_5_2:1.1.1.4.0.8
	OPENBSD_5_2_BASE:1.1.1.4
	OPENBSD_5_1_BASE:1.1.1.4
	OPENBSD_5_1:1.1.1.4.0.6
	OPENBSD_5_0:1.1.1.4.0.4
	OPENBSD_5_0_BASE:1.1.1.4
	OPENBSD_4_9:1.1.1.4.0.2
	OPENBSD_4_9_BASE:1.1.1.4
	PERL_5_12_2:1.1.1.4
	OPENBSD_4_8:1.1.1.3.0.4
	OPENBSD_4_8_BASE:1.1.1.3
	OPENBSD_4_7:1.1.1.3.0.2
	OPENBSD_4_7_BASE:1.1.1.3
	PERL_5_10_1:1.1.1.3
	OPENBSD_4_6:1.1.1.2.0.6
	OPENBSD_4_6_BASE:1.1.1.2
	OPENBSD_4_5:1.1.1.2.0.2
	OPENBSD_4_5_BASE:1.1.1.2
	PERL_5_10_0:1.1.1.2
	OPENBSD_4_4:1.1.1.1.0.24
	OPENBSD_4_4_BASE:1.1.1.1
	OPENBSD_4_3:1.1.1.1.0.22
	OPENBSD_4_3_BASE:1.1.1.1
	OPENBSD_4_2:1.1.1.1.0.20
	OPENBSD_4_2_BASE:1.1.1.1
	OPENBSD_4_1:1.1.1.1.0.18
	OPENBSD_4_1_BASE:1.1.1.1
	OPENBSD_4_0:1.1.1.1.0.16
	OPENBSD_4_0_BASE:1.1.1.1
	PERL_5_8_8:1.1.1.1
	OPENBSD_3_9:1.1.1.1.0.14
	OPENBSD_3_9_BASE:1.1.1.1
	OPENBSD_3_8:1.1.1.1.0.12
	OPENBSD_3_8_BASE:1.1.1.1
	OPENBSD_3_7:1.1.1.1.0.10
	OPENBSD_3_7_BASE:1.1.1.1
	PERL_5_8_6:1.1.1.1
	OPENBSD_3_6:1.1.1.1.0.8
	OPENBSD_3_6_BASE:1.1.1.1
	PERL_5_8_5:1.1.1.1
	PERL_5_8_3:1.1.1.1
	OPENBSD_3_5:1.1.1.1.0.6
	OPENBSD_3_5_BASE:1.1.1.1
	PERL_5_8_2:1.1.1.1
	OPENBSD_3_4:1.1.1.1.0.4
	OPENBSD_3_4_BASE:1.1.1.1
	OPENBSD_3_3:1.1.1.1.0.2
	OPENBSD_3_3_BASE:1.1.1.1
	PERL_5_8_0:1.1.1.1
	CPAN:1.1.1;
locks; strict;
comment	@# @;
expand	@o@;


1.1
date	2002.10.27.22.15.10;	author millert;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	2002.10.27.22.15.10;	author millert;	state Exp;
branches;
next	1.1.1.2;

1.1.1.2
date	2008.09.29.17.18.59;	author millert;	state Exp;
branches;
next	1.1.1.3;

1.1.1.3
date	2009.10.12.18.10.43;	author millert;	state Exp;
branches;
next	1.1.1.4;

1.1.1.4
date	2010.09.24.14.49.15;	author millert;	state Exp;
branches;
next	1.1.1.5;

1.1.1.5
date	2013.03.25.20.09.34;	author sthen;	state Exp;
branches;
next	;


desc
@@


1.1
log
@Initial revision
@
text
@Check warnings::enabled & warnings::warn

__END__

--FILE-- abc.pm
package abc ;
use warnings "io" ;
print "ok1\n" if ! warnings::enabled('all') ;
print "ok2\n" if ! warnings::enabled("io") ;
1;
--FILE-- 
no warnings;
use abc ;
EXPECT
ok1
ok2
########

--FILE-- abc.pm
package abc ;
no warnings ;
print "ok1\n" if !warnings::enabled('all') ;
print "ok2\n" if warnings::enabled("syntax") ;
1;
--FILE-- 
use warnings 'syntax' ;
use abc ;
EXPECT
ok1
ok2
########

--FILE-- abc.pm
package abc ;
use warnings 'syntax' ;
print "ok1\n" if   warnings::enabled('io') ;
print "ok2\n" if ! warnings::enabled("syntax") ;
1;
--FILE-- 
use warnings 'io' ;
use abc ;
EXPECT
ok1
ok2
########

--FILE-- abc
no warnings ;
print "ok1\n" if !warnings::enabled('all') ;
print "ok2\n" if warnings::enabled("syntax") ;
1;
--FILE-- 
use warnings 'syntax' ;
require "abc" ;
EXPECT
ok1
ok2
########

--FILE-- abc
use warnings 'syntax' ;
print "ok1\n" if ! warnings::enabled('all') ;
print "ok2\n" if ! warnings::enabled("syntax") ;
print "ok3\n" if   warnings::enabled("io") ;
1;
--FILE-- 
use warnings 'io' ;
require "abc" ;
EXPECT
ok1
ok2
ok3
########

--FILE-- abc.pm
package abc ;
no warnings ;
sub check {
  print "ok1\n" if !warnings::enabled('all') ;
  print "ok2\n" if warnings::enabled("syntax") ;
}
1;
--FILE-- 
use warnings 'syntax' ;
use abc ;
abc::check() ;
EXPECT
ok1
ok2
########

--FILE-- abc.pm
package abc ;
use warnings 'io' ;
sub check {
  print "ok1\n" if ! warnings::enabled('all') ;
  print "ok2\n" if   warnings::enabled("syntax") ;
  print "ok3\n" if ! warnings::enabled("io") ;
}
1;
--FILE-- 
use warnings 'syntax' ;
use abc ;
abc::check() ;
EXPECT
ok1
ok2
ok3
########

--FILE-- abc
package abc ;
no warnings ;
sub check {
  print "ok1\n" if !warnings::enabled('all') ;
  print "ok2\n" if warnings::enabled("syntax") ;
}
1;
--FILE-- 
use warnings 'syntax' ;
require "abc" ;
abc::check() ;
EXPECT
ok1
ok2
########

--FILE-- abc
package abc ;
use warnings 'io' ;
sub check {
  print "ok1\n" if ! warnings::enabled('all') ;
  print "ok2\n" if   warnings::enabled("syntax") ;
  print "ok3\n" if ! warnings::enabled("io") ;
}
1;
--FILE-- 
use warnings 'syntax' ;
require "abc" ;
abc::check() ;
EXPECT
ok1
ok2
ok3
########

--FILE-- abc.pm
package abc ;
use warnings "io" ;
print "ok1\n" if ! warnings::enabled('all') ;
print "ok2\n" if ! warnings::enabled("io") ;
1;
--FILE-- def.pm
package def;
no warnings;
use abc ;
1;
--FILE-- 
use warnings;
use def ;
EXPECT
ok1
ok2
########

--FILE-- abc.pm
package abc ;
no warnings ;
print "ok1\n" if ! warnings::enabled('all') ;
print "ok2\n" if warnings::enabled("syntax") ;
print "ok3\n" if !warnings::enabled("io") ;
1;
--FILE-- def.pm
use warnings 'syntax' ;
print "ok4\n" if !warnings::enabled('all') ;
print "ok5\n" if warnings::enabled("io") ;
use abc ;
1;
--FILE--
use warnings 'io' ;
use def ;
EXPECT
ok1
ok2
ok3
ok4
ok5
########

--FILE-- abc.pm
package abc ;
no warnings ;
sub check {
  print "ok1\n" if !warnings::enabled('all') ;
  print "ok2\n" if warnings::enabled("syntax") ;
}
1;
--FILE-- 
use warnings 'syntax' ;
use abc ;
eval { 
  abc::check() ; 
};
print $@@ ;
EXPECT
ok1
ok2
########

--FILE-- abc.pm
package abc ;
use warnings 'io' ;
sub check {
  print "ok1\n" if ! warnings::enabled('all') ;
  print "ok2\n" if   warnings::enabled("syntax") ;
  print "ok3\n" if ! warnings::enabled("io") ;
}
1;
--FILE-- 
use warnings 'syntax' ;
use abc ;
eval { 
  abc::check() ; 
  } ;
print $@@ ;
EXPECT
ok1
ok2
ok3
########

--FILE-- abc
package abc ;
no warnings ;
sub check {
  print "ok1\n" if !warnings::enabled('all') ;
  print "ok2\n" if warnings::enabled("syntax") ;
}
1;
--FILE-- 
use warnings 'syntax' ;
require "abc" ;
eval { 
  abc::check() ; 
  } ;
print $@@ ;
EXPECT
ok1
ok2
########

--FILE-- abc
package abc ;
use warnings 'io' ;
sub check {
  print "ok1\n" if !warnings::enabled('all') ;
  print "ok2\n" if warnings::enabled("syntax") ;
  print "ok3\n" if warnings::enabled("io") ;
}
1;
--FILE-- 
use warnings 'syntax' ;
require "abc" ;
eval { 
  use warnings 'io' ; 
  abc::check() ; 
};
abc::check() ; 
print $@@ ;
EXPECT
ok1
ok2
ok3
ok1
ok2
########

--FILE-- abc.pm
package abc ;
use warnings 'io' ;
sub check {
  print "ok1\n" if ! warnings::enabled('all') ;
  print "ok2\n" if  warnings::enabled("syntax") ;
  print "ok3\n" if ! warnings::enabled("io") ;
}
1;
--FILE-- 
use warnings 'syntax' ;
use abc ;
sub fred { abc::check() }
fred() ;
EXPECT
ok1
ok2
ok3
########

--FILE-- abc.pm
package abc ;
use warnings 'io' ;
sub check {
  print "ok1\n" if  ! warnings::enabled('all') ;
}
1;
--FILE-- 
use warnings 'syntax' ;
use abc ;
sub fred { no warnings ; abc::check() }
fred() ;
EXPECT
ok1
########

--FILE-- abc.pm
package abc ;
use warnings 'misc' ;
sub check {
  print "ok1\n" if  ! warnings::enabled('all') ;
  print "ok2\n" if  warnings::enabled("syntax") ;
  print "ok3\n" if  warnings::enabled("io") ;
  print "ok4\n" if  ! warnings::enabled("misc") ;
}
1;
--FILE-- 
use warnings 'syntax' ;
use abc ;
sub fred { use warnings 'io'  ; abc::check() }
fred() ;
EXPECT
ok1
ok2
ok3
ok4
########

# check warnings::warn
use warnings ;
eval { 
    warnings::warn() 
  } ;
print $@@ ;
eval { 
  warnings::warn("fred", "joe") 
  } ;
print $@@ ;
EXPECT
Usage: warnings::warn([category,] 'message') at - line 5
Unknown warnings category 'fred' at - line 9
########

# check warnings::warnif
use warnings ;
eval { 
  warnings::warnif() 
} ;
print $@@ ;
eval { 
  warnings::warnif("fred", "joe") 
} ;
print $@@ ;
EXPECT
Usage: warnings::warnif([category,] 'message') at - line 5
Unknown warnings category 'fred' at - line 9
########

--FILE-- abc.pm
package abc ;
use warnings 'misc' ;
sub check { warnings::warn("io", "hello") }
1;
--FILE--
use warnings "io" ;
use abc;
abc::check() ;
EXPECT
hello at - line 3
########

--FILE-- abc.pm
package abc ;
use warnings 'misc' ;
sub check { warnings::warn("misc", "hello") }
1;
--FILE--
use warnings "io" ;
use abc;
abc::check() ;
EXPECT
hello at - line 3
########

--FILE-- abc.pm
package abc ;
use warnings 'misc' ;
sub check { warnings::warn("io", "hello") }
1;
--FILE--
use warnings qw( FATAL deprecated ) ;
use abc;
eval { 
    abc::check() ; 
  } ;
print "[[$@@]]\n";
EXPECT
hello at - line 4
[[]]
########

--FILE-- abc.pm
package abc ;
use warnings 'misc' ;
sub check { warnings::warn("io", "hello") }
1;
--FILE--
use warnings qw( FATAL io ) ;
use abc;
eval { 
  abc::check() ; 
} ;
print "[[$@@]]\n";
EXPECT
[[hello at - line 4
]]
########
-W
--FILE-- abc.pm
package abc ;
use warnings "io" ;
print "ok1\n" if warnings::enabled("io") ;
print "ok2\n" if warnings::enabled("all") ;
1;
--FILE-- 
no warnings;
use abc ;
EXPECT
ok1
ok2
########
-X
--FILE-- abc.pm
package abc ;
use warnings "io" ;
print "ok1\n" if !warnings::enabled("io") ;
print "ok2\n" if !warnings::enabled("all") ;
1;
--FILE-- 
use warnings;
use abc ;
EXPECT
ok1
ok2
########

--FILE-- abc.pm
package abc ;
no warnings ;
sub check {
  print "ok\n" if ! warnings::enabled() ;
}
1;
--FILE-- 
use warnings 'syntax' ;
use abc ;
abc::check() ;
EXPECT
package 'abc' not registered for warnings at abc.pm line 4
########

--FILE-- abc.pm
package abc ;
no warnings ;
sub check {
  warnings::warn("fred") ;
}
1;
--FILE-- 
use warnings 'syntax' ;
use abc ;
abc::check() ;
EXPECT
package 'abc' not registered for warnings at abc.pm line 4
########

--FILE-- abc.pm
package abc ;
no warnings ;
sub check {
  warnings::warnif("fred") ;
}
1;
--FILE-- 
use warnings 'syntax' ;
use abc ;
abc::check() ;
EXPECT
package 'abc' not registered for warnings at abc.pm line 4
########

--FILE-- abc.pm
package abc ;
use warnings 'io' ;
use warnings::register ;
sub check {
  print "ok1\n" if  warnings::enabled ;
  print "ok2\n" if  warnings::enabled("syntax") ;
  print "ok3\n" if !warnings::enabled("io") ;
}
1;
--FILE-- 
use warnings 'syntax' ;
use abc ;
use warnings 'abc' ;
abc::check() ;
EXPECT
ok1
ok2
ok3
########

--FILE-- abc.pm
package abc ;
use warnings 'io' ;
use warnings::register ;
sub check {
  print "ok1\n" if !warnings::enabled ;
  print "ok2\n" if  warnings::enabled("syntax") ;
  print "ok3\n" if !warnings::enabled("io") ;
}
1;
--FILE-- 
use warnings 'syntax' ;
use abc ;
abc::check() ;
EXPECT
ok1
ok2
ok3
########

--FILE-- abc.pm
package abc ;
no warnings ;
use warnings::register ;
sub check {
  print "ok1\n" if warnings::enabled ;
  print "ok2\n" if warnings::enabled("syntax") ;
}
1;
--FILE-- 
use warnings 'syntax' ;
use abc ;
use warnings 'abc' ;
eval { abc::check() ; };
print $@@ ;
EXPECT
ok1
ok2
########

--FILE-- abc.pm
package abc ;
use warnings 'io' ;
use warnings::register ;
sub check {
  print "ok1\n" if !warnings::enabled ;
  print "ok2\n" if  warnings::enabled("syntax") ;
  print "ok3\n" if !warnings::enabled("io") ;
}
1;
--FILE-- 
use warnings 'syntax' ;
use abc ;
eval { abc::check() ; } ;
print $@@ ;
EXPECT
ok1
ok2
ok3
########

--FILE-- abc.pm
package abc ;
use warnings 'io' ;
use warnings::register ;
sub check {
  print "ok1\n" if  warnings::enabled ;
  print "ok2\n" if  warnings::enabled("syntax") ;
  print "ok3\n" if !warnings::enabled("io") ;
}
1;
--FILE-- 
use warnings 'syntax' ;
use abc ;
use warnings 'abc' ;
sub fred { abc::check() }
fred() ;
EXPECT
ok1
ok2
ok3
########

--FILE-- abc.pm
package abc ;
use warnings 'io' ;
use warnings::register ;
sub check {
  print "ok1\n" if  ! warnings::enabled ;
}
1;
--FILE-- 
use warnings 'syntax' ;
use abc ;
sub fred { no warnings ; abc::check() }
fred() ;
EXPECT
ok1
########

--FILE-- abc.pm
package abc ;
use warnings 'misc' ;
use warnings::register;
sub check {
  print "ok1\n" if  warnings::enabled ;
  print "ok2\n" if  warnings::enabled("syntax") ;
  print "ok3\n" if  warnings::enabled("io") ;
  print "ok4\n" if  ! warnings::enabled("misc") ;
}
1;
--FILE-- 
use warnings 'syntax' ;
use abc ;
use warnings 'abc' ;
sub fred { use warnings 'io'  ; abc::check() }
fred() ;
EXPECT
ok1
ok2
ok3
ok4
########

--FILE-- abc.pm
package abc ;
use warnings 'misc' ;
use warnings::register;
sub check { warnings::warn("hello") }
1;
--FILE--
use abc;
use warnings "abc" ;
abc::check() ;
EXPECT
hello at - line 3
########

--FILE-- abc.pm
package abc ;
use warnings::register;
sub check { warnings::warn("hello") }
1;
--FILE--
use abc;
abc::check() ;
EXPECT
hello at - line 2
########

--FILE-- abc.pm
package abc ;
use warnings::register ;
sub check { warnings::warn("hello") }
1;
--FILE--
use abc;
use warnings qw( FATAL deprecated ) ;
eval {
    abc::check() ; 
  } ;
print "[[$@@]]\n";
EXPECT
hello at - line 4
[[]]
########

--FILE-- abc.pm
package abc ;
use warnings::register ;
sub check { warnings::warn("hello") }
1;
--FILE--
use abc;
use warnings qw( FATAL abc ) ;
eval { 
  abc::check() ; 
  } ;
print "[[$@@]]\n";
EXPECT
[[hello at - line 4
]]
########
-W
--FILE-- abc.pm
package abc ;
use warnings "io" ;
use warnings::register ;
sub check { 
  print "ok1\n" if warnings::enabled() ;
  print "ok2\n" if warnings::enabled("io") ;
  print "ok3\n" if warnings::enabled("all") ;
}
1;
--FILE-- 
no warnings;
use abc ;
abc::check() ;
EXPECT
ok1
ok2
ok3
########
-X
--FILE-- abc.pm
package abc ;
use warnings "io" ;
use warnings::register ;
sub check { 
  print "ok1\n" if !warnings::enabled() ;
  print "ok2\n" if !warnings::enabled("io") ;
  print "ok3\n" if !warnings::enabled("all") ;
}
1;
--FILE-- 
no warnings;
use abc ;
abc::check() ;
EXPECT
ok1
ok2
ok3
########

--FILE-- abc.pm
package abc ;
use warnings "io" ;
use warnings::register ;
sub check { 
  print "ok1\n" if warnings::enabled() ;
  print "ok2\n" if warnings::enabled("io") ;
  print "ok3\n" if warnings::enabled("all") ;
}
1;
--FILE-- 
use warnings 'all';
use abc ;
abc::check() ;
EXPECT
ok1
ok2
ok3
########

--FILE-- abc.pm
package abc ;
use warnings "io" ;
use warnings::register ;
sub check { 
  print "ok1\n" if !warnings::enabled() ;
  print "ok2\n" if !warnings::enabled("io") ;
  print "ok3\n" if !warnings::enabled("all") ;
}
1;
--FILE-- 
use abc ;
no warnings ;
abc::check() ;
EXPECT
ok1
ok2
ok3
########

--FILE-- abc.pm
package abc ;
use warnings "io" ;
use warnings::register ;
sub check { 
  print "ok1\n" if !warnings::enabled() ;
  print "ok2\n" if !warnings::enabled("io") ;
  print "ok3\n" if !warnings::enabled("all") ;
  warnings::warnif("my message 1") ;
  warnings::warnif('abc', "my message 2") ;
  warnings::warnif('io', "my message 3") ;
  warnings::warnif('all', "my message 4") ;
}
1;
--FILE-- 
use abc ;
use warnings 'abc';
no warnings ;
abc::check() ;
EXPECT
ok1
ok2
ok3
########

--FILE-- abc.pm
package abc ;
use warnings "io" ;
use warnings::register ;
sub check { 
  print "abc self" . (warnings::enabled() ? "" : " not") . " enabled\n" ;
  print "abc def"  . (warnings::enabled('def') ? "" : " not") . " enabled\n" ;
  print "abc all"  . (warnings::enabled('all') ? "" : " not") . " enabled\n" ;
}
1;
--FILE-- def.pm
package def ;
use warnings "io" ;
use warnings::register ;
sub check { 
  print "def self" . (warnings::enabled() ? "" : " not") . " enabled\n" ;
  print "def abc"  . (warnings::enabled('abc') ? "" : " not") . " enabled\n" ;
  print "def all"  . (warnings::enabled('all') ? "" : " not") . " enabled\n" ;
}
1;
--FILE-- 
use abc ;
use def ;
use warnings 'abc';
abc::check() ;
def::check() ;
no warnings 'abc'  ;
use warnings 'def'  ;
abc::check() ;
def::check() ;
use warnings 'abc'  ;
use warnings 'def'  ;
abc::check() ;
def::check() ;
no warnings 'abc'  ;
no warnings 'def'  ;
abc::check() ;
def::check() ;
use warnings;
abc::check() ;
def::check() ;
no warnings 'abc' ;
abc::check() ;
def::check() ;
EXPECT
abc self enabled
abc def not enabled
abc all not enabled
def self not enabled
def abc enabled
def all not enabled
abc self not enabled
abc def enabled
abc all not enabled
def self enabled
def abc not enabled
def all not enabled
abc self enabled
abc def enabled
abc all not enabled
def self enabled
def abc enabled
def all not enabled
abc self not enabled
abc def not enabled
abc all not enabled
def self not enabled
def abc not enabled
def all not enabled
abc self enabled
abc def enabled
abc all enabled
def self enabled
def abc enabled
def all enabled
abc self not enabled
abc def enabled
abc all not enabled
def self enabled
def abc not enabled
def all not enabled
########
-w
--FILE-- abc.pm
package abc ;
no warnings ;
use warnings::register ;
sub check { 
  print "ok1\n" if warnings::enabled() ;
  print "ok2\n" if warnings::enabled("io") ;
  print "ok3\n" if warnings::enabled("all") ;
}
1;
--FILE-- 
use abc ;
abc::check() ;
EXPECT
ok1
ok2
ok3
########
-w
--FILE-- abc.pm
package abc ;
no warnings ;
use warnings::register ;
sub check { 
  print "ok1\n" if !warnings::enabled() ;
  print "ok2\n" if !warnings::enabled("io") ;
  print "ok3\n" if !warnings::enabled("all") ;
}
1;
--FILE-- 
use abc ;
use warnings 'abc';
no warnings ;
abc::check() ;
EXPECT
ok1
ok2
ok3
########

--FILE-- abc.pm
package abc ;
no warnings ;
use warnings::register ;
sub check { 
  print "ok1\n" if !warnings::enabled() ;
  print "ok2\n" if !warnings::enabled("io") ;
  print "ok3\n" if !warnings::enabled("all") ;
  warnings::warnif("my message 1") ;
  warnings::warnif('abc', "my message 2") ;
  warnings::warnif('io', "my message 3") ;
  warnings::warnif('all', "my message 4") ;
}
1;
--FILE-- 
use abc ;
use warnings 'abc';
no warnings ;
BEGIN { $^W = 1 ; }
abc::check() ;
EXPECT
ok1
ok2
ok3
########

--FILE-- abc.pm
package abc ;
no warnings ;
use warnings::register ;
sub check { 
  print "ok1\n" if !warnings::enabled() ;
  print "ok2\n" if !warnings::enabled("io") ;
  print "ok3\n" if !warnings::enabled("all") ;
}
1;
--FILE-- 
use abc ;
use warnings 'abc';
no warnings ;
$^W = 1 ;
abc::check() ;
EXPECT
ok1
ok2
ok3
########

--FILE-- abc.pm
$| = 1;
package abc ;
no warnings ;
use warnings::register ;
sub check { 
  print "ok1\n" if  warnings::enabled() ;
  print "ok2\n" if !warnings::enabled("io") ;
  print "ok3\n" if !warnings::enabled("all") ;
  print "ok4\n" if  warnings::enabled("abc") ;
  warnings::warn("my message 1") ;
  warnings::warnif("my message 2") ;
  warnings::warnif('abc', "my message 3") ;
  warnings::warnif('io', "my message 4") ;
  warnings::warnif('all', "my message 5") ;
}
sub in2 { no warnings ; check() }
sub in1 { no warnings ; in2() }
1;
--FILE-- 
use abc ;
use warnings 'abc';
abc::in1() ;
EXPECT
ok1
ok2
ok3
ok4
my message 1 at - line 3
my message 2 at - line 3
my message 3 at - line 3
########

--FILE-- def.pm
package def ;
no warnings ;
use warnings::register ;
sub check { 
  print "ok1\n" if  warnings::enabled() ;
  print "ok2\n" if !warnings::enabled("io") ;
  print "ok3\n" if !warnings::enabled("all") ;
  print "ok4\n" if  warnings::enabled("def") ;
  warnings::warn("my message 1") ;
  warnings::warnif("my message 2") ;
  warnings::warnif('def', "my message 3") ;
  warnings::warnif('io', "my message 4") ;
  warnings::warnif('all', "my message 5") ;
}
sub in2 { no warnings ; check() }
sub in1 { no warnings ; in2() }
1;
--FILE-- abc.pm
$| = 1;
package abc ;
use def ;
use warnings 'def';
sub in1 { def::in1() ; }
1;
--FILE-- 
use abc ;
no warnings;
abc::in1() ;
EXPECT
ok1
ok2
ok3
ok4
my message 1 at abc.pm line 5
my message 2 at abc.pm line 5
my message 3 at abc.pm line 5
########

--FILE-- def.pm
$| = 1;
package def ;
no warnings ;
use warnings::register ;
require Exporter;
@@ISA = qw( Exporter ) ;
@@EXPORT = qw( in1 ) ;
sub check { 
  print "ok1\n" if  warnings::enabled() ;
  print "ok2\n" if !warnings::enabled("io") ;
  print "ok3\n" if !warnings::enabled("all") ;
  print "ok4\n" if  warnings::enabled("abc") ;
  print "ok5\n" if !warnings::enabled("def") ;
  warnings::warn("my message 1") ;
  warnings::warnif("my message 2") ;
  warnings::warnif('abc', "my message 3") ;
  warnings::warnif('def', "my message 4") ;
  warnings::warnif('io', "my message 5") ;
  warnings::warnif('all', "my message 6") ;
}
sub in2 { no warnings ; check() }
sub in1 { no warnings ; in2() }
1;
--FILE-- abc.pm
package abc ;
use warnings::register ;
use def ;
#@@ISA = qw(def) ;
1;
--FILE-- 
use abc ;
no warnings;
use warnings 'abc';
abc::in1() ;
EXPECT
ok2
ok3
ok4
ok5
my message 1 at - line 4
my message 3 at - line 4
########

--FILE-- def.pm
package def ;
no warnings ;
use warnings::register ;

sub new
{
    my $class = shift ;
    bless [], $class ;
}

sub check 
{ 
  my $self = shift ;
  print "ok1\n" if !warnings::enabled() ;
  print "ok2\n" if !warnings::enabled("io") ;
  print "ok3\n" if !warnings::enabled("all") ;
  print "ok4\n" if  warnings::enabled("abc") ;
  print "ok5\n" if !warnings::enabled("def") ;
  print "ok6\n" if  warnings::enabled($self) ;

  warnings::warn("my message 1") ;
  warnings::warn($self, "my message 2") ;

  warnings::warnif("my message 3") ;
  warnings::warnif('abc', "my message 4") ;
  warnings::warnif('def', "my message 5") ;
  warnings::warnif('io', "my message 6") ;
  warnings::warnif('all', "my message 7") ;
  warnings::warnif($self, "my message 8") ;
}
sub in2 
{
  no warnings ; 
  my $self = shift ;
  $self->check() ;
}
sub in1 
{ 
  no warnings ;
  my $self = shift ;
  $self->in2();
}
1;
--FILE-- abc.pm
$| = 1;
package abc ;
use warnings::register ;
use def ;
@@ISA = qw(def) ;
sub new
{
    my $class = shift ;
    bless [], $class ;
}

1;
--FILE-- 
use abc ;
no warnings;
use warnings 'abc';
$a = new abc ;
$a->in1() ;
print "**\n";
$b = new def ;
$b->in1() ;
EXPECT
ok1
ok2
ok3
ok4
ok5
ok6
my message 1 at - line 5
my message 2 at - line 5
my message 4 at - line 5
my message 8 at - line 5
**
ok1
ok2
ok3
ok4
ok5
my message 1 at - line 8
my message 2 at - line 8
my message 4 at - line 8
@


1.1.1.1
log
@stock perl 5.8.0 from CPAN
@
text
@@


1.1.1.2
log
@import perl 5.10.0 from CPAN
@
text
@d50 1
a50 1
print "ok2\n" if !warnings::enabled("syntax") ;
d64 1
a64 1
print "ok3\n" if ! warnings::enabled("io") ;
d176 1
a176 1
print "ok5\n" if !warnings::enabled("io") ;
a1181 48
########

--FILE--
# test for bug [perl #15395]
my ( $warn_cat, # warning category we'll try to control
     $warn_msg, # the error message to catch
);

package SomeModule;
use warnings::register;

BEGIN {
    $warn_cat = __PACKAGE__;
    $warn_msg = 'from ' . __PACKAGE__;
}

# a sub that generates a random warning
sub gen_warning {
    warnings::warnif( $warn_msg );
}

package ClientModule;
# use SomeModule; (would go here)
our @@CARP_NOT = ( $warn_cat ); # deliver warnings to *our* client

# call_warner provokes a warning.  It is delivered to its caller,
# who should also be able to control it
sub call_warner {
    SomeModule::gen_warning();
}

# user

package main;
my $warn_line = __LINE__ + 3; # this line should be in the error message
eval {
    use warnings FATAL => $warn_cat; # we want to know if this works
    ClientModule::call_warner();
};

# have we caught an error, and is it the one we generated?
print "ok1\n" if $@@ =~ /$warn_msg/;

# does it indicate the right line?
print "ok2\n" if $@@ =~ /line $warn_line/; 
EXPECT
ok1
ok2
@


1.1.1.3
log
@import perl 5.10.1
@
text
@d5 2
a6 2
--FILE-- abc0.pm
package abc0 ;
d11 1
a11 1
--FILE--
d13 1
a13 1
use abc0 ;
d19 2
a20 2
--FILE-- abc1.pm
package abc1 ;
d25 1
a25 1
--FILE--
d27 1
a27 1
use abc1 ;
d33 2
a34 2
--FILE-- abc2.pm
package abc2 ;
d39 1
a39 1
--FILE--
d41 1
a41 1
use abc2 ;
d47 1
a47 1
--FILE-- abc3
d52 1
a52 1
--FILE--
d54 1
a54 1
require "abc3" ;
d60 1
a60 1
--FILE-- abc4
d66 1
a66 1
--FILE--
d68 1
a68 1
require "abc4" ;
d75 2
a76 2
--FILE-- abc5.pm
package abc5 ;
d83 1
a83 1
--FILE--
d85 2
a86 2
use abc5 ;
abc5::check() ;
d92 2
a93 2
--FILE-- abc6.pm
package abc6 ;
d101 1
a101 1
--FILE--
d103 2
a104 2
use abc6 ;
abc6::check() ;
d111 2
a112 2
--FILE-- abc7
package abc7 ;
d119 1
a119 1
--FILE--
d121 2
a122 2
require "abc7" ;
abc7::check() ;
d128 2
a129 2
--FILE-- abc8
package abc8 ;
d137 1
a137 1
--FILE--
d139 2
a140 2
require "abc8" ;
abc8::check() ;
d147 2
a148 2
--FILE-- abc9.pm
package abc9 ;
d156 1
a156 1
use abc9 ;
d158 1
a158 1
--FILE--
d166 2
a167 2
--FILE-- abc10.pm
package abc10 ;
d177 1
a177 1
use abc10 ;
d190 2
a191 2
--FILE-- abc11.pm
package abc11 ;
d198 1
a198 1
--FILE--
d200 3
a202 3
use abc11 ;
eval {
  abc11::check() ;
d210 2
a211 2
--FILE-- abc12.pm
package abc12 ;
d219 1
a219 1
--FILE--
d221 3
a223 3
use abc12 ;
eval {
  abc12::check() ;
d232 2
a233 2
--FILE-- abc13
package abc13 ;
d240 1
a240 1
--FILE--
d242 3
a244 3
require "abc13" ;
eval {
  abc13::check() ;
d252 2
a253 2
--FILE-- abc14
package abc14 ;
d261 1
a261 1
--FILE--
d263 4
a266 4
require "abc14" ;
eval {
  use warnings 'io' ;
  abc14::check() ;
d268 1
a268 1
abc14::check() ;
d278 2
a279 2
--FILE-- abc15.pm
package abc15 ;
d287 1
a287 1
--FILE--
d289 2
a290 2
use abc15 ;
sub fred { abc15::check() }
d298 2
a299 2
--FILE-- abc16.pm
package abc16 ;
d305 1
a305 1
--FILE--
d307 2
a308 2
use abc16 ;
sub fred { no warnings ; abc16::check() }
d314 2
a315 2
--FILE-- abc17.pm
package abc17 ;
d324 1
a324 1
--FILE--
d326 2
a327 2
use abc17 ;
sub fred { use warnings 'io'  ; abc17::check() }
d338 2
a339 2
eval {
    warnings::warn()
d342 2
a343 2
eval {
  warnings::warn("fred", "joe")
d353 2
a354 2
eval {
  warnings::warnif()
d357 2
a358 2
eval {
  warnings::warnif("fred", "joe")
d366 2
a367 2
--FILE-- abc18.pm
package abc18 ;
d373 2
a374 2
use abc18;
abc18::check() ;
d379 2
a380 2
--FILE-- abc19.pm
package abc19 ;
d386 2
a387 2
use abc19;
abc19::check() ;
d392 2
a393 2
--FILE-- abc20.pm
package abc20 ;
d399 3
a401 3
use abc20;
eval {
    abc20::check() ;
d409 2
a410 2
--FILE-- abc21.pm
package abc21 ;
d416 3
a418 3
use abc21;
eval {
  abc21::check() ;
d426 2
a427 2
--FILE-- abc22.pm
package abc22 ;
d432 1
a432 1
--FILE--
d434 1
a434 1
use abc22 ;
d440 2
a441 2
--FILE-- abc23.pm
package abc23 ;
d446 1
a446 1
--FILE--
d448 1
a448 1
use abc23 ;
d454 2
a455 2
--FILE-- abc24.pm
package abc24 ;
d461 1
a461 1
--FILE--
d463 2
a464 2
use abc24 ;
abc24::check() ;
d466 1
a466 1
package 'abc24' not registered for warnings at abc24.pm line 4
d469 2
a470 2
--FILE-- abc25.pm
package abc25 ;
d476 1
a476 1
--FILE--
d478 2
a479 2
use abc25 ;
abc25::check() ;
d481 1
a481 1
package 'abc25' not registered for warnings at abc25.pm line 4
d484 2
a485 2
--FILE-- abc26.pm
package abc26 ;
d491 1
a491 1
--FILE--
d493 2
a494 2
use abc26 ;
abc26::check() ;
d496 1
a496 1
package 'abc26' not registered for warnings at abc26.pm line 4
d499 2
a500 2
--FILE-- abc27.pm
package abc27 ;
d509 1
a509 1
--FILE--
d511 3
a513 3
use abc27 ;
use warnings 'abc27' ;
abc27::check() ;
d520 2
a521 2
--FILE-- abc28.pm
package abc28 ;
d530 1
a530 1
--FILE--
d532 2
a533 2
use abc28 ;
abc28::check() ;
d540 2
a541 2
--FILE-- abc29.pm
package abc29 ;
d549 1
a549 1
--FILE--
d551 3
a553 3
use abc29 ;
use warnings 'abc29' ;
eval { abc29::check() ; };
d560 2
a561 2
--FILE-- abc30.pm
package abc30 ;
d570 1
a570 1
--FILE--
d572 2
a573 2
use abc30 ;
eval { abc30::check() ; } ;
d581 2
a582 2
--FILE-- abc31.pm
package abc31 ;
d591 1
a591 1
--FILE--
d593 3
a595 3
use abc31 ;
use warnings 'abc31' ;
sub fred { abc31::check() }
d603 2
a604 2
--FILE-- abc32.pm
package abc32 ;
d611 1
a611 1
--FILE--
d613 2
a614 2
use abc32 ;
sub fred { no warnings ; abc32::check() }
d620 2
a621 2
--FILE-- abc33.pm
package abc33 ;
d631 1
a631 1
--FILE--
d633 3
a635 3
use abc33 ;
use warnings 'abc33' ;
sub fred { use warnings 'io'  ; abc33::check() }
d644 2
a645 2
--FILE-- abc34.pm
package abc34 ;
d651 3
a653 3
use abc34;
use warnings "abc34" ;
abc34::check() ;
d658 2
a659 2
--FILE-- abc35.pm
package abc35 ;
d664 2
a665 2
use abc35;
abc35::check() ;
d670 2
a671 2
--FILE-- abc36.pm
package abc36 ;
d676 1
a676 1
use abc36;
d679 1
a679 1
    abc36::check() ;
d687 2
a688 2
--FILE-- abc37.pm
package abc37 ;
d693 4
a696 4
use abc37;
use warnings qw( FATAL abc37 ) ;
eval {
  abc37::check() ;
d704 2
a705 2
--FILE-- abc38.pm
package abc38 ;
d708 1
a708 1
sub check {
d714 1
a714 1
--FILE--
d716 2
a717 2
use abc38 ;
abc38::check() ;
d724 2
a725 2
--FILE-- abc39.pm
package abc39 ;
d728 1
a728 1
sub check {
d734 1
a734 1
--FILE--
d736 2
a737 2
use abc39 ;
abc39::check() ;
d744 2
a745 2
--FILE-- abc40.pm
package abc40 ;
d748 1
a748 1
sub check {
d754 1
a754 1
--FILE--
d756 2
a757 2
use abc40 ;
abc40::check() ;
d764 2
a765 2
--FILE-- abc41.pm
package abc41 ;
d768 1
a768 1
sub check {
d774 2
a775 2
--FILE--
use abc41 ;
d777 1
a777 1
abc41::check() ;
d784 2
a785 2
--FILE-- abc42.pm
package abc42 ;
d788 1
a788 1
sub check {
d793 1
a793 1
  warnings::warnif('abc42', "my message 2") ;
d798 3
a800 3
--FILE--
use abc42 ;
use warnings 'abc42';
d802 1
a802 1
abc42::check() ;
d809 2
a810 2
--FILE-- abc43.pm
package abc43 ;
d813 4
a816 4
sub check {
  print "abc43 self" . (warnings::enabled() ? "" : " not") . " enabled\n" ;
  print "abc43 def"  . (warnings::enabled('def') ? "" : " not") . " enabled\n" ;
  print "abc43 all"  . (warnings::enabled('all') ? "" : " not") . " enabled\n" ;
d823 1
a823 1
sub check {
d825 1
a825 1
  print "def abc43"  . (warnings::enabled('abc43') ? "" : " not") . " enabled\n" ;
d829 2
a830 2
--FILE--
use abc43 ;
d832 2
a833 2
use warnings 'abc43';
abc43::check() ;
d835 1
a835 1
no warnings 'abc43'  ;
d837 1
a837 1
abc43::check() ;
d839 1
a839 1
use warnings 'abc43'  ;
d841 1
a841 1
abc43::check() ;
d843 1
a843 1
no warnings 'abc43'  ;
d845 1
a845 1
abc43::check() ;
d848 1
a848 1
abc43::check() ;
d850 2
a851 2
no warnings 'abc43' ;
abc43::check() ;
d854 3
a856 3
abc43 self enabled
abc43 def not enabled
abc43 all not enabled
d858 1
a858 1
def abc43 enabled
d860 3
a862 3
abc43 self not enabled
abc43 def enabled
abc43 all not enabled
d864 1
a864 1
def abc43 not enabled
d866 3
a868 3
abc43 self enabled
abc43 def enabled
abc43 all not enabled
d870 1
a870 1
def abc43 enabled
d872 3
a874 3
abc43 self not enabled
abc43 def not enabled
abc43 all not enabled
d876 1
a876 1
def abc43 not enabled
d878 3
a880 3
abc43 self enabled
abc43 def enabled
abc43 all enabled
d882 1
a882 1
def abc43 enabled
d884 3
a886 3
abc43 self not enabled
abc43 def enabled
abc43 all not enabled
d888 1
a888 1
def abc43 not enabled
d892 2
a893 2
--FILE-- abc44.pm
package abc44 ;
d896 1
a896 1
sub check {
d902 3
a904 3
--FILE--
use abc44 ;
abc44::check() ;
d911 2
a912 2
--FILE-- abc45.pm
package abc45 ;
d915 1
a915 1
sub check {
d921 3
a923 3
--FILE--
use abc45 ;
use warnings 'abc45';
d925 1
a925 1
abc45::check() ;
d932 2
a933 2
--FILE-- abc46.pm
package abc46 ;
d936 1
a936 1
sub check {
d941 1
a941 1
  warnings::warnif('abc46', "my message 2") ;
d946 3
a948 3
--FILE--
use abc46 ;
use warnings 'abc46';
d951 1
a951 1
abc46::check() ;
d958 2
a959 2
--FILE-- abc47.pm
package abc47 ;
d962 1
a962 1
sub check {
d968 3
a970 3
--FILE--
use abc47 ;
use warnings 'abc47';
d973 1
a973 1
abc47::check() ;
d980 1
a980 1
--FILE-- abc48.pm
d982 1
a982 1
package abc48 ;
d985 1
a985 1
sub check {
d989 1
a989 1
  print "ok4\n" if  warnings::enabled("abc48") ;
d992 1
a992 1
  warnings::warnif('abc48', "my message 3") ;
d999 4
a1002 4
--FILE--
use abc48 ;
use warnings 'abc48';
abc48::in1() ;
d1017 1
a1017 1
sub check {
d1031 1
a1031 1
--FILE-- abc49.pm
d1033 1
a1033 1
package abc49 ;
d1038 2
a1039 2
--FILE--
use abc49 ;
d1041 1
a1041 1
abc49::in1() ;
d1047 3
a1049 3
my message 1 at abc49.pm line 5
my message 2 at abc49.pm line 5
my message 3 at abc49.pm line 5
d1060 1
a1060 1
sub check {
d1064 1
a1064 1
  print "ok4\n" if  warnings::enabled("abc50") ;
d1068 1
a1068 1
  warnings::warnif('abc50', "my message 3") ;
d1076 2
a1077 2
--FILE-- abc50.pm
package abc50 ;
d1082 2
a1083 2
--FILE--
use abc50 ;
d1085 2
a1086 2
use warnings 'abc50';
abc50::in1() ;
d1107 2
a1108 2
sub check
{
d1113 1
a1113 1
  print "ok4\n" if  warnings::enabled("abc51") ;
d1121 1
a1121 1
  warnings::warnif('abc51', "my message 4") ;
d1127 1
a1127 1
sub in2
d1129 1
a1129 1
  no warnings ;
d1133 2
a1134 2
sub in1
{
d1140 1
a1140 1
--FILE-- abc51.pm
d1142 1
a1142 1
package abc51 ;
d1153 2
a1154 2
--FILE--
use abc51 ;
d1156 2
a1157 2
use warnings 'abc51';
$a = new abc51 ;
d1226 1
a1226 1
print "ok2\n" if $@@ =~ /line $warn_line/;
@


1.1.1.4
log
@Perl 5.12.2 from CPAN
@
text
@a1229 57
########

--FILE-- fatal1.pm
package fatal1 ;
no warnings ;
print "ok1\n" if !warnings::fatal_enabled('all') ;
print "ok2\n" if !warnings::fatal_enabled("syntax") ;
1;
--FILE--
use fatal1 ;
EXPECT
ok1
ok2
########

--FILE-- fatal2.pm
package  fatal2;
no warnings ;
print "ok1\n" if !warnings::fatal_enabled('all') ;
print "ok2\n" if warnings::fatal_enabled("syntax") ;
1;
--FILE--
use warnings FATAL => 'syntax' ;
use fatal2 ;
EXPECT
ok1
ok2
########

--FILE-- fatal3.pm
package fatal3 ;
no warnings ;
print "ok1\n" if warnings::fatal_enabled('all') ;
print "ok2\n" if warnings::fatal_enabled("syntax") ;
1;
--FILE--
use warnings FATAL => 'all' ;
use fatal3 ;
EXPECT
ok1
ok2
########

--FILE-- fatal4.pm
package fatal4 ;
no warnings ;
print "ok1\n" if !warnings::fatal_enabled('all') ;
print "ok2\n" if warnings::fatal_enabled("void") ;
print "ok3\n" if !warnings::fatal_enabled("syntax") ;
1;
--FILE--
use warnings FATAL => 'all', NONFATAL => 'syntax' ;
use fatal4 ;
EXPECT
ok1
ok2
ok3
@


1.1.1.5
log
@import perl 5.16.3 from CPAN - worked on by Andrew Fresh and myself
@
text
@d347 2
a348 2
Usage: warnings::warn([category,] 'message') at - line 5.
Unknown warnings category 'fred' at - line 9.
d362 2
a363 2
Usage: warnings::warnif([category,] 'message') at - line 5.
Unknown warnings category 'fred' at - line 9.
d376 1
a376 1
hello at - line 3.
d389 1
a389 1
hello at - line 3.
d405 1
a405 1
hello at - line 4.
d422 1
a422 1
[[hello at - line 4.
d466 1
a466 1
package 'abc24' not registered for warnings at abc24.pm line 4.
d481 1
a481 1
package 'abc25' not registered for warnings at abc25.pm line 4.
d496 1
a496 1
package 'abc26' not registered for warnings at abc26.pm line 4.
d655 1
a655 1
hello at - line 3.
d667 1
a667 1
hello at - line 2.
d683 1
a683 1
hello at - line 4.
d700 1
a700 1
[[hello at - line 4.
d1008 3
a1010 3
my message 1 at - line 3.
my message 2 at - line 3.
my message 3 at - line 3.
d1047 3
a1049 3
my message 1 at abc49.pm line 5.
my message 2 at abc49.pm line 5.
my message 3 at abc49.pm line 5.
d1092 2
a1093 2
my message 1 at - line 4.
my message 3 at - line 4.
d1169 4
a1172 4
my message 1 at - line 5.
my message 2 at - line 5.
my message 4 at - line 5.
my message 8 at - line 5.
d1179 3
a1181 21
my message 1 at - line 8.
my message 2 at - line 8.
my message 4 at - line 8.
########

--FILE-- abc52.pm
package abc52 ;
use warnings::register ('foo', 'bar');
sub check {
    warnings::warnif('abc52', "hello");
    warnings::warnif('abc52::foo', "hello foo");
    warnings::warnif('abc52::bar', "hello bar");
}
1;
--FILE--
use abc52;
use warnings("abc52", "abc52::bar");
abc52::check() ;
EXPECT
hello at - line 3.
hello bar at - line 3.
@


