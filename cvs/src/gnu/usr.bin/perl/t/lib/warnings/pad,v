head	1.1;
branch	1.1.1;
access;
symbols
	OPENBSD_6_1:1.1.1.6.0.8
	OPENBSD_6_1_BASE:1.1.1.6
	OPENBSD_6_0:1.1.1.6.0.10
	OPENBSD_6_0_BASE:1.1.1.6
	OPENBSD_5_9:1.1.1.6.0.4
	OPENBSD_5_9_BASE:1.1.1.6
	OPENBSD_5_8:1.1.1.6.0.6
	OPENBSD_5_8_BASE:1.1.1.6
	PERL_5_20_2:1.1.1.6
	OPENBSD_5_7:1.1.1.6.0.2
	OPENBSD_5_7_BASE:1.1.1.6
	PERL_5_20_1:1.1.1.6
	OPENBSD_5_6:1.1.1.5.0.4
	OPENBSD_5_6_BASE:1.1.1.5
	PERL_5_18_2:1.1.1.5
	PERL:1.1.1
	OPENBSD_5_5:1.1.1.4.0.6
	OPENBSD_5_5_BASE:1.1.1.4
	OPENBSD_5_4:1.1.1.4.0.2
	OPENBSD_5_4_BASE:1.1.1.4
	PERL_5_16_3:1.1.1.4
	OPENBSD_5_3:1.1.1.3.0.10
	OPENBSD_5_3_BASE:1.1.1.3
	OPENBSD_5_2:1.1.1.3.0.8
	OPENBSD_5_2_BASE:1.1.1.3
	OPENBSD_5_1_BASE:1.1.1.3
	OPENBSD_5_1:1.1.1.3.0.6
	OPENBSD_5_0:1.1.1.3.0.4
	OPENBSD_5_0_BASE:1.1.1.3
	OPENBSD_4_9:1.1.1.3.0.2
	OPENBSD_4_9_BASE:1.1.1.3
	PERL_5_12_2:1.1.1.3
	OPENBSD_4_8:1.1.1.2.0.8
	OPENBSD_4_8_BASE:1.1.1.2
	OPENBSD_4_7:1.1.1.2.0.4
	OPENBSD_4_7_BASE:1.1.1.2
	PERL_5_10_1:1.1.1.2
	OPENBSD_4_6:1.1.1.2.0.6
	OPENBSD_4_6_BASE:1.1.1.2
	OPENBSD_4_5:1.1.1.2.0.2
	OPENBSD_4_5_BASE:1.1.1.2
	PERL_5_10_0:1.1.1.2
	OPENBSD_4_4:1.1.1.1.0.20
	OPENBSD_4_4_BASE:1.1.1.1
	OPENBSD_4_3:1.1.1.1.0.18
	OPENBSD_4_3_BASE:1.1.1.1
	OPENBSD_4_2:1.1.1.1.0.16
	OPENBSD_4_2_BASE:1.1.1.1
	OPENBSD_4_1:1.1.1.1.0.14
	OPENBSD_4_1_BASE:1.1.1.1
	OPENBSD_4_0:1.1.1.1.0.12
	OPENBSD_4_0_BASE:1.1.1.1
	PERL_5_8_8:1.1.1.1
	OPENBSD_3_9:1.1.1.1.0.10
	OPENBSD_3_9_BASE:1.1.1.1
	OPENBSD_3_8:1.1.1.1.0.8
	OPENBSD_3_8_BASE:1.1.1.1
	OPENBSD_3_7:1.1.1.1.0.6
	OPENBSD_3_7_BASE:1.1.1.1
	PERL_5_8_6:1.1.1.1
	OPENBSD_3_6:1.1.1.1.0.4
	OPENBSD_3_6_BASE:1.1.1.1
	PERL_5_8_5:1.1.1.1
	PERL_5_8_3:1.1.1.1
	OPENBSD_3_5:1.1.1.1.0.2
	OPENBSD_3_5_BASE:1.1.1.1
	PERL_5_8_2:1.1.1.1
	CPAN:1.1.1;
locks; strict;
comment	@# @;
expand	@o@;


1.1
date	2003.12.03.02.44.31;	author millert;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	2003.12.03.02.44.31;	author millert;	state Exp;
branches;
next	1.1.1.2;

1.1.1.2
date	2008.09.29.17.19.00;	author millert;	state Exp;
branches;
next	1.1.1.3;

1.1.1.3
date	2010.09.24.14.49.15;	author millert;	state Exp;
branches;
next	1.1.1.4;

1.1.1.4
date	2013.03.25.20.09.34;	author sthen;	state Exp;
branches;
next	1.1.1.5;

1.1.1.5
date	2014.03.24.14.59.10;	author afresh1;	state Exp;
branches;
next	1.1.1.6;

1.1.1.6
date	2014.11.17.20.53.17;	author afresh1;	state Exp;
branches;
next	;
commitid	B31cAbBIXiCqnL97;


desc
@@


1.1
log
@Initial revision
@
text
@  pad.c		AOK

     "my" variable %s masks earlier declaration in same scope
	my $x;
	my $x ;

     Variable "%s" may be unavailable 
	sub x {
      	    my $x;
      	    sub y {
         	$x
      	    }
   	}

     Variable "%s" will not stay shared 
	sub x {
      	    my $x;
      	    sub y {
         	sub { $x }
      	    }
   	}
    "our" variable %s redeclared	(Did you mean "local" instead of "our"?)
	our $x;
	{
	    our $x;
	}

    %s never introduced		[pad_leavemy]	TODO
    
__END__
# pad.c
use warnings 'misc' ;
my $x ;
my $x ;
my $y = my $y ;
no warnings 'misc' ;
my $x ;
my $y ;
EXPECT
"my" variable $x masks earlier declaration in same scope at - line 4.
"my" variable $y masks earlier declaration in same statement at - line 5.
########
# pad.c
use warnings 'closure' ;
sub x {
      my $x;
      sub y {
         $x
      }
   }
EXPECT
Variable "$x" will not stay shared at - line 7.
########
# pad.c
no warnings 'closure' ;
sub x {
      my $x;
      sub y {
         $x
      }
   }
EXPECT

########
# pad.c
use warnings 'closure' ;
sub x {
      our $x;
      sub y {
         $x
      }
   }
EXPECT

########
# pad.c
use warnings 'closure' ;
sub x {
      my $x;
      sub y {
         sub { $x }
      }
   }
EXPECT
Variable "$x" may be unavailable at - line 6.
########
# pad.c
no warnings 'closure' ;
sub x {
      my $x;
      sub y {
         sub { $x }
      }
   }
EXPECT

########
use warnings 'misc' ;
our $x;
{
    our $x;
}
EXPECT
"our" variable $x redeclared at - line 4.
	(Did you mean "local" instead of "our"?)
########
# an our var being introduced should suppress errors about global syms
use strict;
use warnings;
our $x unless $x;
EXPECT
@


1.1.1.1
log
@perl 5.8.2 from CPAN
@
text
@@


1.1.1.2
log
@import perl 5.10.0 from CPAN
@
text
@d3 1
a3 1
     "%s" variable %s masks earlier declaration in same scope
d7 1
a7 1
     Variable "%s" will not stay shared 
d11 1
a11 1
         	sub { $x }
d15 1
d19 1
a19 1
         	$x
a21 1

a35 4
my $p ;
package X ;
my $p ;
package main ;
a38 22
my $p ;
EXPECT
"my" variable $x masks earlier declaration in same scope at - line 4.
"my" variable $y masks earlier declaration in same statement at - line 5.
"my" variable $p masks earlier declaration in same scope at - line 8.
########
# pad.c
use warnings 'misc' ;
our $x ;
my $x ;
our $y = my $y ;
our $p ;
package X ;
my $p ;
package main ;
no warnings 'misc' ;
our $z ;
my $z ;
our $t = my $t ;
our $q ;
package X ;
my $q ;
a41 22
"my" variable $p masks earlier declaration in same scope at - line 8.
########
# pad.c
use warnings 'misc' ;
my $x ;
our $x ;
my $y = our $y ;
my $p ;
package X ;
our $p ;
package main ;
no warnings 'misc' ;
my $z ;
our $z ;
my $t = our $t ;
my $q ;
package X ;
our $q ;
EXPECT
"our" variable $x masks earlier declaration in same scope at - line 4.
"our" variable $y masks earlier declaration in same statement at - line 5.
"our" variable $p masks earlier declaration in same scope at - line 8.
d68 1
a68 1
      my $x;
d70 1
a70 1
         sub { $x }
a73 26
Variable "$x" will not stay shared at - line 6.
########
# pad.c
use warnings 'closure' ;
sub x {
    my $x;
    sub {
	$x;
	sub y {
	    $x
	}
    }->();
}
EXPECT
Variable "$x" will not stay shared at - line 9.
########
# pad.c
use warnings 'closure' ;
my $x;
sub {
    $x;
    sub f {
	sub { $x }->();
    }
}->();
EXPECT
a77 28
sub {
    my $x;
    sub f { $x }
}->();
EXPECT
Variable "$x" is not available at - line 5.
########
# pad.c
use warnings 'closure' ;
sub {
    my $x;
    eval 'sub f { $x }';
}->();
EXPECT

########
# pad.c
use warnings 'closure' ;
sub {
    my $x;
    sub f { eval '$x' }
}->();
f();
EXPECT
Variable "$x" is not available at (eval 1) line 2.
########
# pad.c
use warnings 'closure' ;
d79 1
a79 1
      our $x;
d81 1
a81 1
         $x
d85 1
a85 31

########
# pad.c
# see bugid 1754
use warnings 'closure' ;
sub f {
    my $x;
    sub { eval '$x' };
}
f()->();
EXPECT
Variable "$x" is not available at (eval 1) line 2.
########
use warnings 'closure' ;
{
    my $x = 1;
    $y = \$x; # force abandonment rather than clear-in-place at scope exit
    sub f2 { eval '$x' }
}
f2();
EXPECT
Variable "$x" is not available at (eval 1) line 2.
########
use warnings 'closure' ;
for my $x (1,2,3) {
    sub f { eval '$x' }
    f();
}
f();
EXPECT
Variable "$x" is not available at (eval 4) line 2.
a98 27
my $x;
{
    my $x;
}
EXPECT
########
# pad.c
use warnings 'misc' ;
our $x ;
our $x ;
our $y = our $y ;
our $p ;
package X ;
our $p ;
package main ;
no warnings 'misc' ;
our $a ;
our $a ;
our $b = our $b ;
our $c ;
package X ;
our $c ;
EXPECT
"our" variable $x redeclared at - line 4.
"our" variable $y redeclared at - line 5.
########
use warnings 'misc' ;
a102 7
our $x;
no warnings 'misc' ;
our $y;
{
    our $y;
}
our $y;
a105 37
"our" variable $x redeclared at - line 6.
########
use warnings 'misc' ;
our $x;
{
    my $x;
}
no warnings 'misc' ;
our $y;
{
    my $y;
}
EXPECT
########
use warnings 'misc' ;
my $x;
{
    our $x;
}
no warnings 'misc' ;
my $y;
{
    our $y;
}
EXPECT
########
use warnings 'misc' ;
my $x;
{
    my $x;
}
no warnings 'misc' ;
my $y;
{
    my $y;
}
EXPECT
@


1.1.1.3
log
@Perl 5.12.2 from CPAN
@
text
@a314 15
########
use warnings 'misc';
our $qunckkk;
our $_;
package clank_est;
our $qunckkk;
our $_;
no warnings 'misc';
our $ouch;
our $_;
package whack;
our $ouch;
our $_;
EXPECT
"our" variable $_ redeclared at - line 6.
@


1.1.1.4
log
@import perl 5.16.3 from CPAN - worked on by Andrew Fresh and myself
@
text
@a329 245
########
use warnings 'misc';
BEGIN { binmode STDERR, 'utf8'; }
{
    use utf8;
    my $ニコニコ;
    my $ニコニコ;
}
EXPECT
"my" variable $ニコニコ masks earlier declaration in same scope at - line 6.
########
use warnings 'misc';
BEGIN { binmode STDERR, 'utf8'; }
{
    use utf8;
    my $thìs;
    my $thìs;
}
EXPECT
"my" variable $thìs masks earlier declaration in same scope at - line 6.
########
# pad.c
use warnings 'closure' ;
BEGIN { binmode STDERR, 'utf8'; }
sub {
    use utf8;
    my $è;
    sub f { $è }
}->();
EXPECT
Variable "$è" is not available at - line 7.
########
# pad.c
use warnings 'closure' ;
BEGIN { binmode STDERR, 'utf8'; }
sub {
    use utf8;
    my $ニ;
    sub f { $ニ }
}->();
EXPECT
Variable "$ニ" is not available at - line 7.
########
# pad.c
use warnings 'closure' ;
BEGIN { binmode STDERR, 'utf8'; }
sub x {
      use utf8;
      my $に;
      sub y {
         $に
      }
   }
EXPECT
Variable "$に" will not stay shared at - line 9.
########
# pad.c
use warnings 'closure' ;
BEGIN { binmode STDERR, 'utf8'; }
sub x {
      use utf8;
      my $に;
      sub y {
         sub { $に }
      }
   }
EXPECT
Variable "$に" will not stay shared at - line 8.
########
# pad.c
use warnings 'closure' ;
BEGIN { binmode STDERR, 'utf8'; }
sub x {
    use utf8;
    my $に;
    sub {
	$に;
	sub y {
	    $に
	}
    }->();
}
EXPECT
Variable "$に" will not stay shared at - line 11.
########
# pad.c
use warnings 'closure' ;
BEGIN { binmode STDERR, 'utf8'; }
sub {
    use utf8;
    my $に;
    sub f { $に }
}->();
EXPECT
Variable "$に" is not available at - line 7.
########
# pad.c
use warnings 'closure' ;
BEGIN { binmode STDERR, 'utf8'; }
sub {
    use utf8;
    my $に;
    sub f { eval '$に' }
}->();
f();
EXPECT
Variable "$に" is not available at (eval 1) line 2.
########
# pad.c
# see bugid 1754
use warnings 'closure' ;
BEGIN { binmode STDERR, 'utf8'; }
sub f {
    use utf8;
    my $に;
    sub { eval '$に' };
}
f()->();
EXPECT
Variable "$に" is not available at (eval 1) line 2.
########
use warnings 'closure' ;
BEGIN { binmode STDERR, 'utf8'; }
{
    use utf8;
    my $に = 1;
    $y = \$に; # force abandonment rather than clear-in-place at scope exit
    sub f2 { eval '$に' }
}
f2();
EXPECT
Variable "$に" is not available at (eval 1) line 2.
########
use warnings 'closure' ;
BEGIN { binmode STDERR, 'utf8'; }
use utf8;
for my $に (1,2,3) {
    sub f { eval '$に' }
    f();
}
f();
EXPECT
Variable "$に" is not available at (eval 4) line 2.
########
# pad.c
use warnings 'closure' ;
BEGIN { binmode STDERR, 'utf8'; }
sub x {
      use utf8;
      my $è;
      sub y {
         $è
      }
   }
EXPECT
Variable "$è" will not stay shared at - line 9.
########
# pad.c
use warnings 'closure' ;
BEGIN { binmode STDERR, 'utf8'; }
sub x {
      use utf8;
      my $è;
      sub y {
         sub { $è }
      }
   }
EXPECT
Variable "$è" will not stay shared at - line 8.
########
# pad.c
use warnings 'closure' ;
BEGIN { binmode STDERR, 'utf8'; }
sub x {
    use utf8;
    my $è;
    sub {
	$è;
	sub y {
	    $è
	}
    }->();
}
EXPECT
Variable "$è" will not stay shared at - line 11.
########
# pad.c
use warnings 'closure' ;
BEGIN { binmode STDERR, 'utf8'; }
sub {
    use utf8;
    my $è;
    sub f { $è }
}->();
EXPECT
Variable "$è" is not available at - line 7.
########
# pad.c
use warnings 'closure' ;
BEGIN { binmode STDERR, 'utf8'; }
sub {
    use utf8;
    my $è;
    sub f { eval '$è' }
}->();
f();
EXPECT
Variable "$è" is not available at (eval 1) line 2.
########
# pad.c
# see bugid 1754
use warnings 'closure' ;
BEGIN { binmode STDERR, 'utf8'; }
sub f {
    use utf8;
    my $è;
    sub { eval '$è' };
}
f()->();
EXPECT
Variable "$è" is not available at (eval 1) line 2.
########
use warnings 'closure' ;
BEGIN { binmode STDERR, 'utf8'; }
{
    use utf8;
    my $è = 1;
    $y = \$è; # force abandonment rather than clear-in-place at scope exit
    sub f2 { eval '$è' }
}
f2();
EXPECT
Variable "$è" is not available at (eval 1) line 2.
########
use warnings 'closure' ;
BEGIN { binmode STDERR, 'utf8'; }
use utf8;
for my $è (1,2,3) {
    sub f { eval '$è' }
    f();
}
f();
EXPECT
Variable "$è" is not available at (eval 4) line 2.
########
@


1.1.1.5
log
@Import perl-5.18.2

OK espie@@ sthen@@ deraadt@@
@
text
@d176 1
a176 1
Variable "$x" is not available at (eval 1) line 1.
d198 1
a198 1
Variable "$x" is not available at (eval 1) line 1.
d208 1
a208 1
Variable "$x" is not available at (eval 1) line 1.
d217 1
a217 1
Variable "$x" is not available at (eval 4) line 1.
d436 1
a436 1
Variable "$に" is not available at (eval 1) line 1.
d449 1
a449 1
Variable "$に" is not available at (eval 1) line 1.
d461 1
a461 1
Variable "$に" is not available at (eval 1) line 1.
d472 1
a472 1
Variable "$に" is not available at (eval 4) line 1.
d537 1
a537 1
Variable "$è" is not available at (eval 1) line 1.
d550 1
a550 1
Variable "$è" is not available at (eval 1) line 1.
d562 1
a562 1
Variable "$è" is not available at (eval 1) line 1.
d573 1
a573 1
Variable "$è" is not available at (eval 4) line 1.
@


1.1.1.6
log
@Import perl-5.20.1
@
text
@a229 7
# pad.c
use warnings 'closure';
my $x;
our $y;
sub { $x = $y }->();  # should not warn about $y being unavailable
EXPECT
########
@


