head	1.7;
access;
symbols
	OPENBSD_6_1:1.7.0.2
	OPENBSD_6_1_BASE:1.7
	OPENBSD_6_0:1.6.0.12
	OPENBSD_6_0_BASE:1.6
	OPENBSD_5_9:1.6.0.6
	OPENBSD_5_9_BASE:1.6
	OPENBSD_5_8:1.6.0.8
	OPENBSD_5_8_BASE:1.6
	PERL_5_20_2:1.1.1.8
	OPENBSD_5_7:1.6.0.2
	OPENBSD_5_7_BASE:1.6
	PERL_5_20_1:1.1.1.8
	OPENBSD_5_6:1.6.0.4
	OPENBSD_5_6_BASE:1.6
	PERL_5_18_2:1.1.1.8
	PERL:1.1.1
	OPENBSD_5_5:1.5.0.6
	OPENBSD_5_5_BASE:1.5
	OPENBSD_5_4:1.5.0.2
	OPENBSD_5_4_BASE:1.5
	PERL_5_16_3:1.1.1.7
	OPENBSD_5_3:1.4.0.10
	OPENBSD_5_3_BASE:1.4
	OPENBSD_5_2:1.4.0.8
	OPENBSD_5_2_BASE:1.4
	OPENBSD_5_1_BASE:1.4
	OPENBSD_5_1:1.4.0.6
	OPENBSD_5_0:1.4.0.4
	OPENBSD_5_0_BASE:1.4
	OPENBSD_4_9:1.4.0.2
	OPENBSD_4_9_BASE:1.4
	PERL_5_12_2:1.1.1.6
	OPENBSD_4_8:1.3.0.8
	OPENBSD_4_8_BASE:1.3
	OPENBSD_4_7:1.3.0.4
	OPENBSD_4_7_BASE:1.3
	PERL_5_10_1:1.1.1.5
	OPENBSD_4_6:1.3.0.6
	OPENBSD_4_6_BASE:1.3
	OPENBSD_4_5:1.3.0.2
	OPENBSD_4_5_BASE:1.3
	PERL_5_10_0:1.1.1.5
	OPENBSD_4_4:1.2.0.12
	OPENBSD_4_4_BASE:1.2
	OPENBSD_4_3:1.2.0.10
	OPENBSD_4_3_BASE:1.2
	OPENBSD_4_2:1.2.0.8
	OPENBSD_4_2_BASE:1.2
	OPENBSD_4_1:1.2.0.6
	OPENBSD_4_1_BASE:1.2
	OPENBSD_4_0:1.2.0.4
	OPENBSD_4_0_BASE:1.2
	PERL_5_8_8:1.1.1.4
	OPENBSD_3_9:1.2.0.2
	OPENBSD_3_9_BASE:1.2
	OPENBSD_3_8:1.1.1.3.0.6
	OPENBSD_3_8_BASE:1.1.1.3
	OPENBSD_3_7:1.1.1.3.0.4
	OPENBSD_3_7_BASE:1.1.1.3
	PERL_5_8_6:1.1.1.3
	OPENBSD_3_6:1.1.1.3.0.2
	OPENBSD_3_6_BASE:1.1.1.3
	PERL_5_8_5:1.1.1.3
	PERL_5_8_3:1.1.1.2
	OPENBSD_3_5:1.1.1.2.0.2
	OPENBSD_3_5_BASE:1.1.1.2
	PERL_5_8_2:1.1.1.2
	OPENBSD_3_4:1.1.1.1.0.4
	OPENBSD_3_4_BASE:1.1.1.1
	OPENBSD_3_3:1.1.1.1.0.2
	OPENBSD_3_3_BASE:1.1.1.1
	PERL_5_8_0:1.1.1.1
	CPAN:1.1.1;
locks; strict;
comment	@# @;
expand	@o@;


1.7
date	2017.02.05.00.32.20;	author afresh1;	state Exp;
branches;
next	1.6;
commitid	cxJ08BvJA9Pt2PTM;

1.6
date	2014.03.24.15.05.33;	author afresh1;	state Exp;
branches;
next	1.5;

1.5
date	2013.03.25.20.40.59;	author sthen;	state Exp;
branches;
next	1.4;

1.4
date	2010.09.24.15.07.07;	author millert;	state Exp;
branches;
next	1.3;

1.3
date	2008.09.29.17.36.19;	author millert;	state Exp;
branches;
next	1.2;

1.2
date	2006.01.02.23.37.10;	author brad;	state Exp;
branches;
next	1.1;

1.1
date	2002.10.27.22.15.10;	author millert;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	2002.10.27.22.15.10;	author millert;	state Exp;
branches;
next	1.1.1.2;

1.1.1.2
date	2003.12.03.02.44.31;	author millert;	state Exp;
branches;
next	1.1.1.3;

1.1.1.3
date	2004.08.09.17.48.34;	author millert;	state Exp;
branches;
next	1.1.1.4;

1.1.1.4
date	2006.03.28.18.49.43;	author millert;	state Exp;
branches;
next	1.1.1.5;

1.1.1.5
date	2008.09.29.17.19.00;	author millert;	state Exp;
branches;
next	1.1.1.6;

1.1.1.6
date	2010.09.24.14.49.15;	author millert;	state Exp;
branches;
next	1.1.1.7;

1.1.1.7
date	2013.03.25.20.09.34;	author sthen;	state Exp;
branches;
next	1.1.1.8;

1.1.1.8
date	2014.03.24.14.59.10;	author afresh1;	state Exp;
branches;
next	;


desc
@@


1.7
log
@Fix merge issues, remove excess files - match perl-5.24.1 dist
@
text
@  sv.c	

  warn(warn_uninit);

  warn(warn_uninit);

  warn(warn_uninit);

  warn(warn_uninit);

  not_a_number(sv);

  not_a_number(sv);

  warn(warn_uninit);

  not_a_number(sv);

  warn(warn_uninit);

  not_a_number(sv);

  not_a_number(sv);

  warn(warn_uninit);

  warn(warn_uninit);

  Subroutine %s redefined	

  Invalid conversion in %s:

  Undefined value assigned to typeglob

  Reference is already weak			[Perl_sv_rvweaken] <<TODO

  vector argument not supported with alpha versions

  Mandatory Warnings
  ------------------
  Malformed UTF-8 character [sv_pos_b2u] (not tested: difficult to produce
                                          with perl now)

  Mandatory Warnings TODO
  ------------------
    Attempt to free non-arena SV: 0x%lx		[del_sv]
    Reference miscount in sv_replace()		[sv_replace]
    Attempt to free unreferenced scalar		[sv_free]
    Attempt to free temp prematurely: SV 0x%lx	[sv_free]
    semi-panic: attempt to dup freed string	[newSVsv]
    

__END__
# sv.c
use integer ;
use warnings 'uninitialized' ;
$x = 1 + $a[0] ; # a
no warnings 'uninitialized' ;
$x = 1 + $b[0] ; # a
EXPECT
Use of uninitialized value $a[0] in integer addition (+) at - line 4.
########
# sv.c (sv_2iv)
package fred ;
sub TIESCALAR { my $x ; bless \$x}
sub FETCH { return undef }
sub STORE { return 1 }
package main ;
tie $A, 'fred' ;
use integer ;
use warnings 'uninitialized' ;
$A *= 2 ;
no warnings 'uninitialized' ;
$A *= 2 ;
EXPECT
Use of uninitialized value $A in integer multiplication (*) at - line 10.
########
# sv.c
use integer ;
use warnings 'uninitialized' ;
my $x *= 2 ; #b 
no warnings 'uninitialized' ;
my $y *= 2 ; #b 
EXPECT
Use of uninitialized value $x in integer multiplication (*) at - line 4.
########
# sv.c (sv_2uv)
package fred ;
sub TIESCALAR { my $x ; bless \$x}
sub FETCH { return undef }
sub STORE { return 1 }
package main ;
tie $A, 'fred' ;
use warnings 'uninitialized' ;
$B = 0 ;
$B |= $A ;
no warnings 'uninitialized' ;
$B = 0 ;
$B |= $A ;
EXPECT
Use of uninitialized value $A in bitwise or (|) at - line 10.
########
# sv.c
use warnings 'uninitialized' ;
my $Y = 1 ; 
my $x = 1 | $a[$Y] ;
no warnings 'uninitialized' ;
my $Y = 1 ; 
$x = 1 | $b[$Y] ;
EXPECT
Use of uninitialized value within @@a in bitwise or (|) at - line 4.
########
# sv.c
use warnings 'uninitialized' ;
my $Y = 1 ; 
my $x = 1 & $a[$Y] ;
no warnings 'uninitialized' ;
my $Y = 1 ; 
$x = 1 & $b[$Y] ;
EXPECT
Use of uninitialized value within @@a in bitwise and (&) at - line 4.
########
# sv.c
use warnings 'uninitialized' ;
my $Y = 1 ; 
my $x = ~$a[$Y] ;
no warnings 'uninitialized' ;
my $Y = 1 ; 
$x = ~$b[$Y] ;
EXPECT
Use of uninitialized value within @@a in 1's complement (~) at - line 4.
########
# sv.c
use warnings 'uninitialized' ;
my $x *= 1 ; # d
no warnings 'uninitialized' ;
my $y *= 1 ; # d
EXPECT
Use of uninitialized value $x in multiplication (*) at - line 3.
########
# sv.c
use warnings 'uninitialized' ;
$x = 1 + $a[0] ; # e
no warnings 'uninitialized' ;
$x = 1 + $b[0] ; # e
EXPECT
Use of uninitialized value $a[0] in addition (+) at - line 3.
########
# sv.c (sv_2nv)
package fred ;
sub TIESCALAR { my $x ; bless \$x}
sub FETCH { return undef }
sub STORE { return 1 }
package main ;
tie $A, 'fred' ;
use warnings 'uninitialized' ;
$A *= 2 ;
no warnings 'uninitialized' ;
$A *= 2 ;
EXPECT
Use of uninitialized value $A in multiplication (*) at - line 9.
########
# sv.c
use warnings 'uninitialized' ;
$x = $y + 1 ; # f
no warnings 'uninitialized' ;
$x = $z + 1 ; # f
EXPECT
Use of uninitialized value $y in addition (+) at - line 3.
########
# sv.c
use warnings 'uninitialized' ;
$x = chop undef ; # g
no warnings 'uninitialized' ;
$x = chop undef ; # g
EXPECT
Modification of a read-only value attempted at - line 3.
########
# sv.c
use warnings 'uninitialized' ;
$x = chop $y ; # h
no warnings 'uninitialized' ;
$x = chop $z ; # h
EXPECT
Use of uninitialized value $y in scalar chop at - line 3.
########
# sv.c (sv_2pv)
package fred ;
sub TIESCALAR { my $x ; bless \$x}
sub FETCH { return undef }
sub STORE { return 1 }
package main ;
tie $A, 'fred' ;
use warnings 'uninitialized' ;
$B = "" ;
$B .= $A ;
no warnings 'uninitialized' ;
$C = "" ;
$C .= $A ;
EXPECT
Use of uninitialized value $A in concatenation (.) or string at - line 10.
########
# perlbug 20011116.125
use warnings 'uninitialized';
$a = undef;
$foo = join '', $a, "\n";
$foo = "$a\n";
$foo = "a:$a\n";
EXPECT
Use of uninitialized value $a in join or string at - line 4.
Use of uninitialized value $a in concatenation (.) or string at - line 5.
Use of uninitialized value $a in concatenation (.) or string at - line 6.
########
# sv.c 
use warnings 'numeric' ;
sub TIESCALAR{bless[]} ; 
sub FETCH {"def"} ; 
tie $a,"main" ; 
my $b = 1 + $a;
no warnings 'numeric' ;
my $c = 1 + $a;
EXPECT
Argument "def" isn't numeric in addition (+) at - line 6.
########
# sv.c
use warnings 'numeric' ;
my $x = 1 + "def" ;
no warnings 'numeric' ;
my $z = 1 + "def" ;
EXPECT
Argument "def" isn't numeric in addition (+) at - line 3.
########
# sv.c
use warnings 'numeric' ;
my $a = "def" ;
my $x = 1 + $a ;
no warnings 'numeric' ;
my $y = 1 + $a ;
EXPECT
Argument "def" isn't numeric in addition (+) at - line 4.
########
# sv.c
use warnings 'numeric' ; use integer ;
my $a = "def" ;
my $x = 1 + $a ;
no warnings 'numeric' ;
my $z = 1 + $a ;
EXPECT
Argument "def" isn't numeric in integer addition (+) at - line 4.
########
# sv.c
use warnings 'numeric' ;
my $x = 1 & "def" ;
no warnings 'numeric' ;
my $z = 1 & "def" ;
EXPECT
Argument "def" isn't numeric in bitwise and (&) at - line 3.
########
# sv.c
use warnings 'numeric' ;
my $x = pack i => "def" ;
no warnings 'numeric' ;
my $z = pack i => "def" ;
EXPECT
Argument "def" isn't numeric in pack at - line 3.
########
# sv.c
use warnings 'numeric' ; 
my $a = "d\0f" ;
my $x = 1 + $a ;
no warnings 'numeric' ;
my $z = 1 + $a ;
EXPECT
Argument "d\0f" isn't numeric in addition (+) at - line 4.
########
# sv.c
use warnings 'redefine' ;
sub fred {}  
sub joe {} 
*fred = \&joe ;
no warnings 'redefine' ;
sub jim {} 
*jim = \&joe ;
EXPECT
Subroutine main::fred redefined at - line 5.
########
# sv.c
use warnings 'printf' ;
open F, ">".($^O eq 'VMS'? 'NL:' : '/dev/null') ;
printf F "%y\n" ;
my $a = sprintf "%y" ;
printf F "%" ;
$a = sprintf "%" ;
printf F "%\x02" ;
$a = sprintf "%\x02" ;
printf F "%lly" ;
$a = sprintf "%lly" ;
printf F "%25lly" ;
$a = sprintf "%25lly" ;
printf F "%+2Ly" ;
$a = sprintf "%+2Ly" ;
printf F "%+2ll" ;
$a = sprintf "%+2ll" ;
printf F "%+2L\x03" ;
$a = sprintf "%+2L\x03" ;
no warnings 'printf' ;
printf F "%y\n" ;
$a = sprintf "%y" ;
printf F "%" ;
$a = sprintf "%" ;
printf F "%\x02" ;
$a = sprintf "%\x02" ;
printf F "%lly" ;
$a = sprintf "%lly" ;
printf F "%25lly" ;
$a = sprintf "%25lly" ;
printf F "%+2Ly" ;
$a = sprintf "%+2Ly" ;
printf F "%+2ll" ;
$a = sprintf "%+2ll" ;
printf F "%+2L\x03" ;
$a = sprintf "%+2L\x03" ;
EXPECT
Invalid conversion in printf: "%y" at - line 4.
Invalid conversion in sprintf: "%y" at - line 5.
Invalid conversion in printf: end of string at - line 6.
Invalid conversion in sprintf: end of string at - line 7.
Invalid conversion in printf: "%\002" at - line 8.
Invalid conversion in sprintf: "%\002" at - line 9.
Invalid conversion in printf: "%lly" at - line 10.
Invalid conversion in sprintf: "%lly" at - line 11.
Invalid conversion in printf: "%25lly" at - line 12.
Invalid conversion in sprintf: "%25lly" at - line 13.
Invalid conversion in printf: "%+2Ly" at - line 14.
Invalid conversion in sprintf: "%+2Ly" at - line 15.
Invalid conversion in printf: "%+2ll" at - line 16.
Invalid conversion in sprintf: "%+2ll" at - line 17.
Invalid conversion in printf: "%+2L\003" at - line 18.
Invalid conversion in sprintf: "%+2L\003" at - line 19.
########
# sv.c
use warnings 'misc' ;
*a = undef ;
no warnings 'misc' ;
*b = undef ;
EXPECT
Undefined value assigned to typeglob at - line 3.
########
# sv.c
use warnings 'numeric' ;
$a = "\x{100}\x{200}" * 42;
no warnings 'numeric' ;
$a = "\x{100}\x{200}" * 42;
EXPECT
Argument "\x{100}\x{200}" isn't numeric in multiplication (*) at - line 3.
########
# sv.c
use warnings 'numeric' ;
$a = "\x{100}\x{200}"; $a = -$a;
no warnings 'numeric' ;
$a = "\x{100}\x{200}"; $a = -$a;
EXPECT
Argument "\x{100}\x{200}" isn't numeric in negation (-) at - line 3.
########
# sv.c
use warnings 'numeric' ;
$a = "\x{100}\x{1000}" x 10; $b = $a < 1;
no warnings 'numeric' ;
$a = "\x{100}\x{1000}" x 10; $b = $a < 1;
EXPECT
Argument "\x{100}\x{1000}\x{100}\x{1000}\x{100}..." isn't numeric in numeric lt (<) at - line 3.
########
# sv.c
use warnings 'redefine' ;
use utf8;
use open qw( :utf8 :std );
sub frèd {}  
sub jòè {} 
*frèd = \&jòè;
no warnings 'redefine' ;
sub jìm {} 
*jìm = \&jòè ;
EXPECT
Subroutine main::frèd redefined at - line 7.
########
# sv.c
use warnings 'redefine' ;
use utf8;
use open qw( :utf8 :std );
sub ｆ렏 {}  
sub 조Ȩ {} 
*ｆ렏 = \&조Ȩ ;
no warnings 'redefine' ;
sub 짐 {} 
*짐 = \&조Ȩ ;
EXPECT
Subroutine main::ｆ렏 redefined at - line 7.
########
# sv.c
my $x = "a_c";
++$x;
use warnings "numeric";
$x = "a_c"; ++$x;
$x = ${ qr/abc/ }; ++$x;
$x = "123x"; ++$x;
$x = "123e"; ++$x;
$x = 0; ++$x; # none of these should warn
$x = "ABC"; ++$x;
$x = "ABC123"; ++$x;
$x = " +10"; ++$x;
EXPECT
Argument "a_c" isn't numeric in preincrement (++) at - line 5.
Argument "(?^:abc)" isn't numeric in preincrement (++) at - line 6.
Argument "123x" isn't numeric in preincrement (++) at - line 7.
Argument "123e" isn't numeric in preincrement (++) at - line 8.
@


1.6
log
@Merge perl-5.18.2 plus local patches, remove old files

OK espie@@ sthen@@ deraadt@@
@
text
@d366 8
d400 11
a410 5
sprintf "%vd", new version v1.1_0;
use warnings 'printf' ;
sprintf "%vd", new version v1.1_0;
no warnings 'printf' ;
sprintf "%vd", new version v1.1_0;
d412 4
a415 2
vector argument not supported with alpha versions at - line 2.
vector argument not supported with alpha versions at - line 4.
@


1.5
log
@merge/resolve conflicts
(some more to do after this one)
@
text
@d37 2
d390 10
@


1.4
log
@merge in perl 5.12.2 plus local changes
@
text
@d288 2
a289 2
printf F "%z\n" ;
my $a = sprintf "%z" ;
d294 6
a299 6
printf F "%llz" ;
$a = sprintf "%llz" ;
printf F "%25llz" ;
$a = sprintf "%25llz" ;
printf F "%+2Lz" ;
$a = sprintf "%+2Lz" ;
d305 2
a306 2
printf F "%z\n" ;
$a = sprintf "%z" ;
d311 6
a316 6
printf F "%llz" ;
$a = sprintf "%llz" ;
printf F "%25llz" ;
$a = sprintf "%25llz" ;
printf F "%+2Lz" ;
$a = sprintf "%+2Lz" ;
d322 2
a323 2
Invalid conversion in printf: "%z" at - line 4.
Invalid conversion in sprintf: "%z" at - line 5.
d328 6
a333 6
Invalid conversion in printf: "%llz" at - line 10.
Invalid conversion in sprintf: "%llz" at - line 11.
Invalid conversion in printf: "%25llz" at - line 12.
Invalid conversion in sprintf: "%25llz" at - line 13.
Invalid conversion in printf: "%+2Lz" at - line 14.
Invalid conversion in sprintf: "%+2Lz" at - line 15.
d362 26
@


1.3
log
@fix conflicts and merge in local changes to perl 5.10.0
@
text
@d294 10
d311 10
d328 10
@


1.2
log
@The official fix for the Perl sprintf buffer overflow.

ok millert@@
@
text
@a34 2
  Possible Y2K bug: %d format string following '19'

d59 1
a59 1
Use of uninitialized value in integer addition (+) at - line 4.
d74 1
a74 1
Use of uninitialized value in integer multiplication (*) at - line 10.
d83 1
a83 1
Use of uninitialized value in integer multiplication (*) at - line 4.
d99 1
a99 1
Use of uninitialized value in bitwise or (|) at - line 10.
d109 1
a109 1
Use of uninitialized value in bitwise or (|) at - line 4.
d119 1
a119 1
Use of uninitialized value in bitwise and (&) at - line 4.
d129 1
a129 1
Use of uninitialized value in 1's complement (~) at - line 4.
d137 1
a137 1
Use of uninitialized value in multiplication (*) at - line 3.
d145 1
a145 1
Use of uninitialized value in addition (+) at - line 3.
d159 1
a159 1
Use of uninitialized value in multiplication (*) at - line 9.
d167 1
a167 1
Use of uninitialized value in addition (+) at - line 3.
d183 1
a183 1
Use of uninitialized value in scalar chop at - line 3.
d199 1
a199 1
Use of uninitialized value in concatenation (.) or string at - line 10.
d208 3
a210 3
Use of uninitialized value in join or string at - line 4.
Use of uninitialized value in concatenation (.) or string at - line 5.
Use of uninitialized value in concatenation (.) or string at - line 6.
a317 34
use warnings 'y2k';
use Config;
BEGIN {
    unless ($Config{ccflags} =~ /Y2KWARN/) {
	print "SKIPPED\n# perl not built with -DPERL_Y2KWARN";
	exit 0;
    }
    $|=1;
}
my $x;
my $yy = 78;
$x     = printf  "19%02d\n", $yy;
$x     = sprintf "#19%02d\n", $yy;
$x     = printf  " 19%02d\n", 78;
$x     = sprintf "19%02d\n", 78;
$x     = printf  "319%02d\n", $yy;
$x     = sprintf "319%02d\n", $yy;
no warnings 'y2k';
$x     = printf  "19%02d\n", $yy;
$x     = sprintf "19%02d\n", $yy;
$x     = printf  "19%02d\n", 78;
$x     = sprintf "19%02d\n", 78;
EXPECT
Possible Y2K bug: %d format string following '19' at - line 16.
Possible Y2K bug: %d format string following '19' at - line 13.
1978
Possible Y2K bug: %d format string following '19' at - line 14.
Possible Y2K bug: %d format string following '19' at - line 15.
 1978
31978
1978
1978
########
# sv.c
a331 19
########
# sv.c
open F, ">".($^O eq 'VMS'? 'NL:' : '/dev/null') ;
use warnings 'printf';
$a = "a\nb";
$s = sprintf "%4s", $a;
printf F "%4s", $a;
$s = sprintf "%-4s", $a;
printf F "%-4s", $a;
$s = sprintf "%*s", -4, $a;
no warnings 'printf';
$s = sprintf "%4s", $a;
printf F "%4s", $a;
$s = sprintf "%-4s", $a;
printf F "%-4s", $a;
EXPECT
Newline in left-justified string for sprintf at - line 7.
Newline in left-justified string for printf at - line 8.
Newline in left-justified string for sprintf at - line 9.
@


1.1
log
@Initial revision
@
text
@d115 20
d304 1
d306 1
d308 1
a309 3
Invalid conversion in printf: "%z" at - line 4.
Invalid conversion in printf: end of string at - line 6.
Invalid conversion in printf: "%\002" at - line 8.
d368 19
@


1.1.1.1
log
@stock perl 5.8.0 from CPAN
@
text
@@


1.1.1.2
log
@perl 5.8.2 from CPAN
@
text
@a347 19
########
# sv.c
open F, ">".($^O eq 'VMS'? 'NL:' : '/dev/null') ;
use warnings 'printf';
$a = "a\nb";
$s = sprintf "%4s", $a;
printf F "%4s", $a;
$s = sprintf "%-4s", $a;
printf F "%-4s", $a;
$s = sprintf "%*s", -4, $a;
no warnings 'printf';
$s = sprintf "%4s", $a;
printf F "%4s", $a;
$s = sprintf "%-4s", $a;
printf F "%-4s", $a;
EXPECT
Newline in left-justified string for sprintf at - line 7.
Newline in left-justified string for printf at - line 8.
Newline in left-justified string for sprintf at - line 9.
@


1.1.1.3
log
@Import of stock perl 5.8.5
@
text
@a114 20
my $Y = 1 ; 
my $x = 1 & $a[$Y] ;
no warnings 'uninitialized' ;
my $Y = 1 ; 
$x = 1 & $b[$Y] ;
EXPECT
Use of uninitialized value in bitwise and (&) at - line 4.
########
# sv.c
use warnings 'uninitialized' ;
my $Y = 1 ; 
my $x = ~$a[$Y] ;
no warnings 'uninitialized' ;
my $Y = 1 ; 
$x = ~$b[$Y] ;
EXPECT
Use of uninitialized value in 1's complement (~) at - line 4.
########
# sv.c
use warnings 'uninitialized' ;
@


1.1.1.4
log
@perl 5.8.8 import
@
text
@d304 3
a307 1
Invalid conversion in sprintf: "%z" at - line 5.
a308 1
Invalid conversion in sprintf: end of string at - line 7.
a309 1
Invalid conversion in sprintf: "%\002" at - line 9.
@


1.1.1.5
log
@import perl 5.10.0 from CPAN
@
text
@d35 2
d61 1
a61 1
Use of uninitialized value $a[0] in integer addition (+) at - line 4.
d76 1
a76 1
Use of uninitialized value $A in integer multiplication (*) at - line 10.
d85 1
a85 1
Use of uninitialized value $x in integer multiplication (*) at - line 4.
d101 1
a101 1
Use of uninitialized value $A in bitwise or (|) at - line 10.
d111 1
a111 1
Use of uninitialized value within @@a in bitwise or (|) at - line 4.
d121 1
a121 1
Use of uninitialized value within @@a in bitwise and (&) at - line 4.
d131 1
a131 1
Use of uninitialized value within @@a in 1's complement (~) at - line 4.
d139 1
a139 1
Use of uninitialized value $x in multiplication (*) at - line 3.
d147 1
a147 1
Use of uninitialized value $a[0] in addition (+) at - line 3.
d161 1
a161 1
Use of uninitialized value $A in multiplication (*) at - line 9.
d169 1
a169 1
Use of uninitialized value $y in addition (+) at - line 3.
d185 1
a185 1
Use of uninitialized value $y in scalar chop at - line 3.
d201 1
a201 1
Use of uninitialized value $A in concatenation (.) or string at - line 10.
d210 3
a212 3
Use of uninitialized value $a in join or string at - line 4.
Use of uninitialized value $a in concatenation (.) or string at - line 5.
Use of uninitialized value $a in concatenation (.) or string at - line 6.
d320 34
d368 19
@


1.1.1.6
log
@Perl 5.12.2 from CPAN
@
text
@a293 10
printf F "%llz" ;
$a = sprintf "%llz" ;
printf F "%25llz" ;
$a = sprintf "%25llz" ;
printf F "%+2Lz" ;
$a = sprintf "%+2Lz" ;
printf F "%+2ll" ;
$a = sprintf "%+2ll" ;
printf F "%+2L\x03" ;
$a = sprintf "%+2L\x03" ;
a300 10
printf F "%llz" ;
$a = sprintf "%llz" ;
printf F "%25llz" ;
$a = sprintf "%25llz" ;
printf F "%+2Lz" ;
$a = sprintf "%+2Lz" ;
printf F "%+2ll" ;
$a = sprintf "%+2ll" ;
printf F "%+2L\x03" ;
$a = sprintf "%+2L\x03" ;
a307 10
Invalid conversion in printf: "%llz" at - line 10.
Invalid conversion in sprintf: "%llz" at - line 11.
Invalid conversion in printf: "%25llz" at - line 12.
Invalid conversion in sprintf: "%25llz" at - line 13.
Invalid conversion in printf: "%+2Lz" at - line 14.
Invalid conversion in sprintf: "%+2Lz" at - line 15.
Invalid conversion in printf: "%+2ll" at - line 16.
Invalid conversion in sprintf: "%+2ll" at - line 17.
Invalid conversion in printf: "%+2L\003" at - line 18.
Invalid conversion in sprintf: "%+2L\003" at - line 19.
@


1.1.1.7
log
@import perl 5.16.3 from CPAN - worked on by Andrew Fresh and myself
@
text
@d288 2
a289 2
printf F "%y\n" ;
my $a = sprintf "%y" ;
d294 6
a299 6
printf F "%lly" ;
$a = sprintf "%lly" ;
printf F "%25lly" ;
$a = sprintf "%25lly" ;
printf F "%+2Ly" ;
$a = sprintf "%+2Ly" ;
d305 2
a306 2
printf F "%y\n" ;
$a = sprintf "%y" ;
d311 6
a316 6
printf F "%lly" ;
$a = sprintf "%lly" ;
printf F "%25lly" ;
$a = sprintf "%25lly" ;
printf F "%+2Ly" ;
$a = sprintf "%+2Ly" ;
d322 2
a323 2
Invalid conversion in printf: "%y" at - line 4.
Invalid conversion in sprintf: "%y" at - line 5.
d328 6
a333 6
Invalid conversion in printf: "%lly" at - line 10.
Invalid conversion in sprintf: "%lly" at - line 11.
Invalid conversion in printf: "%25lly" at - line 12.
Invalid conversion in sprintf: "%25lly" at - line 13.
Invalid conversion in printf: "%+2Ly" at - line 14.
Invalid conversion in sprintf: "%+2Ly" at - line 15.
a361 26
########
# sv.c
use warnings 'redefine' ;
use utf8;
use open qw( :utf8 :std );
sub frèd {}  
sub jòè {} 
*frèd = \&jòè;
no warnings 'redefine' ;
sub jìm {} 
*jìm = \&jòè ;
EXPECT
Subroutine main::frèd redefined at - line 7.
########
# sv.c
use warnings 'redefine' ;
use utf8;
use open qw( :utf8 :std );
sub ｆ렏 {}  
sub 조Ȩ {} 
*ｆ렏 = \&조Ȩ ;
no warnings 'redefine' ;
sub 짐 {} 
*짐 = \&조Ȩ ;
EXPECT
Subroutine main::ｆ렏 redefined at - line 7.
@


1.1.1.8
log
@Import perl-5.18.2

OK espie@@ sthen@@ deraadt@@
@
text
@a36 2
  vector argument not supported with alpha versions

a387 10
########
# sv.c
sprintf "%vd", new version v1.1_0;
use warnings 'printf' ;
sprintf "%vd", new version v1.1_0;
no warnings 'printf' ;
sprintf "%vd", new version v1.1_0;
EXPECT
vector argument not supported with alpha versions at - line 2.
vector argument not supported with alpha versions at - line 4.
@


