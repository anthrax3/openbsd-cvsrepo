head	1.2;
access;
symbols
	OPENBSD_6_2:1.2.0.2
	OPENBSD_6_2_BASE:1.2
	PERL_5_24_2:1.1.1.8
	OPENBSD_6_1:1.2.0.4
	OPENBSD_6_1_BASE:1.2
	OPENBSD_6_0:1.1.1.7.0.8
	OPENBSD_6_0_BASE:1.1.1.7
	OPENBSD_5_9:1.1.1.7.0.2
	OPENBSD_5_9_BASE:1.1.1.7
	OPENBSD_5_8:1.1.1.7.0.4
	OPENBSD_5_8_BASE:1.1.1.7
	PERL_5_20_2:1.1.1.7
	OPENBSD_5_7:1.1.1.6.0.2
	OPENBSD_5_7_BASE:1.1.1.6
	PERL_5_20_1:1.1.1.6
	OPENBSD_5_6:1.1.1.5.0.8
	OPENBSD_5_6_BASE:1.1.1.5
	PERL_5_18_2:1.1.1.5
	PERL:1.1.1
	OPENBSD_5_5:1.1.1.5.0.6
	OPENBSD_5_5_BASE:1.1.1.5
	OPENBSD_5_4:1.1.1.5.0.2
	OPENBSD_5_4_BASE:1.1.1.5
	PERL_5_16_3:1.1.1.5
	OPENBSD_5_3:1.1.1.4.0.18
	OPENBSD_5_3_BASE:1.1.1.4
	OPENBSD_5_2:1.1.1.4.0.16
	OPENBSD_5_2_BASE:1.1.1.4
	OPENBSD_5_1_BASE:1.1.1.4
	OPENBSD_5_1:1.1.1.4.0.14
	OPENBSD_5_0:1.1.1.4.0.12
	OPENBSD_5_0_BASE:1.1.1.4
	OPENBSD_4_9:1.1.1.4.0.10
	OPENBSD_4_9_BASE:1.1.1.4
	PERL_5_12_2:1.1.1.4
	OPENBSD_4_8:1.1.1.4.0.8
	OPENBSD_4_8_BASE:1.1.1.4
	OPENBSD_4_7:1.1.1.4.0.4
	OPENBSD_4_7_BASE:1.1.1.4
	PERL_5_10_1:1.1.1.4
	OPENBSD_4_6:1.1.1.4.0.6
	OPENBSD_4_6_BASE:1.1.1.4
	OPENBSD_4_5:1.1.1.4.0.2
	OPENBSD_4_5_BASE:1.1.1.4
	PERL_5_10_0:1.1.1.4
	OPENBSD_4_4:1.1.1.3.0.10
	OPENBSD_4_4_BASE:1.1.1.3
	OPENBSD_4_3:1.1.1.3.0.8
	OPENBSD_4_3_BASE:1.1.1.3
	OPENBSD_4_2:1.1.1.3.0.6
	OPENBSD_4_2_BASE:1.1.1.3
	OPENBSD_4_1:1.1.1.3.0.4
	OPENBSD_4_1_BASE:1.1.1.3
	OPENBSD_4_0:1.1.1.3.0.2
	OPENBSD_4_0_BASE:1.1.1.3
	PERL_5_8_8:1.1.1.3
	OPENBSD_3_9:1.1.1.2.0.10
	OPENBSD_3_9_BASE:1.1.1.2
	OPENBSD_3_8:1.1.1.2.0.8
	OPENBSD_3_8_BASE:1.1.1.2
	OPENBSD_3_7:1.1.1.2.0.6
	OPENBSD_3_7_BASE:1.1.1.2
	PERL_5_8_6:1.1.1.2
	OPENBSD_3_6:1.1.1.2.0.4
	OPENBSD_3_6_BASE:1.1.1.2
	PERL_5_8_5:1.1.1.2
	PERL_5_8_3:1.1.1.2
	OPENBSD_3_5:1.1.1.2.0.2
	OPENBSD_3_5_BASE:1.1.1.2
	PERL_5_8_2:1.1.1.2
	OPENBSD_3_4:1.1.1.1.0.4
	OPENBSD_3_4_BASE:1.1.1.1
	OPENBSD_3_3:1.1.1.1.0.2
	OPENBSD_3_3_BASE:1.1.1.1
	PERL_5_8_0:1.1.1.1
	CPAN:1.1.1;
locks; strict;
comment	@# @;
expand	@o@;


1.2
date	2017.02.05.00.32.20;	author afresh1;	state Exp;
branches;
next	1.1;
commitid	cxJ08BvJA9Pt2PTM;

1.1
date	2002.10.27.22.15.10;	author millert;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	2002.10.27.22.15.10;	author millert;	state Exp;
branches;
next	1.1.1.2;

1.1.1.2
date	2003.12.03.02.44.31;	author millert;	state Exp;
branches;
next	1.1.1.3;

1.1.1.3
date	2006.03.28.18.49.43;	author millert;	state Exp;
branches;
next	1.1.1.4;

1.1.1.4
date	2008.09.29.17.19.00;	author millert;	state Exp;
branches;
next	1.1.1.5;

1.1.1.5
date	2013.03.25.20.09.34;	author sthen;	state Exp;
branches;
next	1.1.1.6;

1.1.1.6
date	2014.11.17.20.53.17;	author afresh1;	state Exp;
branches;
next	1.1.1.7;
commitid	B31cAbBIXiCqnL97;

1.1.1.7
date	2015.04.25.19.10.47;	author afresh1;	state Exp;
branches;
next	1.1.1.8;
commitid	Wpcs5S8qILgEZC7F;

1.1.1.8
date	2017.08.14.13.46.23;	author afresh1;	state Exp;
branches;
next	;
commitid	fAzrs78vdW2Yfc6A;


desc
@@


1.2
log
@Fix merge issues, remove excess files - match perl-5.24.1 dist
@
text
@  pp_sys.c 	AOK

  untie attempted while %d inner references still exist	[pp_untie]
    sub TIESCALAR { bless [] } ; tie $a, 'main'; untie $a ;

  fileno() on unopened filehandle abc		[pp_fileno]
    $a = "abc"; fileno($a)

  binmode() on unopened filehandle abc		[pp_binmode]
    $a = "abc"; fileno($a)

  printf() on unopened filehandle abc		[pp_prtf]
    $a = "abc"; printf $a "fred"

  Filehandle %s opened only for input		[pp_leavewrite]
    format STDIN =
    .
    write STDIN;

  write() on closed filehandle %s		[pp_leavewrite]
    format STDIN =
    .
    close STDIN;
    write STDIN ;

  page overflow	 				[pp_leavewrite]

  printf() on unopened filehandle abc		[pp_prtf]
    $a = "abc"; printf $a "fred"

  Filehandle %s opened only for input		[pp_prtf]
    $a = "abc"; 
    printf $a "fred"

  printf() on closed filehandle %s		[pp_prtf]
    close STDIN ;
    printf STDIN "fred"

  syswrite() on closed filehandle %s		[pp_send]
    close STDIN; 
    syswrite STDIN, "fred", 1;

  send() on closed socket %s			[pp_send]
    close STDIN; 
    send STDIN, "fred", 1

  bind() on closed socket %s			[pp_bind]
    close STDIN; 
    bind STDIN, "fred" ;


  connect() on closed socket %s			[pp_connect]
    close STDIN; 
    connect STDIN, "fred" ;

  listen() on closed socket %s			[pp_listen]
    close STDIN; 
    listen STDIN, 2;

  accept() on closed socket %s			[pp_accept]
    close STDIN; 
    accept "fred", STDIN ;

  shutdown() on closed socket %s		[pp_shutdown]
    close STDIN; 
    shutdown STDIN, 0;

  setsockopt() on closed socket %s		[pp_ssockopt]
  getsockopt() on closed socket	%s		[pp_ssockopt]
    close STDIN; 
    setsockopt STDIN, 1,2,3;
    getsockopt STDIN, 1,2;

  getsockname() on closed socket %s		[pp_getpeername]
  getpeername() on closed socket %s		[pp_getpeername]
    close STDIN; 
    getsockname STDIN;
    getpeername STDIN;

  flock() on closed socket %s			[pp_flock]
  flock() on closed socket			[pp_flock]
    close STDIN;
    flock STDIN, 8;
    flock $a, 8;

  warn(warn_nl, "stat");			[pp_stat]

  -T on closed filehandle %s
  stat() on closed filehandle %s
	close STDIN ; -T STDIN ; stat(STDIN) ;

  warn(warn_nl, "open");			[pp_fttext]
    -T "abc\ndef" ;

  Filehandle %s opened only for output		[pp_sysread]
	my $file = "./xcv" ;
	open(F, ">$file") ; 
	my $a = sysread(F, $a,10) ;

  lstat on filehandle %s			[pp_lstat]

  getc() on unopened filehandle			[pp_getc]

  getc() on closed filehandle			[pp_getc]

  Non-string passed as bitmask			[pp_sselect]

  %s too large					[pp_gmtime]

  %s failed					[pp_gmtime]

__END__
# pp_sys.c [pp_untie]
use warnings 'untie' ;
sub TIESCALAR { bless [] } ; 
$b = tie $a, 'main'; 
untie $a ;
no warnings 'untie' ;
$c = tie $d, 'main'; 
untie $d ;
EXPECT
untie attempted while 1 inner references still exist at - line 5.
########
# pp_sys.c [pp_leavewrite]
use warnings 'io' ;
format STDIN =
.
write STDIN;
no warnings 'io' ;
write STDIN;
EXPECT
Filehandle STDIN opened only for input at - line 5.
########
# pp_sys.c [pp_leavewrite]
use warnings 'closed' ;
format STDIN =
.
format FOO =
.
close STDIN;
write STDIN;
write FOO;
opendir STDIN, ".";
write STDIN;
closedir STDIN;
opendir FOO, ".";
write FOO;
closedir FOO;
no warnings 'closed' ;
write STDIN;
write FOO;
opendir STDIN, ".";
opendir FOO, ".";
write STDIN;
write FOO;
EXPECT
write() on closed filehandle STDIN at - line 8.
write() on closed filehandle STDIN at - line 11.
	(Are you trying to call write() on dirhandle STDIN?)
########
# pp_sys.c [pp_leavewrite]
use warnings 'unopened';
format STDIN =
.
format FOO =
.
close STDIN;
write STDIN;
write FOO;
opendir STDIN, ".";
write STDIN;
closedir STDIN;
opendir FOO, ".";
write FOO;
closedir FOO;
no warnings 'unopened';
write STDIN;
write FOO;
opendir STDIN, ".";
opendir FOO, ".";
write STDIN;
write FOO;
EXPECT
write() on unopened filehandle FOO at - line 9.
write() on unopened filehandle FOO at - line 14.
	(Are you trying to call write() on dirhandle FOO?)
########
# pp_sys.c [pp_leavewrite]
use warnings 'io' ;
format STDOUT_TOP =
abc
.
format STDOUT =
def
ghi
.
$= = 1 ;
$- =1 ;
open STDOUT, ">".($^O eq 'VMS'? 'NL:' : '/dev/null') ;
write ;
no warnings 'io' ;
write ;
EXPECT
page overflow at - line 13.
########
# pp_sys.c [pp_prtf]
use warnings 'unopened' ;
$a = "abc"; 
printf $a "fred";
no warnings 'unopened' ;
printf $a "fred";
EXPECT
printf() on unopened filehandle abc at - line 4.
########
# pp_sys.c [pp_prtf]
use warnings 'closed' ;
close STDIN ;
printf STDIN "fred";
opendir STDIN, ".";
printf STDIN "fred";
closedir STDIN;
no warnings 'closed' ;
printf STDIN "fred";
opendir STDIN, ".";
printf STDIN "fred";
EXPECT
printf() on closed filehandle STDIN at - line 4.
printf() on closed filehandle STDIN at - line 6.
	(Are you trying to call printf() on dirhandle STDIN?)
########
# pp_sys.c [pp_prtf]
use warnings 'io' ;
printf STDIN "fred";
no warnings 'io' ;
printf STDIN "fred";
EXPECT
Filehandle STDIN opened only for input at - line 3.
########
# pp_sys.c [pp_send]
use warnings 'io' ;
syswrite STDIN, "fred";
no warnings 'io' ;
syswrite STDIN, "fred";
EXPECT
Filehandle STDIN opened only for input at - line 3.
########
# pp_sys.c [pp_send]
use warnings 'closed' ;
close STDIN; 
syswrite STDIN, "fred", 1;
opendir STDIN, ".";
syswrite STDIN, "fred", 1;
closedir STDIN;
no warnings 'closed' ;
syswrite STDIN, "fred", 1;
opendir STDIN, ".";
syswrite STDIN, "fred", 1;
EXPECT
syswrite() on closed filehandle STDIN at - line 4.
syswrite() on closed filehandle STDIN at - line 6.
	(Are you trying to call syswrite() on dirhandle STDIN?)
########
# pp_sys.c [pp_flock]
use Config; 
BEGIN { 
  if ( !$Config{d_flock} &&
       !$Config{d_fcntl_can_lock} &&
       !$Config{d_lockf} ) {
    print <<EOM ;
SKIPPED
# flock not present
EOM
    exit ;
  } 
}
use warnings qw(unopened closed);
close STDIN;
flock STDIN, 8;
opendir STDIN, ".";
flock STDIN, 8;
flock FOO, 8;
flock $a, 8;
no warnings qw(unopened closed);
flock STDIN, 8;
opendir STDIN, ".";
flock STDIN, 8;
flock FOO, 8;
flock $a, 8;
EXPECT
flock() on closed filehandle STDIN at - line 16.
flock() on closed filehandle STDIN at - line 18.
	(Are you trying to call flock() on dirhandle STDIN?)
flock() on unopened filehandle FOO at - line 19.
flock() on unopened filehandle at - line 20.
########
# pp_sys.c [pp_prtf pp_send pp_bind pp_connect pp_listen pp_accept pp_shutdown pp_ssockopt ppp_getpeername]
use warnings 'closed';
use Config; 
BEGIN { 
  if ( $^O ne 'VMS' and ! $Config{d_socket}) {
    print <<EOM ;
SKIPPED
# send not present
# bind not present
# connect not present
# accept not present
# shutdown not present
# setsockopt not present
# getsockopt not present
# getsockname not present
# getpeername not present
EOM
    exit ;
  } 
}
close STDIN; 
send STDIN, "fred", 1;
bind STDIN, "fred" ;
connect STDIN, "fred" ;
listen STDIN, 2;
accept "fred", STDIN;
shutdown STDIN, 0;
setsockopt STDIN, 1,2,3;
getsockopt STDIN, 1,2;
getsockname STDIN;
getpeername STDIN;
opendir STDIN, ".";
send STDIN, "fred", 1;
bind STDIN, "fred" ;
connect STDIN, "fred" ;
listen STDIN, 2;
accept "fred", STDIN;
shutdown STDIN, 0;
setsockopt STDIN, 1,2,3;
getsockopt STDIN, 1,2;
getsockname STDIN;
getpeername STDIN;
closedir STDIN;
send FOO, "fred", 1;
bind FOO, "fred" ;
connect FOO, "fred" ;
listen FOO, 2;
accept "fred", FOO;
shutdown FOO, 0;
setsockopt FOO, 1,2,3;
getsockopt FOO, 1,2;
getsockname FOO;
getpeername FOO;
opendir FOO, ".";
send FOO, "fred", 1;
bind FOO, "fred" ;
connect FOO, "fred" ;
listen FOO, 2;
accept "fred", FOO;
shutdown FOO, 0;
setsockopt FOO, 1,2,3;
getsockopt FOO, 1,2;
getsockname FOO;
getpeername FOO;
closedir FOO;
no warnings 'closed';
send STDIN, "fred", 1;
bind STDIN, "fred" ;
connect STDIN, "fred" ;
listen STDIN, 2;
accept STDIN, "fred" ;
shutdown STDIN, 0;
setsockopt STDIN, 1,2,3;
getsockopt STDIN, 1,2;
getsockname STDIN;
getpeername STDIN;
opendir STDIN, ".";
send STDIN, "fred", 1;
bind STDIN, "fred" ;
connect STDIN, "fred" ;
listen STDIN, 2;
accept "fred", STDIN;
shutdown STDIN, 0;
setsockopt STDIN, 1,2,3;
getsockopt STDIN, 1,2;
getsockname STDIN;
getpeername STDIN;
send FOO, "fred", 1;
bind FOO, "fred" ;
connect FOO, "fred" ;
listen FOO, 2;
accept FOO, "fred" ;
shutdown FOO, 0;
setsockopt FOO, 1,2,3;
getsockopt FOO, 1,2;
getsockname FOO;
getpeername FOO;
opendir FOO, ".";
send FOO, "fred", 1;
bind FOO, "fred" ;
connect FOO, "fred" ;
listen FOO, 2;
accept "fred", FOO;
shutdown FOO, 0;
setsockopt FOO, 1,2,3;
getsockopt FOO, 1,2;
getsockname FOO;
getpeername FOO;
EXPECT
send() on closed socket STDIN at - line 22.
bind() on closed socket STDIN at - line 23.
connect() on closed socket STDIN at - line 24.
listen() on closed socket STDIN at - line 25.
accept() on closed socket STDIN at - line 26.
shutdown() on closed socket STDIN at - line 27.
setsockopt() on closed socket STDIN at - line 28.
getsockopt() on closed socket STDIN at - line 29.
getsockname() on closed socket STDIN at - line 30.
getpeername() on closed socket STDIN at - line 31.
send() on closed socket STDIN at - line 33.
	(Are you trying to call send() on dirhandle STDIN?)
bind() on closed socket STDIN at - line 34.
	(Are you trying to call bind() on dirhandle STDIN?)
connect() on closed socket STDIN at - line 35.
	(Are you trying to call connect() on dirhandle STDIN?)
listen() on closed socket STDIN at - line 36.
	(Are you trying to call listen() on dirhandle STDIN?)
accept() on closed socket STDIN at - line 37.
	(Are you trying to call accept() on dirhandle STDIN?)
shutdown() on closed socket STDIN at - line 38.
	(Are you trying to call shutdown() on dirhandle STDIN?)
setsockopt() on closed socket STDIN at - line 39.
	(Are you trying to call setsockopt() on dirhandle STDIN?)
getsockopt() on closed socket STDIN at - line 40.
	(Are you trying to call getsockopt() on dirhandle STDIN?)
getsockname() on closed socket STDIN at - line 41.
	(Are you trying to call getsockname() on dirhandle STDIN?)
getpeername() on closed socket STDIN at - line 42.
	(Are you trying to call getpeername() on dirhandle STDIN?)
########
# pp_sys.c [pp_prtf pp_send pp_bind pp_connect pp_listen pp_accept pp_shutdown pp_ssockopt ppp_getpeername]
use warnings 'unopened';
use Config; 
BEGIN { 
  if ( $^O ne 'VMS' and ! $Config{d_socket}) {
    print <<EOM ;
SKIPPED
# send not present
# bind not present
# connect not present
# accept not present
# shutdown not present
# setsockopt not present
# getsockopt not present
# getsockname not present
# getpeername not present
EOM
    exit ;
  } 
}
close STDIN; 
send STDIN, "fred", 1;
bind STDIN, "fred" ;
connect STDIN, "fred" ;
listen STDIN, 2;
accept "fred", STDIN;
shutdown STDIN, 0;
setsockopt STDIN, 1,2,3;
getsockopt STDIN, 1,2;
getsockname STDIN;
getpeername STDIN;
opendir STDIN, ".";
send STDIN, "fred", 1;
bind STDIN, "fred" ;
connect STDIN, "fred" ;
listen STDIN, 2;
accept "fred", STDIN;
shutdown STDIN, 0;
setsockopt STDIN, 1,2,3;
getsockopt STDIN, 1,2;
getsockname STDIN;
getpeername STDIN;
closedir STDIN;
send FOO, "fred", 1;
bind FOO, "fred" ;
connect FOO, "fred" ;
listen FOO, 2;
accept "fred", FOO;
shutdown FOO, 0;
setsockopt FOO, 1,2,3;
getsockopt FOO, 1,2;
getsockname FOO;
getpeername FOO;
opendir FOO, ".";
send FOO, "fred", 1;
bind FOO, "fred" ;
connect FOO, "fred" ;
listen FOO, 2;
accept "fred", FOO;
shutdown FOO, 0;
setsockopt FOO, 1,2,3;
getsockopt FOO, 1,2;
getsockname FOO;
getpeername FOO;
closedir FOO;
no warnings 'unopened';
send STDIN, "fred", 1;
bind STDIN, "fred" ;
connect STDIN, "fred" ;
listen STDIN, 2;
accept STDIN, "fred" ;
shutdown STDIN, 0;
setsockopt STDIN, 1,2,3;
getsockopt STDIN, 1,2;
getsockname STDIN;
getpeername STDIN;
opendir STDIN, ".";
send STDIN, "fred", 1;
bind STDIN, "fred" ;
connect STDIN, "fred" ;
listen STDIN, 2;
accept "fred", STDIN;
shutdown STDIN, 0;
setsockopt STDIN, 1,2,3;
getsockopt STDIN, 1,2;
getsockname STDIN;
getpeername STDIN;
send FOO, "fred", 1;
bind FOO, "fred" ;
connect FOO, "fred" ;
listen FOO, 2;
accept FOO, "fred" ;
shutdown FOO, 0;
setsockopt FOO, 1,2,3;
getsockopt FOO, 1,2;
getsockname FOO;
getpeername FOO;
opendir FOO, ".";
send FOO, "fred", 1;
bind FOO, "fred" ;
connect FOO, "fred" ;
listen FOO, 2;
accept "fred", FOO;
shutdown FOO, 0;
setsockopt FOO, 1,2,3;
getsockopt FOO, 1,2;
getsockname FOO;
getpeername FOO;
EXPECT
send() on unopened socket FOO at - line 44.
bind() on unopened socket FOO at - line 45.
connect() on unopened socket FOO at - line 46.
listen() on unopened socket FOO at - line 47.
accept() on unopened socket FOO at - line 48.
shutdown() on unopened socket FOO at - line 49.
setsockopt() on unopened socket FOO at - line 50.
getsockopt() on unopened socket FOO at - line 51.
getsockname() on unopened socket FOO at - line 52.
getpeername() on unopened socket FOO at - line 53.
send() on unopened socket FOO at - line 55.
	(Are you trying to call send() on dirhandle FOO?)
bind() on unopened socket FOO at - line 56.
	(Are you trying to call bind() on dirhandle FOO?)
connect() on unopened socket FOO at - line 57.
	(Are you trying to call connect() on dirhandle FOO?)
listen() on unopened socket FOO at - line 58.
	(Are you trying to call listen() on dirhandle FOO?)
accept() on unopened socket FOO at - line 59.
	(Are you trying to call accept() on dirhandle FOO?)
shutdown() on unopened socket FOO at - line 60.
	(Are you trying to call shutdown() on dirhandle FOO?)
setsockopt() on unopened socket FOO at - line 61.
	(Are you trying to call setsockopt() on dirhandle FOO?)
getsockopt() on unopened socket FOO at - line 62.
	(Are you trying to call getsockopt() on dirhandle FOO?)
getsockname() on unopened socket FOO at - line 63.
	(Are you trying to call getsockname() on dirhandle FOO?)
getpeername() on unopened socket FOO at - line 64.
	(Are you trying to call getpeername() on dirhandle FOO?)
########
# pp_sys.c [pp_stat]
use warnings 'newline' ;
stat "abc\ndef";
stat "abcdef\n";
stat "abcdef\n\0";
no warnings 'newline' ;
stat "abc\ndef";
stat "abcdef\n";
stat "abcdef\n\0";
EXPECT
Unsuccessful stat on filename containing newline at - line 4.
Unsuccessful stat on filename containing newline at - line 5.
########
# pp_sys.c [pp_fttext]
use warnings qw(unopened closed) ;
close STDIN ; 
-T STDIN ;
stat(STDIN) ;
-T HOCUS;
stat(POCUS);
stat "../test.pl";
stat *foo;
no warnings qw(unopened closed) ;
-T STDIN ;
stat(STDIN);
-T HOCUS;
stat(POCUS);
stat "../test.pl";
stat *foo;
EXPECT
-T on closed filehandle STDIN at - line 4.
stat() on closed filehandle STDIN at - line 5.
-T on unopened filehandle HOCUS at - line 6.
stat() on unopened filehandle POCUS at - line 7.
stat() on unopened filehandle foo at - line 9.
########
# pp_sys.c [pp_fttext]
use warnings 'newline' ;
-T "abc\ndef" ;
-T "abcdef\n" ;
-T "abcdef\n\0" ;
no warnings 'newline' ;
-T "abc\ndef" ;
-T "abcdef\n" ;
-T "abcdef\n\0" ;
EXPECT
Unsuccessful open on filename containing newline at - line 4.
Unsuccessful open on filename containing newline at - line 5.
########
# pp_sys.c [pp_sysread]
use warnings 'io' ;
if ($^O eq 'dos') {
    print <<EOM ;
SKIPPED
# skipped on dos
EOM
    exit ;
}
my $file = "./xcv" ;
open(F, ">$file") ; 
binmode F;
my $a = sysread(F, $a,10) ;
no warnings 'io' ;
my $a = sysread(F, $a,10) ;
close F ;
use warnings 'io' ;
sysread(F, $a, 10);
read(F, $a, 10);
sysread(NONEXISTENT, $a, 10);
read(NONEXISTENT, $a, 10);
unlink $file ;
EXPECT
Filehandle F opened only for output at - line 13.
sysread() on closed filehandle F at - line 18.
read() on closed filehandle F at - line 19.
sysread() on unopened filehandle NONEXISTENT at - line 20.
read() on unopened filehandle NONEXISTENT at - line 21.
########
# pp_sys.c [pp_binmode]
use warnings 'unopened' ;
binmode(BLARG);
$a = "BLERG";binmode($a);
EXPECT
binmode() on unopened filehandle BLARG at - line 3.
binmode() on unopened filehandle at - line 4.
########
# pp_sys.c [pp_lstat]
use warnings 'io';
open FH, "../harness" or die "# $!";
lstat FH;
lstat *FH;
lstat \*FH;
open my $fh, $0 or die "# $!";
lstat $fh;
lstat *FH{IO};
no warnings 'io';
lstat FH;
lstat $fh;
close FH;
close $fh;
EXPECT
lstat() on filehandle FH at - line 4.
lstat() on filehandle FH at - line 5.
lstat() on filehandle FH at - line 6.
lstat() on filehandle $fh at - line 8.
lstat() on filehandle at - line 9.
########

# pp_sys.c [pp_lstat]
use warnings 'io';
use utf8;
use open qw( :utf8 :std );
open ᶠḨ, "../harness" or die "# $!";
lstat ᶠḨ;
open my $ｆᚺ, $0 or die "# $!";
lstat $ｆᚺ;
no warnings 'io';
lstat ᶠḨ;
lstat $ｆᚺ;
close ᶠḨ;
close $ｆᚺ;
EXPECT
lstat() on filehandle ᶠḨ at - line 7.
lstat() on filehandle $ｆᚺ at - line 9.
########
# pp_sys.c [pp_getc]
use warnings qw(unopened closed) ;
getc FOO;
close STDIN;
getc STDIN;
# Create an empty file
$file = 'getcwarn.tmp';
open FH1, ">$file" or die "# $!"; close FH1;
open FH2, $file    or die "# $!";
getc FH2; # Should not warn at EOF
close FH2;
getc FH2; # Warns, now
unlink $file;
no warnings qw(unopened closed) ;
getc FOO;
getc STDIN;
getc FH2;
EXPECT
getc() on unopened filehandle FOO at - line 3.
getc() on closed filehandle STDIN at - line 5.
getc() on closed filehandle FH2 at - line 12.
########
# pp_sys.c [pp_sselect]
use warnings 'misc';
$x = 1;
select $x, undef, undef, 1;
sub TIESCALAR{bless[]} sub FETCH {"hello"} sub STORE{}
tie $y, "";
select $y, undef, undef, 1;
no warnings 'misc';
select $x, undef, undef, 1;
EXPECT
Non-string passed as bitmask at - line 4.
########
use Config;
BEGIN {
    if (!$Config{d_fchdir}) {
	print <<EOM;
SKIPPED
# fchdir not present
EOM
	exit;
    }
}
opendir FOO, '.'; closedir FOO;
open BAR, '.'; close BAR;
opendir $dh, '.'; closedir $dh;
open $fh, '.'; close $fh;
chdir FOO;
chdir BAR;
chdir $dh;
chdir $fh;
use warnings qw(unopened closed) ;
chdir FOO;
chdir BAR;
chdir $dh;
chdir $fh;
EXPECT
chdir() on unopened filehandle FOO at - line 20.
chdir() on closed filehandle BAR at - line 21.
chdir() on unopened filehandle $dh at - line 22.
chdir() on closed filehandle $fh at - line 23.
########
# pp_sys.c [pp_open]
use warnings;
opendir FOO, ".";
opendir my $foo, ".";
open FOO, "../harness";
open $foo, "../harness";
no warnings qw(io deprecated);
open FOO, "../harness";
open $foo, "../harness";
EXPECT
Opening dirhandle FOO also as a file at - line 5.
Opening dirhandle $foo also as a file at - line 6.
########

# pp_sys.c [pp_open]
use utf8;
use open qw( :utf8 :std );
use warnings;
opendir ＦＯＯ, ".";
opendir $ｆｏｏ, ".";
open ＦＯＯ, "../harness";
open $ｆｏｏ, "../harness";
no warnings qw(io deprecated);
open ＦＯＯ, "../harness";
open $ｆｏｏ, "../harness";
EXPECT
Opening dirhandle ＦＯＯ also as a file at - line 8.
Opening dirhandle $ｆｏｏ also as a file at - line 9.
########
# pp_sys.c [pp_open_dir]
use warnings;
open FOO, "../harness";
open my $foo, "../harness";
opendir FOO, ".";
opendir $foo, ".";
no warnings qw(io deprecated);
opendir FOO, ".";
opendir $foo, ".";
EXPECT
Opening filehandle FOO also as a directory at - line 5.
Opening filehandle $foo also as a directory at - line 6.
########

# pp_sys.c [pp_open_dir]
use utf8;
use open qw( :utf8 :std );
use warnings;
use warnings;
open ＦＯＯ, "../harness";
open $ｆｏｏ, "../harness";
opendir ＦＯＯ, ".";
opendir $ｆｏｏ, ".";
no warnings qw(io deprecated);
opendir ＦＯＯ, ".";
opendir $ｆｏｏ, ".";
EXPECT
Opening filehandle ＦＯＯ also as a directory at - line 9.
Opening filehandle $ｆｏｏ also as a directory at - line 10.
########
# pp_sys.c [pp_*dir]
use Config ;
BEGIN {
    if ( ! $Config{d_telldir}) {
        print <<EOM ;
SKIPPED
# telldir not present
EOM
        exit
    }
}
#line 2
use warnings 'io';
opendir FOO, ".";
opendir $foo, ".";
closedir FOO;
closedir $foo;

readdir(FOO);
telldir(FOO);
seekdir(FOO, 0);
rewinddir(FOO);
closedir(FOO);

readdir($foo);
telldir($foo);
seekdir($foo, 0);
rewinddir($foo);
closedir($foo);

EXPECT
readdir() attempted on invalid dirhandle FOO at - line 8.
telldir() attempted on invalid dirhandle FOO at - line 9.
seekdir() attempted on invalid dirhandle FOO at - line 10.
rewinddir() attempted on invalid dirhandle FOO at - line 11.
closedir() attempted on invalid dirhandle FOO at - line 12.
readdir() attempted on invalid dirhandle $foo at - line 14.
telldir() attempted on invalid dirhandle $foo at - line 15.
seekdir() attempted on invalid dirhandle $foo at - line 16.
rewinddir() attempted on invalid dirhandle $foo at - line 17.
closedir() attempted on invalid dirhandle $foo at - line 18.
########

# pp_sys.c [pp_*dir]
use Config ;
BEGIN {
    if ( ! $Config{d_telldir}) {
        print <<EOM ;
SKIPPED
# telldir not present
EOM
        exit
    }
}
#line 3
use utf8;
use open qw( :utf8 :std );
use warnings 'io';
opendir ＦＯＯ, ".";
opendir $ｆｏｏ, ".";
opendir ＦＯＯ, ".";
opendir $ｆｏｏ, ".";
closedir ＦＯＯ;
closedir $ｆｏｏ;

readdir(ＦＯＯ);
telldir(ＦＯＯ);
seekdir(ＦＯＯ, 0);
rewinddir(ＦＯＯ);
closedir(ＦＯＯ);

readdir($ｆｏｏ);
telldir($ｆｏｏ);
seekdir($ｆｏｏ, 0);
rewinddir($ｆｏｏ);
closedir($ｆｏｏ);

EXPECT
readdir() attempted on invalid dirhandle ＦＯＯ at - line 13.
telldir() attempted on invalid dirhandle ＦＯＯ at - line 14.
seekdir() attempted on invalid dirhandle ＦＯＯ at - line 15.
rewinddir() attempted on invalid dirhandle ＦＯＯ at - line 16.
closedir() attempted on invalid dirhandle ＦＯＯ at - line 17.
readdir() attempted on invalid dirhandle $ｆｏｏ at - line 19.
telldir() attempted on invalid dirhandle $ｆｏｏ at - line 20.
seekdir() attempted on invalid dirhandle $ｆｏｏ at - line 21.
rewinddir() attempted on invalid dirhandle $ｆｏｏ at - line 22.
closedir() attempted on invalid dirhandle $ｆｏｏ at - line 23.
########

# pp_sys.c [pp_gmtime]
gmtime("NaN");
localtime("NaN");
use warnings "overflow";
gmtime("NaN");
localtime("NaN");

EXPECT
gmtime(NaN) too large at - line 6.
gmtime(NaN) failed at - line 6.
localtime(NaN) too large at - line 7.
localtime(NaN) failed at - line 7.

########
# pp_sys.c [pp_alarm]
alarm(-1);
no warnings "misc";
alarm(-1);

EXPECT
alarm() with negative argument at - line 2.

########
# pp_sys.c [pp_sleep]
sleep(-1);
no warnings "misc";
sleep(-1);

EXPECT
sleep() with negative argument at - line 2.
########
# NAME sysread() deprecated on :utf8
use warnings 'deprecated';
open my $fh, "<:raw", "../harness" or die "# $!";
my $buf;
sysread $fh, $buf, 10;
binmode $fh, ':utf8';
sysread $fh, $buf, 10;
EXPECT
sysread() is deprecated on :utf8 handles at - line 6.
########
# NAME syswrite() deprecated on :utf8
my $file = "syswwarn.tmp";
use warnings 'deprecated';
open my $fh, ">:raw", $file or die "# $!";
syswrite $fh, 'ABC';
binmode $fh, ':utf8';
syswrite $fh, 'ABC';
close $fh;
unlink $file;
EXPECT
syswrite() is deprecated on :utf8 handles at - line 6.
@


1.1
log
@Initial revision
@
text
@d106 6
d138 2
d142 1
d146 3
d151 1
d153 1
d155 1
a156 1
write() on closed filehandle STDIN at - line 6.
d158 1
d162 27
d240 8
d297 1
a297 1
use warnings 'io' ;
d339 23
a361 1
no warnings 'io' ;
d383 21
d436 140
d579 2
d583 2
d586 2
a587 1
Unsuccessful stat on filename containing newline at - line 3.
d596 2
d603 2
d610 1
d615 2
d619 2
d622 2
a623 1
Unsuccessful open on filename containing newline at - line 3.
d636 1
d641 5
d648 5
a652 1
Filehandle F opened only for output at - line 12.
d664 1
a664 1
open FH, "harness" or die "# $!";
d666 2
d670 1
d678 22
a699 1
lstat() on filehandle $fh at - line 6.
d722 243
@


1.1.1.1
log
@stock perl 5.8.0 from CPAN
@
text
@@


1.1.1.2
log
@perl 5.8.2 from CPAN
@
text
@a391 5
use warnings 'io' ;
sysread(F, $a, 10);
read(F, $a, 10);
sysread(NONEXISTENT, $a, 10);
read(NONEXISTENT, $a, 10);
a394 4
sysread() on closed filehandle F at - line 17.
read() on closed filehandle F at - line 18.
sysread() on unopened filehandle NONEXISTENT at - line 19.
read() on unopened filehandle NONEXISTENT at - line 20.
@


1.1.1.3
log
@perl 5.8.8 import
@
text
@a105 2
  Non-string passed as bitmask			[pp_sselect]

a448 9
########
# pp_sys.c [pp_sselect]
use warnings 'misc';
$x = 1;
select $x, undef, undef, undef;
no warnings 'misc';
select $x, undef, undef, undef;
EXPECT
Non-string passed as bitmask at - line 4.
@


1.1.1.4
log
@import perl 5.10.0 from CPAN
@
text
@a199 8
use warnings 'io' ;
syswrite STDIN, "fred";
no warnings 'io' ;
syswrite STDIN, "fred";
EXPECT
Filehandle STDIN opened only for input at - line 3.
########
# pp_sys.c [pp_send]
d455 1
a455 1
select $x, undef, undef, 1;
d457 1
a457 1
select $x, undef, undef, 1;
a459 55
########
use Config;
BEGIN {
    if (!$Config{d_fchdir}) {
	print <<EOM;
SKIPPED
# fchdir not present
EOM
	exit;
    }
}
opendir FOO, '.'; closedir FOO;
open BAR, '.'; close BAR;
opendir $dh, '.'; closedir $dh;
open $fh, '.'; close $fh;
chdir FOO;
chdir BAR;
chdir $dh;
chdir $fh;
use warnings qw(unopened closed) ;
chdir FOO;
chdir BAR;
chdir $dh;
chdir $fh;
EXPECT
chdir() on unopened filehandle FOO at - line 20.
chdir() on closed filehandle BAR at - line 21.
chdir() on unopened filehandle $dh at - line 22.
chdir() on closed filehandle $fh at - line 23.
########
# pp_sys.c [pp_open]
use warnings;
opendir FOO, ".";
opendir my $foo, ".";
open FOO, "TEST";
open $foo, "TEST";
no warnings qw(io deprecated);
open FOO, "TEST";
open $foo, "TEST";
EXPECT
Opening dirhandle FOO also as a file at - line 5.
Opening dirhandle $foo also as a file at - line 6.
########
# pp_sys.c [pp_open_dir]
use warnings;
open FOO, "TEST";
open my $foo, "TEST";
opendir FOO, ".";
opendir $foo, ".";
no warnings qw(io deprecated);
opendir FOO, ".";
opendir $foo, ".";
EXPECT
Opening filehandle FOO also as a directory at - line 5.
Opening filehandle $foo also as a directory at - line 6.
@


1.1.1.5
log
@import perl 5.16.3 from CPAN - worked on by Andrew Fresh and myself
@
text
@a133 2
format FOO =
.
a135 1
write FOO;
a138 3
opendir FOO, ".";
write FOO;
closedir FOO;
a140 1
write FOO;
a141 1
opendir FOO, ".";
a142 1
write FOO;
d144 1
a145 1
write() on closed filehandle STDIN at - line 11.
a147 28
########
# pp_sys.c [pp_leavewrite]
use warnings 'unopened';
format STDIN =
.
format FOO =
.
close STDIN;
write STDIN;
write FOO;
opendir STDIN, ".";
write STDIN;
closedir STDIN;
opendir FOO, ".";
write FOO;
closedir FOO;
no warnings 'unopened';
write STDIN;
write FOO;
opendir STDIN, ".";
opendir FOO, ".";
write STDIN;
write FOO;
EXPECT
write() on unopened filehandle FOO at - line 10.
write() on unopened filehandle FOO at - line 15.
	(Are you trying to call write() on dirhandle FOO?)
########
d257 1
a257 1
use warnings 'closed';
d299 1
a299 23
send FOO, "fred", 1;
bind FOO, "fred" ;
connect FOO, "fred" ;
listen FOO, 2;
accept "fred", FOO;
shutdown FOO, 0;
setsockopt FOO, 1,2,3;
getsockopt FOO, 1,2;
getsockname FOO;
getpeername FOO;
opendir FOO, ".";
send FOO, "fred", 1;
bind FOO, "fred" ;
connect FOO, "fred" ;
listen FOO, 2;
accept "fred", FOO;
shutdown FOO, 0;
setsockopt FOO, 1,2,3;
getsockopt FOO, 1,2;
getsockname FOO;
getpeername FOO;
closedir FOO;
no warnings 'closed';
a320 21
send FOO, "fred", 1;
bind FOO, "fred" ;
connect FOO, "fred" ;
listen FOO, 2;
accept FOO, "fred" ;
shutdown FOO, 0;
setsockopt FOO, 1,2,3;
getsockopt FOO, 1,2;
getsockname FOO;
getpeername FOO;
opendir FOO, ".";
send FOO, "fred", 1;
bind FOO, "fred" ;
connect FOO, "fred" ;
listen FOO, 2;
accept "fred", FOO;
shutdown FOO, 0;
setsockopt FOO, 1,2,3;
getsockopt FOO, 1,2;
getsockname FOO;
getpeername FOO;
a352 140
# pp_sys.c [pp_prtf pp_send pp_bind pp_connect pp_listen pp_accept pp_shutdown pp_ssockopt ppp_getpeername]
use warnings 'unopened';
use Config; 
BEGIN { 
  if ( $^O ne 'VMS' and ! $Config{d_socket}) {
    print <<EOM ;
SKIPPED
# send not present
# bind not present
# connect not present
# accept not present
# shutdown not present
# setsockopt not present
# getsockopt not present
# getsockname not present
# getpeername not present
EOM
    exit ;
  } 
}
close STDIN; 
send STDIN, "fred", 1;
bind STDIN, "fred" ;
connect STDIN, "fred" ;
listen STDIN, 2;
accept "fred", STDIN;
shutdown STDIN, 0;
setsockopt STDIN, 1,2,3;
getsockopt STDIN, 1,2;
getsockname STDIN;
getpeername STDIN;
opendir STDIN, ".";
send STDIN, "fred", 1;
bind STDIN, "fred" ;
connect STDIN, "fred" ;
listen STDIN, 2;
accept "fred", STDIN;
shutdown STDIN, 0;
setsockopt STDIN, 1,2,3;
getsockopt STDIN, 1,2;
getsockname STDIN;
getpeername STDIN;
closedir STDIN;
send FOO, "fred", 1;
bind FOO, "fred" ;
connect FOO, "fred" ;
listen FOO, 2;
accept "fred", FOO;
shutdown FOO, 0;
setsockopt FOO, 1,2,3;
getsockopt FOO, 1,2;
getsockname FOO;
getpeername FOO;
opendir FOO, ".";
send FOO, "fred", 1;
bind FOO, "fred" ;
connect FOO, "fred" ;
listen FOO, 2;
accept "fred", FOO;
shutdown FOO, 0;
setsockopt FOO, 1,2,3;
getsockopt FOO, 1,2;
getsockname FOO;
getpeername FOO;
closedir FOO;
no warnings 'unopened';
send STDIN, "fred", 1;
bind STDIN, "fred" ;
connect STDIN, "fred" ;
listen STDIN, 2;
accept STDIN, "fred" ;
shutdown STDIN, 0;
setsockopt STDIN, 1,2,3;
getsockopt STDIN, 1,2;
getsockname STDIN;
getpeername STDIN;
opendir STDIN, ".";
send STDIN, "fred", 1;
bind STDIN, "fred" ;
connect STDIN, "fred" ;
listen STDIN, 2;
accept "fred", STDIN;
shutdown STDIN, 0;
setsockopt STDIN, 1,2,3;
getsockopt STDIN, 1,2;
getsockname STDIN;
getpeername STDIN;
send FOO, "fred", 1;
bind FOO, "fred" ;
connect FOO, "fred" ;
listen FOO, 2;
accept FOO, "fred" ;
shutdown FOO, 0;
setsockopt FOO, 1,2,3;
getsockopt FOO, 1,2;
getsockname FOO;
getpeername FOO;
opendir FOO, ".";
send FOO, "fred", 1;
bind FOO, "fred" ;
connect FOO, "fred" ;
listen FOO, 2;
accept "fred", FOO;
shutdown FOO, 0;
setsockopt FOO, 1,2,3;
getsockopt FOO, 1,2;
getsockname FOO;
getpeername FOO;
EXPECT
send() on unopened socket FOO at - line 44.
bind() on unopened socket FOO at - line 45.
connect() on unopened socket FOO at - line 46.
listen() on unopened socket FOO at - line 47.
accept() on unopened socket FOO at - line 48.
shutdown() on unopened socket FOO at - line 49.
setsockopt() on unopened socket FOO at - line 50.
getsockopt() on unopened socket FOO at - line 51.
getsockname() on unopened socket FOO at - line 52.
getpeername() on unopened socket FOO at - line 53.
send() on unopened socket FOO at - line 55.
	(Are you trying to call send() on dirhandle FOO?)
bind() on unopened socket FOO at - line 56.
	(Are you trying to call bind() on dirhandle FOO?)
connect() on unopened socket FOO at - line 57.
	(Are you trying to call connect() on dirhandle FOO?)
listen() on unopened socket FOO at - line 58.
	(Are you trying to call listen() on dirhandle FOO?)
accept() on unopened socket FOO at - line 59.
	(Are you trying to call accept() on dirhandle FOO?)
shutdown() on unopened socket FOO at - line 60.
	(Are you trying to call shutdown() on dirhandle FOO?)
setsockopt() on unopened socket FOO at - line 61.
	(Are you trying to call setsockopt() on dirhandle FOO?)
getsockopt() on unopened socket FOO at - line 62.
	(Are you trying to call getsockopt() on dirhandle FOO?)
getsockname() on unopened socket FOO at - line 63.
	(Are you trying to call getsockname() on dirhandle FOO?)
getpeername() on unopened socket FOO at - line 64.
	(Are you trying to call getpeername() on dirhandle FOO?)
########
a367 2
stat "../test.pl";
stat *foo;
a372 2
stat "../test.pl";
stat *foo;
a377 1
stat() on unopened filehandle foo at - line 9.
d425 1
a425 1
open FH, "../harness" or die "# $!";
a426 2
lstat *FH;
lstat \*FH;
a428 1
lstat *FH{IO};
d436 1
a436 22
lstat() on filehandle FH at - line 5.
lstat() on filehandle FH at - line 6.
lstat() on filehandle $fh at - line 8.
lstat() on filehandle at - line 9.
########

# pp_sys.c [pp_lstat]
use warnings 'io';
use utf8;
use open qw( :utf8 :std );
open ᶠḨ, "../harness" or die "# $!";
lstat ᶠḨ;
open my $ｆᚺ, $0 or die "# $!";
lstat $ｆᚺ;
no warnings 'io';
lstat ᶠḨ;
lstat $ｆᚺ;
close ᶠḨ;
close $ｆᚺ;
EXPECT
lstat() on filehandle ᶠḨ at - line 7.
lstat() on filehandle $ｆᚺ at - line 9.
a463 3
sub TIESCALAR{bless[]} sub FETCH {"hello"} sub STORE{}
tie $y, "";
select $y, undef, undef, 1;
d502 2
a503 2
open FOO, "../harness";
open $foo, "../harness";
d505 2
a506 2
open FOO, "../harness";
open $foo, "../harness";
a510 16

# pp_sys.c [pp_open]
use utf8;
use open qw( :utf8 :std );
use warnings;
opendir ＦＯＯ, ".";
opendir $ｆｏｏ, ".";
open ＦＯＯ, "../harness";
open $ｆｏｏ, "../harness";
no warnings qw(io deprecated);
open ＦＯＯ, "../harness";
open $ｆｏｏ, "../harness";
EXPECT
Opening dirhandle ＦＯＯ also as a file at - line 8.
Opening dirhandle $ｆｏｏ also as a file at - line 9.
########
d513 2
a514 2
open FOO, "../harness";
open my $foo, "../harness";
a522 84
########

# pp_sys.c [pp_open_dir]
use utf8;
use open qw( :utf8 :std );
use warnings;
use warnings;
open ＦＯＯ, "../harness";
open $ｆｏｏ, "../harness";
opendir ＦＯＯ, ".";
opendir $ｆｏｏ, ".";
no warnings qw(io deprecated);
opendir ＦＯＯ, ".";
opendir $ｆｏｏ, ".";
EXPECT
Opening filehandle ＦＯＯ also as a directory at - line 9.
Opening filehandle $ｆｏｏ also as a directory at - line 10.
########
# pp_sys.c [pp_*dir]
use warnings 'io';
opendir FOO, ".";
opendir $foo, ".";
closedir FOO;
closedir $foo;

readdir(FOO);
telldir(FOO);
seekdir(FOO, 0);
rewinddir(FOO);
closedir(FOO);

readdir($foo);
telldir($foo);
seekdir($foo, 0);
rewinddir($foo);
closedir($foo);

EXPECT
readdir() attempted on invalid dirhandle FOO at - line 8.
telldir() attempted on invalid dirhandle FOO at - line 9.
seekdir() attempted on invalid dirhandle FOO at - line 10.
rewinddir() attempted on invalid dirhandle FOO at - line 11.
closedir() attempted on invalid dirhandle FOO at - line 12.
readdir() attempted on invalid dirhandle $foo at - line 14.
telldir() attempted on invalid dirhandle $foo at - line 15.
seekdir() attempted on invalid dirhandle $foo at - line 16.
rewinddir() attempted on invalid dirhandle $foo at - line 17.
closedir() attempted on invalid dirhandle $foo at - line 18.
########

# pp_sys.c [pp_*dir]
use utf8;
use open qw( :utf8 :std );
use warnings 'io';
opendir ＦＯＯ, ".";
opendir $ｆｏｏ, ".";
opendir ＦＯＯ, ".";
opendir $ｆｏｏ, ".";
closedir ＦＯＯ;
closedir $ｆｏｏ;

readdir(ＦＯＯ);
telldir(ＦＯＯ);
seekdir(ＦＯＯ, 0);
rewinddir(ＦＯＯ);
closedir(ＦＯＯ);

readdir($ｆｏｏ);
telldir($ｆｏｏ);
seekdir($ｆｏｏ, 0);
rewinddir($ｆｏｏ);
closedir($ｆｏｏ);

EXPECT
readdir() attempted on invalid dirhandle ＦＯＯ at - line 13.
telldir() attempted on invalid dirhandle ＦＯＯ at - line 14.
seekdir() attempted on invalid dirhandle ＦＯＯ at - line 15.
rewinddir() attempted on invalid dirhandle ＦＯＯ at - line 16.
closedir() attempted on invalid dirhandle ＦＯＯ at - line 17.
readdir() attempted on invalid dirhandle $ｆｏｏ at - line 19.
telldir() attempted on invalid dirhandle $ｆｏｏ at - line 20.
seekdir() attempted on invalid dirhandle $ｆｏｏ at - line 21.
rewinddir() attempted on invalid dirhandle $ｆｏｏ at - line 22.
closedir() attempted on invalid dirhandle $ｆｏｏ at - line 23.
@


1.1.1.6
log
@Import perl-5.20.1
@
text
@d157 1
d181 2
a182 2
write() on unopened filehandle FOO at - line 9.
write() on unopened filehandle FOO at - line 14.
a809 11
use Config ;
BEGIN {
    if ( ! $Config{d_telldir}) {
        print <<EOM ;
SKIPPED
# telldir not present
EOM
        exit
    }
}
#line 2
a841 11
use Config ;
BEGIN {
    if ( ! $Config{d_telldir}) {
        print <<EOM ;
SKIPPED
# telldir not present
EOM
        exit
    }
}
#line 3
@


1.1.1.7
log
@Import perl-5.20.2
@
text
@a107 4
  %s too large					[pp_gmtime]

  %s failed					[pp_gmtime]

a895 20
########
# pp_sys.c [pp_gmtime]
BEGIN {
    print <<EOM;
SKIPPED
# NaN values not produced consistently in 5.20.x
EOM
    exit;
}
gmtime("NaN");
localtime("NaN");
use warnings "overflow";
gmtime("NaN");
localtime("NaN");

EXPECT
gmtime(NaN) too large at - line 6.
gmtime(NaN) failed at - line 6.
localtime(NaN) too large at - line 7.
localtime(NaN) failed at - line 7.
@


1.1.1.8
log
@Import perl-5.24.2
@
text
@a578 2
stat "abcdef\n";
stat "abcdef\n\0";
a580 2
stat "abcdef\n";
stat "abcdef\n\0";
d582 1
a582 2
Unsuccessful stat on filename containing newline at - line 4.
Unsuccessful stat on filename containing newline at - line 5.
a609 2
-T "abcdef\n" ;
-T "abcdef\n\0" ;
a611 2
-T "abcdef\n" ;
-T "abcdef\n\0" ;
d613 1
a613 2
Unsuccessful open on filename containing newline at - line 4.
Unsuccessful open on filename containing newline at - line 5.
a625 1
binmode F;
d637 5
a641 5
Filehandle F opened only for output at - line 13.
sysread() on closed filehandle F at - line 18.
read() on closed filehandle F at - line 19.
sysread() on unopened filehandle NONEXISTENT at - line 20.
read() on unopened filehandle NONEXISTENT at - line 21.
a900 1

d902 7
a919 40

########
# pp_sys.c [pp_alarm]
alarm(-1);
no warnings "misc";
alarm(-1);

EXPECT
alarm() with negative argument at - line 2.

########
# pp_sys.c [pp_sleep]
sleep(-1);
no warnings "misc";
sleep(-1);

EXPECT
sleep() with negative argument at - line 2.
########
# NAME sysread() deprecated on :utf8
use warnings 'deprecated';
open my $fh, "<:raw", "../harness" or die "# $!";
my $buf;
sysread $fh, $buf, 10;
binmode $fh, ':utf8';
sysread $fh, $buf, 10;
EXPECT
sysread() is deprecated on :utf8 handles at - line 6.
########
# NAME syswrite() deprecated on :utf8
my $file = "syswwarn.tmp";
use warnings 'deprecated';
open my $fh, ">:raw", $file or die "# $!";
syswrite $fh, 'ABC';
binmode $fh, ':utf8';
syswrite $fh, 'ABC';
close $fh;
unlink $file;
EXPECT
syswrite() is deprecated on :utf8 handles at - line 6.
@


