head	1.1;
branch	1.1.1;
access;
symbols
	OPENBSD_6_0:1.1.1.4.0.10
	OPENBSD_6_0_BASE:1.1.1.4
	OPENBSD_5_9:1.1.1.4.0.4
	OPENBSD_5_9_BASE:1.1.1.4
	OPENBSD_5_8:1.1.1.4.0.6
	OPENBSD_5_8_BASE:1.1.1.4
	PERL_5_20_2:1.1.1.4
	OPENBSD_5_7:1.1.1.4.0.2
	OPENBSD_5_7_BASE:1.1.1.4
	PERL_5_20_1:1.1.1.4
	OPENBSD_5_6:1.1.1.3.0.8
	OPENBSD_5_6_BASE:1.1.1.3
	PERL_5_18_2:1.1.1.3
	PERL:1.1.1
	OPENBSD_5_5:1.1.1.3.0.6
	OPENBSD_5_5_BASE:1.1.1.3
	OPENBSD_5_4:1.1.1.3.0.2
	OPENBSD_5_4_BASE:1.1.1.3
	PERL_5_16_3:1.1.1.3
	OPENBSD_5_3:1.1.1.2.0.18
	OPENBSD_5_3_BASE:1.1.1.2
	OPENBSD_5_2:1.1.1.2.0.16
	OPENBSD_5_2_BASE:1.1.1.2
	OPENBSD_5_1_BASE:1.1.1.2
	OPENBSD_5_1:1.1.1.2.0.14
	OPENBSD_5_0:1.1.1.2.0.12
	OPENBSD_5_0_BASE:1.1.1.2
	OPENBSD_4_9:1.1.1.2.0.10
	OPENBSD_4_9_BASE:1.1.1.2
	PERL_5_12_2:1.1.1.2
	OPENBSD_4_8:1.1.1.2.0.8
	OPENBSD_4_8_BASE:1.1.1.2
	OPENBSD_4_7:1.1.1.2.0.4
	OPENBSD_4_7_BASE:1.1.1.2
	PERL_5_10_1:1.1.1.2
	OPENBSD_4_6:1.1.1.2.0.6
	OPENBSD_4_6_BASE:1.1.1.2
	OPENBSD_4_5:1.1.1.2.0.2
	OPENBSD_4_5_BASE:1.1.1.2
	PERL_5_10_0:1.1.1.2
	OPENBSD_4_4:1.1.1.1.0.24
	OPENBSD_4_4_BASE:1.1.1.1
	OPENBSD_4_3:1.1.1.1.0.22
	OPENBSD_4_3_BASE:1.1.1.1
	OPENBSD_4_2:1.1.1.1.0.20
	OPENBSD_4_2_BASE:1.1.1.1
	OPENBSD_4_1:1.1.1.1.0.18
	OPENBSD_4_1_BASE:1.1.1.1
	OPENBSD_4_0:1.1.1.1.0.16
	OPENBSD_4_0_BASE:1.1.1.1
	PERL_5_8_8:1.1.1.1
	OPENBSD_3_9:1.1.1.1.0.14
	OPENBSD_3_9_BASE:1.1.1.1
	OPENBSD_3_8:1.1.1.1.0.12
	OPENBSD_3_8_BASE:1.1.1.1
	OPENBSD_3_7:1.1.1.1.0.10
	OPENBSD_3_7_BASE:1.1.1.1
	PERL_5_8_6:1.1.1.1
	OPENBSD_3_6:1.1.1.1.0.8
	OPENBSD_3_6_BASE:1.1.1.1
	PERL_5_8_5:1.1.1.1
	PERL_5_8_3:1.1.1.1
	OPENBSD_3_5:1.1.1.1.0.6
	OPENBSD_3_5_BASE:1.1.1.1
	PERL_5_8_2:1.1.1.1
	OPENBSD_3_4:1.1.1.1.0.4
	OPENBSD_3_4_BASE:1.1.1.1
	OPENBSD_3_3:1.1.1.1.0.2
	OPENBSD_3_3_BASE:1.1.1.1
	PERL_5_8_0:1.1.1.1
	CPAN:1.1.1;
locks; strict;
comment	@# @;
expand	@o@;


1.1
date	2002.10.27.22.15.10;	author millert;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	2002.10.27.22.15.10;	author millert;	state Exp;
branches;
next	1.1.1.2;

1.1.1.2
date	2008.09.29.17.19.00;	author millert;	state Exp;
branches;
next	1.1.1.3;

1.1.1.3
date	2013.03.25.20.09.34;	author sthen;	state Exp;
branches;
next	1.1.1.4;

1.1.1.4
date	2014.11.17.20.53.17;	author afresh1;	state Exp;
branches;
next	;
commitid	B31cAbBIXiCqnL97;


desc
@@


1.1
log
@Initial revision
@
text
@  util.c AOK
 
     Illegal octal digit ignored 
	my $a = oct "029" ;

     Illegal hex digit ignored 
	my $a = hex "0xv9" ;

     Illegal binary digit ignored
      my $a = oct "0b9" ;
     
     Integer overflow in binary number
	my $a =  oct "0b111111111111111111111111111111111111111111" ;
     Binary number > 0b11111111111111111111111111111111 non-portable
   	$a =  oct "0b111111111111111111111111111111111" ;
     Integer overflow in octal number
	my $a =  oct "077777777777777777777777777777" ;
     Octal number > 037777777777 non-portable
   	$a =  oct "0047777777777" ;
     Integer overflow in hexadecimal number
	my $a =  hex "0xffffffffffffffffffff" ;
     Hexadecimal number > 0xffffffff non-portable
   	$a =  hex "0x1ffffffff" ;

__END__
# util.c
use warnings 'digit' ;
my $a = oct "029" ;
no warnings 'digit' ;
$a = oct "029" ;
EXPECT
Illegal octal digit '9' ignored at - line 3.
########
# util.c
use warnings 'digit' ;
my $a =  hex "0xv9" ;
no warnings 'digit' ;
$a =  hex "0xv9" ;
EXPECT
Illegal hexadecimal digit 'v' ignored at - line 3.
########
# util.c
use warnings 'digit' ;
my $a =  oct "0b9" ;
no warnings 'digit' ;
$a =  oct "0b9" ;
EXPECT
Illegal binary digit '9' ignored at - line 3.
########
# util.c
use warnings 'overflow' ;
my $a =  oct "0b11111111111111111111111111111111111111111111111111111111111111111";
no warnings 'overflow' ;
$a =  oct "0b11111111111111111111111111111111111111111111111111111111111111111";
EXPECT
Integer overflow in binary number at - line 3.
########
# util.c
use warnings 'overflow' ;
my $a =  hex "0xffffffffffffffffffff" ;
no warnings 'overflow' ;
$a =  hex "0xffffffffffffffffffff" ;
EXPECT
Integer overflow in hexadecimal number at - line 3.
########
# util.c
use warnings 'overflow' ;
my $a =  oct "077777777777777777777777777777" ;
no warnings 'overflow' ;
$a =  oct "077777777777777777777777777777" ;
EXPECT
Integer overflow in octal number at - line 3.
########
# util.c
use warnings 'portable' ;
my $a =  oct "0b011111111111111111111111111111110" ;
   $a =  oct "0b011111111111111111111111111111111" ;
   $a =  oct "0b111111111111111111111111111111111" ;
no warnings 'portable' ;
   $a =  oct "0b011111111111111111111111111111110" ;
   $a =  oct "0b011111111111111111111111111111111" ;
   $a =  oct "0b111111111111111111111111111111111" ;
EXPECT
Binary number > 0b11111111111111111111111111111111 non-portable at - line 5.
########
# util.c
use warnings 'portable' ;
my $a =  hex "0x0fffffffe" ;
   $a =  hex "0x0ffffffff" ;
   $a =  hex "0x1ffffffff" ;
no warnings 'portable' ;
   $a =  hex "0x0fffffffe" ;
   $a =  hex "0x0ffffffff" ;
   $a =  hex "0x1ffffffff" ;
EXPECT
Hexadecimal number > 0xffffffff non-portable at - line 5.
########
# util.c
use warnings 'portable' ;
my $a =  oct "0037777777776" ;
   $a =  oct "0037777777777" ;
   $a =  oct "0047777777777" ;
no warnings 'portable' ;
   $a =  oct "0037777777776" ;
   $a =  oct "0037777777777" ;
   $a =  oct "0047777777777" ;
EXPECT
Octal number > 037777777777 non-portable at - line 5.
########
# util.c
use warnings;
$x = 1;
if ($x) {
    print $y;
}
EXPECT
Name "main::y" used only once: possible typo at - line 5.
Use of uninitialized value in print at - line 5.
########
# util.c
use warnings;
$x = 1;
if ($x) {
    $x++;
    print $y;
}
EXPECT
Name "main::y" used only once: possible typo at - line 6.
Use of uninitialized value in print at - line 6.
########
# util.c
use warnings;
$x = 0;
if ($x) {
    print "1\n";
} elsif (!$x) {
    print $y;
} else {
    print "0\n";
}
EXPECT
Name "main::y" used only once: possible typo at - line 7.
Use of uninitialized value in print at - line 7.
########
# util.c
use warnings;
$x = 0;
if ($x) {
    print "1\n";
} elsif (!$x) {
    $x++;
    print $y;
} else {
    print "0\n";
}
EXPECT
Name "main::y" used only once: possible typo at - line 8.
Use of uninitialized value in print at - line 8.
@


1.1.1.1
log
@stock perl 5.8.0 from CPAN
@
text
@@


1.1.1.2
log
@import perl 5.10.0 from CPAN
@
text
@d118 1
a118 1
Use of uninitialized value $y in print at - line 5.
d129 1
a129 1
Use of uninitialized value $y in print at - line 6.
d143 1
a143 1
Use of uninitialized value $y in print at - line 7.
d158 1
a158 1
Use of uninitialized value $y in print at - line 8.
@


1.1.1.3
log
@import perl 5.16.3 from CPAN - worked on by Andrew Fresh and myself
@
text
@a158 120
########
# util.c
use utf8;
use open qw( :utf8 :std );
use warnings;
$ㄒ = 1;
if ($ㄒ) {
    print $ʎ;
}
EXPECT
Name "main::ʎ" used only once: possible typo at - line 7.
Use of uninitialized value $ʎ in print at - line 7.
########
# util.c
use utf8;
use open qw( :utf8 :std );
use warnings;
$ㄒ = 1;
if ($ㄒ) {
    $ㄒ++;
    print $ʎ;
}
EXPECT
Name "main::ʎ" used only once: possible typo at - line 8.
Use of uninitialized value $ʎ in print at - line 8.
########
# util.c
use utf8;
use open qw( :utf8 :std );
use warnings;
$ㄒ = 0;
if ($ㄒ) {
    print "1\n";
} elsif (!$ㄒ) {
    print $ʎ;
} else {
    print "0\n";
}
EXPECT
Name "main::ʎ" used only once: possible typo at - line 9.
Use of uninitialized value $ʎ in print at - line 9.
########
# util.c
use utf8;
use open qw( :utf8 :std );
use warnings;
$ㄒ = 0;
if ($ㄒ) {
    print "1\n";
} elsif (!$ㄒ) {
    $ㄒ++;
    print $ʎ;
} else {
    print "0\n";
}
EXPECT
Name "main::ʎ" used only once: possible typo at - line 10.
Use of uninitialized value $ʎ in print at - line 10.
########
# util.c
use utf8;
use open qw( :utf8 :std );
use warnings;
package 팣칵ぇ;
$ㄒ = 1;
if ($ㄒ) {
    print $ʎ;
}
EXPECT
Name "팣칵ぇ::ʎ" used only once: possible typo at - line 8.
Use of uninitialized value $팣칵ぇ::ʎ in print at - line 8.
########
# util.c
use utf8;
use open qw( :utf8 :std );
use warnings;
package 팣칵ぇ;
$ㄒ = 1;
if ($ㄒ) {
    $ㄒ++;
    print $ʎ;
}
EXPECT
Name "팣칵ぇ::ʎ" used only once: possible typo at - line 9.
Use of uninitialized value $팣칵ぇ::ʎ in print at - line 9.
########
# util.c
use utf8;
use open qw( :utf8 :std );
use warnings;
package 팣칵ぇ;
$ㄒ = 0;
if ($ㄒ) {
    print "1\n";
} elsif (!$ㄒ) {
    print $ʎ;
} else {
    print "0\n";
}
EXPECT
Name "팣칵ぇ::ʎ" used only once: possible typo at - line 10.
Use of uninitialized value $팣칵ぇ::ʎ in print at - line 10.
########
# util.c
use utf8;
use open qw( :utf8 :std );
use warnings;
package 팣칵ぇ;
$ㄒ = 0;
if ($ㄒ) {
    print "1\n";
} elsif (!$ㄒ) {
    $ㄒ++;
    print $ʎ;
} else {
    print "0\n";
}
EXPECT
Name "팣칵ぇ::ʎ" used only once: possible typo at - line 11.
Use of uninitialized value $팣칵ぇ::ʎ in print at - line 11.
@


1.1.1.4
log
@Import perl-5.20.1
@
text
@d109 170
@


