head	1.2;
access;
symbols
	OPENBSD_6_1:1.2.0.4
	OPENBSD_6_1_BASE:1.2
	OPENBSD_6_0:1.1.1.5.0.12
	OPENBSD_6_0_BASE:1.1.1.5
	OPENBSD_5_9:1.1.1.5.0.6
	OPENBSD_5_9_BASE:1.1.1.5
	OPENBSD_5_8:1.1.1.5.0.8
	OPENBSD_5_8_BASE:1.1.1.5
	PERL_5_20_2:1.1.1.5
	OPENBSD_5_7:1.1.1.5.0.2
	OPENBSD_5_7_BASE:1.1.1.5
	PERL_5_20_1:1.1.1.5
	OPENBSD_5_6:1.1.1.5.0.4
	OPENBSD_5_6_BASE:1.1.1.5
	PERL_5_18_2:1.1.1.5
	PERL:1.1.1
	OPENBSD_5_5:1.1.1.4.0.6
	OPENBSD_5_5_BASE:1.1.1.4
	OPENBSD_5_4:1.1.1.4.0.2
	OPENBSD_5_4_BASE:1.1.1.4
	PERL_5_16_3:1.1.1.4
	OPENBSD_5_3:1.1.1.3.0.18
	OPENBSD_5_3_BASE:1.1.1.3
	OPENBSD_5_2:1.1.1.3.0.16
	OPENBSD_5_2_BASE:1.1.1.3
	OPENBSD_5_1_BASE:1.1.1.3
	OPENBSD_5_1:1.1.1.3.0.14
	OPENBSD_5_0:1.1.1.3.0.12
	OPENBSD_5_0_BASE:1.1.1.3
	OPENBSD_4_9:1.1.1.3.0.10
	OPENBSD_4_9_BASE:1.1.1.3
	PERL_5_12_2:1.1.1.3
	OPENBSD_4_8:1.1.1.3.0.8
	OPENBSD_4_8_BASE:1.1.1.3
	OPENBSD_4_7:1.1.1.3.0.4
	OPENBSD_4_7_BASE:1.1.1.3
	PERL_5_10_1:1.1.1.3
	OPENBSD_4_6:1.1.1.3.0.6
	OPENBSD_4_6_BASE:1.1.1.3
	OPENBSD_4_5:1.1.1.3.0.2
	OPENBSD_4_5_BASE:1.1.1.3
	PERL_5_10_0:1.1.1.3
	OPENBSD_4_4:1.1.1.2.0.18
	OPENBSD_4_4_BASE:1.1.1.2
	OPENBSD_4_3:1.1.1.2.0.16
	OPENBSD_4_3_BASE:1.1.1.2
	OPENBSD_4_2:1.1.1.2.0.14
	OPENBSD_4_2_BASE:1.1.1.2
	OPENBSD_4_1:1.1.1.2.0.12
	OPENBSD_4_1_BASE:1.1.1.2
	OPENBSD_4_0:1.1.1.2.0.10
	OPENBSD_4_0_BASE:1.1.1.2
	PERL_5_8_8:1.1.1.2
	OPENBSD_3_9:1.1.1.2.0.8
	OPENBSD_3_9_BASE:1.1.1.2
	OPENBSD_3_8:1.1.1.2.0.6
	OPENBSD_3_8_BASE:1.1.1.2
	OPENBSD_3_7:1.1.1.2.0.4
	OPENBSD_3_7_BASE:1.1.1.2
	PERL_5_8_6:1.1.1.2
	OPENBSD_3_6:1.1.1.2.0.2
	OPENBSD_3_6_BASE:1.1.1.2
	PERL_5_8_5:1.1.1.2
	PERL_5_8_3:1.1.1.1
	OPENBSD_3_5:1.1.1.1.0.6
	OPENBSD_3_5_BASE:1.1.1.1
	PERL_5_8_2:1.1.1.1
	OPENBSD_3_4:1.1.1.1.0.4
	OPENBSD_3_4_BASE:1.1.1.1
	OPENBSD_3_3:1.1.1.1.0.2
	OPENBSD_3_3_BASE:1.1.1.1
	PERL_5_8_0:1.1.1.1
	CPAN:1.1.1;
locks; strict;
comment	@# @;
expand	@o@;


1.2
date	2017.02.05.00.32.20;	author afresh1;	state Exp;
branches;
next	1.1;
commitid	cxJ08BvJA9Pt2PTM;

1.1
date	2002.10.27.22.15.10;	author millert;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	2002.10.27.22.15.10;	author millert;	state Exp;
branches;
next	1.1.1.2;

1.1.1.2
date	2004.08.09.17.48.33;	author millert;	state Exp;
branches;
next	1.1.1.3;

1.1.1.3
date	2008.09.29.17.18.59;	author millert;	state Exp;
branches;
next	1.1.1.4;

1.1.1.4
date	2013.03.25.20.09.34;	author sthen;	state Exp;
branches;
next	1.1.1.5;

1.1.1.5
date	2014.03.24.14.59.09;	author afresh1;	state Exp;
branches;
next	;


desc
@@


1.2
log
@Fix merge issues, remove excess files - match perl-5.24.1 dist
@
text
@Check strict vars functionality

__END__

# no strict, should build & run ok.
Fred ;
my $fred ;
$b = "fred" ;
$a = $$b ;
EXPECT

########

use strict qw(subs refs) ;
$fred ;
EXPECT

########

use strict ;
no strict 'vars' ;
$fred ;
EXPECT

########

# strict vars - no error
use strict 'vars' ;
use vars qw( $freddy) ;
BEGIN { *freddy = \$joe::shmoe; }
$freddy = 2 ;
EXPECT

########

# strict vars - no error
use strict 'vars' ;
use vars qw( $freddy) ;
local $abc::joe ;
my $fred ;
my $b = \$fred ;
$Fred::ABC = 1 ;
$freddy = 2 ;
EXPECT

########

# strict vars - error
use strict ;
$fred ;
EXPECT
Global symbol "$fred" requires explicit package name (did you forget to declare "my $fred"?) at - line 4.
Execution of - aborted due to compilation errors.
########

# strict vars - error
use strict 'vars' ;
<$fred> ;
EXPECT
Global symbol "$fred" requires explicit package name (did you forget to declare "my $fred"?) at - line 4.
Execution of - aborted due to compilation errors.
########

# strict vars - error
use strict 'vars' ;
local $fred ;
EXPECT
Global symbol "$fred" requires explicit package name (did you forget to declare "my $fred"?) at - line 4.
Execution of - aborted due to compilation errors.
########

# Check compile time scope of strict vars pragma
use strict 'vars' ;
{
    no strict ;
    $joe = 1 ;
}
$joe = 1 ;
EXPECT
Variable "$joe" is not imported at - line 8.
Global symbol "$joe" requires explicit package name (did you forget to declare "my $joe"?) at - line 8.
Execution of - aborted due to compilation errors.
########

# Check compile time scope of strict vars pragma
use strict 'vars' ;
use utf8;
use open qw( :utf8 :std );
{
    no strict ;
    $jòè = 1 ;
}
$jòè = 1 ;
EXPECT
Variable "$jòè" is not imported at - line 10.
Global symbol "$jòè" requires explicit package name (did you forget to declare "my $jòè"?) at - line 10.
Execution of - aborted due to compilation errors.
########

# Check compile time scope of strict vars pragma
no strict;
{
    use strict 'vars' ;
    $joe = 1 ;
}
$joe = 1 ;
EXPECT
Global symbol "$joe" requires explicit package name (did you forget to declare "my $joe"?) at - line 6.
Execution of - aborted due to compilation errors.
########

--FILE-- abc
$joe = 1 ;
1;
--FILE-- 
use strict 'vars' ;
require "./abc";
EXPECT

########

--FILE-- abc
use strict 'vars' ;
1;
--FILE-- 
require "./abc";
$joe = 1 ;
EXPECT

########

--FILE-- abc
use strict 'vars' ;
$joe = 1 ;
1;
--FILE-- 
$joe = 1 ;
require "./abc";
EXPECT
Variable "$joe" is not imported at ./abc line 2.
Global symbol "$joe" requires explicit package name (did you forget to declare "my $joe"?) at ./abc line 2.
Compilation failed in require at - line 2.
########

--FILE-- abc
use strict 'vars' ;
use utf8;
use open qw( :utf8 :std );
$jòè = 1 ;
1;
--FILE-- 
use utf8;
use open qw( :utf8 :std );
$jòè = 1 ;
require "./abc";
EXPECT
Variable "$jòè" is not imported at ./abc line 4.
Global symbol "$jòè" requires explicit package name (did you forget to declare "my $jòè"?) at ./abc line 4.
Compilation failed in require at - line 4.
########

--FILE-- abc.pm
use strict 'vars' ;
$joe = 1 ;
1;
--FILE-- 
$joe = 1 ;
use abc;
EXPECT
Variable "$joe" is not imported at abc.pm line 2.
Global symbol "$joe" requires explicit package name (did you forget to declare "my $joe"?) at abc.pm line 2.
Compilation failed in require at - line 2.
BEGIN failed--compilation aborted at - line 2.
########

--FILE-- abc.pm
use strict 'vars' ;
use utf8;
use open qw( :utf8 :std );
$jòè = 1 ;
1;
--FILE-- 
use utf8;
use open qw( :utf8 :std );
$jòè = 1 ;
use abc;
EXPECT
Variable "$jòè" is not imported at abc.pm line 4.
Global symbol "$jòè" requires explicit package name (did you forget to declare "my $jòè"?) at abc.pm line 4.
Compilation failed in require at - line 4.
BEGIN failed--compilation aborted at - line 4.
########

--FILE-- abc.pm
package Burp;
use strict;
$a = 1;$f = 1;$k = 1; # just to get beyond the limit...
$b = 1;$g = 1;$l = 1;
$c = 1;$h = 1;$m = 1;
$d = 1;$i = 1;$n = 1;
$e = 1;$j = 1;$o = 1;
$p = 0b12;
--FILE-- 
use abc;
EXPECT
Global symbol "$f" requires explicit package name (did you forget to declare "my $f"?) at abc.pm line 3.
Global symbol "$k" requires explicit package name (did you forget to declare "my $k"?) at abc.pm line 3.
Global symbol "$g" requires explicit package name (did you forget to declare "my $g"?) at abc.pm line 4.
Global symbol "$l" requires explicit package name (did you forget to declare "my $l"?) at abc.pm line 4.
Global symbol "$c" requires explicit package name (did you forget to declare "my $c"?) at abc.pm line 5.
Global symbol "$h" requires explicit package name (did you forget to declare "my $h"?) at abc.pm line 5.
Global symbol "$m" requires explicit package name (did you forget to declare "my $m"?) at abc.pm line 5.
Global symbol "$d" requires explicit package name (did you forget to declare "my $d"?) at abc.pm line 6.
Global symbol "$i" requires explicit package name (did you forget to declare "my $i"?) at abc.pm line 6.
Global symbol "$n" requires explicit package name (did you forget to declare "my $n"?) at abc.pm line 6.
Global symbol "$e" requires explicit package name (did you forget to declare "my $e"?) at abc.pm line 7.
Global symbol "$j" requires explicit package name (did you forget to declare "my $j"?) at abc.pm line 7.
Global symbol "$o" requires explicit package name (did you forget to declare "my $o"?) at abc.pm line 7.
Global symbol "$p" requires explicit package name (did you forget to declare "my $p"?) at abc.pm line 8.
Illegal binary digit '2' at abc.pm line 8, at end of line
abc.pm has too many errors.
Compilation failed in require at - line 1.
BEGIN failed--compilation aborted at - line 1.
########

# Check scope of pragma with eval
no strict ;
eval {
    $joe = 1 ;
};
print STDERR $@@;
$joe = 1 ;
EXPECT

########

# Check scope of pragma with eval
no strict ;
eval {
    use strict 'vars' ;
    $joe = 1 ;
};
print STDERR $@@;
$joe = 1 ;
EXPECT
Global symbol "$joe" requires explicit package name (did you forget to declare "my $joe"?) at - line 6.
Execution of - aborted due to compilation errors.
########

# Check scope of pragma with eval
use strict 'vars' ;
eval {
    $joe = 1 ;
};
print STDERR $@@;
$joe = 1 ;
EXPECT
Global symbol "$joe" requires explicit package name (did you forget to declare "my $joe"?) at - line 5.
Global symbol "$joe" requires explicit package name (did you forget to declare "my $joe"?) at - line 8.
Execution of - aborted due to compilation errors.
########

# Check scope of pragma with eval
use strict 'vars' ;
eval {
    no strict ;
    $joe = 1 ;
};
print STDERR $@@;
$joe = 1 ;
EXPECT
Variable "$joe" is not imported at - line 9.
Global symbol "$joe" requires explicit package name (did you forget to declare "my $joe"?) at - line 9.
Execution of - aborted due to compilation errors.
########

# Check scope of pragma with eval
use strict 'vars' ;
use utf8;
use open qw( :utf8 :std );
eval {
    no strict ;
    $jòè = 1 ;
};
print STDERR $@@;
$jòè = 1 ;
EXPECT
Variable "$jòè" is not imported at - line 11.
Global symbol "$jòè" requires explicit package name (did you forget to declare "my $jòè"?) at - line 11.
Execution of - aborted due to compilation errors.
########

# Check scope of pragma with eval
no strict ;
eval '
    $joe = 1 ;
'; print STDERR $@@ ;
$joe = 1 ;
EXPECT

########

# Check scope of pragma with eval
no strict ;
eval q[ 
    use strict 'vars' ;
    $joe = 1 ;
]; print STDERR $@@;
EXPECT
Global symbol "$joe" requires explicit package name (did you forget to declare "my $joe"?) at (eval 1) line 3.
########

# Check scope of pragma with eval
use strict 'vars' ;
eval '
    $joe = 1 ;
'; print STDERR $@@ ;
EXPECT
Global symbol "$joe" requires explicit package name (did you forget to declare "my $joe"?) at (eval 1) line 2.
########

# Check scope of pragma with eval
use strict 'vars' ;
eval '
    no strict ;
    $joe = 1 ;
'; print STDERR $@@;
$joe = 1 ;
EXPECT
Global symbol "$joe" requires explicit package name (did you forget to declare "my $joe"?) at - line 8.
Execution of - aborted due to compilation errors.
########

# Check if multiple evals produce same errors
use strict 'vars';
my $ret = eval q{ print $x; };
print $@@;
print "ok 1\n" unless defined $ret;
$ret = eval q{ print $x; };
print $@@;
print "ok 2\n" unless defined $ret;
EXPECT
Global symbol "$x" requires explicit package name (did you forget to declare "my $x"?) at (eval 1) line 1.
ok 1
Global symbol "$x" requires explicit package name (did you forget to declare "my $x"?) at (eval 2) line 1.
ok 2
########

# strict vars with outer our - no error
use strict 'vars' ;
our $freddy;
local $abc::joe ;
my $fred ;
my $b = \$fred ;
$Fred::ABC = 1 ;
$freddy = 2 ;
EXPECT

########

# strict vars with inner our - no error
use strict 'vars' ;
sub foo {
    our $fred;
    $fred;
}
EXPECT

########

# strict vars with outer our, inner use - no error
use strict 'vars' ;
our $fred;
sub foo {
    $fred;
}
EXPECT

########

# strict vars with nested our - no error
use strict 'vars' ;
our $fred;
sub foo {
    our $fred;
    $fred;
}
$fred ;
EXPECT

########

# strict vars with elapsed our - error
use strict 'vars' ;
sub foo {
    our $fred;
    $fred;
}
$fred ;
EXPECT
Variable "$fred" is not imported at - line 8.
Global symbol "$fred" requires explicit package name (did you forget to declare "my $fred"?) at - line 8.
Execution of - aborted due to compilation errors.
########

# strict vars with elapsed our - error
use strict 'vars' ;
use utf8;
use open qw( :utf8 :std );
sub fòò {
    our $frèd;
    $frèd;
}
$frèd ;
EXPECT
Variable "$frèd" is not imported at - line 10.
Global symbol "$frèd" requires explicit package name (did you forget to declare "my $frèd"?) at - line 10.
Execution of - aborted due to compilation errors.
########

# nested our with local - no error
$fred = 1;
use strict 'vars';
{
    local our $fred = 2;
    print $fred,"\n";
}
print our $fred,"\n";
EXPECT
2
1
########

# "nailed" our declaration visibility across package boundaries
use strict 'vars';
our $foo;
$foo = 20;
package Foo;
print $foo, "\n";
EXPECT
20
########

# multiple our declarations in same scope, different packages, no warning
use strict 'vars';
use warnings;
our $foo;
${foo} = 10;
package Foo;
our $foo = 20;
print $foo, "\n";
EXPECT
20
########

# multiple our declarations in same scope, same package, warning
use strict 'vars';
use warnings;
our $foo;
${foo} = 10;
our $foo;
EXPECT
"our" variable $foo redeclared at - line 7.
########

# multiple our declarations in same scope, same package, warning
use strict 'vars';
use warnings;
{ our $x = 1 }
{ our $x = 0 }
our $foo;
{
    our $foo;
    our $foo;
    package Foo;
    our $foo;
}
EXPECT
"our" variable $foo redeclared at - line 9.
	(Did you mean "local" instead of "our"?)
"our" variable $foo redeclared at - line 10.
########

--FILE-- abc
ok
--FILE-- 
# check if our variables are introduced correctly in readline()
package Foo;
use strict 'vars';
our $FH;
open $FH, "abc" or die "Can't open 'abc': $!";
print <$FH>;
close $FH;
EXPECT
ok
########

# Make sure the strict vars failure still occurs
# now that the '@@i should be written as \@@i' failure does not occur
# 20000522 mjd@@plover.com (MJD)
use strict 'vars';
no warnings;
"@@i_like_crackers";
EXPECT
Global symbol "@@i_like_crackers" requires explicit package name (did you forget to declare "my @@i_like_crackers"?) at - line 7.
Execution of - aborted due to compilation errors.
########

# [perl #21914] New bug > 5.8.0. Used to dump core.
use strict 'vars';
@@k = <$k>;
EXPECT
Global symbol "@@k" requires explicit package name (did you forget to declare "my @@k"?) at - line 4.
Global symbol "$k" requires explicit package name (did you forget to declare "my $k"?) at - line 4.
Execution of - aborted due to compilation errors.
########
# [perl #26910] hints not propagated into (?{...})
use strict 'vars';
qr/(?{$foo++})/;
EXPECT
Global symbol "$foo" requires explicit package name (did you forget to declare "my $foo"?) at - line 3.
Execution of - aborted due to compilation errors.
########
# Regex compilation errors weren't UTF-8 clean.
use strict 'vars';
use utf8;
use open qw( :utf8 :std );
qr/(?{$fòò++})/;
EXPECT
Global symbol "$fòò" requires explicit package name (did you forget to declare "my $fòò"?) at - line 5.
Execution of - aborted due to compilation errors.
########
# [perl #73712] 'Variable is not imported' should be suppressible
$dweck;
use strict 'vars';
no warnings;
eval q/$dweck/;
EXPECT
########
# [perl #112316] strict vars getting confused by nulls
# Assigning to a package whose name contains a null
BEGIN { *Foo:: = *{"foo\0bar::"} }
package foo;
*Foo::bar = [];
use strict;
eval 'package Foo; @@bar = 1' or die;
EXPECT
########
# [perl #112316] strict vars getting confused by nulls
# Assigning from within a package whose name contains a null
BEGIN { *Foo:: = *{"foo\0bar::"} }
package Foo;
*foo::bar = [];
use strict;
eval 'package foo; @@bar = 1' or die;
EXPECT
########
# [perl #112316] strict vars getting confused by nulls
# Assigning from one null package to another, with a common prefix
BEGIN { *Foo:: = *{"foo\0foo::"};
        *Bar:: = *{"foo\0bar::"} }
package Foo;
*Bar::bar = [];
use strict;
eval 'package Bar; @@bar = 1' or die;
EXPECT
########
# UTF8 and Latin1 package names equivalent at the byte level
use utf8;
# ĵ in UTF-8 is the same as Äµ in Latin-1
package ĵ;
*Äµ::bar = [];
use strict;
eval 'package Äµ; @@bar = 1' or die;
EXPECT
@


1.1
log
@Initial revision
@
text
@d52 1
a52 1
Global symbol "$fred" requires explicit package name at - line 4.
d60 1
a60 1
Global symbol "$fred" requires explicit package name at - line 4.
d68 1
a68 1
Global symbol "$fred" requires explicit package name at - line 4.
d81 16
a96 1
Global symbol "$joe" requires explicit package name at - line 8.
d108 1
a108 1
Global symbol "$joe" requires explicit package name at - line 6.
d141 1
a141 1
Global symbol "$joe" requires explicit package name at ./abc line 2.
d145 17
d171 1
a171 1
Global symbol "$joe" requires explicit package name at abc.pm line 2.
d177 18
d206 14
a219 14
Global symbol "$f" requires explicit package name at abc.pm line 3.
Global symbol "$k" requires explicit package name at abc.pm line 3.
Global symbol "$g" requires explicit package name at abc.pm line 4.
Global symbol "$l" requires explicit package name at abc.pm line 4.
Global symbol "$c" requires explicit package name at abc.pm line 5.
Global symbol "$h" requires explicit package name at abc.pm line 5.
Global symbol "$m" requires explicit package name at abc.pm line 5.
Global symbol "$d" requires explicit package name at abc.pm line 6.
Global symbol "$i" requires explicit package name at abc.pm line 6.
Global symbol "$n" requires explicit package name at abc.pm line 6.
Global symbol "$e" requires explicit package name at abc.pm line 7.
Global symbol "$j" requires explicit package name at abc.pm line 7.
Global symbol "$o" requires explicit package name at abc.pm line 7.
Global symbol "$p" requires explicit package name at abc.pm line 8.
d246 1
a246 1
Global symbol "$joe" requires explicit package name at - line 6.
d258 2
a259 2
Global symbol "$joe" requires explicit package name at - line 5.
Global symbol "$joe" requires explicit package name at - line 8.
d273 17
a289 1
Global symbol "$joe" requires explicit package name at - line 9.
d310 1
a310 1
Global symbol "$joe" requires explicit package name at (eval 1) line 3.
d319 1
a319 1
Global symbol "$joe" requires explicit package name at (eval 1) line 2.
d330 1
a330 1
Global symbol "$joe" requires explicit package name at - line 8.
d343 1
a343 1
Global symbol "$x" requires explicit package name at (eval 1) line 1.
d345 1
a345 1
Global symbol "$x" requires explicit package name at (eval 2) line 1.
d402 16
a417 1
Global symbol "$fred" requires explicit package name at - line 8.
d463 1
a463 1
"our" variable $foo masks earlier declaration in same scope at - line 7.
d474 1
d481 1
d499 1
a499 1
# now that the `@@i should be written as \@@i' failure does not occur
d505 26
a530 1
Global symbol "@@i_like_crackers" requires explicit package name at - line 7.
d532 44
@


1.1.1.1
log
@stock perl 5.8.0 from CPAN
@
text
@@


1.1.1.2
log
@Import of stock perl 5.8.5
@
text
@a423 7
########
# [perl #26910] hints not propagated into (?{...})
use strict 'vars';
qr/(?{$foo++})/;
EXPECT
Global symbol "$foo" requires explicit package name at (re_eval 1) line 1.
Compilation failed in regexp at - line 3.
@


1.1.1.3
log
@import perl 5.10.0 from CPAN
@
text
@d382 1
a382 1
"our" variable $foo redeclared at - line 7.
a392 1
    our $foo;
a398 1
"our" variable $foo redeclared at - line 10.
a422 9
Execution of - aborted due to compilation errors.
########

# [perl #21914] New bug > 5.8.0. Used to dump core.
use strict 'vars';
@@k = <$k>;
EXPECT
Global symbol "@@k" requires explicit package name at - line 4.
Global symbol "$k" requires explicit package name at - line 4.
@


1.1.1.4
log
@import perl 5.16.3 from CPAN - worked on by Andrew Fresh and myself
@
text
@a85 15
use strict 'vars' ;
use utf8;
use open qw( :utf8 :std );
{
    no strict ;
    $jòè = 1 ;
}
$jòè = 1 ;
EXPECT
Variable "$jòè" is not imported at - line 10.
Global symbol "$jòè" requires explicit package name at - line 10.
Execution of - aborted due to compilation errors.
########

# Check compile time scope of strict vars pragma
a129 17
--FILE-- abc
use strict 'vars' ;
use utf8;
use open qw( :utf8 :std );
$jòè = 1 ;
1;
--FILE-- 
use utf8;
use open qw( :utf8 :std );
$jòè = 1 ;
require "./abc";
EXPECT
Variable "$jòè" is not imported at ./abc line 4.
Global symbol "$jòè" requires explicit package name at ./abc line 4.
Compilation failed in require at - line 4.
########

a144 18
use strict 'vars' ;
use utf8;
use open qw( :utf8 :std );
$jòè = 1 ;
1;
--FILE-- 
use utf8;
use open qw( :utf8 :std );
$jòè = 1 ;
use abc;
EXPECT
Variable "$jòè" is not imported at abc.pm line 4.
Global symbol "$jòè" requires explicit package name at abc.pm line 4.
Compilation failed in require at - line 4.
BEGIN failed--compilation aborted at - line 4.
########

--FILE-- abc.pm
a227 16
use strict 'vars' ;
use utf8;
use open qw( :utf8 :std );
eval {
    no strict ;
    $jòè = 1 ;
};
print STDERR $@@;
$jòè = 1 ;
EXPECT
Variable "$jòè" is not imported at - line 11.
Global symbol "$jòè" requires explicit package name at - line 11.
Execution of - aborted due to compilation errors.
########

# Check scope of pragma with eval
a339 15
# strict vars with elapsed our - error
use strict 'vars' ;
use utf8;
use open qw( :utf8 :std );
sub fòò {
    our $frèd;
    $frèd;
}
$frèd ;
EXPECT
Variable "$frèd" is not imported at - line 10.
Global symbol "$frèd" requires explicit package name at - line 10.
Execution of - aborted due to compilation errors.
########

d418 1
a418 1
# now that the '@@i should be written as \@@i' failure does not occur
a441 53
########
# Regex compilation errors weren't UTF-8 clean.
use strict 'vars';
use utf8;
use open qw( :utf8 :std );
qr/(?{$fòò++})/;
EXPECT
Global symbol "$fòò" requires explicit package name at (re_eval 1) line 1.
Compilation failed in regexp at - line 5.
########
# [perl #73712] 'Variable is not imported' should be suppressible
$dweck;
use strict 'vars';
no warnings;
eval q/$dweck/;
EXPECT
########
# [perl #112316] strict vars getting confused by nulls
# Assigning to a package whose name contains a null
BEGIN { *Foo:: = *{"foo\0bar::"} }
package foo;
*Foo::bar = [];
use strict;
eval 'package Foo; @@bar = 1' or die;
EXPECT
########
# [perl #112316] strict vars getting confused by nulls
# Assigning from within a package whose name contains a null
BEGIN { *Foo:: = *{"foo\0bar::"} }
package Foo;
*foo::bar = [];
use strict;
eval 'package foo; @@bar = 1' or die;
EXPECT
########
# [perl #112316] strict vars getting confused by nulls
# Assigning from one null package to another, with a common prefix
BEGIN { *Foo:: = *{"foo\0foo::"};
        *Bar:: = *{"foo\0bar::"} }
package Foo;
*Bar::bar = [];
use strict;
eval 'package Bar; @@bar = 1' or die;
EXPECT
########
# UTF8 and Latin1 package names equivalent at the byte level
use utf8;
# ĵ in UTF-8 is the same as Äµ in Latin-1
package ĵ;
*Äµ::bar = [];
use strict;
eval 'package Äµ; @@bar = 1' or die;
EXPECT
@


1.1.1.5
log
@Import perl-5.18.2

OK espie@@ sthen@@ deraadt@@
@
text
@d521 2
a522 2
Global symbol "$foo" requires explicit package name at - line 3.
Execution of - aborted due to compilation errors.
d530 2
a531 2
Global symbol "$fòò" requires explicit package name at - line 5.
Execution of - aborted due to compilation errors.
@


