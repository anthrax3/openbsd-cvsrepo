head	1.2;
access;
symbols
	OPENBSD_6_1_BASE:1.2
	OPENBSD_6_0:1.1.1.6.0.10
	OPENBSD_6_0_BASE:1.1.1.6
	OPENBSD_5_9:1.1.1.6.0.4
	OPENBSD_5_9_BASE:1.1.1.6
	OPENBSD_5_8:1.1.1.6.0.6
	OPENBSD_5_8_BASE:1.1.1.6
	PERL_5_20_2:1.1.1.6
	OPENBSD_5_7:1.1.1.6.0.2
	OPENBSD_5_7_BASE:1.1.1.6
	PERL_5_20_1:1.1.1.6
	OPENBSD_5_6:1.1.1.5.0.4
	OPENBSD_5_6_BASE:1.1.1.5
	PERL_5_18_2:1.1.1.5
	PERL:1.1.1
	OPENBSD_5_5:1.1.1.4.0.6
	OPENBSD_5_5_BASE:1.1.1.4
	OPENBSD_5_4:1.1.1.4.0.2
	OPENBSD_5_4_BASE:1.1.1.4
	PERL_5_16_3:1.1.1.4
	OPENBSD_5_3:1.1.1.3.0.10
	OPENBSD_5_3_BASE:1.1.1.3
	OPENBSD_5_2:1.1.1.3.0.8
	OPENBSD_5_2_BASE:1.1.1.3
	OPENBSD_5_1_BASE:1.1.1.3
	OPENBSD_5_1:1.1.1.3.0.6
	OPENBSD_5_0:1.1.1.3.0.4
	OPENBSD_5_0_BASE:1.1.1.3
	OPENBSD_4_9:1.1.1.3.0.2
	OPENBSD_4_9_BASE:1.1.1.3
	PERL_5_12_2:1.1.1.3
	OPENBSD_4_8:1.1.1.2.0.4
	OPENBSD_4_8_BASE:1.1.1.2
	OPENBSD_4_7:1.1.1.2.0.2
	OPENBSD_4_7_BASE:1.1.1.2
	PERL_5_10_1:1.1.1.2
	OPENBSD_4_6:1.1.1.1.0.6
	OPENBSD_4_6_BASE:1.1.1.1
	OPENBSD_4_5:1.1.1.1.0.2
	OPENBSD_4_5_BASE:1.1.1.1
	PERL_5_10_0:1.1.1.1
	CPAN:1.1.1;
locks; strict;
comment	@# @;
expand	@o@;


1.2
date	2017.02.05.00.32.19;	author afresh1;	state Exp;
branches;
next	1.1;
commitid	cxJ08BvJA9Pt2PTM;

1.1
date	2008.09.29.17.18.59;	author millert;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	2008.09.29.17.18.59;	author millert;	state Exp;
branches;
next	1.1.1.2;

1.1.1.2
date	2009.10.12.18.10.43;	author millert;	state Exp;
branches;
next	1.1.1.3;

1.1.1.3
date	2010.09.24.14.49.15;	author millert;	state Exp;
branches;
next	1.1.1.4;

1.1.1.4
date	2013.03.25.20.09.33;	author sthen;	state Exp;
branches;
next	1.1.1.5;

1.1.1.5
date	2014.03.24.14.59.09;	author afresh1;	state Exp;
branches;
next	1.1.1.6;

1.1.1.6
date	2014.11.17.20.53.17;	author afresh1;	state Exp;
branches;
next	;
commitid	B31cAbBIXiCqnL97;


desc
@@


1.2
log
@Fix merge issues, remove excess files - match perl-5.24.1 dist
@
text
@# This code is used by lib/charnames.t, lib/croak.t, lib/feature.t,
# lib/subs.t, lib/strict.t and lib/warnings.t
#
# On input, $::local_tests is the number of tests in the caller; or
# 'no_plan' if unknown, in which case it is the caller's responsibility
# to call cur_test() to find out how many this executed

BEGIN {
    require './test.pl'; require './charset_tools.pl';
}

use Config;
use File::Path;
use File::Spec::Functions qw(catfile curdir rel2abs);

use strict;
use warnings;
my (undef, $file) = caller;
my ($pragma_name) = $file =~ /([A-Za-z_0-9]+)\.t$/
    or die "Can't identify pragama to test from file name '$file'";

$| = 1;

my @@w_files;

if (@@ARGV) {
    print "ARGV = [@@ARGV]\n";
    @@w_files = map { "./lib/$pragma_name/$_" } @@ARGV;
} else {
    @@w_files = sort glob catfile(curdir(), "lib", $pragma_name, "*");
}

my ($tests, @@prgs) = setup_multiple_progs(@@w_files);

$^X = rel2abs($^X);
@@INC = map { rel2abs($_) } @@INC;
my $tempdir = tempfile;

mkdir $tempdir, 0700 or die "Can't mkdir '$tempdir': $!";
chdir $tempdir or die die "Can't chdir '$tempdir': $!";
my $cleanup = 1;

END {
    if ($cleanup) {
	chdir '..' or die "Couldn't chdir .. for cleanup: $!";
	rmtree($tempdir);
    }
}

if ($::local_tests && $::local_tests =~ /\D/) {
    # If input is 'no_plan', pass it on unchanged
    plan $::local_tests;
} else {
    plan $tests + ($::local_tests || 0);
}

run_multiple_progs('../..', @@prgs);

1;
@


1.1
log
@Initial revision
@
text
@d1 6
a6 1
# This code is used by lib/warnings.t and lib/feature.t
d9 1
a9 1
    require './test.pl';
d14 1
a14 1
use File::Spec::Functions;
d18 3
a20 1
our $pragma_name;
d24 1
a24 32
my $Is_MacOS = $^O eq 'MacOS';
my $tmpfile = "tmp0000";
1 while -e ++$tmpfile;
END { 1 while unlink $tmpfile }

my @@prgs = () ;
my @@w_files = () ;

if (@@ARGV)
  { print "ARGV = [@@ARGV]\n" ;
    if ($Is_MacOS) {
      @@w_files = map { s#^#:lib:$pragma_name:#; $_ } @@ARGV
    } else {
      @@w_files = map { s#^#./lib/$pragma_name/#; $_ } @@ARGV
    }
  }
else
  { @@w_files = sort glob(catfile(curdir(), "lib", $pragma_name, "*")) }

my $files = 0;
foreach my $file (@@w_files) {

    next if $file =~ /(~|\.orig|,v)$/;
    next if $file =~ /perlio$/ && !(find PerlIO::Layer 'perlio');
    next if -d $file;

    open F, "<$file" or die "Cannot open $file: $!\n" ;
    my $line = 0;
    while (<F>) {
        $line++;
	last if /^__END__/ ;
    }
d26 5
a30 6
    {
        local $/ = undef;
        $files++;
        @@prgs = (@@prgs, $file, split "\n########\n", <F>) ;
    }
    close F ;
d33 1
a33 90
undef $/;

plan tests => (scalar(@@prgs)-$files);

for (@@prgs){
    unless (/\n/)
     {
      print "# From $_\n";
      next;
     }
    my $switch = "";
    my @@temps = () ;
    my @@temp_path = () ;
    if (s/^\s*-\w+//){
        $switch = $&;
    }
    my($prog,$expected) = split(/\nEXPECT(?:\n|$)/, $_, 2);

    my ($todo, $todo_reason);
    $todo = $prog =~ s/^#\s*TODO\s*(.*)\n//m and $todo_reason = $1;
    # If the TODO reason starts ? then it's taken as a code snippet to evaluate
    # This provides the flexibility to have conditional TODOs
    if ($todo_reason && $todo_reason =~ s/^\?//) {
	my $temp = eval $todo_reason;
	if ($@@) {
	    die "# In TODO code reason:\n# $todo_reason\n$@@";
	}
	$todo_reason = $temp;
    }
    if ( $prog =~ /--FILE--/) {
        my(@@files) = split(/\n--FILE--\s*([^\s\n]*)\s*\n/, $prog) ;
	shift @@files ;
	die "Internal error: test $_ didn't split into pairs, got " .
		scalar(@@files) . "[" . join("%%%%", @@files) ."]\n"
	    if @@files % 2 ;
	while (@@files > 2) {
	    my $filename = shift @@files ;
	    my $code = shift @@files ;
    	    push @@temps, $filename ;
    	    if ($filename =~ m#(.*)/#) {
                mkpath($1);
                push(@@temp_path, $1);
    	    }
	    open F, ">$filename" or die "Cannot open $filename: $!\n" ;
	    print F $code ;
	    close F or die "Cannot close $filename: $!\n";
	}
	shift @@files ;
	$prog = shift @@files ;
    }

    # fix up some paths
    if ($Is_MacOS) {
	$prog =~ s|require "./abc(d)?";|require ":abc$1";|g;
	$prog =~ s|"\."|":"|g;
    }

    open TEST, ">$tmpfile" or die "Cannot open >$tmpfile: $!";
    print TEST q{
        BEGIN {
            open(STDERR, ">&STDOUT")
              or die "Can't dup STDOUT->STDERR: $!;";
        }
    };
    print TEST "\n#line 1\n";  # So the line numbers don't get messed up.
    print TEST $prog,"\n";
    close TEST or die "Cannot close $tmpfile: $!";
    my $results = runperl( switches => [$switch], stderr => 1, progfile => $tmpfile );
    my $status = $?;
    $results =~ s/\n+$//;
    # allow expected output to be written as if $prog is on STDIN
    $results =~ s/tmp\d+/-/g;
    if ($^O eq 'VMS') {
        # some tests will trigger VMS messages that won't be expected
        $results =~ s/\n?%[A-Z]+-[SIWEF]-[A-Z]+,.*//;

        # pipes double these sometimes
        $results =~ s/\n\n/\n/g;
    }
# bison says 'parse error' instead of 'syntax error',
# various yaccs may or may not capitalize 'syntax'.
    $results =~ s/^(syntax|parse) error/syntax error/mig;
    # allow all tests to run when there are leaks
    $results =~ s/Scalars leaked: \d+\n//g;

    # fix up some paths
    if ($Is_MacOS) {
	$results =~ s|:abc\.pm\b|abc.pm|g;
	$results =~ s|:abc(d)?\b|./abc$1|g;
    }
d35 12
a46 17
    $expected =~ s/\n+$//;
    my $prefix = ($results =~ s#^PREFIX(\n|$)##) ;
    # any special options? (OPTIONS foo bar zap)
    my $option_regex = 0;
    my $option_random = 0;
    if ($expected =~ s/^OPTIONS? (.+)\n//) {
	foreach my $option (split(' ', $1)) {
	    if ($option eq 'regex') { # allow regular expressions
		$option_regex = 1;
	    }
	    elsif ($option eq 'random') { # all lines match, but in any order
		$option_random = 1;
	    }
	    else {
		die "$0: Unknown OPTION '$option'\n";
	    }
	}
a47 29
    die "$0: can't have OPTION regex and random\n"
        if $option_regex + $option_random > 1;
    my $ok = 0;
    if ($results =~ s/^SKIPPED\n//) {
	print "$results\n" ;
	$ok = 1;
    }
    elsif ($option_random) {
        $ok = randomMatch($results, $expected);
    }
    elsif ($option_regex) {
	$ok = $results =~ /^$expected/;
    }
    elsif ($prefix) {
	$ok = $results =~ /^\Q$expected/;
    }
    else {
	$ok = $results eq $expected;
    }
 
    print_err_line( $switch, $prog, $expected, $results, $todo ) unless $ok;

    our $TODO = $todo ? $todo_reason : 0;
    ok($ok);

    foreach (@@temps)
	{ unlink $_ if $_ }
    foreach (@@temp_path)
	{ rmtree $_ if -d $_ }
d50 5
a54 10
sub randomMatch
{
    my $got = shift ;
    my $expected = shift;

    my @@got = sort split "\n", $got ;
    my @@expected = sort split "\n", $expected ;

   return "@@got" eq "@@expected";

d57 1
a57 15
sub print_err_line {
    my($switch, $prog, $expected, $results, $todo) = @@_;
    my $err_line = "PROG: $switch\n$prog\n" .
		   "EXPECTED:\n$expected\n" .
		   "GOT:\n$results\n";
    if ($todo) {
	$err_line =~ s/^/# /mg;
	print $err_line;  # Harness can't filter it out from STDERR.
    }
    else {
	print STDERR $err_line;
    }

    return 1;
}
@


1.1.1.1
log
@import perl 5.10.0 from CPAN
@
text
@@


1.1.1.2
log
@import perl 5.10.1
@
text
@d18 3
a20 1
my $tmpfile = tempfile();
d76 8
a83 11
    my %reason;
    foreach my $what (qw(skip todo)) {
	$prog =~ s/^#\s*\U$what\E\s*(.*)\n//m and $reason{$what} = $1;
	# If the SKIP reason starts ? then it's taken as a code snippet to
	# evaluate. This provides the flexibility to have conditional SKIPs
	if ($reason{$what} && $reason{$what} =~ s/^\?//) {
	    my $temp = eval $reason{$what};
	    if ($@@) {
		die "# In \U$what\E code reason:\n# $reason{$what}\n$@@";
	    }
	    $reason{$what} = $temp;
d85 1
a86 1

d129 1
a129 1
    $results =~ s/$::tempfile_regexp/-/g;
d187 1
a187 2
    local $::TODO = $reason{todo};
    print_err_line( $switch, $prog, $expected, $results, $::TODO ) unless $ok;
d189 1
@


1.1.1.3
log
@Perl 5.12.2 from CPAN
@
text
@d17 1
d25 3
d29 1
d110 6
d143 6
@


1.1.1.4
log
@import perl 5.16.3 from CPAN - worked on by Andrew Fresh and myself
@
text
@d1 1
a1 6
# This code is used by lib/charnames.t, lib/croak.t, lib/feature.t,
# lib/subs.t, lib/strict.t and lib/warnings.t
#
# On input, $::local_tests is the number of tests in the caller; or
# 'no_plan' if unknown, in which case it is the caller's responsibility
# to call cur_test() to find out how many this executed
d9 1
a9 1
use File::Spec::Functions qw(catfile curdir rel2abs);
d13 1
a13 3
my (undef, $file) = caller;
my ($pragma_name) = $file =~ /([A-Za-z_0-9]+)\.t$/
    or die "Can't identify pragama to test from file name '$file'";
d17 2
d36 1
a36 1
    open my $fh, '<', $file or die "Cannot open $file: $!\n" ;
d38 1
a38 1
    while (<$fh>) {
d46 1
a46 1
        @@prgs = (@@prgs, $file, split "\n########\n", <$fh>) ;
d48 1
a48 1
    close $fh;
d51 31
a81 2
$^X = rel2abs($^X);
my $tempdir = tempfile;
d83 74
a156 9
mkdir $tempdir, 0700 or die "Can't mkdir '$tempdir': $!";
chdir $tempdir or die die "Can't chdir '$tempdir': $!";
unshift @@INC, '../../lib';
my $cleanup = 1;

END {
    if ($cleanup) {
	chdir '..' or die "Couldn't chdir .. for cleanup: $!";
	rmtree($tempdir);
d158 22
d182 7
a188 1
local $/ = undef;
d190 1
a190 3
my $tests = $::local_tests || 0;
$tests = scalar(@@prgs)-$files + $tests if $tests !~ /\D/;
plan $tests;    # If input is 'no_plan', pass it on unchanged
d192 17
a208 1
run_multiple_progs('../..', @@prgs);
@


1.1.1.5
log
@Import perl-5.18.2

OK espie@@ sthen@@ deraadt@@
@
text
@a56 1
@@INC = map { rel2abs($_) } @@INC;
d61 1
@


1.1.1.6
log
@Import perl-5.20.1
@
text
@d24 2
a25 1
my @@w_files;
d27 27
a53 5
if (@@ARGV) {
    print "ARGV = [@@ARGV]\n";
    @@w_files = map { "./lib/$pragma_name/$_" } @@ARGV;
} else {
    @@w_files = sort glob catfile(curdir(), "lib", $pragma_name, "*");
a55 2
my ($tests, @@prgs) = setup_multiple_progs(@@w_files);

d71 5
a75 6
if ($::local_tests && $::local_tests =~ /\D/) {
    # If input is 'no_plan', pass it on unchanged
    plan $::local_tests;
} else {
    plan $tests + ($::local_tests || 0);
}
@


