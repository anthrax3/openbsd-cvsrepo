head	1.5;
access;
symbols
	OPENBSD_3_2:1.4.0.6
	OPENBSD_3_2_BASE:1.4
	OPENBSD_3_1:1.4.0.4
	OPENBSD_3_1_BASE:1.4
	OPENBSD_3_0:1.4.0.2
	OPENBSD_3_0_BASE:1.4
	PERL_5_6_1:1.1.1.3
	OPENBSD_2_9:1.3.0.6
	OPENBSD_2_9_BASE:1.3
	OPENBSD_2_8:1.3.0.4
	OPENBSD_2_8_BASE:1.3
	OPENBSD_2_7:1.3.0.2
	OPENBSD_2_7_BASE:1.3
	PERL_5_6_0:1.1.1.2
	OPENBSD_2_6:1.2.0.2
	OPENBSD_2_6_BASE:1.2
	PERL_500503:1.1.1.1
	CPAN:1.1.1
	OPENBSD_2_5:1.1.0.6
	OPENBSD_2_5_BASE:1.1
	OPENBSD_2_4:1.1.0.4
	OPENBSD_2_4_BASE:1.1
	OPENBSD_2_3:1.1.0.2
	OPENBSD_2_3_BASE:1.1;
locks; strict;
comment	@# @;


1.5
date	2002.10.27.22.25.36;	author millert;	state dead;
branches;
next	1.4;

1.4
date	2001.05.24.18.36.14;	author millert;	state Exp;
branches;
next	1.3;

1.3
date	2000.04.06.17.08.15;	author millert;	state Exp;
branches;
next	1.2;

1.2
date	99.04.29.22.52.32;	author millert;	state Exp;
branches;
next	1.1;

1.1
date	97.11.30.08.05.04;	author millert;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	99.04.29.22.41.39;	author millert;	state Exp;
branches;
next	1.1.1.2;

1.1.1.2
date	2000.04.06.16.10.45;	author millert;	state Exp;
branches;
next	1.1.1.3;

1.1.1.3
date	2001.05.24.18.25.25;	author millert;	state Exp;
branches;
next	;


desc
@perl 5.004_04
@


1.5
log
@Resolve conflicts, remove old files, merge local changes
@
text
@#!./perl -w
$|=1;
BEGIN {
    chdir 't' if -d 't';
    @@INC = '../lib';
    require Config; import Config;
    if ($Config{'extensions'} !~ /\bOpcode\b/ && $Config{'osname'} ne 'VMS') {
        print "1..0\n";
        exit 0;
    }
    # test 30 rather naughtily expects English error messages
    $ENV{'LC_ALL'} = 'C';
    $ENV{LANGUAGE} = 'C'; # GNU locale extension
}

# Tests Todo:
#	'main' as root

use vars qw($bar);

use Opcode 1.00, qw(opdesc opset opset_to_ops opset_to_hex
	opmask_add full_opset empty_opset opcodes opmask define_optag);

use Safe 1.00;

my $last_test; # initalised at end
print "1..$last_test\n";

# Set up a package namespace of things to be visible to the unsafe code
$Root::foo = "visible";
$bar = "invisible";

# Stop perl from moaning about identifies which are apparently only used once
$Root::foo .= "";

my $cpt;
# create and destroy a couple of automatic Safe compartments first
$cpt = new Safe or die;
$cpt = new Safe or die;

$cpt = new Safe "Root";

$cpt->reval(q{ system("echo not ok 1"); });
if ($@@ =~ /^system trapped by operation mask/) {
    print "ok 1\n";
} else {
    print "#$@@" if $@@;
    print "not ok 1\n";
}

$cpt->reval(q{
    print $foo eq 'visible'		? "ok 2\n" : "not ok 2\n";
    print $main::foo  eq 'visible'	? "ok 3\n" : "not ok 3\n";
    print defined($bar)			? "not ok 4\n" : "ok 4\n";
    print defined($::bar)		? "not ok 5\n" : "ok 5\n";
    print defined($main::bar)		? "not ok 6\n" : "ok 6\n";
});
print $@@ ? "not ok 7\n#$@@" : "ok 7\n";

$foo = "ok 8\n";
%bar = (key => "ok 9\n");
@@baz = (); push(@@baz, "o", "10"); $" = 'k ';
$glob = "ok 11\n";
@@glob = qw(not ok 16);

sub sayok { print "ok @@_\n" }

$cpt->share(qw($foo %bar @@baz *glob sayok));
$cpt->share('$"') unless $Config{use5005threads};

$cpt->reval(q{
    package other;
    sub other_sayok { print "ok @@_\n" }
    package main;
    print $foo ? $foo : "not ok 8\n";
    print $bar{key} ? $bar{key} : "not ok 9\n";
    (@@baz) ? print "@@baz\n" : print "not ok 10\n";
    print $glob;
    other::other_sayok(12);
    $foo =~ s/8/14/;
    $bar{new} = "ok 15\n";
    @@glob = qw(ok 16);
});
print $@@ ? "not ok 13\n#$@@" : "ok 13\n";
$" = ' ';
print $foo, $bar{new}, "@@glob\n";

$Root::foo = "not ok 17";
@@{$cpt->varglob('bar')} = qw(not ok 18);
${$cpt->varglob('foo')} = "ok 17";
@@Root::bar = "ok";
push(@@Root::bar, "18"); # Two steps to prevent "Identifier used only once..."

print "$Root::foo\n";
print "@@{$cpt->varglob('bar')}\n";

use strict;

print 1 ? "ok 19\n" : "not ok 19\n";
print 1 ? "ok 20\n" : "not ok 20\n";

my $m1 = $cpt->mask;
$cpt->trap("negate");
my $m2 = $cpt->mask;
my @@masked = opset_to_ops($m1);
print $m2 eq opset("negate", @@masked) ? "ok 21\n" : "not ok 21\n";

print eval { $cpt->mask("a bad mask") } ? "not ok 22\n" : "ok 22\n";

print $cpt->reval("2 + 2") == 4 ? "ok 23\n" : "not ok 23\n";

$cpt->mask(empty_opset);
my $t_scalar = $cpt->reval('print wantarray ? "not ok 24\n" : "ok 24\n"');
print $cpt->reval('@@ary=(6,7,8);@@ary') == 3 ? "ok 25\n" : "not ok 25\n";
my @@t_array  = $cpt->reval('print wantarray ? "ok 26\n" : "not ok 26\n"; (2,3,4)');
print $t_array[2] == 4 ? "ok 27\n" : "not ok 27\n";

my $t_scalar2 = $cpt->reval('die "foo bar"; 1');
print defined $t_scalar2 ? "not ok 28\n" : "ok 28\n";
print $@@ =~ /foo bar/ ? "ok 29\n" : "not ok 29\n";

# --- rdo
  
my $t = 30;
$cpt->rdo('/non/existant/file.name');
# The regexp is getting rather baroque.
print $! =~ /cannot find|No such file|file specification syntax error|A file or directory in the path name does not exist|Invalid argument|Device not configured|file not found|File or directory doesn't exist/i ? "ok $t\n" : "not ok $t # $!\n"; $t++;
# test #31 is gone.
print 1 ? "ok $t\n" : "not ok $t\n#$@@/$!\n"; $t++;
  
#my $rdo_file = "tmp_rdo.tpl";
#if (open X,">$rdo_file") {
#    print X "999\n";
#    close X;
#    $cpt->permit_only('const', 'leaveeval');
#    print  $cpt->rdo($rdo_file) == 999 ? "ok $t\n" : "not ok $t\n"; $t++;
#    unlink $rdo_file;
#}
#else {
#    print "# test $t skipped, can't open file: $!\nok $t\n"; $t++;
#}


print "ok $last_test\n";
BEGIN { $last_test = 32 }
@


1.4
log
@merge in perl 5.6.1 with our local changes
@
text
@@


1.3
log
@perl-5.6.0 + local changes
@
text
@d5 1
a5 1
    unshift @@INC, '../lib';
@


1.2
log
@perl5.005_03 (stock)
@
text
@d5 1
a5 1
    @@INC = '../lib';
d13 1
d69 1
a69 1
$cpt->share('$"') unless $Config{archname} =~ /-thread$/;
d127 1
a127 1
print $! =~ /No such file|file specification syntax error|A file or directory in the path name does not exist|Invalid argument|Device not configured|file not found/i ? "ok $t\n" : "not ok $t # $!\n"; $t++;
@


1.1
log
@perl 5.004_04
@
text
@d11 2
a12 2
  # test 30 rather naughtily expects English error messages
  $ENV{'LC_ALL'} = 'C';
d67 2
a68 1
$cpt->share(qw($foo %bar @@baz *glob sayok $"));
d125 3
a127 4
print +(($! =~ /No such file/ || $! =~ /file specification syntax error/) ||
      $! =~ /A file or directory in the path name does not exist/ ||
      $! =~ /Device not configured/ ?
      "ok $t\n" : "not ok $t # $!\n"); $t++;
@


1.1.1.1
log
@perl5.005_03
@
text
@d11 2
a12 2
    # test 30 rather naughtily expects English error messages
    $ENV{'LC_ALL'} = 'C';
d67 1
a67 2
$cpt->share(qw($foo %bar @@baz *glob sayok));
$cpt->share('$"') unless $Config{archname} =~ /-thread$/;
d124 4
a127 3
# The regexp is getting rather baroque.
print $! =~ /No such file|file specification syntax error|A file or directory in the path name does not exist|Invalid argument|Device not configured|file not found/i ? "ok $t\n" : "not ok $t # $!\n"; $t++;
# test #31 is gone.
@


1.1.1.2
log
@virgin perl 5.6.0
@
text
@d5 1
a5 1
    unshift @@INC, '../lib';
a12 1
    $ENV{LANGUAGE} = 'C'; # GNU locale extension
d68 1
a68 1
$cpt->share('$"') unless $Config{use5005threads};
d126 1
a126 1
print $! =~ /cannot find|No such file|file specification syntax error|A file or directory in the path name does not exist|Invalid argument|Device not configured|file not found|File or directory doesn't exist/i ? "ok $t\n" : "not ok $t # $!\n"; $t++;
@


1.1.1.3
log
@stock perl 5.6.1
@
text
@d5 1
a5 1
    @@INC = '../lib';
@


