head	1.5;
access;
symbols
	OPENBSD_3_2:1.4.0.6
	OPENBSD_3_2_BASE:1.4
	OPENBSD_3_1:1.4.0.4
	OPENBSD_3_1_BASE:1.4
	OPENBSD_3_0:1.4.0.2
	OPENBSD_3_0_BASE:1.4
	PERL_5_6_1:1.1.1.3
	OPENBSD_2_9:1.3.0.6
	OPENBSD_2_9_BASE:1.3
	OPENBSD_2_8:1.3.0.4
	OPENBSD_2_8_BASE:1.3
	OPENBSD_2_7:1.3.0.2
	OPENBSD_2_7_BASE:1.3
	PERL_5_6_0:1.1.1.2
	OPENBSD_2_6:1.2.0.2
	OPENBSD_2_6_BASE:1.2
	PERL_500503:1.1.1.1
	CPAN:1.1.1
	OPENBSD_2_5:1.1.0.6
	OPENBSD_2_5_BASE:1.1
	OPENBSD_2_4:1.1.0.4
	OPENBSD_2_4_BASE:1.1
	OPENBSD_2_3:1.1.0.2
	OPENBSD_2_3_BASE:1.1;
locks; strict;
comment	@# @;


1.5
date	2002.10.27.22.25.35;	author millert;	state dead;
branches;
next	1.4;

1.4
date	2001.05.24.18.36.08;	author millert;	state Exp;
branches;
next	1.3;

1.3
date	2000.04.06.17.08.05;	author millert;	state Exp;
branches;
next	1.2;

1.2
date	99.04.29.22.52.29;	author millert;	state Exp;
branches;
next	1.1;

1.1
date	97.11.30.08.00.21;	author millert;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	99.04.29.22.41.27;	author millert;	state Exp;
branches;
next	1.1.1.2;

1.1.1.2
date	2000.04.06.16.10.39;	author millert;	state Exp;
branches;
next	1.1.1.3;

1.1.1.3
date	2001.05.24.18.25.07;	author millert;	state Exp;
branches;
next	;


desc
@perl 5.004_04
@


1.5
log
@Resolve conflicts, remove old files, merge local changes
@
text
@#!./perl -T

BEGIN {
    chdir 't' if -d 't';
    @@INC = '../lib';
}

use File::Basename qw(fileparse basename dirname);

print "1..41\n";

# import correctly?
print +(defined(&basename) && !defined(&fileparse_set_fstype) ?
        '' : 'not '),"ok 1\n";

# set fstype -- should replace non-null default
print +(length(File::Basename::fileparse_set_fstype('unix')) ?
        '' : 'not '),"ok 2\n";

# Unix syntax tests
($base,$path,$type) = fileparse('/virgil/aeneid/draft.book7','\.book\d+');
if ($base eq 'draft' and $path eq '/virgil/aeneid/' and $type eq '.book7') {
  print "ok 3\n";
}
else {
  print "not ok 3	|$base|$path|$type|\n";
}
print +(basename('/arma/virumque.cano') eq 'virumque.cano' ?
        '' : 'not '),"ok 4\n";
print +(dirname('/arma/virumque.cano') eq '/arma' ? '' : 'not '),"ok 5\n";
print +(dirname('arma/') eq '.' ? '' : 'not '),"ok 6\n";
print +(dirname('/') eq '/' ? '' : 'not '),"ok 7\n";


# set fstype -- should replace non-null default
print +(File::Basename::fileparse_set_fstype('VMS') eq 'unix' ?
        '' : 'not '),"ok 8\n";

# VMS syntax tests
($base,$path,$type) = fileparse('virgil:[aeneid]draft.book7','\.book\d+');
if ($base eq 'draft' and $path eq 'virgil:[aeneid]' and $type eq '.book7') {
  print "ok 9\n";
}
else {
  print "not ok 9	|$base|$path|$type|\n";
}
print +(basename('arma:[virumque]cano.trojae') eq 'cano.trojae' ?
        '' : 'not '),"ok 10\n";
print +(dirname('arma:[virumque]cano.trojae') eq 'arma:[virumque]' ?
        '' : 'not '),"ok 11\n";
print +(dirname('arma:<virumque>cano.trojae') eq 'arma:<virumque>' ?
        '' : 'not '),"ok 12\n";
print +(dirname('arma:virumque.cano') eq 'arma:' ? '' : 'not '),"ok 13\n";
$ENV{DEFAULT} = '' unless exists $ENV{DEFAULT};
print +(dirname('virumque.cano') eq $ENV{DEFAULT} ? '' : 'not '),"ok 14\n";
print +(dirname('arma/') eq '.' ? '' : 'not '),"ok 15\n";

# set fstype -- should replace non-null default
print +(File::Basename::fileparse_set_fstype('MSDOS') eq 'VMS' ?
        '' : 'not '),"ok 16\n";

# MSDOS syntax tests
($base,$path,$type) = fileparse('C:\\virgil\\aeneid\\draft.book7','\.book\d+');
if ($base eq 'draft' and $path eq 'C:\\virgil\\aeneid\\' and $type eq '.book7') {
  print "ok 17\n";
}
else {
  print "not ok 17	|$base|$path|$type|\n";
}
print +(basename('A:virumque\\cano.trojae') eq 'cano.trojae' ?
        '' : 'not '),"ok 18\n";
print +(dirname('A:\\virumque\\cano.trojae') eq 'A:\\virumque' ?
        '' : 'not '),"ok 19\n";
print +(dirname('A:\\') eq 'A:\\' ? '' : 'not '),"ok 20\n";
print +(dirname('arma\\') eq '.' ? '' : 'not '),"ok 21\n";

# Yes "/" is a legal path separator under MSDOS
basename("lib/File/Basename.pm") eq "Basename.pm" or print "not ";
print "ok 22\n";



# set fstype -- should replace non-null default
print +(File::Basename::fileparse_set_fstype('MacOS') eq 'MSDOS' ?
        '' : 'not '),"ok 23\n";

# MacOS syntax tests
($base,$path,$type) = fileparse('virgil:aeneid:draft.book7','\.book\d+');
if ($base eq 'draft' and $path eq 'virgil:aeneid:' and $type eq '.book7') {
  print "ok 24\n";
}
else {
  print "not ok 24	|$base|$path|$type|\n";
}
print +(basename(':arma:virumque:cano.trojae') eq 'cano.trojae' ?
        '' : 'not '),"ok 25\n";
print +(dirname(':arma:virumque:cano.trojae') eq ':arma:virumque:' ?
        '' : 'not '),"ok 26\n";
print +(dirname(':arma:virumque:') eq ':arma:' ? '' : 'not '),"ok 27\n";
print +(dirname(':arma:virumque') eq ':arma:' ? '' : 'not '),"ok 28\n";
print +(dirname(':arma:') eq ':' ? '' : 'not '),"ok 29\n";
print +(dirname(':arma') eq ':' ? '' : 'not '),"ok 30\n";
print +(dirname('arma:') eq 'arma:' ? '' : 'not '),"ok 31\n";
print +(dirname('arma') eq ':' ? '' : 'not '),"ok 32\n";
print +(dirname(':') eq ':' ? '' : 'not '),"ok 33\n";


# Check quoting of metacharacters in suffix arg by basename()
print +(basename(':arma:virumque:cano.trojae','.trojae') eq 'cano' ?
        '' : 'not '),"ok 34\n";
print +(basename(':arma:virumque:cano_trojae','.trojae') eq 'cano_trojae' ?
        '' : 'not '),"ok 35\n";

# extra tests for a few specific bugs

File::Basename::fileparse_set_fstype 'MSDOS';
# perl5.003_18 gives C:/perl/.\
print +((fileparse 'C:/perl/lib')[1] eq 'C:/perl/' ? '' : 'not '), "ok 36\n";
# perl5.003_18 gives C:\perl\
print +(dirname('C:\\perl\\lib\\') eq 'C:\\perl' ? '' : 'not '), "ok 37\n";

File::Basename::fileparse_set_fstype 'UNIX';
# perl5.003_18 gives '.'
print +(dirname('/perl/') eq '/' ? '' : 'not '), "ok 38\n";
# perl5.003_18 gives '/perl/lib'
print +(dirname('/perl/lib//') eq '/perl' ? '' : 'not '), "ok 39\n";

#   The empty tainted value, for tainting strings
my $TAINT = substr($^X, 0, 0);
# How to identify taint when you see it
sub any_tainted (@@) {
    not eval { join("",@@_), kill 0; 1 };
}
sub tainted ($) {
    any_tainted @@_;
}
sub all_tainted (@@) {
    for (@@_) { return 0 unless tainted $_ }
    1;
}

print +(tainted(dirname($TAINT.'/perl/lib//')) ? '' : 'not '), "ok 40\n";
print +(all_tainted(fileparse($TAINT.'/dir/draft.book7','\.book\d+'))
		? '' : 'not '), "ok 41\n";
@


1.4
log
@merge in perl 5.6.1 with our local changes
@
text
@@


1.3
log
@perl-5.6.0 + local changes
@
text
@d5 1
a5 1
    unshift @@INC, '../lib';
d10 1
a10 1
print "1..36\n";
d99 7
a105 2
print +(dirname('arma:') eq 'arma:' ? '' : 'not '),"ok 27\n";
print +(dirname(':') eq ':' ? '' : 'not '),"ok 28\n";
d110 1
a110 1
        '' : 'not '),"ok 29\n";
d112 1
a112 1
        '' : 'not '),"ok 30\n";
d118 1
a118 1
print +((fileparse 'C:/perl/lib')[1] eq 'C:/perl/' ? '' : 'not '), "ok 31\n";
d120 1
a120 1
print +(dirname('C:\\perl\\lib\\') eq 'C:\\perl' ? '' : 'not '), "ok 32\n";
d124 1
a124 1
print +(dirname('/perl/') eq '/' ? '' : 'not '), "ok 33\n";
d126 1
a126 1
print +(dirname('/perl/lib//') eq '/perl' ? '' : 'not '), "ok 34\n";
d142 1
a142 1
print +(tainted(dirname($TAINT.'/perl/lib//')) ? '' : 'not '), "ok 35\n";
d144 1
a144 1
		? '' : 'not '), "ok 36\n";
@


1.2
log
@perl5.005_03 (stock)
@
text
@d5 1
a5 1
    @@INC = '../lib';
@


1.1
log
@perl 5.004_04
@
text
@d1 1
a1 1
#!./perl
d10 1
a10 1
print "1..34\n";
d122 18
@


1.1.1.1
log
@perl5.005_03
@
text
@d1 1
a1 1
#!./perl -T
d10 1
a10 1
print "1..36\n";
a121 18

#   The empty tainted value, for tainting strings
my $TAINT = substr($^X, 0, 0);
# How to identify taint when you see it
sub any_tainted (@@) {
    not eval { join("",@@_), kill 0; 1 };
}
sub tainted ($) {
    any_tainted @@_;
}
sub all_tainted (@@) {
    for (@@_) { return 0 unless tainted $_ }
    1;
}

print +(tainted(dirname($TAINT.'/perl/lib//')) ? '' : 'not '), "ok 35\n";
print +(all_tainted(fileparse($TAINT.'/dir/draft.book7','\.book\d+'))
		? '' : 'not '), "ok 36\n";
@


1.1.1.2
log
@virgin perl 5.6.0
@
text
@d5 1
a5 1
    unshift @@INC, '../lib';
@


1.1.1.3
log
@stock perl 5.6.1
@
text
@d5 1
a5 1
    @@INC = '../lib';
d10 1
a10 1
print "1..41\n";
d99 2
a100 7
print +(dirname(':arma:virumque:') eq ':arma:' ? '' : 'not '),"ok 27\n";
print +(dirname(':arma:virumque') eq ':arma:' ? '' : 'not '),"ok 28\n";
print +(dirname(':arma:') eq ':' ? '' : 'not '),"ok 29\n";
print +(dirname(':arma') eq ':' ? '' : 'not '),"ok 30\n";
print +(dirname('arma:') eq 'arma:' ? '' : 'not '),"ok 31\n";
print +(dirname('arma') eq ':' ? '' : 'not '),"ok 32\n";
print +(dirname(':') eq ':' ? '' : 'not '),"ok 33\n";
d105 1
a105 1
        '' : 'not '),"ok 34\n";
d107 1
a107 1
        '' : 'not '),"ok 35\n";
d113 1
a113 1
print +((fileparse 'C:/perl/lib')[1] eq 'C:/perl/' ? '' : 'not '), "ok 36\n";
d115 1
a115 1
print +(dirname('C:\\perl\\lib\\') eq 'C:\\perl' ? '' : 'not '), "ok 37\n";
d119 1
a119 1
print +(dirname('/perl/') eq '/' ? '' : 'not '), "ok 38\n";
d121 1
a121 1
print +(dirname('/perl/lib//') eq '/perl' ? '' : 'not '), "ok 39\n";
d137 1
a137 1
print +(tainted(dirname($TAINT.'/perl/lib//')) ? '' : 'not '), "ok 40\n";
d139 1
a139 1
		? '' : 'not '), "ok 41\n";
@


