head	1.3;
access;
symbols
	OPENBSD_3_2:1.2.0.6
	OPENBSD_3_2_BASE:1.2
	OPENBSD_3_1:1.2.0.4
	OPENBSD_3_1_BASE:1.2
	OPENBSD_3_0:1.2.0.2
	OPENBSD_3_0_BASE:1.2
	PERL_5_6_1:1.1.1.1
	CPAN:1.1.1
	OPENBSD_2_9:1.1.0.6
	OPENBSD_2_9_BASE:1.1
	OPENBSD_2_8:1.1.0.4
	OPENBSD_2_8_BASE:1.1
	OPENBSD_2_7:1.1.0.2
	OPENBSD_2_7_BASE:1.1;
locks; strict;
comment	@# @;


1.3
date	2002.10.27.22.25.36;	author millert;	state dead;
branches;
next	1.2;

1.2
date	2001.05.24.18.36.15;	author millert;	state Exp;
branches;
next	1.1;

1.1
date	2000.04.30.04.40.43;	author millert;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	2001.05.24.18.25.27;	author millert;	state Exp;
branches;
next	;


desc
@@


1.3
log
@Resolve conflicts, remove old files, merge local changes
@
text
@#!./perl

BEGIN {
    chdir 't' if -d 't';
    @@INC = '../lib';
    require Config; import Config;
    if ($Config{'extensions'} !~ /\bSyslog\b/) {
	print "1..0 # Skip: Sys::Syslog was not built\n";
	exit 0;
    }

    require Socket;

    # This code inspired by Sys::Syslog::connect():
    require Sys::Hostname;
    my ($host_uniq) = Sys::Hostname::hostname();
    my ($host)      = $host_uniq =~ /([A-Za-z0-9_.-]+)/;

    if (! defined Socket::inet_aton($host)) {
        print "1..0 # Skip: Can't lookup $host\n";
        exit 0;
    }
}

BEGIN {
  eval {require Sys::Syslog} or do {
    if ($@@ =~ /Your vendor has not/) {
      print "1..0 # Skipped: missing macros\n";
      exit 0;
    }
  }
}

use Sys::Syslog qw(:DEFAULT setlogsock);

print "1..6\n";

if (Sys::Syslog::_PATH_LOG()) {
    if (-e Sys::Syslog::_PATH_LOG()) {
        print defined(eval { setlogsock('unix') }) ? "ok 1\n" : "not ok 1\n";
        print defined(eval { openlog('perl', 'ndelay', 'local0') }) ? "ok 2\n" : "not ok 2\n";
        print defined(eval { syslog('info', 'test') }) ? "ok 3\n" : "not ok 3\n";
    }
    else {
        for (1..3) {
            print
                "ok $_ # skipping, file ",
                Sys::Syslog::_PATH_LOG(),
                " does not exist\n";
        }
    }
}
else {
    for (1..3) { print "ok $_ # skipping, _PATH_LOG unavailable\n" }
}

print defined(eval { setlogsock('inet') }) ? "ok 4\n" : "not ok 4\n";
print defined(eval { openlog('perl', 'ndelay', 'local0') }) ? "ok 5\n" : "not ok 5\n";
print defined(eval { syslog('info', 'test') }) ? "ok 6\n" : "not ok 6\n";
@


1.2
log
@merge in perl 5.6.1 with our local changes
@
text
@@


1.1
log
@Change 5969 by gsar@@auger on 2000/04/27 17:50:56
fix Sys::Syslog breakage on domain sockets (from Tom Hughes)
@
text
@d5 1
a5 1
    unshift @@INC, '../lib';
d11 21
d38 18
a55 3
print defined(eval { setlogsock('unix') }) ? "ok 1\n" : "not ok 1\n";
print defined(eval { openlog('perl', 'ndelay', 'local0') }) ? "ok 2\n" : "not ok 2\n";
print defined(eval { syslog('info', 'test') }) ? "ok 3\n" : "not ok 3\n";
@


1.1.1.1
log
@stock perl 5.6.1
@
text
@d5 1
a5 1
    @@INC = '../lib';
a10 21

    require Socket;

    # This code inspired by Sys::Syslog::connect():
    require Sys::Hostname;
    my ($host_uniq) = Sys::Hostname::hostname();
    my ($host)      = $host_uniq =~ /([A-Za-z0-9_.-]+)/;

    if (! defined Socket::inet_aton($host)) {
        print "1..0 # Skip: Can't lookup $host\n";
        exit 0;
    }
}

BEGIN {
  eval {require Sys::Syslog} or do {
    if ($@@ =~ /Your vendor has not/) {
      print "1..0 # Skipped: missing macros\n";
      exit 0;
    }
  }
d17 3
a19 18
if (Sys::Syslog::_PATH_LOG()) {
    if (-e Sys::Syslog::_PATH_LOG()) {
        print defined(eval { setlogsock('unix') }) ? "ok 1\n" : "not ok 1\n";
        print defined(eval { openlog('perl', 'ndelay', 'local0') }) ? "ok 2\n" : "not ok 2\n";
        print defined(eval { syslog('info', 'test') }) ? "ok 3\n" : "not ok 3\n";
    }
    else {
        for (1..3) {
            print
                "ok $_ # skipping, file ",
                Sys::Syslog::_PATH_LOG(),
                " does not exist\n";
        }
    }
}
else {
    for (1..3) { print "ok $_ # skipping, _PATH_LOG unavailable\n" }
}
@

