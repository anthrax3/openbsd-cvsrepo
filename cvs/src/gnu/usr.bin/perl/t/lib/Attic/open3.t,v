head	1.5;
access;
symbols
	OPENBSD_3_2:1.4.0.6
	OPENBSD_3_2_BASE:1.4
	OPENBSD_3_1:1.4.0.4
	OPENBSD_3_1_BASE:1.4
	OPENBSD_3_0:1.4.0.2
	OPENBSD_3_0_BASE:1.4
	PERL_5_6_1:1.1.1.3
	OPENBSD_2_9:1.3.0.6
	OPENBSD_2_9_BASE:1.3
	OPENBSD_2_8:1.3.0.4
	OPENBSD_2_8_BASE:1.3
	OPENBSD_2_7:1.3.0.2
	OPENBSD_2_7_BASE:1.3
	PERL_5_6_0:1.1.1.2
	OPENBSD_2_6:1.2.0.2
	OPENBSD_2_6_BASE:1.2
	PERL_500503:1.1.1.1
	CPAN:1.1.1
	OPENBSD_2_5:1.1.0.6
	OPENBSD_2_5_BASE:1.1
	OPENBSD_2_4:1.1.0.4
	OPENBSD_2_4_BASE:1.1
	OPENBSD_2_3:1.1.0.2
	OPENBSD_2_3_BASE:1.1;
locks; strict;
comment	@# @;


1.5
date	2002.10.27.22.25.36;	author millert;	state dead;
branches;
next	1.4;

1.4
date	2001.05.24.18.36.14;	author millert;	state Exp;
branches;
next	1.3;

1.3
date	2000.04.06.17.08.13;	author millert;	state Exp;
branches;
next	1.2;

1.2
date	99.04.29.22.52.32;	author millert;	state Exp;
branches;
next	1.1;

1.1
date	97.11.30.08.05.01;	author millert;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	99.04.29.22.41.38;	author millert;	state Exp;
branches;
next	1.1.1.2;

1.1.1.2
date	2000.04.06.16.10.45;	author millert;	state Exp;
branches;
next	1.1.1.3;

1.1.1.3
date	2001.05.24.18.25.24;	author millert;	state Exp;
branches;
next	;


desc
@perl 5.004_04
@


1.5
log
@Resolve conflicts, remove old files, merge local changes
@
text
@#!./perl -w

BEGIN {
    chdir 't' if -d 't';
    @@INC = '../lib';
    require Config; import Config;
    if (!$Config{'d_fork'}
       # open2/3 supported on win32 (but not Borland due to CRT bugs)
       && ($^O ne 'MSWin32' || $Config{'cc'} =~ /^bcc/i))
    {
	print "1..0\n";
	exit 0;
    }
    # make warnings fatal
    $SIG{__WARN__} = sub { die @@_ };
}

use strict;
use IO::Handle;
use IPC::Open3;
#require 'open3.pl'; use subs 'open3';

my $perl = $^X;

sub ok {
    my ($n, $result, $info) = @@_;
    if ($result) {
	print "ok $n\n";
    }
    else {
	print "not ok $n\n";
	print "# $info\n" if $info;
    }
}

sub cmd_line {
	if ($^O eq 'MSWin32') {
		my $cmd = shift;
		$cmd =~ tr/\r\n//d;
		$cmd =~ s/"/\\"/g;
		return qq/"$cmd"/;
	}
	else {
		return $_[0];
	}
}

my ($pid, $reaped_pid);
STDOUT->autoflush;
STDERR->autoflush;

print "1..22\n";

# basic
ok 1, $pid = open3 'WRITE', 'READ', 'ERROR', $perl, '-e', cmd_line(<<'EOF');
    $| = 1;
    print scalar <STDIN>;
    print STDERR "hi error\n";
EOF
ok 2, print WRITE "hi kid\n";
ok 3, <READ> =~ /^hi kid\r?\n$/;
ok 4, <ERROR> =~ /^hi error\r?\n$/;
ok 5, close(WRITE), $!;
ok 6, close(READ), $!;
ok 7, close(ERROR), $!;
$reaped_pid = waitpid $pid, 0;
ok 8, $reaped_pid == $pid, $reaped_pid;
ok 9, $? == 0, $?;

# read and error together, both named
$pid = open3 'WRITE', 'READ', 'READ', $perl, '-e', cmd_line(<<'EOF');
    $| = 1;
    print scalar <STDIN>;
    print STDERR scalar <STDIN>;
EOF
print WRITE "ok 10\n";
print scalar <READ>;
print WRITE "ok 11\n";
print scalar <READ>;
waitpid $pid, 0;

# read and error together, error empty
$pid = open3 'WRITE', 'READ', '', $perl, '-e', cmd_line(<<'EOF');
    $| = 1;
    print scalar <STDIN>;
    print STDERR scalar <STDIN>;
EOF
print WRITE "ok 12\n";
print scalar <READ>;
print WRITE "ok 13\n";
print scalar <READ>;
waitpid $pid, 0;

# dup writer
ok 14, pipe PIPE_READ, PIPE_WRITE;
$pid = open3 '<&PIPE_READ', 'READ', '',
		    $perl, '-e', cmd_line('print scalar <STDIN>');
close PIPE_READ;
print PIPE_WRITE "ok 15\n";
close PIPE_WRITE;
print scalar <READ>;
waitpid $pid, 0;

# dup reader
$pid = open3 'WRITE', '>&STDOUT', 'ERROR',
		    $perl, '-e', cmd_line('print scalar <STDIN>');
print WRITE "ok 16\n";
waitpid $pid, 0;

# dup error:  This particular case, duping stderr onto the existing
# stdout but putting stdout somewhere else, is a good case because it
# used not to work.
$pid = open3 'WRITE', 'READ', '>&STDOUT',
		    $perl, '-e', cmd_line('print STDERR scalar <STDIN>');
print WRITE "ok 17\n";
waitpid $pid, 0;

# dup reader and error together, both named
$pid = open3 'WRITE', '>&STDOUT', '>&STDOUT', $perl, '-e', cmd_line(<<'EOF');
    $| = 1;
    print STDOUT scalar <STDIN>;
    print STDERR scalar <STDIN>;
EOF
print WRITE "ok 18\n";
print WRITE "ok 19\n";
waitpid $pid, 0;

# dup reader and error together, error empty
$pid = open3 'WRITE', '>&STDOUT', '', $perl, '-e', cmd_line(<<'EOF');
    $| = 1;
    print STDOUT scalar <STDIN>;
    print STDERR scalar <STDIN>;
EOF
print WRITE "ok 20\n";
print WRITE "ok 21\n";
waitpid $pid, 0;

# command line in single parameter variant of open3
# for understanding of Config{'sh'} test see exec description in camel book
my $cmd = 'print(scalar(<STDIN>))';
$cmd = $Config{'sh'} =~ /sh/ ? "'$cmd'" : cmd_line($cmd);
eval{$pid = open3 'WRITE', '>&STDOUT', 'ERROR', "$perl -e " . $cmd; };
if ($@@) {
	print "error $@@\n";
	print "not ok 22\n";
}
else {
	print WRITE "ok 22\n";
	waitpid $pid, 0;
}        
@


1.4
log
@merge in perl 5.6.1 with our local changes
@
text
@@


1.3
log
@perl-5.6.0 + local changes
@
text
@d5 1
a5 1
    unshift @@INC, '../lib';
d23 1
a23 1
my $perl = './perl';
@


1.2
log
@perl5.005_03 (stock)
@
text
@d5 1
a5 1
    @@INC = '../lib';
d52 1
a52 1
print "1..21\n";
d137 14
@


1.1
log
@perl 5.004_04
@
text
@d7 4
a10 1
    unless ($Config{'d_fork'}) {
d31 1
a31 1
    	print "not ok $n\n";
d36 12
d55 1
a55 1
ok 1, $pid = open3 'WRITE', 'READ', 'ERROR', $perl, '-e', <<'EOF';
d61 2
a62 2
ok 3, <READ> eq "hi kid\n";
ok 4, <ERROR> eq "hi error\n";
d71 1
a71 1
$pid = open3 'WRITE', 'READ', 'READ', $perl, '-e', <<'EOF';
d83 1
a83 1
$pid = open3 'WRITE', 'READ', '', $perl, '-e', <<'EOF';
d97 1
a97 1
		    $perl, '-e', 'print scalar <STDIN>';
d106 1
a106 1
		    $perl, '-e', 'print scalar <STDIN>';
d114 1
a114 1
		    $perl, '-e', 'print STDERR scalar <STDIN>';
d119 1
a119 1
$pid = open3 'WRITE', '>&STDOUT', '>&STDOUT', $perl, '-e', <<'EOF';
d129 1
a129 1
$pid = open3 'WRITE', '>&STDOUT', '', $perl, '-e', <<'EOF';
@


1.1.1.1
log
@perl5.005_03
@
text
@d7 1
a7 4
    if (!$Config{'d_fork'}
       # open2/3 supported on win32 (but not Borland due to CRT bugs)
       && ($^O ne 'MSWin32' || $Config{'cc'} =~ /^bcc/i))
    {
d28 1
a28 1
	print "not ok $n\n";
a32 12
sub cmd_line {
	if ($^O eq 'MSWin32') {
		my $cmd = shift;
		$cmd =~ tr/\r\n//d;
		$cmd =~ s/"/\\"/g;
		return qq/"$cmd"/;
	}
	else {
		return $_[0];
	}
}

d40 1
a40 1
ok 1, $pid = open3 'WRITE', 'READ', 'ERROR', $perl, '-e', cmd_line(<<'EOF');
d46 2
a47 2
ok 3, <READ> =~ /^hi kid\r?\n$/;
ok 4, <ERROR> =~ /^hi error\r?\n$/;
d56 1
a56 1
$pid = open3 'WRITE', 'READ', 'READ', $perl, '-e', cmd_line(<<'EOF');
d68 1
a68 1
$pid = open3 'WRITE', 'READ', '', $perl, '-e', cmd_line(<<'EOF');
d82 1
a82 1
		    $perl, '-e', cmd_line('print scalar <STDIN>');
d91 1
a91 1
		    $perl, '-e', cmd_line('print scalar <STDIN>');
d99 1
a99 1
		    $perl, '-e', cmd_line('print STDERR scalar <STDIN>');
d104 1
a104 1
$pid = open3 'WRITE', '>&STDOUT', '>&STDOUT', $perl, '-e', cmd_line(<<'EOF');
d114 1
a114 1
$pid = open3 'WRITE', '>&STDOUT', '', $perl, '-e', cmd_line(<<'EOF');
@


1.1.1.2
log
@virgin perl 5.6.0
@
text
@d5 1
a5 1
    unshift @@INC, '../lib';
d52 1
a52 1
print "1..22\n";
a136 14

# command line in single parameter variant of open3
# for understanding of Config{'sh'} test see exec description in camel book
my $cmd = 'print(scalar(<STDIN>))';
$cmd = $Config{'sh'} =~ /sh/ ? "'$cmd'" : cmd_line($cmd);
eval{$pid = open3 'WRITE', '>&STDOUT', 'ERROR', "$perl -e " . $cmd; };
if ($@@) {
	print "error $@@\n";
	print "not ok 22\n";
}
else {
	print WRITE "ok 22\n";
	waitpid $pid, 0;
}        
@


1.1.1.3
log
@stock perl 5.6.1
@
text
@d5 1
a5 1
    @@INC = '../lib';
d23 1
a23 1
my $perl = $^X;
@


