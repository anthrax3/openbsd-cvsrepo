head	1.5;
access;
symbols
	OPENBSD_3_2:1.4.0.6
	OPENBSD_3_2_BASE:1.4
	OPENBSD_3_1:1.4.0.4
	OPENBSD_3_1_BASE:1.4
	OPENBSD_3_0:1.4.0.2
	OPENBSD_3_0_BASE:1.4
	PERL_5_6_1:1.1.1.3
	OPENBSD_2_9:1.3.0.6
	OPENBSD_2_9_BASE:1.3
	OPENBSD_2_8:1.3.0.4
	OPENBSD_2_8_BASE:1.3
	OPENBSD_2_7:1.3.0.2
	OPENBSD_2_7_BASE:1.3
	PERL_5_6_0:1.1.1.2
	OPENBSD_2_6:1.2.0.2
	OPENBSD_2_6_BASE:1.2
	PERL_500503:1.1.1.1
	CPAN:1.1.1
	OPENBSD_2_5:1.1.0.6
	OPENBSD_2_5_BASE:1.1
	OPENBSD_2_4:1.1.0.4
	OPENBSD_2_4_BASE:1.1
	OPENBSD_2_3:1.1.0.2
	OPENBSD_2_3_BASE:1.1;
locks; strict;
comment	@# @;


1.5
date	2002.10.27.22.25.36;	author millert;	state dead;
branches;
next	1.4;

1.4
date	2001.05.24.18.36.10;	author millert;	state Exp;
branches;
next	1.3;

1.3
date	2000.04.06.17.08.09;	author millert;	state Exp;
branches;
next	1.2;

1.2
date	99.04.29.22.52.30;	author millert;	state Exp;
branches;
next	1.1;

1.1
date	97.11.30.08.00.28;	author millert;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	99.04.29.22.41.33;	author millert;	state Exp;
branches;
next	1.1.1.2;

1.1.1.2
date	2000.04.06.16.10.42;	author millert;	state Exp;
branches;
next	1.1.1.3;

1.1.1.3
date	2001.05.24.18.25.14;	author millert;	state Exp;
branches;
next	;


desc
@perl 5.004_04
@


1.5
log
@Resolve conflicts, remove old files, merge local changes
@
text
@#!./perl

BEGIN {
    chdir 't' if -d 't';
    @@INC = '../lib';
}

$| = 1;

my @@pass = (0,1);
my $tests = 11;
printf "1..%d\n", $tests * scalar(@@pass);

use File::Copy;

for my $pass (@@pass) {

  require File::Copy;

  my $loopconst = $pass*$tests;

  # First we create a file
  open(F, ">file-$$") or die;
  binmode F; # for DOSISH platforms, because test 3 copies to stdout
  printf F "ok %d\n", 3 + $loopconst;
  close F;

  copy "file-$$", "copy-$$";

  open(F, "copy-$$") or die;
  $foo = <F>;
  close(F);

  print "not " if -s "file-$$" != -s "copy-$$";
  printf "ok %d\n", 1 + $loopconst;

  print "not " unless $foo eq sprintf "ok %d\n", 3+$loopconst;
  printf "ok %d\n", 2+$loopconst;

  binmode STDOUT unless $^O eq 'VMS'; # Copy::copy works in binary mode
  copy "copy-$$", \*STDOUT;
  unlink "copy-$$" or die "unlink: $!";

  open(F,"file-$$");
  copy(*F, "copy-$$");
  open(R, "copy-$$") or die "open copy-$$: $!"; $foo = <R>; close(R);
  print "not " unless $foo eq sprintf "ok %d\n", 3+$loopconst;
  printf "ok %d\n", 4+$loopconst;
  unlink "copy-$$" or die "unlink: $!";
  open(F,"file-$$");
  copy(\*F, "copy-$$");
  close(F) or die "close: $!";
  open(R, "copy-$$") or die; $foo = <R>; close(R) or die "close: $!";
  print "not " unless $foo eq sprintf "ok %d\n", 3+$loopconst;
  printf "ok %d\n", 5+$loopconst;
  unlink "copy-$$" or die "unlink: $!";

  require IO::File;
  $fh = IO::File->new(">copy-$$") or die "Cannot open copy-$$:$!";
  binmode $fh or die;
  copy("file-$$",$fh);
  $fh->close or die "close: $!";
  open(R, "copy-$$") or die; $foo = <R>; close(R);
  print "# foo=`$foo'\nnot " unless $foo eq sprintf "ok %d\n", 3+$loopconst;
  printf "ok %d\n", 6+$loopconst;
  unlink "copy-$$" or die "unlink: $!";
  require FileHandle;
  my $fh = FileHandle->new(">copy-$$") or die "Cannot open copy-$$:$!";
  binmode $fh or die;
  copy("file-$$",$fh);
  $fh->close;
  open(R, "copy-$$") or die; $foo = <R>; close(R);
  print "not " unless $foo eq sprintf "ok %d\n", 3+$loopconst;
  printf "ok %d\n", 7+$loopconst;
  unlink "file-$$" or die "unlink: $!";

  print "# moved missing file.\nnot " if move("file-$$", "copy-$$");
  print "# target disappeared.\nnot " if not -e "copy-$$";
  printf "ok %d\n", 8+$loopconst;

  move "copy-$$", "file-$$" or print "# move did not succeed.\n";
  print "# not moved: $!\nnot " unless -e "file-$$" and not -e "copy-$$";
  open(R, "file-$$") or die; $foo = <R>; close(R);
  print "# foo=`$foo'\nnot " unless $foo eq sprintf "ok %d\n", 3+$loopconst;
  printf "ok %d\n", 9+$loopconst;

  copy "file-$$", "lib";
  open(R, "lib/file-$$") or die; $foo = <R>; close(R);
  print "not " unless $foo eq sprintf "ok %d\n", 3+$loopconst;
  printf "ok %d\n", 10+$loopconst;
  unlink "lib/file-$$" or die "unlink: $!";

  move "file-$$", "lib";
  open(R, "lib/file-$$") or die "open lib/file-$$: $!"; $foo = <R>; close(R);
  print "not " unless $foo eq sprintf("ok %d\n", 3+$loopconst)
      and not -e "file-$$";;
  printf "ok %d\n", 11+$loopconst;
  unlink "lib/file-$$" or die "unlink: $!";

  # warn sprintf "INC->".$INC{"File/Copy.pm"};
  delete $INC{"File/Copy.pm"};

}


END {
    1 while unlink "file-$$";
    1 while unlink "lib/file-$$";
}
@


1.4
log
@merge in perl 5.6.1 with our local changes
@
text
@@


1.3
log
@perl-5.6.0 + local changes
@
text
@d5 1
a5 1
    unshift @@INC, '../lib';
@


1.2
log
@perl5.005_03 (stock)
@
text
@d5 1
a5 1
    @@INC = '../lib';
d8 1
a8 1
print "1..11\n";
d10 3
a12 1
$| = 1;
d16 83
a98 76
# First we create a file
open(F, ">file-$$") or die;
binmode F; # for DOSISH platforms, because test 3 copies to stdout
print F "ok 3\n";
close F;

copy "file-$$", "copy-$$";

open(F, "copy-$$") or die;
$foo = <F>;
close(F);

print "not " if -s "file-$$" != -s "copy-$$";
print "ok 1\n";

print "not " unless $foo eq "ok 3\n";
print "ok 2\n";

binmode STDOUT unless $^O eq 'VMS';			# Copy::copy works in binary mode
copy "copy-$$", \*STDOUT;
unlink "copy-$$" or die "unlink: $!";

open(F,"file-$$");
copy(*F, "copy-$$");
open(R, "copy-$$") or die "open copy-$$: $!"; $foo = <R>; close(R);
print "not " unless $foo eq "ok 3\n";
print "ok 4\n";
unlink "copy-$$" or die "unlink: $!";
open(F,"file-$$");
copy(\*F, "copy-$$");
close(F) or die "close: $!";
open(R, "copy-$$") or die; $foo = <R>; close(R) or die "close: $!";
print "not " unless $foo eq "ok 3\n";
print "ok 5\n";
unlink "copy-$$" or die "unlink: $!";

require IO::File;
$fh = IO::File->new(">copy-$$") or die "Cannot open copy-$$:$!";
binmode $fh or die;
copy("file-$$",$fh);
$fh->close or die "close: $!";
open(R, "copy-$$") or die; $foo = <R>; close(R);
print "# foo=`$foo'\nnot " unless $foo eq "ok 3\n";
print "ok 6\n";
unlink "copy-$$" or die "unlink: $!";
require FileHandle;
my $fh = FileHandle->new(">copy-$$") or die "Cannot open copy-$$:$!";
binmode $fh or die;
copy("file-$$",$fh);
$fh->close;
open(R, "copy-$$") or die; $foo = <R>; close(R);
print "not " unless $foo eq "ok 3\n";
print "ok 7\n";
unlink "file-$$" or die "unlink: $!";

print "# moved missing file.\nnot " if move("file-$$", "copy-$$");
print "# target disappeared.\nnot " if not -e "copy-$$";
print "ok 8\n";

move "copy-$$", "file-$$" or print "# move did not succeed.\n";
print "# not moved: $!\nnot " unless -e "file-$$" and not -e "copy-$$";
open(R, "file-$$") or die; $foo = <R>; close(R);
print "# foo=`$foo'\nnot " unless $foo eq "ok 3\n";
print "ok 9\n";

copy "file-$$", "lib";
open(R, "lib/file-$$") or die; $foo = <R>; close(R);
print "not " unless $foo eq "ok 3\n";
print "ok 10\n";
unlink "lib/file-$$" or die "unlink: $!";

move "file-$$", "lib";
open(R, "lib/file-$$") or die "open lib/file-$$: $!"; $foo = <R>; close(R);
print "not " unless $foo eq "ok 3\n" and not -e "file-$$";;
print "ok 11\n";
unlink "lib/file-$$" or die "unlink: $!";
d100 10
@


1.1
log
@perl 5.004_04
@
text
@d16 1
d32 1
@


1.1.1.1
log
@perl5.005_03
@
text
@a15 1
binmode F; # for DOSISH platforms, because test 3 copies to stdout
a30 1
binmode STDOUT unless $^O eq 'VMS';			# Copy::copy works in binary mode
@


1.1.1.2
log
@virgin perl 5.6.0
@
text
@d5 1
a5 1
    unshift @@INC, '../lib';
d8 2
a11 4
my @@pass = (0,1);
my $tests = 11;
printf "1..%d\n", $tests * scalar(@@pass);

d14 76
a89 83
for my $pass (@@pass) {

  require File::Copy;

  my $loopconst = $pass*$tests;

  # First we create a file
  open(F, ">file-$$") or die;
  binmode F; # for DOSISH platforms, because test 3 copies to stdout
  printf F "ok %d\n", 3 + $loopconst;
  close F;

  copy "file-$$", "copy-$$";

  open(F, "copy-$$") or die;
  $foo = <F>;
  close(F);

  print "not " if -s "file-$$" != -s "copy-$$";
  printf "ok %d\n", 1 + $loopconst;

  print "not " unless $foo eq sprintf "ok %d\n", 3+$loopconst;
  printf "ok %d\n", 2+$loopconst;

  binmode STDOUT unless $^O eq 'VMS'; # Copy::copy works in binary mode
  copy "copy-$$", \*STDOUT;
  unlink "copy-$$" or die "unlink: $!";

  open(F,"file-$$");
  copy(*F, "copy-$$");
  open(R, "copy-$$") or die "open copy-$$: $!"; $foo = <R>; close(R);
  print "not " unless $foo eq sprintf "ok %d\n", 3+$loopconst;
  printf "ok %d\n", 4+$loopconst;
  unlink "copy-$$" or die "unlink: $!";
  open(F,"file-$$");
  copy(\*F, "copy-$$");
  close(F) or die "close: $!";
  open(R, "copy-$$") or die; $foo = <R>; close(R) or die "close: $!";
  print "not " unless $foo eq sprintf "ok %d\n", 3+$loopconst;
  printf "ok %d\n", 5+$loopconst;
  unlink "copy-$$" or die "unlink: $!";

  require IO::File;
  $fh = IO::File->new(">copy-$$") or die "Cannot open copy-$$:$!";
  binmode $fh or die;
  copy("file-$$",$fh);
  $fh->close or die "close: $!";
  open(R, "copy-$$") or die; $foo = <R>; close(R);
  print "# foo=`$foo'\nnot " unless $foo eq sprintf "ok %d\n", 3+$loopconst;
  printf "ok %d\n", 6+$loopconst;
  unlink "copy-$$" or die "unlink: $!";
  require FileHandle;
  my $fh = FileHandle->new(">copy-$$") or die "Cannot open copy-$$:$!";
  binmode $fh or die;
  copy("file-$$",$fh);
  $fh->close;
  open(R, "copy-$$") or die; $foo = <R>; close(R);
  print "not " unless $foo eq sprintf "ok %d\n", 3+$loopconst;
  printf "ok %d\n", 7+$loopconst;
  unlink "file-$$" or die "unlink: $!";

  print "# moved missing file.\nnot " if move("file-$$", "copy-$$");
  print "# target disappeared.\nnot " if not -e "copy-$$";
  printf "ok %d\n", 8+$loopconst;

  move "copy-$$", "file-$$" or print "# move did not succeed.\n";
  print "# not moved: $!\nnot " unless -e "file-$$" and not -e "copy-$$";
  open(R, "file-$$") or die; $foo = <R>; close(R);
  print "# foo=`$foo'\nnot " unless $foo eq sprintf "ok %d\n", 3+$loopconst;
  printf "ok %d\n", 9+$loopconst;

  copy "file-$$", "lib";
  open(R, "lib/file-$$") or die; $foo = <R>; close(R);
  print "not " unless $foo eq sprintf "ok %d\n", 3+$loopconst;
  printf "ok %d\n", 10+$loopconst;
  unlink "lib/file-$$" or die "unlink: $!";

  move "file-$$", "lib";
  open(R, "lib/file-$$") or die "open lib/file-$$: $!"; $foo = <R>; close(R);
  print "not " unless $foo eq sprintf("ok %d\n", 3+$loopconst)
      and not -e "file-$$";;
  printf "ok %d\n", 11+$loopconst;
  unlink "lib/file-$$" or die "unlink: $!";
a90 10
  # warn sprintf "INC->".$INC{"File/Copy.pm"};
  delete $INC{"File/Copy.pm"};

}


END {
    1 while unlink "file-$$";
    1 while unlink "lib/file-$$";
}
@


1.1.1.3
log
@stock perl 5.6.1
@
text
@d5 1
a5 1
    @@INC = '../lib';
@


