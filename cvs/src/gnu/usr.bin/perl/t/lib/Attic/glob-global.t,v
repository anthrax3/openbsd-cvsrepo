head	1.2;
access;
symbols
	OPENBSD_3_2:1.1.1.2.0.6
	OPENBSD_3_2_BASE:1.1.1.2
	OPENBSD_3_1:1.1.1.2.0.4
	OPENBSD_3_1_BASE:1.1.1.2
	OPENBSD_3_0:1.1.1.2.0.2
	OPENBSD_3_0_BASE:1.1.1.2
	PERL_5_6_1:1.1.1.2
	OPENBSD_2_9:1.1.1.1.0.6
	OPENBSD_2_9_BASE:1.1.1.1
	OPENBSD_2_8:1.1.1.1.0.4
	OPENBSD_2_8_BASE:1.1.1.1
	OPENBSD_2_7:1.1.1.1.0.2
	OPENBSD_2_7_BASE:1.1.1.1
	PERL_5_6_0:1.1.1.1
	CPAN:1.1.1;
locks; strict;
comment	@# @;


1.2
date	2002.10.27.22.25.36;	author millert;	state dead;
branches;
next	1.1;

1.1
date	2000.04.06.16.10.43;	author millert;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	2000.04.06.16.10.43;	author millert;	state Exp;
branches;
next	1.1.1.2;

1.1.1.2
date	2001.05.24.18.25.17;	author millert;	state Exp;
branches;
next	;


desc
@@


1.2
log
@Resolve conflicts, remove old files, merge local changes
@
text
@#!./perl

BEGIN {
    chdir 't' if -d 't';
    unshift @@INC, '../lib';
    require Config; import Config;
    if ($Config{'extensions'} !~ /\bFile\/Glob\b/i) {
        print "1..0\n";
        exit 0;
    }
    print "1..10\n";
}
END {
    print "not ok 1\n" unless $loaded;
}

BEGIN {
    *CORE::GLOBAL::glob = sub { "Just another Perl hacker," };
}

BEGIN {
    if ("Just another Perl hacker," ne (<*>)[0]) {
        die <<EOMessage;
Your version of perl ($]) doesn't seem to allow extensions to override
the core glob operator.
EOMessage
    }
}

use File::Glob ':globally';
$loaded = 1;
print "ok 1\n";

$_ = "lib/*.t";
my @@r = glob;
print "not " if $_ ne 'lib/*.t';
print "ok 2\n";

# we should have at least basic.t, global.t, taint.t
print "# |@@r|\nnot " if @@r < 3;
print "ok 3\n";

# check if <*/*> works
@@r = <*/*.t>;
# at least t/global.t t/basic.t, t/taint.t
print "not " if @@r < 3;
print "ok 4\n";
my $r = scalar @@r;

# check if scalar context works
@@r = ();
while (defined($_ = <*/*.t>)) {
    #print "# $_\n";
    push @@r, $_;
}
print "not " if @@r != $r;
print "ok 5\n";

# check if array context works
@@r = ();
for (<*/*.t>) {
    #print "# $_\n";
    push @@r, $_;
}
print "not " if @@r != $r;
print "ok 6\n";

# test if implicit assign to $_ in while() works
@@r = ();
while (<*/*.t>) {
    #print "# $_\n";
    push @@r, $_;
}
print "not " if @@r != $r;
print "ok 7\n";

# test if explicit glob() gets assign magic too
my @@s = ();
while (glob '*/*.t') {
    #print "# $_\n";
    push @@s, $_;
}
print "not " if "@@r" ne "@@s";
print "ok 8\n";

# how about in a different package, like?
package Foo;
use File::Glob ':globally';
@@s = ();
while (glob '*/*.t') {
    #print "# $_\n";
    push @@s, $_;
}
print "not " if "@@r" ne "@@s";
print "ok 9\n";

# test if different glob ops maintain independent contexts
@@s = ();
my $i = 0;
while (<*/*.t>) {
    #print "# $_ <";
    push @@s, $_;
    while (<bas*/*.t>) {
        #print " $_";
        $i++;
    }
    #print " >\n";
}
print "not " if "@@r" ne "@@s" or not $i;
print "ok 10\n";
@


1.1
log
@Initial revision
@
text
@@


1.1.1.1
log
@virgin perl 5.6.0
@
text
@@


1.1.1.2
log
@stock perl 5.6.1
@
text
@d5 1
a5 6
    if ($^O eq 'MacOS') { 
	@@INC = qw(: ::lib ::macos:lib); 
    } else { 
	@@INC = '.'; 
	push @@INC, '../lib'; 
    }
d34 1
a34 1
$_ = $^O eq "MacOS" ? ":lib:*.t" : "lib/*.t";
d36 1
a36 1
print "not " if $_ ne ($^O eq "MacOS" ? ":lib:*.t" : "lib/*.t");
d44 1
a44 5
if ($^O eq "MacOS") {
    @@r = <:*:*.t>;
} else {
    @@r = <*/*.t>;
}
d52 3
a54 10
if ($^O eq "MacOS") {
    while (defined($_ = <:*:*.t>)) {
	#print "# $_\n";
	push @@r, $_;
    }
} else {
    while (defined($_ = <*/*.t>)) {
	#print "# $_\n";
	push @@r, $_;
    }
d59 1
a59 1
# check if list context works
d61 3
a63 10
if ($^O eq "MacOS") {
    for (<:*:*.t>) {
	#print "# $_\n";
	push @@r, $_;
    }
} else {
    for (<*/*.t>) {
	#print "# $_\n";
	push @@r, $_;
    }
d70 3
a72 10
if ($^O eq "MacOS") {
    while (<:*:*.t>) {
	#print "# $_\n";
	push @@r, $_;
    }
} else {
    while (<*/*.t>) {
	#print "# $_\n";
	push @@r, $_;
    }
d79 1
a79 1
while (glob($^O eq 'MacOS' ? ':*:*.t' : '*/*.t')) {
d90 1
a90 1
while (glob($^O eq 'MacOS' ? ':*:*.t' : '*/*.t')) {
d100 6
a105 19
if ($^O eq "MacOS") {
    while (<:*:*.t>) {
	#print "# $_ <";
	push @@s, $_;
	while (<:bas*:*.t>) {
	    #print " $_";
	    $i++;
	}
	#print " >\n";
    }
} else {
    while (<*/*.t>) {
	#print "# $_ <";
	push @@s, $_;
	while (<bas*/*.t>) {
	    #print " $_";
	    $i++;
	}
	#print " >\n";
d107 1
@

