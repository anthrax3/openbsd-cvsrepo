head	1.5;
access;
symbols
	OPENBSD_3_2:1.4.0.6
	OPENBSD_3_2_BASE:1.4
	OPENBSD_3_1:1.4.0.4
	OPENBSD_3_1_BASE:1.4
	OPENBSD_3_0:1.4.0.2
	OPENBSD_3_0_BASE:1.4
	PERL_5_6_1:1.1.1.3
	OPENBSD_2_9:1.3.0.6
	OPENBSD_2_9_BASE:1.3
	OPENBSD_2_8:1.3.0.4
	OPENBSD_2_8_BASE:1.3
	OPENBSD_2_7:1.3.0.2
	OPENBSD_2_7_BASE:1.3
	PERL_5_6_0:1.1.1.2
	OPENBSD_2_6:1.2.0.2
	OPENBSD_2_6_BASE:1.2
	PERL_500503:1.1.1.1
	CPAN:1.1.1
	OPENBSD_2_5:1.1.0.6
	OPENBSD_2_5_BASE:1.1
	OPENBSD_2_4:1.1.0.4
	OPENBSD_2_4_BASE:1.1
	OPENBSD_2_3:1.1.0.2
	OPENBSD_2_3_BASE:1.1;
locks; strict;
comment	@# @;


1.5
date	2002.10.27.22.25.36;	author millert;	state dead;
branches;
next	1.4;

1.4
date	2001.05.24.18.36.14;	author millert;	state Exp;
branches;
next	1.3;

1.3
date	2000.04.06.17.08.14;	author millert;	state Exp;
branches;
next	1.2;

1.2
date	99.04.29.22.52.32;	author millert;	state Exp;
branches;
next	1.1;

1.1
date	97.11.30.08.05.01;	author millert;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	99.04.29.22.41.39;	author millert;	state Exp;
branches;
next	1.1.1.2;

1.1.1.2
date	2000.04.06.16.10.45;	author millert;	state Exp;
branches;
next	1.1.1.3;

1.1.1.3
date	2001.05.24.18.25.24;	author millert;	state Exp;
branches;
next	;


desc
@perl 5.004_04
@


1.5
log
@Resolve conflicts, remove old files, merge local changes
@
text
@#!./perl

BEGIN {
    chdir 't' if -d 't';
    @@INC = '../lib';
}

use warnings;
use Text::ParseWords;

print "1..18\n";

@@words = shellwords(qq(foo "bar quiz" zoo));
print "not " if $words[0] ne 'foo';
print "ok 1\n";
print "not " if $words[1] ne 'bar quiz';
print "ok 2\n";
print "not " if $words[2] ne 'zoo';
print "ok 3\n";

{
  # Gonna get some undefined things back
  no warnings 'uninitialized' ;

  # Test quotewords() with other parameters and null last field
  @@words = quotewords(':+', 1, 'foo:::"bar:foo":zoo zoo:');
  print "not " unless join(";", @@words) eq qq(foo;"bar:foo";zoo zoo;);
  print "ok 4\n";
}

# Test $keep eq 'delimiters' and last field zero
@@words = quotewords('\s+', 'delimiters', '4 3 2 1 0');
print "not " unless join(";", @@words) eq qq(4; ;3; ;2; ;1; ;0);
print "ok 5\n";

# Big ol' nasty test (thanks, Joerk!)
$string = 'aaaa"bbbbb" cc\\ cc \\\\\\"dddd" eee\\\\\\"ffff" "gg"';

# First with $keep == 1
$result = join('|', parse_line('\s+', 1, $string));
print "not " unless $result eq 'aaaa"bbbbb"|cc\\ cc|\\\\\\"dddd" eee\\\\\\"ffff"|"gg"';
print "ok 6\n";

# Now, $keep == 0
$result = join('|', parse_line('\s+', 0, $string));
print "not " unless $result eq 'aaaabbbbb|cc cc|\\"dddd eee\\"ffff|gg';
print "ok 7\n";

# Now test single quote behavior
$string = 'aaaa"bbbbb" cc\\ cc \\\\\\"dddd\' eee\\\\\\"ffff\' gg';
$result = join('|', parse_line('\s+', 0, $string));
print "not " unless $result eq 'aaaabbbbb|cc cc|\\"dddd eee\\\\\\"ffff|gg';
print "ok 8\n";

# Make sure @@nested_quotewords does the right thing
@@lists = nested_quotewords('\s+', 0, 'a b c', '1 2 3', 'x y z');
print "not " unless (@@lists == 3 && @@{$lists[0]} == 3 && @@{$lists[1]} == 3 && @@{$lists[2]} == 3);
print "ok 9\n";

# Now test error return
$string = 'foo bar baz"bach blech boop';

@@words = shellwords($string);
print "not " if (@@words);
print "ok 10\n";

@@words = parse_line('s+', 0, $string);
print "not " if (@@words);
print "ok 11\n";

@@words = quotewords('s+', 0, $string);
print "not " if (@@words);
print "ok 12\n";

{
  # Gonna get some more undefined things back
  no warnings 'uninitialized' ;

  @@words = nested_quotewords('s+', 0, $string);
  print "not " if (@@words);
  print "ok 13\n";

  # Now test empty fields
  $result = join('|', parse_line(':', 0, 'foo::0:"":::'));
  print "not " unless ($result eq 'foo||0||||');
  print "ok 14\n";

  # Test for 0 in quotes without $keep
  $result = join('|', parse_line(':', 0, ':"0":'));
  print "not " unless ($result eq '|0|');
  print "ok 15\n";

  # Test for \001 in quoted string
  $result = join('|', parse_line(':', 0, ':"' . "\001" . '":'));
  print "not " unless ($result eq "|\1|");
  print "ok 16\n";

}

# Now test perlish single quote behavior
$Text::ParseWords::PERL_SINGLE_QUOTE = 1;
$string = 'aaaa"bbbbb" cc\ cc \\\\\"dddd\' eee\\\\\"\\\'ffff\' gg';
$result = join('|', parse_line('\s+', 0, $string));
print "not " unless $result eq 'aaaabbbbb|cc cc|\"dddd eee\\\\"\'ffff|gg';
print "ok 17\n";

# test whitespace in the delimiters
@@words = quotewords(' ', 1, '4 3 2 1 0');
print "not " unless join(";", @@words) eq qq(4;3;2;1;0);
print "ok 18\n";
@


1.4
log
@merge in perl 5.6.1 with our local changes
@
text
@@


1.3
log
@perl-5.6.0 + local changes
@
text
@d5 1
a5 1
    unshift @@INC, '../lib';
@


1.2
log
@perl5.005_03 (stock)
@
text
@d5 1
a5 1
    @@INC = '../lib';
d8 1
d21 9
a29 9
# Gonna get some undefined things back
local($^W) = 0;

# Test quotewords() with other parameters and null last field
@@words = quotewords(':+', 1, 'foo:::"bar:foo":zoo zoo:');
print "not " unless join(";", @@words) eq qq(foo;"bar:foo";zoo zoo;);
print "ok 4\n";

$^W = 1;
d75 22
a96 2
# Gonna get some more undefined things back
$^W = 0;
d98 1
a98 20
@@words = nested_quotewords('s+', 0, $string);
print "not " if (@@words);
print "ok 13\n";

# Now test empty fields
$result = join('|', parse_line(':', 0, 'foo::0:"":::'));
print "not " unless ($result eq 'foo||0||||');
print "ok 14\n";

# Test for 0 in quotes without $keep
$result = join('|', parse_line(':', 0, ':"0":'));
print "not " unless ($result eq '|0|');
print "ok 15\n";

# Test for \001 in quoted string
$result = join('|', parse_line(':', 0, ':"' . "\001" . '":'));
print "not " unless ($result eq "|\1|");
print "ok 16\n";

$^W = 1;
@


1.1
log
@perl 5.004_04
@
text
@d8 1
a8 1
print "1..4\n";
d10 1
a10 1
use Text::ParseWords;
a12 2
#print join(";", @@words), "\n";

a14 1

a16 1

d20 6
a25 4
# Test quotewords() with other parameters
@@words = quotewords(":+", 1, qq(foo:::"bar:foo":zoo zoo:));
#print join(";", @@words), "\n";
print "not " unless join(";", @@words) eq qq(foo;"bar:foo";zoo zoo);
d27 82
@


1.1.1.1
log
@perl5.005_03
@
text
@d8 2
d12 2
a13 1
print "1..18\n";
a14 1
@@words = shellwords(qq(foo "bar quiz" zoo));
d17 1
d20 1
d24 4
a27 6
# Gonna get some undefined things back
local($^W) = 0;

# Test quotewords() with other parameters and null last field
@@words = quotewords(':+', 1, 'foo:::"bar:foo":zoo zoo:');
print "not " unless join(";", @@words) eq qq(foo;"bar:foo";zoo zoo;);
a28 82

$^W = 1;

# Test $keep eq 'delimiters' and last field zero
@@words = quotewords('\s+', 'delimiters', '4 3 2 1 0');
print "not " unless join(";", @@words) eq qq(4; ;3; ;2; ;1; ;0);
print "ok 5\n";

# Big ol' nasty test (thanks, Joerk!)
$string = 'aaaa"bbbbb" cc\\ cc \\\\\\"dddd" eee\\\\\\"ffff" "gg"';

# First with $keep == 1
$result = join('|', parse_line('\s+', 1, $string));
print "not " unless $result eq 'aaaa"bbbbb"|cc\\ cc|\\\\\\"dddd" eee\\\\\\"ffff"|"gg"';
print "ok 6\n";

# Now, $keep == 0
$result = join('|', parse_line('\s+', 0, $string));
print "not " unless $result eq 'aaaabbbbb|cc cc|\\"dddd eee\\"ffff|gg';
print "ok 7\n";

# Now test single quote behavior
$string = 'aaaa"bbbbb" cc\\ cc \\\\\\"dddd\' eee\\\\\\"ffff\' gg';
$result = join('|', parse_line('\s+', 0, $string));
print "not " unless $result eq 'aaaabbbbb|cc cc|\\"dddd eee\\\\\\"ffff|gg';
print "ok 8\n";

# Make sure @@nested_quotewords does the right thing
@@lists = nested_quotewords('\s+', 0, 'a b c', '1 2 3', 'x y z');
print "not " unless (@@lists == 3 && @@{$lists[0]} == 3 && @@{$lists[1]} == 3 && @@{$lists[2]} == 3);
print "ok 9\n";

# Now test error return
$string = 'foo bar baz"bach blech boop';

@@words = shellwords($string);
print "not " if (@@words);
print "ok 10\n";

@@words = parse_line('s+', 0, $string);
print "not " if (@@words);
print "ok 11\n";

@@words = quotewords('s+', 0, $string);
print "not " if (@@words);
print "ok 12\n";

# Gonna get some more undefined things back
$^W = 0;

@@words = nested_quotewords('s+', 0, $string);
print "not " if (@@words);
print "ok 13\n";

# Now test empty fields
$result = join('|', parse_line(':', 0, 'foo::0:"":::'));
print "not " unless ($result eq 'foo||0||||');
print "ok 14\n";

# Test for 0 in quotes without $keep
$result = join('|', parse_line(':', 0, ':"0":'));
print "not " unless ($result eq '|0|');
print "ok 15\n";

# Test for \001 in quoted string
$result = join('|', parse_line(':', 0, ':"' . "\001" . '":'));
print "not " unless ($result eq "|\1|");
print "ok 16\n";

$^W = 1;

# Now test perlish single quote behavior
$Text::ParseWords::PERL_SINGLE_QUOTE = 1;
$string = 'aaaa"bbbbb" cc\ cc \\\\\"dddd\' eee\\\\\"\\\'ffff\' gg';
$result = join('|', parse_line('\s+', 0, $string));
print "not " unless $result eq 'aaaabbbbb|cc cc|\"dddd eee\\\\"\'ffff|gg';
print "ok 17\n";

# test whitespace in the delimiters
@@words = quotewords(' ', 1, '4 3 2 1 0');
print "not " unless join(";", @@words) eq qq(4;3;2;1;0);
print "ok 18\n";
@


1.1.1.2
log
@virgin perl 5.6.0
@
text
@d5 1
a5 1
    unshift @@INC, '../lib';
a7 1
use warnings;
d20 9
a28 9
{
  # Gonna get some undefined things back
  no warnings 'uninitialized' ;

  # Test quotewords() with other parameters and null last field
  @@words = quotewords(':+', 1, 'foo:::"bar:foo":zoo zoo:');
  print "not " unless join(";", @@words) eq qq(foo;"bar:foo";zoo zoo;);
  print "ok 4\n";
}
d74 2
a75 22
{
  # Gonna get some more undefined things back
  no warnings 'uninitialized' ;

  @@words = nested_quotewords('s+', 0, $string);
  print "not " if (@@words);
  print "ok 13\n";

  # Now test empty fields
  $result = join('|', parse_line(':', 0, 'foo::0:"":::'));
  print "not " unless ($result eq 'foo||0||||');
  print "ok 14\n";

  # Test for 0 in quotes without $keep
  $result = join('|', parse_line(':', 0, ':"0":'));
  print "not " unless ($result eq '|0|');
  print "ok 15\n";

  # Test for \001 in quoted string
  $result = join('|', parse_line(':', 0, ':"' . "\001" . '":'));
  print "not " unless ($result eq "|\1|");
  print "ok 16\n";
d77 20
a96 1
}
@


1.1.1.3
log
@stock perl 5.6.1
@
text
@d5 1
a5 1
    @@INC = '../lib';
@


