head	1.4;
access;
symbols
	OPENBSD_3_2:1.3.0.6
	OPENBSD_3_2_BASE:1.3
	OPENBSD_3_1:1.3.0.4
	OPENBSD_3_1_BASE:1.3
	OPENBSD_3_0:1.3.0.2
	OPENBSD_3_0_BASE:1.3
	PERL_5_6_1:1.1.1.3
	OPENBSD_2_9:1.2.0.6
	OPENBSD_2_9_BASE:1.2
	OPENBSD_2_8:1.2.0.4
	OPENBSD_2_8_BASE:1.2
	OPENBSD_2_7:1.2.0.2
	OPENBSD_2_7_BASE:1.2
	PERL_5_6_0:1.1.1.2
	OPENBSD_2_6:1.1.0.8
	OPENBSD_2_6_BASE:1.1
	PERL_500503:1.1.1.1
	CPAN:1.1.1
	OPENBSD_2_5:1.1.0.6
	OPENBSD_2_5_BASE:1.1
	OPENBSD_2_4:1.1.0.4
	OPENBSD_2_4_BASE:1.1
	OPENBSD_2_3:1.1.0.2
	OPENBSD_2_3_BASE:1.1;
locks; strict;
comment	@# @;


1.4
date	2002.10.27.22.25.36;	author millert;	state dead;
branches;
next	1.3;

1.3
date	2001.05.24.18.36.13;	author millert;	state Exp;
branches;
next	1.2;

1.2
date	2000.04.06.17.08.13;	author millert;	state Exp;
branches;
next	1.1;

1.1
date	97.11.30.08.05.00;	author millert;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	99.04.29.22.41.38;	author millert;	state Exp;
branches;
next	1.1.1.2;

1.1.1.2
date	2000.04.06.16.10.45;	author millert;	state Exp;
branches;
next	1.1.1.3;

1.1.1.3
date	2001.05.24.18.25.23;	author millert;	state Exp;
branches;
next	;


desc
@perl 5.004_04
@


1.4
log
@Resolve conflicts, remove old files, merge local changes
@
text
@#!./perl -w

$|=1;

BEGIN {
    chdir 't' if -d 't';
    @@INC = '../lib';
    require Config; import Config;
    if ($Config{'extensions'} !~ /\bOpcode\b/ && $Config{'osname'} ne 'VMS') {
        print "1..0\n";
        exit 0;
    }
}

use Opcode qw(
	opcodes opdesc opmask verify_opset
	opset opset_to_ops opset_to_hex invert_opset
	opmask_add full_opset empty_opset define_optag
);

use strict;

my $t = 1;
my $last_test; # initalised at end
print "1..$last_test\n";

my($s1, $s2, $s3);
my(@@o1, @@o2, @@o3);

# --- opset_to_ops and opset

my @@empty_l = opset_to_ops(empty_opset);
print @@empty_l == 0 ?   "ok $t\n" : "not ok $t\n"; $t++;

my @@full_l1  = opset_to_ops(full_opset);
print @@full_l1 == opcodes() ? "ok $t\n" : "not ok $t\n"; $t++;
my @@full_l2 = @@full_l1;	# = opcodes();	# XXX to be fixed
print "@@full_l1" eq "@@full_l2" ? "ok $t\n" : "not ok $t\n"; $t++;

@@empty_l = opset_to_ops(opset(':none'));
print @@empty_l == 0 ?   "ok $t\n" : "not ok $t\n"; $t++;

my @@full_l3 = opset_to_ops(opset(':all'));
print  @@full_l1  ==  @@full_l3  ? "ok $t\n" : "not ok $t\n"; $t++;
print "@@full_l1" eq "@@full_l3" ? "ok $t\n" : "not ok $t\n"; $t++;

die $t unless $t == 7;
$s1 = opset(      'padsv');
$s2 = opset($s1,  'padav');
$s3 = opset($s2, '!padav');
print $s1 eq $s2 ? "not ok $t\n" : "ok $t\n"; ++$t;
print $s1 eq $s3 ? "ok $t\n" : "not ok $t\n"; ++$t;

# --- define_optag

print eval { opset(':_tst_') } ? "not ok $t\n" : "ok $t\n"; ++$t;
define_optag(":_tst_", opset(qw(padsv padav padhv)));
print eval { opset(':_tst_') } ? "ok $t\n" : "not ok $t\n"; ++$t;

# --- opdesc and opcodes

die $t unless $t == 11;
print opdesc("gv") eq "glob value" ? "ok $t\n" : "not ok $t\n"; $t++;
my @@desc = opdesc(':_tst_','stub');
print "@@desc" eq "private variable private array private hash stub"
				    ? "ok $t\n" : "not ok $t\n#@@desc\n"; $t++;
print opcodes() ? "ok $t\n" : "not ok $t\n"; $t++;
print "ok $t\n"; ++$t;

# --- invert_opset

$s1 = opset(qw(fileno padsv padav));
@@o2 = opset_to_ops(invert_opset($s1));
print @@o2 == opcodes-3 ? "ok $t\n" : "not ok $t\n"; $t++;

# --- opmask

die $t unless $t == 16;
print opmask() eq empty_opset() ? "ok $t\n" : "not ok $t\n"; $t++;	# work
print length opmask() == int((opcodes()+7)/8) ? "ok $t\n" : "not ok $t\n"; $t++;

# --- verify_opset

print verify_opset($s1) && !verify_opset(42) ? "ok $t\n":"not ok $t\n"; $t++;

# --- opmask_add

opmask_add(opset(qw(fileno)));	# add to global op_mask
print eval 'fileno STDOUT' ? "not ok $t\n" : "ok $t\n";	$t++; # fail
print $@@ =~ /fileno trapped/ ? "ok $t\n" : "not ok $t\n# $@@\n"; $t++;

# --- check use of bit vector ops on opsets

$s1 = opset('padsv');
$s2 = opset('padav');
$s3 = opset('padsv', 'padav', 'padhv');

# Non-negated
print (($s1 | $s2) eq opset($s1,$s2) ? "ok $t\n":"not ok $t\n"); $t++;
print (($s2 & $s3) eq opset($s2)     ? "ok $t\n":"not ok $t\n"); $t++;
print (($s2 ^ $s3) eq opset('padsv','padhv') ? "ok $t\n":"not ok $t\n"); $t++;

# Negated, e.g., with possible extra bits in last byte beyond last op bit.
# The extra bits mean we can't just say ~mask eq invert_opset(mask).

@@o1 = opset_to_ops(           ~ $s3);
@@o2 = opset_to_ops(invert_opset $s3);
print "@@o1" eq "@@o2" ? "ok $t\n":"not ok $t\n"; $t++;

# --- finally, check some opname assertions

foreach(@@full_l1) { die "bad opname: $_" if /\W/ or /^\d/ }

print "ok $last_test\n";
BEGIN { $last_test = 25 }
@


1.3
log
@merge in perl 5.6.1 with our local changes
@
text
@@


1.2
log
@perl-5.6.0 + local changes
@
text
@d7 1
a7 1
    unshift @@INC, '../lib';
@


1.1
log
@perl 5.004_04
@
text
@d7 1
a7 1
    @@INC = '../lib';
@


1.1.1.1
log
@perl5.005_03
@
text
@@


1.1.1.2
log
@virgin perl 5.6.0
@
text
@d7 1
a7 1
    unshift @@INC, '../lib';
@


1.1.1.3
log
@stock perl 5.6.1
@
text
@d7 1
a7 1
    @@INC = '../lib';
@


