head	1.5;
access;
symbols
	OPENBSD_3_2:1.4.0.6
	OPENBSD_3_2_BASE:1.4
	OPENBSD_3_1:1.4.0.4
	OPENBSD_3_1_BASE:1.4
	OPENBSD_3_0:1.4.0.2
	OPENBSD_3_0_BASE:1.4
	PERL_5_6_1:1.1.1.3
	OPENBSD_2_9:1.3.0.6
	OPENBSD_2_9_BASE:1.3
	OPENBSD_2_8:1.3.0.4
	OPENBSD_2_8_BASE:1.3
	OPENBSD_2_7:1.3.0.2
	OPENBSD_2_7_BASE:1.3
	PERL_5_6_0:1.1.1.2
	OPENBSD_2_6:1.2.0.2
	OPENBSD_2_6_BASE:1.2
	PERL_500503:1.1.1.1
	CPAN:1.1.1
	OPENBSD_2_5:1.1.0.6
	OPENBSD_2_5_BASE:1.1
	OPENBSD_2_4:1.1.0.4
	OPENBSD_2_4_BASE:1.1
	OPENBSD_2_3:1.1.0.2
	OPENBSD_2_3_BASE:1.1;
locks; strict;
comment	@# @;


1.5
date	2002.10.27.22.25.36;	author millert;	state dead;
branches;
next	1.4;

1.4
date	2001.05.24.18.36.16;	author millert;	state Exp;
branches;
next	1.3;

1.3
date	2000.04.06.17.08.17;	author millert;	state Exp;
branches;
next	1.2;

1.2
date	99.04.29.22.52.33;	author millert;	state Exp;
branches;
next	1.1;

1.1
date	97.11.30.08.05.09;	author millert;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	99.04.29.22.41.41;	author millert;	state Exp;
branches;
next	1.1.1.2;

1.1.1.2
date	2000.04.06.16.10.46;	author millert;	state Exp;
branches;
next	1.1.1.3;

1.1.1.3
date	2001.05.24.18.25.29;	author millert;	state Exp;
branches;
next	;


desc
@perl 5.004_04
@


1.5
log
@Resolve conflicts, remove old files, merge local changes
@
text
@#!./perl 

#
# Regression tests for the Math::Trig package
#
# The tests are quite modest as the Math::Complex tests exercise
# these quite vigorously.
# 
# -- Jarkko Hietaniemi, April 1997

BEGIN {
    chdir 't' if -d 't';
    @@INC = '../lib';
}

use Math::Trig;

use strict;

use vars qw($x $y $z);

my $eps = 1e-11;

if ($^O eq 'unicos') { # See lib/Math/Complex.pm and t/lib/complex.t.
    $eps = 1e-10;
}

sub near ($$;$) {
    my $e = defined $_[2] ? $_[2] : $eps;
    $_[1] ? (abs($_[0]/$_[1] - 1) < $e) : abs($_[0]) < $e;
}

print "1..23\n";

$x = 0.9;
print 'not ' unless (near(tan($x), sin($x) / cos($x)));
print "ok 1\n";

print 'not ' unless (near(sinh(2), 3.62686040784702));
print "ok 2\n";

print 'not ' unless (near(acsch(0.1), 2.99822295029797));
print "ok 3\n";

$x = asin(2);
print 'not ' unless (ref $x eq 'Math::Complex');
print "ok 4\n";

# avoid using Math::Complex here
$x =~ /^([^-]+)(-[^i]+)i$/;
($y, $z) = ($1, $2);
print 'not ' unless (near($y,  1.5707963267949) and
		     near($z, -1.31695789692482));
print "ok 5\n";

print 'not ' unless (near(deg2rad(90), pi/2));
print "ok 6\n";

print 'not ' unless (near(rad2deg(pi), 180));
print "ok 7\n";

use Math::Trig ':radial';

{
    my ($r,$t,$z) = cartesian_to_cylindrical(1,1,1);

    print 'not ' unless (near($r, sqrt(2)))     and
	                (near($t, deg2rad(45))) and
			(near($z, 1));
    print "ok 8\n";

    ($x,$y,$z) = cylindrical_to_cartesian($r, $t, $z);

    print 'not ' unless (near($x, 1)) and
	                (near($y, 1)) and
			(near($z, 1));
    print "ok 9\n";

    ($r,$t,$z) = cartesian_to_cylindrical(1,1,0);

    print 'not ' unless (near($r, sqrt(2)))     and
	                (near($t, deg2rad(45))) and
			(near($z, 0));
    print "ok 10\n";

    ($x,$y,$z) = cylindrical_to_cartesian($r, $t, $z);

    print 'not ' unless (near($x, 1)) and
	                (near($y, 1)) and
			(near($z, 0));
    print "ok 11\n";
}

{
    my ($r,$t,$f) = cartesian_to_spherical(1,1,1);

    print 'not ' unless (near($r, sqrt(3)))     and
	                (near($t, deg2rad(45))) and
			(near($f, atan2(sqrt(2), 1)));
    print "ok 12\n";

    ($x,$y,$z) = spherical_to_cartesian($r, $t, $f);

    print 'not ' unless (near($x, 1)) and
	                (near($y, 1)) and
			(near($z, 1));
    print "ok 13\n";

    ($r,$t,$f) = cartesian_to_spherical(1,1,0);

    print 'not ' unless (near($r, sqrt(2)))     and
	                (near($t, deg2rad(45))) and
			(near($f, deg2rad(90)));
    print "ok 14\n";

    ($x,$y,$z) = spherical_to_cartesian($r, $t, $f);

    print 'not ' unless (near($x, 1)) and
	                (near($y, 1)) and
			(near($z, 0));
    print "ok 15\n";
}

{
    my ($r,$t,$z) = cylindrical_to_spherical(spherical_to_cylindrical(1,1,1));

    print 'not ' unless (near($r, 1)) and
	                (near($t, 1)) and
			(near($z, 1));
    print "ok 16\n";

    ($r,$t,$z) = spherical_to_cylindrical(cylindrical_to_spherical(1,1,1));

    print 'not ' unless (near($r, 1)) and
	                (near($t, 1)) and
			(near($z, 1));
    print "ok 17\n";
}

{
    use Math::Trig 'great_circle_distance';

    print 'not '
	unless (near(great_circle_distance(0, 0, 0, pi/2), pi/2));
    print "ok 18\n";

    print 'not '
	unless (near(great_circle_distance(0, 0, pi, pi), pi));
    print "ok 19\n";

    # London to Tokyo.
    my @@L = (deg2rad(-0.5), deg2rad(90 - 51.3));
    my @@T = (deg2rad(139.8),deg2rad(90 - 35.7));

    my $km = great_circle_distance(@@L, @@T, 6378);

    print 'not ' unless (near($km, 9605.26637021388));
    print "ok 20\n";
}

{
    my $R2D = 57.295779513082320876798154814169;

    sub frac { $_[0] - int($_[0]) }

    my $lotta_radians = deg2rad(1E+20, 1);
    print "not " unless near($lotta_radians,  1E+20/$R2D);
    print "ok 21\n";

    my $negat_degrees = rad2deg(-1E20, 1);
    print "not " unless near($negat_degrees, -1E+20*$R2D);
    print "ok 22\n";

    my $posit_degrees = rad2deg(-10000, 1);
    print "not " unless near($posit_degrees, -10000*$R2D);
    print "ok 23\n";
}

# eof
@


1.4
log
@merge in perl 5.6.1 with our local changes
@
text
@@


1.3
log
@perl-5.6.0 + local changes
@
text
@d13 1
a13 1
    unshift @@INC, '../lib';
d29 2
a30 1
    abs($_[0] - $_[1]) < (defined $_[2] ? $_[2] : $eps);
d33 1
a33 1
print "1..20\n";
d141 1
a141 1
        use Math::Trig 'great_circle_distance';
d143 3
a145 3
	print 'not '
	    unless (near(great_circle_distance(0, 0, 0, pi/2), pi/2));
	print "ok 18\n";
d147 3
a149 3
	print 'not '
	    unless (near(great_circle_distance(0, 0, pi, pi), pi));
	print "ok 19\n";
d151 3
a153 3
	# London to Tokyo.
	my @@L = (deg2rad(-0.5), deg2rad(90 - 51.3));
        my @@T = (deg2rad(139.8),deg2rad(90 - 35.7));
d155 1
a155 1
	my $km = great_circle_distance(@@L, @@T, 6378);
d157 20
a176 2
        print 'not ' unless (near($km, 9605.26637021388));
	print "ok 20\n";
@


1.2
log
@perl5.005_03 (stock)
@
text
@d13 1
a13 1
    @@INC = '../lib';
@


1.1
log
@perl 5.004_04
@
text
@d24 4
d32 1
a32 1
print "1..7\n";
d60 99
@


1.1.1.1
log
@perl5.005_03
@
text
@a23 4
if ($^O eq 'unicos') { # See lib/Math/Complex.pm and t/lib/complex.t.
    $eps = 1e-10;
}

d28 1
a28 1
print "1..20\n";
a55 99

use Math::Trig ':radial';

{
    my ($r,$t,$z) = cartesian_to_cylindrical(1,1,1);

    print 'not ' unless (near($r, sqrt(2)))     and
	                (near($t, deg2rad(45))) and
			(near($z, 1));
    print "ok 8\n";

    ($x,$y,$z) = cylindrical_to_cartesian($r, $t, $z);

    print 'not ' unless (near($x, 1)) and
	                (near($y, 1)) and
			(near($z, 1));
    print "ok 9\n";

    ($r,$t,$z) = cartesian_to_cylindrical(1,1,0);

    print 'not ' unless (near($r, sqrt(2)))     and
	                (near($t, deg2rad(45))) and
			(near($z, 0));
    print "ok 10\n";

    ($x,$y,$z) = cylindrical_to_cartesian($r, $t, $z);

    print 'not ' unless (near($x, 1)) and
	                (near($y, 1)) and
			(near($z, 0));
    print "ok 11\n";
}

{
    my ($r,$t,$f) = cartesian_to_spherical(1,1,1);

    print 'not ' unless (near($r, sqrt(3)))     and
	                (near($t, deg2rad(45))) and
			(near($f, atan2(sqrt(2), 1)));
    print "ok 12\n";

    ($x,$y,$z) = spherical_to_cartesian($r, $t, $f);

    print 'not ' unless (near($x, 1)) and
	                (near($y, 1)) and
			(near($z, 1));
    print "ok 13\n";

    ($r,$t,$f) = cartesian_to_spherical(1,1,0);

    print 'not ' unless (near($r, sqrt(2)))     and
	                (near($t, deg2rad(45))) and
			(near($f, deg2rad(90)));
    print "ok 14\n";

    ($x,$y,$z) = spherical_to_cartesian($r, $t, $f);

    print 'not ' unless (near($x, 1)) and
	                (near($y, 1)) and
			(near($z, 0));
    print "ok 15\n";
}

{
    my ($r,$t,$z) = cylindrical_to_spherical(spherical_to_cylindrical(1,1,1));

    print 'not ' unless (near($r, 1)) and
	                (near($t, 1)) and
			(near($z, 1));
    print "ok 16\n";

    ($r,$t,$z) = spherical_to_cylindrical(cylindrical_to_spherical(1,1,1));

    print 'not ' unless (near($r, 1)) and
	                (near($t, 1)) and
			(near($z, 1));
    print "ok 17\n";
}

{
        use Math::Trig 'great_circle_distance';

	print 'not '
	    unless (near(great_circle_distance(0, 0, 0, pi/2), pi/2));
	print "ok 18\n";

	print 'not '
	    unless (near(great_circle_distance(0, 0, pi, pi), pi));
	print "ok 19\n";

	# London to Tokyo.
	my @@L = (deg2rad(-0.5), deg2rad(90 - 51.3));
        my @@T = (deg2rad(139.8),deg2rad(90 - 35.7));

	my $km = great_circle_distance(@@L, @@T, 6378);

        print 'not ' unless (near($km, 9605.26637021388));
	print "ok 20\n";
}
@


1.1.1.2
log
@virgin perl 5.6.0
@
text
@d13 1
a13 1
    unshift @@INC, '../lib';
@


1.1.1.3
log
@stock perl 5.6.1
@
text
@d13 1
a13 1
    @@INC = '../lib';
d29 1
a29 2
    my $e = defined $_[2] ? $_[2] : $eps;
    $_[1] ? (abs($_[0]/$_[1] - 1) < $e) : abs($_[0]) < $e;
d32 1
a32 1
print "1..23\n";
d140 1
a140 1
    use Math::Trig 'great_circle_distance';
d142 3
a144 3
    print 'not '
	unless (near(great_circle_distance(0, 0, 0, pi/2), pi/2));
    print "ok 18\n";
d146 3
a148 3
    print 'not '
	unless (near(great_circle_distance(0, 0, pi, pi), pi));
    print "ok 19\n";
d150 3
a152 3
    # London to Tokyo.
    my @@L = (deg2rad(-0.5), deg2rad(90 - 51.3));
    my @@T = (deg2rad(139.8),deg2rad(90 - 35.7));
d154 1
a154 1
    my $km = great_circle_distance(@@L, @@T, 6378);
d156 2
a157 20
    print 'not ' unless (near($km, 9605.26637021388));
    print "ok 20\n";
}

{
    my $R2D = 57.295779513082320876798154814169;

    sub frac { $_[0] - int($_[0]) }

    my $lotta_radians = deg2rad(1E+20, 1);
    print "not " unless near($lotta_radians,  1E+20/$R2D);
    print "ok 21\n";

    my $negat_degrees = rad2deg(-1E20, 1);
    print "not " unless near($negat_degrees, -1E+20*$R2D);
    print "ok 22\n";

    my $posit_degrees = rad2deg(-10000, 1);
    print "not " unless near($posit_degrees, -10000*$R2D);
    print "ok 23\n";
@


