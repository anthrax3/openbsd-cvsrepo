head	1.6;
access;
symbols
	OPENBSD_3_2:1.5.0.6
	OPENBSD_3_2_BASE:1.5
	OPENBSD_3_1:1.5.0.4
	OPENBSD_3_1_BASE:1.5
	OPENBSD_3_0:1.5.0.2
	OPENBSD_3_0_BASE:1.5
	PERL_5_6_1:1.1.1.4
	OPENBSD_2_9:1.4.0.6
	OPENBSD_2_9_BASE:1.4
	OPENBSD_2_8:1.4.0.4
	OPENBSD_2_8_BASE:1.4
	OPENBSD_2_7:1.4.0.2
	OPENBSD_2_7_BASE:1.4
	PERL_5_6_0:1.1.1.3
	OPENBSD_2_6:1.3.0.2
	OPENBSD_2_6_BASE:1.3
	PERL_500503:1.1.1.2
	CPAN:1.1.1
	OPENBSD_2_5:1.2.0.6
	OPENBSD_2_5_BASE:1.2
	OPENBSD_2_4:1.2.0.4
	OPENBSD_2_4_BASE:1.2
	OPENBSD_2_3:1.2.0.2
	OPENBSD_2_3_BASE:1.2
	OPENBSD_2_2:1.1.1.1.0.6
	OPENBSD_2_2_BASE:1.1.1.1
	OPENBSD_2_1:1.1.1.1.0.4
	OPENBSD_2_1_BASE:1.1.1.1
	OPENBSD_2_0:1.1.1.1.0.2
	OPENBSD_2_0_BASE:1.1.1.1
	perl5003:1.1.1.1
	lwall:1.1.1;
locks; strict;
comment	@# @;


1.6
date	2002.10.27.22.25.36;	author millert;	state dead;
branches;
next	1.5;

1.5
date	2001.05.24.18.36.12;	author millert;	state Exp;
branches;
next	1.4;

1.4
date	2000.04.06.17.08.10;	author millert;	state Exp;
branches;
next	1.3;

1.3
date	99.04.29.22.52.30;	author millert;	state Exp;
branches;
next	1.2;

1.2
date	97.11.30.08.00.31;	author millert;	state Exp;
branches;
next	1.1;

1.1
date	96.08.19.10.13.15;	author downsj;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	96.08.19.10.13.15;	author downsj;	state Exp;
branches;
next	1.1.1.2;

1.1.1.2
date	99.04.29.22.41.35;	author millert;	state Exp;
branches;
next	1.1.1.3;

1.1.1.3
date	2000.04.06.16.10.42;	author millert;	state Exp;
branches;
next	1.1.1.4;

1.1.1.4
date	2001.05.24.18.25.16;	author millert;	state Exp;
branches;
next	;


desc
@@


1.6
log
@Resolve conflicts, remove old files, merge local changes
@
text
@#!./perl

# $RCSfile: gdbm.t,v $$Revision: 1.5 $$Date: 2001/05/24 18:36:12 $

BEGIN {
    @@INC = '../lib';
    require Config; import Config;
    if ($Config{'extensions'} !~ /\bGDBM_File\b/) {
	print "1..0 # Skip: GDBM_File was not built\n";
	exit 0;
    }
}

use strict;
use warnings;


use GDBM_File;

print "1..68\n";

unlink <Op.dbmx*>;

umask(0);
my %h ;
print (tie(%h,'GDBM_File','Op.dbmx', &GDBM_WRCREAT, 0640) ? "ok 1\n" : "not ok 1\n");

my $Dfile = "Op.dbmx.pag";
if (! -e $Dfile) {
	($Dfile) = <Op.dbmx*>;
}
if ($^O eq 'amigaos' || $^O eq 'os2' || $^O eq 'MSWin32' || $^O eq 'dos') {
    print "ok 2 # Skipped: different file permission semantics\n";
}
else {
    my ($dev,$ino,$mode,$nlink,$uid,$gid,$rdev,$size,$atime,$mtime,$ctime,
     $blksize,$blocks) = stat($Dfile);
    print (($mode & 0777) == 0640 ? "ok 2\n" : "not ok 2\n");
}
my $i = 0;
while (my ($key,$value) = each(%h)) {
    $i++;
}
print (!$i ? "ok 3\n" : "not ok 3\n");

$h{'goner1'} = 'snork';

$h{'abc'} = 'ABC';
$h{'def'} = 'DEF';
$h{'jkl','mno'} = "JKL\034MNO";
$h{'a',2,3,4,5} = join("\034",'A',2,3,4,5);
$h{'a'} = 'A';
$h{'b'} = 'B';
$h{'c'} = 'C';
$h{'d'} = 'D';
$h{'e'} = 'E';
$h{'f'} = 'F';
$h{'g'} = 'G';
$h{'h'} = 'H';
$h{'i'} = 'I';

$h{'goner2'} = 'snork';
delete $h{'goner2'};

untie(%h);
print (tie(%h,'GDBM_File','Op.dbmx', &GDBM_WRCREAT, 0640) ? "ok 4\n" : "not ok 4\n");

$h{'j'} = 'J';
$h{'k'} = 'K';
$h{'l'} = 'L';
$h{'m'} = 'M';
$h{'n'} = 'N';
$h{'o'} = 'O';
$h{'p'} = 'P';
$h{'q'} = 'Q';
$h{'r'} = 'R';
$h{'s'} = 'S';
$h{'t'} = 'T';
$h{'u'} = 'U';
$h{'v'} = 'V';
$h{'w'} = 'W';
$h{'x'} = 'X';
$h{'y'} = 'Y';
$h{'z'} = 'Z';

$h{'goner3'} = 'snork';

delete $h{'goner1'};
delete $h{'goner3'};

my @@keys = keys(%h);
my @@values = values(%h);

if ($#keys == 29 && $#values == 29) {print "ok 5\n";} else {print "not ok 5\n";}

while (my ($key,$value) = each(%h)) {
    if ($key eq $keys[$i] && $value eq $values[$i] && $key eq lc($value)) {
	$key =~ y/a-z/A-Z/;
	$i++ if $key eq $value;
    }
}

if ($i == 30) {print "ok 6\n";} else {print "not ok 6\n";}

@@keys = ('blurfl', keys(%h), 'dyick');
if ($#keys == 31) {print "ok 7\n";} else {print "not ok 7\n";}

$h{'foo'} = '';
$h{''} = 'bar';

# check cache overflow and numeric keys and contents
my $ok = 1;
for ($i = 1; $i < 200; $i++) { $h{$i + 0} = $i + 0; }
for ($i = 1; $i < 200; $i++) { $ok = 0 unless $h{$i} == $i; }
print ($ok ? "ok 8\n" : "not ok 8\n");

my ($dev,$ino,$mode,$nlink,$uid,$gid,$rdev,$size,$atime,$mtime,$ctime,
   $blksize,$blocks) = stat($Dfile);
print ($size > 0 ? "ok 9\n" : "not ok 9\n");

@@h{0..200} = 200..400;
my @@foo = @@h{0..200};
print join(':',200..400) eq join(':',@@foo) ? "ok 10\n" : "not ok 10\n";

print ($h{'foo'} eq '' ? "ok 11\n" : "not ok 11\n");
print ($h{''} eq 'bar' ? "ok 12\n" : "not ok 12\n");

untie %h;
unlink 'Op.dbmx.dir', $Dfile;

sub ok
{
    my $no = shift ;
    my $result = shift ;

    print "not " unless $result ;
    print "ok $no\n" ;
}

{
   # sub-class test

   package Another ;

   use strict ;
   use warnings ;

   open(FILE, ">SubDB.pm") or die "Cannot open SubDB.pm: $!\n" ;
   print FILE <<'EOM' ;

   package SubDB ;

   use strict ;
   use vars qw(@@ISA @@EXPORT) ;

   require Exporter ;
   use GDBM_File;
   @@ISA=qw(GDBM_File);
   @@EXPORT = @@GDBM_File::EXPORT ;

   sub STORE { 
	my $self = shift ;
        my $key = shift ;
        my $value = shift ;
        $self->SUPER::STORE($key, $value * 2) ;
   }

   sub FETCH { 
	my $self = shift ;
        my $key = shift ;
        $self->SUPER::FETCH($key) - 1 ;
   }

   sub A_new_method
   {
	my $self = shift ;
        my $key = shift ;
        my $value = $self->FETCH($key) ;
	return "[[$value]]" ;
   }

   1 ;
EOM

    close FILE ;

    BEGIN { push @@INC, '.'; }
    unlink <dbhash.tmp*> ;

    eval 'use SubDB ; ';
    main::ok(13, $@@ eq "") ;
    my %h ;
    my $X ;
    eval '
	$X = tie(%h, "SubDB","dbhash.tmp", &GDBM_WRCREAT, 0640 );
	' ;

    main::ok(14, $@@ eq "") ;

    my $ret = eval '$h{"fred"} = 3 ; return $h{"fred"} ' ;
    main::ok(15, $@@ eq "") ;
    main::ok(16, $ret == 5) ;

    $ret = eval ' &GDBM_WRCREAT eq &main::GDBM_WRCREAT ' ;
    main::ok(17, $@@ eq "" ) ;
    main::ok(18, $ret == 1) ;

    $ret = eval '$X->A_new_method("fred") ' ;
    main::ok(19, $@@ eq "") ;
    main::ok(20, $ret eq "[[5]]") ;

    undef $X;
    untie(%h);
    unlink "SubDB.pm", <dbhash.tmp*> ;

}

{
   # DBM Filter tests
   use strict ;
   use warnings ;
   my (%h, $db) ;
   my ($fetch_key, $store_key, $fetch_value, $store_value) = ("") x 4 ;

   sub checkOutput
   {
       my($fk, $sk, $fv, $sv) = @@_ ;
       return
           $fetch_key eq $fk && $store_key eq $sk && 
	   $fetch_value eq $fv && $store_value eq $sv &&
	   $_ eq 'original' ;
   }
   
   unlink <Op.dbmx*>;
   ok(21, $db = tie(%h, 'GDBM_File','Op.dbmx', &GDBM_WRCREAT, 0640)) ;

   $db->filter_fetch_key   (sub { $fetch_key = $_ }) ;
   $db->filter_store_key   (sub { $store_key = $_ }) ;
   $db->filter_fetch_value (sub { $fetch_value = $_}) ;
   $db->filter_store_value (sub { $store_value = $_ }) ;

   $_ = "original" ;

   $h{"fred"} = "joe" ;
   #                   fk   sk     fv   sv
   ok(22, checkOutput( "", "fred", "", "joe")) ;

   ($fetch_key, $store_key, $fetch_value, $store_value) = ("") x 4 ;
   ok(23, $h{"fred"} eq "joe");
   #                   fk    sk     fv    sv
   ok(24, checkOutput( "", "fred", "joe", "")) ;

   ($fetch_key, $store_key, $fetch_value, $store_value) = ("") x 4 ;
   ok(25, $db->FIRSTKEY() eq "fred") ;
   #                    fk     sk  fv  sv
   ok(26, checkOutput( "fred", "", "", "")) ;

   # replace the filters, but remember the previous set
   my ($old_fk) = $db->filter_fetch_key   
   			(sub { $_ = uc $_ ; $fetch_key = $_ }) ;
   my ($old_sk) = $db->filter_store_key   
   			(sub { $_ = lc $_ ; $store_key = $_ }) ;
   my ($old_fv) = $db->filter_fetch_value 
   			(sub { $_ = "[$_]"; $fetch_value = $_ }) ;
   my ($old_sv) = $db->filter_store_value 
   			(sub { s/o/x/g; $store_value = $_ }) ;
   
   ($fetch_key, $store_key, $fetch_value, $store_value) = ("") x 4 ;
   $h{"Fred"} = "Joe" ;
   #                   fk   sk     fv    sv
   ok(27, checkOutput( "", "fred", "", "Jxe")) ;

   ($fetch_key, $store_key, $fetch_value, $store_value) = ("") x 4 ;
   ok(28, $h{"Fred"} eq "[Jxe]");
   #                   fk   sk     fv    sv
   ok(29, checkOutput( "", "fred", "[Jxe]", "")) ;

   ($fetch_key, $store_key, $fetch_value, $store_value) = ("") x 4 ;
   ok(30, $db->FIRSTKEY() eq "FRED") ;
   #                   fk   sk     fv    sv
   ok(31, checkOutput( "FRED", "", "", "")) ;

   # put the original filters back
   $db->filter_fetch_key   ($old_fk);
   $db->filter_store_key   ($old_sk);
   $db->filter_fetch_value ($old_fv);
   $db->filter_store_value ($old_sv);

   ($fetch_key, $store_key, $fetch_value, $store_value) = ("") x 4 ;
   $h{"fred"} = "joe" ;
   ok(32, checkOutput( "", "fred", "", "joe")) ;

   ($fetch_key, $store_key, $fetch_value, $store_value) = ("") x 4 ;
   ok(33, $h{"fred"} eq "joe");
   ok(34, checkOutput( "", "fred", "joe", "")) ;

   ($fetch_key, $store_key, $fetch_value, $store_value) = ("") x 4 ;
   ok(35, $db->FIRSTKEY() eq "fred") ;
   ok(36, checkOutput( "fred", "", "", "")) ;

   # delete the filters
   $db->filter_fetch_key   (undef);
   $db->filter_store_key   (undef);
   $db->filter_fetch_value (undef);
   $db->filter_store_value (undef);

   ($fetch_key, $store_key, $fetch_value, $store_value) = ("") x 4 ;
   $h{"fred"} = "joe" ;
   ok(37, checkOutput( "", "", "", "")) ;

   ($fetch_key, $store_key, $fetch_value, $store_value) = ("") x 4 ;
   ok(38, $h{"fred"} eq "joe");
   ok(39, checkOutput( "", "", "", "")) ;

   ($fetch_key, $store_key, $fetch_value, $store_value) = ("") x 4 ;
   ok(40, $db->FIRSTKEY() eq "fred") ;
   ok(41, checkOutput( "", "", "", "")) ;

   undef $db ;
   untie %h;
   unlink <Op.dbmx*>;
}

{    
    # DBM Filter with a closure

    use strict ;
    use warnings ;
    my (%h, $db) ;

    unlink <Op.dbmx*>;
    ok(42, $db = tie(%h, 'GDBM_File','Op.dbmx', &GDBM_WRCREAT, 0640)) ;

    my %result = () ;

    sub Closure
    {
        my ($name) = @@_ ;
	my $count = 0 ;
	my @@kept = () ;

	return sub { ++$count ; 
		     push @@kept, $_ ; 
		     $result{$name} = "$name - $count: [@@kept]" ;
		   }
    }

    $db->filter_store_key(Closure("store key")) ;
    $db->filter_store_value(Closure("store value")) ;
    $db->filter_fetch_key(Closure("fetch key")) ;
    $db->filter_fetch_value(Closure("fetch value")) ;

    $_ = "original" ;

    $h{"fred"} = "joe" ;
    ok(43, $result{"store key"} eq "store key - 1: [fred]");
    ok(44, $result{"store value"} eq "store value - 1: [joe]");
    ok(45, !defined $result{"fetch key"} );
    ok(46, !defined $result{"fetch value"} );
    ok(47, $_ eq "original") ;

    ok(48, $db->FIRSTKEY() eq "fred") ;
    ok(49, $result{"store key"} eq "store key - 1: [fred]");
    ok(50, $result{"store value"} eq "store value - 1: [joe]");
    ok(51, $result{"fetch key"} eq "fetch key - 1: [fred]");
    ok(52, ! defined $result{"fetch value"} );
    ok(53, $_ eq "original") ;

    $h{"jim"}  = "john" ;
    ok(54, $result{"store key"} eq "store key - 2: [fred jim]");
    ok(55, $result{"store value"} eq "store value - 2: [joe john]");
    ok(56, $result{"fetch key"} eq "fetch key - 1: [fred]");
    ok(57, ! defined $result{"fetch value"} );
    ok(58, $_ eq "original") ;

    ok(59, $h{"fred"} eq "joe");
    ok(60, $result{"store key"} eq "store key - 3: [fred jim fred]");
    ok(61, $result{"store value"} eq "store value - 2: [joe john]");
    ok(62, $result{"fetch key"} eq "fetch key - 1: [fred]");
    ok(63, $result{"fetch value"} eq "fetch value - 1: [joe]");
    ok(64, $_ eq "original") ;

    undef $db ;
    untie %h;
    unlink <Op.dbmx*>;
}

{
   # DBM Filter recursion detection
   use strict ;
   use warnings ;
   my (%h, $db) ;
   unlink <Op.dbmx*>;

   ok(65, $db = tie(%h, 'GDBM_File','Op.dbmx', &GDBM_WRCREAT, 0640)) ;

   $db->filter_store_key (sub { $_ = $h{$_} }) ;

   eval '$h{1} = 1234' ;
   ok(66, $@@ =~ /^recursion detected in filter_store_key at/ );
   
   undef $db ;
   untie %h;
   unlink <Op.dbmx*>;
}

{
    # Bug ID 20001013.009
    #
    # test that $hash{KEY} = undef doesn't produce the warning
    #     Use of uninitialized value in null operation 
    use warnings ;
    use strict ;
    use GDBM_File ;

    unlink <Op.dbmx*>;
    my %h ;
    my $a = "";
    local $SIG{__WARN__} = sub {$a = $_[0]} ;
    
    ok(67, tie(%h, 'GDBM_File','Op.dbmx', &GDBM_WRCREAT, 0640));
    $h{ABC} = undef;
    ok(68, $a eq "") ;
    untie %h;
    unlink <Op.dbmx*>;
}
@


1.5
log
@merge in perl 5.6.1 with our local changes
@
text
@d3 1
a3 1
# $RCSfile: dbm.t,v $$Revision: 4.1 $$Date: 92/08/07 18:27:43 $
@


1.4
log
@perl-5.6.0 + local changes
@
text
@d6 1
a6 1
    unshift @@INC, '../lib';
d14 4
d20 1
a20 1
print "1..66\n";
d25 2
a26 1
print (tie(%h,GDBM_File,'Op.dbmx', &GDBM_WRCREAT, 0640) ? "ok 1\n" : "not ok 1\n");
d28 1
a28 1
$Dfile = "Op.dbmx.pag";
d36 1
a36 1
    ($dev,$ino,$mode,$nlink,$uid,$gid,$rdev,$size,$atime,$mtime,$ctime,
d40 2
a41 1
while (($key,$value) = each(%h)) {
d66 1
a66 1
print (tie(%h,GDBM_File,'Op.dbmx', &GDBM_WRCREAT, 0640) ? "ok 4\n" : "not ok 4\n");
d91 2
a92 2
@@keys = keys(%h);
@@values = values(%h);
d96 1
a96 1
while (($key,$value) = each(%h)) {
d112 1
a112 1
$ok = 1;
d117 1
a117 1
($dev,$ino,$mode,$nlink,$uid,$gid,$rdev,$size,$atime,$mtime,$ctime,
d122 1
a122 1
@@foo = @@h{0..200};
d146 1
d188 1
d221 1
d328 1
d373 1
a373 1
    ok(57, $result{"fetch value"} eq "");
d391 1
d405 21
@


1.3
log
@perl5.005_03 (stock)
@
text
@d6 1
a6 1
    @@INC = '../lib';
d9 1
a9 1
	print "1..0\n";
d16 1
a16 1
print "1..20\n";
d208 186
@


1.2
log
@perl 5.004_04
@
text
@d27 2
a28 2
if ($^O eq 'amigaos' || $^O eq 'os2' || $^O eq 'MSWin32') {
    print "ok 2\n";
d90 1
a90 1
while (($key,$value) = each(h)) {
d99 1
a99 1
@@keys = ('blurfl', keys(h), 'dyick');
d204 2
@


1.1
log
@Initial revision
@
text
@d16 1
a16 1
print "1..12\n";
d27 8
a34 3
($dev,$ino,$mode,$nlink,$uid,$gid,$rdev,$size,$atime,$mtime,$ctime,
   $blksize,$blocks) = stat($Dfile);
print (($mode & 0777) == 0640 ? "ok 2\n" : "not ok 2\n");
d91 1
a91 1
    if ($key eq $keys[$i] && $value eq $values[$i] && $key gt $value) {
d122 1
d124 83
@


1.1.1.1
log
@Import of Perl 5.003 into the tree.  Makefile.bsd-wrapper and
config.sh.OpenBSD are the only local changes.
@
text
@@


1.1.1.2
log
@perl5.005_03
@
text
@d16 1
a16 1
print "1..20\n";
d27 3
a29 8
if ($^O eq 'amigaos' || $^O eq 'os2' || $^O eq 'MSWin32' || $^O eq 'dos') {
    print "ok 2 # Skipped: different file permission semantics\n";
}
else {
    ($dev,$ino,$mode,$nlink,$uid,$gid,$rdev,$size,$atime,$mtime,$ctime,
     $blksize,$blocks) = stat($Dfile);
    print (($mode & 0777) == 0640 ? "ok 2\n" : "not ok 2\n");
}
d85 2
a86 2
while (($key,$value) = each(%h)) {
    if ($key eq $keys[$i] && $value eq $values[$i] && $key eq lc($value)) {
d94 1
a94 1
@@keys = ('blurfl', keys(%h), 'dyick');
a116 1
untie %h;
a117 85

sub ok
{
    my $no = shift ;
    my $result = shift ;

    print "not " unless $result ;
    print "ok $no\n" ;
}

{
   # sub-class test

   package Another ;

   use strict ;

   open(FILE, ">SubDB.pm") or die "Cannot open SubDB.pm: $!\n" ;
   print FILE <<'EOM' ;

   package SubDB ;

   use strict ;
   use vars qw(@@ISA @@EXPORT) ;

   require Exporter ;
   use GDBM_File;
   @@ISA=qw(GDBM_File);
   @@EXPORT = @@GDBM_File::EXPORT ;

   sub STORE { 
	my $self = shift ;
        my $key = shift ;
        my $value = shift ;
        $self->SUPER::STORE($key, $value * 2) ;
   }

   sub FETCH { 
	my $self = shift ;
        my $key = shift ;
        $self->SUPER::FETCH($key) - 1 ;
   }

   sub A_new_method
   {
	my $self = shift ;
        my $key = shift ;
        my $value = $self->FETCH($key) ;
	return "[[$value]]" ;
   }

   1 ;
EOM

    close FILE ;

    BEGIN { push @@INC, '.'; }

    eval 'use SubDB ; ';
    main::ok(13, $@@ eq "") ;
    my %h ;
    my $X ;
    eval '
	$X = tie(%h, "SubDB","dbhash.tmp", &GDBM_WRCREAT, 0640 );
	' ;

    main::ok(14, $@@ eq "") ;

    my $ret = eval '$h{"fred"} = 3 ; return $h{"fred"} ' ;
    main::ok(15, $@@ eq "") ;
    main::ok(16, $ret == 5) ;

    $ret = eval ' &GDBM_WRCREAT eq &main::GDBM_WRCREAT ' ;
    main::ok(17, $@@ eq "" ) ;
    main::ok(18, $ret == 1) ;

    $ret = eval '$X->A_new_method("fred") ' ;
    main::ok(19, $@@ eq "") ;
    main::ok(20, $ret eq "[[5]]") ;

    undef $X;
    untie(%h);
    unlink "SubDB.pm", <dbhash.tmp*> ;

}
@


1.1.1.3
log
@virgin perl 5.6.0
@
text
@d6 1
a6 1
    unshift @@INC, '../lib';
d9 1
a9 1
	print "1..0 # Skip: GDBM_File was not built\n";
d16 1
a16 1
print "1..66\n";
a207 186
}

{
   # DBM Filter tests
   use strict ;
   my (%h, $db) ;
   my ($fetch_key, $store_key, $fetch_value, $store_value) = ("") x 4 ;

   sub checkOutput
   {
       my($fk, $sk, $fv, $sv) = @@_ ;
       return
           $fetch_key eq $fk && $store_key eq $sk && 
	   $fetch_value eq $fv && $store_value eq $sv &&
	   $_ eq 'original' ;
   }
   
   unlink <Op.dbmx*>;
   ok(21, $db = tie(%h, 'GDBM_File','Op.dbmx', &GDBM_WRCREAT, 0640)) ;

   $db->filter_fetch_key   (sub { $fetch_key = $_ }) ;
   $db->filter_store_key   (sub { $store_key = $_ }) ;
   $db->filter_fetch_value (sub { $fetch_value = $_}) ;
   $db->filter_store_value (sub { $store_value = $_ }) ;

   $_ = "original" ;

   $h{"fred"} = "joe" ;
   #                   fk   sk     fv   sv
   ok(22, checkOutput( "", "fred", "", "joe")) ;

   ($fetch_key, $store_key, $fetch_value, $store_value) = ("") x 4 ;
   ok(23, $h{"fred"} eq "joe");
   #                   fk    sk     fv    sv
   ok(24, checkOutput( "", "fred", "joe", "")) ;

   ($fetch_key, $store_key, $fetch_value, $store_value) = ("") x 4 ;
   ok(25, $db->FIRSTKEY() eq "fred") ;
   #                    fk     sk  fv  sv
   ok(26, checkOutput( "fred", "", "", "")) ;

   # replace the filters, but remember the previous set
   my ($old_fk) = $db->filter_fetch_key   
   			(sub { $_ = uc $_ ; $fetch_key = $_ }) ;
   my ($old_sk) = $db->filter_store_key   
   			(sub { $_ = lc $_ ; $store_key = $_ }) ;
   my ($old_fv) = $db->filter_fetch_value 
   			(sub { $_ = "[$_]"; $fetch_value = $_ }) ;
   my ($old_sv) = $db->filter_store_value 
   			(sub { s/o/x/g; $store_value = $_ }) ;
   
   ($fetch_key, $store_key, $fetch_value, $store_value) = ("") x 4 ;
   $h{"Fred"} = "Joe" ;
   #                   fk   sk     fv    sv
   ok(27, checkOutput( "", "fred", "", "Jxe")) ;

   ($fetch_key, $store_key, $fetch_value, $store_value) = ("") x 4 ;
   ok(28, $h{"Fred"} eq "[Jxe]");
   #                   fk   sk     fv    sv
   ok(29, checkOutput( "", "fred", "[Jxe]", "")) ;

   ($fetch_key, $store_key, $fetch_value, $store_value) = ("") x 4 ;
   ok(30, $db->FIRSTKEY() eq "FRED") ;
   #                   fk   sk     fv    sv
   ok(31, checkOutput( "FRED", "", "", "")) ;

   # put the original filters back
   $db->filter_fetch_key   ($old_fk);
   $db->filter_store_key   ($old_sk);
   $db->filter_fetch_value ($old_fv);
   $db->filter_store_value ($old_sv);

   ($fetch_key, $store_key, $fetch_value, $store_value) = ("") x 4 ;
   $h{"fred"} = "joe" ;
   ok(32, checkOutput( "", "fred", "", "joe")) ;

   ($fetch_key, $store_key, $fetch_value, $store_value) = ("") x 4 ;
   ok(33, $h{"fred"} eq "joe");
   ok(34, checkOutput( "", "fred", "joe", "")) ;

   ($fetch_key, $store_key, $fetch_value, $store_value) = ("") x 4 ;
   ok(35, $db->FIRSTKEY() eq "fred") ;
   ok(36, checkOutput( "fred", "", "", "")) ;

   # delete the filters
   $db->filter_fetch_key   (undef);
   $db->filter_store_key   (undef);
   $db->filter_fetch_value (undef);
   $db->filter_store_value (undef);

   ($fetch_key, $store_key, $fetch_value, $store_value) = ("") x 4 ;
   $h{"fred"} = "joe" ;
   ok(37, checkOutput( "", "", "", "")) ;

   ($fetch_key, $store_key, $fetch_value, $store_value) = ("") x 4 ;
   ok(38, $h{"fred"} eq "joe");
   ok(39, checkOutput( "", "", "", "")) ;

   ($fetch_key, $store_key, $fetch_value, $store_value) = ("") x 4 ;
   ok(40, $db->FIRSTKEY() eq "fred") ;
   ok(41, checkOutput( "", "", "", "")) ;

   undef $db ;
   untie %h;
   unlink <Op.dbmx*>;
}

{    
    # DBM Filter with a closure

    use strict ;
    my (%h, $db) ;

    unlink <Op.dbmx*>;
    ok(42, $db = tie(%h, 'GDBM_File','Op.dbmx', &GDBM_WRCREAT, 0640)) ;

    my %result = () ;

    sub Closure
    {
        my ($name) = @@_ ;
	my $count = 0 ;
	my @@kept = () ;

	return sub { ++$count ; 
		     push @@kept, $_ ; 
		     $result{$name} = "$name - $count: [@@kept]" ;
		   }
    }

    $db->filter_store_key(Closure("store key")) ;
    $db->filter_store_value(Closure("store value")) ;
    $db->filter_fetch_key(Closure("fetch key")) ;
    $db->filter_fetch_value(Closure("fetch value")) ;

    $_ = "original" ;

    $h{"fred"} = "joe" ;
    ok(43, $result{"store key"} eq "store key - 1: [fred]");
    ok(44, $result{"store value"} eq "store value - 1: [joe]");
    ok(45, !defined $result{"fetch key"} );
    ok(46, !defined $result{"fetch value"} );
    ok(47, $_ eq "original") ;

    ok(48, $db->FIRSTKEY() eq "fred") ;
    ok(49, $result{"store key"} eq "store key - 1: [fred]");
    ok(50, $result{"store value"} eq "store value - 1: [joe]");
    ok(51, $result{"fetch key"} eq "fetch key - 1: [fred]");
    ok(52, ! defined $result{"fetch value"} );
    ok(53, $_ eq "original") ;

    $h{"jim"}  = "john" ;
    ok(54, $result{"store key"} eq "store key - 2: [fred jim]");
    ok(55, $result{"store value"} eq "store value - 2: [joe john]");
    ok(56, $result{"fetch key"} eq "fetch key - 1: [fred]");
    ok(57, $result{"fetch value"} eq "");
    ok(58, $_ eq "original") ;

    ok(59, $h{"fred"} eq "joe");
    ok(60, $result{"store key"} eq "store key - 3: [fred jim fred]");
    ok(61, $result{"store value"} eq "store value - 2: [joe john]");
    ok(62, $result{"fetch key"} eq "fetch key - 1: [fred]");
    ok(63, $result{"fetch value"} eq "fetch value - 1: [joe]");
    ok(64, $_ eq "original") ;

    undef $db ;
    untie %h;
    unlink <Op.dbmx*>;
}

{
   # DBM Filter recursion detection
   use strict ;
   my (%h, $db) ;
   unlink <Op.dbmx*>;

   ok(65, $db = tie(%h, 'GDBM_File','Op.dbmx', &GDBM_WRCREAT, 0640)) ;

   $db->filter_store_key (sub { $_ = $h{$_} }) ;

   eval '$h{1} = 1234' ;
   ok(66, $@@ =~ /^recursion detected in filter_store_key at/ );
   
   undef $db ;
   untie %h;
   unlink <Op.dbmx*>;
@


1.1.1.4
log
@stock perl 5.6.1
@
text
@d6 1
a6 1
    @@INC = '../lib';
a13 4
use strict;
use warnings;


d16 1
a16 1
print "1..68\n";
d21 1
a21 2
my %h ;
print (tie(%h,'GDBM_File','Op.dbmx', &GDBM_WRCREAT, 0640) ? "ok 1\n" : "not ok 1\n");
d23 1
a23 1
my $Dfile = "Op.dbmx.pag";
d31 1
a31 1
    my ($dev,$ino,$mode,$nlink,$uid,$gid,$rdev,$size,$atime,$mtime,$ctime,
d35 1
a35 2
my $i = 0;
while (my ($key,$value) = each(%h)) {
d60 1
a60 1
print (tie(%h,'GDBM_File','Op.dbmx', &GDBM_WRCREAT, 0640) ? "ok 4\n" : "not ok 4\n");
d85 2
a86 2
my @@keys = keys(%h);
my @@values = values(%h);
d90 1
a90 1
while (my ($key,$value) = each(%h)) {
d106 1
a106 1
my $ok = 1;
d111 1
a111 1
my ($dev,$ino,$mode,$nlink,$uid,$gid,$rdev,$size,$atime,$mtime,$ctime,
d116 1
a116 1
my @@foo = @@h{0..200};
a139 1
   use warnings ;
a180 1
    unlink <dbhash.tmp*> ;
a212 1
   use warnings ;
a318 1
    use warnings ;
d363 1
a363 1
    ok(57, ! defined $result{"fetch value"} );
a380 1
   use warnings ;
a393 21
}

{
    # Bug ID 20001013.009
    #
    # test that $hash{KEY} = undef doesn't produce the warning
    #     Use of uninitialized value in null operation 
    use warnings ;
    use strict ;
    use GDBM_File ;

    unlink <Op.dbmx*>;
    my %h ;
    my $a = "";
    local $SIG{__WARN__} = sub {$a = $_[0]} ;
    
    ok(67, tie(%h, 'GDBM_File','Op.dbmx', &GDBM_WRCREAT, 0640));
    $h{ABC} = undef;
    ok(68, $a eq "") ;
    untie %h;
    unlink <Op.dbmx*>;
@


