head	1.2;
access;
symbols
	OPENBSD_3_2:1.1.1.3.0.6
	OPENBSD_3_2_BASE:1.1.1.3
	OPENBSD_3_1:1.1.1.3.0.4
	OPENBSD_3_1_BASE:1.1.1.3
	OPENBSD_3_0:1.1.1.3.0.2
	OPENBSD_3_0_BASE:1.1.1.3
	PERL_5_6_1:1.1.1.3
	OPENBSD_2_9:1.1.1.2.0.6
	OPENBSD_2_9_BASE:1.1.1.2
	OPENBSD_2_8:1.1.1.2.0.4
	OPENBSD_2_8_BASE:1.1.1.2
	OPENBSD_2_7:1.1.1.2.0.2
	OPENBSD_2_7_BASE:1.1.1.2
	PERL_5_6_0:1.1.1.2
	OPENBSD_2_6:1.1.1.1.0.2
	OPENBSD_2_6_BASE:1.1.1.1
	PERL_500503:1.1.1.1
	CPAN:1.1.1;
locks; strict;
comment	@# @;


1.2
date	2002.10.27.22.25.36;	author millert;	state dead;
branches;
next	1.1;

1.1
date	99.04.29.22.41.37;	author millert;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	99.04.29.22.41.37;	author millert;	state Exp;
branches;
next	1.1.1.2;

1.1.1.2
date	2000.04.06.16.10.44;	author millert;	state Exp;
branches;
next	1.1.1.3;

1.1.1.3
date	2001.05.24.18.25.22;	author millert;	state Exp;
branches;
next	;


desc
@@


1.2
log
@Resolve conflicts, remove old files, merge local changes
@
text
@#!./perl

BEGIN {
    chdir 't' if -d 't';

    @@INC = '../lib';

    require Config; import Config;

    unless ($Config{'d_msg'} eq 'define' &&
	    $Config{'d_sem'} eq 'define') {
	print "1..0\n";
	exit;
    }
}

# These constants are common to all tests.
# Later the sem* tests will import more for themselves.

use IPC::SysV qw(IPC_PRIVATE IPC_NOWAIT IPC_STAT IPC_RMID
		 S_IRWXU S_IRWXG S_IRWXO);
use strict;

print "1..16\n";

my $msg;
my $sem;

$SIG{__DIE__} = 'cleanup'; # will cleanup $msg and $sem if needed

# FreeBSD is known to throw this if there's no SysV IPC in the kernel.
$SIG{SYS} = sub {
    print STDERR <<EOM;
SIGSYS caught.
It may be that your kernel does not have SysV IPC configured.

EOM
    if ($^O eq 'freebsd') {
	print STDERR <<EOM;
You must have following options in your kernel:

options         SYSVSHM
options         SYSVSEM
options         SYSVMSG

See config(8).
EOM
    }
    exit(1);
};

if ($Config{'d_msgget'} eq 'define' &&
    $Config{'d_msgctl'} eq 'define' &&
    $Config{'d_msgsnd'} eq 'define' &&
    $Config{'d_msgrcv'} eq 'define') {
    $msg = msgget(IPC_PRIVATE, S_IRWXU | S_IRWXG | S_IRWXO);
    # Very first time called after machine is booted value may be 0 
    die "msgget failed: $!\n" unless defined($msg) && $msg >= 0;

    print "ok 1\n";

    #Putting a message on the queue
    my $msgtype = 1;
    my $msgtext = "hello";

    msgsnd($msg,pack("L a*",$msgtype,$msgtext),0) or print "not ";
    print "ok 2\n";

    my $data;
    msgctl($msg,IPC_STAT,$data) or print "not ";
    print "ok 3\n";

    print "not " unless length($data);
    print "ok 4\n";

    my $msgbuf;
    msgrcv($msg,$msgbuf,256,0,IPC_NOWAIT) or print "not ";
    print "ok 5\n";

    my($rmsgtype,$rmsgtext) = unpack("L a*",$msgbuf);

    print "not " unless($rmsgtype == $msgtype && $rmsgtext eq $msgtext);
    print "ok 6\n";
} else {
    for (1..6) {
	print "ok $_\n"; # fake it
    }
}

if($Config{'d_semget'} eq 'define' &&
   $Config{'d_semctl'} eq 'define') {

    use IPC::SysV qw(IPC_CREAT GETALL SETALL);

    $sem = semget(IPC_PRIVATE, 10, S_IRWXU | S_IRWXG | S_IRWXO | IPC_CREAT);
    # Very first time called after machine is booted value may be 0 
    die "semget: $!\n" unless defined($sem) && $sem >= 0;

    print "ok 7\n";

    my $data;
    semctl($sem,0,IPC_STAT,$data) or print "not ";
    print "ok 8\n";

    print "not " unless length($data);
    print "ok 9\n";

    my $template;

    # Find the pack/unpack template capable of handling native C shorts.

    if      ($Config{shortsize} == 2) {
	$template = "s";
    } elsif ($Config{shortsize} == 4) {
	$template = "l";
    } elsif ($Config{shortsize} == 8) {
	# Try quad last because not supported everywhere.
	foreach my $t (qw(i q)) {
	    # We could trap the unsupported quad template with eval
	    # but if we get this far we should have quad support anyway.
	    if (length(pack($t, 0)) == 8) {
		$template = $t;
		last;
	    }
	}
    }

    die "$0: cannot pack native shorts\n" unless defined $template;

    $template .= "*";

    my $nsem = 10;

    semctl($sem,0,SETALL,pack($template,(0) x $nsem)) or print "not ";
    print "ok 10\n";

    $data = "";
    semctl($sem,0,GETALL,$data) or print "not ";
    print "ok 11\n";

    print "not " unless length($data) == length(pack($template,(0) x $nsem));
    print "ok 12\n";

    my @@data = unpack($template,$data);

    my $adata = "0" x $nsem;

    print "not " unless @@data == $nsem and join("",@@data) eq $adata;
    print "ok 13\n";

    my $poke = 2;

    $data[$poke] = 1;
    semctl($sem,0,SETALL,pack($template,@@data)) or print "not ";
    print "ok 14\n";
    
    $data = "";
    semctl($sem,0,GETALL,$data) or print "not ";
    print "ok 15\n";

    @@data = unpack($template,$data);

    my $bdata = "0" x $poke . "1" . "0" x ($nsem-$poke-1);

    print "not " unless join("",@@data) eq $bdata;
    print "ok 16\n";
} else {
    for (7..16) {
	print "ok $_\n"; # fake it
    }
}

sub cleanup {
    msgctl($msg,IPC_RMID,0)       if defined $msg;
    semctl($sem,0,IPC_RMID,undef) if defined $sem;
}

cleanup;
@


1.1
log
@Initial revision
@
text
@@


1.1.1.1
log
@perl5.005_03
@
text
@@


1.1.1.2
log
@virgin perl 5.6.0
@
text
@d6 1
a6 1
    unshift @@INC, '../lib';
d10 4
a13 10
    my $reason;

    if ($Config{'d_sem'} ne 'define') {
      $reason = '$Config{d_sem} undefined';
    } elsif ($Config{'d_msg'} ne 'define') {
      $reason = '$Config{d_msg} undefined';
    }
    if ($reason) {
	print "1..0 # Skip: $reason\n";
	exit 0;
d20 2
a21 1
use IPC::SysV qw(IPC_PRIVATE IPC_NOWAIT IPC_STAT IPC_RMID S_IRWXU);
a51 2
my $perm = S_IRWXU;

d56 1
a56 2

    $msg = msgget(IPC_PRIVATE, $perm);
d66 1
a66 8
    my $test2bad;
    my $test5bad;
    my $test6bad;

    unless (msgsnd($msg,pack("L! a*",$msgtype,$msgtext),IPC_NOWAIT)) {
	print "not ";
	$test2bad = 1;
    }
a67 19
    if ($test2bad) {
	print <<EOM;
#
# The failure of the subtest #2 may indicate that the message queue
# resource limits either of the system or of the testing account
# have been reached.  Error message "Operating would block" is
# usually indicative of this situation.  The error message was now:
# "$!"
#
# You can check the message queues with the 'ipcs' command and
# you can remove unneeded queues with the 'ipcrm -q id' command.
# You may also consider configuring your system or account
# to have more message queue resources.
#
# Because of the subtest #2 failing also the substests #5 and #6 will
# very probably also fail.
#
EOM
    }
d77 1
a77 4
    unless (msgrcv($msg,$msgbuf,256,0,IPC_NOWAIT)) {
	print "not ";
	$test5bad = 1;
    }
a78 7
    if ($test5bad && $test2bad) {
	print <<EOM;
#
# This failure was to be expected because the subtest #2 failed.
#
EOM
    }
d80 3
a82 6
    my($rmsgtype,$rmsgtext);
    ($rmsgtype,$rmsgtext) = unpack("L! a*",$msgbuf);
    unless ($rmsgtype == $msgtype && $rmsgtext eq $msgtext) {
	print "not ";
	$test6bad = 1;
    }
a83 7
    if ($test6bad && $test2bad) {
	print <<EOM;
#
# This failure was to be expected because the subtest #2 failed.
#
EOM
     }
d93 16
a108 2
    if ($Config{'d_semctl_semid_ds'} eq 'define' ||
	$Config{'d_semctl_semun'}    eq 'define') {
d110 1
a110 1
	use IPC::SysV qw(IPC_CREAT GETALL SETALL);
d112 15
a126 3
	$sem = semget(IPC_PRIVATE, 10, $perm | IPC_CREAT);
	# Very first time called after machine is booted value may be 0 
	die "semget: $!\n" unless defined($sem) && $sem >= 0;
d128 1
a128 1
	print "ok 7\n";
d130 1
a130 6
	my $data;
	semctl($sem,0,IPC_STAT,$data) or print "not ";
	print "ok 8\n";
	
	print "not " unless length($data);
	print "ok 9\n";
d132 1
a132 1
	my $nsem = 10;
d134 2
a135 2
	semctl($sem,0,SETALL,pack("s!*",(0) x $nsem)) or print "not ";
	print "ok 10\n";
d137 3
a139 3
	$data = "";
	semctl($sem,0,GETALL,$data) or print "not ";
	print "ok 11\n";
d141 2
a142 2
	print "not " unless length($data) == length(pack("s!*",(0) x $nsem));
	print "ok 12\n";
d144 1
a144 1
	my @@data = unpack("s!*",$data);
d146 1
a146 1
	my $adata = "0" x $nsem;
d148 2
a149 2
	print "not " unless @@data == $nsem and join("",@@data) eq $adata;
	print "ok 13\n";
d151 1
a151 1
	my $poke = 2;
d153 3
a155 3
	$data[$poke] = 1;
	semctl($sem,0,SETALL,pack("s!*",@@data)) or print "not ";
	print "ok 14\n";
d157 10
a166 15
	$data = "";
	semctl($sem,0,GETALL,$data) or print "not ";
	print "ok 15\n";

	@@data = unpack("s!*",$data);

	my $bdata = "0" x $poke . "1" . "0" x ($nsem-$poke-1);

	print "not " unless join("",@@data) eq $bdata;
	print "ok 16\n";
    } else {
	for (7..16) {
	    print "ok $_ # skipped, no semctl possible\n";
	}
    }
@


1.1.1.3
log
@stock perl 5.6.1
@
text
@d6 1
a6 1
    @@INC = '../lib';
d12 1
a12 3
    if ($Config{'extensions'} !~ /\bIPC\/SysV\b/) {
      $reason = 'IPC::SysV was not built';
    } elsif ($Config{'d_sem'} ne 'define') {
@


