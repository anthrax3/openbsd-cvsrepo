head	1.2;
access;
symbols
	OPENBSD_3_2:1.1.1.2.0.6
	OPENBSD_3_2_BASE:1.1.1.2
	OPENBSD_3_1:1.1.1.2.0.4
	OPENBSD_3_1_BASE:1.1.1.2
	OPENBSD_3_0:1.1.1.2.0.2
	OPENBSD_3_0_BASE:1.1.1.2
	PERL_5_6_1:1.1.1.2
	OPENBSD_2_9:1.1.1.1.0.6
	OPENBSD_2_9_BASE:1.1.1.1
	OPENBSD_2_8:1.1.1.1.0.4
	OPENBSD_2_8_BASE:1.1.1.1
	OPENBSD_2_7:1.1.1.1.0.2
	OPENBSD_2_7_BASE:1.1.1.1
	PERL_5_6_0:1.1.1.1
	CPAN:1.1.1;
locks; strict;
comment	@# @;


1.2
date	2002.10.27.22.25.36;	author millert;	state dead;
branches;
next	1.1;

1.1
date	2000.04.06.16.10.41;	author millert;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	2000.04.06.16.10.41;	author millert;	state Exp;
branches;
next	1.1.1.2;

1.1.1.2
date	2001.05.24.18.25.13;	author millert;	state Exp;
branches;
next	;


desc
@@


1.2
log
@Resolve conflicts, remove old files, merge local changes
@
text
@#!./perl

$| = 1;

BEGIN {
    chdir 't' if -d 't';
    unshift @@INC, '../lib';
}

if ($^O eq 'VMS') {
    print "1..11\n";
    foreach (1..11) { print "ok $_ # skipped for VMS\n"; }
    exit 0;
}

use Env  qw(@@FOO);
use vars qw(@@BAR);

sub array_equal
{
    my ($a, $b) = @@_;
    return 0 unless scalar(@@$a) == scalar(@@$b);
    for my $i (0..scalar(@@$a) - 1) {
	return 0 unless $a->[$i] eq $b->[$i];
    }
    return 1;
}

sub test
{
    my ($desc, $code) = @@_;

    &$code;

    print "# $desc...\n";
    print "#    FOO = (", join(", ", @@FOO), ")\n";
    print "#    BAR = (", join(", ", @@BAR), ")\n";

    if (defined $check) { print "not " unless &$check; }
    else { print "not " unless array_equal(\@@FOO, \@@BAR); }

    print "ok ", ++$i, "\n";
}

print "1..11\n";

test "Assignment", sub {
    @@FOO = qw(a B c);
    @@BAR = qw(a B c);
};

test "Storing", sub {
    $FOO[1] = 'b';
    $BAR[1] = 'b';
};

test "Truncation", sub {
    $#FOO = 0;
    $#BAR = 0;
};

test "Push", sub {
    push @@FOO, 'b', 'c';
    push @@BAR, 'b', 'c';
};

test "Pop", sub {
    pop @@FOO;
    pop @@BAR;
};

test "Shift", sub {
    shift @@FOO;
    shift @@BAR;
};

test "Push", sub {
    push @@FOO, 'c';
    push @@BAR, 'c';
};

test "Unshift", sub {
    unshift @@FOO, 'a';
    unshift @@BAR, 'a';
};

test "Reverse", sub {
    @@FOO = reverse @@FOO;
    @@BAR = reverse @@BAR;
};

test "Sort", sub {
    @@FOO = sort @@FOO;
    @@BAR = sort @@BAR;
};

test "Splice", sub {
    splice @@FOO, 1, 1, 'B';
    splice @@BAR, 1, 1, 'B';
};
@


1.1
log
@Initial revision
@
text
@@


1.1.1.1
log
@virgin perl 5.6.0
@
text
@@


1.1.1.2
log
@stock perl 5.6.1
@
text
@d7 1
a7 1
    @@INC = '../lib';
@

