head	1.2;
access;
symbols
	OPENBSD_4_8:1.1.1.3.0.8
	OPENBSD_4_8_BASE:1.1.1.3
	OPENBSD_4_7:1.1.1.3.0.4
	OPENBSD_4_7_BASE:1.1.1.3
	PERL_5_10_1:1.1.1.3
	OPENBSD_4_6:1.1.1.3.0.6
	OPENBSD_4_6_BASE:1.1.1.3
	OPENBSD_4_5:1.1.1.3.0.2
	OPENBSD_4_5_BASE:1.1.1.3
	PERL_5_10_0:1.1.1.3
	OPENBSD_4_4:1.1.1.2.0.18
	OPENBSD_4_4_BASE:1.1.1.2
	OPENBSD_4_3:1.1.1.2.0.16
	OPENBSD_4_3_BASE:1.1.1.2
	OPENBSD_4_2:1.1.1.2.0.14
	OPENBSD_4_2_BASE:1.1.1.2
	OPENBSD_4_1:1.1.1.2.0.12
	OPENBSD_4_1_BASE:1.1.1.2
	OPENBSD_4_0:1.1.1.2.0.10
	OPENBSD_4_0_BASE:1.1.1.2
	PERL_5_8_8:1.1.1.2
	OPENBSD_3_9:1.1.1.2.0.8
	OPENBSD_3_9_BASE:1.1.1.2
	OPENBSD_3_8:1.1.1.2.0.6
	OPENBSD_3_8_BASE:1.1.1.2
	OPENBSD_3_7:1.1.1.2.0.4
	OPENBSD_3_7_BASE:1.1.1.2
	PERL_5_8_6:1.1.1.2
	OPENBSD_3_6:1.1.1.2.0.2
	OPENBSD_3_6_BASE:1.1.1.2
	PERL_5_8_5:1.1.1.2
	PERL_5_8_3:1.1.1.1
	CPAN:1.1.1;
locks; strict;
comment	@# @;


1.2
date	2010.09.24.14.59.59;	author millert;	state dead;
branches;
next	1.1;

1.1
date	2004.04.07.21.13.42;	author millert;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	2004.04.07.21.13.42;	author millert;	state Exp;
branches;
next	1.1.1.2;

1.1.1.2
date	2004.08.09.17.48.32;	author millert;	state Exp;
branches;
next	1.1.1.3;

1.1.1.3
date	2008.09.29.17.18.59;	author millert;	state Exp;
branches;
next	;


desc
@@


1.2
log
@remove files no longer in perl 5.12.2 (or that have moved)
@
text
@###############################################################################
# core math lib for BigInt, representing big numbers by normal int/float's
# for testing only, will fail any bignum test if range is exceeded

package Math::BigInt::Scalar;

use 5.005;
use strict;
# use warnings; # dont use warnings for older Perls

require Exporter;

use vars qw/@@ISA $VERSION/;
@@ISA = qw(Exporter);

$VERSION = '0.11';

##############################################################################
# global constants, flags and accessory
 
# constants for easier life
my $nan = 'NaN';

##############################################################################
# create objects from various representations

sub _new
  {
  # (string) return ref to num
  my $d = $_[1];
  my $x = $$d;	# make copy
  return \$x;
  }                                                                             

sub _zero
  {
  my $x = 0; return \$x;
  }

sub _one
  {
  my $x = 1; return \$x;
  }

sub _copy
  {
  my $x = $_[1];
  my $z = $$x;
  return \$z;
  }

# catch and throw away
sub import { }

##############################################################################
# convert back to string and number

sub _str
  {
  # make string
  return \"${$_[1]}";
  }                                                                             

sub _num
  {
  # make a number
  return ${$_[1]};
  }


##############################################################################
# actual math code

sub _add
  {
  my ($c,$x,$y) = @@_;
  $$x += $$y;
  return $x;
  }                                                                             

sub _sub
  {
  my ($c,$x,$y) = @@_;
  $$x -= $$y;
  return $x;
  }                                                                             

sub _mul
  {
  my ($c,$x,$y) = @@_;
  $$x *= $$y;
  return $x;
  }                                                                             

sub _div
  {
  my ($c,$x,$y) = @@_;

  my $u = int($$x / $$y); my $r = $$x % $$y; $$x = $u;
  return ($x,\$r) if wantarray;
  return $x;
  }                                                                             

sub _pow
  {
  my ($c,$x,$y) = @@_;
  my $u = $$x ** $$y; $$x = $u;
  return $x;
  }

sub _and
  {
  my ($c,$x,$y) = @@_;
  my $u = int($$x) & int($$y); $$x = $u;
  return $x;
  }

sub _xor
  {
  my ($c,$x,$y) = @@_;
  my $u = int($$x) ^ int($$y); $$x = $u;
  return $x;
  }

sub _or
  {
  my ($c,$x,$y) = @@_;
  my $u = int($$x) | int($$y); $$x = $u;
  return $x;
  }

sub _inc
  {
  my ($c,$x) = @@_;
  my $u = int($$x)+1; $$x = $u;
  return $x;
  }

sub _dec
  {
  my ($c,$x) = @@_;
  my $u = int($$x)-1; $$x = $u;
  return $x;
  }

##############################################################################
# testing

sub _acmp
  {
  my ($c,$x, $y) = @@_;
  return ($$x <=> $$y);
  }

sub _len
  {
  return length("${$_[1]}");
  }

sub _digit
  {
  # return the nth digit, negative values count backward
  # 0 is the rightmost digit
  my ($c,$x,$n) = @@_;
  
  $n ++;			# 0 => 1, 1 => 2
  return substr($$x,-$n,1);	# 1 => -1, -2 => 2 etc
  }

##############################################################################
# _is_* routines

sub _is_zero
  {
  # return true if arg is zero
  my ($c,$x) = @@_;
  return ($$x == 0) <=> 0;
  }

sub _is_even
  {
  # return true if arg is even
  my ($c,$x) = @@_;
  return (!($$x & 1)) <=> 0; 
  }

sub _is_odd
  {
  # return true if arg is odd
  my ($c,$x) = @@_;
  return ($$x & 1) <=> 0;
  }

sub _is_one
  {
  # return true if arg is one
  my ($c,$x) = @@_;
  return ($$x == 1) <=> 0;
  }

###############################################################################
# check routine to test internal state of corruptions

sub _check
  {
  # no checks yet, pull it out from the test suite
  my ($c,$x) = @@_;
  return "$x is not a reference" if !ref($x);
  return 0;
  }

1;
__END__

=head1 NAME

Math::BigInt::Scalar - Pure Perl module to test Math::BigInt with scalars

=head1 SYNOPSIS

Provides support for big integer calculations via means of 'small' int/floats.
Only for testing purposes, since it will fail at large values. But it is simple
enough not to introduce bugs on it's own and to serve as a testbed.

=head1 DESCRIPTION

Please see Math::BigInt::Calc.

=head1 LICENSE
 
This program is free software; you may redistribute it and/or modify it under
the same terms as Perl itself. 

=head1 AUTHOR

Tels http://bloodgate.com in 2001.

=head1 SEE ALSO

L<Math::BigInt>, L<Math::BigInt::Calc>.

=cut
@


1.1
log
@Initial revision
@
text
@@


1.1.1.1
log
@perl 5.8.3 from CPAN
@
text
@@


1.1.1.2
log
@Import of stock perl 5.8.5
@
text
@d16 1
a16 3
$VERSION = '0.12';

sub api_version() { 1; }
d29 1
a29 1
  # create scalar ref from string
d31 2
a32 2
  my $x = $d;	# make copy
  \$x;
a34 10
sub _from_hex
  {
  # not used
  }

sub _from_bin
  {
  # not used
  }

d37 1
a37 1
  my $x = 0; \$x;
d42 1
a42 11
  my $x = 1; \$x;
  }

sub _two
  {
  my $x = 2; \$x;
  } 

sub _ten
  {
  my $x = 10; \$x;
d49 1
a49 1
  \$z;
d61 1
a61 1
  "${$_[1]}";
d67 1
a67 54
  0+${$_[1]};
  }

sub _zeros
  {
  my $x = $_[1];

  $x =~ /\d(0*)$/;
  length($1 || '');  
  }

sub _rsft
  {
  # not used
  }

sub _lsft
  {
  # not used
  }

sub _mod
  {
  # not used
  }

sub _gcd
  {
  # not used
  }

sub _sqrt
  {
  # not used
  }

sub _root
  {
  # not used
  }

sub _fac
  {
  # not used
  }

sub _modinv
  {
  # not used
  }

sub _modpow
  {
  # not used
a69 14
sub _log_int
  {
  # not used
  }

sub _as_hex
  {
  sprintf("0x%x",${$_[1]});
  }

sub _as_bin
  {
  sprintf("0b%b",${$_[1]});
  }
d177 1
a177 1
  ($$x == 0) <=> 0;
d184 1
a184 1
  (!($$x & 1)) <=> 0; 
d191 1
a191 1
  ($$x & 1) <=> 0;
d198 1
a198 15
  ($$x == 1) <=> 0;
  }

sub _is_two
  {
  # return true if arg is one
  my ($c,$x) = @@_;
  ($$x == 2) <=> 0;
  }

sub _is_ten
  {
  # return true if arg is one
  my ($c,$x) = @@_;
  ($$x == 10) <=> 0;
@


1.1.1.3
log
@import perl 5.10.0 from CPAN
@
text
@d16 1
a16 1
$VERSION = '0.13';
a41 5
sub _from_oct
  {
  # not used
  }

a159 5
sub _as_oct
  {
  sprintf("0%o",${$_[1]});
  }

d339 1
a339 1
Tels http://bloodgate.com in 2001 - 2007.
@


