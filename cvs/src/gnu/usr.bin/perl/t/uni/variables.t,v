head	1.2;
access;
symbols
	PERL_5_24_2:1.1.1.3
	OPENBSD_6_1:1.2.0.4
	OPENBSD_6_1_BASE:1.2
	OPENBSD_6_0:1.1.1.2.0.10
	OPENBSD_6_0_BASE:1.1.1.2
	OPENBSD_5_9:1.1.1.2.0.4
	OPENBSD_5_9_BASE:1.1.1.2
	OPENBSD_5_8:1.1.1.2.0.6
	OPENBSD_5_8_BASE:1.1.1.2
	PERL_5_20_2:1.1.1.2
	OPENBSD_5_7:1.1.1.2.0.2
	OPENBSD_5_7_BASE:1.1.1.2
	PERL_5_20_1:1.1.1.2
	OPENBSD_5_6:1.1.1.1.0.4
	OPENBSD_5_6_BASE:1.1.1.1
	PERL_5_18_2:1.1.1.1
	PERL:1.1.1;
locks; strict;
comment	@# @;
expand	@b@;


1.2
date	2017.02.05.00.32.21;	author afresh1;	state Exp;
branches;
next	1.1;
commitid	cxJ08BvJA9Pt2PTM;

1.1
date	2014.03.24.14.59.11;	author afresh1;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	2014.03.24.14.59.11;	author afresh1;	state Exp;
branches;
next	1.1.1.2;

1.1.1.2
date	2014.11.17.20.53.19;	author afresh1;	state Exp;
branches;
next	1.1.1.3;
commitid	B31cAbBIXiCqnL97;

1.1.1.3
date	2017.08.14.13.46.25;	author afresh1;	state Exp;
branches;
next	;
commitid	fAzrs78vdW2Yfc6A;


desc
@@


1.2
log
@Fix merge issues, remove excess files - match perl-5.24.1 dist
@
text
@#!./perl

# Checks if the parser behaves correctly in edge case
# (including weird syntax errors)

BEGIN {
    chdir 't' if -d 't';
    require './test.pl';
    skip_all_if_miniperl("miniperl, no arybase");
    skip_all_without_unicode_tables();
}

use 5.016;
use utf8;
use open qw( :utf8 :std );
no warnings qw(misc reserved);

plan (tests => 66894);

# ${single:colon} should not be treated as a simple variable, but as a
# block with a label inside.
{
    no strict;

    local $@@;
    eval "\${\x{30cd}single:\x{30cd}colon} = 'label, not var'";
    is ${"\x{30cd}colon"}, 'label, not var',
         '${\x{30cd}single:\x{30cd}colon} should be block-label';

    local $@@;
    no utf8;
    evalbytes '${single:colon} = "block/label, not var"';
    is($::colon,
         'block/label, not var',
         '...same with ${single:colon}'
        );
}

# ${yadda'etc} and ${yadda::etc} should both work under strict
{
    local $@@;
    eval q<use strict; ${flark::fleem}>;
    is($@@, '', q<${package::var} works>);

    local $@@;
    eval q<use strict; ${fleem'flark}>;
    is($@@, '', q<...as does ${package'var}>);
}

# The first character in ${...} should respect the rules
{
   local $@@;
   use utf8;
   eval '${â˜­asd} = 1';
   like($@@, qr/\QUnrecognized character/, q(the first character in ${...} isn't special))
}

# Checking that at least some of the special variables work
for my $v (qw( ^V ; < > ( ) {^GLOBAL_PHASE} ^W _ 1 4 0 [ ] ! @@ / \ = )) {
  SKIP: {
    skip_if_miniperl('No $[ under miniperl', 2) if $v eq '[';
    local $@@;
    evalbytes "\$$v;";
    is $@@, '', "No syntax error for \$$v";

    local $@@;
    eval "use utf8; \$$v;";
    is $@@, '', "No syntax error for \$$v under 'use utf8'";
  }
}

# Checking if the Latin-1 range behaves as expected, and that the behavior is the
# same whenever under strict or not.
for ( 0x0 .. 0xff ) {
    my @@warnings;
    local $SIG {__WARN__} = sub {push @@warnings, @@_ };
    my $ord = utf8::unicode_to_native($_);
    my $chr = chr $ord;
    my $syntax_error = 0;   # Do we expect this code point to generate a
                            # syntax error?  Assume not, for now
    my $deprecated = 0;
    my $name;

    # A different number of tests are run depending on the branches in this
    # loop iteration.  This allows us to add skips to make the reported total
    # the same for each iteration.
    my $tests = 0;
    my $max_tests = 6;

    if ($chr =~ /[[:graph:]]/a) {
        $name = "'$chr'";
        $syntax_error = 1 if $chr eq '{';
    }
    elsif ($chr =~ /[[:space:]]/a) {
        $name = sprintf "\\x%02x, an ASCII space character", $ord;
        $syntax_error = 1;
    }
    elsif ($chr =~ /[[:cntrl:]]/a) {
        $name = sprintf "\\x%02x, an ASCII control", $ord;
        $syntax_error = 1;
    }
    elsif ($chr =~ /\pC/) {
        if ($chr eq "\N{SHY}") {
            $name = sprintf "\\x%02x, SHY", $ord;
        }
        else {
            $name = sprintf "\\x%02x, a C1 control", $ord;
        }
        $syntax_error = $::IS_EBCDIC;
        $deprecated = ! $syntax_error;
    }
    elsif ($chr =~ /\p{XIDStart}/) {
        $name = sprintf "\\x%02x, a non-ASCII XIDS character", $ord;
    }
    elsif ($chr =~ /\p{XPosixSpace}/) {
        $name = sprintf "\\x%02x, a non-ASCII space character", $ord;
        $syntax_error = $::IS_EBCDIC;
        $deprecated = ! $syntax_error;
    }
    else {
        $name = sprintf "\\x%02x, a non-ASCII, non-XIDS graphic character", $ord;
    }
    no warnings 'closure';
    my $esc = sprintf("%X", $ord);
    utf8::downgrade($chr);
    if ($chr !~ /\p{XIDS}/u) {
        if ($syntax_error) {
            evalbytes "\$$chr";
            like($@@, qr/ syntax\ error | Unrecognized\ character /x,
                     "$name as a length-1 variable generates a syntax error");
            $tests++;
            utf8::upgrade($chr);
            evalbytes "no strict; use utf8; \$$chr = 4;",
            like($@@, qr/ syntax\ error | Unrecognized\ character /x,
                     "  ... and the same under 'use utf8'");
            $tests++;
        }
        elsif ($chr =~ /[[:punct:][:digit:]]/a) {

            # Unlike other variables, we dare not try setting the length-1
            # variables that are ASCII punctuation and digits.  This is
            # because many of these variables have meaning to the system, and
            # setting them could have side effects or not work as expected
            # (And using fresh_perl() doesn't always help.) For all these we
            # just verify that they don't generate a syntax error.
            local $@@;
            evalbytes "\$$chr;";
            is $@@, '', "$name as a length-1 variable doesn't generate a syntax error";
            $tests++;
            utf8::upgrade($chr);
            evalbytes "no strict; use utf8; \$$chr;",
            is $@@, '', "  ... and the same under 'use utf8'";
            $tests++;
        }
        else {
            is evalbytes "no strict; \$$chr = 10",
                10,
                "$name is legal as a length-1 variable";
            $tests++;
            if ($chr =~ /[[:ascii:]]/) {
                utf8::upgrade($chr);
                is evalbytes "no strict; use utf8; \$$chr = 1",
                    1,
                    "  ... and is legal under 'use utf8'";
                $tests++;
            }
            else {
                utf8::upgrade($chr);
                local $@@;
                eval "no strict; use utf8; \$$chr = 1";
                like $@@,
                    qr/\QUnrecognized character \x{\E\L$esc/,
                    "  ... but is illegal as a length-1 variable under 'use utf8'";
                $tests++;
            }
        }
    }
    else {
        {
            no utf8;
            local $@@;
            evalbytes "no strict; \$$chr = 1";
            is($@@, '', "$name under 'no utf8', 'no strict', is a valid length-1 variable");
            $tests++;

            if ($chr !~ /[[:ascii:]]/) {
                local $@@;
                evalbytes "use strict; \$$chr = 1";
                is($@@,
                    '',
                    "  ... and under 'no utf8' does not have to be required under strict, even though it matches XIDS"
                );
                $tests++;

                local $@@;
                evalbytes "\$a$chr = 1";
                like($@@,
                    qr/Unrecognized character /,
                    "  ... but under 'no utf8', it's not allowed in length-2+ variables"
                );
                $tests++;
            }
        }
        {
            use utf8;
            my $utf8 = $chr;
            utf8::upgrade($utf8);
            local $@@;
            eval "no strict; \$$utf8 = 1";
            is($@@, '', "  ... and under 'use utf8', 'no strict', is a valid length-1 variable");
            $tests++;

            local $@@;
            eval "use strict; \$$utf8 = 1";
            if ($chr =~ /[ab]/) {   # These are special, for sort()
                is($@@, '', "  ... and under 'use utf8', 'use strict',"
                    . " is a valid length-1 variable (\$a and \$b are special)");
                $tests++;
            }
            else {
                like($@@,
                    qr/Global symbol "\$$utf8" requires explicit package name/,
                    "  ... and under utf8 has to be required under strict"
                );
                $tests++;
            }
        }
    }

    if (! $deprecated) {
        if ($chr =~ /[#*]/) {

            # Length-1 variables with these two characters used to be used by
            # Perl, but now a warning is generated that they're gone.
            # Ignore such warnings.
            for (my $i = @@warnings - 1; $i >= 0; $i--) {
                splice @@warnings, $i, 1 if $warnings[$i] =~ /is no longer supported/;
            }
        }
        my $message = "  ... and doesn't generate any warnings";
        $message = "  TODO $message" if    $ord == 0
                                        || $chr =~ /\s/a;

        if (! ok(@@warnings == 0, $message)) {
            note join "\n", @@warnings;
        }
        $tests++;
    }
    elsif (! @@warnings) {
        fail("  ... and generates deprecation warnings (since is deprecated)");
        $tests++;
    }
    else {
        ok((scalar @@warnings == grep { $_ =~ /deprecated/ } @@warnings),
           "  ... and generates deprecation warnings (only)");
        $tests++;
    }

    SKIP: {
        die "Wrong max count for tests" if $tests > $max_tests;
        skip("untaken tests", $max_tests - $tests) if $max_tests > $tests;
    }
}

{
    use utf8;
    my $ret = eval "my \$c\x{327} = 100; \$c\x{327}"; # c + cedilla
    is($@@, '', "ASCII character + combining character works as a variable name");
    is($ret, 100, "  ... and returns the correct value");
}

# From Tom Christiansen's 'highly illegal variable names are now accidentally legal' mail
for my $chr (
      "\N{EM DASH}", "\x{F8FF}", "\N{POUND SIGN}", "\N{SOFT HYPHEN}",
      "\N{THIN SPACE}", "\x{11_1111}", "\x{DC00}", "\N{COMBINING DIAERESIS}",
      "\N{COMBINING ENCLOSING CIRCLE BACKSLASH}",
   )
{
   no warnings 'non_unicode';
   my $esc = sprintf("%x", ord $chr);
   local $@@;
   eval "\$$chr = 1; \$$chr";
   like($@@,
        qr/\QUnrecognized character \x{$esc};/,
        "\\x{$esc} is illegal for a length-one identifier"
       );
}

for my $i (0x100..0xffff) {
   my $chr = chr($i);
   my $esc = sprintf("%x", $i);
   local $@@;
   eval "my \$$chr = q<test>; \$$chr;";
   if ( $chr =~ /^\p{_Perl_IDStart}$/ ) {
      is($@@, '', sprintf("\\x{%04x} is XIDS, works as a length-1 variable", $i));
   }
   else {
      like($@@,
           qr/\QUnrecognized character \x{$esc};/,
           "\\x{$esc} isn't XIDS, illegal as a length-1 variable",
          )
   }
}

{
    # Bleadperl v5.17.9-109-g3283393 breaks ZEFRAM/Module-Runtime-0.013.tar.gz
    # https://rt.perl.org/rt3/Public/Bug/Display.html?id=117101
    no strict;

    local $@@;
    eval <<'EOP';
    q{$} =~ /(.)/;
    is($$1, $$, q{$$1 parses as ${$1}});

    $doof = "test";
    $test = "Got here";
    $::{+$$} = *doof;

    is( $$$$1, $test, q{$$$$1 parses as ${${${$1}}}} );
EOP
    is($@@, '', q{$$1 parses correctly});

    for my $chr ( q{@@}, "\N{U+FF10}", "\N{U+0300}" ) {
        my $esc = sprintf("\\x{%x}", ord $chr);
        local $@@;
        eval <<"    EOP";
            \$$chr = q{\$};
            \$\$$chr;
    EOP

        like($@@,
             qr/syntax error|Unrecognized character/,
             qq{\$\$$esc is a syntax error}
        );
    }
}

{    
    # bleadperl v5.17.9-109-g3283393 breaks JEREMY/File-Signature-1.009.tar.gz
    # https://rt.perl.org/rt3/Ticket/Display.html?id=117145
    local $@@;
    my $var = 10;
    eval ' ${  var  }';

    is(
        $@@,
        '',
        '${  var  } works under strict'
    );

    {
        no strict;

        for my $var ( '$', "^GLOBAL_PHASE", "^V" ) {
            eval "\${ $var}";
            is($@@, '', "\${ $var} works" );
            eval "\${$var }";
            is($@@, '', "\${$var } works" );
            eval "\${ $var }";
            is($@@, '', "\${ $var } works" );
        }
        my $var = "\7LOBAL_PHASE";
        eval "\${ $var}";
        like($@@, qr/Unrecognized character \\x07/,
             "\${ $var} generates 'Unrecognized character' error" );
        eval "\${$var }";
        like($@@, qr/Unrecognized character \\x07/,
             "\${$var } generates 'Unrecognized character' error" );
        eval "\${ $var }";
        like($@@, qr/Unrecognized character \\x07/,
             "\${ $var } generates 'Unrecognized character' error" );
    }
}

{
    is(
        "".eval "*{\nOIN}",
        "*main::OIN",
        "Newlines at the start of an identifier should be skipped over"
    );
    
    
    SKIP: {
        skip('Is $^U on EBCDIC 1047, BC; nothing works on 0037', 1)
                                                                if $::IS_EBCDIC;
        is(
            "".eval "*{^JOIN}",
            "*main::\nOIN",
            "  ... but \$^J is still legal"
        );
    }
    
    my $ret = eval "\${\cT\n}";
    like($@@, qr/\QUnrecognized character/, '${\n\cT\n} gives an error message');
}

{
    # Prior to 5.19.4, the following changed behavior depending
    # on the presence of the newline after '@@{'.
    sub foo (&) { [1] }
    my %foo = (a=>2);
    my $ret = @@{ foo { "a" } };
    is($ret, $foo{a}, '@@{ foo { "a" } } is parsed as @@foo{a}');
    
    $ret = @@{
            foo { "a" }
        };
    is($ret, $foo{a}, '@@{\nfoo { "a" } } is still parsed as @@foo{a}');

}
@


1.1
log
@Initial revision
@
text
@d7 1
d9 2
d18 1
a18 1
plan (tests => 65869);
d20 2
a21 1
# ${single:colon} should not be valid syntax
d26 3
a28 5
    eval "\${\x{30cd}single:\x{30cd}colon} = 1";
    like($@@,
         qr/syntax error .* near "\x{30cd}single:/,
         '${\x{30cd}single:\x{30cd}colon} should not be valid syntax'
        );
d32 3
a34 3
    evalbytes '${single:colon} = 1';
    like($@@,
         qr/syntax error .* near "single:/,
d60 2
d68 2
a69 1
    is $@@, '', "No syntax error for \$$v under use utf8";
d74 49
a122 1
for ( 0x80..0xff ) {
d124 1
a124 2
    my $chr = chr;
    my $esc = sprintf("%X", ord $chr);
d127 12
a138 3
        is evalbytes "no strict; \$$chr = 10",
            10,
            sprintf("\\x%02x, part of the latin-1 range, is legal as a length-1 variable", $_);
d140 37
a176 6
        utf8::upgrade($chr);
        local $@@;
        eval "no strict; use utf8; \$$chr = 1";
        like $@@,
            qr/\QUnrecognized character \x{\E\L$esc/,
            sprintf("..but is illegal as a length-1 variable under use utf8", $_);
d183 2
a184 1
            is($@@, '', sprintf("\\x%02x, =~ \\p{XIDS}, latin-1, no utf8, no strict, is a valid length-1 variable", $_));
d186 22
d209 3
a211 5
            evalbytes "use strict; \$$chr = 1";
            is($@@,
                '',
                sprintf("\\x%02x under no utf8 does not have to be required under strict, even though it matches XIDS", $_)
            );
d214 15
a228 5
            evalbytes "\$a$chr = 1";
            like($@@,
                qr/Unrecognized character /,
                sprintf("...but under no utf8, it's not allowed in two-or-more character variables")
            );
d230 9
a238 6
            local $@@;
            evalbytes "\$a$chr = 1";
            like($@@,
                qr/Unrecognized character /,
                sprintf("...but under no utf8, it's not allowed in two-or-more character variables")
            );
d240 3
a242 7
        {
            use utf8;
            my $u = $chr;
            utf8::upgrade($u);
            local $@@;
            eval "no strict; \$$u = 1";
            is($@@, '', sprintf("\\x%02x, =~ \\p{XIDS}, UTF-8, use utf8, no strict, is a valid length-1 variable", $_));
d244 2
a245 6
            local $@@;
            eval "use strict; \$$u = 1";
            like($@@,
                qr/Global symbol "\$$u" requires explicit package name/,
                sprintf("\\x%02x under utf8 has to be required under strict", $_)
            );
d247 15
d269 1
a269 1
    is($ret, 100, "...and returns the correct value");
d338 1
a338 1
{
d353 2
a354 1
        for my $var ( '$', "\7LOBAL_PHASE", "^GLOBAL_PHASE", "^V" ) {
d362 10
d373 37
@


1.1.1.1
log
@Import perl-5.18.2

OK espie@@ sthen@@ deraadt@@
@
text
@@


1.1.1.2
log
@Import perl-5.20.1
@
text
@d15 1
a15 1
plan (tests => 65880);
a57 2
  SKIP: {
    skip_if_miniperl('No $[ under miniperl', 2) if $v eq '[';
a64 1
  }
d205 1
a205 1
{    
a219 3
        # Silence the deprecation warning for literal controls
        no warnings 'deprecated';

a228 58
}

{
    is(
        "".eval "*{\nOIN}",
        "*main::OIN",
        "Newlines at the start of an identifier should be skipped over"
    );
    
    
    is(
        "".eval "*{^JOIN}",
        "*main::\nOIN",
        "...but \$^J is still legal"
    );
    
    no warnings 'deprecated';
    my $ret = eval "\${\cT\n}";
    is($@@, "", 'No errors from using ${\n\cT\n}');
    is($ret, $^T, "...and we got the right value");
}

{
    # Originally from t/base/lex.t, moved here since we can't
    # turn deprecation warnings off in that file.
    no strict;
    no warnings 'deprecated';
    
    my $CX  = "\cX";
    $ {$CX} = 17;
    
    # Does the syntax where we use the literal control character still work?
    is(
       eval "\$ {\cX}",
       17,
       "Literal control character variables work"
    );

    eval "\$\cQ = 24";                 # Literal control character
    is($@@, "", "...and they can be assigned to without error");
    is(${"\cQ"}, 24, "...and the assignment works");
    is($^Q, 24, "...even if we access the variable through the caret name");
    is(\${"\cQ"}, \$^Q, '\${\cQ} == \$^Q');
}

{
    # Prior to 5.19.4, the following changed behavior depending
    # on the presence of the newline after '@@{'.
    sub foo (&) { [1] }
    my %foo = (a=>2);
    my $ret = @@{ foo { "a" } };
    is($ret, $foo{a}, '@@{ foo { "a" } } is parsed as @@foo{a}');
    
    $ret = @@{
            foo { "a" }
        };
    is($ret, $foo{a}, '@@{\nfoo { "a" } } is still parsed as @@foo{a}');

@


1.1.1.3
log
@Import perl-5.24.2
@
text
@a6 1
    chdir 't' if -d 't';
a7 2
    skip_all_if_miniperl("miniperl, no arybase");
    skip_all_without_unicode_tables();
d15 1
a15 1
plan (tests => 66894);
d17 1
a17 2
# ${single:colon} should not be treated as a simple variable, but as a
# block with a label inside.
d22 5
a26 3
    eval "\${\x{30cd}single:\x{30cd}colon} = 'label, not var'";
    is ${"\x{30cd}colon"}, 'label, not var',
         '${\x{30cd}single:\x{30cd}colon} should be block-label';
d30 3
a32 3
    evalbytes '${single:colon} = "block/label, not var"';
    is($::colon,
         'block/label, not var',
d66 1
a66 1
    is $@@, '', "No syntax error for \$$v under 'use utf8'";
d72 1
a72 49
for ( 0x0 .. 0xff ) {
    my @@warnings;
    local $SIG {__WARN__} = sub {push @@warnings, @@_ };
    my $ord = utf8::unicode_to_native($_);
    my $chr = chr $ord;
    my $syntax_error = 0;   # Do we expect this code point to generate a
                            # syntax error?  Assume not, for now
    my $deprecated = 0;
    my $name;

    # A different number of tests are run depending on the branches in this
    # loop iteration.  This allows us to add skips to make the reported total
    # the same for each iteration.
    my $tests = 0;
    my $max_tests = 6;

    if ($chr =~ /[[:graph:]]/a) {
        $name = "'$chr'";
        $syntax_error = 1 if $chr eq '{';
    }
    elsif ($chr =~ /[[:space:]]/a) {
        $name = sprintf "\\x%02x, an ASCII space character", $ord;
        $syntax_error = 1;
    }
    elsif ($chr =~ /[[:cntrl:]]/a) {
        $name = sprintf "\\x%02x, an ASCII control", $ord;
        $syntax_error = 1;
    }
    elsif ($chr =~ /\pC/) {
        if ($chr eq "\N{SHY}") {
            $name = sprintf "\\x%02x, SHY", $ord;
        }
        else {
            $name = sprintf "\\x%02x, a C1 control", $ord;
        }
        $syntax_error = $::IS_EBCDIC;
        $deprecated = ! $syntax_error;
    }
    elsif ($chr =~ /\p{XIDStart}/) {
        $name = sprintf "\\x%02x, a non-ASCII XIDS character", $ord;
    }
    elsif ($chr =~ /\p{XPosixSpace}/) {
        $name = sprintf "\\x%02x, a non-ASCII space character", $ord;
        $syntax_error = $::IS_EBCDIC;
        $deprecated = ! $syntax_error;
    }
    else {
        $name = sprintf "\\x%02x, a non-ASCII, non-XIDS graphic character", $ord;
    }
d74 2
a75 1
    my $esc = sprintf("%X", $ord);
d78 3
a80 12
        if ($syntax_error) {
            evalbytes "\$$chr";
            like($@@, qr/ syntax\ error | Unrecognized\ character /x,
                     "$name as a length-1 variable generates a syntax error");
            $tests++;
            utf8::upgrade($chr);
            evalbytes "no strict; use utf8; \$$chr = 4;",
            like($@@, qr/ syntax\ error | Unrecognized\ character /x,
                     "  ... and the same under 'use utf8'");
            $tests++;
        }
        elsif ($chr =~ /[[:punct:][:digit:]]/a) {
d82 6
a87 37
            # Unlike other variables, we dare not try setting the length-1
            # variables that are ASCII punctuation and digits.  This is
            # because many of these variables have meaning to the system, and
            # setting them could have side effects or not work as expected
            # (And using fresh_perl() doesn't always help.) For all these we
            # just verify that they don't generate a syntax error.
            local $@@;
            evalbytes "\$$chr;";
            is $@@, '', "$name as a length-1 variable doesn't generate a syntax error";
            $tests++;
            utf8::upgrade($chr);
            evalbytes "no strict; use utf8; \$$chr;",
            is $@@, '', "  ... and the same under 'use utf8'";
            $tests++;
        }
        else {
            is evalbytes "no strict; \$$chr = 10",
                10,
                "$name is legal as a length-1 variable";
            $tests++;
            if ($chr =~ /[[:ascii:]]/) {
                utf8::upgrade($chr);
                is evalbytes "no strict; use utf8; \$$chr = 1",
                    1,
                    "  ... and is legal under 'use utf8'";
                $tests++;
            }
            else {
                utf8::upgrade($chr);
                local $@@;
                eval "no strict; use utf8; \$$chr = 1";
                like $@@,
                    qr/\QUnrecognized character \x{\E\L$esc/,
                    "  ... but is illegal as a length-1 variable under 'use utf8'";
                $tests++;
            }
        }
d94 8
a101 2
            is($@@, '', "$name under 'no utf8', 'no strict', is a valid length-1 variable");
            $tests++;
d103 13
a115 17
            if ($chr !~ /[[:ascii:]]/) {
                local $@@;
                evalbytes "use strict; \$$chr = 1";
                is($@@,
                    '',
                    "  ... and under 'no utf8' does not have to be required under strict, even though it matches XIDS"
                );
                $tests++;

                local $@@;
                evalbytes "\$a$chr = 1";
                like($@@,
                    qr/Unrecognized character /,
                    "  ... but under 'no utf8', it's not allowed in length-2+ variables"
                );
                $tests++;
            }
d119 2
a120 2
            my $utf8 = $chr;
            utf8::upgrade($utf8);
d122 2
a123 3
            eval "no strict; \$$utf8 = 1";
            is($@@, '', "  ... and under 'use utf8', 'no strict', is a valid length-1 variable");
            $tests++;
d126 5
a130 13
            eval "use strict; \$$utf8 = 1";
            if ($chr =~ /[ab]/) {   # These are special, for sort()
                is($@@, '', "  ... and under 'use utf8', 'use strict',"
                    . " is a valid length-1 variable (\$a and \$b are special)");
                $tests++;
            }
            else {
                like($@@,
                    qr/Global symbol "\$$utf8" requires explicit package name/,
                    "  ... and under utf8 has to be required under strict"
                );
                $tests++;
            }
a132 34

    if (! $deprecated) {
        if ($chr =~ /[#*]/) {

            # Length-1 variables with these two characters used to be used by
            # Perl, but now a warning is generated that they're gone.
            # Ignore such warnings.
            for (my $i = @@warnings - 1; $i >= 0; $i--) {
                splice @@warnings, $i, 1 if $warnings[$i] =~ /is no longer supported/;
            }
        }
        my $message = "  ... and doesn't generate any warnings";
        $message = "  TODO $message" if    $ord == 0
                                        || $chr =~ /\s/a;

        if (! ok(@@warnings == 0, $message)) {
            note join "\n", @@warnings;
        }
        $tests++;
    }
    elsif (! @@warnings) {
        fail("  ... and generates deprecation warnings (since is deprecated)");
        $tests++;
    }
    else {
        ok((scalar @@warnings == grep { $_ =~ /deprecated/ } @@warnings),
           "  ... and generates deprecation warnings (only)");
        $tests++;
    }

    SKIP: {
        die "Wrong max count for tests" if $tests > $max_tests;
        skip("untaken tests", $max_tests - $tests) if $max_tests > $tests;
    }
d139 1
a139 1
    is($ret, 100, "  ... and returns the correct value");
d223 2
d226 1
a226 1
        for my $var ( '$', "^GLOBAL_PHASE", "^V" ) {
a233 10
        my $var = "\7LOBAL_PHASE";
        eval "\${ $var}";
        like($@@, qr/Unrecognized character \\x07/,
             "\${ $var} generates 'Unrecognized character' error" );
        eval "\${$var }";
        like($@@, qr/Unrecognized character \\x07/,
             "\${$var } generates 'Unrecognized character' error" );
        eval "\${ $var }";
        like($@@, qr/Unrecognized character \\x07/,
             "\${ $var } generates 'Unrecognized character' error" );
d245 5
a249 9
    SKIP: {
        skip('Is $^U on EBCDIC 1047, BC; nothing works on 0037', 1)
                                                                if $::IS_EBCDIC;
        is(
            "".eval "*{^JOIN}",
            "*main::\nOIN",
            "  ... but \$^J is still legal"
        );
    }
d251 1
d253 25
a277 1
    like($@@, qr/\QUnrecognized character/, '${\n\cT\n} gives an error message');
@


