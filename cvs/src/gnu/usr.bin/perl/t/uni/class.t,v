head	1.2;
access;
symbols
	OPENBSD_6_1:1.2.0.4
	OPENBSD_6_1_BASE:1.2
	OPENBSD_6_0:1.1.1.7.0.16
	OPENBSD_6_0_BASE:1.1.1.7
	OPENBSD_5_9:1.1.1.7.0.10
	OPENBSD_5_9_BASE:1.1.1.7
	OPENBSD_5_8:1.1.1.7.0.12
	OPENBSD_5_8_BASE:1.1.1.7
	PERL_5_20_2:1.1.1.7
	OPENBSD_5_7:1.1.1.7.0.4
	OPENBSD_5_7_BASE:1.1.1.7
	PERL_5_20_1:1.1.1.7
	OPENBSD_5_6:1.1.1.7.0.8
	OPENBSD_5_6_BASE:1.1.1.7
	PERL_5_18_2:1.1.1.7
	PERL:1.1.1
	OPENBSD_5_5:1.1.1.7.0.6
	OPENBSD_5_5_BASE:1.1.1.7
	OPENBSD_5_4:1.1.1.7.0.2
	OPENBSD_5_4_BASE:1.1.1.7
	PERL_5_16_3:1.1.1.7
	OPENBSD_5_3:1.1.1.6.0.10
	OPENBSD_5_3_BASE:1.1.1.6
	OPENBSD_5_2:1.1.1.6.0.8
	OPENBSD_5_2_BASE:1.1.1.6
	OPENBSD_5_1_BASE:1.1.1.6
	OPENBSD_5_1:1.1.1.6.0.6
	OPENBSD_5_0:1.1.1.6.0.4
	OPENBSD_5_0_BASE:1.1.1.6
	OPENBSD_4_9:1.1.1.6.0.2
	OPENBSD_4_9_BASE:1.1.1.6
	PERL_5_12_2:1.1.1.6
	OPENBSD_4_8:1.1.1.5.0.4
	OPENBSD_4_8_BASE:1.1.1.5
	OPENBSD_4_7:1.1.1.5.0.2
	OPENBSD_4_7_BASE:1.1.1.5
	PERL_5_10_1:1.1.1.5
	OPENBSD_4_6:1.1.1.4.0.6
	OPENBSD_4_6_BASE:1.1.1.4
	OPENBSD_4_5:1.1.1.4.0.2
	OPENBSD_4_5_BASE:1.1.1.4
	PERL_5_10_0:1.1.1.4
	OPENBSD_4_4:1.1.1.3.0.10
	OPENBSD_4_4_BASE:1.1.1.3
	OPENBSD_4_3:1.1.1.3.0.8
	OPENBSD_4_3_BASE:1.1.1.3
	OPENBSD_4_2:1.1.1.3.0.6
	OPENBSD_4_2_BASE:1.1.1.3
	OPENBSD_4_1:1.1.1.3.0.4
	OPENBSD_4_1_BASE:1.1.1.3
	OPENBSD_4_0:1.1.1.3.0.2
	OPENBSD_4_0_BASE:1.1.1.3
	PERL_5_8_8:1.1.1.3
	OPENBSD_3_9:1.1.1.2.0.6
	OPENBSD_3_9_BASE:1.1.1.2
	OPENBSD_3_8:1.1.1.2.0.4
	OPENBSD_3_8_BASE:1.1.1.2
	OPENBSD_3_7:1.1.1.2.0.2
	OPENBSD_3_7_BASE:1.1.1.2
	PERL_5_8_6:1.1.1.2
	OPENBSD_3_6:1.1.1.1.0.2
	OPENBSD_3_6_BASE:1.1.1.1
	PERL_5_8_5:1.1.1.1
	CPAN:1.1.1;
locks; strict;
comment	@# @;
expand	@o@;


1.2
date	2017.02.05.00.32.21;	author afresh1;	state Exp;
branches;
next	1.1;
commitid	cxJ08BvJA9Pt2PTM;

1.1
date	2004.08.09.17.48.37;	author millert;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	2004.08.09.17.48.37;	author millert;	state Exp;
branches;
next	1.1.1.2;

1.1.1.2
date	2005.01.15.21.18.21;	author millert;	state Exp;
branches;
next	1.1.1.3;

1.1.1.3
date	2006.03.28.18.49.48;	author millert;	state Exp;
branches;
next	1.1.1.4;

1.1.1.4
date	2008.09.29.17.19.03;	author millert;	state Exp;
branches;
next	1.1.1.5;

1.1.1.5
date	2009.10.12.18.10.42;	author millert;	state Exp;
branches;
next	1.1.1.6;

1.1.1.6
date	2010.09.24.14.49.16;	author millert;	state Exp;
branches;
next	1.1.1.7;

1.1.1.7
date	2013.03.25.20.09.38;	author sthen;	state Exp;
branches;
next	;


desc
@@


1.2
log
@Fix merge issues, remove excess files - match perl-5.24.1 dist
@
text
@BEGIN {
    chdir 't' if -d 't';
    require './test.pl';
    set_up_inc(qw(../lib .));
    skip_all_without_unicode_tables();
}

plan tests => 11;

my $str = join "", map { chr utf8::unicode_to_native($_) } 0x20 .. 0x6F;

is(($str =~ /(\p{IsMyUniClass}+)/)[0], '0123456789:;<=>?@@ABCDEFGHIJKLMNO',
                                'user-defined class compiled before defined');

sub IsMyUniClass {
  my $return = "";
  for my $i (0x30 .. 0x4F) {
    $return .= sprintf("%04X\n", utf8::unicode_to_native($i));
  }
  return $return;
END
}

sub Other::IsClass {
  my $return = "";
  for my $i (0x40 .. 0x5F) {
    $return .= sprintf("%04X\n", utf8::unicode_to_native($i));
  }
  return $return;
}

sub A::B::Intersection {
  <<END;
+main::IsMyUniClass
&Other::IsClass
END
}

sub test_regexp ($$) {
  # test that given string consists of N-1 chars matching $qr1, and 1
  # char matching $qr2
  my ($str, $blk) = @@_;

  # constructing these objects here makes the last test loop go much faster
  my $qr1 = qr/(\p{$blk}+)/;
  if ($str =~ $qr1) {
    is($1, substr($str, 0, -1));		# all except last char
  }
  else {
    fail('first N-1 chars did not match');
  }

  my $qr2 = qr/(\P{$blk}+)/;
  if ($str =~ $qr2) {
    is($1, substr($str, -1));			# only last char
  }
  else {
    fail('last char did not match');
  }
}

use strict;

# make sure it finds built-in class
is(($str =~ /(\p{Letter}+)/)[0], 'ABCDEFGHIJKLMNOPQRSTUVWXYZ');
is(($str =~ /(\p{l}+)/)[0], 'ABCDEFGHIJKLMNOPQRSTUVWXYZ');

# make sure it finds user-defined class
is(($str =~ /(\p{IsMyUniClass}+)/)[0], '0123456789:;<=>?@@ABCDEFGHIJKLMNO');

# make sure it finds class in other package
is(($str =~ /(\p{Other::IsClass}+)/)[0], '@@ABCDEFGHIJKLMNOPQRSTUVWXYZ[\]^_');

# make sure it finds class in other OTHER package
is(($str =~ /(\p{A::B::Intersection}+)/)[0], '@@ABCDEFGHIJKLMNO');

# lib/unicore/lib/Bc/AL.pl.  U+070E is unassigned, currently, but still has
# bidi class AL.  The first one in the sequence that doesn't is 0711, which is
# BC=NSM.
$str = "\x{070D}\x{070E}\x{070F}\x{0710}\x{0711}\x{0712}";
is(($str =~ /(\P{BidiClass: ArabicLetter}+)/)[0], "\x{0711}");
is(($str =~ /(\P{BidiClass: AL}+)/)[0], "\x{0711}");
is(($str =~ /(\P{BC :ArabicLetter}+)/)[0], "\x{0711}");
is(($str =~ /(\P{bc=AL}+)/)[0], "\x{0711}");

# make sure InGreek works
$str = "[\x{038B}\x{038C}\x{038D}]";

is(($str =~ /(\p{InGreek}+)/)[0], "\x{038B}\x{038C}\x{038D}");

# The other tests that are based on looking at the generated files are now
# in t/re/uniprops.t
@


1.1
log
@Initial revision
@
text
@d3 3
a5 2
    @@INC = qw(../lib .);
    require "test.pl";
d8 1
a8 1
plan tests => 4334;
d10 11
a20 3
sub MyUniClass {
  <<END;
0030	004F
d24 6
a29 4
sub Other::Class {
  <<END;
0040	005F
END
d34 2
a35 2
+main::MyUniClass
&Other::Class
d39 13
d53 10
a62 1
my $str = join "", map chr($_), 0x20 .. 0x6F;
d69 1
a69 1
is(($str =~ /(\p{MyUniClass}+)/)[0], '0123456789:;<=>?@@ABCDEFGHIJKLMNO');
d72 1
a72 1
is(($str =~ /(\p{Other::Class}+)/)[0], '@@ABCDEFGHIJKLMNOPQRSTUVWXYZ[\]^_');
d77 8
a84 6
# all of these should look in lib/unicore/bc/AL.pl
$str = "\x{070D}\x{070E}\x{070F}\x{0710}\x{0711}";
is(($str =~ /(\P{BidiClass: ArabicLetter}+)/)[0], "\x{070E}\x{070F}");
is(($str =~ /(\P{BidiClass: AL}+)/)[0], "\x{070E}\x{070F}");
is(($str =~ /(\P{BC :ArabicLetter}+)/)[0], "\x{070E}\x{070F}");
is(($str =~ /(\P{bc=AL}+)/)[0], "\x{070E}\x{070F}");
a89 91
is(($str =~ /(\p{Script:InGreek}+)/)[0], "\x{038B}\x{038C}\x{038D}");
is(($str =~ /(\p{Script=InGreek}+)/)[0], "\x{038B}\x{038C}\x{038D}");
is(($str =~ /(\p{sc:InGreek}+)/)[0], "\x{038B}\x{038C}\x{038D}");
is(($str =~ /(\p{sc=InGreek}+)/)[0], "\x{038B}\x{038C}\x{038D}");


use File::Spec;
my $updir = File::Spec->updir;


# the %utf8::... hashes are already in existence
# because utf8_pva.pl was run by utf8_heavy.pl

# non-General Category and non-Script
while (my ($abbrev, $files) = each %utf8::PVA_abbr_map) {
  my $prop_name = $utf8::PropertyAlias{$abbrev};
  next unless $prop_name;
  next if $abbrev eq "gc_sc";

  for (sort keys %$files) {
    my $filename = File::Spec->catfile(
      $updir => lib => unicore => lib => $abbrev => "$files->{$_}.pl"
    );

    next unless -e $filename;
    my ($h1, $h2) = map hex, split /\t/, (do $filename);
    my $str = join "", map chr, $h1 .. (($h2 || $h1) + 1);

    for my $p ($prop_name, $abbrev) {
      for my $c ($files->{$_}, $_) {
        is($str =~ /(\p{$p: $c}+)/ && $1, substr($str, 0, -1));
        is($str =~ /(\P{$p= $c}+)/ && $1, substr($str, -1));
      }
    }
  }
}

# General Category and Script
for my $p ('gc', 'sc') {
  while (my ($abbr) = each %{ $utf8::PropValueAlias{$p} }) {
    my $filename = File::Spec->catfile(
      $updir => lib => unicore => lib => gc_sc => "$utf8::PVA_abbr_map{gc_sc}{$abbr}.pl"
    );

    next unless -e $filename;
    my ($h1, $h2) = map hex, split /\t/, (do $filename);
    my $str = join "", map chr, $h1 .. (($h2 || $h1) + 1);

    for my $x ($p, { gc => 'General Category', sc => 'Script' }->{$p}) {
      for my $y ($abbr, $utf8::PropValueAlias{$p}{$abbr}, $utf8::PVA_abbr_map{gc_sc}{$abbr}) {
        is($str =~ /(\p{$x: $y}+)/ && $1, substr($str, 0, -1));
        is($str =~ /(\P{$x= $y}+)/ && $1, substr($str, -1));
        is($str =~ /(\p{$y}+)/ && $1, substr($str, 0, -1));
        is($str =~ /(\P{$y}+)/ && $1, substr($str, -1));
      }
    }
  }
}

# test extra properties (ASCII_Hex_Digit, Bidi_Control, etc.)
{
  # Aargh. Nasty case insensitive filesystems mean that Cf.pl will cause a -e
  # test for cf.pl to return true. So need to read the filenames explicitly
  # to get a case sensitive test
  my %files;

  my $dirname = File::Spec->catdir($updir => lib => unicore => lib => gc_sc);
  opendir D, $dirname or die $!;
  @@files{readdir D} = ();
  closedir D;

  for (keys %utf8::PA_reverse) {
    my $leafname = "$utf8::PA_reverse{$_}.pl";
    next unless exists $files{$leafname};

    my $filename = File::Spec->catfile($dirname, $leafname);

    my ($h1, $h2) = map hex, split /\t/, (do $filename);
    my $str = join "", map chr, $h1 .. (($h2 || $h1) + 1);

    for my $x ('gc', 'General Category') {
      print "# $filename $x $_, $utf8::PA_reverse{$_}\n";
      for my $y ($_, $utf8::PA_reverse{$_}) {
	is($str =~ /(\p{$x: $y}+)/ && $1, substr($str, 0, -1));
	is($str =~ /(\P{$x= $y}+)/ && $1, substr($str, -1));
	is($str =~ /(\p{$y}+)/ && $1, substr($str, 0, -1));
	is($str =~ /(\P{$y}+)/ && $1, substr($str, -1));
      }
    }
  }
}
d91 2
a92 20
# test the blocks (InFoobar)
for (grep $utf8::Canonical{$_} =~ /^In/, keys %utf8::Canonical) {
  my $filename = File::Spec->catfile(
    $updir => lib => unicore => lib => gc_sc => "$utf8::Canonical{$_}.pl"
  );

  next unless -e $filename;
  my ($h1, $h2) = map hex, split /\t/, (do $filename);
  my $str = join "", map chr, $h1 .. (($h2 || $h1) + 1);

  my $blk = $_;

  is($str =~ /(\p{$blk}+)/ && $1, substr($str, 0, -1));
  is($str =~ /(\P{$blk}+)/ && $1, substr($str, -1));

  $blk =~ s/^In/Block:/;

  is($str =~ /(\p{$blk}+)/ && $1, substr($str, 0, -1));
  is($str =~ /(\P{$blk}+)/ && $1, substr($str, -1));
}
@


1.1.1.1
log
@Import of stock perl 5.8.5
@
text
@@


1.1.1.2
log
@perl 5.8.6 from CPAN
@
text
@a114 1
SKIP:
d116 3
a118 9
  skip "Can't reliably derive class names from file names", 544 if $^O eq 'VMS';

  # On case tolerant filesystems, Cf.pl will cause a -e test for cf.pl to
  # return true. Try to work around this by reading the filenames explicitly
  # to get a case sensitive test.  N.B.  This will fail if filename case is
  # not preserved because you might go looking for a class name of CF or cf
  # when you really want Cf.  Storing case sensitive data in filenames is 
  # simply not portable.

@


1.1.1.3
log
@perl 5.8.8 import
@
text
@d7 1
a7 1
plan tests => 4670;
a27 24
sub test_regexp ($$) {
  # test that given string consists of N-1 chars matching $qr1, and 1
  # char matching $qr2
  my ($str, $blk) = @@_;

  # constructing these objects here makes the last test loop go much faster
  my $qr1 = qr/(\p{$blk}+)/;
  if ($str =~ $qr1) {
    is($1, substr($str, 0, -1));		# all except last char
  }
  else {
    fail('first N-1 chars did not match');
  }

  my $qr2 = qr/(\P{$blk}+)/;
  if ($str =~ $qr2) {
    is($1, substr($str, -1));			# only last char
  }
  else {
    fail('last char did not match');
  }
}

use strict;
d60 1
d64 1
a67 4
*utf8::PropertyAlias = *utf8::PropertyAlias; # thwart a warning

no warnings 'utf8'; # we do not want warnings about surrogates etc

d80 1
a80 1
    my ($h1, $h2) = map hex, (split(/\t/, (do $filename), 3))[0,1];
d100 1
a100 1
    my ($h1, $h2) = map hex, (split(/\t/, (do $filename), 3))[0,1];
d107 2
a108 1
	test_regexp ($str, $y);
d117 1
a117 1
  skip "Can't reliably derive class names from file names", 592 if $^O eq 'VMS';
d128 1
a128 1
  my $dirname = File::Spec->catdir($updir => lib => unicore => lib => 'gc_sc');
d130 1
a130 1
  @@files{readdir(D)} = ();
d139 1
a139 1
    my ($h1, $h2) = map hex, (split(/\t/, (do $filename), 3))[0,1];
d147 2
a148 1
	test_regexp ($str, $y);
d161 1
a161 4

  print "# In$_ $filename\n";

  my ($h1, $h2) = map hex, (split(/\t/, (do $filename), 3))[0,1];
d166 3
a168 1
  test_regexp ($str, $blk);
d170 3
a172 1
  test_regexp ($str, $blk);
a173 1

@


1.1.1.4
log
@import perl 5.10.0 from CPAN
@
text
@d7 1
a7 1
plan tests => 4784;
d53 1
a53 7
my $str;

if (ord('A') == 193) {
    $str = join "", map chr($_), 0x40, 0x5A, 0x7F, 0x7B, 0x5B, 0x6C, 0x50, 0x7D, 0x4D, 0x5D, 0x5C, 0x4E, 0x6B, 0x60, 0x4B, 0x61, 0xF0 .. 0xF9, 0x7A, 0x5E, 0x4C, 0x7E, 0x6E, 0x6F, 0x7C, 0xC1 .. 0xC9, 0xD1 .. 0xD9, 0xE2 .. 0xE9, 0xAD, 0xE0, 0xBD, 0x5F, 0x6D, 0x79, 0x81 .. 0x89, 0x91 .. 0x96; # IBM-1047
} else {
    $str = join "", map chr($_), 0x20 .. 0x6F;
}
a93 21
sub char_range {
    my ($h1, $h2) = @@_;

    my $str;

    if (ord('A') == 193 && $h1 < 256) {
	my $h3 = ($h2 || $h1) + 1;
	if ($h3 - $h1 == 1) {
	    $str = join "", pack 'U*', $h1 .. $h3; # Using pack since chr doesn't generate Unicode chars for value < 256.
	} elsif ($h3 - $h1 > 1) {
	    for (my $i = $h1; $i <= $h3; $i++) {
		$str = join "", $str, pack 'U*', $i;
	    }
	}
    } else {
	$str = join "", map chr, $h1 .. (($h2 || $h1) + 1);
    }

    return $str;
}

d107 1
a107 2

    my $str = char_range($h1, $h2);
d127 1
a127 2

    my $str = char_range($h1, $h2);
d133 1
a133 4
        SKIP: {
	  skip("surrogate", 1) if $abbr eq 'cs';
 	  test_regexp ($str, $y);
        }
d142 1
a142 1
  skip "Can't reliably derive class names from file names", 576 if $^O eq 'VMS';
d165 1
a165 2

    my $str = char_range($h1, $h2);
d189 1
a189 2

  my $str = char_range($h1, $h2);
d193 3
a195 6
  SKIP: {
    skip($blk, 2) if $blk =~ /surrogates/i;
    test_regexp ($str, $blk);
    $blk =~ s/^In/Block:/;
    test_regexp ($str, $blk);
  }
@


1.1.1.5
log
@import perl 5.10.1
@
text
@d7 1
a7 1
plan tests => 5092;
@


1.1.1.6
log
@Perl 5.12.2 from CPAN
@
text
@d7 1
a7 1
plan tests => 10;
d74 1
a74 1
# lib/unicore/Bc/AL.pl
d76 4
a79 4
is(($str =~ /(\P{BidiClass: ArabicLetter}+)/)[0], "\x{070F}");
is(($str =~ /(\P{BidiClass: AL}+)/)[0], "\x{070F}");
is(($str =~ /(\P{BC :ArabicLetter}+)/)[0], "\x{070F}");
is(($str =~ /(\P{bc=AL}+)/)[0], "\x{070F}");
d85 149
a234 2
# The other tests that are based on looking at the generated files are now
# in t/re/uniprops.t
@


1.1.1.7
log
@import perl 5.16.3 from CPAN - worked on by Andrew Fresh and myself
@
text
@d7 1
a7 1
plan tests => 11;
d9 1
a9 6
my $str = join "", map latin1_to_native(chr($_)), 0x20 .. 0x6F;

is(($str =~ /(\p{IsMyUniClass}+)/)[0], '0123456789:;<=>?@@ABCDEFGHIJKLMNO',
                                'user-defined class compiled before defined');

sub IsMyUniClass {
d15 1
a15 1
sub Other::IsClass {
d23 2
a24 2
+main::IsMyUniClass
&Other::IsClass
d53 8
d66 1
a66 1
is(($str =~ /(\p{IsMyUniClass}+)/)[0], '0123456789:;<=>?@@ABCDEFGHIJKLMNO');
d69 1
a69 1
is(($str =~ /(\p{Other::IsClass}+)/)[0], '@@ABCDEFGHIJKLMNOPQRSTUVWXYZ[\]^_');
d74 6
a79 8
# lib/unicore/lib/Bc/AL.pl.  U+070E is unassigned, currently, but still has
# bidi class AL.  The first one in the sequence that doesn't is 0711, which is
# BC=NSM.
$str = "\x{070D}\x{070E}\x{070F}\x{0710}\x{0711}\x{0712}";
is(($str =~ /(\P{BidiClass: ArabicLetter}+)/)[0], "\x{0711}");
is(($str =~ /(\P{BidiClass: AL}+)/)[0], "\x{0711}");
is(($str =~ /(\P{BC :ArabicLetter}+)/)[0], "\x{0711}");
is(($str =~ /(\P{bc=AL}+)/)[0], "\x{0711}");
@


