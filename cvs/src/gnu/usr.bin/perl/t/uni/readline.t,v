head	1.2;
access;
symbols
	OPENBSD_6_2:1.2.0.6
	OPENBSD_6_2_BASE:1.2
	PERL_5_24_2:1.1.1.4
	OPENBSD_6_1:1.2.0.4
	OPENBSD_6_1_BASE:1.2
	OPENBSD_6_0:1.1.1.3.0.10
	OPENBSD_6_0_BASE:1.1.1.3
	OPENBSD_5_9:1.1.1.3.0.4
	OPENBSD_5_9_BASE:1.1.1.3
	OPENBSD_5_8:1.1.1.3.0.6
	OPENBSD_5_8_BASE:1.1.1.3
	PERL_5_20_2:1.1.1.3
	OPENBSD_5_7:1.1.1.3.0.2
	OPENBSD_5_7_BASE:1.1.1.3
	PERL_5_20_1:1.1.1.3
	OPENBSD_5_6:1.1.1.2.0.4
	OPENBSD_5_6_BASE:1.1.1.2
	PERL_5_18_2:1.1.1.2
	PERL:1.1.1
	OPENBSD_5_5:1.1.1.1.0.6
	OPENBSD_5_5_BASE:1.1.1.1
	OPENBSD_5_4:1.1.1.1.0.2
	OPENBSD_5_4_BASE:1.1.1.1
	PERL_5_16_3:1.1.1.1
	CPAN:1.1.1;
locks; strict;
comment	@# @;
expand	@o@;


1.2
date	2017.02.05.00.32.21;	author afresh1;	state Exp;
branches;
next	1.1;
commitid	cxJ08BvJA9Pt2PTM;

1.1
date	2013.03.25.20.09.38;	author sthen;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	2013.03.25.20.09.38;	author sthen;	state Exp;
branches;
next	1.1.1.2;

1.1.1.2
date	2014.03.24.14.59.11;	author afresh1;	state Exp;
branches;
next	1.1.1.3;

1.1.1.3
date	2014.11.17.20.53.19;	author afresh1;	state Exp;
branches;
next	1.1.1.4;
commitid	B31cAbBIXiCqnL97;

1.1.1.4
date	2017.08.14.13.46.25;	author afresh1;	state Exp;
branches;
next	;
commitid	fAzrs78vdW2Yfc6A;


desc
@@


1.2
log
@Fix merge issues, remove excess files - match perl-5.24.1 dist
@
text
@#!./perl

BEGIN {
    chdir 't' if -d 't';
    require './test.pl';
    set_up_inc('../lib');
}

plan tests => 7;

use utf8;
use open qw( :utf8 :std );

# [perl #19566]: sv_gets writes directly to its argument via
# TARG. Test that we respect SvREADONLY.
use constant roref=>\2;
eval { for (roref) { $_ = <Fʜ> } };
like($@@, qr/Modification of a read-only value attempted/, '[perl #19566]');

# [perl #21628]
{
  my $file = tempfile();
  open Ạ,'+>',$file; $a = 3;
  is($a .= <Ạ>, 3, '#21628 - $a .= <A> , A eof');
  close Ạ; $a = 4;
  is($a .= <Ạ>, 4, '#21628 - $a .= <A> , A closed');
}

use strict;

open ᕝ, '.' and sysread ᕝ, $_, 1;
my $err = $! + 0;
close ᕝ;

SKIP: {
  skip "you can read directories as plain files", 2 unless( $err );

  $!=0;
  open ᕝ, '.' and $_=<ᕝ>;
  ok( $!==$err && !defined($_) => 'readline( DIRECTORY )' );
  close ᕝ;

  $!=0;
  { local $/;
    open ᕝ, '.' and $_=<ᕝ>;
    ok( $!==$err && !defined($_) => 'readline( DIRECTORY ) slurp mode' );
    close ᕝ;
  }
}

my $obj = bless [], "Ȼლᔆ";
$obj .= <DATA>;
like($obj, qr/Ȼლᔆ=ARRAY.*world/u, 'rcatline and refs');

{
    my $file = tempfile();
    open my $out_fh, ">", $file;
    print { $out_fh } "Data\n";
    close $out_fh;

    open hòฟ, "<", $file;
    is( scalar(<hòฟ>), "Data\n", "readline() works correctly on UTF-8 filehandles" );
    close hòฟ;
}

__DATA__
world
@


1.1
log
@Initial revision
@
text
@d4 1
a4 2
    chdir 't';
    @@INC = '../lib';
d6 1
d16 3
a18 2
eval { for (\2) { $_ = <Fʜ> } };
like($@@, 'Modification of a read-only value attempted', '[perl #19566]');
d25 1
a25 1
  close A; $a = 4;
@


1.1.1.1
log
@import perl 5.16.3 from CPAN - worked on by Andrew Fresh and myself
@
text
@@


1.1.1.2
log
@Import perl-5.18.2

OK espie@@ sthen@@ deraadt@@
@
text
@d24 1
a24 1
  close Ạ; $a = 4;
@


1.1.1.3
log
@Import perl-5.20.1
@
text
@d16 1
a16 2
use constant roref=>\2;
eval { for (roref) { $_ = <Fʜ> } };
@


1.1.1.4
log
@Import perl-5.24.2
@
text
@d4 2
a5 1
    chdir 't' if -d 't';
a6 1
    set_up_inc('../lib');
d18 1
a18 1
like($@@, qr/Modification of a read-only value attempted/, '[perl #19566]');
@


