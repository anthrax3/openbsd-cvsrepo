head	1.1;
branch	1.1.1;
access;
symbols
	OPENBSD_6_0:1.1.1.1.0.16
	OPENBSD_6_0_BASE:1.1.1.1
	OPENBSD_5_9:1.1.1.1.0.10
	OPENBSD_5_9_BASE:1.1.1.1
	OPENBSD_5_8:1.1.1.1.0.12
	OPENBSD_5_8_BASE:1.1.1.1
	PERL_5_20_2:1.1.1.1
	OPENBSD_5_7:1.1.1.1.0.4
	OPENBSD_5_7_BASE:1.1.1.1
	PERL_5_20_1:1.1.1.1
	OPENBSD_5_6:1.1.1.1.0.8
	OPENBSD_5_6_BASE:1.1.1.1
	PERL_5_18_2:1.1.1.1
	PERL:1.1.1
	OPENBSD_5_5:1.1.1.1.0.6
	OPENBSD_5_5_BASE:1.1.1.1
	OPENBSD_5_4:1.1.1.1.0.2
	OPENBSD_5_4_BASE:1.1.1.1
	PERL_5_16_3:1.1.1.1
	CPAN:1.1.1;
locks; strict;
comment	@# @;
expand	@o@;


1.1
date	2013.03.25.20.09.38;	author sthen;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	2013.03.25.20.09.38;	author sthen;	state Exp;
branches;
next	;


desc
@@


1.1
log
@Initial revision
@
text
@#!./perl
# Tests for caller()

BEGIN {
    chdir 't' if -d 't';
    @@INC = '../lib';
    require './test.pl';
    plan( tests => 18 );
}

use utf8;
use open qw( :utf8 :std );

package ｍａｉｎ;

{
    local $@@;
    eval 'ok(1);';
    ::like $@@, qr/Undefined subroutine &ｍａｉｎ::ok called at/u;
}
my @@c;

sub { @@c = caller(0) } -> ();
::is( $c[3], "ｍａｉｎ::__ANON__", "anonymous subroutine name" );
::ok( $c[4], "hasargs true with anon sub" );

# Bug 20020517.003, used to dump core
sub ｆｏｏ { @@c = caller(0) }
my $fooref = delete $ｍａｉｎ::{ｆｏｏ};
$fooref -> ();
::is( $c[3], "ｍａｉｎ::__ANON__", "deleted subroutine name" );
::ok( $c[4], "hasargs true with deleted sub" );

print "# Tests with caller(1)\n";

sub ｆ { @@c = caller(1) }

sub ｃａｌｌｆ { ｆ(); }
ｃａｌｌｆ();
::is( $c[3], "ｍａｉｎ::ｃａｌｌｆ", "subroutine name" );
::ok( $c[4], "hasargs true with ｃａｌｌｆ()" );
&ｃａｌｌｆ;
::ok( !$c[4], "hasargs false with &ｃａｌｌｆ" );

eval { ｆ() };
::is( $c[3], "(eval)", "subroutine name in an eval {}" );
::ok( !$c[4], "hasargs false in an eval {}" );

eval q{ ｆ() };
::is( $c[3], "(eval)", "subroutine name in an eval ''" );
::ok( !$c[4], "hasargs false in an eval ''" );

sub { ｆ() } -> ();
::is( $c[3], "ｍａｉｎ::__ANON__", "anonymous subroutine name" );
::ok( $c[4], "hasargs true with anon sub" );

sub ｆｏｏ2 { ｆ() }
my $fooref2 = delete $ｍａｉｎ::{ｆｏｏ2};
$fooref2 -> ();
::is( $c[3], "ｍａｉｎ::__ANON__", "deleted subroutine name" );
::ok( $c[4], "hasargs true with deleted sub" );

sub ｐｂ { return (caller(0))[3] }

::is( eval 'ｐｂ()', 'ｍａｉｎ::ｐｂ', "actually return the right function name" );

my $saved_perldb = $^P;
$^P = 16;
$^P = $saved_perldb;

::is( eval 'ｐｂ()', 'ｍａｉｎ::ｐｂ', 'actually return the right function name even if $^P had been on at some point' );
@


1.1.1.1
log
@import perl 5.16.3 from CPAN - worked on by Andrew Fresh and myself
@
text
@@
