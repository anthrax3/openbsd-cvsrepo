head	1.2;
access;
symbols
	OPENBSD_6_2_BASE:1.2
	PERL_5_24_2:1.1.1.4
	OPENBSD_6_1:1.2.0.4
	OPENBSD_6_1_BASE:1.2
	OPENBSD_6_0:1.1.1.3.0.12
	OPENBSD_6_0_BASE:1.1.1.3
	OPENBSD_5_9:1.1.1.3.0.6
	OPENBSD_5_9_BASE:1.1.1.3
	OPENBSD_5_8:1.1.1.3.0.8
	OPENBSD_5_8_BASE:1.1.1.3
	PERL_5_20_2:1.1.1.3
	OPENBSD_5_7:1.1.1.3.0.2
	OPENBSD_5_7_BASE:1.1.1.3
	PERL_5_20_1:1.1.1.3
	OPENBSD_5_6:1.1.1.3.0.4
	OPENBSD_5_6_BASE:1.1.1.3
	PERL_5_18_2:1.1.1.3
	PERL:1.1.1
	OPENBSD_5_5:1.1.1.2.0.6
	OPENBSD_5_5_BASE:1.1.1.2
	OPENBSD_5_4:1.1.1.2.0.2
	OPENBSD_5_4_BASE:1.1.1.2
	PERL_5_16_3:1.1.1.2
	OPENBSD_5_3:1.1.1.1.0.18
	OPENBSD_5_3_BASE:1.1.1.1
	OPENBSD_5_2:1.1.1.1.0.16
	OPENBSD_5_2_BASE:1.1.1.1
	OPENBSD_5_1_BASE:1.1.1.1
	OPENBSD_5_1:1.1.1.1.0.14
	OPENBSD_5_0:1.1.1.1.0.12
	OPENBSD_5_0_BASE:1.1.1.1
	OPENBSD_4_9:1.1.1.1.0.10
	OPENBSD_4_9_BASE:1.1.1.1
	PERL_5_12_2:1.1.1.1
	OPENBSD_4_8:1.1.1.1.0.8
	OPENBSD_4_8_BASE:1.1.1.1
	OPENBSD_4_7:1.1.1.1.0.4
	OPENBSD_4_7_BASE:1.1.1.1
	PERL_5_10_1:1.1.1.1
	OPENBSD_4_6:1.1.1.1.0.6
	OPENBSD_4_6_BASE:1.1.1.1
	OPENBSD_4_5:1.1.1.1.0.2
	OPENBSD_4_5_BASE:1.1.1.1
	PERL_5_10_0:1.1.1.1
	CPAN:1.1.1;
locks; strict;
comment	@# @;
expand	@o@;


1.2
date	2017.02.05.00.32.21;	author afresh1;	state Exp;
branches;
next	1.1;
commitid	cxJ08BvJA9Pt2PTM;

1.1
date	2008.09.29.17.19.03;	author millert;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	2008.09.29.17.19.03;	author millert;	state Exp;
branches;
next	1.1.1.2;

1.1.1.2
date	2013.03.25.20.09.38;	author sthen;	state Exp;
branches;
next	1.1.1.3;

1.1.1.3
date	2014.03.24.14.59.11;	author afresh1;	state Exp;
branches;
next	1.1.1.4;

1.1.1.4
date	2017.08.14.13.46.25;	author afresh1;	state Exp;
branches;
next	;
commitid	fAzrs78vdW2Yfc6A;


desc
@@


1.2
log
@Fix merge issues, remove excess files - match perl-5.24.1 dist
@
text
@#!./perl -w

BEGIN {
    chdir 't' if -d 't';
    require './test.pl';
    skip_all_without_dynamic_extension('Encode');
    skip_all("no encoding pragma in EBCDIC") if $::IS_EBCDIC;
    skip_all_without_perlio();
}

plan tests => 94;

no warnings 'deprecated';
use encoding "latin2"; # iso 8859-2

# U+00C1, \xC1, \301, LATIN CAPITAL LETTER A WITH ACUTE
# U+0102, \xC3, \402, LATIN CAPITAL LETTER A WITH BREVE
# U+00E1, \xE1, \303, LATIN SMALL LETTER A WITH ACUTE
# U+0103, \xE3, \403, LATIN SMALL LETTER A WITH BREVE

ok("\xC1"    =~ /\xC1/,     '\xC1 to /\xC1/');
ok("\x{C1}"  =~ /\x{C1}/,   '\x{C1} to /\x{C1}/');
ok("\xC3"    =~ /\xC3/,     '\xC3 to /\xC3/');
ok("\x{102}" =~ /\xC3/,     '\x{102} to /\xC3/');
ok("\xC3"    =~ /\x{C3}/,   '\xC3 to /\x{C3}/');
ok("\x{102}" =~ /\x{C3}/,   '\x{102} to /\x{C3}/');
ok("\xC3"    =~ /\x{102}/,  '\xC3 to /\x{102}/');
ok("\x{102}" =~ /\x{102}/,  '\x{102} to /\x{102}/');

ok("\xC1"    =~ /\xC1/i,    '\xC1 to /\xC1/i');
ok("\xE1"    =~ /\xC1/i,    '\xE1 to /\xC1/i');
ok("\xC1"    =~ /\xE1/i,    '\xC1 to /\xE1/i');
ok("\xE1"    =~ /\xE1/i,    '\xE1 to /\xE1/i');
ok("\x{102}" =~ /\xC3/i,    '\x{102} to /\xC3/i');
ok("\x{103}" =~ /\xC3/i,    '\x{103} to /\xC3/i');
ok("\x{102}" =~ /\xE3/i,    '\x{102} to /\xE3/i');
ok("\x{103}" =~ /\xE3/i,    '\x{103} to /\xE3/i');

ok("\xC1"    =~ /[\xC1]/,     '\xC1 to /[\xC1]/');
ok("\x{C1}"  =~ /[\x{C1}]/,   '\x{C1} to /[\x{C1}]/');
ok("\xC3"    =~ /[\xC3]/,     '\xC3 to /[\xC3]/');
ok("\x{102}" =~ /[\xC3]/,     '\x{102} to /[\xC3]/');
ok("\xC3"    =~ /[\x{C3}]/,   '\xC3 to /[\x{C3}]/');
ok("\x{102}" =~ /[\x{C3}]/,   '\x{102} to /[\x{C3}]/');
ok("\xC3"    =~ /[\x{102}]/,  '\xC3 to /[\x{102}]/');
ok("\x{102}" =~ /[\x{102}]/,  '\x{102} to /[\x{102}]/');

ok("\xC1"    =~ /[\xC1]/i,  '\xC1 to /[\xC1]/i');
ok("\xE1"    =~ /[\xC1]/i,  '\xE1 to /[\xC1]/i');
ok("\xC1"    =~ /[\xE1]/i,  '\xC1 to /[\xE1]/i');
ok("\xE1"    =~ /[\xE1]/i,  '\xE1 to /[\xE1]/i');
ok("\x{102}" =~ /[\xC3]/i,  '\x{102} to /[\xC3]/i');
ok("\x{103}" =~ /[\xC3]/i,  '\x{103} to /[\xC3]/i');
ok("\x{102}" =~ /[\xE3]/i,  '\x{102} to /[\xE3]/i');
ok("\x{103}" =~ /[\xE3]/i,  '\x{103} to /[\xE3]/i');

ok("\xC1"    =~ '\xC1',       '\xC1 to \'\xC1\'');
ok("\xC1"    =~ '\x{C1}',     '\xC1 to \'\x{C1}\'');
ok("\xC3"    =~ '\303',       '\xC3 to \'\303\'');
ok("\xC3"    =~ '\x{102}',    '\xC3 to \'\x{102}\'');
ok("\xC1"    =~ '[\xC1]',     '\xC1 to \'[\xC1]\'');
ok("\xC1"    =~ '[\x{C1}]',   '\xC1 to \'[\x{C1}]\'');
ok("\xC3"    =~ '[\303]',     '\xC3 to \'[\303]\'');
ok("\xC3"    =~ '[\x{102}]',  '\xC3 to \'[\x{102}]\'');

ok("\xC1"    =~ /Á/,     '\xC1 to /<A-acute>/');
ok("\xE1"    !~ /Á/,     '\xE1 to /<A-acute>/');
ok("\xC1"    =~ /Á/i,    '\xC1 to /<A-acute>/i');
ok("\xE1"    =~ /Á/i,    '\xE1 to /<A-acute>/i');
ok("\xC1"    =~ /[Á]/,   '\xC1 to /[<A-acute>]/');
ok("\xE1"    !~ /[Á]/,   '\xE1 to /[<A-acute>]/');
ok("\xC1"    =~ /[Á]/i,  '\xC1 to /[<A-acute>]/i');
ok("\xE1"    =~ /[Á]/i,  '\xE1 to /[<A-acute>]/i');

ok("\xC1\xC1"  =~ /Á\xC1/,    '\xC1\xC1 to /<A-acute>\xC1/');
ok("\xC1\xC1"  =~ /\xC1Á/,    '\xC1\xC1 to /\xC1<A-acute>/');
ok("\xC1\xC1"  =~ /Á\xC1/i,   '\xC1\xC1 to /<A-acute>\xC1/i');
ok("\xC1\xC1"  =~ /\xC1Á/i,   '\xC1\xC1 to /\xC1<A-acute>/i');
ok("\xC1\xE1"  =~ /Á\xC1/i,   '\xC1\xE1 to /<A-acute>\xC1/i');
ok("\xC1\xE1"  =~ /\xC1Á/i,   '\xC1\xE1 to /\xC1<A-acute>/i');
ok("\xE1\xE1"  =~ /Á\xC1/i,   '\xE1\xE1 to /<A-acute>\xC1/i');
ok("\xE1\xE1"  =~ /\xC1Á/i,   '\xE1\xE1 to /\xC1<A-acute>/i');

# \xDF is LATIN SMALL LETTER SHARP S

ok("\xDF" =~ /\xDF/,    '\xDF to /\xDF/');
ok("\xDF" =~ /\xDF/i,   '\xDF to /\xDF/i');
ok("\xDF" =~ /[\xDF]/,  '\xDF to /[\xDF]/');
ok("\xDF" =~ /[\xDF]/i, '\xDF to /[\xDF]/i');
ok("\xDF" =~ /ß/,       '\xDF to /<sharp-s>/');
ok("\xDF" =~ /ß/i,      '\xDF to /<sharp-s>/i');
ok("\xDF" =~ /[ß]/,     '\xDF to /[<sharp-s>]/');
ok("\xDF" =~ /[ß]/i,    '\xDF to /[<sharp-s>]/i');

ok("SS"   =~ /\xDF/i,   'SS to /\xDF/i');
ok("Ss"   =~ /\xDF/i,   'Ss to /\xDF/i');
ok("sS"   =~ /\xDF/i,   'sS to /\xDF/i');
ok("ss"   =~ /\xDF/i,   'ss to /\xDF/i');
ok("SS"   =~ /ß/i,      'SS to /<sharp-s>/i');
ok("Ss"   =~ /ß/i,      'Ss to /<sharp-s>/i');
ok("sS"   =~ /ß/i,      'sS to /<sharp-s>/i');
ok("ss"   =~ /ß/i,      'ss to /<sharp-s>/i');

ok("\xC3" =~ /\303/,     '\xC1 to /\303/');
ok("\303" =~ /\303/,     '\303 to /\303/');
ok("\xC3" =~ /\303/i,    '\xC1 to /\303/i');
ok("\xE3" =~ /\303/i,    '\xC1 to /\303/i');
ok("\xC3" =~ /[\303]/,   '\xC1 to /[\303]/');
ok("\303" =~ /[\303]/,   '\303 to /[\303]/');
ok("\xC3" =~ /[\303]/i,  '\xC1 to /[\303]/i');
ok("\xE3" =~ /[\303]/i,  '\xC1 to /[\303]/i');

ok("\xC3" =~ /\402/,     '\xC1 to /\402/');
ok("\402" =~ /\402/,     '\402 to /\402/');
ok("\xC3" =~ /\402/i,    '\xC1 to /\402/i');
ok("\xE3" =~ /\402/i,    '\xC1 to /\402/i');
ok("\xC3" =~ /[\402]/,   '\xC1 to /[\402]/');
ok("\402" =~ /[\402]/,   '\402 to /[\402]/');
ok("\xC3" =~ /[\402]/i,  '\xC1 to /[\402]/i');
ok("\xE3" =~ /[\402]/i,  '\xC1 to /[\402]/i');

{
    my $re = '(?i:\xC1)';

    ok("\xC1" =~ $re, '\xC1 to (?i:\xC1)');
    ok("\xE1" =~ $re, '\xE1 to (?i:\xC1)');

    utf8::downgrade($re);

    ok("\xC1" =~ $re, '\xC1 to (?i:\xC1) down');
    ok("\xE1" =~ $re, '\xE1 to (?i:\xC1) down');

    utf8::upgrade($re);

    ok("\xC1" =~ $re, '\xC1 to (?i:\xC1) up');
    ok("\xE1" =~ $re, '\xE1 to (?i:\xC1) up');
}

@


1.1
log
@Initial revision
@
text
@d1 2
d4 1
a4 22
    if ($ENV{'PERL_CORE'}){
        chdir 't';
        @@INC = '../lib';
    }
    require Config; import Config;
    if ($Config{'extensions'} !~ /\bEncode\b/) {
      print "1..0 # Skip: Encode was not built\n";
      exit 0;
    }
    if (ord("A") == 193) {
        print "1..0 # Skip: EBCDIC\n";
        exit 0;
    }
    unless (PerlIO::Layer->find('perlio')){
        print "1..0 # Skip: PerlIO required\n";
        exit 0;
    }
    if ($ENV{PERL_CORE_MINITEST}) {
        print "1..0 # Skip: no dynamic loading on miniperl, no Encode\n";
        exit 0;
    }
    $| = 1;
d6 3
d13 1
@


1.1.1.1
log
@import perl 5.10.0 from CPAN
@
text
@@


1.1.1.2
log
@import perl 5.16.3 from CPAN - worked on by Andrew Fresh and myself
@
text
@a0 2
#!./perl -w

d2 22
a24 3
    skip_all_without_dynamic_extension('Encode');
    skip_all("EBCDIC") if $::IS_EBCDIC;
    skip_all_without_perlio();
@


1.1.1.3
log
@Import perl-5.18.2

OK espie@@ sthen@@ deraadt@@
@
text
@a11 1
no warnings 'deprecated';
@


1.1.1.4
log
@Import perl-5.24.2
@
text
@a3 1
    chdir 't' if -d 't';
d6 1
a6 1
    skip_all("no encoding pragma in EBCDIC") if $::IS_EBCDIC;
@


