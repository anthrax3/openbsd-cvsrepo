head	1.2;
access;
symbols
	OPENBSD_6_1:1.2.0.4
	OPENBSD_6_1_BASE:1.2
	OPENBSD_6_0:1.1.1.2.0.12
	OPENBSD_6_0_BASE:1.1.1.2
	OPENBSD_5_9:1.1.1.2.0.6
	OPENBSD_5_9_BASE:1.1.1.2
	OPENBSD_5_8:1.1.1.2.0.8
	OPENBSD_5_8_BASE:1.1.1.2
	PERL_5_20_2:1.1.1.2
	OPENBSD_5_7:1.1.1.2.0.2
	OPENBSD_5_7_BASE:1.1.1.2
	PERL_5_20_1:1.1.1.2
	OPENBSD_5_6:1.1.1.2.0.4
	OPENBSD_5_6_BASE:1.1.1.2
	PERL_5_18_2:1.1.1.2
	PERL:1.1.1
	OPENBSD_5_5:1.1.1.1.0.6
	OPENBSD_5_5_BASE:1.1.1.1
	OPENBSD_5_4:1.1.1.1.0.2
	OPENBSD_5_4_BASE:1.1.1.1
	PERL_5_16_3:1.1.1.1
	CPAN:1.1.1;
locks; strict;
comment	@# @;
expand	@o@;


1.2
date	2017.02.05.00.32.21;	author afresh1;	state Exp;
branches;
next	1.1;
commitid	cxJ08BvJA9Pt2PTM;

1.1
date	2013.03.25.20.09.38;	author sthen;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	2013.03.25.20.09.38;	author sthen;	state Exp;
branches;
next	1.1.1.2;

1.1.1.2
date	2014.03.24.14.59.11;	author afresh1;	state Exp;
branches;
next	;


desc
@@


1.2
log
@Fix merge issues, remove excess files - match perl-5.24.1 dist
@
text
@#!./perl

# Tests for labels in UTF-8

BEGIN {
    chdir 't' if -d 't';
    require './test.pl';
    set_up_inc('../lib');
    skip_all_without_unicode_tables();
}

use utf8;
use open qw( :utf8 :std );
use warnings;
use feature qw 'unicode_strings evalbytes';

use charnames qw( :full );

plan(10);

ＬＡＢＥＬ: {
    pass("Sanity check, UTF-8 labels don't throw a syntax error.");
}


SKIP: {
    skip_if_miniperl("no dynamic loading, no Encode", 2);
    no warnings 'exiting';
    require Encode;

    my $prog = 'last ＬＯＯＰ;';

    ＬＯＯＰ: {
        eval $prog;
    }
    is $@@, '', "last with a UTF-8 label works,";

    ＬＯＯＰ: {
        Encode::_utf8_off($prog);
        evalbytes $prog;
        like $@@, qr/^Unrecognized character/, "..but turn off the UTF-8 flag and it explodes";
    }
}

{
    no warnings 'exiting';

    eval "last Ｅ";
    like $@@, qr/Label not found for "last Ｅ" at/u, "last's error is UTF-8 clean";
    
    eval "redo Ｅ";
    like $@@, qr/Label not found for "redo Ｅ" at/u, "redo's error is UTF-8 clean";
    
    eval "next Ｅ";
    like $@@, qr/Label not found for "next Ｅ" at/u, "next's error is UTF-8 clean";
}

my $d = 2;
LÁBEL: {
    my $e = $@@;
    my $prog = "redo L\N{LATIN CAPITAL LETTER A WITH ACUTE}BEL";

    if ($d == 1) {
        is $e, '', "redo UTF8 works";
        utf8::downgrade($prog);
    }
    if ($d--) {
        use feature 'unicode_eval';
        no warnings 'exiting';
        eval $prog;
    }
}

like $@@, qr/Unrecognized character/, "redo to downgradeable labels";
is $d, 0, "Latin-1 labels are reachable";

{
    no warnings;
    goto ここ;
    
    if (undef) {
        ここ: {
            pass("goto UTF-8 LABEL works.");
        }
    }
}
@


1.1
log
@Initial revision
@
text
@a6 1
    @@INC = '../lib';
d8 2
d19 1
a19 1
plan(9);
d58 1
a58 1
my $d = 4;
d60 1
d63 2
a64 1
    if ($d % 2) {
d74 2
a75 2
is $@@, '', "redo to downgradeable labels works";
is $d, -1, "Latin-1 labels reachable regardless of UTF-8ness";
@


1.1.1.1
log
@import perl 5.16.3 from CPAN - worked on by Andrew Fresh and myself
@
text
@@


1.1.1.2
log
@Import perl-5.18.2

OK espie@@ sthen@@ deraadt@@
@
text
@d18 1
a18 1
plan(10);
d57 1
a57 1
my $d = 2;
a58 1
    my $e = $@@;
d61 1
a61 2
    if ($d == 1) {
        is $e, '', "redo UTF8 works";
d71 2
a72 2
like $@@, qr/Unrecognized character/, "redo to downgradeable labels";
is $d, 0, "Latin-1 labels are reachable";
@

