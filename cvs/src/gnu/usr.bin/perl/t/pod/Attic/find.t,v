head	1.2;
access;
symbols
	OPENBSD_4_8:1.1.1.6.0.4
	OPENBSD_4_8_BASE:1.1.1.6
	OPENBSD_4_7:1.1.1.6.0.2
	OPENBSD_4_7_BASE:1.1.1.6
	PERL_5_10_1:1.1.1.6
	OPENBSD_4_6:1.1.1.5.0.16
	OPENBSD_4_6_BASE:1.1.1.5
	OPENBSD_4_5:1.1.1.5.0.12
	OPENBSD_4_5_BASE:1.1.1.5
	PERL_5_10_0:1.1.1.5
	OPENBSD_4_4:1.1.1.5.0.10
	OPENBSD_4_4_BASE:1.1.1.5
	OPENBSD_4_3:1.1.1.5.0.8
	OPENBSD_4_3_BASE:1.1.1.5
	OPENBSD_4_2:1.1.1.5.0.6
	OPENBSD_4_2_BASE:1.1.1.5
	OPENBSD_4_1:1.1.1.5.0.4
	OPENBSD_4_1_BASE:1.1.1.5
	OPENBSD_4_0:1.1.1.5.0.2
	OPENBSD_4_0_BASE:1.1.1.5
	PERL_5_8_8:1.1.1.5
	OPENBSD_3_9:1.1.1.4.0.8
	OPENBSD_3_9_BASE:1.1.1.4
	OPENBSD_3_8:1.1.1.4.0.6
	OPENBSD_3_8_BASE:1.1.1.4
	OPENBSD_3_7:1.1.1.4.0.4
	OPENBSD_3_7_BASE:1.1.1.4
	PERL_5_8_6:1.1.1.4
	OPENBSD_3_6:1.1.1.4.0.2
	OPENBSD_3_6_BASE:1.1.1.4
	PERL_5_8_5:1.1.1.4
	PERL_5_8_3:1.1.1.3
	OPENBSD_3_5:1.1.1.3.0.2
	OPENBSD_3_5_BASE:1.1.1.3
	PERL_5_8_2:1.1.1.3
	OPENBSD_3_4:1.1.1.2.0.4
	OPENBSD_3_4_BASE:1.1.1.2
	OPENBSD_3_3:1.1.1.2.0.2
	OPENBSD_3_3_BASE:1.1.1.2
	PERL_5_8_0:1.1.1.2
	OPENBSD_3_2:1.1.1.1.0.6
	OPENBSD_3_2_BASE:1.1.1.1
	OPENBSD_3_1:1.1.1.1.0.4
	OPENBSD_3_1_BASE:1.1.1.1
	OPENBSD_3_0:1.1.1.1.0.2
	OPENBSD_3_0_BASE:1.1.1.1
	PERL_5_6_1:1.1.1.1
	CPAN:1.1.1;
locks; strict;
comment	@# @;


1.2
date	2010.09.24.15.00.01;	author millert;	state dead;
branches;
next	1.1;

1.1
date	2001.05.24.18.25.50;	author millert;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	2001.05.24.18.25.50;	author millert;	state Exp;
branches;
next	1.1.1.2;

1.1.1.2
date	2002.10.27.22.15.11;	author millert;	state Exp;
branches;
next	1.1.1.3;

1.1.1.3
date	2003.12.03.02.44.33;	author millert;	state Exp;
branches;
next	1.1.1.4;

1.1.1.4
date	2004.08.09.17.48.36;	author millert;	state Exp;
branches;
next	1.1.1.5;

1.1.1.5
date	2006.03.28.18.49.47;	author millert;	state Exp;
branches;
next	1.1.1.6;

1.1.1.6
date	2009.10.12.18.10.42;	author millert;	state Exp;
branches;
next	;


desc
@@


1.2
log
@remove files no longer in perl 5.12.2 (or that have moved)
@
text
@# Testing of Pod::Find
# Author: Marek Rouchal <marek@@saftsack.fs.uni-bayreuth.de>

BEGIN {
    chdir 't' if -d 't';
    unshift @@INC, '../lib';
}

$| = 1;

use Test;

BEGIN { plan tests => 4 }

use Pod::Find qw(pod_find pod_where);
use File::Spec;

# load successful
ok(1);

require Cwd;
my $THISDIR = Cwd::cwd();
my $VERBOSE = 0;
my $lib_dir = File::Spec->catdir($THISDIR,'..','lib','Pod');
if ($^O eq 'VMS') {
    $lib_dir = VMS::Filespec::unixify(File::Spec->catdir($THISDIR,'-','lib','pod'));
    $Qlib_dir = $lib_dir;
    $Qlib_dir =~ s#\/#::#g;
}
print "### searching $lib_dir\n";
my %pods = pod_find("$lib_dir");
my $result = join(",", sort values %pods);
print "### found $result\n";
my $compare = join(',', qw(
    Checker
    Find
    Html
    InputObjects
    LaTeX
    Man
    ParseUtils
    Parser
    Plainer
    Select
    Text
    Text::Color
    Text::Overstrike
    Text::Termcap
    Usage
));
if ($^O eq 'VMS') {
    $compare = lc($compare);
    $result = join(',', sort grep(/pod::/, values %pods));
    my $undollared = $Qlib_dir;
    $undollared =~ s/\$/\\\$/g;
    $undollared =~ s/\-/\\\-/g;
    $result =~ s/$undollared/pod::/g;
    my $count = 0;
    my @@result = split(/,/,$result);
    my @@compare = split(/,/,$compare);
    foreach(@@compare) {
        $count += grep {/$_/} @@result;
    }
    ok($count/($#result+1)-1,$#compare);
}
else {
    ok($result,$compare);
}

# File::Find is located in this place since eons
# and on all platforms, hopefully

print "### searching for File::Find\n";
$result = pod_where({ -inc => 1, -verbose => $VERBOSE }, 'File::Find')
  || 'undef - pod not found!';
print "### found $result\n";

if ($^O eq 'VMS') { # privlib is perl_root:[lib] OK but not under mms
    $compare = "lib.File]Find.pm";
    $result =~ s/perl_root:\[\-?\.?//i;
    $result =~ s/\[\-?\.?//i; # needed under `mms test`
    ok($result,$compare);
}
else {
    $compare = File::Spec->catfile("..","lib","File","Find.pm");
    ok(_canon($result),_canon($compare));
}

# Search for a documentation pod rather than a module
print "### searching for perlfunc.pod\n";
$result = pod_where({ -dirs => ['../pod'], -verbose => $VERBOSE }, 'perlfunc')
  || 'undef - perlfunc.pod not found!';
print "### found $result\n";

if ($^O eq 'VMS') { # privlib is perl_root:[lib] unfortunately
    $compare = "/lib/pod/perlfunc.pod";
    $result = VMS::Filespec::unixify($result);
    $result =~ s/perl_root\///i;
    $result =~ s/^\.\.//;  # needed under `mms test`
    ok($result,$compare);
}
else {
    $compare = File::Spec->catfile("..","pod","perlfunc.pod");
    ok(_canon($result),_canon($compare));
}

# make the path as generic as possible
sub _canon
{
  my ($path) = @@_;
  $path = File::Spec->canonpath($path);
  my @@comp = File::Spec->splitpath($path);
  my @@dir = File::Spec->splitdir($comp[1]);
  $comp[1] = File::Spec->catdir(@@dir);
  $path = File::Spec->catpath(@@dir);
  $path = uc($path) if File::Spec->case_tolerant;
  $path;
}

@


1.1
log
@Initial revision
@
text
@@


1.1.1.1
log
@stock perl 5.6.1
@
text
@@


1.1.1.2
log
@stock perl 5.8.0 from CPAN
@
text
@d6 1
a6 5
    # The ../../../../../lib is for finding lib/utf8.pm
    # when running under all-utf8 settings (pod/find.t)
    # does not directly require lib/utf8.pm but regular
    # expressions will need that.
    @@INC = qw(../lib ../../../../../lib);
d13 1
a13 4
BEGIN { 
  plan tests => 4; 
  use File::Spec;
}
d16 1
d22 1
d24 1
a24 1
my $lib_dir = File::Spec->catdir('pod', 'testpods', 'lib');
d26 1
a26 1
    $lib_dir = VMS::Filespec::unixify(File::Spec->catdir('pod', 'testpods', 'lib'));
d31 19
a49 4
my %pods = pod_find($lib_dir);
my $result = join(',', sort values %pods);
my $compare = join(',', sort qw(
    Pod::Stuff
d53 1
a53 1
    $result = join(',', sort values %pods);
a65 3
elsif ($^O eq 'dos') {
    ok(lc $result,lc $compare);
}
d70 2
a77 1
require Config;
d85 1
a85 1
    $compare = File::Spec->catfile(File::Spec->updir, 'lib','File','Find.pm');
d90 3
a92 4
print "### searching for Stuff.pod\n";
my $search = File::Spec->catdir('pod', 'testpods', 'lib', 'Pod');
$result = pod_where({ -dirs => [$search], -verbose => $VERBOSE }, 'Stuff')
  || 'undef - Stuff.pod not found!';
d95 11
a105 2
$compare = File::Spec->catfile('pod', 'testpods', 'lib', 'Pod' ,'Stuff.pod');
ok(_canon($result),_canon($compare));
@


1.1.1.3
log
@perl 5.8.2 from CPAN
@
text
@a4 1
  if($ENV{PERL_CORE}) {
a10 1
  }
d17 2
a18 2
BEGIN {
  plan tests => 4;
a22 1
use File::Spec;
d28 2
a29 5
my $THISDIR = Cwd::cwd();
my $VERBOSE = $ENV{PERL_CORE} ? 0 : ($ENV{TEST_VERBOSE} || 0);
my $lib_dir = $ENV{PERL_CORE} ? 
  File::Spec->catdir('pod', 'testpods', 'lib')
  : File::Spec->catdir($THISDIR,'lib');
d31 1
a31 3
    $lib_dir = $ENV{PERL_CORE} ?
      VMS::Filespec::unixify(File::Spec->catdir('pod', 'testpods', 'lib'))
      : VMS::Filespec::unixify(File::Spec->catdir($THISDIR,'-','lib','pod'));
a34 1

d38 1
a38 3
print "### found $result\n";
my $compare = $ENV{PERL_CORE} ? 
  join(',', sort qw(
a39 10
))
  : join(',', qw(
    Pod::Checker
    Pod::Find
    Pod::InputObjects
    Pod::ParseUtils
    Pod::Parser
    Pod::PlainText
    Pod::Select
    Pod::Usage
d43 1
a47 1
    $result =~ s/\$//g;
d56 1
a56 1
elsif (File::Spec->case_tolerant || $^O eq 'dos') {
d63 1
d77 1
a77 3
    $compare = $ENV{PERL_CORE} ?
      File::Spec->catfile(File::Spec->updir, 'lib','File','Find.pm')
      : File::Spec->catfile($Config::Config{privlib},"File","Find.pm");
d82 4
a85 7
my $searchpod = $ENV{PERL_CORE} ? 'Stuff' : 'perlfunc';
print "### searching for $searchpod.pod\n";
$result = pod_where($ENV{PERL_CORE} ?
  { -dirs => [ File::Spec->catdir('pod', 'testpods', 'lib', 'Pod') ],
    -verbose => $VERBOSE }
  : { -inc => 1, -verbose => $VERBOSE }, $searchpod)
  || "undef - $searchpod.pod not found!";
d88 2
a89 16
if($ENV{PERL_CORE}) {
    $compare = File::Spec->catfile('pod', 'testpods', 'lib', 'Pod' ,'Stuff.pm');
    ok(_canon($result),_canon($compare));
}
elsif ($^O eq 'VMS') { # privlib is perl_root:[lib] unfortunately
    $compare = "/lib/pod/perlfunc.pod";
    $result = VMS::Filespec::unixify($result);
    $result =~ s/perl_root\///i;
    $result =~ s/^\.\.//;  # needed under `mms test`
    ok($result,$compare);
}
else {
    $compare = File::Spec->catfile($Config::Config{privlib},
      ($^O =~ /macos|darwin|cygwin/i ? 'pods' : 'pod'),"perlfunc.pod");
    ok(_canon($result),_canon($compare));
}
d99 1
a99 1
  $path = File::Spec->catpath(@@comp);
a100 1
  print "### general path: $path\n" if $VERBOSE;
@


1.1.1.4
log
@Import of stock perl 5.8.5
@
text
@d52 1
a52 1
  : join(',', sort qw(
@


1.1.1.5
log
@perl 5.8.8 import
@
text
@d104 1
a104 1
my $searchpod = 'Stuff';
d106 4
a109 4
$result = pod_where(
  { -dirs => [ File::Spec->catdir(
    $ENV{PERL_CORE} ? () : qw(t), 'pod', 'testpods', 'lib', 'Pod') ],
    -verbose => $VERBOSE }, $searchpod)
d113 16
a128 4
$compare = File::Spec->catfile(
    $ENV{PERL_CORE} ? () : qw(t),
    'pod', 'testpods', 'lib', 'Pod' ,'Stuff.pm');
ok(_canon($result),_canon($compare));
@


1.1.1.6
log
@import perl 5.10.1
@
text
@d17 1
a17 1
use Test::More tests => 4;
d20 2
a21 2
  # 1. load successful
  use_ok('Pod::Find', qw(pod_find pod_where));
d24 1
d27 3
a35 5

my $vms_unix_rpt = 0;
my $vms_efs = 0;
my $unix_mode = 1;

a41 14

    $unix_mode = 0;
    if (eval 'require VMS::Feature') {
        $vms_unix_rpt = VMS::Feature::current("filename_unix_report");
        $vms_efs = VMS::Feature::current("efs_charset");
    } else {
        my $unix_rpt = $ENV{'DECC$FILENAME_UNIX_REPORT'} || '';
        my $efs_charset = $ENV{'DECC$EFS_CHARSET'} || '';
        $vms_unix_rpt = $unix_rpt =~ /^[ET1]/i; 
        $vms_efs = $efs_charset =~ /^[ET1]/i; 
    }

    # Traditional VMS mode only if VMS is not in UNIX compatible mode.
    $unix_mode = ($vms_efs && $vms_unix_rpt);
d44 1
a44 1
print "### 2. searching $lib_dir\n";
d75 1
a75 1
    is($count/($#result+1)-1,$#compare);
d78 1
a78 1
    is(lc $result,lc $compare);
d81 1
a81 1
    is($result,$compare);
d84 1
a84 1
print "### 3. searching for File::Find\n";
d91 1
a91 5
    if ($unix_mode) {
        $compare = "../lib/File/Find.pm";
    } else {
        $compare = "lib.File]Find.pm";
    }
d94 1
a94 1
    is($result,$compare);
d99 2
a100 12
      : File::Spec->catfile($Config::Config{privlibexp},"File","Find.pm");
    my $resfile = _canon($result);
    my $cmpfile = _canon($compare);
    if($^O =~ /dos|win32/i && $resfile =~ /~\d(?=\\|$)/) {
      # we have ~1 short filenames
      $resfile = quotemeta($resfile);
      $resfile =~ s/\\~\d(?=\\|$)/[^\\\\]+/g;
      ok($cmpfile =~ /^$resfile$/, "pod_where found File::Find (with long filename matching)") ||
        diag("'$cmpfile' does not match /^$resfile\$/");
    } else {
      is($resfile,$cmpfile,"pod_where found File::Find");
    }
d105 1
a105 1
print "### 4. searching for $searchpod.pod\n";
d116 1
a116 2
is(_canon($result),_canon($compare));

@


