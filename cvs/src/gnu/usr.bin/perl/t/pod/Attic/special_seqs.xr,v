head	1.2;
access;
symbols
	OPENBSD_4_8:1.1.1.4.0.28
	OPENBSD_4_8_BASE:1.1.1.4
	OPENBSD_4_7:1.1.1.4.0.24
	OPENBSD_4_7_BASE:1.1.1.4
	PERL_5_10_1:1.1.1.4
	OPENBSD_4_6:1.1.1.4.0.26
	OPENBSD_4_6_BASE:1.1.1.4
	OPENBSD_4_5:1.1.1.4.0.22
	OPENBSD_4_5_BASE:1.1.1.4
	PERL_5_10_0:1.1.1.4
	OPENBSD_4_4:1.1.1.4.0.20
	OPENBSD_4_4_BASE:1.1.1.4
	OPENBSD_4_3:1.1.1.4.0.18
	OPENBSD_4_3_BASE:1.1.1.4
	OPENBSD_4_2:1.1.1.4.0.16
	OPENBSD_4_2_BASE:1.1.1.4
	OPENBSD_4_1:1.1.1.4.0.14
	OPENBSD_4_1_BASE:1.1.1.4
	OPENBSD_4_0:1.1.1.4.0.12
	OPENBSD_4_0_BASE:1.1.1.4
	PERL_5_8_8:1.1.1.4
	OPENBSD_3_9:1.1.1.4.0.10
	OPENBSD_3_9_BASE:1.1.1.4
	OPENBSD_3_8:1.1.1.4.0.8
	OPENBSD_3_8_BASE:1.1.1.4
	OPENBSD_3_7:1.1.1.4.0.6
	OPENBSD_3_7_BASE:1.1.1.4
	PERL_5_8_6:1.1.1.4
	OPENBSD_3_6:1.1.1.4.0.4
	OPENBSD_3_6_BASE:1.1.1.4
	PERL_5_8_5:1.1.1.4
	PERL_5_8_3:1.1.1.4
	OPENBSD_3_5:1.1.1.4.0.2
	OPENBSD_3_5_BASE:1.1.1.4
	PERL_5_8_2:1.1.1.4
	OPENBSD_3_4:1.1.1.3.0.4
	OPENBSD_3_4_BASE:1.1.1.3
	OPENBSD_3_3:1.1.1.3.0.2
	OPENBSD_3_3_BASE:1.1.1.3
	PERL_5_8_0:1.1.1.3
	OPENBSD_3_2:1.1.1.2.0.6
	OPENBSD_3_2_BASE:1.1.1.2
	OPENBSD_3_1:1.1.1.2.0.4
	OPENBSD_3_1_BASE:1.1.1.2
	OPENBSD_3_0:1.1.1.2.0.2
	OPENBSD_3_0_BASE:1.1.1.2
	PERL_5_6_1:1.1.1.2
	OPENBSD_2_9:1.1.1.1.0.6
	OPENBSD_2_9_BASE:1.1.1.1
	OPENBSD_2_8:1.1.1.1.0.4
	OPENBSD_2_8_BASE:1.1.1.1
	OPENBSD_2_7:1.1.1.1.0.2
	OPENBSD_2_7_BASE:1.1.1.1
	PERL_5_6_0:1.1.1.1
	CPAN:1.1.1;
locks; strict;
comment	@# @;


1.2
date	2010.09.24.15.00.01;	author millert;	state dead;
branches;
next	1.1;

1.1
date	2000.04.06.16.10.54;	author millert;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	2000.04.06.16.10.54;	author millert;	state Exp;
branches;
next	1.1.1.2;

1.1.1.2
date	2001.05.24.18.25.54;	author millert;	state Exp;
branches;
next	1.1.1.3;

1.1.1.3
date	2002.10.27.22.15.11;	author millert;	state Exp;
branches;
next	1.1.1.4;

1.1.1.4
date	2003.12.03.02.44.33;	author millert;	state Exp;
branches;
next	;


desc
@@


1.2
log
@remove files no longer in perl 5.12.2 (or that have moved)
@
text
@    This is a test to see if I can do not only `$self' and `method()', but
    also `$self->method()' and `$self->{FIELDNAME}' and `$Foo <=> $Bar'
    without resorting to escape sequences. If I want to refer to the
    right-shift operator I can do something like `$x >> 3' or even `$y >>
    5'.

    Now for the grand finale of `$self->method()->{FIELDNAME} = {FOO=>BAR}'.
    And I also want to make sure that newlines work like this
    `$self->{FOOBAR} >> 3 and [$b => $a]->[$a <=> $b]'

    Of course I should still be able to do all this *with* escape sequences
    too: `$self->method()' and `$self->{FIELDNAME}' and `{FOO=>BAR}'.

    Dont forget `$self->method()->{FIELDNAME} = {FOO=>BAR}'.

    And make sure that `0' works too!

    Now, if I use << or >> as my delimiters, then I have to use whitespace.
    So things like `<$self-'method()>> and `<$self-'{FIELDNAME}>> wont end
    up doing what you might expect since the first > will still terminate
    the first < seen.

@


1.1
log
@Initial revision
@
text
@@


1.1.1.1
log
@virgin perl 5.6.0
@
text
@@


1.1.1.2
log
@stock perl 5.6.1
@
text
@a22 3
    Lets make sure these work for empty ones too, like and `>>' (just to be
    obnoxious)

@


1.1.1.3
log
@stock perl 5.8.0 from CPAN
@
text
@d1 1
a1 1
    This is a test to see if I can do not only $self and `method()', but
d16 1
a16 1
    And make sure that 0 works too!
@


1.1.1.4
log
@perl 5.8.2 from CPAN
@
text
@d1 1
a1 1
    This is a test to see if I can do not only `$self' and `method()', but
d16 1
a16 1
    And make sure that `0' works too!
@


