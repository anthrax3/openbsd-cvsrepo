head	1.2;
access;
symbols
	OPENBSD_3_2:1.1.1.2.0.6
	OPENBSD_3_2_BASE:1.1.1.2
	OPENBSD_3_1:1.1.1.2.0.4
	OPENBSD_3_1_BASE:1.1.1.2
	OPENBSD_3_0:1.1.1.2.0.2
	OPENBSD_3_0_BASE:1.1.1.2
	PERL_5_6_1:1.1.1.2
	OPENBSD_2_9:1.1.1.1.0.6
	OPENBSD_2_9_BASE:1.1.1.1
	OPENBSD_2_8:1.1.1.1.0.4
	OPENBSD_2_8_BASE:1.1.1.1
	OPENBSD_2_7:1.1.1.1.0.2
	OPENBSD_2_7_BASE:1.1.1.1
	PERL_5_6_0:1.1.1.1
	CPAN:1.1.1;
locks; strict;
comment	@# @;


1.2
date	2002.10.27.22.25.38;	author millert;	state dead;
branches;
next	1.1;

1.1
date	2000.04.06.16.10.55;	author millert;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	2000.04.06.16.10.55;	author millert;	state Exp;
branches;
next	1.1.1.2;

1.1.1.2
date	2001.05.24.18.25.57;	author millert;	state Exp;
branches;
next	;


desc
@@


1.2
log
@Resolve conflicts, remove old files, merge local changes
@
text
@Check default warnings

__END__
# default warnings should be displayed if you don't add anything
# optional shouldn't
my $a = oct "7777777777777777777777777777777777779" ;
EXPECT
Integer overflow in octal number at - line 3.
########
# no warnings should be displayed 
no warnings ;
my $a = oct "7777777777777777777777777777777777778" ;
EXPECT
########
# all warnings should be displayed 
use warnings ;
my $a = oct "7777777777777777777777777777777777778" ;
EXPECT
Integer overflow in octal number at - line 3.
Illegal octal digit '8' ignored at - line 3.
Octal number > 037777777777 non-portable at - line 3.
########
# check scope
use warnings ;
my $a = oct "7777777777777777777777777777777777778" ;
{
    no warnings ;
    my $a = oct "7777777777777777777777777777777777778" ;
}    
my $c = oct "7777777777777777777777777777777777778" ;
EXPECT
Integer overflow in octal number at - line 3.
Illegal octal digit '8' ignored at - line 3.
Octal number > 037777777777 non-portable at - line 3.
Integer overflow in octal number at - line 8.
Illegal octal digit '8' ignored at - line 8.
Octal number > 037777777777 non-portable at - line 8.
########
# all warnings should be displayed 
use warnings ;
my $a = oct "0xfffffffffffffffffg" ;
EXPECT
Integer overflow in hexadecimal number at - line 3.
Illegal hexadecimal digit 'g' ignored at - line 3.
Hexadecimal number > 0xffffffff non-portable at - line 3.
########
# all warnings should be displayed 
use warnings ;
my $a = oct "0b111111111111111111111111111111111111111111111111111111111111111112";
EXPECT
Integer overflow in binary number at - line 3.
Illegal binary digit '2' ignored at - line 3.
Binary number > 0b11111111111111111111111111111111 non-portable at - line 3.
@


1.1
log
@Initial revision
@
text
@@


1.1.1.1
log
@virgin perl 5.6.0
@
text
@@


1.1.1.2
log
@stock perl 5.6.1
@
text
@a53 68
########

# Check scope of pragma with eval
use warnings;
{
    no warnings ;
    eval '
	my $a = oct "0xfffffffffffffffffg" ;
    '; print STDERR $@@ ;
    my $a = oct "0xfffffffffffffffffg" ;
}
EXPECT

########

# Check scope of pragma with eval
use warnings;
{
    no warnings ;
    eval q[ 
        use warnings ;
	my $a = oct "0xfffffffffffffffffg" ;
    ]; print STDERR $@@;
    my $a = oct "0xfffffffffffffffffg" ;
}
EXPECT
Integer overflow in hexadecimal number at (eval 1) line 3.
Illegal hexadecimal digit 'g' ignored at (eval 1) line 3.
Hexadecimal number > 0xffffffff non-portable at (eval 1) line 3.
########

# Check scope of pragma with eval
no warnings;
{
    use warnings ;
    eval '
	my $a = oct "0xfffffffffffffffffg" ;
    '; print STDERR $@@ ;
}
EXPECT
Integer overflow in hexadecimal number at (eval 1) line 2.
Illegal hexadecimal digit 'g' ignored at (eval 1) line 2.
Hexadecimal number > 0xffffffff non-portable at (eval 1) line 2.
########

# Check scope of pragma with eval
no warnings;
{
    use warnings;
    eval '
        no warnings ;
	my $a = oct "0xfffffffffffffffffg" ;
    '; print STDERR $@@ ;
}
EXPECT

########

# Check scope of pragma with eval
no warnings;
{
    use warnings 'deprecated' ;
    eval '
	my $a = oct "0xfffffffffffffffffg" ;
    '; print STDERR $@@;
}
EXPECT

@

