head	1.2;
access;
symbols
	OPENBSD_3_2:1.1.1.2.0.6
	OPENBSD_3_2_BASE:1.1.1.2
	OPENBSD_3_1:1.1.1.2.0.4
	OPENBSD_3_1_BASE:1.1.1.2
	OPENBSD_3_0:1.1.1.2.0.2
	OPENBSD_3_0_BASE:1.1.1.2
	PERL_5_6_1:1.1.1.2
	OPENBSD_2_9:1.1.1.1.0.6
	OPENBSD_2_9_BASE:1.1.1.1
	OPENBSD_2_8:1.1.1.1.0.4
	OPENBSD_2_8_BASE:1.1.1.1
	OPENBSD_2_7:1.1.1.1.0.2
	OPENBSD_2_7_BASE:1.1.1.1
	PERL_5_6_0:1.1.1.1
	CPAN:1.1.1;
locks; strict;
comment	@# @;


1.2
date	2002.10.27.22.25.38;	author millert;	state dead;
branches;
next	1.1;

1.1
date	2000.04.06.16.10.55;	author millert;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	2000.04.06.16.10.55;	author millert;	state Exp;
branches;
next	1.1.1.2;

1.1.1.2
date	2001.05.24.18.25.56;	author millert;	state Exp;
branches;
next	;


desc
@@


1.2
log
@Resolve conflicts, remove old files, merge local changes
@
text
@Check anti-lint

__END__
-X
# nolint: check compile time $^W is zapped
BEGIN { $^W = 1 ;}
$a = $b = 1 ;
$a = 1 if $a EQ $b ;
close STDIN ; print STDIN "abc" ;
EXPECT
########
-X
# nolint: check runtime $^W is zapped
$^W = 1 ;
close STDIN ; print STDIN "abc" ;
EXPECT
########
-X
# nolint: check runtime $^W is zapped
{
  $^W = 1 ;
  close STDIN ; print STDIN "abc" ;
}
EXPECT
########
-X
# nolint: check "no warnings" is zapped
use warnings ;
$a = $b = 1 ;
$a = 1 if $a EQ $b ;
close STDIN ; print STDIN "abc" ;
EXPECT
########
-X
# nolint: check "no warnings" is zapped
{
  use warnings ;
  close STDIN ; print STDIN "abc" ;
}
EXPECT
########
-Xw
# nolint: check combination of -w and -X
{
  $^W = 1 ;
  close STDIN ; print STDIN "abc" ;
}
EXPECT
########
-X
--FILE-- abc.pm
use warnings 'deprecated' ;
my ($a, $b) = (0,0);
1 if $a EQ $b ;
1;
--FILE-- 
use warnings 'uninitialized' ;
use abc;
my $a ; chop $a ;
EXPECT
########
-X
--FILE-- abc
use warnings 'deprecated' ;
my ($a, $b) = (0,0);
1 if $a EQ $b ;
1;
--FILE-- 
use warnings 'uninitialized' ;
require "./abc";
my $a ; chop $a ;
EXPECT
########
-X
--FILE-- abc.pm
BEGIN {$^W = 1}
my ($a, $b) = (0,0);
1 if $a EQ $b ;
1;
--FILE-- 
$^W = 1 ;
use abc;
my $a ; chop $a ;
EXPECT
########
-X
--FILE-- abc
BEGIN {$^W = 1}
my ($a, $b) = (0,0);
1 if $a EQ $b ;
1;
--FILE-- 
$^W = 1 ;
require "./abc";
my $a ; chop $a ;
EXPECT
@


1.1
log
@Initial revision
@
text
@@


1.1.1.1
log
@virgin perl 5.6.0
@
text
@@


1.1.1.2
log
@stock perl 5.6.1
@
text
@a96 108
########
-X
# Check scope of pragma with eval
use warnings;
{
    no warnings ;
    eval '
        my $b ; chop $b ;
    '; print STDERR $@@ ;
    my $b ; chop $b ;
}
EXPECT

########
-X
# Check scope of pragma with eval
use warnings;
{
    no warnings ;
    eval q[ 
        use warnings 'uninitialized' ;
        my $b ; chop $b ;
    ]; print STDERR $@@;
    my $b ; chop $b ;
}
EXPECT

########
-X
# Check scope of pragma with eval
no warnings;
{
    use warnings 'uninitialized' ;
    eval '
        my $b ; chop $b ;
    '; print STDERR $@@ ;
    my $b ; chop $b ;
}
EXPECT

########
-X
# Check scope of pragma with eval
no warnings;
{
    use warnings 'uninitialized' ;
    eval '
        no warnings ;
        my $b ; chop $b ;
    '; print STDERR $@@ ;
    my $b ; chop $b ;
}
EXPECT

########
-X
# Check scope of pragma with eval
use warnings;
{
    no warnings ;
    eval '
        1 if $a EQ $b ;
    '; print STDERR $@@ ;
    1 if $a EQ $b ;
}
EXPECT

########
-X
# Check scope of pragma with eval
use warnings;
{
    no warnings ;
    eval q[ 
        use warnings 'deprecated' ;
        1 if $a EQ $b ;
    ]; print STDERR $@@;
    1 if $a EQ $b ;
}
EXPECT

########
-X
# Check scope of pragma with eval
no warnings;
{
    use warnings 'deprecated' ;
    eval '
        1 if $a EQ $b ;
    '; print STDERR $@@;
    1 if $a EQ $b ;
}
EXPECT

########
-X
# Check scope of pragma with eval
no warnings;
{
    use warnings 'deprecated' ;
    eval '
        no warnings ;
        1 if $a EQ $b ;
    '; print STDERR $@@;
    1 if $a EQ $b ;
}
EXPECT

@

