head	1.3;
access;
symbols
	OPENBSD_3_2:1.2.0.12
	OPENBSD_3_2_BASE:1.2
	OPENBSD_3_1:1.2.0.10
	OPENBSD_3_1_BASE:1.2
	OPENBSD_3_0:1.2.0.8
	OPENBSD_3_0_BASE:1.2
	PERL_5_6_1:1.1.1.2
	OPENBSD_2_9:1.2.0.6
	OPENBSD_2_9_BASE:1.2
	OPENBSD_2_8:1.2.0.4
	OPENBSD_2_8_BASE:1.2
	OPENBSD_2_7:1.2.0.2
	OPENBSD_2_7_BASE:1.2
	PERL_5_6_0:1.1.1.2
	OPENBSD_2_6:1.1.0.8
	OPENBSD_2_6_BASE:1.1
	PERL_500503:1.1.1.1
	CPAN:1.1.1
	OPENBSD_2_5:1.1.0.6
	OPENBSD_2_5_BASE:1.1
	OPENBSD_2_4:1.1.0.4
	OPENBSD_2_4_BASE:1.1
	OPENBSD_2_3:1.1.0.2
	OPENBSD_2_3_BASE:1.1;
locks; strict;
comment	@# @;


1.3
date	2002.10.27.22.25.38;	author millert;	state dead;
branches;
next	1.2;

1.2
date	2000.04.06.17.08.37;	author millert;	state Exp;
branches;
next	1.1;

1.1
date	97.11.30.08.05.53;	author millert;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	99.04.29.22.41.54;	author millert;	state Exp;
branches;
next	1.1.1.2;

1.1.1.2
date	2000.04.06.16.10.54;	author millert;	state Exp;
branches;
next	;


desc
@@


1.3
log
@Resolve conflicts, remove old files, merge local changes
@
text
@Check strict refs functionality

__END__

# no strict, should build & run ok.
my $fred ;
$b = "fred" ;
$a = $$b ;
$c = ${"def"} ;
$c = @@{"def"} ;
$c = %{"def"} ;
$c = *{"def"} ;
$c = \&{"def"} ;
$c = def->[0];
$c = def->{xyz};
EXPECT

########

# strict refs - error
use strict ;
my $fred ;
my $a = ${"fred"} ;
EXPECT
Can't use string ("fred") as a SCALAR ref while "strict refs" in use at - line 5.
########

# strict refs - error
use strict 'refs' ;
my $fred ;
my $a = ${"fred"} ;
EXPECT
Can't use string ("fred") as a SCALAR ref while "strict refs" in use at - line 5.
########

# strict refs - error
use strict 'refs' ;
my $fred ;
my $b = "fred" ;
my $a = $$b ;
EXPECT
Can't use string ("fred") as a SCALAR ref while "strict refs" in use at - line 6.
########

# strict refs - error
use strict 'refs' ;
my $b ;
my $a = $$b ;
EXPECT
Can't use an undefined value as a SCALAR reference at - line 5.
########

# strict refs - error
use strict 'refs' ;
my $b ;
my $a = @@$b ;
EXPECT
Can't use an undefined value as an ARRAY reference at - line 5.
########

# strict refs - error
use strict 'refs' ;
my $b ;
my $a = %$b ;
EXPECT
Can't use an undefined value as a HASH reference at - line 5.
########

# strict refs - error
use strict 'refs' ;
my $b ;
my $a = *$b ;
EXPECT
Can't use an undefined value as a symbol reference at - line 5.
########

# strict refs - error
use strict 'refs' ;
my $a = fred->[0] ;
EXPECT
Can't use bareword ("fred") as an ARRAY ref while "strict refs" in use at - line 4.
########

# strict refs - error
use strict 'refs' ;
my $a = fred->{barney} ;
EXPECT
Can't use bareword ("fred") as a HASH ref while "strict refs" in use at - line 4.
########

# strict refs - no error
use strict ;
no strict 'refs' ;
my $fred ;
my $b = "fred" ;
my $a = $$b ;
use strict 'refs' ;
EXPECT

########

# strict refs - no error
use strict qw(subs vars) ;
my $fred ;
my $b = "fred" ;
my $a = $$b ;
use strict 'refs' ;
EXPECT

########

# strict refs - no error
my $fred ;
my $b = "fred" ;
my $a = $$b ;
use strict 'refs' ;
EXPECT

########

# strict refs - no error
use strict 'refs' ;
my $fred ;
my $b = \$fred ;
my $a = $$b ;
EXPECT

########

# Check runtime scope of strict refs pragma
use strict 'refs';
my $fred ;
my $b = "fred" ;
{
    no strict ;
    my $a = $$b ;
}
my $a = $$b ;
EXPECT
Can't use string ("fred") as a SCALAR ref while "strict refs" in use at - line 10.
########

# Check runtime scope of strict refs pragma
no strict ;
my $fred ;
my $b = "fred" ;
{
    use strict 'refs' ;
    my $a = $$b ;
}
my $a = $$b ;
EXPECT
Can't use string ("fred") as a SCALAR ref while "strict refs" in use at - line 8.
########

# Check runtime scope of strict refs pragma
no strict ;
my $fred ;
my $b = "fred" ;
{
    use strict 'refs' ;
    $a = sub { my $c = $$b ; }
}
&$a ;
EXPECT
Can't use string ("fred") as a SCALAR ref while "strict refs" in use at - line 8.
########


--FILE-- abc
my $a = ${"Fred"} ;
1;
--FILE-- 
use strict 'refs' ;
require "./abc";
EXPECT

########

--FILE-- abc
use strict 'refs' ;
1;
--FILE-- 
require "./abc";
my $a = ${"Fred"} ;
EXPECT

########

--FILE-- abc
use strict 'refs' ;
my $a = ${"Fred"} ;
1;
--FILE-- 
${"Fred"} ;
require "./abc";
EXPECT
Can't use string ("Fred") as a SCALAR ref while "strict refs" in use at ./abc line 2.
Compilation failed in require at - line 2.
########

--FILE-- abc.pm
use strict 'refs' ;
my $a = ${"Fred"} ;
1;
--FILE-- 
my $a = ${"Fred"} ;
use abc;
EXPECT
Can't use string ("Fred") as a SCALAR ref while "strict refs" in use at abc.pm line 2.
Compilation failed in require at - line 2.
BEGIN failed--compilation aborted at - line 2.
########

# Check scope of pragma with eval
no strict ;
eval {
    my $a = ${"Fred"} ;
};
print STDERR $@@ ;
my $a = ${"Fred"} ;
EXPECT

########

# Check scope of pragma with eval
no strict ;
eval {
    use strict 'refs' ;
    my $a = ${"Fred"} ;
};
print STDERR $@@ ;
my $a = ${"Fred"} ;
EXPECT
Can't use string ("Fred") as a SCALAR ref while "strict refs" in use at - line 6.
########

# Check scope of pragma with eval
use strict 'refs' ;
eval {
    my $a = ${"Fred"} ;
};
print STDERR $@@ ;
EXPECT
Can't use string ("Fred") as a SCALAR ref while "strict refs" in use at - line 5.
########

# Check scope of pragma with eval
use strict 'refs' ;
eval {
    no strict ;
    my $a = ${"Fred"} ;
};
print STDERR $@@ ;
my $a = ${"Fred"} ;
EXPECT
Can't use string ("Fred") as a SCALAR ref while "strict refs" in use at - line 9.
########

# Check scope of pragma with eval
no strict ;
eval '
    my $a = ${"Fred"} ;
'; print STDERR $@@ ;
my $a = ${"Fred"} ;
EXPECT

########

# Check scope of pragma with eval
no strict ;
eval q[ 
    use strict 'refs' ;
    my $a = ${"Fred"} ;
]; print STDERR $@@;
EXPECT
Can't use string ("Fred") as a SCALAR ref while "strict refs" in use at (eval 1) line 3.
########

# Check scope of pragma with eval
use strict 'refs' ;
eval '
    my $a = ${"Fred"} ;
'; print STDERR $@@ ;
EXPECT
Can't use string ("Fred") as a SCALAR ref while "strict refs" in use at (eval 1) line 2.
########

# Check scope of pragma with eval
use strict 'refs' ;
eval '
    no strict ;
    my $a = ${"Fred"} ;
'; print STDERR $@@;
my $a = ${"Fred"} ;
EXPECT
Can't use string ("Fred") as a SCALAR ref while "strict refs" in use at - line 8.
@


1.2
log
@perl-5.6.0 + local changes
@
text
@@


1.1
log
@perl 5.004_04
@
text
@d199 1
d211 1
@


1.1.1.1
log
@perl5.005_03
@
text
@@


1.1.1.2
log
@virgin perl 5.6.0
@
text
@a198 1
Compilation failed in require at - line 2.
a209 1
Compilation failed in require at - line 2.
@


