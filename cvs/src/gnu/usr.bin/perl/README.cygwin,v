head	1.2;
access;
symbols
	OPENBSD_6_1:1.2.0.4
	OPENBSD_6_1_BASE:1.2
	OPENBSD_6_0:1.1.1.11.0.10
	OPENBSD_6_0_BASE:1.1.1.11
	OPENBSD_5_9:1.1.1.11.0.4
	OPENBSD_5_9_BASE:1.1.1.11
	OPENBSD_5_8:1.1.1.11.0.6
	OPENBSD_5_8_BASE:1.1.1.11
	PERL_5_20_2:1.1.1.11
	OPENBSD_5_7:1.1.1.11.0.2
	OPENBSD_5_7_BASE:1.1.1.11
	PERL_5_20_1:1.1.1.11
	OPENBSD_5_6:1.1.1.10.0.4
	OPENBSD_5_6_BASE:1.1.1.10
	PERL_5_18_2:1.1.1.10
	PERL:1.1.1
	OPENBSD_5_5:1.1.1.9.0.6
	OPENBSD_5_5_BASE:1.1.1.9
	OPENBSD_5_4:1.1.1.9.0.2
	OPENBSD_5_4_BASE:1.1.1.9
	PERL_5_16_3:1.1.1.9
	OPENBSD_5_3:1.1.1.8.0.10
	OPENBSD_5_3_BASE:1.1.1.8
	OPENBSD_5_2:1.1.1.8.0.8
	OPENBSD_5_2_BASE:1.1.1.8
	OPENBSD_5_1_BASE:1.1.1.8
	OPENBSD_5_1:1.1.1.8.0.6
	OPENBSD_5_0:1.1.1.8.0.4
	OPENBSD_5_0_BASE:1.1.1.8
	OPENBSD_4_9:1.1.1.8.0.2
	OPENBSD_4_9_BASE:1.1.1.8
	PERL_5_12_2:1.1.1.8
	OPENBSD_4_8:1.1.1.7.0.4
	OPENBSD_4_8_BASE:1.1.1.7
	OPENBSD_4_7:1.1.1.7.0.2
	OPENBSD_4_7_BASE:1.1.1.7
	PERL_5_10_1:1.1.1.7
	OPENBSD_4_6:1.1.1.6.0.6
	OPENBSD_4_6_BASE:1.1.1.6
	OPENBSD_4_5:1.1.1.6.0.2
	OPENBSD_4_5_BASE:1.1.1.6
	PERL_5_10_0:1.1.1.6
	OPENBSD_4_4:1.1.1.5.0.10
	OPENBSD_4_4_BASE:1.1.1.5
	OPENBSD_4_3:1.1.1.5.0.8
	OPENBSD_4_3_BASE:1.1.1.5
	OPENBSD_4_2:1.1.1.5.0.6
	OPENBSD_4_2_BASE:1.1.1.5
	OPENBSD_4_1:1.1.1.5.0.4
	OPENBSD_4_1_BASE:1.1.1.5
	OPENBSD_4_0:1.1.1.5.0.2
	OPENBSD_4_0_BASE:1.1.1.5
	PERL_5_8_8:1.1.1.5
	OPENBSD_3_9:1.1.1.4.0.10
	OPENBSD_3_9_BASE:1.1.1.4
	OPENBSD_3_8:1.1.1.4.0.8
	OPENBSD_3_8_BASE:1.1.1.4
	OPENBSD_3_7:1.1.1.4.0.6
	OPENBSD_3_7_BASE:1.1.1.4
	PERL_5_8_6:1.1.1.4
	OPENBSD_3_6:1.1.1.4.0.4
	OPENBSD_3_6_BASE:1.1.1.4
	PERL_5_8_5:1.1.1.4
	PERL_5_8_3:1.1.1.4
	OPENBSD_3_5:1.1.1.4.0.2
	OPENBSD_3_5_BASE:1.1.1.4
	PERL_5_8_2:1.1.1.4
	OPENBSD_3_4:1.1.1.3.0.4
	OPENBSD_3_4_BASE:1.1.1.3
	OPENBSD_3_3:1.1.1.3.0.2
	OPENBSD_3_3_BASE:1.1.1.3
	PERL_5_8_0:1.1.1.3
	OPENBSD_3_2:1.1.1.2.0.6
	OPENBSD_3_2_BASE:1.1.1.2
	OPENBSD_3_1:1.1.1.2.0.4
	OPENBSD_3_1_BASE:1.1.1.2
	OPENBSD_3_0:1.1.1.2.0.2
	OPENBSD_3_0_BASE:1.1.1.2
	PERL_5_6_1:1.1.1.2
	OPENBSD_2_9:1.1.1.1.0.6
	OPENBSD_2_9_BASE:1.1.1.1
	OPENBSD_2_8:1.1.1.1.0.4
	OPENBSD_2_8_BASE:1.1.1.1
	OPENBSD_2_7:1.1.1.1.0.2
	OPENBSD_2_7_BASE:1.1.1.1
	PERL_5_6_0:1.1.1.1
	CPAN:1.1.1;
locks; strict;
comment	@# @;
expand	@o@;


1.2
date	2017.02.05.00.31.52;	author afresh1;	state Exp;
branches;
next	1.1;
commitid	cxJ08BvJA9Pt2PTM;

1.1
date	2000.04.06.16.08.31;	author millert;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	2000.04.06.16.08.31;	author millert;	state Exp;
branches;
next	1.1.1.2;

1.1.1.2
date	2001.05.24.18.21.52;	author millert;	state Exp;
branches;
next	1.1.1.3;

1.1.1.3
date	2002.10.27.22.14.50;	author millert;	state Exp;
branches;
next	1.1.1.4;

1.1.1.4
date	2003.12.03.02.43.35;	author millert;	state Exp;
branches;
next	1.1.1.5;

1.1.1.5
date	2006.03.28.18.47.40;	author millert;	state Exp;
branches;
next	1.1.1.6;

1.1.1.6
date	2008.09.29.17.18.03;	author millert;	state Exp;
branches;
next	1.1.1.7;

1.1.1.7
date	2009.10.12.18.10.35;	author millert;	state Exp;
branches;
next	1.1.1.8;

1.1.1.8
date	2010.09.24.14.48.30;	author millert;	state Exp;
branches;
next	1.1.1.9;

1.1.1.9
date	2013.03.25.20.06.36;	author sthen;	state Exp;
branches;
next	1.1.1.10;

1.1.1.10
date	2014.03.24.14.58.47;	author afresh1;	state Exp;
branches;
next	1.1.1.11;

1.1.1.11
date	2014.11.17.20.52.38;	author afresh1;	state Exp;
branches;
next	;
commitid	B31cAbBIXiCqnL97;


desc
@@


1.2
log
@Fix merge issues, remove excess files - match perl-5.24.1 dist
@
text
@If you read this file _as_is_, just ignore the funny characters you
see. It is written in the POD format (see F<pod/perlpod.pod>) which is
specially designed to be readable as is.

=head1 NAME

perlcygwin - Perl for Cygwin

=head1 SYNOPSIS

This document will help you configure, make, test and install Perl
on Cygwin.  This document also describes features of Cygwin that will
affect how Perl behaves at runtime.

B<NOTE:> There are pre-built Perl packages available for Cygwin and a
version of Perl is provided in the normal Cygwin install.  If you do
not need to customize the configuration, consider using one of those
packages.


=head1 PREREQUISITES FOR COMPILING PERL ON CYGWIN

=head2 Cygwin = GNU+Cygnus+Windows (Don't leave UNIX without it)

The Cygwin tools are ports of the popular GNU development tools for Win32
platforms.  They run thanks to the Cygwin library which provides the UNIX
system calls and environment these programs expect.  More information
about this project can be found at:

L<http://www.cygwin.com/>

A recent net or commercial release of Cygwin is required.

At the time this document was last updated, Cygwin 1.7.16 was current.


=head2 Cygwin Configuration

While building Perl some changes may be necessary to your Cygwin setup so
that Perl builds cleanly.  These changes are B<not> required for normal
Perl usage.

B<NOTE:> The binaries that are built will run on all Win32 versions.
They do not depend on your host system (WinXP/Win2K/Win7) or your
Cygwin configuration (binary/text mounts, cvgserver).
The only dependencies come from hard-coded pathnames like F</usr/local>.
However, your host system and Cygwin configuration will affect Perl's
runtime behavior (see L</"TEST">).

=over 4

=item * C<PATH>

Set the C<PATH> environment variable so that Configure finds the Cygwin
versions of programs. Any not-needed Windows directories should be removed or
moved to the end of your C<PATH>.

=item * I<nroff>

If you do not have I<nroff> (which is part of the I<groff> package),
Configure will B<not> prompt you to install I<man> pages.

=back

=head1 CONFIGURE PERL ON CYGWIN

The default options gathered by Configure with the assistance of
F<hints/cygwin.sh> will build a Perl that supports dynamic loading
(which requires a shared F<cygperl5_16.dll>).

This will run Configure and keep a record:

  ./Configure 2>&1 | tee log.configure

If you are willing to accept all the defaults run Configure with B<-de>.
However, several useful customizations are available.

=head2 Stripping Perl Binaries on Cygwin

It is possible to strip the EXEs and DLLs created by the build process.
The resulting binaries will be significantly smaller.  If you want the
binaries to be stripped, you can either add a B<-s> option when Configure
prompts you,

  Any additional ld flags (NOT including libraries)? [none] -s
  Any special flags to pass to g++ to create a dynamically loaded
  library?
  [none] -s
  Any special flags to pass to gcc to use dynamic linking? [none] -s

or you can edit F<hints/cygwin.sh> and uncomment the relevant variables
near the end of the file.

=head2 Optional Libraries for Perl on Cygwin

Several Perl functions and modules depend on the existence of
some optional libraries.  Configure will find them if they are
installed in one of the directories listed as being used for library
searches.  Pre-built packages for most of these are available from
the Cygwin installer.

=over 4

=item * C<-lcrypt>

The crypt package distributed with Cygwin is a Linux compatible 56-bit
DES crypt port by Corinna Vinschen.

Alternatively, the crypt libraries in GNU libc have been ported to Cygwin.

As of libcrypt 1.3 (March 2016), you will need to install the
libcrypt-devel package for Configure to detect crypt().

=item * C<-lgdbm_compat> (C<use GDBM_File>)

GDBM is available for Cygwin.

NOTE: The GDBM library only works on NTFS partitions.

=item * C<-ldb> (C<use DB_File>)

BerkeleyDB is available for Cygwin.

NOTE: The BerkeleyDB library only completely works on NTFS partitions.

=item * C<cygserver> (C<use IPC::SysV>)

A port of SysV IPC is available for Cygwin.

NOTE: This has B<not> been extensively tested.  In particular,
C<d_semctl_semun> is undefined because it fails a Configure test
and on Win9x the I<shm*()> functions seem to hang.  It also creates
a compile time dependency because F<perl.h> includes F<<sys/ipc.h>>
and F<<sys/sem.h>> (which will be required in the future when compiling
CPAN modules). CURRENTLY NOT SUPPORTED!

=item * C<-lutil>

Included with the standard Cygwin netrelease is the inetutils package
which includes libutil.a.

=back

=head2 Configure-time Options for Perl on Cygwin

The F<INSTALL> document describes several Configure-time options.  Some of
these will work with Cygwin, others are not yet possible.  Also, some of
these are experimental.  You can either select an option when Configure
prompts you or you can define (undefine) symbols on the command line.

=over 4

=item * C<-Uusedl>

Undefining this symbol forces Perl to be compiled statically.

=item * C<-Dusemymalloc>

By default Perl does not use the C<malloc()> included with the Perl source,
because it was slower and not entirely thread-safe.  If you want to force
Perl to build with the old -Dusemymalloc define this.

=item * C<-Uuseperlio>

Undefining this symbol disables the PerlIO abstraction.  PerlIO is now the
default; it is not recommended to disable PerlIO.

=item * C<-Dusemultiplicity>

Multiplicity is required when embedding Perl in a C program and using
more than one interpreter instance.  This is only required when you build
a not-threaded perl with C<-Uuseithreads>.

=item * C<-Uuse64bitint>

By default Perl uses 64 bit integers.  If you want to use smaller 32 bit
integers, define this symbol.

=item * C<-Duselongdouble>

I<gcc> supports long doubles (12 bytes).  However, several additional
long double math functions are necessary to use them within Perl
(I<{atan2, cos, exp, floor, fmod, frexp, isnan, log, modf, pow, sin, sqrt}l,
strtold>).
These are B<not> yet available with newlib, the Cygwin libc.

=item * C<-Uuseithreads>

Define this symbol if you want not-threaded faster perl.

=item * C<-Duselargefiles>

Cygwin uses 64-bit integers for internal size and position calculations,
this will be correctly detected and defined by Configure.

=item * C<-Dmksymlinks>

Use this to build perl outside of the source tree.  Details can be
found in the F<INSTALL> document.  This is the recommended way to
build perl from sources.

=back

=head2 Suspicious Warnings on Cygwin

You may see some messages during Configure that seem suspicious.

=over 4

=item * Win9x and C<d_eofnblk>

Win9x does not correctly report C<EOF> with a non-blocking read on a
closed pipe.  You will see the following messages:

 But it also returns -1 to signal EOF, so be careful!
 WARNING: you can't distinguish between EOF and no data!

 *** WHOA THERE!!! ***
     The recommended value for $d_eofnblk on this machine was
     "define"!
     Keep the recommended value? [y]

At least for consistency with WinNT, you should keep the recommended
value.

=item * Compiler/Preprocessor defines

The following error occurs because of the Cygwin C<#define> of
C<_LONG_DOUBLE>:

  Guessing which symbols your C compiler and preprocessor define...
  try.c:<line#>: missing binary operator

This failure does not seem to cause any problems.  With older gcc
versions, "parse error" is reported instead of "missing binary
operator".

=back

=head1 MAKE ON CYGWIN

Simply run I<make> and wait:

  make 2>&1 | tee log.make

=head1 TEST ON CYGWIN

There are two steps to running the test suite:

  make test 2>&1 | tee log.make-test

  cd t; ./perl harness 2>&1 | tee ../log.harness

The same tests are run both times, but more information is provided when
running as C<./perl harness>.

Test results vary depending on your host system and your Cygwin
configuration.  If a test can pass in some Cygwin setup, it is always
attempted and explainable test failures are documented.  It is possible
for Perl to pass all the tests, but it is more likely that some tests
will fail for one of the reasons listed below.

=head2 File Permissions on Cygwin

UNIX file permissions are based on sets of mode bits for
{read,write,execute} for each {user,group,other}.  By default Cygwin
only tracks the Win32 read-only attribute represented as the UNIX file
user write bit (files are always readable, files are executable if they
have a F<.{com,bat,exe}> extension or begin with C<#!>, directories are
always readable and executable).  On WinNT with the I<ntea> C<CYGWIN>
setting, the additional mode bits are stored as extended file attributes.
On WinNT with the default I<ntsec> C<CYGWIN> setting, permissions use the
standard WinNT security descriptors and access control lists. Without one of
these options, these tests will fail (listing not updated yet):

  Failed Test           List of failed
  ------------------------------------
  io/fs.t               5, 7, 9-10
  lib/anydbm.t          2
  lib/db-btree.t        20
  lib/db-hash.t         16
  lib/db-recno.t        18
  lib/gdbm.t            2
  lib/ndbm.t            2
  lib/odbm.t            2
  lib/sdbm.t            2
  op/stat.t             9, 20 (.tmp not an executable extension)

=head2 NDBM_File and ODBM_File do not work on FAT filesystems

Do not use NDBM_File or ODBM_File on FAT filesystem.  They can be
built on a FAT filesystem, but many tests will fail:

 ../ext/NDBM_File/ndbm.t       13  3328    71   59  83.10%  1-2 4 16-71
 ../ext/ODBM_File/odbm.t      255 65280    ??   ??       %  ??
 ../lib/AnyDBM_File.t           2   512    12    2  16.67%  1 4
 ../lib/Memoize/t/errors.t      0   139    11    5  45.45%  7-11
 ../lib/Memoize/t/tie_ndbm.t   13  3328     4    4 100.00%  1-4
 run/fresh_perl.t                          97    1   1.03%  91

If you intend to run only on FAT (or if using AnyDBM_File on FAT),
run Configure with the -Ui_ndbm and -Ui_dbm options to prevent
NDBM_File and ODBM_File being built.

With NTFS (and no CYGWIN=nontsec), there should be no problems even if
perl was built on FAT.

=head2 C<fork()> failures in io_* tests

A C<fork()> failure may result in the following tests failing:

  ext/IO/lib/IO/t/io_multihomed.t
  ext/IO/lib/IO/t/io_sock.t
  ext/IO/lib/IO/t/io_unix.t

See comment on fork in L</Miscellaneous> below.

=head1 Specific features of the Cygwin port

=head2 Script Portability on Cygwin

Cygwin does an outstanding job of providing UNIX-like semantics on top of
Win32 systems.  However, in addition to the items noted above, there are
some differences that you should know about.  This is a very brief guide
to portability, more information can be found in the Cygwin documentation.

=over 4

=item * Pathnames

Cygwin pathnames are separated by forward (F</>) slashes, Universal
Naming Codes (F<//UNC>) are also supported Since cygwin-1.7 non-POSIX
pathnames are discouraged.  Names may contain all printable
characters.

File names are case insensitive, but case preserving.  A pathname that
contains a backslash or drive letter is a Win32 pathname, and not
subject to the translations applied to POSIX style pathnames, but
cygwin will warn you, so better convert them to POSIX.

For conversion we have C<Cygwin::win_to_posix_path()> and
C<Cygwin::posix_to_win_path()>.

Since cygwin-1.7 pathnames are UTF-8 encoded.

=item * Text/Binary

Since cygwin-1.7 textmounts are deprecated and strongly discouraged.

When a file is opened it is in either text or binary mode.  In text mode
a file is subject to CR/LF/Ctrl-Z translations.  With Cygwin, the default
mode for an C<open()> is determined by the mode of the mount that underlies
the file. See L</Cygwin::is_binmount>(). Perl provides a C<binmode()> function
to set binary mode on files that otherwise would be treated as text.
C<sysopen()> with the C<O_TEXT> flag sets text mode on files that otherwise
would be treated as binary:

    sysopen(FOO, "bar", O_WRONLY|O_CREAT|O_TEXT)

C<lseek()>, C<tell()> and C<sysseek()> only work with files opened in binary
mode.

The text/binary issue is covered at length in the Cygwin documentation.

=item * PerlIO

PerlIO overrides the default Cygwin Text/Binary behaviour.  A file will
always be treated as binary, regardless of the mode of the mount it lives
on, just like it is in UNIX.  So CR/LF translation needs to be requested in
either the C<open()> call like this:

  open(FH, ">:crlf", "out.txt");

which will do conversion from LF to CR/LF on the output, or in the
environment settings (add this to your .bashrc):

  export PERLIO=crlf

which will pull in the crlf PerlIO layer which does LF -> CRLF conversion
on every output generated by perl.

=item * F<.exe>

The Cygwin C<stat()>, C<lstat()> and C<readlink()> functions make the F<.exe>
extension transparent by looking for F<foo.exe> when you ask for F<foo>
(unless a F<foo> also exists).  Cygwin does not require a F<.exe>
extension, but I<gcc> adds it automatically when building a program.
However, when accessing an executable as a normal file (e.g., I<cp>
in a makefile) the F<.exe> is not transparent.  The I<install> program
included with Cygwin automatically appends a F<.exe> when necessary.

=item * Cygwin vs. Windows process ids

Cygwin processes have their own pid, which is different from the
underlying windows pid.  Most posix compliant Proc functions expect
the cygwin pid, but several Win32::Process functions expect the
winpid. E.g. C<$$> is the cygwin pid of F</usr/bin/perl>, which is not
the winpid.  Use C<Cygwin::pid_to_winpid()> and C<Cygwin::winpid_to_pid()>
to translate between them.

=item * Cygwin vs. Windows errors

Under Cygwin, $^E is the same as $!.  When using L<Win32 API Functions|Win32>,
use C<Win32::GetLastError()> to get the last Windows error.

=item * rebase errors on fork or system

Using C<fork()> or C<system()> out to another perl after loading multiple dlls
may result on a DLL baseaddress conflict. The internal cygwin error
looks like like the following:

 0 [main] perl 8916 child_info_fork::abort: data segment start:
 parent (0xC1A000) != child(0xA6A000)

or:

 183 [main] perl 3588 C:\cygwin\bin\perl.exe: *** fatal error -
 unable to remap C:\cygwin\bin\cygsvn_subr-1-0.dll to same address
 as parent(0x6FB30000) != 0x6FE60000 46 [main] perl 3488 fork: child
 3588 - died waiting for dll loading, errno11

See L<http://cygwin.com/faq/faq-nochunks.html#faq.using.fixing-fork-failures>
It helps if not too many DLLs are loaded in memory so the available address space is larger,
e.g. stopping the MS Internet Explorer might help.

Use the perlrebase or rebase utilities to resolve the conflicting dll addresses.
The rebase package is included in the Cygwin setup. Use F<setup.exe>
from L<http://www.cygwin.com/setup.exe> to install it.

1. kill all perl processes and run C<perlrebase> or

2. kill all cygwin processes and services, start dash from cmd.exe and run C<rebaseall>.

=item * C<chown()>

On WinNT C<chown()> can change a file's user and group IDs.  On Win9x C<chown()>
is a no-op, although this is appropriate since there is no security model.

=item * Miscellaneous

File locking using the C<F_GETLK> command to C<fcntl()> is a stub that
returns C<ENOSYS>.

Win9x can not C<rename()> an open file (although WinNT can).

The Cygwin C<chroot()> implementation has holes (it can not restrict file
access by native Win32 programs).

Inplace editing C<perl -i> of files doesn't work without doing a backup
of the file being edited C<perl -i.bak> because of windowish restrictions,
therefore Perl adds the suffix C<.bak> automatically if you use C<perl -i>
without specifying a backup extension.

=back

=head2 Prebuilt methods:

=over 4

=item C<Cwd::cwd>

Returns the current working directory.

=item C<Cygwin::pid_to_winpid>

Translates a cygwin pid to the corresponding Windows pid (which may or
may not be the same).

=item C<Cygwin::winpid_to_pid>

Translates a Windows pid to the corresponding cygwin pid (if any).

=item C<Cygwin::win_to_posix_path>

Translates a Windows path to the corresponding cygwin path respecting
the current mount points. With a second non-null argument returns an
absolute path. Double-byte characters will not be translated.

=item C<Cygwin::posix_to_win_path>

Translates a cygwin path to the corresponding cygwin path respecting
the current mount points. With a second non-null argument returns an
absolute path. Double-byte characters will not be translated.

=item C<Cygwin::mount_table()>

Returns an array of [mnt_dir, mnt_fsname, mnt_type, mnt_opts].

  perl -e 'for $i (Cygwin::mount_table) {print join(" ",@@$i),"\n";}'
  /bin c:\cygwin\bin system binmode,cygexec
  /usr/bin c:\cygwin\bin system binmode
  /usr/lib c:\cygwin\lib system binmode
  / c:\cygwin system binmode
  /cygdrive/c c: system binmode,noumount
  /cygdrive/d d: system binmode,noumount
  /cygdrive/e e: system binmode,noumount

=item C<Cygwin::mount_flags>

Returns the mount type and flags for a specified mount point.
A comma-separated string of mntent->mnt_type (always
"system" or "user"), then the mntent->mnt_opts, where
the first is always "binmode" or "textmode".

  system|user,binmode|textmode,exec,cygexec,cygdrive,mixed,
  notexec,managed,nosuid,devfs,proc,noumount

If the argument is "/cygdrive", then just the volume mount settings,
and the cygdrive mount prefix are returned.

User mounts override system mounts.

  $ perl -e 'print Cygwin::mount_flags "/usr/bin"'
  system,binmode,cygexec
  $ perl -e 'print Cygwin::mount_flags "/cygdrive"'
  binmode,cygdrive,/cygdrive

=item C<Cygwin::is_binmount>

Returns true if the given cygwin path is binary mounted, false if the
path is mounted in textmode.

=item C<Cygwin::sync_winenv>

Cygwin does not initialize all original Win32 environment variables.
See the bottom of this page L<http://cygwin.com/cygwin-ug-net/setup-env.html>
for "Restricted Win32 environment".

Certain Win32 programs called from cygwin programs might need some environment
variable, such as e.g. ADODB needs %COMMONPROGRAMFILES%.
Call Cygwin::sync_winenv() to copy all Win32 environment variables to your
process and note that cygwin will warn on every encounter of non-POSIX paths.

=back

=head1 INSTALL PERL ON CYGWIN

This will install Perl, including I<man> pages.

  make install 2>&1 | tee log.make-install

NOTE: If C<STDERR> is redirected C<make install> will B<not> prompt
you to install I<perl> into F</usr/bin>.

You may need to be I<Administrator> to run C<make install>.  If you
are not, you must have write access to the directories in question.

Information on installing the Perl documentation in HTML format can be
found in the F<INSTALL> document.

=head1 MANIFEST ON CYGWIN

These are the files in the Perl release that contain references to Cygwin.
These very brief notes attempt to explain the reason for all conditional
code.  Hopefully, keeping this up to date will allow the Cygwin port to
be kept as clean as possible.

=over 4

=item Documentation

 INSTALL README.cygwin README.win32 MANIFEST
 pod/perl.pod pod/perlport.pod pod/perlfaq3.pod
 pod/perldelta.pod pod/perl5004delta.pod pod/perl56delta.pod
 pod/perl561delta.pod pod/perl570delta.pod pod/perl572delta.pod
 pod/perl573delta.pod pod/perl58delta.pod pod/perl581delta.pod
 pod/perl590delta.pod pod/perlhist.pod pod/perlmodlib.pod
 pod/perltoc.pod Porting/Glossary pod/perlgit.pod
 Porting/checkAUTHORS.pl
 dist/Cwd/Changes ext/Compress-Raw-Zlib/Changes
 dist/Time-HiRes/Changes
 ext/Compress-Raw-Zlib/README ext/Compress-Zlib/Changes
 ext/DB_File/Changes ext/Encode/Changes ext/Sys-Syslog/Changes
 ext/Win32API-File/Changes
 lib/ExtUtils/CBuilder/Changes lib/ExtUtils/Changes
 lib/ExtUtils/NOTES lib/ExtUtils/PATCHING lib/ExtUtils/README
 lib/Net/Ping/Changes lib/Test/Harness/Changes
 lib/Term/ANSIColor/ChangeLog lib/Term/ANSIColor/README
 README.symbian symbian/TODO

=item Build, Configure, Make, Install

 cygwin/Makefile.SHs
 ext/IPC/SysV/hints/cygwin.pl
 ext/NDBM_File/hints/cygwin.pl
 ext/ODBM_File/hints/cygwin.pl
 hints/cygwin.sh
 Configure             - help finding hints from uname,
                         shared libperl required for dynamic loading
 Makefile.SH Cross/Makefile-cross-SH
                       - linklibperl
 Porting/patchls       - cygwin in port list
 installman            - man pages with :: translated to .
 installperl           - install dll, install to 'pods'
 makedepend.SH         - uwinfix
 regen_lib.pl          - file permissions

 NetWare/Makefile
 plan9/mkfile
 symbian/sanity.pl symbian/sisify.pl
 hints/uwin.sh
 vms/descrip_mms.template
 win32/Makefile win32/makefile.mk

=item Tests

 t/io/fs.t             - no file mode checks if not ntsec
                         skip rename() check when not
                         check_case:relaxed
 t/io/tell.t           - binmode
 t/lib/cygwin.t        - builtin cygwin function tests
 t/op/groups.t         - basegroup has ID = 0
 t/op/magic.t          - $^X/symlink WORKAROUND, s/.exe//
 t/op/stat.t           - no /dev, skip Win32 ftCreationTime quirk
                         (cache manager sometimes preserves ctime of
                         file previously created and deleted), no -u
                         (setuid)
 t/op/taint.t          - can't use empty path under Cygwin Perl
 t/op/time.t           - no tzset()

=item Compiled Perl Source

 EXTERN.h              - __declspec(dllimport)
 XSUB.h                - __declspec(dllexport)
 cygwin/cygwin.c       - os_extras (getcwd, spawn, and several
                         Cygwin:: functions)
 perl.c                - os_extras, -i.bak
 perl.h                - binmode
 doio.c                - win9x can not rename a file when it is open
 pp_sys.c              - do not define h_errno, init
                         _pwent_struct.pw_comment
 util.c                - use setenv
 util.h                - PERL_FILE_IS_ABSOLUTE macro
 pp.c                  - Comment about Posix vs IEEE math under
                         Cygwin
 perlio.c              - CR/LF mode
 perliol.c             - Comment about EXTCONST under Cygwin

=item Compiled Module Source

 ext/Compress-Raw-Zlib/Makefile.PL
                       - Can't install via CPAN shell under Cygwin
 ext/Compress-Raw-Zlib/zlib-src/zutil.h
                       - Cygwin is Unix-like and has vsnprintf
 ext/Errno/Errno_pm.PL - Special handling for Win32 Perl under
                         Cygwin
 ext/POSIX/POSIX.xs    - tzname defined externally
 ext/SDBM_File/sdbm/pair.c
                       - EXTCONST needs to be redefined from
                         EXTERN.h
 ext/SDBM_File/sdbm/sdbm.c
                       - binary open
 ext/Sys/Syslog/Syslog.xs
                       - Cygwin has syslog.h
 ext/Sys/Syslog/win32/compile.pl
                       - Convert paths to Windows paths
 ext/Time-HiRes/HiRes.xs
                       - Various timers not available
 ext/Time-HiRes/Makefile.PL
                       - Find w32api/windows.h
 ext/Win32/Makefile.PL - Use various libraries under Cygwin
 ext/Win32/Win32.xs    - Child dir and child env under Cygwin
 ext/Win32API-File/File.xs
                       - _open_osfhandle not implemented under
                         Cygwin
 ext/Win32CORE/Win32CORE.c
                       - __declspec(dllexport)

=item Perl Modules/Scripts

 ext/B/t/OptreeCheck.pm - Comment about stderr/stdout order under
                          Cygwin
 ext/Digest-SHA/bin/shasum
                       - Use binary mode under Cygwin
 ext/Sys/Syslog/win32/Win32.pm
                       - Convert paths to Windows paths
 ext/Time-HiRes/HiRes.pm
                       - Comment about various timers not available
 ext/Win32API-File/File.pm
                       - _open_osfhandle not implemented under
                         Cygwin
 ext/Win32CORE/Win32CORE.pm
                       - History of Win32CORE under Cygwin
 lib/Cwd.pm            - hook to internal Cwd::cwd
 lib/ExtUtils/CBuilder/Platform/cygwin.pm
                       - use gcc for ld, and link to libperl.dll.a
 lib/ExtUtils/CBuilder.pm
                       - Cygwin is Unix-like
 lib/ExtUtils/Install.pm - Install and rename issues under Cygwin
 lib/ExtUtils/MM.pm    - OS classifications
 lib/ExtUtils/MM_Any.pm - Example for Cygwin
 lib/ExtUtils/MakeMaker.pm
                       - require MM_Cygwin.pm
 lib/ExtUtils/MM_Cygwin.pm
                       - canonpath, cflags, manifypods, perl_archive
 lib/File/Fetch.pm     - Comment about quotes using a Cygwin example
 lib/File/Find.pm      - on remote drives stat() always sets
                         st_nlink to 1
 lib/File/Spec/Cygwin.pm - case_tolerant
 lib/File/Spec/Unix.pm - preserve //unc
 lib/File/Spec/Win32.pm - References a message on cygwin.com
 lib/File/Spec.pm      - Pulls in lib/File/Spec/Cygwin.pm
 lib/File/Temp.pm      - no directory sticky bit
 lib/Module/CoreList.pm - List of all module files and versions
 lib/Net/Domain.pm     - No domainname command under Cygwin
 lib/Net/Netrc.pm      - Bypass using stat() under Cygwin
 lib/Net/Ping.pm       - ECONREFUSED is EAGAIN under Cygwin
 lib/Pod/Find.pm       - Set 'pods' dir
 lib/Pod/Perldoc/ToMan.pm - '-c' switch for pod2man
 lib/Pod/Perldoc.pm    - Use 'less' pager, and use .exe extension
 lib/Term/ANSIColor.pm - Cygwin terminal info
 lib/perl5db.pl        - use stdin not /dev/tty
 utils/perlbug.PL      - Add CYGWIN environment variable to report

=item Perl Module Tests

 dist/Cwd/t/cwd.t
 ext/Compress-Zlib/t/14gzopen.t
 ext/DB_File/t/db-btree.t
 ext/DB_File/t/db-hash.t
 ext/DB_File/t/db-recno.t
 ext/DynaLoader/t/DynaLoader.t
 ext/File-Glob/t/basic.t
 ext/GDBM_File/t/gdbm.t
 ext/POSIX/t/sysconf.t
 ext/POSIX/t/time.t
 ext/SDBM_File/t/sdbm.t
 ext/Sys/Syslog/t/syslog.t
 ext/Time-HiRes/t/HiRes.t
 ext/Win32/t/Unicode.t
 ext/Win32API-File/t/file.t
 ext/Win32CORE/t/win32core.t
 lib/AnyDBM_File.t
 lib/Archive/Extract/t/01_Archive-Extract.t
 lib/Archive/Tar/t/02_methods.t
 lib/ExtUtils/t/Embed.t
 lib/ExtUtils/t/eu_command.t
 lib/ExtUtils/t/MM_Cygwin.t
 lib/ExtUtils/t/MM_Unix.t
 lib/File/Compare.t
 lib/File/Copy.t
 lib/File/Find/t/find.t
 lib/File/Path.t
 lib/File/Spec/t/crossplatform.t
 lib/File/Spec/t/Spec.t
 lib/Net/hostent.t
 lib/Net/Ping/t/110_icmp_inst.t
 lib/Net/Ping/t/500_ping_icmp.t
 lib/Net/t/netrc.t
 lib/Pod/Simple/t/perlcyg.pod
 lib/Pod/Simple/t/perlcygo.txt
 lib/Pod/Simple/t/perlfaq.pod
 lib/Pod/Simple/t/perlfaqo.txt
 lib/User/grent.t
 lib/User/pwent.t

=back

=head1 BUGS ON CYGWIN

Support for swapping real and effective user and group IDs is incomplete.
On WinNT Cygwin provides C<setuid()>, C<seteuid()>, C<setgid()> and C<setegid()>.
However, additional Cygwin calls for manipulating WinNT access tokens
and security contexts are required.

=head1 AUTHORS

Charles Wilson <cwilson@@ece.gatech.edu>,
Eric Fifer <egf7@@columbia.edu>,
alexander smishlajev <als@@turnhere.com>,
Steven Morlock <newspost@@morlock.net>,
Sebastien Barre <Sebastien.Barre@@utc.fr>,
Teun Burgers <burgers@@ecn.nl>,
Gerrit P. Haase <gp@@familiehaase.de>,
Reini Urban <rurban@@cpan.org>,
Jan Dubois <jand@@activestate.com>,
Jerry D. Hedden <jdhedden@@cpan.org>.

=head1 HISTORY

Last updated: 2012-02-08
@


1.1
log
@Initial revision
@
text
@d2 1
a2 1
see. It is written in the POD format (see pod/perlpod.pod) which is
d7 1
a7 1
README.cygwin - Perl for Cygwin
d16 3
a18 2
version of Perl is provided on the Cygwin CD.  If you have no need to
customize the configuration, consider using one of these packages:
a19 1
  http://cygutils.netpedia.net/
d21 1
a21 1
=head1 PREREQUISITES
d30 1
a30 1
  http://sourceware.cygnus.com/cygwin/
d34 1
a34 12
At the time this document was written, the port required recent
development snapshots that were expected to stabilize early in 2000 and
be released to the net as B21 and commercially as v1.1.

B<NOTE:> At this point, minimal effort has been made to provide
compatibility with old (beta) Cygwin releases.  The focus has been to
provide a high quality release and not worry about working around old
Cygwin bugs.  If you wish to use Perl with Cygwin B20.1 or earlier,
consider using either perl5.005_03 or perl5.005_62, which are available
in source and binary form at C<http://cygutils.netpedia.net/> or on the
Cygwin CD.  If there is significant demand, a patch kit can be developed
to port back to earlier Cygwin versions.
a35 8
=head2 Compiler

A recent net or commercial release of I<gcc> is required.

At the time this document was written, I<gcc-2.95.2> was current and
could be downloaded from:

  ftp://ftp.xraylith.wisc.edu/pub/khan/gnu-win32/cygwin/gcc-2.95.2/
d44 5
a48 9
They do not depend on your host system (Win9x, WinNT) or your Cygwin
configuration (I<ntea>, I<ntsec>, binary/text mounts).  The only
dependencies come from hardcoded pathnames like C</usr/local>.  However,
your host system and Cygwin configuration will affect Perl's runtime
behavior (see L</"TEST">).  Some regression tests may fail in different
ways depending on your setup.  For now, the test suite does not skip
tests that do not make sense given a particular setup.  If a test can
pass in some Cygwin setup, it is left in and explainable test failures
are documented.
d55 1
a55 1
versions of programs.  Any Windows directories should be removed or
a57 13
=item * F</bin/cat.exe>

There should be an instance of I<cat> in F</bin> (or F</usr/bin>).
Configure tests C<#!/bin/cat> and if it is not found, you will see
the error:

  Configure: ./try: No such file or directory

=item * F</usr/bin>

If you do not have a F</usr/bin> directory, Configure will B<not> prompt
you to install I<perl> into F</usr/bin>.

d61 1
a61 16
Configure will B<not> prompt you to install man pages.

=item * Permissions

On WinNT with either the I<ntea> or I<ntsec> C<CYGWIN> settings, directory
and file permissions may not be set correctly.  Since the build process
creates files and directories, to be safe you may want to run a `C<chmod
-R +w *>' on the entire Perl source tree.

Also, it is a well known WinNT "feature" that files created by a login
that is a member of the I<Administrators> group will be owned by the
I<Administrators> group.  Depending on your umask, you may find that you
can not write to files that you just created (because you are no longer
the owner).  When using the I<ntsec> C<CYGWIN> setting, this is not an
issue because it "corrects" the ownership to what you would expect on
a UNIX system.
d65 1
a65 1
=head1 CONFIGURE
d69 1
a69 1
(which requires a shared F<libperl.dll>).
d75 1
a75 1
If you are willing to accept all the defaults add a B<-d> option.
d78 1
a78 1
=head2 Strip Binaries
d86 3
a89 2
  Any special flags to pass to ld2 to create a dynamically loaded library?
  [none] -s
d94 1
a94 1
=head2 Optional Libraries
d99 2
a100 2
searches.  Pre-built packages for most of these are available at
C<http://cygutils.netpedia.net/>.
d106 2
a107 1
The crypt libraries in GNU libc have been ported to Cygwin.
d109 1
a109 1
The DES based Ultra Fast Crypt port was done by Alexey Truhan:
d111 2
a112 1
  http://dome.weeg.uiowa.edu/pub/domestic/sos/cw32crypt-dist-0.tgz
d114 1
a114 2
NOTE: There are various export restrictions on DES implementations,
see the glibc README for more details.
d116 1
a116 1
The MD5 port was done by Andy Piper:
d118 1
a118 1
  http://dome.weeg.uiowa.edu/pub/domestic/sos/libcrypt.tgz
d120 1
a120 1
More information can also be found at:
d122 1
a122 1
  http://miracle.geol.msu.ru/sos/
d124 1
a124 1
=item * C<-lgdbm> (C<use GDBM_File>)
d126 1
a126 3
GDBM is available for Cygwin.  GDBM's ndbm/dbm compatibility feature
also makes C<NDBM_File> and C<ODBM_File> possible (although they add
little extra value).
d128 1
a128 1
=item * C<-ldb> (C<use DB_File>)
d130 6
a135 2
BerkeleyDB is available for Cygwin.  Some details can be found in
F<ext/DB_File/DB_File.pm>.
d137 1
a137 1
=item * C<-lcygipc> (C<use IPC::SysV>)
d139 2
a140 5
A port of SysV IPC is available for Cygwin.

NOTE: This has B<not> been extensively tested.  In particular,
C<d_semctl_semun> is undefined because it fails a configure test and on
Win9x the shm*() functions seem to hang.
d144 1
a144 1
=head2 Configure-time Options
d157 5
a161 1
=item * C<-Uusemymalloc>
d163 4
a166 2
By default Perl uses the malloc() included with the Perl source.  If you
want to force Perl to build with the system malloc() undefine this symbol.
d171 2
a172 3
more than one interpreter instance.  This works with the Cygwin port.

=item * C<-Duseperlio>
d174 1
a174 1
The PerlIO abstraction works with the Cygwin port.
d176 2
a177 5
=item * C<-Duse64bitint>

I<gcc> supports 64-bit integers.  However, several additional long long
functions are necessary to use them within Perl (I<{strtol,strtoul}l>).
These are B<not> yet available with Cygwin.
d183 3
a185 2
(I<{atan2,cos,exp,floor,fmod,frexp,log,modf,pow,sin,sqrt}l,strtold>).
These are B<not> yet available with Cygwin.
d187 1
a187 1
=item * C<-Dusethreads>
d189 1
a189 1
POSIX threads are B<not> yet implemented in Cygwin.
d193 8
a200 2
Although Win32 supports large files, Cygwin currently uses 32-bit integers
for internal size and position calculations.
d204 1
a204 1
=head2 Suspicious Warnings
d210 1
a210 26
=item * Whoa There

Cygwin does not yet implement chroot(), setegid() or seteuid()
functionality, but has stub functions that return C<ENOSYS>.  You will
see a message when Configure detects that its guess conflicts with the
hint file.

  *** WHOA THERE!!! ***
      The recommended value for $d_chroot on this machine was "undef"!
      Keep the recommended value? [y]

You should keep the recommended value.

=item * dlsym

I<ld2> is needed to build dynamic libraries, but it does not exist
when dlsym() checking occurs (it is not created until `C<make>' runs).
You will see the following message:

  Checking whether your dlsym() needs a leading underscore ...
  I can't compile and run the test program.
  I'm guessing that dlsym doesn't need a leading underscore.

Since the guess is correct, this is not a problem.

=item * Win9x and d_eofnblk
d215 2
a216 2
  But it also returns -1 to signal EOF, so be careful!
  WARNING: you can't distinguish between EOF and no data!
d218 4
a221 3
  *** WHOA THERE!!! ***
      The recommended value for $d_eofnblk on this machine was "define"!
      Keep the recommended value? [y]
a225 8
=item * Checking how std your stdio is...

Configure reports:

  Your stdio doesn't appear very std.

This is correct.

d232 1
a232 1
  try.c:3847: parse error
d234 3
a236 1
This failure does not seem to cause any problems.
d240 1
a240 1
=head1 MAKE
d242 1
a242 1
Simply run make and wait:
d246 1
a246 23
=head2 Warnings

Warnings like these are normal:

  warning: overriding commands for target <file>
  warning: ignoring old commands for target <file>

  Warning: no export definition file provided
  dllwrap will create one, but may not be what you want

=head2 ld2

During `C<make>', I<ld2> will be created and installed in your $installbin
directory (where you said to put public executables).  It does not
wait until the `C<make install>' process to install the I<ld2> script,
this is because the remainder of the `C<make>' refers to I<ld2> without
fully specifying its path and does this from multiple subdirectories.
The assumption is that $installbin is in your current C<PATH>.  If this
is not the case or if you do not have an I<install> program, `C<make>'
will fail at some point.  If this happens, just manually copy I<ld2>
from the source directory to someplace in your C<PATH>.

=head1 TEST
d252 1
a252 1
  cd t;./perl harness 2>&1 | tee ../log.harness
d255 1
a255 1
running as `C<./perl harness>'.
d258 4
a261 2
configuration.  It is possible that Cygwin will pass all the tests,
but it is more likely that some tests will fail for one of these reasons.
d263 1
a263 1
=head2 File Permissions
d266 9
a274 9
{read,write,execute} for each {user,group,other}.  By default Cygwin only
tracks the Win32 readonly attribute represented as the UNIX file user
write bit (files are always readable, files are executable if they have
a F<.{com,bat,exe}> extension or begin with C<#!>, directories are always
readable and executable).  On WinNT with the I<ntea> C<CYGWIN> setting,
the remaining mode bits are stored as extended attributes.  On WinNT
with the I<ntsec> C<CYGWIN> setting, permissions use the standard WinNT
security descriptors and access control lists.  Without one of these
options, these tests will fail:
d289 1
a289 11
=head2 Hard Links

FAT partitions do not support hard links (whereas NTFS does), in which
case Cygwin implements link() by copying the file.  These tests will fail:

  Failed Test           List of failed
  ------------------------------------
  io/fs.t               4
  op/stat.t             3

=head2 Filetime Granularity
d291 2
a292 2
On FAT partitions the filetime granularity is 2 seconds.  The following
test will fail:
d294 6
a299 3
  Failed Test           List of failed
  ------------------------------------
  io/fs.t               18
d301 3
a303 1
=head2 Tainting Checks
d305 2
a306 17
When Perl is running in taint mode, C<$ENV{PATH}> is considered tainted
and not used, so DLLs not in the default system directories will not
be found.  While the tests are running you will see warnings popup from
the system with messages like:

  Win9x
    Error Starting Program
    A required .DLL file, CYGWIN1.DLL, was not found

  WinNT
    perl.exe or sh.exe - Unable to Locate DLL
    The dynamic link library cygwin1.dll could not be found in the
      specified path ...

Just click OK and ignore them.  When running `C<make test>', 2 popups
occur.  During `C<./perl harness>', 4 popups occur.  Also, these tests
will fail:
d308 1
a308 3
  Failed Test           List of failed
  ------------------------------------
  op/taint.t            1, 3, 31, 37
d310 1
a310 2
Alternatively, you can copy F<cygwin1.dll> into one of the Windows system
directories (although, this is B<not> recommended).
d312 3
a314 9
=head2 /etc/group

Cygwin does not require F</etc/group>, in which case the F<op/grent.t>
test will be skipped.  The check performed by F<op/grent.t> expects to
see entries that use the members field, otherwise this test will fail:

  Failed Test           List of failed
  ------------------------------------
  op/grent.t            1
d316 1
a316 1
=head2 Unexplained Failures
d318 1
a318 3
Any additional tests that fail are likely due to bugs in Cygwin or the
optional libraries.  It is expected that by the time of the next net
release most of these will be solved so they are not described here.
d320 1
a320 1
=head2 Script Portability
d322 4
a325 5
Cygwin does an outstanding job of providing UNIX-like semantics on
top of Win32 systems.  However, in addition to the items noted above,
there are some differences that you should know about.  This is only a
very brief guide to portability, more information can be found in the
Cygwin documentation.
d331 9
a339 12
Cygwin pathnames can be separated by forward (F</>) or backward (F<\>)
slashes.  They may also begin with drive letters (F<C:>) or Universal
Naming Codes (F<//UNC>).  DOS device names (F<aux>, F<con>, F<prn>,
F<com*>, F<lpt?>) are invalid as base filenames.  However, they can be
used in extensions (e.g., F<hello.aux>).  Names may not contain these
characters:

  : * ? " < > |

File names are case insensitive, but case preserving.  With the I<mixed>
C<CYGWIN> setting, file names are mixed-case (although, directory names
remain case insensitive).
d341 2
a342 2
The I<mixed> setting is only available with the "coolview" version of
F<cygwin1.dll> provided by Sergey Okhapkin at:
d344 1
a344 1
  ftp://ftp.franken.de/pub/win32/develop/gnuwin32/cygwin/porters/Okhapkin_Sergey/
d348 2
d352 5
a356 4
mode for an open() is determined by the mode of the mount that underlies
the file.  Perl provides a binmode() function to set binary mode on files
that otherwise would be treated as text.  sysopen() with the C<O_TEXT>
flag sets text mode on files that otherwise would be treated as binary:
d360 2
a361 1
lseek(), tell() and sysseek() only work with files opened in binary mode.
d365 17
d384 54
a437 17
The Cygwin stat() makes the F<.exe> extension transparent by looking for
a F<foo.exe> when you ask for F<foo> (unless a F<foo> also exists).
Cygwin does not require a F<.exe> extension, but I<gcc> adds it
automatically when building a program.  However, when accessing an
executable as a normal file (e.g., I<install> or I<cp> in a makefile)
the F<.exe> is not transparent.

NOTE: There is a version of I<install> that understands the F<.exe>
semantics, it can be found at:

  ftp://ftp.franken.de/pub/win32/develop/gnuwin32/cygwin/porters/Humblet_Pierre_A/

=item * chown()

On WinNT with the I<ntsec> C<CYGWIN> setting, chown() can change a file's
user and group IDs.  In all other configurations chown() is a no-op,
although this is appropriate on Win9x since there is no security model.
d441 1
a441 1
File locking using the C<F_GETLK> command to fcntl() is a stub that
d444 89
a532 1
Win9x can not rename() an open file (although WinNT can).
d536 1
a536 1
=head1 INSTALL
d538 1
a538 1
This will install Perl, including man pages.
d540 1
a540 1
  make install | tee log.make-install
d542 1
a542 1
NOTE: If C<STDERR> is redirected `C<make install>' will B<not> prompt
d545 1
a545 1
You may need to be I<Administrator> to run `C<make install>'.  If you
d551 1
a551 1
=head1 MANIFEST
d562 18
a579 5
  INSTALL README.cygwin
  Changes Changes5.005 Changes5.004
  AUTHORS MAINTAIN MANIFEST README.win32
  pod/perl.pod pod/perlfaq3.pod pod/perlhist.pod pod/perlmodlib.pod
  pod/perlport.pod pod/perltoc.pod pod/perl5004delta.pod
d583 21
a603 14
  cygwin/Makefile.SHs
  cygwin/ld2.in
  cygwin/perlld.in
  ext/IPC/SysV/hints/cygwin.pl
  ext/NDBM_File/hints/cygwin.pl
  ext/ODBM_File/hints/cygwin.pl
  hints/cygwin.sh
  Configure             - help finding hints from uname,
                          shared libperl required for dynamic loading
  Makefile.SH           - linklibperl
  Porting/patchls       - cygwin in port list
  installman            - man pages with :: translated to .
  installperl           - install dll/ld2/perlld, install to pods
  makedepend.SH         - uwinfix
d607 13
a619 6
  t/io/tell.t           - binmode
  t/lib/glob-basic.t    - Win32 directory list access differs from read mode
  t/op/magic.t          - $^X/symlink WORKAROUND, s/.exe//
  t/op/stat.t           - no /dev, skip Win32 ftCreationTime quirk
                          (cache manager sometimes preserves ctime of file
                          previously created and deleted), no -u (setuid)
d623 15
a637 10
  EXTERN.h              - __declspec(dllimport)
  XSUB.h                - __declspec(dllexport)
  cygwin/cygwin.c       - os_extras (getcwd)
  perl.c                - os_extras
  perl.h                - binmode
  doio.c                - win9x can not rename a file when it is open
  pp_sys.c              - do not define h_errno
  mg.c                  - environ WORKAROUND
  unixish.h             - environ WORKAROUND
  util.c                - environ WORKAROUND
d641 27
a667 5
  ext/POSIX/POSIX.xs    - tzname defined externally
  ext/SDBM_File/sdbm/pair.c
                        - EXTCONST needs to be redefined from EXTERN.h
  ext/SDBM_File/sdbm/sdbm.c
                        - binary open
d671 85
a755 9
  lib/Cwd.pm            - hook to internal Cwd::cwd
  lib/ExtUtils/MakeMaker.pm
                        - require MM_Cygwin.pm
  lib/ExtUtils/MM_Cygwin.pm
                        - canonpath, cflags, manifypods, perl_archive
  lib/File/Spec/Unix.pm - preserve //unc
  lib/perl5db.pl        - use stdin not /dev/tty
  utils/perlcc.PL       - DynaLoader.a in compile, -DUSEIMPORTLIB
  utils/perldoc.PL      - version comment
d759 1
a759 7
=head1 BUGS

Upon each start, I<make> warns that a rule for F<perlmain.o> is overridden
(but there seems to be no better solution than adding an explicit define).

`C<make clean>' does not remove library F<.def> and F<.exe.stackdump>
files.
d761 4
a764 2
The I<ld2> script contains references to the source directory.  You should
change these to C</usr/local/bin> (or whatever) after install.
d768 10
a777 6
Charles Wilson E<lt>cwilson@@ece.gatech.eduE<gt>,
Eric Fifer E<lt>efifer@@sanwaint.comE<gt>,
alexander smishlajev E<lt>als@@turnhere.comE<gt>,
Steven Morlock E<lt>newspost@@morlock.netE<gt>,
Sebastien Barre E<lt>Sebastien.Barre@@utc.frE<gt>,
Teun Burgers E<lt>burgers@@ecn.nlE<gt>.
d781 1
a781 1
Last updated: 1 March 2000
@


1.1.1.1
log
@virgin perl 5.6.0
@
text
@@


1.1.1.2
log
@stock perl 5.6.1
@
text
@d16 1
a16 1
version of Perl is provided on the Cygwin CD.  If you do not need to
d30 1
a30 1
  http://www.cygwin.com/
d34 3
a36 1
At the time this document was last updated, Cygwin 1.1.5 was current.
d41 14
a54 4
bugs.  If you wish to use Perl with Cygwin B20.1 or earlier, consider
using perl5.005_03, which is available in source and binary form at
C<http://cygutils.netpedia.net/>.  If there is significant demand,
a patch kit can be developed to port back to earlier Cygwin versions.
d63 9
a71 5
They do not depend on your host system (Win9x/WinME, WinNT/Win2K)
or your Cygwin configuration (I<ntea>, I<ntsec>, binary/text mounts).
The only dependencies come from hard-coded pathnames like C</usr/local>.
However, your host system and Cygwin configuration will affect Perl's
runtime behavior (see L</"TEST">).
d81 13
d97 1
a97 1
Configure will B<not> prompt you to install I<man> pages.
d103 1
a103 1
creates directories and files, to be safe you may want to run a `C<chmod
d126 1
a126 1
If you are willing to accept all the defaults run Configure with B<-de>.
d156 1
a156 4
The crypt package distributed with Cygwin is a Linux compatible 56-bit
DES crypt port by Corinna Vinschen.

Alternatively, the crypt libraries in GNU libc have been ported to Cygwin.
d160 1
a160 1
  ftp://ftp.franken.de/pub/win32/develop/gnuwin32/cygwin/porters/Okhapkin_Sergey/cw32crypt-dist-0.tgz
d167 5
a171 1
  ftp://ftp.franken.de/pub/win32/develop/gnuwin32/cygwin/porters/Okhapkin_Sergey/libcrypt.tgz
a178 2
NOTE: The ndbm/dbm emulations only completely work on NTFS partitions.

a183 2
NOTE: The BerkeleyDB library only completely works on NTFS partitions.

d189 2
a190 5
C<d_semctl_semun> is undefined because it fails a Configure test
and on Win9x the I<shm*()> functions seem to hang.  It also creates
a compile time dependency because F<perl.h> includes F<<sys/ipc.h>>
and F<<sys/sem.h>> (which will be required in the future when compiling
CPAN modules).
d231 1
a231 1
(I<{atan2,cos,exp,floor,fmod,frexp,isnan,log,modf,pow,sin,sqrt}l,strtold>).
d251 14
a264 1
=item * I<dlsym()>
a270 1
  ld2: not found
d276 1
a276 1
=item * Win9x and C<d_eofnblk>
d291 8
d305 1
a305 1
  try.c:<line#>: parse error
d313 1
a313 1
Simply run I<make> and wait:
d324 2
a325 2
  dllwrap: no export definition file provided
  dllwrap: creating one, but that may not be what you want
d335 3
a337 3
is not the case `C<make>' will fail at some point.  If this happens,
just manually copy I<ld2> from the source directory to somewhere in
your C<PATH>.
d351 2
a352 4
configuration.  If a test can pass in some Cygwin setup, it is always
attempted and explainable test failures are documented.  It is possible
for Perl to pass all the tests, but it is more likely that some tests
will fail for one of the reasons listed below.
d357 9
a365 9
{read,write,execute} for each {user,group,other}.  By default Cygwin
only tracks the Win32 read-only attribute represented as the UNIX file
user write bit (files are always readable, files are executable if they
have a F<.{com,bat,exe}> extension or begin with C<#!>, directories are
always readable and executable).  On WinNT with the I<ntea> C<CYGWIN>
setting, the additional mode bits are stored as extended file attributes.
On WinNT with the I<ntsec> C<CYGWIN> setting, permissions use the standard
WinNT security descriptors and access control lists.  Without one of
these options, these tests will fail:
d383 1
a383 4
case Cygwin implements link() by copying the file.  On remote (network)
drives Cygwin's stat() always sets C<st_nlink> to 1, so the link count
for remote directories and files is not available.  In either case,
these tests will fail:
d411 1
a411 1
    perl.exe - Unable to Locate DLL
d423 2
a424 7
Alternatively, you can copy F<cygwin1.dll> into the directory where the
tests run:

  cp /bin/cygwin1.dll t

or one of the Windows system directories (although, this is B<not>
recommended).
d436 6
d444 5
a448 4
Cygwin does an outstanding job of providing UNIX-like semantics on top of
Win32 systems.  However, in addition to the items noted above, there are
some differences that you should know about.  This is a very brief guide
to portability, more information can be found in the Cygwin documentation.
d457 3
a459 3
F<com*>, F<lpt?>, F<nul>) are invalid as base filenames.  However, they
can be used in extensions (e.g., F<hello.aux>).  Names may contain all
printable characters except these:
d463 8
a470 3
File names are case insensitive, but case preserving.  A pathname that
contains a backslash or drive letter is a Win32 pathname (and not subject
to the translations applied to POSIX style pathnames).
d489 11
a499 7
The Cygwin stat(), lstat() and readlink() functions make the F<.exe>
extension transparent by looking for F<foo.exe> when you ask for F<foo>
(unless a F<foo> also exists).  Cygwin does not require a F<.exe>
extension, but I<gcc> adds it automatically when building a program.
However, when accessing an executable as a normal file (e.g., I<cp>
in a makefile) the F<.exe> is not transparent.  The I<install> included
with Cygwin automatically appends a F<.exe> when necessary.
d503 3
a505 2
On WinNT chown() can change a file's user and group IDs.  On Win9x chown()
is a no-op, although this is appropriate since there is no security model.
a513 3
The Cygwin chroot() implementation has holes (it can not restrict file
access by native Win32 programs).

d518 1
a518 1
This will install Perl, including I<man> pages.
d542 5
a546 5
  INSTALL README.cygwin README.win32 MANIFEST
  Changes Changes5.005 Changes5.004 Changes5.6
  pod/perl.pod pod/perlport.pod pod/perlfaq3.pod
  pod/perldelta.pod pod/perl5004delta.pod pod/perl56delta.pod
  pod/perlhist.pod pod/perlmodlib.pod pod/buildtoc.PL pod/perltoc.pod
a567 1
  t/lib/b.t             - ignore Cwd from os_extras
d578 1
a578 1
  cygwin/cygwin.c       - os_extras (getcwd, spawn)
d582 4
a585 2
  pp_sys.c              - do not define h_errno, pp_system with spawn
  util.c                - use setenv
a601 1
  lib/File/Find.pm      - on remote drives stat() always sets st_nlink to 1
a602 1
  lib/File/Temp.pm      - no directory sticky bit
d604 1
d611 2
a612 1
When I<make> starts, it warns about overriding commands for F<perlmain.o>.
d614 1
a614 1
`C<make clean>' does not remove library F<.def> or F<.exe.stackdump>
d618 1
a618 10
change these to $installbin after `C<make install>'.

Support for swapping real and effective user and group IDs is incomplete.
On WinNT Cygwin provides setuid(), seteuid(), setgid() and setegid().
However, additional Cygwin calls for manipulating WinNT access tokens
and security contexts are required.

When building DLLs, `C<dllwrap --export-all-symbols>' is used to export
global symbols.  It might be better to generate an explicit F<.def> file
(see F<makedef.pl>).  Also, DLLs can now be build with `C<gcc -shared>'.
d622 6
a627 6
Charles Wilson <cwilson@@ece.gatech.edu>,
Eric Fifer <egf7@@columbia.edu>,
alexander smishlajev <als@@turnhere.com>,
Steven Morlock <newspost@@morlock.net>,
Sebastien Barre <Sebastien.Barre@@utc.fr>,
Teun Burgers <burgers@@ecn.nl>.
d631 1
a631 1
Last updated: 9 November 2000
@


1.1.1.3
log
@stock perl 5.8.0 from CPAN
@
text
@d16 2
a17 3
version of Perl is provided in the normal Cygwin install.  If you do
not need to customize the configuration, consider using one of those
packages.
d19 1
d21 1
a21 1
=head1 PREREQUISITES FOR COMPILING PERL ON CYGWIN
d34 1
a34 1
At the time this document was last updated, Cygwin 1.3.12 was current.
d36 7
d87 1
a87 1
=head1 CONFIGURE PERL ON CYGWIN
d100 1
a100 1
=head2 Stripping Perl Binaries on Cygwin
d115 1
a115 1
=head2 Optional Libraries for Perl on Cygwin
d120 2
a121 2
searches.  Pre-built packages for most of these are available from
the Cygwin installer.
d134 1
a134 1
  ftp://ftp.uni-erlangen.de/pub/pc/gnuwin32/cygwin/porters/Okhapkin_Sergey/cw32crypt-dist-0.tgz
d141 1
a141 1
  ftp://ftp.uni-erlangen.de/pub/pc/gnuwin32/cygwin/porters/Okhapkin_Sergey/libcrypt.tgz
d145 5
a149 1
GDBM is available for Cygwin.
d167 1
a167 6
CPAN modules).  NO LONGER SUPPORTED!

=item * C<-lutil>

Included with the standard Cygwin netrelease is the inetutils package 
which includes libutil.a.
d171 1
a171 1
=head2 Configure-time Options for Perl on Cygwin
a188 5
=item * C<-Uuseperlio>

Undefining this symbol disables the PerlIO abstraction, which is now the
default.

d194 4
d200 3
a202 3
By default Perl uses 32 bit integers.  If you want to use larger 64
bit integers, define this symbol.  If there is trouble, check that
your Cygwin installation is up to date.
d208 1
a208 2
(I<{atan2, cos, exp, floor, fmod, frexp, isnan, log, modf, pow, sin, sqrt}l, 
strtold>).
d213 1
a213 1
POSIX threads are B<not> yet implemented in Cygwin completely.
a219 5
=item * C<-Dmksymlinks>

Use this to build perl outside of the source tree.  This works with Cygwin.
Details can be found in the F<INSTALL> document.

d222 1
a222 1
=head2 Suspicious Warnings on Cygwin
d268 1
a268 1
=head1 MAKE ON CYGWIN
d274 1
a274 1
=head2 Warnings on Cygwin
d284 1
a284 1
=head2 ld2 on Cygwin
d296 1
a296 1
=head1 TEST ON CYGWIN
d313 1
a313 1
=head2 File Permissions on Cygwin
d324 1
a324 1
these options, these tests will fail (listing not updated yet):
d339 53
a391 1
=head2 NDBM_File does not work on FAT filesystems
d393 1
a393 3
Do not install NDBM_File on FAT filesystem.  It can be built on a FAT
filesystem, but many ndbm tests will fail.  With NTFS, there should be
no problems either way.
d395 9
a403 1
=head2 Script Portability on Cygwin
d414 1
a414 1
Cygwin pathnames can be separated by forward (F</>) or backward (F<\\>)
a466 4
Inplace editing C<perl -i> of files doesn't work without doing a backup 
of the file being edited C<perl -i.bak> because of windowish restrictions,
so Perl adds the C<.bak> automatically if you just use C<perl -i>.

d469 1
a469 1
=head1 INSTALL PERL ON CYGWIN
d473 1
a473 1
  make install 2>&1 | tee log.make-install
d484 1
a484 1
=head1 MANIFEST ON CYGWIN
d489 1
a489 1
be kept as clean as possible (listing not updated yet).
d562 9
a570 1
=head1 BUGS ON CYGWIN
d577 4
d588 1
a588 2
Teun Burgers <burgers@@ecn.nl>,
Gerrit Haase <gh@@familiehaase.de>.
d592 1
a592 1
Last updated: 2002-02-27
@


1.1.1.4
log
@perl 5.8.2 from CPAN
@
text
@d34 1
a34 1
At the time this document was last updated, Cygwin 1.5.2 was current.
a139 2
NOTE: The GDBM library only works on NTFS partitions.

d142 2
a143 1
BerkeleyDB is available for Cygwin.
d156 1
a156 1
CPAN modules). CURRENTLY NOT SUPPORTED!
d180 2
a181 2
By default Perl uses the C<malloc()> included with the Perl source.  If you
want to force Perl to build with the system C<malloc()> undefine this symbol.
d185 2
a186 2
Undefining this symbol disables the PerlIO abstraction.  PerlIO is now the
default; it is not recommended to disable PerlIO.
d196 2
a197 1
bit integers, define this symbol.
d209 1
a209 2
POSIX threads are implemented in Cygwin, define this symbol if you want
a threaded perl.
d213 2
a214 2
Cygwin uses 64-bit integers for internal size and position calculations, 
this will be correctly detected and defined by Configure.
d219 1
a219 2
Details can be found in the F<INSTALL> document.  This is the recommended 
way to build perl from sources.
d232 1
a232 1
when C<dlsym()> checking occurs (it is not created until `C<make>' runs).
d235 1
a235 1
  Checking whether your C<dlsym()> needs a leading underscore ...
d263 1
a263 1
  try.c:<line#>: missing binary operator
d265 1
a265 3
This failure does not seem to cause any problems.  With older gcc
versions, "parse error" is reported instead of "missing binary
operator".
d275 3
a277 1
=head2 Errors on Cygwin
d279 2
a280 1
Errors like these are normal:
d282 2
a283 4
  ...
  make: [extra.pods] Error 1 (ignored)
  ...
  make: [extras.make] Error 1 (ignored)
d340 1
a340 15
=head2 NDBM_File and ODBM_File do not work on FAT filesystems

Do not use NDBM_File or ODBM_File on FAT filesystem.  They can be
built on a FAT filesystem, but many tests will fail:

 ../ext/NDBM_File/ndbm.t       13  3328    71   59  83.10%  1-2 4 16-71
 ../ext/ODBM_File/odbm.t      255 65280    ??   ??       %  ??
 ../lib/AnyDBM_File.t           2   512    12    2  16.67%  1 4
 ../lib/Memoize/t/errors.t      0   139    11    5  45.45%  7-11
 ../lib/Memoize/t/tie_ndbm.t   13  3328     4    4 100.00%  1-4
 run/fresh_perl.t                          97    1   1.03%  91

If you intend to run only on FAT (or if using AnyDBM_File on FAT),
run Configure with the -Ui_ndbm and -Ui_dbm options to prevent
NDBM_File and ODBM_File being built.
d342 3
a344 12
With NTFS (and CYGWIN=ntsec), there should be no problems even if
perl was built on FAT.

=head2 C<fork()> failures in io_* tests

A C<fork()> failure may result in the following tests failing:

  ext/IO/lib/IO/t/io_multihomed.t
  ext/IO/lib/IO/t/io_sock.t
  ext/IO/lib/IO/t/io_unix.t

See comment on fork in L<Miscellaneous> below.
d374 3
a376 3
mode for an C<open()> is determined by the mode of the mount that underlies
the file.  Perl provides a C<binmode()> function to set binary mode on files
that otherwise would be treated as text.  C<sysopen()> with the C<O_TEXT>
d381 1
a381 2
C<lseek()>, C<tell()> and C<sysseek()> only work with files opened in binary
mode.
a384 17
=item * PerlIO

PerlIO overrides the default Cygwin Text/Binary behaviour.  A file will 
always treated as binary, regardless which mode of the mount it lives on,
just like it is in UNIX.  So CR/LF translation needs to be requested in 
either the C<open()> call like this:

  open(FH, ">:crlf", "out.txt");

which will do conversion from LF to CR/LF on the output, or in the 
environment settings (add this to your .bashrc):

  export PERLIO=crlf

which will pull in the crlf PerlIO layer which does LF -> CRLF conversion 
on every output generated by perl.

d387 1
a387 1
The Cygwin C<stat()>, C<lstat()> and C<readlink()> functions make the F<.exe>
d395 1
a395 1
=item * C<chown()>
d397 1
a397 1
On WinNT C<chown()> can change a file's user and group IDs.  On Win9x C<chown()>
d402 1
a402 1
File locking using the C<F_GETLK> command to C<fcntl()> is a stub that
d405 1
a405 1
Win9x can not C<rename()> an open file (although WinNT can).
d407 1
a407 1
The Cygwin C<chroot()> implementation has holes (it can not restrict file
d412 1
a412 14
therefore Perl adds the suffix C<.bak> automatically if you use C<perl -i> 
without specifying a backup extension.

Using C<fork()> after loading multiple dlls may fail with an internal cygwin
error like the following:

  C:\CYGWIN\BIN\PERL.EXE: *** couldn't allocate memory 0x10000(4128768) for 'C:\CYGWIN\LIB\PERL5\5.6.1\CYGWIN-MULTI\AUTO\SOCKET\SOCKET.DLL' alignment, Win32 error 8

    200 [main] perl 377147 sync_with_child: child -395691(0xB8) died before initialization with status code 0x1
   1370 [main] perl 377147 sync_with_child: *** child state child loading dlls

Use the rebase utility to resolve the conflicting dll addresses.  The
rebase package is included in the Cygwin netrelease.  Use setup.exe from
F<http://www.cygwin.com/setup.exe> to install it and run rebaseall.
d446 1
a446 1
  pod/perlhist.pod pod/perlmodlib.pod perl/buildtoc pod/perltoc.pod
d512 1
a512 1
On WinNT Cygwin provides C<setuid()>, C<seteuid()>, C<setgid()> and C<setegid()>.
d524 1
a524 1
Gerrit P. Haase <gp@@familiehaase.de>.
d528 1
a528 1
Last updated: 2003-08-12
@


1.1.1.5
log
@perl 5.8.8 import
@
text
@d67 2
a68 2
creates directories and files, to be safe you may want to run a
C<chmod -R +w *> on the entire Perl source tree.
d234 1
a234 1
when C<dlsym()> checking occurs (it is not created until C<make> runs).
d290 1
a290 1
During C<make>, I<ld2> will be created and installed in your $installbin
d292 2
a293 2
wait until the C<make install> process to install the I<ld2> script,
this is because the remainder of the C<make> refers to I<ld2> without
d296 1
a296 1
is not the case C<make> will fail at some point.  If this happens,
d309 1
a309 1
running as C<./perl harness>.
a371 2
=head1 Specific features of the Cygwin port

a438 9
=item * cygwin vs. windows process ids

Cygwin processes have their own pid, which is different from the
underlying windows pid.  Most posix compliant Proc functions expect
the cygwin pid, but several Win32::Process functions expect the
winpid. E.g. C<$$> is the cygwin pid of F</usr/bin/perl>, which is not
the winpid.  Use C<Cygwin::winpid_to_pid()> and C<Cygwin::winpid_to_pid()> 
to translate between them.

a472 19
=head2 Prebuilt methods:

=over 4

=item C<Cwd::cwd>

Returns current working directory.

=item C<Cygwin::pid_to_winpid>

Translates a cygwin pid to the corresponding Windows pid (which may or
may not be the same).

=item C<Cygwin::winpid_to_pid>

Translates a Windows pid to the corresponding cygwin pid (if any).

=back

d479 1
a479 1
NOTE: If C<STDERR> is redirected C<make install> will B<not> prompt
d482 1
a482 1
You may need to be I<Administrator> to run C<make install>.  If you
a530 1
  t/lib/cygwin.t	- builtin cygwin function tests
d536 1
a536 2
  cygwin/cygwin.c       - os_extras (getcwd, spawn, Cygwin::winpid_to_pid, 
                          Cygwin::pid_to_winpid)
d585 1
a585 1
Last updated: 2005-02-11
@


1.1.1.6
log
@import perl 5.10.0 from CPAN
@
text
@d30 1
a30 1
  F<http://www.cygwin.com/>
d34 1
a34 1
At the time this document was last updated, Cygwin 1.5.24 was current.
d101 2
a102 1
  Any special flags to pass to g++ to create a dynamically loaded library?
a103 1
  Any special flags to pass to gcc to use dynamic linking? [none] -s
d136 1
a136 1
=item * C<-lgdbm_compat> (C<use GDBM_File>)
d146 1
a146 2
NOTE: The BerkeleyDB library only completely works on NTFS partitions
and db-4.3 is flawed.
d148 1
a148 1
=item * C<cygserver> (C<use IPC::SysV>)
d161 1
a161 1
Included with the standard Cygwin netrelease is the inetutils package
d203 1
a203 1
(I<{atan2, cos, exp, floor, fmod, frexp, isnan, log, modf, pow, sin, sqrt}l,
d214 1
a214 1
Cygwin uses 64-bit integers for internal size and position calculations,
d220 1
a220 1
Details can be found in the F<INSTALL> document.  This is the recommended
d231 13
d279 21
d306 1
a306 1
  cd t; ./perl harness 2>&1 | tee ../log.harness
d326 2
a327 2
On WinNT with the default I<ntsec> C<CYGWIN> setting, permissions use the
standard WinNT security descriptors and access control lists. Without one of
d359 1
a359 1
With NTFS (and no CYGWIN=nontsec), there should be no problems even if
a397 8
For conversion we have C<Cygwin::win_to_posix_path()> and
C<Cygwin::posix_to_win_path()>.

Pathnames may not contain Unicode characters. C<Cygwin> still uses the
ANSI API calls and no Unicode calls because of newlib deficiencies.
There's an unofficial unicode patch for cygwin at
F<http://www.okisoft.co.jp/esc/utf8-cygwin/>

d403 3
a405 4
the file. See C<Cygwin::is_binmount()>. Perl provides a C<binmode()> function
to set binary mode on files that otherwise would be treated as text.
C<sysopen()> with the C<O_TEXT> flag sets text mode on files that otherwise
would be treated as binary:
d416 3
a418 3
PerlIO overrides the default Cygwin Text/Binary behaviour.  A file will
always be treated as binary, regardless of the mode of the mount it lives
on, just like it is in UNIX.  So CR/LF translation needs to be requested in
d423 1
a423 1
which will do conversion from LF to CR/LF on the output, or in the
d428 1
a428 1
which will pull in the crlf PerlIO layer which does LF -> CRLF conversion
d441 1
a441 1
=item * Cygwin vs. Windows process ids
d447 1
a447 1
the winpid.  Use C<Cygwin::winpid_to_pid()> and C<Cygwin::winpid_to_pid()>
a449 5
=item * Cygwin vs. Windows errors

Under Cygwin, $^E is the same as $!.  When using L<Win32 API Functions|Win32>,
use C<Win32::GetLastError()> to get the last Windows error.

d465 1
a465 1
Inplace editing C<perl -i> of files doesn't work without doing a backup
d467 1
a467 1
therefore Perl adds the suffix C<.bak> automatically if you use C<perl -i>
d490 1
a490 1
Returns the current working directory.
a500 50
=item C<Cygwin::win_to_posix_path>

Translates a Windows path to the corresponding cygwin path respecting
the current mount points. With a second non-null argument returns an
absolute path. Double-byte characters will not be translated.

=item C<Cygwin::posix_to_win_path>

Translates a cygwin path to the corresponding cygwin path respecting
the current mount points. With a second non-null argument returns an
absolute path. Double-byte characters will not be translated.

=item C<Cygwin::mount_table()>

Returns an array of [mnt_dir, mnt_fsname, mnt_type, mnt_opts].

  perl -e 'for $i (Cygwin::mount_table) {print join(" ",@@$i),"\n";}'
  /bin c:\cygwin\bin system binmode,cygexec
  /usr/bin c:\cygwin\bin system binmode
  /usr/lib c:\cygwin\lib system binmode
  / c:\cygwin system binmode
  /cygdrive/c c: system binmode,noumount
  /cygdrive/d d: system binmode,noumount
  /cygdrive/e e: system binmode,noumount

=item C<Cygwin::mount_flags>

Returns the mount type and flags for a specified mount point.
A comma-separated string of mntent->mnt_type (always
"system" or "user"), then the mntent->mnt_opts, where
the first is always "binmode" or "textmode".

  system|user,binmode|textmode,exec,cygexec,cygdrive,mixed,
  notexec,managed,nosuid,devfs,proc,noumount

If the argument is "/cygdrive", then just the volume mount settings,
and the cygdrive mount prefix are returned.

User mounts override system mounts.

  $ perl -e 'print Cygwin::mount_flags "/usr/bin"'
  system,binmode,cygexec
  $ perl -e 'print Cygwin::mount_flags "/cygdrive"'
  binmode,cygdrive,/cygdrive

=item C<Cygwin::is_binmount>

Returns true if the given cygwin path is binary mounted, false if the
path is mounted in textmode.

d523 1
a523 1
be kept as clean as possible.
d530 1
a530 1
  Changes Changes5.004 Changes5.005 Changes5.6 Changes5.8
d533 1
a533 14
  pod/perl561delta.pod pod/perl570delta.pod pod/perl572delta.pod
  pod/perl573delta.pod pod/perl58delta.pod pod/perl581delta.pod
  pod/perl590delta.pod pod/perlhist.pod pod/perlmodlib.pod
  pod/perltoc.pod pod.lst Porting/Glossary Porting/repository.pod
  Porting/checkAUTHORS.pl
  ext/Compress/Raw/Zlib/Changes ext/Compress/Raw/Zlib/README
  ext/Compress/Zlib/Changes ext/Cwd/Changes ext/DB_File/Changes
  ext/Encode/Changes ext/Sys/Syslog/Changes ext/Time/HiRes/Changes
  ext/Win32API/File/Changes lib/CGI/Changes lib/ExtUtils/CBuilder/Changes
  lib/ExtUtils/Changes lib/ExtUtils/NOTES lib/ExtUtils/PATCHING
  lib/ExtUtils/README lib/Module/Build/Changes lib/Net/Ping/Changes
  lib/Test/Harness/Changes
  lib/Term/ANSIColor/ChangeLog lib/Term/ANSIColor/README
  README.symbian symbian/TODO
d538 2
d546 1
a546 2
  Makefile.SH Cross/Makefile-cross-SH
                        - linklibperl
d549 1
a549 1
  installperl           - install dll, install to 'pods'
a550 8
  regen_lib.pl          - file permissions

  NetWare/Makefile
  plan9/mkfile
  symbian/sanity.pl symbian/sisify.pl
  hints/uwin.sh
  vms/descrip_mms.template
  win32/Makefile win32/makefile.mk
a553 2
  t/io/fs.t             - no file mode checks if not ntsec
                          skip rename() check when not check_case:relaxed
d555 2
a556 2
  t/lib/cygwin.t        - builtin cygwin function tests
  t/op/groups.t         - basegroup has ID = 0
d561 1
a561 2
  t/op/taint.t          - can't use empty path under Cygwin Perl
  t/op/time.t           - no tzset()
d567 3
a569 2
  cygwin/cygwin.c       - os_extras (getcwd, spawn, and several Cygwin:: functions)
  perl.c                - os_extras, -i.bak
d572 1
a572 1
  pp_sys.c              - do not define h_errno, init _pwent_struct.pw_comment
a573 4
  util.h                - PERL_FILE_IS_ABSOLUTE macro
  pp.c                  - Comment about Posix vs IEEE math under Cygwin
  perlio.c              - CR/LF mode
  perliol.c             - Comment about EXTCONST under Cygwin
a576 5
  ext/Compress/Raw/Zlib/Makefile.PL
                        - Can't install via CPAN shell under Cygwin
  ext/Compress/Raw/Zlib/zlib-src/zutil.h
                        - Cygwin is Unix-like and has vsnprintf
  ext/Errno/Errno_pm.PL - Special handling for Win32 Perl under Cygwin
a581 14
  ext/Sys/Syslog/Syslog.xs
                        - Cygwin has syslog.h
  ext/Sys/Syslog/win32/compile.pl
                        - Convert paths to Windows paths
  ext/Time/HiRes/HiRes.xs
                        - Various timers not available
  ext/Time/HiRes/Makefile.PL
                        - Find w32api/windows.h
  ext/Win32/Makefile.PL - Use various libraries under Cygwin
  ext/Win32/Win32.xs    - Child dir and child env under Cygwin
  ext/Win32API/File/File.xs
                        - _open_osfhandle not implemented under Cygwin
  ext/Win32CORE/Win32CORE.c
                        - __declspec(dllexport)
a584 21
  ext/B/t/OptreeCheck.pm - Comment about stderr/stdout order under Cygwin
  ext/Digest/SHA/bin/shasum
                        - Use binary mode under Cygwin
  ext/Sys/Syslog/win32/Win32.pm
                        - Convert paths to Windows paths
  ext/Time/HiRes/HiRes.pm
                        - Comment about various timers not available
  ext/Win32API/File/File.pm
                        - _open_osfhandle not implemented under Cygwin
  ext/Win32CORE/Win32CORE.pm
                        - History of Win32CORE under Cygwin
  lib/CGI.pm            - binmode and path separator
  lib/CPANPLUS/Dist/MM.pm - Commented out code that fails under Win32/Cygwin
  lib/CPANPLUS/Internals/Constants/Report.pm
                        - OS classifications
  lib/CPANPLUS/Internals/Constants.pm
                        - Contants for Cygwin
  lib/CPANPLUS/Internals/Report.pm
                        - Example of Cygwin report
  lib/CPANPLUS/Module.pm
                        - Abort if running on old Cygwin version
a585 7
  lib/ExtUtils/CBuilder/Platform/cygwin.pm
                        - use gcc for ld, and link to libperl.dll.a
  lib/ExtUtils/CBuilder.pm
                        - Cygwin is Unix-like
  lib/ExtUtils/Install.pm - Install and rename issues under Cygwin
  lib/ExtUtils/MM.pm    - OS classifications
  lib/ExtUtils/MM_Any.pm - Example for Cygwin
a589 1
  lib/File/Fetch.pm     - Comment about quotes using a Cygwin example
a590 1
  lib/File/Spec/Cygwin.pm - case_tolerant
a591 2
  lib/File/Spec/Win32.pm - References a message on cygwin.com
  lib/File/Spec.pm      - Pulls in lib/File/Spec/Cygwin.pm
a592 12
  lib/Module/Build/Compat.pm - Comment references 'make' under Cygwin
  lib/Module/Build/Platform/cygwin.pm
                        - Use '.' for man page separator
  lib/Module/Build.pm   - Cygwin is Unix-like
  lib/Module/CoreList.pm - List of all module files and versions
  lib/Net/Domain.pm     - No domainname command under Cygwin
  lib/Net/Netrc.pm      - Bypass using stat() under Cygwin
  lib/Net/Ping.pm       - ECONREFUSED is EAGAIN under Cygwin
  lib/Pod/Find.pm       - Set 'pods' dir
  lib/Pod/Perldoc/ToMan.pm - '-c' switch for pod2man
  lib/Pod/Perldoc.pm    - Use 'less' pager, and use .exe extension
  lib/Term/ANSIColor.pm - Cygwin terminal info
d594 1
a594 46
  utils/perlbug.PL      - Add CYGWIN environment variable to report

=item Perl Module Tests

  ext/Compress/Zlib/t/14gzopen.t
  ext/Cwd/t/cwd.t
  ext/DB_File/t/db-btree.t
  ext/DB_File/t/db-hash.t
  ext/DB_File/t/db-recno.t
  ext/DynaLoader/t/DynaLoader.t
  ext/File/Glob/t/basic.t
  ext/GDBM_File/t/gdbm.t
  ext/POSIX/t/sysconf.t
  ext/POSIX/t/time.t
  ext/SDBM_File/t/sdbm.t
  ext/Sys/Syslog/t/syslog.t
  ext/Time/HiRes/t/HiRes.t
  ext/Win32/t/Unicode.t
  ext/Win32API/File/t/file.t
  ext/Win32CORE/t/win32core.t
  lib/AnyDBM_File.t
  lib/Archive/Extract/t/01_Archive-Extract.t
  lib/Archive/Tar/t/02_methods.t
  lib/CPANPLUS/t/05_CPANPLUS-Internals-Fetch.t
  lib/CPANPLUS/t/20_CPANPLUS-Dist-MM.t
  lib/ExtUtils/t/Embed.t
  lib/ExtUtils/t/eu_command.t
  lib/ExtUtils/t/MM_Cygwin.t
  lib/ExtUtils/t/MM_Unix.t
  lib/File/Compare.t
  lib/File/Copy.t
  lib/File/Find/t/find.t
  lib/File/Path.t
  lib/File/Spec/t/crossplatform.t
  lib/File/Spec/t/Spec.t
  lib/Module/Build/t/destinations.t
  lib/Net/hostent.t
  lib/Net/Ping/t/110_icmp_inst.t
  lib/Net/Ping/t/500_ping_icmp.t
  lib/Net/t/netrc.t
  lib/Pod/Simple/t/perlcyg.pod
  lib/Pod/Simple/t/perlcygo.txt
  lib/Pod/Simple/t/perlfaq.pod
  lib/Pod/Simple/t/perlfaqo.txt
  lib/User/grent.t
  lib/User/pwent.t
d613 1
a613 4
Gerrit P. Haase <gp@@familiehaase.de>,
Reini Urban <rurban@@cpan.org>,
Jan Dubois <jand@@activestate.com>,
Jerry D. Hedden <jdhedden@@cpan.org>.
d617 1
a617 1
Last updated: 2007-09-25
@


1.1.1.7
log
@import perl 5.10.1
@
text
@d561 1
d567 1
a567 1
  pod/perltoc.pod pod.lst Porting/Glossary pod/perlrepository.pod
d569 4
a572 4
  ext/Compress-Raw-Zlib/Changes ext/Compress-Raw-Zlib/README
  ext/Compress-Zlib/Changes ext/Cwd/Changes ext/DB_File/Changes
  ext/Encode/Changes ext/Sys-Syslog/Changes ext/Time-HiRes/Changes
  ext/Win32API-File/Changes lib/CGI/Changes lib/ExtUtils/CBuilder/Changes
d634 1
a634 1
  ext/Compress-Raw-Zlib/Makefile.PL
d636 1
a636 1
  ext/Compress-Raw-Zlib/zlib-src/zutil.h
d648 1
a648 1
  ext/Time-HiRes/HiRes.xs
d650 1
a650 1
  ext/Time-HiRes/Makefile.PL
d654 1
a654 1
  ext/Win32API-File/File.xs
d662 1
a662 1
  ext/Digest-SHA/bin/shasum
d666 1
a666 1
  ext/Time-HiRes/HiRes.pm
d668 1
a668 1
  ext/Win32API-File/File.pm
d718 1
a718 1
  ext/Compress-Zlib/t/14gzopen.t
d724 1
a724 1
  ext/File-Glob/t/basic.t
d730 1
a730 1
  ext/Time-HiRes/t/HiRes.t
d732 1
a732 1
  ext/Win32API-File/t/file.t
@


1.1.1.8
log
@Perl 5.12.2 from CPAN
@
text
@d127 1
a127 1
  ftp://ftp.franken.de/pub/win32/develop/gnuwin32/cygwin/porters/Okhapkin_Sergey/cw32crypt-dist-0.tgz
d134 1
a134 1
  ftp://ftp.franken.de/pub/win32/develop/gnuwin32/cygwin/porters/Okhapkin_Sergey/libcrypt.tgz
d569 1
a569 1
  ext/Compress-Zlib/Changes cpan/Cwd/Changes ext/DB_File/Changes
d718 1
a718 1
  cpan/Cwd/t/cwd.t
@


1.1.1.9
log
@import perl 5.16.3 from CPAN - worked on by Andrew Fresh and myself
@
text
@d2 1
a2 1
see. It is written in the POD format (see F<pod/perlpod.pod>) which is
d7 1
a7 1
perlcygwin - Perl for Cygwin
d30 1
a30 1
L<http://www.cygwin.com/>
d34 1
a34 1
At the time this document was last updated, Cygwin 1.7.10 was current.
d44 2
a45 2
They do not depend on your host system (WinXP/Win2K/Win7) or your
Cygwin configuration (binary/text mounts, cvgserver).
d55 1
a55 1
versions of programs. Any not-needed Windows directories should be removed or
d63 15
d84 1
a84 1
(which requires a shared F<cygperl5_16.dll>).
d125 11
d146 2
a147 1
NOTE: The BerkeleyDB library only completely works on NTFS partitions.
d180 1
a180 1
=item * C<-Dusemymalloc>
d182 2
a183 3
By default Perl does not use the C<malloc()> included with the Perl source,
because it was slower and not entirely thread-safe.  If you want to force
Perl to build with the old -Dusemymalloc define this.
d193 1
a193 2
more than one interpreter instance.  This is only required when you build
a not-threaded perl with C<-Uuseithreads>.
d195 1
a195 1
=item * C<-Uuse64bitint>
d197 2
a198 2
By default Perl uses 64 bit integers.  If you want to use smaller 32 bit
integers, define this symbol.
d206 1
a206 1
These are B<not> yet available with newlib, the Cygwin libc.
d208 1
a208 1
=item * C<-Uuseithreads>
d210 2
a211 1
Define this symbol if you want not-threaded faster perl.
d220 3
a222 3
Use this to build perl outside of the source tree.  Details can be
found in the F<INSTALL> document.  This is the recommended way to
build perl from sources.
d337 1
a337 1
See comment on fork in L</Miscellaneous> below.
d352 8
a359 4
Cygwin pathnames are separated by forward (F</>) slashes, Universal
Naming Codes (F<//UNC>) are also supported Since cygwin-1.7 non-POSIX
pathnames are disencouraged.  Names may contain all printable
characters.
d362 2
a363 3
contains a backslash or drive letter is a Win32 pathname, and not
subject to the translations applied to POSIX style pathnames, but
cygwin will warn you, so better convert them to POSIX.
d368 4
a371 1
Since cygwin-1.7 pathnames are UTF-8 encoded.
a374 2
Since cywgin-1.7 textmounts are deprecated and stronlgy discouraged.

d378 1
a378 1
the file. See L</Cygwin::is_binmount>(). Perl provides a C<binmode()> function
d414 2
a415 2
in a makefile) the F<.exe> is not transparent.  The I<install> program
included with Cygwin automatically appends a F<.exe> when necessary.
a430 26
=item * rebase errors on fork or system

Using C<fork()> or C<system()> out to another perl after loading multiple dlls
may result on a DLL baseaddress conflict. The internal cygwin error
looks like like the following:

  0 [main] perl 8916 child_info_fork::abort: data segment start: parent
  (0xC1A000) != child(0xA6A000)

or:

  183 [main] perl 3588 C:\cygwin\bin\perl.exe: *** fatal error - unable to remap C:\cygwin\bin\cygsvn_subr-1-0.dll to same address as parent(0x6FB30000) != 0x6FE60000
  46 [main] perl 3488 fork: child 3588 - died waiting for dll loading, errno11

See L<http://cygwin.com/faq/faq-nochunks.html#faq.using.fixing-fork-failures>
It helps if not too many DLLs are loaded in memory so the available address space is larger,
e.g. stopping the MS Internet Explorer might help.

Use the perlrebase or rebase utilities to resolve the conflicting dll addresses.
The rebase package is included in the Cygwin setup. Use F<setup.exe>
from L<http://www.cygwin.com/setup.exe> to install it.

1. kill all perl processes and run C<perlrebase> or

2. kill all cygwin processes and services, start dash from cmd.exe and run C<rebaseall>.

d451 12
a531 11
=item C<Cygwin::sync_winenv>

Cygwin does not initialize all original Win32 environment variables.
See the bottom of this page L<http://cygwin.com/cygwin-ug-net/setup-env.html>
for "Restricted Win32 environment".

Certain Win32 programs called from cygwin programs might need some environment
variable, such as e.g. ADODB needs %COMMONPROGRAMFILES%.
Call Cygwin::sync_winenv() to copy all Win32 environment variables to your
process and note that cygwin will warn on every encounter of non-POSIX paths.

d566 1
a566 1
  pod/perltoc.pod Porting/Glossary pod/perlgit.pod
d568 9
a576 9
  dist/Cwd/Changes ext/Compress-Raw-Zlib/Changes
  ext/Compress-Raw-Zlib/README ext/Compress-Zlib/Changes
  ext/DB_File/Changes ext/Encode/Changes ext/Sys-Syslog/Changes
  ext/Time-HiRes/Changes ext/Win32API-File/Changes lib/CGI/Changes
  lib/ExtUtils/CBuilder/Changes lib/ExtUtils/Changes lib/ExtUtils/NOTES
  lib/ExtUtils/PATCHING lib/ExtUtils/README lib/Module/Build/Changes
  lib/Net/Ping/Changes lib/Test/Harness/Changes
  lib/Term/ANSIColor/ChangeLog lib/Term/ANSIColor/README README.symbian
  symbian/TODO
d676 1
a676 1
                        - Constants for Cygwin
a716 1
  dist/Cwd/t/cwd.t
d718 1
d784 1
a784 1
Last updated: 2012-02-08
@


1.1.1.10
log
@Import perl-5.18.2

OK espie@@ sthen@@ deraadt@@
@
text
@d34 1
a34 1
At the time this document was last updated, Cygwin 1.7.16 was current.
d46 1
a46 1
The only dependencies come from hard-coded pathnames like F</usr/local>.
d328 1
a328 1
pathnames are discouraged.  Names may contain all printable
d343 1
a343 1
Since cygwin-1.7 textmounts are deprecated and strongly discouraged.
@


1.1.1.11
log
@Import perl-5.20.1
@
text
@d393 1
a393 1
the winpid.  Use C<Cygwin::pid_to_winpid()> and C<Cygwin::winpid_to_pid()>
d412 1
a412 2
  183 [main] perl 3588 C:\cygwin\bin\perl.exe: *** fatal error - unable to remap
  C:\cygwin\bin\cygsvn_subr-1-0.dll to same address as parent(0x6FB30000) != 0x6FE60000
d667 9
d731 2
@


