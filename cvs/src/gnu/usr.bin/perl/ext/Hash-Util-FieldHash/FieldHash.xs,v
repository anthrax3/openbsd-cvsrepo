head	1.2;
access;
symbols
	OPENBSD_6_2:1.2.0.2
	OPENBSD_6_2_BASE:1.2
	PERL_5_24_2:1.1.1.4
	OPENBSD_6_1:1.2.0.4
	OPENBSD_6_1_BASE:1.2
	OPENBSD_6_0:1.1.1.3.0.10
	OPENBSD_6_0_BASE:1.1.1.3
	OPENBSD_5_9:1.1.1.3.0.4
	OPENBSD_5_9_BASE:1.1.1.3
	OPENBSD_5_8:1.1.1.3.0.6
	OPENBSD_5_8_BASE:1.1.1.3
	PERL_5_20_2:1.1.1.3
	OPENBSD_5_7:1.1.1.3.0.2
	OPENBSD_5_7_BASE:1.1.1.3
	PERL_5_20_1:1.1.1.3
	OPENBSD_5_6:1.1.1.2.0.8
	OPENBSD_5_6_BASE:1.1.1.2
	PERL_5_18_2:1.1.1.2
	PERL:1.1.1
	OPENBSD_5_5:1.1.1.2.0.6
	OPENBSD_5_5_BASE:1.1.1.2
	OPENBSD_5_4:1.1.1.2.0.2
	OPENBSD_5_4_BASE:1.1.1.2
	PERL_5_16_3:1.1.1.2
	OPENBSD_5_3:1.1.1.1.0.14
	OPENBSD_5_3_BASE:1.1.1.1
	OPENBSD_5_2:1.1.1.1.0.12
	OPENBSD_5_2_BASE:1.1.1.1
	OPENBSD_5_1_BASE:1.1.1.1
	OPENBSD_5_1:1.1.1.1.0.10
	OPENBSD_5_0:1.1.1.1.0.8
	OPENBSD_5_0_BASE:1.1.1.1
	OPENBSD_4_9:1.1.1.1.0.6
	OPENBSD_4_9_BASE:1.1.1.1
	PERL_5_12_2:1.1.1.1
	OPENBSD_4_8:1.1.1.1.0.4
	OPENBSD_4_8_BASE:1.1.1.1
	OPENBSD_4_7:1.1.1.1.0.2
	OPENBSD_4_7_BASE:1.1.1.1
	PERL_5_10_1:1.1.1.1
	CPAN:1.1.1;
locks; strict;
comment	@# @;
expand	@o@;


1.2
date	2017.02.05.00.32.12;	author afresh1;	state Exp;
branches;
next	1.1;
commitid	cxJ08BvJA9Pt2PTM;

1.1
date	2009.10.12.18.11.15;	author millert;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	2009.10.12.18.11.15;	author millert;	state Exp;
branches;
next	1.1.1.2;

1.1.1.2
date	2013.03.25.20.08.45;	author sthen;	state Exp;
branches;
next	1.1.1.3;

1.1.1.3
date	2014.11.17.20.53.06;	author afresh1;	state Exp;
branches;
next	1.1.1.4;
commitid	B31cAbBIXiCqnL97;

1.1.1.4
date	2017.08.14.13.46.11;	author afresh1;	state Exp;
branches;
next	;
commitid	fAzrs78vdW2Yfc6A;


desc
@@


1.2
log
@Fix merge issues, remove excess files - match perl-5.24.1 dist
@
text
@#define PERL_NO_GET_CONTEXT

#include "EXTERN.h"
#include "perl.h"
#include "XSUB.h"

/* support for Hash::Util::FieldHash, prefix HUF_ */

/* A Perl sub that returns a hashref to the object registry */
#define HUF_OB_REG "Hash::Util::FieldHash::_ob_reg"
/* Identifier for PERL_MAGIC_ext magic */
#define HUF_IDCACHE 0x4944

/* For global cache of object registry */
#define MY_CXT_KEY "Hash::Util::FieldHash::_guts" XS_VERSION
typedef struct {
    HV* ob_reg; /* Cache object registry */
} my_cxt_t;
START_MY_CXT

/* Inquire the object registry (a lexical hash) from perl */
static HV *
HUF_get_ob_reg(pTHX) {
    dSP;
    HV* ob_reg = NULL;
    I32 items;
    ENTER;
    SAVETMPS;

    PUSHMARK(SP);
    items = call_pv(HUF_OB_REG, G_SCALAR|G_NOARGS);
    SPAGAIN;

    if (items == 1 && TOPs && SvROK(TOPs) && SvTYPE(SvRV(TOPs)) == SVt_PVHV)
        ob_reg = (HV*)SvRV(POPs);
    PUTBACK;
    FREETMPS;
    LEAVE;

    if (!ob_reg)
        Perl_die(aTHX_ "Can't get object registry hash");
    return ob_reg;
}

/* Deal with global context */
#define HUF_INIT 1
#define HUF_CLONE 0
#define HUF_RESET -1

static void
HUF_global(pTHX_ I32 how) {
    if (how == HUF_INIT) {
        MY_CXT_INIT;
        MY_CXT.ob_reg = HUF_get_ob_reg(aTHX);
    } else if (how == HUF_CLONE) {
        MY_CXT_CLONE;
        MY_CXT.ob_reg = HUF_get_ob_reg(aTHX);
    } else if (how == HUF_RESET) {
        dMY_CXT;
        MY_CXT.ob_reg = HUF_get_ob_reg(aTHX);
    }
}

/* Object id */

/* definition of id transformation */
#define HUF_OBJ_ID(x) newSVuv(PTR2UV(x))

static SV *
HUF_obj_id(pTHX_ SV *obj) {
    SV *item = SvRV(obj);
    MAGIC *mg;
    SV *id;

    /* Get cached object ID, if it exists */
    if (SvTYPE(item) >= SVt_PVMG) {
        for ( mg = SvMAGIC(item); mg; mg = mg->mg_moremagic ) {
            if ((mg->mg_type == PERL_MAGIC_ext) &&
                (mg->mg_private == HUF_IDCACHE)
            ) {
                return mg->mg_obj;
            }
        }
    }

    /* Create an object ID, cache it */
    id = HUF_OBJ_ID(item);
    mg = sv_magicext(item, id, PERL_MAGIC_ext, NULL, NULL, 0);
    mg->mg_private = HUF_IDCACHE;
    SvREFCNT_dec(id); /* refcnt++ in sv_magicext() */

    /* Return the object ID */
    return id;
}

/* set up uvar magic for any sv */
static void
HUF_add_uvar_magic(
    pTHX_
    SV* sv,                    /* the sv to enchant, visible to get/set */
    I32(* val)(pTHX_ IV, SV*), /* "get" function */
    I32(* set)(pTHX_ IV, SV*), /* "set" function */
    I32 index,                 /* get/set will see this */
    SV* thing                  /* any associated info */
) {
    struct ufuncs uf;
        uf.uf_val = val;
        uf.uf_set = set;
        uf.uf_index = index;
    sv_magic(sv, thing, PERL_MAGIC_uvar, (char*)&uf, sizeof(uf));
}

/* Fetch the data container of a trigger */
static AV *
HUF_get_trigger_content(pTHX_ SV *trigger) {
    MAGIC* mg;
    if (trigger && (mg = mg_find(trigger, PERL_MAGIC_uvar)))
        return (AV*)mg->mg_obj;
    return NULL;
}

/* Delete an object from all field hashes it may occur in.  Also delete
 * the object's entry from the object registry.  This function goes in
 * the uf_set field of the uvar magic of a trigger.
 */
static I32 HUF_destroy_obj(pTHX_ IV index, SV *trigger) {
    PERL_UNUSED_ARG(index);
    /* Do nothing if the weakref wasn't undef'd.  Also don't bother
     * during global destruction.  (MY_CXT.ob_reg is sometimes funny there) */
    if (!SvROK(trigger) && (!PL_in_clean_all)) {
        dMY_CXT;
        AV* cont = HUF_get_trigger_content(aTHX_ trigger);
        SV* ob_id = *av_fetch(cont, 0, 0);
        HV* field_tab = (HV*) *av_fetch(cont, 1, 0);
        HE* ent;
        hv_iterinit(field_tab);
        while ((ent = hv_iternext(field_tab))) {
            SV* field_ref = HeVAL(ent);
            SV* field = SvRV(field_ref);
            (void) hv_delete_ent((HV*)field, ob_id, 0, 0);
        }
        /* make it safe in case we must run in global clenaup, after all */
        if (PL_in_clean_all)
            HUF_global(aTHX_ HUF_RESET); /* shoudn't be needed */
        (void) hv_delete_ent(MY_CXT.ob_reg, ob_id, 0, 0);
    }
    return 0;
}

/* Create a trigger for an object.  The trigger is a magical SV
 * that holds a weak ref to the object.  The magic fires when the object
 * expires and takes care of garbage collection in registred hashes.
 * For that purpose, the magic structure holds the original id of
 * the object, and a list (a hash, really) of hashes from which the
 * object may * have to be deleted.  The trigger is stored in the
 * object registry and is also deleted when the object expires.
 */
static SV *
HUF_new_trigger(pTHX_ SV *obj, SV *ob_id) {
    dMY_CXT;
    SV* trigger = sv_rvweaken(newRV_inc(SvRV(obj)));
    AV* cont = newAV();
    sv_2mortal((SV*)cont);
    av_store(cont, 0, SvREFCNT_inc(ob_id));
    av_store(cont, 1, (SV*)newHV());
    HUF_add_uvar_magic(aTHX_ trigger, NULL, &HUF_destroy_obj, 0, (SV*)cont);
    (void) hv_store_ent(MY_CXT.ob_reg, ob_id, trigger, 0);
    return trigger;
}

/* retrieve a trigger for obj if one exists, return NULL otherwise */
static SV *
HUF_ask_trigger(pTHX_ SV *ob_id) {
    dMY_CXT;
    HE* ent;
    if ((ent = hv_fetch_ent(MY_CXT.ob_reg, ob_id, 0, 0)))
        return HeVAL(ent);
    return NULL;
}

static SV *
HUF_get_trigger(pTHX_ SV *obj, SV *ob_id) {
    SV* trigger = HUF_ask_trigger(aTHX_ ob_id);
    if (!trigger)
        trigger = HUF_new_trigger(aTHX_ obj, ob_id);
    return( trigger);
}

/* mark an object (trigger) as having been used with a field
   (a clenup-liability)
*/
static void
HUF_mark_field(pTHX_ SV *trigger, SV *field) {
    AV* cont = HUF_get_trigger_content(aTHX_ trigger);
    HV* field_tab = (HV*) *av_fetch(cont, 1, 0);
    SV* field_ref = newRV_inc(field);
    UV field_addr = PTR2UV(field);
    (void) hv_store(field_tab, (char *)&field_addr, sizeof(field_addr), field_ref, 0);
}

/* Determine, from the value of action, whether this call may create a new
 * hash key */
#define HUF_WOULD_CREATE_KEY(x) ((x) != HV_DELETE && ((x) & (HV_FETCH_ISSTORE | HV_FETCH_LVALUE)))

/* The key exchange functions.  They communicate with S_hv_magic_uvar_xkey
 * in hv.c */
static I32 HUF_watch_key_safe(pTHX_ IV action, SV* field) {
    MAGIC* mg = mg_find(field, PERL_MAGIC_uvar);
    SV* keysv;
    if (mg && (keysv = mg->mg_obj)) {
        if (SvROK(keysv)) { /* ref key */
            SV* ob_id = HUF_obj_id(aTHX_ keysv);
            mg->mg_obj = ob_id; /* key replacement */
            if (HUF_WOULD_CREATE_KEY(action)) {
                SV* trigger = HUF_get_trigger(aTHX_ keysv, ob_id);
                HUF_mark_field(aTHX_ trigger, field);
            }
        } else if (HUF_WOULD_CREATE_KEY(action)) { /* string key */
            /* registered as object id? */
            SV* trigger;
            if (( trigger = HUF_ask_trigger(aTHX_ keysv)))
                HUF_mark_field(aTHX_ trigger, field);
        }
    } else {
        Perl_die(aTHX_ "Rogue call of 'HUF_watch_key_safe'");
    }
    return 0;
}

static I32 HUF_watch_key_id(pTHX_ IV action, SV* field) {
    MAGIC* mg = mg_find(field, PERL_MAGIC_uvar);
    SV* keysv;
    PERL_UNUSED_ARG(action);
    if (mg && (keysv = mg->mg_obj)) {
        if (SvROK(keysv)) /* ref key */
            mg->mg_obj = HUF_obj_id(aTHX_ keysv); /* key replacement */
    } else {
        Perl_die(aTHX_ "Rogue call of 'HUF_watch_key_id'");
    }
    return 0;
}

static int HUF_func_2mode( I32(* val)(pTHX_ IV, SV*)) {
    int ans = 0;
    if (val == &HUF_watch_key_id)
        ans = 1;
    if (val == &HUF_watch_key_safe)
        ans = 2;
    return(ans);
}

static I32(* HUF_mode_2func( int mode))(pTHX_ IV, SV*) {
    I32(* ans)(pTHX_ IV, SV*) = NULL;
    switch (mode) {
        case 1:
            ans = &HUF_watch_key_id;
            break;
        case 2:
            ans = &HUF_watch_key_safe;
            break;
    }
    return(ans);
}

/* see if something is a field hash */
static int
HUF_get_status(pTHX_ HV *hash) {
    int ans = 0;
    if (hash && (SvTYPE(hash) == SVt_PVHV)) {
        MAGIC* mg;
        struct ufuncs* uf;
        if ((mg = mg_find((SV*)hash, PERL_MAGIC_uvar)) &&
            (uf = (struct ufuncs *)mg->mg_ptr) &&
            (uf->uf_set == NULL)
        ) {
            ans = HUF_func_2mode(uf->uf_val);
        }
    }
    return ans;
}

/* Thread support.  These routines are called by CLONE (and nothing else) */

/* Fix entries for one object in all field hashes */
static void
HUF_fix_trigger(pTHX_ SV *trigger, SV *new_id) {
    AV* cont = HUF_get_trigger_content(aTHX_ trigger);
    HV* field_tab = (HV*) *av_fetch(cont, 1, 0);
    HV* new_tab = newHV();
    HE* ent;
    SV* old_id = *av_fetch(cont, 0, 0);
    hv_iterinit(field_tab);
    while ((ent = hv_iternext(field_tab))) {
        SV* field_ref = HeVAL(ent);
        HV* field = (HV*)SvRV(field_ref);
        UV field_addr = PTR2UV(field);
        SV* val;
        /* recreate field tab entry */
        (void) hv_store(new_tab, (char *)&field_addr, sizeof(field_addr), SvREFCNT_inc(field_ref), 0);
        /* recreate field entry, if any */
        if ((val = hv_delete_ent(field, old_id, 0, 0)))
            (void) hv_store_ent(field, new_id, SvREFCNT_inc(val), 0);
    }
    /* update the trigger */
    av_store(cont, 0, SvREFCNT_inc(new_id));
    av_store(cont, 1, (SV*)new_tab);
}

/* Go over object registry and fix all objects.  Also fix the object
 * registry.
 */
static void
HUF_fix_objects(pTHX) {
    dMY_CXT;
    I32 i, len;
    HE* ent;
    AV* oblist = (AV*)sv_2mortal((SV*)newAV());
    hv_iterinit(MY_CXT.ob_reg);
    while((ent = hv_iternext(MY_CXT.ob_reg)))
        av_push(oblist, SvREFCNT_inc(hv_iterkeysv(ent)));
    len = av_tindex(oblist);
    for (i = 0; i <= len; ++i) {
        SV* old_id = *av_fetch(oblist, i, 0);
        SV* trigger = hv_delete_ent(MY_CXT.ob_reg, old_id, 0, 0);
        SV* obj = SvRV(trigger);
        MAGIC *mg;

        SV* new_id = HUF_OBJ_ID(obj);

        /* Replace cached object ID with this new one */
        for (mg = SvMAGIC(obj); mg; mg = mg->mg_moremagic) {
            if ((mg->mg_type == PERL_MAGIC_ext) &&
                    (mg->mg_private == HUF_IDCACHE)
                ) {
                mg->mg_obj = new_id;
            }
        }

        HUF_fix_trigger(aTHX_ trigger, new_id);
        (void) hv_store_ent(MY_CXT.ob_reg, new_id, SvREFCNT_inc(trigger), 0);
    }
}

/* test support (not needed for functionality) */

static SV* counter;
I32 HUF_inc_var(pTHX_ IV index, SV* which) {
    PERL_UNUSED_ARG(index);
    PERL_UNUSED_ARG(which);
    sv_setiv(counter, 1 + SvIV(counter));
    return 0;
}

MODULE = Hash::Util::FieldHash          PACKAGE = Hash::Util::FieldHash

BOOT:
{
    HUF_global(aTHX_ HUF_INIT); /* create variables */
}

int
_fieldhash(SV* href, int mode)
PROTOTYPE: $$
CODE:
    HV* field;
    RETVAL = 0;
    if (mode &&
        href && SvROK(href) &&
        (field = (HV*)SvRV(href)) &&
        SvTYPE(field) == SVt_PVHV
    ) {
        
        HUF_add_uvar_magic(
            aTHX_
            SvRV(href),
            HUF_mode_2func(mode),
            NULL,
            0,
            NULL
        );
        RETVAL = HUF_get_status(aTHX_ field);
    }
OUTPUT:
    RETVAL

void
id(SV* ref)
PROTOTYPE: $
PPCODE:
    if (SvROK(ref)) {
        XPUSHs(HUF_obj_id(aTHX_ ref));
    } else {
        XPUSHs(ref);
    }

SV*
id_2obj(SV* id)
PROTOTYPE: $
CODE:
    SV* obj = HUF_ask_trigger(aTHX_ id);
    if (obj) {
        RETVAL = newRV_inc(SvRV(obj));
    } else {
        RETVAL = &PL_sv_undef;
    }
OUTPUT:
    RETVAL

SV*
register(SV* obj, ...)
PROTOTYPE: $@@
CODE:
    SV* trigger;
    int i;
    RETVAL = NULL;
    if (!SvROK(obj)) {
        Perl_die(aTHX_ "Attempt to register a non-ref");
    } else {
        RETVAL = newRV_inc(SvRV(obj));
    }
    trigger = HUF_get_trigger(aTHX_ obj, HUF_obj_id(aTHX_ obj));
    for (i = 1; i < items; ++ i) {
        SV* field_ref = POPs;
        if (SvROK(field_ref) && (SvTYPE(SvRV(field_ref)) == SVt_PVHV)) {
            HUF_mark_field(aTHX_ trigger, SvRV(field_ref));
        }
    }
OUTPUT:
    RETVAL

void
CLONE(char* classname)
CODE:
    if (0 == strcmp(classname, "Hash::Util::FieldHash")) {
        HUF_global(aTHX_ HUF_CLONE);
        HUF_fix_objects(aTHX);
    }

void
_active_fields(SV* obj)
PPCODE:
    if (SvROK(obj)) {
        SV* ob_id = HUF_obj_id(aTHX_ obj);
        SV* trigger = HUF_ask_trigger(aTHX_ ob_id);
        if (trigger) {
            AV* cont = HUF_get_trigger_content(aTHX_ trigger);
            HV* field_tab = (HV*) *av_fetch(cont, 1, 0);
            HE* ent;
            hv_iterinit(field_tab);
            while ((ent = hv_iternext(field_tab))) {
                HV* field = (HV*)SvRV(HeVAL(ent));
                if (hv_exists_ent(field, ob_id, 0))
                    XPUSHs(sv_2mortal(newRV_inc((SV*)field)));
            }
        }
    }

void
_test_uvar_get(SV* svref, SV* countref)
ALIAS:
_test_uvar_get = 1
_test_uvar_set = 2
_test_uvar_same = 3
CODE:
    if (SvROK(svref) && SvROK(countref)) {
        counter = SvRV(countref);
        sv_setiv(counter, 0);
        HUF_add_uvar_magic(
            aTHX_
            SvRV(svref),
            ix & 1 ? &HUF_inc_var : 0,
            ix & 2 ? &HUF_inc_var : 0,
	    0,
            SvRV(countref)
        );
    }
@


1.1
log
@Initial revision
@
text
@d1 2
d22 2
a23 1
HV* HUF_get_ob_reg(void) {
d50 2
a51 1
void HUF_global(I32 how) {
d54 1
a54 1
        MY_CXT.ob_reg = HUF_get_ob_reg();
d57 1
a57 1
        MY_CXT.ob_reg = HUF_get_ob_reg();
d60 1
a60 1
        MY_CXT.ob_reg = HUF_get_ob_reg();
d69 2
a70 1
SV* HUF_obj_id(SV* obj) {
d97 3
a99 1
void HUF_add_uvar_magic(
d114 2
a115 1
AV* HUF_get_trigger_content(SV* trigger) {
d126 2
a127 1
I32 HUF_destroy_obj(pTHX_ IV index, SV* trigger) {
d132 1
a132 1
        AV* cont = HUF_get_trigger_content(trigger);
d137 1
a137 1
        while (ent = hv_iternext(field_tab)) {
d140 1
a140 1
            hv_delete_ent((HV*)field, ob_id, 0, 0);
d144 2
a145 2
            HUF_global(HUF_RESET); /* shoudn't be needed */
        hv_delete_ent(MY_CXT.ob_reg, ob_id, 0, 0);
d158 2
a159 1
SV* HUF_new_trigger(SV* obj, SV* ob_id) {
d166 2
a167 2
    HUF_add_uvar_magic(trigger, NULL, &HUF_destroy_obj, 0, (SV*)cont);
    hv_store_ent(MY_CXT.ob_reg, ob_id, trigger, 0);
d172 2
a173 1
SV* HUF_ask_trigger(SV* ob_id) {
d176 1
a176 1
    if (ent = hv_fetch_ent(MY_CXT.ob_reg, ob_id, 0, 0))
d181 3
a183 10
/* get the trigger for an object, creating it if necessary */
SV* HUF_get_trigger0(SV* obj, SV* ob_id) {
    SV* trigger;
    if (!(trigger = HUF_ask_trigger(ob_id)))
        trigger = HUF_new_trigger(obj, ob_id);
    return trigger;
}

SV* HUF_get_trigger(SV* obj, SV* ob_id) {
    SV* trigger = HUF_ask_trigger(ob_id);
d185 1
a185 1
        trigger = HUF_new_trigger(obj, ob_id);
d192 3
a194 2
void HUF_mark_field(SV* trigger, SV* field) {
    AV* cont = HUF_get_trigger_content(trigger);
d198 1
a198 1
    hv_store(field_tab, (char *)&field_addr, sizeof(field_addr), field_ref, 0);
d207 1
a207 1
I32 HUF_watch_key_safe(pTHX_ IV action, SV* field) {
d212 1
a212 1
            SV* ob_id = HUF_obj_id(keysv);
d215 2
a216 2
                SV* trigger = HUF_get_trigger(keysv, ob_id);
                HUF_mark_field(trigger, field);
d221 2
a222 2
            if ( trigger = HUF_ask_trigger(keysv))
                HUF_mark_field( trigger, field);
d230 1
a230 1
I32 HUF_watch_key_id(pTHX_ IV action, SV* field) {
d233 1
d236 1
a236 1
            mg->mg_obj = HUF_obj_id(keysv); /* key replacement */
d243 1
a243 1
int HUF_func_2mode( I32(* val)(pTHX_ IV, SV*)) {
d252 1
a252 1
I32(* HUF_mode_2func( int mode))(pTHX_ IV, SV*) {
d266 2
a267 1
int HUF_get_status(HV* hash) {
d285 3
a287 2
void HUF_fix_trigger(SV* trigger, SV* new_id) {
    AV* cont = HUF_get_trigger_content(trigger);
d293 1
a293 1
    while (ent = hv_iternext(field_tab)) {
d299 1
a299 1
        hv_store(new_tab, (char *)&field_addr, sizeof(field_addr), SvREFCNT_inc(field_ref), 0);
d301 2
a302 2
        if (val = hv_delete_ent(field, old_id, 0, 0))
            hv_store_ent(field, new_id, SvREFCNT_inc(val), 0);
d312 2
a313 1
void HUF_fix_objects(void) {
d319 1
a319 1
    while(ent = hv_iternext(MY_CXT.ob_reg))
d321 1
a321 1
    len = av_len(oblist);
d339 2
a340 2
        HUF_fix_trigger(trigger, new_id);
        hv_store_ent(MY_CXT.ob_reg, new_id, SvREFCNT_inc(trigger), 0);
d348 2
d358 1
a358 1
    HUF_global(HUF_INIT); /* create variables */
d374 1
d376 1
a376 1
            HUF_mode_2func( mode),
d381 1
a381 1
        RETVAL = HUF_get_status(field);
d391 1
a391 1
        XPUSHs(HUF_obj_id(ref));
d400 1
a400 1
    SV* obj = HUF_ask_trigger(id);
d421 1
a421 1
    trigger = HUF_get_trigger(obj, HUF_obj_id(obj));
d425 1
a425 1
            HUF_mark_field(trigger, SvRV(field_ref));
d435 2
a436 2
        HUF_global(HUF_CLONE);
        HUF_fix_objects();
d443 2
a444 2
        SV* ob_id = HUF_obj_id(obj);
        SV* trigger = HUF_ask_trigger(ob_id);
d446 1
a446 1
            AV* cont = HUF_get_trigger_content(trigger);
d450 1
a450 1
            while (ent = hv_iternext(field_tab)) {
d460 4
d469 1
d471 3
a473 19
            &HUF_inc_var,
            NULL,
            0,
            SvRV(countref)
        );
    }

void
_test_uvar_set(SV* svref, SV* countref)
CODE:
    if (SvROK(svref) && SvROK(countref)) {
        counter = SvRV(countref);
        sv_setiv(counter, 0);
        counter = SvRV(countref);
        HUF_add_uvar_magic(
            SvRV(svref),
            NULL,
            &HUF_inc_var,
            0,
a476 16

void
_test_uvar_same(SV* svref, SV* countref)
CODE:
    if (SvROK(svref) && SvROK(countref)) {
        counter = SvRV(countref);
        sv_setiv(counter, 0);
        HUF_add_uvar_magic(
            SvRV(svref),
            &HUF_inc_var,
            &HUF_inc_var,
            0,
            NULL
        );
    }

@


1.1.1.1
log
@import perl 5.10.1
@
text
@@


1.1.1.2
log
@import perl 5.16.3 from CPAN - worked on by Andrew Fresh and myself
@
text
@a0 2
#define PERL_NO_GET_CONTEXT

d20 1
a20 2
HV *
HUF_get_ob_reg(pTHX) {
d47 1
a47 2
void
HUF_global(pTHX_ I32 how) {
d50 1
a50 1
        MY_CXT.ob_reg = HUF_get_ob_reg(aTHX);
d53 1
a53 1
        MY_CXT.ob_reg = HUF_get_ob_reg(aTHX);
d56 1
a56 1
        MY_CXT.ob_reg = HUF_get_ob_reg(aTHX);
d65 1
a65 2
SV *
HUF_obj_id(pTHX_ SV *obj) {
d92 1
a92 3
void
HUF_add_uvar_magic(
    pTHX_
d107 1
a107 2
AV *
HUF_get_trigger_content(pTHX_ SV *trigger) {
d118 1
a118 2
I32 HUF_destroy_obj(pTHX_ IV index, SV *trigger) {
    PERL_UNUSED_ARG(index);
d123 1
a123 1
        AV* cont = HUF_get_trigger_content(aTHX_ trigger);
d128 1
a128 1
        while ((ent = hv_iternext(field_tab))) {
d131 1
a131 1
            (void) hv_delete_ent((HV*)field, ob_id, 0, 0);
d135 2
a136 2
            HUF_global(aTHX_ HUF_RESET); /* shoudn't be needed */
        (void) hv_delete_ent(MY_CXT.ob_reg, ob_id, 0, 0);
d149 1
a149 2
SV *
HUF_new_trigger(pTHX_ SV *obj, SV *ob_id) {
d156 2
a157 2
    HUF_add_uvar_magic(aTHX_ trigger, NULL, &HUF_destroy_obj, 0, (SV*)cont);
    (void) hv_store_ent(MY_CXT.ob_reg, ob_id, trigger, 0);
d162 1
a162 2
SV *
HUF_ask_trigger(pTHX_ SV *ob_id) {
d165 1
a165 1
    if ((ent = hv_fetch_ent(MY_CXT.ob_reg, ob_id, 0, 0)))
d171 1
a171 2
SV *
HUF_get_trigger0(pTHX_ SV *obj, SV *ob_id) {
d173 2
a174 2
    if (!(trigger = HUF_ask_trigger(aTHX_ ob_id)))
        trigger = HUF_new_trigger(aTHX_ obj, ob_id);
d178 2
a179 3
SV *
HUF_get_trigger(pTHX_ SV *obj, SV *ob_id) {
    SV* trigger = HUF_ask_trigger(aTHX_ ob_id);
d181 1
a181 1
        trigger = HUF_new_trigger(aTHX_ obj, ob_id);
d188 2
a189 3
void
HUF_mark_field(pTHX_ SV *trigger, SV *field) {
    AV* cont = HUF_get_trigger_content(aTHX_ trigger);
d193 1
a193 1
    (void) hv_store(field_tab, (char *)&field_addr, sizeof(field_addr), field_ref, 0);
d207 1
a207 1
            SV* ob_id = HUF_obj_id(aTHX_ keysv);
d210 2
a211 2
                SV* trigger = HUF_get_trigger(aTHX_ keysv, ob_id);
                HUF_mark_field(aTHX_ trigger, field);
d216 2
a217 2
            if (( trigger = HUF_ask_trigger(aTHX_ keysv)))
                HUF_mark_field(aTHX_ trigger, field);
a227 1
    PERL_UNUSED_ARG(action);
d230 1
a230 1
            mg->mg_obj = HUF_obj_id(aTHX_ keysv); /* key replacement */
d260 1
a260 2
int
HUF_get_status(pTHX_ HV *hash) {
d278 2
a279 3
void
HUF_fix_trigger(pTHX_ SV *trigger, SV *new_id) {
    AV* cont = HUF_get_trigger_content(aTHX_ trigger);
d285 1
a285 1
    while ((ent = hv_iternext(field_tab))) {
d291 1
a291 1
        (void) hv_store(new_tab, (char *)&field_addr, sizeof(field_addr), SvREFCNT_inc(field_ref), 0);
d293 2
a294 2
        if ((val = hv_delete_ent(field, old_id, 0, 0)))
            (void) hv_store_ent(field, new_id, SvREFCNT_inc(val), 0);
d304 1
a304 2
void
HUF_fix_objects(pTHX) {
d310 1
a310 1
    while((ent = hv_iternext(MY_CXT.ob_reg)))
d330 2
a331 2
        HUF_fix_trigger(aTHX_ trigger, new_id);
        (void) hv_store_ent(MY_CXT.ob_reg, new_id, SvREFCNT_inc(trigger), 0);
a338 2
    PERL_UNUSED_ARG(index);
    PERL_UNUSED_ARG(which);
d347 1
a347 1
    HUF_global(aTHX_ HUF_INIT); /* create variables */
a362 1
            aTHX_
d364 1
a364 1
            HUF_mode_2func(mode),
d369 1
a369 1
        RETVAL = HUF_get_status(aTHX_ field);
d379 1
a379 1
        XPUSHs(HUF_obj_id(aTHX_ ref));
d388 1
a388 1
    SV* obj = HUF_ask_trigger(aTHX_ id);
d409 1
a409 1
    trigger = HUF_get_trigger(aTHX_ obj, HUF_obj_id(aTHX_ obj));
d413 1
a413 1
            HUF_mark_field(aTHX_ trigger, SvRV(field_ref));
d423 2
a424 2
        HUF_global(aTHX_ HUF_CLONE);
        HUF_fix_objects(aTHX);
d431 2
a432 2
        SV* ob_id = HUF_obj_id(aTHX_ obj);
        SV* trigger = HUF_ask_trigger(aTHX_ ob_id);
d434 1
a434 1
            AV* cont = HUF_get_trigger_content(aTHX_ trigger);
d438 1
a438 1
            while ((ent = hv_iternext(field_tab))) {
a447 4
ALIAS:
_test_uvar_get = 1
_test_uvar_set = 2
_test_uvar_same = 3
a452 1
            aTHX_
d454 19
a472 3
            ix & 1 ? &HUF_inc_var : 0,
            ix & 2 ? &HUF_inc_var : 0,
	    0,
d476 16
@


1.1.1.3
log
@Import perl-5.20.1
@
text
@d330 1
a330 1
    len = av_tindex(oblist);
@


1.1.1.4
log
@Import perl-5.24.2
@
text
@d22 1
a22 1
static HV *
d50 1
a50 1
static void
d69 1
a69 1
static SV *
d97 1
a97 1
static void
d114 1
a114 1
static AV *
d126 1
a126 1
static I32 HUF_destroy_obj(pTHX_ IV index, SV *trigger) {
d158 1
a158 1
static SV *
d172 1
a172 1
static SV *
d181 10
a190 1
static SV *
d201 1
a201 1
static void
d216 1
a216 1
static I32 HUF_watch_key_safe(pTHX_ IV action, SV* field) {
d239 1
a239 1
static I32 HUF_watch_key_id(pTHX_ IV action, SV* field) {
d252 1
a252 1
static int HUF_func_2mode( I32(* val)(pTHX_ IV, SV*)) {
d261 1
a261 1
static I32(* HUF_mode_2func( int mode))(pTHX_ IV, SV*) {
d275 1
a275 1
static int
d294 1
a294 1
static void
d321 1
a321 1
static void
@


