head	1.3;
access;
symbols
	OPENBSD_5_5:1.2.0.6
	OPENBSD_5_5_BASE:1.2
	OPENBSD_5_4:1.2.0.2
	OPENBSD_5_4_BASE:1.2
	PERL_5_16_3:1.1.1.3
	OPENBSD_5_3:1.1.1.2.0.10
	OPENBSD_5_3_BASE:1.1.1.2
	OPENBSD_5_2:1.1.1.2.0.8
	OPENBSD_5_2_BASE:1.1.1.2
	OPENBSD_5_1_BASE:1.1.1.2
	OPENBSD_5_1:1.1.1.2.0.6
	OPENBSD_5_0:1.1.1.2.0.4
	OPENBSD_5_0_BASE:1.1.1.2
	OPENBSD_4_9:1.1.1.2.0.2
	OPENBSD_4_9_BASE:1.1.1.2
	PERL_5_12_2:1.1.1.2
	OPENBSD_4_8:1.1.1.1.0.4
	OPENBSD_4_8_BASE:1.1.1.1
	OPENBSD_4_7:1.1.1.1.0.2
	OPENBSD_4_7_BASE:1.1.1.1
	PERL_5_10_1:1.1.1.1
	CPAN:1.1.1;
locks; strict;
comment	@# @;
expand	@o@;


1.3
date	2014.03.24.15.05.27;	author afresh1;	state dead;
branches;
next	1.2;

1.2
date	2013.03.06.19.21.08;	author jasper;	state Exp;
branches;
next	1.1;

1.1
date	2009.10.12.18.11.15;	author millert;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	2009.10.12.18.11.15;	author millert;	state Exp;
branches;
next	1.1.1.2;

1.1.1.2
date	2010.09.24.14.48.54;	author millert;	state Exp;
branches
	1.1.1.2.8.1;
next	1.1.1.3;

1.1.1.3
date	2013.03.25.20.08.45;	author sthen;	state Exp;
branches;
next	;

1.1.1.2.8.1
date	2013.03.06.19.23.52;	author jasper;	state Exp;
branches;
next	;


desc
@@


1.3
log
@Merge perl-5.18.2 plus local patches, remove old files

OK espie@@ sthen@@ deraadt@@
@
text
@#!./perl -w
use Test::More;

use strict;
use Hash::Util::FieldHash qw( :all);

no warnings 'misc';

plan tests => 5;

fieldhash my %h;

ok (!Internals::HvREHASH(%h), "hash doesn't start with rehash flag on");

foreach (1..10) {
  $h{"\0"x$_}++;
}

ok (!Internals::HvREHASH(%h), "10 entries doesn't trigger rehash");

foreach (11..20) {
  $h{"\0"x$_}++;
}

ok (Internals::HvREHASH(%h), "20 entries triggers rehash");




# second part using an emulation of the PERL_HASH in perl, mounting an
# attack on a pre-populated hash. This is also useful if you need normal
# keys which don't contain \0 -- suitable for stashes

use constant MASK_U32  => 2**32;
use constant HASH_SEED => 0;
use constant THRESHOLD => 14;
use constant START     => "a";

# some initial hash data
fieldhash my %h2;
my $counter= "a";
$h2{$counter++}++ while $counter ne 'cd';

ok (!Internals::HvREHASH(%h2), 
    "starting with pre-populated non-pathological hash (rehash flag if off)");

my @@keys = get_keys(\%h2);
my $buckets= buckets(\%h2);
$h2{$_}++ for @@keys;
$h2{$counter++}++ while buckets(\%h2) == $buckets; # force a split
ok (Internals::HvREHASH(%h2), 
    scalar(@@keys) . " colliding into the same bucket keys are triggering rehash after split");

# returns the number of buckets in a hash
sub buckets {
    my $hr = shift;
    my $keys_buckets= scalar(%$hr);
    if ($keys_buckets=~m!/([0-9]+)\z!) {
        return 0+$1;
    } else {
        return 8;
    }
}

sub get_keys {
    my $hr = shift;

    # the minimum of bits required to mount the attack on a hash
    my $min_bits = log(THRESHOLD)/log(2);

    # if the hash has already been populated with a significant amount
    # of entries the number of mask bits can be higher
    my $keys = scalar keys %$hr;
    my $bits = $keys ? log($keys)/log(2) : 0;
    $bits = $min_bits if $min_bits > $bits;

    $bits = int($bits) < $bits ? int($bits) + 1 : int($bits);
    # need to add 2 bits to cover the internal split cases
    $bits += 2;
    my $mask = 2**$bits-1;
    print "# using mask: $mask ($bits)\n";

    my @@keys;
    my $s = START;
    my $c = 0;
    # get 2 keys on top of the THRESHOLD
    my $hash;
    while (@@keys < THRESHOLD+2) {
        # next if exists $hash->{$s};
        $hash = hash($s);
        next unless ($hash & $mask) == 0;
        $c++;
        printf "# %2d: %5s, %10s\n", $c, $s, $hash;
        push @@keys, $s;
    } continue {
        $s++;
    }

    return @@keys;
}


# trying to provide the fastest equivalent of C macro's PERL_HASH in
# Perl - the main complication is that it uses U32 integer, which we
# can't do it perl, without doing some tricks
sub hash {
    my $s = shift;
    my @@c = split //, $s;
    my $u = HASH_SEED;
    for (@@c) {
        # (A % M) + (B % M) == (A + B) % M
        # This works because '+' produces a NV, which is big enough to hold
        # the intermediate result. We only need the % before any "^" and "&"
        # to get the result in the range for an I32.
        # and << doesn't work on NV, so using 1 << 10
        $u += ord;
        $u += $u * (1 << 10); $u %= MASK_U32;
        $u ^= $u >> 6;
    }
    $u += $u << 3;  $u %= MASK_U32;
    $u ^= $u >> 11; $u %= MASK_U32;
    $u += $u << 15; $u %= MASK_U32;
    $u;
}
@


1.2
log
@Apply patch from RedHat to address CVE-2013-1667, perl: DoS in rehashing code
For more information please refer to: http://code.activestate.com/lists/perl5-porters/191311/

ok millert@@
@
text
@@


1.1
log
@Initial revision
@
text
@a1 8

BEGIN {
    if ($ENV{PERL_CORE}) {
	chdir 't' if -d 't';
	@@INC = '../lib';
    }
}

d41 2
a42 1
%h2 = map {$_ => 1} 'a'..'cc';
d48 1
d50 1
d52 12
a63 1
    scalar(@@keys) . " colliding into the same bucket keys are triggering rehash");
@


1.1.1.1
log
@import perl 5.10.1
@
text
@@


1.1.1.2
log
@Perl 5.12.2 from CPAN
@
text
@d2 8
@


1.1.1.3
log
@import perl 5.16.3 from CPAN - worked on by Andrew Fresh and myself
@
text
@d41 1
a41 2
my $counter= "a";
$h2{$counter++}++ while $counter ne 'cd';
a46 1
my $buckets= buckets(\%h2);
a47 1
$h2{$counter++}++ while buckets(\%h2) == $buckets; # force a split
d49 1
a49 12
    scalar(@@keys) . " colliding into the same bucket keys are triggering rehash after split");

# returns the number of buckets in a hash
sub buckets {
    my $hr = shift;
    my $keys_buckets= scalar(%$hr);
    if ($keys_buckets=~m!/([0-9]+)\z!) {
        return 0+$1;
    } else {
        return 8;
    }
}
@


1.1.1.2.8.1
log
@Apply patch from RedHat to address CVE-2013-1667, perl: DoS in rehashing code
For more information please refer to: http://code.activestate.com/lists/perl5-porters/191311/

ok millert@@
@
text
@d41 1
a41 2
my $counter= "a";
$h2{$counter++}++ while $counter ne 'cd';
a46 1
my $buckets= buckets(\%h2);
a47 1
$h2{$counter++}++ while buckets(\%h2) == $buckets; # force a split
d49 1
a49 12
    scalar(@@keys) . " colliding into the same bucket keys are triggering rehash after split");

# returns the number of buckets in a hash
sub buckets {
    my $hr = shift;
    my $keys_buckets= scalar(%$hr);
    if ($keys_buckets=~m!/([0-9]+)\z!) {
        return 0+$1;
    } else {
        return 8;
    }
}
@


