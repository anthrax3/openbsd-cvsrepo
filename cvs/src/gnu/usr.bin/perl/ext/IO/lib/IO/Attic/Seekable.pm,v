head	1.8;
access;
symbols
	OPENBSD_4_8:1.7.0.18
	OPENBSD_4_8_BASE:1.7
	OPENBSD_4_7:1.7.0.14
	OPENBSD_4_7_BASE:1.7
	PERL_5_10_1:1.1.1.6
	OPENBSD_4_6:1.7.0.16
	OPENBSD_4_6_BASE:1.7
	OPENBSD_4_5:1.7.0.12
	OPENBSD_4_5_BASE:1.7
	PERL_5_10_0:1.1.1.6
	OPENBSD_4_4:1.7.0.10
	OPENBSD_4_4_BASE:1.7
	OPENBSD_4_3:1.7.0.8
	OPENBSD_4_3_BASE:1.7
	OPENBSD_4_2:1.7.0.6
	OPENBSD_4_2_BASE:1.7
	OPENBSD_4_1:1.7.0.4
	OPENBSD_4_1_BASE:1.7
	OPENBSD_4_0:1.7.0.2
	OPENBSD_4_0_BASE:1.7
	PERL_5_8_8:1.1.1.6
	OPENBSD_3_9:1.6.0.10
	OPENBSD_3_9_BASE:1.6
	OPENBSD_3_8:1.6.0.8
	OPENBSD_3_8_BASE:1.6
	OPENBSD_3_7:1.6.0.6
	OPENBSD_3_7_BASE:1.6
	PERL_5_8_6:1.1.1.5
	OPENBSD_3_6:1.6.0.4
	OPENBSD_3_6_BASE:1.6
	PERL_5_8_5:1.1.1.5
	PERL_5_8_3:1.1.1.5
	OPENBSD_3_5:1.6.0.2
	OPENBSD_3_5_BASE:1.6
	PERL_5_8_2:1.1.1.5
	OPENBSD_3_4:1.5.0.4
	OPENBSD_3_4_BASE:1.5
	OPENBSD_3_3:1.5.0.2
	OPENBSD_3_3_BASE:1.5
	PERL_5_8_0:1.1.1.4
	OPENBSD_3_2:1.4.0.6
	OPENBSD_3_2_BASE:1.4
	OPENBSD_3_1:1.4.0.4
	OPENBSD_3_1_BASE:1.4
	OPENBSD_3_0:1.4.0.2
	OPENBSD_3_0_BASE:1.4
	PERL_5_6_1:1.1.1.3
	OPENBSD_2_9:1.3.0.6
	OPENBSD_2_9_BASE:1.3
	OPENBSD_2_8:1.3.0.4
	OPENBSD_2_8_BASE:1.3
	OPENBSD_2_7:1.3.0.2
	OPENBSD_2_7_BASE:1.3
	PERL_5_6_0:1.1.1.2
	OPENBSD_2_6:1.2.0.2
	OPENBSD_2_6_BASE:1.2
	PERL_500503:1.1.1.1
	CPAN:1.1.1
	OPENBSD_2_5:1.1.0.6
	OPENBSD_2_5_BASE:1.1
	OPENBSD_2_4:1.1.0.4
	OPENBSD_2_4_BASE:1.1
	OPENBSD_2_3:1.1.0.2
	OPENBSD_2_3_BASE:1.1;
locks; strict;
comment	@# @;


1.8
date	2010.09.24.14.59.21;	author millert;	state dead;
branches;
next	1.7;

1.7
date	2006.03.28.19.23.03;	author millert;	state Exp;
branches;
next	1.6;

1.6
date	2003.12.03.03.02.30;	author millert;	state Exp;
branches;
next	1.5;

1.5
date	2002.10.27.22.25.23;	author millert;	state Exp;
branches;
next	1.4;

1.4
date	2001.05.24.18.35.11;	author millert;	state Exp;
branches;
next	1.3;

1.3
date	2000.04.06.17.05.21;	author millert;	state Exp;
branches;
next	1.2;

1.2
date	99.04.29.22.51.30;	author millert;	state Exp;
branches;
next	1.1;

1.1
date	97.11.30.07.55.26;	author millert;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	99.04.29.22.38.46;	author millert;	state Exp;
branches;
next	1.1.1.2;

1.1.1.2
date	2000.04.06.16.09.14;	author millert;	state Exp;
branches;
next	1.1.1.3;

1.1.1.3
date	2001.05.24.18.22.51;	author millert;	state Exp;
branches;
next	1.1.1.4;

1.1.1.4
date	2002.10.27.22.14.55;	author millert;	state Exp;
branches;
next	1.1.1.5;

1.1.1.5
date	2003.12.03.02.43.50;	author millert;	state Exp;
branches;
next	1.1.1.6;

1.1.1.6
date	2006.03.28.18.48.15;	author millert;	state Exp;
branches;
next	;


desc
@@


1.8
log
@remove files no longer in perl 5.12.2 (or that have moved)
@
text
@#

package IO::Seekable;

=head1 NAME

IO::Seekable - supply seek based methods for I/O objects

=head1 SYNOPSIS

    use IO::Seekable;
    package IO::Something;
    @@ISA = qw(IO::Seekable);

=head1 DESCRIPTION

C<IO::Seekable> does not have a constructor of its own as it is intended to
be inherited by other C<IO::Handle> based objects. It provides methods
which allow seeking of the file descriptors.

=over 4

=item $io->getpos

Returns an opaque value that represents the current position of the
IO::File, or C<undef> if this is not possible (eg an unseekable stream such
as a terminal, pipe or socket). If the fgetpos() function is available in
your C library it is used to implements getpos, else perl emulates getpos
using C's ftell() function.

=item $io->setpos

Uses the value of a previous getpos call to return to a previously visited
position. Returns "0 but true" on success, C<undef> on failure.

=back

See L<perlfunc> for complete descriptions of each of the following
supported C<IO::Seekable> methods, which are just front ends for the
corresponding built-in functions:

=over 4

=item $io->seek ( POS, WHENCE )

Seek the IO::File to position POS, relative to WHENCE:

=over 8

=item WHENCE=0 (SEEK_SET)

POS is absolute position. (Seek relative to the start of the file)

=item WHENCE=1 (SEEK_CUR)

POS is an offset from the current position. (Seek relative to current)

=item WHENCE=2 (SEEK_END)

POS is an offset from the end of the file. (Seek relative to end)

=back

The SEEK_* constants can be imported from the C<Fcntl> module if you
don't wish to use the numbers C<0> C<1> or C<2> in your code.

Returns C<1> upon success, C<0> otherwise.

=item $io->sysseek( POS, WHENCE )

Similar to $io->seek, but sets the IO::File's position using the system
call lseek(2) directly, so will confuse most perl IO operators except
sysread and syswrite (see L<perlfunc> for full details)

Returns the new position, or C<undef> on failure.  A position
of zero is returned as the string C<"0 but true">

=item $io->tell

Returns the IO::File's current position, or -1 on error.

=back

=head1 SEE ALSO

L<perlfunc>, 
L<perlop/"I/O Operators">,
L<IO::Handle>
L<IO::File>

=head1 HISTORY

Derived from FileHandle.pm by Graham Barr E<lt>gbarr@@pobox.comE<gt>

=cut

use 5.006_001;
use Carp;
use strict;
our($VERSION, @@EXPORT, @@ISA);
use IO::Handle ();
# XXX we can't get these from IO::Handle or we'll get prototype
# mismatch warnings on C<use POSIX; use IO::File;> :-(
use Fcntl qw(SEEK_SET SEEK_CUR SEEK_END);
require Exporter;

@@EXPORT = qw(SEEK_SET SEEK_CUR SEEK_END);
@@ISA = qw(Exporter);

$VERSION = "1.10";
$VERSION = eval $VERSION;

sub seek {
    @@_ == 3 or croak 'usage: $io->seek(POS, WHENCE)';
    seek($_[0], $_[1], $_[2]);
}

sub sysseek {
    @@_ == 3 or croak 'usage: $io->sysseek(POS, WHENCE)';
    sysseek($_[0], $_[1], $_[2]);
}

sub tell {
    @@_ == 1 or croak 'usage: $io->tell()';
    tell($_[0]);
}

1;
@


1.7
log
@merge in perl 5.8.8
@
text
@@


1.6
log
@Resolve conflicts for perl 5.8.2, remove old files, and add OpenBSD-specific scaffolding
@
text
@d110 1
a110 1
$VERSION = "1.09";
@


1.5
log
@Resolve conflicts, remove old files, merge local changes
@
text
@d110 1
a110 1
$VERSION = "1.08_00";
@


1.4
log
@merge in perl 5.6.1 with our local changes
@
text
@d37 1
a37 1
  
d44 1
a44 1
=item $io->setpos ( POS, WHENCE )
d58 1
a58 1
=item WHENCE=1 (SEEK_END)
d83 1
a83 1
  
d97 1
a97 1
require 5.005_64;
d110 2
a111 1
$VERSION = "1.08";
@


1.3
log
@perl-5.6.0 + local changes
@
text
@d21 1
a21 4
If the C functions fgetpos() and fsetpos() are available, then
C<$io-E<lt>getpos> returns an opaque value that represents the
current position of the IO::File, and C<$io-E<gt>setpos(POS)> uses
that value to return to a previously visited position.
d23 15
d42 39
a80 3
  $io->seek( POS, WHENCE )
  $io->sysseek( POS, WHENCE )
  $io->tell
d82 2
@


1.2
log
@perl5.005_03 (stock)
@
text
@d22 2
a23 2
C<IO::File::getpos> returns an opaque value that represents the
current position of the IO::File, and C<IO::File::setpos> uses
d30 3
a32 2
    seek
    tell
d43 1
a43 1
Derived from FileHandle.pm by Graham Barr E<lt>bodg@@tiuk.ti.comE<gt>
d47 1
a47 1
require 5.000;
d50 5
a54 2
use vars qw($VERSION @@EXPORT @@ISA);
use IO::Handle qw(SEEK_SET SEEK_CUR SEEK_END);
d60 1
a60 1
$VERSION = "1.06";
d63 1
a63 1
    @@_ == 3 or croak 'usage: $fh->seek(POS, WHENCE)';
d67 5
d73 1
a73 1
    @@_ == 1 or croak 'usage: $fh->tell()';
@


1.1
log
@perl 5.004_04
@
text
@d17 1
a17 1
C<IO::Seekable> does not have a constuctor of its own as is intended to
@


1.1.1.1
log
@perl5.005_03
@
text
@d17 1
a17 1
C<IO::Seekable> does not have a constructor of its own as it is intended to
@


1.1.1.2
log
@virgin perl 5.6.0
@
text
@d22 2
a23 2
C<$io-E<lt>getpos> returns an opaque value that represents the
current position of the IO::File, and C<$io-E<gt>setpos(POS)> uses
d30 2
a31 3
  $io->seek( POS, WHENCE )
  $io->sysseek( POS, WHENCE )
  $io->tell
d42 1
a42 1
Derived from FileHandle.pm by Graham Barr E<lt>gbarr@@pobox.comE<gt>
d46 1
a46 1
require 5.005_64;
d49 2
a50 5
our($VERSION, @@EXPORT, @@ISA);
use IO::Handle ();
# XXX we can't get these from IO::Handle or we'll get prototype
# mismatch warnings on C<use POSIX; use IO::File;> :-(
use Fcntl qw(SEEK_SET SEEK_CUR SEEK_END);
d56 1
a56 1
$VERSION = "1.08";
d59 1
a59 1
    @@_ == 3 or croak 'usage: $io->seek(POS, WHENCE)';
a62 5
sub sysseek {
    @@_ == 3 or croak 'usage: $io->sysseek(POS, WHENCE)';
    sysseek($_[0], $_[1], $_[2]);
}

d64 1
a64 1
    @@_ == 1 or croak 'usage: $io->tell()';
@


1.1.1.3
log
@stock perl 5.6.1
@
text
@d21 4
a24 1
=over 4
a25 15
=item $io->getpos

Returns an opaque value that represents the current position of the
IO::File, or C<undef> if this is not possible (eg an unseekable stream such
as a terminal, pipe or socket). If the fgetpos() function is available in
your C library it is used to implements getpos, else perl emulates getpos
using C's ftell() function.

=item $io->setpos

Uses the value of a previous getpos call to return to a previously visited
position. Returns "0 but true" on success, C<undef> on failure.

=back
  
d30 3
a32 39
=over 4

=item $io->setpos ( POS, WHENCE )

Seek the IO::File to position POS, relative to WHENCE:

=over 8

=item WHENCE=0 (SEEK_SET)

POS is absolute position. (Seek relative to the start of the file)

=item WHENCE=1 (SEEK_CUR)

POS is an offset from the current position. (Seek relative to current)

=item WHENCE=1 (SEEK_END)

POS is an offset from the end of the file. (Seek relative to end)

=back

The SEEK_* constants can be imported from the C<Fcntl> module if you
don't wish to use the numbers C<0> C<1> or C<2> in your code.

Returns C<1> upon success, C<0> otherwise.

=item $io->sysseek( POS, WHENCE )

Similar to $io->seek, but sets the IO::File's position using the system
call lseek(2) directly, so will confuse most perl IO operators except
sysread and syswrite (see L<perlfunc> for full details)

Returns the new position, or C<undef> on failure.  A position
of zero is returned as the string C<"0 but true">

=item $io->tell

Returns the IO::File's current position, or -1 on error.
a33 2
=back
  
@


1.1.1.4
log
@stock perl 5.8.0 from CPAN
@
text
@d37 1
a37 1

d44 1
a44 1
=item $io->seek ( POS, WHENCE )
d58 1
a58 1
=item WHENCE=2 (SEEK_END)
d83 1
a83 1

d97 1
a97 1
use 5.006_001;
d110 1
a110 2
$VERSION = "1.08_00";
$VERSION = eval $VERSION;
@


1.1.1.5
log
@perl 5.8.2 from CPAN
@
text
@d110 1
a110 1
$VERSION = "1.09";
@


1.1.1.6
log
@perl 5.8.8 import
@
text
@d110 1
a110 1
$VERSION = "1.10";
@


