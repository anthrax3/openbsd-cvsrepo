head	1.2;
access;
symbols
	OPENBSD_4_8:1.1.1.5.0.18
	OPENBSD_4_8_BASE:1.1.1.5
	OPENBSD_4_7:1.1.1.5.0.14
	OPENBSD_4_7_BASE:1.1.1.5
	PERL_5_10_1:1.1.1.5
	OPENBSD_4_6:1.1.1.5.0.16
	OPENBSD_4_6_BASE:1.1.1.5
	OPENBSD_4_5:1.1.1.5.0.12
	OPENBSD_4_5_BASE:1.1.1.5
	PERL_5_10_0:1.1.1.5
	OPENBSD_4_4:1.1.1.5.0.10
	OPENBSD_4_4_BASE:1.1.1.5
	OPENBSD_4_3:1.1.1.5.0.8
	OPENBSD_4_3_BASE:1.1.1.5
	OPENBSD_4_2:1.1.1.5.0.6
	OPENBSD_4_2_BASE:1.1.1.5
	OPENBSD_4_1:1.1.1.5.0.4
	OPENBSD_4_1_BASE:1.1.1.5
	OPENBSD_4_0:1.1.1.5.0.2
	OPENBSD_4_0_BASE:1.1.1.5
	PERL_5_8_8:1.1.1.5
	OPENBSD_3_9:1.1.1.4.0.6
	OPENBSD_3_9_BASE:1.1.1.4
	OPENBSD_3_8:1.1.1.4.0.4
	OPENBSD_3_8_BASE:1.1.1.4
	OPENBSD_3_7:1.1.1.4.0.2
	OPENBSD_3_7_BASE:1.1.1.4
	PERL_5_8_6:1.1.1.4
	OPENBSD_3_6:1.1.1.3.0.8
	OPENBSD_3_6_BASE:1.1.1.3
	PERL_5_8_5:1.1.1.3
	PERL_5_8_3:1.1.1.3
	OPENBSD_3_5:1.1.1.3.0.6
	OPENBSD_3_5_BASE:1.1.1.3
	PERL_5_8_2:1.1.1.3
	OPENBSD_3_4:1.1.1.3.0.4
	OPENBSD_3_4_BASE:1.1.1.3
	OPENBSD_3_3:1.1.1.3.0.2
	OPENBSD_3_3_BASE:1.1.1.3
	PERL_5_8_0:1.1.1.3
	OPENBSD_3_2:1.1.1.2.0.6
	OPENBSD_3_2_BASE:1.1.1.2
	OPENBSD_3_1:1.1.1.2.0.4
	OPENBSD_3_1_BASE:1.1.1.2
	OPENBSD_3_0:1.1.1.2.0.2
	OPENBSD_3_0_BASE:1.1.1.2
	PERL_5_6_1:1.1.1.2
	OPENBSD_2_9:1.1.1.1.0.6
	OPENBSD_2_9_BASE:1.1.1.1
	OPENBSD_2_8:1.1.1.1.0.4
	OPENBSD_2_8_BASE:1.1.1.1
	OPENBSD_2_7:1.1.1.1.0.2
	OPENBSD_2_7_BASE:1.1.1.1
	PERL_5_6_0:1.1.1.1
	CPAN:1.1.1;
locks; strict;
comment	@# @;


1.2
date	2010.09.24.14.59.21;	author millert;	state dead;
branches;
next	1.1;

1.1
date	2000.04.06.16.09.14;	author millert;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	2000.04.06.16.09.14;	author millert;	state Exp;
branches;
next	1.1.1.2;

1.1.1.2
date	2001.05.24.18.22.50;	author millert;	state Exp;
branches;
next	1.1.1.3;

1.1.1.3
date	2002.10.27.22.14.55;	author millert;	state Exp;
branches;
next	1.1.1.4;

1.1.1.4
date	2005.01.15.21.16.56;	author millert;	state Exp;
branches;
next	1.1.1.5;

1.1.1.5
date	2006.03.28.18.48.15;	author millert;	state Exp;
branches;
next	;


desc
@@


1.2
log
@remove files no longer in perl 5.12.2 (or that have moved)
@
text
@# IO::Poll.pm
#
# Copyright (c) 1997-8 Graham Barr <gbarr@@pobox.com>. All rights reserved.
# This program is free software; you can redistribute it and/or
# modify it under the same terms as Perl itself.

package IO::Poll;

use strict;
use IO::Handle;
use Exporter ();
our(@@ISA, @@EXPORT_OK, @@EXPORT, $VERSION);

@@ISA = qw(Exporter);
$VERSION = "0.01";

@@EXPORT = qw(poll);

@@EXPORT_OK = qw(
 POLLIN    
 POLLPRI   
 POLLOUT   
 POLLRDNORM
 POLLWRNORM
 POLLRDBAND
 POLLWRBAND
 POLLNORM  
 POLLERR   
 POLLHUP   
 POLLNVAL  
);

sub new {
    my $class = shift;

    my $self = bless [{},{}], $class;

    $self;
}

sub mask {
    my $self = shift;
    my $io = shift;
    my $fd = fileno($io);
    if(@@_) {
	my $mask = shift;
	$self->[0]{$fd} ||= {};
	if($mask) {
	    $self->[0]{$fd}{$io} = $mask;
	}
	else {
	    delete $self->[0]{$fd}{$io};
	}
    }
    elsif(exists $self->[0]{$fd}{$io}) {
	return $self->[0]{$fd}{$io};
    }
    return;
}


sub poll {
    my($self,$timeout) = @@_;

    $self->[1] = {};

    my($fd,$ref);
    my @@poll = ();

    while(($fd,$ref) = each %{$self->[0]}) {
	my $events = 0;
	map { $events |= $_ } values %{$ref};
	push(@@poll,$fd, $events);
    }

    my $ret = @@poll ? _poll(defined($timeout) ? $timeout * 1000 : -1,@@poll) : 0;

    return $ret
	unless $ret > 0;

    while(@@poll) {
	my($fd,$got) = splice(@@poll,0,2);
	$self->[1]{$fd} = $got
	    if $got;
    }

    return $ret;  
}

sub events {
    my $self = shift;
    my $io = shift;
    my $fd = fileno($io);

    exists $self->[1]{$fd} && exists $self->[0]{$fd}{$io}
	? $self->[1]{$fd} & $self->[0]{$fd}{$io}
	: 0;
}

sub remove {
    my $self = shift;
    my $io = shift;
    $self->mask($io,0);
}

sub handles {
    my $self = shift;

    return map { keys %$_ } values %{$self->[0]}
	unless(@@_);

    my $events = shift || 0;
    my($fd,$ev,$io,$mask);
    my @@handles = ();

    while(($fd,$ev) = each %{$self->[1]}) {
	if($ev & $events) {
	    while(($io,$mask) = each %{$self->[0][$fd]}) {
		push(@@handles, $io)
		    if $events & $mask;
	    }
	}
    }
    return @@handles;
}

1;

__END__

=head1 NAME

IO::Poll - Object interface to system poll call

=head1 SYNOPSIS

    use IO::Poll qw(POLLRDNORM POLLWRNORM POLLIN POLLHUP);

    $poll = new IO::Poll;

    $poll->mask($input_handle => POLLRDNORM | POLLIN | POLLHUP);
    $poll->mask($output_handle => POLLWRNORM);

    $poll->poll($timeout);

    $ev = $poll->events($input);

=head1 DESCRIPTION

C<IO::Poll> is a simple interface to the system level poll routine.

=head1 METHODS

=over 4

=item mask ( IO [, EVENT_MASK ] )

If EVENT_MASK is given, then, if EVENT_MASK is non-zero, IO is added to the
list of file descriptors and the next call to poll will check for
any event specified in EVENT_MASK. If EVENT_MASK is zero then IO will be
removed from the list of file descriptors.

If EVENT_MASK is not given then the return value will be the current
event mask value for IO.

=item poll ( [ TIMEOUT ] )

Call the system level poll routine. If TIMEOUT is not specified then the
call will block. Returns the number of handles which had events
happen, or -1 on error.

=item events ( IO )

Returns the event mask which represents the events that happend on IO
during the last call to C<poll>.

=item remove ( IO )

Remove IO from the list of file descriptors for the next poll.

=item handles( [ EVENT_MASK ] )

Returns a list of handles. If EVENT_MASK is not given then a list of all
handles known will be returned. If EVENT_MASK is given then a list
of handles will be returned which had one of the events specified by
EVENT_MASK happen during the last call ti C<poll>

=back

=head1 SEE ALSO

L<poll(2)>, L<IO::Handle>, L<IO::Select>

=head1 AUTHOR

Graham Barr. Currently maintained by the Perl Porters.  Please report all
bugs to <perl5-porters@@perl.org>.

=head1 COPYRIGHT

Copyright (c) 1997-8 Graham Barr <gbarr@@pobox.com>. All rights reserved.
This program is free software; you can redistribute it and/or
modify it under the same terms as Perl itself.

=cut
@


1.1
log
@Initial revision
@
text
@@


1.1.1.1
log
@virgin perl 5.6.0
@
text
@@


1.1.1.2
log
@stock perl 5.6.1
@
text
@a0 1

d15 1
a15 1
$VERSION = "0.05";
d17 1
a17 6
@@EXPORT = qw( POLLIN
	      POLLOUT
	      POLLERR
	      POLLHUP
	      POLLNVAL
	    );
d20 1
d22 1
d28 4
a31 1
	       );
a32 3
# [0] maps fd's to requested masks
# [1] maps fd's to returned  masks
# [2] maps fd's to handles
d36 1
a36 1
    my $self = bless [{},{},{}], $class;
d45 1
a45 1
    if (@@_) {
d47 1
d49 3
a51 4
	  $self->[0]{$fd}{$io} = $mask; # the error events are always returned
	  $self->[1]{$fd}      = 0;     # output mask
	  $self->[2]{$io}      = $io;   # remember handle
	} else {
a52 2
	  delete $self->[1]{$fd} unless %{$self->[0]{$fd}};
	  delete $self->[2]{$io};
d55 1
a55 2
    
    return unless exists $self->[0]{$fd} and exists $self->[0]{$fd}{$io};
d57 2
d67 1
a67 1
    my($fd,$mask,$iom);
d70 4
a73 4
    while(($fd,$iom) = each %{$self->[0]}) {
	$mask   = 0;
	$mask  |= $_ for values(%$iom);
	push(@@poll,$fd => $mask);
d83 2
a84 1
	$self->[1]{$fd} = $got if $got;
d94 3
a96 2
    exists $self->[1]{$fd} and exists $self->[0]{$fd}{$io} 
                ? $self->[1]{$fd} & ($self->[0]{$fd}{$io}|POLLHUP|POLLERR|POLLNVAL)
d108 3
a110 1
    return values %{$self->[2]} unless @@_;
d117 5
a121 3
	while (($io,$mask) = each %{$self->[0]{$fd}}) {
	    $mask |= POLLHUP|POLLERR|POLLNVAL;  # must allow these
	    push @@handles,$self->[2]{$io} if ($ev & $mask) & $events;
d141 2
a142 2
    $poll->mask($input_handle => POLLIN);
    $poll->mask($output_handle => POLLOUT);
@


1.1.1.3
log
@stock perl 5.8.0 from CPAN
@
text
@d16 1
a16 1
$VERSION = "0.06";
d56 3
a58 7
          delete $self->[0]{$fd}{$io};
          unless(%{$self->[0]{$fd}}) {
            # We no longer have any handles for this FD
            delete $self->[1]{$fd};
            delete $self->[0]{$fd};
          }
          delete $self->[2]{$io};
@


1.1.1.4
log
@perl 5.8.6 from CPAN
@
text
@a48 1
    return unless defined $fd;
@


1.1.1.5
log
@perl 5.8.8 import
@
text
@d16 1
a16 1
$VERSION = "0.07";
d178 1
a178 1
Returns the event mask which represents the events that happened on IO
@


