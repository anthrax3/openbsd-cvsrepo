head	1.7;
access;
symbols
	OPENBSD_4_8:1.6.0.18
	OPENBSD_4_8_BASE:1.6
	OPENBSD_4_7:1.6.0.14
	OPENBSD_4_7_BASE:1.6
	PERL_5_10_1:1.1.1.5
	OPENBSD_4_6:1.6.0.16
	OPENBSD_4_6_BASE:1.6
	OPENBSD_4_5:1.6.0.12
	OPENBSD_4_5_BASE:1.6
	PERL_5_10_0:1.1.1.5
	OPENBSD_4_4:1.6.0.10
	OPENBSD_4_4_BASE:1.6
	OPENBSD_4_3:1.6.0.8
	OPENBSD_4_3_BASE:1.6
	OPENBSD_4_2:1.6.0.6
	OPENBSD_4_2_BASE:1.6
	OPENBSD_4_1:1.6.0.4
	OPENBSD_4_1_BASE:1.6
	OPENBSD_4_0:1.6.0.2
	OPENBSD_4_0_BASE:1.6
	PERL_5_8_8:1.1.1.5
	OPENBSD_3_9:1.5.0.8
	OPENBSD_3_9_BASE:1.5
	OPENBSD_3_8:1.5.0.6
	OPENBSD_3_8_BASE:1.5
	OPENBSD_3_7:1.5.0.4
	OPENBSD_3_7_BASE:1.5
	PERL_5_8_6:1.1.1.4
	OPENBSD_3_6:1.5.0.2
	OPENBSD_3_6_BASE:1.5
	PERL_5_8_5:1.1.1.4
	PERL_5_8_3:1.1.1.3
	OPENBSD_3_5:1.4.0.6
	OPENBSD_3_5_BASE:1.4
	PERL_5_8_2:1.1.1.3
	OPENBSD_3_4:1.4.0.4
	OPENBSD_3_4_BASE:1.4
	OPENBSD_3_3:1.4.0.2
	OPENBSD_3_3_BASE:1.4
	PERL_5_8_0:1.1.1.3
	OPENBSD_3_2:1.3.0.12
	OPENBSD_3_2_BASE:1.3
	OPENBSD_3_1:1.3.0.10
	OPENBSD_3_1_BASE:1.3
	OPENBSD_3_0:1.3.0.8
	OPENBSD_3_0_BASE:1.3
	PERL_5_6_1:1.1.1.2
	OPENBSD_2_9:1.3.0.6
	OPENBSD_2_9_BASE:1.3
	OPENBSD_2_8:1.3.0.4
	OPENBSD_2_8_BASE:1.3
	OPENBSD_2_7:1.3.0.2
	OPENBSD_2_7_BASE:1.3
	PERL_5_6_0:1.1.1.2
	OPENBSD_2_6:1.2.0.2
	OPENBSD_2_6_BASE:1.2
	PERL_500503:1.1.1.1
	CPAN:1.1.1
	OPENBSD_2_5:1.1.0.6
	OPENBSD_2_5_BASE:1.1
	OPENBSD_2_4:1.1.0.4
	OPENBSD_2_4_BASE:1.1
	OPENBSD_2_3:1.1.0.2
	OPENBSD_2_3_BASE:1.1;
locks; strict;
comment	@# @;


1.7
date	2010.09.24.14.59.21;	author millert;	state dead;
branches;
next	1.6;

1.6
date	2006.03.28.19.23.03;	author millert;	state Exp;
branches;
next	1.5;

1.5
date	2004.08.09.18.09.12;	author millert;	state Exp;
branches;
next	1.4;

1.4
date	2002.10.27.22.25.23;	author millert;	state Exp;
branches;
next	1.3;

1.3
date	2000.04.06.17.05.21;	author millert;	state Exp;
branches;
next	1.2;

1.2
date	99.04.29.22.51.30;	author millert;	state Exp;
branches;
next	1.1;

1.1
date	97.11.30.07.55.25;	author millert;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	99.04.29.22.38.46;	author millert;	state Exp;
branches;
next	1.1.1.2;

1.1.1.2
date	2000.04.06.16.09.14;	author millert;	state Exp;
branches;
next	1.1.1.3;

1.1.1.3
date	2002.10.27.22.14.55;	author millert;	state Exp;
branches;
next	1.1.1.4;

1.1.1.4
date	2004.08.09.17.46.23;	author millert;	state Exp;
branches;
next	1.1.1.5;

1.1.1.5
date	2006.03.28.18.48.15;	author millert;	state Exp;
branches;
next	;


desc
@@


1.7
log
@remove files no longer in perl 5.12.2 (or that have moved)
@
text
@# IO::Pipe.pm
#
# Copyright (c) 1996-8 Graham Barr <gbarr@@pobox.com>. All rights reserved.
# This program is free software; you can redistribute it and/or
# modify it under the same terms as Perl itself.

package IO::Pipe;

use 5.006_001;

use IO::Handle;
use strict;
our($VERSION);
use Carp;
use Symbol;

$VERSION = "1.13";

sub new {
    my $type = shift;
    my $class = ref($type) || $type || "IO::Pipe";
    @@_ == 0 || @@_ == 2 or croak "usage: new $class [READFH, WRITEFH]";

    my $me = bless gensym(), $class;

    my($readfh,$writefh) = @@_ ? @@_ : $me->handles;

    pipe($readfh, $writefh)
	or return undef;

    @@{*$me} = ($readfh, $writefh);

    $me;
}

sub handles {
    @@_ == 1 or croak 'usage: $pipe->handles()';
    (IO::Pipe::End->new(), IO::Pipe::End->new());
}

my $do_spawn = $^O eq 'os2' || $^O eq 'MSWin32';

sub _doit {
    my $me = shift;
    my $rw = shift;

    my $pid = $do_spawn ? 0 : fork();

    if($pid) { # Parent
        return $pid;
    }
    elsif(defined $pid) { # Child or spawn
        my $fh;
        my $io = $rw ? \*STDIN : \*STDOUT;
        my ($mode, $save) = $rw ? "r" : "w";
        if ($do_spawn) {
          require Fcntl;
          $save = IO::Handle->new_from_fd($io, $mode);
	  my $handle = shift;
          # Close in child:
	  unless ($^O eq 'MSWin32') {
            fcntl($handle, Fcntl::F_SETFD(), 1) or croak "fcntl: $!";
	  }
          $fh = $rw ? ${*$me}[0] : ${*$me}[1];
        } else {
          shift;
          $fh = $rw ? $me->reader() : $me->writer(); # close the other end
        }
        bless $io, "IO::Handle";
        $io->fdopen($fh, $mode);
	$fh->close;

        if ($do_spawn) {
          $pid = eval { system 1, @@_ }; # 1 == P_NOWAIT
          my $err = $!;
    
          $io->fdopen($save, $mode);
          $save->close or croak "Cannot close $!";
          croak "IO::Pipe: Cannot spawn-NOWAIT: $err" if not $pid or $pid < 0;
          return $pid;
        } else {
          exec @@_ or
            croak "IO::Pipe: Cannot exec: $!";
        }
    }
    else {
        croak "IO::Pipe: Cannot fork: $!";
    }

    # NOT Reached
}

sub reader {
    @@_ >= 1 or croak 'usage: $pipe->reader( [SUB_COMMAND_ARGS] )';
    my $me = shift;

    return undef
	unless(ref($me) || ref($me = $me->new));

    my $fh  = ${*$me}[0];
    my $pid;
    $pid = $me->_doit(0, $fh, @@_)
        if(@@_);

    close ${*$me}[1];
    bless $me, ref($fh);
    *$me = *$fh;          # Alias self to handle
    $me->fdopen($fh->fileno,"r")
	unless defined($me->fileno);
    bless $fh;                  # Really wan't un-bless here
    ${*$me}{'io_pipe_pid'} = $pid
        if defined $pid;

    $me;
}

sub writer {
    @@_ >= 1 or croak 'usage: $pipe->writer( [SUB_COMMAND_ARGS] )';
    my $me = shift;

    return undef
	unless(ref($me) || ref($me = $me->new));

    my $fh  = ${*$me}[1];
    my $pid;
    $pid = $me->_doit(1, $fh, @@_)
        if(@@_);

    close ${*$me}[0];
    bless $me, ref($fh);
    *$me = *$fh;          # Alias self to handle
    $me->fdopen($fh->fileno,"w")
	unless defined($me->fileno);
    bless $fh;                  # Really wan't un-bless here
    ${*$me}{'io_pipe_pid'} = $pid
        if defined $pid;

    $me;
}

package IO::Pipe::End;

our(@@ISA);

@@ISA = qw(IO::Handle);

sub close {
    my $fh = shift;
    my $r = $fh->SUPER::close(@@_);

    waitpid(${*$fh}{'io_pipe_pid'},0)
	if(defined ${*$fh}{'io_pipe_pid'});

    $r;
}

1;

__END__

=head1 NAME

IO::Pipe - supply object methods for pipes

=head1 SYNOPSIS

	use IO::Pipe;

	$pipe = new IO::Pipe;

	if($pid = fork()) { # Parent
	    $pipe->reader();

	    while(<$pipe>) {
		...
	    }

	}
	elsif(defined $pid) { # Child
	    $pipe->writer();

	    print $pipe ...
	}

	or

	$pipe = new IO::Pipe;

	$pipe->reader(qw(ls -l));

	while(<$pipe>) {
	    ...
	}

=head1 DESCRIPTION

C<IO::Pipe> provides an interface to creating pipes between
processes.

=head1 CONSTRUCTOR

=over 4

=item new ( [READER, WRITER] )

Creates an C<IO::Pipe>, which is a reference to a newly created symbol
(see the C<Symbol> package). C<IO::Pipe::new> optionally takes two
arguments, which should be objects blessed into C<IO::Handle>, or a
subclass thereof. These two objects will be used for the system call
to C<pipe>. If no arguments are given then method C<handles> is called
on the new C<IO::Pipe> object.

These two handles are held in the array part of the GLOB until either
C<reader> or C<writer> is called.

=back

=head1 METHODS

=over 4

=item reader ([ARGS])

The object is re-blessed into a sub-class of C<IO::Handle>, and becomes a
handle at the reading end of the pipe. If C<ARGS> are given then C<fork>
is called and C<ARGS> are passed to exec.

=item writer ([ARGS])

The object is re-blessed into a sub-class of C<IO::Handle>, and becomes a
handle at the writing end of the pipe. If C<ARGS> are given then C<fork>
is called and C<ARGS> are passed to exec.

=item handles ()

This method is called during construction by C<IO::Pipe::new>
on the newly created C<IO::Pipe> object. It returns an array of two objects
blessed into C<IO::Pipe::End>, or a subclass thereof.

=back

=head1 SEE ALSO

L<IO::Handle>

=head1 AUTHOR

Graham Barr. Currently maintained by the Perl Porters.  Please report all
bugs to <perl5-porters@@perl.org>.

=head1 COPYRIGHT

Copyright (c) 1996-8 Graham Barr <gbarr@@pobox.com>. All rights reserved.
This program is free software; you can redistribute it and/or
modify it under the same terms as Perl itself.

=cut
@


1.6
log
@merge in perl 5.8.8
@
text
@@


1.5
log
@merge 5.8.5 into HEAD
remove now-unused files
crank libperl shared library major number
update Makefile.bsd-wrapper
tweak openbsd hints file for arm and m68k
@
text
@d17 1
a17 1
$VERSION = "1.123";
@


1.4
log
@Resolve conflicts, remove old files, merge local changes
@
text
@d17 1
a17 1
$VERSION = "1.122";
d101 2
a102 1
    my $pid = $me->_doit(0, $fh, @@_)
d125 2
a126 1
    my $pid = $me->_doit(1, $fh, @@_)
@


1.3
log
@perl-5.6.0 + local changes
@
text
@d9 1
a9 1
require 5.005_64;
d17 1
a17 1
$VERSION = "1.121";
d41 1
a41 1
my $do_spawn = $^O eq 'os2';
d59 1
d61 3
a63 1
          fcntl(shift, Fcntl::F_SETFD(), 1) or croak "fcntl: $!";
d172 2
a173 2
	    while(<$pipe> {
		....
d180 1
a180 1
	    print $pipe ....
d190 1
a190 1
	    ....
d204 1
a204 1
Creates a C<IO::Pipe>, which is a reference to a newly created symbol
@


1.2
log
@perl5.005_03 (stock)
@
text
@d3 2
a4 2
# Copyright (c) 1996 Graham Barr <Graham.Barr@@tiuk.ti.com>. All rights
# reserved. This program is free software; you can redistribute it and/or
d9 1
a9 1
require 5.000;
d13 1
a13 1
use vars qw($VERSION);
d17 1
a17 1
$VERSION = "1.0902";
d68 1
a68 1
        $fh->close;
d91 1
a91 1
    @@_ >= 1 or croak 'usage: $pipe->reader()';
d93 4
d104 2
d114 1
a114 1
    @@_ >= 1 or croak 'usage: $pipe->writer()';
d116 4
d127 2
d138 1
a138 1
use vars qw(@@ISA);
d158 1
a158 1
IO::pipe - supply object methods for pipes
d243 2
a244 1
Graham Barr <bodg@@tiuk.ti.com>
d248 3
a250 3
Copyright (c) 1996 Graham Barr. All rights reserved. This program is free
software; you can redistribute it and/or modify it under the same terms
as Perl itself.
@


1.1
log
@perl 5.004_04
@
text
@d17 1
a17 1
$VERSION = "1.0901";
d99 1
a99 1
    *{*$me} = *{*$fh};          # Alias self to handle
d116 1
a116 1
    *{*$me} = *{*$fh};          # Alias self to handle
d180 1
a180 1
C<IO::Pipe> provides an interface to createing pipes between
d183 1
a183 1
=head1 CONSTRCUTOR
@


1.1.1.1
log
@perl5.005_03
@
text
@d17 1
a17 1
$VERSION = "1.0902";
d99 1
a99 1
    *$me = *$fh;          # Alias self to handle
d116 1
a116 1
    *$me = *$fh;          # Alias self to handle
d180 1
a180 1
C<IO::Pipe> provides an interface to creating pipes between
d183 1
a183 1
=head1 CONSTRUCTOR
@


1.1.1.2
log
@virgin perl 5.6.0
@
text
@d3 2
a4 2
# Copyright (c) 1996-8 Graham Barr <gbarr@@pobox.com>. All rights reserved.
# This program is free software; you can redistribute it and/or
d9 1
a9 1
require 5.005_64;
d13 1
a13 1
our($VERSION);
d17 1
a17 1
$VERSION = "1.121";
d68 1
a68 1
	$fh->close;
d91 1
a91 1
    @@_ >= 1 or croak 'usage: $pipe->reader( [SUB_COMMAND_ARGS] )';
a92 4

    return undef
	unless(ref($me) || ref($me = $me->new));

a99 2
    $me->fdopen($fh->fileno,"r")
	unless defined($me->fileno);
d108 1
a108 1
    @@_ >= 1 or croak 'usage: $pipe->writer( [SUB_COMMAND_ARGS] )';
a109 4

    return undef
	unless(ref($me) || ref($me = $me->new));

a116 2
    $me->fdopen($fh->fileno,"w")
	unless defined($me->fileno);
d126 1
a126 1
our(@@ISA);
d146 1
a146 1
IO::Pipe - supply object methods for pipes
d231 1
a231 2
Graham Barr. Currently maintained by the Perl Porters.  Please report all
bugs to <perl5-porters@@perl.org>.
d235 3
a237 3
Copyright (c) 1996-8 Graham Barr <gbarr@@pobox.com>. All rights reserved.
This program is free software; you can redistribute it and/or
modify it under the same terms as Perl itself.
@


1.1.1.3
log
@stock perl 5.8.0 from CPAN
@
text
@d9 1
a9 1
use 5.006_001;
d17 1
a17 1
$VERSION = "1.122";
d41 1
a41 1
my $do_spawn = $^O eq 'os2' || $^O eq 'MSWin32';
a58 1
	  my $handle = shift;
d60 1
a60 3
	  unless ($^O eq 'MSWin32') {
            fcntl($handle, Fcntl::F_SETFD(), 1) or croak "fcntl: $!";
	  }
d169 2
a170 2
	    while(<$pipe>) {
		...
d177 1
a177 1
	    print $pipe ...
d187 1
a187 1
	    ...
d201 1
a201 1
Creates an C<IO::Pipe>, which is a reference to a newly created symbol
@


1.1.1.4
log
@Import of stock perl 5.8.5
@
text
@d17 1
a17 1
$VERSION = "1.123";
d101 1
a101 2
    my $pid;
    $pid = $me->_doit(0, $fh, @@_)
d124 1
a124 2
    my $pid;
    $pid = $me->_doit(1, $fh, @@_)
@


1.1.1.5
log
@perl 5.8.8 import
@
text
@d17 1
a17 1
$VERSION = "1.13";
@


