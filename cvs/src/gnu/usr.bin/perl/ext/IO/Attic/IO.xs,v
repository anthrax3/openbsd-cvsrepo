head	1.10;
access;
symbols
	OPENBSD_4_8:1.9.0.4
	OPENBSD_4_8_BASE:1.9
	OPENBSD_4_7:1.9.0.2
	OPENBSD_4_7_BASE:1.9
	PERL_5_10_1:1.1.1.8
	OPENBSD_4_6:1.8.0.6
	OPENBSD_4_6_BASE:1.8
	OPENBSD_4_5:1.8.0.2
	OPENBSD_4_5_BASE:1.8
	PERL_5_10_0:1.1.1.7
	OPENBSD_4_4:1.7.0.10
	OPENBSD_4_4_BASE:1.7
	OPENBSD_4_3:1.7.0.8
	OPENBSD_4_3_BASE:1.7
	OPENBSD_4_2:1.7.0.6
	OPENBSD_4_2_BASE:1.7
	OPENBSD_4_1:1.7.0.4
	OPENBSD_4_1_BASE:1.7
	OPENBSD_4_0:1.7.0.2
	OPENBSD_4_0_BASE:1.7
	PERL_5_8_8:1.1.1.6
	OPENBSD_3_9:1.6.0.6
	OPENBSD_3_9_BASE:1.6
	OPENBSD_3_8:1.6.0.4
	OPENBSD_3_8_BASE:1.6
	OPENBSD_3_7:1.6.0.2
	OPENBSD_3_7_BASE:1.6
	PERL_5_8_6:1.1.1.5
	OPENBSD_3_6:1.5.0.8
	OPENBSD_3_6_BASE:1.5
	PERL_5_8_5:1.1.1.4
	PERL_5_8_3:1.1.1.4
	OPENBSD_3_5:1.5.0.6
	OPENBSD_3_5_BASE:1.5
	PERL_5_8_2:1.1.1.4
	OPENBSD_3_4:1.5.0.4
	OPENBSD_3_4_BASE:1.5
	OPENBSD_3_3:1.5.0.2
	OPENBSD_3_3_BASE:1.5
	PERL_5_8_0:1.1.1.4
	OPENBSD_3_2:1.4.0.6
	OPENBSD_3_2_BASE:1.4
	OPENBSD_3_1:1.4.0.4
	OPENBSD_3_1_BASE:1.4
	OPENBSD_3_0:1.4.0.2
	OPENBSD_3_0_BASE:1.4
	PERL_5_6_1:1.1.1.3
	OPENBSD_2_9:1.3.0.6
	OPENBSD_2_9_BASE:1.3
	OPENBSD_2_8:1.3.0.4
	OPENBSD_2_8_BASE:1.3
	OPENBSD_2_7:1.3.0.2
	OPENBSD_2_7_BASE:1.3
	PERL_5_6_0:1.1.1.2
	OPENBSD_2_6:1.2.0.2
	OPENBSD_2_6_BASE:1.2
	PERL_500503:1.1.1.1
	CPAN:1.1.1
	OPENBSD_2_5:1.1.0.6
	OPENBSD_2_5_BASE:1.1
	OPENBSD_2_4:1.1.0.4
	OPENBSD_2_4_BASE:1.1
	OPENBSD_2_3:1.1.0.2
	OPENBSD_2_3_BASE:1.1;
locks; strict;
comment	@# @;


1.10
date	2010.09.24.14.59.21;	author millert;	state dead;
branches;
next	1.9;

1.9
date	2009.10.12.18.24.29;	author millert;	state Exp;
branches;
next	1.8;

1.8
date	2008.09.29.17.36.04;	author millert;	state Exp;
branches;
next	1.7;

1.7
date	2006.03.28.19.23.03;	author millert;	state Exp;
branches;
next	1.6;

1.6
date	2005.01.15.21.30.27;	author millert;	state Exp;
branches;
next	1.5;

1.5
date	2002.10.27.22.25.23;	author millert;	state Exp;
branches;
next	1.4;

1.4
date	2001.05.24.18.35.11;	author millert;	state Exp;
branches;
next	1.3;

1.3
date	2000.04.06.17.05.19;	author millert;	state Exp;
branches;
next	1.2;

1.2
date	99.04.29.22.51.29;	author millert;	state Exp;
branches;
next	1.1;

1.1
date	97.11.30.07.55.22;	author millert;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	99.04.29.22.38.45;	author millert;	state Exp;
branches;
next	1.1.1.2;

1.1.1.2
date	2000.04.06.16.09.13;	author millert;	state Exp;
branches;
next	1.1.1.3;

1.1.1.3
date	2001.05.24.18.22.50;	author millert;	state Exp;
branches;
next	1.1.1.4;

1.1.1.4
date	2002.10.27.22.14.55;	author millert;	state Exp;
branches;
next	1.1.1.5;

1.1.1.5
date	2005.01.15.21.16.56;	author millert;	state Exp;
branches;
next	1.1.1.6;

1.1.1.6
date	2006.03.28.18.48.15;	author millert;	state Exp;
branches;
next	1.1.1.7;

1.1.1.7
date	2008.09.29.17.18.22;	author millert;	state Exp;
branches;
next	1.1.1.8;

1.1.1.8
date	2009.10.12.18.11.20;	author millert;	state Exp;
branches;
next	;


desc
@perl 5.004_04
@


1.10
log
@remove files no longer in perl 5.12.2 (or that have moved)
@
text
@/*
 * Copyright (c) 1997-8 Graham Barr <gbarr@@pobox.com>. All rights reserved.
 * This program is free software; you can redistribute it and/or
 * modify it under the same terms as Perl itself.
 */

#define PERL_EXT_IO

#define PERL_NO_GET_CONTEXT
#include "EXTERN.h"
#define PERLIO_NOT_STDIO 1
#include "perl.h"
#include "XSUB.h"
#include "poll.h"
#ifdef I_UNISTD
#  include <unistd.h>
#endif
#if defined(I_FCNTL) || defined(HAS_FCNTL)
#  include <fcntl.h>
#endif

#ifndef SIOCATMARK
#   ifdef I_SYS_SOCKIO
#       include <sys/sockio.h>
#   endif
#endif

#ifdef PerlIO
#if defined(MACOS_TRADITIONAL) && defined(USE_SFIO)
#define PERLIO_IS_STDIO 1
#undef setbuf
#undef setvbuf
#define setvbuf		_stdsetvbuf
#define setbuf(f,b)	( __sf_setbuf(f,b) )
#endif
typedef int SysRet;
typedef PerlIO * InputStream;
typedef PerlIO * OutputStream;
#else
#define PERLIO_IS_STDIO 1
typedef int SysRet;
typedef FILE * InputStream;
typedef FILE * OutputStream;
#endif

#define MY_start_subparse(fmt,flags) start_subparse(fmt,flags)

#ifndef gv_stashpvn
#define gv_stashpvn(str,len,flags) gv_stashpv(str,flags)
#endif

#ifndef __attribute__noreturn__
#  define __attribute__noreturn__
#endif

#ifndef NORETURN_FUNCTION_END
# define NORETURN_FUNCTION_END /* NOT REACHED */ return 0
#endif

static int not_here(const char *s) __attribute__noreturn__;
static int
not_here(const char *s)
{
    croak("%s not implemented on this architecture", s);
    NORETURN_FUNCTION_END;
}


#ifndef PerlIO
#define PerlIO_fileno(f) fileno(f)
#endif

static int
io_blocking(pTHX_ InputStream f, int block)
{
#if defined(HAS_FCNTL)
    int RETVAL;
    if(!f) {
	errno = EBADF;
	return -1;
    }
    RETVAL = fcntl(PerlIO_fileno(f), F_GETFL, 0);
    if (RETVAL >= 0) {
	int mode = RETVAL;
	int newmode = mode;
#ifdef O_NONBLOCK
	/* POSIX style */

# ifndef O_NDELAY
#  define O_NDELAY O_NONBLOCK
# endif
	/* Note: UNICOS and UNICOS/mk a F_GETFL returns an O_NDELAY
	 * after a successful F_SETFL of an O_NONBLOCK. */
	RETVAL = RETVAL & (O_NONBLOCK | O_NDELAY) ? 0 : 1;

	if (block == 0) {
	    newmode &= ~O_NDELAY;
	    newmode |= O_NONBLOCK;
	} else if (block > 0) {
	    newmode &= ~(O_NDELAY|O_NONBLOCK);
	}
#else
	/* Not POSIX - better have O_NDELAY or we can't cope.
	 * for BSD-ish machines this is an acceptable alternative
	 * for SysV we can't tell "would block" from EOF but that is
	 * the way SysV is...
	 */
	RETVAL = RETVAL & O_NDELAY ? 0 : 1;

	if (block == 0) {
	    newmode |= O_NDELAY;
	} else if (block > 0) {
	    newmode &= ~O_NDELAY;
	}
#endif
	if (newmode != mode) {
	    const int ret = fcntl(PerlIO_fileno(f),F_SETFL,newmode);
	    if (ret < 0)
		RETVAL = ret;
	}
    }
    return RETVAL;
#else
#   ifdef WIN32
    char flags = (char)block;
    return ioctl(PerlIO_fileno(f), FIONBIO, &flags);
#   else
    return -1;
#   endif
#endif
}

MODULE = IO	PACKAGE = IO::Seekable	PREFIX = f

void
fgetpos(handle)
	InputStream	handle
    CODE:
	if (handle) {
#ifdef PerlIO
#if PERL_VERSION < 8
	    Fpos_t pos;
	    ST(0) = sv_newmortal();
	    if (PerlIO_getpos(handle, &pos) != 0) {
		ST(0) = &PL_sv_undef;
	    }
	    else {
		sv_setpvn(ST(0), (char *)&pos, sizeof(Fpos_t));
	    }
#else
	    ST(0) = sv_newmortal();
	    if (PerlIO_getpos(handle, ST(0)) != 0) {
		ST(0) = &PL_sv_undef;
	    }
#endif
#else
	    Fpos_t pos;
	    if (fgetpos(handle, &pos)) {
		ST(0) = &PL_sv_undef;
	    } else {
		ST(0) = sv_2mortal(newSVpvn((char*)&pos, sizeof(Fpos_t)));
	    }
#endif
	}
	else {
	    errno = EINVAL;
	    ST(0) = &PL_sv_undef;
	}

SysRet
fsetpos(handle, pos)
	InputStream	handle
	SV *		pos
    CODE:
	if (handle) {
#ifdef PerlIO
#if PERL_VERSION < 8
	    char *p;
	    STRLEN len;
	    if (SvOK(pos) && (p = SvPV(pos,len)) && len == sizeof(Fpos_t)) {
		RETVAL = PerlIO_setpos(handle, (Fpos_t*)p);
	    }
	    else {
		RETVAL = -1;
		errno = EINVAL;
	    }
#else
	    RETVAL = PerlIO_setpos(handle, pos);
#endif
#else
	    char *p;
	    STRLEN len;
	    if ((p = SvPV(pos,len)) && len == sizeof(Fpos_t)) {
		RETVAL = fsetpos(handle, (Fpos_t*)p);
	    }
	    else {
		RETVAL = -1;
		errno = EINVAL;
	    }
#endif
	}
	else {
	    RETVAL = -1;
	    errno = EINVAL;
	}
    OUTPUT:
	RETVAL

MODULE = IO	PACKAGE = IO::File	PREFIX = f

void
new_tmpfile(packname = "IO::File")
    const char * packname
    PREINIT:
	OutputStream fp;
	GV *gv;
    CODE:
#ifdef PerlIO
	fp = PerlIO_tmpfile();
#else
	fp = tmpfile();
#endif
	gv = (GV*)SvREFCNT_inc(newGVgen(packname));
	if (gv)
	    hv_delete(GvSTASH(gv), GvNAME(gv), GvNAMELEN(gv), G_DISCARD);
	if (gv && do_open(gv, "+>&", 3, FALSE, 0, 0, fp)) {
	    ST(0) = sv_2mortal(newRV((SV*)gv));
	    sv_bless(ST(0), gv_stashpv(packname, TRUE));
	    SvREFCNT_dec(gv);   /* undo increment in newRV() */
	}
	else {
	    ST(0) = &PL_sv_undef;
	    SvREFCNT_dec(gv);
	}

MODULE = IO	PACKAGE = IO::Poll

void
_poll(timeout,...)
	int timeout;
PPCODE:
{
#ifdef HAS_POLL
    const int nfd = (items - 1) / 2;
    SV *tmpsv = NEWSV(999,nfd * sizeof(struct pollfd));
    struct pollfd *fds = (struct pollfd *)SvPVX(tmpsv);
    int i,j,ret;
    for(i=1, j=0  ; j < nfd ; j++) {
	fds[j].fd = SvIV(ST(i));
	i++;
	fds[j].events = (short)SvIV(ST(i));
	i++;
	fds[j].revents = 0;
    }
    if((ret = poll(fds,nfd,timeout)) >= 0) {
	for(i=1, j=0 ; j < nfd ; j++) {
	    sv_setiv(ST(i), fds[j].fd); i++;
	    sv_setiv(ST(i), fds[j].revents); i++;
	}
    }
    SvREFCNT_dec(tmpsv);
    XSRETURN_IV(ret);
#else
	not_here("IO::Poll::poll");
#endif
}

MODULE = IO	PACKAGE = IO::Handle	PREFIX = io_

void
io_blocking(handle,blk=-1)
	InputStream	handle
	int		blk
PROTOTYPE: $;$
CODE:
{
    const int ret = io_blocking(aTHX_ handle, items == 1 ? -1 : blk ? 1 : 0);
    if(ret >= 0)
	XSRETURN_IV(ret);
    else
	XSRETURN_UNDEF;
}

MODULE = IO	PACKAGE = IO::Handle	PREFIX = f

int
ungetc(handle, c)
	InputStream	handle
	int		c
    CODE:
	if (handle)
#ifdef PerlIO
	    RETVAL = PerlIO_ungetc(handle, c);
#else
	    RETVAL = ungetc(c, handle);
#endif
	else {
	    RETVAL = -1;
	    errno = EINVAL;
	}
    OUTPUT:
	RETVAL

int
ferror(handle)
	InputStream	handle
    CODE:
	if (handle)
#ifdef PerlIO
	    RETVAL = PerlIO_error(handle);
#else
	    RETVAL = ferror(handle);
#endif
	else {
	    RETVAL = -1;
	    errno = EINVAL;
	}
    OUTPUT:
	RETVAL

int
clearerr(handle)
	InputStream	handle
    CODE:
	if (handle) {
#ifdef PerlIO
	    PerlIO_clearerr(handle);
#else
	    clearerr(handle);
#endif
	    RETVAL = 0;
	}
	else {
	    RETVAL = -1;
	    errno = EINVAL;
	}
    OUTPUT:
	RETVAL

int
untaint(handle)
       SV *	handle
    CODE:
#ifdef IOf_UNTAINT
	IO * io;
	io = sv_2io(handle);
	if (io) {
	    IoFLAGS(io) |= IOf_UNTAINT;
	    RETVAL = 0;
	}
        else {
#endif
	    RETVAL = -1;
	    errno = EINVAL;
#ifdef IOf_UNTAINT
	}
#endif
    OUTPUT:
	RETVAL

SysRet
fflush(handle)
	OutputStream	handle
    CODE:
	if (handle)
#ifdef PerlIO
	    RETVAL = PerlIO_flush(handle);
#else
	    RETVAL = Fflush(handle);
#endif
	else {
	    RETVAL = -1;
	    errno = EINVAL;
	}
    OUTPUT:
	RETVAL

void
setbuf(handle, ...)
	OutputStream	handle
    CODE:
	if (handle)
#ifdef PERLIO_IS_STDIO
        {
	    char *buf = items == 2 && SvPOK(ST(1)) ?
	      sv_grow(ST(1), BUFSIZ) : 0;
	    setbuf(handle, buf);
	}
#else
	    not_here("IO::Handle::setbuf");
#endif

SysRet
setvbuf(...)
    CODE:
	if (items != 4)
            Perl_croak(aTHX_ "Usage: IO::Handle::setvbuf(handle, buf, type, size)");
#if defined(PERLIO_IS_STDIO) && defined(_IOFBF) && defined(HAS_SETVBUF)
    {
        OutputStream	handle = 0;
	char *		buf = SvPOK(ST(1)) ? sv_grow(ST(1), SvIV(ST(3))) : 0;
	int		type;
	int		size;

	if (items == 4) {
	    handle = IoOFP(sv_2io(ST(0)));
	    buf    = SvPOK(ST(1)) ? sv_grow(ST(1), SvIV(ST(3))) : 0;
	    type   = (int)SvIV(ST(2));
	    size   = (int)SvIV(ST(3));
	}
	if (!handle)			/* Try input stream. */
	    handle = IoIFP(sv_2io(ST(0)));
	if (items == 4 && handle)
	    RETVAL = setvbuf(handle, buf, type, size);
	else {
	    RETVAL = -1;
	    errno = EINVAL;
	}
    }
#else
	RETVAL = (SysRet) not_here("IO::Handle::setvbuf");
#endif
    OUTPUT:
	RETVAL


SysRet
fsync(handle)
	OutputStream handle
    CODE:
#ifdef HAS_FSYNC
	if(handle)
	    RETVAL = fsync(PerlIO_fileno(handle));
	else {
	    RETVAL = -1;
	    errno = EINVAL;
	}
#else
	RETVAL = (SysRet) not_here("IO::Handle::sync");
#endif
    OUTPUT:
	RETVAL


MODULE = IO	PACKAGE = IO::Socket

SysRet
sockatmark (sock)
   InputStream sock
   PROTOTYPE: $
   PREINIT:
     int fd;
   CODE:
   {
     fd = PerlIO_fileno(sock);
#ifdef HAS_SOCKATMARK
     RETVAL = sockatmark(fd);
#else
     {
       int flag = 0;
#   ifdef SIOCATMARK
#     if defined(NETWARE) || defined(WIN32)
       if (ioctl(fd, SIOCATMARK, (void*)&flag) != 0)
#     else
       if (ioctl(fd, SIOCATMARK, &flag) != 0)
#     endif
	 XSRETURN_UNDEF;
#   else
       not_here("IO::Socket::atmark");
#   endif
       RETVAL = flag;
     }
#endif
   }
   OUTPUT:
     RETVAL

BOOT:
{
    HV *stash;
    /*
     * constant subs for IO::Poll
     */
    stash = gv_stashpvn("IO::Poll", 8, TRUE);
#ifdef	POLLIN
	newCONSTSUB(stash,"POLLIN",newSViv(POLLIN));
#endif
#ifdef	POLLPRI
        newCONSTSUB(stash,"POLLPRI", newSViv(POLLPRI));
#endif
#ifdef	POLLOUT
        newCONSTSUB(stash,"POLLOUT", newSViv(POLLOUT));
#endif
#ifdef	POLLRDNORM
        newCONSTSUB(stash,"POLLRDNORM", newSViv(POLLRDNORM));
#endif
#ifdef	POLLWRNORM
        newCONSTSUB(stash,"POLLWRNORM", newSViv(POLLWRNORM));
#endif
#ifdef	POLLRDBAND
        newCONSTSUB(stash,"POLLRDBAND", newSViv(POLLRDBAND));
#endif
#ifdef	POLLWRBAND
        newCONSTSUB(stash,"POLLWRBAND", newSViv(POLLWRBAND));
#endif
#ifdef	POLLNORM
        newCONSTSUB(stash,"POLLNORM", newSViv(POLLNORM));
#endif
#ifdef	POLLERR
        newCONSTSUB(stash,"POLLERR", newSViv(POLLERR));
#endif
#ifdef	POLLHUP
        newCONSTSUB(stash,"POLLHUP", newSViv(POLLHUP));
#endif
#ifdef	POLLNVAL
        newCONSTSUB(stash,"POLLNVAL", newSViv(POLLNVAL));
#endif
    /*
     * constant subs for IO::Handle
     */
    stash = gv_stashpvn("IO::Handle", 10, TRUE);
#ifdef _IOFBF
        newCONSTSUB(stash,"_IOFBF", newSViv(_IOFBF));
#endif
#ifdef _IOLBF
        newCONSTSUB(stash,"_IOLBF", newSViv(_IOLBF));
#endif
#ifdef _IONBF
        newCONSTSUB(stash,"_IONBF", newSViv(_IONBF));
#endif
#ifdef SEEK_SET
        newCONSTSUB(stash,"SEEK_SET", newSViv(SEEK_SET));
#endif
#ifdef SEEK_CUR
        newCONSTSUB(stash,"SEEK_CUR", newSViv(SEEK_CUR));
#endif
#ifdef SEEK_END
        newCONSTSUB(stash,"SEEK_END", newSViv(SEEK_END));
#endif
}

@


1.9
log
@Merge in perl 5.10.1
@
text
@@


1.8
log
@fix conflicts and merge in local changes to perl 5.10.0
@
text
@d124 4
d129 1
d213 1
a213 1
    char *	packname
@


1.7
log
@merge in perl 5.8.8
@
text
@a135 1
	    ST(0) = sv_newmortal();
d138 1
d146 1
d219 3
a221 2
	hv_delete(GvSTASH(gv), GvNAME(gv), GvNAMELEN(gv), G_DISCARD);
	if (do_open(gv, "+>&", 3, FALSE, 0, 0, fp)) {
@


1.6
log
@sync in-tree perl with 5.8.6
@
text
@d52 9
d62 1
a62 1
not_here(char *s)
d65 1
a65 1
    return -1;
d117 1
a117 2
	    int ret;
	    ret = fcntl(PerlIO_fileno(f),F_SETFL,newmode);
d136 10
a145 1
	    ST(0) = sv_2mortal(newSV(0));
d149 1
d151 1
d155 1
a155 1
		ST(0) = sv_2mortal(newSVpv((char*)&pos, sizeof(Fpos_t)));
d160 1
a161 1
	    errno = EINVAL;
d171 11
d183 1
d207 1
a207 1
    char *		packname
d237 1
a237 1
    int nfd = (items - 1) / 2;
d270 1
a270 1
    int ret = io_blocking(aTHX_ handle, items == 1 ? -1 : blk ? 1 : 0);
@


1.5
log
@Resolve conflicts, remove old files, merge local changes
@
text
@d76 1
a78 3
#if defined(O_NDELAY) && O_NDELAY != O_NONBLOCK
	/* Ooops has O_NDELAY too - make sure we don't
	 * get SysV behaviour by mistake. */
d80 4
a83 1
	/* E.g. In UNICOS and UNICOS/mk a F_GETFL returns an O_NDELAY
d87 5
a91 16
	if (block >= 0) {
	    if ((mode & O_NDELAY) || ((block == 0) && !(mode & O_NONBLOCK))) {
	        int ret;
	        mode = (mode & ~O_NDELAY) | O_NONBLOCK;
	        ret = fcntl(PerlIO_fileno(f),F_SETFL,mode);
	        if(ret < 0)
		    RETVAL = ret;
	    }
	    else
              if ((mode & O_NDELAY) || ((block > 0) && (mode & O_NONBLOCK))) {
	        int ret;
	        mode &= ~(O_NONBLOCK | O_NDELAY);
	        ret = fcntl(PerlIO_fileno(f),F_SETFL,mode);
	        if(ret < 0)
		    RETVAL = ret;
              }
a93 19
	/* Standard POSIX */
	RETVAL = RETVAL & O_NONBLOCK ? 0 : 1;

	if ((block == 0) && !(mode & O_NONBLOCK)) {
	    int ret;
	    mode |= O_NONBLOCK;
	    ret = fcntl(PerlIO_fileno(f),F_SETFL,mode);
	    if(ret < 0)
		RETVAL = ret;
	 }
	else if ((block > 0) && (mode & O_NONBLOCK)) {
	    int ret;
	    mode &= ~O_NONBLOCK;
	    ret = fcntl(PerlIO_fileno(f),F_SETFL,mode);
	    if(ret < 0)
		RETVAL = ret;
	 }
#endif
#else
d101 7
a107 1
	if ((block == 0) && !(mode & O_NDELAY)) {
d109 2
a110 3
	    mode |= O_NDELAY;
	    ret = fcntl(PerlIO_fileno(f),F_SETFL,mode);
	    if(ret < 0)
d112 1
a112 9
	 }
	else if ((block > 0) && (mode & O_NDELAY)) {
	    int ret;
	    mode &= ~O_NDELAY;
	    ret = fcntl(PerlIO_fileno(f),F_SETFL,mode);
	    if(ret < 0)
		RETVAL = ret;
	 }
#endif
@


1.4
log
@merge in perl 5.6.1 with our local changes
@
text
@d7 2
d22 6
d29 7
d65 1
a65 1
io_blocking(InputStream f, int block)
d67 1
a72 1
#if defined(HAS_FCNTL)
d77 1
a77 1
	/* POSIX style */ 
d79 1
a79 1
	/* Ooops has O_NDELAY too - make sure we don't 
d104 1
a104 1
	/* Standard POSIX */ 
d121 1
a121 1
#endif 
d125 1
a125 1
	 * for SysV we can't tell "would block" from EOF but that is 
d148 1
a148 1
 return -1;
a158 2
	    Fpos_t pos;
	    if (
d160 4
a163 1
		PerlIO_getpos(handle, &pos)
d165 1
a165 3
		fgetpos(handle, &pos)
#endif
		) {
d170 1
d182 1
a182 3
        char *p;
	STRLEN len;
	if (handle && (p = SvPV(pos,len)) && len == sizeof(Fpos_t))
d184 1
a184 1
	    RETVAL = PerlIO_setpos(handle, (Fpos_t*)p);
d186 9
a194 1
	    RETVAL = fsetpos(handle, (Fpos_t*)p);
d196 1
d232 1
a232 1
void   
d245 1
a245 1
	fds[j].events = SvIV(ST(i));
d271 1
a271 1
    int ret = io_blocking(handle, items == 1 ? -1 : blk ? 1 : 0);
a279 1

d373 1
a373 1
setbuf(handle, buf)
a374 1
	char *		buf = SvPOK(ST(1)) ? sv_grow(ST(1), BUFSIZ) : 0;
d378 3
d382 1
d388 1
a388 5
setvbuf(handle, buf, type, size)
	OutputStream	handle
	char *		buf = SvPOK(ST(1)) ? sv_grow(ST(1), SvIV(ST(3))) : 0;
	int		type
	int		size
d390 2
d393 12
d407 1
a407 1
	if (handle)
d413 1
d439 33
d535 1
@


1.3
log
@perl-5.6.0 + local changes
@
text
@d139 1
a139 1
SV *
d145 1
d147 1
a147 1
	    PerlIO_getpos(handle, &pos);
d149 1
a149 1
	    fgetpos(handle, &pos);
d151 5
a155 1
	    ST(0) = sv_2mortal(newSVpv((char*)&pos, sizeof(Fpos_t)));
d184 1
a184 1
SV *
@


1.2
log
@perl5.005_03 (stock)
@
text
@d1 7
d12 1
a12 1

d16 1
a16 4
#ifdef I_FCNTL
#if defined(__GNUC__) && defined(__cplusplus) && defined(WIN32)
#define _NO_OLDNAMES
#endif 
a17 4
#if defined(__GNUC__) && defined(__cplusplus) && defined(WIN32)
#undef _NO_OLDNAMES
#endif 

d31 6
d44 7
a50 2
static bool
constant(char *name, IV *pval)
d52 55
a106 5
    switch (*name) {
    case '_':
	if (strEQ(name, "_IOFBF"))
#ifdef _IOFBF
	    { *pval = _IOFBF; return TRUE; }
d108 21
a128 1
	    return FALSE;
d130 2
a131 23
	if (strEQ(name, "_IOLBF"))
#ifdef _IOLBF
	    { *pval = _IOLBF; return TRUE; }
#else
	    return FALSE;
#endif
	if (strEQ(name, "_IONBF"))
#ifdef _IONBF
	    { *pval = _IONBF; return TRUE; }
#else
	    return FALSE;
#endif
	break;
    case 'S':
	if (strEQ(name, "SEEK_SET"))
#ifdef SEEK_SET
	    { *pval = SEEK_SET; return TRUE; }
#else
	    return FALSE;
#endif
	if (strEQ(name, "SEEK_CUR"))
#ifdef SEEK_CUR
	    { *pval = SEEK_CUR; return TRUE; }
d133 1
a133 1
	    return FALSE;
a134 10
	if (strEQ(name, "SEEK_END"))
#ifdef SEEK_END
	    { *pval = SEEK_END; return TRUE; }
#else
	    return FALSE;
#endif
	break;
    }

    return FALSE;
a136 1

d162 3
a164 3
	char *p;
	STRLEN n_a;
	if (handle && (p = SvPVx(pos, n_a)) && n_a == sizeof(Fpos_t))
d196 1
a196 1
	    SvREFCNT_dec(gv);	/* undo increment in newRV() */
d203 48
a252 9
SV *
constant(name)
	char *		name
    CODE:
	IV i;
	if (constant(name, &i))
	    ST(0) = sv_2mortal(newSViv(i));
	else
	    ST(0) = &PL_sv_undef;
d365 1
a365 2
/* Should check HAS_SETVBUF once Configure tests for that */
#if defined(PERLIO_IS_STDIO) && defined(_IOFBF)
d381 81
@


1.1
log
@perl 5.004_04
@
text
@d10 3
d14 4
d32 1
a32 2
not_here(s)
char *s;
d39 1
a39 3
constant(name, pval)
char *name;
IV *pval;
d104 1
a104 1
	    ST(0) = &sv_undef;
d114 2
a115 1
	if (handle && (p = SvPVx(pos, na)) && na == sizeof(Fpos_t))
d150 1
a150 1
	    ST(0) = &sv_undef;
d164 1
a164 1
	    ST(0) = &sv_undef;
@


1.1.1.1
log
@perl5.005_03
@
text
@a9 3
#if defined(__GNUC__) && defined(__cplusplus) && defined(WIN32)
#define _NO_OLDNAMES
#endif 
a10 4
#if defined(__GNUC__) && defined(__cplusplus) && defined(WIN32)
#undef _NO_OLDNAMES
#endif 

d25 2
a26 1
not_here(char *s)
d33 3
a35 1
constant(char *name, IV *pval)
d100 1
a100 1
	    ST(0) = &PL_sv_undef;
d110 1
a110 2
	STRLEN n_a;
	if (handle && (p = SvPVx(pos, n_a)) && n_a == sizeof(Fpos_t))
d145 1
a145 1
	    ST(0) = &PL_sv_undef;
d159 1
a159 1
	    ST(0) = &PL_sv_undef;
@


1.1.1.2
log
@virgin perl 5.6.0
@
text
@a0 7
/*
 * Copyright (c) 1997-8 Graham Barr <gbarr@@pobox.com>. All rights reserved.
 * This program is free software; you can redistribute it and/or
 * modify it under the same terms as Perl itself.
 */

#define PERL_NO_GET_CONTEXT
d5 1
a5 1
#include "poll.h"
d9 4
a12 1
#if defined(I_FCNTL) || defined(HAS_FCNTL)
d14 4
a30 6
#define MY_start_subparse(fmt,flags) start_subparse(fmt,flags)

#ifndef gv_stashpvn
#define gv_stashpvn(str,len,flags) gv_stashpv(str,flags)
#endif

d38 30
a67 3

#ifndef PerlIO
#define PerlIO_fileno(f) fileno(f)
d69 3
a71 59

static int
io_blocking(InputStream f, int block)
{
    int RETVAL;
    if(!f) {
	errno = EBADF;
	return -1;
    }
#if defined(HAS_FCNTL)
    RETVAL = fcntl(PerlIO_fileno(f), F_GETFL, 0);
    if (RETVAL >= 0) {
	int mode = RETVAL;
#ifdef O_NONBLOCK
	/* POSIX style */ 
#if defined(O_NDELAY) && O_NDELAY != O_NONBLOCK
	/* Ooops has O_NDELAY too - make sure we don't 
	 * get SysV behaviour by mistake. */

	/* E.g. In UNICOS and UNICOS/mk a F_GETFL returns an O_NDELAY
	 * after a successful F_SETFL of an O_NONBLOCK. */
	RETVAL = RETVAL & (O_NONBLOCK | O_NDELAY) ? 0 : 1;

	if (block >= 0) {
	    if ((mode & O_NDELAY) || ((block == 0) && !(mode & O_NONBLOCK))) {
	        int ret;
	        mode = (mode & ~O_NDELAY) | O_NONBLOCK;
	        ret = fcntl(PerlIO_fileno(f),F_SETFL,mode);
	        if(ret < 0)
		    RETVAL = ret;
	    }
	    else
              if ((mode & O_NDELAY) || ((block > 0) && (mode & O_NONBLOCK))) {
	        int ret;
	        mode &= ~(O_NONBLOCK | O_NDELAY);
	        ret = fcntl(PerlIO_fileno(f),F_SETFL,mode);
	        if(ret < 0)
		    RETVAL = ret;
              }
	}
#else
	/* Standard POSIX */ 
	RETVAL = RETVAL & O_NONBLOCK ? 0 : 1;

	if ((block == 0) && !(mode & O_NONBLOCK)) {
	    int ret;
	    mode |= O_NONBLOCK;
	    ret = fcntl(PerlIO_fileno(f),F_SETFL,mode);
	    if(ret < 0)
		RETVAL = ret;
	 }
	else if ((block > 0) && (mode & O_NONBLOCK)) {
	    int ret;
	    mode &= ~O_NONBLOCK;
	    ret = fcntl(PerlIO_fileno(f),F_SETFL,mode);
	    if(ret < 0)
		RETVAL = ret;
	 }
#endif 
d73 1
a73 21
	/* Not POSIX - better have O_NDELAY or we can't cope.
	 * for BSD-ish machines this is an acceptable alternative
	 * for SysV we can't tell "would block" from EOF but that is 
	 * the way SysV is...
	 */
	RETVAL = RETVAL & O_NDELAY ? 0 : 1;

	if ((block == 0) && !(mode & O_NDELAY)) {
	    int ret;
	    mode |= O_NDELAY;
	    ret = fcntl(PerlIO_fileno(f),F_SETFL,mode);
	    if(ret < 0)
		RETVAL = ret;
	 }
	else if ((block > 0) && (mode & O_NDELAY)) {
	    int ret;
	    mode &= ~O_NDELAY;
	    ret = fcntl(PerlIO_fileno(f),F_SETFL,mode);
	    if(ret < 0)
		RETVAL = ret;
	 }
d75 3
a77 2
    }
    return RETVAL;
d79 1
a79 1
 return -1;
d81 4
d87 1
d113 3
a115 3
        char *p;
	STRLEN len;
	if (handle && (p = SvPV(pos,len)) && len == sizeof(Fpos_t))
d147 1
a147 1
	    SvREFCNT_dec(gv);   /* undo increment in newRV() */
a153 48
MODULE = IO	PACKAGE = IO::Poll

void   
_poll(timeout,...)
	int timeout;
PPCODE:
{
#ifdef HAS_POLL
    int nfd = (items - 1) / 2;
    SV *tmpsv = NEWSV(999,nfd * sizeof(struct pollfd));
    struct pollfd *fds = (struct pollfd *)SvPVX(tmpsv);
    int i,j,ret;
    for(i=1, j=0  ; j < nfd ; j++) {
	fds[j].fd = SvIV(ST(i));
	i++;
	fds[j].events = SvIV(ST(i));
	i++;
	fds[j].revents = 0;
    }
    if((ret = poll(fds,nfd,timeout)) >= 0) {
	for(i=1, j=0 ; j < nfd ; j++) {
	    sv_setiv(ST(i), fds[j].fd); i++;
	    sv_setiv(ST(i), fds[j].revents); i++;
	}
    }
    SvREFCNT_dec(tmpsv);
    XSRETURN_IV(ret);
#else
	not_here("IO::Poll::poll");
#endif
}

MODULE = IO	PACKAGE = IO::Handle	PREFIX = io_

void
io_blocking(handle,blk=-1)
	InputStream	handle
	int		blk
PROTOTYPE: $;$
CODE:
{
    int ret = io_blocking(handle, items == 1 ? -1 : blk ? 1 : 0);
    if(ret >= 0)
	XSRETURN_IV(ret);
    else
	XSRETURN_UNDEF;
}

d156 9
d277 2
a278 1
#if defined(PERLIO_IS_STDIO) && defined(_IOFBF) && defined(HAS_SETVBUF)
a293 81
SysRet
fsync(handle)
	OutputStream handle
    CODE:
#ifdef HAS_FSYNC
	if(handle)
	    RETVAL = fsync(PerlIO_fileno(handle));
	else {
	    RETVAL = -1;
	    errno = EINVAL;
	}
#else
	RETVAL = (SysRet) not_here("IO::Handle::sync");
#endif
    OUTPUT:
	RETVAL


BOOT:
{
    HV *stash;
    /*
     * constant subs for IO::Poll
     */
    stash = gv_stashpvn("IO::Poll", 8, TRUE);
#ifdef	POLLIN
	newCONSTSUB(stash,"POLLIN",newSViv(POLLIN));
#endif
#ifdef	POLLPRI
        newCONSTSUB(stash,"POLLPRI", newSViv(POLLPRI));
#endif
#ifdef	POLLOUT
        newCONSTSUB(stash,"POLLOUT", newSViv(POLLOUT));
#endif
#ifdef	POLLRDNORM
        newCONSTSUB(stash,"POLLRDNORM", newSViv(POLLRDNORM));
#endif
#ifdef	POLLWRNORM
        newCONSTSUB(stash,"POLLWRNORM", newSViv(POLLWRNORM));
#endif
#ifdef	POLLRDBAND
        newCONSTSUB(stash,"POLLRDBAND", newSViv(POLLRDBAND));
#endif
#ifdef	POLLWRBAND
        newCONSTSUB(stash,"POLLWRBAND", newSViv(POLLWRBAND));
#endif
#ifdef	POLLNORM
        newCONSTSUB(stash,"POLLNORM", newSViv(POLLNORM));
#endif
#ifdef	POLLERR
        newCONSTSUB(stash,"POLLERR", newSViv(POLLERR));
#endif
#ifdef	POLLHUP
        newCONSTSUB(stash,"POLLHUP", newSViv(POLLHUP));
#endif
#ifdef	POLLNVAL
        newCONSTSUB(stash,"POLLNVAL", newSViv(POLLNVAL));
#endif
    /*
     * constant subs for IO::Handle
     */
    stash = gv_stashpvn("IO::Handle", 10, TRUE);
#ifdef _IOFBF
        newCONSTSUB(stash,"_IOFBF", newSViv(_IOFBF));
#endif
#ifdef _IOLBF
        newCONSTSUB(stash,"_IOLBF", newSViv(_IOLBF));
#endif
#ifdef _IONBF
        newCONSTSUB(stash,"_IONBF", newSViv(_IONBF));
#endif
#ifdef SEEK_SET
        newCONSTSUB(stash,"SEEK_SET", newSViv(SEEK_SET));
#endif
#ifdef SEEK_CUR
        newCONSTSUB(stash,"SEEK_CUR", newSViv(SEEK_CUR));
#endif
#ifdef SEEK_END
        newCONSTSUB(stash,"SEEK_END", newSViv(SEEK_END));
#endif
}
@


1.1.1.3
log
@stock perl 5.6.1
@
text
@d139 1
a139 1
void
a144 1
	    if (
d146 1
a146 1
		PerlIO_getpos(handle, &pos)
d148 1
a148 1
		fgetpos(handle, &pos)
d150 1
a150 5
		) {
		ST(0) = &PL_sv_undef;
	    } else {
		ST(0) = sv_2mortal(newSVpv((char*)&pos, sizeof(Fpos_t)));
	    }
d179 1
a179 1
void
@


1.1.1.4
log
@stock perl 5.8.0 from CPAN
@
text
@a6 2
#define PERL_EXT_IO

a19 6
#ifndef SIOCATMARK
#   ifdef I_SYS_SOCKIO
#       include <sys/sockio.h>
#   endif
#endif

a20 7
#if defined(MACOS_TRADITIONAL) && defined(USE_SFIO)
#define PERLIO_IS_STDIO 1
#undef setbuf
#undef setvbuf
#define setvbuf		_stdsetvbuf
#define setbuf(f,b)	( __sf_setbuf(f,b) )
#endif
d50 1
a50 1
io_blocking(pTHX_ InputStream f, int block)
a51 1
#if defined(HAS_FCNTL)
d57 1
d62 1
a62 1
	/* POSIX style */
d64 1
a64 1
	/* Ooops has O_NDELAY too - make sure we don't
d89 1
a89 1
	/* Standard POSIX */
d106 1
a106 1
#endif
d110 1
a110 1
	 * for SysV we can't tell "would block" from EOF but that is
d133 1
a133 1
    return -1;
d144 2
d147 1
a147 4
	    ST(0) = sv_2mortal(newSV(0));
	    if (PerlIO_getpos(handle, ST(0)) != 0) {
		ST(0) = &PL_sv_undef;
	    }
d149 3
a151 1
	    if (fgetpos(handle, &pos)) {
a155 1
#endif
d167 3
a169 1
	if (handle) {
d171 1
a171 1
	    RETVAL = PerlIO_setpos(handle, pos);
d173 1
a173 9
	    char *p;
	    STRLEN len;
	    if ((p = SvPV(pos,len)) && len == sizeof(Fpos_t)) {
		RETVAL = fsetpos(handle, (Fpos_t*)p);
	    }
	    else {
		RETVAL = -1;
		errno = EINVAL;
	    }
a174 1
	}
d210 1
a210 1
void
d223 1
a223 1
	fds[j].events = (short)SvIV(ST(i));
d249 1
a249 1
    int ret = io_blocking(aTHX_ handle, items == 1 ? -1 : blk ? 1 : 0);
d258 1
d352 1
a352 1
setbuf(handle, ...)
d354 1
a357 3
        {
	    char *buf = items == 2 && SvPOK(ST(1)) ?
	      sv_grow(ST(1), BUFSIZ) : 0;
a358 1
	}
d364 5
a368 1
setvbuf(...)
a369 2
	if (items != 4)
            Perl_croak(aTHX_ "Usage: IO::Handle::setvbuf(handle, buf, type, size)");
a370 12
    {
        OutputStream	handle = 0;
	char *		buf = SvPOK(ST(1)) ? sv_grow(ST(1), SvIV(ST(3))) : 0;
	int		type;
	int		size;

	if (items == 4) {
	    handle = IoOFP(sv_2io(ST(0)));
	    buf    = SvPOK(ST(1)) ? sv_grow(ST(1), SvIV(ST(3))) : 0;
	    type   = (int)SvIV(ST(2));
	    size   = (int)SvIV(ST(3));
	}
d373 1
a373 1
	if (items == 4 && handle)
a378 1
    }
a403 33
MODULE = IO	PACKAGE = IO::Socket

SysRet
sockatmark (sock)
   InputStream sock
   PROTOTYPE: $
   PREINIT:
     int fd;
   CODE:
   {
     fd = PerlIO_fileno(sock);
#ifdef HAS_SOCKATMARK
     RETVAL = sockatmark(fd);
#else
     {
       int flag = 0;
#   ifdef SIOCATMARK
#     if defined(NETWARE) || defined(WIN32)
       if (ioctl(fd, SIOCATMARK, (void*)&flag) != 0)
#     else
       if (ioctl(fd, SIOCATMARK, &flag) != 0)
#     endif
	 XSRETURN_UNDEF;
#   else
       not_here("IO::Socket::atmark");
#   endif
       RETVAL = flag;
     }
#endif
   }
   OUTPUT:
     RETVAL

a466 1

@


1.1.1.5
log
@perl 5.8.6 from CPAN
@
text
@a75 1
	int newmode = mode;
d78 3
d82 1
a82 4
# ifndef O_NDELAY
#  define O_NDELAY O_NONBLOCK
# endif
	/* Note: UNICOS and UNICOS/mk a F_GETFL returns an O_NDELAY
d86 16
a101 5
	if (block == 0) {
	    newmode &= ~O_NDELAY;
	    newmode |= O_NONBLOCK;
	} else if (block > 0) {
	    newmode &= ~(O_NDELAY|O_NONBLOCK);
d104 19
d130 8
a137 7
	if (block == 0) {
	    newmode |= O_NDELAY;
	} else if (block > 0) {
	    newmode &= ~O_NDELAY;
	}
#endif
	if (newmode != mode) {
d139 3
a141 2
	    ret = fcntl(PerlIO_fileno(f),F_SETFL,newmode);
	    if (ret < 0)
d143 2
a144 1
	}
@


1.1.1.6
log
@perl 5.8.8 import
@
text
@a51 9
#ifndef __attribute__noreturn__
#  define __attribute__noreturn__
#endif

#ifndef NORETURN_FUNCTION_END
# define NORETURN_FUNCTION_END /* NOT REACHED */ return 0
#endif

static int not_here(const char *s) __attribute__noreturn__;
d53 1
a53 1
not_here(const char *s)
d56 1
a56 1
    NORETURN_FUNCTION_END;
d108 2
a109 1
	    const int ret = fcntl(PerlIO_fileno(f),F_SETFL,newmode);
d128 1
a128 10
	    ST(0) = sv_newmortal();
#if PERL_VERSION < 8
	    Fpos_t pos;
	    if (PerlIO_getpos(handle, &pos) != 0) {
		ST(0) = &PL_sv_undef;
	    }
	    else {
		sv_setpvn(ST(0), (char *)&pos, sizeof(Fpos_t));
	    }
#else
a131 1
#endif
a132 1
	    Fpos_t pos;
d136 1
a136 1
		ST(0) = sv_2mortal(newSVpvn((char*)&pos, sizeof(Fpos_t)));
d141 1
a142 1
	    ST(0) = &PL_sv_undef;
a151 11
#if PERL_VERSION < 8
	    char *p;
	    STRLEN len;
	    if (SvOK(pos) && (p = SvPV(pos,len)) && len == sizeof(Fpos_t)) {
		RETVAL = PerlIO_setpos(handle, (Fpos_t*)p);
	    }
	    else {
		RETVAL = -1;
		errno = EINVAL;
	    }
#else
a152 1
#endif
d176 1
a176 1
    char *	packname
d206 1
a206 1
    const int nfd = (items - 1) / 2;
d239 1
a239 1
    const int ret = io_blocking(aTHX_ handle, items == 1 ? -1 : blk ? 1 : 0);
@


1.1.1.7
log
@import perl 5.10.0 from CPAN
@
text
@d136 1
a138 1
	    ST(0) = sv_newmortal();
a145 1
	    ST(0) = sv_newmortal();
d218 2
a219 3
	if (gv)
	    hv_delete(GvSTASH(gv), GvNAME(gv), GvNAMELEN(gv), G_DISCARD);
	if (gv && do_open(gv, "+>&", 3, FALSE, 0, 0, fp)) {
@


1.1.1.8
log
@import perl 5.10.1
@
text
@a123 4
#   ifdef WIN32
    char flags = (char)block;
    return ioctl(PerlIO_fileno(f), FIONBIO, &flags);
#   else
a124 1
#   endif
d208 1
a208 1
    const char * packname
@


