head	1.2;
access;
symbols
	OPENBSD_4_8:1.1.1.2.0.4
	OPENBSD_4_8_BASE:1.1.1.2
	OPENBSD_4_7:1.1.1.2.0.2
	OPENBSD_4_7_BASE:1.1.1.2
	PERL_5_10_1:1.1.1.2
	OPENBSD_4_6:1.1.1.1.0.26
	OPENBSD_4_6_BASE:1.1.1.1
	OPENBSD_4_5:1.1.1.1.0.22
	OPENBSD_4_5_BASE:1.1.1.1
	PERL_5_10_0:1.1.1.1
	OPENBSD_4_4:1.1.1.1.0.20
	OPENBSD_4_4_BASE:1.1.1.1
	OPENBSD_4_3:1.1.1.1.0.18
	OPENBSD_4_3_BASE:1.1.1.1
	OPENBSD_4_2:1.1.1.1.0.16
	OPENBSD_4_2_BASE:1.1.1.1
	OPENBSD_4_1:1.1.1.1.0.14
	OPENBSD_4_1_BASE:1.1.1.1
	OPENBSD_4_0:1.1.1.1.0.12
	OPENBSD_4_0_BASE:1.1.1.1
	PERL_5_8_8:1.1.1.1
	OPENBSD_3_9:1.1.1.1.0.10
	OPENBSD_3_9_BASE:1.1.1.1
	OPENBSD_3_8:1.1.1.1.0.8
	OPENBSD_3_8_BASE:1.1.1.1
	OPENBSD_3_7:1.1.1.1.0.6
	OPENBSD_3_7_BASE:1.1.1.1
	PERL_5_8_6:1.1.1.1
	OPENBSD_3_6:1.1.1.1.0.4
	OPENBSD_3_6_BASE:1.1.1.1
	PERL_5_8_5:1.1.1.1
	PERL_5_8_3:1.1.1.1
	OPENBSD_3_5:1.1.1.1.0.2
	OPENBSD_3_5_BASE:1.1.1.1
	PERL_5_8_2:1.1.1.1
	CPAN:1.1.1;
locks; strict;
comment	@# @;


1.2
date	2010.09.24.14.59.23;	author millert;	state dead;
branches;
next	1.1;

1.1
date	2003.12.03.02.43.50;	author millert;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	2003.12.03.02.43.50;	author millert;	state Exp;
branches;
next	1.1.1.2;

1.1.1.2
date	2009.10.12.18.11.20;	author millert;	state Exp;
branches;
next	;


desc
@@


1.2
log
@remove files no longer in perl 5.12.2 (or that have moved)
@
text
@#!./perl

BEGIN {
    unless(grep /blib/, @@INC) {
        chdir 't' if -d 't';
        @@INC = '../lib';
    }
    require Config; import Config;
    if ($] < 5.00326 || not $Config{'d_readdir'}) {
	print "1..0 # Skip: readdir() not available\n";
	exit 0;
    }
}

select(STDERR); $| = 1;
select(STDOUT); $| = 1;

use IO::Dir qw(DIR_UNLINK);

my $tcount = 0;

sub ok {
  $tcount++;
  my $not = $_[0] ? '' : 'not ';
  print "${not}ok $tcount\n";
}

print "1..10\n";

my $DIR = $^O eq 'MacOS' ? ":" : ".";

$dot = new IO::Dir $DIR;
ok(defined($dot));

@@a = sort <*>;
do { $first = $dot->read } while defined($first) && $first =~ /^\./;
ok(+(grep { $_ eq $first } @@a));

@@b = sort($first, (grep {/^[^.]/} $dot->read));
ok(+(join("\0", @@a) eq join("\0", @@b)));

$dot->rewind;
@@c = sort grep {/^[^.]/} $dot->read;
ok(+(join("\0", @@b) eq join("\0", @@c)));

$dot->close;
$dot->rewind;
ok(!defined($dot->read));

open(FH,'>X') || die "Can't create x";
print FH "X";
close(FH) or die "Can't close: $!";

tie %dir, IO::Dir, $DIR;
my @@files = keys %dir;

# I hope we do not have an empty dir :-)
ok(scalar @@files);

my $stat = $dir{'X'};
ok(defined($stat) && UNIVERSAL::isa($stat,'File::stat') && $stat->size == 1);

delete $dir{'X'};

ok(-f 'X');

tie %dirx, IO::Dir, $DIR, DIR_UNLINK;

my $statx = $dirx{'X'};
ok(defined($statx) && UNIVERSAL::isa($statx,'File::stat') && $statx->size == 1);

delete $dirx{'X'};

ok(!(-f 'X'));
@


1.1
log
@Initial revision
@
text
@@


1.1.1.1
log
@perl 5.8.2 from CPAN
@
text
@@


1.1.1.2
log
@import perl 5.10.1
@
text
@d13 4
d18 1
a18 2
    require($ENV{PERL_CORE} ? "./test.pl" : "./t/test.pl");
    plan(16);
d20 6
a25 2
    use_ok('IO::Dir');
    IO::Dir->import(DIR_UNLINK);
d28 1
a28 1
use strict;
d32 1
a32 2
my $CLASS = "IO::Dir";
my $dot = $CLASS->new($DIR);
d35 1
a35 2
my @@a = sort <*>;
my $first;
d39 1
a39 1
my @@b = sort($first, (grep {/^[^.]/} $dot->read));
d42 2
a43 2
ok($dot->rewind,'rewind');
my @@c = sort grep {/^[^.]/} $dot->read;
d46 2
a47 3
ok($dot->close,'close');
{ local $^W; # avoid warnings on invalid dirhandle
ok(!$dot->rewind, "rewind on closed");
a48 1
}
d54 1
a54 2
my %dir;
tie %dir, $CLASS, $DIR;
d61 1
a61 2
isa_ok($stat,'File::stat');
ok(defined($stat) && $stat->size == 1);
d67 1
a67 2
my %dirx;
tie %dirx, $CLASS, $DIR, DIR_UNLINK;
d70 1
a70 2
isa_ok($statx,'File::stat');
ok(defined($statx) && $statx->size == 1);
@

