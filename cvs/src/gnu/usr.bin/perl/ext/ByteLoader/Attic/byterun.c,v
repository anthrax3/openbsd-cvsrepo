head	1.2;
access;
symbols
	OPENBSD_4_4:1.1.1.5.0.10
	OPENBSD_4_4_BASE:1.1.1.5
	OPENBSD_4_3:1.1.1.5.0.8
	OPENBSD_4_3_BASE:1.1.1.5
	OPENBSD_4_2:1.1.1.5.0.6
	OPENBSD_4_2_BASE:1.1.1.5
	OPENBSD_4_1:1.1.1.5.0.4
	OPENBSD_4_1_BASE:1.1.1.5
	OPENBSD_4_0:1.1.1.5.0.2
	OPENBSD_4_0_BASE:1.1.1.5
	PERL_5_8_8:1.1.1.5
	OPENBSD_3_9:1.1.1.4.0.10
	OPENBSD_3_9_BASE:1.1.1.4
	OPENBSD_3_8:1.1.1.4.0.8
	OPENBSD_3_8_BASE:1.1.1.4
	OPENBSD_3_7:1.1.1.4.0.6
	OPENBSD_3_7_BASE:1.1.1.4
	PERL_5_8_6:1.1.1.4
	OPENBSD_3_6:1.1.1.4.0.4
	OPENBSD_3_6_BASE:1.1.1.4
	PERL_5_8_5:1.1.1.4
	PERL_5_8_3:1.1.1.4
	OPENBSD_3_5:1.1.1.4.0.2
	OPENBSD_3_5_BASE:1.1.1.4
	PERL_5_8_2:1.1.1.4
	OPENBSD_3_4:1.1.1.3.0.4
	OPENBSD_3_4_BASE:1.1.1.3
	OPENBSD_3_3:1.1.1.3.0.2
	OPENBSD_3_3_BASE:1.1.1.3
	PERL_5_8_0:1.1.1.3
	OPENBSD_3_2:1.1.1.2.0.6
	OPENBSD_3_2_BASE:1.1.1.2
	OPENBSD_3_1:1.1.1.2.0.4
	OPENBSD_3_1_BASE:1.1.1.2
	OPENBSD_3_0:1.1.1.2.0.2
	OPENBSD_3_0_BASE:1.1.1.2
	PERL_5_6_1:1.1.1.2
	OPENBSD_2_9:1.1.1.1.0.6
	OPENBSD_2_9_BASE:1.1.1.1
	OPENBSD_2_8:1.1.1.1.0.4
	OPENBSD_2_8_BASE:1.1.1.1
	OPENBSD_2_7:1.1.1.1.0.2
	OPENBSD_2_7_BASE:1.1.1.1
	PERL_5_6_0:1.1.1.1
	CPAN:1.1.1;
locks; strict;
comment	@ * @;


1.2
date	2008.09.29.17.36.02;	author millert;	state dead;
branches;
next	1.1;

1.1
date	2000.04.06.16.09.04;	author millert;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	2000.04.06.16.09.04;	author millert;	state Exp;
branches;
next	1.1.1.2;

1.1.1.2
date	2001.05.24.18.22.41;	author millert;	state Exp;
branches;
next	1.1.1.3;

1.1.1.3
date	2002.10.27.22.14.53;	author millert;	state Exp;
branches;
next	1.1.1.4;

1.1.1.4
date	2003.12.03.02.43.41;	author millert;	state Exp;
branches;
next	1.1.1.5;

1.1.1.5
date	2006.03.28.18.47.55;	author millert;	state Exp;
branches;
next	;


desc
@@


1.2
log
@fix conflicts and merge in local changes to perl 5.10.0
@
text
@/*
 *      Copyright (c) 1996-1999 Malcolm Beattie
 *
 *      You may distribute under the terms of either the GNU General Public
 *      License or the Artistic License, as specified in the README file.
 *
 */
/*
 * This file is autogenerated from bytecode.pl. Changes made here will be lost.
 */

#define PERL_NO_GET_CONTEXT
#include "EXTERN.h"
#include "perl.h"
#define NO_XSLOCKS
#include "XSUB.h"

#ifdef PERL_OBJECT
#undef CALL_FPTR
#define CALL_FPTR(fptr) (pPerl->*fptr)
#undef PL_ppaddr
#define PL_ppaddr (*get_ppaddr())
#endif

#include "byterun.h"
#include "bytecode.h"


static int optype_size[] = {
    sizeof(OP),
    sizeof(UNOP),
    sizeof(BINOP),
    sizeof(LOGOP),
    sizeof(LISTOP),
    sizeof(PMOP),
    sizeof(SVOP),
    sizeof(PADOP),
    sizeof(PVOP),
    sizeof(LOOP),
    sizeof(COP)
};

static SV *specialsv_list[4];

static int bytecode_iv_overflows = 0;
static SV *bytecode_sv;
static XPV bytecode_pv;
static void **bytecode_obj_list;
static I32 bytecode_obj_list_fill = -1;

void *
bset_obj_store(pTHXo_ void *obj, I32 ix)
{
    if (ix > bytecode_obj_list_fill) {
	if (bytecode_obj_list_fill == -1)
	    New(666, bytecode_obj_list, ix + 1, void*);
	else
	    Renew(bytecode_obj_list, ix + 1, void*);
	bytecode_obj_list_fill = ix;
    }
    bytecode_obj_list[ix] = obj;
    return obj;
}

void
byterun(pTHXo_ struct bytestream bs)
{
    dTHR;
    int insn;

    specialsv_list[0] = Nullsv;
    specialsv_list[1] = &PL_sv_undef;
    specialsv_list[2] = &PL_sv_yes;
    specialsv_list[3] = &PL_sv_no;

    while ((insn = BGET_FGETC()) != EOF) {
	switch (insn) {
	  case INSN_COMMENT:		/* 35 */
	    {
		comment_t arg;
		BGET_comment_t(arg);
		arg = arg;
		break;
	    }
	  case INSN_NOP:		/* 10 */
	    {
		break;
	    }
	  case INSN_RET:		/* 0 */
	    {
		BSET_ret(none);
		break;
	    }
	  case INSN_LDSV:		/* 1 */
	    {
		svindex arg;
		BGET_svindex(arg);
		bytecode_sv = arg;
		break;
	    }
	  case INSN_LDOP:		/* 2 */
	    {
		opindex arg;
		BGET_opindex(arg);
		PL_op = arg;
		break;
	    }
	  case INSN_STSV:		/* 3 */
	    {
		U32 arg;
		BGET_U32(arg);
		BSET_OBJ_STORE(bytecode_sv, arg);
		break;
	    }
	  case INSN_STOP:		/* 4 */
	    {
		U32 arg;
		BGET_U32(arg);
		BSET_OBJ_STORE(PL_op, arg);
		break;
	    }
	  case INSN_LDSPECSV:		/* 5 */
	    {
		U8 arg;
		BGET_U8(arg);
		BSET_ldspecsv(bytecode_sv, arg);
		break;
	    }
	  case INSN_NEWSV:		/* 6 */
	    {
		U8 arg;
		BGET_U8(arg);
		BSET_newsv(bytecode_sv, arg);
		break;
	    }
	  case INSN_NEWOP:		/* 7 */
	    {
		U8 arg;
		BGET_U8(arg);
		BSET_newop(PL_op, arg);
		break;
	    }
	  case INSN_NEWOPN:		/* 8 */
	    {
		U8 arg;
		BGET_U8(arg);
		BSET_newopn(PL_op, arg);
		break;
	    }
	  case INSN_NEWPV:		/* 9 */
	    {
		PV arg;
		BGET_PV(arg);
		break;
	    }
	  case INSN_PV_CUR:		/* 11 */
	    {
		STRLEN arg;
		BGET_U32(arg);
		bytecode_pv.xpv_cur = arg;
		break;
	    }
	  case INSN_PV_FREE:		/* 12 */
	    {
		BSET_pv_free(bytecode_pv);
		break;
	    }
	  case INSN_SV_UPGRADE:		/* 13 */
	    {
		char arg;
		BGET_U8(arg);
		BSET_sv_upgrade(bytecode_sv, arg);
		break;
	    }
	  case INSN_SV_REFCNT:		/* 14 */
	    {
		U32 arg;
		BGET_U32(arg);
		SvREFCNT(bytecode_sv) = arg;
		break;
	    }
	  case INSN_SV_REFCNT_ADD:		/* 15 */
	    {
		I32 arg;
		BGET_I32(arg);
		BSET_sv_refcnt_add(SvREFCNT(bytecode_sv), arg);
		break;
	    }
	  case INSN_SV_FLAGS:		/* 16 */
	    {
		U32 arg;
		BGET_U32(arg);
		SvFLAGS(bytecode_sv) = arg;
		break;
	    }
	  case INSN_XRV:		/* 17 */
	    {
		svindex arg;
		BGET_svindex(arg);
		SvRV(bytecode_sv) = arg;
		break;
	    }
	  case INSN_XPV:		/* 18 */
	    {
		BSET_xpv(bytecode_sv);
		break;
	    }
	  case INSN_XIV32:		/* 19 */
	    {
		I32 arg;
		BGET_I32(arg);
		SvIVX(bytecode_sv) = arg;
		break;
	    }
	  case INSN_XIV64:		/* 20 */
	    {
		IV64 arg;
		BGET_IV64(arg);
		SvIVX(bytecode_sv) = arg;
		break;
	    }
	  case INSN_XNV:		/* 21 */
	    {
		NV arg;
		BGET_NV(arg);
		SvNVX(bytecode_sv) = arg;
		break;
	    }
	  case INSN_XLV_TARGOFF:		/* 22 */
	    {
		STRLEN arg;
		BGET_U32(arg);
		LvTARGOFF(bytecode_sv) = arg;
		break;
	    }
	  case INSN_XLV_TARGLEN:		/* 23 */
	    {
		STRLEN arg;
		BGET_U32(arg);
		LvTARGLEN(bytecode_sv) = arg;
		break;
	    }
	  case INSN_XLV_TARG:		/* 24 */
	    {
		svindex arg;
		BGET_svindex(arg);
		LvTARG(bytecode_sv) = arg;
		break;
	    }
	  case INSN_XLV_TYPE:		/* 25 */
	    {
		char arg;
		BGET_U8(arg);
		LvTYPE(bytecode_sv) = arg;
		break;
	    }
	  case INSN_XBM_USEFUL:		/* 26 */
	    {
		I32 arg;
		BGET_I32(arg);
		BmUSEFUL(bytecode_sv) = arg;
		break;
	    }
	  case INSN_XBM_PREVIOUS:		/* 27 */
	    {
		U16 arg;
		BGET_U16(arg);
		BmPREVIOUS(bytecode_sv) = arg;
		break;
	    }
	  case INSN_XBM_RARE:		/* 28 */
	    {
		U8 arg;
		BGET_U8(arg);
		BmRARE(bytecode_sv) = arg;
		break;
	    }
	  case INSN_XFM_LINES:		/* 29 */
	    {
		I32 arg;
		BGET_I32(arg);
		FmLINES(bytecode_sv) = arg;
		break;
	    }
	  case INSN_XIO_LINES:		/* 30 */
	    {
		long arg;
		BGET_I32(arg);
		IoLINES(bytecode_sv) = arg;
		break;
	    }
	  case INSN_XIO_PAGE:		/* 31 */
	    {
		long arg;
		BGET_I32(arg);
		IoPAGE(bytecode_sv) = arg;
		break;
	    }
	  case INSN_XIO_PAGE_LEN:		/* 32 */
	    {
		long arg;
		BGET_I32(arg);
		IoPAGE_LEN(bytecode_sv) = arg;
		break;
	    }
	  case INSN_XIO_LINES_LEFT:		/* 33 */
	    {
		long arg;
		BGET_I32(arg);
		IoLINES_LEFT(bytecode_sv) = arg;
		break;
	    }
	  case INSN_XIO_TOP_NAME:		/* 34 */
	    {
		pvcontents arg;
		BGET_pvcontents(arg);
		IoTOP_NAME(bytecode_sv) = arg;
		break;
	    }
	  case INSN_XIO_TOP_GV:		/* 36 */
	    {
		svindex arg;
		BGET_svindex(arg);
		*(SV**)&IoTOP_GV(bytecode_sv) = arg;
		break;
	    }
	  case INSN_XIO_FMT_NAME:		/* 37 */
	    {
		pvcontents arg;
		BGET_pvcontents(arg);
		IoFMT_NAME(bytecode_sv) = arg;
		break;
	    }
	  case INSN_XIO_FMT_GV:		/* 38 */
	    {
		svindex arg;
		BGET_svindex(arg);
		*(SV**)&IoFMT_GV(bytecode_sv) = arg;
		break;
	    }
	  case INSN_XIO_BOTTOM_NAME:		/* 39 */
	    {
		pvcontents arg;
		BGET_pvcontents(arg);
		IoBOTTOM_NAME(bytecode_sv) = arg;
		break;
	    }
	  case INSN_XIO_BOTTOM_GV:		/* 40 */
	    {
		svindex arg;
		BGET_svindex(arg);
		*(SV**)&IoBOTTOM_GV(bytecode_sv) = arg;
		break;
	    }
	  case INSN_XIO_SUBPROCESS:		/* 41 */
	    {
		short arg;
		BGET_U16(arg);
		IoSUBPROCESS(bytecode_sv) = arg;
		break;
	    }
	  case INSN_XIO_TYPE:		/* 42 */
	    {
		char arg;
		BGET_U8(arg);
		IoTYPE(bytecode_sv) = arg;
		break;
	    }
	  case INSN_XIO_FLAGS:		/* 43 */
	    {
		char arg;
		BGET_U8(arg);
		IoFLAGS(bytecode_sv) = arg;
		break;
	    }
	  case INSN_XCV_STASH:		/* 44 */
	    {
		svindex arg;
		BGET_svindex(arg);
		*(SV**)&CvSTASH(bytecode_sv) = arg;
		break;
	    }
	  case INSN_XCV_START:		/* 45 */
	    {
		opindex arg;
		BGET_opindex(arg);
		CvSTART(bytecode_sv) = arg;
		break;
	    }
	  case INSN_XCV_ROOT:		/* 46 */
	    {
		opindex arg;
		BGET_opindex(arg);
		CvROOT(bytecode_sv) = arg;
		break;
	    }
	  case INSN_XCV_GV:		/* 47 */
	    {
		svindex arg;
		BGET_svindex(arg);
		*(SV**)&CvGV(bytecode_sv) = arg;
		break;
	    }
	  case INSN_XCV_FILE:		/* 48 */
	    {
		pvcontents arg;
		BGET_pvcontents(arg);
		CvFILE(bytecode_sv) = arg;
		break;
	    }
	  case INSN_XCV_DEPTH:		/* 49 */
	    {
		long arg;
		BGET_I32(arg);
		CvDEPTH(bytecode_sv) = arg;
		break;
	    }
	  case INSN_XCV_PADLIST:		/* 50 */
	    {
		svindex arg;
		BGET_svindex(arg);
		*(SV**)&CvPADLIST(bytecode_sv) = arg;
		break;
	    }
	  case INSN_XCV_OUTSIDE:		/* 51 */
	    {
		svindex arg;
		BGET_svindex(arg);
		*(SV**)&CvOUTSIDE(bytecode_sv) = arg;
		break;
	    }
	  case INSN_XCV_FLAGS:		/* 52 */
	    {
		U16 arg;
		BGET_U16(arg);
		CvFLAGS(bytecode_sv) = arg;
		break;
	    }
	  case INSN_AV_EXTEND:		/* 53 */
	    {
		SSize_t arg;
		BGET_I32(arg);
		BSET_av_extend(bytecode_sv, arg);
		break;
	    }
	  case INSN_AV_PUSH:		/* 54 */
	    {
		svindex arg;
		BGET_svindex(arg);
		BSET_av_push(bytecode_sv, arg);
		break;
	    }
	  case INSN_XAV_FILL:		/* 55 */
	    {
		SSize_t arg;
		BGET_I32(arg);
		AvFILLp(bytecode_sv) = arg;
		break;
	    }
	  case INSN_XAV_MAX:		/* 56 */
	    {
		SSize_t arg;
		BGET_I32(arg);
		AvMAX(bytecode_sv) = arg;
		break;
	    }
	  case INSN_XAV_FLAGS:		/* 57 */
	    {
		U8 arg;
		BGET_U8(arg);
		AvFLAGS(bytecode_sv) = arg;
		break;
	    }
	  case INSN_XHV_RITER:		/* 58 */
	    {
		I32 arg;
		BGET_I32(arg);
		HvRITER(bytecode_sv) = arg;
		break;
	    }
	  case INSN_XHV_NAME:		/* 59 */
	    {
		pvcontents arg;
		BGET_pvcontents(arg);
		HvNAME(bytecode_sv) = arg;
		break;
	    }
	  case INSN_HV_STORE:		/* 60 */
	    {
		svindex arg;
		BGET_svindex(arg);
		BSET_hv_store(bytecode_sv, arg);
		break;
	    }
	  case INSN_SV_MAGIC:		/* 61 */
	    {
		char arg;
		BGET_U8(arg);
		BSET_sv_magic(bytecode_sv, arg);
		break;
	    }
	  case INSN_MG_OBJ:		/* 62 */
	    {
		svindex arg;
		BGET_svindex(arg);
		SvMAGIC(bytecode_sv)->mg_obj = arg;
		break;
	    }
	  case INSN_MG_PRIVATE:		/* 63 */
	    {
		U16 arg;
		BGET_U16(arg);
		SvMAGIC(bytecode_sv)->mg_private = arg;
		break;
	    }
	  case INSN_MG_FLAGS:		/* 64 */
	    {
		U8 arg;
		BGET_U8(arg);
		SvMAGIC(bytecode_sv)->mg_flags = arg;
		break;
	    }
	  case INSN_MG_PV:		/* 65 */
	    {
		pvcontents arg;
		BGET_pvcontents(arg);
		BSET_mg_pv(SvMAGIC(bytecode_sv), arg);
		break;
	    }
	  case INSN_XMG_STASH:		/* 66 */
	    {
		svindex arg;
		BGET_svindex(arg);
		*(SV**)&SvSTASH(bytecode_sv) = arg;
		break;
	    }
	  case INSN_GV_FETCHPV:		/* 67 */
	    {
		strconst arg;
		BGET_strconst(arg);
		BSET_gv_fetchpv(bytecode_sv, arg);
		break;
	    }
	  case INSN_GV_STASHPV:		/* 68 */
	    {
		strconst arg;
		BGET_strconst(arg);
		BSET_gv_stashpv(bytecode_sv, arg);
		break;
	    }
	  case INSN_GP_SV:		/* 69 */
	    {
		svindex arg;
		BGET_svindex(arg);
		GvSV(bytecode_sv) = arg;
		break;
	    }
	  case INSN_GP_REFCNT:		/* 70 */
	    {
		U32 arg;
		BGET_U32(arg);
		GvREFCNT(bytecode_sv) = arg;
		break;
	    }
	  case INSN_GP_REFCNT_ADD:		/* 71 */
	    {
		I32 arg;
		BGET_I32(arg);
		BSET_gp_refcnt_add(GvREFCNT(bytecode_sv), arg);
		break;
	    }
	  case INSN_GP_AV:		/* 72 */
	    {
		svindex arg;
		BGET_svindex(arg);
		*(SV**)&GvAV(bytecode_sv) = arg;
		break;
	    }
	  case INSN_GP_HV:		/* 73 */
	    {
		svindex arg;
		BGET_svindex(arg);
		*(SV**)&GvHV(bytecode_sv) = arg;
		break;
	    }
	  case INSN_GP_CV:		/* 74 */
	    {
		svindex arg;
		BGET_svindex(arg);
		*(SV**)&GvCV(bytecode_sv) = arg;
		break;
	    }
	  case INSN_GP_FILE:		/* 75 */
	    {
		pvcontents arg;
		BGET_pvcontents(arg);
		GvFILE(bytecode_sv) = arg;
		break;
	    }
	  case INSN_GP_IO:		/* 76 */
	    {
		svindex arg;
		BGET_svindex(arg);
		*(SV**)&GvIOp(bytecode_sv) = arg;
		break;
	    }
	  case INSN_GP_FORM:		/* 77 */
	    {
		svindex arg;
		BGET_svindex(arg);
		*(SV**)&GvFORM(bytecode_sv) = arg;
		break;
	    }
	  case INSN_GP_CVGEN:		/* 78 */
	    {
		U32 arg;
		BGET_U32(arg);
		GvCVGEN(bytecode_sv) = arg;
		break;
	    }
	  case INSN_GP_LINE:		/* 79 */
	    {
		line_t arg;
		BGET_U16(arg);
		GvLINE(bytecode_sv) = arg;
		break;
	    }
	  case INSN_GP_SHARE:		/* 80 */
	    {
		svindex arg;
		BGET_svindex(arg);
		BSET_gp_share(bytecode_sv, arg);
		break;
	    }
	  case INSN_XGV_FLAGS:		/* 81 */
	    {
		U8 arg;
		BGET_U8(arg);
		GvFLAGS(bytecode_sv) = arg;
		break;
	    }
	  case INSN_OP_NEXT:		/* 82 */
	    {
		opindex arg;
		BGET_opindex(arg);
		PL_op->op_next = arg;
		break;
	    }
	  case INSN_OP_SIBLING:		/* 83 */
	    {
		opindex arg;
		BGET_opindex(arg);
		PL_op->op_sibling = arg;
		break;
	    }
	  case INSN_OP_PPADDR:		/* 84 */
	    {
		strconst arg;
		BGET_strconst(arg);
		BSET_op_ppaddr(PL_op->op_ppaddr, arg);
		break;
	    }
	  case INSN_OP_TARG:		/* 85 */
	    {
		PADOFFSET arg;
		BGET_U32(arg);
		PL_op->op_targ = arg;
		break;
	    }
	  case INSN_OP_TYPE:		/* 86 */
	    {
		OPCODE arg;
		BGET_U16(arg);
		BSET_op_type(PL_op, arg);
		break;
	    }
	  case INSN_OP_SEQ:		/* 87 */
	    {
		U16 arg;
		BGET_U16(arg);
		PL_op->op_seq = arg;
		break;
	    }
	  case INSN_OP_FLAGS:		/* 88 */
	    {
		U8 arg;
		BGET_U8(arg);
		PL_op->op_flags = arg;
		break;
	    }
	  case INSN_OP_PRIVATE:		/* 89 */
	    {
		U8 arg;
		BGET_U8(arg);
		PL_op->op_private = arg;
		break;
	    }
	  case INSN_OP_FIRST:		/* 90 */
	    {
		opindex arg;
		BGET_opindex(arg);
		cUNOP->op_first = arg;
		break;
	    }
	  case INSN_OP_LAST:		/* 91 */
	    {
		opindex arg;
		BGET_opindex(arg);
		cBINOP->op_last = arg;
		break;
	    }
	  case INSN_OP_OTHER:		/* 92 */
	    {
		opindex arg;
		BGET_opindex(arg);
		cLOGOP->op_other = arg;
		break;
	    }
	  case INSN_OP_CHILDREN:		/* 93 */
	    {
		U32 arg;
		BGET_U32(arg);
		cLISTOP->op_children = arg;
		break;
	    }
	  case INSN_OP_PMREPLROOT:		/* 94 */
	    {
		opindex arg;
		BGET_opindex(arg);
		cPMOP->op_pmreplroot = arg;
		break;
	    }
	  case INSN_OP_PMREPLROOTGV:		/* 95 */
	    {
		svindex arg;
		BGET_svindex(arg);
		*(SV**)&cPMOP->op_pmreplroot = arg;
		break;
	    }
	  case INSN_OP_PMREPLSTART:		/* 96 */
	    {
		opindex arg;
		BGET_opindex(arg);
		cPMOP->op_pmreplstart = arg;
		break;
	    }
	  case INSN_OP_PMNEXT:		/* 97 */
	    {
		opindex arg;
		BGET_opindex(arg);
		*(OP**)&cPMOP->op_pmnext = arg;
		break;
	    }
	  case INSN_PREGCOMP:		/* 98 */
	    {
		pvcontents arg;
		BGET_pvcontents(arg);
		BSET_pregcomp(PL_op, arg);
		break;
	    }
	  case INSN_OP_PMFLAGS:		/* 99 */
	    {
		U16 arg;
		BGET_U16(arg);
		cPMOP->op_pmflags = arg;
		break;
	    }
	  case INSN_OP_PMPERMFLAGS:		/* 100 */
	    {
		U16 arg;
		BGET_U16(arg);
		cPMOP->op_pmpermflags = arg;
		break;
	    }
	  case INSN_OP_SV:		/* 101 */
	    {
		svindex arg;
		BGET_svindex(arg);
		cSVOP->op_sv = arg;
		break;
	    }
	  case INSN_OP_PADIX:		/* 102 */
	    {
		PADOFFSET arg;
		BGET_U32(arg);
		cPADOP->op_padix = arg;
		break;
	    }
	  case INSN_OP_PV:		/* 103 */
	    {
		pvcontents arg;
		BGET_pvcontents(arg);
		cPVOP->op_pv = arg;
		break;
	    }
	  case INSN_OP_PV_TR:		/* 104 */
	    {
		op_tr_array arg;
		BGET_op_tr_array(arg);
		cPVOP->op_pv = arg;
		break;
	    }
	  case INSN_OP_REDOOP:		/* 105 */
	    {
		opindex arg;
		BGET_opindex(arg);
		cLOOP->op_redoop = arg;
		break;
	    }
	  case INSN_OP_NEXTOP:		/* 106 */
	    {
		opindex arg;
		BGET_opindex(arg);
		cLOOP->op_nextop = arg;
		break;
	    }
	  case INSN_OP_LASTOP:		/* 107 */
	    {
		opindex arg;
		BGET_opindex(arg);
		cLOOP->op_lastop = arg;
		break;
	    }
	  case INSN_COP_LABEL:		/* 108 */
	    {
		pvcontents arg;
		BGET_pvcontents(arg);
		cCOP->cop_label = arg;
		break;
	    }
	  case INSN_COP_STASHPV:		/* 109 */
	    {
		pvcontents arg;
		BGET_pvcontents(arg);
		BSET_cop_stashpv(cCOP, arg);
		break;
	    }
	  case INSN_COP_FILE:		/* 110 */
	    {
		pvcontents arg;
		BGET_pvcontents(arg);
		BSET_cop_file(cCOP, arg);
		break;
	    }
	  case INSN_COP_SEQ:		/* 111 */
	    {
		U32 arg;
		BGET_U32(arg);
		cCOP->cop_seq = arg;
		break;
	    }
	  case INSN_COP_ARYBASE:		/* 112 */
	    {
		I32 arg;
		BGET_I32(arg);
		cCOP->cop_arybase = arg;
		break;
	    }
	  case INSN_COP_LINE:		/* 113 */
	    {
		line_t arg;
		BGET_U16(arg);
		BSET_cop_line(cCOP, arg);
		break;
	    }
	  case INSN_COP_WARNINGS:		/* 114 */
	    {
		svindex arg;
		BGET_svindex(arg);
		cCOP->cop_warnings = arg;
		break;
	    }
	  case INSN_MAIN_START:		/* 115 */
	    {
		opindex arg;
		BGET_opindex(arg);
		PL_main_start = arg;
		break;
	    }
	  case INSN_MAIN_ROOT:		/* 116 */
	    {
		opindex arg;
		BGET_opindex(arg);
		PL_main_root = arg;
		break;
	    }
	  case INSN_CURPAD:		/* 117 */
	    {
		svindex arg;
		BGET_svindex(arg);
		BSET_curpad(PL_curpad, arg);
		break;
	    }
	  default:
	    Perl_croak(aTHX_ "Illegal bytecode instruction %d\n", insn);
	    /* NOTREACHED */
	}
    }
}
@


1.1
log
@Initial revision
@
text
@@


1.1.1.1
log
@virgin perl 5.6.0
@
text
@@


1.1.1.2
log
@stock perl 5.6.1
@
text
@d29 1
a29 1
static const int optype_size[] = {
d43 8
d52 1
a52 1
bset_obj_store(pTHXo_ struct byteloader_state *bstate, void *obj, I32 ix)
d54 6
a59 3
    if (ix > bstate->bs_obj_list_fill) {
	Renew(bstate->bs_obj_list, ix + 32, void*);
	bstate->bs_obj_list_fill = ix + 31;
d61 1
a61 1
    bstate->bs_obj_list[ix] = obj;
d66 1
a66 1
byterun(pTHXo_ register struct byteloader_state *bstate)
d68 2
a69 7
    register int insn;
    U32 ix;
    SV *specialsv_list[6];

    BYTECODE_HEADER_CHECK;	/* croak if incorrect platform */
    New(666, bstate->bs_obj_list, 32, void*); /* set op objlist */
    bstate->bs_obj_list_fill = 31;
a74 2
    specialsv_list[4] = pWARN_ALL;
    specialsv_list[5] = pWARN_NONE;
d98 1
a98 1
		bstate->bs_sv = arg;
d112 1
a112 1
		BSET_OBJ_STORE(bstate->bs_sv, arg);
d122 1
a122 8
	  case INSN_STPV:		/* 5 */
	    {
		U32 arg;
		BGET_U32(arg);
		BSET_stpv(bstate->bs_pv.xpv_pv, arg);
		break;
	    }
	  case INSN_LDSPECSV:		/* 6 */
d126 1
a126 1
		BSET_ldspecsv(bstate->bs_sv, arg);
d129 1
a129 1
	  case INSN_NEWSV:		/* 7 */
d133 1
a133 1
		BSET_newsv(bstate->bs_sv, arg);
d136 1
a136 1
	  case INSN_NEWOP:		/* 8 */
d143 1
a143 1
	  case INSN_NEWOPN:		/* 9 */
d150 1
a150 1
	  case INSN_NEWPV:		/* 11 */
d156 1
a156 1
	  case INSN_PV_CUR:		/* 12 */
d160 1
a160 1
		bstate->bs_pv.xpv_cur = arg;
d163 1
a163 1
	  case INSN_PV_FREE:		/* 13 */
d165 1
a165 1
		BSET_pv_free(bstate->bs_pv);
d168 1
a168 1
	  case INSN_SV_UPGRADE:		/* 14 */
d172 1
a172 1
		BSET_sv_upgrade(bstate->bs_sv, arg);
d175 1
a175 1
	  case INSN_SV_REFCNT:		/* 15 */
d179 1
a179 1
		SvREFCNT(bstate->bs_sv) = arg;
d182 1
a182 1
	  case INSN_SV_REFCNT_ADD:		/* 16 */
d186 1
a186 1
		BSET_sv_refcnt_add(SvREFCNT(bstate->bs_sv), arg);
d189 1
a189 1
	  case INSN_SV_FLAGS:		/* 17 */
d193 1
a193 1
		SvFLAGS(bstate->bs_sv) = arg;
d196 1
a196 1
	  case INSN_XRV:		/* 18 */
d200 1
a200 1
		SvRV(bstate->bs_sv) = arg;
d203 1
a203 1
	  case INSN_XPV:		/* 19 */
d205 1
a205 1
		BSET_xpv(bstate->bs_sv);
d208 1
a208 1
	  case INSN_XIV32:		/* 20 */
d212 1
a212 1
		SvIVX(bstate->bs_sv) = arg;
d215 1
a215 1
	  case INSN_XIV64:		/* 21 */
d219 1
a219 1
		SvIVX(bstate->bs_sv) = arg;
d222 1
a222 1
	  case INSN_XNV:		/* 22 */
d226 1
a226 1
		SvNVX(bstate->bs_sv) = arg;
d229 1
a229 1
	  case INSN_XLV_TARGOFF:		/* 23 */
d233 1
a233 1
		LvTARGOFF(bstate->bs_sv) = arg;
d236 1
a236 1
	  case INSN_XLV_TARGLEN:		/* 24 */
d240 1
a240 1
		LvTARGLEN(bstate->bs_sv) = arg;
d243 1
a243 1
	  case INSN_XLV_TARG:		/* 25 */
d247 1
a247 1
		LvTARG(bstate->bs_sv) = arg;
d250 1
a250 1
	  case INSN_XLV_TYPE:		/* 26 */
d254 1
a254 1
		LvTYPE(bstate->bs_sv) = arg;
d257 1
a257 1
	  case INSN_XBM_USEFUL:		/* 27 */
d261 1
a261 1
		BmUSEFUL(bstate->bs_sv) = arg;
d264 1
a264 1
	  case INSN_XBM_PREVIOUS:		/* 28 */
d268 1
a268 1
		BmPREVIOUS(bstate->bs_sv) = arg;
d271 1
a271 1
	  case INSN_XBM_RARE:		/* 29 */
d275 1
a275 1
		BmRARE(bstate->bs_sv) = arg;
d278 1
a278 1
	  case INSN_XFM_LINES:		/* 30 */
d282 1
a282 1
		FmLINES(bstate->bs_sv) = arg;
d285 1
a285 1
	  case INSN_XIO_LINES:		/* 31 */
d289 1
a289 1
		IoLINES(bstate->bs_sv) = arg;
d292 1
a292 1
	  case INSN_XIO_PAGE:		/* 32 */
d296 1
a296 1
		IoPAGE(bstate->bs_sv) = arg;
d299 1
a299 1
	  case INSN_XIO_PAGE_LEN:		/* 33 */
d303 1
a303 1
		IoPAGE_LEN(bstate->bs_sv) = arg;
d306 1
a306 1
	  case INSN_XIO_LINES_LEFT:		/* 34 */
d310 1
a310 1
		IoLINES_LEFT(bstate->bs_sv) = arg;
d313 1
a313 1
	  case INSN_XIO_TOP_NAME:		/* 36 */
d317 1
a317 1
		IoTOP_NAME(bstate->bs_sv) = arg;
d320 1
a320 1
	  case INSN_XIO_TOP_GV:		/* 37 */
d324 1
a324 1
		*(SV**)&IoTOP_GV(bstate->bs_sv) = arg;
d327 1
a327 1
	  case INSN_XIO_FMT_NAME:		/* 38 */
d331 1
a331 1
		IoFMT_NAME(bstate->bs_sv) = arg;
d334 1
a334 1
	  case INSN_XIO_FMT_GV:		/* 39 */
d338 1
a338 1
		*(SV**)&IoFMT_GV(bstate->bs_sv) = arg;
d341 1
a341 1
	  case INSN_XIO_BOTTOM_NAME:		/* 40 */
d345 1
a345 1
		IoBOTTOM_NAME(bstate->bs_sv) = arg;
d348 1
a348 1
	  case INSN_XIO_BOTTOM_GV:		/* 41 */
d352 1
a352 1
		*(SV**)&IoBOTTOM_GV(bstate->bs_sv) = arg;
d355 1
a355 1
	  case INSN_XIO_SUBPROCESS:		/* 42 */
d359 1
a359 1
		IoSUBPROCESS(bstate->bs_sv) = arg;
d362 1
a362 1
	  case INSN_XIO_TYPE:		/* 43 */
d366 1
a366 1
		IoTYPE(bstate->bs_sv) = arg;
d369 1
a369 1
	  case INSN_XIO_FLAGS:		/* 44 */
d373 1
a373 1
		IoFLAGS(bstate->bs_sv) = arg;
d376 1
a376 1
	  case INSN_XCV_STASH:		/* 45 */
d380 1
a380 1
		*(SV**)&CvSTASH(bstate->bs_sv) = arg;
d383 1
a383 1
	  case INSN_XCV_START:		/* 46 */
d387 1
a387 1
		CvSTART(bstate->bs_sv) = arg;
d390 1
a390 1
	  case INSN_XCV_ROOT:		/* 47 */
d394 1
a394 1
		CvROOT(bstate->bs_sv) = arg;
d397 1
a397 1
	  case INSN_XCV_GV:		/* 48 */
d401 1
a401 1
		*(SV**)&CvGV(bstate->bs_sv) = arg;
d404 1
a404 1
	  case INSN_XCV_FILE:		/* 49 */
d406 3
a408 3
		pvindex arg;
		BGET_pvindex(arg);
		CvFILE(bstate->bs_sv) = arg;
d411 1
a411 1
	  case INSN_XCV_DEPTH:		/* 50 */
d415 1
a415 1
		CvDEPTH(bstate->bs_sv) = arg;
d418 1
a418 1
	  case INSN_XCV_PADLIST:		/* 51 */
d422 1
a422 1
		*(SV**)&CvPADLIST(bstate->bs_sv) = arg;
d425 1
a425 1
	  case INSN_XCV_OUTSIDE:		/* 52 */
d429 1
a429 1
		*(SV**)&CvOUTSIDE(bstate->bs_sv) = arg;
d432 1
a432 1
	  case INSN_XCV_FLAGS:		/* 53 */
d436 1
a436 1
		CvFLAGS(bstate->bs_sv) = arg;
d439 1
a439 1
	  case INSN_AV_EXTEND:		/* 54 */
d443 1
a443 1
		BSET_av_extend(bstate->bs_sv, arg);
d446 1
a446 1
	  case INSN_AV_PUSH:		/* 55 */
d450 1
a450 1
		BSET_av_push(bstate->bs_sv, arg);
d453 1
a453 1
	  case INSN_XAV_FILL:		/* 56 */
d457 1
a457 1
		AvFILLp(bstate->bs_sv) = arg;
d460 1
a460 1
	  case INSN_XAV_MAX:		/* 57 */
d464 1
a464 1
		AvMAX(bstate->bs_sv) = arg;
d467 1
a467 1
	  case INSN_XAV_FLAGS:		/* 58 */
d471 1
a471 1
		AvFLAGS(bstate->bs_sv) = arg;
d474 1
a474 1
	  case INSN_XHV_RITER:		/* 59 */
d478 1
a478 1
		HvRITER(bstate->bs_sv) = arg;
d481 1
a481 1
	  case INSN_XHV_NAME:		/* 60 */
d485 1
a485 1
		HvNAME(bstate->bs_sv) = arg;
d488 1
a488 1
	  case INSN_HV_STORE:		/* 61 */
d492 1
a492 1
		BSET_hv_store(bstate->bs_sv, arg);
d495 1
a495 1
	  case INSN_SV_MAGIC:		/* 62 */
d499 1
a499 1
		BSET_sv_magic(bstate->bs_sv, arg);
d502 1
a502 1
	  case INSN_MG_OBJ:		/* 63 */
d506 1
a506 1
		SvMAGIC(bstate->bs_sv)->mg_obj = arg;
d509 1
a509 1
	  case INSN_MG_PRIVATE:		/* 64 */
d513 1
a513 1
		SvMAGIC(bstate->bs_sv)->mg_private = arg;
d516 1
a516 1
	  case INSN_MG_FLAGS:		/* 65 */
d520 1
a520 1
		SvMAGIC(bstate->bs_sv)->mg_flags = arg;
d523 1
a523 1
	  case INSN_MG_PV:		/* 66 */
d527 1
a527 1
		BSET_mg_pv(SvMAGIC(bstate->bs_sv), arg);
d530 1
a530 1
	  case INSN_XMG_STASH:		/* 67 */
d534 1
a534 1
		*(SV**)&SvSTASH(bstate->bs_sv) = arg;
d537 1
a537 1
	  case INSN_GV_FETCHPV:		/* 68 */
d541 1
a541 1
		BSET_gv_fetchpv(bstate->bs_sv, arg);
d544 1
a544 1
	  case INSN_GV_STASHPV:		/* 69 */
d548 1
a548 1
		BSET_gv_stashpv(bstate->bs_sv, arg);
d551 1
a551 1
	  case INSN_GP_SV:		/* 70 */
d555 1
a555 1
		GvSV(bstate->bs_sv) = arg;
d558 1
a558 1
	  case INSN_GP_REFCNT:		/* 71 */
d562 1
a562 1
		GvREFCNT(bstate->bs_sv) = arg;
d565 1
a565 1
	  case INSN_GP_REFCNT_ADD:		/* 72 */
d569 1
a569 1
		BSET_gp_refcnt_add(GvREFCNT(bstate->bs_sv), arg);
d572 1
a572 1
	  case INSN_GP_AV:		/* 73 */
d576 1
a576 1
		*(SV**)&GvAV(bstate->bs_sv) = arg;
d579 1
a579 1
	  case INSN_GP_HV:		/* 74 */
d583 1
a583 1
		*(SV**)&GvHV(bstate->bs_sv) = arg;
d586 1
a586 1
	  case INSN_GP_CV:		/* 75 */
d590 1
a590 1
		*(SV**)&GvCV(bstate->bs_sv) = arg;
d593 1
a593 1
	  case INSN_GP_FILE:		/* 76 */
d595 3
a597 3
		pvindex arg;
		BGET_pvindex(arg);
		GvFILE(bstate->bs_sv) = arg;
d600 1
a600 1
	  case INSN_GP_IO:		/* 77 */
d604 1
a604 1
		*(SV**)&GvIOp(bstate->bs_sv) = arg;
d607 1
a607 1
	  case INSN_GP_FORM:		/* 78 */
d611 1
a611 1
		*(SV**)&GvFORM(bstate->bs_sv) = arg;
d614 1
a614 1
	  case INSN_GP_CVGEN:		/* 79 */
d618 1
a618 1
		GvCVGEN(bstate->bs_sv) = arg;
d621 1
a621 1
	  case INSN_GP_LINE:		/* 80 */
d625 1
a625 1
		GvLINE(bstate->bs_sv) = arg;
d628 1
a628 1
	  case INSN_GP_SHARE:		/* 81 */
d632 1
a632 1
		BSET_gp_share(bstate->bs_sv, arg);
d635 1
a635 1
	  case INSN_XGV_FLAGS:		/* 82 */
d639 1
a639 1
		GvFLAGS(bstate->bs_sv) = arg;
d642 1
a642 1
	  case INSN_OP_NEXT:		/* 83 */
d649 1
a649 1
	  case INSN_OP_SIBLING:		/* 84 */
d656 1
a656 1
	  case INSN_OP_PPADDR:		/* 85 */
d663 1
a663 1
	  case INSN_OP_TARG:		/* 86 */
d670 1
a670 1
	  case INSN_OP_TYPE:		/* 87 */
d677 1
a677 1
	  case INSN_OP_SEQ:		/* 88 */
d684 1
a684 1
	  case INSN_OP_FLAGS:		/* 89 */
d691 1
a691 1
	  case INSN_OP_PRIVATE:		/* 90 */
d698 1
a698 1
	  case INSN_OP_FIRST:		/* 91 */
d705 1
a705 1
	  case INSN_OP_LAST:		/* 92 */
d712 1
a712 1
	  case INSN_OP_OTHER:		/* 93 */
d719 7
d826 2
a827 2
		pvindex arg;
		BGET_pvindex(arg);
d833 2
a834 2
		pvindex arg;
		BGET_pvindex(arg);
d840 2
a841 2
		pvindex arg;
		BGET_pvindex(arg);
a891 21
		break;
	    }
	  case INSN_PUSH_BEGIN:		/* 118 */
	    {
		svindex arg;
		BGET_svindex(arg);
		BSET_push_begin(PL_beginav, arg);
		break;
	    }
	  case INSN_PUSH_INIT:		/* 119 */
	    {
		svindex arg;
		BGET_svindex(arg);
		BSET_push_init(PL_initav, arg);
		break;
	    }
	  case INSN_PUSH_END:		/* 120 */
	    {
		svindex arg;
		BGET_svindex(arg);
		BSET_push_end(PL_endav, arg);
@


1.1.1.3
log
@stock perl 5.8.0 from CPAN
@
text
@d18 7
d44 1
a44 1
bset_obj_store(pTHX_ struct byteloader_state *bstate, void *obj, I32 ix)
d55 1
a55 1
byterun(pTHX_ register struct byteloader_state *bstate)
d173 1
a173 1
		U8 arg;
d283 2
a284 2
		IV arg;
		BGET_IV(arg);
d290 2
a291 2
		IV arg;
		BGET_IV(arg);
d297 2
a298 2
		IV arg;
		BGET_IV(arg);
d304 2
a305 2
		IV arg;
		BGET_IV(arg);
d311 2
a312 2
		IV arg;
		BGET_IV(arg);
@


1.1.1.4
log
@perl 5.8.2 from CPAN
@
text
@d47 1
a47 1
int
a56 2
    bstate->bs_obj_list[0] = NULL; /* first is always Null */
    bstate->bs_ix = 1;
d125 1
a125 8
	  case INSN_LDSPECSVX:		/* 7 */
	    {
		U8 arg;
		BGET_U8(arg);
		BSET_ldspecsvx(bstate->bs_sv, arg);
		break;
	    }
	  case INSN_NEWSV:		/* 8 */
d132 1
a132 8
	  case INSN_NEWSVX:		/* 9 */
	    {
		U32 arg;
		BGET_U32(arg);
		BSET_newsvx(bstate->bs_sv, arg);
		break;
	    }
	  case INSN_NEWOP:		/* 11 */
d139 1
a139 8
	  case INSN_NEWOPX:		/* 12 */
	    {
		U16 arg;
		BGET_U16(arg);
		BSET_newopx(PL_op, arg);
		break;
	    }
	  case INSN_NEWOPN:		/* 13 */
d146 1
a146 1
	  case INSN_NEWPV:		/* 14 */
d152 1
a152 1
	  case INSN_PV_CUR:		/* 15 */
d155 1
a155 1
		BGET_PADOFFSET(arg);
d159 1
a159 1
	  case INSN_PV_FREE:		/* 16 */
d164 1
a164 1
	  case INSN_SV_UPGRADE:		/* 17 */
d171 1
a171 1
	  case INSN_SV_REFCNT:		/* 18 */
d178 1
a178 1
	  case INSN_SV_REFCNT_ADD:		/* 19 */
d185 1
a185 1
	  case INSN_SV_FLAGS:		/* 20 */
d192 1
a192 1
	  case INSN_XRV:		/* 21 */
d199 1
a199 1
	  case INSN_XPV:		/* 22 */
d204 1
a204 1
	  case INSN_XPV_CUR:		/* 23 */
d206 3
a208 10
		STRLEN arg;
		BGET_PADOFFSET(arg);
		SvCUR(bstate->bs_sv) = arg;
		break;
	    }
	  case INSN_XPV_LEN:		/* 24 */
	    {
		STRLEN arg;
		BGET_PADOFFSET(arg);
		SvLEN(bstate->bs_sv) = arg;
d211 1
a211 1
	  case INSN_XIV:		/* 25 */
d213 2
a214 2
		IV arg;
		BGET_IV(arg);
d218 1
a218 1
	  case INSN_XNV:		/* 26 */
d225 1
a225 1
	  case INSN_XLV_TARGOFF:		/* 27 */
d228 1
a228 1
		BGET_PADOFFSET(arg);
d232 1
a232 1
	  case INSN_XLV_TARGLEN:		/* 28 */
d235 1
a235 1
		BGET_PADOFFSET(arg);
d239 1
a239 1
	  case INSN_XLV_TARG:		/* 29 */
d246 1
a246 1
	  case INSN_XLV_TYPE:		/* 30 */
d253 1
a253 1
	  case INSN_XBM_USEFUL:		/* 31 */
d260 1
a260 1
	  case INSN_XBM_PREVIOUS:		/* 32 */
d267 1
a267 1
	  case INSN_XBM_RARE:		/* 33 */
d274 1
a274 1
	  case INSN_XFM_LINES:		/* 34 */
d281 1
a281 1
	  case INSN_XIO_LINES:		/* 36 */
d288 1
a288 1
	  case INSN_XIO_PAGE:		/* 37 */
d295 1
a295 1
	  case INSN_XIO_PAGE_LEN:		/* 38 */
d302 1
a302 1
	  case INSN_XIO_LINES_LEFT:		/* 39 */
d309 1
a309 1
	  case INSN_XIO_TOP_NAME:		/* 40 */
d311 2
a312 2
		pvindex arg;
		BGET_pvindex(arg);
d316 1
a316 1
	  case INSN_XIO_TOP_GV:		/* 41 */
d323 1
a323 1
	  case INSN_XIO_FMT_NAME:		/* 42 */
d325 2
a326 2
		pvindex arg;
		BGET_pvindex(arg);
d330 1
a330 1
	  case INSN_XIO_FMT_GV:		/* 43 */
d337 1
a337 1
	  case INSN_XIO_BOTTOM_NAME:		/* 44 */
d339 2
a340 2
		pvindex arg;
		BGET_pvindex(arg);
d344 1
a344 1
	  case INSN_XIO_BOTTOM_GV:		/* 45 */
d351 1
a351 1
	  case INSN_XIO_SUBPROCESS:		/* 46 */
d358 1
a358 1
	  case INSN_XIO_TYPE:		/* 47 */
d365 1
a365 1
	  case INSN_XIO_FLAGS:		/* 48 */
d372 1
a372 8
	  case INSN_XCV_XSUBANY:		/* 49 */
	    {
		svindex arg;
		BGET_svindex(arg);
		*(SV**)&CvXSUBANY(bstate->bs_sv).any_ptr = arg;
		break;
	    }
	  case INSN_XCV_STASH:		/* 50 */
d379 1
a379 1
	  case INSN_XCV_START:		/* 51 */
d386 1
a386 1
	  case INSN_XCV_ROOT:		/* 52 */
d393 1
a393 1
	  case INSN_XCV_GV:		/* 53 */
d400 1
a400 1
	  case INSN_XCV_FILE:		/* 54 */
d407 1
a407 1
	  case INSN_XCV_DEPTH:		/* 55 */
d410 1
a410 1
		BGET_long(arg);
d414 1
a414 1
	  case INSN_XCV_PADLIST:		/* 56 */
d421 1
a421 1
	  case INSN_XCV_OUTSIDE:		/* 57 */
d428 1
a428 8
	  case INSN_XCV_OUTSIDE_SEQ:		/* 58 */
	    {
		U32 arg;
		BGET_U32(arg);
		CvOUTSIDE_SEQ(bstate->bs_sv) = arg;
		break;
	    }
	  case INSN_XCV_FLAGS:		/* 59 */
d435 1
a435 1
	  case INSN_AV_EXTEND:		/* 60 */
d438 1
a438 1
		BGET_PADOFFSET(arg);
d442 1
a442 8
	  case INSN_AV_PUSHX:		/* 61 */
	    {
		svindex arg;
		BGET_svindex(arg);
		BSET_av_pushx(bstate->bs_sv, arg);
		break;
	    }
	  case INSN_AV_PUSH:		/* 62 */
d449 1
a449 1
	  case INSN_XAV_FILL:		/* 63 */
d452 1
a452 1
		BGET_PADOFFSET(arg);
d456 1
a456 1
	  case INSN_XAV_MAX:		/* 64 */
d459 1
a459 1
		BGET_PADOFFSET(arg);
d463 1
a463 1
	  case INSN_XAV_FLAGS:		/* 65 */
d470 1
a470 1
	  case INSN_XHV_RITER:		/* 66 */
d477 1
a477 1
	  case INSN_XHV_NAME:		/* 67 */
d479 2
a480 2
		pvindex arg;
		BGET_pvindex(arg);
d484 1
a484 8
	  case INSN_XHV_PMROOT:		/* 68 */
	    {
		opindex arg;
		BGET_opindex(arg);
		*(OP**)&HvPMROOT(bstate->bs_sv) = arg;
		break;
	    }
	  case INSN_HV_STORE:		/* 69 */
d491 1
a491 1
	  case INSN_SV_MAGIC:		/* 70 */
d498 1
a498 1
	  case INSN_MG_OBJ:		/* 71 */
d505 1
a505 1
	  case INSN_MG_PRIVATE:		/* 72 */
d512 1
a512 1
	  case INSN_MG_FLAGS:		/* 73 */
d519 1
a519 1
	  case INSN_MG_NAME:		/* 74 */
d523 1
a523 1
		BSET_mg_name(SvMAGIC(bstate->bs_sv), arg);
d526 1
a526 8
	  case INSN_MG_NAMEX:		/* 75 */
	    {
		svindex arg;
		BGET_svindex(arg);
		BSET_mg_namex(SvMAGIC(bstate->bs_sv), arg);
		break;
	    }
	  case INSN_XMG_STASH:		/* 76 */
d533 1
a533 1
	  case INSN_GV_FETCHPV:		/* 77 */
d540 1
a540 8
	  case INSN_GV_FETCHPVX:		/* 78 */
	    {
		strconst arg;
		BGET_strconst(arg);
		BSET_gv_fetchpvx(bstate->bs_sv, arg);
		break;
	    }
	  case INSN_GV_STASHPV:		/* 79 */
d547 1
a547 8
	  case INSN_GV_STASHPVX:		/* 80 */
	    {
		strconst arg;
		BGET_strconst(arg);
		BSET_gv_stashpvx(bstate->bs_sv, arg);
		break;
	    }
	  case INSN_GP_SV:		/* 81 */
d554 1
a554 1
	  case INSN_GP_REFCNT:		/* 82 */
d561 1
a561 1
	  case INSN_GP_REFCNT_ADD:		/* 83 */
d568 1
a568 1
	  case INSN_GP_AV:		/* 84 */
d575 1
a575 1
	  case INSN_GP_HV:		/* 85 */
d582 1
a582 1
	  case INSN_GP_CV:		/* 86 */
d589 1
a589 1
	  case INSN_GP_FILE:		/* 87 */
d596 1
a596 1
	  case INSN_GP_IO:		/* 88 */
d603 1
a603 1
	  case INSN_GP_FORM:		/* 89 */
d610 1
a610 1
	  case INSN_GP_CVGEN:		/* 90 */
d617 1
a617 1
	  case INSN_GP_LINE:		/* 91 */
d620 1
a620 1
		BGET_U32(arg);
d624 1
a624 1
	  case INSN_GP_SHARE:		/* 92 */
d631 1
a631 1
	  case INSN_XGV_FLAGS:		/* 93 */
d638 1
a638 1
	  case INSN_OP_NEXT:		/* 94 */
d645 1
a645 1
	  case INSN_OP_SIBLING:		/* 95 */
d652 1
a652 1
	  case INSN_OP_PPADDR:		/* 96 */
d659 1
a659 1
	  case INSN_OP_TARG:		/* 97 */
d662 1
a662 1
		BGET_PADOFFSET(arg);
d666 1
a666 1
	  case INSN_OP_TYPE:		/* 98 */
d673 1
a673 1
	  case INSN_OP_SEQ:		/* 99 */
d680 1
a680 1
	  case INSN_OP_FLAGS:		/* 100 */
d687 1
a687 1
	  case INSN_OP_PRIVATE:		/* 101 */
d694 1
a694 1
	  case INSN_OP_FIRST:		/* 102 */
d701 1
a701 1
	  case INSN_OP_LAST:		/* 103 */
d708 1
a708 1
	  case INSN_OP_OTHER:		/* 104 */
d715 1
a715 1
	  case INSN_OP_PMREPLROOT:		/* 105 */
d722 8
a729 1
	  case INSN_OP_PMREPLSTART:		/* 106 */
d736 1
a736 1
	  case INSN_OP_PMNEXT:		/* 107 */
d743 1
a743 32
#ifdef USE_ITHREADS
	  case INSN_OP_PMSTASHPV:		/* 108 */
	    {
		pvindex arg;
		BGET_pvindex(arg);
		BSET_op_pmstashpv(cPMOP, arg);
		break;
	    }
	  case INSN_OP_PMREPLROOTPO:		/* 109 */
	    {
		PADOFFSET arg;
		BGET_PADOFFSET(arg);
		cPMOP->op_pmreplroot = (OP*)arg;
		break;
	    }
#else
	  case INSN_OP_PMSTASH:		/* 110 */
	    {
		svindex arg;
		BGET_svindex(arg);
		*(SV**)&cPMOP->op_pmstash = arg;
		break;
	    }
	  case INSN_OP_PMREPLROOTGV:		/* 111 */
	    {
		svindex arg;
		BGET_svindex(arg);
		*(SV**)&cPMOP->op_pmreplroot = arg;
		break;
	    }
#endif
	  case INSN_PREGCOMP:		/* 112 */
d750 1
a750 1
	  case INSN_OP_PMFLAGS:		/* 113 */
d757 1
a757 1
	  case INSN_OP_PMPERMFLAGS:		/* 114 */
d764 1
a764 8
	  case INSN_OP_PMDYNFLAGS:		/* 115 */
	    {
		U8 arg;
		BGET_U8(arg);
		cPMOP->op_pmdynflags = arg;
		break;
	    }
	  case INSN_OP_SV:		/* 116 */
d771 1
a771 1
	  case INSN_OP_PADIX:		/* 117 */
d774 1
a774 1
		BGET_PADOFFSET(arg);
d778 1
a778 1
	  case INSN_OP_PV:		/* 118 */
d785 1
a785 1
	  case INSN_OP_PV_TR:		/* 119 */
d792 1
a792 1
	  case INSN_OP_REDOOP:		/* 120 */
d799 1
a799 1
	  case INSN_OP_NEXTOP:		/* 121 */
d806 1
a806 1
	  case INSN_OP_LASTOP:		/* 122 */
d813 1
a813 1
	  case INSN_COP_LABEL:		/* 123 */
d820 1
a820 2
#ifdef USE_ITHREADS
	  case INSN_COP_STASHPV:		/* 124 */
d827 1
a827 1
	  case INSN_COP_FILE:		/* 125 */
d834 1
a834 17
#else
	  case INSN_COP_STASH:		/* 126 */
	    {
		svindex arg;
		BGET_svindex(arg);
		BSET_cop_stash(cCOP, arg);
		break;
	    }
	  case INSN_COP_FILEGV:		/* 127 */
	    {
		svindex arg;
		BGET_svindex(arg);
		BSET_cop_filegv(cCOP, arg);
		break;
	    }
#endif
	  case INSN_COP_SEQ:		/* 128 */
d841 1
a841 1
	  case INSN_COP_ARYBASE:		/* 129 */
d848 1
a848 1
	  case INSN_COP_LINE:		/* 130 */
d851 2
a852 9
		BGET_U32(arg);
		cCOP->cop_line = arg;
		break;
	    }
	  case INSN_COP_IO:		/* 131 */
	    {
		svindex arg;
		BGET_svindex(arg);
		cCOP->cop_io = arg;
d855 1
a855 1
	  case INSN_COP_WARNINGS:		/* 132 */
d862 1
a862 1
	  case INSN_MAIN_START:		/* 133 */
d869 1
a869 1
	  case INSN_MAIN_ROOT:		/* 134 */
d876 1
a876 8
	  case INSN_MAIN_CV:		/* 135 */
	    {
		svindex arg;
		BGET_svindex(arg);
		*(SV**)&PL_main_cv = arg;
		break;
	    }
	  case INSN_CURPAD:		/* 136 */
d883 1
a883 1
	  case INSN_PUSH_BEGIN:		/* 137 */
d890 1
a890 1
	  case INSN_PUSH_INIT:		/* 138 */
d897 1
a897 1
	  case INSN_PUSH_END:		/* 139 */
a903 79
	  case INSN_CURSTASH:		/* 140 */
	    {
		svindex arg;
		BGET_svindex(arg);
		*(SV**)&PL_curstash = arg;
		break;
	    }
	  case INSN_DEFSTASH:		/* 141 */
	    {
		svindex arg;
		BGET_svindex(arg);
		*(SV**)&PL_defstash = arg;
		break;
	    }
	  case INSN_DATA:		/* 142 */
	    {
		U8 arg;
		BGET_U8(arg);
		BSET_data(none, arg);
		break;
	    }
	  case INSN_INCAV:		/* 143 */
	    {
		svindex arg;
		BGET_svindex(arg);
		*(SV**)&GvAV(PL_incgv) = arg;
		break;
	    }
	  case INSN_LOAD_GLOB:		/* 144 */
	    {
		svindex arg;
		BGET_svindex(arg);
		BSET_load_glob(none, arg);
		break;
	    }
#ifdef USE_ITHREADS
	  case INSN_REGEX_PADAV:		/* 145 */
	    {
		svindex arg;
		BGET_svindex(arg);
		*(SV**)&PL_regex_padav = arg;
		break;
	    }
#endif
	  case INSN_DOWARN:		/* 146 */
	    {
		U8 arg;
		BGET_U8(arg);
		PL_dowarn = arg;
		break;
	    }
	  case INSN_COMPPAD_NAME:		/* 147 */
	    {
		svindex arg;
		BGET_svindex(arg);
		*(SV**)&PL_comppad_name = arg;
		break;
	    }
	  case INSN_XGV_STASH:		/* 148 */
	    {
		svindex arg;
		BGET_svindex(arg);
		*(SV**)&GvSTASH(bstate->bs_sv) = arg;
		break;
	    }
	  case INSN_SIGNAL:		/* 149 */
	    {
		strconst arg;
		BGET_strconst(arg);
		BSET_signal(bstate->bs_sv, arg);
		break;
	    }
	  case INSN_FORMFEED:		/* 150 */
	    {
		svindex arg;
		BGET_svindex(arg);
		PL_formfeed = arg;
		break;
	    }
a908 1
    return 0;
@


1.1.1.5
log
@perl 5.8.8 import
@
text
@d1 1
a1 2
/* -*- buffer-read-only: t -*-
 *
d55 1
a55 1
    Newx(bstate->bs_obj_list, 32, void*); /* set op objlist */
d219 1
a219 1
		BSET_xrv(bstate->bs_sv, arg);
d231 1
a231 1
		BSET_xpv_cur(bstate->bs_sv, arg);
d238 1
a238 1
		BSET_xpv_len(bstate->bs_sv, arg);
d245 1
a245 1
		BSET_xiv(bstate->bs_sv, arg);
d252 1
a252 1
		BSET_xnv(bstate->bs_sv, arg);
d532 1
a532 1
		BSET_xhv_name(bstate->bs_sv, arg);
d595 1
a595 1
		BSET_xmg_stash(bstate->bs_sv, arg);
a1130 2

/* ex: set ro: */
@


