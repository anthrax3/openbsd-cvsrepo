head	1.1;
branch	1.1.1;
access;
symbols
	OPENBSD_6_1:1.1.1.2.0.10
	OPENBSD_6_1_BASE:1.1.1.2
	OPENBSD_6_0:1.1.1.2.0.12
	OPENBSD_6_0_BASE:1.1.1.2
	OPENBSD_5_9:1.1.1.2.0.6
	OPENBSD_5_9_BASE:1.1.1.2
	OPENBSD_5_8:1.1.1.2.0.8
	OPENBSD_5_8_BASE:1.1.1.2
	PERL_5_20_2:1.1.1.2
	OPENBSD_5_7:1.1.1.2.0.2
	OPENBSD_5_7_BASE:1.1.1.2
	PERL_5_20_1:1.1.1.2
	OPENBSD_5_6:1.1.1.2.0.4
	OPENBSD_5_6_BASE:1.1.1.2
	PERL_5_18_2:1.1.1.2
	PERL:1.1.1
	OPENBSD_5_5:1.1.1.1.0.6
	OPENBSD_5_5_BASE:1.1.1.1
	OPENBSD_5_4:1.1.1.1.0.2
	OPENBSD_5_4_BASE:1.1.1.1
	PERL_5_16_3:1.1.1.1
	CPAN:1.1.1;
locks; strict;
comment	@# @;
expand	@o@;


1.1
date	2013.03.25.20.08.47;	author sthen;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	2013.03.25.20.08.47;	author sthen;	state Exp;
branches;
next	1.1.1.2;

1.1.1.2
date	2014.03.24.14.59.02;	author afresh1;	state Exp;
branches;
next	;


desc
@@


1.1
log
@Initial revision
@
text
@#!perl

use strict;
use utf8;
use open qw( :utf8 :std );
use Test::More tests => 14;

use XS::APItest;

# This test must happen outside of any warnings scope
{
 local $^W;
 my $w;
 local $SIG{__WARN__} = sub { $w .= shift };
 sub frimple() { 78 }
 newCONSTSUB_type(\%::, "frimple", 0, 1, undef);
 like $w, qr/Constant subroutine frimple redefined at /,
   'newCONSTSUB constant redefinition warning is unaffected by $^W=0';
 undef $w;
 newCONSTSUB_type(\%::, "frimple", 0, 1, undef);
 is $w, undef, '...unless the const SVs are the same';
 eval 'sub frimple() { 78 }';
 undef $w;
 newCONSTSUB_type(\%::, "frimple", 0, 1, "78");
 is $w, undef, '...or the const SVs have the same value';
}

use warnings;

my ($const, $glob) =
 XS::APItest::newCONSTSUB_type(\%::, "sanity_check", 0, 0, undef);

ok $const;
ok *{$glob}{CODE};

($const, $glob) =
  XS::APItest::newCONSTSUB_type(\%::, "\x{30cb}", 0, 0, undef);
ok $const, "newCONSTSUB generates the constant,";
ok *{$glob}{CODE}, "..and the glob,";
ok !$::{"\x{30cb}"}, "...but not the right one";

($const, $glob) =
  XS::APItest::newCONSTSUB_type(\%::, "\x{30cd}", 0, 1, undef);
ok $const, "newCONSTSUB_flags generates the constant,";
ok *{$glob}{CODE}, "..and the glob,";
ok $::{"\x{30cd}"}, "...the right one!";

eval q{
 BEGIN {
  no warnings;
  my $w;
  local $SIG{__WARN__} = sub { $w .= shift };
  *foo = sub(){123};
  newCONSTSUB_type(\%::, "foo", 0, 1, undef);
  is $w, undef, 'newCONSTSUB uses calling scope for redefinition warnings';
 }
};

{
 no strict 'refs';
 *{"foo::\x{100}"} = sub(){return 123};
 my $w;
 local $SIG{__WARN__} = sub { $w .= shift };
 newCONSTSUB_type(\%foo::, "\x{100}", 0, 1, undef);
 like $w, qr/Subroutine \x{100} redefined at /,
   'newCONSTSUB redefinition warning + utf8';
 undef $w;
 newCONSTSUB_type(\%foo::, "\x{100}", 0, 1, 54);
 like $w, qr/Constant subroutine \x{100} redefined at /,
   'newCONSTSUB constant redefinition warning + utf8';
}
@


1.1.1.1
log
@import perl 5.16.3 from CPAN - worked on by Andrew Fresh and myself
@
text
@@


1.1.1.2
log
@Import perl-5.18.2

OK espie@@ sthen@@ deraadt@@
@
text
@d6 1
a6 1
use Test::More tests => 22;
d16 1
a16 1
 newCONSTSUB_flags(\%::, "frimple", 0, undef);
d20 1
a20 1
 newCONSTSUB_flags(\%::, "frimple", 0, undef);
d24 1
a24 1
 newCONSTSUB_flags(\%::, "frimple", 0, "78");
d31 1
a31 1
 XS::APItest::newCONSTSUB(\%::, "sanity_check", 0, undef);
d37 1
a37 1
  XS::APItest::newCONSTSUB(\%::, "\x{30cb}", 0, undef);
d43 1
a43 1
  XS::APItest::newCONSTSUB_flags(\%::, "\x{30cd}", 0, undef);
d54 1
a54 1
  newCONSTSUB_flags(\%::, "foo", 0, undef);
d64 1
a64 1
 newCONSTSUB_flags(\%foo::, "\x{100}", 0, undef);
d68 1
a68 1
 newCONSTSUB_flags(\%foo::, "\x{100}", 0, 54);
a70 31
}

# XS::APItest was not handling references correctly here

package Counter {
    our $count = 0;

    sub new {
        ++$count;
        my $o = bless [];
        return $o;
    }

    sub DESTROY {
        --$count;
    }
};

foreach (['newCONSTSUB', 'ZZIP'],
         ['newCONSTSUB_flags', 'BRRRAPP']) {
    my ($using, $name) = @@$_;
    is($Counter::count, 0, 'No objects exist before we start');
    my $sub = XS::APItest->can($using);
    ($const, $glob) = $sub->(\%::, $name, 0, Counter->new());
    is($const, 1, "subroutine generated by $using is CvCONST");
    is($Counter::count, 1, '1 object now exists');
    {
        no warnings 'redefine';
        *$glob = sub () {};
    }
    is($Counter::count, 0, 'no objects remain');
@

