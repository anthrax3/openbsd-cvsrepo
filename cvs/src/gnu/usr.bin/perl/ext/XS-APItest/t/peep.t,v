head	1.1;
branch	1.1.1;
access;
symbols
	OPENBSD_6_1:1.1.1.1.0.18
	OPENBSD_6_1_BASE:1.1.1.1
	OPENBSD_6_0:1.1.1.1.0.16
	OPENBSD_6_0_BASE:1.1.1.1
	OPENBSD_5_9:1.1.1.1.0.10
	OPENBSD_5_9_BASE:1.1.1.1
	OPENBSD_5_8:1.1.1.1.0.12
	OPENBSD_5_8_BASE:1.1.1.1
	PERL_5_20_2:1.1.1.1
	OPENBSD_5_7:1.1.1.1.0.4
	OPENBSD_5_7_BASE:1.1.1.1
	PERL_5_20_1:1.1.1.1
	OPENBSD_5_6:1.1.1.1.0.8
	OPENBSD_5_6_BASE:1.1.1.1
	PERL_5_18_2:1.1.1.1
	PERL:1.1.1
	OPENBSD_5_5:1.1.1.1.0.6
	OPENBSD_5_5_BASE:1.1.1.1
	OPENBSD_5_4:1.1.1.1.0.2
	OPENBSD_5_4_BASE:1.1.1.1
	PERL_5_16_3:1.1.1.1
	CPAN:1.1.1;
locks; strict;
comment	@# @;
expand	@o@;


1.1
date	2013.03.25.20.08.47;	author sthen;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	2013.03.25.20.08.47;	author sthen;	state Exp;
branches;
next	;


desc
@@


1.1
log
@Initial revision
@
text
@#!perl

use strict;
use warnings;
use Test::More tests => 6;

use XS::APItest;

my $record = XS::APItest::peep_record;
my $rrecord = XS::APItest::rpeep_record;

# our peep got called and remembered the string constant
XS::APItest::peep_enable;
eval q[my $foo = q/affe/];
XS::APItest::peep_disable;

is(scalar @@{ $record }, 1);
is(scalar @@{ $rrecord }, 1);
is($record->[0], 'affe');
is($rrecord->[0], 'affe');


# A deep-enough nesting of conditionals defeats the deferring mechanism
# and triggers recursion. Note that this test is sensitive to the details
# rpeep: the main thing it is testing is that rpeep is called more than
# peep, and that all branches are covered; the order of branch calling is
# less important.

my $code =  q[my ($a,$b); $a =];
$code .= qq{ \$b ? "foo$_" :} for (1..10);
$code .= qq{ "foo11" };
XS::APItest::peep_enable;
eval $code;
XS::APItest::peep_disable;

is_deeply($record,  [ "foo11" ]);
is_deeply($rrecord, [
    qw(foo1 foo2 foo3 foo4 foo5 foo6 foo10 foo9 foo8 foo7 foo11) ]);
@


1.1.1.1
log
@import perl 5.16.3 from CPAN - worked on by Andrew Fresh and myself
@
text
@@
