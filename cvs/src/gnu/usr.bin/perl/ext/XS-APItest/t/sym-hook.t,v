head	1.1;
branch	1.1.1;
access;
symbols
	OPENBSD_6_1_BASE:1.1.1.1
	OPENBSD_6_0:1.1.1.1.0.12
	OPENBSD_6_0_BASE:1.1.1.1
	OPENBSD_5_9:1.1.1.1.0.6
	OPENBSD_5_9_BASE:1.1.1.1
	OPENBSD_5_8:1.1.1.1.0.8
	OPENBSD_5_8_BASE:1.1.1.1
	PERL_5_20_2:1.1.1.1
	OPENBSD_5_7:1.1.1.1.0.2
	OPENBSD_5_7_BASE:1.1.1.1
	PERL_5_20_1:1.1.1.1
	OPENBSD_5_6:1.1.1.1.0.4
	OPENBSD_5_6_BASE:1.1.1.1
	PERL_5_18_2:1.1.1.1
	PERL:1.1.1;
locks; strict;
comment	@# @;
expand	@b@;


1.1
date	2014.03.24.14.59.02;	author afresh1;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	2014.03.24.14.59.02;	author afresh1;	state Exp;
branches;
next	;


desc
@@


1.1
log
@Initial revision
@
text
@
# Test that PL_check hooks for RV2*V can override symbol lookups.

# So far we only test RV2CV.

use XS::APItest;
use Test::More tests => 4;

BEGIN {
    setup_rv2cv_addunderbar;
    $^H{'XS::APItest/addunder'} = 1; # make foo() actually call foo_()
}

sub foo_ { @@_ ? shift . "___" : "phew" }

is(foo(), "phew");

# Make sure subs looked up via rv2cv check hooks are not treated as second-
# class subs.

BEGIN { # If there is a foo symbol, this test will not be testing anything.
    delete $::{foo};
    delete $::{goo};
}
is((foo bar), 'bar___');
$bar = "baz";
is((foo $bar), 'baz___');

# Proto should cause goo() to override Foo->goo interpretation.
{package Foom}
sub goo_ (*) { shift . "===" }
is((goo Foom), "Foom===");
@


1.1.1.1
log
@Import perl-5.18.2

OK espie@@ sthen@@ deraadt@@
@
text
@@
