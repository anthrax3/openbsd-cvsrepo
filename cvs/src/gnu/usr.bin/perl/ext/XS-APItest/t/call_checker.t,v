head	1.2;
access;
symbols
	OPENBSD_6_2:1.2.0.2
	OPENBSD_6_2_BASE:1.2
	PERL_5_24_2:1.1.1.3
	OPENBSD_6_1:1.2.0.4
	OPENBSD_6_1_BASE:1.2
	OPENBSD_6_0:1.1.1.2.0.12
	OPENBSD_6_0_BASE:1.1.1.2
	OPENBSD_5_9:1.1.1.2.0.6
	OPENBSD_5_9_BASE:1.1.1.2
	OPENBSD_5_8:1.1.1.2.0.8
	OPENBSD_5_8_BASE:1.1.1.2
	PERL_5_20_2:1.1.1.2
	OPENBSD_5_7:1.1.1.2.0.2
	OPENBSD_5_7_BASE:1.1.1.2
	PERL_5_20_1:1.1.1.2
	OPENBSD_5_6:1.1.1.2.0.4
	OPENBSD_5_6_BASE:1.1.1.2
	PERL_5_18_2:1.1.1.2
	PERL:1.1.1
	OPENBSD_5_5:1.1.1.1.0.6
	OPENBSD_5_5_BASE:1.1.1.1
	OPENBSD_5_4:1.1.1.1.0.2
	OPENBSD_5_4_BASE:1.1.1.1
	PERL_5_16_3:1.1.1.1
	CPAN:1.1.1;
locks; strict;
comment	@# @;
expand	@o@;


1.2
date	2017.02.05.00.32.14;	author afresh1;	state Exp;
branches;
next	1.1;
commitid	cxJ08BvJA9Pt2PTM;

1.1
date	2013.03.25.20.08.47;	author sthen;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	2013.03.25.20.08.47;	author sthen;	state Exp;
branches;
next	1.1.1.2;

1.1.1.2
date	2014.03.24.14.59.02;	author afresh1;	state Exp;
branches;
next	1.1.1.3;

1.1.1.3
date	2017.08.14.13.46.12;	author afresh1;	state Exp;
branches;
next	;
commitid	fAzrs78vdW2Yfc6A;


desc
@@


1.2
log
@Fix merge issues, remove excess files - match perl-5.24.1 dist
@
text
@use warnings;
use strict;
use Test::More tests => 78;

use XS::APItest;

{
    local $TODO = $^O eq "cygwin" ? "[perl #78502] function pointers don't match on cygwin" : "";
    ok( eval { XS::APItest::test_cv_getset_call_checker(); 1 })
      or diag $@@;
}

my @@z = ();
my @@a = qw(a);
my @@b = qw(a b);
my @@c = qw(a b c);

my($foo_got, $foo_ret);
sub foo($@@) { $foo_got = [ @@_ ]; return "z"; }

sub bar (\@@$) { }
sub baz { }

$foo_got = undef;
eval q{$foo_ret = foo(@@b, @@c);};
is $@@, "";
is_deeply $foo_got, [ 2, qw(a b c) ];
is $foo_ret, "z";

$foo_got = undef;
eval q{$foo_ret = &foo(@@b, @@c);};
is $@@, "";
is_deeply $foo_got, [ qw(a b), qw(a b c) ];
is $foo_ret, "z";

cv_set_call_checker_lists(\&foo);

$foo_got = undef;
eval q{$foo_ret = foo(@@b, @@c);};
is $@@, "";
is_deeply $foo_got, [ qw(a b), qw(a b c) ];
is $foo_ret, "z";

$foo_got = undef;
eval q{$foo_ret = &foo(@@b, @@c);};
is $@@, "";
is_deeply $foo_got, [ qw(a b), qw(a b c) ];
is $foo_ret, "z";

cv_set_call_checker_scalars(\&foo);

$foo_got = undef;
eval q{$foo_ret = foo(@@b, @@c);};
is $@@, "";
is_deeply $foo_got, [ 2, 3 ];
is $foo_ret, "z";

$foo_got = undef;
eval q{$foo_ret = foo(@@b, @@c, @@a, @@c);};
is $@@, "";
is_deeply $foo_got, [ 2, 3, 1, 3 ];
is $foo_ret, "z";

$foo_got = undef;
eval q{$foo_ret = foo(@@b);};
is $@@, "";
is_deeply $foo_got, [ 2 ];
is $foo_ret, "z";

$foo_got = undef;
eval q{$foo_ret = foo();};
is $@@, "";
is_deeply $foo_got, [];
is $foo_ret, "z";

$foo_got = undef;
eval q{$foo_ret = &foo(@@b, @@c);};
is $@@, "";
is_deeply $foo_got, [ qw(a b), qw(a b c) ];
is $foo_ret, "z";

cv_set_call_checker_proto(\&foo, "\\\@@\$");
$foo_got = undef;
eval q{$foo_ret = foo(@@b, @@c);};
is $@@, "";
is_deeply $foo_got, [ \@@b, 3 ];
is $foo_ret, "z";

cv_set_call_checker_proto(\&foo, undef);
$foo_got = undef;
eval q{$foo_ret = foo(@@b, @@c);};
isnt $@@, "";
is_deeply $foo_got, undef;
is $foo_ret, "z";

cv_set_call_checker_proto(\&foo, \&bar);
$foo_got = undef;
eval q{$foo_ret = foo(@@b, @@c);};
is $@@, "";
is_deeply $foo_got, [ \@@b, 3 ];
is $foo_ret, "z";

cv_set_call_checker_proto(\&foo, \&baz);
$foo_got = undef;
eval q{$foo_ret = foo(@@b, @@c);};
isnt $@@, "";
is_deeply $foo_got, undef;
is $foo_ret, "z";

cv_set_call_checker_proto_or_list(\&foo, "\\\@@\$");
$foo_got = undef;
eval q{$foo_ret = foo(@@b, @@c);};
is $@@, "";
is_deeply $foo_got, [ \@@b, 3 ];
is $foo_ret, "z";

cv_set_call_checker_proto_or_list(\&foo, undef);
$foo_got = undef;
eval q{$foo_ret = foo(@@b, @@c);};
is $@@, "";
is_deeply $foo_got, [ qw(a b), qw(a b c) ];
is $foo_ret, "z";

cv_set_call_checker_proto_or_list(\&foo, \&bar);
$foo_got = undef;
eval q{$foo_ret = foo(@@b, @@c);};
is $@@, "";
is_deeply $foo_got, [ \@@b, 3 ];
is $foo_ret, "z";

cv_set_call_checker_proto_or_list(\&foo, \&baz);
$foo_got = undef;
eval q{$foo_ret = foo(@@b, @@c);};
is $@@, "";
is_deeply $foo_got, [ qw(a b), qw(a b c) ];
is $foo_ret, "z";

cv_set_call_checker_multi_sum(\&foo);

$foo_got = undef;
eval q{$foo_ret = foo(@@b, @@c);};
is $@@, "";
is_deeply $foo_got, undef;
is $foo_ret, 5;

$foo_got = undef;
eval q{$foo_ret = foo(@@b);};
is $@@, "";
is_deeply $foo_got, undef;
is $foo_ret, 2;

$foo_got = undef;
eval q{$foo_ret = foo();};
is $@@, "";
is_deeply $foo_got, undef;
is $foo_ret, 0;

$foo_got = undef;
eval q{$foo_ret = foo(@@b, @@c, @@a, @@c);};
is $@@, "";
is_deeply $foo_got, undef;
is $foo_ret, 9;

sub MODIFY_CODE_ATTRIBUTES { cv_set_call_checker_lists($_[1]); () }
BEGIN {
  *foo2 = sub($$) :Attr { $foo_got = [ @@_ ]; return "z"; };
  my $foo = 3;
  *foo3 = sub() :Attr { $foo };
}

$foo_got = undef;
eval q{$foo_ret = foo2(@@b, @@c);};
is $@@, "";
is_deeply $foo_got, [ qw(a b), qw(a b c) ];
is $foo_ret, "z";

eval q{$foo_ret = foo3(@@b, @@c);};
is $@@, "";
is $foo_ret, 3;

cv_set_call_checker_lists(\&foo);
undef &foo;
$foo_got = undef;
eval 'sub foo($@@) { $foo_got = [ @@_ ]; return "z"; }
      $foo_ret = foo(@@b, @@c);';
is $@@, "";
is_deeply $foo_got, [ 2, qw(a b c) ], 'undef clears call checkers';
is $foo_ret, "z";

my %got;

sub g {
    my $name = shift;
    my $sub = sub ($\@@) {
	$got{$name} = [ @@_ ];
	return $name;
    };
    cv_set_call_checker_scalars($sub);
    return $sub;
}

BEGIN {
    *whack = g("whack");
    *glurp = g("glurp");
}

%got = ();
my $whack_ret = whack(@@b, @@c);
is $@@, "";
is_deeply $got{whack}, [ 2, 3 ];
is $whack_ret, "whack";

my $glurp_ret = glurp(@@b, @@c);
is $@@, "";
is_deeply $got{glurp}, [ 2, 3 ];
is $glurp_ret, "glurp";

1;
@


1.1
log
@Initial revision
@
text
@d3 1
a3 1
use Test::More tests => 64;
d7 5
a11 2
XS::APItest::test_cv_getset_call_checker();
ok 1;
d163 54
@


1.1.1.1
log
@import perl 5.16.3 from CPAN - worked on by Andrew Fresh and myself
@
text
@@


1.1.1.2
log
@Import perl-5.18.2

OK espie@@ sthen@@ deraadt@@
@
text
@d3 1
a3 1
use Test::More tests => 76;
a159 48

sub MODIFY_CODE_ATTRIBUTES { cv_set_call_checker_lists($_[1]); () }
BEGIN {
  *foo2 = sub($$) :Attr { $foo_got = [ @@_ ]; return "z"; };
}

$foo_got = undef;
eval q{$foo_ret = foo2(@@b, @@c);};
is $@@, "";
is_deeply $foo_got, [ qw(a b), qw(a b c) ];
is $foo_ret, "z";

cv_set_call_checker_lists(\&foo);
undef &foo;
$foo_got = undef;
eval 'sub foo($@@) { $foo_got = [ @@_ ]; return "z"; }
      $foo_ret = foo(@@b, @@c);';
is $@@, "";
is_deeply $foo_got, [ 2, qw(a b c) ], 'undef clears call checkers';
is $foo_ret, "z";

my %got;

sub g {
    my $name = shift;
    my $sub = sub ($\@@) {
	$got{$name} = [ @@_ ];
	return $name;
    };
    cv_set_call_checker_scalars($sub);
    return $sub;
}

BEGIN {
    *whack = g("whack");
    *glurp = g("glurp");
}

%got = ();
my $whack_ret = whack(@@b, @@c);
is $@@, "";
is_deeply $got{whack}, [ 2, 3 ];
is $whack_ret, "whack";

my $glurp_ret = glurp(@@b, @@c);
is $@@, "";
is_deeply $got{glurp}, [ 2, 3 ];
is $glurp_ret, "glurp";
@


1.1.1.3
log
@Import perl-5.24.2
@
text
@d3 1
a3 1
use Test::More tests => 78;
d7 2
a8 5
{
    local $TODO = $^O eq "cygwin" ? "[perl #78502] function pointers don't match on cygwin" : "";
    ok( eval { XS::APItest::test_cv_getset_call_checker(); 1 })
      or diag $@@;
}
a163 2
  my $foo = 3;
  *foo3 = sub() :Attr { $foo };
a170 4

eval q{$foo_ret = foo3(@@b, @@c);};
is $@@, "";
is $foo_ret, 3;
@


