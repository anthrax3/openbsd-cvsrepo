head	1.1;
branch	1.1.1;
access;
symbols
	OPENBSD_6_0:1.1.1.1.0.16
	OPENBSD_6_0_BASE:1.1.1.1
	OPENBSD_5_9:1.1.1.1.0.10
	OPENBSD_5_9_BASE:1.1.1.1
	OPENBSD_5_8:1.1.1.1.0.12
	OPENBSD_5_8_BASE:1.1.1.1
	PERL_5_20_2:1.1.1.1
	OPENBSD_5_7:1.1.1.1.0.4
	OPENBSD_5_7_BASE:1.1.1.1
	PERL_5_20_1:1.1.1.1
	OPENBSD_5_6:1.1.1.1.0.8
	OPENBSD_5_6_BASE:1.1.1.1
	PERL_5_18_2:1.1.1.1
	PERL:1.1.1
	OPENBSD_5_5:1.1.1.1.0.6
	OPENBSD_5_5_BASE:1.1.1.1
	OPENBSD_5_4:1.1.1.1.0.2
	OPENBSD_5_4_BASE:1.1.1.1
	PERL_5_16_3:1.1.1.1
	CPAN:1.1.1;
locks; strict;
comment	@# @;
expand	@o@;


1.1
date	2013.03.25.20.08.47;	author sthen;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	2013.03.25.20.08.47;	author sthen;	state Exp;
branches;
next	;


desc
@@


1.1
log
@Initial revision
@
text
@use warnings;
use strict;

use Test::More tests => 13;

BEGIN { $^H |= 0x20000; }
no warnings;

my($triangle, $num);
$num = 5;

$triangle = undef;
eval q{
	use XS::APItest ();
	$triangle = rpn($num $num 1 + * 2 /);
};
isnt $@@, "";

$triangle = undef;
eval q{
	use XS::APItest qw(rpn);
	$triangle = rpn($num $num 1 + * 2 /);
};
is $@@, "";
is $triangle, 15;

$triangle = undef;
eval q{
	use XS::APItest qw(rpn);
	$triangle = join(":", "x", rpn($num $num 1 + * 2 /), "y");
};
is $@@, "";
is $triangle, "x:15:y";

$triangle = undef;
eval q{
	use XS::APItest qw(rpn);
	$triangle = 1 + rpn($num $num 1 + * 2 /) * 10;
};
is $@@, "";
is $triangle, 151;

$triangle = undef;
eval q{
	use XS::APItest qw(rpn);
	$triangle = rpn($num $num 1 + * 2 /);
	$triangle++;
};
is $@@, "";
is $triangle, 16;

$triangle = undef;
eval q{
	use XS::APItest qw(rpn);
	$triangle = rpn($num $num 1 + * 2 /)
	$triangle++;
};
isnt $@@, "";

$triangle = undef;
eval q{
	use XS::APItest qw(calcrpn);
	calcrpn $triangle { $num $num 1 + * 2 / }
	$triangle++;
};
is $@@, "";
is $triangle, 16;

$triangle = undef;
eval q{
	use XS::APItest qw(calcrpn);
	123 + calcrpn $triangle { $num $num 1 + * 2 / } ;
};
isnt $@@, "";

1;
@


1.1.1.1
log
@import perl 5.16.3 from CPAN - worked on by Andrew Fresh and myself
@
text
@@
