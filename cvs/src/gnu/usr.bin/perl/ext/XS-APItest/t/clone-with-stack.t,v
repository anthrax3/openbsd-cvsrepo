head	1.2;
access;
symbols
	PERL_5_24_2:1.1.1.4
	OPENBSD_6_1:1.2.0.4
	OPENBSD_6_1_BASE:1.2
	OPENBSD_6_0:1.1.1.3.0.8
	OPENBSD_6_0_BASE:1.1.1.3
	OPENBSD_5_9:1.1.1.3.0.2
	OPENBSD_5_9_BASE:1.1.1.3
	OPENBSD_5_8:1.1.1.3.0.4
	OPENBSD_5_8_BASE:1.1.1.3
	PERL_5_20_2:1.1.1.3
	OPENBSD_5_7:1.1.1.2.0.2
	OPENBSD_5_7_BASE:1.1.1.2
	PERL_5_20_1:1.1.1.2
	OPENBSD_5_6:1.1.1.2.0.4
	OPENBSD_5_6_BASE:1.1.1.2
	PERL_5_18_2:1.1.1.2
	PERL:1.1.1
	OPENBSD_5_5:1.1.1.1.0.6
	OPENBSD_5_5_BASE:1.1.1.1
	OPENBSD_5_4:1.1.1.1.0.2
	OPENBSD_5_4_BASE:1.1.1.1
	PERL_5_16_3:1.1.1.1
	CPAN:1.1.1;
locks; strict;
comment	@# @;
expand	@o@;


1.2
date	2017.02.05.00.32.14;	author afresh1;	state Exp;
branches;
next	1.1;
commitid	cxJ08BvJA9Pt2PTM;

1.1
date	2013.03.25.20.08.47;	author sthen;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	2013.03.25.20.08.47;	author sthen;	state Exp;
branches;
next	1.1.1.2;

1.1.1.2
date	2014.03.24.14.59.02;	author afresh1;	state Exp;
branches;
next	1.1.1.3;

1.1.1.3
date	2015.04.25.19.10.37;	author afresh1;	state Exp;
branches;
next	1.1.1.4;
commitid	Wpcs5S8qILgEZC7F;

1.1.1.4
date	2017.08.14.13.46.12;	author afresh1;	state Exp;
branches;
next	;
commitid	fAzrs78vdW2Yfc6A;


desc
@@


1.2
log
@Fix merge issues, remove excess files - match perl-5.24.1 dist
@
text
@#!perl

use strict;
use warnings;

require "../../t/test.pl";

use XS::APItest;

# clone_with_stack creates a clone of the perl interpreter including
# the stack, then destroys the original interpreter and runs the
# remaining code using the new one.
# This is like doing a psuedo-fork and exiting the parent.

use Config;
if (not $Config{'useithreads'}) {
    skip_all("clone_with_stack requires threads");
}

plan(8);

fresh_perl_is( <<'----', <<'====', undef, "minimal clone_with_stack" );
use XS::APItest;
clone_with_stack();
print "ok\n";
----
ok
====

fresh_perl_is( <<'----', <<'====', undef, "inside a subroutine" );
use XS::APItest;
sub f {
    clone_with_stack();
}
f();
print "ok\n";
----
ok
====

{
    local our $TODO = "clone_with_stack inside a begin block";
    fresh_perl_is( <<'----', <<'====', undef, "inside a BEGIN block" );
use XS::APItest;
BEGIN {
    clone_with_stack();
}
print "ok\n";
----
ok
====

}

{
    fresh_perl_is( <<'----', <<'====', undef, "clone stack" );
use XS::APItest;
sub f {
    clone_with_stack();
    0..4;
}
print 'X-', 'Y-', join(':', f()), "-Z\n";
----
X-Y-0:1:2:3:4-Z
====

}

{
    fresh_perl_is( <<'----', <<'====', undef, "with a lexical sub" );
use XS::APItest;
use experimental lexical_subs=>;
my sub f { print "42\n" }
clone_with_stack();
f();
----
42
====

}

{
    fresh_perl_is( <<'----', <<'====', undef, "with localised stuff" );
use XS::APItest;
$s = "outer";
$a[0] = "anterior";
$h{k} = "hale";
{
    local $s = "inner";
    local $a[0] = 'posterior';
    local $h{k} = "halt";
    clone_with_stack();
}
print "scl: $s\n";
print "ary: $a[0]\n";
print "hsh: $h{k}\n";
----
scl: outer
ary: anterior
hsh: hale
====

}

{
    fresh_perl_is( <<'----', <<'====', undef, "inside a loop inside a fn" );
use XS::APItest;
my $a = 'aa';
sub f {
    my $b = 'bb';
    my @@c;
    my $d = 'dd';
    for my $d (0..4) {
	clone_with_stack() if $d == 2;
	push @@c, $d;
    }
    return @@c, $d;
}
print "X-$a-", join(':', f()), "-Z\n";
----
X-aa-0:1:2:3:4:dd-Z
====

}

{
    fresh_perl_is( <<'----', <<'====', undef, "inside fn inside a loop inside a fn" );
use XS::APItest;
my $a = 'aa';

sub g {
    my $e = 'ee';
    my $f = 'ff';
    clone_with_stack();
}

sub f {
    my $b = 'bb';
    my @@c;
    my $d = 'dd';
    for my $d (0..4) {
	g() if $d == 2;
	push @@c, $d;
    }
    return @@c, $d;
}
print "X-$a-", join(':', f()), "-Z\n";
----
X-aa-0:1:2:3:4:dd-Z
====

}
@


1.1
log
@Initial revision
@
text
@d20 1
a20 1
plan(3);
d51 99
@


1.1.1.1
log
@import perl 5.16.3 from CPAN - worked on by Andrew Fresh and myself
@
text
@@


1.1.1.2
log
@Import perl-5.18.2

OK espie@@ sthen@@ deraadt@@
@
text
@d20 1
a20 1
plan(4);
a50 14
====

}

{
    fresh_perl_is( <<'----', <<'====', undef, "clone stack" );
use XS::APItest;
sub f {
    clone_with_stack();
    0..4;
}
print 'X-', 'Y-', join(':', f()), "-Z\n";
----
X-Y-0:1:2:3:4-Z
@


1.1.1.3
log
@Import perl-5.20.2
@
text
@d20 1
a20 1
plan(5);
a64 23
====

}

{
    fresh_perl_is( <<'----', <<'====', undef, "with localised stuff" );
use XS::APItest;
$s = "outer";
$a[0] = "anterior";
$h{k} = "hale";
{
    local $s = "inner";
    local $a[0] = 'posterior';
    local $h{k} = "halt";
    clone_with_stack();
}
print "scl: $s\n";
print "ary: $a[0]\n";
print "hsh: $h{k}\n";
----
scl: outer
ary: anterior
hsh: hale
@


1.1.1.4
log
@Import perl-5.24.2
@
text
@d20 1
a20 1
plan(8);
a69 13
    fresh_perl_is( <<'----', <<'====', undef, "with a lexical sub" );
use XS::APItest;
use experimental lexical_subs=>;
my sub f { print "42\n" }
clone_with_stack();
f();
----
42
====

}

{
a87 49
====

}

{
    fresh_perl_is( <<'----', <<'====', undef, "inside a loop inside a fn" );
use XS::APItest;
my $a = 'aa';
sub f {
    my $b = 'bb';
    my @@c;
    my $d = 'dd';
    for my $d (0..4) {
	clone_with_stack() if $d == 2;
	push @@c, $d;
    }
    return @@c, $d;
}
print "X-$a-", join(':', f()), "-Z\n";
----
X-aa-0:1:2:3:4:dd-Z
====

}

{
    fresh_perl_is( <<'----', <<'====', undef, "inside fn inside a loop inside a fn" );
use XS::APItest;
my $a = 'aa';

sub g {
    my $e = 'ee';
    my $f = 'ff';
    clone_with_stack();
}

sub f {
    my $b = 'bb';
    my @@c;
    my $d = 'dd';
    for my $d (0..4) {
	g() if $d == 2;
	push @@c, $d;
    }
    return @@c, $d;
}
print "X-$a-", join(':', f()), "-Z\n";
----
X-aa-0:1:2:3:4:dd-Z
@


