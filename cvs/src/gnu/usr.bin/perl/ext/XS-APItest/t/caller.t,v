head	1.1;
branch	1.1.1;
access;
symbols
	OPENBSD_6_2_BASE:1.1.1.1
	PERL_5_24_2:1.1.1.1
	OPENBSD_6_1:1.1.1.1.0.18
	OPENBSD_6_1_BASE:1.1.1.1
	OPENBSD_6_0:1.1.1.1.0.16
	OPENBSD_6_0_BASE:1.1.1.1
	OPENBSD_5_9:1.1.1.1.0.10
	OPENBSD_5_9_BASE:1.1.1.1
	OPENBSD_5_8:1.1.1.1.0.12
	OPENBSD_5_8_BASE:1.1.1.1
	PERL_5_20_2:1.1.1.1
	OPENBSD_5_7:1.1.1.1.0.4
	OPENBSD_5_7_BASE:1.1.1.1
	PERL_5_20_1:1.1.1.1
	OPENBSD_5_6:1.1.1.1.0.8
	OPENBSD_5_6_BASE:1.1.1.1
	PERL_5_18_2:1.1.1.1
	PERL:1.1.1
	OPENBSD_5_5:1.1.1.1.0.6
	OPENBSD_5_5_BASE:1.1.1.1
	OPENBSD_5_4:1.1.1.1.0.2
	OPENBSD_5_4_BASE:1.1.1.1
	PERL_5_16_3:1.1.1.1
	CPAN:1.1.1;
locks; strict;
comment	@# @;
expand	@o@;


1.1
date	2013.03.25.20.08.47;	author sthen;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	2013.03.25.20.08.47;	author sthen;	state Exp;
branches;
next	;


desc
@@


1.1
log
@Initial revision
@
text
@#!/usr/bin/perl

use warnings;
use strict;

use Test::More;
use XS::APItest;
use Scalar::Util qw/reftype/;

BEGIN { *my_caller = \&XS::APItest::my_caller }

{
    package DB;
    no strict "refs";
    sub sub { &$DB::sub }
}

sub try_caller {
    my @@args = @@_;
    my $l   = shift @@args;
    my $n   = pop @@args;
    my $hhv = pop @@args;

    my @@c  = my_caller $l;
    my $hh = pop @@c;

    is_deeply \@@c, [ @@args, ($hhv) x 3 ], 
                                "caller_cx for $n";
    if (defined $hhv) {
	local $TODO; # these two work ok under the bebugger
        ok defined $hh,         "...with defined hinthash";
        is reftype $hh, "HASH", "...which is a HASH";
    }
    is $hh->{foo},  $hhv,       "...with correct hinthash value";
}

try_caller 0, qw/main try_caller/ x 2, undef, "current sub";
{
    BEGIN { $^H{foo} = "bar" }
    try_caller 0, qw/main try_caller/ x 2, "bar", "current sub w/hinthash";
}

sub one {
    my ($hh, $n) = @@_;
    try_caller 1, qw/main one/ x 2, $hh, $n;
}

one undef, "upper sub";
{
    BEGIN { $^H{foo} = "baz" }
    one "baz", "upper sub w/hinthash";
}

BEGIN { $^P = 1 }
# This is really bizarre. One stack frame has the correct CV but the
# wrong stash, the other the other way round. At least pp_caller knows
# what to do with them...
try_caller 0, qw/main sub DB try_caller/, undef, "current sub w/DB::sub";
{
    BEGIN { $^H{foo} = "DB" }
    try_caller 0, qw/main sub DB try_caller/, "DB",
                                    "current sub w/hinthash, DB::sub";
}

sub dbone {
    my ($hh, $n) = @@_;
    try_caller 1, qw/main sub DB dbone/, $hh, $n;
}

dbone undef, "upper sub w/DB::sub";
TODO: {
    local $TODO = "hinthash incorrect under debugger";
    BEGIN { $^{foo} = "DBu" }
    dbone "DBu", "upper sub w/hinthash, DB::sub";
}
BEGIN { $^P = 0 }

done_testing;
@


1.1.1.1
log
@import perl 5.16.3 from CPAN - worked on by Andrew Fresh and myself
@
text
@@
