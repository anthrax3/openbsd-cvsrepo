head	1.4;
access;
symbols
	OPENBSD_4_6:1.3.0.6
	OPENBSD_4_6_BASE:1.3
	OPENBSD_4_5:1.3.0.2
	OPENBSD_4_5_BASE:1.3
	PERL_5_10_0:1.1.1.3
	OPENBSD_4_4:1.2.0.10
	OPENBSD_4_4_BASE:1.2
	OPENBSD_4_3:1.2.0.8
	OPENBSD_4_3_BASE:1.2
	OPENBSD_4_2:1.2.0.6
	OPENBSD_4_2_BASE:1.2
	OPENBSD_4_1:1.2.0.4
	OPENBSD_4_1_BASE:1.2
	OPENBSD_4_0:1.2.0.2
	OPENBSD_4_0_BASE:1.2
	PERL_5_8_8:1.1.1.2
	OPENBSD_3_9:1.1.1.1.0.6
	OPENBSD_3_9_BASE:1.1.1.1
	OPENBSD_3_8:1.1.1.1.0.4
	OPENBSD_3_8_BASE:1.1.1.1
	OPENBSD_3_7:1.1.1.1.0.2
	OPENBSD_3_7_BASE:1.1.1.1
	PERL_5_8_6:1.1.1.1
	CPAN:1.1.1;
locks; strict;
comment	@# @;


1.4
date	2009.10.12.18.24.25;	author millert;	state dead;
branches;
next	1.3;

1.3
date	2008.09.29.17.36.03;	author millert;	state Exp;
branches;
next	1.2;

1.2
date	2006.03.28.19.23.01;	author millert;	state Exp;
branches;
next	1.1;

1.1
date	2005.01.15.21.16.45;	author millert;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	2005.01.15.21.16.45;	author millert;	state Exp;
branches;
next	1.1.1.2;

1.1.1.2
date	2006.03.28.18.47.57;	author millert;	state Exp;
branches;
next	1.1.1.3;

1.1.1.3
date	2008.09.29.17.18.15;	author millert;	state Exp;
branches;
next	;


desc
@@


1.4
log
@Merge in perl 5.10.1
@
text
@################################################################################
#
#  mktests.PL -- generate test files for Devel::PPPort
#
################################################################################
#
#  $Revision: 1.3 $
#  $Author: millert $
#  $Date: 2008/09/29 17:36:03 $
#
################################################################################
#
#  Version 3.x, Copyright (C) 2004-2007, Marcus Holland-Moritz.
#  Version 2.x, Copyright (C) 2001, Paul Marquess.
#  Version 1.x, Copyright (C) 1999, Kenneth Albanowski.
#
#  This program is free software; you can redistribute it and/or
#  modify it under the same terms as Perl itself.
#
################################################################################

use strict;
$^W = 1;
require "parts/ppptools.pl";

my $template = do { local $/; <DATA> };

generate_tests();

sub generate_tests
{
  my @@tests;
  my $file;

  for $file (all_files_in_dir('parts/inc')) {
    my($testfile) = $file =~ /(\w+)\.?$/;  # VMS has a trailing dot
    $testfile = "t/$testfile.t";
  
    my $spec = parse_partspec($file);
    my $plan = 0;
  
    if (exists $spec->{tests}) {
      exists $spec->{OPTIONS}{tests} &&
      exists $spec->{OPTIONS}{tests}{plan}
          or die "No plan for tests in $file\n";
  
      print "generating $testfile\n";
  
      my $tmpl = $template;
      $tmpl =~ s/__SOURCE__/$file/mg;
      $tmpl =~ s/__PLAN__/$spec->{OPTIONS}{tests}{plan}/mg;
      $tmpl =~ s/^__TESTS__$/$spec->{tests}/mg;
  
      open FH, ">$testfile" or die "$testfile: $!\n";
      print FH $tmpl;
      close FH;
  
      push @@tests, $testfile;
    }
  }
  
  return @@tests;
}

__DATA__
################################################################################
#
#            !!!!!   Do NOT edit this file directly!   !!!!!
#
#            Edit mktests.PL and/or __SOURCE__ instead.
#
#  This file was automatically generated from the definition files in the
#  parts/inc/ subdirectory by mktests.PL. To learn more about how all this
#  works, please read the F<HACKERS> file that came with this distribution.
#
################################################################################

BEGIN {
  if ($ENV{'PERL_CORE'}) {
    chdir 't' if -d 't';
    @@INC = ('../lib', '../ext/Devel/PPPort/t') if -d '../lib' && -d '../ext';
    require Config; import Config;
    use vars '%Config';
    if (" $Config{'extensions'} " !~ m[ Devel/PPPort ]) {
      print "1..0 # Skip -- Perl configured without Devel::PPPort module\n";
      exit 0;
    }
  }
  else {
    unshift @@INC, 't';
  }

  sub load {
    eval "use Test";
    require 'testutil.pl' if $@@;
  }

  if (__PLAN__) {
    load();
    plan(tests => __PLAN__);
  }
}

use Devel::PPPort;
use strict;
$^W = 1;

package Devel::PPPort;
use vars '@@ISA';
require DynaLoader;
@@ISA = qw(DynaLoader);
bootstrap Devel::PPPort;

package main;

__TESTS__
@


1.3
log
@fix conflicts and merge in local changes to perl 5.10.0
@
text
@d7 3
a9 3
#  $Revision: 28 $
#  $Author: mhx $
#  $Date: 2007/01/02 12:32:26 +0100 $
@


1.2
log
@merge in perl 5.8.8
@
text
@d7 3
a9 3
#  $Revision: 1.1.1.1 $
#  $Author: millert $
#  $Date: 2005/01/15 21:16:45 $
d13 1
a13 1
#  Version 3.x, Copyright (C) 2004-2005, Marcus Holland-Moritz.
d28 32
a59 23
my $file;
for $file (glob 'parts/inc/*') {
  my($testfile) = $file =~ /(\w+)$/;
  $testfile = "t/$testfile.t";

  my $spec = parse_partspec($file);
  my $plan = 0;

  if (exists $spec->{tests}) {
    exists $spec->{OPTIONS}{tests} &&
    exists $spec->{OPTIONS}{tests}{plan}
        or die "No plan for tests in $file\n";

    print "generating $testfile\n";

    my $tmpl = $template;
    $tmpl =~ s/__SOURCE__/$file/mg;
    $tmpl =~ s/__PLAN__/$spec->{OPTIONS}{tests}{plan}/mg;
    $tmpl =~ s/^__TESTS__$/$spec->{tests}/mg;

    open FH, ">$testfile" or die "$testfile: $!\n";
    print FH $tmpl;
    close FH;
d61 2
a64 2
exit 0;

d72 4
d93 3
a95 4
  eval "use Test";
  if ($@@) {
    require 'testutil.pl';
    print "1..__PLAN__\n";
d97 3
a99 1
  else {
d107 8
@


1.1
log
@Initial revision
@
text
@d7 3
a9 3
#  $Revision: 18 $
#  $Author: mhx $
#  $Date: 2004/08/30 20:49:12 +0200 $
d13 1
a13 1
#  Version 3.x, Copyright (C) 2004, Marcus Holland-Moritz.
d47 1
a47 1
    
@


1.1.1.1
log
@perl 5.8.6 from CPAN
@
text
@@


1.1.1.2
log
@perl 5.8.8 import
@
text
@d7 1
a7 1
#  $Revision: 20 $
d9 1
a9 1
#  $Date: 2005/03/10 18:45:54 +0100 $
d13 1
a13 1
#  Version 3.x, Copyright (C) 2004-2005, Marcus Holland-Moritz.
d47 1
a47 1

@


1.1.1.3
log
@import perl 5.10.0 from CPAN
@
text
@d7 1
a7 1
#  $Revision: 28 $
d9 1
a9 1
#  $Date: 2007/01/02 12:32:26 +0100 $
d13 1
a13 1
#  Version 3.x, Copyright (C) 2004-2007, Marcus Holland-Moritz.
d28 23
a50 32
generate_tests();

sub generate_tests
{
  my @@tests;
  my $file;

  for $file (all_files_in_dir('parts/inc')) {
    my($testfile) = $file =~ /(\w+)\.?$/;  # VMS has a trailing dot
    $testfile = "t/$testfile.t";
  
    my $spec = parse_partspec($file);
    my $plan = 0;
  
    if (exists $spec->{tests}) {
      exists $spec->{OPTIONS}{tests} &&
      exists $spec->{OPTIONS}{tests}{plan}
          or die "No plan for tests in $file\n";
  
      print "generating $testfile\n";
  
      my $tmpl = $template;
      $tmpl =~ s/__SOURCE__/$file/mg;
      $tmpl =~ s/__PLAN__/$spec->{OPTIONS}{tests}{plan}/mg;
      $tmpl =~ s/^__TESTS__$/$spec->{tests}/mg;
  
      open FH, ">$testfile" or die "$testfile: $!\n";
      print FH $tmpl;
      close FH;
  
      push @@tests, $testfile;
    }
a51 2
  
  return @@tests;
d54 2
a62 4
#  This file was automatically generated from the definition files in the
#  parts/inc/ subdirectory by mktests.PL. To learn more about how all this
#  works, please read the F<HACKERS> file that came with this distribution.
#
d80 4
a83 3
  sub load {
    eval "use Test";
    require 'testutil.pl' if $@@;
d85 1
a85 3

  if (__PLAN__) {
    load();
a92 8

package Devel::PPPort;
use vars '@@ISA';
require DynaLoader;
@@ISA = qw(DynaLoader);
bootstrap Devel::PPPort;

package main;
@


