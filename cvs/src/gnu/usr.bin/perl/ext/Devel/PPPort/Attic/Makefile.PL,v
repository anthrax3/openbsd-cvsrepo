head	1.2;
access;
symbols
	OPENBSD_4_6:1.1.1.5.0.6
	OPENBSD_4_6_BASE:1.1.1.5
	OPENBSD_4_5:1.1.1.5.0.2
	OPENBSD_4_5_BASE:1.1.1.5
	PERL_5_10_0:1.1.1.5
	OPENBSD_4_4:1.1.1.4.0.10
	OPENBSD_4_4_BASE:1.1.1.4
	OPENBSD_4_3:1.1.1.4.0.8
	OPENBSD_4_3_BASE:1.1.1.4
	OPENBSD_4_2:1.1.1.4.0.6
	OPENBSD_4_2_BASE:1.1.1.4
	OPENBSD_4_1:1.1.1.4.0.4
	OPENBSD_4_1_BASE:1.1.1.4
	OPENBSD_4_0:1.1.1.4.0.2
	OPENBSD_4_0_BASE:1.1.1.4
	PERL_5_8_8:1.1.1.4
	OPENBSD_3_9:1.1.1.3.0.6
	OPENBSD_3_9_BASE:1.1.1.3
	OPENBSD_3_8:1.1.1.3.0.4
	OPENBSD_3_8_BASE:1.1.1.3
	OPENBSD_3_7:1.1.1.3.0.2
	OPENBSD_3_7_BASE:1.1.1.3
	PERL_5_8_6:1.1.1.3
	OPENBSD_3_6:1.1.1.2.0.4
	OPENBSD_3_6_BASE:1.1.1.2
	PERL_5_8_5:1.1.1.2
	PERL_5_8_3:1.1.1.2
	OPENBSD_3_5:1.1.1.2.0.2
	OPENBSD_3_5_BASE:1.1.1.2
	PERL_5_8_2:1.1.1.2
	OPENBSD_3_4:1.1.1.1.0.4
	OPENBSD_3_4_BASE:1.1.1.1
	OPENBSD_3_3:1.1.1.1.0.2
	OPENBSD_3_3_BASE:1.1.1.1
	PERL_5_8_0:1.1.1.1
	CPAN:1.1.1;
locks; strict;
comment	@# @;
expand	@o@;


1.2
date	2009.10.12.18.24.25;	author millert;	state dead;
branches;
next	1.1;

1.1
date	2002.10.27.22.14.54;	author millert;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	2002.10.27.22.14.54;	author millert;	state Exp;
branches;
next	1.1.1.2;

1.1.1.2
date	2003.12.03.02.43.42;	author millert;	state Exp;
branches;
next	1.1.1.3;

1.1.1.3
date	2005.01.15.21.16.45;	author millert;	state Exp;
branches;
next	1.1.1.4;

1.1.1.4
date	2006.03.28.18.47.56;	author millert;	state Exp;
branches;
next	1.1.1.5;

1.1.1.5
date	2008.09.29.17.18.14;	author millert;	state Exp;
branches;
next	;


desc
@@


1.2
log
@Merge in perl 5.10.1
@
text
@use ExtUtils::MakeMaker;

WriteMakefile(
    NAME	=> "Devel::PPPort",
    DISTNAME	=> "Devel-PPPort",
    VERSION_FROM=> 'PPPort.pm',

    PL_FILES	=> { 'ppport_h.PL' => 'ppport.h' },
    'depend'	=> { '$(OBJECT)' => '$(H_FILES)' },
    C		=> [qw(module2.c module3.c)],
    H		=> [qw(ppport.h)],
    OBJECT	=> '$(BASEEXT)$(OBJ_EXT) $(O_FILES)',
    XSPROTOARG	=> '-noprototypes',
    'dist'	=> { COMPRESS=>"gzip", SUFFIX=>"gz" },
    'clean'	=> { FILES => qw($(H_FILES))}
);
@


1.1
log
@Initial revision
@
text
@@


1.1.1.1
log
@stock perl 5.8.0 from CPAN
@
text
@@


1.1.1.2
log
@perl 5.8.2 from CPAN
@
text
@a2 11
unless($ENV{PERL_CORE}) {
    $ENV{PERL_CORE} = 1 if grep { $_ eq 'PERL_CORE=1' } @@ARGV;
}
if ($ENV{PERL_CORE}) {
    # Pods will be built by installman.
    @@coreopts = ( MAN3PODS => {} );
}
else {
    @@coreopts = ();
}

d15 1
a15 2
    'clean'	=> { FILES => qw($(H_FILES))},
    @@coreopts,
@


1.1.1.3
log
@perl 5.8.6 from CPAN
@
text
@a0 21
################################################################################
#
#  Makefile.PL -- generate Makefile
#
################################################################################
#
#  $Revision: 14 $
#  $Author: mhx $
#  $Date: 2004/08/19 13:16:37 +0200 $
#
################################################################################
#
#  Version 3.x, Copyright (C) 2004, Marcus Holland-Moritz.
#  Version 2.x, Copyright (C) 2001, Paul Marquess.
#  Version 1.x, Copyright (C) 1999, Kenneth Albanowski.
#
#  This program is free software; you can redistribute it and/or
#  modify it under the same terms as Perl itself.
#
################################################################################

a1 1
require 5.003;
d3 2
a4 2
unless ($ENV{'PERL_CORE'}) {
  $ENV{'PERL_CORE'} = 1 if grep { $_ eq 'PERL_CORE=1' } @@ARGV;
d6 3
a8 4

if ($ENV{'PERL_CORE'}) {
  # Pods will be built by installman.
  @@coreopts = ( MAN3PODS => {} );
d11 1
a11 16
  # Devel::PPPort is in the core since 5.7.3
  @@coreopts = ( INSTALLDIRS => ($] >= 5.007003 ? 'perl' : 'site') );
}

@@ARGV = map { /^--with-(.*)/ && ++$opt{$1} ? () : $_ } @@ARGV;

%PL_FILES = ( 'ppport_h.PL'  => 'ppport.h' ),

@@C_FILES  = qw{ module2.c module3.c };

@@clean    = qw{ $(H_FILES) PPPort.c };

if ($opt{'apicheck'}) {
  $PL_FILES{'apicheck_c.PL'} = 'apicheck.c';
  push @@C_FILES, qw{ apicheck.c };
  push @@clean,   qw{ apicheck.c };
d15 13
a27 11
  NAME          => 'Devel::PPPort',
  VERSION_FROM  => 'PPPort_pm.PL',
  PL_FILES      => \%PL_FILES,
  PM            => { 'PPPort.pm' => '$(INST_LIBDIR)/PPPort.pm' },
  C             => \@@C_FILES,
  H             => [ qw(ppport.h) ],
  OBJECT        => '$(BASEEXT)$(OBJ_EXT) $(O_FILES)',
  XSPROTOARG    => '-noprototypes',
  clean         => { FILES => "@@clean" },
  depend        => { '$(OBJECT)' => '$(H_FILES)' },
  @@coreopts,
a28 19

sub MY::postamble {
  package MY;
  my $post = shift->SUPER::postamble(@@_);
  $post .= <<'POSTAMBLE';

purge_all: realclean
	@@$(RM_F) PPPort.pm PPPort.xs t/*.t

regen:
	$(PERL) -I$(INST_ARCHLIB) -I$(INST_LIB) -I$(PERL_ARCHLIB) -I$(PERL_LIB) PPPort_pm.PL
	$(PERL) -I$(INST_ARCHLIB) -I$(INST_LIB) -I$(PERL_ARCHLIB) -I$(PERL_LIB) PPPort_xs.PL
	$(PERL) -I$(INST_ARCHLIB) -I$(INST_LIB) -I$(PERL_ARCHLIB) -I$(PERL_LIB) mktests.PL
	$(PERL) -I$(INST_ARCHLIB) -I$(INST_LIB) -I$(PERL_ARCHLIB) -I$(PERL_LIB) ppport_h.PL

POSTAMBLE
  return $post;
}

@


1.1.1.4
log
@perl 5.8.8 import
@
text
@d7 1
a7 1
#  $Revision: 15 $
d9 1
a9 1
#  $Date: 2005/01/31 08:10:50 +0100 $
d13 1
a13 1
#  Version 3.x, Copyright (C) 2004-2005, Marcus Holland-Moritz.
@


1.1.1.5
log
@import perl 5.10.0 from CPAN
@
text
@d7 1
a7 1
#  $Revision: 27 $
d9 1
a9 1
#  $Date: 2007/01/02 12:32:27 +0100 $
d13 1
a13 1
#  Version 3.x, Copyright (C) 2004-2007, Marcus Holland-Moritz.
d22 1
a24 5
use strict;
use ExtUtils::MakeMaker;

use vars '%opt';  # needs to be global, and we can't use 'our'

d29 22
a50 1
@@ARGV = map { /^--with-(apicheck)$/ && ++$opt{$1} ? () : $_ } @@ARGV;
d55 1
d57 1
d59 1
a59 1
  OBJECT        => 'RealPPPort$(OBJ_EXT) $(O_FILES)',
d61 3
a63 1
  CONFIGURE     => \&configure,
d66 1
a66 53
sub configure
{
  my @@clean    = qw{ $(H_FILES) RealPPPort.xs RealPPPort.c };
  my %depend   = ('$(OBJECT)' => '$(H_FILES)');
  my @@C_FILES  = qw{ module2.c module3.c },
  my %PL_FILES = (
    'ppport_h.PL'  => 'ppport.h',
    'PPPort_pm.PL' => 'PPPort.pm',
    'PPPort_xs.PL' => 'RealPPPort.xs',
  );
  my @@moreopts;

  if (eval $ExtUtils::MakeMaker::VERSION >= 6) {
    push @@moreopts, AUTHOR => 'Marcus Holland-Moritz <mhx@@cpan.org>';
    if (-f 'PPPort.pm') {
      push @@moreopts, ABSTRACT_FROM => 'PPPort.pm';
    }
  }

  if (eval $ExtUtils::MakeMaker::VERSION >= 6.30_01) {
    print "Setting license tag...\n";
    push @@moreopts, LICENSE => 'perl';
  }

  if ($ENV{'PERL_CORE'}) {
    # Pods will be built by installman.
    push @@moreopts, MAN3PODS => {};
    push @@clean, 'PPPort.pm';
  }
  else {
    # Devel::PPPort is in the core since 5.7.3
    push @@moreopts, INSTALLDIRS => ($] >= 5.007003 ? 'perl' : 'site');
  }

  if ($opt{'apicheck'}) {
    $PL_FILES{'apicheck_c.PL'} = 'apicheck.c';
    push @@C_FILES, qw{ apicheck.c };
    push @@clean,   qw{ apicheck.c apicheck.i };
    $depend{'apicheck.i'} = 'ppport.h';
  }

  return {
    C        => \@@C_FILES,
    XS       => { 'RealPPPort.xs' => 'RealPPPort.c' },
    PL_FILES => \%PL_FILES,
    depend   => \%depend,
    clean    => { FILES => "@@clean" },
    @@moreopts,
  };
}

sub MY::postamble
{
d72 1
a72 1
	@@$(RM_F) PPPort.pm t/*.t
d74 1
a74 1
regen_pm:
a75 2

regen_xs:
a76 2

regen_tests:
a77 2

regen_h:
a79 2
regen: regen_pm regen_xs regen_tests regen_h

a81 20
}

sub MY::c_o
{
  package MY;
  my $co = shift->SUPER::c_o(@@_);

  if ($::opt{'apicheck'} && $co !~ /^\.c\.i:/m) {
    print "Adding custom rule for preprocessed apicheck file...\n";

    $co .= <<'CO'

.SUFFIXES: .i

.c.i:
	$(CCCMD) -E -I$(PERL_INC) $(DEFINE) $*.c > $*.i
CO
  }

  return $co;
@


