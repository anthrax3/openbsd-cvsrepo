head	1.2;
access;
symbols
	OPENBSD_3_6:1.1.1.3.0.2
	OPENBSD_3_6_BASE:1.1.1.3
	PERL_5_8_5:1.1.1.3
	PERL_5_8_3:1.1.1.2
	OPENBSD_3_5:1.1.1.2.0.2
	OPENBSD_3_5_BASE:1.1.1.2
	PERL_5_8_2:1.1.1.2
	OPENBSD_3_4:1.1.1.1.0.4
	OPENBSD_3_4_BASE:1.1.1.1
	OPENBSD_3_3:1.1.1.1.0.2
	OPENBSD_3_3_BASE:1.1.1.1
	PERL_5_8_0:1.1.1.1
	CPAN:1.1.1;
locks; strict;
comment	@# @;
expand	@o@;


1.2
date	2005.01.15.21.30.26;	author millert;	state dead;
branches;
next	1.1;

1.1
date	2002.10.27.22.14.54;	author millert;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	2002.10.27.22.14.54;	author millert;	state Exp;
branches;
next	1.1.1.2;

1.1.1.2
date	2003.12.03.02.43.42;	author millert;	state Exp;
branches;
next	1.1.1.3;

1.1.1.3
date	2004.08.09.17.45.56;	author millert;	state Exp;
branches;
next	;


desc
@@


1.2
log
@sync in-tree perl with 5.8.6
@
text
@BEGIN {
    chdir 't' if -d 't';
    @@INC = '../lib' if -d '../lib';
}

use Devel::PPPort;
use strict;

print "1..17\n";

my $total = 0;
my $good = 0;

my $test = 0;   
sub ok {
    my ($name, $test_sub) = @@_;
    my $line = (caller)[2];
    my $value;

    eval { $value = &{ $test_sub }() } ;

    ++ $test ;

    if ($@@) {
        printf "not ok $test # Testing '$name', line $line $@@\n";
    }
    elsif ($value != 1){
        printf "not ok $test # Testing '$name', line $line, value != 1 ($value)\n";
    }
    else {
        print "ok $test\n";
    }

} 

ok "Static newCONSTSUB()", 
   sub { Devel::PPPort::test1(); Devel::PPPort::test_value_1() == 1} ;

ok "Global newCONSTSUB()", 
   sub { Devel::PPPort::test2(); Devel::PPPort::test_value_2() == 2} ;

ok "Extern newCONSTSUB()", 
   sub { Devel::PPPort::test3(); Devel::PPPort::test_value_3() == 3} ;

ok "newRV_inc()", sub { Devel::PPPort::test4()} ;

ok "newRV_noinc()", sub { Devel::PPPort::test5()} ;

ok "PL_sv_undef", sub { not defined Devel::PPPort::test6()} ;

ok "PL_sv_yes", sub { Devel::PPPort::test7()} ;

ok "PL_sv_no", sub { !Devel::PPPort::test8()} ;

ok "PL_na", sub { Devel::PPPort::test9("abcd") == 4} ;

ok "boolSV 1", sub { Devel::PPPort::test10(1) } ;

ok "boolSV 0", sub { ! Devel::PPPort::test10(0) } ;

ok "newSVpvn", sub { Devel::PPPort::test11("abcde", 3) eq "abc" } ;

ok "DEFSV", sub { $_ = "Fred"; Devel::PPPort::test12() eq "Fred" } ;

ok "ERRSV", sub { eval { 1; }; ! Devel::PPPort::test13() };

ok "ERRSV", sub { eval { fred() }; Devel::PPPort::test13() };

ok "CXT 1", sub { Devel::PPPort::test14()} ;

ok "CXT 2", sub { Devel::PPPort::test15()} ;

__END__
# TODO

PERL_VERSION
PERL_BCDVERSION

PL_stdingv
PL_hints
PL_curcop
PL_curstash
PL_copline
PL_Sv
PL_compiling
PL_dirty

PTR2IV
INT2PTR

dTHR
gv_stashpvn
NOOP
SAVE_DEFSV
PERL_UNUSED_DECL
dNOOP
@


1.1
log
@Initial revision
@
text
@@


1.1.1.1
log
@stock perl 5.8.0 from CPAN
@
text
@@


1.1.1.2
log
@perl 5.8.2 from CPAN
@
text
@a96 17

call_argv
call_method
call_pv
call_sv

get_cv
get_av
get_hv
get_sv

grok_hex
grok_oct
grok_bin

grok_number
grok_numeric_radix
@


1.1.1.3
log
@Import of stock perl 5.8.5
@
text
@a3 5
    require Config;
    if (($Config::Config{'extensions'} !~ m!\bDevel/PPPort\b!) ){
        print "1..0 # Skip -- Perl configured without Devel::PPPort module\n";
        exit 0;
    }
@


