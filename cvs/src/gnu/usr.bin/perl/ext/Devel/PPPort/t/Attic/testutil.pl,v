head	1.2;
access;
symbols
	OPENBSD_4_6:1.1.1.2.0.6
	OPENBSD_4_6_BASE:1.1.1.2
	OPENBSD_4_5:1.1.1.2.0.2
	OPENBSD_4_5_BASE:1.1.1.2
	PERL_5_10_0:1.1.1.2
	OPENBSD_4_4:1.1.1.1.0.16
	OPENBSD_4_4_BASE:1.1.1.1
	OPENBSD_4_3:1.1.1.1.0.14
	OPENBSD_4_3_BASE:1.1.1.1
	OPENBSD_4_2:1.1.1.1.0.12
	OPENBSD_4_2_BASE:1.1.1.1
	OPENBSD_4_1:1.1.1.1.0.10
	OPENBSD_4_1_BASE:1.1.1.1
	OPENBSD_4_0:1.1.1.1.0.8
	OPENBSD_4_0_BASE:1.1.1.1
	PERL_5_8_8:1.1.1.1
	OPENBSD_3_9:1.1.1.1.0.6
	OPENBSD_3_9_BASE:1.1.1.1
	OPENBSD_3_8:1.1.1.1.0.4
	OPENBSD_3_8_BASE:1.1.1.1
	OPENBSD_3_7:1.1.1.1.0.2
	OPENBSD_3_7_BASE:1.1.1.1
	PERL_5_8_6:1.1.1.1
	CPAN:1.1.1;
locks; strict;
comment	@# @;


1.2
date	2009.10.12.18.24.26;	author millert;	state dead;
branches;
next	1.1;

1.1
date	2005.01.15.21.16.46;	author millert;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	2005.01.15.21.16.46;	author millert;	state Exp;
branches;
next	1.1.1.2;

1.1.1.2
date	2008.09.29.17.18.16;	author millert;	state Exp;
branches;
next	;


desc
@@


1.2
log
@Merge in perl 5.10.1
@
text
@{
  my $__ntest;

  sub ok ($;$$) {
    local($\,$,);
    my $ok = 0;
    my $result = shift;
    if (@@_ == 0) {
      $ok = $result;
    } else {
      $expected = shift;
      if (!defined $expected) {
        $ok = !defined $result;
      } elsif (!defined $result) {
        $ok = 0;
      } elsif (ref($expected) eq 'Regexp') {
        $ok = $result =~ /$expected/;
      } else {
        $ok = $result eq $expected;
      }
    }
    ++$__ntest;
    if ($ok) {
      print "ok $__ntest\n"
    }
    else {
      print "not ok $__ntest\n"
    }
  }
}

1;
@


1.1
log
@Initial revision
@
text
@@


1.1.1.1
log
@perl 5.8.6 from CPAN
@
text
@@


1.1.1.2
log
@import perl 5.10.0 from CPAN
@
text
@a2 16
  my $__total;

  sub plan {
    @@_ == 2 or die "usage: plan(tests => count)";
    my $what = shift;
    $what eq 'tests' or die "cannot plan anything but tests";
    $__total = shift;
    defined $__total && $__total > 0 or die "need a positive number of tests";
    print "1..$__total\n";
  }

  sub skip {
    my $reason = shift;
    ++$__ntest;
    print "ok $__ntest # skip: $reason\n"
  }
d17 1
a17 1
        die "using regular expression objects is not backwards compatible";
@

