head	1.2;
access;
symbols
	OPENBSD_4_6:1.1.1.2.0.6
	OPENBSD_4_6_BASE:1.1.1.2
	OPENBSD_4_5:1.1.1.2.0.2
	OPENBSD_4_5_BASE:1.1.1.2
	PERL_5_10_0:1.1.1.2
	OPENBSD_4_4:1.1.1.1.0.20
	OPENBSD_4_4_BASE:1.1.1.1
	OPENBSD_4_3:1.1.1.1.0.18
	OPENBSD_4_3_BASE:1.1.1.1
	OPENBSD_4_2:1.1.1.1.0.16
	OPENBSD_4_2_BASE:1.1.1.1
	OPENBSD_4_1:1.1.1.1.0.14
	OPENBSD_4_1_BASE:1.1.1.1
	OPENBSD_4_0:1.1.1.1.0.12
	OPENBSD_4_0_BASE:1.1.1.1
	PERL_5_8_8:1.1.1.1
	OPENBSD_3_9:1.1.1.1.0.10
	OPENBSD_3_9_BASE:1.1.1.1
	OPENBSD_3_8:1.1.1.1.0.8
	OPENBSD_3_8_BASE:1.1.1.1
	OPENBSD_3_7:1.1.1.1.0.6
	OPENBSD_3_7_BASE:1.1.1.1
	PERL_5_8_6:1.1.1.1
	OPENBSD_3_6:1.1.1.1.0.4
	OPENBSD_3_6_BASE:1.1.1.1
	PERL_5_8_5:1.1.1.1
	PERL_5_8_3:1.1.1.1
	OPENBSD_3_5:1.1.1.1.0.2
	OPENBSD_3_5_BASE:1.1.1.1
	PERL_5_8_2:1.1.1.1
	CPAN:1.1.1;
locks; strict;
comment	@# @;


1.2
date	2009.10.12.18.24.29;	author millert;	state dead;
branches;
next	1.1;

1.1
date	2003.12.03.02.43.50;	author millert;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	2003.12.03.02.43.50;	author millert;	state Exp;
branches;
next	1.1.1.2;

1.1.1.2
date	2008.09.29.17.18.22;	author millert;	state Exp;
branches;
next	;


desc
@@


1.2
log
@Merge in perl 5.10.1
@
text
@#!./perl

BEGIN {
    chdir 't' if -d 't';
    @@INC = '../lib';
    require Config; import Config;
    if ($Config{'extensions'} !~ m!\bI18N/Langinfo\b! ||
	$Config{'extensions'} !~ m!\bPOSIX\b!)
    {
	print "1..0 # skip: I18N::Langinfo or POSIX unavailable\n";
	exit 0;
    }
}
    
use I18N::Langinfo qw(langinfo);
use POSIX qw(setlocale LC_ALL);

setlocale(LC_ALL, $ENV{LC_ALL} = $ENV{LANG} = "C");

print "1..1\n"; # We loaded okay.  That's about all we can hope for.
print "ok 1\n";
exit(0);

# Background: the langinfo() (in C known as nl_langinfo()) interface
# is supposed to be a portable way to fetch various language/country
# (locale) dependent constants like "the first day of the week" or
# "the decimal separator".  Give a portable (numeric) constant,
# get back a language-specific string.  That's a comforting fantasy.
# Now tune in for blunt reality: vendors seem to have implemented for
# those constants whatever they felt like implementing.  The UNIX
# standard says that one should have the RADIXCHAR constant for the
# decimal separator.  Not so for many Linux and BSD implementations.
# One should have the CODESET constant for returning the current
# codeset (say, ISO 8859-1).  Not so.  So let's give up any real
# testing (leave the old testing code here for old times' sake,
# though.) --jhi

my %want =
    (
     ABDAY_1	=> "Sun",
     DAY_1	=> "Sunday",
     ABMON_1	=> "Jan",
     MON_1	=> "January",
     RADIXCHAR	=> ".",
     AM_STR	=> qr{^(?:am|a\.m\.)$}i,
     THOUSEP	=> "",
     D_T_FMT	=> qr{^%a %b %[de] %H:%M:%S %Y$},
     D_FMT	=> qr{^%m/%d/%y$},
     T_FMT	=> qr{^%H:%M:%S$},
     );

    
my @@want = sort keys %want;

print "1..", scalar @@want, "\n";
    
for my $i (1..@@want) {
    my $try = $want[$i-1];
    eval { I18N::Langinfo->import($try) };
    unless ($@@) {
	my $got = langinfo(&$try);
	if (ref $want{$try} && $got =~ $want{$try} || $got eq $want{$try}) {
	    print qq[ok $i - $try is "$got"\n];
	} else {
	    print qq[not ok $i - $try is "$got" not "$want{$try}"\n];
	}
    } else {
	print qq[ok $i - Skip: $try not defined\n];
    }
}

@


1.1
log
@Initial revision
@
text
@@


1.1.1.1
log
@perl 5.8.2 from CPAN
@
text
@@


1.1.1.2
log
@import perl 5.10.0 from CPAN
@
text
@d1 1
a1 1
#!perl -T
d4 8
a11 3
    if ($ENV{PERL_CORE}) {
        chdir 't';
        @@INC = '../lib';
d14 3
d18 1
a18 22
use strict;
use Config;
use Test::More;

plan skip_all => "I18N::Langinfo or POSIX unavailable" 
    if $Config{'extensions'} !~ m!\bI18N/Langinfo\b!;

my @@constants = qw(ABDAY_1 DAY_1 ABMON_1 MON_1 RADIXCHAR AM_STR THOUSEP D_T_FMT D_FMT T_FMT);

plan tests => 1 + 3 * @@constants;

use_ok('I18N::Langinfo', 'langinfo', @@constants);

for my $constant (@@constants) {
    SKIP: {
        my $string = eval { langinfo(eval "$constant()") };
        is( $@@, '', "calling langinfo() with $constant" );
        skip "returned string was empty, skipping next two tests", 2 unless $string;
        ok( defined $string, "checking if the returned string is defined" );
        cmp_ok( length($string), '>=', 1, "checking if the returned string has a positive length" );
    }
}
d20 2
@

