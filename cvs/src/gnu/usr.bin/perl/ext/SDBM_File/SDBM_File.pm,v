head	1.10;
access;
symbols
	OPENBSD_6_1_BASE:1.10
	OPENBSD_6_0:1.9.0.10
	OPENBSD_6_0_BASE:1.9
	OPENBSD_5_9:1.9.0.4
	OPENBSD_5_9_BASE:1.9
	OPENBSD_5_8:1.9.0.6
	OPENBSD_5_8_BASE:1.9
	PERL_5_20_2:1.1.1.9
	OPENBSD_5_7:1.9.0.2
	OPENBSD_5_7_BASE:1.9
	PERL_5_20_1:1.1.1.9
	OPENBSD_5_6:1.8.0.8
	OPENBSD_5_6_BASE:1.8
	PERL_5_18_2:1.1.1.8
	PERL:1.1.1
	OPENBSD_5_5:1.8.0.6
	OPENBSD_5_5_BASE:1.8
	OPENBSD_5_4:1.8.0.2
	OPENBSD_5_4_BASE:1.8
	PERL_5_16_3:1.1.1.8
	OPENBSD_5_3:1.7.0.18
	OPENBSD_5_3_BASE:1.7
	OPENBSD_5_2:1.7.0.16
	OPENBSD_5_2_BASE:1.7
	OPENBSD_5_1_BASE:1.7
	OPENBSD_5_1:1.7.0.14
	OPENBSD_5_0:1.7.0.12
	OPENBSD_5_0_BASE:1.7
	OPENBSD_4_9:1.7.0.10
	OPENBSD_4_9_BASE:1.7
	PERL_5_12_2:1.1.1.7
	OPENBSD_4_8:1.7.0.8
	OPENBSD_4_8_BASE:1.7
	OPENBSD_4_7:1.7.0.4
	OPENBSD_4_7_BASE:1.7
	PERL_5_10_1:1.1.1.7
	OPENBSD_4_6:1.7.0.6
	OPENBSD_4_6_BASE:1.7
	OPENBSD_4_5:1.7.0.2
	OPENBSD_4_5_BASE:1.7
	PERL_5_10_0:1.1.1.7
	OPENBSD_4_4:1.6.0.10
	OPENBSD_4_4_BASE:1.6
	OPENBSD_4_3:1.6.0.8
	OPENBSD_4_3_BASE:1.6
	OPENBSD_4_2:1.6.0.6
	OPENBSD_4_2_BASE:1.6
	OPENBSD_4_1:1.6.0.4
	OPENBSD_4_1_BASE:1.6
	OPENBSD_4_0:1.6.0.2
	OPENBSD_4_0_BASE:1.6
	PERL_5_8_8:1.1.1.6
	OPENBSD_3_9:1.5.0.10
	OPENBSD_3_9_BASE:1.5
	OPENBSD_3_8:1.5.0.8
	OPENBSD_3_8_BASE:1.5
	OPENBSD_3_7:1.5.0.6
	OPENBSD_3_7_BASE:1.5
	PERL_5_8_6:1.1.1.5
	OPENBSD_3_6:1.5.0.4
	OPENBSD_3_6_BASE:1.5
	PERL_5_8_5:1.1.1.5
	PERL_5_8_3:1.1.1.5
	OPENBSD_3_5:1.5.0.2
	OPENBSD_3_5_BASE:1.5
	PERL_5_8_2:1.1.1.5
	OPENBSD_3_4:1.4.0.10
	OPENBSD_3_4_BASE:1.4
	OPENBSD_3_3:1.4.0.8
	OPENBSD_3_3_BASE:1.4
	PERL_5_8_0:1.1.1.4
	OPENBSD_3_2:1.4.0.6
	OPENBSD_3_2_BASE:1.4
	OPENBSD_3_1:1.4.0.4
	OPENBSD_3_1_BASE:1.4
	OPENBSD_3_0:1.4.0.2
	OPENBSD_3_0_BASE:1.4
	PERL_5_6_1:1.1.1.4
	OPENBSD_2_9:1.3.0.6
	OPENBSD_2_9_BASE:1.3
	OPENBSD_2_8:1.3.0.4
	OPENBSD_2_8_BASE:1.3
	OPENBSD_2_7:1.3.0.2
	OPENBSD_2_7_BASE:1.3
	PERL_5_6_0:1.1.1.3
	OPENBSD_2_6:1.2.0.8
	OPENBSD_2_6_BASE:1.2
	PERL_500503:1.1.1.2
	CPAN:1.1.1
	OPENBSD_2_5:1.2.0.6
	OPENBSD_2_5_BASE:1.2
	OPENBSD_2_4:1.2.0.4
	OPENBSD_2_4_BASE:1.2
	OPENBSD_2_3:1.2.0.2
	OPENBSD_2_3_BASE:1.2
	OPENBSD_2_2:1.1.1.1.0.6
	OPENBSD_2_2_BASE:1.1.1.1
	OPENBSD_2_1:1.1.1.1.0.4
	OPENBSD_2_1_BASE:1.1.1.1
	OPENBSD_2_0:1.1.1.1.0.2
	OPENBSD_2_0_BASE:1.1.1.1
	perl5003:1.1.1.1
	lwall:1.1.1;
locks; strict;
comment	@# @;
expand	@o@;


1.10
date	2017.02.05.00.32.13;	author afresh1;	state Exp;
branches;
next	1.9;
commitid	cxJ08BvJA9Pt2PTM;

1.9
date	2014.11.17.20.57.06;	author afresh1;	state Exp;
branches;
next	1.8;
commitid	QP75iYx42Uo7mMxO;

1.8
date	2013.03.25.20.40.54;	author sthen;	state Exp;
branches;
next	1.7;

1.7
date	2008.09.29.17.36.06;	author millert;	state Exp;
branches;
next	1.6;

1.6
date	2006.03.28.19.23.04;	author millert;	state Exp;
branches;
next	1.5;

1.5
date	2003.12.03.03.02.33;	author millert;	state Exp;
branches;
next	1.4;

1.4
date	2001.05.24.18.35.15;	author millert;	state Exp;
branches;
next	1.3;

1.3
date	2000.04.06.17.05.33;	author millert;	state Exp;
branches;
next	1.2;

1.2
date	97.11.30.07.55.45;	author millert;	state Exp;
branches;
next	1.1;

1.1
date	96.08.19.10.12.10;	author downsj;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	96.08.19.10.12.10;	author downsj;	state Exp;
branches;
next	1.1.1.2;

1.1.1.2
date	99.04.29.22.38.55;	author millert;	state Exp;
branches;
next	1.1.1.3;

1.1.1.3
date	2000.04.06.16.09.20;	author millert;	state Exp;
branches;
next	1.1.1.4;

1.1.1.4
date	2001.05.24.18.22.57;	author millert;	state Exp;
branches;
next	1.1.1.5;

1.1.1.5
date	2003.12.03.02.43.53;	author millert;	state Exp;
branches;
next	1.1.1.6;

1.1.1.6
date	2006.03.28.18.48.20;	author millert;	state Exp;
branches;
next	1.1.1.7;

1.1.1.7
date	2008.09.29.17.18.23;	author millert;	state Exp;
branches;
next	1.1.1.8;

1.1.1.8
date	2013.03.25.20.08.46;	author sthen;	state Exp;
branches;
next	1.1.1.9;

1.1.1.9
date	2014.11.17.20.53.06;	author afresh1;	state Exp;
branches;
next	;
commitid	B31cAbBIXiCqnL97;


desc
@@


1.10
log
@Fix merge issues, remove excess files - match perl-5.24.1 dist
@
text
@package SDBM_File;

use strict;
use warnings;

require Tie::Hash;
require XSLoader;

our @@ISA = qw(Tie::Hash);
our $VERSION = "1.14";

our @@EXPORT_OK = qw(PAGFEXT DIRFEXT PAIRMAX);
use Exporter "import";

XSLoader::load();

1;

__END__

=head1 NAME

SDBM_File - Tied access to sdbm files

=head1 SYNOPSIS

 use Fcntl;   # For O_RDWR, O_CREAT, etc.
 use SDBM_File;

 tie(%h, 'SDBM_File', 'filename', O_RDWR|O_CREAT, 0666)
   or die "Couldn't tie SDBM file 'filename': $!; aborting";

 # Now read and change the hash
 $h{newkey} = newvalue;
 print $h{oldkey}; 
 ...

 untie %h;

=head1 DESCRIPTION

C<SDBM_File> establishes a connection between a Perl hash variable and
a file in SDBM_File format.  You can manipulate the data in the file
just as if it were in a Perl hash, but when your program exits, the
data will remain in the file, to be used the next time your program
runs.

=head2 Tie

Use C<SDBM_File> with the Perl built-in C<tie> function to establish
the connection between the variable and the file.

    tie %hash, 'SDBM_File', $basename, $modeflags, $perms;

    tie %hash, 'SDBM_File', $dirfile,  $modeflags, $perms, $pagfilename;

C<$basename> is the base filename for the database.  The database is two
files with ".dir" and ".pag" extensions appended to C<$basename>,

    $basename.dir     (or .sdbm_dir on VMS, per DIRFEXT constant)
    $basename.pag

The two filenames can also be given separately in full as C<$dirfile>
and C<$pagfilename>.  This suits for two files without ".dir" and ".pag"
extensions, perhaps for example two files from L<File::Temp>.

C<$modeflags> can be the following constants from the C<Fcntl> module (in
the style of the L<open(2)> system call),

    O_RDONLY          read-only access
    O_WRONLY          write-only access
    O_RDWR            read and write access

If you want to create the file if it does not already exist then bitwise-OR
(C<|>) C<O_CREAT> too.  If you omit C<O_CREAT> and the database does not
already exist then the C<tie> call will fail.

    O_CREAT           create database if doesn't already exist

C<$perms> is the file permissions bits to use if new database files are
created.  This parameter is mandatory even when not creating a new database.
The permissions will be reduced by the user's umask so the usual value here
would be 0666, or if some very private data then 0600.  (See
L<perlfunc/umask>.)

=head1 EXPORTS

SDBM_File optionally exports the following constants:

=over

=item *

C<PAGFEXT> - the extension used for the page file, usually C<.pag>.

=item *

C<DIRFEXT> - the extension used for the directory file, C<.dir>
everywhere but VMS, where it is C<.sdbm_dir>.

=item *

C<PAIRMAX> - the maximum size of a stored hash entry, including the
length of both the key and value.

=back

These constants can also be used with fully qualified names,
eg. C<SDBM_File::PAGFEXT>.

=head1 DIAGNOSTICS

On failure, the C<tie> call returns an undefined value and probably
sets C<$!> to contain the reason the file could not be tied.

=head2 C<sdbm store returned -1, errno 22, key "..." at ...>

This warning is emitted when you try to store a key or a value that
is too long.  It means that the change was not recorded in the
database.  See BUGS AND WARNINGS below.

=head1 BUGS AND WARNINGS

There are a number of limits on the size of the data that you can
store in the SDBM file.  The most important is that the length of a
key, plus the length of its associated value, may not exceed 1008
bytes.

See L<perlfunc/tie>, L<perldbmfilter>, L<Fcntl>

=cut
@


1.9
log
@Fix merge conflicts, remove extra files, match upstream perl-5.20.1

ok deraadt@@ sthen@@ espie@@ miod@@
@
text
@d10 1
a10 1
our $VERSION = "1.11";
@


1.8
log
@merge/resolve conflicts
(some more to do after this one)
@
text
@d10 4
a13 1
our $VERSION = "1.09";
d43 1
a43 1
a file in SDBM_File format;.  You can manipulate the data in the file
d48 2
d51 3
a53 2
the connection between the variable and the file.  The arguments to
C<tie> should be:
d55 1
a55 1
=over 4
d57 2
a58 1
=item 1.
d60 2
a61 1
The hash variable you want to tie.
d63 3
a65 1
=item 2. 
d67 2
a68 2
The string C<"SDBM_File">.  (Ths tells Perl to use the C<SDBM_File>
package to perform the functions of the hash.)
d70 3
a72 1
=item 3. 
d74 3
a76 1
The name of the file you want to tie to the hash.  
d78 1
a78 1
=item 4.
d80 5
a84 1
Flags.  Use one of:
d86 1
a86 1
=over 2
d88 1
a88 1
=item C<O_RDONLY>
d90 1
a90 1
Read-only access to the data in the file.
d92 1
a92 1
=item C<O_WRONLY>
d94 1
a94 1
Write-only access to the data in the file.
d96 1
a96 1
=item C<O_RDWR>
d98 2
a99 1
Both read and write access.
d101 1
a101 1
=back
d103 2
a104 9
If you want to create the file if it does not exist, add C<O_CREAT> to
any of these, as in the example.  If you omit C<O_CREAT> and the file
does not already exist, the C<tie> call will fail.

=item 5.

The default permissions to use if a new file is created.  The actual
permissions will be modified by the user's umask, so you should
probably use 0666 here. (See L<perlfunc/umask>.)
d107 3
@


1.7
log
@fix conflicts and merge in local changes to perl 5.10.0
@
text
@d7 1
a7 1
use XSLoader ();
d10 1
a10 1
our $VERSION = "1.06";
d12 1
a12 1
XSLoader::load 'SDBM_File', $VERSION;
@


1.6
log
@merge in perl 5.8.8
@
text
@d10 1
a10 1
our $VERSION = "1.05";
@


1.5
log
@Resolve conflicts for perl 5.8.2, remove old files, and add OpenBSD-specific scaffolding
@
text
@d10 1
a10 1
our $VERSION = "1.04" ;
d103 1
a103 1
This warning is emmitted when you try to store a key or a value that
@


1.4
log
@merge in perl 5.6.1 with our local changes
@
text
@d10 1
a10 1
our $VERSION = "1.03" ;
@


1.3
log
@perl-5.6.0 + local changes
@
text
@d4 1
d10 1
a10 1
our $VERSION = "1.02" ;
d24 1
d27 7
a33 1
 tie(%h, 'SDBM_File', 'Op.dbmx', O_RDWR|O_CREAT, 0640);
d39 76
a114 1
See L<perlfunc/tie>, L<perldbmfilter>
@


1.2
log
@perl 5.004_04
@
text
@a3 1
use vars qw($VERSION @@ISA);
d6 1
a6 1
require DynaLoader;
d8 2
a9 1
@@ISA = qw(Tie::Hash DynaLoader);
d11 1
a11 3
$VERSION = "1.00" ;

bootstrap SDBM_File $VERSION;
d31 1
a31 1
See L<perlfunc/tie>
@


1.1
log
@Initial revision
@
text
@d27 1
a27 1
 tie(%h,SDBM_File,'Op.dbmx', O_RDWR|O_CREAT, 0640);
@


1.1.1.1
log
@Import of Perl 5.003 into the tree.  Makefile.bsd-wrapper and
config.sh.OpenBSD are the only local changes.
@
text
@@


1.1.1.2
log
@perl5.005_03
@
text
@d27 1
a27 1
 tie(%h, 'SDBM_File', 'Op.dbmx', O_RDWR|O_CREAT, 0640);
@


1.1.1.3
log
@virgin perl 5.6.0
@
text
@d4 1
d7 1
a7 1
use XSLoader ();
d9 1
a9 2
our @@ISA = qw(Tie::Hash);
our $VERSION = "1.02" ;
d11 3
a13 1
XSLoader::load 'SDBM_File', $VERSION;
d33 1
a33 1
See L<perlfunc/tie>, L<perldbmfilter>
@


1.1.1.4
log
@stock perl 5.6.1
@
text
@a3 1
use warnings;
d9 1
a9 1
our $VERSION = "1.03" ;
a22 1
 use Fcntl;   # For O_RDWR, O_CREAT, etc.
d25 1
a25 7
 tie(%h, 'SDBM_File', 'filename', O_RDWR|O_CREAT, 0666)
   or die "Couldn't tie SDBM file 'filename': $!; aborting";

 # Now read and change the hash
 $h{newkey} = newvalue;
 print $h{oldkey}; 
 ...
d31 1
a31 76
C<SDBM_File> establishes a connection between a Perl hash variable and
a file in SDBM_File format;.  You can manipulate the data in the file
just as if it were in a Perl hash, but when your program exits, the
data will remain in the file, to be used the next time your program
runs.

Use C<SDBM_File> with the Perl built-in C<tie> function to establish
the connection between the variable and the file.  The arguments to
C<tie> should be:

=over 4

=item 1.

The hash variable you want to tie.

=item 2. 

The string C<"SDBM_File">.  (Ths tells Perl to use the C<SDBM_File>
package to perform the functions of the hash.)

=item 3. 

The name of the file you want to tie to the hash.  

=item 4.

Flags.  Use one of:

=over 2

=item C<O_RDONLY>

Read-only access to the data in the file.

=item C<O_WRONLY>

Write-only access to the data in the file.

=item C<O_RDWR>

Both read and write access.

=back

If you want to create the file if it does not exist, add C<O_CREAT> to
any of these, as in the example.  If you omit C<O_CREAT> and the file
does not already exist, the C<tie> call will fail.

=item 5.

The default permissions to use if a new file is created.  The actual
permissions will be modified by the user's umask, so you should
probably use 0666 here. (See L<perlfunc/umask>.)

=back

=head1 DIAGNOSTICS

On failure, the C<tie> call returns an undefined value and probably
sets C<$!> to contain the reason the file could not be tied.

=head2 C<sdbm store returned -1, errno 22, key "..." at ...>

This warning is emmitted when you try to store a key or a value that
is too long.  It means that the change was not recorded in the
database.  See BUGS AND WARNINGS below.

=head1 BUGS AND WARNINGS

There are a number of limits on the size of the data that you can
store in the SDBM file.  The most important is that the length of a
key, plus the length of its associated value, may not exceed 1008
bytes.

See L<perlfunc/tie>, L<perldbmfilter>, L<Fcntl>
@


1.1.1.5
log
@perl 5.8.2 from CPAN
@
text
@d10 1
a10 1
our $VERSION = "1.04" ;
@


1.1.1.6
log
@perl 5.8.8 import
@
text
@d10 1
a10 1
our $VERSION = "1.05";
d103 1
a103 1
This warning is emitted when you try to store a key or a value that
@


1.1.1.7
log
@import perl 5.10.0 from CPAN
@
text
@d10 1
a10 1
our $VERSION = "1.06";
@


1.1.1.8
log
@import perl 5.16.3 from CPAN - worked on by Andrew Fresh and myself
@
text
@d7 1
a7 1
require XSLoader;
d10 1
a10 1
our $VERSION = "1.09";
d12 1
a12 1
XSLoader::load();
@


1.1.1.9
log
@Import perl-5.20.1
@
text
@d10 1
a10 4
our $VERSION = "1.11";

our @@EXPORT_OK = qw(PAGFEXT DIRFEXT PAIRMAX);
use Exporter "import";
d40 1
a40 1
a file in SDBM_File format.  You can manipulate the data in the file
a44 2
=head2 Tie

d46 2
a47 1
the connection between the variable and the file.
d49 1
a49 1
    tie %hash, 'SDBM_File', $basename, $modeflags, $perms;
d51 1
a51 1
    tie %hash, 'SDBM_File', $dirfile,  $modeflags, $perms, $pagfilename;
d53 1
a53 2
C<$basename> is the base filename for the database.  The database is two
files with ".dir" and ".pag" extensions appended to C<$basename>,
d55 1
a55 2
    $basename.dir     (or .sdbm_dir on VMS, per DIRFEXT constant)
    $basename.pag
d57 2
a58 3
The two filenames can also be given separately in full as C<$dirfile>
and C<$pagfilename>.  This suits for two files without ".dir" and ".pag"
extensions, perhaps for example two files from L<File::Temp>.
d60 1
a60 2
C<$modeflags> can be the following constants from the C<Fcntl> module (in
the style of the L<open(2)> system call),
d62 1
a62 3
    O_RDONLY          read-only access
    O_WRONLY          write-only access
    O_RDWR            read and write access
d64 1
a64 3
If you want to create the file if it does not already exist then bitwise-OR
(C<|>) C<O_CREAT> too.  If you omit C<O_CREAT> and the database does not
already exist then the C<tie> call will fail.
d66 1
a66 1
    O_CREAT           create database if doesn't already exist
d68 1
a68 5
C<$perms> is the file permissions bits to use if new database files are
created.  This parameter is mandatory even when not creating a new database.
The permissions will be reduced by the user's umask so the usual value here
would be 0666, or if some very private data then 0600.  (See
L<perlfunc/umask>.)
d70 1
a70 1
=head1 EXPORTS
d72 1
a72 1
SDBM_File optionally exports the following constants:
d74 1
a74 1
=over
d76 1
a76 1
=item *
d78 1
a78 1
C<PAGFEXT> - the extension used for the page file, usually C<.pag>.
d80 1
a80 1
=item *
d82 1
a82 2
C<DIRFEXT> - the extension used for the directory file, C<.dir>
everywhere but VMS, where it is C<.sdbm_dir>.
d84 9
a92 4
=item *

C<PAIRMAX> - the maximum size of a stored hash entry, including the
length of both the key and value.
a94 3

These constants can also be used with fully qualified names,
eg. C<SDBM_File::PAGFEXT>.
@


