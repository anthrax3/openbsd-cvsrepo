head	1.9;
access;
symbols
	OPENBSD_6_0:1.8.0.12
	OPENBSD_6_0_BASE:1.8
	OPENBSD_5_9:1.8.0.6
	OPENBSD_5_9_BASE:1.8
	OPENBSD_5_8:1.8.0.8
	OPENBSD_5_8_BASE:1.8
	PERL_5_20_2:1.1.1.7
	OPENBSD_5_7:1.8.0.2
	OPENBSD_5_7_BASE:1.8
	PERL_5_20_1:1.1.1.7
	OPENBSD_5_6:1.8.0.4
	OPENBSD_5_6_BASE:1.8
	PERL_5_18_2:1.1.1.7
	PERL:1.1.1
	OPENBSD_5_5:1.7.0.6
	OPENBSD_5_5_BASE:1.7
	OPENBSD_5_4:1.7.0.2
	OPENBSD_5_4_BASE:1.7
	PERL_5_16_3:1.1.1.6
	OPENBSD_5_3:1.6.0.14
	OPENBSD_5_3_BASE:1.6
	OPENBSD_5_2:1.6.0.12
	OPENBSD_5_2_BASE:1.6
	OPENBSD_5_1_BASE:1.6
	OPENBSD_5_1:1.6.0.10
	OPENBSD_5_0:1.6.0.8
	OPENBSD_5_0_BASE:1.6
	OPENBSD_4_9:1.6.0.6
	OPENBSD_4_9_BASE:1.6
	PERL_5_12_2:1.1.1.5
	OPENBSD_4_8:1.6.0.4
	OPENBSD_4_8_BASE:1.6
	OPENBSD_4_7:1.6.0.2
	OPENBSD_4_7_BASE:1.6
	PERL_5_10_1:1.1.1.5
	OPENBSD_4_6:1.5.0.26
	OPENBSD_4_6_BASE:1.5
	OPENBSD_4_5:1.5.0.22
	OPENBSD_4_5_BASE:1.5
	PERL_5_10_0:1.1.1.4
	OPENBSD_4_4:1.5.0.20
	OPENBSD_4_4_BASE:1.5
	OPENBSD_4_3:1.5.0.18
	OPENBSD_4_3_BASE:1.5
	OPENBSD_4_2:1.5.0.16
	OPENBSD_4_2_BASE:1.5
	OPENBSD_4_1:1.5.0.14
	OPENBSD_4_1_BASE:1.5
	OPENBSD_4_0:1.5.0.12
	OPENBSD_4_0_BASE:1.5
	PERL_5_8_8:1.1.1.4
	OPENBSD_3_9:1.5.0.10
	OPENBSD_3_9_BASE:1.5
	OPENBSD_3_8:1.5.0.8
	OPENBSD_3_8_BASE:1.5
	OPENBSD_3_7:1.5.0.6
	OPENBSD_3_7_BASE:1.5
	PERL_5_8_6:1.1.1.4
	OPENBSD_3_6:1.5.0.4
	OPENBSD_3_6_BASE:1.5
	PERL_5_8_5:1.1.1.4
	PERL_5_8_3:1.1.1.4
	OPENBSD_3_5:1.5.0.2
	OPENBSD_3_5_BASE:1.5
	PERL_5_8_2:1.1.1.4
	OPENBSD_3_4:1.4.0.16
	OPENBSD_3_4_BASE:1.4
	OPENBSD_3_3:1.4.0.14
	OPENBSD_3_3_BASE:1.4
	PERL_5_8_0:1.1.1.3
	OPENBSD_3_2:1.4.0.12
	OPENBSD_3_2_BASE:1.4
	OPENBSD_3_1:1.4.0.10
	OPENBSD_3_1_BASE:1.4
	OPENBSD_3_0:1.4.0.8
	OPENBSD_3_0_BASE:1.4
	PERL_5_6_1:1.1.1.3
	OPENBSD_2_9:1.4.0.6
	OPENBSD_2_9_BASE:1.4
	OPENBSD_2_8:1.4.0.4
	OPENBSD_2_8_BASE:1.4
	OPENBSD_2_7:1.4.0.2
	OPENBSD_2_7_BASE:1.4
	PERL_5_6_0:1.1.1.3
	OPENBSD_2_6:1.3.0.2
	OPENBSD_2_6_BASE:1.3
	PERL_500503:1.1.1.2
	CPAN:1.1.1
	OPENBSD_2_5:1.2.0.6
	OPENBSD_2_5_BASE:1.2
	OPENBSD_2_4:1.2.0.4
	OPENBSD_2_4_BASE:1.2
	OPENBSD_2_3:1.2.0.2
	OPENBSD_2_3_BASE:1.2
	OPENBSD_2_2:1.1.1.1.0.6
	OPENBSD_2_2_BASE:1.1.1.1
	OPENBSD_2_1:1.1.1.1.0.4
	OPENBSD_2_1_BASE:1.1.1.1
	OPENBSD_2_0:1.1.1.1.0.2
	OPENBSD_2_0_BASE:1.1.1.1
	perl5003:1.1.1.1
	lwall:1.1.1;
locks; strict;
comment	@ * @;
expand	@o@;


1.9
date	2017.02.05.00.32.14;	author afresh1;	state dead;
branches;
next	1.8;
commitid	cxJ08BvJA9Pt2PTM;

1.8
date	2014.03.24.15.05.27;	author afresh1;	state Exp;
branches;
next	1.7;

1.7
date	2013.03.25.20.40.54;	author sthen;	state Exp;
branches;
next	1.6;

1.6
date	2009.10.12.18.24.34;	author millert;	state Exp;
branches;
next	1.5;

1.5
date	2003.12.03.03.02.33;	author millert;	state Exp;
branches;
next	1.4;

1.4
date	2000.04.06.17.05.36;	author millert;	state Exp;
branches;
next	1.3;

1.3
date	99.04.29.22.51.35;	author millert;	state Exp;
branches;
next	1.2;

1.2
date	97.11.30.07.55.52;	author millert;	state Exp;
branches;
next	1.1;

1.1
date	96.08.19.10.12.14;	author downsj;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	96.08.19.10.12.14;	author downsj;	state Exp;
branches;
next	1.1.1.2;

1.1.1.2
date	99.04.29.22.39.05;	author millert;	state Exp;
branches;
next	1.1.1.3;

1.1.1.3
date	2000.04.06.16.09.22;	author millert;	state Exp;
branches;
next	1.1.1.4;

1.1.1.4
date	2003.12.03.02.43.53;	author millert;	state Exp;
branches;
next	1.1.1.5;

1.1.1.5
date	2009.10.12.18.11.18;	author millert;	state Exp;
branches;
next	1.1.1.6;

1.1.1.6
date	2013.03.25.20.08.47;	author sthen;	state Exp;
branches;
next	1.1.1.7;

1.1.1.7
date	2014.03.24.14.59.02;	author afresh1;	state Exp;
branches;
next	;


desc
@@


1.9
log
@Fix merge issues, remove excess files - match perl-5.24.1 dist
@
text
@/*
 * sdbm - ndbm work-alike hashed database library
 * based on Per-Ake Larson's Dynamic Hashing algorithms. BIT 18 (1978).
 * author: oz@@nexus.yorku.ca
 * status: public domain. 
 */
#define DBLKSIZ 4096
#define PBLKSIZ 1024
#define PAIRMAX 1008			/* arbitrary on PBLKSIZ-N */
#define SPLTMAX	10			/* maximum allowed splits */
					/* for a single insertion */
#ifdef VMS
#define DIRFEXT	".sdbm_dir"
#else
#define DIRFEXT	".dir"
#endif
#define PAGFEXT	".pag"

typedef struct {
	int dirf;		       /* directory file descriptor */
	int pagf;		       /* page file descriptor */
	int flags;		       /* status/error flags, see below */
	long maxbno;		       /* size of dirfile in bits */
	long curbit;		       /* current bit number */
	long hmask;		       /* current hash mask */
	long blkptr;		       /* current block for nextkey */
	int keyptr;		       /* current key for nextkey */
	long blkno;		       /* current page to read/write */
	long pagbno;		       /* current page in pagbuf */
	char pagbuf[PBLKSIZ];	       /* page file block buffer */
	long dirbno;		       /* current block in dirbuf */
	char dirbuf[DBLKSIZ];	       /* directory file block buffer */
} DBM;

#define DBM_RDONLY	0x1	       /* data base open read-only */
#define DBM_IOERR	0x2	       /* data base I/O error */

/*
 * utility macros
 */
#define sdbm_rdonly(db)		((db)->flags & DBM_RDONLY)
#define sdbm_error(db)		((db)->flags & DBM_IOERR)

#define sdbm_clearerr(db)	((db)->flags &= ~DBM_IOERR)  /* ouch */

#define sdbm_dirfno(db)	((db)->dirf)
#define sdbm_pagfno(db)	((db)->pagf)

typedef struct {
	const char *dptr;
	int dsize;
} datum;

EXTCONST datum nullitem
#ifdef DOINIT
                        = {0, 0}
#endif
                                   ;

#if defined(__STDC__) || defined(__cplusplus) || defined(CAN_PROTOTYPE)
#define proto(p) p
#else
#define proto(p) ()
#endif

/*
 * flags to sdbm_store
 */
#define DBM_INSERT	0
#define DBM_REPLACE	1

/*
 * ndbm interface
 */
extern DBM *sdbm_open proto((char *, int, int));
extern void sdbm_close proto((DBM *));
extern datum sdbm_fetch proto((DBM *, datum));
extern int sdbm_delete proto((DBM *, datum));
extern int sdbm_store proto((DBM *, datum, datum, int));
extern datum sdbm_firstkey proto((DBM *));
extern datum sdbm_nextkey proto((DBM *));
extern int sdbm_exists proto((DBM *, datum));

/*
 * other
 */
extern DBM *sdbm_prep proto((char *, char *, int, int));
extern long sdbm_hash proto((const char *, int));

#ifndef SDBM_ONLY
#define dbm_open sdbm_open
#define dbm_close sdbm_close
#define dbm_fetch sdbm_fetch
#define dbm_store sdbm_store
#define dbm_delete sdbm_delete
#define dbm_firstkey sdbm_firstkey
#define dbm_nextkey sdbm_nextkey
#define dbm_error sdbm_error
#define dbm_clearerr sdbm_clearerr
#endif

/* Most of the following is stolen from perl.h.  We don't include
   perl.h here because we just want the portability parts of perl.h,
   not everything else.
*/
#ifndef H_PERL  /* Include guard */
#include "embed.h"  /* Follow all the global renamings. */

/*
 * The following contortions are brought to you on behalf of all the
 * standards, semi-standards, de facto standards, not-so-de-facto standards
 * of the world, as well as all the other botches anyone ever thought of.
 * The basic theory is that if we work hard enough here, the rest of the
 * code can be a lot prettier.  Well, so much for theory.  Sorry, Henry...
 */

#include <errno.h>
#ifdef HAS_SOCKET
#   ifdef I_NET_ERRNO
#     include <net/errno.h>
#   endif
#endif

#if defined(__STDC__) || defined(_AIX) || defined(__stdc__) || defined(__cplusplus)
# define STANDARD_C 1
#endif

#include <stdio.h>
#include <ctype.h>
#include <setjmp.h>

#if defined(I_UNISTD)
#include <unistd.h>
#endif

#ifdef VMS
#  include <file.h>
#  include <unixio.h>
#endif

#ifdef I_SYS_PARAM
#   if !defined(MSDOS) && !defined(WIN32) && !defined(VMS)
#       ifdef PARAM_NEEDS_TYPES
#	    include <sys/types.h>
#       endif
#       include <sys/param.h>
#   endif
#endif

#ifndef _TYPES_		/* If types.h defines this it's easy. */
#   ifndef major		/* Does everyone's types.h define this? */
#	include <sys/types.h>
#   endif
#endif

#include <sys/stat.h>

#ifndef SEEK_SET
# ifdef L_SET
#  define SEEK_SET	L_SET
# else
#  define SEEK_SET	0  /* Wild guess. */
# endif
#endif

/* Use all the "standard" definitions? */
#if defined(STANDARD_C) && defined(I_STDLIB)
#   include <stdlib.h>
#endif /* STANDARD_C */

#define MEM_SIZE Size_t

/* This comes after <stdlib.h> so we don't try to change the standard
 * library prototypes; we'll use our own instead. */

#if defined(MYMALLOC) && !defined(PERL_POLLUTE_MALLOC)
#  define malloc  Perl_malloc
#  define calloc  Perl_calloc
#  define realloc Perl_realloc
#  define free    Perl_mfree

#ifdef __cplusplus
extern "C" {
#endif

Malloc_t Perl_malloc proto((MEM_SIZE nbytes));
Malloc_t Perl_calloc proto((MEM_SIZE elements, MEM_SIZE size));
Malloc_t Perl_realloc proto((Malloc_t where, MEM_SIZE nbytes));
Free_t   Perl_mfree proto((Malloc_t where));

#ifdef __cplusplus
}
#endif

#endif /* MYMALLOC */

#ifdef I_STRING
# ifndef __ultrix__
#  include <string.h>
# endif
#else
# include <strings.h>
#endif

#ifdef I_MEMORY
#include <memory.h>
#endif      

#ifdef __cplusplus
#define HAS_MEMCPY
#endif

#ifdef HAS_MEMCPY
#  if !defined(STANDARD_C) && !defined(I_STRING) && !defined(I_MEMORY)
#    ifndef memcpy
        extern char * memcpy proto((char*, char*, int));
#    endif
#  endif
#else
#   ifndef memcpy
#	ifdef HAS_BCOPY
#	    define memcpy(d,s,l) bcopy(s,d,l)
#	else
#	    define memcpy(d,s,l) my_bcopy(s,d,l)
#	endif
#   endif
#endif /* HAS_MEMCPY */

#ifdef HAS_MEMSET
#  if !defined(STANDARD_C) && !defined(I_STRING) && !defined(I_MEMORY)
#    ifndef memset
	extern char *memset proto((char*, int, int));
#    endif
#  endif
#  define memzero(d,l) memset(d,0,l)
#else
#   ifndef memzero
#	ifdef HAS_BZERO
#	    define memzero(d,l) bzero(d,l)
#	else
#	    define memzero(d,l) my_bzero(d,l)
#	endif
#   endif
#endif /* HAS_MEMSET */

#if defined(mips) && defined(ultrix) && !defined(__STDC__)
#   undef HAS_MEMCMP
#endif

#if defined(HAS_MEMCMP) && defined(HAS_SANE_MEMCMP)
#  if !defined(STANDARD_C) && !defined(I_STRING) && !defined(I_MEMORY)
#    ifndef memcmp
	extern int memcmp proto((char*, char*, int));
#    endif
#  endif
#  ifdef BUGGY_MSC
#    pragma function(memcmp)
#  endif
#else
#   ifndef memcmp
	/* maybe we should have included the full embedding header... */
#	define memcmp Perl_my_memcmp
#ifndef __cplusplus
	extern int memcmp proto((char*, char*, int));
#endif
#   endif
#endif /* HAS_MEMCMP */

#ifndef HAS_BCMP
#   ifndef bcmp
#	define bcmp(s1,s2,l) memcmp(s1,s2,l)
#   endif
#endif /* !HAS_BCMP */

#ifdef HAS_MEMCMP
#  define memNE(s1,s2,l) (memcmp(s1,s2,l))
#  define memEQ(s1,s2,l) (!memcmp(s1,s2,l))
#else
#  define memNE(s1,s2,l) (bcmp(s1,s2,l))
#  define memEQ(s1,s2,l) (!bcmp(s1,s2,l))
#endif

#ifdef I_NETINET_IN
#  ifdef VMS
#    include <in.h>
#  else
#    include <netinet/in.h>
#  endif
#endif

#endif /* Include guard */

@


1.8
log
@Merge perl-5.18.2 plus local patches, remove old files

OK espie@@ sthen@@ deraadt@@
@
text
@@


1.7
log
@merge/resolve conflicts
(some more to do after this one)
@
text
@d182 4
d190 5
@


1.6
log
@Merge in perl 5.10.1
@
text
@d253 1
a253 5
#	ifdef NO_EMBED
#	    define memcmp my_memcmp
#	else
#	    define memcmp Perl_my_memcmp
#	endif
@


1.5
log
@Resolve conflicts for perl 5.8.2, remove old files, and add OpenBSD-specific scaffolding
@
text
@d50 1
a50 1
	char *dptr;
d88 1
a88 1
extern long sdbm_hash proto((char *, int));
@


1.4
log
@perl-5.6.0 + local changes
@
text
@d189 3
a191 1
#include <string.h>
d193 1
a193 1
#include <strings.h>
d248 1
a248 1
  #  pragma function(memcmp)
@


1.3
log
@perl5.005_03 (stock)
@
text
@d82 1
d102 4
a105 1
/* Most of the following is stolen from perl.h. */
d107 1
d176 11
a186 21
#if defined(MYMALLOC) && (defined(HIDEMYMALLOC) || defined(EMBEDMYMALLOC))

#   ifdef HIDEMYMALLOC
#	define malloc  Mymalloc
#	define calloc  Mycalloc
#	define realloc Myremalloc
#	define free    Myfree
#   endif
#   ifdef EMBEDMYMALLOC
#	define malloc  Perl_malloc
#	define calloc  Perl_calloc
#	define realloc Perl_realloc
#	define free    Perl_free
#   endif

    Malloc_t malloc proto((MEM_SIZE nbytes));
    Malloc_t calloc proto((MEM_SIZE elements, MEM_SIZE size));
    Malloc_t realloc proto((Malloc_t where, MEM_SIZE nbytes));
    Free_t   free proto((Malloc_t where));

#endif /* MYMALLOC && (HIDEMYMALLOC || EMBEDMYMALLOC) */
@


1.2
log
@perl 5.004_04
@
text
@d12 3
d16 1
d54 5
a58 1
extern datum nullitem;
d60 1
a60 1
#ifdef __STDC__
d127 1
a127 1
#ifdef I_UNISTD
d131 11
a141 3
#if !defined(MSDOS) && !defined(WIN32)
#   ifdef PARAM_NEEDS_TYPES
#	include <sys/types.h>
a142 1
#   include <sys/param.h>
d201 4
d255 1
a255 1
#	/* maybe we should have included the full embedding header... */
d261 1
d263 1
d282 5
a286 1
#   include <netinet/in.h>
d290 1
@


1.1
log
@Initial revision
@
text
@d82 9
a90 9
#define dbm_open sdbm_open;
#define dbm_close sdbm_close;
#define dbm_fetch sdbm_fetch;
#define dbm_store sdbm_store;
#define dbm_delete sdbm_delete;
#define dbm_firstkey sdbm_firstkey;
#define dbm_nextkey sdbm_nextkey;
#define dbm_error sdbm_error;
#define dbm_clearerr sdbm_clearerr;
a110 11
#ifdef MYMALLOC
#   ifdef HIDEMYMALLOC
#	define malloc Mymalloc
#	define realloc Myremalloc
#	define free Myfree
#   endif
#   define safemalloc malloc
#   define saferealloc realloc
#   define safefree free
#endif

d123 1
a123 1
#ifndef MSDOS
d153 25
a187 4
#if defined(mips) && defined(ultrix) && !defined(__STDC__)
#   undef HAS_MEMCMP
#endif

d191 1
a191 1
        extern char * memcpy _((char*, char*, int));
d207 1
a207 1
	extern char *memset _((char*, int, int));
d221 5
a225 1
#ifdef HAS_MEMCMP
d228 1
a228 1
	extern int memcmp _((char*, char*, int));
d231 3
d236 7
a242 1
#	define memcmp 	my_memcmp
a245 1
/* we prefer bcmp slightly for comparisons that don't care about ordering */
d250 9
a258 1
#endif /* HAS_BCMP */
@


1.1.1.1
log
@Import of Perl 5.003 into the tree.  Makefile.bsd-wrapper and
config.sh.OpenBSD are the only local changes.
@
text
@@


1.1.1.2
log
@perl5.005_03
@
text
@a11 3
#ifdef VMS
#define DIRFEXT	".sdbm_dir"
#else
a12 1
#endif
d50 1
a50 5
EXTCONST datum nullitem
#ifdef DOINIT
                        = {0, 0}
#endif
                                   ;
d52 1
a52 1
#if defined(__STDC__) || defined(__cplusplus) || defined(CAN_PROTOTYPE)
d82 9
a90 9
#define dbm_open sdbm_open
#define dbm_close sdbm_close
#define dbm_fetch sdbm_fetch
#define dbm_store sdbm_store
#define dbm_delete sdbm_delete
#define dbm_firstkey sdbm_firstkey
#define dbm_nextkey sdbm_nextkey
#define dbm_error sdbm_error
#define dbm_clearerr sdbm_clearerr
d111 11
d130 1
a130 1
#if defined(I_UNISTD)
d134 3
a136 11
#ifdef VMS
#  include <file.h>
#  include <unixio.h>
#endif

#ifdef I_SYS_PARAM
#   if !defined(MSDOS) && !defined(WIN32) && !defined(VMS)
#       ifdef PARAM_NEEDS_TYPES
#	    include <sys/types.h>
#       endif
#       include <sys/param.h>
d138 1
a163 25
/* This comes after <stdlib.h> so we don't try to change the standard
 * library prototypes; we'll use our own instead. */

#if defined(MYMALLOC) && (defined(HIDEMYMALLOC) || defined(EMBEDMYMALLOC))

#   ifdef HIDEMYMALLOC
#	define malloc  Mymalloc
#	define calloc  Mycalloc
#	define realloc Myremalloc
#	define free    Myfree
#   endif
#   ifdef EMBEDMYMALLOC
#	define malloc  Perl_malloc
#	define calloc  Perl_calloc
#	define realloc Perl_realloc
#	define free    Perl_free
#   endif

    Malloc_t malloc proto((MEM_SIZE nbytes));
    Malloc_t calloc proto((MEM_SIZE elements, MEM_SIZE size));
    Malloc_t realloc proto((Malloc_t where, MEM_SIZE nbytes));
    Free_t   free proto((Malloc_t where));

#endif /* MYMALLOC && (HIDEMYMALLOC || EMBEDMYMALLOC) */

d172 1
a172 1
#endif      
d174 2
a175 2
#ifdef __cplusplus
#define HAS_MEMCPY
d181 1
a181 1
        extern char * memcpy proto((char*, char*, int));
d197 1
a197 1
	extern char *memset proto((char*, int, int));
d211 1
a211 5
#if defined(mips) && defined(ultrix) && !defined(__STDC__)
#   undef HAS_MEMCMP
#endif

#if defined(HAS_MEMCMP) && defined(HAS_SANE_MEMCMP)
d214 1
a214 1
	extern int memcmp proto((char*, char*, int));
a216 3
#  ifdef BUGGY_MSC
  #  pragma function(memcmp)
#  endif
d219 1
a219 9
	/* maybe we should have included the full embedding header... */
#	ifdef NO_EMBED
#	    define memcmp my_memcmp
#	else
#	    define memcmp Perl_my_memcmp
#	endif
#ifndef __cplusplus
	extern int memcmp proto((char*, char*, int));
#endif
d223 1
d228 1
a228 9
#endif /* !HAS_BCMP */

#ifdef HAS_MEMCMP
#  define memNE(s1,s2,l) (memcmp(s1,s2,l))
#  define memEQ(s1,s2,l) (!memcmp(s1,s2,l))
#else
#  define memNE(s1,s2,l) (bcmp(s1,s2,l))
#  define memEQ(s1,s2,l) (!bcmp(s1,s2,l))
#endif
d231 1
a231 5
#  ifdef VMS
#    include <in.h>
#  else
#    include <netinet/in.h>
#  endif
a234 1

@


1.1.1.3
log
@virgin perl 5.6.0
@
text
@a81 1
extern int sdbm_exists proto((DBM *, datum));
d101 1
a101 4
/* Most of the following is stolen from perl.h.  We don't include
   perl.h here because we just want the portability parts of perl.h,
   not everything else.
*/
a102 1
#include "embed.h"  /* Follow all the global renamings. */
d171 21
a191 11
#if defined(MYMALLOC) && !defined(PERL_POLLUTE_MALLOC)
#  define malloc  Perl_malloc
#  define calloc  Perl_calloc
#  define realloc Perl_realloc
#  define free    Perl_mfree

Malloc_t Perl_malloc proto((MEM_SIZE nbytes));
Malloc_t Perl_calloc proto((MEM_SIZE elements, MEM_SIZE size));
Malloc_t Perl_realloc proto((Malloc_t where, MEM_SIZE nbytes));
Free_t   Perl_mfree proto((Malloc_t where));
#endif /* MYMALLOC */
@


1.1.1.4
log
@perl 5.8.2 from CPAN
@
text
@d189 1
a189 3
# ifndef __ultrix__
#  include <string.h>
# endif
d191 1
a191 1
# include <strings.h>
d246 1
a246 1
#    pragma function(memcmp)
@


1.1.1.5
log
@import perl 5.10.1
@
text
@d50 1
a50 1
	const char *dptr;
d88 1
a88 1
extern long sdbm_hash proto((const char *, int));
@


1.1.1.6
log
@import perl 5.16.3 from CPAN - worked on by Andrew Fresh and myself
@
text
@d253 5
a257 1
#	define memcmp Perl_my_memcmp
@


1.1.1.7
log
@Import perl-5.18.2

OK espie@@ sthen@@ deraadt@@
@
text
@a181 4
#ifdef __cplusplus
extern "C" {
#endif

a185 5

#ifdef __cplusplus
}
#endif

@


