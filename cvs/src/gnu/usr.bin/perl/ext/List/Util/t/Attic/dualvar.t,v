head	1.2;
access;
symbols
	OPENBSD_4_6:1.1.1.2.0.16
	OPENBSD_4_6_BASE:1.1.1.2
	OPENBSD_4_5:1.1.1.2.0.12
	OPENBSD_4_5_BASE:1.1.1.2
	PERL_5_10_0:1.1.1.2
	OPENBSD_4_4:1.1.1.2.0.10
	OPENBSD_4_4_BASE:1.1.1.2
	OPENBSD_4_3:1.1.1.2.0.8
	OPENBSD_4_3_BASE:1.1.1.2
	OPENBSD_4_2:1.1.1.2.0.6
	OPENBSD_4_2_BASE:1.1.1.2
	OPENBSD_4_1:1.1.1.2.0.4
	OPENBSD_4_1_BASE:1.1.1.2
	OPENBSD_4_0:1.1.1.2.0.2
	OPENBSD_4_0_BASE:1.1.1.2
	PERL_5_8_8:1.1.1.2
	OPENBSD_3_9:1.1.1.1.0.14
	OPENBSD_3_9_BASE:1.1.1.1
	OPENBSD_3_8:1.1.1.1.0.12
	OPENBSD_3_8_BASE:1.1.1.1
	OPENBSD_3_7:1.1.1.1.0.10
	OPENBSD_3_7_BASE:1.1.1.1
	PERL_5_8_6:1.1.1.1
	OPENBSD_3_6:1.1.1.1.0.8
	OPENBSD_3_6_BASE:1.1.1.1
	PERL_5_8_5:1.1.1.1
	PERL_5_8_3:1.1.1.1
	OPENBSD_3_5:1.1.1.1.0.6
	OPENBSD_3_5_BASE:1.1.1.1
	PERL_5_8_2:1.1.1.1
	OPENBSD_3_4:1.1.1.1.0.4
	OPENBSD_3_4_BASE:1.1.1.1
	OPENBSD_3_3:1.1.1.1.0.2
	OPENBSD_3_3_BASE:1.1.1.1
	PERL_5_8_0:1.1.1.1
	CPAN:1.1.1;
locks; strict;
comment	@# @;
expand	@o@;


1.2
date	2009.10.12.18.24.31;	author millert;	state dead;
branches;
next	1.1;

1.1
date	2002.10.27.22.14.55;	author millert;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	2002.10.27.22.14.55;	author millert;	state Exp;
branches;
next	1.1.1.2;

1.1.1.2
date	2006.03.28.18.48.16;	author millert;	state Exp;
branches;
next	;


desc
@@


1.2
log
@Merge in perl 5.10.1
@
text
@#!./perl

BEGIN {
    unless (-d 'blib') {
	chdir 't' if -d 't';
	@@INC = '../lib';
	require Config; import Config;
	keys %Config; # Silence warning
	if ($Config{extensions} !~ /\bList\/Util\b/) {
	    print "1..0 # Skip: List::Util was not built\n";
	    exit 0;
	}
    }
}

use vars qw($skip);

BEGIN {
  require Scalar::Util;

  if (grep { /dualvar/ } @@Scalar::Util::EXPORT_FAIL) {
    print "1..0\n";
    $skip=1;
  }
}

eval <<'EOT' unless $skip;
use Scalar::Util qw(dualvar);

print "1..11\n";

$var = dualvar 2.2,"string";

print "not " unless $var == 2.2;
print "ok 1\n";

print "not " unless $var eq "string";
print "ok 2\n";

$var2 = $var;

$var++;

print "not " unless $var == 3.2;
print "ok 3\n";

print "not " unless $var ne "string";
print "ok 4\n";

print "not " unless $var2 == 2.2;
print "ok 5\n";

print "not " unless $var2 eq "string";
print "ok 6\n";

my $numstr = "10.2";
my $numtmp = sprintf("%d", $numstr);
$var = dualvar $numstr, "";
print "not " unless $var == $numstr;
print "ok 7\n";

$var = dualvar 1<<31, "";
print "not " unless $var == 1<<31;
print "ok 8\n";
print "not " unless $var > 0;
print "ok 9\n";

tie my $tied, 'Tied';
$var = dualvar $tied, "ok";
print "not " unless $var == 7.5;
print "ok 10\n";
print "not " unless $var eq "ok";
print "ok 11\n";

EOT

package Tied;

sub TIESCALAR { bless {} }
sub FETCH { 7.5 }

@


1.1
log
@Initial revision
@
text
@@


1.1.1.1
log
@stock perl 5.8.0 from CPAN
@
text
@@


1.1.1.2
log
@perl 5.8.8 import
@
text
@d16 1
a16 4
use Scalar::Util ();
use Test::More  (grep { /dualvar/ } @@Scalar::Util::EXPORT_FAIL)
			? (skip_all => 'dualvar requires XS version')
			: (tests => 11);
d18 2
a19 1
Scalar::Util->import('dualvar');
d21 5
a25 1
$var = dualvar( 2.2,"string");
d27 12
a38 2
ok( $var == 2.2,	'Numeric value');
ok( $var eq "string",	'String value');
a41 3
ok( $var2 == 2.2,	'copy Numeric value');
ok( $var2 eq "string",	'copy String value');

d44 2
a45 2
ok( $var == 3.2,	'inc Numeric value');
ok( $var ne "string",	'inc String value');
d47 2
a48 2
my $numstr = "10.2";
my $numtmp = int($numstr); # use $numstr as an int
d50 2
a51 1
$var = dualvar($numstr, "");
d53 2
a54 1
ok( $var == $numstr,	'NV');
d56 11
a66 3
$var = dualvar(1<<31, "");
ok( $var == (1<<31),	'UV 1');
ok( $var > 0,		'UV 2');
d69 7
a75 3
$var = dualvar($tied, "ok");
ok($var == 7.5,		'Tied num');
ok($var eq 'ok',	'Tied str');
@

