head	1.5;
access;
symbols
	OPENBSD_4_6:1.4.0.16
	OPENBSD_4_6_BASE:1.4
	OPENBSD_4_5:1.4.0.12
	OPENBSD_4_5_BASE:1.4
	PERL_5_10_0:1.1.1.4
	OPENBSD_4_4:1.4.0.10
	OPENBSD_4_4_BASE:1.4
	OPENBSD_4_3:1.4.0.8
	OPENBSD_4_3_BASE:1.4
	OPENBSD_4_2:1.4.0.6
	OPENBSD_4_2_BASE:1.4
	OPENBSD_4_1:1.4.0.4
	OPENBSD_4_1_BASE:1.4
	OPENBSD_4_0:1.4.0.2
	OPENBSD_4_0_BASE:1.4
	PERL_5_8_8:1.1.1.4
	OPENBSD_3_9:1.3.0.8
	OPENBSD_3_9_BASE:1.3
	OPENBSD_3_8:1.3.0.6
	OPENBSD_3_8_BASE:1.3
	OPENBSD_3_7:1.3.0.4
	OPENBSD_3_7_BASE:1.3
	PERL_5_8_6:1.1.1.3
	OPENBSD_3_6:1.3.0.2
	OPENBSD_3_6_BASE:1.3
	PERL_5_8_5:1.1.1.2
	PERL_5_8_3:1.1.1.1
	OPENBSD_3_5:1.2.0.2
	OPENBSD_3_5_BASE:1.2
	PERL_5_8_2:1.1.1.1
	CPAN:1.1.1;
locks; strict;
comment	@# @;


1.5
date	2009.10.12.18.24.31;	author millert;	state dead;
branches;
next	1.4;

1.4
date	2006.03.28.19.23.03;	author millert;	state Exp;
branches;
next	1.3;

1.3
date	2004.08.09.18.09.15;	author millert;	state Exp;
branches;
next	1.2;

1.2
date	2003.12.03.03.02.31;	author millert;	state Exp;
branches;
next	1.1;

1.1
date	2003.12.03.02.43.51;	author millert;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	2003.12.03.02.43.51;	author millert;	state Exp;
branches;
next	1.1.1.2;

1.1.1.2
date	2004.08.09.17.46.24;	author millert;	state Exp;
branches;
next	1.1.1.3;

1.1.1.3
date	2005.01.15.21.16.57;	author millert;	state Exp;
branches;
next	1.1.1.4;

1.1.1.4
date	2006.03.28.18.48.16;	author millert;	state Exp;
branches;
next	;


desc
@@


1.5
log
@Merge in perl 5.10.1
@
text
@#!/usr/bin/perl -w

BEGIN {
    unless (-d 'blib') {
	chdir 't' if -d 't';
	@@INC = '../lib';
	require Config; import Config;
	keys %Config; # Silence warning
	if ($Config{extensions} !~ /\bList\/Util\b/) {
	    print "1..0 # Skip: List::Util was not built\n";
	    exit 0;
	}
    }
}

use strict;
use Test::More tests => 16;
use Scalar::Util qw(looks_like_number);

foreach my $num (qw(1 -1 +1 1.0 +1.0 -1.0 -1.0e-12)) {
  ok(looks_like_number($num), "'$num'");
}

is(!!looks_like_number("Inf"),	    $] >= 5.006001,	'Inf');
is(!!looks_like_number("Infinity"), $] >= 5.008,	'Infinity');
is(!!looks_like_number("NaN"),	    $] >= 5.008,	'NaN');
is(!!looks_like_number("foo"),	    '',			'foo');
is(!!looks_like_number(undef),	    '',           	'undef');
is(!!looks_like_number({}),	    '',			'HASH Ref');
is(!!looks_like_number([]),	    '',			'ARRAY Ref');

use Math::BigInt;
my $bi = Math::BigInt->new('1234567890');
is(!!looks_like_number($bi),	    '',			'Math::BigInt');
is(!!looks_like_number("$bi"),	    1,			'Stringified Math::BigInt');

# We should copy some of perl core tests like t/base/num.t here
@


1.4
log
@merge in perl 5.8.8
@
text
@@


1.3
log
@merge 5.8.5 into HEAD
remove now-unused files
crank libperl shared library major number
update Makefile.bsd-wrapper
tweak openbsd hints file for arm and m68k
@
text
@a1 10
# -*- perl -*-


#
# $Id: lln.t,v 1.2 2003/12/03 03:02:31 millert Exp $
# Author: Slaven Rezic
#

use strict;
use vars qw(%Config);
d16 2
d20 3
a22 4
my $i;
sub ok { print +(($_[0] eq $_[1]) ? "": "not "), "ok ",++$i,"\n" }

print "1..12\n";
d24 12
a35 13
ok(!!looks_like_number("1"),	    1);
ok(!!looks_like_number("-1"),	    1);
ok(!!looks_like_number("+1"),	    1);
ok(!!looks_like_number("1.0"),	    1);
ok(!!looks_like_number("+1.0"),	    1);
ok(!!looks_like_number("-1.0"),	    1);
ok(!!looks_like_number("-1.0e-12"), 1);
ok(!!looks_like_number("Inf"),	    $] >= 5.006001);
ok(!!looks_like_number("Infinity"), $] >= 5.008);
ok(!!looks_like_number("NaN"),	    $] >= 5.008);
ok(!!looks_like_number("foo"),	    '');
ok(!!looks_like_number(undef),	    $] < 5.008005);
# That's enough - we trust the perl core tests like t/base/num.t
d37 1
a37 1
__END__
@


1.2
log
@Resolve conflicts for perl 5.8.2, remove old files, and add OpenBSD-specific scaffolding
@
text
@d6 1
a6 1
# $Id: $
d44 1
a44 1
ok(!!looks_like_number(undef),	    1);
@


1.1
log
@Initial revision
@
text
@@


1.1.1.1
log
@perl 5.8.2 from CPAN
@
text
@@


1.1.1.2
log
@Import of stock perl 5.8.5
@
text
@d6 1
a6 1
# $Id: lln.t,v 1.2 2003/12/03 03:02:31 millert Exp $
d44 1
a44 1
ok(!!looks_like_number(undef),	    $] < 5.008005);
@


1.1.1.3
log
@perl 5.8.6 from CPAN
@
text
@d6 1
a6 1
# $Id: $
@


1.1.1.4
log
@perl 5.8.8 import
@
text
@d2 10
a25 2
use strict;
use Test::More tests => 16;
d28 4
a31 3
foreach my $num (qw(1 -1 +1 1.0 +1.0 -1.0 -1.0e-12)) {
  ok(looks_like_number($num), "'$num'");
}
d33 13
a45 12
is(!!looks_like_number("Inf"),	    $] >= 5.006001,	'Inf');
is(!!looks_like_number("Infinity"), $] >= 5.008,	'Infinity');
is(!!looks_like_number("NaN"),	    $] >= 5.008,	'NaN');
is(!!looks_like_number("foo"),	    '',			'foo');
is(!!looks_like_number(undef),	    '',           	'undef');
is(!!looks_like_number({}),	    '',			'HASH Ref');
is(!!looks_like_number([]),	    '',			'ARRAY Ref');

use Math::BigInt;
my $bi = Math::BigInt->new('1234567890');
is(!!looks_like_number($bi),	    '',			'Math::BigInt');
is(!!looks_like_number("$bi"),	    1,			'Stringified Math::BigInt');
d47 1
a47 1
# We should copy some of perl core tests like t/base/num.t here
@


