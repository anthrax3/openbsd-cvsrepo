head	1.10;
access;
symbols
	OPENBSD_4_8:1.9.0.4
	OPENBSD_4_8_BASE:1.9
	OPENBSD_4_7:1.9.0.2
	OPENBSD_4_7_BASE:1.9
	PERL_5_10_1:1.1.1.7
	OPENBSD_4_6:1.8.0.6
	OPENBSD_4_6_BASE:1.8
	OPENBSD_4_5:1.8.0.2
	OPENBSD_4_5_BASE:1.8
	PERL_5_10_0:1.1.1.6
	OPENBSD_4_4:1.7.0.16
	OPENBSD_4_4_BASE:1.7
	OPENBSD_4_3:1.7.0.14
	OPENBSD_4_3_BASE:1.7
	OPENBSD_4_2:1.7.0.12
	OPENBSD_4_2_BASE:1.7
	OPENBSD_4_1:1.7.0.10
	OPENBSD_4_1_BASE:1.7
	OPENBSD_4_0:1.7.0.8
	OPENBSD_4_0_BASE:1.7
	PERL_5_8_8:1.1.1.5
	OPENBSD_3_9:1.7.0.6
	OPENBSD_3_9_BASE:1.7
	OPENBSD_3_8:1.7.0.4
	OPENBSD_3_8_BASE:1.7
	OPENBSD_3_7:1.7.0.2
	OPENBSD_3_7_BASE:1.7
	PERL_5_8_6:1.1.1.5
	OPENBSD_3_6:1.6.0.8
	OPENBSD_3_6_BASE:1.6
	PERL_5_8_5:1.1.1.5
	PERL_5_8_3:1.1.1.5
	OPENBSD_3_5:1.6.0.6
	OPENBSD_3_5_BASE:1.6
	PERL_5_8_2:1.1.1.5
	OPENBSD_3_4:1.6.0.4
	OPENBSD_3_4_BASE:1.6
	OPENBSD_3_3:1.6.0.2
	OPENBSD_3_3_BASE:1.6
	PERL_5_8_0:1.1.1.5
	OPENBSD_3_2:1.5.0.6
	OPENBSD_3_2_BASE:1.5
	OPENBSD_3_1:1.5.0.4
	OPENBSD_3_1_BASE:1.5
	OPENBSD_3_0:1.5.0.2
	OPENBSD_3_0_BASE:1.5
	PERL_5_6_1:1.1.1.4
	OPENBSD_2_9:1.4.0.6
	OPENBSD_2_9_BASE:1.4
	OPENBSD_2_8:1.4.0.4
	OPENBSD_2_8_BASE:1.4
	OPENBSD_2_7:1.4.0.2
	OPENBSD_2_7_BASE:1.4
	PERL_5_6_0:1.1.1.3
	OPENBSD_2_6:1.3.0.2
	OPENBSD_2_6_BASE:1.3
	PERL_500503:1.1.1.2
	CPAN:1.1.1
	OPENBSD_2_5:1.2.0.6
	OPENBSD_2_5_BASE:1.2
	OPENBSD_2_4:1.2.0.4
	OPENBSD_2_4_BASE:1.2
	OPENBSD_2_3:1.2.0.2
	OPENBSD_2_3_BASE:1.2
	OPENBSD_2_2:1.1.1.1.0.6
	OPENBSD_2_2_BASE:1.1.1.1
	OPENBSD_2_1:1.1.1.1.0.4
	OPENBSD_2_1_BASE:1.1.1.1
	OPENBSD_2_0:1.1.1.1.0.2
	OPENBSD_2_0_BASE:1.1.1.1
	perl5003:1.1.1.1
	lwall:1.1.1;
locks; strict;
comment	@# @;


1.10
date	2010.09.24.14.59.15;	author millert;	state dead;
branches;
next	1.9;

1.9
date	2009.10.12.18.24.24;	author millert;	state Exp;
branches;
next	1.8;

1.8
date	2008.09.29.17.36.02;	author millert;	state Exp;
branches;
next	1.7;

1.7
date	2005.01.15.21.30.25;	author millert;	state Exp;
branches;
next	1.6;

1.6
date	2002.10.27.22.25.22;	author millert;	state Exp;
branches;
next	1.5;

1.5
date	2001.05.24.18.35.09;	author millert;	state Exp;
branches;
next	1.4;

1.4
date	2000.04.06.17.05.08;	author millert;	state Exp;
branches;
next	1.3;

1.3
date	99.04.29.22.51.25;	author millert;	state Exp;
branches;
next	1.2;

1.2
date	97.11.30.07.55.06;	author millert;	state Exp;
branches;
next	1.1;

1.1
date	96.08.19.10.12.01;	author downsj;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	96.08.19.10.12.01;	author downsj;	state Exp;
branches;
next	1.1.1.2;

1.1.1.2
date	99.04.29.22.38.40;	author millert;	state Exp;
branches;
next	1.1.1.3;

1.1.1.3
date	2000.04.06.16.09.05;	author millert;	state Exp;
branches;
next	1.1.1.4;

1.1.1.4
date	2001.05.24.18.22.43;	author millert;	state Exp;
branches;
next	1.1.1.5;

1.1.1.5
date	2002.10.27.22.14.54;	author millert;	state Exp;
branches;
next	1.1.1.6;

1.1.1.6
date	2008.09.29.17.18.14;	author millert;	state Exp;
branches;
next	1.1.1.7;

1.1.1.7
date	2009.10.12.18.11.15;	author millert;	state Exp;
branches;
next	;


desc
@@


1.10
log
@remove files no longer in perl 5.12.2 (or that have moved)
@
text
@#! perl -w

use strict ;
use ExtUtils::MakeMaker 5.16 ;
use Config ;

die "DB_File needs Perl 5.004_05 or better. This is $]\n" 
    if $] <= 5.00404; 

my $VER_INFO ;
my $LIB_DIR ;
my $INC_DIR ;
my $DB_NAME ;
my $LIBS ;
my $COMPAT185 = "" ;

ParseCONFIG() ;

my @@files = ('DB_File.pm', glob "t/*.t") ;
UpDowngrade(@@files);

if (defined $DB_NAME)
  { $LIBS = $DB_NAME }
else {
    if ($^O eq 'MSWin32')
      { $LIBS = $Config{cc} =~ /gcc/ ? '-ldb' : '-llibdb' }
    else
      { $LIBS = '-ldb' }
}

# Solaris is special.
#$LIBS .= " -lthread" if $^O eq 'solaris' ;

# AIX is special.
$LIBS .= " -lpthread" if $^O eq 'aix' ;

# OS2 is a special case, so check for it now.
my $OS2 = "" ;
$OS2 = "-DOS2" if $Config{'osname'} eq 'os2' ;

my $WALL = '' ;
#$WALL = ' -Wall ';

WriteMakefile(
	NAME 		=> 'DB_File',
	LIBS 		=> ["-L${LIB_DIR} $LIBS"],
	INC		=> "-I$INC_DIR",
    VERSION_FROM	=> 'DB_File.pm',
	XS_VERSION      => eval MM->parse_version('DB_File.pm'),
	XSPROTOARG	=> '-noprototypes',
	DEFINE		=> "-D_NOT_CORE $OS2 $VER_INFO $COMPAT185 $WALL",
	OBJECT		=> 'version$(OBJ_EXT) DB_File$(OBJ_EXT)',
    ((ExtUtils::MakeMaker->VERSION() gt '6.30') 
        ?  ('LICENSE'  => 'perl')         
        : ()
    ),
    (
    $] >= 5.005
        ? (ABSTRACT_FROM => 'DB_File.pm',
            AUTHOR       => 'Paul Marquess <pmqs@@cpan.org>')
        : ()
    ),
    

	#OPTIMIZE	=> '-g',
	'depend'	=> { 'Makefile'          => 'config.in',
                             'version$(OBJ_EXT)' => 'version.c'},
	'clean'		=> { FILES => 'constants.h constants.xs' },
	'macro'		=> { INSTALLDIRS => 'perl', my_files => "@@files" },
        'dist'          => { COMPRESS => 'gzip', SUFFIX => 'gz',
			     DIST_DEFAULT => 'MyDoubleCheck tardist'},    
	);


my @@names = qw(
	BTREEMAGIC
	BTREEVERSION
	DB_LOCK
	DB_SHMEM
	DB_TXN
	HASHMAGIC
	HASHVERSION
	MAX_PAGE_NUMBER
	MAX_PAGE_OFFSET
	MAX_REC_NUMBER
	RET_ERROR
	RET_SPECIAL
	RET_SUCCESS
	R_CURSOR
	R_DUP
	R_FIRST
	R_FIXEDLEN
	R_IAFTER
	R_IBEFORE
	R_LAST
	R_NEXT
	R_NOKEY
	R_NOOVERWRITE
	R_PREV
	R_RECNOSYNC
	R_SETCURSOR
	R_SNAPSHOT
	__R_UNUSED
	);

if (eval {require ExtUtils::Constant; 1}) {
    # Check the constants above all appear in @@EXPORT in DB_File.pm
    my %names = map { $_, 1} @@names;
    open F, "<DB_File.pm" or die "Cannot open DB_File.pm: $!\n";
    while (<F>)
    {
        last if /^\s*\@@EXPORT\s+=\s+qw\(/ ;
    }

    while (<F>)
    {
        last if /^\s*\)/ ;
        /(\S+)/ ;
        delete $names{$1} if defined $1 ;
    }
    close F ;

    if ( keys %names )
    {
        my $missing = join ("\n\t", sort keys %names) ;
        die "The following names are missing from \@@EXPORT in DB_File.pm\n" .
            "\t$missing\n" ;
    }
    

    ExtUtils::Constant::WriteConstants(
                                     NAME => 'DB_File',
                                     NAMES => \@@names,
                                     C_FILE  => 'constants.h',
                                     XS_FILE  => 'constants.xs',
                                                                       
                                    );
} 
else {
    use File::Copy;
    copy ('fallback.h', 'constants.h')
      or die "Can't copy fallback.h to constants.h: $!";
    copy ('fallback.xs', 'constants.xs')
      or die "Can't copy fallback.xs to constants.xs: $!";
}

exit;


sub MY::libscan
{
    my $self = shift ;
    my $path = shift ;

    return undef
        if $path =~ /(~|\.bak)$/ || 
           $path =~ /^\..*\.swp$/ ;

    return $path;    
}


sub MY::postamble { <<'EOM' } ;

MyDoubleCheck:
	@@echo Checking config.in is setup for a release
	@@(grep "^LIB.*/usr/local/BerkeleyDB" config.in && 	\
	grep "^INCLUDE.*/usr/local/BerkeleyDB" config.in &&	\
	grep "^#DBNAME.*" config.in) >/dev/null ||		\
	    (echo config.in needs fixing ; exit 1)
	@@echo config.in is ok
	@@echo 
	@@echo Checking DB_File.xs is ok for a release.
	@@(perl -ne ' exit 1 if /^\s*#\s*define\s+TRACE/ ; ' DB_File.xs || \
	    (echo DB_File.xs needs fixing ; exit 1))
	@@echo DB_File.xs is ok
	@@echo 
	@@echo Checking for $$^W in files: $(my_files)
	@@perl -ne '						\
	    exit 1 if /^\s*local\s*\(\s*\$$\^W\s*\)/;' $(my_files) ||	\
	  (echo found unexpected $$^W ; exit 1)
	@@echo No $$^W found.
	@@echo 
	@@echo Checking for 'use vars' in files: $(my_files)
	@@perl -ne '						\
	    exit 0 if /^__(DATA|END)__/;               	\
	    exit 1 if /^\s*use\s+vars/;' $(my_files) ||	\
	  (echo found unexpected "use vars"; exit 1)
	@@echo No 'use vars' found.
	@@echo 
	@@echo All files are OK for a release.
	@@echo 

EOM



sub ParseCONFIG
{
    my ($k, $v) ;
    my @@badkey = () ;
    my %Info = () ;
    my @@Options = qw( INCLUDE LIB PREFIX HASH DBNAME COMPAT185 ) ;
    my %ValidOption = map {$_, 1} @@Options ;
    my %Parsed = %ValidOption ;
    my $CONFIG = 'config.in' ;

    print "Parsing $CONFIG...\n" ;

    # DBNAME & COMPAT185 are optional, so pretend they  have 
    # been parsed.
    delete $Parsed{'DBNAME'} ;
    delete $Parsed{'COMPAT185'} ;
    $Info{COMPAT185} = "No" ;


    open(F, "$CONFIG") or die "Cannot open file $CONFIG: $!\n" ;
    while (<F>) {
	s/^\s*|\s*$//g ;
	next if /^\s*$/ or /^\s*#/ ;
	s/\s*#\s*$// ;

	($k, $v) = split(/\s+=\s+/, $_, 2) ;
	$k = uc $k ;
	if ($ValidOption{$k}) {
	    delete $Parsed{$k} ;
	    $Info{$k} = $v ;
	}
	else {
	    push(@@badkey, $k) ;
	}
    }
    close F ;

    print "Unknown keys in $CONFIG ignored [@@badkey]\n"
	if @@badkey ;

    # check parsed values
    my @@missing = () ;
    die "The following keys are missing from $CONFIG file: [@@missing]\n" 
        if @@missing = keys %Parsed ;

    $INC_DIR = $ENV{'DB_FILE_INCLUDE'} || $Info{'INCLUDE'} ;
    $LIB_DIR = $ENV{'DB_FILE_LIB'} || $Info{'LIB'} ;
    $DB_NAME = $ENV{'DB_FILE_NAME'} || $Info{'DBNAME'} ;
    $COMPAT185 = "-DCOMPAT185 -DDB_LIBRARY_COMPATIBILITY_API" 
        if (defined $ENV{'DB_FILE_COMPAT185'} && 
		$ENV{'DB_FILE_COMPAT185'} =~ /^\s*(on|true|1)\s*$/i) ||
		$Info{'COMPAT185'} =~ /^\s*(on|true|1)\s*$/i ; 
    my $PREFIX  = $Info{'PREFIX'} ;
    my $HASH    = $Info{'HASH'} ;

    $VER_INFO = "-DmDB_Prefix_t=${PREFIX} -DmDB_Hash_t=${HASH}" ;

    print <<EOM if 0 ;
    INCLUDE	[$INC_DIR]
    LIB		[$LIB_DIR]
    HASH	[$HASH]
    PREFIX	[$PREFIX]
    DBNAME      [$DB_NAME]

EOM

    print "Looks Good.\n" ;

}

sub UpDowngrade
{
    my @@files = @@_ ;

    # our      is stable from 5.6.0 onward
    # warnings is stable from 5.6.1 onward

    # Note: this code assumes that each statement it modifies is not
    #       split across multiple lines.


    my $warn_sub ;
    my $our_sub ;

    if ($] < 5.006001) {
        # From: use|no warnings "blah"
        # To:   local ($^W) = 1; # use|no warnings "blah"
        #
        # and
        #
        # From: warnings::warnif(x,y);
        # To:   $^W && carp(y); # warnif -- x
        $warn_sub = sub {
	    s/^(\s*)(no\s+warnings)/${1}local (\$^W) = 0; #$2/ ;
	    s/^(\s*)(use\s+warnings)/${1}local (\$^W) = 1; #$2/ ;

	    s/^(\s*)warnings::warnif\s*\((.*?)\s*,\s*(.*?)\)\s*;/${1}\$^W && carp($3); # warnif - $2/ ;
          };
    }
    else {
        # From: local ($^W) = 1; # use|no warnings "blah"
        # To:   use|no warnings "blah"
        #
        # and
        #
        # From: $^W && carp(y); # warnif -- x
        # To:   warnings::warnif(x,y);
        $warn_sub = sub {
	    s/^(\s*)local\s*\(\$\^W\)\s*=\s*\d+\s*;\s*#\s*((no|use)\s+warnings.*)/$1$2/ ;
	    s/^(\s*)\$\^W\s+\&\&\s*carp\s*\((.*?)\)\s*;\s*#\s*warnif\s*-\s*(.*)/${1}warnings::warnif($3, $2);/ ;
          };
    }

    if ($] < 5.006000) {
        $our_sub = sub {
	    if ( /^(\s*)our\s+\(\s*([^)]+\s*)\)/ ) {
                my $indent = $1;
                my $vars = join ' ', split /\s*,\s*/, $2;
                $_ = "${indent}use vars qw($vars);\n";
            }
          };
    }
    else {
        $our_sub = sub {
	    if ( /^(\s*)use\s+vars\s+qw\((.*?)\)/ ) {
                my $indent = $1;
                my $vars = join ', ', split ' ', $2;
                $_ = "${indent}our ($vars);\n";
            }
          };
    }

    foreach (@@files)
      { doUpDown($our_sub, $warn_sub, $_) }
}


sub doUpDown
{
    my $our_sub = shift;
    my $warn_sub = shift;

    local ($^I) = ".bak" ;
    local (@@ARGV) = shift;

    while (<>)
    {
	print, last if /^__(END|DATA)__/ ;

	&{ $our_sub }();
	&{ $warn_sub }();
	print ;
    }

    return if eof ;

    while (<>)
      { print }
}

# end of file Makefile.PL
@


1.9
log
@Merge in perl 5.10.1
@
text
@@


1.8
log
@fix conflicts and merge in local changes to perl 5.10.0
@
text
@d1 1
a1 2
use strict;
use warnings;
d3 2
a4 2
use ExtUtils::MakeMaker ;
use ExtUtils::Constant qw(WriteConstants);
d7 30
d38 2
a39 1
my $OS2 = "-DOS2" if $Config{'osname'} eq 'os2' ;
d41 2
a42 3
my $LIB = "-ldb" ;
# so is win32
$LIB = "-llibdb" if $^O eq 'MSWin32' ;
d46 6
a51 4
	#LIBS 		=> ["-L/usr/local/lib $LIB"],
        MAN3PODS        => {},         # Pods will be built by installman.
	#INC		=> '-I/usr/local/include',
	VERSION_FROM	=> 'DB_File.pm',
d53 3
a55 6
	XSPROTOARG	=> '-noprototypes',
	DEFINE		=> $OS2 || "",
	INC		=> ($^O eq "MacOS" ? "-i ::::db:include" : ""),
    ((ExtUtils::MakeMaker->VERSION() gt '6.30')
            ?  ('LICENSE'  => 'perl')
            : ()
d58 4
a61 4
        $] >= 5.005
            ? (ABSTRACT_FROM => 'DB_File.pm',
                AUTHOR       => 'Paul Marquess <pmqs@@cpan.org>')
            : ()
d63 1
d65 7
a71 2
	'depend'	=> {'version$(OBJ_EXT)' => 'version.c'},
	'clean'		=> {FILES => 'constants.h constants.xs'},
d74 1
d106 1
d131 228
a358 5
    WriteConstants( NAME => 'DB_File',
                    NAMES => \@@names,
                    C_FILE  => 'constants.h',
                    XS_FILE  => 'constants.xs',
                  );
@


1.7
log
@sync in-tree perl with 5.8.6
@
text
@d25 11
@


1.6
log
@Resolve conflicts, remove old files, merge local changes
@
text
@d17 1
a17 1
	LIBS 		=> ["-L/usr/local/lib $LIB"],
@


1.5
log
@merge in perl 5.6.1 with our local changes
@
text
@d1 5
a5 1
use ExtUtils::MakeMaker 5.16 ;
d24 3
a26 1
	INC => ($^O eq "MacOS" ? "-i ::::db:include" : "")
d29 30
a58 6
sub MY::postamble {
      '
version$(OBJ_EXT):	version.c

' ;
}
d60 29
@


1.4
log
@perl-5.6.0 + local changes
@
text
@d20 1
@


1.3
log
@perl5.005_03 (stock)
@
text
@d17 1
d19 1
a19 1
	DEFINE		=> "$OS2",
d21 7
@


1.2
log
@perl 5.004_04
@
text
@d7 4
d13 2
a14 2
	LIBS 		=> ["-L/usr/local/lib -ldb"],
        MAN3PODS        => ' ',         # Pods will be built by installman.
@


1.1
log
@Initial revision
@
text
@d1 5
a5 1
use ExtUtils::MakeMaker;
d8 4
a11 4
	NAME 	=> 'DB_File',
	LIBS 	=> ["-L/usr/local/lib -ldb"],
	MAN3PODS 	=> ' ', 	# Pods will be built by installman.
	#INC	=> '-I/usr/local/include',
d13 3
a15 2
	XSPROTOARG => '-noprototypes', 		# XXX remove later?
);
@


1.1.1.1
log
@Import of Perl 5.003 into the tree.  Makefile.bsd-wrapper and
config.sh.OpenBSD are the only local changes.
@
text
@@


1.1.1.2
log
@perl5.005_03
@
text
@d1 1
a1 9
use ExtUtils::MakeMaker 5.16 ;
use Config ;

# OS2 is a special case, so check for it now.
my $OS2 = "-DOS2" if $Config{'osname'} eq 'os2' ;

my $LIB = "-ldb" ;
# so is win32
$LIB = "-llibdb" if $^O eq 'MSWin32' ;
d4 4
a7 4
	NAME 		=> 'DB_File',
	LIBS 		=> ["-L/usr/local/lib $LIB"],
        MAN3PODS        => {},         # Pods will be built by installman.
	#INC		=> '-I/usr/local/include',
d9 2
a10 3
	XSPROTOARG	=> '-noprototypes',
	DEFINE		=> "$OS2",
	);
@


1.1.1.3
log
@virgin perl 5.6.0
@
text
@a16 1
	OBJECT		=> 'version$(OBJ_EXT) DB_File$(OBJ_EXT)',
d18 1
a18 1
	DEFINE		=> $OS2 || "",
a19 7

sub MY::postamble {
      '
version$(OBJ_EXT):	version.c

' ;
}
@


1.1.1.4
log
@stock perl 5.6.1
@
text
@a19 1
	INC => ($^O eq "MacOS" ? "-i ::::db:include" : "")
@


1.1.1.5
log
@stock perl 5.8.0 from CPAN
@
text
@d1 1
a1 5
use strict;
use warnings;

use ExtUtils::MakeMaker ;
use ExtUtils::Constant qw(WriteConstants);
d20 1
a20 3
	INC		=> ($^O eq "MacOS" ? "-i ::::db:include" : ""),
	'depend'	=> {'version$(OBJ_EXT)' => 'version.c'},
	'clean'		=> {FILES => 'constants.h constants.xs'},
d23 6
a28 30
my @@names = qw(
	BTREEMAGIC
	BTREEVERSION
	DB_LOCK
	DB_SHMEM
	DB_TXN
	HASHMAGIC
	HASHVERSION
	MAX_PAGE_NUMBER
	MAX_PAGE_OFFSET
	MAX_REC_NUMBER
	RET_ERROR
	RET_SPECIAL
	RET_SUCCESS
	R_CURSOR
	R_DUP
	R_FIRST
	R_FIXEDLEN
	R_IAFTER
	R_IBEFORE
	R_LAST
	R_NEXT
	R_NOKEY
	R_NOOVERWRITE
	R_PREV
	R_RECNOSYNC
	R_SETCURSOR
	R_SNAPSHOT
	__R_UNUSED
	);
a29 29
    # Check the constants above all appear in @@EXPORT in DB_File.pm
    my %names = map { $_, 1} @@names;
    open F, "<DB_File.pm" or die "Cannot open DB_File.pm: $!\n";
    while (<F>)
    {
        last if /^\s*\@@EXPORT\s+=\s+qw\(/ ;
    }

    while (<F>)
    {
        last if /^\s*\)/ ;
        /(\S+)/ ;
        delete $names{$1} if defined $1 ;
    }
    close F ;

    if ( keys %names )
    {
        my $missing = join ("\n\t", sort keys %names) ;
        die "The following names are missing from \@@EXPORT in DB_File.pm\n" .
            "\t$missing\n" ;
    }
    

    WriteConstants( NAME => 'DB_File',
                    NAMES => \@@names,
                    C_FILE  => 'constants.h',
                    XS_FILE  => 'constants.xs',
                  );
@


1.1.1.6
log
@import perl 5.10.0 from CPAN
@
text
@a24 11
    ((ExtUtils::MakeMaker->VERSION() gt '6.30')
            ?  ('LICENSE'  => 'perl')
            : ()
    ),
    (
        $] >= 5.005
            ? (ABSTRACT_FROM => 'DB_File.pm',
                AUTHOR       => 'Paul Marquess <pmqs@@cpan.org>')
            : ()
    ),

@


1.1.1.7
log
@import perl 5.10.1
@
text
@d1 2
a2 1
#! perl -w
d4 2
a5 2
use strict ;
use ExtUtils::MakeMaker 5.16 ;
a7 30
die "DB_File needs Perl 5.004_05 or better. This is $]\n" 
    if $] <= 5.00404; 

my $VER_INFO ;
my $LIB_DIR ;
my $INC_DIR ;
my $DB_NAME ;
my $LIBS ;
my $COMPAT185 = "" ;

ParseCONFIG() ;

my @@files = ('DB_File.pm', glob "t/*.t") ;
UpDowngrade(@@files);

if (defined $DB_NAME)
  { $LIBS = $DB_NAME }
else {
    if ($^O eq 'MSWin32')
      { $LIBS = $Config{cc} =~ /gcc/ ? '-ldb' : '-llibdb' }
    else
      { $LIBS = '-ldb' }
}

# Solaris is special.
#$LIBS .= " -lthread" if $^O eq 'solaris' ;

# AIX is special.
$LIBS .= " -lpthread" if $^O eq 'aix' ;

d9 1
a9 2
my $OS2 = "" ;
$OS2 = "-DOS2" if $Config{'osname'} eq 'os2' ;
d11 3
a13 2
my $WALL = '' ;
#$WALL = ' -Wall ';
d17 5
a21 4
	LIBS 		=> ["-L${LIB_DIR} $LIBS"],
	INC		=> "-I$INC_DIR",
    VERSION_FROM	=> 'DB_File.pm',
	XS_VERSION      => eval MM->parse_version('DB_File.pm'),
d23 5
a27 5
	DEFINE		=> "-D_NOT_CORE $OS2 $VER_INFO $COMPAT185 $WALL",
	OBJECT		=> 'version$(OBJ_EXT) DB_File$(OBJ_EXT)',
    ((ExtUtils::MakeMaker->VERSION() gt '6.30') 
        ?  ('LICENSE'  => 'perl')         
        : ()
d30 4
a33 4
    $] >= 5.005
        ? (ABSTRACT_FROM => 'DB_File.pm',
            AUTHOR       => 'Paul Marquess <pmqs@@cpan.org>')
        : ()
a34 1
    
d36 2
a37 7
	#OPTIMIZE	=> '-g',
	'depend'	=> { 'Makefile'          => 'config.in',
                             'version$(OBJ_EXT)' => 'version.c'},
	'clean'		=> { FILES => 'constants.h constants.xs' },
	'macro'		=> { INSTALLDIRS => 'perl', my_files => "@@files" },
        'dist'          => { COMPRESS => 'gzip', SUFFIX => 'gz',
			     DIST_DEFAULT => 'MyDoubleCheck tardist'},    
a39 1

a70 1
if (eval {require ExtUtils::Constant; 1}) {
d95 5
a99 228
    ExtUtils::Constant::WriteConstants(
                                     NAME => 'DB_File',
                                     NAMES => \@@names,
                                     C_FILE  => 'constants.h',
                                     XS_FILE  => 'constants.xs',
                                                                       
                                    );
} 
else {
    use File::Copy;
    copy ('fallback.h', 'constants.h')
      or die "Can't copy fallback.h to constants.h: $!";
    copy ('fallback.xs', 'constants.xs')
      or die "Can't copy fallback.xs to constants.xs: $!";
}

exit;


sub MY::libscan
{
    my $self = shift ;
    my $path = shift ;

    return undef
        if $path =~ /(~|\.bak)$/ || 
           $path =~ /^\..*\.swp$/ ;

    return $path;    
}


sub MY::postamble { <<'EOM' } ;

MyDoubleCheck:
	@@echo Checking config.in is setup for a release
	@@(grep "^LIB.*/usr/local/BerkeleyDB" config.in && 	\
	grep "^INCLUDE.*/usr/local/BerkeleyDB" config.in &&	\
	grep "^#DBNAME.*" config.in) >/dev/null ||		\
	    (echo config.in needs fixing ; exit 1)
	@@echo config.in is ok
	@@echo 
	@@echo Checking DB_File.xs is ok for a release.
	@@(perl -ne ' exit 1 if /^\s*#\s*define\s+TRACE/ ; ' DB_File.xs || \
	    (echo DB_File.xs needs fixing ; exit 1))
	@@echo DB_File.xs is ok
	@@echo 
	@@echo Checking for $$^W in files: $(my_files)
	@@perl -ne '						\
	    exit 1 if /^\s*local\s*\(\s*\$$\^W\s*\)/;' $(my_files) ||	\
	  (echo found unexpected $$^W ; exit 1)
	@@echo No $$^W found.
	@@echo 
	@@echo Checking for 'use vars' in files: $(my_files)
	@@perl -ne '						\
	    exit 0 if /^__(DATA|END)__/;               	\
	    exit 1 if /^\s*use\s+vars/;' $(my_files) ||	\
	  (echo found unexpected "use vars"; exit 1)
	@@echo No 'use vars' found.
	@@echo 
	@@echo All files are OK for a release.
	@@echo 

EOM



sub ParseCONFIG
{
    my ($k, $v) ;
    my @@badkey = () ;
    my %Info = () ;
    my @@Options = qw( INCLUDE LIB PREFIX HASH DBNAME COMPAT185 ) ;
    my %ValidOption = map {$_, 1} @@Options ;
    my %Parsed = %ValidOption ;
    my $CONFIG = 'config.in' ;

    print "Parsing $CONFIG...\n" ;

    # DBNAME & COMPAT185 are optional, so pretend they  have 
    # been parsed.
    delete $Parsed{'DBNAME'} ;
    delete $Parsed{'COMPAT185'} ;
    $Info{COMPAT185} = "No" ;


    open(F, "$CONFIG") or die "Cannot open file $CONFIG: $!\n" ;
    while (<F>) {
	s/^\s*|\s*$//g ;
	next if /^\s*$/ or /^\s*#/ ;
	s/\s*#\s*$// ;

	($k, $v) = split(/\s+=\s+/, $_, 2) ;
	$k = uc $k ;
	if ($ValidOption{$k}) {
	    delete $Parsed{$k} ;
	    $Info{$k} = $v ;
	}
	else {
	    push(@@badkey, $k) ;
	}
    }
    close F ;

    print "Unknown keys in $CONFIG ignored [@@badkey]\n"
	if @@badkey ;

    # check parsed values
    my @@missing = () ;
    die "The following keys are missing from $CONFIG file: [@@missing]\n" 
        if @@missing = keys %Parsed ;

    $INC_DIR = $ENV{'DB_FILE_INCLUDE'} || $Info{'INCLUDE'} ;
    $LIB_DIR = $ENV{'DB_FILE_LIB'} || $Info{'LIB'} ;
    $DB_NAME = $ENV{'DB_FILE_NAME'} || $Info{'DBNAME'} ;
    $COMPAT185 = "-DCOMPAT185 -DDB_LIBRARY_COMPATIBILITY_API" 
        if (defined $ENV{'DB_FILE_COMPAT185'} && 
		$ENV{'DB_FILE_COMPAT185'} =~ /^\s*(on|true|1)\s*$/i) ||
		$Info{'COMPAT185'} =~ /^\s*(on|true|1)\s*$/i ; 
    my $PREFIX  = $Info{'PREFIX'} ;
    my $HASH    = $Info{'HASH'} ;

    $VER_INFO = "-DmDB_Prefix_t=${PREFIX} -DmDB_Hash_t=${HASH}" ;

    print <<EOM if 0 ;
    INCLUDE	[$INC_DIR]
    LIB		[$LIB_DIR]
    HASH	[$HASH]
    PREFIX	[$PREFIX]
    DBNAME      [$DB_NAME]

EOM

    print "Looks Good.\n" ;

}

sub UpDowngrade
{
    my @@files = @@_ ;

    # our      is stable from 5.6.0 onward
    # warnings is stable from 5.6.1 onward

    # Note: this code assumes that each statement it modifies is not
    #       split across multiple lines.


    my $warn_sub ;
    my $our_sub ;

    if ($] < 5.006001) {
        # From: use|no warnings "blah"
        # To:   local ($^W) = 1; # use|no warnings "blah"
        #
        # and
        #
        # From: warnings::warnif(x,y);
        # To:   $^W && carp(y); # warnif -- x
        $warn_sub = sub {
	    s/^(\s*)(no\s+warnings)/${1}local (\$^W) = 0; #$2/ ;
	    s/^(\s*)(use\s+warnings)/${1}local (\$^W) = 1; #$2/ ;

	    s/^(\s*)warnings::warnif\s*\((.*?)\s*,\s*(.*?)\)\s*;/${1}\$^W && carp($3); # warnif - $2/ ;
          };
    }
    else {
        # From: local ($^W) = 1; # use|no warnings "blah"
        # To:   use|no warnings "blah"
        #
        # and
        #
        # From: $^W && carp(y); # warnif -- x
        # To:   warnings::warnif(x,y);
        $warn_sub = sub {
	    s/^(\s*)local\s*\(\$\^W\)\s*=\s*\d+\s*;\s*#\s*((no|use)\s+warnings.*)/$1$2/ ;
	    s/^(\s*)\$\^W\s+\&\&\s*carp\s*\((.*?)\)\s*;\s*#\s*warnif\s*-\s*(.*)/${1}warnings::warnif($3, $2);/ ;
          };
    }

    if ($] < 5.006000) {
        $our_sub = sub {
	    if ( /^(\s*)our\s+\(\s*([^)]+\s*)\)/ ) {
                my $indent = $1;
                my $vars = join ' ', split /\s*,\s*/, $2;
                $_ = "${indent}use vars qw($vars);\n";
            }
          };
    }
    else {
        $our_sub = sub {
	    if ( /^(\s*)use\s+vars\s+qw\((.*?)\)/ ) {
                my $indent = $1;
                my $vars = join ', ', split ' ', $2;
                $_ = "${indent}our ($vars);\n";
            }
          };
    }

    foreach (@@files)
      { doUpDown($our_sub, $warn_sub, $_) }
}


sub doUpDown
{
    my $our_sub = shift;
    my $warn_sub = shift;

    local ($^I) = ".bak" ;
    local (@@ARGV) = shift;

    while (<>)
    {
	print, last if /^__(END|DATA)__/ ;

	&{ $our_sub }();
	&{ $warn_sub }();
	print ;
    }

    return if eof ;

    while (<>)
      { print }
}

# end of file Makefile.PL
@


