head	1.2;
access;
symbols
	OPENBSD_4_8:1.1.1.6.0.4
	OPENBSD_4_8_BASE:1.1.1.6
	OPENBSD_4_7:1.1.1.6.0.2
	OPENBSD_4_7_BASE:1.1.1.6
	PERL_5_10_1:1.1.1.6
	OPENBSD_4_6:1.1.1.5.0.26
	OPENBSD_4_6_BASE:1.1.1.5
	OPENBSD_4_5:1.1.1.5.0.22
	OPENBSD_4_5_BASE:1.1.1.5
	PERL_5_10_0:1.1.1.5
	OPENBSD_4_4:1.1.1.5.0.20
	OPENBSD_4_4_BASE:1.1.1.5
	OPENBSD_4_3:1.1.1.5.0.18
	OPENBSD_4_3_BASE:1.1.1.5
	OPENBSD_4_2:1.1.1.5.0.16
	OPENBSD_4_2_BASE:1.1.1.5
	OPENBSD_4_1:1.1.1.5.0.14
	OPENBSD_4_1_BASE:1.1.1.5
	OPENBSD_4_0:1.1.1.5.0.12
	OPENBSD_4_0_BASE:1.1.1.5
	PERL_5_8_8:1.1.1.5
	OPENBSD_3_9:1.1.1.5.0.10
	OPENBSD_3_9_BASE:1.1.1.5
	OPENBSD_3_8:1.1.1.5.0.8
	OPENBSD_3_8_BASE:1.1.1.5
	OPENBSD_3_7:1.1.1.5.0.6
	OPENBSD_3_7_BASE:1.1.1.5
	PERL_5_8_6:1.1.1.5
	OPENBSD_3_6:1.1.1.5.0.4
	OPENBSD_3_6_BASE:1.1.1.5
	PERL_5_8_5:1.1.1.5
	PERL_5_8_3:1.1.1.5
	OPENBSD_3_5:1.1.1.5.0.2
	OPENBSD_3_5_BASE:1.1.1.5
	PERL_5_8_2:1.1.1.5
	OPENBSD_3_4:1.1.1.4.0.4
	OPENBSD_3_4_BASE:1.1.1.4
	OPENBSD_3_3:1.1.1.4.0.2
	OPENBSD_3_3_BASE:1.1.1.4
	PERL_5_8_0:1.1.1.4
	OPENBSD_3_2:1.1.1.3.0.6
	OPENBSD_3_2_BASE:1.1.1.3
	OPENBSD_3_1:1.1.1.3.0.4
	OPENBSD_3_1_BASE:1.1.1.3
	OPENBSD_3_0:1.1.1.3.0.2
	OPENBSD_3_0_BASE:1.1.1.3
	PERL_5_6_1:1.1.1.3
	OPENBSD_2_9:1.1.1.2.0.6
	OPENBSD_2_9_BASE:1.1.1.2
	OPENBSD_2_8:1.1.1.2.0.4
	OPENBSD_2_8_BASE:1.1.1.2
	OPENBSD_2_7:1.1.1.2.0.2
	OPENBSD_2_7_BASE:1.1.1.2
	PERL_5_6_0:1.1.1.2
	OPENBSD_2_6:1.1.1.1.0.2
	OPENBSD_2_6_BASE:1.1.1.1
	PERL_500503:1.1.1.1
	CPAN:1.1.1;
locks; strict;
comment	@# @;


1.2
date	2010.09.24.14.59.15;	author millert;	state dead;
branches;
next	1.1;

1.1
date	99.04.29.22.38.40;	author millert;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	99.04.29.22.38.40;	author millert;	state Exp;
branches;
next	1.1.1.2;

1.1.1.2
date	2000.04.06.16.09.05;	author millert;	state Exp;
branches;
next	1.1.1.3;

1.1.1.3
date	2001.05.24.18.22.43;	author millert;	state Exp;
branches;
next	1.1.1.4;

1.1.1.4
date	2002.10.27.22.14.53;	author millert;	state Exp;
branches;
next	1.1.1.5;

1.1.1.5
date	2003.12.03.02.43.42;	author millert;	state Exp;
branches;
next	1.1.1.6;

1.1.1.6
date	2009.10.12.18.11.15;	author millert;	state Exp;
branches;
next	;


desc
@@


1.2
log
@remove files no longer in perl 5.12.2 (or that have moved)
@
text
@#!/usr/local/bin/perl

# Name:		dbinfo -- identify berkeley DB version used to create 
#			  a database file
#
# Author:	Paul Marquess  <Paul.Marquess@@btinternet.com>
# Version: 	1.01 
# Date		16th April 1998
#
#     Copyright (c) 1998 Paul Marquess. All rights reserved.
#     This program is free software; you can redistribute it and/or
#     modify it under the same terms as Perl itself.

# Todo: Print more stats on a db file, e.g. no of records
#       add log/txn/lock files

use strict ;

my %Data =
	(
	0x053162 =>	{
			  Type 	=> "Btree",
			  Versions => 
				{
				  1	=> "Unknown (older than 1.71)",
				  2	=> "Unknown (older than 1.71)",
				  3	=> "1.71 -> 1.85, 1.86",
				  4	=> "Unknown",
				  5	=> "2.0.0 -> 2.3.0",
				  6	=> "2.3.1 or greater",
				}
			},
	0x061561 => 	{
			  Type => "Hash",
			  Versions =>
				{
				  1	=> "Unknown (older than 1.71)",
        			  2     => "1.71 -> 1.85",
        			  3     => "1.86",
        			  4     => "2.0.0 -> 2.1.0",
        			  5     => "2.2.6 or greater",
				}
			},
	) ;

die "Usage: dbinfo file\n" unless @@ARGV == 1 ;

print "testing file $ARGV[0]...\n\n" ;
open (F, "<$ARGV[0]") or die "Cannot open file $ARGV[0]: $!\n" ;

my $buff ;
read F, $buff, 20 ;

my (@@info) = unpack("NNNNN", $buff) ;
my (@@info1) = unpack("VVVVV", $buff) ;
my ($magic, $version, $endian) ;

if ($Data{$info[0]}) # first try DB 1.x format
{
    $magic = $info[0] ;
    $version = $info[1] ;
    $endian  = "Unknown" ;
}
elsif ($Data{$info[3]}) # next DB 2.x big endian
{
    $magic = $info[3] ;
    $version = $info[4] ;
    $endian  = "Big Endian" ;
}
elsif ($Data{$info1[3]}) # next DB 2.x little endian
{
    $magic = $info1[3] ;
    $version = $info1[4] ;
    $endian  = "Little Endian" ;
}
else
  { die "not a Berkeley DB database file.\n" }

my $type = $Data{$magic} ;
my $magic = sprintf "%06X", $magic ;

my $ver_string = "Unknown" ;
$ver_string = $type->{Versions}{$version}
	if defined $type->{Versions}{$version} ;

print <<EOM ;
File Type:		Berkeley DB $type->{Type} file.
File Version ID:	$version
Built with Berkeley DB:	$ver_string
Byte Order:		$endian
Magic:			$magic
EOM

close F ;

exit ;
@


1.1
log
@Initial revision
@
text
@@


1.1.1.1
log
@perl5.005_03
@
text
@@


1.1.1.2
log
@virgin perl 5.6.0
@
text
@d7 2
a8 2
# Version: 	1.02 
# Date		20th August 1999
d22 1
a22 1
			  Type 	   => "Btree",
d30 1
a30 2
				  6	=> "2.3.1 -> 2.7.7",
				  7	=> "3.0.0 or greater",
d34 1
a34 1
			  Type     => "Hash",
d41 1
a41 9
        			  5     => "2.2.6 -> 2.7.7",
        			  6     => "3.0.0 or greater",
				}
			},
	0x042253 => 	{
			  Type     => "Queue",
			  Versions =>
				{
				  1	=> "3.0.0 or greater",
@


1.1.1.3
log
@stock perl 5.6.1
@
text
@d7 2
a8 2
# Version: 	1.03 
# Date		17th September 2000
d10 1
a10 1
#     Copyright (c) 1998-2000 Paul Marquess. All rights reserved.
d31 1
a31 2
				  7	=> "3.0.x",
				  8	=> "3.1.x or greater",
d43 1
a43 2
        			  6     => "3.0.x",
        			  7     => "3.1.x or greater",
d50 1
a50 3
				  1	=> "3.0.x",
				  2	=> "3.1.x",
				  3	=> "3.2.x or greater",
d89 1
a89 1
$magic = sprintf "%06X", $magic ;
@


1.1.1.4
log
@stock perl 5.8.0 from CPAN
@
text
@d10 1
a10 1
#     Copyright (c) 1998-2002 Paul Marquess. All rights reserved.
@


1.1.1.5
log
@perl 5.8.2 from CPAN
@
text
@d7 2
a8 2
# Version: 	1.05 
# Date		1sh November 2003
d10 1
a10 1
#     Copyright (c) 1998-2003 Paul Marquess. All rights reserved.
d25 8
a32 9
				  1	=> [0, "Unknown (older than 1.71)"],
				  2	=> [0, "Unknown (older than 1.71)"],
				  3	=> [0, "1.71 -> 1.85, 1.86"],
				  4	=> [0, "Unknown"],
				  5	=> [0, "2.0.0 -> 2.3.0"],
				  6	=> [0, "2.3.1 -> 2.7.7"],
				  7	=> [0, "3.0.x"],
				  8	=> [0, "3.1.x -> 4.0.x"],
				  9	=> [1, "4.1.x or greater"],
d39 7
a45 8
				  1	=> [0, "Unknown (older than 1.71)"],
        			  2     => [0, "1.71 -> 1.85"],
        			  3     => [0, "1.86"],
        			  4     => [0, "2.0.0 -> 2.1.0"],
        			  5     => [0, "2.2.6 -> 2.7.7"],
        			  6     => [0, "3.0.x"],
				  7	=> [0, "3.1.x -> 4.0.x"],
				  8	=> [1, "4.1.x or greater"],
d52 3
a54 4
				  1	=> [0, "3.0.x"],
				  2	=> [0, "3.1.x"],
				  3	=> [0, "3.2.x -> 4.0.x"],
				  4	=> [1, "4.1.x or greater"],
d65 1
a65 1
read F, $buff, 30 ;
d67 3
d71 1
a71 5
my (@@info) = unpack("NNNNNNC", $buff) ;
my (@@info1) = unpack("VVVVVVC", $buff) ;
my ($magic, $version, $endian, $encrypt) ;

if ($Data{$info[0]}) # first try DB 1.x format, big endian
d75 1
a75 9
    $endian  = "Big Endian" ;
    $encrypt = "Not Supported";
}
elsif ($Data{$info1[0]}) # first try DB 1.x format, little endian
{
    $magic = $info1[0] ;
    $version = $info1[1] ;
    $endian  = "Little Endian" ;
    $encrypt = "Not Supported";
d96 2
a97 9

if ( defined $type->{Versions}{$version} )
{
     $ver_string = $type->{Versions}{$version}[1];
     if ($type->{Versions}{$version}[0] )
       { $encrypt = $info[6] ? "Enabled" : "Disabled" }
     else
       { $encrypt = "Not Supported" }
}
a104 1
Encryption:             $encrypt
@


1.1.1.6
log
@import perl 5.10.1
@
text
@d7 2
a8 2
# Version: 	1.06 
# Date		27th March 2008
d10 1
a10 1
#     Copyright (c) 1998-2008 Paul Marquess. All rights reserved.
d21 1
a21 2
	0x053162 =>	# DB_BTREEMAGIC
            {
d23 1
a23 1
			  Versions => # DB_BTREEVERSION
d36 1
a36 2
	0x061561 => 	# DB_HASHMAGIC
            {
d38 1
a38 1
			  Versions => # DB_HASHVERSION
a47 1
				  9	=> [1, "4.6.x or greater"],
d50 1
a50 2
	0x042253 => 	# DB_QAMMAGIC
            {
d52 1
a52 1
			  Versions => # DB_QAMVERSION
@


