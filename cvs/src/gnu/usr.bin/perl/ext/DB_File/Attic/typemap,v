head	1.11;
access;
symbols
	OPENBSD_4_8:1.10.0.4
	OPENBSD_4_8_BASE:1.10
	OPENBSD_4_7:1.10.0.2
	OPENBSD_4_7_BASE:1.10
	PERL_5_10_1:1.1.1.9
	OPENBSD_4_6:1.9.0.16
	OPENBSD_4_6_BASE:1.9
	OPENBSD_4_5:1.9.0.12
	OPENBSD_4_5_BASE:1.9
	PERL_5_10_0:1.1.1.8
	OPENBSD_4_4:1.9.0.10
	OPENBSD_4_4_BASE:1.9
	OPENBSD_4_3:1.9.0.8
	OPENBSD_4_3_BASE:1.9
	OPENBSD_4_2:1.9.0.6
	OPENBSD_4_2_BASE:1.9
	OPENBSD_4_1:1.9.0.4
	OPENBSD_4_1_BASE:1.9
	OPENBSD_4_0:1.9.0.2
	OPENBSD_4_0_BASE:1.9
	PERL_5_8_8:1.1.1.8
	OPENBSD_3_9:1.8.0.8
	OPENBSD_3_9_BASE:1.8
	OPENBSD_3_8:1.8.0.6
	OPENBSD_3_8_BASE:1.8
	OPENBSD_3_7:1.8.0.4
	OPENBSD_3_7_BASE:1.8
	PERL_5_8_6:1.1.1.7
	OPENBSD_3_6:1.8.0.2
	OPENBSD_3_6_BASE:1.8
	PERL_5_8_5:1.1.1.7
	PERL_5_8_3:1.1.1.6
	OPENBSD_3_5:1.6.0.2
	OPENBSD_3_5_BASE:1.6
	PERL_5_8_2:1.1.1.5
	OPENBSD_3_4:1.5.0.10
	OPENBSD_3_4_BASE:1.5
	OPENBSD_3_3:1.5.0.8
	OPENBSD_3_3_BASE:1.5
	PERL_5_8_0:1.1.1.4
	OPENBSD_3_2:1.5.0.6
	OPENBSD_3_2_BASE:1.5
	OPENBSD_3_1:1.5.0.4
	OPENBSD_3_1_BASE:1.5
	OPENBSD_3_0:1.5.0.2
	OPENBSD_3_0_BASE:1.5
	PERL_5_6_1:1.1.1.4
	OPENBSD_2_9:1.4.0.6
	OPENBSD_2_9_BASE:1.4
	OPENBSD_2_8:1.4.0.4
	OPENBSD_2_8_BASE:1.4
	OPENBSD_2_7:1.4.0.2
	OPENBSD_2_7_BASE:1.4
	PERL_5_6_0:1.1.1.3
	OPENBSD_2_6:1.3.0.2
	OPENBSD_2_6_BASE:1.3
	PERL_500503:1.1.1.2
	CPAN:1.1.1
	OPENBSD_2_5:1.2.0.6
	OPENBSD_2_5_BASE:1.2
	OPENBSD_2_4:1.2.0.4
	OPENBSD_2_4_BASE:1.2
	OPENBSD_2_3:1.2.0.2
	OPENBSD_2_3_BASE:1.2
	OPENBSD_2_2:1.1.1.1.0.6
	OPENBSD_2_2_BASE:1.1.1.1
	OPENBSD_2_1:1.1.1.1.0.4
	OPENBSD_2_1_BASE:1.1.1.1
	OPENBSD_2_0:1.1.1.1.0.2
	OPENBSD_2_0_BASE:1.1.1.1
	perl5003:1.1.1.1
	lwall:1.1.1;
locks; strict;
comment	@# @;


1.11
date	2010.09.24.14.59.16;	author millert;	state dead;
branches;
next	1.10;

1.10
date	2009.10.12.18.24.24;	author millert;	state Exp;
branches;
next	1.9;

1.9
date	2006.03.28.19.23.01;	author millert;	state Exp;
branches;
next	1.8;

1.8
date	2004.08.09.18.09.06;	author millert;	state Exp;
branches;
next	1.7;

1.7
date	2004.04.07.21.33.02;	author millert;	state Exp;
branches;
next	1.6;

1.6
date	2003.12.03.03.02.27;	author millert;	state Exp;
branches;
next	1.5;

1.5
date	2001.05.24.18.35.09;	author millert;	state Exp;
branches;
next	1.4;

1.4
date	2000.04.06.17.05.09;	author millert;	state Exp;
branches;
next	1.3;

1.3
date	99.04.29.22.51.25;	author millert;	state Exp;
branches;
next	1.2;

1.2
date	97.11.30.07.55.06;	author millert;	state Exp;
branches;
next	1.1;

1.1
date	96.08.19.10.12.02;	author downsj;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	96.08.19.10.12.02;	author downsj;	state Exp;
branches;
next	1.1.1.2;

1.1.1.2
date	99.04.29.22.38.40;	author millert;	state Exp;
branches;
next	1.1.1.3;

1.1.1.3
date	2000.04.06.16.09.05;	author millert;	state Exp;
branches;
next	1.1.1.4;

1.1.1.4
date	2001.05.24.18.22.43;	author millert;	state Exp;
branches;
next	1.1.1.5;

1.1.1.5
date	2003.12.03.02.43.42;	author millert;	state Exp;
branches;
next	1.1.1.6;

1.1.1.6
date	2004.04.07.21.12.59;	author millert;	state Exp;
branches;
next	1.1.1.7;

1.1.1.7
date	2004.08.09.17.45.55;	author millert;	state Exp;
branches;
next	1.1.1.8;

1.1.1.8
date	2006.03.28.18.47.56;	author millert;	state Exp;
branches;
next	1.1.1.9;

1.1.1.9
date	2009.10.12.18.11.14;	author millert;	state Exp;
branches;
next	;


desc
@@


1.11
log
@remove files no longer in perl 5.12.2 (or that have moved)
@
text
@# typemap for Perl 5 interface to Berkeley 
#
# written by Paul Marquess <Paul.Marquess@@btinternet.com>
# last modified 20th June 2004
# version 1.809
#
#################################### DB SECTION
#
# 

u_int			T_U_INT
DB_File			T_PTROBJ
DBT			T_dbtdatum
DBTKEY			T_dbtkeydatum

INPUT
T_dbtkeydatum
    {
	SV * my_sv = $arg;
	DBM_ckFilter(my_sv, filter_store_key, \"filter_store_key\");
	DBT_clear($var) ;
	SvGETMAGIC(my_sv) ;
        if (db->type == DB_RECNO) {
	    if (SvOK(my_sv))
	        Value = GetRecnoKey(aTHX_ db, SvIV(my_sv)) ; 
            else
	        Value = 1 ;
	    $var.data = & Value; 
	    $var.size = (int)sizeof(recno_t);
        }
        else if (SvOK(my_sv)) {
	    STRLEN len;
	    $var.data = SvPVbyte(my_sv, len);
	    $var.size = (int)len;
	}
    }
T_dbtdatum
    {
	SV * my_sv = $arg;
	DBM_ckFilter(my_sv, filter_store_value, \"filter_store_value\");
	DBT_clear($var) ;
	SvGETMAGIC(my_sv) ;
	if (SvOK(my_sv)) {
	    STRLEN len;
	    $var.data = SvPVbyte(my_sv, len);
	    $var.size = (int)len;
	}
    }

OUTPUT

T_dbtkeydatum
	OutputKey($arg, $var)
T_dbtdatum
	OutputValue($arg, $var)
T_PTROBJ
        sv_setref_pv($arg, dbtype, (void*)$var);
@


1.10
log
@Merge in perl 5.10.1
@
text
@@


1.9
log
@merge in perl 5.8.8
@
text
@d32 3
a34 2
	    $var.data = SvPVbyte(my_sv, PL_na);
	    $var.size = (int)PL_na;
d44 3
a46 2
	    $var.data = SvPVbyte(my_sv, PL_na);
	    $var.size = (int)PL_na;
@


1.8
log
@merge 5.8.5 into HEAD
remove now-unused files
crank libperl shared library major number
update Makefile.bsd-wrapper
tweak openbsd hints file for arm and m68k
@
text
@d18 3
a20 1
	DBM_ckFilter($arg, filter_store_key, \"filter_store_key\");
d22 1
a22 1
	SvGETMAGIC($arg) ;
d24 2
a25 2
	    if (SvOK($arg))
	        Value = GetRecnoKey(aTHX_ db, SvIV($arg)) ; 
d31 2
a32 2
        else if (SvOK($arg)) {
	    $var.data = SvPVbyte($arg, PL_na);
d35 1
d37 3
a39 1
	DBM_ckFilter($arg, filter_store_value, \"filter_store_value\");
d41 3
a43 3
	SvGETMAGIC($arg) ;
	if (SvOK($arg)) {
	    $var.data = SvPVbyte($arg, PL_na);
d46 1
@


1.7
log
@merge local changes into perl-5.8.3
@
text
@d4 2
a5 2
# last modified 10th December 2000
# version 1.74
d20 12
a31 10
	if (SvOK($arg)){
	    if (db->type != DB_RECNO) {
	        $var.data = SvPVbyte($arg, PL_na);
	        $var.size = (int)PL_na;
	    }
	    else {
	        Value =  GetRecnoKey(aTHX_ db, SvIV($arg)) ; 
	        $var.data = & Value; 
	        $var.size = (int)sizeof(recno_t);
	    }
d36 1
@


1.6
log
@Resolve conflicts for perl 5.8.2, remove old files, and add OpenBSD-specific scaffolding
@
text
@d22 1
a22 1
	        $var.data = SvPV($arg, PL_na);
d35 1
a35 1
	    $var.data = SvPV($arg, PL_na);
@


1.5
log
@merge in perl 5.6.1 with our local changes
@
text
@d18 1
a18 1
	ckFilter($arg, filter_store_key, \"filter_store_key\");
d20 10
a29 8
	if (db->type != DB_RECNO) {
	    $var.data = SvPV($arg, PL_na);
	    $var.size = (int)PL_na;
	}
	else {
	    Value =  GetRecnoKey(aTHX_ db, SvIV($arg)) ; 
	    $var.data = & Value; 
	    $var.size = (int)sizeof(recno_t);
d32 1
a32 1
	ckFilter($arg, filter_store_value, \"filter_store_value\");
@


1.4
log
@perl-5.6.0 + local changes
@
text
@d4 2
a5 2
# last modified 7th September 1999
# version 1.71
d32 4
a35 3
	$var.data = SvPV($arg, PL_na);
	$var.size = (int)PL_na;

@


1.3
log
@perl5.005_03 (stock)
@
text
@d4 2
a5 2
# last modified 21st February 1999
# version 1.65
d18 2
a22 1
	    DBT_flags($var);
d25 1
a25 1
	    Value =  GetRecnoKey(db, SvIV($arg)) ; 
a27 1
	    DBT_flags($var);
d30 2
d34 1
a34 1
	DBT_flags($var);
@


1.2
log
@perl 5.004_04
@
text
@d1 1
a1 1
# typemap for Perl 5 interface to Berkeley DB
d3 3
a5 3
# written by Paul Marquess (pmarquess@@bfsec.bt.co.uk)
# last modified 28th June 1996
# version 0.2
d19 3
a21 2
	    $var.data = SvPV($arg, na);
	    $var.size = (int)na;
d27 1
d30 3
a32 2
	$var.data = SvPV($arg, na);
	$var.size = (int)na;
@


1.1
log
@Initial revision
@
text
@d4 2
a5 2
# last modified 23rd June 1994
# version 0.1
d18 1
a18 2
	if (db->type != DB_RECNO)
	{
d22 2
a23 4
	else
	{
	    Value =  SvIV($arg) ; 
	    ++ Value ; 
d37 2
@


1.1.1.1
log
@Import of Perl 5.003 into the tree.  Makefile.bsd-wrapper and
config.sh.OpenBSD are the only local changes.
@
text
@@


1.1.1.2
log
@perl5.005_03
@
text
@d1 1
a1 1
# typemap for Perl 5 interface to Berkeley 
d3 3
a5 3
# written by Paul Marquess <Paul.Marquess@@btinternet.com>
# last modified 21st February 1999
# version 1.65
d18 4
a21 4
	if (db->type != DB_RECNO) {
	    $var.data = SvPV($arg, PL_na);
	    $var.size = (int)PL_na;
	    DBT_flags($var);
d23 4
a26 2
	else {
	    Value =  GetRecnoKey(db, SvIV($arg)) ; 
a28 1
	    DBT_flags($var);
d31 2
a32 3
	$var.data = SvPV($arg, PL_na);
	$var.size = (int)PL_na;
	DBT_flags($var);
a39 2
T_PTROBJ
        sv_setref_pv($arg, dbtype, (void*)$var);
@


1.1.1.3
log
@virgin perl 5.6.0
@
text
@d4 2
a5 2
# last modified 7th September 1999
# version 1.71
a17 2
	ckFilter($arg, filter_store_key, \"filter_store_key\");
	DBT_clear($var) ;
d21 1
d24 1
a24 1
	    Value =  GetRecnoKey(aTHX_ db, SvIV($arg)) ; 
d27 1
a29 2
	ckFilter($arg, filter_store_value, \"filter_store_value\");
	DBT_clear($var) ;
d32 1
a32 1

@


1.1.1.4
log
@stock perl 5.6.1
@
text
@d4 2
a5 2
# last modified 10th December 2000
# version 1.74
d32 3
a34 4
	if (SvOK($arg)) {
	    $var.data = SvPV($arg, PL_na);
	    $var.size = (int)PL_na;
	}
@


1.1.1.5
log
@perl 5.8.2 from CPAN
@
text
@d18 1
a18 1
	DBM_ckFilter($arg, filter_store_key, \"filter_store_key\");
d20 8
a27 10
	if (SvOK($arg)){
	    if (db->type != DB_RECNO) {
	        $var.data = SvPV($arg, PL_na);
	        $var.size = (int)PL_na;
	    }
	    else {
	        Value =  GetRecnoKey(aTHX_ db, SvIV($arg)) ; 
	        $var.data = & Value; 
	        $var.size = (int)sizeof(recno_t);
	    }
d30 1
a30 1
	DBM_ckFilter($arg, filter_store_value, \"filter_store_value\");
@


1.1.1.6
log
@perl 5.8.3 from CPAN
@
text
@d22 1
a22 1
	        $var.data = SvPVbyte($arg, PL_na);
d35 1
a35 1
	    $var.data = SvPVbyte($arg, PL_na);
@


1.1.1.7
log
@Import of stock perl 5.8.5
@
text
@d4 2
a5 2
# last modified 20th June 2004
# version 1.809
d20 10
a29 12
	SvGETMAGIC($arg) ;
        if (db->type == DB_RECNO) {
	    if (SvOK($arg))
	        Value = GetRecnoKey(aTHX_ db, SvIV($arg)) ; 
            else
	        Value = 1 ;
	    $var.data = & Value; 
	    $var.size = (int)sizeof(recno_t);
        }
        else if (SvOK($arg)) {
	    $var.data = SvPVbyte($arg, PL_na);
	    $var.size = (int)PL_na;
a33 1
	SvGETMAGIC($arg) ;
@


1.1.1.8
log
@perl 5.8.8 import
@
text
@d18 1
a18 3
    {
	SV * my_sv = $arg;
	DBM_ckFilter(my_sv, filter_store_key, \"filter_store_key\");
d20 1
a20 1
	SvGETMAGIC(my_sv) ;
d22 2
a23 2
	    if (SvOK(my_sv))
	        Value = GetRecnoKey(aTHX_ db, SvIV(my_sv)) ; 
d29 2
a30 2
        else if (SvOK(my_sv)) {
	    $var.data = SvPVbyte(my_sv, PL_na);
a32 1
    }
d34 1
a34 3
    {
	SV * my_sv = $arg;
	DBM_ckFilter(my_sv, filter_store_value, \"filter_store_value\");
d36 3
a38 3
	SvGETMAGIC(my_sv) ;
	if (SvOK(my_sv)) {
	    $var.data = SvPVbyte(my_sv, PL_na);
a40 1
    }
@


1.1.1.9
log
@import perl 5.10.1
@
text
@d32 2
a33 3
	    STRLEN len;
	    $var.data = SvPVbyte(my_sv, len);
	    $var.size = (int)len;
d43 2
a44 3
	    STRLEN len;
	    $var.data = SvPVbyte(my_sv, len);
	    $var.size = (int)len;
@


