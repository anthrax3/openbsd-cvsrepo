head	1.2;
access;
symbols
	OPENBSD_4_8:1.1.1.4.0.4
	OPENBSD_4_8_BASE:1.1.1.4
	OPENBSD_4_7:1.1.1.4.0.2
	OPENBSD_4_7_BASE:1.1.1.4
	PERL_5_10_1:1.1.1.4
	OPENBSD_4_6:1.1.1.3.0.6
	OPENBSD_4_6_BASE:1.1.1.3
	OPENBSD_4_5:1.1.1.3.0.2
	OPENBSD_4_5_BASE:1.1.1.3
	PERL_5_10_0:1.1.1.3
	OPENBSD_4_4:1.1.1.2.0.10
	OPENBSD_4_4_BASE:1.1.1.2
	OPENBSD_4_3:1.1.1.2.0.8
	OPENBSD_4_3_BASE:1.1.1.2
	OPENBSD_4_2:1.1.1.2.0.6
	OPENBSD_4_2_BASE:1.1.1.2
	OPENBSD_4_1:1.1.1.2.0.4
	OPENBSD_4_1_BASE:1.1.1.2
	OPENBSD_4_0:1.1.1.2.0.2
	OPENBSD_4_0_BASE:1.1.1.2
	PERL_5_8_8:1.1.1.2
	OPENBSD_3_9:1.1.1.1.0.10
	OPENBSD_3_9_BASE:1.1.1.1
	OPENBSD_3_8:1.1.1.1.0.8
	OPENBSD_3_8_BASE:1.1.1.1
	OPENBSD_3_7:1.1.1.1.0.6
	OPENBSD_3_7_BASE:1.1.1.1
	PERL_5_8_6:1.1.1.1
	OPENBSD_3_6:1.1.1.1.0.4
	OPENBSD_3_6_BASE:1.1.1.1
	PERL_5_8_5:1.1.1.1
	PERL_5_8_3:1.1.1.1
	OPENBSD_3_5:1.1.1.1.0.2
	OPENBSD_3_5_BASE:1.1.1.1
	PERL_5_8_2:1.1.1.1
	CPAN:1.1.1;
locks; strict;
comment	@# @;


1.2
date	2010.09.24.14.59.18;	author millert;	state dead;
branches;
next	1.1;

1.1
date	2003.12.03.02.43.43;	author millert;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	2003.12.03.02.43.43;	author millert;	state Exp;
branches;
next	1.1.1.2;

1.1.1.2
date	2006.03.28.18.48.02;	author millert;	state Exp;
branches;
next	1.1.1.3;

1.1.1.3
date	2008.09.29.17.18.16;	author millert;	state Exp;
branches;
next	1.1.1.4;

1.1.1.4
date	2009.10.12.18.11.11;	author millert;	state Exp;
branches;
next	;


desc
@@


1.2
log
@remove files no longer in perl 5.12.2 (or that have moved)
@
text
@#!./perl -w

BEGIN {
    chdir 't' if -d 't';
    @@INC = '../lib';
    require Config; import Config;
    if ($Config{'extensions'} !~ /\bSDBM_File\b/) {
	print "1..0 # Skip: no SDBM_File\n";
	exit 0;
    }
}

use Test;
plan tests => 4;

use XSLoader;
ok(1);
ok( ref XSLoader->can('load') );

eval { XSLoader::load(); };
ok( $@@ =~ /^XSLoader::load\('Your::Module', \$Your::Module::VERSION\)/ );

package SDBM_File;
XSLoader::load('SDBM_File');
::ok( ref SDBM_File->can('TIEHASH') );
@


1.1
log
@Initial revision
@
text
@@


1.1.1.1
log
@perl 5.8.2 from CPAN
@
text
@@


1.1.1.2
log
@perl 5.8.8 import
@
text
@d1 1
a1 1
#!/usr/bin/perl -wT
d4 6
a9 3
    if( $ENV{PERL_CORE} ) {
        chdir 't';
        @@INC = '../lib';
d13 2
a14 41
use strict;
use Config;
use Test::More;
my %modules;
BEGIN {
    %modules = (
      # ModuleName  => q|code to check that it was loaded|,
       'Cwd'        => q| ::is( ref Cwd->can('fastcwd'),'CODE' ) |,         # 5.7 ?
       'File::Glob' => q| ::is( ref File::Glob->can('doglob'),'CODE' ) |,   # 5.6
       'SDBM_File'  => q| ::is( ref SDBM_File->can('TIEHASH'), 'CODE' ) |,  # 5.0
       'Socket'     => q| ::is( ref Socket->can('inet_aton'),'CODE' ) |,    # 5.0
       'Time::HiRes'=> q| ::is( ref Time::HiRes->can('usleep'),'CODE' ) |,  # 5.7.3
    );
    plan tests => keys(%modules) * 2 + 3
}


BEGIN {
    use_ok( 'XSLoader' );
}

# Check functions
can_ok( 'XSLoader' => 'load' );
#can_ok( 'XSLoader' => 'bootstrap_inherit' );  # doesn't work

# Check error messages
eval { XSLoader::load() };
like( $@@, '/^XSLoader::load\(\'Your::Module\', \$Your::Module::VERSION\)/',
        "calling XSLoader::load() with no argument" );

# Now try to load well known XS modules
my $extensions = $Config{'extensions'};
$extensions =~ s|/|::|g;

for my $module (sort keys %modules) {
    SKIP: {
        skip "$module not available", 2 if $extensions !~ /\b$module\b/;
        eval qq| package $module; XSLoader::load('$module'); | . $modules{$module};
        is( $@@, '',  "XSLoader::load($module)");
    }
}
d16 10
@


1.1.1.3
log
@import perl 5.10.0 from CPAN
@
text
@d1 1
a1 1
#!/usr/bin/perl -T
d12 2
a13 2

my $db_file;
d15 9
a23 13
    eval "use Test::More";
    if ($@@) {
        print "1..0 # Skip: Test::More not available\n";
        die "Test::More not available\n";
    }

    use Config;
    foreach (qw/SDBM_File GDBM_File ODBM_File NDBM_File DB_File/) {
        if ($Config{extensions} =~ /\b$_\b/) {
            $db_file = $_;
            last;
        }
    }
d27 3
a29 13
my %modules = (
    # ModuleName  => q|code to check that it was loaded|,
    'Cwd'        => q| ::can_ok( 'Cwd' => 'fastcwd'         ) |,  # 5.7 ?
    'File::Glob' => q| ::can_ok( 'File::Glob' => 'doglob'   ) |,  # 5.6
    $db_file     => q| ::can_ok( $db_file => 'TIEHASH'      ) |,  # 5.0
    'Socket'     => q| ::can_ok( 'Socket' => 'inet_aton'    ) |,  # 5.0
    'Time::HiRes'=> q| ::can_ok( 'Time::HiRes' => 'usleep'  ) |,  # 5.7.3
);

plan tests => keys(%modules) * 3 + 5;

# Try to load the module
use_ok( 'XSLoader' );
d33 1
a33 1
can_ok( 'XSLoader' => 'bootstrap_inherit' );
a39 4
eval q{ package Thwack; XSLoader::load('Thwack'); };
like( $@@, q{/^Can't locate loadable object for module Thwack in @@INC/},
        "calling XSLoader::load() under a package with no XS part" );

d46 2
a47 7
        skip "$module not available", 3 if $extensions !~ /\b$module\b/;

        eval qq{ package $module; XSLoader::load('$module', "qunckkk"); };
        like( $@@, "/^$module object version \\S+ does not match bootstrap parameter (?:qunckkk|0)/",  
                "calling XSLoader::load() with a XS module and an incorrect version" );

        eval qq{ package $module; XSLoader::load('$module'); };
a48 2

        eval qq{ package $module; $modules{$module}; };
@


1.1.1.4
log
@import perl 5.10.1
@
text
@d1 1
a1 1
#!perl -T
d40 1
a40 1
plan tests => keys(%modules) * 4 + 5;
d55 1
a55 2
if ($Config{usedl}) {
    like( $@@, q{/^Can't locate loadable object for module Thwack in @@INC/},
a56 5
}
else {
    like( $@@, q{/^Can't load module Thwack, dynamic loading not available in this perl./},
        "calling XSLoader::load() under a package with no XS part" );
}
a62 3
    my $warnings = "";
    local $SIG{__WARN__} = sub { $warnings = $_[0] };

d64 1
a64 1
        skip "$module not available", 4 if $extensions !~ /\b$module\b/;
a68 2
        like( $warnings, "/^\$|^Version string 'qunckkk' contains invalid data; ignoring: 'qunckkk'/", 
                "in Perl 5.10, DynaLoader warns about the incorrect version string" );
@


