head	1.2;
access;
symbols
	OPENBSD_6_2:1.2.0.2
	OPENBSD_6_2_BASE:1.2
	PERL_5_24_2:1.1.1.7
	OPENBSD_6_1:1.2.0.4
	OPENBSD_6_1_BASE:1.2
	OPENBSD_6_0:1.1.1.6.0.10
	OPENBSD_6_0_BASE:1.1.1.6
	OPENBSD_5_9:1.1.1.6.0.4
	OPENBSD_5_9_BASE:1.1.1.6
	OPENBSD_5_8:1.1.1.6.0.6
	OPENBSD_5_8_BASE:1.1.1.6
	PERL_5_20_2:1.1.1.6
	OPENBSD_5_7:1.1.1.6.0.2
	OPENBSD_5_7_BASE:1.1.1.6
	PERL_5_20_1:1.1.1.6
	OPENBSD_5_6:1.1.1.5.0.4
	OPENBSD_5_6_BASE:1.1.1.5
	PERL_5_18_2:1.1.1.5
	PERL:1.1.1
	OPENBSD_5_5:1.1.1.4.0.6
	OPENBSD_5_5_BASE:1.1.1.4
	OPENBSD_5_4:1.1.1.4.0.2
	OPENBSD_5_4_BASE:1.1.1.4
	PERL_5_16_3:1.1.1.4
	OPENBSD_5_3:1.1.1.3.0.10
	OPENBSD_5_3_BASE:1.1.1.3
	OPENBSD_5_2:1.1.1.3.0.8
	OPENBSD_5_2_BASE:1.1.1.3
	OPENBSD_5_1_BASE:1.1.1.3
	OPENBSD_5_1:1.1.1.3.0.6
	OPENBSD_5_0:1.1.1.3.0.4
	OPENBSD_5_0_BASE:1.1.1.3
	OPENBSD_4_9:1.1.1.3.0.2
	OPENBSD_4_9_BASE:1.1.1.3
	PERL_5_12_2:1.1.1.3
	OPENBSD_4_8:1.1.1.2.0.4
	OPENBSD_4_8_BASE:1.1.1.2
	OPENBSD_4_7:1.1.1.2.0.2
	OPENBSD_4_7_BASE:1.1.1.2
	PERL_5_10_1:1.1.1.2
	OPENBSD_4_6:1.1.1.1.0.6
	OPENBSD_4_6_BASE:1.1.1.1
	OPENBSD_4_5:1.1.1.1.0.2
	OPENBSD_4_5_BASE:1.1.1.1
	PERL_5_10_0:1.1.1.1
	CPAN:1.1.1;
locks; strict;
comment	@# @;
expand	@o@;


1.2
date	2017.02.05.00.32.12;	author afresh1;	state Exp;
branches;
next	1.1;
commitid	cxJ08BvJA9Pt2PTM;

1.1
date	2008.09.29.17.18.16;	author millert;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	2008.09.29.17.18.16;	author millert;	state Exp;
branches;
next	1.1.1.2;

1.1.1.2
date	2009.10.12.18.11.11;	author millert;	state Exp;
branches;
next	1.1.1.3;

1.1.1.3
date	2010.09.24.14.48.54;	author millert;	state Exp;
branches;
next	1.1.1.4;

1.1.1.4
date	2013.03.25.20.08.44;	author sthen;	state Exp;
branches;
next	1.1.1.5;

1.1.1.5
date	2014.03.24.14.59.01;	author afresh1;	state Exp;
branches;
next	1.1.1.6;

1.1.1.6
date	2014.11.17.20.53.05;	author afresh1;	state Exp;
branches;
next	1.1.1.7;
commitid	B31cAbBIXiCqnL97;

1.1.1.7
date	2017.08.14.13.46.11;	author afresh1;	state Exp;
branches;
next	;
commitid	fAzrs78vdW2Yfc6A;


desc
@@


1.2
log
@Fix merge issues, remove excess files - match perl-5.24.1 dist
@
text
@#!/usr/bin/perl -wT

use strict;
use Config;
push @@INC, '.';
if (-f 't/test.pl') {
  require 't/test.pl';
} else {
  require '../../t/test.pl';
}

my %modules;

my $db_file;
BEGIN {
    use Config;
    foreach (qw/SDBM_File GDBM_File ODBM_File NDBM_File DB_File/) {
        if ($Config{extensions} =~ /\b$_\b/) {
            $db_file = $_;
            last;
        }
    }
}

%modules = (
   # ModuleName   => q| code to check that it was loaded |,
    'List::Util'  => q| ::is( ref List::Util->can('first'), 'CODE' ) |,  # 5.7.2
    'Cwd'         => q| ::is( ref Cwd->can('fastcwd'),'CODE' ) |,         # 5.7 ?
    'File::Glob'  => q| ::is( ref File::Glob->can('doglob'),'CODE' ) |,   # 5.6
    $db_file      => q| ::is( ref $db_file->can('TIEHASH'), 'CODE' ) |,  # 5.0
    'Socket'      => q| ::is( ref Socket->can('inet_aton'),'CODE' ) |,    # 5.0
    'Time::HiRes' => q| ::is( ref Time::HiRes->can('usleep'),'CODE' ) |,  # 5.7.3
);

plan (26 + keys(%modules) * 3);

# Try to load the module
use_ok( 'DynaLoader' );

# Some tests need to be skipped on old Darwin versions.
# Commit ce12ed1954 added the skip originally, without specifying which
# darwin version needed it.  I know OS X 10.6 (Snow Leopard; darwin 10)
# supports it, so skip anything before that.
my $old_darwin = $^O eq 'darwin' && ($Config{osvers} =~ /^(\d+)/)[0] < 10;

# Check functions
can_ok( 'DynaLoader' => 'bootstrap'               ); # defined in Perl section
can_ok( 'DynaLoader' => 'dl_load_flags'           ); # defined in Perl section
can_ok( 'DynaLoader' => 'dl_error'                ); # defined in XS section
if ($Config{usedl}) {
    can_ok( 'DynaLoader' => 'dl_find_symbol'      ); # defined in XS section
    can_ok( 'DynaLoader' => 'dl_install_xsub'     ); # defined in XS section
    can_ok( 'DynaLoader' => 'dl_load_file'        ); # defined in XS section
    can_ok( 'DynaLoader' => 'dl_undef_symbols'    ); # defined in XS section
    SKIP: {
        skip( "unloading unsupported on $^O", 1 ) if ($old_darwin || $^O eq 'VMS');
        can_ok( 'DynaLoader' => 'dl_unload_file'  ); # defined in XS section
    }
} else {
    foreach my $symbol (qw(dl_find_symbol dl_install_sub dl_load_file
			   dl_undef_symbols dl_unload_file)) {
	is(DynaLoader->can($symbol), undef,
	   "Without dynamic loading, DynaLoader should not have $symbol");
    }
}

can_ok( 'DynaLoader' => 'dl_expandspec'           );
can_ok( 'DynaLoader' => 'dl_findfile'             );
can_ok( 'DynaLoader' => 'dl_find_symbol_anywhere' );


# Check error messages
# .. for bootstrap()
eval { DynaLoader::bootstrap() };
like( $@@, qr/^Usage: DynaLoader::bootstrap\(module\)/,
        "calling DynaLoader::bootstrap() with no argument" );

eval { package egg_bacon_sausage_and_spam; DynaLoader::bootstrap("egg_bacon_sausage_and_spam") };
if ($Config{usedl}) {
    like( $@@, qr/^Can't locate loadable object for module egg_bacon_sausage_and_spam/,
        "calling DynaLoader::bootstrap() with a package without binary object" );
} else {
     like( $@@, qr/^Can't load module egg_bacon_sausage_and_spam/,
        "calling DynaLoader::bootstrap() with a package without binary object" );
}

# .. for dl_load_file()
SKIP: {
    skip( "no dl_load_file with dl_none.xs", 2 ) unless $Config{usedl};
    eval { DynaLoader::dl_load_file() };
    like( $@@, qr/^Usage: DynaLoader::dl_load_file\(filename, flags=0\)/,
            "calling DynaLoader::dl_load_file() with no argument" );

    eval { no warnings 'uninitialized'; DynaLoader::dl_load_file(undef) };
    is( $@@, '', "calling DynaLoader::dl_load_file() with undefined argument" );     # is this expected ?
}

my ($dlhandle, $dlerr);
eval { $dlhandle = DynaLoader::dl_load_file("egg_bacon_sausage_and_spam") };
$dlerr = DynaLoader::dl_error();
SKIP: {
    skip( "dl_load_file() does not attempt to load file on VMS (and thus does not fail) when \@@dl_require_symbols is empty", 1 ) if $^O eq 'VMS';
    ok( !$dlhandle, "calling DynaLoader::dl_load_file() without an existing library should fail" );
}
ok( defined $dlerr, "dl_error() returning an error message: '$dlerr'" );

# Checking for any particular error messages or numeric codes
# is very unportable, please do not try to do that.  A failing
# dl_load_file() is not even guaranteed to set the $! or the $^E.

# ... dl_findfile()
SKIP: {
    my @@files = ();
    eval { @@files = DynaLoader::dl_findfile("c") };
    is( $@@, '', "calling dl_findfile()" );
    # Some platforms are known to not have a "libc"
    # (not at least by that name) that the dl_findfile()
    # could find.
    skip( "dl_findfile test not appropriate on $^O", 1 )
	if $^O =~ /(win32|vms|openbsd|bitrig|cygwin|vos|os390)/i;
    # Play safe and only try this test if this system
    # looks pretty much Unix-like.
    skip( "dl_findfile test not appropriate on $^O", 1 )
	unless -d '/usr' && -f '/bin/ls';
    skip( "dl_findfile test not always appropriate when cross-compiling", 1 )
        if $Config{usecrosscompile};
    cmp_ok( scalar @@files, '>=', 1, "array should contain one result result or more: libc => (@@files)" );
}

# Now try to load well known XS modules
my $extensions = $Config{'dynamic_ext'};
$extensions =~ s|/|::|g;

for my $module (sort keys %modules) {
    SKIP: {
        if ($extensions !~ /\b$module\b/) {
            delete($modules{$module});
            skip( "$module not available", 3);
        }
        eval "use $module";
        is( $@@, '', "loading $module" );
    }
}

# checking internal consistency
is( scalar @@DynaLoader::dl_librefs, scalar keys %modules, "checking number of items in \@@dl_librefs" );
is( scalar @@DynaLoader::dl_modules, scalar keys %modules, "checking number of items in \@@dl_modules" );

my @@loaded_modules = @@DynaLoader::dl_modules;
for my $libref (reverse @@DynaLoader::dl_librefs) {
 TODO: {
        todo_skip( "Can't safely unload with -DPERL_GLOBAL_STRUCT_PRIVATE (RT #119409)", 2 )
            if $Config{ccflags} =~ /(?:^|\s)-DPERL_GLOBAL_STRUCT_PRIVATE\b/;
    SKIP: {
            skip( "unloading unsupported on $^O", 2 )
                if ($old_darwin || $^O eq 'VMS');
            my $module = pop @@loaded_modules;
            skip( "File::Glob sets PL_opfreehook", 2 ) if $module eq 'File::Glob';
            my $r = eval { DynaLoader::dl_unload_file($libref) };
            is( $@@, '', "calling dl_unload_file() for $module" );
            is( $r,  1, " - unload was successful" );
        }
    }
}

SKIP: {
    skip( "mod2fname not defined on this platform", 4 )
        unless defined &DynaLoader::mod2fname && $Config{d_libname_unique};

    is(
        DynaLoader::mod2fname(["Hash", "Util"]),
        "PL_Hash__Util",
        "mod2fname + libname_unique works"
    );

    is(
        DynaLoader::mod2fname([("Hash", "Util") x 25]),
        "PL_" . join("_", ("Hash", "Util")x25),
        "mod2fname + libname_unique collapses double __'s for long names"
    );

    is(
        DynaLoader::mod2fname([("Haash", "Uttil") x 25]),
        "PL_" . join("_", ("HAsh", "UTil")x25),
        "mod2fname + libname_unique collapses repeated characters for long names"
    );

    is(
        DynaLoader::mod2fname([("Hash", "Util")x30]),
        substr(("PL_" . join("_", ("Hash", "Util")x30)), 0, 255 - (length($Config::Config{dlext})+1)),
        "mod2fname + libname_unique correctly truncates long names"
    );
}

@


1.1
log
@Initial revision
@
text
@d3 7
a9 5
BEGIN {
    if( $ENV{PERL_CORE} ) {
        chdir 't';
        @@INC = '../lib';
    }
a11 3
use strict;
use Config;
use Test::More;
d26 7
a32 7
   # ModuleName  => q| code to check that it was loaded |,
    'List::Util' => q| ::is( ref List::Util->can('first'), 'CODE' ) |,  # 5.7.2
    'Cwd'        => q| ::is( ref Cwd->can('fastcwd'),'CODE' ) |,         # 5.7 ?
    'File::Glob' => q| ::is( ref File::Glob->can('doglob'),'CODE' ) |,   # 5.6
    $db_file     => q| ::is( ref $db_file->can('TIEHASH'), 'CODE' ) |,  # 5.0
    'Socket'     => q| ::is( ref Socket->can('inet_aton'),'CODE' ) |,    # 5.0
    'Time::HiRes'=> q| ::is( ref Time::HiRes->can('usleep'),'CODE' ) |,  # 5.7.3
d35 1
a35 2
plan tests => 22 + keys(%modules) * 3;

d40 5
d48 1
d50 15
a64 8
can_ok( 'DynaLoader' => 'dl_find_symbol'          ); # defined in XS section
can_ok( 'DynaLoader' => 'dl_install_xsub'         ); # defined in XS section
can_ok( 'DynaLoader' => 'dl_load_file'            ); # defined in XS section
can_ok( 'DynaLoader' => 'dl_load_flags'           ); # defined in Perl section
can_ok( 'DynaLoader' => 'dl_undef_symbols'        ); # defined in XS section
SKIP: {
    skip "unloading unsupported on $^O", 1 if ($^O eq 'VMS' || $^O eq 'darwin');
    can_ok( 'DynaLoader' => 'dl_unload_file'          ); # defined in XS section
d67 3
a69 6
TODO: {
local $TODO = "Test::More::can_ok() seems to have trouble dealing with AutoLoaded functions";
can_ok( 'DynaLoader' => 'dl_expandspec'           ); # defined in AutoLoaded section
can_ok( 'DynaLoader' => 'dl_findfile'             ); # defined in AutoLoaded section
can_ok( 'DynaLoader' => 'dl_find_symbol_anywhere' ); # defined in AutoLoaded section
}
d75 1
a75 1
like( $@@, q{/^Usage: DynaLoader::bootstrap\(module\)/},
d79 5
a83 1
like( $@@, q{/^Can't locate loadable object for module egg_bacon_sausage_and_spam/},
d85 1
d88 5
a92 3
eval { DynaLoader::dl_load_file() };
like( $@@, q{/^Usage: DynaLoader::dl_load_file\(filename, flags=0\)/},
        "calling DynaLoader::dl_load_file() with no argument" );
d94 3
a96 2
eval { no warnings 'uninitialized'; DynaLoader::dl_load_file(undef) };
is( $@@, '', "calling DynaLoader::dl_load_file() with undefined argument" );     # is this expected ?
d102 1
a102 1
    skip "dl_load_file() does not attempt to load file on VMS (and thus does not fail) when \@@dl_require_symbols is empty", 1 if $^O eq 'VMS';
d119 2
a120 2
    skip "dl_findfile test not appropriate on $^O", 1
	if $^O =~ /(win32|vms|openbsd|cygwin)/i;
d123 1
a123 1
    skip "dl_findfile test not appropriate on $^O", 1
d125 2
d138 1
a138 1
            skip "$module not available", 3;
d151 42
a192 7
  SKIP: {
    skip "unloading unsupported on $^O", 2 if ($^O eq 'VMS' || $^O eq 'darwin');
    my $module = pop @@loaded_modules;
    my $r = eval { DynaLoader::dl_unload_file($libref) };
    is( $@@, '', "calling dl_unload_file() for $module" );
    is( $r,  1, " - unload was successful" );
  }
@


1.1.1.1
log
@import perl 5.10.0 from CPAN
@
text
@@


1.1.1.2
log
@import perl 5.10.1
@
text
@d45 4
d50 4
a53 16
can_ok( 'DynaLoader' => 'dl_error'                ); # defined in XS section
if ($Config{usedl}) {
    can_ok( 'DynaLoader' => 'dl_find_symbol'      ); # defined in XS section
    can_ok( 'DynaLoader' => 'dl_install_xsub'     ); # defined in XS section
    can_ok( 'DynaLoader' => 'dl_load_file'        ); # defined in XS section
    can_ok( 'DynaLoader' => 'dl_undef_symbols'    ); # defined in XS section
    SKIP: {
        skip "unloading unsupported on $^O", 1 if ($^O eq 'VMS' || $^O eq 'darwin');
        can_ok( 'DynaLoader' => 'dl_unload_file'  ); # defined in XS section
    }
} else {
    foreach my $symbol (qw(dl_find_symbol dl_install_sub dl_load_file
			   dl_undef_symbols dl_unload_file)) {
	is(DynaLoader->can($symbol), undef,
	   "Without dynamic loading, DynaLoader should not have $symbol");
    }
d71 1
a71 5
if ($Config{usedl}) {
    like( $@@, q{/^Can't locate loadable object for module egg_bacon_sausage_and_spam/},
        "calling DynaLoader::bootstrap() with a package without binary object" );
} else {
     like( $@@, q{/^Can't load module egg_bacon_sausage_and_spam/},
a72 1
}
d75 3
a77 5
SKIP: {
    skip "no dl_load_file with dl_none.xs", 2 unless $Config{usedl};
    eval { DynaLoader::dl_load_file() };
    like( $@@, q{/^Usage: DynaLoader::dl_load_file\(filename, flags=0\)/},
            "calling DynaLoader::dl_load_file() with no argument" );
d79 2
a80 3
    eval { no warnings 'uninitialized'; DynaLoader::dl_load_file(undef) };
    is( $@@, '', "calling DynaLoader::dl_load_file() with undefined argument" );     # is this expected ?
}
@


1.1.1.3
log
@Perl 5.12.2 from CPAN
@
text
@d3 7
@


1.1.1.4
log
@import perl 5.16.3 from CPAN - worked on by Andrew Fresh and myself
@
text
@d57 6
a62 3
can_ok( 'DynaLoader' => 'dl_expandspec'           );
can_ok( 'DynaLoader' => 'dl_findfile'             );
can_ok( 'DynaLoader' => 'dl_find_symbol_anywhere' );
@


1.1.1.5
log
@Import perl-5.18.2

OK espie@@ sthen@@ deraadt@@
@
text
@a34 5
# Some tests need to be skipped on old Darwin versions.
# Commit ce12ed1954 added the skip originally, without specifying which
# darwin version needed it.  I know OS X 10.6 (Snow Leopard; darwin 10)
# supports it, so skip anything before that.
my $old_darwin = $^O eq 'darwin' && ($Config{osvers} =~ /^(\d+)/)[0] < 10;
d46 1
a46 1
        skip "unloading unsupported on $^O", 1 if ($old_darwin || $^O eq 'VMS');
d140 1
a140 1
    skip "unloading unsupported on $^O", 2 if ($old_darwin || $^O eq 'VMS');
a141 1
    skip "File::Glob sets PL_opfreehook", 2 if $module eq 'File::Glob';
@


1.1.1.6
log
@Import perl-5.20.1
@
text
@d29 1
a29 1
plan tests => 26 + keys(%modules) * 3;
d115 1
a115 1
	if $^O =~ /(win32|vms|openbsd|bitrig|cygwin|vos)/i;
a119 2
    skip "dl_findfile test not always appropriate when cross-compiling", 1
        if $Config{usecrosscompile};
d144 8
a151 13
 TODO: {
        todo_skip "Can't safely unload with -DPERL_GLOBAL_STRUCT_PRIVATE (RT #119409)", 2
            if $Config{ccflags} =~ /(?:^|\s)-DPERL_GLOBAL_STRUCT_PRIVATE\b/;
    SKIP: {
            skip "unloading unsupported on $^O", 2
                if ($old_darwin || $^O eq 'VMS');
            my $module = pop @@loaded_modules;
            skip "File::Glob sets PL_opfreehook", 2 if $module eq 'File::Glob';
            my $r = eval { DynaLoader::dl_unload_file($libref) };
            is( $@@, '', "calling dl_unload_file() for $module" );
            is( $r,  1, " - unload was successful" );
        }
    }
a153 28
SKIP: {
    skip "mod2fname not defined on this platform", 4
        unless defined &DynaLoader::mod2fname && $Config{d_libname_unique};

    is(
        DynaLoader::mod2fname(["Hash", "Util"]),
        "PL_Hash__Util",
        "mod2fname + libname_unique works"
    );

    is(
        DynaLoader::mod2fname([("Hash", "Util") x 25]),
        "PL_" . join("_", ("Hash", "Util")x25),
        "mod2fname + libname_unique collapses double __'s for long names"
    );

    is(
        DynaLoader::mod2fname([("Haash", "Uttil") x 25]),
        "PL_" . join("_", ("HAsh", "UTil")x25),
        "mod2fname + libname_unique collapses repeated characters for long names"
    );

    is(
        DynaLoader::mod2fname([("Hash", "Util")x30]),
        substr(("PL_" . join("_", ("Hash", "Util")x30)), 0, 255 - (length($Config::Config{dlext})+1)),
        "mod2fname + libname_unique correctly truncates long names"
    );
}
@


1.1.1.7
log
@Import perl-5.24.2
@
text
@d5 1
a5 7
push @@INC, '.';
if (-f 't/test.pl') {
  require 't/test.pl';
} else {
  require '../../t/test.pl';
}

d20 7
a26 7
   # ModuleName   => q| code to check that it was loaded |,
    'List::Util'  => q| ::is( ref List::Util->can('first'), 'CODE' ) |,  # 5.7.2
    'Cwd'         => q| ::is( ref Cwd->can('fastcwd'),'CODE' ) |,         # 5.7 ?
    'File::Glob'  => q| ::is( ref File::Glob->can('doglob'),'CODE' ) |,   # 5.6
    $db_file      => q| ::is( ref $db_file->can('TIEHASH'), 'CODE' ) |,  # 5.0
    'Socket'      => q| ::is( ref Socket->can('inet_aton'),'CODE' ) |,    # 5.0
    'Time::HiRes' => q| ::is( ref Time::HiRes->can('usleep'),'CODE' ) |,  # 5.7.3
d29 2
a30 1
plan (26 + keys(%modules) * 3);
d51 1
a51 1
        skip( "unloading unsupported on $^O", 1 ) if ($old_darwin || $^O eq 'VMS');
d70 1
a70 1
like( $@@, qr/^Usage: DynaLoader::bootstrap\(module\)/,
d75 1
a75 1
    like( $@@, qr/^Can't locate loadable object for module egg_bacon_sausage_and_spam/,
d78 1
a78 1
     like( $@@, qr/^Can't load module egg_bacon_sausage_and_spam/,
d84 1
a84 1
    skip( "no dl_load_file with dl_none.xs", 2 ) unless $Config{usedl};
d86 1
a86 1
    like( $@@, qr/^Usage: DynaLoader::dl_load_file\(filename, flags=0\)/,
d97 1
a97 1
    skip( "dl_load_file() does not attempt to load file on VMS (and thus does not fail) when \@@dl_require_symbols is empty", 1 ) if $^O eq 'VMS';
d114 2
a115 2
    skip( "dl_findfile test not appropriate on $^O", 1 )
	if $^O =~ /(win32|vms|openbsd|bitrig|cygwin|vos|os390)/i;
d118 1
a118 1
    skip( "dl_findfile test not appropriate on $^O", 1 )
d120 1
a120 1
    skip( "dl_findfile test not always appropriate when cross-compiling", 1 )
d133 1
a133 1
            skip( "$module not available", 3);
d147 1
a147 1
        todo_skip( "Can't safely unload with -DPERL_GLOBAL_STRUCT_PRIVATE (RT #119409)", 2 )
d150 1
a150 1
            skip( "unloading unsupported on $^O", 2 )
d153 1
a153 1
            skip( "File::Glob sets PL_opfreehook", 2 ) if $module eq 'File::Glob';
d162 1
a162 1
    skip( "mod2fname not defined on this platform", 4 )
a188 1

@


