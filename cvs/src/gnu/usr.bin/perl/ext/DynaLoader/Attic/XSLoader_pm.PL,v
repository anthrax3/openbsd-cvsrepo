head	1.2;
access;
symbols
	OPENBSD_4_8:1.1.1.8.0.4
	OPENBSD_4_8_BASE:1.1.1.8
	OPENBSD_4_7:1.1.1.8.0.2
	OPENBSD_4_7_BASE:1.1.1.8
	PERL_5_10_1:1.1.1.8
	OPENBSD_4_6:1.1.1.7.0.6
	OPENBSD_4_6_BASE:1.1.1.7
	OPENBSD_4_5:1.1.1.7.0.2
	OPENBSD_4_5_BASE:1.1.1.7
	PERL_5_10_0:1.1.1.7
	OPENBSD_4_4:1.1.1.6.0.10
	OPENBSD_4_4_BASE:1.1.1.6
	OPENBSD_4_3:1.1.1.6.0.8
	OPENBSD_4_3_BASE:1.1.1.6
	OPENBSD_4_2:1.1.1.6.0.6
	OPENBSD_4_2_BASE:1.1.1.6
	OPENBSD_4_1:1.1.1.6.0.4
	OPENBSD_4_1_BASE:1.1.1.6
	OPENBSD_4_0:1.1.1.6.0.2
	OPENBSD_4_0_BASE:1.1.1.6
	PERL_5_8_8:1.1.1.6
	OPENBSD_3_9:1.1.1.5.0.8
	OPENBSD_3_9_BASE:1.1.1.5
	OPENBSD_3_8:1.1.1.5.0.6
	OPENBSD_3_8_BASE:1.1.1.5
	OPENBSD_3_7:1.1.1.5.0.4
	OPENBSD_3_7_BASE:1.1.1.5
	PERL_5_8_6:1.1.1.5
	OPENBSD_3_6:1.1.1.5.0.2
	OPENBSD_3_6_BASE:1.1.1.5
	PERL_5_8_5:1.1.1.5
	PERL_5_8_3:1.1.1.4
	OPENBSD_3_5:1.1.1.4.0.2
	OPENBSD_3_5_BASE:1.1.1.4
	PERL_5_8_2:1.1.1.4
	OPENBSD_3_4:1.1.1.3.0.4
	OPENBSD_3_4_BASE:1.1.1.3
	OPENBSD_3_3:1.1.1.3.0.2
	OPENBSD_3_3_BASE:1.1.1.3
	PERL_5_8_0:1.1.1.3
	OPENBSD_3_2:1.1.1.2.0.6
	OPENBSD_3_2_BASE:1.1.1.2
	OPENBSD_3_1:1.1.1.2.0.4
	OPENBSD_3_1_BASE:1.1.1.2
	OPENBSD_3_0:1.1.1.2.0.2
	OPENBSD_3_0_BASE:1.1.1.2
	PERL_5_6_1:1.1.1.2
	OPENBSD_2_9:1.1.1.1.0.6
	OPENBSD_2_9_BASE:1.1.1.1
	OPENBSD_2_8:1.1.1.1.0.4
	OPENBSD_2_8_BASE:1.1.1.1
	OPENBSD_2_7:1.1.1.1.0.2
	OPENBSD_2_7_BASE:1.1.1.1
	PERL_5_6_0:1.1.1.1
	CPAN:1.1.1;
locks; strict;
comment	@# @;


1.2
date	2010.09.24.14.59.18;	author millert;	state dead;
branches;
next	1.1;

1.1
date	2000.04.06.16.09.09;	author millert;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	2000.04.06.16.09.09;	author millert;	state Exp;
branches;
next	1.1.1.2;

1.1.1.2
date	2001.05.24.18.22.46;	author millert;	state Exp;
branches;
next	1.1.1.3;

1.1.1.3
date	2002.10.27.22.14.54;	author millert;	state Exp;
branches;
next	1.1.1.4;

1.1.1.4
date	2003.12.03.02.43.43;	author millert;	state Exp;
branches;
next	1.1.1.5;

1.1.1.5
date	2004.08.09.17.45.57;	author millert;	state Exp;
branches;
next	1.1.1.6;

1.1.1.6
date	2006.03.28.18.48.01;	author millert;	state Exp;
branches;
next	1.1.1.7;

1.1.1.7
date	2008.09.29.17.18.16;	author millert;	state Exp;
branches;
next	1.1.1.8;

1.1.1.8
date	2009.10.12.18.11.11;	author millert;	state Exp;
branches;
next	;


desc
@@


1.2
log
@remove files no longer in perl 5.12.2 (or that have moved)
@
text
@use Config;

sub to_string {
    my ($value) = @@_;
    $value =~ s/\\/\\\\/g;
    $value =~ s/'/\\'/g;
    return "'$value'";
}

unlink "XSLoader.pm" if -f "XSLoader.pm";
open OUT, ">XSLoader.pm" or die $!;
print OUT <<'EOT';
# Generated from XSLoader.pm.PL (resolved %Config::Config value)

package XSLoader;

#   And Gandalf said: 'Many folk like to know beforehand what is to
#   be set on the table; but those who have laboured to prepare the
#   feast like to keep their secret; for wonder makes the words of
#   praise louder.'

#   (Quote from Tolkien sugested by Anno Siegel.)
#
# See pod text at end of file for documentation.
# See also ext/DynaLoader/README in source tree for other information.
#
# Tim.Bunce@@ig.co.uk, August 1994

$VERSION = "0.01";	# avoid typo warning

# enable debug/trace messages from DynaLoader perl code
# $dl_debug = $ENV{PERL_DL_DEBUG} || 0 unless defined $dl_debug;

EOT

print OUT '  my $dl_dlext = ', to_string($Config::Config{'dlext'}), ";\n" ;

print OUT <<'EOT';

# No prizes for guessing why we don't say 'bootstrap DynaLoader;' here.
package DynaLoader;
boot_DynaLoader('DynaLoader') if defined(&boot_DynaLoader) &&
                                !defined(&dl_load_file);
package XSLoader;

1; # End of main code

# The bootstrap function cannot be autoloaded (without complications)
# so we define it here:

sub load {
    package DynaLoader;

    my($module) = $_[0];

    # work with static linking too
    my $b = "$module\::bootstrap";
    goto &$b if defined &$b;

    goto retry unless $module and defined &dl_load_file;

    my @@modparts = split(/::/,$module);
    my $modfname = $modparts[-1];

EOT

print OUT <<'EOT' if defined &DynaLoader::mod2fname;
    # Some systems have restrictions on files names for DLL's etc.
    # mod2fname returns appropriate file base name (typically truncated)
    # It may also edit @@modparts if required.
    $modfname = &mod2fname(\@@modparts) if defined &mod2fname;

EOT

print OUT <<'EOT';
    my $modpname = join('/',@@modparts);
    my $modlibname = (caller())[1];
    my $c = @@modparts;
    $modlibname =~ s,[\\/][^\\/]+$,, while $c--;	# Q&D basename
    my $file = "$modlibname/auto/$modpname/$modfname.$dl_dlext";

#   print STDERR "XSLoader::load for $module ($file)\n" if $dl_debug;

    my $bs = $file;
    $bs =~ s/(\.\w+)?(;\d*)?$/\.bs/; # look for .bs 'beside' the library

    goto retry if not -f $file or -s $bs;

    my $bootname = "boot_$module";
    $bootname =~ s/\W/_/g;
    @@dl_require_symbols = ($bootname);

    # Many dynamic extension loading problems will appear to come from
    # this section of code: XYZ failed at line 123 of DynaLoader.pm.
    # Often these errors are actually occurring in the initialisation
    # C code of the extension XS file. Perl reports the error as being
    # in this perl code simply because this was the last perl code
    # it executed.

    my $libref = dl_load_file($file, 0) or do { 
	require Carp;
	Carp::croak("Can't load '$file' for module $module: " . dl_error());
    };
    push(@@dl_librefs,$libref);  # record loaded object

    my @@unresolved = dl_undef_symbols();
    if (@@unresolved) {
	require Carp;
	Carp::carp("Undefined symbols present after loading $file: @@unresolved\n");
    }

    my $boot_symbol_ref = dl_find_symbol($libref, $bootname) or do {
	require Carp;
	Carp::croak("Can't find '$bootname' symbol in $file\n");
    };

    my $xs = dl_install_xsub("${module}::bootstrap", $boot_symbol_ref, $file);

    push(@@dl_modules, $module); # record loaded module

    # See comment block above
    return &$xs(@@_);

  retry:
    require DynaLoader;
    goto &DynaLoader::bootstrap_inherit;
}

__END__

=head1 NAME

XSLoader - Dynamically load C libraries into Perl code

=head1 SYNOPSIS

    package YourPackage;
    use XSLoader;

    XSLoader::load 'YourPackage', @@args;

=head1 DESCRIPTION

This module defines a standard I<simplified> interface to the dynamic
linking mechanisms available on many platforms.  Its primary purpose is
to implement cheap automatic dynamic loading of Perl modules.

For more complicated interface see L<DynaLoader>.

=head1 AUTHOR

Ilya Zakharevich: extraction from DynaLoader.

=cut
EOT

close OUT or die $!;

@


1.1
log
@Initial revision
@
text
@@


1.1.1.1
log
@virgin perl 5.6.0
@
text
@@


1.1.1.2
log
@stock perl 5.6.1
@
text
@d40 1
a41 3

# No prizes for guessing why we don't say 'bootstrap DynaLoader;' here.
# NOTE: All dl_*.xs (including dl_none.xs) define a dl_error() XSUB
d43 1
a43 1
                                !defined(&dl_error);
@


1.1.1.3
log
@stock perl 5.8.0 from CPAN
@
text
@a94 8
    my $boot_symbol_ref;

    if ($^O eq 'darwin') {
        if ($boot_symbol_ref = dl_find_symbol(0, $bootname)) {
            goto boot; #extension library has already been loaded, e.g. darwin
        }
    }

d114 1
a114 1
    $boot_symbol_ref = dl_find_symbol($libref, $bootname) or do {
d119 2
a121 3

  boot:
    my $xs = dl_install_xsub("${module}::bootstrap", $boot_symbol_ref, $file);
@


1.1.1.4
log
@perl 5.8.2 from CPAN
@
text
@d17 13
a29 1
$VERSION = "0.02";
d48 5
a55 2
    die q{XSLoader::load('Your::Module', $Your::Module::VERSION)} unless @@_;

a139 2
1;

d151 1
a151 1
    XSLoader::load 'YourPackage', $YourPackage::VERSION;
d159 1
a159 161
For more complicated interface see L<DynaLoader>.  Many (most)
features of DynaLoader are not implemented in XSLoader, like for
example the dl_load_flags is not honored by XSLoader.

=head2 Migration from C<DynaLoader>

A typical module using L<DynaLoader|DynaLoader> starts like this:

    package YourPackage;
    require DynaLoader;

    our @@ISA = qw( OnePackage OtherPackage DynaLoader );
    our $VERSION = '0.01';
    bootstrap YourPackage $VERSION;

Change this to

    package YourPackage;
    use XSLoader;

    our @@ISA = qw( OnePackage OtherPackage );
    our $VERSION = '0.01';
    XSLoader::load 'YourPackage', $VERSION;

In other words: replace C<require DynaLoader> by C<use XSLoader>, remove
C<DynaLoader> from @@ISA, change C<bootstrap> by C<XSLoader::load>.  Do not
forget to quote the name of your package on the C<XSLoader::load> line,
and add comma (C<,>) before the arguments ($VERSION above).

Of course, if @@ISA contained only C<DynaLoader>, there is no need to have the
@@ISA assignment at all; moreover, if instead of C<our> one uses
backward-compatible

    use vars qw($VERSION @@ISA);

one can remove this reference to @@ISA together with the @@ISA assignment

If no $VERSION was specified on the C<bootstrap> line, the last line becomes

    XSLoader::load 'YourPackage';

=head2 Backward compatible boilerplate

If you want to have your cake and eat it too, you need a more complicated
boilerplate.

    package YourPackage;
    use vars qw($VERSION @@ISA);

    @@ISA = qw( OnePackage OtherPackage );
    $VERSION = '0.01';
    eval {
       require XSLoader;
       XSLoader::load('YourPackage', $VERSION);
       1;
    } or do {
       require DynaLoader;
       push @@ISA, 'DynaLoader';
       bootstrap YourPackage $VERSION;
    };

The parentheses about XSLoader::load() arguments are needed since we replaced
C<use XSLoader> by C<require>, so the compiler does not know that a function
XSLoader::load() is present.

This boilerplate uses the low-overhead C<XSLoader> if present; if used with
an antic Perl which has no C<XSLoader>, it falls back to using C<DynaLoader>.

=head1 Order of initialization: early load()

I<Skip this section if the XSUB functions are supposed to be called from other
modules only; read it only if you call your XSUBs from the code in your module,
or have a C<BOOT:> section in your XS file (see L<perlxs/"The BOOT: Keyword">).
What is described here is equally applicable to L<DynaLoader|DynaLoader>
interface.>

A sufficiently complicated module using XS would have both Perl code (defined
in F<YourPackage.pm>) and XS code (defined in F<YourPackage.xs>).  If this
Perl code makes calls into this XS code, and/or this XS code makes calls to
the Perl code, one should be careful with the order of initialization.

The call to XSLoader::load() (or bootstrap()) has three side effects:

=over

=item *

if $VERSION was specified, a sanity check is done to insure that the versions
of the F<.pm> and the (compiled) F<.xs> parts are compatible;

=item *

The XSUBs are made accessible from Perl;

=item *

If the C<BOOT:> section was present in F<.xs> file, the code there is called.

=back

Consequently, if the code in F<.pm> file makes calls to these XSUBs, it is
convenient to have XSUBs installed before the Perl code is defined; for
example, this makes prototypes for XSUBs visible to this Perl code.
Alternatively, if the C<BOOT:> section makes calls to Perl functions (or
uses Perl variables) defined in F<.pm> file, they must be defined prior to
the call to XSLoader::load() (or bootstrap()).

The first situation being much more frequent, it makes sense to rewrite the
boilerplate as

    package YourPackage;
    use XSLoader;
    use vars qw($VERSION @@ISA);

    BEGIN {
       @@ISA = qw( OnePackage OtherPackage );
       $VERSION = '0.01';

       # Put Perl code used in the BOOT: section here

       XSLoader::load 'YourPackage', $VERSION;
    }

    # Put Perl code making calls into XSUBs here

=head2 The most hairy case

If the interdependence of your C<BOOT:> section and Perl code is
more complicated than this (e.g., the C<BOOT:> section makes calls to Perl
functions which make calls to XSUBs with prototypes), get rid of the C<BOOT:>
section altogether.  Replace it with a function onBOOT(), and call it like
this:

    package YourPackage;
    use XSLoader;
    use vars qw($VERSION @@ISA);

    BEGIN {
       @@ISA = qw( OnePackage OtherPackage );
       $VERSION = '0.01';
       XSLoader::load 'YourPackage', $VERSION;
    }

    # Put Perl code used in onBOOT() function here; calls to XSUBs are
    # prototype-checked.

    onBOOT;

    # Put Perl initialization code assuming that XS is initialized here

=head1 LIMITATIONS

To reduce the overhead as much as possible, only one possible location
is checked to find the extension DLL (this location is where C<make install>
would put the DLL).  If not found, the search for the DLL is transparently
delegated to C<DynaLoader>, which looks for the DLL along the @@INC list.

In particular, this is applicable to the structure of @@INC used for testing
not-yet-installed extensions.  This means that the overhead of running
uninstalled extension may be much more than running the same extension after
C<make install>.
@


1.1.1.5
log
@Import of stock perl 5.8.5
@
text
@a117 1
    push(@@DynaLoader::dl_shared_objects, $file); # record files loaded
@


1.1.1.6
log
@perl 5.8.8 import
@
text
@a0 1
use strict;
d10 1
a10 1
1 while unlink "XSLoader.pm";
d17 1
a17 3
$VERSION = "0.06";

#use strict;
d78 1
a78 1
    @@DynaLoader::dl_require_symbols = ($bootname);
d96 2
a97 2
        require Carp;
        Carp::croak("Can't load '$file' for module $module: " . dl_error());
d99 1
a99 1
    push(@@DynaLoader::dl_librefs,$libref);  # record loaded object
d103 2
a104 2
        require Carp;
        Carp::carp("Undefined symbols present after loading $file: @@unresolved\n");
d108 2
a109 2
        require Carp;
        Carp::croak("Can't find '$bootname' symbol in $file\n");
d112 1
a112 1
    push(@@DynaLoader::dl_modules, $module); # record loaded module
a121 13
    my $bootstrap_inherit = DynaLoader->can('bootstrap_inherit') || 
                            XSLoader->can('bootstrap_inherit');
    goto &$bootstrap_inherit;
}

# Versions of DynaLoader prior to 5.6.0 don't have this function.
sub bootstrap_inherit {
    package DynaLoader;

    my $module = $_[0];
    local *DynaLoader::isa = *{"$module\::ISA"};
    local @@DynaLoader::isa = (@@DynaLoader::isa, 'DynaLoader');
    # Cannot goto due to delocalization.  Will report errors on a wrong line?
d123 1
a123 1
    DynaLoader::bootstrap(@@_);
a127 1

a133 4
=head1 VERSION

Version 0.06

d147 3
a149 3
For a more complicated interface, see L<DynaLoader>.  Many (most)
features of C<DynaLoader> are not implemented in C<XSLoader>, like for
example the C<dl_load_flags>, not honored by C<XSLoader>.
d172 1
a172 1
C<DynaLoader> from C<@@ISA>, change C<bootstrap> by C<XSLoader::load>.  Do not
d174 1
a174 1
and add comma (C<,>) before the arguments (C<$VERSION> above).
d176 3
a178 3
Of course, if C<@@ISA> contained only C<DynaLoader>, there is no need to have
the C<@@ISA> assignment at all; moreover, if instead of C<our> one uses the
more backward-compatible
d182 1
a182 1
one can remove this reference to C<@@ISA> together with the C<@@ISA> assignment.
d184 1
a184 1
If no C<$VERSION> was specified on the C<bootstrap> line, the last line becomes
d208 1
a208 1
The parentheses about C<XSLoader::load()> arguments are needed since we replaced
d210 1
a210 1
C<XSLoader::load()> is present.
d220 1
a220 1
What is described here is equally applicable to the L<DynaLoader|DynaLoader>
d228 1
a228 1
The call to C<XSLoader::load()> (or C<bootstrap()>) has three side effects:
d234 2
a235 2
if C<$VERSION> was specified, a sanity check is done to ensure that the
versions of the F<.pm> and the (compiled) F<.xs> parts are compatible;
d239 1
a239 1
the XSUBs are made accessible from Perl;
d243 1
a243 1
if a C<BOOT:> section was present in the F<.xs> file, the code there is called.
d247 1
a247 1
Consequently, if the code in the F<.pm> file makes calls to these XSUBs, it is
d251 2
a252 2
uses Perl variables) defined in the F<.pm> file, they must be defined prior to
the call to C<XSLoader::load()> (or C<bootstrap()>).
d277 1
a277 1
section altogether.  Replace it with a function C<onBOOT()>, and call it like
a296 28

=head1 DIAGNOSTICS

=over 4

=item Can't find '%s' symbol in %s

B<(F)> The bootstrap symbol could not be found in the extension module.

=item Can't load '%s' for module %s: %s

B<(F)> The loading or initialisation of the extension module failed.
The detailed error follows.

=item Undefined symbols present after loading %s: %s

B<(W)> As the message says, some symbols stay undefined although the
extension module was correctly loaded and initialised. The list of undefined
symbols follows.

=item XSLoader::load('Your::Module', $Your::Module::VERSION)

B<(F)> You tried to invoke C<load()> without any argument. You must supply
a module name, and optionally its version.

=back


d302 1
a302 1
delegated to C<DynaLoader>, which looks for the DLL along the C<@@INC> list.
d304 3
a306 3
In particular, this is applicable to the structure of C<@@INC> used for testing
not-yet-installed extensions.  This means that running uninstalled extensions
may have much more overhead than running the same extensions after
d309 1
d311 1
a311 24
=head1 BUGS

Please report any bugs or feature requests via the perlbug(1) utility.


=head1 SEE ALSO

L<DynaLoader>


=head1 AUTHORS

Ilya Zakharevich originally extracted C<XSLoader> from C<DynaLoader>.

CPAN version is currently maintained by SE<eacute>bastien Aperghis-Tramoni
E<lt>sebastien@@aperghis.netE<gt>

Previous maintainer was Michael G Schwern <schwern@@pobox.com>


=head1 COPYRIGHT

This program is free software; you can redistribute it and/or modify
it under the same terms as Perl itself.
d317 1
@


1.1.1.7
log
@import perl 5.10.0 from CPAN
@
text
@d18 1
a18 1
$VERSION = "0.08";
a64 7
print OUT <<'EOT' if $^O eq 'os2';

    # os2 static build can dynaload, but cannot dynaload Perl modules...
    die 'Dynaloaded Perl modules are not available in this build of Perl' if $OS2::is_static;

EOT

a84 2
EOT

a85 1
print OUT <<'EOT';
a88 1
EOT
a90 1
print OUT <<'EOT';
d153 1
a153 1
Version 0.08
d321 1
a321 1
=over
d323 1
a323 1
=item C<Can't find '%s' symbol in %s>
d327 1
a327 1
=item C<Can't load '%s' for module %s: %s>
d332 1
a332 1
=item C<Undefined symbols present after loading %s: %s>
d338 1
a338 1
=item C<XSLoader::load('Your::Module', $Your::Module::VERSION)>
d374 1
a374 1
E<lt>sebastien@@aperghis.netE<gt>.
d376 1
a376 1
Previous maintainer was Michael G Schwern <schwern@@pobox.com>.
@


1.1.1.8
log
@import perl 5.10.1
@
text
@d18 1
a18 1
$VERSION = "0.10";
d47 2
a48 2
    my $boots = "$module\::bootstrap";
    goto &$boots if defined &$boots;
a83 6
    if (-s $bs) { # only read file if it's not empty
#       print STDERR "BS: $bs ($^O, $dlsrc)\n" if $dl_debug;
        eval { do $bs; };
        warn "$bs: $@@\n" if $@@;
    }

d130 1
a130 1
    my $xs = dl_install_xsub($boots, $boot_symbol_ref, $file);
d165 1
a165 1
Version 0.10
d391 1
a391 3
=head1 COPYRIGHT & LICENSE

Copyright (C) 1990-2007 by Larry Wall and others.
@


