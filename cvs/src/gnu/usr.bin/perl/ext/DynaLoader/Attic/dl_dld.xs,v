head	1.11;
access;
symbols
	OPENBSD_5_6:1.10.0.18
	OPENBSD_5_6_BASE:1.10
	PERL_5_18_2:1.1.1.8
	PERL:1.1.1
	OPENBSD_5_5:1.10.0.16
	OPENBSD_5_5_BASE:1.10
	OPENBSD_5_4:1.10.0.12
	OPENBSD_5_4_BASE:1.10
	PERL_5_16_3:1.1.1.8
	OPENBSD_5_3:1.10.0.10
	OPENBSD_5_3_BASE:1.10
	OPENBSD_5_2:1.10.0.8
	OPENBSD_5_2_BASE:1.10
	OPENBSD_5_1_BASE:1.10
	OPENBSD_5_1:1.10.0.6
	OPENBSD_5_0:1.10.0.4
	OPENBSD_5_0_BASE:1.10
	OPENBSD_4_9:1.10.0.2
	OPENBSD_4_9_BASE:1.10
	PERL_5_12_2:1.1.1.8
	OPENBSD_4_8:1.9.0.4
	OPENBSD_4_8_BASE:1.9
	OPENBSD_4_7:1.9.0.2
	OPENBSD_4_7_BASE:1.9
	PERL_5_10_1:1.1.1.8
	OPENBSD_4_6:1.8.0.6
	OPENBSD_4_6_BASE:1.8
	OPENBSD_4_5:1.8.0.2
	OPENBSD_4_5_BASE:1.8
	PERL_5_10_0:1.1.1.7
	OPENBSD_4_4:1.7.0.20
	OPENBSD_4_4_BASE:1.7
	OPENBSD_4_3:1.7.0.18
	OPENBSD_4_3_BASE:1.7
	OPENBSD_4_2:1.7.0.16
	OPENBSD_4_2_BASE:1.7
	OPENBSD_4_1:1.7.0.14
	OPENBSD_4_1_BASE:1.7
	OPENBSD_4_0:1.7.0.12
	OPENBSD_4_0_BASE:1.7
	PERL_5_8_8:1.1.1.6
	OPENBSD_3_9:1.7.0.10
	OPENBSD_3_9_BASE:1.7
	OPENBSD_3_8:1.7.0.8
	OPENBSD_3_8_BASE:1.7
	OPENBSD_3_7:1.7.0.6
	OPENBSD_3_7_BASE:1.7
	PERL_5_8_6:1.1.1.6
	OPENBSD_3_6:1.7.0.4
	OPENBSD_3_6_BASE:1.7
	PERL_5_8_5:1.1.1.5
	PERL_5_8_3:1.1.1.4
	OPENBSD_3_5:1.7.0.2
	OPENBSD_3_5_BASE:1.7
	PERL_5_8_2:1.1.1.4
	OPENBSD_3_4:1.6.0.4
	OPENBSD_3_4_BASE:1.6
	OPENBSD_3_3:1.6.0.2
	OPENBSD_3_3_BASE:1.6
	PERL_5_8_0:1.1.1.4
	OPENBSD_3_2:1.5.0.6
	OPENBSD_3_2_BASE:1.5
	OPENBSD_3_1:1.5.0.4
	OPENBSD_3_1_BASE:1.5
	OPENBSD_3_0:1.5.0.2
	OPENBSD_3_0_BASE:1.5
	PERL_5_6_1:1.1.1.3
	OPENBSD_2_9:1.4.0.6
	OPENBSD_2_9_BASE:1.4
	OPENBSD_2_8:1.4.0.4
	OPENBSD_2_8_BASE:1.4
	OPENBSD_2_7:1.4.0.2
	OPENBSD_2_7_BASE:1.4
	PERL_5_6_0:1.1.1.3
	OPENBSD_2_6:1.3.0.2
	OPENBSD_2_6_BASE:1.3
	PERL_500503:1.1.1.2
	CPAN:1.1.1
	OPENBSD_2_5:1.2.0.6
	OPENBSD_2_5_BASE:1.2
	OPENBSD_2_4:1.2.0.4
	OPENBSD_2_4_BASE:1.2
	OPENBSD_2_3:1.2.0.2
	OPENBSD_2_3_BASE:1.2
	OPENBSD_2_2:1.1.1.1.0.6
	OPENBSD_2_2_BASE:1.1.1.1
	OPENBSD_2_1:1.1.1.1.0.4
	OPENBSD_2_1_BASE:1.1.1.1
	OPENBSD_2_0:1.1.1.1.0.2
	OPENBSD_2_0_BASE:1.1.1.1
	perl5003:1.1.1.1
	lwall:1.1.1;
locks; strict;
comment	@# @;
expand	@o@;


1.11
date	2014.11.17.20.57.05;	author afresh1;	state dead;
branches;
next	1.10;
commitid	QP75iYx42Uo7mMxO;

1.10
date	2010.09.24.15.06.56;	author millert;	state Exp;
branches;
next	1.9;

1.9
date	2009.10.12.18.24.27;	author millert;	state Exp;
branches;
next	1.8;

1.8
date	2008.09.29.17.36.04;	author millert;	state Exp;
branches;
next	1.7;

1.7
date	2003.12.03.03.02.28;	author millert;	state Exp;
branches;
next	1.6;

1.6
date	2002.10.27.22.25.22;	author millert;	state Exp;
branches;
next	1.5;

1.5
date	2001.05.24.18.35.09;	author millert;	state Exp;
branches;
next	1.4;

1.4
date	2000.04.06.17.05.12;	author millert;	state Exp;
branches;
next	1.3;

1.3
date	99.04.29.22.51.27;	author millert;	state Exp;
branches;
next	1.2;

1.2
date	97.11.30.07.55.10;	author millert;	state Exp;
branches;
next	1.1;

1.1
date	96.08.19.10.12.03;	author downsj;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	96.08.19.10.12.03;	author downsj;	state Exp;
branches;
next	1.1.1.2;

1.1.1.2
date	99.04.29.22.38.41;	author millert;	state Exp;
branches;
next	1.1.1.3;

1.1.1.3
date	2000.04.06.16.09.09;	author millert;	state Exp;
branches;
next	1.1.1.4;

1.1.1.4
date	2002.10.27.22.14.54;	author millert;	state Exp;
branches;
next	1.1.1.5;

1.1.1.5
date	2004.08.09.17.45.57;	author millert;	state Exp;
branches;
next	1.1.1.6;

1.1.1.6
date	2005.01.15.21.16.46;	author millert;	state Exp;
branches;
next	1.1.1.7;

1.1.1.7
date	2008.09.29.17.18.16;	author millert;	state Exp;
branches;
next	1.1.1.8;

1.1.1.8
date	2009.10.12.18.11.11;	author millert;	state Exp;
branches;
next	;


desc
@@


1.11
log
@Fix merge conflicts, remove extra files, match upstream perl-5.20.1

ok deraadt@@ sthen@@ espie@@ miod@@
@
text
@/*
 *    Written 3/1/94, Robert Sanders <Robert.Sanders@@linux.org>
 *
 * based upon the file "dl.c", which is
 *    Copyright (c) 1994, Larry Wall
 *
 *    You may distribute under the terms of either the GNU General Public
 *    License or the Artistic License, as specified in the README file.
 *
 * $Date: 1994/03/07 00:21:43 $
 * $Source: /home/rsanders/src/perl5alpha6/RCS/dld_dl.c,v $
 * $Revision: 1.4 $
 * $State: Exp $
 *
 * $Log: dld_dl.c,v $
 * Removed implicit link against libc.  1994/09/14 William Setzer.
 *
 * Integrated other DynaLoader changes. 1994/06/08 Tim Bunce.
 *
 * rewrote dl_load_file, misc updates.  1994/09/03 William Setzer.
 *
 * Revision 1.4  1994/03/07  00:21:43  rsanders
 * added min symbol count for load_libs and switched order so system libs
 * are loaded after app-specified libs.
 *
 * Revision 1.3  1994/03/05  01:17:26  rsanders
 * added path searching.
 *
 * Revision 1.2  1994/03/05  00:52:39  rsanders
 * added package-specified libraries.
 *
 * Revision 1.1  1994/03/05  00:33:40  rsanders
 * Initial revision
 *
 *
 */

#include "EXTERN.h"
#include "perl.h"
#include "XSUB.h"

#include <dld.h>	/* GNU DLD header file */
#include <unistd.h>

typedef struct {
    AV *	x_resolve_using;
    AV *	x_require_symbols;
} my_cxtx_t;		/* this *must* be named my_cxtx_t */

#define DL_CXT_EXTRA	/* ask for dl_cxtx to be defined in dlutils.c */
#include "dlutils.c"	/* for SaveError() etc */

#define dl_resolve_using	(dl_cxtx.x_resolve_using)
#define dl_require_symbols	(dl_cxtx.x_require_symbols)

static void
dl_private_init(pTHX)
{
    dl_generic_private_init(aTHX);
    {
	int dlderr;
	dMY_CXT;

	dl_resolve_using   = get_av("DynaLoader::dl_resolve_using", GV_ADDMULTI);
	dl_require_symbols = get_av("DynaLoader::dl_require_symbols", GV_ADDMULTI);
#ifdef __linux__
	dlderr = dld_init("/proc/self/exe");
	if (dlderr) {
#endif
	    dlderr = dld_init(dld_find_executable(PL_origargv[0]));
	    if (dlderr) {
		char *msg = dld_strerror(dlderr);
		SaveError(aTHX_ "dld_init(%s) failed: %s", PL_origargv[0], msg);
		DLDEBUG(1,PerlIO_printf(Perl_debug_log, "%s", dl_last_error));
	    }
#ifdef __linux__
	}
#endif
    }
}


MODULE = DynaLoader     PACKAGE = DynaLoader

BOOT:
    (void)dl_private_init();


char *
dl_load_file(filename, flags=0)
    char *	filename
    int		flags
    PREINIT:
    int dlderr,x,max;
    GV *gv;
    dMY_CXT;
    CODE:
    RETVAL = filename;
    DLDEBUG(1,PerlIO_printf(Perl_debug_log, "dl_load_file(%s,%x):\n", filename,flags));
    if (flags & 0x01)
	Perl_croak(aTHX_ "Can't make loaded symbols global on this platform while loading %s",filename);
    max = AvFILL(dl_require_symbols);
    for (x = 0; x <= max; x++) {
	char *sym = SvPVX(*av_fetch(dl_require_symbols, x, 0));
	DLDEBUG(1,PerlIO_printf(Perl_debug_log, "dld_create_ref(%s)\n", sym));
	if (dlderr = dld_create_reference(sym)) {
	    SaveError(aTHX_ "dld_create_reference(%s): %s", sym,
		      dld_strerror(dlderr));
	    goto haverror;
	}
    }

    DLDEBUG(1,PerlIO_printf(Perl_debug_log, "dld_link(%s)\n", filename));
    if (dlderr = dld_link(filename)) {
	SaveError(aTHX_ "dld_link(%s): %s", filename, dld_strerror(dlderr));
	goto haverror;
    }

    max = AvFILL(dl_resolve_using);
    for (x = 0; x <= max; x++) {
	char *sym = SvPVX(*av_fetch(dl_resolve_using, x, 0));
	DLDEBUG(1,PerlIO_printf(Perl_debug_log, "dld_link(%s)\n", sym));
	if (dlderr = dld_link(sym)) {
	    SaveError(aTHX_ "dld_link(%s): %s", sym, dld_strerror(dlderr));
	    goto haverror;
	}
    }
    DLDEBUG(2,PerlIO_printf(Perl_debug_log, "libref=%s\n", RETVAL));
haverror:
    ST(0) = sv_newmortal() ;
    if (dlderr == 0)
	sv_setiv(ST(0), PTR2IV(RETVAL));


void *
dl_find_symbol(libhandle, symbolname)
    void *	libhandle
    char *	symbolname
    CODE:
    DLDEBUG(2,PerlIO_printf(Perl_debug_log, "dl_find_symbol(handle=%x, symbol=%s)\n",
	    libhandle, symbolname));
    RETVAL = (void *)dld_get_func(symbolname);
    /* if RETVAL==NULL we should try looking for a non-function symbol */
    DLDEBUG(2,PerlIO_printf(Perl_debug_log, "  symbolref = %x\n", RETVAL));
    ST(0) = sv_newmortal() ;
    if (RETVAL == NULL)
	SaveError(aTHX_ "dl_find_symbol: Unable to find '%s' symbol", symbolname) ;
    else
	sv_setiv(ST(0), PTR2IV(RETVAL));


void
dl_undef_symbols()
    PPCODE:
    if (dld_undefined_sym_count) {
	int x;
	char **undef_syms = dld_list_undefined_sym();
	EXTEND(SP, dld_undefined_sym_count);
	for (x=0; x < dld_undefined_sym_count; x++)
	    PUSHs(sv_2mortal(newSVpv(undef_syms[x]+1, 0)));
	free(undef_syms);
    }



# These functions should not need changing on any platform:

void
dl_install_xsub(perl_name, symref, filename="$Package")
    char *	perl_name
    void *	symref 
    const char *	filename
    CODE:
    DLDEBUG(2,PerlIO_printf(Perl_debug_log, "dl_install_xsub(name=%s, symref=%x)\n",
	    perl_name, symref));
    ST(0) = sv_2mortal(newRV((SV*)newXS_flags(perl_name,
					      (void(*)(pTHX_ CV *))symref,
					      filename, NULL,
					      XS_DYNAMIC_FILENAME)));

char *
dl_error()
    PREINIT:
    dMY_CXT;
    CODE:
    RETVAL = dl_last_error ;
    OUTPUT:
    RETVAL

#if defined(USE_ITHREADS)

void
CLONE(...)
    CODE:
    MY_CXT_CLONE;

    /* MY_CXT_CLONE just does a memcpy on the whole structure, so to avoid
     * using Perl variables that belong to another thread, we create our 
     * own for this thread.
     */
    MY_CXT.x_dl_last_error = newSVpvn("", 0);
    dl_resolve_using   = get_av("DynaLoader::dl_resolve_using", GV_ADDMULTI);
    dl_require_symbols = get_av("DynaLoader::dl_require_symbols", GV_ADDMULTI);

#endif

# end.
@


1.10
log
@merge in perl 5.12.2 plus local changes
@
text
@@


1.9
log
@Merge in perl 5.10.1
@
text
@@


1.8
log
@fix conflicts and merge in local changes to perl 5.10.0
@
text
@d172 1
a172 1
    char *	filename
d189 17
@


1.7
log
@Resolve conflicts for perl 5.8.2, remove old files, and add OpenBSD-specific scaffolding
@
text
@d176 4
a179 4
    ST(0) = sv_2mortal(newRV((SV*)newXS(perl_name,
					(void(*)(pTHX_ CV *))symref,
					filename)));

@


1.6
log
@Resolve conflicts, remove old files, merge local changes
@
text
@@


1.5
log
@merge in perl 5.6.1 with our local changes
@
text
@d45 6
d53 2
a54 2
static AV *dl_resolve_using   = Nullav;
static AV *dl_require_symbols = Nullav;
a58 1
    int dlderr;
d60 6
a65 2
    dl_resolve_using   = get_av("DynaLoader::dl_resolve_using", GV_ADDMULTI);
    dl_require_symbols = get_av("DynaLoader::dl_require_symbols", GV_ADDMULTI);
d67 2
a68 2
    dlderr = dld_init("/proc/self/exe");
    if (dlderr) {
d70 6
a75 6
        dlderr = dld_init(dld_find_executable(PL_origargv[0]));
        if (dlderr) {
            char *msg = dld_strerror(dlderr);
            SaveError(aTHX_ "dld_init(%s) failed: %s", PL_origargv[0], msg);
            DLDEBUG(1,PerlIO_printf(Perl_debug_log, "%s", LastError));
        }
d77 2
a79 1
#endif
d96 1
d183 2
d186 1
a186 1
    RETVAL = LastError ;
@


1.4
log
@perl-5.6.0 + local changes
@
text
@@


1.3
log
@perl5.005_03 (stock)
@
text
@d51 1
a51 1
dl_private_init()
d54 3
a56 3
    dl_generic_private_init();
    dl_resolve_using   = perl_get_av("DynaLoader::dl_resolve_using",   0x4);
    dl_require_symbols = perl_get_av("DynaLoader::dl_require_symbols", 0x4);
d64 2
a65 2
            SaveError("dld_init(%s) failed: %s", PL_origargv[0], msg);
            DLDEBUG(1,PerlIO_printf(PerlIO_stderr(), "%s", LastError));
d88 1
a88 1
    DLDEBUG(1,PerlIO_printf(PerlIO_stderr(), "dl_load_file(%s,%x):\n", filename,flags));
d90 1
a90 1
	croak("Can't make loaded symbols global on this platform while loading %s",filename);
d94 1
a94 1
	DLDEBUG(1,PerlIO_printf(PerlIO_stderr(), "dld_create_ref(%s)\n", sym));
d96 1
a96 1
	    SaveError("dld_create_reference(%s): %s", sym,
d102 1
a102 1
    DLDEBUG(1,PerlIO_printf(PerlIO_stderr(), "dld_link(%s)\n", filename));
d104 1
a104 1
	SaveError("dld_link(%s): %s", filename, dld_strerror(dlderr));
d111 1
a111 1
	DLDEBUG(1,PerlIO_printf(PerlIO_stderr(), "dld_link(%s)\n", sym));
d113 1
a113 1
	    SaveError("dld_link(%s): %s", sym, dld_strerror(dlderr));
d117 1
a117 1
    DLDEBUG(2,PerlIO_printf(PerlIO_stderr(), "libref=%s\n", RETVAL));
d121 1
a121 1
	sv_setiv(ST(0), (IV)RETVAL);
d129 1
a129 1
    DLDEBUG(2,PerlIO_printf(PerlIO_stderr(), "dl_find_symbol(handle=%x, symbol=%s)\n",
d133 1
a133 1
    DLDEBUG(2,PerlIO_printf(PerlIO_stderr(), "  symbolref = %x\n", RETVAL));
d136 1
a136 1
	SaveError("dl_find_symbol: Unable to find '%s' symbol", symbolname) ;
d138 1
a138 1
	sv_setiv(ST(0), (IV)RETVAL);
d163 1
a163 1
    DLDEBUG(2,PerlIO_printf(PerlIO_stderr(), "dl_install_xsub(name=%s, symref=%x)\n",
d165 3
a167 1
    ST(0)=sv_2mortal(newRV((SV*)newXS(perl_name, (void(*)())symref, filename)));
@


1.2
log
@perl 5.004_04
@
text
@d61 1
a61 1
        dlderr = dld_init(dld_find_executable(origargv[0]));
d64 1
a64 1
            SaveError("dld_init(%s) failed: %s", origargv[0], msg);
d147 1
a147 1
	EXTEND(sp, dld_undefined_sym_count);
@


1.1
log
@Initial revision
@
text
@d65 1
a65 1
            DLDEBUG(1,fprintf(stderr,"%s", LastError));
d80 1
a80 1
dl_load_file(filename)
d82 2
a83 1
    CODE:
d86 1
d88 3
a90 2
    DLDEBUG(1,fprintf(stderr,"dl_load_file(%s)\n", filename));

d94 1
a94 1
	DLDEBUG(1,fprintf(stderr, "dld_create_ref(%s)\n", sym));
d102 1
a102 1
    DLDEBUG(1,fprintf(stderr, "dld_link(%s)\n", filename));
d111 1
a111 1
	DLDEBUG(1,fprintf(stderr, "dld_link(%s)\n", sym));
d117 1
a117 1
    DLDEBUG(2,fprintf(stderr,"libref=%s\n", RETVAL));
d129 1
a129 1
    DLDEBUG(2,fprintf(stderr,"dl_find_symbol(handle=%x, symbol=%s)\n",
d133 1
a133 1
    DLDEBUG(2,fprintf(stderr,"  symbolref = %x\n", RETVAL));
d163 1
a163 1
    DLDEBUG(2,fprintf(stderr,"dl_install_xsub(name=%s, symref=%x)\n",
@


1.1.1.1
log
@Import of Perl 5.003 into the tree.  Makefile.bsd-wrapper and
config.sh.OpenBSD are the only local changes.
@
text
@@


1.1.1.2
log
@perl5.005_03
@
text
@d61 1
a61 1
        dlderr = dld_init(dld_find_executable(PL_origargv[0]));
d64 2
a65 2
            SaveError("dld_init(%s) failed: %s", PL_origargv[0], msg);
            DLDEBUG(1,PerlIO_printf(PerlIO_stderr(), "%s", LastError));
d80 1
a80 1
dl_load_file(filename, flags=0)
d82 1
a82 2
    int		flags
    PREINIT:
a84 1
    CODE:
d86 2
a87 3
    DLDEBUG(1,PerlIO_printf(PerlIO_stderr(), "dl_load_file(%s,%x):\n", filename,flags));
    if (flags & 0x01)
	croak("Can't make loaded symbols global on this platform while loading %s",filename);
d91 1
a91 1
	DLDEBUG(1,PerlIO_printf(PerlIO_stderr(), "dld_create_ref(%s)\n", sym));
d99 1
a99 1
    DLDEBUG(1,PerlIO_printf(PerlIO_stderr(), "dld_link(%s)\n", filename));
d108 1
a108 1
	DLDEBUG(1,PerlIO_printf(PerlIO_stderr(), "dld_link(%s)\n", sym));
d114 1
a114 1
    DLDEBUG(2,PerlIO_printf(PerlIO_stderr(), "libref=%s\n", RETVAL));
d126 1
a126 1
    DLDEBUG(2,PerlIO_printf(PerlIO_stderr(), "dl_find_symbol(handle=%x, symbol=%s)\n",
d130 1
a130 1
    DLDEBUG(2,PerlIO_printf(PerlIO_stderr(), "  symbolref = %x\n", RETVAL));
d144 1
a144 1
	EXTEND(SP, dld_undefined_sym_count);
d160 1
a160 1
    DLDEBUG(2,PerlIO_printf(PerlIO_stderr(), "dl_install_xsub(name=%s, symref=%x)\n",
@


1.1.1.3
log
@virgin perl 5.6.0
@
text
@d51 1
a51 1
dl_private_init(pTHX)
d54 3
a56 3
    dl_generic_private_init(aTHX);
    dl_resolve_using   = get_av("DynaLoader::dl_resolve_using", GV_ADDMULTI);
    dl_require_symbols = get_av("DynaLoader::dl_require_symbols", GV_ADDMULTI);
d64 2
a65 2
            SaveError(aTHX_ "dld_init(%s) failed: %s", PL_origargv[0], msg);
            DLDEBUG(1,PerlIO_printf(Perl_debug_log, "%s", LastError));
d88 1
a88 1
    DLDEBUG(1,PerlIO_printf(Perl_debug_log, "dl_load_file(%s,%x):\n", filename,flags));
d90 1
a90 1
	Perl_croak(aTHX_ "Can't make loaded symbols global on this platform while loading %s",filename);
d94 1
a94 1
	DLDEBUG(1,PerlIO_printf(Perl_debug_log, "dld_create_ref(%s)\n", sym));
d96 1
a96 1
	    SaveError(aTHX_ "dld_create_reference(%s): %s", sym,
d102 1
a102 1
    DLDEBUG(1,PerlIO_printf(Perl_debug_log, "dld_link(%s)\n", filename));
d104 1
a104 1
	SaveError(aTHX_ "dld_link(%s): %s", filename, dld_strerror(dlderr));
d111 1
a111 1
	DLDEBUG(1,PerlIO_printf(Perl_debug_log, "dld_link(%s)\n", sym));
d113 1
a113 1
	    SaveError(aTHX_ "dld_link(%s): %s", sym, dld_strerror(dlderr));
d117 1
a117 1
    DLDEBUG(2,PerlIO_printf(Perl_debug_log, "libref=%s\n", RETVAL));
d121 1
a121 1
	sv_setiv(ST(0), PTR2IV(RETVAL));
d129 1
a129 1
    DLDEBUG(2,PerlIO_printf(Perl_debug_log, "dl_find_symbol(handle=%x, symbol=%s)\n",
d133 1
a133 1
    DLDEBUG(2,PerlIO_printf(Perl_debug_log, "  symbolref = %x\n", RETVAL));
d136 1
a136 1
	SaveError(aTHX_ "dl_find_symbol: Unable to find '%s' symbol", symbolname) ;
d138 1
a138 1
	sv_setiv(ST(0), PTR2IV(RETVAL));
d163 1
a163 1
    DLDEBUG(2,PerlIO_printf(Perl_debug_log, "dl_install_xsub(name=%s, symref=%x)\n",
d165 1
a165 3
    ST(0) = sv_2mortal(newRV((SV*)newXS(perl_name,
					(void(*)(pTHX_ CV *))symref,
					filename)));
@


1.1.1.4
log
@stock perl 5.8.0 from CPAN
@
text
@a44 6
typedef struct {
    AV *	x_resolve_using;
    AV *	x_require_symbols;
} my_cxtx_t;		/* this *must* be named my_cxtx_t */

#define DL_CXT_EXTRA	/* ask for dl_cxtx to be defined in dlutils.c */
d47 2
a48 2
#define dl_resolve_using	(dl_cxtx.x_resolve_using)
#define dl_require_symbols	(dl_cxtx.x_require_symbols)
d53 1
d55 2
a56 6
    {
	int dlderr;
	dMY_CXT;

	dl_resolve_using   = get_av("DynaLoader::dl_resolve_using", GV_ADDMULTI);
	dl_require_symbols = get_av("DynaLoader::dl_require_symbols", GV_ADDMULTI);
d58 2
a59 2
	dlderr = dld_init("/proc/self/exe");
	if (dlderr) {
d61 6
a66 6
	    dlderr = dld_init(dld_find_executable(PL_origargv[0]));
	    if (dlderr) {
		char *msg = dld_strerror(dlderr);
		SaveError(aTHX_ "dld_init(%s) failed: %s", PL_origargv[0], msg);
		DLDEBUG(1,PerlIO_printf(Perl_debug_log, "%s", dl_last_error));
	    }
d68 1
a68 1
	}
a69 1
    }
a85 1
    dMY_CXT;
a171 2
    PREINIT:
    dMY_CXT;
d173 1
a173 1
    RETVAL = dl_last_error ;
@


1.1.1.5
log
@Import of stock perl 5.8.5
@
text
@d10 3
a12 3
 * $Date: 2003/12/03 03:02:28 $
 * $Source: /cvs/src/gnu/usr.bin/perl/ext/DynaLoader/dl_dld.xs,v $
 * $Revision: 1.7 $
d15 1
a15 4
 * $Log: dl_dld.xs,v $
 * Revision 1.7  2003/12/03 03:02:28  millert
 * Resolve conflicts for perl 5.8.2, remove old files, and add OpenBSD-specific scaffolding
 *
@


1.1.1.6
log
@perl 5.8.6 from CPAN
@
text
@d10 3
a12 3
 * $Date: 1994/03/07 00:21:43 $
 * $Source: /home/rsanders/src/perl5alpha6/RCS/dld_dl.c,v $
 * $Revision: 1.4 $
d15 4
a18 1
 * $Log: dld_dl.c,v $
@


1.1.1.7
log
@import perl 5.10.0 from CPAN
@
text
@d176 4
a179 4
    ST(0) = sv_2mortal(newRV((SV*)newXS_flags(perl_name,
					      (void(*)(pTHX_ CV *))symref,
					      filename, NULL,
					      XS_DYNAMIC_FILENAME)));
@


1.1.1.8
log
@import perl 5.10.1
@
text
@d172 1
a172 1
    const char *	filename
a188 17

#if defined(USE_ITHREADS)

void
CLONE(...)
    CODE:
    MY_CXT_CLONE;

    /* MY_CXT_CLONE just does a memcpy on the whole structure, so to avoid
     * using Perl variables that belong to another thread, we create our 
     * own for this thread.
     */
    MY_CXT.x_dl_last_error = newSVpvn("", 0);
    dl_resolve_using   = get_av("DynaLoader::dl_resolve_using", GV_ADDMULTI);
    dl_require_symbols = get_av("DynaLoader::dl_require_symbols", GV_ADDMULTI);

#endif
@


