head	1.2;
access;
symbols
	PERL_5_24_2:1.1.1.3
	OPENBSD_6_1:1.2.0.6
	OPENBSD_6_1_BASE:1.2
	OPENBSD_6_0:1.2.0.4
	OPENBSD_6_0_BASE:1.2
	OPENBSD_5_9:1.1.1.2.0.4
	OPENBSD_5_9_BASE:1.1.1.2
	OPENBSD_5_8:1.1.1.2.0.6
	OPENBSD_5_8_BASE:1.1.1.2
	PERL_5_20_2:1.1.1.2
	OPENBSD_5_7:1.1.1.2.0.2
	OPENBSD_5_7_BASE:1.1.1.2
	PERL_5_20_1:1.1.1.2
	OPENBSD_5_6:1.1.1.1.0.8
	OPENBSD_5_6_BASE:1.1.1.1
	PERL_5_18_2:1.1.1.1
	PERL:1.1.1
	OPENBSD_5_5:1.1.1.1.0.6
	OPENBSD_5_5_BASE:1.1.1.1
	OPENBSD_5_4:1.1.1.1.0.2
	OPENBSD_5_4_BASE:1.1.1.1
	PERL_5_16_3:1.1.1.1
	CPAN:1.1.1;
locks; strict;
comment	@# @;
expand	@o@;


1.2
date	2016.07.25.10.53.04;	author afresh1;	state Exp;
branches;
next	1.1;
commitid	FHUgABTHZQuYQh2B;

1.1
date	2013.03.25.20.08.46;	author sthen;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	2013.03.25.20.08.46;	author sthen;	state Exp;
branches;
next	1.1.1.2;

1.1.1.2
date	2014.11.17.20.53.06;	author afresh1;	state Exp;
branches
	1.1.1.2.4.1
	1.1.1.2.6.1;
next	1.1.1.3;
commitid	B31cAbBIXiCqnL97;

1.1.1.3
date	2017.08.14.13.46.12;	author afresh1;	state Exp;
branches;
next	;
commitid	fAzrs78vdW2Yfc6A;

1.1.1.2.4.1
date	2016.08.05.01.01.40;	author afresh1;	state Exp;
branches;
next	;
commitid	HjAJx2yjL4A8HWon;

1.1.1.2.6.1
date	2016.08.05.01.00.56;	author afresh1;	state Exp;
branches;
next	;
commitid	wK3bUiy9jNch0Key;


desc
@@


1.2
log
@Patch perl CVE-2016-1238

The problem relates to Perl 5 ("perl") loading modules from the
includes directory array ("@@INC") in which the last element is the
current directory (".").  That means that, when "perl" wants to
load a module (during first compilation or during lazy loading of
a module in run-time), perl will look for the module in the current
directory at the end, since '.' is the last include directory in
its array of include directories to seek. The issue is with requiring
libraries that are in "." but are not otherwise installed.

The major problem with this behavior is that it unexpectedly puts
a user at risk whenever they execute any Perl scripts from a directory
that is writable by other accounts on the system. For instance, if
a user is logged in as root and changes directory into /tmp or an
account's home directory, it is possible to now run any shell
commands that are written in C, Python or Ruby without fear.

The same isn't true for any shell commands that are written in Perl,
since a significant proportion of Perl scripts will execute code
in the current working directory whenever they are run. For example,
if a user on a shared system creates the file /tmp/Pod/Perldoc/Toterm.pm,
and then I log in as root, change directory to /tmp, and run "perldoc
perlrun", it will execute the code they have placed in the file.


ok deraadt@@
@
text
@=pod

=head1 NAME

pod2html - convert .pod files to .html files

=head1 SYNOPSIS

    pod2html --help --htmldir=<name> --htmlroot=<URL>
             --infile=<name> --outfile=<name>
             --podpath=<name>:...:<name> --podroot=<name>
             --cachedir=<name> --flush --recurse --norecurse
             --quiet --noquiet --verbose --noverbose
             --index --noindex --backlink --nobacklink
             --header --noheader --poderrors --nopoderrors
             --css=<URL> --title=<name>

=head1 DESCRIPTION

Converts files from pod format (see L<perlpod>) to HTML format.

=head1 ARGUMENTS

pod2html takes the following arguments:

=over 4

=item help

  --help

Displays the usage message.

=item htmldir

  --htmldir=name

Sets the directory to which all cross references in the resulting HTML file
will be relative. Not passing this causes all links to be absolute since this
is the value that tells Pod::Html the root of the documentation tree.

Do not use this and --htmlroot in the same call to pod2html; they are mutually
exclusive.

=item htmlroot

  --htmlroot=URL

Sets the base URL for the HTML files.  When cross-references are made, the
HTML root is prepended to the URL.

Do not use this if relative links are desired: use --htmldir instead.

Do not pass both this and --htmldir to pod2html; they are mutually exclusive.

=item infile

  --infile=name

Specify the pod file to convert.  Input is taken from STDIN if no
infile is specified.

=item outfile

  --outfile=name

Specify the HTML file to create.  Output goes to STDOUT if no outfile
is specified.

=item podroot

  --podroot=name

Specify the base directory for finding library pods.

=item podpath

  --podpath=name:...:name

Specify which subdirectories of the podroot contain pod files whose
HTML converted forms can be linked-to in cross-references.

=item cachedir

  --cachedir=name

Specify which directory is used for storing cache. Default directory is the
current working directory.

=item flush

  --flush

Flush the cache.

=item backlink

  --backlink

Turn =head1 directives into links pointing to the top of the HTML file.

=item nobacklink

  --nobacklink

Do not turn =head1 directives into links pointing to the top of the HTML file
(default behaviour).

=item header

  --header

Create header and footer blocks containing the text of the "NAME" section.

=item noheader

  --noheader

Do not create header and footer blocks containing the text of the "NAME"
section (default behaviour).

=item poderrors

  --poderrors

Include a "POD ERRORS" section in the outfile if there were any POD errors in
the infile (default behaviour).

=item nopoderrors

  --nopoderrors

Do not include a "POD ERRORS" section in the outfile if there were any POD
errors in the infile.

=item index

  --index

Generate an index at the top of the HTML file (default behaviour).

=item noindex

  --noindex

Do not generate an index at the top of the HTML file.


=item recurse

  --recurse

Recurse into subdirectories specified in podpath (default behaviour).

=item norecurse

  --norecurse

Do not recurse into subdirectories specified in podpath.

=item css

  --css=URL

Specify the URL of cascading style sheet to link from resulting HTML file.
Default is none style sheet.

=item title

  --title=title

Specify the title of the resulting HTML file.

=item quiet

  --quiet

Don't display mostly harmless warning messages.

=item noquiet

  --noquiet

Display mostly harmless warning messages (default behaviour). But this is not
the same as "verbose" mode.

=item verbose

  --verbose

Display progress messages.

=item noverbose

  --noverbose

Do not display progress messages (default behaviour).

=back

=head1 AUTHOR

Tom Christiansen, E<lt>tchrist@@perl.comE<gt>.

=head1 BUGS

See L<Pod::Html> for a list of known bugs in the translator.

=head1 SEE ALSO

L<perlpod>, L<Pod::Html>

=head1 COPYRIGHT

This program is distributed under the Artistic License.

=cut

BEGIN { pop @@INC if $INC[-1] eq '.' }
use Pod::Html;

pod2html @@ARGV;
@


1.1
log
@Initial revision
@
text
@d9 2
a10 1
    pod2html --help --htmlroot=<name> --infile=<name> --outfile=<name>
d12 5
a16 2
             --recurse --norecurse --verbose
             --index --noindex --title=<name>
d34 11
d47 6
a52 1
  --htmlroot=name
d54 1
a54 2
Sets the base URL for the HTML files.  When cross-references are made,
the HTML root is prepended to the URL.
d83 53
d161 7
d174 13
d193 6
d219 1
@


1.1.1.1
log
@import perl 5.16.3 from CPAN - worked on by Andrew Fresh and myself
@
text
@@


1.1.1.2
log
@Import perl-5.20.1
@
text
@d9 1
a9 2
    pod2html --help --htmldir=<name> --htmlroot=<URL>
             --infile=<name> --outfile=<name>
d11 2
a12 5
             --cachedir=<name> --flush --recurse --norecurse
             --quiet --noquiet --verbose --noverbose
             --index --noindex --backlink --nobacklink
             --header --noheader --poderrors --nopoderrors
             --css=<URL> --title=<name>
a29 11
=item htmldir

  --htmldir=name

Sets the directory to which all cross references in the resulting HTML file
will be relative. Not passing this causes all links to be absolute since this
is the value that tells Pod::Html the root of the documentation tree.

Do not use this and --htmlroot in the same call to pod2html; they are mutually
exclusive.

d32 1
a32 6
  --htmlroot=URL

Sets the base URL for the HTML files.  When cross-references are made, the
HTML root is prepended to the URL.

Do not use this if relative links are desired: use --htmldir instead.
d34 2
a35 1
Do not pass both this and --htmldir to pod2html; they are mutually exclusive.
a63 53
=item cachedir

  --cachedir=name

Specify which directory is used for storing cache. Default directory is the
current working directory.

=item flush

  --flush

Flush the cache.

=item backlink

  --backlink

Turn =head1 directives into links pointing to the top of the HTML file.

=item nobacklink

  --nobacklink

Do not turn =head1 directives into links pointing to the top of the HTML file
(default behaviour).

=item header

  --header

Create header and footer blocks containing the text of the "NAME" section.

=item noheader

  --noheader

Do not create header and footer blocks containing the text of the "NAME"
section (default behaviour).

=item poderrors

  --poderrors

Include a "POD ERRORS" section in the outfile if there were any POD errors in
the infile (default behaviour).

=item nopoderrors

  --nopoderrors

Do not include a "POD ERRORS" section in the outfile if there were any POD
errors in the infile.

a88 7
=item css

  --css=URL

Specify the URL of cascading style sheet to link from resulting HTML file.
Default is none style sheet.

a94 13
=item quiet

  --quiet

Don't display mostly harmless warning messages.

=item noquiet

  --noquiet

Display mostly harmless warning messages (default behaviour). But this is not
the same as "verbose" mode.

a99 6

=item noverbose

  --noverbose

Do not display progress messages (default behaviour).
@


1.1.1.3
log
@Import perl-5.24.2
@
text
@a218 1
BEGIN { pop @@INC if $INC[-1] eq '.' }
@


1.1.1.2.4.1
log
@Patch perl CVE-2016-1238

The problem relates to Perl 5 ("perl") loading modules from the
includes directory array ("@@INC") in which the last element is the
current directory (".").  That means that, when "perl" wants to
load a module (during first compilation or during lazy loading of
a module in run-time), perl will look for the module in the current
directory at the end, since '.' is the last include directory in
its array of include directories to seek. The issue is with requiring
libraries that are in "." but are not otherwise installed.

The major problem with this behavior is that it unexpectedly puts
a user at risk whenever they execute any Perl scripts from a directory
that is writable by other accounts on the system. For instance, if
a user is logged in as root and changes directory into /tmp or an
account's home directory, it is possible to now run any shell
commands that are written in C, Python or Ruby without fear.

The same isn't true for any shell commands that are written in Perl,
since a significant proportion of Perl scripts will execute code
in the current working directory whenever they are run. For example,
if a user on a shared system creates the file /tmp/Pod/Perldoc/Toterm.pm,
and then I log in as root, change directory to /tmp, and run "perldoc
perlrun", it will execute the code they have placed in the file.
@
text
@a218 1
BEGIN { pop @@INC if $INC[-1] eq '.' }
@


1.1.1.2.6.1
log
@Patch perl CVE-2016-1238

The problem relates to Perl 5 ("perl") loading modules from the
includes directory array ("@@INC") in which the last element is the
current directory (".").  That means that, when "perl" wants to
load a module (during first compilation or during lazy loading of
a module in run-time), perl will look for the module in the current
directory at the end, since '.' is the last include directory in
its array of include directories to seek. The issue is with requiring
libraries that are in "." but are not otherwise installed.

The major problem with this behavior is that it unexpectedly puts
a user at risk whenever they execute any Perl scripts from a directory
that is writable by other accounts on the system. For instance, if
a user is logged in as root and changes directory into /tmp or an
account's home directory, it is possible to now run any shell
commands that are written in C, Python or Ruby without fear.

The same isn't true for any shell commands that are written in Perl,
since a significant proportion of Perl scripts will execute code
in the current working directory whenever they are run. For example,
if a user on a shared system creates the file /tmp/Pod/Perldoc/Toterm.pm,
and then I log in as root, change directory to /tmp, and run "perldoc
perlrun", it will execute the code they have placed in the file.
@
text
@a218 1
BEGIN { pop @@INC if $INC[-1] eq '.' }
@


