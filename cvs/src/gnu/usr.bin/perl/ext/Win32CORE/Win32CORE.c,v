head	1.2;
access;
symbols
	OPENBSD_6_1_BASE:1.2
	OPENBSD_6_0:1.1.1.5.0.10
	OPENBSD_6_0_BASE:1.1.1.5
	OPENBSD_5_9:1.1.1.5.0.4
	OPENBSD_5_9_BASE:1.1.1.5
	OPENBSD_5_8:1.1.1.5.0.6
	OPENBSD_5_8_BASE:1.1.1.5
	PERL_5_20_2:1.1.1.5
	OPENBSD_5_7:1.1.1.5.0.2
	OPENBSD_5_7_BASE:1.1.1.5
	PERL_5_20_1:1.1.1.5
	OPENBSD_5_6:1.1.1.4.0.4
	OPENBSD_5_6_BASE:1.1.1.4
	PERL_5_18_2:1.1.1.4
	PERL:1.1.1
	OPENBSD_5_5:1.1.1.3.0.6
	OPENBSD_5_5_BASE:1.1.1.3
	OPENBSD_5_4:1.1.1.3.0.2
	OPENBSD_5_4_BASE:1.1.1.3
	PERL_5_16_3:1.1.1.3
	OPENBSD_5_3:1.1.1.2.0.14
	OPENBSD_5_3_BASE:1.1.1.2
	OPENBSD_5_2:1.1.1.2.0.12
	OPENBSD_5_2_BASE:1.1.1.2
	OPENBSD_5_1_BASE:1.1.1.2
	OPENBSD_5_1:1.1.1.2.0.10
	OPENBSD_5_0:1.1.1.2.0.8
	OPENBSD_5_0_BASE:1.1.1.2
	OPENBSD_4_9:1.1.1.2.0.6
	OPENBSD_4_9_BASE:1.1.1.2
	PERL_5_12_2:1.1.1.2
	OPENBSD_4_8:1.1.1.2.0.4
	OPENBSD_4_8_BASE:1.1.1.2
	OPENBSD_4_7:1.1.1.2.0.2
	OPENBSD_4_7_BASE:1.1.1.2
	PERL_5_10_1:1.1.1.2
	OPENBSD_4_6:1.1.1.1.0.6
	OPENBSD_4_6_BASE:1.1.1.1
	OPENBSD_4_5:1.1.1.1.0.2
	OPENBSD_4_5_BASE:1.1.1.1
	PERL_5_10_0:1.1.1.1
	CPAN:1.1.1;
locks; strict;
comment	@ * @;
expand	@o@;


1.2
date	2017.02.05.00.32.14;	author afresh1;	state Exp;
branches;
next	1.1;
commitid	cxJ08BvJA9Pt2PTM;

1.1
date	2008.09.29.17.18.26;	author millert;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	2008.09.29.17.18.26;	author millert;	state Exp;
branches;
next	1.1.1.2;

1.1.1.2
date	2009.10.12.18.11.20;	author millert;	state Exp;
branches;
next	1.1.1.3;

1.1.1.3
date	2013.03.25.20.08.47;	author sthen;	state Exp;
branches;
next	1.1.1.4;

1.1.1.4
date	2014.03.24.14.59.02;	author afresh1;	state Exp;
branches;
next	1.1.1.5;

1.1.1.5
date	2014.11.17.20.53.07;	author afresh1;	state Exp;
branches;
next	;
commitid	B31cAbBIXiCqnL97;


desc
@@


1.2
log
@Fix merge issues, remove excess files - match perl-5.24.1 dist
@
text
@/*    Win32CORE.c
 *
 *    Copyright (C) 2007 by Larry Wall and others
 *
 *    You may distribute under the terms of either the GNU General Public
 *    License or the Artistic License, as specified in the README file.
 *
 */

#define WIN32_LEAN_AND_MEAN
#include <windows.h>

#if defined(__CYGWIN__) && !defined(USEIMPORTLIB)
  #undef WIN32
#endif
#define PERL_NO_GET_CONTEXT
#include "EXTERN.h"
#if defined(__CYGWIN__) && !defined(USEIMPORTLIB)
  #define EXTCONST extern const
#endif
#include "perl.h"
#include "XSUB.h"


XS(w32_CORE_all){
    /* I'd use dSAVE_ERRNO() here, but it doesn't save the Win32 error code
     * under cygwin, if that changes this code should change to use that.
     */
    int saved_errno = errno;
    DWORD err = GetLastError();
    /* capture the XSANY value before Perl_load_module, the CV's any member will
     * be overwritten by Perl_load_module and subsequent newXSes or pure perl
     * subs
     */
    const char *function  = (const char *) XSANY.any_ptr;
    Perl_load_module(aTHX_ PERL_LOADMOD_NOIMPORT, newSVpvs("Win32"), newSVnv(0.27));
    SetLastError(err);
    errno = saved_errno;
    /* mark and SP from caller are passed through unchanged */
    call_pv(function, GIMME_V);
}

XS_EXTERNAL(boot_Win32CORE)
{
    /* This function only exists because writemain.SH, lib/ExtUtils/Embed.pm
     * and win32/buildext.pl will all generate references to it.  The function
     * should never be called though, as Win32CORE.pm doesn't use DynaLoader.
     */
    PERL_UNUSED_ARG(cv);
}

EXTERN_C
#if !defined(__CYGWIN__) || defined(USEIMPORTLIB)
__declspec(dllexport)
#endif
void
init_Win32CORE(pTHX)
{
    /* This function is called from init_os_extras().  The Perl interpreter
     * is not yet fully initialized, so don't do anything fancy in here.
     */

    static const struct {
	char Win32__GetCwd [sizeof("Win32::GetCwd")];
	char Win32__SetCwd [sizeof("Win32::SetCwd")];
	char Win32__GetNextAvailDrive [sizeof("Win32::GetNextAvailDrive")];
	char Win32__GetLastError [sizeof("Win32::GetLastError")];
	char Win32__SetLastError [sizeof("Win32::SetLastError")];
	char Win32__LoginName [sizeof("Win32::LoginName")];
	char Win32__NodeName [sizeof("Win32::NodeName")];
	char Win32__DomainName [sizeof("Win32::DomainName")];
	char Win32__FsType [sizeof("Win32::FsType")];
	char Win32__GetOSVersion [sizeof("Win32::GetOSVersion")];
	char Win32__IsWinNT [sizeof("Win32::IsWinNT")];
	char Win32__IsWin95 [sizeof("Win32::IsWin95")];
	char Win32__FormatMessage [sizeof("Win32::FormatMessage")];
	char Win32__Spawn [sizeof("Win32::Spawn")];
	char Win32__GetTickCount [sizeof("Win32::GetTickCount")];
	char Win32__GetShortPathName [sizeof("Win32::GetShortPathName")];
	char Win32__GetFullPathName [sizeof("Win32::GetFullPathName")];
	char Win32__GetLongPathName [sizeof("Win32::GetLongPathName")];
	char Win32__CopyFile [sizeof("Win32::CopyFile")];
	char Win32__Sleep [sizeof("Win32::Sleep")];
    } fnname_table = {
	"Win32::GetCwd",
	"Win32::SetCwd",
	"Win32::GetNextAvailDrive",
	"Win32::GetLastError",
	"Win32::SetLastError",
	"Win32::LoginName",
	"Win32::NodeName",
	"Win32::DomainName",
	"Win32::FsType",
	"Win32::GetOSVersion",
	"Win32::IsWinNT",
	"Win32::IsWin95",
	"Win32::FormatMessage",
	"Win32::Spawn",
	"Win32::GetTickCount",
	"Win32::GetShortPathName",
	"Win32::GetFullPathName",
	"Win32::GetLongPathName",
	"Win32::CopyFile",
	"Win32::Sleep"
    };

    static const unsigned char fnname_lens [] = {
	sizeof("Win32::GetCwd"),
	sizeof("Win32::SetCwd"),
	sizeof("Win32::GetNextAvailDrive"),
	sizeof("Win32::GetLastError"),
	sizeof("Win32::SetLastError"),
	sizeof("Win32::LoginName"),
	sizeof("Win32::NodeName"),
	sizeof("Win32::DomainName"),
	sizeof("Win32::FsType"),
	sizeof("Win32::GetOSVersion"),
	sizeof("Win32::IsWinNT"),
	sizeof("Win32::IsWin95"),
	sizeof("Win32::FormatMessage"),
	sizeof("Win32::Spawn"),
	sizeof("Win32::GetTickCount"),
	sizeof("Win32::GetShortPathName"),
	sizeof("Win32::GetFullPathName"),
	sizeof("Win32::GetLongPathName"),
	sizeof("Win32::CopyFile"),
	sizeof("Win32::Sleep")
    };
    const unsigned char * len = (const unsigned char *)&fnname_lens;
    const char * function = (char *)&fnname_table;
    while (function < (char *)&fnname_table + sizeof(fnname_table)) {
	const char * const file = __FILE__;
	CV * const cv = newXS(function, w32_CORE_all, file);
	XSANY.any_ptr = (void *)function;
	function += *len++;
    }


    /* Don't forward Win32::SetChildShowWindow().  It accesses the internal variable
     * w32_showwindow in thread_intern and is therefore not implemented in Win32.xs.
     */
    /* newXS("Win32::SetChildShowWindow", w32_SetChildShowWindow, file); */
}
@


1.1
log
@Initial revision
@
text
@d13 4
d18 3
d24 6
a29 4
static void
forward(pTHX_ const char *function)
{
    dXSARGS;
d31 6
a36 1
    Perl_load_module(aTHX_ PERL_LOADMOD_NOIMPORT, newSVpvn("Win32",5), newSVnv(0.27));
d38 2
a39 2
    SPAGAIN;
    PUSHMARK(SP-items);
d43 1
a43 30
#define FORWARD(function) XS(w32_##function){ forward(aTHX_ "Win32::"#function); }
FORWARD(GetCwd)
FORWARD(SetCwd)
FORWARD(GetNextAvailDrive)
FORWARD(GetLastError)
FORWARD(SetLastError)
FORWARD(LoginName)
FORWARD(NodeName)
FORWARD(DomainName)
FORWARD(FsType)
FORWARD(GetOSVersion)
FORWARD(IsWinNT)
FORWARD(IsWin95)
FORWARD(FormatMessage)
FORWARD(Spawn)
FORWARD(GetTickCount)
FORWARD(GetShortPathName)
FORWARD(GetFullPathName)
FORWARD(GetLongPathName)
FORWARD(CopyFile)
FORWARD(Sleep)

/* Don't forward Win32::SetChildShowWindow().  It accesses the internal variable
 * w32_showwindow in thread_intern and is therefore not implemented in Win32.xs.
 */
/* FORWARD(SetChildShowWindow) */

#undef FORWARD

XS(boot_Win32CORE)
d49 1
d51 3
a53 1
#ifdef __CYGWIN__
d63 74
a136 1
    char *file = __FILE__;
d138 4
a141 20
    newXS("Win32::GetCwd", w32_GetCwd, file);
    newXS("Win32::SetCwd", w32_SetCwd, file);
    newXS("Win32::GetNextAvailDrive", w32_GetNextAvailDrive, file);
    newXS("Win32::GetLastError", w32_GetLastError, file);
    newXS("Win32::SetLastError", w32_SetLastError, file);
    newXS("Win32::LoginName", w32_LoginName, file);
    newXS("Win32::NodeName", w32_NodeName, file);
    newXS("Win32::DomainName", w32_DomainName, file);
    newXS("Win32::FsType", w32_FsType, file);
    newXS("Win32::GetOSVersion", w32_GetOSVersion, file);
    newXS("Win32::IsWinNT", w32_IsWinNT, file);
    newXS("Win32::IsWin95", w32_IsWin95, file);
    newXS("Win32::FormatMessage", w32_FormatMessage, file);
    newXS("Win32::Spawn", w32_Spawn, file);
    newXS("Win32::GetTickCount", w32_GetTickCount, file);
    newXS("Win32::GetShortPathName", w32_GetShortPathName, file);
    newXS("Win32::GetFullPathName", w32_GetFullPathName, file);
    newXS("Win32::GetLongPathName", w32_GetLongPathName, file);
    newXS("Win32::CopyFile", w32_CopyFile, file);
    newXS("Win32::Sleep", w32_Sleep, file);
@


1.1.1.1
log
@import perl 5.10.0 from CPAN
@
text
@@


1.1.1.2
log
@import perl 5.10.1
@
text
@a12 3
#if defined(__CYGWIN__) && !defined(USEIMPORTLIB)
  #undef WIN32
#endif
a13 3
#if defined(__CYGWIN__) && !defined(USEIMPORTLIB)
  #define EXTCONST extern const
#endif
d65 1
a65 1
#if defined(__CYGWIN__) && defined(USEIMPORTLIB)
@


1.1.1.3
log
@import perl 5.16.3 from CPAN - worked on by Andrew Fresh and myself
@
text
@d64 1
a64 1
XS_EXTERNAL(boot_Win32CORE)
@


1.1.1.4
log
@Import perl-5.18.2

OK espie@@ sthen@@ deraadt@@
@
text
@a15 1
#define PERL_NO_GET_CONTEXT
d23 3
a25 2

XS(w32_CORE_all){
a27 5
    /* capture the XSANY value before Perl_load_module, the CV's any member will
     * be overwritten by Perl_load_module and subsequent newXSes or pure perl
     * subs
     */
    const char *function  = (const char *) XSANY.any_ptr;
d35 29
d81 1
a81 75
    static const struct {
	char Win32__GetCwd [sizeof("Win32::GetCwd")];
	char Win32__SetCwd [sizeof("Win32::SetCwd")];
	char Win32__GetNextAvailDrive [sizeof("Win32::GetNextAvailDrive")];
	char Win32__GetLastError [sizeof("Win32::GetLastError")];
	char Win32__SetLastError [sizeof("Win32::SetLastError")];
	char Win32__LoginName [sizeof("Win32::LoginName")];
	char Win32__NodeName [sizeof("Win32::NodeName")];
	char Win32__DomainName [sizeof("Win32::DomainName")];
	char Win32__FsType [sizeof("Win32::FsType")];
	char Win32__GetOSVersion [sizeof("Win32::GetOSVersion")];
	char Win32__IsWinNT [sizeof("Win32::IsWinNT")];
	char Win32__IsWin95 [sizeof("Win32::IsWin95")];
	char Win32__FormatMessage [sizeof("Win32::FormatMessage")];
	char Win32__Spawn [sizeof("Win32::Spawn")];
	char Win32__GetTickCount [sizeof("Win32::GetTickCount")];
	char Win32__GetShortPathName [sizeof("Win32::GetShortPathName")];
	char Win32__GetFullPathName [sizeof("Win32::GetFullPathName")];
	char Win32__GetLongPathName [sizeof("Win32::GetLongPathName")];
	char Win32__CopyFile [sizeof("Win32::CopyFile")];
	char Win32__Sleep [sizeof("Win32::Sleep")];
    } fnname_table = {
	"Win32::GetCwd",
	"Win32::SetCwd",
	"Win32::GetNextAvailDrive",
	"Win32::GetLastError",
	"Win32::SetLastError",
	"Win32::LoginName",
	"Win32::NodeName",
	"Win32::DomainName",
	"Win32::FsType",
	"Win32::GetOSVersion",
	"Win32::IsWinNT",
	"Win32::IsWin95",
	"Win32::FormatMessage",
	"Win32::Spawn",
	"Win32::GetTickCount",
	"Win32::GetShortPathName",
	"Win32::GetFullPathName",
	"Win32::GetLongPathName",
	"Win32::CopyFile",
	"Win32::Sleep"
    };

    static const unsigned char fnname_lens [] = {
	sizeof("Win32::GetCwd"),
	sizeof("Win32::SetCwd"),
	sizeof("Win32::GetNextAvailDrive"),
	sizeof("Win32::GetLastError"),
	sizeof("Win32::SetLastError"),
	sizeof("Win32::LoginName"),
	sizeof("Win32::NodeName"),
	sizeof("Win32::DomainName"),
	sizeof("Win32::FsType"),
	sizeof("Win32::GetOSVersion"),
	sizeof("Win32::IsWinNT"),
	sizeof("Win32::IsWin95"),
	sizeof("Win32::FormatMessage"),
	sizeof("Win32::Spawn"),
	sizeof("Win32::GetTickCount"),
	sizeof("Win32::GetShortPathName"),
	sizeof("Win32::GetFullPathName"),
	sizeof("Win32::GetLongPathName"),
	sizeof("Win32::CopyFile"),
	sizeof("Win32::Sleep")
    };
    const unsigned char * len = (const unsigned char *)&fnname_lens;
    const char * function = (char *)&fnname_table;
    while (function < (char *)&fnname_table + sizeof(fnname_table)) {
	const char * const file = __FILE__;
	CV * const cv = newXS(function, w32_CORE_all, file);
	XSANY.any_ptr = (void *)function;
	function += *len++;
    }

d83 20
a102 3
    /* Don't forward Win32::SetChildShowWindow().  It accesses the internal variable
     * w32_showwindow in thread_intern and is therefore not implemented in Win32.xs.
     */
@


1.1.1.5
log
@Import perl-5.20.1
@
text
@d26 1
a26 4
    /* I'd use dSAVE_ERRNO() here, but it doesn't save the Win32 error code
     * under cygwin, if that changes this code should change to use that.
     */
    int saved_errno = errno;
d35 2
a36 2
    errno = saved_errno;
    /* mark and SP from caller are passed through unchanged */
d47 1
a47 1
#if !defined(__CYGWIN__) || defined(USEIMPORTLIB)
@


