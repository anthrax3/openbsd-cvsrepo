head	1.2;
access;
symbols
	OPENBSD_3_2:1.1.1.1.0.14
	OPENBSD_3_2_BASE:1.1.1.1
	OPENBSD_3_1:1.1.1.1.0.12
	OPENBSD_3_1_BASE:1.1.1.1
	OPENBSD_3_0:1.1.1.1.0.10
	OPENBSD_3_0_BASE:1.1.1.1
	PERL_5_6_1:1.1.1.1
	OPENBSD_2_9:1.1.1.1.0.8
	OPENBSD_2_9_BASE:1.1.1.1
	OPENBSD_2_8:1.1.1.1.0.6
	OPENBSD_2_8_BASE:1.1.1.1
	OPENBSD_2_7:1.1.1.1.0.4
	OPENBSD_2_7_BASE:1.1.1.1
	PERL_5_6_0:1.1.1.1
	OPENBSD_2_6:1.1.1.1.0.2
	OPENBSD_2_6_BASE:1.1.1.1
	PERL_500503:1.1.1.1
	CPAN:1.1.1;
locks; strict;
comment	@# @;


1.2
date	2002.10.27.22.25.24;	author millert;	state dead;
branches;
next	1.1;

1.1
date	99.04.29.22.39.12;	author millert;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	99.04.29.22.39.12;	author millert;	state Exp;
branches;
next	;


desc
@@


1.2
log
@Resolve conflicts, remove old files, merge local changes
@
text
@use Thread;
use Thread::Queue;

$q = new Thread::Queue;

sub reader {
    my $tid = Thread->self->tid;
    my $i = 0;
    while (1) {
	$i++;
	print "reader (tid $tid): waiting for element $i...\n";
	my $el = $q->dequeue;
	print "reader (tid $tid): dequeued element $i: value $el\n";
	select(undef, undef, undef, rand(2));
	if ($el == -1) {
	    # end marker
	    print "reader (tid $tid) returning\n";
	    return;
	}
    }
}

my $nthreads = 3;

for (my $i = 0; $i < $nthreads; $i++) {
    Thread->new(\&reader, $i);
}

for (my $i = 1; $i <= 10; $i++) {
    my $el = int(rand(100));
    select(undef, undef, undef, rand(2));
    print "writer: enqueuing value $el\n";
    $q->enqueue($el);
}

$q->enqueue((-1) x $nthreads); # one end marker for each thread
@


1.1
log
@Initial revision
@
text
@@


1.1.1.1
log
@perl5.005_03
@
text
@@
