head	1.2;
access;
symbols
	OPENBSD_3_2:1.1.1.2.0.12
	OPENBSD_3_2_BASE:1.1.1.2
	OPENBSD_3_1:1.1.1.2.0.10
	OPENBSD_3_1_BASE:1.1.1.2
	OPENBSD_3_0:1.1.1.2.0.8
	OPENBSD_3_0_BASE:1.1.1.2
	PERL_5_6_1:1.1.1.2
	OPENBSD_2_9:1.1.1.2.0.6
	OPENBSD_2_9_BASE:1.1.1.2
	OPENBSD_2_8:1.1.1.2.0.4
	OPENBSD_2_8_BASE:1.1.1.2
	OPENBSD_2_7:1.1.1.2.0.2
	OPENBSD_2_7_BASE:1.1.1.2
	PERL_5_6_0:1.1.1.2
	OPENBSD_2_6:1.1.1.1.0.2
	OPENBSD_2_6_BASE:1.1.1.1
	PERL_500503:1.1.1.1
	CPAN:1.1.1;
locks; strict;
comment	@# @;


1.2
date	2002.10.27.22.25.24;	author millert;	state dead;
branches;
next	1.1;

1.1
date	99.04.29.22.39.12;	author millert;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	99.04.29.22.39.12;	author millert;	state Exp;
branches;
next	1.1.1.2;

1.1.1.2
date	2000.04.06.16.09.25;	author millert;	state Exp;
branches;
next	;


desc
@@


1.2
log
@Resolve conflicts, remove old files, merge local changes
@
text
@use Thread;

$global = undef;

sub single_file {
    use attrs 'locked';
    my $who = shift;
    my $i;

    print "Uh oh: $who entered while locked by $global\n" if $global;
    $global = $who;
    print "[";
    for ($i = 0; $i < int(10 * rand); $i++) {
	print $who;
	select(undef, undef, undef, 0.1);
    }
    print "]";
    $global = undef;
}

sub start_a {
    my ($i, $j);
    for ($j = 0; $j < 10; $j++) {
	single_file("A");
	for ($i = 0; $i < int(10 * rand); $i++) {
	    print "a";
	    select(undef, undef, undef, 0.1);
	}
    }
}

sub start_b {
    my ($i, $j);
    for ($j = 0; $j < 10; $j++) {
	single_file("B");
	for ($i = 0; $i < int(10 * rand); $i++) {
	    print "b";
	    select(undef, undef, undef, 0.1);
	}
    }
}

sub start_c {
    my ($i, $j);
    for ($j = 0; $j < 10; $j++) {
	single_file("C");
	for ($i = 0; $i < int(10 * rand); $i++) {
	    print "c";
	    select(undef, undef, undef, 0.1);
	}
    }
}

$| = 1;
srand($$^$^T);

print <<'EOT';
Each pair of square brackets [...] should contain a repeated sequence of
a unique upper case letter. Lower case letters may appear randomly both
in and out of the brackets.
EOT
$foo = new Thread \&start_a;
$bar = new Thread \&start_b;
$baz = new Thread \&start_c;
print "\nmain: joining...\n";
#$foo->join;
#$bar->join;
#$baz->join;
print "\ndone\n";
@


1.1
log
@Initial revision
@
text
@@


1.1.1.1
log
@perl5.005_03
@
text
@@


1.1.1.2
log
@virgin perl 5.6.0
@
text
@d5 2
a6 1
sub single_file : locked {
@

