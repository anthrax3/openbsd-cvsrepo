head	1.2;
access;
symbols
	OPENBSD_4_8:1.1.1.1.0.4
	OPENBSD_4_8_BASE:1.1.1.1
	OPENBSD_4_7:1.1.1.1.0.2
	OPENBSD_4_7_BASE:1.1.1.1
	PERL_5_10_1:1.1.1.1
	CPAN:1.1.1;
locks; strict;
comment	@# @;


1.2
date	2010.09.24.14.59.16;	author millert;	state dead;
branches;
next	1.1;

1.1
date	2009.10.12.18.11.10;	author millert;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	2009.10.12.18.11.10;	author millert;	state Exp;
branches;
next	;


desc
@@


1.2
log
@remove files no longer in perl 5.12.2 (or that have moved)
@
text
@#!perl

use Test::More 0.60;

# Test::More 0.60 required because:
# - is_deeply(undef, $not_undef); now works. [rt.cpan.org 9441]

BEGIN { plan tests => 1+5*2; }

BEGIN { use_ok('Data::Dumper') };

# RT 39420: Data::Dumper fails to escape bless class name

# test under XS and pure Perl version
foreach $Data::Dumper::Useperl (0, 1) {

#diag("\$Data::Dumper::Useperl = $Data::Dumper::Useperl");

{
my $t = bless( {}, q{a'b} );
my $dt = Dumper($t);
my $o = <<'PERL';
$VAR1 = bless( {}, 'a\'b' );
PERL

is($dt, $o, "package name in bless is escaped if needed");
is_deeply(scalar eval($dt), $t, "eval reverts dump");
}

{
my $t = bless( {}, q{a\\} );
my $dt = Dumper($t);
my $o = <<'PERL';
$VAR1 = bless( {}, 'a\\' );
PERL

is($dt, $o, "package name in bless is escaped if needed");
is_deeply(scalar eval($dt), $t, "eval reverts dump");
}
SKIP: {
    skip(q/no 're::regexp_pattern'/, 1)
        if ! defined(*re::regexp_pattern{CODE});

my $t = bless( qr//, 'foo');
my $dt = Dumper($t);
my $o = <<'PERL';
$VAR1 = bless( qr/(?-xism:)/, 'foo' );
PERL

is($dt, $o, "We can dump blessed qr//'s properly");

}
}
@


1.1
log
@Initial revision
@
text
@@


1.1.1.1
log
@import perl 5.10.1
@
text
@@
