head	1.2;
access;
symbols
	OPENBSD_4_6:1.1.1.4.0.6
	OPENBSD_4_6_BASE:1.1.1.4
	OPENBSD_4_5:1.1.1.4.0.2
	OPENBSD_4_5_BASE:1.1.1.4
	PERL_5_10_0:1.1.1.4
	OPENBSD_4_4:1.1.1.3.0.20
	OPENBSD_4_4_BASE:1.1.1.3
	OPENBSD_4_3:1.1.1.3.0.18
	OPENBSD_4_3_BASE:1.1.1.3
	OPENBSD_4_2:1.1.1.3.0.16
	OPENBSD_4_2_BASE:1.1.1.3
	OPENBSD_4_1:1.1.1.3.0.14
	OPENBSD_4_1_BASE:1.1.1.3
	OPENBSD_4_0:1.1.1.3.0.12
	OPENBSD_4_0_BASE:1.1.1.3
	PERL_5_8_8:1.1.1.3
	OPENBSD_3_9:1.1.1.3.0.10
	OPENBSD_3_9_BASE:1.1.1.3
	OPENBSD_3_8:1.1.1.3.0.8
	OPENBSD_3_8_BASE:1.1.1.3
	OPENBSD_3_7:1.1.1.3.0.6
	OPENBSD_3_7_BASE:1.1.1.3
	PERL_5_8_6:1.1.1.3
	OPENBSD_3_6:1.1.1.3.0.4
	OPENBSD_3_6_BASE:1.1.1.3
	PERL_5_8_5:1.1.1.3
	PERL_5_8_3:1.1.1.3
	OPENBSD_3_5:1.1.1.3.0.2
	OPENBSD_3_5_BASE:1.1.1.3
	PERL_5_8_2:1.1.1.3
	OPENBSD_3_4:1.1.1.2.0.4
	OPENBSD_3_4_BASE:1.1.1.2
	OPENBSD_3_3:1.1.1.2.0.2
	OPENBSD_3_3_BASE:1.1.1.2
	PERL_5_8_0:1.1.1.2
	OPENBSD_3_2:1.1.1.1.0.14
	OPENBSD_3_2_BASE:1.1.1.1
	OPENBSD_3_1:1.1.1.1.0.12
	OPENBSD_3_1_BASE:1.1.1.1
	OPENBSD_3_0:1.1.1.1.0.10
	OPENBSD_3_0_BASE:1.1.1.1
	PERL_5_6_1:1.1.1.1
	OPENBSD_2_9:1.1.1.1.0.8
	OPENBSD_2_9_BASE:1.1.1.1
	OPENBSD_2_8:1.1.1.1.0.6
	OPENBSD_2_8_BASE:1.1.1.1
	OPENBSD_2_7:1.1.1.1.0.4
	OPENBSD_2_7_BASE:1.1.1.1
	PERL_5_6_0:1.1.1.1
	OPENBSD_2_6:1.1.1.1.0.2
	OPENBSD_2_6_BASE:1.1.1.1
	PERL_500503:1.1.1.1
	CPAN:1.1.1;
locks; strict;
comment	@# @;


1.2
date	2009.10.12.18.24.31;	author millert;	state dead;
branches;
next	1.1;

1.1
date	99.04.29.22.38.48;	author millert;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	99.04.29.22.38.48;	author millert;	state Exp;
branches;
next	1.1.1.2;

1.1.1.2
date	2002.10.27.22.14.55;	author millert;	state Exp;
branches;
next	1.1.1.3;

1.1.1.3
date	2003.12.03.02.43.51;	author millert;	state Exp;
branches;
next	1.1.1.4;

1.1.1.4
date	2008.09.29.17.18.22;	author millert;	state Exp;
branches;
next	;


desc
@@


1.2
log
@Merge in perl 5.10.1
@
text
@
use IPC::SysV qw(
	SETALL
	IPC_PRIVATE
	IPC_CREAT
	IPC_RMID
	IPC_NOWAIT
	IPC_STAT
	S_IRWXU
	S_IRWXG
	S_IRWXO
);
use IPC::Semaphore;

print "1..10\n";

$sem = new IPC::Semaphore(IPC_PRIVATE, 10, S_IRWXU | S_IRWXG | S_IRWXO | IPC_CREAT)
	|| die "semget: ",$!+0," $!\n";

print "ok 1\n";

my $st = $sem->stat || print "not ";
print "ok 2\n";

$sem->setall( (0) x 10) || print "not ";
print "ok 3\n";

my @@sem = $sem->getall;
print "not " unless join("",@@sem) eq "0000000000";
print "ok 4\n";

$sem[2] = 1;
$sem->setall( @@sem ) || print "not ";
print "ok 5\n";

@@sem = $sem->getall;
print "not " unless join("",@@sem) eq "0010000000";
print "ok 6\n";

my $ncnt = $sem->getncnt(0);
print "not " if $sem->getncnt(0) || !defined($ncnt);
print "ok 7\n";

$sem->op(2,-1,IPC_NOWAIT) || print "not ";
print "ok 8\n";

print "not " if $sem->getncnt(0);
print "ok 9\n";

$sem->remove || print "not ";
print "ok 10\n";
@


1.1
log
@Initial revision
@
text
@@


1.1.1.1
log
@perl5.005_03
@
text
@@


1.1.1.2
log
@stock perl 5.8.0 from CPAN
@
text
@a0 21
BEGIN {
    chdir 't' if -d 't';

    @@INC = '../lib';

    require Config; import Config;

    my $reason;

    if ($Config{'extensions'} !~ /\bIPC\/SysV\b/) {
      $reason = 'IPC::SysV was not built';
    } elsif ($Config{'d_sem'} ne 'define') {
      $reason = '$Config{d_sem} undefined';
    } elsif ($Config{'d_msg'} ne 'define') {
      $reason = '$Config{d_msg} undefined';
    }
    if ($reason) {
	print "1..0 # Skip: $reason\n";
	exit 0;
    }
}
@


1.1.1.3
log
@perl 5.8.2 from CPAN
@
text
@d38 2
a39 3
my $sem =
    new IPC::Semaphore(IPC_PRIVATE, 10, S_IRWXU | S_IRWXG | S_IRWXO | IPC_CREAT)
    || die "semget: ",$!+0," $!\n";
d71 2
a72 4
END {
	(defined $sem && $sem->remove) || print "not ";
	print "ok 10\n";
}
@


1.1.1.4
log
@import perl 5.10.0 from CPAN
@
text
@d4 1
a4 3
    @@INC = qw(. ../lib);
    require 'test.pl';
}
d6 1
a6 1
require Config; import Config;
d8 1
a8 1
$TEST_COUNT = 11;
d10 11
a20 11
if ($Config{'extensions'} !~ /\bIPC\/SysV\b/) {
    skip_all('IPC::SysV was not built');
}
elsif ($Config{'d_sem'} ne 'define') {
    skip_all('$Config{d_sem} undefined');
}
elsif ($Config{'d_msg'} ne 'define') {
    skip_all('$Config{d_msg} undefined');
}
else {
    plan( tests => $TEST_COUNT );
d36 1
a36 1
SKIP: {
d39 2
a40 11
    IPC::Semaphore->new(IPC_PRIVATE, 10, S_IRWXU | S_IRWXG | S_IRWXO | IPC_CREAT);
if (!$sem) {
    if ($! eq 'No space left on device') {
        # "normal" error
        skip( "cannot proceed: IPC::Semaphore->new() said: $!", $TEST_COUNT);
    }
    else {
        # unexpected error
        die "IPC::Semaphore->new(): ",$!+0," $!\n";
    }
}
d42 1
a42 1
pass('acquired a semaphore');
d44 2
a45 1
ok(my $st = $sem->stat,'stat it');
d47 2
a48 1
ok($sem->setall( (0) x 10),'set all');
d51 2
a52 1
cmp_ok(join("",@@sem),'eq',"0000000000",'get all');
d55 2
a56 1
ok($sem->setall( @@sem ),'set after change');
d59 2
a60 1
cmp_ok(join("",@@sem),'eq',"0010000000",'get again');
d63 2
a64 2
ok(!$sem->getncnt(0),'procs waiting now');
ok(defined($ncnt),'prev procs waiting');
d66 2
a67 1
ok($sem->op(2,-1,IPC_NOWAIT),'op nowait');
d69 2
a70 1
ok(!$sem->getncnt(0),'no procs waiting');
d73 2
a74 3
    if ($sem) {
        ok($sem->remove,'release');
    }
a75 2

} # SKIP
@


