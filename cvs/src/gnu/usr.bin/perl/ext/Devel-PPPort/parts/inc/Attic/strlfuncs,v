head	1.3;
access;
symbols
	OPENBSD_4_8:1.2.0.4
	OPENBSD_4_8_BASE:1.2
	OPENBSD_4_7:1.2.0.2
	OPENBSD_4_7_BASE:1.2
	PERL_5_10_1:1.1.1.1
	CPAN:1.1.1;
locks; strict;
comment	@# @;


1.3
date	2010.09.24.14.59.17;	author millert;	state dead;
branches;
next	1.2;

1.2
date	2009.10.12.18.24.27;	author millert;	state Exp;
branches;
next	1.1;

1.1
date	2009.10.12.18.11.14;	author millert;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	2009.10.12.18.11.14;	author millert;	state Exp;
branches;
next	;


desc
@@


1.3
log
@remove files no longer in perl 5.12.2 (or that have moved)
@
text
@################################################################################
##
##  $Revision: 1.2 $
##  $Author: millert $
##  $Date: 2009/10/12 18:24:27 $
##
################################################################################
##
##  Version 3.x, Copyright (C) 2004-2009, Marcus Holland-Moritz.
##  Version 2.x, Copyright (C) 2001, Paul Marquess.
##  Version 1.x, Copyright (C) 1999, Kenneth Albanowski.
##
##  This program is free software; you can redistribute it and/or
##  modify it under the same terms as Perl itself.
##
################################################################################

=provides

my_strlcat
my_strlcpy

=implementation

#if !defined(my_strlcat)
#if { NEED my_strlcat }

Size_t
my_strlcat(char *dst, const char *src, Size_t size)
{
    Size_t used, length, copy;

    used = strlen(dst);
    length = strlen(src);
    if (size > 0 && used < size - 1) {
        copy = (length >= size - used) ? size - used - 1 : length;
        memcpy(dst + used, src, copy);
        dst[used + copy] = '\0';
    }
    return used + length;
}
#endif
#endif

#if !defined(my_strlcpy)
#if { NEED my_strlcpy }

Size_t
my_strlcpy(char *dst, const char *src, Size_t size)
{
    Size_t length, copy;

    length = strlen(src);
    if (size > 0) {
        copy = (length >= size) ? size - 1 : length;
        memcpy(dst, src, copy);
        dst[copy] = '\0';
    }
    return length;
}

#endif
#endif

=xsinit

#define NEED_my_strlcat
#define NEED_my_strlcpy

=xsubs

void
my_strlfunc()
	PREINIT:
		char buf[8];
		int len;
	PPCODE:
                len = my_strlcpy(buf, "foo", sizeof(buf));
		mXPUSHi(len);
		mXPUSHs(newSVpv(buf, 0));
		len = my_strlcat(buf, "bar", sizeof(buf));
		mXPUSHi(len);
		mXPUSHs(newSVpv(buf, 0));
		len = my_strlcat(buf, "baz", sizeof(buf));
		mXPUSHi(len);
		mXPUSHs(newSVpv(buf, 0));
		len = my_strlcpy(buf, "1234567890", sizeof(buf));
		mXPUSHi(len);
		mXPUSHs(newSVpv(buf, 0));
		len = my_strlcpy(buf, "1234", sizeof(buf));
		mXPUSHi(len);
		mXPUSHs(newSVpv(buf, 0));
		len = my_strlcat(buf, "567890123456", sizeof(buf));
		mXPUSHi(len);
		mXPUSHs(newSVpv(buf, 0));
		XSRETURN(12);

=tests plan => 13

my @@e = (3, 'foo',
         6, 'foobar',
         9, 'foobarb',
         10, '1234567',
         4, '1234',
         16, '1234567',
        );
my @@r = Devel::PPPort::my_strlfunc();

ok(@@e == @@r);

for (0 .. $#e) {
  ok($r[$_], $e[$_]);
}

@


1.2
log
@Merge in perl 5.10.1
@
text
@d3 3
a5 3
##  $Revision: 6 $
##  $Author: mhx $
##  $Date: 2009/01/18 14:10:52 +0100 $
@


1.1
log
@Initial revision
@
text
@@


1.1.1.1
log
@import perl 5.10.1
@
text
@@
