head	1.2;
access;
symbols
	OPENBSD_6_2:1.2.0.6
	OPENBSD_6_2_BASE:1.2
	PERL_5_24_2:1.1.1.6
	OPENBSD_6_1:1.2.0.4
	OPENBSD_6_1_BASE:1.2
	OPENBSD_6_0:1.1.1.5.0.10
	OPENBSD_6_0_BASE:1.1.1.5
	OPENBSD_5_9:1.1.1.5.0.4
	OPENBSD_5_9_BASE:1.1.1.5
	OPENBSD_5_8:1.1.1.5.0.6
	OPENBSD_5_8_BASE:1.1.1.5
	PERL_5_20_2:1.1.1.5
	OPENBSD_5_7:1.1.1.5.0.2
	OPENBSD_5_7_BASE:1.1.1.5
	PERL_5_20_1:1.1.1.5
	OPENBSD_5_6:1.1.1.4.0.4
	OPENBSD_5_6_BASE:1.1.1.4
	PERL_5_18_2:1.1.1.4
	PERL:1.1.1
	OPENBSD_5_5:1.1.1.3.0.6
	OPENBSD_5_5_BASE:1.1.1.3
	OPENBSD_5_4:1.1.1.3.0.2
	OPENBSD_5_4_BASE:1.1.1.3
	PERL_5_16_3:1.1.1.3
	OPENBSD_5_3:1.1.1.2.0.10
	OPENBSD_5_3_BASE:1.1.1.2
	OPENBSD_5_2:1.1.1.2.0.8
	OPENBSD_5_2_BASE:1.1.1.2
	OPENBSD_5_1_BASE:1.1.1.2
	OPENBSD_5_1:1.1.1.2.0.6
	OPENBSD_5_0:1.1.1.2.0.4
	OPENBSD_5_0_BASE:1.1.1.2
	OPENBSD_4_9:1.1.1.2.0.2
	OPENBSD_4_9_BASE:1.1.1.2
	PERL_5_12_2:1.1.1.2
	OPENBSD_4_8:1.1.1.1.0.4
	OPENBSD_4_8_BASE:1.1.1.1
	OPENBSD_4_7:1.1.1.1.0.2
	OPENBSD_4_7_BASE:1.1.1.1
	PERL_5_10_1:1.1.1.1
	CPAN:1.1.1;
locks; strict;
comment	@# @;
expand	@o@;


1.2
date	2017.02.05.00.32.14;	author afresh1;	state Exp;
branches;
next	1.1;
commitid	cxJ08BvJA9Pt2PTM;

1.1
date	2009.10.12.18.11.15;	author millert;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	2009.10.12.18.11.15;	author millert;	state Exp;
branches;
next	1.1.1.2;

1.1.1.2
date	2010.09.24.14.48.54;	author millert;	state Exp;
branches;
next	1.1.1.3;

1.1.1.3
date	2013.03.25.20.08.47;	author sthen;	state Exp;
branches;
next	1.1.1.4;

1.1.1.4
date	2014.03.24.14.59.02;	author afresh1;	state Exp;
branches;
next	1.1.1.5;

1.1.1.5
date	2014.11.17.20.53.07;	author afresh1;	state Exp;
branches;
next	1.1.1.6;
commitid	B31cAbBIXiCqnL97;

1.1.1.6
date	2017.08.14.13.46.13;	author afresh1;	state Exp;
branches;
next	;
commitid	fAzrs78vdW2Yfc6A;


desc
@@


1.2
log
@Fix merge issues, remove excess files - match perl-5.24.1 dist
@
text
@BEGIN {
    require Config; import Config;
    if ($Config{'extensions'} !~ /\bXS\/Typemap\b/) {
        print "1..0 # Skip: XS::Typemap was not built\n";
        exit 0;
    }
}

use Test::More tests => 156;

use strict;
#catch WARN_INTERNAL type errors, and anything else unexpected
use warnings FATAL => 'all';
use XS::Typemap;

pass();

# Some inheritance trees to check ISA relationships
BEGIN {
  package intObjPtr::SubClass;
  use parent '-norequire', qw/ intObjPtr /;
  sub xxx { 1; }
}

BEGIN {
  package intRefIvPtr::SubClass;
  use parent '-norequire', qw/ intRefIvPtr /;
  sub xxx { 1 }
}

# T_SV - standard perl scalar value
note("T_SV");
my $sv = "Testing T_SV";
is( T_SV($sv), $sv);

# T_SVREF - reference to Scalar
note("T_SVREF");
$sv .= "REF";
my $svref = \$sv;
is( T_SVREF($svref), $svref );
is( ${ T_SVREF($svref) }, $$svref );

# Now test that a non reference is rejected
# the typemaps croak
eval { T_SVREF( "fail - not ref" ) };
ok( $@@ );

note("T_SVREF_REFCOUNT_FIXED");
is( T_SVREF_REFCOUNT_FIXED($svref), $svref );
is( ${ T_SVREF_REFCOUNT_FIXED($svref) }, $$svref );
eval { T_SVREF_REFCOUNT_FIXED( "fail - not ref" ) };
ok( $@@ );


# T_AVREF - reference to a perl Array
note("T_AVREF");
my @@array;
is( T_AVREF(\@@array), \@@array);
# Now test that a non array ref is rejected
eval { T_AVREF( \$sv ) };
ok( $@@ );

# T_AVREF_REFCOUNT_FIXED  - reference to a perl Array, refcount fixed
note("T_AVREF_REFCOUNT_FIXED");
is( T_AVREF_REFCOUNT_FIXED(\@@array), \@@array);
# Now test that a non array ref is rejected
eval { T_AVREF_REFCOUNT_FIXED( \$sv ) };
ok( $@@ );


# T_HVREF - reference to a perl Hash
note("T_HVREF");
my %hash;
is( T_HVREF(\%hash), \%hash);
# Now test that a non hash ref is rejected
eval { T_HVREF( \@@array ) };
ok( $@@ );


# T_HVREF_REFCOUNT_FIXED - reference to a perl Hash, refcount fixed
note("T_HVREF_REFCOUNT_FIXED");
is( T_HVREF_REFCOUNT_FIXED(\%hash), \%hash);
# Now test that a non hash ref is rejected
eval { T_HVREF_REFCOUNT_FIXED( \@@array ) };
ok( $@@ );


# T_CVREF - reference to perl subroutine
note("T_CVREF");
my $sub = sub { 1 };
is( T_CVREF($sub), $sub );
# Now test that a non code ref is rejected
eval { T_CVREF( \@@array ) };
ok( $@@ );

is( T_CVREF_REFCOUNT_FIXED($sub), $sub );
# Now test that a non code ref is rejected
eval { T_CVREF_REFCOUNT_FIXED( \@@array ) };
ok( $@@ );


# T_SYSRET - system return values
note("T_SYSRET");
# first check success
ok( T_SYSRET_pass );
# ... now failure
is( T_SYSRET_fail, undef);

# T_UV - unsigned integer
note("T_UV");
is( T_UV(5), 5 );    # pass
isnt( T_UV(-4), -4); # fail

# T_U_INT - unsigned integer with (unsigned int) cast
note("T_U_INT");
is( T_U_INT(5), 5 );    # pass
isnt( T_U_INT(-4), -4); # fail

# T_IV - signed integer
# T_INT - signed integer with cast
# T_LONG - signed integer with cast to IV
# T_SHORT - signed short
for my $t (['T_IV', \&T_IV],
           ['T_INT', \&T_INT],
           ['T_LONG', \&T_LONG],
           ['T_SHORT', \&T_SHORT])
{
  note($t->[0]);
  is( $t->[1]->(5), 5);
  is( $t->[1]->(-4), -4);
  is( $t->[1]->(4.1), int(4.1));
  is( $t->[1]->("52"), "52");
  isnt( $t->[1]->(4.5), 4.5); # failure
}

if ($Config{shortsize} == 2) {
  isnt( T_SHORT(32801), 32801 );
}
else {
  pass(); # e.g. Crays have shortsize 4 (T3X) or 8 (CXX and SVX)
}

# T_ENUM - enum list
ok( T_ENUM(), 'T_ENUM' ); # just hope for a true value

# T_BOOL - boolean
note("T_BOOL");

ok( T_BOOL(52) );
ok( ! T_BOOL(0) );
ok( ! T_BOOL('') );
ok( ! T_BOOL(undef) );

{
  # these attempt to modify a read-only value
  ok( !eval { T_BOOL_2(52); 1 } );
  ok( !eval { T_BOOL_2(0); 1 } );
  ok( !eval { T_BOOL_2(''); 1 } );
  ok( !eval { T_BOOL_2(undef); 1 } );
}

{
    my ($in, $out);
    $in = 1;
    T_BOOL_OUT($out, $in);
    ok($out, "T_BOOL_OUT, true in");
    $in = 0;
    $out = 1;
    T_BOOL_OUT($out, $in);
    ok(!$out, "T_BOOL_OUT, false in");
}

# T_U_SHORT aka U16
note("T_U_SHORT");
is( T_U_SHORT(32000), 32000);
if ($Config{shortsize} == 2) {
  isnt( T_U_SHORT(65536), 65536); # probably dont want to test edge cases
} else {
  ok(1); # e.g. Crays have shortsize 4 (T3X) or 8 (CXX and SVX)
}

# T_U_LONG aka U32
note("T_U_LONG");
is( T_U_LONG(65536), 65536);
isnt( T_U_LONG(-1), -1);

# T_CHAR
note("T_CHAR");
is( T_CHAR("a"), "a");
is( T_CHAR("-"), "-");
is( T_CHAR(chr(128)),chr(128));
isnt( T_CHAR(chr(256)), chr(256));

# T_U_CHAR
note("T_U_CHAR");
is( T_U_CHAR(127), 127);
is( T_U_CHAR(128), 128);
isnt( T_U_CHAR(-1), -1);
isnt( T_U_CHAR(300), 300);

# T_FLOAT
# limited precision
is( sprintf("%6.3f",T_FLOAT(52.345)), sprintf("%6.3f",52.345), "T_FLOAT");

# T_NV
is( T_NV(52.345), 52.345, "T_NV" );

# T_DOUBLE
is( sprintf("%6.3f",T_DOUBLE(52.345)), sprintf("%6.3f",52.345), "T_DOUBLE" );

# T_PV
note("T_PV");
is( T_PV("a string"), "a string");
is( T_PV(52), 52);
ok !defined T_PV_null, 'RETVAL = NULL returns undef for char*';
{
    use warnings NONFATAL => 'all';
    my $uninit;
    local $SIG{__WARN__} = sub { ++$uninit if shift =~ /uninit/ };
    () = ''.T_PV_null;
    is $uninit, 1, 'uninit warning from NULL returned from char* func';
}

# T_PTR
my $t = 5;
my $ptr = T_PTR_OUT($t);
is( T_PTR_IN( $ptr ), $t, "T_PTR" );

# T_PTRREF
note("T_PTRREF");
$t = -52;
$ptr = T_PTRREF_OUT( $t );
is( ref($ptr), "SCALAR");
is( T_PTRREF_IN( $ptr ), $t );

# test that a non-scalar ref is rejected
eval { T_PTRREF_IN( $t ); };
ok( $@@ );

# T_PTROBJ
note("T_PTROBJ");
$t = 256;
$ptr = T_PTROBJ_OUT( $t );
is( ref($ptr), "intObjPtr");
is( $ptr->T_PTROBJ_IN, $t );

# check that normal scalar refs fail
eval {intObjPtr::T_PTROBJ_IN( \$t );};
ok( $@@ );

# check that inheritance works
bless $ptr, "intObjPtr::SubClass";
is( ref($ptr), "intObjPtr::SubClass");
is( $ptr->T_PTROBJ_IN, $t );

# Skip T_REF_IV_REF

# T_REF_IV_PTR
note("T_REF_IV_PTR");
$t = -365;
$ptr = T_REF_IV_PTR_OUT( $t );
is( ref($ptr), "intRefIvPtr");
is( $ptr->T_REF_IV_PTR_IN(), $t);

# inheritance should not work
bless $ptr, "intRefIvPtr::SubClass";
eval { $ptr->T_REF_IV_PTR_IN };
ok( $@@ );

# Skip T_PTRDESC

# Skip T_REFREF

# Skip T_REFOBJ

# T_OPAQUEPTR
note("T_OPAQUEPTR");
$t = 22;
my $p = T_OPAQUEPTR_IN( $t );
is( T_OPAQUEPTR_OUT($p), $t);

# T_OPAQUEPTR with a struct
note("T_OPAQUEPTR with a struct");
my @@test = (5,6,7);
$p = T_OPAQUEPTR_IN_struct(@@test);
my @@result = T_OPAQUEPTR_OUT_struct($p);
is(scalar(@@result),scalar(@@test));
for (0..$#test) {
  is($result[$_], $test[$_]);
}

# T_OPAQUE
note("T_OPAQUE");
$t = 48;
$p = T_OPAQUE_IN( $t );
is(T_OPAQUEPTR_OUT_short( $p ), $t); # Test using T_OPAQUEPTR
is(T_OPAQUE_OUT( $p ), $t );         # Test using T_OPQAQUE

# T_OPAQUE_array
note("T_OPAQUE: A packed array");

my @@opq = (2,4,8);
my $packed = T_OPAQUE_array(@@opq);
my @@uopq = unpack("i*",$packed);
is(scalar(@@uopq), scalar(@@opq));
for (0..$#opq) {
  is( $uopq[$_], $opq[$_]);
}

# T_PACKED
note("T_PACKED");
my $struct = T_PACKED_out(-4, 3, 2.1);
ok(ref($struct) eq 'HASH');
is_approx($struct->{a}, -4);
is_approx($struct->{b}, 3);
is_approx($struct->{c}, 2.1);
my @@rv = T_PACKED_in($struct);
is(scalar(@@rv), 3);
is_approx($rv[0], -4);
is_approx($rv[1], 3);
is_approx($rv[2], 2.1);

# T_PACKEDARRAY
SCOPE: {
  note("T_PACKED_ARRAY");
  my @@d = (
    -4, 3, 2.1,
    2, 1, -15.3,
    1,1,1
  );
  my @@out;
  push @@out, {a => $d[$_*3], b => $d[$_*3+1], c => $d[$_*3+2]} for (0..2);
  my $structs = T_PACKEDARRAY_out(@@d);
  ok(ref($structs) eq 'ARRAY');
  is(scalar(@@$structs), 3);
  foreach my $i (0..2) {
    my $s = $structs->[$i];
    is(ref($s), 'HASH');
    is_approx($s->{a}, $d[$i*3+0]);
    is_approx($s->{b}, $d[$i*3+1]);
    is_approx($s->{c}, $d[$i*3+2]);
  }
  my @@rv = T_PACKEDARRAY_in($structs);
  is(scalar(@@rv), scalar(@@d));
  foreach my $i (0..$#d) {
    is_approx($rv[$i], $d[$i]);
  }
}

# Skip T_DATAUNIT

# Skip T_CALLBACK

# T_ARRAY
my @@inarr = (1,2,3,4,5,6,7,8,9,10);
my @@outarr = T_ARRAY( 5, @@inarr );
is_deeply(\@@outarr, \@@inarr, "T_ARRAY");

# T_STDIO
note("T_STDIO");

# open a file in XS for write
my $testfile= "stdio.tmp";
# not everything below cleans up
END { 1 while unlink $testfile; }
my $fh = T_STDIO_open( $testfile );
ok( $fh );

# write to it using perl
if (defined $fh) {

  my @@lines = ("NormalSTDIO\n", "PerlIO\n");

  # print to it using FILE* through XS
  is( T_STDIO_print($fh, $lines[0]), length($lines[0]));

  # print to it using normal perl
  ok(print $fh "$lines[1]");

  # close it using XS if using perlio, using Perl otherwise
  ok( $Config{useperlio} ? T_STDIO_close( $fh ) : close( $fh ) );

  # open from perl, and check contents
  open($fh, "< $testfile");
  ok($fh);
  my $line = <$fh>;
  is($line,$lines[0]);
  $line = <$fh>;
  is($line,$lines[1]);

  ok(close($fh));
  ok(unlink($testfile));

} else {
  for (1..8) {
    skip("Skip Test not relevant since file was not opened correctly",0);
  }
}

$fh = "FOO";
T_STDIO_open_ret_in_arg( $testfile, $fh);
ok( $fh ne "FOO", 'return io in arg open succeeds');
ok( print($fh "first line\n"), 'can print to return io in arg');
ok( close($fh), 'can close return io in arg');
$fh = "FOO";
#now with a bad file name to make sure $fh is written to on failure
my $badfile = $^O eq 'VMS' ? '?' : '';
T_STDIO_open_ret_in_arg( $badfile, $fh);
ok( !defined$fh, 'return io in arg open failed successfully');

# T_INOUT
note("T_INOUT");
SCOPE: {
  my $buf = '';
  local $| = 1;
  open my $fh, "+<", \$buf or die $!;
  my $str = "Fooo!\n";
  print $fh $str;
  my $fh2 = T_INOUT($fh);
  seek($fh2, 0, 0);
  is(readline($fh2), $str);
  ok(print $fh2 "foo\n");
  ok(close $fh);
  # this fails because the underlying shared handle is already closed
  ok(!close $fh2);
}

# T_IN
note("T_IN");
SCOPE: {
  my $buf = "Hello!\n";
  local $| = 1;
  open my $fh, "<", \$buf or die $!;
  my $fh2 = T_IN($fh);
  is(readline($fh2), $buf);
  local $SIG{__WARN__} = sub {die};
  ok(not(eval {print $fh2 "foo\n"; 1}));
}

# T_OUT
note("T_OUT");
SCOPE: {
  my $buf = '';
  local $| = 1;
  open my $fh, "+<", \$buf or die $!;
  my $str = "Fooo!\n";
  print $fh $str;
  my $fh2 = T_OUT($fh);
  seek($fh2, 0, 0);
  is(readline($fh2), $str);
  ok(eval {print $fh2 "foo\n"; 1});
  ok(close $fh);
  # this fails because the underlying shared handle is already closed
  ok(!close $fh2);
}

# Perl RT #124181 SEGV due to double free in typemap
# "Attempt to free unreferenced scalar"
%{*{main::XS::}{HASH}} = ();

sub is_approx {
  my ($l, $r, $n) = @@_;
  if (not defined $l or not defined $r) {
    fail(defined($n) ? $n : ());
  }
  else {
    ok($l < $r+1e-6 && $r < $l+1e-6, defined($n) ? $n : ())
      or note("$l and $r seem to be different given a fuzz of 1e-6");
  }
}
@


1.1
log
@Initial revision
@
text
@a1 2
    chdir 't' if -d 't';
    @@INC = '../lib';
d9 1
a9 2
use Test;
BEGIN { plan tests => 84 }
d12 2
a13 1
use warnings;
d16 1
a16 1
ok(1);
d21 1
a21 1
  use base qw/ intObjPtr /;
d27 1
a27 1
  use base qw/ intRefIvPtr /;
d32 1
a32 2
print "# T_SV\n";

d34 1
a34 1
ok( T_SV($sv), $sv);
d37 1
a37 2
print "# T_SVREF\n";

d40 2
a41 1
ok( T_SVREF($svref), $svref );
d48 7
d56 1
a56 2
print "# T_AVREF\n";

d58 4
a61 1
ok( T_AVREF(\@@array), \@@array);
d63 3
d67 1
a67 1
eval { T_AVREF( \$sv ) };
d70 1
d72 6
a77 1
print "# T_HVREF\n";
a78 2
my %hash;
ok( T_HVREF(\%hash), \%hash);
d80 3
d84 1
a84 1
eval { T_HVREF( \@@array ) };
d89 1
a89 1
print "# T_CVREF\n";
d91 4
a94 1
ok( T_CVREF($sub), $sub );
d96 1
d98 1
a98 1
eval { T_CVREF( \@@array ) };
d101 1
d103 1
a103 2
print "# T_SYSRET\n";

a105 1

d107 1
a107 1
ok( T_SYSRET_fail, undef);
d110 8
a117 4
print "# T_UV\n";

ok( T_UV(5), 5 );    # pass
ok( T_UV(-4) != -4); # fail
d120 15
a134 7
print "# T_IV\n";

ok( T_IV(5), 5);
ok( T_IV(-4), -4);
ok( T_IV(4.1), int(4.1));
ok( T_IV("52"), "52");
ok( T_IV(4.5) != 4.5); # failure
d136 6
a141 2

# Skip T_INT
d144 1
a144 3
print "# T_ENUM\n";

ok( T_ENUM() ); # just hope for a true value
d147 1
a147 1
print "# T_BOOL\n";
d154 7
a160 1
# Skip T_U_INT
d162 10
a171 1
# Skip T_SHORT
d174 2
a175 4

print "# T_U_SHORT\n";

ok( T_U_SHORT(32000), 32000);
d177 1
a177 1
  ok( T_U_SHORT(65536) != 65536); # probably dont want to test edge cases
d183 3
a185 5

print "# T_U_LONG\n";

ok( T_U_LONG(65536), 65536);
ok( T_U_LONG(-1) != -1);
d188 5
a192 7

print "# T_CHAR\n";

ok( T_CHAR("a"), "a");
ok( T_CHAR("-"), "-");
ok( T_CHAR(chr(128)),chr(128));
ok( T_CHAR(chr(256)) ne chr(256));
d195 5
a199 7

print "# T_U_CHAR\n";

ok( T_U_CHAR(127), 127);
ok( T_U_CHAR(128), 128);
ok( T_U_CHAR(-1) != -1);
ok( T_U_CHAR(300) != 300);
a201 2
print "# T_FLOAT\n";

d203 1
a203 1
ok( sprintf("%6.3f",T_FLOAT(52.345)), sprintf("%6.3f",52.345));
d206 1
a206 3
print "# T_NV\n";

ok( T_NV(52.345), 52.345);
d209 1
a209 3
print "# T_DOUBLE\n";

ok( sprintf("%6.3f",T_DOUBLE(52.345)), sprintf("%6.3f",52.345));
d212 11
a222 4
print "# T_PV\n";

ok( T_PV("a string"), "a string");
ok( T_PV(52), 52);
a224 2
print "# T_PTR\n";

d227 1
a227 1
ok( T_PTR_IN( $ptr ), $t );
d230 1
a230 2
print "# T_PTRREF\n";

d233 2
a234 2
ok( ref($ptr), "SCALAR");
ok( T_PTRREF_IN( $ptr ), $t );
d241 1
a241 2
print "# T_PTROBJ\n";

d244 2
a245 2
ok( ref($ptr), "intObjPtr");
ok( $ptr->T_PTROBJ_IN, $t );
d253 2
a254 2
ok( ref($ptr), "intObjPtr::SubClass");
ok( $ptr->T_PTROBJ_IN, $t );
d259 1
a259 2
print "# T_REF_IV_PTR\n";

d262 2
a263 2
ok( ref($ptr), "intRefIvPtr");
ok( $ptr->T_REF_IV_PTR_IN(), $t);
d277 1
a277 2
print "# T_OPAQUEPTR\n";

d280 1
a280 1
ok( T_OPAQUEPTR_OUT($p), $t);
d283 1
a283 2
print "# T_OPAQUEPTR with a struct\n";

d287 1
a287 1
ok(scalar(@@result),scalar(@@test));
d289 1
a289 1
  ok($result[$_], $test[$_]);
d293 1
a293 2
print "# T_OPAQUE\n";

d296 2
a297 2
ok(T_OPAQUEPTR_OUT_short( $p ), $t); # Test using T_OPAQUEPTR
ok(T_OPAQUE_OUT( $p ), $t );         # Test using T_OPQAQUE
d300 1
a300 1
print "# A packed  array\n";
d305 1
a305 1
ok(scalar(@@uopq), scalar(@@opq));
d307 1
a307 1
  ok( $uopq[$_], $opq[$_]);
d310 39
a348 3
# Skip T_PACKED

# Skip T_PACKEDARRAY
a354 1
print "# T_ARRAY\n";
d357 1
a357 7
ok(scalar(@@outarr), scalar(@@inarr));

for (0..$#inarr) {
  ok($outarr[$_], $inarr[$_]);
}


d360 1
a360 1
print "# T_STDIO\n";
d364 2
d375 1
a375 1
  ok( T_STDIO_print($fh, $lines[0]), length($lines[0]));
d387 1
a387 1
  ok($line,$lines[0]);
d389 1
a389 1
  ok($line,$lines[1]);
d400 71
@


1.1.1.1
log
@import perl 5.10.1
@
text
@@


1.1.1.2
log
@Perl 5.12.2 from CPAN
@
text
@d2 2
d11 2
a12 1
use Test::More tests => 84;
d18 1
a18 1
pass();
d37 1
a37 1
is( T_SV($sv), $sv);
d44 1
a44 1
is( T_SVREF($svref), $svref );
d55 1
a55 1
is( T_AVREF(\@@array), \@@array);
d65 1
a65 1
is( T_HVREF(\%hash), \%hash);
d75 1
a75 1
is( T_CVREF($sub), $sub );
d88 1
a88 1
is( T_SYSRET_fail, undef);
d93 2
a94 2
is( T_UV(5), 5 );    # pass
isnt( T_UV(-4), -4); # fail
d99 5
a103 5
is( T_IV(5), 5);
is( T_IV(-4), -4);
is( T_IV(4.1), int(4.1));
is( T_IV("52"), "52");
isnt( T_IV(4.5), 4.5); # failure
d129 1
a129 1
is( T_U_SHORT(32000), 32000);
d131 1
a131 1
  isnt( T_U_SHORT(65536), 65536); # probably dont want to test edge cases
d140 2
a141 2
is( T_U_LONG(65536), 65536);
isnt( T_U_LONG(-1), -1);
d147 4
a150 4
is( T_CHAR("a"), "a");
is( T_CHAR("-"), "-");
is( T_CHAR(chr(128)),chr(128));
isnt( T_CHAR(chr(256)), chr(256));
d156 4
a159 4
is( T_U_CHAR(127), 127);
is( T_U_CHAR(128), 128);
isnt( T_U_CHAR(-1), -1);
isnt( T_U_CHAR(300), 300);
d165 1
a165 1
is( sprintf("%6.3f",T_FLOAT(52.345)), sprintf("%6.3f",52.345));
d170 1
a170 1
is( T_NV(52.345), 52.345);
d175 1
a175 1
is( sprintf("%6.3f",T_DOUBLE(52.345)), sprintf("%6.3f",52.345));
d180 2
a181 2
is( T_PV("a string"), "a string");
is( T_PV(52), 52);
d188 1
a188 1
is( T_PTR_IN( $ptr ), $t );
d195 2
a196 2
is( ref($ptr), "SCALAR");
is( T_PTRREF_IN( $ptr ), $t );
d207 2
a208 2
is( ref($ptr), "intObjPtr");
is( $ptr->T_PTROBJ_IN, $t );
d216 2
a217 2
is( ref($ptr), "intObjPtr::SubClass");
is( $ptr->T_PTROBJ_IN, $t );
d226 2
a227 2
is( ref($ptr), "intRefIvPtr");
is( $ptr->T_REF_IV_PTR_IN(), $t);
d245 1
a245 1
is( T_OPAQUEPTR_OUT($p), $t);
d253 1
a253 1
is(scalar(@@result),scalar(@@test));
d255 1
a255 1
  is($result[$_], $test[$_]);
d263 2
a264 2
is(T_OPAQUEPTR_OUT_short( $p ), $t); # Test using T_OPAQUEPTR
is(T_OPAQUE_OUT( $p ), $t );         # Test using T_OPQAQUE
d272 1
a272 1
is(scalar(@@uopq), scalar(@@opq));
d274 1
a274 1
  is( $uopq[$_], $opq[$_]);
d289 1
a289 1
is(scalar(@@outarr), scalar(@@inarr));
d292 1
a292 1
  is($outarr[$_], $inarr[$_]);
d311 1
a311 1
  is( T_STDIO_print($fh, $lines[0]), length($lines[0]));
d323 1
a323 1
  is($line,$lines[0]);
d325 1
a325 1
  is($line,$lines[1]);
@


1.1.1.3
log
@import perl 5.16.3 from CPAN - worked on by Andrew Fresh and myself
@
text
@d9 1
a9 1
use Test::More tests => 140;
d31 2
a32 1
note("T_SV");
d37 2
a38 1
note("T_SVREF");
a41 1
is( ${ T_SVREF($svref) }, $$svref );
d48 2
a49 6
note("T_SVREF_REFCOUNT_FIXED");
is( T_SVREF_REFCOUNT_FIXED($svref), $svref );
is( ${ T_SVREF_REFCOUNT_FIXED($svref) }, $$svref );
eval { T_SVREF_REFCOUNT_FIXED( "fail - not ref" ) };
ok( $@@ );

a50 2
# T_AVREF - reference to a perl Array
note("T_AVREF");
d53 1
d58 2
a59 7
# T_AVREF_REFCOUNT_FIXED  - reference to a perl Array, refcount fixed
note("T_AVREF_REFCOUNT_FIXED");
is( T_AVREF_REFCOUNT_FIXED(\@@array), \@@array);
# Now test that a non array ref is rejected
eval { T_AVREF_REFCOUNT_FIXED( \$sv ) };
ok( $@@ );

a60 2
# T_HVREF - reference to a perl Hash
note("T_HVREF");
d63 1
a68 8
# T_HVREF_REFCOUNT_FIXED - reference to a perl Hash, refcount fixed
note("T_HVREF_REFCOUNT_FIXED");
is( T_HVREF_REFCOUNT_FIXED(\%hash), \%hash);
# Now test that a non hash ref is rejected
eval { T_HVREF_REFCOUNT_FIXED( \@@array ) };
ok( $@@ );


d70 1
a70 1
note("T_CVREF");
d73 1
d78 2
a79 4
is( T_CVREF_REFCOUNT_FIXED($sub), $sub );
# Now test that a non code ref is rejected
eval { T_CVREF_REFCOUNT_FIXED( \@@array ) };
ok( $@@ );
a80 3

# T_SYSRET - system return values
note("T_SYSRET");
d83 1
d88 2
a89 1
note("T_UV");
d93 8
a100 4
# T_U_INT - unsigned integer with (unsigned int) cast
note("T_U_INT");
is( T_U_INT(5), 5 );    # pass
isnt( T_U_INT(-4), -4); # fail
a101 16
# T_IV - signed integer
# T_INT - signed integer with cast
# T_LONG - signed integer with cast to IV
# T_SHORT - signed short
for my $t (['T_IV', \&T_IV],
           ['T_INT', \&T_INT],
           ['T_LONG', \&T_LONG],
           ['T_SHORT', \&T_SHORT])
{
  note($t->[0]);
  is( $t->[1]->(5), 5);
  is( $t->[1]->(-4), -4);
  is( $t->[1]->(4.1), int(4.1));
  is( $t->[1]->("52"), "52");
  isnt( $t->[1]->(4.5), 4.5); # failure
}
d103 1
a103 6
if ($Config{shortsize} == 2) {
  isnt( T_SHORT(32801), 32801 );
}
else {
  pass(); # e.g. Crays have shortsize 4 (T3X) or 8 (CXX and SVX)
}
d106 3
a108 1
ok( T_ENUM(), 'T_ENUM' ); # just hope for a true value
d111 1
a111 1
note("T_BOOL");
d118 4
d123 3
a125 1
note("T_U_SHORT");
d134 3
a136 1
note("T_U_LONG");
d141 3
a143 1
note("T_CHAR");
d150 3
a152 1
note("T_U_CHAR");
d159 2
d162 1
a162 1
is( sprintf("%6.3f",T_FLOAT(52.345)), sprintf("%6.3f",52.345), "T_FLOAT");
d165 3
a167 1
is( T_NV(52.345), 52.345, "T_NV" );
d170 3
a172 1
is( sprintf("%6.3f",T_DOUBLE(52.345)), sprintf("%6.3f",52.345), "T_DOUBLE" );
d175 2
a176 1
note("T_PV");
d181 2
d185 1
a185 1
is( T_PTR_IN( $ptr ), $t, "T_PTR" );
d188 2
a189 1
note("T_PTRREF");
d200 2
a201 1
note("T_PTROBJ");
d219 2
a220 1
note("T_REF_IV_PTR");
d238 2
a239 1
note("T_OPAQUEPTR");
d245 2
a246 1
note("T_OPAQUEPTR with a struct");
d256 2
a257 1
note("T_OPAQUE");
d264 1
a264 1
note("T_OPAQUE: A packed array");
d274 3
a276 39
# T_PACKED
note("T_PACKED");
my $struct = T_PACKED_out(-4, 3, 2.1);
ok(ref($struct) eq 'HASH');
is_approx($struct->{a}, -4);
is_approx($struct->{b}, 3);
is_approx($struct->{c}, 2.1);
my @@rv = T_PACKED_in($struct);
is(scalar(@@rv), 3);
is_approx($rv[0], -4);
is_approx($rv[1], 3);
is_approx($rv[2], 2.1);

# T_PACKEDARRAY
SCOPE: {
  note("T_PACKED_ARRAY");
  my @@d = (
    -4, 3, 2.1,
    2, 1, -15.3,
    1,1,1
  );
  my @@out;
  push @@out, {a => $d[$_*3], b => $d[$_*3+1], c => $d[$_*3+2]} for (0..2);
  my $structs = T_PACKEDARRAY_out(@@d);
  ok(ref($structs) eq 'ARRAY');
  is(scalar(@@$structs), 3);
  foreach my $i (0..2) {
    my $s = $structs->[$i];
    is(ref($s), 'HASH');
    is_approx($s->{a}, $d[$i*3+0]);
    is_approx($s->{b}, $d[$i*3+1]);
    is_approx($s->{c}, $d[$i*3+2]);
  }
  my @@rv = T_PACKEDARRAY_in($structs);
  is(scalar(@@rv), scalar(@@d));
  foreach my $i (0..$#d) {
    is_approx($rv[$i], $d[$i]);
  }
}
d283 1
d286 7
a292 1
is_deeply(\@@outarr, \@@inarr, "T_ARRAY");
d295 1
a295 1
note("T_STDIO");
a332 50
# T_INOUT
note("T_INOUT");
SCOPE: {
  my $buf = '';
  local $| = 1;
  open my $fh, "+<", \$buf or die $!;
  my $str = "Fooo!\n";
  print $fh $str;
  my $fh2 = T_INOUT($fh);
  seek($fh2, 0, 0);
  is(readline($fh2), $str);
  ok(print $fh2 "foo\n");
}

# T_IN
note("T_IN");
SCOPE: {
  my $buf = "Hello!\n";
  local $| = 1;
  open my $fh, "<", \$buf or die $!;
  my $fh2 = T_IN($fh);
  is(readline($fh2), $buf);
  local $SIG{__WARN__} = sub {die};
  ok(not(eval {print $fh2 "foo\n"; 1}));
}

# T_OUT
note("T_OUT");
SCOPE: {
  my $buf = '';
  local $| = 1;
  open my $fh, "+<", \$buf or die $!;
  my $str = "Fooo!\n";
  print $fh $str;
  my $fh2 = T_OUT($fh);
  seek($fh2, 0, 0);
  is(readline($fh2), $str);
  ok(eval {print $fh2 "foo\n"; 1});
}

sub is_approx {
  my ($l, $r, $n) = @@_;
  if (not defined $l or not defined $r) {
    fail(defined($n) ? $n : ());
  }
  else {
    ok($l < $r+1e-6 && $r < $l+1e-6, defined($n) ? $n : ())
      or note("$l and $r seem to be different given a fuzz of 1e-6");
  }
}
@


1.1.1.4
log
@Import perl-5.18.2

OK espie@@ sthen@@ deraadt@@
@
text
@d9 1
a9 1
use Test::More tests => 146;
a151 19

{
  # these attempt to modify a read-only value
  ok( !eval { T_BOOL_2(52); 1 } );
  ok( !eval { T_BOOL_2(0); 1 } );
  ok( !eval { T_BOOL_2(''); 1 } );
  ok( !eval { T_BOOL_2(undef); 1 } );
}

{
    my ($in, $out);
    $in = 1;
    T_BOOL_OUT($out, $in);
    ok($out, "T_BOOL_OUT, true in");
    $in = 0;
    $out = 1;
    T_BOOL_OUT($out, $in);
    ok(!$out, "T_BOOL_OUT, false in");
}
@


1.1.1.5
log
@Import perl-5.20.1
@
text
@d9 1
a9 1
use Test::More tests => 148;
d20 1
a20 1
  use parent '-norequire', qw/ intObjPtr /;
d26 1
a26 1
  use parent '-norequire', qw/ intRefIvPtr /;
a213 7
ok !defined T_PV_null, 'RETVAL = NULL returns undef for char*';
{
    my $uninit;
    local $SIG{__WARN__} = sub { ++$uninit if shift =~ /uninit/ };
    () = ''.T_PV_null;
    is $uninit, 1, 'uninit warning from NULL returned from char* func';
}
@


1.1.1.6
log
@Import perl-5.24.2
@
text
@d9 1
a9 1
use Test::More tests => 156;
d12 1
a12 2
#catch WARN_INTERNAL type errors, and anything else unexpected
use warnings FATAL => 'all';
a215 1
    use warnings NONFATAL => 'all';
a361 2
# not everything below cleans up
END { 1 while unlink $testfile; }
a395 11
$fh = "FOO";
T_STDIO_open_ret_in_arg( $testfile, $fh);
ok( $fh ne "FOO", 'return io in arg open succeeds');
ok( print($fh "first line\n"), 'can print to return io in arg');
ok( close($fh), 'can close return io in arg');
$fh = "FOO";
#now with a bad file name to make sure $fh is written to on failure
my $badfile = $^O eq 'VMS' ? '?' : '';
T_STDIO_open_ret_in_arg( $badfile, $fh);
ok( !defined$fh, 'return io in arg open failed successfully');

a407 3
  ok(close $fh);
  # this fails because the underlying shared handle is already closed
  ok(!close $fh2);
a433 3
  ok(close $fh);
  # this fails because the underlying shared handle is already closed
  ok(!close $fh2);
a434 4

# Perl RT #124181 SEGV due to double free in typemap
# "Attempt to free unreferenced scalar"
%{*{main::XS::}{HASH}} = ();
@


