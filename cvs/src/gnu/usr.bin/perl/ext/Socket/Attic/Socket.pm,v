head	1.13;
access;
symbols
	OPENBSD_5_3:1.12.0.10
	OPENBSD_5_3_BASE:1.12
	OPENBSD_5_2:1.12.0.8
	OPENBSD_5_2_BASE:1.12
	OPENBSD_5_1_BASE:1.12
	OPENBSD_5_1:1.12.0.6
	OPENBSD_5_0:1.12.0.4
	OPENBSD_5_0_BASE:1.12
	OPENBSD_4_9:1.12.0.2
	OPENBSD_4_9_BASE:1.12
	PERL_5_12_2:1.1.1.11
	OPENBSD_4_8:1.11.0.4
	OPENBSD_4_8_BASE:1.11
	OPENBSD_4_7:1.11.0.2
	OPENBSD_4_7_BASE:1.11
	PERL_5_10_1:1.1.1.10
	OPENBSD_4_6:1.10.0.6
	OPENBSD_4_6_BASE:1.10
	OPENBSD_4_5:1.10.0.2
	OPENBSD_4_5_BASE:1.10
	PERL_5_10_0:1.1.1.9
	OPENBSD_4_4:1.9.0.10
	OPENBSD_4_4_BASE:1.9
	OPENBSD_4_3:1.9.0.8
	OPENBSD_4_3_BASE:1.9
	OPENBSD_4_2:1.9.0.6
	OPENBSD_4_2_BASE:1.9
	OPENBSD_4_1:1.9.0.4
	OPENBSD_4_1_BASE:1.9
	OPENBSD_4_0:1.9.0.2
	OPENBSD_4_0_BASE:1.9
	PERL_5_8_8:1.1.1.8
	OPENBSD_3_9:1.8.0.8
	OPENBSD_3_9_BASE:1.8
	OPENBSD_3_8:1.8.0.6
	OPENBSD_3_8_BASE:1.8
	OPENBSD_3_7:1.8.0.4
	OPENBSD_3_7_BASE:1.8
	PERL_5_8_6:1.1.1.7
	OPENBSD_3_6:1.8.0.2
	OPENBSD_3_6_BASE:1.8
	PERL_5_8_5:1.1.1.7
	PERL_5_8_3:1.1.1.6
	OPENBSD_3_5:1.7.0.2
	OPENBSD_3_5_BASE:1.7
	PERL_5_8_2:1.1.1.6
	OPENBSD_3_4:1.6.0.4
	OPENBSD_3_4_BASE:1.6
	OPENBSD_3_3:1.6.0.2
	OPENBSD_3_3_BASE:1.6
	PERL_5_8_0:1.1.1.5
	OPENBSD_3_2:1.5.0.6
	OPENBSD_3_2_BASE:1.5
	OPENBSD_3_1:1.5.0.4
	OPENBSD_3_1_BASE:1.5
	OPENBSD_3_0:1.5.0.2
	OPENBSD_3_0_BASE:1.5
	PERL_5_6_1:1.1.1.4
	OPENBSD_2_9:1.4.0.6
	OPENBSD_2_9_BASE:1.4
	OPENBSD_2_8:1.4.0.4
	OPENBSD_2_8_BASE:1.4
	OPENBSD_2_7:1.4.0.2
	OPENBSD_2_7_BASE:1.4
	PERL_5_6_0:1.1.1.3
	OPENBSD_2_6:1.3.0.2
	OPENBSD_2_6_BASE:1.3
	PERL_500503:1.1.1.2
	CPAN:1.1.1
	OPENBSD_2_5:1.2.0.6
	OPENBSD_2_5_BASE:1.2
	OPENBSD_2_4:1.2.0.4
	OPENBSD_2_4_BASE:1.2
	OPENBSD_2_3:1.2.0.2
	OPENBSD_2_3_BASE:1.2
	OPENBSD_2_2:1.1.1.1.0.6
	OPENBSD_2_2_BASE:1.1.1.1
	OPENBSD_2_1:1.1.1.1.0.4
	OPENBSD_2_1_BASE:1.1.1.1
	OPENBSD_2_0:1.1.1.1.0.2
	OPENBSD_2_0_BASE:1.1.1.1
	perl5003:1.1.1.1
	lwall:1.1.1;
locks; strict;
comment	@# @;
expand	@o@;


1.13
date	2013.03.25.20.40.54;	author sthen;	state dead;
branches;
next	1.12;

1.12
date	2010.09.24.15.06.57;	author millert;	state Exp;
branches;
next	1.11;

1.11
date	2009.10.12.18.24.34;	author millert;	state Exp;
branches;
next	1.10;

1.10
date	2008.09.29.17.36.06;	author millert;	state Exp;
branches;
next	1.9;

1.9
date	2006.03.28.19.23.04;	author millert;	state Exp;
branches;
next	1.8;

1.8
date	2004.08.09.18.09.22;	author millert;	state Exp;
branches;
next	1.7;

1.7
date	2003.12.03.03.02.33;	author millert;	state Exp;
branches;
next	1.6;

1.6
date	2002.10.27.22.25.23;	author millert;	state Exp;
branches;
next	1.5;

1.5
date	2001.05.24.18.35.17;	author millert;	state Exp;
branches;
next	1.4;

1.4
date	2000.04.06.17.05.37;	author millert;	state Exp;
branches;
next	1.3;

1.3
date	99.04.29.22.51.36;	author millert;	state Exp;
branches;
next	1.2;

1.2
date	97.11.30.07.55.55;	author millert;	state Exp;
branches;
next	1.1;

1.1
date	96.08.19.10.12.16;	author downsj;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	96.08.19.10.12.16;	author downsj;	state Exp;
branches;
next	1.1.1.2;

1.1.1.2
date	99.04.29.22.39.08;	author millert;	state Exp;
branches;
next	1.1.1.3;

1.1.1.3
date	2000.04.06.16.09.23;	author millert;	state Exp;
branches;
next	1.1.1.4;

1.1.1.4
date	2001.05.24.18.22.59;	author millert;	state Exp;
branches;
next	1.1.1.5;

1.1.1.5
date	2002.10.27.22.14.55;	author millert;	state Exp;
branches;
next	1.1.1.6;

1.1.1.6
date	2003.12.03.02.43.53;	author millert;	state Exp;
branches;
next	1.1.1.7;

1.1.1.7
date	2004.08.09.17.46.27;	author millert;	state Exp;
branches;
next	1.1.1.8;

1.1.1.8
date	2006.03.28.18.48.20;	author millert;	state Exp;
branches;
next	1.1.1.9;

1.1.1.9
date	2008.09.29.17.18.24;	author millert;	state Exp;
branches;
next	1.1.1.10;

1.1.1.10
date	2009.10.12.18.11.15;	author millert;	state Exp;
branches;
next	1.1.1.11;

1.1.1.11
date	2010.09.24.14.48.50;	author millert;	state Exp;
branches;
next	;


desc
@@


1.13
log
@merge/resolve conflicts
(some more to do after this one)
@
text
@package Socket;

our($VERSION, @@ISA, @@EXPORT, @@EXPORT_OK, %EXPORT_TAGS);
$VERSION = "1.87";

=head1 NAME

Socket, sockaddr_in, sockaddr_un, inet_aton, inet_ntoa, inet_pton, inet_ntop - load the C socket.h defines and structure manipulators 

=head1 SYNOPSIS

    use Socket;

    $proto = getprotobyname('udp');
    socket(Socket_Handle, PF_INET, SOCK_DGRAM, $proto);
    $iaddr = gethostbyname('hishost.com');
    $port = getservbyname('time', 'udp');
    $sin = sockaddr_in($port, $iaddr);
    send(Socket_Handle, 0, 0, $sin);

    $proto = getprotobyname('tcp');
    socket(Socket_Handle, PF_INET, SOCK_STREAM, $proto);
    $port = getservbyname('smtp', 'tcp');
    $sin = sockaddr_in($port,inet_aton("127.1"));
    $sin = sockaddr_in(7,inet_aton("localhost"));
    $sin = sockaddr_in(7,INADDR_LOOPBACK);
    connect(Socket_Handle,$sin);

    ($port, $iaddr) = sockaddr_in(getpeername(Socket_Handle));
    $peer_host = gethostbyaddr($iaddr, AF_INET);
    $peer_addr = inet_ntoa($iaddr);

    $proto = getprotobyname('tcp');
    socket(Socket_Handle, PF_UNIX, SOCK_STREAM, $proto);
    unlink('/var/run/usock');
    $sun = sockaddr_un('/var/run/usock');
    connect(Socket_Handle,$sun);

=head1 DESCRIPTION

This module is just a translation of the C F<socket.h> file.
Unlike the old mechanism of requiring a translated F<socket.ph>
file, this uses the B<h2xs> program (see the Perl source distribution)
and your native C compiler.  This means that it has a 
far more likely chance of getting the numbers right.  This includes
all of the commonly used pound-defines like AF_INET, SOCK_STREAM, etc.

Also, some common socket "newline" constants are provided: the
constants C<CR>, C<LF>, and C<CRLF>, as well as C<$CR>, C<$LF>, and
C<$CRLF>, which map to C<\015>, C<\012>, and C<\015\012>.  If you do
not want to use the literal characters in your programs, then use
the constants provided here.  They are not exported by default, but can
be imported individually, and with the C<:crlf> export tag:

    use Socket qw(:DEFAULT :crlf);

In addition, some structure manipulation functions are available:

=over 4

=item inet_aton HOSTNAME

Takes a string giving the name of a host, and translates that to an
opaque string (if programming in C, struct in_addr). Takes arguments
of both the 'rtfm.mit.edu' type and '18.181.0.24'. If the host name
cannot be resolved, returns undef.  For multi-homed hosts (hosts with
more than one address), the first address found is returned.

For portability do not assume that the result of inet_aton() is 32
bits wide, in other words, that it would contain only the IPv4 address
in network order.

=item inet_ntoa IP_ADDRESS

Takes a string (an opaque string as returned by inet_aton(),
or a v-string representing the four octets of the IPv4 address in
network order) and translates it into a string of the form 'd.d.d.d'
where the 'd's are numbers less than 256 (the normal human-readable
four dotted number notation for Internet addresses).

=item INADDR_ANY

Note: does not return a number, but a packed string.

Returns the 4-byte wildcard ip address which specifies any
of the hosts ip addresses.  (A particular machine can have
more than one ip address, each address corresponding to
a particular network interface. This wildcard address
allows you to bind to all of them simultaneously.)
Normally equivalent to inet_aton('0.0.0.0').

=item INADDR_BROADCAST

Note: does not return a number, but a packed string.

Returns the 4-byte 'this-lan' ip broadcast address.
This can be useful for some protocols to solicit information
from all servers on the same LAN cable.
Normally equivalent to inet_aton('255.255.255.255').

=item INADDR_LOOPBACK

Note - does not return a number.

Returns the 4-byte loopback address.  Normally equivalent
to inet_aton('localhost').

=item INADDR_NONE

Note - does not return a number.

Returns the 4-byte 'invalid' ip address.  Normally equivalent
to inet_aton('255.255.255.255').

=item sockaddr_family SOCKADDR

Takes a sockaddr structure (as returned by pack_sockaddr_in(),
pack_sockaddr_un() or the perl builtin functions getsockname() and
getpeername()) and returns the address family tag.  It will match the
constant AF_INET for a sockaddr_in and AF_UNIX for a sockaddr_un.  It
can be used to figure out what unpacker to use for a sockaddr of
unknown type.

=item sockaddr_in PORT, ADDRESS

=item sockaddr_in SOCKADDR_IN

In a list context, unpacks its SOCKADDR_IN argument and returns an array
consisting of (PORT, ADDRESS).  In a scalar context, packs its (PORT,
ADDRESS) arguments as a SOCKADDR_IN and returns it.  If this is confusing,
use pack_sockaddr_in() and unpack_sockaddr_in() explicitly.

=item pack_sockaddr_in PORT, IP_ADDRESS

Takes two arguments, a port number and an opaque string, IP_ADDRESS
(as returned by inet_aton(), or a v-string).  Returns the sockaddr_in
structure with those arguments packed in with AF_INET filled in.  For
Internet domain sockets, this structure is normally what you need for
the arguments in bind(), connect(), and send(), and is also returned
by getpeername(), getsockname() and recv().

=item unpack_sockaddr_in SOCKADDR_IN

Takes a sockaddr_in structure (as returned by pack_sockaddr_in()) and
returns an array of two elements: the port and an opaque string
representing the IP address (you can use inet_ntoa() to convert the
address to the four-dotted numeric format).  Will croak if the
structure does not have AF_INET in the right place.

=item sockaddr_un PATHNAME

=item sockaddr_un SOCKADDR_UN

In a list context, unpacks its SOCKADDR_UN argument and returns an array
consisting of (PATHNAME).  In a scalar context, packs its PATHNAME
arguments as a SOCKADDR_UN and returns it.  If this is confusing, use
pack_sockaddr_un() and unpack_sockaddr_un() explicitly.
These are only supported if your system has E<lt>F<sys/un.h>E<gt>.

=item pack_sockaddr_un PATH

Takes one argument, a pathname. Returns the sockaddr_un structure with
that path packed in with AF_UNIX filled in. For unix domain sockets, this
structure is normally what you need for the arguments in bind(),
connect(), and send(), and is also returned by getpeername(),
getsockname() and recv().

=item unpack_sockaddr_un SOCKADDR_UN

Takes a sockaddr_un structure (as returned by pack_sockaddr_un())
and returns the pathname.  Will croak if the structure does not
have AF_UNIX in the right place.

=item inet_pton ADDRESS_FAMILY, HOSTNAME

Takes an address family, either AF_INET or AF_INET6, and a string giving
the name of a host, and translates that to an opaque string
(if programming in C, struct in_addr or struct in6_addr depending on the 
address family passed in).  The host string may be a string hostname, such
as 'www.perl.org', or an IP address.  If using an IP address, the type of
IP address must be consistant with the address family passed into the function.

This function is not exported by default.

=item inet_ntop ADDRESS_FAMILY, IP_ADDRESS

Takes an address family, either AF_INET or AF_INET6, and a string 
(an opaque string as returned by inet_aton() or inet_pton()) and
translates it to an IPv4 or IPv6 address string.

This function is not exported by default.

=back

=cut

use Carp;
use warnings::register;

require Exporter;
use XSLoader ();
@@ISA = qw(Exporter);
@@EXPORT = qw(
	inet_aton inet_ntoa
	sockaddr_family
	pack_sockaddr_in unpack_sockaddr_in
	pack_sockaddr_un unpack_sockaddr_un
	sockaddr_in sockaddr_un
	INADDR_ANY INADDR_BROADCAST INADDR_LOOPBACK INADDR_NONE
	AF_802
	AF_AAL
	AF_APPLETALK
	AF_CCITT
	AF_CHAOS
	AF_CTF
	AF_DATAKIT
	AF_DECnet
	AF_DLI
	AF_ECMA
	AF_GOSIP
	AF_HYLINK
	AF_IMPLINK
	AF_INET
	AF_INET6
	AF_ISO
	AF_KEY
	AF_LAST
	AF_LAT
	AF_LINK
	AF_MAX
	AF_NBS
	AF_NIT
	AF_NS
	AF_OSI
	AF_OSINET
	AF_PUP
	AF_ROUTE
	AF_SNA
	AF_UNIX
	AF_UNSPEC
	AF_USER
	AF_WAN
	AF_X25
	IOV_MAX
	IP_OPTIONS
	IP_HDRINCL
	IP_TOS
	IP_TTL
	IP_RECVOPTS
	IP_RECVRETOPTS
	IP_RETOPTS
	MSG_BCAST
	MSG_BTAG
	MSG_CTLFLAGS
	MSG_CTLIGNORE
	MSG_CTRUNC
	MSG_DONTROUTE
	MSG_DONTWAIT
	MSG_EOF
	MSG_EOR
	MSG_ERRQUEUE
	MSG_ETAG
	MSG_FIN
	MSG_MAXIOVLEN
	MSG_MCAST
	MSG_NOSIGNAL
	MSG_OOB
	MSG_PEEK
	MSG_PROXY
	MSG_RST
	MSG_SYN
	MSG_TRUNC
	MSG_URG
	MSG_WAITALL
	MSG_WIRE
	PF_802
	PF_AAL
	PF_APPLETALK
	PF_CCITT
	PF_CHAOS
	PF_CTF
	PF_DATAKIT
	PF_DECnet
	PF_DLI
	PF_ECMA
	PF_GOSIP
	PF_HYLINK
	PF_IMPLINK
	PF_INET
	PF_INET6
	PF_ISO
	PF_KEY
	PF_LAST
	PF_LAT
	PF_LINK
	PF_MAX
	PF_NBS
	PF_NIT
	PF_NS
	PF_OSI
	PF_OSINET
	PF_PUP
	PF_ROUTE
	PF_SNA
	PF_UNIX
	PF_UNSPEC
	PF_USER
	PF_WAN
	PF_X25
	SCM_CONNECT
	SCM_CREDENTIALS
	SCM_CREDS
	SCM_RIGHTS
	SCM_TIMESTAMP
	SHUT_RD
	SHUT_RDWR
	SHUT_WR
	SOCK_DGRAM
	SOCK_RAW
	SOCK_RDM
	SOCK_SEQPACKET
	SOCK_STREAM
	SOL_SOCKET
	SOMAXCONN
	SO_ACCEPTCONN
	SO_ATTACH_FILTER
	SO_BACKLOG
	SO_BROADCAST
	SO_CHAMELEON
	SO_DEBUG
	SO_DETACH_FILTER
	SO_DGRAM_ERRIND
	SO_DONTLINGER
	SO_DONTROUTE
	SO_ERROR
	SO_FAMILY
	SO_KEEPALIVE
	SO_LINGER
	SO_OOBINLINE
	SO_PASSCRED
	SO_PASSIFNAME
	SO_PEERCRED
	SO_PROTOCOL
	SO_PROTOTYPE
	SO_RCVBUF
	SO_RCVLOWAT
	SO_RCVTIMEO
	SO_REUSEADDR
	SO_REUSEPORT
	SO_SECURITY_AUTHENTICATION
	SO_SECURITY_ENCRYPTION_NETWORK
	SO_SECURITY_ENCRYPTION_TRANSPORT
	SO_SNDBUF
	SO_SNDLOWAT
	SO_SNDTIMEO
	SO_STATE
	SO_TYPE
	SO_USELOOPBACK
	SO_XOPEN
	SO_XSE
	UIO_MAXIOV
);

@@EXPORT_OK = qw(CR LF CRLF $CR $LF $CRLF

	       inet_pton
	       inet_ntop

	       IPPROTO_IP
	       IPPROTO_IPV6
	       IPPROTO_RAW
	       IPPROTO_ICMP
	       IPPROTO_TCP
	       IPPROTO_UDP

	       TCP_KEEPALIVE
	       TCP_MAXRT
	       TCP_MAXSEG
	       TCP_NODELAY
	       TCP_STDURG);

%EXPORT_TAGS = (
    crlf    => [qw(CR LF CRLF $CR $LF $CRLF)],
    all     => [@@EXPORT, @@EXPORT_OK],
);

BEGIN {
    sub CR   () {"\015"}
    sub LF   () {"\012"}
    sub CRLF () {"\015\012"}
}

*CR   = \CR();
*LF   = \LF();
*CRLF = \CRLF();

sub sockaddr_in {
    if (@@_ == 6 && !wantarray) { # perl5.001m compat; use this && die
	my($af, $port, @@quad) = @@_;
	warnings::warn "6-ARG sockaddr_in call is deprecated" 
	    if warnings::enabled();
	pack_sockaddr_in($port, inet_aton(join('.', @@quad)));
    } elsif (wantarray) {
	croak "usage:   (port,iaddr) = sockaddr_in(sin_sv)" unless @@_ == 1;
        unpack_sockaddr_in(@@_);
    } else {
	croak "usage:   sin_sv = sockaddr_in(port,iaddr))" unless @@_ == 2;
        pack_sockaddr_in(@@_);
    }
}

sub sockaddr_un {
    if (wantarray) {
	croak "usage:   (filename) = sockaddr_un(sun_sv)" unless @@_ == 1;
        unpack_sockaddr_un(@@_);
    } else {
	croak "usage:   sun_sv = sockaddr_un(filename)" unless @@_ == 1;
        pack_sockaddr_un(@@_);
    }
}

sub AUTOLOAD {
    my($constname);
    ($constname = $AUTOLOAD) =~ s/.*:://;
    croak "&Socket::constant not defined" if $constname eq 'constant';
    my ($error, $val) = constant($constname);
    if ($error) {
	croak $error;
    }
    *$AUTOLOAD = sub { $val };
    goto &$AUTOLOAD;
}

XSLoader::load 'Socket', $VERSION;

1;
@


1.12
log
@merge in perl 5.12.2 plus local changes
@
text
@@


1.11
log
@Merge in perl 5.10.1
@
text
@d4 1
a4 1
$VERSION = "1.82";
d8 1
a8 1
Socket, sockaddr_in, sockaddr_un, inet_aton, inet_ntoa - load the C socket.h defines and structure manipulators 
d174 19
d365 3
@


1.10
log
@fix conflicts and merge in local changes to perl 5.10.0
@
text
@d4 1
a4 1
$VERSION = "1.80";
@


1.9
log
@merge in perl 5.8.8
@
text
@d4 1
a4 1
$VERSION = "1.78";
d226 7
d347 4
d352 2
@


1.8
log
@merge 5.8.5 into HEAD
remove now-unused files
crank libperl shared library major number
update Makefile.bsd-wrapper
tweak openbsd hints file for arm and m68k
@
text
@d4 1
a4 1
$VERSION = "1.77";
@


1.7
log
@Resolve conflicts for perl 5.8.2, remove old files, and add OpenBSD-specific scaffolding
@
text
@d4 1
a4 1
$VERSION = "1.76";
d35 2
a36 2
    unlink('/tmp/usock');
    $sun = sockaddr_un('/tmp/usock');
@


1.6
log
@Resolve conflicts, remove old files, merge local changes
@
text
@d4 1
a4 1
$VERSION = "1.75";
@


1.5
log
@merge in perl 5.6.1 with our local changes
@
text
@d4 1
a4 1
$VERSION = "1.72";
d59 1
a59 1
=over
d63 9
a71 5
Takes a string giving the name of a host, and translates that
to the 4-byte string (structure). Takes arguments of both
the 'rtfm.mit.edu' type and '18.181.0.24'. If the host name
cannot be resolved, returns undef. For multi-homed hosts (hosts
with more than one address), the first address found is returned.
d75 5
a79 4
Takes a four byte ip address (as returned by inet_aton())
and translates it into a string of the form 'd.d.d.d'
where the 'd's are numbers less than 256 (the normal
readable four dotted number notation for internet addresses).
d86 1
a86 1
of the hosts ip addresses. (A particular machine can have
d105 1
a105 1
Returns the 4-byte loopback address. Normally equivalent
d112 1
a112 1
Returns the 4-byte 'invalid' ip address. Normally equivalent
d115 9
d135 6
a140 6
Takes two arguments, a port number and a 4 byte IP_ADDRESS (as returned by
inet_aton()). Returns the sockaddr_in structure with those arguments
packed in with AF_INET filled in.  For internet domain sockets, this
structure is normally what you need for the arguments in bind(),
connect(), and send(), and is also returned by getpeername(),
getsockname() and recv().
d145 4
a148 2
returns an array of two elements: the port and the 4-byte ip-address.
Will croak if the structure does not have AF_INET in the right place.
d185 3
a187 1
	inet_aton inet_ntoa pack_sockaddr_in unpack_sockaddr_in
d192 1
d196 1
d205 4
d210 1
d218 1
d222 2
d227 1
d236 1
d249 1
d251 1
d255 1
d264 4
d269 1
d277 1
d281 2
d300 2
d303 1
d305 2
d310 1
d314 5
d324 3
d330 1
d333 2
a386 110
sub INADDR_ANY 		();
sub INADDR_BROADCAST	();
sub INADDR_LOOPBACK	();
sub INADDR_LOOPBACK	();

sub AF_802		();
sub AF_APPLETALK	();
sub AF_CCITT		();
sub AF_CHAOS		();
sub AF_DATAKIT		();
sub AF_DECnet		();
sub AF_DLI		();
sub AF_ECMA		();
sub AF_GOSIP		();
sub AF_HYLINK		();
sub AF_IMPLINK		();
sub AF_INET		();
sub AF_LAT		();
sub AF_MAX		();
sub AF_NBS		();
sub AF_NIT		();
sub AF_NS		();
sub AF_OSI		();
sub AF_OSINET		();
sub AF_PUP		();
sub AF_SNA		();
sub AF_UNIX		();
sub AF_UNSPEC		();
sub AF_X25		();
sub IOV_MAX		();
sub MSG_BCAST		();
sub MSG_CTLFLAGS	();
sub MSG_CTLIGNORE	();
sub MSG_CTRUNC		();
sub MSG_DONTROUTE	();
sub MSG_DONTWAIT	();
sub MSG_EOF		();
sub MSG_EOR		();
sub MSG_ERRQUEUE	();
sub MSG_FIN		();
sub MSG_MAXIOVLEN	();
sub MSG_MCAST		();
sub MSG_NOSIGNAL	();
sub MSG_OOB		();
sub MSG_PEEK		();
sub MSG_PROXY		();
sub MSG_RST		();
sub MSG_SYN		();
sub MSG_TRUNC		();
sub MSG_URG		();
sub MSG_WAITALL		();
sub PF_802		();
sub PF_APPLETALK	();
sub PF_CCITT		();
sub PF_CHAOS		();
sub PF_DATAKIT		();
sub PF_DECnet		();
sub PF_DLI		();
sub PF_ECMA		();
sub PF_GOSIP		();
sub PF_HYLINK		();
sub PF_IMPLINK		();
sub PF_INET		();
sub PF_LAT		();
sub PF_MAX		();
sub PF_NBS		();
sub PF_NIT		();
sub PF_NS		();
sub PF_OSI		();
sub PF_OSINET		();
sub PF_PUP		();
sub PF_SNA		();
sub PF_UNIX		();
sub PF_UNSPEC		();
sub PF_X25		();
sub SCM_CONNECT		();
sub SCM_CREDENTIALS	();
sub SCM_CREDS		();
sub SCM_RIGHTS		();
sub SCM_TIMESTAMP	();
sub SHUT_RD		();
sub SHUT_RDWR		();
sub SHUT_WR		();
sub SOCK_DGRAM		();
sub SOCK_RAW		();
sub SOCK_RDM		();
sub SOCK_SEQPACKET	();
sub SOCK_STREAM		();
sub SOL_SOCKET		();
sub SOMAXCONN		();
sub SO_ACCEPTCONN	();
sub SO_BROADCAST	();
sub SO_DEBUG		();
sub SO_DONTLINGER	();
sub SO_DONTROUTE	();
sub SO_ERROR		();
sub SO_KEEPALIVE	();
sub SO_LINGER		();
sub SO_OOBINLINE	();
sub SO_RCVBUF		();
sub SO_RCVLOWAT		();
sub SO_RCVTIMEO		();
sub SO_REUSEADDR	();
sub SO_SNDBUF		();
sub SO_SNDLOWAT		();
sub SO_SNDTIMEO		();
sub SO_TYPE		();
sub SO_USELOOPBACK	();
sub UIO_MAXIOV		();

d390 4
a393 4
    my $val = constant($constname, @@_ ? $_[0] : 0);
    if ($! != 0) {
	my ($pack,$file,$line) = caller;
	croak "Your vendor has not defined Socket macro $constname, used";
d395 1
a395 1
    eval "sub $AUTOLOAD () { $val }";
@


1.4
log
@perl-5.6.0 + local changes
@
text
@d114 1
a114 1
In an array context, unpacks its SOCKADDR_IN argument and returns an array
d138 1
a138 1
In an array context, unpacks its SOCKADDR_UN argument and returns an array
d271 1
@


1.3
log
@perl5.005_03 (stock)
@
text
@d3 2
a4 2
use vars qw($VERSION @@ISA @@EXPORT @@EXPORT_OK %EXPORT_TAGS);
$VERSION = "1.7";
d163 1
d166 2
a167 2
require DynaLoader;
@@ISA = qw(Exporter DynaLoader);
d197 2
d209 1
d248 3
d276 1
d279 8
a286 1
@@EXPORT_OK = qw(CR LF CRLF $CR $LF $CRLF);
d306 2
a307 1
	carp "6-ARG sockaddr_in call is deprecated" if $^W;
d328 109
d446 1
a446 1
    eval "sub $AUTOLOAD { $val }";
d450 1
a450 1
bootstrap Socket $VERSION;
@


1.2
log
@perl 5.004_04
@
text
@d3 2
a4 2
use vars qw($VERSION @@ISA @@EXPORT);
$VERSION = "1.6";
d23 1
a23 1
    $port = getservbyname('smtp');
d48 9
d196 3
d200 5
d206 1
d209 6
d239 5
d270 17
@


1.1
log
@Initial revision
@
text
@d4 1
a4 1
$VERSION = "1.5";
d50 2
d57 2
a58 1
cannot be resolved, returns undef.
d78 9
d98 1
a98 1
Returns the 4-byte invalid ip address. Normally equivalent
d130 1
a130 1
consisting of (PATHNAME).  In a scalar context, packs its PATHANE
d133 1
a133 1
These are only supported if your system has <sys/un.h>.
d149 2
a155 1
use AutoLoader;
d162 1
a162 1
	INADDR_ANY INADDR_LOOPBACK INADDR_NONE
d272 2
a273 8
	if ($! =~ /Invalid/) {
	    $AutoLoader::AUTOLOAD = $AUTOLOAD;
	    goto &AutoLoader::AUTOLOAD;
	}
	else {
	    my ($pack,$file,$line) = caller;
	    croak "Your vendor has not defined Socket macro $constname, used";
	}
a280 3
# Preloaded methods go here.  Autoload methods go after __END__, and are
# processed by the autosplit program.

a281 1
__END__
@


1.1.1.1
log
@Import of Perl 5.003 into the tree.  Makefile.bsd-wrapper and
config.sh.OpenBSD are the only local changes.
@
text
@@


1.1.1.2
log
@perl5.005_03
@
text
@d3 2
a4 2
use vars qw($VERSION @@ISA @@EXPORT @@EXPORT_OK %EXPORT_TAGS);
$VERSION = "1.7";
d23 1
a23 1
    $port = getservbyname('smtp', 'tcp');
a47 9
Also, some common socket "newline" constants are provided: the
constants C<CR>, C<LF>, and C<CRLF>, as well as C<$CR>, C<$LF>, and
C<$CRLF>, which map to C<\015>, C<\012>, and C<\015\012>.  If you do
not want to use the literal characters in your programs, then use
the constants provided here.  They are not exported by default, but can
be imported individually, and with the C<:crlf> export tag:

    use Socket qw(:DEFAULT :crlf);

a49 2
=over

d55 1
a55 2
cannot be resolved, returns undef. For multi-homed hosts (hosts
with more than one address), the first address found is returned.
a74 9
=item INADDR_BROADCAST

Note: does not return a number, but a packed string.

Returns the 4-byte 'this-lan' ip broadcast address.
This can be useful for some protocols to solicit information
from all servers on the same LAN cable.
Normally equivalent to inet_aton('255.255.255.255').

d86 1
a86 1
Returns the 4-byte 'invalid' ip address. Normally equivalent
d118 1
a118 1
consisting of (PATHNAME).  In a scalar context, packs its PATHNAME
d121 1
a121 1
These are only supported if your system has E<lt>F<sys/un.h>E<gt>.
a136 2
=back

d142 1
d149 1
a149 1
	INADDR_ANY INADDR_BROADCAST INADDR_LOOPBACK INADDR_NONE
a173 3
	MSG_CTLFLAGS
	MSG_CTLIGNORE
	MSG_CTRUNC
a174 5
	MSG_DONTWAIT
	MSG_EOF
	MSG_EOR
	MSG_ERRQUEUE
	MSG_FIN
a175 1
	MSG_NOSIGNAL
a177 6
	MSG_PROXY
	MSG_RST
	MSG_SYN
	MSG_TRUNC
	MSG_URG
	MSG_WAITALL
a201 5
	SCM_CONNECT
	SCM_CREDENTIALS
	SCM_CREDS
	SCM_RIGHTS
	SCM_TIMESTAMP
a228 17
@@EXPORT_OK = qw(CR LF CRLF $CR $LF $CRLF);

%EXPORT_TAGS = (
    crlf    => [qw(CR LF CRLF $CR $LF $CRLF)],
    all     => [@@EXPORT, @@EXPORT_OK],
);

BEGIN {
    sub CR   () {"\015"}
    sub LF   () {"\012"}
    sub CRLF () {"\015\012"}
}

*CR   = \CR();
*LF   = \LF();
*CRLF = \CRLF();

d259 8
a266 2
	my ($pack,$file,$line) = caller;
	croak "Your vendor has not defined Socket macro $constname, used";
d274 3
d278 1
@


1.1.1.3
log
@virgin perl 5.6.0
@
text
@d3 2
a4 2
our($VERSION, @@ISA, @@EXPORT, @@EXPORT_OK, %EXPORT_TAGS);
$VERSION = "1.72";
a162 1
use warnings::register;
d165 2
a166 2
use XSLoader ();
@@ISA = qw(Exporter);
a195 2
	IOV_MAX
	MSG_BCAST
a205 1
	MSG_MCAST
a243 3
	SHUT_RD
	SHUT_RDWR
	SHUT_WR
a268 1
	UIO_MAXIOV
d271 1
a271 8
@@EXPORT_OK = qw(CR LF CRLF $CR $LF $CRLF

	       IPPROTO_TCP
	       TCP_KEEPALIVE
	       TCP_MAXRT
	       TCP_MAXSEG
	       TCP_NODELAY
	       TCP_STDURG);
d291 1
a291 2
	warnings::warn "6-ARG sockaddr_in call is deprecated" 
	    if warnings::enabled();
a311 109
sub INADDR_ANY 		();
sub INADDR_BROADCAST	();
sub INADDR_LOOPBACK	();
sub INADDR_LOOPBACK	();

sub AF_802		();
sub AF_APPLETALK	();
sub AF_CCITT		();
sub AF_CHAOS		();
sub AF_DATAKIT		();
sub AF_DECnet		();
sub AF_DLI		();
sub AF_ECMA		();
sub AF_GOSIP		();
sub AF_HYLINK		();
sub AF_IMPLINK		();
sub AF_INET		();
sub AF_LAT		();
sub AF_MAX		();
sub AF_NBS		();
sub AF_NIT		();
sub AF_NS		();
sub AF_OSI		();
sub AF_OSINET		();
sub AF_PUP		();
sub AF_SNA		();
sub AF_UNIX		();
sub AF_UNSPEC		();
sub AF_X25		();
sub IOV_MAX		();
sub MSG_BCAST		();
sub MSG_CTLFLAGS	();
sub MSG_CTLIGNORE	();
sub MSG_CTRUNC		();
sub MSG_DONTROUTE	();
sub MSG_DONTWAIT	();
sub MSG_EOF		();
sub MSG_EOR		();
sub MSG_ERRQUEUE	();
sub MSG_FIN		();
sub MSG_MAXIOVLEN	();
sub MSG_MCAST		();
sub MSG_NOSIGNAL	();
sub MSG_OOB		();
sub MSG_PEEK		();
sub MSG_PROXY		();
sub MSG_RST		();
sub MSG_SYN		();
sub MSG_TRUNC		();
sub MSG_URG		();
sub MSG_WAITALL		();
sub PF_802		();
sub PF_APPLETALK	();
sub PF_CCITT		();
sub PF_CHAOS		();
sub PF_DATAKIT		();
sub PF_DECnet		();
sub PF_DLI		();
sub PF_ECMA		();
sub PF_GOSIP		();
sub PF_HYLINK		();
sub PF_IMPLINK		();
sub PF_INET		();
sub PF_LAT		();
sub PF_MAX		();
sub PF_NBS		();
sub PF_NIT		();
sub PF_NS		();
sub PF_OSI		();
sub PF_OSINET		();
sub PF_PUP		();
sub PF_SNA		();
sub PF_UNIX		();
sub PF_UNSPEC		();
sub PF_X25		();
sub SCM_CONNECT		();
sub SCM_CREDENTIALS	();
sub SCM_CREDS		();
sub SCM_RIGHTS		();
sub SCM_TIMESTAMP	();
sub SHUT_RD		();
sub SHUT_RDWR		();
sub SHUT_WR		();
sub SOCK_DGRAM		();
sub SOCK_RAW		();
sub SOCK_RDM		();
sub SOCK_SEQPACKET	();
sub SOCK_STREAM		();
sub SOL_SOCKET		();
sub SOMAXCONN		();
sub SO_ACCEPTCONN	();
sub SO_BROADCAST	();
sub SO_DEBUG		();
sub SO_DONTLINGER	();
sub SO_DONTROUTE	();
sub SO_ERROR		();
sub SO_KEEPALIVE	();
sub SO_LINGER		();
sub SO_OOBINLINE	();
sub SO_RCVBUF		();
sub SO_RCVLOWAT		();
sub SO_RCVTIMEO		();
sub SO_REUSEADDR	();
sub SO_SNDBUF		();
sub SO_SNDLOWAT		();
sub SO_SNDTIMEO		();
sub SO_TYPE		();
sub SO_USELOOPBACK	();
sub UIO_MAXIOV		();
d321 1
a321 1
    eval "sub $AUTOLOAD () { $val }";
d325 1
a325 1
XSLoader::load 'Socket', $VERSION;
@


1.1.1.4
log
@stock perl 5.6.1
@
text
@d114 1
a114 1
In a list context, unpacks its SOCKADDR_IN argument and returns an array
d138 1
a138 1
In a list context, unpacks its SOCKADDR_UN argument and returns an array
a270 1
	SO_REUSEPORT
@


1.1.1.5
log
@stock perl 5.8.0 from CPAN
@
text
@d4 1
a4 1
$VERSION = "1.75";
d59 1
a59 1
=over 4
d63 5
a67 9
Takes a string giving the name of a host, and translates that to an
opaque string (if programming in C, struct in_addr). Takes arguments
of both the 'rtfm.mit.edu' type and '18.181.0.24'. If the host name
cannot be resolved, returns undef.  For multi-homed hosts (hosts with
more than one address), the first address found is returned.

For portability do not assume that the result of inet_aton() is 32
bits wide, in other words, that it would contain only the IPv4 address
in network order.
d71 4
a74 5
Takes a string (an opaque string as returned by inet_aton(),
or a v-string representing the four octets of the IPv4 address in
network order) and translates it into a string of the form 'd.d.d.d'
where the 'd's are numbers less than 256 (the normal human-readable
four dotted number notation for Internet addresses).
d81 1
a81 1
of the hosts ip addresses.  (A particular machine can have
d100 1
a100 1
Returns the 4-byte loopback address.  Normally equivalent
d107 1
a107 1
Returns the 4-byte 'invalid' ip address.  Normally equivalent
a109 9
=item sockaddr_family SOCKADDR

Takes a sockaddr structure (as returned by pack_sockaddr_in(),
pack_sockaddr_un() or the perl builtin functions getsockname() and
getpeername()) and returns the address family tag.  It will match the
constant AF_INET for a sockaddr_in and AF_UNIX for a sockaddr_un.  It
can be used to figure out what unpacker to use for a sockaddr of
unknown type.

d121 6
a126 6
Takes two arguments, a port number and an opaque string, IP_ADDRESS
(as returned by inet_aton(), or a v-string).  Returns the sockaddr_in
structure with those arguments packed in with AF_INET filled in.  For
Internet domain sockets, this structure is normally what you need for
the arguments in bind(), connect(), and send(), and is also returned
by getpeername(), getsockname() and recv().
d131 2
a132 4
returns an array of two elements: the port and an opaque string
representing the IP address (you can use inet_ntoa() to convert the
address to the four-dotted numeric format).  Will croak if the
structure does not have AF_INET in the right place.
d169 1
a169 3
	inet_aton inet_ntoa
	sockaddr_family
	pack_sockaddr_in unpack_sockaddr_in
a173 1
	AF_AAL
a176 1
	AF_CTF
a184 4
	AF_INET6
	AF_ISO
	AF_KEY
	AF_LAST
a185 1
	AF_LINK
a192 1
	AF_ROUTE
a195 2
	AF_USER
	AF_WAN
a198 1
	MSG_BTAG
a206 1
	MSG_ETAG
a218 1
	MSG_WIRE
a219 1
	PF_AAL
a222 1
	PF_CTF
a230 4
	PF_INET6
	PF_ISO
	PF_KEY
	PF_LAST
a231 1
	PF_LINK
a238 1
	PF_ROUTE
a241 2
	PF_USER
	PF_WAN
a258 2
	SO_ATTACH_FILTER
	SO_BACKLOG
a259 1
	SO_CHAMELEON
a260 2
	SO_DETACH_FILTER
	SO_DGRAM_ERRIND
a263 1
	SO_FAMILY
a266 5
	SO_PASSCRED
	SO_PASSIFNAME
	SO_PEERCRED
	SO_PROTOCOL
	SO_PROTOTYPE
a271 3
	SO_SECURITY_AUTHENTICATION
	SO_SECURITY_ENCRYPTION_NETWORK
	SO_SECURITY_ENCRYPTION_TRANSPORT
a274 1
	SO_STATE
a276 2
	SO_XOPEN
	SO_XSE
d329 110
d442 4
a445 4
    croak "&Socket::constant not defined" if $constname eq 'constant';
    my ($error, $val) = constant($constname);
    if ($error) {
	croak $error;
d447 1
a447 1
    *$AUTOLOAD = sub { $val };
@


1.1.1.6
log
@perl 5.8.2 from CPAN
@
text
@d4 1
a4 1
$VERSION = "1.76";
@


1.1.1.7
log
@Import of stock perl 5.8.5
@
text
@d4 1
a4 1
$VERSION = "1.77";
d35 2
a36 2
    unlink('/var/run/usock');
    $sun = sockaddr_un('/var/run/usock');
@


1.1.1.8
log
@perl 5.8.8 import
@
text
@d4 1
a4 1
$VERSION = "1.78";
@


1.1.1.9
log
@import perl 5.10.0 from CPAN
@
text
@d4 1
a4 1
$VERSION = "1.80";
a225 7
	IP_OPTIONS
	IP_HDRINCL
	IP_TOS
	IP_TTL
	IP_RECVOPTS
	IP_RECVRETOPTS
	IP_RETOPTS
a339 4
	       IPPROTO_IP
	       IPPROTO_IPV6
	       IPPROTO_RAW
	       IPPROTO_ICMP
a340 2
	       IPPROTO_UDP

@


1.1.1.10
log
@import perl 5.10.1
@
text
@d4 1
a4 1
$VERSION = "1.82";
@


1.1.1.11
log
@Perl 5.12.2 from CPAN
@
text
@d4 1
a4 1
$VERSION = "1.87";
d8 1
a8 1
Socket, sockaddr_in, sockaddr_un, inet_aton, inet_ntoa, inet_pton, inet_ntop - load the C socket.h defines and structure manipulators 
a173 19
=item inet_pton ADDRESS_FAMILY, HOSTNAME

Takes an address family, either AF_INET or AF_INET6, and a string giving
the name of a host, and translates that to an opaque string
(if programming in C, struct in_addr or struct in6_addr depending on the 
address family passed in).  The host string may be a string hostname, such
as 'www.perl.org', or an IP address.  If using an IP address, the type of
IP address must be consistant with the address family passed into the function.

This function is not exported by default.

=item inet_ntop ADDRESS_FAMILY, IP_ADDRESS

Takes an address family, either AF_INET or AF_INET6, and a string 
(an opaque string as returned by inet_aton() or inet_pton()) and
translates it to an IPv4 or IPv6 address string.

This function is not exported by default.

a345 3

	       inet_pton
	       inet_ntop
@


