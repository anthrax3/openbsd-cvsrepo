head	1.2;
access;
symbols
	OPENBSD_4_8:1.1.1.4.0.4
	OPENBSD_4_8_BASE:1.1.1.4
	OPENBSD_4_7:1.1.1.4.0.2
	OPENBSD_4_7_BASE:1.1.1.4
	PERL_5_10_1:1.1.1.4
	OPENBSD_4_6:1.1.1.3.0.6
	OPENBSD_4_6_BASE:1.1.1.3
	OPENBSD_4_5:1.1.1.3.0.2
	OPENBSD_4_5_BASE:1.1.1.3
	PERL_5_10_0:1.1.1.3
	OPENBSD_4_4:1.1.1.2.0.20
	OPENBSD_4_4_BASE:1.1.1.2
	OPENBSD_4_3:1.1.1.2.0.18
	OPENBSD_4_3_BASE:1.1.1.2
	OPENBSD_4_2:1.1.1.2.0.16
	OPENBSD_4_2_BASE:1.1.1.2
	OPENBSD_4_1:1.1.1.2.0.14
	OPENBSD_4_1_BASE:1.1.1.2
	OPENBSD_4_0:1.1.1.2.0.12
	OPENBSD_4_0_BASE:1.1.1.2
	PERL_5_8_8:1.1.1.2
	OPENBSD_3_9:1.1.1.2.0.10
	OPENBSD_3_9_BASE:1.1.1.2
	OPENBSD_3_8:1.1.1.2.0.8
	OPENBSD_3_8_BASE:1.1.1.2
	OPENBSD_3_7:1.1.1.2.0.6
	OPENBSD_3_7_BASE:1.1.1.2
	PERL_5_8_6:1.1.1.2
	OPENBSD_3_6:1.1.1.2.0.4
	OPENBSD_3_6_BASE:1.1.1.2
	PERL_5_8_5:1.1.1.2
	PERL_5_8_3:1.1.1.2
	OPENBSD_3_5:1.1.1.2.0.2
	OPENBSD_3_5_BASE:1.1.1.2
	PERL_5_8_2:1.1.1.2
	OPENBSD_3_4:1.1.1.1.0.4
	OPENBSD_3_4_BASE:1.1.1.1
	OPENBSD_3_3:1.1.1.1.0.2
	OPENBSD_3_3_BASE:1.1.1.1
	PERL_5_8_0:1.1.1.1
	CPAN:1.1.1;
locks; strict;
comment	@# @;
expand	@o@;


1.2
date	2010.09.24.14.59.31;	author millert;	state dead;
branches;
next	1.1;

1.1
date	2002.10.27.22.14.56;	author millert;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	2002.10.27.22.14.56;	author millert;	state Exp;
branches;
next	1.1.1.2;

1.1.1.2
date	2003.12.03.02.43.54;	author millert;	state Exp;
branches;
next	1.1.1.3;

1.1.1.3
date	2008.09.29.17.18.26;	author millert;	state Exp;
branches;
next	1.1.1.4;

1.1.1.4
date	2009.10.12.18.11.18;	author millert;	state Exp;
branches;
next	;


desc
@@


1.2
log
@remove files no longer in perl 5.12.2 (or that have moved)
@
text
@

#
# The reason this does not use a Test module is that
# they mess up test numbers between threads
#
# And even when that will be fixed, this is a basic
# test and should not rely on shared variables
#
# This will test the basic API, it will not use any coderefs
# as they are more advanced
#
#########################


BEGIN {
    chdir 't' if -d 't';
    @@INC = '../lib';
    require Config; import Config;
    unless ($Config{'useithreads'}) {
	print "1..0 # Skip: no useithreads\n";
 	exit 0;	
    }
}

use ExtUtils::testlib;
use strict;
BEGIN { $| = 1; print "1..15\n" };
use threads;



print "ok 1\n";


#########################




sub ok {	
    my ($id, $ok, $name) = @@_;

    # You have to do it this way or VMS will get confused.
    print $ok ? "ok $id - $name\n" : "not ok $id - $name\n";

    printf "# Failed test at line %d\n", (caller)[2] unless $ok;

    return $ok;
}



sub test1 {
	ok(2,'bar' eq $_[0],"Test that argument passing works");
}
threads->create('test1','bar')->join();

sub test2 {
	ok(3,'bar' eq $_[0]->[0]->{foo},"Test that passing arguments as references work");
}

threads->create('test2',[{foo => 'bar'}])->join();


#test execuion of normal sub
sub test3 { ok(4,shift() == 1,"Test a normal sub") }
threads->create('test3',1)->join();


#check Config
ok(5, 1 == $threads::threads,"Check that threads::threads is true");

#test trying to detach thread

sub test4 { ok(6,1,"Detach test") }

my $thread1 = threads->create('test4');

$thread1->detach();
threads->yield; # help out non-preemptive thread implementations
sleep 2;
ok(7,1,"Detach test");



sub test5 {
	threads->create('test6')->join();
	ok(9,1,"Nested thread test");
}

sub test6 {
	ok(8,1,"Nested thread test");
}

threads->create('test5')->join();

sub test7 {
	my $self = threads->self();
	ok(10, $self->tid == 7, "Wanted 7, got ".$self->tid);
	ok(11, threads->tid() == 7, "Wanted 7, got ".threads->tid());
}

threads->create('test7')->join;

sub test8 {
	my $self = threads->self();
	ok(12, $self->tid == 8, "Wanted 8, got ".$self->tid);
	ok(13, threads->tid() == 8, "Wanted 8, got ".threads->tid());
}

threads->create('test8')->join;


#check support for threads->self() in main thread
ok(14, 0 == threads->self->tid(),"Check so that tid for threads work for main thread");
ok(15, 0 == threads->tid(),"Check so that tid for threads work for main thread");

1;







@


1.1
log
@Initial revision
@
text
@@


1.1.1.1
log
@stock perl 5.8.0 from CPAN
@
text
@@


1.1.1.2
log
@perl 5.8.2 from CPAN
@
text
@d18 1
a18 1
    push @@INC, '../lib';
d28 1
a28 1
BEGIN { $| = 1; print "1..19\n" };
a118 18
{
	no warnings;
    local *CLONE = sub { ok(16, threads->tid() == 9, "Tid should be correct in the clone")};
    threads->create(sub { ok(17, threads->tid() == 9, "And tid be 9 here too") })->join();
}

{ 

    sub Foo::DESTROY { 
	ok(19, threads->tid() == 10, "In destroy it should be correct too" )
	}
    my $foo;
    threads->create(sub { ok(18, threads->tid() == 10, "And tid be 10 here");
			  $foo = bless {}, 'Foo';			  
			  return undef;
		      })->join();

}
@


1.1.1.3
log
@import perl 5.10.0 from CPAN
@
text
@d1 14
a14 2
use strict;
use warnings;
d17 6
a22 8
    if ($ENV{'PERL_CORE'}){
        chdir 't';
        unshift @@INC, '../lib';
    }
    use Config;
    if (! $Config{'useithreads'}) {
        print("1..0 # Skip: Perl not compiled with 'useithreads'\n");
        exit(0);
d27 10
d38 4
a41 1
sub ok {
d45 3
a47 6
    if ($ok) {
        print("ok $id - $name\n");
    } else {
        print("not ok $id - $name\n");
        printf("# Failed test at line %d\n", (caller)[2]);
    }
d49 1
a49 1
    return ($ok);
a51 4
BEGIN {
    $| = 1;
    print("1..33\n");   ### Number of tests that will be run ###
};
a52 1
use threads;
d54 7
a60 2
if ($threads::VERSION && ! exists($ENV{'PERL_CORE'})) {
    print(STDERR "# Testing threads $threads::VERSION\n");
d63 1
a63 1
ok(1, 1, 'Loaded');
a64 1
### Start of Testing ###
d66 3
a68 1
ok(2, 1 == $threads::threads, "Check that threads::threads is true");
a69 4
sub test1 {
    ok(3,'bar' eq $_[0], "Test that argument passing works");
}
threads->create('test1', 'bar')->join();
d71 6
a76 4
sub test2 {
    ok(4,'bar' eq $_[0]->[0]->{'foo'}, "Test that passing arguments as references work");
}
threads->create(\&test2, [{'foo' => 'bar'}])->join();
d78 1
a78 4
sub test3 {
    ok(5, shift() == 1, "Test a normal sub");
}
threads->create(\&test3, 1)->join();
d80 4
a84 12
sub test4 {
    ok(6, 1, "Detach test");
}
{
    my $thread1 = threads->create('test4');
    $thread1->detach();
    while ($thread1->is_running()) {
        threads->yield();
        sleep 1;
    }
}
ok(7, 1, "Detach test");
d88 2
a89 2
    threads->create('test6')->join();
    ok(9, 1, "Nested thread test");
d93 1
a93 1
    ok(8, 1, "Nested thread test");
a97 1

d99 3
a101 3
    my $self = threads->self();
    ok(10, $self->tid == 7, "Wanted 7, got ".$self->tid);
    ok(11, threads->tid() == 7, "Wanted 7, got ".threads->tid());
d103 1
d107 3
a109 3
    my $self = threads->self();
    ok(12, $self->tid == 8, "Wanted 8, got ".$self->tid);
    ok(13, threads->tid() == 8, "Wanted 8, got ".threads->tid());
d111 1
d115 3
a117 2
ok(14, 0 == threads->self->tid(), "Check so that tid for threads work for main thread");
ok(15, 0 == threads->tid(), "Check so that tid for threads work for main thread");
d120 3
a122 7
    no warnings;
    local *CLONE = sub {
        ok(16, threads->tid() == 9, "Tid should be correct in the clone");
    };
    threads->create(sub {
        ok(17, threads->tid() == 9, "And tid be 9 here too");
    })->join();
d125 5
a129 4
{
    sub Foo::DESTROY {
        ok(19, threads->tid() == 10, "In destroy it should be correct too" )
    }
d131 5
a135 5
    threads->create(sub {
        ok(18, threads->tid() == 10, "And tid be 10 here");
        $foo = bless {}, 'Foo';
        return undef;
    })->join();
d137 5
a143 35
my $thr1 = threads->create(sub {});
my $thr2 = threads->create(sub {});
my $thr3 = threads->object($thr1->tid());

# Make sure both overloaded '==' and '!=' are working correctly
ok(20,   $thr1 != $thr2,  'Treads not equal');
ok(21, !($thr1 == $thr2), 'Treads not equal');
ok(22,   $thr1 == $thr3,  'Threads equal');
ok(23, !($thr1 != $thr3), 'Threads equal');

ok(24, $thr1->_handle(), 'Handle method');
ok(25, $thr2->_handle(), 'Handle method');

ok(26, threads->object($thr1->tid())->tid() == 11, 'Object method');
ok(27, threads->object($thr2->tid())->tid() == 12, 'Object method');

$thr1->join();
$thr2->join();

my $sub = sub { ok(28, shift() == 1, "Test code ref"); };
threads->create($sub, 1)->join();

my $thrx = threads->object(99);
ok(29, ! defined($thrx), 'No object');
$thrx = threads->object();
ok(30, ! defined($thrx), 'No object');
$thrx = threads->object(undef);
ok(31, ! defined($thrx), 'No object');
$thrx = threads->object(0);
ok(32, ! defined($thrx), 'No object');

threads->import('stringify');
$thr1 = threads->create(sub {});
ok(33, "$thr1" eq $thr1->tid(), 'Stringify');
$thr1->join();
a144 1
# EOF
@


1.1.1.4
log
@import perl 5.10.1
@
text
@d11 1
a11 1
        print("1..0 # SKIP Perl not compiled with 'useithreads'\n");
a166 2

exit(0);
@


