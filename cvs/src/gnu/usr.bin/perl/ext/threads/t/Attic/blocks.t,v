head	1.2;
access;
symbols
	OPENBSD_4_8:1.1.1.2.0.4
	OPENBSD_4_8_BASE:1.1.1.2
	OPENBSD_4_7:1.1.1.2.0.2
	OPENBSD_4_7_BASE:1.1.1.2
	PERL_5_10_1:1.1.1.2
	OPENBSD_4_6:1.1.1.1.0.6
	OPENBSD_4_6_BASE:1.1.1.1
	OPENBSD_4_5:1.1.1.1.0.2
	OPENBSD_4_5_BASE:1.1.1.1
	PERL_5_10_0:1.1.1.1
	CPAN:1.1.1;
locks; strict;
comment	@# @;
expand	@o@;


1.2
date	2010.09.24.14.59.31;	author millert;	state dead;
branches;
next	1.1;

1.1
date	2008.09.29.17.18.26;	author millert;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	2008.09.29.17.18.26;	author millert;	state Exp;
branches;
next	1.1.1.2;

1.1.1.2
date	2009.10.12.18.11.18;	author millert;	state Exp;
branches;
next	;


desc
@@


1.2
log
@remove files no longer in perl 5.12.2 (or that have moved)
@
text
@use strict;
use warnings;

BEGIN {
    if ($ENV{'PERL_CORE'}){
        chdir 't';
        unshift @@INC, '../lib';
    }
    use Config;
    if (! $Config{'useithreads'}) {
        print("1..0 # Skip: Perl not compiled with 'useithreads'\n");
        exit(0);
    }
}

use ExtUtils::testlib;

use threads;

BEGIN {
    eval {
        require threads::shared;
        threads::shared->import();
    };
    if ($@@ || ! $threads::shared::threads_shared) {
        print("1..0 # Skip: threads::shared not available\n");
        exit(0);
    }

    $| = 1;
    print("1..5\n");   ### Number of tests that will be run ###
};

my ($TEST, $COUNT, $TOTAL);

BEGIN {
    share($TEST);
    $TEST = 1;
    share($COUNT);
    $COUNT = 0;
    $TOTAL = 0;
}

ok(1, 'Loaded');

sub ok {
    my ($ok, $name) = @@_;

    lock($TEST);
    my $id = $TEST++;

    # You have to do it this way or VMS will get confused.
    if ($ok) {
        print("ok $id - $name\n");
    } else {
        print("not ok $id - $name\n");
        printf("# Failed test at line %d\n", (caller)[2]);
        print(STDERR "# FAIL: $name\n") if (! exists($ENV{'PERL_CORE'}));
    }

    return ($ok);
}


### Start of Testing ###

$SIG{'__WARN__'} = sub { ok(0, "Warning: $_[0]"); };

sub foo { lock($COUNT); $COUNT++; }
sub baz { 42 }

my $bthr;
BEGIN {
    $SIG{'__WARN__'} = sub { ok(0, "BEGIN: $_[0]"); };

    $TOTAL++;
    threads->create('foo')->join();
    $TOTAL++;
    threads->create(\&foo)->join();
    $TOTAL++;
    threads->create(sub { lock($COUNT); $COUNT++; })->join();

    $TOTAL++;
    threads->create('foo')->detach();
    $TOTAL++;
    threads->create(\&foo)->detach();
    $TOTAL++;
    threads->create(sub { lock($COUNT); $COUNT++; })->detach();

    $bthr = threads->create('baz');
}

my $mthr;
MAIN: {
    $TOTAL++;
    threads->create('foo')->join();
    $TOTAL++;
    threads->create(\&foo)->join();
    $TOTAL++;
    threads->create(sub { lock($COUNT); $COUNT++; })->join();

    $TOTAL++;
    threads->create('foo')->detach();
    $TOTAL++;
    threads->create(\&foo)->detach();
    $TOTAL++;
    threads->create(sub { lock($COUNT); $COUNT++; })->detach();

    $mthr = threads->create('baz');
}

ok($mthr, 'Main thread');
ok($bthr, 'BEGIN thread');

ok($mthr->join() == 42, 'Main join');
ok($bthr->join() == 42, 'BEGIN join');

# Wait for detached threads to finish
{
    threads->yield();
    sleep(1);
    lock($COUNT);
    redo if ($COUNT < $TOTAL);
}

# EOF
@


1.1
log
@Initial revision
@
text
@@


1.1.1.1
log
@import perl 5.10.0 from CPAN
@
text
@@


1.1.1.2
log
@import perl 5.10.1
@
text
@d11 1
a11 1
        print("1..0 # SKIP Perl not compiled with 'useithreads'\n");
d21 6
a26 2
    if (! eval 'use threads::shared; 1') {
        print("1..0 # SKIP threads::shared not available\n");
a124 2

exit(0);
@

