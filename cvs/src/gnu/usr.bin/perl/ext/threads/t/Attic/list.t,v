head	1.2;
access;
symbols
	OPENBSD_4_8:1.1.1.4.0.4
	OPENBSD_4_8_BASE:1.1.1.4
	OPENBSD_4_7:1.1.1.4.0.2
	OPENBSD_4_7_BASE:1.1.1.4
	PERL_5_10_1:1.1.1.4
	OPENBSD_4_6:1.1.1.3.0.6
	OPENBSD_4_6_BASE:1.1.1.3
	OPENBSD_4_5:1.1.1.3.0.2
	OPENBSD_4_5_BASE:1.1.1.3
	PERL_5_10_0:1.1.1.3
	OPENBSD_4_4:1.1.1.2.0.20
	OPENBSD_4_4_BASE:1.1.1.2
	OPENBSD_4_3:1.1.1.2.0.18
	OPENBSD_4_3_BASE:1.1.1.2
	OPENBSD_4_2:1.1.1.2.0.16
	OPENBSD_4_2_BASE:1.1.1.2
	OPENBSD_4_1:1.1.1.2.0.14
	OPENBSD_4_1_BASE:1.1.1.2
	OPENBSD_4_0:1.1.1.2.0.12
	OPENBSD_4_0_BASE:1.1.1.2
	PERL_5_8_8:1.1.1.2
	OPENBSD_3_9:1.1.1.2.0.10
	OPENBSD_3_9_BASE:1.1.1.2
	OPENBSD_3_8:1.1.1.2.0.8
	OPENBSD_3_8_BASE:1.1.1.2
	OPENBSD_3_7:1.1.1.2.0.6
	OPENBSD_3_7_BASE:1.1.1.2
	PERL_5_8_6:1.1.1.2
	OPENBSD_3_6:1.1.1.2.0.4
	OPENBSD_3_6_BASE:1.1.1.2
	PERL_5_8_5:1.1.1.2
	PERL_5_8_3:1.1.1.2
	OPENBSD_3_5:1.1.1.2.0.2
	OPENBSD_3_5_BASE:1.1.1.2
	PERL_5_8_2:1.1.1.2
	OPENBSD_3_4:1.1.1.1.0.4
	OPENBSD_3_4_BASE:1.1.1.1
	OPENBSD_3_3:1.1.1.1.0.2
	OPENBSD_3_3_BASE:1.1.1.1
	PERL_5_8_0:1.1.1.1
	CPAN:1.1.1;
locks; strict;
comment	@# @;
expand	@o@;


1.2
date	2010.09.24.14.59.32;	author millert;	state dead;
branches;
next	1.1;

1.1
date	2002.10.27.22.14.56;	author millert;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	2002.10.27.22.14.56;	author millert;	state Exp;
branches;
next	1.1.1.2;

1.1.1.2
date	2003.12.03.02.43.54;	author millert;	state Exp;
branches;
next	1.1.1.3;

1.1.1.3
date	2008.09.29.17.18.26;	author millert;	state Exp;
branches;
next	1.1.1.4;

1.1.1.4
date	2009.10.12.18.11.18;	author millert;	state Exp;
branches;
next	;


desc
@@


1.2
log
@remove files no longer in perl 5.12.2 (or that have moved)
@
text
@
BEGIN {
    chdir 't' if -d 't';
    @@INC = '../lib';
    require Config; import Config;
    unless ($Config{'useithreads'}) {
        print "1..0 # Skip: no useithreads\n";
        exit 0;
    }
}

use ExtUtils::testlib;

use strict;


BEGIN { $| = 1; print "1..8\n" };
use threads;



print "ok 1\n";


#########################
sub ok {	
    my ($id, $ok, $name) = @@_;

    # You have to do it this way or VMS will get confused.
    print $ok ? "ok $id - $name\n" : "not ok $id - $name\n";

    printf "# Failed test at line %d\n", (caller)[2] unless $ok;

    return $ok;
}

ok(2, scalar @@{[threads->list]} == 0);



threads->create(sub {})->join();
ok(3, scalar @@{[threads->list]} == 0);

my $thread = threads->create(sub {});
ok(4, scalar @@{[threads->list]} == 1);
$thread->join();
ok(5, scalar @@{[threads->list]} == 0);

$thread = threads->create(sub { ok(6, threads->self == (threads->list)[0])});
threads->yield; # help out non-preemptive thread implementations
sleep 1;
ok(7, $thread == (threads->list)[0]);
$thread->join();
ok(8, scalar @@{[threads->list]} == 0);
@


1.1
log
@Initial revision
@
text
@@


1.1.1.1
log
@stock perl 5.8.0 from CPAN
@
text
@@


1.1.1.2
log
@perl 5.8.2 from CPAN
@
text
@d4 1
a4 1
    push @@INC, '../lib';
d37 1
a37 1
ok(2, scalar @@{[threads->list]} == 0,'');
d42 1
a42 1
ok(3, scalar @@{[threads->list]} == 0,'');
d45 1
a45 1
ok(4, scalar @@{[threads->list]} == 1,'');
d47 1
a47 1
ok(5, scalar @@{[threads->list]} == 0,'');
d49 1
a49 1
$thread = threads->create(sub { ok(6, threads->self == (threads->list)[0],'')});
d52 1
a52 1
ok(7, $thread == (threads->list)[0],'');
d54 1
a54 1
ok(8, scalar @@{[threads->list]} == 0,'');
@


1.1.1.3
log
@import perl 5.10.0 from CPAN
@
text
@a0 2
use strict;
use warnings;
d3 6
a8 8
    if ($ENV{'PERL_CORE'}){
        chdir 't';
        unshift @@INC, '../lib';
    }
    use Config;
    if (! $Config{'useithreads'}) {
        print("1..0 # Skip: Perl not compiled with 'useithreads'\n");
        exit(0);
d14 13
a26 1
sub ok {
d30 3
a32 6
    if ($ok) {
        print("ok $id - $name\n");
    } else {
        print("not ok $id - $name\n");
        printf("# Failed test at line %d\n", (caller)[2]);
    }
d34 1
a34 1
    return ($ok);
d37 1
a37 4
BEGIN {
    $| = 1;
    print("1..15\n");   ### Number of tests that will be run ###
};
a38 2
use threads;
ok(1, 1, 'Loaded');
a39 3
### Start of Testing ###

ok(2, scalar @@{[threads->list()]} == 0, 'No threads yet');
d42 1
a42 1
ok(3, scalar @@{[threads->list()]} == 0, 'Empty thread list after join');
d45 1
a45 2
ok(4, scalar(threads->list()) == 1, 'Non-empty thread list');
ok(5, threads->list() == 1,             'Non-empty thread list');
d47 1
a47 7
ok(6, scalar @@{[threads->list()]} == 0, 'Thread list empty again');
ok(7, threads->list() == 0,             'Thread list empty again');

$thread = threads->create(sub {
    ok(8, threads->list() == 1, 'Non-empty thread list in thread');
    ok(9, threads->self == (threads->list())[0], 'Self in thread list')
});
d49 1
d52 1
a52 7

ok(10, scalar(threads->list()) == 1, 'Thread count 1');
ok(11, threads->list() == 1,             'Thread count 1');
my $cnt = threads->list();
ok(12, $cnt == 1,                        'Thread count 1');
my ($thr_x) = threads->list();
ok(13, $thread == $thr_x,                'Thread in list');
d54 1
a54 4
ok(14, scalar @@{[threads->list()]} == 0, 'Thread list empty');
ok(15, threads->list() == 0,             'Thread list empty');

# EOF
@


1.1.1.4
log
@import perl 5.10.1
@
text
@d11 1
a11 1
        print("1..0 # SKIP Perl not compiled with 'useithreads'\n");
a70 2

exit(0);
@


