head	1.2;
access;
symbols
	OPENBSD_4_6:1.1.1.3.0.6
	OPENBSD_4_6_BASE:1.1.1.3
	OPENBSD_4_5:1.1.1.3.0.2
	OPENBSD_4_5_BASE:1.1.1.3
	PERL_5_10_0:1.1.1.3
	OPENBSD_4_4:1.1.1.2.0.20
	OPENBSD_4_4_BASE:1.1.1.2
	OPENBSD_4_3:1.1.1.2.0.18
	OPENBSD_4_3_BASE:1.1.1.2
	OPENBSD_4_2:1.1.1.2.0.16
	OPENBSD_4_2_BASE:1.1.1.2
	OPENBSD_4_1:1.1.1.2.0.14
	OPENBSD_4_1_BASE:1.1.1.2
	OPENBSD_4_0:1.1.1.2.0.12
	OPENBSD_4_0_BASE:1.1.1.2
	PERL_5_8_8:1.1.1.2
	OPENBSD_3_9:1.1.1.2.0.10
	OPENBSD_3_9_BASE:1.1.1.2
	OPENBSD_3_8:1.1.1.2.0.8
	OPENBSD_3_8_BASE:1.1.1.2
	OPENBSD_3_7:1.1.1.2.0.6
	OPENBSD_3_7_BASE:1.1.1.2
	PERL_5_8_6:1.1.1.2
	OPENBSD_3_6:1.1.1.2.0.4
	OPENBSD_3_6_BASE:1.1.1.2
	PERL_5_8_5:1.1.1.2
	PERL_5_8_3:1.1.1.2
	OPENBSD_3_5:1.1.1.2.0.2
	OPENBSD_3_5_BASE:1.1.1.2
	PERL_5_8_2:1.1.1.2
	OPENBSD_3_4:1.1.1.1.0.4
	OPENBSD_3_4_BASE:1.1.1.1
	OPENBSD_3_3:1.1.1.1.0.2
	OPENBSD_3_3_BASE:1.1.1.1
	PERL_5_8_0:1.1.1.1
	CPAN:1.1.1;
locks; strict;
comment	@# @;
expand	@o@;


1.2
date	2009.10.12.18.24.37;	author millert;	state dead;
branches;
next	1.1;

1.1
date	2002.10.27.22.14.56;	author millert;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	2002.10.27.22.14.56;	author millert;	state Exp;
branches;
next	1.1.1.2;

1.1.1.2
date	2003.12.03.02.43.54;	author millert;	state Exp;
branches;
next	1.1.1.3;

1.1.1.3
date	2008.09.29.17.18.26;	author millert;	state Exp;
branches;
next	;


desc
@@


1.2
log
@Merge in perl 5.10.1
@
text
@use warnings;

BEGIN {
#    chdir 't' if -d 't';
#    push @@INC ,'../lib';
    require Config; import Config;
    unless ($Config{'useithreads'}) {
        print "1..0 # Skip: no useithreads\n";
        exit 0;
    }
}


sub ok {
    my ($id, $ok, $name) = @@_;

    $name = '' unless defined $name;
    # You have to do it this way or VMS will get confused.
    print $ok ? "ok $id - $name\n" : "not ok $id - $name\n";

    printf "# Failed test at line %d\n", (caller)[2] unless $ok;

    return $ok;
}

sub skip {
    my ($id, $ok, $name) = @@_;
    print "ok $id # skip _thrcnt - $name \n";
}

use ExtUtils::testlib;
use strict;
BEGIN { print "1..13\n" };
use threads;
use threads::shared qw(:DEFAULT _refcnt _id);
ok(1,1,"loaded");
my $foo;
share($foo);
my %foo;
share(%foo);
$foo{"foo"} = \$foo;
ok(2, !defined ${$foo{foo}}, "Check deref");
$foo = "test";
ok(3, ${$foo{foo}} eq "test", "Check deref after assign");
threads->create(sub{${$foo{foo}} = "test2";})->join();
ok(4, $foo eq "test2", "Check after assign in another thread");
my $bar = delete($foo{foo});
ok(5, $$bar eq "test2", "check delete");
threads->create( sub {
   my $test;
   share($test);
   $test = "thread3";
   $foo{test} = \$test;
   })->join();
ok(6, ${$foo{test}} eq "thread3", "Check reference created in another thread");
my $gg = $foo{test};
$$gg = "test";
ok(7, ${$foo{test}} eq "test", "Check reference");
my $gg2 = delete($foo{test});
ok(8, _id($$gg) == _id($$gg2),
       sprintf("Check we get the same thing (%x vs %x)",
       _id($$gg),_id($$gg2)));
ok(9, $$gg eq $$gg2, "And check the values are the same");
ok(10, keys %foo == 0, "And make sure we realy have deleted the values");
{
    my (%hash1, %hash2);
    share(%hash1);
    share(%hash2);
    $hash1{hash} = \%hash2;
    $hash2{"bar"} = "foo";
    ok(11, $hash1{hash}->{bar} eq "foo", "Check hash references work");
    threads->create(sub { $hash2{"bar2"} = "foo2"})->join();
    ok(12, $hash1{hash}->{bar2} eq "foo2", "Check hash references work");
    threads->create(sub { my (%hash3); share(%hash3); $hash2{hash} = \%hash3; $hash3{"thread"} = "yes"})->join();
    ok(13, $hash1{hash}->{hash}->{thread} eq "yes", "Check hash created in another thread");
}

@


1.1
log
@Initial revision
@
text
@@


1.1.1.1
log
@stock perl 5.8.0 from CPAN
@
text
@@


1.1.1.2
log
@perl 5.8.2 from CPAN
@
text
@d33 1
a33 1
BEGIN { print "1..17\n" };
d35 1
a35 1
use threads::shared;
d60 1
a60 1
ok(8, threads::shared::_id($$gg) == threads::shared::_id($$gg2),
d62 1
a62 1
       threads::shared::_id($$gg),threads::shared::_id($$gg2)));
a75 21
}

{
  my $h = {a=>14};
  my $r = \$h->{a};
  share($r);
  lock($r);
  lock($h->{a});
  ok(14, 1, "lock on helems now work, this was bug 10045");

}
{
    my $object : shared = &share({});
    threads->new(sub {
		     bless $object, 'test1';
		 })->join;
    ok(15, ref($object) eq 'test1', "blessing does work");
    my %test = (object => $object);
    ok(16, ref($test{object}) eq 'test1', "and some more work");
    bless $object, 'test2';
    ok(17, ref($test{object}) eq 'test2', "reblessing works!");
@


1.1.1.3
log
@import perl 5.10.0 from CPAN
@
text
@a0 1
use strict;
d4 6
a9 8
    if ($ENV{'PERL_CORE'}){
        chdir 't';
        unshift @@INC, '../lib';
    }
    use Config;
    if (! $Config{'useithreads'}) {
        print("1..0 # Skip: Perl not compiled with 'useithreads'\n");
        exit(0);
a12 1
use ExtUtils::testlib;
d17 1
d19 3
a21 6
    if ($ok) {
        print("ok $id - $name\n");
    } else {
        print("not ok $id - $name\n");
        printf("# Failed test at line %d\n", (caller)[2]);
    }
d23 1
a23 1
    return ($ok);
d26 4
a29 4
BEGIN {
    $| = 1;
    print("1..20\n");   ### Number of tests that will be run ###
};
d31 3
d36 1
a36 4
ok(1, 1, 'Loaded');

### Start of Testing ###

d79 7
a85 12
    my $h = {a=>14};
    my $r = \$h->{a};
    share($r);
    if ($] > 5.008) {
        eval { lock($r); };
        ok(14, !$@@, "lock on helems ref: $@@");
        eval { lock($h->{a}); };
        ok(15, !$@@, "lock on helems: $@@");
    } else {
        ok(14, 1, "skipped.  < 5.8");
        ok(15, 1, "skipped.  < 5.8");
    }
d89 4
a92 4
    threads->create(sub {
                     bless $object, 'test1';
                 })->join;
    ok(16, ref($object) eq 'test1', "blessing does work");
d94 1
a94 1
    ok(17, ref($test{object}) eq 'test1', "and some more work");
d96 1
a96 1
    ok(18, ref($test{object}) eq 'test2', "reblessing works!");
a98 4
ok(19, is_shared($foo), "Check for sharing");
ok(20, is_shared(%foo), "Check for sharing");

# EOF
@


