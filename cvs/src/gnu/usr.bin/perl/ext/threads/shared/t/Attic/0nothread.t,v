head	1.2;
access;
symbols
	OPENBSD_4_6:1.1.1.2.0.6
	OPENBSD_4_6_BASE:1.1.1.2
	OPENBSD_4_5:1.1.1.2.0.2
	OPENBSD_4_5_BASE:1.1.1.2
	PERL_5_10_0:1.1.1.2
	OPENBSD_4_4:1.1.1.1.0.24
	OPENBSD_4_4_BASE:1.1.1.1
	OPENBSD_4_3:1.1.1.1.0.22
	OPENBSD_4_3_BASE:1.1.1.1
	OPENBSD_4_2:1.1.1.1.0.20
	OPENBSD_4_2_BASE:1.1.1.1
	OPENBSD_4_1:1.1.1.1.0.18
	OPENBSD_4_1_BASE:1.1.1.1
	OPENBSD_4_0:1.1.1.1.0.16
	OPENBSD_4_0_BASE:1.1.1.1
	PERL_5_8_8:1.1.1.1
	OPENBSD_3_9:1.1.1.1.0.14
	OPENBSD_3_9_BASE:1.1.1.1
	OPENBSD_3_8:1.1.1.1.0.12
	OPENBSD_3_8_BASE:1.1.1.1
	OPENBSD_3_7:1.1.1.1.0.10
	OPENBSD_3_7_BASE:1.1.1.1
	PERL_5_8_6:1.1.1.1
	OPENBSD_3_6:1.1.1.1.0.8
	OPENBSD_3_6_BASE:1.1.1.1
	PERL_5_8_5:1.1.1.1
	PERL_5_8_3:1.1.1.1
	OPENBSD_3_5:1.1.1.1.0.6
	OPENBSD_3_5_BASE:1.1.1.1
	PERL_5_8_2:1.1.1.1
	OPENBSD_3_4:1.1.1.1.0.4
	OPENBSD_3_4_BASE:1.1.1.1
	OPENBSD_3_3:1.1.1.1.0.2
	OPENBSD_3_3_BASE:1.1.1.1
	PERL_5_8_0:1.1.1.1
	CPAN:1.1.1;
locks; strict;
comment	@# @;
expand	@o@;


1.2
date	2009.10.12.18.24.37;	author millert;	state dead;
branches;
next	1.1;

1.1
date	2002.10.27.22.14.56;	author millert;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	2002.10.27.22.14.56;	author millert;	state Exp;
branches;
next	1.1.1.2;

1.1.1.2
date	2008.09.29.17.18.26;	author millert;	state Exp;
branches;
next	;


desc
@@


1.2
log
@Merge in perl 5.10.1
@
text
@use strict;
use warnings;
use Config;
BEGIN {
    require Test::More;
    if ($Config{'useithreads'}) {
	Test::More->import( tests => 53 );
    }
    else {
	Test::More->import(skip_all => "no useithreads");
    }
}


my @@array;
my %hash;

sub hash
{
 my @@val = @@_;
 is(keys %hash, 0, "hash empty");
 $hash{0} = $val[0];
 is(keys %hash,1, "Assign grows hash");
 is($hash{0},$val[0],"Value correct");
 $hash{2} = $val[2];
 is(keys %hash,2, "Assign grows hash");
 is($hash{0},$val[0],"Value correct");
 is($hash{2},$val[2],"Value correct");
 $hash{1} = $val[1];
 is(keys %hash,3,"Size correct");
 my @@keys = keys %hash;
 is(join(',',sort @@keys),'0,1,2',"Keys correct");
 my @@hval = @@hash{0,1,2};
 is(join(',',@@hval),join(',',@@val),"Values correct");
 my $val = delete $hash{1};
 is($val,$val[1],"Delete value correct");
 is(keys %hash,2,"Size correct");
 while (my ($k,$v) = each %hash)
  {
   is($v,$val[$k],"each works");
  }
 %hash = ();
 is(keys %hash,0,"Clear hash");
}

sub array
{
 my @@val = @@_;
 is(@@array, 0, "array empty");
 $array[0] = $val[0];
 is(@@array,1, "Assign grows array");
 is($array[0],$val[0],"Value correct");
 unshift(@@array,$val[2]);
 is($array[0],$val[2],"Unshift worked");
 is($array[-1],$val[0],"-ve index");
 push(@@array,$val[1]);
 is($array[-1],$val[1],"Push worked");
 is(@@array,3,"Size correct");
 is(shift(@@array),$val[2],"Shift worked");
 is(@@array,2,"Size correct");
 is(pop(@@array),$val[1],"Pop worked");
 is(@@array,1,"Size correct");
 @@array = ();
 is(@@array,0,"Clear array");
}

ok((require threads::shared),"Require module");

array(24,[],'Thing');
hash(24,[],'Thing');


import threads::shared;
share(\@@array);

#SKIP:
# {
#  skip("Wibble",1);
#  ok(0,"No it isn't");
# }

array(24,42,'Thing');

share(\%hash);
hash(24,42,'Thing');

@


1.1
log
@Initial revision
@
text
@@


1.1.1.1
log
@stock perl 5.8.0 from CPAN
@
text
@@


1.1.1.2
log
@import perl 5.10.0 from CPAN
@
text
@d3 1
a3 1

d5 3
a7 3
    if ($ENV{'PERL_CORE'}){
        chdir 't';
        unshift @@INC, '../lib';
d9 2
a10 4
    use Config;
    if (! $Config{'useithreads'}) {
        print("1..0 # Skip: Perl not compiled with 'useithreads'\n");
        exit(0);
a13 3
use Test::More (tests => 53);

### Start of Testing ###
d20 24
a43 23
    my @@val = @@_;
    is(keys %hash, 0, "hash empty");
    $hash{0} = $val[0];
    is(keys %hash,1, "Assign grows hash");
    is($hash{0},$val[0],"Value correct");
    $hash{2} = $val[2];
    is(keys %hash,2, "Assign grows hash");
    is($hash{0},$val[0],"Value correct");
    is($hash{2},$val[2],"Value correct");
    $hash{1} = $val[1];
    is(keys %hash,3,"Size correct");
    my @@keys = keys %hash;
    is(join(',',sort @@keys),'0,1,2',"Keys correct");
    my @@hval = @@hash{0,1,2};
    is(join(',',@@hval),join(',',@@val),"Values correct");
    my $val = delete $hash{1};
    is($val,$val[1],"Delete value correct");
    is(keys %hash,2,"Size correct");
    while (my ($k,$v) = each %hash) {
        is($v,$val[$k],"each works");
    }
    %hash = ();
    is(keys %hash,0,"Clear hash");
d48 17
a64 17
    my @@val = @@_;
    is(@@array, 0, "array empty");
    $array[0] = $val[0];
    is(@@array,1, "Assign grows array");
    is($array[0],$val[0],"Value correct");
    unshift(@@array,$val[2]);
    is($array[0],$val[2],"Unshift worked");
    is($array[-1],$val[0],"-ve index");
    push(@@array,$val[1]);
    is($array[-1],$val[1],"Push worked");
    is(@@array,3,"Size correct");
    is(shift(@@array),$val[2],"Shift worked");
    is(@@array,2,"Size correct");
    is(pop(@@array),$val[1],"Pop worked");
    is(@@array,1,"Size correct");
    @@array = ();
    is(@@array,0,"Clear array");
d69 3
a71 3
if ($threads::shared::VERSION && ! exists($ENV{'PERL_CORE'})) {
    diag('Testing threads::shared ' . $threads::shared::VERSION);
}
d73 2
a74 2
array(24, [], 'Thing');
hash(24, [], 'Thing');
d76 5
a80 1
threads::shared->import();
d82 1
a82 2
share(\@@array);
array(24, 42, 'Thing');
d85 1
a85 1
hash(24, 42, 'Thing');
a86 1
# EOF
@

