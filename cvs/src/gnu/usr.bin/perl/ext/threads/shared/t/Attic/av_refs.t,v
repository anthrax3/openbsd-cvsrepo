head	1.2;
access;
symbols
	OPENBSD_4_6:1.1.1.2.0.6
	OPENBSD_4_6_BASE:1.1.1.2
	OPENBSD_4_5:1.1.1.2.0.2
	OPENBSD_4_5_BASE:1.1.1.2
	PERL_5_10_0:1.1.1.2
	OPENBSD_4_4:1.1.1.1.0.24
	OPENBSD_4_4_BASE:1.1.1.1
	OPENBSD_4_3:1.1.1.1.0.22
	OPENBSD_4_3_BASE:1.1.1.1
	OPENBSD_4_2:1.1.1.1.0.20
	OPENBSD_4_2_BASE:1.1.1.1
	OPENBSD_4_1:1.1.1.1.0.18
	OPENBSD_4_1_BASE:1.1.1.1
	OPENBSD_4_0:1.1.1.1.0.16
	OPENBSD_4_0_BASE:1.1.1.1
	PERL_5_8_8:1.1.1.1
	OPENBSD_3_9:1.1.1.1.0.14
	OPENBSD_3_9_BASE:1.1.1.1
	OPENBSD_3_8:1.1.1.1.0.12
	OPENBSD_3_8_BASE:1.1.1.1
	OPENBSD_3_7:1.1.1.1.0.10
	OPENBSD_3_7_BASE:1.1.1.1
	PERL_5_8_6:1.1.1.1
	OPENBSD_3_6:1.1.1.1.0.8
	OPENBSD_3_6_BASE:1.1.1.1
	PERL_5_8_5:1.1.1.1
	PERL_5_8_3:1.1.1.1
	OPENBSD_3_5:1.1.1.1.0.6
	OPENBSD_3_5_BASE:1.1.1.1
	PERL_5_8_2:1.1.1.1
	OPENBSD_3_4:1.1.1.1.0.4
	OPENBSD_3_4_BASE:1.1.1.1
	OPENBSD_3_3:1.1.1.1.0.2
	OPENBSD_3_3_BASE:1.1.1.1
	PERL_5_8_0:1.1.1.1
	CPAN:1.1.1;
locks; strict;
comment	@# @;
expand	@o@;


1.2
date	2009.10.12.18.24.37;	author millert;	state dead;
branches;
next	1.1;

1.1
date	2002.10.27.22.14.56;	author millert;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	2002.10.27.22.14.56;	author millert;	state Exp;
branches;
next	1.1.1.2;

1.1.1.2
date	2008.09.29.17.18.26;	author millert;	state Exp;
branches;
next	;


desc
@@


1.2
log
@Merge in perl 5.10.1
@
text
@use warnings;

BEGIN {
#    chdir 't' if -d 't';
#    push @@INC ,'../lib';
    require Config; import Config;
    unless ($Config{'useithreads'}) {
        print "1..0 # Skip: no useithreads\n";
        exit 0;
    }
}


sub ok {
    my ($id, $ok, $name) = @@_;

    $name = '' unless defined $name;
    # You have to do it this way or VMS will get confused.
    print $ok ? "ok $id - $name\n" : "not ok $id - $name\n";

    printf "# Failed test at line %d\n", (caller)[2] unless $ok;

    return $ok;
}

use ExtUtils::testlib;
use strict;
BEGIN { print "1..11\n" };
use threads;
use threads::shared;
ok(1,1,"loaded");

my $sv;
share($sv);
$sv = "hi";
my @@av;
share(@@av);
push @@av, $sv;
ok(2, $av[0] eq "hi");
push @@av, "foo";
ok(3, $av[1] eq 'foo');
my $av = threads->create(sub {	
    my $av;	
    my @@av2;
    share($av);
    share(@@av2);
    $av = \@@av2;
    push @@$av, "bar", \@@av;
    return $av;
})->join();
ok(4,$av->[0] eq "bar");
ok(5,$av->[1]->[0] eq 'hi');
threads->create(sub { $av[0] = "hihi" })->join();
ok(6,$av->[1]->[0] eq 'hihi');
ok(7, pop(@@{$av->[1]}) eq "foo");
ok(8, scalar(@@{$av->[1]}) == 1);
threads->create(sub { @@$av = () })->join();
threads->create(sub { ok(9, scalar @@$av == 0)})->join();
threads->create(sub { unshift(@@$av, threads->create(sub { my @@array; share(@@array); return \@@array})->join())})->join();
ok(10, ref($av->[0]) eq 'ARRAY');
threads->create(sub { push @@{$av->[0]}, \@@av })->join();
threads->create(sub { $av[0] = 'testtest'})->join();
threads->create(sub { ok(11, $av->[0]->[0]->[0] eq 'testtest')})->join();






@


1.1
log
@Initial revision
@
text
@@


1.1.1.1
log
@stock perl 5.8.0 from CPAN
@
text
@@


1.1.1.2
log
@import perl 5.10.0 from CPAN
@
text
@a0 1
use strict;
d4 6
a9 8
    if ($ENV{'PERL_CORE'}){
        chdir 't';
        unshift @@INC, '../lib';
    }
    use Config;
    if (! $Config{'useithreads'}) {
        print("1..0 # Skip: Perl not compiled with 'useithreads'\n");
        exit(0);
a12 1
use ExtUtils::testlib;
d17 1
d19 3
a21 6
    if ($ok) {
        print("ok $id - $name\n");
    } else {
        print("not ok $id - $name\n");
        printf("# Failed test at line %d\n", (caller)[2]);
    }
d23 1
a23 1
    return ($ok);
d26 3
a28 5
BEGIN {
    $| = 1;
    print("1..14\n");   ### Number of tests that will be run ###
};

d31 1
a31 3
ok(1, 1, 'Loaded');

### Start of Testing ###
a35 1

d38 6
a43 9
push(@@av, $sv);

ok(2, $av[0] eq "hi", 'Array holds value');

push(@@av, "foo");
ok(3, $av[1] eq 'foo', 'Array holds 2nd value');

my $av = threads->create(sub {
    my $av;
d48 2
a49 2
    push(@@$av, "bar", \@@av);
    return ($av);
d51 2
a52 4

ok(4,$av->[0] eq "bar", 'Thread added to array');
ok(5,$av->[1]->[0] eq 'hi', 'Shared in shared');

d54 3
a56 4
ok(6,$av->[1]->[0] eq 'hihi', 'Replaced shared in shared');
ok(7, pop(@@{$av->[1]}) eq "foo", 'Pop shared array');
ok(8, scalar(@@{$av->[1]}) == 1, 'Array size');

d58 6
a63 1
threads->create(sub { ok(9, scalar @@$av == 0, 'Array cleared in thread'); })->join();
a64 7
threads->create(sub {
    unshift(@@$av, threads->create(sub {
                        my @@array;
                        share(@@array);
                        return (\@@array);
                  })->join());
})->join();
a65 1
ok(10, ref($av->[0]) eq 'ARRAY', 'Array in array');
a66 3
threads->create(sub { push @@{$av->[0]}, \@@av })->join();
threads->create(sub { $av[0] = 'testtest'})->join();
threads->create(sub { ok(11, $av->[0]->[0]->[0] eq 'testtest', 'Nested'); })->join();
a67 2
ok(12, is_shared($sv), "Check for sharing");
ok(13, is_shared(@@av), "Check for sharing");
a68 2
my $x :shared;
ok(14, is_shared($x), "Check for sharing");
a69 1
# EOF
@

