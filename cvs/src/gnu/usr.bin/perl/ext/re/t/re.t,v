head	1.2;
access;
symbols
	OPENBSD_6_2:1.2.0.2
	OPENBSD_6_2_BASE:1.2
	PERL_5_24_2:1.1.1.6
	OPENBSD_6_1:1.2.0.4
	OPENBSD_6_1_BASE:1.2
	OPENBSD_6_0:1.1.1.5.0.16
	OPENBSD_6_0_BASE:1.1.1.5
	OPENBSD_5_9:1.1.1.5.0.10
	OPENBSD_5_9_BASE:1.1.1.5
	OPENBSD_5_8:1.1.1.5.0.12
	OPENBSD_5_8_BASE:1.1.1.5
	PERL_5_20_2:1.1.1.5
	OPENBSD_5_7:1.1.1.5.0.4
	OPENBSD_5_7_BASE:1.1.1.5
	PERL_5_20_1:1.1.1.5
	OPENBSD_5_6:1.1.1.5.0.8
	OPENBSD_5_6_BASE:1.1.1.5
	PERL_5_18_2:1.1.1.5
	PERL:1.1.1
	OPENBSD_5_5:1.1.1.5.0.6
	OPENBSD_5_5_BASE:1.1.1.5
	OPENBSD_5_4:1.1.1.5.0.2
	OPENBSD_5_4_BASE:1.1.1.5
	PERL_5_16_3:1.1.1.5
	OPENBSD_5_3:1.1.1.4.0.10
	OPENBSD_5_3_BASE:1.1.1.4
	OPENBSD_5_2:1.1.1.4.0.8
	OPENBSD_5_2_BASE:1.1.1.4
	OPENBSD_5_1_BASE:1.1.1.4
	OPENBSD_5_1:1.1.1.4.0.6
	OPENBSD_5_0:1.1.1.4.0.4
	OPENBSD_5_0_BASE:1.1.1.4
	OPENBSD_4_9:1.1.1.4.0.2
	OPENBSD_4_9_BASE:1.1.1.4
	PERL_5_12_2:1.1.1.4
	OPENBSD_4_8:1.1.1.3.0.8
	OPENBSD_4_8_BASE:1.1.1.3
	OPENBSD_4_7:1.1.1.3.0.4
	OPENBSD_4_7_BASE:1.1.1.3
	PERL_5_10_1:1.1.1.3
	OPENBSD_4_6:1.1.1.3.0.6
	OPENBSD_4_6_BASE:1.1.1.3
	OPENBSD_4_5:1.1.1.3.0.2
	OPENBSD_4_5_BASE:1.1.1.3
	PERL_5_10_0:1.1.1.3
	OPENBSD_4_4:1.1.1.2.0.18
	OPENBSD_4_4_BASE:1.1.1.2
	OPENBSD_4_3:1.1.1.2.0.16
	OPENBSD_4_3_BASE:1.1.1.2
	OPENBSD_4_2:1.1.1.2.0.14
	OPENBSD_4_2_BASE:1.1.1.2
	OPENBSD_4_1:1.1.1.2.0.12
	OPENBSD_4_1_BASE:1.1.1.2
	OPENBSD_4_0:1.1.1.2.0.10
	OPENBSD_4_0_BASE:1.1.1.2
	PERL_5_8_8:1.1.1.2
	OPENBSD_3_9:1.1.1.2.0.8
	OPENBSD_3_9_BASE:1.1.1.2
	OPENBSD_3_8:1.1.1.2.0.6
	OPENBSD_3_8_BASE:1.1.1.2
	OPENBSD_3_7:1.1.1.2.0.4
	OPENBSD_3_7_BASE:1.1.1.2
	PERL_5_8_6:1.1.1.2
	OPENBSD_3_6:1.1.1.2.0.2
	OPENBSD_3_6_BASE:1.1.1.2
	PERL_5_8_5:1.1.1.2
	PERL_5_8_3:1.1.1.1
	OPENBSD_3_5:1.1.1.1.0.2
	OPENBSD_3_5_BASE:1.1.1.1
	PERL_5_8_2:1.1.1.1
	CPAN:1.1.1;
locks; strict;
comment	@# @;
expand	@o@;


1.2
date	2017.02.05.00.32.14;	author afresh1;	state Exp;
branches;
next	1.1;
commitid	cxJ08BvJA9Pt2PTM;

1.1
date	2003.12.03.02.43.52;	author millert;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	2003.12.03.02.43.52;	author millert;	state Exp;
branches;
next	1.1.1.2;

1.1.1.2
date	2004.08.09.17.46.35;	author millert;	state Exp;
branches;
next	1.1.1.3;

1.1.1.3
date	2008.09.29.17.18.26;	author millert;	state Exp;
branches;
next	1.1.1.4;

1.1.1.4
date	2010.09.24.14.48.53;	author millert;	state Exp;
branches;
next	1.1.1.5;

1.1.1.5
date	2013.03.25.20.08.46;	author sthen;	state Exp;
branches;
next	1.1.1.6;

1.1.1.6
date	2017.08.14.13.46.12;	author afresh1;	state Exp;
branches;
next	;
commitid	fAzrs78vdW2Yfc6A;


desc
@@


1.2
log
@Fix merge issues, remove excess files - match perl-5.24.1 dist
@
text
@#!./perl

BEGIN {
	require Config;
	if (($Config::Config{'extensions'} !~ /\bre\b/) ){
        	print "1..0 # Skip -- Perl configured without re module\n";
		exit 0;
	}
}

use strict;

my $re_taint_bit = 0x00100000;
my $re_eval_bit = 0x00200000;

use Test::More tests => 15;
require_ok( 're' );

# setcolor
$INC{ 'Term/Cap.pm' } = 1;
local $ENV{PERL_RE_TC};
re::setcolor();
is( $ENV{PERL_RE_COLORS}, "md\tme\tso\tse\tus\tue", 
	'setcolor() should provide default colors' );
$ENV{PERL_RE_TC} = 'su,n,ny';
re::setcolor();
is( $ENV{PERL_RE_COLORS}, "su\tn\tny", '... or use $ENV{PERL_RE_COLORS}' );

# bits
# get on
my $warn;
local $SIG{__WARN__} = sub {
	$warn = shift;
};
#eval { re::bits(1) };
#like( $warn, qr/Useless use/, 'bits() should warn with no args' );

delete $ENV{PERL_RE_COLORS};
re::bits(0, 'debug');
is( $ENV{PERL_RE_COLORS}, undef,
	"... should not set regex colors given 'debug'" );
re::bits(0, 'debugcolor');
isnt( $ENV{PERL_RE_COLORS}, '', 
	"... should set regex colors given 'debugcolor'" );
re::bits(0, 'nosuchsubpragma');
like( $warn, qr/Unknown "re" subpragma/, 
	'... should warn about unknown subpragma' );
ok( re::bits(0, 'taint') & $re_taint_bit, '... should set taint bits' );
ok( re::bits(0, 'eval')  & $re_eval_bit, '... should set eval bits' );

local $^H;

# import
re->import('taint', 'eval');
ok( $^H & $re_taint_bit, 'import should set taint bits in $^H when requested' );
ok( $^H & $re_eval_bit, 'import should set eval bits in $^H when requested' );

re->unimport('taint');
ok( !( $^H & $re_taint_bit ), 'unimport should clear bits in $^H when requested' );
re->unimport('eval');
ok( !( $^H & $re_eval_bit ), '... and again' );
my $reg=qr/(foo|bar|baz|blah)/;
close STDERR;
eval"use re Debug=>'ALL'";
my $ok='foo'=~/$reg/;
eval"no re Debug=>'ALL'";
ok( $ok, 'No segv!' );

my $message = "Don't tread on me";
$_ = $message;
re->import("/aa");
is($_, $message, "re doesn't clobber \$_");

package Term::Cap;

sub Tgetent {
	bless({}, $_[0]);
}

sub Tputs {
	return $_[1];
}

package main;

{
  my $w;
  local $SIG{__WARN__} = sub { warn shift; ++$w };
  re->import();
  is $w, undef, 'no warning for "use re;" (which is not useless)';
}
@


1.1
log
@Initial revision
@
text
@d4 5
a8 2
	chdir 't' if -d 't';
	@@INC = '../lib';
d13 4
a16 1
use Test::More tests => 13;
d35 2
a36 2
eval { re::bits(1) };
like( $warn, qr/Useless use/, 'bits() should warn with no args' );
d48 2
a49 2
ok( re::bits(0, 'taint') & 0x00100000, '... should set taint bits' );
ok( re::bits(0, 'eval')  & 0x00200000, '... should set eval bits' );
d55 2
a56 2
ok( $^H & 0x00100000, 'import should set taint bits in $^H when requested' );
ok( $^H & 0x00200000, 'import should set eval bits in $^H when requested' );
d59 1
a59 1
ok( !( $^H & 0x00100000 ), 'unimport should clear bits in $^H when requested' );
d61 12
a72 1
ok( !( $^H & 0x00200000 ), '... and again' );
d82 9
@


1.1.1.1
log
@perl 5.8.2 from CPAN
@
text
@@


1.1.1.2
log
@Import of stock perl 5.8.5
@
text
@a5 5
	require Config;
	if (($Config::Config{'extensions'} !~ /\bre\b/) ){
        	print "1..0 # Skip -- Perl configured without re module\n";
		exit 0;
	}
@


1.1.1.3
log
@import perl 5.10.0 from CPAN
@
text
@d34 2
a35 2
#eval { re::bits(1) };
#like( $warn, qr/Useless use/, 'bits() should warn with no args' );
a60 6
my $reg=qr/(foo|bar|baz|blah)/;
close STDERR;
eval"use re Debug=>'ALL'";
my $ok='foo'=~/$reg/;
eval"no re Debug=>'ALL'";
ok( $ok, 'No segv!' );
@


1.1.1.4
log
@Perl 5.12.2 from CPAN
@
text
@d4 2
@


1.1.1.5
log
@import perl 5.16.3 from CPAN - worked on by Andrew Fresh and myself
@
text
@d13 1
a13 1
use Test::More tests => 15;
a65 5
my $message = "Don't tread on me";
$_ = $message;
re->import("/aa");
is($_, $message, "re doesn't clobber \$_");

a73 9
}

package main;

{
  my $w;
  local $SIG{__WARN__} = sub { warn shift; ++$w };
  re->import();
  is $w, undef, 'no warning for "use re;" (which is not useless)';
@


1.1.1.6
log
@Import perl-5.24.2
@
text
@a12 3
my $re_taint_bit = 0x00100000;
my $re_eval_bit = 0x00200000;

d45 2
a46 2
ok( re::bits(0, 'taint') & $re_taint_bit, '... should set taint bits' );
ok( re::bits(0, 'eval')  & $re_eval_bit, '... should set eval bits' );
d52 2
a53 2
ok( $^H & $re_taint_bit, 'import should set taint bits in $^H when requested' );
ok( $^H & $re_eval_bit, 'import should set eval bits in $^H when requested' );
d56 1
a56 1
ok( !( $^H & $re_taint_bit ), 'unimport should clear bits in $^H when requested' );
d58 1
a58 1
ok( !( $^H & $re_eval_bit ), '... and again' );
@


