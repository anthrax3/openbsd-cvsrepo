head	1.1;
branch	1.1.1;
access;
symbols
	OPENBSD_6_0:1.1.1.4.0.16
	OPENBSD_6_0_BASE:1.1.1.4
	OPENBSD_5_9:1.1.1.4.0.10
	OPENBSD_5_9_BASE:1.1.1.4
	OPENBSD_5_8:1.1.1.4.0.12
	OPENBSD_5_8_BASE:1.1.1.4
	PERL_5_20_2:1.1.1.4
	OPENBSD_5_7:1.1.1.4.0.4
	OPENBSD_5_7_BASE:1.1.1.4
	PERL_5_20_1:1.1.1.4
	OPENBSD_5_6:1.1.1.4.0.8
	OPENBSD_5_6_BASE:1.1.1.4
	PERL_5_18_2:1.1.1.4
	PERL:1.1.1
	OPENBSD_5_5:1.1.1.4.0.6
	OPENBSD_5_5_BASE:1.1.1.4
	OPENBSD_5_4:1.1.1.4.0.2
	OPENBSD_5_4_BASE:1.1.1.4
	PERL_5_16_3:1.1.1.4
	OPENBSD_5_3:1.1.1.3.0.10
	OPENBSD_5_3_BASE:1.1.1.3
	OPENBSD_5_2:1.1.1.3.0.8
	OPENBSD_5_2_BASE:1.1.1.3
	OPENBSD_5_1_BASE:1.1.1.3
	OPENBSD_5_1:1.1.1.3.0.6
	OPENBSD_5_0:1.1.1.3.0.4
	OPENBSD_5_0_BASE:1.1.1.3
	OPENBSD_4_9:1.1.1.3.0.2
	OPENBSD_4_9_BASE:1.1.1.3
	PERL_5_12_2:1.1.1.3
	OPENBSD_4_8:1.1.1.2.0.28
	OPENBSD_4_8_BASE:1.1.1.2
	OPENBSD_4_7:1.1.1.2.0.24
	OPENBSD_4_7_BASE:1.1.1.2
	PERL_5_10_1:1.1.1.2
	OPENBSD_4_6:1.1.1.2.0.26
	OPENBSD_4_6_BASE:1.1.1.2
	OPENBSD_4_5:1.1.1.2.0.22
	OPENBSD_4_5_BASE:1.1.1.2
	PERL_5_10_0:1.1.1.2
	OPENBSD_4_4:1.1.1.2.0.20
	OPENBSD_4_4_BASE:1.1.1.2
	OPENBSD_4_3:1.1.1.2.0.18
	OPENBSD_4_3_BASE:1.1.1.2
	OPENBSD_4_2:1.1.1.2.0.16
	OPENBSD_4_2_BASE:1.1.1.2
	OPENBSD_4_1:1.1.1.2.0.14
	OPENBSD_4_1_BASE:1.1.1.2
	OPENBSD_4_0:1.1.1.2.0.12
	OPENBSD_4_0_BASE:1.1.1.2
	PERL_5_8_8:1.1.1.2
	OPENBSD_3_9:1.1.1.2.0.10
	OPENBSD_3_9_BASE:1.1.1.2
	OPENBSD_3_8:1.1.1.2.0.8
	OPENBSD_3_8_BASE:1.1.1.2
	OPENBSD_3_7:1.1.1.2.0.6
	OPENBSD_3_7_BASE:1.1.1.2
	PERL_5_8_6:1.1.1.2
	OPENBSD_3_6:1.1.1.2.0.4
	OPENBSD_3_6_BASE:1.1.1.2
	PERL_5_8_5:1.1.1.2
	PERL_5_8_3:1.1.1.2
	OPENBSD_3_5:1.1.1.2.0.2
	OPENBSD_3_5_BASE:1.1.1.2
	PERL_5_8_2:1.1.1.2
	OPENBSD_3_4:1.1.1.1.0.4
	OPENBSD_3_4_BASE:1.1.1.1
	OPENBSD_3_3:1.1.1.1.0.2
	OPENBSD_3_3_BASE:1.1.1.1
	PERL_5_8_0:1.1.1.1
	CPAN:1.1.1;
locks; strict;
comment	@# @;
expand	@o@;


1.1
date	2002.10.27.22.14.54;	author millert;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	2002.10.27.22.14.54;	author millert;	state Exp;
branches;
next	1.1.1.2;

1.1.1.2
date	2003.12.03.02.43.50;	author millert;	state Exp;
branches;
next	1.1.1.3;

1.1.1.3
date	2010.09.24.14.48.49;	author millert;	state Exp;
branches;
next	1.1.1.4;

1.1.1.4
date	2013.03.25.20.08.44;	author sthen;	state Exp;
branches;
next	;


desc
@@


1.1
log
@Initial revision
@
text
@# NOTE: this file tests how large files (>2GB) work with raw system IO.
# stdio: open(), tell(), seek(), print(), read() is tested in t/op/lfs.t.
# If you modify/add tests here, remember to update also t/op/lfs.t.

BEGIN {
	chdir 't' if -d 't';
	@@INC = '../lib';
	require Config; import Config;
	# Don't bother if there are no quad offsets.
	if ($Config{lseeksize} < 8) {
		print "1..0 # Skip: no 64-bit file offsets\n";
		exit(0);
	}
	require Fcntl; import Fcntl qw(/^O_/ /^SEEK_/);
}

use strict;

$| = 1;

our @@s;
our $fail;

sub zap {
    close(BIG);
    unlink("big");
    unlink("big1");
    unlink("big2");
}

sub bye {
    zap(); 
    exit(0);
}

my $explained;

sub explain {
    unless ($explained++) {
	print <<EOM;
#
# If the lfs (large file support: large meaning larger than two
# gigabytes) tests are skipped or fail, it may mean either that your
# process (or process group) is not allowed to write large files
# (resource limits) or that the file system (the network filesystem?)
# you are running the tests on doesn't let your user/group have large
# files (quota) or the filesystem simply doesn't support large files.
# You may even need to reconfigure your kernel.  (This is all very
# operating system and site-dependent.)
#
# Perl may still be able to support large files, once you have
# such a process, enough quota, and such a (file) system.
# It is just that the test failed now.
#
EOM
    }
    print "1..0 # Skip: @@_\n" if @@_;
}

print "# checking whether we have sparse files...\n";

# Known have-nots.
if ($^O eq 'MSWin32' || $^O eq 'NetWare' || $^O eq 'VMS') {
    print "1..0 # Skip: no sparse files in $^O\n";
    bye();
}

# Known haves that have problems running this test
# (for example because they do not support sparse files, like UNICOS)
if ($^O eq 'unicos') {
    print "1..0 # Skip: no sparse files in $^0, unable to test large files\n";
    bye();
}

# Then try heuristically to deduce whether we have sparse files.

# We'll start off by creating a one megabyte file which has
# only three "true" bytes.  If we have sparseness, we should
# consume less blocks than one megabyte (assuming nobody has
# one megabyte blocks...)

sysopen(BIG, "big1", O_WRONLY|O_CREAT|O_TRUNC) or
    do { warn "sysopen big1 failed: $!\n"; bye };
sysseek(BIG, 1_000_000, SEEK_SET) or
    do { warn "sysseek big1 failed: $!\n"; bye };
syswrite(BIG, "big") or
    do { warn "syswrite big1 failed; $!\n"; bye };
close(BIG) or
    do { warn "close big1 failed: $!\n"; bye };

my @@s1 = stat("big1");

print "# s1 = @@s1\n";

sysopen(BIG, "big2", O_WRONLY|O_CREAT|O_TRUNC) or
    do { warn "sysopen big2 failed: $!\n"; bye };
sysseek(BIG, 2_000_000, SEEK_SET) or
    do { warn "sysseek big2 failed: $!\n"; bye };
syswrite(BIG, "big") or
    do { warn "syswrite big2 failed; $!\n"; bye };
close(BIG) or
    do { warn "close big2 failed: $!\n"; bye };

my @@s2 = stat("big2");

print "# s2 = @@s2\n";

zap();

unless ($s1[7] == 1_000_003 && $s2[7] == 2_000_003 &&
	$s1[11] == $s2[11] && $s1[12] == $s2[12]) {
	print "1..0 # Skip: no sparse files?\n";
	bye;
}

print "# we seem to have sparse files...\n";

# By now we better be sure that we do have sparse files:
# if we are not, the following will hog 5 gigabytes of disk.  Ooops.
# This may fail by producing some signal; run in a subprocess first for safety

$ENV{LC_ALL} = "C";

my $r = system '../perl', '-I../lib', '-e', <<'EOF';
use Fcntl qw(/^O_/ /^SEEK_/);
sysopen(BIG, "big", O_WRONLY|O_CREAT|O_TRUNC) or die $!;
my $sysseek = sysseek(BIG, 5_000_000_000, SEEK_SET);
my $syswrite = syswrite(BIG, "big");
exit 0;
EOF

sysopen(BIG, "big", O_WRONLY|O_CREAT|O_TRUNC) or
	do { warn "sysopen 'big' failed: $!\n"; bye };
my $sysseek = sysseek(BIG, 5_000_000_000, SEEK_SET);
unless (! $r && defined $sysseek && $sysseek == 5_000_000_000) {
    $sysseek = 'undef' unless defined $sysseek;
    explain("seeking past 2GB failed: ",
	    $r ? 'signal '.($r & 0x7f) : "$! (sysseek returned $sysseek)");
    bye();
}

# The syswrite will fail if there are are filesize limitations (process or fs).
my $syswrite = syswrite(BIG, "big");
print "# syswrite failed: $! (syswrite returned ",
      defined $syswrite ? $syswrite : 'undef', ")\n"
    unless defined $syswrite && $syswrite == 3;
my $close     = close BIG;
print "# close failed: $!\n" unless $close;
unless($syswrite && $close) {
    if ($! =~/too large/i) {
	explain("writing past 2GB failed: process limits?");
    } elsif ($! =~ /quota/i) {
	explain("filesystem quota limits?");
    } else {
	explain("error: $!");
    }
    bye();
}

@@s = stat("big");

print "# @@s\n";

unless ($s[7] == 5_000_000_003) {
    explain("kernel/fs not configured to use large files?");
    bye();
}

sub fail () {
    print "not ";
    $fail++;
}

sub offset ($$) {
    my ($offset_will_be, $offset_want) = @@_;
    my $offset_is = eval $offset_will_be;
    unless ($offset_is == $offset_want) {
        print "# bad offset $offset_is, want $offset_want\n";
	my ($offset_func) = ($offset_will_be =~ /^(\w+)/);
	if (unpack("L", pack("L", $offset_want)) == $offset_is) {
	    print "# 32-bit wraparound suspected in $offset_func() since\n";
	    print "# $offset_want cast into 32 bits equals $offset_is.\n";
	} elsif ($offset_want - unpack("L", pack("L", $offset_want)) - 1
	         == $offset_is) {
	    print "# 32-bit wraparound suspected in $offset_func() since\n";
	    printf "# %s - unpack('L', pack('L', %s)) - 1 equals %s.\n",
	        $offset_want,
	        $offset_want,
	        $offset_is;
        }
        fail;
    }
}

print "1..17\n";

$fail = 0;

fail unless $s[7] == 5_000_000_003;	# exercizes pp_stat
print "ok 1\n";

fail unless -s "big" == 5_000_000_003;	# exercizes pp_ftsize
print "ok 2\n";

fail unless -e "big";
print "ok 3\n";

fail unless -f "big";
print "ok 4\n";

sysopen(BIG, "big", O_RDONLY) or do { warn "sysopen failed: $!\n"; bye };

offset('sysseek(BIG, 4_500_000_000, SEEK_SET)', 4_500_000_000);
print "ok 5\n";

offset('sysseek(BIG, 0, SEEK_CUR)', 4_500_000_000);
print "ok 6\n";

offset('sysseek(BIG, 1, SEEK_CUR)', 4_500_000_001);
print "ok 7\n";

offset('sysseek(BIG, 0, SEEK_CUR)', 4_500_000_001);
print "ok 8\n";

offset('sysseek(BIG, -1, SEEK_CUR)', 4_500_000_000);
print "ok 9\n";

offset('sysseek(BIG, 0, SEEK_CUR)', 4_500_000_000);
print "ok 10\n";

offset('sysseek(BIG, -3, SEEK_END)', 5_000_000_000);
print "ok 11\n";

offset('sysseek(BIG, 0, SEEK_CUR)', 5_000_000_000);
print "ok 12\n";

my $big;

fail unless sysread(BIG, $big, 3) == 3;
print "ok 13\n";

fail unless $big eq "big";
print "ok 14\n";

# 705_032_704 = (I32)5_000_000_000
# See that we don't have "big" in the 705_... spot:
# that would mean that we have a wraparound.
fail unless sysseek(BIG, 705_032_704, SEEK_SET);
print "ok 15\n";

my $zero;

fail unless read(BIG, $zero, 3) == 3;
print "ok 16\n";

fail unless $zero eq "\0\0\0";
print "ok 17\n";

explain() if $fail;

bye(); # does the necessary cleanup

END {
   unlink "big"; # be paranoid about leaving 5 gig files lying around
}

# eof
@


1.1.1.1
log
@stock perl 5.8.0 from CPAN
@
text
@@


1.1.1.2
log
@perl 5.8.2 from CPAN
@
text
@d264 1
a264 5
    # unlink may fail if applied directly to a large file
    # be paranoid about leaving 5 gig files lying around
    open(BIG, ">big"); # truncate
    close(BIG);
    1 while unlink "big"; # standard portable idiom
@


1.1.1.3
log
@Perl 5.12.2 from CPAN
@
text
@d6 2
d111 1
a111 2
	$s1[11] == $s2[11] && $s1[12] == $s2[12] &&
	$s1[12] > 0) {
d124 1
a124 6
my $perl = '../../perl';
unless (-x $perl) {
    print "1..1\nnot ok 1 - can't find perl: expected $perl\n";
    exit 0;
}
my $r = system $perl, '-I../lib', '-e', <<'EOF';
a130 1

@


1.1.1.4
log
@import perl 5.16.3 from CPAN - worked on by Andrew Fresh and myself
@
text
@d16 2
a17 2
use File::Temp 'tempfile';
use Test::More;
d20 8
d29 4
a32 3
(undef, my $big0) = tempfile(UNLINK => 1);
(undef, my $big1) = tempfile(UNLINK => 1);
(undef, my $big2) = tempfile(UNLINK => 1);
d55 1
a55 3
    if (@@_) {
	plan(skip_all => "@@_");
    }
a57 2
$| = 1;

d62 2
a63 1
    plan(skip_all => "no sparse files in $^O");
d69 2
a70 1
    plan(skip_all => "no sparse files in $^O, unable to test large files");
d80 2
a81 2
sysopen(BIG, $big1, O_WRONLY|O_CREAT|O_TRUNC) or
    die "sysopen $big1 failed: $!";
d83 1
a83 1
    die "sysseek $big1 failed: $!";
d85 1
a85 1
    die "syswrite $big1 failed: $!";
d87 1
a87 1
    die "close $big1 failed: $!";
d89 1
a89 1
my @@s1 = stat($big1);
d93 2
a94 2
sysopen(BIG, $big2, O_WRONLY|O_CREAT|O_TRUNC) or
    die "sysopen $big2 failed: $!";
d96 1
a96 1
    die "sysseek $big2 failed: $!";
d98 1
a98 1
    die "syswrite $big2 failed: $!";
d100 1
a100 1
    die "close $big2 failed: $!";
d102 1
a102 1
my @@s2 = stat($big2);
d106 2
d111 2
a112 1
    plan(skip_all => "no sparse files?");
d125 2
a126 2
    plan(tests => 1);
    fail("can't find perl: expected $perl");
d128 1
a128 1
my $r = system $perl, '-I../lib', '-e', <<"EOF";
d130 3
a132 4
sysopen \$big, q{$big0}, O_WRONLY|O_CREAT|O_TRUNC or die qq{sysopen $big0 $!};
sysseek \$big, 5_000_000_000, SEEK_SET or die qq{sysseek $big0 $!};
syswrite \$big, "big" or die qq{syswrite $big0 $!};
close \$big or die qq{close $big0: $!};
d137 2
a138 2
sysopen(BIG, $big0, O_WRONLY|O_CREAT|O_TRUNC) or
    die "sysopen $big0 failed: $!";
d144 1
d162 1
d165 1
a165 1
@@s = stat($big0);
d171 6
a179 1
    local $Test::Builder::Level = $Test::Builder::Level + 1;
d196 1
a196 3
        fail($offset_will_be);
    } else {
	pass($offset_will_be);
d200 1
a200 1
plan(tests => 17);
d202 1
a202 2
is($s[7], 5_000_000_003, 'exercises pp_stat');
is(-s $big0, 5_000_000_003, 'exercises pp_ftsize');
d204 2
a205 2
is(-e $big0, 1);
is(-f $big0, 1);
d207 10
a216 1
sysopen(BIG, $big0, O_RDONLY) or die "sysopen failed: $!";
d219 1
d222 1
a223 3
# If you get 205_032_705 from here it means that
# your tell() is returning 32-bit values since (I32)4_500_000_001
# is exactly 205_032_705.
d225 1
d228 1
d231 1
d234 1
d237 1
d240 1
d244 2
a245 1
is(sysread(BIG, $big, 3), 3);
d247 2
a248 1
is($big, "big");
d253 2
a254 1
isnt(sysseek(BIG, 705_032_704, SEEK_SET), undef);
d258 5
a262 1
is(read(BIG, $zero, 3), 3);
d264 1
a264 1
is($zero, "\0\0\0");
d266 1
a266 1
explain() unless Test::Builder->new()->is_passing();
d271 1
a271 1
    open(BIG, ">$big0"); # truncate
d273 1
@


