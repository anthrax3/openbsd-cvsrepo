head	1.3;
access;
symbols
	OPENBSD_4_8:1.2.0.2
	OPENBSD_4_8_BASE:1.2
	OPENBSD_4_7:1.1.1.1.0.24
	OPENBSD_4_7_BASE:1.1.1.1
	PERL_5_10_1:1.1.1.1
	OPENBSD_4_6:1.1.1.1.0.26
	OPENBSD_4_6_BASE:1.1.1.1
	OPENBSD_4_5:1.1.1.1.0.22
	OPENBSD_4_5_BASE:1.1.1.1
	PERL_5_10_0:1.1.1.1
	OPENBSD_4_4:1.1.1.1.0.20
	OPENBSD_4_4_BASE:1.1.1.1
	OPENBSD_4_3:1.1.1.1.0.18
	OPENBSD_4_3_BASE:1.1.1.1
	OPENBSD_4_2:1.1.1.1.0.16
	OPENBSD_4_2_BASE:1.1.1.1
	OPENBSD_4_1:1.1.1.1.0.14
	OPENBSD_4_1_BASE:1.1.1.1
	OPENBSD_4_0:1.1.1.1.0.12
	OPENBSD_4_0_BASE:1.1.1.1
	PERL_5_8_8:1.1.1.1
	OPENBSD_3_9:1.1.1.1.0.10
	OPENBSD_3_9_BASE:1.1.1.1
	OPENBSD_3_8:1.1.1.1.0.8
	OPENBSD_3_8_BASE:1.1.1.1
	OPENBSD_3_7:1.1.1.1.0.6
	OPENBSD_3_7_BASE:1.1.1.1
	PERL_5_8_6:1.1.1.1
	OPENBSD_3_6:1.1.1.1.0.4
	OPENBSD_3_6_BASE:1.1.1.1
	PERL_5_8_5:1.1.1.1
	PERL_5_8_3:1.1.1.1
	OPENBSD_3_5:1.1.1.1.0.2
	OPENBSD_3_5_BASE:1.1.1.1
	PERL_5_8_2:1.1.1.1
	CPAN:1.1.1;
locks; strict;
comment	@# @;


1.3
date	2010.09.24.14.59.27;	author millert;	state dead;
branches;
next	1.2;

1.2
date	2010.06.28.18.18.11;	author millert;	state Exp;
branches;
next	1.1;

1.1
date	2003.12.03.02.43.53;	author millert;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	2003.12.03.02.43.53;	author millert;	state Exp;
branches;
next	;


desc
@@


1.3
log
@remove files no longer in perl 5.12.2 (or that have moved)
@
text
@#!./perl -w
$|=1;
BEGIN {
    require Config; import Config;
    if ($Config{'extensions'} !~ /\bOpcode\b/ && $Config{'osname'} ne 'VMS') {
        print "1..0\n";
        exit 0;
    }

}

# Tests Todo:
#	'main' as root

package test;	# test from somewhere other than main

use vars qw($bar);

use Opcode 1.00, qw(opdesc opset opset_to_ops opset_to_hex
	opmask_add full_opset empty_opset opcodes opmask define_optag);

use Safe 1.00;

my $last_test; # initalised at end
print "1..$last_test\n";

my $t = 1;
my $cpt;
# create and destroy some automatic Safe compartments first
$cpt = new Safe or die;
$cpt = new Safe or die;
$cpt = new Safe or die;

$cpt = new Safe "Root" or die;

foreach(1..3) {
	$foo = 42;

	$cpt->share(qw($foo));

	print ${$cpt->varglob('foo')}       == 42 ? "ok $t\n" : "not ok $t\n"; $t++;

	${$cpt->varglob('foo')} = 9;

	print $foo == 9	? "ok $t\n" : "not ok $t\n"; $t++;

	print $cpt->reval('$foo')       == 9	? "ok $t\n" : "not ok $t\n"; $t++;
	# check 'main' has been changed:
	print $cpt->reval('$::foo')     == 9	? "ok $t\n" : "not ok $t\n"; $t++;
	print $cpt->reval('$main::foo') == 9	? "ok $t\n" : "not ok $t\n"; $t++;
	# check we can't see our test package:
	print $cpt->reval('$test::foo')     	? "not ok $t\n" : "ok $t\n"; $t++;
	print $cpt->reval('${"test::foo"}')		? "not ok $t\n" : "ok $t\n"; $t++;

	$cpt->erase;	# erase the compartment, e.g., delete all variables

	print $cpt->reval('$foo') ? "not ok $t\n" : "ok $t\n"; $t++;

	# Note that we *must* use $cpt->varglob here because if we used
	# $Root::foo etc we would still see the original values!
	# This seems to be because the compiler has created an extra ref.

	print ${$cpt->varglob('foo')} ? "not ok $t\n" : "ok $t\n"; $t++;
}

print "ok $last_test\n";
BEGIN { $last_test = 28 }
@


1.2
log
@Update the Safe module to version 2.2.7 for CVE-2010-1168 and
CVE-2010-1447.  From Ian McWilliam
@
text
@@


1.1
log
@Initial revision
@
text
@a3 4
    if($ENV{PERL_CORE}) {
	chdir 't' if -d 't';
	@@INC = '../lib';
    }
@


1.1.1.1
log
@perl 5.8.2 from CPAN
@
text
@@
