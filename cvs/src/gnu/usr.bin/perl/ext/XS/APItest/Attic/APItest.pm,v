head	1.2;
access;
symbols
	OPENBSD_4_6:1.1.1.7.0.6
	OPENBSD_4_6_BASE:1.1.1.7
	OPENBSD_4_5:1.1.1.7.0.2
	OPENBSD_4_5_BASE:1.1.1.7
	PERL_5_10_0:1.1.1.7
	OPENBSD_4_4:1.1.1.6.0.10
	OPENBSD_4_4_BASE:1.1.1.6
	OPENBSD_4_3:1.1.1.6.0.8
	OPENBSD_4_3_BASE:1.1.1.6
	OPENBSD_4_2:1.1.1.6.0.6
	OPENBSD_4_2_BASE:1.1.1.6
	OPENBSD_4_1:1.1.1.6.0.4
	OPENBSD_4_1_BASE:1.1.1.6
	OPENBSD_4_0:1.1.1.6.0.2
	OPENBSD_4_0_BASE:1.1.1.6
	PERL_5_8_8:1.1.1.6
	OPENBSD_3_9:1.1.1.5.0.6
	OPENBSD_3_9_BASE:1.1.1.5
	OPENBSD_3_8:1.1.1.5.0.4
	OPENBSD_3_8_BASE:1.1.1.5
	OPENBSD_3_7:1.1.1.5.0.2
	OPENBSD_3_7_BASE:1.1.1.5
	PERL_5_8_6:1.1.1.5
	OPENBSD_3_6:1.1.1.4.0.2
	OPENBSD_3_6_BASE:1.1.1.4
	PERL_5_8_5:1.1.1.4
	PERL_5_8_3:1.1.1.3
	OPENBSD_3_5:1.1.1.2.0.2
	OPENBSD_3_5_BASE:1.1.1.2
	PERL_5_8_2:1.1.1.2
	OPENBSD_3_4:1.1.1.1.0.4
	OPENBSD_3_4_BASE:1.1.1.1
	OPENBSD_3_3:1.1.1.1.0.2
	OPENBSD_3_3_BASE:1.1.1.1
	PERL_5_8_0:1.1.1.1
	CPAN:1.1.1;
locks; strict;
comment	@# @;
expand	@o@;


1.2
date	2009.10.12.18.24.36;	author millert;	state dead;
branches;
next	1.1;

1.1
date	2002.10.27.22.14.56;	author millert;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	2002.10.27.22.14.56;	author millert;	state Exp;
branches;
next	1.1.1.2;

1.1.1.2
date	2003.12.03.02.43.54;	author millert;	state Exp;
branches;
next	1.1.1.3;

1.1.1.3
date	2004.04.07.21.13.10;	author millert;	state Exp;
branches;
next	1.1.1.4;

1.1.1.4
date	2004.08.09.17.46.34;	author millert;	state Exp;
branches;
next	1.1.1.5;

1.1.1.5
date	2005.01.15.21.17.03;	author millert;	state Exp;
branches;
next	1.1.1.6;

1.1.1.6
date	2006.03.28.18.48.25;	author millert;	state Exp;
branches;
next	1.1.1.7;

1.1.1.7
date	2008.09.29.17.18.25;	author millert;	state Exp;
branches;
next	;


desc
@@


1.2
log
@Merge in perl 5.10.1
@
text
@package XS::APItest;

use 5.008;
use strict;
use warnings;
use Carp;

use base qw/ DynaLoader Exporter /;

# Items to export into callers namespace by default. Note: do not export
# names by default without a very good reason. Use EXPORT_OK instead.
# Do not simply export all your public functions/methods/constants.

# Export everything since these functions are only used by a test script
our @@EXPORT = qw( print_double print_int print_long
		  print_float print_long_double have_long_double
);

our $VERSION = '0.01';

bootstrap XS::APItest $VERSION;

1;
__END__

=head1 NAME

XS::APItest - Test the perl C API

=head1 SYNOPSIS

  use XS::APItest;
  print_double(4);

=head1 ABSTRACT

This module tests the perl C API. Currently tests that C<printf>
works correctly.

=head1 DESCRIPTION

This module can be used to check that the perl C API is behaving
correctly. This module provides test functions and an associated
test script that verifies the output.

This module is not meant to be installed.

=head2 EXPORT

Exports all the test functions:

=over 4

=item B<print_double>

Test that a double-precision floating point number is formatted
correctly by C<printf>.

  print_double( $val );

Output is sent to STDOUT.

=item B<print_long_double>

Test that a C<long double> is formatted correctly by
C<printf>. Takes no arguments - the test value is hard-wired
into the function (as "7").

  print_long_double();

Output is sent to STDOUT.

=item B<have_long_double>

Determine whether a C<long double> is supported by Perl.  This should
be used to determine whether to test C<print_long_double>.

  print_long_double() if have_long_double;

=item B<print_nv>

Test that an C<NV> is formatted correctly by
C<printf>.

  print_nv( $val );

Output is sent to STDOUT.

=item B<print_iv>

Test that an C<IV> is formatted correctly by
C<printf>.

  print_iv( $val );

Output is sent to STDOUT.

=item B<print_uv>

Test that an C<UV> is formatted correctly by
C<printf>.

  print_uv( $val );

Output is sent to STDOUT.

=item B<print_int>

Test that an C<int> is formatted correctly by
C<printf>.

  print_int( $val );

Output is sent to STDOUT.

=item B<print_long>

Test that an C<long> is formatted correctly by
C<printf>.

  print_long( $val );

Output is sent to STDOUT.

=item B<print_float>

Test that a single-precision floating point number is formatted
correctly by C<printf>.

  print_float( $val );

Output is sent to STDOUT.

=back

=head1 SEE ALSO

L<XS::Typemap>, L<perlapi>.

=head1 AUTHORS

Tim Jenness, E<lt>t.jenness@@jach.hawaii.eduE<gt>,
Christian Soeller, E<lt>csoelle@@mph.auckland.ac.nzE<gt>,
Hugo van der Sanden E<lt>hv@@crypt.compulink.co.ukE<gt>

=head1 COPYRIGHT AND LICENSE

Copyright (C) 2002 Tim Jenness, Christian Soeller, Hugo van der Sanden.
All Rights Reserved.

This library is free software; you can redistribute it and/or modify
it under the same terms as Perl itself. 

=cut
@


1.1
log
@Initial revision
@
text
@@


1.1.1.1
log
@stock perl 5.8.0 from CPAN
@
text
@@


1.1.1.2
log
@perl 5.8.2 from CPAN
@
text
@d16 1
a16 1
		  print_float print_long_double have_long_double print_flush
d19 1
a19 1
our $VERSION = '0.02';
@


1.1.1.3
log
@perl 5.8.3 from CPAN
@
text
@d19 1
a19 1
our $VERSION = '0.03';
@


1.1.1.4
log
@Import of stock perl 5.8.5
@
text
@a16 2
		  mpushp mpushn mpushi mpushu
		  mxpushp mxpushn mxpushi mxpushu
d19 1
a19 1
our $VERSION = '0.04';
@


1.1.1.5
log
@perl 5.8.6 from CPAN
@
text
@a18 3
		  call_sv call_pv call_method eval_sv eval_pv require_pv
		  G_SCALAR G_ARRAY G_VOID G_DISCARD G_EVAL G_NOARGS
		  G_KEEPERR G_NODEBUG G_METHOD
d21 1
a21 12
# from cop.h 
sub G_SCALAR()	{   0 }
sub G_ARRAY()	{   1 }
sub G_VOID()	{ 128 }
sub G_DISCARD()	{   2 }
sub G_EVAL()	{   4 }
sub G_NOARGS()	{   8 }
sub G_KEEPERR()	{  16 }
sub G_NODEBUG()	{  32 }
sub G_METHOD()	{  64 }

our $VERSION = '0.05';
a135 24
=item B<call_sv>, B<call_pv>, B<call_method>

These exercise the C calls of the same names. Everything after the flags
arg is passed as the the args to the called function. They return whatever
the C function itself pushed onto the stack, plus the return value from
the function; for example

    call_sv( sub { @@_, 'c' }, G_ARRAY,  'a', 'b'); # returns 'a', 'b', 'c', 3
    call_sv( sub { @@_ },      G_SCALAR, 'a', 'b'); # returns 'b', 1

=item B<eval_sv>

Evalulates the passed SV. Result handling is done the same as for
C<call_sv()> etc.

=item B<eval_pv>

Excercises the C function of the same name in scalar context. Returns the
same SV that the C function returns.

=item B<require_pv>

Excercises the C function of the same name. Returns nothing.

d150 1
a150 1
Copyright (C) 2002,2004 Tim Jenness, Christian Soeller, Hugo van der Sanden.
@


1.1.1.6
log
@perl 5.8.8 import
@
text
@a21 1
		  mycroak strtab
d35 1
a35 1
our $VERSION = '0.08';
d162 1
a162 1
Evaluates the passed SV. Result handling is done the same as for
d167 1
a167 1
Exercises the C function of the same name in scalar context. Returns the
d172 1
a172 1
Exercises the C function of the same name. Returns nothing.
@


1.1.1.7
log
@import perl 5.10.0 from CPAN
@
text
@d22 1
a22 3
		  apitest_exception mycroak strtab
		  my_cxt_getint my_cxt_getsv my_cxt_setint my_cxt_setsv
		  sv_setsv_cow_hashkey_core sv_setsv_cow_hashkey_notcore
d36 1
a36 1
our $VERSION = '0.12';
d38 1
a38 33
use vars '$WARNINGS_ON_BOOTSTRAP';
use vars map "\$${_}_called_PP", qw(BEGIN UNITCHECK CHECK INIT END);

# Do these here to verify that XS code and Perl code get called at the same
# times
BEGIN {
    $BEGIN_called_PP++;
}
UNITCHECK {
    $UNITCHECK_called_PP++;
}
{
    # Need $W false by default, as some tests run under -w, and under -w we
    # can get warnings about "Too late to run CHECK" block (and INIT block)
    no warnings 'void';
    CHECK {
	$CHECK_called_PP++;
    }
    INIT {
	$INIT_called_PP++;
    }
}
END {
    $END_called_PP++;
}

if ($WARNINGS_ON_BOOTSTRAP) {
    bootstrap XS::APItest $VERSION;
} else {
    # More CHECK and INIT blocks that could warn:
    local $^W;
    bootstrap XS::APItest $VERSION;
}
@


