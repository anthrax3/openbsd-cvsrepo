head	1.2;
access;
symbols
	OPENBSD_4_8:1.1.1.6.0.4
	OPENBSD_4_8_BASE:1.1.1.6
	OPENBSD_4_7:1.1.1.6.0.2
	OPENBSD_4_7_BASE:1.1.1.6
	PERL_5_10_1:1.1.1.6
	OPENBSD_4_6:1.1.1.5.0.6
	OPENBSD_4_6_BASE:1.1.1.5
	OPENBSD_4_5:1.1.1.5.0.2
	OPENBSD_4_5_BASE:1.1.1.5
	PERL_5_10_0:1.1.1.5
	OPENBSD_4_4:1.1.1.4.0.10
	OPENBSD_4_4_BASE:1.1.1.4
	OPENBSD_4_3:1.1.1.4.0.8
	OPENBSD_4_3_BASE:1.1.1.4
	OPENBSD_4_2:1.1.1.4.0.6
	OPENBSD_4_2_BASE:1.1.1.4
	OPENBSD_4_1:1.1.1.4.0.4
	OPENBSD_4_1_BASE:1.1.1.4
	OPENBSD_4_0:1.1.1.4.0.2
	OPENBSD_4_0_BASE:1.1.1.4
	PERL_5_8_8:1.1.1.4
	OPENBSD_3_9:1.1.1.3.0.8
	OPENBSD_3_9_BASE:1.1.1.3
	OPENBSD_3_8:1.1.1.3.0.6
	OPENBSD_3_8_BASE:1.1.1.3
	OPENBSD_3_7:1.1.1.3.0.4
	OPENBSD_3_7_BASE:1.1.1.3
	PERL_5_8_6:1.1.1.3
	OPENBSD_3_6:1.1.1.3.0.2
	OPENBSD_3_6_BASE:1.1.1.3
	PERL_5_8_5:1.1.1.3
	PERL_5_8_3:1.1.1.2
	OPENBSD_3_5:1.1.1.2.0.2
	OPENBSD_3_5_BASE:1.1.1.2
	PERL_5_8_2:1.1.1.2
	OPENBSD_3_4:1.1.1.1.0.4
	OPENBSD_3_4_BASE:1.1.1.1
	OPENBSD_3_3:1.1.1.1.0.2
	OPENBSD_3_3_BASE:1.1.1.1
	PERL_5_8_0:1.1.1.1
	CPAN:1.1.1;
locks; strict;
comment	@# @;
expand	@o@;


1.2
date	2010.09.24.14.59.19;	author millert;	state dead;
branches;
next	1.1;

1.1
date	2002.10.27.22.14.54;	author millert;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	2002.10.27.22.14.54;	author millert;	state Exp;
branches;
next	1.1.1.2;

1.1.1.2
date	2003.12.03.02.43.44;	author millert;	state Exp;
branches;
next	1.1.1.3;

1.1.1.3
date	2004.08.09.17.45.59;	author millert;	state Exp;
branches;
next	1.1.1.4;

1.1.1.4
date	2006.03.28.18.48.03;	author millert;	state Exp;
branches;
next	1.1.1.5;

1.1.1.5
date	2008.09.29.17.18.17;	author millert;	state Exp;
branches;
next	1.1.1.6;

1.1.1.6
date	2009.10.12.18.11.18;	author millert;	state Exp;
branches;
next	;


desc
@@


1.2
log
@remove files no longer in perl 5.12.2 (or that have moved)
@
text
@package Encode::MIME::Header;
use strict;
# use warnings;
our $VERSION = do { my @@r = (q$Revision: 1.5 $ =~ /\d+/g); sprintf "%d."."%02d" x $#r, @@r };

use Encode qw(find_encoding encode_utf8);
use MIME::Base64;
use Carp;

my %seed = 
    (
     decode_b     => '1', # decodes 'B' encoding ?
     decode_q     => '1', # decodes 'Q' encoding ?
     encode       => 'B', # encode with 'B' or 'Q' ?
     bpl          => 75,  # bytes per line
     );

$Encode::Encoding{'MIME-Header'} =
    bless {
	%seed,
	Name => 'MIME-Header',
    } => __PACKAGE__;

$Encode::Encoding{'MIME-B'} =
    bless {
	%seed,
	decode_q  => 0,
	Name      => 'MIME-B',
    } => __PACKAGE__;

$Encode::Encoding{'MIME-Q'} =
    bless {
	%seed,
	decode_q    => 1,
	encode      => 'Q',
	Name        => 'MIME-Q',
    } => __PACKAGE__;

use base qw(Encode::Encoding);

sub needs_lines { 1 }
sub perlio_ok{ 0 };

sub decode($$;$){
    use utf8;
    my ($obj, $str, $chk) = @@_;
    # zap spaces between encoded words
    $str =~ s/\?=\s+=\?/\?==\?/gos;
    # multi-line header to single line
    $str =~ s/(:?\r|\n|\r\n)[ \t]//gos;
    $str =~
	s{
	    =\?                  # begin encoded word
		([0-9A-Za-z\-_]+) # charset (encoding)
		\?([QqBb])\?     # delimiter
		(.*?)            # Base64-encodede contents
		\?=              # end encoded word      
	    }{
		if    (uc($2) eq 'B'){
		    $obj->{decode_b} or croak qq(MIME "B" unsupported);
		    decode_b($1, $3);
		}elsif(uc($2) eq 'Q'){
		    $obj->{decode_q} or croak qq(MIME "Q" unsupported);
		    decode_q($1, $3);
		}else{
		    croak qq(MIME "$2" encoding is nonexistent!);
		}
	    }egox;
    $_[1] = '' if $chk;
    return $str;
}

sub decode_b{
    my $enc = shift;
    my $d = find_encoding($enc)	or croak(Unknown encoding "$enc");
    my $db64 = decode_base64(shift);
    return $d->decode($db64, Encode::FB_PERLQQ);
}

sub decode_q{
    my ($enc, $q) = @@_;
    my $d = find_encoding($enc) or croak(Unknown encoding "$enc");
    $q =~ s/_/ /go;
    $q =~ s/=([0-9A-Fa-f]{2})/pack("C", hex($1))/ego;
    return $d->decode($q, Encode::FB_PERLQQ);
}

my $especials = 
    join('|' =>
	 map {quotemeta(chr($_))} 
	 unpack("C*", qq{()<>@@,;:\"\'/[]?.=}));

my $re_especials = qr/$especials/o;

sub encode($$;$){
    my ($obj, $str, $chk) = @@_;
    my @@line = ();
    for my $line (split /\r|\n|\r\n/o, $str){
	my (@@word, @@subline);
        for my $word (split /($re_especials)/o, $line){
	    if ($word =~ /[^\x00-\x7f]/o){ 
		push @@word, $obj->_encode($word);
	    }else{
		push @@word, $word;
	    }
	}
	my $subline = '';
	for my $word (@@word){
	    use bytes ();
	    if (bytes::length($subline) + bytes::length($word) > $obj->{bpl}){
		push @@subline, $subline;
		$subline = '';
	    }
	    $subline .= $word;
	}
	$subline and push @@subline, $subline;
	push @@line, join("\n " => @@subline);
    }
    $_[1] = '' if $chk;
    return join("\n", @@line);
}

use constant HEAD  => '=?UTF-8?';
use constant TAIL    => '?=';
use constant SINGLE => { B => \&_encode_b, Q => \&_encode_q, };

sub _encode{
    my ($o, $str) = @@_;
    my $enc = $o->{encode};
    my $llen = ($o->{bpl} - length(HEAD) - 2 - length(TAIL));
    # to coerce a floating-point arithmetics, the following contains
    # .0 in numbers -- dankogai
    $llen *= $enc eq 'B' ? 3.0/4.0 : 1.0/3.0;
    my @@result = ();
    my $chunk = '';
    while(my $chr = substr($str, 0, 1, '')){
	use bytes ();
	if (bytes::length($chunk) + bytes::length($chr) > $llen){
	    push @@result, SINGLE->{$enc}($chunk);
	    $chunk = '';
	}
	$chunk .= $chr;
    }
    $chunk and push @@result, SINGLE->{$enc}($chunk);
    return @@result;
}

sub _encode_b{
    HEAD . 'B?' . encode_base64(encode_utf8(shift), '') . TAIL;
}

sub _encode_q{
    my $chunk = shift;
    $chunk =~ s{
		([^0-9A-Za-z])
	       }{
		   join("" => map {sprintf "=%02X", $_} unpack("C*", $1))
	       }egox;
    return HEAD . 'Q?' . $chunk . TAIL;
}

1;
__END__

=head1 NAME

Encode::MIME::Header -- MIME 'B' and 'Q' header encoding

=head1 SYNOPSIS

    use Encode qw/encode decode/; 
    $utf8   = decode('MIME-Header', $header);
    $header = encode('MIME-Header', $utf8);

=head1 ABSTRACT

This module implements RFC 2047 Mime Header Encoding.  There are 3
variant encoding names; C<MIME-Header>, C<MIME-B> and C<MIME-Q>.  The
difference is described below

              decode()          encode()
  ----------------------------------------------
  MIME-Header Both B and Q      =?UTF-8?B?....?=
  MIME-B      B only; Q croaks  =?UTF-8?B?....?=
  MIME-Q      Q only; B croaks  =?UTF-8?Q?....?=

=head1 DESCRIPTION

When you decode(=?I<encoding>?I<X>?I<ENCODED WORD>?=), I<ENCODED WORD>
is extracted and decoded for I<X> encoding (B for Base64, Q for
Quoted-Printable). Then the decoded chunk is fed to
decode(I<encoding>).  So long as I<encoding> is supported by Encode,
any source encoding is fine.

When you encode, it just encodes UTF-8 string with I<X> encoding then
quoted with =?UTF-8?I<X>?....?= .  The parts that RFC 2047 forbids to
encode are left as is and long lines are folded within 76 bytes per
line.

=head1 BUGS

It would be nice to support encoding to non-UTF8, such as =?ISO-2022-JP?
and =?ISO-8859-1?= but that makes the implementation too complicated.
These days major mail agents all support =?UTF-8? so I think it is
just good enough.

=head1 SEE ALSO

L<Encode>

RFC 2047, L<http://www.faqs.org/rfcs/rfc2047.html> and many other
locations. 

=cut
@


1.1
log
@Initial revision
@
text
@@


1.1.1.1
log
@stock perl 5.8.0 from CPAN
@
text
@@


1.1.1.2
log
@perl 5.8.2 from CPAN
@
text
@d4 3
a6 2
our $VERSION = do { my @@r = (q$Revision: 1.9 $ =~ /\d+/g); sprintf "%d."."%02d" x $#r, @@r };
use Encode qw(find_encoding encode_utf8 decode_utf8);
d75 1
a75 1
    my $d = find_encoding($enc)        or croak qq(Unknown encoding "$enc");
d77 1
a77 2
    return $d->name eq 'utf8' ?
	Encode::decode_utf8($db64) : $d->decode($db64, Encode::FB_PERLQQ);
d82 1
a82 1
    my $d = find_encoding($enc) or croak qq(Unknown encoding "$enc");
d85 1
a85 2
    return $d->name eq 'utf8' ? 
	Encode::decode_utf8($q) : $d->decode($q, Encode::FB_PERLQQ);
d93 1
a93 12
my $re_encoded_word =
    qr{
       (?:
	=\?               # begin encoded word
	(?:[0-9A-Za-z\-_]+) # charset (encoding)
	\?(?:[QqBb])\?      # delimiter
	(?:.*?)             # Base64-encodede contents
	\?=                 # end encoded word
       )
      }xo;

my $re_especials = qr{$re_encoded_word|$especials}xo;
d101 1
a101 1
	    if ($word =~ /[^\x00-\x7f]/o or $word =~ /^$re_encoded_word$/o){
d136 1
a136 1
    while(length(my $chr = substr($str, 0, 1, ''))){
d159 1
a159 1
    return decode_utf8(HEAD . 'Q?' . $chunk . TAIL);
@


1.1.1.3
log
@Import of stock perl 5.8.5
@
text
@d4 1
a4 1
our $VERSION = do { my @@r = (q$Revision: 2.0 $ =~ /\d+/g); sprintf "%d."."%02d" x $#r, @@r };
@


1.1.1.4
log
@perl 5.8.8 import
@
text
@d4 1
a4 1
our $VERSION = do { my @@r = (q$Revision: 2.1 $ =~ /\d+/g); sprintf "%d."."%02d" x $#r, @@r };
a217 4

Due to popular demand, 'MIME-Header-ISO_2022_JP' was introduced by
Makamaka.  Thre are still too many MUAs especially cellular phone
handsets which does not grok UTF-8.
@


1.1.1.5
log
@import perl 5.10.0 from CPAN
@
text
@d3 2
a4 4
use warnings;
no warnings 'redefine';

our $VERSION = do { my @@r = ( q$Revision: 2.5 $ =~ /\d+/g ); sprintf "%d." . "%02d" x $#r, @@r };
d9 7
a15 6
my %seed = (
    decode_b => '1',    # decodes 'B' encoding ?
    decode_q => '1',    # decodes 'Q' encoding ?
    encode   => 'B',    # encode with 'B' or 'Q' ?
    bpl      => 75,     # bytes per line
);
d18 19
a36 14
  bless { %seed, Name => 'MIME-Header', } => __PACKAGE__;

$Encode::Encoding{'MIME-B'} = bless {
    %seed,
    decode_q => 0,
    Name     => 'MIME-B',
} => __PACKAGE__;

$Encode::Encoding{'MIME-Q'} = bless {
    %seed,
    decode_q => 1,
    encode   => 'Q',
    Name     => 'MIME-Q',
} => __PACKAGE__;
d41 1
a41 1
sub perlio_ok   { 0 }
d43 1
a43 1
sub decode($$;$) {
d45 1
a45 2
    my ( $obj, $str, $chk ) = @@_;

a47 1

d50 18
a67 24

    1 while ( $str =~
        s/(\=\?[0-9A-Za-z\-_]+\?[Qq]\?)(.*?)\?\=\1(.*?)\?\=/$1$2$3\?\=/ )
      ;    # Concat consecutive QP encoded mime headers
           # Fixes breaking inside multi-byte characters

    $str =~ s{
        =\?                  # begin encoded word
        ([0-9A-Za-z\-_]+) # charset (encoding)
                (?:\*[A-Za-z]{1,8}(?:-[A-Za-z]{1,8})*)? # language (RFC 2231)
        \?([QqBb])\?     # delimiter
        (.*?)            # Base64-encodede contents
        \?=              # end encoded word      
        }{
        if    (uc($2) eq 'B'){
            $obj->{decode_b} or croak qq(MIME "B" unsupported);
            decode_b($1, $3);
        }elsif(uc($2) eq 'Q'){
            $obj->{decode_q} or croak qq(MIME "Q" unsupported);
            decode_q($1, $3);
        }else{
            croak qq(MIME "$2" encoding is nonexistent!);
        }
        }egox;
d72 3
a74 3
sub decode_b {
    my $enc  = shift;
    my $d    = find_encoding($enc) or croak qq(Unknown encoding "$enc");
d76 2
a77 3
    return $d->name eq 'utf8'
      ? Encode::decode_utf8($db64)
      : $d->decode( $db64, Encode::FB_PERLQQ );
d80 2
a81 2
sub decode_q {
    my ( $enc, $q ) = @@_;
d85 2
a86 3
    return $d->name eq 'utf8'
      ? Encode::decode_utf8($q)
      : $d->decode( $q, Encode::FB_PERLQQ );
d89 4
a92 3
my $especials =
  join( '|' => map { quotemeta( chr($_) ) }
      unpack( "C*", qq{()<>@@,;:\"\'/[]?.=} ) );
d94 2
a95 1
my $re_encoded_word = qr{
d97 5
a101 6
    =\?               # begin encoded word
    (?:[0-9A-Za-z\-_]+) # charset (encoding)
        (?:\*\w+(?:-\w+)*)? # language (RFC 2231)
    \?(?:[QqBb])\?      # delimiter
    (?:.*?)             # Base64-encodede contents
    \?=                 # end encoded word
d107 2
a108 2
sub encode($$;$) {
    my ( $obj, $str, $chk ) = @@_;
d110 20
a129 25
    for my $line ( split /\r|\n|\r\n/o, $str ) {
        my ( @@word, @@subline );
        for my $word ( split /($re_especials)/o, $line ) {
            if (   $word =~ /[^\x00-\x7f]/o
                or $word =~ /^$re_encoded_word$/o )
            {
                push @@word, $obj->_encode($word);
            }
            else {
                push @@word, $word;
            }
        }
        my $subline = '';
        for my $word (@@word) {
            use bytes ();
            if ( bytes::length($subline) + bytes::length($word) >
                $obj->{bpl} )
            {
                push @@subline, $subline;
                $subline = '';
            }
            $subline .= $word;
        }
        $subline and push @@subline, $subline;
        push @@line, join( "\n " => @@subline );
d132 1
a132 1
    return join( "\n", @@line );
d135 2
a136 2
use constant HEAD   => '=?UTF-8?';
use constant TAIL   => '?=';
d139 4
a142 5
sub _encode {
    my ( $o, $str ) = @@_;
    my $enc  = $o->{encode};
    my $llen = ( $o->{bpl} - length(HEAD) - 2 - length(TAIL) );

d145 1
a145 1
    $llen *= $enc eq 'B' ? 3.0 / 4.0 : 1.0 / 3.0;
d147 8
a154 8
    my $chunk  = '';
    while ( length( my $chr = substr( $str, 0, 1, '' ) ) ) {
        use bytes ();
        if ( bytes::length($chunk) + bytes::length($chr) > $llen ) {
            push @@result, SINGLE->{$enc}($chunk);
            $chunk = '';
        }
        $chunk .= $chr;
d160 2
a161 2
sub _encode_b {
    HEAD . 'B?' . encode_base64( encode_utf8(shift), '' ) . TAIL;
d164 1
a164 1
sub _encode_q {
a165 1
    $chunk = encode_utf8($chunk);
d167 5
a171 5
        ([^0-9A-Za-z])
           }{
           join("" => map {sprintf "=%02X", $_} unpack("C*", $1))
           }egox;
    return HEAD . 'Q?' . $chunk . TAIL;
@


1.1.1.6
log
@import perl 5.10.1
@
text
@d6 1
a6 1
our $VERSION = do { my @@r = ( q$Revision: 2.11 $ =~ /\d+/g ); sprintf "%d." . "%02d" x $#r, @@r };
d47 1
a47 1
    $str =~ s/(?:\r\n|[\r\n])[ \t]//gos;
d50 1
a50 1
        s/(=\?[-0-9A-Za-z_]+\?[Qq]\?)(.*?)\?=\1(.*?\?=)/$1$2$3/ )
d55 3
a57 3
        =\?              # begin encoded word
        ([-0-9A-Za-z_]+) # charset (encoding)
        (?:\*[A-Za-z]{1,8}(?:-[A-Za-z]{1,8})*)? # language (RFC 2231)
d60 3
a62 3
        \?=              # end encoded word
    }{
        if      (uc($2) eq 'B'){
d64 2
a65 2
            decode_b($1, $3, $chk);
        } elsif (uc($2) eq 'Q'){
d67 2
a68 2
            decode_q($1, $3, $chk);
        } else {
d71 2
a72 2
    }egox;
    $_[1] = $str if $chk;
a79 1
    my $chk  = shift;
d82 1
a82 1
      : $d->decode( $db64, $chk || Encode::FB_PERLQQ );
d86 1
a86 1
    my ( $enc, $q, $chk ) = @@_;
d92 1
a92 1
      : $d->decode( $q, $chk || Encode::FB_PERLQQ );
d97 1
a97 1
      unpack( "C*", qq{()<>@@,;:"'/[]?.=} ) );
d100 9
a108 7
    =\?                # begin encoded word
    (?:[-0-9A-Za-z_]+) # charset (encoding)
    (?:\*[A-Za-z]{1,8}(?:-[A-Za-z]{1,8})*)? # language (RFC 2231)
    \?(?:[QqBb])\?     # delimiter
    (?:.*?)            # Base64-encodede contents
    \?=                # end encoded word
}xo;
d115 1
a115 1
    for my $line ( split /\r\n|[\r\n]/o, $str ) {
d167 1
a167 1
    length($chunk) and push @@result, SINGLE->{$enc}($chunk);
d179 4
a182 4
	   ([^0-9A-Za-z])
       }{
            join("" => map {sprintf "=%02X", $_} unpack("C*", $1))
       }egox;
d195 1
a195 1
    use Encode qw/encode decode/;
d240 1
a240 1
locations.
@


