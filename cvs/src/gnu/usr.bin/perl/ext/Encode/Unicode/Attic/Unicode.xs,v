head	1.2;
access;
symbols
	OPENBSD_4_8:1.1.1.8.0.4
	OPENBSD_4_8_BASE:1.1.1.8
	OPENBSD_4_7:1.1.1.8.0.2
	OPENBSD_4_7_BASE:1.1.1.8
	PERL_5_10_1:1.1.1.8
	OPENBSD_4_6:1.1.1.7.0.6
	OPENBSD_4_6_BASE:1.1.1.7
	OPENBSD_4_5:1.1.1.7.0.2
	OPENBSD_4_5_BASE:1.1.1.7
	PERL_5_10_0:1.1.1.7
	OPENBSD_4_4:1.1.1.6.0.10
	OPENBSD_4_4_BASE:1.1.1.6
	OPENBSD_4_3:1.1.1.6.0.8
	OPENBSD_4_3_BASE:1.1.1.6
	OPENBSD_4_2:1.1.1.6.0.6
	OPENBSD_4_2_BASE:1.1.1.6
	OPENBSD_4_1:1.1.1.6.0.4
	OPENBSD_4_1_BASE:1.1.1.6
	OPENBSD_4_0:1.1.1.6.0.2
	OPENBSD_4_0_BASE:1.1.1.6
	PERL_5_8_8:1.1.1.6
	OPENBSD_3_9:1.1.1.5.0.6
	OPENBSD_3_9_BASE:1.1.1.5
	OPENBSD_3_8:1.1.1.5.0.4
	OPENBSD_3_8_BASE:1.1.1.5
	OPENBSD_3_7:1.1.1.5.0.2
	OPENBSD_3_7_BASE:1.1.1.5
	PERL_5_8_6:1.1.1.5
	OPENBSD_3_6:1.1.1.4.0.2
	OPENBSD_3_6_BASE:1.1.1.4
	PERL_5_8_5:1.1.1.4
	PERL_5_8_3:1.1.1.3
	OPENBSD_3_5:1.1.1.2.0.2
	OPENBSD_3_5_BASE:1.1.1.2
	PERL_5_8_2:1.1.1.2
	OPENBSD_3_4:1.1.1.1.0.4
	OPENBSD_3_4_BASE:1.1.1.1
	OPENBSD_3_3:1.1.1.1.0.2
	OPENBSD_3_3_BASE:1.1.1.1
	PERL_5_8_0:1.1.1.1
	CPAN:1.1.1;
locks; strict;
comment	@# @;
expand	@o@;


1.2
date	2010.09.24.14.59.19;	author millert;	state dead;
branches;
next	1.1;

1.1
date	2002.10.27.22.14.54;	author millert;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	2002.10.27.22.14.54;	author millert;	state Exp;
branches;
next	1.1.1.2;

1.1.1.2
date	2003.12.03.02.43.49;	author millert;	state Exp;
branches;
next	1.1.1.3;

1.1.1.3
date	2004.04.07.21.13.05;	author millert;	state Exp;
branches;
next	1.1.1.4;

1.1.1.4
date	2004.08.09.17.45.59;	author millert;	state Exp;
branches;
next	1.1.1.5;

1.1.1.5
date	2005.01.15.21.16.55;	author millert;	state Exp;
branches;
next	1.1.1.6;

1.1.1.6
date	2006.03.28.18.48.14;	author millert;	state Exp;
branches;
next	1.1.1.7;

1.1.1.7
date	2008.09.29.17.18.17;	author millert;	state Exp;
branches;
next	1.1.1.8;

1.1.1.8
date	2009.10.12.18.11.17;	author millert;	state Exp;
branches;
next	;


desc
@@


1.2
log
@remove files no longer in perl 5.12.2 (or that have moved)
@
text
@/*
 $Id: Unicode.xs,v 1.5 2002/05/20 15:25:44 dankogai Exp $
 */

#define PERL_NO_GET_CONTEXT
#include "EXTERN.h"
#include "perl.h"
#include "XSUB.h"
#define U8 U8
#include "../Encode/encode.h"

#define FBCHAR			0xFFFd
#define BOM_BE			0xFeFF
#define BOM16LE			0xFFFe
#define BOM32LE			0xFFFe0000
#define issurrogate(x)		(0xD800 <= (x)  && (x) <= 0xDFFF )
#define isHiSurrogate(x)	(0xD800 <= (x)  && (x) <  0xDC00 )
#define isLoSurrogate(x)	(0xDC00 <= (x)  && (x) <= 0xDFFF )
#define invalid_ucs2(x)         ( issurrogate(x) || 0xFFFF < (x) )

static UV
enc_unpack(pTHX_ U8 **sp,U8 *e,STRLEN size,U8 endian)
{
    U8 *s = *sp;
    UV v = 0;
    if (s+size > e) {
	croak("Partial character %c",(char) endian);
    }
    switch(endian) {
    case 'N':
	v = *s++;
	v = (v << 8) | *s++;
    case 'n':
	v = (v << 8) | *s++;
	v = (v << 8) | *s++;
	break;
    case 'V':
    case 'v':
	v |= *s++;
	v |= (*s++ << 8);
	if (endian == 'v')
	    break;
	v |= (*s++ << 16);
	v |= (*s++ << 24);
	break;
    default:
	croak("Unknown endian %c",(char) endian);
	break;
    }
    *sp = s;
    return v;
}

void
enc_pack(pTHX_ SV *result,STRLEN size,U8 endian,UV value)
{
    U8 *d = (U8 *)SvGROW(result,SvCUR(result)+size);
    switch(endian) {
    case 'v':
    case 'V':
	d += SvCUR(result);
	SvCUR_set(result,SvCUR(result)+size);
	while (size--) {
	    *d++ = (U8)(value & 0xFF);
	    value >>= 8;
	}
	break;
    case 'n':
    case 'N':
	SvCUR_set(result,SvCUR(result)+size);
	d += SvCUR(result);
	while (size--) {
	    *--d = (U8)(value & 0xFF);
	    value >>= 8;
	}
	break;
    default:
	croak("Unknown endian %c",(char) endian);
	break;
    }
}

MODULE = Encode::Unicode PACKAGE = Encode::Unicode

PROTOTYPES: DISABLE

void
decode_xs(obj, str, check = 0)
SV *	obj
SV *	str
IV	check
CODE:
{
    int size    = SvIV(*hv_fetch((HV *)SvRV(obj),"size",4,0));
    U8 endian   = *((U8 *)SvPV_nolen(*hv_fetch((HV *)SvRV(obj),"endian",6,0)));
    int ucs2    = SvTRUE(*hv_fetch((HV *)SvRV(obj),"ucs2",4,0));
    SV *result = newSVpvn("",0);
    STRLEN ulen;
    U8 *s = (U8 *)SvPVbyte(str,ulen);
    U8 *e = (U8 *)SvEND(str);
    ST(0) = sv_2mortal(result);
    SvUTF8_on(result);

    if (!endian && s+size <= e) {
	UV bom;
	endian = (size == 4) ? 'N' : 'n';
	bom = enc_unpack(aTHX_ &s,e,size,endian);
        if (bom != BOM_BE) {
	    if (bom == BOM16LE) {
		endian = 'v';
	    }
	    else if (bom == BOM32LE) {
		endian = 'V';
	    }
	    else {
		croak("%s:Unregognised BOM %"UVxf,
                      SvPV_nolen(*hv_fetch((HV *)SvRV(obj),"Name",4,0)),
		      bom);
	    }
	}
#if 0
	/* Update endian for this sequence */
	hv_store((HV *)SvRV(obj),"endian",6,newSVpv((char *)&endian,1),0);
#endif
    }
    while (s < e && s+size <= e) {
	UV ord = enc_unpack(aTHX_ &s,e,size,endian);
	U8 *d;
	if (size != 4 && invalid_ucs2(ord)) {
	    if (ucs2) {
		if (check) {
		    croak("%s:no surrogates allowed %"UVxf,
			  SvPV_nolen(*hv_fetch((HV *)SvRV(obj),"Name",4,0)),
			  ord);
		}
		if (s+size <= e) {
                    /* skip the next one as well */
		    enc_unpack(aTHX_ &s,e,size,endian);
		}
		ord = FBCHAR;
	    }
	    else {
		UV lo;
		if (!isHiSurrogate(ord)) {
		    croak("%s:Malformed HI surrogate %"UVxf,
			  SvPV_nolen(*hv_fetch((HV *)SvRV(obj),"Name",4,0)),
			  ord);
		}
		if (s+size > e) {
		    /* Partial character */
		    s -= size;   /* back up to 1st half */
		    break;       /* And exit loop */
		}
		lo = enc_unpack(aTHX_ &s,e,size,endian);
		if (!isLoSurrogate(lo)){
		    croak("%s:Malformed LO surrogate %"UVxf,
			  SvPV_nolen(*hv_fetch((HV *)SvRV(obj),"Name",4,0)),
			  ord);
		}
		ord = 0x10000 + ((ord - 0xD800) << 10) + (lo - 0xDC00);
	    }
	}
	d = (U8 *) SvGROW(result,SvCUR(result)+UTF8_MAXLEN+1);
	d = uvuni_to_utf8_flags(d+SvCUR(result), ord, 0);
	SvCUR_set(result,d - (U8 *)SvPVX(result));
    }
    if (s < e) {
	    Perl_warner(aTHX_ packWARN(WARN_UTF8),"%s:Partial character",
			SvPV_nolen(*hv_fetch((HV *)SvRV(obj),"Name",4,0)));
    }
    if (check && !(check & ENCODE_LEAVE_SRC)){
	if (s < e) {
	    Move(s,SvPVX(str),e-s,U8);
	    SvCUR_set(str,(e-s));
	}
	else {
	    SvCUR_set(str,0);
	}
	*SvEND(str) = '\0';
    }
    XSRETURN(1);
}

void
encode_xs(obj, utf8, check = 0)
SV *	obj
SV *	utf8
IV	check
CODE:
{
    int size   = SvIV(*hv_fetch((HV *)SvRV(obj),"size",4,0));
    U8 endian = *((U8 *)SvPV_nolen(*hv_fetch((HV *)SvRV(obj),"endian",6,0)));
    int ucs2   = SvTRUE(*hv_fetch((HV *)SvRV(obj),"ucs2",4,0));
    SV *result = newSVpvn("",0);
    STRLEN ulen;
    U8 *s = (U8 *)SvPVutf8(utf8,ulen);
    U8 *e = (U8 *)SvEND(utf8);
    ST(0) = sv_2mortal(result);
    if (!endian) {
	endian = (size == 4) ? 'N' : 'n';
	enc_pack(aTHX_ result,size,endian,BOM_BE);
#if 0
	/* Update endian for this sequence */
	hv_store((HV *)SvRV(obj),"endian",6,newSVpv((char *)&endian,1),0);
#endif
    }
    while (s < e && s+UTF8SKIP(s) <= e) {
	STRLEN len;
	UV ord = utf8n_to_uvuni(s, e-s, &len, 0);
        s += len;
	if (size != 4 && invalid_ucs2(ord)) {
	    if (!issurrogate(ord)){
		if (ucs2) {
		    if (check) {
			croak("%s:code point \"\\x{%"UVxf"}\" too high",
			      SvPV_nolen(
				  *hv_fetch((HV *)SvRV(obj),"Name",4,0))
			      ,ord);
		    }
		    enc_pack(aTHX_ result,size,endian,FBCHAR);
		}else{
		    UV hi = ((ord - 0x10000) >> 10)   + 0xD800;
		    UV lo = ((ord - 0x10000) & 0x3FF) + 0xDC00;
		    enc_pack(aTHX_ result,size,endian,hi);
		    enc_pack(aTHX_ result,size,endian,lo);
		}
	    }
	    else {
		/* not supposed to happen */
		enc_pack(aTHX_ result,size,endian,FBCHAR);
	    }
	}
	else {
	    enc_pack(aTHX_ result,size,endian,ord);
	}
    }
    if (s < e) {
	Perl_warner(aTHX_ packWARN(WARN_UTF8),"%s:Partial character",
		    SvPV_nolen(*hv_fetch((HV *)SvRV(obj),"Name",4,0)));
    }
    if (check && !(check & ENCODE_LEAVE_SRC)){
	if (s < e) {
	    Move(s,SvPVX(utf8),e-s,U8);
	    SvCUR_set(utf8,(e-s));
	}
	else {
	    SvCUR_set(utf8,0);
	}
	*SvEND(utf8) = '\0';
    }
    XSRETURN(1);
}

@


1.1
log
@Initial revision
@
text
@@


1.1.1.1
log
@stock perl 5.8.0 from CPAN
@
text
@@


1.1.1.2
log
@perl 5.8.2 from CPAN
@
text
@d2 1
a2 1
 $Id: Unicode.xs,v 1.8 2003/06/18 09:29:02 dankogai Exp $
a86 3
#define attr(k, l)  (hv_exists((HV *)SvRV(obj),k,l) ? \
    *hv_fetch((HV *)SvRV(obj),k,l,0) : &PL_sv_undef)

d94 4
a97 5
    U8 endian   = *((U8 *)SvPV_nolen(attr("endian", 6)));
    int size    =   SvIV(attr("size",   4));
    int ucs2    = SvTRUE(attr("ucs2",   4));
    int clone   = SvTRUE(attr("clone",  5));
    SV *result  = newSVpvn("",0);
d116 2
a117 2
		croak("%"SVf":Unrecognised BOM %"UVxf,
                      *hv_fetch((HV *)SvRV(obj),"Name",4,0),
d121 3
a123 5
#if 1
	/* Update endian for next sequence */
	if (clone) {
	    hv_store((HV *)SvRV(obj),"endian",6,newSVpv((char *)&endian,1),0);
	}
d132 2
a133 2
		    croak("%"SVf":no surrogates allowed %"UVxf,
			  *hv_fetch((HV *)SvRV(obj),"Name",4,0),
d145 2
a146 2
		    croak("%"SVf":Malformed HI surrogate %"UVxf,
			  *hv_fetch((HV *)SvRV(obj),"Name",4,0),
d156 2
a157 2
		    croak("%"SVf":Malformed LO surrogate %"UVxf,
			  *hv_fetch((HV *)SvRV(obj),"Name",4,0),
d168 2
a169 5
	/* unlikely to happen because it's fixed-length -- dankogai */
	if (check & ENCODE_WARN_ON_ERR){
	    Perl_warner(aTHX_ packWARN(WARN_UTF8),"%"SVf":Partial character",
			*hv_fetch((HV *)SvRV(obj),"Name",4,0));
	}
d191 4
a194 5
    U8 endian   = *((U8 *)SvPV_nolen(attr("endian", 6)));
    int size    =   SvIV(attr("size",   4));
    int ucs2    = SvTRUE(attr("ucs2",   4));
    int clone   = SvTRUE(attr("clone",  5));
    SV *result  = newSVpvn("",0);
d202 3
a204 5
#if 1
	/* Update endian for next sequence */
	if (clone){
	    hv_store((HV *)SvRV(obj),"endian",6,newSVpv((char *)&endian,1),0);
	}
d215 4
a218 2
			croak("%"SVf":code point \"\\x{%"UVxf"}\" too high",
				  *hv_fetch((HV *)SvRV(obj),"Name",4,0),ord);
d238 2
a239 10
	/* UTF-8 partial char happens often on PerlIO.
	   Since this is okay and normal, we do not warn.
	   But this is critical when you choose to LEAVE_SRC
	   in which case we die */
	if (check & (ENCODE_DIE_ON_ERR|ENCODE_LEAVE_SRC)){
	    Perl_croak(aTHX_ "%"SVf":partial character is not allowed "
		       "when CHECK = 0x%" UVuf,
		       *hv_fetch((HV *)SvRV(obj),"Name",4,0), check);
	}
	
d250 1
a250 1
    } 
@


1.1.1.3
log
@perl 5.8.3 from CPAN
@
text
@d2 1
a2 1
 $Id: Unicode.xs,v 1.9 2003/12/29 02:47:16 dankogai Exp dankogai $
d57 1
a57 1
    U8 *d = (U8 *)SvGROW(result,SvCUR(result)+size+1);
@


1.1.1.4
log
@Import of stock perl 5.8.5
@
text
@d2 1
a2 1
 $Id: Unicode.xs,v 2.0 2004/05/16 20:55:16 dankogai Exp $
@


1.1.1.5
log
@perl 5.8.6 from CPAN
@
text
@d2 1
a2 1
 $Id: Unicode.xs,v 2.1 2004/10/24 13:00:29 dankogai Exp dankogai $
d100 1
a100 1
    int renewed = SvTRUE(attr("renewed",  7));
d127 1
a127 1
	if (renewed) {
d203 1
a203 1
    int renewed = SvTRUE(attr("renewed",  7));
d214 1
a214 1
	if (renewed){
@


1.1.1.6
log
@perl 5.8.8 import
@
text
@d2 1
a2 1
 $Id: Unicode.xs,v 2.1 2004/10/24 13:00:29 dankogai Exp $
@


1.1.1.7
log
@import perl 5.10.0 from CPAN
@
text
@d2 1
a2 1
 $Id: Unicode.xs,v 2.3 2006/05/03 18:24:10 dankogai Exp $
d27 1
a27 1
    croak("Partial character %c",(char) endian);
d31 2
a32 2
    v = *s++;
    v = (v << 8) | *s++;
d34 3
a36 3
    v = (v << 8) | *s++;
    v = (v << 8) | *s++;
    break;
d39 7
a45 7
    v |= *s++;
    v |= (*s++ << 8);
    if (endian == 'v')
        break;
    v |= (*s++ << 16);
    v |= (*s++ << 24);
    break;
d47 2
a48 2
    croak("Unknown endian %c",(char) endian);
    break;
d61 7
a67 7
    d += SvCUR(result);
    SvCUR_set(result,SvCUR(result)+size);
    while (size--) {
        *d++ = (U8)(value & 0xFF);
        value >>= 8;
    }
    break;
d70 7
a76 7
    SvCUR_set(result,SvCUR(result)+size);
    d += SvCUR(result);
    while (size--) {
        *--d = (U8)(value & 0xFF);
        value >>= 8;
    }
    break;
d78 2
a79 2
    croak("Unknown endian %c",(char) endian);
    break;
d109 3
a111 3
    UV bom;
    endian = (size == 4) ? 'N' : 'n';
    bom = enc_unpack(aTHX_ &s,e,size,endian);
d113 8
a120 8
        if (bom == BOM16LE) {
        endian = 'v';
        }
        else if (bom == BOM32LE) {
        endian = 'V';
        }
        else {
        croak("%"SVf":Unrecognised BOM %"UVxf,
d122 3
a124 3
              bom);
        }
    }
d126 4
a129 4
    /* Update endian for next sequence */
    if (renewed) {
        hv_store((HV *)SvRV(obj),"endian",6,newSVpv((char *)&endian,1),0);
    }
d133 10
a142 10
    UV ord = enc_unpack(aTHX_ &s,e,size,endian);
    U8 *d;
    if (issurrogate(ord)) {
        if (ucs2 || size == 4) {
        if (check) {
            croak("%"SVf":no surrogates allowed %"UVxf,
              *hv_fetch((HV *)SvRV(obj),"Name",4,0),
              ord);
        }
        if (s+size <= e) {
d144 28
a171 53
            enc_unpack(aTHX_ &s,e,size,endian);
        }
        ord = FBCHAR;
        }
        else {
        UV lo;
        if (!isHiSurrogate(ord)) {
            if (check) {
            croak("%"SVf":Malformed HI surrogate %"UVxf,
                  *hv_fetch((HV *)SvRV(obj),"Name",4,0),
                  ord);
            }
            else {
            ord = FBCHAR;
            }
        }
            else {
            if (s+size > e) {
            /* Partial character */
            s -= size;   /* back up to 1st half */
            break;       /* And exit loop */
            }
            lo = enc_unpack(aTHX_ &s,e,size,endian);
            if (!isLoSurrogate(lo)){
            if (check) {
                croak("%"SVf":Malformed LO surrogate %"UVxf,
                  *hv_fetch((HV *)SvRV(obj),"Name",4,0),
                  ord);
            }
            else {
                ord = FBCHAR;
            }
            }
            else {
            ord = 0x10000 + ((ord - 0xD800) << 10) + (lo - 0xDC00);
            }
        }
        }
    }

    if ((ord & 0xFFFE) == 0xFFFE || (ord >= 0xFDD0 && ord <= 0xFDEF)) {
        if (check) {
        croak("%"SVf":Unicode character %"UVxf" is illegal",
              *hv_fetch((HV *)SvRV(obj),"Name",4,0),
              ord);
        } else {
        ord = FBCHAR;
        }
    }

    d = (U8 *) SvGROW(result,SvCUR(result)+UTF8_MAXLEN+1);
    d = uvuni_to_utf8_flags(d+SvCUR(result), ord, 0);
    SvCUR_set(result,d - (U8 *)SvPVX(result));
d174 5
a178 5
    /* unlikely to happen because it's fixed-length -- dankogai */
    if (check & ENCODE_WARN_ON_ERR){
        Perl_warner(aTHX_ packWARN(WARN_UTF8),"%"SVf":Partial character",
            *hv_fetch((HV *)SvRV(obj),"Name",4,0));
    }
d181 8
a188 8
    if (s < e) {
        Move(s,SvPVX(str),e-s,U8);
        SvCUR_set(str,(e-s));
    }
    else {
        SvCUR_set(str,0);
    }
    *SvEND(str) = '\0';
d210 2
a211 2
    endian = (size == 4) ? 'N' : 'n';
    enc_pack(aTHX_ result,size,endian,BOM_BE);
d213 4
a216 4
    /* Update endian for next sequence */
    if (renewed){
        hv_store((HV *)SvRV(obj),"endian",6,newSVpv((char *)&endian,1),0);
    }
d220 2
a221 2
    STRLEN len;
    UV ord = utf8n_to_uvuni(s, e-s, &len, 0);
d223 23
a245 23
    if (size != 4 && invalid_ucs2(ord)) {
        if (!issurrogate(ord)){
        if (ucs2) {
            if (check) {
            croak("%"SVf":code point \"\\x{%"UVxf"}\" too high",
                  *hv_fetch((HV *)SvRV(obj),"Name",4,0),ord);
            }
            enc_pack(aTHX_ result,size,endian,FBCHAR);
        }else{
            UV hi = ((ord - 0x10000) >> 10)   + 0xD800;
            UV lo = ((ord - 0x10000) & 0x3FF) + 0xDC00;
            enc_pack(aTHX_ result,size,endian,hi);
            enc_pack(aTHX_ result,size,endian,lo);
        }
        }
        else {
        /* not supposed to happen */
        enc_pack(aTHX_ result,size,endian,FBCHAR);
        }
    }
    else {
        enc_pack(aTHX_ result,size,endian,ord);
    }
d248 10
a257 10
    /* UTF-8 partial char happens often on PerlIO.
       Since this is okay and normal, we do not warn.
       But this is critical when you choose to LEAVE_SRC
       in which case we die */
    if (check & (ENCODE_DIE_ON_ERR|ENCODE_LEAVE_SRC)){
        Perl_croak(aTHX_ "%"SVf":partial character is not allowed "
               "when CHECK = 0x%" UVuf,
               *hv_fetch((HV *)SvRV(obj),"Name",4,0), check);
    }
    
d260 8
a267 8
    if (s < e) {
        Move(s,SvPVX(utf8),e-s,U8);
        SvCUR_set(utf8,(e-s));
    }
    else {
        SvCUR_set(utf8,0);
    }
    *SvEND(utf8) = '\0';
@


1.1.1.8
log
@import perl 5.10.1
@
text
@d2 1
a2 1
 $Id: Unicode.xs,v 2.5 2009/02/01 13:14:41 dankogai Exp $
a20 29
#define PERLIO_BUFSIZ 1024 /* XXX value comes from PerlIOEncode_get_base */

/* Avoid wasting too much space in the result buffer */
/* static void */
/* shrink_buffer(SV *result) */
/* { */
/*     if (SvLEN(result) > 42 + SvCUR(result)) { */
/* 	char *buf; */
/* 	STRLEN len = 1 + SvCUR(result); /\* include the NUL byte *\/ */
/* 	New(0, buf, len, char); */
/* 	Copy(SvPVX(result), buf, len, char); */
/* 	Safefree(SvPVX(result)); */
/* 	SvPV_set(result, buf); */
/* 	SvLEN_set(result, len); */
/*     } */
/* } */

#define shrink_buffer(result) { \
    if (SvLEN(result) > 42 + SvCUR(result)) { \
	char *newpv; \
	STRLEN newlen = 1 + SvCUR(result); /* include the NUL byte */ \
	New(0, newpv, newlen, char); \
	Copy(SvPVX(result), newpv, newlen, char); \
	Safefree(SvPVX(result)); \
	SvPV_set(result, newpv); \
	SvLEN_set(result, newlen); \
    } \
}

d22 1
a22 1
enc_unpack(pTHX_ U8 **sp, U8 *e, STRLEN size, U8 endian)
d27 1
a27 1
	croak("Partial character %c",(char) endian);
d31 2
a32 2
	v = *s++;
	v = (v << 8) | *s++;
d34 3
a36 3
	v = (v << 8) | *s++;
	v = (v << 8) | *s++;
	break;
d39 7
a45 7
	v |= *s++;
	v |= (*s++ << 8);
	if (endian == 'v')
	    break;
	v |= (*s++ << 16);
	v |= (*s++ << 24);
	break;
d47 2
a48 2
	croak("Unknown endian %c",(char) endian);
	break;
d55 1
a55 1
enc_pack(pTHX_ SV *result, STRLEN size, U8 endian, UV value)
d57 1
a57 2
    U8 *d = (U8 *) SvPV_nolen(result);

d61 7
a67 7
	d += SvCUR(result);
	SvCUR_set(result,SvCUR(result)+size);
	while (size--) {
	    *d++ = (U8)(value & 0xFF);
	    value >>= 8;
	}
	break;
d70 7
a76 7
	SvCUR_set(result,SvCUR(result)+size);
	d += SvCUR(result);
	while (size--) {
	    *--d = (U8)(value & 0xFF);
	    value >>= 8;
	}
	break;
d78 2
a79 2
	croak("Unknown endian %c",(char) endian);
	break;
d97 5
a101 5
    U8 endian    = *((U8 *)SvPV_nolen(attr("endian", 6)));
    int size     = SvIV(attr("size", 4));
    int ucs2     = -1; /* only needed in the event of surrogate pairs */
    SV *result   = newSVpvn("",0);
    STRLEN usize = (size > 0 ? size : 1); /* protect against rogue size<=0 */
a102 2
    STRLEN resultbuflen;
    U8 *resultbuf;
a104 6
    /* Optimise for the common case of being called from PerlIOEncode_fill()
       with a standard length buffer. In this case the result SV's buffer is
       only used temporarily, so we can afford to allocate the maximum needed
       and not care about unused space. */
    const bool temp_result = (ulen == PERLIO_BUFSIZ);

d109 16
a124 16
	UV bom;
	endian = (size == 4) ? 'N' : 'n';
	bom = enc_unpack(aTHX_ &s,e,size,endian);
	if (bom != BOM_BE) {
	    if (bom == BOM16LE) {
		endian = 'v';
	    }
	    else if (bom == BOM32LE) {
		endian = 'V';
	    }
	    else {
		croak("%"SVf":Unrecognised BOM %"UVxf,
		      *hv_fetch((HV *)SvRV(obj),"Name",4,0),
		      bom);
	    }
	}
d126 4
a129 4
	/* Update endian for next sequence */
	if (SvTRUE(attr("renewed", 7))) {
	    hv_store((HV *)SvRV(obj),"endian",6,newSVpv((char *)&endian,1),0);
	}
d132 71
a202 6

    if (temp_result) {
	resultbuflen = 1 + ulen/usize * UTF8_MAXLEN;
    } else {
	/* Preallocate the buffer to the minimum possible space required. */
	resultbuflen = ulen/usize + UTF8_MAXLEN + 1;
a203 83
    resultbuf = (U8 *) SvGROW(result, resultbuflen);

    while (s < e && s+size <= e) {
	UV ord = enc_unpack(aTHX_ &s,e,size,endian);
	U8 *d;
	if (issurrogate(ord)) {
	    if (ucs2 == -1) {
		ucs2 = SvTRUE(attr("ucs2", 4));
	    }
	    if (ucs2 || size == 4) {
		if (check) {
		    croak("%"SVf":no surrogates allowed %"UVxf,
			  *hv_fetch((HV *)SvRV(obj),"Name",4,0),
			  ord);
		}
		if (s+size <= e) {
		    /* skip the next one as well */
		    enc_unpack(aTHX_ &s,e,size,endian);
		}
		ord = FBCHAR;
	    }
	    else {
		UV lo;
		if (!isHiSurrogate(ord)) {
		    if (check) {
			croak("%"SVf":Malformed HI surrogate %"UVxf,
			      *hv_fetch((HV *)SvRV(obj),"Name",4,0),
			      ord);
		    }
		    else {
			ord = FBCHAR;
		    }
		}
		else {
		    if (s+size > e) {
			/* Partial character */
			s -= size;   /* back up to 1st half */
			break;       /* And exit loop */
		    }
		    lo = enc_unpack(aTHX_ &s,e,size,endian);
		    if (!isLoSurrogate(lo)) {
			if (check) {
			    croak("%"SVf":Malformed LO surrogate %"UVxf,
				  *hv_fetch((HV *)SvRV(obj),"Name",4,0),
				  ord);
			}
			else {
			    ord = FBCHAR;
			}
		    }
		    else {
			ord = 0x10000 + ((ord - 0xD800) << 10) + (lo - 0xDC00);
		    }
		}
	    }
	}

	if ((ord & 0xFFFE) == 0xFFFE || (ord >= 0xFDD0 && ord <= 0xFDEF)) {
	    if (check) {
		croak("%"SVf":Unicode character %"UVxf" is illegal",
		      *hv_fetch((HV *)SvRV(obj),"Name",4,0),
		      ord);
	    } else {
		ord = FBCHAR;
	    }
	}

	if (resultbuflen < SvCUR(result) + UTF8_MAXLEN + 1) {
	    /* Do not allocate >8Mb more than the minimum needed.
	       This prevents allocating too much in the rogue case of a large
	       input consisting initially of long sequence uft8-byte unicode
	       chars followed by single utf8-byte chars. */
	    STRLEN remaining = (e - s)/usize;
	    STRLEN max_alloc = remaining + (8*1024*1024);
	    STRLEN est_alloc = remaining * UTF8_MAXLEN;
	    STRLEN newlen = SvLEN(result) + /* min(max_alloc, est_alloc) */
		(est_alloc > max_alloc ? max_alloc : est_alloc);
	    resultbuf = (U8 *) SvGROW(result, newlen);
	    resultbuflen = SvLEN(result);
	}

	d = uvuni_to_utf8_flags(resultbuf+SvCUR(result), ord, 0);
	SvCUR_set(result, d - (U8 *)SvPVX(result));
d205 1
a205 1

d207 7
a213 15
	/* unlikely to happen because it's fixed-length -- dankogai */
	if (check & ENCODE_WARN_ON_ERR) {
	    Perl_warner(aTHX_ packWARN(WARN_UTF8),"%"SVf":Partial character",
			*hv_fetch((HV *)SvRV(obj),"Name",4,0));
	}
    }
    if (check && !(check & ENCODE_LEAVE_SRC)) {
	if (s < e) {
	    Move(s,SvPVX(str),e-s,U8);
	    SvCUR_set(str,(e-s));
	}
	else {
	    SvCUR_set(str,0);
	}
	*SvEND(str) = '\0';
a214 4

    if (!temp_result)
	shrink_buffer(result);

d225 5
a229 5
    U8 endian = *((U8 *)SvPV_nolen(attr("endian", 6)));
    const int size = SvIV(attr("size", 4));
    int ucs2 = -1; /* only needed if there is invalid_ucs2 input */
    const STRLEN usize = (size > 0 ? size : 1);
    SV *result = newSVpvn("", 0);
d231 2
a232 8
    U8 *s = (U8 *) SvPVutf8(utf8, ulen);
    const U8 *e = (U8 *) SvEND(utf8);
    /* Optimise for the common case of being called from PerlIOEncode_flush()
       with a standard length buffer. In this case the result SV's buffer is
       only used temporarily, so we can afford to allocate the maximum needed
       and not care about unused space. */
    const bool temp_result = (ulen == PERLIO_BUFSIZ);

a233 6

    /* Preallocate the result buffer to the maximum possible size.
       ie. assume each UTF8 byte is 1 character.
       Then shrink the result's buffer if necesary at the end. */
    SvGROW(result, ((ulen+1) * usize));

d235 2
a236 2
	endian = (size == 4) ? 'N' : 'n';
	enc_pack(aTHX_ result,size,endian,BOM_BE);
d238 4
a241 4
	/* Update endian for next sequence */
	if (SvTRUE(attr("renewed", 7))) {
	    hv_store((HV *)SvRV(obj),"endian",6,newSVpv((char *)&endian,1),0);
	}
d245 25
a269 29
	STRLEN len;
	UV ord = utf8n_to_uvuni(s, e-s, &len, 0);
	s += len;
	if (size != 4 && invalid_ucs2(ord)) {
	    if (!issurrogate(ord)) {
		if (ucs2 == -1) {
		    ucs2 = SvTRUE(attr("ucs2", 4));
		}
		if (ucs2) {
		    if (check) {
			croak("%"SVf":code point \"\\x{%"UVxf"}\" too high",
				  *hv_fetch((HV *)SvRV(obj),"Name",4,0),ord);
		    }
		    enc_pack(aTHX_ result,size,endian,FBCHAR);
		} else {
		    UV hi = ((ord - 0x10000) >> 10)   + 0xD800;
		    UV lo = ((ord - 0x10000) & 0x3FF) + 0xDC00;
		    enc_pack(aTHX_ result,size,endian,hi);
		    enc_pack(aTHX_ result,size,endian,lo);
		}
	    }
	    else {
		/* not supposed to happen */
		enc_pack(aTHX_ result,size,endian,FBCHAR);
	    }
	}
	else {
	    enc_pack(aTHX_ result,size,endian,ord);
	}
d271 14
d286 2
a287 19
	/* UTF-8 partial char happens often on PerlIO.
	   Since this is okay and normal, we do not warn.
	   But this is critical when you choose to LEAVE_SRC
	   in which case we die */
	if (check & (ENCODE_DIE_ON_ERR|ENCODE_LEAVE_SRC)) {
	    Perl_croak(aTHX_ "%"SVf":partial character is not allowed "
		       "when CHECK = 0x%" UVuf,
		       *hv_fetch((HV *)SvRV(obj),"Name",4,0), check);
	}
    }
    if (check && !(check & ENCODE_LEAVE_SRC)) {
	if (s < e) {
	    Move(s,SvPVX(utf8),e-s,U8);
	    SvCUR_set(utf8,(e-s));
	}
	else {
	    SvCUR_set(utf8,0);
	}
	*SvEND(utf8) = '\0';
d289 5
a293 4

    if (!temp_result)
	shrink_buffer(result);

d296 1
@


