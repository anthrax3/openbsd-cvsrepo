head	1.2;
access;
symbols
	OPENBSD_4_8:1.1.1.2.0.8
	OPENBSD_4_8_BASE:1.1.1.2
	OPENBSD_4_7:1.1.1.2.0.4
	OPENBSD_4_7_BASE:1.1.1.2
	PERL_5_10_1:1.1.1.2
	OPENBSD_4_6:1.1.1.2.0.6
	OPENBSD_4_6_BASE:1.1.1.2
	OPENBSD_4_5:1.1.1.2.0.2
	OPENBSD_4_5_BASE:1.1.1.2
	PERL_5_10_0:1.1.1.2
	OPENBSD_4_4:1.1.1.1.0.24
	OPENBSD_4_4_BASE:1.1.1.1
	OPENBSD_4_3:1.1.1.1.0.22
	OPENBSD_4_3_BASE:1.1.1.1
	OPENBSD_4_2:1.1.1.1.0.20
	OPENBSD_4_2_BASE:1.1.1.1
	OPENBSD_4_1:1.1.1.1.0.18
	OPENBSD_4_1_BASE:1.1.1.1
	OPENBSD_4_0:1.1.1.1.0.16
	OPENBSD_4_0_BASE:1.1.1.1
	PERL_5_8_8:1.1.1.1
	OPENBSD_3_9:1.1.1.1.0.14
	OPENBSD_3_9_BASE:1.1.1.1
	OPENBSD_3_8:1.1.1.1.0.12
	OPENBSD_3_8_BASE:1.1.1.1
	OPENBSD_3_7:1.1.1.1.0.10
	OPENBSD_3_7_BASE:1.1.1.1
	PERL_5_8_6:1.1.1.1
	OPENBSD_3_6:1.1.1.1.0.8
	OPENBSD_3_6_BASE:1.1.1.1
	PERL_5_8_5:1.1.1.1
	PERL_5_8_3:1.1.1.1
	OPENBSD_3_5:1.1.1.1.0.6
	OPENBSD_3_5_BASE:1.1.1.1
	PERL_5_8_2:1.1.1.1
	OPENBSD_3_4:1.1.1.1.0.4
	OPENBSD_3_4_BASE:1.1.1.1
	OPENBSD_3_3:1.1.1.1.0.2
	OPENBSD_3_3_BASE:1.1.1.1
	PERL_5_8_0:1.1.1.1
	CPAN:1.1.1;
locks; strict;
comment	@# @;
expand	@o@;


1.2
date	2010.09.24.14.59.19;	author millert;	state dead;
branches;
next	1.1;

1.1
date	2002.10.27.22.14.54;	author millert;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	2002.10.27.22.14.54;	author millert;	state Exp;
branches;
next	1.1.1.2;

1.1.1.2
date	2008.09.29.17.18.18;	author millert;	state Exp;
branches;
next	;


desc
@@


1.2
log
@remove files no longer in perl 5.12.2 (or that have moved)
@
text
@#!./perl

use strict;
use Encode;
use Benchmark qw(:all);

my $Count = shift @@ARGV;
$Count ||= 16;
my @@sizes = @@ARGV || (1, 4, 16);

my %utf8_seed;
for my $i (0x00..0xff){
    my $c = chr($i);
    $utf8_seed{BMP} .= ($c =~ /^\p{IsPrint}/o) ? $c : " ";
}
utf8::upgrade($utf8_seed{BMP});

for my $i (0x00..0xff){
    my $c = chr(0x10000+$i);
    $utf8_seed{HIGH} .= ($c =~ /^\p{IsPrint}/o) ? $c : " ";
}
utf8::upgrade($utf8_seed{HIGH});

my %S;
for my $i (@@sizes){
    my $sz = 256 * $i;
    for my $cp (qw(BMP HIGH)){
	$S{utf8}{$sz}{$cp}  = $utf8_seed{$cp} x $i;
	$S{utf16}{$sz}{$cp} = encode('UTF-16BE', $S{utf8}{$sz}{$cp});
    }
}

for my $i (@@sizes){
    my $sz = $i * 256;
    my $count = $Count * int(256/$i);
    for my $cp (qw(BMP HIGH)){
	for my $op (qw(encode decode)){
	    my ($meth, $from, $to) = ($op eq 'encode') ?
		(\&encode, 'utf8', 'utf16') : (\&decode, 'utf16', 'utf8');
	    my $XS = sub {
		Encode::Unicode::set_transcoder("xs");  
		$meth->('UTF-16BE', $S{$from}{$sz}{$cp})
		     eq $S{$to}{$sz}{$cp} 
			 or die "$op,$from,$to,$sz,$cp";
	    };
	    my $modern = sub {
		Encode::Unicode::set_transcoder("modern");  
		$meth->('UTF-16BE', $S{$from}{$sz}{$cp})
		     eq $S{$to}{$sz}{$cp} 
			 or die "$op,$from,$to,$sz,$cp";
	    };
	    my $classic = sub {
		Encode::Unicode::set_transcoder("classic");  
		$meth->('UTF-16BE', $S{$from}{$sz}{$cp})
		     eq $S{$to}{$sz}{$cp} or 
			 die "$op,$from,$to,$sz,$cp";
	    };
	    print "---- $op length=$sz/range=$cp ----\n";
	    my $r = timethese($count,
		     {
		      "XS"      => $XS,
		      "Modern"  => $modern,
		      "Classic" => $classic,
		     },
		     'none',
		    );
	    cmpthese($r);
	}
    }
}
@


1.1
log
@Initial revision
@
text
@@


1.1.1.1
log
@stock perl 5.8.0 from CPAN
@
text
@@


1.1.1.2
log
@import perl 5.10.0 from CPAN
@
text
@d28 2
a29 2
    $S{utf8}{$sz}{$cp}  = $utf8_seed{$cp} x $i;
    $S{utf16}{$sz}{$cp} = encode('UTF-16BE', $S{utf8}{$sz}{$cp});
d37 32
a68 32
    for my $op (qw(encode decode)){
        my ($meth, $from, $to) = ($op eq 'encode') ?
        (\&encode, 'utf8', 'utf16') : (\&decode, 'utf16', 'utf8');
        my $XS = sub {
        Encode::Unicode::set_transcoder("xs");  
        $meth->('UTF-16BE', $S{$from}{$sz}{$cp})
             eq $S{$to}{$sz}{$cp} 
             or die "$op,$from,$to,$sz,$cp";
        };
        my $modern = sub {
        Encode::Unicode::set_transcoder("modern");  
        $meth->('UTF-16BE', $S{$from}{$sz}{$cp})
             eq $S{$to}{$sz}{$cp} 
             or die "$op,$from,$to,$sz,$cp";
        };
        my $classic = sub {
        Encode::Unicode::set_transcoder("classic");  
        $meth->('UTF-16BE', $S{$from}{$sz}{$cp})
             eq $S{$to}{$sz}{$cp} or 
             die "$op,$from,$to,$sz,$cp";
        };
        print "---- $op length=$sz/range=$cp ----\n";
        my $r = timethese($count,
             {
              "XS"      => $XS,
              "Modern"  => $modern,
              "Classic" => $classic,
             },
             'none',
            );
        cmpthese($r);
    }
@

