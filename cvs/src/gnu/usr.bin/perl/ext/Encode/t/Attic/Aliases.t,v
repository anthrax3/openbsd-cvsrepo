head	1.2;
access;
symbols
	OPENBSD_4_8:1.1.1.5.0.4
	OPENBSD_4_8_BASE:1.1.1.5
	OPENBSD_4_7:1.1.1.5.0.2
	OPENBSD_4_7_BASE:1.1.1.5
	PERL_5_10_1:1.1.1.5
	OPENBSD_4_6:1.1.1.4.0.6
	OPENBSD_4_6_BASE:1.1.1.4
	OPENBSD_4_5:1.1.1.4.0.2
	OPENBSD_4_5_BASE:1.1.1.4
	PERL_5_10_0:1.1.1.4
	OPENBSD_4_4:1.1.1.3.0.10
	OPENBSD_4_4_BASE:1.1.1.3
	OPENBSD_4_3:1.1.1.3.0.8
	OPENBSD_4_3_BASE:1.1.1.3
	OPENBSD_4_2:1.1.1.3.0.6
	OPENBSD_4_2_BASE:1.1.1.3
	OPENBSD_4_1:1.1.1.3.0.4
	OPENBSD_4_1_BASE:1.1.1.3
	OPENBSD_4_0:1.1.1.3.0.2
	OPENBSD_4_0_BASE:1.1.1.3
	PERL_5_8_8:1.1.1.3
	OPENBSD_3_9:1.1.1.2.0.10
	OPENBSD_3_9_BASE:1.1.1.2
	OPENBSD_3_8:1.1.1.2.0.8
	OPENBSD_3_8_BASE:1.1.1.2
	OPENBSD_3_7:1.1.1.2.0.6
	OPENBSD_3_7_BASE:1.1.1.2
	PERL_5_8_6:1.1.1.2
	OPENBSD_3_6:1.1.1.2.0.4
	OPENBSD_3_6_BASE:1.1.1.2
	PERL_5_8_5:1.1.1.2
	PERL_5_8_3:1.1.1.2
	OPENBSD_3_5:1.1.1.2.0.2
	OPENBSD_3_5_BASE:1.1.1.2
	PERL_5_8_2:1.1.1.2
	OPENBSD_3_4:1.1.1.1.0.4
	OPENBSD_3_4_BASE:1.1.1.1
	OPENBSD_3_3:1.1.1.1.0.2
	OPENBSD_3_3_BASE:1.1.1.1
	PERL_5_8_0:1.1.1.1
	CPAN:1.1.1;
locks; strict;
comment	@# @;
expand	@o@;


1.2
date	2010.09.24.14.59.19;	author millert;	state dead;
branches;
next	1.1;

1.1
date	2002.10.27.22.14.54;	author millert;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	2002.10.27.22.14.54;	author millert;	state Exp;
branches;
next	1.1.1.2;

1.1.1.2
date	2003.12.03.02.43.44;	author millert;	state Exp;
branches;
next	1.1.1.3;

1.1.1.3
date	2006.03.28.18.48.03;	author millert;	state Exp;
branches;
next	1.1.1.4;

1.1.1.4
date	2008.09.29.17.18.17;	author millert;	state Exp;
branches;
next	1.1.1.5;

1.1.1.5
date	2009.10.12.18.11.17;	author millert;	state Exp;
branches;
next	;


desc
@@


1.2
log
@remove files no longer in perl 5.12.2 (or that have moved)
@
text
@#!../perl

BEGIN {
    if ($ENV{'PERL_CORE'}){
	chdir 't';
	unshift @@INC, '../lib';
    }
    require Config; import Config;
    if ($Config{'extensions'} !~ /\bEncode\b/) {
	print "1..0 # Skip: Encode was not built\n";
	    exit 0;
    }
}

use strict;
use Encode;
use Encode::Alias;
my %a2c;
my $ON_EBCDIC;

sub init_a2c{
    %a2c = (
	    'US-ascii' => 'ascii',
	    'ISO-646-US' => 'ascii',
	    'UTF-8'    => 'utf8',
	    'UCS-2'    => 'UCS-2BE',
	    'UCS2'     => 'UCS-2BE',
	    'iso-10646-1' => 'UCS-2BE',
	    'ucs2-le'  => 'UCS-2LE',
	    'ucs2-be'  => 'UCS-2BE',
	    'utf16'    => 'UTF-16',
	    'utf32'    => 'UTF-32',
	    'utf16-be'  => 'UTF-16BE',
	    'utf32-be'  => 'UTF-32BE',
	    'utf16-le'  => 'UTF-16LE',
	    'utf32-le'  => 'UTF-32LE',
	    'UCS4-BE'   => 'UTF-32BE',
	    'UCS-4-LE'  => 'UTF-32LE',
	    'cyrillic' => 'iso-8859-5',
	    'arabic'   => 'iso-8859-6',
	    'greek'    => 'iso-8859-7',
	    'hebrew'   => 'iso-8859-8',
	    'thai'     => 'iso-8859-11',
	    'tis620'   => 'iso-8859-11',
	    'WinLatin1'     => 'cp1252',
	    'WinLatin2'     => 'cp1250',
	    'WinCyrillic'   => 'cp1251',
	    'WinGreek'      => 'cp1253',
	    'WinTurkish'    => 'cp1254',
	    'WinHebrew'     => 'cp1255',
	    'WinArabic'     => 'cp1256',
	    'WinBaltic'     => 'cp1257',
	    'WinVietnamese' => 'cp1258',
	    'ja_JP.euc'	    => $ON_EBCDIC ? '' : 'euc-jp',
	    'x-euc-jp'	    => $ON_EBCDIC ? '' : 'euc-jp',
	    'zh_CN.euc'	    => $ON_EBCDIC ? '' : 'euc-cn',
	    'x-euc-cn'	    => $ON_EBCDIC ? '' : 'euc-cn',
	    'ko_KR.euc'	    => $ON_EBCDIC ? '' : 'euc-kr',
	    'x-euc-kr'	    => $ON_EBCDIC ? '' : 'euc-kr',
	    'ujis'	    => $ON_EBCDIC ? '' : 'euc-jp',
	    'Shift_JIS'	    => $ON_EBCDIC ? '' : 'shiftjis',
	    'x-sjis'	    => $ON_EBCDIC ? '' : 'shiftjis',
	    'jis'	    => $ON_EBCDIC ? '' : '7bit-jis',
	    'big-5'	    => $ON_EBCDIC ? '' : 'big5-eten',
	    'zh_TW.Big5'    => $ON_EBCDIC ? '' : 'big5-eten',
	    'tca-big5'	    => $ON_EBCDIC ? '' : 'big5-eten',
	    'big5-hk'	    => $ON_EBCDIC ? '' : 'big5-hkscs',
	    'hkscs-big5'    => $ON_EBCDIC ? '' : 'big5-hkscs',
	    'GB_2312-80'    => $ON_EBCDIC ? '' : 'euc-cn',
	    'KS_C_5601-1987'    => $ON_EBCDIC ? '' : 'cp949',
	    #
	    'gb12345-raw'   => $ON_EBCDIC ? '' : 'gb12345-raw',
	    'gb2312-raw'    => $ON_EBCDIC ? '' : 'gb2312-raw',
	    'jis0201-raw'   => $ON_EBCDIC ? '' : 'jis0201-raw',
	    'jis0208-raw'   => $ON_EBCDIC ? '' : 'jis0208-raw',
	    'jis0212-raw'   => $ON_EBCDIC ? '' : 'jis0212-raw',
	    'ksc5601-raw'   => $ON_EBCDIC ? '' : 'ksc5601-raw',
	   );

    for my $i (1..11,13..16){
	$a2c{"ISO 8859 $i"} = "iso-8859-$i";
    }
    for my $i (1..10){
	$a2c{"ISO Latin $i"} = "iso-8859-$Encode::Alias::Latin2iso[$i]";
    }
    for my $k (keys %Encode::Alias::Winlatin2cp){
	my $v = $Encode::Alias::Winlatin2cp{$k};
	$a2c{"Win" . ucfirst($k)} = "cp" . $v;
	$a2c{"IBM-$v"} = $a2c{"MS-$v"} = "cp" . $v;
	$a2c{"cp-" . $v} = "cp" . $v;
    }
    my @@a2c = keys %a2c;
    for my $k (@@a2c){
	$a2c{uc($k)} = $a2c{$k};
	$a2c{lc($k)} = $a2c{$k};
	$a2c{lcfirst($k)} = $a2c{$k};
	$a2c{ucfirst($k)} = $a2c{$k};
    }
}

BEGIN{
    $ON_EBCDIC = ord("A") == 193;
    @@ARGV and $ON_EBCDIC = $ARGV[0] eq 'EBCDIC';
    $Encode::ON_EBCDIC = $ON_EBCDIC;
    init_a2c();
}

if ($ON_EBCDIC){
    delete @@Encode::ExtModule{
	qw(euc-cn gb2312 gb12345 gbk cp936 iso-ir-165 MacChineseSimp
	   euc-jp iso-2022-jp 7bit-jis shiftjis MacJapanese cp932
	   euc-kr ksc5601 cp949 MacKorean
	   big5	big5-hkscs cp950 MacChineseTrad
	   gb18030 big5plus euc-tw)
	};
}

use Test::More tests => (scalar keys %a2c) * 4;

print "# alias test;  \$ON_EBCDIC == $ON_EBCDIC\n";

foreach my $a (keys %a2c){	
    my $e = Encode::find_encoding($a);
    is((defined($e) and $e->name), $a2c{$a},$a)
	or warn "alias was $a";;
}

# now we override some of the aliases and see if it works fine

define_alias(
	     qr/ascii/i    => 'WinLatin1',
	     qr/cyrillic/i => 'WinCyrillic',
	     qr/arabic/i   => 'WinArabic',
	     qr/greek/i    => 'WinGreek',
	     qr/hebrew/i   => 'WinHebrew'
	    );

print "# alias test with alias overrides\n";

foreach my $a (keys %a2c){	
    my $e = Encode::find_encoding($a);
    is((defined($e) and $e->name), $a2c{$a}, "Override $a")
	or warn "alias was $a";
}

print "# alias undef test\n";

Encode::Alias->undef_aliases;
foreach my $a (keys %a2c){	
    my $e = Encode::find_encoding($a);
    ok(!defined($e) || $e->name =~ /-raw$/o,"Undef $a")
	or warn "alias was $a";
}

print "# alias reinit test\n";

Encode::Alias->init_aliases;
init_a2c();
foreach my $a (keys %a2c){	
    my $e = Encode::find_encoding($a);
    is((defined($e) and $e->name), $a2c{$a}, "Reinit $a")
	or warn "alias was $a";
}
__END__
for my $k (keys %a2c){
    $k =~ /[A-Z]/ and next;
    print "$k => $a2c{$k}\n";
}



@


1.1
log
@Initial revision
@
text
@@


1.1.1.1
log
@stock perl 5.8.0 from CPAN
@
text
@@


1.1.1.2
log
@perl 5.8.2 from CPAN
@
text
@a53 2
	    'koi8r'         => 'koi8-r',
	    'koi8u'         => 'koi8-u',
@


1.1.1.3
log
@perl 5.8.8 import
@
text
@d25 1
a25 1
	    'UTF-8'    => 'utf-8-strict',
@


1.1.1.4
log
@import perl 5.10.0 from CPAN
@
text
@d5 2
a6 2
    chdir 't';
    unshift @@INC, '../lib';
d10 2
a11 2
    print "1..0 # Skip: Encode was not built\n";
        exit 0;
d23 58
a80 59
        'US-ascii' => 'ascii',
        'ISO-646-US' => 'ascii',
        'UTF-8'    => 'utf-8-strict',
        'UCS-2'    => 'UCS-2BE',
        'UCS2'     => 'UCS-2BE',
        'iso-10646-1' => 'UCS-2BE',
        'ucs2-le'  => 'UCS-2LE',
        'ucs2-be'  => 'UCS-2BE',
        'utf16'    => 'UTF-16',
        'utf32'    => 'UTF-32',
        'utf16-be'  => 'UTF-16BE',
        'utf32-be'  => 'UTF-32BE',
        'utf16-le'  => 'UTF-16LE',
        'utf32-le'  => 'UTF-32LE',
        'UCS4-BE'   => 'UTF-32BE',
        'UCS-4-LE'  => 'UTF-32LE',
        'cyrillic' => 'iso-8859-5',
        'arabic'   => 'iso-8859-6',
        'greek'    => 'iso-8859-7',
        'hebrew'   => 'iso-8859-8',
        'thai'     => 'iso-8859-11',
        'tis620'   => 'iso-8859-11',
        'tis-620'   => 'iso-8859-11',
        'WinLatin1'     => 'cp1252',
        'WinLatin2'     => 'cp1250',
        'WinCyrillic'   => 'cp1251',
        'WinGreek'      => 'cp1253',
        'WinTurkish'    => 'cp1254',
        'WinHebrew'     => 'cp1255',
        'WinArabic'     => 'cp1256',
        'WinBaltic'     => 'cp1257',
        'WinVietnamese' => 'cp1258',
        'koi8r'         => 'koi8-r',
        'koi8u'         => 'koi8-u',
        'ja_JP.euc'	    => $ON_EBCDIC ? '' : 'euc-jp',
        'x-euc-jp'	    => $ON_EBCDIC ? '' : 'euc-jp',
        'zh_CN.euc'	    => $ON_EBCDIC ? '' : 'euc-cn',
        'x-euc-cn'	    => $ON_EBCDIC ? '' : 'euc-cn',
        'ko_KR.euc'	    => $ON_EBCDIC ? '' : 'euc-kr',
        'x-euc-kr'	    => $ON_EBCDIC ? '' : 'euc-kr',
        'ujis'	    => $ON_EBCDIC ? '' : 'euc-jp',
        'Shift_JIS'	    => $ON_EBCDIC ? '' : 'shiftjis',
        'x-sjis'	    => $ON_EBCDIC ? '' : 'shiftjis',
        'jis'	    => $ON_EBCDIC ? '' : '7bit-jis',
        'big-5'	    => $ON_EBCDIC ? '' : 'big5-eten',
        'zh_TW.Big5'    => $ON_EBCDIC ? '' : 'big5-eten',
        'tca-big5'	    => $ON_EBCDIC ? '' : 'big5-eten',
        'big5-hk'	    => $ON_EBCDIC ? '' : 'big5-hkscs',
        'hkscs-big5'    => $ON_EBCDIC ? '' : 'big5-hkscs',
        'GB_2312-80'    => $ON_EBCDIC ? '' : 'euc-cn',
        'KS_C_5601-1987'    => $ON_EBCDIC ? '' : 'cp949',
        #
        'gb12345-raw'   => $ON_EBCDIC ? '' : 'gb12345-raw',
        'gb2312-raw'    => $ON_EBCDIC ? '' : 'gb2312-raw',
        'jis0201-raw'   => $ON_EBCDIC ? '' : 'jis0201-raw',
        'jis0208-raw'   => $ON_EBCDIC ? '' : 'jis0208-raw',
        'jis0212-raw'   => $ON_EBCDIC ? '' : 'jis0212-raw',
        'ksc5601-raw'   => $ON_EBCDIC ? '' : 'ksc5601-raw',
       );
d83 1
a83 1
    $a2c{"ISO 8859 $i"} = "iso-8859-$i";
d86 1
a86 1
    $a2c{"ISO Latin $i"} = "iso-8859-$Encode::Alias::Latin2iso[$i]";
d89 4
a92 4
    my $v = $Encode::Alias::Winlatin2cp{$k};
    $a2c{"Win" . ucfirst($k)} = "cp" . $v;
    $a2c{"IBM-$v"} = $a2c{"MS-$v"} = "cp" . $v;
    $a2c{"cp-" . $v} = "cp" . $v;
d96 4
a99 4
    $a2c{uc($k)} = $a2c{$k};
    $a2c{lc($k)} = $a2c{$k};
    $a2c{lcfirst($k)} = $a2c{$k};
    $a2c{ucfirst($k)} = $a2c{$k};
d112 6
a117 6
    qw(euc-cn gb2312 gb12345 gbk cp936 iso-ir-165 MacChineseSimp
       euc-jp iso-2022-jp 7bit-jis shiftjis MacJapanese cp932
       euc-kr ksc5601 cp949 MacKorean
       big5	big5-hkscs cp950 MacChineseTrad
       gb18030 big5plus euc-tw)
    };
a124 1
    print "# $a => $a2c{$a}\n";
d127 1
a127 1
    or warn "alias was $a";;
d133 6
a138 6
         qr/ascii/i    => 'WinLatin1',
         qr/cyrillic/i => 'WinCyrillic',
         qr/arabic/i   => 'WinArabic',
         qr/greek/i    => 'WinGreek',
         qr/hebrew/i   => 'WinHebrew'
        );
a142 1
    print "# $a => $a2c{$a}\n";
d145 1
a145 1
    or warn "alias was $a";
d154 1
a154 1
    or warn "alias was $a";
d164 1
a164 1
    or warn "alias was $a";
@


1.1.1.5
log
@import perl 5.10.1
@
text
@a25 1
        'en_US.UTF-8'    => 'utf-8-strict',
a54 1
	'Macintosh'     => 'MacRoman',
@


