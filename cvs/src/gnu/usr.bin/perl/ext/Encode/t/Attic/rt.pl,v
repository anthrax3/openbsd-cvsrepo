head	1.5;
access;
symbols
	OPENBSD_4_8:1.4.0.4
	OPENBSD_4_8_BASE:1.4
	OPENBSD_4_7:1.4.0.2
	OPENBSD_4_7_BASE:1.4
	PERL_5_10_1:1.1.1.4
	OPENBSD_4_6:1.3.0.6
	OPENBSD_4_6_BASE:1.3
	OPENBSD_4_5:1.3.0.2
	OPENBSD_4_5_BASE:1.3
	PERL_5_10_0:1.1.1.4
	OPENBSD_4_4:1.2.0.20
	OPENBSD_4_4_BASE:1.2
	OPENBSD_4_3:1.2.0.18
	OPENBSD_4_3_BASE:1.2
	OPENBSD_4_2:1.2.0.16
	OPENBSD_4_2_BASE:1.2
	OPENBSD_4_1:1.2.0.14
	OPENBSD_4_1_BASE:1.2
	OPENBSD_4_0:1.2.0.12
	OPENBSD_4_0_BASE:1.2
	PERL_5_8_8:1.1.1.3
	OPENBSD_3_9:1.2.0.10
	OPENBSD_3_9_BASE:1.2
	OPENBSD_3_8:1.2.0.8
	OPENBSD_3_8_BASE:1.2
	OPENBSD_3_7:1.2.0.6
	OPENBSD_3_7_BASE:1.2
	PERL_5_8_6:1.1.1.3
	OPENBSD_3_6:1.2.0.4
	OPENBSD_3_6_BASE:1.2
	PERL_5_8_5:1.1.1.2
	PERL_5_8_3:1.1.1.1
	OPENBSD_3_5:1.2.0.2
	OPENBSD_3_5_BASE:1.2
	PERL_5_8_2:1.1.1.1
	CPAN:1.1.1;
locks; strict;
comment	@# @;


1.5
date	2010.09.24.14.59.19;	author millert;	state dead;
branches;
next	1.4;

1.4
date	2009.10.12.18.24.28;	author millert;	state Exp;
branches;
next	1.3;

1.3
date	2008.09.29.17.36.04;	author millert;	state Exp;
branches;
next	1.2;

1.2
date	2003.12.03.03.02.29;	author millert;	state Exp;
branches;
next	1.1;

1.1
date	2003.12.03.02.43.44;	author millert;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	2003.12.03.02.43.44;	author millert;	state Exp;
branches;
next	1.1.1.2;

1.1.1.2
date	2004.08.09.17.46.01;	author millert;	state Exp;
branches;
next	1.1.1.3;

1.1.1.3
date	2005.01.15.21.16.48;	author millert;	state Exp;
branches;
next	1.1.1.4;

1.1.1.4
date	2008.09.29.17.18.18;	author millert;	state Exp;
branches;
next	;


desc
@@


1.5
log
@remove files no longer in perl 5.12.2 (or that have moved)
@
text
@#!/usr/local/bin/perl
#
# $Id: rt.pl,v 1.4 2009/10/12 18:24:28 millert Exp $
#

BEGIN {
    my $ucmdir  = "ucm";
    if ($ENV{'PERL_CORE'}){
        chdir 't';
        unshift @@INC, '../lib';
        $ucmdir = "../ext/Encode/ucm";
    }
    require Config; import Config;
    if ($Config{'extensions'} !~ /\bEncode\b/) {
      print "1..0 # Skip: Encode was not built\n";
      exit 0;
    }
    if (ord("A") == 193) {
    print "1..0 # Skip: EBCDIC\n";
    exit 0;
    }
    use strict;
    require Test::More;
    our $DEBUG;
    our @@ucm;
    unless(@@ARGV){
    use File::Spec;
    Test::More->import(tests => 103);
    opendir my $dh, $ucmdir or die "$ucmdir:$!";
    @@ucm = 
        map {File::Spec->catfile($ucmdir, $_) } 
        sort grep {/\.ucm$/o} readdir($dh);
    closedir $dh;
    }else{
    Test::More->import("no_plan");
    $DEBUG = 1;
    @@ucm = @@ARGV;
    }
}

use strict;
use Encode qw/encode decode/;
our $DEBUG;
our @@ucm;

for my $ucm (@@ucm){
    my ($name, $nchar, $nrt, $nok) = rttest($ucm);
    $nok += 0;
    ok($nok == 0, "$ucm => $name ($nchar, $nrt, $nok)");
}

sub rttest{
    my $ucm = shift;
    my ($name, $nchar, $nrt, $nok);
    open my $rfh, "<$ucm" or die "$ucm:$!";
    # <U0000> \x00 |0 # <control>
    while(<$rfh>){
    s/#.*//o; /^$/ and next;
    unless ($name){
        /^<code_set_name>\s+"([^\"]+)"/io or next;
        $name = $1 and next;
    }else{
        /^<U([0-9a-f]+)>\s+(\S+)\s+\|(\d)/io or next;
        $nchar++;
        $3 == 0 or next;
        $nrt++;
        my $uni = chr(hex($1));
        my $enc = eval qq{ "$2" };
        decode($name, $enc) eq $uni or $nok++;
        encode($name, $uni) eq $enc or $nok++;
    }
    }
    return($name, $nchar, $nrt, $nok);
}
__END__
@


1.4
log
@Merge in perl 5.10.1
@
text
@d3 1
a3 1
# $Id: rt.pl,v 2.1 2006/05/03 18:24:10 dankogai Exp $
@


1.3
log
@fix conflicts and merge in local changes to perl 5.10.0
@
text
@@


1.2
log
@Resolve conflicts for perl 5.8.2, remove old files, and add OpenBSD-specific scaffolding
@
text
@d3 1
a3 1
# $Id: rt.pl,v 1.2 2002/11/08 18:29:27 dankogai Exp $
d19 2
a20 2
	print "1..0 # Skip: EBCDIC\n";
	exit 0;
d27 7
a33 7
	use File::Spec;
	Test::More->import(tests => 103);
	opendir my $dh, $ucmdir or die "$ucmdir:$!";
	@@ucm = 
	    map {File::Spec->catfile($ucmdir, $_) } 
		sort grep {/\.ucm$/o} readdir($dh);
	closedir $dh;
d35 3
a37 3
	Test::More->import("no_plan");
	$DEBUG = 1;
	@@ucm = @@ARGV;
d58 14
a71 14
	s/#.*//o; /^$/ and next;
	unless ($name){
	    /^<code_set_name>\s+"([^\"]+)"/io or next;
	    $name = $1 and next;
	}else{
	    /^<U([0-9a-f]+)>\s+(\S+)\s+\|(\d)/io or next;
	    $nchar++;
	    $3 == 0 or next;
	    $nrt++;
	    my $uni = chr(hex($1));
	    my $enc = eval qq{ "$2" };
	    decode($name, $enc) eq $uni or $nok++;
	    encode($name, $uni) eq $enc or $nok++;
	}
@


1.1
log
@Initial revision
@
text
@@


1.1.1.1
log
@perl 5.8.2 from CPAN
@
text
@@


1.1.1.2
log
@Import of stock perl 5.8.5
@
text
@d3 1
a3 1
# $Id: rt.pl,v 1.2 2003/12/03 03:02:29 millert Exp $
@


1.1.1.3
log
@perl 5.8.6 from CPAN
@
text
@d3 1
a3 1
# $Id: rt.pl,v 2.0 2004/05/16 20:55:19 dankogai Exp $
@


1.1.1.4
log
@import perl 5.10.0 from CPAN
@
text
@d3 1
a3 1
# $Id: rt.pl,v 2.1 2006/05/03 18:24:10 dankogai Exp $
d19 2
a20 2
    print "1..0 # Skip: EBCDIC\n";
    exit 0;
d27 7
a33 7
    use File::Spec;
    Test::More->import(tests => 103);
    opendir my $dh, $ucmdir or die "$ucmdir:$!";
    @@ucm = 
        map {File::Spec->catfile($ucmdir, $_) } 
        sort grep {/\.ucm$/o} readdir($dh);
    closedir $dh;
d35 3
a37 3
    Test::More->import("no_plan");
    $DEBUG = 1;
    @@ucm = @@ARGV;
d58 14
a71 14
    s/#.*//o; /^$/ and next;
    unless ($name){
        /^<code_set_name>\s+"([^\"]+)"/io or next;
        $name = $1 and next;
    }else{
        /^<U([0-9a-f]+)>\s+(\S+)\s+\|(\d)/io or next;
        $nchar++;
        $3 == 0 or next;
        $nrt++;
        my $uni = chr(hex($1));
        my $enc = eval qq{ "$2" };
        decode($name, $enc) eq $uni or $nok++;
        encode($name, $uni) eq $enc or $nok++;
    }
@


