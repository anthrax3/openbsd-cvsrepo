head	1.2;
access;
symbols
	OPENBSD_4_8:1.1.1.7.0.4
	OPENBSD_4_8_BASE:1.1.1.7
	OPENBSD_4_7:1.1.1.7.0.2
	OPENBSD_4_7_BASE:1.1.1.7
	PERL_5_10_1:1.1.1.7
	OPENBSD_4_6:1.1.1.6.0.6
	OPENBSD_4_6_BASE:1.1.1.6
	OPENBSD_4_5:1.1.1.6.0.2
	OPENBSD_4_5_BASE:1.1.1.6
	PERL_5_10_0:1.1.1.6
	OPENBSD_4_4:1.1.1.5.0.16
	OPENBSD_4_4_BASE:1.1.1.5
	OPENBSD_4_3:1.1.1.5.0.14
	OPENBSD_4_3_BASE:1.1.1.5
	OPENBSD_4_2:1.1.1.5.0.12
	OPENBSD_4_2_BASE:1.1.1.5
	OPENBSD_4_1:1.1.1.5.0.10
	OPENBSD_4_1_BASE:1.1.1.5
	OPENBSD_4_0:1.1.1.5.0.8
	OPENBSD_4_0_BASE:1.1.1.5
	PERL_5_8_8:1.1.1.5
	OPENBSD_3_9:1.1.1.5.0.6
	OPENBSD_3_9_BASE:1.1.1.5
	OPENBSD_3_8:1.1.1.5.0.4
	OPENBSD_3_8_BASE:1.1.1.5
	OPENBSD_3_7:1.1.1.5.0.2
	OPENBSD_3_7_BASE:1.1.1.5
	PERL_5_8_6:1.1.1.5
	OPENBSD_3_6:1.1.1.4.0.2
	OPENBSD_3_6_BASE:1.1.1.4
	PERL_5_8_5:1.1.1.4
	PERL_5_8_3:1.1.1.3
	OPENBSD_3_5:1.1.1.2.0.2
	OPENBSD_3_5_BASE:1.1.1.2
	PERL_5_8_2:1.1.1.2
	OPENBSD_3_4:1.1.1.1.0.4
	OPENBSD_3_4_BASE:1.1.1.1
	OPENBSD_3_3:1.1.1.1.0.2
	OPENBSD_3_3_BASE:1.1.1.1
	PERL_5_8_0:1.1.1.1
	CPAN:1.1.1;
locks; strict;
comment	@# @;
expand	@o@;


1.2
date	2010.09.24.14.59.19;	author millert;	state dead;
branches;
next	1.1;

1.1
date	2002.10.27.22.14.54;	author millert;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	2002.10.27.22.14.54;	author millert;	state Exp;
branches;
next	1.1.1.2;

1.1.1.2
date	2003.12.03.02.43.43;	author millert;	state Exp;
branches;
next	1.1.1.3;

1.1.1.3
date	2004.04.07.21.13.00;	author millert;	state Exp;
branches;
next	1.1.1.4;

1.1.1.4
date	2004.08.09.17.45.59;	author millert;	state Exp;
branches;
next	1.1.1.5;

1.1.1.5
date	2005.01.15.21.16.47;	author millert;	state Exp;
branches;
next	1.1.1.6;

1.1.1.6
date	2008.09.29.17.18.17;	author millert;	state Exp;
branches;
next	1.1.1.7;

1.1.1.7
date	2009.10.12.18.11.15;	author millert;	state Exp;
branches;
next	;


desc
@@


1.2
log
@remove files no longer in perl 5.12.2 (or that have moved)
@
text
@#!./perl
# $Id: piconv,v 1.25 2002/06/01 18:07:49 dankogai Exp dankogai $
#
use 5.8.0;
use strict;
use Encode ;
use Encode::Alias;
my %Scheme =  map {$_ => 1} qw(from_to decode_encode perlio);

use Getopt::Std;

my %Opt; getopts("pcC:hDS:lf:t:s:", \%Opt);
$Opt{h} and help();
$Opt{l} and list_encodings();
my $locale = $ENV{LC_CTYPE} || $ENV{LC_ALL} || $ENV{LANG};
$Opt{f} || $Opt{t} || help();
my $from = $Opt{f} || $locale or help("from_encoding unspecified");
my $to   = $Opt{t} || $locale or help("to_encoding unspecified");
$Opt{s} and Encode::from_to($Opt{s}, $from, $to) and print $Opt{s} and exit;
my $scheme = exists $Scheme{$Opt{S}} ? $Opt{S} :  'from_to';
$Opt{C} ||= $Opt{c};
$Opt{p} and $Opt{C} = Encode::FB_PERLQQ;

if ($Opt{D}){
    my $cfrom = Encode->getEncoding($from)->name;
    my $cto   = Encode->getEncoding($to)->name;
    print <<"EOT";
Scheme: $scheme
From:   $from => $cfrom
To:     $to => $cto
EOT
}

# default
if     ($scheme eq 'from_to'){ 
    while(<>){
	Encode::from_to($_, $from, $to, $Opt{C}); print;
    };
# step-by-step
}elsif ($scheme eq 'decode_encode'){
   while(<>){
       my $decoded = decode($from, $_, $Opt{C});
       my $encoded = encode($to, $decoded);
       print $encoded;
    };
# NI-S favorite
}elsif ($scheme eq 'perlio'){ 
    binmode(STDIN,  ":encoding($from)");
    binmode(STDOUT, ":encoding($to)");
    while(<>){ print; }
}else{ # won't reach
    die "unknown scheme: $scheme";
}

sub list_encodings{
    print join("\n", Encode->encodings(":all")), "\n";
    exit;
}

sub help{
    my $message = shift;
    use File::Basename;
    my $name = basename($0);
    $message and print STDERR "$name error: $message\n";
    print STDERR <<"EOT";
$name [-f from_encoding] [-t to_encoding] [-s string] [files...]
$name -l
  -l lists all available encodings (the canonical names, many aliases exist)
  -f from_encoding  When omitted, the current locale will be used.
  -t to_encoding    When omitted, the current locale will be used.
  -s string         "string" will be converted instead of STDIN.
EOT
  exit;
}

__END__

=head1 NAME

piconv -- iconv(1), reinvented in perl

=head1 SYNOPSIS

  piconv [-f from_encoding] [-t to_encoding] [-s string] [files...]
  piconv -l

=head1 DESCRIPTION

B<piconv> is perl version of B<iconv>, a character encoding converter
widely available for various Unixen today.  This script was primarily
a technology demonstrator for Perl 5.8.0, but you can use piconv in the
place of iconv for virtually any case.

piconv converts the character encoding of either STDIN or files
specified in the argument and prints out to STDOUT.

Here is the  list of options.

=over 4

=item -f from_encoding

Specifies the encoding you are converting from.  Unlike B<iconv>,
this option can be omitted.  In such cases, the current locale is used.

=item -t to_encoding

Specifies the encoding you are converting to.  Unlike B<iconv>,
this option can be omitted.  In such cases, the current locale is used.

Therefore, when both -f and -t are omitted, B<piconv> just acts
like B<cat>.

=item -s I<string>

uses I<string> instead of file for the source of text.  Same as B<iconv>.

=item -l

Lists all available encodings, one per line, in case-insensitive
order.  Note that only the canonical names are listed; many aliases
exist.  For example, the names are case-insensitive, and many standard
and common aliases work, such as "latin1" for "ISO-8859-1", or "ibm850"
instead of "cp850", or "winlatin1" for "cp1252".  See L<Encode::Supported>
for a full discussion.

=item -C I<N>

Check the validity of the stream if I<N> = 1.  When I<N> = -1, something
interesting happens when it encounters an invalid character.

=item -c

Same as C<-C 1>.

=item -p

Same as C<-C -1>.

=item -h

Show usage.

=item -D

Invokes debugging mode.  Primarily for Encode hackers.

=item -S scheme

Selects which scheme is to be used for conversion.  Available schemes
are as follows:

=over 4

=item from_to

Uses Encode::from_to for conversion.  This is the default.

=item decode_encode

Input strings are decode()d then encode()d.  A straight two-step
implementation.

=item perlio

The new perlIO layer is used.  NI-S' favorite.

=back

Like the I<-D> option, this is also for Encode hackers.

=back

=head1 SEE ALSO

L<iconv(1)>
L<locale(3)>
L<Encode>
L<Encode::Supported>
L<Encode::Alias>
L<PerlIO>

=cut
@


1.1
log
@Initial revision
@
text
@@


1.1.1.1
log
@stock perl 5.8.0 from CPAN
@
text
@@


1.1.1.2
log
@perl 5.8.2 from CPAN
@
text
@d2 1
a2 1
# $Id: piconv,v 1.27 2003/06/18 09:29:02 dankogai Exp $
d10 1
a10 2
use File::Basename;
my $name = basename($0);
d12 3
a14 22
use Getopt::Long;

my %Opt;

help()
    unless
      GetOptions(\%Opt,
		 'from|f=s',
		 'to|t=s',
		 'list|l',
		 'string|s=s',
		 'check|C=i',
		 'c',
		 'perlqq|p',
		 'debug|D',
		 'scheme|S=s',
		 'resolve|r=s',
		 'help',
		 );

$Opt{help} and help();
$Opt{list} and list_encodings();
d16 7
a22 8
defined $Opt{resolve} and resolve_encoding($Opt{resolve});
$Opt{from} || $Opt{to} || help();
my $from = $Opt{from} || $locale or help("from_encoding unspecified");
my $to   = $Opt{to}   || $locale or help("to_encoding unspecified");
$Opt{string} and Encode::from_to($Opt{string}, $from, $to) and print $Opt{string} and exit;
my $scheme = exists $Scheme{$Opt{Scheme}} ? $Opt{Scheme} :  'from_to';
$Opt{check} ||= $Opt{c};
$Opt{perlqq} and $Opt{check} = Encode::FB_PERLQQ;
d24 1
a24 1
if ($Opt{debug}){
d37 1
a37 1
	Encode::from_to($_, $from, $to, $Opt{check}); print;
d42 1
a42 1
       my $decoded = decode($from, $_, $Opt{check});
d51 2
a52 2
} else { # won't reach
    die "$name: unknown scheme: $scheme";
d57 1
a57 11
    exit 0;
}

sub resolve_encoding {
    if (my $alias = Encode::resolve_alias($_[0])) {
	print $alias, "\n";
	exit 0;
    } else {
	warn "$name: $_[0] is not known to Encode\n";
	exit 1;
    }
d62 2
d68 4
a71 15
$name -r encoding_alias
  -l,--list
     lists all available encodings
  -r,--resolve encoding_alias
    resolve encoding to its (Encode) canonical name
  -f,--from from_encoding  
     when omitted, the current locale will be used
  -t,--to to_encoding    
     when omitted, the current locale will be used
  -s,--string string         
     "string" will be the input instead of STDIN or files
The following are mainly of interest to Encode hackers:
  -D,--debug          show debug information
  -C N | -c | -p      check the validity of the input
  -S,--scheme scheme  use the scheme for conversion
a85 5
  piconv [-C N|-c|-p]
  piconv -S scheme ...
  piconv -r encoding
  piconv -D ...
  piconv -h
d97 1
a97 2
Here is the list of options.  Each option can be in short format (-f)
or long (--from).
d101 1
a101 1
=item -f,--from from_encoding
d106 1
a106 1
=item -t,--to to_encoding
d114 1
a114 1
=item -s,--string I<string>
d116 1
a116 1
uses I<string> instead of file for the source of text.
d118 1
a118 1
=item -l,--list
d127 1
a127 1
=item -C,--check I<N>
d136 1
a136 1
=item -p,--perlqq
d140 1
a140 1
=item -h,--help
d144 1
a144 1
=item -D,--debug
d148 1
a148 1
=item -S,--scheme scheme
d176 2
a177 2
L<iconv/1>
L<locale/3>
@


1.1.1.3
log
@perl 5.8.3 from CPAN
@
text
@d13 1
a13 1
use Getopt::Long qw(:config no_ignore_case);
@


1.1.1.4
log
@Import of stock perl 5.8.5
@
text
@d2 1
a2 1
# $Id: piconv,v 2.0 2004/05/16 20:55:16 dankogai Exp $
@


1.1.1.5
log
@perl 5.8.6 from CPAN
@
text
@d2 1
a2 1
# $Id: piconv,v 2.1 2004/10/06 05:07:20 dankogai Exp $
d55 19
a73 33
# we do not use <> (or ARGV) for the sake of binmode()
@@ARGV or push @@ARGV, \*STDIN; 

unless ($scheme eq 'perlio'){
    binmode STDOUT;
    for my $argv (@@ARGV){
	my $ifh = ref $argv ? $argv : undef;
	$ifh or open $ifh, "<", $argv or next;
	binmode $ifh;
	if ($scheme eq 'from_to'){ 	    # default
	    while(<$ifh>){
		Encode::from_to($_, $from, $to, $Opt{check}); 
		print;
	    }
	}elsif ($scheme eq 'decode_encode'){ # step-by-step
	    while(<$ifh>){
		my $decoded = decode($from, $_, $Opt{check});
		my $encoded = encode($to, $decoded);
		print $encoded;
	    }
	} else { # won't reach
	    die "$name: unknown scheme: $scheme";
	}
    }
}else{
    # NI-S favorite
    binmode STDOUT => "raw:encoding($to)";
    for my $argv (@@ARGV){
	my $ifh = ref $argv ? $argv : undef;
	$ifh or open $ifh, "<", $argv or next;
	binmode $ifh => "raw:encoding($from)";
	print while(<$ifh>);
    }
@


1.1.1.6
log
@import perl 5.10.0 from CPAN
@
text
@d2 1
a2 1
# $Id: piconv,v 2.3 2007/04/06 12:53:41 dankogai Exp $
d20 12
a31 14
         'from|f=s',
         'to|t=s',
         'list|l',
         'string|s=s',
         'check|C=i',
         'c',
         'perlqq|p',
         'htmlcref',
         'xmlcref',
         'debug|D',
         'scheme|S=s',
         'resolve|r=s',
         'help',
         );
d41 1
a41 1
my $scheme = exists $Scheme{$Opt{scheme}} ? $Opt{scheme} :  'from_to';
d43 1
a43 3
$Opt{perlqq}   and $Opt{check} = Encode::PERLQQ;
$Opt{htmlcref} and $Opt{check} = Encode::HTMLCREF;
$Opt{xmlcref}  and $Opt{check} = Encode::XMLCREF;
d56 1
a56 1
@@ARGV or push @@ARGV, \*STDIN;
d58 1
a58 1
unless ( $scheme eq 'perlio' ) {
d60 18
a77 20
    for my $argv (@@ARGV) {
        my $ifh = ref $argv ? $argv : undef;
        $ifh or open $ifh, "<", $argv or next;
        binmode $ifh;
        if ( $scheme eq 'from_to' ) {    # default
            while (<$ifh>) {
                Encode::from_to( $_, $from, $to, $Opt{check} );
                print;
            }
        }
        elsif ( $scheme eq 'decode_encode' ) {    # step-by-step
            while (<$ifh>) {
                my $decoded = decode( $from, $_, $Opt{check} );
                my $encoded = encode( $to, $decoded );
                print $encoded;
            }
        }
        else {                                    # won't reach
            die "$name: unknown scheme: $scheme";
        }
d79 1
a79 3
}
else {

d82 5
a86 5
    for my $argv (@@ARGV) {
        my $ifh = ref $argv ? $argv : undef;
        $ifh or open $ifh, "<", $argv or next;
        binmode $ifh => "raw:encoding($from)";
        print while (<$ifh>);
d90 2
a91 2
sub list_encodings {
    print join( "\n", Encode->encodings(":all") ), "\n";
d96 6
a101 7
    if ( my $alias = Encode::resolve_alias( $_[0] ) ) {
        print $alias, "\n";
        exit 0;
    }
    else {
        warn "$name: $_[0] is not known to Encode\n";
        exit 1;
d105 1
a105 1
sub help {
d124 1
a124 1
  -C N | -c           check the validity of the input
a125 4
Those are handy when you can only see ascii characters:
  -p,--perlqq
  --htmlcref
  --xmlcref
d127 1
a127 1
    exit;
d198 1
a198 9
=item --htmlcref

=item --xmlcref

Applies PERLQQ, HTMLCREF, XMLCREF, respectively.  Try

  piconv -f utf8 -t ascii --perlqq

To see what it does.
a226 3

You should use this option if you are using UTF-16 and others which
linefeed is not $/.
@


1.1.1.7
log
@import perl 5.10.1
@
text
@d2 1
a2 1
# $Id: piconv,v 2.4 2009/07/08 13:34:15 dankogai Exp $
d43 1
a43 13
my $scheme = do {
    if (defined $Opt{scheme}) {
	if (!exists $Scheme{$Opt{scheme}}) {
	    warn "Unknown scheme '$Opt{scheme}', fallback to 'from_to'.\n";
	    'from_to';
	} else {
	    $Opt{scheme};
	}
    } else {
	'from_to';
    }
};

a58 2
my %use_bom = map { $_ => 1 } qw/UTF-16 UTF-32/;

a63 1
    my $need2slurp = $use_bom{ find_encoding($to)->name };
a65 1
	$ifh or open $ifh, "<", $argv or warn "Can't open $argv: $!" and next;
d69 4
a72 11
	    if ($need2slurp){
		local $/;
		$_ = <$ifh>;
		Encode::from_to( $_, $from, $to, $Opt{check} );
		print;
	    }else{
		while (<$ifh>) {
		    Encode::from_to( $_, $from, $to, $Opt{check} );
		    print;
		}
	    }
d75 1
a75 3
	    if ($need2slurp){
		local $/;
		$_ = <$ifh>;
d79 3
a81 9
	    }else{
		while (<$ifh>) {
		    my $decoded = decode( $from, $_, $Opt{check} );
		    my $encoded = encode( $to, $decoded );
		    print $encoded;
		}
	    }
	}
	else {                                    # won't reach
a91 1
	$ifh or open $ifh, "<", $argv or warn "Can't open $argv: $!" and next;
d260 2
a261 2
L<iconv(1)>
L<locale(3)>
@


