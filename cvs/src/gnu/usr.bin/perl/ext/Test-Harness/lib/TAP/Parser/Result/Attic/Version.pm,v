head	1.2;
access;
symbols
	OPENBSD_4_8:1.1.1.1.0.4
	OPENBSD_4_8_BASE:1.1.1.1
	OPENBSD_4_7:1.1.1.1.0.2
	OPENBSD_4_7_BASE:1.1.1.1
	PERL_5_10_1:1.1.1.1
	CPAN:1.1.1;
locks; strict;
comment	@# @;


1.2
date	2010.09.24.14.59.29;	author millert;	state dead;
branches;
next	1.1;

1.1
date	2009.10.12.18.11.21;	author millert;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	2009.10.12.18.11.21;	author millert;	state Exp;
branches;
next	;


desc
@@


1.2
log
@remove files no longer in perl 5.12.2 (or that have moved)
@
text
@package TAP::Parser::Result::Version;

use strict;

use vars qw($VERSION @@ISA);
use TAP::Parser::Result;
@@ISA = 'TAP::Parser::Result';

=head1 NAME

TAP::Parser::Result::Version - TAP syntax version token.

=head1 VERSION

Version 3.17

=cut

$VERSION = '3.17';

=head1 DESCRIPTION

This is a subclass of L<TAP::Parser::Result>.  A token of this class will be
returned if a version line is encountered.

 TAP version 13
 ok 1
 not ok 2

The first version of TAP to include an explicit version number is 13.

=head1 OVERRIDDEN METHODS

Mainly listed here to shut up the pitiful screams of the pod coverage tests.
They keep me awake at night.

=over 4

=item * C<as_string>

=item * C<raw>

=back

=cut

##############################################################################

=head2 Instance Methods

=head3 C<version> 

  if ( $result->is_version ) {
     print $result->version;
  }

This is merely a synonym for C<as_string>.

=cut

sub version { shift->{version} }

1;
@


1.1
log
@Initial revision
@
text
@@


1.1.1.1
log
@import perl 5.10.1
@
text
@@
