head	1.2;
access;
symbols
	PERL_5_24_2:1.1.1.7
	OPENBSD_6_1:1.2.0.4
	OPENBSD_6_1_BASE:1.2
	OPENBSD_6_0:1.1.1.6.0.12
	OPENBSD_6_0_BASE:1.1.1.6
	OPENBSD_5_9:1.1.1.6.0.6
	OPENBSD_5_9_BASE:1.1.1.6
	OPENBSD_5_8:1.1.1.6.0.8
	OPENBSD_5_8_BASE:1.1.1.6
	PERL_5_20_2:1.1.1.6
	OPENBSD_5_7:1.1.1.6.0.2
	OPENBSD_5_7_BASE:1.1.1.6
	PERL_5_20_1:1.1.1.6
	OPENBSD_5_6:1.1.1.6.0.4
	OPENBSD_5_6_BASE:1.1.1.6
	PERL_5_18_2:1.1.1.6
	PERL:1.1.1
	OPENBSD_5_5:1.1.1.5.0.6
	OPENBSD_5_5_BASE:1.1.1.5
	OPENBSD_5_4:1.1.1.5.0.2
	OPENBSD_5_4_BASE:1.1.1.5
	PERL_5_16_3:1.1.1.5
	OPENBSD_5_3:1.1.1.4.0.10
	OPENBSD_5_3_BASE:1.1.1.4
	OPENBSD_5_2:1.1.1.4.0.8
	OPENBSD_5_2_BASE:1.1.1.4
	OPENBSD_5_1_BASE:1.1.1.4
	OPENBSD_5_1:1.1.1.4.0.6
	OPENBSD_5_0:1.1.1.4.0.4
	OPENBSD_5_0_BASE:1.1.1.4
	OPENBSD_4_9:1.1.1.4.0.2
	OPENBSD_4_9_BASE:1.1.1.4
	PERL_5_12_2:1.1.1.4
	OPENBSD_4_8:1.1.1.3.0.8
	OPENBSD_4_8_BASE:1.1.1.3
	OPENBSD_4_7:1.1.1.3.0.4
	OPENBSD_4_7_BASE:1.1.1.3
	PERL_5_10_1:1.1.1.3
	OPENBSD_4_6:1.1.1.3.0.6
	OPENBSD_4_6_BASE:1.1.1.3
	OPENBSD_4_5:1.1.1.3.0.2
	OPENBSD_4_5_BASE:1.1.1.3
	PERL_5_10_0:1.1.1.3
	OPENBSD_4_4:1.1.1.2.0.10
	OPENBSD_4_4_BASE:1.1.1.2
	OPENBSD_4_3:1.1.1.2.0.8
	OPENBSD_4_3_BASE:1.1.1.2
	OPENBSD_4_2:1.1.1.2.0.6
	OPENBSD_4_2_BASE:1.1.1.2
	OPENBSD_4_1:1.1.1.2.0.4
	OPENBSD_4_1_BASE:1.1.1.2
	OPENBSD_4_0:1.1.1.2.0.2
	OPENBSD_4_0_BASE:1.1.1.2
	PERL_5_8_8:1.1.1.2
	OPENBSD_3_9:1.1.1.1.0.6
	OPENBSD_3_9_BASE:1.1.1.1
	OPENBSD_3_8:1.1.1.1.0.4
	OPENBSD_3_8_BASE:1.1.1.1
	OPENBSD_3_7:1.1.1.1.0.2
	OPENBSD_3_7_BASE:1.1.1.1
	PERL_5_8_6:1.1.1.1
	CPAN:1.1.1;
locks; strict;
comment	@# @;
expand	@o@;


1.2
date	2017.02.05.00.32.11;	author afresh1;	state Exp;
branches;
next	1.1;
commitid	cxJ08BvJA9Pt2PTM;

1.1
date	2005.01.15.21.16.43;	author millert;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	2005.01.15.21.16.43;	author millert;	state Exp;
branches;
next	1.1.1.2;

1.1.1.2
date	2006.03.28.18.47.54;	author millert;	state Exp;
branches;
next	1.1.1.3;

1.1.1.3
date	2008.09.29.17.18.14;	author millert;	state Exp;
branches;
next	1.1.1.4;

1.1.1.4
date	2010.09.24.14.48.52;	author millert;	state Exp;
branches;
next	1.1.1.5;

1.1.1.5
date	2013.03.25.20.08.43;	author sthen;	state Exp;
branches;
next	1.1.1.6;

1.1.1.6
date	2014.03.24.14.59.01;	author afresh1;	state Exp;
branches;
next	1.1.1.7;

1.1.1.7
date	2017.08.14.13.46.10;	author afresh1;	state Exp;
branches;
next	;
commitid	fAzrs78vdW2Yfc6A;


desc
@@


1.2
log
@Fix merge issues, remove excess files - match perl-5.24.1 dist
@
text
@#!perl

BEGIN {
    unshift @@INC, 't';
    require Config;
    if (($Config::Config{'extensions'} !~ /\bB\b/) ){
        print "1..0 # Skip -- Perl configured without B module\n";
        exit 0;
    }
    if (!$Config::Config{useperlio}) {
        print "1..0 # Skip -- need perlio to walk the optree\n";
        exit 0;
    }
}
use OptreeCheck;
use Config;
plan tests => 21;

pass("SORT OPTIMIZATION");

checkOptree ( name	=> 'sub {sort @@a}',
	      code	=> sub {sort @@a},
	      bcopts	=> '-exec',
	      strip_open_hints => 1,
	      expect	=> <<'EOT_EOT', expect_nt => <<'EONT_EONT');
# 1  <;> nextstate(main 424 optree_sort.t:14) v:>,<,%
# 2  <0> pushmark s
# 3  <#> gv[*a] s
# 4  <1> rv2av[t2] lK/1
# 5  <@@> sort K
# 6  <1> leavesub[1 ref] K/REFC,1
EOT_EOT
# 1  <;> nextstate(main 424 optree_sort.t:14) v:>,<,%
# 2  <0> pushmark s
# 3  <$> gv(*a) s
# 4  <1> rv2av[t1] lK/1
# 5  <@@> sort K
# 6  <1> leavesub[1 ref] K/REFC,1
EONT_EONT

checkOptree ( name => 'sort @@a',
	      prog => 'sort @@a',
	      errs => [ 'Useless use of sort in void context at -e line 1.',
			'Name "main::a" used only once: possible typo at -e line 1.',
			],
	      bcopts => '-exec',
	      strip_open_hints => 1,
	      expect => <<'EOT_EOT', expect_nt => <<'EONT_EONT');
1  <0> enter 
2  <;> nextstate(main 1 -e:1) v:>,<,%,{
3  <0> pushmark s
4  <#> gv[*a] s
5  <1> rv2av[t2] lK/1
6  <@@> sort vK
7  <@@> leave[1 ref] vKP/REFC
EOT_EOT
# 1  <0> enter 
# 2  <;> nextstate(main 1 -e:1) v:>,<,%,{
# 3  <0> pushmark s
# 4  <$> gv(*a) s
# 5  <1> rv2av[t1] lK/1
# 6  <@@> sort vK
# 7  <@@> leave[1 ref] vKP/REFC
EONT_EONT

checkOptree ( name	=> 'sub {@@a = sort @@a}',
	      code	=> sub {@@a = sort @@a},
	      bcopts	=> '-exec',
	      strip_open_hints => 1,
	      expect	=> <<'EOT_EOT', expect_nt => <<'EONT_EONT');
1  <;> nextstate(main -438 optree.t:244) v:>,<,%
2  <0> pushmark s
3  <0> pushmark s
4  <#> gv[*a] s
5  <1> rv2av[t4] lK/1
6  <@@> sort lK
7  <0> pushmark s
8  <#> gv[*a] s
9  <1> rv2av[t2] lKRM*/1
a  <2> aassign[t5] KS/COM_AGG
b  <1> leavesub[1 ref] K/REFC,1
EOT_EOT
# 1  <;> nextstate(main 65 optree.t:311) v:>,<,%
# 2  <0> pushmark s
# 3  <0> pushmark s
# 4  <$> gv(*a) s
# 5  <1> rv2av[t2] lK/1
# 6  <@@> sort lK
# 7  <0> pushmark s
# 8  <$> gv(*a) s
# 9  <1> rv2av[t1] lKRM*/1
# a  <2> aassign[t3] KS/COM_AGG
# b  <1> leavesub[1 ref] K/REFC,1
EONT_EONT

checkOptree ( name	=> '@@a = sort @@a',
	      prog	=> '@@a = sort @@a',
	      bcopts	=> '-exec',
	      strip_open_hints => 1,
	      expect	=> <<'EOT_EOT', expect_nt => <<'EONT_EONT');
1  <0> enter 
2  <;> nextstate(main 1 -e:1) v:>,<,%,{
3  <0> pushmark s
4  <0> pushmark s
5  <#> gv[*a] s
6  <1> rv2av[t4] lKRM*/1
7  <@@> sort lK/INPLACE
8  <@@> leave[1 ref] vKP/REFC
EOT_EOT
# 1  <0> enter 
# 2  <;> nextstate(main 1 -e:1) v:>,<,%,{
# 3  <0> pushmark s
# 4  <0> pushmark s
# 5  <$> gv(*a) s
# 6  <1> rv2av[t2] lKRM*/1
# 7  <@@> sort lK/INPLACE
# 8  <@@> leave[1 ref] vKP/REFC
EONT_EONT

checkOptree ( name	=> 'sub {@@a = sort @@a; reverse @@a}',
	      code	=> sub {@@a = sort @@a; reverse @@a},
	      bcopts	=> '-exec',
	      strip_open_hints => 1,
	      expect	=> <<'EOT_EOT', expect_nt => <<'EONT_EONT');
1  <;> nextstate(main -438 optree.t:286) v:>,<,%
2  <0> pushmark s
3  <0> pushmark s
4  <#> gv[*a] s
5  <1> rv2av[t4] lKRM*/1
6  <@@> sort lK/INPLACE
7  <;> nextstate(main -438 optree.t:288) v:>,<,%
8  <0> pushmark s
9  <#> gv[*a] s
a  <1> rv2av[t7] lK/1
b  <@@> reverse[t8] K/1
c  <1> leavesub[1 ref] K/REFC,1
EOT_EOT
# 1  <;> nextstate(main 66 optree.t:345) v:>,<,%
# 2  <0> pushmark s
# 3  <0> pushmark s
# 4  <$> gv(*a) s
# 5  <1> rv2av[t2] lKRM*/1
# 6  <@@> sort lK/INPLACE
# 7  <;> nextstate(main 66 optree.t:346) v:>,<,%
# 8  <0> pushmark s
# 9  <$> gv(*a) s
# a  <1> rv2av[t4] lK/1
# b  <@@> reverse[t5] K/1
# c  <1> leavesub[1 ref] K/REFC,1
EONT_EONT

checkOptree ( name	=> '@@a = sort @@a; reverse @@a',
	      prog	=> '@@a = sort @@a; reverse @@a',
	      errs      => ['Useless use of reverse in void context at -e line 1.'],
	      bcopts	=> '-exec',
	      strip_open_hints => 1,
	      expect	=> <<'EOT_EOT', expect_nt => <<'EONT_EONT');
1  <0> enter 
2  <;> nextstate(main 1 -e:1) v:>,<,%,{
3  <0> pushmark s
4  <0> pushmark s
5  <#> gv[*a] s
6  <1> rv2av[t4] lKRM*/1
7  <@@> sort lK/INPLACE
8  <;> nextstate(main 1 -e:1) v:>,<,%,{
9  <0> pushmark s
a  <#> gv[*a] s
b  <1> rv2av[t7] lK/1
c  <@@> reverse[t8] vK/1
d  <@@> leave[1 ref] vKP/REFC
EOT_EOT
# 1  <0> enter 
# 2  <;> nextstate(main 1 -e:1) v:>,<,%,{
# 3  <0> pushmark s
# 4  <0> pushmark s
# 5  <$> gv(*a) s
# 6  <1> rv2av[t2] lKRM*/1
# 7  <@@> sort lK/INPLACE
# 8  <;> nextstate(main 1 -e:1) v:>,<,%,{
# 9  <0> pushmark s
# a  <$> gv(*a) s
# b  <1> rv2av[t4] lK/1
# c  <@@> reverse[t5] vK/1
# d  <@@> leave[1 ref] vKP/REFC
EONT_EONT

checkOptree ( name	=> 'sub {my @@a; @@a = sort @@a}',
	      code	=> sub {my @@a; @@a = sort @@a},
	      bcopts	=> '-exec',
	      strip_open_hints => 1,
	      expect	=> <<'EOT_EOT', expect_nt => <<'EONT_EONT');
1  <;> nextstate(main -437 optree.t:254) v:>,<,%
2  <0> padav[@@a:-437,-436] vM/LVINTRO
3  <;> nextstate(main -436 optree.t:256) v:>,<,%
4  <0> pushmark s
5  <0> pushmark s
6  <0> padav[@@a:-437,-436] l
7  <@@> sort lK
8  <0> pushmark s
9  <0> padav[@@a:-437,-436] lRM*
a  <2> aassign[t2] KS/COM_AGG
b  <1> leavesub[1 ref] K/REFC,1
EOT_EOT
# 1  <;> nextstate(main 427 optree_sort.t:172) v:>,<,%
# 2  <0> padav[@@a:427,428] vM/LVINTRO
# 3  <;> nextstate(main 428 optree_sort.t:173) v:>,<,%
# 4  <0> pushmark s
# 5  <0> pushmark s
# 6  <0> padav[@@a:427,428] l
# 7  <@@> sort lK
# 8  <0> pushmark s
# 9  <0> padav[@@a:-437,-436] lRM*
# a  <2> aassign[t2] KS/COM_AGG
# b  <1> leavesub[1 ref] K/REFC,1
EONT_EONT

checkOptree ( name	=> 'my @@a; @@a = sort @@a',
	      prog	=> 'my @@a; @@a = sort @@a',
	      bcopts	=> '-exec',
	      strip_open_hints => 1,
	      expect	=> <<'EOT_EOT', expect_nt => <<'EONT_EONT');
1  <0> enter 
2  <;> nextstate(main 1 -e:1) v:>,<,%,{
3  <0> padav[@@a:1,2] vM/LVINTRO
4  <;> nextstate(main 2 -e:1) v:>,<,%,{
5  <0> pushmark s
6  <0> pushmark s
7  <0> padav[@@a:1,2] lRM*
8  <@@> sort lK/INPLACE
9  <@@> leave[1 ref] vKP/REFC
EOT_EOT
# 1  <0> enter 
# 2  <;> nextstate(main 1 -e:1) v:>,<,%,{
# 3  <0> padav[@@a:1,2] vM/LVINTRO
# 4  <;> nextstate(main 2 -e:1) v:>,<,%,{
# 5  <0> pushmark s
# 6  <0> pushmark s
# 7  <0> padav[@@a:1,2] lRM*
# 8  <@@> sort lK/INPLACE
# 9  <@@> leave[1 ref] vKP/REFC
EONT_EONT

checkOptree ( name	=> 'sub {my @@a; @@a = sort @@a; push @@a, 1}',
	      code	=> sub {my @@a; @@a = sort @@a; push @@a, 1},
	      bcopts	=> '-exec',
	      debug	=> 0,
	      strip_open_hints => 1,
	      expect	=> <<'EOT_EOT', expect_nt => <<'EONT_EONT');
1  <;> nextstate(main -437 optree.t:325) v:>,<,%
2  <0> padav[@@a:-437,-436] vM/LVINTRO
3  <;> nextstate(main -436 optree.t:325) v:>,<,%
4  <0> pushmark s
5  <0> pushmark s
6  <0> padav[@@a:-437,-436] lRM*
7  <@@> sort lK/INPLACE
8  <;> nextstate(main -436 optree.t:325) v:>,<,%,{
9  <0> pushmark s
a  <0> padav[@@a:-437,-436] lRM
b  <$> const[IV 1] s
c  <@@> push[t3] sK/2
d  <1> leavesub[1 ref] K/REFC,1
EOT_EOT
# 1  <;> nextstate(main 429 optree_sort.t:219) v:>,<,%
# 2  <0> padav[@@a:429,430] vM/LVINTRO
# 3  <;> nextstate(main 430 optree_sort.t:220) v:>,<,%
# 4  <0> pushmark s
# 5  <0> pushmark s
# 6  <0> padav[@@a:429,430] lRM*
# 7  <@@> sort lK/INPLACE
# 8  <;> nextstate(main 430 optree_sort.t:220) v:>,<,%,{
# 9  <0> pushmark s
# a  <0> padav[@@a:429,430] lRM
# b  <$> const(IV 1) s
# c  <@@> push[t3] sK/2
# d  <1> leavesub[1 ref] K/REFC,1
EONT_EONT

checkOptree ( name	=> 'sub {my @@a; @@a = sort @@a; 1}',
	      code	=> sub {my @@a; @@a = sort @@a; 1},
	      bcopts	=> '-exec',
	      debug	=> 0,
	      strip_open_hints => 1,
	      expect	=> <<'EOT_EOT', expect_nt => <<'EONT_EONT');
1  <;> nextstate(main -437 optree.t:325) v:>,<,%
2  <0> padav[@@a:-437,-436] vM/LVINTRO
3  <;> nextstate(main -436 optree.t:325) v:>,<,%
4  <0> pushmark s
5  <0> pushmark s
6  <0> padav[@@a:-437,-436] lRM*
7  <@@> sort lK/INPLACE
8  <;> nextstate(main -436 optree.t:346) v:>,<,%,{
9  <$> const[IV 1] s
a  <1> leavesub[1 ref] K/REFC,1
EOT_EOT
# 1  <;> nextstate(main 431 optree_sort.t:250) v:>,<,%
# 2  <0> padav[@@a:431,432] vM/LVINTRO
# 3  <;> nextstate(main 432 optree_sort.t:251) v:>,<,%
# 4  <0> pushmark s
# 5  <0> pushmark s
# 6  <0> padav[@@a:431,432] lRM*
# 7  <@@> sort lK/INPLACE
# 8  <;> nextstate(main 432 optree_sort.t:251) v:>,<,%,{
# 9  <$> const(IV 1) s
# a  <1> leavesub[1 ref] K/REFC,1
EONT_EONT
@


1.1
log
@Initial revision
@
text
@d4 1
a4 2
    chdir 't';
    @@INC = ('../lib', '../ext/B/t');
d10 4
a13 1
    require './test.pl';
d17 1
a17 4
plan tests => 11;

SKIP: {
skip "no perlio in this build", 11 unless $Config::Config{useperlio};
d24 1
d26 1
a26 1
# 1  <;> nextstate(main 424 optree_sort.t:14) v
d33 1
a33 1
# 1  <;> nextstate(main 424 optree_sort.t:14) v
d41 8
a48 4
checkOptree ( name	=> 'sort @@a',
	      prog	=> 'sort @@a',
	      bcopts	=> '-exec',
	      expect	=> <<'EOT_EOT', expect_nt => <<'EONT_EONT');
d50 1
a50 1
2  <;> nextstate(main 1 -e:1) v
d58 1
a58 1
# 2  <;> nextstate(main 1 -e:1) v
d69 1
d71 1
a71 1
1  <;> nextstate(main -438 optree.t:244) v
d80 1
a80 1
a  <2> aassign[t\d+] KS/COMMON
d83 1
a83 1
# 1  <;> nextstate(main 65 optree.t:311) v
d92 1
a92 1
# a  <2> aassign[t3] KS/COMMON
d99 1
d102 1
a102 1
2  <;> nextstate(main 1 -e:1) v
d111 1
a111 1
# 2  <;> nextstate(main 1 -e:1) v
d123 1
d125 1
a125 1
1  <;> nextstate(main -438 optree.t:286) v
d131 1
a131 1
7  <;> nextstate(main -438 optree.t:288) v
d138 1
a138 1
# 1  <;> nextstate(main 66 optree.t:345) v
d144 1
a144 1
# 7  <;> nextstate(main 66 optree.t:346) v
d154 1
d156 1
d159 1
a159 1
2  <;> nextstate(main 1 -e:1) v
d165 1
a165 1
8  <;> nextstate(main 1 -e:1) v
d173 1
a173 1
# 2  <;> nextstate(main 1 -e:1) v
d179 1
a179 1
# 8  <;> nextstate(main 1 -e:1) v
d190 1
d192 1
a192 1
1  <;> nextstate(main -437 optree.t:254) v
d194 1
a194 1
3  <;> nextstate(main -436 optree.t:256) v
d201 1
a201 1
a  <2> aassign[t\d+] KS/COMMON
d204 1
a204 1
# 1  <;> nextstate(main 427 optree_sort.t:172) v
d206 1
a206 1
# 3  <;> nextstate(main 428 optree_sort.t:173) v
d212 2
a213 2
# 9  <0> padav[@@a:427,428] lRM*
# a  <2> aassign[t2] KS/COMMON
d220 1
d223 1
a223 1
2  <;> nextstate(main 1 -e:1) v
d225 1
a225 1
4  <;> nextstate(main 2 -e:1) v
d233 1
a233 1
# 2  <;> nextstate(main 1 -e:1) v
d235 1
a235 1
# 4  <;> nextstate(main 2 -e:1) v
d247 1
d249 1
a249 1
1  <;> nextstate(main -437 optree.t:325) v
d251 1
a251 1
3  <;> nextstate(main -436 optree.t:325) v
d256 1
a256 1
8  <;> nextstate(main -436 optree.t:325) v
d263 1
a263 1
# 1  <;> nextstate(main 429 optree_sort.t:219) v
d265 1
a265 1
# 3  <;> nextstate(main 430 optree_sort.t:220) v
d270 1
a270 1
# 8  <;> nextstate(main 430 optree_sort.t:220) v
d282 1
d284 1
a284 1
1  <;> nextstate(main -437 optree.t:325) v
d286 1
a286 1
3  <;> nextstate(main -436 optree.t:325) v
d291 1
a291 1
8  <;> nextstate(main -436 optree.t:346) v
d295 1
a295 1
# 1  <;> nextstate(main 431 optree_sort.t:250) v
d297 1
a297 1
# 3  <;> nextstate(main 432 optree_sort.t:251) v
d302 1
a302 1
# 8  <;> nextstate(main 432 optree_sort.t:251) v
a305 5

} #skip

__END__

@


1.1.1.1
log
@perl 5.8.6 from CPAN
@
text
@@


1.1.1.2
log
@perl 5.8.8 import
@
text
@d4 2
a5 7
    if ($ENV{PERL_CORE}){
	chdir('t') if -d 't';
	@@INC = ('.', '../lib', '../ext/B/t');
    } else {
	unshift @@INC, 't';
	push @@INC, "../../t";
    }
d11 1
a11 1
    # require 'test.pl'; # now done by OptreeCheck
d41 4
a44 7
checkOptree ( name => 'sort @@a',
	      prog => 'sort @@a',
	      errs => [ 'Useless use of sort in void context at -e line 1.',
			'Name "main::a" used only once: possible typo at -e line 1.',
			],
	      bcopts => '-exec',
	      expect => <<'EOT_EOT', expect_nt => <<'EONT_EONT');
d75 1
a75 1
a  <2> aassign[t5] KS/COMMON
a146 1
	      errs      => ['Useless use of reverse in void context at -e line 1.'],
d191 1
a191 1
a  <2> aassign[t2] KS/COMMON
@


1.1.1.3
log
@import perl 5.10.0 from CPAN
@
text
@a29 1
	      strip_open_hints => 1,
d31 1
a31 1
# 1  <;> nextstate(main 424 optree_sort.t:14) v:>,<,%
d38 1
a38 1
# 1  <;> nextstate(main 424 optree_sort.t:14) v:>,<,%
a51 1
	      strip_open_hints => 1,
d54 1
a54 1
2  <;> nextstate(main 1 -e:1) v:>,<,%,{
d62 1
a62 1
# 2  <;> nextstate(main 1 -e:1) v:>,<,%,{
a72 1
	      strip_open_hints => 1,
d74 1
a74 1
1  <;> nextstate(main -438 optree.t:244) v:>,<,%
d86 1
a86 1
# 1  <;> nextstate(main 65 optree.t:311) v:>,<,%
a101 1
	      strip_open_hints => 1,
d104 1
a104 1
2  <;> nextstate(main 1 -e:1) v:>,<,%,{
d113 1
a113 1
# 2  <;> nextstate(main 1 -e:1) v:>,<,%,{
a124 1
	      strip_open_hints => 1,
d126 1
a126 1
1  <;> nextstate(main -438 optree.t:286) v:>,<,%
d132 1
a132 1
7  <;> nextstate(main -438 optree.t:288) v:>,<,%
d139 1
a139 1
# 1  <;> nextstate(main 66 optree.t:345) v:>,<,%
d145 1
a145 1
# 7  <;> nextstate(main 66 optree.t:346) v:>,<,%
a156 1
	      strip_open_hints => 1,
d159 1
a159 1
2  <;> nextstate(main 1 -e:1) v:>,<,%,{
d165 1
a165 1
8  <;> nextstate(main 1 -e:1) v:>,<,%,{
d173 1
a173 1
# 2  <;> nextstate(main 1 -e:1) v:>,<,%,{
d179 1
a179 1
# 8  <;> nextstate(main 1 -e:1) v:>,<,%,{
a189 1
	      strip_open_hints => 1,
d191 1
a191 1
1  <;> nextstate(main -437 optree.t:254) v:>,<,%
d193 1
a193 1
3  <;> nextstate(main -436 optree.t:256) v:>,<,%
d203 1
a203 1
# 1  <;> nextstate(main 427 optree_sort.t:172) v:>,<,%
d205 1
a205 1
# 3  <;> nextstate(main 428 optree_sort.t:173) v:>,<,%
a218 1
	      strip_open_hints => 1,
d221 1
a221 1
2  <;> nextstate(main 1 -e:1) v:>,<,%,{
d223 1
a223 1
4  <;> nextstate(main 2 -e:1) v:>,<,%,{
d231 1
a231 1
# 2  <;> nextstate(main 1 -e:1) v:>,<,%,{
d233 1
a233 1
# 4  <;> nextstate(main 2 -e:1) v:>,<,%,{
a244 1
	      strip_open_hints => 1,
d246 1
a246 1
1  <;> nextstate(main -437 optree.t:325) v:>,<,%
d248 1
a248 1
3  <;> nextstate(main -436 optree.t:325) v:>,<,%
d253 1
a253 1
8  <;> nextstate(main -436 optree.t:325) v:>,<,%,{
d260 1
a260 1
# 1  <;> nextstate(main 429 optree_sort.t:219) v:>,<,%
d262 1
a262 1
# 3  <;> nextstate(main 430 optree_sort.t:220) v:>,<,%
d267 1
a267 1
# 8  <;> nextstate(main 430 optree_sort.t:220) v:>,<,%,{
a278 1
	      strip_open_hints => 1,
d280 1
a280 1
1  <;> nextstate(main -437 optree.t:325) v:>,<,%
d282 1
a282 1
3  <;> nextstate(main -436 optree.t:325) v:>,<,%
d287 1
a287 1
8  <;> nextstate(main -436 optree.t:346) v:>,<,%,{
d291 1
a291 1
# 1  <;> nextstate(main 431 optree_sort.t:250) v:>,<,%
d293 1
a293 1
# 3  <;> nextstate(main 432 optree_sort.t:251) v:>,<,%
d298 1
a298 1
# 8  <;> nextstate(main 432 optree_sort.t:251) v:>,<,%,{
@


1.1.1.4
log
@Perl 5.12.2 from CPAN
@
text
@d4 7
a10 1
    unshift @@INC, 't';
@


1.1.1.5
log
@import perl 5.16.3 from CPAN - worked on by Andrew Fresh and myself
@
text
@d10 1
a10 4
    if (!$Config::Config{useperlio}) {
        print "1..0 # Skip -- need perlio to walk the optree\n";
        exit 0;
    }
d14 4
a17 1
plan tests => 21;
d306 5
@


1.1.1.6
log
@Import perl-5.18.2

OK espie@@ sthen@@ deraadt@@
@
text
@d199 4
a202 3
8  <0> padrange[@@a:-437,-436] l/1
9  <2> aassign[t2] KS/COMMON
a  <1> leavesub[1 ref] K/REFC,1
d211 4
a214 3
# 8  <0> padrange[@@a:427,428] l/1
# 9  <2> aassign[t2] KS/COMMON
# a  <1> leavesub[1 ref] K/REFC,1
d227 4
a230 3
6  <0> padrange[@@a:1,2] l/1
7  <@@> sort lK/INPLACE
8  <@@> leave[1 ref] vKP/REFC
d237 4
a240 3
# 6  <0> padrange[@@a:1,2] l/1
# 7  <@@> sort lK/INPLACE
# 8  <@@> leave[1 ref] vKP/REFC
d253 9
a261 7
5  <0> padrange[@@a:-437,-436] l/1
6  <@@> sort lK/INPLACE
7  <;> nextstate(main -436 optree.t:325) v:>,<,%,{
8  <0> padrange[@@a:-437,-436] l/1
9  <$> const[IV 1] s
a  <@@> push[t3] sK/2
b  <1> leavesub[1 ref] K/REFC,1
d267 9
a275 7
# 5  <0> padrange[@@a:429,430] l/1
# 6  <@@> sort lK/INPLACE
# 7  <;> nextstate(main 430 optree_sort.t:220) v:>,<,%,{
# 8  <0> padrange[@@a:429,430] l/1
# 9  <$> const(IV 1) s
# a  <@@> push[t3] sK/2
# b  <1> leavesub[1 ref] K/REFC,1
d288 6
a293 5
5  <0> padrange[@@a:-437,-436] l/1
6  <@@> sort lK/INPLACE
7  <;> nextstate(main -436 optree.t:346) v:>,<,%,{
8  <$> const[IV 1] s
9  <1> leavesub[1 ref] K/REFC,1
d299 6
a304 5
# 5  <0> padrange[@@a:431,432] l/1
# 6  <@@> sort lK/INPLACE
# 7  <;> nextstate(main 432 optree_sort.t:251) v:>,<,%,{
# 8  <$> const(IV 1) s
# 9  <1> leavesub[1 ref] K/REFC,1
@


1.1.1.7
log
@Import perl-5.24.2
@
text
@d80 1
a80 1
a  <2> aassign[t5] KS/COM_AGG
d92 1
a92 1
# a  <2> aassign[t3] KS/COM_AGG
d199 3
a201 4
8  <0> pushmark s
9  <0> padav[@@a:-437,-436] lRM*
a  <2> aassign[t2] KS/COM_AGG
b  <1> leavesub[1 ref] K/REFC,1
d210 3
a212 4
# 8  <0> pushmark s
# 9  <0> padav[@@a:-437,-436] lRM*
# a  <2> aassign[t2] KS/COM_AGG
# b  <1> leavesub[1 ref] K/REFC,1
d225 3
a227 4
6  <0> pushmark s
7  <0> padav[@@a:1,2] lRM*
8  <@@> sort lK/INPLACE
9  <@@> leave[1 ref] vKP/REFC
d234 3
a236 4
# 6  <0> pushmark s
# 7  <0> padav[@@a:1,2] lRM*
# 8  <@@> sort lK/INPLACE
# 9  <@@> leave[1 ref] vKP/REFC
d249 7
a255 9
5  <0> pushmark s
6  <0> padav[@@a:-437,-436] lRM*
7  <@@> sort lK/INPLACE
8  <;> nextstate(main -436 optree.t:325) v:>,<,%,{
9  <0> pushmark s
a  <0> padav[@@a:-437,-436] lRM
b  <$> const[IV 1] s
c  <@@> push[t3] sK/2
d  <1> leavesub[1 ref] K/REFC,1
d261 7
a267 9
# 5  <0> pushmark s
# 6  <0> padav[@@a:429,430] lRM*
# 7  <@@> sort lK/INPLACE
# 8  <;> nextstate(main 430 optree_sort.t:220) v:>,<,%,{
# 9  <0> pushmark s
# a  <0> padav[@@a:429,430] lRM
# b  <$> const(IV 1) s
# c  <@@> push[t3] sK/2
# d  <1> leavesub[1 ref] K/REFC,1
d280 5
a284 6
5  <0> pushmark s
6  <0> padav[@@a:-437,-436] lRM*
7  <@@> sort lK/INPLACE
8  <;> nextstate(main -436 optree.t:346) v:>,<,%,{
9  <$> const[IV 1] s
a  <1> leavesub[1 ref] K/REFC,1
d290 5
a294 6
# 5  <0> pushmark s
# 6  <0> padav[@@a:431,432] lRM*
# 7  <@@> sort lK/INPLACE
# 8  <;> nextstate(main 432 optree_sort.t:251) v:>,<,%,{
# 9  <$> const(IV 1) s
# a  <1> leavesub[1 ref] K/REFC,1
@


