head	1.1;
branch	1.1.1;
access;
symbols
	OPENBSD_6_1_BASE:1.1.1.3
	OPENBSD_6_0:1.1.1.3.0.12
	OPENBSD_6_0_BASE:1.1.1.3
	OPENBSD_5_9:1.1.1.3.0.6
	OPENBSD_5_9_BASE:1.1.1.3
	OPENBSD_5_8:1.1.1.3.0.8
	OPENBSD_5_8_BASE:1.1.1.3
	PERL_5_20_2:1.1.1.3
	OPENBSD_5_7:1.1.1.3.0.2
	OPENBSD_5_7_BASE:1.1.1.3
	PERL_5_20_1:1.1.1.3
	OPENBSD_5_6:1.1.1.3.0.4
	OPENBSD_5_6_BASE:1.1.1.3
	PERL_5_18_2:1.1.1.3
	PERL:1.1.1
	OPENBSD_5_5:1.1.1.2.0.16
	OPENBSD_5_5_BASE:1.1.1.2
	OPENBSD_5_4:1.1.1.2.0.12
	OPENBSD_5_4_BASE:1.1.1.2
	PERL_5_16_3:1.1.1.2
	OPENBSD_5_3:1.1.1.2.0.10
	OPENBSD_5_3_BASE:1.1.1.2
	OPENBSD_5_2:1.1.1.2.0.8
	OPENBSD_5_2_BASE:1.1.1.2
	OPENBSD_5_1_BASE:1.1.1.2
	OPENBSD_5_1:1.1.1.2.0.6
	OPENBSD_5_0:1.1.1.2.0.4
	OPENBSD_5_0_BASE:1.1.1.2
	OPENBSD_4_9:1.1.1.2.0.2
	OPENBSD_4_9_BASE:1.1.1.2
	PERL_5_12_2:1.1.1.2
	OPENBSD_4_8:1.1.1.1.0.8
	OPENBSD_4_8_BASE:1.1.1.1
	OPENBSD_4_7:1.1.1.1.0.4
	OPENBSD_4_7_BASE:1.1.1.1
	PERL_5_10_1:1.1.1.1
	OPENBSD_4_6:1.1.1.1.0.6
	OPENBSD_4_6_BASE:1.1.1.1
	OPENBSD_4_5:1.1.1.1.0.2
	OPENBSD_4_5_BASE:1.1.1.1
	PERL_5_10_0:1.1.1.1
	CPAN:1.1.1;
locks; strict;
comment	@# @;
expand	@o@;


1.1
date	2008.09.29.17.18.14;	author millert;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	2008.09.29.17.18.14;	author millert;	state Exp;
branches;
next	1.1.1.2;

1.1.1.2
date	2010.09.24.14.48.52;	author millert;	state Exp;
branches;
next	1.1.1.3;

1.1.1.3
date	2014.03.24.14.59.01;	author afresh1;	state Exp;
branches;
next	;


desc
@@


1.1
log
@Initial revision
@
text
@#!./perl -w

BEGIN {    ## no critic strict
    if ( $ENV{PERL_CORE} ) {
        chdir('t') if -d 't';
	@@INC = qw(../lib . lib);
    }
    else {
        unshift @@INC, 't';
    }
    require Config;
    if ( ( $Config::Config{'extensions'} !~ /\bB\b/ ) ) {
        print "1..0 # Skip -- Perl configured without B module\n";
        exit 0;
    }
    if ( $] < 5.009 ) {
        print "1..0 # Skip -- No user pragmata in 5.8.x\n";
        exit 0;
    }
}

use strict;
use warnings;
use Test::More tests => 4 * 3;
use B 'svref_2object';

# use Data::Dumper 'Dumper';

sub foo {
    my ( $x, $y, $z );

    # hh => {},
    $z = $x * $y;

    # hh => { mypragma => 42 }
    use mypragma;
    $z = $x + $y;

    # hh => { mypragma => 0 }
    no mypragma;
    $z = $x - $y;
}

{

    # Pragmas don't appear til they're used.
    my $cop = find_op_cop( \&foo, qr/multiply/ );
    isa_ok( $cop, 'B::COP', 'found pp_multiply opnode' );

    my $rhe = $cop->hints_hash;
    isa_ok( $rhe, 'B::RHE', 'got hints_hash' );

    my $hints_hash = $rhe->HASH;
    is( ref($hints_hash), 'HASH', 'Got hash reference' );

    ok( not( exists $hints_hash->{mypragma} ), q[! exists mypragma] );
}

{

    # Pragmas can be fetched.
    my $cop = find_op_cop( \&foo, qr/add/ );
    isa_ok( $cop, 'B::COP', 'found pp_add opnode' );

    my $rhe = $cop->hints_hash;
    isa_ok( $rhe, 'B::RHE', 'got hints_hash' );

    my $hints_hash = $rhe->HASH;
    is( ref($hints_hash), 'HASH', 'Got hash reference' );

    is( $hints_hash->{mypragma}, 42, q[mypragma => 42] );
}

{

    # Pragmas can be changed.
    my $cop = find_op_cop( \&foo, qr/subtract/ );
    isa_ok( $cop, 'B::COP', 'found pp_subtract opnode' );

    my $rhe = $cop->hints_hash;
    isa_ok( $rhe, 'B::RHE', 'got hints_hash' );

    my $hints_hash = $rhe->HASH;
    is( ref($hints_hash), 'HASH', 'Got hash reference' );

    is( $hints_hash->{mypragma}, 0, q[mypragma => 0] );
}
exit;

our $COP;

sub find_op_cop {
    my ( $sub, $op ) = @@_;
    my $cv = svref_2object($sub);
    local $COP;

    if ( not _find_op_cop( $cv->ROOT, $op ) ) {
        $COP = undef;
    }

    return $COP;
}

{

    # Make B::NULL objects evaluate as false.
    package B::NULL;
    use overload 'bool' => sub () { !!0 };
}

sub _find_op_cop {
    my ( $op, $name ) = @@_;

    # Fail on B::NULL or whatever.
    return 0 if not $op;

    # Succeed when we find our match.
    return 1 if $op->name =~ $name;

    # Stash the latest seen COP opnode. This has our hints hash.
    if ( $op->isa('B::COP') ) {

        # print Dumper(
        #     {   cop   => $op,
        #         hints => $op->hints_hash->HASH
        #     }
        # );
        $COP = $op;
    }

    # Recurse depth first passing success up if it happens.
    if ( $op->can('first') ) {
        return 1 if _find_op_cop( $op->first, $name );
    }
    return 1 if _find_op_cop( $op->sibling, $name );

    # Oh well. Hopefully our caller knows where to try next.
    return 0;
}

@


1.1.1.1
log
@import perl 5.10.0 from CPAN
@
text
@@


1.1.1.2
log
@Perl 5.12.2 from CPAN
@
text
@d5 4
a8 2
	unshift @@INC, '../../t/lib';
    } else {
@


1.1.1.3
log
@Import perl-5.18.2

OK espie@@ sthen@@ deraadt@@
@
text
@d14 4
@


