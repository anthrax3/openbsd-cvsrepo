head	1.2;
access;
symbols
	OPENBSD_4_4:1.1.1.3.0.10
	OPENBSD_4_4_BASE:1.1.1.3
	OPENBSD_4_3:1.1.1.3.0.8
	OPENBSD_4_3_BASE:1.1.1.3
	OPENBSD_4_2:1.1.1.3.0.6
	OPENBSD_4_2_BASE:1.1.1.3
	OPENBSD_4_1:1.1.1.3.0.4
	OPENBSD_4_1_BASE:1.1.1.3
	OPENBSD_4_0:1.1.1.3.0.2
	OPENBSD_4_0_BASE:1.1.1.3
	PERL_5_8_8:1.1.1.3
	OPENBSD_3_9:1.1.1.2.0.8
	OPENBSD_3_9_BASE:1.1.1.2
	OPENBSD_3_8:1.1.1.2.0.6
	OPENBSD_3_8_BASE:1.1.1.2
	OPENBSD_3_7:1.1.1.2.0.4
	OPENBSD_3_7_BASE:1.1.1.2
	PERL_5_8_6:1.1.1.2
	OPENBSD_3_6:1.1.1.2.0.2
	OPENBSD_3_6_BASE:1.1.1.2
	PERL_5_8_5:1.1.1.2
	PERL_5_8_3:1.1.1.1
	OPENBSD_3_5:1.1.1.1.0.6
	OPENBSD_3_5_BASE:1.1.1.1
	PERL_5_8_2:1.1.1.1
	OPENBSD_3_4:1.1.1.1.0.4
	OPENBSD_3_4_BASE:1.1.1.1
	OPENBSD_3_3:1.1.1.1.0.2
	OPENBSD_3_3_BASE:1.1.1.1
	PERL_5_8_0:1.1.1.1
	CPAN:1.1.1;
locks; strict;
comment	@# @;
expand	@o@;


1.2
date	2008.09.29.17.36.02;	author millert;	state dead;
branches;
next	1.1;

1.1
date	2002.10.27.22.14.53;	author millert;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	2002.10.27.22.14.53;	author millert;	state Exp;
branches;
next	1.1.1.2;

1.1.1.2
date	2004.08.09.17.45.54;	author millert;	state Exp;
branches;
next	1.1.1.3;

1.1.1.3
date	2006.03.28.18.47.54;	author millert;	state Exp;
branches;
next	;


desc
@@


1.2
log
@fix conflicts and merge in local changes to perl 5.10.0
@
text
@#!./perl -Tw

BEGIN {
    chdir 't';
    @@INC = '../lib';
}

use Test::More tests => 13;

use_ok('B::Asmdata', qw(%insn_data @@insn_name @@optype @@specialsv_name));

# check we got something.
isnt( keys %insn_data,  0,  '%insn_data exported and populated' );
isnt( @@insn_name,       0,  '   @@insn_name' );
isnt( @@optype,          0,  '   @@optype' );
isnt( @@specialsv_name,  0,  '   @@specialsv_name' );

# pick an op that's not likely to go away in the future
my @@data = values %insn_data;
is( (grep { ref eq 'ARRAY' } @@data),  @@data,   '%insn_data contains arrays' );

# pick one at random to test with.
my $opname = (keys %insn_data)[rand @@data];
my $data = $insn_data{$opname};
like( $data->[0], qr/^\d+$/,    '   op number' );
is( ref $data->[1],  'CODE',    '   PUT code ref' );
ok( !ref $data->[2],            '   GET method' );

is( $insn_name[$data->[0]], $opname,    '@@insn_name maps correctly' );


# I'm going to assume that op types will all be named /OP$/.
# If this changes in the future, change this test.
is( grep(/OP$/, @@optype), @@optype,  '@@optype is all /OP$/' );


# comment in bytecode.pl says "Nullsv *must come first so that the 
# condition ($$sv == 0) can continue to be used to test (sv == Nullsv)."
is( $specialsv_name[0],  'Nullsv',  'Nullsv come first in @@special_sv_name' );

# other than that, we can't really say much more about @@specialsv_name
# than it has to contain strings (on the off chance &PL_sv_undef gets 
# flubbed)
is( grep(!ref, @@specialsv_name), @@specialsv_name,   '  contains all strings' );
@


1.1
log
@Initial revision
@
text
@@


1.1.1.1
log
@stock perl 5.8.0 from CPAN
@
text
@@


1.1.1.2
log
@Import of stock perl 5.8.5
@
text
@a5 5
    require Config;
    if (($Config::Config{'extensions'} !~ /\bB\b/) ){
        print "1..0 # Skip -- Perl configured without B module\n";
        exit 0;
    }
@


1.1.1.3
log
@perl 5.8.8 import
@
text
@d4 2
a5 6
    if ($ENV{PERL_CORE}){
	chdir('t') if -d 't';
	@@INC = ('.', '../lib');
    } else {
	unshift @@INC, 't';
    }
@


