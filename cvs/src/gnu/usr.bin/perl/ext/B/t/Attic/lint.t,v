head	1.2;
access;
symbols
	OPENBSD_4_8:1.1.1.7.0.4
	OPENBSD_4_8_BASE:1.1.1.7
	OPENBSD_4_7:1.1.1.7.0.2
	OPENBSD_4_7_BASE:1.1.1.7
	PERL_5_10_1:1.1.1.7
	OPENBSD_4_6:1.1.1.6.0.6
	OPENBSD_4_6_BASE:1.1.1.6
	OPENBSD_4_5:1.1.1.6.0.2
	OPENBSD_4_5_BASE:1.1.1.6
	PERL_5_10_0:1.1.1.6
	OPENBSD_4_4:1.1.1.5.0.10
	OPENBSD_4_4_BASE:1.1.1.5
	OPENBSD_4_3:1.1.1.5.0.8
	OPENBSD_4_3_BASE:1.1.1.5
	OPENBSD_4_2:1.1.1.5.0.6
	OPENBSD_4_2_BASE:1.1.1.5
	OPENBSD_4_1:1.1.1.5.0.4
	OPENBSD_4_1_BASE:1.1.1.5
	OPENBSD_4_0:1.1.1.5.0.2
	OPENBSD_4_0_BASE:1.1.1.5
	PERL_5_8_8:1.1.1.5
	OPENBSD_3_9:1.1.1.4.0.6
	OPENBSD_3_9_BASE:1.1.1.4
	OPENBSD_3_8:1.1.1.4.0.4
	OPENBSD_3_8_BASE:1.1.1.4
	OPENBSD_3_7:1.1.1.4.0.2
	OPENBSD_3_7_BASE:1.1.1.4
	PERL_5_8_6:1.1.1.4
	OPENBSD_3_6:1.1.1.3.0.2
	OPENBSD_3_6_BASE:1.1.1.3
	PERL_5_8_5:1.1.1.3
	PERL_5_8_3:1.1.1.2
	OPENBSD_3_5:1.1.1.2.0.2
	OPENBSD_3_5_BASE:1.1.1.2
	PERL_5_8_2:1.1.1.2
	OPENBSD_3_4:1.1.1.1.0.4
	OPENBSD_3_4_BASE:1.1.1.1
	OPENBSD_3_3:1.1.1.1.0.2
	OPENBSD_3_3_BASE:1.1.1.1
	PERL_5_8_0:1.1.1.1
	CPAN:1.1.1;
locks; strict;
comment	@# @;
expand	@o@;


1.2
date	2010.09.24.14.59.14;	author millert;	state dead;
branches;
next	1.1;

1.1
date	2002.10.27.22.14.53;	author millert;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	2002.10.27.22.14.53;	author millert;	state Exp;
branches;
next	1.1.1.2;

1.1.1.2
date	2003.12.03.02.43.41;	author millert;	state Exp;
branches;
next	1.1.1.3;

1.1.1.3
date	2004.08.09.17.45.54;	author millert;	state Exp;
branches;
next	1.1.1.4;

1.1.1.4
date	2005.01.15.21.16.43;	author millert;	state Exp;
branches;
next	1.1.1.5;

1.1.1.5
date	2006.03.28.18.47.54;	author millert;	state Exp;
branches;
next	1.1.1.6;

1.1.1.6
date	2008.09.29.17.18.14;	author millert;	state Exp;
branches;
next	1.1.1.7;

1.1.1.7
date	2009.10.12.18.11.11;	author millert;	state Exp;
branches;
next	;


desc
@@


1.2
log
@remove files no longer in perl 5.12.2 (or that have moved)
@
text
@#!./perl -w

BEGIN {
    chdir 't' if -d 't';
    @@INC = qw(../lib);
    require './test.pl';
}

plan tests => 13;

# Runs a separate perl interpreter with the appropriate lint options
# turned on
sub runlint ($$$;$) {
    my ($opts,$prog,$result,$testname) = @@_;
    my $res = runperl(
	switches => [ "-MO=Lint,$opts" ],
	prog	 => $prog,
	stderr	 => 1,
    );
    $res =~ s/-e syntax OK\n$//;
    is( $res, $result, $testname || $opts );
}

runlint 'context', '$foo = @@bar', <<'RESULT';
Implicit scalar context for array in scalar assignment at -e line 1
RESULT

runlint 'context', '$foo = length @@bar', <<'RESULT';
Implicit scalar context for array in length at -e line 1
RESULT

runlint 'implicit-read', '/foo/', <<'RESULT';
Implicit match on $_ at -e line 1
RESULT

runlint 'implicit-write', 's/foo/bar/', <<'RESULT';
Implicit substitution on $_ at -e line 1
RESULT

SKIP : {

    use Config;
    skip("Doesn't work with threaded perls",9)
       if $Config{useithreads} || $Config{use5005threads};

    runlint 'implicit-read', '1 for @@ARGV', <<'RESULT', 'implicit-read in foreach';
Implicit use of $_ in foreach at -e line 1
RESULT

    runlint 'dollar-underscore', '$_ = 1', <<'RESULT';
Use of $_ at -e line 1
RESULT

    runlint 'dollar-underscore', 'print', <<'RESULT', 'dollar-underscore in print';
Use of $_ at -e line 1
RESULT

    runlint 'private-names', 'sub A::_f{};A::_f()', <<'RESULT';
Illegal reference to private name _f at -e line 1
RESULT

    runlint 'private-names', '$A::_x', <<'RESULT';
Illegal reference to private name _x at -e line 1
RESULT

    runlint 'private-names', 'sub A::_f{};A->_f()', <<'RESULT',
Illegal reference to private method name _f at -e line 1
RESULT
    'private-names (method)';

    runlint 'undefined-subs', 'foo()', <<'RESULT';
Undefined subroutine foo called at -e line 1
RESULT

    runlint 'regexp-variables', 'print $&', <<'RESULT';
Use of regexp variable $& at -e line 1
RESULT

    runlint 'regexp-variables', 's/./$&/', <<'RESULT';
Use of regexp variable $& at -e line 1
RESULT

}
@


1.1
log
@Initial revision
@
text
@@


1.1.1.1
log
@stock perl 5.8.0 from CPAN
@
text
@@


1.1.1.2
log
@perl 5.8.2 from CPAN
@
text
@d9 1
a9 1
plan tests => 15; # adjust also number of skipped tests !
d43 1
a43 1
    skip("Doesn't work with threaded perls",11)
a80 7
RESULT

    runlint 'bare-subs', 'sub bare(){1};$x=bare', '';

    runlint 'bare-subs', 'sub bare(){1}; $x=[bare=>0]; $x=$y{bare}', <<'RESULT';
Bare sub name 'bare' interpreted as string at -e line 1
Bare sub name 'bare' interpreted as string at -e line 1
@


1.1.1.3
log
@Import of stock perl 5.8.5
@
text
@a5 5
    require Config;
    if (($Config::Config{'extensions'} !~ /\bB\b/) ){
        print "1..0 # Skip -- Perl configured without B module\n";
        exit 0;
    }
@


1.1.1.4
log
@perl 5.8.6 from CPAN
@
text
@d49 1
a49 1
       if $Config{useithreads} || ($] < 5.009 && $Config{use5005threads});
@


1.1.1.5
log
@perl 5.8.8 import
@
text
@d4 2
a5 7
    if ($ENV{PERL_CORE}){
	chdir('t') if -d 't';
	@@INC = ('.', '../lib');
    } else {
	unshift @@INC, 't';
	push @@INC, "../../t";
    }
d11 1
a11 1
    require 'test.pl';
@


1.1.1.6
log
@import perl 5.10.0 from CPAN
@
text
@d4 6
a9 7
    if ( $ENV{PERL_CORE} ) {
        chdir('t') if -d 't';
        @@INC = ( '.', '../lib' );
    }
    else {
        unshift @@INC, 't';
        push @@INC, "../../t";
d12 1
a12 1
    if ( ( $Config::Config{'extensions'} !~ /\bB\b/ ) ) {
d19 1
a19 1
plan tests => 29;
d24 1
a24 1
    my ( $opts, $prog, $result, $testname ) = @@_;
d26 3
a28 3
        switches => ["-MO=Lint,$opts"],
        prog     => $prog,
        stderr   => 1,
a33 11
runlint 'magic-diamond', 'while(<>){}', <<'RESULT';
Use of <> at -e line 1
RESULT

runlint 'magic-diamond', 'while(<ARGV>){}', <<'RESULT';
Use of <> at -e line 1
RESULT

runlint 'magic-diamond', 'while(<FOO>){}', <<'RESULT';
RESULT

a41 4
runlint 'context', 'our @@bar', '';

runlint 'context', 'exists $BAR{BAZ}', '';

a45 4
runlint 'implicit-read', 'grep /foo/, ()', '';

runlint 'implicit-read', 'grep { /foo/ } ()', '';

d50 7
a56 2
runlint 'implicit-read', 'for ( @@ARGV ) { 1 }',
    <<'RESULT', 'implicit-read in foreach';
d60 1
a60 3
runlint 'implicit-read', '1 for @@ARGV', '', 'implicit-read in foreach';

runlint 'dollar-underscore', '$_ = 1', <<'RESULT';
d64 1
a64 6
runlint 'dollar-underscore', 'sub foo {}; foo( $_ ) for @@A',      '';
runlint 'dollar-underscore', 'sub foo {}; map { foo( $_ ) } @@A',  '';
runlint 'dollar-underscore', 'sub foo {}; grep { foo( $_ ) } @@A', '';

runlint 'dollar-underscore', 'print',
    <<'RESULT', 'dollar-underscore in print';
d68 2
a69 2
runlint 'private-names', 'sub A::_f{};A::_f()', <<'RESULT';
Illegal reference to private name '_f' at -e line 1
d72 2
a73 2
runlint 'private-names', '$A::_x', <<'RESULT';
Illegal reference to private name '_x' at -e line 1
d76 2
a77 2
runlint 'private-names', 'sub A::_f{};A->_f()', <<'RESULT',
Illegal reference to private method name '_f' at -e line 1
d81 2
a82 6
runlint 'undefined-subs', 'foo()', <<'RESULT';
Nonexistant subroutine 'foo' called at -e line 1
RESULT

runlint 'undefined-subs', 'foo();sub foo;', <<'RESULT';
Undefined subroutine 'foo' called at -e line 1
d85 1
a85 1
runlint 'regexp-variables', 'print $&', <<'RESULT';
d89 1
a89 1
runlint 'regexp-variables', 's/./$&/', <<'RESULT';
d93 1
a93 1
runlint 'bare-subs', 'sub bare(){1};$x=bare', '';
d95 1
a95 1
runlint 'bare-subs', 'sub bare(){1}; $x=[bare=>0]; $x=$y{bare}', <<'RESULT';
a99 22
{

    # Check for backwards-compatible plugin support. This was where
    # preloaded mdoules would register themselves with B::Lint.
    my $res = runperl(
        switches => ["-MB::Lint"],
        prog     =>
            'BEGIN{B::Lint->register_plugin(X=>[q[x]])};use O(qw[Lint x]);sub X::match{warn qq[X ok.\n]};dummy()',
        stderr => 1,
    );
    like( $res, qr/X ok\./, 'Lint legacy plugin' );
}

{

    # Check for Module::Plugin support
    my $res = runperl(
        switches => [ '-I../ext/B/t/pluglib', '-MO=Lint,none' ],
        prog     => 1,
        stderr   => 1,
    );
    like( $res, qr/Module::Pluggable ok\./, 'Lint uses Module::Pluggable' );
@


1.1.1.7
log
@import perl 5.10.1
@
text
@a18 2
use strict;
use warnings;
a31 1
    local $::Level = $::Level + 1;
@


