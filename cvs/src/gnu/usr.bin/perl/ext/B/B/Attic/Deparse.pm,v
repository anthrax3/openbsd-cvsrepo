head	1.2;
access;
symbols
	OPENBSD_4_8:1.1.1.10.0.4
	OPENBSD_4_8_BASE:1.1.1.10
	OPENBSD_4_7:1.1.1.10.0.2
	OPENBSD_4_7_BASE:1.1.1.10
	PERL_5_10_1:1.1.1.10
	OPENBSD_4_6:1.1.1.9.0.6
	OPENBSD_4_6_BASE:1.1.1.9
	OPENBSD_4_5:1.1.1.9.0.2
	OPENBSD_4_5_BASE:1.1.1.9
	PERL_5_10_0:1.1.1.9
	OPENBSD_4_4:1.1.1.8.0.10
	OPENBSD_4_4_BASE:1.1.1.8
	OPENBSD_4_3:1.1.1.8.0.8
	OPENBSD_4_3_BASE:1.1.1.8
	OPENBSD_4_2:1.1.1.8.0.6
	OPENBSD_4_2_BASE:1.1.1.8
	OPENBSD_4_1:1.1.1.8.0.4
	OPENBSD_4_1_BASE:1.1.1.8
	OPENBSD_4_0:1.1.1.8.0.2
	OPENBSD_4_0_BASE:1.1.1.8
	PERL_5_8_8:1.1.1.8
	OPENBSD_3_9:1.1.1.7.0.6
	OPENBSD_3_9_BASE:1.1.1.7
	OPENBSD_3_8:1.1.1.7.0.4
	OPENBSD_3_8_BASE:1.1.1.7
	OPENBSD_3_7:1.1.1.7.0.2
	OPENBSD_3_7_BASE:1.1.1.7
	PERL_5_8_6:1.1.1.7
	OPENBSD_3_6:1.1.1.6.0.2
	OPENBSD_3_6_BASE:1.1.1.6
	PERL_5_8_5:1.1.1.6
	PERL_5_8_3:1.1.1.5
	OPENBSD_3_5:1.1.1.5.0.2
	OPENBSD_3_5_BASE:1.1.1.5
	PERL_5_8_2:1.1.1.5
	OPENBSD_3_4:1.1.1.4.0.4
	OPENBSD_3_4_BASE:1.1.1.4
	OPENBSD_3_3:1.1.1.4.0.2
	OPENBSD_3_3_BASE:1.1.1.4
	PERL_5_8_0:1.1.1.4
	OPENBSD_3_2:1.1.1.3.0.6
	OPENBSD_3_2_BASE:1.1.1.3
	OPENBSD_3_1:1.1.1.3.0.4
	OPENBSD_3_1_BASE:1.1.1.3
	OPENBSD_3_0:1.1.1.3.0.2
	OPENBSD_3_0_BASE:1.1.1.3
	PERL_5_6_1:1.1.1.3
	OPENBSD_2_9:1.1.1.2.0.6
	OPENBSD_2_9_BASE:1.1.1.2
	OPENBSD_2_8:1.1.1.2.0.4
	OPENBSD_2_8_BASE:1.1.1.2
	OPENBSD_2_7:1.1.1.2.0.2
	OPENBSD_2_7_BASE:1.1.1.2
	PERL_5_6_0:1.1.1.2
	OPENBSD_2_6:1.1.1.1.0.2
	OPENBSD_2_6_BASE:1.1.1.1
	PERL_500503:1.1.1.1
	CPAN:1.1.1;
locks; strict;
comment	@# @;


1.2
date	2010.09.24.14.59.14;	author millert;	state dead;
branches;
next	1.1;

1.1
date	99.04.29.22.38.38;	author millert;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	99.04.29.22.38.38;	author millert;	state Exp;
branches;
next	1.1.1.2;

1.1.1.2
date	2000.04.06.16.09.02;	author millert;	state Exp;
branches;
next	1.1.1.3;

1.1.1.3
date	2001.05.24.18.22.39;	author millert;	state Exp;
branches;
next	1.1.1.4;

1.1.1.4
date	2002.10.27.22.14.53;	author millert;	state Exp;
branches;
next	1.1.1.5;

1.1.1.5
date	2003.12.03.02.43.41;	author millert;	state Exp;
branches;
next	1.1.1.6;

1.1.1.6
date	2004.08.09.17.45.53;	author millert;	state Exp;
branches;
next	1.1.1.7;

1.1.1.7
date	2005.01.15.21.16.43;	author millert;	state Exp;
branches;
next	1.1.1.8;

1.1.1.8
date	2006.03.28.18.47.53;	author millert;	state Exp;
branches;
next	1.1.1.9;

1.1.1.9
date	2008.09.29.17.18.13;	author millert;	state Exp;
branches;
next	1.1.1.10;

1.1.1.10
date	2009.10.12.18.11.11;	author millert;	state Exp;
branches;
next	;


desc
@@


1.2
log
@remove files no longer in perl 5.12.2 (or that have moved)
@
text
@# B::Deparse.pm
# Copyright (c) 1998 Stephen McCamant. All rights reserved.
# This module is free software; you can redistribute and/or modify
# it under the same terms as Perl itself.

# This is based on the module of the same name by Malcolm Beattie,
# but essentially none of his code remains.

package B::Deparse;
use Carp 'cluck';
use B qw(class main_root main_start main_cv svref_2object);
$VERSION = 0.56;
use strict;

# Changes between 0.50 and 0.51:
# - fixed nulled leave with live enter in sort { }
# - fixed reference constants (\"str")
# - handle empty programs gracefully
# - handle infinte loops (for (;;) {}, while (1) {})
# - differentiate between `for my $x ...' and `my $x; for $x ...'
# - various minor cleanups
# - moved globals into an object
# - added `-u', like B::C
# - package declarations using cop_stash
# - subs, formats and code sorted by cop_seq
# Changes between 0.51 and 0.52:
# - added pp_threadsv (special variables under USE_THREADS)
# - added documentation
# Changes between 0.52 and 0.53
# - many changes adding precedence contexts and associativity
# - added `-p' and `-s' output style options
# - various other minor fixes
# Changes between 0.53 and 0.54
# - added support for new `for (1..100)' optimization,
#   thanks to Gisle Aas
# Changes between 0.54 and 0.55
# - added support for new qr// construct
# - added support for new pp_regcreset OP
# Changes between 0.55 and 0.56
# - tested on base/*.t, cmd/*.t, comp/*.t, io/*.t
# - fixed $# on non-lexicals broken in last big rewrite
# - added temporary fix for change in opcode of OP_STRINGIFY
# - fixed problem in 0.54's for() patch in `for (@@ary)'
# - fixed precedence in conditional of ?:
# - tweaked list paren elimination in `my($x) = @@_'
# - made continue-block detection trickier wrt. null ops
# - fixed various prototype problems in pp_entersub
# - added support for sub prototypes that never get GVs
# - added unquoting for special filehandle first arg in truncate
# - print doubled rv2gv (a bug) as `*{*GV}' instead of illegal `**GV'
# - added semicolons at the ends of blocks
# - added -l `#line' declaration option -- fixes cmd/subval.t 27,28

# Todo:
# - {} around variables in strings ("${var}letters")
#   base/lex.t 25-27
#   comp/term.t 11
# - generate symbolic constants directly from core source
# - left/right context
# - avoid semis in one-statement blocks
# - associativity of &&=, ||=, ?:
# - ',' => '=>' (auto-unquote?)
# - break long lines ("\r" as discretionary break?)
# - include values of variables (e.g. set in BEGIN)
# - coordinate with Data::Dumper (both directions? see previous)
# - version using op_next instead of op_first/sibling?
# - avoid string copies (pass arrays, one big join?)
# - auto-apply `-u'?
# - while{} with one-statement continue => for(; XXX; XXX) {}?
# - -uPackage:: descend recursively?
# - here-docs?
# - <DATA>?

# Tests that will always fail:
# comp/redef.t -- all (redefinition happens at compile time)

# Object fields (were globals):
#
# avoid_local:
# (local($a), local($b)) and local($a, $b) have the same internal
# representation but the short form looks better. We notice we can
# use a large-scale local when checking the list, but need to prevent
# individual locals too. This hash holds the addresses of OPs that 
# have already had their local-ness accounted for. The same thing
# is done with my().
#
# curcv:
# CV for current sub (or main program) being deparsed
#
# curstash:
# name of the current package for deparsed code
#
# subs_todo:
# array of [cop_seq, GV, is_format?] for subs and formats we still
# want to deparse
#
# protos_todo:
# as above, but [name, prototype] for subs that never got a GV
#
# subs_done, forms_done:
# keys are addresses of GVs for subs and formats we've already
# deparsed (or at least put into subs_todo)
#
# parens: -p
# linenums: -l
# cuddle: ` ' or `\n', depending on -sC

# A little explanation of how precedence contexts and associativity
# work:
#
# deparse() calls each per-op subroutine with an argument $cx (short
# for context, but not the same as the cx* in the perl core), which is
# a number describing the op's parents in terms of precedence, whether
# they're inside an expression or at statement level, etc.  (see
# chart below). When ops with children call deparse on them, they pass
# along their precedence. Fractional values are used to implement
# associativity (`($x + $y) + $z' => `$x + $y + $y') and related
# parentheses hacks. The major disadvantage of this scheme is that
# it doesn't know about right sides and left sides, so say if you
# assign a listop to a variable, it can't tell it's allowed to leave
# the parens off the listop.

# Precedences:
# 26             [TODO] inside interpolation context ("")
# 25 left        terms and list operators (leftward)
# 24 left        ->
# 23 nonassoc    ++ --
# 22 right       **
# 21 right       ! ~ \ and unary + and -
# 20 left        =~ !~
# 19 left        * / % x
# 18 left        + - .
# 17 left        << >>
# 16 nonassoc    named unary operators
# 15 nonassoc    < > <= >= lt gt le ge
# 14 nonassoc    == != <=> eq ne cmp
# 13 left        &
# 12 left        | ^
# 11 left        &&
# 10 left        ||
#  9 nonassoc    ..  ...
#  8 right       ?:
#  7 right       = += -= *= etc.
#  6 left        , =>
#  5 nonassoc    list operators (rightward)
#  4 right       not
#  3 left        and
#  2 left        or xor
#  1             statement modifiers
#  0             statement level

# Nonprinting characters with special meaning:
# \cS - steal parens (see maybe_parens_unop)
# \n - newline and indent
# \t - increase indent
# \b - decrease indent (`outdent')
# \f - flush left (no indent)
# \cK - kill following semicolon, if any

sub null {
    my $op = shift;
    return class($op) eq "NULL";
}

sub todo {
    my $self = shift;
    my($gv, $cv, $is_form) = @@_;
    my $seq;
    if (!null($cv->START) and is_state($cv->START)) {
	$seq = $cv->START->cop_seq;
    } else {
	$seq = 0;
    }
    push @@{$self->{'subs_todo'}}, [$seq, $gv, $is_form];
}

sub next_todo {
    my $self = shift;
    my $ent = shift @@{$self->{'subs_todo'}};
    my $name = $self->gv_name($ent->[1]);
    if ($ent->[2]) {
	return "format $name =\n"
	    . $self->deparse_format($ent->[1]->FORM). "\n";
    } else {
	return "sub $name " .
	    $self->deparse_sub($ent->[1]->CV);
    }
}

sub OPf_KIDS () { 4 }

sub walk_tree {
    my($op, $sub) = @@_;
    $sub->($op);
    if ($op->flags & OPf_KIDS) {
	my $kid;
	for ($kid = $op->first; not null $kid; $kid = $kid->sibling) {
	    walk_tree($kid, $sub);
	}
    }
}

sub walk_sub {
    my $self = shift;
    my $cv = shift;
    my $op = $cv->ROOT;
    $op = shift if null $op;
    return if !$op or null $op;
    walk_tree($op, sub {
	my $op = shift;
	if ($op->ppaddr eq "pp_gv") {
	    if ($op->next->ppaddr eq "pp_entersub") {
		next if $self->{'subs_done'}{$ {$op->gv}}++;
		next if class($op->gv->CV) eq "SPECIAL";
		$self->todo($op->gv, $op->gv->CV, 0);
		$self->walk_sub($op->gv->CV);
	    } elsif ($op->next->ppaddr eq "pp_enterwrite"
		     or ($op->next->ppaddr eq "pp_rv2gv"
			 and $op->next->next->ppaddr eq "pp_enterwrite")) {
		next if $self->{'forms_done'}{$ {$op->gv}}++;
		next if class($op->gv->FORM) eq "SPECIAL";
		$self->todo($op->gv, $op->gv->FORM, 1);
		$self->walk_sub($op->gv->FORM);
	    }
	}
    });
}

sub stash_subs {
    my $self = shift;
    my $pack = shift;
    my(%stash, @@ret);
    { no strict 'refs'; %stash = svref_2object(\%{$pack . "::"})->ARRAY }
    if ($pack eq "main") {
	$pack = "";
    } else {
	$pack = $pack . "::";
    }
    my($key, $val);
    while (($key, $val) = each %stash) {
	my $class = class($val);
	if ($class eq "PV") {
	    # Just a prototype
	    push @@{$self->{'protos_todo'}}, [$pack . $key, $val->PV];
	} elsif ($class eq "IV") {
	    # Just a name
	    push @@{$self->{'protos_todo'}}, [$pack . $key, undef];	    
	} elsif ($class eq "GV") {
	    if (class($val->CV) ne "SPECIAL") {
		next if $self->{'subs_done'}{$$val}++;
		$self->todo($val, $val->CV, 0);
		$self->walk_sub($val->CV);
	    }
	    if (class($val->FORM) ne "SPECIAL") {
		next if $self->{'forms_done'}{$$val}++;
		$self->todo($val, $val->FORM, 1);
		$self->walk_sub($val->FORM);
	    }
	}
    }
}

sub print_protos {
    my $self = shift;
    my $ar;
    my @@ret;
    foreach $ar (@@{$self->{'protos_todo'}}) {
	my $proto = (defined $ar->[1] ? " (". $ar->[1] . ")" : "");
	push @@ret, "sub " . $ar->[0] .  "$proto;\n";
    }
    delete $self->{'protos_todo'};
    return @@ret;
}

sub style_opts {
    my $self = shift;
    my $opts = shift;
    my $opt;
    while (length($opt = substr($opts, 0, 1))) {
	if ($opt eq "C") {
	    $self->{'cuddle'} = " ";
	}
	$opts = substr($opts, 1);
    }
}

sub compile {
    my(@@args) = @@_;
    return sub { 
	my $self = bless {};
	my $arg;
	$self->{'subs_todo'} = [];
	$self->stash_subs("main");
	$self->{'curcv'} = main_cv;
	$self->{'curstash'} = "main";
	$self->{'cuddle'} = "\n";
	while ($arg = shift @@args) {
	    if (substr($arg, 0, 2) eq "-u") {
		$self->stash_subs(substr($arg, 2));
	    } elsif ($arg eq "-p") {
		$self->{'parens'} = 1;
	    } elsif ($arg eq "-l") {
		$self->{'linenums'} = 1;
	    } elsif (substr($arg, 0, 2) eq "-s") {
		$self->style_opts(substr $arg, 2);
	    }
	}
	$self->walk_sub(main_cv, main_start);
	print $self->print_protos;
	@@{$self->{'subs_todo'}} =
	    sort {$a->[0] <=> $b->[0]} @@{$self->{'subs_todo'}};
	print indent($self->deparse(main_root, 0)), "\n" unless null main_root;
	my @@text;
	while (scalar(@@{$self->{'subs_todo'}})) {
	    push @@text, $self->next_todo;
	}
	print indent(join("", @@text)), "\n" if @@text;
    }
}

sub deparse {
    my $self = shift;
    my($op, $cx) = @@_;
#    cluck if class($op) eq "NULL";
    my $meth = $op->ppaddr;
    return $self->$meth($op, $cx);
}

sub indent {
    my $txt = shift;
    my @@lines = split(/\n/, $txt);
    my $leader = "";
    my $line;
    for $line (@@lines) {
	if (substr($line, 0, 1) eq "\t") {
	    $leader = $leader . "    ";
	    $line = substr($line, 1);
	} elsif (substr($line, 0, 1) eq "\b") {
	    $leader = substr($leader, 0, length($leader) - 4);
	    $line = substr($line, 1);
	}
	if (substr($line, 0, 1) eq "\f") {
	    $line = substr($line, 1); # no indent
	} else {
	    $line = $leader . $line;
	}
	$line =~ s/\cK;?//g;
    }
    return join("\n", @@lines);
}

sub SVf_POK () {0x40000}

sub deparse_sub {
    my $self = shift;
    my $cv = shift;
    my $proto = "";
    if ($cv->FLAGS & SVf_POK) {
	$proto = "(". $cv->PV . ") ";
    }
    local($self->{'curcv'}) = $cv;
    local($self->{'curstash'}) = $self->{'curstash'};
    if (not null $cv->ROOT) {
	# skip leavesub
	return $proto . "{\n\t" . 
	    $self->deparse($cv->ROOT->first, 0) . "\n\b}\n"; 
    } else { # XSUB?
	return $proto  . "{}\n";
    }
}

sub deparse_format {
    my $self = shift;
    my $form = shift;
    my @@text;
    local($self->{'curcv'}) = $form;
    local($self->{'curstash'}) = $self->{'curstash'};
    my $op = $form->ROOT;
    my $kid;
    $op = $op->first->first; # skip leavewrite, lineseq
    while (not null $op) {
	$op = $op->sibling; # skip nextstate
	my @@exprs;
	$kid = $op->first->sibling; # skip pushmark
	push @@text, $kid->sv->PV;
	$kid = $kid->sibling;
	for (; not null $kid; $kid = $kid->sibling) {
	    push @@exprs, $self->deparse($kid, 0);
	}
	push @@text, join(", ", @@exprs)."\n" if @@exprs;
	$op = $op->sibling;
    }
    return join("", @@text) . ".";
}

# the aassign in-common check messes up SvCUR (always setting it
# to a value >= 100), but it's probably safe to assume there
# won't be any NULs in the names of my() variables. (with
# stash variables, I wouldn't be so sure)
sub padname_fix {
    my $str = shift;
    $str = substr($str, 0, index($str, "\0")) if index($str, "\0") != -1;
    return $str;
}

sub is_scope {
    my $op = shift;
    return $op->ppaddr eq "pp_leave" || $op->ppaddr eq "pp_scope"
      || $op->ppaddr eq "pp_lineseq"
	|| ($op->ppaddr eq "pp_null" && class($op) eq "UNOP" 
	    && (is_scope($op->first) || $op->first->ppaddr eq "pp_enter"));
}

sub is_state {
    my $name = $_[0]->ppaddr;
    return $name eq "pp_nextstate" || $name eq "pp_dbstate";
}

sub is_miniwhile { # check for one-line loop (`foo() while $y--')
    my $op = shift;
    return (!null($op) and null($op->sibling) 
	    and $op->ppaddr eq "pp_null" and class($op) eq "UNOP"
	    and (($op->first->ppaddr =~ /^pp_(and|or)$/
		  and $op->first->first->sibling->ppaddr eq "pp_lineseq")
		 or ($op->first->ppaddr eq "pp_lineseq"
		     and not null $op->first->first->sibling
		     and $op->first->first->sibling->ppaddr eq "pp_unstack")
		 ));
}

sub is_scalar {
    my $op = shift;
    return ($op->ppaddr eq "pp_rv2sv" or
	    $op->ppaddr eq "pp_padsv" or
	    $op->ppaddr eq "pp_gv" or # only in array/hash constructs
	    !null($op->first) && $op->first->ppaddr eq "pp_gvsv");
}

sub maybe_parens {
    my $self = shift;
    my($text, $cx, $prec) = @@_;
    if ($prec < $cx              # unary ops nest just fine
	or $prec == $cx and $cx != 4 and $cx != 16 and $cx != 21
	or $self->{'parens'})
    {
	$text = "($text)";
	# In a unop, let parent reuse our parens; see maybe_parens_unop
	$text = "\cS" . $text if $cx == 16;
	return $text;
    } else {
	return $text;
    }
}

# same as above, but get around the `if it looks like a function' rule
sub maybe_parens_unop {
    my $self = shift;
    my($name, $kid, $cx) = @@_;
    if ($cx > 16 or $self->{'parens'}) {
	return "$name(" . $self->deparse($kid, 1) . ")";
    } else {
	$kid = $self->deparse($kid, 16);
	if (substr($kid, 0, 1) eq "\cS") {
	    # use kid's parens
	    return $name . substr($kid, 1);
	} elsif (substr($kid, 0, 1) eq "(") {
	    # avoid looks-like-a-function trap with extra parens
	    # (`+' can lead to ambiguities)
	    return "$name(" . $kid  . ")";
	} else {
	    return "$name $kid";
	}
    }
}

sub maybe_parens_func {
    my $self = shift;
    my($func, $text, $cx, $prec) = @@_;
    if ($prec <= $cx or substr($text, 0, 1) eq "(" or $self->{'parens'}) {
	return "$func($text)";
    } else {
	return "$func $text";
    }
}

sub OPp_LVAL_INTRO () { 128 }

sub maybe_local {
    my $self = shift;
    my($op, $cx, $text) = @@_;
    if ($op->private & OPp_LVAL_INTRO and not $self->{'avoid_local'}{$$op}) {
	return $self->maybe_parens_func("local", $text, $cx, 16);
    } else {
	return $text;
    }
}

sub padname_sv {
    my $self = shift;
    my $targ = shift;
    return (($self->{'curcv'}->PADLIST->ARRAY)[0]->ARRAY)[$targ];
}

sub maybe_my {
    my $self = shift;
    my($op, $cx, $text) = @@_;
    if ($op->private & OPp_LVAL_INTRO and not $self->{'avoid_local'}{$$op}) {
	return $self->maybe_parens_func("my", $text, $cx, 16);
    } else {
	return $text;
    }
}

# The following OPs don't have functions:

# pp_padany -- does not exist after parsing
# pp_rcatline -- does not exist

sub pp_enter { # see also leave
    cluck "unexpected OP_ENTER";
    return "XXX";
}

sub pp_pushmark { # see also list
    cluck "unexpected OP_PUSHMARK";
    return "XXX";
}

sub pp_leavesub { # see also deparse_sub
    cluck "unexpected OP_LEAVESUB";
    return "XXX";
}

sub pp_leavewrite { # see also deparse_format
    cluck "unexpected OP_LEAVEWRITE";
    return "XXX";
}

sub pp_method { # see also entersub
    cluck "unexpected OP_METHOD";
    return "XXX";
}

sub pp_regcmaybe { # see also regcomp
    cluck "unexpected OP_REGCMAYBE";
    return "XXX";
}

sub pp_regcreset { # see also regcomp
    cluck "unexpected OP_REGCRESET";
    return "XXX";
}

sub pp_substcont { # see also subst
    cluck "unexpected OP_SUBSTCONT";
    return "XXX";
}

sub pp_grepstart { # see also grepwhile
    cluck "unexpected OP_GREPSTART";
    return "XXX";
}

sub pp_mapstart { # see also mapwhile
    cluck "unexpected OP_MAPSTART";
    return "XXX";
}

sub pp_flip { # see also flop
    cluck "unexpected OP_FLIP";
    return "XXX";
}

sub pp_iter { # see also leaveloop
    cluck "unexpected OP_ITER";
    return "XXX";
}

sub pp_enteriter { # see also leaveloop
    cluck "unexpected OP_ENTERITER";
    return "XXX";
}

sub pp_enterloop { # see also leaveloop
    cluck "unexpected OP_ENTERLOOP";
    return "XXX";
}

sub pp_leaveeval { # see also entereval
    cluck "unexpected OP_LEAVEEVAL";
    return "XXX";
}

sub pp_entertry { # see also leavetry
    cluck "unexpected OP_ENTERTRY";
    return "XXX";
}

# leave and scope/lineseq should probably share code
sub pp_leave {
    my $self = shift;
    my($op, $cx) = @@_;
    my ($kid, $expr);
    my @@exprs;
    local($self->{'curstash'}) = $self->{'curstash'};
    $kid = $op->first->sibling; # skip enter
    if (is_miniwhile($kid)) {
	my $top = $kid->first;
	my $name = $top->ppaddr;
	if ($name eq "pp_and") {
	    $name = "while";
	} elsif ($name eq "pp_or") {
	    $name = "until";
	} else { # no conditional -> while 1 or until 0
	    return $self->deparse($top->first, 1) . " while 1";
	}
	my $cond = $top->first;
	my $body = $cond->sibling->first; # skip lineseq
	$cond = $self->deparse($cond, 1);
	$body = $self->deparse($body, 1);
	return "$body $name $cond";
    }
    for (; !null($kid); $kid = $kid->sibling) {
	$expr = "";
	if (is_state $kid) {
	    $expr = $self->deparse($kid, 0);
	    $kid = $kid->sibling;
	    last if null $kid;
	}
	$expr .= $self->deparse($kid, 0);
	push @@exprs, $expr if $expr;
    }
    if ($cx > 0) { # inside an expression
	return "do { " . join(";\n", @@exprs) . " }";
    } else {
	return join(";\n", @@exprs) . ";";
    }
}

sub pp_scope {
    my $self = shift;
    my($op, $cx) = @@_;
    my ($kid, $expr);
    my @@exprs;
    for ($kid = $op->first; !null($kid); $kid = $kid->sibling) {
	$expr = "";
	if (is_state $kid) {
	    $expr = $self->deparse($kid, 0);
	    $kid = $kid->sibling;
	    last if null $kid;
	}
	$expr .= $self->deparse($kid, 0);
	push @@exprs, $expr if $expr;
    }
    if ($cx > 0) { # inside an expression, (a do {} while for lineseq)
	return "do { " . join(";\n", @@exprs) . " }";
    } else {
	return join(";\n", @@exprs) . ";";
    }
}

sub pp_lineseq { pp_scope(@@_) }

# The BEGIN {} is used here because otherwise this code isn't executed
# when you run B::Deparse on itself.
my %globalnames;
BEGIN { map($globalnames{$_}++, "SIG", "STDIN", "STDOUT", "STDERR", "INC",
	    "ENV", "ARGV", "ARGVOUT", "_"); }

sub gv_name {
    my $self = shift;
    my $gv = shift;
    my $stash = $gv->STASH->NAME;
    my $name = $gv->NAME;
    if ($stash eq $self->{'curstash'} or $globalnames{$name}
	or $name =~ /^[^A-Za-z_]/)
    {
	$stash = "";
    } else {
	$stash = $stash . "::";
    }
    if ($name =~ /^([\cA-\cZ])$/) {
	$name = "^" . chr(64 + ord($1));
    }
    return $stash . $name;
}

# Notice how subs and formats are inserted between statements here
sub pp_nextstate {
    my $self = shift;
    my($op, $cx) = @@_;
    my @@text;
    @@text = $op->label . ": " if $op->label;
    my $seq = $op->cop_seq;
    while (scalar(@@{$self->{'subs_todo'}})
	   and $seq > $self->{'subs_todo'}[0][0]) {
	push @@text, $self->next_todo;
    }
    my $stash = $op->stash->NAME;
    if ($stash ne $self->{'curstash'}) {
	push @@text, "package $stash;\n";
	$self->{'curstash'} = $stash;
    }
    if ($self->{'linenums'}) {
	push @@text, "\f#line " . $op->line . 
	  ' "' . substr($op->filegv->NAME, 2), qq'"\n';
    }
    return join("", @@text);
}

sub pp_dbstate { pp_nextstate(@@_) }

sub pp_unstack { return "" } # see also leaveloop

sub baseop {
    my $self = shift;
    my($op, $cx, $name) = @@_;
    return $name;
}

sub pp_stub { baseop(@@_, "()") }
sub pp_wantarray { baseop(@@_, "wantarray") }
sub pp_fork { baseop(@@_, "fork") }
sub pp_wait { baseop(@@_, "wait") }
sub pp_getppid { baseop(@@_, "getppid") }
sub pp_time { baseop(@@_, "time") }
sub pp_tms { baseop(@@_, "times") }
sub pp_ghostent { baseop(@@_, "gethostent") }
sub pp_gnetent { baseop(@@_, "getnetent") }
sub pp_gprotoent { baseop(@@_, "getprotoent") }
sub pp_gservent { baseop(@@_, "getservent") }
sub pp_ehostent { baseop(@@_, "endhostent") }
sub pp_enetent { baseop(@@_, "endnetent") }
sub pp_eprotoent { baseop(@@_, "endprotoent") }
sub pp_eservent { baseop(@@_, "endservent") }
sub pp_gpwent { baseop(@@_, "getpwent") }
sub pp_spwent { baseop(@@_, "setpwent") }
sub pp_epwent { baseop(@@_, "endpwent") }
sub pp_ggrent { baseop(@@_, "getgrent") }
sub pp_sgrent { baseop(@@_, "setgrent") }
sub pp_egrent { baseop(@@_, "endgrent") }
sub pp_getlogin { baseop(@@_, "getlogin") }

sub POSTFIX () { 1 }

# I couldn't think of a good short name, but this is the category of
# symbolic unary operators with interesting precedence

sub pfixop {
    my $self = shift;
    my($op, $cx, $name, $prec, $flags) = (@@_, 0);
    my $kid = $op->first;
    $kid = $self->deparse($kid, $prec);
    return $self->maybe_parens(($flags & POSTFIX) ? "$kid$name" : "$name$kid",
			       $cx, $prec);
}

sub pp_preinc { pfixop(@@_, "++", 23) }
sub pp_predec { pfixop(@@_, "--", 23) }
sub pp_postinc { pfixop(@@_, "++", 23, POSTFIX) }
sub pp_postdec { pfixop(@@_, "--", 23, POSTFIX) }
sub pp_i_preinc { pfixop(@@_, "++", 23) }
sub pp_i_predec { pfixop(@@_, "--", 23) }
sub pp_i_postinc { pfixop(@@_, "++", 23, POSTFIX) }
sub pp_i_postdec { pfixop(@@_, "--", 23, POSTFIX) }
sub pp_complement { pfixop(@@_, "~", 21) }

sub pp_negate {
    my $self = shift;
    my($op, $cx) = @@_;
    if ($op->first->ppaddr =~ /^pp_(i_)?negate$/) {
	# avoid --$x
	$self->pfixop($op, $cx, "-", 21.5);
    } else {
	$self->pfixop($op, $cx, "-", 21);	
    }
}
sub pp_i_negate { pp_negate(@@_) }

sub pp_not {
    my $self = shift;
    my($op, $cx) = @@_;
    if ($cx <= 4) {
	$self->pfixop($op, $cx, "not ", 4);
    } else {
	$self->pfixop($op, $cx, "!", 21);	
    }
}

sub OPf_SPECIAL () { 128 }

sub unop {
    my $self = shift;
    my($op, $cx, $name, $prec, $flags) = (@@_, 0, 0);
    my $kid;
    if ($op->flags & OPf_KIDS) {
	$kid = $op->first;
	return $self->maybe_parens_unop($name, $kid, $cx);
    } else {
	return $name .  ($op->flags & OPf_SPECIAL ? "()" : "");       
    }
}

sub pp_chop { unop(@@_, "chop") }
sub pp_chomp { unop(@@_, "chomp") }
sub pp_schop { unop(@@_, "chop") }
sub pp_schomp { unop(@@_, "chomp") }
sub pp_defined { unop(@@_, "defined") }
sub pp_undef { unop(@@_, "undef") }
sub pp_study { unop(@@_, "study") }
sub pp_ref { unop(@@_, "ref") }
sub pp_pos { maybe_local(@@_, unop(@@_, "pos")) }

sub pp_sin { unop(@@_, "sin") }
sub pp_cos { unop(@@_, "cos") }
sub pp_rand { unop(@@_, "rand") }
sub pp_srand { unop(@@_, "srand") }
sub pp_exp { unop(@@_, "exp") }
sub pp_log { unop(@@_, "log") }
sub pp_sqrt { unop(@@_, "sqrt") }
sub pp_int { unop(@@_, "int") }
sub pp_hex { unop(@@_, "hex") }
sub pp_oct { unop(@@_, "oct") }
sub pp_abs { unop(@@_, "abs") }

sub pp_length { unop(@@_, "length") }
sub pp_ord { unop(@@_, "ord") }
sub pp_chr { unop(@@_, "chr") }
sub pp_ucfirst { unop(@@_, "ucfirst") }
sub pp_lcfirst { unop(@@_, "lcfirst") }
sub pp_uc { unop(@@_, "uc") }
sub pp_lc { unop(@@_, "lc") }
sub pp_quotemeta { unop(@@_, "quotemeta") }

sub pp_each { unop(@@_, "each") }
sub pp_values { unop(@@_, "values") }
sub pp_keys { unop(@@_, "keys") }
sub pp_pop { unop(@@_, "pop") }
sub pp_shift { unop(@@_, "shift") }

sub pp_caller { unop(@@_, "caller") }
sub pp_reset { unop(@@_, "reset") }
sub pp_exit { unop(@@_, "exit") }
sub pp_prototype { unop(@@_, "prototype") }

sub pp_close { unop(@@_, "close") }
sub pp_fileno { unop(@@_, "fileno") }
sub pp_umask { unop(@@_, "umask") }
sub pp_binmode { unop(@@_, "binmode") }
sub pp_untie { unop(@@_, "untie") }
sub pp_tied { unop(@@_, "tied") }
sub pp_dbmclose { unop(@@_, "dbmclose") }
sub pp_getc { unop(@@_, "getc") }
sub pp_eof { unop(@@_, "eof") }
sub pp_tell { unop(@@_, "tell") }
sub pp_getsockname { unop(@@_, "getsockname") }
sub pp_getpeername { unop(@@_, "getpeername") }

sub pp_chdir { unop(@@_, "chdir") }
sub pp_chroot { unop(@@_, "chroot") }
sub pp_readlink { unop(@@_, "readlink") }
sub pp_rmdir { unop(@@_, "rmdir") }
sub pp_readdir { unop(@@_, "readdir") }
sub pp_telldir { unop(@@_, "telldir") }
sub pp_rewinddir { unop(@@_, "rewinddir") }
sub pp_closedir { unop(@@_, "closedir") }
sub pp_getpgrp { unop(@@_, "getpgrp") }
sub pp_localtime { unop(@@_, "localtime") }
sub pp_gmtime { unop(@@_, "gmtime") }
sub pp_alarm { unop(@@_, "alarm") }
sub pp_sleep { unop(@@_, "sleep") }

sub pp_dofile { unop(@@_, "do") }
sub pp_entereval { unop(@@_, "eval") }

sub pp_ghbyname { unop(@@_, "gethostbyname") }
sub pp_gnbyname { unop(@@_, "getnetbyname") }
sub pp_gpbyname { unop(@@_, "getprotobyname") }
sub pp_shostent { unop(@@_, "sethostent") }
sub pp_snetent { unop(@@_, "setnetent") }
sub pp_sprotoent { unop(@@_, "setprotoent") }
sub pp_sservent { unop(@@_, "setservent") }
sub pp_gpwnam { unop(@@_, "getpwnam") }
sub pp_gpwuid { unop(@@_, "getpwuid") }
sub pp_ggrnam { unop(@@_, "getgrnam") }
sub pp_ggrgid { unop(@@_, "getgrgid") }

sub pp_lock { unop(@@_, "lock") }

sub pp_exists {
    my $self = shift;
    my($op, $cx) = @@_;
    return $self->maybe_parens_func("exists", $self->pp_helem($op->first, 16),
				    $cx, 16);
}

sub OPpSLICE () { 64 }

sub pp_delete {
    my $self = shift;
    my($op, $cx) = @@_;
    my $arg;
    if ($op->private & OPpSLICE) {
	return $self->maybe_parens_func("delete",
					$self->pp_hslice($op->first, 16),
					$cx, 16);
    } else {
	return $self->maybe_parens_func("delete",
					$self->pp_helem($op->first, 16),
					$cx, 16);
    }
}

sub OPp_CONST_BARE () { 64 }

sub pp_require {
    my $self = shift;
    my($op, $cx) = @@_;
    if (class($op) eq "UNOP" and $op->first->ppaddr eq "pp_const"
	and $op->first->private & OPp_CONST_BARE)
    {
	my $name = $op->first->sv->PV;
	$name =~ s[/][::]g;
	$name =~ s/\.pm//g;
	return "require($name)";
    } else {	
	$self->unop($op, $cx, "require");
    }
}

sub pp_scalar { 
    my $self = shift;
    my($op, $cv) = @@_;
    my $kid = $op->first;
    if (not null $kid->sibling) {
	# XXX Was a here-doc
	return $self->dquote($op);
    }
    $self->unop(@@_, "scalar");
}


sub padval {
    my $self = shift;
    my $targ = shift;
    return (($self->{'curcv'}->PADLIST->ARRAY)[1]->ARRAY)[$targ];
}

sub OPf_REF () { 16 }

sub pp_refgen {
    my $self = shift;	
    my($op, $cx) = @@_;
    my $kid = $op->first;
    if ($kid->ppaddr eq "pp_null") {
	$kid = $kid->first;
	if ($kid->ppaddr eq "pp_anonlist" || $kid->ppaddr eq "pp_anonhash") {
	    my($pre, $post) = @@{{"pp_anonlist" => ["[","]"],
				 "pp_anonhash" => ["{","}"]}->{$kid->ppaddr}};
	    my($expr, @@exprs);
	    $kid = $kid->first->sibling; # skip pushmark
	    for (; !null($kid); $kid = $kid->sibling) {
		$expr = $self->deparse($kid, 6);
		push @@exprs, $expr;
	    }
	    return $pre . join(", ", @@exprs) . $post;
	} elsif (!null($kid->sibling) and 
		 $kid->sibling->ppaddr eq "pp_anoncode") {
	    return "sub " .
		$self->deparse_sub($self->padval($kid->sibling->targ));
	} elsif ($kid->ppaddr eq "pp_pushmark"
		 and $kid->sibling->ppaddr =~ /^pp_(pad|rv2)[ah]v$/
		 and not $kid->sibling->flags & OPf_REF) {
	    # The @@a in \(@@a) isn't in ref context, but only when the
	    # parens are there.
	    return "\\(" . $self->deparse($kid->sibling, 1) . ")";
	}
    }
    $self->pfixop($op, $cx, "\\", 20);
}

sub pp_srefgen { pp_refgen(@@_) }

sub pp_readline {
    my $self = shift;
    my($op, $cx) = @@_;
    my $kid = $op->first;
    $kid = $kid->first if $kid->ppaddr eq "pp_rv2gv"; # <$fh>
    if ($kid->ppaddr eq "pp_rv2gv") {
	$kid = $kid->first;
    }
    return "<" . $self->deparse($kid, 1) . ">";
}

sub loopex {
    my $self = shift;
    my ($op, $cx, $name) = @@_;
    if (class($op) eq "PVOP") {
	return "$name " . $op->pv;
    } elsif (class($op) eq "OP") {
	return $name;
    } elsif (class($op) eq "UNOP") {
	# Note -- loop exits are actually exempt from the
	# looks-like-a-func rule, but a few extra parens won't hurt
	return $self->maybe_parens_unop($name, $op->first, $cx);
    }
}

sub pp_last { loopex(@@_, "last") }
sub pp_next { loopex(@@_, "next") }
sub pp_redo { loopex(@@_, "redo") }
sub pp_goto { loopex(@@_, "goto") }
sub pp_dump { loopex(@@_, "dump") }

sub ftst {
    my $self = shift;
    my($op, $cx, $name) = @@_;
    if (class($op) eq "UNOP") {
	# Genuine `-X' filetests are exempt from the LLAFR, but not
	# l?stat(); for the sake of clarity, give'em all parens
	return $self->maybe_parens_unop($name, $op->first, $cx);
    } elsif (class($op) eq "GVOP") {
	return $self->maybe_parens_func($name, $self->pp_gv($op, 1), $cx, 16);
    } else { # I don't think baseop filetests ever survive ck_ftst, but...
	return $name;
    }
}

sub pp_lstat { ftst(@@_, "lstat") }
sub pp_stat { ftst(@@_, "stat") }
sub pp_ftrread { ftst(@@_, "-R") }
sub pp_ftrwrite { ftst(@@_, "-W") }
sub pp_ftrexec { ftst(@@_, "-X") }
sub pp_fteread { ftst(@@_, "-r") }
sub pp_ftewrite { ftst(@@_, "-r") }
sub pp_fteexec { ftst(@@_, "-r") }
sub pp_ftis { ftst(@@_, "-e") }
sub pp_fteowned { ftst(@@_, "-O") }
sub pp_ftrowned { ftst(@@_, "-o") }
sub pp_ftzero { ftst(@@_, "-z") }
sub pp_ftsize { ftst(@@_, "-s") }
sub pp_ftmtime { ftst(@@_, "-M") }
sub pp_ftatime { ftst(@@_, "-A") }
sub pp_ftctime { ftst(@@_, "-C") }
sub pp_ftsock { ftst(@@_, "-S") }
sub pp_ftchr { ftst(@@_, "-c") }
sub pp_ftblk { ftst(@@_, "-b") }
sub pp_ftfile { ftst(@@_, "-f") }
sub pp_ftdir { ftst(@@_, "-d") }
sub pp_ftpipe { ftst(@@_, "-p") }
sub pp_ftlink { ftst(@@_, "-l") }
sub pp_ftsuid { ftst(@@_, "-u") }
sub pp_ftsgid { ftst(@@_, "-g") }
sub pp_ftsvtx { ftst(@@_, "-k") }
sub pp_fttty { ftst(@@_, "-t") }
sub pp_fttext { ftst(@@_, "-T") }
sub pp_ftbinary { ftst(@@_, "-B") }

sub SWAP_CHILDREN () { 1 }
sub ASSIGN () { 2 } # has OP= variant

sub OPf_STACKED () { 64 }

my(%left, %right);

sub assoc_class {
    my $op = shift;
    my $name = $op->ppaddr;
    if ($name eq "pp_concat" and $op->first->ppaddr eq "pp_concat") {
	# avoid spurious `=' -- see comment in pp_concat
	return "pp_concat";
    }
    if ($name eq "pp_null" and class($op) eq "UNOP"
	and $op->first->ppaddr =~ /^pp_(and|x?or)$/
	and null $op->first->sibling)
    {
	# Like all conditional constructs, OP_ANDs and OP_ORs are topped
	# with a null that's used as the common end point of the two
	# flows of control. For precedence purposes, ignore it.
	# (COND_EXPRs have these too, but we don't bother with
	# their associativity).
	return assoc_class($op->first);
    }
    return $name . ($op->flags & OPf_STACKED ? "=" : "");
}

# Left associative operators, like `+', for which
# $a + $b + $c is equivalent to ($a + $b) + $c

BEGIN {
    %left = ('pp_multiply' => 19, 'pp_i_multiply' => 19,
	     'pp_divide' => 19, 'pp_i_divide' => 19,
	     'pp_modulo' => 19, 'pp_i_modulo' => 19,
	     'pp_repeat' => 19,
	     'pp_add' => 18, 'pp_i_add' => 18,
	     'pp_subtract' => 18, 'pp_i_subtract' => 18,
	     'pp_concat' => 18,
	     'pp_left_shift' => 17, 'pp_right_shift' => 17,
	     'pp_bit_and' => 13,
	     'pp_bit_or' => 12, 'pp_bit_xor' => 12,
	     'pp_and' => 3,
	     'pp_or' => 2, 'pp_xor' => 2,
	    );
}

sub deparse_binop_left {
    my $self = shift;
    my($op, $left, $prec) = @@_;
    if ($left{assoc_class($op)}
	and $left{assoc_class($op)} == $left{assoc_class($left)})
    {
	return $self->deparse($left, $prec - .00001);
    } else {
	return $self->deparse($left, $prec);	
    }
}

# Right associative operators, like `=', for which
# $a = $b = $c is equivalent to $a = ($b = $c)

BEGIN {
    %right = ('pp_pow' => 22,
	      'pp_sassign=' => 7, 'pp_aassign=' => 7,
	      'pp_multiply=' => 7, 'pp_i_multiply=' => 7,
	      'pp_divide=' => 7, 'pp_i_divide=' => 7,
	      'pp_modulo=' => 7, 'pp_i_modulo=' => 7,
	      'pp_repeat=' => 7,
	      'pp_add=' => 7, 'pp_i_add=' => 7,
	      'pp_subtract=' => 7, 'pp_i_subtract=' => 7,
	      'pp_concat=' => 7,
	      'pp_left_shift=' => 7, 'pp_right_shift=' => 7,
	      'pp_bit_and=' => 7,
	      'pp_bit_or=' => 7, 'pp_bit_xor=' => 7,
	      'pp_andassign' => 7,
	      'pp_orassign' => 7,
	     );
}

sub deparse_binop_right {
    my $self = shift;
    my($op, $right, $prec) = @@_;
    if ($right{assoc_class($op)}
	and $right{assoc_class($op)} == $right{assoc_class($right)})
    {
	return $self->deparse($right, $prec - .00001);
    } else {
	return $self->deparse($right, $prec);	
    }
}

sub binop {
    my $self = shift;
    my ($op, $cx, $opname, $prec, $flags) = (@@_, 0);
    my $left = $op->first;
    my $right = $op->last;
    my $eq = "";
    if ($op->flags & OPf_STACKED && $flags & ASSIGN) {
	$eq = "=";
	$prec = 7;
    }
    if ($flags & SWAP_CHILDREN) {
	($left, $right) = ($right, $left);
    }
    $left = $self->deparse_binop_left($op, $left, $prec);
    $right = $self->deparse_binop_right($op, $right, $prec);
    return $self->maybe_parens("$left $opname$eq $right", $cx, $prec);
}

sub pp_add { binop(@@_, "+", 18, ASSIGN) }
sub pp_multiply { binop(@@_, "*", 19, ASSIGN) }
sub pp_subtract { binop(@@_, "-",18,  ASSIGN) }
sub pp_divide { binop(@@_, "/", 19, ASSIGN) }
sub pp_modulo { binop(@@_, "%", 19, ASSIGN) }
sub pp_i_add { binop(@@_, "+", 18, ASSIGN) }
sub pp_i_multiply { binop(@@_, "*", 19, ASSIGN) }
sub pp_i_subtract { binop(@@_, "-", 18, ASSIGN) }
sub pp_i_divide { binop(@@_, "/", 19, ASSIGN) }
sub pp_i_modulo { binop(@@_, "%", 19, ASSIGN) }
sub pp_pow { binop(@@_, "**", 22, ASSIGN) }

sub pp_left_shift { binop(@@_, "<<", 17, ASSIGN) }
sub pp_right_shift { binop(@@_, ">>", 17, ASSIGN) }
sub pp_bit_and { binop(@@_, "&", 13, ASSIGN) }
sub pp_bit_or { binop(@@_, "|", 12, ASSIGN) }
sub pp_bit_xor { binop(@@_, "^", 12, ASSIGN) }

sub pp_eq { binop(@@_, "==", 14) }
sub pp_ne { binop(@@_, "!=", 14) }
sub pp_lt { binop(@@_, "<", 15) }
sub pp_gt { binop(@@_, ">", 15) }
sub pp_ge { binop(@@_, ">=", 15) }
sub pp_le { binop(@@_, "<=", 15) }
sub pp_ncmp { binop(@@_, "<=>", 14) }
sub pp_i_eq { binop(@@_, "==", 14) }
sub pp_i_ne { binop(@@_, "!=", 14) }
sub pp_i_lt { binop(@@_, "<", 15) }
sub pp_i_gt { binop(@@_, ">", 15) }
sub pp_i_ge { binop(@@_, ">=", 15) }
sub pp_i_le { binop(@@_, "<=", 15) }
sub pp_i_ncmp { binop(@@_, "<=>", 14) }

sub pp_seq { binop(@@_, "eq", 14) }
sub pp_sne { binop(@@_, "ne", 14) }
sub pp_slt { binop(@@_, "lt", 15) }
sub pp_sgt { binop(@@_, "gt", 15) }
sub pp_sge { binop(@@_, "ge", 15) }
sub pp_sle { binop(@@_, "le", 15) }
sub pp_scmp { binop(@@_, "cmp", 14) }

sub pp_sassign { binop(@@_, "=", 7, SWAP_CHILDREN) }
sub pp_aassign { binop(@@_, "=", 7, SWAP_CHILDREN) }

# `.' is special because concats-of-concats are optimized to save copying
# by making all but the first concat stacked. The effect is as if the
# programmer had written `($a . $b) .= $c', except legal.
sub pp_concat {
    my $self = shift;
    my($op, $cx) = @@_;
    my $left = $op->first;
    my $right = $op->last;
    my $eq = "";
    my $prec = 18;
    if ($op->flags & OPf_STACKED and $op->first->ppaddr ne "pp_concat") {
	$eq = "=";
	$prec = 7;
    }
    $left = $self->deparse_binop_left($op, $left, $prec);
    $right = $self->deparse_binop_right($op, $right, $prec);
    return $self->maybe_parens("$left .$eq $right", $cx, $prec);
}

# `x' is weird when the left arg is a list
sub pp_repeat {
    my $self = shift;
    my($op, $cx) = @@_;
    my $left = $op->first;
    my $right = $op->last;
    my $eq = "";
    my $prec = 19;
    if ($op->flags & OPf_STACKED) {
	$eq = "=";
	$prec = 7;
    }
    if (null($right)) { # list repeat; count is inside left-side ex-list
	my $kid = $left->first->sibling; # skip pushmark
	my @@exprs;
	for (; !null($kid->sibling); $kid = $kid->sibling) {
	    push @@exprs, $self->deparse($kid, 6);
	}
	$right = $kid;
	$left = "(" . join(", ", @@exprs). ")";
    } else {
	$left = $self->deparse_binop_left($op, $left, $prec);
    }
    $right = $self->deparse_binop_right($op, $right, $prec);
    return $self->maybe_parens("$left x$eq $right", $cx, $prec);
}

sub range {
    my $self = shift;
    my ($op, $cx, $type) = @@_;
    my $left = $op->first;
    my $right = $left->sibling;
    $left = $self->deparse($left, 9);
    $right = $self->deparse($right, 9);
    return $self->maybe_parens("$left $type $right", $cx, 9);
}

sub pp_flop {
    my $self = shift;
    my($op, $cx) = @@_;
    my $flip = $op->first;
    my $type = ($flip->flags & OPf_SPECIAL) ? "..." : "..";
    return $self->range($flip->first, $cx, $type);
}

# one-line while/until is handled in pp_leave

sub logop {
    my $self = shift;
    my ($op, $cx, $lowop, $lowprec, $highop, $highprec, $blockname) = @@_;
    my $left = $op->first;
    my $right = $op->first->sibling;
    if ($cx == 0 and is_scope($right) and $blockname) { # if ($a) {$b}
	$left = $self->deparse($left, 1);
	$right = $self->deparse($right, 0);
	return "$blockname ($left) {\n\t$right\n\b}\cK";
    } elsif ($cx == 0 and $blockname and not $self->{'parens'}) { # $b if $a
	$right = $self->deparse($right, 1);
	$left = $self->deparse($left, 1);
	return "$right $blockname $left";
    } elsif ($cx > $lowprec and $highop) { # $a && $b
	$left = $self->deparse_binop_left($op, $left, $highprec);
	$right = $self->deparse_binop_right($op, $right, $highprec);
	return $self->maybe_parens("$left $highop $right", $cx, $highprec);
    } else { # $a and $b
	$left = $self->deparse_binop_left($op, $left, $lowprec);
	$right = $self->deparse_binop_right($op, $right, $lowprec);
	return $self->maybe_parens("$left $lowop $right", $cx, $lowprec); 
    }
}

sub pp_and { logop(@@_, "and", 3, "&&", 11, "if") }
sub pp_or {  logop(@@_, "or",  2, "||", 10, "unless") }
sub pp_xor { logop(@@_, "xor", 2, "",   0,  "") }

sub logassignop {
    my $self = shift;
    my ($op, $cx, $opname) = @@_;
    my $left = $op->first;
    my $right = $op->first->sibling->first; # skip sassign
    $left = $self->deparse($left, 7);
    $right = $self->deparse($right, 7);
    return $self->maybe_parens("$left $opname $right", $cx, 7);
}

sub pp_andassign { logassignop(@@_, "&&=") }
sub pp_orassign { logassignop(@@_, "||=") }

sub listop {
    my $self = shift;
    my($op, $cx, $name) = @@_;
    my(@@exprs);
    my $parens = ($cx >= 5) || $self->{'parens'};
    my $kid = $op->first->sibling;
    return $name if null $kid;
    my $first = $self->deparse($kid, 6);
    $first = "+$first" if not $parens and substr($first, 0, 1) eq "(";
    push @@exprs, $first;
    $kid = $kid->sibling;
    for (; !null($kid); $kid = $kid->sibling) {
	push @@exprs, $self->deparse($kid, 6);
    }
    if ($parens) {
	return "$name(" . join(", ", @@exprs) . ")";
    } else {
	return "$name " . join(", ", @@exprs);
    }
}

sub pp_bless { listop(@@_, "bless") }
sub pp_atan2 { listop(@@_, "atan2") }
sub pp_substr { maybe_local(@@_, listop(@@_, "substr")) }
sub pp_vec { maybe_local(@@_, listop(@@_, "vec")) }
sub pp_index { listop(@@_, "index") }
sub pp_rindex { listop(@@_, "rindex") }
sub pp_sprintf { listop(@@_, "sprintf") }
sub pp_formline { listop(@@_, "formline") } # see also deparse_format
sub pp_crypt { listop(@@_, "crypt") }
sub pp_unpack { listop(@@_, "unpack") }
sub pp_pack { listop(@@_, "pack") }
sub pp_join { listop(@@_, "join") }
sub pp_splice { listop(@@_, "splice") }
sub pp_push { listop(@@_, "push") }
sub pp_unshift { listop(@@_, "unshift") }
sub pp_reverse { listop(@@_, "reverse") }
sub pp_warn { listop(@@_, "warn") }
sub pp_die { listop(@@_, "die") }
# Actually, return is exempt from the LLAFR (see examples in this very
# module!), but for consistency's sake, ignore that fact
sub pp_return { listop(@@_, "return") }
sub pp_open { listop(@@_, "open") }
sub pp_pipe_op { listop(@@_, "pipe") }
sub pp_tie { listop(@@_, "tie") }
sub pp_dbmopen { listop(@@_, "dbmopen") }
sub pp_sselect { listop(@@_, "select") }
sub pp_select { listop(@@_, "select") }
sub pp_read { listop(@@_, "read") }
sub pp_sysopen { listop(@@_, "sysopen") }
sub pp_sysseek { listop(@@_, "sysseek") }
sub pp_sysread { listop(@@_, "sysread") }
sub pp_syswrite { listop(@@_, "syswrite") }
sub pp_send { listop(@@_, "send") }
sub pp_recv { listop(@@_, "recv") }
sub pp_seek { listop(@@_, "seek") }
sub pp_fcntl { listop(@@_, "fcntl") }
sub pp_ioctl { listop(@@_, "ioctl") }
sub pp_flock { listop(@@_, "flock") }
sub pp_socket { listop(@@_, "socket") }
sub pp_sockpair { listop(@@_, "sockpair") }
sub pp_bind { listop(@@_, "bind") }
sub pp_connect { listop(@@_, "connect") }
sub pp_listen { listop(@@_, "listen") }
sub pp_accept { listop(@@_, "accept") }
sub pp_shutdown { listop(@@_, "shutdown") }
sub pp_gsockopt { listop(@@_, "getsockopt") }
sub pp_ssockopt { listop(@@_, "setsockopt") }
sub pp_chown { listop(@@_, "chown") }
sub pp_unlink { listop(@@_, "unlink") }
sub pp_chmod { listop(@@_, "chmod") }
sub pp_utime { listop(@@_, "utime") }
sub pp_rename { listop(@@_, "rename") }
sub pp_link { listop(@@_, "link") }
sub pp_symlink { listop(@@_, "symlink") }
sub pp_mkdir { listop(@@_, "mkdir") }
sub pp_open_dir { listop(@@_, "opendir") }
sub pp_seekdir { listop(@@_, "seekdir") }
sub pp_waitpid { listop(@@_, "waitpid") }
sub pp_system { listop(@@_, "system") }
sub pp_exec { listop(@@_, "exec") }
sub pp_kill { listop(@@_, "kill") }
sub pp_setpgrp { listop(@@_, "setpgrp") }
sub pp_getpriority { listop(@@_, "getpriority") }
sub pp_setpriority { listop(@@_, "setpriority") }
sub pp_shmget { listop(@@_, "shmget") }
sub pp_shmctl { listop(@@_, "shmctl") }
sub pp_shmread { listop(@@_, "shmread") }
sub pp_shmwrite { listop(@@_, "shmwrite") }
sub pp_msgget { listop(@@_, "msgget") }
sub pp_msgctl { listop(@@_, "msgctl") }
sub pp_msgsnd { listop(@@_, "msgsnd") }
sub pp_msgrcv { listop(@@_, "msgrcv") }
sub pp_semget { listop(@@_, "semget") }
sub pp_semctl { listop(@@_, "semctl") }
sub pp_semop { listop(@@_, "semop") }
sub pp_ghbyaddr { listop(@@_, "gethostbyaddr") }
sub pp_gnbyaddr { listop(@@_, "getnetbyaddr") }
sub pp_gpbynumber { listop(@@_, "getprotobynumber") }
sub pp_gsbyname { listop(@@_, "getservbyname") }
sub pp_gsbyport { listop(@@_, "getservbyport") }
sub pp_syscall { listop(@@_, "syscall") }

sub pp_glob {
    my $self = shift;
    my($op, $cx) = @@_;
    my $text = $self->dq($op->first->sibling);  # skip pushmark
    if ($text =~ /^\$?(\w|::|\`)+$/ # could look like a readline
	or $text =~ /[<>]/) { 
	return 'glob(' . single_delim('qq', '"', $text) . ')';
    } else {
	return '<' . $text . '>';
    }
}

# Truncate is special because OPf_SPECIAL makes a bareword first arg
# be a filehandle. This could probably be better fixed in the core
# by moving the GV lookup into ck_truc.

sub pp_truncate {
    my $self = shift;
    my($op, $cx) = @@_;
    my(@@exprs);
    my $parens = ($cx >= 5) || $self->{'parens'};
    my $kid = $op->first->sibling;
    my($fh, $len);
    if ($op->flags & OPf_SPECIAL) {
	# $kid is an OP_CONST
	$fh = $kid->sv->PV;
    } else {
	$fh = $self->deparse($kid, 6);
        $fh = "+$fh" if not $parens and substr($fh, 0, 1) eq "(";
    }
    my $len = $self->deparse($kid->sibling, 6);
    if ($parens) {
	return "truncate($fh, $len)";
    } else {
	return "truncate $fh, $len";
    }

}

sub indirop {
    my $self = shift;
    my($op, $cx, $name) = @@_;
    my($expr, @@exprs);
    my $kid = $op->first->sibling;
    my $indir = "";
    if ($op->flags & OPf_STACKED) {
	$indir = $kid;
	$indir = $indir->first; # skip rv2gv
	if (is_scope($indir)) {
	    $indir = "{" . $self->deparse($indir, 0) . "}";
	} else {
	    $indir = $self->deparse($indir, 24);
	}
	$indir = $indir . " ";
	$kid = $kid->sibling;
    }
    for (; !null($kid); $kid = $kid->sibling) {
	$expr = $self->deparse($kid, 6);
	push @@exprs, $expr;
    }
    return $self->maybe_parens_func($name,
				    $indir . join(", ", @@exprs),
				    $cx, 5);
}

sub pp_prtf { indirop(@@_, "printf") }
sub pp_print { indirop(@@_, "print") }
sub pp_sort { indirop(@@_, "sort") }

sub mapop {
    my $self = shift;
    my($op, $cx, $name) = @@_;
    my($expr, @@exprs);
    my $kid = $op->first; # this is the (map|grep)start
    $kid = $kid->first->sibling; # skip a pushmark
    my $code = $kid->first; # skip a null
    if (is_scope $code) {
	$code = "{" . $self->deparse($code, 1) . "} ";
    } else {
	$code = $self->deparse($code, 24) . ", ";
    }
    $kid = $kid->sibling;
    for (; !null($kid); $kid = $kid->sibling) {
	$expr = $self->deparse($kid, 6);
	push @@exprs, $expr if $expr;
    }
    return $self->maybe_parens_func($name, $code . join(", ", @@exprs), $cx, 5);
}

sub pp_mapwhile { mapop(@@_, "map") }   
sub pp_grepwhile { mapop(@@_, "grep") }   

sub pp_list {
    my $self = shift;
    my($op, $cx) = @@_;
    my($expr, @@exprs);
    my $kid = $op->first->sibling; # skip pushmark
    my $lop;
    my $local = "either"; # could be local(...) or my(...)
    for ($lop = $kid; !null($lop); $lop = $lop->sibling) {
	# This assumes that no other private flags equal 128, and that
	# OPs that store things other than flags in their op_private,
	# like OP_AELEMFAST, won't be immediate children of a list.
	unless ($lop->private & OPp_LVAL_INTRO or $lop->ppaddr eq "pp_undef")
	{
	    $local = ""; # or not
	    last;
	}
	if ($lop->ppaddr =~ /^pp_pad[ash]v$/) { # my()
	    ($local = "", last) if $local eq "local";
	    $local = "my";
	} elsif ($lop->ppaddr ne "pp_undef") { # local()
	    ($local = "", last) if $local eq "my";
	    $local = "local";
	}
    }
    $local = "" if $local eq "either"; # no point if it's all undefs
    return $self->deparse($kid, $cx) if null $kid->sibling and not $local;
    for (; !null($kid); $kid = $kid->sibling) {
	if ($local) {
	    if (class($kid) eq "UNOP" and $kid->first->ppaddr eq "pp_gvsv") {
		$lop = $kid->first;
	    } else {
		$lop = $kid;
	    }
	    $self->{'avoid_local'}{$$lop}++;
	    $expr = $self->deparse($kid, 6);
	    delete $self->{'avoid_local'}{$$lop};
	} else {
	    $expr = $self->deparse($kid, 6);
	}
	push @@exprs, $expr;
    }
    if ($local) {
	return "$local(" . join(", ", @@exprs) . ")";
    } else {
	return $self->maybe_parens( join(", ", @@exprs), $cx, 6);	
    }
}

sub pp_cond_expr {
    my $self = shift;
    my($op, $cx) = @@_;
    my $cond = $op->first;
    my $true = $cond->sibling;
    my $false = $true->sibling;
    my $cuddle = $self->{'cuddle'};
    unless ($cx == 0 and is_scope($true) and is_scope($false)) {
	$cond = $self->deparse($cond, 8);
	$true = $self->deparse($true, 8);
	$false = $self->deparse($false, 8);
	return $self->maybe_parens("$cond ? $true : $false", $cx, 8);
    } 
    $cond = $self->deparse($cond, 1);
    $true = $self->deparse($true, 0);    
    if ($false->ppaddr eq "pp_lineseq") { # braces w/o scope => elsif
	my $head = "if ($cond) {\n\t$true\n\b}";
	my @@elsifs;
	while (!null($false) and $false->ppaddr eq "pp_lineseq") {
	    my $newop = $false->first->sibling->first;
	    my $newcond = $newop->first;
	    my $newtrue = $newcond->sibling;
	    $false = $newtrue->sibling; # last in chain is OP_AND => no else
	    $newcond = $self->deparse($newcond, 1);
	    $newtrue = $self->deparse($newtrue, 0);
	    push @@elsifs, "elsif ($newcond) {\n\t$newtrue\n\b}";
	}
	if (!null($false)) {	    
	    $false = $cuddle . "else {\n\t" .
	      $self->deparse($false, 0) . "\n\b}\cK";
	} else {
	    $false = "\cK";
	}
	return $head . join($cuddle, "", @@elsifs) . $false; 
    }
    $false = $self->deparse($false, 0);
    return "if ($cond) {\n\t$true\n\b}${cuddle}else {\n\t$false\n\b}\cK";
}

sub pp_leaveloop {
    my $self = shift;
    my($op, $cx) = @@_;
    my $enter = $op->first;
    my $kid = $enter->sibling;
    local($self->{'curstash'}) = $self->{'curstash'};
    my $head = "";
    my $bare = 0;
    if ($kid->ppaddr eq "pp_lineseq") { # bare or infinite loop 
	if (is_state $kid->last) { # infinite
	    $head = "for (;;) "; # shorter than while (1)
	} else {
	    $bare = 1;
	}
    } elsif ($enter->ppaddr eq "pp_enteriter") { # foreach
	my $ary = $enter->first->sibling; # first was pushmark
	my $var = $ary->sibling;
	if ($enter->flags & OPf_STACKED
	    and not null $ary->first->sibling->sibling)
	{
	    $ary = $self->deparse($ary->first->sibling, 9) . " .. " .
	      $self->deparse($ary->first->sibling->sibling, 9);
	} else {
	    $ary = $self->deparse($ary, 1);
	}
	if (null $var) {
	    if ($enter->flags & OPf_SPECIAL) { # thread special var
		$var = $self->pp_threadsv($enter, 1);
	    } else { # regular my() variable
		$var = $self->pp_padsv($enter, 1);
		if ($self->padname_sv($enter->targ)->IVX ==
		    $kid->first->first->sibling->last->cop_seq)
		{
		    # If the scope of this variable closes at the last
		    # statement of the loop, it must have been
		    # declared here.
		    $var = "my " . $var;
		}
	    }
	} elsif ($var->ppaddr eq "pp_rv2gv") {
	    $var = $self->pp_rv2sv($var, 1);
	} elsif ($var->ppaddr eq "pp_gv") {
	    $var = "\$" . $self->deparse($var, 1);
	}
	$head = "foreach $var ($ary) ";
	$kid = $kid->first->first->sibling; # skip OP_AND and OP_ITER
    } elsif ($kid->ppaddr eq "pp_null") { # while/until
	$kid = $kid->first;
	my $name = {"pp_and" => "while", "pp_or" => "until"}
	            ->{$kid->ppaddr};
	$head = "$name (" . $self->deparse($kid->first, 1) . ") ";
	$kid = $kid->first->sibling;
    } elsif ($kid->ppaddr eq "pp_stub") { # bare and empty
	return "{;}"; # {} could be a hashref
    }
    # The third-to-last kid is the continue block if the pointer used
    # by `next BLOCK' points to its first OP, which happens to be the
    # the op_next of the head of the _previous_ statement. 
    # Unless it's a bare loop, in which case it's last, since there's
    # no unstack or extra nextstate.
    # Except if the previous head isn't null but the first kid is
    # (because it's a nulled out nextstate in a scope), in which
    # case the head's next is advanced past the null but the nextop's
    # isn't, so we need to try nextop->next.
    my($cont, $precont);
    if ($bare) {
	$cont = $kid->first;
	while (!null($cont->sibling)) {
	    $precont = $cont;
	    $cont = $cont->sibling;
	}	
    } else {
	$cont = $kid->first;
	while (!null($cont->sibling->sibling->sibling)) {
	    $precont = $cont;
	    $cont = $cont->sibling;
	}
    }
    if ($precont and $ {$precont->next} == $ {$enter->nextop}
	|| $ {$precont->next} == $ {$enter->nextop->next} )
    {
       my $state = $kid->first;
       my $cuddle = $self->{'cuddle'};
       my($expr, @@exprs);
       for (; $$state != $$cont; $state = $state->sibling) {
	   $expr = "";
	   if (is_state $state) {
	       $expr = $self->deparse($state, 0);
	       $state = $state->sibling;
	       last if null $kid;
	   }
	   $expr .= $self->deparse($state, 0);
	   push @@exprs, $expr if $expr;
       }
       $kid = join(";\n", @@exprs);
       $cont = $cuddle . "continue {\n\t" .
	 $self->deparse($cont, 0) . "\n\b}\cK";
    } else {
	$cont = "\cK";
	$kid = $self->deparse($kid, 0);
    }
    return $head . "{\n\t" . $kid . "\n\b}" . $cont;
}

sub pp_leavetry {
    my $self = shift;
    return "eval {\n\t" . $self->pp_leave(@@_) . "\n\b}";
}

sub OP_CONST () { 5 }

# XXX need a better way to do this
sub OP_STRINGIFY () { $] > 5.004_72 ? 67 : 65 }

sub pp_null {
    my $self = shift;
    my($op, $cx) = @@_;
    if (class($op) eq "OP") {
	return "'???'" if $op->targ == OP_CONST; # old value is lost
    } elsif ($op->first->ppaddr eq "pp_pushmark") {
	return $self->pp_list($op, $cx);
    } elsif ($op->first->ppaddr eq "pp_enter") {
	return $self->pp_leave($op, $cx);
    } elsif ($op->targ == OP_STRINGIFY) {
	return $self->dquote($op);
    } elsif (!null($op->first->sibling) and
	     $op->first->sibling->ppaddr eq "pp_readline" and
	     $op->first->sibling->flags & OPf_STACKED) {
	return $self->maybe_parens($self->deparse($op->first, 7) . " = "
				   . $self->deparse($op->first->sibling, 7),
				   $cx, 7);
    } elsif (!null($op->first->sibling) and
	     $op->first->sibling->ppaddr eq "pp_trans" and
	     $op->first->sibling->flags & OPf_STACKED) {
	return $self->maybe_parens($self->deparse($op->first, 20) . " =~ "
				   . $self->deparse($op->first->sibling, 20),
				   $cx, 20);
    } else {
	return $self->deparse($op->first, $cx);
    }
}

sub padname {
    my $self = shift;
    my $targ = shift;
    my $str = $self->padname_sv($targ)->PV;
    return padname_fix($str);
}

sub padany {
    my $self = shift;
    my $op = shift;
    return substr($self->padname($op->targ), 1); # skip $/@@/%
}

sub pp_padsv {
    my $self = shift;
    my($op, $cx) = @@_;
    return $self->maybe_my($op, $cx, $self->padname($op->targ));
}

sub pp_padav { pp_padsv(@@_) }
sub pp_padhv { pp_padsv(@@_) }

my @@threadsv_names;

BEGIN {
    @@threadsv_names = ("_", "1", "2", "3", "4", "5", "6", "7", "8", "9",
		       "&", "`", "'", "+", "/", ".", ",", "\\", '"', ";",
		       "^", "-", "%", "=", "|", "~", ":", "^A", "^E",
		       "!", "@@");
}

sub pp_threadsv {
    my $self = shift;
    my($op, $cx) = @@_;
    return $self->maybe_local($op, $cx, "\$" .  $threadsv_names[$op->targ]);
}    

sub pp_gvsv {
    my $self = shift;
    my($op, $cx) = @@_;
    return $self->maybe_local($op, $cx, "\$" . $self->gv_name($op->gv));
}

sub pp_gv {
    my $self = shift;
    my($op, $cx) = @@_;
    return $self->gv_name($op->gv);
}

sub pp_aelemfast {
    my $self = shift;
    my($op, $cx) = @@_;
    my $gv = $op->gv;
    return "\$" . $self->gv_name($gv) . "[" . $op->private . "]";
}

sub rv2x {
    my $self = shift;
    my($op, $cx, $type) = @@_;
    my $kid = $op->first;
    my $str = $self->deparse($kid, 0);
    return $type . (is_scalar($kid) ? $str : "{$str}");
}

sub pp_rv2sv { maybe_local(@@_, rv2x(@@_, "\$")) }
sub pp_rv2hv { maybe_local(@@_, rv2x(@@_, "%")) }
sub pp_rv2gv { maybe_local(@@_, rv2x(@@_, "*")) }

# skip rv2av
sub pp_av2arylen {
    my $self = shift;
    my($op, $cx) = @@_;
    if ($op->first->ppaddr eq "pp_padav") {
	return $self->maybe_local($op, $cx, '$#' . $self->padany($op->first));
    } else {
	return $self->maybe_local($op, $cx,
				  $self->rv2x($op->first, $cx, '$#'));
    }
}

# skip down to the old, ex-rv2cv
sub pp_rv2cv { $_[0]->rv2x($_[1]->first->first->sibling, $_[2], "&") }

sub pp_rv2av {
    my $self = shift;
    my($op, $cx) = @@_;
    my $kid = $op->first;
    if ($kid->ppaddr eq "pp_const") { # constant list
	my $av = $kid->sv;
	return "(" . join(", ", map(const($_), $av->ARRAY)) . ")";
    } else {
	return $self->maybe_local($op, $cx, $self->rv2x($op, $cx, "\@@"));
    }
 }


sub elem {
    my $self = shift;
    my ($op, $cx, $left, $right, $padname) = @@_;
    my($array, $idx) = ($op->first, $op->first->sibling);
    unless ($array->ppaddr eq $padname) { # Maybe this has been fixed	
	$array = $array->first; # skip rv2av (or ex-rv2av in _53+)
    }
    if ($array->ppaddr eq $padname) {
	$array = $self->padany($array);
    } elsif (is_scope($array)) { # ${expr}[0]
	$array = "{" . $self->deparse($array, 0) . "}";
    } elsif (is_scalar $array) { # $x[0], $$x[0], ...
	$array = $self->deparse($array, 24);
    } else {
	# $x[20][3]{hi} or expr->[20]
	my $arrow;
	$arrow = "->" if $array->ppaddr !~ /^pp_[ah]elem$/;
	return $self->deparse($array, 24) . $arrow .
	    $left . $self->deparse($idx, 1) . $right;
    }
    $idx = $self->deparse($idx, 1);
    return "\$" . $array . $left . $idx . $right;
}

sub pp_aelem { maybe_local(@@_, elem(@@_, "[", "]", "pp_padav")) }
sub pp_helem { maybe_local(@@_, elem(@@_, "{", "}", "pp_padhv")) }

sub pp_gelem {
    my $self = shift;
    my($op, $cx) = @@_;
    my($glob, $part) = ($op->first, $op->last);
    $glob = $glob->first; # skip rv2gv
    $glob = $glob->first if $glob->ppaddr eq "pp_rv2gv"; # this one's a bug
    my $scope = is_scope($glob);
    $glob = $self->deparse($glob, 0);
    $part = $self->deparse($part, 1);
    return "*" . ($scope ? "{$glob}" : $glob) . "{$part}";
}

sub slice {
    my $self = shift;
    my ($op, $cx, $left, $right, $regname, $padname) = @@_;
    my $last;
    my(@@elems, $kid, $array, $list);
    if (class($op) eq "LISTOP") {
	$last = $op->last;
    } else { # ex-hslice inside delete()
	for ($kid = $op->first; !null $kid->sibling; $kid = $kid->sibling) {}
	$last = $kid;
    }
    $array = $last;
    $array = $array->first
	if $array->ppaddr eq $regname or $array->ppaddr eq "pp_null";
    if (is_scope($array)) {
	$array = "{" . $self->deparse($array, 0) . "}";
    } elsif ($array->ppaddr eq $padname) {
	$array = $self->padany($array);
    } else {
	$array = $self->deparse($array, 24);
    }
    $kid = $op->first->sibling; # skip pushmark
    if ($kid->ppaddr eq "pp_list") {
	$kid = $kid->first->sibling; # skip list, pushmark
	for (; !null $kid; $kid = $kid->sibling) {
	    push @@elems, $self->deparse($kid, 6);
	}
	$list = join(", ", @@elems);
    } else {
	$list = $self->deparse($kid, 1);
    }
    return "\@@" . $array . $left . $list . $right;
}

sub pp_aslice { maybe_local(@@_, slice(@@_, "[", "]", 
				      "pp_rv2av", "pp_padav")) }
sub pp_hslice { maybe_local(@@_, slice(@@_, "{", "}",
				      "pp_rv2hv", "pp_padhv")) }

sub pp_lslice {
    my $self = shift;
    my($op, $cx) = @@_;
    my $idx = $op->first;
    my $list = $op->last;
    my(@@elems, $kid);
    $list = $self->deparse($list, 1);
    $idx = $self->deparse($idx, 1);
    return "($list)" . "[$idx]";
}

sub OPpENTERSUB_AMPER () { 8 }

sub OPf_WANT () { 3 }
sub OPf_WANT_VOID () { 1 }
sub OPf_WANT_SCALAR () { 2 }
sub OPf_WANT_LIST () { 2 }

sub want_scalar {
    my $op = shift;
    return ($op->flags & OPf_WANT) == OPf_WANT_SCALAR;
}

sub pp_entersub {
    my $self = shift;
    my($op, $cx) = @@_;
    my $prefix = "";
    my $amper = "";
    my $proto = undef;
    my $simple = 0;
    my($kid, $args, @@exprs);
    if (not null $op->first->sibling) { # method
	$kid = $op->first->sibling; # skip pushmark
	my $obj = $self->deparse($kid, 24);
	$kid = $kid->sibling;
	for (; not null $kid->sibling; $kid = $kid->sibling) {
	    push @@exprs, $self->deparse($kid, 6);
	}
	my $meth = $kid->first;
	if ($meth->ppaddr eq "pp_const") {
	    $meth = $meth->sv->PV; # needs to be bare
	} else {
	    $meth = $self->deparse($meth, 1);
	}
	$args = join(", ", @@exprs);	
	$kid = $obj . "->" . $meth;
	if ($args) {
	    return $kid . "(" . $args . ")"; # parens mandatory
	} else {
	    return $kid; # toke.c fakes parens
	}
    }
    # else, not a method
    if ($op->flags & OPf_SPECIAL) {
	$prefix = "do ";
    } elsif ($op->private & OPpENTERSUB_AMPER) {
	$amper = "&";
    }
    $kid = $op->first;
    $kid = $kid->first->sibling; # skip ex-list, pushmark
    for (; not null $kid->sibling; $kid = $kid->sibling) {
	push @@exprs, $kid;
    }
    if (is_scope($kid)) {
	$amper = "&";
	$kid = "{" . $self->deparse($kid, 0) . "}";
    } elsif ($kid->first->ppaddr eq "pp_gv") {
	my $gv = $kid->first->gv;
	if (class($gv->CV) ne "SPECIAL") {
	    $proto = $gv->CV->PV if $gv->CV->FLAGS & SVf_POK;
	}
	$simple = 1;
	$kid = $self->deparse($kid, 24);
    } elsif (is_scalar $kid->first) {
	$amper = "&";
	$kid = $self->deparse($kid, 24);
    } else {
	$prefix = "";
	$kid = $self->deparse($kid, 24) . "->";
    }
    if (defined $proto and not $amper) {
	my($arg, $real);
	my $doneok = 0;
	my @@args = @@exprs;
	my @@reals;
	my $p = $proto;
	$p =~ s/([^\\]|^)([@@%])(.*)$/$1$2/;
	while ($p) {
	    $p =~ s/^ *([\\]?[\$\@@&%*]|;)//;
	    my $chr = $1;
	    if ($chr eq "") {
		undef $proto if @@args;
	    } elsif ($chr eq ";") {
		$doneok = 1;
	    } elsif ($chr eq "@@" or $chr eq "%") {
		push @@reals, map($self->deparse($_, 6), @@args);
		@@args = ();
	    } else {
		$arg = shift @@args;
		last unless $arg;
		if ($chr eq "\$") {
		    if (want_scalar $arg) {
			push @@reals, $self->deparse($arg, 6);
		    } else {
			undef $proto;
		    }
		} elsif ($chr eq "&") {
		    if ($arg->ppaddr =~ /pp_(s?refgen|undef)/) {
			push @@reals, $self->deparse($arg, 6);
		    } else {
			undef $proto;
		    }
		} elsif ($chr eq "*") {
		    if ($arg->ppaddr =~ /^pp_s?refgen$/
			and $arg->first->first->ppaddr eq "pp_rv2gv")
		    {
			$real = $arg->first->first; # skip refgen, null
			if ($real->first->ppaddr eq "pp_gv") {
			    push @@reals, $self->deparse($real, 6);
			} else {
			    push @@reals, $self->deparse($real->first, 6);
			}
		    } else {
			undef $proto;
		    }
		} elsif (substr($chr, 0, 1) eq "\\") {
		    $chr = substr($chr, 1);
		    if ($arg->ppaddr =~ /^pp_s?refgen$/ and
			!null($real = $arg->first) and
			($chr eq "\$" && is_scalar($real->first)
			 or ($chr eq "\@@"
			     && $real->first->sibling->ppaddr 
			     =~ /^pp_(rv2|pad)av$/)
			 or ($chr eq "%"
			     && $real->first->sibling->ppaddr
			     =~ /^pp_(rv2|pad)hv$/)
			 #or ($chr eq "&" # This doesn't work
			 #   && $real->first->ppaddr eq "pp_rv2cv")
			 or ($chr eq "*"
			     && $real->first->ppaddr eq "pp_rv2gv")))
		    {
			push @@reals, $self->deparse($real, 6);
		    } else {
			undef $proto;
		    }
		}
	    }
	}
	undef $proto if $p and !$doneok;
	undef $proto if @@args;
	$args = join(", ", @@reals);
	$amper = "";
	unless (defined $proto) {
	    $amper = "&";
	    $args = join(", ", map($self->deparse($_, 6), @@exprs));
	}
    } else {
	$args = join(", ", map($self->deparse($_, 6), @@exprs));
    }
    if ($prefix or $amper) {
	if ($op->flags & OPf_STACKED) {
	    return $prefix . $amper . $kid . "(" . $args . ")";
	} else {
	    return $prefix . $amper. $kid;
	}
    } else {
	if (defined $proto and $proto eq "") {
	    return $kid;
	} elsif ($proto eq "\$") {
	    return $self->maybe_parens_func($kid, $args, $cx, 16);
	} elsif ($proto or $simple) {
	    return $self->maybe_parens_func($kid, $args, $cx, 5);
	} else {
	    return "$kid(" . $args . ")";
	}
    }
}

sub pp_enterwrite { unop(@@_, "write") }

# escape things that cause interpolation in double quotes,
# but not character escapes
sub uninterp {
    my($str) = @@_;
    $str =~ s/(^|[^\\])([\$\@@]|\\[uUlLQE])/$1\\$2/g;
    return $str;
}

# the same, but treat $|, $), and $ at the end of the string differently
sub re_uninterp {
    my($str) = @@_;
    $str =~ s/(^|[^\\])(\@@|\\[uUlLQE])/$1\\$2/g;
    $str =~ s/(^|[^\\])(\$[^)|])/$1\\$2/g;
    return $str;
}

# character escapes, but not delimiters that might need to be escaped
sub escape_str { # ASCII
    my($str) = @@_;
    $str =~ s/\a/\\a/g;
#    $str =~ s/\cH/\\b/g; # \b means someting different in a regex 
    $str =~ s/\t/\\t/g;
    $str =~ s/\n/\\n/g;
    $str =~ s/\e/\\e/g;
    $str =~ s/\f/\\f/g;
    $str =~ s/\r/\\r/g;
    $str =~ s/([\cA-\cZ])/'\\c' . chr(ord('@@') + ord($1))/ge;
    $str =~ s/([\0\033-\037\177-\377])/'\\' . sprintf("%03o", ord($1))/ge;
    return $str;
}

# Don't do this for regexen
sub unback {
    my($str) = @@_;
    $str =~ s/\\/\\\\/g;
    return $str;
}

sub balanced_delim {
    my($str) = @@_;
    my @@str = split //, $str;
    my($ar, $open, $close, $fail, $c, $cnt);
    for $ar (['[',']'], ['(',')'], ['<','>'], ['{','}']) {
	($open, $close) = @@$ar;
	$fail = 0; $cnt = 0;
	for $c (@@str) {
	    if ($c eq $open) {
		$cnt++;
	    } elsif ($c eq $close) {
		$cnt--;
		if ($cnt < 0) {
		    $fail = 1;
		    last;
		}
	    }
	}
	$fail = 1 if $cnt != 0;
	return ($open, "$open$str$close") if not $fail;
    }
    return ("", $str);
}

sub single_delim {
    my($q, $default, $str) = @@_;
    return "$default$str$default" if $default and index($str, $default) == -1;
    my($succeed, $delim);
    ($succeed, $str) = balanced_delim($str);
    return "$q$str" if $succeed;
    for $delim ('/', '"', '#') {
	return "$q$delim" . $str . $delim if index($str, $delim) == -1;
    }
    if ($default) {
	$str =~ s/$default/\\$default/g;
	return "$default$str$default";
    } else {
	$str =~ s[/][\\/]g;
	return "$q/$str/";
    }
}

sub SVf_IOK () {0x10000}
sub SVf_NOK () {0x20000}
sub SVf_ROK () {0x80000}

sub const {
    my $sv = shift;
    if (class($sv) eq "SPECIAL") {
	return ('undef', '1', '0')[$$sv-1];
    } elsif ($sv->FLAGS & SVf_IOK) {
	return $sv->IV;
    } elsif ($sv->FLAGS & SVf_NOK) {
	return $sv->NV;
    } elsif ($sv->FLAGS & SVf_ROK) {
	return "\\(" . const($sv->RV) . ")"; # constant folded
    } else {
	my $str = $sv->PV;
	if ($str =~ /[^ -~]/) { # ASCII
	    return single_delim("qq", '"', uninterp escape_str unback $str);
	} else {
	    $str =~ s/\\/\\\\/g;
	    return single_delim("q", "'", $str);
	}
    }
}

sub pp_const {
    my $self = shift;
    my($op, $cx) = @@_;
#    if ($op->private & OPp_CONST_BARE) { # trouble with `=>' autoquoting 
#	return $op->sv->PV;
#    }
    return const($op->sv);
}

sub dq {
    my $self = shift;
    my $op = shift;
    my $type = $op->ppaddr;
    if ($type eq "pp_const") {
	return uninterp(escape_str(unback($op->sv->PV)));
    } elsif ($type eq "pp_concat") {
	return $self->dq($op->first) . $self->dq($op->last);
    } elsif ($type eq "pp_uc") {
	return '\U' . $self->dq($op->first->sibling) . '\E';
    } elsif ($type eq "pp_lc") {
	return '\L' . $self->dq($op->first->sibling) . '\E';
    } elsif ($type eq "pp_ucfirst") {
	return '\u' . $self->dq($op->first->sibling);
    } elsif ($type eq "pp_lcfirst") {
	return '\l' . $self->dq($op->first->sibling);
    } elsif ($type eq "pp_quotemeta") {
	return '\Q' . $self->dq($op->first->sibling) . '\E';
    } elsif ($type eq "pp_join") {
	return $self->deparse($op->last, 26); # was join($", @@ary)
    } else {
	return $self->deparse($op, 26);
    }
}

sub pp_backtick {
    my $self = shift;
    my($op, $cx) = @@_;
    # skip pushmark
    return single_delim("qx", '`', $self->dq($op->first->sibling));
}

sub dquote {
    my $self = shift;
    my $op = shift;
    # skip ex-stringify, pushmark
    return single_delim("qq", '"', $self->dq($op->first->sibling)); 
}

# OP_STRINGIFY is a listop, but it only ever has one arg (?)
sub pp_stringify { dquote(@@_) }

# tr/// and s/// (and tr[][], tr[]//, tr###, etc)
# note that tr(from)/to/ is OK, but not tr/from/(to)
sub double_delim {
    my($from, $to) = @@_;
    my($succeed, $delim);
    if ($from !~ m[/] and $to !~ m[/]) {
	return "/$from/$to/";
    } elsif (($succeed, $from) = balanced_delim($from) and $succeed) {
	if (($succeed, $to) = balanced_delim($to) and $succeed) {
	    return "$from$to";
	} else {
	    for $delim ('/', '"', '#') { # note no `'' -- s''' is special
		return "$from$delim$to$delim" if index($to, $delim) == -1;
	    }
	    $to =~ s[/][\\/]g;
	    return "$from/$to/";
	}
    } else {
	for $delim ('/', '"', '#') { # note no '
	    return "$delim$from$delim$to$delim"
		if index($to . $from, $delim) == -1;
	}
	$from =~ s[/][\\/]g;
	$to =~ s[/][\\/]g;
	return "/$from/$to/";	
    }
}

sub pchr { # ASCII
    my($n) = @@_;
    if ($n == ord '\\') {
	return '\\\\';
    } elsif ($n >= ord(' ') and $n <= ord('~')) {
	return chr($n);
    } elsif ($n == ord "\a") {
	return '\\a';
    } elsif ($n == ord "\b") {
	return '\\b';
    } elsif ($n == ord "\t") {
	return '\\t';
    } elsif ($n == ord "\n") {
	return '\\n';
    } elsif ($n == ord "\e") {
	return '\\e';
    } elsif ($n == ord "\f") {
	return '\\f';
    } elsif ($n == ord "\r") {
	return '\\r';
    } elsif ($n >= ord("\cA") and $n <= ord("\cZ")) {
	return '\\c' . chr(ord("@@") + $n);
    } else {
#	return '\x' . sprintf("%02x", $n);
	return '\\' . sprintf("%03o", $n);
    }
}

sub collapse {
    my(@@chars) = @@_;
    my($c, $str, $tr);
    for ($c = 0; $c < @@chars; $c++) {
	$tr = $chars[$c];
	$str .= pchr($tr);
	if ($c <= $#chars - 2 and $chars[$c + 1] == $tr + 1 and
	    $chars[$c + 2] == $tr + 2)
	{
	    for (; $c <= $#chars and $chars[$c + 1] == $chars[$c] + 1; $c++) {}
	    $str .= "-";
	    $str .= pchr($chars[$c]);
	}
    }
    return $str;
}

sub OPpTRANS_SQUASH () { 16 }
sub OPpTRANS_DELETE () { 32 }
sub OPpTRANS_COMPLEMENT () { 64 }

sub pp_trans {
    my $self = shift;
    my($op, $cx) = @@_;
    my(@@table) = unpack("s256", $op->pv);
    my($c, $tr, @@from, @@to, @@delfrom, $delhyphen);
    if ($table[ord "-"] != -1 and 
	$table[ord("-") - 1] == -1 || $table[ord("-") + 1] == -1)
    {
	$tr = $table[ord "-"];
	$table[ord "-"] = -1;
	if ($tr >= 0) {
	    @@from = ord("-");
	    @@to = $tr;
	} else { # -2 ==> delete
	    $delhyphen = 1;
	}
    }
    for ($c = 0; $c < 256; $c++) {
	$tr = $table[$c];
	if ($tr >= 0) {
	    push @@from, $c; push @@to, $tr;
	} elsif ($tr == -2) {
	    push @@delfrom, $c;
	}
    }
    my $flags;
    @@from = (@@from, @@delfrom);
    if ($op->private & OPpTRANS_COMPLEMENT) {
	$flags .= "c";
	my @@newfrom = ();
	my %from;
	@@from{@@from} = (1) x @@from;
	for ($c = 0; $c < 256; $c++) {
	    push @@newfrom, $c unless $from{$c};
	}
	@@from = @@newfrom;
    }
    if ($op->private & OPpTRANS_DELETE) {
	$flags .= "d";
    } else {
	pop @@to while $#to and $to[$#to] == $to[$#to -1];
    }
    $flags .= "s" if $op->private & OPpTRANS_SQUASH;
    my($from, $to);
    $from = collapse(@@from);
    $to = collapse(@@to);
    $from .= "-" if $delhyphen;
    return "tr" . double_delim($from, $to) . $flags;
}

# Like dq(), but different
sub re_dq {
    my $self = shift;
    my $op = shift;
    my $type = $op->ppaddr;
    if ($type eq "pp_const") {
	return uninterp($op->sv->PV);
    } elsif ($type eq "pp_concat") {
	return $self->re_dq($op->first) . $self->re_dq($op->last);
    } elsif ($type eq "pp_uc") {
	return '\U' . $self->re_dq($op->first->sibling) . '\E';
    } elsif ($type eq "pp_lc") {
	return '\L' . $self->re_dq($op->first->sibling) . '\E';
    } elsif ($type eq "pp_ucfirst") {
	return '\u' . $self->re_dq($op->first->sibling);
    } elsif ($type eq "pp_lcfirst") {
	return '\l' . $self->re_dq($op->first->sibling);
    } elsif ($type eq "pp_quotemeta") {
	return '\Q' . $self->re_dq($op->first->sibling) . '\E';
    } elsif ($type eq "pp_join") {
	return $self->deparse($op->last, 26); # was join($", @@ary)
    } else {
	return $self->deparse($op, 26);
    }
}

sub pp_regcomp {
    my $self = shift;
    my($op, $cx) = @@_;
    my $kid = $op->first;
    $kid = $kid->first if $kid->ppaddr eq "pp_regcmaybe";
    $kid = $kid->first if $kid->ppaddr eq "pp_regcreset";
    return $self->re_dq($kid);
}

sub OPp_RUNTIME () { 64 }

sub PMf_ONCE () { 0x2 }
sub PMf_SKIPWHITE () { 0x10 }
sub PMf_CONST () { 0x40 }
sub PMf_KEEP () { 0x80 }
sub PMf_GLOBAL () { 0x100 }
sub PMf_CONTINUE () { 0x200 }
sub PMf_EVAL () { 0x400 }
sub PMf_LOCALE () { 0x800 }
sub PMf_MULTILINE () { 0x1000 }
sub PMf_SINGLELINE () { 0x2000 }
sub PMf_FOLD () { 0x4000 }
sub PMf_EXTENDED () { 0x8000 }

# osmic acid -- see osmium tetroxide

my %matchwords;
map($matchwords{join "", sort split //, $_} = $_, 'cig', 'cog', 'cos', 'cogs',
    'cox', 'go', 'is', 'ism', 'iso', 'mig', 'mix', 'osmic', 'ox', 'sic', 
    'sig', 'six', 'smog', 'so', 'soc', 'sog', 'xi'); 

sub matchop {
    my $self = shift;
    my($op, $cx, $name, $delim) = @@_;
    my $kid = $op->first;
    my ($binop, $var, $re) = ("", "", "");
    if ($op->flags & OPf_STACKED) {
	$binop = 1;
	$var = $self->deparse($kid, 20);
	$kid = $kid->sibling;
    }
    if (null $kid) {
	$re = re_uninterp(escape_str($op->precomp));
    } else {
	$re = $self->deparse($kid, 1);
    }
    my $flags = "";
    $flags .= "c" if $op->pmflags & PMf_CONTINUE;
    $flags .= "g" if $op->pmflags & PMf_GLOBAL;
    $flags .= "i" if $op->pmflags & PMf_FOLD;
    $flags .= "m" if $op->pmflags & PMf_MULTILINE;
    $flags .= "o" if $op->pmflags & PMf_KEEP;
    $flags .= "s" if $op->pmflags & PMf_SINGLELINE;
    $flags .= "x" if $op->pmflags & PMf_EXTENDED;
    $flags = $matchwords{$flags} if $matchwords{$flags};
    if ($op->pmflags & PMf_ONCE) { # only one kind of delimiter works here
	$re =~ s/\?/\\?/g;
	$re = "?$re?";
    } else {
	$re = single_delim($name, $delim, $re);
    }
    $re = $re . $flags;
    if ($binop) {
	return $self->maybe_parens("$var =~ $re", $cx, 20);
    } else {
	return $re;
    }
}

sub pp_match { matchop(@@_, "m", "/") }
sub pp_pushre { matchop(@@_, "m", "/") }
sub pp_qr { matchop(@@_, "qr", "") }

sub pp_split {
    my $self = shift;
    my($op, $cx) = @@_;
    my($kid, @@exprs, $ary, $expr);
    $kid = $op->first;
    if ($ {$kid->pmreplroot}) {
	$ary = '@@' . $self->gv_name($kid->pmreplroot);
    }
    for (; !null($kid); $kid = $kid->sibling) {
	push @@exprs, $self->deparse($kid, 6);
    }
    $expr = "split(" . join(", ", @@exprs) . ")";
    if ($ary) {
	return $self->maybe_parens("$ary = $expr", $cx, 7);
    } else {
	return $expr;
    }
}

# oxime -- any of various compounds obtained chiefly by the action of
# hydroxylamine on aldehydes and ketones and characterized by the
# bivalent grouping C=NOH [Webster's Tenth]

my %substwords;
map($substwords{join "", sort split //, $_} = $_, 'ego', 'egoism', 'em',
    'es', 'ex', 'exes', 'gee', 'go', 'goes', 'ie', 'ism', 'iso', 'me',
    'meese', 'meso', 'mig', 'mix', 'os', 'ox', 'oxime', 'see', 'seem',
    'seg', 'sex', 'sig', 'six', 'smog', 'sog', 'some', 'xi');

sub pp_subst {
    my $self = shift;
    my($op, $cx) = @@_;
    my $kid = $op->first;
    my($binop, $var, $re, $repl) = ("", "", "", "");
    if ($op->flags & OPf_STACKED) {
	$binop = 1;
	$var = $self->deparse($kid, 20);
	$kid = $kid->sibling;
    }
    my $flags = "";    
    if (null($op->pmreplroot)) {
	$repl = $self->dq($kid);
	$kid = $kid->sibling;
    } else {
	$repl = $op->pmreplroot->first; # skip substcont
	while ($repl->ppaddr eq "pp_entereval") {
	    $repl = $repl->first;
	    $flags .= "e";
	}
	$repl = $self->dq($repl);
    }
    if (null $kid) {
	$re = re_uninterp(escape_str($op->precomp));
    } else {
	$re = $self->deparse($kid, 1);
    }
    $flags .= "e" if $op->pmflags & PMf_EVAL;
    $flags .= "g" if $op->pmflags & PMf_GLOBAL;
    $flags .= "i" if $op->pmflags & PMf_FOLD;
    $flags .= "m" if $op->pmflags & PMf_MULTILINE;
    $flags .= "o" if $op->pmflags & PMf_KEEP;
    $flags .= "s" if $op->pmflags & PMf_SINGLELINE;
    $flags .= "x" if $op->pmflags & PMf_EXTENDED;
    $flags = $substwords{$flags} if $substwords{$flags};
    if ($binop) {
	return $self->maybe_parens("$var =~ s"
				   . double_delim($re, $repl) . $flags,
				   $cx, 20);
    } else {
	return "s". double_delim($re, $repl) . $flags;	
    }
}

1;
__END__

=head1 NAME

B::Deparse - Perl compiler backend to produce perl code

=head1 SYNOPSIS

B<perl> B<-MO=Deparse>[B<,-u>I<PACKAGE>][B<,-p>][B<,-l>][B<,-s>I<LETTERS>] I<prog.pl>

=head1 DESCRIPTION

B::Deparse is a backend module for the Perl compiler that generates
perl source code, based on the internal compiled structure that perl
itself creates after parsing a program. The output of B::Deparse won't
be exactly the same as the original source, since perl doesn't keep
track of comments or whitespace, and there isn't a one-to-one
correspondence between perl's syntactical constructions and their
compiled form, but it will often be close. When you use the B<-p>
option, the output also includes parentheses even when they are not
required by precedence, which can make it easy to see if perl is
parsing your expressions the way you intended.

Please note that this module is mainly new and untested code and is
still under development, so it may change in the future.

=head1 OPTIONS

As with all compiler backend options, these must follow directly after
the '-MO=Deparse', separated by a comma but not any white space.

=over 4

=item B<-p>

Print extra parentheses. Without this option, B::Deparse includes
parentheses in its output only when they are needed, based on the
structure of your program. With B<-p>, it uses parentheses (almost)
whenever they would be legal. This can be useful if you are used to
LISP, or if you want to see how perl parses your input. If you say

    if ($var & 0x7f == 65) {print "Gimme an A!"} 
    print ($which ? $a : $b), "\n";
    $name = $ENV{USER} or "Bob";

C<B::Deparse,-p> will print

    if (($var & 0)) {
        print('Gimme an A!')
    };
    (print(($which ? $a : $b)), '???');
    (($name = $ENV{'USER'}) or '???')

which probably isn't what you intended (the C<'???'> is a sign that
perl optimized away a constant value).

=item B<-u>I<PACKAGE>

Normally, B::Deparse deparses the main code of a program, all the subs
called by the main program (and all the subs called by them,
recursively), and any other subs in the main:: package. To include
subs in other packages that aren't called directly, such as AUTOLOAD,
DESTROY, other subs called automatically by perl, and methods, which
aren't resolved to subs until runtime, use the B<-u> option. The
argument to B<-u> is the name of a package, and should follow directly
after the 'u'. Multiple B<-u> options may be given, separated by
commas.  Note that unlike some other backends, B::Deparse doesn't
(yet) try to guess automatically when B<-u> is needed -- you must
invoke it yourself.

=item B<-l>

Add '#line' declarations to the output based on the line and file
locations of the original code.

=item B<-s>I<LETTERS>

Tweak the style of B::Deparse's output. At the moment, only one style
option is implemented:

=over 4

=item B<C>

Cuddle C<elsif>, C<else>, and C<continue> blocks. For example, print

    if (...) {
         ...
    } else {
         ...
    }

instead of

    if (...) {
         ...
    }
    else {
         ...
    }

The default is not to cuddle.

=back

=back

=head1 BUGS

See the 'to do' list at the beginning of the module file.

=head1 AUTHOR

Stephen McCamant <alias@@mcs.com>, based on an earlier version by
Malcolm Beattie <mbeattie@@sable.ox.ac.uk>.

=cut
@


1.1
log
@Initial revision
@
text
@@


1.1.1.1
log
@perl5.005_03
@
text
@@


1.1.1.2
log
@virgin perl 5.6.0
@
text
@d2 1
a2 1
# Copyright (c) 1998, 1999 Stephen McCamant. All rights reserved.
d10 3
a12 11
use Carp 'cluck', 'croak';
use Config;
use B qw(class main_root main_start main_cv svref_2object opnumber
	 OPf_WANT OPf_WANT_VOID OPf_WANT_SCALAR OPf_WANT_LIST
	 OPf_KIDS OPf_REF OPf_STACKED OPf_SPECIAL
	 OPpLVAL_INTRO OPpENTERSUB_AMPER OPpSLICE OPpCONST_BARE
	 OPpTRANS_SQUASH OPpTRANS_DELETE OPpTRANS_COMPLEMENT OPpTARGET_MY
	 SVf_IOK SVf_NOK SVf_ROK SVf_POK
	 PMf_KEEP PMf_GLOBAL PMf_CONTINUE PMf_EVAL PMf_ONCE
	 PMf_MULTILINE PMf_SINGLELINE PMf_FOLD PMf_EXTENDED);
$VERSION = 0.59;
d29 1
a29 1
# Changes between 0.52 and 0.53:
d33 1
a33 1
# Changes between 0.53 and 0.54:
d36 1
a36 1
# Changes between 0.54 and 0.55:
d39 1
a39 1
# Changes between 0.55 and 0.56:
a52 25
# Changes between 0.56 and 0.561:
# - fixed multiply-declared my var in pp_truncate (thanks to Sarathy)
# - used new B.pm symbolic constants (done by Nick Ing-Simmons)
# Changes between 0.561 and 0.57:
# - stylistic changes to symbolic constant stuff
# - handled scope in s///e replacement code
# - added unquote option for expanding "" into concats, etc.
# - split method and proto parts of pp_entersub into separate functions
# - various minor cleanups
# Changes after 0.57:
# - added parens in \&foo (patch by Albert Dvornik)
# Changes between 0.57 and 0.58:
# - fixed `0' statements that weren't being printed
# - added methods for use from other programs
#   (based on patches from James Duncan and Hugo van der Sanden)
# - added -si and -sT to control indenting (also based on a patch from Hugo)
# - added -sv to print something else instead of '???'
# - preliminary version of utf8 tr/// handling
# Changes after 0.58:
# - uses of $op->ppaddr changed to new $op->name (done by Sarathy)
# - added support for Hugo's new OP_SETSTATE (like nextstate) 
# Changes between 0.58 and 0.59
# - added support for Chip's OP_METHOD_NAMED
# - added support for Ilya's OPpTARGET_MY optimization
# - elided arrows before `()' subscripts when possible
a54 2
# - finish tr/// changes
# - add option for even more parens (generalize \&foo change)
d58 1
a59 4
# - recognize `use utf8', `use integer', etc
# - treat top-level block specially for incremental output
# - interpret in high bit chars in string as utf8 \x{...} (when?)
# - copy comments (look at real text with $^P?) 
a63 4
# - configurable syntax highlighting: ANSI color, HTML, TeX, etc.
# - more style options: brace style, hex vs. octal, quotes, ...
# - print big ints as hex/octal instead of decimal (heuristic?)
# - handle `my $x if 0'?
a105 1
# unquote: -q
a106 3
# indent_size: -si
# use_tabs: -sT
# ex_const: -sv
d185 2
a186 1
	return "sub $name " . $self->deparse_sub($ent->[1]->CV);
d190 2
d211 13
a223 14
	if ($op->name eq "gv") {
	    my $gv = $self->maybe_padgv($op);
	    if ($op->next->name eq "entersub") {
		next if $self->{'subs_done'}{$$gv}++;
		next if class($gv->CV) eq "SPECIAL";
		$self->todo($gv, $gv->CV, 0);
		$self->walk_sub($gv->CV);
	    } elsif ($op->next->name eq "enterwrite"
		     or ($op->next->name eq "rv2gv"
			 and $op->next->next->name eq "enterwrite")) {
		next if $self->{'forms_done'}{$$gv}++;
		next if class($gv->FORM) eq "SPECIAL";
		$self->todo($gv, $gv->FORM, 1);
		$self->walk_sub($gv->FORM);
a281 10
	    $opts = substr($opts, 1);
	} elsif ($opt eq "i") {
	    $opts =~ s/^i(\d+)//;
	    $self->{'indent_size'} = $1;
	} elsif ($opt eq "T") {
	    $self->{'use_tabs'} = 1;
	    $opts = substr($opts, 1);
	} elsif ($opt eq "v") {
	    $opts =~ s/^v([^.]*)(.|$)//;
	    $self->{'ex_const'} = $1;
d283 1
a286 25
sub new {
    my $class = shift;
    my $self = bless {}, $class;
    $self->{'subs_todo'} = [];
    $self->{'curstash'} = "main";
    $self->{'cuddle'} = "\n";
    $self->{'indent_size'} = 4;
    $self->{'use_tabs'} = 0;
    $self->{'ex_const'} = "'???'";
    while (my $arg = shift @@_) {
	if (substr($arg, 0, 2) eq "-u") {
	    $self->stash_subs(substr($arg, 2));
	} elsif ($arg eq "-p") {
	    $self->{'parens'} = 1;
	} elsif ($arg eq "-l") {
	    $self->{'linenums'} = 1;
	} elsif ($arg eq "-q") {
	    $self->{'unquote'} = 1;
	} elsif (substr($arg, 0, 2) eq "-s") {
	    $self->style_opts(substr $arg, 2);
	}
    }
    return $self;
}

d290 3
a292 1
	my $self = B::Deparse->new(@@args);
d295 13
d311 2
a312 3
	  sort {$a->[0] <=> $b->[0]} @@{$self->{'subs_todo'}};
	print $self->indent($self->deparse(main_root, 0)), "\n"
	  unless null main_root;
a320 7
sub coderef2text {
    my $self = shift;
    my $sub = shift;
    croak "Usage: ->coderef2text(CODEREF)" unless ref($sub) eq "CODE";
    return $self->indent($self->deparse_sub(svref_2object($sub)));
}

d325 1
a325 2
#    return $self->$ {\("pp_" . $op->name)}($op, $cx);
    my $meth = "pp_" . $op->name;
a329 1
    my $self = shift;
a332 1
    my $level = 0;
d335 5
a339 8
	my $cmd = substr($line, 0, 1);
	if ($cmd eq "\t" or $cmd eq "\b") {
	    $level += ($cmd eq "\t" ? 1 : -1) * $self->{'indent_size'};
	    if ($self->{'use_tabs'}) {
		$leader = "\t" x ($level / 8) . " " x ($level % 8);
	    } else {
		$leader = " " x $level;
	    }
d352 2
d385 1
a385 1
	push @@text, $self->const_sv($kid)->PV;
d396 10
d408 4
a411 4
    return $op->name eq "leave" || $op->name eq "scope"
      || $op->name eq "lineseq"
	|| ($op->name eq "null" && class($op) eq "UNOP" 
	    && (is_scope($op->first) || $op->first->name eq "enter"));
d415 2
a416 2
    my $name = $_[0]->name;
    return $name eq "nextstate" || $name eq "dbstate" || $name eq "setstate";
d422 4
a425 4
	    and $op->name eq "null" and class($op) eq "UNOP"
	    and (($op->first->name =~ /^(and|or)$/
		  and $op->first->first->sibling->name eq "lineseq")
		 or ($op->first->name eq "lineseq"
d427 1
a427 1
		     and $op->first->first->sibling->name eq "unstack")
d433 4
a436 5
    return ($op->name eq "rv2sv" or
	    $op->name eq "padsv" or
	    $op->name eq "gv" or # only in array/hash constructs
	    $op->flags & OPf_KIDS && !null($op->first)
	      && $op->first->name eq "gvsv");
d486 2
d491 1
a491 1
    if ($op->private & OPpLVAL_INTRO and not $self->{'avoid_local'}{$$op}) {
a497 12
sub maybe_targmy {
    my $self = shift;
    my($op, $cx, $func, @@args) = @@_;
    if ($op->private & OPpTARGET_MY) {
	my $var = $self->padname($op->targ);
	my $val = $func->($self, $op, 7, @@args);
	return $self->maybe_parens("$var = $val", $cx, 7);
    } else {
	return $func->($self, $op, $cx, @@args);
    }
}

d507 1
a507 1
    if ($op->private & OPpLVAL_INTRO and not $self->{'avoid_local'}{$$op}) {
d609 2
a610 2
	my $name = $top->name;
	if ($name eq "and") {
d612 1
a612 1
	} elsif ($name eq "or") {
d631 1
a631 1
	push @@exprs, $expr if length $expr;
d653 1
a653 1
	push @@exprs, $expr if length $expr;
d699 1
a699 1
    my $stash = $op->stashpv;
d706 1
a706 1
	  ' "' . $op->file, qq'"\n';
a711 1
sub pp_setstate { pp_nextstate(@@_) }
d724 3
a726 3
sub pp_wait { maybe_targmy(@@_, \&baseop, "wait") }
sub pp_getppid { maybe_targmy(@@_, \&baseop, "getppid") }
sub pp_time { maybe_targmy(@@_, \&baseop, "time") }
d760 2
a761 2
sub pp_postinc { maybe_targmy(@@_, \&pfixop, "++", 23, POSTFIX) }
sub pp_postdec { maybe_targmy(@@_, \&pfixop, "--", 23, POSTFIX) }
d764 3
a766 3
sub pp_i_postinc { maybe_targmy(@@_, \&pfixop, "++", 23, POSTFIX) }
sub pp_i_postdec { maybe_targmy(@@_, \&pfixop, "--", 23, POSTFIX) }
sub pp_complement { maybe_targmy(@@_. \&pfixop, "~", 21) }
d768 1
a768 2
sub pp_negate { maybe_targmy(@@_, \&real_negate) }
sub real_negate {
d771 1
a771 1
    if ($op->first->name =~ /^(i_)?negate$/) {
d790 2
d794 1
a794 1
    my($op, $cx, $name) = @@_;
d804 4
a807 4
sub pp_chop { maybe_targmy(@@_, \&unop, "chop") }
sub pp_chomp { maybe_targmy(@@_, \&unop, "chomp") }
sub pp_schop { maybe_targmy(@@_, \&unop, "chop") }
sub pp_schomp { maybe_targmy(@@_, \&unop, "chomp") }
d814 3
a816 3
sub pp_sin { maybe_targmy(@@_, \&unop, "sin") }
sub pp_cos { maybe_targmy(@@_, \&unop, "cos") }
sub pp_rand { maybe_targmy(@@_, \&unop, "rand") }
d818 16
a833 11
sub pp_exp { maybe_targmy(@@_, \&unop, "exp") }
sub pp_log { maybe_targmy(@@_, \&unop, "log") }
sub pp_sqrt { maybe_targmy(@@_, \&unop, "sqrt") }
sub pp_int { maybe_targmy(@@_, \&unop, "int") }
sub pp_hex { maybe_targmy(@@_, \&unop, "hex") }
sub pp_oct { maybe_targmy(@@_, \&unop, "oct") }
sub pp_abs { maybe_targmy(@@_, \&unop, "abs") }

sub pp_length { maybe_targmy(@@_, \&unop, "length") }
sub pp_ord { maybe_targmy(@@_, \&unop, "ord") }
sub pp_chr { maybe_targmy(@@_, \&unop, "chr") }
d859 2
a860 2
sub pp_chdir { maybe_targmy(@@_, \&unop, "chdir") }
sub pp_chroot { maybe_targmy(@@_, \&unop, "chroot") }
d862 1
a862 1
sub pp_rmdir { maybe_targmy(@@_, \&unop, "rmdir") }
d867 1
a867 1
sub pp_getpgrp { maybe_targmy(@@_, \&unop, "getpgrp") }
d871 1
a871 1
sub pp_sleep { maybe_targmy(@@_, \&unop, "sleep") }
d897 2
d914 2
d919 2
a920 2
    if (class($op) eq "UNOP" and $op->first->name eq "const"
	and $op->first->private & OPpCONST_BARE)
d922 1
a922 1
	my $name = $self->const_sv($op->first)->PV;
a945 1
    #cluck "curcv was undef" unless $self->{curcv};
d949 2
d955 1
a955 1
    if ($kid->name eq "null") {
d957 3
a959 3
	if ($kid->name eq "anonlist" || $kid->name eq "anonhash") {
	    my($pre, $post) = @@{{"anonlist" => ["[","]"],
				 "anonhash" => ["{","}"]}->{$kid->name}};
d968 1
a968 1
		 $kid->sibling->name eq "anoncode") {
d971 7
a977 16
	} elsif ($kid->name eq "pushmark") {
            my $sib_name = $kid->sibling->name;
            if ($sib_name =~ /^(pad|rv2)[ah]v$/
                and not $kid->sibling->flags & OPf_REF)
            {
                # The @@a in \(@@a) isn't in ref context, but only when the
                # parens are there.
                return "\\(" . $self->deparse($kid->sibling, 1) . ")";
            } elsif ($sib_name eq 'entersub') {
                my $text = $self->deparse($kid->sibling, 1);
                # Always show parens for \(&func()), but only with -p otherwise
                $text = "($text)" if $self->{'parens'}
                                 or $kid->sibling->private & OPpENTERSUB_AMPER;
                return "\\$text";
            }
        }
d988 4
a991 1
    $kid = $kid->first if $kid->name eq "rv2gv"; # <$fh>
a994 21
# Unary operators that can occur as pseudo-listops inside double quotes
sub dq_unop {
    my $self = shift;
    my($op, $cx, $name, $prec, $flags) = (@@_, 0, 0);
    my $kid;
    if ($op->flags & OPf_KIDS) {
       $kid = $op->first;
       # If there's more than one kid, the first is an ex-pushmark.
       $kid = $kid->sibling if not null $kid->sibling;
       return $self->maybe_parens_unop($name, $kid, $cx);
    } else {
       return $name .  ($op->flags & OPf_SPECIAL ? "()" : "");       
    }
}

sub pp_ucfirst { dq_unop(@@_, "ucfirst") }
sub pp_lcfirst { dq_unop(@@_, "lcfirst") }
sub pp_uc { dq_unop(@@_, "uc") }
sub pp_lc { dq_unop(@@_, "lc") }
sub pp_quotemeta { maybe_targmy(@@_, \&dq_unop, "quotemeta") }

d1022 1
a1022 1
    } elsif (class($op) eq "SVOP") {
d1062 2
d1068 2
a1069 2
    my $name = $op->name;
    if ($name eq "concat" and $op->first->name eq "concat") {
d1071 1
a1071 1
	return "concat";
d1073 2
a1074 2
    if ($name eq "null" and class($op) eq "UNOP"
	and $op->first->name =~ /^(and|x?or)$/
d1091 12
a1102 12
    %left = ('multiply' => 19, 'i_multiply' => 19,
	     'divide' => 19, 'i_divide' => 19,
	     'modulo' => 19, 'i_modulo' => 19,
	     'repeat' => 19,
	     'add' => 18, 'i_add' => 18,
	     'subtract' => 18, 'i_subtract' => 18,
	     'concat' => 18,
	     'left_shift' => 17, 'right_shift' => 17,
	     'bit_and' => 13,
	     'bit_or' => 12, 'bit_xor' => 12,
	     'and' => 3,
	     'or' => 2, 'xor' => 2,
d1109 1
a1109 1
    if ($left{assoc_class($op)} && $left{assoc_class($left)}
d1122 14
a1135 14
    %right = ('pow' => 22,
	      'sassign=' => 7, 'aassign=' => 7,
	      'multiply=' => 7, 'i_multiply=' => 7,
	      'divide=' => 7, 'i_divide=' => 7,
	      'modulo=' => 7, 'i_modulo=' => 7,
	      'repeat=' => 7,
	      'add=' => 7, 'i_add=' => 7,
	      'subtract=' => 7, 'i_subtract=' => 7,
	      'concat=' => 7,
	      'left_shift=' => 7, 'right_shift=' => 7,
	      'bit_and=' => 7,
	      'bit_or=' => 7, 'bit_xor=' => 7,
	      'andassign' => 7,
	      'orassign' => 7,
d1142 1
a1142 1
    if ($right{assoc_class($op)} && $right{assoc_class($right)}
d1169 17
a1185 17
sub pp_add { maybe_targmy(@@_, \&binop, "+", 18, ASSIGN) }
sub pp_multiply { maybe_targmy(@@_, \&binop, "*", 19, ASSIGN) }
sub pp_subtract { maybe_targmy(@@_, \&binop, "-",18,  ASSIGN) }
sub pp_divide { maybe_targmy(@@_, \&binop, "/", 19, ASSIGN) }
sub pp_modulo { maybe_targmy(@@_, \&binop, "%", 19, ASSIGN) }
sub pp_i_add { maybe_targmy(@@_, \&binop, "+", 18, ASSIGN) }
sub pp_i_multiply { maybe_targmy(@@_, \&binop, "*", 19, ASSIGN) }
sub pp_i_subtract { maybe_targmy(@@_, \&binop, "-", 18, ASSIGN) }
sub pp_i_divide { maybe_targmy(@@_, \&binop, "/", 19, ASSIGN) }
sub pp_i_modulo { maybe_targmy(@@_, \&binop, "%", 19, ASSIGN) }
sub pp_pow { maybe_targmy(@@_, \&binop, "**", 22, ASSIGN) }

sub pp_left_shift { maybe_targmy(@@_, \&binop, "<<", 17, ASSIGN) }
sub pp_right_shift { maybe_targmy(@@_, \&binop, ">>", 17, ASSIGN) }
sub pp_bit_and { maybe_targmy(@@_, \&binop, "&", 13, ASSIGN) }
sub pp_bit_or { maybe_targmy(@@_, \&binop, "|", 12, ASSIGN) }
sub pp_bit_xor { maybe_targmy(@@_, \&binop, "^", 12, ASSIGN) }
d1216 1
a1216 2
sub pp_concat { maybe_targmy(@@_, \&real_concat) }
sub real_concat {
d1223 1
a1223 1
    if ($op->flags & OPf_STACKED and $op->first->name ne "concat") {
d1304 1
a1304 4
sub pp_or  { logop(@@_, "or",  2, "||", 10, "unless") }

# xor is syntactically a logop, but it's really a binop (contrary to
# old versions of opcode.pl). Syntax is what matters here.
d1342 1
a1342 1
sub pp_atan2 { maybe_targmy(@@_, \&listop, "atan2") }
d1345 3
a1347 3
sub pp_index { maybe_targmy(@@_, \&listop, "index") }
sub pp_rindex { maybe_targmy(@@_, \&listop, "rindex") }
sub pp_sprintf { maybe_targmy(@@_, \&listop, "sprintf") }
d1349 1
a1349 1
sub pp_crypt { maybe_targmy(@@_, \&listop, "crypt") }
d1352 1
a1352 1
sub pp_join { maybe_targmy(@@_, \&listop, "join") }
d1354 2
a1355 2
sub pp_push { maybe_targmy(@@_, \&listop, "push") }
sub pp_unshift { maybe_targmy(@@_, \&listop, "unshift") }
d1378 1
a1378 1
sub pp_flock { maybe_targmy(@@_, \&listop, "flock") }
d1388 8
a1395 8
sub pp_chown { maybe_targmy(@@_, \&listop, "chown") }
sub pp_unlink { maybe_targmy(@@_, \&listop, "unlink") }
sub pp_chmod { maybe_targmy(@@_, \&listop, "chmod") }
sub pp_utime { maybe_targmy(@@_, \&listop, "utime") }
sub pp_rename { maybe_targmy(@@_, \&listop, "rename") }
sub pp_link { maybe_targmy(@@_, \&listop, "link") }
sub pp_symlink { maybe_targmy(@@_, \&listop, "symlink") }
sub pp_mkdir { maybe_targmy(@@_, \&listop, "mkdir") }
d1398 7
a1404 7
sub pp_waitpid { maybe_targmy(@@_, \&listop, "waitpid") }
sub pp_system { maybe_targmy(@@_, \&listop, "system") }
sub pp_exec { maybe_targmy(@@_, \&listop, "exec") }
sub pp_kill { maybe_targmy(@@_, \&listop, "kill") }
sub pp_setpgrp { maybe_targmy(@@_, \&listop, "setpgrp") }
sub pp_getpriority { maybe_targmy(@@_, \&listop, "getpriority") }
sub pp_setpriority { maybe_targmy(@@_, \&listop, "setpriority") }
d1445 1
a1445 1
    my $fh;
d1448 1
a1448 1
	$fh = $self->const_sv($kid)->PV;
d1459 1
d1483 2
a1484 1
    return $self->maybe_parens_func($name, $indir . join(", ", @@exprs),
d1500 1
a1500 1
	$code = "{" . $self->deparse($code, 0) . "} ";
d1526 1
a1526 1
	unless ($lop->private & OPpLVAL_INTRO or $lop->name eq "undef")
d1531 1
a1531 1
	if ($lop->name =~ /^pad[ash]v$/) { # my()
d1534 1
a1534 1
	} elsif ($lop->name ne "undef") { # local()
d1543 1
a1543 1
	    if (class($kid) eq "UNOP" and $kid->first->name eq "gvsv") {
d1578 1
a1578 1
    if ($false->name eq "lineseq") { # braces w/o scope => elsif
d1581 1
a1581 1
	while (!null($false) and $false->name eq "lineseq") {
d1610 1
a1610 1
    if ($kid->name eq "lineseq") { # bare or infinite loop 
d1616 1
a1616 1
    } elsif ($enter->name eq "enteriter") { # foreach
d1641 1
a1641 1
	} elsif ($var->name eq "rv2gv") {
d1643 1
a1643 1
	} elsif ($var->name eq "gv") {
d1648 1
a1648 1
    } elsif ($kid->name eq "null") { # while/until
d1650 2
a1651 2
	my $name = {"and" => "while", "or" => "until"}
	            ->{$kid->name};
d1654 1
a1654 1
    } elsif ($kid->name eq "stub") { # bare and empty
d1666 1
a1666 2
    my $precont;
    my $cont = $kid->first;
d1668 1
d1674 1
d1711 4
a1714 2
BEGIN { eval "sub OP_CONST () {" . opnumber("const") . "}" }
BEGIN { eval "sub OP_STRINGIFY () {" . opnumber("stringify") . "}" }
d1720 2
a1721 3
	# old value is lost
	return $self->{'ex_const'} if $op->targ == OP_CONST;
    } elsif ($op->first->name eq "pushmark") {
d1723 1
a1723 1
    } elsif ($op->first->name eq "enter") {
d1728 1
a1728 1
	     $op->first->sibling->name eq "readline" and
d1734 1
a1734 1
	     $op->first->sibling->name eq "trans" and
a1743 10
# the aassign in-common check messes up SvCUR (always setting it
# to a value >= 100), but it's probably safe to assume there
# won't be any NULs in the names of my() variables. (with
# stash variables, I wouldn't be so sure)
sub padname_fix {
    my $str = shift;
    $str = substr($str, 0, index($str, "\0")) if index($str, "\0") != -1;
    return $str;
}

a1780 13
sub maybe_padgv {
    my $self = shift;
    my $op = shift;
    my $gv;
    if ($Config{useithreads}) {
	$gv = $self->padval($op->padix);
    }
    else {
	$gv = $op->gv;
    }
    return $gv;
}

d1784 1
a1784 2
    my $gv = $self->maybe_padgv($op);
    return $self->maybe_local($op, $cx, "\$" . $self->gv_name($gv));
d1790 1
a1790 2
    my $gv = $self->maybe_padgv($op);
    return $self->gv_name($gv);
d1796 1
a1796 1
    my $gv = $self->maybe_padgv($op);
d1816 1
a1816 1
    if ($op->first->name eq "padav") {
d1831 2
a1832 2
    if ($kid->name eq "const") { # constant list
	my $av = $self->const_sv($kid);
a1838 18
sub is_subscriptable {
    my $op = shift;
    if ($op->name =~ /^[ahg]elem/) {
	return 1;
    } elsif ($op->name eq "entersub") {
	my $kid = $op->first;
	return 0 unless null $kid->sibling;
	$kid = $kid->first;
	$kid = $kid->sibling until null $kid->sibling;
	return 0 if is_scope($kid);
	$kid = $kid->first;
	return 0 if $kid->name eq "gv";
	return 0 if is_scalar($kid);
	return is_subscriptable($kid);	
    } else {
	return 0;
    }
}
d1844 1
a1844 1
    unless ($array->name eq $padname) { # Maybe this has been fixed	
d1847 1
a1847 1
    if ($array->name eq $padname) {
d1855 2
a1856 1
	my $arrow = is_subscriptable($array) ? "" : "->";
d1864 2
a1865 2
sub pp_aelem { maybe_local(@@_, elem(@@_, "[", "]", "padav")) }
sub pp_helem { maybe_local(@@_, elem(@@_, "{", "}", "padhv")) }
d1872 1
a1872 1
    $glob = $glob->first if $glob->name eq "rv2gv"; # this one's a bug
d1892 1
a1892 1
	if $array->name eq $regname or $array->name eq "null";
d1895 1
a1895 1
    } elsif ($array->name eq $padname) {
d1901 1
a1901 1
    if ($kid->name eq "list") {
d1913 4
a1916 2
sub pp_aslice { maybe_local(@@_, slice(@@_, "[", "]", "rv2av", "padav")) }
sub pp_hslice { maybe_local(@@_, slice(@@_, "{", "}", "rv2hv", "padhv")) }
d1929 7
d1941 1
a1941 6
sub want_list {
    my $op = shift;
    return ($op->flags & OPf_WANT) == OPf_WANT_LIST;
}

sub method {
d1944 8
a1951 23
    my $kid = $op->first->sibling; # skip pushmark
    my($meth, $obj, @@exprs);
    if ($kid->name eq "list" and want_list $kid) {
	# When an indirect object isn't a bareword but the args are in
	# parens, the parens aren't part of the method syntax (the LLAFR
	# doesn't apply), but they make a list with OPf_PARENS set that
	# doesn't get flattened by the append_elem that adds the method,
	# making a (object, arg1, arg2, ...) list where the object
	# usually is. This can be distinguished from 
	# `($obj, $arg1, $arg2)->meth()' (which is legal if $arg2 is an
	# object) because in the later the list is in scalar context
	# as the left side of -> always is, while in the former
	# the list is in list context as method arguments always are.
	# (Good thing there aren't method prototypes!)
	$meth = $kid->sibling;
	$kid = $kid->first->sibling; # skip pushmark
	$obj = $kid;
	$kid = $kid->sibling;
	for (; not null $kid; $kid = $kid->sibling) {
	    push @@exprs, $self->deparse($kid, 6);
	}
    } else {
	$obj = $kid;
d1956 3
a1958 11
	$meth = $kid;
    }
    $obj = $self->deparse($obj, 24);
    if ($meth->name eq "method_named") {
	$meth = $self->const_sv($meth)->PV;
    } else {
	$meth = $meth->first;
	if ($meth->name eq "const") {
	    # As of 5.005_58, this case is probably obsoleted by the
	    # method_named case above
	    $meth = $self->const_sv($meth)->PV; # needs to be bare
d1962 4
a1965 30
    }
    my $args = join(", ", @@exprs);	
    $kid = $obj . "->" . $meth;
    if ($args) {
	return $kid . "(" . $args . ")"; # parens mandatory
    } else {
	return $kid;
    }
}

# returns "&" if the prototype doesn't match the args,
# or ("", $args_after_prototype_demunging) if it does.
sub check_proto {
    my $self = shift;
    my($proto, @@args) = @@_;
    my($arg, $real);
    my $doneok = 0;
    my @@reals;
    # An unbackslashed @@ or % gobbles up the rest of the args
    $proto =~ s/([^\\]|^)([@@%])(.*)$/$1$2/;
    while ($proto) {
	$proto =~ s/^ *([\\]?[\$\@@&%*]|;)//;
	my $chr = $1;
	if ($chr eq "") {
	    return "&" if @@args;
	} elsif ($chr eq ";") {
	    $doneok = 1;
	} elsif ($chr eq "@@" or $chr eq "%") {
	    push @@reals, map($self->deparse($_, 6), @@args);
	    @@args = ();
d1967 2
a1968 49
	    $arg = shift @@args;
	    last unless $arg;
	    if ($chr eq "\$") {
		if (want_scalar $arg) {
		    push @@reals, $self->deparse($arg, 6);
		} else {
		    return "&";
		}
	    } elsif ($chr eq "&") {
		if ($arg->name =~ /^(s?refgen|undef)$/) {
		    push @@reals, $self->deparse($arg, 6);
		} else {
		    return "&";
		}
	    } elsif ($chr eq "*") {
		if ($arg->name =~ /^s?refgen$/
		    and $arg->first->first->name eq "rv2gv")
		  {
		      $real = $arg->first->first; # skip refgen, null
		      if ($real->first->name eq "gv") {
			  push @@reals, $self->deparse($real, 6);
		      } else {
			  push @@reals, $self->deparse($real->first, 6);
		      }
		  } else {
		      return "&";
		  }
	    } elsif (substr($chr, 0, 1) eq "\\") {
		$chr = substr($chr, 1);
		if ($arg->name =~ /^s?refgen$/ and
		    !null($real = $arg->first) and
		    ($chr eq "\$" && is_scalar($real->first)
		     or ($chr eq "\@@"
			 && $real->first->sibling->name
			 =~ /^(rv2|pad)av$/)
		     or ($chr eq "%"
			 && $real->first->sibling->name
			 =~ /^(rv2|pad)hv$/)
		     #or ($chr eq "&" # This doesn't work
		     #   && $real->first->name eq "rv2cv")
		     or ($chr eq "*"
			 && $real->first->name eq "rv2gv")))
		  {
		      push @@reals, $self->deparse($real, 6);
		  } else {
		      return "&";
		  }
	    }
       }
d1970 1
a1970 12
    return "&" if $proto and !$doneok; # too few args and no `;'
    return "&" if @@args;               # too many args
    return ("", join ", ", @@reals);
}

sub pp_entersub {
    my $self = shift;
    my($op, $cx) = @@_;
    return $self->method($op, $cx) unless null $op->first->sibling;
    my $prefix = "";
    my $amper = "";
    my($kid, @@exprs);
a1980 2
    my $simple = 0;
    my $proto = undef;
d1984 2
a1985 2
    } elsif ($kid->first->name eq "gv") {
	my $gv = $self->maybe_padgv($kid->first);
d1989 1
a1989 1
	$simple = 1; # only calls of named functions can be prototyped
d1996 1
a1996 2
	my $arrow = is_subscriptable($kid->first) ? "" : "->";
	$kid = $self->deparse($kid, 24) . $arrow;
a1997 1
    my $args;
d1999 73
a2071 2
	($amper, $args) = $self->check_proto($proto, @@exprs);
	if ($amper eq "&") {
a2148 1
		    # qq()() isn't ")("
d2178 4
d2185 1
a2185 1
	return ('undef', '1', '0')[$$sv-1]; # sv_undef, sv_yes, sv_no
d2194 1
a2194 1
	if ($str =~ /[^ -~]/) { # ASCII for non-printing
d2197 2
a2198 1
	    return single_delim("q", "'", unback $str);
a2202 9
sub const_sv {
    my $self = shift;
    my $op = shift;
    my $sv = $op->sv;
    # the constant could be in the pad (under useithreads)
    $sv = $self->padval($op->targ) unless $$sv;
    return $sv;
}

d2206 2
a2207 2
#    if ($op->private & OPpCONST_BARE) { # trouble with `=>' autoquoting 
#	return $self->const_sv($op)->PV;
d2209 1
a2209 2
    my $sv = $self->const_sv($op);
    return const($sv);
d2215 4
a2218 4
    my $type = $op->name;
    if ($type eq "const") {
	return uninterp(escape_str(unback($self->const_sv($op)->PV)));
    } elsif ($type eq "concat") {
d2220 1
a2220 1
    } elsif ($type eq "uc") {
d2222 1
a2222 1
    } elsif ($type eq "lc") {
d2224 1
a2224 1
    } elsif ($type eq "ucfirst") {
d2226 1
a2226 1
    } elsif ($type eq "lcfirst") {
d2228 1
a2228 1
    } elsif ($type eq "quotemeta") {
d2230 1
a2230 1
    } elsif ($type eq "join") {
d2246 3
a2248 5
    my($op, $cx) = shift;
    my $kid = $op->first->sibling; # skip ex-stringify, pushmark
    return $self->deparse($kid, $cx) if $self->{'unquote'};
    $self->maybe_targmy($kid, $cx,
			sub {single_delim("qq", '"', $self->dq($_[1]))});
d2251 2
a2252 2
# OP_STRINGIFY is a listop, but it only ever has one arg
sub pp_stringify { maybe_targmy(@@_, \&dquote) }
d2319 1
a2319 2
	    for (; $c <= $#chars-1 and $chars[$c + 1] == $chars[$c] + 1; $c++)
	      {}
d2327 3
a2329 2
# XXX This has trouble with hyphens in the replacement (tr/bac/-AC/),
# and backslashes.
d2331 4
a2334 3
sub tr_decode_byte {
    my($table, $flags) = @@_;
    my(@@table) = unpack("s256", $table);
d2356 1
d2358 2
a2359 1
    if ($flags & OPpTRANS_COMPLEMENT) {
d2368 3
a2370 1
    unless ($flags & OPpTRANS_DELETE) {
d2373 1
a2377 123
    return ($from, $to);
}

sub tr_chr {
    my $x = shift;
    if ($x == ord "-") {
	return "\\-";
    } else {
	return chr $x;
    }
}

# XXX This doesn't yet handle all cases correctly either

sub tr_decode_utf8 {
    my($swash_hv, $flags) = @@_;
    my %swash = $swash_hv->ARRAY;
    my $final = undef;
    $final = $swash{'FINAL'}->IV if exists $swash{'FINAL'};
    my $none = $swash{"NONE"}->IV;
    my $extra = $none + 1;
    my(@@from, @@delfrom, @@to);
    my $line;
    foreach $line (split /\n/, $swash{'LIST'}->PV) {
	my($min, $max, $result) = split(/\t/, $line);
	$min = hex $min;
	if (length $max) {
	    $max = hex $max;
	} else {
	    $max = $min;
	}
	$result = hex $result;
	if ($result == $extra) {
	    push @@delfrom, [$min, $max];	    
	} else {
	    push @@from, [$min, $max];
	    push @@to, [$result, $result + $max - $min];
	}
    }
    for my $i (0 .. $#from) {
	if ($from[$i][0] == ord '-') {
	    unshift @@from, splice(@@from, $i, 1);
	    unshift @@to, splice(@@to, $i, 1);
	    last;
	} elsif ($from[$i][1] == ord '-') {
	    $from[$i][1]--;
	    $to[$i][1]--;
	    unshift @@from, ord '-';
	    unshift @@to, ord '-';
	    last;
	}
    }
    for my $i (0 .. $#delfrom) {
	if ($delfrom[$i][0] == ord '-') {
	    push @@delfrom, splice(@@delfrom, $i, 1);
	    last;
	} elsif ($delfrom[$i][1] == ord '-') {
	    $delfrom[$i][1]--;
	    push @@delfrom, ord '-';
	    last;
	}
    }
    if (defined $final and $to[$#to][1] != $final) {
	push @@to, [$final, $final];
    }
    push @@from, @@delfrom;
    if ($flags & OPpTRANS_COMPLEMENT) {
	my @@newfrom;
	my $next = 0;
	for my $i (0 .. $#from) {
	    push @@newfrom, [$next, $from[$i][0] - 1];
	    $next = $from[$i][1] + 1;
	}
	@@from = ();
	for my $range (@@newfrom) {
	    if ($range->[0] <= $range->[1]) {
		push @@from, $range;
	    }
	}
    }
    my($from, $to, $diff);
    for my $chunk (@@from) {
	$diff = $chunk->[1] - $chunk->[0];
	if ($diff > 1) {
	    $from .= tr_chr($chunk->[0]) . "-" . tr_chr($chunk->[1]);
	} elsif ($diff == 1) {
	    $from .= tr_chr($chunk->[0]) . tr_chr($chunk->[1]);
	} else {
	    $from .= tr_chr($chunk->[0]);
	}
    }
    for my $chunk (@@to) {
	$diff = $chunk->[1] - $chunk->[0];
	if ($diff > 1) {
	    $to .= tr_chr($chunk->[0]) . "-" . tr_chr($chunk->[1]);
	} elsif ($diff == 1) {
	    $to .= tr_chr($chunk->[0]) . tr_chr($chunk->[1]);
	} else {
	    $to .= tr_chr($chunk->[0]);
	}
    }
    #$final = sprintf("%04x", $final) if defined $final;
    #$none = sprintf("%04x", $none) if defined $none;
    #$extra = sprintf("%04x", $extra) if defined $extra;    
    #print STDERR "final: $final\n none: $none\nextra: $extra\n";
    #print STDERR $swash{'LIST'}->PV;
    return (escape_str($from), escape_str($to));
}

sub pp_trans {
    my $self = shift;
    my($op, $cx) = @@_;
    my($from, $to);
    if (class($op) eq "PVOP") {
	($from, $to) = tr_decode_byte($op->pv, $op->private);
    } else { # class($op) eq "SVOP"
	($from, $to) = tr_decode_utf8($op->sv->RV, $op->private);
    }
    my $flags = "";
    $flags .= "c" if $op->private & OPpTRANS_COMPLEMENT;
    $flags .= "d" if $op->private & OPpTRANS_DELETE;
    $to = "" if $from eq $to and $flags eq "";
    $flags .= "s" if $op->private & OPpTRANS_SQUASH;
d2385 4
a2388 4
    my $type = $op->name;
    if ($type eq "const") {
	return uninterp($self->const_sv($op)->PV);
    } elsif ($type eq "concat") {
d2390 1
a2390 1
    } elsif ($type eq "uc") {
d2392 1
a2392 1
    } elsif ($type eq "lc") {
d2394 1
a2394 1
    } elsif ($type eq "ucfirst") {
d2396 1
a2396 1
    } elsif ($type eq "lcfirst") {
d2398 1
a2398 1
    } elsif ($type eq "quotemeta") {
d2400 1
a2400 1
    } elsif ($type eq "join") {
d2411 2
a2412 2
    $kid = $kid->first if $kid->name eq "regcmaybe";
    $kid = $kid->first if $kid->name eq "regcreset";
d2416 15
d2525 1
a2525 1
	while ($repl->name eq "entereval") {
d2529 1
a2529 5
	if ($op->pmflags & PMf_EVAL) {
	    $repl = $self->deparse($repl, 0);
	} else {
	    $repl = $self->dq($repl);	
	}
d2562 1
a2562 2
B<perl> B<-MO=Deparse>[B<,-u>I<PACKAGE>][B<,-p>][B<,-q>][B<,-l>][B<,-s>I<LETTERS>]
     I<prog.pl>
a2586 5
=item B<-l>

Add '#line' declarations to the output based on the line and file
locations of the original code.

a2609 19
=item B<-q>

Expand double-quoted strings into the corresponding combinations of
concatenation, uc, ucfirst, lc, lcfirst, quotemeta, and join. For
instance, print

    print "Hello, $world, @@ladies, \u$gentlemen\E, \u\L$me!";

as

    print 'Hello, ' . $world . ', ' . join($", @@ladies) . ', '
          . ucfirst($gentlemen) . ', ' . ucfirst(lc $me . '!');

Note that the expanded form represents the way perl handles such
constructions internally -- this option actually turns off the reverse
translation that B::Deparse usually does. On the other hand, note that
C<$x = "$y"> is not the same as C<$x = $y>: the former makes the value
of $y into a string before doing the assignment.

d2616 2
a2617 2
DESTROY, other subs called automatically by perl, and methods (which
aren't resolved to subs until runtime), use the B<-u> option. The
d2624 5
d2631 2
a2632 3
Tweak the style of B::Deparse's output. The letters should follow
directly after the 's', with no space or punctuation. The following
options are available:
a2656 28
=item B<i>I<NUMBER>

Indent lines by multiples of I<NUMBER> columns. The default is 4 columns.

=item B<T>

Use tabs for each 8 columns of indent. The default is to use only spaces.
For instance, if the style options are B<-si4T>, a line that's indented
3 times will be preceded by one tab and four spaces; if the options were
B<-si8T>, the same line would be preceded by three tabs.

=item B<v>I<STRING>B<.>

Print I<STRING> for the value of a constant that can't be determined
because it was optimized away (mnemonic: this happens when a constant
is used in B<v>oid context). The end of the string is marked by a period.
The string should be a valid perl expression, generally a constant.
Note that unless it's a number, it probably needs to be quoted, and on
a command line quotes need to be protected from the shell. Some
conventional values include 0, 1, 42, '', 'foo', and
'Useless use of constant omitted' (which may need to be
B<-sv"'Useless use of constant omitted'.">
or something similar depending on your shell). The default is '???'.
If you're using B::Deparse on a module or other file that's require'd,
you shouldn't use a value that evaluates to false, since the customary
true constant at the end of a module will be in void context when the
file is compiled as a main program.

a2660 38
=head1 USING B::Deparse AS A MODULE

=head2 Synopsis

    use B::Deparse;
    $deparse = B::Deparse->new("-p", "-sC");
    $body = $deparse->coderef2text(\&func);
    eval "sub func $body"; # the inverse operation

=head2 Description

B::Deparse can also be used on a sub-by-sub basis from other perl
programs.

=head2 new

    $deparse = B::Deparse->new(OPTIONS)

Create an object to store the state of a deparsing operation and any
options. The options are the same as those that can be given on the
command line (see L</OPTIONS>); options that are separated by commas
after B<-MO=Deparse> should be given as separate strings. Some
options, like B<-u>, don't make sense for a single subroutine, so
don't pass them.

=head2 coderef2text

    $body = $deparse->coderef2text(\&func)
    $body = $deparse->coderef2text(sub ($$) { ... })

Return source code for the body of a subroutine (a block, optionally
preceded by a prototype in parens), given a reference to the
sub. Because a subroutine can have no names, or more than one name,
this method doesn't return a complete subroutine definition -- if you
want to eval the result, you should prepend "sub subname ", or "sub "
for an anonymous function constructor. Unless the sub was defined in
the main:: package, the code will include a package declaration.

d2667 2
a2668 4
Stephen McCamant <smccam@@uclink4.berkeley.edu>, based on an earlier
version by Malcolm Beattie <mbeattie@@sable.ox.ac.uk>, with
contributions from Gisle Aas, James Duncan, Albert Dvornik, Hugo van
der Sanden, Gurusamy Sarathy, and Nick Ing-Simmons.
@


1.1.1.3
log
@stock perl 5.6.1
@
text
@d2 1
a2 1
# Copyright (c) 1998, 1999, 2000 Stephen McCamant. All rights reserved.
d11 1
a17 1
         CVf_METHOD CVf_LOCKED CVf_LVALUE
d20 1
a20 1
$VERSION = 0.60;
a85 6
# Changes between 0.59 and 0.60
# - support for method attribues was added
# - some warnings fixed
# - separate recognition of constant subs
# - rewrote continue block handling, now recoginizing for loops
# - added more control of expanding control structures
d96 2
a97 2
# - interpret high bit chars in string as utf8 \x{...} (when?)
# - copy comments (look at real text with $^P?)
d111 1
d255 1
a255 1
	    my $gv = $self->gv_or_padgv($op);
d257 2
a258 2
		return if $self->{'subs_done'}{$$gv}++;
		return if class($gv->CV) eq "SPECIAL";
d264 2
a265 2
		return if $self->{'forms_done'}{$$gv}++;
		return if class($gv->FORM) eq "SPECIAL";
a347 4
    $self->{'expand'} = 0;
    $self->{'unquote'} = 0;
    $self->{'linenums'} = 0;
    $self->{'parens'} = 0;
a359 2
	} elsif ($arg =~ /^-x(\d)$/) {
	    $self->{'expand'} = $1;
d381 1
a381 1
	print $self->indent(join("", @@text)), "\n" if @@text;
a395 1
#    cluck unless $op;
a435 7
    if ($cv->CvFLAGS & (CVf_METHOD|CVf_LOCKED|CVf_LVALUE)) {
        $proto .= ": ";
        $proto .= "lvalue " if $cv->CvFLAGS & CVf_LVALUE;
        $proto .= "locked " if $cv->CvFLAGS & CVf_LOCKED;
        $proto .= "method " if $cv->CvFLAGS & CVf_METHOD;
    }

d556 1
a556 5
        if (want_scalar($op)) {
	    return "local $text";
	} else {
	    return $self->maybe_parens_func("local", $text, $cx, 16);
	}
d584 1
a584 5
	if (want_scalar($op)) {
	    return "my $text";
	} else {
	    return $self->maybe_parens_func("my", $text, $cx, 16);
	}
d675 2
a676 1
sub lineseq {
d678 22
a699 3
    my(@@ops) = @@_;
    my($expr, @@exprs);
    for (my $i = 0; $i < @@ops; $i++) {
d701 4
a704 11
	if (is_state $ops[$i]) {
	    $expr = $self->deparse($ops[$i], 0);
	    $i++;
	    last if $i > $#ops;
	}
	if (!is_state $ops[$i] and $ops[$i+1] and !null($ops[$i+1]) and
	    $ops[$i+1]->name eq "leaveloop" and $self->{'expand'} < 3)
	{
	    push @@exprs, $expr . $self->for_loop($ops[$i], 0);
	    $i++;
	    next;
d706 1
a706 1
	$expr .= $self->deparse($ops[$i], 0);
d709 5
a713 1
    return join(";\n", @@exprs);
d716 11
a726 22
sub scopeop {
    my($real_block, $self, $op, $cx) = @@_;
    my $kid;
    my @@kids;
    local($self->{'curstash'}) = $self->{'curstash'} if $real_block;
    if ($real_block) {
	$kid = $op->first->sibling; # skip enter
	if (is_miniwhile($kid)) {
	    my $top = $kid->first;
	    my $name = $top->name;
	    if ($name eq "and") {
		$name = "while";
	    } elsif ($name eq "or") {
		$name = "until";
	    } else { # no conditional -> while 1 or until 0
		return $self->deparse($top->first, 1) . " while 1";
	    }
	    my $cond = $top->first;
	    my $body = $cond->sibling->first; # skip lineseq
	    $cond = $self->deparse($cond, 1);
	    $body = $self->deparse($body, 1);
	    return "$body $name $cond";
d728 2
a729 5
    } else {
	$kid = $op->first;
    }
    for (; !null($kid); $kid = $kid->sibling) {
	push @@kids, $kid;
d732 1
a732 1
	return "do { " . $self->lineseq(@@kids) . " }";
d734 1
a734 1
	return $self->lineseq(@@kids) . ";";
d738 1
a738 3
sub pp_scope { scopeop(0, @@_); }
sub pp_lineseq { scopeop(0, @@_); }
sub pp_leave { scopeop(1, @@_); }
d750 1
a750 1
    my $name = $gv->SAFENAME;
d758 2
a759 2
    if ($name =~ /^\^../) {
        $name = "{$name}";       # ${^WARNING_BITS} etc
d843 1
a843 1
sub pp_complement { maybe_targmy(@@_, \&pfixop, "~", 21) }
d920 1
d1376 1
a1376 3
    if ($cx == 0 and is_scope($right) and $blockname
	and $self->{'expand'} < 7)
    { # if ($a) {$b}
d1380 1
a1380 2
    } elsif ($cx == 0 and $blockname and not $self->{'parens'}
	     and $self->{'expand'} < 7) { # $b if $a
a1459 1
sub pp_binmode { listop(@@_, "binmode") }
a1655 7
sub is_ifelse_cont {
    my $op = shift;
    return ($op->name eq "null" and class($op) eq "UNOP"
	    and $op->first->name =~ /^(and|cond_expr)$/
	    and is_scope($op->first->first->sibling));
}

d1663 1
a1663 3
    unless ($cx == 0 and (is_scope($true) and $true->name ne "null") and
	    (is_scope($false) || is_ifelse_cont($false))
	    and $self->{'expand'} < 7) {
d1668 1
a1668 2
    }

d1671 19
a1689 16
    my $head = "if ($cond) {\n\t$true\n\b}";
    my @@elsifs;
    while (!null($false) and is_ifelse_cont($false)) {
	my $newop = $false->first;
	my $newcond = $newop->first;
	my $newtrue = $newcond->sibling;
	$false = $newtrue->sibling; # last in chain is OP_AND => no else
	$newcond = $self->deparse($newcond, 1);
	$newtrue = $self->deparse($newtrue, 0);
	push @@elsifs, "elsif ($newcond) {\n\t$newtrue\n\b}";
    }
    if (!null($false)) {	    
	$false = $cuddle . "else {\n\t" .
	  $self->deparse($false, 0) . "\n\b}\cK";
    } else {
	$false = "\cK";
d1691 2
a1692 1
    return $head . join($cuddle, "", @@elsifs) . $false; 
d1695 1
a1695 1
sub loop_common {
d1697 1
a1697 1
    my($op, $cx, $init) = @@_;
a1702 2
    my $body;
    my $cond = undef;
a1705 1
	    $cond = "";
a1708 1
	$body = $kid;
d1740 1
a1740 1
	$body = $kid->first->first->sibling; # skip OP_AND and OP_ITER
d1743 4
a1746 4
	my $name = {"and" => "while", "or" => "until"}->{$kid->name};
	$cond = $self->deparse($kid->first, 1);
	$head = "$name ($cond) ";
	$body = $kid->first->sibling;
d1750 20
a1769 29
    # If there isn't a continue block, then the next pointer for the loop
    # will point to the unstack, which is kid's penultimate child, except
    # in a bare loop, when it will point to the leaveloop. When neither of
    # these conditions hold, then the third-to-last child in the continue
    # block (or the last in a bare loop).
    my $cont_start = $enter->nextop;
    my $cont;
    if ($$cont_start != $$op and $ {$cont_start->sibling} != $ {$body->last}) {
	if ($bare) {
	    $cont = $body->last;
	} else {
	    $cont = $body->first;
	    while (!null($cont->sibling->sibling->sibling)) {
		$cont = $cont->sibling;
	    }
	}
	my $state = $body->first;
	my $cuddle = $self->{'cuddle'};
	my @@states;
	for (; $$state != $$cont; $state = $state->sibling) {
	    push @@states, $state;
	}
	$body = $self->lineseq(@@states);
	if (defined $cond and not is_scope $cont and $self->{'expand'} < 3) {
	    $head = "for ($init; $cond; " . $self->deparse($cont, 1) .") ";
	    $cont = "\cK";
	} else {
	    $cont = $cuddle . "continue {\n\t" .
	      $self->deparse($cont, 0) . "\n\b}\cK";
d1771 20
d1793 1
a1793 1
	$body = $self->deparse($body, 0);
d1795 1
a1795 10
    return $head . "{\n\t" . $body . "\n\b}" . $cont;
}

sub pp_leaveloop { loop_common(@@_, "") }

sub for_loop {
    my $self = shift;
    my($op, $cx) = @@_;
    my $init = $self->deparse($op, 1);
    return $self->loop_common($op->sibling, $cx, $init);
d1817 1
a1817 1
	return $self->dquote($op, $cx);
d1835 10
d1848 2
a1849 1
    return $self->padname_sv($targ)->PVX;
d1882 1
a1882 1
sub gv_or_padgv {
d1885 6
a1890 4
    if (class($op) eq "PADOP") {
	return $self->padval($op->padix);
    } else { # class($op) eq "SVOP"
	return $op->gv;
d1892 1
d1898 1
a1898 1
    my $gv = $self->gv_or_padgv($op);
d1905 1
a1905 1
    my $gv = $self->gv_or_padgv($op);
d1912 1
a1912 1
    my $gv = $self->gv_or_padgv($op);
d2223 1
a2223 1
	my $gv = $self->gv_or_padgv($kid->first);
d2255 1
a2255 1
	} elsif (defined $proto and $proto eq "\$") {
d2257 1
a2257 1
	} elsif (defined($proto) && $proto or $simple) {
d2353 1
a2353 1
	return $sv->int_value;
d2384 1
a2384 3
#    return const($sv);
    my $c = const $sv; 
    return $c =~ /^-\d/ ? $self->maybe_parens($c, $cx, 21) : $c;
d2394 1
a2394 7
	my $first = $self->dq($op->first);
	my $last  = $self->dq($op->last);
	# Disambiguate "${foo}bar", "${foo}{bar}", "${foo}[1]"
        if ($last =~ /^[{\[\w]/) {
	    $first =~ s/([%\$@@])([A-Za-z_]\w*)$/${1}{$2}/;
	}
	return $first . $last;
d2421 1
a2421 1
    my($op, $cx) = @@_;
d2489 1
a2489 1
    my($str, $c, $tr) = ("");
d2542 1
a2542 1
    unless ($flags & OPpTRANS_DELETE || !@@to) {
d2681 1
a2681 1
	return re_uninterp($self->const_sv($op)->PV);
d2683 1
a2683 7
	my $first = $self->re_dq($op->first);
	my $last  = $self->re_dq($op->last);
	# Disambiguate "${foo}bar", "${foo}{bar}", "${foo}[1]"
	if ($last =~ /^[{\[\w]/) {
	    $first =~ s/([%\$@@])([A-Za-z_]\w*)$/${1}{$2}/;
	}
	return $first . $last;
d2845 2
a2846 2
B<perl> B<-MO=Deparse>[B<,-u>I<PACKAGE>][B<,-p>][B<,-q>][B<,-l>]
        [B<,-s>I<LETTERS>][B<,-x>I<LEVEL>] I<prog.pl>
a2990 49
=item B<-x>I<LEVEL>

Expand conventional syntax constructions into equivalent ones that expose
their internal operation. I<LEVEL> should be a digit, with higher values
meaning more expansion. As with B<-q>, this actually involves turning off
special cases in B::Deparse's normal operations.

If I<LEVEL> is at least 3, for loops will be translated into equivalent
while loops with continue blocks; for instance

    for ($i = 0; $i < 10; ++$i) {
        print $i;
    }

turns into

    $i = 0;
    while ($i < 10) {
        print $i;
    } continue {
        ++$i
    }

Note that in a few cases this translation can't be perfectly carried back
into the source code -- if the loop's initializer declares a my variable,
for instance, it won't have the correct scope outside of the loop.

If I<LEVEL> is at least 7, if statements will be translated into equivalent
expressions using C<&&>, C<?:> and C<do {}>; for instance

    print 'hi' if $nice;
    if ($nice) {
        print 'hi';
    }
    if ($nice) {
        print 'hi';
    } else {
        print 'bye';
    }

turns into

    $nice and print 'hi';
    $nice and do { print 'hi' };
    $nice ? do { print 'hi' } : do { print 'bye' };

Long sequences of elsifs will turn into nested ternary operators, which
B::Deparse doesn't know how to indent nicely.

d3037 1
a3037 1
Stephen McCamant <smcc@@CSUA.Berkeley.EDU>, based on an earlier
@


1.1.1.4
log
@stock perl 5.8.0 from CPAN
@
text
@d10 2
a11 2
use Carp;
use B qw(class main_root main_start main_cv svref_2object opnumber perlstring
d13 2
a14 2
	 OPf_KIDS OPf_REF OPf_STACKED OPf_SPECIAL OPf_MOD
	 OPpLVAL_INTRO OPpOUR_INTRO OPpENTERSUB_AMPER OPpSLICE OPpCONST_BARE
d16 1
a16 3
	 OPpCONST_ARYBASE OPpEXISTS_SUB OPpSORT_NUMERIC OPpSORT_INTEGER
	 OPpSORT_REVERSE
	 SVf_IOK SVf_NOK SVf_ROK SVf_POK SVpad_OUR
d18 1
a18 1
	 PMf_KEEP PMf_GLOBAL PMf_CONTINUE PMf_EVAL PMf_ONCE PMf_SKIPWHITE
d20 1
a20 1
$VERSION = 0.63;
a21 2
use vars qw/$AUTOLOAD/;
use warnings ();
d35 1
a35 1
# - added pp_threadsv (special variables under USE_5005THREADS)
a91 17
# Changes between 0.60 and 0.61 (mostly by Robin Houston)
# - many bug-fixes
# - support for pragmas and 'use'
# - support for the little-used $[ variable
# - support for __DATA__ sections
# - UTF8 support
# - BEGIN, CHECK, INIT and END blocks
# - scoping of subroutine declarations fixed
# - compile-time output from the input program can be suppressed, so that the
#   output is just the deparsed code. (a change to O.pm in fact)
# - our() declarations
# - *all* the known bugs are now listed in the BUGS section
# - comprehensive test mechanism (TEST -deparse)
# Changes between 0.62 and 0.63 (mostly by Rafael Garcia-Suarez)
# - bug-fixes
# - new switch -P
# - support for command-line switches (-l, -0, etc.)
a93 2
#  (See also BUGS section at the end of this file)
#
d96 3
d100 1
d102 1
d112 1
d116 2
d119 1
d122 1
a122 1
# (see t/TEST for the short list)
a136 8
# curcvlex:
# Cached hash of lexical variables for curcv: keys are names,
# each value is an array of pairs, indicating the cop_seq of scopes
# in which a var of that name is valid.
#
# curcop:
# COP for statement being deparsed
#
d141 1
a141 1
# array of [cop_seq, CV, is_format?] for subs and formats we still
a150 7
# subs_declared
# keys are names of subs for which we've printed declarations.
# That means we can omit parentheses from the arguments.
#
# subs_deparsed
# Keeps track of fully qualified names of all deparsed subs.
#
a202 7
# Also, lineseq may pass a fourth parameter to the pp_ routines:
# if present, the fourth parameter is passed on by deparse.
#
# If present and true, it means that the op exists directly as
# part of a lineseq. Currently it's only used by scopeop to
# decide whether its results need to be enclosed in a do {} block.

d218 1
a218 2
    my($cv, $is_form) = @@_;
    return unless ($cv->FILE eq $0 || exists $self->{files}{$cv->FILE});
d225 1
a225 4
    push @@{$self->{'subs_todo'}}, [$seq, $cv, $is_form];
    unless ($is_form || class($cv->STASH) eq 'SPECIAL') {
	$self->{'subs_deparsed'}{$cv->STASH->NAME."::".$cv->GV->NAME} = 1;
    }
d231 1
a231 3
    my $cv = $ent->[1];
    my $gv = $cv->GV;
    my $name = $self->gv_name($gv);
d234 1
a234 1
	    . $self->deparse_format($ent->[1]). "\n";
d236 1
a236 15
	$self->{'subs_declared'}{$name} = 1;
	if ($name eq "BEGIN") {
	    my $use_dec = $self->begin_is_use($cv);
	    if (defined ($use_dec)) {
		return () if 0 == length($use_dec);
		return $use_dec;
	    }
	}
	my $l = '';
	if ($self->{'linenums'}) {
	    my $line = $gv->LINE;
	    my $file = $gv->FILE;
	    $l = "\n\f#line $line \"$file\"\n";
	}
        return "${l}sub $name " . $self->deparse_sub($cv);
d240 8
a247 22
# Return a "use" declaration for this BEGIN block, if appropriate
sub begin_is_use {
    my ($self, $cv) = @@_;
    my $root = $cv->ROOT;
    local @@$self{qw'curcv curcvlex'} = ($cv);
#require B::Debug;
#B::walkoptree($cv->ROOT, "debug");
    my $lineseq = $root->first;
    return if $lineseq->name ne "lineseq";

    my $req_op = $lineseq->first->sibling;
    return if $req_op->name ne "require";

    my $module;
    if ($req_op->first->private & OPpCONST_BARE) {
	# Actually it should always be a bareword
	$module = $self->const_sv($req_op->first)->PV;
	$module =~ s[/][::]g;
	$module =~ s/.pm$//;
    }
    else {
	$module = const($self->const_sv($req_op->first));
d249 1
d251 25
a275 62
    my $version;
    my $version_op = $req_op->sibling;
    return if class($version_op) eq "NULL";
    if ($version_op->name eq "lineseq") {
	# We have a version parameter; skip nextstate & pushmark
	my $constop = $version_op->first->next->next;

	return unless $self->const_sv($constop)->PV eq $module;
	$constop = $constop->sibling;
	$version = $self->const_sv($constop)->int_value;
	$constop = $constop->sibling;
	return if $constop->name ne "method_named";
	return if $self->const_sv($constop)->PV ne "VERSION";
    }

    $lineseq = $version_op->sibling;
    return if $lineseq->name ne "lineseq";
    my $entersub = $lineseq->first->sibling;
    if ($entersub->name eq "stub") {
	return "use $module $version ();\n" if defined $version;
	return "use $module ();\n";
    }
    return if $entersub->name ne "entersub";

    # See if there are import arguments
    my $args = '';

    my $svop = $entersub->first->sibling; # Skip over pushmark
    return unless $self->const_sv($svop)->PV eq $module;

    # Pull out the arguments
    for ($svop=$svop->sibling; $svop->name ne "method_named";
		$svop = $svop->sibling) {
	$args .= ", " if length($args);
	$args .= $self->deparse($svop, 6);
    }

    my $use = 'use';
    my $method_named = $svop;
    return if $method_named->name ne "method_named";
    my $method_name = $self->const_sv($method_named)->PV;

    if ($method_name eq "unimport") {
	$use = 'no';
    }

    # Certain pragmas are dealt with using hint bits,
    # so we ignore them here
    if ($module eq 'strict' || $module eq 'integer'
	|| $module eq 'bytes' || $module eq 'warnings') {
	return "";
    }

    if (defined $version && length $args) {
	return "$use $module $version ($args);\n";
    } elsif (defined $version) {
	return "$use $module $version;\n";
    } elsif (length $args) {
	return "$use $module ($args);\n";
    } else {
	return "$use $module;\n";
    }
d279 8
a286 5
    my ($self, $pack) = @@_;
    my (@@ret, $stash);
    if (!defined $pack) {
	$pack = '';
	$stash = \%::;
d288 2
a289 8
    else {
	$pack =~ s/(::)?$/::/;
	no strict 'refs';
	$stash = \%$pack;
    }
    my %stash = svref_2object($stash)->ARRAY;
    while (my ($key, $val) = each %stash) {
	next if $key eq 'main::';	# avoid infinite recursion
d292 1
a292 9
	    # Just a prototype. As an ugly but fairly effective way
	    # to find out if it belongs here is to see if the AUTOLOAD
	    # (if any) for the stash was defined in one of our files.
	    my $A = $stash{"AUTOLOAD"};
	    if (defined ($A) && class($A) eq "GV" && defined($A->CV)
		&& class($A->CV) eq "CV") {
		my $AF = $A->FILE;
		next unless $AF eq $0 || exists $self->{'files'}{$AF};
	    }
d295 1
a295 7
	    # Just a name. As above.
	    my $A = $stash{"AUTOLOAD"};
	    if (defined ($A) && class($A) eq "GV" && defined($A->CV)
		&& class($A->CV) eq "CV") {
		my $AF = $A->FILE;
		next unless $AF eq $0 || exists $self->{'files'}{$AF};
	    }
d298 1
a298 1
	    if (class(my $cv = $val->CV) ne "SPECIAL") {
d300 2
a301 2
		next if $$val != ${$cv->GV};   # Ignore imposters
		$self->todo($cv, 0);
d303 1
a303 1
	    if (class(my $cv = $val->FORM) ne "SPECIAL") {
d305 2
a306 5
		next if $$val != ${$cv->GV};   # Ignore imposters
		$self->todo($cv, 1);
	    }
	    if (class($val->HV) ne "SPECIAL" && $key =~ /::$/) {
		$self->stash_subs($pack . $key);
a348 1
    $self->{'files'} = {};
a349 1
    $self->{'curcop'} = undef;
a357 6

    $self->{'ambient_arybase'} = 0;
    $self->{'ambient_warnings'} = undef; # Assume no lexical warnings
    $self->{'ambient_hints'} = 0;
    $self->init();

d359 2
a360 2
	if ($arg =~ /^-f(.*)/) {
	    $self->{'files'}{$1} = 1;
a362 2
	} elsif ($arg eq "-P") {
	    $self->{'noproto'} = 1;
a375 27
{
    # Mask out the bits that L<warnings::register> uses
    my $WARN_MASK;
    BEGIN {
	$WARN_MASK = $warnings::Bits{all} | $warnings::DeadBits{all};
    }
    sub WARN_MASK () {
	return $WARN_MASK;
    }
}

# Initialise the contextual information, either from
# defaults provided with the ambient_pragmas method,
# or from perl's own defaults otherwise.
sub init {
    my $self = shift;

    $self->{'arybase'}  = $self->{'ambient_arybase'};
    $self->{'warnings'} = defined ($self->{'ambient_warnings'})
				? $self->{'ambient_warnings'} & WARN_MASK
				: undef;
    $self->{'hints'}    = $self->{'ambient_hints'} & 0xFF;

    # also a convenient place to clear out subs_declared
    delete $self->{'subs_declared'};
}

d380 1
a380 19
	# First deparse command-line args
	if (defined $^I) { # deparse -i
	    print q(BEGIN { $^I = ).perlstring($^I).qq(; }\n);
	}
	if ($^W) { # deparse -w
	    print qq(BEGIN { \$^W = $^W; }\n);
	}
	if ($/ ne "\n" or defined $O::savebackslash) { # deparse -l and -0
	    my $fs = perlstring($/) || 'undef';
	    my $bs = perlstring($O::savebackslash) || 'undef';
	    print qq(BEGIN { \$/ = $fs; \$\\ = $bs; }\n);
	}
	my @@BEGINs  = B::begin_av->isa("B::AV") ? B::begin_av->ARRAY : ();
	my @@INITs   = B::init_av->isa("B::AV") ? B::init_av->ARRAY : ();
	my @@ENDs    = B::end_av->isa("B::AV") ? B::end_av->ARRAY : ();
	for my $block (@@BEGINs, @@INITs, @@ENDs) {
	    $self->todo($block, 0);
	}
	$self->stash_subs();
d382 1
a382 1
	$self->{'curcvlex'} = undef;
a392 9

	# Print __DATA__ section, if necessary
	no strict 'refs';
	my $laststash = defined $self->{'curcop'}
	    ? $self->{'curcop'}->stash->NAME : $self->{'curstash'};
	if (defined *{$laststash."::DATA"}{IO}) {
	    print "__DATA__\n";
	    print readline(*{$laststash."::DATA"});
	}
d399 1
a399 3
    croak "Usage: ->coderef2text(CODEREF)" unless UNIVERSAL::isa($sub, "CODE");

    $self->init();
a402 104
sub ambient_pragmas {
    my $self = shift;
    my ($arybase, $hint_bits, $warning_bits) = (0, 0);

    while (@@_ > 1) {
	my $name = shift();
	my $val  = shift();

	if ($name eq 'strict') {
	    require strict;

	    if ($val eq 'none') {
		$hint_bits &= ~strict::bits(qw/refs subs vars/);
		next();
	    }

	    my @@names;
	    if ($val eq "all") {
		@@names = qw/refs subs vars/;
	    }
	    elsif (ref $val) {
		@@names = @@$val;
	    }
	    else {
		@@names = split' ', $val;
	    }
	    $hint_bits |= strict::bits(@@names);
	}

	elsif ($name eq '$[') {
	    $arybase = $val;
	}

	elsif ($name eq 'integer'
	    || $name eq 'bytes'
	    || $name eq 'utf8') {
	    require "$name.pm";
	    if ($val) {
		$hint_bits |= ${$::{"${name}::"}{"hint_bits"}};
	    }
	    else {
		$hint_bits &= ~${$::{"${name}::"}{"hint_bits"}};
	    }
	}

	elsif ($name eq 're') {
	    require re;
	    if ($val eq 'none') {
		$hint_bits &= ~re::bits(qw/taint eval/);
		next();
	    }

	    my @@names;
	    if ($val eq 'all') {
		@@names = qw/taint eval/;
	    }
	    elsif (ref $val) {
		@@names = @@$val;
	    }
	    else {
		@@names = split' ',$val;
	    }
	    $hint_bits |= re::bits(@@names);
	}

	elsif ($name eq 'warnings') {
	    if ($val eq 'none') {
		$warning_bits = $warnings::NONE;
		next();
	    }

	    my @@names;
	    if (ref $val) {
		@@names = @@$val;
	    }
	    else {
		@@names = split/\s+/, $val;
	    }

	    $warning_bits = $warnings::NONE if !defined ($warning_bits);
	    $warning_bits |= warnings::bits(@@names);
	}

	elsif ($name eq 'warning_bits') {
	    $warning_bits = $val;
	}

	elsif ($name eq 'hint_bits') {
	    $hint_bits = $val;
	}

	else {
	    croak "Unknown pragma type: $name";
	}
    }
    if (@@_) {
	croak "The ambient_pragmas method expects an even number of args";
    }

    $self->{'ambient_arybase'} = $arybase;
    $self->{'ambient_warnings'} = $warning_bits;
    $self->{'ambient_hints'} = $hint_bits;
}

d405 4
a408 4
    my($op, $cx, $flags) = @@_;

    Carp::confess("Null op in deparse") if !defined($op)
					|| class($op) eq "NULL";
a409 3
    if (is_scope($op)) {
	return $self->$meth($op, $cx, $flags);
    }
a444 3
Carp::confess("NULL in deparse_sub") if !defined($cv) || $cv->isa("B::NULL");
Carp::confess("SPECIAL in deparse_sub") if $cv->isa("B::SPECIAL");
    local $self->{'curcop'} = $self->{'curcop'};
d456 1
a456 4
    local($self->{'curcvlex'});
    local(@@$self{qw'curstash warnings hints'})
		= @@$self{qw'curstash warnings hints'};
    my $body;
d458 5
a462 25
	my $lineseq = $cv->ROOT->first;
	if ($lineseq->name eq "lineseq") {
	    my @@ops;
	    for(my$o=$lineseq->first; $$o; $o=$o->sibling) {
		push @@ops, $o;
	    }
	    $body = $self->lineseq(undef, @@ops).";";
	    my $scope_en = $self->find_scope_en($lineseq);
	    if (defined $scope_en) {
		my $subs = join"", $self->seq_subs($scope_en);
		$body .= ";\n$subs" if length($subs);
	    }
	}
	else {
	    $body = $self->deparse($cv->ROOT->first, 0);
	}
    }
    else {
	my $sv = $cv->const_sv;
	if ($$sv) {
	    # uh-oh. inlinable sub... format it differently
	    return $proto . "{ " . const($sv) . " }\n";
	} else { # XSUB? (or just a declaration)
	    return "$proto;\n";
	}
a463 1
    return $proto ."{\n\t$body\n\b}" ."\n";
d471 1
a471 4
    local($self->{'curcvlex'});
    local($self->{'in_format'}) = 1;
    local(@@$self{qw'curstash warnings hints'})
		= @@$self{qw'curstash warnings hints'};
a473 2
    return "\f." if $op->first->name eq 'stub'
                || $op->first->name eq 'nextstate';
d479 1
a479 1
	push @@text, "\f".$self->const_sv($kid)->PV;
d484 1
a484 1
	push @@text, "\f".join(", ", @@exprs)."\n" if @@exprs;
d487 1
a487 1
    return join("", @@text) . "\f.";
d545 1
a545 5
	$kid =  $self->deparse($kid, 1);
 	if ($name eq "umask" && $kid =~ /^\d+$/) {
	    $kid = sprintf("%#o", $kid);
	}
	return "$name($kid)";
a547 3
 	if ($name eq "umask" && $kid =~ /^\d+$/) {
	    $kid = sprintf("%#o", $kid);
	}
d574 1
a574 4
    my $our_intro = ($op->name =~ /^(gv|rv2)[ash]v$/) ? OPpOUR_INTRO : 0;
    if ($op->private & (OPpLVAL_INTRO|$our_intro)
	and not $self->{'avoid_local'}{$$op}) {
	my $our_local = ($op->private & OPpLVAL_INTRO) ? "local" : "our";
d576 1
a576 1
	    return "$our_local $text";
d578 1
a578 1
	    return $self->maybe_parens_func("$our_local", $text, $cx, 16);
d620 66
d687 8
a694 7
sub AUTOLOAD {
    if ($AUTOLOAD =~ s/^.*::pp_//) {
	warn "unexpected OP_".uc $AUTOLOAD;
	return "XXX";
    } else {
	die "Undefined subroutine $AUTOLOAD called";
    }
d697 4
a700 1
sub DESTROY {}	#	Do not AUTOLOAD
a701 4
# $root should be the op which represents the root of whatever
# we're sequencing here. If it's undefined, then we don't append
# any subroutine declarations to the deparsed ops, otherwise we
# append appropriate declarations.
d703 2
a704 1
    my($self, $root, @@ops) = @@_;
a705 14

    my $out_cop = $self->{'curcop'};
    my $out_seq = defined($out_cop) ? $out_cop->cop_seq : undef;
    my $limit_seq;
    if (defined $root) {
	$limit_seq = $out_seq;
	my $nseq = $self->find_scope_st($root->sibling) if ${$root->sibling};
	$limit_seq = $nseq if !defined($limit_seq)
			   or defined($nseq) && $nseq < $limit_seq;
    }
    $limit_seq = $self->{'limit_seq'}
	if defined($self->{'limit_seq'})
	&& (!defined($limit_seq) || $self->{'limit_seq'} < $limit_seq);
    local $self->{'limit_seq'} = $limit_seq;
d711 1
a711 4
	    if ($i > $#ops) {
		push @@exprs, $expr;
		last;
	    }
d713 2
a714 2
	if (!is_state $ops[$i] and (my $ls = $ops[$i+1]) and
	    !null($ops[$i+1]) and $ops[$i+1]->name eq "lineseq")
d716 3
a718 8
	    if ($ls->first && !null($ls->first) && is_state($ls->first)
		&& (my $sib = $ls->first->sibling)) {
		if (!null($sib) && $sib->name eq "leaveloop") {
		    push @@exprs, $expr . $self->for_loop($ops[$i], 0);
		    $i++;
		    next;
		}
	    }
d720 2
a721 3
	$expr .= $self->deparse($ops[$i], 0, (@@ops != 1));
	$expr =~ s/;\n?\z//;
	push @@exprs, $expr;
d723 1
a723 6
    my $body = join(";\n", grep {length} @@exprs);
    my $subs = "";
    if (defined $root && defined $limit_seq && !$self->{'in_format'}) {
	$subs = join "\n", $self->seq_subs($limit_seq);
    }
    return join(";\n", grep {length} $body, $subs);
d727 1
a727 1
    my($real_block, $self, $op, $cx, $flags) = @@_;
d730 1
a730 3

    local(@@$self{qw'curstash warnings hints'})
		= @@$self{qw'curstash warnings hints'} if $real_block;
d755 2
a756 2
    if ($flags || $cx > 0) { # inside an expression, (a do {} while for lineseq)
	return "do {\n\t" . $self->lineseq($op, @@kids) . "\n\b}";
d758 1
a758 2
	my $lineseq = $self->lineseq($op, @@kids);
	return (length ($lineseq) ? "$lineseq;" : "");
a774 1
Carp::confess() if $gv->isa("B::CV");
d777 1
a777 2
    if (($stash eq 'main' && $globalnames{$name})
	or ($stash eq $self->{'curstash'} && !$globalnames{$name})
d784 2
a785 2
    if ($name =~ /^(\^..|{)/) {
        $name = "{$name}";       # ${^WARNING_BITS}, etc and ${
d790 2
a791 33
# Return the name to use for a stash variable.
# If a lexical with the same name is in scope, it may need to be
# fully-qualified.
sub stash_variable {
    my ($self, $prefix, $name) = @@_;

    return "$prefix$name" if $name =~ /::/;

    unless ($prefix eq '$' || $prefix eq '@@' ||
	    $prefix eq '%' || $prefix eq '$#') {
	return "$prefix$name";
    }

    my $v = ($prefix eq '$#' ? '@@' : $prefix) . $name;
    return $prefix .$self->{'curstash'}.'::'. $name if $self->lex_in_scope($v);
    return "$prefix$name";
}

sub lex_in_scope {
    my ($self, $name) = @@_;
    $self->populate_curcvlex() if !defined $self->{'curcvlex'};

    return 0 if !defined($self->{'curcop'});
    my $seq = $self->{'curcop'}->cop_seq;
    return 0 if !exists $self->{'curcvlex'}{$name};
    for my $a (@@{$self->{'curcvlex'}{$name}}) {
	my ($st, $en) = @@$a;
	return 1 if $seq > $st && $seq <= $en;
    }
    return 0;
}

sub populate_curcvlex {
d793 3
a795 53
    for (my $cv = $self->{'curcv'}; class($cv) eq "CV"; $cv = $cv->OUTSIDE) {
	my @@padlist = $cv->PADLIST->ARRAY;
	my @@ns = $padlist[0]->ARRAY;

	for (my $i=0; $i<@@ns; ++$i) {
	    next if class($ns[$i]) eq "SPECIAL";
	    next if $ns[$i]->FLAGS & SVpad_OUR;  # Skip "our" vars
	    if (class($ns[$i]) eq "PV") {
		# Probably that pesky lexical @@_
		next;
	    }
            my $name = $ns[$i]->PVX;
	    my $seq_st = $ns[$i]->NVX;
	    my $seq_en = int($ns[$i]->IVX);

	    push @@{$self->{'curcvlex'}{$name}}, [$seq_st, $seq_en];
	}
    }
}

sub find_scope_st { ((find_scope(@@_))[0]); }
sub find_scope_en { ((find_scope(@@_))[1]); }

# Recurses down the tree, looking for pad variable introductions and COPs
sub find_scope {
    my ($self, $op, $scope_st, $scope_en) = @@_;
    carp("Undefined op in find_scope") if !defined $op;
    return ($scope_st, $scope_en) unless $op->flags & OPf_KIDS;

    for (my $o=$op->first; $$o; $o=$o->sibling) {
	if ($o->name =~ /^pad.v$/ && $o->private & OPpLVAL_INTRO) {
	    my $s = int($self->padname_sv($o->targ)->NVX);
	    my $e = $self->padname_sv($o->targ)->IVX;
	    $scope_st = $s if !defined($scope_st) || $s < $scope_st;
	    $scope_en = $e if !defined($scope_en) || $e > $scope_en;
	}
	elsif (is_state($o)) {
	    my $c = $o->cop_seq;
	    $scope_st = $c if !defined($scope_st) || $c < $scope_st;
	    $scope_en = $c if !defined($scope_en) || $c > $scope_en;
	}
	elsif ($o->flags & OPf_KIDS) {
	    ($scope_st, $scope_en) =
		$self->find_scope($o, $scope_st, $scope_en)
	}
    }

    return ($scope_st, $scope_en);
}

# Returns a list of subs which should be inserted before the COP
sub cop_subs {
    my ($self, $op, $out_seq) = @@_;
a796 16
    # If we have nephews, then our sequence number indicates
    # the cop_seq of the end of some sort of scope.
    if (class($op->sibling) ne "NULL" && $op->sibling->flags & OPf_KIDS
	and my $nseq = $self->find_scope_st($op->sibling) ) {
	$seq = $nseq;
    }
    $seq = $out_seq if defined($out_seq) && $out_seq < $seq;
    return $self->seq_subs($seq);
}

sub seq_subs {
    my ($self, $seq) = @@_;
    my @@text;
#push @@text, "# ($seq)\n";

    return "" if !defined $seq;
a800 12
    return @@text;
}

# Notice how subs and formats are inserted between statements here;
# also $[ assignments and pragmas.
sub pp_nextstate {
    my $self = shift;
    my($op, $cx) = @@_;
    $self->{'curcop'} = $op;
    my @@text;
    push @@text, $self->cop_subs($op);
    push @@text, $op->label . ": " if $op->label;
a809 32

    if ($self->{'arybase'} != $op->arybase) {
	push @@text, '$[ = '. $op->arybase .";\n";
	$self->{'arybase'} = $op->arybase;
    }

    my $warnings = $op->warnings;
    my $warning_bits;
    if ($warnings->isa("B::SPECIAL") && $$warnings == 4) {
	$warning_bits = $warnings::Bits{"all"} & WARN_MASK;
    }
    elsif ($warnings->isa("B::SPECIAL") && $$warnings == 5) {
        $warning_bits = $warnings::NONE;
    }
    elsif ($warnings->isa("B::SPECIAL")) {
	$warning_bits = undef;
    }
    else {
	$warning_bits = $warnings->PV & WARN_MASK;
    }

    if (defined ($warning_bits) and
       !defined($self->{warnings}) || $self->{'warnings'} ne $warning_bits) {
	push @@text, declare_warnings($self->{'warnings'}, $warning_bits);
	$self->{'warnings'} = $warning_bits;
    }

    if ($self->{'hints'} != $op->private) {
	push @@text, declare_hints($self->{'hints'}, $op->private);
	$self->{'hints'} = $op->private;
    }

a812 34
sub declare_warnings {
    my ($from, $to) = @@_;
    if (($to & WARN_MASK) eq warnings::bits("all")) {
	return "use warnings;\n";
    }
    elsif (($to & WARN_MASK) eq "\0"x length($to)) {
	return "no warnings;\n";
    }
    return "BEGIN {\${^WARNING_BITS} = ".perlstring($to)."}\n";
}

sub declare_hints {
    my ($from, $to) = @@_;
    my $use = $to   & ~$from;
    my $no  = $from & ~$to;
    my $decls = "";
    for my $pragma (hint_pragmas($use)) {
	$decls .= "use $pragma;\n";
    }
    for my $pragma (hint_pragmas($no)) {
        $decls .= "no $pragma;\n";
    }
    return $decls;
}

sub hint_pragmas {
    my ($bits) = @@_;
    my @@pragmas;
    push @@pragmas, "integer" if $bits & 0x1;
    push @@pragmas, "strict 'refs'" if $bits & 0x2;
    push @@pragmas, "bytes" if $bits & 0x8;
    return @@pragmas;
}

d824 1
a824 10
sub pp_stub {
    my $self = shift;
    my($op, $cx, $name) = @@_;
    if ($cx) {
	return "()";
    }
    else {
	return "();";
    }
}
a899 6
	if (defined prototype("CORE::$name") 
	   && prototype("CORE::$name") =~ /^;?\*/
	   && $kid->name eq "rv2gv") {
	    $kid = $kid->first;
	}

a988 11
    my $arg;
    if ($op->private & OPpEXISTS_SUB) {
	# Checking for the existence of a subroutine
	return $self->maybe_parens_func("exists",
				$self->pp_rv2cv($op->first, 16), $cx, 16);
    }
    if ($op->flags & OPf_SPECIAL) {
	# Array element, not hash element
	return $self->maybe_parens_func("exists",
				$self->pp_aelem($op->first, 16), $cx, 16);
    }
a997 6
	if ($op->flags & OPf_SPECIAL) {
	    # Deleting from an array, not a hash
	    return $self->maybe_parens_func("delete",
					$self->pp_aslice($op->first, 16),
					$cx, 16);
	}
a1001 6
	if ($op->flags & OPf_SPECIAL) {
	    # Deleting from an array, not a hash
	    return $self->maybe_parens_func("delete",
					$self->pp_aelem($op->first, 16),
					$cx, 16);
	}
d1017 1
a1017 1
	return "require $name";
d1038 1
d1089 1
a1089 8
    return "<" . $self->deparse($kid, 1) . ">" if is_scalar($kid);
    return $self->unop($op, $cx, "readline");
}

sub pp_rcatline {
    my $self = shift;
    my($op) = @@_;
    return "<" . $self->gv_name($op->gv) . ">";
d1153 2
a1154 2
sub pp_ftewrite { ftst(@@_, "-w") }
sub pp_fteexec { ftst(@@_, "-x") }
a1178 1
sub LIST_CONTEXT () { 4 } # Assignment is in list context
a1280 2
    $left = "($left)" if $flags & LIST_CONTEXT
		&& $left !~ /^(my|our|local|)[\@@\(]/;
d1327 1
a1327 1
sub pp_aassign { binop(@@_, "=", 7, SWAP_CHILDREN | LIST_CONTEXT) }
d1450 1
a1450 13
    my $first;
    $name = "socketpair" if $name eq "sockpair";
    if (defined prototype("CORE::$name")
	&& prototype("CORE::$name") =~ /^;?\*/
	&& $kid->name eq "rv2gv") {
	$first = $self->deparse($kid->first, 6);
    }
    else {
	$first = $self->deparse($kid, 6);
    }
    if ($name eq "chmod" && $first =~ /^\d+$/) {
	$first = sprintf("%#o", $first);
    }
a1595 2
	} elsif ($indir->name eq "const" && $indir->private & OPpCONST_BARE) {
	    $indir = $self->const_sv($indir)->PV;
a1601 7
    if ($name eq "sort" && $op->private & (OPpSORT_NUMERIC | OPpSORT_INTEGER)) {
	$indir = ($op->private & OPpSORT_REVERSE) ? '{$b <=> $a} '
						  : '{$a <=> $b} ';
    }
    elsif ($name eq "sort" && $op->private & OPpSORT_REVERSE) {
	$indir = '{$b cmp $a} ';
    }
d1629 1
a1629 1
	push @@exprs, $expr if defined $expr;
d1643 1
a1643 1
    my $local = "either"; # could be local(...), my(...) or our(...)
d1648 1
a1648 9
	#
	# OP_ENTERSUB can break this logic, so check for it.
	# I suspect that open and exit can too.

	if (!($lop->private & (OPpLVAL_INTRO|OPpOUR_INTRO)
		or $lop->name eq "undef")
	    or $lop->name eq "entersub"
	    or $lop->name eq "exit"
	    or $lop->name eq "open")
d1654 1
a1654 1
	    ($local = "", last) if $local eq "local" || $local eq "our";
a1655 6
	} elsif ($lop->name =~ /^(gv|rv2)[ash]v$/
			&& $lop->private & OPpOUR_INTRO
		or $lop->name eq "null" && $lop->first->name eq "gvsv"
			&& $lop->first->private & OPpOUR_INTRO) { # our()
	    ($local = "", last) if $local eq "my" || $local eq "local";
	    $local = "our";
d1657 1
a1657 1
	    ($local = "", last) if $local eq "my" || $local eq "our";
d1735 1
a1735 2
    local(@@$self{qw'curstash warnings hints'})
		= @@$self{qw'curstash warnings hints'};
d1742 1
a1742 1
	    $head = "while (1) "; # Can't use for(;;) if there's a continue
d1796 1
a1796 1
    if ($$cont_start != $$op && ${$cont_start->sibling} != ${$body->last}) {
d1811 1
a1811 1
	$body = $self->lineseq(undef, @@states);
a1819 4
	return "" if !defined $body;
	if (length $init) {
	    $head = "for ($init; $cond;) ";
	}
d1823 1
a1823 3
    $body =~ s/;?$/;\n/;

    return $head . "{\n\t" . $body . "\b}" . $cont;
d1832 1
a1832 1
    return $self->loop_common($op->sibling->first->sibling, $cx, $init);
a1841 2
BEGIN { eval "sub OP_RV2SV () {" . opnumber("rv2sv") . "}" }
BEGIN { eval "sub OP_LIST () {" . opnumber("list") . "}" }
a1866 10
    } elsif ($op->flags & OPf_SPECIAL && $cx == 0 && !$op->targ) {
	return "do {\n\t". $self->deparse($op->first, $cx) ."\n\b};";
    } elsif (!null($op->first->sibling) and
	     $op->first->sibling->name eq "null" and
	     class($op->first->sibling) eq "UNOP" and
	     $op->first->sibling->first->flags & OPf_STACKED and
	     $op->first->sibling->first->name eq "rcatline") {
	return $self->maybe_parens($self->deparse($op->first, 18) . " .= "
				   . $self->deparse($op->first->sibling, 18),
				   $cx, 18);
d1922 1
a1922 2
    return $self->maybe_local($op, $cx, $self->stash_variable("\$",
				 $self->gv_name($gv)));
d1936 1
a1936 6
    my $name = $self->gv_name($gv);
    $name = $self->{'curstash'}."::$name"
	if $name !~ /::/ && $self->lex_in_scope('@@'.$name);

    return "\$" . $name . "[" .
		  ($op->private + $self->{'arybase'}) . "]";
a1941 5

    if (class($op) eq 'NULL' || !$op->can("first")) {
	carp("Unexpected op in pp_rv2x");
	return 'XXX';
    }
d1944 1
a1944 2
    return $self->stash_variable($type, $str) if is_scalar($kid);
    return $type ."{$str}";
d1964 1
a1964 11
sub pp_rv2cv {
    my ($self, $op, $cx) = @@_;
    if (!null($op->first) && $op->first->name eq 'null' &&
	$op->first->targ eq OP_LIST)
    {
	return $self->rv2x($op->first->first->sibling, $cx, "&")
    }
    else {
	return $self->rv2x($op, $cx, "")
    }
}
a2007 7
    } elsif ($array->name eq "gv") {
	$array = $self->gv_name($self->gv_or_padgv($array));
	if ($array !~ /::/) {
	    my $prefix = ($left eq '[' ? '@@' : '%');
	    $array = $self->{curstash}.'::'.$array
		if $self->lex_in_scope($prefix . $array);
	}
a2016 29

    # Outer parens in an array index will confuse perl
    # if we're interpolating in a regular expression, i.e.
    # /$x$foo[(-1)]/ is *not* the same as /$x$foo[-1]/
    #
    # If $self->{parens}, then an initial '(' will
    # definitely be paired with a final ')'. If
    # !$self->{parens}, the misleading parens won't
    # have been added in the first place.
    #
    # [You might think that we could get "(...)...(...)"
    # where the initial and final parens do not match
    # each other. But we can't, because the above would
    # only happen if there's an infix binop between the
    # two pairs of parens, and *that* means that the whole
    # expression would be parenthesized as well.]
    #
    $idx =~ s/^\((.*)\)$/$1/ if $self->{'parens'};

    # Hash-element braces will autoquote a bareword inside themselves.
    # We need to make sure that C<$hash{warn()}> doesn't come out as
    # C<$hash{warn}>, which has a quite different meaning. Currently
    # B::Deparse will always quote strings, even if the string was a
    # bareword in the original (i.e. the OPpCONST_BARE flag is ignored
    # for constant strings.) So we can cheat slightly here - if we see
    # a bareword, we know that it is supposed to be a function call.
    #
    $idx =~ s/^([A-Za-z_]\w*)$/$1()/;

d2120 1
a2120 2
	for (; !null ($kid->sibling) && $kid->name ne "method_named";
	      $kid = $kid->sibling) {
d2140 1
a2140 1
    if (length $args) {
a2150 1
    return "&" if $self->{'noproto'};
d2156 1
a2156 1
    1 while $proto =~ s/(?<!\\)([@@%])[^\]]+$/$1/;
d2158 1
a2158 1
	$proto =~ s/^(\\?[\$\@@&%*]|\\\[[\$\@@&%*]+\]|;)//;
d2196 1
a2196 1
		$chr =~ tr/\\[]//d;
d2199 2
a2200 3
		    ($chr =~ /\$/ && is_scalar($real->first)
		     or ($chr =~ /@@/
			 && class($real->first->sibling) ne 'NULL'
d2203 1
a2203 2
		     or ($chr =~ /%/
			 && class($real->first->sibling) ne 'NULL'
d2206 1
a2206 1
		     #or ($chr =~ /&/ # This doesn't work
d2208 1
a2208 1
		     or ($chr =~ /\*/
d2230 1
a2230 1
    if ($op->flags & OPf_SPECIAL && !($op->flags & OPf_MOD)) {
d2252 1
a2252 1
    } elsif (is_scalar ($kid->first) && $kid->first->name ne 'rv2cv') {
a2259 20

    # Doesn't matter how many prototypes there are, if
    # they haven't happened yet!
    my $declared;
    {
	no strict 'refs';
	no warnings 'uninitialized';
	$declared = exists $self->{'subs_declared'}{$kid}
	    || ( 
		 defined &{ %{$self->{'curstash'}."::"}->{$kid} }
		 && !exists
		     $self->{'subs_deparsed'}{$self->{'curstash'}."::".$kid}
		 && defined prototype $self->{'curstash'}."::".$kid
	       );
	if (!$declared && defined($proto)) {
	    # Avoid "too early to check prototype" warning
	    ($amper, $proto) = ('&');
	}
    }

d2261 1
a2261 1
    if ($declared and defined $proto and not $amper) {
d2276 1
a2276 16
	# glob() invocations can be translated into calls of
	# CORE::GLOBAL::glob with a second parameter, a number.
	# Reverse this.
	if ($kid eq "CORE::GLOBAL::glob") {
	    $kid = "glob";
	    $args =~ s/\s*,[^,]+$//;
	}

	# It's a syntax error to call CORE::GLOBAL::foo without a prefix,
	# so it must have been translated from a keyword call. Translate
	# it back.
	$kid =~ s/^CORE::GLOBAL:://;

        if (!$declared) {
	    return "$kid(" . $args . ")";
	} elsif (defined $proto and $proto eq "") {
d2278 1
a2278 1
	} elsif (defined $proto and $proto eq "\$" and is_scalar($exprs[0])) {
d2294 1
a2294 1
    $str =~ s/(^|\G|[^\\])((?:\\\\)*)([\$\@@]|\\[uUlLQE])/$1$2\\$3/g;
d2298 1
a2298 16
{
my $bal;
BEGIN {
    use re "eval";
    # Matches any string which is balanced with respect to {braces}
    $bal = qr(
      (?:
	[^\\{}]
      | \\\\
      | \\[{}]
      | \{(??{$bal})\}
      )*
    )x;
}

# the same, but treat $|, $), $( and $ at the end of the string differently
d2301 2
a2302 19

    $str =~ s/
	  ( ^|\G                  # $1
          | [^\\]
          )

          (                       # $2
            (?:\\\\)*
          )

          (                       # $3
            (\(\?\??\{$bal\}\))   # $4
          | [\$\@@]
            (?!\||\)|\(|$)
          | \\[uUlLQE]
          )

	/length($4) ? "$1$2$4" : "$1$2\\$3"/xeg;

a2305 64
# This is for regular expressions with the /x modifier
# We have to leave comments unmangled.
sub re_uninterp_extended {
    my($str) = @@_;

    $str =~ s/
	  ( ^|\G                  # $1
          | [^\\]
          )

          (                       # $2
            (?:\\\\)*
          )

          (                       # $3
            ( \(\?\??\{$bal\}\)   # $4  (skip over (?{}) and (??{}) blocks)
            | \#[^\n]*            #     (skip over comments)
            )
          | [\$\@@]
            (?!\||\)|\(|$|\s)
          | \\[uUlLQE]
          )

	/length($4) ? "$1$2$4" : "$1$2\\$3"/xeg;

    return $str;
}
}

my %unctrl = # portable to to EBCDIC
    (
     "\c@@" => '\c@@',	# unused
     "\cA" => '\cA',
     "\cB" => '\cB',
     "\cC" => '\cC',
     "\cD" => '\cD',
     "\cE" => '\cE',
     "\cF" => '\cF',
     "\cG" => '\cG',
     "\cH" => '\cH',
     "\cI" => '\cI',
     "\cJ" => '\cJ',
     "\cK" => '\cK',
     "\cL" => '\cL',
     "\cM" => '\cM',
     "\cN" => '\cN',
     "\cO" => '\cO',
     "\cP" => '\cP',
     "\cQ" => '\cQ',
     "\cR" => '\cR',
     "\cS" => '\cS',
     "\cT" => '\cT',
     "\cU" => '\cU',
     "\cV" => '\cV',
     "\cW" => '\cW',
     "\cX" => '\cX',
     "\cY" => '\cY',
     "\cZ" => '\cZ',
     "\c[" => '\c[',	# unused
     "\c\\" => '\c\\',	# unused
     "\c]" => '\c]',	# unused
     "\c_" => '\c_',	# unused
    );

d2307 1
a2307 1
sub escape_str { # ASCII, UTF8
a2308 1
    $str =~ s/(.)/ord($1) > 255 ? sprintf("\\x{%x}", ord($1)) : $1/eg;
d2310 1
a2310 1
#    $str =~ s/\cH/\\b/g; # \b means something different in a regex 
d2316 2
a2317 13
    $str =~ s/([\cA-\cZ])/$unctrl{$1}/ge;
    $str =~ s/([[:^print:]])/sprintf("\\%03o", ord($1))/ge;
    return $str;
}

# For regexes with the /x modifier.
# Leave whitespace unmangled.
sub escape_extended_re {
    my($str) = @@_;
    $str =~ s/(.)/ord($1) > 255 ? sprintf("\\x{%x}", ord($1)) : $1/eg;
    $str =~ s/([[:^print:]])/
	($1 =~ y! \t\n!!) ? $1 : sprintf("\\%03o", ord($1))/ge;
    $str =~ s/\n/\n\f/g;
a2327 10
# Remove backslashes which precede literal control characters,
# to avoid creating ambiguity when we escape the latter.
sub re_unback {
    my($str) = @@_;

    # the insane complexity here is due to the behaviour of "\c\"
    $str =~ s/(^|[^\\]|\\c\\)(?<!\\c)\\(\\\\)*(?=[[:^print:]])/$1$2/g;
    return $str;
}

d2356 4
a2359 5
    if ($q ne 'qr') {
	(my $succeed, $str) = balanced_delim($str);
	return "$q$str" if $succeed;
    }
    for my $delim ('/', '"', '#') {
a2374 2
    } elsif (class($sv) eq "NULL") {
       return 'undef';
d2378 2
a2379 8
	# try the default stringification
	my $r = "".$sv->NV;
	if ($r =~ /e/) {
	    # If it's in scientific notation, we might have lost information
	    return sprintf("%.20e", $sv->NV);
	}
	return $r;
    } elsif ($sv->FLAGS & SVf_ROK && $sv->can("RV")) {
d2381 1
a2381 1
    } elsif ($sv->FLAGS & SVf_POK) {
a2387 2
    } else {
	return "undef";
a2402 3
    if ($op->private & OPpCONST_ARYBASE) {
        return '$[';
    }
d2417 1
a2417 2
	return '$[' if $op->private & OPpCONST_ARYBASE;
	return uninterp(escape_str(unback($self->const_sv($op)->as_string)));
a2420 1

d2422 3
a2424 5
	($last =~ /^[A-Z\\\^\[\]_?]/ &&
	    $first =~ s/([\$@@])\^$/${1}{^}/)  # "${^}W" etc
	    || ($last =~ /^[{\[\w_]/ &&
		$first =~ s/([\$@@])([A-Za-z_]\w*)$/${1}{$2}/);

a2489 1
# Only used by tr///, so backslashes hyphens
a2493 2
    } elsif ($n == ord "-") {
	return "\\-";
d2536 3
d2541 1
a2541 2
    my(@@table) = unpack("s*", $table);
    splice @@table, 0x100, 1;   # Number of subsequent elements
d2555 1
a2555 1
    for ($c = 0; $c < @@table; $c++) {
a2586 2
    } elsif ($x == ord "\\") {
	return "\\\\";
d2709 1
a2709 2
    my ($op, $extended) = @@_;

d2712 1
a2712 5
	return '$[' if $op->private & OPpCONST_ARYBASE;
	my $unbacked = re_unback($self->const_sv($op)->as_string);
	return re_uninterp_extended(escape_extended_re($unbacked))
	    if $extended;
	return re_uninterp(escape_str($unbacked));
d2714 2
a2715 3
	my $first = $self->re_dq($op->first, $extended);
	my $last  = $self->re_dq($op->last,  $extended);

d2717 3
a2719 5
	($last =~ /^[A-Z\\\^\[\]_?]/ &&
	    $first =~ s/([\$@@])\^$/${1}{^}/)  # "${^}W" etc
	    || ($last =~ /^[{\[\w_]/ &&
		$first =~ s/([\$@@])([A-Za-z_]\w*)$/${1}{$2}/);

d2722 1
a2722 1
	return '\U' . $self->re_dq($op->first->sibling, $extended) . '\E';
d2724 1
a2724 1
	return '\L' . $self->re_dq($op->first->sibling, $extended) . '\E';
d2726 1
a2726 1
	return '\u' . $self->re_dq($op->first->sibling, $extended);
d2728 1
a2728 1
	return '\l' . $self->re_dq($op->first->sibling, $extended);
d2730 1
a2730 1
	return '\Q' . $self->re_dq($op->first->sibling, $extended) . '\E';
d2738 1
a2738 36
sub pure_string {
    my ($self, $op) = @@_;
    my $type = $op->name;

    if ($type eq 'const') {
	return 1;
    }
    elsif ($type =~ /^[ul]c(first)?$/ || $type eq 'quotemeta') {
	return $self->pure_string($op->first->sibling);
    }
    elsif ($type eq 'join') {
	my $join_op = $op->first->sibling;  # Skip pushmark
	return 0 unless $join_op->name eq 'null' && $join_op->targ eq OP_RV2SV;

	my $gvop = $join_op->first;
	return 0 unless $gvop->name eq 'gvsv';
        return 0 unless '"' eq $self->gv_name($self->gv_or_padgv($gvop));

	return 0 unless ${$join_op->sibling} eq ${$op->last};
	return 0 unless $op->last->name =~ /^(rv2|pad)av$/;
    }
    elsif ($type eq 'concat') {
	return $self->pure_string($op->first)
            && $self->pure_string($op->last);
    }
    elsif (is_scalar($op) || $type =~ /^[ah]elem(fast)?$/) {
	return 1;
    }
    else {
	return 0;
    }

    return 1;
}

sub regcomp {
d2740 1
a2740 1
    my($op, $cx, $extended) = @@_;
d2744 1
a2744 7
    return ($self->re_dq($kid, $extended), 1) if $self->pure_string($kid);
    return ($self->deparse($kid, $cx), 0);
}

sub pp_regcomp {
    my ($self, $op, $cx) = @@_;
    return (($self->regcomp($op, $cx, 0))[0]);
a2763 2
    my $quote = 1;
    my $extended = ($op->pmflags & PMf_EXTENDED);
d2765 1
a2765 8
	my $unbacked = re_unback($op->precomp);
	if ($extended) {
	    $re = re_uninterp_extended(escape_extended_re($unbacked));
	} else {
	    $re = re_uninterp(escape_str(re_unback($op->precomp)));
	}
    } elsif ($kid->name ne 'regcomp') {
	carp("found ".$kid->name." where regcomp expected");
d2767 1
a2767 1
	($re, $quote) = $self->regcomp($kid, 1, $extended);
d2781 1
a2781 1
    } elsif ($quote) {
d2784 1
a2784 1
    $re = $re . $flags if $quote;
d2801 2
a2802 5
    # under ithreads pmreplroot is an integer, not an SV
    my $replroot = $kid->pmreplroot;
    if ( ( ref($replroot) && $$replroot ) ||
         ( !ref($replroot) && $replroot ) ) {
	$ary = $self->stash_variable('@@', $self->gv_name($kid->pmreplroot));
a2806 9

    # handle special case of split(), and split(" ") that compiles to /\s+/
    $kid = $op->first;
    if ($kid->flags & OPf_SPECIAL
	&& $exprs[0] eq '/\\s+/'
	&& $kid->pmflags & PMf_SKIPWHITE ) {
	    $exprs[0] = '" "';
    }

a2850 1
    my $extended = ($op->pmflags & PMf_EXTENDED);
d2852 1
a2852 7
	my $unbacked = re_unback($op->precomp);
	if ($extended) {
	    $re = re_uninterp_extended(escape_extended_re($unbacked));
	}
	else {
	    $re = re_uninterp(escape_str($unbacked));
	}
d2854 1
a2854 1
	($re) = $self->regcomp($kid, 1, $extended);
d2862 1
a2862 1
    $flags .= "x" if $extended;
a2935 16
=item B<-P>

Disable prototype checking. With this option, all function calls are
deparsed as if no prototype was defined for them. In other words,

    perl -MO=Deparse,-P -e 'sub foo (\@@) { 1 } foo @@x'

will print

    sub foo (\@@) {
	1;
    }
    &foo(\@@x);

making clear how the parameters are actually passed to C<foo>.

d2955 1
a2955 1
=item B<-f>I<FILE>
d2957 11
a2967 6
Normally, B::Deparse deparses the main code of a program, and all the subs
defined in the same file. To include subs defined in other files, pass the
B<-f> option with the filename. You can pass the B<-f> option several times, to
include more than one secondary file.  (Most of the time you don't want to
use it at all.)  You can also use this option to include subs which are
defined in the scope of a B<#line> directive with two parameters.
a3103 130
=head2 ambient_pragmas

    $deparse->ambient_pragmas(strict => 'all', '$[' => $[);

The compilation of a subroutine can be affected by a few compiler
directives, B<pragmas>. These are:

=over 4

=item *

use strict;

=item *

use warnings;

=item *

Assigning to the special variable $[

=item *

use integer;

=item *

use bytes;

=item *

use utf8;

=item *

use re;

=back

Ordinarily, if you use B::Deparse on a subroutine which has
been compiled in the presence of one or more of these pragmas,
the output will include statements to turn on the appropriate
directives. So if you then compile the code returned by coderef2text, 
it will behave the same way as the subroutine which you deparsed.

However, you may know that you intend to use the results in a
particular context, where some pragmas are already in scope. In
this case, you use the B<ambient_pragmas> method to describe the
assumptions you wish to make.

Not all of the options currently have any useful effect. See
L</BUGS> for more details.

The parameters it accepts are:

=over 4

=item strict

Takes a string, possibly containing several values separated
by whitespace. The special values "all" and "none" mean what you'd
expect.

    $deparse->ambient_pragmas(strict => 'subs refs');

=item $[

Takes a number, the value of the array base $[.

=item bytes

=item utf8

=item integer

If the value is true, then the appropriate pragma is assumed to
be in the ambient scope, otherwise not.

=item re

Takes a string, possibly containing a whitespace-separated list of
values. The values "all" and "none" are special. It's also permissible
to pass an array reference here.

    $deparser->ambient_pragmas(re => 'eval');


=item warnings

Takes a string, possibly containing a whitespace-separated list of
values. The values "all" and "none" are special, again. It's also
permissible to pass an array reference here.

    $deparser->ambient_pragmas(warnings => [qw[void io]]);

If one of the values is the string "FATAL", then all the warnings
in that list will be considered fatal, just as with the B<warnings>
pragma itself. Should you need to specify that some warnings are
fatal, and others are merely enabled, you can pass the B<warnings>
parameter twice:

    $deparser->ambient_pragmas(
	warnings => 'all',
	warnings => [FATAL => qw/void io/],
    );

See L<perllexwarn> for more information about lexical warnings. 

=item hint_bits

=item warning_bits

These two parameters are used to specify the ambient pragmas in
the format used by the special variables $^H and ${^WARNING_BITS}.

They exist principally so that you can write code like:

    { my ($hint_bits, $warning_bits);
    BEGIN {($hint_bits, $warning_bits) = ($^H, ${^WARNING_BITS})}
    $deparser->ambient_pragmas (
	hint_bits    => $hint_bits,
	warning_bits => $warning_bits,
	'$['         => 0 + $[
    ); }

which specifies that the ambient pragmas are exactly those which
are in scope at the point of calling.

=back

d3119 1
a3119 68
=over 4

=item *

The only pragmas to be completely supported are: C<use warnings>,
C<use strict 'refs'>, C<use bytes>, and C<use integer>. (C<$[>, which
behaves like a pragma, is also supported.)

Excepting those listed above, we're currently unable to guarantee that
B::Deparse will produce a pragma at the correct point in the program.
Since the effects of pragmas are often lexically scoped, this can mean
that the pragma holds sway over a different portion of the program
than in the input file.

=item *

In fact, the above is a specific instance of a more general problem:
we can't guarantee to produce BEGIN blocks or C<use> declarations in
exactly the right place. So if you use a module which affects compilation
(such as by over-riding keywords, overloading constants or whatever)
then the output code might not work as intended.

This is the most serious outstanding problem, and will be very hard
to fix.

=item *

If a keyword is over-ridden, and your program explicitly calls
the built-in version by using CORE::keyword, the output of B::Deparse
will not reflect this. If you run the resulting code, it will call
the over-ridden version rather than the built-in one. (Maybe there
should be an option to B<always> print keyword calls as C<CORE::name>.)

=item *

C<sort foo (1, 2, 3)> comes out as C<sort (foo 1, 2, 3)>, which
causes perl to issue a warning.

The obvious fix doesn't work, because these are different:

    print (FOO 1, 2, 3), 4, 5, 6;
    print FOO (1, 2, 3), 4, 5, 6;

=item *

Constants (other than simple strings or numbers) don't work properly.
Pathological examples that fail (and probably always will) include:

    use constant E2BIG => ($!=7);
    use constant x=>\$x; print x

The following could (and should) be made to work:

    use constant regex => qr/blah/;
    print regex;

=item *

An input file that uses source filtering probably won't be deparsed into
runnable code, because it will still include the B<use> declaration
for the source filtering module, even though the code that is
produced is already ordinary Perl which shouldn't be filtered again.

=item *

There are probably many more bugs on non-ASCII platforms (EBCDIC).

=back
d3125 2
a3126 3
contributions from Gisle Aas, James Duncan, Albert Dvornik, Robin
Houston, Hugo van der Sanden, Gurusamy Sarathy, Nick Ing-Simmons,
and Rafael Garcia-Suarez.
@


1.1.1.5
log
@perl 5.8.2 from CPAN
@
text
@d2 1
a2 1
# Copyright (c) 1998-2000, 2002, 2003 Stephen McCamant. All rights reserved.
d18 1
a18 1
	 SVf_IOK SVf_NOK SVf_ROK SVf_POK SVpad_OUR SVf_FAKE SVs_RMG SVs_SMG
d22 1
a22 1
$VERSION = 0.64;
d85 1
a85 1
# - added support for Hugo's new OP_SETSTATE (like nextstate)
a112 6
# Changes between 0.63 and 0.64
# - support for //, CHECK blocks, and assertions
# - improved handling of foreach loops and lexicals
# - option to use Data::Dumper for constants
# - more bug fixes
# - discovered lots more bugs not yet fixed
d120 1
d130 1
d135 2
a136 48
# Current test.deparse failures
# comp/assertions 38 - disabled assertions should be like "my($x) if 0"
#    'sub f : assertion {}; no assertions; my $x=1; {f(my $x=2); print "$x\n"}'
# comp/hints 6 - location of BEGIN blocks wrt. block openings
# run/switchI 1 - missing -I switches entirely
#    perl -Ifoo -e 'print @@INC'
# op/caller 2 - warning mask propagates backwards before warnings::register
#    'use warnings; BEGIN {${^WARNING_BITS} eq "U"x12;} use warnings::register'
# op/getpid 2 - can't assign to shared my() declaration (threads only)
#    'my $x : shared = 5'
# op/override 7 - parens on overriden require change v-string interpretation
#    'BEGIN{*CORE::GLOBAL::require=sub {}} require v5.6'
#    c.f. 'BEGIN { *f = sub {0} }; f 2'
# op/pat 774 - losing Unicode-ness of Latin1-only strings
#    'use charnames ":short"; $x="\N{latin:a with acute}"'
# op/recurse 12 - missing parens on recursive call makes it look like method
#    'sub f { f($x) }'
# op/subst 90 - inconsistent handling of utf8 under "use utf8"
# op/taint 29 - "use re 'taint'" deparsed in the wrong place wrt. block open
# op/tiehandle compile - "use strict" deparsed in the wrong place
# uni/tr_ several
# ext/B/t/xref 11 - line numbers when we add newlines to one-line subs
# ext/Data/Dumper/t/dumper compile
# ext/DB_file/several
# ext/Encode/several
# ext/Ernno/Errno warnings
# ext/IO/lib/IO/t/io_sel 23
# ext/PerlIO/t/encoding compile
# ext/POSIX/t/posix 6
# ext/Socket/Socket 8
# ext/Storable/t/croak compile
# lib/Attribute/Handlers/t/multi compile
# lib/bignum/ several
# lib/charnames 35
# lib/constant 32
# lib/English 40
# lib/ExtUtils/t/bytes 4
# lib/File/DosGlob compile
# lib/Filter/Simple/t/data 1
# lib/Math/BigInt/t/constant 1
# lib/Net/t/config Deparse-warning
# lib/overload compile
# lib/Switch/ several
# lib/Symbol 4
# lib/Test/Simple several
# lib/Term/Complete
# lib/Tie/File/t/29_downcopy 5
# lib/vars 22
d144 1
a144 1
# individual locals too. This hash holds the addresses of OPs that
a229 1
#  0.5           statements, but still print scopes as do { ... }
d232 7
d257 1
a257 3
    if ($cv->OUTSIDE_SEQ) {
	$seq = $cv->OUTSIDE_SEQ;
    } elsif (!null($cv->START) and is_state($cv->START)) {
d281 1
a281 1
	    if (defined ($use_dec) and $self->{'expand'} < 5) {
d292 1
a292 11
	my $p = '';
	if (class($cv->STASH) ne "SPECIAL") {
	    my $stash = $cv->STASH->NAME;
	    if ($stash ne $self->{'curstash'}) {
		$p = "package $stash;\n";
		$name = "$self->{'curstash'}::$name" unless $name =~ /::/;
		$self->{'curstash'} = $stash;
	    }
	    $name =~ s/^\Q$stash\E:://;
	}
        return "${p}${l}sub $name " . $self->deparse_sub($cv);
d317 1
a317 1
	$module = $self->const($self->const_sv($req_op->first), 6);
d329 1
a329 12
	$version = $self->const_sv($constop);
	if (class($version) eq "IV") {
	    $version = $version->int_value;
	} elsif (class($version) eq "NV") {
	    $version = $version->NV;
	} elsif (class($version) ne "PVMG") {
	    # Includes PVIV and PVNV
	    $version = $version->PV;
	} else {
	    # version specified as a v-string
	    $version = 'v'.join '.', map ord, split //, $version->PV;
	}
d419 1
a419 1
	    push @@{$self->{'protos_todo'}}, [$pack . $key, undef];
d474 4
d479 2
a480 3
    $self->{'curcop'} = undef;
    $self->{'curstash'} = "main";
    $self->{'ex_const'} = "'???'";
d482 1
a482 2
    $self->{'files'} = {};
    $self->{'indent_size'} = 4;
d485 1
a485 4
    $self->{'subs_todo'} = [];
    $self->{'unquote'} = 0;
    $self->{'use_dumper'} = 0;
    $self->{'use_tabs'} = 0;
d493 1
a493 4
	if ($arg eq "-d") {
	    $self->{'use_dumper'} = 1;
	    require Data::Dumper;
	} elsif ($arg =~ /^-f(.*)/) {
a494 2
	} elsif ($arg eq "-l") {
	    $self->{'linenums'} = 1;
d499 2
d541 1
a541 1
    return sub {
a555 1
	my @@CHECKs  = B::check_av->isa("B::AV") ? B::check_av->ARRAY : ();
d558 1
a558 1
	for my $block (@@BEGINs, @@CHECKs, @@INITs, @@ENDs) {
a561 8
	local($SIG{"__DIE__"}) =
	  sub {
	      if ($self->{'curcop'}) {
		  my $cop = $self->{'curcop'};
		  my($line, $file) = ($cop->line, $cop->file);
		  print STDERR "While deparsing $file near line $line,\n";
	      }
	    };
d567 1
a567 1
	print $self->indent($self->deparse_root(main_root)), "\n"
a579 2
	    print "package $laststash;\n"
		unless $laststash eq $self->{'curstash'};
a698 1
# This method is the inner loop, so try to keep it simple
d701 1
a701 1
    my($op, $cx) = @@_;
d706 3
d784 1
a784 1
	    return $proto . "{ " . $self->const($sv, 0) . " }\n";
d825 1
a825 1
	|| ($op->name eq "null" && class($op) eq "UNOP"
d836 1
a836 1
    return (!null($op) and null($op->sibling)
a845 18
# Check if the op and its sibling are the initialization and the rest of a
# for (..;..;..) { ... } loop
sub is_for_loop {
    my $op = shift;
    # This OP might be almost anything, though it won't be a
    # nextstate. (It's the initialization, so in the canonical case it
    # will be an sassign.) The sibling is a lineseq whose first child
    # is a nextstate and whose second is a leaveloop.
    my $lseq = $op->sibling;
    if (!is_state $op and !null($lseq) and $lseq->name eq "lineseq") {
	if ($lseq->first && !null($lseq->first) && is_state($lseq->first)
	    && (my $sib = $lseq->first->sibling)) {
	    return (!null($sib) && $sib->name eq "leaveloop");
	}
    }
    return 0;
}

a915 4
	if( $our_local eq 'our' ) {
	    die "Unexpected our($text)\n" unless $text =~ /^\W(\w+::)*\w+\z/;
	    $text =~ s/(\w+::)+//;
	}
d941 1
a941 1
    return $self->{'curcv'}->PADLIST->ARRAYelt(0)->ARRAYelt($targ);
d1016 1
a1016 1
	$expr .= $self->deparse($ops[$i], (@@ops != 1)/2);
d1029 1
a1029 1
    my($real_block, $self, $op, $cx) = @@_;
d1059 1
a1059 1
    if ($cx > 0) { # inside an expression, (a do {} while for lineseq)
a1070 37
# This is a special case of scopeop and lineseq, for the case of the
# main_root. The difference is that we print the output statements as
# soon as we get them, for the sake of impatient users.
sub deparse_root {
    my $self = shift;
    my($op) = @@_;
    local(@@$self{qw'curstash warnings hints'})
      = @@$self{qw'curstash warnings hints'};
    my @@kids;
    for (my $kid = $op->first->sibling; !null($kid); $kid = $kid->sibling) {
	push @@kids, $kid;
    }
    for (my $i = 0; $i < @@kids; $i++) {
	my $expr = "";
	if (is_state $kids[$i]) {
	    $expr = $self->deparse($kids[$i], 0);
	    $i++;
	    if ($i > $#kids) {
		print $self->indent($expr);
		last;
	    }
	}
	if (is_for_loop($kids[$i])) {
	    $expr .= $self->for_loop($kids[$i], 0);
	    $expr .= ";\n" unless $i == $#kids;
	    print $self->indent($expr);
	    $i++;
	    next;
	}
	$expr .= $self->deparse($kids[$i], (@@kids != 1)/2);
	$expr =~ s/;\n?\z//;
	$expr .= ";";
	print $self->indent($expr);
	print "\n" unless $i == $#kids;
    }
}

d1080 1
a1080 1
Carp::confess() unless ref($gv) eq "B::GV";
d1105 1
a1105 1
    unless ($prefix eq '$' || $prefix eq '@@' || #'
d1132 1
a1132 4
	my $padlist = $cv->PADLIST;
	# an undef CV still in lexical chain
	next if class($padlist) eq "SPECIAL";
	my @@padlist = $padlist->ARRAY;
d1143 2
a1144 4
	    my ($seq_st, $seq_en) =
		($ns[$i]->FLAGS & SVf_FAKE)
		    ? (0, 999999)
		    : ($ns[$i]->NVX, $ns[$i]->IVX);
d1222 4
a1257 8
    # This should go after of any branches that add statements, to
    # increase the chances that it refers to the same line it did in
    # the original program.
    if ($self->{'linenums'}) {
	push @@text, "\f#line " . $op->line .
	  ' "' . $op->file, qq'"\n';
    }

d1309 1
a1309 1
    if ($cx >= 1) {
d1391 1
a1391 1
	if (defined prototype("CORE::$name")
d1399 1
a1399 1
	return $name .  ($op->flags & OPf_SPECIAL ? "()" : "");
d1543 1
a1543 1
sub pp_scalar {
d1558 1
a1558 1
    return $self->{'curcv'}->PADLIST->ARRAYelt(1)->ARRAYelt($targ);
d1577 1
a1577 1
	} elsif (!null($kid->sibling) and
d1588 1
a1588 1
		return "\\(" . $self->pp_list($op->first) . ")";
d1615 1
a1615 1
    return "<" . $self->gv_name($self->gv_or_padgv($op)) . ">";
d1629 1
a1629 1
       return $name .  ($op->flags & OPf_SPECIAL ? "()" : "");
d1666 1
a1666 1
    } elsif (class($op) =~ /^(SV|PAD)OP$/) {
d1673 3
a1675 3
sub pp_lstat    { ftst(@@_, "lstat") }
sub pp_stat     { ftst(@@_, "stat") }
sub pp_ftrread  { ftst(@@_, "-R") }
d1677 2
a1678 2
sub pp_ftrexec  { ftst(@@_, "-X") }
sub pp_fteread  { ftst(@@_, "-r") }
d1680 2
a1681 2
sub pp_fteexec  { ftst(@@_, "-x") }
sub pp_ftis     { ftst(@@_, "-e") }
d1684 17
a1700 17
sub pp_ftzero   { ftst(@@_, "-z") }
sub pp_ftsize   { ftst(@@_, "-s") }
sub pp_ftmtime  { ftst(@@_, "-M") }
sub pp_ftatime  { ftst(@@_, "-A") }
sub pp_ftctime  { ftst(@@_, "-C") }
sub pp_ftsock   { ftst(@@_, "-S") }
sub pp_ftchr    { ftst(@@_, "-c") }
sub pp_ftblk    { ftst(@@_, "-b") }
sub pp_ftfile   { ftst(@@_, "-f") }
sub pp_ftdir    { ftst(@@_, "-d") }
sub pp_ftpipe   { ftst(@@_, "-p") }
sub pp_ftlink   { ftst(@@_, "-l") }
sub pp_ftsuid   { ftst(@@_, "-u") }
sub pp_ftsgid   { ftst(@@_, "-g") }
sub pp_ftsvtx   { ftst(@@_, "-k") }
sub pp_fttty    { ftst(@@_, "-t") }
sub pp_fttext   { ftst(@@_, "-T") }
d1930 1
a1930 1
    if ($cx < 1 and is_scope($right) and $blockname
d1936 1
a1936 1
    } elsif ($cx < 1 and $blockname and not $self->{'parens'}
d1948 1
a1948 1
	return $self->maybe_parens("$left $lowop $right", $cx, $lowprec);
d1981 2
a1982 3
    my $proto = prototype("CORE::$name");
    if (defined $proto
	&& $proto =~ /^;?\*/
a1994 4
    if (defined $proto && $proto =~ /^\*\*/ && $kid->name eq "rv2gv") {
	push @@exprs, $self->deparse($kid->first, 6);
	$kid = $kid->sibling;
    }
d2093 1
a2093 1
	or $text =~ /[<>]/) {
a2136 1
	    $indir = "{;}" if $indir eq "{}";
d2156 2
a2157 17
    my $args = $indir . join(", ", @@exprs);
    if ($indir ne "" and $name eq "sort") {
	# We don't want to say "sort(f 1, 2, 3)", since perl -w will
	# give bareword warnings in that case. Therefore if context
	# requires, we'll put parens around the outside "(sort f 1, 2,
	# 3)". Unfortunately, we'll currently think the parens are
	# neccessary more often that they really are, because we don't
	# distinguish which side of an assignment we're on.
	if ($cx >= 5) {
	    return "($name $args)";
	} else {
	    return "$name $args";
	}
    } else {
	return $self->maybe_parens_func($name, $args, $cx, 5);
    }

d2184 2
a2185 2
sub pp_mapwhile { mapop(@@_, "map") }
sub pp_grepwhile { mapop(@@_, "grep") }
d2263 1
a2263 1
    unless ($cx < 1 and (is_scope($true) and $true->name ne "null") and
d2273 1
a2273 1
    $true = $self->deparse($true, 0);
d2285 1
a2285 1
    if (!null($false)) {
d2291 1
a2291 1
    return $head . join($cuddle, "", @@elsifs) . $false;
d2305 2
a2306 2
    if ($kid->name eq "lineseq") { # bare or infinite loop
	if ($kid->last->name eq "unstack") { # infinite
d2329 8
a2339 5
	    if ($enter->private & OPpOUR_INTRO) {
		# our declarations don't have package names
		$var =~ s/^(.).*::/$1/;
		$var = "our $var";
	    }
d2355 1
a2355 1
    # will point to the unstack, which is kid's last child, except
d2357 1
a2357 1
    # these conditions hold, then the second-to-last child is the continue
d2361 1
a2361 1
    if ($$cont_start != $$op && ${$cont_start} != ${$body->last}) {
d2366 1
a2366 1
	    while (!null($cont->sibling->sibling)) {
d2440 1
a2440 1
    } elsif ($op->flags & OPf_SPECIAL && $cx < 1 && !$op->targ) {
d2489 1
a2489 1
}
d2537 3
a2539 20
    if ($kid->name eq "gv") {
	return $self->stash_variable($type, $self->deparse($kid, 0));
    } elsif (is_scalar $kid) {
	my $str = $self->deparse($kid, 0);
	if ($str =~ /^\$([^\w\d])\z/) {
	    # "$$+" isn't a legal way to write the scalar dereference
	    # of $+, since the lexer can't tell you aren't trying to
	    # do something like "$$ + 1" to get one more than your
	    # PID. Either "${$+}" or "$${+}" are workable
	    # disambiguations, but if the programmer did the former,
	    # they'd be in the "else" clause below rather than here.
	    # It's not clear if this should somehow be unified with
	    # the code in dq and re_dq that also adds lexer
	    # disambiguation braces.
	    $str = '$' . "{$1}"; #'
	}
	return $type . $str;
    } else {
	return $type . "{" . $self->deparse($kid, 0) . "}";
    }
a2570 18
sub list_const {
    my $self = shift;
    my($cx, @@list) = @@_;
    my @@a = map $self->const($_, 6), @@list;
    if (@@a == 0) {
	return "()";
    } elsif (@@a == 1) {
	return $a[0];
    } elsif ( @@a > 2 and !grep(!/^-?\d+$/, @@a)) {
	# collapse (-1,0,1,2) into (-1..2)
	my ($s, $e) = @@a[0,-1];
	my $i = $s;
	return $self->maybe_parens("$s..$e", $cx, 9)
	  unless grep $i++ != $_, @@a;
    }
    return $self->maybe_parens(join(", ", @@a), $cx, 6);
}

d2577 1
a2577 1
	return $self->list_const($cx, $av->ARRAY);
d2745 1
a2745 1
	# usually is. This can be distinguished from
d2913 1
a2913 1
	    || (
a2953 1
	my $dproto = defined($proto) ? $proto : "undefined";
d2956 1
a2956 1
	} elsif ($dproto eq "") {
d2958 1
a2958 5
	} elsif ($dproto eq "\$" and is_scalar($exprs[0])) {
	    # is_scalar is an excessively conservative test here:
	    # really, we should be comparing to the precedence of the
	    # top operator of $exprs[0] (ala unop()), but that would
	    # take some major code restructuring to do right.
d2960 1
a2960 1
	} elsif ($dproto ne '$' and defined($proto) || $simple) { #'
d3013 1
a3013 1
	/defined($4) && length($4) ? "$1$2$4" : "$1$2\\$3"/xeg;
d3041 1
a3041 1
	/defined($4) && length($4) ? "$1$2$4" : "$1$2\\$3"/xeg;
d3087 1
a3087 1
#    $str =~ s/\cH/\\b/g; # \b means something different in a regex
a3169 24
my $max_prec;
BEGIN { $max_prec = int(0.999 + 8*length(pack("F", 42))*log(2)/log(10)); }

# Split a floating point number into an integer mantissa and a binary
# exponent. Assumes you've already made sure the number isn't zero or
# some weird infinity or NaN.
sub split_float {
    my($f) = @@_;
    my $exponent = 0;
    if ($f == int($f)) {
	while ($f % 2 == 0) {
	    $f /= 2;
	    $exponent++;
	}
    } else {
	while ($f != int($f)) {
	    $f *= 2;
	    $exponent--;
	}
    }
    my $mantissa = sprintf("%.0f", $f);
    return ($mantissa, $exponent);
}

d3171 1
a3171 5
    my $self = shift;
    my($sv, $cx) = @@_;
    if ($self->{'use_dumper'}) {
	return $self->const_dumper($sv, $cx);
    }
d3173 1
a3173 2
	# sv_undef, sv_yes, sv_no
	return ('undef', '1', $self->maybe_parens("!1", $cx, 21))[$$sv-1];
d3176 2
a3177 12
    }
    # convert a version object into the "v1.2.3" string in its V magic
    if ($sv->FLAGS & SVs_RMG) {
	for (my $mg = $sv->MAGIC; $mg; $mg = $mg->MOREMAGIC) {
	    return $mg->PTR if $mg->TYPE eq 'V';
	}
    }

    if ($sv->FLAGS & SVf_IOK) {
	my $str = $sv->int_value;
	$str = $self->maybe_parens($str, $cx, 21) if $str < 0;
	return $str;
d3179 5
a3183 43
	my $nv = $sv->NV;
	if ($nv == 0) {
	    if (pack("F", $nv) eq pack("F", 0)) {
		# positive zero
		return "0";
	    } else {
		# negative zero
		return $self->maybe_parens("-.0", $cx, 21);
	    }
	} elsif (1/$nv == 0) {
	    if ($nv > 0) {
		# positive infinity
		return $self->maybe_parens("9**9**9", $cx, 22);
	    } else {
		# negative infinity
		return $self->maybe_parens("-9**9**9", $cx, 21);
	    }
	} elsif ($nv != $nv) {
	    # NaN
	    if (pack("F", $nv) eq pack("F", sin(9**9**9))) {
		# the normal kind
		return "sin(9**9**9)";
	    } elsif (pack("F", $nv) eq pack("F", -sin(9**9**9))) {
		# the inverted kind
		return $self->maybe_parens("-sin(9**9**9)", $cx, 21);
	    } else {
		# some other kind
		my $hex = unpack("h*", pack("F", $nv));
		return qq'unpack("F", pack("h*", "$hex"))';
	    }
	}
	# first, try the default stringification
	my $str = "$nv";
	if ($str != $nv) {
	    # failing that, try using more precision
	    $str = sprintf("%.${max_prec}g", $nv);
#	    if (pack("F", $str) ne pack("F", $nv)) {
	    if ($str != $nv) {
		# not representable in decimal with whatever sprintf()
		# and atof() Perl is using here.
		my($mant, $exp) = split_float($nv);
		return $self->maybe_parens("$mant * 2**$exp", $cx, 19);
	    }
d3185 1
a3185 2
	$str = $self->maybe_parens($str, $cx, 21) if $nv < 0;
	return $str;
d3187 1
a3187 23
	my $ref = $sv->RV;
	if (class($ref) eq "AV") {
	    return "[" . $self->list_const(2, $ref->ARRAY) . "]";
	} elsif (class($ref) eq "HV") {
	    my %hash = $ref->ARRAY;
	    my @@elts;
	    for my $k (sort keys %hash) {
		push @@elts, "$k => " . $self->const($hash{$k}, 6);
	    }
	    return "{" . join(", ", @@elts) . "}";
	} elsif (class($ref) eq "CV") {
	    return "sub " . $self->deparse_sub($ref);
	}
	if ($ref->FLAGS & SVs_SMG) {
	    for (my $mg = $ref->MAGIC; $mg; $mg = $mg->MOREMAGIC) {
		if ($mg->TYPE eq 'r') {
		    my $re = re_uninterp(escape_str(re_unback($mg->precomp)));
		    return single_delim("qr", "", $re);
		}
	    }
	}
	
	return $self->maybe_parens("\\" . $self->const($ref, 20), $cx, 20);
a3199 14
sub const_dumper {
    my $self = shift;
    my($sv, $cx) = @@_;
    my $ref = $sv->object_2svref();
    my $dumper = Data::Dumper->new([$$ref], ['$v']);
    $dumper->Purity(1)->Terse(1)->Deparse(1)->Indent(0)->Useqq(1)->Sortkeys(1);
    my $str = $dumper->Dump();
    if ($str =~ /^\$v/) {
	return '${my ' . $str . ' \$v}';
    } else {
	return $str;
    }
}

d3215 1
a3215 1
#    if ($op->private & OPpCONST_BARE) { # trouble with `=>' autoquoting
d3219 3
a3221 1
    return $self->const($sv, $cx);
d3235 1
a3235 1
	# Disambiguate "${foo}bar", "${foo}{bar}", "${foo}[1]", "$foo\::bar"
d3238 1
a3238 1
	    || ($last =~ /^[:'{\[\w_]/ && #'
d3360 1
a3360 1
    if ($table[ord "-"] != -1 and
d3432 1
a3432 1
	    push @@delfrom, [$min, $max];
d3502 1
a3502 1
    #$extra = sprintf("%04x", $extra) if defined $extra;
a3566 1
    return 0 if null $op;
d3590 1
a3590 7
    elsif (is_scalar($op) || $type =~ /^[ah]elem$/) {
	return 1;
    }
    elsif ($type eq "null" and $op->can('first') and not null $op->first and
	   $op->first->name eq "null" and $op->first->can('first')
	   and not null $op->first->first and
	   $op->first->first->name eq "aelemfast") {
d3619 2
a3620 2
    'cox', 'go', 'is', 'ism', 'iso', 'mig', 'mix', 'osmic', 'ox', 'sic',
    'sig', 'six', 'smog', 'so', 'soc', 'sog', 'xi');
d3644 1
a3644 1
	($re, $quote) = $self->regcomp($kid, 21, $extended);
d3678 1
a3678 7

    # For our kid (an OP_PUSHRE), pmreplroot is never actually the
    # root of a replacement; it's either empty, or abused to point to
    # the GV for an array we split into (an optimization to save
    # assignment overhead). Depending on whether we're using ithreads,
    # this OP* holds either a GV* or a PADOFFSET. Luckily, B.xs
    # figures out for us which it is.
d3680 3
a3682 5
    my $gv = 0;
    if (ref($replroot) eq "B::GV") {
	$gv = $replroot;
    } elsif (!ref($replroot) and $replroot > 0) {
	$gv = $self->padval($replroot);
a3683 2
    $ary = $self->stash_variable('@@', $self->gv_name($gv)) if $gv;

d3724 1
a3724 1
    my $flags = "";
d3735 1
a3735 1
	    $repl = $self->deparse($repl->first, 0);
d3778 1
a3778 1
B<perl> B<-MO=Deparse>[B<,-d>][B<,-f>I<FILE>][B<,-p>][B<,-q>][B<,-l>]
d3794 2
a3795 7
While B::Deparse goes to some lengths to try to figure out what your
original program was doing, some parts of the language can still trip
it up; it still fails even on some parts of Perl's own test suite. If
you encounter a failure other than the most common ones described in
the BUGS section below, you can help contribute to B::Deparse's
ongoing development by submitting a bug report with a small
example.
a3803 18
=item B<-d>

Output data values (when they appear as constants) using Data::Dumper.
Without this option, B::Deparse will use some simple routines of its
own for the same purpose. Currently, Data::Dumper is better for some
kinds of data (such as complex structures with sharing and
self-reference) while the built-in routines are better for others
(such as odd floating-point values).

=item B<-f>I<FILE>

Normally, B::Deparse deparses the main code of a program, and all the subs
defined in the same file. To include subs defined in other files, pass the
B<-f> option with the filename. You can pass the B<-f> option several times, to
include more than one secondary file.  (Most of the time you don't want to
use it at all.)  You can also use this option to include subs which are
defined in the scope of a B<#line> directive with two parameters.

d3817 1
a3817 1
    if ($var & 0x7f == 65) {print "Gimme an A!"}
d3867 9
d3942 1
a3942 1
If I<LEVEL> is at least 3, C<for> loops will be translated into equivalent
d3962 2
a3963 17
If I<LEVEL> is at least 5, C<use> declarations will be translated into
C<BEGIN> blocks containing calls to C<require> and C<import>; for
instance,

    use strict 'refs';

turns into

    sub BEGIN {
        require strict;
        do {
            'strict'->import('refs')
        };
    }

If I<LEVEL> is at least 7, C<if> statements will be translated into
equivalent expressions using C<&&>, C<?:> and C<do {}>; for instance
d4053 1
a4053 1
directives. So if you then compile the code returned by coderef2text,
d4117 1
a4117 1
See L<perllexwarn> for more information about lexical warnings.
a4165 2
(Specifically, pragmas at the beginning of a block often appear right
before the start of the block instead.)
d4178 2
a4179 2
This is the most serious outstanding problem, and will require some help
from the Perl core to fix.
d4191 17
a4207 3
Some constants don't print correctly either with or without B<-d>.
For instance, neither B::Deparse nor Data::Dumper know how to print
dual-valued scalars correctly, as in:
d4209 2
a4210 1
    use constant E2BIG => ($!=7); $y = E2BIG; print $y, 0+$y;
d4227 5
a4231 5
Stephen McCamant <smcc@@CSUA.Berkeley.EDU>, based on an earlier version
by Malcolm Beattie <mbeattie@@sable.ox.ac.uk>, with contributions from
Gisle Aas, James Duncan, Albert Dvornik, Robin Houston, Dave Mitchell,
Hugo van der Sanden, Gurusamy Sarathy, Nick Ing-Simmons, and Rafael
Garcia-Suarez.
@


1.1.1.6
log
@Import of stock perl 5.8.5
@
text
@d17 1
a17 1
	 OPpSORT_REVERSE OPpSORT_INPLACE
d22 1
a22 3
# Not sure if I really should have this as maint's version, given that Deparse
# differs from blead. (latter has // support)
$VERSION = 0.67;
d1088 1
a1088 2
	my $nseq;
	$nseq = $self->find_scope_st($root->sibling) if ${$root->sibling};
a2309 4
    if ($name eq "sort" && ($op->private & OPpSORT_INPLACE)) {
	return "$exprs[0] = sort $indir $exprs[0]";
    }

d2685 4
a2688 12
    my $name;
    if ($op->flags & OPf_SPECIAL) { # optimised PADAV
	$name = $self->padname($op->targ);
	$name =~ s/^@@/\$/;
    }
    else {
	my $gv = $self->gv_or_padgv($op);
	$name = $self->gv_name($gv);
	$name = $self->{'curstash'}."::$name"
	    if $name !~ /::/ && $self->lex_in_scope('@@'.$name);
	$name = '$' . $name;
    }
d2690 2
a2691 1
    return $name . "[" .  ($op->private + $self->{'arybase'}) . "]";
a4568 9

=item *

Optimised away statements are rendered as '???'. This includes statements that
have a compile-time side-effect, such as the obscure

    my $x if 0;

which is not, consequently, deparsed correctly.
@


1.1.1.7
log
@perl 5.8.6 from CPAN
@
text
@d17 1
a17 1
	 OPpSORT_REVERSE OPpSORT_INPLACE OPpSORT_DESCEND OPpITER_REVERSED
d19 1
a19 1
         CVf_METHOD CVf_LOCKED CVf_LVALUE CVf_ASSERTION
d22 3
a24 1
$VERSION = 0.69;
d832 1
a832 1
    if ($cv->CvFLAGS & (CVf_METHOD|CVf_LOCKED|CVf_LVALUE|CVf_ASSERTION)) {
a836 1
        $proto .= "assertion " if $cv->CvFLAGS & CVf_ASSERTION;
a1016 2
	    # XXX This assertion fails code with non-ASCII identifiers,
	    # like ./ext/Encode/t/jperl.t
a2104 1
sub pp_dor { logop(@@_, "err", 2, "//", 10, "") }
d2121 1
a2121 2
sub pp_orassign  { logassignop(@@_, "||=") }
sub pp_dorassign { logassignop(@@_, "//=") }
d2303 1
a2303 1
	$indir = ($op->private & OPpSORT_DESCEND) ? '{$b <=> $a} '
d2306 1
a2306 1
    elsif ($name eq "sort" && $op->private & OPpSORT_DESCEND) {
a2312 4
    my $name2 = $name;
    if ($name eq "sort" && $op->private & OPpSORT_REVERSE) {
	$name2 = 'reverse sort';
    }
d2314 1
a2314 1
	return "$exprs[0] = $name2 $indir $exprs[0]";
d2326 1
a2326 1
	    return "($name2 $args)";
d2328 1
a2328 1
	    return "$name2 $args";
d2331 1
a2331 1
	return $self->maybe_parens_func($name2, $args, $cx, 5);
d2396 1
a2396 6
	} elsif ($lop->name ne "undef"
		# specifically avoid the "reverse sort" optimisation,
		# where "reverse" is nullified
		&& !($lop->name eq 'sort' && ($lop->flags & OPpSORT_REVERSE)))
	{
	    # local()
d2492 1
a2492 4
	if ($ary->name eq 'null' and $enter->private & OPpITER_REVERSED) {
	    # "reverse" was optimised away
	    $ary = listop($self, $ary->first->sibling, 1, 'reverse');
	} elsif ($enter->flags & OPf_STACKED
d2516 1
a2517 6
	if (!is_state $body->first and $body->first->name ne "stub") {
	    confess unless $var eq '$_';
	    $body = $body->first;
	    return $self->deparse($body, 2) . " foreach ($ary)";
	}
	$head = "foreach $var ($ary) ";
@


1.1.1.8
log
@perl 5.8.8 import
@
text
@d22 1
a22 1
$VERSION = 0.71;
d1228 1
a1228 1
	or $name =~ /^[^A-Za-z_:]/)
d1415 1
a1415 1
    if (($to & WARN_MASK) eq (warnings::bits("all") & WARN_MASK)) {
d1418 1
a1418 1
    elsif (($to & WARN_MASK) eq ("\0"x length($to) & WARN_MASK)) {
a1682 1
    my $opname = $op->flags & OPf_SPECIAL ? 'CORE::require' : 'require';
d1689 1
a1689 1
	return "$opname $name";
d1691 1
a1691 1
	$self->unop($op, $cx, $opname);
d2330 1
a2330 1
	# necessary more often that they really are, because we don't
a2368 2
sub pp_mapstart { baseop(@@_, "map") }
sub pp_grepstart { baseop(@@_, "grep") }
d3149 1
a3149 1
		 defined &{ ${$self->{'curstash'}."::"}{$kid} }
a3964 12
    if ($kid->name eq "null" and !null($kid->first)
	and $kid->first->name eq 'pushmark')
    {
	my $str = '';
	$kid = $kid->first->sibling;
	while (!null($kid)) {
	    $str .= $self->re_dq($kid, $extended);
	    $kid = $kid->sibling;
	}
	return $str, 1;
    }

@


1.1.1.9
log
@import perl 5.10.0 from CPAN
@
text
@d2 1
a2 2
# Copyright (c) 1998-2000, 2002, 2003, 2004, 2005, 2006 Stephen McCamant.
# All rights reserved.
d13 1
a13 1
	 OPf_KIDS OPf_REF OPf_STACKED OPf_SPECIAL OPf_MOD OPpPAD_STATE
d19 4
a22 5
         CVf_METHOD CVf_LOCKED CVf_LVALUE
	 PMf_KEEP PMf_GLOBAL PMf_CONTINUE PMf_EVAL PMf_ONCE
	 PMf_MULTILINE PMf_SINGLELINE PMf_FOLD PMf_EXTENDED),
	 ($] < 5.009 ? 'PMf_SKIPWHITE' : 'RXf_SKIPWHITE');
$VERSION = 0.83;
a118 5
#
# ...
#
# Changes between 0.72 and 0.73
# - support new switch constructs
d140 2
d346 1
a346 1
	    $name =~ s/^\Q$stash\E::(?!\z|.*::)//;
d436 1
a436 2
	|| $module eq 'bytes' || $module eq 'warnings'
	|| $module eq 'feature') {
d465 1
d499 1
a499 3
		$self->stash_subs($pack . $key)
		    unless $pack eq '' && $key eq 'main::';
		    # avoid infinite recursion
a557 1
    $self->{'ambient_hinthash'} = undef;
d604 1
a604 3
    $self->{'hints'}    = $self->{'ambient_hints'};
    $self->{'hints'} &= 0xFF if $] < 5.009;
    $self->{'hinthash'} = $self->{'ambient_hinthash'};
a626 3
	my @@UNITCHECKs = B::unitcheck_av->isa("B::AV")
	    ? B::unitcheck_av->ARRAY
	    : ();
d630 1
a630 1
	for my $block (@@BEGINs, @@UNITCHECKs, @@CHECKs, @@INITs, @@ENDs) {
d679 1
a679 1
    my ($arybase, $hint_bits, $warning_bits, $hinthash) = (0, 0);
a767 4
	elsif ($name eq '%^H') {
	    $hinthash = $val;
	}

a778 1
    $self->{'ambient_hinthash'} = $hinthash;
d830 1
a830 1
    if ($cv->CvFLAGS & (CVf_METHOD|CVf_LOCKED|CVf_LVALUE)) {
d835 1
d840 2
a841 2
    local(@@$self{qw'curstash warnings hints hinthash'})
		= @@$self{qw'curstash warnings hints hinthash'};
d880 2
a881 2
    local(@@$self{qw'curstash warnings hints hinthash'})
		= @@$self{qw'curstash warnings hints hinthash'};
a1052 1
	my $my = $op->private & OPpPAD_STATE ? "state" : "my";
d1054 1
a1054 1
	    return "$my $text";
d1056 1
a1056 1
	    return $self->maybe_parens_func($my, $text, $cx, 16);
d1100 26
a1125 4

    $self->walk_lineseq($root, \@@ops,
		       sub { push @@exprs, $_[0]} );

d1139 2
a1140 2
    local(@@$self{qw'curstash warnings hints hinthash'})
		= @@$self{qw'curstash warnings hints hinthash'} if $real_block;
d1183 2
a1184 2
    local(@@$self{qw'curstash warnings hints hinthash'})
      = @@$self{qw'curstash warnings hints hinthash'};
a1185 1
    return if null $op->first; # Can happen, e.g., for Bytecode without -k
a1188 9
    $self->walk_lineseq($op, \@@kids,
			sub { print $self->indent($_[0].';');
			      print "\n" unless $_[1] == $#kids;
			  });
}

sub walk_lineseq {
    my ($self, $op, $kids, $callback) = @@_;
    my @@kids = @@$kids;
d1192 2
a1193 1
	    $expr = $self->deparse($kids[$i++], 0);
d1195 1
a1195 1
		$callback->($expr, $i);
d1200 4
a1203 1
	    $callback->($expr . $self->for_loop($kids[$i], 0), $i++);
d1208 3
a1210 1
	$callback->($expr, $i);
d1226 2
a1227 6
    if ($stash eq 'main' && $name =~ /^::/) {
	$stash = '::';
    }
    elsif (($stash eq 'main' && $globalnames{$name})
	or ($stash eq $self->{'curstash'} && !$globalnames{$name}
	    && ($stash eq 'main' || $name !~ /::/))
d1292 1
a1292 1
		    : ($ns[$i]->COP_SEQ_RANGE_LOW, $ns[$i]->COP_SEQ_RANGE_HIGH);
d1308 15
a1322 19
    my @@queue = ($op);
    while(my $op = shift @@queue ) {
	for (my $o=$op->first; $$o; $o=$o->sibling) {
	    if ($o->name =~ /^pad.v$/ && $o->private & OPpLVAL_INTRO) {
		my $s = int($self->padname_sv($o->targ)->COP_SEQ_RANGE_LOW);
		my $e = $self->padname_sv($o->targ)->COP_SEQ_RANGE_HIGH;
		$scope_st = $s if !defined($scope_st) || $s < $scope_st;
		$scope_en = $e if !defined($scope_en) || $e > $scope_en;
		return ($scope_st, $scope_en);
	    }
	    elsif (is_state($o)) {
		my $c = $o->cop_seq;
		$scope_st = $c if !defined($scope_st) || $c < $scope_st;
		$scope_en = $c if !defined($scope_en) || $c > $scope_en;
		return ($scope_st, $scope_en);
	    }
	    elsif ($o->flags & OPf_KIDS) {
		unshift (@@queue, $o);
	    }
d1397 3
a1399 11
    if ($self->{'hints'} != $op->hints) {
	push @@text, declare_hints($self->{'hints'}, $op->hints);
	$self->{'hints'} = $op->hints;
    }

    # hack to check that the hint hash hasn't changed
    if ($] > 5.009 &&
	"@@{[sort %{$self->{'hinthash'} || {}}]}"
	ne "@@{[sort %{$op->hints_hash->HASH || {}}]}") {
	push @@text, declare_hinthash($self->{'hinthash'}, $op->hints_hash->HASH, $self->{indent_size});
	$self->{'hinthash'} = $op->hints_hash->HASH;
a1437 27
# Internal implementation hints that the core sets automatically, so don't need
# (or want) to be passed back to the user
my %ignored_hints = (
    'open<' => 1,
    'open>' => 1,
    'v_string' => 1,
    );

sub declare_hinthash {
    my ($from, $to, $indent) = @@_;
    my @@decls;
    for my $key (keys %$to) {
	next if $ignored_hints{$key};
	if (!defined $from->{$key} or $from->{$key} ne $to->{$key}) {
	    push @@decls, qq(\$^H{'$key'} = q($to->{$key}););
	}
    }
    for my $key (keys %$from) {
	next if $ignored_hints{$key};
	if (!exists $to->{$key}) {
	    push @@decls, qq(delete \$^H{'$key'};);
	}
    }
    @@decls or return '';
    return join("\n" . (" " x $indent), "BEGIN {", @@decls) . "\n}\n";
}

a1634 32
sub pp_continue { unop(@@_, "continue"); }
sub pp_break {
    my ($self, $op) = @@_;
    return "" if $op->flags & OPf_SPECIAL;
    unop(@@_, "break");
}

sub givwhen {
    my $self = shift;
    my($op, $cx, $givwhen) = @@_;

    my $enterop = $op->first;
    my ($head, $block);
    if ($enterop->flags & OPf_SPECIAL) {
	$head = "default";
	$block = $self->deparse($enterop->first, 0);
    }
    else {
	my $cond = $enterop->first;
	my $cond_str = $self->deparse($cond, 1);
	$head = "$givwhen ($cond_str)";
	$block = $self->deparse($cond->sibling, 0);
    }

    return "$head {\n".
	"\t$block\n".
	"\b}\cK";
}

sub pp_leavegiven { givwhen(@@_, "given"); }
sub pp_leavewhen  { givwhen(@@_, "when"); }

d1698 1
a1698 1
    my($op, $cx) = @@_;
a1713 31
sub anon_hash_or_list {
    my $self = shift;
    my($op, $cx) = @@_;

    my($pre, $post) = @@{{"anonlist" => ["[","]"],
			 "anonhash" => ["{","}"]}->{$op->name}};
    my($expr, @@exprs);
    $op = $op->first->sibling; # skip pushmark
    for (; !null($op); $op = $op->sibling) {
	$expr = $self->deparse($op, 6);
	push @@exprs, $expr;
    }
    if ($pre eq "{" and $cx < 1) {
	# Disambiguate that it's not a block
	$pre = "+{";
    }
    return $pre . join(", ", @@exprs) . $post;
}

sub pp_anonlist {
    my $self = shift;
    my ($op, $cx) = @@_;
    if ($op->flags & OPf_SPECIAL) {
	return $self->anon_hash_or_list($op, $cx);
    }
    warn "Unexpected op pp_" . $op->name() . " without OPf_SPECIAL";
    return 'XXX';
}

*pp_anonhash = \&pp_anonlist;

d1721 9
a1729 1
	    return $self->anon_hash_or_list($op, $cx);
d1732 2
a1733 1
            return $self->e_anoncode({ code => $self->padval($kid->sibling->targ) });
a1753 6
sub e_anoncode {
    my ($self, $info) = @@_;
    my $text = $self->deparse_sub($info->{code});
    return "sub " . $text;
}

a2010 10
sub pp_smartmatch {
    my ($self, $op, $cx) = @@_;
    if ($op->flags & OPf_SPECIAL) {
	return $self->deparse($op->first, $cx);
    }
    else {
	binop(@@_, "~~", 14);
    }
}

a2345 1
sub pp_say  { indirop(@@_, "say") }
d2379 1
a2379 1
    my $local = "either"; # could be local(...), my(...), state(...) or our(...)
d2397 3
a2399 8
	if ($lop->name =~ /^pad[ash]v$/) {
	    if ($lop->private & OPpPAD_STATE) { # state()
		($local = "", last) if $local =~ /^(?:local|our|my)$/;
		$local = "state";
	    } else { # my()
		($local = "", last) if $local =~ /^(?:local|our|state)$/;
		$local = "my";
	    }
d2404 1
a2404 1
	    ($local = "", last) if $local =~ /^(?:my|local|state)$/;
d2412 1
a2412 1
	    ($local = "", last) if $local =~ /^(?:my|our|state)$/;
d2458 1
a2458 1
	$true = $self->deparse($true, 6);
a2484 8
sub pp_once {
    my ($self, $op, $cx) = @@_;
    my $cond = $op->first;
    my $true = $cond->sibling;

    return $self->deparse($true, $cx);
}

d2490 2
a2491 2
    local(@@$self{qw'curstash warnings hints hinthash'})
		= @@$self{qw'curstash warnings hints hinthash'};
d2593 1
a2593 1
sub pp_leaveloop { shift->loop_common(@@_, "") }
a2621 4
    } elsif ($op->first->name eq "leave") {
	return $self->pp_leave($op->first, $cx);
    } elsif ($op->first->name eq "scope") {
	return $self->pp_scope($op->first, $cx);
d2840 1
a2840 2
sub elem_or_slice_array_name
{
d2842 5
a2846 2
    my ($array, $left, $padname, $allow_arrow) = @@_;

d2848 1
a2848 1
	return $self->padany($array);
d2850 1
a2850 1
	return "{" . $self->deparse($array, 0) . "}";
d2858 2
a2859 3
	return $array;
    } elsif (!$allow_arrow || is_scalar $array) { # $x[0], $$x[0], ...
	return $self->deparse($array, 24);
d2861 4
a2864 1
	return undef;
a2865 7
}

sub elem_or_slice_single_index
{
    my $self = shift;
    my ($idx) = @@_;

d2896 1
a2896 22
    return $idx;
}

sub elem {
    my $self = shift;
    my ($op, $cx, $left, $right, $padname) = @@_;
    my($array, $idx) = ($op->first, $op->first->sibling);

    $idx = $self->elem_or_slice_single_index($idx);

    unless ($array->name eq $padname) { # Maybe this has been fixed	
	$array = $array->first; # skip rv2av (or ex-rv2av in _53+)
    }
    if (my $array_name=$self->elem_or_slice_array_name
	    ($array, $left, $padname, 1)) {
	return "\$" . $array_name . $left . $idx . $right;
    } else {
	# $x[20][3]{hi} or expr->[20]
	my $arrow = is_subscriptable($array) ? "" : "->";
	return $self->deparse($array, 24) . $arrow . $left . $idx . $right;
    }

d2928 7
a2934 1
    $array = $self->elem_or_slice_array_name($array,$left,$padname,0);
d2943 1
a2943 1
	$list = $self->elem_or_slice_single_index($kid);
d2972 1
a2972 1
sub _method {
d2994 1
a2994 1
	    push @@exprs, $kid;
d3001 1
a3001 1
	    push @@exprs, $kid
d3005 1
a3005 1

d3014 2
d3018 2
a3019 20

    return { method => $meth, variable_method => ref($meth),
             object => $obj, args => \@@exprs  };
}

# compat function only
sub method {
    my $self = shift;
    my $info = $self->_method(@@_);
    return $self->e_method( $self->_method(@@_) );
}

sub e_method {
    my ($self, $info) = @@_;
    my $obj = $self->deparse($info->{object}, 24);

    my $meth = $info->{method};
    $meth = $self->deparse($meth, 1) if $info->{variable_method};
    my $args = join(", ", map { $self->deparse($_, 6) } @@{$info->{args}} );
    my $kid = $obj . "->" . $meth;
d3109 1
a3109 2
    return $self->e_method($self->_method($op, $cx))
        unless null $op->first->sibling;
a3134 7
	if (!$amper) {
	    if ($kid eq 'main::') {
		$kid = '::';
	    } elsif ($kid !~ /^(?:\w|::)(?:[\w\d]|::(?!\z))*\z/) {
		$kid = single_delim("q", "'", $kid) . '->';
	    }
	}
d3372 1
a3372 1
    my($ar, $open, $close, $fail, $c, $cnt, $last_bs);
d3375 1
a3375 1
	$fail = 0; $cnt = 0; $last_bs = 0;
a3377 1
		$fail = 1 if $last_bs;
a3379 1
		$fail = 1 if $last_bs;
a3386 1
	    $last_bs = $c eq '\\';
d3533 1
a3533 1
	if ($str =~ /[[:^print:]]/) {
d3617 2
a3618 4
    # skip pushmark if it exists (readpipe() vs ``)
    my $child = $op->first->sibling->isa('B::NULL')
	? $op->first->first : $op->first->sibling;
    return single_delim("qx", '`', $self->dq($child));
d3940 1
a3940 1
	return 0 unless $op->last->name =~ /^(?:[ah]slice|(?:rv2|pad)av)$/;
d4072 1
a4072 1
    # handle special case of split(), and split(' ') that compiles to /\s+/
d4074 4
a4077 4
    if ( $kid->flags & OPf_SPECIAL
	 and ( $] < 5.009 ? $kid->pmflags & PMf_SKIPWHITE()
	      : $kid->reflags & RXf_SKIPWHITE() ) ) {
	$exprs[0] = "' '";
a4551 5
=item %^H

This parameter is used to specify the ambient pragmas which are
stored in the special hash %^H.

a4626 7

=item *

Lexical (my) variables declared in scopes external to a subroutine
appear in code2ref output text as package variables. This is a tricky
problem, as perl has no native facility for refering to a lexical variable
defined within a different scope, although L<PadWalker> is a good start.
@


1.1.1.10
log
@import perl 5.10.1
@
text
@d20 1
a20 1
         CVf_METHOD CVf_LVALUE
d23 2
a24 3
	 ($] < 5.009 ? 'PMf_SKIPWHITE' : 'RXf_SKIPWHITE'),
	 ($] < 5.011 ? 'CVf_LOCKED' : ());
$VERSION = 0.89;
a28 6
BEGIN {
    # Easiest way to keep this code portable between 5.12.x and 5.10.x looks to
    # be to fake up a dummy CVf_LOCKED that will never actually be true.
    *CVf_LOCKED = sub () {0} unless defined &CVf_LOCKED;
}

d1459 2
a1460 2
    ':'     => 1,
);
d1586 2
a1587 4
	my $builtinname = $name;
	$builtinname =~ /^CORE::/ or $builtinname = "CORE::$name";
	if (defined prototype($builtinname)
	   && prototype($builtinname) =~ /^;?\*/
a1626 3
sub pp_aeach { unop(@@_, "each") }
sub pp_avalues { unop(@@_, "values") }
sub pp_akeys { unop(@@_, "keys") }
d1826 3
a1828 1
	if (!null($kid->sibling) and
d2117 1
a2117 1
	return $self->deparse($op->last, $cx);
a2590 6
	if ($newcond->name eq "lineseq")
	{
	    # lineseq to ensure correct line numbers in elsif()
	    # Bug #37302 fixed by change #33710.
	    $newcond = $newcond->first->sibling;
	}
d3204 1
a3204 1
	$proto =~ s/^(\\?[\$\@@&%*_]|\\\[[\$\@@&%*]+\]|;)//;
d3216 1
a3216 1
	    if ($chr eq "\$" || $chr eq "_") {
d3622 1
a3622 2
    }
    if (class($sv) eq "NULL") {
d3795 1
a3795 1
	? $op->first : $op->first->sibling;
a4057 10
sub re_dq_disambiguate {
    my ($first, $last) = @@_;
    # Disambiguate "${foo}bar", "${foo}{bar}", "${foo}[1]"
    ($last =~ /^[A-Z\\\^\[\]_?]/ &&
	$first =~ s/([\$@@])\^$/${1}{^}/)  # "${^}W" etc
	|| ($last =~ /^[{\[\w_]/ &&
	    $first =~ s/([\$@@])([A-Za-z_]\w*)$/${1}{$2}/);
    return $first . $last;
}

d4073 8
a4080 1
	return re_dq_disambiguate($first, $last);
d4152 1
a4152 3
	    my $first = $str;
	    my $last = $self->re_dq($kid, $extended);
	    $str = re_dq_disambiguate($first, $last);
d4598 3
a4600 1
after B<-MO=Deparse> should be given as separate strings.
a4794 2
    use constant H => { "#" => 1 }; H->{"#"};

a4809 4

    foreach my $i (@@_) { 0 }
  =>
    foreach my $i (@@_) { '???' }
@


